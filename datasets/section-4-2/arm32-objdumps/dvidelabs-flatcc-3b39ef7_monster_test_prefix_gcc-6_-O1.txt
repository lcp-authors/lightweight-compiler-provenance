
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

00012290 <.init>:
   12290:	push	{r3, lr}
   12294:	bl	12394 <_start@@Base+0x3c>
   12298:	pop	{r3, pc}

Disassembly of section .plt:

0001229c <free@plt-0x14>:
   1229c:	push	{lr}		; (str lr, [sp, #-4]!)
   122a0:	ldr	lr, [pc, #4]	; 122ac <free@plt-0x4>
   122a4:	add	lr, pc, lr
   122a8:	ldr	pc, [lr, #8]!
   122ac:	andeq	r7, r1, r4, asr sp

000122b0 <free@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #94208	; 0x17000
   122b8:	ldr	pc, [ip, #3412]!	; 0xd54

000122bc <memcpy@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #94208	; 0x17000
   122c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000122c8 <memcmp@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #94208	; 0x17000
   122d0:	ldr	pc, [ip, #3396]!	; 0xd44

000122d4 <realloc@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #94208	; 0x17000
   122dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000122e0 <malloc@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #94208	; 0x17000
   122e8:	ldr	pc, [ip, #3380]!	; 0xd34

000122ec <__libc_start_main@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #94208	; 0x17000
   122f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000122f8 <__gmon_start__@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #94208	; 0x17000
   12300:	ldr	pc, [ip, #3364]!	; 0xd24

00012304 <strlen@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #94208	; 0x17000
   1230c:	ldr	pc, [ip, #3356]!	; 0xd1c

00012310 <posix_memalign@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #94208	; 0x17000
   12318:	ldr	pc, [ip, #3348]!	; 0xd14

0001231c <memset@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #94208	; 0x17000
   12324:	ldr	pc, [ip, #3340]!	; 0xd0c

00012328 <strncpy@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #94208	; 0x17000
   12330:	ldr	pc, [ip, #3332]!	; 0xd04

00012334 <memchr@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #94208	; 0x17000
   1233c:	ldr	pc, [ip, #3324]!	; 0xcfc

00012340 <abort@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #94208	; 0x17000
   12348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001234c <__assert_fail@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #94208	; 0x17000
   12354:	ldr	pc, [ip, #3308]!	; 0xcec

Disassembly of section .text:

00012358 <_start@@Base>:
   12358:	mov	fp, #0
   1235c:	mov	lr, #0
   12360:	pop	{r1}		; (ldr r1, [sp], #4)
   12364:	mov	r2, sp
   12368:	push	{r2}		; (str r2, [sp, #-4]!)
   1236c:	push	{r0}		; (str r0, [sp, #-4]!)
   12370:	ldr	ip, [pc, #16]	; 12388 <_start@@Base+0x30>
   12374:	push	{ip}		; (str ip, [sp, #-4]!)
   12378:	ldr	r0, [pc, #12]	; 1238c <_start@@Base+0x34>
   1237c:	ldr	r3, [pc, #12]	; 12390 <_start@@Base+0x38>
   12380:	bl	122ec <__libc_start_main@plt>
   12384:	bl	12340 <abort@plt>
   12388:	andeq	r8, r1, ip, lsr fp
   1238c:	andeq	r2, r1, ip, ror #27
   12390:	ldrdeq	r8, [r1], -ip
   12394:	ldr	r3, [pc, #20]	; 123b0 <_start@@Base+0x58>
   12398:	ldr	r2, [pc, #20]	; 123b4 <_start@@Base+0x5c>
   1239c:	add	r3, pc, r3
   123a0:	ldr	r2, [r3, r2]
   123a4:	cmp	r2, #0
   123a8:	bxeq	lr
   123ac:	b	122f8 <__gmon_start__@plt>
   123b0:	andeq	r7, r1, ip, asr ip
   123b4:	andeq	r0, r0, r4, asr #32
   123b8:	ldr	r3, [pc, #28]	; 123dc <_start@@Base+0x84>
   123bc:	ldr	r0, [pc, #28]	; 123e0 <_start@@Base+0x88>
   123c0:	sub	r3, r3, r0
   123c4:	cmp	r3, #6
   123c8:	bxls	lr
   123cc:	ldr	r3, [pc, #16]	; 123e4 <_start@@Base+0x8c>
   123d0:	cmp	r3, #0
   123d4:	bxeq	lr
   123d8:	bx	r3
   123dc:	andeq	sl, r2, r3, asr r0
   123e0:	andeq	sl, r2, r0, asr r0
   123e4:	andeq	r0, r0, r0
   123e8:	ldr	r1, [pc, #36]	; 12414 <_start@@Base+0xbc>
   123ec:	ldr	r0, [pc, #36]	; 12418 <_start@@Base+0xc0>
   123f0:	sub	r1, r1, r0
   123f4:	asr	r1, r1, #2
   123f8:	add	r1, r1, r1, lsr #31
   123fc:	asrs	r1, r1, #1
   12400:	bxeq	lr
   12404:	ldr	r3, [pc, #16]	; 1241c <_start@@Base+0xc4>
   12408:	cmp	r3, #0
   1240c:	bxeq	lr
   12410:	bx	r3
   12414:	andeq	sl, r2, r0, asr r0
   12418:	andeq	sl, r2, r0, asr r0
   1241c:	andeq	r0, r0, r0
   12420:	push	{r4, lr}
   12424:	ldr	r4, [pc, #24]	; 12444 <_start@@Base+0xec>
   12428:	ldrb	r3, [r4]
   1242c:	cmp	r3, #0
   12430:	popne	{r4, pc}
   12434:	bl	123b8 <_start@@Base+0x60>
   12438:	mov	r3, #1
   1243c:	strb	r3, [r4]
   12440:	pop	{r4, pc}
   12444:	andeq	sl, r2, r0, asr r0
   12448:	ldr	r0, [pc, #40]	; 12478 <_start@@Base+0x120>
   1244c:	ldr	r3, [r0]
   12450:	cmp	r3, #0
   12454:	bne	1245c <_start@@Base+0x104>
   12458:	b	123e8 <_start@@Base+0x90>
   1245c:	ldr	r3, [pc, #24]	; 1247c <_start@@Base+0x124>
   12460:	cmp	r3, #0
   12464:	beq	12458 <_start@@Base+0x100>
   12468:	push	{r4, lr}
   1246c:	blx	r3
   12470:	pop	{r4, lr}
   12474:	b	123e8 <_start@@Base+0x90>
   12478:	andeq	r9, r2, r4, lsl pc
   1247c:	andeq	r0, r0, r0
   12480:	mov	r0, #0
   12484:	bx	lr
   12488:	mov	r0, #0
   1248c:	bx	lr
   12490:	push	{r4, lr}
   12494:	mov	r3, #4
   12498:	mov	r2, r3
   1249c:	mov	r1, #0
   124a0:	bl	17818 <flatcc_verify_field@@Base>
   124a4:	pop	{r4, pc}
   124a8:	push	{r4, lr}
   124ac:	mov	r4, r0
   124b0:	mov	r3, #8
   124b4:	mov	r2, r3
   124b8:	mov	r1, #0
   124bc:	bl	17818 <flatcc_verify_field@@Base>
   124c0:	cmp	r0, #0
   124c4:	popne	{r4, pc}
   124c8:	mov	r3, #4
   124cc:	mov	r2, r3
   124d0:	mov	r1, #1
   124d4:	mov	r0, r4
   124d8:	bl	17818 <flatcc_verify_field@@Base>
   124dc:	pop	{r4, pc}
   124e0:	push	{r4, lr}
   124e4:	mov	r4, r0
   124e8:	mov	r3, #8
   124ec:	mov	r2, r3
   124f0:	mov	r1, #0
   124f4:	bl	17818 <flatcc_verify_field@@Base>
   124f8:	cmp	r0, #0
   124fc:	popne	{r4, pc}
   12500:	mov	r3, #4
   12504:	mov	r2, r3
   12508:	mov	r1, #1
   1250c:	mov	r0, r4
   12510:	bl	17818 <flatcc_verify_field@@Base>
   12514:	pop	{r4, pc}
   12518:	push	{r4, lr}
   1251c:	mov	r4, r0
   12520:	mov	r3, #1
   12524:	mov	r2, r3
   12528:	mov	r1, #0
   1252c:	bl	17818 <flatcc_verify_field@@Base>
   12530:	cmp	r0, #0
   12534:	popne	{r4, pc}
   12538:	mov	r3, #1
   1253c:	mov	r2, r3
   12540:	mov	r1, r3
   12544:	mov	r0, r4
   12548:	bl	17818 <flatcc_verify_field@@Base>
   1254c:	cmp	r0, #0
   12550:	popne	{r4, pc}
   12554:	mov	r3, #1
   12558:	mov	r2, r3
   1255c:	mov	r1, #2
   12560:	mov	r0, r4
   12564:	bl	17818 <flatcc_verify_field@@Base>
   12568:	cmp	r0, #0
   1256c:	popne	{r4, pc}
   12570:	mov	r3, #1
   12574:	mov	r2, r3
   12578:	mov	r1, #3
   1257c:	mov	r0, r4
   12580:	bl	17818 <flatcc_verify_field@@Base>
   12584:	pop	{r4, pc}
   12588:	push	{r4, lr}
   1258c:	mov	r4, r0
   12590:	mov	r2, #0
   12594:	mov	r1, r2
   12598:	bl	17890 <flatcc_verify_string_field@@Base>
   1259c:	cmp	r0, #0
   125a0:	popne	{r4, pc}
   125a4:	mov	r3, #8
   125a8:	mov	r2, r3
   125ac:	mov	r1, #1
   125b0:	mov	r0, r4
   125b4:	bl	17818 <flatcc_verify_field@@Base>
   125b8:	cmp	r0, #0
   125bc:	popne	{r4, pc}
   125c0:	mov	r3, #2
   125c4:	mov	r2, r3
   125c8:	mov	r1, r3
   125cc:	mov	r0, r4
   125d0:	bl	17818 <flatcc_verify_field@@Base>
   125d4:	pop	{r4, pc}
   125d8:	push	{r4, lr}
   125dc:	mov	r4, r0
   125e0:	mov	r2, #0
   125e4:	mov	r1, r2
   125e8:	bl	17890 <flatcc_verify_string_field@@Base>
   125ec:	cmp	r0, #0
   125f0:	popne	{r4, pc}
   125f4:	mov	r3, #4
   125f8:	mov	r2, r3
   125fc:	mov	r1, #1
   12600:	mov	r0, r4
   12604:	bl	17818 <flatcc_verify_field@@Base>
   12608:	cmp	r0, #0
   1260c:	popne	{r4, pc}
   12610:	mov	r2, #0
   12614:	mov	r1, #2
   12618:	mov	r0, r4
   1261c:	bl	17890 <flatcc_verify_string_field@@Base>
   12620:	cmp	r0, #0
   12624:	popne	{r4, pc}
   12628:	mov	r3, #8
   1262c:	mov	r2, r3
   12630:	mov	r1, #3
   12634:	mov	r0, r4
   12638:	bl	17818 <flatcc_verify_field@@Base>
   1263c:	cmp	r0, #0
   12640:	popne	{r4, pc}
   12644:	mov	r2, #0
   12648:	mov	r1, #4
   1264c:	mov	r0, r4
   12650:	bl	17890 <flatcc_verify_string_field@@Base>
   12654:	cmp	r0, #0
   12658:	popne	{r4, pc}
   1265c:	mov	r3, #8
   12660:	mov	r2, r3
   12664:	mov	r1, #5
   12668:	mov	r0, r4
   1266c:	bl	17818 <flatcc_verify_field@@Base>
   12670:	cmp	r0, #0
   12674:	popne	{r4, pc}
   12678:	mov	r3, #4
   1267c:	mov	r2, r3
   12680:	mov	r1, #6
   12684:	mov	r0, r4
   12688:	bl	17818 <flatcc_verify_field@@Base>
   1268c:	cmp	r0, #0
   12690:	popne	{r4, pc}
   12694:	mov	r3, #8
   12698:	mov	r2, r3
   1269c:	mov	r1, #7
   126a0:	mov	r0, r4
   126a4:	bl	17818 <flatcc_verify_field@@Base>
   126a8:	cmp	r0, #0
   126ac:	popne	{r4, pc}
   126b0:	mov	r3, #4
   126b4:	mov	r2, r3
   126b8:	mov	r1, #8
   126bc:	mov	r0, r4
   126c0:	bl	17818 <flatcc_verify_field@@Base>
   126c4:	pop	{r4, pc}
   126c8:	push	{r4, lr}
   126cc:	mov	r4, r0
   126d0:	ldr	r3, [pc, #68]	; 1271c <_start@@Base+0x3c4>
   126d4:	mov	r2, #0
   126d8:	mov	r1, r2
   126dc:	bl	17b1c <flatcc_verify_table_field@@Base>
   126e0:	cmp	r0, #0
   126e4:	popne	{r4, pc}
   126e8:	ldr	r3, [pc, #48]	; 12720 <_start@@Base+0x3c8>
   126ec:	mov	r2, #0
   126f0:	mov	r1, #1
   126f4:	mov	r0, r4
   126f8:	bl	17b1c <flatcc_verify_table_field@@Base>
   126fc:	cmp	r0, #0
   12700:	popne	{r4, pc}
   12704:	ldr	r3, [pc, #24]	; 12724 <_start@@Base+0x3cc>
   12708:	mov	r2, #0
   1270c:	mov	r1, #2
   12710:	mov	r0, r4
   12714:	bl	17b1c <flatcc_verify_table_field@@Base>
   12718:	pop	{r4, pc}
   1271c:	ldrdeq	r2, [r1], -r8
   12720:	andeq	r2, r1, r0, ror #9
   12724:	andeq	r2, r1, r8, lsr #9
   12728:	push	{r4, lr}
   1272c:	sub	sp, sp, #8
   12730:	mov	r4, r0
   12734:	mov	r3, #16
   12738:	mov	r2, #32
   1273c:	mov	r1, #0
   12740:	bl	17818 <flatcc_verify_field@@Base>
   12744:	cmp	r0, #0
   12748:	beq	12754 <_start@@Base+0x3fc>
   1274c:	add	sp, sp, #8
   12750:	pop	{r4, pc}
   12754:	mov	r3, #2
   12758:	mov	r2, r3
   1275c:	mov	r1, r3
   12760:	mov	r0, r4
   12764:	bl	17818 <flatcc_verify_field@@Base>
   12768:	cmp	r0, #0
   1276c:	bne	1274c <_start@@Base+0x3f4>
   12770:	mov	r3, #2
   12774:	mov	r2, r3
   12778:	mov	r1, #1
   1277c:	mov	r0, r4
   12780:	bl	17818 <flatcc_verify_field@@Base>
   12784:	cmp	r0, #0
   12788:	bne	1274c <_start@@Base+0x3f4>
   1278c:	mov	r2, #1
   12790:	mov	r1, #3
   12794:	mov	r0, r4
   12798:	bl	17890 <flatcc_verify_string_field@@Base>
   1279c:	cmp	r0, #0
   127a0:	bne	1274c <_start@@Base+0x3f4>
   127a4:	mov	r3, #1
   127a8:	mov	r2, r3
   127ac:	mov	r1, #6
   127b0:	mov	r0, r4
   127b4:	bl	17818 <flatcc_verify_field@@Base>
   127b8:	cmp	r0, #0
   127bc:	bne	1274c <_start@@Base+0x3f4>
   127c0:	mvn	r3, #0
   127c4:	str	r3, [sp, #4]
   127c8:	mov	r3, #1
   127cc:	str	r3, [sp]
   127d0:	mov	r2, #0
   127d4:	mov	r1, #5
   127d8:	mov	r0, r4
   127dc:	bl	17924 <flatcc_verify_vector_field@@Base>
   127e0:	cmp	r0, #0
   127e4:	bne	1274c <_start@@Base+0x3f4>
   127e8:	ldr	r3, [pc, #876]	; 12b5c <_start@@Base+0x804>
   127ec:	mov	r2, #0
   127f0:	mov	r1, #11
   127f4:	mov	r0, r4
   127f8:	bl	17c34 <flatcc_verify_table_vector_field@@Base>
   127fc:	cmp	r0, #0
   12800:	bne	1274c <_start@@Base+0x3f4>
   12804:	mov	r2, #0
   12808:	mov	r1, #10
   1280c:	mov	r0, r4
   12810:	bl	179d4 <flatcc_verify_string_vector_field@@Base>
   12814:	cmp	r0, #0
   12818:	bne	1274c <_start@@Base+0x3f4>
   1281c:	mov	r2, #0
   12820:	mov	r1, #28
   12824:	mov	r0, r4
   12828:	bl	179d4 <flatcc_verify_string_vector_field@@Base>
   1282c:	cmp	r0, #0
   12830:	bne	1274c <_start@@Base+0x3f4>
   12834:	mvn	r3, #0
   12838:	str	r3, [sp, #4]
   1283c:	mov	r3, #1
   12840:	str	r3, [sp]
   12844:	mov	r2, #0
   12848:	mov	r1, #24
   1284c:	mov	r0, r4
   12850:	bl	17924 <flatcc_verify_vector_field@@Base>
   12854:	cmp	r0, #0
   12858:	bne	1274c <_start@@Base+0x3f4>
   1285c:	mvn	r3, #-536870912	; 0xe0000000
   12860:	str	r3, [sp, #4]
   12864:	mov	r3, #4
   12868:	str	r3, [sp]
   1286c:	mov	r3, #8
   12870:	mov	r2, #0
   12874:	mov	r1, #29
   12878:	mov	r0, r4
   1287c:	bl	17924 <flatcc_verify_vector_field@@Base>
   12880:	cmp	r0, #0
   12884:	bne	1274c <_start@@Base+0x3f4>
   12888:	ldr	r3, [pc, #716]	; 12b5c <_start@@Base+0x804>
   1288c:	mov	r2, #0
   12890:	mov	r1, #12
   12894:	mov	r0, r4
   12898:	bl	17b1c <flatcc_verify_table_field@@Base>
   1289c:	cmp	r0, #0
   128a0:	bne	1274c <_start@@Base+0x3f4>
   128a4:	ldr	r3, [pc, #692]	; 12b60 <_start@@Base+0x808>
   128a8:	mov	r2, #0
   128ac:	mov	r1, #8
   128b0:	mov	r0, r4
   128b4:	bl	1870c <flatcc_verify_union_field@@Base>
   128b8:	cmp	r0, #0
   128bc:	bne	1274c <_start@@Base+0x3f4>
   128c0:	mvn	r3, #-1073741824	; 0xc0000000
   128c4:	str	r3, [sp, #4]
   128c8:	mov	r3, #2
   128cc:	str	r3, [sp]
   128d0:	mov	r3, #4
   128d4:	mov	r2, #0
   128d8:	mov	r1, #9
   128dc:	mov	r0, r4
   128e0:	bl	17924 <flatcc_verify_vector_field@@Base>
   128e4:	cmp	r0, #0
   128e8:	bne	1274c <_start@@Base+0x3f4>
   128ec:	mvn	r3, #-1073741824	; 0xc0000000
   128f0:	str	r3, [sp, #4]
   128f4:	mov	r3, #2
   128f8:	str	r3, [sp]
   128fc:	mov	r3, #4
   12900:	mov	r2, #0
   12904:	mov	r1, #31
   12908:	mov	r0, r4
   1290c:	bl	17924 <flatcc_verify_vector_field@@Base>
   12910:	cmp	r0, #0
   12914:	bne	1274c <_start@@Base+0x3f4>
   12918:	ldr	r3, [pc, #572]	; 12b5c <_start@@Base+0x804>
   1291c:	str	r3, [sp, #4]
   12920:	mov	r3, #1
   12924:	str	r3, [sp]
   12928:	mov	r3, #0
   1292c:	mov	r2, r3
   12930:	mov	r1, #13
   12934:	mov	r0, r4
   12938:	bl	1854c <flatcc_verify_table_as_nested_root@@Base>
   1293c:	cmp	r0, #0
   12940:	bne	1274c <_start@@Base+0x3f4>
   12944:	ldr	r3, [pc, #536]	; 12b64 <_start@@Base+0x80c>
   12948:	mov	r2, #0
   1294c:	mov	r1, #14
   12950:	mov	r0, r4
   12954:	bl	17b1c <flatcc_verify_table_field@@Base>
   12958:	cmp	r0, #0
   1295c:	bne	1274c <_start@@Base+0x3f4>
   12960:	mov	r3, #1
   12964:	mov	r2, r3
   12968:	mov	r1, #15
   1296c:	mov	r0, r4
   12970:	bl	17818 <flatcc_verify_field@@Base>
   12974:	cmp	r0, #0
   12978:	bne	1274c <_start@@Base+0x3f4>
   1297c:	mov	r3, #4
   12980:	mov	r2, r3
   12984:	mov	r1, #16
   12988:	mov	r0, r4
   1298c:	bl	17818 <flatcc_verify_field@@Base>
   12990:	cmp	r0, #0
   12994:	bne	1274c <_start@@Base+0x3f4>
   12998:	mov	r3, #4
   1299c:	mov	r2, r3
   129a0:	mov	r1, #17
   129a4:	mov	r0, r4
   129a8:	bl	17818 <flatcc_verify_field@@Base>
   129ac:	cmp	r0, #0
   129b0:	bne	1274c <_start@@Base+0x3f4>
   129b4:	mov	r3, #8
   129b8:	mov	r2, r3
   129bc:	mov	r1, #18
   129c0:	mov	r0, r4
   129c4:	bl	17818 <flatcc_verify_field@@Base>
   129c8:	cmp	r0, #0
   129cc:	bne	1274c <_start@@Base+0x3f4>
   129d0:	mov	r3, #8
   129d4:	mov	r2, r3
   129d8:	mov	r1, #19
   129dc:	mov	r0, r4
   129e0:	bl	17818 <flatcc_verify_field@@Base>
   129e4:	cmp	r0, #0
   129e8:	bne	1274c <_start@@Base+0x3f4>
   129ec:	mov	r3, #4
   129f0:	mov	r2, r3
   129f4:	mov	r1, #20
   129f8:	mov	r0, r4
   129fc:	bl	17818 <flatcc_verify_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	1274c <_start@@Base+0x3f4>
   12a08:	mov	r3, #4
   12a0c:	mov	r2, r3
   12a10:	mov	r1, #21
   12a14:	mov	r0, r4
   12a18:	bl	17818 <flatcc_verify_field@@Base>
   12a1c:	cmp	r0, #0
   12a20:	bne	1274c <_start@@Base+0x3f4>
   12a24:	mov	r3, #8
   12a28:	mov	r2, r3
   12a2c:	mov	r1, #22
   12a30:	mov	r0, r4
   12a34:	bl	17818 <flatcc_verify_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	1274c <_start@@Base+0x3f4>
   12a40:	mov	r3, #8
   12a44:	mov	r2, r3
   12a48:	mov	r1, #23
   12a4c:	mov	r0, r4
   12a50:	bl	17818 <flatcc_verify_field@@Base>
   12a54:	cmp	r0, #0
   12a58:	bne	1274c <_start@@Base+0x3f4>
   12a5c:	mov	r3, #4
   12a60:	mov	r2, r3
   12a64:	mov	r1, #25
   12a68:	mov	r0, r4
   12a6c:	bl	17818 <flatcc_verify_field@@Base>
   12a70:	cmp	r0, #0
   12a74:	bne	1274c <_start@@Base+0x3f4>
   12a78:	mov	r3, #4
   12a7c:	mov	r2, r3
   12a80:	mov	r1, #26
   12a84:	mov	r0, r4
   12a88:	bl	17818 <flatcc_verify_field@@Base>
   12a8c:	cmp	r0, #0
   12a90:	bne	1274c <_start@@Base+0x3f4>
   12a94:	mov	r3, #4
   12a98:	mov	r2, r3
   12a9c:	mov	r1, #27
   12aa0:	mov	r0, r4
   12aa4:	bl	17818 <flatcc_verify_field@@Base>
   12aa8:	cmp	r0, #0
   12aac:	bne	1274c <_start@@Base+0x3f4>
   12ab0:	mvn	r3, #0
   12ab4:	str	r3, [sp, #4]
   12ab8:	mov	r3, #1
   12abc:	str	r3, [sp]
   12ac0:	mov	r2, #0
   12ac4:	mov	r1, #30
   12ac8:	mov	r0, r4
   12acc:	bl	17924 <flatcc_verify_vector_field@@Base>
   12ad0:	cmp	r0, #0
   12ad4:	bne	1274c <_start@@Base+0x3f4>
   12ad8:	mvn	r3, #-536870912	; 0xe0000000
   12adc:	str	r3, [sp, #4]
   12ae0:	mov	r3, #8
   12ae4:	str	r3, [sp]
   12ae8:	mov	r2, #0
   12aec:	mov	r1, #32
   12af0:	mov	r0, r4
   12af4:	bl	17924 <flatcc_verify_vector_field@@Base>
   12af8:	cmp	r0, #0
   12afc:	bne	1274c <_start@@Base+0x3f4>
   12b00:	mvn	r3, #-536870912	; 0xe0000000
   12b04:	str	r3, [sp, #4]
   12b08:	mov	r3, #8
   12b0c:	str	r3, [sp]
   12b10:	mov	r2, #0
   12b14:	mov	r1, #33	; 0x21
   12b18:	mov	r0, r4
   12b1c:	bl	17924 <flatcc_verify_vector_field@@Base>
   12b20:	cmp	r0, #0
   12b24:	bne	1274c <_start@@Base+0x3f4>
   12b28:	ldr	r3, [pc, #56]	; 12b68 <_start@@Base+0x810>
   12b2c:	mov	r2, #0
   12b30:	mov	r1, #34	; 0x22
   12b34:	mov	r0, r4
   12b38:	bl	17b1c <flatcc_verify_table_field@@Base>
   12b3c:	cmp	r0, #0
   12b40:	bne	1274c <_start@@Base+0x3f4>
   12b44:	ldr	r3, [pc, #32]	; 12b6c <_start@@Base+0x814>
   12b48:	mov	r2, #0
   12b4c:	mov	r1, #35	; 0x23
   12b50:	mov	r0, r4
   12b54:	bl	17b1c <flatcc_verify_table_field@@Base>
   12b58:	b	1274c <_start@@Base+0x3f4>
   12b5c:	andeq	r2, r1, r8, lsr #14
   12b60:	strdeq	r2, [r1], -ip
   12b64:	andeq	r2, r1, r8, lsl #11
   12b68:	andeq	r2, r1, r0, lsl #9
   12b6c:	andeq	r2, r1, r0, ror fp
   12b70:	push	{r4, lr}
   12b74:	sub	sp, sp, #8
   12b78:	mov	r4, r0
   12b7c:	mvn	r3, #0
   12b80:	str	r3, [sp, #4]
   12b84:	mov	r3, #1
   12b88:	str	r3, [sp]
   12b8c:	mov	r2, #0
   12b90:	mov	r1, r2
   12b94:	bl	17924 <flatcc_verify_vector_field@@Base>
   12b98:	cmp	r0, #0
   12b9c:	beq	12ba8 <_start@@Base+0x850>
   12ba0:	add	sp, sp, #8
   12ba4:	pop	{r4, pc}
   12ba8:	mvn	r3, #0
   12bac:	str	r3, [sp, #4]
   12bb0:	mov	r1, #1
   12bb4:	str	r1, [sp]
   12bb8:	mov	r3, r1
   12bbc:	mov	r2, #0
   12bc0:	mov	r0, r4
   12bc4:	bl	17924 <flatcc_verify_vector_field@@Base>
   12bc8:	cmp	r0, #0
   12bcc:	bne	12ba0 <_start@@Base+0x848>
   12bd0:	ldr	r3, [pc, #32]	; 12bf8 <_start@@Base+0x8a0>
   12bd4:	str	r3, [sp, #4]
   12bd8:	mov	r3, #1
   12bdc:	str	r3, [sp]
   12be0:	mov	r3, #0
   12be4:	mov	r2, r3
   12be8:	mov	r1, #2
   12bec:	mov	r0, r4
   12bf0:	bl	1854c <flatcc_verify_table_as_nested_root@@Base>
   12bf4:	b	12ba0 <_start@@Base+0x848>
   12bf8:	andeq	r2, r1, r8, lsr #14
   12bfc:	push	{r4, lr}
   12c00:	ldrb	r3, [r0, #12]
   12c04:	sub	r3, r3, #1
   12c08:	cmp	r3, #3
   12c0c:	ldrls	pc, [pc, r3, lsl #2]
   12c10:	b	12c54 <_start@@Base+0x8fc>
   12c14:	andeq	r2, r1, r4, lsr #24
   12c18:	andeq	r2, r1, r0, lsr ip
   12c1c:	andeq	r2, r1, ip, lsr ip
   12c20:	andeq	r2, r1, r8, asr #24
   12c24:	ldr	r1, [pc, #48]	; 12c5c <_start@@Base+0x904>
   12c28:	bl	17ec4 <flatcc_verify_union_table@@Base>
   12c2c:	pop	{r4, pc}
   12c30:	ldr	r1, [pc, #40]	; 12c60 <_start@@Base+0x908>
   12c34:	bl	17ec4 <flatcc_verify_union_table@@Base>
   12c38:	pop	{r4, pc}
   12c3c:	ldr	r1, [pc, #32]	; 12c64 <_start@@Base+0x90c>
   12c40:	bl	17ec4 <flatcc_verify_union_table@@Base>
   12c44:	pop	{r4, pc}
   12c48:	ldr	r1, [pc, #24]	; 12c68 <_start@@Base+0x910>
   12c4c:	bl	17ec4 <flatcc_verify_union_table@@Base>
   12c50:	pop	{r4, pc}
   12c54:	mov	r0, #0
   12c58:	pop	{r4, pc}
   12c5c:	andeq	r2, r1, r8, lsr #14
   12c60:	andeq	r2, r1, r8, lsl r5
   12c64:	andeq	r2, r1, r8, lsl #9
   12c68:	andeq	r2, r1, ip, ror #24
   12c6c:	push	{r4, lr}
   12c70:	mov	r4, r0
   12c74:	ldr	r3, [pc, #68]	; 12cc0 <_start@@Base+0x968>
   12c78:	mov	r2, #0
   12c7c:	mov	r1, r2
   12c80:	bl	17b1c <flatcc_verify_table_field@@Base>
   12c84:	cmp	r0, #0
   12c88:	popne	{r4, pc}
   12c8c:	ldr	r3, [pc, #48]	; 12cc4 <_start@@Base+0x96c>
   12c90:	mov	r2, #0
   12c94:	mov	r1, #1
   12c98:	mov	r0, r4
   12c9c:	bl	17b1c <flatcc_verify_table_field@@Base>
   12ca0:	cmp	r0, #0
   12ca4:	popne	{r4, pc}
   12ca8:	ldr	r3, [pc, #24]	; 12cc8 <_start@@Base+0x970>
   12cac:	mov	r2, #0
   12cb0:	mov	r1, #3
   12cb4:	mov	r0, r4
   12cb8:	bl	1885c <flatcc_verify_union_vector_field@@Base>
   12cbc:	pop	{r4, pc}
   12cc0:	andeq	r2, r1, r8, asr #13
   12cc4:	andeq	r2, r1, ip, asr #25
   12cc8:	strdeq	r2, [r1], -ip
   12ccc:	push	{r4, lr}
   12cd0:	mov	r4, r0
   12cd4:	ldr	r3, [pc, #124]	; 12d58 <_start@@Base+0xa00>
   12cd8:	mov	r2, #0
   12cdc:	mov	r1, #1
   12ce0:	bl	1870c <flatcc_verify_union_field@@Base>
   12ce4:	cmp	r0, #0
   12ce8:	popne	{r4, pc}
   12cec:	ldr	r3, [pc, #100]	; 12d58 <_start@@Base+0xa00>
   12cf0:	mov	r2, #0
   12cf4:	mov	r1, #3
   12cf8:	mov	r0, r4
   12cfc:	bl	1870c <flatcc_verify_union_field@@Base>
   12d00:	cmp	r0, #0
   12d04:	popne	{r4, pc}
   12d08:	ldr	r3, [pc, #72]	; 12d58 <_start@@Base+0xa00>
   12d0c:	mov	r2, #0
   12d10:	mov	r1, #5
   12d14:	mov	r0, r4
   12d18:	bl	1870c <flatcc_verify_union_field@@Base>
   12d1c:	cmp	r0, #0
   12d20:	popne	{r4, pc}
   12d24:	ldr	r3, [pc, #44]	; 12d58 <_start@@Base+0xa00>
   12d28:	mov	r2, #0
   12d2c:	mov	r1, #7
   12d30:	mov	r0, r4
   12d34:	bl	1870c <flatcc_verify_union_field@@Base>
   12d38:	cmp	r0, #0
   12d3c:	popne	{r4, pc}
   12d40:	ldr	r3, [pc, #16]	; 12d58 <_start@@Base+0xa00>
   12d44:	mov	r2, #0
   12d48:	mov	r1, #9
   12d4c:	mov	r0, r4
   12d50:	bl	1885c <flatcc_verify_union_vector_field@@Base>
   12d54:	pop	{r4, pc}
   12d58:	andeq	r2, r1, ip, asr sp
   12d5c:	push	{r4, lr}
   12d60:	ldrb	r3, [r0, #12]
   12d64:	cmp	r3, #9
   12d68:	beq	12db8 <_start@@Base+0xa60>
   12d6c:	bls	12d8c <_start@@Base+0xa34>
   12d70:	cmp	r3, #11
   12d74:	beq	12dd8 <_start@@Base+0xa80>
   12d78:	bcc	12dc8 <_start@@Base+0xa70>
   12d7c:	cmp	r3, #255	; 0xff
   12d80:	bne	12de0 <_start@@Base+0xa88>
   12d84:	bl	18028 <flatcc_verify_union_string@@Base>
   12d88:	pop	{r4, pc}
   12d8c:	cmp	r3, #2
   12d90:	beq	12dac <_start@@Base+0xa54>
   12d94:	cmp	r3, #8
   12d98:	bne	12de0 <_start@@Base+0xa88>
   12d9c:	mov	r2, #2
   12da0:	mov	r1, r2
   12da4:	bl	17fbc <flatcc_verify_union_struct@@Base>
   12da8:	pop	{r4, pc}
   12dac:	ldr	r1, [pc, #52]	; 12de8 <_start@@Base+0xa90>
   12db0:	bl	17ec4 <flatcc_verify_union_table@@Base>
   12db4:	pop	{r4, pc}
   12db8:	mov	r2, #4
   12dbc:	mov	r1, r2
   12dc0:	bl	17fbc <flatcc_verify_union_struct@@Base>
   12dc4:	pop	{r4, pc}
   12dc8:	mov	r2, #4
   12dcc:	mov	r1, r2
   12dd0:	bl	17fbc <flatcc_verify_union_struct@@Base>
   12dd4:	pop	{r4, pc}
   12dd8:	bl	18028 <flatcc_verify_union_string@@Base>
   12ddc:	pop	{r4, pc}
   12de0:	mov	r0, #0
   12de4:	pop	{r4, pc}
   12de8:	muleq	r1, r0, r4

00012dec <main@@Base>:
   12dec:	push	{r4, lr}
   12df0:	sub	sp, sp, #240	; 0xf0
   12df4:	add	r0, sp, #4
   12df8:	bl	13560 <flatcc_builder_init@@Base>
   12dfc:	mov	r3, #0
   12e00:	mov	r2, r3
   12e04:	ldr	r1, [pc, #180]	; 12ec0 <main@@Base+0xd4>
   12e08:	add	r0, sp, #4
   12e0c:	bl	13e94 <flatcc_builder_start_buffer@@Base>
   12e10:	cmp	r0, #0
   12e14:	bne	12e24 <main@@Base+0x38>
   12e18:	mov	r1, #36	; 0x24
   12e1c:	add	r0, sp, #4
   12e20:	bl	14cc0 <flatcc_builder_start_table@@Base>
   12e24:	ldr	r1, [pc, #152]	; 12ec4 <main@@Base+0xd8>
   12e28:	add	r0, sp, #4
   12e2c:	bl	16548 <flatcc_builder_create_string_str@@Base>
   12e30:	subs	r4, r0, #0
   12e34:	beq	12e4c <main@@Base+0x60>
   12e38:	mov	r1, #3
   12e3c:	add	r0, sp, #4
   12e40:	bl	16888 <flatcc_builder_table_add_offset@@Base>
   12e44:	cmp	r0, #0
   12e48:	strne	r4, [r0]
   12e4c:	mov	r2, #1
   12e50:	ldr	r1, [pc, #112]	; 12ec8 <main@@Base+0xdc>
   12e54:	add	r0, sp, #4
   12e58:	bl	15664 <flatcc_builder_check_required@@Base>
   12e5c:	cmp	r0, #0
   12e60:	beq	12eac <main@@Base+0xc0>
   12e64:	add	r0, sp, #4
   12e68:	bl	15710 <flatcc_builder_end_table@@Base>
   12e6c:	mov	r1, r0
   12e70:	add	r0, sp, #4
   12e74:	bl	13f4c <flatcc_builder_end_buffer@@Base>
   12e78:	add	r1, sp, #236	; 0xec
   12e7c:	add	r0, sp, #4
   12e80:	bl	16cd8 <flatcc_builder_get_direct_buffer@@Base>
   12e84:	ldr	r3, [pc, #64]	; 12ecc <main@@Base+0xe0>
   12e88:	ldr	r2, [pc, #48]	; 12ec0 <main@@Base+0xd4>
   12e8c:	ldr	r1, [sp, #236]	; 0xec
   12e90:	bl	18290 <flatcc_verify_table_as_root@@Base>
   12e94:	mov	r4, r0
   12e98:	add	r0, sp, #4
   12e9c:	bl	13708 <flatcc_builder_clear@@Base>
   12ea0:	mov	r0, r4
   12ea4:	add	sp, sp, #240	; 0xf0
   12ea8:	pop	{r4, pc}
   12eac:	ldr	r3, [pc, #28]	; 12ed0 <main@@Base+0xe4>
   12eb0:	ldr	r2, [pc, #28]	; 12ed4 <main@@Base+0xe8>
   12eb4:	ldr	r1, [pc, #28]	; 12ed8 <main@@Base+0xec>
   12eb8:	ldr	r0, [pc, #28]	; 12edc <main@@Base+0xf0>
   12ebc:	bl	1234c <__assert_fail@plt>
   12ec0:	andeq	r8, r1, r0, ror fp
   12ec4:	andeq	r8, r1, r8, ror fp
   12ec8:	andeq	r8, r1, ip, asr #22
   12ecc:	andeq	r2, r1, r8, lsr #14
   12ed0:	andeq	r8, r1, r0, asr fp
   12ed4:	andeq	r0, r0, lr, asr r9
   12ed8:	andeq	r8, r1, r4, lsl #23
   12edc:	andeq	r8, r1, ip, ror #23
   12ee0:	push	{r4, r5, r6, lr}
   12ee4:	sub	sp, sp, #8
   12ee8:	mov	r4, r0
   12eec:	mov	r5, r2
   12ef0:	ldr	r2, [r0, #28]
   12ef4:	mov	r3, #1
   12ef8:	str	r3, [sp]
   12efc:	ldr	r6, [r0, #48]	; 0x30
   12f00:	add	r2, r1, r2
   12f04:	add	r1, r0, #60	; 0x3c
   12f08:	ldr	r0, [r0, #40]	; 0x28
   12f0c:	blx	r6
   12f10:	cmp	r0, #0
   12f14:	bne	12f4c <main@@Base+0x160>
   12f18:	ldr	r1, [r4, #28]
   12f1c:	ldr	r2, [r4, #60]	; 0x3c
   12f20:	add	r2, r2, r1
   12f24:	str	r2, [r4, #16]
   12f28:	ldr	r3, [r4, #64]	; 0x40
   12f2c:	sub	r3, r3, r1
   12f30:	cmp	r3, r5
   12f34:	movcs	r3, r5
   12f38:	str	r3, [r4, #24]
   12f3c:	ldr	r3, [r4, #32]
   12f40:	str	r5, [r3, #4]
   12f44:	add	sp, sp, #8
   12f48:	pop	{r4, r5, r6, pc}
   12f4c:	mvn	r0, #0
   12f50:	b	12f44 <main@@Base+0x158>

00012f54 <flatcc_builder_default_alloc@@Base>:
   12f54:	push	{r4, r5, r6, r7, r8, lr}
   12f58:	mov	r5, r1
   12f5c:	cmp	r2, #0
   12f60:	bne	12f84 <flatcc_builder_default_alloc@@Base+0x30>
   12f64:	ldr	r0, [r1]
   12f68:	cmp	r0, #0
   12f6c:	beq	13050 <flatcc_builder_default_alloc@@Base+0xfc>
   12f70:	bl	122b0 <free@plt>
   12f74:	mov	r0, #0
   12f78:	str	r0, [r5]
   12f7c:	str	r0, [r5, #4]
   12f80:	pop	{r4, r5, r6, r7, r8, pc}
   12f84:	mov	r6, r3
   12f88:	ldr	r3, [sp, #24]
   12f8c:	sub	r3, r3, #1
   12f90:	cmp	r3, #6
   12f94:	ldrls	pc, [pc, r3, lsl #2]
   12f98:	b	1302c <flatcc_builder_default_alloc@@Base+0xd8>
   12f9c:	andeq	r2, r1, r0, asr #31
   12fa0:	andeq	r3, r1, ip, lsr #32
   12fa4:	andeq	r3, r1, ip, lsr #32
   12fa8:			; <UNDEFINED> instruction: 0x00012fb8
   12fac:	andeq	r3, r1, r4, lsr r0
   12fb0:	andeq	r3, r1, ip, lsr #32
   12fb4:	andeq	r3, r1, r4, lsr #32
   12fb8:	mov	r4, #288	; 0x120
   12fbc:	b	12fc4 <flatcc_builder_default_alloc@@Base+0x70>
   12fc0:	mov	r4, #256	; 0x100
   12fc4:	cmp	r4, r2
   12fc8:	bcs	12fd8 <flatcc_builder_default_alloc@@Base+0x84>
   12fcc:	lsl	r4, r4, #1
   12fd0:	cmp	r2, r4
   12fd4:	bhi	12fcc <flatcc_builder_default_alloc@@Base+0x78>
   12fd8:	ldr	r3, [r5, #4]
   12fdc:	cmp	r2, r3
   12fe0:	bhi	12fec <flatcc_builder_default_alloc@@Base+0x98>
   12fe4:	cmp	r4, r3, lsr #1
   12fe8:	bls	13058 <flatcc_builder_default_alloc@@Base+0x104>
   12fec:	mov	r1, r4
   12ff0:	ldr	r0, [r5]
   12ff4:	bl	122d4 <realloc@plt>
   12ff8:	subs	r7, r0, #0
   12ffc:	beq	13060 <flatcc_builder_default_alloc@@Base+0x10c>
   13000:	cmp	r6, #0
   13004:	beq	13014 <flatcc_builder_default_alloc@@Base+0xc0>
   13008:	ldr	r0, [r5, #4]
   1300c:	cmp	r0, r4
   13010:	bcc	1303c <flatcc_builder_default_alloc@@Base+0xe8>
   13014:	str	r7, [r5]
   13018:	str	r4, [r5, #4]
   1301c:	mov	r0, #0
   13020:	pop	{r4, r5, r6, r7, r8, pc}
   13024:	mov	r4, #64	; 0x40
   13028:	b	12fc4 <flatcc_builder_default_alloc@@Base+0x70>
   1302c:	mov	r4, #32
   13030:	b	12fc4 <flatcc_builder_default_alloc@@Base+0x70>
   13034:	mov	r4, r2
   13038:	b	12fd8 <flatcc_builder_default_alloc@@Base+0x84>
   1303c:	sub	r2, r4, r0
   13040:	mov	r1, #0
   13044:	add	r0, r7, r0
   13048:	bl	1231c <memset@plt>
   1304c:	b	13014 <flatcc_builder_default_alloc@@Base+0xc0>
   13050:	mov	r0, #0
   13054:	pop	{r4, r5, r6, r7, r8, pc}
   13058:	mov	r0, #0
   1305c:	pop	{r4, r5, r6, r7, r8, pc}
   13060:	mvn	r0, #0
   13064:	pop	{r4, r5, r6, r7, r8, pc}
   13068:	cmp	r2, #0
   1306c:	bne	1307c <flatcc_builder_default_alloc@@Base+0x128>
   13070:	ldrh	r2, [r0, #132]	; 0x84
   13074:	cmp	r2, #0
   13078:	moveq	r2, #1
   1307c:	ldrh	ip, [r1]
   13080:	cmp	ip, #3
   13084:	movls	ip, #4
   13088:	strhls	ip, [r1]
   1308c:	ldrh	ip, [r1]
   13090:	cmp	ip, r2
   13094:	strhcc	r2, [r1]
   13098:	cmp	r3, #0
   1309c:	bne	13158 <flatcc_builder_default_alloc@@Base+0x204>
   130a0:	push	{r4, r5, lr}
   130a4:	sub	sp, sp, #84	; 0x54
   130a8:	ldr	r4, [r0, #140]	; 0x8c
   130ac:	sub	r2, r2, #1
   130b0:	ands	r2, r2, r4
   130b4:	bne	130c4 <flatcc_builder_default_alloc@@Base+0x170>
   130b8:	mov	r0, #0
   130bc:	add	sp, sp, #84	; 0x54
   130c0:	pop	{r4, r5, pc}
   130c4:	str	r2, [sp, #8]
   130c8:	ldr	r3, [pc, #144]	; 13160 <flatcc_builder_default_alloc@@Base+0x20c>
   130cc:	str	r3, [sp, #16]
   130d0:	str	r2, [sp, #20]
   130d4:	mov	r3, #1
   130d8:	str	r3, [sp, #12]
   130dc:	add	r3, r4, r2
   130e0:	str	r3, [r0, #140]	; 0x8c
   130e4:	cmp	r4, r3
   130e8:	bgt	13130 <flatcc_builder_default_alloc@@Base+0x1dc>
   130ec:	ldr	ip, [r0, #36]	; 0x24
   130f0:	str	r2, [sp]
   130f4:	ldr	r5, [r0, #44]	; 0x2c
   130f8:	mov	r3, r4
   130fc:	mov	r2, #1
   13100:	add	r1, sp, #16
   13104:	mov	r0, ip
   13108:	blx	r5
   1310c:	cmp	r0, #0
   13110:	bne	13144 <flatcc_builder_default_alloc@@Base+0x1f0>
   13114:	cmn	r4, #1
   13118:	bne	130b8 <flatcc_builder_default_alloc@@Base+0x164>
   1311c:	ldr	r3, [pc, #64]	; 13164 <flatcc_builder_default_alloc@@Base+0x210>
   13120:	ldr	r2, [pc, #64]	; 13168 <flatcc_builder_default_alloc@@Base+0x214>
   13124:	ldr	r1, [pc, #64]	; 1316c <flatcc_builder_default_alloc@@Base+0x218>
   13128:	ldr	r0, [pc, #64]	; 13170 <flatcc_builder_default_alloc@@Base+0x21c>
   1312c:	bl	1234c <__assert_fail@plt>
   13130:	ldr	r3, [pc, #60]	; 13174 <flatcc_builder_default_alloc@@Base+0x220>
   13134:	ldr	r2, [pc, #60]	; 13178 <flatcc_builder_default_alloc@@Base+0x224>
   13138:	ldr	r1, [pc, #44]	; 1316c <flatcc_builder_default_alloc@@Base+0x218>
   1313c:	ldr	r0, [pc, #44]	; 13170 <flatcc_builder_default_alloc@@Base+0x21c>
   13140:	bl	1234c <__assert_fail@plt>
   13144:	ldr	r3, [pc, #40]	; 13174 <flatcc_builder_default_alloc@@Base+0x220>
   13148:	ldr	r2, [pc, #44]	; 1317c <flatcc_builder_default_alloc@@Base+0x228>
   1314c:	ldr	r1, [pc, #24]	; 1316c <flatcc_builder_default_alloc@@Base+0x218>
   13150:	ldr	r0, [pc, #24]	; 13170 <flatcc_builder_default_alloc@@Base+0x21c>
   13154:	bl	1234c <__assert_fail@plt>
   13158:	mov	r0, #0
   1315c:	bx	lr
   13160:	muleq	r1, ip, ip
   13164:	andeq	r8, r1, r8, lsr #29
   13168:			; <UNDEFINED> instruction: 0x000002be
   1316c:	andeq	r9, r1, ip, ror #7
   13170:	andeq	r9, r1, r0, asr #8
   13174:	muleq	r1, ip, lr
   13178:	andeq	r0, r0, r1, lsr #5
   1317c:	andeq	r0, r0, r5, lsr #5
   13180:	push	{r4, r5, r6, r7, lr}
   13184:	sub	sp, sp, #12
   13188:	mov	r4, r0
   1318c:	mov	r6, r1
   13190:	ldr	r3, [r0, #156]	; 0x9c
   13194:	add	r2, r3, #1
   13198:	str	r2, [r0, #156]	; 0x9c
   1319c:	ldr	r1, [r0, #160]	; 0xa0
   131a0:	cmp	r2, r1
   131a4:	ble	13244 <flatcc_builder_default_alloc@@Base+0x2f0>
   131a8:	ldr	r1, [r0, #176]	; 0xb0
   131ac:	cmp	r2, r1
   131b0:	cmpgt	r1, #0
   131b4:	bgt	132ac <flatcc_builder_default_alloc@@Base+0x358>
   131b8:	add	r3, r3, r3, lsl #3
   131bc:	lsl	r5, r3, #2
   131c0:	add	r2, r5, #36	; 0x24
   131c4:	ldr	r3, [r0, #88]	; 0x58
   131c8:	cmp	r2, r3
   131cc:	bhi	1320c <flatcc_builder_default_alloc@@Base+0x2b8>
   131d0:	ldr	r3, [r4, #84]	; 0x54
   131d4:	add	r5, r3, r5
   131d8:	str	r5, [r4, #32]
   131dc:	cmp	r5, #0
   131e0:	beq	132b4 <flatcc_builder_default_alloc@@Base+0x360>
   131e4:	ldr	r3, [r4, #88]	; 0x58
   131e8:	ldr	r2, [pc, #204]	; 132bc <flatcc_builder_default_alloc@@Base+0x368>
   131ec:	umull	r2, r3, r2, r3
   131f0:	lsr	r3, r3, #3
   131f4:	str	r3, [r4, #160]	; 0xa0
   131f8:	ldr	r2, [r4, #176]	; 0xb0
   131fc:	cmp	r2, #0
   13200:	cmpgt	r3, r2
   13204:	strgt	r2, [r4, #160]	; 0xa0
   13208:	b	13250 <flatcc_builder_default_alloc@@Base+0x2fc>
   1320c:	mov	r3, #4
   13210:	str	r3, [sp]
   13214:	ldr	r7, [r0, #48]	; 0x30
   13218:	mov	r3, #0
   1321c:	add	r1, r0, #84	; 0x54
   13220:	ldr	r0, [r0, #40]	; 0x28
   13224:	blx	r7
   13228:	cmp	r0, #0
   1322c:	beq	131d0 <flatcc_builder_default_alloc@@Base+0x27c>
   13230:	ldr	r3, [pc, #136]	; 132c0 <flatcc_builder_default_alloc@@Base+0x36c>
   13234:	mov	r2, #308	; 0x134
   13238:	ldr	r1, [pc, #132]	; 132c4 <flatcc_builder_default_alloc@@Base+0x370>
   1323c:	ldr	r0, [pc, #132]	; 132c8 <flatcc_builder_default_alloc@@Base+0x374>
   13240:	bl	1234c <__assert_fail@plt>
   13244:	ldr	r3, [r0, #32]
   13248:	add	r3, r3, #36	; 0x24
   1324c:	str	r3, [r0, #32]
   13250:	ldr	r3, [r4, #32]
   13254:	ldr	r2, [r4, #20]
   13258:	str	r2, [r3, #8]
   1325c:	ldr	r3, [r4, #32]
   13260:	ldrh	r2, [r4, #130]	; 0x82
   13264:	strh	r2, [r3, #12]
   13268:	strh	r6, [r4, #130]	; 0x82
   1326c:	ldr	r3, [r4, #32]
   13270:	ldr	r2, [r4, #28]
   13274:	str	r2, [r3]
   13278:	ldr	r3, [r4, #32]
   1327c:	mvn	r2, #3
   13280:	str	r2, [r3, #4]
   13284:	ldr	r3, [r4, #28]
   13288:	ldr	r2, [r4, #20]
   1328c:	add	r3, r3, r2
   13290:	add	r3, r3, #7
   13294:	bic	r3, r3, #7
   13298:	str	r3, [r4, #28]
   1329c:	mov	r0, #0
   132a0:	str	r0, [r4, #20]
   132a4:	add	sp, sp, #12
   132a8:	pop	{r4, r5, r6, r7, pc}
   132ac:	mvn	r0, #0
   132b0:	b	132a4 <flatcc_builder_default_alloc@@Base+0x350>
   132b4:	mvn	r0, #0
   132b8:	b	132a4 <flatcc_builder_default_alloc@@Base+0x350>
   132bc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   132c0:			; <UNDEFINED> instruction: 0x00018eb8
   132c4:	andeq	r9, r1, ip, ror #7
   132c8:	andeq	r9, r1, r0, asr #8
   132cc:	push	{r4, r5, r6, r7, r8, lr}
   132d0:	sub	sp, sp, #88	; 0x58
   132d4:	cmn	r2, #-1073741823	; 0xc0000001
   132d8:	bhi	1348c <flatcc_builder_default_alloc@@Base+0x538>
   132dc:	ldrh	ip, [r0, #128]	; 0x80
   132e0:	cmp	ip, #3
   132e4:	movls	ip, #4
   132e8:	strhls	ip, [r0, #128]	; 0x80
   132ec:	str	r2, [sp, #84]	; 0x54
   132f0:	ldr	r7, [r0, #136]	; 0x88
   132f4:	and	lr, r7, #3
   132f8:	mov	ip, #4
   132fc:	str	ip, [sp, #12]
   13300:	add	r4, sp, #84	; 0x54
   13304:	str	r4, [sp, #20]
   13308:	str	ip, [sp, #24]
   1330c:	mov	ip, #1
   13310:	str	ip, [sp, #16]
   13314:	lsls	r5, r2, #2
   13318:	beq	13334 <flatcc_builder_default_alloc@@Base+0x3e0>
   1331c:	add	ip, r5, #4
   13320:	str	ip, [sp, #12]
   13324:	str	r1, [sp, #28]
   13328:	str	r5, [sp, #32]
   1332c:	mov	ip, #2
   13330:	str	ip, [sp, #16]
   13334:	cmp	lr, #0
   13338:	beq	13368 <flatcc_builder_default_alloc@@Base+0x414>
   1333c:	ldr	ip, [sp, #12]
   13340:	add	ip, ip, lr
   13344:	str	ip, [sp, #12]
   13348:	ldr	ip, [sp, #16]
   1334c:	add	ip, ip, #1
   13350:	add	r4, sp, #88	; 0x58
   13354:	add	r4, r4, ip, lsl #3
   13358:	ldr	r6, [pc, #308]	; 13494 <flatcc_builder_default_alloc@@Base+0x540>
   1335c:	str	r6, [r4, #-76]	; 0xffffffb4
   13360:	str	lr, [r4, #-72]	; 0xffffffb8
   13364:	str	ip, [sp, #16]
   13368:	mov	r6, r0
   1336c:	ldr	r8, [sp, #12]
   13370:	sub	r7, r7, r8
   13374:	cmp	r2, #0
   13378:	beq	13420 <flatcc_builder_default_alloc@@Base+0x4cc>
   1337c:	mov	r2, r1
   13380:	mov	ip, r3
   13384:	add	r5, r1, r5
   13388:	mvn	r1, #3
   1338c:	b	133b8 <flatcc_builder_default_alloc@@Base+0x464>
   13390:	cmp	r3, #0
   13394:	beq	1340c <flatcc_builder_default_alloc@@Base+0x4b8>
   13398:	ldrb	r0, [ip]
   1339c:	cmp	r0, #0
   133a0:	bne	133f8 <flatcc_builder_default_alloc@@Base+0x4a4>
   133a4:	add	r2, r2, #4
   133a8:	add	ip, ip, #1
   133ac:	sub	r1, r1, #4
   133b0:	cmp	r2, r5
   133b4:	beq	13420 <flatcc_builder_default_alloc@@Base+0x4cc>
   133b8:	ldr	lr, [r2]
   133bc:	cmp	lr, #0
   133c0:	beq	13390 <flatcc_builder_default_alloc@@Base+0x43c>
   133c4:	sub	r4, r1, r7
   133c8:	add	lr, r4, lr
   133cc:	str	lr, [r2]
   133d0:	cmp	r3, #0
   133d4:	beq	133a4 <flatcc_builder_default_alloc@@Base+0x450>
   133d8:	ldrb	r0, [ip]
   133dc:	cmp	r0, #0
   133e0:	bne	133a4 <flatcc_builder_default_alloc@@Base+0x450>
   133e4:	ldr	r3, [pc, #172]	; 13498 <flatcc_builder_default_alloc@@Base+0x544>
   133e8:	ldr	r2, [pc, #172]	; 1349c <flatcc_builder_default_alloc@@Base+0x548>
   133ec:	ldr	r1, [pc, #172]	; 134a0 <flatcc_builder_default_alloc@@Base+0x54c>
   133f0:	ldr	r0, [pc, #172]	; 134a4 <flatcc_builder_default_alloc@@Base+0x550>
   133f4:	bl	1234c <__assert_fail@plt>
   133f8:	ldr	r3, [pc, #152]	; 13498 <flatcc_builder_default_alloc@@Base+0x544>
   133fc:	ldr	r2, [pc, #164]	; 134a8 <flatcc_builder_default_alloc@@Base+0x554>
   13400:	ldr	r1, [pc, #152]	; 134a0 <flatcc_builder_default_alloc@@Base+0x54c>
   13404:	ldr	r0, [pc, #160]	; 134ac <flatcc_builder_default_alloc@@Base+0x558>
   13408:	bl	1234c <__assert_fail@plt>
   1340c:	ldr	r3, [pc, #132]	; 13498 <flatcc_builder_default_alloc@@Base+0x544>
   13410:	ldr	r2, [pc, #152]	; 134b0 <flatcc_builder_default_alloc@@Base+0x55c>
   13414:	ldr	r1, [pc, #132]	; 134a0 <flatcc_builder_default_alloc@@Base+0x54c>
   13418:	ldr	r0, [pc, #148]	; 134b4 <flatcc_builder_default_alloc@@Base+0x560>
   1341c:	bl	1234c <__assert_fail@plt>
   13420:	ldr	r3, [r6, #136]	; 0x88
   13424:	sub	r4, r3, r8
   13428:	cmp	r3, r4
   1342c:	ble	13464 <flatcc_builder_default_alloc@@Base+0x510>
   13430:	str	r8, [sp]
   13434:	ldr	r5, [r6, #44]	; 0x2c
   13438:	mov	r3, r4
   1343c:	ldr	r2, [sp, #16]
   13440:	add	r1, sp, #20
   13444:	ldr	r0, [r6, #36]	; 0x24
   13448:	blx	r5
   1344c:	cmp	r0, #0
   13450:	streq	r4, [r6, #136]	; 0x88
   13454:	bne	13478 <flatcc_builder_default_alloc@@Base+0x524>
   13458:	mov	r0, r4
   1345c:	add	sp, sp, #88	; 0x58
   13460:	pop	{r4, r5, r6, r7, r8, pc}
   13464:	ldr	r3, [pc, #76]	; 134b8 <flatcc_builder_default_alloc@@Base+0x564>
   13468:	ldr	r2, [pc, #76]	; 134bc <flatcc_builder_default_alloc@@Base+0x568>
   1346c:	ldr	r1, [pc, #44]	; 134a0 <flatcc_builder_default_alloc@@Base+0x54c>
   13470:	ldr	r0, [pc, #60]	; 134b4 <flatcc_builder_default_alloc@@Base+0x560>
   13474:	bl	1234c <__assert_fail@plt>
   13478:	ldr	r3, [pc, #56]	; 134b8 <flatcc_builder_default_alloc@@Base+0x564>
   1347c:	ldr	r2, [pc, #60]	; 134c0 <flatcc_builder_default_alloc@@Base+0x56c>
   13480:	ldr	r1, [pc, #24]	; 134a0 <flatcc_builder_default_alloc@@Base+0x54c>
   13484:	ldr	r0, [pc, #40]	; 134b4 <flatcc_builder_default_alloc@@Base+0x560>
   13488:	bl	1234c <__assert_fail@plt>
   1348c:	mov	r4, #0
   13490:	b	13458 <flatcc_builder_default_alloc@@Base+0x504>
   13494:	muleq	r1, ip, ip
   13498:	andeq	r8, r1, r8, asr #29
   1349c:			; <UNDEFINED> instruction: 0x000005b1
   134a0:	andeq	r9, r1, ip, ror #7
   134a4:	andeq	r9, r1, r4, lsr r4
   134a8:			; <UNDEFINED> instruction: 0x000005b5
   134ac:	andeq	r9, r1, r4, asr #8
   134b0:			; <UNDEFINED> instruction: 0x000005b7
   134b4:	andeq	r9, r1, r0, asr #8
   134b8:	andeq	r8, r1, r8, ror #29
   134bc:	andeq	r0, r0, r7, lsl #5
   134c0:	andeq	r0, r0, fp, lsl #5

000134c4 <flatcc_builder_flush_vtable_cache@@Base>:
   134c4:	ldr	r3, [r0, #116]	; 0x74
   134c8:	cmp	r3, #0
   134cc:	bxeq	lr
   134d0:	push	{r4, lr}
   134d4:	mov	r4, r0
   134d8:	ldr	r2, [r0, #96]	; 0x60
   134dc:	mov	r1, #0
   134e0:	ldr	r0, [r0, #92]	; 0x5c
   134e4:	bl	1231c <memset@plt>
   134e8:	mov	r3, #16
   134ec:	str	r3, [r4, #124]	; 0x7c
   134f0:	mov	r3, #0
   134f4:	str	r3, [r4, #120]	; 0x78
   134f8:	pop	{r4, pc}

000134fc <flatcc_builder_custom_init@@Base>:
   134fc:	push	{r4, r5, r6, r7, r8, lr}
   13500:	mov	r4, r0
   13504:	mov	r6, r1
   13508:	mov	r7, r2
   1350c:	mov	r5, r3
   13510:	mov	r2, #232	; 0xe8
   13514:	mov	r1, #0
   13518:	bl	1231c <memset@plt>
   1351c:	cmp	r6, #0
   13520:	moveq	r3, #1
   13524:	streq	r3, [r4, #184]	; 0xb8
   13528:	addeq	r7, r4, #188	; 0xbc
   1352c:	ldreq	r6, [pc, #36]	; 13558 <flatcc_builder_custom_init@@Base+0x5c>
   13530:	ldr	r3, [pc, #36]	; 1355c <flatcc_builder_custom_init@@Base+0x60>
   13534:	cmp	r5, #0
   13538:	moveq	r5, r3
   1353c:	ldr	r3, [sp, #24]
   13540:	str	r3, [r4, #40]	; 0x28
   13544:	str	r5, [r4, #48]	; 0x30
   13548:	str	r7, [r4, #36]	; 0x24
   1354c:	str	r6, [r4, #44]	; 0x2c
   13550:	mov	r0, #0
   13554:	pop	{r4, r5, r6, r7, r8, pc}
   13558:	ldrdeq	r7, [r1], -r4
   1355c:	andeq	r2, r1, r4, asr pc

00013560 <flatcc_builder_init@@Base>:
   13560:	push	{r4, lr}
   13564:	mov	r4, r0
   13568:	mov	r2, #232	; 0xe8
   1356c:	mov	r1, #0
   13570:	bl	1231c <memset@plt>
   13574:	mov	r3, #1
   13578:	str	r3, [r4, #184]	; 0xb8
   1357c:	ldr	r3, [pc, #24]	; 1359c <flatcc_builder_init@@Base+0x3c>
   13580:	str	r3, [r4, #48]	; 0x30
   13584:	add	r3, r4, #188	; 0xbc
   13588:	str	r3, [r4, #36]	; 0x24
   1358c:	ldr	r3, [pc, #12]	; 135a0 <flatcc_builder_init@@Base+0x40>
   13590:	str	r3, [r4, #44]	; 0x2c
   13594:	mov	r0, #0
   13598:	pop	{r4, pc}
   1359c:	andeq	r2, r1, r4, asr pc
   135a0:	ldrdeq	r7, [r1], -r4

000135a4 <flatcc_builder_custom_reset@@Base>:
   135a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	sub	sp, sp, #12
   135ac:	mov	r6, r0
   135b0:	mov	fp, r1
   135b4:	mov	r8, r2
   135b8:	mov	r4, r0
   135bc:	mov	r5, #0
   135c0:	mov	r9, r5
   135c4:	mov	sl, #1
   135c8:	b	135ec <flatcc_builder_custom_reset@@Base+0x48>
   135cc:	ldr	r2, [r7, #56]	; 0x38
   135d0:	mov	r1, r9
   135d4:	ldr	r0, [r7, #52]	; 0x34
   135d8:	bl	1231c <memset@plt>
   135dc:	add	r5, r5, #1
   135e0:	add	r4, r4, #8
   135e4:	cmp	r5, #8
   135e8:	beq	13654 <flatcc_builder_custom_reset@@Base+0xb0>
   135ec:	add	r1, r4, #52	; 0x34
   135f0:	mov	r7, r4
   135f4:	ldr	r3, [r4, #52]	; 0x34
   135f8:	cmp	r3, #0
   135fc:	beq	13634 <flatcc_builder_custom_reset@@Base+0x90>
   13600:	cmp	r5, #5
   13604:	cmpne	r8, #0
   13608:	beq	135cc <flatcc_builder_custom_reset@@Base+0x28>
   1360c:	str	r5, [sp]
   13610:	mov	r3, sl
   13614:	mov	r2, sl
   13618:	ldr	r0, [r6, #40]	; 0x28
   1361c:	ldr	ip, [r6, #48]	; 0x30
   13620:	blx	ip
   13624:	cmp	r0, #0
   13628:	beq	135cc <flatcc_builder_custom_reset@@Base+0x28>
   1362c:	mvn	r0, #0
   13630:	b	136cc <flatcc_builder_custom_reset@@Base+0x128>
   13634:	ldr	r3, [r4, #56]	; 0x38
   13638:	cmp	r3, #0
   1363c:	beq	135dc <flatcc_builder_custom_reset@@Base+0x38>
   13640:	ldr	r3, [pc, #156]	; 136e4 <flatcc_builder_custom_reset@@Base+0x140>
   13644:	ldr	r2, [pc, #156]	; 136e8 <flatcc_builder_custom_reset@@Base+0x144>
   13648:	ldr	r1, [pc, #156]	; 136ec <flatcc_builder_custom_reset@@Base+0x148>
   1364c:	ldr	r0, [pc, #156]	; 136f0 <flatcc_builder_custom_reset@@Base+0x14c>
   13650:	bl	1234c <__assert_fail@plt>
   13654:	mov	r3, #0
   13658:	str	r3, [r6, #120]	; 0x78
   1365c:	ldr	r3, [r6, #124]	; 0x7c
   13660:	cmp	r3, #0
   13664:	movne	r3, #16
   13668:	strne	r3, [r6, #124]	; 0x7c
   1366c:	mov	r3, #0
   13670:	strh	r3, [r6, #128]	; 0x80
   13674:	str	r3, [r6, #136]	; 0x88
   13678:	str	r3, [r6, #140]	; 0x8c
   1367c:	str	r3, [r6, #156]	; 0x9c
   13680:	str	r3, [r6, #160]	; 0xa0
   13684:	str	r3, [r6, #20]
   13688:	str	r3, [r6, #24]
   1368c:	str	r3, [r6, #148]	; 0x94
   13690:	str	r3, [r6, #152]	; 0x98
   13694:	ldr	r2, [r6, #60]	; 0x3c
   13698:	str	r2, [r6, #16]
   1369c:	ldr	r2, [r6, #76]	; 0x4c
   136a0:	str	r2, [r6]
   136a4:	ldr	r2, [r6, #52]	; 0x34
   136a8:	str	r2, [r6, #4]
   136ac:	str	r3, [r6, #32]
   136b0:	cmp	fp, r3
   136b4:	strne	r3, [r6, #172]	; 0xac
   136b8:	strne	r3, [r6, #176]	; 0xb0
   136bc:	strne	r3, [r6, #180]	; 0xb4
   136c0:	ldr	r0, [r6, #184]	; 0xb8
   136c4:	cmp	r0, #0
   136c8:	bne	136d4 <flatcc_builder_custom_reset@@Base+0x130>
   136cc:	add	sp, sp, #12
   136d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d4:	add	r0, r6, #188	; 0xbc
   136d8:	bl	16f9c <flatcc_emitter_reset@@Base>
   136dc:	mov	r0, #0
   136e0:	b	136cc <flatcc_builder_custom_reset@@Base+0x128>
   136e4:	strdeq	r8, [r1], -r4
   136e8:			; <UNDEFINED> instruction: 0x000001b2
   136ec:	andeq	r9, r1, ip, ror #7
   136f0:	andeq	r9, r1, r4, asr r4

000136f4 <flatcc_builder_reset@@Base>:
   136f4:	push	{r4, lr}
   136f8:	mov	r2, #0
   136fc:	mov	r1, r2
   13700:	bl	135a4 <flatcc_builder_custom_reset@@Base>
   13704:	pop	{r4, pc}

00013708 <flatcc_builder_clear@@Base>:
   13708:	push	{r4, r5, r6, r7, r8, lr}
   1370c:	sub	sp, sp, #8
   13710:	mov	r6, r0
   13714:	add	r5, r0, #52	; 0x34
   13718:	mov	r4, #0
   1371c:	mov	r8, r4
   13720:	str	r4, [sp]
   13724:	ldr	r7, [r6, #48]	; 0x30
   13728:	mov	r3, r8
   1372c:	mov	r2, r8
   13730:	mov	r1, r5
   13734:	ldr	r0, [r6, #40]	; 0x28
   13738:	blx	r7
   1373c:	add	r4, r4, #1
   13740:	add	r5, r5, #8
   13744:	cmp	r4, #8
   13748:	bne	13720 <flatcc_builder_clear@@Base+0x18>
   1374c:	ldr	r3, [r6, #184]	; 0xb8
   13750:	cmp	r3, #0
   13754:	bne	13770 <flatcc_builder_clear@@Base+0x68>
   13758:	mov	r2, #232	; 0xe8
   1375c:	mov	r1, #0
   13760:	mov	r0, r6
   13764:	bl	1231c <memset@plt>
   13768:	add	sp, sp, #8
   1376c:	pop	{r4, r5, r6, r7, r8, pc}
   13770:	add	r0, r6, #188	; 0xbc
   13774:	bl	1706c <flatcc_emitter_clear@@Base>
   13778:	b	13758 <flatcc_builder_clear@@Base+0x50>

0001377c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1377c:	push	{r4, r5, r6, r7, r8, lr}
   13780:	sub	sp, sp, #8
   13784:	mov	r7, r0
   13788:	add	r4, r1, #3
   1378c:	bic	r4, r4, #3
   13790:	add	r4, r4, #4
   13794:	ldr	r5, [r0, #228]	; 0xe4
   13798:	add	r2, r4, r5
   1379c:	ldr	r3, [r0, #112]	; 0x70
   137a0:	cmp	r2, r3
   137a4:	bhi	137ec <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   137a8:	ldr	r8, [r7, #108]	; 0x6c
   137ac:	adds	r6, r8, r5
   137b0:	beq	13824 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   137b4:	mov	r2, r4
   137b8:	mov	r1, #0
   137bc:	mov	r0, r6
   137c0:	bl	1231c <memset@plt>
   137c4:	ldr	r3, [r7, #224]	; 0xe0
   137c8:	str	r3, [r8, r5]
   137cc:	ldr	r1, [r7, #228]	; 0xe4
   137d0:	add	r3, r1, #4
   137d4:	str	r3, [r7, #224]	; 0xe0
   137d8:	add	r4, r4, r1
   137dc:	str	r4, [r7, #228]	; 0xe4
   137e0:	add	r0, r6, #4
   137e4:	add	sp, sp, #8
   137e8:	pop	{r4, r5, r6, r7, r8, pc}
   137ec:	mov	r3, #7
   137f0:	str	r3, [sp]
   137f4:	ldr	r6, [r0, #48]	; 0x30
   137f8:	mov	r3, #0
   137fc:	add	r1, r0, #108	; 0x6c
   13800:	ldr	r0, [r0, #40]	; 0x28
   13804:	blx	r6
   13808:	cmp	r0, #0
   1380c:	beq	137a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13810:	ldr	r3, [pc, #20]	; 1382c <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   13814:	mov	r2, #308	; 0x134
   13818:	ldr	r1, [pc, #16]	; 13830 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   1381c:	ldr	r0, [pc, #16]	; 13834 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   13820:	bl	1234c <__assert_fail@plt>
   13824:	mov	r0, #0
   13828:	b	137e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   1382c:			; <UNDEFINED> instruction: 0x00018eb8
   13830:	andeq	r9, r1, ip, ror #7
   13834:	andeq	r9, r1, r0, asr #8

00013838 <flatcc_builder_enter_user_frame@@Base>:
   13838:	push	{r4, r5, r6, r7, lr}
   1383c:	sub	sp, sp, #12
   13840:	mov	r6, r0
   13844:	add	r4, r1, #3
   13848:	bic	r4, r4, #3
   1384c:	add	r4, r4, #4
   13850:	ldr	r5, [r0, #228]	; 0xe4
   13854:	add	r2, r4, r5
   13858:	ldr	r3, [r0, #112]	; 0x70
   1385c:	cmp	r2, r3
   13860:	bhi	138a4 <flatcc_builder_enter_user_frame@@Base+0x6c>
   13864:	ldr	r7, [r6, #108]	; 0x6c
   13868:	adds	r0, r7, r5
   1386c:	moveq	r0, #0
   13870:	beq	1389c <flatcc_builder_enter_user_frame@@Base+0x64>
   13874:	mov	r2, r4
   13878:	mov	r1, #0
   1387c:	bl	1231c <memset@plt>
   13880:	ldr	r3, [r6, #224]	; 0xe0
   13884:	str	r3, [r7, r5]
   13888:	ldr	r1, [r6, #228]	; 0xe4
   1388c:	add	r0, r1, #4
   13890:	str	r0, [r6, #224]	; 0xe0
   13894:	add	r4, r4, r1
   13898:	str	r4, [r6, #228]	; 0xe4
   1389c:	add	sp, sp, #12
   138a0:	pop	{r4, r5, r6, r7, pc}
   138a4:	mov	r3, #7
   138a8:	str	r3, [sp]
   138ac:	ldr	r7, [r0, #48]	; 0x30
   138b0:	mov	r3, #0
   138b4:	add	r1, r0, #108	; 0x6c
   138b8:	ldr	r0, [r0, #40]	; 0x28
   138bc:	blx	r7
   138c0:	cmp	r0, #0
   138c4:	beq	13864 <flatcc_builder_enter_user_frame@@Base+0x2c>
   138c8:	ldr	r3, [pc, #12]	; 138dc <flatcc_builder_enter_user_frame@@Base+0xa4>
   138cc:	mov	r2, #308	; 0x134
   138d0:	ldr	r1, [pc, #8]	; 138e0 <flatcc_builder_enter_user_frame@@Base+0xa8>
   138d4:	ldr	r0, [pc, #8]	; 138e4 <flatcc_builder_enter_user_frame@@Base+0xac>
   138d8:	bl	1234c <__assert_fail@plt>
   138dc:			; <UNDEFINED> instruction: 0x00018eb8
   138e0:	andeq	r9, r1, ip, ror #7
   138e4:	andeq	r9, r1, r0, asr #8

000138e8 <flatcc_builder_exit_user_frame@@Base>:
   138e8:	ldr	r3, [r0, #224]	; 0xe0
   138ec:	cmp	r3, #0
   138f0:	beq	13914 <flatcc_builder_exit_user_frame@@Base+0x2c>
   138f4:	ldr	r2, [r0, #108]	; 0x6c
   138f8:	add	r2, r2, r3
   138fc:	sub	r3, r3, #4
   13900:	str	r3, [r0, #228]	; 0xe4
   13904:	ldr	r3, [r2, #-4]
   13908:	str	r3, [r0, #224]	; 0xe0
   1390c:	mov	r0, r3
   13910:	bx	lr
   13914:	push	{r4, lr}
   13918:	ldr	r3, [pc, #12]	; 1392c <flatcc_builder_exit_user_frame@@Base+0x44>
   1391c:	ldr	r2, [pc, #12]	; 13930 <flatcc_builder_exit_user_frame@@Base+0x48>
   13920:	ldr	r1, [pc, #12]	; 13934 <flatcc_builder_exit_user_frame@@Base+0x4c>
   13924:	ldr	r0, [pc, #12]	; 13938 <flatcc_builder_exit_user_frame@@Base+0x50>
   13928:	bl	1234c <__assert_fail@plt>
   1392c:	andeq	r8, r1, r0, lsl pc
   13930:	andeq	r0, r0, lr, lsl r2
   13934:	andeq	r9, r1, ip, ror #7
   13938:	andeq	r9, r1, r8, ror #8

0001393c <flatcc_builder_exit_user_frame_at@@Base>:
   1393c:	push	{r4, lr}
   13940:	ldr	r3, [r0, #224]	; 0xe0
   13944:	cmp	r3, r1
   13948:	bcc	13958 <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   1394c:	str	r1, [r0, #224]	; 0xe0
   13950:	bl	138e8 <flatcc_builder_exit_user_frame@@Base>
   13954:	pop	{r4, pc}
   13958:	ldr	r3, [pc, #12]	; 1396c <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1395c:	ldr	r2, [pc, #12]	; 13970 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13960:	ldr	r1, [pc, #12]	; 13974 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13964:	ldr	r0, [pc, #12]	; 13978 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13968:	bl	1234c <__assert_fail@plt>
   1396c:	andeq	r8, r1, r0, lsr pc
   13970:	andeq	r0, r0, r7, lsr #4
   13974:	andeq	r9, r1, ip, ror #7
   13978:	andeq	r9, r1, r4, lsl #9

0001397c <flatcc_builder_get_current_user_frame@@Base>:
   1397c:	ldr	r0, [r0, #224]	; 0xe0
   13980:	bx	lr

00013984 <flatcc_builder_get_user_frame_ptr@@Base>:
   13984:	ldr	r0, [r0, #108]	; 0x6c
   13988:	add	r0, r0, r1
   1398c:	bx	lr

00013990 <flatcc_builder_embed_buffer@@Base>:
   13990:	push	{r4, r5, r6, lr}
   13994:	sub	sp, sp, #88	; 0x58
   13998:	mov	r4, r0
   1399c:	mov	r6, r2
   139a0:	mov	r5, r3
   139a4:	ldr	r3, [r0, #152]	; 0x98
   139a8:	adds	r3, r3, #0
   139ac:	movne	r3, #1
   139b0:	mov	r2, r1
   139b4:	add	r1, sp, #104	; 0x68
   139b8:	bl	13068 <flatcc_builder_default_alloc@@Base+0x114>
   139bc:	cmp	r0, #0
   139c0:	bne	13afc <flatcc_builder_embed_buffer@@Base+0x16c>
   139c4:	ldr	r3, [sp, #108]	; 0x6c
   139c8:	and	r3, r3, #2
   139cc:	cmp	r3, #0
   139d0:	movne	r3, #4
   139d4:	moveq	r3, #0
   139d8:	ldr	r1, [r4, #136]	; 0x88
   139dc:	sub	r2, r1, r5
   139e0:	sub	r3, r2, r3
   139e4:	ldrh	r2, [sp, #104]	; 0x68
   139e8:	sub	r2, r2, #1
   139ec:	and	r3, r3, r2
   139f0:	add	r2, r5, r3
   139f4:	str	r2, [sp, #84]	; 0x54
   139f8:	mov	r2, #0
   139fc:	str	r2, [sp, #12]
   13a00:	str	r2, [sp, #16]
   13a04:	ldr	r2, [r4, #152]	; 0x98
   13a08:	cmp	r2, #0
   13a0c:	beq	13a2c <flatcc_builder_embed_buffer@@Base+0x9c>
   13a10:	mov	r2, #4
   13a14:	str	r2, [sp, #12]
   13a18:	add	r0, sp, #84	; 0x54
   13a1c:	str	r0, [sp, #20]
   13a20:	str	r2, [sp, #24]
   13a24:	mov	r2, #1
   13a28:	str	r2, [sp, #16]
   13a2c:	cmp	r5, #0
   13a30:	beq	13a5c <flatcc_builder_embed_buffer@@Base+0xcc>
   13a34:	ldr	r2, [sp, #12]
   13a38:	add	r2, r2, r5
   13a3c:	str	r2, [sp, #12]
   13a40:	ldr	r2, [sp, #16]
   13a44:	add	r2, r2, #1
   13a48:	add	r0, sp, #88	; 0x58
   13a4c:	add	r0, r0, r2, lsl #3
   13a50:	str	r6, [r0, #-76]	; 0xffffffb4
   13a54:	str	r5, [r0, #-72]	; 0xffffffb8
   13a58:	str	r2, [sp, #16]
   13a5c:	cmp	r3, #0
   13a60:	beq	13a90 <flatcc_builder_embed_buffer@@Base+0x100>
   13a64:	ldr	r2, [sp, #12]
   13a68:	add	r2, r2, r3
   13a6c:	str	r2, [sp, #12]
   13a70:	ldr	r2, [sp, #16]
   13a74:	add	r2, r2, #1
   13a78:	add	r0, sp, #88	; 0x58
   13a7c:	add	r0, r0, r2, lsl #3
   13a80:	ldr	ip, [pc, #124]	; 13b04 <flatcc_builder_embed_buffer@@Base+0x174>
   13a84:	str	ip, [r0, #-76]	; 0xffffffb4
   13a88:	str	r3, [r0, #-72]	; 0xffffffb8
   13a8c:	str	r2, [sp, #16]
   13a90:	ldr	r3, [sp, #12]
   13a94:	sub	r5, r1, r3
   13a98:	cmp	r1, r5
   13a9c:	ble	13ad4 <flatcc_builder_embed_buffer@@Base+0x144>
   13aa0:	str	r3, [sp]
   13aa4:	ldr	r6, [r4, #44]	; 0x2c
   13aa8:	mov	r3, r5
   13aac:	ldr	r2, [sp, #16]
   13ab0:	add	r1, sp, #20
   13ab4:	ldr	r0, [r4, #36]	; 0x24
   13ab8:	blx	r6
   13abc:	cmp	r0, #0
   13ac0:	streq	r5, [r4, #136]	; 0x88
   13ac4:	bne	13ae8 <flatcc_builder_embed_buffer@@Base+0x158>
   13ac8:	mov	r0, r5
   13acc:	add	sp, sp, #88	; 0x58
   13ad0:	pop	{r4, r5, r6, pc}
   13ad4:	ldr	r3, [pc, #44]	; 13b08 <flatcc_builder_embed_buffer@@Base+0x178>
   13ad8:	ldr	r2, [pc, #44]	; 13b0c <flatcc_builder_embed_buffer@@Base+0x17c>
   13adc:	ldr	r1, [pc, #44]	; 13b10 <flatcc_builder_embed_buffer@@Base+0x180>
   13ae0:	ldr	r0, [pc, #44]	; 13b14 <flatcc_builder_embed_buffer@@Base+0x184>
   13ae4:	bl	1234c <__assert_fail@plt>
   13ae8:	ldr	r3, [pc, #24]	; 13b08 <flatcc_builder_embed_buffer@@Base+0x178>
   13aec:	ldr	r2, [pc, #36]	; 13b18 <flatcc_builder_embed_buffer@@Base+0x188>
   13af0:	ldr	r1, [pc, #24]	; 13b10 <flatcc_builder_embed_buffer@@Base+0x180>
   13af4:	ldr	r0, [pc, #24]	; 13b14 <flatcc_builder_embed_buffer@@Base+0x184>
   13af8:	bl	1234c <__assert_fail@plt>
   13afc:	mov	r5, #0
   13b00:	b	13ac8 <flatcc_builder_embed_buffer@@Base+0x138>
   13b04:	muleq	r1, ip, ip
   13b08:	andeq	r8, r1, r8, ror #29
   13b0c:	andeq	r0, r0, r7, lsl #5
   13b10:	andeq	r9, r1, ip, ror #7
   13b14:	andeq	r9, r1, r0, asr #8
   13b18:	andeq	r0, r0, fp, lsl #5

00013b1c <flatcc_builder_create_buffer@@Base>:
   13b1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b20:	sub	sp, sp, #96	; 0x60
   13b24:	mov	r5, r0
   13b28:	mov	r9, r1
   13b2c:	mov	r6, r3
   13b30:	ldr	r8, [sp, #132]	; 0x84
   13b34:	mov	r3, #0
   13b38:	str	r3, [sp, #12]
   13b3c:	and	r4, r8, #1
   13b40:	uxtb	r7, r4
   13b44:	mov	r3, r7
   13b48:	add	r1, sp, #128	; 0x80
   13b4c:	bl	13068 <flatcc_builder_default_alloc@@Base+0x114>
   13b50:	cmp	r0, #0
   13b54:	bne	13cf8 <flatcc_builder_create_buffer@@Base+0x1dc>
   13b58:	ldrh	r0, [sp, #128]	; 0x80
   13b5c:	ldrh	r3, [r5, #128]	; 0x80
   13b60:	cmp	r3, r0
   13b64:	strhcc	r0, [r5, #128]	; 0x80
   13b68:	cmp	r9, #0
   13b6c:	ldrne	r3, [r9]
   13b70:	strne	r3, [sp, #12]
   13b74:	ldr	r1, [sp, #12]
   13b78:	cmp	r1, #0
   13b7c:	movne	r1, #4
   13b80:	moveq	r1, #0
   13b84:	tst	r8, #2
   13b88:	bne	13d00 <flatcc_builder_create_buffer@@Base+0x1e4>
   13b8c:	ldr	ip, [r5, #136]	; 0x88
   13b90:	mov	r2, ip
   13b94:	sub	r3, ip, #4
   13b98:	sub	r3, r3, r1
   13b9c:	sub	r0, r0, #1
   13ba0:	and	r3, r3, r0
   13ba4:	mov	r0, #0
   13ba8:	str	r0, [sp, #16]
   13bac:	str	r0, [sp, #20]
   13bb0:	cmp	r4, r0
   13bb4:	bne	13d1c <flatcc_builder_create_buffer@@Base+0x200>
   13bb8:	ldr	lr, [sp, #16]
   13bbc:	add	lr, lr, #4
   13bc0:	str	lr, [sp, #16]
   13bc4:	ldr	r8, [sp, #20]
   13bc8:	add	r0, r8, #1
   13bcc:	add	r9, sp, #96	; 0x60
   13bd0:	add	r9, r9, r0, lsl #3
   13bd4:	add	sl, sp, #92	; 0x5c
   13bd8:	str	sl, [r9, #-80]	; 0xffffffb0
   13bdc:	mov	sl, #4
   13be0:	str	sl, [r9, #-76]	; 0xffffffb4
   13be4:	str	r0, [sp, #20]
   13be8:	cmp	r1, #0
   13bec:	beq	13c18 <flatcc_builder_create_buffer@@Base+0xfc>
   13bf0:	add	lr, r1, lr
   13bf4:	str	lr, [sp, #16]
   13bf8:	add	r0, r8, #2
   13bfc:	add	lr, sp, #96	; 0x60
   13c00:	add	r0, lr, r0, lsl #3
   13c04:	add	lr, sp, #12
   13c08:	str	lr, [r0, #-80]	; 0xffffffb0
   13c0c:	str	r1, [r0, #-76]	; 0xffffffb4
   13c10:	add	r8, r8, #2
   13c14:	str	r8, [sp, #20]
   13c18:	cmp	r3, #0
   13c1c:	beq	13c4c <flatcc_builder_create_buffer@@Base+0x130>
   13c20:	ldr	r1, [sp, #16]
   13c24:	add	r1, r1, r3
   13c28:	str	r1, [sp, #16]
   13c2c:	ldr	r1, [sp, #20]
   13c30:	add	r1, r1, #1
   13c34:	add	r0, sp, #96	; 0x60
   13c38:	add	r0, r0, r1, lsl #3
   13c3c:	ldr	lr, [pc, #248]	; 13d3c <flatcc_builder_create_buffer@@Base+0x220>
   13c40:	str	lr, [r0, #-80]	; 0xffffffb0
   13c44:	str	r3, [r0, #-76]	; 0xffffffb4
   13c48:	str	r1, [sp, #20]
   13c4c:	ldr	r1, [sp, #16]
   13c50:	sub	r3, r2, r1
   13c54:	add	r3, r3, r7, lsl #2
   13c58:	cmp	r4, #0
   13c5c:	ldrne	r2, [r5, #144]	; 0x90
   13c60:	ldreq	r2, [r5, #140]	; 0x8c
   13c64:	sub	r2, r2, r3
   13c68:	str	r2, [sp, #88]	; 0x58
   13c6c:	sub	r3, r6, r3
   13c70:	str	r3, [sp, #92]	; 0x5c
   13c74:	sub	r4, ip, r1
   13c78:	cmp	r4, ip
   13c7c:	bge	13cbc <flatcc_builder_create_buffer@@Base+0x1a0>
   13c80:	str	r1, [sp]
   13c84:	ldr	r6, [r5, #44]	; 0x2c
   13c88:	mov	r3, r4
   13c8c:	ldr	r2, [sp, #20]
   13c90:	add	r1, sp, #24
   13c94:	ldr	r0, [r5, #36]	; 0x24
   13c98:	blx	r6
   13c9c:	cmp	r0, #0
   13ca0:	bne	13cd0 <flatcc_builder_create_buffer@@Base+0x1b4>
   13ca4:	str	r4, [r5, #136]	; 0x88
   13ca8:	cmp	r4, #0
   13cac:	beq	13ce4 <flatcc_builder_create_buffer@@Base+0x1c8>
   13cb0:	mov	r0, r4
   13cb4:	add	sp, sp, #96	; 0x60
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cbc:	ldr	r3, [pc, #124]	; 13d40 <flatcc_builder_create_buffer@@Base+0x224>
   13cc0:	ldr	r2, [pc, #124]	; 13d44 <flatcc_builder_create_buffer@@Base+0x228>
   13cc4:	ldr	r1, [pc, #124]	; 13d48 <flatcc_builder_create_buffer@@Base+0x22c>
   13cc8:	ldr	r0, [pc, #124]	; 13d4c <flatcc_builder_create_buffer@@Base+0x230>
   13ccc:	bl	1234c <__assert_fail@plt>
   13cd0:	ldr	r3, [pc, #104]	; 13d40 <flatcc_builder_create_buffer@@Base+0x224>
   13cd4:	ldr	r2, [pc, #116]	; 13d50 <flatcc_builder_create_buffer@@Base+0x234>
   13cd8:	ldr	r1, [pc, #104]	; 13d48 <flatcc_builder_create_buffer@@Base+0x22c>
   13cdc:	ldr	r0, [pc, #104]	; 13d4c <flatcc_builder_create_buffer@@Base+0x230>
   13ce0:	bl	1234c <__assert_fail@plt>
   13ce4:	ldr	r3, [pc, #104]	; 13d54 <flatcc_builder_create_buffer@@Base+0x238>
   13ce8:	mov	r2, #772	; 0x304
   13cec:	ldr	r1, [pc, #84]	; 13d48 <flatcc_builder_create_buffer@@Base+0x22c>
   13cf0:	ldr	r0, [pc, #84]	; 13d4c <flatcc_builder_create_buffer@@Base+0x230>
   13cf4:	bl	1234c <__assert_fail@plt>
   13cf8:	mov	r4, #0
   13cfc:	b	13cb0 <flatcc_builder_create_buffer@@Base+0x194>
   13d00:	ldr	ip, [r5, #136]	; 0x88
   13d04:	mov	r2, ip
   13d08:	sub	r3, ip, #8
   13d0c:	sub	r3, r3, r1
   13d10:	sub	r0, r0, #1
   13d14:	and	r3, r3, r0
   13d18:	mov	r7, #1
   13d1c:	mov	r0, #4
   13d20:	str	r0, [sp, #16]
   13d24:	add	lr, sp, #88	; 0x58
   13d28:	str	lr, [sp, #24]
   13d2c:	str	r0, [sp, #28]
   13d30:	mov	r0, #1
   13d34:	str	r0, [sp, #20]
   13d38:	b	13bb8 <flatcc_builder_create_buffer@@Base+0x9c>
   13d3c:	muleq	r1, ip, ip
   13d40:	andeq	r8, r1, r8, ror #29
   13d44:	andeq	r0, r0, r7, lsl #5
   13d48:	andeq	r9, r1, ip, ror #7
   13d4c:	andeq	r9, r1, r0, asr #8
   13d50:	andeq	r0, r0, fp, lsl #5
   13d54:	andeq	r8, r1, r4, asr pc

00013d58 <flatcc_builder_create_struct@@Base>:
   13d58:	push	{r4, r5, r6, lr}
   13d5c:	sub	sp, sp, #80	; 0x50
   13d60:	cmp	r3, #0
   13d64:	beq	13dbc <flatcc_builder_create_struct@@Base+0x64>
   13d68:	mov	r4, r0
   13d6c:	ldrh	r0, [r0, #128]	; 0x80
   13d70:	cmp	r0, r3
   13d74:	strhcc	r3, [r4, #128]	; 0x80
   13d78:	ldr	ip, [r4, #136]	; 0x88
   13d7c:	sub	r0, ip, r2
   13d80:	sub	r3, r3, #1
   13d84:	and	r3, r3, r0
   13d88:	mov	r0, #0
   13d8c:	str	r0, [sp, #8]
   13d90:	str	r0, [sp, #12]
   13d94:	cmp	r2, r0
   13d98:	beq	13df8 <flatcc_builder_create_struct@@Base+0xa0>
   13d9c:	str	r2, [sp, #8]
   13da0:	str	r1, [sp, #16]
   13da4:	str	r2, [sp, #20]
   13da8:	mov	r2, #1
   13dac:	str	r2, [sp, #12]
   13db0:	cmp	r3, r0
   13db4:	beq	13e2c <flatcc_builder_create_struct@@Base+0xd4>
   13db8:	b	13e00 <flatcc_builder_create_struct@@Base+0xa8>
   13dbc:	ldr	r3, [pc, #172]	; 13e70 <flatcc_builder_create_struct@@Base+0x118>
   13dc0:	ldr	r2, [pc, #172]	; 13e74 <flatcc_builder_create_struct@@Base+0x11c>
   13dc4:	ldr	r1, [pc, #172]	; 13e78 <flatcc_builder_create_struct@@Base+0x120>
   13dc8:	ldr	r0, [pc, #172]	; 13e7c <flatcc_builder_create_struct@@Base+0x124>
   13dcc:	bl	1234c <__assert_fail@plt>
   13dd0:	ldr	r3, [pc, #168]	; 13e80 <flatcc_builder_create_struct@@Base+0x128>
   13dd4:	ldr	r2, [pc, #168]	; 13e84 <flatcc_builder_create_struct@@Base+0x12c>
   13dd8:	ldr	r1, [pc, #152]	; 13e78 <flatcc_builder_create_struct@@Base+0x120>
   13ddc:	ldr	r0, [pc, #164]	; 13e88 <flatcc_builder_create_struct@@Base+0x130>
   13de0:	bl	1234c <__assert_fail@plt>
   13de4:	ldr	r3, [pc, #148]	; 13e80 <flatcc_builder_create_struct@@Base+0x128>
   13de8:	ldr	r2, [pc, #156]	; 13e8c <flatcc_builder_create_struct@@Base+0x134>
   13dec:	ldr	r1, [pc, #132]	; 13e78 <flatcc_builder_create_struct@@Base+0x120>
   13df0:	ldr	r0, [pc, #144]	; 13e88 <flatcc_builder_create_struct@@Base+0x130>
   13df4:	bl	1234c <__assert_fail@plt>
   13df8:	cmp	r3, #0
   13dfc:	beq	13dd0 <flatcc_builder_create_struct@@Base+0x78>
   13e00:	ldr	r2, [sp, #8]
   13e04:	add	r2, r2, r3
   13e08:	str	r2, [sp, #8]
   13e0c:	ldr	r2, [sp, #12]
   13e10:	add	r2, r2, #1
   13e14:	add	r1, sp, #80	; 0x50
   13e18:	add	r1, r1, r2, lsl #3
   13e1c:	ldr	r0, [pc, #108]	; 13e90 <flatcc_builder_create_struct@@Base+0x138>
   13e20:	str	r0, [r1, #-72]	; 0xffffffb8
   13e24:	str	r3, [r1, #-68]	; 0xffffffbc
   13e28:	str	r2, [sp, #12]
   13e2c:	ldr	r3, [sp, #8]
   13e30:	sub	r5, ip, r3
   13e34:	cmp	ip, r5
   13e38:	ble	13dd0 <flatcc_builder_create_struct@@Base+0x78>
   13e3c:	str	r3, [sp]
   13e40:	ldr	r6, [r4, #44]	; 0x2c
   13e44:	mov	r3, r5
   13e48:	ldr	r2, [sp, #12]
   13e4c:	add	r1, sp, #16
   13e50:	ldr	r0, [r4, #36]	; 0x24
   13e54:	blx	r6
   13e58:	cmp	r0, #0
   13e5c:	bne	13de4 <flatcc_builder_create_struct@@Base+0x8c>
   13e60:	str	r5, [r4, #136]	; 0x88
   13e64:	mov	r0, r5
   13e68:	add	sp, sp, #80	; 0x50
   13e6c:	pop	{r4, r5, r6, pc}
   13e70:	andeq	r8, r1, r4, ror pc
   13e74:	andeq	r0, r0, pc, lsl #6
   13e78:	andeq	r9, r1, ip, ror #7
   13e7c:	andeq	r9, r1, r4, lsr #9
   13e80:	andeq	r8, r1, r8, ror #29
   13e84:	andeq	r0, r0, r7, lsl #5
   13e88:	andeq	r9, r1, r0, asr #8
   13e8c:	andeq	r0, r0, fp, lsl #5
   13e90:	muleq	r1, ip, ip

00013e94 <flatcc_builder_start_buffer@@Base>:
   13e94:	push	{r4, r5, r6, r7, r8, lr}
   13e98:	mov	r4, r0
   13e9c:	mov	r5, r1
   13ea0:	mov	r7, r2
   13ea4:	mov	r6, r3
   13ea8:	ldrh	r1, [r0, #128]	; 0x80
   13eac:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   13eb0:	cmp	r0, #0
   13eb4:	bne	13f40 <flatcc_builder_start_buffer@@Base+0xac>
   13eb8:	mov	r3, #1
   13ebc:	strh	r3, [r4, #128]	; 0x80
   13ec0:	ldr	r3, [r4, #32]
   13ec4:	ldrh	r2, [r4, #132]	; 0x84
   13ec8:	strh	r2, [r3, #34]	; 0x22
   13ecc:	strh	r7, [r4, #132]	; 0x84
   13ed0:	ldr	r3, [r4, #32]
   13ed4:	ldrh	r2, [r4, #164]	; 0xa4
   13ed8:	strh	r2, [r3, #32]
   13edc:	strh	r6, [r4, #164]	; 0xa4
   13ee0:	ldr	r3, [r4, #32]
   13ee4:	ldr	r2, [r4, #144]	; 0x90
   13ee8:	str	r2, [r3, #20]
   13eec:	ldr	r3, [r4, #32]
   13ef0:	ldr	r2, [r4, #152]	; 0x98
   13ef4:	str	r2, [r3, #28]
   13ef8:	ldr	r3, [r4, #136]	; 0x88
   13efc:	str	r3, [r4, #144]	; 0x90
   13f00:	ldr	r3, [r4, #148]	; 0x94
   13f04:	add	r2, r3, #1
   13f08:	str	r2, [r4, #148]	; 0x94
   13f0c:	str	r3, [r4, #152]	; 0x98
   13f10:	ldr	r3, [r4, #32]
   13f14:	ldr	r2, [r4, #168]	; 0xa8
   13f18:	str	r2, [r3, #16]
   13f1c:	ldr	r3, [pc, #36]	; 13f48 <flatcc_builder_start_buffer@@Base+0xb4>
   13f20:	cmp	r5, #0
   13f24:	moveq	r5, r3
   13f28:	ldr	r3, [r5]
   13f2c:	str	r3, [r4, #168]	; 0xa8
   13f30:	ldr	r3, [r4, #32]
   13f34:	mov	r2, #1
   13f38:	strh	r2, [r3, #14]
   13f3c:	pop	{r4, r5, r6, r7, r8, pc}
   13f40:	mvn	r0, #0
   13f44:	pop	{r4, r5, r6, r7, r8, pc}
   13f48:	muleq	r1, ip, ip

00013f4c <flatcc_builder_end_buffer@@Base>:
   13f4c:	push	{r4, r5, lr}
   13f50:	sub	sp, sp, #12
   13f54:	mov	r4, r0
   13f58:	ldrh	r2, [r0, #164]	; 0xa4
   13f5c:	and	r2, r2, #2
   13f60:	ldr	r0, [r0, #152]	; 0x98
   13f64:	cmp	r0, #0
   13f68:	moveq	r0, r2
   13f6c:	orrne	r0, r2, #1
   13f70:	ldr	r2, [r4, #32]
   13f74:	ldrh	r2, [r2, #14]
   13f78:	cmp	r2, #1
   13f7c:	bne	13fc0 <flatcc_builder_end_buffer@@Base+0x74>
   13f80:	ldrh	r2, [r4, #132]	; 0x84
   13f84:	ldrh	r3, [r4, #128]	; 0x80
   13f88:	cmp	r3, r2
   13f8c:	strhcc	r2, [r4, #128]	; 0x80
   13f90:	str	r0, [sp, #4]
   13f94:	ldrh	r3, [r4, #128]	; 0x80
   13f98:	str	r3, [sp]
   13f9c:	mov	r3, r1
   13fa0:	add	r1, r4, #168	; 0xa8
   13fa4:	mov	r0, r4
   13fa8:	bl	13b1c <flatcc_builder_create_buffer@@Base>
   13fac:	subs	r5, r0, #0
   13fb0:	bne	13fd4 <flatcc_builder_end_buffer@@Base+0x88>
   13fb4:	mov	r0, r5
   13fb8:	add	sp, sp, #12
   13fbc:	pop	{r4, r5, pc}
   13fc0:	ldr	r3, [pc, #176]	; 14078 <flatcc_builder_end_buffer@@Base+0x12c>
   13fc4:	ldr	r2, [pc, #176]	; 1407c <flatcc_builder_end_buffer@@Base+0x130>
   13fc8:	ldr	r1, [pc, #176]	; 14080 <flatcc_builder_end_buffer@@Base+0x134>
   13fcc:	ldr	r0, [pc, #176]	; 14084 <flatcc_builder_end_buffer@@Base+0x138>
   13fd0:	bl	1234c <__assert_fail@plt>
   13fd4:	ldr	r3, [r4, #32]
   13fd8:	ldr	r2, [r3, #20]
   13fdc:	str	r2, [r4, #144]	; 0x90
   13fe0:	ldr	r2, [r3, #28]
   13fe4:	str	r2, [r4, #152]	; 0x98
   13fe8:	ldr	r2, [r3, #16]
   13fec:	str	r2, [r4, #168]	; 0xa8
   13ff0:	ldrh	r3, [r3, #32]
   13ff4:	strh	r3, [r4, #164]	; 0xa4
   13ff8:	ldr	r2, [r4, #20]
   13ffc:	mov	r1, #0
   14000:	ldr	r0, [r4, #16]
   14004:	bl	1231c <memset@plt>
   14008:	ldr	r2, [r4, #32]
   1400c:	ldr	r3, [r2, #8]
   14010:	str	r3, [r4, #20]
   14014:	ldr	r0, [r2]
   14018:	str	r0, [r4, #28]
   1401c:	ldr	r1, [r2, #4]
   14020:	ldr	r3, [r4, #60]	; 0x3c
   14024:	add	r3, r3, r0
   14028:	str	r3, [r4, #16]
   1402c:	ldr	r3, [r4, #64]	; 0x40
   14030:	sub	r3, r3, r0
   14034:	cmp	r3, r1
   14038:	movcs	r3, r1
   1403c:	str	r3, [r4, #24]
   14040:	str	r1, [r2, #4]
   14044:	ldrh	r3, [r4, #130]	; 0x82
   14048:	ldrh	r2, [r4, #128]	; 0x80
   1404c:	cmp	r2, r3
   14050:	strhcc	r3, [r4, #128]	; 0x80
   14054:	ldr	r3, [r4, #32]
   14058:	ldrh	r2, [r3, #12]
   1405c:	strh	r2, [r4, #130]	; 0x82
   14060:	sub	r3, r3, #36	; 0x24
   14064:	str	r3, [r4, #32]
   14068:	ldr	r3, [r4, #156]	; 0x9c
   1406c:	sub	r3, r3, #1
   14070:	str	r3, [r4, #156]	; 0x9c
   14074:	b	13fb4 <flatcc_builder_end_buffer@@Base+0x68>
   14078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1407c:	andeq	r0, r0, r6, asr #6
   14080:	andeq	r9, r1, ip, ror #7
   14084:			; <UNDEFINED> instruction: 0x000194b0

00014088 <flatcc_builder_start_struct@@Base>:
   14088:	push	{r4, r5, r6, lr}
   1408c:	mov	r4, r0
   14090:	mov	r5, r1
   14094:	mov	r1, r2
   14098:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   1409c:	cmp	r0, #0
   140a0:	bne	14120 <flatcc_builder_start_struct@@Base+0x98>
   140a4:	ldr	r3, [r4, #32]
   140a8:	mov	r2, #2
   140ac:	strh	r2, [r3, #14]
   140b0:	ldr	r1, [r4, #28]
   140b4:	ldr	r2, [r4, #60]	; 0x3c
   140b8:	add	r2, r2, r1
   140bc:	str	r2, [r4, #16]
   140c0:	ldr	r3, [r4, #64]	; 0x40
   140c4:	sub	r3, r3, r1
   140c8:	cmn	r3, #4
   140cc:	mvnhi	r3, #3
   140d0:	str	r3, [r4, #24]
   140d4:	ldr	r3, [r4, #32]
   140d8:	mvn	r2, #3
   140dc:	str	r2, [r3, #4]
   140e0:	ldr	r6, [r4, #20]
   140e4:	add	r5, r5, r6
   140e8:	str	r5, [r4, #20]
   140ec:	ldr	r3, [r4, #24]
   140f0:	cmp	r5, r3
   140f4:	bcs	14104 <flatcc_builder_start_struct@@Base+0x7c>
   140f8:	ldr	r0, [r4, #16]
   140fc:	add	r0, r0, r6
   14100:	pop	{r4, r5, r6, pc}
   14104:	add	r1, r5, #1
   14108:	mov	r0, r4
   1410c:	bl	12ee0 <main@@Base+0xf4>
   14110:	cmp	r0, #0
   14114:	beq	140f8 <flatcc_builder_start_struct@@Base+0x70>
   14118:	mov	r0, #0
   1411c:	pop	{r4, r5, r6, pc}
   14120:	mov	r0, #0
   14124:	pop	{r4, r5, r6, pc}

00014128 <flatcc_builder_struct_edit@@Base>:
   14128:	ldr	r0, [r0, #16]
   1412c:	bx	lr

00014130 <flatcc_builder_end_struct@@Base>:
   14130:	push	{r4, r5, r6, lr}
   14134:	ldr	r3, [r0, #32]
   14138:	ldrh	r3, [r3, #14]
   1413c:	cmp	r3, #2
   14140:	bne	14168 <flatcc_builder_end_struct@@Base+0x38>
   14144:	mov	r4, r0
   14148:	ldrh	r3, [r0, #130]	; 0x82
   1414c:	ldr	r2, [r0, #20]
   14150:	ldr	r1, [r0, #16]
   14154:	bl	13d58 <flatcc_builder_create_struct@@Base>
   14158:	subs	r5, r0, #0
   1415c:	bne	1417c <flatcc_builder_end_struct@@Base+0x4c>
   14160:	mov	r0, r5
   14164:	pop	{r4, r5, r6, pc}
   14168:	ldr	r3, [pc, #140]	; 141fc <flatcc_builder_end_struct@@Base+0xcc>
   1416c:	mov	r2, #872	; 0x368
   14170:	ldr	r1, [pc, #136]	; 14200 <flatcc_builder_end_struct@@Base+0xd0>
   14174:	ldr	r0, [pc, #136]	; 14204 <flatcc_builder_end_struct@@Base+0xd4>
   14178:	bl	1234c <__assert_fail@plt>
   1417c:	ldr	r2, [r4, #20]
   14180:	mov	r1, #0
   14184:	ldr	r0, [r4, #16]
   14188:	bl	1231c <memset@plt>
   1418c:	ldr	r2, [r4, #32]
   14190:	ldr	r3, [r2, #8]
   14194:	str	r3, [r4, #20]
   14198:	ldr	r0, [r2]
   1419c:	str	r0, [r4, #28]
   141a0:	ldr	r1, [r2, #4]
   141a4:	ldr	r3, [r4, #60]	; 0x3c
   141a8:	add	r3, r3, r0
   141ac:	str	r3, [r4, #16]
   141b0:	ldr	r3, [r4, #64]	; 0x40
   141b4:	sub	r3, r3, r0
   141b8:	cmp	r3, r1
   141bc:	movcs	r3, r1
   141c0:	str	r3, [r4, #24]
   141c4:	str	r1, [r2, #4]
   141c8:	ldrh	r3, [r4, #130]	; 0x82
   141cc:	ldrh	r2, [r4, #128]	; 0x80
   141d0:	cmp	r2, r3
   141d4:	strhcc	r3, [r4, #128]	; 0x80
   141d8:	ldr	r3, [r4, #32]
   141dc:	ldrh	r2, [r3, #12]
   141e0:	strh	r2, [r4, #130]	; 0x82
   141e4:	sub	r3, r3, #36	; 0x24
   141e8:	str	r3, [r4, #32]
   141ec:	ldr	r3, [r4, #156]	; 0x9c
   141f0:	sub	r3, r3, #1
   141f4:	str	r3, [r4, #156]	; 0x9c
   141f8:	b	14160 <flatcc_builder_end_struct@@Base+0x30>
   141fc:			; <UNDEFINED> instruction: 0x00018fb0
   14200:	andeq	r9, r1, ip, ror #7
   14204:	ldrdeq	r9, [r1], -ip

00014208 <flatcc_builder_extend_vector@@Base>:
   14208:	push	{r4, r5, r6, lr}
   1420c:	mov	r4, r0
   14210:	ldr	r2, [r0, #32]
   14214:	ldr	r3, [r2, #20]
   14218:	add	r0, r1, r3
   1421c:	ldr	ip, [r2, #24]
   14220:	cmp	r3, r0
   14224:	movls	r3, #0
   14228:	movhi	r3, #1
   1422c:	cmp	ip, r0
   14230:	orrcc	r3, r3, #1
   14234:	cmp	r3, #0
   14238:	bne	1426c <flatcc_builder_extend_vector@@Base+0x64>
   1423c:	str	r0, [r2, #20]
   14240:	ldr	r5, [r4, #20]
   14244:	ldr	r3, [r4, #32]
   14248:	ldr	r3, [r3, #16]
   1424c:	mla	r1, r3, r1, r5
   14250:	str	r1, [r4, #20]
   14254:	ldr	r3, [r4, #24]
   14258:	cmp	r1, r3
   1425c:	bcs	14280 <flatcc_builder_extend_vector@@Base+0x78>
   14260:	ldr	r0, [r4, #16]
   14264:	add	r0, r0, r5
   14268:	pop	{r4, r5, r6, pc}
   1426c:	ldr	r3, [pc, #44]	; 142a0 <flatcc_builder_extend_vector@@Base+0x98>
   14270:	mov	r2, #892	; 0x37c
   14274:	ldr	r1, [pc, #40]	; 142a4 <flatcc_builder_extend_vector@@Base+0x9c>
   14278:	ldr	r0, [pc, #40]	; 142a8 <flatcc_builder_extend_vector@@Base+0xa0>
   1427c:	bl	1234c <__assert_fail@plt>
   14280:	mvn	r2, #3
   14284:	add	r1, r1, #1
   14288:	mov	r0, r4
   1428c:	bl	12ee0 <main@@Base+0xf4>
   14290:	cmp	r0, #0
   14294:	beq	14260 <flatcc_builder_extend_vector@@Base+0x58>
   14298:	mov	r0, #0
   1429c:	pop	{r4, r5, r6, pc}
   142a0:	andeq	r8, r1, ip, asr #31
   142a4:	andeq	r9, r1, ip, ror #7
   142a8:	andeq	r9, r1, r8, lsl #10

000142ac <flatcc_builder_vector_push@@Base>:
   142ac:	push	{r4, r5, r6, r7, r8, lr}
   142b0:	ldr	r3, [r0, #32]
   142b4:	ldrh	r2, [r3, #14]
   142b8:	cmp	r2, #4
   142bc:	bne	14324 <flatcc_builder_vector_push@@Base+0x78>
   142c0:	mov	r4, r0
   142c4:	mov	r6, r1
   142c8:	ldr	r2, [r3, #20]
   142cc:	ldr	r1, [r3, #24]
   142d0:	cmp	r2, r1
   142d4:	bhi	14338 <flatcc_builder_vector_push@@Base+0x8c>
   142d8:	add	r2, r2, #1
   142dc:	str	r2, [r3, #20]
   142e0:	ldr	r3, [r0, #32]
   142e4:	ldr	r7, [r3, #16]
   142e8:	ldr	r5, [r0, #20]
   142ec:	add	r1, r7, r5
   142f0:	str	r1, [r0, #20]
   142f4:	ldr	r3, [r0, #24]
   142f8:	cmp	r1, r3
   142fc:	bcs	1434c <flatcc_builder_vector_push@@Base+0xa0>
   14300:	ldr	r4, [r4, #16]
   14304:	adds	r4, r4, r5
   14308:	beq	1431c <flatcc_builder_vector_push@@Base+0x70>
   1430c:	mov	r2, r7
   14310:	mov	r1, r6
   14314:	mov	r0, r4
   14318:	bl	122bc <memcpy@plt>
   1431c:	mov	r0, r4
   14320:	pop	{r4, r5, r6, r7, r8, pc}
   14324:	ldr	r3, [pc, #60]	; 14368 <flatcc_builder_vector_push@@Base+0xbc>
   14328:	ldr	r2, [pc, #60]	; 1436c <flatcc_builder_vector_push@@Base+0xc0>
   1432c:	ldr	r1, [pc, #60]	; 14370 <flatcc_builder_vector_push@@Base+0xc4>
   14330:	ldr	r0, [pc, #60]	; 14374 <flatcc_builder_vector_push@@Base+0xc8>
   14334:	bl	1234c <__assert_fail@plt>
   14338:	ldr	r3, [pc, #40]	; 14368 <flatcc_builder_vector_push@@Base+0xbc>
   1433c:	mov	r2, #908	; 0x38c
   14340:	ldr	r1, [pc, #40]	; 14370 <flatcc_builder_vector_push@@Base+0xc4>
   14344:	ldr	r0, [pc, #44]	; 14378 <flatcc_builder_vector_push@@Base+0xcc>
   14348:	bl	1234c <__assert_fail@plt>
   1434c:	mvn	r2, #3
   14350:	add	r1, r1, #1
   14354:	bl	12ee0 <main@@Base+0xf4>
   14358:	cmp	r0, #0
   1435c:	beq	14300 <flatcc_builder_vector_push@@Base+0x54>
   14360:	mov	r4, #0
   14364:	b	1431c <flatcc_builder_vector_push@@Base+0x70>
   14368:	andeq	r8, r1, r0, ror #31
   1436c:	andeq	r0, r0, fp, lsl #7
   14370:	andeq	r9, r1, ip, ror #7
   14374:	andeq	r9, r1, r4, lsr #10
   14378:	andeq	r9, r1, r0, asr r5

0001437c <flatcc_builder_append_vector@@Base>:
   1437c:	push	{r4, r5, r6, r7, r8, lr}
   14380:	mov	r5, r1
   14384:	ldr	r1, [r0, #32]
   14388:	ldrh	r3, [r1, #14]
   1438c:	cmp	r3, #4
   14390:	bne	1440c <flatcc_builder_append_vector@@Base+0x90>
   14394:	mov	r4, r0
   14398:	ldr	r3, [r1, #20]
   1439c:	add	r0, r2, r3
   143a0:	ldr	ip, [r1, #24]
   143a4:	cmp	r3, r0
   143a8:	movls	r3, #0
   143ac:	movhi	r3, #1
   143b0:	cmp	ip, r0
   143b4:	orrcc	r3, r3, #1
   143b8:	cmp	r3, #0
   143bc:	bne	14420 <flatcc_builder_append_vector@@Base+0xa4>
   143c0:	str	r0, [r1, #20]
   143c4:	ldr	r3, [r4, #32]
   143c8:	ldr	r6, [r3, #16]
   143cc:	mul	r6, r6, r2
   143d0:	ldr	r7, [r4, #20]
   143d4:	add	r1, r6, r7
   143d8:	str	r1, [r4, #20]
   143dc:	ldr	r3, [r4, #24]
   143e0:	cmp	r1, r3
   143e4:	bcs	14434 <flatcc_builder_append_vector@@Base+0xb8>
   143e8:	ldr	r4, [r4, #16]
   143ec:	adds	r4, r4, r7
   143f0:	beq	14404 <flatcc_builder_append_vector@@Base+0x88>
   143f4:	mov	r2, r6
   143f8:	mov	r1, r5
   143fc:	mov	r0, r4
   14400:	bl	122bc <memcpy@plt>
   14404:	mov	r0, r4
   14408:	pop	{r4, r5, r6, r7, r8, pc}
   1440c:	ldr	r3, [pc, #64]	; 14454 <flatcc_builder_append_vector@@Base+0xd8>
   14410:	ldr	r2, [pc, #64]	; 14458 <flatcc_builder_append_vector@@Base+0xdc>
   14414:	ldr	r1, [pc, #64]	; 1445c <flatcc_builder_append_vector@@Base+0xe0>
   14418:	ldr	r0, [pc, #64]	; 14460 <flatcc_builder_append_vector@@Base+0xe4>
   1441c:	bl	1234c <__assert_fail@plt>
   14420:	ldr	r3, [pc, #60]	; 14464 <flatcc_builder_append_vector@@Base+0xe8>
   14424:	mov	r2, #892	; 0x37c
   14428:	ldr	r1, [pc, #44]	; 1445c <flatcc_builder_append_vector@@Base+0xe0>
   1442c:	ldr	r0, [pc, #52]	; 14468 <flatcc_builder_append_vector@@Base+0xec>
   14430:	bl	1234c <__assert_fail@plt>
   14434:	mvn	r2, #3
   14438:	add	r1, r1, #1
   1443c:	mov	r0, r4
   14440:	bl	12ee0 <main@@Base+0xf4>
   14444:	cmp	r0, #0
   14448:	beq	143e8 <flatcc_builder_append_vector@@Base+0x6c>
   1444c:	mov	r4, #0
   14450:	b	14404 <flatcc_builder_append_vector@@Base+0x88>
   14454:	strdeq	r8, [r1], -ip
   14458:	muleq	r0, r3, r3
   1445c:	andeq	r9, r1, ip, ror #7
   14460:	andeq	r9, r1, r4, lsr #10
   14464:	andeq	r8, r1, ip, asr #31
   14468:	andeq	r9, r1, r8, lsl #10

0001446c <flatcc_builder_extend_offset_vector@@Base>:
   1446c:	push	{r4, r5, r6, lr}
   14470:	mov	r4, r0
   14474:	ldr	r2, [r0, #32]
   14478:	ldr	r3, [r2, #20]
   1447c:	adds	r3, r1, r3
   14480:	movcs	ip, #1
   14484:	movcc	ip, #0
   14488:	cmn	r3, #-1073741823	; 0xc0000001
   1448c:	movls	r0, #0
   14490:	movhi	r0, #1
   14494:	orrs	r0, ip, r0
   14498:	bne	144c4 <flatcc_builder_extend_offset_vector@@Base+0x58>
   1449c:	str	r3, [r2, #20]
   144a0:	ldr	r5, [r4, #20]
   144a4:	add	r1, r5, r1, lsl #2
   144a8:	str	r1, [r4, #20]
   144ac:	ldr	r3, [r4, #24]
   144b0:	cmp	r1, r3
   144b4:	bcs	144d8 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   144b8:	ldr	r0, [r4, #16]
   144bc:	add	r0, r0, r5
   144c0:	pop	{r4, r5, r6, pc}
   144c4:	ldr	r3, [pc, #44]	; 144f8 <flatcc_builder_extend_offset_vector@@Base+0x8c>
   144c8:	mov	r2, #892	; 0x37c
   144cc:	ldr	r1, [pc, #40]	; 144fc <flatcc_builder_extend_offset_vector@@Base+0x90>
   144d0:	ldr	r0, [pc, #40]	; 14500 <flatcc_builder_extend_offset_vector@@Base+0x94>
   144d4:	bl	1234c <__assert_fail@plt>
   144d8:	mvn	r2, #3
   144dc:	add	r1, r1, #1
   144e0:	mov	r0, r4
   144e4:	bl	12ee0 <main@@Base+0xf4>
   144e8:	cmp	r0, #0
   144ec:	beq	144b8 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   144f0:	mov	r0, #0
   144f4:	pop	{r4, r5, r6, pc}
   144f8:	andeq	r8, r1, ip, asr #31
   144fc:	andeq	r9, r1, ip, ror #7
   14500:	andeq	r9, r1, r8, lsl #10

00014504 <flatcc_builder_offset_vector_push@@Base>:
   14504:	push	{r4, r5, r6, lr}
   14508:	ldr	r2, [r0, #32]
   1450c:	ldrh	r3, [r2, #14]
   14510:	cmp	r3, #5
   14514:	bne	1455c <flatcc_builder_offset_vector_push@@Base+0x58>
   14518:	mov	r4, r0
   1451c:	mov	r6, r1
   14520:	ldr	r3, [r2, #20]
   14524:	cmn	r3, #-1073741823	; 0xc0000001
   14528:	beq	1458c <flatcc_builder_offset_vector_push@@Base+0x88>
   1452c:	add	r3, r3, #1
   14530:	str	r3, [r2, #20]
   14534:	ldr	r5, [r0, #20]
   14538:	add	r3, r5, #4
   1453c:	str	r3, [r0, #20]
   14540:	ldr	r2, [r0, #24]
   14544:	cmp	r3, r2
   14548:	bcs	14570 <flatcc_builder_offset_vector_push@@Base+0x6c>
   1454c:	ldr	r3, [r4, #16]
   14550:	adds	r0, r3, r5
   14554:	strne	r6, [r3, r5]
   14558:	pop	{r4, r5, r6, pc}
   1455c:	ldr	r3, [pc, #48]	; 14594 <flatcc_builder_offset_vector_push@@Base+0x90>
   14560:	ldr	r2, [pc, #48]	; 14598 <flatcc_builder_offset_vector_push@@Base+0x94>
   14564:	ldr	r1, [pc, #48]	; 1459c <flatcc_builder_offset_vector_push@@Base+0x98>
   14568:	ldr	r0, [pc, #48]	; 145a0 <flatcc_builder_offset_vector_push@@Base+0x9c>
   1456c:	bl	1234c <__assert_fail@plt>
   14570:	mvn	r2, #3
   14574:	add	r1, r5, #5
   14578:	bl	12ee0 <main@@Base+0xf4>
   1457c:	cmp	r0, #0
   14580:	beq	1454c <flatcc_builder_offset_vector_push@@Base+0x48>
   14584:	mov	r0, #0
   14588:	pop	{r4, r5, r6, pc}
   1458c:	mov	r0, #0
   14590:	pop	{r4, r5, r6, pc}
   14594:	andeq	r9, r1, ip, lsl r0
   14598:	andeq	r0, r0, r6, lsr #7
   1459c:	andeq	r9, r1, ip, ror #7
   145a0:	muleq	r1, r0, r5

000145a4 <flatcc_builder_append_offset_vector@@Base>:
   145a4:	push	{r4, r5, r6, r7, r8, lr}
   145a8:	mov	r6, r1
   145ac:	ldr	r1, [r0, #32]
   145b0:	ldrh	r3, [r1, #14]
   145b4:	cmp	r3, #5
   145b8:	bne	14628 <flatcc_builder_append_offset_vector@@Base+0x84>
   145bc:	mov	r5, r0
   145c0:	ldr	r3, [r1, #20]
   145c4:	adds	r3, r2, r3
   145c8:	movcs	ip, #1
   145cc:	movcc	ip, #0
   145d0:	cmn	r3, #-1073741823	; 0xc0000001
   145d4:	movls	r0, #0
   145d8:	movhi	r0, #1
   145dc:	orrs	r0, ip, r0
   145e0:	bne	1463c <flatcc_builder_append_offset_vector@@Base+0x98>
   145e4:	str	r3, [r1, #20]
   145e8:	lsl	r4, r2, #2
   145ec:	ldr	r7, [r5, #20]
   145f0:	add	r1, r4, r7
   145f4:	str	r1, [r5, #20]
   145f8:	ldr	r3, [r5, #24]
   145fc:	cmp	r1, r3
   14600:	bcs	14650 <flatcc_builder_append_offset_vector@@Base+0xac>
   14604:	ldr	r5, [r5, #16]
   14608:	adds	r5, r5, r7
   1460c:	beq	14620 <flatcc_builder_append_offset_vector@@Base+0x7c>
   14610:	mov	r2, r4
   14614:	mov	r1, r6
   14618:	mov	r0, r5
   1461c:	bl	122bc <memcpy@plt>
   14620:	mov	r0, r5
   14624:	pop	{r4, r5, r6, r7, r8, pc}
   14628:	ldr	r3, [pc, #64]	; 14670 <flatcc_builder_append_offset_vector@@Base+0xcc>
   1462c:	mov	r2, #948	; 0x3b4
   14630:	ldr	r1, [pc, #60]	; 14674 <flatcc_builder_append_offset_vector@@Base+0xd0>
   14634:	ldr	r0, [pc, #60]	; 14678 <flatcc_builder_append_offset_vector@@Base+0xd4>
   14638:	bl	1234c <__assert_fail@plt>
   1463c:	ldr	r3, [pc, #56]	; 1467c <flatcc_builder_append_offset_vector@@Base+0xd8>
   14640:	mov	r2, #892	; 0x37c
   14644:	ldr	r1, [pc, #40]	; 14674 <flatcc_builder_append_offset_vector@@Base+0xd0>
   14648:	ldr	r0, [pc, #48]	; 14680 <flatcc_builder_append_offset_vector@@Base+0xdc>
   1464c:	bl	1234c <__assert_fail@plt>
   14650:	mvn	r2, #3
   14654:	add	r1, r1, #1
   14658:	mov	r0, r5
   1465c:	bl	12ee0 <main@@Base+0xf4>
   14660:	cmp	r0, #0
   14664:	beq	14604 <flatcc_builder_append_offset_vector@@Base+0x60>
   14668:	mov	r5, #0
   1466c:	b	14620 <flatcc_builder_append_offset_vector@@Base+0x7c>
   14670:	andeq	r9, r1, r0, asr #32
   14674:	andeq	r9, r1, ip, ror #7
   14678:	muleq	r1, r0, r5
   1467c:	andeq	r8, r1, ip, asr #31
   14680:	andeq	r9, r1, r8, lsl #10

00014684 <flatcc_builder_extend_string@@Base>:
   14684:	push	{r4, r5, r6, lr}
   14688:	ldr	r2, [r0, #32]
   1468c:	ldrh	r3, [r2, #14]
   14690:	cmp	r3, #6
   14694:	bne	146d0 <flatcc_builder_extend_string@@Base+0x4c>
   14698:	mov	r4, r0
   1469c:	ldr	r3, [r2, #20]
   146a0:	adds	r3, r1, r3
   146a4:	bcs	146e4 <flatcc_builder_extend_string@@Base+0x60>
   146a8:	str	r3, [r2, #20]
   146ac:	ldr	r5, [r0, #20]
   146b0:	add	r1, r1, r5
   146b4:	str	r1, [r0, #20]
   146b8:	ldr	r3, [r0, #24]
   146bc:	cmp	r1, r3
   146c0:	bcs	146f8 <flatcc_builder_extend_string@@Base+0x74>
   146c4:	ldr	r0, [r4, #16]
   146c8:	add	r0, r0, r5
   146cc:	pop	{r4, r5, r6, pc}
   146d0:	ldr	r3, [pc, #60]	; 14714 <flatcc_builder_extend_string@@Base+0x90>
   146d4:	ldr	r2, [pc, #60]	; 14718 <flatcc_builder_extend_string@@Base+0x94>
   146d8:	ldr	r1, [pc, #60]	; 1471c <flatcc_builder_extend_string@@Base+0x98>
   146dc:	ldr	r0, [pc, #60]	; 14720 <flatcc_builder_extend_string@@Base+0x9c>
   146e0:	bl	1234c <__assert_fail@plt>
   146e4:	ldr	r3, [pc, #56]	; 14724 <flatcc_builder_extend_string@@Base+0xa0>
   146e8:	mov	r2, #892	; 0x37c
   146ec:	ldr	r1, [pc, #40]	; 1471c <flatcc_builder_extend_string@@Base+0x98>
   146f0:	ldr	r0, [pc, #48]	; 14728 <flatcc_builder_extend_string@@Base+0xa4>
   146f4:	bl	1234c <__assert_fail@plt>
   146f8:	mvn	r2, #3
   146fc:	add	r1, r1, #1
   14700:	bl	12ee0 <main@@Base+0xf4>
   14704:	cmp	r0, #0
   14708:	beq	146c4 <flatcc_builder_extend_string@@Base+0x40>
   1470c:	mov	r0, #0
   14710:	pop	{r4, r5, r6, pc}
   14714:	andeq	r9, r1, r4, rrx
   14718:			; <UNDEFINED> instruction: 0x000003bd
   1471c:	andeq	r9, r1, ip, ror #7
   14720:	andeq	r9, r1, r4, asr #11
   14724:	andeq	r8, r1, ip, asr #31
   14728:	andeq	r9, r1, r8, lsl #10

0001472c <flatcc_builder_append_string@@Base>:
   1472c:	push	{r4, r5, r6, r7, r8, lr}
   14730:	mov	r5, r2
   14734:	ldr	r2, [r0, #32]
   14738:	ldrh	r3, [r2, #14]
   1473c:	cmp	r3, #6
   14740:	bne	14798 <flatcc_builder_append_string@@Base+0x6c>
   14744:	mov	r4, r0
   14748:	mov	r6, r1
   1474c:	ldr	r3, [r2, #20]
   14750:	adds	r3, r5, r3
   14754:	bcs	147ac <flatcc_builder_append_string@@Base+0x80>
   14758:	str	r3, [r2, #20]
   1475c:	ldr	r7, [r0, #20]
   14760:	add	r1, r5, r7
   14764:	str	r1, [r0, #20]
   14768:	ldr	r3, [r0, #24]
   1476c:	cmp	r1, r3
   14770:	bcs	147c0 <flatcc_builder_append_string@@Base+0x94>
   14774:	ldr	r4, [r4, #16]
   14778:	adds	r4, r4, r7
   1477c:	beq	14790 <flatcc_builder_append_string@@Base+0x64>
   14780:	mov	r2, r5
   14784:	mov	r1, r6
   14788:	mov	r0, r4
   1478c:	bl	122bc <memcpy@plt>
   14790:	mov	r0, r4
   14794:	pop	{r4, r5, r6, r7, r8, pc}
   14798:	ldr	r3, [pc, #60]	; 147dc <flatcc_builder_append_string@@Base+0xb0>
   1479c:	ldr	r2, [pc, #60]	; 147e0 <flatcc_builder_append_string@@Base+0xb4>
   147a0:	ldr	r1, [pc, #60]	; 147e4 <flatcc_builder_append_string@@Base+0xb8>
   147a4:	ldr	r0, [pc, #60]	; 147e8 <flatcc_builder_append_string@@Base+0xbc>
   147a8:	bl	1234c <__assert_fail@plt>
   147ac:	ldr	r3, [pc, #56]	; 147ec <flatcc_builder_append_string@@Base+0xc0>
   147b0:	mov	r2, #892	; 0x37c
   147b4:	ldr	r1, [pc, #40]	; 147e4 <flatcc_builder_append_string@@Base+0xb8>
   147b8:	ldr	r0, [pc, #48]	; 147f0 <flatcc_builder_append_string@@Base+0xc4>
   147bc:	bl	1234c <__assert_fail@plt>
   147c0:	mvn	r2, #3
   147c4:	add	r1, r1, #1
   147c8:	bl	12ee0 <main@@Base+0xf4>
   147cc:	cmp	r0, #0
   147d0:	beq	14774 <flatcc_builder_append_string@@Base+0x48>
   147d4:	mov	r4, #0
   147d8:	b	14790 <flatcc_builder_append_string@@Base+0x64>
   147dc:	andeq	r9, r1, r4, lsl #1
   147e0:	andeq	r0, r0, r6, asr #7
   147e4:	andeq	r9, r1, ip, ror #7
   147e8:	andeq	r9, r1, r4, asr #11
   147ec:	andeq	r8, r1, ip, asr #31
   147f0:	andeq	r9, r1, r8, lsl #10

000147f4 <flatcc_builder_append_string_str@@Base>:
   147f4:	push	{r4, r5, r6, lr}
   147f8:	mov	r5, r0
   147fc:	mov	r4, r1
   14800:	mov	r0, r1
   14804:	bl	12304 <strlen@plt>
   14808:	mov	r2, r0
   1480c:	mov	r1, r4
   14810:	mov	r0, r5
   14814:	bl	1472c <flatcc_builder_append_string@@Base>
   14818:	pop	{r4, r5, r6, pc}

0001481c <flatcc_builder_append_string_strn@@Base>:
   1481c:	push	{r4, r5, r6, lr}
   14820:	mov	r6, r0
   14824:	mov	r4, r1
   14828:	mov	r5, r2
   1482c:	mov	r1, #0
   14830:	mov	r0, r4
   14834:	bl	12334 <memchr@plt>
   14838:	cmp	r0, #0
   1483c:	subne	r5, r0, r4
   14840:	mov	r2, r5
   14844:	mov	r1, r4
   14848:	mov	r0, r6
   1484c:	bl	1472c <flatcc_builder_append_string@@Base>
   14850:	pop	{r4, r5, r6, pc}

00014854 <flatcc_builder_truncate_vector@@Base>:
   14854:	push	{r4, lr}
   14858:	ldr	ip, [r0, #32]
   1485c:	ldrh	r3, [ip, #14]
   14860:	cmp	r3, #4
   14864:	bne	148ac <flatcc_builder_truncate_vector@@Base+0x58>
   14868:	ldr	r3, [ip, #20]
   1486c:	cmp	r3, r1
   14870:	bcc	148c0 <flatcc_builder_truncate_vector@@Base+0x6c>
   14874:	sub	r3, r3, r1
   14878:	str	r3, [ip, #20]
   1487c:	ldr	r3, [r0, #32]
   14880:	ldr	r2, [r3, #16]
   14884:	mul	r2, r2, r1
   14888:	ldr	r3, [r0, #20]
   1488c:	sub	r3, r3, r2
   14890:	str	r3, [r0, #20]
   14894:	ldr	r0, [r0, #16]
   14898:	mov	r1, #0
   1489c:	add	r0, r0, r3
   148a0:	bl	1231c <memset@plt>
   148a4:	mov	r0, #0
   148a8:	pop	{r4, pc}
   148ac:	ldr	r3, [pc, #32]	; 148d4 <flatcc_builder_truncate_vector@@Base+0x80>
   148b0:	ldr	r2, [pc, #32]	; 148d8 <flatcc_builder_truncate_vector@@Base+0x84>
   148b4:	ldr	r1, [pc, #32]	; 148dc <flatcc_builder_truncate_vector@@Base+0x88>
   148b8:	ldr	r0, [pc, #32]	; 148e0 <flatcc_builder_truncate_vector@@Base+0x8c>
   148bc:	bl	1234c <__assert_fail@plt>
   148c0:	ldr	r3, [pc, #12]	; 148d4 <flatcc_builder_truncate_vector@@Base+0x80>
   148c4:	ldr	r2, [pc, #24]	; 148e4 <flatcc_builder_truncate_vector@@Base+0x90>
   148c8:	ldr	r1, [pc, #12]	; 148dc <flatcc_builder_truncate_vector@@Base+0x88>
   148cc:	ldr	r0, [pc, #20]	; 148e8 <flatcc_builder_truncate_vector@@Base+0x94>
   148d0:	bl	1234c <__assert_fail@plt>
   148d4:	andeq	r9, r1, r4, lsr #1
   148d8:	ldrdeq	r0, [r0], -r9
   148dc:	andeq	r9, r1, ip, ror #7
   148e0:	andeq	r9, r1, r4, lsr #10
   148e4:	ldrdeq	r0, [r0], -sl
   148e8:	strdeq	r9, [r1], -r0

000148ec <flatcc_builder_truncate_offset_vector@@Base>:
   148ec:	push	{r4, lr}
   148f0:	ldr	ip, [r0, #32]
   148f4:	ldrh	r3, [ip, #14]
   148f8:	cmp	r3, #5
   148fc:	bne	14944 <flatcc_builder_truncate_offset_vector@@Base+0x58>
   14900:	ldr	r3, [ip, #20]
   14904:	cmp	r3, r1
   14908:	bcc	14958 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1490c:	sub	r3, r3, r1
   14910:	str	r3, [ip, #20]
   14914:	ldr	r3, [r0, #32]
   14918:	ldr	r2, [r3, #16]
   1491c:	mul	r2, r2, r1
   14920:	ldr	r3, [r0, #20]
   14924:	sub	r3, r3, r2
   14928:	str	r3, [r0, #20]
   1492c:	ldr	r0, [r0, #16]
   14930:	mov	r1, #0
   14934:	add	r0, r0, r3
   14938:	bl	1231c <memset@plt>
   1493c:	mov	r0, #0
   14940:	pop	{r4, pc}
   14944:	ldr	r3, [pc, #32]	; 1496c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14948:	ldr	r2, [pc, #32]	; 14970 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   1494c:	ldr	r1, [pc, #32]	; 14974 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14950:	ldr	r0, [pc, #32]	; 14978 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14954:	bl	1234c <__assert_fail@plt>
   14958:	ldr	r3, [pc, #12]	; 1496c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   1495c:	ldr	r2, [pc, #24]	; 1497c <flatcc_builder_truncate_offset_vector@@Base+0x90>
   14960:	ldr	r1, [pc, #12]	; 14974 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14964:	ldr	r0, [pc, #20]	; 14980 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   14968:	bl	1234c <__assert_fail@plt>
   1496c:	andeq	r9, r1, r4, asr #1
   14970:	andeq	r0, r0, r2, ror #7
   14974:	andeq	r9, r1, ip, ror #7
   14978:	muleq	r1, r0, r5
   1497c:	andeq	r0, r0, r3, ror #7
   14980:	andeq	r9, r1, r4, lsl r6

00014984 <flatcc_builder_truncate_string@@Base>:
   14984:	push	{r4, lr}
   14988:	ldr	r2, [r0, #32]
   1498c:	ldrh	r3, [r2, #14]
   14990:	cmp	r3, #6
   14994:	bne	149d4 <flatcc_builder_truncate_string@@Base+0x50>
   14998:	ldr	r3, [r2, #20]
   1499c:	cmp	r3, r1
   149a0:	bcc	149e8 <flatcc_builder_truncate_string@@Base+0x64>
   149a4:	sub	r3, r3, r1
   149a8:	str	r3, [r2, #20]
   149ac:	ldr	r3, [r0, #20]
   149b0:	sub	r3, r3, r1
   149b4:	str	r3, [r0, #20]
   149b8:	ldr	r0, [r0, #16]
   149bc:	mov	r2, r1
   149c0:	mov	r1, #0
   149c4:	add	r0, r0, r3
   149c8:	bl	1231c <memset@plt>
   149cc:	mov	r0, #0
   149d0:	pop	{r4, pc}
   149d4:	ldr	r3, [pc, #32]	; 149fc <flatcc_builder_truncate_string@@Base+0x78>
   149d8:	ldr	r2, [pc, #32]	; 14a00 <flatcc_builder_truncate_string@@Base+0x7c>
   149dc:	ldr	r1, [pc, #32]	; 14a04 <flatcc_builder_truncate_string@@Base+0x80>
   149e0:	ldr	r0, [pc, #32]	; 14a08 <flatcc_builder_truncate_string@@Base+0x84>
   149e4:	bl	1234c <__assert_fail@plt>
   149e8:	ldr	r3, [pc, #12]	; 149fc <flatcc_builder_truncate_string@@Base+0x78>
   149ec:	mov	r2, #1004	; 0x3ec
   149f0:	ldr	r1, [pc, #12]	; 14a04 <flatcc_builder_truncate_string@@Base+0x80>
   149f4:	ldr	r0, [pc, #16]	; 14a0c <flatcc_builder_truncate_string@@Base+0x88>
   149f8:	bl	1234c <__assert_fail@plt>
   149fc:	andeq	r9, r1, ip, ror #1
   14a00:	andeq	r0, r0, fp, ror #7
   14a04:	andeq	r9, r1, ip, ror #7
   14a08:	andeq	r9, r1, r4, asr #11
   14a0c:	andeq	r9, r1, r0, asr r6

00014a10 <flatcc_builder_start_vector@@Base>:
   14a10:	push	{r4, r5, r6, lr}
   14a14:	mov	r4, r0
   14a18:	mov	r6, r1
   14a1c:	mov	r5, r3
   14a20:	cmp	r2, #4
   14a24:	movcs	r1, r2
   14a28:	movcc	r1, #4
   14a2c:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   14a30:	cmp	r0, #0
   14a34:	bne	14a94 <flatcc_builder_start_vector@@Base+0x84>
   14a38:	ldr	r3, [r4, #32]
   14a3c:	str	r6, [r3, #16]
   14a40:	ldr	r3, [r4, #32]
   14a44:	mov	r2, #0
   14a48:	str	r2, [r3, #20]
   14a4c:	ldr	r3, [r4, #32]
   14a50:	str	r5, [r3, #24]
   14a54:	ldr	r3, [r4, #32]
   14a58:	mov	r2, #4
   14a5c:	strh	r2, [r3, #14]
   14a60:	ldr	r1, [r4, #28]
   14a64:	ldr	r2, [r4, #60]	; 0x3c
   14a68:	add	r2, r2, r1
   14a6c:	str	r2, [r4, #16]
   14a70:	ldr	r3, [r4, #64]	; 0x40
   14a74:	sub	r3, r3, r1
   14a78:	cmn	r3, #4
   14a7c:	mvnhi	r3, #3
   14a80:	str	r3, [r4, #24]
   14a84:	ldr	r3, [r4, #32]
   14a88:	mvn	r2, #3
   14a8c:	str	r2, [r3, #4]
   14a90:	pop	{r4, r5, r6, pc}
   14a94:	mvn	r0, #0
   14a98:	pop	{r4, r5, r6, pc}

00014a9c <flatcc_builder_start_offset_vector@@Base>:
   14a9c:	push	{r4, lr}
   14aa0:	mov	r4, r0
   14aa4:	mov	r1, #4
   14aa8:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   14aac:	cmp	r0, #0
   14ab0:	bne	14b0c <flatcc_builder_start_offset_vector@@Base+0x70>
   14ab4:	ldr	r3, [r4, #32]
   14ab8:	mov	r2, #4
   14abc:	str	r2, [r3, #16]
   14ac0:	ldr	r3, [r4, #32]
   14ac4:	mov	r2, #0
   14ac8:	str	r2, [r3, #20]
   14acc:	ldr	r3, [r4, #32]
   14ad0:	mov	r2, #5
   14ad4:	strh	r2, [r3, #14]
   14ad8:	ldr	r1, [r4, #28]
   14adc:	ldr	r2, [r4, #60]	; 0x3c
   14ae0:	add	r2, r2, r1
   14ae4:	str	r2, [r4, #16]
   14ae8:	ldr	r3, [r4, #64]	; 0x40
   14aec:	sub	r3, r3, r1
   14af0:	cmn	r3, #4
   14af4:	mvnhi	r3, #3
   14af8:	str	r3, [r4, #24]
   14afc:	ldr	r3, [r4, #32]
   14b00:	mvn	r2, #3
   14b04:	str	r2, [r3, #4]
   14b08:	pop	{r4, pc}
   14b0c:	mvn	r0, #0
   14b10:	pop	{r4, pc}

00014b14 <flatcc_builder_start_string@@Base>:
   14b14:	push	{r4, lr}
   14b18:	mov	r4, r0
   14b1c:	mov	r1, #1
   14b20:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   14b24:	cmp	r0, #0
   14b28:	bne	14b84 <flatcc_builder_start_string@@Base+0x70>
   14b2c:	ldr	r3, [r4, #32]
   14b30:	mov	r2, #1
   14b34:	str	r2, [r3, #16]
   14b38:	ldr	r3, [r4, #32]
   14b3c:	mov	r2, #0
   14b40:	str	r2, [r3, #20]
   14b44:	ldr	r3, [r4, #32]
   14b48:	mov	r2, #6
   14b4c:	strh	r2, [r3, #14]
   14b50:	ldr	r1, [r4, #28]
   14b54:	ldr	r2, [r4, #60]	; 0x3c
   14b58:	add	r2, r2, r1
   14b5c:	str	r2, [r4, #16]
   14b60:	ldr	r3, [r4, #64]	; 0x40
   14b64:	sub	r3, r3, r1
   14b68:	cmn	r3, #4
   14b6c:	mvnhi	r3, #3
   14b70:	str	r3, [r4, #24]
   14b74:	ldr	r3, [r4, #32]
   14b78:	mvn	r2, #3
   14b7c:	str	r2, [r3, #4]
   14b80:	pop	{r4, pc}
   14b84:	mvn	r0, #0
   14b88:	pop	{r4, pc}

00014b8c <flatcc_builder_reserve_table@@Base>:
   14b8c:	push	{r4, r5, r6, r7, lr}
   14b90:	sub	sp, sp, #12
   14b94:	cmp	r1, #0
   14b98:	blt	14c24 <flatcc_builder_reserve_table@@Base+0x98>
   14b9c:	mov	r5, r0
   14ba0:	ldr	r2, [r0, #32]
   14ba4:	ldrh	r6, [r2, #28]
   14ba8:	ldr	r3, [r2, #16]
   14bac:	add	r6, r3, r6, lsl #1
   14bb0:	add	r1, r1, #2
   14bb4:	lsl	r4, r1, #1
   14bb8:	add	r2, r6, r4
   14bbc:	ldr	r3, [r0, #56]	; 0x38
   14bc0:	cmp	r2, r3
   14bc4:	bhi	14c38 <flatcc_builder_reserve_table@@Base+0xac>
   14bc8:	ldr	r3, [r5, #52]	; 0x34
   14bcc:	adds	r3, r3, r6
   14bd0:	moveq	r3, #0
   14bd4:	streq	r3, [r5, #4]
   14bd8:	mvneq	r0, #0
   14bdc:	beq	14c1c <flatcc_builder_reserve_table@@Base+0x90>
   14be0:	add	r3, r3, #4
   14be4:	str	r3, [r5, #4]
   14be8:	ldr	r3, [r5, #32]
   14bec:	ldr	r6, [r3, #20]
   14bf0:	add	r2, r4, r6
   14bf4:	sub	r2, r2, #3
   14bf8:	ldr	r3, [r5, #80]	; 0x50
   14bfc:	cmp	r2, r3
   14c00:	bhi	14c70 <flatcc_builder_reserve_table@@Base+0xe4>
   14c04:	ldr	r0, [r5, #76]	; 0x4c
   14c08:	add	r0, r0, r6
   14c0c:	str	r0, [r5]
   14c10:	cmp	r0, #0
   14c14:	movne	r0, #0
   14c18:	mvneq	r0, #0
   14c1c:	add	sp, sp, #12
   14c20:	pop	{r4, r5, r6, r7, pc}
   14c24:	ldr	r3, [pc, #124]	; 14ca8 <flatcc_builder_reserve_table@@Base+0x11c>
   14c28:	ldr	r2, [pc, #124]	; 14cac <flatcc_builder_reserve_table@@Base+0x120>
   14c2c:	ldr	r1, [pc, #124]	; 14cb0 <flatcc_builder_reserve_table@@Base+0x124>
   14c30:	ldr	r0, [pc, #124]	; 14cb4 <flatcc_builder_reserve_table@@Base+0x128>
   14c34:	bl	1234c <__assert_fail@plt>
   14c38:	mov	r3, #0
   14c3c:	str	r3, [sp]
   14c40:	ldr	r7, [r0, #48]	; 0x30
   14c44:	mov	r3, #1
   14c48:	add	r1, r0, #52	; 0x34
   14c4c:	ldr	r0, [r0, #40]	; 0x28
   14c50:	blx	r7
   14c54:	cmp	r0, #0
   14c58:	beq	14bc8 <flatcc_builder_reserve_table@@Base+0x3c>
   14c5c:	ldr	r3, [pc, #84]	; 14cb8 <flatcc_builder_reserve_table@@Base+0x12c>
   14c60:	mov	r2, #308	; 0x134
   14c64:	ldr	r1, [pc, #68]	; 14cb0 <flatcc_builder_reserve_table@@Base+0x124>
   14c68:	ldr	r0, [pc, #76]	; 14cbc <flatcc_builder_reserve_table@@Base+0x130>
   14c6c:	bl	1234c <__assert_fail@plt>
   14c70:	mov	r3, #3
   14c74:	str	r3, [sp]
   14c78:	ldr	r4, [r5, #48]	; 0x30
   14c7c:	mov	r3, #0
   14c80:	add	r1, r5, #76	; 0x4c
   14c84:	ldr	r0, [r5, #40]	; 0x28
   14c88:	blx	r4
   14c8c:	cmp	r0, #0
   14c90:	beq	14c04 <flatcc_builder_reserve_table@@Base+0x78>
   14c94:	ldr	r3, [pc, #28]	; 14cb8 <flatcc_builder_reserve_table@@Base+0x12c>
   14c98:	mov	r2, #308	; 0x134
   14c9c:	ldr	r1, [pc, #12]	; 14cb0 <flatcc_builder_reserve_table@@Base+0x124>
   14ca0:	ldr	r0, [pc, #20]	; 14cbc <flatcc_builder_reserve_table@@Base+0x130>
   14ca4:	bl	1234c <__assert_fail@plt>
   14ca8:	andeq	r9, r1, ip, lsl #2
   14cac:	andeq	r0, r0, r9, lsr #8
   14cb0:	andeq	r9, r1, ip, ror #7
   14cb4:	andeq	r9, r1, r4, ror r6
   14cb8:			; <UNDEFINED> instruction: 0x00018eb8
   14cbc:	andeq	r9, r1, r0, asr #8

00014cc0 <flatcc_builder_start_table@@Base>:
   14cc0:	push	{r4, r5, r6, r7, lr}
   14cc4:	sub	sp, sp, #12
   14cc8:	mov	r4, r0
   14ccc:	mov	r5, r1
   14cd0:	mov	r1, #4
   14cd4:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   14cd8:	cmp	r0, #0
   14cdc:	bne	14e6c <flatcc_builder_start_table@@Base+0x1ac>
   14ce0:	ldr	r2, [r4, #32]
   14ce4:	ldr	r3, [r4, #4]
   14ce8:	ldr	r1, [r4, #52]	; 0x34
   14cec:	sub	r3, r3, r1
   14cf0:	str	r3, [r2, #16]
   14cf4:	ldr	r2, [r4, #32]
   14cf8:	ldr	r3, [r4]
   14cfc:	ldr	r1, [r4, #76]	; 0x4c
   14d00:	sub	r3, r3, r1
   14d04:	str	r3, [r2, #20]
   14d08:	ldr	r3, [r4, #32]
   14d0c:	ldr	r2, [r4, #12]
   14d10:	str	r2, [r3, #24]
   14d14:	ldr	r3, [r4, #32]
   14d18:	ldrh	r2, [r4, #8]
   14d1c:	strh	r2, [r3, #28]
   14d20:	ldr	r3, [pc, #340]	; 14e7c <flatcc_builder_start_table@@Base+0x1bc>
   14d24:	str	r3, [r4, #12]
   14d28:	mov	r3, #0
   14d2c:	strh	r3, [r4, #8]
   14d30:	ldr	r3, [r4, #32]
   14d34:	mov	r2, #3
   14d38:	strh	r2, [r3, #14]
   14d3c:	ldr	r2, [r4, #32]
   14d40:	ldrh	r6, [r2, #28]
   14d44:	ldr	r3, [r2, #16]
   14d48:	add	r6, r3, r6, lsl #1
   14d4c:	add	r5, r5, #2
   14d50:	lsl	r5, r5, #1
   14d54:	add	r2, r6, r5
   14d58:	ldr	r3, [r4, #56]	; 0x38
   14d5c:	cmp	r2, r3
   14d60:	bhi	14dfc <flatcc_builder_start_table@@Base+0x13c>
   14d64:	ldr	r3, [r4, #52]	; 0x34
   14d68:	adds	r3, r3, r6
   14d6c:	moveq	r3, #0
   14d70:	streq	r3, [r4, #4]
   14d74:	mvneq	r0, #0
   14d78:	beq	14df4 <flatcc_builder_start_table@@Base+0x134>
   14d7c:	add	r3, r3, #4
   14d80:	str	r3, [r4, #4]
   14d84:	ldr	r3, [r4, #32]
   14d88:	ldr	r6, [r3, #20]
   14d8c:	sub	r2, r5, #3
   14d90:	add	r2, r2, r6
   14d94:	ldr	r3, [r4, #80]	; 0x50
   14d98:	cmp	r2, r3
   14d9c:	bhi	14e34 <flatcc_builder_start_table@@Base+0x174>
   14da0:	ldr	r0, [r4, #76]	; 0x4c
   14da4:	add	r0, r0, r6
   14da8:	str	r0, [r4]
   14dac:	cmp	r0, #0
   14db0:	movne	r0, #0
   14db4:	mvneq	r0, #0
   14db8:	cmp	r0, #0
   14dbc:	bne	14e74 <flatcc_builder_start_table@@Base+0x1b4>
   14dc0:	ldr	r1, [r4, #28]
   14dc4:	ldr	r2, [r4, #60]	; 0x3c
   14dc8:	add	r2, r2, r1
   14dcc:	str	r2, [r4, #16]
   14dd0:	ldr	r3, [r4, #64]	; 0x40
   14dd4:	sub	r3, r3, r1
   14dd8:	ldr	r2, [pc, #160]	; 14e80 <flatcc_builder_start_table@@Base+0x1c0>
   14ddc:	cmp	r3, r2
   14de0:	ldrhi	r3, [pc, #152]	; 14e80 <flatcc_builder_start_table@@Base+0x1c0>
   14de4:	str	r3, [r4, #24]
   14de8:	ldr	r3, [r4, #32]
   14dec:	ldr	r2, [pc, #140]	; 14e80 <flatcc_builder_start_table@@Base+0x1c0>
   14df0:	str	r2, [r3, #4]
   14df4:	add	sp, sp, #12
   14df8:	pop	{r4, r5, r6, r7, pc}
   14dfc:	mov	r3, #0
   14e00:	str	r3, [sp]
   14e04:	ldr	r7, [r4, #48]	; 0x30
   14e08:	mov	r3, #1
   14e0c:	add	r1, r4, #52	; 0x34
   14e10:	ldr	r0, [r4, #40]	; 0x28
   14e14:	blx	r7
   14e18:	cmp	r0, #0
   14e1c:	beq	14d64 <flatcc_builder_start_table@@Base+0xa4>
   14e20:	ldr	r3, [pc, #92]	; 14e84 <flatcc_builder_start_table@@Base+0x1c4>
   14e24:	mov	r2, #308	; 0x134
   14e28:	ldr	r1, [pc, #88]	; 14e88 <flatcc_builder_start_table@@Base+0x1c8>
   14e2c:	ldr	r0, [pc, #88]	; 14e8c <flatcc_builder_start_table@@Base+0x1cc>
   14e30:	bl	1234c <__assert_fail@plt>
   14e34:	mov	r3, #3
   14e38:	str	r3, [sp]
   14e3c:	ldr	r5, [r4, #48]	; 0x30
   14e40:	mov	r3, #0
   14e44:	add	r1, r4, #76	; 0x4c
   14e48:	ldr	r0, [r4, #40]	; 0x28
   14e4c:	blx	r5
   14e50:	cmp	r0, #0
   14e54:	beq	14da0 <flatcc_builder_start_table@@Base+0xe0>
   14e58:	ldr	r3, [pc, #36]	; 14e84 <flatcc_builder_start_table@@Base+0x1c4>
   14e5c:	mov	r2, #308	; 0x134
   14e60:	ldr	r1, [pc, #32]	; 14e88 <flatcc_builder_start_table@@Base+0x1c8>
   14e64:	ldr	r0, [pc, #32]	; 14e8c <flatcc_builder_start_table@@Base+0x1cc>
   14e68:	bl	1234c <__assert_fail@plt>
   14e6c:	mvn	r0, #0
   14e70:	b	14df4 <flatcc_builder_start_table@@Base+0x134>
   14e74:	mvn	r0, #0
   14e78:	b	14df4 <flatcc_builder_start_table@@Base+0x134>
   14e7c:	svccs	0x00693b52
   14e80:	strdeq	pc, [r0], -ip
   14e84:			; <UNDEFINED> instruction: 0x00018eb8
   14e88:	andeq	r9, r1, ip, ror #7
   14e8c:	andeq	r9, r1, r0, asr #8

00014e90 <flatcc_builder_create_vtable@@Base>:
   14e90:	push	{r4, r5, r6, lr}
   14e94:	sub	sp, sp, #80	; 0x50
   14e98:	mov	r5, r0
   14e9c:	mov	r3, #0
   14ea0:	str	r3, [sp, #8]
   14ea4:	str	r3, [sp, #12]
   14ea8:	cmp	r2, #0
   14eac:	beq	14f30 <flatcc_builder_create_vtable@@Base+0xa0>
   14eb0:	str	r2, [sp, #8]
   14eb4:	str	r1, [sp, #16]
   14eb8:	str	r2, [sp, #20]
   14ebc:	mov	r3, #1
   14ec0:	str	r3, [sp, #12]
   14ec4:	ldr	r3, [r0, #152]	; 0x98
   14ec8:	cmp	r3, #0
   14ecc:	bne	14f48 <flatcc_builder_create_vtable@@Base+0xb8>
   14ed0:	ldr	r3, [r0, #180]	; 0xb4
   14ed4:	cmp	r3, #0
   14ed8:	bne	14f48 <flatcc_builder_create_vtable@@Base+0xb8>
   14edc:	ldr	r4, [r0, #140]	; 0x8c
   14ee0:	mov	r3, r2
   14ee4:	add	r2, r2, r4
   14ee8:	str	r2, [r0, #140]	; 0x8c
   14eec:	cmp	r4, r2
   14ef0:	ble	14fa8 <flatcc_builder_create_vtable@@Base+0x118>
   14ef4:	ldr	r3, [pc, #232]	; 14fe4 <flatcc_builder_create_vtable@@Base+0x154>
   14ef8:	ldr	r2, [pc, #232]	; 14fe8 <flatcc_builder_create_vtable@@Base+0x158>
   14efc:	ldr	r1, [pc, #232]	; 14fec <flatcc_builder_create_vtable@@Base+0x15c>
   14f00:	ldr	r0, [pc, #232]	; 14ff0 <flatcc_builder_create_vtable@@Base+0x160>
   14f04:	bl	1234c <__assert_fail@plt>
   14f08:	ldr	r3, [pc, #228]	; 14ff4 <flatcc_builder_create_vtable@@Base+0x164>
   14f0c:	ldr	r2, [pc, #228]	; 14ff8 <flatcc_builder_create_vtable@@Base+0x168>
   14f10:	ldr	r1, [pc, #212]	; 14fec <flatcc_builder_create_vtable@@Base+0x15c>
   14f14:	ldr	r0, [pc, #212]	; 14ff0 <flatcc_builder_create_vtable@@Base+0x160>
   14f18:	bl	1234c <__assert_fail@plt>
   14f1c:	ldr	r3, [pc, #208]	; 14ff4 <flatcc_builder_create_vtable@@Base+0x164>
   14f20:	ldr	r2, [pc, #212]	; 14ffc <flatcc_builder_create_vtable@@Base+0x16c>
   14f24:	ldr	r1, [pc, #192]	; 14fec <flatcc_builder_create_vtable@@Base+0x15c>
   14f28:	ldr	r0, [pc, #192]	; 14ff0 <flatcc_builder_create_vtable@@Base+0x160>
   14f2c:	bl	1234c <__assert_fail@plt>
   14f30:	ldr	r3, [r0, #152]	; 0x98
   14f34:	cmp	r3, #0
   14f38:	bne	14f08 <flatcc_builder_create_vtable@@Base+0x78>
   14f3c:	ldr	r3, [r0, #180]	; 0xb4
   14f40:	cmp	r3, #0
   14f44:	beq	14f98 <flatcc_builder_create_vtable@@Base+0x108>
   14f48:	ldr	r2, [r5, #136]	; 0x88
   14f4c:	ldr	r3, [sp, #8]
   14f50:	sub	r4, r2, r3
   14f54:	cmp	r2, r4
   14f58:	ble	14f08 <flatcc_builder_create_vtable@@Base+0x78>
   14f5c:	str	r3, [sp]
   14f60:	ldr	r6, [r5, #44]	; 0x2c
   14f64:	mov	r3, r4
   14f68:	ldr	r2, [sp, #12]
   14f6c:	add	r1, sp, #16
   14f70:	ldr	r0, [r5, #36]	; 0x24
   14f74:	blx	r6
   14f78:	cmp	r0, #0
   14f7c:	bne	14f1c <flatcc_builder_create_vtable@@Base+0x8c>
   14f80:	str	r4, [r5, #136]	; 0x88
   14f84:	cmp	r4, #0
   14f88:	addne	r4, r4, #1
   14f8c:	mov	r0, r4
   14f90:	add	sp, sp, #80	; 0x50
   14f94:	pop	{r4, r5, r6, pc}
   14f98:	ldr	r4, [r5, #140]	; 0x8c
   14f9c:	ldr	r3, [sp, #8]
   14fa0:	add	r2, r3, r4
   14fa4:	str	r2, [r5, #140]	; 0x8c
   14fa8:	ldr	r0, [r5, #36]	; 0x24
   14fac:	str	r3, [sp]
   14fb0:	ldr	r5, [r5, #44]	; 0x2c
   14fb4:	mov	r3, r4
   14fb8:	ldr	r2, [sp, #12]
   14fbc:	add	r1, sp, #16
   14fc0:	blx	r5
   14fc4:	cmp	r0, #0
   14fc8:	addeq	r4, r4, #1
   14fcc:	beq	14f8c <flatcc_builder_create_vtable@@Base+0xfc>
   14fd0:	ldr	r3, [pc, #12]	; 14fe4 <flatcc_builder_create_vtable@@Base+0x154>
   14fd4:	ldr	r2, [pc, #36]	; 15000 <flatcc_builder_create_vtable@@Base+0x170>
   14fd8:	ldr	r1, [pc, #12]	; 14fec <flatcc_builder_create_vtable@@Base+0x15c>
   14fdc:	ldr	r0, [pc, #12]	; 14ff0 <flatcc_builder_create_vtable@@Base+0x160>
   14fe0:	bl	1234c <__assert_fail@plt>
   14fe4:	muleq	r1, ip, lr
   14fe8:	andeq	r0, r0, r1, lsr #5
   14fec:	andeq	r9, r1, ip, ror #7
   14ff0:	andeq	r9, r1, r0, asr #8
   14ff4:	andeq	r8, r1, r8, ror #29
   14ff8:	andeq	r0, r0, r7, lsl #5
   14ffc:	andeq	r0, r0, fp, lsl #5
   15000:	andeq	r0, r0, r5, lsr #5

00015004 <flatcc_builder_create_cached_vtable@@Base>:
   15004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15008:	sub	sp, sp, #28
   1500c:	mov	r8, r0
   15010:	str	r1, [sp, #8]
   15014:	mov	r7, r2
   15018:	mov	fp, r3
   1501c:	ldr	r4, [r0, #116]	; 0x74
   15020:	cmp	r4, #0
   15024:	beq	1506c <flatcc_builder_create_cached_vtable@@Base+0x68>
   15028:	ldr	r3, [r8, #116]	; 0x74
   1502c:	rsb	r3, r3, #32
   15030:	lsr	fp, fp, r3
   15034:	ldr	r3, [r8, #92]	; 0x5c
   15038:	str	r3, [sp, #16]
   1503c:	adds	r2, r3, fp, lsl #2
   15040:	str	r2, [sp, #20]
   15044:	beq	1533c <flatcc_builder_create_cached_vtable@@Base+0x338>
   15048:	ldr	r5, [r3, fp, lsl #2]
   1504c:	cmp	r5, #0
   15050:	beq	151dc <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   15054:	ldr	sl, [r8, #100]	; 0x64
   15058:	ldr	r6, [r8, #68]	; 0x44
   1505c:	mov	r9, r2
   15060:	mov	r3, #0
   15064:	str	r3, [sp, #12]
   15068:	b	15164 <flatcc_builder_create_cached_vtable@@Base+0x160>
   1506c:	add	r6, r0, #92	; 0x5c
   15070:	ldr	r3, [r0, #124]	; 0x7c
   15074:	cmp	r3, #0
   15078:	bne	150d0 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   1507c:	ldr	r3, [r0, #104]	; 0x68
   15080:	cmp	r3, #15
   15084:	bls	150e4 <flatcc_builder_create_cached_vtable@@Base+0xe0>
   15088:	ldr	r3, [r8, #100]	; 0x64
   1508c:	cmp	r3, #0
   15090:	beq	1535c <flatcc_builder_create_cached_vtable@@Base+0x358>
   15094:	mov	r3, #16
   15098:	str	r3, [r8, #124]	; 0x7c
   1509c:	mov	r3, #5
   150a0:	str	r3, [sp]
   150a4:	ldr	r5, [r8, #48]	; 0x30
   150a8:	mov	r3, #1
   150ac:	mov	r2, #256	; 0x100
   150b0:	mov	r1, r6
   150b4:	ldr	r0, [r8, #40]	; 0x28
   150b8:	blx	r5
   150bc:	cmp	r0, #0
   150c0:	bne	1535c <flatcc_builder_create_cached_vtable@@Base+0x358>
   150c4:	ldr	r1, [r8, #96]	; 0x60
   150c8:	mov	r3, #256	; 0x100
   150cc:	b	15124 <flatcc_builder_create_cached_vtable@@Base+0x120>
   150d0:	ldr	r3, [pc, #652]	; 15364 <flatcc_builder_create_cached_vtable@@Base+0x360>
   150d4:	ldr	r2, [pc, #652]	; 15368 <flatcc_builder_create_cached_vtable@@Base+0x364>
   150d8:	ldr	r1, [pc, #652]	; 1536c <flatcc_builder_create_cached_vtable@@Base+0x368>
   150dc:	ldr	r0, [pc, #652]	; 15370 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   150e0:	bl	1234c <__assert_fail@plt>
   150e4:	mov	r3, #6
   150e8:	str	r3, [sp]
   150ec:	ldr	r5, [r0, #48]	; 0x30
   150f0:	mov	r3, #0
   150f4:	mov	r2, #16
   150f8:	add	r1, r0, #100	; 0x64
   150fc:	ldr	r0, [r0, #40]	; 0x28
   15100:	blx	r5
   15104:	cmp	r0, #0
   15108:	beq	15088 <flatcc_builder_create_cached_vtable@@Base+0x84>
   1510c:	ldr	r3, [pc, #608]	; 15374 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15110:	mov	r2, #308	; 0x134
   15114:	ldr	r1, [pc, #592]	; 1536c <flatcc_builder_create_cached_vtable@@Base+0x368>
   15118:	ldr	r0, [pc, #600]	; 15378 <flatcc_builder_create_cached_vtable@@Base+0x374>
   1511c:	bl	1234c <__assert_fail@plt>
   15120:	mov	r3, r2
   15124:	lsl	r2, r3, #1
   15128:	cmp	r2, r1
   1512c:	bls	15120 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   15130:	lsr	r3, r3, #2
   15134:	cmp	r3, #1
   15138:	bls	1514c <flatcc_builder_create_cached_vtable@@Base+0x148>
   1513c:	mov	r2, #1
   15140:	add	r4, r4, #1
   15144:	cmp	r3, r2, lsl r4
   15148:	bhi	15140 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   1514c:	str	r4, [r8, #116]	; 0x74
   15150:	b	15028 <flatcc_builder_create_cached_vtable@@Base+0x24>
   15154:	add	r9, r4, #12
   15158:	ldr	r5, [r4, #12]
   1515c:	cmp	r5, #0
   15160:	beq	151e4 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   15164:	add	r4, sl, r5
   15168:	ldr	r3, [r4, #8]
   1516c:	add	r1, r6, r3
   15170:	ldrh	r3, [r6, r3]
   15174:	cmp	r3, r7
   15178:	bne	15154 <flatcc_builder_create_cached_vtable@@Base+0x150>
   1517c:	mov	r2, r7
   15180:	ldr	r0, [sp, #8]
   15184:	bl	122c8 <memcmp@plt>
   15188:	cmp	r0, #0
   1518c:	bne	15154 <flatcc_builder_create_cached_vtable@@Base+0x150>
   15190:	ldr	r2, [r4, #4]
   15194:	ldr	r3, [r8, #152]	; 0x98
   15198:	cmp	r2, r3
   1519c:	addne	r9, r4, #12
   151a0:	ldrne	r5, [r4, #12]
   151a4:	strne	r4, [sp, #12]
   151a8:	bne	1515c <flatcc_builder_create_cached_vtable@@Base+0x158>
   151ac:	ldr	r3, [sp, #20]
   151b0:	cmp	r3, r9
   151b4:	beq	151d0 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   151b8:	ldr	r3, [r4, #12]
   151bc:	str	r3, [r9]
   151c0:	ldr	r2, [sp, #16]
   151c4:	ldr	r3, [r2, fp, lsl #2]
   151c8:	str	r3, [r4, #12]
   151cc:	str	r5, [r2, fp, lsl #2]
   151d0:	ldr	r0, [r4]
   151d4:	add	sp, sp, #28
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151dc:	mov	r3, #0
   151e0:	str	r3, [sp, #12]
   151e4:	ldr	r4, [r8, #124]	; 0x7c
   151e8:	add	r2, r4, #16
   151ec:	ldr	r3, [r8, #104]	; 0x68
   151f0:	cmp	r2, r3
   151f4:	bhi	15260 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   151f8:	ldr	r5, [r8, #100]	; 0x64
   151fc:	adds	r6, r5, r4
   15200:	beq	15344 <flatcc_builder_create_cached_vtable@@Base+0x340>
   15204:	ldr	r3, [r8, #124]	; 0x7c
   15208:	add	r2, r3, #16
   1520c:	str	r2, [r8, #124]	; 0x7c
   15210:	ldr	r2, [r8, #152]	; 0x98
   15214:	str	r2, [r6, #4]
   15218:	ldr	r1, [sp, #16]
   1521c:	ldr	r2, [r1, fp, lsl #2]
   15220:	str	r2, [r6, #12]
   15224:	str	r3, [r1, fp, lsl #2]
   15228:	mov	r2, r7
   1522c:	ldr	r1, [sp, #8]
   15230:	mov	r0, r8
   15234:	bl	14e90 <flatcc_builder_create_vtable@@Base>
   15238:	str	r0, [r5, r4]
   1523c:	cmp	r0, #0
   15240:	beq	1534c <flatcc_builder_create_cached_vtable@@Base+0x348>
   15244:	ldr	r3, [sp, #12]
   15248:	cmp	r3, #0
   1524c:	beq	15298 <flatcc_builder_create_cached_vtable@@Base+0x294>
   15250:	ldr	r3, [r3, #8]
   15254:	str	r3, [r6, #8]
   15258:	ldr	r0, [r5, r4]
   1525c:	b	151d4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   15260:	mov	r3, #6
   15264:	str	r3, [sp]
   15268:	ldr	r5, [r8, #48]	; 0x30
   1526c:	mov	r3, #0
   15270:	add	r1, r8, #100	; 0x64
   15274:	ldr	r0, [r8, #40]	; 0x28
   15278:	blx	r5
   1527c:	cmp	r0, #0
   15280:	beq	151f8 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   15284:	ldr	r3, [pc, #232]	; 15374 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15288:	mov	r2, #308	; 0x134
   1528c:	ldr	r1, [pc, #216]	; 1536c <flatcc_builder_create_cached_vtable@@Base+0x368>
   15290:	ldr	r0, [pc, #224]	; 15378 <flatcc_builder_create_cached_vtable@@Base+0x374>
   15294:	bl	1234c <__assert_fail@plt>
   15298:	ldr	r2, [r8, #172]	; 0xac
   1529c:	cmp	r2, #0
   152a0:	beq	152b4 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   152a4:	ldr	r3, [r8, #120]	; 0x78
   152a8:	add	r3, r7, r3
   152ac:	cmp	r2, r3
   152b0:	bcc	152f8 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   152b4:	ldr	r9, [r8, #120]	; 0x78
   152b8:	add	r2, r9, r7
   152bc:	ldr	r3, [r8, #72]	; 0x48
   152c0:	cmp	r2, r3
   152c4:	bhi	15304 <flatcc_builder_create_cached_vtable@@Base+0x300>
   152c8:	ldr	r3, [r8, #68]	; 0x44
   152cc:	adds	r0, r3, r9
   152d0:	beq	15354 <flatcc_builder_create_cached_vtable@@Base+0x350>
   152d4:	ldr	r3, [r8, #120]	; 0x78
   152d8:	str	r3, [r6, #8]
   152dc:	ldr	r3, [r8, #120]	; 0x78
   152e0:	add	r3, r3, r7
   152e4:	str	r3, [r8, #120]	; 0x78
   152e8:	mov	r2, r7
   152ec:	ldr	r1, [sp, #8]
   152f0:	bl	122bc <memcpy@plt>
   152f4:	b	15258 <flatcc_builder_create_cached_vtable@@Base+0x254>
   152f8:	mov	r0, r8
   152fc:	bl	134c4 <flatcc_builder_flush_vtable_cache@@Base>
   15300:	b	15258 <flatcc_builder_create_cached_vtable@@Base+0x254>
   15304:	mov	r3, #2
   15308:	str	r3, [sp]
   1530c:	ldr	sl, [r8, #48]	; 0x30
   15310:	mov	r3, #0
   15314:	add	r1, r8, #68	; 0x44
   15318:	ldr	r0, [r8, #40]	; 0x28
   1531c:	blx	sl
   15320:	cmp	r0, #0
   15324:	beq	152c8 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15328:	ldr	r3, [pc, #68]	; 15374 <flatcc_builder_create_cached_vtable@@Base+0x370>
   1532c:	mov	r2, #308	; 0x134
   15330:	ldr	r1, [pc, #52]	; 1536c <flatcc_builder_create_cached_vtable@@Base+0x368>
   15334:	ldr	r0, [pc, #60]	; 15378 <flatcc_builder_create_cached_vtable@@Base+0x374>
   15338:	bl	1234c <__assert_fail@plt>
   1533c:	mov	r0, #0
   15340:	b	151d4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   15344:	mov	r0, #0
   15348:	b	151d4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1534c:	mov	r0, #0
   15350:	b	151d4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   15354:	mvn	r0, #0
   15358:	b	151d4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1535c:	mov	r0, #0
   15360:	b	151d4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   15364:	andeq	r9, r1, ip, lsr #2
   15368:	andeq	r0, r0, r6, asr r1
   1536c:	andeq	r9, r1, ip, ror #7
   15370:	andeq	r9, r1, r0, lsl #13
   15374:			; <UNDEFINED> instruction: 0x00018eb8
   15378:	andeq	r9, r1, r0, asr #8

0001537c <flatcc_builder_create_table@@Base>:
   1537c:	push	{r4, r5, r6, r7, lr}
   15380:	sub	sp, sp, #92	; 0x5c
   15384:	ldr	r4, [sp, #116]	; 0x74
   15388:	ldr	ip, [sp, #120]	; 0x78
   1538c:	cmp	r4, #0
   15390:	blt	154d0 <flatcc_builder_create_table@@Base+0x154>
   15394:	mov	r5, r0
   15398:	tst	ip, #1
   1539c:	beq	154e4 <flatcc_builder_create_table@@Base+0x168>
   153a0:	cmp	r3, #4
   153a4:	movcs	r0, r3
   153a8:	movcc	r0, #4
   153ac:	ldrh	r3, [r5, #128]	; 0x80
   153b0:	cmp	r3, r0
   153b4:	strhcc	r0, [r5, #128]	; 0x80
   153b8:	ldr	lr, [r5, #136]	; 0x88
   153bc:	sub	r7, lr, r2
   153c0:	sub	r0, r0, #1
   153c4:	and	r7, r7, r0
   153c8:	mvn	r3, #3
   153cc:	sub	r3, r3, r2
   153d0:	add	r3, r3, lr
   153d4:	sub	r3, r3, r7
   153d8:	sub	ip, ip, #1
   153dc:	sub	ip, r3, ip
   153e0:	str	ip, [sp, #84]	; 0x54
   153e4:	cmp	r4, #0
   153e8:	ble	15418 <flatcc_builder_create_table@@Base+0x9c>
   153ec:	ldr	ip, [sp, #112]	; 0x70
   153f0:	add	r4, ip, r4, lsl #1
   153f4:	mvn	r6, #3
   153f8:	sub	r6, r6, r3
   153fc:	ldrh	r3, [ip], #2
   15400:	sub	lr, r6, r3
   15404:	ldr	r0, [r1, r3]
   15408:	add	r0, r0, lr
   1540c:	str	r0, [r1, r3]
   15410:	cmp	ip, r4
   15414:	bne	153fc <flatcc_builder_create_table@@Base+0x80>
   15418:	mov	r3, #4
   1541c:	str	r3, [sp, #12]
   15420:	add	r0, sp, #84	; 0x54
   15424:	str	r0, [sp, #20]
   15428:	str	r3, [sp, #24]
   1542c:	mov	r3, #1
   15430:	str	r3, [sp, #16]
   15434:	cmp	r2, #0
   15438:	beq	15454 <flatcc_builder_create_table@@Base+0xd8>
   1543c:	add	r3, r2, #4
   15440:	str	r3, [sp, #12]
   15444:	str	r1, [sp, #28]
   15448:	str	r2, [sp, #32]
   1544c:	mov	r3, #2
   15450:	str	r3, [sp, #16]
   15454:	cmp	r7, #0
   15458:	beq	15488 <flatcc_builder_create_table@@Base+0x10c>
   1545c:	ldr	r3, [sp, #12]
   15460:	add	r3, r3, r7
   15464:	str	r3, [sp, #12]
   15468:	ldr	r3, [sp, #16]
   1546c:	add	r3, r3, #1
   15470:	add	r2, sp, #88	; 0x58
   15474:	add	r2, r2, r3, lsl #3
   15478:	ldr	r1, [pc, #160]	; 15520 <flatcc_builder_create_table@@Base+0x1a4>
   1547c:	str	r1, [r2, #-76]	; 0xffffffb4
   15480:	str	r7, [r2, #-72]	; 0xffffffb8
   15484:	str	r3, [sp, #16]
   15488:	ldr	r2, [r5, #136]	; 0x88
   1548c:	ldr	r3, [sp, #12]
   15490:	sub	r4, r2, r3
   15494:	cmp	r2, r4
   15498:	ble	154f8 <flatcc_builder_create_table@@Base+0x17c>
   1549c:	str	r3, [sp]
   154a0:	ldr	r6, [r5, #44]	; 0x2c
   154a4:	mov	r3, r4
   154a8:	ldr	r2, [sp, #16]
   154ac:	add	r1, sp, #20
   154b0:	ldr	r0, [r5, #36]	; 0x24
   154b4:	blx	r6
   154b8:	cmp	r0, #0
   154bc:	bne	1550c <flatcc_builder_create_table@@Base+0x190>
   154c0:	str	r4, [r5, #136]	; 0x88
   154c4:	mov	r0, r4
   154c8:	add	sp, sp, #92	; 0x5c
   154cc:	pop	{r4, r5, r6, r7, pc}
   154d0:	ldr	r3, [pc, #76]	; 15524 <flatcc_builder_create_table@@Base+0x1a8>
   154d4:	ldr	r2, [pc, #76]	; 15528 <flatcc_builder_create_table@@Base+0x1ac>
   154d8:	ldr	r1, [pc, #76]	; 1552c <flatcc_builder_create_table@@Base+0x1b0>
   154dc:	ldr	r0, [pc, #76]	; 15530 <flatcc_builder_create_table@@Base+0x1b4>
   154e0:	bl	1234c <__assert_fail@plt>
   154e4:	ldr	r3, [pc, #56]	; 15524 <flatcc_builder_create_table@@Base+0x1a8>
   154e8:	ldr	r2, [pc, #68]	; 15534 <flatcc_builder_create_table@@Base+0x1b8>
   154ec:	ldr	r1, [pc, #56]	; 1552c <flatcc_builder_create_table@@Base+0x1b0>
   154f0:	ldr	r0, [pc, #64]	; 15538 <flatcc_builder_create_table@@Base+0x1bc>
   154f4:	bl	1234c <__assert_fail@plt>
   154f8:	ldr	r3, [pc, #60]	; 1553c <flatcc_builder_create_table@@Base+0x1c0>
   154fc:	ldr	r2, [pc, #60]	; 15540 <flatcc_builder_create_table@@Base+0x1c4>
   15500:	ldr	r1, [pc, #36]	; 1552c <flatcc_builder_create_table@@Base+0x1b0>
   15504:	ldr	r0, [pc, #56]	; 15544 <flatcc_builder_create_table@@Base+0x1c8>
   15508:	bl	1234c <__assert_fail@plt>
   1550c:	ldr	r3, [pc, #40]	; 1553c <flatcc_builder_create_table@@Base+0x1c0>
   15510:	ldr	r2, [pc, #48]	; 15548 <flatcc_builder_create_table@@Base+0x1cc>
   15514:	ldr	r1, [pc, #16]	; 1552c <flatcc_builder_create_table@@Base+0x1b0>
   15518:	ldr	r0, [pc, #36]	; 15544 <flatcc_builder_create_table@@Base+0x1c8>
   1551c:	bl	1234c <__assert_fail@plt>
   15520:	muleq	r1, ip, ip
   15524:	andeq	r9, r1, r8, lsr r1
   15528:	ldrdeq	r0, [r0], -r5
   1552c:	andeq	r9, r1, ip, ror #7
   15530:	muleq	r1, r0, r6
   15534:	ldrdeq	r0, [r0], -fp
   15538:	andeq	r9, r1, r4, lsr #13
   1553c:	andeq	r8, r1, r8, ror #29
   15540:	andeq	r0, r0, r7, lsl #5
   15544:	andeq	r9, r1, r0, asr #8
   15548:	andeq	r0, r0, fp, lsl #5

0001554c <flatcc_builder_check_required_field@@Base>:
   1554c:	ldr	r3, [r0, #32]
   15550:	ldrh	r3, [r3, #14]
   15554:	cmp	r3, #3
   15558:	bne	15584 <flatcc_builder_check_required_field@@Base+0x38>
   1555c:	ldrh	r3, [r0, #8]
   15560:	cmp	r3, r1
   15564:	movls	r0, #0
   15568:	bls	15580 <flatcc_builder_check_required_field@@Base+0x34>
   1556c:	ldr	r3, [r0, #4]
   15570:	lsl	r1, r1, #1
   15574:	ldrh	r0, [r3, r1]
   15578:	adds	r0, r0, #0
   1557c:	movne	r0, #1
   15580:	bx	lr
   15584:	push	{r4, lr}
   15588:	ldr	r3, [pc, #12]	; 1559c <flatcc_builder_check_required_field@@Base+0x50>
   1558c:	ldr	r2, [pc, #12]	; 155a0 <flatcc_builder_check_required_field@@Base+0x54>
   15590:	ldr	r1, [pc, #12]	; 155a4 <flatcc_builder_check_required_field@@Base+0x58>
   15594:	ldr	r0, [pc, #12]	; 155a8 <flatcc_builder_check_required_field@@Base+0x5c>
   15598:	bl	1234c <__assert_fail@plt>
   1559c:	andeq	r9, r1, r4, asr r1
   155a0:	strdeq	r0, [r0], -r8
   155a4:	andeq	r9, r1, ip, ror #7
   155a8:			; <UNDEFINED> instruction: 0x000196b0

000155ac <flatcc_builder_check_union_field@@Base>:
   155ac:	ldr	r3, [r0, #32]
   155b0:	ldrh	r3, [r3, #14]
   155b4:	cmp	r3, #3
   155b8:	bne	15614 <flatcc_builder_check_union_field@@Base+0x68>
   155bc:	cmp	r1, #0
   155c0:	moveq	r0, #0
   155c4:	beq	1563c <flatcc_builder_check_union_field@@Base+0x90>
   155c8:	ldrh	r3, [r0, #8]
   155cc:	cmp	r3, r1
   155d0:	movls	r0, #0
   155d4:	bls	1563c <flatcc_builder_check_union_field@@Base+0x90>
   155d8:	ldr	r3, [r0, #4]
   155dc:	sub	r1, r1, #-2147483647	; 0x80000001
   155e0:	lsl	r1, r1, #1
   155e4:	ldrh	r2, [r3, r1]
   155e8:	cmp	r2, #0
   155ec:	beq	1562c <flatcc_builder_check_union_field@@Base+0x80>
   155f0:	ldr	r0, [r0, #16]
   155f4:	ldrb	r2, [r0, r2]
   155f8:	cmp	r2, #0
   155fc:	bne	15640 <flatcc_builder_check_union_field@@Base+0x94>
   15600:	add	r1, r3, r1
   15604:	ldrh	r0, [r1, #2]
   15608:	clz	r0, r0
   1560c:	lsr	r0, r0, #5
   15610:	b	1563c <flatcc_builder_check_union_field@@Base+0x90>
   15614:	push	{r4, lr}
   15618:	ldr	r3, [pc, #52]	; 15654 <flatcc_builder_check_union_field@@Base+0xa8>
   1561c:	ldr	r2, [pc, #52]	; 15658 <flatcc_builder_check_union_field@@Base+0xac>
   15620:	ldr	r1, [pc, #52]	; 1565c <flatcc_builder_check_union_field@@Base+0xb0>
   15624:	ldr	r0, [pc, #52]	; 15660 <flatcc_builder_check_union_field@@Base+0xb4>
   15628:	bl	1234c <__assert_fail@plt>
   1562c:	add	r1, r3, r1
   15630:	ldrh	r0, [r1, #2]
   15634:	clz	r0, r0
   15638:	lsr	r0, r0, #5
   1563c:	bx	lr
   15640:	add	r1, r3, r1
   15644:	ldrh	r0, [r1, #2]
   15648:	adds	r0, r0, #0
   1564c:	movne	r0, #1
   15650:	b	1563c <flatcc_builder_check_union_field@@Base+0x90>
   15654:	andeq	r9, r1, r8, ror r1
   15658:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1565c:	andeq	r9, r1, ip, ror #7
   15660:			; <UNDEFINED> instruction: 0x000196b0

00015664 <flatcc_builder_check_required@@Base>:
   15664:	ldr	r3, [r0, #32]
   15668:	ldrh	r3, [r3, #14]
   1566c:	cmp	r3, #3
   15670:	bne	156d0 <flatcc_builder_check_required@@Base+0x6c>
   15674:	ldrh	r3, [r0, #8]
   15678:	cmp	r3, r2
   1567c:	movlt	r0, #0
   15680:	blt	156ec <flatcc_builder_check_required@@Base+0x88>
   15684:	cmp	r2, #0
   15688:	ble	156f0 <flatcc_builder_check_required@@Base+0x8c>
   1568c:	ldr	ip, [r0, #4]
   15690:	ldrh	r3, [r1]
   15694:	lsl	r3, r3, #1
   15698:	ldrh	r3, [ip, r3]
   1569c:	cmp	r3, #0
   156a0:	beq	156f8 <flatcc_builder_check_required@@Base+0x94>
   156a4:	add	r0, r1, #2
   156a8:	add	r2, r1, r2, lsl #1
   156ac:	cmp	r0, r2
   156b0:	beq	156e8 <flatcc_builder_check_required@@Base+0x84>
   156b4:	ldrh	r3, [r0], #2
   156b8:	lsl	r3, r3, #1
   156bc:	ldrh	r3, [ip, r3]
   156c0:	cmp	r3, #0
   156c4:	bne	156ac <flatcc_builder_check_required@@Base+0x48>
   156c8:	mov	r0, #0
   156cc:	b	156ec <flatcc_builder_check_required@@Base+0x88>
   156d0:	push	{r4, lr}
   156d4:	ldr	r3, [pc, #36]	; 15700 <flatcc_builder_check_required@@Base+0x9c>
   156d8:	ldr	r2, [pc, #36]	; 15704 <flatcc_builder_check_required@@Base+0xa0>
   156dc:	ldr	r1, [pc, #36]	; 15708 <flatcc_builder_check_required@@Base+0xa4>
   156e0:	ldr	r0, [pc, #36]	; 1570c <flatcc_builder_check_required@@Base+0xa8>
   156e4:	bl	1234c <__assert_fail@plt>
   156e8:	mov	r0, #1
   156ec:	bx	lr
   156f0:	mov	r0, #1
   156f4:	b	156ec <flatcc_builder_check_required@@Base+0x88>
   156f8:	mov	r0, #0
   156fc:	b	156ec <flatcc_builder_check_required@@Base+0x88>
   15700:	muleq	r1, ip, r1
   15704:	andeq	r0, r0, r1, lsl r5
   15708:	andeq	r9, r1, ip, ror #7
   1570c:			; <UNDEFINED> instruction: 0x000196b0

00015710 <flatcc_builder_end_table@@Base>:
   15710:	push	{r4, r5, r6, r7, lr}
   15714:	sub	sp, sp, #20
   15718:	ldr	r3, [r0, #32]
   1571c:	ldrh	r3, [r3, #14]
   15720:	cmp	r3, #3
   15724:	bne	15794 <flatcc_builder_end_table@@Base+0x84>
   15728:	mov	r4, r0
   1572c:	ldr	r1, [r0, #4]
   15730:	sub	r6, r1, #4
   15734:	ldrh	r5, [r0, #8]
   15738:	add	r5, r5, #2
   1573c:	lsl	r5, r5, #1
   15740:	uxth	r5, r5
   15744:	strh	r5, [r1, #-4]
   15748:	ldr	r3, [r0, #20]
   1574c:	add	r3, r3, #4
   15750:	uxth	r2, r3
   15754:	strh	r2, [r1, #-2]
   15758:	ldr	r3, [r0, #12]
   1575c:	eor	r3, r3, r5
   15760:	ldr	r1, [pc, #328]	; 158b0 <flatcc_builder_end_table@@Base+0x1a0>
   15764:	mul	r3, r1, r3
   15768:	eor	r3, r3, r2
   1576c:	mul	r3, r1, r3
   15770:	str	r3, [r0, #12]
   15774:	mov	r2, r5
   15778:	mov	r1, r6
   1577c:	bl	15004 <flatcc_builder_create_cached_vtable@@Base>
   15780:	subs	r7, r0, #0
   15784:	bne	157a8 <flatcc_builder_end_table@@Base+0x98>
   15788:	mov	r0, r7
   1578c:	add	sp, sp, #20
   15790:	pop	{r4, r5, r6, r7, pc}
   15794:	ldr	r3, [pc, #280]	; 158b4 <flatcc_builder_end_table@@Base+0x1a4>
   15798:	ldr	r2, [pc, #280]	; 158b8 <flatcc_builder_end_table@@Base+0x1a8>
   1579c:	ldr	r1, [pc, #280]	; 158bc <flatcc_builder_end_table@@Base+0x1ac>
   157a0:	ldr	r0, [pc, #280]	; 158c0 <flatcc_builder_end_table@@Base+0x1b0>
   157a4:	bl	1234c <__assert_fail@plt>
   157a8:	mov	r2, r5
   157ac:	mov	r1, #0
   157b0:	mov	r0, r6
   157b4:	bl	1231c <memset@plt>
   157b8:	ldr	r3, [r4, #32]
   157bc:	ldr	r1, [r4, #76]	; 0x4c
   157c0:	ldr	r3, [r3, #20]
   157c4:	add	r1, r1, r3
   157c8:	ldrh	r3, [r4, #130]	; 0x82
   157cc:	str	r7, [sp, #8]
   157d0:	ldr	r2, [r4]
   157d4:	sub	r2, r2, r1
   157d8:	asr	r2, r2, #1
   157dc:	str	r2, [sp, #4]
   157e0:	str	r1, [sp]
   157e4:	ldr	r2, [r4, #20]
   157e8:	ldr	r1, [r4, #16]
   157ec:	mov	r0, r4
   157f0:	bl	1537c <flatcc_builder_create_table@@Base>
   157f4:	subs	r7, r0, #0
   157f8:	beq	15788 <flatcc_builder_end_table@@Base+0x78>
   157fc:	ldr	r3, [r4, #32]
   15800:	ldr	r2, [r3, #24]
   15804:	str	r2, [r4, #12]
   15808:	ldrh	r2, [r3, #28]
   1580c:	strh	r2, [r4, #8]
   15810:	ldr	r2, [r4, #52]	; 0x34
   15814:	ldr	r1, [r3, #16]
   15818:	add	r2, r2, r1
   1581c:	str	r2, [r4, #4]
   15820:	ldr	r2, [r4, #76]	; 0x4c
   15824:	ldr	r3, [r3, #20]
   15828:	add	r3, r2, r3
   1582c:	str	r3, [r4]
   15830:	ldr	r2, [r4, #20]
   15834:	mov	r1, #0
   15838:	ldr	r0, [r4, #16]
   1583c:	bl	1231c <memset@plt>
   15840:	ldr	r2, [r4, #32]
   15844:	ldr	r3, [r2, #8]
   15848:	str	r3, [r4, #20]
   1584c:	ldr	r0, [r2]
   15850:	str	r0, [r4, #28]
   15854:	ldr	r1, [r2, #4]
   15858:	ldr	r3, [r4, #60]	; 0x3c
   1585c:	add	r3, r3, r0
   15860:	str	r3, [r4, #16]
   15864:	ldr	r3, [r4, #64]	; 0x40
   15868:	sub	r3, r3, r0
   1586c:	cmp	r3, r1
   15870:	movcs	r3, r1
   15874:	str	r3, [r4, #24]
   15878:	str	r1, [r2, #4]
   1587c:	ldrh	r3, [r4, #130]	; 0x82
   15880:	ldrh	r2, [r4, #128]	; 0x80
   15884:	cmp	r2, r3
   15888:	strhcc	r3, [r4, #128]	; 0x80
   1588c:	ldr	r3, [r4, #32]
   15890:	ldrh	r2, [r3, #12]
   15894:	strh	r2, [r4, #130]	; 0x82
   15898:	sub	r3, r3, #36	; 0x24
   1589c:	str	r3, [r4, #32]
   158a0:	ldr	r3, [r4, #156]	; 0x9c
   158a4:	sub	r3, r3, #1
   158a8:	str	r3, [r4, #156]	; 0x9c
   158ac:	b	15788 <flatcc_builder_end_table@@Base+0x78>
   158b0:			; <UNDEFINED> instruction: 0x9e3779b1
   158b4:			; <UNDEFINED> instruction: 0x000191bc
   158b8:	andeq	r0, r0, r5, lsr #10
   158bc:	andeq	r9, r1, ip, ror #7
   158c0:			; <UNDEFINED> instruction: 0x000196b0

000158c4 <flatcc_builder_create_vector@@Base>:
   158c4:	push	{r4, r5, r6, lr}
   158c8:	sub	sp, sp, #88	; 0x58
   158cc:	mov	r4, r0
   158d0:	ldrh	r0, [sp, #104]	; 0x68
   158d4:	ldr	ip, [sp, #108]	; 0x6c
   158d8:	cmp	r2, ip
   158dc:	bhi	159c0 <flatcc_builder_create_vector@@Base+0xfc>
   158e0:	cmp	r0, #4
   158e4:	movcc	r0, #4
   158e8:	ldrh	ip, [r4, #128]	; 0x80
   158ec:	cmp	ip, r0
   158f0:	strhcc	r0, [r4, #128]	; 0x80
   158f4:	mul	r3, r3, r2
   158f8:	str	r2, [sp, #84]	; 0x54
   158fc:	ldr	r2, [r4, #136]	; 0x88
   15900:	sub	ip, r2, r3
   15904:	sub	r0, r0, #1
   15908:	and	r0, r0, ip
   1590c:	mov	ip, #4
   15910:	str	ip, [sp, #12]
   15914:	add	lr, sp, #84	; 0x54
   15918:	str	lr, [sp, #20]
   1591c:	str	ip, [sp, #24]
   15920:	mov	ip, #1
   15924:	str	ip, [sp, #16]
   15928:	cmp	r3, #0
   1592c:	beq	15948 <flatcc_builder_create_vector@@Base+0x84>
   15930:	add	ip, r3, #4
   15934:	str	ip, [sp, #12]
   15938:	str	r1, [sp, #28]
   1593c:	str	r3, [sp, #32]
   15940:	mov	r3, #2
   15944:	str	r3, [sp, #16]
   15948:	cmp	r0, #0
   1594c:	beq	1597c <flatcc_builder_create_vector@@Base+0xb8>
   15950:	ldr	r3, [sp, #12]
   15954:	add	r3, r3, r0
   15958:	str	r3, [sp, #12]
   1595c:	ldr	r3, [sp, #16]
   15960:	add	r3, r3, #1
   15964:	add	r1, sp, #88	; 0x58
   15968:	add	r1, r1, r3, lsl #3
   1596c:	ldr	ip, [pc, #136]	; 159fc <flatcc_builder_create_vector@@Base+0x138>
   15970:	str	ip, [r1, #-76]	; 0xffffffb4
   15974:	str	r0, [r1, #-72]	; 0xffffffb8
   15978:	str	r3, [sp, #16]
   1597c:	ldr	r3, [sp, #12]
   15980:	sub	r5, r2, r3
   15984:	cmp	r2, r5
   15988:	ble	159d4 <flatcc_builder_create_vector@@Base+0x110>
   1598c:	str	r3, [sp]
   15990:	ldr	r6, [r4, #44]	; 0x2c
   15994:	mov	r3, r5
   15998:	ldr	r2, [sp, #16]
   1599c:	add	r1, sp, #20
   159a0:	ldr	r0, [r4, #36]	; 0x24
   159a4:	blx	r6
   159a8:	cmp	r0, #0
   159ac:	bne	159e8 <flatcc_builder_create_vector@@Base+0x124>
   159b0:	str	r5, [r4, #136]	; 0x88
   159b4:	mov	r0, r5
   159b8:	add	sp, sp, #88	; 0x58
   159bc:	pop	{r4, r5, r6, pc}
   159c0:	ldr	r3, [pc, #56]	; 15a00 <flatcc_builder_create_vector@@Base+0x13c>
   159c4:	ldr	r2, [pc, #56]	; 15a04 <flatcc_builder_create_vector@@Base+0x140>
   159c8:	ldr	r1, [pc, #56]	; 15a08 <flatcc_builder_create_vector@@Base+0x144>
   159cc:	ldr	r0, [pc, #56]	; 15a0c <flatcc_builder_create_vector@@Base+0x148>
   159d0:	bl	1234c <__assert_fail@plt>
   159d4:	ldr	r3, [pc, #52]	; 15a10 <flatcc_builder_create_vector@@Base+0x14c>
   159d8:	ldr	r2, [pc, #52]	; 15a14 <flatcc_builder_create_vector@@Base+0x150>
   159dc:	ldr	r1, [pc, #36]	; 15a08 <flatcc_builder_create_vector@@Base+0x144>
   159e0:	ldr	r0, [pc, #48]	; 15a18 <flatcc_builder_create_vector@@Base+0x154>
   159e4:	bl	1234c <__assert_fail@plt>
   159e8:	ldr	r3, [pc, #32]	; 15a10 <flatcc_builder_create_vector@@Base+0x14c>
   159ec:	ldr	r2, [pc, #40]	; 15a1c <flatcc_builder_create_vector@@Base+0x158>
   159f0:	ldr	r1, [pc, #16]	; 15a08 <flatcc_builder_create_vector@@Base+0x144>
   159f4:	ldr	r0, [pc, #28]	; 15a18 <flatcc_builder_create_vector@@Base+0x154>
   159f8:	bl	1234c <__assert_fail@plt>
   159fc:	muleq	r1, ip, ip
   15a00:	ldrdeq	r9, [r1], -r8
   15a04:	andeq	r0, r0, r5, asr r5
   15a08:	andeq	r9, r1, ip, ror #7
   15a0c:	ldrdeq	r9, [r1], -ip
   15a10:	andeq	r8, r1, r8, ror #29
   15a14:	andeq	r0, r0, r7, lsl #5
   15a18:	andeq	r9, r1, r0, asr #8
   15a1c:	andeq	r0, r0, fp, lsl #5

00015a20 <flatcc_builder_end_vector@@Base>:
   15a20:	push	{r4, r5, lr}
   15a24:	sub	sp, sp, #12
   15a28:	ldr	r1, [r0, #32]
   15a2c:	ldrh	r3, [r1, #14]
   15a30:	cmp	r3, #4
   15a34:	bne	15a70 <flatcc_builder_end_vector@@Base+0x50>
   15a38:	mov	r4, r0
   15a3c:	ldr	r3, [r1, #16]
   15a40:	ldr	r2, [r1, #20]
   15a44:	ldr	r1, [r1, #24]
   15a48:	str	r1, [sp, #4]
   15a4c:	ldrh	r1, [r0, #130]	; 0x82
   15a50:	str	r1, [sp]
   15a54:	ldr	r1, [r0, #16]
   15a58:	bl	158c4 <flatcc_builder_create_vector@@Base>
   15a5c:	subs	r5, r0, #0
   15a60:	bne	15a84 <flatcc_builder_end_vector@@Base+0x64>
   15a64:	mov	r0, r5
   15a68:	add	sp, sp, #12
   15a6c:	pop	{r4, r5, pc}
   15a70:	ldr	r3, [pc, #140]	; 15b04 <flatcc_builder_end_vector@@Base+0xe4>
   15a74:	ldr	r2, [pc, #140]	; 15b08 <flatcc_builder_end_vector@@Base+0xe8>
   15a78:	ldr	r1, [pc, #140]	; 15b0c <flatcc_builder_end_vector@@Base+0xec>
   15a7c:	ldr	r0, [pc, #140]	; 15b10 <flatcc_builder_end_vector@@Base+0xf0>
   15a80:	bl	1234c <__assert_fail@plt>
   15a84:	ldr	r2, [r4, #20]
   15a88:	mov	r1, #0
   15a8c:	ldr	r0, [r4, #16]
   15a90:	bl	1231c <memset@plt>
   15a94:	ldr	r2, [r4, #32]
   15a98:	ldr	r3, [r2, #8]
   15a9c:	str	r3, [r4, #20]
   15aa0:	ldr	r0, [r2]
   15aa4:	str	r0, [r4, #28]
   15aa8:	ldr	r1, [r2, #4]
   15aac:	ldr	r3, [r4, #60]	; 0x3c
   15ab0:	add	r3, r3, r0
   15ab4:	str	r3, [r4, #16]
   15ab8:	ldr	r3, [r4, #64]	; 0x40
   15abc:	sub	r3, r3, r0
   15ac0:	cmp	r3, r1
   15ac4:	movcs	r3, r1
   15ac8:	str	r3, [r4, #24]
   15acc:	str	r1, [r2, #4]
   15ad0:	ldrh	r3, [r4, #130]	; 0x82
   15ad4:	ldrh	r2, [r4, #128]	; 0x80
   15ad8:	cmp	r2, r3
   15adc:	strhcc	r3, [r4, #128]	; 0x80
   15ae0:	ldr	r3, [r4, #32]
   15ae4:	ldrh	r2, [r3, #12]
   15ae8:	strh	r2, [r4, #130]	; 0x82
   15aec:	sub	r3, r3, #36	; 0x24
   15af0:	str	r3, [r4, #32]
   15af4:	ldr	r3, [r4, #156]	; 0x9c
   15af8:	sub	r3, r3, #1
   15afc:	str	r3, [r4, #156]	; 0x9c
   15b00:	b	15a64 <flatcc_builder_end_vector@@Base+0x44>
   15b04:	strdeq	r9, [r1], -r8
   15b08:	andeq	r0, r0, r8, ror r5
   15b0c:	andeq	r9, r1, ip, ror #7
   15b10:	andeq	r9, r1, r4, lsr #10

00015b14 <flatcc_builder_vector_count@@Base>:
   15b14:	ldr	r3, [r0, #32]
   15b18:	ldr	r0, [r3, #20]
   15b1c:	bx	lr

00015b20 <flatcc_builder_vector_edit@@Base>:
   15b20:	ldr	r0, [r0, #16]
   15b24:	bx	lr

00015b28 <flatcc_builder_create_offset_vector_direct@@Base>:
   15b28:	push	{r4, lr}
   15b2c:	mov	r3, #0
   15b30:	bl	132cc <flatcc_builder_default_alloc@@Base+0x378>
   15b34:	pop	{r4, pc}

00015b38 <flatcc_builder_end_offset_vector@@Base>:
   15b38:	push	{r4, r5, r6, lr}
   15b3c:	ldr	r3, [r0, #32]
   15b40:	ldrh	r2, [r3, #14]
   15b44:	cmp	r2, #5
   15b48:	bne	15b6c <flatcc_builder_end_offset_vector@@Base+0x34>
   15b4c:	mov	r4, r0
   15b50:	ldr	r2, [r3, #20]
   15b54:	ldr	r1, [r0, #16]
   15b58:	bl	15b28 <flatcc_builder_create_offset_vector_direct@@Base>
   15b5c:	subs	r5, r0, #0
   15b60:	bne	15b80 <flatcc_builder_end_offset_vector@@Base+0x48>
   15b64:	mov	r0, r5
   15b68:	pop	{r4, r5, r6, pc}
   15b6c:	ldr	r3, [pc, #140]	; 15c00 <flatcc_builder_end_offset_vector@@Base+0xc8>
   15b70:	ldr	r2, [pc, #140]	; 15c04 <flatcc_builder_end_offset_vector@@Base+0xcc>
   15b74:	ldr	r1, [pc, #140]	; 15c08 <flatcc_builder_end_offset_vector@@Base+0xd0>
   15b78:	ldr	r0, [pc, #140]	; 15c0c <flatcc_builder_end_offset_vector@@Base+0xd4>
   15b7c:	bl	1234c <__assert_fail@plt>
   15b80:	ldr	r2, [r4, #20]
   15b84:	mov	r1, #0
   15b88:	ldr	r0, [r4, #16]
   15b8c:	bl	1231c <memset@plt>
   15b90:	ldr	r2, [r4, #32]
   15b94:	ldr	r3, [r2, #8]
   15b98:	str	r3, [r4, #20]
   15b9c:	ldr	r0, [r2]
   15ba0:	str	r0, [r4, #28]
   15ba4:	ldr	r1, [r2, #4]
   15ba8:	ldr	r3, [r4, #60]	; 0x3c
   15bac:	add	r3, r3, r0
   15bb0:	str	r3, [r4, #16]
   15bb4:	ldr	r3, [r4, #64]	; 0x40
   15bb8:	sub	r3, r3, r0
   15bbc:	cmp	r3, r1
   15bc0:	movcs	r3, r1
   15bc4:	str	r3, [r4, #24]
   15bc8:	str	r1, [r2, #4]
   15bcc:	ldrh	r3, [r4, #130]	; 0x82
   15bd0:	ldrh	r2, [r4, #128]	; 0x80
   15bd4:	cmp	r2, r3
   15bd8:	strhcc	r3, [r4, #128]	; 0x80
   15bdc:	ldr	r3, [r4, #32]
   15be0:	ldrh	r2, [r3, #12]
   15be4:	strh	r2, [r4, #130]	; 0x82
   15be8:	sub	r3, r3, #36	; 0x24
   15bec:	str	r3, [r4, #32]
   15bf0:	ldr	r3, [r4, #156]	; 0x9c
   15bf4:	sub	r3, r3, #1
   15bf8:	str	r3, [r4, #156]	; 0x9c
   15bfc:	b	15b64 <flatcc_builder_end_offset_vector@@Base+0x2c>
   15c00:	andeq	r9, r1, r4, lsl r2
   15c04:	andeq	r0, r0, r8, asr #11
   15c08:	andeq	r9, r1, ip, ror #7
   15c0c:	muleq	r1, r0, r5

00015c10 <flatcc_builder_create_offset_vector@@Base>:
   15c10:	push	{r4, r5, r6, lr}
   15c14:	mov	r4, r0
   15c18:	mov	r6, r1
   15c1c:	mov	r5, r2
   15c20:	bl	14a9c <flatcc_builder_start_offset_vector@@Base>
   15c24:	cmp	r0, #0
   15c28:	beq	15c34 <flatcc_builder_create_offset_vector@@Base+0x24>
   15c2c:	mov	r0, #0
   15c30:	pop	{r4, r5, r6, pc}
   15c34:	mov	r1, r5
   15c38:	mov	r0, r4
   15c3c:	bl	1446c <flatcc_builder_extend_offset_vector@@Base>
   15c40:	cmp	r0, #0
   15c44:	beq	15c60 <flatcc_builder_create_offset_vector@@Base+0x50>
   15c48:	lsl	r2, r5, #2
   15c4c:	mov	r1, r6
   15c50:	bl	122bc <memcpy@plt>
   15c54:	mov	r0, r4
   15c58:	bl	15b38 <flatcc_builder_end_offset_vector@@Base>
   15c5c:	pop	{r4, r5, r6, pc}
   15c60:	mov	r0, #0
   15c64:	pop	{r4, r5, r6, pc}

00015c68 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15c68:	push	{r4, r5, r6, lr}
   15c6c:	mov	r4, r0
   15c70:	ldr	r2, [r0, #32]
   15c74:	ldrh	r0, [r2, #14]
   15c78:	cmp	r0, #5
   15c7c:	bne	15ca4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   15c80:	mov	r3, r1
   15c84:	ldr	r2, [r2, #20]
   15c88:	ldr	r1, [r4, #16]
   15c8c:	mov	r0, r4
   15c90:	bl	132cc <flatcc_builder_default_alloc@@Base+0x378>
   15c94:	subs	r5, r0, #0
   15c98:	bne	15cb8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   15c9c:	mov	r0, r5
   15ca0:	pop	{r4, r5, r6, pc}
   15ca4:	ldr	r3, [pc, #140]	; 15d38 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   15ca8:	ldr	r2, [pc, #140]	; 15d3c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   15cac:	ldr	r1, [pc, #140]	; 15d40 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   15cb0:	ldr	r0, [pc, #140]	; 15d44 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   15cb4:	bl	1234c <__assert_fail@plt>
   15cb8:	ldr	r2, [r4, #20]
   15cbc:	mov	r1, #0
   15cc0:	ldr	r0, [r4, #16]
   15cc4:	bl	1231c <memset@plt>
   15cc8:	ldr	r2, [r4, #32]
   15ccc:	ldr	r3, [r2, #8]
   15cd0:	str	r3, [r4, #20]
   15cd4:	ldr	r0, [r2]
   15cd8:	str	r0, [r4, #28]
   15cdc:	ldr	r1, [r2, #4]
   15ce0:	ldr	r3, [r4, #60]	; 0x3c
   15ce4:	add	r3, r3, r0
   15ce8:	str	r3, [r4, #16]
   15cec:	ldr	r3, [r4, #64]	; 0x40
   15cf0:	sub	r3, r3, r0
   15cf4:	cmp	r3, r1
   15cf8:	movcs	r3, r1
   15cfc:	str	r3, [r4, #24]
   15d00:	str	r1, [r2, #4]
   15d04:	ldrh	r3, [r4, #130]	; 0x82
   15d08:	ldrh	r2, [r4, #128]	; 0x80
   15d0c:	cmp	r2, r3
   15d10:	strhcc	r3, [r4, #128]	; 0x80
   15d14:	ldr	r3, [r4, #32]
   15d18:	ldrh	r2, [r3, #12]
   15d1c:	strh	r2, [r4, #130]	; 0x82
   15d20:	sub	r3, r3, #36	; 0x24
   15d24:	str	r3, [r4, #32]
   15d28:	ldr	r3, [r4, #156]	; 0x9c
   15d2c:	sub	r3, r3, #1
   15d30:	str	r3, [r4, #156]	; 0x9c
   15d34:	b	15c9c <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   15d38:	andeq	r9, r1, r8, lsr r2
   15d3c:	ldrdeq	r0, [r0], -r5
   15d40:	andeq	r9, r1, ip, ror #7
   15d44:	muleq	r1, r0, r5

00015d48 <flatcc_builder_offset_vector_edit@@Base>:
   15d48:	ldr	r0, [r0, #16]
   15d4c:	bx	lr

00015d50 <flatcc_builder_offset_vector_count@@Base>:
   15d50:	ldr	r3, [r0, #32]
   15d54:	ldr	r0, [r3, #20]
   15d58:	bx	lr

00015d5c <flatcc_builder_create_union_vector_direct@@Base>:
   15d5c:	push	{r4, r5, r6, r7, lr}
   15d60:	sub	sp, sp, #12
   15d64:	mov	r4, r0
   15d68:	mov	r5, r1
   15d6c:	mov	r6, r2
   15d70:	mov	r1, r3
   15d74:	mov	r3, r2
   15d78:	ldr	r2, [sp, #32]
   15d7c:	mov	r0, r5
   15d80:	bl	132cc <flatcc_builder_default_alloc@@Base+0x378>
   15d84:	subs	r7, r0, #0
   15d88:	bne	15da4 <flatcc_builder_create_union_vector_direct@@Base+0x48>
   15d8c:	mov	r3, #0
   15d90:	str	r3, [r4]
   15d94:	str	r3, [r4, #4]
   15d98:	mov	r0, r4
   15d9c:	add	sp, sp, #12
   15da0:	pop	{r4, r5, r6, r7, pc}
   15da4:	mvn	r3, #0
   15da8:	str	r3, [sp, #4]
   15dac:	mov	r3, #1
   15db0:	str	r3, [sp]
   15db4:	ldr	r2, [sp, #32]
   15db8:	mov	r1, r6
   15dbc:	mov	r0, r5
   15dc0:	bl	158c4 <flatcc_builder_create_vector@@Base>
   15dc4:	cmp	r0, #0
   15dc8:	moveq	r3, #0
   15dcc:	streq	r3, [r4]
   15dd0:	strne	r0, [r4]
   15dd4:	str	r7, [r4, #4]
   15dd8:	b	15d98 <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00015ddc <flatcc_builder_create_union_vector@@Base>:
   15ddc:	push	{r4, r5, r6, r7, r8, lr}
   15de0:	sub	sp, sp, #16
   15de4:	mov	r5, r0
   15de8:	mov	r4, r1
   15dec:	mov	r7, r2
   15df0:	mov	r6, r3
   15df4:	mov	r0, r1
   15df8:	bl	14a9c <flatcc_builder_start_offset_vector@@Base>
   15dfc:	cmp	r0, #0
   15e00:	beq	15e1c <flatcc_builder_create_union_vector@@Base+0x40>
   15e04:	mov	r3, #0
   15e08:	str	r3, [r5]
   15e0c:	str	r3, [r5, #4]
   15e10:	mov	r0, r5
   15e14:	add	sp, sp, #16
   15e18:	pop	{r4, r5, r6, r7, r8, pc}
   15e1c:	mov	r1, r6
   15e20:	mov	r0, r4
   15e24:	bl	1446c <flatcc_builder_extend_offset_vector@@Base>
   15e28:	cmp	r0, #0
   15e2c:	moveq	r3, #0
   15e30:	streq	r3, [r5]
   15e34:	streq	r3, [r5, #4]
   15e38:	beq	15e10 <flatcc_builder_create_union_vector@@Base+0x34>
   15e3c:	ldr	r8, [r4, #20]
   15e40:	add	r1, r6, r8
   15e44:	str	r1, [r4, #20]
   15e48:	ldr	r3, [r4, #24]
   15e4c:	cmp	r1, r3
   15e50:	bcs	15f34 <flatcc_builder_create_union_vector@@Base+0x158>
   15e54:	ldr	r3, [r4, #16]
   15e58:	adds	r2, r3, r8
   15e5c:	beq	15f4c <flatcc_builder_create_union_vector@@Base+0x170>
   15e60:	cmp	r6, #0
   15e64:	beq	15e94 <flatcc_builder_create_union_vector@@Base+0xb8>
   15e68:	mov	r1, r7
   15e6c:	sub	ip, r2, #1
   15e70:	sub	r0, r3, #4
   15e74:	add	r7, r7, r6, lsl #3
   15e78:	ldrb	lr, [r1]
   15e7c:	strb	lr, [ip, #1]!
   15e80:	ldr	lr, [r1, #4]
   15e84:	str	lr, [r0, #4]!
   15e88:	add	r1, r1, #8
   15e8c:	cmp	r1, r7
   15e90:	bne	15e78 <flatcc_builder_create_union_vector@@Base+0x9c>
   15e94:	str	r6, [sp]
   15e98:	mov	r1, r4
   15e9c:	add	r0, sp, #8
   15ea0:	bl	15d5c <flatcc_builder_create_union_vector_direct@@Base>
   15ea4:	ldr	r7, [sp, #8]
   15ea8:	ldr	r6, [sp, #12]
   15eac:	ldr	r2, [r4, #20]
   15eb0:	mov	r1, #0
   15eb4:	ldr	r0, [r4, #16]
   15eb8:	bl	1231c <memset@plt>
   15ebc:	ldr	r2, [r4, #32]
   15ec0:	ldr	r3, [r2, #8]
   15ec4:	str	r3, [r4, #20]
   15ec8:	ldr	r0, [r2]
   15ecc:	str	r0, [r4, #28]
   15ed0:	ldr	r1, [r2, #4]
   15ed4:	ldr	r3, [r4, #60]	; 0x3c
   15ed8:	add	r3, r3, r0
   15edc:	str	r3, [r4, #16]
   15ee0:	ldr	r3, [r4, #64]	; 0x40
   15ee4:	sub	r3, r3, r0
   15ee8:	cmp	r3, r1
   15eec:	movcs	r3, r1
   15ef0:	str	r3, [r4, #24]
   15ef4:	str	r1, [r2, #4]
   15ef8:	ldrh	r3, [r4, #130]	; 0x82
   15efc:	ldrh	r2, [r4, #128]	; 0x80
   15f00:	cmp	r2, r3
   15f04:	strhcc	r3, [r4, #128]	; 0x80
   15f08:	ldr	r3, [r4, #32]
   15f0c:	ldrh	r2, [r3, #12]
   15f10:	strh	r2, [r4, #130]	; 0x82
   15f14:	sub	r3, r3, #36	; 0x24
   15f18:	str	r3, [r4, #32]
   15f1c:	ldr	r3, [r4, #156]	; 0x9c
   15f20:	sub	r3, r3, #1
   15f24:	str	r3, [r4, #156]	; 0x9c
   15f28:	str	r7, [r5]
   15f2c:	str	r6, [r5, #4]
   15f30:	b	15e10 <flatcc_builder_create_union_vector@@Base+0x34>
   15f34:	mvn	r2, #3
   15f38:	add	r1, r1, #1
   15f3c:	mov	r0, r4
   15f40:	bl	12ee0 <main@@Base+0xf4>
   15f44:	cmp	r0, #0
   15f48:	beq	15e54 <flatcc_builder_create_union_vector@@Base+0x78>
   15f4c:	mov	r3, #0
   15f50:	str	r3, [r5]
   15f54:	str	r3, [r5, #4]
   15f58:	b	15e10 <flatcc_builder_create_union_vector@@Base+0x34>

00015f5c <flatcc_builder_start_union_vector@@Base>:
   15f5c:	push	{r4, lr}
   15f60:	mov	r4, r0
   15f64:	mov	r1, #4
   15f68:	bl	13180 <flatcc_builder_default_alloc@@Base+0x22c>
   15f6c:	cmp	r0, #0
   15f70:	bne	15fcc <flatcc_builder_start_union_vector@@Base+0x70>
   15f74:	ldr	r3, [r4, #32]
   15f78:	mov	r2, #8
   15f7c:	str	r2, [r3, #16]
   15f80:	ldr	r3, [r4, #32]
   15f84:	mov	r2, #0
   15f88:	str	r2, [r3, #20]
   15f8c:	ldr	r3, [r4, #32]
   15f90:	mov	r2, #7
   15f94:	strh	r2, [r3, #14]
   15f98:	ldr	r1, [r4, #28]
   15f9c:	ldr	r2, [r4, #60]	; 0x3c
   15fa0:	add	r2, r2, r1
   15fa4:	str	r2, [r4, #16]
   15fa8:	ldr	r3, [r4, #64]	; 0x40
   15fac:	sub	r3, r3, r1
   15fb0:	cmn	r3, #4
   15fb4:	mvnhi	r3, #3
   15fb8:	str	r3, [r4, #24]
   15fbc:	ldr	r3, [r4, #32]
   15fc0:	mvn	r2, #3
   15fc4:	str	r2, [r3, #4]
   15fc8:	pop	{r4, pc}
   15fcc:	mvn	r0, #0
   15fd0:	pop	{r4, pc}

00015fd4 <flatcc_builder_end_union_vector@@Base>:
   15fd4:	push	{r4, r5, r6, r7, r8, lr}
   15fd8:	sub	sp, sp, #16
   15fdc:	ldr	r3, [r1, #32]
   15fe0:	ldrh	r2, [r3, #14]
   15fe4:	cmp	r2, #7
   15fe8:	bne	16100 <flatcc_builder_end_union_vector@@Base+0x12c>
   15fec:	mov	r6, r0
   15ff0:	mov	r4, r1
   15ff4:	ldr	r5, [r3, #20]
   15ff8:	ldr	r8, [r1, #20]
   15ffc:	add	r1, r5, r5, lsl #2
   16000:	add	r1, r1, r8
   16004:	str	r1, [r4, #20]
   16008:	ldr	r3, [r4, #24]
   1600c:	cmp	r1, r3
   16010:	bcs	16114 <flatcc_builder_end_union_vector@@Base+0x140>
   16014:	ldr	r7, [r4, #16]
   16018:	adds	r3, r7, r8
   1601c:	beq	1612c <flatcc_builder_end_union_vector@@Base+0x158>
   16020:	add	r2, r3, r5, lsl #2
   16024:	cmp	r5, #0
   16028:	beq	16058 <flatcc_builder_end_union_vector@@Base+0x84>
   1602c:	mov	r1, r7
   16030:	sub	ip, r2, #1
   16034:	sub	r0, r3, #4
   16038:	add	r7, r7, r5, lsl #3
   1603c:	ldrb	lr, [r1]
   16040:	strb	lr, [ip, #1]!
   16044:	ldr	lr, [r1, #4]
   16048:	str	lr, [r0, #4]!
   1604c:	add	r1, r1, #8
   16050:	cmp	r1, r7
   16054:	bne	1603c <flatcc_builder_end_union_vector@@Base+0x68>
   16058:	str	r5, [sp]
   1605c:	mov	r1, r4
   16060:	add	r0, sp, #8
   16064:	bl	15d5c <flatcc_builder_create_union_vector_direct@@Base>
   16068:	ldr	r7, [sp, #8]
   1606c:	ldr	r5, [sp, #12]
   16070:	ldr	r2, [r4, #20]
   16074:	mov	r1, #0
   16078:	ldr	r0, [r4, #16]
   1607c:	bl	1231c <memset@plt>
   16080:	ldr	r2, [r4, #32]
   16084:	ldr	r3, [r2, #8]
   16088:	str	r3, [r4, #20]
   1608c:	ldr	r0, [r2]
   16090:	str	r0, [r4, #28]
   16094:	ldr	r1, [r2, #4]
   16098:	ldr	r3, [r4, #60]	; 0x3c
   1609c:	add	r3, r3, r0
   160a0:	str	r3, [r4, #16]
   160a4:	ldr	r3, [r4, #64]	; 0x40
   160a8:	sub	r3, r3, r0
   160ac:	cmp	r3, r1
   160b0:	movcs	r3, r1
   160b4:	str	r3, [r4, #24]
   160b8:	str	r1, [r2, #4]
   160bc:	ldrh	r3, [r4, #130]	; 0x82
   160c0:	ldrh	r2, [r4, #128]	; 0x80
   160c4:	cmp	r2, r3
   160c8:	strhcc	r3, [r4, #128]	; 0x80
   160cc:	ldr	r3, [r4, #32]
   160d0:	ldrh	r2, [r3, #12]
   160d4:	strh	r2, [r4, #130]	; 0x82
   160d8:	sub	r3, r3, #36	; 0x24
   160dc:	str	r3, [r4, #32]
   160e0:	ldr	r3, [r4, #156]	; 0x9c
   160e4:	sub	r3, r3, #1
   160e8:	str	r3, [r4, #156]	; 0x9c
   160ec:	str	r7, [r6]
   160f0:	str	r5, [r6, #4]
   160f4:	mov	r0, r6
   160f8:	add	sp, sp, #16
   160fc:	pop	{r4, r5, r6, r7, r8, pc}
   16100:	ldr	r3, [pc, #52]	; 1613c <flatcc_builder_end_union_vector@@Base+0x168>
   16104:	ldr	r2, [pc, #52]	; 16140 <flatcc_builder_end_union_vector@@Base+0x16c>
   16108:	ldr	r1, [pc, #52]	; 16144 <flatcc_builder_end_union_vector@@Base+0x170>
   1610c:	ldr	r0, [pc, #52]	; 16148 <flatcc_builder_end_union_vector@@Base+0x174>
   16110:	bl	1234c <__assert_fail@plt>
   16114:	mvn	r2, #3
   16118:	add	r1, r1, #1
   1611c:	mov	r0, r4
   16120:	bl	12ee0 <main@@Base+0xf4>
   16124:	cmp	r0, #0
   16128:	beq	16014 <flatcc_builder_end_union_vector@@Base+0x40>
   1612c:	mov	r3, #0
   16130:	str	r3, [r6]
   16134:	str	r3, [r6, #4]
   16138:	b	160f4 <flatcc_builder_end_union_vector@@Base+0x120>
   1613c:	andeq	r9, r1, r4, ror #4
   16140:	andeq	r0, r0, r1, asr r6
   16144:	andeq	r9, r1, ip, ror #7
   16148:	strdeq	r9, [r1], -r0

0001614c <flatcc_builder_union_vector_edit@@Base>:
   1614c:	ldr	r0, [r0, #16]
   16150:	bx	lr

00016154 <flatcc_builder_union_vector_count@@Base>:
   16154:	ldr	r3, [r0, #32]
   16158:	ldr	r0, [r3, #20]
   1615c:	bx	lr

00016160 <flatcc_builder_extend_union_vector@@Base>:
   16160:	push	{r4, r5, r6, lr}
   16164:	mov	r4, r0
   16168:	ldr	r2, [r0, #32]
   1616c:	ldr	r3, [r2, #20]
   16170:	adds	r3, r1, r3
   16174:	movcs	ip, #1
   16178:	movcc	ip, #0
   1617c:	cmn	r3, #-536870911	; 0xe0000001
   16180:	movls	r0, #0
   16184:	movhi	r0, #1
   16188:	orrs	r0, ip, r0
   1618c:	bne	161b8 <flatcc_builder_extend_union_vector@@Base+0x58>
   16190:	str	r3, [r2, #20]
   16194:	ldr	r5, [r4, #20]
   16198:	add	r1, r5, r1, lsl #3
   1619c:	str	r1, [r4, #20]
   161a0:	ldr	r3, [r4, #24]
   161a4:	cmp	r1, r3
   161a8:	bcs	161cc <flatcc_builder_extend_union_vector@@Base+0x6c>
   161ac:	ldr	r0, [r4, #16]
   161b0:	add	r0, r0, r5
   161b4:	pop	{r4, r5, r6, pc}
   161b8:	ldr	r3, [pc, #44]	; 161ec <flatcc_builder_extend_union_vector@@Base+0x8c>
   161bc:	mov	r2, #892	; 0x37c
   161c0:	ldr	r1, [pc, #40]	; 161f0 <flatcc_builder_extend_union_vector@@Base+0x90>
   161c4:	ldr	r0, [pc, #40]	; 161f4 <flatcc_builder_extend_union_vector@@Base+0x94>
   161c8:	bl	1234c <__assert_fail@plt>
   161cc:	mvn	r2, #3
   161d0:	add	r1, r1, #1
   161d4:	mov	r0, r4
   161d8:	bl	12ee0 <main@@Base+0xf4>
   161dc:	cmp	r0, #0
   161e0:	beq	161ac <flatcc_builder_extend_union_vector@@Base+0x4c>
   161e4:	mov	r0, #0
   161e8:	pop	{r4, r5, r6, pc}
   161ec:	andeq	r8, r1, ip, asr #31
   161f0:	andeq	r9, r1, ip, ror #7
   161f4:	andeq	r9, r1, r8, lsl #10

000161f8 <flatcc_builder_truncate_union_vector@@Base>:
   161f8:	push	{r4, lr}
   161fc:	ldr	ip, [r0, #32]
   16200:	ldrh	r3, [ip, #14]
   16204:	cmp	r3, #7
   16208:	bne	16250 <flatcc_builder_truncate_union_vector@@Base+0x58>
   1620c:	ldr	r3, [ip, #20]
   16210:	cmp	r3, r1
   16214:	bcc	16264 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   16218:	sub	r3, r3, r1
   1621c:	str	r3, [ip, #20]
   16220:	ldr	r3, [r0, #32]
   16224:	ldr	r2, [r3, #16]
   16228:	mul	r2, r2, r1
   1622c:	ldr	r3, [r0, #20]
   16230:	sub	r3, r3, r2
   16234:	str	r3, [r0, #20]
   16238:	ldr	r0, [r0, #16]
   1623c:	mov	r1, #0
   16240:	add	r0, r0, r3
   16244:	bl	1231c <memset@plt>
   16248:	mov	r0, #0
   1624c:	pop	{r4, pc}
   16250:	ldr	r3, [pc, #32]	; 16278 <flatcc_builder_truncate_union_vector@@Base+0x80>
   16254:	ldr	r2, [pc, #32]	; 1627c <flatcc_builder_truncate_union_vector@@Base+0x84>
   16258:	ldr	r1, [pc, #32]	; 16280 <flatcc_builder_truncate_union_vector@@Base+0x88>
   1625c:	ldr	r0, [pc, #32]	; 16284 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   16260:	bl	1234c <__assert_fail@plt>
   16264:	ldr	r3, [pc, #12]	; 16278 <flatcc_builder_truncate_union_vector@@Base+0x80>
   16268:	ldr	r2, [pc, #24]	; 16288 <flatcc_builder_truncate_union_vector@@Base+0x90>
   1626c:	ldr	r1, [pc, #12]	; 16280 <flatcc_builder_truncate_union_vector@@Base+0x88>
   16270:	ldr	r0, [pc, #20]	; 1628c <flatcc_builder_truncate_union_vector@@Base+0x94>
   16274:	bl	1234c <__assert_fail@plt>
   16278:	andeq	r9, r1, r4, lsl #5
   1627c:	andeq	r0, r0, r1, lsl #13
   16280:	andeq	r9, r1, ip, ror #7
   16284:	strdeq	r9, [r1], -r0
   16288:	andeq	r0, r0, r2, lsl #13
   1628c:	andeq	r9, r1, r4, lsl r6

00016290 <flatcc_builder_union_vector_push@@Base>:
   16290:	push	{r4, r5, lr}
   16294:	sub	sp, sp, #12
   16298:	add	r3, sp, #8
   1629c:	stmdb	r3, {r1, r2}
   162a0:	ldr	r2, [r0, #32]
   162a4:	ldrh	r3, [r2, #14]
   162a8:	cmp	r3, #7
   162ac:	bne	16304 <flatcc_builder_union_vector_push@@Base+0x74>
   162b0:	mov	r4, r0
   162b4:	ldr	r3, [r2, #20]
   162b8:	cmn	r3, #-536870911	; 0xe0000001
   162bc:	beq	16334 <flatcc_builder_union_vector_push@@Base+0xa4>
   162c0:	add	r3, r3, #1
   162c4:	str	r3, [r2, #20]
   162c8:	ldr	r5, [r0, #20]
   162cc:	add	r3, r5, #8
   162d0:	str	r3, [r0, #20]
   162d4:	ldr	r2, [r0, #24]
   162d8:	cmp	r3, r2
   162dc:	bcs	16318 <flatcc_builder_union_vector_push@@Base+0x88>
   162e0:	ldr	r3, [r4, #16]
   162e4:	adds	r3, r3, r5
   162e8:	moveq	r0, r3
   162ec:	addne	r2, sp, #8
   162f0:	ldmdbne	r2, {r0, r1}
   162f4:	stmne	r3, {r0, r1}
   162f8:	movne	r0, r3
   162fc:	add	sp, sp, #12
   16300:	pop	{r4, r5, pc}
   16304:	ldr	r3, [pc, #48]	; 1633c <flatcc_builder_union_vector_push@@Base+0xac>
   16308:	ldr	r2, [pc, #48]	; 16340 <flatcc_builder_union_vector_push@@Base+0xb0>
   1630c:	ldr	r1, [pc, #48]	; 16344 <flatcc_builder_union_vector_push@@Base+0xb4>
   16310:	ldr	r0, [pc, #48]	; 16348 <flatcc_builder_union_vector_push@@Base+0xb8>
   16314:	bl	1234c <__assert_fail@plt>
   16318:	mvn	r2, #3
   1631c:	add	r1, r5, #9
   16320:	bl	12ee0 <main@@Base+0xf4>
   16324:	cmp	r0, #0
   16328:	beq	162e0 <flatcc_builder_union_vector_push@@Base+0x50>
   1632c:	mov	r0, #0
   16330:	b	162fc <flatcc_builder_union_vector_push@@Base+0x6c>
   16334:	mov	r0, #0
   16338:	b	162fc <flatcc_builder_union_vector_push@@Base+0x6c>
   1633c:	andeq	r9, r1, ip, lsr #5
   16340:	andeq	r0, r0, sp, lsl #13
   16344:	andeq	r9, r1, ip, ror #7
   16348:	strdeq	r9, [r1], -r0

0001634c <flatcc_builder_append_union_vector@@Base>:
   1634c:	push	{r4, r5, r6, r7, r8, lr}
   16350:	mov	r6, r1
   16354:	ldr	r1, [r0, #32]
   16358:	ldrh	r3, [r1, #14]
   1635c:	cmp	r3, #7
   16360:	bne	163d0 <flatcc_builder_append_union_vector@@Base+0x84>
   16364:	mov	r5, r0
   16368:	ldr	r3, [r1, #20]
   1636c:	adds	r3, r2, r3
   16370:	movcs	ip, #1
   16374:	movcc	ip, #0
   16378:	cmn	r3, #-536870911	; 0xe0000001
   1637c:	movls	r0, #0
   16380:	movhi	r0, #1
   16384:	orrs	r0, ip, r0
   16388:	bne	163e4 <flatcc_builder_append_union_vector@@Base+0x98>
   1638c:	str	r3, [r1, #20]
   16390:	lsl	r4, r2, #3
   16394:	ldr	r7, [r5, #20]
   16398:	add	r1, r4, r7
   1639c:	str	r1, [r5, #20]
   163a0:	ldr	r3, [r5, #24]
   163a4:	cmp	r1, r3
   163a8:	bcs	163f8 <flatcc_builder_append_union_vector@@Base+0xac>
   163ac:	ldr	r5, [r5, #16]
   163b0:	adds	r5, r5, r7
   163b4:	beq	163c8 <flatcc_builder_append_union_vector@@Base+0x7c>
   163b8:	mov	r2, r4
   163bc:	mov	r1, r6
   163c0:	mov	r0, r5
   163c4:	bl	122bc <memcpy@plt>
   163c8:	mov	r0, r5
   163cc:	pop	{r4, r5, r6, r7, r8, pc}
   163d0:	ldr	r3, [pc, #64]	; 16418 <flatcc_builder_append_union_vector@@Base+0xcc>
   163d4:	ldr	r2, [pc, #64]	; 1641c <flatcc_builder_append_union_vector@@Base+0xd0>
   163d8:	ldr	r1, [pc, #64]	; 16420 <flatcc_builder_append_union_vector@@Base+0xd4>
   163dc:	ldr	r0, [pc, #64]	; 16424 <flatcc_builder_append_union_vector@@Base+0xd8>
   163e0:	bl	1234c <__assert_fail@plt>
   163e4:	ldr	r3, [pc, #60]	; 16428 <flatcc_builder_append_union_vector@@Base+0xdc>
   163e8:	mov	r2, #892	; 0x37c
   163ec:	ldr	r1, [pc, #44]	; 16420 <flatcc_builder_append_union_vector@@Base+0xd4>
   163f0:	ldr	r0, [pc, #52]	; 1642c <flatcc_builder_append_union_vector@@Base+0xe0>
   163f4:	bl	1234c <__assert_fail@plt>
   163f8:	mvn	r2, #3
   163fc:	add	r1, r1, #1
   16400:	mov	r0, r5
   16404:	bl	12ee0 <main@@Base+0xf4>
   16408:	cmp	r0, #0
   1640c:	beq	163ac <flatcc_builder_append_union_vector@@Base+0x60>
   16410:	mov	r5, #0
   16414:	b	163c8 <flatcc_builder_append_union_vector@@Base+0x7c>
   16418:	ldrdeq	r9, [r1], -r0
   1641c:	muleq	r0, ip, r6
   16420:	andeq	r9, r1, ip, ror #7
   16424:	strdeq	r9, [r1], -r0
   16428:	andeq	r8, r1, ip, asr #31
   1642c:	andeq	r9, r1, r8, lsl #10

00016430 <flatcc_builder_create_string@@Base>:
   16430:	push	{r4, r5, r6, lr}
   16434:	sub	sp, sp, #88	; 0x58
   16438:	mov	r5, r0
   1643c:	str	r2, [sp, #84]	; 0x54
   16440:	ldr	r0, [r0, #136]	; 0x88
   16444:	sub	r3, r0, r2
   16448:	sub	r3, r3, #1
   1644c:	and	r3, r3, #3
   16450:	add	r3, r3, #1
   16454:	mov	ip, #4
   16458:	str	ip, [sp, #12]
   1645c:	add	lr, sp, #84	; 0x54
   16460:	str	lr, [sp, #20]
   16464:	str	ip, [sp, #24]
   16468:	mov	ip, #1
   1646c:	str	ip, [sp, #16]
   16470:	cmp	r2, #0
   16474:	beq	16490 <flatcc_builder_create_string@@Base+0x60>
   16478:	add	ip, r2, #4
   1647c:	str	ip, [sp, #12]
   16480:	str	r1, [sp, #28]
   16484:	str	r2, [sp, #32]
   16488:	mov	r2, #2
   1648c:	str	r2, [sp, #16]
   16490:	cmp	r3, #0
   16494:	beq	164c4 <flatcc_builder_create_string@@Base+0x94>
   16498:	ldr	r2, [sp, #12]
   1649c:	add	r2, r2, r3
   164a0:	str	r2, [sp, #12]
   164a4:	ldr	r2, [sp, #16]
   164a8:	add	r2, r2, #1
   164ac:	add	r1, sp, #88	; 0x58
   164b0:	add	r1, r1, r2, lsl #3
   164b4:	ldr	ip, [pc, #116]	; 16530 <flatcc_builder_create_string@@Base+0x100>
   164b8:	str	ip, [r1, #-76]	; 0xffffffb4
   164bc:	str	r3, [r1, #-72]	; 0xffffffb8
   164c0:	str	r2, [sp, #16]
   164c4:	ldr	r3, [sp, #12]
   164c8:	sub	r4, r0, r3
   164cc:	cmp	r0, r4
   164d0:	ble	16508 <flatcc_builder_create_string@@Base+0xd8>
   164d4:	str	r3, [sp]
   164d8:	ldr	r6, [r5, #44]	; 0x2c
   164dc:	mov	r3, r4
   164e0:	ldr	r2, [sp, #16]
   164e4:	add	r1, sp, #20
   164e8:	ldr	r0, [r5, #36]	; 0x24
   164ec:	blx	r6
   164f0:	cmp	r0, #0
   164f4:	bne	1651c <flatcc_builder_create_string@@Base+0xec>
   164f8:	str	r4, [r5, #136]	; 0x88
   164fc:	mov	r0, r4
   16500:	add	sp, sp, #88	; 0x58
   16504:	pop	{r4, r5, r6, pc}
   16508:	ldr	r3, [pc, #36]	; 16534 <flatcc_builder_create_string@@Base+0x104>
   1650c:	ldr	r2, [pc, #36]	; 16538 <flatcc_builder_create_string@@Base+0x108>
   16510:	ldr	r1, [pc, #36]	; 1653c <flatcc_builder_create_string@@Base+0x10c>
   16514:	ldr	r0, [pc, #36]	; 16540 <flatcc_builder_create_string@@Base+0x110>
   16518:	bl	1234c <__assert_fail@plt>
   1651c:	ldr	r3, [pc, #16]	; 16534 <flatcc_builder_create_string@@Base+0x104>
   16520:	ldr	r2, [pc, #28]	; 16544 <flatcc_builder_create_string@@Base+0x114>
   16524:	ldr	r1, [pc, #16]	; 1653c <flatcc_builder_create_string@@Base+0x10c>
   16528:	ldr	r0, [pc, #16]	; 16540 <flatcc_builder_create_string@@Base+0x110>
   1652c:	bl	1234c <__assert_fail@plt>
   16530:	muleq	r1, ip, ip
   16534:	andeq	r8, r1, r8, ror #29
   16538:	andeq	r0, r0, r7, lsl #5
   1653c:	andeq	r9, r1, ip, ror #7
   16540:	andeq	r9, r1, r0, asr #8
   16544:	andeq	r0, r0, fp, lsl #5

00016548 <flatcc_builder_create_string_str@@Base>:
   16548:	push	{r4, r5, r6, lr}
   1654c:	mov	r5, r0
   16550:	mov	r4, r1
   16554:	mov	r0, r1
   16558:	bl	12304 <strlen@plt>
   1655c:	mov	r2, r0
   16560:	mov	r1, r4
   16564:	mov	r0, r5
   16568:	bl	16430 <flatcc_builder_create_string@@Base>
   1656c:	pop	{r4, r5, r6, pc}

00016570 <flatcc_builder_create_string_strn@@Base>:
   16570:	push	{r4, r5, r6, lr}
   16574:	mov	r6, r0
   16578:	mov	r4, r1
   1657c:	mov	r5, r2
   16580:	mov	r1, #0
   16584:	mov	r0, r4
   16588:	bl	12334 <memchr@plt>
   1658c:	cmp	r0, #0
   16590:	subne	r5, r0, r4
   16594:	mov	r2, r5
   16598:	mov	r1, r4
   1659c:	mov	r0, r6
   165a0:	bl	16430 <flatcc_builder_create_string@@Base>
   165a4:	pop	{r4, r5, r6, pc}

000165a8 <flatcc_builder_end_string@@Base>:
   165a8:	push	{r4, r5, r6, lr}
   165ac:	ldr	r3, [r0, #32]
   165b0:	ldrh	r2, [r3, #14]
   165b4:	cmp	r2, #6
   165b8:	bne	165e8 <flatcc_builder_end_string@@Base+0x40>
   165bc:	mov	r4, r0
   165c0:	ldr	r2, [r3, #20]
   165c4:	ldr	r3, [r0, #20]
   165c8:	cmp	r2, r3
   165cc:	bne	165fc <flatcc_builder_end_string@@Base+0x54>
   165d0:	ldr	r1, [r0, #16]
   165d4:	bl	16430 <flatcc_builder_create_string@@Base>
   165d8:	subs	r5, r0, #0
   165dc:	bne	16610 <flatcc_builder_end_string@@Base+0x68>
   165e0:	mov	r0, r5
   165e4:	pop	{r4, r5, r6, pc}
   165e8:	ldr	r3, [pc, #160]	; 16690 <flatcc_builder_end_string@@Base+0xe8>
   165ec:	ldr	r2, [pc, #160]	; 16694 <flatcc_builder_end_string@@Base+0xec>
   165f0:	ldr	r1, [pc, #160]	; 16698 <flatcc_builder_end_string@@Base+0xf0>
   165f4:	ldr	r0, [pc, #160]	; 1669c <flatcc_builder_end_string@@Base+0xf4>
   165f8:	bl	1234c <__assert_fail@plt>
   165fc:	ldr	r3, [pc, #140]	; 16690 <flatcc_builder_end_string@@Base+0xe8>
   16600:	ldr	r2, [pc, #152]	; 166a0 <flatcc_builder_end_string@@Base+0xf8>
   16604:	ldr	r1, [pc, #140]	; 16698 <flatcc_builder_end_string@@Base+0xf0>
   16608:	ldr	r0, [pc, #148]	; 166a4 <flatcc_builder_end_string@@Base+0xfc>
   1660c:	bl	1234c <__assert_fail@plt>
   16610:	ldr	r2, [r4, #20]
   16614:	mov	r1, #0
   16618:	ldr	r0, [r4, #16]
   1661c:	bl	1231c <memset@plt>
   16620:	ldr	r2, [r4, #32]
   16624:	ldr	r3, [r2, #8]
   16628:	str	r3, [r4, #20]
   1662c:	ldr	r0, [r2]
   16630:	str	r0, [r4, #28]
   16634:	ldr	r1, [r2, #4]
   16638:	ldr	r3, [r4, #60]	; 0x3c
   1663c:	add	r3, r3, r0
   16640:	str	r3, [r4, #16]
   16644:	ldr	r3, [r4, #64]	; 0x40
   16648:	sub	r3, r3, r0
   1664c:	cmp	r3, r1
   16650:	movcs	r3, r1
   16654:	str	r3, [r4, #24]
   16658:	str	r1, [r2, #4]
   1665c:	ldrh	r3, [r4, #130]	; 0x82
   16660:	ldrh	r2, [r4, #128]	; 0x80
   16664:	cmp	r2, r3
   16668:	strhcc	r3, [r4, #128]	; 0x80
   1666c:	ldr	r3, [r4, #32]
   16670:	ldrh	r2, [r3, #12]
   16674:	strh	r2, [r4, #130]	; 0x82
   16678:	sub	r3, r3, #36	; 0x24
   1667c:	str	r3, [r4, #32]
   16680:	ldr	r3, [r4, #156]	; 0x9c
   16684:	sub	r3, r3, #1
   16688:	str	r3, [r4, #156]	; 0x9c
   1668c:	b	165e0 <flatcc_builder_end_string@@Base+0x38>
   16690:	strdeq	r9, [r1], -r4
   16694:	andeq	r0, r0, r4, asr #13
   16698:	andeq	r9, r1, ip, ror #7
   1669c:	andeq	r9, r1, r4, asr #11
   166a0:	andeq	r0, r0, r5, asr #13
   166a4:	andeq	r9, r1, r4, lsr #14

000166a8 <flatcc_builder_string_edit@@Base>:
   166a8:	ldr	r0, [r0, #16]
   166ac:	bx	lr

000166b0 <flatcc_builder_string_len@@Base>:
   166b0:	ldr	r3, [r0, #32]
   166b4:	ldr	r0, [r3, #20]
   166b8:	bx	lr

000166bc <flatcc_builder_table_add@@Base>:
   166bc:	push	{r4, r5, r6, r7, r8, lr}
   166c0:	mov	r5, r1
   166c4:	ldr	r1, [r0, #32]
   166c8:	ldrh	r1, [r1, #14]
   166cc:	cmp	r1, #3
   166d0:	bne	1677c <flatcc_builder_table_add@@Base+0xc0>
   166d4:	mov	r4, r0
   166d8:	ldr	r1, [pc, #248]	; 167d8 <flatcc_builder_table_add@@Base+0x11c>
   166dc:	cmp	r5, r1
   166e0:	bhi	16790 <flatcc_builder_table_add@@Base+0xd4>
   166e4:	ldrh	r1, [r0, #130]	; 0x82
   166e8:	cmp	r1, r3
   166ec:	strhcc	r3, [r0, #130]	; 0x82
   166f0:	ldr	r0, [r0, #4]
   166f4:	lsl	r1, r5, #1
   166f8:	ldrh	r1, [r0, r1]
   166fc:	cmp	r1, #0
   16700:	bne	167a4 <flatcc_builder_table_add@@Base+0xe8>
   16704:	ldr	r0, [r4, #12]
   16708:	eor	r0, r0, r5
   1670c:	ldr	r1, [pc, #200]	; 167dc <flatcc_builder_table_add@@Base+0x120>
   16710:	mul	r0, r1, r0
   16714:	eor	r0, r0, r2
   16718:	mul	r0, r1, r0
   1671c:	str	r0, [r4, #12]
   16720:	uxth	r7, r5
   16724:	sub	r6, r3, #1
   16728:	ldr	r0, [r4, #20]
   1672c:	add	r6, r6, r0
   16730:	rsb	r3, r3, #0
   16734:	and	r6, r6, r3
   16738:	add	r1, r2, r6
   1673c:	str	r1, [r4, #20]
   16740:	ldr	r3, [r4, #24]
   16744:	cmp	r1, r3
   16748:	bcs	167b8 <flatcc_builder_table_add@@Base+0xfc>
   1674c:	uxth	r5, r5
   16750:	ldr	r3, [r4, #4]
   16754:	lsl	r5, r5, #1
   16758:	add	r2, r6, #4
   1675c:	strh	r2, [r3, r5]
   16760:	ldrh	r3, [r4, #8]
   16764:	cmp	r3, r7
   16768:	addls	r7, r7, #1
   1676c:	strhls	r7, [r4, #8]
   16770:	ldr	r0, [r4, #16]
   16774:	add	r0, r0, r6
   16778:	pop	{r4, r5, r6, r7, r8, pc}
   1677c:	ldr	r3, [pc, #92]	; 167e0 <flatcc_builder_table_add@@Base+0x124>
   16780:	ldr	r2, [pc, #92]	; 167e4 <flatcc_builder_table_add@@Base+0x128>
   16784:	ldr	r1, [pc, #92]	; 167e8 <flatcc_builder_table_add@@Base+0x12c>
   16788:	ldr	r0, [pc, #92]	; 167ec <flatcc_builder_table_add@@Base+0x130>
   1678c:	bl	1234c <__assert_fail@plt>
   16790:	ldr	r3, [pc, #72]	; 167e0 <flatcc_builder_table_add@@Base+0x124>
   16794:	ldr	r2, [pc, #84]	; 167f0 <flatcc_builder_table_add@@Base+0x134>
   16798:	ldr	r1, [pc, #72]	; 167e8 <flatcc_builder_table_add@@Base+0x12c>
   1679c:	ldr	r0, [pc, #80]	; 167f4 <flatcc_builder_table_add@@Base+0x138>
   167a0:	bl	1234c <__assert_fail@plt>
   167a4:	ldr	r3, [pc, #52]	; 167e0 <flatcc_builder_table_add@@Base+0x124>
   167a8:	ldr	r2, [pc, #72]	; 167f8 <flatcc_builder_table_add@@Base+0x13c>
   167ac:	ldr	r1, [pc, #52]	; 167e8 <flatcc_builder_table_add@@Base+0x12c>
   167b0:	ldr	r0, [pc, #68]	; 167fc <flatcc_builder_table_add@@Base+0x140>
   167b4:	bl	1234c <__assert_fail@plt>
   167b8:	ldr	r2, [pc, #64]	; 16800 <flatcc_builder_table_add@@Base+0x144>
   167bc:	add	r1, r1, #1
   167c0:	mov	r0, r4
   167c4:	bl	12ee0 <main@@Base+0xf4>
   167c8:	cmp	r0, #0
   167cc:	beq	1674c <flatcc_builder_table_add@@Base+0x90>
   167d0:	mov	r0, #0
   167d4:	pop	{r4, r5, r6, r7, r8, pc}
   167d8:	strdeq	r7, [r0], -ip
   167dc:			; <UNDEFINED> instruction: 0x9e3779b1
   167e0:	andeq	r9, r1, r0, lsl r3
   167e4:	andeq	r0, r0, sp, ror #13
   167e8:	andeq	r9, r1, ip, ror #7
   167ec:			; <UNDEFINED> instruction: 0x000196b0
   167f0:	andeq	r0, r0, lr, ror #13
   167f4:	andeq	r9, r1, r8, asr #14
   167f8:	strdeq	r0, [r0], -r8
   167fc:	andeq	r9, r1, r0, asr #8
   16800:	strdeq	pc, [r0], -ip

00016804 <flatcc_builder_table_edit@@Base>:
   16804:	ldr	r3, [r0, #32]
   16808:	ldrh	r3, [r3, #14]
   1680c:	cmp	r3, #3
   16810:	bne	16828 <flatcc_builder_table_edit@@Base+0x24>
   16814:	ldr	r3, [r0, #20]
   16818:	sub	r1, r3, r1
   1681c:	ldr	r0, [r0, #16]
   16820:	add	r0, r0, r1
   16824:	bx	lr
   16828:	push	{r4, lr}
   1682c:	ldr	r3, [pc, #12]	; 16840 <flatcc_builder_table_edit@@Base+0x3c>
   16830:	ldr	r2, [pc, #12]	; 16844 <flatcc_builder_table_edit@@Base+0x40>
   16834:	ldr	r1, [pc, #12]	; 16848 <flatcc_builder_table_edit@@Base+0x44>
   16838:	ldr	r0, [pc, #12]	; 1684c <flatcc_builder_table_edit@@Base+0x48>
   1683c:	bl	1234c <__assert_fail@plt>
   16840:	andeq	r9, r1, ip, lsr #6
   16844:	andeq	r0, r0, r2, lsl #14
   16848:	andeq	r9, r1, ip, ror #7
   1684c:			; <UNDEFINED> instruction: 0x000196b0

00016850 <flatcc_builder_table_add_copy@@Base>:
   16850:	push	{r4, r5, r6, lr}
   16854:	mov	r6, r2
   16858:	mov	r5, r3
   1685c:	ldrh	r3, [sp, #16]
   16860:	mov	r2, r5
   16864:	bl	166bc <flatcc_builder_table_add@@Base>
   16868:	subs	r4, r0, #0
   1686c:	beq	16880 <flatcc_builder_table_add_copy@@Base+0x30>
   16870:	mov	r2, r5
   16874:	mov	r1, r6
   16878:	mov	r0, r4
   1687c:	bl	122bc <memcpy@plt>
   16880:	mov	r0, r4
   16884:	pop	{r4, r5, r6, pc}

00016888 <flatcc_builder_table_add_offset@@Base>:
   16888:	push	{r4, r5, r6, r7, r8, lr}
   1688c:	ldr	r3, [r0, #32]
   16890:	ldrh	r3, [r3, #14]
   16894:	cmp	r3, #3
   16898:	bne	16948 <flatcc_builder_table_add_offset@@Base+0xc0>
   1689c:	mov	r4, r0
   168a0:	mov	r5, r1
   168a4:	ldr	r3, [pc, #240]	; 1699c <flatcc_builder_table_add_offset@@Base+0x114>
   168a8:	cmp	r1, r3
   168ac:	bhi	1695c <flatcc_builder_table_add_offset@@Base+0xd4>
   168b0:	ldr	r2, [r0, #4]
   168b4:	lsl	r3, r1, #1
   168b8:	ldrh	r3, [r2, r3]
   168bc:	cmp	r3, #0
   168c0:	bne	16970 <flatcc_builder_table_add_offset@@Base+0xe8>
   168c4:	ldr	r3, [r0, #12]
   168c8:	eor	r3, r3, r1
   168cc:	ldr	r2, [pc, #204]	; 169a0 <flatcc_builder_table_add_offset@@Base+0x118>
   168d0:	mul	r3, r2, r3
   168d4:	eor	r3, r3, #4
   168d8:	mul	r3, r2, r3
   168dc:	str	r3, [r0, #12]
   168e0:	uxth	r7, r1
   168e4:	ldr	r6, [r0, #20]
   168e8:	add	r6, r6, #3
   168ec:	bic	r6, r6, #3
   168f0:	add	r1, r6, #4
   168f4:	str	r1, [r0, #20]
   168f8:	ldr	r3, [r0, #24]
   168fc:	cmp	r1, r3
   16900:	bhi	16984 <flatcc_builder_table_add_offset@@Base+0xfc>
   16904:	uxth	r2, r6
   16908:	uxth	r5, r5
   1690c:	ldr	r3, [r4, #4]
   16910:	lsl	r5, r5, #1
   16914:	add	r1, r2, #4
   16918:	strh	r1, [r3, r5]
   1691c:	ldrh	r3, [r4, #8]
   16920:	cmp	r3, r7
   16924:	addls	r7, r7, #1
   16928:	strhls	r7, [r4, #8]
   1692c:	ldr	r3, [r4]
   16930:	add	r1, r3, #2
   16934:	str	r1, [r4]
   16938:	strh	r2, [r3]
   1693c:	ldr	r0, [r4, #16]
   16940:	add	r0, r0, r6
   16944:	pop	{r4, r5, r6, r7, r8, pc}
   16948:	ldr	r3, [pc, #84]	; 169a4 <flatcc_builder_table_add_offset@@Base+0x11c>
   1694c:	ldr	r2, [pc, #84]	; 169a8 <flatcc_builder_table_add_offset@@Base+0x120>
   16950:	ldr	r1, [pc, #84]	; 169ac <flatcc_builder_table_add_offset@@Base+0x124>
   16954:	ldr	r0, [pc, #84]	; 169b0 <flatcc_builder_table_add_offset@@Base+0x128>
   16958:	bl	1234c <__assert_fail@plt>
   1695c:	ldr	r3, [pc, #64]	; 169a4 <flatcc_builder_table_add_offset@@Base+0x11c>
   16960:	ldr	r2, [pc, #76]	; 169b4 <flatcc_builder_table_add_offset@@Base+0x12c>
   16964:	ldr	r1, [pc, #64]	; 169ac <flatcc_builder_table_add_offset@@Base+0x124>
   16968:	ldr	r0, [pc, #72]	; 169b8 <flatcc_builder_table_add_offset@@Base+0x130>
   1696c:	bl	1234c <__assert_fail@plt>
   16970:	ldr	r3, [pc, #44]	; 169a4 <flatcc_builder_table_add_offset@@Base+0x11c>
   16974:	ldr	r2, [pc, #64]	; 169bc <flatcc_builder_table_add_offset@@Base+0x134>
   16978:	ldr	r1, [pc, #44]	; 169ac <flatcc_builder_table_add_offset@@Base+0x124>
   1697c:	ldr	r0, [pc, #60]	; 169c0 <flatcc_builder_table_add_offset@@Base+0x138>
   16980:	bl	1234c <__assert_fail@plt>
   16984:	ldr	r2, [pc, #56]	; 169c4 <flatcc_builder_table_add_offset@@Base+0x13c>
   16988:	bl	12ee0 <main@@Base+0xf4>
   1698c:	cmp	r0, #0
   16990:	beq	16904 <flatcc_builder_table_add_offset@@Base+0x7c>
   16994:	mov	r0, #0
   16998:	pop	{r4, r5, r6, r7, r8, pc}
   1699c:	strdeq	r7, [r0], -ip
   169a0:			; <UNDEFINED> instruction: 0x9e3779b1
   169a4:	andeq	r9, r1, r8, asr #6
   169a8:	andeq	r0, r0, r3, lsl r7
   169ac:	andeq	r9, r1, ip, ror #7
   169b0:			; <UNDEFINED> instruction: 0x000196b0
   169b4:	andeq	r0, r0, r4, lsl r7
   169b8:	andeq	r9, r1, r8, asr #14
   169bc:	andeq	r0, r0, fp, lsl r7
   169c0:	andeq	r9, r1, r0, asr #8
   169c4:	strdeq	pc, [r0], -ip

000169c8 <flatcc_builder_table_add_union@@Base>:
   169c8:	push	{r4, r5, r6, r7, lr}
   169cc:	sub	sp, sp, #12
   169d0:	mov	r5, r1
   169d4:	add	r1, sp, #8
   169d8:	stmdb	r1, {r2, r3}
   169dc:	ldr	r3, [r0, #32]
   169e0:	ldrh	r3, [r3, #14]
   169e4:	cmp	r3, #3
   169e8:	bne	16a58 <flatcc_builder_table_add_union@@Base+0x90>
   169ec:	mov	r4, r0
   169f0:	ldrb	r7, [sp]
   169f4:	ldr	r6, [sp, #4]
   169f8:	adds	r3, r6, #0
   169fc:	movne	r3, #1
   16a00:	cmp	r7, #0
   16a04:	movne	r3, #0
   16a08:	cmp	r3, #0
   16a0c:	bne	16a6c <flatcc_builder_table_add_union@@Base+0xa4>
   16a10:	cmp	r6, #0
   16a14:	beq	16a2c <flatcc_builder_table_add_union@@Base+0x64>
   16a18:	mov	r1, r5
   16a1c:	bl	16888 <flatcc_builder_table_add_offset@@Base>
   16a20:	cmp	r0, #0
   16a24:	strne	r6, [r0]
   16a28:	beq	16a80 <flatcc_builder_table_add_union@@Base+0xb8>
   16a2c:	mov	r3, #1
   16a30:	mov	r2, r3
   16a34:	sub	r1, r5, #1
   16a38:	mov	r0, r4
   16a3c:	bl	166bc <flatcc_builder_table_add@@Base>
   16a40:	cmp	r0, #0
   16a44:	beq	16a94 <flatcc_builder_table_add_union@@Base+0xcc>
   16a48:	strb	r7, [r0]
   16a4c:	mov	r0, #0
   16a50:	add	sp, sp, #12
   16a54:	pop	{r4, r5, r6, r7, pc}
   16a58:	ldr	r3, [pc, #72]	; 16aa8 <flatcc_builder_table_add_union@@Base+0xe0>
   16a5c:	ldr	r2, [pc, #72]	; 16aac <flatcc_builder_table_add_union@@Base+0xe4>
   16a60:	ldr	r1, [pc, #72]	; 16ab0 <flatcc_builder_table_add_union@@Base+0xe8>
   16a64:	ldr	r0, [pc, #72]	; 16ab4 <flatcc_builder_table_add_union@@Base+0xec>
   16a68:	bl	1234c <__assert_fail@plt>
   16a6c:	ldr	r3, [pc, #52]	; 16aa8 <flatcc_builder_table_add_union@@Base+0xe0>
   16a70:	ldr	r2, [pc, #64]	; 16ab8 <flatcc_builder_table_add_union@@Base+0xf0>
   16a74:	ldr	r1, [pc, #52]	; 16ab0 <flatcc_builder_table_add_union@@Base+0xe8>
   16a78:	ldr	r0, [pc, #60]	; 16abc <flatcc_builder_table_add_union@@Base+0xf4>
   16a7c:	bl	1234c <__assert_fail@plt>
   16a80:	ldr	r3, [pc, #32]	; 16aa8 <flatcc_builder_table_add_union@@Base+0xe0>
   16a84:	ldr	r2, [pc, #52]	; 16ac0 <flatcc_builder_table_add_union@@Base+0xf8>
   16a88:	ldr	r1, [pc, #32]	; 16ab0 <flatcc_builder_table_add_union@@Base+0xe8>
   16a8c:	ldr	r0, [pc, #48]	; 16ac4 <flatcc_builder_table_add_union@@Base+0xfc>
   16a90:	bl	1234c <__assert_fail@plt>
   16a94:	ldr	r3, [pc, #12]	; 16aa8 <flatcc_builder_table_add_union@@Base+0xe0>
   16a98:	ldr	r2, [pc, #40]	; 16ac8 <flatcc_builder_table_add_union@@Base+0x100>
   16a9c:	ldr	r1, [pc, #12]	; 16ab0 <flatcc_builder_table_add_union@@Base+0xe8>
   16aa0:	ldr	r0, [pc, #36]	; 16acc <flatcc_builder_table_add_union@@Base+0x104>
   16aa4:	bl	1234c <__assert_fail@plt>
   16aa8:	andeq	r9, r1, r8, ror #6
   16aac:	andeq	r0, r0, lr, ror #11
   16ab0:	andeq	r9, r1, ip, ror #7
   16ab4:			; <UNDEFINED> instruction: 0x000196b0
   16ab8:	andeq	r0, r0, pc, ror #11
   16abc:	andeq	r9, r1, ip, lsl #15
   16ac0:	strdeq	r0, [r0], -r2
   16ac4:			; <UNDEFINED> instruction: 0x000197b0
   16ac8:	strdeq	r0, [r0], -r6
   16acc:			; <UNDEFINED> instruction: 0x000197bc

00016ad0 <flatcc_builder_table_add_union_vector@@Base>:
   16ad0:	push	{r4, r5, r6, r7, lr}
   16ad4:	sub	sp, sp, #12
   16ad8:	mov	r7, r1
   16adc:	add	r1, sp, #8
   16ae0:	stmdb	r1, {r2, r3}
   16ae4:	ldr	r4, [sp]
   16ae8:	ldr	r6, [sp, #4]
   16aec:	ldr	r3, [r0, #32]
   16af0:	ldrh	r3, [r3, #14]
   16af4:	cmp	r3, #3
   16af8:	bne	16b34 <flatcc_builder_table_add_union_vector@@Base+0x64>
   16afc:	mov	r5, r0
   16b00:	clz	r3, r6
   16b04:	lsr	r3, r3, #5
   16b08:	clz	r2, r4
   16b0c:	lsr	r2, r2, #5
   16b10:	cmp	r2, r3
   16b14:	beq	16b5c <flatcc_builder_table_add_union_vector@@Base+0x8c>
   16b18:	adds	r4, r4, #0
   16b1c:	movne	r4, #1
   16b20:	cmp	r4, r3
   16b24:	mvnne	r0, #0
   16b28:	beq	16b48 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16b2c:	add	sp, sp, #12
   16b30:	pop	{r4, r5, r6, r7, pc}
   16b34:	ldr	r3, [pc, #136]	; 16bc4 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16b38:	mov	r2, #1536	; 0x600
   16b3c:	ldr	r1, [pc, #132]	; 16bc8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16b40:	ldr	r0, [pc, #132]	; 16bcc <flatcc_builder_table_add_union_vector@@Base+0xfc>
   16b44:	bl	1234c <__assert_fail@plt>
   16b48:	ldr	r3, [pc, #116]	; 16bc4 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16b4c:	ldr	r2, [pc, #124]	; 16bd0 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16b50:	ldr	r1, [pc, #112]	; 16bc8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16b54:	ldr	r0, [pc, #120]	; 16bd4 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16b58:	bl	1234c <__assert_fail@plt>
   16b5c:	cmp	r4, #0
   16b60:	moveq	r0, #0
   16b64:	beq	16b2c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16b68:	sub	r1, r7, #1
   16b6c:	mov	r0, r5
   16b70:	bl	16888 <flatcc_builder_table_add_offset@@Base>
   16b74:	cmp	r0, #0
   16b78:	beq	16bb0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16b7c:	str	r4, [r0]
   16b80:	mov	r1, r7
   16b84:	mov	r0, r5
   16b88:	bl	16888 <flatcc_builder_table_add_offset@@Base>
   16b8c:	cmp	r0, #0
   16b90:	strne	r6, [r0]
   16b94:	movne	r0, #0
   16b98:	bne	16b2c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16b9c:	ldr	r3, [pc, #32]	; 16bc4 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16ba0:	ldr	r2, [pc, #48]	; 16bd8 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16ba4:	ldr	r1, [pc, #28]	; 16bc8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16ba8:	ldr	r0, [pc, #44]	; 16bdc <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16bac:	bl	1234c <__assert_fail@plt>
   16bb0:	ldr	r3, [pc, #12]	; 16bc4 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16bb4:	ldr	r2, [pc, #36]	; 16be0 <flatcc_builder_table_add_union_vector@@Base+0x110>
   16bb8:	ldr	r1, [pc, #8]	; 16bc8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16bbc:	ldr	r0, [pc, #24]	; 16bdc <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16bc0:	bl	1234c <__assert_fail@plt>
   16bc4:	andeq	r9, r1, r8, lsl #7
   16bc8:	andeq	r9, r1, ip, ror #7
   16bcc:			; <UNDEFINED> instruction: 0x000196b0
   16bd0:	andeq	r0, r0, r1, lsl #12
   16bd4:	andeq	r9, r1, r8, asr #15
   16bd8:	andeq	r0, r0, r8, lsl #12
   16bdc:			; <UNDEFINED> instruction: 0x000197b0
   16be0:	andeq	r0, r0, r4, lsl #12

00016be4 <flatcc_builder_push_buffer_alignment@@Base>:
   16be4:	mov	r3, r0
   16be8:	ldrh	r0, [r0, #128]	; 0x80
   16bec:	mov	r2, #4
   16bf0:	strh	r2, [r3, #128]	; 0x80
   16bf4:	bx	lr

00016bf8 <flatcc_builder_pop_buffer_alignment@@Base>:
   16bf8:	ldrh	r3, [r0, #128]	; 0x80
   16bfc:	cmp	r3, r1
   16c00:	strhcc	r1, [r0, #128]	; 0x80
   16c04:	bx	lr

00016c08 <flatcc_builder_get_buffer_alignment@@Base>:
   16c08:	ldrh	r0, [r0, #128]	; 0x80
   16c0c:	bx	lr

00016c10 <flatcc_builder_set_vtable_clustering@@Base>:
   16c10:	clz	r1, r1
   16c14:	lsr	r1, r1, #5
   16c18:	str	r1, [r0, #180]	; 0xb4
   16c1c:	bx	lr

00016c20 <flatcc_builder_set_block_align@@Base>:
   16c20:	strh	r1, [r0, #132]	; 0x84
   16c24:	bx	lr

00016c28 <flatcc_builder_get_level@@Base>:
   16c28:	ldr	r0, [r0, #156]	; 0x9c
   16c2c:	bx	lr

00016c30 <flatcc_builder_set_max_level@@Base>:
   16c30:	str	r1, [r0, #176]	; 0xb0
   16c34:	ldr	r3, [r0, #160]	; 0xa0
   16c38:	cmp	r1, r3
   16c3c:	strgt	r1, [r0, #160]	; 0xa0
   16c40:	bx	lr

00016c44 <flatcc_builder_get_buffer_size@@Base>:
   16c44:	ldr	r2, [r0, #140]	; 0x8c
   16c48:	ldr	r0, [r0, #136]	; 0x88
   16c4c:	sub	r0, r2, r0
   16c50:	bx	lr

00016c54 <flatcc_builder_get_buffer_start@@Base>:
   16c54:	ldr	r0, [r0, #136]	; 0x88
   16c58:	bx	lr

00016c5c <flatcc_builder_get_buffer_end@@Base>:
   16c5c:	ldr	r0, [r0, #140]	; 0x8c
   16c60:	bx	lr

00016c64 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16c64:	str	r1, [r0, #172]	; 0xac
   16c68:	bx	lr

00016c6c <flatcc_builder_set_identifier@@Base>:
   16c6c:	ldr	r3, [pc, #16]	; 16c84 <flatcc_builder_set_identifier@@Base+0x18>
   16c70:	cmp	r1, #0
   16c74:	moveq	r1, r3
   16c78:	ldr	r3, [r1]
   16c7c:	str	r3, [r0, #168]	; 0xa8
   16c80:	bx	lr
   16c84:	muleq	r1, ip, ip

00016c88 <flatcc_builder_get_type@@Base>:
   16c88:	ldr	r3, [r0, #32]
   16c8c:	cmp	r3, #0
   16c90:	ldrhne	r0, [r3, #14]
   16c94:	moveq	r0, #0
   16c98:	bx	lr

00016c9c <flatcc_builder_get_type_at@@Base>:
   16c9c:	cmp	r1, #0
   16ca0:	ble	16cc8 <flatcc_builder_get_type_at@@Base+0x2c>
   16ca4:	ldr	r3, [r0, #156]	; 0x9c
   16ca8:	cmp	r1, r3
   16cac:	bgt	16cd0 <flatcc_builder_get_type_at@@Base+0x34>
   16cb0:	sub	r1, r1, r3
   16cb4:	ldr	r3, [r0, #32]
   16cb8:	add	r1, r1, r1, lsl #3
   16cbc:	add	r1, r3, r1, lsl #2
   16cc0:	ldrh	r0, [r1, #14]
   16cc4:	bx	lr
   16cc8:	mov	r0, #0
   16ccc:	bx	lr
   16cd0:	mov	r0, #0
   16cd4:	bx	lr

00016cd8 <flatcc_builder_get_direct_buffer@@Base>:
   16cd8:	ldr	r3, [r0, #184]	; 0xb8
   16cdc:	cmp	r3, #0
   16ce0:	beq	16d1c <flatcc_builder_get_direct_buffer@@Base+0x44>
   16ce4:	ldr	r2, [r0, #188]	; 0xbc
   16ce8:	ldr	r3, [r0, #192]	; 0xc0
   16cec:	cmp	r2, r3
   16cf0:	beq	16d08 <flatcc_builder_get_direct_buffer@@Base+0x30>
   16cf4:	cmp	r1, #0
   16cf8:	beq	16d30 <flatcc_builder_get_direct_buffer@@Base+0x58>
   16cfc:	mov	r0, #0
   16d00:	str	r0, [r1]
   16d04:	bx	lr
   16d08:	cmp	r1, #0
   16d0c:	ldrne	r3, [r0, #212]	; 0xd4
   16d10:	strne	r3, [r1]
   16d14:	ldr	r0, [r0, #196]	; 0xc4
   16d18:	bx	lr
   16d1c:	cmp	r1, #0
   16d20:	beq	16d38 <flatcc_builder_get_direct_buffer@@Base+0x60>
   16d24:	mov	r0, #0
   16d28:	str	r0, [r1]
   16d2c:	bx	lr
   16d30:	mov	r0, #0
   16d34:	bx	lr
   16d38:	mov	r0, #0
   16d3c:	bx	lr

00016d40 <flatcc_builder_copy_buffer@@Base>:
   16d40:	ldr	r3, [r0, #184]	; 0xb8
   16d44:	cmp	r3, #0
   16d48:	beq	16d74 <flatcc_builder_copy_buffer@@Base+0x34>
   16d4c:	push	{r4, lr}
   16d50:	add	r0, r0, #188	; 0xbc
   16d54:	bl	17470 <flatcc_emitter_copy_buffer@@Base>
   16d58:	cmp	r0, #0
   16d5c:	popne	{r4, pc}
   16d60:	ldr	r3, [pc, #20]	; 16d7c <flatcc_builder_copy_buffer@@Base+0x3c>
   16d64:	ldr	r2, [pc, #20]	; 16d80 <flatcc_builder_copy_buffer@@Base+0x40>
   16d68:	ldr	r1, [pc, #20]	; 16d84 <flatcc_builder_copy_buffer@@Base+0x44>
   16d6c:	ldr	r0, [pc, #20]	; 16d88 <flatcc_builder_copy_buffer@@Base+0x48>
   16d70:	bl	1234c <__assert_fail@plt>
   16d74:	mov	r0, #0
   16d78:	bx	lr
   16d7c:			; <UNDEFINED> instruction: 0x000193b0
   16d80:	andeq	r0, r0, r6, lsl #15
   16d84:	andeq	r9, r1, ip, ror #7
   16d88:	strdeq	r9, [r1], -r0

00016d8c <flatcc_builder_finalize_buffer@@Base>:
   16d8c:	push	{r4, r5, r6, lr}
   16d90:	mov	r5, r0
   16d94:	ldr	r4, [r0, #140]	; 0x8c
   16d98:	ldr	r3, [r0, #136]	; 0x88
   16d9c:	sub	r4, r4, r3
   16da0:	cmp	r1, #0
   16da4:	strne	r4, [r1]
   16da8:	mov	r0, r4
   16dac:	bl	122e0 <malloc@plt>
   16db0:	subs	r6, r0, #0
   16db4:	beq	16dd8 <flatcc_builder_finalize_buffer@@Base+0x4c>
   16db8:	mov	r2, r4
   16dbc:	mov	r1, r6
   16dc0:	mov	r0, r5
   16dc4:	bl	16d40 <flatcc_builder_copy_buffer@@Base>
   16dc8:	cmp	r0, #0
   16dcc:	beq	16dec <flatcc_builder_finalize_buffer@@Base+0x60>
   16dd0:	mov	r0, r6
   16dd4:	pop	{r4, r5, r6, pc}
   16dd8:	ldr	r3, [pc, #32]	; 16e00 <flatcc_builder_finalize_buffer@@Base+0x74>
   16ddc:	ldr	r2, [pc, #32]	; 16e04 <flatcc_builder_finalize_buffer@@Base+0x78>
   16de0:	ldr	r1, [pc, #32]	; 16e08 <flatcc_builder_finalize_buffer@@Base+0x7c>
   16de4:	ldr	r0, [pc, #32]	; 16e0c <flatcc_builder_finalize_buffer@@Base+0x80>
   16de8:	bl	1234c <__assert_fail@plt>
   16dec:	ldr	r3, [pc, #12]	; 16e00 <flatcc_builder_finalize_buffer@@Base+0x74>
   16df0:	ldr	r2, [pc, #24]	; 16e10 <flatcc_builder_finalize_buffer@@Base+0x84>
   16df4:	ldr	r1, [pc, #12]	; 16e08 <flatcc_builder_finalize_buffer@@Base+0x7c>
   16df8:	ldr	r0, [pc, #12]	; 16e0c <flatcc_builder_finalize_buffer@@Base+0x80>
   16dfc:	bl	1234c <__assert_fail@plt>
   16e00:	andeq	r9, r1, ip, asr #7
   16e04:	muleq	r0, r8, r7
   16e08:	andeq	r9, r1, ip, ror #7
   16e0c:	andeq	r9, r1, r0, asr #8
   16e10:	muleq	r0, ip, r7

00016e14 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16e14:	push	{r4, r5, r6, r7, lr}
   16e18:	sub	sp, sp, #12
   16e1c:	mov	r7, r0
   16e20:	ldr	r4, [r0, #140]	; 0x8c
   16e24:	ldr	r3, [r0, #136]	; 0x88
   16e28:	sub	r3, r4, r3
   16e2c:	subs	r6, r1, #0
   16e30:	strne	r3, [r6]
   16e34:	ldrh	r1, [r0, #128]	; 0x80
   16e38:	sub	r4, r1, #1
   16e3c:	add	r4, r4, r3
   16e40:	rsb	r3, r1, #0
   16e44:	and	r4, r4, r3
   16e48:	add	r0, sp, #8
   16e4c:	mov	r3, #0
   16e50:	str	r3, [r0, #-4]!
   16e54:	mov	r2, r4
   16e58:	cmp	r1, #4
   16e5c:	movcc	r1, #4
   16e60:	bl	12310 <posix_memalign@plt>
   16e64:	cmp	r0, #0
   16e68:	beq	16e8c <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   16e6c:	ldr	r0, [sp, #4]
   16e70:	cmp	r0, #0
   16e74:	beq	16e7c <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   16e78:	bl	122b0 <free@plt>
   16e7c:	cmp	r6, #0
   16e80:	mov	r5, #0
   16e84:	strne	r5, [r6]
   16e88:	b	16eb0 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   16e8c:	ldr	r5, [sp, #4]
   16e90:	cmp	r5, #0
   16e94:	beq	16e7c <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   16e98:	mov	r2, r4
   16e9c:	mov	r1, r5
   16ea0:	mov	r0, r7
   16ea4:	bl	16d40 <flatcc_builder_copy_buffer@@Base>
   16ea8:	cmp	r0, #0
   16eac:	beq	16ebc <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   16eb0:	mov	r0, r5
   16eb4:	add	sp, sp, #12
   16eb8:	pop	{r4, r5, r6, r7, pc}
   16ebc:	mov	r0, r5
   16ec0:	bl	122b0 <free@plt>
   16ec4:	b	16e7c <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

00016ec8 <flatcc_builder_aligned_alloc@@Base>:
   16ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   16ecc:	sub	sp, sp, #12
   16ed0:	add	r3, sp, #8
   16ed4:	mov	r2, #0
   16ed8:	str	r2, [r3, #-4]!
   16edc:	mov	r2, r1
   16ee0:	cmp	r0, #4
   16ee4:	movcs	r1, r0
   16ee8:	movcc	r1, #4
   16eec:	mov	r0, r3
   16ef0:	bl	12310 <posix_memalign@plt>
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f14 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16efc:	ldr	r0, [sp, #4]
   16f00:	cmp	r0, #0
   16f04:	beq	16f14 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16f08:	bl	122b0 <free@plt>
   16f0c:	mov	r3, #0
   16f10:	str	r3, [sp, #4]
   16f14:	ldr	r0, [sp, #4]
   16f18:	add	sp, sp, #12
   16f1c:	pop	{pc}		; (ldr pc, [sp], #4)

00016f20 <flatcc_builder_aligned_free@@Base>:
   16f20:	push	{r4, lr}
   16f24:	bl	122b0 <free@plt>
   16f28:	pop	{r4, pc}

00016f2c <flatcc_builder_get_emit_context@@Base>:
   16f2c:	ldr	r0, [r0, #36]	; 0x24
   16f30:	bx	lr

00016f34 <flatcc_emitter_recycle_page@@Base>:
   16f34:	ldr	r3, [r0]
   16f38:	cmp	r3, r1
   16f3c:	beq	16f8c <flatcc_emitter_recycle_page@@Base+0x58>
   16f40:	ldr	r3, [r0, #4]
   16f44:	cmp	r1, r3
   16f48:	beq	16f94 <flatcc_emitter_recycle_page@@Base+0x60>
   16f4c:	ldr	r3, [r1, #2944]	; 0xb80
   16f50:	ldr	r2, [r1, #2948]	; 0xb84
   16f54:	str	r2, [r3, #2948]	; 0xb84
   16f58:	ldr	r3, [r1, #2948]	; 0xb84
   16f5c:	ldr	r2, [r1, #2944]	; 0xb80
   16f60:	str	r2, [r3, #2944]	; 0xb80
   16f64:	ldr	r3, [r0]
   16f68:	ldr	r3, [r3, #2948]	; 0xb84
   16f6c:	str	r3, [r1, #2948]	; 0xb84
   16f70:	ldr	r2, [r0]
   16f74:	str	r2, [r1, #2944]	; 0xb80
   16f78:	str	r1, [r3, #2944]	; 0xb80
   16f7c:	ldr	r3, [r1, #2944]	; 0xb80
   16f80:	str	r1, [r3, #2948]	; 0xb84
   16f84:	mov	r0, #0
   16f88:	bx	lr
   16f8c:	mvn	r0, #0
   16f90:	bx	lr
   16f94:	mvn	r0, #0
   16f98:	bx	lr

00016f9c <flatcc_emitter_reset@@Base>:
   16f9c:	ldr	r3, [r0]
   16fa0:	cmp	r3, #0
   16fa4:	bxeq	lr
   16fa8:	str	r3, [r0, #4]
   16fac:	add	r2, r3, #1472	; 0x5c0
   16fb0:	str	r2, [r0, #8]
   16fb4:	str	r2, [r0, #16]
   16fb8:	mov	r2, #1472	; 0x5c0
   16fbc:	str	r2, [r0, #12]
   16fc0:	str	r2, [r0, #20]
   16fc4:	sub	r2, r2, #2944	; 0xb80
   16fc8:	str	r2, [r3, #2952]	; 0xb88
   16fcc:	ldr	r3, [r0, #32]
   16fd0:	cmp	r3, #0
   16fd4:	ldreq	r3, [r0, #24]
   16fd8:	streq	r3, [r0, #32]
   16fdc:	ldr	r3, [r0, #32]
   16fe0:	add	r2, r3, r3, lsl #1
   16fe4:	ldr	r3, [r0, #24]
   16fe8:	lsr	r3, r3, #2
   16fec:	add	r3, r3, r2, lsr #2
   16ff0:	str	r3, [r0, #32]
   16ff4:	mov	r2, #0
   16ff8:	str	r2, [r0, #24]
   16ffc:	ldr	r2, [r0, #28]
   17000:	cmp	r2, r3, lsl #1
   17004:	bxls	lr
   17008:	push	{r4, lr}
   1700c:	mov	r4, r0
   17010:	ldr	r3, [r0, #4]
   17014:	ldr	r0, [r3, #2944]	; 0xb80
   17018:	ldr	r2, [r4]
   1701c:	cmp	r0, r2
   17020:	popeq	{r4, pc}
   17024:	ldr	r2, [r0, #2944]	; 0xb80
   17028:	str	r2, [r3, #2944]	; 0xb80
   1702c:	ldr	r3, [r0, #2944]	; 0xb80
   17030:	ldr	r2, [r4, #4]
   17034:	str	r2, [r3, #2948]	; 0xb84
   17038:	bl	122b0 <free@plt>
   1703c:	ldr	r3, [r4, #28]
   17040:	sub	r3, r3, #2944	; 0xb80
   17044:	str	r3, [r4, #28]
   17048:	ldr	r2, [r4, #32]
   1704c:	cmp	r3, r2, lsl #1
   17050:	popls	{r4, pc}
   17054:	ldr	r3, [r4, #4]
   17058:	ldr	r0, [r3, #2944]	; 0xb80
   1705c:	ldr	r2, [r4]
   17060:	cmp	r0, r2
   17064:	bne	17024 <flatcc_emitter_reset@@Base+0x88>
   17068:	pop	{r4, pc}

0001706c <flatcc_emitter_clear@@Base>:
   1706c:	ldr	r3, [r0]
   17070:	cmp	r3, #0
   17074:	bxeq	lr
   17078:	push	{r4, r5, r6, lr}
   1707c:	mov	r5, r0
   17080:	ldr	r2, [r3, #2948]	; 0xb84
   17084:	mov	r1, #0
   17088:	str	r1, [r2, #2944]	; 0xb80
   1708c:	ldr	r4, [r3, #2944]	; 0xb80
   17090:	cmp	r4, r1
   17094:	bne	170a4 <flatcc_emitter_clear@@Base+0x38>
   17098:	mov	r4, r3
   1709c:	b	170b8 <flatcc_emitter_clear@@Base+0x4c>
   170a0:	mov	r4, r3
   170a4:	ldr	r0, [r4, #2948]	; 0xb84
   170a8:	bl	122b0 <free@plt>
   170ac:	ldr	r3, [r4, #2944]	; 0xb80
   170b0:	cmp	r3, #0
   170b4:	bne	170a0 <flatcc_emitter_clear@@Base+0x34>
   170b8:	mov	r0, r4
   170bc:	bl	122b0 <free@plt>
   170c0:	mov	r2, #36	; 0x24
   170c4:	mov	r1, #0
   170c8:	mov	r0, r5
   170cc:	bl	1231c <memset@plt>
   170d0:	pop	{r4, r5, r6, pc}

000170d4 <flatcc_emitter@@Base>:
   170d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170d8:	mov	r4, r0
   170dc:	ldr	ip, [sp, #40]	; 0x28
   170e0:	ldr	r0, [r0, #24]
   170e4:	add	r0, r0, ip
   170e8:	str	r0, [r4, #24]
   170ec:	cmp	r3, #0
   170f0:	blt	1711c <flatcc_emitter@@Base+0x48>
   170f4:	ldr	r3, [r4, #20]
   170f8:	cmp	ip, r3
   170fc:	bls	17208 <flatcc_emitter@@Base+0x134>
   17100:	cmp	r2, #0
   17104:	addne	r7, r1, #8
   17108:	movne	sl, r2
   1710c:	movne	fp, #2944	; 0xb80
   17110:	bne	173bc <flatcc_emitter@@Base+0x2e8>
   17114:	mov	r0, r2
   17118:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1711c:	ldr	r3, [r4, #12]
   17120:	cmp	ip, r3
   17124:	bhi	17148 <flatcc_emitter@@Base+0x74>
   17128:	ldr	r5, [r4, #8]
   1712c:	sub	r5, r5, ip
   17130:	str	r5, [r4, #8]
   17134:	sub	r3, r3, ip
   17138:	str	r3, [r4, #12]
   1713c:	b	1721c <flatcc_emitter@@Base+0x148>
   17140:	mov	r0, r2
   17144:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17148:	add	r7, r1, r2, lsl #3
   1714c:	mov	r8, r2
   17150:	mov	fp, #1472	; 0x5c0
   17154:	mov	sl, #2944	; 0xb80
   17158:	b	17338 <flatcc_emitter@@Base+0x264>
   1715c:	mov	r2, r5
   17160:	rsb	r1, r2, #0
   17164:	ldr	r0, [r4, #8]
   17168:	add	r0, r0, r1
   1716c:	str	r0, [r4, #8]
   17170:	sub	r3, r3, r2
   17174:	str	r3, [r4, #12]
   17178:	add	r6, r6, r1
   1717c:	sub	r5, r5, r2
   17180:	mov	r1, r6
   17184:	bl	122bc <memcpy@plt>
   17188:	cmp	r5, #0
   1718c:	beq	17330 <flatcc_emitter@@Base+0x25c>
   17190:	ldr	r3, [r4, #12]
   17194:	cmp	r3, r5
   17198:	bcs	1715c <flatcc_emitter@@Base+0x88>
   1719c:	cmp	r3, #0
   171a0:	movne	r2, r3
   171a4:	bne	17160 <flatcc_emitter@@Base+0x8c>
   171a8:	ldr	r9, [r4]
   171ac:	cmp	r9, #0
   171b0:	beq	17450 <flatcc_emitter@@Base+0x37c>
   171b4:	ldr	r2, [r9, #2948]	; 0xb84
   171b8:	ldr	r3, [r4, #4]
   171bc:	cmp	r2, r3
   171c0:	beq	173d8 <flatcc_emitter@@Base+0x304>
   171c4:	ldr	r3, [r9, #2952]	; 0xb88
   171c8:	sub	r3, r3, #2944	; 0xb80
   171cc:	str	r3, [r2, #2952]	; 0xb88
   171d0:	ldr	r3, [r4]
   171d4:	ldr	r3, [r3, #2948]	; 0xb84
   171d8:	str	r3, [r4]
   171dc:	ldr	r3, [r4]
   171e0:	add	r2, r3, #2944	; 0xb80
   171e4:	str	r2, [r4, #8]
   171e8:	str	sl, [r4, #12]
   171ec:	ldr	r2, [r3, #2944]	; 0xb80
   171f0:	ldr	r2, [r2, #2952]	; 0xb88
   171f4:	sub	r2, r2, #2944	; 0xb80
   171f8:	str	r2, [r3, #2952]	; 0xb88
   171fc:	b	17188 <flatcc_emitter@@Base+0xb4>
   17200:	mov	r0, #0
   17204:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17208:	ldr	r5, [r4, #16]
   1720c:	add	r0, r5, ip
   17210:	str	r0, [r4, #16]
   17214:	sub	r3, r3, ip
   17218:	str	r3, [r4, #20]
   1721c:	cmp	r2, #0
   17220:	addne	r4, r1, #8
   17224:	movne	r8, r2
   17228:	beq	17140 <flatcc_emitter@@Base+0x6c>
   1722c:	ldr	r2, [r4, #-4]
   17230:	ldr	r1, [r4, #-8]
   17234:	mov	r0, r5
   17238:	bl	122bc <memcpy@plt>
   1723c:	ldr	r3, [r4, #-4]
   17240:	add	r5, r5, r3
   17244:	add	r4, r4, #8
   17248:	subs	r8, r8, #1
   1724c:	bne	1722c <flatcc_emitter@@Base+0x158>
   17250:	mov	r0, #0
   17254:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17258:	ldr	r0, [pc, #520]	; 17468 <flatcc_emitter@@Base+0x394>
   1725c:	bl	122e0 <malloc@plt>
   17260:	cmp	r0, #0
   17264:	beq	17320 <flatcc_emitter@@Base+0x24c>
   17268:	ldr	r3, [r4, #28]
   1726c:	add	r3, r3, #2944	; 0xb80
   17270:	str	r3, [r4, #28]
   17274:	str	r5, [r0, #2948]	; 0xb84
   17278:	str	r9, [r0, #2944]	; 0xb80
   1727c:	str	r0, [r9, #2948]	; 0xb84
   17280:	ldr	r3, [r4, #4]
   17284:	str	r0, [r3, #2944]	; 0xb80
   17288:	str	r0, [r4, #4]
   1728c:	b	17300 <flatcc_emitter@@Base+0x22c>
   17290:	mov	r5, r6
   17294:	mov	r2, r5
   17298:	mov	r1, r8
   1729c:	ldr	r0, [r4, #16]
   172a0:	bl	122bc <memcpy@plt>
   172a4:	sub	r6, r6, r5
   172a8:	add	r8, r8, r5
   172ac:	ldr	r3, [r4, #16]
   172b0:	add	r3, r3, r5
   172b4:	str	r3, [r4, #16]
   172b8:	ldr	r3, [r4, #20]
   172bc:	sub	r5, r3, r5
   172c0:	str	r5, [r4, #20]
   172c4:	cmp	r6, #0
   172c8:	beq	173b0 <flatcc_emitter@@Base+0x2dc>
   172cc:	ldr	r5, [r4, #20]
   172d0:	cmp	r5, r6
   172d4:	bcs	17290 <flatcc_emitter@@Base+0x1bc>
   172d8:	cmp	r5, #0
   172dc:	bne	17294 <flatcc_emitter@@Base+0x1c0>
   172e0:	ldr	r5, [r4, #4]
   172e4:	cmp	r5, #0
   172e8:	beq	17398 <flatcc_emitter@@Base+0x2c4>
   172ec:	ldr	r9, [r5, #2944]	; 0xb80
   172f0:	ldr	r3, [r4]
   172f4:	cmp	r9, r3
   172f8:	strne	r9, [r4, #4]
   172fc:	beq	17258 <flatcc_emitter@@Base+0x184>
   17300:	ldr	r3, [r4, #4]
   17304:	str	r3, [r4, #16]
   17308:	str	fp, [r4, #20]
   1730c:	ldr	r2, [r3, #2948]	; 0xb84
   17310:	ldr	r2, [r2, #2952]	; 0xb88
   17314:	add	r2, r2, #2944	; 0xb80
   17318:	str	r2, [r3, #2952]	; 0xb88
   1731c:	b	172c4 <flatcc_emitter@@Base+0x1f0>
   17320:	mvn	r0, #0
   17324:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17328:	mvn	r0, #0
   1732c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17330:	sub	r7, r7, #8
   17334:	sub	r8, r8, #1
   17338:	cmp	r8, #0
   1733c:	beq	17200 <flatcc_emitter@@Base+0x12c>
   17340:	ldr	r5, [r7, #-4]
   17344:	ldr	r6, [r7, #-8]
   17348:	add	r6, r6, r5
   1734c:	cmp	r5, #0
   17350:	bne	17190 <flatcc_emitter@@Base+0xbc>
   17354:	b	17330 <flatcc_emitter@@Base+0x25c>
   17358:	ldr	r3, [r4, #28]
   1735c:	add	r3, r3, #2944	; 0xb80
   17360:	str	r3, [r4, #28]
   17364:	str	r0, [r4]
   17368:	str	r0, [r4, #4]
   1736c:	str	r0, [r0, #2944]	; 0xb80
   17370:	str	r0, [r0, #2948]	; 0xb84
   17374:	add	r3, r0, #1472	; 0x5c0
   17378:	str	r3, [r4, #8]
   1737c:	str	r3, [r4, #16]
   17380:	mov	r3, #1472	; 0x5c0
   17384:	str	r3, [r4, #12]
   17388:	str	r3, [r4, #20]
   1738c:	sub	r3, r3, #2944	; 0xb80
   17390:	str	r3, [r0, #2952]	; 0xb88
   17394:	b	172c4 <flatcc_emitter@@Base+0x1f0>
   17398:	ldr	r0, [pc, #200]	; 17468 <flatcc_emitter@@Base+0x394>
   1739c:	bl	122e0 <malloc@plt>
   173a0:	cmp	r0, #0
   173a4:	bne	17358 <flatcc_emitter@@Base+0x284>
   173a8:	mvn	r0, #0
   173ac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b0:	add	r7, r7, #8
   173b4:	subs	sl, sl, #1
   173b8:	beq	173d0 <flatcc_emitter@@Base+0x2fc>
   173bc:	ldr	r8, [r7, #-8]
   173c0:	ldr	r6, [r7, #-4]
   173c4:	cmp	r6, #0
   173c8:	bne	172cc <flatcc_emitter@@Base+0x1f8>
   173cc:	b	173b0 <flatcc_emitter@@Base+0x2dc>
   173d0:	mov	r0, #0
   173d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173d8:	ldr	r0, [pc, #136]	; 17468 <flatcc_emitter@@Base+0x394>
   173dc:	bl	122e0 <malloc@plt>
   173e0:	cmp	r0, #0
   173e4:	beq	17328 <flatcc_emitter@@Base+0x254>
   173e8:	ldr	r3, [r4, #28]
   173ec:	add	r3, r3, #2944	; 0xb80
   173f0:	str	r3, [r4, #28]
   173f4:	ldr	r3, [r4, #4]
   173f8:	str	r3, [r0, #2948]	; 0xb84
   173fc:	str	r9, [r0, #2944]	; 0xb80
   17400:	str	r0, [r9, #2948]	; 0xb84
   17404:	ldr	r3, [r4, #4]
   17408:	str	r0, [r3, #2944]	; 0xb80
   1740c:	str	r0, [r4]
   17410:	b	171dc <flatcc_emitter@@Base+0x108>
   17414:	ldr	r3, [r4, #28]
   17418:	add	r3, r3, #2944	; 0xb80
   1741c:	str	r3, [r4, #28]
   17420:	str	r0, [r4]
   17424:	str	r0, [r4, #4]
   17428:	str	r0, [r0, #2944]	; 0xb80
   1742c:	str	r0, [r0, #2948]	; 0xb84
   17430:	add	r3, r0, #1472	; 0x5c0
   17434:	str	r3, [r4, #8]
   17438:	str	r3, [r4, #16]
   1743c:	str	fp, [r4, #12]
   17440:	str	fp, [r4, #20]
   17444:	ldr	r3, [pc, #32]	; 1746c <flatcc_emitter@@Base+0x398>
   17448:	str	r3, [r0, #2952]	; 0xb88
   1744c:	b	17188 <flatcc_emitter@@Base+0xb4>
   17450:	ldr	r0, [pc, #16]	; 17468 <flatcc_emitter@@Base+0x394>
   17454:	bl	122e0 <malloc@plt>
   17458:	cmp	r0, #0
   1745c:	bne	17414 <flatcc_emitter@@Base+0x340>
   17460:	mvn	r0, #0
   17464:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17468:	andeq	r0, r0, ip, lsl #23
   1746c:			; <UNDEFINED> instruction: 0xfffffa40

00017470 <flatcc_emitter_copy_buffer@@Base>:
   17470:	push	{r4, r5, r6, r7, r8, lr}
   17474:	mov	r5, r1
   17478:	ldr	r1, [r0, #24]
   1747c:	cmp	r1, r2
   17480:	bhi	17524 <flatcc_emitter_copy_buffer@@Base+0xb4>
   17484:	ldr	r3, [r0]
   17488:	cmp	r3, #0
   1748c:	beq	1752c <flatcc_emitter_copy_buffer@@Base+0xbc>
   17490:	mov	r6, r0
   17494:	ldr	r2, [r0, #4]
   17498:	cmp	r3, r2
   1749c:	beq	17510 <flatcc_emitter_copy_buffer@@Base+0xa0>
   174a0:	ldr	r4, [r0, #12]
   174a4:	rsb	r4, r4, #2944	; 0xb80
   174a8:	mov	r2, r4
   174ac:	ldr	r1, [r0, #8]
   174b0:	mov	r0, r5
   174b4:	bl	122bc <memcpy@plt>
   174b8:	add	r5, r5, r4
   174bc:	ldr	r3, [r6]
   174c0:	ldr	r4, [r3, #2944]	; 0xb80
   174c4:	ldr	r1, [r6, #4]
   174c8:	cmp	r4, r1
   174cc:	beq	174f8 <flatcc_emitter_copy_buffer@@Base+0x88>
   174d0:	mov	r7, #2944	; 0xb80
   174d4:	mov	r2, r7
   174d8:	mov	r1, r4
   174dc:	mov	r0, r5
   174e0:	bl	122bc <memcpy@plt>
   174e4:	add	r5, r5, #2944	; 0xb80
   174e8:	ldr	r4, [r4, #2944]	; 0xb80
   174ec:	ldr	r1, [r6, #4]
   174f0:	cmp	r1, r4
   174f4:	bne	174d4 <flatcc_emitter_copy_buffer@@Base+0x64>
   174f8:	ldr	r2, [r6, #20]
   174fc:	rsb	r2, r2, #2944	; 0xb80
   17500:	mov	r0, r5
   17504:	bl	122bc <memcpy@plt>
   17508:	mov	r0, r5
   1750c:	pop	{r4, r5, r6, r7, r8, pc}
   17510:	mov	r2, r1
   17514:	ldr	r1, [r0, #8]
   17518:	mov	r0, r5
   1751c:	bl	122bc <memcpy@plt>
   17520:	b	17508 <flatcc_emitter_copy_buffer@@Base+0x98>
   17524:	mov	r5, #0
   17528:	b	17508 <flatcc_emitter_copy_buffer@@Base+0x98>
   1752c:	mov	r5, #0
   17530:	b	17508 <flatcc_emitter_copy_buffer@@Base+0x98>
   17534:	add	r1, r1, #2
   17538:	lsl	r1, r1, #1
   1753c:	uxth	r1, r1
   17540:	ldrh	ip, [r0, #22]
   17544:	cmp	ip, r1
   17548:	bls	17574 <flatcc_emitter_copy_buffer@@Base+0x104>
   1754c:	ldr	ip, [r0, #12]
   17550:	ldrh	r1, [ip, r1]
   17554:	cmp	r1, #0
   17558:	beq	17574 <flatcc_emitter_copy_buffer@@Base+0x104>
   1755c:	add	r2, r1, #4
   17560:	ldrh	ip, [r0, #20]
   17564:	cmp	r2, ip
   17568:	bls	1758c <flatcc_emitter_copy_buffer@@Base+0x11c>
   1756c:	mov	r0, #13
   17570:	bx	lr
   17574:	mov	r1, #0
   17578:	str	r1, [r3]
   1757c:	cmp	r2, r1
   17580:	moveq	r0, r2
   17584:	movne	r0, #4
   17588:	bx	lr
   1758c:	ldr	r2, [r0, #16]
   17590:	add	r1, r1, r2
   17594:	tst	r1, #3
   17598:	beq	175a4 <flatcc_emitter_copy_buffer@@Base+0x134>
   1759c:	mov	r0, #12
   175a0:	bx	lr
   175a4:	str	r1, [r3]
   175a8:	mov	r0, #0
   175ac:	bx	lr

000175b0 <flatcc_verify_error_string@@Base>:
   175b0:	cmp	r0, #36	; 0x24
   175b4:	ldrls	pc, [pc, r0, lsl #2]
   175b8:	b	17770 <flatcc_verify_error_string@@Base+0x1c0>
   175bc:	andeq	r7, r1, r8, ror r7
   175c0:	andeq	r7, r1, r0, asr r6
   175c4:	andeq	r7, r1, r8, asr r6
   175c8:	andeq	r7, r1, r0, ror #12
   175cc:	andeq	r7, r1, r8, ror #12
   175d0:	andeq	r7, r1, r0, ror r6
   175d4:	andeq	r7, r1, r8, ror r6
   175d8:	andeq	r7, r1, r0, lsl #13
   175dc:	andeq	r7, r1, r8, lsl #13
   175e0:	muleq	r1, r0, r6
   175e4:	muleq	r1, r8, r6
   175e8:	andeq	r7, r1, r0, lsr #13
   175ec:	andeq	r7, r1, r8, lsr #13
   175f0:			; <UNDEFINED> instruction: 0x000176b0
   175f4:			; <UNDEFINED> instruction: 0x000176b8
   175f8:	andeq	r7, r1, r0, asr #13
   175fc:	andeq	r7, r1, r8, asr #13
   17600:	ldrdeq	r7, [r1], -r0
   17604:	ldrdeq	r7, [r1], -r8
   17608:	andeq	r7, r1, r0, ror #13
   1760c:	andeq	r7, r1, r8, ror #13
   17610:	strdeq	r7, [r1], -r0
   17614:	strdeq	r7, [r1], -r8
   17618:	andeq	r7, r1, r0, lsl #14
   1761c:	andeq	r7, r1, r8, lsl #14
   17620:	andeq	r7, r1, r0, lsl r7
   17624:	andeq	r7, r1, r8, lsl r7
   17628:	andeq	r7, r1, r0, lsr #14
   1762c:	andeq	r7, r1, r8, lsr #14
   17630:	andeq	r7, r1, r0, lsr r7
   17634:	andeq	r7, r1, r8, lsr r7
   17638:	andeq	r7, r1, r0, asr #14
   1763c:	andeq	r7, r1, r8, asr #14
   17640:	andeq	r7, r1, r0, asr r7
   17644:	andeq	r7, r1, r8, asr r7
   17648:	andeq	r7, r1, r0, ror #14
   1764c:	andeq	r7, r1, r8, ror #14
   17650:	ldr	r0, [pc, #296]	; 17780 <flatcc_verify_error_string@@Base+0x1d0>
   17654:	bx	lr
   17658:	ldr	r0, [pc, #292]	; 17784 <flatcc_verify_error_string@@Base+0x1d4>
   1765c:	bx	lr
   17660:	ldr	r0, [pc, #288]	; 17788 <flatcc_verify_error_string@@Base+0x1d8>
   17664:	bx	lr
   17668:	ldr	r0, [pc, #284]	; 1778c <flatcc_verify_error_string@@Base+0x1dc>
   1766c:	bx	lr
   17670:	ldr	r0, [pc, #280]	; 17790 <flatcc_verify_error_string@@Base+0x1e0>
   17674:	bx	lr
   17678:	ldr	r0, [pc, #276]	; 17794 <flatcc_verify_error_string@@Base+0x1e4>
   1767c:	bx	lr
   17680:	ldr	r0, [pc, #272]	; 17798 <flatcc_verify_error_string@@Base+0x1e8>
   17684:	bx	lr
   17688:	ldr	r0, [pc, #268]	; 1779c <flatcc_verify_error_string@@Base+0x1ec>
   1768c:	bx	lr
   17690:	ldr	r0, [pc, #264]	; 177a0 <flatcc_verify_error_string@@Base+0x1f0>
   17694:	bx	lr
   17698:	ldr	r0, [pc, #260]	; 177a4 <flatcc_verify_error_string@@Base+0x1f4>
   1769c:	bx	lr
   176a0:	ldr	r0, [pc, #256]	; 177a8 <flatcc_verify_error_string@@Base+0x1f8>
   176a4:	bx	lr
   176a8:	ldr	r0, [pc, #252]	; 177ac <flatcc_verify_error_string@@Base+0x1fc>
   176ac:	bx	lr
   176b0:	ldr	r0, [pc, #248]	; 177b0 <flatcc_verify_error_string@@Base+0x200>
   176b4:	bx	lr
   176b8:	ldr	r0, [pc, #244]	; 177b4 <flatcc_verify_error_string@@Base+0x204>
   176bc:	bx	lr
   176c0:	ldr	r0, [pc, #240]	; 177b8 <flatcc_verify_error_string@@Base+0x208>
   176c4:	bx	lr
   176c8:	ldr	r0, [pc, #236]	; 177bc <flatcc_verify_error_string@@Base+0x20c>
   176cc:	bx	lr
   176d0:	ldr	r0, [pc, #232]	; 177c0 <flatcc_verify_error_string@@Base+0x210>
   176d4:	bx	lr
   176d8:	ldr	r0, [pc, #228]	; 177c4 <flatcc_verify_error_string@@Base+0x214>
   176dc:	bx	lr
   176e0:	ldr	r0, [pc, #224]	; 177c8 <flatcc_verify_error_string@@Base+0x218>
   176e4:	bx	lr
   176e8:	ldr	r0, [pc, #220]	; 177cc <flatcc_verify_error_string@@Base+0x21c>
   176ec:	bx	lr
   176f0:	ldr	r0, [pc, #216]	; 177d0 <flatcc_verify_error_string@@Base+0x220>
   176f4:	bx	lr
   176f8:	ldr	r0, [pc, #212]	; 177d4 <flatcc_verify_error_string@@Base+0x224>
   176fc:	bx	lr
   17700:	ldr	r0, [pc, #208]	; 177d8 <flatcc_verify_error_string@@Base+0x228>
   17704:	bx	lr
   17708:	ldr	r0, [pc, #204]	; 177dc <flatcc_verify_error_string@@Base+0x22c>
   1770c:	bx	lr
   17710:	ldr	r0, [pc, #200]	; 177e0 <flatcc_verify_error_string@@Base+0x230>
   17714:	bx	lr
   17718:	ldr	r0, [pc, #196]	; 177e4 <flatcc_verify_error_string@@Base+0x234>
   1771c:	bx	lr
   17720:	ldr	r0, [pc, #192]	; 177e8 <flatcc_verify_error_string@@Base+0x238>
   17724:	bx	lr
   17728:	ldr	r0, [pc, #188]	; 177ec <flatcc_verify_error_string@@Base+0x23c>
   1772c:	bx	lr
   17730:	ldr	r0, [pc, #184]	; 177f0 <flatcc_verify_error_string@@Base+0x240>
   17734:	bx	lr
   17738:	ldr	r0, [pc, #180]	; 177f4 <flatcc_verify_error_string@@Base+0x244>
   1773c:	bx	lr
   17740:	ldr	r0, [pc, #176]	; 177f8 <flatcc_verify_error_string@@Base+0x248>
   17744:	bx	lr
   17748:	ldr	r0, [pc, #172]	; 177fc <flatcc_verify_error_string@@Base+0x24c>
   1774c:	bx	lr
   17750:	ldr	r0, [pc, #168]	; 17800 <flatcc_verify_error_string@@Base+0x250>
   17754:	bx	lr
   17758:	ldr	r0, [pc, #164]	; 17804 <flatcc_verify_error_string@@Base+0x254>
   1775c:	bx	lr
   17760:	ldr	r0, [pc, #160]	; 17808 <flatcc_verify_error_string@@Base+0x258>
   17764:	bx	lr
   17768:	ldr	r0, [pc, #156]	; 1780c <flatcc_verify_error_string@@Base+0x25c>
   1776c:	bx	lr
   17770:	ldr	r0, [pc, #152]	; 17810 <flatcc_verify_error_string@@Base+0x260>
   17774:	bx	lr
   17778:	ldr	r0, [pc, #148]	; 17814 <flatcc_verify_error_string@@Base+0x264>
   1777c:	bx	lr
   17780:	strdeq	r9, [r1], -ip
   17784:	andeq	r9, r1, r4, lsl r8
   17788:	andeq	r9, r1, r8, lsr #16
   1778c:	andeq	r9, r1, r4, asr #16
   17790:	andeq	r9, r1, ip, asr r8
   17794:	andeq	r9, r1, r0, lsl #17
   17798:	andeq	r9, r1, r0, lsr #17
   1779c:			; <UNDEFINED> instruction: 0x000198bc
   177a0:	ldrdeq	r9, [r1], -r0
   177a4:	andeq	r9, r1, r4, ror #17
   177a8:	strdeq	r9, [r1], -ip
   177ac:	andeq	r9, r1, r0, lsl r9
   177b0:	andeq	r9, r1, r8, lsr #18
   177b4:	andeq	r9, r1, r4, asr #18
   177b8:	andeq	r9, r1, r0, ror #18
   177bc:	andeq	r9, r1, r8, lsl #19
   177c0:			; <UNDEFINED> instruction: 0x000199b0
   177c4:	ldrdeq	r9, [r1], -r8
   177c8:	andeq	r9, r1, ip, ror #19
   177cc:	andeq	r9, r1, r4, lsl sl
   177d0:	andeq	r9, r1, ip, lsr #20
   177d4:	andeq	r9, r1, r8, asr sl
   177d8:	andeq	r9, r1, ip, lsl #21
   177dc:			; <UNDEFINED> instruction: 0x00019ab8
   177e0:	andeq	r9, r1, r4, ror #21
   177e4:	andeq	r9, r1, r4, lsl fp
   177e8:	andeq	r9, r1, r8, lsr #22
   177ec:	andeq	r9, r1, r4, asr #22
   177f0:	andeq	r9, r1, ip, asr fp
   177f4:	andeq	r9, r1, r4, lsl #23
   177f8:	andeq	r9, r1, ip, lsr #23
   177fc:	andeq	r9, r1, r4, asr #23
   17800:	andeq	r9, r1, ip, ror #23
   17804:	andeq	r9, r1, r4, lsl ip
   17808:	andeq	r9, r1, r8, asr #24
   1780c:	andeq	r9, r1, r0, ror ip
   17810:	andeq	r9, r1, r0, lsl #25
   17814:	strdeq	r9, [r1], -r8

00017818 <flatcc_verify_field@@Base>:
   17818:	add	r1, r1, #2
   1781c:	lsl	r1, r1, #1
   17820:	uxth	r1, r1
   17824:	ldrh	ip, [r0, #22]
   17828:	cmp	ip, r1
   1782c:	bls	17880 <flatcc_verify_field@@Base+0x68>
   17830:	ldr	ip, [r0, #12]
   17834:	ldrh	r1, [ip, r1]
   17838:	cmp	r1, #0
   1783c:	beq	17888 <flatcc_verify_field@@Base+0x70>
   17840:	add	r2, r2, r1
   17844:	ldrh	ip, [r0, #20]
   17848:	cmp	r2, ip
   1784c:	bls	17858 <flatcc_verify_field@@Base+0x40>
   17850:	mov	r0, #13
   17854:	bx	lr
   17858:	ldr	r2, [r0]
   1785c:	ldr	r0, [r0, #16]
   17860:	add	r0, r2, r0
   17864:	add	r0, r0, r1
   17868:	sub	r3, r3, #1
   1786c:	and	r0, r0, r3
   17870:	cmp	r0, #0
   17874:	movne	r0, #12
   17878:	moveq	r0, #0
   1787c:	bx	lr
   17880:	mov	r0, #0
   17884:	bx	lr
   17888:	mov	r0, #0
   1788c:	bx	lr

00017890 <flatcc_verify_string_field@@Base>:
   17890:	push	{r4, lr}
   17894:	sub	sp, sp, #8
   17898:	mov	r4, r0
   1789c:	add	r3, sp, #4
   178a0:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   178a4:	cmp	r0, #0
   178a8:	bne	17908 <flatcc_verify_string_field@@Base+0x78>
   178ac:	ldr	r3, [sp, #4]
   178b0:	cmp	r3, #0
   178b4:	beq	17908 <flatcc_verify_string_field@@Base+0x78>
   178b8:	ldr	r1, [r4]
   178bc:	ldr	r2, [r1, r3]
   178c0:	add	r2, r3, r2
   178c4:	cmp	r3, r2
   178c8:	movcs	r0, #17
   178cc:	bcs	17908 <flatcc_verify_string_field@@Base+0x78>
   178d0:	ldr	r3, [r4, #4]
   178d4:	add	ip, r2, #4
   178d8:	cmp	r3, ip
   178dc:	movcc	r0, #17
   178e0:	bcc	17908 <flatcc_verify_string_field@@Base+0x78>
   178e4:	tst	r2, #3
   178e8:	movne	r0, #17
   178ec:	bne	17908 <flatcc_verify_string_field@@Base+0x78>
   178f0:	ldr	r2, [r1, r2]
   178f4:	sub	r3, r3, ip
   178f8:	add	lr, r2, #1
   178fc:	cmp	r3, lr
   17900:	movcc	r0, #8
   17904:	bcs	17910 <flatcc_verify_string_field@@Base+0x80>
   17908:	add	sp, sp, #8
   1790c:	pop	{r4, pc}
   17910:	add	r1, r1, ip
   17914:	ldrb	r3, [r1, r2]
   17918:	cmp	r3, #0
   1791c:	movne	r0, #7
   17920:	b	17908 <flatcc_verify_string_field@@Base+0x78>

00017924 <flatcc_verify_vector_field@@Base>:
   17924:	push	{r4, r5, r6, lr}
   17928:	sub	sp, sp, #8
   1792c:	mov	r4, r0
   17930:	mov	r5, r3
   17934:	ldrh	r6, [sp, #24]
   17938:	add	r3, sp, #4
   1793c:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   17940:	cmp	r0, #0
   17944:	bne	179b4 <flatcc_verify_vector_field@@Base+0x90>
   17948:	ldr	r3, [sp, #4]
   1794c:	cmp	r3, #0
   17950:	beq	179b4 <flatcc_verify_vector_field@@Base+0x90>
   17954:	ldr	r1, [r4]
   17958:	ldr	r2, [r1, r3]
   1795c:	add	r2, r3, r2
   17960:	cmp	r3, r2
   17964:	movcs	r0, #16
   17968:	bcs	179b4 <flatcc_verify_vector_field@@Base+0x90>
   1796c:	ldr	ip, [r4, #4]
   17970:	add	lr, r2, #4
   17974:	cmp	ip, lr
   17978:	movcc	r0, #16
   1797c:	bcc	179b4 <flatcc_verify_vector_field@@Base+0x90>
   17980:	cmp	r6, #4
   17984:	movcs	r3, r6
   17988:	movcc	r3, #4
   1798c:	sub	r3, r3, #1
   17990:	orr	r3, r3, #3
   17994:	tst	r3, lr
   17998:	movne	r0, #16
   1799c:	bne	179b4 <flatcc_verify_vector_field@@Base+0x90>
   179a0:	ldr	r3, [r1, r2]
   179a4:	ldr	r1, [sp, #28]
   179a8:	cmp	r1, r3
   179ac:	movcc	r0, #25
   179b0:	bcs	179bc <flatcc_verify_vector_field@@Base+0x98>
   179b4:	add	sp, sp, #8
   179b8:	pop	{r4, r5, r6, pc}
   179bc:	mul	r5, r3, r5
   179c0:	sub	ip, ip, #4
   179c4:	sub	r2, ip, r2
   179c8:	cmp	r5, r2
   179cc:	movhi	r0, #26
   179d0:	b	179b4 <flatcc_verify_vector_field@@Base+0x90>

000179d4 <flatcc_verify_string_vector_field@@Base>:
   179d4:	push	{r4, r5, r6, r7, r8, lr}
   179d8:	sub	sp, sp, #8
   179dc:	mov	r4, r0
   179e0:	add	r3, sp, #4
   179e4:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   179e8:	cmp	r0, #0
   179ec:	bne	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   179f0:	ldr	r3, [sp, #4]
   179f4:	cmp	r3, #0
   179f8:	beq	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   179fc:	ldr	r6, [r4]
   17a00:	ldr	r5, [r4, #4]
   17a04:	ldr	lr, [r6, r3]
   17a08:	add	lr, r3, lr
   17a0c:	cmp	r3, lr
   17a10:	movcs	r0, #16
   17a14:	bcs	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a18:	add	r2, lr, #4
   17a1c:	cmp	r5, r2
   17a20:	bcc	17a2c <flatcc_verify_string_vector_field@@Base+0x58>
   17a24:	ands	r1, r2, #3
   17a28:	beq	17ad4 <flatcc_verify_string_vector_field@@Base+0x100>
   17a2c:	add	r3, lr, #4
   17a30:	cmp	r5, r3
   17a34:	movcc	r0, #16
   17a38:	bcc	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a3c:	tst	r3, #3
   17a40:	movne	r0, #16
   17a44:	bne	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a48:	ldr	r3, [r6, lr]
   17a4c:	cmn	r3, #-1073741823	; 0xc0000001
   17a50:	movhi	r0, #25
   17a54:	bhi	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a58:	sub	r5, r5, #4
   17a5c:	sub	lr, r5, lr
   17a60:	lsl	r3, r3, #2
   17a64:	cmp	lr, r3
   17a68:	movcc	r0, #26
   17a6c:	b	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a70:	add	lr, r6, lr
   17a74:	ldrb	r3, [lr, r7]
   17a78:	cmp	r3, #0
   17a7c:	movne	r0, #7
   17a80:	bne	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a84:	add	r1, r1, #1
   17a88:	add	r2, r2, #4
   17a8c:	cmp	r4, r1
   17a90:	beq	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17a94:	ldr	r3, [ip, #4]!
   17a98:	add	r3, r2, r3
   17a9c:	cmp	r2, r3
   17aa0:	bcs	17ac0 <flatcc_verify_string_vector_field@@Base+0xec>
   17aa4:	add	lr, r3, #4
   17aa8:	cmp	r5, lr
   17aac:	bcc	17acc <flatcc_verify_string_vector_field@@Base+0xf8>
   17ab0:	tst	r3, #3
   17ab4:	beq	17b00 <flatcc_verify_string_vector_field@@Base+0x12c>
   17ab8:	mov	r0, #17
   17abc:	b	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17ac0:	mov	r0, #17
   17ac4:	add	sp, sp, #8
   17ac8:	pop	{r4, r5, r6, r7, r8, pc}
   17acc:	mov	r0, #17
   17ad0:	b	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17ad4:	add	ip, r6, lr
   17ad8:	ldr	r4, [r6, lr]
   17adc:	cmn	r4, #-1073741823	; 0xc0000001
   17ae0:	bhi	17a2c <flatcc_verify_string_vector_field@@Base+0x58>
   17ae4:	sub	r3, r5, #4
   17ae8:	sub	r3, r3, lr
   17aec:	cmp	r3, r4, lsl #2
   17af0:	bcc	17a2c <flatcc_verify_string_vector_field@@Base+0x58>
   17af4:	cmp	r4, #0
   17af8:	bne	17a94 <flatcc_verify_string_vector_field@@Base+0xc0>
   17afc:	b	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>
   17b00:	ldr	r7, [r6, r3]
   17b04:	sub	r3, r5, lr
   17b08:	add	r8, r7, #1
   17b0c:	cmp	r3, r8
   17b10:	bcs	17a70 <flatcc_verify_string_vector_field@@Base+0x9c>
   17b14:	mov	r0, #8
   17b18:	b	17ac4 <flatcc_verify_string_vector_field@@Base+0xf0>

00017b1c <flatcc_verify_table_field@@Base>:
   17b1c:	push	{r4, r5, lr}
   17b20:	sub	sp, sp, #36	; 0x24
   17b24:	mov	r4, r0
   17b28:	mov	r5, r3
   17b2c:	add	r3, sp, #28
   17b30:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   17b34:	cmp	r0, #0
   17b38:	bne	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17b3c:	ldr	r3, [sp, #28]
   17b40:	cmp	r3, #0
   17b44:	bne	17b50 <flatcc_verify_table_field@@Base+0x34>
   17b48:	add	sp, sp, #36	; 0x24
   17b4c:	pop	{r4, r5, pc}
   17b50:	ldr	r0, [r4]
   17b54:	ldr	ip, [r4, #4]
   17b58:	ldr	r1, [r0, r3]
   17b5c:	ldr	r2, [r4, #8]
   17b60:	sub	r2, r2, #1
   17b64:	str	r2, [sp, #12]
   17b68:	cmp	r2, #0
   17b6c:	moveq	r0, #3
   17b70:	beq	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17b74:	add	r2, r3, r1
   17b78:	cmp	r3, r2
   17b7c:	movcs	r0, #15
   17b80:	bcs	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17b84:	add	r3, r2, #4
   17b88:	cmp	ip, r3
   17b8c:	movcc	r0, #15
   17b90:	bcc	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17b94:	tst	r2, #3
   17b98:	movne	r0, #15
   17b9c:	bne	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17ba0:	str	r2, [sp, #20]
   17ba4:	ldr	r3, [r0, r2]
   17ba8:	subs	r3, r2, r3
   17bac:	movmi	r0, #29
   17bb0:	bmi	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17bb4:	tst	r3, #1
   17bb8:	movne	r0, #29
   17bbc:	bne	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17bc0:	add	r1, r3, #2
   17bc4:	cmp	ip, r1
   17bc8:	movcc	r0, #27
   17bcc:	bcc	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17bd0:	add	r4, r0, r3
   17bd4:	ldrh	lr, [r0, r3]
   17bd8:	strh	lr, [sp, #26]
   17bdc:	add	r3, lr, r3
   17be0:	cmp	ip, r3
   17be4:	movcc	r0, #30
   17be8:	bcc	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17bec:	tst	lr, #1
   17bf0:	movne	r0, #30
   17bf4:	bne	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17bf8:	cmp	lr, #3
   17bfc:	movls	r0, #28
   17c00:	bls	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17c04:	ldrh	r3, [r0, r1]
   17c08:	strh	r3, [sp, #24]
   17c0c:	sub	r2, ip, r2
   17c10:	cmp	r2, r3
   17c14:	movcc	r0, #20
   17c18:	bcc	17b48 <flatcc_verify_table_field@@Base+0x2c>
   17c1c:	str	r4, [sp, #16]
   17c20:	str	r0, [sp, #4]
   17c24:	str	ip, [sp, #8]
   17c28:	add	r0, sp, #4
   17c2c:	blx	r5
   17c30:	b	17b48 <flatcc_verify_table_field@@Base+0x2c>

00017c34 <flatcc_verify_table_vector_field@@Base>:
   17c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c38:	sub	sp, sp, #44	; 0x2c
   17c3c:	mov	r5, r0
   17c40:	str	r3, [sp, #4]
   17c44:	add	r3, sp, #36	; 0x24
   17c48:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   17c4c:	cmp	r0, #0
   17c50:	bne	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17c54:	ldr	r3, [sp, #36]	; 0x24
   17c58:	cmp	r3, #0
   17c5c:	bne	17c68 <flatcc_verify_table_vector_field@@Base+0x34>
   17c60:	add	sp, sp, #44	; 0x2c
   17c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c68:	ldr	r4, [r5, #8]
   17c6c:	cmp	r4, #0
   17c70:	movle	r0, #3
   17c74:	ble	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17c78:	ldr	fp, [r5]
   17c7c:	ldr	r9, [r5, #4]
   17c80:	ldr	r2, [fp, r3]
   17c84:	add	r2, r3, r2
   17c88:	cmp	r3, r2
   17c8c:	movcs	r0, #16
   17c90:	bcs	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17c94:	add	r6, r2, #4
   17c98:	cmp	r9, r6
   17c9c:	bcc	17ca8 <flatcc_verify_table_vector_field@@Base+0x74>
   17ca0:	ands	r7, r6, #3
   17ca4:	beq	17d18 <flatcc_verify_table_vector_field@@Base+0xe4>
   17ca8:	add	r3, r2, #4
   17cac:	cmp	r9, r3
   17cb0:	movcc	r0, #16
   17cb4:	bcc	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17cb8:	tst	r3, #3
   17cbc:	movne	r0, #16
   17cc0:	bne	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17cc4:	ldr	r3, [fp, r2]
   17cc8:	cmn	r3, #-1073741823	; 0xc0000001
   17ccc:	movhi	r0, #25
   17cd0:	bhi	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17cd4:	lsl	r3, r3, #2
   17cd8:	sub	r1, r9, #4
   17cdc:	sub	r2, r1, r2
   17ce0:	cmp	r3, r2
   17ce4:	movhi	r0, #26
   17ce8:	b	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17cec:	add	r3, r3, r6
   17cf0:	cmp	r3, r6
   17cf4:	bls	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17cf8:	add	r2, r3, #4
   17cfc:	cmp	r9, r2
   17d00:	bcc	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17d04:	tst	r3, #3
   17d08:	beq	17d48 <flatcc_verify_table_vector_field@@Base+0x114>
   17d0c:	ldr	r3, [r8]
   17d10:	str	r4, [sp, #20]
   17d14:	b	17e00 <flatcc_verify_table_vector_field@@Base+0x1cc>
   17d18:	ldr	sl, [fp, r2]
   17d1c:	cmn	sl, #-1073741823	; 0xc0000001
   17d20:	bhi	17ca8 <flatcc_verify_table_vector_field@@Base+0x74>
   17d24:	sub	r3, r9, #4
   17d28:	sub	r3, r3, r2
   17d2c:	cmp	r3, sl, lsl #2
   17d30:	bcc	17ca8 <flatcc_verify_table_vector_field@@Base+0x74>
   17d34:	cmp	sl, #0
   17d38:	beq	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17d3c:	add	r5, fp, r6
   17d40:	sub	r4, r4, #2
   17d44:	b	17dd8 <flatcc_verify_table_vector_field@@Base+0x1a4>
   17d48:	str	r3, [sp, #28]
   17d4c:	ldr	r2, [fp, r3]
   17d50:	subs	r2, r3, r2
   17d54:	bmi	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17d58:	tst	r2, #1
   17d5c:	bne	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17d60:	add	r1, r2, #2
   17d64:	cmp	r9, r1
   17d68:	bcc	17dec <flatcc_verify_table_vector_field@@Base+0x1b8>
   17d6c:	add	ip, fp, r2
   17d70:	ldrh	r0, [fp, r2]
   17d74:	strh	r0, [sp, #34]	; 0x22
   17d78:	add	r2, r0, r2
   17d7c:	cmp	r9, r2
   17d80:	bcc	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17d84:	tst	r0, #1
   17d88:	bne	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17d8c:	cmp	r0, #3
   17d90:	bls	17dec <flatcc_verify_table_vector_field@@Base+0x1b8>
   17d94:	ldrh	r2, [fp, r1]
   17d98:	strh	r2, [sp, #32]
   17d9c:	sub	r3, r9, r3
   17da0:	cmp	r3, r2
   17da4:	bcc	17dec <flatcc_verify_table_vector_field@@Base+0x1b8>
   17da8:	str	ip, [sp, #24]
   17dac:	str	fp, [sp, #12]
   17db0:	str	r9, [sp, #16]
   17db4:	add	r0, sp, #12
   17db8:	ldr	r3, [sp, #4]
   17dbc:	blx	r3
   17dc0:	cmp	r0, #0
   17dc4:	bne	17d0c <flatcc_verify_table_vector_field@@Base+0xd8>
   17dc8:	add	r7, r7, #1
   17dcc:	add	r6, r6, #4
   17dd0:	cmp	sl, r7
   17dd4:	beq	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17dd8:	mov	r8, r5
   17ddc:	ldr	r3, [r5], #4
   17de0:	str	r4, [sp, #20]
   17de4:	cmp	r4, #0
   17de8:	bne	17cec <flatcc_verify_table_vector_field@@Base+0xb8>
   17dec:	ldr	r3, [r8]
   17df0:	str	r4, [sp, #20]
   17df4:	cmp	r4, #0
   17df8:	moveq	r0, #3
   17dfc:	beq	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e00:	add	r3, r6, r3
   17e04:	cmp	r6, r3
   17e08:	movcs	r0, #15
   17e0c:	bcs	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e10:	add	r2, r3, #4
   17e14:	cmp	r9, r2
   17e18:	movcc	r0, #15
   17e1c:	bcc	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e20:	tst	r3, #3
   17e24:	movne	r0, #15
   17e28:	bne	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e2c:	str	r3, [sp, #28]
   17e30:	ldr	r2, [fp, r3]
   17e34:	subs	r2, r3, r2
   17e38:	movmi	r0, #29
   17e3c:	bmi	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e40:	tst	r2, #1
   17e44:	movne	r0, #29
   17e48:	bne	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e4c:	add	r0, r2, #2
   17e50:	cmp	r9, r0
   17e54:	movcc	r0, #27
   17e58:	bcc	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e5c:	add	ip, fp, r2
   17e60:	ldrh	r1, [fp, r2]
   17e64:	strh	r1, [sp, #34]	; 0x22
   17e68:	add	r2, r1, r2
   17e6c:	cmp	r9, r2
   17e70:	movcc	r0, #30
   17e74:	bcc	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e78:	tst	r1, #1
   17e7c:	movne	r0, #30
   17e80:	bne	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e84:	cmp	r1, #3
   17e88:	movls	r0, #28
   17e8c:	bls	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17e90:	ldrh	r2, [fp, r0]
   17e94:	strh	r2, [sp, #32]
   17e98:	sub	r3, r9, r3
   17e9c:	cmp	r3, r2
   17ea0:	movcc	r0, #20
   17ea4:	bcc	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>
   17ea8:	str	ip, [sp, #24]
   17eac:	str	fp, [sp, #12]
   17eb0:	str	r9, [sp, #16]
   17eb4:	add	r0, sp, #12
   17eb8:	ldr	r3, [sp, #4]
   17ebc:	blx	r3
   17ec0:	b	17c60 <flatcc_verify_table_vector_field@@Base+0x2c>

00017ec4 <flatcc_verify_union_table@@Base>:
   17ec4:	push	{r4, r5, lr}
   17ec8:	sub	sp, sp, #28
   17ecc:	ldr	r4, [r0]
   17ed0:	ldr	lr, [r0, #4]
   17ed4:	ldr	ip, [r0, #16]
   17ed8:	ldr	r2, [r0, #20]
   17edc:	ldr	r3, [r0, #8]
   17ee0:	sub	r3, r3, #1
   17ee4:	str	r3, [sp, #8]
   17ee8:	cmp	r3, #0
   17eec:	moveq	r0, #3
   17ef0:	bne	17efc <flatcc_verify_union_table@@Base+0x38>
   17ef4:	add	sp, sp, #28
   17ef8:	pop	{r4, r5, pc}
   17efc:	add	r3, ip, r2
   17f00:	cmp	ip, r3
   17f04:	movcs	r0, #15
   17f08:	bcs	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f0c:	add	r2, r3, #4
   17f10:	cmp	lr, r2
   17f14:	movcc	r0, #15
   17f18:	bcc	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f1c:	tst	r3, #3
   17f20:	movne	r0, #15
   17f24:	bne	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f28:	str	r3, [sp, #16]
   17f2c:	ldr	r2, [r4, r3]
   17f30:	subs	r2, r3, r2
   17f34:	movmi	r0, #29
   17f38:	bmi	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f3c:	tst	r2, #1
   17f40:	movne	r0, #29
   17f44:	bne	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f48:	add	r0, r2, #2
   17f4c:	cmp	lr, r0
   17f50:	movcc	r0, #27
   17f54:	bcc	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f58:	add	r5, r4, r2
   17f5c:	ldrh	ip, [r4, r2]
   17f60:	strh	ip, [sp, #22]
   17f64:	add	r2, ip, r2
   17f68:	cmp	lr, r2
   17f6c:	movcc	r0, #30
   17f70:	bcc	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f74:	tst	ip, #1
   17f78:	movne	r0, #30
   17f7c:	bne	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f80:	cmp	ip, #3
   17f84:	movls	r0, #28
   17f88:	bls	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17f8c:	ldrh	r2, [r4, r0]
   17f90:	strh	r2, [sp, #20]
   17f94:	sub	r3, lr, r3
   17f98:	cmp	r3, r2
   17f9c:	movcc	r0, #20
   17fa0:	bcc	17ef4 <flatcc_verify_union_table@@Base+0x30>
   17fa4:	str	r5, [sp, #12]
   17fa8:	str	r4, [sp]
   17fac:	str	lr, [sp, #4]
   17fb0:	mov	r0, sp
   17fb4:	blx	r1
   17fb8:	b	17ef4 <flatcc_verify_union_table@@Base+0x30>

00017fbc <flatcc_verify_union_struct@@Base>:
   17fbc:	push	{lr}		; (str lr, [sp, #-4]!)
   17fc0:	ldr	lr, [r0, #4]
   17fc4:	ldr	ip, [r0, #16]
   17fc8:	ldr	r3, [r0, #20]
   17fcc:	cmp	r3, #0
   17fd0:	bne	17fdc <flatcc_verify_union_struct@@Base+0x20>
   17fd4:	mov	r0, #18
   17fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fdc:	add	r3, ip, r3
   17fe0:	cmp	lr, r3
   17fe4:	bcs	17ff0 <flatcc_verify_union_struct@@Base+0x34>
   17fe8:	mov	r0, #18
   17fec:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff0:	adds	r1, r1, r3
   17ff4:	bcc	18000 <flatcc_verify_union_struct@@Base+0x44>
   17ff8:	mov	r0, #10
   17ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   18000:	cmp	lr, r1
   18004:	bcs	18010 <flatcc_verify_union_struct@@Base+0x54>
   18008:	mov	r0, #9
   1800c:	pop	{pc}		; (ldr pc, [sp], #4)
   18010:	sub	r0, r2, #1
   18014:	and	r0, r0, r3
   18018:	cmp	r0, #0
   1801c:	movne	r0, #11
   18020:	moveq	r0, #0
   18024:	pop	{pc}		; (ldr pc, [sp], #4)

00018028 <flatcc_verify_union_string@@Base>:
   18028:	ldr	r2, [r0, #16]
   1802c:	ldr	r3, [r0, #20]
   18030:	add	r3, r2, r3
   18034:	cmp	r2, r3
   18038:	bcs	18074 <flatcc_verify_union_string@@Base+0x4c>
   1803c:	ldr	r2, [r0, #4]
   18040:	add	r1, r3, #4
   18044:	cmp	r2, r1
   18048:	bcc	1807c <flatcc_verify_union_string@@Base+0x54>
   1804c:	tst	r3, #3
   18050:	beq	18084 <flatcc_verify_union_string@@Base+0x5c>
   18054:	mov	r0, #17
   18058:	bx	lr
   1805c:	add	r1, r0, r1
   18060:	ldrb	r0, [r1, r3]
   18064:	cmp	r0, #0
   18068:	movne	r0, #7
   1806c:	moveq	r0, #0
   18070:	bx	lr
   18074:	mov	r0, #17
   18078:	bx	lr
   1807c:	mov	r0, #17
   18080:	bx	lr
   18084:	ldr	r0, [r0]
   18088:	ldr	r3, [r0, r3]
   1808c:	sub	r2, r2, r1
   18090:	add	ip, r3, #1
   18094:	cmp	r2, ip
   18098:	bcs	1805c <flatcc_verify_union_string@@Base+0x34>
   1809c:	mov	r0, #8
   180a0:	bx	lr

000180a4 <flatcc_verify_buffer_header@@Base>:
   180a4:	tst	r0, #3
   180a8:	beq	180b4 <flatcc_verify_buffer_header@@Base+0x10>
   180ac:	mov	r0, #5
   180b0:	bx	lr
   180b4:	cmn	r1, #9
   180b8:	bls	180c4 <flatcc_verify_buffer_header@@Base+0x20>
   180bc:	mov	r0, #6
   180c0:	bx	lr
   180c4:	cmp	r1, #7
   180c8:	bls	18124 <flatcc_verify_buffer_header@@Base+0x80>
   180cc:	cmp	r2, #0
   180d0:	beq	1812c <flatcc_verify_buffer_header@@Base+0x88>
   180d4:	push	{r4, lr}
   180d8:	sub	sp, sp, #8
   180dc:	mov	r1, r2
   180e0:	mov	r4, r0
   180e4:	add	r0, sp, #8
   180e8:	mov	r3, #0
   180ec:	str	r3, [r0, #-4]!
   180f0:	mov	r2, #4
   180f4:	bl	12328 <strncpy@plt>
   180f8:	ldr	r3, [sp, #4]
   180fc:	ldr	r0, [r4, #4]
   18100:	cmp	r3, #0
   18104:	cmpne	r0, r3
   18108:	moveq	r3, #1
   1810c:	movne	r3, #0
   18110:	cmp	r3, #0
   18114:	moveq	r0, #2
   18118:	movne	r0, #0
   1811c:	add	sp, sp, #8
   18120:	pop	{r4, pc}
   18124:	mov	r0, #1
   18128:	bx	lr
   1812c:	mov	r0, #0
   18130:	bx	lr

00018134 <flatcc_verify_typed_buffer_header@@Base>:
   18134:	tst	r0, #3
   18138:	beq	18144 <flatcc_verify_typed_buffer_header@@Base+0x10>
   1813c:	mov	r0, #5
   18140:	bx	lr
   18144:	cmn	r1, #9
   18148:	bls	18154 <flatcc_verify_typed_buffer_header@@Base+0x20>
   1814c:	mov	r0, #6
   18150:	bx	lr
   18154:	cmp	r1, #7
   18158:	bls	18178 <flatcc_verify_typed_buffer_header@@Base+0x44>
   1815c:	cmp	r2, #0
   18160:	beq	18180 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   18164:	ldr	r0, [r0, #4]
   18168:	cmp	r2, r0
   1816c:	movne	r0, #2
   18170:	moveq	r0, #0
   18174:	bx	lr
   18178:	mov	r0, #1
   1817c:	bx	lr
   18180:	mov	r0, #0
   18184:	bx	lr

00018188 <flatcc_verify_struct_as_root@@Base>:
   18188:	push	{r4, r5, r6, r7, r8, lr}
   1818c:	mov	r5, r0
   18190:	mov	r4, r1
   18194:	mov	r7, r2
   18198:	mov	r6, r3
   1819c:	bl	180a4 <flatcc_verify_buffer_header@@Base>
   181a0:	cmp	r0, #0
   181a4:	bne	181cc <flatcc_verify_struct_as_root@@Base+0x44>
   181a8:	ldr	r2, [r5]
   181ac:	clz	r3, r2
   181b0:	lsr	r3, r3, #5
   181b4:	cmp	r4, r2
   181b8:	orrcc	r3, r3, #1
   181bc:	cmp	r3, #0
   181c0:	beq	181e0 <flatcc_verify_struct_as_root@@Base+0x58>
   181c4:	mov	r0, #18
   181c8:	pop	{r4, r5, r6, r7, r8, pc}
   181cc:	mov	r2, r7
   181d0:	mov	r1, r4
   181d4:	mov	r0, r5
   181d8:	bl	180a4 <flatcc_verify_buffer_header@@Base>
   181dc:	pop	{r4, r5, r6, r7, r8, pc}
   181e0:	adds	r6, r6, r2
   181e4:	bcc	181f0 <flatcc_verify_struct_as_root@@Base+0x68>
   181e8:	mov	r0, #10
   181ec:	pop	{r4, r5, r6, r7, r8, pc}
   181f0:	cmp	r4, r6
   181f4:	bcs	18200 <flatcc_verify_struct_as_root@@Base+0x78>
   181f8:	mov	r0, #9
   181fc:	pop	{r4, r5, r6, r7, r8, pc}
   18200:	ldrh	r3, [sp, #24]
   18204:	sub	r3, r3, #1
   18208:	and	r2, r2, r3
   1820c:	cmp	r2, #0
   18210:	movne	r0, #11
   18214:	pop	{r4, r5, r6, r7, r8, pc}

00018218 <flatcc_verify_struct_as_typed_root@@Base>:
   18218:	push	{r4, r5, r6, lr}
   1821c:	mov	r5, r0
   18220:	mov	r4, r1
   18224:	mov	r6, r3
   18228:	bl	18134 <flatcc_verify_typed_buffer_header@@Base>
   1822c:	cmp	r0, #0
   18230:	popne	{r4, r5, r6, pc}
   18234:	ldr	r2, [r5]
   18238:	clz	r3, r2
   1823c:	lsr	r3, r3, #5
   18240:	cmp	r4, r2
   18244:	orrcc	r3, r3, #1
   18248:	cmp	r3, #0
   1824c:	beq	18258 <flatcc_verify_struct_as_typed_root@@Base+0x40>
   18250:	mov	r0, #18
   18254:	pop	{r4, r5, r6, pc}
   18258:	adds	r6, r6, r2
   1825c:	bcc	18268 <flatcc_verify_struct_as_typed_root@@Base+0x50>
   18260:	mov	r0, #10
   18264:	pop	{r4, r5, r6, pc}
   18268:	cmp	r4, r6
   1826c:	bcs	18278 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   18270:	mov	r0, #9
   18274:	pop	{r4, r5, r6, pc}
   18278:	ldrh	r3, [sp, #16]
   1827c:	sub	r3, r3, #1
   18280:	and	r2, r2, r3
   18284:	cmp	r2, #0
   18288:	movne	r0, #11
   1828c:	pop	{r4, r5, r6, pc}

00018290 <flatcc_verify_table_as_root@@Base>:
   18290:	push	{r4, r5, r6, r7, lr}
   18294:	sub	sp, sp, #28
   18298:	mov	r4, r0
   1829c:	mov	r5, r1
   182a0:	mov	r6, r2
   182a4:	mov	r7, r3
   182a8:	bl	180a4 <flatcc_verify_buffer_header@@Base>
   182ac:	cmp	r0, #0
   182b0:	bne	1837c <flatcc_verify_table_as_root@@Base+0xec>
   182b4:	ldr	r3, [r4]
   182b8:	mov	r2, #99	; 0x63
   182bc:	str	r2, [sp, #8]
   182c0:	cmp	r3, #0
   182c4:	moveq	r0, #15
   182c8:	beq	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   182cc:	add	r2, r3, #4
   182d0:	cmp	r5, r2
   182d4:	movcc	r0, #15
   182d8:	bcc	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   182dc:	tst	r3, #3
   182e0:	movne	r0, #15
   182e4:	bne	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   182e8:	str	r3, [sp, #16]
   182ec:	ldr	r2, [r4, r3]
   182f0:	subs	r2, r3, r2
   182f4:	movmi	r0, #29
   182f8:	bmi	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   182fc:	tst	r2, #1
   18300:	movne	r0, #29
   18304:	bne	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   18308:	add	r1, r2, #2
   1830c:	cmp	r5, r1
   18310:	movcc	r0, #27
   18314:	bcc	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   18318:	add	ip, r4, r2
   1831c:	ldrh	r0, [r4, r2]
   18320:	strh	r0, [sp, #22]
   18324:	add	r2, r0, r2
   18328:	cmp	r5, r2
   1832c:	movcc	r0, #30
   18330:	bcc	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   18334:	tst	r0, #1
   18338:	movne	r0, #30
   1833c:	bne	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   18340:	cmp	r0, #3
   18344:	movls	r0, #28
   18348:	bls	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   1834c:	ldrh	r2, [r4, r1]
   18350:	strh	r2, [sp, #20]
   18354:	sub	r3, r5, r3
   18358:	cmp	r3, r2
   1835c:	movcc	r0, #20
   18360:	bcc	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   18364:	str	ip, [sp, #12]
   18368:	str	r4, [sp]
   1836c:	str	r5, [sp, #4]
   18370:	mov	r0, sp
   18374:	blx	r7
   18378:	b	1838c <flatcc_verify_table_as_root@@Base+0xfc>
   1837c:	mov	r2, r6
   18380:	mov	r1, r5
   18384:	mov	r0, r4
   18388:	bl	180a4 <flatcc_verify_buffer_header@@Base>
   1838c:	add	sp, sp, #28
   18390:	pop	{r4, r5, r6, r7, pc}

00018394 <flatcc_verify_table_as_typed_root@@Base>:
   18394:	push	{r4, r5, r6, lr}
   18398:	sub	sp, sp, #24
   1839c:	mov	r4, r0
   183a0:	mov	r5, r1
   183a4:	mov	r6, r3
   183a8:	bl	18134 <flatcc_verify_typed_buffer_header@@Base>
   183ac:	cmp	r0, #0
   183b0:	beq	183bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   183b4:	add	sp, sp, #24
   183b8:	pop	{r4, r5, r6, pc}
   183bc:	ldr	r3, [r4]
   183c0:	mov	r2, #99	; 0x63
   183c4:	str	r2, [sp, #8]
   183c8:	cmp	r3, #0
   183cc:	moveq	r0, #15
   183d0:	beq	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   183d4:	add	r2, r3, #4
   183d8:	cmp	r5, r2
   183dc:	movcc	r0, #15
   183e0:	bcc	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   183e4:	tst	r3, #3
   183e8:	movne	r0, #15
   183ec:	bne	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   183f0:	str	r3, [sp, #16]
   183f4:	ldr	r2, [r4, r3]
   183f8:	subs	r2, r3, r2
   183fc:	movmi	r0, #29
   18400:	bmi	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   18404:	tst	r2, #1
   18408:	movne	r0, #29
   1840c:	bne	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   18410:	add	r1, r2, #2
   18414:	cmp	r5, r1
   18418:	movcc	r0, #27
   1841c:	bcc	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   18420:	add	ip, r4, r2
   18424:	ldrh	r0, [r4, r2]
   18428:	strh	r0, [sp, #22]
   1842c:	add	r2, r0, r2
   18430:	cmp	r5, r2
   18434:	movcc	r0, #30
   18438:	bcc	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   1843c:	tst	r0, #1
   18440:	movne	r0, #30
   18444:	bne	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   18448:	cmp	r0, #3
   1844c:	movls	r0, #28
   18450:	bls	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   18454:	ldrh	r2, [r4, r1]
   18458:	strh	r2, [sp, #20]
   1845c:	sub	r3, r5, r3
   18460:	cmp	r3, r2
   18464:	movcc	r0, #20
   18468:	bcc	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>
   1846c:	str	ip, [sp, #12]
   18470:	str	r4, [sp]
   18474:	str	r5, [sp, #4]
   18478:	mov	r0, sp
   1847c:	blx	r6
   18480:	b	183b4 <flatcc_verify_table_as_typed_root@@Base+0x20>

00018484 <flatcc_verify_struct_as_nested_root@@Base>:
   18484:	push	{r4, r5, r6, r7, r8, lr}
   18488:	sub	sp, sp, #8
   1848c:	mov	r5, r0
   18490:	mov	r4, r1
   18494:	mov	r8, r2
   18498:	mov	r7, r3
   1849c:	ldrh	r6, [sp, #36]	; 0x24
   184a0:	mvn	r3, #0
   184a4:	str	r3, [sp, #4]
   184a8:	mov	r3, #1
   184ac:	str	r3, [sp]
   184b0:	mov	r3, r6
   184b4:	bl	17924 <flatcc_verify_vector_field@@Base>
   184b8:	cmp	r0, #0
   184bc:	bne	18524 <flatcc_verify_struct_as_nested_root@@Base+0xa0>
   184c0:	add	r4, r4, #2
   184c4:	lsl	r4, r4, #1
   184c8:	uxth	r4, r4
   184cc:	ldrh	r3, [r5, #22]
   184d0:	cmp	r3, r4
   184d4:	bls	1851c <flatcc_verify_struct_as_nested_root@@Base+0x98>
   184d8:	ldr	r3, [r5, #12]
   184dc:	ldrh	r3, [r3, r4]
   184e0:	cmp	r3, #0
   184e4:	beq	1851c <flatcc_verify_struct_as_nested_root@@Base+0x98>
   184e8:	ldr	r2, [r5, #16]
   184ec:	add	r3, r3, r2
   184f0:	ldr	r2, [r5]
   184f4:	adds	r1, r2, r3
   184f8:	beq	1851c <flatcc_verify_struct_as_nested_root@@Base+0x98>
   184fc:	ldr	r3, [r2, r3]
   18500:	add	r0, r1, r3
   18504:	ldr	r1, [r1, r3]
   18508:	str	r6, [sp]
   1850c:	ldr	r3, [sp, #32]
   18510:	mov	r2, r7
   18514:	add	r0, r0, #4
   18518:	bl	18188 <flatcc_verify_struct_as_root@@Base>
   1851c:	add	sp, sp, #8
   18520:	pop	{r4, r5, r6, r7, r8, pc}
   18524:	mvn	r3, #0
   18528:	str	r3, [sp, #4]
   1852c:	mov	r3, #1
   18530:	str	r3, [sp]
   18534:	mov	r3, r6
   18538:	mov	r2, r8
   1853c:	mov	r1, r4
   18540:	mov	r0, r5
   18544:	bl	17924 <flatcc_verify_vector_field@@Base>
   18548:	b	1851c <flatcc_verify_struct_as_nested_root@@Base+0x98>

0001854c <flatcc_verify_table_as_nested_root@@Base>:
   1854c:	push	{r4, r5, r6, r7, r8, lr}
   18550:	sub	sp, sp, #32
   18554:	mov	r5, r0
   18558:	mov	r4, r1
   1855c:	mov	r8, r2
   18560:	mov	r6, r3
   18564:	ldrh	r7, [sp, #56]	; 0x38
   18568:	mvn	r3, #0
   1856c:	str	r3, [sp, #4]
   18570:	mov	r3, #1
   18574:	str	r3, [sp]
   18578:	mov	r3, r7
   1857c:	bl	17924 <flatcc_verify_vector_field@@Base>
   18580:	cmp	r0, #0
   18584:	bne	18610 <flatcc_verify_table_as_nested_root@@Base+0xc4>
   18588:	add	r4, r4, #2
   1858c:	lsl	r4, r4, #1
   18590:	uxth	r4, r4
   18594:	ldrh	r3, [r5, #22]
   18598:	cmp	r3, r4
   1859c:	bls	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   185a0:	ldr	r3, [r5, #12]
   185a4:	ldrh	r3, [r3, r4]
   185a8:	cmp	r3, #0
   185ac:	beq	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   185b0:	ldr	r2, [r5, #16]
   185b4:	add	r3, r3, r2
   185b8:	ldr	r2, [r5]
   185bc:	adds	r1, r2, r3
   185c0:	beq	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   185c4:	ldr	r3, [r2, r3]
   185c8:	add	r4, r1, r3
   185cc:	ldr	r7, [r1, r3]
   185d0:	add	r8, r4, #4
   185d4:	mov	r2, r6
   185d8:	mov	r1, r7
   185dc:	mov	r0, r8
   185e0:	bl	180a4 <flatcc_verify_buffer_header@@Base>
   185e4:	cmp	r0, #0
   185e8:	bne	18638 <flatcc_verify_table_as_nested_root@@Base+0xec>
   185ec:	ldr	r2, [r4, #4]
   185f0:	ldr	r3, [r5, #8]
   185f4:	sub	r3, r3, #1
   185f8:	str	r3, [sp, #16]
   185fc:	cmp	r3, #0
   18600:	moveq	r0, #3
   18604:	bne	1864c <flatcc_verify_table_as_nested_root@@Base+0x100>
   18608:	add	sp, sp, #32
   1860c:	pop	{r4, r5, r6, r7, r8, pc}
   18610:	mvn	r3, #0
   18614:	str	r3, [sp, #4]
   18618:	mov	r3, #1
   1861c:	str	r3, [sp]
   18620:	mov	r3, r7
   18624:	mov	r2, r8
   18628:	mov	r1, r4
   1862c:	mov	r0, r5
   18630:	bl	17924 <flatcc_verify_vector_field@@Base>
   18634:	b	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18638:	mov	r2, r6
   1863c:	mov	r1, r7
   18640:	mov	r0, r8
   18644:	bl	180a4 <flatcc_verify_buffer_header@@Base>
   18648:	b	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1864c:	cmp	r2, #0
   18650:	moveq	r0, #15
   18654:	beq	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18658:	add	r3, r2, #4
   1865c:	cmp	r7, r3
   18660:	movcc	r0, #15
   18664:	bcc	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18668:	tst	r2, #3
   1866c:	movne	r0, #15
   18670:	bne	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18674:	str	r2, [sp, #24]
   18678:	ldr	r3, [r8, r2]
   1867c:	subs	r3, r2, r3
   18680:	movmi	r0, #29
   18684:	bmi	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18688:	tst	r3, #1
   1868c:	movne	r0, #29
   18690:	bne	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18694:	add	r1, r3, #2
   18698:	cmp	r7, r1
   1869c:	movcc	r0, #27
   186a0:	bcc	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   186a4:	add	ip, r8, r3
   186a8:	ldrh	r0, [r8, r3]
   186ac:	strh	r0, [sp, #30]
   186b0:	add	r3, r0, r3
   186b4:	cmp	r7, r3
   186b8:	movcc	r0, #30
   186bc:	bcc	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   186c0:	tst	r0, #1
   186c4:	movne	r0, #30
   186c8:	bne	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   186cc:	cmp	r0, #3
   186d0:	movls	r0, #28
   186d4:	bls	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   186d8:	ldrh	r3, [r8, r1]
   186dc:	strh	r3, [sp, #28]
   186e0:	sub	r2, r7, r2
   186e4:	cmp	r2, r3
   186e8:	movcc	r0, #20
   186ec:	bcc	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   186f0:	str	ip, [sp, #20]
   186f4:	str	r8, [sp, #8]
   186f8:	str	r7, [sp, #12]
   186fc:	add	r0, sp, #8
   18700:	ldr	r3, [sp, #60]	; 0x3c
   18704:	blx	r3
   18708:	b	18608 <flatcc_verify_table_as_nested_root@@Base+0xbc>

0001870c <flatcc_verify_union_field@@Base>:
   1870c:	push	{r4, r5, r6, r7, lr}
   18710:	sub	sp, sp, #36	; 0x24
   18714:	sub	ip, r1, #1
   18718:	uxth	ip, ip
   1871c:	add	ip, ip, #2
   18720:	lsl	ip, ip, #1
   18724:	uxth	ip, ip
   18728:	ldrh	lr, [r0, #22]
   1872c:	cmp	lr, ip
   18730:	bls	18760 <flatcc_verify_union_field@@Base+0x54>
   18734:	ldr	r6, [r0, #12]
   18738:	ldrh	ip, [r6, ip]
   1873c:	cmp	ip, #0
   18740:	beq	18760 <flatcc_verify_union_field@@Base+0x54>
   18744:	add	r4, ip, #1
   18748:	ldrh	r5, [r0, #20]
   1874c:	cmp	r4, r5
   18750:	movhi	r0, #13
   18754:	bls	187cc <flatcc_verify_union_field@@Base+0xc0>
   18758:	add	sp, sp, #36	; 0x24
   1875c:	pop	{r4, r5, r6, r7, pc}
   18760:	add	r1, r1, #2
   18764:	lsl	r1, r1, #1
   18768:	uxth	r1, r1
   1876c:	cmp	lr, r1
   18770:	bls	18788 <flatcc_verify_union_field@@Base+0x7c>
   18774:	ldr	r3, [r0, #12]
   18778:	ldrh	r3, [r3, r1]
   1877c:	cmp	r3, #0
   18780:	movne	r0, #23
   18784:	bne	18758 <flatcc_verify_union_field@@Base+0x4c>
   18788:	cmp	r2, #0
   1878c:	moveq	r0, r2
   18790:	movne	r0, #21
   18794:	b	18758 <flatcc_verify_union_field@@Base+0x4c>
   18798:	ldr	lr, [r0, #16]
   1879c:	add	ip, ip, lr
   187a0:	add	r5, r7, ip
   187a4:	ldrb	lr, [r7, ip]
   187a8:	ldrh	r4, [r6, r4]
   187ac:	adds	ip, lr, #0
   187b0:	movne	ip, #1
   187b4:	cmp	r4, #0
   187b8:	orreq	ip, ip, #1
   187bc:	cmp	ip, #0
   187c0:	moveq	r0, #24
   187c4:	beq	18758 <flatcc_verify_union_field@@Base+0x4c>
   187c8:	b	187f4 <flatcc_verify_union_field@@Base+0xe8>
   187cc:	ldr	r7, [r0]
   187d0:	add	r4, r1, #2
   187d4:	lsl	r4, r4, #1
   187d8:	uxth	r4, r4
   187dc:	cmp	lr, r4
   187e0:	bhi	18798 <flatcc_verify_union_field@@Base+0x8c>
   187e4:	ldr	lr, [r0, #16]
   187e8:	add	ip, ip, lr
   187ec:	add	r5, r7, ip
   187f0:	ldrb	lr, [r7, ip]
   187f4:	cmp	lr, #0
   187f8:	moveq	r0, #0
   187fc:	beq	18758 <flatcc_verify_union_field@@Base+0x4c>
   18800:	mov	r6, r3
   18804:	mov	r4, r0
   18808:	add	r3, sp, #28
   1880c:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   18810:	cmp	r0, #0
   18814:	bne	18758 <flatcc_verify_union_field@@Base+0x4c>
   18818:	ldr	r3, [sp, #28]
   1881c:	cmp	r3, #0
   18820:	beq	18758 <flatcc_verify_union_field@@Base+0x4c>
   18824:	ldr	r2, [r4]
   18828:	str	r2, [sp, #4]
   1882c:	ldr	r1, [r4, #4]
   18830:	str	r1, [sp, #8]
   18834:	ldr	r1, [r4, #8]
   18838:	str	r1, [sp, #12]
   1883c:	str	r3, [sp, #20]
   18840:	ldr	r3, [r2, r3]
   18844:	str	r3, [sp, #24]
   18848:	ldrb	r3, [r5]
   1884c:	strb	r3, [sp, #16]
   18850:	add	r0, sp, #4
   18854:	blx	r6
   18858:	b	18758 <flatcc_verify_union_field@@Base+0x4c>

0001885c <flatcc_verify_union_vector_field@@Base>:
   1885c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18860:	sub	sp, sp, #40	; 0x28
   18864:	sub	r4, r1, #1
   18868:	uxth	r4, r4
   1886c:	add	ip, r4, #2
   18870:	lsl	ip, ip, #1
   18874:	uxth	r6, ip
   18878:	ldrh	lr, [r0, #22]
   1887c:	cmp	lr, r6
   18880:	bls	189ac <flatcc_verify_union_vector_field@@Base+0x150>
   18884:	ldr	ip, [r0, #12]
   18888:	ldrh	ip, [ip, r6]
   1888c:	cmp	ip, #0
   18890:	beq	189ac <flatcc_verify_union_vector_field@@Base+0x150>
   18894:	mov	r8, r3
   18898:	mov	r9, r2
   1889c:	mov	sl, r1
   188a0:	mov	r5, r0
   188a4:	mvn	r3, #0
   188a8:	str	r3, [sp, #4]
   188ac:	mov	r3, #1
   188b0:	str	r3, [sp]
   188b4:	mov	r1, r4
   188b8:	bl	17924 <flatcc_verify_vector_field@@Base>
   188bc:	subs	r7, r0, #0
   188c0:	bne	189f0 <flatcc_verify_union_vector_field@@Base+0x194>
   188c4:	ldrh	r3, [r5, #22]
   188c8:	cmp	r3, r6
   188cc:	bls	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   188d0:	ldr	r3, [r5, #12]
   188d4:	ldrh	r3, [r3, r6]
   188d8:	cmp	r3, #0
   188dc:	beq	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   188e0:	ldr	r2, [r5, #16]
   188e4:	add	r3, r3, r2
   188e8:	ldr	r2, [r5]
   188ec:	adds	r1, r2, r3
   188f0:	beq	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   188f4:	ldr	r3, [r2, r3]
   188f8:	add	r4, r1, r3
   188fc:	ldr	r6, [r1, r3]
   18900:	add	r3, sp, #36	; 0x24
   18904:	mov	r2, r9
   18908:	mov	r1, sl
   1890c:	mov	r0, r5
   18910:	bl	17534 <flatcc_emitter_copy_buffer@@Base+0xc4>
   18914:	subs	r7, r0, #0
   18918:	bne	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   1891c:	ldr	r3, [sp, #36]	; 0x24
   18920:	cmp	r3, #0
   18924:	beq	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18928:	ldr	r1, [r5, #8]
   1892c:	cmp	r1, #0
   18930:	movle	r7, #3
   18934:	ble	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18938:	ldr	r0, [r5]
   1893c:	ldr	ip, [r5, #4]
   18940:	ldr	r2, [r0, r3]
   18944:	add	r2, r3, r2
   18948:	cmp	r3, r2
   1894c:	movcs	r7, #16
   18950:	bcs	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18954:	add	r5, r2, #4
   18958:	cmp	ip, r5
   1895c:	bcc	18968 <flatcc_verify_union_vector_field@@Base+0x10c>
   18960:	tst	r5, #3
   18964:	beq	18a88 <flatcc_verify_union_vector_field@@Base+0x22c>
   18968:	add	r3, r2, #4
   1896c:	cmp	ip, r3
   18970:	movcc	r7, #16
   18974:	bcc	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18978:	tst	r3, #3
   1897c:	movne	r7, #16
   18980:	bne	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18984:	ldr	r3, [r0, r2]
   18988:	cmn	r3, #-1073741823	; 0xc0000001
   1898c:	movhi	r7, #25
   18990:	bhi	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18994:	sub	ip, ip, #4
   18998:	sub	r2, ip, r2
   1899c:	lsl	r3, r3, #2
   189a0:	cmp	r2, r3
   189a4:	movcc	r7, #26
   189a8:	b	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   189ac:	add	ip, r1, #2
   189b0:	lsl	ip, ip, #1
   189b4:	uxth	ip, ip
   189b8:	cmp	lr, ip
   189bc:	ldrhi	lr, [r0, #12]
   189c0:	ldrhhi	ip, [lr, ip]
   189c4:	movls	ip, #0
   189c8:	clz	ip, ip
   189cc:	lsr	ip, ip, #5
   189d0:	cmp	r2, #0
   189d4:	moveq	ip, #0
   189d8:	cmp	ip, #0
   189dc:	movne	r7, #22
   189e0:	beq	18894 <flatcc_verify_union_vector_field@@Base+0x38>
   189e4:	mov	r0, r7
   189e8:	add	sp, sp, #40	; 0x28
   189ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189f0:	mvn	r3, #0
   189f4:	str	r3, [sp, #4]
   189f8:	mov	r3, #1
   189fc:	str	r3, [sp]
   18a00:	mov	r2, r9
   18a04:	mov	r1, r4
   18a08:	mov	r0, r5
   18a0c:	bl	17924 <flatcc_verify_vector_field@@Base>
   18a10:	mov	r7, r0
   18a14:	b	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18a18:	ldrb	r2, [r4]
   18a1c:	cmp	r2, #0
   18a20:	beq	18a80 <flatcc_verify_union_vector_field@@Base+0x224>
   18a24:	strb	r2, [sp, #24]
   18a28:	str	r5, [sp, #28]
   18a2c:	str	r3, [sp, #32]
   18a30:	add	r0, sp, #12
   18a34:	blx	r8
   18a38:	cmp	r0, #0
   18a3c:	bne	18a70 <flatcc_verify_union_vector_field@@Base+0x214>
   18a40:	add	r5, r5, #4
   18a44:	add	r4, r4, #1
   18a48:	cmp	r4, r9
   18a4c:	beq	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18a50:	ldr	r3, [r6, #4]!
   18a54:	cmp	r3, #0
   18a58:	bne	18a18 <flatcc_verify_union_vector_field@@Base+0x1bc>
   18a5c:	ldrb	r3, [r4]
   18a60:	cmp	r3, #0
   18a64:	beq	18a40 <flatcc_verify_union_vector_field@@Base+0x1e4>
   18a68:	mov	r7, #32
   18a6c:	b	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18a70:	add	r0, sp, #12
   18a74:	blx	r8
   18a78:	mov	r7, r0
   18a7c:	b	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18a80:	mov	r7, #33	; 0x21
   18a84:	b	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18a88:	add	r3, r0, r2
   18a8c:	ldr	lr, [r0, r2]
   18a90:	cmn	lr, #-1073741823	; 0xc0000001
   18a94:	bhi	18968 <flatcc_verify_union_vector_field@@Base+0x10c>
   18a98:	sub	r9, ip, #4
   18a9c:	sub	r9, r9, r2
   18aa0:	cmp	r9, lr, lsl #2
   18aa4:	bcc	18968 <flatcc_verify_union_vector_field@@Base+0x10c>
   18aa8:	cmp	r6, lr
   18aac:	movne	r7, #34	; 0x22
   18ab0:	bne	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18ab4:	str	r0, [sp, #12]
   18ab8:	str	ip, [sp, #16]
   18abc:	sub	r1, r1, #1
   18ac0:	str	r1, [sp, #20]
   18ac4:	cmp	lr, #0
   18ac8:	beq	189e4 <flatcc_verify_union_vector_field@@Base+0x188>
   18acc:	mov	r6, r3
   18ad0:	add	r4, r4, #4
   18ad4:	add	r9, r4, lr
   18ad8:	b	18a50 <flatcc_verify_union_vector_field@@Base+0x1f4>

00018adc <__libc_csu_init@@Base>:
   18adc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ae0:	mov	r7, r0
   18ae4:	ldr	r6, [pc, #72]	; 18b34 <__libc_csu_init@@Base+0x58>
   18ae8:	ldr	r5, [pc, #72]	; 18b38 <__libc_csu_init@@Base+0x5c>
   18aec:	add	r6, pc, r6
   18af0:	add	r5, pc, r5
   18af4:	sub	r6, r6, r5
   18af8:	mov	r8, r1
   18afc:	mov	r9, r2
   18b00:	bl	12290 <free@plt-0x20>
   18b04:	asrs	r6, r6, #2
   18b08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b0c:	mov	r4, #0
   18b10:	add	r4, r4, #1
   18b14:	ldr	r3, [r5], #4
   18b18:	mov	r2, r9
   18b1c:	mov	r1, r8
   18b20:	mov	r0, r7
   18b24:	blx	r3
   18b28:	cmp	r6, r4
   18b2c:	bne	18b10 <__libc_csu_init@@Base+0x34>
   18b30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b34:	andeq	r1, r1, ip, lsl r4
   18b38:	andeq	r1, r1, r4, lsl r4

00018b3c <__libc_csu_fini@@Base>:
   18b3c:	bx	lr

Disassembly of section .fini:

00018b40 <.fini>:
   18b40:	push	{r3, lr}
   18b44:	pop	{r3, pc}
