
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11e08 <__assert_fail@plt+0xa80>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r9, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <strcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <posix_fadvise64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <read@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <fflush@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <wcwidth@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <__memmove_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #102400	; 0x19000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <ferror@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #102400	; 0x19000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #102400	; 0x19000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #102400	; 0x19000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #102400	; 0x19000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <fputc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #102400	; 0x19000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #102400	; 0x19000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <sysconf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #102400	; 0x19000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #102400	; 0x19000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #102400	; 0x19000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <iswcntrl@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #102400	; 0x19000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <rawmemchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #102400	; 0x19000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #102400	; 0x19000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <__fxstat64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #102400	; 0x19000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <sysinfo@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <feof@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <iswspace@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <getpagesize@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <__errno_location@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <setvbuf@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <btowc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <fgetc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <__overflow@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <strrchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <nl_langinfo@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <fopen64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <bindtextdomain@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <strncmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <abort@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <close@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <__assert_fail@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x7c48>:
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	vpush	{d8-d9}
   113a0:	mov	r6, r0
   113a4:	ldr	r0, [r1]
   113a8:	ldr	r9, [pc, #2440]	; 11d38 <__assert_fail@plt+0x9b0>
   113ac:	sub	sp, sp, #316	; 0x13c
   113b0:	mov	r5, #0
   113b4:	str	r1, [sp, #32]
   113b8:	bl	13928 <__assert_fail@plt+0x25a0>
   113bc:	ldr	r1, [pc, #2424]	; 11d3c <__assert_fail@plt+0x9b4>
   113c0:	mov	r0, #6
   113c4:	bl	11310 <setlocale@plt>
   113c8:	ldr	r1, [pc, #2416]	; 11d40 <__assert_fail@plt+0x9b8>
   113cc:	ldr	r0, [pc, #2416]	; 11d44 <__assert_fail@plt+0x9bc>
   113d0:	bl	11340 <bindtextdomain@plt>
   113d4:	ldr	r0, [pc, #2408]	; 11d44 <__assert_fail@plt+0x9bc>
   113d8:	bl	11148 <textdomain@plt>
   113dc:	ldr	r0, [pc, #2404]	; 11d48 <__assert_fail@plt+0x9c0>
   113e0:	bl	19e90 <_obstack_memory_used@@Base+0xaf4>
   113e4:	bl	11274 <getpagesize@plt>
   113e8:	mov	r3, #0
   113ec:	mov	r1, r3
   113f0:	mov	r2, #1
   113f4:	mov	sl, r2
   113f8:	mov	r4, #0
   113fc:	ldr	r8, [pc, #2376]	; 11d4c <__assert_fail@plt+0x9c4>
   11400:	ldr	r7, [pc, #2376]	; 11d50 <__assert_fail@plt+0x9c8>
   11404:	str	r0, [r9, #12]
   11408:	ldr	r0, [pc, #2372]	; 11d54 <__assert_fail@plt+0x9cc>
   1140c:	ldr	r0, [r0]
   11410:	bl	11298 <setvbuf@plt>
   11414:	ldr	r0, [pc, #2364]	; 11d58 <__assert_fail@plt+0x9d0>
   11418:	bl	111d8 <getenv@plt>
   1141c:	mov	r3, #0
   11420:	strd	r4, [r9, #56]	; 0x38
   11424:	strd	r4, [r9, #48]	; 0x30
   11428:	strd	r4, [r9, #40]	; 0x28
   1142c:	strd	r4, [r9, #32]
   11430:	strd	r4, [r9, #24]
   11434:	mov	fp, r3
   11438:	mov	r5, r3
   1143c:	strb	r3, [r9, #10]
   11440:	strb	r3, [r9, #9]
   11444:	strb	r3, [r9, #8]
   11448:	strb	r3, [r9]
   1144c:	strb	r3, [r9, #11]
   11450:	subs	r0, r0, r3
   11454:	movne	r0, #1
   11458:	strb	r0, [r9, #16]
   1145c:	str	r5, [sp]
   11460:	mov	r3, r8
   11464:	mov	r2, r7
   11468:	ldr	r1, [sp, #32]
   1146c:	mov	r0, r6
   11470:	bl	11220 <getopt_long@plt>
   11474:	cmn	r0, #1
   11478:	beq	115b8 <__assert_fail@plt+0x230>
   1147c:	cmp	r0, #108	; 0x6c
   11480:	beq	115b0 <__assert_fail@plt+0x228>
   11484:	bgt	114ac <__assert_fail@plt+0x124>
   11488:	cmn	r0, #2
   1148c:	beq	11530 <__assert_fail@plt+0x1a8>
   11490:	ble	114f0 <__assert_fail@plt+0x168>
   11494:	cmp	r0, #76	; 0x4c
   11498:	beq	114d8 <__assert_fail@plt+0x150>
   1149c:	cmp	r0, #99	; 0x63
   114a0:	bne	115a0 <__assert_fail@plt+0x218>
   114a4:	strb	sl, [r9, #10]
   114a8:	b	1145c <__assert_fail@plt+0xd4>
   114ac:	cmp	r0, #119	; 0x77
   114b0:	beq	115a8 <__assert_fail@plt+0x220>
   114b4:	ble	114e0 <__assert_fail@plt+0x158>
   114b8:	cmp	r0, #256	; 0x100
   114bc:	beq	1145c <__assert_fail@plt+0xd4>
   114c0:	ldr	r3, [pc, #2196]	; 11d5c <__assert_fail@plt+0x9d4>
   114c4:	cmp	r0, r3
   114c8:	bne	115a0 <__assert_fail@plt+0x218>
   114cc:	ldr	r3, [pc, #2188]	; 11d60 <__assert_fail@plt+0x9d8>
   114d0:	ldr	fp, [r3]
   114d4:	b	1145c <__assert_fail@plt+0xd4>
   114d8:	strb	sl, [r9, #11]
   114dc:	b	1145c <__assert_fail@plt+0xd4>
   114e0:	cmp	r0, #109	; 0x6d
   114e4:	bne	115a0 <__assert_fail@plt+0x218>
   114e8:	strb	sl, [r9, #9]
   114ec:	b	1145c <__assert_fail@plt+0xd4>
   114f0:	cmn	r0, #3
   114f4:	bne	115a0 <__assert_fail@plt+0x218>
   114f8:	ldr	r3, [pc, #2148]	; 11d64 <__assert_fail@plt+0x9dc>
   114fc:	ldr	r0, [pc, #2128]	; 11d54 <__assert_fail@plt+0x9cc>
   11500:	ldr	r1, [pc, #2144]	; 11d68 <__assert_fail@plt+0x9e0>
   11504:	ldr	r2, [pc, #2144]	; 11d6c <__assert_fail@plt+0x9e4>
   11508:	str	r5, [sp, #8]
   1150c:	ldr	r0, [r0]
   11510:	ldr	r3, [r3]
   11514:	str	r1, [sp, #4]
   11518:	str	r2, [sp]
   1151c:	ldr	r1, [pc, #2124]	; 11d70 <__assert_fail@plt+0x9e8>
   11520:	ldr	r2, [pc, #2124]	; 11d74 <__assert_fail@plt+0x9ec>
   11524:	bl	18548 <__assert_fail@plt+0x71c0>
   11528:	mov	r0, #0
   1152c:	bl	11238 <exit@plt>
   11530:	mov	r0, #0
   11534:	bl	12e6c <__assert_fail@plt+0x1ae4>
   11538:	mov	r2, #5
   1153c:	ldr	r1, [pc, #2100]	; 11d78 <__assert_fail@plt+0x9f0>
   11540:	mov	r0, #0
   11544:	bl	11124 <dcgettext@plt>
   11548:	ldr	r3, [r5]
   1154c:	ldr	r2, [sp, #32]
   11550:	ldr	r1, [r2, r3, lsl #2]
   11554:	mov	r6, r0
   11558:	mov	r0, #4
   1155c:	bl	15e84 <__assert_fail@plt+0x4afc>
   11560:	mov	r1, #0
   11564:	mov	r2, r6
   11568:	mov	r3, r0
   1156c:	mov	r0, r1
   11570:	bl	111c0 <error@plt>
   11574:	ldr	r3, [pc, #2048]	; 11d7c <__assert_fail@plt+0x9f4>
   11578:	mov	r2, #5
   1157c:	ldr	r1, [pc, #2044]	; 11d80 <__assert_fail@plt+0x9f8>
   11580:	mov	r0, #0
   11584:	ldr	r4, [r3]
   11588:	bl	11124 <dcgettext@plt>
   1158c:	ldr	r2, [pc, #2032]	; 11d84 <__assert_fail@plt+0x9fc>
   11590:	mov	r1, #1
   11594:	mov	r3, r0
   11598:	mov	r0, r4
   1159c:	bl	112e0 <__fprintf_chk@plt>
   115a0:	mov	r0, #1
   115a4:	bl	12e6c <__assert_fail@plt+0x1ae4>
   115a8:	strb	sl, [r9, #8]
   115ac:	b	1145c <__assert_fail@plt+0xd4>
   115b0:	strb	sl, [r9]
   115b4:	b	1145c <__assert_fail@plt+0xd4>
   115b8:	ldrb	r3, [r9]
   115bc:	cmp	r3, #0
   115c0:	bne	11600 <__assert_fail@plt+0x278>
   115c4:	ldrb	r3, [r9, #8]
   115c8:	cmp	r3, #0
   115cc:	bne	11600 <__assert_fail@plt+0x278>
   115d0:	ldrb	r3, [r9, #9]
   115d4:	cmp	r3, #0
   115d8:	bne	11600 <__assert_fail@plt+0x278>
   115dc:	ldrb	r3, [r9, #10]
   115e0:	cmp	r3, #0
   115e4:	bne	11600 <__assert_fail@plt+0x278>
   115e8:	ldrb	r3, [r9, #11]
   115ec:	cmp	r3, #0
   115f0:	moveq	r3, #1
   115f4:	strbeq	r3, [r9, #10]
   115f8:	strbeq	r3, [r9, #8]
   115fc:	strbeq	r3, [r9]
   11600:	cmp	fp, #0
   11604:	beq	11c04 <__assert_fail@plt+0x87c>
   11608:	ldr	r5, [pc, #1912]	; 11d88 <__assert_fail@plt+0xa00>
   1160c:	ldr	r3, [r5]
   11610:	cmp	r6, r3
   11614:	bgt	11538 <__assert_fail@plt+0x1b0>
   11618:	ldr	r1, [pc, #1900]	; 11d8c <__assert_fail@plt+0xa04>
   1161c:	mov	r0, fp
   11620:	bl	11088 <strcmp@plt>
   11624:	cmp	r0, #0
   11628:	bne	11798 <__assert_fail@plt+0x410>
   1162c:	ldr	r3, [pc, #1884]	; 11d90 <__assert_fail@plt+0xa08>
   11630:	ldr	r4, [r3]
   11634:	mov	r0, r4
   11638:	bl	112d4 <fileno@plt>
   1163c:	add	r2, sp, #64	; 0x40
   11640:	mov	r1, r0
   11644:	mov	r0, #3
   11648:	bl	11178 <__fxstat64@plt>
   1164c:	cmp	r0, #0
   11650:	bne	11664 <__assert_fail@plt+0x2dc>
   11654:	ldr	r3, [sp, #80]	; 0x50
   11658:	and	r3, r3, #61440	; 0xf000
   1165c:	cmp	r3, #32768	; 0x8000
   11660:	beq	11c48 <__assert_fail@plt+0x8c0>
   11664:	mov	r3, #0
   11668:	mov	r0, r4
   1166c:	mov	r6, r3
   11670:	str	r3, [sp, #48]	; 0x30
   11674:	bl	131b4 <__assert_fail@plt+0x1e2c>
   11678:	mov	r4, r6
   1167c:	str	r0, [sp, #32]
   11680:	ldr	r3, [sp, #32]
   11684:	cmp	r3, #0
   11688:	beq	11b24 <__assert_fail@plt+0x79c>
   1168c:	cmp	r6, #0
   11690:	bne	11960 <__assert_fail@plt+0x5d8>
   11694:	mov	r1, #112	; 0x70
   11698:	mov	r0, #1
   1169c:	bl	18814 <__assert_fail@plt+0x748c>
   116a0:	mov	r7, #1
   116a4:	str	r0, [sp, #36]	; 0x24
   116a8:	str	r7, [r0]
   116ac:	mov	r4, #1
   116b0:	ldr	sl, [pc, #1748]	; 11d8c <__assert_fail@plt+0xa04>
   116b4:	mov	r8, #0
   116b8:	str	r7, [r9, #4]
   116bc:	b	11734 <__assert_fail@plt+0x3ac>
   116c0:	ldrb	r3, [r7]
   116c4:	cmp	r3, #0
   116c8:	beq	11828 <__assert_fail@plt+0x4a0>
   116cc:	cmp	r6, #0
   116d0:	movne	r5, r8
   116d4:	moveq	r5, #0
   116d8:	ldr	r3, [sp, #36]	; 0x24
   116dc:	mov	r1, sl
   116e0:	mov	r0, r7
   116e4:	add	r5, r3, r5
   116e8:	bl	11088 <strcmp@plt>
   116ec:	cmp	r0, #0
   116f0:	bne	1187c <__assert_fail@plt+0x4f4>
   116f4:	mvn	r2, #0
   116f8:	mvn	r3, #0
   116fc:	mov	r1, r7
   11700:	strd	r2, [sp]
   11704:	mov	r2, r5
   11708:	mov	r3, #1
   1170c:	strb	r3, [r9, #68]	; 0x44
   11710:	bl	120d8 <__assert_fail@plt+0xd50>
   11714:	mov	r5, r0
   11718:	and	r4, r4, r5
   1171c:	uxtb	r4, r4
   11720:	cmp	r6, #0
   11724:	add	r8, r8, #112	; 0x70
   11728:	ldreq	r3, [sp, #36]	; 0x24
   1172c:	moveq	r2, #1
   11730:	streq	r2, [r3]
   11734:	add	r1, sp, #64	; 0x40
   11738:	ldr	r0, [sp, #32]
   1173c:	bl	131e8 <__assert_fail@plt+0x1e60>
   11740:	subs	r7, r0, #0
   11744:	beq	11930 <__assert_fail@plt+0x5a8>
   11748:	cmp	fp, #0
   1174c:	beq	118f8 <__assert_fail@plt+0x570>
   11750:	mov	r1, sl
   11754:	mov	r0, fp
   11758:	bl	11088 <strcmp@plt>
   1175c:	cmp	r0, #0
   11760:	bne	116c0 <__assert_fail@plt+0x338>
   11764:	mov	r1, sl
   11768:	mov	r0, r7
   1176c:	bl	11088 <strcmp@plt>
   11770:	subs	r5, r0, #0
   11774:	beq	117e8 <__assert_fail@plt+0x460>
   11778:	ldrb	r3, [r7]
   1177c:	cmp	r3, #0
   11780:	beq	11828 <__assert_fail@plt+0x4a0>
   11784:	cmp	r6, #0
   11788:	ldreq	r5, [sp, #36]	; 0x24
   1178c:	beq	1187c <__assert_fail@plt+0x4f4>
   11790:	mov	r5, r8
   11794:	b	116d8 <__assert_fail@plt+0x350>
   11798:	ldr	r1, [pc, #1524]	; 11d94 <__assert_fail@plt+0xa0c>
   1179c:	mov	r0, fp
   117a0:	bl	11334 <fopen64@plt>
   117a4:	subs	r4, r0, #0
   117a8:	bne	11634 <__assert_fail@plt+0x2ac>
   117ac:	bl	11280 <__errno_location@plt>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #1500]	; 11d98 <__assert_fail@plt+0xa10>
   117b8:	ldr	r5, [r0]
   117bc:	mov	r0, r4
   117c0:	bl	11124 <dcgettext@plt>
   117c4:	mov	r1, fp
   117c8:	mov	r4, r0
   117cc:	mov	r0, #4
   117d0:	bl	15e84 <__assert_fail@plt+0x4afc>
   117d4:	mov	r2, r4
   117d8:	mov	r1, r5
   117dc:	mov	r3, r0
   117e0:	mov	r0, #1
   117e4:	bl	111c0 <error@plt>
   117e8:	mov	r2, #5
   117ec:	ldr	r1, [pc, #1448]	; 11d9c <__assert_fail@plt+0xa14>
   117f0:	bl	11124 <dcgettext@plt>
   117f4:	mov	r1, r7
   117f8:	mov	r4, r0
   117fc:	mov	r0, #4
   11800:	bl	15e84 <__assert_fail@plt+0x4afc>
   11804:	mov	r2, r4
   11808:	mov	r1, r5
   1180c:	mov	r3, r0
   11810:	mov	r0, r5
   11814:	bl	111c0 <error@plt>
   11818:	ldrb	r3, [r7]
   1181c:	cmp	r3, #0
   11820:	movne	r4, r5
   11824:	bne	11720 <__assert_fail@plt+0x398>
   11828:	ldr	r0, [sp, #32]
   1182c:	bl	13284 <__assert_fail@plt+0x1efc>
   11830:	mov	r2, fp
   11834:	mov	r1, #3
   11838:	mov	r5, r0
   1183c:	mov	r0, #0
   11840:	bl	16900 <__assert_fail@plt+0x5578>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #1360]	; 11da0 <__assert_fail@plt+0xa18>
   1184c:	mov	r4, r0
   11850:	mov	r0, #0
   11854:	bl	11124 <dcgettext@plt>
   11858:	mov	r1, #0
   1185c:	mov	r3, r4
   11860:	str	r5, [sp]
   11864:	ldr	r2, [pc, #1336]	; 11da4 <__assert_fail@plt+0xa1c>
   11868:	mov	r4, r1
   1186c:	str	r0, [sp, #4]
   11870:	mov	r0, r1
   11874:	bl	111c0 <error@plt>
   11878:	b	11720 <__assert_fail@plt+0x398>
   1187c:	mov	r1, #0
   11880:	mov	r0, r7
   11884:	bl	111cc <open64@plt>
   11888:	cmn	r0, #1
   1188c:	beq	118c4 <__assert_fail@plt+0x53c>
   11890:	mov	r3, #0
   11894:	mov	r2, #0
   11898:	mov	r1, r7
   1189c:	strd	r2, [sp]
   118a0:	mov	r2, r5
   118a4:	str	r0, [sp, #40]	; 0x28
   118a8:	bl	120d8 <__assert_fail@plt+0xd50>
   118ac:	ldr	r3, [sp, #40]	; 0x28
   118b0:	mov	r5, r0
   118b4:	mov	r0, r3
   118b8:	bl	1137c <close@plt>
   118bc:	cmp	r0, #0
   118c0:	beq	11718 <__assert_fail@plt+0x390>
   118c4:	bl	11280 <__errno_location@plt>
   118c8:	mov	r5, #0
   118cc:	mov	r2, r7
   118d0:	mov	r1, #3
   118d4:	ldr	r7, [r0]
   118d8:	mov	r0, r5
   118dc:	bl	16900 <__assert_fail@plt+0x5578>
   118e0:	ldr	r2, [pc, #1216]	; 11da8 <__assert_fail@plt+0xa20>
   118e4:	mov	r1, r7
   118e8:	mov	r3, r0
   118ec:	mov	r0, r5
   118f0:	bl	111c0 <error@plt>
   118f4:	b	11718 <__assert_fail@plt+0x390>
   118f8:	ldrb	r3, [r7]
   118fc:	cmp	r3, #0
   11900:	bne	116cc <__assert_fail@plt+0x344>
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #1168]	; 11da0 <__assert_fail@plt+0xa18>
   1190c:	mov	r0, fp
   11910:	bl	11124 <dcgettext@plt>
   11914:	ldr	r2, [pc, #1164]	; 11da8 <__assert_fail@plt+0xa20>
   11918:	mov	r1, fp
   1191c:	mov	r4, fp
   11920:	mov	r3, r0
   11924:	mov	r0, fp
   11928:	bl	111c0 <error@plt>
   1192c:	b	11720 <__assert_fail@plt+0x398>
   11930:	ldr	r3, [sp, #64]	; 0x40
   11934:	cmp	r3, #3
   11938:	beq	11b24 <__assert_fail@plt+0x79c>
   1193c:	cmp	r3, #4
   11940:	beq	11b28 <__assert_fail@plt+0x7a0>
   11944:	cmp	r3, #2
   11948:	beq	11a58 <__assert_fail@plt+0x6d0>
   1194c:	ldr	r3, [pc, #1112]	; 11dac <__assert_fail@plt+0xa24>
   11950:	ldr	r2, [pc, #1112]	; 11db0 <__assert_fail@plt+0xa28>
   11954:	ldr	r1, [pc, #1112]	; 11db4 <__assert_fail@plt+0xa2c>
   11958:	ldr	r0, [pc, #1112]	; 11db8 <__assert_fail@plt+0xa30>
   1195c:	bl	11388 <__assert_fail@plt>
   11960:	mov	r1, #112	; 0x70
   11964:	mov	r0, r6
   11968:	bl	18814 <__assert_fail@plt+0x748c>
   1196c:	cmp	r6, #1
   11970:	str	r0, [sp, #36]	; 0x24
   11974:	beq	11bcc <__assert_fail@plt+0x844>
   11978:	ldr	r3, [sp, #36]	; 0x24
   1197c:	mov	r5, #0
   11980:	add	sl, r3, #8
   11984:	mov	r7, #3
   11988:	b	119b0 <__assert_fail@plt+0x628>
   1198c:	mov	r2, sl
   11990:	mov	r1, #0
   11994:	mov	r0, r7
   11998:	bl	11178 <__fxstat64@plt>
   1199c:	add	r5, r5, #1
   119a0:	cmp	r6, r5
   119a4:	str	r0, [sl, #-8]
   119a8:	add	sl, sl, #112	; 0x70
   119ac:	beq	119e4 <__assert_fail@plt+0x65c>
   119b0:	ldr	r8, [r4, r5, lsl #2]
   119b4:	cmp	r8, #0
   119b8:	beq	1198c <__assert_fail@plt+0x604>
   119bc:	ldr	r1, [pc, #968]	; 11d8c <__assert_fail@plt+0xa04>
   119c0:	mov	r0, r8
   119c4:	bl	11088 <strcmp@plt>
   119c8:	cmp	r0, #0
   119cc:	beq	1198c <__assert_fail@plt+0x604>
   119d0:	mov	r1, r8
   119d4:	mov	r2, sl
   119d8:	mov	r0, r7
   119dc:	bl	11358 <__xstat64@plt>
   119e0:	b	1199c <__assert_fail@plt+0x614>
   119e4:	ldr	r3, [sp, #36]	; 0x24
   119e8:	ldr	r3, [r3]
   119ec:	cmp	r3, #0
   119f0:	movgt	r7, #1
   119f4:	bgt	116ac <__assert_fail@plt+0x324>
   119f8:	ldr	r3, [sp, #36]	; 0x24
   119fc:	mov	lr, #112	; 0x70
   11a00:	mov	ip, r3
   11a04:	mla	lr, lr, r6, r3
   11a08:	mov	r0, #0
   11a0c:	mov	r1, #0
   11a10:	mov	r8, #1
   11a14:	mov	r4, #7
   11a18:	b	11a20 <__assert_fail@plt+0x698>
   11a1c:	add	ip, ip, #112	; 0x70
   11a20:	cmp	ip, lr
   11a24:	beq	11b70 <__assert_fail@plt+0x7e8>
   11a28:	ldr	r3, [ip]
   11a2c:	cmp	r3, #0
   11a30:	bne	11a1c <__assert_fail@plt+0x694>
   11a34:	ldr	r3, [ip, #24]
   11a38:	and	r3, r3, #61440	; 0xf000
   11a3c:	cmp	r3, #32768	; 0x8000
   11a40:	movne	r8, r4
   11a44:	bne	11a1c <__assert_fail@plt+0x694>
   11a48:	ldrd	r2, [ip, #56]	; 0x38
   11a4c:	adds	r0, r0, r2
   11a50:	adc	r1, r1, r3
   11a54:	b	11a1c <__assert_fail@plt+0x694>
   11a58:	cmp	fp, #0
   11a5c:	movne	fp, #0
   11a60:	andeq	fp, r4, #1
   11a64:	cmp	fp, #0
   11a68:	beq	11a80 <__assert_fail@plt+0x6f8>
   11a6c:	ldr	r0, [sp, #32]
   11a70:	bl	13284 <__assert_fail@plt+0x1efc>
   11a74:	subs	r1, r0, #0
   11a78:	movne	r4, fp
   11a7c:	beq	11cc4 <__assert_fail@plt+0x93c>
   11a80:	ldr	r3, [sp, #48]	; 0x30
   11a84:	cmp	r3, #0
   11a88:	bne	11c3c <__assert_fail@plt+0x8b4>
   11a8c:	ldr	r0, [sp, #32]
   11a90:	bl	13284 <__assert_fail@plt+0x1efc>
   11a94:	cmp	r0, #1
   11a98:	bls	11af4 <__assert_fail@plt+0x76c>
   11a9c:	ldrd	r6, [r9, #32]
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #784]	; 11dbc <__assert_fail@plt+0xa34>
   11aa8:	strd	r6, [sp, #40]	; 0x28
   11aac:	ldrd	r6, [r9, #40]	; 0x28
   11ab0:	mov	r0, #0
   11ab4:	ldrd	sl, [r9, #24]
   11ab8:	strd	r6, [sp, #48]	; 0x30
   11abc:	ldrd	r6, [r9, #48]	; 0x30
   11ac0:	strd	r6, [sp, #56]	; 0x38
   11ac4:	ldrd	r6, [r9, #56]	; 0x38
   11ac8:	bl	11124 <dcgettext@plt>
   11acc:	ldrd	r2, [sp, #56]	; 0x38
   11ad0:	strd	r6, [sp, #16]
   11ad4:	ldrd	r6, [sp, #48]	; 0x30
   11ad8:	strd	r2, [sp, #8]
   11adc:	mov	r1, fp
   11ae0:	strd	r6, [sp]
   11ae4:	ldrd	r2, [sp, #40]	; 0x28
   11ae8:	str	r0, [sp, #24]
   11aec:	mov	r0, sl
   11af0:	bl	11ef4 <__assert_fail@plt+0xb6c>
   11af4:	ldr	r0, [sp, #32]
   11af8:	bl	132a4 <__assert_fail@plt+0x1f1c>
   11afc:	ldr	r0, [sp, #36]	; 0x24
   11b00:	bl	13510 <__assert_fail@plt+0x2188>
   11b04:	ldrb	r3, [r9, #68]	; 0x44
   11b08:	cmp	r3, #0
   11b0c:	bne	11ba8 <__assert_fail@plt+0x820>
   11b10:	eor	r0, r4, #1
   11b14:	uxtb	r0, r0
   11b18:	add	sp, sp, #316	; 0x13c
   11b1c:	vpop	{d8-d9}
   11b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b24:	bl	18d78 <__assert_fail@plt+0x79f0>
   11b28:	bl	11280 <__errno_location@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #648]	; 11dc0 <__assert_fail@plt+0xa38>
   11b34:	mov	r4, r7
   11b38:	ldr	r5, [r0]
   11b3c:	mov	r0, r7
   11b40:	bl	11124 <dcgettext@plt>
   11b44:	mov	r2, fp
   11b48:	mov	r1, #3
   11b4c:	mov	r6, r0
   11b50:	mov	r0, r7
   11b54:	bl	16900 <__assert_fail@plt+0x5578>
   11b58:	mov	r2, r6
   11b5c:	mov	r1, r5
   11b60:	mov	r3, r0
   11b64:	mov	r0, r7
   11b68:	bl	111c0 <error@plt>
   11b6c:	b	11a80 <__assert_fail@plt+0x6f8>
   11b70:	mov	r7, #1
   11b74:	mov	r4, #10
   11b78:	mov	r5, #0
   11b7c:	b	11b90 <__assert_fail@plt+0x808>
   11b80:	mov	r2, r4
   11b84:	mov	r3, r5
   11b88:	add	r7, r7, #1
   11b8c:	bl	19cb8 <_obstack_memory_used@@Base+0x91c>
   11b90:	cmp	r1, #0
   11b94:	cmpeq	r0, #9
   11b98:	bhi	11b80 <__assert_fail@plt+0x7f8>
   11b9c:	cmp	r7, r8
   11ba0:	movlt	r7, r8
   11ba4:	b	116ac <__assert_fail@plt+0x324>
   11ba8:	mov	r0, #0
   11bac:	bl	1137c <close@plt>
   11bb0:	cmp	r0, #0
   11bb4:	beq	11b10 <__assert_fail@plt+0x788>
   11bb8:	bl	11280 <__errno_location@plt>
   11bbc:	ldr	r2, [pc, #456]	; 11d8c <__assert_fail@plt+0xa04>
   11bc0:	ldr	r1, [r0]
   11bc4:	mov	r0, #1
   11bc8:	bl	111c0 <error@plt>
   11bcc:	ldrb	r7, [r9]
   11bd0:	ldrb	r1, [r9, #8]
   11bd4:	ldrb	r2, [r9, #9]
   11bd8:	ldrb	r3, [r9, #10]
   11bdc:	add	r7, r7, r1
   11be0:	ldrb	r8, [r9, #11]
   11be4:	add	r7, r7, r2
   11be8:	add	r7, r7, r3
   11bec:	add	r7, r7, r8
   11bf0:	cmp	r7, #1
   11bf4:	bne	11978 <__assert_fail@plt+0x5f0>
   11bf8:	ldr	r3, [sp, #36]	; 0x24
   11bfc:	str	r6, [r3]
   11c00:	b	116ac <__assert_fail@plt+0x324>
   11c04:	ldr	r3, [pc, #380]	; 11d88 <__assert_fail@plt+0xa00>
   11c08:	ldr	r3, [r3]
   11c0c:	cmp	r6, r3
   11c10:	subgt	r6, r6, r3
   11c14:	ldrgt	r2, [sp, #32]
   11c18:	ldrle	r4, [pc, #420]	; 11dc4 <__assert_fail@plt+0xa3c>
   11c1c:	addgt	r4, r2, r3, lsl #2
   11c20:	mov	r0, r4
   11c24:	movle	r6, #1
   11c28:	bl	1318c <__assert_fail@plt+0x1e04>
   11c2c:	mov	r3, #0
   11c30:	str	r3, [sp, #48]	; 0x30
   11c34:	str	r0, [sp, #32]
   11c38:	b	11680 <__assert_fail@plt+0x2f8>
   11c3c:	add	r0, sp, #168	; 0xa8
   11c40:	bl	17ac4 <__assert_fail@plt+0x673c>
   11c44:	b	11a8c <__assert_fail@plt+0x704>
   11c48:	ldrd	r0, [sp, #112]	; 0x70
   11c4c:	bl	19c58 <_obstack_memory_used@@Base+0x8bc>
   11c50:	vldr	d8, [pc, #208]	; 11d28 <__assert_fail@plt+0x9a0>
   11c54:	vmov	d9, r0, r1
   11c58:	bl	13808 <__assert_fail@plt+0x2480>
   11c5c:	vldr	d7, [pc, #204]	; 11d30 <__assert_fail@plt+0x9a8>
   11c60:	vmul.f64	d0, d0, d8
   11c64:	vcmpe.f64	d0, d7
   11c68:	vmrs	APSR_nzcv, fpscr
   11c6c:	ble	11ce8 <__assert_fail@plt+0x960>
   11c70:	vcmpe.f64	d7, d9
   11c74:	vmrs	APSR_nzcv, fpscr
   11c78:	blt	11664 <__assert_fail@plt+0x2dc>
   11c7c:	add	r0, sp, #168	; 0xa8
   11c80:	bl	17a48 <__assert_fail@plt+0x66c0>
   11c84:	add	r1, sp, #168	; 0xa8
   11c88:	mov	r0, r4
   11c8c:	bl	17af4 <__assert_fail@plt+0x676c>
   11c90:	subs	r3, r0, #0
   11c94:	str	r3, [sp, #48]	; 0x30
   11c98:	beq	11cf4 <__assert_fail@plt+0x96c>
   11c9c:	mov	r0, r4
   11ca0:	bl	13410 <__assert_fail@plt+0x2088>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11cf4 <__assert_fail@plt+0x96c>
   11cac:	ldr	r4, [sp, #172]	; 0xac
   11cb0:	ldr	r6, [sp, #168]	; 0xa8
   11cb4:	mov	r0, r4
   11cb8:	bl	1318c <__assert_fail@plt+0x1e04>
   11cbc:	str	r0, [sp, #32]
   11cc0:	b	11680 <__assert_fail@plt+0x2f8>
   11cc4:	mvn	r2, #0
   11cc8:	mvn	r3, #0
   11ccc:	strd	r2, [sp]
   11cd0:	mov	r3, #1
   11cd4:	ldr	r2, [sp, #36]	; 0x24
   11cd8:	strb	r3, [r9, #68]	; 0x44
   11cdc:	bl	120d8 <__assert_fail@plt+0xd50>
   11ce0:	mov	r4, r0
   11ce4:	b	11a80 <__assert_fail@plt+0x6f8>
   11ce8:	bl	13808 <__assert_fail@plt+0x2480>
   11cec:	vmul.f64	d7, d0, d8
   11cf0:	b	11c70 <__assert_fail@plt+0x8e8>
   11cf4:	mov	r2, #5
   11cf8:	ldr	r1, [pc, #200]	; 11dc8 <__assert_fail@plt+0xa40>
   11cfc:	mov	r0, #0
   11d00:	bl	11124 <dcgettext@plt>
   11d04:	mov	r1, fp
   11d08:	mov	r4, r0
   11d0c:	mov	r0, #4
   11d10:	bl	15e84 <__assert_fail@plt+0x4afc>
   11d14:	mov	r2, r4
   11d18:	mov	r1, #0
   11d1c:	mov	r3, r0
   11d20:	mov	r0, #1
   11d24:	bl	111c0 <error@plt>
   11d28:	andeq	r0, r0, r0
   11d2c:	svccc	0x00e00000
   11d30:	andeq	r0, r0, r0
   11d34:	cmnmi	r4, r0
   11d38:	andeq	fp, r2, r0, lsr #3
   11d3c:	andeq	sl, r1, ip, ror r3
   11d40:	ldrdeq	sl, [r1], -r4
   11d44:	andeq	sl, r1, ip, lsr #8
   11d48:	andeq	r3, r1, ip, ror #5
   11d4c:	strdeq	r9, [r1], -r4
   11d50:	andeq	sl, r1, r8, lsl r5
   11d54:	muleq	r2, r4, r1
   11d58:	andeq	sl, r1, ip, ror #9
   11d5c:	andeq	r0, r0, r1, lsl #2
   11d60:	muleq	r2, r8, r1
   11d64:	andeq	fp, r2, r8, lsr #2
   11d68:	strdeq	sl, [r1], -ip
   11d6c:	andeq	sl, r1, ip, lsl #10
   11d70:			; <UNDEFINED> instruction: 0x00019fb0
   11d74:	andeq	sl, r1, r8, lsr #8
   11d78:	andeq	sl, r1, r0, lsr #10
   11d7c:	andeq	fp, r2, r8, lsl #3
   11d80:	andeq	sl, r1, r4, lsr r5
   11d84:	andeq	sl, r1, r0, lsl #17
   11d88:	andeq	fp, r2, r0, lsl #3
   11d8c:	andeq	sl, r1, r8, ror #10
   11d90:	muleq	r2, r0, r1
   11d94:	andeq	sl, r1, ip, ror #10
   11d98:	andeq	sl, r1, r0, ror r5
   11d9c:	strdeq	sl, [r1], -r0
   11da0:	andeq	sl, r1, r8, lsr r6
   11da4:	andeq	sl, r1, r8, asr r6
   11da8:	andeq	sl, r1, r8, lsr r7
   11dac:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11db0:	andeq	r0, r0, sl, lsr #7
   11db4:			; <UNDEFINED> instruction: 0x0001a5bc
   11db8:	andeq	sl, r1, r8, asr #11
   11dbc:	andeq	sl, r1, r0, lsr r6
   11dc0:	andeq	sl, r1, ip, lsr #11
   11dc4:	andeq	fp, r2, r0, ror #3
   11dc8:	andeq	sl, r1, ip, lsl #11
   11dcc:	mov	fp, #0
   11dd0:	mov	lr, #0
   11dd4:	pop	{r1}		; (ldr r1, [sp], #4)
   11dd8:	mov	r2, sp
   11ddc:	push	{r2}		; (str r2, [sp, #-4]!)
   11de0:	push	{r0}		; (str r0, [sp, #-4]!)
   11de4:	ldr	ip, [pc, #16]	; 11dfc <__assert_fail@plt+0xa74>
   11de8:	push	{ip}		; (str ip, [sp, #-4]!)
   11dec:	ldr	r0, [pc, #12]	; 11e00 <__assert_fail@plt+0xa78>
   11df0:	ldr	r3, [pc, #12]	; 11e04 <__assert_fail@plt+0xa7c>
   11df4:	bl	111fc <__libc_start_main@plt>
   11df8:	bl	11370 <abort@plt>
   11dfc:	andeq	r9, r1, ip, lsl #29
   11e00:	muleq	r1, r8, r3
   11e04:	andeq	r9, r1, ip, lsr #28
   11e08:	ldr	r3, [pc, #20]	; 11e24 <__assert_fail@plt+0xa9c>
   11e0c:	ldr	r2, [pc, #20]	; 11e28 <__assert_fail@plt+0xaa0>
   11e10:	add	r3, pc, r3
   11e14:	ldr	r2, [r3, r2]
   11e18:	cmp	r2, #0
   11e1c:	bxeq	lr
   11e20:	b	11214 <__gmon_start__@plt>
   11e24:	andeq	r9, r1, r8, ror #3
   11e28:	andeq	r0, r0, ip, lsl r1
   11e2c:	ldr	r3, [pc, #28]	; 11e50 <__assert_fail@plt+0xac8>
   11e30:	ldr	r0, [pc, #28]	; 11e54 <__assert_fail@plt+0xacc>
   11e34:	sub	r3, r3, r0
   11e38:	cmp	r3, #6
   11e3c:	bxls	lr
   11e40:	ldr	r3, [pc, #16]	; 11e58 <__assert_fail@plt+0xad0>
   11e44:	cmp	r3, #0
   11e48:	bxeq	lr
   11e4c:	bx	r3
   11e50:	andeq	fp, r2, r7, ror r1
   11e54:	andeq	fp, r2, r4, ror r1
   11e58:	andeq	r0, r0, r0
   11e5c:	ldr	r1, [pc, #36]	; 11e88 <__assert_fail@plt+0xb00>
   11e60:	ldr	r0, [pc, #36]	; 11e8c <__assert_fail@plt+0xb04>
   11e64:	sub	r1, r1, r0
   11e68:	asr	r1, r1, #2
   11e6c:	add	r1, r1, r1, lsr #31
   11e70:	asrs	r1, r1, #1
   11e74:	bxeq	lr
   11e78:	ldr	r3, [pc, #16]	; 11e90 <__assert_fail@plt+0xb08>
   11e7c:	cmp	r3, #0
   11e80:	bxeq	lr
   11e84:	bx	r3
   11e88:	andeq	fp, r2, r4, ror r1
   11e8c:	andeq	fp, r2, r4, ror r1
   11e90:	andeq	r0, r0, r0
   11e94:	push	{r4, lr}
   11e98:	ldr	r4, [pc, #24]	; 11eb8 <__assert_fail@plt+0xb30>
   11e9c:	ldrb	r3, [r4]
   11ea0:	cmp	r3, #0
   11ea4:	popne	{r4, pc}
   11ea8:	bl	11e2c <__assert_fail@plt+0xaa4>
   11eac:	mov	r3, #1
   11eb0:	strb	r3, [r4]
   11eb4:	pop	{r4, pc}
   11eb8:	muleq	r2, ip, r1
   11ebc:	ldr	r0, [pc, #40]	; 11eec <__assert_fail@plt+0xb64>
   11ec0:	ldr	r3, [r0]
   11ec4:	cmp	r3, #0
   11ec8:	bne	11ed0 <__assert_fail@plt+0xb48>
   11ecc:	b	11e5c <__assert_fail@plt+0xad4>
   11ed0:	ldr	r3, [pc, #24]	; 11ef0 <__assert_fail@plt+0xb68>
   11ed4:	cmp	r3, #0
   11ed8:	beq	11ecc <__assert_fail@plt+0xb44>
   11edc:	push	{r4, lr}
   11ee0:	blx	r3
   11ee4:	pop	{r4, lr}
   11ee8:	b	11e5c <__assert_fail@plt+0xad4>
   11eec:	andeq	sl, r2, r4, lsl pc
   11ef0:	andeq	r0, r0, r0
   11ef4:	push	{r4, r5, r6, r7, r8, r9, lr}
   11ef8:	mov	r9, r3
   11efc:	ldr	r4, [pc, #448]	; 120c4 <__assert_fail@plt+0xd3c>
   11f00:	sub	sp, sp, #28
   11f04:	mov	r8, r2
   11f08:	ldrb	r3, [r4]
   11f0c:	ldr	r5, [sp, #80]	; 0x50
   11f10:	cmp	r3, #0
   11f14:	ldreq	r6, [pc, #428]	; 120c8 <__assert_fail@plt+0xd40>
   11f18:	bne	11fbc <__assert_fail@plt+0xc34>
   11f1c:	ldrb	r3, [r4, #8]
   11f20:	cmp	r3, #0
   11f24:	bne	11fec <__assert_fail@plt+0xc64>
   11f28:	ldrb	r3, [r4, #9]
   11f2c:	cmp	r3, #0
   11f30:	bne	12024 <__assert_fail@plt+0xc9c>
   11f34:	ldrb	r3, [r4, #10]
   11f38:	cmp	r3, #0
   11f3c:	bne	12058 <__assert_fail@plt+0xcd0>
   11f40:	ldrb	r3, [r4, #11]
   11f44:	cmp	r3, #0
   11f48:	bne	1208c <__assert_fail@plt+0xd04>
   11f4c:	cmp	r5, #0
   11f50:	beq	11f8c <__assert_fail@plt+0xc04>
   11f54:	mov	r1, #10
   11f58:	mov	r0, r5
   11f5c:	bl	11268 <strchr@plt>
   11f60:	cmp	r0, #0
   11f64:	beq	11f7c <__assert_fail@plt+0xbf4>
   11f68:	mov	r2, r5
   11f6c:	mov	r1, #3
   11f70:	mov	r0, #0
   11f74:	bl	16900 <__assert_fail@plt+0x5578>
   11f78:	mov	r5, r0
   11f7c:	mov	r2, r5
   11f80:	ldr	r1, [pc, #324]	; 120cc <__assert_fail@plt+0xd44>
   11f84:	mov	r0, #1
   11f88:	bl	112c8 <__printf_chk@plt>
   11f8c:	ldr	r3, [pc, #316]	; 120d0 <__assert_fail@plt+0xd48>
   11f90:	ldr	r0, [r3]
   11f94:	ldr	r3, [r0, #20]
   11f98:	ldr	r2, [r0, #24]
   11f9c:	cmp	r3, r2
   11fa0:	addcc	r1, r3, #1
   11fa4:	movcc	r2, #10
   11fa8:	strcc	r1, [r0, #20]
   11fac:	strbcc	r2, [r3]
   11fb0:	bcs	120b4 <__assert_fail@plt+0xd2c>
   11fb4:	add	sp, sp, #28
   11fb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fbc:	mov	r2, sp
   11fc0:	ldr	r6, [r4, #4]
   11fc4:	bl	13608 <__assert_fail@plt+0x2280>
   11fc8:	mov	r2, r6
   11fcc:	ldr	r1, [pc, #244]	; 120c8 <__assert_fail@plt+0xd40>
   11fd0:	ldr	r6, [pc, #252]	; 120d4 <__assert_fail@plt+0xd4c>
   11fd4:	mov	r3, r0
   11fd8:	mov	r0, #1
   11fdc:	bl	112c8 <__printf_chk@plt>
   11fe0:	ldrb	r3, [r4, #8]
   11fe4:	cmp	r3, #0
   11fe8:	beq	11f28 <__assert_fail@plt+0xba0>
   11fec:	mov	r1, r9
   11ff0:	mov	r2, sp
   11ff4:	mov	r0, r8
   11ff8:	ldr	r7, [r4, #4]
   11ffc:	bl	13608 <__assert_fail@plt+0x2280>
   12000:	mov	r1, r6
   12004:	mov	r2, r7
   12008:	ldr	r6, [pc, #196]	; 120d4 <__assert_fail@plt+0xd4c>
   1200c:	mov	r3, r0
   12010:	mov	r0, #1
   12014:	bl	112c8 <__printf_chk@plt>
   12018:	ldrb	r3, [r4, #9]
   1201c:	cmp	r3, #0
   12020:	beq	11f34 <__assert_fail@plt+0xbac>
   12024:	mov	r2, sp
   12028:	ldrd	r0, [sp, #56]	; 0x38
   1202c:	ldr	r7, [r4, #4]
   12030:	bl	13608 <__assert_fail@plt+0x2280>
   12034:	mov	r1, r6
   12038:	mov	r2, r7
   1203c:	ldr	r6, [pc, #144]	; 120d4 <__assert_fail@plt+0xd4c>
   12040:	mov	r3, r0
   12044:	mov	r0, #1
   12048:	bl	112c8 <__printf_chk@plt>
   1204c:	ldrb	r3, [r4, #10]
   12050:	cmp	r3, #0
   12054:	beq	11f40 <__assert_fail@plt+0xbb8>
   12058:	mov	r2, sp
   1205c:	ldrd	r0, [sp, #64]	; 0x40
   12060:	ldr	r7, [r4, #4]
   12064:	bl	13608 <__assert_fail@plt+0x2280>
   12068:	mov	r1, r6
   1206c:	mov	r2, r7
   12070:	ldr	r6, [pc, #92]	; 120d4 <__assert_fail@plt+0xd4c>
   12074:	mov	r3, r0
   12078:	mov	r0, #1
   1207c:	bl	112c8 <__printf_chk@plt>
   12080:	ldrb	r3, [r4, #11]
   12084:	cmp	r3, #0
   12088:	beq	11f4c <__assert_fail@plt+0xbc4>
   1208c:	mov	r2, sp
   12090:	ldrd	r0, [sp, #72]	; 0x48
   12094:	ldr	r4, [r4, #4]
   12098:	bl	13608 <__assert_fail@plt+0x2280>
   1209c:	mov	r2, r4
   120a0:	mov	r1, r6
   120a4:	mov	r3, r0
   120a8:	mov	r0, #1
   120ac:	bl	112c8 <__printf_chk@plt>
   120b0:	b	11f4c <__assert_fail@plt+0xbc4>
   120b4:	mov	r1, #10
   120b8:	bl	11304 <__overflow@plt>
   120bc:	add	sp, sp, #28
   120c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120c4:	andeq	fp, r2, r0, lsr #3
   120c8:			; <UNDEFINED> instruction: 0x00019eb5
   120cc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   120d0:	muleq	r2, r4, r1
   120d4:			; <UNDEFINED> instruction: 0x00019eb4
   120d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	sub	sp, sp, #16384	; 0x4000
   120e0:	sub	sp, sp, #148	; 0x94
   120e4:	subs	r3, r1, #0
   120e8:	str	r3, [sp, #84]	; 0x54
   120ec:	str	r0, [sp, #72]	; 0x48
   120f0:	mov	r7, r2
   120f4:	strne	r3, [sp, #92]	; 0x5c
   120f8:	beq	12b7c <__assert_fail@plt+0x17f4>
   120fc:	mov	r3, #0
   12100:	mov	r2, #0
   12104:	strd	r2, [sp, #104]	; 0x68
   12108:	strd	r2, [sp, #112]	; 0x70
   1210c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   12110:	ldr	r3, [pc, #2924]	; 12c84 <__assert_fail@plt+0x18fc>
   12114:	cmp	r0, #1
   12118:	bls	1288c <__assert_fail@plt+0x1504>
   1211c:	ldrb	r5, [r3, #9]
   12120:	str	r3, [sp, #76]	; 0x4c
   12124:	ldrb	r3, [r3, #10]
   12128:	eor	r4, r5, #1
   1212c:	str	r5, [sp, #88]	; 0x58
   12130:	and	r4, r4, r3
   12134:	ldr	r1, [sp, #76]	; 0x4c
   12138:	ldrb	r2, [r1, #8]
   1213c:	cmp	r2, #0
   12140:	bne	12278 <__assert_fail@plt+0xef0>
   12144:	ldrb	r6, [r1, #11]
   12148:	cmp	r6, #0
   1214c:	bne	124c4 <__assert_fail@plt+0x113c>
   12150:	eor	r3, r3, #1
   12154:	orrs	r3, r3, r5
   12158:	bne	128b8 <__assert_fail@plt+0x1530>
   1215c:	ldrb	r3, [r1]
   12160:	cmp	r3, #0
   12164:	bne	128b8 <__assert_fail@plt+0x1530>
   12168:	cmp	r4, #0
   1216c:	bne	125c8 <__assert_fail@plt+0x1240>
   12170:	add	r3, sp, #112	; 0x70
   12174:	add	r2, sp, #104	; 0x68
   12178:	ldr	r1, [sp, #72]	; 0x48
   1217c:	ldr	r0, [sp, #92]	; 0x5c
   12180:	bl	12e54 <__assert_fail@plt+0x1acc>
   12184:	mov	r8, #0
   12188:	mov	r9, #0
   1218c:	ldr	r2, [sp, #112]	; 0x70
   12190:	ldr	r3, [sp, #116]	; 0x74
   12194:	mov	sl, r8
   12198:	mov	fp, r9
   1219c:	strd	r8, [sp, #32]
   121a0:	mov	r6, r0
   121a4:	ldr	r1, [sp, #76]	; 0x4c
   121a8:	ldr	r0, [sp, #88]	; 0x58
   121ac:	ldr	ip, [sp, #84]	; 0x54
   121b0:	ldrb	r1, [r1, #9]
   121b4:	str	ip, [sp, #24]
   121b8:	str	r2, [sp, #8]
   121bc:	cmp	r0, r1
   121c0:	movlt	sl, r2
   121c4:	movlt	fp, r3
   121c8:	ldrd	r0, [sp, #104]	; 0x68
   121cc:	str	r3, [sp, #12]
   121d0:	strd	sl, [sp]
   121d4:	ldrd	r2, [sp, #32]
   121d8:	strd	r8, [sp, #16]
   121dc:	bl	11ef4 <__assert_fail@plt+0xb6c>
   121e0:	ldr	ip, [sp, #76]	; 0x4c
   121e4:	ldrd	r0, [sp, #104]	; 0x68
   121e8:	ldrd	r4, [sp, #112]	; 0x70
   121ec:	ldrd	r2, [ip, #24]
   121f0:	strd	r4, [sp, #48]	; 0x30
   121f4:	adds	r2, r2, r0
   121f8:	adc	r3, r3, r1
   121fc:	ldrd	r4, [ip, #32]
   12200:	strd	r2, [sp, #40]	; 0x28
   12204:	ldrd	r2, [sp, #32]
   12208:	ldrd	r0, [ip, #40]	; 0x28
   1220c:	adds	r2, r2, r4
   12210:	adc	r3, r3, r5
   12214:	adds	r0, r0, sl
   12218:	adc	r1, r1, fp
   1221c:	ldrd	sl, [ip, #56]	; 0x38
   12220:	mov	r4, r2
   12224:	mov	r5, r3
   12228:	strd	sl, [sp, #32]
   1222c:	ldrd	r2, [ip, #48]	; 0x30
   12230:	ldrd	sl, [sp, #48]	; 0x30
   12234:	strd	r4, [ip, #32]
   12238:	strd	r0, [ip, #40]	; 0x28
   1223c:	adds	sl, sl, r2
   12240:	adc	fp, fp, r3
   12244:	mov	r2, sl
   12248:	mov	r3, fp
   1224c:	ldrd	sl, [sp, #40]	; 0x28
   12250:	strd	r2, [ip, #48]	; 0x30
   12254:	strd	sl, [ip, #24]
   12258:	ldrd	sl, [sp, #32]
   1225c:	cmp	r9, fp
   12260:	cmpeq	r8, sl
   12264:	strdhi	r8, [ip, #56]	; 0x38
   12268:	mov	r0, r6
   1226c:	add	sp, sp, #16384	; 0x4000
   12270:	add	sp, sp, #148	; 0x94
   12274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12278:	mov	r2, #0
   1227c:	mov	r3, #0
   12280:	mov	r1, #2
   12284:	strd	r2, [sp]
   12288:	str	r1, [sp, #8]
   1228c:	ldr	r0, [sp, #72]	; 0x48
   12290:	bl	133d0 <__assert_fail@plt+0x2048>
   12294:	cmp	r4, #0
   12298:	bne	128f0 <__assert_fail@plt+0x1568>
   1229c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   122a0:	cmp	r0, #1
   122a4:	bls	124ec <__assert_fail@plt+0x1164>
   122a8:	mov	r2, #0
   122ac:	mov	r0, #0
   122b0:	mov	r1, #0
   122b4:	mov	r4, r2
   122b8:	mov	r6, r2
   122bc:	mov	r7, r2
   122c0:	mov	sl, r0
   122c4:	mov	fp, r1
   122c8:	mov	r8, r0
   122cc:	mov	r9, r1
   122d0:	add	r3, sp, #140	; 0x8c
   122d4:	strd	r0, [sp, #40]	; 0x28
   122d8:	str	r2, [sp, #124]	; 0x7c
   122dc:	str	r2, [sp, #128]	; 0x80
   122e0:	strd	r0, [sp, #56]	; 0x38
   122e4:	str	r3, [sp, #68]	; 0x44
   122e8:	rsb	r2, r4, #16384	; 0x4000
   122ec:	add	r1, r3, r4
   122f0:	ldr	r0, [sp, #72]	; 0x48
   122f4:	bl	17c8c <__assert_fail@plt+0x6904>
   122f8:	cmp	r0, #0
   122fc:	beq	12a28 <__assert_fail@plt+0x16a0>
   12300:	cmn	r0, #1
   12304:	beq	12a64 <__assert_fail@plt+0x16dc>
   12308:	ldrd	r2, [sp, #112]	; 0x70
   1230c:	ldr	r5, [sp, #68]	; 0x44
   12310:	add	r4, r4, r0
   12314:	adds	r2, r2, r0
   12318:	adc	r3, r3, #0
   1231c:	add	r1, sp, #132	; 0x84
   12320:	strd	r2, [sp, #112]	; 0x70
   12324:	mov	r2, r6
   12328:	str	r1, [sp, #64]	; 0x40
   1232c:	strd	r8, [sp, #32]
   12330:	cmp	r2, #0
   12334:	bne	126a8 <__assert_fail@plt+0x1320>
   12338:	ldrb	r6, [r5]
   1233c:	ldr	r0, [pc, #2372]	; 12c88 <__assert_fail@plt+0x1900>
   12340:	and	r1, r6, #31
   12344:	lsr	r3, r6, #5
   12348:	ldr	r3, [r0, r3, lsl #2]
   1234c:	lsr	r3, r3, r1
   12350:	tst	r3, #1
   12354:	beq	126a8 <__assert_fail@plt+0x1320>
   12358:	sub	r3, r6, #9
   1235c:	str	r6, [sp, #100]	; 0x64
   12360:	cmp	r3, #23
   12364:	ldrls	pc, [pc, r3, lsl #2]
   12368:	b	123cc <__assert_fail@plt+0x1044>
   1236c:	andeq	r2, r1, r8, lsl #9
   12370:	andeq	r2, r1, r0, asr r4
   12374:	andeq	r2, r1, r0, lsl r4
   12378:			; <UNDEFINED> instruction: 0x000124bc
   1237c:			; <UNDEFINED> instruction: 0x000124bc
   12380:	andeq	r2, r1, ip, asr #7
   12384:	andeq	r2, r1, ip, asr #7
   12388:	andeq	r2, r1, ip, asr #7
   1238c:	andeq	r2, r1, ip, asr #7
   12390:	andeq	r2, r1, ip, asr #7
   12394:	andeq	r2, r1, ip, asr #7
   12398:	andeq	r2, r1, ip, asr #7
   1239c:	andeq	r2, r1, ip, asr #7
   123a0:	andeq	r2, r1, ip, asr #7
   123a4:	andeq	r2, r1, ip, asr #7
   123a8:	andeq	r2, r1, ip, asr #7
   123ac:	andeq	r2, r1, ip, asr #7
   123b0:	andeq	r2, r1, ip, asr #7
   123b4:	andeq	r2, r1, ip, asr #7
   123b8:	andeq	r2, r1, ip, asr #7
   123bc:	andeq	r2, r1, ip, asr #7
   123c0:	andeq	r2, r1, ip, asr #7
   123c4:	andeq	r2, r1, ip, asr #7
   123c8:	andeq	r2, r1, r4, lsr #9
   123cc:	str	r2, [sp, #48]	; 0x30
   123d0:	bl	1122c <__ctype_b_loc@plt>
   123d4:	lsl	r6, r6, #1
   123d8:	ldr	r2, [sp, #48]	; 0x30
   123dc:	ldr	r3, [r0]
   123e0:	ldrh	r3, [r3, r6]
   123e4:	tst	r3, #16384	; 0x4000
   123e8:	moveq	r3, #1
   123ec:	beq	12428 <__assert_fail@plt+0x10a0>
   123f0:	ldrd	r0, [sp, #40]	; 0x28
   123f4:	adds	r0, r0, #1
   123f8:	adc	r1, r1, #0
   123fc:	tst	r3, #8192	; 0x2000
   12400:	moveq	r7, #1
   12404:	strd	r0, [sp, #40]	; 0x28
   12408:	moveq	r3, r7
   1240c:	beq	12428 <__assert_fail@plt+0x10a0>
   12410:	mov	r3, #1
   12414:	ldrd	r0, [sp, #32]
   12418:	adds	r0, r0, r7
   1241c:	adc	r1, r1, #0
   12420:	mov	r7, #0
   12424:	strd	r0, [sp, #32]
   12428:	adds	sl, sl, #1
   1242c:	add	r5, r5, r3
   12430:	sub	r4, r4, r3
   12434:	adc	fp, fp, #0
   12438:	cmp	r4, #0
   1243c:	bne	12330 <__assert_fail@plt+0xfa8>
   12440:	ldrd	r8, [sp, #32]
   12444:	mov	r6, r2
   12448:	ldr	r3, [sp, #68]	; 0x44
   1244c:	b	122e8 <__assert_fail@plt+0xf60>
   12450:	mov	r3, #1
   12454:	ldrd	r0, [sp, #104]	; 0x68
   12458:	adds	r0, r0, #1
   1245c:	adc	r1, r1, #0
   12460:	strd	r0, [sp, #104]	; 0x68
   12464:	ldrd	r8, [sp, #56]	; 0x38
   12468:	ldrd	r0, [sp, #40]	; 0x28
   1246c:	cmp	r9, r1
   12470:	cmpeq	r8, r0
   12474:	strdcc	r0, [sp, #56]	; 0x38
   12478:	mov	r0, #0
   1247c:	mov	r1, #0
   12480:	strd	r0, [sp, #40]	; 0x28
   12484:	b	12414 <__assert_fail@plt+0x108c>
   12488:	mov	r3, #1
   1248c:	ldrd	r0, [sp, #40]	; 0x28
   12490:	bic	r0, r0, #7
   12494:	adds	r8, r0, #8
   12498:	adc	r9, r1, #0
   1249c:	strd	r8, [sp, #40]	; 0x28
   124a0:	b	12414 <__assert_fail@plt+0x108c>
   124a4:	mov	r3, #1
   124a8:	ldrd	r0, [sp, #40]	; 0x28
   124ac:	adds	r0, r0, #1
   124b0:	adc	r1, r1, #0
   124b4:	strd	r0, [sp, #40]	; 0x28
   124b8:	b	12414 <__assert_fail@plt+0x108c>
   124bc:	mov	r3, #1
   124c0:	b	12464 <__assert_fail@plt+0x10dc>
   124c4:	mov	r2, #0
   124c8:	mov	r3, #0
   124cc:	mov	r1, #2
   124d0:	strd	r2, [sp]
   124d4:	str	r1, [sp, #8]
   124d8:	ldr	r0, [sp, #72]	; 0x48
   124dc:	bl	133d0 <__assert_fail@plt+0x2048>
   124e0:	bl	1119c <__ctype_get_mb_cur_max@plt>
   124e4:	cmp	r0, #1
   124e8:	bhi	122a8 <__assert_fail@plt+0xf20>
   124ec:	mov	sl, #0
   124f0:	mov	fp, #0
   124f4:	mov	r7, #0
   124f8:	add	r3, sp, #140	; 0x8c
   124fc:	mov	r4, sl
   12500:	mov	r5, fp
   12504:	mov	r8, r7
   12508:	mov	r9, r7
   1250c:	mov	r1, r3
   12510:	strd	sl, [sp, #32]
   12514:	str	r3, [sp, #68]	; 0x44
   12518:	mov	r2, #16384	; 0x4000
   1251c:	ldr	r0, [sp, #72]	; 0x48
   12520:	bl	17c8c <__assert_fail@plt+0x6904>
   12524:	cmp	r0, #0
   12528:	beq	12c04 <__assert_fail@plt+0x187c>
   1252c:	cmn	r0, #1
   12530:	beq	12b94 <__assert_fail@plt+0x180c>
   12534:	ldrd	r2, [sp, #112]	; 0x70
   12538:	ldr	ip, [sp, #68]	; 0x44
   1253c:	adds	r6, r2, r0
   12540:	adc	r7, r3, #0
   12544:	add	r1, ip, r0
   12548:	strd	r6, [sp, #112]	; 0x70
   1254c:	mov	r6, ip
   12550:	mov	r7, r1
   12554:	ldrb	r3, [r6], #1
   12558:	sub	r2, r3, #9
   1255c:	cmp	r2, #23
   12560:	ldrls	pc, [pc, r2, lsl #2]
   12564:	b	12b04 <__assert_fail@plt+0x177c>
   12568:	andeq	r2, r1, r8, ror #21
   1256c:	muleq	r1, ip, sl
   12570:	andeq	r2, r1, r4, asr #21
   12574:	andeq	r2, r1, ip, lsr #21
   12578:	andeq	r2, r1, ip, lsr #21
   1257c:	andeq	r2, r1, r4, lsl #22
   12580:	andeq	r2, r1, r4, lsl #22
   12584:	andeq	r2, r1, r4, lsl #22
   12588:	andeq	r2, r1, r4, lsl #22
   1258c:	andeq	r2, r1, r4, lsl #22
   12590:	andeq	r2, r1, r4, lsl #22
   12594:	andeq	r2, r1, r4, lsl #22
   12598:	andeq	r2, r1, r4, lsl #22
   1259c:	andeq	r2, r1, r4, lsl #22
   125a0:	andeq	r2, r1, r4, lsl #22
   125a4:	andeq	r2, r1, r4, lsl #22
   125a8:	andeq	r2, r1, r4, lsl #22
   125ac:	andeq	r2, r1, r4, lsl #22
   125b0:	andeq	r2, r1, r4, lsl #22
   125b4:	andeq	r2, r1, r4, lsl #22
   125b8:	andeq	r2, r1, r4, lsl #22
   125bc:	andeq	r2, r1, r4, lsl #22
   125c0:	andeq	r2, r1, r4, lsl #22
   125c4:	strdeq	r2, [r1], -r8
   125c8:	ldr	r0, [r7]
   125cc:	cmp	r0, #0
   125d0:	ble	125e8 <__assert_fail@plt+0x1260>
   125d4:	add	r2, r7, #8
   125d8:	ldr	r1, [sp, #72]	; 0x48
   125dc:	mov	r0, #3
   125e0:	bl	11178 <__fxstat64@plt>
   125e4:	str	r0, [r7]
   125e8:	cmp	r0, #0
   125ec:	bne	129a4 <__assert_fail@plt+0x161c>
   125f0:	ldr	r3, [r7, #24]
   125f4:	and	r3, r3, #53248	; 0xd000
   125f8:	cmp	r3, #32768	; 0x8000
   125fc:	bne	129a4 <__assert_fail@plt+0x161c>
   12600:	ldrd	r4, [r7, #56]	; 0x38
   12604:	cmp	r4, #0
   12608:	sbcs	r3, r5, #0
   1260c:	blt	129a4 <__assert_fail@plt+0x161c>
   12610:	add	r3, sp, #16384	; 0x4000
   12614:	add	r3, r3, #184	; 0xb8
   12618:	ldrd	r2, [r3]
   1261c:	cmp	r2, #0
   12620:	sbcs	r3, r3, #0
   12624:	blt	12c5c <__assert_fail@plt+0x18d4>
   12628:	ldr	r3, [sp, #76]	; 0x4c
   1262c:	mov	r0, r4
   12630:	ldr	r1, [r3, #12]
   12634:	bl	196a0 <_obstack_memory_used@@Base+0x304>
   12638:	cmp	r1, #0
   1263c:	beq	12900 <__assert_fail@plt+0x1578>
   12640:	add	r1, sp, #16384	; 0x4000
   12644:	add	r1, r1, #184	; 0xb8
   12648:	mov	r3, #0
   1264c:	ldrd	r0, [r1]
   12650:	mov	r2, r4
   12654:	cmp	r4, r0
   12658:	sbcs	r1, r3, r1
   1265c:	movlt	r2, #0
   12660:	movlt	r3, #0
   12664:	blt	12684 <__assert_fail@plt+0x12fc>
   12668:	add	r1, sp, #16384	; 0x4000
   1266c:	add	r1, r1, #184	; 0xb8
   12670:	ldrd	r0, [r1]
   12674:	subs	r0, r2, r0
   12678:	sbc	r1, r3, r1
   1267c:	mov	r2, r0
   12680:	mov	r3, r1
   12684:	mov	r8, #0
   12688:	mov	r9, #0
   1268c:	str	r2, [sp, #112]	; 0x70
   12690:	str	r3, [sp, #116]	; 0x74
   12694:	mov	sl, r8
   12698:	mov	fp, r9
   1269c:	strd	r8, [sp, #32]
   126a0:	mov	r6, #1
   126a4:	b	121a4 <__assert_fail@plt+0xe1c>
   126a8:	add	r6, sp, #124	; 0x7c
   126ac:	ldr	ip, [sp, #64]	; 0x40
   126b0:	ldm	r6, {r0, r1}
   126b4:	mov	r3, r6
   126b8:	mov	r2, r4
   126bc:	stm	ip, {r0, r1}
   126c0:	mov	r1, r5
   126c4:	add	r0, sp, #100	; 0x64
   126c8:	bl	13710 <__assert_fail@plt+0x2388>
   126cc:	cmn	r0, #2
   126d0:	beq	12818 <__assert_fail@plt+0x1490>
   126d4:	cmn	r0, #1
   126d8:	addeq	r5, r5, #1
   126dc:	subeq	r4, r4, #1
   126e0:	moveq	r2, #1
   126e4:	beq	12438 <__assert_fail@plt+0x10b0>
   126e8:	str	r0, [sp, #48]	; 0x30
   126ec:	mov	r0, r6
   126f0:	bl	11100 <mbsinit@plt>
   126f4:	ldr	r3, [sp, #48]	; 0x30
   126f8:	cmp	r3, #0
   126fc:	clz	r2, r0
   12700:	lsr	r2, r2, #5
   12704:	bne	127a4 <__assert_fail@plt+0x141c>
   12708:	str	r3, [sp, #100]	; 0x64
   1270c:	mov	r6, r3
   12710:	mov	r3, #1
   12714:	mov	r0, r6
   12718:	str	r2, [sp, #80]	; 0x50
   1271c:	str	r3, [sp, #48]	; 0x30
   12720:	bl	1116c <iswprint@plt>
   12724:	ldr	r3, [sp, #48]	; 0x30
   12728:	ldr	r2, [sp, #80]	; 0x50
   1272c:	cmp	r0, #0
   12730:	beq	12428 <__assert_fail@plt+0x10a0>
   12734:	ldr	r1, [sp, #76]	; 0x4c
   12738:	ldrb	r1, [r1, #11]
   1273c:	cmp	r1, #0
   12740:	bne	1285c <__assert_fail@plt+0x14d4>
   12744:	mov	r0, r6
   12748:	str	r2, [sp, #80]	; 0x50
   1274c:	str	r3, [sp, #48]	; 0x30
   12750:	bl	11250 <iswspace@plt>
   12754:	ldr	r3, [sp, #48]	; 0x30
   12758:	ldr	r2, [sp, #80]	; 0x50
   1275c:	cmp	r0, #0
   12760:	bne	12414 <__assert_fail@plt+0x108c>
   12764:	ldr	r1, [sp, #76]	; 0x4c
   12768:	ldrb	r1, [r1, #16]
   1276c:	cmp	r1, #0
   12770:	movne	r7, r1
   12774:	bne	12428 <__assert_fail@plt+0x10a0>
   12778:	ldr	r1, [pc, #1292]	; 12c8c <__assert_fail@plt+0x1904>
   1277c:	cmp	r6, r1
   12780:	cmpne	r6, #160	; 0xa0
   12784:	beq	12414 <__assert_fail@plt+0x108c>
   12788:	ldr	r0, [pc, #1280]	; 12c90 <__assert_fail@plt+0x1908>
   1278c:	add	r1, r1, #40	; 0x28
   12790:	cmp	r6, r0
   12794:	cmpne	r6, r1
   12798:	movne	r7, #1
   1279c:	bne	12428 <__assert_fail@plt+0x10a0>
   127a0:	b	12414 <__assert_fail@plt+0x108c>
   127a4:	ldr	r6, [sp, #100]	; 0x64
   127a8:	sub	r1, r6, #9
   127ac:	cmp	r1, #23
   127b0:	ldrls	pc, [pc, r1, lsl #2]
   127b4:	b	12714 <__assert_fail@plt+0x138c>
   127b8:	andeq	r2, r1, ip, lsl #9
   127bc:	andeq	r2, r1, r4, asr r4
   127c0:	andeq	r2, r1, r4, lsl r4
   127c4:	andeq	r2, r1, r4, ror #8
   127c8:	andeq	r2, r1, r4, ror #8
   127cc:	andeq	r2, r1, r4, lsl r7
   127d0:	andeq	r2, r1, r4, lsl r7
   127d4:	andeq	r2, r1, r4, lsl r7
   127d8:	andeq	r2, r1, r4, lsl r7
   127dc:	andeq	r2, r1, r4, lsl r7
   127e0:	andeq	r2, r1, r4, lsl r7
   127e4:	andeq	r2, r1, r4, lsl r7
   127e8:	andeq	r2, r1, r4, lsl r7
   127ec:	andeq	r2, r1, r4, lsl r7
   127f0:	andeq	r2, r1, r4, lsl r7
   127f4:	andeq	r2, r1, r4, lsl r7
   127f8:	andeq	r2, r1, r4, lsl r7
   127fc:	andeq	r2, r1, r4, lsl r7
   12800:	andeq	r2, r1, r4, lsl r7
   12804:	andeq	r2, r1, r4, lsl r7
   12808:	andeq	r2, r1, r4, lsl r7
   1280c:	andeq	r2, r1, r4, lsl r7
   12810:	andeq	r2, r1, r4, lsl r7
   12814:	andeq	r2, r1, r8, lsr #9
   12818:	ldr	r3, [sp, #64]	; 0x40
   1281c:	cmp	r4, #0
   12820:	ldrd	r8, [sp, #32]
   12824:	ldm	r3, {r0, r1}
   12828:	stm	r6, {r0, r1}
   1282c:	beq	12850 <__assert_fail@plt+0x14c8>
   12830:	cmp	r4, #16384	; 0x4000
   12834:	subeq	r4, r4, #1
   12838:	addeq	r5, r5, #1
   1283c:	mov	r1, r5
   12840:	ldr	r3, [pc, #1100]	; 12c94 <__assert_fail@plt+0x190c>
   12844:	mov	r2, r4
   12848:	ldr	r0, [sp, #68]	; 0x44
   1284c:	bl	110c4 <__memmove_chk@plt>
   12850:	mov	r6, #1
   12854:	ldr	r3, [sp, #68]	; 0x44
   12858:	b	122e8 <__assert_fail@plt+0xf60>
   1285c:	mov	r0, r6
   12860:	bl	110b8 <wcwidth@plt>
   12864:	ldr	r6, [sp, #100]	; 0x64
   12868:	ldr	r3, [sp, #48]	; 0x30
   1286c:	ldr	r2, [sp, #80]	; 0x50
   12870:	cmp	r0, #0
   12874:	ble	12744 <__assert_fail@plt+0x13bc>
   12878:	ldrd	r8, [sp, #40]	; 0x28
   1287c:	adds	r8, r8, r0
   12880:	adc	r9, r9, r0, asr #31
   12884:	strd	r8, [sp, #40]	; 0x28
   12888:	b	12744 <__assert_fail@plt+0x13bc>
   1288c:	mov	r2, r3
   12890:	str	r3, [sp, #76]	; 0x4c
   12894:	ldrb	r3, [r3, #10]
   12898:	cmp	r3, #0
   1289c:	moveq	r3, r2
   128a0:	mov	r2, #0
   128a4:	ldrbeq	r3, [r3, #9]
   128a8:	str	r2, [sp, #88]	; 0x58
   128ac:	mov	r5, r2
   128b0:	mov	r4, r3
   128b4:	b	12134 <__assert_fail@plt+0xdac>
   128b8:	mov	r2, #0
   128bc:	mov	r3, #0
   128c0:	mov	r1, #2
   128c4:	strd	r2, [sp]
   128c8:	str	r1, [sp, #8]
   128cc:	ldr	r0, [sp, #72]	; 0x48
   128d0:	bl	133d0 <__assert_fail@plt+0x2048>
   128d4:	cmp	r4, #0
   128d8:	beq	128f0 <__assert_fail@plt+0x1568>
   128dc:	ldr	r3, [sp, #76]	; 0x4c
   128e0:	ldrb	r3, [r3]
   128e4:	cmp	r3, #0
   128e8:	beq	125c8 <__assert_fail@plt+0x1240>
   128ec:	mov	r4, r6
   128f0:	orr	r4, r5, r4
   128f4:	tst	r4, #255	; 0xff
   128f8:	beq	12170 <__assert_fail@plt+0xde8>
   128fc:	b	1229c <__assert_fail@plt+0xf14>
   12900:	ldr	r1, [r7, #64]	; 0x40
   12904:	mov	r0, r4
   12908:	sub	r3, r1, #1
   1290c:	cmn	r3, #-536870911	; 0xe0000001
   12910:	addls	r1, r1, #1
   12914:	ldrhi	r1, [pc, #892]	; 12c98 <__assert_fail@plt+0x1910>
   12918:	bl	196a0 <_obstack_memory_used@@Base+0x304>
   1291c:	add	r3, sp, #16384	; 0x4000
   12920:	add	r3, r3, #184	; 0xb8
   12924:	mov	r5, #0
   12928:	ldrd	r2, [r3]
   1292c:	sub	r4, r4, r1
   12930:	cmp	r2, r4
   12934:	add	r2, sp, #16384	; 0x4000
   12938:	add	r2, r2, #188	; 0xbc
   1293c:	sbcs	r3, r3, r5
   12940:	ldr	r2, [r2]
   12944:	movlt	r3, #1
   12948:	movge	r3, #0
   1294c:	cmp	r2, #0
   12950:	movlt	r3, #0
   12954:	andge	r3, r3, #1
   12958:	cmp	r3, #0
   1295c:	beq	129a4 <__assert_fail@plt+0x161c>
   12960:	mov	r3, #1
   12964:	str	r3, [sp]
   12968:	mov	r2, r4
   1296c:	mov	r3, r5
   12970:	ldr	r0, [sp, #72]	; 0x48
   12974:	bl	11190 <lseek64@plt>
   12978:	cmp	r0, #0
   1297c:	sbcs	r3, r1, #0
   12980:	blt	129a4 <__assert_fail@plt+0x161c>
   12984:	add	r3, sp, #16384	; 0x4000
   12988:	add	r3, r3, #184	; 0xb8
   1298c:	ldrd	r2, [r3]
   12990:	subs	r2, r4, r2
   12994:	sbc	r3, r5, r3
   12998:	mov	r4, r2
   1299c:	mov	r5, r3
   129a0:	strd	r4, [sp, #112]	; 0x70
   129a4:	mov	r3, #0
   129a8:	mov	r2, #0
   129ac:	ldr	r5, [sp, #72]	; 0x48
   129b0:	mov	r1, #2
   129b4:	strd	r2, [sp]
   129b8:	str	r1, [sp, #8]
   129bc:	mov	r0, r5
   129c0:	bl	133d0 <__assert_fail@plt+0x2048>
   129c4:	add	r3, sp, #140	; 0x8c
   129c8:	mov	r4, #16384	; 0x4000
   129cc:	mov	r7, r3
   129d0:	b	129ec <__assert_fail@plt+0x1664>
   129d4:	cmn	r0, #1
   129d8:	beq	12c10 <__assert_fail@plt+0x1888>
   129dc:	ldrd	r2, [sp, #112]	; 0x70
   129e0:	adds	r2, r2, r0
   129e4:	adc	r3, r3, #0
   129e8:	strd	r2, [sp, #112]	; 0x70
   129ec:	mov	r2, r4
   129f0:	mov	r1, r7
   129f4:	mov	r0, r5
   129f8:	bl	17c8c <__assert_fail@plt+0x6904>
   129fc:	cmp	r0, #0
   12a00:	bne	129d4 <__assert_fail@plt+0x164c>
   12a04:	mov	r8, #0
   12a08:	mov	r9, #0
   12a0c:	mov	sl, r8
   12a10:	mov	fp, r9
   12a14:	strd	r8, [sp, #32]
   12a18:	ldr	r2, [sp, #112]	; 0x70
   12a1c:	ldr	r3, [sp, #116]	; 0x74
   12a20:	mov	r6, #1
   12a24:	b	121a4 <__assert_fail@plt+0xe1c>
   12a28:	mov	r6, #1
   12a2c:	strd	r8, [sp, #32]
   12a30:	ldrd	r2, [sp, #40]	; 0x28
   12a34:	ldrd	r8, [sp, #56]	; 0x38
   12a38:	ldrd	r4, [sp, #32]
   12a3c:	cmp	r9, r3
   12a40:	cmpeq	r8, r2
   12a44:	movcc	r8, r2
   12a48:	movcc	r9, r3
   12a4c:	adds	r4, r4, r7
   12a50:	adc	r5, r5, #0
   12a54:	ldr	r2, [sp, #112]	; 0x70
   12a58:	strd	r4, [sp, #32]
   12a5c:	ldr	r3, [sp, #116]	; 0x74
   12a60:	b	121a4 <__assert_fail@plt+0xe1c>
   12a64:	strd	r8, [sp, #32]
   12a68:	bl	11280 <__errno_location@plt>
   12a6c:	mov	r6, #0
   12a70:	ldr	r2, [sp, #92]	; 0x5c
   12a74:	mov	r1, #3
   12a78:	ldr	r4, [r0]
   12a7c:	mov	r0, r6
   12a80:	bl	16900 <__assert_fail@plt+0x5578>
   12a84:	mov	r1, r4
   12a88:	ldr	r2, [pc, #524]	; 12c9c <__assert_fail@plt+0x1914>
   12a8c:	mov	r3, r0
   12a90:	mov	r0, r6
   12a94:	bl	111c0 <error@plt>
   12a98:	b	12a30 <__assert_fail@plt+0x16a8>
   12a9c:	ldrd	r2, [sp, #104]	; 0x68
   12aa0:	adds	r2, r2, #1
   12aa4:	adc	r3, r3, #0
   12aa8:	strd	r2, [sp, #104]	; 0x68
   12aac:	ldrd	r2, [sp, #32]
   12ab0:	cmp	r3, fp
   12ab4:	cmpeq	r2, sl
   12ab8:	strdcc	sl, [sp, #32]
   12abc:	mov	sl, #0
   12ac0:	mov	fp, #0
   12ac4:	uxtb	r2, r9
   12ac8:	mov	r3, #0
   12acc:	adds	r4, r4, r2
   12ad0:	adc	r5, r5, r3
   12ad4:	mov	r9, r8
   12ad8:	cmp	r6, r7
   12adc:	bne	12554 <__assert_fail@plt+0x11cc>
   12ae0:	ldr	r1, [sp, #68]	; 0x44
   12ae4:	b	12518 <__assert_fail@plt+0x1190>
   12ae8:	bic	sl, sl, #7
   12aec:	adds	sl, sl, #8
   12af0:	adc	fp, fp, #0
   12af4:	b	12ac4 <__assert_fail@plt+0x173c>
   12af8:	adds	sl, sl, #1
   12afc:	adc	fp, fp, #0
   12b00:	b	12ac4 <__assert_fail@plt+0x173c>
   12b04:	str	r3, [sp, #40]	; 0x28
   12b08:	bl	1122c <__ctype_b_loc@plt>
   12b0c:	ldr	r3, [sp, #40]	; 0x28
   12b10:	lsl	r2, r3, #1
   12b14:	ldr	r0, [r0]
   12b18:	ldrh	r2, [r0, r2]
   12b1c:	tst	r2, #16384	; 0x4000
   12b20:	beq	12ad8 <__assert_fail@plt+0x1750>
   12b24:	adds	sl, sl, #1
   12b28:	adc	fp, fp, #0
   12b2c:	tst	r2, #8192	; 0x2000
   12b30:	bne	12ac4 <__assert_fail@plt+0x173c>
   12b34:	mov	r0, r3
   12b38:	bl	112b0 <btowc@plt>
   12b3c:	ldr	r3, [sp, #76]	; 0x4c
   12b40:	ldrb	r3, [r3, #16]
   12b44:	cmp	r3, #0
   12b48:	movne	r9, r3
   12b4c:	bne	12ad8 <__assert_fail@plt+0x1750>
   12b50:	ldr	r3, [pc, #308]	; 12c8c <__assert_fail@plt+0x1904>
   12b54:	cmp	r0, r3
   12b58:	cmpne	r0, #160	; 0xa0
   12b5c:	beq	12ac4 <__assert_fail@plt+0x173c>
   12b60:	ldr	r2, [pc, #296]	; 12c90 <__assert_fail@plt+0x1908>
   12b64:	add	r3, r3, #40	; 0x28
   12b68:	cmp	r0, r2
   12b6c:	cmpne	r0, r3
   12b70:	movne	r9, #1
   12b74:	bne	12ad8 <__assert_fail@plt+0x1750>
   12b78:	b	12ac4 <__assert_fail@plt+0x173c>
   12b7c:	mov	r2, #5
   12b80:	ldr	r1, [pc, #280]	; 12ca0 <__assert_fail@plt+0x1918>
   12b84:	mov	r0, r3
   12b88:	bl	11124 <dcgettext@plt>
   12b8c:	str	r0, [sp, #92]	; 0x5c
   12b90:	b	120fc <__assert_fail@plt+0xd74>
   12b94:	bl	11280 <__errno_location@plt>
   12b98:	mov	r6, #0
   12b9c:	ldr	r2, [sp, #92]	; 0x5c
   12ba0:	mov	r1, #3
   12ba4:	mov	r7, r9
   12ba8:	ldr	r8, [r0]
   12bac:	mov	r0, r6
   12bb0:	bl	16900 <__assert_fail@plt+0x5578>
   12bb4:	mov	r1, r8
   12bb8:	ldr	r2, [pc, #220]	; 12c9c <__assert_fail@plt+0x1914>
   12bbc:	mov	r3, r0
   12bc0:	mov	r0, r6
   12bc4:	bl	111c0 <error@plt>
   12bc8:	ldrd	r8, [sp, #32]
   12bcc:	uxtb	r0, r7
   12bd0:	mov	r1, #0
   12bd4:	cmp	r9, fp
   12bd8:	cmpeq	r8, sl
   12bdc:	movcc	r9, fp
   12be0:	movcc	r8, sl
   12be4:	adds	sl, r4, r0
   12be8:	adc	fp, r5, r1
   12bec:	ldr	r2, [sp, #112]	; 0x70
   12bf0:	strd	sl, [sp, #32]
   12bf4:	ldr	r3, [sp, #116]	; 0x74
   12bf8:	mov	sl, #0
   12bfc:	mov	fp, #0
   12c00:	b	121a4 <__assert_fail@plt+0xe1c>
   12c04:	mov	r7, r9
   12c08:	mov	r6, #1
   12c0c:	b	12bc8 <__assert_fail@plt+0x1840>
   12c10:	bl	11280 <__errno_location@plt>
   12c14:	mov	r8, #0
   12c18:	mov	r9, #0
   12c1c:	ldr	r2, [sp, #92]	; 0x5c
   12c20:	mov	r1, #3
   12c24:	strd	r8, [sp, #32]
   12c28:	mov	sl, r8
   12c2c:	mov	fp, r9
   12c30:	ldr	r7, [r0]
   12c34:	mov	r0, #0
   12c38:	bl	16900 <__assert_fail@plt+0x5578>
   12c3c:	ldr	r2, [pc, #88]	; 12c9c <__assert_fail@plt+0x1914>
   12c40:	mov	r1, r7
   12c44:	mov	r3, r0
   12c48:	mov	r0, #0
   12c4c:	bl	111c0 <error@plt>
   12c50:	ldr	r2, [sp, #112]	; 0x70
   12c54:	ldr	r3, [sp, #116]	; 0x74
   12c58:	b	121a4 <__assert_fail@plt+0xe1c>
   12c5c:	mov	r3, #1
   12c60:	str	r3, [sp]
   12c64:	mov	r2, #0
   12c68:	mov	r3, #0
   12c6c:	ldr	r0, [sp, #72]	; 0x48
   12c70:	bl	11190 <lseek64@plt>
   12c74:	add	r3, sp, #16384	; 0x4000
   12c78:	add	r3, r3, #184	; 0xb8
   12c7c:	strd	r0, [r3]
   12c80:	b	12628 <__assert_fail@plt+0x12a0>
   12c84:	andeq	fp, r2, r0, lsr #3
   12c88:	andeq	sl, r1, ip, lsr r7
   12c8c:	andeq	r2, r0, r7
   12c90:	andeq	r2, r0, r0, rrx
   12c94:	andeq	r4, r0, r1
   12c98:	andeq	r0, r0, r1, lsl #4
   12c9c:	andeq	sl, r1, r8, lsr r7
   12ca0:	andeq	r9, r1, r0, lsr #31
   12ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca8:	sub	sp, sp, #16384	; 0x4000
   12cac:	sub	sp, sp, #44	; 0x2c
   12cb0:	mov	r4, #0
   12cb4:	mov	r5, #0
   12cb8:	mov	r8, r1
   12cbc:	add	r7, sp, #36	; 0x24
   12cc0:	mov	sl, #16384	; 0x4000
   12cc4:	mov	r6, #10
   12cc8:	strd	r4, [sp, #8]
   12ccc:	str	r0, [sp, #20]
   12cd0:	str	r2, [sp, #24]
   12cd4:	str	r3, [sp, #28]
   12cd8:	strd	r4, [sp]
   12cdc:	mov	r2, sl
   12ce0:	mov	r1, r7
   12ce4:	mov	r0, r8
   12ce8:	bl	17c8c <__assert_fail@plt+0x6904>
   12cec:	subs	r9, r0, #0
   12cf0:	beq	12de0 <__assert_fail@plt+0x1a58>
   12cf4:	cmn	r9, #1
   12cf8:	beq	12e08 <__assert_fail@plt+0x1a80>
   12cfc:	ldrd	r2, [sp, #8]
   12d00:	add	fp, r7, r9
   12d04:	adds	r2, r2, r9
   12d08:	adc	r3, r3, #0
   12d0c:	cmp	r4, #0
   12d10:	strd	r2, [sp, #8]
   12d14:	bne	12d7c <__assert_fail@plt+0x19f4>
   12d18:	cmp	fp, r7
   12d1c:	beq	12e44 <__assert_fail@plt+0x1abc>
   12d20:	ldrd	r2, [sp]
   12d24:	mov	r0, r7
   12d28:	ldrb	r1, [r0], #1
   12d2c:	sub	r1, r1, #10
   12d30:	clz	r1, r1
   12d34:	lsr	r1, r1, #5
   12d38:	adds	r2, r2, r1
   12d3c:	adc	r3, r3, #0
   12d40:	cmp	fp, r0
   12d44:	bne	12d28 <__assert_fail@plt+0x19a0>
   12d48:	ldr	r1, [pc, #252]	; 12e4c <__assert_fail@plt+0x1ac4>
   12d4c:	ldrd	r4, [sp]
   12d50:	strd	r2, [sp]
   12d54:	umull	r1, r0, r1, r9
   12d58:	subs	r4, r2, r4
   12d5c:	sbc	r5, r3, r5
   12d60:	mov	r1, #0
   12d64:	cmp	r5, r1
   12d68:	lsr	r0, r0, #3
   12d6c:	cmpeq	r4, r0
   12d70:	movls	r4, #1
   12d74:	movhi	r4, #0
   12d78:	b	12cdc <__assert_fail@plt+0x1954>
   12d7c:	strb	r6, [r7, r9]
   12d80:	ldrd	r4, [sp]
   12d84:	mov	r0, r7
   12d88:	b	12d94 <__assert_fail@plt+0x1a0c>
   12d8c:	adds	r4, r4, #1
   12d90:	adc	r5, r5, #0
   12d94:	mov	r1, r6
   12d98:	bl	11160 <rawmemchr@plt>
   12d9c:	mov	r3, r0
   12da0:	cmp	fp, r3
   12da4:	add	r0, r0, #1
   12da8:	bhi	12d8c <__assert_fail@plt+0x1a04>
   12dac:	ldr	r3, [pc, #152]	; 12e4c <__assert_fail@plt+0x1ac4>
   12db0:	ldrd	r0, [sp]
   12db4:	strd	r4, [sp]
   12db8:	umull	r3, r2, r3, r9
   12dbc:	subs	r0, r4, r0
   12dc0:	sbc	r1, r5, r1
   12dc4:	mov	r3, #0
   12dc8:	cmp	r1, r3
   12dcc:	lsr	r2, r2, #3
   12dd0:	cmpeq	r0, r2
   12dd4:	movls	r4, #1
   12dd8:	movhi	r4, #0
   12ddc:	b	12cdc <__assert_fail@plt+0x1954>
   12de0:	ldr	r1, [sp, #28]
   12de4:	ldrd	r2, [sp, #8]
   12de8:	mov	r0, #1
   12dec:	strd	r2, [r1]
   12df0:	ldr	r1, [sp, #24]
   12df4:	ldrd	r2, [sp]
   12df8:	strd	r2, [r1]
   12dfc:	add	sp, sp, #16384	; 0x4000
   12e00:	add	sp, sp, #44	; 0x2c
   12e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e08:	bl	11280 <__errno_location@plt>
   12e0c:	ldr	r2, [sp, #20]
   12e10:	mov	r1, #3
   12e14:	ldr	r4, [r0]
   12e18:	mov	r0, #0
   12e1c:	bl	16900 <__assert_fail@plt+0x5578>
   12e20:	mov	r1, r4
   12e24:	ldr	r2, [pc, #36]	; 12e50 <__assert_fail@plt+0x1ac8>
   12e28:	mov	r3, r0
   12e2c:	mov	r0, #0
   12e30:	bl	111c0 <error@plt>
   12e34:	mov	r0, #0
   12e38:	add	sp, sp, #16384	; 0x4000
   12e3c:	add	sp, sp, #44	; 0x2c
   12e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e44:	mov	r4, #1
   12e48:	b	12cdc <__assert_fail@plt+0x1954>
   12e4c:	stmhi	r8, {r0, r3, r7, fp, pc}
   12e50:	andeq	sl, r1, r8, lsr r7
   12e54:	cmp	r3, #0
   12e58:	cmpne	r2, #0
   12e5c:	beq	12e64 <__assert_fail@plt+0x1adc>
   12e60:	b	12ca4 <__assert_fail@plt+0x191c>
   12e64:	mov	r0, #0
   12e68:	bx	lr
   12e6c:	subs	r6, r0, #0
   12e70:	push	{r7, lr}
   12e74:	sub	sp, sp, #56	; 0x38
   12e78:	beq	12eb4 <__assert_fail@plt+0x1b2c>
   12e7c:	ldr	r3, [pc, #688]	; 13134 <__assert_fail@plt+0x1dac>
   12e80:	mov	r2, #5
   12e84:	ldr	r1, [pc, #684]	; 13138 <__assert_fail@plt+0x1db0>
   12e88:	mov	r0, #0
   12e8c:	ldr	r4, [r3]
   12e90:	bl	11124 <dcgettext@plt>
   12e94:	ldr	r3, [pc, #672]	; 1313c <__assert_fail@plt+0x1db4>
   12e98:	mov	r1, #1
   12e9c:	ldr	r3, [r3]
   12ea0:	mov	r2, r0
   12ea4:	mov	r0, r4
   12ea8:	bl	112e0 <__fprintf_chk@plt>
   12eac:	mov	r0, r6
   12eb0:	bl	11238 <exit@plt>
   12eb4:	mov	r2, #5
   12eb8:	ldr	r1, [pc, #640]	; 13140 <__assert_fail@plt+0x1db8>
   12ebc:	bl	11124 <dcgettext@plt>
   12ec0:	ldr	r3, [pc, #628]	; 1313c <__assert_fail@plt+0x1db4>
   12ec4:	ldr	r7, [pc, #632]	; 13144 <__assert_fail@plt+0x1dbc>
   12ec8:	ldr	r4, [pc, #632]	; 13148 <__assert_fail@plt+0x1dc0>
   12ecc:	ldr	r3, [r3]
   12ed0:	mov	r2, r3
   12ed4:	mov	r1, r0
   12ed8:	mov	r0, #1
   12edc:	bl	112c8 <__printf_chk@plt>
   12ee0:	mov	r2, #5
   12ee4:	ldr	r1, [pc, #608]	; 1314c <__assert_fail@plt+0x1dc4>
   12ee8:	mov	r0, r6
   12eec:	bl	11124 <dcgettext@plt>
   12ef0:	ldr	r1, [r7]
   12ef4:	bl	11070 <fputs_unlocked@plt>
   12ef8:	mov	r2, #5
   12efc:	ldr	r1, [pc, #588]	; 13150 <__assert_fail@plt+0x1dc8>
   12f00:	mov	r0, r6
   12f04:	bl	11124 <dcgettext@plt>
   12f08:	ldr	r1, [r7]
   12f0c:	bl	11070 <fputs_unlocked@plt>
   12f10:	mov	r2, #5
   12f14:	ldr	r1, [pc, #568]	; 13154 <__assert_fail@plt+0x1dcc>
   12f18:	mov	r0, r6
   12f1c:	bl	11124 <dcgettext@plt>
   12f20:	ldr	r1, [r7]
   12f24:	bl	11070 <fputs_unlocked@plt>
   12f28:	mov	r2, #5
   12f2c:	ldr	r1, [pc, #548]	; 13158 <__assert_fail@plt+0x1dd0>
   12f30:	mov	r0, r6
   12f34:	bl	11124 <dcgettext@plt>
   12f38:	ldr	r1, [r7]
   12f3c:	bl	11070 <fputs_unlocked@plt>
   12f40:	mov	r2, #5
   12f44:	ldr	r1, [pc, #528]	; 1315c <__assert_fail@plt+0x1dd4>
   12f48:	mov	r0, r6
   12f4c:	bl	11124 <dcgettext@plt>
   12f50:	ldr	r1, [r7]
   12f54:	bl	11070 <fputs_unlocked@plt>
   12f58:	mov	r2, #5
   12f5c:	ldr	r1, [pc, #508]	; 13160 <__assert_fail@plt+0x1dd8>
   12f60:	mov	r0, r6
   12f64:	bl	11124 <dcgettext@plt>
   12f68:	ldr	r1, [r7]
   12f6c:	bl	11070 <fputs_unlocked@plt>
   12f70:	ldm	r4!, {r0, r1, r2, r3}
   12f74:	mov	lr, sp
   12f78:	stmia	lr!, {r0, r1, r2, r3}
   12f7c:	ldm	r4!, {r0, r1, r2, r3}
   12f80:	ldr	ip, [sp]
   12f84:	stmia	lr!, {r0, r1, r2, r3}
   12f88:	cmp	ip, #0
   12f8c:	ldm	r4!, {r0, r1, r2, r3}
   12f90:	stmia	lr!, {r0, r1, r2, r3}
   12f94:	ldm	r4, {r0, r1}
   12f98:	moveq	r4, sp
   12f9c:	stm	lr, {r0, r1}
   12fa0:	beq	12fd0 <__assert_fail@plt+0x1c48>
   12fa4:	ldr	r5, [pc, #440]	; 13164 <__assert_fail@plt+0x1ddc>
   12fa8:	mov	r4, sp
   12fac:	b	12fbc <__assert_fail@plt+0x1c34>
   12fb0:	ldr	ip, [r4, #8]!
   12fb4:	cmp	ip, #0
   12fb8:	beq	12fd0 <__assert_fail@plt+0x1c48>
   12fbc:	mov	r1, ip
   12fc0:	mov	r0, r5
   12fc4:	bl	11088 <strcmp@plt>
   12fc8:	cmp	r0, #0
   12fcc:	bne	12fb0 <__assert_fail@plt+0x1c28>
   12fd0:	ldr	r4, [r4, #4]
   12fd4:	mov	r2, #5
   12fd8:	cmp	r4, #0
   12fdc:	ldr	r1, [pc, #388]	; 13168 <__assert_fail@plt+0x1de0>
   12fe0:	beq	13088 <__assert_fail@plt+0x1d00>
   12fe4:	mov	r0, #0
   12fe8:	bl	11124 <dcgettext@plt>
   12fec:	ldr	r3, [pc, #376]	; 1316c <__assert_fail@plt+0x1de4>
   12ff0:	ldr	r2, [pc, #376]	; 13170 <__assert_fail@plt+0x1de8>
   12ff4:	mov	r1, r0
   12ff8:	mov	r0, #1
   12ffc:	bl	112c8 <__printf_chk@plt>
   13000:	mov	r1, #0
   13004:	mov	r0, #5
   13008:	bl	11310 <setlocale@plt>
   1300c:	cmp	r0, #0
   13010:	ldreq	r5, [pc, #332]	; 13164 <__assert_fail@plt+0x1ddc>
   13014:	beq	13030 <__assert_fail@plt+0x1ca8>
   13018:	mov	r2, #3
   1301c:	ldr	r1, [pc, #336]	; 13174 <__assert_fail@plt+0x1dec>
   13020:	bl	11364 <strncmp@plt>
   13024:	ldr	r5, [pc, #312]	; 13164 <__assert_fail@plt+0x1ddc>
   13028:	cmp	r0, #0
   1302c:	bne	13118 <__assert_fail@plt+0x1d90>
   13030:	mov	r2, #5
   13034:	ldr	r1, [pc, #316]	; 13178 <__assert_fail@plt+0x1df0>
   13038:	mov	r0, #0
   1303c:	bl	11124 <dcgettext@plt>
   13040:	ldr	r3, [pc, #284]	; 13164 <__assert_fail@plt+0x1ddc>
   13044:	ldr	r2, [pc, #288]	; 1316c <__assert_fail@plt+0x1de4>
   13048:	mov	r1, r0
   1304c:	mov	r0, #1
   13050:	bl	112c8 <__printf_chk@plt>
   13054:	mov	r2, #5
   13058:	ldr	r1, [pc, #284]	; 1317c <__assert_fail@plt+0x1df4>
   1305c:	mov	r0, #0
   13060:	bl	11124 <dcgettext@plt>
   13064:	ldr	r2, [pc, #276]	; 13180 <__assert_fail@plt+0x1df8>
   13068:	cmp	r4, r5
   1306c:	ldr	r3, [pc, #272]	; 13184 <__assert_fail@plt+0x1dfc>
   13070:	movne	r3, r2
   13074:	mov	r1, r0
   13078:	mov	r2, r4
   1307c:	mov	r0, #1
   13080:	bl	112c8 <__printf_chk@plt>
   13084:	b	12eac <__assert_fail@plt+0x1b24>
   13088:	mov	r0, r4
   1308c:	bl	11124 <dcgettext@plt>
   13090:	ldr	r3, [pc, #212]	; 1316c <__assert_fail@plt+0x1de4>
   13094:	ldr	r2, [pc, #212]	; 13170 <__assert_fail@plt+0x1de8>
   13098:	mov	r1, r0
   1309c:	mov	r0, #1
   130a0:	bl	112c8 <__printf_chk@plt>
   130a4:	mov	r1, r4
   130a8:	mov	r0, #5
   130ac:	bl	11310 <setlocale@plt>
   130b0:	cmp	r0, #0
   130b4:	beq	130cc <__assert_fail@plt+0x1d44>
   130b8:	mov	r2, #3
   130bc:	ldr	r1, [pc, #176]	; 13174 <__assert_fail@plt+0x1dec>
   130c0:	bl	11364 <strncmp@plt>
   130c4:	cmp	r0, #0
   130c8:	bne	13110 <__assert_fail@plt+0x1d88>
   130cc:	mov	r2, #5
   130d0:	ldr	r1, [pc, #160]	; 13178 <__assert_fail@plt+0x1df0>
   130d4:	mov	r0, #0
   130d8:	bl	11124 <dcgettext@plt>
   130dc:	ldr	r3, [pc, #128]	; 13164 <__assert_fail@plt+0x1ddc>
   130e0:	ldr	r2, [pc, #132]	; 1316c <__assert_fail@plt+0x1de4>
   130e4:	mov	r4, r3
   130e8:	mov	r1, r0
   130ec:	mov	r0, #1
   130f0:	bl	112c8 <__printf_chk@plt>
   130f4:	ldr	r1, [pc, #128]	; 1317c <__assert_fail@plt+0x1df4>
   130f8:	mov	r2, #5
   130fc:	mov	r0, #0
   13100:	bl	11124 <dcgettext@plt>
   13104:	ldr	r3, [pc, #120]	; 13184 <__assert_fail@plt+0x1dfc>
   13108:	mov	r1, r0
   1310c:	b	13078 <__assert_fail@plt+0x1cf0>
   13110:	ldr	r5, [pc, #76]	; 13164 <__assert_fail@plt+0x1ddc>
   13114:	mov	r4, r5
   13118:	mov	r2, #5
   1311c:	ldr	r1, [pc, #100]	; 13188 <__assert_fail@plt+0x1e00>
   13120:	mov	r0, #0
   13124:	bl	11124 <dcgettext@plt>
   13128:	ldr	r1, [r7]
   1312c:	bl	11070 <fputs_unlocked@plt>
   13130:	b	13030 <__assert_fail@plt+0x1ca8>
   13134:	andeq	fp, r2, r8, lsl #3
   13138:			; <UNDEFINED> instruction: 0x00019fb4
   1313c:	strdeq	fp, [r2], -r0
   13140:	ldrdeq	r9, [r1], -ip
   13144:	muleq	r2, r4, r1
   13148:			; <UNDEFINED> instruction: 0x00019ebc
   1314c:	andeq	sl, r1, r4, lsr #32
   13150:	andeq	sl, r1, r8, ror #1
   13154:	andeq	sl, r1, r0, lsr #2
   13158:	andeq	sl, r1, r0, asr r2
   1315c:	andeq	sl, r1, r0, lsl #7
   13160:			; <UNDEFINED> instruction: 0x0001a3b0
   13164:			; <UNDEFINED> instruction: 0x00019fb0
   13168:	andeq	sl, r1, r8, ror #7
   1316c:	andeq	sl, r1, r0, lsl #8
   13170:	andeq	sl, r1, r8, lsr #8
   13174:	andeq	sl, r1, r8, lsr r4
   13178:	andeq	sl, r1, r4, lsl #9
   1317c:	andeq	sl, r1, r0, lsr #9
   13180:	andeq	sl, r1, ip, ror r3
   13184:	andeq	sl, r1, ip, ror #12
   13188:	andeq	sl, r1, ip, lsr r4
   1318c:	push	{r4, lr}
   13190:	mov	r4, r0
   13194:	mov	r0, #24
   13198:	bl	18e00 <__assert_fail@plt+0x7a78>
   1319c:	cmp	r0, #0
   131a0:	movne	r3, #0
   131a4:	strne	r4, [r0, #16]
   131a8:	strne	r4, [r0, #20]
   131ac:	strne	r3, [r0]
   131b0:	pop	{r4, pc}
   131b4:	push	{r4, lr}
   131b8:	mov	r4, r0
   131bc:	mov	r0, #24
   131c0:	bl	18e00 <__assert_fail@plt+0x7a78>
   131c4:	cmp	r0, #0
   131c8:	popeq	{r4, pc}
   131cc:	mov	r3, #0
   131d0:	str	r4, [r0]
   131d4:	str	r3, [r0, #8]
   131d8:	str	r3, [r0, #12]
   131dc:	str	r3, [r0, #4]
   131e0:	str	r3, [r0, #16]
   131e4:	pop	{r4, pc}
   131e8:	ldr	r3, [r0]
   131ec:	cmp	r3, #0
   131f0:	beq	13238 <__assert_fail@plt+0x1eb0>
   131f4:	push	{r4, r5, r6, lr}
   131f8:	mov	r2, #0
   131fc:	mov	r5, r1
   13200:	mov	r4, r0
   13204:	add	r1, r0, #12
   13208:	add	r0, r0, #8
   1320c:	bl	1134c <getdelim@plt>
   13210:	cmp	r0, #0
   13214:	blt	13264 <__assert_fail@plt+0x1edc>
   13218:	ldr	r3, [r4, #4]
   1321c:	mov	r2, #1
   13220:	add	r3, r3, r2
   13224:	str	r2, [r5]
   13228:	ldr	r2, [r4, #8]
   1322c:	str	r3, [r4, #4]
   13230:	mov	r0, r2
   13234:	pop	{r4, r5, r6, pc}
   13238:	ldr	r3, [r0, #20]
   1323c:	ldr	r2, [r3]
   13240:	cmp	r2, #0
   13244:	moveq	r3, #2
   13248:	addne	r3, r3, #4
   1324c:	movne	ip, #1
   13250:	strne	ip, [r1]
   13254:	streq	r3, [r1]
   13258:	strne	r3, [r0, #20]
   1325c:	mov	r0, r2
   13260:	bx	lr
   13264:	ldr	r0, [r4]
   13268:	bl	11244 <feof@plt>
   1326c:	mov	r2, #0
   13270:	cmp	r0, r2
   13274:	movne	r0, #2
   13278:	moveq	r0, #4
   1327c:	str	r0, [r5]
   13280:	b	13230 <__assert_fail@plt+0x1ea8>
   13284:	ldr	r3, [r0]
   13288:	cmp	r3, #0
   1328c:	ldreq	r3, [r0, #20]
   13290:	ldrne	r0, [r0, #4]
   13294:	ldreq	r0, [r0, #16]
   13298:	subeq	r0, r3, r0
   1329c:	asreq	r0, r0, #2
   132a0:	bx	lr
   132a4:	ldr	r3, [r0]
   132a8:	push	{r4, lr}
   132ac:	cmp	r3, #0
   132b0:	mov	r4, r0
   132b4:	beq	132c0 <__assert_fail@plt+0x1f38>
   132b8:	ldr	r0, [r0, #8]
   132bc:	bl	13510 <__assert_fail@plt+0x2188>
   132c0:	mov	r0, r4
   132c4:	pop	{r4, lr}
   132c8:	b	13510 <__assert_fail@plt+0x2188>
   132cc:	ldr	r3, [pc, #4]	; 132d8 <__assert_fail@plt+0x1f50>
   132d0:	str	r0, [r3]
   132d4:	bx	lr
   132d8:	andeq	fp, r2, r8, ror #3
   132dc:	ldr	r3, [pc, #4]	; 132e8 <__assert_fail@plt+0x1f60>
   132e0:	strb	r0, [r3, #4]
   132e4:	bx	lr
   132e8:	andeq	fp, r2, r8, ror #3
   132ec:	ldr	r3, [pc, #192]	; 133b4 <__assert_fail@plt+0x202c>
   132f0:	push	{r4, r5, r6, lr}
   132f4:	sub	sp, sp, #8
   132f8:	ldr	r0, [r3]
   132fc:	bl	18e88 <__assert_fail@plt+0x7b00>
   13300:	cmp	r0, #0
   13304:	beq	13328 <__assert_fail@plt+0x1fa0>
   13308:	ldr	r4, [pc, #168]	; 133b8 <__assert_fail@plt+0x2030>
   1330c:	ldrb	r3, [r4, #4]
   13310:	cmp	r3, #0
   13314:	beq	13344 <__assert_fail@plt+0x1fbc>
   13318:	bl	11280 <__errno_location@plt>
   1331c:	ldr	r3, [r0]
   13320:	cmp	r3, #32
   13324:	bne	13344 <__assert_fail@plt+0x1fbc>
   13328:	ldr	r3, [pc, #140]	; 133bc <__assert_fail@plt+0x2034>
   1332c:	ldr	r0, [r3]
   13330:	bl	18e88 <__assert_fail@plt+0x7b00>
   13334:	cmp	r0, #0
   13338:	bne	1338c <__assert_fail@plt+0x2004>
   1333c:	add	sp, sp, #8
   13340:	pop	{r4, r5, r6, pc}
   13344:	mov	r2, #5
   13348:	ldr	r1, [pc, #112]	; 133c0 <__assert_fail@plt+0x2038>
   1334c:	mov	r0, #0
   13350:	bl	11124 <dcgettext@plt>
   13354:	ldr	r4, [r4]
   13358:	cmp	r4, #0
   1335c:	mov	r5, r0
   13360:	beq	13398 <__assert_fail@plt+0x2010>
   13364:	bl	11280 <__errno_location@plt>
   13368:	ldr	r6, [r0]
   1336c:	mov	r0, r4
   13370:	bl	16594 <__assert_fail@plt+0x520c>
   13374:	mov	r1, r6
   13378:	str	r5, [sp]
   1337c:	ldr	r2, [pc, #64]	; 133c4 <__assert_fail@plt+0x203c>
   13380:	mov	r3, r0
   13384:	mov	r0, #0
   13388:	bl	111c0 <error@plt>
   1338c:	ldr	r3, [pc, #52]	; 133c8 <__assert_fail@plt+0x2040>
   13390:	ldr	r0, [r3]
   13394:	bl	110e8 <_exit@plt>
   13398:	bl	11280 <__errno_location@plt>
   1339c:	mov	r3, r5
   133a0:	ldr	r2, [pc, #36]	; 133cc <__assert_fail@plt+0x2044>
   133a4:	ldr	r1, [r0]
   133a8:	mov	r0, r4
   133ac:	bl	111c0 <error@plt>
   133b0:	b	1338c <__assert_fail@plt+0x2004>
   133b4:	muleq	r2, r4, r1
   133b8:	andeq	fp, r2, r8, ror #3
   133bc:	andeq	fp, r2, r8, lsl #3
   133c0:	andeq	sl, r1, r8, lsr #14
   133c4:	andeq	sl, r1, r4, lsr r7
   133c8:	andeq	fp, r2, ip, lsr #2
   133cc:	andeq	sl, r1, r8, lsr r7
   133d0:	push	{r4, r5}
   133d4:	pop	{r4, r5}
   133d8:	b	11094 <posix_fadvise64@plt>
   133dc:	cmp	r0, #0
   133e0:	bxeq	lr
   133e4:	push	{r4, lr}
   133e8:	sub	sp, sp, #16
   133ec:	mov	r4, r1
   133f0:	bl	112d4 <fileno@plt>
   133f4:	mov	r2, #0
   133f8:	mov	r3, #0
   133fc:	str	r4, [sp, #8]
   13400:	strd	r2, [sp]
   13404:	bl	11094 <posix_fadvise64@plt>
   13408:	add	sp, sp, #16
   1340c:	pop	{r4, pc}
   13410:	push	{r4, r5, lr}
   13414:	sub	sp, sp, #12
   13418:	mov	r4, r0
   1341c:	bl	112d4 <fileno@plt>
   13420:	cmp	r0, #0
   13424:	mov	r0, r4
   13428:	blt	134a4 <__assert_fail@plt+0x211c>
   1342c:	bl	11208 <__freading@plt>
   13430:	cmp	r0, #0
   13434:	bne	13470 <__assert_fail@plt+0x20e8>
   13438:	mov	r0, r4
   1343c:	bl	134b0 <__assert_fail@plt+0x2128>
   13440:	cmp	r0, #0
   13444:	beq	134a0 <__assert_fail@plt+0x2118>
   13448:	bl	11280 <__errno_location@plt>
   1344c:	mov	r5, r0
   13450:	mov	r0, r4
   13454:	ldr	r4, [r5]
   13458:	bl	112ec <fclose@plt>
   1345c:	cmp	r4, #0
   13460:	mvnne	r0, #0
   13464:	strne	r4, [r5]
   13468:	add	sp, sp, #12
   1346c:	pop	{r4, r5, pc}
   13470:	mov	r0, r4
   13474:	bl	112d4 <fileno@plt>
   13478:	mov	r3, #1
   1347c:	str	r3, [sp]
   13480:	mov	r2, #0
   13484:	mov	r3, #0
   13488:	bl	11190 <lseek64@plt>
   1348c:	mvn	r3, #0
   13490:	mvn	r2, #0
   13494:	cmp	r1, r3
   13498:	cmpeq	r0, r2
   1349c:	bne	13438 <__assert_fail@plt+0x20b0>
   134a0:	mov	r0, r4
   134a4:	add	sp, sp, #12
   134a8:	pop	{r4, r5, lr}
   134ac:	b	112ec <fclose@plt>
   134b0:	push	{r4, lr}
   134b4:	subs	r4, r0, #0
   134b8:	sub	sp, sp, #8
   134bc:	beq	134d8 <__assert_fail@plt+0x2150>
   134c0:	bl	11208 <__freading@plt>
   134c4:	cmp	r0, #0
   134c8:	beq	134d8 <__assert_fail@plt+0x2150>
   134cc:	ldr	r3, [r4]
   134d0:	tst	r3, #256	; 0x100
   134d4:	bne	134e8 <__assert_fail@plt+0x2160>
   134d8:	mov	r0, r4
   134dc:	add	sp, sp, #8
   134e0:	pop	{r4, lr}
   134e4:	b	110ac <fflush@plt>
   134e8:	mov	r3, #1
   134ec:	str	r3, [sp]
   134f0:	mov	r2, #0
   134f4:	mov	r3, #0
   134f8:	mov	r0, r4
   134fc:	bl	13568 <__assert_fail@plt+0x21e0>
   13500:	mov	r0, r4
   13504:	add	sp, sp, #8
   13508:	pop	{r4, lr}
   1350c:	b	110ac <fflush@plt>
   13510:	push	{r4, r5, lr}
   13514:	sub	sp, sp, #12
   13518:	mov	r5, r0
   1351c:	bl	11280 <__errno_location@plt>
   13520:	mov	r2, #0
   13524:	mov	r4, r0
   13528:	ldr	r3, [r0]
   1352c:	str	r2, [r4]
   13530:	mov	r0, r5
   13534:	str	r3, [sp]
   13538:	str	r3, [sp, #4]
   1353c:	bl	110d0 <free@plt>
   13540:	ldr	r3, [r4]
   13544:	add	r2, sp, #8
   13548:	cmp	r3, #0
   1354c:	moveq	r3, #4
   13550:	movne	r3, #0
   13554:	add	r3, r2, r3
   13558:	ldr	r3, [r3, #-8]
   1355c:	str	r3, [r4]
   13560:	add	sp, sp, #12
   13564:	pop	{r4, r5, pc}
   13568:	push	{r4, r5, r6, r7, r8, lr}
   1356c:	sub	sp, sp, #8
   13570:	ldmib	r0, {ip, lr}
   13574:	mov	r4, r0
   13578:	ldr	r5, [sp, #32]
   1357c:	cmp	lr, ip
   13580:	beq	13598 <__assert_fail@plt+0x2210>
   13584:	str	r5, [sp, #32]
   13588:	mov	r0, r4
   1358c:	add	sp, sp, #8
   13590:	pop	{r4, r5, r6, r7, r8, lr}
   13594:	b	112f8 <fseeko64@plt>
   13598:	ldr	lr, [r0, #20]
   1359c:	ldr	ip, [r0, #16]
   135a0:	cmp	lr, ip
   135a4:	bne	13584 <__assert_fail@plt+0x21fc>
   135a8:	ldr	r8, [r0, #36]	; 0x24
   135ac:	cmp	r8, #0
   135b0:	bne	13584 <__assert_fail@plt+0x21fc>
   135b4:	mov	r6, r2
   135b8:	mov	r7, r3
   135bc:	bl	112d4 <fileno@plt>
   135c0:	mov	r2, r6
   135c4:	mov	r3, r7
   135c8:	str	r5, [sp]
   135cc:	bl	11190 <lseek64@plt>
   135d0:	mvn	r3, #0
   135d4:	mvn	r2, #0
   135d8:	cmp	r1, r3
   135dc:	cmpeq	r0, r2
   135e0:	beq	13600 <__assert_fail@plt+0x2278>
   135e4:	ldr	r3, [r4]
   135e8:	strd	r0, [r4, #80]	; 0x50
   135ec:	mov	r0, r8
   135f0:	bic	r3, r3, #16
   135f4:	str	r3, [r4]
   135f8:	add	sp, sp, #8
   135fc:	pop	{r4, r5, r6, r7, r8, pc}
   13600:	mvn	r0, #0
   13604:	b	135f8 <__assert_fail@plt+0x2270>
   13608:	push	{r4, r5, r6, r8, r9, lr}
   1360c:	mov	r4, r0
   13610:	mov	r5, r1
   13614:	add	r6, r2, #20
   13618:	mov	r8, #10
   1361c:	mov	r9, #0
   13620:	mov	r3, #0
   13624:	strb	r3, [r2, #20]
   13628:	mov	r0, r4
   1362c:	mov	r1, r5
   13630:	mov	r2, r8
   13634:	mov	r3, r9
   13638:	bl	19cb8 <_obstack_memory_used@@Base+0x91c>
   1363c:	mov	r0, r4
   13640:	mov	r1, r5
   13644:	mov	r3, r9
   13648:	add	r2, r2, #48	; 0x30
   1364c:	strb	r2, [r6, #-1]!
   13650:	mov	r2, r8
   13654:	bl	19cb8 <_obstack_memory_used@@Base+0x91c>
   13658:	mov	r4, r0
   1365c:	mov	r5, r1
   13660:	orrs	r3, r4, r5
   13664:	bne	13628 <__assert_fail@plt+0x22a0>
   13668:	mov	r0, r6
   1366c:	pop	{r4, r5, r6, r8, r9, pc}
   13670:	push	{r4, lr}
   13674:	mov	r4, r0
   13678:	bl	110b8 <wcwidth@plt>
   1367c:	cmp	r0, #0
   13680:	popge	{r4, pc}
   13684:	mov	r0, r4
   13688:	bl	11154 <iswcntrl@plt>
   1368c:	clz	r0, r0
   13690:	lsr	r0, r0, #5
   13694:	pop	{r4, pc}
   13698:	mov	r3, r1
   1369c:	push	{r4, r5, r6, lr}
   136a0:	mov	r4, r1
   136a4:	ldr	r1, [r3], #16
   136a8:	mov	r5, r0
   136ac:	cmp	r1, r3
   136b0:	strne	r1, [r0]
   136b4:	beq	136d8 <__assert_fail@plt+0x2350>
   136b8:	ldrb	r3, [r4, #8]
   136bc:	ldr	r2, [r4, #4]
   136c0:	cmp	r3, #0
   136c4:	strb	r3, [r5, #8]
   136c8:	ldrne	r3, [r4, #12]
   136cc:	str	r2, [r5, #4]
   136d0:	strne	r3, [r5, #12]
   136d4:	pop	{r4, r5, r6, pc}
   136d8:	add	r3, r0, #16
   136dc:	mov	r0, r3
   136e0:	ldr	r2, [r4, #4]
   136e4:	bl	110f4 <memcpy@plt>
   136e8:	str	r0, [r5]
   136ec:	b	136b8 <__assert_fail@plt+0x2330>
   136f0:	ldr	r3, [pc, #20]	; 1370c <__assert_fail@plt+0x2384>
   136f4:	lsr	r2, r0, #5
   136f8:	and	r0, r0, #31
   136fc:	ldr	r3, [r3, r2, lsl #2]
   13700:	lsr	r0, r3, r0
   13704:	and	r0, r0, #1
   13708:	bx	lr
   1370c:	andeq	sl, r1, ip, lsr r7
   13710:	push	{r4, r5, r6, r7, lr}
   13714:	subs	r6, r0, #0
   13718:	sub	sp, sp, #12
   1371c:	addeq	r6, sp, #4
   13720:	mov	r0, r6
   13724:	mov	r5, r2
   13728:	mov	r7, r1
   1372c:	bl	111b4 <mbrtowc@plt>
   13730:	cmp	r5, #0
   13734:	cmnne	r0, #3
   13738:	mov	r4, r0
   1373c:	bls	13758 <__assert_fail@plt+0x23d0>
   13740:	mov	r0, #0
   13744:	bl	18f04 <__assert_fail@plt+0x7b7c>
   13748:	cmp	r0, #0
   1374c:	moveq	r4, #1
   13750:	ldrbeq	r3, [r7]
   13754:	streq	r3, [r6]
   13758:	mov	r0, r4
   1375c:	add	sp, sp, #12
   13760:	pop	{r4, r5, r6, r7, pc}
   13764:	andeq	r0, r0, r0
   13768:	push	{lr}		; (str lr, [sp, #-4]!)
   1376c:	vpush	{d8}
   13770:	mov	r0, #85	; 0x55
   13774:	sub	sp, sp, #68	; 0x44
   13778:	bl	11130 <sysconf@plt>
   1377c:	vmov	s15, r0
   13780:	mov	r0, #30
   13784:	vcvt.f64.s32	d8, s15
   13788:	bl	11130 <sysconf@plt>
   1378c:	vldr	d7, [pc, #100]	; 137f8 <__assert_fail@plt+0x2470>
   13790:	vcmpe.f64	d8, d7
   13794:	vmrs	APSR_nzcv, fpscr
   13798:	blt	137c0 <__assert_fail@plt+0x2438>
   1379c:	vmov	s13, r0
   137a0:	vcvt.f64.s32	d0, s13
   137a4:	vcmpe.f64	d0, d7
   137a8:	vmrs	APSR_nzcv, fpscr
   137ac:	blt	137c0 <__assert_fail@plt+0x2438>
   137b0:	vmul.f64	d0, d0, d8
   137b4:	add	sp, sp, #68	; 0x44
   137b8:	vpop	{d8}
   137bc:	pop	{pc}		; (ldr pc, [sp], #4)
   137c0:	mov	r0, sp
   137c4:	bl	111e4 <sysinfo@plt>
   137c8:	cmp	r0, #0
   137cc:	beq	137e0 <__assert_fail@plt+0x2458>
   137d0:	vldr	d0, [pc, #40]	; 13800 <__assert_fail@plt+0x2478>
   137d4:	add	sp, sp, #68	; 0x44
   137d8:	vpop	{d8}
   137dc:	pop	{pc}		; (ldr pc, [sp], #4)
   137e0:	vldr	s15, [sp, #16]
   137e4:	vcvt.f64.u32	d0, s15
   137e8:	vldr	s15, [sp, #52]	; 0x34
   137ec:	vcvt.f64.u32	d8, s15
   137f0:	b	137b0 <__assert_fail@plt+0x2428>
   137f4:	nop			; (mov r0, r0)
	...
   13804:	orrsmi	r0, r0, r0
   13808:	push	{lr}		; (str lr, [sp, #-4]!)
   1380c:	vpush	{d8}
   13810:	mov	r0, #86	; 0x56
   13814:	sub	sp, sp, #68	; 0x44
   13818:	bl	11130 <sysconf@plt>
   1381c:	vmov	s15, r0
   13820:	mov	r0, #30
   13824:	vcvt.f64.s32	d8, s15
   13828:	bl	11130 <sysconf@plt>
   1382c:	vldr	d7, [pc, #220]	; 13910 <__assert_fail@plt+0x2588>
   13830:	vcmpe.f64	d8, d7
   13834:	vmrs	APSR_nzcv, fpscr
   13838:	blt	13860 <__assert_fail@plt+0x24d8>
   1383c:	vmov	s13, r0
   13840:	vcvt.f64.s32	d0, s13
   13844:	vcmpe.f64	d0, d7
   13848:	vmrs	APSR_nzcv, fpscr
   1384c:	blt	13860 <__assert_fail@plt+0x24d8>
   13850:	vmul.f64	d0, d8, d0
   13854:	add	sp, sp, #68	; 0x44
   13858:	vpop	{d8}
   1385c:	pop	{pc}		; (ldr pc, [sp], #4)
   13860:	mov	r0, sp
   13864:	bl	111e4 <sysinfo@plt>
   13868:	cmp	r0, #0
   1386c:	bne	1389c <__assert_fail@plt+0x2514>
   13870:	vldr	s15, [sp, #20]
   13874:	vldr	s13, [sp, #52]	; 0x34
   13878:	vcvt.f64.u32	d0, s15
   1387c:	vldr	s15, [sp, #28]
   13880:	vcvt.f64.u32	d8, s13
   13884:	vcvt.f64.u32	d7, s15
   13888:	vadd.f64	d0, d0, d7
   1388c:	vmul.f64	d0, d0, d8
   13890:	add	sp, sp, #68	; 0x44
   13894:	vpop	{d8}
   13898:	pop	{pc}		; (ldr pc, [sp], #4)
   1389c:	mov	r0, #85	; 0x55
   138a0:	bl	11130 <sysconf@plt>
   138a4:	vmov	s15, r0
   138a8:	mov	r0, #30
   138ac:	vcvt.f64.s32	d8, s15
   138b0:	bl	11130 <sysconf@plt>
   138b4:	vldr	d7, [pc, #84]	; 13910 <__assert_fail@plt+0x2588>
   138b8:	vcmpe.f64	d8, d7
   138bc:	vmrs	APSR_nzcv, fpscr
   138c0:	vmov	s13, r0
   138c4:	vcvt.f64.s32	d0, s13
   138c8:	blt	138e0 <__assert_fail@plt+0x2558>
   138cc:	vcmpe.f64	d0, d7
   138d0:	vmrs	APSR_nzcv, fpscr
   138d4:	vmulge.f64	d8, d8, d0
   138d8:	vldrge	d0, [pc, #56]	; 13918 <__assert_fail@plt+0x2590>
   138dc:	bge	13850 <__assert_fail@plt+0x24c8>
   138e0:	mov	r0, sp
   138e4:	bl	111e4 <sysinfo@plt>
   138e8:	cmp	r0, #0
   138ec:	vldreq	s13, [sp, #16]
   138f0:	vldreq	d7, [pc, #32]	; 13918 <__assert_fail@plt+0x2590>
   138f4:	vldrne	d0, [pc, #36]	; 13920 <__assert_fail@plt+0x2598>
   138f8:	vcvteq.f64.u32	d0, s13
   138fc:	vldreq	s13, [sp, #52]	; 0x34
   13900:	vcvteq.f64.u32	d8, s13
   13904:	vmuleq.f64	d0, d0, d8
   13908:	vmuleq.f64	d0, d0, d7
   1390c:	b	13854 <__assert_fail@plt+0x24cc>
	...
   1391c:	svccc	0x00d00000
   13920:	andeq	r0, r0, r0
   13924:	cmnmi	r0, r0
   13928:	push	{r4, r5, r6, lr}
   1392c:	subs	r4, r0, #0
   13930:	beq	139a4 <__assert_fail@plt+0x261c>
   13934:	mov	r1, #47	; 0x2f
   13938:	bl	1131c <strrchr@plt>
   1393c:	subs	r5, r0, #0
   13940:	beq	13990 <__assert_fail@plt+0x2608>
   13944:	add	r6, r5, #1
   13948:	sub	r3, r6, r4
   1394c:	cmp	r3, #6
   13950:	ble	13990 <__assert_fail@plt+0x2608>
   13954:	mov	r2, #7
   13958:	ldr	r1, [pc, #96]	; 139c0 <__assert_fail@plt+0x2638>
   1395c:	sub	r0, r5, #6
   13960:	bl	11364 <strncmp@plt>
   13964:	cmp	r0, #0
   13968:	bne	13990 <__assert_fail@plt+0x2608>
   1396c:	mov	r2, #3
   13970:	ldr	r1, [pc, #76]	; 139c4 <__assert_fail@plt+0x263c>
   13974:	mov	r0, r6
   13978:	bl	11364 <strncmp@plt>
   1397c:	cmp	r0, #0
   13980:	movne	r4, r6
   13984:	ldreq	r3, [pc, #60]	; 139c8 <__assert_fail@plt+0x2640>
   13988:	addeq	r4, r5, #4
   1398c:	streq	r4, [r3]
   13990:	ldr	r2, [pc, #52]	; 139cc <__assert_fail@plt+0x2644>
   13994:	ldr	r3, [pc, #52]	; 139d0 <__assert_fail@plt+0x2648>
   13998:	str	r4, [r2]
   1399c:	str	r4, [r3]
   139a0:	pop	{r4, r5, r6, pc}
   139a4:	ldr	r3, [pc, #40]	; 139d4 <__assert_fail@plt+0x264c>
   139a8:	mov	r2, #55	; 0x37
   139ac:	mov	r1, #1
   139b0:	ldr	r3, [r3]
   139b4:	ldr	r0, [pc, #28]	; 139d8 <__assert_fail@plt+0x2650>
   139b8:	bl	11184 <fwrite@plt>
   139bc:	bl	11370 <abort@plt>
   139c0:	muleq	r1, r4, r7
   139c4:	muleq	r1, ip, r7
   139c8:	andeq	fp, r2, r8, ror r1
   139cc:	strdeq	fp, [r2], -r0
   139d0:	andeq	fp, r2, ip, ror r1
   139d4:	andeq	fp, r2, r8, lsl #3
   139d8:	andeq	sl, r1, ip, asr r7
   139dc:	push	{r4, r5, r6, lr}
   139e0:	mov	r4, r0
   139e4:	mov	r5, r1
   139e8:	bl	18f60 <__assert_fail@plt+0x7bd8>
   139ec:	ldrb	r3, [r0]
   139f0:	bic	r3, r3, #32
   139f4:	cmp	r3, #85	; 0x55
   139f8:	bne	13a58 <__assert_fail@plt+0x26d0>
   139fc:	ldrb	r3, [r0, #1]
   13a00:	bic	r3, r3, #32
   13a04:	cmp	r3, #84	; 0x54
   13a08:	bne	13a94 <__assert_fail@plt+0x270c>
   13a0c:	ldrb	r3, [r0, #2]
   13a10:	bic	r3, r3, #32
   13a14:	cmp	r3, #70	; 0x46
   13a18:	bne	13a94 <__assert_fail@plt+0x270c>
   13a1c:	ldrb	r3, [r0, #3]
   13a20:	cmp	r3, #45	; 0x2d
   13a24:	bne	13a94 <__assert_fail@plt+0x270c>
   13a28:	ldrb	r3, [r0, #4]
   13a2c:	cmp	r3, #56	; 0x38
   13a30:	bne	13a94 <__assert_fail@plt+0x270c>
   13a34:	ldrb	r3, [r0, #5]
   13a38:	cmp	r3, #0
   13a3c:	bne	13a94 <__assert_fail@plt+0x270c>
   13a40:	ldrb	r2, [r4]
   13a44:	ldr	r3, [pc, #152]	; 13ae4 <__assert_fail@plt+0x275c>
   13a48:	ldr	r0, [pc, #152]	; 13ae8 <__assert_fail@plt+0x2760>
   13a4c:	cmp	r2, #96	; 0x60
   13a50:	movne	r0, r3
   13a54:	pop	{r4, r5, r6, pc}
   13a58:	cmp	r3, #71	; 0x47
   13a5c:	bne	13a94 <__assert_fail@plt+0x270c>
   13a60:	ldrb	r3, [r0, #1]
   13a64:	bic	r3, r3, #32
   13a68:	cmp	r3, #66	; 0x42
   13a6c:	bne	13a94 <__assert_fail@plt+0x270c>
   13a70:	ldrb	r3, [r0, #2]
   13a74:	cmp	r3, #49	; 0x31
   13a78:	bne	13a94 <__assert_fail@plt+0x270c>
   13a7c:	ldrb	r3, [r0, #3]
   13a80:	cmp	r3, #56	; 0x38
   13a84:	bne	13a94 <__assert_fail@plt+0x270c>
   13a88:	ldrb	r3, [r0, #4]
   13a8c:	cmp	r3, #48	; 0x30
   13a90:	beq	13aa8 <__assert_fail@plt+0x2720>
   13a94:	ldr	r3, [pc, #80]	; 13aec <__assert_fail@plt+0x2764>
   13a98:	cmp	r5, #9
   13a9c:	ldr	r0, [pc, #76]	; 13af0 <__assert_fail@plt+0x2768>
   13aa0:	movne	r0, r3
   13aa4:	pop	{r4, r5, r6, pc}
   13aa8:	ldrb	r3, [r0, #5]
   13aac:	cmp	r3, #51	; 0x33
   13ab0:	bne	13a94 <__assert_fail@plt+0x270c>
   13ab4:	ldrb	r3, [r0, #6]
   13ab8:	cmp	r3, #48	; 0x30
   13abc:	bne	13a94 <__assert_fail@plt+0x270c>
   13ac0:	ldrb	r3, [r0, #7]
   13ac4:	cmp	r3, #0
   13ac8:	bne	13a94 <__assert_fail@plt+0x270c>
   13acc:	ldrb	r2, [r4]
   13ad0:	ldr	r3, [pc, #28]	; 13af4 <__assert_fail@plt+0x276c>
   13ad4:	ldr	r0, [pc, #28]	; 13af8 <__assert_fail@plt+0x2770>
   13ad8:	cmp	r2, #96	; 0x60
   13adc:	movne	r0, r3
   13ae0:	pop	{r4, r5, r6, pc}
   13ae4:	strdeq	sl, [r1], -r8
   13ae8:	strdeq	sl, [r1], -r4
   13aec:	andeq	sl, r1, r8, lsl #16
   13af0:	andeq	sl, r1, r4, lsl #16
   13af4:	andeq	sl, r1, r0, lsl #16
   13af8:	strdeq	sl, [r1], -ip
   13afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b00:	sub	sp, sp, #140	; 0x8c
   13b04:	mov	r9, r1
   13b08:	str	r3, [sp, #24]
   13b0c:	mov	r3, #1
   13b10:	mov	sl, r0
   13b14:	str	r2, [sp, #44]	; 0x2c
   13b18:	str	r3, [sp, #28]
   13b1c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   13b20:	ldr	r3, [sp, #180]	; 0xb4
   13b24:	mov	fp, r9
   13b28:	mov	r9, sl
   13b2c:	lsr	r3, r3, #1
   13b30:	and	r3, r3, #1
   13b34:	str	r3, [sp, #40]	; 0x28
   13b38:	ldr	r3, [sp, #180]	; 0xb4
   13b3c:	mov	r2, #0
   13b40:	and	r3, r3, #4
   13b44:	str	r3, [sp, #100]	; 0x64
   13b48:	ldr	r3, [sp, #180]	; 0xb4
   13b4c:	str	r2, [sp, #76]	; 0x4c
   13b50:	and	r3, r3, #1
   13b54:	str	r3, [sp, #96]	; 0x60
   13b58:	str	r2, [sp, #36]	; 0x24
   13b5c:	str	r2, [sp, #56]	; 0x38
   13b60:	str	r2, [sp, #68]	; 0x44
   13b64:	str	r2, [sp, #72]	; 0x48
   13b68:	str	r2, [sp, #84]	; 0x54
   13b6c:	str	r0, [sp, #80]	; 0x50
   13b70:	ldr	r3, [sp, #176]	; 0xb0
   13b74:	cmp	r3, #10
   13b78:	ldrls	pc, [pc, r3, lsl #2]
   13b7c:	b	14d54 <__assert_fail@plt+0x39cc>
   13b80:	andeq	r3, r1, ip, lsr #23
   13b84:	andeq	r3, r1, ip, asr #29
   13b88:	andeq	r4, r1, r4, lsr #32
   13b8c:	andeq	r3, r1, r0, lsl #30
   13b90:	andeq	r4, r1, r8, ror r0
   13b94:	andeq	r4, r1, r8, asr r0
   13b98:	andeq	r3, r1, r0, lsr #30
   13b9c:	andeq	r3, r1, r4, asr #30
   13ba0:	andeq	r3, r1, ip, ror #30
   13ba4:	andeq	r3, r1, ip, ror #30
   13ba8:	andeq	r3, r1, ip, ror #30
   13bac:	mov	r3, #0
   13bb0:	ldr	r1, [sp, #56]	; 0x38
   13bb4:	ldr	r2, [sp, #176]	; 0xb0
   13bb8:	ldr	lr, [sp, #176]	; 0xb0
   13bbc:	mov	r8, r3
   13bc0:	mov	ip, r3
   13bc4:	str	r3, [sp, #40]	; 0x28
   13bc8:	mov	r3, r1
   13bcc:	cmp	r2, #2
   13bd0:	moveq	r3, #0
   13bd4:	andne	r3, r3, #1
   13bd8:	mov	r0, r3
   13bdc:	str	r3, [sp, #92]	; 0x5c
   13be0:	ldr	r3, [sp, #68]	; 0x44
   13be4:	sub	lr, lr, #2
   13be8:	adds	r2, r3, #0
   13bec:	movne	r2, #1
   13bf0:	and	r3, r1, ip
   13bf4:	and	r3, r2, r3
   13bf8:	clz	lr, lr
   13bfc:	str	r3, [sp, #88]	; 0x58
   13c00:	lsr	lr, lr, #5
   13c04:	mov	r3, ip
   13c08:	and	r3, r3, lr
   13c0c:	mov	sl, #0
   13c10:	and	r0, r2, r0
   13c14:	str	r3, [sp, #64]	; 0x40
   13c18:	eor	r3, r1, #1
   13c1c:	str	lr, [sp, #52]	; 0x34
   13c20:	str	r0, [sp, #48]	; 0x30
   13c24:	str	r3, [sp, #60]	; 0x3c
   13c28:	ldr	r3, [sp, #24]
   13c2c:	cmn	r3, #1
   13c30:	beq	14160 <__assert_fail@plt+0x2dd8>
   13c34:	subs	r7, r3, sl
   13c38:	movne	r7, #1
   13c3c:	cmp	r7, #0
   13c40:	beq	14178 <__assert_fail@plt+0x2df0>
   13c44:	ldr	r3, [sp, #48]	; 0x30
   13c48:	cmp	r3, #0
   13c4c:	beq	144e4 <__assert_fail@plt+0x315c>
   13c50:	ldr	r2, [sp, #68]	; 0x44
   13c54:	ldr	r1, [sp, #24]
   13c58:	cmp	r2, #1
   13c5c:	mov	r3, r2
   13c60:	movls	r3, #0
   13c64:	movhi	r3, #1
   13c68:	cmn	r1, #1
   13c6c:	movne	r3, #0
   13c70:	cmp	r3, #0
   13c74:	add	r4, sl, r2
   13c78:	beq	13c88 <__assert_fail@plt+0x2900>
   13c7c:	ldr	r0, [sp, #44]	; 0x2c
   13c80:	bl	1125c <strlen@plt>
   13c84:	str	r0, [sp, #24]
   13c88:	ldr	r3, [sp, #24]
   13c8c:	cmp	r3, r4
   13c90:	ldr	r3, [sp, #44]	; 0x2c
   13c94:	add	r5, r3, sl
   13c98:	bcc	144ec <__assert_fail@plt+0x3164>
   13c9c:	mov	r0, r5
   13ca0:	ldr	r2, [sp, #68]	; 0x44
   13ca4:	ldr	r1, [sp, #72]	; 0x48
   13ca8:	bl	1110c <memcmp@plt>
   13cac:	cmp	r0, #0
   13cb0:	bne	144ec <__assert_fail@plt+0x3164>
   13cb4:	ldr	r3, [sp, #40]	; 0x28
   13cb8:	cmp	r3, #0
   13cbc:	bne	14ea8 <__assert_fail@plt+0x3b20>
   13cc0:	ldrb	r4, [r5]
   13cc4:	cmp	r4, #126	; 0x7e
   13cc8:	ldrls	pc, [pc, r4, lsl #2]
   13ccc:	b	14de4 <__assert_fail@plt+0x3a5c>
   13cd0:	andeq	r4, r1, r4, lsr #7
   13cd4:	andeq	r4, r1, r4, ror #27
   13cd8:	andeq	r4, r1, r4, ror #27
   13cdc:	andeq	r4, r1, r4, ror #27
   13ce0:	andeq	r4, r1, r4, ror #27
   13ce4:	andeq	r4, r1, r4, ror #27
   13ce8:	andeq	r4, r1, r4, ror #27
   13cec:	muleq	r1, r0, r3
   13cf0:	andeq	r4, r1, ip, ror r3
   13cf4:	andeq	r4, r1, r8, asr r3
   13cf8:	andeq	r4, r1, r8, lsr r3
   13cfc:	andeq	r4, r1, r8, ror #6
   13d00:	andeq	r4, r1, r0, lsr #5
   13d04:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d08:	andeq	r4, r1, r4, ror #27
   13d0c:	andeq	r4, r1, r4, ror #27
   13d10:	andeq	r4, r1, r4, ror #27
   13d14:	andeq	r4, r1, r4, ror #27
   13d18:	andeq	r4, r1, r4, ror #27
   13d1c:	andeq	r4, r1, r4, ror #27
   13d20:	andeq	r4, r1, r4, ror #27
   13d24:	andeq	r4, r1, r4, ror #27
   13d28:	andeq	r4, r1, r4, ror #27
   13d2c:	andeq	r4, r1, r4, ror #27
   13d30:	andeq	r4, r1, r4, ror #27
   13d34:	andeq	r4, r1, r4, ror #27
   13d38:	andeq	r4, r1, r4, ror #27
   13d3c:	andeq	r4, r1, r4, ror #27
   13d40:	andeq	r4, r1, r4, ror #27
   13d44:	andeq	r4, r1, r4, ror #27
   13d48:	andeq	r4, r1, r4, ror #27
   13d4c:	andeq	r4, r1, r4, ror #27
   13d50:	andeq	r4, r1, r4, asr #9
   13d54:	andeq	r4, r1, r4, lsr #9
   13d58:	andeq	r4, r1, r4, lsr #9
   13d5c:	andeq	r4, r1, r4, lsl #9
   13d60:	andeq	r4, r1, r4, lsr #9
   13d64:	muleq	r1, r0, r2
   13d68:	andeq	r4, r1, r4, lsr #9
   13d6c:	andeq	r4, r1, ip, ror #4
   13d70:	andeq	r4, r1, r4, lsr #9
   13d74:	andeq	r4, r1, r4, lsr #9
   13d78:	andeq	r4, r1, r4, lsr #9
   13d7c:	muleq	r1, r0, r2
   13d80:	muleq	r1, r0, r2
   13d84:	muleq	r1, r0, r2
   13d88:	muleq	r1, r0, r2
   13d8c:	muleq	r1, r0, r2
   13d90:	muleq	r1, r0, r2
   13d94:	muleq	r1, r0, r2
   13d98:	muleq	r1, r0, r2
   13d9c:	muleq	r1, r0, r2
   13da0:	muleq	r1, r0, r2
   13da4:	muleq	r1, r0, r2
   13da8:	muleq	r1, r0, r2
   13dac:	muleq	r1, r0, r2
   13db0:	muleq	r1, r0, r2
   13db4:	muleq	r1, r0, r2
   13db8:	muleq	r1, r0, r2
   13dbc:	andeq	r4, r1, r4, lsr #9
   13dc0:	andeq	r4, r1, r4, lsr #9
   13dc4:	andeq	r4, r1, r4, lsr #9
   13dc8:	andeq	r4, r1, r4, lsr #9
   13dcc:	andeq	r4, r1, ip, lsl r2
   13dd0:	andeq	r4, r1, r4, ror #27
   13dd4:	muleq	r1, r0, r2
   13dd8:	muleq	r1, r0, r2
   13ddc:	muleq	r1, r0, r2
   13de0:	muleq	r1, r0, r2
   13de4:	muleq	r1, r0, r2
   13de8:	muleq	r1, r0, r2
   13dec:	muleq	r1, r0, r2
   13df0:	muleq	r1, r0, r2
   13df4:	muleq	r1, r0, r2
   13df8:	muleq	r1, r0, r2
   13dfc:	muleq	r1, r0, r2
   13e00:	muleq	r1, r0, r2
   13e04:	muleq	r1, r0, r2
   13e08:	muleq	r1, r0, r2
   13e0c:	muleq	r1, r0, r2
   13e10:	muleq	r1, r0, r2
   13e14:	muleq	r1, r0, r2
   13e18:	muleq	r1, r0, r2
   13e1c:	muleq	r1, r0, r2
   13e20:	muleq	r1, r0, r2
   13e24:	muleq	r1, r0, r2
   13e28:	muleq	r1, r0, r2
   13e2c:	muleq	r1, r0, r2
   13e30:	muleq	r1, r0, r2
   13e34:	muleq	r1, r0, r2
   13e38:	muleq	r1, r0, r2
   13e3c:	andeq	r4, r1, r4, lsr #9
   13e40:	andeq	r4, r1, r8, ror #3
   13e44:	muleq	r1, r0, r2
   13e48:	andeq	r4, r1, r4, lsr #9
   13e4c:	muleq	r1, r0, r2
   13e50:	andeq	r4, r1, r4, lsr #9
   13e54:	muleq	r1, r0, r2
   13e58:	muleq	r1, r0, r2
   13e5c:	muleq	r1, r0, r2
   13e60:	muleq	r1, r0, r2
   13e64:	muleq	r1, r0, r2
   13e68:	muleq	r1, r0, r2
   13e6c:	muleq	r1, r0, r2
   13e70:	muleq	r1, r0, r2
   13e74:	muleq	r1, r0, r2
   13e78:	muleq	r1, r0, r2
   13e7c:	muleq	r1, r0, r2
   13e80:	muleq	r1, r0, r2
   13e84:	muleq	r1, r0, r2
   13e88:	muleq	r1, r0, r2
   13e8c:	muleq	r1, r0, r2
   13e90:	muleq	r1, r0, r2
   13e94:	muleq	r1, r0, r2
   13e98:	muleq	r1, r0, r2
   13e9c:	muleq	r1, r0, r2
   13ea0:	muleq	r1, r0, r2
   13ea4:	muleq	r1, r0, r2
   13ea8:	muleq	r1, r0, r2
   13eac:	muleq	r1, r0, r2
   13eb0:	muleq	r1, r0, r2
   13eb4:	muleq	r1, r0, r2
   13eb8:	muleq	r1, r0, r2
   13ebc:	andeq	r4, r1, r0, lsr #1
   13ec0:	andeq	r4, r1, r4, lsr #9
   13ec4:	andeq	r4, r1, r0, lsr #1
   13ec8:	andeq	r4, r1, r4, lsl #9
   13ecc:	mov	r3, #1
   13ed0:	str	r3, [sp, #40]	; 0x28
   13ed4:	str	r3, [sp, #68]	; 0x44
   13ed8:	mov	r8, #0
   13edc:	ldr	r3, [pc, #4056]	; 14ebc <__assert_fail@plt+0x3b34>
   13ee0:	str	r3, [sp, #72]	; 0x48
   13ee4:	mov	r3, #2
   13ee8:	str	r3, [sp, #176]	; 0xb0
   13eec:	ldr	r1, [sp, #56]	; 0x38
   13ef0:	mov	r2, r3
   13ef4:	ldr	ip, [sp, #40]	; 0x28
   13ef8:	mov	lr, r3
   13efc:	b	13bc8 <__assert_fail@plt+0x2840>
   13f00:	mov	r3, #1
   13f04:	str	r3, [sp, #56]	; 0x38
   13f08:	str	r3, [sp, #68]	; 0x44
   13f0c:	str	r3, [sp, #40]	; 0x28
   13f10:	ldr	r3, [pc, #4004]	; 14ebc <__assert_fail@plt+0x3b34>
   13f14:	mov	r8, #0
   13f18:	str	r3, [sp, #72]	; 0x48
   13f1c:	b	13ee4 <__assert_fail@plt+0x2b5c>
   13f20:	mov	r3, #1
   13f24:	str	r3, [sp, #56]	; 0x38
   13f28:	str	r3, [sp, #68]	; 0x44
   13f2c:	str	r3, [sp, #40]	; 0x28
   13f30:	ldr	r3, [pc, #3976]	; 14ec0 <__assert_fail@plt+0x3b38>
   13f34:	mov	r8, #0
   13f38:	str	r3, [sp, #72]	; 0x48
   13f3c:	mov	r3, #5
   13f40:	b	13ee8 <__assert_fail@plt+0x2b60>
   13f44:	mov	r3, #0
   13f48:	str	r3, [sp, #40]	; 0x28
   13f4c:	mov	r3, #1
   13f50:	str	r3, [sp, #56]	; 0x38
   13f54:	mov	r8, #0
   13f58:	mov	r1, r3
   13f5c:	ldr	r2, [sp, #176]	; 0xb0
   13f60:	ldr	ip, [sp, #40]	; 0x28
   13f64:	ldr	lr, [sp, #176]	; 0xb0
   13f68:	b	13bc8 <__assert_fail@plt+0x2840>
   13f6c:	ldr	r3, [sp, #176]	; 0xb0
   13f70:	cmp	r3, #10
   13f74:	beq	13fb8 <__assert_fail@plt+0x2c30>
   13f78:	mov	r2, #5
   13f7c:	ldr	r1, [pc, #3904]	; 14ec4 <__assert_fail@plt+0x3b3c>
   13f80:	mov	r0, #0
   13f84:	bl	11124 <dcgettext@plt>
   13f88:	ldr	r2, [pc, #3892]	; 14ec4 <__assert_fail@plt+0x3b3c>
   13f8c:	cmp	r0, r2
   13f90:	str	r0, [sp, #188]	; 0xbc
   13f94:	beq	15050 <__assert_fail@plt+0x3cc8>
   13f98:	mov	r2, #5
   13f9c:	ldr	r1, [pc, #3864]	; 14ebc <__assert_fail@plt+0x3b34>
   13fa0:	mov	r0, #0
   13fa4:	bl	11124 <dcgettext@plt>
   13fa8:	ldr	r2, [pc, #3852]	; 14ebc <__assert_fail@plt+0x3b34>
   13fac:	cmp	r0, r2
   13fb0:	str	r0, [sp, #192]	; 0xc0
   13fb4:	beq	15040 <__assert_fail@plt+0x3cb8>
   13fb8:	ldr	r8, [sp, #40]	; 0x28
   13fbc:	cmp	r8, #0
   13fc0:	movne	r8, #0
   13fc4:	bne	13ff4 <__assert_fail@plt+0x2c6c>
   13fc8:	ldr	r3, [sp, #188]	; 0xbc
   13fcc:	ldrb	r3, [r3]
   13fd0:	cmp	r3, #0
   13fd4:	beq	13ff4 <__assert_fail@plt+0x2c6c>
   13fd8:	ldr	r2, [sp, #188]	; 0xbc
   13fdc:	cmp	fp, r8
   13fe0:	strbhi	r3, [r9, r8]
   13fe4:	ldrb	r3, [r2, #1]!
   13fe8:	add	r8, r8, #1
   13fec:	cmp	r3, #0
   13ff0:	bne	13fdc <__assert_fail@plt+0x2c54>
   13ff4:	ldr	r0, [sp, #192]	; 0xc0
   13ff8:	bl	1125c <strlen@plt>
   13ffc:	ldr	r3, [sp, #192]	; 0xc0
   14000:	ldr	r2, [sp, #176]	; 0xb0
   14004:	str	r3, [sp, #72]	; 0x48
   14008:	mov	r3, #1
   1400c:	str	r3, [sp, #56]	; 0x38
   14010:	mov	r1, r3
   14014:	ldr	ip, [sp, #40]	; 0x28
   14018:	ldr	lr, [sp, #176]	; 0xb0
   1401c:	str	r0, [sp, #68]	; 0x44
   14020:	b	13bc8 <__assert_fail@plt+0x2840>
   14024:	ldr	r3, [sp, #40]	; 0x28
   14028:	cmp	r3, #0
   1402c:	beq	14cd4 <__assert_fail@plt+0x394c>
   14030:	mov	r3, #1
   14034:	str	r3, [sp, #68]	; 0x44
   14038:	ldr	r3, [pc, #3708]	; 14ebc <__assert_fail@plt+0x3b34>
   1403c:	str	r3, [sp, #72]	; 0x48
   14040:	mov	r8, #0
   14044:	ldr	r1, [sp, #56]	; 0x38
   14048:	ldr	r2, [sp, #176]	; 0xb0
   1404c:	ldr	ip, [sp, #40]	; 0x28
   14050:	ldr	lr, [sp, #176]	; 0xb0
   14054:	b	13bc8 <__assert_fail@plt+0x2840>
   14058:	ldr	r3, [sp, #40]	; 0x28
   1405c:	cmp	r3, #0
   14060:	beq	14d58 <__assert_fail@plt+0x39d0>
   14064:	str	r3, [sp, #56]	; 0x38
   14068:	mov	r3, #1
   1406c:	str	r3, [sp, #68]	; 0x44
   14070:	ldr	r3, [pc, #3656]	; 14ec0 <__assert_fail@plt+0x3b38>
   14074:	b	1403c <__assert_fail@plt+0x2cb4>
   14078:	ldr	r3, [sp, #40]	; 0x28
   1407c:	cmp	r3, #0
   14080:	mov	r3, #1
   14084:	streq	r3, [sp, #56]	; 0x38
   14088:	beq	14cd4 <__assert_fail@plt+0x394c>
   1408c:	str	r3, [sp, #68]	; 0x44
   14090:	ldr	r3, [pc, #3620]	; 14ebc <__assert_fail@plt+0x3b34>
   14094:	mov	r8, #0
   14098:	str	r3, [sp, #72]	; 0x48
   1409c:	b	13ee4 <__assert_fail@plt+0x2b5c>
   140a0:	ldr	r3, [sp, #24]
   140a4:	ldr	r6, [sp, #48]	; 0x30
   140a8:	cmn	r3, #1
   140ac:	beq	14708 <__assert_fail@plt+0x3380>
   140b0:	subs	r3, r3, #1
   140b4:	movne	r3, #1
   140b8:	cmp	r3, #0
   140bc:	beq	14488 <__assert_fail@plt+0x3100>
   140c0:	ldr	r1, [sp, #52]	; 0x34
   140c4:	mov	r7, r3
   140c8:	mov	r3, #0
   140cc:	str	r3, [sp, #32]
   140d0:	ldr	r3, [sp, #60]	; 0x3c
   140d4:	orr	r2, r1, r3
   140d8:	ldr	r3, [sp, #40]	; 0x28
   140dc:	eor	r2, r2, #1
   140e0:	orr	r2, r3, r2
   140e4:	tst	r2, #255	; 0xff
   140e8:	bne	14a0c <__assert_fail@plt+0x3684>
   140ec:	cmp	r6, #0
   140f0:	bne	142cc <__assert_fail@plt+0x2f44>
   140f4:	ldr	r3, [sp, #36]	; 0x24
   140f8:	add	sl, sl, #1
   140fc:	and	r3, r3, r7
   14100:	uxtb	r6, r3
   14104:	cmp	r6, #0
   14108:	beq	14134 <__assert_fail@plt+0x2dac>
   1410c:	cmp	fp, r8
   14110:	movhi	r3, #39	; 0x27
   14114:	strbhi	r3, [r9, r8]
   14118:	add	r3, r8, #1
   1411c:	cmp	fp, r3
   14120:	movhi	r2, #39	; 0x27
   14124:	add	r8, r8, #2
   14128:	strbhi	r2, [r9, r3]
   1412c:	mov	r3, #0
   14130:	str	r3, [sp, #36]	; 0x24
   14134:	ldr	r2, [sp, #32]
   14138:	cmp	r8, fp
   1413c:	ldr	r3, [sp, #28]
   14140:	strbcc	r4, [r9, r8]
   14144:	cmp	r2, #0
   14148:	moveq	r3, #0
   1414c:	str	r3, [sp, #28]
   14150:	ldr	r3, [sp, #24]
   14154:	add	r8, r8, #1
   14158:	cmn	r3, #1
   1415c:	bne	13c34 <__assert_fail@plt+0x28ac>
   14160:	ldr	r3, [sp, #44]	; 0x2c
   14164:	ldrb	r3, [r3, sl]
   14168:	adds	r7, r3, #0
   1416c:	movne	r7, #1
   14170:	cmp	r7, #0
   14174:	bne	13c44 <__assert_fail@plt+0x28bc>
   14178:	ldr	r3, [sp, #64]	; 0x40
   1417c:	cmp	r8, #0
   14180:	movne	r3, #0
   14184:	andeq	r3, r3, #1
   14188:	cmp	r3, #0
   1418c:	str	r3, [sp, #64]	; 0x40
   14190:	bne	14c34 <__assert_fail@plt+0x38ac>
   14194:	ldr	r3, [sp, #40]	; 0x28
   14198:	ldr	r2, [sp, #52]	; 0x34
   1419c:	eor	r3, r3, #1
   141a0:	ands	r2, r2, r3
   141a4:	beq	15060 <__assert_fail@plt+0x3cd8>
   141a8:	ldr	r3, [sp, #76]	; 0x4c
   141ac:	cmp	r3, #0
   141b0:	beq	15030 <__assert_fail@plt+0x3ca8>
   141b4:	ldr	r3, [sp, #28]
   141b8:	cmp	r3, #0
   141bc:	bne	14fec <__assert_fail@plt+0x3c64>
   141c0:	ldr	r2, [sp, #84]	; 0x54
   141c4:	clz	r3, fp
   141c8:	cmp	r2, #0
   141cc:	lsr	r3, r3, #5
   141d0:	moveq	r3, #0
   141d4:	cmp	r3, #0
   141d8:	beq	14f8c <__assert_fail@plt+0x3c04>
   141dc:	mov	fp, r2
   141e0:	str	r3, [sp, #76]	; 0x4c
   141e4:	b	13b70 <__assert_fail@plt+0x27e8>
   141e8:	ldr	r3, [sp, #176]	; 0xb0
   141ec:	ldr	r6, [sp, #48]	; 0x30
   141f0:	cmp	r3, #2
   141f4:	beq	1472c <__assert_fail@plt+0x33a4>
   141f8:	ldr	r3, [sp, #88]	; 0x58
   141fc:	cmp	r3, #0
   14200:	beq	14cb0 <__assert_fail@plt+0x3928>
   14204:	mov	r3, #0
   14208:	add	sl, sl, #1
   1420c:	ldr	r6, [sp, #36]	; 0x24
   14210:	str	r3, [sp, #32]
   14214:	mov	r4, #92	; 0x5c
   14218:	b	14104 <__assert_fail@plt+0x2d7c>
   1421c:	ldr	r3, [sp, #176]	; 0xb0
   14220:	ldr	r6, [sp, #48]	; 0x30
   14224:	cmp	r3, #2
   14228:	beq	1475c <__assert_fail@plt+0x33d4>
   1422c:	cmp	r3, #5
   14230:	bne	14cc0 <__assert_fail@plt+0x3938>
   14234:	ldr	r3, [sp, #100]	; 0x64
   14238:	cmp	r3, #0
   1423c:	beq	14d24 <__assert_fail@plt+0x399c>
   14240:	ldr	r2, [sp, #24]
   14244:	add	r3, sl, #2
   14248:	cmp	r2, r3
   1424c:	bls	1425c <__assert_fail@plt+0x2ed4>
   14250:	ldrb	r4, [r5, #1]
   14254:	cmp	r4, #63	; 0x3f
   14258:	beq	14ecc <__assert_fail@plt+0x3b44>
   1425c:	mov	r1, #0
   14260:	str	r1, [sp, #32]
   14264:	mov	r4, #63	; 0x3f
   14268:	b	140d0 <__assert_fail@plt+0x2d48>
   1426c:	ldr	r3, [sp, #176]	; 0xb0
   14270:	ldr	r6, [sp, #48]	; 0x30
   14274:	cmp	r3, #2
   14278:	beq	14788 <__assert_fail@plt+0x3400>
   1427c:	str	r7, [sp, #32]
   14280:	str	r7, [sp, #76]	; 0x4c
   14284:	mov	r1, #0
   14288:	mov	r4, #39	; 0x27
   1428c:	b	140d0 <__assert_fail@plt+0x2d48>
   14290:	ldr	r6, [sp, #48]	; 0x30
   14294:	ldr	r1, [sp, #52]	; 0x34
   14298:	str	r7, [sp, #32]
   1429c:	b	140d0 <__assert_fail@plt+0x2d48>
   142a0:	ldr	r6, [sp, #48]	; 0x30
   142a4:	ldr	r1, [sp, #52]	; 0x34
   142a8:	mov	r4, #12
   142ac:	mov	r3, #102	; 0x66
   142b0:	ldr	r2, [sp, #56]	; 0x38
   142b4:	cmp	r2, #0
   142b8:	streq	r2, [sp, #32]
   142bc:	beq	140d0 <__assert_fail@plt+0x2d48>
   142c0:	mov	r4, r3
   142c4:	mov	r3, #0
   142c8:	str	r3, [sp, #32]
   142cc:	ldr	r3, [sp, #40]	; 0x28
   142d0:	cmp	r3, #0
   142d4:	bne	14a44 <__assert_fail@plt+0x36bc>
   142d8:	ldr	r3, [sp, #36]	; 0x24
   142dc:	eor	r3, r3, #1
   142e0:	and	r3, r3, r1
   142e4:	ands	r3, r3, #255	; 0xff
   142e8:	beq	14320 <__assert_fail@plt+0x2f98>
   142ec:	cmp	fp, r8
   142f0:	movhi	r2, #39	; 0x27
   142f4:	strbhi	r2, [r9, r8]
   142f8:	add	r2, r8, #1
   142fc:	cmp	fp, r2
   14300:	movhi	r1, #36	; 0x24
   14304:	strbhi	r1, [r9, r2]
   14308:	add	r2, r8, #2
   1430c:	cmp	fp, r2
   14310:	add	r8, r8, #3
   14314:	movhi	r1, #39	; 0x27
   14318:	strbhi	r1, [r9, r2]
   1431c:	str	r3, [sp, #36]	; 0x24
   14320:	cmp	fp, r8
   14324:	movhi	r3, #92	; 0x5c
   14328:	strbhi	r3, [r9, r8]
   1432c:	add	sl, sl, #1
   14330:	add	r8, r8, #1
   14334:	b	14134 <__assert_fail@plt+0x2dac>
   14338:	ldr	r6, [sp, #48]	; 0x30
   1433c:	mov	r4, #10
   14340:	mov	r3, #110	; 0x6e
   14344:	ldr	r2, [sp, #64]	; 0x40
   14348:	cmp	r2, #0
   1434c:	bne	14dcc <__assert_fail@plt+0x3a44>
   14350:	ldr	r1, [sp, #52]	; 0x34
   14354:	b	142b0 <__assert_fail@plt+0x2f28>
   14358:	ldr	r6, [sp, #48]	; 0x30
   1435c:	ldr	r1, [sp, #52]	; 0x34
   14360:	mov	r3, #116	; 0x74
   14364:	b	142b0 <__assert_fail@plt+0x2f28>
   14368:	ldr	r6, [sp, #48]	; 0x30
   1436c:	ldr	r1, [sp, #52]	; 0x34
   14370:	mov	r4, #11
   14374:	mov	r3, #118	; 0x76
   14378:	b	142b0 <__assert_fail@plt+0x2f28>
   1437c:	ldr	r6, [sp, #48]	; 0x30
   14380:	ldr	r1, [sp, #52]	; 0x34
   14384:	mov	r4, #8
   14388:	mov	r3, #98	; 0x62
   1438c:	b	142b0 <__assert_fail@plt+0x2f28>
   14390:	ldr	r6, [sp, #48]	; 0x30
   14394:	ldr	r1, [sp, #52]	; 0x34
   14398:	mov	r4, #7
   1439c:	mov	r3, #97	; 0x61
   143a0:	b	142b0 <__assert_fail@plt+0x2f28>
   143a4:	ldr	r3, [sp, #56]	; 0x38
   143a8:	ldr	r6, [sp, #48]	; 0x30
   143ac:	cmp	r3, #0
   143b0:	beq	14874 <__assert_fail@plt+0x34ec>
   143b4:	ldr	r3, [sp, #40]	; 0x28
   143b8:	cmp	r3, #0
   143bc:	bne	14ea8 <__assert_fail@plt+0x3b20>
   143c0:	ldr	r3, [sp, #36]	; 0x24
   143c4:	ldr	r2, [sp, #52]	; 0x34
   143c8:	eor	r3, r3, #1
   143cc:	ands	r3, r2, r3
   143d0:	moveq	r2, r8
   143d4:	beq	1440c <__assert_fail@plt+0x3084>
   143d8:	cmp	fp, r8
   143dc:	movhi	r2, #39	; 0x27
   143e0:	strbhi	r2, [r9, r8]
   143e4:	add	r2, r8, #1
   143e8:	cmp	fp, r2
   143ec:	movhi	r1, #36	; 0x24
   143f0:	strbhi	r1, [r9, r2]
   143f4:	add	r2, r8, #2
   143f8:	cmp	fp, r2
   143fc:	movhi	r1, #39	; 0x27
   14400:	strbhi	r1, [r9, r2]
   14404:	add	r2, r8, #3
   14408:	str	r3, [sp, #36]	; 0x24
   1440c:	cmp	fp, r2
   14410:	movhi	r3, #92	; 0x5c
   14414:	strbhi	r3, [r9, r2]
   14418:	ldr	r3, [sp, #92]	; 0x5c
   1441c:	add	r8, r2, #1
   14420:	cmp	r3, #0
   14424:	beq	14da8 <__assert_fail@plt+0x3a20>
   14428:	ldr	r1, [sp, #24]
   1442c:	add	r3, sl, #1
   14430:	cmp	r1, r3
   14434:	bls	1446c <__assert_fail@plt+0x30e4>
   14438:	ldr	r1, [sp, #44]	; 0x2c
   1443c:	ldrb	r3, [r1, r3]
   14440:	sub	r3, r3, #48	; 0x30
   14444:	cmp	r3, #9
   14448:	bhi	1446c <__assert_fail@plt+0x30e4>
   1444c:	cmp	fp, r8
   14450:	movhi	r3, #48	; 0x30
   14454:	strbhi	r3, [r9, r8]
   14458:	add	r3, r2, #2
   1445c:	cmp	fp, r3
   14460:	add	r8, r2, #3
   14464:	movhi	r1, #48	; 0x30
   14468:	strbhi	r1, [r9, r3]
   1446c:	ldr	r3, [sp, #40]	; 0x28
   14470:	ldr	r1, [sp, #52]	; 0x34
   14474:	mov	r7, r3
   14478:	str	r3, [sp, #32]
   1447c:	mov	r4, #48	; 0x30
   14480:	b	140d0 <__assert_fail@plt+0x2d48>
   14484:	ldr	r6, [sp, #48]	; 0x30
   14488:	cmp	sl, #0
   1448c:	streq	r7, [sp, #32]
   14490:	beq	144b0 <__assert_fail@plt+0x3128>
   14494:	mov	r3, #0
   14498:	ldr	r1, [sp, #52]	; 0x34
   1449c:	str	r3, [sp, #32]
   144a0:	b	140d0 <__assert_fail@plt+0x2d48>
   144a4:	ldr	r6, [sp, #48]	; 0x30
   144a8:	mov	r3, #0
   144ac:	str	r3, [sp, #32]
   144b0:	ldr	r3, [sp, #64]	; 0x40
   144b4:	cmp	r3, #0
   144b8:	bne	14c34 <__assert_fail@plt+0x38ac>
   144bc:	ldr	r1, [sp, #52]	; 0x34
   144c0:	b	140d0 <__assert_fail@plt+0x2d48>
   144c4:	ldr	r3, [sp, #48]	; 0x30
   144c8:	mov	r6, r3
   144cc:	str	r3, [sp, #32]
   144d0:	b	144b0 <__assert_fail@plt+0x3128>
   144d4:	ldr	r6, [sp, #48]	; 0x30
   144d8:	mov	r4, #13
   144dc:	mov	r3, #114	; 0x72
   144e0:	b	14344 <__assert_fail@plt+0x2fbc>
   144e4:	ldr	r3, [sp, #44]	; 0x2c
   144e8:	add	r5, r3, sl
   144ec:	ldrb	r4, [r5]
   144f0:	cmp	r4, #126	; 0x7e
   144f4:	ldrls	pc, [pc, r4, lsl #2]
   144f8:	b	14894 <__assert_fail@plt+0x350c>
   144fc:	andeq	r4, r1, r4, ror #16
   14500:	muleq	r1, r4, r8
   14504:	muleq	r1, r4, r8
   14508:	muleq	r1, r4, r8
   1450c:	muleq	r1, r4, r8
   14510:	muleq	r1, r4, r8
   14514:	muleq	r1, r4, r8
   14518:	andeq	r4, r1, ip, asr r8
   1451c:	andeq	r4, r1, r4, asr r8
   14520:	andeq	r4, r1, r8, asr #16
   14524:	andeq	r4, r1, r0, asr #16
   14528:	andeq	r4, r1, r8, lsr r8
   1452c:	andeq	r4, r1, r0, lsr r8
   14530:	andeq	r4, r1, r8, lsr #16
   14534:	muleq	r1, r4, r8
   14538:	muleq	r1, r4, r8
   1453c:	muleq	r1, r4, r8
   14540:	muleq	r1, r4, r8
   14544:	muleq	r1, r4, r8
   14548:	muleq	r1, r4, r8
   1454c:	muleq	r1, r4, r8
   14550:	muleq	r1, r4, r8
   14554:	muleq	r1, r4, r8
   14558:	muleq	r1, r4, r8
   1455c:	muleq	r1, r4, r8
   14560:	muleq	r1, r4, r8
   14564:	muleq	r1, r4, r8
   14568:	muleq	r1, r4, r8
   1456c:	muleq	r1, r4, r8
   14570:	muleq	r1, r4, r8
   14574:	muleq	r1, r4, r8
   14578:	muleq	r1, r4, r8
   1457c:	andeq	r4, r1, ip, lsl r8
   14580:	andeq	r4, r1, r4, lsl r8
   14584:	andeq	r4, r1, r4, lsl r8
   14588:	andeq	r4, r1, ip, lsl #16
   1458c:	andeq	r4, r1, r4, lsl r8
   14590:	andeq	r4, r1, r4, lsl #16
   14594:	andeq	r4, r1, r4, lsl r8
   14598:	andeq	r4, r1, r8, ror r7
   1459c:	andeq	r4, r1, r4, lsl r8
   145a0:	andeq	r4, r1, r4, lsl r8
   145a4:	andeq	r4, r1, r4, lsl r8
   145a8:	andeq	r4, r1, r4, lsl #16
   145ac:	andeq	r4, r1, r4, lsl #16
   145b0:	andeq	r4, r1, r4, lsl #16
   145b4:	andeq	r4, r1, r4, lsl #16
   145b8:	andeq	r4, r1, r4, lsl #16
   145bc:	andeq	r4, r1, r4, lsl #16
   145c0:	andeq	r4, r1, r4, lsl #16
   145c4:	andeq	r4, r1, r4, lsl #16
   145c8:	andeq	r4, r1, r4, lsl #16
   145cc:	andeq	r4, r1, r4, lsl #16
   145d0:	andeq	r4, r1, r4, lsl #16
   145d4:	andeq	r4, r1, r4, lsl #16
   145d8:	andeq	r4, r1, r4, lsl #16
   145dc:	andeq	r4, r1, r4, lsl #16
   145e0:	andeq	r4, r1, r4, lsl #16
   145e4:	andeq	r4, r1, r4, lsl #16
   145e8:	andeq	r4, r1, r4, lsl r8
   145ec:	andeq	r4, r1, r4, lsl r8
   145f0:	andeq	r4, r1, r4, lsl r8
   145f4:	andeq	r4, r1, r4, lsl r8
   145f8:	andeq	r4, r1, ip, asr #14
   145fc:	muleq	r1, r4, r8
   14600:	andeq	r4, r1, r4, lsl #16
   14604:	andeq	r4, r1, r4, lsl #16
   14608:	andeq	r4, r1, r4, lsl #16
   1460c:	andeq	r4, r1, r4, lsl #16
   14610:	andeq	r4, r1, r4, lsl #16
   14614:	andeq	r4, r1, r4, lsl #16
   14618:	andeq	r4, r1, r4, lsl #16
   1461c:	andeq	r4, r1, r4, lsl #16
   14620:	andeq	r4, r1, r4, lsl #16
   14624:	andeq	r4, r1, r4, lsl #16
   14628:	andeq	r4, r1, r4, lsl #16
   1462c:	andeq	r4, r1, r4, lsl #16
   14630:	andeq	r4, r1, r4, lsl #16
   14634:	andeq	r4, r1, r4, lsl #16
   14638:	andeq	r4, r1, r4, lsl #16
   1463c:	andeq	r4, r1, r4, lsl #16
   14640:	andeq	r4, r1, r4, lsl #16
   14644:	andeq	r4, r1, r4, lsl #16
   14648:	andeq	r4, r1, r4, lsl #16
   1464c:	andeq	r4, r1, r4, lsl #16
   14650:	andeq	r4, r1, r4, lsl #16
   14654:	andeq	r4, r1, r4, lsl #16
   14658:	andeq	r4, r1, r4, lsl #16
   1465c:	andeq	r4, r1, r4, lsl #16
   14660:	andeq	r4, r1, r4, lsl #16
   14664:	andeq	r4, r1, r4, lsl #16
   14668:	andeq	r4, r1, r4, lsl r8
   1466c:	andeq	r4, r1, ip, lsl r7
   14670:	andeq	r4, r1, r4, lsl #16
   14674:	andeq	r4, r1, r4, lsl r8
   14678:	andeq	r4, r1, r4, lsl #16
   1467c:	andeq	r4, r1, r4, lsl r8
   14680:	andeq	r4, r1, r4, lsl #16
   14684:	andeq	r4, r1, r4, lsl #16
   14688:	andeq	r4, r1, r4, lsl #16
   1468c:	andeq	r4, r1, r4, lsl #16
   14690:	andeq	r4, r1, r4, lsl #16
   14694:	andeq	r4, r1, r4, lsl #16
   14698:	andeq	r4, r1, r4, lsl #16
   1469c:	andeq	r4, r1, r4, lsl #16
   146a0:	andeq	r4, r1, r4, lsl #16
   146a4:	andeq	r4, r1, r4, lsl #16
   146a8:	andeq	r4, r1, r4, lsl #16
   146ac:	andeq	r4, r1, r4, lsl #16
   146b0:	andeq	r4, r1, r4, lsl #16
   146b4:	andeq	r4, r1, r4, lsl #16
   146b8:	andeq	r4, r1, r4, lsl #16
   146bc:	andeq	r4, r1, r4, lsl #16
   146c0:	andeq	r4, r1, r4, lsl #16
   146c4:	andeq	r4, r1, r4, lsl #16
   146c8:	andeq	r4, r1, r4, lsl #16
   146cc:	andeq	r4, r1, r4, lsl #16
   146d0:	andeq	r4, r1, r4, lsl #16
   146d4:	andeq	r4, r1, r4, lsl #16
   146d8:	andeq	r4, r1, r4, lsl #16
   146dc:	andeq	r4, r1, r4, lsl #16
   146e0:	andeq	r4, r1, r4, lsl #16
   146e4:	andeq	r4, r1, r4, lsl #16
   146e8:	strdeq	r4, [r1], -r8
   146ec:	andeq	r4, r1, r4, lsl r8
   146f0:	strdeq	r4, [r1], -r8
   146f4:	andeq	r4, r1, ip, lsl #16
   146f8:	ldr	r3, [sp, #24]
   146fc:	mov	r6, #0
   14700:	cmn	r3, #1
   14704:	bne	140b0 <__assert_fail@plt+0x2d28>
   14708:	ldr	r3, [sp, #44]	; 0x2c
   1470c:	ldrb	r3, [r3, #1]
   14710:	adds	r3, r3, #0
   14714:	movne	r3, #1
   14718:	b	140b8 <__assert_fail@plt+0x2d30>
   1471c:	ldr	r3, [sp, #176]	; 0xb0
   14720:	mov	r6, #0
   14724:	cmp	r3, #2
   14728:	bne	141f8 <__assert_fail@plt+0x2e70>
   1472c:	ldr	r3, [sp, #64]	; 0x40
   14730:	cmp	r3, #0
   14734:	bne	14f6c <__assert_fail@plt+0x3be4>
   14738:	add	sl, sl, #1
   1473c:	ldr	r6, [sp, #36]	; 0x24
   14740:	str	r3, [sp, #32]
   14744:	mov	r4, #92	; 0x5c
   14748:	b	14104 <__assert_fail@plt+0x2d7c>
   1474c:	ldr	r3, [sp, #176]	; 0xb0
   14750:	mov	r6, #0
   14754:	cmp	r3, #2
   14758:	bne	1422c <__assert_fail@plt+0x2ea4>
   1475c:	ldr	r3, [sp, #40]	; 0x28
   14760:	cmp	r3, #0
   14764:	bne	14a48 <__assert_fail@plt+0x36c0>
   14768:	mov	r1, r7
   1476c:	str	r3, [sp, #32]
   14770:	mov	r4, #63	; 0x3f
   14774:	b	140d0 <__assert_fail@plt+0x2d48>
   14778:	ldr	r3, [sp, #176]	; 0xb0
   1477c:	mov	r6, #0
   14780:	cmp	r3, #2
   14784:	bne	1427c <__assert_fail@plt+0x2ef4>
   14788:	ldr	r3, [sp, #64]	; 0x40
   1478c:	cmp	r3, #0
   14790:	bne	14f6c <__assert_fail@plt+0x3be4>
   14794:	ldr	r2, [sp, #84]	; 0x54
   14798:	adds	r3, fp, #0
   1479c:	movne	r3, #1
   147a0:	cmp	r2, #0
   147a4:	movne	r3, #0
   147a8:	cmp	r3, #0
   147ac:	strne	fp, [sp, #84]	; 0x54
   147b0:	movne	fp, #0
   147b4:	bne	147e4 <__assert_fail@plt+0x345c>
   147b8:	cmp	fp, r8
   147bc:	movhi	r3, #39	; 0x27
   147c0:	strbhi	r3, [r9, r8]
   147c4:	add	r3, r8, #1
   147c8:	cmp	fp, r3
   147cc:	movhi	r2, #92	; 0x5c
   147d0:	strbhi	r2, [r9, r3]
   147d4:	add	r3, r8, #2
   147d8:	cmp	fp, r3
   147dc:	movhi	r2, #39	; 0x27
   147e0:	strbhi	r2, [r9, r3]
   147e4:	ldr	r3, [sp, #64]	; 0x40
   147e8:	add	r8, r8, #3
   147ec:	mov	r1, r7
   147f0:	str	r7, [sp, #32]
   147f4:	str	r7, [sp, #76]	; 0x4c
   147f8:	str	r3, [sp, #36]	; 0x24
   147fc:	mov	r4, #39	; 0x27
   14800:	b	140d0 <__assert_fail@plt+0x2d48>
   14804:	mov	r6, #0
   14808:	b	14294 <__assert_fail@plt+0x2f0c>
   1480c:	mov	r6, #0
   14810:	b	14488 <__assert_fail@plt+0x3100>
   14814:	mov	r6, #0
   14818:	b	144a8 <__assert_fail@plt+0x3120>
   1481c:	str	r7, [sp, #32]
   14820:	mov	r6, #0
   14824:	b	144b0 <__assert_fail@plt+0x3128>
   14828:	mov	r6, #0
   1482c:	b	144d8 <__assert_fail@plt+0x3150>
   14830:	mov	r6, #0
   14834:	b	142a4 <__assert_fail@plt+0x2f1c>
   14838:	mov	r6, #0
   1483c:	b	1436c <__assert_fail@plt+0x2fe4>
   14840:	mov	r6, #0
   14844:	b	1433c <__assert_fail@plt+0x2fb4>
   14848:	mov	r6, #0
   1484c:	mov	r3, #116	; 0x74
   14850:	b	14344 <__assert_fail@plt+0x2fbc>
   14854:	mov	r6, #0
   14858:	b	14380 <__assert_fail@plt+0x2ff8>
   1485c:	mov	r6, #0
   14860:	b	14394 <__assert_fail@plt+0x300c>
   14864:	ldr	r3, [sp, #56]	; 0x38
   14868:	mov	r6, #0
   1486c:	cmp	r3, #0
   14870:	bne	143b4 <__assert_fail@plt+0x302c>
   14874:	ldr	r3, [sp, #96]	; 0x60
   14878:	cmp	r3, #0
   1487c:	addne	sl, sl, #1
   14880:	bne	13c28 <__assert_fail@plt+0x28a0>
   14884:	ldr	r1, [sp, #52]	; 0x34
   14888:	str	r3, [sp, #32]
   1488c:	mov	r4, r3
   14890:	b	140d0 <__assert_fail@plt+0x2d48>
   14894:	mov	r6, #0
   14898:	ldr	r3, [sp, #80]	; 0x50
   1489c:	cmp	r3, #1
   148a0:	bne	14a90 <__assert_fail@plt+0x3708>
   148a4:	bl	1122c <__ctype_b_loc@plt>
   148a8:	ldr	r2, [sp, #80]	; 0x50
   148ac:	sxth	r3, r4
   148b0:	mov	r1, r2
   148b4:	lsl	r3, r3, #1
   148b8:	ldr	r2, [r0]
   148bc:	ldrh	r3, [r2, r3]
   148c0:	and	r3, r3, #16384	; 0x4000
   148c4:	cmp	r3, #0
   148c8:	movne	r3, #1
   148cc:	moveq	r3, #0
   148d0:	str	r3, [sp, #32]
   148d4:	moveq	r3, #1
   148d8:	movne	r3, #0
   148dc:	ldr	r2, [sp, #56]	; 0x38
   148e0:	and	r3, r3, r2
   148e4:	ands	r3, r3, #255	; 0xff
   148e8:	beq	144bc <__assert_fail@plt+0x3134>
   148ec:	add	r1, sl, r1
   148f0:	mov	r0, #0
   148f4:	ldr	r7, [sp, #40]	; 0x28
   148f8:	ldr	r2, [sp, #36]	; 0x24
   148fc:	ldr	lr, [sp, #52]	; 0x34
   14900:	b	149b0 <__assert_fail@plt+0x3628>
   14904:	cmp	r7, #0
   14908:	bne	14d04 <__assert_fail@plt+0x397c>
   1490c:	eor	r0, r2, #1
   14910:	ands	r0, lr, r0
   14914:	beq	1494c <__assert_fail@plt+0x35c4>
   14918:	cmp	fp, r8
   1491c:	movhi	r2, #39	; 0x27
   14920:	strbhi	r2, [r9, r8]
   14924:	add	r2, r8, #1
   14928:	cmp	fp, r2
   1492c:	movhi	ip, #36	; 0x24
   14930:	strbhi	ip, [r9, r2]
   14934:	add	r2, r8, #2
   14938:	cmp	fp, r2
   1493c:	movhi	ip, #39	; 0x27
   14940:	strbhi	ip, [r9, r2]
   14944:	add	r8, r8, #3
   14948:	mov	r2, r0
   1494c:	cmp	fp, r8
   14950:	movhi	r0, #92	; 0x5c
   14954:	strbhi	r0, [r9, r8]
   14958:	add	r0, r8, #1
   1495c:	cmp	fp, r0
   14960:	lsrhi	ip, r4, #6
   14964:	addhi	ip, ip, #48	; 0x30
   14968:	strbhi	ip, [r9, r0]
   1496c:	add	ip, r8, #2
   14970:	cmp	fp, ip
   14974:	lsrhi	r0, r4, #3
   14978:	andhi	r0, r0, #7
   1497c:	addhi	r0, r0, #48	; 0x30
   14980:	add	sl, sl, #1
   14984:	strbhi	r0, [r9, ip]
   14988:	and	r4, r4, #7
   1498c:	cmp	sl, r1
   14990:	add	r4, r4, #48	; 0x30
   14994:	add	r8, r8, #3
   14998:	bcs	14d1c <__assert_fail@plt+0x3994>
   1499c:	mov	r0, r3
   149a0:	cmp	fp, r8
   149a4:	strbhi	r4, [r9, r8]
   149a8:	ldrb	r4, [r5, #1]!
   149ac:	add	r8, r8, #1
   149b0:	cmp	r3, #0
   149b4:	bne	14904 <__assert_fail@plt+0x357c>
   149b8:	cmp	r6, #0
   149bc:	bne	14a60 <__assert_fail@plt+0x36d8>
   149c0:	eor	r6, r0, #1
   149c4:	and	r6, r6, r2
   149c8:	add	sl, sl, #1
   149cc:	cmp	r1, sl
   149d0:	uxtb	r6, r6
   149d4:	bls	14a88 <__assert_fail@plt+0x3700>
   149d8:	cmp	r6, #0
   149dc:	beq	149a0 <__assert_fail@plt+0x3618>
   149e0:	cmp	fp, r8
   149e4:	movhi	r2, #39	; 0x27
   149e8:	strbhi	r2, [r9, r8]
   149ec:	add	r2, r8, #1
   149f0:	cmp	fp, r2
   149f4:	movhi	ip, #39	; 0x27
   149f8:	strbhi	ip, [r9, r2]
   149fc:	add	r8, r8, #2
   14a00:	mov	r6, r3
   14a04:	mov	r2, r3
   14a08:	b	149a0 <__assert_fail@plt+0x3618>
   14a0c:	ldr	r3, [sp, #184]	; 0xb8
   14a10:	cmp	r3, #0
   14a14:	beq	140ec <__assert_fail@plt+0x2d64>
   14a18:	lsr	r2, r4, #5
   14a1c:	mov	r0, r3
   14a20:	uxtb	r2, r2
   14a24:	and	r3, r4, #31
   14a28:	ldr	r2, [r0, r2, lsl #2]
   14a2c:	lsr	r3, r2, r3
   14a30:	tst	r3, #1
   14a34:	beq	140ec <__assert_fail@plt+0x2d64>
   14a38:	ldr	r3, [sp, #40]	; 0x28
   14a3c:	cmp	r3, #0
   14a40:	beq	142d8 <__assert_fail@plt+0x2f50>
   14a44:	mov	r3, r1
   14a48:	str	r3, [sp, #64]	; 0x40
   14a4c:	mov	sl, r9
   14a50:	ldr	r3, [sp, #56]	; 0x38
   14a54:	mov	r9, fp
   14a58:	ldr	r2, [sp, #64]	; 0x40
   14a5c:	b	14c4c <__assert_fail@plt+0x38c4>
   14a60:	cmp	fp, r8
   14a64:	eor	r6, r0, #1
   14a68:	movhi	ip, #92	; 0x5c
   14a6c:	and	r6, r6, r2
   14a70:	add	sl, sl, #1
   14a74:	strbhi	ip, [r9, r8]
   14a78:	cmp	r1, sl
   14a7c:	add	r8, r8, #1
   14a80:	uxtb	r6, r6
   14a84:	bhi	149d8 <__assert_fail@plt+0x3650>
   14a88:	str	r2, [sp, #36]	; 0x24
   14a8c:	b	14104 <__assert_fail@plt+0x2d7c>
   14a90:	ldr	r3, [sp, #24]
   14a94:	cmn	r3, #1
   14a98:	mov	r3, #0
   14a9c:	str	r3, [sp, #128]	; 0x80
   14aa0:	str	r3, [sp, #132]	; 0x84
   14aa4:	beq	14d98 <__assert_fail@plt+0x3a10>
   14aa8:	mov	r2, r7
   14aac:	mov	r3, #0
   14ab0:	str	r7, [sp, #104]	; 0x68
   14ab4:	str	r5, [sp, #116]	; 0x74
   14ab8:	mov	r7, r3
   14abc:	mov	r5, r2
   14ac0:	str	r4, [sp, #32]
   14ac4:	str	r6, [sp, #108]	; 0x6c
   14ac8:	str	r8, [sp, #112]	; 0x70
   14acc:	ldr	r3, [sp, #44]	; 0x2c
   14ad0:	add	r6, sl, r7
   14ad4:	add	r4, r3, r6
   14ad8:	ldr	r3, [sp, #24]
   14adc:	mov	r1, r4
   14ae0:	sub	r2, r3, r6
   14ae4:	add	r0, sp, #124	; 0x7c
   14ae8:	add	r3, sp, #128	; 0x80
   14aec:	bl	13710 <__assert_fail@plt+0x2388>
   14af0:	subs	r8, r0, #0
   14af4:	beq	14e7c <__assert_fail@plt+0x3af4>
   14af8:	cmn	r8, #1
   14afc:	beq	14e54 <__assert_fail@plt+0x3acc>
   14b00:	cmn	r8, #2
   14b04:	beq	14dec <__assert_fail@plt+0x3a64>
   14b08:	ldr	r3, [sp, #64]	; 0x40
   14b0c:	cmp	r3, #0
   14b10:	beq	14bd0 <__assert_fail@plt+0x3848>
   14b14:	cmp	r8, #1
   14b18:	beq	14bd0 <__assert_fail@plt+0x3848>
   14b1c:	sub	r3, r8, #1
   14b20:	add	r6, r3, r6
   14b24:	ldr	r3, [sp, #44]	; 0x2c
   14b28:	add	r6, r3, r6
   14b2c:	ldrb	r3, [r4, #1]!
   14b30:	sub	r3, r3, #91	; 0x5b
   14b34:	cmp	r3, #33	; 0x21
   14b38:	ldrls	pc, [pc, r3, lsl #2]
   14b3c:	b	14bc8 <__assert_fail@plt+0x3840>
   14b40:	andeq	r4, r1, r4, lsr ip
   14b44:	andeq	r4, r1, r4, lsr ip
   14b48:	andeq	r4, r1, r8, asr #23
   14b4c:	andeq	r4, r1, r4, lsr ip
   14b50:	andeq	r4, r1, r8, asr #23
   14b54:	andeq	r4, r1, r4, lsr ip
   14b58:	andeq	r4, r1, r8, asr #23
   14b5c:	andeq	r4, r1, r8, asr #23
   14b60:	andeq	r4, r1, r8, asr #23
   14b64:	andeq	r4, r1, r8, asr #23
   14b68:	andeq	r4, r1, r8, asr #23
   14b6c:	andeq	r4, r1, r8, asr #23
   14b70:	andeq	r4, r1, r8, asr #23
   14b74:	andeq	r4, r1, r8, asr #23
   14b78:	andeq	r4, r1, r8, asr #23
   14b7c:	andeq	r4, r1, r8, asr #23
   14b80:	andeq	r4, r1, r8, asr #23
   14b84:	andeq	r4, r1, r8, asr #23
   14b88:	andeq	r4, r1, r8, asr #23
   14b8c:	andeq	r4, r1, r8, asr #23
   14b90:	andeq	r4, r1, r8, asr #23
   14b94:	andeq	r4, r1, r8, asr #23
   14b98:	andeq	r4, r1, r8, asr #23
   14b9c:	andeq	r4, r1, r8, asr #23
   14ba0:	andeq	r4, r1, r8, asr #23
   14ba4:	andeq	r4, r1, r8, asr #23
   14ba8:	andeq	r4, r1, r8, asr #23
   14bac:	andeq	r4, r1, r8, asr #23
   14bb0:	andeq	r4, r1, r8, asr #23
   14bb4:	andeq	r4, r1, r8, asr #23
   14bb8:	andeq	r4, r1, r8, asr #23
   14bbc:	andeq	r4, r1, r8, asr #23
   14bc0:	andeq	r4, r1, r8, asr #23
   14bc4:	andeq	r4, r1, r4, lsr ip
   14bc8:	cmp	r6, r4
   14bcc:	bne	14b2c <__assert_fail@plt+0x37a4>
   14bd0:	ldr	r0, [sp, #124]	; 0x7c
   14bd4:	bl	1116c <iswprint@plt>
   14bd8:	add	r7, r7, r8
   14bdc:	cmp	r0, #0
   14be0:	add	r0, sp, #128	; 0x80
   14be4:	moveq	r5, #0
   14be8:	bl	11100 <mbsinit@plt>
   14bec:	cmp	r0, #0
   14bf0:	beq	14acc <__assert_fail@plt+0x3744>
   14bf4:	ldr	r4, [sp, #32]
   14bf8:	str	r5, [sp, #32]
   14bfc:	ldr	r3, [sp, #32]
   14c00:	mov	r1, r7
   14c04:	eor	r3, r3, #1
   14c08:	ldr	r7, [sp, #104]	; 0x68
   14c0c:	ldr	r6, [sp, #108]	; 0x6c
   14c10:	ldr	r8, [sp, #112]	; 0x70
   14c14:	ldr	r5, [sp, #116]	; 0x74
   14c18:	uxtb	r3, r3
   14c1c:	cmp	r1, #1
   14c20:	bls	148dc <__assert_fail@plt+0x3554>
   14c24:	ldr	r2, [sp, #56]	; 0x38
   14c28:	and	r3, r3, r2
   14c2c:	uxtb	r3, r3
   14c30:	b	148ec <__assert_fail@plt+0x3564>
   14c34:	mov	r3, #2
   14c38:	str	r3, [sp, #176]	; 0xb0
   14c3c:	ldr	r2, [sp, #64]	; 0x40
   14c40:	ldr	r3, [sp, #56]	; 0x38
   14c44:	mov	sl, r9
   14c48:	mov	r9, fp
   14c4c:	and	r3, r3, r2
   14c50:	tst	r3, #255	; 0xff
   14c54:	ldr	r3, [sp, #176]	; 0xb0
   14c58:	movne	r3, #4
   14c5c:	str	r3, [sp, #176]	; 0xb0
   14c60:	ldr	r3, [sp, #180]	; 0xb4
   14c64:	mov	ip, #0
   14c68:	bic	r3, r3, #2
   14c6c:	str	r3, [sp, #4]
   14c70:	ldr	r3, [sp, #192]	; 0xc0
   14c74:	ldr	r2, [sp, #44]	; 0x2c
   14c78:	str	r3, [sp, #16]
   14c7c:	ldr	r3, [sp, #188]	; 0xbc
   14c80:	mov	r1, r9
   14c84:	str	r3, [sp, #12]
   14c88:	ldr	r3, [sp, #176]	; 0xb0
   14c8c:	mov	r0, sl
   14c90:	str	r3, [sp]
   14c94:	str	ip, [sp, #8]
   14c98:	ldr	r3, [sp, #24]
   14c9c:	bl	13afc <__assert_fail@plt+0x2774>
   14ca0:	mov	fp, r0
   14ca4:	mov	r0, fp
   14ca8:	add	sp, sp, #140	; 0x8c
   14cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb0:	mov	r4, #92	; 0x5c
   14cb4:	mov	r1, #0
   14cb8:	mov	r3, r4
   14cbc:	b	142b0 <__assert_fail@plt+0x2f28>
   14cc0:	mov	r3, #0
   14cc4:	ldr	r1, [sp, #52]	; 0x34
   14cc8:	str	r3, [sp, #32]
   14ccc:	mov	r4, #63	; 0x3f
   14cd0:	b	140d0 <__assert_fail@plt+0x2d48>
   14cd4:	cmp	fp, #0
   14cd8:	beq	14d34 <__assert_fail@plt+0x39ac>
   14cdc:	mov	r3, #39	; 0x27
   14ce0:	strb	r3, [r9]
   14ce4:	mov	r3, #0
   14ce8:	str	r3, [sp, #40]	; 0x28
   14cec:	mov	r3, #1
   14cf0:	str	r3, [sp, #68]	; 0x44
   14cf4:	ldr	r3, [pc, #448]	; 14ebc <__assert_fail@plt+0x3b34>
   14cf8:	mov	r8, #1
   14cfc:	str	r3, [sp, #72]	; 0x48
   14d00:	b	13ee4 <__assert_fail@plt+0x2b5c>
   14d04:	ldr	r3, [sp, #40]	; 0x28
   14d08:	mov	sl, r9
   14d0c:	str	r3, [sp, #56]	; 0x38
   14d10:	mov	r9, fp
   14d14:	ldr	r2, [sp, #64]	; 0x40
   14d18:	b	14c4c <__assert_fail@plt+0x38c4>
   14d1c:	str	r2, [sp, #36]	; 0x24
   14d20:	b	14134 <__assert_fail@plt+0x2dac>
   14d24:	mov	r1, #0
   14d28:	str	r3, [sp, #32]
   14d2c:	mov	r4, #63	; 0x3f
   14d30:	b	140d0 <__assert_fail@plt+0x2d48>
   14d34:	ldr	r3, [pc, #384]	; 14ebc <__assert_fail@plt+0x3b34>
   14d38:	str	r3, [sp, #72]	; 0x48
   14d3c:	mov	r3, #0
   14d40:	str	r3, [sp, #40]	; 0x28
   14d44:	mov	r3, #1
   14d48:	str	r3, [sp, #68]	; 0x44
   14d4c:	mov	r8, r3
   14d50:	b	13ee4 <__assert_fail@plt+0x2b5c>
   14d54:	bl	11370 <abort@plt>
   14d58:	cmp	fp, #0
   14d5c:	beq	14dbc <__assert_fail@plt+0x3a34>
   14d60:	mov	r2, #1
   14d64:	mov	r3, #34	; 0x22
   14d68:	strb	r3, [r9]
   14d6c:	mov	r8, r2
   14d70:	mov	r3, r2
   14d74:	str	r2, [sp, #68]	; 0x44
   14d78:	str	r3, [sp, #56]	; 0x38
   14d7c:	ldr	r3, [pc, #316]	; 14ec0 <__assert_fail@plt+0x3b38>
   14d80:	ldr	r1, [sp, #56]	; 0x38
   14d84:	str	r3, [sp, #72]	; 0x48
   14d88:	ldr	r2, [sp, #176]	; 0xb0
   14d8c:	ldr	ip, [sp, #40]	; 0x28
   14d90:	ldr	lr, [sp, #176]	; 0xb0
   14d94:	b	13bc8 <__assert_fail@plt+0x2840>
   14d98:	ldr	r0, [sp, #44]	; 0x2c
   14d9c:	bl	1125c <strlen@plt>
   14da0:	str	r0, [sp, #24]
   14da4:	b	14aa8 <__assert_fail@plt+0x3720>
   14da8:	mov	r7, #0
   14dac:	ldr	r1, [sp, #52]	; 0x34
   14db0:	str	r3, [sp, #32]
   14db4:	mov	r4, #48	; 0x30
   14db8:	b	140d0 <__assert_fail@plt+0x2d48>
   14dbc:	mov	r3, #1
   14dc0:	str	r3, [sp, #68]	; 0x44
   14dc4:	mov	r8, r3
   14dc8:	b	14d78 <__assert_fail@plt+0x39f0>
   14dcc:	mov	r3, #2
   14dd0:	mov	sl, r9
   14dd4:	str	r3, [sp, #176]	; 0xb0
   14dd8:	mov	r9, fp
   14ddc:	ldr	r3, [sp, #56]	; 0x38
   14de0:	b	14c4c <__assert_fail@plt+0x38c4>
   14de4:	ldr	r6, [sp, #48]	; 0x30
   14de8:	b	14898 <__assert_fail@plt+0x3510>
   14dec:	ldr	r0, [sp, #24]
   14df0:	mov	ip, r6
   14df4:	cmp	r0, ip
   14df8:	mov	r1, r7
   14dfc:	mov	r2, r4
   14e00:	ldr	r7, [sp, #104]	; 0x68
   14e04:	ldr	r4, [sp, #32]
   14e08:	ldr	r6, [sp, #108]	; 0x6c
   14e0c:	ldr	r8, [sp, #112]	; 0x70
   14e10:	ldr	r5, [sp, #116]	; 0x74
   14e14:	bls	14e44 <__assert_fail@plt+0x3abc>
   14e18:	ldrb	r3, [r2]
   14e1c:	cmp	r3, #0
   14e20:	bne	14e34 <__assert_fail@plt+0x3aac>
   14e24:	b	14f54 <__assert_fail@plt+0x3bcc>
   14e28:	ldrb	r3, [r2, #1]!
   14e2c:	cmp	r3, #0
   14e30:	beq	14f54 <__assert_fail@plt+0x3bcc>
   14e34:	add	r1, r1, #1
   14e38:	add	r3, sl, r1
   14e3c:	cmp	r0, r3
   14e40:	bhi	14e28 <__assert_fail@plt+0x3aa0>
   14e44:	mov	r2, #0
   14e48:	mov	r3, r7
   14e4c:	str	r2, [sp, #32]
   14e50:	b	14c1c <__assert_fail@plt+0x3894>
   14e54:	mov	r1, r7
   14e58:	ldr	r7, [sp, #104]	; 0x68
   14e5c:	mov	r2, #0
   14e60:	ldr	r4, [sp, #32]
   14e64:	ldr	r6, [sp, #108]	; 0x6c
   14e68:	ldr	r8, [sp, #112]	; 0x70
   14e6c:	ldr	r5, [sp, #116]	; 0x74
   14e70:	mov	r3, r7
   14e74:	str	r2, [sp, #32]
   14e78:	b	14c1c <__assert_fail@plt+0x3894>
   14e7c:	mov	r3, r5
   14e80:	eor	r3, r3, #1
   14e84:	ldr	r4, [sp, #32]
   14e88:	mov	r1, r7
   14e8c:	str	r5, [sp, #32]
   14e90:	ldr	r7, [sp, #104]	; 0x68
   14e94:	ldr	r6, [sp, #108]	; 0x6c
   14e98:	ldr	r8, [sp, #112]	; 0x70
   14e9c:	ldr	r5, [sp, #116]	; 0x74
   14ea0:	uxtb	r3, r3
   14ea4:	b	14c1c <__assert_fail@plt+0x3894>
   14ea8:	mov	sl, r9
   14eac:	str	r3, [sp, #56]	; 0x38
   14eb0:	mov	r9, fp
   14eb4:	ldr	r2, [sp, #64]	; 0x40
   14eb8:	b	14c4c <__assert_fail@plt+0x38c4>
   14ebc:	andeq	sl, r1, r8, lsl #16
   14ec0:	andeq	sl, r1, r4, lsl #16
   14ec4:	andeq	sl, r1, ip, lsl #16
   14ec8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14ecc:	ldr	r2, [sp, #44]	; 0x2c
   14ed0:	ldrb	r1, [r2, r3]
   14ed4:	sub	r2, r1, #33	; 0x21
   14ed8:	uxtb	r2, r2
   14edc:	cmp	r2, #29
   14ee0:	bhi	14f60 <__assert_fail@plt+0x3bd8>
   14ee4:	ldr	r0, [pc, #-36]	; 14ec8 <__assert_fail@plt+0x3b40>
   14ee8:	mov	ip, #1
   14eec:	ands	r2, r0, ip, lsl r2
   14ef0:	beq	14f80 <__assert_fail@plt+0x3bf8>
   14ef4:	ldr	r2, [sp, #40]	; 0x28
   14ef8:	cmp	r2, #0
   14efc:	bne	15074 <__assert_fail@plt+0x3cec>
   14f00:	add	r2, r8, #1
   14f04:	cmp	fp, r8
   14f08:	strbhi	r4, [r9, r8]
   14f0c:	cmp	fp, r2
   14f10:	movhi	r0, #34	; 0x22
   14f14:	strbhi	r0, [r9, r2]
   14f18:	add	r2, r8, #2
   14f1c:	cmp	fp, r2
   14f20:	movhi	r0, #34	; 0x22
   14f24:	strbhi	r0, [r9, r2]
   14f28:	add	r2, r8, #3
   14f2c:	cmp	fp, r2
   14f30:	mov	sl, r3
   14f34:	ldr	r3, [sp, #40]	; 0x28
   14f38:	movhi	r0, #63	; 0x3f
   14f3c:	mov	r4, r1
   14f40:	strbhi	r0, [r9, r2]
   14f44:	add	r8, r8, #4
   14f48:	mov	r1, r3
   14f4c:	str	r3, [sp, #32]
   14f50:	b	140d0 <__assert_fail@plt+0x2d48>
   14f54:	str	r3, [sp, #32]
   14f58:	mov	r3, r7
   14f5c:	b	14c1c <__assert_fail@plt+0x3894>
   14f60:	mov	r1, #0
   14f64:	str	r1, [sp, #32]
   14f68:	b	140d0 <__assert_fail@plt+0x2d48>
   14f6c:	mov	sl, r9
   14f70:	ldr	r3, [sp, #56]	; 0x38
   14f74:	mov	r9, fp
   14f78:	ldr	r2, [sp, #64]	; 0x40
   14f7c:	b	14c4c <__assert_fail@plt+0x38c4>
   14f80:	str	r2, [sp, #32]
   14f84:	mov	r1, #0
   14f88:	b	140d0 <__assert_fail@plt+0x2d48>
   14f8c:	ldr	r2, [sp, #76]	; 0x4c
   14f90:	mov	sl, r9
   14f94:	mov	r9, fp
   14f98:	mov	fp, r8
   14f9c:	ldr	r1, [sp, #72]	; 0x48
   14fa0:	cmp	r1, #0
   14fa4:	moveq	r3, #0
   14fa8:	andne	r3, r2, #1
   14fac:	cmp	r3, #0
   14fb0:	beq	14fdc <__assert_fail@plt+0x3c54>
   14fb4:	ldrb	r3, [r1]
   14fb8:	cmp	r3, #0
   14fbc:	beq	14fdc <__assert_fail@plt+0x3c54>
   14fc0:	mov	r2, r1
   14fc4:	cmp	r9, fp
   14fc8:	strbhi	r3, [sl, fp]
   14fcc:	ldrb	r3, [r2, #1]!
   14fd0:	add	fp, fp, #1
   14fd4:	cmp	r3, #0
   14fd8:	bne	14fc4 <__assert_fail@plt+0x3c3c>
   14fdc:	cmp	r9, fp
   14fe0:	movhi	r3, #0
   14fe4:	strbhi	r3, [sl, fp]
   14fe8:	b	14ca4 <__assert_fail@plt+0x391c>
   14fec:	ldr	r3, [sp, #192]	; 0xc0
   14ff0:	mov	ip, #5
   14ff4:	str	r3, [sp, #16]
   14ff8:	ldr	r3, [sp, #188]	; 0xbc
   14ffc:	ldr	r2, [sp, #44]	; 0x2c
   15000:	str	r3, [sp, #12]
   15004:	ldr	r3, [sp, #184]	; 0xb8
   15008:	ldr	r1, [sp, #84]	; 0x54
   1500c:	str	r3, [sp, #8]
   15010:	ldr	r3, [sp, #180]	; 0xb4
   15014:	mov	r0, r9
   15018:	str	r3, [sp, #4]
   1501c:	str	ip, [sp]
   15020:	ldr	r3, [sp, #24]
   15024:	bl	13afc <__assert_fail@plt+0x2774>
   15028:	mov	fp, r0
   1502c:	b	14ca4 <__assert_fail@plt+0x391c>
   15030:	mov	sl, r9
   15034:	mov	r9, fp
   15038:	mov	fp, r8
   1503c:	b	14f9c <__assert_fail@plt+0x3c14>
   15040:	ldr	r1, [sp, #176]	; 0xb0
   15044:	bl	139dc <__assert_fail@plt+0x2654>
   15048:	str	r0, [sp, #192]	; 0xc0
   1504c:	b	13fb8 <__assert_fail@plt+0x2c30>
   15050:	ldr	r1, [sp, #176]	; 0xb0
   15054:	bl	139dc <__assert_fail@plt+0x2654>
   15058:	str	r0, [sp, #188]	; 0xbc
   1505c:	b	13f98 <__assert_fail@plt+0x2c10>
   15060:	mov	sl, r9
   15064:	mov	r2, r3
   15068:	mov	r9, fp
   1506c:	mov	fp, r8
   15070:	b	14f9c <__assert_fail@plt+0x3c14>
   15074:	mov	sl, r9
   15078:	mov	r9, fp
   1507c:	b	14c60 <__assert_fail@plt+0x38d8>
   15080:	push	{r4, r5, r6, lr}
   15084:	mov	r5, r0
   15088:	bl	11280 <__errno_location@plt>
   1508c:	cmp	r5, #0
   15090:	mov	r1, #48	; 0x30
   15094:	mov	r4, r0
   15098:	ldr	r0, [pc, #16]	; 150b0 <__assert_fail@plt+0x3d28>
   1509c:	ldr	r6, [r4]
   150a0:	movne	r0, r5
   150a4:	bl	18c9c <__assert_fail@plt+0x7914>
   150a8:	str	r6, [r4]
   150ac:	pop	{r4, r5, r6, pc}
   150b0:	strdeq	fp, [r2], -r4
   150b4:	ldr	r3, [pc, #12]	; 150c8 <__assert_fail@plt+0x3d40>
   150b8:	cmp	r0, #0
   150bc:	moveq	r0, r3
   150c0:	ldr	r0, [r0]
   150c4:	bx	lr
   150c8:	strdeq	fp, [r2], -r4
   150cc:	ldr	r3, [pc, #12]	; 150e0 <__assert_fail@plt+0x3d58>
   150d0:	cmp	r0, #0
   150d4:	moveq	r0, r3
   150d8:	str	r1, [r0]
   150dc:	bx	lr
   150e0:	strdeq	fp, [r2], -r4
   150e4:	ldr	r3, [pc, #52]	; 15120 <__assert_fail@plt+0x3d98>
   150e8:	cmp	r0, #0
   150ec:	moveq	r0, r3
   150f0:	add	r3, r0, #8
   150f4:	push	{lr}		; (str lr, [sp, #-4]!)
   150f8:	lsr	lr, r1, #5
   150fc:	and	r1, r1, #31
   15100:	ldr	ip, [r3, lr, lsl #2]
   15104:	lsr	r0, ip, r1
   15108:	eor	r2, r2, r0
   1510c:	and	r2, r2, #1
   15110:	and	r0, r0, #1
   15114:	eor	r1, ip, r2, lsl r1
   15118:	str	r1, [r3, lr, lsl #2]
   1511c:	pop	{pc}		; (ldr pc, [sp], #4)
   15120:	strdeq	fp, [r2], -r4
   15124:	ldr	r3, [pc, #16]	; 1513c <__assert_fail@plt+0x3db4>
   15128:	cmp	r0, #0
   1512c:	movne	r3, r0
   15130:	ldr	r0, [r3, #4]
   15134:	str	r1, [r3, #4]
   15138:	bx	lr
   1513c:	strdeq	fp, [r2], -r4
   15140:	ldr	r3, [pc, #44]	; 15174 <__assert_fail@plt+0x3dec>
   15144:	cmp	r0, #0
   15148:	moveq	r0, r3
   1514c:	mov	ip, #10
   15150:	cmp	r2, #0
   15154:	cmpne	r1, #0
   15158:	str	ip, [r0]
   1515c:	beq	1516c <__assert_fail@plt+0x3de4>
   15160:	str	r1, [r0, #40]	; 0x28
   15164:	str	r2, [r0, #44]	; 0x2c
   15168:	bx	lr
   1516c:	push	{r4, lr}
   15170:	bl	11370 <abort@plt>
   15174:	strdeq	fp, [r2], -r4
   15178:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1517c:	sub	sp, sp, #24
   15180:	ldr	ip, [pc, #108]	; 151f4 <__assert_fail@plt+0x3e6c>
   15184:	ldr	r4, [sp, #56]	; 0x38
   15188:	mov	r9, r2
   1518c:	cmp	r4, #0
   15190:	moveq	r4, ip
   15194:	mov	sl, r3
   15198:	mov	r7, r0
   1519c:	mov	r8, r1
   151a0:	bl	11280 <__errno_location@plt>
   151a4:	ldr	r3, [r4, #44]	; 0x2c
   151a8:	mov	r1, r8
   151ac:	ldr	r6, [r0]
   151b0:	str	r3, [sp, #16]
   151b4:	ldr	r2, [r4, #40]	; 0x28
   151b8:	add	r3, r4, #8
   151bc:	str	r3, [sp, #8]
   151c0:	str	r2, [sp, #12]
   151c4:	ldr	r2, [r4, #4]
   151c8:	mov	r5, r0
   151cc:	str	r2, [sp, #4]
   151d0:	ldr	ip, [r4]
   151d4:	mov	r3, sl
   151d8:	mov	r2, r9
   151dc:	mov	r0, r7
   151e0:	str	ip, [sp]
   151e4:	bl	13afc <__assert_fail@plt+0x2774>
   151e8:	str	r6, [r5]
   151ec:	add	sp, sp, #24
   151f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151f4:	strdeq	fp, [r2], -r4
   151f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151fc:	cmp	r2, #0
   15200:	sub	sp, sp, #36	; 0x24
   15204:	ldr	r4, [pc, #164]	; 152b0 <__assert_fail@plt+0x3f28>
   15208:	mov	r8, r1
   1520c:	movne	r4, r2
   15210:	mov	r7, r0
   15214:	bl	11280 <__errno_location@plt>
   15218:	ldr	r3, [r4, #44]	; 0x2c
   1521c:	ldr	r5, [r4, #4]
   15220:	add	r9, r4, #8
   15224:	orr	r5, r5, #1
   15228:	mov	r1, #0
   1522c:	mov	r2, r7
   15230:	ldr	fp, [r0]
   15234:	str	r3, [sp, #16]
   15238:	ldr	r3, [r4, #40]	; 0x28
   1523c:	stmib	sp, {r5, r9}
   15240:	str	r3, [sp, #12]
   15244:	ldr	r3, [r4]
   15248:	mov	r6, r0
   1524c:	str	r3, [sp]
   15250:	mov	r0, r1
   15254:	mov	r3, r8
   15258:	bl	13afc <__assert_fail@plt+0x2774>
   1525c:	add	r1, r0, #1
   15260:	mov	r0, r1
   15264:	str	r1, [sp, #28]
   15268:	bl	18758 <__assert_fail@plt+0x73d0>
   1526c:	ldr	r3, [r4, #44]	; 0x2c
   15270:	ldr	r1, [sp, #28]
   15274:	str	r3, [sp, #16]
   15278:	ldr	r3, [r4, #40]	; 0x28
   1527c:	str	r5, [sp, #4]
   15280:	str	r3, [sp, #12]
   15284:	str	r9, [sp, #8]
   15288:	ldr	ip, [r4]
   1528c:	mov	r3, r8
   15290:	mov	r2, r7
   15294:	str	ip, [sp]
   15298:	mov	sl, r0
   1529c:	bl	13afc <__assert_fail@plt+0x2774>
   152a0:	mov	r0, sl
   152a4:	str	fp, [r6]
   152a8:	add	sp, sp, #36	; 0x24
   152ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152b0:	strdeq	fp, [r2], -r4
   152b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b8:	cmp	r3, #0
   152bc:	sub	sp, sp, #44	; 0x2c
   152c0:	ldr	r4, [pc, #192]	; 15388 <__assert_fail@plt+0x4000>
   152c4:	mov	r6, r2
   152c8:	movne	r4, r3
   152cc:	mov	r9, r1
   152d0:	mov	r8, r0
   152d4:	bl	11280 <__errno_location@plt>
   152d8:	ldr	r3, [r4, #44]	; 0x2c
   152dc:	ldr	r5, [r4, #4]
   152e0:	add	sl, r4, #8
   152e4:	cmp	r6, #0
   152e8:	orreq	r5, r5, #1
   152ec:	mov	r1, #0
   152f0:	ldr	r2, [r0]
   152f4:	str	r3, [sp, #16]
   152f8:	ldr	r3, [r4, #40]	; 0x28
   152fc:	stmib	sp, {r5, sl}
   15300:	str	r3, [sp, #12]
   15304:	ldr	r3, [r4]
   15308:	mov	r7, r0
   1530c:	str	r2, [sp, #28]
   15310:	str	r3, [sp]
   15314:	mov	r2, r8
   15318:	mov	r3, r9
   1531c:	mov	r0, r1
   15320:	bl	13afc <__assert_fail@plt+0x2774>
   15324:	add	r1, r0, #1
   15328:	mov	fp, r0
   1532c:	mov	r0, r1
   15330:	str	r1, [sp, #36]	; 0x24
   15334:	bl	18758 <__assert_fail@plt+0x73d0>
   15338:	ldr	r3, [r4, #44]	; 0x2c
   1533c:	mov	r2, r8
   15340:	str	r3, [sp, #16]
   15344:	ldr	r3, [r4, #40]	; 0x28
   15348:	str	r5, [sp, #4]
   1534c:	str	r3, [sp, #12]
   15350:	str	sl, [sp, #8]
   15354:	ldr	ip, [r4]
   15358:	ldr	r1, [sp, #36]	; 0x24
   1535c:	mov	r3, r9
   15360:	str	ip, [sp]
   15364:	str	r0, [sp, #32]
   15368:	bl	13afc <__assert_fail@plt+0x2774>
   1536c:	ldr	r2, [sp, #28]
   15370:	cmp	r6, #0
   15374:	str	r2, [r7]
   15378:	ldr	r0, [sp, #32]
   1537c:	strne	fp, [r6]
   15380:	add	sp, sp, #44	; 0x2c
   15384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15388:	strdeq	fp, [r2], -r4
   1538c:	push	{r4, r5, r6, r7, r8, lr}
   15390:	ldr	r6, [pc, #116]	; 1540c <__assert_fail@plt+0x4084>
   15394:	ldr	r3, [r6, #4]
   15398:	ldr	r7, [r6]
   1539c:	cmp	r3, #1
   153a0:	movgt	r5, r7
   153a4:	movgt	r4, #1
   153a8:	ble	153c8 <__assert_fail@plt+0x4040>
   153ac:	ldr	r0, [r5, #12]
   153b0:	bl	13510 <__assert_fail@plt+0x2188>
   153b4:	ldr	r3, [r6, #4]
   153b8:	add	r4, r4, #1
   153bc:	cmp	r3, r4
   153c0:	add	r5, r5, #8
   153c4:	bgt	153ac <__assert_fail@plt+0x4024>
   153c8:	ldr	r0, [r7, #4]
   153cc:	ldr	r4, [pc, #60]	; 15410 <__assert_fail@plt+0x4088>
   153d0:	cmp	r0, r4
   153d4:	beq	153e8 <__assert_fail@plt+0x4060>
   153d8:	bl	13510 <__assert_fail@plt+0x2188>
   153dc:	mov	r3, #256	; 0x100
   153e0:	str	r4, [r6, #12]
   153e4:	str	r3, [r6, #8]
   153e8:	ldr	r4, [pc, #36]	; 15414 <__assert_fail@plt+0x408c>
   153ec:	cmp	r7, r4
   153f0:	beq	15400 <__assert_fail@plt+0x4078>
   153f4:	mov	r0, r7
   153f8:	bl	13510 <__assert_fail@plt+0x2188>
   153fc:	str	r4, [r6]
   15400:	mov	r3, #1
   15404:	str	r3, [r6, #4]
   15408:	pop	{r4, r5, r6, r7, r8, pc}
   1540c:	andeq	fp, r2, r0, lsr r1
   15410:	andeq	fp, r2, r4, lsr #4
   15414:	andeq	fp, r2, r8, lsr r1
   15418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1541c:	sub	sp, sp, #44	; 0x2c
   15420:	mov	r5, r0
   15424:	mov	sl, r1
   15428:	bl	11280 <__errno_location@plt>
   1542c:	ldr	r4, [pc, #400]	; 155c4 <__assert_fail@plt+0x423c>
   15430:	cmn	r5, #-2147483647	; 0x80000001
   15434:	ldr	r6, [r4]
   15438:	mov	r8, r0
   1543c:	movne	r0, #0
   15440:	moveq	r0, #1
   15444:	ldr	r3, [r8]
   15448:	orrs	r0, r0, r5, lsr #31
   1544c:	str	r3, [sp, #24]
   15450:	bne	155c0 <__assert_fail@plt+0x4238>
   15454:	ldr	r2, [r4, #4]
   15458:	cmp	r5, r2
   1545c:	blt	154bc <__assert_fail@plt+0x4134>
   15460:	add	r7, r4, #8
   15464:	cmp	r6, r7
   15468:	str	r2, [sp, #36]	; 0x24
   1546c:	beq	15590 <__assert_fail@plt+0x4208>
   15470:	mov	r3, #8
   15474:	sub	r2, r5, r2
   15478:	mov	r0, r6
   1547c:	str	r3, [sp]
   15480:	add	r2, r2, #1
   15484:	mvn	r3, #-2147483648	; 0x80000000
   15488:	add	r1, sp, #36	; 0x24
   1548c:	bl	18974 <__assert_fail@plt+0x75ec>
   15490:	mov	r6, r0
   15494:	str	r0, [r4]
   15498:	ldr	r0, [r4, #4]
   1549c:	ldr	r2, [sp, #36]	; 0x24
   154a0:	mov	r1, #0
   154a4:	sub	r2, r2, r0
   154a8:	add	r0, r6, r0, lsl #3
   154ac:	lsl	r2, r2, #3
   154b0:	bl	112a4 <memset@plt>
   154b4:	ldr	r3, [sp, #36]	; 0x24
   154b8:	str	r3, [r4, #4]
   154bc:	ldr	r4, [pc, #260]	; 155c8 <__assert_fail@plt+0x4240>
   154c0:	add	fp, r6, r5, lsl #3
   154c4:	ldr	r9, [r6, r5, lsl #3]
   154c8:	ldr	r0, [r4, #4]
   154cc:	ldr	r3, [r4]
   154d0:	ldr	r7, [fp, #4]
   154d4:	ldr	r1, [r4, #44]	; 0x2c
   154d8:	ldr	r2, [r4, #40]	; 0x28
   154dc:	orr	r0, r0, #1
   154e0:	str	r3, [sp]
   154e4:	add	r3, r4, #8
   154e8:	str	r0, [sp, #28]
   154ec:	str	r0, [sp, #4]
   154f0:	str	r1, [sp, #16]
   154f4:	str	r2, [sp, #12]
   154f8:	str	r3, [sp, #8]
   154fc:	mov	r0, r7
   15500:	mov	r1, r9
   15504:	mvn	r3, #0
   15508:	mov	r2, sl
   1550c:	bl	13afc <__assert_fail@plt+0x2774>
   15510:	cmp	r9, r0
   15514:	bhi	1557c <__assert_fail@plt+0x41f4>
   15518:	add	r3, r4, #48	; 0x30
   1551c:	add	r9, r0, #1
   15520:	cmp	r7, r3
   15524:	str	r9, [r6, r5, lsl #3]
   15528:	beq	15534 <__assert_fail@plt+0x41ac>
   1552c:	mov	r0, r7
   15530:	bl	13510 <__assert_fail@plt+0x2188>
   15534:	mov	r0, r9
   15538:	bl	18758 <__assert_fail@plt+0x73d0>
   1553c:	ldr	ip, [r4, #44]	; 0x2c
   15540:	ldr	r3, [r4]
   15544:	ldr	lr, [r4, #40]	; 0x28
   15548:	ldr	r4, [pc, #124]	; 155cc <__assert_fail@plt+0x4244>
   1554c:	mov	r2, sl
   15550:	mov	r1, r9
   15554:	str	r0, [fp, #4]
   15558:	str	r4, [sp, #8]
   1555c:	ldr	r4, [sp, #28]
   15560:	str	r3, [sp]
   15564:	str	r4, [sp, #4]
   15568:	str	ip, [sp, #16]
   1556c:	str	lr, [sp, #12]
   15570:	mvn	r3, #0
   15574:	mov	r7, r0
   15578:	bl	13afc <__assert_fail@plt+0x2774>
   1557c:	ldr	r3, [sp, #24]
   15580:	mov	r0, r7
   15584:	str	r3, [r8]
   15588:	add	sp, sp, #44	; 0x2c
   1558c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15590:	mov	r3, #8
   15594:	sub	r2, r5, r2
   15598:	str	r3, [sp]
   1559c:	add	r1, sp, #36	; 0x24
   155a0:	add	r2, r2, #1
   155a4:	mvn	r3, #-2147483648	; 0x80000000
   155a8:	bl	18974 <__assert_fail@plt+0x75ec>
   155ac:	mov	r6, r0
   155b0:	ldm	r7, {r0, r1}
   155b4:	str	r6, [r4]
   155b8:	stm	r6, {r0, r1}
   155bc:	b	15498 <__assert_fail@plt+0x4110>
   155c0:	bl	11370 <abort@plt>
   155c4:	andeq	fp, r2, r0, lsr r1
   155c8:	strdeq	fp, [r2], -r4
   155cc:	strdeq	fp, [r2], -ip
   155d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d4:	sub	sp, sp, #52	; 0x34
   155d8:	mov	r5, r0
   155dc:	mov	sl, r1
   155e0:	mov	fp, r2
   155e4:	bl	11280 <__errno_location@plt>
   155e8:	ldr	r4, [pc, #408]	; 15788 <__assert_fail@plt+0x4400>
   155ec:	cmn	r5, #-2147483647	; 0x80000001
   155f0:	ldr	r6, [r4]
   155f4:	mov	r8, r0
   155f8:	movne	r0, #0
   155fc:	moveq	r0, #1
   15600:	ldr	r3, [r8]
   15604:	orrs	r0, r0, r5, lsr #31
   15608:	str	r3, [sp, #28]
   1560c:	bne	15784 <__assert_fail@plt+0x43fc>
   15610:	ldr	r2, [r4, #4]
   15614:	cmp	r5, r2
   15618:	blt	15678 <__assert_fail@plt+0x42f0>
   1561c:	add	r7, r4, #8
   15620:	cmp	r6, r7
   15624:	str	r2, [sp, #44]	; 0x2c
   15628:	beq	15754 <__assert_fail@plt+0x43cc>
   1562c:	mov	r3, #8
   15630:	sub	r2, r5, r2
   15634:	mov	r0, r6
   15638:	str	r3, [sp]
   1563c:	add	r2, r2, #1
   15640:	mvn	r3, #-2147483648	; 0x80000000
   15644:	add	r1, sp, #44	; 0x2c
   15648:	bl	18974 <__assert_fail@plt+0x75ec>
   1564c:	mov	r6, r0
   15650:	str	r0, [r4]
   15654:	ldr	r0, [r4, #4]
   15658:	ldr	r2, [sp, #44]	; 0x2c
   1565c:	mov	r1, #0
   15660:	sub	r2, r2, r0
   15664:	add	r0, r6, r0, lsl #3
   15668:	lsl	r2, r2, #3
   1566c:	bl	112a4 <memset@plt>
   15670:	ldr	r3, [sp, #44]	; 0x2c
   15674:	str	r3, [r4, #4]
   15678:	ldr	r4, [pc, #268]	; 1578c <__assert_fail@plt+0x4404>
   1567c:	add	r3, r6, r5, lsl #3
   15680:	str	r3, [sp, #32]
   15684:	ldr	r7, [r3, #4]
   15688:	ldr	r0, [r4, #4]
   1568c:	ldr	r3, [r4]
   15690:	ldr	r9, [r6, r5, lsl #3]
   15694:	ldr	r1, [r4, #44]	; 0x2c
   15698:	ldr	r2, [r4, #40]	; 0x28
   1569c:	orr	r0, r0, #1
   156a0:	str	r3, [sp]
   156a4:	add	r3, r4, #8
   156a8:	str	r0, [sp, #36]	; 0x24
   156ac:	str	r0, [sp, #4]
   156b0:	str	r1, [sp, #16]
   156b4:	str	r2, [sp, #12]
   156b8:	str	r3, [sp, #8]
   156bc:	mov	r0, r7
   156c0:	mov	r1, r9
   156c4:	mov	r3, fp
   156c8:	mov	r2, sl
   156cc:	bl	13afc <__assert_fail@plt+0x2774>
   156d0:	cmp	r9, r0
   156d4:	bhi	15740 <__assert_fail@plt+0x43b8>
   156d8:	add	r3, r4, #48	; 0x30
   156dc:	add	r9, r0, #1
   156e0:	cmp	r7, r3
   156e4:	str	r9, [r6, r5, lsl #3]
   156e8:	beq	156f4 <__assert_fail@plt+0x436c>
   156ec:	mov	r0, r7
   156f0:	bl	13510 <__assert_fail@plt+0x2188>
   156f4:	mov	r0, r9
   156f8:	bl	18758 <__assert_fail@plt+0x73d0>
   156fc:	ldr	ip, [sp, #32]
   15700:	ldr	lr, [r4, #44]	; 0x2c
   15704:	ldr	r5, [r4, #40]	; 0x28
   15708:	mov	r3, fp
   1570c:	mov	r2, sl
   15710:	mov	r1, r9
   15714:	str	r0, [ip, #4]
   15718:	ldr	ip, [r4]
   1571c:	ldr	r4, [pc, #108]	; 15790 <__assert_fail@plt+0x4408>
   15720:	str	lr, [sp, #16]
   15724:	str	r4, [sp, #8]
   15728:	ldr	r4, [sp, #36]	; 0x24
   1572c:	str	r5, [sp, #12]
   15730:	str	r4, [sp, #4]
   15734:	str	ip, [sp]
   15738:	mov	r7, r0
   1573c:	bl	13afc <__assert_fail@plt+0x2774>
   15740:	ldr	r3, [sp, #28]
   15744:	mov	r0, r7
   15748:	str	r3, [r8]
   1574c:	add	sp, sp, #52	; 0x34
   15750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15754:	mov	r3, #8
   15758:	sub	r2, r5, r2
   1575c:	str	r3, [sp]
   15760:	add	r1, sp, #44	; 0x2c
   15764:	add	r2, r2, #1
   15768:	mvn	r3, #-2147483648	; 0x80000000
   1576c:	bl	18974 <__assert_fail@plt+0x75ec>
   15770:	mov	r6, r0
   15774:	ldm	r7, {r0, r1}
   15778:	str	r6, [r4]
   1577c:	stm	r6, {r0, r1}
   15780:	b	15654 <__assert_fail@plt+0x42cc>
   15784:	bl	11370 <abort@plt>
   15788:	andeq	fp, r2, r0, lsr r1
   1578c:	strdeq	fp, [r2], -r4
   15790:	strdeq	fp, [r2], -ip
   15794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15798:	sub	sp, sp, #44	; 0x2c
   1579c:	mov	sl, r0
   157a0:	bl	11280 <__errno_location@plt>
   157a4:	ldr	r4, [pc, #352]	; 1590c <__assert_fail@plt+0x4584>
   157a8:	ldr	r2, [r4, #4]
   157ac:	ldr	r5, [r4]
   157b0:	cmp	r2, #0
   157b4:	ldr	r3, [r0]
   157b8:	mov	r8, r0
   157bc:	str	r3, [sp, #28]
   157c0:	bgt	1581c <__assert_fail@plt+0x4494>
   157c4:	add	r6, r4, #8
   157c8:	cmp	r5, r6
   157cc:	str	r2, [sp, #36]	; 0x24
   157d0:	beq	158dc <__assert_fail@plt+0x4554>
   157d4:	mov	r3, #8
   157d8:	mov	r0, r5
   157dc:	str	r3, [sp]
   157e0:	rsb	r2, r2, #1
   157e4:	mvn	r3, #-2147483648	; 0x80000000
   157e8:	add	r1, sp, #36	; 0x24
   157ec:	bl	18974 <__assert_fail@plt+0x75ec>
   157f0:	mov	r5, r0
   157f4:	str	r0, [r4]
   157f8:	ldr	r0, [r4, #4]
   157fc:	ldr	r2, [sp, #36]	; 0x24
   15800:	mov	r1, #0
   15804:	sub	r2, r2, r0
   15808:	add	r0, r5, r0, lsl #3
   1580c:	lsl	r2, r2, #3
   15810:	bl	112a4 <memset@plt>
   15814:	ldr	r3, [sp, #36]	; 0x24
   15818:	str	r3, [r4, #4]
   1581c:	ldr	r4, [pc, #236]	; 15910 <__assert_fail@plt+0x4588>
   15820:	ldr	r9, [r5]
   15824:	ldr	r6, [r5, #4]
   15828:	ldr	r7, [r4, #4]
   1582c:	ldr	r1, [r4, #44]	; 0x2c
   15830:	ldr	r2, [r4, #40]	; 0x28
   15834:	ldr	r3, [r4]
   15838:	orr	r7, r7, #1
   1583c:	add	fp, r4, #8
   15840:	str	r1, [sp, #16]
   15844:	str	r2, [sp, #12]
   15848:	str	r3, [sp]
   1584c:	str	r7, [sp, #4]
   15850:	str	fp, [sp, #8]
   15854:	mov	r1, r9
   15858:	mov	r0, r6
   1585c:	mvn	r3, #0
   15860:	mov	r2, sl
   15864:	bl	13afc <__assert_fail@plt+0x2774>
   15868:	cmp	r9, r0
   1586c:	bhi	158c8 <__assert_fail@plt+0x4540>
   15870:	add	r3, r4, #48	; 0x30
   15874:	add	r9, r0, #1
   15878:	cmp	r6, r3
   1587c:	str	r9, [r5]
   15880:	beq	1588c <__assert_fail@plt+0x4504>
   15884:	mov	r0, r6
   15888:	bl	13510 <__assert_fail@plt+0x2188>
   1588c:	mov	r0, r9
   15890:	bl	18758 <__assert_fail@plt+0x73d0>
   15894:	ldr	ip, [r4, #44]	; 0x2c
   15898:	ldr	r3, [r4]
   1589c:	ldr	lr, [r4, #40]	; 0x28
   158a0:	mov	r2, sl
   158a4:	mov	r1, r9
   158a8:	str	r0, [r5, #4]
   158ac:	str	r3, [sp]
   158b0:	stmib	sp, {r7, fp}
   158b4:	str	ip, [sp, #16]
   158b8:	str	lr, [sp, #12]
   158bc:	mvn	r3, #0
   158c0:	mov	r6, r0
   158c4:	bl	13afc <__assert_fail@plt+0x2774>
   158c8:	ldr	r3, [sp, #28]
   158cc:	mov	r0, r6
   158d0:	str	r3, [r8]
   158d4:	add	sp, sp, #44	; 0x2c
   158d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158dc:	mov	r3, #8
   158e0:	str	r3, [sp]
   158e4:	add	r1, sp, #36	; 0x24
   158e8:	rsb	r2, r2, #1
   158ec:	mvn	r3, #-2147483648	; 0x80000000
   158f0:	mov	r0, #0
   158f4:	bl	18974 <__assert_fail@plt+0x75ec>
   158f8:	mov	r5, r0
   158fc:	ldm	r6, {r0, r1}
   15900:	str	r5, [r4]
   15904:	stm	r5, {r0, r1}
   15908:	b	157f8 <__assert_fail@plt+0x4470>
   1590c:	andeq	fp, r2, r0, lsr r1
   15910:	strdeq	fp, [r2], -r4
   15914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15918:	sub	sp, sp, #44	; 0x2c
   1591c:	mov	r9, r0
   15920:	mov	sl, r1
   15924:	bl	11280 <__errno_location@plt>
   15928:	ldr	r4, [pc, #364]	; 15a9c <__assert_fail@plt+0x4714>
   1592c:	ldr	r2, [r4, #4]
   15930:	ldr	r5, [r4]
   15934:	cmp	r2, #0
   15938:	ldr	r3, [r0]
   1593c:	mov	r7, r0
   15940:	str	r3, [sp, #24]
   15944:	bgt	159a0 <__assert_fail@plt+0x4618>
   15948:	add	r6, r4, #8
   1594c:	cmp	r5, r6
   15950:	str	r2, [sp, #36]	; 0x24
   15954:	beq	15a6c <__assert_fail@plt+0x46e4>
   15958:	mov	r3, #8
   1595c:	mov	r0, r5
   15960:	str	r3, [sp]
   15964:	rsb	r2, r2, #1
   15968:	mvn	r3, #-2147483648	; 0x80000000
   1596c:	add	r1, sp, #36	; 0x24
   15970:	bl	18974 <__assert_fail@plt+0x75ec>
   15974:	mov	r5, r0
   15978:	str	r0, [r4]
   1597c:	ldr	r0, [r4, #4]
   15980:	ldr	r2, [sp, #36]	; 0x24
   15984:	mov	r1, #0
   15988:	sub	r2, r2, r0
   1598c:	add	r0, r5, r0, lsl #3
   15990:	lsl	r2, r2, #3
   15994:	bl	112a4 <memset@plt>
   15998:	ldr	r3, [sp, #36]	; 0x24
   1599c:	str	r3, [r4, #4]
   159a0:	ldr	r4, [pc, #248]	; 15aa0 <__assert_fail@plt+0x4718>
   159a4:	ldr	r8, [r5]
   159a8:	ldr	r6, [r5, #4]
   159ac:	ldr	r0, [r4, #4]
   159b0:	ldr	r1, [r4, #44]	; 0x2c
   159b4:	ldr	r2, [r4, #40]	; 0x28
   159b8:	ldr	r3, [r4]
   159bc:	orr	r0, r0, #1
   159c0:	add	fp, r4, #8
   159c4:	str	r0, [sp, #28]
   159c8:	str	r0, [sp, #4]
   159cc:	str	r1, [sp, #16]
   159d0:	str	r2, [sp, #12]
   159d4:	str	r3, [sp]
   159d8:	str	fp, [sp, #8]
   159dc:	mov	r1, r8
   159e0:	mov	r0, r6
   159e4:	mov	r3, sl
   159e8:	mov	r2, r9
   159ec:	bl	13afc <__assert_fail@plt+0x2774>
   159f0:	cmp	r8, r0
   159f4:	bhi	15a58 <__assert_fail@plt+0x46d0>
   159f8:	add	r3, r4, #48	; 0x30
   159fc:	add	r8, r0, #1
   15a00:	cmp	r6, r3
   15a04:	str	r8, [r5]
   15a08:	beq	15a14 <__assert_fail@plt+0x468c>
   15a0c:	mov	r0, r6
   15a10:	bl	13510 <__assert_fail@plt+0x2188>
   15a14:	mov	r0, r8
   15a18:	bl	18758 <__assert_fail@plt+0x73d0>
   15a1c:	ldr	lr, [r4, #44]	; 0x2c
   15a20:	ldr	ip, [r4]
   15a24:	mov	r3, sl
   15a28:	mov	r2, r9
   15a2c:	mov	r1, r8
   15a30:	str	r0, [r5, #4]
   15a34:	ldr	r5, [r4, #40]	; 0x28
   15a38:	ldr	r4, [sp, #28]
   15a3c:	str	fp, [sp, #8]
   15a40:	str	r4, [sp, #4]
   15a44:	str	lr, [sp, #16]
   15a48:	str	r5, [sp, #12]
   15a4c:	str	ip, [sp]
   15a50:	mov	r6, r0
   15a54:	bl	13afc <__assert_fail@plt+0x2774>
   15a58:	ldr	r3, [sp, #24]
   15a5c:	mov	r0, r6
   15a60:	str	r3, [r7]
   15a64:	add	sp, sp, #44	; 0x2c
   15a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a6c:	mov	r3, #8
   15a70:	str	r3, [sp]
   15a74:	add	r1, sp, #36	; 0x24
   15a78:	rsb	r2, r2, #1
   15a7c:	mvn	r3, #-2147483648	; 0x80000000
   15a80:	mov	r0, #0
   15a84:	bl	18974 <__assert_fail@plt+0x75ec>
   15a88:	mov	r5, r0
   15a8c:	ldm	r6, {r0, r1}
   15a90:	str	r5, [r4]
   15a94:	stm	r5, {r0, r1}
   15a98:	b	1597c <__assert_fail@plt+0x45f4>
   15a9c:	andeq	fp, r2, r0, lsr r1
   15aa0:	strdeq	fp, [r2], -r4
   15aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa8:	sub	sp, sp, #132	; 0x84
   15aac:	mov	r5, r1
   15ab0:	mov	r4, r0
   15ab4:	mov	r9, r2
   15ab8:	add	r0, sp, #80	; 0x50
   15abc:	mov	r2, #48	; 0x30
   15ac0:	mov	r1, #0
   15ac4:	bl	112a4 <memset@plt>
   15ac8:	cmp	r5, #10
   15acc:	beq	15c84 <__assert_fail@plt+0x48fc>
   15ad0:	add	lr, sp, #80	; 0x50
   15ad4:	str	r5, [sp, #80]	; 0x50
   15ad8:	ldm	lr!, {r0, r1, r2, r3}
   15adc:	add	ip, sp, #32
   15ae0:	ldr	r6, [pc, #416]	; 15c88 <__assert_fail@plt+0x4900>
   15ae4:	stmia	ip!, {r0, r1, r2, r3}
   15ae8:	ldm	lr!, {r0, r1, r2, r3}
   15aec:	stmia	ip!, {r0, r1, r2, r3}
   15af0:	ldm	lr, {r0, r1, r2, r3}
   15af4:	stm	ip, {r0, r1, r2, r3}
   15af8:	bl	11280 <__errno_location@plt>
   15afc:	cmn	r4, #-2147483647	; 0x80000001
   15b00:	ldr	r5, [r6]
   15b04:	mov	r7, r0
   15b08:	movne	r0, #0
   15b0c:	moveq	r0, #1
   15b10:	ldr	r3, [r7]
   15b14:	orrs	r0, r0, r4, lsr #31
   15b18:	str	r3, [sp, #24]
   15b1c:	bne	15c84 <__assert_fail@plt+0x48fc>
   15b20:	ldr	r2, [r6, #4]
   15b24:	cmp	r4, r2
   15b28:	blt	15b88 <__assert_fail@plt+0x4800>
   15b2c:	add	r8, r6, #8
   15b30:	cmp	r5, r8
   15b34:	str	r2, [sp, #80]	; 0x50
   15b38:	beq	15c54 <__assert_fail@plt+0x48cc>
   15b3c:	mov	r3, #8
   15b40:	sub	r2, r4, r2
   15b44:	mov	r0, r5
   15b48:	str	r3, [sp]
   15b4c:	add	r2, r2, #1
   15b50:	add	r1, sp, #80	; 0x50
   15b54:	mvn	r3, #-2147483648	; 0x80000000
   15b58:	bl	18974 <__assert_fail@plt+0x75ec>
   15b5c:	mov	r5, r0
   15b60:	str	r0, [r6]
   15b64:	ldr	r0, [r6, #4]
   15b68:	ldr	r2, [sp, #80]	; 0x50
   15b6c:	mov	r1, #0
   15b70:	sub	r2, r2, r0
   15b74:	add	r0, r5, r0, lsl #3
   15b78:	lsl	r2, r2, #3
   15b7c:	bl	112a4 <memset@plt>
   15b80:	ldr	r3, [sp, #80]	; 0x50
   15b84:	str	r3, [r6, #4]
   15b88:	add	fp, r5, r4, lsl #3
   15b8c:	ldr	r1, [sp, #36]	; 0x24
   15b90:	ldr	r8, [r5, r4, lsl #3]
   15b94:	ldr	r6, [fp, #4]
   15b98:	ldr	r2, [sp, #72]	; 0x48
   15b9c:	ldr	r3, [sp, #32]
   15ba0:	ldr	ip, [sp, #76]	; 0x4c
   15ba4:	orr	r1, r1, #1
   15ba8:	add	sl, sp, #40	; 0x28
   15bac:	str	r1, [sp, #28]
   15bb0:	str	r1, [sp, #4]
   15bb4:	str	r2, [sp, #12]
   15bb8:	str	r3, [sp]
   15bbc:	mov	r0, r6
   15bc0:	mov	r1, r8
   15bc4:	str	ip, [sp, #16]
   15bc8:	str	sl, [sp, #8]
   15bcc:	mvn	r3, #0
   15bd0:	mov	r2, r9
   15bd4:	bl	13afc <__assert_fail@plt+0x2774>
   15bd8:	cmp	r8, r0
   15bdc:	bhi	15c40 <__assert_fail@plt+0x48b8>
   15be0:	ldr	r3, [pc, #164]	; 15c8c <__assert_fail@plt+0x4904>
   15be4:	add	r8, r0, #1
   15be8:	cmp	r6, r3
   15bec:	str	r8, [r5, r4, lsl #3]
   15bf0:	beq	15bfc <__assert_fail@plt+0x4874>
   15bf4:	mov	r0, r6
   15bf8:	bl	13510 <__assert_fail@plt+0x2188>
   15bfc:	mov	r0, r8
   15c00:	bl	18758 <__assert_fail@plt+0x73d0>
   15c04:	ldr	lr, [sp, #76]	; 0x4c
   15c08:	ldr	r3, [sp, #32]
   15c0c:	ldr	ip, [sp, #72]	; 0x48
   15c10:	ldr	r4, [sp, #28]
   15c14:	mov	r2, r9
   15c18:	mov	r1, r8
   15c1c:	str	r0, [fp, #4]
   15c20:	str	r3, [sp]
   15c24:	str	sl, [sp, #8]
   15c28:	str	r4, [sp, #4]
   15c2c:	str	lr, [sp, #16]
   15c30:	str	ip, [sp, #12]
   15c34:	mvn	r3, #0
   15c38:	mov	r6, r0
   15c3c:	bl	13afc <__assert_fail@plt+0x2774>
   15c40:	ldr	r3, [sp, #24]
   15c44:	mov	r0, r6
   15c48:	str	r3, [r7]
   15c4c:	add	sp, sp, #132	; 0x84
   15c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c54:	mov	r3, #8
   15c58:	sub	r2, r4, r2
   15c5c:	add	r1, sp, #80	; 0x50
   15c60:	str	r3, [sp]
   15c64:	add	r2, r2, #1
   15c68:	mvn	r3, #-2147483648	; 0x80000000
   15c6c:	bl	18974 <__assert_fail@plt+0x75ec>
   15c70:	mov	r5, r0
   15c74:	ldm	r8, {r0, r1}
   15c78:	str	r5, [r6]
   15c7c:	stm	r5, {r0, r1}
   15c80:	b	15b64 <__assert_fail@plt+0x47dc>
   15c84:	bl	11370 <abort@plt>
   15c88:	andeq	fp, r2, r0, lsr r1
   15c8c:	andeq	fp, r2, r4, lsr #4
   15c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c94:	sub	sp, sp, #132	; 0x84
   15c98:	mov	r5, r1
   15c9c:	mov	r4, r0
   15ca0:	mov	r9, r2
   15ca4:	add	r0, sp, #80	; 0x50
   15ca8:	mov	r2, #48	; 0x30
   15cac:	mov	r1, #0
   15cb0:	mov	sl, r3
   15cb4:	bl	112a4 <memset@plt>
   15cb8:	cmp	r5, #10
   15cbc:	beq	15e78 <__assert_fail@plt+0x4af0>
   15cc0:	add	lr, sp, #80	; 0x50
   15cc4:	str	r5, [sp, #80]	; 0x50
   15cc8:	ldm	lr!, {r0, r1, r2, r3}
   15ccc:	add	ip, sp, #32
   15cd0:	ldr	r6, [pc, #420]	; 15e7c <__assert_fail@plt+0x4af4>
   15cd4:	stmia	ip!, {r0, r1, r2, r3}
   15cd8:	ldm	lr!, {r0, r1, r2, r3}
   15cdc:	stmia	ip!, {r0, r1, r2, r3}
   15ce0:	ldm	lr, {r0, r1, r2, r3}
   15ce4:	stm	ip, {r0, r1, r2, r3}
   15ce8:	bl	11280 <__errno_location@plt>
   15cec:	cmn	r4, #-2147483647	; 0x80000001
   15cf0:	ldr	r5, [r6]
   15cf4:	mov	r7, r0
   15cf8:	movne	r0, #0
   15cfc:	moveq	r0, #1
   15d00:	ldr	r3, [r7]
   15d04:	orrs	r0, r0, r4, lsr #31
   15d08:	str	r3, [sp, #24]
   15d0c:	bne	15e78 <__assert_fail@plt+0x4af0>
   15d10:	ldr	r2, [r6, #4]
   15d14:	cmp	r4, r2
   15d18:	blt	15d78 <__assert_fail@plt+0x49f0>
   15d1c:	add	r8, r6, #8
   15d20:	cmp	r5, r8
   15d24:	str	r2, [sp, #80]	; 0x50
   15d28:	beq	15e48 <__assert_fail@plt+0x4ac0>
   15d2c:	mov	r3, #8
   15d30:	sub	r2, r4, r2
   15d34:	mov	r0, r5
   15d38:	str	r3, [sp]
   15d3c:	add	r2, r2, #1
   15d40:	add	r1, sp, #80	; 0x50
   15d44:	mvn	r3, #-2147483648	; 0x80000000
   15d48:	bl	18974 <__assert_fail@plt+0x75ec>
   15d4c:	mov	r5, r0
   15d50:	str	r0, [r6]
   15d54:	ldr	r0, [r6, #4]
   15d58:	ldr	r2, [sp, #80]	; 0x50
   15d5c:	mov	r1, #0
   15d60:	sub	r2, r2, r0
   15d64:	add	r0, r5, r0, lsl #3
   15d68:	lsl	r2, r2, #3
   15d6c:	bl	112a4 <memset@plt>
   15d70:	ldr	r3, [sp, #80]	; 0x50
   15d74:	str	r3, [r6, #4]
   15d78:	add	fp, r5, r4, lsl #3
   15d7c:	ldr	r3, [sp, #32]
   15d80:	ldr	r1, [sp, #36]	; 0x24
   15d84:	ldr	r8, [r5, r4, lsl #3]
   15d88:	ldr	r6, [fp, #4]
   15d8c:	ldr	r2, [sp, #72]	; 0x48
   15d90:	ldr	ip, [sp, #76]	; 0x4c
   15d94:	orr	r1, r1, #1
   15d98:	str	r3, [sp]
   15d9c:	add	r3, sp, #40	; 0x28
   15da0:	str	r1, [sp, #28]
   15da4:	str	r1, [sp, #4]
   15da8:	str	r2, [sp, #12]
   15dac:	str	r3, [sp, #8]
   15db0:	mov	r0, r6
   15db4:	mov	r1, r8
   15db8:	str	ip, [sp, #16]
   15dbc:	mov	r3, sl
   15dc0:	mov	r2, r9
   15dc4:	bl	13afc <__assert_fail@plt+0x2774>
   15dc8:	cmp	r8, r0
   15dcc:	bhi	15e34 <__assert_fail@plt+0x4aac>
   15dd0:	ldr	r3, [pc, #168]	; 15e80 <__assert_fail@plt+0x4af8>
   15dd4:	add	r8, r0, #1
   15dd8:	cmp	r6, r3
   15ddc:	str	r8, [r5, r4, lsl #3]
   15de0:	beq	15dec <__assert_fail@plt+0x4a64>
   15de4:	mov	r0, r6
   15de8:	bl	13510 <__assert_fail@plt+0x2188>
   15dec:	mov	r0, r8
   15df0:	bl	18758 <__assert_fail@plt+0x73d0>
   15df4:	add	lr, sp, #40	; 0x28
   15df8:	ldr	ip, [sp, #76]	; 0x4c
   15dfc:	ldr	r4, [sp, #72]	; 0x48
   15e00:	ldr	r5, [sp, #28]
   15e04:	mov	r3, sl
   15e08:	mov	r2, r9
   15e0c:	mov	r1, r8
   15e10:	str	r0, [fp, #4]
   15e14:	str	lr, [sp, #8]
   15e18:	ldr	lr, [sp, #32]
   15e1c:	str	r5, [sp, #4]
   15e20:	str	ip, [sp, #16]
   15e24:	str	r4, [sp, #12]
   15e28:	str	lr, [sp]
   15e2c:	mov	r6, r0
   15e30:	bl	13afc <__assert_fail@plt+0x2774>
   15e34:	ldr	r3, [sp, #24]
   15e38:	mov	r0, r6
   15e3c:	str	r3, [r7]
   15e40:	add	sp, sp, #132	; 0x84
   15e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e48:	mov	r3, #8
   15e4c:	sub	r2, r4, r2
   15e50:	add	r1, sp, #80	; 0x50
   15e54:	str	r3, [sp]
   15e58:	add	r2, r2, #1
   15e5c:	mvn	r3, #-2147483648	; 0x80000000
   15e60:	bl	18974 <__assert_fail@plt+0x75ec>
   15e64:	mov	r5, r0
   15e68:	ldm	r8, {r0, r1}
   15e6c:	str	r5, [r6]
   15e70:	stm	r5, {r0, r1}
   15e74:	b	15d54 <__assert_fail@plt+0x49cc>
   15e78:	bl	11370 <abort@plt>
   15e7c:	andeq	fp, r2, r0, lsr r1
   15e80:	andeq	fp, r2, r4, lsr #4
   15e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e88:	sub	sp, sp, #124	; 0x7c
   15e8c:	mov	r4, r0
   15e90:	mov	r9, r1
   15e94:	add	r0, sp, #72	; 0x48
   15e98:	mov	r2, #48	; 0x30
   15e9c:	mov	r1, #0
   15ea0:	bl	112a4 <memset@plt>
   15ea4:	cmp	r4, #10
   15ea8:	beq	16034 <__assert_fail@plt+0x4cac>
   15eac:	add	lr, sp, #72	; 0x48
   15eb0:	str	r4, [sp, #72]	; 0x48
   15eb4:	ldm	lr!, {r0, r1, r2, r3}
   15eb8:	add	ip, sp, #24
   15ebc:	ldr	r5, [pc, #372]	; 16038 <__assert_fail@plt+0x4cb0>
   15ec0:	stmia	ip!, {r0, r1, r2, r3}
   15ec4:	ldm	lr!, {r0, r1, r2, r3}
   15ec8:	stmia	ip!, {r0, r1, r2, r3}
   15ecc:	ldm	lr, {r0, r1, r2, r3}
   15ed0:	stm	ip, {r0, r1, r2, r3}
   15ed4:	bl	11280 <__errno_location@plt>
   15ed8:	ldr	r2, [r5, #4]
   15edc:	ldr	r4, [r5]
   15ee0:	cmp	r2, #0
   15ee4:	mov	r7, r0
   15ee8:	ldr	fp, [r0]
   15eec:	bgt	15f48 <__assert_fail@plt+0x4bc0>
   15ef0:	add	r6, r5, #8
   15ef4:	cmp	r4, r6
   15ef8:	str	r2, [sp, #72]	; 0x48
   15efc:	beq	16004 <__assert_fail@plt+0x4c7c>
   15f00:	mov	r3, #8
   15f04:	mov	r0, r4
   15f08:	str	r3, [sp]
   15f0c:	rsb	r2, r2, #1
   15f10:	add	r1, sp, #72	; 0x48
   15f14:	mvn	r3, #-2147483648	; 0x80000000
   15f18:	bl	18974 <__assert_fail@plt+0x75ec>
   15f1c:	mov	r4, r0
   15f20:	str	r0, [r5]
   15f24:	ldr	r0, [r5, #4]
   15f28:	ldr	r2, [sp, #72]	; 0x48
   15f2c:	mov	r1, #0
   15f30:	sub	r2, r2, r0
   15f34:	add	r0, r4, r0, lsl #3
   15f38:	lsl	r2, r2, #3
   15f3c:	bl	112a4 <memset@plt>
   15f40:	ldr	r3, [sp, #72]	; 0x48
   15f44:	str	r3, [r5, #4]
   15f48:	ldr	r6, [sp, #28]
   15f4c:	ldr	r8, [r4]
   15f50:	ldr	r5, [r4, #4]
   15f54:	ldr	r2, [sp, #64]	; 0x40
   15f58:	ldr	r3, [sp, #24]
   15f5c:	ldr	ip, [sp, #68]	; 0x44
   15f60:	orr	r6, r6, #1
   15f64:	add	sl, sp, #32
   15f68:	str	r2, [sp, #12]
   15f6c:	str	r3, [sp]
   15f70:	str	r6, [sp, #4]
   15f74:	mov	r1, r8
   15f78:	mov	r0, r5
   15f7c:	str	ip, [sp, #16]
   15f80:	str	sl, [sp, #8]
   15f84:	mvn	r3, #0
   15f88:	mov	r2, r9
   15f8c:	bl	13afc <__assert_fail@plt+0x2774>
   15f90:	cmp	r8, r0
   15f94:	bhi	15ff4 <__assert_fail@plt+0x4c6c>
   15f98:	ldr	r3, [pc, #156]	; 1603c <__assert_fail@plt+0x4cb4>
   15f9c:	add	r8, r0, #1
   15fa0:	cmp	r5, r3
   15fa4:	str	r8, [r4]
   15fa8:	beq	15fb4 <__assert_fail@plt+0x4c2c>
   15fac:	mov	r0, r5
   15fb0:	bl	13510 <__assert_fail@plt+0x2188>
   15fb4:	mov	r0, r8
   15fb8:	bl	18758 <__assert_fail@plt+0x73d0>
   15fbc:	ldr	lr, [sp, #68]	; 0x44
   15fc0:	ldr	r3, [sp, #24]
   15fc4:	ldr	ip, [sp, #64]	; 0x40
   15fc8:	mov	r2, r9
   15fcc:	mov	r1, r8
   15fd0:	str	r0, [r4, #4]
   15fd4:	str	r3, [sp]
   15fd8:	str	sl, [sp, #8]
   15fdc:	str	r6, [sp, #4]
   15fe0:	str	lr, [sp, #16]
   15fe4:	str	ip, [sp, #12]
   15fe8:	mvn	r3, #0
   15fec:	mov	r5, r0
   15ff0:	bl	13afc <__assert_fail@plt+0x2774>
   15ff4:	mov	r0, r5
   15ff8:	str	fp, [r7]
   15ffc:	add	sp, sp, #124	; 0x7c
   16000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16004:	mov	r3, #8
   16008:	add	r1, sp, #72	; 0x48
   1600c:	str	r3, [sp]
   16010:	rsb	r2, r2, #1
   16014:	mvn	r3, #-2147483648	; 0x80000000
   16018:	mov	r0, #0
   1601c:	bl	18974 <__assert_fail@plt+0x75ec>
   16020:	mov	r4, r0
   16024:	ldm	r6, {r0, r1}
   16028:	str	r4, [r5]
   1602c:	stm	r4, {r0, r1}
   16030:	b	15f24 <__assert_fail@plt+0x4b9c>
   16034:	bl	11370 <abort@plt>
   16038:	andeq	fp, r2, r0, lsr r1
   1603c:	andeq	fp, r2, r4, lsr #4
   16040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16044:	sub	sp, sp, #132	; 0x84
   16048:	mov	r4, r0
   1604c:	mov	r9, r1
   16050:	mov	sl, r2
   16054:	add	r0, sp, #80	; 0x50
   16058:	mov	r2, #48	; 0x30
   1605c:	mov	r1, #0
   16060:	bl	112a4 <memset@plt>
   16064:	cmp	r4, #10
   16068:	beq	161fc <__assert_fail@plt+0x4e74>
   1606c:	add	lr, sp, #80	; 0x50
   16070:	str	r4, [sp, #80]	; 0x50
   16074:	ldm	lr!, {r0, r1, r2, r3}
   16078:	add	ip, sp, #32
   1607c:	ldr	r5, [pc, #380]	; 16200 <__assert_fail@plt+0x4e78>
   16080:	stmia	ip!, {r0, r1, r2, r3}
   16084:	ldm	lr!, {r0, r1, r2, r3}
   16088:	stmia	ip!, {r0, r1, r2, r3}
   1608c:	ldm	lr, {r0, r1, r2, r3}
   16090:	stm	ip, {r0, r1, r2, r3}
   16094:	bl	11280 <__errno_location@plt>
   16098:	ldr	r2, [r5, #4]
   1609c:	ldr	r4, [r5]
   160a0:	cmp	r2, #0
   160a4:	ldr	r3, [r0]
   160a8:	mov	r7, r0
   160ac:	str	r3, [sp, #28]
   160b0:	bgt	1610c <__assert_fail@plt+0x4d84>
   160b4:	add	r6, r5, #8
   160b8:	cmp	r4, r6
   160bc:	str	r2, [sp, #80]	; 0x50
   160c0:	beq	161cc <__assert_fail@plt+0x4e44>
   160c4:	mov	r3, #8
   160c8:	mov	r0, r4
   160cc:	str	r3, [sp]
   160d0:	rsb	r2, r2, #1
   160d4:	add	r1, sp, #80	; 0x50
   160d8:	mvn	r3, #-2147483648	; 0x80000000
   160dc:	bl	18974 <__assert_fail@plt+0x75ec>
   160e0:	mov	r4, r0
   160e4:	str	r0, [r5]
   160e8:	ldr	r0, [r5, #4]
   160ec:	ldr	r2, [sp, #80]	; 0x50
   160f0:	mov	r1, #0
   160f4:	sub	r2, r2, r0
   160f8:	add	r0, r4, r0, lsl #3
   160fc:	lsl	r2, r2, #3
   16100:	bl	112a4 <memset@plt>
   16104:	ldr	r3, [sp, #80]	; 0x50
   16108:	str	r3, [r5, #4]
   1610c:	ldr	r6, [sp, #36]	; 0x24
   16110:	ldr	r8, [r4]
   16114:	ldr	r5, [r4, #4]
   16118:	ldr	r2, [sp, #72]	; 0x48
   1611c:	ldr	r3, [sp, #32]
   16120:	ldr	ip, [sp, #76]	; 0x4c
   16124:	orr	r6, r6, #1
   16128:	add	fp, sp, #40	; 0x28
   1612c:	str	r2, [sp, #12]
   16130:	str	r3, [sp]
   16134:	str	r6, [sp, #4]
   16138:	mov	r1, r8
   1613c:	mov	r0, r5
   16140:	str	ip, [sp, #16]
   16144:	str	fp, [sp, #8]
   16148:	mov	r3, sl
   1614c:	mov	r2, r9
   16150:	bl	13afc <__assert_fail@plt+0x2774>
   16154:	cmp	r8, r0
   16158:	bhi	161b8 <__assert_fail@plt+0x4e30>
   1615c:	ldr	r3, [pc, #160]	; 16204 <__assert_fail@plt+0x4e7c>
   16160:	add	r8, r0, #1
   16164:	cmp	r5, r3
   16168:	str	r8, [r4]
   1616c:	beq	16178 <__assert_fail@plt+0x4df0>
   16170:	mov	r0, r5
   16174:	bl	13510 <__assert_fail@plt+0x2188>
   16178:	mov	r0, r8
   1617c:	bl	18758 <__assert_fail@plt+0x73d0>
   16180:	ldr	ip, [sp, #76]	; 0x4c
   16184:	ldr	lr, [sp, #32]
   16188:	mov	r3, sl
   1618c:	mov	r2, r9
   16190:	mov	r1, r8
   16194:	str	r0, [r4, #4]
   16198:	ldr	r4, [sp, #72]	; 0x48
   1619c:	str	fp, [sp, #8]
   161a0:	str	r6, [sp, #4]
   161a4:	str	ip, [sp, #16]
   161a8:	str	r4, [sp, #12]
   161ac:	str	lr, [sp]
   161b0:	mov	r5, r0
   161b4:	bl	13afc <__assert_fail@plt+0x2774>
   161b8:	ldr	r3, [sp, #28]
   161bc:	mov	r0, r5
   161c0:	str	r3, [r7]
   161c4:	add	sp, sp, #132	; 0x84
   161c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161cc:	mov	r3, #8
   161d0:	add	r1, sp, #80	; 0x50
   161d4:	str	r3, [sp]
   161d8:	rsb	r2, r2, #1
   161dc:	mvn	r3, #-2147483648	; 0x80000000
   161e0:	mov	r0, #0
   161e4:	bl	18974 <__assert_fail@plt+0x75ec>
   161e8:	mov	r4, r0
   161ec:	ldm	r6, {r0, r1}
   161f0:	str	r4, [r5]
   161f4:	stm	r4, {r0, r1}
   161f8:	b	160e8 <__assert_fail@plt+0x4d60>
   161fc:	bl	11370 <abort@plt>
   16200:	andeq	fp, r2, r0, lsr r1
   16204:	andeq	fp, r2, r4, lsr #4
   16208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1620c:	mov	r4, r2
   16210:	ldr	lr, [pc, #432]	; 163c8 <__assert_fail@plt+0x5040>
   16214:	mov	sl, r0
   16218:	mov	fp, r1
   1621c:	ldm	lr!, {r0, r1, r2, r3}
   16220:	sub	sp, sp, #92	; 0x5c
   16224:	add	ip, sp, #40	; 0x28
   16228:	lsr	r7, r4, #5
   1622c:	stmia	ip!, {r0, r1, r2, r3}
   16230:	add	r6, sp, #48	; 0x30
   16234:	ldm	lr!, {r0, r1, r2, r3}
   16238:	and	r4, r4, #31
   1623c:	ldr	r5, [pc, #392]	; 163cc <__assert_fail@plt+0x5044>
   16240:	stmia	ip!, {r0, r1, r2, r3}
   16244:	ldm	lr, {r0, r1, r2, r3}
   16248:	stm	ip, {r0, r1, r2, r3}
   1624c:	ldr	r2, [r6, r7, lsl #2]
   16250:	lsr	r3, r2, r4
   16254:	eor	r3, r3, #1
   16258:	and	r3, r3, #1
   1625c:	eor	r4, r2, r3, lsl r4
   16260:	str	r4, [r6, r7, lsl #2]
   16264:	bl	11280 <__errno_location@plt>
   16268:	ldr	r2, [r5, #4]
   1626c:	ldr	r4, [r5]
   16270:	cmp	r2, #0
   16274:	ldr	r3, [r0]
   16278:	mov	r8, r0
   1627c:	str	r3, [sp, #28]
   16280:	bgt	162dc <__assert_fail@plt+0x4f54>
   16284:	add	r7, r5, #8
   16288:	cmp	r4, r7
   1628c:	str	r2, [sp, #36]	; 0x24
   16290:	beq	16398 <__assert_fail@plt+0x5010>
   16294:	mov	r3, #8
   16298:	mov	r0, r4
   1629c:	str	r3, [sp]
   162a0:	rsb	r2, r2, #1
   162a4:	mvn	r3, #-2147483648	; 0x80000000
   162a8:	add	r1, sp, #36	; 0x24
   162ac:	bl	18974 <__assert_fail@plt+0x75ec>
   162b0:	mov	r4, r0
   162b4:	str	r0, [r5]
   162b8:	ldr	r0, [r5, #4]
   162bc:	ldr	r2, [sp, #36]	; 0x24
   162c0:	mov	r1, #0
   162c4:	sub	r2, r2, r0
   162c8:	add	r0, r4, r0, lsl #3
   162cc:	lsl	r2, r2, #3
   162d0:	bl	112a4 <memset@plt>
   162d4:	ldr	r3, [sp, #36]	; 0x24
   162d8:	str	r3, [r5, #4]
   162dc:	ldr	r7, [sp, #44]	; 0x2c
   162e0:	ldr	r9, [r4]
   162e4:	ldr	r5, [r4, #4]
   162e8:	ldr	r2, [sp, #80]	; 0x50
   162ec:	ldr	r3, [sp, #40]	; 0x28
   162f0:	ldr	ip, [sp, #84]	; 0x54
   162f4:	orr	r7, r7, #1
   162f8:	str	r2, [sp, #12]
   162fc:	str	r3, [sp]
   16300:	str	r7, [sp, #4]
   16304:	str	r6, [sp, #8]
   16308:	mov	r1, r9
   1630c:	mov	r0, r5
   16310:	str	ip, [sp, #16]
   16314:	mov	r3, fp
   16318:	mov	r2, sl
   1631c:	bl	13afc <__assert_fail@plt+0x2774>
   16320:	cmp	r9, r0
   16324:	bhi	16384 <__assert_fail@plt+0x4ffc>
   16328:	ldr	r3, [pc, #160]	; 163d0 <__assert_fail@plt+0x5048>
   1632c:	add	r9, r0, #1
   16330:	cmp	r5, r3
   16334:	str	r9, [r4]
   16338:	beq	16344 <__assert_fail@plt+0x4fbc>
   1633c:	mov	r0, r5
   16340:	bl	13510 <__assert_fail@plt+0x2188>
   16344:	mov	r0, r9
   16348:	bl	18758 <__assert_fail@plt+0x73d0>
   1634c:	ldr	ip, [sp, #84]	; 0x54
   16350:	ldr	lr, [sp, #40]	; 0x28
   16354:	mov	r3, fp
   16358:	mov	r2, sl
   1635c:	mov	r1, r9
   16360:	str	r0, [r4, #4]
   16364:	ldr	r4, [sp, #80]	; 0x50
   16368:	str	r6, [sp, #8]
   1636c:	str	r7, [sp, #4]
   16370:	str	ip, [sp, #16]
   16374:	str	r4, [sp, #12]
   16378:	str	lr, [sp]
   1637c:	mov	r5, r0
   16380:	bl	13afc <__assert_fail@plt+0x2774>
   16384:	ldr	r3, [sp, #28]
   16388:	mov	r0, r5
   1638c:	str	r3, [r8]
   16390:	add	sp, sp, #92	; 0x5c
   16394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16398:	mov	r3, #8
   1639c:	str	r3, [sp]
   163a0:	add	r1, sp, #36	; 0x24
   163a4:	rsb	r2, r2, #1
   163a8:	mvn	r3, #-2147483648	; 0x80000000
   163ac:	mov	r0, #0
   163b0:	bl	18974 <__assert_fail@plt+0x75ec>
   163b4:	mov	r4, r0
   163b8:	ldm	r7, {r0, r1}
   163bc:	str	r4, [r5]
   163c0:	stm	r4, {r0, r1}
   163c4:	b	162b8 <__assert_fail@plt+0x4f30>
   163c8:	strdeq	fp, [r2], -r4
   163cc:	andeq	fp, r2, r0, lsr r1
   163d0:	andeq	fp, r2, r4, lsr #4
   163d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d8:	mov	r4, r1
   163dc:	ldr	lr, [pc, #420]	; 16588 <__assert_fail@plt+0x5200>
   163e0:	mov	r6, r0
   163e4:	sub	sp, sp, #84	; 0x54
   163e8:	ldm	lr!, {r0, r1, r2, r3}
   163ec:	add	ip, sp, #32
   163f0:	lsr	r8, r4, #5
   163f4:	add	r5, sp, #40	; 0x28
   163f8:	stmia	ip!, {r0, r1, r2, r3}
   163fc:	and	r4, r4, #31
   16400:	ldm	lr!, {r0, r1, r2, r3}
   16404:	ldr	r7, [pc, #384]	; 1658c <__assert_fail@plt+0x5204>
   16408:	stmia	ip!, {r0, r1, r2, r3}
   1640c:	ldm	lr, {r0, r1, r2, r3}
   16410:	stm	ip, {r0, r1, r2, r3}
   16414:	ldr	r2, [r5, r8, lsl #2]
   16418:	lsr	r3, r2, r4
   1641c:	eor	r3, r3, #1
   16420:	and	r3, r3, #1
   16424:	eor	r4, r2, r3, lsl r4
   16428:	str	r4, [r5, r8, lsl #2]
   1642c:	bl	11280 <__errno_location@plt>
   16430:	ldr	r2, [r7, #4]
   16434:	ldr	r4, [r7]
   16438:	cmp	r2, #0
   1643c:	mov	r9, r0
   16440:	ldr	sl, [r0]
   16444:	bgt	164a0 <__assert_fail@plt+0x5118>
   16448:	add	r8, r7, #8
   1644c:	cmp	r4, r8
   16450:	str	r2, [sp, #28]
   16454:	beq	16558 <__assert_fail@plt+0x51d0>
   16458:	mov	r3, #8
   1645c:	mov	r0, r4
   16460:	str	r3, [sp]
   16464:	rsb	r2, r2, #1
   16468:	mvn	r3, #-2147483648	; 0x80000000
   1646c:	add	r1, sp, #28
   16470:	bl	18974 <__assert_fail@plt+0x75ec>
   16474:	mov	r4, r0
   16478:	str	r0, [r7]
   1647c:	ldr	r0, [r7, #4]
   16480:	ldr	r2, [sp, #28]
   16484:	mov	r1, #0
   16488:	sub	r2, r2, r0
   1648c:	add	r0, r4, r0, lsl #3
   16490:	lsl	r2, r2, #3
   16494:	bl	112a4 <memset@plt>
   16498:	ldr	r3, [sp, #28]
   1649c:	str	r3, [r7, #4]
   164a0:	ldr	r8, [sp, #36]	; 0x24
   164a4:	ldr	fp, [r4]
   164a8:	ldr	r7, [r4, #4]
   164ac:	ldr	r2, [sp, #72]	; 0x48
   164b0:	ldr	r3, [sp, #32]
   164b4:	ldr	ip, [sp, #76]	; 0x4c
   164b8:	orr	r8, r8, #1
   164bc:	str	r2, [sp, #12]
   164c0:	str	r3, [sp]
   164c4:	str	r8, [sp, #4]
   164c8:	str	r5, [sp, #8]
   164cc:	mov	r1, fp
   164d0:	mov	r0, r7
   164d4:	str	ip, [sp, #16]
   164d8:	mvn	r3, #0
   164dc:	mov	r2, r6
   164e0:	bl	13afc <__assert_fail@plt+0x2774>
   164e4:	cmp	fp, r0
   164e8:	bhi	16548 <__assert_fail@plt+0x51c0>
   164ec:	ldr	r3, [pc, #156]	; 16590 <__assert_fail@plt+0x5208>
   164f0:	add	fp, r0, #1
   164f4:	cmp	r7, r3
   164f8:	str	fp, [r4]
   164fc:	beq	16508 <__assert_fail@plt+0x5180>
   16500:	mov	r0, r7
   16504:	bl	13510 <__assert_fail@plt+0x2188>
   16508:	mov	r0, fp
   1650c:	bl	18758 <__assert_fail@plt+0x73d0>
   16510:	ldr	lr, [sp, #76]	; 0x4c
   16514:	ldr	r3, [sp, #32]
   16518:	ldr	ip, [sp, #72]	; 0x48
   1651c:	mov	r2, r6
   16520:	mov	r1, fp
   16524:	str	r0, [r4, #4]
   16528:	str	r3, [sp]
   1652c:	str	r5, [sp, #8]
   16530:	str	r8, [sp, #4]
   16534:	str	lr, [sp, #16]
   16538:	str	ip, [sp, #12]
   1653c:	mvn	r3, #0
   16540:	mov	r7, r0
   16544:	bl	13afc <__assert_fail@plt+0x2774>
   16548:	mov	r0, r7
   1654c:	str	sl, [r9]
   16550:	add	sp, sp, #84	; 0x54
   16554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16558:	mov	r3, #8
   1655c:	str	r3, [sp]
   16560:	add	r1, sp, #28
   16564:	rsb	r2, r2, #1
   16568:	mvn	r3, #-2147483648	; 0x80000000
   1656c:	mov	r0, #0
   16570:	bl	18974 <__assert_fail@plt+0x75ec>
   16574:	mov	r4, r0
   16578:	ldm	r8, {r0, r1}
   1657c:	str	r4, [r7]
   16580:	stm	r4, {r0, r1}
   16584:	b	1647c <__assert_fail@plt+0x50f4>
   16588:	strdeq	fp, [r2], -r4
   1658c:	andeq	fp, r2, r0, lsr r1
   16590:	andeq	fp, r2, r4, lsr #4
   16594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16598:	mov	r6, r0
   1659c:	ldr	lr, [pc, #404]	; 16738 <__assert_fail@plt+0x53b0>
   165a0:	sub	sp, sp, #84	; 0x54
   165a4:	add	ip, sp, #32
   165a8:	ldm	lr!, {r0, r1, r2, r3}
   165ac:	ldr	r5, [pc, #392]	; 1673c <__assert_fail@plt+0x53b4>
   165b0:	stmia	ip!, {r0, r1, r2, r3}
   165b4:	ldm	lr!, {r0, r1, r2, r3}
   165b8:	ldr	r4, [sp, #44]	; 0x2c
   165bc:	stmia	ip!, {r0, r1, r2, r3}
   165c0:	ldm	lr, {r0, r1, r2, r3}
   165c4:	mvn	lr, r4
   165c8:	and	lr, lr, #67108864	; 0x4000000
   165cc:	eor	lr, lr, r4
   165d0:	stm	ip, {r0, r1, r2, r3}
   165d4:	str	lr, [sp, #44]	; 0x2c
   165d8:	bl	11280 <__errno_location@plt>
   165dc:	ldr	r2, [r5, #4]
   165e0:	ldr	r4, [r5]
   165e4:	cmp	r2, #0
   165e8:	mov	r8, r0
   165ec:	ldr	sl, [r0]
   165f0:	bgt	1664c <__assert_fail@plt+0x52c4>
   165f4:	add	r7, r5, #8
   165f8:	cmp	r4, r7
   165fc:	str	r2, [sp, #28]
   16600:	beq	16708 <__assert_fail@plt+0x5380>
   16604:	mov	r3, #8
   16608:	mov	r0, r4
   1660c:	str	r3, [sp]
   16610:	rsb	r2, r2, #1
   16614:	mvn	r3, #-2147483648	; 0x80000000
   16618:	add	r1, sp, #28
   1661c:	bl	18974 <__assert_fail@plt+0x75ec>
   16620:	mov	r4, r0
   16624:	str	r0, [r5]
   16628:	ldr	r0, [r5, #4]
   1662c:	ldr	r2, [sp, #28]
   16630:	mov	r1, #0
   16634:	sub	r2, r2, r0
   16638:	add	r0, r4, r0, lsl #3
   1663c:	lsl	r2, r2, #3
   16640:	bl	112a4 <memset@plt>
   16644:	ldr	r3, [sp, #28]
   16648:	str	r3, [r5, #4]
   1664c:	ldr	r7, [sp, #36]	; 0x24
   16650:	ldr	r9, [r4]
   16654:	ldr	r5, [r4, #4]
   16658:	ldr	r2, [sp, #72]	; 0x48
   1665c:	ldr	r3, [sp, #32]
   16660:	ldr	ip, [sp, #76]	; 0x4c
   16664:	orr	r7, r7, #1
   16668:	add	fp, sp, #40	; 0x28
   1666c:	str	r2, [sp, #12]
   16670:	str	r3, [sp]
   16674:	str	r7, [sp, #4]
   16678:	mov	r1, r9
   1667c:	mov	r0, r5
   16680:	str	ip, [sp, #16]
   16684:	str	fp, [sp, #8]
   16688:	mvn	r3, #0
   1668c:	mov	r2, r6
   16690:	bl	13afc <__assert_fail@plt+0x2774>
   16694:	cmp	r9, r0
   16698:	bhi	166f8 <__assert_fail@plt+0x5370>
   1669c:	ldr	r3, [pc, #156]	; 16740 <__assert_fail@plt+0x53b8>
   166a0:	add	r9, r0, #1
   166a4:	cmp	r5, r3
   166a8:	str	r9, [r4]
   166ac:	beq	166b8 <__assert_fail@plt+0x5330>
   166b0:	mov	r0, r5
   166b4:	bl	13510 <__assert_fail@plt+0x2188>
   166b8:	mov	r0, r9
   166bc:	bl	18758 <__assert_fail@plt+0x73d0>
   166c0:	ldr	lr, [sp, #76]	; 0x4c
   166c4:	ldr	r3, [sp, #32]
   166c8:	ldr	ip, [sp, #72]	; 0x48
   166cc:	mov	r2, r6
   166d0:	mov	r1, r9
   166d4:	str	r0, [r4, #4]
   166d8:	str	r3, [sp]
   166dc:	str	fp, [sp, #8]
   166e0:	str	r7, [sp, #4]
   166e4:	str	lr, [sp, #16]
   166e8:	str	ip, [sp, #12]
   166ec:	mvn	r3, #0
   166f0:	mov	r5, r0
   166f4:	bl	13afc <__assert_fail@plt+0x2774>
   166f8:	mov	r0, r5
   166fc:	str	sl, [r8]
   16700:	add	sp, sp, #84	; 0x54
   16704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16708:	mov	r3, #8
   1670c:	str	r3, [sp]
   16710:	add	r1, sp, #28
   16714:	rsb	r2, r2, #1
   16718:	mvn	r3, #-2147483648	; 0x80000000
   1671c:	mov	r0, #0
   16720:	bl	18974 <__assert_fail@plt+0x75ec>
   16724:	mov	r4, r0
   16728:	ldm	r7, {r0, r1}
   1672c:	str	r4, [r5]
   16730:	stm	r4, {r0, r1}
   16734:	b	16628 <__assert_fail@plt+0x52a0>
   16738:	strdeq	fp, [r2], -r4
   1673c:	andeq	fp, r2, r0, lsr r1
   16740:	andeq	fp, r2, r4, lsr #4
   16744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16748:	mov	r9, r0
   1674c:	ldr	lr, [pc, #416]	; 168f4 <__assert_fail@plt+0x556c>
   16750:	mov	sl, r1
   16754:	sub	sp, sp, #92	; 0x5c
   16758:	ldm	lr!, {r0, r1, r2, r3}
   1675c:	add	ip, sp, #40	; 0x28
   16760:	ldr	r5, [pc, #400]	; 168f8 <__assert_fail@plt+0x5570>
   16764:	stmia	ip!, {r0, r1, r2, r3}
   16768:	ldm	lr!, {r0, r1, r2, r3}
   1676c:	ldr	r4, [sp, #52]	; 0x34
   16770:	stmia	ip!, {r0, r1, r2, r3}
   16774:	ldm	lr, {r0, r1, r2, r3}
   16778:	mvn	lr, r4
   1677c:	and	lr, lr, #67108864	; 0x4000000
   16780:	eor	lr, lr, r4
   16784:	stm	ip, {r0, r1, r2, r3}
   16788:	str	lr, [sp, #52]	; 0x34
   1678c:	bl	11280 <__errno_location@plt>
   16790:	ldr	r2, [r5, #4]
   16794:	ldr	r4, [r5]
   16798:	cmp	r2, #0
   1679c:	ldr	r3, [r0]
   167a0:	mov	r7, r0
   167a4:	str	r3, [sp, #28]
   167a8:	bgt	16804 <__assert_fail@plt+0x547c>
   167ac:	add	r6, r5, #8
   167b0:	cmp	r4, r6
   167b4:	str	r2, [sp, #36]	; 0x24
   167b8:	beq	168c4 <__assert_fail@plt+0x553c>
   167bc:	mov	r3, #8
   167c0:	mov	r0, r4
   167c4:	str	r3, [sp]
   167c8:	rsb	r2, r2, #1
   167cc:	mvn	r3, #-2147483648	; 0x80000000
   167d0:	add	r1, sp, #36	; 0x24
   167d4:	bl	18974 <__assert_fail@plt+0x75ec>
   167d8:	mov	r4, r0
   167dc:	str	r0, [r5]
   167e0:	ldr	r0, [r5, #4]
   167e4:	ldr	r2, [sp, #36]	; 0x24
   167e8:	mov	r1, #0
   167ec:	sub	r2, r2, r0
   167f0:	add	r0, r4, r0, lsl #3
   167f4:	lsl	r2, r2, #3
   167f8:	bl	112a4 <memset@plt>
   167fc:	ldr	r3, [sp, #36]	; 0x24
   16800:	str	r3, [r5, #4]
   16804:	ldr	r6, [sp, #44]	; 0x2c
   16808:	ldr	r8, [r4]
   1680c:	ldr	r5, [r4, #4]
   16810:	ldr	r2, [sp, #80]	; 0x50
   16814:	ldr	r3, [sp, #40]	; 0x28
   16818:	ldr	ip, [sp, #84]	; 0x54
   1681c:	orr	r6, r6, #1
   16820:	add	fp, sp, #48	; 0x30
   16824:	str	r2, [sp, #12]
   16828:	str	r3, [sp]
   1682c:	str	r6, [sp, #4]
   16830:	mov	r1, r8
   16834:	mov	r0, r5
   16838:	str	ip, [sp, #16]
   1683c:	str	fp, [sp, #8]
   16840:	mov	r3, sl
   16844:	mov	r2, r9
   16848:	bl	13afc <__assert_fail@plt+0x2774>
   1684c:	cmp	r8, r0
   16850:	bhi	168b0 <__assert_fail@plt+0x5528>
   16854:	ldr	r3, [pc, #160]	; 168fc <__assert_fail@plt+0x5574>
   16858:	add	r8, r0, #1
   1685c:	cmp	r5, r3
   16860:	str	r8, [r4]
   16864:	beq	16870 <__assert_fail@plt+0x54e8>
   16868:	mov	r0, r5
   1686c:	bl	13510 <__assert_fail@plt+0x2188>
   16870:	mov	r0, r8
   16874:	bl	18758 <__assert_fail@plt+0x73d0>
   16878:	ldr	ip, [sp, #84]	; 0x54
   1687c:	ldr	lr, [sp, #40]	; 0x28
   16880:	mov	r3, sl
   16884:	mov	r2, r9
   16888:	mov	r1, r8
   1688c:	str	r0, [r4, #4]
   16890:	ldr	r4, [sp, #80]	; 0x50
   16894:	str	fp, [sp, #8]
   16898:	str	r6, [sp, #4]
   1689c:	str	ip, [sp, #16]
   168a0:	str	r4, [sp, #12]
   168a4:	str	lr, [sp]
   168a8:	mov	r5, r0
   168ac:	bl	13afc <__assert_fail@plt+0x2774>
   168b0:	ldr	r3, [sp, #28]
   168b4:	mov	r0, r5
   168b8:	str	r3, [r7]
   168bc:	add	sp, sp, #92	; 0x5c
   168c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c4:	mov	r3, #8
   168c8:	str	r3, [sp]
   168cc:	add	r1, sp, #36	; 0x24
   168d0:	rsb	r2, r2, #1
   168d4:	mvn	r3, #-2147483648	; 0x80000000
   168d8:	mov	r0, #0
   168dc:	bl	18974 <__assert_fail@plt+0x75ec>
   168e0:	mov	r4, r0
   168e4:	ldm	r6, {r0, r1}
   168e8:	str	r4, [r5]
   168ec:	stm	r4, {r0, r1}
   168f0:	b	167e0 <__assert_fail@plt+0x5458>
   168f4:	strdeq	fp, [r2], -r4
   168f8:	andeq	fp, r2, r0, lsr r1
   168fc:	andeq	fp, r2, r4, lsr #4
   16900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16904:	sub	sp, sp, #180	; 0xb4
   16908:	mov	r6, r1
   1690c:	mov	r4, r0
   16910:	mov	r9, r2
   16914:	add	r0, sp, #80	; 0x50
   16918:	mov	r2, #48	; 0x30
   1691c:	mov	r1, #0
   16920:	bl	112a4 <memset@plt>
   16924:	cmp	r6, #10
   16928:	beq	16b08 <__assert_fail@plt+0x5780>
   1692c:	add	r5, sp, #80	; 0x50
   16930:	str	r6, [sp, #80]	; 0x50
   16934:	ldm	r5!, {r0, r1, r2, r3}
   16938:	add	ip, sp, #128	; 0x80
   1693c:	mov	r7, ip
   16940:	add	lr, sp, #32
   16944:	stmia	ip!, {r0, r1, r2, r3}
   16948:	mov	r8, #67108864	; 0x4000000
   1694c:	ldm	r5!, {r0, r1, r2, r3}
   16950:	ldr	r6, [pc, #436]	; 16b0c <__assert_fail@plt+0x5784>
   16954:	stmia	ip!, {r0, r1, r2, r3}
   16958:	ldm	r5, {r0, r1, r2, r3}
   1695c:	stm	ip, {r0, r1, r2, r3}
   16960:	ldm	r7!, {r0, r1, r2, r3}
   16964:	stmia	lr!, {r0, r1, r2, r3}
   16968:	ldm	r7!, {r0, r1, r2, r3}
   1696c:	str	r8, [sp, #44]	; 0x2c
   16970:	stmia	lr!, {r0, r1, r2, r3}
   16974:	ldm	ip, {r0, r1, r2, r3}
   16978:	stm	lr, {r0, r1, r2, r3}
   1697c:	bl	11280 <__errno_location@plt>
   16980:	cmn	r4, #-2147483647	; 0x80000001
   16984:	ldr	r5, [r6]
   16988:	mov	r7, r0
   1698c:	movne	r0, #0
   16990:	moveq	r0, #1
   16994:	ldr	r3, [r7]
   16998:	orrs	r0, r0, r4, lsr #31
   1699c:	str	r3, [sp, #24]
   169a0:	bne	16b08 <__assert_fail@plt+0x5780>
   169a4:	ldr	r2, [r6, #4]
   169a8:	cmp	r4, r2
   169ac:	blt	16a0c <__assert_fail@plt+0x5684>
   169b0:	add	r8, r6, #8
   169b4:	cmp	r5, r8
   169b8:	str	r2, [sp, #80]	; 0x50
   169bc:	beq	16ad8 <__assert_fail@plt+0x5750>
   169c0:	mov	r3, #8
   169c4:	sub	r2, r4, r2
   169c8:	mov	r0, r5
   169cc:	str	r3, [sp]
   169d0:	add	r2, r2, #1
   169d4:	add	r1, sp, #80	; 0x50
   169d8:	mvn	r3, #-2147483648	; 0x80000000
   169dc:	bl	18974 <__assert_fail@plt+0x75ec>
   169e0:	mov	r5, r0
   169e4:	str	r0, [r6]
   169e8:	ldr	r0, [r6, #4]
   169ec:	ldr	r2, [sp, #80]	; 0x50
   169f0:	mov	r1, #0
   169f4:	sub	r2, r2, r0
   169f8:	add	r0, r5, r0, lsl #3
   169fc:	lsl	r2, r2, #3
   16a00:	bl	112a4 <memset@plt>
   16a04:	ldr	r3, [sp, #80]	; 0x50
   16a08:	str	r3, [r6, #4]
   16a0c:	add	fp, r5, r4, lsl #3
   16a10:	ldr	r1, [sp, #36]	; 0x24
   16a14:	ldr	r8, [r5, r4, lsl #3]
   16a18:	ldr	r6, [fp, #4]
   16a1c:	ldr	r2, [sp, #72]	; 0x48
   16a20:	ldr	r3, [sp, #32]
   16a24:	ldr	ip, [sp, #76]	; 0x4c
   16a28:	orr	r1, r1, #1
   16a2c:	add	sl, sp, #40	; 0x28
   16a30:	str	r1, [sp, #28]
   16a34:	str	r1, [sp, #4]
   16a38:	str	r2, [sp, #12]
   16a3c:	str	r3, [sp]
   16a40:	mov	r0, r6
   16a44:	mov	r1, r8
   16a48:	str	ip, [sp, #16]
   16a4c:	str	sl, [sp, #8]
   16a50:	mvn	r3, #0
   16a54:	mov	r2, r9
   16a58:	bl	13afc <__assert_fail@plt+0x2774>
   16a5c:	cmp	r8, r0
   16a60:	bhi	16ac4 <__assert_fail@plt+0x573c>
   16a64:	ldr	r3, [pc, #164]	; 16b10 <__assert_fail@plt+0x5788>
   16a68:	add	r8, r0, #1
   16a6c:	cmp	r6, r3
   16a70:	str	r8, [r5, r4, lsl #3]
   16a74:	beq	16a80 <__assert_fail@plt+0x56f8>
   16a78:	mov	r0, r6
   16a7c:	bl	13510 <__assert_fail@plt+0x2188>
   16a80:	mov	r0, r8
   16a84:	bl	18758 <__assert_fail@plt+0x73d0>
   16a88:	ldr	lr, [sp, #76]	; 0x4c
   16a8c:	ldr	r3, [sp, #32]
   16a90:	ldr	ip, [sp, #72]	; 0x48
   16a94:	ldr	r4, [sp, #28]
   16a98:	mov	r2, r9
   16a9c:	mov	r1, r8
   16aa0:	str	r0, [fp, #4]
   16aa4:	str	r3, [sp]
   16aa8:	str	sl, [sp, #8]
   16aac:	str	r4, [sp, #4]
   16ab0:	str	lr, [sp, #16]
   16ab4:	str	ip, [sp, #12]
   16ab8:	mvn	r3, #0
   16abc:	mov	r6, r0
   16ac0:	bl	13afc <__assert_fail@plt+0x2774>
   16ac4:	ldr	r3, [sp, #24]
   16ac8:	mov	r0, r6
   16acc:	str	r3, [r7]
   16ad0:	add	sp, sp, #180	; 0xb4
   16ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ad8:	mov	r3, #8
   16adc:	sub	r2, r4, r2
   16ae0:	add	r1, sp, #80	; 0x50
   16ae4:	str	r3, [sp]
   16ae8:	add	r2, r2, #1
   16aec:	mvn	r3, #-2147483648	; 0x80000000
   16af0:	bl	18974 <__assert_fail@plt+0x75ec>
   16af4:	mov	r5, r0
   16af8:	ldm	r8, {r0, r1}
   16afc:	str	r5, [r6]
   16b00:	stm	r5, {r0, r1}
   16b04:	b	169e8 <__assert_fail@plt+0x5660>
   16b08:	bl	11370 <abort@plt>
   16b0c:	andeq	fp, r2, r0, lsr r1
   16b10:	andeq	fp, r2, r4, lsr #4
   16b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b18:	mov	r7, r1
   16b1c:	ldr	lr, [pc, #492]	; 16d10 <__assert_fail@plt+0x5988>
   16b20:	mov	r8, r2
   16b24:	mov	r4, r0
   16b28:	mov	fp, r3
   16b2c:	ldm	lr!, {r0, r1, r2, r3}
   16b30:	sub	sp, sp, #100	; 0x64
   16b34:	add	ip, sp, #48	; 0x30
   16b38:	mov	sl, #10
   16b3c:	stmia	ip!, {r0, r1, r2, r3}
   16b40:	cmp	r8, #0
   16b44:	cmpne	r7, #0
   16b48:	ldm	lr!, {r0, r1, r2, r3}
   16b4c:	str	sl, [sp, #48]	; 0x30
   16b50:	stmia	ip!, {r0, r1, r2, r3}
   16b54:	ldm	lr, {r0, r1, r2, r3}
   16b58:	stm	ip, {r0, r1, r2, r3}
   16b5c:	beq	16d0c <__assert_fail@plt+0x5984>
   16b60:	str	r7, [sp, #88]	; 0x58
   16b64:	str	r8, [sp, #92]	; 0x5c
   16b68:	bl	11280 <__errno_location@plt>
   16b6c:	ldr	r6, [pc, #416]	; 16d14 <__assert_fail@plt+0x598c>
   16b70:	cmn	r4, #-2147483647	; 0x80000001
   16b74:	ldr	r5, [r6]
   16b78:	mov	r9, r0
   16b7c:	movne	r0, #0
   16b80:	moveq	r0, #1
   16b84:	ldr	r3, [r9]
   16b88:	orrs	r0, r0, r4, lsr #31
   16b8c:	str	r3, [sp, #28]
   16b90:	bne	16d0c <__assert_fail@plt+0x5984>
   16b94:	ldr	r2, [r6, #4]
   16b98:	cmp	r4, r2
   16b9c:	movlt	r3, sl
   16ba0:	blt	16c0c <__assert_fail@plt+0x5884>
   16ba4:	add	r7, r6, #8
   16ba8:	cmp	r5, r7
   16bac:	str	r2, [sp, #44]	; 0x2c
   16bb0:	beq	16cdc <__assert_fail@plt+0x5954>
   16bb4:	mov	r3, #8
   16bb8:	sub	r2, r4, r2
   16bbc:	mov	r0, r5
   16bc0:	str	r3, [sp]
   16bc4:	add	r2, r2, #1
   16bc8:	mvn	r3, #-2147483648	; 0x80000000
   16bcc:	add	r1, sp, #44	; 0x2c
   16bd0:	bl	18974 <__assert_fail@plt+0x75ec>
   16bd4:	mov	r5, r0
   16bd8:	str	r0, [r6]
   16bdc:	ldr	r0, [r6, #4]
   16be0:	ldr	r2, [sp, #44]	; 0x2c
   16be4:	mov	r1, #0
   16be8:	sub	r2, r2, r0
   16bec:	add	r0, r5, r0, lsl #3
   16bf0:	lsl	r2, r2, #3
   16bf4:	bl	112a4 <memset@plt>
   16bf8:	ldr	r3, [sp, #48]	; 0x30
   16bfc:	ldr	r7, [sp, #88]	; 0x58
   16c00:	ldr	r8, [sp, #92]	; 0x5c
   16c04:	ldr	r2, [sp, #44]	; 0x2c
   16c08:	str	r2, [r6, #4]
   16c0c:	add	r2, r5, r4, lsl #3
   16c10:	mov	r1, r2
   16c14:	str	r2, [sp, #32]
   16c18:	ldr	r2, [sp, #52]	; 0x34
   16c1c:	ldr	r6, [r1, #4]
   16c20:	ldr	sl, [r5, r4, lsl #3]
   16c24:	orr	r2, r2, #1
   16c28:	str	r3, [sp]
   16c2c:	add	r3, sp, #56	; 0x38
   16c30:	str	r2, [sp, #36]	; 0x24
   16c34:	str	r2, [sp, #4]
   16c38:	str	r3, [sp, #8]
   16c3c:	mov	r0, r6
   16c40:	str	r8, [sp, #16]
   16c44:	str	r7, [sp, #12]
   16c48:	mov	r1, sl
   16c4c:	mvn	r3, #0
   16c50:	mov	r2, fp
   16c54:	bl	13afc <__assert_fail@plt+0x2774>
   16c58:	cmp	sl, r0
   16c5c:	bhi	16cc8 <__assert_fail@plt+0x5940>
   16c60:	ldr	r3, [pc, #176]	; 16d18 <__assert_fail@plt+0x5990>
   16c64:	add	r7, r0, #1
   16c68:	cmp	r6, r3
   16c6c:	str	r7, [r5, r4, lsl #3]
   16c70:	beq	16c7c <__assert_fail@plt+0x58f4>
   16c74:	mov	r0, r6
   16c78:	bl	13510 <__assert_fail@plt+0x2188>
   16c7c:	mov	r0, r7
   16c80:	bl	18758 <__assert_fail@plt+0x73d0>
   16c84:	ldr	r3, [sp, #32]
   16c88:	ldr	lr, [sp, #92]	; 0x5c
   16c8c:	ldr	ip, [sp, #88]	; 0x58
   16c90:	ldr	r4, [sp, #36]	; 0x24
   16c94:	mov	r2, fp
   16c98:	mov	r1, r7
   16c9c:	str	r0, [r3, #4]
   16ca0:	add	r3, sp, #56	; 0x38
   16ca4:	str	r3, [sp, #8]
   16ca8:	ldr	r3, [sp, #48]	; 0x30
   16cac:	str	r4, [sp, #4]
   16cb0:	str	r3, [sp]
   16cb4:	str	lr, [sp, #16]
   16cb8:	str	ip, [sp, #12]
   16cbc:	mvn	r3, #0
   16cc0:	mov	r6, r0
   16cc4:	bl	13afc <__assert_fail@plt+0x2774>
   16cc8:	ldr	r3, [sp, #28]
   16ccc:	mov	r0, r6
   16cd0:	str	r3, [r9]
   16cd4:	add	sp, sp, #100	; 0x64
   16cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cdc:	mov	r3, #8
   16ce0:	sub	r2, r4, r2
   16ce4:	str	r3, [sp]
   16ce8:	add	r1, sp, #44	; 0x2c
   16cec:	add	r2, r2, #1
   16cf0:	mvn	r3, #-2147483648	; 0x80000000
   16cf4:	bl	18974 <__assert_fail@plt+0x75ec>
   16cf8:	mov	r5, r0
   16cfc:	ldm	r7, {r0, r1}
   16d00:	str	r5, [r6]
   16d04:	stm	r5, {r0, r1}
   16d08:	b	16bdc <__assert_fail@plt+0x5854>
   16d0c:	bl	11370 <abort@plt>
   16d10:	strdeq	fp, [r2], -r4
   16d14:	andeq	fp, r2, r0, lsr r1
   16d18:	andeq	fp, r2, r4, lsr #4
   16d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d20:	mov	r7, r1
   16d24:	ldr	lr, [pc, #492]	; 16f18 <__assert_fail@plt+0x5b90>
   16d28:	mov	r8, r2
   16d2c:	mov	r4, r0
   16d30:	mov	fp, r3
   16d34:	ldm	lr!, {r0, r1, r2, r3}
   16d38:	sub	sp, sp, #100	; 0x64
   16d3c:	add	ip, sp, #48	; 0x30
   16d40:	mov	sl, #10
   16d44:	stmia	ip!, {r0, r1, r2, r3}
   16d48:	cmp	r8, #0
   16d4c:	cmpne	r7, #0
   16d50:	ldm	lr!, {r0, r1, r2, r3}
   16d54:	str	sl, [sp, #48]	; 0x30
   16d58:	stmia	ip!, {r0, r1, r2, r3}
   16d5c:	ldm	lr, {r0, r1, r2, r3}
   16d60:	stm	ip, {r0, r1, r2, r3}
   16d64:	beq	16f14 <__assert_fail@plt+0x5b8c>
   16d68:	str	r7, [sp, #88]	; 0x58
   16d6c:	str	r8, [sp, #92]	; 0x5c
   16d70:	bl	11280 <__errno_location@plt>
   16d74:	ldr	r6, [pc, #416]	; 16f1c <__assert_fail@plt+0x5b94>
   16d78:	cmn	r4, #-2147483647	; 0x80000001
   16d7c:	ldr	r5, [r6]
   16d80:	mov	r9, r0
   16d84:	movne	r0, #0
   16d88:	moveq	r0, #1
   16d8c:	ldr	r3, [r9]
   16d90:	orrs	r0, r0, r4, lsr #31
   16d94:	str	r3, [sp, #28]
   16d98:	bne	16f14 <__assert_fail@plt+0x5b8c>
   16d9c:	ldr	r2, [r6, #4]
   16da0:	cmp	r4, r2
   16da4:	movlt	r3, sl
   16da8:	blt	16e14 <__assert_fail@plt+0x5a8c>
   16dac:	add	r7, r6, #8
   16db0:	cmp	r5, r7
   16db4:	str	r2, [sp, #44]	; 0x2c
   16db8:	beq	16ee4 <__assert_fail@plt+0x5b5c>
   16dbc:	mov	r3, #8
   16dc0:	sub	r2, r4, r2
   16dc4:	mov	r0, r5
   16dc8:	str	r3, [sp]
   16dcc:	add	r2, r2, #1
   16dd0:	mvn	r3, #-2147483648	; 0x80000000
   16dd4:	add	r1, sp, #44	; 0x2c
   16dd8:	bl	18974 <__assert_fail@plt+0x75ec>
   16ddc:	mov	r5, r0
   16de0:	str	r0, [r6]
   16de4:	ldr	r0, [r6, #4]
   16de8:	ldr	r2, [sp, #44]	; 0x2c
   16dec:	mov	r1, #0
   16df0:	sub	r2, r2, r0
   16df4:	add	r0, r5, r0, lsl #3
   16df8:	lsl	r2, r2, #3
   16dfc:	bl	112a4 <memset@plt>
   16e00:	ldr	r3, [sp, #48]	; 0x30
   16e04:	ldr	r7, [sp, #88]	; 0x58
   16e08:	ldr	r8, [sp, #92]	; 0x5c
   16e0c:	ldr	r2, [sp, #44]	; 0x2c
   16e10:	str	r2, [r6, #4]
   16e14:	add	r2, r5, r4, lsl #3
   16e18:	mov	r1, r2
   16e1c:	str	r2, [sp, #32]
   16e20:	ldr	r2, [sp, #52]	; 0x34
   16e24:	ldr	r6, [r1, #4]
   16e28:	ldr	sl, [r5, r4, lsl #3]
   16e2c:	orr	r2, r2, #1
   16e30:	str	r3, [sp]
   16e34:	add	r3, sp, #56	; 0x38
   16e38:	str	r2, [sp, #36]	; 0x24
   16e3c:	str	r2, [sp, #4]
   16e40:	str	r3, [sp, #8]
   16e44:	mov	r0, r6
   16e48:	str	r8, [sp, #16]
   16e4c:	str	r7, [sp, #12]
   16e50:	mov	r1, sl
   16e54:	ldr	r3, [sp, #136]	; 0x88
   16e58:	mov	r2, fp
   16e5c:	bl	13afc <__assert_fail@plt+0x2774>
   16e60:	cmp	sl, r0
   16e64:	bhi	16ed0 <__assert_fail@plt+0x5b48>
   16e68:	ldr	r3, [pc, #176]	; 16f20 <__assert_fail@plt+0x5b98>
   16e6c:	add	r7, r0, #1
   16e70:	cmp	r6, r3
   16e74:	str	r7, [r5, r4, lsl #3]
   16e78:	beq	16e84 <__assert_fail@plt+0x5afc>
   16e7c:	mov	r0, r6
   16e80:	bl	13510 <__assert_fail@plt+0x2188>
   16e84:	mov	r0, r7
   16e88:	bl	18758 <__assert_fail@plt+0x73d0>
   16e8c:	ldr	r3, [sp, #32]
   16e90:	ldr	lr, [sp, #92]	; 0x5c
   16e94:	ldr	ip, [sp, #88]	; 0x58
   16e98:	ldr	r4, [sp, #36]	; 0x24
   16e9c:	mov	r2, fp
   16ea0:	mov	r1, r7
   16ea4:	str	r0, [r3, #4]
   16ea8:	add	r3, sp, #56	; 0x38
   16eac:	str	r3, [sp, #8]
   16eb0:	ldr	r3, [sp, #48]	; 0x30
   16eb4:	str	r4, [sp, #4]
   16eb8:	str	r3, [sp]
   16ebc:	str	lr, [sp, #16]
   16ec0:	str	ip, [sp, #12]
   16ec4:	ldr	r3, [sp, #136]	; 0x88
   16ec8:	mov	r6, r0
   16ecc:	bl	13afc <__assert_fail@plt+0x2774>
   16ed0:	ldr	r3, [sp, #28]
   16ed4:	mov	r0, r6
   16ed8:	str	r3, [r9]
   16edc:	add	sp, sp, #100	; 0x64
   16ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ee4:	mov	r3, #8
   16ee8:	sub	r2, r4, r2
   16eec:	str	r3, [sp]
   16ef0:	add	r1, sp, #44	; 0x2c
   16ef4:	add	r2, r2, #1
   16ef8:	mvn	r3, #-2147483648	; 0x80000000
   16efc:	bl	18974 <__assert_fail@plt+0x75ec>
   16f00:	mov	r5, r0
   16f04:	ldm	r7, {r0, r1}
   16f08:	str	r5, [r6]
   16f0c:	stm	r5, {r0, r1}
   16f10:	b	16de4 <__assert_fail@plt+0x5a5c>
   16f14:	bl	11370 <abort@plt>
   16f18:	strdeq	fp, [r2], -r4
   16f1c:	andeq	fp, r2, r0, lsr r1
   16f20:	andeq	fp, r2, r4, lsr #4
   16f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f28:	mov	r5, r0
   16f2c:	ldr	lr, [pc, #452]	; 170f8 <__assert_fail@plt+0x5d70>
   16f30:	mov	r6, r1
   16f34:	mov	sl, r2
   16f38:	ldm	lr!, {r0, r1, r2, r3}
   16f3c:	sub	sp, sp, #92	; 0x5c
   16f40:	add	ip, sp, #40	; 0x28
   16f44:	cmp	r6, #0
   16f48:	cmpne	r5, #0
   16f4c:	stmia	ip!, {r0, r1, r2, r3}
   16f50:	mov	r9, #10
   16f54:	ldm	lr!, {r0, r1, r2, r3}
   16f58:	moveq	fp, #1
   16f5c:	movne	fp, #0
   16f60:	str	r9, [sp, #40]	; 0x28
   16f64:	stmia	ip!, {r0, r1, r2, r3}
   16f68:	ldm	lr, {r0, r1, r2, r3}
   16f6c:	stm	ip, {r0, r1, r2, r3}
   16f70:	beq	170f4 <__assert_fail@plt+0x5d6c>
   16f74:	str	r5, [sp, #80]	; 0x50
   16f78:	str	r6, [sp, #84]	; 0x54
   16f7c:	bl	11280 <__errno_location@plt>
   16f80:	ldr	r7, [pc, #372]	; 170fc <__assert_fail@plt+0x5d74>
   16f84:	ldr	r2, [r7, #4]
   16f88:	ldr	r4, [r7]
   16f8c:	cmp	r2, #0
   16f90:	ldr	r3, [r0]
   16f94:	mov	r8, r0
   16f98:	str	r3, [sp, #24]
   16f9c:	movgt	r3, r9
   16fa0:	bgt	17008 <__assert_fail@plt+0x5c80>
   16fa4:	add	r5, r7, #8
   16fa8:	cmp	r4, r5
   16fac:	str	r2, [sp, #36]	; 0x24
   16fb0:	beq	170c4 <__assert_fail@plt+0x5d3c>
   16fb4:	mov	r3, #8
   16fb8:	mov	r0, r4
   16fbc:	str	r3, [sp]
   16fc0:	rsb	r2, r2, #1
   16fc4:	mvn	r3, #-2147483648	; 0x80000000
   16fc8:	add	r1, sp, #36	; 0x24
   16fcc:	bl	18974 <__assert_fail@plt+0x75ec>
   16fd0:	mov	r4, r0
   16fd4:	str	r0, [r7]
   16fd8:	ldr	r0, [r7, #4]
   16fdc:	ldr	r2, [sp, #36]	; 0x24
   16fe0:	mov	r1, #0
   16fe4:	sub	r2, r2, r0
   16fe8:	add	r0, r4, r0, lsl #3
   16fec:	lsl	r2, r2, #3
   16ff0:	bl	112a4 <memset@plt>
   16ff4:	ldr	r3, [sp, #40]	; 0x28
   16ff8:	ldr	r5, [sp, #80]	; 0x50
   16ffc:	ldr	r6, [sp, #84]	; 0x54
   17000:	ldr	r2, [sp, #36]	; 0x24
   17004:	str	r2, [r7, #4]
   17008:	ldr	r2, [sp, #44]	; 0x2c
   1700c:	ldr	r9, [r4]
   17010:	ldr	r7, [r4, #4]
   17014:	orr	r2, r2, #1
   17018:	add	fp, sp, #48	; 0x30
   1701c:	str	r2, [sp, #28]
   17020:	str	r2, [sp, #4]
   17024:	str	r3, [sp]
   17028:	str	r6, [sp, #16]
   1702c:	str	r5, [sp, #12]
   17030:	mov	r1, r9
   17034:	mov	r0, r7
   17038:	str	fp, [sp, #8]
   1703c:	mvn	r3, #0
   17040:	mov	r2, sl
   17044:	bl	13afc <__assert_fail@plt+0x2774>
   17048:	cmp	r9, r0
   1704c:	bhi	170b0 <__assert_fail@plt+0x5d28>
   17050:	ldr	r3, [pc, #168]	; 17100 <__assert_fail@plt+0x5d78>
   17054:	add	r5, r0, #1
   17058:	cmp	r7, r3
   1705c:	str	r5, [r4]
   17060:	beq	1706c <__assert_fail@plt+0x5ce4>
   17064:	mov	r0, r7
   17068:	bl	13510 <__assert_fail@plt+0x2188>
   1706c:	mov	r0, r5
   17070:	bl	18758 <__assert_fail@plt+0x73d0>
   17074:	ldr	lr, [sp, #84]	; 0x54
   17078:	ldr	r3, [sp, #40]	; 0x28
   1707c:	ldr	ip, [sp, #80]	; 0x50
   17080:	mov	r2, sl
   17084:	mov	r1, r5
   17088:	str	r0, [r4, #4]
   1708c:	ldr	r4, [sp, #28]
   17090:	str	r3, [sp]
   17094:	str	fp, [sp, #8]
   17098:	str	r4, [sp, #4]
   1709c:	str	lr, [sp, #16]
   170a0:	str	ip, [sp, #12]
   170a4:	mvn	r3, #0
   170a8:	mov	r7, r0
   170ac:	bl	13afc <__assert_fail@plt+0x2774>
   170b0:	ldr	r3, [sp, #24]
   170b4:	mov	r0, r7
   170b8:	str	r3, [r8]
   170bc:	add	sp, sp, #92	; 0x5c
   170c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c4:	mov	r3, #8
   170c8:	str	r3, [sp]
   170cc:	add	r1, sp, #36	; 0x24
   170d0:	rsb	r2, r2, #1
   170d4:	mov	r0, fp
   170d8:	mvn	r3, #-2147483648	; 0x80000000
   170dc:	bl	18974 <__assert_fail@plt+0x75ec>
   170e0:	mov	r4, r0
   170e4:	ldm	r5, {r0, r1}
   170e8:	str	r4, [r7]
   170ec:	stm	r4, {r0, r1}
   170f0:	b	16fd8 <__assert_fail@plt+0x5c50>
   170f4:	bl	11370 <abort@plt>
   170f8:	strdeq	fp, [r2], -r4
   170fc:	andeq	fp, r2, r0, lsr r1
   17100:	andeq	fp, r2, r4, lsr #4
   17104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17108:	mov	r5, r0
   1710c:	ldr	lr, [pc, #464]	; 172e4 <__assert_fail@plt+0x5f5c>
   17110:	mov	r6, r1
   17114:	mov	sl, r2
   17118:	mov	fp, r3
   1711c:	ldm	lr!, {r0, r1, r2, r3}
   17120:	sub	sp, sp, #92	; 0x5c
   17124:	add	ip, sp, #40	; 0x28
   17128:	cmp	r6, #0
   1712c:	cmpne	r5, #0
   17130:	stmia	ip!, {r0, r1, r2, r3}
   17134:	moveq	r4, #1
   17138:	ldm	lr!, {r0, r1, r2, r3}
   1713c:	movne	r4, #0
   17140:	mov	r9, #10
   17144:	str	r4, [sp, #28]
   17148:	stmia	ip!, {r0, r1, r2, r3}
   1714c:	ldm	lr, {r0, r1, r2, r3}
   17150:	str	r9, [sp, #40]	; 0x28
   17154:	stm	ip, {r0, r1, r2, r3}
   17158:	beq	172e0 <__assert_fail@plt+0x5f58>
   1715c:	str	r5, [sp, #80]	; 0x50
   17160:	str	r6, [sp, #84]	; 0x54
   17164:	bl	11280 <__errno_location@plt>
   17168:	ldr	r7, [pc, #376]	; 172e8 <__assert_fail@plt+0x5f60>
   1716c:	ldr	r2, [r7, #4]
   17170:	ldr	r4, [r7]
   17174:	cmp	r2, #0
   17178:	ldr	r3, [r0]
   1717c:	mov	r8, r0
   17180:	str	r3, [sp, #24]
   17184:	movgt	r3, r9
   17188:	bgt	171f0 <__assert_fail@plt+0x5e68>
   1718c:	add	r5, r7, #8
   17190:	cmp	r4, r5
   17194:	str	r2, [sp, #36]	; 0x24
   17198:	beq	172b0 <__assert_fail@plt+0x5f28>
   1719c:	mov	r3, #8
   171a0:	mov	r0, r4
   171a4:	str	r3, [sp]
   171a8:	rsb	r2, r2, #1
   171ac:	mvn	r3, #-2147483648	; 0x80000000
   171b0:	add	r1, sp, #36	; 0x24
   171b4:	bl	18974 <__assert_fail@plt+0x75ec>
   171b8:	mov	r4, r0
   171bc:	str	r0, [r7]
   171c0:	ldr	r0, [r7, #4]
   171c4:	ldr	r2, [sp, #36]	; 0x24
   171c8:	mov	r1, #0
   171cc:	sub	r2, r2, r0
   171d0:	add	r0, r4, r0, lsl #3
   171d4:	lsl	r2, r2, #3
   171d8:	bl	112a4 <memset@plt>
   171dc:	ldr	r3, [sp, #40]	; 0x28
   171e0:	ldr	r5, [sp, #80]	; 0x50
   171e4:	ldr	r6, [sp, #84]	; 0x54
   171e8:	ldr	r2, [sp, #36]	; 0x24
   171ec:	str	r2, [r7, #4]
   171f0:	ldr	r2, [sp, #44]	; 0x2c
   171f4:	ldr	r9, [r4]
   171f8:	ldr	r7, [r4, #4]
   171fc:	orr	r2, r2, #1
   17200:	str	r3, [sp]
   17204:	add	r3, sp, #48	; 0x30
   17208:	str	r2, [sp, #28]
   1720c:	str	r2, [sp, #4]
   17210:	str	r3, [sp, #8]
   17214:	str	r6, [sp, #16]
   17218:	str	r5, [sp, #12]
   1721c:	mov	r1, r9
   17220:	mov	r0, r7
   17224:	mov	r3, fp
   17228:	mov	r2, sl
   1722c:	bl	13afc <__assert_fail@plt+0x2774>
   17230:	cmp	r9, r0
   17234:	bhi	1729c <__assert_fail@plt+0x5f14>
   17238:	ldr	r3, [pc, #172]	; 172ec <__assert_fail@plt+0x5f64>
   1723c:	add	r5, r0, #1
   17240:	cmp	r7, r3
   17244:	str	r5, [r4]
   17248:	beq	17254 <__assert_fail@plt+0x5ecc>
   1724c:	mov	r0, r7
   17250:	bl	13510 <__assert_fail@plt+0x2188>
   17254:	mov	r0, r5
   17258:	bl	18758 <__assert_fail@plt+0x73d0>
   1725c:	add	lr, sp, #48	; 0x30
   17260:	ldr	ip, [sp, #84]	; 0x54
   17264:	mov	r1, r5
   17268:	ldr	r5, [sp, #28]
   1726c:	mov	r3, fp
   17270:	mov	r2, sl
   17274:	str	r0, [r4, #4]
   17278:	ldr	r4, [sp, #80]	; 0x50
   1727c:	str	lr, [sp, #8]
   17280:	ldr	lr, [sp, #40]	; 0x28
   17284:	str	r5, [sp, #4]
   17288:	str	ip, [sp, #16]
   1728c:	str	r4, [sp, #12]
   17290:	str	lr, [sp]
   17294:	mov	r7, r0
   17298:	bl	13afc <__assert_fail@plt+0x2774>
   1729c:	ldr	r3, [sp, #24]
   172a0:	mov	r0, r7
   172a4:	str	r3, [r8]
   172a8:	add	sp, sp, #92	; 0x5c
   172ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172b0:	mov	r3, #8
   172b4:	str	r3, [sp]
   172b8:	add	r1, sp, #36	; 0x24
   172bc:	rsb	r2, r2, #1
   172c0:	ldr	r0, [sp, #28]
   172c4:	mvn	r3, #-2147483648	; 0x80000000
   172c8:	bl	18974 <__assert_fail@plt+0x75ec>
   172cc:	mov	r4, r0
   172d0:	ldm	r5, {r0, r1}
   172d4:	str	r4, [r7]
   172d8:	stm	r4, {r0, r1}
   172dc:	b	171c0 <__assert_fail@plt+0x5e38>
   172e0:	bl	11370 <abort@plt>
   172e4:	strdeq	fp, [r2], -r4
   172e8:	andeq	fp, r2, r0, lsr r1
   172ec:	andeq	fp, r2, r4, lsr #4
   172f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172f4:	sub	sp, sp, #52	; 0x34
   172f8:	mov	r5, r0
   172fc:	mov	sl, r1
   17300:	mov	fp, r2
   17304:	bl	11280 <__errno_location@plt>
   17308:	ldr	r4, [pc, #404]	; 174a4 <__assert_fail@plt+0x611c>
   1730c:	cmn	r5, #-2147483647	; 0x80000001
   17310:	ldr	r6, [r4]
   17314:	mov	r8, r0
   17318:	movne	r0, #0
   1731c:	moveq	r0, #1
   17320:	ldr	r3, [r8]
   17324:	orrs	r0, r0, r5, lsr #31
   17328:	str	r3, [sp, #28]
   1732c:	bne	174a0 <__assert_fail@plt+0x6118>
   17330:	ldr	r2, [r4, #4]
   17334:	cmp	r5, r2
   17338:	blt	17398 <__assert_fail@plt+0x6010>
   1733c:	add	r7, r4, #8
   17340:	cmp	r6, r7
   17344:	str	r2, [sp, #44]	; 0x2c
   17348:	beq	17470 <__assert_fail@plt+0x60e8>
   1734c:	mov	r3, #8
   17350:	sub	r2, r5, r2
   17354:	mov	r0, r6
   17358:	str	r3, [sp]
   1735c:	add	r2, r2, #1
   17360:	mvn	r3, #-2147483648	; 0x80000000
   17364:	add	r1, sp, #44	; 0x2c
   17368:	bl	18974 <__assert_fail@plt+0x75ec>
   1736c:	mov	r6, r0
   17370:	str	r0, [r4]
   17374:	ldr	r0, [r4, #4]
   17378:	ldr	r2, [sp, #44]	; 0x2c
   1737c:	mov	r1, #0
   17380:	sub	r2, r2, r0
   17384:	add	r0, r6, r0, lsl #3
   17388:	lsl	r2, r2, #3
   1738c:	bl	112a4 <memset@plt>
   17390:	ldr	r3, [sp, #44]	; 0x2c
   17394:	str	r3, [r4, #4]
   17398:	ldr	r2, [r4, #56]	; 0x38
   1739c:	add	r3, r6, r5, lsl #3
   173a0:	ldr	r1, [r4, #20]
   173a4:	ldr	r7, [r3, #4]
   173a8:	ldr	r9, [r6, r5, lsl #3]
   173ac:	ldr	ip, [r4, #60]	; 0x3c
   173b0:	str	r3, [sp, #32]
   173b4:	ldr	r3, [r4, #16]
   173b8:	str	r2, [sp, #12]
   173bc:	ldr	r2, [pc, #228]	; 174a8 <__assert_fail@plt+0x6120>
   173c0:	orr	r1, r1, #1
   173c4:	str	r1, [sp, #36]	; 0x24
   173c8:	str	r1, [sp, #4]
   173cc:	str	r2, [sp, #8]
   173d0:	str	r3, [sp]
   173d4:	mov	r0, r7
   173d8:	mov	r1, r9
   173dc:	str	ip, [sp, #16]
   173e0:	mov	r3, fp
   173e4:	mov	r2, sl
   173e8:	bl	13afc <__assert_fail@plt+0x2774>
   173ec:	cmp	r9, r0
   173f0:	bhi	1745c <__assert_fail@plt+0x60d4>
   173f4:	ldr	r3, [pc, #176]	; 174ac <__assert_fail@plt+0x6124>
   173f8:	add	r9, r0, #1
   173fc:	cmp	r7, r3
   17400:	str	r9, [r6, r5, lsl #3]
   17404:	beq	17410 <__assert_fail@plt+0x6088>
   17408:	mov	r0, r7
   1740c:	bl	13510 <__assert_fail@plt+0x2188>
   17410:	mov	r0, r9
   17414:	bl	18758 <__assert_fail@plt+0x73d0>
   17418:	ldr	ip, [sp, #32]
   1741c:	ldr	lr, [r4, #60]	; 0x3c
   17420:	ldr	r5, [r4, #56]	; 0x38
   17424:	mov	r3, fp
   17428:	mov	r2, sl
   1742c:	mov	r1, r9
   17430:	str	r0, [ip, #4]
   17434:	ldr	ip, [r4, #16]
   17438:	ldr	r4, [pc, #104]	; 174a8 <__assert_fail@plt+0x6120>
   1743c:	str	lr, [sp, #16]
   17440:	str	r4, [sp, #8]
   17444:	ldr	r4, [sp, #36]	; 0x24
   17448:	str	r5, [sp, #12]
   1744c:	str	r4, [sp, #4]
   17450:	str	ip, [sp]
   17454:	mov	r7, r0
   17458:	bl	13afc <__assert_fail@plt+0x2774>
   1745c:	ldr	r3, [sp, #28]
   17460:	mov	r0, r7
   17464:	str	r3, [r8]
   17468:	add	sp, sp, #52	; 0x34
   1746c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17470:	mov	r3, #8
   17474:	sub	r2, r5, r2
   17478:	str	r3, [sp]
   1747c:	add	r1, sp, #44	; 0x2c
   17480:	add	r2, r2, #1
   17484:	mvn	r3, #-2147483648	; 0x80000000
   17488:	bl	18974 <__assert_fail@plt+0x75ec>
   1748c:	mov	r6, r0
   17490:	ldm	r7, {r0, r1}
   17494:	str	r6, [r4]
   17498:	stm	r6, {r0, r1}
   1749c:	b	17374 <__assert_fail@plt+0x5fec>
   174a0:	bl	11370 <abort@plt>
   174a4:	andeq	fp, r2, r0, lsr r1
   174a8:	andeq	fp, r2, r8, asr #2
   174ac:	andeq	fp, r2, r4, lsr #4
   174b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b4:	sub	sp, sp, #44	; 0x2c
   174b8:	mov	r9, r0
   174bc:	mov	sl, r1
   174c0:	bl	11280 <__errno_location@plt>
   174c4:	ldr	r4, [pc, #360]	; 17634 <__assert_fail@plt+0x62ac>
   174c8:	ldr	r2, [r4, #4]
   174cc:	ldr	r5, [r4]
   174d0:	cmp	r2, #0
   174d4:	ldr	r3, [r0]
   174d8:	mov	r7, r0
   174dc:	str	r3, [sp, #24]
   174e0:	bgt	1753c <__assert_fail@plt+0x61b4>
   174e4:	add	r6, r4, #8
   174e8:	cmp	r5, r6
   174ec:	str	r2, [sp, #36]	; 0x24
   174f0:	beq	17604 <__assert_fail@plt+0x627c>
   174f4:	mov	r3, #8
   174f8:	mov	r0, r5
   174fc:	str	r3, [sp]
   17500:	rsb	r2, r2, #1
   17504:	mvn	r3, #-2147483648	; 0x80000000
   17508:	add	r1, sp, #36	; 0x24
   1750c:	bl	18974 <__assert_fail@plt+0x75ec>
   17510:	mov	r5, r0
   17514:	str	r0, [r4]
   17518:	ldr	r0, [r4, #4]
   1751c:	ldr	r2, [sp, #36]	; 0x24
   17520:	mov	r1, #0
   17524:	sub	r2, r2, r0
   17528:	add	r0, r5, r0, lsl #3
   1752c:	lsl	r2, r2, #3
   17530:	bl	112a4 <memset@plt>
   17534:	ldr	r3, [sp, #36]	; 0x24
   17538:	str	r3, [r4, #4]
   1753c:	ldr	r1, [r4, #20]
   17540:	ldr	r8, [r5]
   17544:	ldr	r6, [r5, #4]
   17548:	ldr	r2, [r4, #56]	; 0x38
   1754c:	ldr	r3, [r4, #16]
   17550:	ldr	ip, [r4, #60]	; 0x3c
   17554:	ldr	fp, [pc, #220]	; 17638 <__assert_fail@plt+0x62b0>
   17558:	orr	r1, r1, #1
   1755c:	str	r1, [sp, #28]
   17560:	str	r1, [sp, #4]
   17564:	str	r2, [sp, #12]
   17568:	str	r3, [sp]
   1756c:	mov	r1, r8
   17570:	mov	r0, r6
   17574:	str	ip, [sp, #16]
   17578:	str	fp, [sp, #8]
   1757c:	mov	r3, sl
   17580:	mov	r2, r9
   17584:	bl	13afc <__assert_fail@plt+0x2774>
   17588:	cmp	r8, r0
   1758c:	bhi	175f0 <__assert_fail@plt+0x6268>
   17590:	ldr	r3, [pc, #164]	; 1763c <__assert_fail@plt+0x62b4>
   17594:	add	r8, r0, #1
   17598:	cmp	r6, r3
   1759c:	str	r8, [r5]
   175a0:	beq	175ac <__assert_fail@plt+0x6224>
   175a4:	mov	r0, r6
   175a8:	bl	13510 <__assert_fail@plt+0x2188>
   175ac:	mov	r0, r8
   175b0:	bl	18758 <__assert_fail@plt+0x73d0>
   175b4:	ldr	lr, [r4, #60]	; 0x3c
   175b8:	ldr	ip, [r4, #16]
   175bc:	mov	r3, sl
   175c0:	mov	r2, r9
   175c4:	mov	r1, r8
   175c8:	str	r0, [r5, #4]
   175cc:	ldr	r5, [r4, #56]	; 0x38
   175d0:	ldr	r4, [sp, #28]
   175d4:	str	fp, [sp, #8]
   175d8:	str	r4, [sp, #4]
   175dc:	str	lr, [sp, #16]
   175e0:	str	r5, [sp, #12]
   175e4:	str	ip, [sp]
   175e8:	mov	r6, r0
   175ec:	bl	13afc <__assert_fail@plt+0x2774>
   175f0:	ldr	r3, [sp, #24]
   175f4:	mov	r0, r6
   175f8:	str	r3, [r7]
   175fc:	add	sp, sp, #44	; 0x2c
   17600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17604:	mov	r3, #8
   17608:	str	r3, [sp]
   1760c:	add	r1, sp, #36	; 0x24
   17610:	rsb	r2, r2, #1
   17614:	mvn	r3, #-2147483648	; 0x80000000
   17618:	mov	r0, #0
   1761c:	bl	18974 <__assert_fail@plt+0x75ec>
   17620:	mov	r5, r0
   17624:	ldm	r6, {r0, r1}
   17628:	str	r5, [r4]
   1762c:	stm	r5, {r0, r1}
   17630:	b	17518 <__assert_fail@plt+0x6190>
   17634:	andeq	fp, r2, r0, lsr r1
   17638:	andeq	fp, r2, r8, asr #2
   1763c:	andeq	fp, r2, r4, lsr #4
   17640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17644:	sub	sp, sp, #44	; 0x2c
   17648:	mov	r5, r0
   1764c:	mov	sl, r1
   17650:	bl	11280 <__errno_location@plt>
   17654:	ldr	r4, [pc, #396]	; 177e8 <__assert_fail@plt+0x6460>
   17658:	cmn	r5, #-2147483647	; 0x80000001
   1765c:	ldr	r6, [r4]
   17660:	mov	r8, r0
   17664:	movne	r0, #0
   17668:	moveq	r0, #1
   1766c:	ldr	r3, [r8]
   17670:	orrs	r0, r0, r5, lsr #31
   17674:	str	r3, [sp, #24]
   17678:	bne	177e4 <__assert_fail@plt+0x645c>
   1767c:	ldr	r2, [r4, #4]
   17680:	cmp	r5, r2
   17684:	blt	176e4 <__assert_fail@plt+0x635c>
   17688:	add	r7, r4, #8
   1768c:	cmp	r6, r7
   17690:	str	r2, [sp, #36]	; 0x24
   17694:	beq	177b4 <__assert_fail@plt+0x642c>
   17698:	mov	r3, #8
   1769c:	sub	r2, r5, r2
   176a0:	mov	r0, r6
   176a4:	str	r3, [sp]
   176a8:	add	r2, r2, #1
   176ac:	mvn	r3, #-2147483648	; 0x80000000
   176b0:	add	r1, sp, #36	; 0x24
   176b4:	bl	18974 <__assert_fail@plt+0x75ec>
   176b8:	mov	r6, r0
   176bc:	str	r0, [r4]
   176c0:	ldr	r0, [r4, #4]
   176c4:	ldr	r2, [sp, #36]	; 0x24
   176c8:	mov	r1, #0
   176cc:	sub	r2, r2, r0
   176d0:	add	r0, r6, r0, lsl #3
   176d4:	lsl	r2, r2, #3
   176d8:	bl	112a4 <memset@plt>
   176dc:	ldr	r3, [sp, #36]	; 0x24
   176e0:	str	r3, [r4, #4]
   176e4:	ldr	r2, [r4, #56]	; 0x38
   176e8:	add	fp, r6, r5, lsl #3
   176ec:	ldr	r1, [r4, #20]
   176f0:	ldr	r9, [r6, r5, lsl #3]
   176f4:	ldr	r7, [fp, #4]
   176f8:	ldr	r3, [r4, #16]
   176fc:	ldr	ip, [r4, #60]	; 0x3c
   17700:	str	r2, [sp, #12]
   17704:	ldr	r2, [pc, #224]	; 177ec <__assert_fail@plt+0x6464>
   17708:	orr	r1, r1, #1
   1770c:	str	r1, [sp, #28]
   17710:	str	r1, [sp, #4]
   17714:	str	r2, [sp, #8]
   17718:	str	r3, [sp]
   1771c:	mov	r0, r7
   17720:	mov	r1, r9
   17724:	str	ip, [sp, #16]
   17728:	mvn	r3, #0
   1772c:	mov	r2, sl
   17730:	bl	13afc <__assert_fail@plt+0x2774>
   17734:	cmp	r9, r0
   17738:	bhi	177a0 <__assert_fail@plt+0x6418>
   1773c:	ldr	r3, [pc, #172]	; 177f0 <__assert_fail@plt+0x6468>
   17740:	add	r9, r0, #1
   17744:	cmp	r7, r3
   17748:	str	r9, [r6, r5, lsl #3]
   1774c:	beq	17758 <__assert_fail@plt+0x63d0>
   17750:	mov	r0, r7
   17754:	bl	13510 <__assert_fail@plt+0x2188>
   17758:	mov	r0, r9
   1775c:	bl	18758 <__assert_fail@plt+0x73d0>
   17760:	ldr	ip, [r4, #60]	; 0x3c
   17764:	ldr	r3, [r4, #16]
   17768:	ldr	lr, [r4, #56]	; 0x38
   1776c:	ldr	r4, [pc, #120]	; 177ec <__assert_fail@plt+0x6464>
   17770:	mov	r2, sl
   17774:	mov	r1, r9
   17778:	str	r0, [fp, #4]
   1777c:	str	r4, [sp, #8]
   17780:	ldr	r4, [sp, #28]
   17784:	str	r3, [sp]
   17788:	str	r4, [sp, #4]
   1778c:	str	ip, [sp, #16]
   17790:	str	lr, [sp, #12]
   17794:	mvn	r3, #0
   17798:	mov	r7, r0
   1779c:	bl	13afc <__assert_fail@plt+0x2774>
   177a0:	ldr	r3, [sp, #24]
   177a4:	mov	r0, r7
   177a8:	str	r3, [r8]
   177ac:	add	sp, sp, #44	; 0x2c
   177b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177b4:	mov	r3, #8
   177b8:	sub	r2, r5, r2
   177bc:	str	r3, [sp]
   177c0:	add	r1, sp, #36	; 0x24
   177c4:	add	r2, r2, #1
   177c8:	mvn	r3, #-2147483648	; 0x80000000
   177cc:	bl	18974 <__assert_fail@plt+0x75ec>
   177d0:	mov	r6, r0
   177d4:	ldm	r7, {r0, r1}
   177d8:	str	r6, [r4]
   177dc:	stm	r6, {r0, r1}
   177e0:	b	176c0 <__assert_fail@plt+0x6338>
   177e4:	bl	11370 <abort@plt>
   177e8:	andeq	fp, r2, r0, lsr r1
   177ec:	andeq	fp, r2, r8, asr #2
   177f0:	andeq	fp, r2, r4, lsr #4
   177f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177f8:	sub	sp, sp, #44	; 0x2c
   177fc:	mov	sl, r0
   17800:	bl	11280 <__errno_location@plt>
   17804:	ldr	r4, [pc, #348]	; 17968 <__assert_fail@plt+0x65e0>
   17808:	ldr	r2, [r4, #4]
   1780c:	ldr	r5, [r4]
   17810:	cmp	r2, #0
   17814:	ldr	r3, [r0]
   17818:	mov	r8, r0
   1781c:	str	r3, [sp, #28]
   17820:	bgt	1787c <__assert_fail@plt+0x64f4>
   17824:	add	r6, r4, #8
   17828:	cmp	r5, r6
   1782c:	str	r2, [sp, #36]	; 0x24
   17830:	beq	17938 <__assert_fail@plt+0x65b0>
   17834:	mov	r3, #8
   17838:	mov	r0, r5
   1783c:	str	r3, [sp]
   17840:	rsb	r2, r2, #1
   17844:	mvn	r3, #-2147483648	; 0x80000000
   17848:	add	r1, sp, #36	; 0x24
   1784c:	bl	18974 <__assert_fail@plt+0x75ec>
   17850:	mov	r5, r0
   17854:	str	r0, [r4]
   17858:	ldr	r0, [r4, #4]
   1785c:	ldr	r2, [sp, #36]	; 0x24
   17860:	mov	r1, #0
   17864:	sub	r2, r2, r0
   17868:	add	r0, r5, r0, lsl #3
   1786c:	lsl	r2, r2, #3
   17870:	bl	112a4 <memset@plt>
   17874:	ldr	r3, [sp, #36]	; 0x24
   17878:	str	r3, [r4, #4]
   1787c:	ldr	r7, [r4, #20]
   17880:	ldr	r9, [r5]
   17884:	ldr	r6, [r5, #4]
   17888:	ldr	r2, [r4, #56]	; 0x38
   1788c:	ldr	r3, [r4, #16]
   17890:	ldr	ip, [r4, #60]	; 0x3c
   17894:	ldr	fp, [pc, #208]	; 1796c <__assert_fail@plt+0x65e4>
   17898:	orr	r7, r7, #1
   1789c:	str	r2, [sp, #12]
   178a0:	str	r3, [sp]
   178a4:	str	r7, [sp, #4]
   178a8:	mov	r1, r9
   178ac:	mov	r0, r6
   178b0:	str	ip, [sp, #16]
   178b4:	str	fp, [sp, #8]
   178b8:	mvn	r3, #0
   178bc:	mov	r2, sl
   178c0:	bl	13afc <__assert_fail@plt+0x2774>
   178c4:	cmp	r9, r0
   178c8:	bhi	17924 <__assert_fail@plt+0x659c>
   178cc:	ldr	r3, [pc, #156]	; 17970 <__assert_fail@plt+0x65e8>
   178d0:	add	r9, r0, #1
   178d4:	cmp	r6, r3
   178d8:	str	r9, [r5]
   178dc:	beq	178e8 <__assert_fail@plt+0x6560>
   178e0:	mov	r0, r6
   178e4:	bl	13510 <__assert_fail@plt+0x2188>
   178e8:	mov	r0, r9
   178ec:	bl	18758 <__assert_fail@plt+0x73d0>
   178f0:	ldr	ip, [r4, #60]	; 0x3c
   178f4:	ldr	r3, [r4, #16]
   178f8:	ldr	lr, [r4, #56]	; 0x38
   178fc:	mov	r2, sl
   17900:	mov	r1, r9
   17904:	str	r0, [r5, #4]
   17908:	str	r3, [sp]
   1790c:	stmib	sp, {r7, fp}
   17910:	str	ip, [sp, #16]
   17914:	str	lr, [sp, #12]
   17918:	mvn	r3, #0
   1791c:	mov	r6, r0
   17920:	bl	13afc <__assert_fail@plt+0x2774>
   17924:	ldr	r3, [sp, #28]
   17928:	mov	r0, r6
   1792c:	str	r3, [r8]
   17930:	add	sp, sp, #44	; 0x2c
   17934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17938:	mov	r3, #8
   1793c:	str	r3, [sp]
   17940:	add	r1, sp, #36	; 0x24
   17944:	rsb	r2, r2, #1
   17948:	mvn	r3, #-2147483648	; 0x80000000
   1794c:	mov	r0, #0
   17950:	bl	18974 <__assert_fail@plt+0x75ec>
   17954:	mov	r5, r0
   17958:	ldm	r6, {r0, r1}
   1795c:	str	r5, [r4]
   17960:	stm	r5, {r0, r1}
   17964:	b	17858 <__assert_fail@plt+0x64d0>
   17968:	andeq	fp, r2, r0, lsr r1
   1796c:	andeq	fp, r2, r8, asr #2
   17970:	andeq	fp, r2, r4, lsr #4
   17974:	push	{r4, r5, r6, lr}
   17978:	mov	r4, r0
   1797c:	ldr	r3, [r0, #24]
   17980:	ldr	r6, [r0, #20]
   17984:	cmp	r3, r6
   17988:	sub	r5, r3, r6
   1798c:	ldrbeq	r2, [r0, #52]	; 0x34
   17990:	sub	r5, r5, #1
   17994:	orreq	r2, r2, #2
   17998:	strbeq	r2, [r0, #52]	; 0x34
   1799c:	ldr	r0, [r0, #36]	; 0x24
   179a0:	ldr	r1, [r4, #28]
   179a4:	ldr	r2, [r4, #16]
   179a8:	add	r3, r3, r0
   179ac:	bic	r3, r3, r0
   179b0:	sub	r0, r3, r2
   179b4:	sub	r2, r1, r2
   179b8:	cmp	r0, r2
   179bc:	str	r3, [r4, #24]
   179c0:	ldr	r2, [r4, #72]	; 0x48
   179c4:	movhi	r3, r1
   179c8:	strhi	r1, [r4, #24]
   179cc:	ldr	r1, [r4, #68]	; 0x44
   179d0:	str	r3, [r4, #20]
   179d4:	sub	r3, r2, r1
   179d8:	cmp	r3, #3
   179dc:	bls	17a34 <__assert_fail@plt+0x66ac>
   179e0:	str	r6, [r1]
   179e4:	ldr	r1, [r4, #112]	; 0x70
   179e8:	ldr	r2, [r4, #116]	; 0x74
   179ec:	ldr	r3, [r4, #68]	; 0x44
   179f0:	sub	r2, r2, r1
   179f4:	add	r3, r3, #4
   179f8:	cmp	r2, #3
   179fc:	str	r3, [r4, #68]	; 0x44
   17a00:	bhi	17a14 <__assert_fail@plt+0x668c>
   17a04:	mov	r1, #4
   17a08:	add	r0, r4, #100	; 0x64
   17a0c:	bl	19174 <_obstack_newchunk@@Base>
   17a10:	ldr	r1, [r4, #112]	; 0x70
   17a14:	str	r5, [r1]
   17a18:	ldr	r2, [r4, #112]	; 0x70
   17a1c:	ldr	r3, [r4]
   17a20:	add	r2, r2, #4
   17a24:	add	r3, r3, #1
   17a28:	str	r2, [r4, #112]	; 0x70
   17a2c:	str	r3, [r4]
   17a30:	pop	{r4, r5, r6, pc}
   17a34:	mov	r1, #4
   17a38:	add	r0, r4, #56	; 0x38
   17a3c:	bl	19174 <_obstack_newchunk@@Base>
   17a40:	ldr	r1, [r4, #68]	; 0x44
   17a44:	b	179e0 <__assert_fail@plt+0x6658>
   17a48:	push	{r4, r5, r6, r7, lr}
   17a4c:	sub	sp, sp, #12
   17a50:	ldr	r6, [pc, #100]	; 17abc <__assert_fail@plt+0x6734>
   17a54:	ldr	r7, [pc, #100]	; 17ac0 <__assert_fail@plt+0x6738>
   17a58:	mov	r4, #0
   17a5c:	mov	r5, r0
   17a60:	str	r4, [r0]
   17a64:	str	r4, [r0, #4]
   17a68:	str	r4, [r0, #8]
   17a6c:	mov	r2, r4
   17a70:	mov	r1, r4
   17a74:	mov	r3, r6
   17a78:	str	r7, [sp]
   17a7c:	add	r0, r0, #12
   17a80:	bl	18fe0 <_obstack_begin@@Base>
   17a84:	mov	r3, r6
   17a88:	mov	r2, r4
   17a8c:	mov	r1, r4
   17a90:	str	r7, [sp]
   17a94:	add	r0, r5, #56	; 0x38
   17a98:	bl	18fe0 <_obstack_begin@@Base>
   17a9c:	str	r7, [sp]
   17aa0:	mov	r3, r6
   17aa4:	add	r0, r5, #100	; 0x64
   17aa8:	mov	r2, r4
   17aac:	mov	r1, r4
   17ab0:	bl	18fe0 <_obstack_begin@@Base>
   17ab4:	add	sp, sp, #12
   17ab8:	pop	{r4, r5, r6, r7, pc}
   17abc:	andeq	r8, r1, r0, lsl #28
   17ac0:	andeq	r3, r1, r0, lsl r5
   17ac4:	push	{r4, lr}
   17ac8:	mov	r1, #0
   17acc:	mov	r4, r0
   17ad0:	add	r0, r0, #12
   17ad4:	bl	19304 <_obstack_free@@Base>
   17ad8:	add	r0, r4, #56	; 0x38
   17adc:	mov	r1, #0
   17ae0:	bl	19304 <_obstack_free@@Base>
   17ae4:	add	r0, r4, #100	; 0x64
   17ae8:	mov	r1, #0
   17aec:	pop	{r4, lr}
   17af0:	b	19304 <_obstack_free@@Base>
   17af4:	push	{r4, r5, r6, r7, r8, lr}
   17af8:	mov	r4, r1
   17afc:	mov	r6, r0
   17b00:	add	r8, r1, #12
   17b04:	mov	r7, #1
   17b08:	b	17b20 <__assert_fail@plt+0x6798>
   17b0c:	add	r2, r3, #1
   17b10:	cmp	r5, #0
   17b14:	str	r2, [r4, #24]
   17b18:	strb	r5, [r3]
   17b1c:	beq	17c58 <__assert_fail@plt+0x68d0>
   17b20:	mov	r0, r6
   17b24:	bl	112bc <fgetc@plt>
   17b28:	ldr	r3, [r4, #24]
   17b2c:	cmn	r0, #1
   17b30:	mov	r5, r0
   17b34:	beq	17b58 <__assert_fail@plt+0x67d0>
   17b38:	ldr	r2, [r4, #28]
   17b3c:	cmp	r2, r3
   17b40:	bne	17b0c <__assert_fail@plt+0x6784>
   17b44:	mov	r1, r7
   17b48:	mov	r0, r8
   17b4c:	bl	19174 <_obstack_newchunk@@Base>
   17b50:	ldr	r3, [r4, #24]
   17b54:	b	17b0c <__assert_fail@plt+0x6784>
   17b58:	ldr	r2, [r4, #20]
   17b5c:	cmp	r2, r3
   17b60:	beq	17b88 <__assert_fail@plt+0x6800>
   17b64:	ldr	r2, [r4, #28]
   17b68:	cmp	r2, r3
   17b6c:	beq	17c78 <__assert_fail@plt+0x68f0>
   17b70:	add	r1, r3, #1
   17b74:	mov	r2, #0
   17b78:	str	r1, [r4, #24]
   17b7c:	mov	r0, r4
   17b80:	strb	r2, [r3]
   17b84:	bl	17974 <__assert_fail@plt+0x65ec>
   17b88:	ldr	r2, [r4, #68]	; 0x44
   17b8c:	ldr	r3, [r4, #72]	; 0x48
   17b90:	sub	r3, r3, r2
   17b94:	cmp	r3, #3
   17b98:	bls	17c64 <__assert_fail@plt+0x68dc>
   17b9c:	mov	r3, #0
   17ba0:	str	r3, [r2]
   17ba4:	ldr	r3, [r4, #68]	; 0x44
   17ba8:	ldr	r1, [r4, #64]	; 0x40
   17bac:	add	r3, r3, #4
   17bb0:	cmp	r3, r1
   17bb4:	ldr	r0, [r4, #80]	; 0x50
   17bb8:	ldrbeq	r2, [r4, #96]	; 0x60
   17bbc:	ldr	ip, [r4, #72]	; 0x48
   17bc0:	str	r3, [r4, #68]	; 0x44
   17bc4:	orreq	r2, r2, #2
   17bc8:	strbeq	r2, [r4, #96]	; 0x60
   17bcc:	add	r3, r3, r0
   17bd0:	ldr	r2, [r4, #60]	; 0x3c
   17bd4:	bic	r3, r3, r0
   17bd8:	sub	r0, r3, r2
   17bdc:	sub	r2, ip, r2
   17be0:	cmp	r0, r2
   17be4:	ldr	r2, [r4, #112]	; 0x70
   17be8:	ldr	r0, [r4, #108]	; 0x6c
   17bec:	str	r3, [r4, #68]	; 0x44
   17bf0:	movhi	r3, ip
   17bf4:	strhi	ip, [r4, #68]	; 0x44
   17bf8:	cmp	r0, r2
   17bfc:	str	r3, [r4, #64]	; 0x40
   17c00:	ldrbeq	r3, [r4, #140]	; 0x8c
   17c04:	ldr	ip, [r4, #124]	; 0x7c
   17c08:	str	r1, [r4, #4]
   17c0c:	orreq	r3, r3, #2
   17c10:	strbeq	r3, [r4, #140]	; 0x8c
   17c14:	ldr	r1, [r4, #104]	; 0x68
   17c18:	add	r3, r2, ip
   17c1c:	ldr	r2, [r4, #116]	; 0x74
   17c20:	bic	r3, r3, ip
   17c24:	sub	ip, r3, r1
   17c28:	sub	r1, r2, r1
   17c2c:	cmp	ip, r1
   17c30:	str	r3, [r4, #112]	; 0x70
   17c34:	movhi	r3, r2
   17c38:	str	r0, [r4, #8]
   17c3c:	strhi	r2, [r4, #112]	; 0x70
   17c40:	str	r3, [r4, #108]	; 0x6c
   17c44:	mov	r0, r6
   17c48:	bl	110dc <ferror@plt>
   17c4c:	clz	r0, r0
   17c50:	lsr	r0, r0, #5
   17c54:	pop	{r4, r5, r6, r7, r8, pc}
   17c58:	mov	r0, r4
   17c5c:	bl	17974 <__assert_fail@plt+0x65ec>
   17c60:	b	17b20 <__assert_fail@plt+0x6798>
   17c64:	mov	r1, #4
   17c68:	add	r0, r4, #56	; 0x38
   17c6c:	bl	19174 <_obstack_newchunk@@Base>
   17c70:	ldr	r2, [r4, #68]	; 0x44
   17c74:	b	17b9c <__assert_fail@plt+0x6814>
   17c78:	mov	r1, #1
   17c7c:	add	r0, r4, #12
   17c80:	bl	19174 <_obstack_newchunk@@Base>
   17c84:	ldr	r3, [r4, #24]
   17c88:	b	17b70 <__assert_fail@plt+0x67e8>
   17c8c:	push	{r4, r5, r6, r7, r8, lr}
   17c90:	mov	r8, r0
   17c94:	ldr	r5, [pc, #84]	; 17cf0 <__assert_fail@plt+0x6968>
   17c98:	mov	r7, r1
   17c9c:	mov	r4, r2
   17ca0:	mov	r2, r4
   17ca4:	mov	r1, r7
   17ca8:	mov	r0, r8
   17cac:	bl	110a0 <read@plt>
   17cb0:	subs	r6, r0, #0
   17cb4:	bge	17ce8 <__assert_fail@plt+0x6960>
   17cb8:	bl	11280 <__errno_location@plt>
   17cbc:	ldr	r3, [r0]
   17cc0:	cmp	r3, #4
   17cc4:	beq	17ca0 <__assert_fail@plt+0x6918>
   17cc8:	cmp	r4, r5
   17ccc:	movls	r2, #0
   17cd0:	movhi	r2, #1
   17cd4:	cmp	r3, #22
   17cd8:	movne	r2, #0
   17cdc:	cmp	r2, #0
   17ce0:	mov	r4, r5
   17ce4:	bne	17ca0 <__assert_fail@plt+0x6918>
   17ce8:	mov	r0, r6
   17cec:	pop	{r4, r5, r6, r7, r8, pc}
   17cf0:	svcvc	0x00f00000	; IMB
   17cf4:	push	{r4, r5, r6, lr}
   17cf8:	sub	sp, sp, #32
   17cfc:	cmp	r1, #0
   17d00:	mov	r4, r0
   17d04:	ldr	r5, [sp, #48]	; 0x30
   17d08:	ldr	r6, [sp, #52]	; 0x34
   17d0c:	beq	18024 <__assert_fail@plt+0x6c9c>
   17d10:	stm	sp, {r2, r3}
   17d14:	mov	r3, r1
   17d18:	ldr	r2, [pc, #808]	; 18048 <__assert_fail@plt+0x6cc0>
   17d1c:	mov	r1, #1
   17d20:	bl	112e0 <__fprintf_chk@plt>
   17d24:	mov	r2, #5
   17d28:	ldr	r1, [pc, #796]	; 1804c <__assert_fail@plt+0x6cc4>
   17d2c:	mov	r0, #0
   17d30:	bl	11124 <dcgettext@plt>
   17d34:	ldr	r3, [pc, #788]	; 18050 <__assert_fail@plt+0x6cc8>
   17d38:	ldr	r2, [pc, #788]	; 18054 <__assert_fail@plt+0x6ccc>
   17d3c:	str	r3, [sp]
   17d40:	mov	r1, #1
   17d44:	mov	r3, r0
   17d48:	mov	r0, r4
   17d4c:	bl	112e0 <__fprintf_chk@plt>
   17d50:	mov	r1, r4
   17d54:	mov	r0, #10
   17d58:	bl	11118 <fputc_unlocked@plt>
   17d5c:	mov	r2, #5
   17d60:	ldr	r1, [pc, #752]	; 18058 <__assert_fail@plt+0x6cd0>
   17d64:	mov	r0, #0
   17d68:	bl	11124 <dcgettext@plt>
   17d6c:	mov	r1, #1
   17d70:	ldr	r3, [pc, #740]	; 1805c <__assert_fail@plt+0x6cd4>
   17d74:	mov	r2, r0
   17d78:	mov	r0, r4
   17d7c:	bl	112e0 <__fprintf_chk@plt>
   17d80:	mov	r1, r4
   17d84:	mov	r0, #10
   17d88:	bl	11118 <fputc_unlocked@plt>
   17d8c:	cmp	r6, #9
   17d90:	ldrls	pc, [pc, r6, lsl #2]
   17d94:	b	1803c <__assert_fail@plt+0x6cb4>
   17d98:	andeq	r7, r1, ip, lsl lr
   17d9c:	andeq	r7, r1, r4, lsr #28
   17da0:	andeq	r7, r1, r0, asr lr
   17da4:	andeq	r7, r1, r4, lsl #29
   17da8:	andeq	r7, r1, r0, asr #29
   17dac:	strdeq	r7, [r1], -ip
   17db0:	andeq	r7, r1, r8, lsr pc
   17db4:	andeq	r7, r1, ip, ror pc
   17db8:	andeq	r7, r1, ip, asr #31
   17dbc:	andeq	r7, r1, r0, asr #27
   17dc0:	ldr	r1, [pc, #664]	; 18060 <__assert_fail@plt+0x6cd8>
   17dc4:	mov	r2, #5
   17dc8:	mov	r0, #0
   17dcc:	bl	11124 <dcgettext@plt>
   17dd0:	ldr	ip, [r5, #32]
   17dd4:	ldr	r1, [r5, #28]
   17dd8:	ldr	r2, [r5, #24]
   17ddc:	ldr	r3, [r5]
   17de0:	ldr	r6, [r5, #20]
   17de4:	str	ip, [sp, #28]
   17de8:	ldr	lr, [r5, #16]
   17dec:	str	r1, [sp, #24]
   17df0:	ldr	ip, [r5, #12]
   17df4:	str	r2, [sp, #20]
   17df8:	ldr	r1, [r5, #8]
   17dfc:	ldr	r2, [r5, #4]
   17e00:	str	r6, [sp, #16]
   17e04:	stmib	sp, {r1, ip, lr}
   17e08:	mov	r1, #1
   17e0c:	str	r2, [sp]
   17e10:	mov	r2, r0
   17e14:	mov	r0, r4
   17e18:	bl	112e0 <__fprintf_chk@plt>
   17e1c:	add	sp, sp, #32
   17e20:	pop	{r4, r5, r6, pc}
   17e24:	mov	r2, #5
   17e28:	ldr	r1, [pc, #564]	; 18064 <__assert_fail@plt+0x6cdc>
   17e2c:	mov	r0, #0
   17e30:	bl	11124 <dcgettext@plt>
   17e34:	ldr	r3, [r5]
   17e38:	mov	r1, #1
   17e3c:	mov	r2, r0
   17e40:	mov	r0, r4
   17e44:	add	sp, sp, #32
   17e48:	pop	{r4, r5, r6, lr}
   17e4c:	b	112e0 <__fprintf_chk@plt>
   17e50:	mov	r2, #5
   17e54:	ldr	r1, [pc, #524]	; 18068 <__assert_fail@plt+0x6ce0>
   17e58:	mov	r0, #0
   17e5c:	bl	11124 <dcgettext@plt>
   17e60:	ldr	r2, [r5, #4]
   17e64:	ldr	r3, [r5]
   17e68:	mov	r1, #1
   17e6c:	str	r2, [sp, #48]	; 0x30
   17e70:	mov	r2, r0
   17e74:	mov	r0, r4
   17e78:	add	sp, sp, #32
   17e7c:	pop	{r4, r5, r6, lr}
   17e80:	b	112e0 <__fprintf_chk@plt>
   17e84:	mov	r2, #5
   17e88:	ldr	r1, [pc, #476]	; 1806c <__assert_fail@plt+0x6ce4>
   17e8c:	mov	r0, #0
   17e90:	bl	11124 <dcgettext@plt>
   17e94:	ldr	r1, [r5, #8]
   17e98:	ldr	r2, [r5, #4]
   17e9c:	ldr	r3, [r5]
   17ea0:	str	r1, [sp, #52]	; 0x34
   17ea4:	str	r2, [sp, #48]	; 0x30
   17ea8:	mov	r1, #1
   17eac:	mov	r2, r0
   17eb0:	mov	r0, r4
   17eb4:	add	sp, sp, #32
   17eb8:	pop	{r4, r5, r6, lr}
   17ebc:	b	112e0 <__fprintf_chk@plt>
   17ec0:	mov	r2, #5
   17ec4:	ldr	r1, [pc, #420]	; 18070 <__assert_fail@plt+0x6ce8>
   17ec8:	mov	r0, #0
   17ecc:	bl	11124 <dcgettext@plt>
   17ed0:	ldr	r1, [r5, #8]
   17ed4:	ldr	ip, [r5, #12]
   17ed8:	ldr	r2, [r5, #4]
   17edc:	ldr	r3, [r5]
   17ee0:	stmib	sp, {r1, ip}
   17ee4:	str	r2, [sp]
   17ee8:	mov	r1, #1
   17eec:	mov	r2, r0
   17ef0:	mov	r0, r4
   17ef4:	bl	112e0 <__fprintf_chk@plt>
   17ef8:	b	17e1c <__assert_fail@plt+0x6a94>
   17efc:	mov	r2, #5
   17f00:	ldr	r1, [pc, #364]	; 18074 <__assert_fail@plt+0x6cec>
   17f04:	mov	r0, #0
   17f08:	bl	11124 <dcgettext@plt>
   17f0c:	add	r1, r5, #8
   17f10:	ldr	r2, [r5, #4]
   17f14:	ldm	r1, {r1, ip, lr}
   17f18:	ldr	r3, [r5]
   17f1c:	str	r2, [sp]
   17f20:	stmib	sp, {r1, ip, lr}
   17f24:	mov	r1, #1
   17f28:	mov	r2, r0
   17f2c:	mov	r0, r4
   17f30:	bl	112e0 <__fprintf_chk@plt>
   17f34:	b	17e1c <__assert_fail@plt+0x6a94>
   17f38:	mov	r2, #5
   17f3c:	ldr	r1, [pc, #308]	; 18078 <__assert_fail@plt+0x6cf0>
   17f40:	mov	r0, #0
   17f44:	bl	11124 <dcgettext@plt>
   17f48:	add	r1, r5, #8
   17f4c:	ldr	r2, [r5, #4]
   17f50:	ldm	r1, {r1, ip, lr}
   17f54:	ldr	r6, [r5, #20]
   17f58:	ldr	r3, [r5]
   17f5c:	stmib	sp, {r1, ip, lr}
   17f60:	mov	r1, #1
   17f64:	str	r2, [sp]
   17f68:	str	r6, [sp, #16]
   17f6c:	mov	r2, r0
   17f70:	mov	r0, r4
   17f74:	bl	112e0 <__fprintf_chk@plt>
   17f78:	b	17e1c <__assert_fail@plt+0x6a94>
   17f7c:	mov	r2, #5
   17f80:	ldr	r1, [pc, #244]	; 1807c <__assert_fail@plt+0x6cf4>
   17f84:	mov	r0, #0
   17f88:	bl	11124 <dcgettext@plt>
   17f8c:	ldr	r2, [r5, #24]
   17f90:	ldr	r3, [r5]
   17f94:	ldr	r6, [r5, #20]
   17f98:	ldr	lr, [r5, #16]
   17f9c:	ldr	ip, [r5, #12]
   17fa0:	str	r2, [sp, #20]
   17fa4:	ldr	r1, [r5, #8]
   17fa8:	ldr	r2, [r5, #4]
   17fac:	str	r6, [sp, #16]
   17fb0:	stmib	sp, {r1, ip, lr}
   17fb4:	mov	r1, #1
   17fb8:	str	r2, [sp]
   17fbc:	mov	r2, r0
   17fc0:	mov	r0, r4
   17fc4:	bl	112e0 <__fprintf_chk@plt>
   17fc8:	b	17e1c <__assert_fail@plt+0x6a94>
   17fcc:	mov	r2, #5
   17fd0:	ldr	r1, [pc, #168]	; 18080 <__assert_fail@plt+0x6cf8>
   17fd4:	mov	r0, #0
   17fd8:	bl	11124 <dcgettext@plt>
   17fdc:	ldr	r1, [r5, #28]
   17fe0:	ldr	r2, [r5, #24]
   17fe4:	ldr	r3, [r5]
   17fe8:	ldr	r6, [r5, #20]
   17fec:	ldr	lr, [r5, #16]
   17ff0:	str	r1, [sp, #24]
   17ff4:	ldr	ip, [r5, #12]
   17ff8:	str	r2, [sp, #20]
   17ffc:	ldr	r1, [r5, #8]
   18000:	ldr	r2, [r5, #4]
   18004:	str	r6, [sp, #16]
   18008:	stmib	sp, {r1, ip, lr}
   1800c:	mov	r1, #1
   18010:	str	r2, [sp]
   18014:	mov	r2, r0
   18018:	mov	r0, r4
   1801c:	bl	112e0 <__fprintf_chk@plt>
   18020:	b	17e1c <__assert_fail@plt+0x6a94>
   18024:	str	r3, [sp]
   18028:	mov	r1, #1
   1802c:	mov	r3, r2
   18030:	ldr	r2, [pc, #76]	; 18084 <__assert_fail@plt+0x6cfc>
   18034:	bl	112e0 <__fprintf_chk@plt>
   18038:	b	17d24 <__assert_fail@plt+0x699c>
   1803c:	mov	r2, #5
   18040:	ldr	r1, [pc, #64]	; 18088 <__assert_fail@plt+0x6d00>
   18044:	b	17dc8 <__assert_fail@plt+0x6a40>
   18048:	andeq	sl, r1, r8, ror r8
   1804c:	andeq	sl, r1, ip, lsl #17
   18050:	andeq	r0, r0, r6, ror #15
   18054:	andeq	sl, r1, r4, ror #22
   18058:	muleq	r1, r0, r8
   1805c:	andeq	sl, r1, ip, lsr r9
   18060:	andeq	sl, r1, ip, ror #20
   18064:	andeq	sl, r1, r0, ror #18
   18068:	andeq	sl, r1, r0, ror r9
   1806c:	andeq	sl, r1, r8, lsl #19
   18070:	andeq	sl, r1, r4, lsr #19
   18074:	andeq	sl, r1, r4, asr #19
   18078:	andeq	sl, r1, r8, ror #19
   1807c:	andeq	sl, r1, r0, lsl sl
   18080:	andeq	sl, r1, ip, lsr sl
   18084:	andeq	sl, r1, r4, lsl #17
   18088:	andeq	sl, r1, r0, lsr #21
   1808c:	push	{r4, r5, lr}
   18090:	sub	sp, sp, #12
   18094:	ldr	r5, [sp, #24]
   18098:	ldr	ip, [r5]
   1809c:	cmp	ip, #0
   180a0:	beq	180bc <__assert_fail@plt+0x6d34>
   180a4:	mov	lr, r5
   180a8:	mov	ip, #0
   180ac:	ldr	r4, [lr, #4]!
   180b0:	add	ip, ip, #1
   180b4:	cmp	r4, #0
   180b8:	bne	180ac <__assert_fail@plt+0x6d24>
   180bc:	stm	sp, {r5, ip}
   180c0:	bl	17cf4 <__assert_fail@plt+0x696c>
   180c4:	add	sp, sp, #12
   180c8:	pop	{r4, r5, pc}
   180cc:	push	{r4, r5, lr}
   180d0:	sub	sp, sp, #76	; 0x4c
   180d4:	mov	r5, r0
   180d8:	ldr	ip, [sp, #88]	; 0x58
   180dc:	ldr	r0, [ip]
   180e0:	cmp	r0, #0
   180e4:	str	r0, [sp, #32]
   180e8:	beq	184bc <__assert_fail@plt+0x7134>
   180ec:	ldr	r0, [ip, #4]
   180f0:	cmp	r0, #0
   180f4:	str	r0, [sp, #36]	; 0x24
   180f8:	beq	184c4 <__assert_fail@plt+0x713c>
   180fc:	ldr	r0, [ip, #8]
   18100:	cmp	r0, #0
   18104:	str	r0, [sp, #40]	; 0x28
   18108:	beq	184cc <__assert_fail@plt+0x7144>
   1810c:	ldr	r0, [ip, #12]
   18110:	cmp	r0, #0
   18114:	str	r0, [sp, #44]	; 0x2c
   18118:	beq	184d4 <__assert_fail@plt+0x714c>
   1811c:	ldr	r0, [ip, #16]
   18120:	cmp	r0, #0
   18124:	str	r0, [sp, #48]	; 0x30
   18128:	beq	184dc <__assert_fail@plt+0x7154>
   1812c:	ldr	r0, [ip, #20]
   18130:	cmp	r0, #0
   18134:	str	r0, [sp, #52]	; 0x34
   18138:	beq	184e4 <__assert_fail@plt+0x715c>
   1813c:	ldr	r0, [ip, #24]
   18140:	cmp	r0, #0
   18144:	str	r0, [sp, #56]	; 0x38
   18148:	beq	184ec <__assert_fail@plt+0x7164>
   1814c:	ldr	r0, [ip, #28]
   18150:	cmp	r0, #0
   18154:	str	r0, [sp, #60]	; 0x3c
   18158:	beq	184f4 <__assert_fail@plt+0x716c>
   1815c:	ldr	r0, [ip, #32]
   18160:	cmp	r0, #0
   18164:	str	r0, [sp, #64]	; 0x40
   18168:	beq	184fc <__assert_fail@plt+0x7174>
   1816c:	ldr	r0, [ip, #36]	; 0x24
   18170:	cmp	r0, #0
   18174:	movne	r4, #10
   18178:	moveq	r4, #9
   1817c:	cmp	r1, #0
   18180:	beq	18494 <__assert_fail@plt+0x710c>
   18184:	stm	sp, {r2, r3}
   18188:	mov	r0, r5
   1818c:	mov	r3, r1
   18190:	ldr	r2, [pc, #876]	; 18504 <__assert_fail@plt+0x717c>
   18194:	mov	r1, #1
   18198:	bl	112e0 <__fprintf_chk@plt>
   1819c:	mov	r2, #5
   181a0:	ldr	r1, [pc, #864]	; 18508 <__assert_fail@plt+0x7180>
   181a4:	mov	r0, #0
   181a8:	bl	11124 <dcgettext@plt>
   181ac:	ldr	r3, [pc, #856]	; 1850c <__assert_fail@plt+0x7184>
   181b0:	ldr	r2, [pc, #856]	; 18510 <__assert_fail@plt+0x7188>
   181b4:	str	r3, [sp]
   181b8:	mov	r1, #1
   181bc:	mov	r3, r0
   181c0:	mov	r0, r5
   181c4:	bl	112e0 <__fprintf_chk@plt>
   181c8:	mov	r1, r5
   181cc:	mov	r0, #10
   181d0:	bl	11118 <fputc_unlocked@plt>
   181d4:	mov	r2, #5
   181d8:	ldr	r1, [pc, #820]	; 18514 <__assert_fail@plt+0x718c>
   181dc:	mov	r0, #0
   181e0:	bl	11124 <dcgettext@plt>
   181e4:	mov	r1, #1
   181e8:	ldr	r3, [pc, #808]	; 18518 <__assert_fail@plt+0x7190>
   181ec:	mov	r2, r0
   181f0:	mov	r0, r5
   181f4:	bl	112e0 <__fprintf_chk@plt>
   181f8:	mov	r1, r5
   181fc:	mov	r0, #10
   18200:	bl	11118 <fputc_unlocked@plt>
   18204:	cmp	r4, #9
   18208:	ldrls	pc, [pc, r4, lsl #2]
   1820c:	b	184b0 <__assert_fail@plt+0x7128>
   18210:	muleq	r1, r4, r2
   18214:	muleq	r1, ip, r2
   18218:	andeq	r8, r1, r8, asr #5
   1821c:	strdeq	r8, [r1], -ip
   18220:	andeq	r8, r1, r4, lsr r3
   18224:	andeq	r8, r1, r0, ror r3
   18228:	andeq	r8, r1, ip, lsr #7
   1822c:	strdeq	r8, [r1], -r0
   18230:	andeq	r8, r1, ip, lsr r4
   18234:	andeq	r8, r1, r8, lsr r2
   18238:	ldr	r1, [pc, #732]	; 1851c <__assert_fail@plt+0x7194>
   1823c:	mov	r2, #5
   18240:	mov	r0, #0
   18244:	bl	11124 <dcgettext@plt>
   18248:	ldr	ip, [sp, #64]	; 0x40
   1824c:	ldr	r1, [sp, #60]	; 0x3c
   18250:	ldr	r2, [sp, #56]	; 0x38
   18254:	ldr	lr, [sp, #48]	; 0x30
   18258:	str	ip, [sp, #28]
   1825c:	str	r1, [sp, #24]
   18260:	ldr	ip, [sp, #44]	; 0x2c
   18264:	ldr	r1, [sp, #40]	; 0x28
   18268:	ldr	r4, [sp, #52]	; 0x34
   1826c:	str	r2, [sp, #20]
   18270:	ldr	r2, [sp, #36]	; 0x24
   18274:	stmib	sp, {r1, ip, lr}
   18278:	mov	r1, #1
   1827c:	str	r2, [sp]
   18280:	ldr	r3, [sp, #32]
   18284:	str	r4, [sp, #16]
   18288:	mov	r2, r0
   1828c:	mov	r0, r5
   18290:	bl	112e0 <__fprintf_chk@plt>
   18294:	add	sp, sp, #76	; 0x4c
   18298:	pop	{r4, r5, pc}
   1829c:	mov	r2, #5
   182a0:	ldr	r1, [pc, #632]	; 18520 <__assert_fail@plt+0x7198>
   182a4:	mov	r0, #0
   182a8:	bl	11124 <dcgettext@plt>
   182ac:	ldr	r3, [sp, #32]
   182b0:	mov	r1, #1
   182b4:	mov	r2, r0
   182b8:	mov	r0, r5
   182bc:	add	sp, sp, #76	; 0x4c
   182c0:	pop	{r4, r5, lr}
   182c4:	b	112e0 <__fprintf_chk@plt>
   182c8:	mov	r2, #5
   182cc:	ldr	r1, [pc, #592]	; 18524 <__assert_fail@plt+0x719c>
   182d0:	mov	r0, #0
   182d4:	bl	11124 <dcgettext@plt>
   182d8:	ldr	r2, [sp, #36]	; 0x24
   182dc:	ldr	r3, [sp, #32]
   182e0:	str	r2, [sp, #88]	; 0x58
   182e4:	mov	r1, #1
   182e8:	mov	r2, r0
   182ec:	mov	r0, r5
   182f0:	add	sp, sp, #76	; 0x4c
   182f4:	pop	{r4, r5, lr}
   182f8:	b	112e0 <__fprintf_chk@plt>
   182fc:	mov	r2, #5
   18300:	ldr	r1, [pc, #544]	; 18528 <__assert_fail@plt+0x71a0>
   18304:	mov	r0, #0
   18308:	bl	11124 <dcgettext@plt>
   1830c:	ldr	r1, [sp, #40]	; 0x28
   18310:	ldr	r2, [sp, #36]	; 0x24
   18314:	str	r1, [sp, #4]
   18318:	str	r2, [sp]
   1831c:	ldr	r3, [sp, #32]
   18320:	mov	r1, #1
   18324:	mov	r2, r0
   18328:	mov	r0, r5
   1832c:	bl	112e0 <__fprintf_chk@plt>
   18330:	b	18294 <__assert_fail@plt+0x6f0c>
   18334:	mov	r2, #5
   18338:	ldr	r1, [pc, #492]	; 1852c <__assert_fail@plt+0x71a4>
   1833c:	mov	r0, #0
   18340:	bl	11124 <dcgettext@plt>
   18344:	ldr	r1, [sp, #40]	; 0x28
   18348:	ldr	ip, [sp, #44]	; 0x2c
   1834c:	ldr	r2, [sp, #36]	; 0x24
   18350:	ldr	r3, [sp, #32]
   18354:	stmib	sp, {r1, ip}
   18358:	str	r2, [sp]
   1835c:	mov	r1, #1
   18360:	mov	r2, r0
   18364:	mov	r0, r5
   18368:	bl	112e0 <__fprintf_chk@plt>
   1836c:	b	18294 <__assert_fail@plt+0x6f0c>
   18370:	mov	r2, #5
   18374:	ldr	r1, [pc, #436]	; 18530 <__assert_fail@plt+0x71a8>
   18378:	mov	r0, #0
   1837c:	bl	11124 <dcgettext@plt>
   18380:	add	r1, sp, #40	; 0x28
   18384:	ldr	r2, [sp, #36]	; 0x24
   18388:	ldm	r1, {r1, ip, lr}
   1838c:	ldr	r3, [sp, #32]
   18390:	str	r2, [sp]
   18394:	stmib	sp, {r1, ip, lr}
   18398:	mov	r1, #1
   1839c:	mov	r2, r0
   183a0:	mov	r0, r5
   183a4:	bl	112e0 <__fprintf_chk@plt>
   183a8:	b	18294 <__assert_fail@plt+0x6f0c>
   183ac:	mov	r2, #5
   183b0:	ldr	r1, [pc, #380]	; 18534 <__assert_fail@plt+0x71ac>
   183b4:	mov	r0, #0
   183b8:	bl	11124 <dcgettext@plt>
   183bc:	add	r1, sp, #40	; 0x28
   183c0:	ldr	r2, [sp, #36]	; 0x24
   183c4:	ldm	r1, {r1, ip, lr}
   183c8:	ldr	r4, [sp, #52]	; 0x34
   183cc:	str	r2, [sp]
   183d0:	stmib	sp, {r1, ip, lr}
   183d4:	mov	r1, #1
   183d8:	ldr	r3, [sp, #32]
   183dc:	str	r4, [sp, #16]
   183e0:	mov	r2, r0
   183e4:	mov	r0, r5
   183e8:	bl	112e0 <__fprintf_chk@plt>
   183ec:	b	18294 <__assert_fail@plt+0x6f0c>
   183f0:	mov	r2, #5
   183f4:	ldr	r1, [pc, #316]	; 18538 <__assert_fail@plt+0x71b0>
   183f8:	mov	r0, #0
   183fc:	bl	11124 <dcgettext@plt>
   18400:	add	r1, sp, #40	; 0x28
   18404:	ldr	r2, [sp, #56]	; 0x38
   18408:	ldm	r1, {r1, ip, lr}
   1840c:	ldr	r4, [sp, #52]	; 0x34
   18410:	str	r2, [sp, #20]
   18414:	ldr	r2, [sp, #36]	; 0x24
   18418:	stmib	sp, {r1, ip, lr}
   1841c:	mov	r1, #1
   18420:	str	r2, [sp]
   18424:	ldr	r3, [sp, #32]
   18428:	str	r4, [sp, #16]
   1842c:	mov	r2, r0
   18430:	mov	r0, r5
   18434:	bl	112e0 <__fprintf_chk@plt>
   18438:	b	18294 <__assert_fail@plt+0x6f0c>
   1843c:	mov	r2, #5
   18440:	ldr	r1, [pc, #244]	; 1853c <__assert_fail@plt+0x71b4>
   18444:	mov	r0, #0
   18448:	bl	11124 <dcgettext@plt>
   1844c:	ldr	r1, [sp, #60]	; 0x3c
   18450:	ldr	r2, [sp, #56]	; 0x38
   18454:	ldr	lr, [sp, #48]	; 0x30
   18458:	ldr	ip, [sp, #44]	; 0x2c
   1845c:	str	r1, [sp, #24]
   18460:	ldr	r1, [sp, #40]	; 0x28
   18464:	ldr	r4, [sp, #52]	; 0x34
   18468:	str	r2, [sp, #20]
   1846c:	ldr	r2, [sp, #36]	; 0x24
   18470:	stmib	sp, {r1, ip, lr}
   18474:	mov	r1, #1
   18478:	str	r2, [sp]
   1847c:	ldr	r3, [sp, #32]
   18480:	str	r4, [sp, #16]
   18484:	mov	r2, r0
   18488:	mov	r0, r5
   1848c:	bl	112e0 <__fprintf_chk@plt>
   18490:	b	18294 <__assert_fail@plt+0x6f0c>
   18494:	str	r3, [sp]
   18498:	mov	r1, #1
   1849c:	mov	r3, r2
   184a0:	mov	r0, r5
   184a4:	ldr	r2, [pc, #148]	; 18540 <__assert_fail@plt+0x71b8>
   184a8:	bl	112e0 <__fprintf_chk@plt>
   184ac:	b	1819c <__assert_fail@plt+0x6e14>
   184b0:	mov	r2, #5
   184b4:	ldr	r1, [pc, #136]	; 18544 <__assert_fail@plt+0x71bc>
   184b8:	b	18240 <__assert_fail@plt+0x6eb8>
   184bc:	mov	r4, r0
   184c0:	b	1817c <__assert_fail@plt+0x6df4>
   184c4:	mov	r4, #1
   184c8:	b	1817c <__assert_fail@plt+0x6df4>
   184cc:	mov	r4, #2
   184d0:	b	1817c <__assert_fail@plt+0x6df4>
   184d4:	mov	r4, #3
   184d8:	b	1817c <__assert_fail@plt+0x6df4>
   184dc:	mov	r4, #4
   184e0:	b	1817c <__assert_fail@plt+0x6df4>
   184e4:	mov	r4, #5
   184e8:	b	1817c <__assert_fail@plt+0x6df4>
   184ec:	mov	r4, #6
   184f0:	b	1817c <__assert_fail@plt+0x6df4>
   184f4:	mov	r4, #7
   184f8:	b	1817c <__assert_fail@plt+0x6df4>
   184fc:	mov	r4, #8
   18500:	b	1817c <__assert_fail@plt+0x6df4>
   18504:	andeq	sl, r1, r8, ror r8
   18508:	andeq	sl, r1, ip, lsl #17
   1850c:	andeq	r0, r0, r6, ror #15
   18510:	andeq	sl, r1, r4, ror #22
   18514:	muleq	r1, r0, r8
   18518:	andeq	sl, r1, ip, lsr r9
   1851c:	andeq	sl, r1, ip, ror #20
   18520:	andeq	sl, r1, r0, ror #18
   18524:	andeq	sl, r1, r0, ror r9
   18528:	andeq	sl, r1, r8, lsl #19
   1852c:	andeq	sl, r1, r4, lsr #19
   18530:	andeq	sl, r1, r4, asr #19
   18534:	andeq	sl, r1, r8, ror #19
   18538:	andeq	sl, r1, r0, lsl sl
   1853c:	andeq	sl, r1, ip, lsr sl
   18540:	andeq	sl, r1, r4, lsl #17
   18544:	andeq	sl, r1, r0, lsr #21
   18548:	push	{r3}		; (str r3, [sp, #-4]!)
   1854c:	push	{lr}		; (str lr, [sp, #-4]!)
   18550:	sub	sp, sp, #56	; 0x38
   18554:	add	r3, sp, #64	; 0x40
   18558:	ldr	ip, [sp, #64]	; 0x40
   1855c:	str	r3, [sp, #12]
   18560:	cmp	ip, #0
   18564:	str	ip, [sp, #16]
   18568:	beq	18600 <__assert_fail@plt+0x7278>
   1856c:	ldr	ip, [sp, #68]	; 0x44
   18570:	cmp	ip, #0
   18574:	str	ip, [sp, #20]
   18578:	beq	18620 <__assert_fail@plt+0x7298>
   1857c:	ldr	ip, [sp, #72]	; 0x48
   18580:	cmp	ip, #0
   18584:	str	ip, [sp, #24]
   18588:	beq	18628 <__assert_fail@plt+0x72a0>
   1858c:	ldr	ip, [sp, #76]	; 0x4c
   18590:	cmp	ip, #0
   18594:	str	ip, [sp, #28]
   18598:	beq	18630 <__assert_fail@plt+0x72a8>
   1859c:	ldr	ip, [sp, #80]	; 0x50
   185a0:	cmp	ip, #0
   185a4:	str	ip, [sp, #32]
   185a8:	beq	18638 <__assert_fail@plt+0x72b0>
   185ac:	ldr	ip, [sp, #84]	; 0x54
   185b0:	cmp	ip, #0
   185b4:	str	ip, [sp, #36]	; 0x24
   185b8:	beq	18640 <__assert_fail@plt+0x72b8>
   185bc:	ldr	ip, [sp, #88]	; 0x58
   185c0:	cmp	ip, #0
   185c4:	str	ip, [sp, #40]	; 0x28
   185c8:	beq	18648 <__assert_fail@plt+0x72c0>
   185cc:	ldr	ip, [sp, #92]	; 0x5c
   185d0:	cmp	ip, #0
   185d4:	str	ip, [sp, #44]	; 0x2c
   185d8:	beq	18650 <__assert_fail@plt+0x72c8>
   185dc:	ldr	ip, [sp, #96]	; 0x60
   185e0:	cmp	ip, #0
   185e4:	str	ip, [sp, #48]	; 0x30
   185e8:	beq	18658 <__assert_fail@plt+0x72d0>
   185ec:	ldr	ip, [sp, #100]	; 0x64
   185f0:	cmp	ip, #0
   185f4:	str	ip, [sp, #52]	; 0x34
   185f8:	movne	ip, #10
   185fc:	moveq	ip, #9
   18600:	add	r3, sp, #16
   18604:	stm	sp, {r3, ip}
   18608:	ldr	r3, [sp, #60]	; 0x3c
   1860c:	bl	17cf4 <__assert_fail@plt+0x696c>
   18610:	add	sp, sp, #56	; 0x38
   18614:	pop	{lr}		; (ldr lr, [sp], #4)
   18618:	add	sp, sp, #4
   1861c:	bx	lr
   18620:	mov	ip, #1
   18624:	b	18600 <__assert_fail@plt+0x7278>
   18628:	mov	ip, #2
   1862c:	b	18600 <__assert_fail@plt+0x7278>
   18630:	mov	ip, #3
   18634:	b	18600 <__assert_fail@plt+0x7278>
   18638:	mov	ip, #4
   1863c:	b	18600 <__assert_fail@plt+0x7278>
   18640:	mov	ip, #5
   18644:	b	18600 <__assert_fail@plt+0x7278>
   18648:	mov	ip, #6
   1864c:	b	18600 <__assert_fail@plt+0x7278>
   18650:	mov	ip, #7
   18654:	b	18600 <__assert_fail@plt+0x7278>
   18658:	mov	ip, #8
   1865c:	b	18600 <__assert_fail@plt+0x7278>
   18660:	ldr	r3, [pc, #116]	; 186dc <__assert_fail@plt+0x7354>
   18664:	push	{r4, lr}
   18668:	mov	r0, #10
   1866c:	ldr	r1, [r3]
   18670:	bl	11118 <fputc_unlocked@plt>
   18674:	mov	r2, #5
   18678:	ldr	r1, [pc, #96]	; 186e0 <__assert_fail@plt+0x7358>
   1867c:	mov	r0, #0
   18680:	bl	11124 <dcgettext@plt>
   18684:	ldr	r2, [pc, #88]	; 186e4 <__assert_fail@plt+0x735c>
   18688:	mov	r1, r0
   1868c:	mov	r0, #1
   18690:	bl	112c8 <__printf_chk@plt>
   18694:	mov	r2, #5
   18698:	ldr	r1, [pc, #72]	; 186e8 <__assert_fail@plt+0x7360>
   1869c:	mov	r0, #0
   186a0:	bl	11124 <dcgettext@plt>
   186a4:	ldr	r3, [pc, #64]	; 186ec <__assert_fail@plt+0x7364>
   186a8:	ldr	r2, [pc, #64]	; 186f0 <__assert_fail@plt+0x7368>
   186ac:	mov	r1, r0
   186b0:	mov	r0, #1
   186b4:	bl	112c8 <__printf_chk@plt>
   186b8:	mov	r2, #5
   186bc:	ldr	r1, [pc, #48]	; 186f4 <__assert_fail@plt+0x736c>
   186c0:	mov	r0, #0
   186c4:	bl	11124 <dcgettext@plt>
   186c8:	ldr	r2, [pc, #40]	; 186f8 <__assert_fail@plt+0x7370>
   186cc:	pop	{r4, lr}
   186d0:	mov	r1, r0
   186d4:	mov	r0, #1
   186d8:	b	112c8 <__printf_chk@plt>
   186dc:	muleq	r2, r4, r1
   186e0:	ldrdeq	sl, [r1], -ip
   186e4:	strdeq	sl, [r1], -r0
   186e8:	andeq	sl, r1, r8, lsl #22
   186ec:	andeq	sl, r1, r0, lsl #8
   186f0:	andeq	sl, r1, r8, lsr #8
   186f4:	andeq	sl, r1, ip, lsl fp
   186f8:	andeq	sl, r1, r4, asr #22
   186fc:	push	{r4, r5, r6, lr}
   18700:	mov	r6, r0
   18704:	mov	r5, r1
   18708:	mov	r4, r2
   1870c:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   18710:	cmp	r0, #0
   18714:	popne	{r4, r5, r6, pc}
   18718:	cmp	r6, #0
   1871c:	beq	1872c <__assert_fail@plt+0x73a4>
   18720:	cmp	r5, #0
   18724:	cmpne	r4, #0
   18728:	popeq	{r4, r5, r6, pc}
   1872c:	bl	18d78 <__assert_fail@plt+0x79f0>
   18730:	push	{r4, lr}
   18734:	bl	18e00 <__assert_fail@plt+0x7a78>
   18738:	cmp	r0, #0
   1873c:	popne	{r4, pc}
   18740:	bl	18d78 <__assert_fail@plt+0x79f0>
   18744:	push	{r4, lr}
   18748:	bl	18e00 <__assert_fail@plt+0x7a78>
   1874c:	cmp	r0, #0
   18750:	popne	{r4, pc}
   18754:	bl	18d78 <__assert_fail@plt+0x79f0>
   18758:	push	{r4, lr}
   1875c:	bl	18e00 <__assert_fail@plt+0x7a78>
   18760:	cmp	r0, #0
   18764:	popne	{r4, pc}
   18768:	bl	18d78 <__assert_fail@plt+0x79f0>
   1876c:	push	{r4, r5, r6, lr}
   18770:	mov	r5, r0
   18774:	mov	r4, r1
   18778:	bl	18e2c <__assert_fail@plt+0x7aa4>
   1877c:	cmp	r0, #0
   18780:	popne	{r4, r5, r6, pc}
   18784:	adds	r4, r4, #0
   18788:	movne	r4, #1
   1878c:	cmp	r5, #0
   18790:	orreq	r4, r4, #1
   18794:	cmp	r4, #0
   18798:	popeq	{r4, r5, r6, pc}
   1879c:	bl	18d78 <__assert_fail@plt+0x79f0>
   187a0:	push	{r4, lr}
   187a4:	cmp	r1, #0
   187a8:	orreq	r1, r1, #1
   187ac:	bl	18e2c <__assert_fail@plt+0x7aa4>
   187b0:	cmp	r0, #0
   187b4:	popne	{r4, pc}
   187b8:	bl	18d78 <__assert_fail@plt+0x79f0>
   187bc:	push	{r4, r5, r6, lr}
   187c0:	mov	r6, r0
   187c4:	mov	r5, r1
   187c8:	mov	r4, r2
   187cc:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   187d0:	cmp	r0, #0
   187d4:	popne	{r4, r5, r6, pc}
   187d8:	cmp	r6, #0
   187dc:	beq	187ec <__assert_fail@plt+0x7464>
   187e0:	cmp	r5, #0
   187e4:	cmpne	r4, #0
   187e8:	popeq	{r4, r5, r6, pc}
   187ec:	bl	18d78 <__assert_fail@plt+0x79f0>
   187f0:	cmp	r2, #0
   187f4:	cmpne	r1, #0
   187f8:	moveq	r2, #1
   187fc:	moveq	r1, r2
   18800:	push	{r4, lr}
   18804:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   18808:	cmp	r0, #0
   1880c:	popne	{r4, pc}
   18810:	bl	18d78 <__assert_fail@plt+0x79f0>
   18814:	push	{r4, lr}
   18818:	mov	r2, r1
   1881c:	mov	r1, r0
   18820:	mov	r0, #0
   18824:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   18828:	cmp	r0, #0
   1882c:	popne	{r4, pc}
   18830:	bl	18d78 <__assert_fail@plt+0x79f0>
   18834:	cmp	r1, #0
   18838:	cmpne	r0, #0
   1883c:	moveq	r2, #1
   18840:	movne	r2, r1
   18844:	moveq	r1, r2
   18848:	movne	r1, r0
   1884c:	push	{r4, lr}
   18850:	mov	r0, #0
   18854:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   18858:	cmp	r0, #0
   1885c:	popne	{r4, pc}
   18860:	bl	18d78 <__assert_fail@plt+0x79f0>
   18864:	cmp	r0, #0
   18868:	push	{r4, r5, r6, lr}
   1886c:	mov	r5, r1
   18870:	ldr	r4, [r1]
   18874:	beq	188b0 <__assert_fail@plt+0x7528>
   18878:	lsr	r2, r4, #1
   1887c:	add	r3, r2, #1
   18880:	mvn	r3, r3
   18884:	cmp	r4, r3
   18888:	bhi	188cc <__assert_fail@plt+0x7544>
   1888c:	add	r4, r4, #1
   18890:	add	r4, r4, r2
   18894:	mov	r1, r4
   18898:	mov	r2, #1
   1889c:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   188a0:	cmp	r0, #0
   188a4:	beq	188d0 <__assert_fail@plt+0x7548>
   188a8:	str	r4, [r5]
   188ac:	pop	{r4, r5, r6, pc}
   188b0:	cmp	r4, #0
   188b4:	moveq	r4, #64	; 0x40
   188b8:	mov	r1, r4
   188bc:	mov	r2, #1
   188c0:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   188c4:	cmp	r0, #0
   188c8:	bne	188a8 <__assert_fail@plt+0x7520>
   188cc:	bl	18d78 <__assert_fail@plt+0x79f0>
   188d0:	cmp	r4, #0
   188d4:	bne	188cc <__assert_fail@plt+0x7544>
   188d8:	str	r4, [r5]
   188dc:	pop	{r4, r5, r6, pc}
   188e0:	cmp	r0, #0
   188e4:	push	{r4, r5, r6, lr}
   188e8:	mov	r5, r1
   188ec:	ldr	r4, [r1]
   188f0:	mov	r6, r2
   188f4:	beq	18938 <__assert_fail@plt+0x75b0>
   188f8:	lsr	r1, r4, #1
   188fc:	add	r3, r1, #1
   18900:	mvn	r3, r3
   18904:	cmp	r4, r3
   18908:	bhi	18970 <__assert_fail@plt+0x75e8>
   1890c:	add	r4, r4, #1
   18910:	add	r4, r4, r1
   18914:	mov	r1, r4
   18918:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   1891c:	cmp	r0, #0
   18920:	bne	18930 <__assert_fail@plt+0x75a8>
   18924:	cmp	r4, #0
   18928:	cmpne	r6, #0
   1892c:	bne	18970 <__assert_fail@plt+0x75e8>
   18930:	str	r4, [r5]
   18934:	pop	{r4, r5, r6, pc}
   18938:	cmp	r4, #0
   1893c:	bne	18958 <__assert_fail@plt+0x75d0>
   18940:	mov	r1, r2
   18944:	mov	r0, #64	; 0x40
   18948:	bl	194b4 <_obstack_memory_used@@Base+0x118>
   1894c:	cmp	r0, #0
   18950:	movne	r4, r0
   18954:	addeq	r4, r0, #1
   18958:	mov	r2, r6
   1895c:	mov	r1, r4
   18960:	mov	r0, #0
   18964:	bl	193d0 <_obstack_memory_used@@Base+0x34>
   18968:	cmp	r0, #0
   1896c:	bne	18930 <__assert_fail@plt+0x75a8>
   18970:	bl	18d78 <__assert_fail@plt+0x79f0>
   18974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18978:	sub	sp, sp, #12
   1897c:	ldr	r6, [r1]
   18980:	mov	r8, r1
   18984:	mov	r9, r0
   18988:	asrs	r4, r6, #1
   1898c:	mov	sl, r2
   18990:	mov	fp, r3
   18994:	ldr	r7, [sp, #48]	; 0x30
   18998:	bmi	18b14 <__assert_fail@plt+0x778c>
   1899c:	mvn	r1, #-2147483648	; 0x80000000
   189a0:	sub	r1, r1, r4
   189a4:	cmp	r6, r1
   189a8:	movle	r1, #0
   189ac:	movgt	r1, #1
   189b0:	mvn	r3, fp
   189b4:	cmp	r1, #0
   189b8:	addeq	r4, r4, r6
   189bc:	mvnne	r4, #-2147483648	; 0x80000000
   189c0:	lsr	r3, r3, #31
   189c4:	cmp	fp, r4
   189c8:	movge	r2, #0
   189cc:	andlt	r2, r3, #1
   189d0:	cmp	r2, #0
   189d4:	beq	18ac4 <__assert_fail@plt+0x773c>
   189d8:	cmp	r7, #0
   189dc:	blt	18bac <__assert_fail@plt+0x7824>
   189e0:	bne	18ba4 <__assert_fail@plt+0x781c>
   189e4:	mov	r5, #64	; 0x40
   189e8:	mov	r1, r7
   189ec:	mov	r0, r5
   189f0:	str	r3, [sp, #4]
   189f4:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   189f8:	mov	r1, r7
   189fc:	mov	r4, r0
   18a00:	mov	r0, r5
   18a04:	bl	198e0 <_obstack_memory_used@@Base+0x544>
   18a08:	ldr	r3, [sp, #4]
   18a0c:	sub	r5, r5, r1
   18a10:	cmp	r9, #0
   18a14:	sub	r2, r4, r6
   18a18:	streq	r9, [r8]
   18a1c:	cmp	r2, sl
   18a20:	bge	18aa4 <__assert_fail@plt+0x771c>
   18a24:	cmp	sl, #0
   18a28:	blt	18b44 <__assert_fail@plt+0x77bc>
   18a2c:	cmp	r6, #0
   18a30:	blt	18a50 <__assert_fail@plt+0x76c8>
   18a34:	mvn	r2, #-2147483648	; 0x80000000
   18a38:	sub	r2, r2, sl
   18a3c:	cmp	r6, r2
   18a40:	movle	r2, #0
   18a44:	movgt	r2, #1
   18a48:	cmp	r2, #0
   18a4c:	bne	18b40 <__assert_fail@plt+0x77b8>
   18a50:	add	r6, r6, sl
   18a54:	cmp	fp, r6
   18a58:	movge	r3, #0
   18a5c:	andlt	r3, r3, #1
   18a60:	cmp	r3, #0
   18a64:	mov	r4, r6
   18a68:	bne	18b40 <__assert_fail@plt+0x77b8>
   18a6c:	cmp	r7, #0
   18a70:	blt	18b58 <__assert_fail@plt+0x77d0>
   18a74:	beq	18aa0 <__assert_fail@plt+0x7718>
   18a78:	cmp	r6, #0
   18a7c:	blt	18bfc <__assert_fail@plt+0x7874>
   18a80:	mov	r1, r7
   18a84:	mvn	r0, #-2147483648	; 0x80000000
   18a88:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18a8c:	cmp	r6, r0
   18a90:	movle	r0, #0
   18a94:	movgt	r0, #1
   18a98:	cmp	r0, #0
   18a9c:	bne	18b40 <__assert_fail@plt+0x77b8>
   18aa0:	mul	r5, r6, r7
   18aa4:	mov	r1, r5
   18aa8:	mov	r0, r9
   18aac:	bl	18e2c <__assert_fail@plt+0x7aa4>
   18ab0:	cmp	r0, #0
   18ab4:	beq	18b28 <__assert_fail@plt+0x77a0>
   18ab8:	str	r4, [r8]
   18abc:	add	sp, sp, #12
   18ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ac4:	cmp	r7, #0
   18ac8:	blt	18b84 <__assert_fail@plt+0x77fc>
   18acc:	beq	189e4 <__assert_fail@plt+0x765c>
   18ad0:	cmp	r4, #0
   18ad4:	blt	18bb4 <__assert_fail@plt+0x782c>
   18ad8:	mov	r1, r7
   18adc:	mvn	r0, #-2147483648	; 0x80000000
   18ae0:	str	r3, [sp, #4]
   18ae4:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18ae8:	ldr	r3, [sp, #4]
   18aec:	cmp	r0, r4
   18af0:	movge	r0, #0
   18af4:	movlt	r0, #1
   18af8:	cmp	r0, #0
   18afc:	mvnne	r5, #-2147483648	; 0x80000000
   18b00:	bne	189e8 <__assert_fail@plt+0x7660>
   18b04:	mul	r5, r7, r4
   18b08:	cmp	r5, #63	; 0x3f
   18b0c:	bgt	18a10 <__assert_fail@plt+0x7688>
   18b10:	b	189e4 <__assert_fail@plt+0x765c>
   18b14:	rsb	r1, r4, #-2147483648	; 0x80000000
   18b18:	cmp	r6, r1
   18b1c:	movge	r1, #0
   18b20:	movlt	r1, #1
   18b24:	b	189b0 <__assert_fail@plt+0x7628>
   18b28:	adds	r5, r5, #0
   18b2c:	movne	r5, #1
   18b30:	cmp	r9, #0
   18b34:	orreq	r5, r5, #1
   18b38:	cmp	r5, #0
   18b3c:	beq	18ab8 <__assert_fail@plt+0x7730>
   18b40:	bl	18d78 <__assert_fail@plt+0x79f0>
   18b44:	rsb	r2, sl, #-2147483648	; 0x80000000
   18b48:	cmp	r6, r2
   18b4c:	movge	r2, #0
   18b50:	movlt	r2, #1
   18b54:	b	18a48 <__assert_fail@plt+0x76c0>
   18b58:	cmp	r6, #0
   18b5c:	blt	18be0 <__assert_fail@plt+0x7858>
   18b60:	cmn	r7, #1
   18b64:	beq	18aa0 <__assert_fail@plt+0x7718>
   18b68:	mov	r1, r7
   18b6c:	mov	r0, #-2147483648	; 0x80000000
   18b70:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18b74:	cmp	r6, r0
   18b78:	movle	r0, #0
   18b7c:	movgt	r0, #1
   18b80:	b	18a98 <__assert_fail@plt+0x7710>
   18b84:	cmp	r4, #0
   18b88:	blt	18c20 <__assert_fail@plt+0x7898>
   18b8c:	cmn	r7, #1
   18b90:	beq	18b04 <__assert_fail@plt+0x777c>
   18b94:	str	r3, [sp, #4]
   18b98:	mov	r1, r7
   18b9c:	mov	r0, #-2147483648	; 0x80000000
   18ba0:	b	18ae4 <__assert_fail@plt+0x775c>
   18ba4:	mov	r4, fp
   18ba8:	b	18ad8 <__assert_fail@plt+0x7750>
   18bac:	mov	r4, fp
   18bb0:	b	18b8c <__assert_fail@plt+0x7804>
   18bb4:	cmn	r4, #1
   18bb8:	beq	18b04 <__assert_fail@plt+0x777c>
   18bbc:	mov	r1, r4
   18bc0:	mov	r0, #-2147483648	; 0x80000000
   18bc4:	str	r3, [sp, #4]
   18bc8:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18bcc:	ldr	r3, [sp, #4]
   18bd0:	cmp	r7, r0
   18bd4:	movle	r0, #0
   18bd8:	movgt	r0, #1
   18bdc:	b	18af8 <__assert_fail@plt+0x7770>
   18be0:	mov	r1, r7
   18be4:	mvn	r0, #-2147483648	; 0x80000000
   18be8:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18bec:	cmp	r6, r0
   18bf0:	movge	r0, #0
   18bf4:	movlt	r0, #1
   18bf8:	b	18a98 <__assert_fail@plt+0x7710>
   18bfc:	cmn	r6, #1
   18c00:	beq	18aa0 <__assert_fail@plt+0x7718>
   18c04:	mov	r1, r6
   18c08:	mov	r0, #-2147483648	; 0x80000000
   18c0c:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18c10:	cmp	r7, r0
   18c14:	movle	r0, #0
   18c18:	movgt	r0, #1
   18c1c:	b	18a98 <__assert_fail@plt+0x7710>
   18c20:	mov	r1, r7
   18c24:	mvn	r0, #-2147483648	; 0x80000000
   18c28:	str	r3, [sp, #4]
   18c2c:	bl	196c0 <_obstack_memory_used@@Base+0x324>
   18c30:	ldr	r3, [sp, #4]
   18c34:	cmp	r0, r4
   18c38:	movle	r0, #0
   18c3c:	movgt	r0, #1
   18c40:	b	18af8 <__assert_fail@plt+0x7770>
   18c44:	push	{r4, lr}
   18c48:	mov	r1, #1
   18c4c:	bl	18db8 <__assert_fail@plt+0x7a30>
   18c50:	cmp	r0, #0
   18c54:	popne	{r4, pc}
   18c58:	bl	18d78 <__assert_fail@plt+0x79f0>
   18c5c:	push	{r4, lr}
   18c60:	mov	r1, #1
   18c64:	bl	18db8 <__assert_fail@plt+0x7a30>
   18c68:	cmp	r0, #0
   18c6c:	popne	{r4, pc}
   18c70:	bl	18d78 <__assert_fail@plt+0x79f0>
   18c74:	push	{r4, lr}
   18c78:	bl	18db8 <__assert_fail@plt+0x7a30>
   18c7c:	cmp	r0, #0
   18c80:	popne	{r4, pc}
   18c84:	bl	18d78 <__assert_fail@plt+0x79f0>
   18c88:	push	{r4, lr}
   18c8c:	bl	18db8 <__assert_fail@plt+0x7a30>
   18c90:	cmp	r0, #0
   18c94:	popne	{r4, pc}
   18c98:	bl	18d78 <__assert_fail@plt+0x79f0>
   18c9c:	push	{r4, r5, r6, lr}
   18ca0:	mov	r6, r0
   18ca4:	mov	r0, r1
   18ca8:	mov	r4, r1
   18cac:	bl	18e00 <__assert_fail@plt+0x7a78>
   18cb0:	subs	r5, r0, #0
   18cb4:	beq	18ccc <__assert_fail@plt+0x7944>
   18cb8:	mov	r2, r4
   18cbc:	mov	r1, r6
   18cc0:	bl	110f4 <memcpy@plt>
   18cc4:	mov	r0, r5
   18cc8:	pop	{r4, r5, r6, pc}
   18ccc:	bl	18d78 <__assert_fail@plt+0x79f0>
   18cd0:	push	{r4, r5, r6, lr}
   18cd4:	mov	r6, r0
   18cd8:	mov	r0, r1
   18cdc:	mov	r4, r1
   18ce0:	bl	18e00 <__assert_fail@plt+0x7a78>
   18ce4:	subs	r5, r0, #0
   18ce8:	beq	18d00 <__assert_fail@plt+0x7978>
   18cec:	mov	r2, r4
   18cf0:	mov	r1, r6
   18cf4:	bl	110f4 <memcpy@plt>
   18cf8:	mov	r0, r5
   18cfc:	pop	{r4, r5, r6, pc}
   18d00:	bl	18d78 <__assert_fail@plt+0x79f0>
   18d04:	push	{r4, r5, r6, lr}
   18d08:	mov	r6, r0
   18d0c:	add	r0, r1, #1
   18d10:	mov	r4, r1
   18d14:	bl	18e00 <__assert_fail@plt+0x7a78>
   18d18:	subs	r5, r0, #0
   18d1c:	beq	18d3c <__assert_fail@plt+0x79b4>
   18d20:	mov	r3, #0
   18d24:	mov	r1, r6
   18d28:	strb	r3, [r5, r4]
   18d2c:	mov	r2, r4
   18d30:	bl	110f4 <memcpy@plt>
   18d34:	mov	r0, r5
   18d38:	pop	{r4, r5, r6, pc}
   18d3c:	bl	18d78 <__assert_fail@plt+0x79f0>
   18d40:	push	{r4, r5, r6, lr}
   18d44:	mov	r6, r0
   18d48:	bl	1125c <strlen@plt>
   18d4c:	add	r4, r0, #1
   18d50:	mov	r0, r4
   18d54:	bl	18e00 <__assert_fail@plt+0x7a78>
   18d58:	subs	r5, r0, #0
   18d5c:	beq	18d74 <__assert_fail@plt+0x79ec>
   18d60:	mov	r2, r4
   18d64:	mov	r1, r6
   18d68:	bl	110f4 <memcpy@plt>
   18d6c:	mov	r0, r5
   18d70:	pop	{r4, r5, r6, pc}
   18d74:	bl	18d78 <__assert_fail@plt+0x79f0>
   18d78:	ldr	r3, [pc, #44]	; 18dac <__assert_fail@plt+0x7a24>
   18d7c:	push	{r4, lr}
   18d80:	mov	r2, #5
   18d84:	ldr	r1, [pc, #36]	; 18db0 <__assert_fail@plt+0x7a28>
   18d88:	mov	r0, #0
   18d8c:	ldr	r4, [r3]
   18d90:	bl	11124 <dcgettext@plt>
   18d94:	ldr	r2, [pc, #24]	; 18db4 <__assert_fail@plt+0x7a2c>
   18d98:	mov	r1, #0
   18d9c:	mov	r3, r0
   18da0:	mov	r0, r4
   18da4:	bl	111c0 <error@plt>
   18da8:	bl	11370 <abort@plt>
   18dac:	andeq	fp, r2, ip, lsr #2
   18db0:	muleq	r1, r4, fp
   18db4:	andeq	sl, r1, r8, lsr r7
   18db8:	cmp	r1, #0
   18dbc:	cmpne	r0, #0
   18dc0:	moveq	r1, #1
   18dc4:	moveq	r0, r1
   18dc8:	umull	r2, r3, r0, r1
   18dcc:	adds	r3, r3, #0
   18dd0:	movne	r3, #1
   18dd4:	cmp	r2, #0
   18dd8:	blt	18de8 <__assert_fail@plt+0x7a60>
   18ddc:	cmp	r3, #0
   18de0:	bne	18de8 <__assert_fail@plt+0x7a60>
   18de4:	b	11064 <calloc@plt>
   18de8:	push	{r4, lr}
   18dec:	bl	11280 <__errno_location@plt>
   18df0:	mov	r3, #12
   18df4:	str	r3, [r0]
   18df8:	mov	r0, #0
   18dfc:	pop	{r4, pc}
   18e00:	cmp	r0, #0
   18e04:	moveq	r0, #1
   18e08:	cmp	r0, #0
   18e0c:	blt	18e14 <__assert_fail@plt+0x7a8c>
   18e10:	b	111f0 <malloc@plt>
   18e14:	push	{r4, lr}
   18e18:	bl	11280 <__errno_location@plt>
   18e1c:	mov	r3, #12
   18e20:	str	r3, [r0]
   18e24:	mov	r0, #0
   18e28:	pop	{r4, pc}
   18e2c:	cmp	r0, #0
   18e30:	beq	18e54 <__assert_fail@plt+0x7acc>
   18e34:	cmp	r1, #0
   18e38:	push	{lr}		; (str lr, [sp, #-4]!)
   18e3c:	sub	sp, sp, #12
   18e40:	beq	18e5c <__assert_fail@plt+0x7ad4>
   18e44:	blt	18e74 <__assert_fail@plt+0x7aec>
   18e48:	add	sp, sp, #12
   18e4c:	pop	{lr}		; (ldr lr, [sp], #4)
   18e50:	b	1113c <realloc@plt>
   18e54:	mov	r0, r1
   18e58:	b	18e00 <__assert_fail@plt+0x7a78>
   18e5c:	str	r1, [sp, #4]
   18e60:	bl	13510 <__assert_fail@plt+0x2188>
   18e64:	ldr	r3, [sp, #4]
   18e68:	mov	r0, r3
   18e6c:	add	sp, sp, #12
   18e70:	pop	{pc}		; (ldr pc, [sp], #4)
   18e74:	bl	11280 <__errno_location@plt>
   18e78:	mov	r2, #12
   18e7c:	mov	r3, #0
   18e80:	str	r2, [r0]
   18e84:	b	18e68 <__assert_fail@plt+0x7ae0>
   18e88:	push	{r4, r5, r6, lr}
   18e8c:	mov	r4, r0
   18e90:	bl	111a8 <__fpending@plt>
   18e94:	ldr	r5, [r4]
   18e98:	and	r5, r5, #32
   18e9c:	mov	r6, r0
   18ea0:	mov	r0, r4
   18ea4:	bl	13410 <__assert_fail@plt+0x2088>
   18ea8:	cmp	r5, #0
   18eac:	mov	r4, r0
   18eb0:	bne	18ed0 <__assert_fail@plt+0x7b48>
   18eb4:	cmp	r0, #0
   18eb8:	beq	18ec8 <__assert_fail@plt+0x7b40>
   18ebc:	cmp	r6, #0
   18ec0:	beq	18eec <__assert_fail@plt+0x7b64>
   18ec4:	mvn	r4, #0
   18ec8:	mov	r0, r4
   18ecc:	pop	{r4, r5, r6, pc}
   18ed0:	cmp	r0, #0
   18ed4:	bne	18ec4 <__assert_fail@plt+0x7b3c>
   18ed8:	bl	11280 <__errno_location@plt>
   18edc:	str	r4, [r0]
   18ee0:	mvn	r4, #0
   18ee4:	mov	r0, r4
   18ee8:	pop	{r4, r5, r6, pc}
   18eec:	bl	11280 <__errno_location@plt>
   18ef0:	ldr	r4, [r0]
   18ef4:	subs	r4, r4, #9
   18ef8:	mvnne	r4, #0
   18efc:	mov	r0, r4
   18f00:	pop	{r4, r5, r6, pc}
   18f04:	push	{lr}		; (str lr, [sp, #-4]!)
   18f08:	sub	sp, sp, #268	; 0x10c
   18f0c:	add	r1, sp, #4
   18f10:	ldr	r2, [pc, #60]	; 18f54 <__assert_fail@plt+0x7bcc>
   18f14:	bl	1941c <_obstack_memory_used@@Base+0x80>
   18f18:	cmp	r0, #0
   18f1c:	movne	r0, #0
   18f20:	bne	18f4c <__assert_fail@plt+0x7bc4>
   18f24:	ldr	r1, [pc, #44]	; 18f58 <__assert_fail@plt+0x7bd0>
   18f28:	add	r0, sp, #4
   18f2c:	bl	11088 <strcmp@plt>
   18f30:	cmp	r0, #0
   18f34:	beq	18f4c <__assert_fail@plt+0x7bc4>
   18f38:	add	r0, sp, #4
   18f3c:	ldr	r1, [pc, #24]	; 18f5c <__assert_fail@plt+0x7bd4>
   18f40:	bl	11088 <strcmp@plt>
   18f44:	adds	r0, r0, #0
   18f48:	movne	r0, #1
   18f4c:	add	sp, sp, #268	; 0x10c
   18f50:	pop	{pc}		; (ldr pc, [sp], #4)
   18f54:	andeq	r0, r0, r1, lsl #2
   18f58:	andeq	sl, r1, r8, lsr #23
   18f5c:	andeq	sl, r1, ip, lsr #23
   18f60:	push	{r4, lr}
   18f64:	mov	r0, #14
   18f68:	bl	11328 <nl_langinfo@plt>
   18f6c:	cmp	r0, #0
   18f70:	beq	18f88 <__assert_fail@plt+0x7c00>
   18f74:	ldrb	r2, [r0]
   18f78:	ldr	r3, [pc, #16]	; 18f90 <__assert_fail@plt+0x7c08>
   18f7c:	cmp	r2, #0
   18f80:	moveq	r0, r3
   18f84:	pop	{r4, pc}
   18f88:	ldr	r0, [pc]	; 18f90 <__assert_fail@plt+0x7c08>
   18f8c:	pop	{r4, pc}
   18f90:			; <UNDEFINED> instruction: 0x0001abb4
   18f94:	ldr	r3, [pc, #52]	; 18fd0 <__assert_fail@plt+0x7c48>
   18f98:	push	{r4, lr}
   18f9c:	mov	r2, #5
   18fa0:	ldr	r1, [pc, #44]	; 18fd4 <__assert_fail@plt+0x7c4c>
   18fa4:	mov	r0, #0
   18fa8:	ldr	r4, [r3]
   18fac:	bl	11124 <dcgettext@plt>
   18fb0:	ldr	r2, [pc, #32]	; 18fd8 <__assert_fail@plt+0x7c50>
   18fb4:	mov	r1, #1
   18fb8:	mov	r3, r0
   18fbc:	mov	r0, r4
   18fc0:	bl	112e0 <__fprintf_chk@plt>
   18fc4:	ldr	r3, [pc, #16]	; 18fdc <__assert_fail@plt+0x7c54>
   18fc8:	ldr	r0, [r3]
   18fcc:	bl	11238 <exit@plt>
   18fd0:	andeq	fp, r2, r8, lsl #3
   18fd4:	muleq	r1, r4, fp
   18fd8:	andeq	sl, r1, r0, lsl #17
   18fdc:	andeq	fp, r2, ip, lsr #2

00018fe0 <_obstack_begin@@Base>:
   18fe0:	push	{r4, r5, r6, lr}
   18fe4:	mov	r4, r0
   18fe8:	ldrb	r0, [r0, #40]	; 0x28
   18fec:	subs	r5, r2, #0
   18ff0:	subne	r6, r5, #1
   18ff4:	bic	r0, r0, #1
   18ff8:	strb	r0, [r4, #40]	; 0x28
   18ffc:	ldrb	r2, [r4, #40]	; 0x28
   19000:	ldr	r0, [pc, #152]	; 190a0 <_obstack_begin@@Base+0xc0>
   19004:	moveq	r6, #7
   19008:	ldr	ip, [sp, #16]
   1900c:	moveq	r5, #8
   19010:	cmp	r1, #0
   19014:	moveq	r1, r0
   19018:	tst	r2, #1
   1901c:	str	r3, [r4, #28]
   19020:	str	ip, [r4, #32]
   19024:	str	r6, [r4, #24]
   19028:	str	r1, [r4]
   1902c:	bne	19088 <_obstack_begin@@Base+0xa8>
   19030:	mov	r0, r1
   19034:	blx	r3
   19038:	cmp	r0, #0
   1903c:	str	r0, [r4, #4]
   19040:	beq	19094 <_obstack_begin@@Base+0xb4>
   19044:	ldr	r3, [r4]
   19048:	add	r2, r0, #8
   1904c:	rsb	r5, r5, #0
   19050:	add	r2, r2, r6
   19054:	add	r3, r0, r3
   19058:	and	r2, r2, r5
   1905c:	mov	r1, #0
   19060:	str	r2, [r4, #8]
   19064:	str	r2, [r4, #12]
   19068:	str	r3, [r0]
   1906c:	str	r3, [r4, #16]
   19070:	str	r1, [r0, #4]
   19074:	ldrb	r3, [r4, #40]	; 0x28
   19078:	mov	r0, #1
   1907c:	and	r3, r3, #249	; 0xf9
   19080:	strb	r3, [r4, #40]	; 0x28
   19084:	pop	{r4, r5, r6, pc}
   19088:	ldr	r0, [r4, #36]	; 0x24
   1908c:	blx	r3
   19090:	b	19038 <_obstack_begin@@Base+0x58>
   19094:	ldr	r3, [pc, #8]	; 190a4 <_obstack_begin@@Base+0xc4>
   19098:	ldr	r3, [r3]
   1909c:	blx	r3
   190a0:	andeq	r0, r0, r8, ror #31
   190a4:	andeq	fp, r2, r0, ror r1

000190a8 <_obstack_begin_1@@Base>:
   190a8:	ldrb	ip, [r0, #40]	; 0x28
   190ac:	push	{r4, r5, r6, lr}
   190b0:	mov	r4, r0
   190b4:	orr	ip, ip, #1
   190b8:	subs	r5, r2, #0
   190bc:	strb	ip, [r4, #40]	; 0x28
   190c0:	ldrb	r2, [r4, #40]	; 0x28
   190c4:	ldr	ip, [pc, #160]	; 1916c <_obstack_begin_1@@Base+0xc4>
   190c8:	subne	r6, r5, #1
   190cc:	moveq	r6, #7
   190d0:	ldr	lr, [sp, #16]
   190d4:	ldr	r0, [sp, #20]
   190d8:	moveq	r5, #8
   190dc:	cmp	r1, #0
   190e0:	moveq	r1, ip
   190e4:	tst	r2, #1
   190e8:	str	r3, [r4, #28]
   190ec:	str	lr, [r4, #32]
   190f0:	str	r0, [r4, #36]	; 0x24
   190f4:	str	r6, [r4, #24]
   190f8:	str	r1, [r4]
   190fc:	bne	19158 <_obstack_begin_1@@Base+0xb0>
   19100:	mov	r0, r1
   19104:	blx	r3
   19108:	cmp	r0, #0
   1910c:	str	r0, [r4, #4]
   19110:	beq	19160 <_obstack_begin_1@@Base+0xb8>
   19114:	ldr	r3, [r4]
   19118:	add	r2, r0, #8
   1911c:	rsb	r5, r5, #0
   19120:	add	r2, r2, r6
   19124:	add	r3, r0, r3
   19128:	and	r2, r2, r5
   1912c:	mov	r1, #0
   19130:	str	r2, [r4, #8]
   19134:	str	r2, [r4, #12]
   19138:	str	r3, [r0]
   1913c:	str	r3, [r4, #16]
   19140:	str	r1, [r0, #4]
   19144:	ldrb	r3, [r4, #40]	; 0x28
   19148:	mov	r0, #1
   1914c:	and	r3, r3, #249	; 0xf9
   19150:	strb	r3, [r4, #40]	; 0x28
   19154:	pop	{r4, r5, r6, pc}
   19158:	blx	r3
   1915c:	b	19108 <_obstack_begin_1@@Base+0x60>
   19160:	ldr	r3, [pc, #8]	; 19170 <_obstack_begin_1@@Base+0xc8>
   19164:	ldr	r3, [r3]
   19168:	blx	r3
   1916c:	andeq	r0, r0, r8, ror #31
   19170:	andeq	fp, r2, r0, ror r1

00019174 <_obstack_newchunk@@Base>:
   19174:	ldr	r2, [r0, #8]
   19178:	push	{r4, r5, r6, r7, r8, lr}
   1917c:	ldr	r6, [r0, #12]
   19180:	ldr	r3, [r0, #24]
   19184:	sub	r6, r6, r2
   19188:	add	r1, r6, r1
   1918c:	adds	r3, r1, r3
   19190:	movcc	r2, #1
   19194:	movcs	r2, #0
   19198:	cmp	r6, r1
   1919c:	movhi	r1, #0
   191a0:	andls	r1, r2, #1
   191a4:	cmp	r1, #0
   191a8:	bne	191b8 <_obstack_newchunk@@Base+0x44>
   191ac:	ldr	r3, [pc, #272]	; 192c4 <_obstack_newchunk@@Base+0x150>
   191b0:	ldr	r3, [r3]
   191b4:	blx	r3
   191b8:	ldr	r5, [r0]
   191bc:	add	r1, r3, r6, lsr #3
   191c0:	cmp	r3, r5
   191c4:	ldrb	r2, [r0, #40]	; 0x28
   191c8:	movcc	r3, r5
   191cc:	add	r1, r1, #100	; 0x64
   191d0:	cmp	r3, r1
   191d4:	movcs	r5, r3
   191d8:	movcc	r5, r1
   191dc:	tst	r2, #1
   191e0:	mov	r4, r0
   191e4:	ldr	r7, [r0, #4]
   191e8:	ldr	r3, [r0, #28]
   191ec:	bne	1927c <_obstack_newchunk@@Base+0x108>
   191f0:	mov	r0, r5
   191f4:	blx	r3
   191f8:	mov	r8, r0
   191fc:	cmp	r8, #0
   19200:	beq	191ac <_obstack_newchunk@@Base+0x38>
   19204:	ldr	r2, [r4, #24]
   19208:	mov	r3, r8
   1920c:	add	r1, r8, r5
   19210:	str	r8, [r4, #4]
   19214:	str	r7, [r8, #4]
   19218:	str	r1, [r4, #16]
   1921c:	str	r1, [r3], #8
   19220:	add	r3, r3, r2
   19224:	bic	r5, r3, r2
   19228:	mov	r0, r5
   1922c:	mov	r2, r6
   19230:	ldr	r1, [r4, #8]
   19234:	bl	110f4 <memcpy@plt>
   19238:	ldrb	r2, [r4, #40]	; 0x28
   1923c:	tst	r2, #2
   19240:	bne	19260 <_obstack_newchunk@@Base+0xec>
   19244:	ldr	r1, [r4, #24]
   19248:	add	r3, r7, #8
   1924c:	add	r3, r3, r1
   19250:	ldr	r0, [r4, #8]
   19254:	bic	r3, r3, r1
   19258:	cmp	r0, r3
   1925c:	beq	19290 <_obstack_newchunk@@Base+0x11c>
   19260:	ldrb	r3, [r4, #40]	; 0x28
   19264:	add	r2, r5, r6
   19268:	str	r2, [r4, #12]
   1926c:	bic	r3, r3, #2
   19270:	str	r5, [r4, #8]
   19274:	strb	r3, [r4, #40]	; 0x28
   19278:	pop	{r4, r5, r6, r7, r8, pc}
   1927c:	mov	r1, r5
   19280:	ldr	r0, [r0, #36]	; 0x24
   19284:	blx	r3
   19288:	mov	r8, r0
   1928c:	b	191fc <_obstack_newchunk@@Base+0x88>
   19290:	ldr	r3, [r7, #4]
   19294:	tst	r2, #1
   19298:	str	r3, [r8, #4]
   1929c:	bne	192b0 <_obstack_newchunk@@Base+0x13c>
   192a0:	mov	r0, r7
   192a4:	ldr	r3, [r4, #32]
   192a8:	blx	r3
   192ac:	b	19260 <_obstack_newchunk@@Base+0xec>
   192b0:	mov	r1, r7
   192b4:	ldr	r3, [r4, #32]
   192b8:	ldr	r0, [r4, #36]	; 0x24
   192bc:	blx	r3
   192c0:	b	19260 <_obstack_newchunk@@Base+0xec>
   192c4:	andeq	fp, r2, r0, ror r1

000192c8 <_obstack_allocated_p@@Base>:
   192c8:	ldr	r0, [r0, #4]
   192cc:	cmp	r0, #0
   192d0:	bne	192e4 <_obstack_allocated_p@@Base+0x1c>
   192d4:	b	19300 <_obstack_allocated_p@@Base+0x38>
   192d8:	ldr	r0, [r0, #4]
   192dc:	cmp	r0, #0
   192e0:	bxeq	lr
   192e4:	cmp	r1, r0
   192e8:	bls	192d8 <_obstack_allocated_p@@Base+0x10>
   192ec:	ldr	r3, [r0]
   192f0:	cmp	r1, r3
   192f4:	bhi	192d8 <_obstack_allocated_p@@Base+0x10>
   192f8:	mov	r0, #1
   192fc:	bx	lr
   19300:	bx	lr

00019304 <_obstack_free@@Base>:
   19304:	push	{r4, r5, r6, lr}
   19308:	mov	r4, r0
   1930c:	ldr	r0, [r0, #4]
   19310:	mov	r6, r1
   19314:	cmp	r0, #0
   19318:	bne	19340 <_obstack_free@@Base+0x3c>
   1931c:	b	1938c <_obstack_free@@Base+0x88>
   19320:	ldr	r3, [r4, #32]
   19324:	blx	r3
   19328:	ldrb	r3, [r4, #40]	; 0x28
   1932c:	cmp	r5, #0
   19330:	orr	r3, r3, #2
   19334:	strb	r3, [r4, #40]	; 0x28
   19338:	beq	1938c <_obstack_free@@Base+0x88>
   1933c:	mov	r0, r5
   19340:	cmp	r6, r0
   19344:	bls	19354 <_obstack_free@@Base+0x50>
   19348:	ldr	r3, [r0]
   1934c:	cmp	r6, r3
   19350:	bls	19378 <_obstack_free@@Base+0x74>
   19354:	ldrb	r3, [r4, #40]	; 0x28
   19358:	ldr	r5, [r0, #4]
   1935c:	tst	r3, #1
   19360:	beq	19320 <_obstack_free@@Base+0x1c>
   19364:	mov	r1, r0
   19368:	ldr	r3, [r4, #32]
   1936c:	ldr	r0, [r4, #36]	; 0x24
   19370:	blx	r3
   19374:	b	19328 <_obstack_free@@Base+0x24>
   19378:	str	r6, [r4, #12]
   1937c:	str	r6, [r4, #8]
   19380:	str	r3, [r4, #16]
   19384:	str	r0, [r4, #4]
   19388:	pop	{r4, r5, r6, pc}
   1938c:	cmp	r6, #0
   19390:	bne	19398 <_obstack_free@@Base+0x94>
   19394:	pop	{r4, r5, r6, pc}
   19398:	bl	11370 <abort@plt>

0001939c <_obstack_memory_used@@Base>:
   1939c:	ldr	r3, [r0, #4]
   193a0:	cmp	r3, #0
   193a4:	beq	193c8 <_obstack_memory_used@@Base+0x2c>
   193a8:	mov	r0, #0
   193ac:	ldr	r2, [r3]
   193b0:	sub	r2, r2, r3
   193b4:	ldr	r3, [r3, #4]
   193b8:	add	r0, r0, r2
   193bc:	cmp	r3, #0
   193c0:	bne	193ac <_obstack_memory_used@@Base+0x10>
   193c4:	bx	lr
   193c8:	mov	r0, r3
   193cc:	bx	lr
   193d0:	push	{r4, r5, r6, lr}
   193d4:	subs	r4, r2, #0
   193d8:	mov	r6, r0
   193dc:	mov	r5, r1
   193e0:	beq	1940c <_obstack_memory_used@@Base+0x70>
   193e4:	mov	r1, r4
   193e8:	mvn	r0, #0
   193ec:	bl	194b4 <_obstack_memory_used@@Base+0x118>
   193f0:	cmp	r0, r5
   193f4:	bcs	1940c <_obstack_memory_used@@Base+0x70>
   193f8:	bl	11280 <__errno_location@plt>
   193fc:	mov	r3, #12
   19400:	str	r3, [r0]
   19404:	mov	r0, #0
   19408:	pop	{r4, r5, r6, pc}
   1940c:	mul	r1, r5, r4
   19410:	mov	r0, r6
   19414:	pop	{r4, r5, r6, lr}
   19418:	b	18e2c <__assert_fail@plt+0x7aa4>
   1941c:	push	{r4, r5, r6, lr}
   19420:	mov	r5, r1
   19424:	mov	r1, #0
   19428:	mov	r4, r2
   1942c:	bl	11310 <setlocale@plt>
   19430:	subs	r6, r0, #0
   19434:	beq	19490 <_obstack_memory_used@@Base+0xf4>
   19438:	bl	1125c <strlen@plt>
   1943c:	cmp	r4, r0
   19440:	bhi	19478 <_obstack_memory_used@@Base+0xdc>
   19444:	cmp	r4, #0
   19448:	bne	19454 <_obstack_memory_used@@Base+0xb8>
   1944c:	mov	r0, #34	; 0x22
   19450:	pop	{r4, r5, r6, pc}
   19454:	sub	r4, r4, #1
   19458:	mov	r1, r6
   1945c:	mov	r2, r4
   19460:	mov	r0, r5
   19464:	bl	110f4 <memcpy@plt>
   19468:	mov	r3, #0
   1946c:	strb	r3, [r5, r4]
   19470:	mov	r0, #34	; 0x22
   19474:	pop	{r4, r5, r6, pc}
   19478:	add	r2, r0, #1
   1947c:	mov	r1, r6
   19480:	mov	r0, r5
   19484:	bl	110f4 <memcpy@plt>
   19488:	mov	r0, #0
   1948c:	pop	{r4, r5, r6, pc}
   19490:	cmp	r4, #0
   19494:	beq	194a4 <_obstack_memory_used@@Base+0x108>
   19498:	strb	r6, [r5]
   1949c:	mov	r0, #22
   194a0:	pop	{r4, r5, r6, pc}
   194a4:	mov	r0, #22
   194a8:	pop	{r4, r5, r6, pc}
   194ac:	mov	r1, #0
   194b0:	b	11310 <setlocale@plt>
   194b4:	subs	r2, r1, #1
   194b8:	bxeq	lr
   194bc:	bcc	19694 <_obstack_memory_used@@Base+0x2f8>
   194c0:	cmp	r0, r1
   194c4:	bls	19678 <_obstack_memory_used@@Base+0x2dc>
   194c8:	tst	r1, r2
   194cc:	beq	19684 <_obstack_memory_used@@Base+0x2e8>
   194d0:	clz	r3, r0
   194d4:	clz	r2, r1
   194d8:	sub	r3, r2, r3
   194dc:	rsbs	r3, r3, #31
   194e0:	addne	r3, r3, r3, lsl #1
   194e4:	mov	r2, #0
   194e8:	addne	pc, pc, r3, lsl #2
   194ec:	nop			; (mov r0, r0)
   194f0:	cmp	r0, r1, lsl #31
   194f4:	adc	r2, r2, r2
   194f8:	subcs	r0, r0, r1, lsl #31
   194fc:	cmp	r0, r1, lsl #30
   19500:	adc	r2, r2, r2
   19504:	subcs	r0, r0, r1, lsl #30
   19508:	cmp	r0, r1, lsl #29
   1950c:	adc	r2, r2, r2
   19510:	subcs	r0, r0, r1, lsl #29
   19514:	cmp	r0, r1, lsl #28
   19518:	adc	r2, r2, r2
   1951c:	subcs	r0, r0, r1, lsl #28
   19520:	cmp	r0, r1, lsl #27
   19524:	adc	r2, r2, r2
   19528:	subcs	r0, r0, r1, lsl #27
   1952c:	cmp	r0, r1, lsl #26
   19530:	adc	r2, r2, r2
   19534:	subcs	r0, r0, r1, lsl #26
   19538:	cmp	r0, r1, lsl #25
   1953c:	adc	r2, r2, r2
   19540:	subcs	r0, r0, r1, lsl #25
   19544:	cmp	r0, r1, lsl #24
   19548:	adc	r2, r2, r2
   1954c:	subcs	r0, r0, r1, lsl #24
   19550:	cmp	r0, r1, lsl #23
   19554:	adc	r2, r2, r2
   19558:	subcs	r0, r0, r1, lsl #23
   1955c:	cmp	r0, r1, lsl #22
   19560:	adc	r2, r2, r2
   19564:	subcs	r0, r0, r1, lsl #22
   19568:	cmp	r0, r1, lsl #21
   1956c:	adc	r2, r2, r2
   19570:	subcs	r0, r0, r1, lsl #21
   19574:	cmp	r0, r1, lsl #20
   19578:	adc	r2, r2, r2
   1957c:	subcs	r0, r0, r1, lsl #20
   19580:	cmp	r0, r1, lsl #19
   19584:	adc	r2, r2, r2
   19588:	subcs	r0, r0, r1, lsl #19
   1958c:	cmp	r0, r1, lsl #18
   19590:	adc	r2, r2, r2
   19594:	subcs	r0, r0, r1, lsl #18
   19598:	cmp	r0, r1, lsl #17
   1959c:	adc	r2, r2, r2
   195a0:	subcs	r0, r0, r1, lsl #17
   195a4:	cmp	r0, r1, lsl #16
   195a8:	adc	r2, r2, r2
   195ac:	subcs	r0, r0, r1, lsl #16
   195b0:	cmp	r0, r1, lsl #15
   195b4:	adc	r2, r2, r2
   195b8:	subcs	r0, r0, r1, lsl #15
   195bc:	cmp	r0, r1, lsl #14
   195c0:	adc	r2, r2, r2
   195c4:	subcs	r0, r0, r1, lsl #14
   195c8:	cmp	r0, r1, lsl #13
   195cc:	adc	r2, r2, r2
   195d0:	subcs	r0, r0, r1, lsl #13
   195d4:	cmp	r0, r1, lsl #12
   195d8:	adc	r2, r2, r2
   195dc:	subcs	r0, r0, r1, lsl #12
   195e0:	cmp	r0, r1, lsl #11
   195e4:	adc	r2, r2, r2
   195e8:	subcs	r0, r0, r1, lsl #11
   195ec:	cmp	r0, r1, lsl #10
   195f0:	adc	r2, r2, r2
   195f4:	subcs	r0, r0, r1, lsl #10
   195f8:	cmp	r0, r1, lsl #9
   195fc:	adc	r2, r2, r2
   19600:	subcs	r0, r0, r1, lsl #9
   19604:	cmp	r0, r1, lsl #8
   19608:	adc	r2, r2, r2
   1960c:	subcs	r0, r0, r1, lsl #8
   19610:	cmp	r0, r1, lsl #7
   19614:	adc	r2, r2, r2
   19618:	subcs	r0, r0, r1, lsl #7
   1961c:	cmp	r0, r1, lsl #6
   19620:	adc	r2, r2, r2
   19624:	subcs	r0, r0, r1, lsl #6
   19628:	cmp	r0, r1, lsl #5
   1962c:	adc	r2, r2, r2
   19630:	subcs	r0, r0, r1, lsl #5
   19634:	cmp	r0, r1, lsl #4
   19638:	adc	r2, r2, r2
   1963c:	subcs	r0, r0, r1, lsl #4
   19640:	cmp	r0, r1, lsl #3
   19644:	adc	r2, r2, r2
   19648:	subcs	r0, r0, r1, lsl #3
   1964c:	cmp	r0, r1, lsl #2
   19650:	adc	r2, r2, r2
   19654:	subcs	r0, r0, r1, lsl #2
   19658:	cmp	r0, r1, lsl #1
   1965c:	adc	r2, r2, r2
   19660:	subcs	r0, r0, r1, lsl #1
   19664:	cmp	r0, r1
   19668:	adc	r2, r2, r2
   1966c:	subcs	r0, r0, r1
   19670:	mov	r0, r2
   19674:	bx	lr
   19678:	moveq	r0, #1
   1967c:	movne	r0, #0
   19680:	bx	lr
   19684:	clz	r2, r1
   19688:	rsb	r2, r2, #31
   1968c:	lsr	r0, r0, r2
   19690:	bx	lr
   19694:	cmp	r0, #0
   19698:	mvnne	r0, #0
   1969c:	b	19cf4 <_obstack_memory_used@@Base+0x958>
   196a0:	cmp	r1, #0
   196a4:	beq	19694 <_obstack_memory_used@@Base+0x2f8>
   196a8:	push	{r0, r1, lr}
   196ac:	bl	194b4 <_obstack_memory_used@@Base+0x118>
   196b0:	pop	{r1, r2, lr}
   196b4:	mul	r3, r2, r0
   196b8:	sub	r1, r1, r3
   196bc:	bx	lr
   196c0:	cmp	r1, #0
   196c4:	beq	198d0 <_obstack_memory_used@@Base+0x534>
   196c8:	eor	ip, r0, r1
   196cc:	rsbmi	r1, r1, #0
   196d0:	subs	r2, r1, #1
   196d4:	beq	1989c <_obstack_memory_used@@Base+0x500>
   196d8:	movs	r3, r0
   196dc:	rsbmi	r3, r0, #0
   196e0:	cmp	r3, r1
   196e4:	bls	198a8 <_obstack_memory_used@@Base+0x50c>
   196e8:	tst	r1, r2
   196ec:	beq	198b8 <_obstack_memory_used@@Base+0x51c>
   196f0:	clz	r2, r3
   196f4:	clz	r0, r1
   196f8:	sub	r2, r0, r2
   196fc:	rsbs	r2, r2, #31
   19700:	addne	r2, r2, r2, lsl #1
   19704:	mov	r0, #0
   19708:	addne	pc, pc, r2, lsl #2
   1970c:	nop			; (mov r0, r0)
   19710:	cmp	r3, r1, lsl #31
   19714:	adc	r0, r0, r0
   19718:	subcs	r3, r3, r1, lsl #31
   1971c:	cmp	r3, r1, lsl #30
   19720:	adc	r0, r0, r0
   19724:	subcs	r3, r3, r1, lsl #30
   19728:	cmp	r3, r1, lsl #29
   1972c:	adc	r0, r0, r0
   19730:	subcs	r3, r3, r1, lsl #29
   19734:	cmp	r3, r1, lsl #28
   19738:	adc	r0, r0, r0
   1973c:	subcs	r3, r3, r1, lsl #28
   19740:	cmp	r3, r1, lsl #27
   19744:	adc	r0, r0, r0
   19748:	subcs	r3, r3, r1, lsl #27
   1974c:	cmp	r3, r1, lsl #26
   19750:	adc	r0, r0, r0
   19754:	subcs	r3, r3, r1, lsl #26
   19758:	cmp	r3, r1, lsl #25
   1975c:	adc	r0, r0, r0
   19760:	subcs	r3, r3, r1, lsl #25
   19764:	cmp	r3, r1, lsl #24
   19768:	adc	r0, r0, r0
   1976c:	subcs	r3, r3, r1, lsl #24
   19770:	cmp	r3, r1, lsl #23
   19774:	adc	r0, r0, r0
   19778:	subcs	r3, r3, r1, lsl #23
   1977c:	cmp	r3, r1, lsl #22
   19780:	adc	r0, r0, r0
   19784:	subcs	r3, r3, r1, lsl #22
   19788:	cmp	r3, r1, lsl #21
   1978c:	adc	r0, r0, r0
   19790:	subcs	r3, r3, r1, lsl #21
   19794:	cmp	r3, r1, lsl #20
   19798:	adc	r0, r0, r0
   1979c:	subcs	r3, r3, r1, lsl #20
   197a0:	cmp	r3, r1, lsl #19
   197a4:	adc	r0, r0, r0
   197a8:	subcs	r3, r3, r1, lsl #19
   197ac:	cmp	r3, r1, lsl #18
   197b0:	adc	r0, r0, r0
   197b4:	subcs	r3, r3, r1, lsl #18
   197b8:	cmp	r3, r1, lsl #17
   197bc:	adc	r0, r0, r0
   197c0:	subcs	r3, r3, r1, lsl #17
   197c4:	cmp	r3, r1, lsl #16
   197c8:	adc	r0, r0, r0
   197cc:	subcs	r3, r3, r1, lsl #16
   197d0:	cmp	r3, r1, lsl #15
   197d4:	adc	r0, r0, r0
   197d8:	subcs	r3, r3, r1, lsl #15
   197dc:	cmp	r3, r1, lsl #14
   197e0:	adc	r0, r0, r0
   197e4:	subcs	r3, r3, r1, lsl #14
   197e8:	cmp	r3, r1, lsl #13
   197ec:	adc	r0, r0, r0
   197f0:	subcs	r3, r3, r1, lsl #13
   197f4:	cmp	r3, r1, lsl #12
   197f8:	adc	r0, r0, r0
   197fc:	subcs	r3, r3, r1, lsl #12
   19800:	cmp	r3, r1, lsl #11
   19804:	adc	r0, r0, r0
   19808:	subcs	r3, r3, r1, lsl #11
   1980c:	cmp	r3, r1, lsl #10
   19810:	adc	r0, r0, r0
   19814:	subcs	r3, r3, r1, lsl #10
   19818:	cmp	r3, r1, lsl #9
   1981c:	adc	r0, r0, r0
   19820:	subcs	r3, r3, r1, lsl #9
   19824:	cmp	r3, r1, lsl #8
   19828:	adc	r0, r0, r0
   1982c:	subcs	r3, r3, r1, lsl #8
   19830:	cmp	r3, r1, lsl #7
   19834:	adc	r0, r0, r0
   19838:	subcs	r3, r3, r1, lsl #7
   1983c:	cmp	r3, r1, lsl #6
   19840:	adc	r0, r0, r0
   19844:	subcs	r3, r3, r1, lsl #6
   19848:	cmp	r3, r1, lsl #5
   1984c:	adc	r0, r0, r0
   19850:	subcs	r3, r3, r1, lsl #5
   19854:	cmp	r3, r1, lsl #4
   19858:	adc	r0, r0, r0
   1985c:	subcs	r3, r3, r1, lsl #4
   19860:	cmp	r3, r1, lsl #3
   19864:	adc	r0, r0, r0
   19868:	subcs	r3, r3, r1, lsl #3
   1986c:	cmp	r3, r1, lsl #2
   19870:	adc	r0, r0, r0
   19874:	subcs	r3, r3, r1, lsl #2
   19878:	cmp	r3, r1, lsl #1
   1987c:	adc	r0, r0, r0
   19880:	subcs	r3, r3, r1, lsl #1
   19884:	cmp	r3, r1
   19888:	adc	r0, r0, r0
   1988c:	subcs	r3, r3, r1
   19890:	cmp	ip, #0
   19894:	rsbmi	r0, r0, #0
   19898:	bx	lr
   1989c:	teq	ip, r0
   198a0:	rsbmi	r0, r0, #0
   198a4:	bx	lr
   198a8:	movcc	r0, #0
   198ac:	asreq	r0, ip, #31
   198b0:	orreq	r0, r0, #1
   198b4:	bx	lr
   198b8:	clz	r2, r1
   198bc:	rsb	r2, r2, #31
   198c0:	cmp	ip, #0
   198c4:	lsr	r0, r3, r2
   198c8:	rsbmi	r0, r0, #0
   198cc:	bx	lr
   198d0:	cmp	r0, #0
   198d4:	mvngt	r0, #-2147483648	; 0x80000000
   198d8:	movlt	r0, #-2147483648	; 0x80000000
   198dc:	b	19cf4 <_obstack_memory_used@@Base+0x958>
   198e0:	cmp	r1, #0
   198e4:	beq	198d0 <_obstack_memory_used@@Base+0x534>
   198e8:	push	{r0, r1, lr}
   198ec:	bl	196c8 <_obstack_memory_used@@Base+0x32c>
   198f0:	pop	{r1, r2, lr}
   198f4:	mul	r3, r2, r0
   198f8:	sub	r1, r1, r3
   198fc:	bx	lr
   19900:	eor	r1, r1, #-2147483648	; 0x80000000
   19904:	b	1990c <_obstack_memory_used@@Base+0x570>
   19908:	eor	r3, r3, #-2147483648	; 0x80000000
   1990c:	push	{r4, r5, lr}
   19910:	lsl	r4, r1, #1
   19914:	lsl	r5, r3, #1
   19918:	teq	r4, r5
   1991c:	teqeq	r0, r2
   19920:	orrsne	ip, r4, r0
   19924:	orrsne	ip, r5, r2
   19928:	mvnsne	ip, r4, asr #21
   1992c:	mvnsne	ip, r5, asr #21
   19930:	beq	19b1c <_obstack_memory_used@@Base+0x780>
   19934:	lsr	r4, r4, #21
   19938:	rsbs	r5, r4, r5, lsr #21
   1993c:	rsblt	r5, r5, #0
   19940:	ble	19960 <_obstack_memory_used@@Base+0x5c4>
   19944:	add	r4, r4, r5
   19948:	eor	r2, r0, r2
   1994c:	eor	r3, r1, r3
   19950:	eor	r0, r2, r0
   19954:	eor	r1, r3, r1
   19958:	eor	r2, r0, r2
   1995c:	eor	r3, r1, r3
   19960:	cmp	r5, #54	; 0x36
   19964:	pophi	{r4, r5, pc}
   19968:	tst	r1, #-2147483648	; 0x80000000
   1996c:	lsl	r1, r1, #12
   19970:	mov	ip, #1048576	; 0x100000
   19974:	orr	r1, ip, r1, lsr #12
   19978:	beq	19984 <_obstack_memory_used@@Base+0x5e8>
   1997c:	rsbs	r0, r0, #0
   19980:	rsc	r1, r1, #0
   19984:	tst	r3, #-2147483648	; 0x80000000
   19988:	lsl	r3, r3, #12
   1998c:	orr	r3, ip, r3, lsr #12
   19990:	beq	1999c <_obstack_memory_used@@Base+0x600>
   19994:	rsbs	r2, r2, #0
   19998:	rsc	r3, r3, #0
   1999c:	teq	r4, r5
   199a0:	beq	19b04 <_obstack_memory_used@@Base+0x768>
   199a4:	sub	r4, r4, #1
   199a8:	rsbs	lr, r5, #32
   199ac:	blt	199c8 <_obstack_memory_used@@Base+0x62c>
   199b0:	lsl	ip, r2, lr
   199b4:	adds	r0, r0, r2, lsr r5
   199b8:	adc	r1, r1, #0
   199bc:	adds	r0, r0, r3, lsl lr
   199c0:	adcs	r1, r1, r3, asr r5
   199c4:	b	199e4 <_obstack_memory_used@@Base+0x648>
   199c8:	sub	r5, r5, #32
   199cc:	add	lr, lr, #32
   199d0:	cmp	r2, #1
   199d4:	lsl	ip, r3, lr
   199d8:	orrcs	ip, ip, #2
   199dc:	adds	r0, r0, r3, asr r5
   199e0:	adcs	r1, r1, r3, asr #31
   199e4:	and	r5, r1, #-2147483648	; 0x80000000
   199e8:	bpl	199f8 <_obstack_memory_used@@Base+0x65c>
   199ec:	rsbs	ip, ip, #0
   199f0:	rscs	r0, r0, #0
   199f4:	rsc	r1, r1, #0
   199f8:	cmp	r1, #1048576	; 0x100000
   199fc:	bcc	19a3c <_obstack_memory_used@@Base+0x6a0>
   19a00:	cmp	r1, #2097152	; 0x200000
   19a04:	bcc	19a24 <_obstack_memory_used@@Base+0x688>
   19a08:	lsrs	r1, r1, #1
   19a0c:	rrxs	r0, r0
   19a10:	rrx	ip, ip
   19a14:	add	r4, r4, #1
   19a18:	lsl	r2, r4, #21
   19a1c:	cmn	r2, #4194304	; 0x400000
   19a20:	bcs	19b7c <_obstack_memory_used@@Base+0x7e0>
   19a24:	cmp	ip, #-2147483648	; 0x80000000
   19a28:	lsrseq	ip, r0, #1
   19a2c:	adcs	r0, r0, #0
   19a30:	adc	r1, r1, r4, lsl #20
   19a34:	orr	r1, r1, r5
   19a38:	pop	{r4, r5, pc}
   19a3c:	lsls	ip, ip, #1
   19a40:	adcs	r0, r0, r0
   19a44:	adc	r1, r1, r1
   19a48:	tst	r1, #1048576	; 0x100000
   19a4c:	sub	r4, r4, #1
   19a50:	bne	19a24 <_obstack_memory_used@@Base+0x688>
   19a54:	teq	r1, #0
   19a58:	moveq	r1, r0
   19a5c:	moveq	r0, #0
   19a60:	clz	r3, r1
   19a64:	addeq	r3, r3, #32
   19a68:	sub	r3, r3, #11
   19a6c:	subs	r2, r3, #32
   19a70:	bge	19a94 <_obstack_memory_used@@Base+0x6f8>
   19a74:	adds	r2, r2, #12
   19a78:	ble	19a90 <_obstack_memory_used@@Base+0x6f4>
   19a7c:	add	ip, r2, #20
   19a80:	rsb	r2, r2, #12
   19a84:	lsl	r0, r1, ip
   19a88:	lsr	r1, r1, r2
   19a8c:	b	19aa4 <_obstack_memory_used@@Base+0x708>
   19a90:	add	r2, r2, #20
   19a94:	rsble	ip, r2, #32
   19a98:	lsl	r1, r1, r2
   19a9c:	orrle	r1, r1, r0, lsr ip
   19aa0:	lslle	r0, r0, r2
   19aa4:	subs	r4, r4, r3
   19aa8:	addge	r1, r1, r4, lsl #20
   19aac:	orrge	r1, r1, r5
   19ab0:	popge	{r4, r5, pc}
   19ab4:	mvn	r4, r4
   19ab8:	subs	r4, r4, #31
   19abc:	bge	19af8 <_obstack_memory_used@@Base+0x75c>
   19ac0:	adds	r4, r4, #12
   19ac4:	bgt	19ae0 <_obstack_memory_used@@Base+0x744>
   19ac8:	add	r4, r4, #20
   19acc:	rsb	r2, r4, #32
   19ad0:	lsr	r0, r0, r4
   19ad4:	orr	r0, r0, r1, lsl r2
   19ad8:	orr	r1, r5, r1, lsr r4
   19adc:	pop	{r4, r5, pc}
   19ae0:	rsb	r4, r4, #12
   19ae4:	rsb	r2, r4, #32
   19ae8:	lsr	r0, r0, r2
   19aec:	orr	r0, r0, r1, lsl r4
   19af0:	mov	r1, r5
   19af4:	pop	{r4, r5, pc}
   19af8:	lsr	r0, r1, r4
   19afc:	mov	r1, r5
   19b00:	pop	{r4, r5, pc}
   19b04:	teq	r4, #0
   19b08:	eor	r3, r3, #1048576	; 0x100000
   19b0c:	eoreq	r1, r1, #1048576	; 0x100000
   19b10:	addeq	r4, r4, #1
   19b14:	subne	r5, r5, #1
   19b18:	b	199a4 <_obstack_memory_used@@Base+0x608>
   19b1c:	mvns	ip, r4, asr #21
   19b20:	mvnsne	ip, r5, asr #21
   19b24:	beq	19b8c <_obstack_memory_used@@Base+0x7f0>
   19b28:	teq	r4, r5
   19b2c:	teqeq	r0, r2
   19b30:	beq	19b44 <_obstack_memory_used@@Base+0x7a8>
   19b34:	orrs	ip, r4, r0
   19b38:	moveq	r1, r3
   19b3c:	moveq	r0, r2
   19b40:	pop	{r4, r5, pc}
   19b44:	teq	r1, r3
   19b48:	movne	r1, #0
   19b4c:	movne	r0, #0
   19b50:	popne	{r4, r5, pc}
   19b54:	lsrs	ip, r4, #21
   19b58:	bne	19b6c <_obstack_memory_used@@Base+0x7d0>
   19b5c:	lsls	r0, r0, #1
   19b60:	adcs	r1, r1, r1
   19b64:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19b68:	pop	{r4, r5, pc}
   19b6c:	adds	r4, r4, #4194304	; 0x400000
   19b70:	addcc	r1, r1, #1048576	; 0x100000
   19b74:	popcc	{r4, r5, pc}
   19b78:	and	r5, r1, #-2147483648	; 0x80000000
   19b7c:	orr	r1, r5, #2130706432	; 0x7f000000
   19b80:	orr	r1, r1, #15728640	; 0xf00000
   19b84:	mov	r0, #0
   19b88:	pop	{r4, r5, pc}
   19b8c:	mvns	ip, r4, asr #21
   19b90:	movne	r1, r3
   19b94:	movne	r0, r2
   19b98:	mvnseq	ip, r5, asr #21
   19b9c:	movne	r3, r1
   19ba0:	movne	r2, r0
   19ba4:	orrs	r4, r0, r1, lsl #12
   19ba8:	orrseq	r5, r2, r3, lsl #12
   19bac:	teqeq	r1, r3
   19bb0:	orrne	r1, r1, #524288	; 0x80000
   19bb4:	pop	{r4, r5, pc}
   19bb8:	teq	r0, #0
   19bbc:	moveq	r1, #0
   19bc0:	bxeq	lr
   19bc4:	push	{r4, r5, lr}
   19bc8:	mov	r4, #1024	; 0x400
   19bcc:	add	r4, r4, #50	; 0x32
   19bd0:	mov	r5, #0
   19bd4:	mov	r1, #0
   19bd8:	b	19a54 <_obstack_memory_used@@Base+0x6b8>
   19bdc:	teq	r0, #0
   19be0:	moveq	r1, #0
   19be4:	bxeq	lr
   19be8:	push	{r4, r5, lr}
   19bec:	mov	r4, #1024	; 0x400
   19bf0:	add	r4, r4, #50	; 0x32
   19bf4:	ands	r5, r0, #-2147483648	; 0x80000000
   19bf8:	rsbmi	r0, r0, #0
   19bfc:	mov	r1, #0
   19c00:	b	19a54 <_obstack_memory_used@@Base+0x6b8>
   19c04:	lsls	r2, r0, #1
   19c08:	asr	r1, r2, #3
   19c0c:	rrx	r1, r1
   19c10:	lsl	r0, r2, #28
   19c14:	andsne	r3, r2, #-16777216	; 0xff000000
   19c18:	teqne	r3, #-16777216	; 0xff000000
   19c1c:	eorne	r1, r1, #939524096	; 0x38000000
   19c20:	bxne	lr
   19c24:	teq	r2, #0
   19c28:	teqne	r3, #-16777216	; 0xff000000
   19c2c:	bxeq	lr
   19c30:	push	{r4, r5, lr}
   19c34:	mov	r4, #896	; 0x380
   19c38:	and	r5, r1, #-2147483648	; 0x80000000
   19c3c:	bic	r1, r1, #-2147483648	; 0x80000000
   19c40:	b	19a54 <_obstack_memory_used@@Base+0x6b8>
   19c44:	orrs	r2, r0, r1
   19c48:	bxeq	lr
   19c4c:	push	{r4, r5, lr}
   19c50:	mov	r5, #0
   19c54:	b	19c74 <_obstack_memory_used@@Base+0x8d8>
   19c58:	orrs	r2, r0, r1
   19c5c:	bxeq	lr
   19c60:	push	{r4, r5, lr}
   19c64:	ands	r5, r1, #-2147483648	; 0x80000000
   19c68:	bpl	19c74 <_obstack_memory_used@@Base+0x8d8>
   19c6c:	rsbs	r0, r0, #0
   19c70:	rsc	r1, r1, #0
   19c74:	mov	r4, #1024	; 0x400
   19c78:	add	r4, r4, #50	; 0x32
   19c7c:	lsrs	ip, r1, #22
   19c80:	beq	199f8 <_obstack_memory_used@@Base+0x65c>
   19c84:	mov	r2, #3
   19c88:	lsrs	ip, ip, #3
   19c8c:	addne	r2, r2, #3
   19c90:	lsrs	ip, ip, #3
   19c94:	addne	r2, r2, #3
   19c98:	add	r2, r2, ip, lsr #3
   19c9c:	rsb	r3, r2, #32
   19ca0:	lsl	ip, r0, r3
   19ca4:	lsr	r0, r0, r2
   19ca8:	orr	r0, r0, r1, lsl r3
   19cac:	lsr	r1, r1, r2
   19cb0:	add	r4, r4, r2
   19cb4:	b	199f8 <_obstack_memory_used@@Base+0x65c>
   19cb8:	cmp	r3, #0
   19cbc:	cmpeq	r2, #0
   19cc0:	bne	19cd8 <_obstack_memory_used@@Base+0x93c>
   19cc4:	cmp	r1, #0
   19cc8:	cmpeq	r0, #0
   19ccc:	mvnne	r1, #0
   19cd0:	mvnne	r0, #0
   19cd4:	b	19cf4 <_obstack_memory_used@@Base+0x958>
   19cd8:	sub	sp, sp, #8
   19cdc:	push	{sp, lr}
   19ce0:	bl	19d04 <_obstack_memory_used@@Base+0x968>
   19ce4:	ldr	lr, [sp, #4]
   19ce8:	add	sp, sp, #8
   19cec:	pop	{r2, r3}
   19cf0:	bx	lr
   19cf4:	push	{r1, lr}
   19cf8:	mov	r0, #8
   19cfc:	bl	1107c <raise@plt>
   19d00:	pop	{r1, pc}
   19d04:	cmp	r1, r3
   19d08:	push	{r4, r5, r6, r7, r8, r9, lr}
   19d0c:	cmpeq	r0, r2
   19d10:	mov	r4, r0
   19d14:	mov	r5, r1
   19d18:	ldr	r9, [sp, #28]
   19d1c:	movcc	r0, #0
   19d20:	movcc	r1, #0
   19d24:	bcc	19e1c <_obstack_memory_used@@Base+0xa80>
   19d28:	cmp	r3, #0
   19d2c:	clzeq	ip, r2
   19d30:	clzne	ip, r3
   19d34:	addeq	ip, ip, #32
   19d38:	cmp	r5, #0
   19d3c:	clzeq	r1, r4
   19d40:	addeq	r1, r1, #32
   19d44:	clzne	r1, r5
   19d48:	sub	ip, ip, r1
   19d4c:	sub	lr, ip, #32
   19d50:	lsl	r7, r3, ip
   19d54:	rsb	r8, ip, #32
   19d58:	orr	r7, r7, r2, lsl lr
   19d5c:	orr	r7, r7, r2, lsr r8
   19d60:	lsl	r6, r2, ip
   19d64:	cmp	r5, r7
   19d68:	cmpeq	r4, r6
   19d6c:	movcc	r0, #0
   19d70:	movcc	r1, #0
   19d74:	bcc	19d90 <_obstack_memory_used@@Base+0x9f4>
   19d78:	mov	r3, #1
   19d7c:	subs	r4, r4, r6
   19d80:	lsl	r1, r3, lr
   19d84:	lsl	r0, r3, ip
   19d88:	orr	r1, r1, r3, lsr r8
   19d8c:	sbc	r5, r5, r7
   19d90:	cmp	ip, #0
   19d94:	beq	19e1c <_obstack_memory_used@@Base+0xa80>
   19d98:	lsrs	r3, r7, #1
   19d9c:	rrx	r2, r6
   19da0:	mov	r6, ip
   19da4:	b	19dc8 <_obstack_memory_used@@Base+0xa2c>
   19da8:	subs	r4, r4, r2
   19dac:	sbc	r5, r5, r3
   19db0:	adds	r4, r4, r4
   19db4:	adc	r5, r5, r5
   19db8:	adds	r4, r4, #1
   19dbc:	adc	r5, r5, #0
   19dc0:	subs	r6, r6, #1
   19dc4:	beq	19de4 <_obstack_memory_used@@Base+0xa48>
   19dc8:	cmp	r5, r3
   19dcc:	cmpeq	r4, r2
   19dd0:	bcs	19da8 <_obstack_memory_used@@Base+0xa0c>
   19dd4:	adds	r4, r4, r4
   19dd8:	adc	r5, r5, r5
   19ddc:	subs	r6, r6, #1
   19de0:	bne	19dc8 <_obstack_memory_used@@Base+0xa2c>
   19de4:	lsr	r6, r4, ip
   19de8:	lsr	r7, r5, ip
   19dec:	orr	r6, r6, r5, lsl r8
   19df0:	adds	r2, r0, r4
   19df4:	orr	r6, r6, r5, lsr lr
   19df8:	adc	r3, r1, r5
   19dfc:	lsl	r1, r7, ip
   19e00:	orr	r1, r1, r6, lsl lr
   19e04:	lsl	r0, r6, ip
   19e08:	orr	r1, r1, r6, lsr r8
   19e0c:	subs	r0, r2, r0
   19e10:	mov	r4, r6
   19e14:	mov	r5, r7
   19e18:	sbc	r1, r3, r1
   19e1c:	cmp	r9, #0
   19e20:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19e24:	strd	r4, [r9]
   19e28:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19e2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e30:	mov	r7, r0
   19e34:	ldr	r6, [pc, #72]	; 19e84 <_obstack_memory_used@@Base+0xae8>
   19e38:	ldr	r5, [pc, #72]	; 19e88 <_obstack_memory_used@@Base+0xaec>
   19e3c:	add	r6, pc, r6
   19e40:	add	r5, pc, r5
   19e44:	sub	r6, r6, r5
   19e48:	mov	r8, r1
   19e4c:	mov	r9, r2
   19e50:	bl	11044 <calloc@plt-0x20>
   19e54:	asrs	r6, r6, #2
   19e58:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e5c:	mov	r4, #0
   19e60:	add	r4, r4, #1
   19e64:	ldr	r3, [r5], #4
   19e68:	mov	r2, r9
   19e6c:	mov	r1, r8
   19e70:	mov	r0, r7
   19e74:	blx	r3
   19e78:	cmp	r6, r4
   19e7c:	bne	19e60 <_obstack_memory_used@@Base+0xac4>
   19e80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e84:	andeq	r1, r1, ip, asr #1
   19e88:	andeq	r1, r1, r4, asr #1
   19e8c:	bx	lr
   19e90:	ldr	r3, [pc, #12]	; 19ea4 <_obstack_memory_used@@Base+0xb08>
   19e94:	mov	r1, #0
   19e98:	add	r3, pc, r3
   19e9c:	ldr	r2, [r3]
   19ea0:	b	1128c <__cxa_atexit@plt>
   19ea4:	andeq	r1, r1, r4, lsl #5

Disassembly of section .fini:

00019ea8 <.fini>:
   19ea8:	push	{r3, lr}
   19eac:	pop	{r3, pc}
