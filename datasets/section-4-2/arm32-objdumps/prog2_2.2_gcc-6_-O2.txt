
../repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

000106cc <.init>:
   106cc:	push	{r3, lr}
   106d0:	bl	1096c <_start@@Base+0x3c>
   106d4:	pop	{r3, pc}

Disassembly of section .plt:

000106d8 <printf@plt-0x14>:
   106d8:	push	{lr}		; (str lr, [sp, #-4]!)
   106dc:	ldr	lr, [pc, #4]	; 106e8 <printf@plt-0x4>
   106e0:	add	lr, pc, lr
   106e4:	ldr	pc, [lr, #8]!
   106e8:	andeq	r0, r1, r8, lsl r9

000106ec <printf@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2328]!	; 0x918

000106f8 <free@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2320]!	; 0x910

00010704 <fgets@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2312]!	; 0x908

00010710 <memcpy@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2304]!	; 0x900

0001071c <realloc@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2296]!	; 0x8f8

00010728 <puts@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2288]!	; 0x8f0

00010734 <malloc@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #16, 20	; 0x10000
   1073c:	ldr	pc, [ip, #2280]!	; 0x8e8

00010740 <__libc_start_main@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #16, 20	; 0x10000
   10748:	ldr	pc, [ip, #2272]!	; 0x8e0

0001074c <__gmon_start__@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #16, 20	; 0x10000
   10754:	ldr	pc, [ip, #2264]!	; 0x8d8

00010758 <strlen@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #16, 20	; 0x10000
   10760:	ldr	pc, [ip, #2256]!	; 0x8d0

00010764 <__isoc99_scanf@plt>:
   10764:	add	ip, pc, #0, 12
   10768:	add	ip, ip, #16, 20	; 0x10000
   1076c:	ldr	pc, [ip, #2248]!	; 0x8c8

00010770 <abort@plt>:
   10770:	add	ip, pc, #0, 12
   10774:	add	ip, ip, #16, 20	; 0x10000
   10778:	ldr	pc, [ip, #2240]!	; 0x8c0

0001077c <getc@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #16, 20	; 0x10000
   10784:	ldr	pc, [ip, #2232]!	; 0x8b8

Disassembly of section .text:

00010788 <main@@Base>:
   10788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1078c:	mov	r0, #12
   10790:	sub	sp, sp, #116	; 0x74
   10794:	bl	10734 <malloc@plt>
   10798:	ldr	r3, [pc, #372]	; 10914 <main@@Base+0x18c>
   1079c:	ldr	r2, [pc, #372]	; 10918 <main@@Base+0x190>
   107a0:	add	r3, pc, r3
   107a4:	mov	r1, #0
   107a8:	ldr	r8, [pc, #364]	; 1091c <main@@Base+0x194>
   107ac:	ldr	r7, [pc, #364]	; 10920 <main@@Base+0x198>
   107b0:	add	r8, pc, r8
   107b4:	add	r7, pc, r7
   107b8:	add	r6, sp, #28
   107bc:	mov	r5, #3
   107c0:	str	r1, [r0]
   107c4:	str	r1, [r0, #4]
   107c8:	str	r1, [r0, #8]
   107cc:	ldr	r4, [r3, r2]
   107d0:	ldr	r2, [pc, #332]	; 10924 <main@@Base+0x19c>
   107d4:	ldr	r1, [pc, #332]	; 10928 <main@@Base+0x1a0>
   107d8:	add	r2, pc, r2
   107dc:	str	r2, [sp, #20]
   107e0:	ldr	r2, [pc, #324]	; 1092c <main@@Base+0x1a4>
   107e4:	add	r1, pc, r1
   107e8:	add	r2, pc, r2
   107ec:	mov	fp, r1
   107f0:	str	r2, [sp, #16]
   107f4:	sub	r2, r0, #4
   107f8:	str	r2, [sp, #12]
   107fc:	str	r0, [sp, #4]
   10800:	ldr	r9, [sp, #12]
   10804:	mov	sl, #0
   10808:	add	sl, sl, #1
   1080c:	mov	r1, sl
   10810:	mov	r0, fp
   10814:	bl	106ec <printf@plt>
   10818:	ldr	r3, [r9, #4]!
   1081c:	subs	r0, r3, #0
   10820:	ldreq	r0, [sp, #20]
   10824:	bl	10728 <puts@plt>
   10828:	cmp	sl, #3
   1082c:	bne	10808 <main@@Base+0x80>
   10830:	mov	r1, r5
   10834:	mov	r0, r8
   10838:	bl	106ec <printf@plt>
   1083c:	mov	r1, r6
   10840:	mov	r0, r7
   10844:	bl	10764 <__isoc99_scanf@plt>
   10848:	ldr	r0, [r4]
   1084c:	bl	1077c <getc@plt>
   10850:	ldr	r9, [sp, #28]
   10854:	cmp	r9, #3
   10858:	bhi	10830 <main@@Base+0xa8>
   1085c:	cmp	r9, #0
   10860:	beq	108e4 <main@@Base+0x15c>
   10864:	add	r9, sp, #32
   10868:	ldr	r0, [sp, #16]
   1086c:	bl	106ec <printf@plt>
   10870:	ldr	r2, [r4]
   10874:	mov	r1, #80	; 0x50
   10878:	mov	r0, r9
   1087c:	bl	10704 <fgets@plt>
   10880:	mov	r0, r9
   10884:	bl	10758 <strlen@plt>
   10888:	add	r3, sp, #112	; 0x70
   1088c:	mov	r2, #0
   10890:	ldr	sl, [sp, #28]
   10894:	sub	sl, sl, #-1073741823	; 0xc0000001
   10898:	add	r3, r3, r0
   1089c:	mov	r0, r9
   108a0:	strb	r2, [r3, #-81]	; 0xffffffaf
   108a4:	bl	10758 <strlen@plt>
   108a8:	ldr	r3, [sp, #4]
   108ac:	add	r2, r0, #1
   108b0:	mov	r1, r2
   108b4:	ldr	r0, [r3, sl, lsl #2]
   108b8:	str	r2, [sp, #8]
   108bc:	bl	1071c <realloc@plt>
   108c0:	ldr	r3, [sp, #28]
   108c4:	ldr	ip, [sp, #4]
   108c8:	sub	r3, r3, #-1073741823	; 0xc0000001
   108cc:	ldr	r2, [sp, #8]
   108d0:	mov	r1, r9
   108d4:	str	r0, [ip, sl, lsl #2]
   108d8:	ldr	r0, [ip, r3, lsl #2]
   108dc:	bl	10710 <memcpy@plt>
   108e0:	b	10800 <main@@Base+0x78>
   108e4:	ldr	fp, [sp, #4]
   108e8:	ldr	r0, [fp]
   108ec:	bl	106f8 <free@plt>
   108f0:	ldr	r0, [fp, #4]
   108f4:	bl	106f8 <free@plt>
   108f8:	ldr	r0, [fp, #8]
   108fc:	bl	106f8 <free@plt>
   10900:	mov	r0, fp
   10904:	bl	106f8 <free@plt>
   10908:	mov	r0, r9
   1090c:	add	sp, sp, #116	; 0x74
   10910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10914:	andeq	r0, r1, r8, asr r8
   10918:	andeq	r0, r0, r4, asr #32
   1091c:	andeq	r0, r0, r0, lsr #6
   10920:	andeq	r0, r0, r0, asr #6
   10924:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10928:	ldrdeq	r0, [r0], -ip
   1092c:	andeq	r0, r0, r0, lsl r3

00010930 <_start@@Base>:
   10930:	mov	fp, #0
   10934:	mov	lr, #0
   10938:	pop	{r1}		; (ldr r1, [sp], #4)
   1093c:	mov	r2, sp
   10940:	push	{r2}		; (str r2, [sp, #-4]!)
   10944:	push	{r0}		; (str r0, [sp, #-4]!)
   10948:	ldr	ip, [pc, #16]	; 10960 <_start@@Base+0x30>
   1094c:	push	{ip}		; (str ip, [sp, #-4]!)
   10950:	ldr	r0, [pc, #12]	; 10964 <_start@@Base+0x34>
   10954:	ldr	r3, [pc, #12]	; 10968 <_start@@Base+0x38>
   10958:	bl	10740 <__libc_start_main@plt>
   1095c:	bl	10770 <abort@plt>
   10960:			; <UNDEFINED> instruction: 0x00010ab8
   10964:	andeq	r0, r1, r8, lsl #15
   10968:	andeq	r0, r1, r8, asr sl
   1096c:	ldr	r3, [pc, #20]	; 10988 <_start@@Base+0x58>
   10970:	ldr	r2, [pc, #20]	; 1098c <_start@@Base+0x5c>
   10974:	add	r3, pc, r3
   10978:	ldr	r2, [r3, r2]
   1097c:	cmp	r2, #0
   10980:	bxeq	lr
   10984:	b	1074c <__gmon_start__@plt>
   10988:	andeq	r0, r1, r4, lsl #13
   1098c:	andeq	r0, r0, r0, asr #32
   10990:	ldr	r3, [pc, #28]	; 109b4 <_start@@Base+0x84>
   10994:	ldr	r0, [pc, #28]	; 109b8 <_start@@Base+0x88>
   10998:	sub	r3, r3, r0
   1099c:	cmp	r3, #6
   109a0:	bxls	lr
   109a4:	ldr	r3, [pc, #16]	; 109bc <_start@@Base+0x8c>
   109a8:	cmp	r3, #0
   109ac:	bxeq	lr
   109b0:	bx	r3
   109b4:	andeq	r1, r2, r3, asr r0
   109b8:	andeq	r1, r2, r0, asr r0
   109bc:	andeq	r0, r0, r0
   109c0:	ldr	r1, [pc, #36]	; 109ec <_start@@Base+0xbc>
   109c4:	ldr	r0, [pc, #36]	; 109f0 <_start@@Base+0xc0>
   109c8:	sub	r1, r1, r0
   109cc:	asr	r1, r1, #2
   109d0:	add	r1, r1, r1, lsr #31
   109d4:	asrs	r1, r1, #1
   109d8:	bxeq	lr
   109dc:	ldr	r3, [pc, #16]	; 109f4 <_start@@Base+0xc4>
   109e0:	cmp	r3, #0
   109e4:	bxeq	lr
   109e8:	bx	r3
   109ec:	andeq	r1, r2, r0, asr r0
   109f0:	andeq	r1, r2, r0, asr r0
   109f4:	andeq	r0, r0, r0
   109f8:	push	{r4, lr}
   109fc:	ldr	r4, [pc, #24]	; 10a1c <_start@@Base+0xec>
   10a00:	ldrb	r3, [r4]
   10a04:	cmp	r3, #0
   10a08:	popne	{r4, pc}
   10a0c:	bl	10990 <_start@@Base+0x60>
   10a10:	mov	r3, #1
   10a14:	strb	r3, [r4]
   10a18:	pop	{r4, pc}
   10a1c:	andeq	r1, r2, r0, asr r0
   10a20:	ldr	r0, [pc, #40]	; 10a50 <_start@@Base+0x120>
   10a24:	ldr	r3, [r0]
   10a28:	cmp	r3, #0
   10a2c:	bne	10a34 <_start@@Base+0x104>
   10a30:	b	109c0 <_start@@Base+0x90>
   10a34:	ldr	r3, [pc, #24]	; 10a54 <_start@@Base+0x124>
   10a38:	cmp	r3, #0
   10a3c:	beq	10a30 <_start@@Base+0x100>
   10a40:	push	{r4, lr}
   10a44:	blx	r3
   10a48:	pop	{r4, lr}
   10a4c:	b	109c0 <_start@@Base+0x90>
   10a50:	andeq	r0, r2, r4, lsl pc
   10a54:	andeq	r0, r0, r0

00010a58 <__libc_csu_init@@Base>:
   10a58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a5c:	mov	r7, r0
   10a60:	ldr	r6, [pc, #72]	; 10ab0 <__libc_csu_init@@Base+0x58>
   10a64:	ldr	r5, [pc, #72]	; 10ab4 <__libc_csu_init@@Base+0x5c>
   10a68:	add	r6, pc, r6
   10a6c:	add	r5, pc, r5
   10a70:	sub	r6, r6, r5
   10a74:	mov	r8, r1
   10a78:	mov	r9, r2
   10a7c:	bl	106cc <printf@plt-0x20>
   10a80:	asrs	r6, r6, #2
   10a84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a88:	mov	r4, #0
   10a8c:	add	r4, r4, #1
   10a90:	ldr	r3, [r5], #4
   10a94:	mov	r2, r9
   10a98:	mov	r1, r8
   10a9c:	mov	r0, r7
   10aa0:	blx	r3
   10aa4:	cmp	r6, r4
   10aa8:	bne	10a8c <__libc_csu_init@@Base+0x34>
   10aac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ab0:	andeq	r0, r1, r0, lsr #9
   10ab4:	muleq	r1, r8, r4

00010ab8 <__libc_csu_fini@@Base>:
   10ab8:	bx	lr

Disassembly of section .fini:

00010abc <.fini>:
   10abc:	push	{r3, lr}
   10ac0:	pop	{r3, pc}
