
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010cc0 <.init>:
   10cc0:	push	{r3, lr}
   10cc4:	bl	10fa4 <__assert_fail@plt+0x48>
   10cc8:	pop	{r3, pc}

Disassembly of section .plt:

00010ccc <calloc@plt-0x14>:
   10ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd0:	ldr	lr, [pc, #4]	; 10cdc <calloc@plt-0x4>
   10cd4:	add	lr, pc, lr
   10cd8:	ldr	pc, [lr, #8]!
   10cdc:	andeq	r9, r1, r4, lsr #6

00010ce0 <calloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #804]!	; 0x324

00010cec <fputs_unlocked@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #796]!	; 0x31c

00010cf8 <raise@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #788]!	; 0x314

00010d04 <strcmp@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #780]!	; 0x30c

00010d10 <posix_fadvise64@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #772]!	; 0x304

00010d1c <printf@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #764]!	; 0x2fc

00010d28 <fflush@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #756]!	; 0x2f4

00010d34 <memmove@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d40 <free@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #740]!	; 0x2e4

00010d4c <_exit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #732]!	; 0x2dc

00010d58 <memcpy@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #724]!	; 0x2d4

00010d64 <mbsinit@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d70 <fwrite_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #708]!	; 0x2c4

00010d7c <memcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #700]!	; 0x2bc

00010d88 <fputc_unlocked@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #692]!	; 0x2b4

00010d94 <getc_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #684]!	; 0x2ac

00010da0 <realloc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dac <textdomain@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #668]!	; 0x29c

00010db8 <iswprint@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #660]!	; 0x294

00010dc4 <fwrite@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #652]!	; 0x28c

00010dd0 <lseek64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #644]!	; 0x284

00010ddc <__ctype_get_mb_cur_max@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #636]!	; 0x27c

00010de8 <__fpending@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #628]!	; 0x274

00010df4 <ferror_unlocked@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #620]!	; 0x26c

00010e00 <mbrtowc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #612]!	; 0x264

00010e0c <error@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #604]!	; 0x25c

00010e18 <malloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #596]!	; 0x254

00010e24 <__libc_start_main@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #588]!	; 0x24c

00010e30 <__freading@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #580]!	; 0x244

00010e3c <__gmon_start__@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #572]!	; 0x23c

00010e48 <getopt_long@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #564]!	; 0x234

00010e54 <__ctype_b_loc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #556]!	; 0x22c

00010e60 <exit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #548]!	; 0x224

00010e6c <gettext@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #540]!	; 0x21c

00010e78 <strlen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #532]!	; 0x214

00010e84 <strchr@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #524]!	; 0x20c

00010e90 <fprintf@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #516]!	; 0x204

00010e9c <__errno_location@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ea8 <__cxa_atexit@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb4 <memset@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #484]!	; 0x1e4

00010ecc <strtoumax@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #452]!	; 0x1c4

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #444]!	; 0x1bc

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #436]!	; 0x1b4

00010f14 <clearerr_unlocked@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f20 <fopen64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #420]!	; 0x1a4

00010f2c <bindtextdomain@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #412]!	; 0x19c

00010f38 <strncmp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #404]!	; 0x194

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #396]!	; 0x18c

00010f50 <putchar_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #388]!	; 0x184

00010f5c <__assert_fail@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #380]!	; 0x17c

Disassembly of section .text:

00010f68 <.text>:
   10f68:	mov	fp, #0
   10f6c:	mov	lr, #0
   10f70:	pop	{r1}		; (ldr r1, [sp], #4)
   10f74:	mov	r2, sp
   10f78:	push	{r2}		; (str r2, [sp, #-4]!)
   10f7c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f80:	ldr	ip, [pc, #16]	; 10f98 <__assert_fail@plt+0x3c>
   10f84:	push	{ip}		; (str ip, [sp, #-4]!)
   10f88:	ldr	r0, [pc, #12]	; 10f9c <__assert_fail@plt+0x40>
   10f8c:	ldr	r3, [pc, #12]	; 10fa0 <__assert_fail@plt+0x44>
   10f90:	bl	10e24 <__libc_start_main@plt>
   10f94:	bl	10f44 <abort@plt>
   10f98:	strheq	r9, [r1], -ip
   10f9c:	andeq	r1, r1, ip, ror #7
   10fa0:	andeq	r9, r1, ip, asr r0
   10fa4:	ldr	r3, [pc, #20]	; 10fc0 <__assert_fail@plt+0x64>
   10fa8:	ldr	r2, [pc, #20]	; 10fc4 <__assert_fail@plt+0x68>
   10fac:	add	r3, pc, r3
   10fb0:	ldr	r2, [r3, r2]
   10fb4:	cmp	r2, #0
   10fb8:	bxeq	lr
   10fbc:	b	10e3c <__gmon_start__@plt>
   10fc0:	andeq	r9, r1, ip, asr #32
   10fc4:	andeq	r0, r0, r4, ror #1
   10fc8:	ldr	r3, [pc, #28]	; 10fec <__assert_fail@plt+0x90>
   10fcc:	ldr	r0, [pc, #28]	; 10ff0 <__assert_fail@plt+0x94>
   10fd0:	sub	r3, r3, r0
   10fd4:	cmp	r3, #6
   10fd8:	bxls	lr
   10fdc:	ldr	r3, [pc, #16]	; 10ff4 <__assert_fail@plt+0x98>
   10fe0:	cmp	r3, #0
   10fe4:	bxeq	lr
   10fe8:	bx	r3
   10fec:	andeq	sl, r2, fp, lsr r1
   10ff0:	andeq	sl, r2, r8, lsr r1
   10ff4:	andeq	r0, r0, r0
   10ff8:	ldr	r1, [pc, #36]	; 11024 <__assert_fail@plt+0xc8>
   10ffc:	ldr	r0, [pc, #36]	; 11028 <__assert_fail@plt+0xcc>
   11000:	sub	r1, r1, r0
   11004:	asr	r1, r1, #2
   11008:	add	r1, r1, r1, lsr #31
   1100c:	asrs	r1, r1, #1
   11010:	bxeq	lr
   11014:	ldr	r3, [pc, #16]	; 1102c <__assert_fail@plt+0xd0>
   11018:	cmp	r3, #0
   1101c:	bxeq	lr
   11020:	bx	r3
   11024:	andeq	sl, r2, r8, lsr r1
   11028:	andeq	sl, r2, r8, lsr r1
   1102c:	andeq	r0, r0, r0
   11030:	push	{r4, lr}
   11034:	ldr	r4, [pc, #24]	; 11054 <__assert_fail@plt+0xf8>
   11038:	ldrb	r3, [r4]
   1103c:	cmp	r3, #0
   11040:	popne	{r4, pc}
   11044:	bl	10fc8 <__assert_fail@plt+0x6c>
   11048:	mov	r3, #1
   1104c:	strb	r3, [r4]
   11050:	pop	{r4, pc}
   11054:	andeq	sl, r2, ip, asr r1
   11058:	ldr	r0, [pc, #40]	; 11088 <__assert_fail@plt+0x12c>
   1105c:	ldr	r3, [r0]
   11060:	cmp	r3, #0
   11064:	bne	1106c <__assert_fail@plt+0x110>
   11068:	b	10ff8 <__assert_fail@plt+0x9c>
   1106c:	ldr	r3, [pc, #24]	; 1108c <__assert_fail@plt+0x130>
   11070:	cmp	r3, #0
   11074:	beq	11068 <__assert_fail@plt+0x10c>
   11078:	push	{r4, lr}
   1107c:	blx	r3
   11080:	pop	{r4, lr}
   11084:	b	10ff8 <__assert_fail@plt+0x9c>
   11088:	andeq	r9, r2, r4, lsl pc
   1108c:	andeq	r0, r0, r0
   11090:	push	{fp, lr}
   11094:	add	fp, sp, #4
   11098:	ldr	r0, [pc, #32]	; 110c0 <__assert_fail@plt+0x164>
   1109c:	bl	10e6c <gettext@plt>
   110a0:	mov	r2, r0
   110a4:	ldr	r3, [pc, #24]	; 110c4 <__assert_fail@plt+0x168>
   110a8:	ldr	r3, [r3]
   110ac:	mov	r1, r3
   110b0:	mov	r0, r2
   110b4:	bl	10cec <fputs_unlocked@plt>
   110b8:	nop			; (mov r0, r0)
   110bc:	pop	{fp, pc}
   110c0:	andeq	r9, r1, r4, ror #1
   110c4:	andeq	sl, r2, r4, asr r1
   110c8:	push	{fp, lr}
   110cc:	add	fp, sp, #4
   110d0:	ldr	r0, [pc, #32]	; 110f8 <__assert_fail@plt+0x19c>
   110d4:	bl	10e6c <gettext@plt>
   110d8:	mov	r2, r0
   110dc:	ldr	r3, [pc, #24]	; 110fc <__assert_fail@plt+0x1a0>
   110e0:	ldr	r3, [r3]
   110e4:	mov	r1, r3
   110e8:	mov	r0, r2
   110ec:	bl	10cec <fputs_unlocked@plt>
   110f0:	nop			; (mov r0, r0)
   110f4:	pop	{fp, pc}
   110f8:	andeq	r9, r1, ip, lsl r1
   110fc:	andeq	sl, r2, r4, asr r1
   11100:	push	{fp, lr}
   11104:	add	fp, sp, #4
   11108:	sub	sp, sp, #80	; 0x50
   1110c:	str	r0, [fp, #-80]	; 0xffffffb0
   11110:	ldr	r3, [pc, #348]	; 11274 <__assert_fail@plt+0x318>
   11114:	sub	ip, fp, #72	; 0x48
   11118:	mov	lr, r3
   1111c:	ldm	lr!, {r0, r1, r2, r3}
   11120:	stmia	ip!, {r0, r1, r2, r3}
   11124:	ldm	lr!, {r0, r1, r2, r3}
   11128:	stmia	ip!, {r0, r1, r2, r3}
   1112c:	ldm	lr!, {r0, r1, r2, r3}
   11130:	stmia	ip!, {r0, r1, r2, r3}
   11134:	ldm	lr, {r0, r1}
   11138:	stm	ip, {r0, r1}
   1113c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11140:	str	r3, [fp, #-8]
   11144:	sub	r3, fp, #72	; 0x48
   11148:	str	r3, [fp, #-12]
   1114c:	b	1115c <__assert_fail@plt+0x200>
   11150:	ldr	r3, [fp, #-12]
   11154:	add	r3, r3, #8
   11158:	str	r3, [fp, #-12]
   1115c:	ldr	r3, [fp, #-12]
   11160:	ldr	r3, [r3]
   11164:	cmp	r3, #0
   11168:	beq	1118c <__assert_fail@plt+0x230>
   1116c:	ldr	r3, [fp, #-12]
   11170:	ldr	r3, [r3]
   11174:	mov	r1, r3
   11178:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1117c:	bl	10d04 <strcmp@plt>
   11180:	mov	r3, r0
   11184:	cmp	r3, #0
   11188:	bne	11150 <__assert_fail@plt+0x1f4>
   1118c:	ldr	r3, [fp, #-12]
   11190:	ldr	r3, [r3, #4]
   11194:	cmp	r3, #0
   11198:	beq	111a8 <__assert_fail@plt+0x24c>
   1119c:	ldr	r3, [fp, #-12]
   111a0:	ldr	r3, [r3, #4]
   111a4:	str	r3, [fp, #-8]
   111a8:	ldr	r0, [pc, #200]	; 11278 <__assert_fail@plt+0x31c>
   111ac:	bl	10e6c <gettext@plt>
   111b0:	mov	r3, r0
   111b4:	ldr	r2, [pc, #192]	; 1127c <__assert_fail@plt+0x320>
   111b8:	ldr	r1, [pc, #192]	; 11280 <__assert_fail@plt+0x324>
   111bc:	mov	r0, r3
   111c0:	bl	10d1c <printf@plt>
   111c4:	mov	r1, #0
   111c8:	mov	r0, #5
   111cc:	bl	10ef0 <setlocale@plt>
   111d0:	str	r0, [fp, #-16]
   111d4:	ldr	r3, [fp, #-16]
   111d8:	cmp	r3, #0
   111dc:	beq	1121c <__assert_fail@plt+0x2c0>
   111e0:	mov	r2, #3
   111e4:	ldr	r1, [pc, #152]	; 11284 <__assert_fail@plt+0x328>
   111e8:	ldr	r0, [fp, #-16]
   111ec:	bl	10f38 <strncmp@plt>
   111f0:	mov	r3, r0
   111f4:	cmp	r3, #0
   111f8:	beq	1121c <__assert_fail@plt+0x2c0>
   111fc:	ldr	r0, [pc, #132]	; 11288 <__assert_fail@plt+0x32c>
   11200:	bl	10e6c <gettext@plt>
   11204:	mov	r2, r0
   11208:	ldr	r3, [pc, #124]	; 1128c <__assert_fail@plt+0x330>
   1120c:	ldr	r3, [r3]
   11210:	mov	r1, r3
   11214:	mov	r0, r2
   11218:	bl	10cec <fputs_unlocked@plt>
   1121c:	ldr	r0, [pc, #108]	; 11290 <__assert_fail@plt+0x334>
   11220:	bl	10e6c <gettext@plt>
   11224:	mov	r3, r0
   11228:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1122c:	ldr	r1, [pc, #72]	; 1127c <__assert_fail@plt+0x320>
   11230:	mov	r0, r3
   11234:	bl	10d1c <printf@plt>
   11238:	ldr	r0, [pc, #84]	; 11294 <__assert_fail@plt+0x338>
   1123c:	bl	10e6c <gettext@plt>
   11240:	ldr	r2, [fp, #-8]
   11244:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11248:	cmp	r2, r3
   1124c:	bne	11258 <__assert_fail@plt+0x2fc>
   11250:	ldr	r3, [pc, #64]	; 11298 <__assert_fail@plt+0x33c>
   11254:	b	1125c <__assert_fail@plt+0x300>
   11258:	ldr	r3, [pc, #60]	; 1129c <__assert_fail@plt+0x340>
   1125c:	mov	r2, r3
   11260:	ldr	r1, [fp, #-8]
   11264:	bl	10d1c <printf@plt>
   11268:	nop			; (mov r0, r0)
   1126c:	sub	sp, fp, #4
   11270:	pop	{fp, pc}
   11274:	ldrdeq	r9, [r1], -ip
   11278:	andeq	r9, r1, r8, ror #2
   1127c:	andeq	r9, r1, r0, lsl #3
   11280:	andeq	r9, r1, r8, lsr #3
   11284:			; <UNDEFINED> instruction: 0x000191b8
   11288:			; <UNDEFINED> instruction: 0x000191bc
   1128c:	andeq	sl, r2, r4, asr r1
   11290:	andeq	r9, r1, r4, lsl #4
   11294:	andeq	r9, r1, r0, lsr #4
   11298:	andeq	r9, r1, r4, asr r2
   1129c:	andeq	r9, r1, r0, ror #4
   112a0:	push	{r4, fp, lr}
   112a4:	add	fp, sp, #8
   112a8:	sub	sp, sp, #12
   112ac:	str	r0, [fp, #-16]
   112b0:	ldr	r3, [fp, #-16]
   112b4:	cmp	r3, #0
   112b8:	beq	112e8 <__assert_fail@plt+0x38c>
   112bc:	ldr	r3, [pc, #252]	; 113c0 <__assert_fail@plt+0x464>
   112c0:	ldr	r4, [r3]
   112c4:	ldr	r0, [pc, #248]	; 113c4 <__assert_fail@plt+0x468>
   112c8:	bl	10e6c <gettext@plt>
   112cc:	mov	r1, r0
   112d0:	ldr	r3, [pc, #240]	; 113c8 <__assert_fail@plt+0x46c>
   112d4:	ldr	r3, [r3]
   112d8:	mov	r2, r3
   112dc:	mov	r0, r4
   112e0:	bl	10e90 <fprintf@plt>
   112e4:	b	113b8 <__assert_fail@plt+0x45c>
   112e8:	ldr	r0, [pc, #220]	; 113cc <__assert_fail@plt+0x470>
   112ec:	bl	10e6c <gettext@plt>
   112f0:	mov	r2, r0
   112f4:	ldr	r3, [pc, #204]	; 113c8 <__assert_fail@plt+0x46c>
   112f8:	ldr	r3, [r3]
   112fc:	mov	r1, r3
   11300:	mov	r0, r2
   11304:	bl	10d1c <printf@plt>
   11308:	ldr	r0, [pc, #192]	; 113d0 <__assert_fail@plt+0x474>
   1130c:	bl	10e6c <gettext@plt>
   11310:	mov	r2, r0
   11314:	ldr	r3, [pc, #184]	; 113d4 <__assert_fail@plt+0x478>
   11318:	ldr	r3, [r3]
   1131c:	mov	r1, r3
   11320:	mov	r0, r2
   11324:	bl	10cec <fputs_unlocked@plt>
   11328:	bl	11090 <__assert_fail@plt+0x134>
   1132c:	bl	110c8 <__assert_fail@plt+0x16c>
   11330:	ldr	r0, [pc, #160]	; 113d8 <__assert_fail@plt+0x47c>
   11334:	bl	10e6c <gettext@plt>
   11338:	mov	r2, r0
   1133c:	ldr	r3, [pc, #144]	; 113d4 <__assert_fail@plt+0x478>
   11340:	ldr	r3, [r3]
   11344:	mov	r1, r3
   11348:	mov	r0, r2
   1134c:	bl	10cec <fputs_unlocked@plt>
   11350:	ldr	r0, [pc, #132]	; 113dc <__assert_fail@plt+0x480>
   11354:	bl	10e6c <gettext@plt>
   11358:	mov	r2, r0
   1135c:	ldr	r3, [pc, #112]	; 113d4 <__assert_fail@plt+0x478>
   11360:	ldr	r3, [r3]
   11364:	mov	r1, r3
   11368:	mov	r0, r2
   1136c:	bl	10cec <fputs_unlocked@plt>
   11370:	ldr	r0, [pc, #104]	; 113e0 <__assert_fail@plt+0x484>
   11374:	bl	10e6c <gettext@plt>
   11378:	mov	r2, r0
   1137c:	ldr	r3, [pc, #80]	; 113d4 <__assert_fail@plt+0x478>
   11380:	ldr	r3, [r3]
   11384:	mov	r1, r3
   11388:	mov	r0, r2
   1138c:	bl	10cec <fputs_unlocked@plt>
   11390:	ldr	r0, [pc, #76]	; 113e4 <__assert_fail@plt+0x488>
   11394:	bl	10e6c <gettext@plt>
   11398:	mov	r2, r0
   1139c:	ldr	r3, [pc, #48]	; 113d4 <__assert_fail@plt+0x478>
   113a0:	ldr	r3, [r3]
   113a4:	mov	r1, r3
   113a8:	mov	r0, r2
   113ac:	bl	10cec <fputs_unlocked@plt>
   113b0:	ldr	r0, [pc, #48]	; 113e8 <__assert_fail@plt+0x48c>
   113b4:	bl	11100 <__assert_fail@plt+0x1a4>
   113b8:	ldr	r0, [fp, #-16]
   113bc:	bl	10e60 <exit@plt>
   113c0:	andeq	sl, r2, r8, asr #2
   113c4:	andeq	r9, r1, r4, lsl r3
   113c8:	muleq	r3, r8, r2
   113cc:	andeq	r9, r1, ip, lsr r3
   113d0:	andeq	r9, r1, r8, ror #6
   113d4:	andeq	sl, r2, r4, asr r1
   113d8:	andeq	r9, r1, ip, ror #7
   113dc:	andeq	r9, r1, r4, lsl #10
   113e0:	andeq	r9, r1, r4, lsr #12
   113e4:	andeq	r9, r1, r4, asr r6
   113e8:	andeq	r9, r1, ip, lsl #13
   113ec:	push	{r4, r5, fp, lr}
   113f0:	add	fp, sp, #12
   113f4:	sub	sp, sp, #64	; 0x40
   113f8:	str	r0, [fp, #-48]	; 0xffffffd0
   113fc:	str	r1, [fp, #-52]	; 0xffffffcc
   11400:	mov	r3, #1
   11404:	strb	r3, [fp, #-13]
   11408:	mov	r3, #0
   1140c:	str	r3, [fp, #-20]	; 0xffffffec
   11410:	mov	r3, #0
   11414:	str	r3, [fp, #-24]	; 0xffffffe8
   11418:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1141c:	ldr	r3, [r3]
   11420:	mov	r0, r3
   11424:	bl	137f8 <__assert_fail@plt+0x289c>
   11428:	ldr	r1, [pc, #1416]	; 119b8 <__assert_fail@plt+0xa5c>
   1142c:	mov	r0, #6
   11430:	bl	10ef0 <setlocale@plt>
   11434:	ldr	r1, [pc, #1408]	; 119bc <__assert_fail@plt+0xa60>
   11438:	ldr	r0, [pc, #1408]	; 119c0 <__assert_fail@plt+0xa64>
   1143c:	bl	10f2c <bindtextdomain@plt>
   11440:	ldr	r0, [pc, #1400]	; 119c0 <__assert_fail@plt+0xa64>
   11444:	bl	10dac <textdomain@plt>
   11448:	ldr	r0, [pc, #1396]	; 119c4 <__assert_fail@plt+0xa68>
   1144c:	bl	190c0 <__assert_fail@plt+0x8164>
   11450:	ldr	r3, [pc, #1392]	; 119c8 <__assert_fail@plt+0xa6c>
   11454:	mov	r2, #0
   11458:	strb	r2, [r3]
   1145c:	ldr	r3, [pc, #1380]	; 119c8 <__assert_fail@plt+0xa6c>
   11460:	ldrb	r2, [r3]
   11464:	ldr	r3, [pc, #1376]	; 119cc <__assert_fail@plt+0xa70>
   11468:	strb	r2, [r3]
   1146c:	ldr	r3, [pc, #1368]	; 119cc <__assert_fail@plt+0xa70>
   11470:	ldrb	r2, [r3]
   11474:	ldr	r3, [pc, #1364]	; 119d0 <__assert_fail@plt+0xa74>
   11478:	strb	r2, [r3]
   1147c:	ldr	r3, [pc, #1356]	; 119d0 <__assert_fail@plt+0xa74>
   11480:	ldrb	r2, [r3]
   11484:	ldr	r3, [pc, #1352]	; 119d4 <__assert_fail@plt+0xa78>
   11488:	strb	r2, [r3]
   1148c:	ldr	r3, [pc, #1348]	; 119d8 <__assert_fail@plt+0xa7c>
   11490:	mov	r2, #75	; 0x4b
   11494:	str	r2, [r3]
   11498:	ldr	r3, [pc, #1340]	; 119dc <__assert_fail@plt+0xa80>
   1149c:	ldr	r2, [pc, #1300]	; 119b8 <__assert_fail@plt+0xa5c>
   114a0:	str	r2, [r3]
   114a4:	ldr	r3, [pc, #1332]	; 119e0 <__assert_fail@plt+0xa84>
   114a8:	mov	r2, #0
   114ac:	str	r2, [r3]
   114b0:	ldr	r3, [pc, #1320]	; 119e0 <__assert_fail@plt+0xa84>
   114b4:	ldr	r3, [r3]
   114b8:	ldr	r2, [pc, #1316]	; 119e4 <__assert_fail@plt+0xa88>
   114bc:	str	r3, [r2]
   114c0:	ldr	r3, [pc, #1308]	; 119e4 <__assert_fail@plt+0xa88>
   114c4:	ldr	r3, [r3]
   114c8:	ldr	r2, [pc, #1304]	; 119e8 <__assert_fail@plt+0xa8c>
   114cc:	str	r3, [r2]
   114d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   114d4:	cmp	r3, #1
   114d8:	ble	116b0 <__assert_fail@plt+0x754>
   114dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   114e0:	add	r3, r3, #4
   114e4:	ldr	r3, [r3]
   114e8:	ldrb	r3, [r3]
   114ec:	cmp	r3, #45	; 0x2d
   114f0:	bne	116b0 <__assert_fail@plt+0x754>
   114f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   114f8:	add	r3, r3, #4
   114fc:	ldr	r3, [r3]
   11500:	add	r3, r3, #1
   11504:	ldrb	r3, [r3]
   11508:	sub	r3, r3, #48	; 0x30
   1150c:	cmp	r3, #9
   11510:	bhi	116b0 <__assert_fail@plt+0x754>
   11514:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11518:	add	r3, r3, #4
   1151c:	ldr	r3, [r3]
   11520:	add	r3, r3, #1
   11524:	str	r3, [fp, #-20]	; 0xffffffec
   11528:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1152c:	add	r3, r3, #4
   11530:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11534:	ldr	r2, [r2]
   11538:	str	r2, [r3]
   1153c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11540:	add	r3, r3, #4
   11544:	str	r3, [fp, #-52]	; 0xffffffcc
   11548:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1154c:	sub	r3, r3, #1
   11550:	str	r3, [fp, #-48]	; 0xffffffd0
   11554:	b	116b0 <__assert_fail@plt+0x754>
   11558:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1155c:	cmp	r3, #112	; 0x70
   11560:	beq	1165c <__assert_fail@plt+0x700>
   11564:	cmp	r3, #112	; 0x70
   11568:	bgt	1159c <__assert_fail@plt+0x640>
   1156c:	cmn	r3, #2
   11570:	beq	11670 <__assert_fail@plt+0x714>
   11574:	cmn	r3, #2
   11578:	bgt	11588 <__assert_fail@plt+0x62c>
   1157c:	cmn	r3, #3
   11580:	beq	11678 <__assert_fail@plt+0x71c>
   11584:	b	115c8 <__assert_fail@plt+0x66c>
   11588:	cmp	r3, #99	; 0x63
   1158c:	beq	115fc <__assert_fail@plt+0x6a0>
   11590:	cmp	r3, #103	; 0x67
   11594:	beq	1164c <__assert_fail@plt+0x6f0>
   11598:	b	115c8 <__assert_fail@plt+0x66c>
   1159c:	cmp	r3, #116	; 0x74
   115a0:	beq	1161c <__assert_fail@plt+0x6c0>
   115a4:	cmp	r3, #116	; 0x74
   115a8:	bgt	115b8 <__assert_fail@plt+0x65c>
   115ac:	cmp	r3, #115	; 0x73
   115b0:	beq	1160c <__assert_fail@plt+0x6b0>
   115b4:	b	115c8 <__assert_fail@plt+0x66c>
   115b8:	cmp	r3, #117	; 0x75
   115bc:	beq	1162c <__assert_fail@plt+0x6d0>
   115c0:	cmp	r3, #119	; 0x77
   115c4:	beq	1163c <__assert_fail@plt+0x6e0>
   115c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115cc:	sub	r3, r3, #48	; 0x30
   115d0:	cmp	r3, #9
   115d4:	bhi	115f4 <__assert_fail@plt+0x698>
   115d8:	ldr	r0, [pc, #1036]	; 119ec <__assert_fail@plt+0xa90>
   115dc:	bl	10e6c <gettext@plt>
   115e0:	mov	r2, r0
   115e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115e8:	mov	r1, #0
   115ec:	mov	r0, #0
   115f0:	bl	10e0c <error@plt>
   115f4:	mov	r0, #1
   115f8:	bl	112a0 <__assert_fail@plt+0x344>
   115fc:	ldr	r3, [pc, #976]	; 119d4 <__assert_fail@plt+0xa78>
   11600:	mov	r2, #1
   11604:	strb	r2, [r3]
   11608:	b	116b0 <__assert_fail@plt+0x754>
   1160c:	ldr	r3, [pc, #952]	; 119cc <__assert_fail@plt+0xa70>
   11610:	mov	r2, #1
   11614:	strb	r2, [r3]
   11618:	b	116b0 <__assert_fail@plt+0x754>
   1161c:	ldr	r3, [pc, #940]	; 119d0 <__assert_fail@plt+0xa74>
   11620:	mov	r2, #1
   11624:	strb	r2, [r3]
   11628:	b	116b0 <__assert_fail@plt+0x754>
   1162c:	ldr	r3, [pc, #916]	; 119c8 <__assert_fail@plt+0xa6c>
   11630:	mov	r2, #1
   11634:	strb	r2, [r3]
   11638:	b	116b0 <__assert_fail@plt+0x754>
   1163c:	ldr	r3, [pc, #940]	; 119f0 <__assert_fail@plt+0xa94>
   11640:	ldr	r3, [r3]
   11644:	str	r3, [fp, #-20]	; 0xffffffec
   11648:	b	116b0 <__assert_fail@plt+0x754>
   1164c:	ldr	r3, [pc, #924]	; 119f0 <__assert_fail@plt+0xa94>
   11650:	ldr	r3, [r3]
   11654:	str	r3, [fp, #-24]	; 0xffffffe8
   11658:	b	116b0 <__assert_fail@plt+0x754>
   1165c:	ldr	r3, [pc, #908]	; 119f0 <__assert_fail@plt+0xa94>
   11660:	ldr	r3, [r3]
   11664:	mov	r0, r3
   11668:	bl	11a3c <__assert_fail@plt+0xae0>
   1166c:	b	116b0 <__assert_fail@plt+0x754>
   11670:	mov	r0, #0
   11674:	bl	112a0 <__assert_fail@plt+0x344>
   11678:	ldr	r3, [pc, #884]	; 119f4 <__assert_fail@plt+0xa98>
   1167c:	ldr	r0, [r3]
   11680:	ldr	r3, [pc, #880]	; 119f8 <__assert_fail@plt+0xa9c>
   11684:	ldr	r2, [r3]
   11688:	mov	r3, #0
   1168c:	str	r3, [sp, #4]
   11690:	ldr	r3, [pc, #868]	; 119fc <__assert_fail@plt+0xaa0>
   11694:	str	r3, [sp]
   11698:	mov	r3, r2
   1169c:	ldr	r2, [pc, #860]	; 11a00 <__assert_fail@plt+0xaa4>
   116a0:	ldr	r1, [pc, #860]	; 11a04 <__assert_fail@plt+0xaa8>
   116a4:	bl	165f4 <__assert_fail@plt+0x5698>
   116a8:	mov	r0, #0
   116ac:	bl	10e60 <exit@plt>
   116b0:	mov	r3, #0
   116b4:	str	r3, [sp]
   116b8:	ldr	r3, [pc, #840]	; 11a08 <__assert_fail@plt+0xaac>
   116bc:	ldr	r2, [pc, #840]	; 11a0c <__assert_fail@plt+0xab0>
   116c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   116c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   116c8:	bl	10e48 <getopt_long@plt>
   116cc:	str	r0, [fp, #-32]	; 0xffffffe0
   116d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   116d4:	cmn	r3, #1
   116d8:	bne	11558 <__assert_fail@plt+0x5fc>
   116dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   116e0:	cmp	r3, #0
   116e4:	beq	11734 <__assert_fail@plt+0x7d8>
   116e8:	ldr	r0, [pc, #800]	; 11a10 <__assert_fail@plt+0xab4>
   116ec:	bl	10e6c <gettext@plt>
   116f0:	mov	r2, r0
   116f4:	mov	r3, #0
   116f8:	str	r3, [sp, #16]
   116fc:	str	r2, [sp, #12]
   11700:	ldr	r3, [pc, #688]	; 119b8 <__assert_fail@plt+0xa5c>
   11704:	str	r3, [sp, #8]
   11708:	ldr	r2, [pc, #772]	; 11a14 <__assert_fail@plt+0xab8>
   1170c:	mov	r3, #0
   11710:	strd	r2, [sp]
   11714:	mov	r2, #0
   11718:	mov	r3, #0
   1171c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11720:	bl	17414 <__assert_fail@plt+0x64b8>
   11724:	mov	r2, r0
   11728:	mov	r3, r1
   1172c:	ldr	r3, [pc, #676]	; 119d8 <__assert_fail@plt+0xa7c>
   11730:	str	r2, [r3]
   11734:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11738:	cmp	r3, #0
   1173c:	beq	117b8 <__assert_fail@plt+0x85c>
   11740:	ldr	r3, [pc, #656]	; 119d8 <__assert_fail@plt+0xa7c>
   11744:	ldr	r3, [r3]
   11748:	mov	r4, r3
   1174c:	asr	r5, r4, #31
   11750:	ldr	r0, [pc, #696]	; 11a10 <__assert_fail@plt+0xab4>
   11754:	bl	10e6c <gettext@plt>
   11758:	mov	r2, r0
   1175c:	mov	r3, #0
   11760:	str	r3, [sp, #16]
   11764:	str	r2, [sp, #12]
   11768:	ldr	r3, [pc, #584]	; 119b8 <__assert_fail@plt+0xa5c>
   1176c:	str	r3, [sp, #8]
   11770:	strd	r4, [sp]
   11774:	mov	r2, #0
   11778:	mov	r3, #0
   1177c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11780:	bl	17414 <__assert_fail@plt+0x64b8>
   11784:	mov	r2, r0
   11788:	mov	r3, r1
   1178c:	ldr	r3, [pc, #644]	; 11a18 <__assert_fail@plt+0xabc>
   11790:	str	r2, [r3]
   11794:	ldr	r3, [fp, #-20]	; 0xffffffec
   11798:	cmp	r3, #0
   1179c:	bne	117e4 <__assert_fail@plt+0x888>
   117a0:	ldr	r3, [pc, #624]	; 11a18 <__assert_fail@plt+0xabc>
   117a4:	ldr	r3, [r3]
   117a8:	add	r3, r3, #10
   117ac:	ldr	r2, [pc, #548]	; 119d8 <__assert_fail@plt+0xa7c>
   117b0:	str	r3, [r2]
   117b4:	b	117e4 <__assert_fail@plt+0x888>
   117b8:	ldr	r3, [pc, #536]	; 119d8 <__assert_fail@plt+0xa7c>
   117bc:	ldr	r3, [r3]
   117c0:	mov	r2, #187	; 0xbb
   117c4:	mul	r3, r2, r3
   117c8:	ldr	r2, [pc, #588]	; 11a1c <__assert_fail@plt+0xac0>
   117cc:	smull	r1, r2, r2, r3
   117d0:	asr	r2, r2, #6
   117d4:	asr	r3, r3, #31
   117d8:	sub	r3, r2, r3
   117dc:	ldr	r2, [pc, #564]	; 11a18 <__assert_fail@plt+0xabc>
   117e0:	str	r3, [r2]
   117e4:	mov	r3, #0
   117e8:	strb	r3, [fp, #-25]	; 0xffffffe7
   117ec:	ldr	r3, [pc, #556]	; 11a20 <__assert_fail@plt+0xac4>
   117f0:	ldr	r2, [r3]
   117f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   117f8:	cmp	r2, r3
   117fc:	bne	1193c <__assert_fail@plt+0x9e0>
   11800:	mov	r3, #1
   11804:	strb	r3, [fp, #-25]	; 0xffffffe7
   11808:	ldr	r3, [pc, #532]	; 11a24 <__assert_fail@plt+0xac8>
   1180c:	ldr	r3, [r3]
   11810:	ldr	r1, [pc, #528]	; 11a28 <__assert_fail@plt+0xacc>
   11814:	mov	r0, r3
   11818:	bl	11b38 <__assert_fail@plt+0xbdc>
   1181c:	mov	r3, r0
   11820:	strb	r3, [fp, #-13]
   11824:	b	11950 <__assert_fail@plt+0x9f4>
   11828:	ldr	r3, [pc, #496]	; 11a20 <__assert_fail@plt+0xac4>
   1182c:	ldr	r3, [r3]
   11830:	lsl	r3, r3, #2
   11834:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11838:	add	r3, r2, r3
   1183c:	ldr	r3, [r3]
   11840:	str	r3, [fp, #-36]	; 0xffffffdc
   11844:	ldr	r1, [pc, #476]	; 11a28 <__assert_fail@plt+0xacc>
   11848:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1184c:	bl	10d04 <strcmp@plt>
   11850:	mov	r3, r0
   11854:	cmp	r3, #0
   11858:	bne	1189c <__assert_fail@plt+0x940>
   1185c:	ldr	r3, [pc, #448]	; 11a24 <__assert_fail@plt+0xac8>
   11860:	ldr	r3, [r3]
   11864:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11868:	mov	r0, r3
   1186c:	bl	11b38 <__assert_fail@plt+0xbdc>
   11870:	mov	r3, r0
   11874:	mov	r2, r3
   11878:	ldrb	r3, [fp, #-13]
   1187c:	and	r3, r3, r2
   11880:	cmp	r3, #0
   11884:	movne	r3, #1
   11888:	moveq	r3, #0
   1188c:	strb	r3, [fp, #-13]
   11890:	mov	r3, #1
   11894:	strb	r3, [fp, #-25]	; 0xffffffe7
   11898:	b	11928 <__assert_fail@plt+0x9cc>
   1189c:	ldr	r1, [pc, #392]	; 11a2c <__assert_fail@plt+0xad0>
   118a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   118a4:	bl	10f20 <fopen64@plt>
   118a8:	str	r0, [fp, #-40]	; 0xffffffd8
   118ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   118b0:	cmp	r3, #0
   118b4:	beq	118e8 <__assert_fail@plt+0x98c>
   118b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   118bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   118c0:	bl	11b38 <__assert_fail@plt+0xbdc>
   118c4:	mov	r3, r0
   118c8:	mov	r2, r3
   118cc:	ldrb	r3, [fp, #-13]
   118d0:	and	r3, r3, r2
   118d4:	cmp	r3, #0
   118d8:	movne	r3, #1
   118dc:	moveq	r3, #0
   118e0:	strb	r3, [fp, #-13]
   118e4:	b	11928 <__assert_fail@plt+0x9cc>
   118e8:	bl	10e9c <__errno_location@plt>
   118ec:	mov	r3, r0
   118f0:	ldr	r4, [r3]
   118f4:	ldr	r0, [pc, #308]	; 11a30 <__assert_fail@plt+0xad4>
   118f8:	bl	10e6c <gettext@plt>
   118fc:	mov	r5, r0
   11900:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11904:	mov	r0, #4
   11908:	bl	15b30 <__assert_fail@plt+0x4bd4>
   1190c:	mov	r3, r0
   11910:	mov	r2, r5
   11914:	mov	r1, r4
   11918:	mov	r0, #0
   1191c:	bl	10e0c <error@plt>
   11920:	mov	r3, #0
   11924:	strb	r3, [fp, #-13]
   11928:	ldr	r3, [pc, #240]	; 11a20 <__assert_fail@plt+0xac4>
   1192c:	ldr	r3, [r3]
   11930:	add	r3, r3, #1
   11934:	ldr	r2, [pc, #228]	; 11a20 <__assert_fail@plt+0xac4>
   11938:	str	r3, [r2]
   1193c:	ldr	r3, [pc, #220]	; 11a20 <__assert_fail@plt+0xac4>
   11940:	ldr	r2, [r3]
   11944:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11948:	cmp	r2, r3
   1194c:	blt	11828 <__assert_fail@plt+0x8cc>
   11950:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11954:	cmp	r3, #0
   11958:	beq	119a0 <__assert_fail@plt+0xa44>
   1195c:	ldr	r3, [pc, #192]	; 11a24 <__assert_fail@plt+0xac8>
   11960:	ldr	r3, [r3]
   11964:	mov	r0, r3
   11968:	bl	13574 <__assert_fail@plt+0x2618>
   1196c:	mov	r3, r0
   11970:	cmp	r3, #0
   11974:	beq	119a0 <__assert_fail@plt+0xa44>
   11978:	bl	10e9c <__errno_location@plt>
   1197c:	mov	r3, r0
   11980:	ldr	r4, [r3]
   11984:	ldr	r0, [pc, #168]	; 11a34 <__assert_fail@plt+0xad8>
   11988:	bl	10e6c <gettext@plt>
   1198c:	mov	r3, r0
   11990:	ldr	r2, [pc, #160]	; 11a38 <__assert_fail@plt+0xadc>
   11994:	mov	r1, r4
   11998:	mov	r0, #1
   1199c:	bl	10e0c <error@plt>
   119a0:	ldrb	r3, [fp, #-13]
   119a4:	eor	r3, r3, #1
   119a8:	uxtb	r3, r3
   119ac:	mov	r0, r3
   119b0:	sub	sp, fp, #12
   119b4:	pop	{r4, r5, fp, pc}
   119b8:	andeq	r9, r1, r0, ror #4
   119bc:	muleq	r1, r8, r7
   119c0:	andeq	r9, r1, r8, ror r2
   119c4:	andeq	r3, r1, r4, lsr #7
   119c8:	andeq	sl, r2, r3, ror #2
   119cc:	andeq	sl, r2, r2, ror #2
   119d0:	andeq	sl, r2, r1, ror #2
   119d4:	andeq	sl, r2, r0, ror #2
   119d8:	andeq	sl, r2, r8, ror #2
   119dc:	andeq	sl, r2, r4, ror #2
   119e0:	andeq	sl, r2, ip, ror #2
   119e4:	andeq	sl, r2, r0, ror r1
   119e8:	andeq	sl, r2, r4, ror r1
   119ec:			; <UNDEFINED> instruction: 0x000197b0
   119f0:	andeq	sl, r2, r8, asr r1
   119f4:	andeq	sl, r2, r4, asr r1
   119f8:	strdeq	sl, [r2], -r0
   119fc:	andeq	r9, r1, r0, lsl r8
   11a00:	andeq	r9, r1, r8, lsr #3
   11a04:	andeq	r9, r1, ip, lsl #13
   11a08:	strdeq	r9, [r1], -r8
   11a0c:	andeq	r9, r1, r0, lsr #16
   11a10:	andeq	r9, r1, r8, lsr r8
   11a14:	andeq	r0, r0, r4, asr #19
   11a18:	andeq	sl, r2, r8, ror r1
   11a1c:	mvnpl	r8, pc, lsl r5
   11a20:	andeq	sl, r2, r0, asr #2
   11a24:	andeq	sl, r2, r0, asr r1
   11a28:	andeq	r9, r1, r8, asr #16
   11a2c:	andeq	r9, r1, ip, asr #16
   11a30:	andeq	r9, r1, r0, asr r8
   11a34:	andeq	r9, r1, ip, ror #16
   11a38:	andeq	r9, r1, r4, lsl #17
   11a3c:	push	{fp, lr}
   11a40:	add	fp, sp, #4
   11a44:	sub	sp, sp, #16
   11a48:	str	r0, [fp, #-16]
   11a4c:	ldr	r3, [pc, #212]	; 11b28 <__assert_fail@plt+0xbcc>
   11a50:	mov	r2, #0
   11a54:	str	r2, [r3]
   11a58:	b	11a7c <__assert_fail@plt+0xb20>
   11a5c:	ldr	r3, [pc, #196]	; 11b28 <__assert_fail@plt+0xbcc>
   11a60:	ldr	r3, [r3]
   11a64:	add	r3, r3, #1
   11a68:	ldr	r2, [pc, #184]	; 11b28 <__assert_fail@plt+0xbcc>
   11a6c:	str	r3, [r2]
   11a70:	ldr	r3, [fp, #-16]
   11a74:	add	r3, r3, #1
   11a78:	str	r3, [fp, #-16]
   11a7c:	ldr	r3, [fp, #-16]
   11a80:	ldrb	r3, [r3]
   11a84:	cmp	r3, #32
   11a88:	beq	11a5c <__assert_fail@plt+0xb00>
   11a8c:	ldr	r2, [pc, #152]	; 11b2c <__assert_fail@plt+0xbd0>
   11a90:	ldr	r3, [fp, #-16]
   11a94:	str	r3, [r2]
   11a98:	ldr	r0, [fp, #-16]
   11a9c:	bl	10e78 <strlen@plt>
   11aa0:	mov	r3, r0
   11aa4:	mov	r2, r3
   11aa8:	ldr	r3, [pc, #128]	; 11b30 <__assert_fail@plt+0xbd4>
   11aac:	str	r2, [r3]
   11ab0:	ldr	r3, [pc, #120]	; 11b30 <__assert_fail@plt+0xbd4>
   11ab4:	ldr	r3, [r3]
   11ab8:	mov	r2, r3
   11abc:	ldr	r3, [fp, #-16]
   11ac0:	add	r3, r3, r2
   11ac4:	str	r3, [fp, #-8]
   11ac8:	b	11ad8 <__assert_fail@plt+0xb7c>
   11acc:	ldr	r3, [fp, #-8]
   11ad0:	sub	r3, r3, #1
   11ad4:	str	r3, [fp, #-8]
   11ad8:	ldr	r2, [fp, #-8]
   11adc:	ldr	r3, [fp, #-16]
   11ae0:	cmp	r2, r3
   11ae4:	bls	11afc <__assert_fail@plt+0xba0>
   11ae8:	ldr	r3, [fp, #-8]
   11aec:	sub	r3, r3, #1
   11af0:	ldrb	r3, [r3]
   11af4:	cmp	r3, #32
   11af8:	beq	11acc <__assert_fail@plt+0xb70>
   11afc:	ldr	r3, [fp, #-8]
   11b00:	mov	r2, #0
   11b04:	strb	r2, [r3]
   11b08:	ldr	r2, [fp, #-8]
   11b0c:	ldr	r3, [fp, #-16]
   11b10:	sub	r3, r2, r3
   11b14:	ldr	r2, [pc, #24]	; 11b34 <__assert_fail@plt+0xbd8>
   11b18:	str	r3, [r2]
   11b1c:	nop			; (mov r0, r0)
   11b20:	sub	sp, fp, #4
   11b24:	pop	{fp, pc}
   11b28:	andeq	sl, r2, r0, ror r1
   11b2c:	andeq	sl, r2, r4, ror #2
   11b30:	andeq	sl, r2, ip, ror #2
   11b34:	andeq	sl, r2, r4, ror r1
   11b38:	push	{r4, fp, lr}
   11b3c:	add	fp, sp, #8
   11b40:	sub	sp, sp, #20
   11b44:	str	r0, [fp, #-24]	; 0xffffffe8
   11b48:	str	r1, [fp, #-28]	; 0xffffffe4
   11b4c:	mov	r1, #2
   11b50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b54:	bl	13518 <__assert_fail@plt+0x25bc>
   11b58:	ldr	r3, [pc, #300]	; 11c8c <__assert_fail@plt+0xd30>
   11b5c:	mov	r2, #0
   11b60:	strb	r2, [r3]
   11b64:	ldr	r3, [pc, #292]	; 11c90 <__assert_fail@plt+0xd34>
   11b68:	mov	r2, #0
   11b6c:	str	r2, [r3]
   11b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b74:	bl	125c4 <__assert_fail@plt+0x1668>
   11b78:	mov	r2, r0
   11b7c:	ldr	r3, [pc, #272]	; 11c94 <__assert_fail@plt+0xd38>
   11b80:	str	r2, [r3]
   11b84:	b	11b9c <__assert_fail@plt+0xc40>
   11b88:	bl	12b44 <__assert_fail@plt+0x1be8>
   11b8c:	ldr	r3, [pc, #260]	; 11c98 <__assert_fail@plt+0xd3c>
   11b90:	ldr	r3, [r3]
   11b94:	mov	r0, r3
   11b98:	bl	13030 <__assert_fail@plt+0x20d4>
   11b9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ba0:	bl	11ddc <__assert_fail@plt+0xe80>
   11ba4:	mov	r3, r0
   11ba8:	cmp	r3, #0
   11bac:	bne	11b88 <__assert_fail@plt+0xc2c>
   11bb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11bb4:	bl	10df4 <ferror_unlocked@plt>
   11bb8:	mov	r3, r0
   11bbc:	cmp	r3, #0
   11bc0:	beq	11bcc <__assert_fail@plt+0xc70>
   11bc4:	mov	r3, #0
   11bc8:	b	11bd0 <__assert_fail@plt+0xc74>
   11bcc:	mvn	r3, #0
   11bd0:	str	r3, [fp, #-16]
   11bd4:	ldr	r3, [pc, #192]	; 11c9c <__assert_fail@plt+0xd40>
   11bd8:	ldr	r3, [r3]
   11bdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11be0:	cmp	r2, r3
   11be4:	bne	11bf4 <__assert_fail@plt+0xc98>
   11be8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11bec:	bl	10f14 <clearerr_unlocked@plt>
   11bf0:	b	11c24 <__assert_fail@plt+0xcc8>
   11bf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11bf8:	bl	13574 <__assert_fail@plt+0x2618>
   11bfc:	mov	r3, r0
   11c00:	cmp	r3, #0
   11c04:	beq	11c24 <__assert_fail@plt+0xcc8>
   11c08:	ldr	r3, [fp, #-16]
   11c0c:	cmp	r3, #0
   11c10:	bge	11c24 <__assert_fail@plt+0xcc8>
   11c14:	bl	10e9c <__errno_location@plt>
   11c18:	mov	r3, r0
   11c1c:	ldr	r3, [r3]
   11c20:	str	r3, [fp, #-16]
   11c24:	ldr	r3, [fp, #-16]
   11c28:	cmp	r3, #0
   11c2c:	blt	11c74 <__assert_fail@plt+0xd18>
   11c30:	ldr	r3, [fp, #-16]
   11c34:	cmp	r3, #0
   11c38:	bne	11c4c <__assert_fail@plt+0xcf0>
   11c3c:	ldr	r0, [pc, #92]	; 11ca0 <__assert_fail@plt+0xd44>
   11c40:	bl	10e6c <gettext@plt>
   11c44:	mov	r4, r0
   11c48:	b	11c50 <__assert_fail@plt+0xcf4>
   11c4c:	ldr	r4, [pc, #80]	; 11ca4 <__assert_fail@plt+0xd48>
   11c50:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11c54:	mov	r1, #3
   11c58:	mov	r0, #0
   11c5c:	bl	15cb8 <__assert_fail@plt+0x4d5c>
   11c60:	mov	r3, r0
   11c64:	mov	r2, r4
   11c68:	ldr	r1, [fp, #-16]
   11c6c:	mov	r0, #0
   11c70:	bl	10e0c <error@plt>
   11c74:	ldr	r3, [fp, #-16]
   11c78:	lsr	r3, r3, #31
   11c7c:	uxtb	r3, r3
   11c80:	mov	r0, r3
   11c84:	sub	sp, fp, #8
   11c88:	pop	{r4, fp, pc}
   11c8c:	andeq	r2, r3, r4, ror r2
   11c90:	andeq	r2, r3, r0, lsl #5
   11c94:	andeq	r2, r3, r4, lsl #5
   11c98:	andeq	r2, r3, r0, ror r2
   11c9c:	andeq	sl, r2, r0, asr r1
   11ca0:	andeq	r9, r1, r8, lsl #17
   11ca4:	andeq	r9, r1, r4, lsl #17
   11ca8:	push	{fp}		; (str fp, [sp, #-4]!)
   11cac:	add	fp, sp, #0
   11cb0:	sub	sp, sp, #12
   11cb4:	mov	r3, r0
   11cb8:	strb	r3, [fp, #-5]
   11cbc:	ldr	r3, [pc, #256]	; 11dc4 <__assert_fail@plt+0xe68>
   11cc0:	ldrb	r3, [r3]
   11cc4:	cmp	r3, #0
   11cc8:	beq	11ce0 <__assert_fail@plt+0xd84>
   11ccc:	ldr	r3, [pc, #244]	; 11dc8 <__assert_fail@plt+0xe6c>
   11cd0:	ldr	r3, [r3]
   11cd4:	ldr	r2, [pc, #240]	; 11dcc <__assert_fail@plt+0xe70>
   11cd8:	str	r3, [r2]
   11cdc:	b	11db4 <__assert_fail@plt+0xe58>
   11ce0:	ldr	r3, [pc, #232]	; 11dd0 <__assert_fail@plt+0xe74>
   11ce4:	ldrb	r3, [r3]
   11ce8:	cmp	r3, #0
   11cec:	beq	11d1c <__assert_fail@plt+0xdc0>
   11cf0:	ldrb	r3, [fp, #-5]
   11cf4:	cmp	r3, #0
   11cf8:	beq	11d08 <__assert_fail@plt+0xdac>
   11cfc:	ldr	r3, [pc, #208]	; 11dd4 <__assert_fail@plt+0xe78>
   11d00:	ldr	r3, [r3]
   11d04:	b	11d10 <__assert_fail@plt+0xdb4>
   11d08:	ldr	r3, [pc, #184]	; 11dc8 <__assert_fail@plt+0xe6c>
   11d0c:	ldr	r3, [r3]
   11d10:	ldr	r2, [pc, #180]	; 11dcc <__assert_fail@plt+0xe70>
   11d14:	str	r3, [r2]
   11d18:	b	11db4 <__assert_fail@plt+0xe58>
   11d1c:	ldr	r3, [pc, #180]	; 11dd8 <__assert_fail@plt+0xe7c>
   11d20:	ldrb	r3, [r3]
   11d24:	cmp	r3, #0
   11d28:	beq	11da4 <__assert_fail@plt+0xe48>
   11d2c:	ldrb	r3, [fp, #-5]
   11d30:	cmp	r3, #0
   11d34:	beq	11d64 <__assert_fail@plt+0xe08>
   11d38:	ldr	r3, [pc, #148]	; 11dd4 <__assert_fail@plt+0xe78>
   11d3c:	ldr	r2, [r3]
   11d40:	ldr	r3, [pc, #128]	; 11dc8 <__assert_fail@plt+0xe6c>
   11d44:	ldr	r3, [r3]
   11d48:	cmp	r2, r3
   11d4c:	beq	11d64 <__assert_fail@plt+0xe08>
   11d50:	ldr	r3, [pc, #124]	; 11dd4 <__assert_fail@plt+0xe78>
   11d54:	ldr	r3, [r3]
   11d58:	ldr	r2, [pc, #108]	; 11dcc <__assert_fail@plt+0xe70>
   11d5c:	str	r3, [r2]
   11d60:	b	11db4 <__assert_fail@plt+0xe58>
   11d64:	ldr	r3, [pc, #96]	; 11dcc <__assert_fail@plt+0xe70>
   11d68:	ldr	r2, [r3]
   11d6c:	ldr	r3, [pc, #84]	; 11dc8 <__assert_fail@plt+0xe6c>
   11d70:	ldr	r3, [r3]
   11d74:	cmp	r2, r3
   11d78:	bne	11db4 <__assert_fail@plt+0xe58>
   11d7c:	ldr	r3, [pc, #68]	; 11dc8 <__assert_fail@plt+0xe6c>
   11d80:	ldr	r3, [r3]
   11d84:	cmp	r3, #0
   11d88:	bne	11d94 <__assert_fail@plt+0xe38>
   11d8c:	mov	r3, #3
   11d90:	b	11d98 <__assert_fail@plt+0xe3c>
   11d94:	mov	r3, #0
   11d98:	ldr	r2, [pc, #44]	; 11dcc <__assert_fail@plt+0xe70>
   11d9c:	str	r3, [r2]
   11da0:	b	11db4 <__assert_fail@plt+0xe58>
   11da4:	ldr	r3, [pc, #28]	; 11dc8 <__assert_fail@plt+0xe6c>
   11da8:	ldr	r3, [r3]
   11dac:	ldr	r2, [pc, #24]	; 11dcc <__assert_fail@plt+0xe70>
   11db0:	str	r3, [r2]
   11db4:	nop			; (mov r0, r0)
   11db8:	add	sp, fp, #0
   11dbc:	pop	{fp}		; (ldr fp, [sp], #4)
   11dc0:	bx	lr
   11dc4:	andeq	sl, r2, r2, ror #2
   11dc8:	andeq	r2, r3, ip, ror r2
   11dcc:	andeq	r2, r3, r0, lsl #5
   11dd0:	andeq	sl, r2, r0, ror #2
   11dd4:	andeq	sl, r2, ip, ror r1
   11dd8:	andeq	sl, r2, r1, ror #2
   11ddc:	push	{fp, lr}
   11de0:	add	fp, sp, #4
   11de4:	sub	sp, sp, #16
   11de8:	str	r0, [fp, #-16]
   11dec:	ldr	r3, [pc, #712]	; 120bc <__assert_fail@plt+0x1160>
   11df0:	mov	r2, #0
   11df4:	str	r2, [r3]
   11df8:	ldr	r3, [pc, #704]	; 120c0 <__assert_fail@plt+0x1164>
   11dfc:	ldr	r3, [r3]
   11e00:	str	r3, [fp, #-8]
   11e04:	b	11e4c <__assert_fail@plt+0xef0>
   11e08:	ldr	r1, [fp, #-8]
   11e0c:	ldr	r0, [fp, #-16]
   11e10:	bl	1210c <__assert_fail@plt+0x11b0>
   11e14:	str	r0, [fp, #-8]
   11e18:	ldr	r3, [fp, #-8]
   11e1c:	cmn	r3, #1
   11e20:	bne	11e38 <__assert_fail@plt+0xedc>
   11e24:	ldr	r3, [pc, #660]	; 120c0 <__assert_fail@plt+0x1164>
   11e28:	mvn	r2, #0
   11e2c:	str	r2, [r3]
   11e30:	mov	r3, #0
   11e34:	b	120b0 <__assert_fail@plt+0x1154>
   11e38:	mov	r0, #10
   11e3c:	bl	10f50 <putchar_unlocked@plt>
   11e40:	ldr	r0, [fp, #-16]
   11e44:	bl	125c4 <__assert_fail@plt+0x1668>
   11e48:	str	r0, [fp, #-8]
   11e4c:	ldr	r3, [fp, #-8]
   11e50:	cmp	r3, #10
   11e54:	beq	11e08 <__assert_fail@plt+0xeac>
   11e58:	ldr	r3, [fp, #-8]
   11e5c:	cmn	r3, #1
   11e60:	beq	11e08 <__assert_fail@plt+0xeac>
   11e64:	ldr	r3, [pc, #600]	; 120c4 <__assert_fail@plt+0x1168>
   11e68:	ldr	r2, [r3]
   11e6c:	ldr	r3, [pc, #596]	; 120c8 <__assert_fail@plt+0x116c>
   11e70:	ldr	r3, [r3]
   11e74:	cmp	r2, r3
   11e78:	blt	11e08 <__assert_fail@plt+0xeac>
   11e7c:	ldr	r3, [pc, #576]	; 120c4 <__assert_fail@plt+0x1168>
   11e80:	ldr	r2, [r3]
   11e84:	ldr	r3, [pc, #576]	; 120cc <__assert_fail@plt+0x1170>
   11e88:	ldr	r3, [r3]
   11e8c:	add	r2, r2, r3
   11e90:	ldr	r3, [pc, #568]	; 120d0 <__assert_fail@plt+0x1174>
   11e94:	ldr	r3, [r3]
   11e98:	cmp	r2, r3
   11e9c:	bgt	11e08 <__assert_fail@plt+0xeac>
   11ea0:	ldr	r3, [pc, #540]	; 120c4 <__assert_fail@plt+0x1168>
   11ea4:	ldr	r3, [r3]
   11ea8:	ldr	r2, [pc, #548]	; 120d4 <__assert_fail@plt+0x1178>
   11eac:	str	r3, [r2]
   11eb0:	ldr	r3, [pc, #536]	; 120d0 <__assert_fail@plt+0x1174>
   11eb4:	ldr	r3, [r3]
   11eb8:	ldr	r2, [pc, #536]	; 120d8 <__assert_fail@plt+0x117c>
   11ebc:	str	r3, [r2]
   11ec0:	ldr	r3, [pc, #532]	; 120dc <__assert_fail@plt+0x1180>
   11ec4:	ldr	r2, [pc, #532]	; 120e0 <__assert_fail@plt+0x1184>
   11ec8:	str	r2, [r3]
   11ecc:	ldr	r3, [pc, #528]	; 120e4 <__assert_fail@plt+0x1188>
   11ed0:	ldr	r2, [pc, #528]	; 120e8 <__assert_fail@plt+0x118c>
   11ed4:	str	r2, [r3]
   11ed8:	ldr	r1, [fp, #-8]
   11edc:	ldr	r0, [fp, #-16]
   11ee0:	bl	12328 <__assert_fail@plt+0x13cc>
   11ee4:	str	r0, [fp, #-8]
   11ee8:	ldr	r0, [fp, #-8]
   11eec:	bl	12290 <__assert_fail@plt+0x1334>
   11ef0:	mov	r3, r0
   11ef4:	mov	r0, r3
   11ef8:	bl	11ca8 <__assert_fail@plt+0xd4c>
   11efc:	ldr	r3, [pc, #488]	; 120ec <__assert_fail@plt+0x1190>
   11f00:	ldrb	r3, [r3]
   11f04:	cmp	r3, #0
   11f08:	bne	12028 <__assert_fail@plt+0x10cc>
   11f0c:	ldr	r3, [pc, #476]	; 120f0 <__assert_fail@plt+0x1194>
   11f10:	ldrb	r3, [r3]
   11f14:	cmp	r3, #0
   11f18:	beq	11f70 <__assert_fail@plt+0x1014>
   11f1c:	ldr	r0, [fp, #-8]
   11f20:	bl	12290 <__assert_fail@plt+0x1334>
   11f24:	mov	r3, r0
   11f28:	cmp	r3, #0
   11f2c:	beq	12028 <__assert_fail@plt+0x10cc>
   11f30:	ldr	r1, [fp, #-8]
   11f34:	ldr	r0, [fp, #-16]
   11f38:	bl	12328 <__assert_fail@plt+0x13cc>
   11f3c:	str	r0, [fp, #-8]
   11f40:	ldr	r0, [fp, #-8]
   11f44:	bl	12290 <__assert_fail@plt+0x1334>
   11f48:	mov	r3, r0
   11f4c:	cmp	r3, #0
   11f50:	beq	12028 <__assert_fail@plt+0x10cc>
   11f54:	ldr	r3, [pc, #372]	; 120d0 <__assert_fail@plt+0x1174>
   11f58:	ldr	r2, [r3]
   11f5c:	ldr	r3, [pc, #400]	; 120f4 <__assert_fail@plt+0x1198>
   11f60:	ldr	r3, [r3]
   11f64:	cmp	r2, r3
   11f68:	beq	11f30 <__assert_fail@plt+0xfd4>
   11f6c:	b	12028 <__assert_fail@plt+0x10cc>
   11f70:	ldr	r3, [pc, #384]	; 120f8 <__assert_fail@plt+0x119c>
   11f74:	ldrb	r3, [r3]
   11f78:	cmp	r3, #0
   11f7c:	beq	11ffc <__assert_fail@plt+0x10a0>
   11f80:	ldr	r0, [fp, #-8]
   11f84:	bl	12290 <__assert_fail@plt+0x1334>
   11f88:	mov	r3, r0
   11f8c:	cmp	r3, #0
   11f90:	beq	12028 <__assert_fail@plt+0x10cc>
   11f94:	ldr	r3, [pc, #308]	; 120d0 <__assert_fail@plt+0x1174>
   11f98:	ldr	r2, [r3]
   11f9c:	ldr	r3, [pc, #308]	; 120d8 <__assert_fail@plt+0x117c>
   11fa0:	ldr	r3, [r3]
   11fa4:	cmp	r2, r3
   11fa8:	beq	12028 <__assert_fail@plt+0x10cc>
   11fac:	ldr	r1, [fp, #-8]
   11fb0:	ldr	r0, [fp, #-16]
   11fb4:	bl	12328 <__assert_fail@plt+0x13cc>
   11fb8:	str	r0, [fp, #-8]
   11fbc:	ldr	r0, [fp, #-8]
   11fc0:	bl	12290 <__assert_fail@plt+0x1334>
   11fc4:	mov	r3, r0
   11fc8:	cmp	r3, #0
   11fcc:	beq	12028 <__assert_fail@plt+0x10cc>
   11fd0:	ldr	r3, [pc, #248]	; 120d0 <__assert_fail@plt+0x1174>
   11fd4:	ldr	r2, [r3]
   11fd8:	ldr	r3, [pc, #276]	; 120f4 <__assert_fail@plt+0x1198>
   11fdc:	ldr	r3, [r3]
   11fe0:	cmp	r2, r3
   11fe4:	beq	11fac <__assert_fail@plt+0x1050>
   11fe8:	b	12028 <__assert_fail@plt+0x10cc>
   11fec:	ldr	r1, [fp, #-8]
   11ff0:	ldr	r0, [fp, #-16]
   11ff4:	bl	12328 <__assert_fail@plt+0x13cc>
   11ff8:	str	r0, [fp, #-8]
   11ffc:	ldr	r0, [fp, #-8]
   12000:	bl	12290 <__assert_fail@plt+0x1334>
   12004:	mov	r3, r0
   12008:	cmp	r3, #0
   1200c:	beq	12028 <__assert_fail@plt+0x10cc>
   12010:	ldr	r3, [pc, #184]	; 120d0 <__assert_fail@plt+0x1174>
   12014:	ldr	r2, [r3]
   12018:	ldr	r3, [pc, #212]	; 120f4 <__assert_fail@plt+0x1198>
   1201c:	ldr	r3, [r3]
   12020:	cmp	r2, r3
   12024:	beq	11fec <__assert_fail@plt+0x1090>
   12028:	ldr	r3, [pc, #180]	; 120e4 <__assert_fail@plt+0x1188>
   1202c:	ldr	r3, [r3]
   12030:	ldr	r2, [pc, #176]	; 120e8 <__assert_fail@plt+0x118c>
   12034:	cmp	r3, r2
   12038:	bhi	12050 <__assert_fail@plt+0x10f4>
   1203c:	ldr	r3, [pc, #184]	; 120fc <__assert_fail@plt+0x11a0>
   12040:	ldr	r2, [pc, #184]	; 12100 <__assert_fail@plt+0x11a4>
   12044:	ldr	r1, [pc, #184]	; 12104 <__assert_fail@plt+0x11a8>
   12048:	ldr	r0, [pc, #184]	; 12108 <__assert_fail@plt+0x11ac>
   1204c:	bl	10f5c <__assert_fail@plt>
   12050:	ldr	r3, [pc, #140]	; 120e4 <__assert_fail@plt+0x1188>
   12054:	ldr	r3, [r3]
   12058:	sub	r1, r3, #28
   1205c:	ldr	r3, [pc, #128]	; 120e4 <__assert_fail@plt+0x1188>
   12060:	ldr	r3, [r3]
   12064:	sub	r3, r3, #28
   12068:	ldrb	r2, [r3, #12]
   1206c:	orr	r2, r2, #8
   12070:	strb	r2, [r3, #12]
   12074:	ldrb	r3, [r3, #12]
   12078:	lsr	r3, r3, #3
   1207c:	and	r3, r3, #1
   12080:	uxtb	r3, r3
   12084:	ldrb	r2, [r1, #12]
   12088:	and	r3, r3, #1
   1208c:	bic	r2, r2, #2
   12090:	lsl	r3, r3, #1
   12094:	orr	r3, r3, r2
   12098:	mov	r2, r3
   1209c:	strb	r2, [r1, #12]
   120a0:	ldr	r2, [pc, #24]	; 120c0 <__assert_fail@plt+0x1164>
   120a4:	ldr	r3, [fp, #-8]
   120a8:	str	r3, [r2]
   120ac:	mov	r3, #1
   120b0:	mov	r0, r3
   120b4:	sub	sp, fp, #4
   120b8:	pop	{fp, pc}
   120bc:	andeq	r2, r3, ip, lsl #5
   120c0:	andeq	r2, r3, r4, lsl #5
   120c4:	andeq	r2, r3, r8, lsl #5
   120c8:	andeq	sl, r2, r0, ror r1
   120cc:	andeq	sl, r2, ip, ror #2
   120d0:	andeq	sl, r2, ip, ror r1
   120d4:	andeq	r2, r3, r8, ror r2
   120d8:	andeq	r2, r3, ip, ror r2
   120dc:	andeq	fp, r2, ip, lsl #10
   120e0:	andeq	sl, r2, r4, lsl #3
   120e4:	andeq	r2, r3, r0, ror r2
   120e8:	andeq	fp, r2, r0, lsl r5
   120ec:	andeq	sl, r2, r2, ror #2
   120f0:	andeq	sl, r2, r0, ror #2
   120f4:	andeq	r2, r3, r0, lsl #5
   120f8:	andeq	sl, r2, r1, ror #2
   120fc:	andeq	r9, r1, r8, asr #17
   12100:	andeq	r0, r0, pc, ror #4
   12104:	muleq	r1, r4, r8
   12108:	andeq	r9, r1, r0, lsr #17
   1210c:	push	{fp, lr}
   12110:	add	fp, sp, #4
   12114:	sub	sp, sp, #16
   12118:	str	r0, [fp, #-16]
   1211c:	str	r1, [fp, #-20]	; 0xffffffec
   12120:	ldr	r3, [pc, #340]	; 1227c <__assert_fail@plt+0x1320>
   12124:	mov	r2, #0
   12128:	str	r2, [r3]
   1212c:	ldr	r3, [pc, #332]	; 12280 <__assert_fail@plt+0x1324>
   12130:	ldr	r2, [r3]
   12134:	ldr	r3, [pc, #328]	; 12284 <__assert_fail@plt+0x1328>
   12138:	ldr	r3, [r3]
   1213c:	cmp	r2, r3
   12140:	bgt	1215c <__assert_fail@plt+0x1200>
   12144:	ldr	r3, [fp, #-20]	; 0xffffffec
   12148:	cmp	r3, #10
   1214c:	beq	12254 <__assert_fail@plt+0x12f8>
   12150:	ldr	r3, [fp, #-20]	; 0xffffffec
   12154:	cmn	r3, #1
   12158:	beq	12254 <__assert_fail@plt+0x12f8>
   1215c:	ldr	r3, [pc, #288]	; 12284 <__assert_fail@plt+0x1328>
   12160:	ldr	r3, [r3]
   12164:	mov	r0, r3
   12168:	bl	13240 <__assert_fail@plt+0x22e4>
   1216c:	ldr	r3, [pc, #276]	; 12288 <__assert_fail@plt+0x132c>
   12170:	ldr	r3, [r3]
   12174:	str	r3, [fp, #-8]
   12178:	b	121a8 <__assert_fail@plt+0x124c>
   1217c:	ldr	r3, [fp, #-8]
   12180:	add	r2, r3, #1
   12184:	str	r2, [fp, #-8]
   12188:	ldrb	r3, [r3]
   1218c:	mov	r0, r3
   12190:	bl	10f50 <putchar_unlocked@plt>
   12194:	ldr	r3, [pc, #224]	; 1227c <__assert_fail@plt+0x1320>
   12198:	ldr	r3, [r3]
   1219c:	add	r3, r3, #1
   121a0:	ldr	r2, [pc, #212]	; 1227c <__assert_fail@plt+0x1320>
   121a4:	str	r3, [r2]
   121a8:	ldr	r3, [pc, #204]	; 1227c <__assert_fail@plt+0x1320>
   121ac:	ldr	r2, [r3]
   121b0:	ldr	r3, [pc, #200]	; 12280 <__assert_fail@plt+0x1324>
   121b4:	ldr	r3, [r3]
   121b8:	cmp	r2, r3
   121bc:	beq	121d0 <__assert_fail@plt+0x1274>
   121c0:	ldr	r3, [fp, #-8]
   121c4:	ldrb	r3, [r3]
   121c8:	cmp	r3, #0
   121cc:	bne	1217c <__assert_fail@plt+0x1220>
   121d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   121d4:	cmn	r3, #1
   121d8:	beq	12204 <__assert_fail@plt+0x12a8>
   121dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   121e0:	cmp	r3, #10
   121e4:	beq	12204 <__assert_fail@plt+0x12a8>
   121e8:	ldr	r3, [pc, #144]	; 12280 <__assert_fail@plt+0x1324>
   121ec:	ldr	r2, [r3]
   121f0:	ldr	r3, [pc, #132]	; 1227c <__assert_fail@plt+0x1320>
   121f4:	ldr	r3, [r3]
   121f8:	sub	r3, r2, r3
   121fc:	mov	r0, r3
   12200:	bl	13240 <__assert_fail@plt+0x22e4>
   12204:	ldr	r3, [fp, #-20]	; 0xffffffec
   12208:	cmn	r3, #1
   1220c:	bne	12254 <__assert_fail@plt+0x12f8>
   12210:	ldr	r3, [pc, #108]	; 12284 <__assert_fail@plt+0x1328>
   12214:	ldr	r2, [r3]
   12218:	ldr	r3, [pc, #108]	; 1228c <__assert_fail@plt+0x1330>
   1221c:	ldr	r3, [r3]
   12220:	add	r2, r2, r3
   12224:	ldr	r3, [pc, #84]	; 12280 <__assert_fail@plt+0x1324>
   12228:	ldr	r3, [r3]
   1222c:	cmp	r2, r3
   12230:	bgt	12254 <__assert_fail@plt+0x12f8>
   12234:	mov	r0, #10
   12238:	bl	10f50 <putchar_unlocked@plt>
   1223c:	b	12254 <__assert_fail@plt+0x12f8>
   12240:	ldr	r0, [fp, #-20]	; 0xffffffec
   12244:	bl	10f50 <putchar_unlocked@plt>
   12248:	ldr	r0, [fp, #-16]
   1224c:	bl	10d94 <getc_unlocked@plt>
   12250:	str	r0, [fp, #-20]	; 0xffffffec
   12254:	ldr	r3, [fp, #-20]	; 0xffffffec
   12258:	cmp	r3, #10
   1225c:	beq	1226c <__assert_fail@plt+0x1310>
   12260:	ldr	r3, [fp, #-20]	; 0xffffffec
   12264:	cmn	r3, #1
   12268:	bne	12240 <__assert_fail@plt+0x12e4>
   1226c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12270:	mov	r0, r3
   12274:	sub	sp, fp, #4
   12278:	pop	{fp, pc}
   1227c:	andeq	sl, r2, r0, lsl #3
   12280:	andeq	sl, r2, ip, ror r1
   12284:	andeq	r2, r3, r8, lsl #5
   12288:	andeq	sl, r2, r4, ror #2
   1228c:	andeq	sl, r2, r4, ror r1
   12290:	push	{fp}		; (str fp, [sp, #-4]!)
   12294:	add	fp, sp, #0
   12298:	sub	sp, sp, #12
   1229c:	str	r0, [fp, #-8]
   122a0:	ldr	r3, [pc, #112]	; 12318 <__assert_fail@plt+0x13bc>
   122a4:	ldr	r2, [r3]
   122a8:	ldr	r3, [pc, #108]	; 1231c <__assert_fail@plt+0x13c0>
   122ac:	ldr	r3, [r3]
   122b0:	cmp	r2, r3
   122b4:	bne	122fc <__assert_fail@plt+0x13a0>
   122b8:	ldr	r3, [pc, #88]	; 12318 <__assert_fail@plt+0x13bc>
   122bc:	ldr	r2, [r3]
   122c0:	ldr	r3, [pc, #88]	; 12320 <__assert_fail@plt+0x13c4>
   122c4:	ldr	r3, [r3]
   122c8:	add	r2, r2, r3
   122cc:	ldr	r3, [pc, #80]	; 12324 <__assert_fail@plt+0x13c8>
   122d0:	ldr	r3, [r3]
   122d4:	cmp	r2, r3
   122d8:	bgt	122fc <__assert_fail@plt+0x13a0>
   122dc:	ldr	r3, [fp, #-8]
   122e0:	cmp	r3, #10
   122e4:	beq	122fc <__assert_fail@plt+0x13a0>
   122e8:	ldr	r3, [fp, #-8]
   122ec:	cmn	r3, #1
   122f0:	beq	122fc <__assert_fail@plt+0x13a0>
   122f4:	mov	r3, #1
   122f8:	b	12300 <__assert_fail@plt+0x13a4>
   122fc:	mov	r3, #0
   12300:	and	r3, r3, #1
   12304:	uxtb	r3, r3
   12308:	mov	r0, r3
   1230c:	add	sp, fp, #0
   12310:	pop	{fp}		; (ldr fp, [sp], #4)
   12314:	bx	lr
   12318:	andeq	r2, r3, r8, lsl #5
   1231c:	andeq	r2, r3, r8, ror r2
   12320:	andeq	sl, r2, ip, ror #2
   12324:	andeq	sl, r2, ip, ror r1
   12328:	push	{fp, lr}
   1232c:	add	fp, sp, #4
   12330:	sub	sp, sp, #24
   12334:	str	r0, [fp, #-24]	; 0xffffffe8
   12338:	str	r1, [fp, #-28]	; 0xffffffe4
   1233c:	ldr	r3, [pc, #616]	; 125ac <__assert_fail@plt+0x1650>
   12340:	str	r3, [fp, #-8]
   12344:	ldr	r3, [pc, #612]	; 125b0 <__assert_fail@plt+0x1654>
   12348:	str	r3, [fp, #-12]
   1234c:	ldr	r3, [pc, #608]	; 125b4 <__assert_fail@plt+0x1658>
   12350:	ldr	r3, [r3]
   12354:	ldr	r2, [pc, #604]	; 125b8 <__assert_fail@plt+0x165c>
   12358:	ldr	r2, [r2]
   1235c:	str	r2, [r3]
   12360:	ldr	r3, [pc, #592]	; 125b8 <__assert_fail@plt+0x165c>
   12364:	ldr	r2, [r3]
   12368:	ldr	r3, [fp, #-8]
   1236c:	cmp	r2, r3
   12370:	bne	12380 <__assert_fail@plt+0x1424>
   12374:	mov	r0, #1
   12378:	bl	11ca8 <__assert_fail@plt+0xd4c>
   1237c:	bl	12904 <__assert_fail@plt+0x19a8>
   12380:	ldr	r3, [pc, #560]	; 125b8 <__assert_fail@plt+0x165c>
   12384:	ldr	r3, [r3]
   12388:	add	r2, r3, #1
   1238c:	ldr	r1, [pc, #548]	; 125b8 <__assert_fail@plt+0x165c>
   12390:	str	r2, [r1]
   12394:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12398:	uxtb	r2, r2
   1239c:	strb	r2, [r3]
   123a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   123a4:	bl	10d94 <getc_unlocked@plt>
   123a8:	str	r0, [fp, #-28]	; 0xffffffe4
   123ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123b0:	cmn	r3, #1
   123b4:	beq	123e0 <__assert_fail@plt+0x1484>
   123b8:	bl	10e54 <__ctype_b_loc@plt>
   123bc:	mov	r3, r0
   123c0:	ldr	r2, [r3]
   123c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123c8:	lsl	r3, r3, #1
   123cc:	add	r3, r2, r3
   123d0:	ldrh	r3, [r3]
   123d4:	and	r3, r3, #8192	; 0x2000
   123d8:	cmp	r3, #0
   123dc:	beq	12360 <__assert_fail@plt+0x1404>
   123e0:	ldr	r3, [pc, #460]	; 125b4 <__assert_fail@plt+0x1658>
   123e4:	ldr	r3, [r3]
   123e8:	ldr	r2, [pc, #456]	; 125b8 <__assert_fail@plt+0x165c>
   123ec:	ldr	r2, [r2]
   123f0:	mov	r1, r2
   123f4:	ldr	r2, [pc, #440]	; 125b4 <__assert_fail@plt+0x1658>
   123f8:	ldr	r2, [r2]
   123fc:	ldr	r2, [r2]
   12400:	sub	r2, r1, r2
   12404:	str	r2, [r3, #4]
   12408:	ldr	r2, [r3, #4]
   1240c:	ldr	r3, [pc, #424]	; 125bc <__assert_fail@plt+0x1660>
   12410:	ldr	r3, [r3]
   12414:	add	r3, r2, r3
   12418:	ldr	r2, [pc, #412]	; 125bc <__assert_fail@plt+0x1660>
   1241c:	str	r3, [r2]
   12420:	ldr	r3, [pc, #396]	; 125b4 <__assert_fail@plt+0x1658>
   12424:	ldr	r3, [r3]
   12428:	mov	r0, r3
   1242c:	bl	12794 <__assert_fail@plt+0x1838>
   12430:	ldr	r3, [pc, #388]	; 125bc <__assert_fail@plt+0x1660>
   12434:	ldr	r3, [r3]
   12438:	str	r3, [fp, #-16]
   1243c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12440:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12444:	bl	126e8 <__assert_fail@plt+0x178c>
   12448:	str	r0, [fp, #-28]	; 0xffffffe4
   1244c:	ldr	r3, [pc, #352]	; 125b4 <__assert_fail@plt+0x1658>
   12450:	ldr	r3, [r3]
   12454:	ldr	r2, [pc, #352]	; 125bc <__assert_fail@plt+0x1660>
   12458:	ldr	r1, [r2]
   1245c:	ldr	r2, [fp, #-16]
   12460:	sub	r2, r1, r2
   12464:	str	r2, [r3, #8]
   12468:	ldr	r3, [pc, #324]	; 125b4 <__assert_fail@plt+0x1658>
   1246c:	ldr	r1, [r3]
   12470:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12474:	cmn	r3, #1
   12478:	beq	124b8 <__assert_fail@plt+0x155c>
   1247c:	ldr	r3, [pc, #304]	; 125b4 <__assert_fail@plt+0x1658>
   12480:	ldr	r3, [r3]
   12484:	ldrb	r3, [r3, #12]
   12488:	and	r3, r3, #2
   1248c:	uxtb	r3, r3
   12490:	cmp	r3, #0
   12494:	beq	124c0 <__assert_fail@plt+0x1564>
   12498:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1249c:	cmp	r3, #10
   124a0:	beq	124b8 <__assert_fail@plt+0x155c>
   124a4:	ldr	r3, [pc, #264]	; 125b4 <__assert_fail@plt+0x1658>
   124a8:	ldr	r3, [r3]
   124ac:	ldr	r3, [r3, #8]
   124b0:	cmp	r3, #1
   124b4:	ble	124c0 <__assert_fail@plt+0x1564>
   124b8:	mov	r3, #1
   124bc:	b	124c4 <__assert_fail@plt+0x1568>
   124c0:	mov	r3, #0
   124c4:	uxtb	r3, r3
   124c8:	and	r3, r3, #1
   124cc:	uxtb	r3, r3
   124d0:	ldrb	r2, [r1, #12]
   124d4:	and	r3, r3, #1
   124d8:	bic	r2, r2, #8
   124dc:	lsl	r3, r3, #3
   124e0:	orr	r3, r3, r2
   124e4:	mov	r2, r3
   124e8:	strb	r2, [r1, #12]
   124ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124f0:	cmp	r3, #10
   124f4:	beq	12514 <__assert_fail@plt+0x15b8>
   124f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124fc:	cmn	r3, #1
   12500:	beq	12514 <__assert_fail@plt+0x15b8>
   12504:	ldr	r3, [pc, #180]	; 125c0 <__assert_fail@plt+0x1664>
   12508:	ldrb	r3, [r3]
   1250c:	cmp	r3, #0
   12510:	beq	12548 <__assert_fail@plt+0x15ec>
   12514:	ldr	r3, [pc, #152]	; 125b4 <__assert_fail@plt+0x1658>
   12518:	ldr	r3, [r3]
   1251c:	ldr	r2, [pc, #144]	; 125b4 <__assert_fail@plt+0x1658>
   12520:	ldr	r2, [r2]
   12524:	ldrb	r2, [r2, #12]
   12528:	and	r2, r2, #8
   1252c:	uxtb	r2, r2
   12530:	cmp	r2, #0
   12534:	beq	12540 <__assert_fail@plt+0x15e4>
   12538:	mov	r2, #2
   1253c:	b	12544 <__assert_fail@plt+0x15e8>
   12540:	mov	r2, #1
   12544:	str	r2, [r3, #8]
   12548:	ldr	r3, [pc, #100]	; 125b4 <__assert_fail@plt+0x1658>
   1254c:	ldr	r2, [r3]
   12550:	ldr	r3, [fp, #-12]
   12554:	cmp	r2, r3
   12558:	bne	12568 <__assert_fail@plt+0x160c>
   1255c:	mov	r0, #1
   12560:	bl	11ca8 <__assert_fail@plt+0xd4c>
   12564:	bl	12904 <__assert_fail@plt+0x19a8>
   12568:	ldr	r3, [pc, #68]	; 125b4 <__assert_fail@plt+0x1658>
   1256c:	ldr	r3, [r3]
   12570:	add	r3, r3, #28
   12574:	ldr	r2, [pc, #56]	; 125b4 <__assert_fail@plt+0x1658>
   12578:	str	r3, [r2]
   1257c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12580:	cmp	r3, #10
   12584:	beq	12594 <__assert_fail@plt+0x1638>
   12588:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1258c:	cmn	r3, #1
   12590:	bne	1234c <__assert_fail@plt+0x13f0>
   12594:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12598:	bl	125c4 <__assert_fail@plt+0x1668>
   1259c:	mov	r3, r0
   125a0:	mov	r0, r3
   125a4:	sub	sp, fp, #4
   125a8:	pop	{fp, pc}
   125ac:	andeq	fp, r2, ip, lsl #10
   125b0:	andeq	r2, r3, r8, lsr r2
   125b4:	andeq	r2, r3, r0, ror r2
   125b8:	andeq	fp, r2, ip, lsl #10
   125bc:	andeq	sl, r2, ip, ror r1
   125c0:	andeq	sl, r2, r3, ror #2
   125c4:	push	{fp, lr}
   125c8:	add	fp, sp, #4
   125cc:	sub	sp, sp, #24
   125d0:	str	r0, [fp, #-24]	; 0xffffffe8
   125d4:	ldr	r3, [pc, #248]	; 126d4 <__assert_fail@plt+0x1778>
   125d8:	mov	r2, #0
   125dc:	str	r2, [r3]
   125e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125e4:	bl	10d94 <getc_unlocked@plt>
   125e8:	mov	r3, r0
   125ec:	mov	r1, r3
   125f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125f4:	bl	126e8 <__assert_fail@plt+0x178c>
   125f8:	str	r0, [fp, #-8]
   125fc:	ldr	r3, [pc, #212]	; 126d8 <__assert_fail@plt+0x177c>
   12600:	ldr	r3, [r3]
   12604:	cmp	r3, #0
   12608:	bne	12634 <__assert_fail@plt+0x16d8>
   1260c:	ldr	r3, [pc, #192]	; 126d4 <__assert_fail@plt+0x1778>
   12610:	ldr	r2, [r3]
   12614:	ldr	r3, [pc, #192]	; 126dc <__assert_fail@plt+0x1780>
   12618:	ldr	r3, [r3]
   1261c:	cmp	r2, r3
   12620:	movlt	r3, r2
   12624:	movge	r3, r3
   12628:	ldr	r2, [pc, #176]	; 126e0 <__assert_fail@plt+0x1784>
   1262c:	str	r3, [r2]
   12630:	b	126c4 <__assert_fail@plt+0x1768>
   12634:	ldr	r3, [pc, #152]	; 126d4 <__assert_fail@plt+0x1778>
   12638:	ldr	r3, [r3]
   1263c:	ldr	r2, [pc, #156]	; 126e0 <__assert_fail@plt+0x1784>
   12640:	str	r3, [r2]
   12644:	ldr	r3, [pc, #152]	; 126e4 <__assert_fail@plt+0x1788>
   12648:	ldr	r3, [r3]
   1264c:	str	r3, [fp, #-12]
   12650:	b	126a4 <__assert_fail@plt+0x1748>
   12654:	ldr	r3, [fp, #-12]
   12658:	ldrb	r3, [r3]
   1265c:	strb	r3, [fp, #-13]
   12660:	ldrb	r2, [fp, #-13]
   12664:	ldr	r3, [fp, #-8]
   12668:	cmp	r2, r3
   1266c:	beq	12678 <__assert_fail@plt+0x171c>
   12670:	ldr	r3, [fp, #-8]
   12674:	b	126c8 <__assert_fail@plt+0x176c>
   12678:	ldr	r3, [pc, #84]	; 126d4 <__assert_fail@plt+0x1778>
   1267c:	ldr	r3, [r3]
   12680:	add	r3, r3, #1
   12684:	ldr	r2, [pc, #72]	; 126d4 <__assert_fail@plt+0x1778>
   12688:	str	r3, [r2]
   1268c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12690:	bl	10d94 <getc_unlocked@plt>
   12694:	str	r0, [fp, #-8]
   12698:	ldr	r3, [fp, #-12]
   1269c:	add	r3, r3, #1
   126a0:	str	r3, [fp, #-12]
   126a4:	ldr	r3, [fp, #-12]
   126a8:	ldrb	r3, [r3]
   126ac:	cmp	r3, #0
   126b0:	bne	12654 <__assert_fail@plt+0x16f8>
   126b4:	ldr	r1, [fp, #-8]
   126b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   126bc:	bl	126e8 <__assert_fail@plt+0x178c>
   126c0:	str	r0, [fp, #-8]
   126c4:	ldr	r3, [fp, #-8]
   126c8:	mov	r0, r3
   126cc:	sub	sp, fp, #4
   126d0:	pop	{fp, pc}
   126d4:	andeq	sl, r2, ip, ror r1
   126d8:	andeq	sl, r2, r4, ror r1
   126dc:	andeq	sl, r2, r0, ror r1
   126e0:	andeq	r2, r3, r8, lsl #5
   126e4:	andeq	sl, r2, r4, ror #2
   126e8:	push	{fp, lr}
   126ec:	add	fp, sp, #4
   126f0:	sub	sp, sp, #8
   126f4:	str	r0, [fp, #-8]
   126f8:	str	r1, [fp, #-12]
   126fc:	ldr	r3, [fp, #-12]
   12700:	cmp	r3, #32
   12704:	bne	12720 <__assert_fail@plt+0x17c4>
   12708:	ldr	r3, [pc, #124]	; 1278c <__assert_fail@plt+0x1830>
   1270c:	ldr	r3, [r3]
   12710:	add	r3, r3, #1
   12714:	ldr	r2, [pc, #112]	; 1278c <__assert_fail@plt+0x1830>
   12718:	str	r3, [r2]
   1271c:	b	12770 <__assert_fail@plt+0x1814>
   12720:	ldr	r3, [fp, #-12]
   12724:	cmp	r3, #9
   12728:	bne	12768 <__assert_fail@plt+0x180c>
   1272c:	ldr	r3, [pc, #92]	; 12790 <__assert_fail@plt+0x1834>
   12730:	mov	r2, #1
   12734:	strb	r2, [r3]
   12738:	ldr	r3, [pc, #76]	; 1278c <__assert_fail@plt+0x1830>
   1273c:	ldr	r3, [r3]
   12740:	add	r2, r3, #7
   12744:	cmp	r3, #0
   12748:	movlt	r3, r2
   1274c:	movge	r3, r3
   12750:	asr	r3, r3, #3
   12754:	add	r3, r3, #1
   12758:	lsl	r3, r3, #3
   1275c:	ldr	r2, [pc, #40]	; 1278c <__assert_fail@plt+0x1830>
   12760:	str	r3, [r2]
   12764:	b	12770 <__assert_fail@plt+0x1814>
   12768:	ldr	r3, [fp, #-12]
   1276c:	b	12780 <__assert_fail@plt+0x1824>
   12770:	ldr	r0, [fp, #-8]
   12774:	bl	10d94 <getc_unlocked@plt>
   12778:	str	r0, [fp, #-12]
   1277c:	b	126fc <__assert_fail@plt+0x17a0>
   12780:	mov	r0, r3
   12784:	sub	sp, fp, #4
   12788:	pop	{fp, pc}
   1278c:	andeq	sl, r2, ip, ror r1
   12790:	andeq	r2, r3, r4, ror r2
   12794:	push	{fp, lr}
   12798:	add	fp, sp, #4
   1279c:	sub	sp, sp, #24
   127a0:	str	r0, [fp, #-24]	; 0xffffffe8
   127a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127a8:	ldr	r3, [r3]
   127ac:	str	r3, [fp, #-12]
   127b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127b4:	ldr	r3, [r3, #4]
   127b8:	sub	r3, r3, #1
   127bc:	ldr	r2, [fp, #-12]
   127c0:	add	r3, r2, r3
   127c4:	str	r3, [fp, #-8]
   127c8:	ldr	r3, [fp, #-8]
   127cc:	ldrb	r3, [r3]
   127d0:	strb	r3, [fp, #-13]
   127d4:	ldr	r3, [fp, #-12]
   127d8:	ldrb	r3, [r3]
   127dc:	mov	r1, r3
   127e0:	ldr	r0, [pc, #272]	; 128f8 <__assert_fail@plt+0x199c>
   127e4:	bl	10e84 <strchr@plt>
   127e8:	mov	r3, r0
   127ec:	cmp	r3, #0
   127f0:	movne	r3, #1
   127f4:	moveq	r3, #0
   127f8:	uxtb	r1, r3
   127fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12800:	ldrb	r3, [r2, #12]
   12804:	and	r1, r1, #1
   12808:	bic	r3, r3, #1
   1280c:	orr	r3, r1, r3
   12810:	strb	r3, [r2, #12]
   12814:	bl	10e54 <__ctype_b_loc@plt>
   12818:	mov	r3, r0
   1281c:	ldr	r2, [r3]
   12820:	ldrb	r3, [fp, #-13]
   12824:	lsl	r3, r3, #1
   12828:	add	r3, r2, r3
   1282c:	ldrh	r3, [r3]
   12830:	and	r3, r3, #4
   12834:	cmp	r3, #0
   12838:	movne	r3, #1
   1283c:	moveq	r3, #0
   12840:	uxtb	r3, r3
   12844:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12848:	ldrb	r2, [r1, #12]
   1284c:	and	r3, r3, #1
   12850:	bic	r2, r2, #4
   12854:	lsl	r3, r3, #2
   12858:	orr	r3, r3, r2
   1285c:	mov	r2, r3
   12860:	strb	r2, [r1, #12]
   12864:	b	12874 <__assert_fail@plt+0x1918>
   12868:	ldr	r3, [fp, #-8]
   1286c:	sub	r3, r3, #1
   12870:	str	r3, [fp, #-8]
   12874:	ldr	r2, [fp, #-12]
   12878:	ldr	r3, [fp, #-8]
   1287c:	cmp	r2, r3
   12880:	bcs	128a4 <__assert_fail@plt+0x1948>
   12884:	ldr	r3, [fp, #-8]
   12888:	ldrb	r3, [r3]
   1288c:	mov	r1, r3
   12890:	ldr	r0, [pc, #100]	; 128fc <__assert_fail@plt+0x19a0>
   12894:	bl	10e84 <strchr@plt>
   12898:	mov	r3, r0
   1289c:	cmp	r3, #0
   128a0:	bne	12868 <__assert_fail@plt+0x190c>
   128a4:	ldr	r3, [fp, #-8]
   128a8:	ldrb	r3, [r3]
   128ac:	mov	r1, r3
   128b0:	ldr	r0, [pc, #72]	; 12900 <__assert_fail@plt+0x19a4>
   128b4:	bl	10e84 <strchr@plt>
   128b8:	mov	r3, r0
   128bc:	cmp	r3, #0
   128c0:	movne	r3, #1
   128c4:	moveq	r3, #0
   128c8:	uxtb	r3, r3
   128cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   128d0:	ldrb	r2, [r1, #12]
   128d4:	and	r3, r3, #1
   128d8:	bic	r2, r2, #2
   128dc:	lsl	r3, r3, #1
   128e0:	orr	r3, r3, r2
   128e4:	mov	r2, r3
   128e8:	strb	r2, [r1, #12]
   128ec:	nop			; (mov r0, r0)
   128f0:	sub	sp, fp, #4
   128f4:	pop	{fp, pc}
   128f8:			; <UNDEFINED> instruction: 0x000198b4
   128fc:			; <UNDEFINED> instruction: 0x000198bc
   12900:	andeq	r9, r1, r4, asr #17
   12904:	push	{fp, lr}
   12908:	add	fp, sp, #4
   1290c:	sub	sp, sp, #16
   12910:	ldr	r3, [pc, #532]	; 12b2c <__assert_fail@plt+0x1bd0>
   12914:	ldr	r3, [r3]
   12918:	ldr	r2, [pc, #528]	; 12b30 <__assert_fail@plt+0x1bd4>
   1291c:	cmp	r3, r2
   12920:	bne	12960 <__assert_fail@plt+0x1a04>
   12924:	ldr	r3, [pc, #520]	; 12b34 <__assert_fail@plt+0x1bd8>
   12928:	ldr	r3, [r3]
   1292c:	mov	r2, r3
   12930:	ldr	r3, [pc, #512]	; 12b38 <__assert_fail@plt+0x1bdc>
   12934:	sub	r3, r2, r3
   12938:	mov	r2, r3
   1293c:	ldr	r3, [pc, #504]	; 12b3c <__assert_fail@plt+0x1be0>
   12940:	ldr	r3, [r3]
   12944:	mov	r1, #1
   12948:	ldr	r0, [pc, #488]	; 12b38 <__assert_fail@plt+0x1bdc>
   1294c:	bl	10d70 <fwrite_unlocked@plt>
   12950:	ldr	r3, [pc, #476]	; 12b34 <__assert_fail@plt+0x1bd8>
   12954:	ldr	r2, [pc, #476]	; 12b38 <__assert_fail@plt+0x1bdc>
   12958:	str	r2, [r3]
   1295c:	b	12b24 <__assert_fail@plt+0x1bc8>
   12960:	bl	12b44 <__assert_fail@plt+0x1be8>
   12964:	ldr	r3, [pc, #448]	; 12b2c <__assert_fail@plt+0x1bd0>
   12968:	ldr	r3, [r3]
   1296c:	str	r3, [fp, #-8]
   12970:	mvn	r3, #-2147483648	; 0x80000000
   12974:	str	r3, [fp, #-16]
   12978:	ldr	r3, [pc, #432]	; 12b30 <__assert_fail@plt+0x1bd4>
   1297c:	ldr	r3, [r3, #24]
   12980:	str	r3, [fp, #-12]
   12984:	b	129f4 <__assert_fail@plt+0x1a98>
   12988:	ldr	r3, [fp, #-12]
   1298c:	ldr	r2, [r3, #20]
   12990:	ldr	r3, [fp, #-12]
   12994:	ldr	r3, [r3, #24]
   12998:	ldr	r3, [r3, #20]
   1299c:	sub	r2, r2, r3
   129a0:	ldr	r3, [fp, #-16]
   129a4:	cmp	r2, r3
   129a8:	bge	129d0 <__assert_fail@plt+0x1a74>
   129ac:	ldr	r3, [fp, #-12]
   129b0:	str	r3, [fp, #-8]
   129b4:	ldr	r3, [fp, #-12]
   129b8:	ldr	r2, [r3, #20]
   129bc:	ldr	r3, [fp, #-12]
   129c0:	ldr	r3, [r3, #24]
   129c4:	ldr	r3, [r3, #20]
   129c8:	sub	r3, r2, r3
   129cc:	str	r3, [fp, #-16]
   129d0:	ldr	r3, [fp, #-16]
   129d4:	cmn	r3, #-2147483638	; 0x8000000a
   129d8:	bgt	129e8 <__assert_fail@plt+0x1a8c>
   129dc:	ldr	r3, [fp, #-16]
   129e0:	add	r3, r3, #9
   129e4:	str	r3, [fp, #-16]
   129e8:	ldr	r3, [fp, #-12]
   129ec:	ldr	r3, [r3, #24]
   129f0:	str	r3, [fp, #-12]
   129f4:	ldr	r3, [pc, #304]	; 12b2c <__assert_fail@plt+0x1bd0>
   129f8:	ldr	r3, [r3]
   129fc:	ldr	r2, [fp, #-12]
   12a00:	cmp	r2, r3
   12a04:	bne	12988 <__assert_fail@plt+0x1a2c>
   12a08:	ldr	r0, [fp, #-8]
   12a0c:	bl	13030 <__assert_fail@plt+0x20d4>
   12a10:	ldr	r3, [fp, #-8]
   12a14:	ldr	r1, [r3]
   12a18:	ldr	r3, [pc, #276]	; 12b34 <__assert_fail@plt+0x1bd8>
   12a1c:	ldr	r3, [r3]
   12a20:	mov	r2, r3
   12a24:	ldr	r3, [fp, #-8]
   12a28:	ldr	r3, [r3]
   12a2c:	sub	r3, r2, r3
   12a30:	mov	r2, r3
   12a34:	ldr	r0, [pc, #252]	; 12b38 <__assert_fail@plt+0x1bdc>
   12a38:	bl	10d34 <memmove@plt>
   12a3c:	ldr	r3, [fp, #-8]
   12a40:	ldr	r3, [r3]
   12a44:	mov	r2, r3
   12a48:	ldr	r3, [pc, #232]	; 12b38 <__assert_fail@plt+0x1bdc>
   12a4c:	sub	r3, r2, r3
   12a50:	str	r3, [fp, #-20]	; 0xffffffec
   12a54:	ldr	r3, [pc, #216]	; 12b34 <__assert_fail@plt+0x1bd8>
   12a58:	ldr	r2, [r3]
   12a5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a60:	rsb	r3, r3, #0
   12a64:	add	r3, r2, r3
   12a68:	ldr	r2, [pc, #196]	; 12b34 <__assert_fail@plt+0x1bd8>
   12a6c:	str	r3, [r2]
   12a70:	ldr	r3, [fp, #-8]
   12a74:	str	r3, [fp, #-12]
   12a78:	b	12aa4 <__assert_fail@plt+0x1b48>
   12a7c:	ldr	r3, [fp, #-12]
   12a80:	ldr	r2, [r3]
   12a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a88:	rsb	r3, r3, #0
   12a8c:	add	r2, r2, r3
   12a90:	ldr	r3, [fp, #-12]
   12a94:	str	r2, [r3]
   12a98:	ldr	r3, [fp, #-12]
   12a9c:	add	r3, r3, #28
   12aa0:	str	r3, [fp, #-12]
   12aa4:	ldr	r3, [pc, #128]	; 12b2c <__assert_fail@plt+0x1bd0>
   12aa8:	ldr	r3, [r3]
   12aac:	ldr	r2, [fp, #-12]
   12ab0:	cmp	r2, r3
   12ab4:	bls	12a7c <__assert_fail@plt+0x1b20>
   12ab8:	ldr	r3, [pc, #108]	; 12b2c <__assert_fail@plt+0x1bd0>
   12abc:	ldr	r3, [r3]
   12ac0:	mov	r2, r3
   12ac4:	ldr	r3, [fp, #-8]
   12ac8:	sub	r3, r2, r3
   12acc:	asr	r3, r3, #2
   12ad0:	ldr	r2, [pc, #104]	; 12b40 <__assert_fail@plt+0x1be4>
   12ad4:	mul	r3, r2, r3
   12ad8:	add	r3, r3, #1
   12adc:	mov	r2, r3
   12ae0:	mov	r3, r2
   12ae4:	lsl	r3, r3, #3
   12ae8:	sub	r3, r3, r2
   12aec:	lsl	r3, r3, #2
   12af0:	mov	r2, r3
   12af4:	ldr	r1, [fp, #-8]
   12af8:	ldr	r0, [pc, #48]	; 12b30 <__assert_fail@plt+0x1bd4>
   12afc:	bl	10d34 <memmove@plt>
   12b00:	ldr	r3, [pc, #36]	; 12b2c <__assert_fail@plt+0x1bd0>
   12b04:	ldr	r2, [r3]
   12b08:	ldr	r3, [fp, #-8]
   12b0c:	ldr	r1, [pc, #28]	; 12b30 <__assert_fail@plt+0x1bd4>
   12b10:	sub	r3, r3, r1
   12b14:	rsb	r3, r3, #0
   12b18:	add	r3, r2, r3
   12b1c:	ldr	r2, [pc, #8]	; 12b2c <__assert_fail@plt+0x1bd0>
   12b20:	str	r3, [r2]
   12b24:	sub	sp, fp, #4
   12b28:	pop	{fp, pc}
   12b2c:	andeq	r2, r3, r0, ror r2
   12b30:	andeq	fp, r2, r0, lsl r5
   12b34:	andeq	fp, r2, ip, lsl #10
   12b38:	andeq	sl, r2, r4, lsl #3
   12b3c:	andeq	sl, r2, r4, asr r1
   12b40:			; <UNDEFINED> instruction: 0xb6db6db7
   12b44:	push	{fp, lr}
   12b48:	add	fp, sp, #4
   12b4c:	sub	sp, sp, #24
   12b50:	ldr	r3, [pc, #532]	; 12d6c <__assert_fail@plt+0x1e10>
   12b54:	ldr	r3, [r3]
   12b58:	mov	r2, #0
   12b5c:	str	r2, [r3, #20]
   12b60:	ldr	r3, [pc, #516]	; 12d6c <__assert_fail@plt+0x1e10>
   12b64:	ldr	r3, [r3]
   12b68:	ldr	r3, [r3, #4]
   12b6c:	str	r3, [fp, #-28]	; 0xffffffe4
   12b70:	ldr	r3, [pc, #500]	; 12d6c <__assert_fail@plt+0x1e10>
   12b74:	ldr	r3, [r3]
   12b78:	ldr	r2, [pc, #496]	; 12d70 <__assert_fail@plt+0x1e14>
   12b7c:	ldr	r2, [r2]
   12b80:	str	r2, [r3, #4]
   12b84:	ldr	r3, [pc, #480]	; 12d6c <__assert_fail@plt+0x1e10>
   12b88:	ldr	r3, [r3]
   12b8c:	sub	r3, r3, #28
   12b90:	str	r3, [fp, #-8]
   12b94:	b	12d40 <__assert_fail@plt+0x1de4>
   12b98:	mvn	r3, #-2147483648	; 0x80000000
   12b9c:	str	r3, [fp, #-24]	; 0xffffffe8
   12ba0:	ldr	r3, [fp, #-8]
   12ba4:	ldr	r2, [pc, #456]	; 12d74 <__assert_fail@plt+0x1e18>
   12ba8:	cmp	r3, r2
   12bac:	bne	12bbc <__assert_fail@plt+0x1c60>
   12bb0:	ldr	r3, [pc, #448]	; 12d78 <__assert_fail@plt+0x1e1c>
   12bb4:	ldr	r3, [r3]
   12bb8:	b	12bc4 <__assert_fail@plt+0x1c68>
   12bbc:	ldr	r3, [pc, #440]	; 12d7c <__assert_fail@plt+0x1e20>
   12bc0:	ldr	r3, [r3]
   12bc4:	str	r3, [fp, #-16]
   12bc8:	ldr	r3, [fp, #-8]
   12bcc:	str	r3, [fp, #-12]
   12bd0:	ldr	r3, [fp, #-12]
   12bd4:	ldr	r3, [r3, #4]
   12bd8:	ldr	r2, [fp, #-16]
   12bdc:	add	r3, r2, r3
   12be0:	str	r3, [fp, #-16]
   12be4:	ldr	r3, [fp, #-12]
   12be8:	add	r3, r3, #28
   12bec:	str	r3, [fp, #-12]
   12bf0:	ldr	r1, [fp, #-16]
   12bf4:	ldr	r0, [fp, #-12]
   12bf8:	bl	12f24 <__assert_fail@plt+0x1fc8>
   12bfc:	mov	r2, r0
   12c00:	ldr	r3, [fp, #-12]
   12c04:	ldr	r3, [r3, #20]
   12c08:	add	r3, r2, r3
   12c0c:	str	r3, [fp, #-20]	; 0xffffffec
   12c10:	ldr	r3, [fp, #-8]
   12c14:	ldr	r2, [pc, #344]	; 12d74 <__assert_fail@plt+0x1e18>
   12c18:	cmp	r3, r2
   12c1c:	bne	12c94 <__assert_fail@plt+0x1d38>
   12c20:	ldr	r3, [pc, #344]	; 12d80 <__assert_fail@plt+0x1e24>
   12c24:	ldr	r3, [r3]
   12c28:	cmp	r3, #0
   12c2c:	ble	12c94 <__assert_fail@plt+0x1d38>
   12c30:	ldr	r3, [pc, #328]	; 12d80 <__assert_fail@plt+0x1e24>
   12c34:	ldr	r3, [r3]
   12c38:	ldr	r2, [fp, #-16]
   12c3c:	sub	r2, r2, r3
   12c40:	mov	r3, r2
   12c44:	lsl	r3, r3, #2
   12c48:	add	r3, r3, r2
   12c4c:	lsl	r3, r3, #1
   12c50:	mov	r1, r3
   12c54:	ldr	r3, [pc, #292]	; 12d80 <__assert_fail@plt+0x1e24>
   12c58:	ldr	r3, [r3]
   12c5c:	ldr	r2, [fp, #-16]
   12c60:	sub	r2, r2, r3
   12c64:	mov	r3, r2
   12c68:	lsl	r3, r3, #2
   12c6c:	add	r3, r3, r2
   12c70:	lsl	r3, r3, #1
   12c74:	mul	r3, r3, r1
   12c78:	lsr	r2, r3, #31
   12c7c:	add	r3, r2, r3
   12c80:	asr	r3, r3, #1
   12c84:	mov	r2, r3
   12c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c8c:	add	r3, r3, r2
   12c90:	str	r3, [fp, #-20]	; 0xffffffec
   12c94:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c9c:	cmp	r2, r3
   12ca0:	bge	12cc4 <__assert_fail@plt+0x1d68>
   12ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ca8:	str	r3, [fp, #-24]	; 0xffffffe8
   12cac:	ldr	r3, [fp, #-8]
   12cb0:	ldr	r2, [fp, #-12]
   12cb4:	str	r2, [r3, #24]
   12cb8:	ldr	r3, [fp, #-8]
   12cbc:	ldr	r2, [fp, #-16]
   12cc0:	str	r2, [r3, #16]
   12cc4:	ldr	r3, [pc, #160]	; 12d6c <__assert_fail@plt+0x1e10>
   12cc8:	ldr	r3, [r3]
   12ccc:	ldr	r2, [fp, #-12]
   12cd0:	cmp	r2, r3
   12cd4:	beq	12d14 <__assert_fail@plt+0x1db8>
   12cd8:	ldr	r3, [fp, #-12]
   12cdc:	sub	r3, r3, #28
   12ce0:	ldr	r2, [r3, #8]
   12ce4:	ldr	r3, [fp, #-12]
   12ce8:	ldr	r3, [r3, #4]
   12cec:	add	r3, r2, r3
   12cf0:	ldr	r2, [fp, #-16]
   12cf4:	add	r3, r2, r3
   12cf8:	str	r3, [fp, #-16]
   12cfc:	ldr	r3, [pc, #108]	; 12d70 <__assert_fail@plt+0x1e14>
   12d00:	ldr	r3, [r3]
   12d04:	ldr	r2, [fp, #-16]
   12d08:	cmp	r2, r3
   12d0c:	blt	12be4 <__assert_fail@plt+0x1c88>
   12d10:	b	12d18 <__assert_fail@plt+0x1dbc>
   12d14:	nop			; (mov r0, r0)
   12d18:	ldr	r0, [fp, #-8]
   12d1c:	bl	12d84 <__assert_fail@plt+0x1e28>
   12d20:	mov	r2, r0
   12d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d28:	add	r2, r2, r3
   12d2c:	ldr	r3, [fp, #-8]
   12d30:	str	r2, [r3, #20]
   12d34:	ldr	r3, [fp, #-8]
   12d38:	sub	r3, r3, #28
   12d3c:	str	r3, [fp, #-8]
   12d40:	ldr	r3, [fp, #-8]
   12d44:	ldr	r2, [pc, #40]	; 12d74 <__assert_fail@plt+0x1e18>
   12d48:	cmp	r3, r2
   12d4c:	bcs	12b98 <__assert_fail@plt+0x1c3c>
   12d50:	ldr	r3, [pc, #20]	; 12d6c <__assert_fail@plt+0x1e10>
   12d54:	ldr	r3, [r3]
   12d58:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12d5c:	str	r2, [r3, #4]
   12d60:	nop			; (mov r0, r0)
   12d64:	sub	sp, fp, #4
   12d68:	pop	{fp, pc}
   12d6c:	andeq	r2, r3, r0, ror r2
   12d70:	andeq	sl, r2, r8, ror #2
   12d74:	andeq	fp, r2, r0, lsl r5
   12d78:	andeq	r2, r3, ip, ror r2
   12d7c:	andeq	r2, r3, r0, lsl #5
   12d80:	andeq	r2, r3, ip, lsl #5
   12d84:	push	{fp, lr}
   12d88:	add	fp, sp, #4
   12d8c:	sub	sp, sp, #16
   12d90:	str	r0, [fp, #-16]
   12d94:	ldr	r3, [pc, #372]	; 12f10 <__assert_fail@plt+0x1fb4>
   12d98:	str	r3, [fp, #-8]
   12d9c:	ldr	r3, [fp, #-16]
   12da0:	ldr	r2, [pc, #364]	; 12f14 <__assert_fail@plt+0x1fb8>
   12da4:	cmp	r3, r2
   12da8:	bls	12e94 <__assert_fail@plt+0x1f38>
   12dac:	ldr	r3, [fp, #-16]
   12db0:	sub	r3, r3, #28
   12db4:	ldrb	r3, [r3, #12]
   12db8:	and	r3, r3, #2
   12dbc:	uxtb	r3, r3
   12dc0:	cmp	r3, #0
   12dc4:	beq	12e0c <__assert_fail@plt+0x1eb0>
   12dc8:	ldr	r3, [fp, #-16]
   12dcc:	sub	r3, r3, #28
   12dd0:	ldrb	r3, [r3, #12]
   12dd4:	and	r3, r3, #8
   12dd8:	uxtb	r3, r3
   12ddc:	cmp	r3, #0
   12de0:	beq	12df8 <__assert_fail@plt+0x1e9c>
   12de4:	ldr	r3, [fp, #-8]
   12de8:	sub	r3, r3, #2496	; 0x9c0
   12dec:	sub	r3, r3, #4
   12df0:	str	r3, [fp, #-8]
   12df4:	b	12e94 <__assert_fail@plt+0x1f38>
   12df8:	ldr	r3, [fp, #-8]
   12dfc:	add	r3, r3, #356352	; 0x57000
   12e00:	add	r3, r3, #3648	; 0xe40
   12e04:	str	r3, [fp, #-8]
   12e08:	b	12e94 <__assert_fail@plt+0x1f38>
   12e0c:	ldr	r3, [fp, #-16]
   12e10:	sub	r3, r3, #28
   12e14:	ldrb	r3, [r3, #12]
   12e18:	and	r3, r3, #4
   12e1c:	uxtb	r3, r3
   12e20:	cmp	r3, #0
   12e24:	beq	12e38 <__assert_fail@plt+0x1edc>
   12e28:	ldr	r3, [fp, #-8]
   12e2c:	sub	r3, r3, #1600	; 0x640
   12e30:	str	r3, [fp, #-8]
   12e34:	b	12e94 <__assert_fail@plt+0x1f38>
   12e38:	ldr	r2, [pc, #216]	; 12f18 <__assert_fail@plt+0x1fbc>
   12e3c:	ldr	r3, [fp, #-16]
   12e40:	cmp	r3, r2
   12e44:	bls	12e94 <__assert_fail@plt+0x1f38>
   12e48:	ldr	r3, [fp, #-16]
   12e4c:	sub	r3, r3, #56	; 0x38
   12e50:	ldrb	r3, [r3, #12]
   12e54:	and	r3, r3, #8
   12e58:	uxtb	r3, r3
   12e5c:	cmp	r3, #0
   12e60:	beq	12e94 <__assert_fail@plt+0x1f38>
   12e64:	ldr	r3, [fp, #-16]
   12e68:	sub	r3, r3, #28
   12e6c:	ldr	r3, [r3, #4]
   12e70:	add	r3, r3, #2
   12e74:	mov	r1, r3
   12e78:	ldr	r0, [pc, #156]	; 12f1c <__assert_fail@plt+0x1fc0>
   12e7c:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   12e80:	mov	r3, r0
   12e84:	mov	r2, r3
   12e88:	ldr	r3, [fp, #-8]
   12e8c:	add	r3, r3, r2
   12e90:	str	r3, [fp, #-8]
   12e94:	ldr	r3, [fp, #-16]
   12e98:	ldrb	r3, [r3, #12]
   12e9c:	and	r3, r3, #1
   12ea0:	uxtb	r3, r3
   12ea4:	cmp	r3, #0
   12ea8:	beq	12ebc <__assert_fail@plt+0x1f60>
   12eac:	ldr	r3, [fp, #-8]
   12eb0:	sub	r3, r3, #1600	; 0x640
   12eb4:	str	r3, [fp, #-8]
   12eb8:	b	12f00 <__assert_fail@plt+0x1fa4>
   12ebc:	ldr	r3, [fp, #-16]
   12ec0:	ldrb	r3, [r3, #12]
   12ec4:	and	r3, r3, #8
   12ec8:	uxtb	r3, r3
   12ecc:	cmp	r3, #0
   12ed0:	beq	12f00 <__assert_fail@plt+0x1fa4>
   12ed4:	ldr	r3, [fp, #-16]
   12ed8:	ldr	r3, [r3, #4]
   12edc:	add	r3, r3, #2
   12ee0:	mov	r1, r3
   12ee4:	ldr	r0, [pc, #52]	; 12f20 <__assert_fail@plt+0x1fc4>
   12ee8:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   12eec:	mov	r3, r0
   12ef0:	mov	r2, r3
   12ef4:	ldr	r3, [fp, #-8]
   12ef8:	add	r3, r3, r2
   12efc:	str	r3, [fp, #-8]
   12f00:	ldr	r3, [fp, #-8]
   12f04:	mov	r0, r3
   12f08:	sub	sp, fp, #4
   12f0c:	pop	{fp, pc}
   12f10:	andeq	r1, r0, r4, lsr #6
   12f14:	andeq	fp, r2, r0, lsl r5
   12f18:	andeq	fp, r2, ip, lsr #10
   12f1c:	andeq	r9, r0, r0, asr #24
   12f20:	andeq	r5, r0, r4, ror #15
   12f24:	push	{fp}		; (str fp, [sp, #-4]!)
   12f28:	add	fp, sp, #0
   12f2c:	sub	sp, sp, #20
   12f30:	str	r0, [fp, #-16]
   12f34:	str	r1, [fp, #-20]	; 0xffffffec
   12f38:	ldr	r3, [pc, #232]	; 13028 <__assert_fail@plt+0x20cc>
   12f3c:	ldr	r3, [r3]
   12f40:	ldr	r2, [fp, #-16]
   12f44:	cmp	r2, r3
   12f48:	bne	12f54 <__assert_fail@plt+0x1ff8>
   12f4c:	mov	r3, #0
   12f50:	b	13018 <__assert_fail@plt+0x20bc>
   12f54:	ldr	r3, [pc, #208]	; 1302c <__assert_fail@plt+0x20d0>
   12f58:	ldr	r2, [r3]
   12f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f60:	sub	r3, r2, r3
   12f64:	str	r3, [fp, #-12]
   12f68:	ldr	r2, [fp, #-12]
   12f6c:	mov	r3, r2
   12f70:	lsl	r3, r3, #2
   12f74:	add	r3, r3, r2
   12f78:	lsl	r3, r3, #1
   12f7c:	mov	r1, r3
   12f80:	ldr	r2, [fp, #-12]
   12f84:	mov	r3, r2
   12f88:	lsl	r3, r3, #2
   12f8c:	add	r3, r3, r2
   12f90:	lsl	r3, r3, #1
   12f94:	mul	r3, r3, r1
   12f98:	str	r3, [fp, #-8]
   12f9c:	ldr	r3, [fp, #-16]
   12fa0:	ldr	r2, [r3, #24]
   12fa4:	ldr	r3, [pc, #124]	; 13028 <__assert_fail@plt+0x20cc>
   12fa8:	ldr	r3, [r3]
   12fac:	cmp	r2, r3
   12fb0:	beq	13014 <__assert_fail@plt+0x20b8>
   12fb4:	ldr	r3, [fp, #-16]
   12fb8:	ldr	r3, [r3, #16]
   12fbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fc0:	sub	r3, r2, r3
   12fc4:	str	r3, [fp, #-12]
   12fc8:	ldr	r2, [fp, #-12]
   12fcc:	mov	r3, r2
   12fd0:	lsl	r3, r3, #2
   12fd4:	add	r3, r3, r2
   12fd8:	lsl	r3, r3, #1
   12fdc:	mov	r1, r3
   12fe0:	ldr	r2, [fp, #-12]
   12fe4:	mov	r3, r2
   12fe8:	lsl	r3, r3, #2
   12fec:	add	r3, r3, r2
   12ff0:	lsl	r3, r3, #1
   12ff4:	mul	r3, r3, r1
   12ff8:	lsr	r2, r3, #31
   12ffc:	add	r3, r2, r3
   13000:	asr	r3, r3, #1
   13004:	mov	r2, r3
   13008:	ldr	r3, [fp, #-8]
   1300c:	add	r3, r3, r2
   13010:	str	r3, [fp, #-8]
   13014:	ldr	r3, [fp, #-8]
   13018:	mov	r0, r3
   1301c:	add	sp, fp, #0
   13020:	pop	{fp}		; (ldr fp, [sp], #4)
   13024:	bx	lr
   13028:	andeq	r2, r3, r0, ror r2
   1302c:	andeq	sl, r2, r8, ror r1
   13030:	push	{fp, lr}
   13034:	add	fp, sp, #4
   13038:	sub	sp, sp, #16
   1303c:	str	r0, [fp, #-16]
   13040:	ldr	r3, [pc, #88]	; 130a0 <__assert_fail@plt+0x2144>
   13044:	ldr	r3, [r3]
   13048:	mov	r1, r3
   1304c:	ldr	r0, [pc, #80]	; 130a4 <__assert_fail@plt+0x2148>
   13050:	bl	130ac <__assert_fail@plt+0x2150>
   13054:	ldr	r3, [pc, #72]	; 130a4 <__assert_fail@plt+0x2148>
   13058:	ldr	r3, [r3, #24]
   1305c:	str	r3, [fp, #-8]
   13060:	b	13084 <__assert_fail@plt+0x2128>
   13064:	ldr	r3, [pc, #60]	; 130a8 <__assert_fail@plt+0x214c>
   13068:	ldr	r3, [r3]
   1306c:	mov	r1, r3
   13070:	ldr	r0, [fp, #-8]
   13074:	bl	130ac <__assert_fail@plt+0x2150>
   13078:	ldr	r3, [fp, #-8]
   1307c:	ldr	r3, [r3, #24]
   13080:	str	r3, [fp, #-8]
   13084:	ldr	r2, [fp, #-8]
   13088:	ldr	r3, [fp, #-16]
   1308c:	cmp	r2, r3
   13090:	bne	13064 <__assert_fail@plt+0x2108>
   13094:	nop			; (mov r0, r0)
   13098:	sub	sp, fp, #4
   1309c:	pop	{fp, pc}
   130a0:	andeq	r2, r3, ip, ror r2
   130a4:	andeq	fp, r2, r0, lsl r5
   130a8:	andeq	r2, r3, r0, lsl #5
   130ac:	push	{fp, lr}
   130b0:	add	fp, sp, #4
   130b4:	sub	sp, sp, #16
   130b8:	str	r0, [fp, #-16]
   130bc:	str	r1, [fp, #-20]	; 0xffffffec
   130c0:	ldr	r3, [pc, #216]	; 131a0 <__assert_fail@plt+0x2244>
   130c4:	mov	r2, #0
   130c8:	str	r2, [r3]
   130cc:	ldr	r3, [pc, #208]	; 131a4 <__assert_fail@plt+0x2248>
   130d0:	ldr	r3, [r3]
   130d4:	mov	r0, r3
   130d8:	bl	13240 <__assert_fail@plt+0x22e4>
   130dc:	ldr	r3, [pc, #196]	; 131a8 <__assert_fail@plt+0x224c>
   130e0:	ldr	r2, [r3]
   130e4:	ldr	r3, [pc, #192]	; 131ac <__assert_fail@plt+0x2250>
   130e8:	ldr	r3, [r3]
   130ec:	mov	r1, r3
   130f0:	mov	r0, r2
   130f4:	bl	10cec <fputs_unlocked@plt>
   130f8:	ldr	r3, [pc, #160]	; 131a0 <__assert_fail@plt+0x2244>
   130fc:	ldr	r2, [r3]
   13100:	ldr	r3, [pc, #168]	; 131b0 <__assert_fail@plt+0x2254>
   13104:	ldr	r3, [r3]
   13108:	add	r3, r2, r3
   1310c:	ldr	r2, [pc, #140]	; 131a0 <__assert_fail@plt+0x2244>
   13110:	str	r3, [r2]
   13114:	ldr	r3, [pc, #132]	; 131a0 <__assert_fail@plt+0x2244>
   13118:	ldr	r3, [r3]
   1311c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13120:	sub	r3, r2, r3
   13124:	mov	r0, r3
   13128:	bl	13240 <__assert_fail@plt+0x22e4>
   1312c:	ldr	r3, [fp, #-16]
   13130:	ldr	r3, [r3, #24]
   13134:	sub	r3, r3, #28
   13138:	str	r3, [fp, #-8]
   1313c:	b	13164 <__assert_fail@plt+0x2208>
   13140:	ldr	r0, [fp, #-16]
   13144:	bl	131b8 <__assert_fail@plt+0x225c>
   13148:	ldr	r3, [fp, #-16]
   1314c:	ldr	r3, [r3, #8]
   13150:	mov	r0, r3
   13154:	bl	13240 <__assert_fail@plt+0x22e4>
   13158:	ldr	r3, [fp, #-16]
   1315c:	add	r3, r3, #28
   13160:	str	r3, [fp, #-16]
   13164:	ldr	r2, [fp, #-16]
   13168:	ldr	r3, [fp, #-8]
   1316c:	cmp	r2, r3
   13170:	bne	13140 <__assert_fail@plt+0x21e4>
   13174:	ldr	r0, [fp, #-16]
   13178:	bl	131b8 <__assert_fail@plt+0x225c>
   1317c:	ldr	r3, [pc, #28]	; 131a0 <__assert_fail@plt+0x2244>
   13180:	ldr	r3, [r3]
   13184:	ldr	r2, [pc, #40]	; 131b4 <__assert_fail@plt+0x2258>
   13188:	str	r3, [r2]
   1318c:	mov	r0, #10
   13190:	bl	10f50 <putchar_unlocked@plt>
   13194:	nop			; (mov r0, r0)
   13198:	sub	sp, fp, #4
   1319c:	pop	{fp, pc}
   131a0:	andeq	sl, r2, r0, lsl #3
   131a4:	andeq	r2, r3, r8, ror r2
   131a8:	andeq	sl, r2, r4, ror #2
   131ac:	andeq	sl, r2, r4, asr r1
   131b0:	andeq	sl, r2, r4, ror r1
   131b4:	andeq	r2, r3, ip, lsl #5
   131b8:	push	{fp, lr}
   131bc:	add	fp, sp, #4
   131c0:	sub	sp, sp, #16
   131c4:	str	r0, [fp, #-16]
   131c8:	ldr	r3, [fp, #-16]
   131cc:	ldr	r3, [r3]
   131d0:	str	r3, [fp, #-8]
   131d4:	ldr	r3, [fp, #-16]
   131d8:	ldr	r3, [r3, #4]
   131dc:	str	r3, [fp, #-12]
   131e0:	b	13208 <__assert_fail@plt+0x22ac>
   131e4:	ldr	r3, [fp, #-8]
   131e8:	add	r2, r3, #1
   131ec:	str	r2, [fp, #-8]
   131f0:	ldrb	r3, [r3]
   131f4:	mov	r0, r3
   131f8:	bl	10f50 <putchar_unlocked@plt>
   131fc:	ldr	r3, [fp, #-12]
   13200:	sub	r3, r3, #1
   13204:	str	r3, [fp, #-12]
   13208:	ldr	r3, [fp, #-12]
   1320c:	cmp	r3, #0
   13210:	bne	131e4 <__assert_fail@plt+0x2288>
   13214:	ldr	r3, [fp, #-16]
   13218:	ldr	r2, [r3, #4]
   1321c:	ldr	r3, [pc, #24]	; 1323c <__assert_fail@plt+0x22e0>
   13220:	ldr	r3, [r3]
   13224:	add	r3, r2, r3
   13228:	ldr	r2, [pc, #12]	; 1323c <__assert_fail@plt+0x22e0>
   1322c:	str	r3, [r2]
   13230:	nop			; (mov r0, r0)
   13234:	sub	sp, fp, #4
   13238:	pop	{fp, pc}
   1323c:	andeq	sl, r2, r0, lsl #3
   13240:	push	{fp, lr}
   13244:	add	fp, sp, #4
   13248:	sub	sp, sp, #16
   1324c:	str	r0, [fp, #-16]
   13250:	ldr	r3, [pc, #224]	; 13338 <__assert_fail@plt+0x23dc>
   13254:	ldr	r2, [r3]
   13258:	ldr	r3, [fp, #-16]
   1325c:	add	r3, r2, r3
   13260:	str	r3, [fp, #-8]
   13264:	ldr	r3, [pc, #208]	; 1333c <__assert_fail@plt+0x23e0>
   13268:	ldrb	r3, [r3]
   1326c:	cmp	r3, #0
   13270:	beq	13318 <__assert_fail@plt+0x23bc>
   13274:	ldr	r3, [fp, #-8]
   13278:	add	r2, r3, #7
   1327c:	cmp	r3, #0
   13280:	movlt	r3, r2
   13284:	movge	r3, r3
   13288:	asr	r3, r3, #3
   1328c:	lsl	r3, r3, #3
   13290:	str	r3, [fp, #-12]
   13294:	ldr	r3, [pc, #156]	; 13338 <__assert_fail@plt+0x23dc>
   13298:	ldr	r3, [r3]
   1329c:	add	r2, r3, #1
   132a0:	ldr	r3, [fp, #-12]
   132a4:	cmp	r2, r3
   132a8:	bge	13318 <__assert_fail@plt+0x23bc>
   132ac:	b	132e4 <__assert_fail@plt+0x2388>
   132b0:	mov	r0, #9
   132b4:	bl	10f50 <putchar_unlocked@plt>
   132b8:	ldr	r3, [pc, #120]	; 13338 <__assert_fail@plt+0x23dc>
   132bc:	ldr	r3, [r3]
   132c0:	add	r2, r3, #7
   132c4:	cmp	r3, #0
   132c8:	movlt	r3, r2
   132cc:	movge	r3, r3
   132d0:	asr	r3, r3, #3
   132d4:	add	r3, r3, #1
   132d8:	lsl	r3, r3, #3
   132dc:	ldr	r2, [pc, #84]	; 13338 <__assert_fail@plt+0x23dc>
   132e0:	str	r3, [r2]
   132e4:	ldr	r3, [pc, #76]	; 13338 <__assert_fail@plt+0x23dc>
   132e8:	ldr	r2, [r3]
   132ec:	ldr	r3, [fp, #-12]
   132f0:	cmp	r2, r3
   132f4:	blt	132b0 <__assert_fail@plt+0x2354>
   132f8:	b	13318 <__assert_fail@plt+0x23bc>
   132fc:	mov	r0, #32
   13300:	bl	10f50 <putchar_unlocked@plt>
   13304:	ldr	r3, [pc, #44]	; 13338 <__assert_fail@plt+0x23dc>
   13308:	ldr	r3, [r3]
   1330c:	add	r3, r3, #1
   13310:	ldr	r2, [pc, #32]	; 13338 <__assert_fail@plt+0x23dc>
   13314:	str	r3, [r2]
   13318:	ldr	r3, [pc, #24]	; 13338 <__assert_fail@plt+0x23dc>
   1331c:	ldr	r2, [r3]
   13320:	ldr	r3, [fp, #-8]
   13324:	cmp	r2, r3
   13328:	blt	132fc <__assert_fail@plt+0x23a0>
   1332c:	nop			; (mov r0, r0)
   13330:	sub	sp, fp, #4
   13334:	pop	{fp, pc}
   13338:	andeq	sl, r2, r0, lsl #3
   1333c:	andeq	r2, r3, r4, ror r2
   13340:	push	{fp}		; (str fp, [sp, #-4]!)
   13344:	add	fp, sp, #0
   13348:	sub	sp, sp, #12
   1334c:	str	r0, [fp, #-8]
   13350:	ldr	r2, [pc, #20]	; 1336c <__assert_fail@plt+0x2410>
   13354:	ldr	r3, [fp, #-8]
   13358:	str	r3, [r2]
   1335c:	nop			; (mov r0, r0)
   13360:	add	sp, fp, #0
   13364:	pop	{fp}		; (ldr fp, [sp], #4)
   13368:	bx	lr
   1336c:	muleq	r3, r0, r2
   13370:	push	{fp}		; (str fp, [sp, #-4]!)
   13374:	add	fp, sp, #0
   13378:	sub	sp, sp, #12
   1337c:	mov	r3, r0
   13380:	strb	r3, [fp, #-5]
   13384:	ldr	r2, [pc, #20]	; 133a0 <__assert_fail@plt+0x2444>
   13388:	ldrb	r3, [fp, #-5]
   1338c:	strb	r3, [r2]
   13390:	nop			; (mov r0, r0)
   13394:	add	sp, fp, #0
   13398:	pop	{fp}		; (ldr fp, [sp], #4)
   1339c:	bx	lr
   133a0:	muleq	r3, r4, r2
   133a4:	push	{r4, fp, lr}
   133a8:	add	fp, sp, #8
   133ac:	sub	sp, sp, #20
   133b0:	ldr	r3, [pc, #256]	; 134b8 <__assert_fail@plt+0x255c>
   133b4:	ldr	r3, [r3]
   133b8:	mov	r0, r3
   133bc:	bl	17f4c <__assert_fail@plt+0x6ff0>
   133c0:	mov	r3, r0
   133c4:	cmp	r3, #0
   133c8:	beq	13480 <__assert_fail@plt+0x2524>
   133cc:	ldr	r3, [pc, #232]	; 134bc <__assert_fail@plt+0x2560>
   133d0:	ldrb	r3, [r3]
   133d4:	eor	r3, r3, #1
   133d8:	uxtb	r3, r3
   133dc:	cmp	r3, #0
   133e0:	bne	133f8 <__assert_fail@plt+0x249c>
   133e4:	bl	10e9c <__errno_location@plt>
   133e8:	mov	r3, r0
   133ec:	ldr	r3, [r3]
   133f0:	cmp	r3, #32
   133f4:	beq	13480 <__assert_fail@plt+0x2524>
   133f8:	ldr	r0, [pc, #192]	; 134c0 <__assert_fail@plt+0x2564>
   133fc:	bl	10e6c <gettext@plt>
   13400:	str	r0, [fp, #-16]
   13404:	ldr	r3, [pc, #184]	; 134c4 <__assert_fail@plt+0x2568>
   13408:	ldr	r3, [r3]
   1340c:	cmp	r3, #0
   13410:	beq	13454 <__assert_fail@plt+0x24f8>
   13414:	bl	10e9c <__errno_location@plt>
   13418:	mov	r3, r0
   1341c:	ldr	r4, [r3]
   13420:	ldr	r3, [pc, #156]	; 134c4 <__assert_fail@plt+0x2568>
   13424:	ldr	r3, [r3]
   13428:	mov	r0, r3
   1342c:	bl	15c58 <__assert_fail@plt+0x4cfc>
   13430:	mov	r2, r0
   13434:	ldr	r3, [fp, #-16]
   13438:	str	r3, [sp]
   1343c:	mov	r3, r2
   13440:	ldr	r2, [pc, #128]	; 134c8 <__assert_fail@plt+0x256c>
   13444:	mov	r1, r4
   13448:	mov	r0, #0
   1344c:	bl	10e0c <error@plt>
   13450:	b	13470 <__assert_fail@plt+0x2514>
   13454:	bl	10e9c <__errno_location@plt>
   13458:	mov	r3, r0
   1345c:	ldr	r1, [r3]
   13460:	ldr	r3, [fp, #-16]
   13464:	ldr	r2, [pc, #96]	; 134cc <__assert_fail@plt+0x2570>
   13468:	mov	r0, #0
   1346c:	bl	10e0c <error@plt>
   13470:	ldr	r3, [pc, #88]	; 134d0 <__assert_fail@plt+0x2574>
   13474:	ldr	r3, [r3]
   13478:	mov	r0, r3
   1347c:	bl	10d4c <_exit@plt>
   13480:	ldr	r3, [pc, #76]	; 134d4 <__assert_fail@plt+0x2578>
   13484:	ldr	r3, [r3]
   13488:	mov	r0, r3
   1348c:	bl	17f4c <__assert_fail@plt+0x6ff0>
   13490:	mov	r3, r0
   13494:	cmp	r3, #0
   13498:	beq	134ac <__assert_fail@plt+0x2550>
   1349c:	ldr	r3, [pc, #44]	; 134d0 <__assert_fail@plt+0x2574>
   134a0:	ldr	r3, [r3]
   134a4:	mov	r0, r3
   134a8:	bl	10d4c <_exit@plt>
   134ac:	nop			; (mov r0, r0)
   134b0:	sub	sp, fp, #8
   134b4:	pop	{r4, fp, pc}
   134b8:	andeq	sl, r2, r4, asr r1
   134bc:	muleq	r3, r4, r2
   134c0:	andeq	r9, r1, r8, ror #17
   134c4:	muleq	r3, r0, r2
   134c8:	strdeq	r9, [r1], -r4
   134cc:	strdeq	r9, [r1], -ip
   134d0:	strdeq	sl, [r2], -r4
   134d4:	andeq	sl, r2, r8, asr #2
   134d8:	push	{fp, lr}
   134dc:	add	fp, sp, #4
   134e0:	sub	sp, sp, #40	; 0x28
   134e4:	str	r0, [fp, #-16]
   134e8:	strd	r2, [fp, #-28]	; 0xffffffe4
   134ec:	ldr	r3, [fp, #12]
   134f0:	str	r3, [sp, #8]
   134f4:	ldrd	r2, [fp, #4]
   134f8:	strd	r2, [sp]
   134fc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13500:	ldr	r0, [fp, #-16]
   13504:	bl	10d10 <posix_fadvise64@plt>
   13508:	str	r0, [fp, #-8]
   1350c:	nop			; (mov r0, r0)
   13510:	sub	sp, fp, #4
   13514:	pop	{fp, pc}
   13518:	push	{fp, lr}
   1351c:	add	fp, sp, #4
   13520:	sub	sp, sp, #24
   13524:	str	r0, [fp, #-8]
   13528:	str	r1, [fp, #-12]
   1352c:	ldr	r3, [fp, #-8]
   13530:	cmp	r3, #0
   13534:	beq	13568 <__assert_fail@plt+0x260c>
   13538:	ldr	r0, [fp, #-8]
   1353c:	bl	10ec0 <fileno@plt>
   13540:	mov	r1, r0
   13544:	ldr	r3, [fp, #-12]
   13548:	str	r3, [sp, #8]
   1354c:	mov	r2, #0
   13550:	mov	r3, #0
   13554:	strd	r2, [sp]
   13558:	mov	r2, #0
   1355c:	mov	r3, #0
   13560:	mov	r0, r1
   13564:	bl	134d8 <__assert_fail@plt+0x257c>
   13568:	nop			; (mov r0, r0)
   1356c:	sub	sp, fp, #4
   13570:	pop	{fp, pc}
   13574:	push	{fp, lr}
   13578:	add	fp, sp, #4
   1357c:	sub	sp, sp, #32
   13580:	str	r0, [fp, #-24]	; 0xffffffe8
   13584:	mov	r3, #0
   13588:	str	r3, [fp, #-8]
   1358c:	mov	r3, #0
   13590:	str	r3, [fp, #-12]
   13594:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13598:	bl	10ec0 <fileno@plt>
   1359c:	str	r0, [fp, #-16]
   135a0:	ldr	r3, [fp, #-16]
   135a4:	cmp	r3, #0
   135a8:	bge	135bc <__assert_fail@plt+0x2660>
   135ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135b0:	bl	10ed8 <fclose@plt>
   135b4:	mov	r3, r0
   135b8:	b	13660 <__assert_fail@plt+0x2704>
   135bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135c0:	bl	10e30 <__freading@plt>
   135c4:	mov	r3, r0
   135c8:	cmp	r3, #0
   135cc:	beq	13608 <__assert_fail@plt+0x26ac>
   135d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135d4:	bl	10ec0 <fileno@plt>
   135d8:	mov	r1, r0
   135dc:	mov	r3, #1
   135e0:	str	r3, [sp]
   135e4:	mov	r2, #0
   135e8:	mov	r3, #0
   135ec:	mov	r0, r1
   135f0:	bl	10dd0 <lseek64@plt>
   135f4:	mvn	r2, #0
   135f8:	mvn	r3, #0
   135fc:	cmp	r1, r3
   13600:	cmpeq	r0, r2
   13604:	beq	1362c <__assert_fail@plt+0x26d0>
   13608:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1360c:	bl	136b4 <__assert_fail@plt+0x2758>
   13610:	mov	r3, r0
   13614:	cmp	r3, #0
   13618:	beq	1362c <__assert_fail@plt+0x26d0>
   1361c:	bl	10e9c <__errno_location@plt>
   13620:	mov	r3, r0
   13624:	ldr	r3, [r3]
   13628:	str	r3, [fp, #-8]
   1362c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13630:	bl	10ed8 <fclose@plt>
   13634:	str	r0, [fp, #-12]
   13638:	ldr	r3, [fp, #-8]
   1363c:	cmp	r3, #0
   13640:	beq	1365c <__assert_fail@plt+0x2700>
   13644:	bl	10e9c <__errno_location@plt>
   13648:	mov	r2, r0
   1364c:	ldr	r3, [fp, #-8]
   13650:	str	r3, [r2]
   13654:	mvn	r3, #0
   13658:	str	r3, [fp, #-12]
   1365c:	ldr	r3, [fp, #-12]
   13660:	mov	r0, r3
   13664:	sub	sp, fp, #4
   13668:	pop	{fp, pc}
   1366c:	push	{fp, lr}
   13670:	add	fp, sp, #4
   13674:	sub	sp, sp, #16
   13678:	str	r0, [fp, #-8]
   1367c:	ldr	r3, [fp, #-8]
   13680:	ldr	r3, [r3]
   13684:	and	r3, r3, #256	; 0x100
   13688:	cmp	r3, #0
   1368c:	beq	136a8 <__assert_fail@plt+0x274c>
   13690:	mov	r3, #1
   13694:	str	r3, [sp]
   13698:	mov	r2, #0
   1369c:	mov	r3, #0
   136a0:	ldr	r0, [fp, #-8]
   136a4:	bl	13714 <__assert_fail@plt+0x27b8>
   136a8:	nop			; (mov r0, r0)
   136ac:	sub	sp, fp, #4
   136b0:	pop	{fp, pc}
   136b4:	push	{fp, lr}
   136b8:	add	fp, sp, #4
   136bc:	sub	sp, sp, #8
   136c0:	str	r0, [fp, #-8]
   136c4:	ldr	r3, [fp, #-8]
   136c8:	cmp	r3, #0
   136cc:	beq	136e4 <__assert_fail@plt+0x2788>
   136d0:	ldr	r0, [fp, #-8]
   136d4:	bl	10e30 <__freading@plt>
   136d8:	mov	r3, r0
   136dc:	cmp	r3, #0
   136e0:	bne	136f4 <__assert_fail@plt+0x2798>
   136e4:	ldr	r0, [fp, #-8]
   136e8:	bl	10d28 <fflush@plt>
   136ec:	mov	r3, r0
   136f0:	b	13708 <__assert_fail@plt+0x27ac>
   136f4:	ldr	r0, [fp, #-8]
   136f8:	bl	1366c <__assert_fail@plt+0x2710>
   136fc:	ldr	r0, [fp, #-8]
   13700:	bl	10d28 <fflush@plt>
   13704:	mov	r3, r0
   13708:	mov	r0, r3
   1370c:	sub	sp, fp, #4
   13710:	pop	{fp, pc}
   13714:	push	{fp, lr}
   13718:	add	fp, sp, #4
   1371c:	sub	sp, sp, #32
   13720:	str	r0, [fp, #-16]
   13724:	strd	r2, [fp, #-28]	; 0xffffffe4
   13728:	ldr	r3, [fp, #-16]
   1372c:	ldr	r2, [r3, #8]
   13730:	ldr	r3, [fp, #-16]
   13734:	ldr	r3, [r3, #4]
   13738:	cmp	r2, r3
   1373c:	bne	137d4 <__assert_fail@plt+0x2878>
   13740:	ldr	r3, [fp, #-16]
   13744:	ldr	r2, [r3, #20]
   13748:	ldr	r3, [fp, #-16]
   1374c:	ldr	r3, [r3, #16]
   13750:	cmp	r2, r3
   13754:	bne	137d4 <__assert_fail@plt+0x2878>
   13758:	ldr	r3, [fp, #-16]
   1375c:	ldr	r3, [r3, #36]	; 0x24
   13760:	cmp	r3, #0
   13764:	bne	137d4 <__assert_fail@plt+0x2878>
   13768:	ldr	r0, [fp, #-16]
   1376c:	bl	10ec0 <fileno@plt>
   13770:	mov	r1, r0
   13774:	ldr	r3, [fp, #4]
   13778:	str	r3, [sp]
   1377c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13780:	mov	r0, r1
   13784:	bl	10dd0 <lseek64@plt>
   13788:	strd	r0, [fp, #-12]
   1378c:	ldrd	r2, [fp, #-12]
   13790:	mvn	r0, #0
   13794:	mvn	r1, #0
   13798:	cmp	r3, r1
   1379c:	cmpeq	r2, r0
   137a0:	bne	137ac <__assert_fail@plt+0x2850>
   137a4:	mvn	r3, #0
   137a8:	b	137ec <__assert_fail@plt+0x2890>
   137ac:	ldr	r3, [fp, #-16]
   137b0:	ldr	r3, [r3]
   137b4:	bic	r2, r3, #16
   137b8:	ldr	r3, [fp, #-16]
   137bc:	str	r2, [r3]
   137c0:	ldr	r1, [fp, #-16]
   137c4:	ldrd	r2, [fp, #-12]
   137c8:	strd	r2, [r1, #80]	; 0x50
   137cc:	mov	r3, #0
   137d0:	b	137ec <__assert_fail@plt+0x2890>
   137d4:	ldr	r3, [fp, #4]
   137d8:	str	r3, [sp]
   137dc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   137e0:	ldr	r0, [fp, #-16]
   137e4:	bl	10ee4 <fseeko64@plt>
   137e8:	mov	r3, r0
   137ec:	mov	r0, r3
   137f0:	sub	sp, fp, #4
   137f4:	pop	{fp, pc}
   137f8:	push	{fp, lr}
   137fc:	add	fp, sp, #4
   13800:	sub	sp, sp, #16
   13804:	str	r0, [fp, #-16]
   13808:	ldr	r3, [fp, #-16]
   1380c:	cmp	r3, #0
   13810:	bne	13830 <__assert_fail@plt+0x28d4>
   13814:	ldr	r3, [pc, #220]	; 138f8 <__assert_fail@plt+0x299c>
   13818:	ldr	r3, [r3]
   1381c:	mov	r2, #55	; 0x37
   13820:	mov	r1, #1
   13824:	ldr	r0, [pc, #208]	; 138fc <__assert_fail@plt+0x29a0>
   13828:	bl	10dc4 <fwrite@plt>
   1382c:	bl	10f44 <abort@plt>
   13830:	mov	r1, #47	; 0x2f
   13834:	ldr	r0, [fp, #-16]
   13838:	bl	10efc <strrchr@plt>
   1383c:	str	r0, [fp, #-8]
   13840:	ldr	r3, [fp, #-8]
   13844:	cmp	r3, #0
   13848:	beq	13858 <__assert_fail@plt+0x28fc>
   1384c:	ldr	r3, [fp, #-8]
   13850:	add	r3, r3, #1
   13854:	b	1385c <__assert_fail@plt+0x2900>
   13858:	ldr	r3, [fp, #-16]
   1385c:	str	r3, [fp, #-12]
   13860:	ldr	r2, [fp, #-12]
   13864:	ldr	r3, [fp, #-16]
   13868:	sub	r3, r2, r3
   1386c:	cmp	r3, #6
   13870:	ble	138d4 <__assert_fail@plt+0x2978>
   13874:	ldr	r3, [fp, #-12]
   13878:	sub	r3, r3, #7
   1387c:	mov	r2, #7
   13880:	ldr	r1, [pc, #120]	; 13900 <__assert_fail@plt+0x29a4>
   13884:	mov	r0, r3
   13888:	bl	10f38 <strncmp@plt>
   1388c:	mov	r3, r0
   13890:	cmp	r3, #0
   13894:	bne	138d4 <__assert_fail@plt+0x2978>
   13898:	ldr	r3, [fp, #-12]
   1389c:	str	r3, [fp, #-16]
   138a0:	mov	r2, #3
   138a4:	ldr	r1, [pc, #88]	; 13904 <__assert_fail@plt+0x29a8>
   138a8:	ldr	r0, [fp, #-12]
   138ac:	bl	10f38 <strncmp@plt>
   138b0:	mov	r3, r0
   138b4:	cmp	r3, #0
   138b8:	bne	138d4 <__assert_fail@plt+0x2978>
   138bc:	ldr	r3, [fp, #-12]
   138c0:	add	r3, r3, #3
   138c4:	str	r3, [fp, #-16]
   138c8:	ldr	r2, [pc, #56]	; 13908 <__assert_fail@plt+0x29ac>
   138cc:	ldr	r3, [fp, #-16]
   138d0:	str	r3, [r2]
   138d4:	ldr	r2, [pc, #48]	; 1390c <__assert_fail@plt+0x29b0>
   138d8:	ldr	r3, [fp, #-16]
   138dc:	str	r3, [r2]
   138e0:	ldr	r2, [pc, #40]	; 13910 <__assert_fail@plt+0x29b4>
   138e4:	ldr	r3, [fp, #-16]
   138e8:	str	r3, [r2]
   138ec:	nop			; (mov r0, r0)
   138f0:	sub	sp, fp, #4
   138f4:	pop	{fp, pc}
   138f8:	andeq	sl, r2, r8, asr #2
   138fc:	andeq	r9, r1, r0, lsl #18
   13900:	andeq	r9, r1, r8, lsr r9
   13904:	andeq	r9, r1, r0, asr #18
   13908:	andeq	sl, r2, r8, lsr r1
   1390c:	muleq	r3, r8, r2
   13910:	andeq	sl, r2, ip, lsr r1
   13914:	push	{fp, lr}
   13918:	add	fp, sp, #4
   1391c:	sub	sp, sp, #16
   13920:	str	r0, [fp, #-16]
   13924:	bl	10e9c <__errno_location@plt>
   13928:	mov	r3, r0
   1392c:	ldr	r3, [r3]
   13930:	str	r3, [fp, #-8]
   13934:	ldr	r3, [fp, #-16]
   13938:	cmp	r3, #0
   1393c:	beq	13948 <__assert_fail@plt+0x29ec>
   13940:	ldr	r3, [fp, #-16]
   13944:	b	1394c <__assert_fail@plt+0x29f0>
   13948:	ldr	r3, [pc, #48]	; 13980 <__assert_fail@plt+0x2a24>
   1394c:	mov	r1, #48	; 0x30
   13950:	mov	r0, r3
   13954:	bl	17138 <__assert_fail@plt+0x61dc>
   13958:	mov	r3, r0
   1395c:	str	r3, [fp, #-12]
   13960:	bl	10e9c <__errno_location@plt>
   13964:	mov	r2, r0
   13968:	ldr	r3, [fp, #-8]
   1396c:	str	r3, [r2]
   13970:	ldr	r3, [fp, #-12]
   13974:	mov	r0, r3
   13978:	sub	sp, fp, #4
   1397c:	pop	{fp, pc}
   13980:	muleq	r3, ip, r2
   13984:	push	{fp}		; (str fp, [sp, #-4]!)
   13988:	add	fp, sp, #0
   1398c:	sub	sp, sp, #12
   13990:	str	r0, [fp, #-8]
   13994:	ldr	r3, [fp, #-8]
   13998:	cmp	r3, #0
   1399c:	beq	139a8 <__assert_fail@plt+0x2a4c>
   139a0:	ldr	r3, [fp, #-8]
   139a4:	b	139ac <__assert_fail@plt+0x2a50>
   139a8:	ldr	r3, [pc, #16]	; 139c0 <__assert_fail@plt+0x2a64>
   139ac:	ldr	r3, [r3]
   139b0:	mov	r0, r3
   139b4:	add	sp, fp, #0
   139b8:	pop	{fp}		; (ldr fp, [sp], #4)
   139bc:	bx	lr
   139c0:	muleq	r3, ip, r2
   139c4:	push	{fp}		; (str fp, [sp, #-4]!)
   139c8:	add	fp, sp, #0
   139cc:	sub	sp, sp, #12
   139d0:	str	r0, [fp, #-8]
   139d4:	str	r1, [fp, #-12]
   139d8:	ldr	r3, [fp, #-8]
   139dc:	cmp	r3, #0
   139e0:	beq	139ec <__assert_fail@plt+0x2a90>
   139e4:	ldr	r3, [fp, #-8]
   139e8:	b	139f0 <__assert_fail@plt+0x2a94>
   139ec:	ldr	r3, [pc, #20]	; 13a08 <__assert_fail@plt+0x2aac>
   139f0:	ldr	r2, [fp, #-12]
   139f4:	str	r2, [r3]
   139f8:	nop			; (mov r0, r0)
   139fc:	add	sp, fp, #0
   13a00:	pop	{fp}		; (ldr fp, [sp], #4)
   13a04:	bx	lr
   13a08:	muleq	r3, ip, r2
   13a0c:	push	{fp}		; (str fp, [sp, #-4]!)
   13a10:	add	fp, sp, #0
   13a14:	sub	sp, sp, #36	; 0x24
   13a18:	str	r0, [fp, #-24]	; 0xffffffe8
   13a1c:	mov	r3, r1
   13a20:	str	r2, [fp, #-32]	; 0xffffffe0
   13a24:	strb	r3, [fp, #-25]	; 0xffffffe7
   13a28:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13a2c:	strb	r3, [fp, #-5]
   13a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a34:	cmp	r3, #0
   13a38:	beq	13a44 <__assert_fail@plt+0x2ae8>
   13a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a40:	b	13a48 <__assert_fail@plt+0x2aec>
   13a44:	ldr	r3, [pc, #124]	; 13ac8 <__assert_fail@plt+0x2b6c>
   13a48:	add	r2, r3, #8
   13a4c:	ldrb	r3, [fp, #-5]
   13a50:	lsr	r3, r3, #5
   13a54:	uxtb	r3, r3
   13a58:	lsl	r3, r3, #2
   13a5c:	add	r3, r2, r3
   13a60:	str	r3, [fp, #-12]
   13a64:	ldrb	r3, [fp, #-5]
   13a68:	and	r3, r3, #31
   13a6c:	str	r3, [fp, #-16]
   13a70:	ldr	r3, [fp, #-12]
   13a74:	ldr	r2, [r3]
   13a78:	ldr	r3, [fp, #-16]
   13a7c:	lsr	r3, r2, r3
   13a80:	and	r3, r3, #1
   13a84:	str	r3, [fp, #-20]	; 0xffffffec
   13a88:	ldr	r3, [fp, #-12]
   13a8c:	ldr	r3, [r3]
   13a90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13a94:	and	r1, r2, #1
   13a98:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a9c:	eor	r1, r1, r2
   13aa0:	ldr	r2, [fp, #-16]
   13aa4:	lsl	r2, r1, r2
   13aa8:	eor	r2, r2, r3
   13aac:	ldr	r3, [fp, #-12]
   13ab0:	str	r2, [r3]
   13ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ab8:	mov	r0, r3
   13abc:	add	sp, fp, #0
   13ac0:	pop	{fp}		; (ldr fp, [sp], #4)
   13ac4:	bx	lr
   13ac8:	muleq	r3, ip, r2
   13acc:	push	{fp}		; (str fp, [sp, #-4]!)
   13ad0:	add	fp, sp, #0
   13ad4:	sub	sp, sp, #20
   13ad8:	str	r0, [fp, #-16]
   13adc:	str	r1, [fp, #-20]	; 0xffffffec
   13ae0:	ldr	r3, [fp, #-16]
   13ae4:	cmp	r3, #0
   13ae8:	bne	13af4 <__assert_fail@plt+0x2b98>
   13aec:	ldr	r3, [pc, #44]	; 13b20 <__assert_fail@plt+0x2bc4>
   13af0:	str	r3, [fp, #-16]
   13af4:	ldr	r3, [fp, #-16]
   13af8:	ldr	r3, [r3, #4]
   13afc:	str	r3, [fp, #-8]
   13b00:	ldr	r3, [fp, #-16]
   13b04:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b08:	str	r2, [r3, #4]
   13b0c:	ldr	r3, [fp, #-8]
   13b10:	mov	r0, r3
   13b14:	add	sp, fp, #0
   13b18:	pop	{fp}		; (ldr fp, [sp], #4)
   13b1c:	bx	lr
   13b20:	muleq	r3, ip, r2
   13b24:	push	{fp, lr}
   13b28:	add	fp, sp, #4
   13b2c:	sub	sp, sp, #16
   13b30:	str	r0, [fp, #-8]
   13b34:	str	r1, [fp, #-12]
   13b38:	str	r2, [fp, #-16]
   13b3c:	ldr	r3, [fp, #-8]
   13b40:	cmp	r3, #0
   13b44:	bne	13b50 <__assert_fail@plt+0x2bf4>
   13b48:	ldr	r3, [pc, #76]	; 13b9c <__assert_fail@plt+0x2c40>
   13b4c:	str	r3, [fp, #-8]
   13b50:	ldr	r3, [fp, #-8]
   13b54:	mov	r2, #10
   13b58:	str	r2, [r3]
   13b5c:	ldr	r3, [fp, #-12]
   13b60:	cmp	r3, #0
   13b64:	beq	13b74 <__assert_fail@plt+0x2c18>
   13b68:	ldr	r3, [fp, #-16]
   13b6c:	cmp	r3, #0
   13b70:	bne	13b78 <__assert_fail@plt+0x2c1c>
   13b74:	bl	10f44 <abort@plt>
   13b78:	ldr	r3, [fp, #-8]
   13b7c:	ldr	r2, [fp, #-12]
   13b80:	str	r2, [r3, #40]	; 0x28
   13b84:	ldr	r3, [fp, #-8]
   13b88:	ldr	r2, [fp, #-16]
   13b8c:	str	r2, [r3, #44]	; 0x2c
   13b90:	nop			; (mov r0, r0)
   13b94:	sub	sp, fp, #4
   13b98:	pop	{fp, pc}
   13b9c:	muleq	r3, ip, r2
   13ba0:	push	{fp, lr}
   13ba4:	add	fp, sp, #4
   13ba8:	sub	sp, sp, #56	; 0x38
   13bac:	str	r0, [fp, #-56]	; 0xffffffc8
   13bb0:	str	r1, [fp, #-60]	; 0xffffffc4
   13bb4:	sub	r3, fp, #52	; 0x34
   13bb8:	mov	r2, #48	; 0x30
   13bbc:	mov	r1, #0
   13bc0:	mov	r0, r3
   13bc4:	bl	10eb4 <memset@plt>
   13bc8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13bcc:	cmp	r3, #10
   13bd0:	bne	13bd8 <__assert_fail@plt+0x2c7c>
   13bd4:	bl	10f44 <abort@plt>
   13bd8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13bdc:	str	r3, [fp, #-52]	; 0xffffffcc
   13be0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13be4:	mov	lr, r3
   13be8:	sub	ip, fp, #52	; 0x34
   13bec:	ldm	ip!, {r0, r1, r2, r3}
   13bf0:	stmia	lr!, {r0, r1, r2, r3}
   13bf4:	ldm	ip!, {r0, r1, r2, r3}
   13bf8:	stmia	lr!, {r0, r1, r2, r3}
   13bfc:	ldm	ip, {r0, r1, r2, r3}
   13c00:	stm	lr, {r0, r1, r2, r3}
   13c04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c08:	sub	sp, fp, #4
   13c0c:	pop	{fp, pc}
   13c10:	push	{fp, lr}
   13c14:	add	fp, sp, #4
   13c18:	sub	sp, sp, #16
   13c1c:	str	r0, [fp, #-16]
   13c20:	str	r1, [fp, #-20]	; 0xffffffec
   13c24:	ldr	r0, [fp, #-16]
   13c28:	bl	10e6c <gettext@plt>
   13c2c:	str	r0, [fp, #-8]
   13c30:	ldr	r2, [fp, #-8]
   13c34:	ldr	r3, [fp, #-16]
   13c38:	cmp	r2, r3
   13c3c:	beq	13c48 <__assert_fail@plt+0x2cec>
   13c40:	ldr	r3, [fp, #-8]
   13c44:	b	13cd8 <__assert_fail@plt+0x2d7c>
   13c48:	bl	181ec <__assert_fail@plt+0x7290>
   13c4c:	str	r0, [fp, #-12]
   13c50:	ldr	r1, [pc, #140]	; 13ce4 <__assert_fail@plt+0x2d88>
   13c54:	ldr	r0, [fp, #-12]
   13c58:	bl	17eb4 <__assert_fail@plt+0x6f58>
   13c5c:	mov	r3, r0
   13c60:	cmp	r3, #0
   13c64:	bne	13c88 <__assert_fail@plt+0x2d2c>
   13c68:	ldr	r3, [fp, #-16]
   13c6c:	ldrb	r3, [r3]
   13c70:	cmp	r3, #96	; 0x60
   13c74:	bne	13c80 <__assert_fail@plt+0x2d24>
   13c78:	ldr	r3, [pc, #104]	; 13ce8 <__assert_fail@plt+0x2d8c>
   13c7c:	b	13cd8 <__assert_fail@plt+0x2d7c>
   13c80:	ldr	r3, [pc, #100]	; 13cec <__assert_fail@plt+0x2d90>
   13c84:	b	13cd8 <__assert_fail@plt+0x2d7c>
   13c88:	ldr	r1, [pc, #96]	; 13cf0 <__assert_fail@plt+0x2d94>
   13c8c:	ldr	r0, [fp, #-12]
   13c90:	bl	17eb4 <__assert_fail@plt+0x6f58>
   13c94:	mov	r3, r0
   13c98:	cmp	r3, #0
   13c9c:	bne	13cc0 <__assert_fail@plt+0x2d64>
   13ca0:	ldr	r3, [fp, #-16]
   13ca4:	ldrb	r3, [r3]
   13ca8:	cmp	r3, #96	; 0x60
   13cac:	bne	13cb8 <__assert_fail@plt+0x2d5c>
   13cb0:	ldr	r3, [pc, #60]	; 13cf4 <__assert_fail@plt+0x2d98>
   13cb4:	b	13cd8 <__assert_fail@plt+0x2d7c>
   13cb8:	ldr	r3, [pc, #56]	; 13cf8 <__assert_fail@plt+0x2d9c>
   13cbc:	b	13cd8 <__assert_fail@plt+0x2d7c>
   13cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc4:	cmp	r3, #9
   13cc8:	bne	13cd4 <__assert_fail@plt+0x2d78>
   13ccc:	ldr	r3, [pc, #40]	; 13cfc <__assert_fail@plt+0x2da0>
   13cd0:	b	13cd8 <__assert_fail@plt+0x2d7c>
   13cd4:	ldr	r3, [pc, #36]	; 13d00 <__assert_fail@plt+0x2da4>
   13cd8:	mov	r0, r3
   13cdc:	sub	sp, fp, #4
   13ce0:	pop	{fp, pc}
   13ce4:	andeq	r9, r1, r0, lsl #20
   13ce8:	andeq	r9, r1, r8, lsl #20
   13cec:	andeq	r9, r1, ip, lsl #20
   13cf0:	andeq	r9, r1, r0, lsl sl
   13cf4:	andeq	r9, r1, r8, lsl sl
   13cf8:	andeq	r9, r1, ip, lsl sl
   13cfc:	andeq	r9, r1, r0, lsr #20
   13d00:	andeq	r9, r1, r4, lsr #20
   13d04:	push	{r4, fp, lr}
   13d08:	add	fp, sp, #8
   13d0c:	sub	sp, sp, #116	; 0x74
   13d10:	str	r0, [fp, #-88]	; 0xffffffa8
   13d14:	str	r1, [fp, #-92]	; 0xffffffa4
   13d18:	str	r2, [fp, #-96]	; 0xffffffa0
   13d1c:	str	r3, [fp, #-100]	; 0xffffff9c
   13d20:	mov	r3, #0
   13d24:	str	r3, [fp, #-20]	; 0xffffffec
   13d28:	mov	r3, #0
   13d2c:	str	r3, [fp, #-24]	; 0xffffffe8
   13d30:	mov	r3, #0
   13d34:	str	r3, [fp, #-28]	; 0xffffffe4
   13d38:	mov	r3, #0
   13d3c:	str	r3, [fp, #-32]	; 0xffffffe0
   13d40:	mov	r3, #0
   13d44:	strb	r3, [fp, #-33]	; 0xffffffdf
   13d48:	bl	10ddc <__ctype_get_mb_cur_max@plt>
   13d4c:	mov	r3, r0
   13d50:	cmp	r3, #1
   13d54:	moveq	r3, #1
   13d58:	movne	r3, #0
   13d5c:	strb	r3, [fp, #-57]	; 0xffffffc7
   13d60:	ldr	r3, [fp, #8]
   13d64:	and	r3, r3, #2
   13d68:	cmp	r3, #0
   13d6c:	movne	r3, #1
   13d70:	moveq	r3, #0
   13d74:	strb	r3, [fp, #-34]	; 0xffffffde
   13d78:	mov	r3, #0
   13d7c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13d80:	mov	r3, #0
   13d84:	strb	r3, [fp, #-36]	; 0xffffffdc
   13d88:	mov	r3, #1
   13d8c:	strb	r3, [fp, #-37]	; 0xffffffdb
   13d90:	ldr	r3, [fp, #4]
   13d94:	cmp	r3, #10
   13d98:	ldrls	pc, [pc, r3, lsl #2]
   13d9c:	b	13fa4 <__assert_fail@plt+0x3048>
   13da0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13da4:	andeq	r3, r1, r4, lsl pc
   13da8:	andeq	r3, r1, r8, lsr pc
   13dac:	andeq	r3, r1, ip, lsl #30
   13db0:	andeq	r3, r1, ip, lsl pc
   13db4:	ldrdeq	r3, [r1], -ip
   13db8:	andeq	r3, r1, ip, asr #27
   13dbc:	andeq	r3, r1, ip, lsr lr
   13dc0:	andeq	r3, r1, r0, asr lr
   13dc4:	andeq	r3, r1, r0, asr lr
   13dc8:	andeq	r3, r1, r0, asr lr
   13dcc:	mov	r3, #5
   13dd0:	str	r3, [fp, #4]
   13dd4:	mov	r3, #1
   13dd8:	strb	r3, [fp, #-34]	; 0xffffffde
   13ddc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13de0:	eor	r3, r3, #1
   13de4:	uxtb	r3, r3
   13de8:	cmp	r3, #0
   13dec:	beq	13e20 <__assert_fail@plt+0x2ec4>
   13df0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13df4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13df8:	cmp	r2, r3
   13dfc:	bcs	13e14 <__assert_fail@plt+0x2eb8>
   13e00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e08:	add	r3, r2, r3
   13e0c:	mov	r2, #34	; 0x22
   13e10:	strb	r2, [r3]
   13e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e18:	add	r3, r3, #1
   13e1c:	str	r3, [fp, #-20]	; 0xffffffec
   13e20:	mov	r3, #1
   13e24:	strb	r3, [fp, #-33]	; 0xffffffdf
   13e28:	ldr	r3, [pc, #3872]	; 14d50 <__assert_fail@plt+0x3df4>
   13e2c:	str	r3, [fp, #-28]	; 0xffffffe4
   13e30:	mov	r3, #1
   13e34:	str	r3, [fp, #-32]	; 0xffffffe0
   13e38:	b	13fa8 <__assert_fail@plt+0x304c>
   13e3c:	mov	r3, #1
   13e40:	strb	r3, [fp, #-33]	; 0xffffffdf
   13e44:	mov	r3, #0
   13e48:	strb	r3, [fp, #-34]	; 0xffffffde
   13e4c:	b	13fa8 <__assert_fail@plt+0x304c>
   13e50:	ldr	r3, [fp, #4]
   13e54:	cmp	r3, #10
   13e58:	beq	13e7c <__assert_fail@plt+0x2f20>
   13e5c:	ldr	r1, [fp, #4]
   13e60:	ldr	r0, [pc, #3820]	; 14d54 <__assert_fail@plt+0x3df8>
   13e64:	bl	13c10 <__assert_fail@plt+0x2cb4>
   13e68:	str	r0, [fp, #16]
   13e6c:	ldr	r1, [fp, #4]
   13e70:	ldr	r0, [pc, #3808]	; 14d58 <__assert_fail@plt+0x3dfc>
   13e74:	bl	13c10 <__assert_fail@plt+0x2cb4>
   13e78:	str	r0, [fp, #20]
   13e7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e80:	eor	r3, r3, #1
   13e84:	uxtb	r3, r3
   13e88:	cmp	r3, #0
   13e8c:	beq	13eec <__assert_fail@plt+0x2f90>
   13e90:	ldr	r3, [fp, #16]
   13e94:	str	r3, [fp, #-28]	; 0xffffffe4
   13e98:	b	13edc <__assert_fail@plt+0x2f80>
   13e9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ea0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ea4:	cmp	r2, r3
   13ea8:	bcs	13ec4 <__assert_fail@plt+0x2f68>
   13eac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13eb4:	add	r3, r2, r3
   13eb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13ebc:	ldrb	r2, [r2]
   13ec0:	strb	r2, [r3]
   13ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ec8:	add	r3, r3, #1
   13ecc:	str	r3, [fp, #-20]	; 0xffffffec
   13ed0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ed4:	add	r3, r3, #1
   13ed8:	str	r3, [fp, #-28]	; 0xffffffe4
   13edc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ee0:	ldrb	r3, [r3]
   13ee4:	cmp	r3, #0
   13ee8:	bne	13e9c <__assert_fail@plt+0x2f40>
   13eec:	mov	r3, #1
   13ef0:	strb	r3, [fp, #-33]	; 0xffffffdf
   13ef4:	ldr	r3, [fp, #20]
   13ef8:	str	r3, [fp, #-28]	; 0xffffffe4
   13efc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13f00:	bl	10e78 <strlen@plt>
   13f04:	str	r0, [fp, #-32]	; 0xffffffe0
   13f08:	b	13fa8 <__assert_fail@plt+0x304c>
   13f0c:	mov	r3, #1
   13f10:	strb	r3, [fp, #-33]	; 0xffffffdf
   13f14:	mov	r3, #1
   13f18:	strb	r3, [fp, #-34]	; 0xffffffde
   13f1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f20:	eor	r3, r3, #1
   13f24:	uxtb	r3, r3
   13f28:	cmp	r3, #0
   13f2c:	beq	13f38 <__assert_fail@plt+0x2fdc>
   13f30:	mov	r3, #1
   13f34:	strb	r3, [fp, #-33]	; 0xffffffdf
   13f38:	mov	r3, #2
   13f3c:	str	r3, [fp, #4]
   13f40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f44:	eor	r3, r3, #1
   13f48:	uxtb	r3, r3
   13f4c:	cmp	r3, #0
   13f50:	beq	13f84 <__assert_fail@plt+0x3028>
   13f54:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f5c:	cmp	r2, r3
   13f60:	bcs	13f78 <__assert_fail@plt+0x301c>
   13f64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f6c:	add	r3, r2, r3
   13f70:	mov	r2, #39	; 0x27
   13f74:	strb	r2, [r3]
   13f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f7c:	add	r3, r3, #1
   13f80:	str	r3, [fp, #-20]	; 0xffffffec
   13f84:	ldr	r3, [pc, #3532]	; 14d58 <__assert_fail@plt+0x3dfc>
   13f88:	str	r3, [fp, #-28]	; 0xffffffe4
   13f8c:	mov	r3, #1
   13f90:	str	r3, [fp, #-32]	; 0xffffffe0
   13f94:	b	13fa8 <__assert_fail@plt+0x304c>
   13f98:	mov	r3, #0
   13f9c:	strb	r3, [fp, #-34]	; 0xffffffde
   13fa0:	b	13fa8 <__assert_fail@plt+0x304c>
   13fa4:	bl	10f44 <abort@plt>
   13fa8:	mov	r3, #0
   13fac:	str	r3, [fp, #-16]
   13fb0:	b	15140 <__assert_fail@plt+0x41e4>
   13fb4:	mov	r3, #0
   13fb8:	strb	r3, [fp, #-40]	; 0xffffffd8
   13fbc:	mov	r3, #0
   13fc0:	strb	r3, [fp, #-41]	; 0xffffffd7
   13fc4:	mov	r3, #0
   13fc8:	strb	r3, [fp, #-42]	; 0xffffffd6
   13fcc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13fd0:	cmp	r3, #0
   13fd4:	beq	14070 <__assert_fail@plt+0x3114>
   13fd8:	ldr	r3, [fp, #4]
   13fdc:	cmp	r3, #2
   13fe0:	beq	14070 <__assert_fail@plt+0x3114>
   13fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13fe8:	cmp	r3, #0
   13fec:	beq	14070 <__assert_fail@plt+0x3114>
   13ff0:	ldr	r2, [fp, #-16]
   13ff4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ff8:	add	r4, r2, r3
   13ffc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14000:	cmn	r3, #1
   14004:	bne	14028 <__assert_fail@plt+0x30cc>
   14008:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1400c:	cmp	r3, #1
   14010:	bls	14028 <__assert_fail@plt+0x30cc>
   14014:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14018:	bl	10e78 <strlen@plt>
   1401c:	str	r0, [fp, #-100]	; 0xffffff9c
   14020:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14024:	b	1402c <__assert_fail@plt+0x30d0>
   14028:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1402c:	cmp	r4, r3
   14030:	bhi	14070 <__assert_fail@plt+0x3114>
   14034:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14038:	ldr	r3, [fp, #-16]
   1403c:	add	r3, r2, r3
   14040:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14044:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14048:	mov	r0, r3
   1404c:	bl	10d7c <memcmp@plt>
   14050:	mov	r3, r0
   14054:	cmp	r3, #0
   14058:	bne	14070 <__assert_fail@plt+0x3114>
   1405c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14060:	cmp	r3, #0
   14064:	bne	152fc <__assert_fail@plt+0x43a0>
   14068:	mov	r3, #1
   1406c:	strb	r3, [fp, #-40]	; 0xffffffd8
   14070:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14074:	ldr	r3, [fp, #-16]
   14078:	add	r3, r2, r3
   1407c:	ldrb	r3, [r3]
   14080:	strb	r3, [fp, #-38]	; 0xffffffda
   14084:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14088:	cmp	r3, #126	; 0x7e
   1408c:	ldrls	pc, [pc, r3, lsl #2]
   14090:	b	148bc <__assert_fail@plt+0x3960>
   14094:	muleq	r1, r0, r2
   14098:			; <UNDEFINED> instruction: 0x000148bc
   1409c:			; <UNDEFINED> instruction: 0x000148bc
   140a0:			; <UNDEFINED> instruction: 0x000148bc
   140a4:			; <UNDEFINED> instruction: 0x000148bc
   140a8:			; <UNDEFINED> instruction: 0x000148bc
   140ac:			; <UNDEFINED> instruction: 0x000148bc
   140b0:	andeq	r4, r1, r0, lsl #13
   140b4:	andeq	r4, r1, ip, lsl #13
   140b8:			; <UNDEFINED> instruction: 0x000146bc
   140bc:	andeq	r4, r1, r4, lsr #13
   140c0:	andeq	r4, r1, r8, asr #13
   140c4:	muleq	r1, r8, r6
   140c8:			; <UNDEFINED> instruction: 0x000146b0
   140cc:			; <UNDEFINED> instruction: 0x000148bc
   140d0:			; <UNDEFINED> instruction: 0x000148bc
   140d4:			; <UNDEFINED> instruction: 0x000148bc
   140d8:			; <UNDEFINED> instruction: 0x000148bc
   140dc:			; <UNDEFINED> instruction: 0x000148bc
   140e0:			; <UNDEFINED> instruction: 0x000148bc
   140e4:			; <UNDEFINED> instruction: 0x000148bc
   140e8:			; <UNDEFINED> instruction: 0x000148bc
   140ec:			; <UNDEFINED> instruction: 0x000148bc
   140f0:			; <UNDEFINED> instruction: 0x000148bc
   140f4:			; <UNDEFINED> instruction: 0x000148bc
   140f8:			; <UNDEFINED> instruction: 0x000148bc
   140fc:			; <UNDEFINED> instruction: 0x000148bc
   14100:			; <UNDEFINED> instruction: 0x000148bc
   14104:			; <UNDEFINED> instruction: 0x000148bc
   14108:			; <UNDEFINED> instruction: 0x000148bc
   1410c:			; <UNDEFINED> instruction: 0x000148bc
   14110:			; <UNDEFINED> instruction: 0x000148bc
   14114:	andeq	r4, r1, r0, lsr #15
   14118:	andeq	r4, r1, r8, lsr #15
   1411c:	andeq	r4, r1, r8, lsr #15
   14120:	muleq	r1, r4, r7
   14124:	andeq	r4, r1, r8, lsr #15
   14128:			; <UNDEFINED> instruction: 0x000148b0
   1412c:	andeq	r4, r1, r8, lsr #15
   14130:	andeq	r4, r1, r4, asr #15
   14134:	andeq	r4, r1, r8, lsr #15
   14138:	andeq	r4, r1, r8, lsr #15
   1413c:	andeq	r4, r1, r8, lsr #15
   14140:			; <UNDEFINED> instruction: 0x000148b0
   14144:			; <UNDEFINED> instruction: 0x000148b0
   14148:			; <UNDEFINED> instruction: 0x000148b0
   1414c:			; <UNDEFINED> instruction: 0x000148b0
   14150:			; <UNDEFINED> instruction: 0x000148b0
   14154:			; <UNDEFINED> instruction: 0x000148b0
   14158:			; <UNDEFINED> instruction: 0x000148b0
   1415c:			; <UNDEFINED> instruction: 0x000148b0
   14160:			; <UNDEFINED> instruction: 0x000148b0
   14164:			; <UNDEFINED> instruction: 0x000148b0
   14168:			; <UNDEFINED> instruction: 0x000148b0
   1416c:			; <UNDEFINED> instruction: 0x000148b0
   14170:			; <UNDEFINED> instruction: 0x000148b0
   14174:			; <UNDEFINED> instruction: 0x000148b0
   14178:			; <UNDEFINED> instruction: 0x000148b0
   1417c:			; <UNDEFINED> instruction: 0x000148b0
   14180:	andeq	r4, r1, r8, lsr #15
   14184:	andeq	r4, r1, r8, lsr #15
   14188:	andeq	r4, r1, r8, lsr #15
   1418c:	andeq	r4, r1, r8, lsr #15
   14190:	andeq	r4, r1, r0, ror r4
   14194:			; <UNDEFINED> instruction: 0x000148bc
   14198:			; <UNDEFINED> instruction: 0x000148b0
   1419c:			; <UNDEFINED> instruction: 0x000148b0
   141a0:			; <UNDEFINED> instruction: 0x000148b0
   141a4:			; <UNDEFINED> instruction: 0x000148b0
   141a8:			; <UNDEFINED> instruction: 0x000148b0
   141ac:			; <UNDEFINED> instruction: 0x000148b0
   141b0:			; <UNDEFINED> instruction: 0x000148b0
   141b4:			; <UNDEFINED> instruction: 0x000148b0
   141b8:			; <UNDEFINED> instruction: 0x000148b0
   141bc:			; <UNDEFINED> instruction: 0x000148b0
   141c0:			; <UNDEFINED> instruction: 0x000148b0
   141c4:			; <UNDEFINED> instruction: 0x000148b0
   141c8:			; <UNDEFINED> instruction: 0x000148b0
   141cc:			; <UNDEFINED> instruction: 0x000148b0
   141d0:			; <UNDEFINED> instruction: 0x000148b0
   141d4:			; <UNDEFINED> instruction: 0x000148b0
   141d8:			; <UNDEFINED> instruction: 0x000148b0
   141dc:			; <UNDEFINED> instruction: 0x000148b0
   141e0:			; <UNDEFINED> instruction: 0x000148b0
   141e4:			; <UNDEFINED> instruction: 0x000148b0
   141e8:			; <UNDEFINED> instruction: 0x000148b0
   141ec:			; <UNDEFINED> instruction: 0x000148b0
   141f0:			; <UNDEFINED> instruction: 0x000148b0
   141f4:			; <UNDEFINED> instruction: 0x000148b0
   141f8:			; <UNDEFINED> instruction: 0x000148b0
   141fc:			; <UNDEFINED> instruction: 0x000148b0
   14200:	andeq	r4, r1, r8, lsr #15
   14204:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14208:			; <UNDEFINED> instruction: 0x000148b0
   1420c:	andeq	r4, r1, r8, lsr #15
   14210:			; <UNDEFINED> instruction: 0x000148b0
   14214:	andeq	r4, r1, r8, lsr #15
   14218:			; <UNDEFINED> instruction: 0x000148b0
   1421c:			; <UNDEFINED> instruction: 0x000148b0
   14220:			; <UNDEFINED> instruction: 0x000148b0
   14224:			; <UNDEFINED> instruction: 0x000148b0
   14228:			; <UNDEFINED> instruction: 0x000148b0
   1422c:			; <UNDEFINED> instruction: 0x000148b0
   14230:			; <UNDEFINED> instruction: 0x000148b0
   14234:			; <UNDEFINED> instruction: 0x000148b0
   14238:			; <UNDEFINED> instruction: 0x000148b0
   1423c:			; <UNDEFINED> instruction: 0x000148b0
   14240:			; <UNDEFINED> instruction: 0x000148b0
   14244:			; <UNDEFINED> instruction: 0x000148b0
   14248:			; <UNDEFINED> instruction: 0x000148b0
   1424c:			; <UNDEFINED> instruction: 0x000148b0
   14250:			; <UNDEFINED> instruction: 0x000148b0
   14254:			; <UNDEFINED> instruction: 0x000148b0
   14258:			; <UNDEFINED> instruction: 0x000148b0
   1425c:			; <UNDEFINED> instruction: 0x000148b0
   14260:			; <UNDEFINED> instruction: 0x000148b0
   14264:			; <UNDEFINED> instruction: 0x000148b0
   14268:			; <UNDEFINED> instruction: 0x000148b0
   1426c:			; <UNDEFINED> instruction: 0x000148b0
   14270:			; <UNDEFINED> instruction: 0x000148b0
   14274:			; <UNDEFINED> instruction: 0x000148b0
   14278:			; <UNDEFINED> instruction: 0x000148b0
   1427c:			; <UNDEFINED> instruction: 0x000148b0
   14280:	andeq	r4, r1, ip, asr #14
   14284:	andeq	r4, r1, r8, lsr #15
   14288:	andeq	r4, r1, ip, asr #14
   1428c:	muleq	r1, r4, r7
   14290:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14294:	cmp	r3, #0
   14298:	beq	1445c <__assert_fail@plt+0x3500>
   1429c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142a0:	cmp	r3, #0
   142a4:	bne	15304 <__assert_fail@plt+0x43a8>
   142a8:	mov	r3, #1
   142ac:	strb	r3, [fp, #-41]	; 0xffffffd7
   142b0:	ldr	r3, [fp, #4]
   142b4:	cmp	r3, #2
   142b8:	bne	14368 <__assert_fail@plt+0x340c>
   142bc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   142c0:	eor	r3, r3, #1
   142c4:	uxtb	r3, r3
   142c8:	cmp	r3, #0
   142cc:	beq	14368 <__assert_fail@plt+0x340c>
   142d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142d8:	cmp	r2, r3
   142dc:	bcs	142f4 <__assert_fail@plt+0x3398>
   142e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e8:	add	r3, r2, r3
   142ec:	mov	r2, #39	; 0x27
   142f0:	strb	r2, [r3]
   142f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f8:	add	r3, r3, #1
   142fc:	str	r3, [fp, #-20]	; 0xffffffec
   14300:	ldr	r2, [fp, #-20]	; 0xffffffec
   14304:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14308:	cmp	r2, r3
   1430c:	bcs	14324 <__assert_fail@plt+0x33c8>
   14310:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14314:	ldr	r3, [fp, #-20]	; 0xffffffec
   14318:	add	r3, r2, r3
   1431c:	mov	r2, #36	; 0x24
   14320:	strb	r2, [r3]
   14324:	ldr	r3, [fp, #-20]	; 0xffffffec
   14328:	add	r3, r3, #1
   1432c:	str	r3, [fp, #-20]	; 0xffffffec
   14330:	ldr	r2, [fp, #-20]	; 0xffffffec
   14334:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14338:	cmp	r2, r3
   1433c:	bcs	14354 <__assert_fail@plt+0x33f8>
   14340:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14344:	ldr	r3, [fp, #-20]	; 0xffffffec
   14348:	add	r3, r2, r3
   1434c:	mov	r2, #39	; 0x27
   14350:	strb	r2, [r3]
   14354:	ldr	r3, [fp, #-20]	; 0xffffffec
   14358:	add	r3, r3, #1
   1435c:	str	r3, [fp, #-20]	; 0xffffffec
   14360:	mov	r3, #1
   14364:	strb	r3, [fp, #-35]	; 0xffffffdd
   14368:	ldr	r2, [fp, #-20]	; 0xffffffec
   1436c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14370:	cmp	r2, r3
   14374:	bcs	1438c <__assert_fail@plt+0x3430>
   14378:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1437c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14380:	add	r3, r2, r3
   14384:	mov	r2, #92	; 0x5c
   14388:	strb	r2, [r3]
   1438c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14390:	add	r3, r3, #1
   14394:	str	r3, [fp, #-20]	; 0xffffffec
   14398:	ldr	r3, [fp, #4]
   1439c:	cmp	r3, #2
   143a0:	beq	14450 <__assert_fail@plt+0x34f4>
   143a4:	ldr	r3, [fp, #-16]
   143a8:	add	r2, r3, #1
   143ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   143b0:	cmp	r2, r3
   143b4:	bcs	14450 <__assert_fail@plt+0x34f4>
   143b8:	ldr	r3, [fp, #-16]
   143bc:	add	r3, r3, #1
   143c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143c4:	add	r3, r2, r3
   143c8:	ldrb	r3, [r3]
   143cc:	cmp	r3, #47	; 0x2f
   143d0:	bls	14450 <__assert_fail@plt+0x34f4>
   143d4:	ldr	r3, [fp, #-16]
   143d8:	add	r3, r3, #1
   143dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143e0:	add	r3, r2, r3
   143e4:	ldrb	r3, [r3]
   143e8:	cmp	r3, #57	; 0x39
   143ec:	bhi	14450 <__assert_fail@plt+0x34f4>
   143f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   143f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143f8:	cmp	r2, r3
   143fc:	bcs	14414 <__assert_fail@plt+0x34b8>
   14400:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14404:	ldr	r3, [fp, #-20]	; 0xffffffec
   14408:	add	r3, r2, r3
   1440c:	mov	r2, #48	; 0x30
   14410:	strb	r2, [r3]
   14414:	ldr	r3, [fp, #-20]	; 0xffffffec
   14418:	add	r3, r3, #1
   1441c:	str	r3, [fp, #-20]	; 0xffffffec
   14420:	ldr	r2, [fp, #-20]	; 0xffffffec
   14424:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14428:	cmp	r2, r3
   1442c:	bcs	14444 <__assert_fail@plt+0x34e8>
   14430:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14434:	ldr	r3, [fp, #-20]	; 0xffffffec
   14438:	add	r3, r2, r3
   1443c:	mov	r2, #48	; 0x30
   14440:	strb	r2, [r3]
   14444:	ldr	r3, [fp, #-20]	; 0xffffffec
   14448:	add	r3, r3, #1
   1444c:	str	r3, [fp, #-20]	; 0xffffffec
   14450:	mov	r3, #48	; 0x30
   14454:	strb	r3, [fp, #-38]	; 0xffffffda
   14458:	b	14e98 <__assert_fail@plt+0x3f3c>
   1445c:	ldr	r3, [fp, #8]
   14460:	and	r3, r3, #1
   14464:	cmp	r3, #0
   14468:	beq	14e98 <__assert_fail@plt+0x3f3c>
   1446c:	b	15134 <__assert_fail@plt+0x41d8>
   14470:	ldr	r3, [fp, #4]
   14474:	cmp	r3, #2
   14478:	beq	14488 <__assert_fail@plt+0x352c>
   1447c:	cmp	r3, #5
   14480:	beq	14498 <__assert_fail@plt+0x353c>
   14484:	b	1467c <__assert_fail@plt+0x3720>
   14488:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1448c:	cmp	r3, #0
   14490:	beq	14670 <__assert_fail@plt+0x3714>
   14494:	b	15340 <__assert_fail@plt+0x43e4>
   14498:	ldr	r3, [fp, #8]
   1449c:	and	r3, r3, #4
   144a0:	cmp	r3, #0
   144a4:	beq	14678 <__assert_fail@plt+0x371c>
   144a8:	ldr	r3, [fp, #-16]
   144ac:	add	r2, r3, #2
   144b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   144b4:	cmp	r2, r3
   144b8:	bcs	14678 <__assert_fail@plt+0x371c>
   144bc:	ldr	r3, [fp, #-16]
   144c0:	add	r3, r3, #1
   144c4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   144c8:	add	r3, r2, r3
   144cc:	ldrb	r3, [r3]
   144d0:	cmp	r3, #63	; 0x3f
   144d4:	bne	14678 <__assert_fail@plt+0x371c>
   144d8:	ldr	r3, [fp, #-16]
   144dc:	add	r3, r3, #2
   144e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   144e4:	add	r3, r2, r3
   144e8:	ldrb	r3, [r3]
   144ec:	sub	r3, r3, #33	; 0x21
   144f0:	cmp	r3, #29
   144f4:	ldrls	pc, [pc, r3, lsl #2]
   144f8:	b	14668 <__assert_fail@plt+0x370c>
   144fc:	andeq	r4, r1, r4, ror r5
   14500:	andeq	r4, r1, r8, ror #12
   14504:	andeq	r4, r1, r8, ror #12
   14508:	andeq	r4, r1, r8, ror #12
   1450c:	andeq	r4, r1, r8, ror #12
   14510:	andeq	r4, r1, r8, ror #12
   14514:	andeq	r4, r1, r4, ror r5
   14518:	andeq	r4, r1, r4, ror r5
   1451c:	andeq	r4, r1, r4, ror r5
   14520:	andeq	r4, r1, r8, ror #12
   14524:	andeq	r4, r1, r8, ror #12
   14528:	andeq	r4, r1, r8, ror #12
   1452c:	andeq	r4, r1, r4, ror r5
   14530:	andeq	r4, r1, r8, ror #12
   14534:	andeq	r4, r1, r4, ror r5
   14538:	andeq	r4, r1, r8, ror #12
   1453c:	andeq	r4, r1, r8, ror #12
   14540:	andeq	r4, r1, r8, ror #12
   14544:	andeq	r4, r1, r8, ror #12
   14548:	andeq	r4, r1, r8, ror #12
   1454c:	andeq	r4, r1, r8, ror #12
   14550:	andeq	r4, r1, r8, ror #12
   14554:	andeq	r4, r1, r8, ror #12
   14558:	andeq	r4, r1, r8, ror #12
   1455c:	andeq	r4, r1, r8, ror #12
   14560:	andeq	r4, r1, r8, ror #12
   14564:	andeq	r4, r1, r8, ror #12
   14568:	andeq	r4, r1, r4, ror r5
   1456c:	andeq	r4, r1, r4, ror r5
   14570:	andeq	r4, r1, r4, ror r5
   14574:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14578:	cmp	r3, #0
   1457c:	bne	1530c <__assert_fail@plt+0x43b0>
   14580:	ldr	r3, [fp, #-16]
   14584:	add	r3, r3, #2
   14588:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1458c:	add	r3, r2, r3
   14590:	ldrb	r3, [r3]
   14594:	strb	r3, [fp, #-38]	; 0xffffffda
   14598:	ldr	r3, [fp, #-16]
   1459c:	add	r3, r3, #2
   145a0:	str	r3, [fp, #-16]
   145a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   145a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145ac:	cmp	r2, r3
   145b0:	bcs	145c8 <__assert_fail@plt+0x366c>
   145b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145bc:	add	r3, r2, r3
   145c0:	mov	r2, #63	; 0x3f
   145c4:	strb	r2, [r3]
   145c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145cc:	add	r3, r3, #1
   145d0:	str	r3, [fp, #-20]	; 0xffffffec
   145d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   145d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145dc:	cmp	r2, r3
   145e0:	bcs	145f8 <__assert_fail@plt+0x369c>
   145e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145ec:	add	r3, r2, r3
   145f0:	mov	r2, #34	; 0x22
   145f4:	strb	r2, [r3]
   145f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145fc:	add	r3, r3, #1
   14600:	str	r3, [fp, #-20]	; 0xffffffec
   14604:	ldr	r2, [fp, #-20]	; 0xffffffec
   14608:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1460c:	cmp	r2, r3
   14610:	bcs	14628 <__assert_fail@plt+0x36cc>
   14614:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1461c:	add	r3, r2, r3
   14620:	mov	r2, #34	; 0x22
   14624:	strb	r2, [r3]
   14628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1462c:	add	r3, r3, #1
   14630:	str	r3, [fp, #-20]	; 0xffffffec
   14634:	ldr	r2, [fp, #-20]	; 0xffffffec
   14638:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1463c:	cmp	r2, r3
   14640:	bcs	14658 <__assert_fail@plt+0x36fc>
   14644:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1464c:	add	r3, r2, r3
   14650:	mov	r2, #63	; 0x3f
   14654:	strb	r2, [r3]
   14658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1465c:	add	r3, r3, #1
   14660:	str	r3, [fp, #-20]	; 0xffffffec
   14664:	b	1466c <__assert_fail@plt+0x3710>
   14668:	nop			; (mov r0, r0)
   1466c:	b	14678 <__assert_fail@plt+0x371c>
   14670:	nop			; (mov r0, r0)
   14674:	b	14ec4 <__assert_fail@plt+0x3f68>
   14678:	nop			; (mov r0, r0)
   1467c:	b	14ec4 <__assert_fail@plt+0x3f68>
   14680:	mov	r3, #97	; 0x61
   14684:	strb	r3, [fp, #-39]	; 0xffffffd9
   14688:	b	14734 <__assert_fail@plt+0x37d8>
   1468c:	mov	r3, #98	; 0x62
   14690:	strb	r3, [fp, #-39]	; 0xffffffd9
   14694:	b	14734 <__assert_fail@plt+0x37d8>
   14698:	mov	r3, #102	; 0x66
   1469c:	strb	r3, [fp, #-39]	; 0xffffffd9
   146a0:	b	14734 <__assert_fail@plt+0x37d8>
   146a4:	mov	r3, #110	; 0x6e
   146a8:	strb	r3, [fp, #-39]	; 0xffffffd9
   146ac:	b	1471c <__assert_fail@plt+0x37c0>
   146b0:	mov	r3, #114	; 0x72
   146b4:	strb	r3, [fp, #-39]	; 0xffffffd9
   146b8:	b	1471c <__assert_fail@plt+0x37c0>
   146bc:	mov	r3, #116	; 0x74
   146c0:	strb	r3, [fp, #-39]	; 0xffffffd9
   146c4:	b	1471c <__assert_fail@plt+0x37c0>
   146c8:	mov	r3, #118	; 0x76
   146cc:	strb	r3, [fp, #-39]	; 0xffffffd9
   146d0:	b	14734 <__assert_fail@plt+0x37d8>
   146d4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   146d8:	strb	r3, [fp, #-39]	; 0xffffffd9
   146dc:	ldr	r3, [fp, #4]
   146e0:	cmp	r3, #2
   146e4:	bne	146f8 <__assert_fail@plt+0x379c>
   146e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   146ec:	cmp	r3, #0
   146f0:	beq	1504c <__assert_fail@plt+0x40f0>
   146f4:	b	15340 <__assert_fail@plt+0x43e4>
   146f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   146fc:	cmp	r3, #0
   14700:	beq	1471c <__assert_fail@plt+0x37c0>
   14704:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14708:	cmp	r3, #0
   1470c:	beq	1471c <__assert_fail@plt+0x37c0>
   14710:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14714:	cmp	r3, #0
   14718:	bne	15054 <__assert_fail@plt+0x40f8>
   1471c:	ldr	r3, [fp, #4]
   14720:	cmp	r3, #2
   14724:	bne	14734 <__assert_fail@plt+0x37d8>
   14728:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1472c:	cmp	r3, #0
   14730:	bne	15314 <__assert_fail@plt+0x43b8>
   14734:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14738:	cmp	r3, #0
   1473c:	beq	14ea0 <__assert_fail@plt+0x3f44>
   14740:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14744:	strb	r3, [fp, #-38]	; 0xffffffda
   14748:	b	14f4c <__assert_fail@plt+0x3ff0>
   1474c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14750:	cmn	r3, #1
   14754:	bne	14778 <__assert_fail@plt+0x381c>
   14758:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1475c:	add	r3, r3, #1
   14760:	ldrb	r3, [r3]
   14764:	cmp	r3, #0
   14768:	movne	r3, #1
   1476c:	moveq	r3, #0
   14770:	uxtb	r3, r3
   14774:	b	1478c <__assert_fail@plt+0x3830>
   14778:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1477c:	cmp	r3, #1
   14780:	movne	r3, #1
   14784:	moveq	r3, #0
   14788:	uxtb	r3, r3
   1478c:	cmp	r3, #0
   14790:	bne	14ea8 <__assert_fail@plt+0x3f4c>
   14794:	ldr	r3, [fp, #-16]
   14798:	cmp	r3, #0
   1479c:	bne	14eb0 <__assert_fail@plt+0x3f54>
   147a0:	mov	r3, #1
   147a4:	strb	r3, [fp, #-42]	; 0xffffffd6
   147a8:	ldr	r3, [fp, #4]
   147ac:	cmp	r3, #2
   147b0:	bne	14eb8 <__assert_fail@plt+0x3f5c>
   147b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147b8:	cmp	r3, #0
   147bc:	beq	14eb8 <__assert_fail@plt+0x3f5c>
   147c0:	b	15340 <__assert_fail@plt+0x43e4>
   147c4:	mov	r3, #1
   147c8:	strb	r3, [fp, #-36]	; 0xffffffdc
   147cc:	mov	r3, #1
   147d0:	strb	r3, [fp, #-42]	; 0xffffffd6
   147d4:	ldr	r3, [fp, #4]
   147d8:	cmp	r3, #2
   147dc:	bne	14ec0 <__assert_fail@plt+0x3f64>
   147e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147e4:	cmp	r3, #0
   147e8:	bne	1531c <__assert_fail@plt+0x43c0>
   147ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147f0:	cmp	r3, #0
   147f4:	beq	14814 <__assert_fail@plt+0x38b8>
   147f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147fc:	cmp	r3, #0
   14800:	bne	14814 <__assert_fail@plt+0x38b8>
   14804:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14808:	str	r3, [fp, #-24]	; 0xffffffe8
   1480c:	mov	r3, #0
   14810:	str	r3, [fp, #-92]	; 0xffffffa4
   14814:	ldr	r2, [fp, #-20]	; 0xffffffec
   14818:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1481c:	cmp	r2, r3
   14820:	bcs	14838 <__assert_fail@plt+0x38dc>
   14824:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1482c:	add	r3, r2, r3
   14830:	mov	r2, #39	; 0x27
   14834:	strb	r2, [r3]
   14838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1483c:	add	r3, r3, #1
   14840:	str	r3, [fp, #-20]	; 0xffffffec
   14844:	ldr	r2, [fp, #-20]	; 0xffffffec
   14848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1484c:	cmp	r2, r3
   14850:	bcs	14868 <__assert_fail@plt+0x390c>
   14854:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1485c:	add	r3, r2, r3
   14860:	mov	r2, #92	; 0x5c
   14864:	strb	r2, [r3]
   14868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1486c:	add	r3, r3, #1
   14870:	str	r3, [fp, #-20]	; 0xffffffec
   14874:	ldr	r2, [fp, #-20]	; 0xffffffec
   14878:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1487c:	cmp	r2, r3
   14880:	bcs	14898 <__assert_fail@plt+0x393c>
   14884:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1488c:	add	r3, r2, r3
   14890:	mov	r2, #39	; 0x27
   14894:	strb	r2, [r3]
   14898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1489c:	add	r3, r3, #1
   148a0:	str	r3, [fp, #-20]	; 0xffffffec
   148a4:	mov	r3, #0
   148a8:	strb	r3, [fp, #-35]	; 0xffffffdd
   148ac:	b	14ec0 <__assert_fail@plt+0x3f64>
   148b0:	mov	r3, #1
   148b4:	strb	r3, [fp, #-42]	; 0xffffffd6
   148b8:	b	14ec4 <__assert_fail@plt+0x3f68>
   148bc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   148c0:	cmp	r3, #0
   148c4:	beq	14904 <__assert_fail@plt+0x39a8>
   148c8:	mov	r3, #1
   148cc:	str	r3, [fp, #-48]	; 0xffffffd0
   148d0:	bl	10e54 <__ctype_b_loc@plt>
   148d4:	mov	r3, r0
   148d8:	ldr	r2, [r3]
   148dc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   148e0:	lsl	r3, r3, #1
   148e4:	add	r3, r2, r3
   148e8:	ldrh	r3, [r3]
   148ec:	and	r3, r3, #16384	; 0x4000
   148f0:	cmp	r3, #0
   148f4:	movne	r3, #1
   148f8:	moveq	r3, #0
   148fc:	strb	r3, [fp, #-49]	; 0xffffffcf
   14900:	b	14b50 <__assert_fail@plt+0x3bf4>
   14904:	sub	r3, fp, #76	; 0x4c
   14908:	mov	r2, #8
   1490c:	mov	r1, #0
   14910:	mov	r0, r3
   14914:	bl	10eb4 <memset@plt>
   14918:	mov	r3, #0
   1491c:	str	r3, [fp, #-48]	; 0xffffffd0
   14920:	mov	r3, #1
   14924:	strb	r3, [fp, #-49]	; 0xffffffcf
   14928:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1492c:	cmn	r3, #1
   14930:	bne	14940 <__assert_fail@plt+0x39e4>
   14934:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14938:	bl	10e78 <strlen@plt>
   1493c:	str	r0, [fp, #-100]	; 0xffffff9c
   14940:	ldr	r2, [fp, #-16]
   14944:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14948:	add	r3, r2, r3
   1494c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14950:	add	r1, r2, r3
   14954:	ldr	r2, [fp, #-16]
   14958:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1495c:	add	r3, r2, r3
   14960:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14964:	sub	r2, r2, r3
   14968:	sub	r3, fp, #76	; 0x4c
   1496c:	sub	r0, fp, #80	; 0x50
   14970:	bl	18248 <__assert_fail@plt+0x72ec>
   14974:	str	r0, [fp, #-64]	; 0xffffffc0
   14978:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1497c:	cmp	r3, #0
   14980:	beq	14b44 <__assert_fail@plt+0x3be8>
   14984:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14988:	cmn	r3, #1
   1498c:	bne	1499c <__assert_fail@plt+0x3a40>
   14990:	mov	r3, #0
   14994:	strb	r3, [fp, #-49]	; 0xffffffcf
   14998:	b	14b50 <__assert_fail@plt+0x3bf4>
   1499c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   149a0:	cmn	r3, #2
   149a4:	bne	149fc <__assert_fail@plt+0x3aa0>
   149a8:	mov	r3, #0
   149ac:	strb	r3, [fp, #-49]	; 0xffffffcf
   149b0:	b	149c0 <__assert_fail@plt+0x3a64>
   149b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149b8:	add	r3, r3, #1
   149bc:	str	r3, [fp, #-48]	; 0xffffffd0
   149c0:	ldr	r2, [fp, #-16]
   149c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149c8:	add	r2, r2, r3
   149cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   149d0:	cmp	r2, r3
   149d4:	bcs	14b4c <__assert_fail@plt+0x3bf0>
   149d8:	ldr	r2, [fp, #-16]
   149dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149e0:	add	r3, r2, r3
   149e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   149e8:	add	r3, r2, r3
   149ec:	ldrb	r3, [r3]
   149f0:	cmp	r3, #0
   149f4:	bne	149b4 <__assert_fail@plt+0x3a58>
   149f8:	b	14b4c <__assert_fail@plt+0x3bf0>
   149fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a00:	cmp	r3, #0
   14a04:	beq	14af8 <__assert_fail@plt+0x3b9c>
   14a08:	ldr	r3, [fp, #4]
   14a0c:	cmp	r3, #2
   14a10:	bne	14af8 <__assert_fail@plt+0x3b9c>
   14a14:	mov	r3, #1
   14a18:	str	r3, [fp, #-56]	; 0xffffffc8
   14a1c:	b	14ae8 <__assert_fail@plt+0x3b8c>
   14a20:	ldr	r2, [fp, #-16]
   14a24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a28:	add	r2, r2, r3
   14a2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14a30:	add	r3, r2, r3
   14a34:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14a38:	add	r3, r2, r3
   14a3c:	ldrb	r3, [r3]
   14a40:	sub	r3, r3, #91	; 0x5b
   14a44:	cmp	r3, #33	; 0x21
   14a48:	ldrls	pc, [pc, r3, lsl #2]
   14a4c:	b	14ad8 <__assert_fail@plt+0x3b7c>
   14a50:	andeq	r5, r1, r4, lsr #6
   14a54:	andeq	r5, r1, r4, lsr #6
   14a58:	ldrdeq	r4, [r1], -r8
   14a5c:	andeq	r5, r1, r4, lsr #6
   14a60:	ldrdeq	r4, [r1], -r8
   14a64:	andeq	r5, r1, r4, lsr #6
   14a68:	ldrdeq	r4, [r1], -r8
   14a6c:	ldrdeq	r4, [r1], -r8
   14a70:	ldrdeq	r4, [r1], -r8
   14a74:	ldrdeq	r4, [r1], -r8
   14a78:	ldrdeq	r4, [r1], -r8
   14a7c:	ldrdeq	r4, [r1], -r8
   14a80:	ldrdeq	r4, [r1], -r8
   14a84:	ldrdeq	r4, [r1], -r8
   14a88:	ldrdeq	r4, [r1], -r8
   14a8c:	ldrdeq	r4, [r1], -r8
   14a90:	ldrdeq	r4, [r1], -r8
   14a94:	ldrdeq	r4, [r1], -r8
   14a98:	ldrdeq	r4, [r1], -r8
   14a9c:	ldrdeq	r4, [r1], -r8
   14aa0:	ldrdeq	r4, [r1], -r8
   14aa4:	ldrdeq	r4, [r1], -r8
   14aa8:	ldrdeq	r4, [r1], -r8
   14aac:	ldrdeq	r4, [r1], -r8
   14ab0:	ldrdeq	r4, [r1], -r8
   14ab4:	ldrdeq	r4, [r1], -r8
   14ab8:	ldrdeq	r4, [r1], -r8
   14abc:	ldrdeq	r4, [r1], -r8
   14ac0:	ldrdeq	r4, [r1], -r8
   14ac4:	ldrdeq	r4, [r1], -r8
   14ac8:	ldrdeq	r4, [r1], -r8
   14acc:	ldrdeq	r4, [r1], -r8
   14ad0:	ldrdeq	r4, [r1], -r8
   14ad4:	andeq	r5, r1, r4, lsr #6
   14ad8:	nop			; (mov r0, r0)
   14adc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ae0:	add	r3, r3, #1
   14ae4:	str	r3, [fp, #-56]	; 0xffffffc8
   14ae8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14aec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14af0:	cmp	r2, r3
   14af4:	bcc	14a20 <__assert_fail@plt+0x3ac4>
   14af8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14afc:	mov	r0, r3
   14b00:	bl	10db8 <iswprint@plt>
   14b04:	mov	r3, r0
   14b08:	cmp	r3, #0
   14b0c:	bne	14b18 <__assert_fail@plt+0x3bbc>
   14b10:	mov	r3, #0
   14b14:	strb	r3, [fp, #-49]	; 0xffffffcf
   14b18:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14b1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14b20:	add	r3, r2, r3
   14b24:	str	r3, [fp, #-48]	; 0xffffffd0
   14b28:	sub	r3, fp, #76	; 0x4c
   14b2c:	mov	r0, r3
   14b30:	bl	10d64 <mbsinit@plt>
   14b34:	mov	r3, r0
   14b38:	cmp	r3, #0
   14b3c:	beq	14940 <__assert_fail@plt+0x39e4>
   14b40:	b	14b50 <__assert_fail@plt+0x3bf4>
   14b44:	nop			; (mov r0, r0)
   14b48:	b	14b50 <__assert_fail@plt+0x3bf4>
   14b4c:	nop			; (mov r0, r0)
   14b50:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14b54:	strb	r3, [fp, #-42]	; 0xffffffd6
   14b58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b5c:	cmp	r3, #1
   14b60:	bhi	14b84 <__assert_fail@plt+0x3c28>
   14b64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14b68:	cmp	r3, #0
   14b6c:	beq	14ec4 <__assert_fail@plt+0x3f68>
   14b70:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14b74:	eor	r3, r3, #1
   14b78:	uxtb	r3, r3
   14b7c:	cmp	r3, #0
   14b80:	beq	14ec4 <__assert_fail@plt+0x3f68>
   14b84:	ldr	r2, [fp, #-16]
   14b88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b8c:	add	r3, r2, r3
   14b90:	str	r3, [fp, #-68]	; 0xffffffbc
   14b94:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14b98:	cmp	r3, #0
   14b9c:	beq	14d5c <__assert_fail@plt+0x3e00>
   14ba0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14ba4:	eor	r3, r3, #1
   14ba8:	uxtb	r3, r3
   14bac:	cmp	r3, #0
   14bb0:	beq	14d5c <__assert_fail@plt+0x3e00>
   14bb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14bb8:	cmp	r3, #0
   14bbc:	bne	1532c <__assert_fail@plt+0x43d0>
   14bc0:	mov	r3, #1
   14bc4:	strb	r3, [fp, #-41]	; 0xffffffd7
   14bc8:	ldr	r3, [fp, #4]
   14bcc:	cmp	r3, #2
   14bd0:	bne	14c80 <__assert_fail@plt+0x3d24>
   14bd4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14bd8:	eor	r3, r3, #1
   14bdc:	uxtb	r3, r3
   14be0:	cmp	r3, #0
   14be4:	beq	14c80 <__assert_fail@plt+0x3d24>
   14be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bf0:	cmp	r2, r3
   14bf4:	bcs	14c0c <__assert_fail@plt+0x3cb0>
   14bf8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c00:	add	r3, r2, r3
   14c04:	mov	r2, #39	; 0x27
   14c08:	strb	r2, [r3]
   14c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c10:	add	r3, r3, #1
   14c14:	str	r3, [fp, #-20]	; 0xffffffec
   14c18:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c20:	cmp	r2, r3
   14c24:	bcs	14c3c <__assert_fail@plt+0x3ce0>
   14c28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c30:	add	r3, r2, r3
   14c34:	mov	r2, #36	; 0x24
   14c38:	strb	r2, [r3]
   14c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c40:	add	r3, r3, #1
   14c44:	str	r3, [fp, #-20]	; 0xffffffec
   14c48:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c50:	cmp	r2, r3
   14c54:	bcs	14c6c <__assert_fail@plt+0x3d10>
   14c58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c60:	add	r3, r2, r3
   14c64:	mov	r2, #39	; 0x27
   14c68:	strb	r2, [r3]
   14c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c70:	add	r3, r3, #1
   14c74:	str	r3, [fp, #-20]	; 0xffffffec
   14c78:	mov	r3, #1
   14c7c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14c80:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c88:	cmp	r2, r3
   14c8c:	bcs	14ca4 <__assert_fail@plt+0x3d48>
   14c90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c98:	add	r3, r2, r3
   14c9c:	mov	r2, #92	; 0x5c
   14ca0:	strb	r2, [r3]
   14ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ca8:	add	r3, r3, #1
   14cac:	str	r3, [fp, #-20]	; 0xffffffec
   14cb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14cb8:	cmp	r2, r3
   14cbc:	bcs	14ce4 <__assert_fail@plt+0x3d88>
   14cc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14cc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cc8:	add	r3, r2, r3
   14ccc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14cd0:	lsr	r2, r2, #6
   14cd4:	uxtb	r2, r2
   14cd8:	add	r2, r2, #48	; 0x30
   14cdc:	uxtb	r2, r2
   14ce0:	strb	r2, [r3]
   14ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ce8:	add	r3, r3, #1
   14cec:	str	r3, [fp, #-20]	; 0xffffffec
   14cf0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cf4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14cf8:	cmp	r2, r3
   14cfc:	bcs	14d2c <__assert_fail@plt+0x3dd0>
   14d00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d08:	add	r3, r2, r3
   14d0c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14d10:	lsr	r2, r2, #3
   14d14:	uxtb	r2, r2
   14d18:	and	r2, r2, #7
   14d1c:	uxtb	r2, r2
   14d20:	add	r2, r2, #48	; 0x30
   14d24:	uxtb	r2, r2
   14d28:	strb	r2, [r3]
   14d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d30:	add	r3, r3, #1
   14d34:	str	r3, [fp, #-20]	; 0xffffffec
   14d38:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14d3c:	and	r3, r3, #7
   14d40:	uxtb	r3, r3
   14d44:	add	r3, r3, #48	; 0x30
   14d48:	strb	r3, [fp, #-38]	; 0xffffffda
   14d4c:	b	14da0 <__assert_fail@plt+0x3e44>
   14d50:	andeq	r9, r1, r0, lsr #20
   14d54:	andeq	r9, r1, r8, lsr #20
   14d58:	andeq	r9, r1, r4, lsr #20
   14d5c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14d60:	cmp	r3, #0
   14d64:	beq	14da0 <__assert_fail@plt+0x3e44>
   14d68:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d70:	cmp	r2, r3
   14d74:	bcs	14d8c <__assert_fail@plt+0x3e30>
   14d78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d80:	add	r3, r2, r3
   14d84:	mov	r2, #92	; 0x5c
   14d88:	strb	r2, [r3]
   14d8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d90:	add	r3, r3, #1
   14d94:	str	r3, [fp, #-20]	; 0xffffffec
   14d98:	mov	r3, #0
   14d9c:	strb	r3, [fp, #-40]	; 0xffffffd8
   14da0:	ldr	r3, [fp, #-16]
   14da4:	add	r2, r3, #1
   14da8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14dac:	cmp	r2, r3
   14db0:	bcs	14e90 <__assert_fail@plt+0x3f34>
   14db4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14db8:	cmp	r3, #0
   14dbc:	beq	14e3c <__assert_fail@plt+0x3ee0>
   14dc0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14dc4:	eor	r3, r3, #1
   14dc8:	uxtb	r3, r3
   14dcc:	cmp	r3, #0
   14dd0:	beq	14e3c <__assert_fail@plt+0x3ee0>
   14dd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14dd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ddc:	cmp	r2, r3
   14de0:	bcs	14df8 <__assert_fail@plt+0x3e9c>
   14de4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dec:	add	r3, r2, r3
   14df0:	mov	r2, #39	; 0x27
   14df4:	strb	r2, [r3]
   14df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dfc:	add	r3, r3, #1
   14e00:	str	r3, [fp, #-20]	; 0xffffffec
   14e04:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e0c:	cmp	r2, r3
   14e10:	bcs	14e28 <__assert_fail@plt+0x3ecc>
   14e14:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e1c:	add	r3, r2, r3
   14e20:	mov	r2, #39	; 0x27
   14e24:	strb	r2, [r3]
   14e28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e2c:	add	r3, r3, #1
   14e30:	str	r3, [fp, #-20]	; 0xffffffec
   14e34:	mov	r3, #0
   14e38:	strb	r3, [fp, #-35]	; 0xffffffdd
   14e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e44:	cmp	r2, r3
   14e48:	bcs	14e60 <__assert_fail@plt+0x3f04>
   14e4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e54:	add	r3, r2, r3
   14e58:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14e5c:	strb	r2, [r3]
   14e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e64:	add	r3, r3, #1
   14e68:	str	r3, [fp, #-20]	; 0xffffffec
   14e6c:	ldr	r3, [fp, #-16]
   14e70:	add	r3, r3, #1
   14e74:	str	r3, [fp, #-16]
   14e78:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14e7c:	ldr	r3, [fp, #-16]
   14e80:	add	r3, r2, r3
   14e84:	ldrb	r3, [r3]
   14e88:	strb	r3, [fp, #-38]	; 0xffffffda
   14e8c:	b	14b94 <__assert_fail@plt+0x3c38>
   14e90:	nop			; (mov r0, r0)
   14e94:	b	15060 <__assert_fail@plt+0x4104>
   14e98:	nop			; (mov r0, r0)
   14e9c:	b	14ec4 <__assert_fail@plt+0x3f68>
   14ea0:	nop			; (mov r0, r0)
   14ea4:	b	14ec4 <__assert_fail@plt+0x3f68>
   14ea8:	nop			; (mov r0, r0)
   14eac:	b	14ec4 <__assert_fail@plt+0x3f68>
   14eb0:	nop			; (mov r0, r0)
   14eb4:	b	14ec4 <__assert_fail@plt+0x3f68>
   14eb8:	nop			; (mov r0, r0)
   14ebc:	b	14ec4 <__assert_fail@plt+0x3f68>
   14ec0:	nop			; (mov r0, r0)
   14ec4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14ec8:	eor	r3, r3, #1
   14ecc:	uxtb	r3, r3
   14ed0:	cmp	r3, #0
   14ed4:	bne	14ee4 <__assert_fail@plt+0x3f88>
   14ed8:	ldr	r3, [fp, #4]
   14edc:	cmp	r3, #2
   14ee0:	bne	14ef8 <__assert_fail@plt+0x3f9c>
   14ee4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14ee8:	eor	r3, r3, #1
   14eec:	uxtb	r3, r3
   14ef0:	cmp	r3, #0
   14ef4:	bne	14f38 <__assert_fail@plt+0x3fdc>
   14ef8:	ldr	r3, [fp, #12]
   14efc:	cmp	r3, #0
   14f00:	beq	14f38 <__assert_fail@plt+0x3fdc>
   14f04:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f08:	lsr	r3, r3, #5
   14f0c:	uxtb	r3, r3
   14f10:	lsl	r3, r3, #2
   14f14:	ldr	r2, [fp, #12]
   14f18:	add	r3, r2, r3
   14f1c:	ldr	r2, [r3]
   14f20:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f24:	and	r3, r3, #31
   14f28:	lsr	r3, r2, r3
   14f2c:	and	r3, r3, #1
   14f30:	cmp	r3, #0
   14f34:	bne	14f4c <__assert_fail@plt+0x3ff0>
   14f38:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14f3c:	eor	r3, r3, #1
   14f40:	uxtb	r3, r3
   14f44:	cmp	r3, #0
   14f48:	bne	1505c <__assert_fail@plt+0x4100>
   14f4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f50:	cmp	r3, #0
   14f54:	bne	15334 <__assert_fail@plt+0x43d8>
   14f58:	mov	r3, #1
   14f5c:	strb	r3, [fp, #-41]	; 0xffffffd7
   14f60:	ldr	r3, [fp, #4]
   14f64:	cmp	r3, #2
   14f68:	bne	15018 <__assert_fail@plt+0x40bc>
   14f6c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14f70:	eor	r3, r3, #1
   14f74:	uxtb	r3, r3
   14f78:	cmp	r3, #0
   14f7c:	beq	15018 <__assert_fail@plt+0x40bc>
   14f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f88:	cmp	r2, r3
   14f8c:	bcs	14fa4 <__assert_fail@plt+0x4048>
   14f90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f98:	add	r3, r2, r3
   14f9c:	mov	r2, #39	; 0x27
   14fa0:	strb	r2, [r3]
   14fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa8:	add	r3, r3, #1
   14fac:	str	r3, [fp, #-20]	; 0xffffffec
   14fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14fb8:	cmp	r2, r3
   14fbc:	bcs	14fd4 <__assert_fail@plt+0x4078>
   14fc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc8:	add	r3, r2, r3
   14fcc:	mov	r2, #36	; 0x24
   14fd0:	strb	r2, [r3]
   14fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fd8:	add	r3, r3, #1
   14fdc:	str	r3, [fp, #-20]	; 0xffffffec
   14fe0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fe4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14fe8:	cmp	r2, r3
   14fec:	bcs	15004 <__assert_fail@plt+0x40a8>
   14ff0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ff8:	add	r3, r2, r3
   14ffc:	mov	r2, #39	; 0x27
   15000:	strb	r2, [r3]
   15004:	ldr	r3, [fp, #-20]	; 0xffffffec
   15008:	add	r3, r3, #1
   1500c:	str	r3, [fp, #-20]	; 0xffffffec
   15010:	mov	r3, #1
   15014:	strb	r3, [fp, #-35]	; 0xffffffdd
   15018:	ldr	r2, [fp, #-20]	; 0xffffffec
   1501c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15020:	cmp	r2, r3
   15024:	bcs	1503c <__assert_fail@plt+0x40e0>
   15028:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1502c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15030:	add	r3, r2, r3
   15034:	mov	r2, #92	; 0x5c
   15038:	strb	r2, [r3]
   1503c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15040:	add	r3, r3, #1
   15044:	str	r3, [fp, #-20]	; 0xffffffec
   15048:	b	15060 <__assert_fail@plt+0x4104>
   1504c:	nop			; (mov r0, r0)
   15050:	b	15060 <__assert_fail@plt+0x4104>
   15054:	nop			; (mov r0, r0)
   15058:	b	15060 <__assert_fail@plt+0x4104>
   1505c:	nop			; (mov r0, r0)
   15060:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15064:	cmp	r3, #0
   15068:	beq	150e8 <__assert_fail@plt+0x418c>
   1506c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15070:	eor	r3, r3, #1
   15074:	uxtb	r3, r3
   15078:	cmp	r3, #0
   1507c:	beq	150e8 <__assert_fail@plt+0x418c>
   15080:	ldr	r2, [fp, #-20]	; 0xffffffec
   15084:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15088:	cmp	r2, r3
   1508c:	bcs	150a4 <__assert_fail@plt+0x4148>
   15090:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15094:	ldr	r3, [fp, #-20]	; 0xffffffec
   15098:	add	r3, r2, r3
   1509c:	mov	r2, #39	; 0x27
   150a0:	strb	r2, [r3]
   150a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150a8:	add	r3, r3, #1
   150ac:	str	r3, [fp, #-20]	; 0xffffffec
   150b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   150b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150b8:	cmp	r2, r3
   150bc:	bcs	150d4 <__assert_fail@plt+0x4178>
   150c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150c8:	add	r3, r2, r3
   150cc:	mov	r2, #39	; 0x27
   150d0:	strb	r2, [r3]
   150d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150d8:	add	r3, r3, #1
   150dc:	str	r3, [fp, #-20]	; 0xffffffec
   150e0:	mov	r3, #0
   150e4:	strb	r3, [fp, #-35]	; 0xffffffdd
   150e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   150ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150f0:	cmp	r2, r3
   150f4:	bcs	1510c <__assert_fail@plt+0x41b0>
   150f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15100:	add	r3, r2, r3
   15104:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15108:	strb	r2, [r3]
   1510c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15110:	add	r3, r3, #1
   15114:	str	r3, [fp, #-20]	; 0xffffffec
   15118:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1511c:	eor	r3, r3, #1
   15120:	uxtb	r3, r3
   15124:	cmp	r3, #0
   15128:	beq	15134 <__assert_fail@plt+0x41d8>
   1512c:	mov	r3, #0
   15130:	strb	r3, [fp, #-37]	; 0xffffffdb
   15134:	ldr	r3, [fp, #-16]
   15138:	add	r3, r3, #1
   1513c:	str	r3, [fp, #-16]
   15140:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15144:	cmn	r3, #1
   15148:	bne	15170 <__assert_fail@plt+0x4214>
   1514c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15150:	ldr	r3, [fp, #-16]
   15154:	add	r3, r2, r3
   15158:	ldrb	r3, [r3]
   1515c:	cmp	r3, #0
   15160:	movne	r3, #1
   15164:	moveq	r3, #0
   15168:	uxtb	r3, r3
   1516c:	b	15188 <__assert_fail@plt+0x422c>
   15170:	ldr	r2, [fp, #-16]
   15174:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15178:	cmp	r2, r3
   1517c:	movne	r3, #1
   15180:	moveq	r3, #0
   15184:	uxtb	r3, r3
   15188:	cmp	r3, #0
   1518c:	bne	13fb4 <__assert_fail@plt+0x3058>
   15190:	ldr	r3, [fp, #-20]	; 0xffffffec
   15194:	cmp	r3, #0
   15198:	bne	151b4 <__assert_fail@plt+0x4258>
   1519c:	ldr	r3, [fp, #4]
   151a0:	cmp	r3, #2
   151a4:	bne	151b4 <__assert_fail@plt+0x4258>
   151a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   151ac:	cmp	r3, #0
   151b0:	bne	1533c <__assert_fail@plt+0x43e0>
   151b4:	ldr	r3, [fp, #4]
   151b8:	cmp	r3, #2
   151bc:	bne	1525c <__assert_fail@plt+0x4300>
   151c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   151c4:	eor	r3, r3, #1
   151c8:	uxtb	r3, r3
   151cc:	cmp	r3, #0
   151d0:	beq	1525c <__assert_fail@plt+0x4300>
   151d4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   151d8:	cmp	r3, #0
   151dc:	beq	1525c <__assert_fail@plt+0x4300>
   151e0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   151e4:	cmp	r3, #0
   151e8:	beq	15230 <__assert_fail@plt+0x42d4>
   151ec:	ldr	r3, [fp, #20]
   151f0:	str	r3, [sp, #16]
   151f4:	ldr	r3, [fp, #16]
   151f8:	str	r3, [sp, #12]
   151fc:	ldr	r3, [fp, #12]
   15200:	str	r3, [sp, #8]
   15204:	ldr	r3, [fp, #8]
   15208:	str	r3, [sp, #4]
   1520c:	mov	r3, #5
   15210:	str	r3, [sp]
   15214:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15218:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1521c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15220:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15224:	bl	13d04 <__assert_fail@plt+0x2da8>
   15228:	mov	r3, r0
   1522c:	b	153a4 <__assert_fail@plt+0x4448>
   15230:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15234:	cmp	r3, #0
   15238:	bne	1525c <__assert_fail@plt+0x4300>
   1523c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15240:	cmp	r3, #0
   15244:	beq	1525c <__assert_fail@plt+0x4300>
   15248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1524c:	str	r3, [fp, #-92]	; 0xffffffa4
   15250:	mov	r3, #0
   15254:	str	r3, [fp, #-20]	; 0xffffffec
   15258:	b	13d90 <__assert_fail@plt+0x2e34>
   1525c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15260:	cmp	r3, #0
   15264:	beq	152d0 <__assert_fail@plt+0x4374>
   15268:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1526c:	eor	r3, r3, #1
   15270:	uxtb	r3, r3
   15274:	cmp	r3, #0
   15278:	beq	152d0 <__assert_fail@plt+0x4374>
   1527c:	b	152c0 <__assert_fail@plt+0x4364>
   15280:	ldr	r2, [fp, #-20]	; 0xffffffec
   15284:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15288:	cmp	r2, r3
   1528c:	bcs	152a8 <__assert_fail@plt+0x434c>
   15290:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15294:	ldr	r3, [fp, #-20]	; 0xffffffec
   15298:	add	r3, r2, r3
   1529c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   152a0:	ldrb	r2, [r2]
   152a4:	strb	r2, [r3]
   152a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   152ac:	add	r3, r3, #1
   152b0:	str	r3, [fp, #-20]	; 0xffffffec
   152b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152b8:	add	r3, r3, #1
   152bc:	str	r3, [fp, #-28]	; 0xffffffe4
   152c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152c4:	ldrb	r3, [r3]
   152c8:	cmp	r3, #0
   152cc:	bne	15280 <__assert_fail@plt+0x4324>
   152d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   152d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152d8:	cmp	r2, r3
   152dc:	bcs	152f4 <__assert_fail@plt+0x4398>
   152e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   152e8:	add	r3, r2, r3
   152ec:	mov	r2, #0
   152f0:	strb	r2, [r3]
   152f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   152f8:	b	153a4 <__assert_fail@plt+0x4448>
   152fc:	nop			; (mov r0, r0)
   15300:	b	15340 <__assert_fail@plt+0x43e4>
   15304:	nop			; (mov r0, r0)
   15308:	b	15340 <__assert_fail@plt+0x43e4>
   1530c:	nop			; (mov r0, r0)
   15310:	b	15340 <__assert_fail@plt+0x43e4>
   15314:	nop			; (mov r0, r0)
   15318:	b	15340 <__assert_fail@plt+0x43e4>
   1531c:	nop			; (mov r0, r0)
   15320:	b	15340 <__assert_fail@plt+0x43e4>
   15324:	nop			; (mov r0, r0)
   15328:	b	15340 <__assert_fail@plt+0x43e4>
   1532c:	nop			; (mov r0, r0)
   15330:	b	15340 <__assert_fail@plt+0x43e4>
   15334:	nop			; (mov r0, r0)
   15338:	b	15340 <__assert_fail@plt+0x43e4>
   1533c:	nop			; (mov r0, r0)
   15340:	ldr	r3, [fp, #4]
   15344:	cmp	r3, #2
   15348:	bne	15360 <__assert_fail@plt+0x4404>
   1534c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15350:	cmp	r3, #0
   15354:	beq	15360 <__assert_fail@plt+0x4404>
   15358:	mov	r3, #4
   1535c:	str	r3, [fp, #4]
   15360:	ldr	r3, [fp, #8]
   15364:	bic	r3, r3, #2
   15368:	ldr	r2, [fp, #20]
   1536c:	str	r2, [sp, #16]
   15370:	ldr	r2, [fp, #16]
   15374:	str	r2, [sp, #12]
   15378:	mov	r2, #0
   1537c:	str	r2, [sp, #8]
   15380:	str	r3, [sp, #4]
   15384:	ldr	r3, [fp, #4]
   15388:	str	r3, [sp]
   1538c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15390:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15394:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15398:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1539c:	bl	13d04 <__assert_fail@plt+0x2da8>
   153a0:	mov	r3, r0
   153a4:	mov	r0, r3
   153a8:	sub	sp, fp, #8
   153ac:	pop	{r4, fp, pc}
   153b0:	push	{fp, lr}
   153b4:	add	fp, sp, #4
   153b8:	sub	sp, sp, #56	; 0x38
   153bc:	str	r0, [fp, #-24]	; 0xffffffe8
   153c0:	str	r1, [fp, #-28]	; 0xffffffe4
   153c4:	str	r2, [fp, #-32]	; 0xffffffe0
   153c8:	str	r3, [fp, #-36]	; 0xffffffdc
   153cc:	ldr	r3, [fp, #4]
   153d0:	cmp	r3, #0
   153d4:	beq	153e0 <__assert_fail@plt+0x4484>
   153d8:	ldr	r3, [fp, #4]
   153dc:	b	153e4 <__assert_fail@plt+0x4488>
   153e0:	ldr	r3, [pc, #132]	; 1546c <__assert_fail@plt+0x4510>
   153e4:	str	r3, [fp, #-8]
   153e8:	bl	10e9c <__errno_location@plt>
   153ec:	mov	r3, r0
   153f0:	ldr	r3, [r3]
   153f4:	str	r3, [fp, #-12]
   153f8:	ldr	r3, [fp, #-8]
   153fc:	ldr	r3, [r3]
   15400:	ldr	r2, [fp, #-8]
   15404:	ldr	r2, [r2, #4]
   15408:	ldr	r1, [fp, #-8]
   1540c:	add	r1, r1, #8
   15410:	ldr	r0, [fp, #-8]
   15414:	ldr	r0, [r0, #40]	; 0x28
   15418:	ldr	ip, [fp, #-8]
   1541c:	ldr	ip, [ip, #44]	; 0x2c
   15420:	str	ip, [sp, #16]
   15424:	str	r0, [sp, #12]
   15428:	str	r1, [sp, #8]
   1542c:	str	r2, [sp, #4]
   15430:	str	r3, [sp]
   15434:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15438:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1543c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15440:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15444:	bl	13d04 <__assert_fail@plt+0x2da8>
   15448:	str	r0, [fp, #-16]
   1544c:	bl	10e9c <__errno_location@plt>
   15450:	mov	r2, r0
   15454:	ldr	r3, [fp, #-12]
   15458:	str	r3, [r2]
   1545c:	ldr	r3, [fp, #-16]
   15460:	mov	r0, r3
   15464:	sub	sp, fp, #4
   15468:	pop	{fp, pc}
   1546c:	muleq	r3, ip, r2
   15470:	push	{fp, lr}
   15474:	add	fp, sp, #4
   15478:	sub	sp, sp, #16
   1547c:	str	r0, [fp, #-8]
   15480:	str	r1, [fp, #-12]
   15484:	str	r2, [fp, #-16]
   15488:	ldr	r3, [fp, #-16]
   1548c:	mov	r2, #0
   15490:	ldr	r1, [fp, #-12]
   15494:	ldr	r0, [fp, #-8]
   15498:	bl	154ac <__assert_fail@plt+0x4550>
   1549c:	mov	r3, r0
   154a0:	mov	r0, r3
   154a4:	sub	sp, fp, #4
   154a8:	pop	{fp, pc}
   154ac:	push	{fp, lr}
   154b0:	add	fp, sp, #4
   154b4:	sub	sp, sp, #64	; 0x40
   154b8:	str	r0, [fp, #-32]	; 0xffffffe0
   154bc:	str	r1, [fp, #-36]	; 0xffffffdc
   154c0:	str	r2, [fp, #-40]	; 0xffffffd8
   154c4:	str	r3, [fp, #-44]	; 0xffffffd4
   154c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154cc:	cmp	r3, #0
   154d0:	beq	154dc <__assert_fail@plt+0x4580>
   154d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154d8:	b	154e0 <__assert_fail@plt+0x4584>
   154dc:	ldr	r3, [pc, #292]	; 15608 <__assert_fail@plt+0x46ac>
   154e0:	str	r3, [fp, #-8]
   154e4:	bl	10e9c <__errno_location@plt>
   154e8:	mov	r3, r0
   154ec:	ldr	r3, [r3]
   154f0:	str	r3, [fp, #-12]
   154f4:	ldr	r3, [fp, #-8]
   154f8:	ldr	r3, [r3, #4]
   154fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15500:	cmp	r2, #0
   15504:	moveq	r2, #1
   15508:	movne	r2, #0
   1550c:	uxtb	r2, r2
   15510:	orr	r3, r3, r2
   15514:	str	r3, [fp, #-16]
   15518:	ldr	r3, [fp, #-8]
   1551c:	ldr	r3, [r3]
   15520:	ldr	r2, [fp, #-8]
   15524:	add	r2, r2, #8
   15528:	ldr	r1, [fp, #-8]
   1552c:	ldr	r1, [r1, #40]	; 0x28
   15530:	ldr	r0, [fp, #-8]
   15534:	ldr	r0, [r0, #44]	; 0x2c
   15538:	str	r0, [sp, #16]
   1553c:	str	r1, [sp, #12]
   15540:	str	r2, [sp, #8]
   15544:	ldr	r2, [fp, #-16]
   15548:	str	r2, [sp, #4]
   1554c:	str	r3, [sp]
   15550:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15554:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15558:	mov	r1, #0
   1555c:	mov	r0, #0
   15560:	bl	13d04 <__assert_fail@plt+0x2da8>
   15564:	mov	r3, r0
   15568:	add	r3, r3, #1
   1556c:	str	r3, [fp, #-20]	; 0xffffffec
   15570:	ldr	r0, [fp, #-20]	; 0xffffffec
   15574:	bl	167a8 <__assert_fail@plt+0x584c>
   15578:	mov	r3, r0
   1557c:	str	r3, [fp, #-24]	; 0xffffffe8
   15580:	ldr	r3, [fp, #-8]
   15584:	ldr	r3, [r3]
   15588:	ldr	r2, [fp, #-8]
   1558c:	add	r2, r2, #8
   15590:	ldr	r1, [fp, #-8]
   15594:	ldr	r1, [r1, #40]	; 0x28
   15598:	ldr	r0, [fp, #-8]
   1559c:	ldr	r0, [r0, #44]	; 0x2c
   155a0:	str	r0, [sp, #16]
   155a4:	str	r1, [sp, #12]
   155a8:	str	r2, [sp, #8]
   155ac:	ldr	r2, [fp, #-16]
   155b0:	str	r2, [sp, #4]
   155b4:	str	r3, [sp]
   155b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   155bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   155c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   155c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155c8:	bl	13d04 <__assert_fail@plt+0x2da8>
   155cc:	bl	10e9c <__errno_location@plt>
   155d0:	mov	r2, r0
   155d4:	ldr	r3, [fp, #-12]
   155d8:	str	r3, [r2]
   155dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   155e0:	cmp	r3, #0
   155e4:	beq	155f8 <__assert_fail@plt+0x469c>
   155e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   155ec:	sub	r2, r3, #1
   155f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   155f4:	str	r2, [r3]
   155f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155fc:	mov	r0, r3
   15600:	sub	sp, fp, #4
   15604:	pop	{fp, pc}
   15608:	muleq	r3, ip, r2
   1560c:	push	{fp, lr}
   15610:	add	fp, sp, #4
   15614:	sub	sp, sp, #8
   15618:	ldr	r3, [pc, #196]	; 156e4 <__assert_fail@plt+0x4788>
   1561c:	ldr	r3, [r3]
   15620:	str	r3, [fp, #-12]
   15624:	mov	r3, #1
   15628:	str	r3, [fp, #-8]
   1562c:	b	15658 <__assert_fail@plt+0x46fc>
   15630:	ldr	r3, [fp, #-8]
   15634:	lsl	r3, r3, #3
   15638:	ldr	r2, [fp, #-12]
   1563c:	add	r3, r2, r3
   15640:	ldr	r3, [r3, #4]
   15644:	mov	r0, r3
   15648:	bl	18024 <__assert_fail@plt+0x70c8>
   1564c:	ldr	r3, [fp, #-8]
   15650:	add	r3, r3, #1
   15654:	str	r3, [fp, #-8]
   15658:	ldr	r3, [pc, #136]	; 156e8 <__assert_fail@plt+0x478c>
   1565c:	ldr	r3, [r3]
   15660:	ldr	r2, [fp, #-8]
   15664:	cmp	r2, r3
   15668:	blt	15630 <__assert_fail@plt+0x46d4>
   1566c:	ldr	r3, [fp, #-12]
   15670:	ldr	r3, [r3, #4]
   15674:	ldr	r2, [pc, #112]	; 156ec <__assert_fail@plt+0x4790>
   15678:	cmp	r3, r2
   1567c:	beq	156a8 <__assert_fail@plt+0x474c>
   15680:	ldr	r3, [fp, #-12]
   15684:	ldr	r3, [r3, #4]
   15688:	mov	r0, r3
   1568c:	bl	18024 <__assert_fail@plt+0x70c8>
   15690:	ldr	r3, [pc, #88]	; 156f0 <__assert_fail@plt+0x4794>
   15694:	mov	r2, #256	; 0x100
   15698:	str	r2, [r3]
   1569c:	ldr	r3, [pc, #76]	; 156f0 <__assert_fail@plt+0x4794>
   156a0:	ldr	r2, [pc, #68]	; 156ec <__assert_fail@plt+0x4790>
   156a4:	str	r2, [r3, #4]
   156a8:	ldr	r3, [fp, #-12]
   156ac:	ldr	r2, [pc, #60]	; 156f0 <__assert_fail@plt+0x4794>
   156b0:	cmp	r3, r2
   156b4:	beq	156cc <__assert_fail@plt+0x4770>
   156b8:	ldr	r0, [fp, #-12]
   156bc:	bl	18024 <__assert_fail@plt+0x70c8>
   156c0:	ldr	r3, [pc, #28]	; 156e4 <__assert_fail@plt+0x4788>
   156c4:	ldr	r2, [pc, #36]	; 156f0 <__assert_fail@plt+0x4794>
   156c8:	str	r2, [r3]
   156cc:	ldr	r3, [pc, #20]	; 156e8 <__assert_fail@plt+0x478c>
   156d0:	mov	r2, #1
   156d4:	str	r2, [r3]
   156d8:	nop			; (mov r0, r0)
   156dc:	sub	sp, fp, #4
   156e0:	pop	{fp, pc}
   156e4:	andeq	sl, r2, r4, lsl #2
   156e8:	strdeq	sl, [r2], -r8
   156ec:	andeq	r2, r3, ip, asr #5
   156f0:	strdeq	sl, [r2], -ip
   156f4:	push	{r4, fp, lr}
   156f8:	add	fp, sp, #8
   156fc:	sub	sp, sp, #84	; 0x54
   15700:	str	r0, [fp, #-56]	; 0xffffffc8
   15704:	str	r1, [fp, #-60]	; 0xffffffc4
   15708:	str	r2, [fp, #-64]	; 0xffffffc0
   1570c:	str	r3, [fp, #-68]	; 0xffffffbc
   15710:	bl	10e9c <__errno_location@plt>
   15714:	mov	r3, r0
   15718:	ldr	r3, [r3]
   1571c:	str	r3, [fp, #-24]	; 0xffffffe8
   15720:	ldr	r3, [pc, #640]	; 159a8 <__assert_fail@plt+0x4a4c>
   15724:	ldr	r3, [r3]
   15728:	str	r3, [fp, #-16]
   1572c:	mvn	r3, #-2147483648	; 0x80000000
   15730:	str	r3, [fp, #-28]	; 0xffffffe4
   15734:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15738:	cmp	r3, #0
   1573c:	blt	15750 <__assert_fail@plt+0x47f4>
   15740:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15744:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15748:	cmp	r2, r3
   1574c:	blt	15754 <__assert_fail@plt+0x47f8>
   15750:	bl	10f44 <abort@plt>
   15754:	ldr	r3, [pc, #592]	; 159ac <__assert_fail@plt+0x4a50>
   15758:	ldr	r2, [r3]
   1575c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15760:	cmp	r2, r3
   15764:	bgt	15838 <__assert_fail@plt+0x48dc>
   15768:	ldr	r3, [fp, #-16]
   1576c:	ldr	r2, [pc, #572]	; 159b0 <__assert_fail@plt+0x4a54>
   15770:	cmp	r3, r2
   15774:	moveq	r3, #1
   15778:	movne	r3, #0
   1577c:	strb	r3, [fp, #-29]	; 0xffffffe3
   15780:	ldr	r3, [pc, #548]	; 159ac <__assert_fail@plt+0x4a50>
   15784:	ldr	r3, [r3]
   15788:	str	r3, [fp, #-48]	; 0xffffffd0
   1578c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   15790:	cmp	r3, #0
   15794:	beq	157a0 <__assert_fail@plt+0x4844>
   15798:	mov	r0, #0
   1579c:	b	157a4 <__assert_fail@plt+0x4848>
   157a0:	ldr	r0, [fp, #-16]
   157a4:	ldr	r3, [pc, #512]	; 159ac <__assert_fail@plt+0x4a50>
   157a8:	ldr	r3, [r3]
   157ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   157b0:	sub	r3, r2, r3
   157b4:	add	r2, r3, #1
   157b8:	sub	r1, fp, #48	; 0x30
   157bc:	mov	r3, #8
   157c0:	str	r3, [sp]
   157c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157c8:	bl	16ac8 <__assert_fail@plt+0x5b6c>
   157cc:	str	r0, [fp, #-16]
   157d0:	ldr	r2, [pc, #464]	; 159a8 <__assert_fail@plt+0x4a4c>
   157d4:	ldr	r3, [fp, #-16]
   157d8:	str	r3, [r2]
   157dc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   157e0:	cmp	r3, #0
   157e4:	beq	157f8 <__assert_fail@plt+0x489c>
   157e8:	ldr	r3, [fp, #-16]
   157ec:	ldr	r2, [pc, #444]	; 159b0 <__assert_fail@plt+0x4a54>
   157f0:	ldm	r2, {r0, r1}
   157f4:	stm	r3, {r0, r1}
   157f8:	ldr	r3, [pc, #428]	; 159ac <__assert_fail@plt+0x4a50>
   157fc:	ldr	r3, [r3]
   15800:	lsl	r3, r3, #3
   15804:	ldr	r2, [fp, #-16]
   15808:	add	r0, r2, r3
   1580c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15810:	ldr	r3, [pc, #404]	; 159ac <__assert_fail@plt+0x4a50>
   15814:	ldr	r3, [r3]
   15818:	sub	r3, r2, r3
   1581c:	lsl	r3, r3, #3
   15820:	mov	r2, r3
   15824:	mov	r1, #0
   15828:	bl	10eb4 <memset@plt>
   1582c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15830:	ldr	r2, [pc, #372]	; 159ac <__assert_fail@plt+0x4a50>
   15834:	str	r3, [r2]
   15838:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1583c:	lsl	r3, r3, #3
   15840:	ldr	r2, [fp, #-16]
   15844:	add	r3, r2, r3
   15848:	ldr	r3, [r3]
   1584c:	str	r3, [fp, #-36]	; 0xffffffdc
   15850:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15854:	lsl	r3, r3, #3
   15858:	ldr	r2, [fp, #-16]
   1585c:	add	r3, r2, r3
   15860:	ldr	r3, [r3, #4]
   15864:	str	r3, [fp, #-20]	; 0xffffffec
   15868:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1586c:	ldr	r3, [r3, #4]
   15870:	orr	r3, r3, #1
   15874:	str	r3, [fp, #-40]	; 0xffffffd8
   15878:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1587c:	ldr	r3, [r3]
   15880:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15884:	add	r2, r2, #8
   15888:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1588c:	ldr	r1, [r1, #40]	; 0x28
   15890:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15894:	ldr	r0, [r0, #44]	; 0x2c
   15898:	str	r0, [sp, #16]
   1589c:	str	r1, [sp, #12]
   158a0:	str	r2, [sp, #8]
   158a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   158a8:	str	r2, [sp, #4]
   158ac:	str	r3, [sp]
   158b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   158b4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   158b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   158bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   158c0:	bl	13d04 <__assert_fail@plt+0x2da8>
   158c4:	str	r0, [fp, #-44]	; 0xffffffd4
   158c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   158cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158d0:	cmp	r2, r3
   158d4:	bhi	15988 <__assert_fail@plt+0x4a2c>
   158d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   158dc:	lsl	r3, r3, #3
   158e0:	ldr	r2, [fp, #-16]
   158e4:	add	r3, r2, r3
   158e8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   158ec:	add	r2, r2, #1
   158f0:	str	r2, [fp, #-36]	; 0xffffffdc
   158f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   158f8:	str	r2, [r3]
   158fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15900:	ldr	r2, [pc, #172]	; 159b4 <__assert_fail@plt+0x4a58>
   15904:	cmp	r3, r2
   15908:	beq	15914 <__assert_fail@plt+0x49b8>
   1590c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15910:	bl	18024 <__assert_fail@plt+0x70c8>
   15914:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15918:	lsl	r3, r3, #3
   1591c:	ldr	r2, [fp, #-16]
   15920:	add	r4, r2, r3
   15924:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15928:	bl	167a8 <__assert_fail@plt+0x584c>
   1592c:	mov	r3, r0
   15930:	str	r3, [fp, #-20]	; 0xffffffec
   15934:	ldr	r3, [fp, #-20]	; 0xffffffec
   15938:	str	r3, [r4, #4]
   1593c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15940:	ldr	r3, [r3]
   15944:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15948:	add	r2, r2, #8
   1594c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15950:	ldr	r1, [r1, #40]	; 0x28
   15954:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15958:	ldr	r0, [r0, #44]	; 0x2c
   1595c:	str	r0, [sp, #16]
   15960:	str	r1, [sp, #12]
   15964:	str	r2, [sp, #8]
   15968:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1596c:	str	r2, [sp, #4]
   15970:	str	r3, [sp]
   15974:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15978:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1597c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15980:	ldr	r0, [fp, #-20]	; 0xffffffec
   15984:	bl	13d04 <__assert_fail@plt+0x2da8>
   15988:	bl	10e9c <__errno_location@plt>
   1598c:	mov	r2, r0
   15990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15994:	str	r3, [r2]
   15998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1599c:	mov	r0, r3
   159a0:	sub	sp, fp, #8
   159a4:	pop	{r4, fp, pc}
   159a8:	andeq	sl, r2, r4, lsl #2
   159ac:	strdeq	sl, [r2], -r8
   159b0:	strdeq	sl, [r2], -ip
   159b4:	andeq	r2, r3, ip, asr #5
   159b8:	push	{fp, lr}
   159bc:	add	fp, sp, #4
   159c0:	sub	sp, sp, #8
   159c4:	str	r0, [fp, #-8]
   159c8:	str	r1, [fp, #-12]
   159cc:	ldr	r3, [pc, #28]	; 159f0 <__assert_fail@plt+0x4a94>
   159d0:	mvn	r2, #0
   159d4:	ldr	r1, [fp, #-12]
   159d8:	ldr	r0, [fp, #-8]
   159dc:	bl	156f4 <__assert_fail@plt+0x4798>
   159e0:	mov	r3, r0
   159e4:	mov	r0, r3
   159e8:	sub	sp, fp, #4
   159ec:	pop	{fp, pc}
   159f0:	muleq	r3, ip, r2
   159f4:	push	{fp, lr}
   159f8:	add	fp, sp, #4
   159fc:	sub	sp, sp, #16
   15a00:	str	r0, [fp, #-8]
   15a04:	str	r1, [fp, #-12]
   15a08:	str	r2, [fp, #-16]
   15a0c:	ldr	r3, [pc, #28]	; 15a30 <__assert_fail@plt+0x4ad4>
   15a10:	ldr	r2, [fp, #-16]
   15a14:	ldr	r1, [fp, #-12]
   15a18:	ldr	r0, [fp, #-8]
   15a1c:	bl	156f4 <__assert_fail@plt+0x4798>
   15a20:	mov	r3, r0
   15a24:	mov	r0, r3
   15a28:	sub	sp, fp, #4
   15a2c:	pop	{fp, pc}
   15a30:	muleq	r3, ip, r2
   15a34:	push	{fp, lr}
   15a38:	add	fp, sp, #4
   15a3c:	sub	sp, sp, #8
   15a40:	str	r0, [fp, #-8]
   15a44:	ldr	r1, [fp, #-8]
   15a48:	mov	r0, #0
   15a4c:	bl	159b8 <__assert_fail@plt+0x4a5c>
   15a50:	mov	r3, r0
   15a54:	mov	r0, r3
   15a58:	sub	sp, fp, #4
   15a5c:	pop	{fp, pc}
   15a60:	push	{fp, lr}
   15a64:	add	fp, sp, #4
   15a68:	sub	sp, sp, #8
   15a6c:	str	r0, [fp, #-8]
   15a70:	str	r1, [fp, #-12]
   15a74:	ldr	r2, [fp, #-12]
   15a78:	ldr	r1, [fp, #-8]
   15a7c:	mov	r0, #0
   15a80:	bl	159f4 <__assert_fail@plt+0x4a98>
   15a84:	mov	r3, r0
   15a88:	mov	r0, r3
   15a8c:	sub	sp, fp, #4
   15a90:	pop	{fp, pc}
   15a94:	push	{fp, lr}
   15a98:	add	fp, sp, #4
   15a9c:	sub	sp, sp, #64	; 0x40
   15aa0:	str	r0, [fp, #-56]	; 0xffffffc8
   15aa4:	str	r1, [fp, #-60]	; 0xffffffc4
   15aa8:	str	r2, [fp, #-64]	; 0xffffffc0
   15aac:	sub	r3, fp, #52	; 0x34
   15ab0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ab4:	mov	r0, r3
   15ab8:	bl	13ba0 <__assert_fail@plt+0x2c44>
   15abc:	sub	r3, fp, #52	; 0x34
   15ac0:	mvn	r2, #0
   15ac4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15ac8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15acc:	bl	156f4 <__assert_fail@plt+0x4798>
   15ad0:	mov	r3, r0
   15ad4:	mov	r0, r3
   15ad8:	sub	sp, fp, #4
   15adc:	pop	{fp, pc}
   15ae0:	push	{fp, lr}
   15ae4:	add	fp, sp, #4
   15ae8:	sub	sp, sp, #64	; 0x40
   15aec:	str	r0, [fp, #-56]	; 0xffffffc8
   15af0:	str	r1, [fp, #-60]	; 0xffffffc4
   15af4:	str	r2, [fp, #-64]	; 0xffffffc0
   15af8:	str	r3, [fp, #-68]	; 0xffffffbc
   15afc:	sub	r3, fp, #52	; 0x34
   15b00:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15b04:	mov	r0, r3
   15b08:	bl	13ba0 <__assert_fail@plt+0x2c44>
   15b0c:	sub	r3, fp, #52	; 0x34
   15b10:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15b14:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15b18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15b1c:	bl	156f4 <__assert_fail@plt+0x4798>
   15b20:	mov	r3, r0
   15b24:	mov	r0, r3
   15b28:	sub	sp, fp, #4
   15b2c:	pop	{fp, pc}
   15b30:	push	{fp, lr}
   15b34:	add	fp, sp, #4
   15b38:	sub	sp, sp, #8
   15b3c:	str	r0, [fp, #-8]
   15b40:	str	r1, [fp, #-12]
   15b44:	ldr	r2, [fp, #-12]
   15b48:	ldr	r1, [fp, #-8]
   15b4c:	mov	r0, #0
   15b50:	bl	15a94 <__assert_fail@plt+0x4b38>
   15b54:	mov	r3, r0
   15b58:	mov	r0, r3
   15b5c:	sub	sp, fp, #4
   15b60:	pop	{fp, pc}
   15b64:	push	{fp, lr}
   15b68:	add	fp, sp, #4
   15b6c:	sub	sp, sp, #16
   15b70:	str	r0, [fp, #-8]
   15b74:	str	r1, [fp, #-12]
   15b78:	str	r2, [fp, #-16]
   15b7c:	ldr	r3, [fp, #-16]
   15b80:	ldr	r2, [fp, #-12]
   15b84:	ldr	r1, [fp, #-8]
   15b88:	mov	r0, #0
   15b8c:	bl	15ae0 <__assert_fail@plt+0x4b84>
   15b90:	mov	r3, r0
   15b94:	mov	r0, r3
   15b98:	sub	sp, fp, #4
   15b9c:	pop	{fp, pc}
   15ba0:	push	{fp, lr}
   15ba4:	add	fp, sp, #4
   15ba8:	sub	sp, sp, #64	; 0x40
   15bac:	str	r0, [fp, #-56]	; 0xffffffc8
   15bb0:	str	r1, [fp, #-60]	; 0xffffffc4
   15bb4:	mov	r3, r2
   15bb8:	strb	r3, [fp, #-61]	; 0xffffffc3
   15bbc:	ldr	r3, [pc, #84]	; 15c18 <__assert_fail@plt+0x4cbc>
   15bc0:	sub	ip, fp, #52	; 0x34
   15bc4:	mov	lr, r3
   15bc8:	ldm	lr!, {r0, r1, r2, r3}
   15bcc:	stmia	ip!, {r0, r1, r2, r3}
   15bd0:	ldm	lr!, {r0, r1, r2, r3}
   15bd4:	stmia	ip!, {r0, r1, r2, r3}
   15bd8:	ldm	lr, {r0, r1, r2, r3}
   15bdc:	stm	ip, {r0, r1, r2, r3}
   15be0:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15be4:	sub	r3, fp, #52	; 0x34
   15be8:	mov	r2, #1
   15bec:	mov	r0, r3
   15bf0:	bl	13a0c <__assert_fail@plt+0x2ab0>
   15bf4:	sub	r3, fp, #52	; 0x34
   15bf8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15bfc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15c00:	mov	r0, #0
   15c04:	bl	156f4 <__assert_fail@plt+0x4798>
   15c08:	mov	r3, r0
   15c0c:	mov	r0, r3
   15c10:	sub	sp, fp, #4
   15c14:	pop	{fp, pc}
   15c18:	muleq	r3, ip, r2
   15c1c:	push	{fp, lr}
   15c20:	add	fp, sp, #4
   15c24:	sub	sp, sp, #8
   15c28:	str	r0, [fp, #-8]
   15c2c:	mov	r3, r1
   15c30:	strb	r3, [fp, #-9]
   15c34:	ldrb	r3, [fp, #-9]
   15c38:	mov	r2, r3
   15c3c:	mvn	r1, #0
   15c40:	ldr	r0, [fp, #-8]
   15c44:	bl	15ba0 <__assert_fail@plt+0x4c44>
   15c48:	mov	r3, r0
   15c4c:	mov	r0, r3
   15c50:	sub	sp, fp, #4
   15c54:	pop	{fp, pc}
   15c58:	push	{fp, lr}
   15c5c:	add	fp, sp, #4
   15c60:	sub	sp, sp, #8
   15c64:	str	r0, [fp, #-8]
   15c68:	mov	r1, #58	; 0x3a
   15c6c:	ldr	r0, [fp, #-8]
   15c70:	bl	15c1c <__assert_fail@plt+0x4cc0>
   15c74:	mov	r3, r0
   15c78:	mov	r0, r3
   15c7c:	sub	sp, fp, #4
   15c80:	pop	{fp, pc}
   15c84:	push	{fp, lr}
   15c88:	add	fp, sp, #4
   15c8c:	sub	sp, sp, #8
   15c90:	str	r0, [fp, #-8]
   15c94:	str	r1, [fp, #-12]
   15c98:	mov	r2, #58	; 0x3a
   15c9c:	ldr	r1, [fp, #-12]
   15ca0:	ldr	r0, [fp, #-8]
   15ca4:	bl	15ba0 <__assert_fail@plt+0x4c44>
   15ca8:	mov	r3, r0
   15cac:	mov	r0, r3
   15cb0:	sub	sp, fp, #4
   15cb4:	pop	{fp, pc}
   15cb8:	push	{fp, lr}
   15cbc:	add	fp, sp, #4
   15cc0:	sub	sp, sp, #112	; 0x70
   15cc4:	str	r0, [fp, #-56]	; 0xffffffc8
   15cc8:	str	r1, [fp, #-60]	; 0xffffffc4
   15ccc:	str	r2, [fp, #-64]	; 0xffffffc0
   15cd0:	sub	r3, fp, #116	; 0x74
   15cd4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15cd8:	mov	r0, r3
   15cdc:	bl	13ba0 <__assert_fail@plt+0x2c44>
   15ce0:	sub	ip, fp, #52	; 0x34
   15ce4:	sub	lr, fp, #116	; 0x74
   15ce8:	ldm	lr!, {r0, r1, r2, r3}
   15cec:	stmia	ip!, {r0, r1, r2, r3}
   15cf0:	ldm	lr!, {r0, r1, r2, r3}
   15cf4:	stmia	ip!, {r0, r1, r2, r3}
   15cf8:	ldm	lr, {r0, r1, r2, r3}
   15cfc:	stm	ip, {r0, r1, r2, r3}
   15d00:	sub	r3, fp, #52	; 0x34
   15d04:	mov	r2, #1
   15d08:	mov	r1, #58	; 0x3a
   15d0c:	mov	r0, r3
   15d10:	bl	13a0c <__assert_fail@plt+0x2ab0>
   15d14:	sub	r3, fp, #52	; 0x34
   15d18:	mvn	r2, #0
   15d1c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15d20:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15d24:	bl	156f4 <__assert_fail@plt+0x4798>
   15d28:	mov	r3, r0
   15d2c:	mov	r0, r3
   15d30:	sub	sp, fp, #4
   15d34:	pop	{fp, pc}
   15d38:	push	{fp, lr}
   15d3c:	add	fp, sp, #4
   15d40:	sub	sp, sp, #24
   15d44:	str	r0, [fp, #-8]
   15d48:	str	r1, [fp, #-12]
   15d4c:	str	r2, [fp, #-16]
   15d50:	str	r3, [fp, #-20]	; 0xffffffec
   15d54:	mvn	r3, #0
   15d58:	str	r3, [sp]
   15d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d60:	ldr	r2, [fp, #-16]
   15d64:	ldr	r1, [fp, #-12]
   15d68:	ldr	r0, [fp, #-8]
   15d6c:	bl	15d80 <__assert_fail@plt+0x4e24>
   15d70:	mov	r3, r0
   15d74:	mov	r0, r3
   15d78:	sub	sp, fp, #4
   15d7c:	pop	{fp, pc}
   15d80:	push	{fp, lr}
   15d84:	add	fp, sp, #4
   15d88:	sub	sp, sp, #64	; 0x40
   15d8c:	str	r0, [fp, #-56]	; 0xffffffc8
   15d90:	str	r1, [fp, #-60]	; 0xffffffc4
   15d94:	str	r2, [fp, #-64]	; 0xffffffc0
   15d98:	str	r3, [fp, #-68]	; 0xffffffbc
   15d9c:	ldr	r3, [pc, #84]	; 15df8 <__assert_fail@plt+0x4e9c>
   15da0:	sub	ip, fp, #52	; 0x34
   15da4:	mov	lr, r3
   15da8:	ldm	lr!, {r0, r1, r2, r3}
   15dac:	stmia	ip!, {r0, r1, r2, r3}
   15db0:	ldm	lr!, {r0, r1, r2, r3}
   15db4:	stmia	ip!, {r0, r1, r2, r3}
   15db8:	ldm	lr, {r0, r1, r2, r3}
   15dbc:	stm	ip, {r0, r1, r2, r3}
   15dc0:	sub	r3, fp, #52	; 0x34
   15dc4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15dc8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15dcc:	mov	r0, r3
   15dd0:	bl	13b24 <__assert_fail@plt+0x2bc8>
   15dd4:	sub	r3, fp, #52	; 0x34
   15dd8:	ldr	r2, [fp, #4]
   15ddc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15de0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15de4:	bl	156f4 <__assert_fail@plt+0x4798>
   15de8:	mov	r3, r0
   15dec:	mov	r0, r3
   15df0:	sub	sp, fp, #4
   15df4:	pop	{fp, pc}
   15df8:	muleq	r3, ip, r2
   15dfc:	push	{fp, lr}
   15e00:	add	fp, sp, #4
   15e04:	sub	sp, sp, #16
   15e08:	str	r0, [fp, #-8]
   15e0c:	str	r1, [fp, #-12]
   15e10:	str	r2, [fp, #-16]
   15e14:	ldr	r3, [fp, #-16]
   15e18:	ldr	r2, [fp, #-12]
   15e1c:	ldr	r1, [fp, #-8]
   15e20:	mov	r0, #0
   15e24:	bl	15d38 <__assert_fail@plt+0x4ddc>
   15e28:	mov	r3, r0
   15e2c:	mov	r0, r3
   15e30:	sub	sp, fp, #4
   15e34:	pop	{fp, pc}
   15e38:	push	{fp, lr}
   15e3c:	add	fp, sp, #4
   15e40:	sub	sp, sp, #24
   15e44:	str	r0, [fp, #-8]
   15e48:	str	r1, [fp, #-12]
   15e4c:	str	r2, [fp, #-16]
   15e50:	str	r3, [fp, #-20]	; 0xffffffec
   15e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e58:	str	r3, [sp]
   15e5c:	ldr	r3, [fp, #-16]
   15e60:	ldr	r2, [fp, #-12]
   15e64:	ldr	r1, [fp, #-8]
   15e68:	mov	r0, #0
   15e6c:	bl	15d80 <__assert_fail@plt+0x4e24>
   15e70:	mov	r3, r0
   15e74:	mov	r0, r3
   15e78:	sub	sp, fp, #4
   15e7c:	pop	{fp, pc}
   15e80:	push	{fp, lr}
   15e84:	add	fp, sp, #4
   15e88:	sub	sp, sp, #16
   15e8c:	str	r0, [fp, #-8]
   15e90:	str	r1, [fp, #-12]
   15e94:	str	r2, [fp, #-16]
   15e98:	ldr	r3, [pc, #28]	; 15ebc <__assert_fail@plt+0x4f60>
   15e9c:	ldr	r2, [fp, #-16]
   15ea0:	ldr	r1, [fp, #-12]
   15ea4:	ldr	r0, [fp, #-8]
   15ea8:	bl	156f4 <__assert_fail@plt+0x4798>
   15eac:	mov	r3, r0
   15eb0:	mov	r0, r3
   15eb4:	sub	sp, fp, #4
   15eb8:	pop	{fp, pc}
   15ebc:	andeq	sl, r2, r8, lsl #2
   15ec0:	push	{fp, lr}
   15ec4:	add	fp, sp, #4
   15ec8:	sub	sp, sp, #8
   15ecc:	str	r0, [fp, #-8]
   15ed0:	str	r1, [fp, #-12]
   15ed4:	ldr	r2, [fp, #-12]
   15ed8:	ldr	r1, [fp, #-8]
   15edc:	mov	r0, #0
   15ee0:	bl	15e80 <__assert_fail@plt+0x4f24>
   15ee4:	mov	r3, r0
   15ee8:	mov	r0, r3
   15eec:	sub	sp, fp, #4
   15ef0:	pop	{fp, pc}
   15ef4:	push	{fp, lr}
   15ef8:	add	fp, sp, #4
   15efc:	sub	sp, sp, #8
   15f00:	str	r0, [fp, #-8]
   15f04:	str	r1, [fp, #-12]
   15f08:	mvn	r2, #0
   15f0c:	ldr	r1, [fp, #-12]
   15f10:	ldr	r0, [fp, #-8]
   15f14:	bl	15e80 <__assert_fail@plt+0x4f24>
   15f18:	mov	r3, r0
   15f1c:	mov	r0, r3
   15f20:	sub	sp, fp, #4
   15f24:	pop	{fp, pc}
   15f28:	push	{fp, lr}
   15f2c:	add	fp, sp, #4
   15f30:	sub	sp, sp, #8
   15f34:	str	r0, [fp, #-8]
   15f38:	ldr	r1, [fp, #-8]
   15f3c:	mov	r0, #0
   15f40:	bl	15ef4 <__assert_fail@plt+0x4f98>
   15f44:	mov	r3, r0
   15f48:	mov	r0, r3
   15f4c:	sub	sp, fp, #4
   15f50:	pop	{fp, pc}
   15f54:	push	{r4, r5, r6, r7, fp, lr}
   15f58:	add	fp, sp, #20
   15f5c:	sub	sp, sp, #48	; 0x30
   15f60:	str	r0, [fp, #-24]	; 0xffffffe8
   15f64:	str	r1, [fp, #-28]	; 0xffffffe4
   15f68:	str	r2, [fp, #-32]	; 0xffffffe0
   15f6c:	str	r3, [fp, #-36]	; 0xffffffdc
   15f70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f74:	cmp	r3, #0
   15f78:	beq	15f9c <__assert_fail@plt+0x5040>
   15f7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f80:	str	r3, [sp]
   15f84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15f8c:	ldr	r1, [pc, #1260]	; 16480 <__assert_fail@plt+0x5524>
   15f90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f94:	bl	10e90 <fprintf@plt>
   15f98:	b	15fb0 <__assert_fail@plt+0x5054>
   15f9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fa0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15fa4:	ldr	r1, [pc, #1240]	; 16484 <__assert_fail@plt+0x5528>
   15fa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fac:	bl	10e90 <fprintf@plt>
   15fb0:	ldr	r0, [pc, #1232]	; 16488 <__assert_fail@plt+0x552c>
   15fb4:	bl	10e6c <gettext@plt>
   15fb8:	mov	r2, r0
   15fbc:	ldr	r3, [pc, #1224]	; 1648c <__assert_fail@plt+0x5530>
   15fc0:	ldr	r1, [pc, #1224]	; 16490 <__assert_fail@plt+0x5534>
   15fc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fc8:	bl	10e90 <fprintf@plt>
   15fcc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15fd0:	mov	r0, #10
   15fd4:	bl	10d88 <fputc_unlocked@plt>
   15fd8:	ldr	r0, [pc, #1204]	; 16494 <__assert_fail@plt+0x5538>
   15fdc:	bl	10e6c <gettext@plt>
   15fe0:	mov	r3, r0
   15fe4:	ldr	r2, [pc, #1196]	; 16498 <__assert_fail@plt+0x553c>
   15fe8:	mov	r1, r3
   15fec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ff0:	bl	10e90 <fprintf@plt>
   15ff4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15ff8:	mov	r0, #10
   15ffc:	bl	10d88 <fputc_unlocked@plt>
   16000:	ldr	r3, [fp, #8]
   16004:	cmp	r3, #9
   16008:	ldrls	pc, [pc, r3, lsl #2]
   1600c:	b	163c8 <__assert_fail@plt+0x546c>
   16010:	andeq	r6, r1, r0, ror r4
   16014:	andeq	r6, r1, r8, lsr r0
   16018:	andeq	r6, r1, ip, asr r0
   1601c:	andeq	r6, r1, r8, lsl #1
   16020:	andeq	r6, r1, r8, asr #1
   16024:	andeq	r6, r1, r0, lsr #2
   16028:	andeq	r6, r1, r8, lsl #3
   1602c:	andeq	r6, r1, r0, lsl #4
   16030:	andeq	r6, r1, r8, lsl #5
   16034:	andeq	r6, r1, r0, lsr #6
   16038:	ldr	r0, [pc, #1116]	; 1649c <__assert_fail@plt+0x5540>
   1603c:	bl	10e6c <gettext@plt>
   16040:	mov	r1, r0
   16044:	ldr	r3, [fp, #4]
   16048:	ldr	r3, [r3]
   1604c:	mov	r2, r3
   16050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16054:	bl	10e90 <fprintf@plt>
   16058:	b	16474 <__assert_fail@plt+0x5518>
   1605c:	ldr	r0, [pc, #1084]	; 164a0 <__assert_fail@plt+0x5544>
   16060:	bl	10e6c <gettext@plt>
   16064:	mov	r1, r0
   16068:	ldr	r3, [fp, #4]
   1606c:	ldr	r2, [r3]
   16070:	ldr	r3, [fp, #4]
   16074:	add	r3, r3, #4
   16078:	ldr	r3, [r3]
   1607c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16080:	bl	10e90 <fprintf@plt>
   16084:	b	16474 <__assert_fail@plt+0x5518>
   16088:	ldr	r0, [pc, #1044]	; 164a4 <__assert_fail@plt+0x5548>
   1608c:	bl	10e6c <gettext@plt>
   16090:	ldr	r3, [fp, #4]
   16094:	ldr	r2, [r3]
   16098:	ldr	r3, [fp, #4]
   1609c:	add	r3, r3, #4
   160a0:	ldr	r1, [r3]
   160a4:	ldr	r3, [fp, #4]
   160a8:	add	r3, r3, #8
   160ac:	ldr	r3, [r3]
   160b0:	str	r3, [sp]
   160b4:	mov	r3, r1
   160b8:	mov	r1, r0
   160bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160c0:	bl	10e90 <fprintf@plt>
   160c4:	b	16474 <__assert_fail@plt+0x5518>
   160c8:	ldr	r0, [pc, #984]	; 164a8 <__assert_fail@plt+0x554c>
   160cc:	bl	10e6c <gettext@plt>
   160d0:	mov	ip, r0
   160d4:	ldr	r3, [fp, #4]
   160d8:	ldr	r1, [r3]
   160dc:	ldr	r3, [fp, #4]
   160e0:	add	r3, r3, #4
   160e4:	ldr	r0, [r3]
   160e8:	ldr	r3, [fp, #4]
   160ec:	add	r3, r3, #8
   160f0:	ldr	r3, [r3]
   160f4:	ldr	r2, [fp, #4]
   160f8:	add	r2, r2, #12
   160fc:	ldr	r2, [r2]
   16100:	str	r2, [sp, #4]
   16104:	str	r3, [sp]
   16108:	mov	r3, r0
   1610c:	mov	r2, r1
   16110:	mov	r1, ip
   16114:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16118:	bl	10e90 <fprintf@plt>
   1611c:	b	16474 <__assert_fail@plt+0x5518>
   16120:	ldr	r0, [pc, #900]	; 164ac <__assert_fail@plt+0x5550>
   16124:	bl	10e6c <gettext@plt>
   16128:	mov	lr, r0
   1612c:	ldr	r3, [fp, #4]
   16130:	ldr	r0, [r3]
   16134:	ldr	r3, [fp, #4]
   16138:	add	r3, r3, #4
   1613c:	ldr	ip, [r3]
   16140:	ldr	r3, [fp, #4]
   16144:	add	r3, r3, #8
   16148:	ldr	r3, [r3]
   1614c:	ldr	r2, [fp, #4]
   16150:	add	r2, r2, #12
   16154:	ldr	r2, [r2]
   16158:	ldr	r1, [fp, #4]
   1615c:	add	r1, r1, #16
   16160:	ldr	r1, [r1]
   16164:	str	r1, [sp, #8]
   16168:	str	r2, [sp, #4]
   1616c:	str	r3, [sp]
   16170:	mov	r3, ip
   16174:	mov	r2, r0
   16178:	mov	r1, lr
   1617c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16180:	bl	10e90 <fprintf@plt>
   16184:	b	16474 <__assert_fail@plt+0x5518>
   16188:	ldr	r0, [pc, #800]	; 164b0 <__assert_fail@plt+0x5554>
   1618c:	bl	10e6c <gettext@plt>
   16190:	mov	r4, r0
   16194:	ldr	r3, [fp, #4]
   16198:	ldr	ip, [r3]
   1619c:	ldr	r3, [fp, #4]
   161a0:	add	r3, r3, #4
   161a4:	ldr	lr, [r3]
   161a8:	ldr	r3, [fp, #4]
   161ac:	add	r3, r3, #8
   161b0:	ldr	r3, [r3]
   161b4:	ldr	r2, [fp, #4]
   161b8:	add	r2, r2, #12
   161bc:	ldr	r2, [r2]
   161c0:	ldr	r1, [fp, #4]
   161c4:	add	r1, r1, #16
   161c8:	ldr	r1, [r1]
   161cc:	ldr	r0, [fp, #4]
   161d0:	add	r0, r0, #20
   161d4:	ldr	r0, [r0]
   161d8:	str	r0, [sp, #12]
   161dc:	str	r1, [sp, #8]
   161e0:	str	r2, [sp, #4]
   161e4:	str	r3, [sp]
   161e8:	mov	r3, lr
   161ec:	mov	r2, ip
   161f0:	mov	r1, r4
   161f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   161f8:	bl	10e90 <fprintf@plt>
   161fc:	b	16474 <__assert_fail@plt+0x5518>
   16200:	ldr	r0, [pc, #684]	; 164b4 <__assert_fail@plt+0x5558>
   16204:	bl	10e6c <gettext@plt>
   16208:	mov	r5, r0
   1620c:	ldr	r3, [fp, #4]
   16210:	ldr	lr, [r3]
   16214:	ldr	r3, [fp, #4]
   16218:	add	r3, r3, #4
   1621c:	ldr	r4, [r3]
   16220:	ldr	r3, [fp, #4]
   16224:	add	r3, r3, #8
   16228:	ldr	r3, [r3]
   1622c:	ldr	r2, [fp, #4]
   16230:	add	r2, r2, #12
   16234:	ldr	r2, [r2]
   16238:	ldr	r1, [fp, #4]
   1623c:	add	r1, r1, #16
   16240:	ldr	r1, [r1]
   16244:	ldr	r0, [fp, #4]
   16248:	add	r0, r0, #20
   1624c:	ldr	r0, [r0]
   16250:	ldr	ip, [fp, #4]
   16254:	add	ip, ip, #24
   16258:	ldr	ip, [ip]
   1625c:	str	ip, [sp, #16]
   16260:	str	r0, [sp, #12]
   16264:	str	r1, [sp, #8]
   16268:	str	r2, [sp, #4]
   1626c:	str	r3, [sp]
   16270:	mov	r3, r4
   16274:	mov	r2, lr
   16278:	mov	r1, r5
   1627c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16280:	bl	10e90 <fprintf@plt>
   16284:	b	16474 <__assert_fail@plt+0x5518>
   16288:	ldr	r0, [pc, #552]	; 164b8 <__assert_fail@plt+0x555c>
   1628c:	bl	10e6c <gettext@plt>
   16290:	mov	r6, r0
   16294:	ldr	r3, [fp, #4]
   16298:	ldr	r4, [r3]
   1629c:	ldr	r3, [fp, #4]
   162a0:	add	r3, r3, #4
   162a4:	ldr	r5, [r3]
   162a8:	ldr	r3, [fp, #4]
   162ac:	add	r3, r3, #8
   162b0:	ldr	r3, [r3]
   162b4:	ldr	r2, [fp, #4]
   162b8:	add	r2, r2, #12
   162bc:	ldr	r2, [r2]
   162c0:	ldr	r1, [fp, #4]
   162c4:	add	r1, r1, #16
   162c8:	ldr	r1, [r1]
   162cc:	ldr	r0, [fp, #4]
   162d0:	add	r0, r0, #20
   162d4:	ldr	r0, [r0]
   162d8:	ldr	ip, [fp, #4]
   162dc:	add	ip, ip, #24
   162e0:	ldr	ip, [ip]
   162e4:	ldr	lr, [fp, #4]
   162e8:	add	lr, lr, #28
   162ec:	ldr	lr, [lr]
   162f0:	str	lr, [sp, #20]
   162f4:	str	ip, [sp, #16]
   162f8:	str	r0, [sp, #12]
   162fc:	str	r1, [sp, #8]
   16300:	str	r2, [sp, #4]
   16304:	str	r3, [sp]
   16308:	mov	r3, r5
   1630c:	mov	r2, r4
   16310:	mov	r1, r6
   16314:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16318:	bl	10e90 <fprintf@plt>
   1631c:	b	16474 <__assert_fail@plt+0x5518>
   16320:	ldr	r0, [pc, #404]	; 164bc <__assert_fail@plt+0x5560>
   16324:	bl	10e6c <gettext@plt>
   16328:	mov	r7, r0
   1632c:	ldr	r3, [fp, #4]
   16330:	ldr	r5, [r3]
   16334:	ldr	r3, [fp, #4]
   16338:	add	r3, r3, #4
   1633c:	ldr	r6, [r3]
   16340:	ldr	r3, [fp, #4]
   16344:	add	r3, r3, #8
   16348:	ldr	r3, [r3]
   1634c:	ldr	r2, [fp, #4]
   16350:	add	r2, r2, #12
   16354:	ldr	r2, [r2]
   16358:	ldr	r1, [fp, #4]
   1635c:	add	r1, r1, #16
   16360:	ldr	r1, [r1]
   16364:	ldr	r0, [fp, #4]
   16368:	add	r0, r0, #20
   1636c:	ldr	r0, [r0]
   16370:	ldr	ip, [fp, #4]
   16374:	add	ip, ip, #24
   16378:	ldr	ip, [ip]
   1637c:	ldr	lr, [fp, #4]
   16380:	add	lr, lr, #28
   16384:	ldr	lr, [lr]
   16388:	ldr	r4, [fp, #4]
   1638c:	add	r4, r4, #32
   16390:	ldr	r4, [r4]
   16394:	str	r4, [sp, #24]
   16398:	str	lr, [sp, #20]
   1639c:	str	ip, [sp, #16]
   163a0:	str	r0, [sp, #12]
   163a4:	str	r1, [sp, #8]
   163a8:	str	r2, [sp, #4]
   163ac:	str	r3, [sp]
   163b0:	mov	r3, r6
   163b4:	mov	r2, r5
   163b8:	mov	r1, r7
   163bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163c0:	bl	10e90 <fprintf@plt>
   163c4:	b	16474 <__assert_fail@plt+0x5518>
   163c8:	ldr	r0, [pc, #240]	; 164c0 <__assert_fail@plt+0x5564>
   163cc:	bl	10e6c <gettext@plt>
   163d0:	mov	r7, r0
   163d4:	ldr	r3, [fp, #4]
   163d8:	ldr	r5, [r3]
   163dc:	ldr	r3, [fp, #4]
   163e0:	add	r3, r3, #4
   163e4:	ldr	r6, [r3]
   163e8:	ldr	r3, [fp, #4]
   163ec:	add	r3, r3, #8
   163f0:	ldr	r3, [r3]
   163f4:	ldr	r2, [fp, #4]
   163f8:	add	r2, r2, #12
   163fc:	ldr	r2, [r2]
   16400:	ldr	r1, [fp, #4]
   16404:	add	r1, r1, #16
   16408:	ldr	r1, [r1]
   1640c:	ldr	r0, [fp, #4]
   16410:	add	r0, r0, #20
   16414:	ldr	r0, [r0]
   16418:	ldr	ip, [fp, #4]
   1641c:	add	ip, ip, #24
   16420:	ldr	ip, [ip]
   16424:	ldr	lr, [fp, #4]
   16428:	add	lr, lr, #28
   1642c:	ldr	lr, [lr]
   16430:	ldr	r4, [fp, #4]
   16434:	add	r4, r4, #32
   16438:	ldr	r4, [r4]
   1643c:	str	r4, [sp, #24]
   16440:	str	lr, [sp, #20]
   16444:	str	ip, [sp, #16]
   16448:	str	r0, [sp, #12]
   1644c:	str	r1, [sp, #8]
   16450:	str	r2, [sp, #4]
   16454:	str	r3, [sp]
   16458:	mov	r3, r6
   1645c:	mov	r2, r5
   16460:	mov	r1, r7
   16464:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16468:	bl	10e90 <fprintf@plt>
   1646c:	b	16474 <__assert_fail@plt+0x5518>
   16470:	nop			; (mov r0, r0)
   16474:	nop			; (mov r0, r0)
   16478:	sub	sp, fp, #20
   1647c:	pop	{r4, r5, r6, r7, fp, pc}
   16480:	andeq	r9, r1, ip, lsr #20
   16484:	andeq	r9, r1, r8, lsr sl
   16488:	andeq	r9, r1, r0, asr #20
   1648c:	andeq	r0, r0, r6, ror #15
   16490:	andeq	r9, r1, r0, asr sp
   16494:	andeq	r9, r1, r4, asr #20
   16498:	strdeq	r9, [r1], -r0
   1649c:	andeq	r9, r1, r4, lsl fp
   164a0:	andeq	r9, r1, r4, lsr #22
   164a4:	andeq	r9, r1, ip, lsr fp
   164a8:	andeq	r9, r1, r8, asr fp
   164ac:	andeq	r9, r1, r8, ror fp
   164b0:	muleq	r1, ip, fp
   164b4:	andeq	r9, r1, r4, asr #23
   164b8:	strdeq	r9, [r1], -r0
   164bc:	andeq	r9, r1, r0, lsr #24
   164c0:	andeq	r9, r1, r4, asr ip
   164c4:	push	{fp, lr}
   164c8:	add	fp, sp, #4
   164cc:	sub	sp, sp, #32
   164d0:	str	r0, [fp, #-16]
   164d4:	str	r1, [fp, #-20]	; 0xffffffec
   164d8:	str	r2, [fp, #-24]	; 0xffffffe8
   164dc:	str	r3, [fp, #-28]	; 0xffffffe4
   164e0:	mov	r3, #0
   164e4:	str	r3, [fp, #-8]
   164e8:	b	164f8 <__assert_fail@plt+0x559c>
   164ec:	ldr	r3, [fp, #-8]
   164f0:	add	r3, r3, #1
   164f4:	str	r3, [fp, #-8]
   164f8:	ldr	r3, [fp, #-8]
   164fc:	lsl	r3, r3, #2
   16500:	ldr	r2, [fp, #4]
   16504:	add	r3, r2, r3
   16508:	ldr	r3, [r3]
   1650c:	cmp	r3, #0
   16510:	bne	164ec <__assert_fail@plt+0x5590>
   16514:	ldr	r3, [fp, #-8]
   16518:	str	r3, [sp, #4]
   1651c:	ldr	r3, [fp, #4]
   16520:	str	r3, [sp]
   16524:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16528:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1652c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16530:	ldr	r0, [fp, #-16]
   16534:	bl	15f54 <__assert_fail@plt+0x4ff8>
   16538:	nop			; (mov r0, r0)
   1653c:	sub	sp, fp, #4
   16540:	pop	{fp, pc}
   16544:	push	{fp, lr}
   16548:	add	fp, sp, #4
   1654c:	sub	sp, sp, #72	; 0x48
   16550:	str	r0, [fp, #-56]	; 0xffffffc8
   16554:	str	r1, [fp, #-60]	; 0xffffffc4
   16558:	str	r2, [fp, #-64]	; 0xffffffc0
   1655c:	str	r3, [fp, #-68]	; 0xffffffbc
   16560:	mov	r3, #0
   16564:	str	r3, [fp, #-8]
   16568:	b	16578 <__assert_fail@plt+0x561c>
   1656c:	ldr	r3, [fp, #-8]
   16570:	add	r3, r3, #1
   16574:	str	r3, [fp, #-8]
   16578:	ldr	r3, [fp, #-8]
   1657c:	cmp	r3, #9
   16580:	bhi	165c4 <__assert_fail@plt+0x5668>
   16584:	ldr	r3, [fp, #4]
   16588:	add	r2, r3, #4
   1658c:	str	r2, [fp, #4]
   16590:	ldr	r2, [r3]
   16594:	ldr	r3, [fp, #-8]
   16598:	lsl	r3, r3, #2
   1659c:	sub	r1, fp, #4
   165a0:	add	r3, r1, r3
   165a4:	str	r2, [r3, #-44]	; 0xffffffd4
   165a8:	ldr	r3, [fp, #-8]
   165ac:	lsl	r3, r3, #2
   165b0:	sub	r2, fp, #4
   165b4:	add	r3, r2, r3
   165b8:	ldr	r3, [r3, #-44]	; 0xffffffd4
   165bc:	cmp	r3, #0
   165c0:	bne	1656c <__assert_fail@plt+0x5610>
   165c4:	ldr	r3, [fp, #-8]
   165c8:	str	r3, [sp, #4]
   165cc:	sub	r3, fp, #48	; 0x30
   165d0:	str	r3, [sp]
   165d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   165d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   165dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   165e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   165e4:	bl	15f54 <__assert_fail@plt+0x4ff8>
   165e8:	nop			; (mov r0, r0)
   165ec:	sub	sp, fp, #4
   165f0:	pop	{fp, pc}
   165f4:	push	{r3}		; (str r3, [sp, #-4]!)
   165f8:	push	{fp, lr}
   165fc:	add	fp, sp, #4
   16600:	sub	sp, sp, #36	; 0x24
   16604:	str	r0, [fp, #-20]	; 0xffffffec
   16608:	str	r1, [fp, #-24]	; 0xffffffe8
   1660c:	str	r2, [fp, #-28]	; 0xffffffe4
   16610:	add	r3, fp, #8
   16614:	str	r3, [fp, #-12]
   16618:	ldr	r3, [fp, #-12]
   1661c:	str	r3, [sp]
   16620:	ldr	r3, [fp, #4]
   16624:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16628:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1662c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16630:	bl	16544 <__assert_fail@plt+0x55e8>
   16634:	nop			; (mov r0, r0)
   16638:	sub	sp, fp, #4
   1663c:	pop	{fp, lr}
   16640:	add	sp, sp, #4
   16644:	bx	lr
   16648:	push	{fp, lr}
   1664c:	add	fp, sp, #4
   16650:	ldr	r3, [pc, #96]	; 166b8 <__assert_fail@plt+0x575c>
   16654:	ldr	r3, [r3]
   16658:	mov	r1, r3
   1665c:	mov	r0, #10
   16660:	bl	10d88 <fputc_unlocked@plt>
   16664:	ldr	r0, [pc, #80]	; 166bc <__assert_fail@plt+0x5760>
   16668:	bl	10e6c <gettext@plt>
   1666c:	mov	r3, r0
   16670:	ldr	r1, [pc, #72]	; 166c0 <__assert_fail@plt+0x5764>
   16674:	mov	r0, r3
   16678:	bl	10d1c <printf@plt>
   1667c:	ldr	r0, [pc, #64]	; 166c4 <__assert_fail@plt+0x5768>
   16680:	bl	10e6c <gettext@plt>
   16684:	mov	r3, r0
   16688:	ldr	r2, [pc, #56]	; 166c8 <__assert_fail@plt+0x576c>
   1668c:	ldr	r1, [pc, #56]	; 166cc <__assert_fail@plt+0x5770>
   16690:	mov	r0, r3
   16694:	bl	10d1c <printf@plt>
   16698:	ldr	r0, [pc, #48]	; 166d0 <__assert_fail@plt+0x5774>
   1669c:	bl	10e6c <gettext@plt>
   166a0:	mov	r3, r0
   166a4:	ldr	r1, [pc, #40]	; 166d4 <__assert_fail@plt+0x5778>
   166a8:	mov	r0, r3
   166ac:	bl	10d1c <printf@plt>
   166b0:	nop			; (mov r0, r0)
   166b4:	pop	{fp, pc}
   166b8:	andeq	sl, r2, r4, asr r1
   166bc:	muleq	r1, r0, ip
   166c0:	andeq	r9, r1, r4, lsr #25
   166c4:			; <UNDEFINED> instruction: 0x00019cbc
   166c8:	ldrdeq	r9, [r1], -r0
   166cc:	strdeq	r9, [r1], -r8
   166d0:	andeq	r9, r1, r8, lsl #26
   166d4:	andeq	r9, r1, r0, lsr sp
   166d8:	push	{fp, lr}
   166dc:	add	fp, sp, #4
   166e0:	sub	sp, sp, #16
   166e4:	str	r0, [fp, #-8]
   166e8:	str	r1, [fp, #-12]
   166ec:	str	r2, [fp, #-16]
   166f0:	ldr	r2, [fp, #-16]
   166f4:	ldr	r1, [fp, #-12]
   166f8:	ldr	r0, [fp, #-8]
   166fc:	bl	16868 <__assert_fail@plt+0x590c>
   16700:	mov	r3, r0
   16704:	mov	r0, r3
   16708:	sub	sp, fp, #4
   1670c:	pop	{fp, pc}
   16710:	push	{fp, lr}
   16714:	add	fp, sp, #4
   16718:	sub	sp, sp, #8
   1671c:	str	r0, [fp, #-8]
   16720:	ldr	r3, [fp, #-8]
   16724:	cmp	r3, #0
   16728:	bne	16730 <__assert_fail@plt+0x57d4>
   1672c:	bl	1725c <__assert_fail@plt+0x6300>
   16730:	ldr	r3, [fp, #-8]
   16734:	mov	r0, r3
   16738:	sub	sp, fp, #4
   1673c:	pop	{fp, pc}
   16740:	push	{fp, lr}
   16744:	add	fp, sp, #4
   16748:	sub	sp, sp, #8
   1674c:	str	r0, [fp, #-8]
   16750:	ldr	r0, [fp, #-8]
   16754:	bl	17d3c <__assert_fail@plt+0x6de0>
   16758:	mov	r3, r0
   1675c:	mov	r0, r3
   16760:	bl	16710 <__assert_fail@plt+0x57b4>
   16764:	mov	r3, r0
   16768:	mov	r0, r3
   1676c:	sub	sp, fp, #4
   16770:	pop	{fp, pc}
   16774:	push	{fp, lr}
   16778:	add	fp, sp, #4
   1677c:	sub	sp, sp, #8
   16780:	str	r0, [fp, #-8]
   16784:	ldr	r0, [fp, #-8]
   16788:	bl	180d4 <__assert_fail@plt+0x7178>
   1678c:	mov	r3, r0
   16790:	mov	r0, r3
   16794:	bl	16710 <__assert_fail@plt+0x57b4>
   16798:	mov	r3, r0
   1679c:	mov	r0, r3
   167a0:	sub	sp, fp, #4
   167a4:	pop	{fp, pc}
   167a8:	push	{fp, lr}
   167ac:	add	fp, sp, #4
   167b0:	sub	sp, sp, #8
   167b4:	str	r0, [fp, #-8]
   167b8:	ldr	r0, [fp, #-8]
   167bc:	bl	16740 <__assert_fail@plt+0x57e4>
   167c0:	mov	r3, r0
   167c4:	mov	r0, r3
   167c8:	sub	sp, fp, #4
   167cc:	pop	{fp, pc}
   167d0:	push	{fp, lr}
   167d4:	add	fp, sp, #4
   167d8:	sub	sp, sp, #16
   167dc:	str	r0, [fp, #-16]
   167e0:	str	r1, [fp, #-20]	; 0xffffffec
   167e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   167e8:	ldr	r0, [fp, #-16]
   167ec:	bl	17de4 <__assert_fail@plt+0x6e88>
   167f0:	str	r0, [fp, #-8]
   167f4:	ldr	r3, [fp, #-8]
   167f8:	cmp	r3, #0
   167fc:	bne	1681c <__assert_fail@plt+0x58c0>
   16800:	ldr	r3, [fp, #-16]
   16804:	cmp	r3, #0
   16808:	beq	16818 <__assert_fail@plt+0x58bc>
   1680c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16810:	cmp	r3, #0
   16814:	beq	1681c <__assert_fail@plt+0x58c0>
   16818:	bl	1725c <__assert_fail@plt+0x6300>
   1681c:	ldr	r3, [fp, #-8]
   16820:	mov	r0, r3
   16824:	sub	sp, fp, #4
   16828:	pop	{fp, pc}
   1682c:	push	{fp, lr}
   16830:	add	fp, sp, #4
   16834:	sub	sp, sp, #8
   16838:	str	r0, [fp, #-8]
   1683c:	str	r1, [fp, #-12]
   16840:	ldr	r1, [fp, #-12]
   16844:	ldr	r0, [fp, #-8]
   16848:	bl	18100 <__assert_fail@plt+0x71a4>
   1684c:	mov	r3, r0
   16850:	mov	r0, r3
   16854:	bl	16710 <__assert_fail@plt+0x57b4>
   16858:	mov	r3, r0
   1685c:	mov	r0, r3
   16860:	sub	sp, fp, #4
   16864:	pop	{fp, pc}
   16868:	push	{fp, lr}
   1686c:	add	fp, sp, #4
   16870:	sub	sp, sp, #24
   16874:	str	r0, [fp, #-16]
   16878:	str	r1, [fp, #-20]	; 0xffffffec
   1687c:	str	r2, [fp, #-24]	; 0xffffffe8
   16880:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16884:	ldr	r1, [fp, #-20]	; 0xffffffec
   16888:	ldr	r0, [fp, #-16]
   1688c:	bl	182f4 <__assert_fail@plt+0x7398>
   16890:	str	r0, [fp, #-8]
   16894:	ldr	r3, [fp, #-8]
   16898:	cmp	r3, #0
   1689c:	bne	168c8 <__assert_fail@plt+0x596c>
   168a0:	ldr	r3, [fp, #-16]
   168a4:	cmp	r3, #0
   168a8:	beq	168c4 <__assert_fail@plt+0x5968>
   168ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   168b0:	cmp	r3, #0
   168b4:	beq	168c8 <__assert_fail@plt+0x596c>
   168b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168bc:	cmp	r3, #0
   168c0:	beq	168c8 <__assert_fail@plt+0x596c>
   168c4:	bl	1725c <__assert_fail@plt+0x6300>
   168c8:	ldr	r3, [fp, #-8]
   168cc:	mov	r0, r3
   168d0:	sub	sp, fp, #4
   168d4:	pop	{fp, pc}
   168d8:	push	{fp, lr}
   168dc:	add	fp, sp, #4
   168e0:	sub	sp, sp, #16
   168e4:	str	r0, [fp, #-8]
   168e8:	str	r1, [fp, #-12]
   168ec:	str	r2, [fp, #-16]
   168f0:	ldr	r2, [fp, #-16]
   168f4:	ldr	r1, [fp, #-12]
   168f8:	ldr	r0, [fp, #-8]
   168fc:	bl	18188 <__assert_fail@plt+0x722c>
   16900:	mov	r3, r0
   16904:	mov	r0, r3
   16908:	bl	16710 <__assert_fail@plt+0x57b4>
   1690c:	mov	r3, r0
   16910:	mov	r0, r3
   16914:	sub	sp, fp, #4
   16918:	pop	{fp, pc}
   1691c:	push	{fp, lr}
   16920:	add	fp, sp, #4
   16924:	sub	sp, sp, #8
   16928:	str	r0, [fp, #-8]
   1692c:	str	r1, [fp, #-12]
   16930:	ldr	r2, [fp, #-12]
   16934:	ldr	r1, [fp, #-8]
   16938:	mov	r0, #0
   1693c:	bl	16868 <__assert_fail@plt+0x590c>
   16940:	mov	r3, r0
   16944:	mov	r0, r3
   16948:	sub	sp, fp, #4
   1694c:	pop	{fp, pc}
   16950:	push	{fp, lr}
   16954:	add	fp, sp, #4
   16958:	sub	sp, sp, #8
   1695c:	str	r0, [fp, #-8]
   16960:	str	r1, [fp, #-12]
   16964:	ldr	r2, [fp, #-12]
   16968:	ldr	r1, [fp, #-8]
   1696c:	mov	r0, #0
   16970:	bl	168d8 <__assert_fail@plt+0x597c>
   16974:	mov	r3, r0
   16978:	mov	r0, r3
   1697c:	sub	sp, fp, #4
   16980:	pop	{fp, pc}
   16984:	push	{fp, lr}
   16988:	add	fp, sp, #4
   1698c:	sub	sp, sp, #8
   16990:	str	r0, [fp, #-8]
   16994:	str	r1, [fp, #-12]
   16998:	mov	r2, #1
   1699c:	ldr	r1, [fp, #-12]
   169a0:	ldr	r0, [fp, #-8]
   169a4:	bl	169b8 <__assert_fail@plt+0x5a5c>
   169a8:	mov	r3, r0
   169ac:	mov	r0, r3
   169b0:	sub	sp, fp, #4
   169b4:	pop	{fp, pc}
   169b8:	push	{fp, lr}
   169bc:	add	fp, sp, #4
   169c0:	sub	sp, sp, #24
   169c4:	str	r0, [fp, #-16]
   169c8:	str	r1, [fp, #-20]	; 0xffffffec
   169cc:	str	r2, [fp, #-24]	; 0xffffffe8
   169d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   169d4:	ldr	r3, [r3]
   169d8:	str	r3, [fp, #-8]
   169dc:	ldr	r3, [fp, #-16]
   169e0:	cmp	r3, #0
   169e4:	bne	16a30 <__assert_fail@plt+0x5ad4>
   169e8:	ldr	r3, [fp, #-8]
   169ec:	cmp	r3, #0
   169f0:	bne	16a94 <__assert_fail@plt+0x5b38>
   169f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   169f8:	mov	r0, #64	; 0x40
   169fc:	bl	18a9c <__assert_fail@plt+0x7b40>
   16a00:	mov	r3, r0
   16a04:	str	r3, [fp, #-8]
   16a08:	ldr	r3, [fp, #-8]
   16a0c:	cmp	r3, #0
   16a10:	moveq	r3, #1
   16a14:	movne	r3, #0
   16a18:	uxtb	r3, r3
   16a1c:	mov	r2, r3
   16a20:	ldr	r3, [fp, #-8]
   16a24:	add	r3, r2, r3
   16a28:	str	r3, [fp, #-8]
   16a2c:	b	16a94 <__assert_fail@plt+0x5b38>
   16a30:	ldr	r3, [fp, #-8]
   16a34:	lsr	r3, r3, #1
   16a38:	add	r3, r3, #1
   16a3c:	mvn	r2, r3
   16a40:	ldr	r3, [fp, #-8]
   16a44:	cmp	r2, r3
   16a48:	bcs	16a6c <__assert_fail@plt+0x5b10>
   16a4c:	ldr	r3, [fp, #-8]
   16a50:	lsr	r2, r3, #1
   16a54:	ldr	r3, [fp, #-8]
   16a58:	add	r3, r2, r3
   16a5c:	add	r3, r3, #1
   16a60:	str	r3, [fp, #-8]
   16a64:	mov	r3, #1
   16a68:	b	16a88 <__assert_fail@plt+0x5b2c>
   16a6c:	ldr	r3, [fp, #-8]
   16a70:	lsr	r2, r3, #1
   16a74:	ldr	r3, [fp, #-8]
   16a78:	add	r3, r2, r3
   16a7c:	add	r3, r3, #1
   16a80:	str	r3, [fp, #-8]
   16a84:	mov	r3, #0
   16a88:	cmp	r3, #0
   16a8c:	beq	16a94 <__assert_fail@plt+0x5b38>
   16a90:	bl	1725c <__assert_fail@plt+0x6300>
   16a94:	ldr	r3, [fp, #-8]
   16a98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16a9c:	mov	r1, r3
   16aa0:	ldr	r0, [fp, #-16]
   16aa4:	bl	16868 <__assert_fail@plt+0x590c>
   16aa8:	str	r0, [fp, #-16]
   16aac:	ldr	r2, [fp, #-8]
   16ab0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ab4:	str	r2, [r3]
   16ab8:	ldr	r3, [fp, #-16]
   16abc:	mov	r0, r3
   16ac0:	sub	sp, fp, #4
   16ac4:	pop	{fp, pc}
   16ac8:	push	{fp, lr}
   16acc:	add	fp, sp, #4
   16ad0:	sub	sp, sp, #32
   16ad4:	str	r0, [fp, #-24]	; 0xffffffe8
   16ad8:	str	r1, [fp, #-28]	; 0xffffffe4
   16adc:	str	r2, [fp, #-32]	; 0xffffffe0
   16ae0:	str	r3, [fp, #-36]	; 0xffffffdc
   16ae4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ae8:	ldr	r3, [r3]
   16aec:	str	r3, [fp, #-8]
   16af0:	ldr	r3, [fp, #-8]
   16af4:	asr	r3, r3, #1
   16af8:	cmp	r3, #0
   16afc:	bge	16b24 <__assert_fail@plt+0x5bc8>
   16b00:	ldr	r3, [fp, #-8]
   16b04:	asr	r3, r3, #1
   16b08:	rsb	r2, r3, #-2147483648	; 0x80000000
   16b0c:	ldr	r3, [fp, #-8]
   16b10:	cmp	r2, r3
   16b14:	movgt	r3, #1
   16b18:	movle	r3, #0
   16b1c:	uxtb	r3, r3
   16b20:	b	16b78 <__assert_fail@plt+0x5c1c>
   16b24:	ldr	r3, [fp, #-8]
   16b28:	cmp	r3, #0
   16b2c:	bge	16b54 <__assert_fail@plt+0x5bf8>
   16b30:	ldr	r3, [fp, #-8]
   16b34:	asr	r2, r3, #1
   16b38:	ldr	r3, [fp, #-8]
   16b3c:	rsb	r3, r3, #-2147483648	; 0x80000000
   16b40:	cmp	r2, r3
   16b44:	movlt	r3, #1
   16b48:	movge	r3, #0
   16b4c:	uxtb	r3, r3
   16b50:	b	16b78 <__assert_fail@plt+0x5c1c>
   16b54:	ldr	r3, [fp, #-8]
   16b58:	asr	r2, r3, #1
   16b5c:	mvn	r3, #-2147483648	; 0x80000000
   16b60:	sub	r3, r3, r2
   16b64:	ldr	r2, [fp, #-8]
   16b68:	cmp	r3, r2
   16b6c:	movlt	r3, #1
   16b70:	movge	r3, #0
   16b74:	uxtb	r3, r3
   16b78:	cmp	r3, #0
   16b7c:	beq	16ba0 <__assert_fail@plt+0x5c44>
   16b80:	ldr	r3, [fp, #-8]
   16b84:	asr	r3, r3, #1
   16b88:	mov	r2, r3
   16b8c:	ldr	r3, [fp, #-8]
   16b90:	add	r3, r2, r3
   16b94:	str	r3, [fp, #-16]
   16b98:	mov	r3, #1
   16b9c:	b	16bbc <__assert_fail@plt+0x5c60>
   16ba0:	ldr	r3, [fp, #-8]
   16ba4:	asr	r3, r3, #1
   16ba8:	mov	r2, r3
   16bac:	ldr	r3, [fp, #-8]
   16bb0:	add	r3, r2, r3
   16bb4:	str	r3, [fp, #-16]
   16bb8:	mov	r3, #0
   16bbc:	cmp	r3, #0
   16bc0:	beq	16bcc <__assert_fail@plt+0x5c70>
   16bc4:	mvn	r3, #-2147483648	; 0x80000000
   16bc8:	str	r3, [fp, #-16]
   16bcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bd0:	cmp	r3, #0
   16bd4:	blt	16bf0 <__assert_fail@plt+0x5c94>
   16bd8:	ldr	r3, [fp, #-16]
   16bdc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16be0:	cmp	r2, r3
   16be4:	bge	16bf0 <__assert_fail@plt+0x5c94>
   16be8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bec:	str	r3, [fp, #-16]
   16bf0:	ldr	r3, [fp, #4]
   16bf4:	cmp	r3, #0
   16bf8:	bge	16c88 <__assert_fail@plt+0x5d2c>
   16bfc:	ldr	r3, [fp, #-16]
   16c00:	cmp	r3, #0
   16c04:	bge	16c34 <__assert_fail@plt+0x5cd8>
   16c08:	ldr	r1, [fp, #4]
   16c0c:	mvn	r0, #-2147483648	; 0x80000000
   16c10:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16c14:	mov	r3, r0
   16c18:	mov	r2, r3
   16c1c:	ldr	r3, [fp, #-16]
   16c20:	cmp	r2, r3
   16c24:	movgt	r3, #1
   16c28:	movle	r3, #0
   16c2c:	uxtb	r3, r3
   16c30:	b	16d28 <__assert_fail@plt+0x5dcc>
   16c34:	ldr	r3, [fp, #4]
   16c38:	cmn	r3, #1
   16c3c:	bne	16c5c <__assert_fail@plt+0x5d00>
   16c40:	ldr	r3, [fp, #-16]
   16c44:	add	r3, r3, #-2147483648	; 0x80000000
   16c48:	cmp	r3, #0
   16c4c:	movgt	r3, #1
   16c50:	movle	r3, #0
   16c54:	uxtb	r3, r3
   16c58:	b	16d28 <__assert_fail@plt+0x5dcc>
   16c5c:	ldr	r1, [fp, #4]
   16c60:	mov	r0, #-2147483648	; 0x80000000
   16c64:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16c68:	mov	r3, r0
   16c6c:	mov	r2, r3
   16c70:	ldr	r3, [fp, #-16]
   16c74:	cmp	r2, r3
   16c78:	movlt	r3, #1
   16c7c:	movge	r3, #0
   16c80:	uxtb	r3, r3
   16c84:	b	16d28 <__assert_fail@plt+0x5dcc>
   16c88:	ldr	r3, [fp, #4]
   16c8c:	cmp	r3, #0
   16c90:	beq	16d24 <__assert_fail@plt+0x5dc8>
   16c94:	ldr	r3, [fp, #-16]
   16c98:	cmp	r3, #0
   16c9c:	bge	16cf8 <__assert_fail@plt+0x5d9c>
   16ca0:	ldr	r3, [fp, #-16]
   16ca4:	cmn	r3, #1
   16ca8:	bne	16cc8 <__assert_fail@plt+0x5d6c>
   16cac:	ldr	r3, [fp, #4]
   16cb0:	add	r3, r3, #-2147483648	; 0x80000000
   16cb4:	cmp	r3, #0
   16cb8:	movgt	r3, #1
   16cbc:	movle	r3, #0
   16cc0:	uxtb	r3, r3
   16cc4:	b	16d28 <__assert_fail@plt+0x5dcc>
   16cc8:	ldr	r3, [fp, #-16]
   16ccc:	mov	r1, r3
   16cd0:	mov	r0, #-2147483648	; 0x80000000
   16cd4:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16cd8:	mov	r3, r0
   16cdc:	mov	r2, r3
   16ce0:	ldr	r3, [fp, #4]
   16ce4:	cmp	r2, r3
   16ce8:	movlt	r3, #1
   16cec:	movge	r3, #0
   16cf0:	uxtb	r3, r3
   16cf4:	b	16d28 <__assert_fail@plt+0x5dcc>
   16cf8:	ldr	r1, [fp, #4]
   16cfc:	mvn	r0, #-2147483648	; 0x80000000
   16d00:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16d04:	mov	r3, r0
   16d08:	mov	r2, r3
   16d0c:	ldr	r3, [fp, #-16]
   16d10:	cmp	r2, r3
   16d14:	movlt	r3, #1
   16d18:	movge	r3, #0
   16d1c:	uxtb	r3, r3
   16d20:	b	16d28 <__assert_fail@plt+0x5dcc>
   16d24:	mov	r3, #0
   16d28:	cmp	r3, #0
   16d2c:	beq	16d4c <__assert_fail@plt+0x5df0>
   16d30:	ldr	r3, [fp, #-16]
   16d34:	mov	r2, r3
   16d38:	ldr	r3, [fp, #4]
   16d3c:	mul	r3, r3, r2
   16d40:	str	r3, [fp, #-20]	; 0xffffffec
   16d44:	mov	r3, #1
   16d48:	b	16d64 <__assert_fail@plt+0x5e08>
   16d4c:	ldr	r3, [fp, #-16]
   16d50:	mov	r2, r3
   16d54:	ldr	r3, [fp, #4]
   16d58:	mul	r3, r3, r2
   16d5c:	str	r3, [fp, #-20]	; 0xffffffec
   16d60:	mov	r3, #0
   16d64:	cmp	r3, #0
   16d68:	beq	16d74 <__assert_fail@plt+0x5e18>
   16d6c:	mvn	r3, #-2147483648	; 0x80000000
   16d70:	b	16d8c <__assert_fail@plt+0x5e30>
   16d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d78:	cmp	r3, #63	; 0x3f
   16d7c:	bgt	16d88 <__assert_fail@plt+0x5e2c>
   16d80:	mov	r3, #64	; 0x40
   16d84:	b	16d8c <__assert_fail@plt+0x5e30>
   16d88:	mov	r3, #0
   16d8c:	str	r3, [fp, #-12]
   16d90:	ldr	r3, [fp, #-12]
   16d94:	cmp	r3, #0
   16d98:	beq	16dd4 <__assert_fail@plt+0x5e78>
   16d9c:	ldr	r1, [fp, #4]
   16da0:	ldr	r0, [fp, #-12]
   16da4:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16da8:	mov	r3, r0
   16dac:	str	r3, [fp, #-16]
   16db0:	ldr	r3, [fp, #-12]
   16db4:	ldr	r1, [fp, #4]
   16db8:	mov	r0, r3
   16dbc:	bl	18ec8 <__assert_fail@plt+0x7f6c>
   16dc0:	mov	r3, r1
   16dc4:	mov	r2, r3
   16dc8:	ldr	r3, [fp, #-12]
   16dcc:	sub	r3, r3, r2
   16dd0:	str	r3, [fp, #-20]	; 0xffffffec
   16dd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dd8:	cmp	r3, #0
   16ddc:	bne	16dec <__assert_fail@plt+0x5e90>
   16de0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16de4:	mov	r2, #0
   16de8:	str	r2, [r3]
   16dec:	ldr	r2, [fp, #-16]
   16df0:	ldr	r3, [fp, #-8]
   16df4:	sub	r2, r2, r3
   16df8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16dfc:	cmp	r2, r3
   16e00:	bge	17038 <__assert_fail@plt+0x60dc>
   16e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e08:	cmp	r3, #0
   16e0c:	bge	16e30 <__assert_fail@plt+0x5ed4>
   16e10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e14:	rsb	r2, r3, #-2147483648	; 0x80000000
   16e18:	ldr	r3, [fp, #-8]
   16e1c:	cmp	r2, r3
   16e20:	movgt	r3, #1
   16e24:	movle	r3, #0
   16e28:	uxtb	r3, r3
   16e2c:	b	16e7c <__assert_fail@plt+0x5f20>
   16e30:	ldr	r3, [fp, #-8]
   16e34:	cmp	r3, #0
   16e38:	bge	16e5c <__assert_fail@plt+0x5f00>
   16e3c:	ldr	r3, [fp, #-8]
   16e40:	rsb	r2, r3, #-2147483648	; 0x80000000
   16e44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e48:	cmp	r2, r3
   16e4c:	movgt	r3, #1
   16e50:	movle	r3, #0
   16e54:	uxtb	r3, r3
   16e58:	b	16e7c <__assert_fail@plt+0x5f20>
   16e5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e60:	mvn	r3, #-2147483648	; 0x80000000
   16e64:	sub	r3, r3, r2
   16e68:	ldr	r2, [fp, #-8]
   16e6c:	cmp	r3, r2
   16e70:	movlt	r3, #1
   16e74:	movge	r3, #0
   16e78:	uxtb	r3, r3
   16e7c:	cmp	r3, #0
   16e80:	beq	16e98 <__assert_fail@plt+0x5f3c>
   16e84:	ldr	r2, [fp, #-8]
   16e88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e8c:	add	r3, r2, r3
   16e90:	str	r3, [fp, #-16]
   16e94:	b	17034 <__assert_fail@plt+0x60d8>
   16e98:	ldr	r2, [fp, #-8]
   16e9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ea0:	add	r3, r2, r3
   16ea4:	str	r3, [fp, #-16]
   16ea8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16eac:	cmp	r3, #0
   16eb0:	blt	16ec4 <__assert_fail@plt+0x5f68>
   16eb4:	ldr	r3, [fp, #-16]
   16eb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16ebc:	cmp	r2, r3
   16ec0:	blt	17034 <__assert_fail@plt+0x60d8>
   16ec4:	ldr	r3, [fp, #4]
   16ec8:	cmp	r3, #0
   16ecc:	bge	16f5c <__assert_fail@plt+0x6000>
   16ed0:	ldr	r3, [fp, #-16]
   16ed4:	cmp	r3, #0
   16ed8:	bge	16f08 <__assert_fail@plt+0x5fac>
   16edc:	ldr	r1, [fp, #4]
   16ee0:	mvn	r0, #-2147483648	; 0x80000000
   16ee4:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16ee8:	mov	r3, r0
   16eec:	mov	r2, r3
   16ef0:	ldr	r3, [fp, #-16]
   16ef4:	cmp	r2, r3
   16ef8:	movgt	r3, #1
   16efc:	movle	r3, #0
   16f00:	uxtb	r3, r3
   16f04:	b	16ffc <__assert_fail@plt+0x60a0>
   16f08:	ldr	r3, [fp, #4]
   16f0c:	cmn	r3, #1
   16f10:	bne	16f30 <__assert_fail@plt+0x5fd4>
   16f14:	ldr	r3, [fp, #-16]
   16f18:	add	r3, r3, #-2147483648	; 0x80000000
   16f1c:	cmp	r3, #0
   16f20:	movgt	r3, #1
   16f24:	movle	r3, #0
   16f28:	uxtb	r3, r3
   16f2c:	b	16ffc <__assert_fail@plt+0x60a0>
   16f30:	ldr	r1, [fp, #4]
   16f34:	mov	r0, #-2147483648	; 0x80000000
   16f38:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16f3c:	mov	r3, r0
   16f40:	mov	r2, r3
   16f44:	ldr	r3, [fp, #-16]
   16f48:	cmp	r2, r3
   16f4c:	movlt	r3, #1
   16f50:	movge	r3, #0
   16f54:	uxtb	r3, r3
   16f58:	b	16ffc <__assert_fail@plt+0x60a0>
   16f5c:	ldr	r3, [fp, #4]
   16f60:	cmp	r3, #0
   16f64:	beq	16ff8 <__assert_fail@plt+0x609c>
   16f68:	ldr	r3, [fp, #-16]
   16f6c:	cmp	r3, #0
   16f70:	bge	16fcc <__assert_fail@plt+0x6070>
   16f74:	ldr	r3, [fp, #-16]
   16f78:	cmn	r3, #1
   16f7c:	bne	16f9c <__assert_fail@plt+0x6040>
   16f80:	ldr	r3, [fp, #4]
   16f84:	add	r3, r3, #-2147483648	; 0x80000000
   16f88:	cmp	r3, #0
   16f8c:	movgt	r3, #1
   16f90:	movle	r3, #0
   16f94:	uxtb	r3, r3
   16f98:	b	16ffc <__assert_fail@plt+0x60a0>
   16f9c:	ldr	r3, [fp, #-16]
   16fa0:	mov	r1, r3
   16fa4:	mov	r0, #-2147483648	; 0x80000000
   16fa8:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16fac:	mov	r3, r0
   16fb0:	mov	r2, r3
   16fb4:	ldr	r3, [fp, #4]
   16fb8:	cmp	r2, r3
   16fbc:	movlt	r3, #1
   16fc0:	movge	r3, #0
   16fc4:	uxtb	r3, r3
   16fc8:	b	16ffc <__assert_fail@plt+0x60a0>
   16fcc:	ldr	r1, [fp, #4]
   16fd0:	mvn	r0, #-2147483648	; 0x80000000
   16fd4:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   16fd8:	mov	r3, r0
   16fdc:	mov	r2, r3
   16fe0:	ldr	r3, [fp, #-16]
   16fe4:	cmp	r2, r3
   16fe8:	movlt	r3, #1
   16fec:	movge	r3, #0
   16ff0:	uxtb	r3, r3
   16ff4:	b	16ffc <__assert_fail@plt+0x60a0>
   16ff8:	mov	r3, #0
   16ffc:	cmp	r3, #0
   17000:	beq	1701c <__assert_fail@plt+0x60c0>
   17004:	ldr	r3, [fp, #-16]
   17008:	mov	r2, r3
   1700c:	ldr	r3, [fp, #4]
   17010:	mul	r3, r3, r2
   17014:	str	r3, [fp, #-20]	; 0xffffffec
   17018:	b	17034 <__assert_fail@plt+0x60d8>
   1701c:	ldr	r3, [fp, #-16]
   17020:	mov	r2, r3
   17024:	ldr	r3, [fp, #4]
   17028:	mul	r3, r3, r2
   1702c:	str	r3, [fp, #-20]	; 0xffffffec
   17030:	b	17038 <__assert_fail@plt+0x60dc>
   17034:	bl	1725c <__assert_fail@plt+0x6300>
   17038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1703c:	mov	r1, r3
   17040:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17044:	bl	167d0 <__assert_fail@plt+0x5874>
   17048:	str	r0, [fp, #-24]	; 0xffffffe8
   1704c:	ldr	r2, [fp, #-16]
   17050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17054:	str	r2, [r3]
   17058:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1705c:	mov	r0, r3
   17060:	sub	sp, fp, #4
   17064:	pop	{fp, pc}
   17068:	push	{fp, lr}
   1706c:	add	fp, sp, #4
   17070:	sub	sp, sp, #8
   17074:	str	r0, [fp, #-8]
   17078:	mov	r1, #1
   1707c:	ldr	r0, [fp, #-8]
   17080:	bl	170c0 <__assert_fail@plt+0x6164>
   17084:	mov	r3, r0
   17088:	mov	r0, r3
   1708c:	sub	sp, fp, #4
   17090:	pop	{fp, pc}
   17094:	push	{fp, lr}
   17098:	add	fp, sp, #4
   1709c:	sub	sp, sp, #8
   170a0:	str	r0, [fp, #-8]
   170a4:	mov	r1, #1
   170a8:	ldr	r0, [fp, #-8]
   170ac:	bl	170fc <__assert_fail@plt+0x61a0>
   170b0:	mov	r3, r0
   170b4:	mov	r0, r3
   170b8:	sub	sp, fp, #4
   170bc:	pop	{fp, pc}
   170c0:	push	{fp, lr}
   170c4:	add	fp, sp, #4
   170c8:	sub	sp, sp, #8
   170cc:	str	r0, [fp, #-8]
   170d0:	str	r1, [fp, #-12]
   170d4:	ldr	r1, [fp, #-12]
   170d8:	ldr	r0, [fp, #-8]
   170dc:	bl	17c78 <__assert_fail@plt+0x6d1c>
   170e0:	mov	r3, r0
   170e4:	mov	r0, r3
   170e8:	bl	16710 <__assert_fail@plt+0x57b4>
   170ec:	mov	r3, r0
   170f0:	mov	r0, r3
   170f4:	sub	sp, fp, #4
   170f8:	pop	{fp, pc}
   170fc:	push	{fp, lr}
   17100:	add	fp, sp, #4
   17104:	sub	sp, sp, #8
   17108:	str	r0, [fp, #-8]
   1710c:	str	r1, [fp, #-12]
   17110:	ldr	r1, [fp, #-12]
   17114:	ldr	r0, [fp, #-8]
   17118:	bl	18150 <__assert_fail@plt+0x71f4>
   1711c:	mov	r3, r0
   17120:	mov	r0, r3
   17124:	bl	16710 <__assert_fail@plt+0x57b4>
   17128:	mov	r3, r0
   1712c:	mov	r0, r3
   17130:	sub	sp, fp, #4
   17134:	pop	{fp, pc}
   17138:	push	{fp, lr}
   1713c:	add	fp, sp, #4
   17140:	sub	sp, sp, #8
   17144:	str	r0, [fp, #-8]
   17148:	str	r1, [fp, #-12]
   1714c:	ldr	r0, [fp, #-12]
   17150:	bl	16740 <__assert_fail@plt+0x57e4>
   17154:	mov	r3, r0
   17158:	ldr	r2, [fp, #-12]
   1715c:	ldr	r1, [fp, #-8]
   17160:	mov	r0, r3
   17164:	bl	10d58 <memcpy@plt>
   17168:	mov	r3, r0
   1716c:	mov	r0, r3
   17170:	sub	sp, fp, #4
   17174:	pop	{fp, pc}
   17178:	push	{fp, lr}
   1717c:	add	fp, sp, #4
   17180:	sub	sp, sp, #8
   17184:	str	r0, [fp, #-8]
   17188:	str	r1, [fp, #-12]
   1718c:	ldr	r0, [fp, #-12]
   17190:	bl	16774 <__assert_fail@plt+0x5818>
   17194:	mov	r3, r0
   17198:	mov	r0, r3
   1719c:	ldr	r3, [fp, #-12]
   171a0:	mov	r2, r3
   171a4:	ldr	r1, [fp, #-8]
   171a8:	bl	10d58 <memcpy@plt>
   171ac:	mov	r3, r0
   171b0:	mov	r0, r3
   171b4:	sub	sp, fp, #4
   171b8:	pop	{fp, pc}
   171bc:	push	{fp, lr}
   171c0:	add	fp, sp, #4
   171c4:	sub	sp, sp, #16
   171c8:	str	r0, [fp, #-16]
   171cc:	str	r1, [fp, #-20]	; 0xffffffec
   171d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   171d4:	add	r3, r3, #1
   171d8:	mov	r0, r3
   171dc:	bl	16774 <__assert_fail@plt+0x5818>
   171e0:	mov	r3, r0
   171e4:	str	r3, [fp, #-8]
   171e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   171ec:	ldr	r2, [fp, #-8]
   171f0:	add	r3, r2, r3
   171f4:	mov	r2, #0
   171f8:	strb	r2, [r3]
   171fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17200:	mov	r2, r3
   17204:	ldr	r1, [fp, #-16]
   17208:	ldr	r0, [fp, #-8]
   1720c:	bl	10d58 <memcpy@plt>
   17210:	mov	r3, r0
   17214:	mov	r0, r3
   17218:	sub	sp, fp, #4
   1721c:	pop	{fp, pc}
   17220:	push	{fp, lr}
   17224:	add	fp, sp, #4
   17228:	sub	sp, sp, #8
   1722c:	str	r0, [fp, #-8]
   17230:	ldr	r0, [fp, #-8]
   17234:	bl	10e78 <strlen@plt>
   17238:	mov	r3, r0
   1723c:	add	r3, r3, #1
   17240:	mov	r1, r3
   17244:	ldr	r0, [fp, #-8]
   17248:	bl	17138 <__assert_fail@plt+0x61dc>
   1724c:	mov	r3, r0
   17250:	mov	r0, r3
   17254:	sub	sp, fp, #4
   17258:	pop	{fp, pc}
   1725c:	push	{r4, r5, fp, lr}
   17260:	add	fp, sp, #12
   17264:	ldr	r3, [pc, #32]	; 1728c <__assert_fail@plt+0x6330>
   17268:	ldr	r4, [r3]
   1726c:	ldr	r0, [pc, #28]	; 17290 <__assert_fail@plt+0x6334>
   17270:	bl	10e6c <gettext@plt>
   17274:	mov	r3, r0
   17278:	ldr	r2, [pc, #20]	; 17294 <__assert_fail@plt+0x6338>
   1727c:	mov	r1, #0
   17280:	mov	r0, r4
   17284:	bl	10e0c <error@plt>
   17288:	bl	10f44 <abort@plt>
   1728c:	strdeq	sl, [r2], -r4
   17290:	andeq	r9, r1, r0, lsl #27
   17294:	muleq	r1, r4, sp
   17298:	push	{r4, r5, fp, lr}
   1729c:	add	fp, sp, #12
   172a0:	sub	sp, sp, #40	; 0x28
   172a4:	str	r0, [fp, #-32]	; 0xffffffe0
   172a8:	str	r1, [fp, #-36]	; 0xffffffdc
   172ac:	strd	r2, [fp, #-44]	; 0xffffffd4
   172b0:	sub	r2, fp, #28
   172b4:	ldr	r3, [fp, #12]
   172b8:	str	r3, [sp]
   172bc:	mov	r3, r2
   172c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   172c4:	mov	r1, #0
   172c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172cc:	bl	17638 <__assert_fail@plt+0x66dc>
   172d0:	str	r0, [fp, #-16]
   172d4:	ldr	r3, [fp, #-16]
   172d8:	cmp	r3, #0
   172dc:	bne	17350 <__assert_fail@plt+0x63f4>
   172e0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   172e4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   172e8:	cmp	r1, r3
   172ec:	cmpeq	r0, r2
   172f0:	bcc	17308 <__assert_fail@plt+0x63ac>
   172f4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   172f8:	ldrd	r0, [fp, #4]
   172fc:	cmp	r1, r3
   17300:	cmpeq	r0, r2
   17304:	bcs	1738c <__assert_fail@plt+0x6430>
   17308:	mov	r3, #1
   1730c:	str	r3, [fp, #-16]
   17310:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17314:	mvn	r0, #-1073741824	; 0xc0000000
   17318:	mov	r1, #0
   1731c:	cmp	r3, r1
   17320:	cmpeq	r2, r0
   17324:	bls	1733c <__assert_fail@plt+0x63e0>
   17328:	bl	10e9c <__errno_location@plt>
   1732c:	mov	r2, r0
   17330:	mov	r3, #75	; 0x4b
   17334:	str	r3, [r2]
   17338:	b	1738c <__assert_fail@plt+0x6430>
   1733c:	bl	10e9c <__errno_location@plt>
   17340:	mov	r2, r0
   17344:	mov	r3, #34	; 0x22
   17348:	str	r3, [r2]
   1734c:	b	1738c <__assert_fail@plt+0x6430>
   17350:	ldr	r3, [fp, #-16]
   17354:	cmp	r3, #1
   17358:	bne	17370 <__assert_fail@plt+0x6414>
   1735c:	bl	10e9c <__errno_location@plt>
   17360:	mov	r2, r0
   17364:	mov	r3, #75	; 0x4b
   17368:	str	r3, [r2]
   1736c:	b	1738c <__assert_fail@plt+0x6430>
   17370:	ldr	r3, [fp, #-16]
   17374:	cmp	r3, #3
   17378:	bne	1738c <__assert_fail@plt+0x6430>
   1737c:	bl	10e9c <__errno_location@plt>
   17380:	mov	r2, r0
   17384:	mov	r3, #0
   17388:	str	r3, [r2]
   1738c:	ldr	r3, [fp, #-16]
   17390:	cmp	r3, #0
   17394:	beq	173fc <__assert_fail@plt+0x64a0>
   17398:	ldr	r3, [fp, #20]
   1739c:	cmp	r3, #0
   173a0:	beq	173ac <__assert_fail@plt+0x6450>
   173a4:	ldr	r4, [fp, #20]
   173a8:	b	173b0 <__assert_fail@plt+0x6454>
   173ac:	mov	r4, #1
   173b0:	bl	10e9c <__errno_location@plt>
   173b4:	mov	r3, r0
   173b8:	ldr	r3, [r3]
   173bc:	cmp	r3, #22
   173c0:	beq	173d4 <__assert_fail@plt+0x6478>
   173c4:	bl	10e9c <__errno_location@plt>
   173c8:	mov	r3, r0
   173cc:	ldr	r5, [r3]
   173d0:	b	173d8 <__assert_fail@plt+0x647c>
   173d4:	mov	r5, #0
   173d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173dc:	bl	15f28 <__assert_fail@plt+0x4fcc>
   173e0:	mov	r3, r0
   173e4:	str	r3, [sp]
   173e8:	ldr	r3, [fp, #16]
   173ec:	ldr	r2, [pc, #28]	; 17410 <__assert_fail@plt+0x64b4>
   173f0:	mov	r1, r5
   173f4:	mov	r0, r4
   173f8:	bl	10e0c <error@plt>
   173fc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17400:	mov	r0, r2
   17404:	mov	r1, r3
   17408:	sub	sp, fp, #12
   1740c:	pop	{r4, r5, fp, pc}
   17410:	muleq	r1, r8, sp
   17414:	push	{fp, lr}
   17418:	add	fp, sp, #4
   1741c:	sub	sp, sp, #40	; 0x28
   17420:	str	r0, [fp, #-8]
   17424:	strd	r2, [fp, #-20]	; 0xffffffec
   17428:	ldr	r3, [fp, #20]
   1742c:	str	r3, [sp, #16]
   17430:	ldr	r3, [fp, #16]
   17434:	str	r3, [sp, #12]
   17438:	ldr	r3, [fp, #12]
   1743c:	str	r3, [sp, #8]
   17440:	ldrd	r2, [fp, #4]
   17444:	strd	r2, [sp]
   17448:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1744c:	mov	r1, #10
   17450:	ldr	r0, [fp, #-8]
   17454:	bl	17298 <__assert_fail@plt+0x633c>
   17458:	mov	r2, r0
   1745c:	mov	r3, r1
   17460:	mov	r0, r2
   17464:	mov	r1, r3
   17468:	sub	sp, fp, #4
   1746c:	pop	{fp, pc}
   17470:	push	{fp, lr}
   17474:	add	fp, sp, #4
   17478:	sub	sp, sp, #16
   1747c:	str	r0, [fp, #-16]
   17480:	str	r1, [fp, #-20]	; 0xffffffec
   17484:	ldr	r3, [fp, #-20]	; 0xffffffec
   17488:	cmp	r3, #0
   1748c:	bge	174c8 <__assert_fail@plt+0x656c>
   17490:	ldr	r1, [fp, #-20]	; 0xffffffec
   17494:	mov	r0, #0
   17498:	bl	18ca8 <__assert_fail@plt+0x7d4c>
   1749c:	mov	r3, r0
   174a0:	mov	r0, r3
   174a4:	asr	r1, r0, #31
   174a8:	ldr	r3, [fp, #-16]
   174ac:	ldrd	r2, [r3]
   174b0:	cmp	r1, r3
   174b4:	cmpeq	r0, r2
   174b8:	movcc	r3, #1
   174bc:	movcs	r3, #0
   174c0:	uxtb	r3, r3
   174c4:	b	17524 <__assert_fail@plt+0x65c8>
   174c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   174cc:	cmp	r3, #0
   174d0:	beq	17518 <__assert_fail@plt+0x65bc>
   174d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   174d8:	mov	r2, r3
   174dc:	asr	r3, r2, #31
   174e0:	mvn	r0, #0
   174e4:	mvn	r1, #0
   174e8:	bl	18ee8 <__assert_fail@plt+0x7f8c>
   174ec:	mov	r2, r0
   174f0:	mov	r3, r1
   174f4:	mov	r0, r2
   174f8:	mov	r1, r3
   174fc:	ldr	r3, [fp, #-16]
   17500:	ldrd	r2, [r3]
   17504:	cmp	r1, r3
   17508:	cmpeq	r0, r2
   1750c:	bcs	17518 <__assert_fail@plt+0x65bc>
   17510:	mov	r3, #1
   17514:	b	1751c <__assert_fail@plt+0x65c0>
   17518:	mov	r3, #0
   1751c:	and	r3, r3, #1
   17520:	uxtb	r3, r3
   17524:	cmp	r3, #0
   17528:	beq	17564 <__assert_fail@plt+0x6608>
   1752c:	ldr	r3, [fp, #-16]
   17530:	ldrd	r0, [r3]
   17534:	ldr	r3, [fp, #-20]	; 0xffffffec
   17538:	mov	r2, r3
   1753c:	asr	r3, r2, #31
   17540:	mul	lr, r2, r1
   17544:	mul	ip, r0, r3
   17548:	add	ip, lr, ip
   1754c:	umull	r2, r3, r0, r2
   17550:	add	r1, ip, r3
   17554:	mov	r3, r1
   17558:	strd	r2, [fp, #-12]
   1755c:	mov	r3, #1
   17560:	b	17598 <__assert_fail@plt+0x663c>
   17564:	ldr	r3, [fp, #-16]
   17568:	ldrd	r0, [r3]
   1756c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17570:	mov	r2, r3
   17574:	asr	r3, r2, #31
   17578:	mul	lr, r2, r1
   1757c:	mul	ip, r0, r3
   17580:	add	ip, lr, ip
   17584:	umull	r2, r3, r0, r2
   17588:	add	r1, ip, r3
   1758c:	mov	r3, r1
   17590:	strd	r2, [fp, #-12]
   17594:	mov	r3, #0
   17598:	cmp	r3, #0
   1759c:	beq	175b8 <__assert_fail@plt+0x665c>
   175a0:	ldr	r1, [fp, #-16]
   175a4:	mvn	r2, #0
   175a8:	mvn	r3, #0
   175ac:	strd	r2, [r1]
   175b0:	mov	r3, #1
   175b4:	b	175c8 <__assert_fail@plt+0x666c>
   175b8:	ldrd	r2, [fp, #-12]
   175bc:	ldr	r1, [fp, #-16]
   175c0:	strd	r2, [r1]
   175c4:	mov	r3, #0
   175c8:	mov	r0, r3
   175cc:	sub	sp, fp, #4
   175d0:	pop	{fp, pc}
   175d4:	push	{fp, lr}
   175d8:	add	fp, sp, #4
   175dc:	sub	sp, sp, #24
   175e0:	str	r0, [fp, #-16]
   175e4:	str	r1, [fp, #-20]	; 0xffffffec
   175e8:	str	r2, [fp, #-24]	; 0xffffffe8
   175ec:	mov	r3, #0
   175f0:	str	r3, [fp, #-8]
   175f4:	b	17614 <__assert_fail@plt+0x66b8>
   175f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   175fc:	ldr	r0, [fp, #-16]
   17600:	bl	17470 <__assert_fail@plt+0x6514>
   17604:	mov	r2, r0
   17608:	ldr	r3, [fp, #-8]
   1760c:	orr	r3, r3, r2
   17610:	str	r3, [fp, #-8]
   17614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17618:	sub	r2, r3, #1
   1761c:	str	r2, [fp, #-24]	; 0xffffffe8
   17620:	cmp	r3, #0
   17624:	bne	175f8 <__assert_fail@plt+0x669c>
   17628:	ldr	r3, [fp, #-8]
   1762c:	mov	r0, r3
   17630:	sub	sp, fp, #4
   17634:	pop	{fp, pc}
   17638:	push	{fp, lr}
   1763c:	add	fp, sp, #4
   17640:	sub	sp, sp, #56	; 0x38
   17644:	str	r0, [fp, #-48]	; 0xffffffd0
   17648:	str	r1, [fp, #-52]	; 0xffffffcc
   1764c:	str	r2, [fp, #-56]	; 0xffffffc8
   17650:	str	r3, [fp, #-60]	; 0xffffffc4
   17654:	mov	r3, #0
   17658:	str	r3, [fp, #-8]
   1765c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17660:	cmp	r3, #0
   17664:	blt	17674 <__assert_fail@plt+0x6718>
   17668:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1766c:	cmp	r3, #36	; 0x24
   17670:	ble	17688 <__assert_fail@plt+0x672c>
   17674:	ldr	r3, [pc, #1520]	; 17c6c <__assert_fail@plt+0x6d10>
   17678:	mov	r2, #85	; 0x55
   1767c:	ldr	r1, [pc, #1516]	; 17c70 <__assert_fail@plt+0x6d14>
   17680:	ldr	r0, [pc, #1516]	; 17c74 <__assert_fail@plt+0x6d18>
   17684:	bl	10f5c <__assert_fail@plt>
   17688:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1768c:	cmp	r3, #0
   17690:	bne	1769c <__assert_fail@plt+0x6740>
   17694:	sub	r3, fp, #36	; 0x24
   17698:	b	176a0 <__assert_fail@plt+0x6744>
   1769c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   176a0:	str	r3, [fp, #-32]	; 0xffffffe0
   176a4:	bl	10e9c <__errno_location@plt>
   176a8:	mov	r2, r0
   176ac:	mov	r3, #0
   176b0:	str	r3, [r2]
   176b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   176b8:	str	r3, [fp, #-12]
   176bc:	ldr	r3, [fp, #-12]
   176c0:	ldrb	r3, [r3]
   176c4:	strb	r3, [fp, #-13]
   176c8:	b	176e4 <__assert_fail@plt+0x6788>
   176cc:	ldr	r3, [fp, #-12]
   176d0:	add	r3, r3, #1
   176d4:	str	r3, [fp, #-12]
   176d8:	ldr	r3, [fp, #-12]
   176dc:	ldrb	r3, [r3]
   176e0:	strb	r3, [fp, #-13]
   176e4:	bl	10e54 <__ctype_b_loc@plt>
   176e8:	mov	r3, r0
   176ec:	ldr	r2, [r3]
   176f0:	ldrb	r3, [fp, #-13]
   176f4:	lsl	r3, r3, #1
   176f8:	add	r3, r2, r3
   176fc:	ldrh	r3, [r3]
   17700:	and	r3, r3, #8192	; 0x2000
   17704:	cmp	r3, #0
   17708:	bne	176cc <__assert_fail@plt+0x6770>
   1770c:	ldrb	r3, [fp, #-13]
   17710:	cmp	r3, #45	; 0x2d
   17714:	bne	17720 <__assert_fail@plt+0x67c4>
   17718:	mov	r3, #4
   1771c:	b	17c60 <__assert_fail@plt+0x6d04>
   17720:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17724:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17728:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1772c:	bl	10ecc <strtoumax@plt>
   17730:	mov	r2, r0
   17734:	mov	r3, r1
   17738:	strd	r2, [fp, #-44]	; 0xffffffd4
   1773c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17740:	ldr	r2, [r3]
   17744:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17748:	cmp	r2, r3
   1774c:	bne	177ac <__assert_fail@plt+0x6850>
   17750:	ldr	r3, [fp, #4]
   17754:	cmp	r3, #0
   17758:	beq	177a4 <__assert_fail@plt+0x6848>
   1775c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17760:	ldr	r3, [r3]
   17764:	ldrb	r3, [r3]
   17768:	cmp	r3, #0
   1776c:	beq	177a4 <__assert_fail@plt+0x6848>
   17770:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17774:	ldr	r3, [r3]
   17778:	ldrb	r3, [r3]
   1777c:	mov	r1, r3
   17780:	ldr	r0, [fp, #4]
   17784:	bl	10e84 <strchr@plt>
   17788:	mov	r3, r0
   1778c:	cmp	r3, #0
   17790:	beq	177a4 <__assert_fail@plt+0x6848>
   17794:	mov	r2, #1
   17798:	mov	r3, #0
   1779c:	strd	r2, [fp, #-44]	; 0xffffffd4
   177a0:	b	177e4 <__assert_fail@plt+0x6888>
   177a4:	mov	r3, #4
   177a8:	b	17c60 <__assert_fail@plt+0x6d04>
   177ac:	bl	10e9c <__errno_location@plt>
   177b0:	mov	r3, r0
   177b4:	ldr	r3, [r3]
   177b8:	cmp	r3, #0
   177bc:	beq	177e4 <__assert_fail@plt+0x6888>
   177c0:	bl	10e9c <__errno_location@plt>
   177c4:	mov	r3, r0
   177c8:	ldr	r3, [r3]
   177cc:	cmp	r3, #34	; 0x22
   177d0:	beq	177dc <__assert_fail@plt+0x6880>
   177d4:	mov	r3, #4
   177d8:	b	17c60 <__assert_fail@plt+0x6d04>
   177dc:	mov	r3, #1
   177e0:	str	r3, [fp, #-8]
   177e4:	ldr	r3, [fp, #4]
   177e8:	cmp	r3, #0
   177ec:	bne	17804 <__assert_fail@plt+0x68a8>
   177f0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   177f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   177f8:	strd	r2, [r1]
   177fc:	ldr	r3, [fp, #-8]
   17800:	b	17c60 <__assert_fail@plt+0x6d04>
   17804:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17808:	ldr	r3, [r3]
   1780c:	ldrb	r3, [r3]
   17810:	cmp	r3, #0
   17814:	beq	17c50 <__assert_fail@plt+0x6cf4>
   17818:	mov	r3, #1024	; 0x400
   1781c:	str	r3, [fp, #-20]	; 0xffffffec
   17820:	mov	r3, #1
   17824:	str	r3, [fp, #-24]	; 0xffffffe8
   17828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1782c:	ldr	r3, [r3]
   17830:	ldrb	r3, [r3]
   17834:	mov	r1, r3
   17838:	ldr	r0, [fp, #4]
   1783c:	bl	10e84 <strchr@plt>
   17840:	mov	r3, r0
   17844:	cmp	r3, #0
   17848:	bne	17864 <__assert_fail@plt+0x6908>
   1784c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17850:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17854:	strd	r2, [r1]
   17858:	ldr	r3, [fp, #-8]
   1785c:	orr	r3, r3, #2
   17860:	b	17c60 <__assert_fail@plt+0x6d04>
   17864:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17868:	ldr	r3, [r3]
   1786c:	ldrb	r3, [r3]
   17870:	sub	r3, r3, #69	; 0x45
   17874:	cmp	r3, #47	; 0x2f
   17878:	ldrls	pc, [pc, r3, lsl #2]
   1787c:	b	179c8 <__assert_fail@plt+0x6a6c>
   17880:	andeq	r7, r1, r0, asr #18
   17884:	andeq	r7, r1, r8, asr #19
   17888:	andeq	r7, r1, r0, asr #18
   1788c:	andeq	r7, r1, r8, asr #19
   17890:	andeq	r7, r1, r8, asr #19
   17894:	andeq	r7, r1, r8, asr #19
   17898:	andeq	r7, r1, r0, asr #18
   1789c:	andeq	r7, r1, r8, asr #19
   178a0:	andeq	r7, r1, r0, asr #18
   178a4:	andeq	r7, r1, r8, asr #19
   178a8:	andeq	r7, r1, r8, asr #19
   178ac:	andeq	r7, r1, r0, asr #18
   178b0:	andeq	r7, r1, r8, asr #19
   178b4:	andeq	r7, r1, r8, asr #19
   178b8:	andeq	r7, r1, r8, asr #19
   178bc:	andeq	r7, r1, r0, asr #18
   178c0:	andeq	r7, r1, r8, asr #19
   178c4:	andeq	r7, r1, r8, asr #19
   178c8:	andeq	r7, r1, r8, asr #19
   178cc:	andeq	r7, r1, r8, asr #19
   178d0:	andeq	r7, r1, r0, asr #18
   178d4:	andeq	r7, r1, r0, asr #18
   178d8:	andeq	r7, r1, r8, asr #19
   178dc:	andeq	r7, r1, r8, asr #19
   178e0:	andeq	r7, r1, r8, asr #19
   178e4:	andeq	r7, r1, r8, asr #19
   178e8:	andeq	r7, r1, r8, asr #19
   178ec:	andeq	r7, r1, r8, asr #19
   178f0:	andeq	r7, r1, r8, asr #19
   178f4:	andeq	r7, r1, r8, asr #19
   178f8:	andeq	r7, r1, r8, asr #19
   178fc:	andeq	r7, r1, r8, asr #19
   17900:	andeq	r7, r1, r8, asr #19
   17904:	andeq	r7, r1, r8, asr #19
   17908:	andeq	r7, r1, r0, asr #18
   1790c:	andeq	r7, r1, r8, asr #19
   17910:	andeq	r7, r1, r8, asr #19
   17914:	andeq	r7, r1, r8, asr #19
   17918:	andeq	r7, r1, r0, asr #18
   1791c:	andeq	r7, r1, r8, asr #19
   17920:	andeq	r7, r1, r0, asr #18
   17924:	andeq	r7, r1, r8, asr #19
   17928:	andeq	r7, r1, r8, asr #19
   1792c:	andeq	r7, r1, r8, asr #19
   17930:	andeq	r7, r1, r8, asr #19
   17934:	andeq	r7, r1, r8, asr #19
   17938:	andeq	r7, r1, r8, asr #19
   1793c:	andeq	r7, r1, r0, asr #18
   17940:	mov	r1, #48	; 0x30
   17944:	ldr	r0, [fp, #4]
   17948:	bl	10e84 <strchr@plt>
   1794c:	mov	r3, r0
   17950:	cmp	r3, #0
   17954:	beq	179c8 <__assert_fail@plt+0x6a6c>
   17958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1795c:	ldr	r3, [r3]
   17960:	add	r3, r3, #1
   17964:	ldrb	r3, [r3]
   17968:	cmp	r3, #68	; 0x44
   1796c:	beq	179ac <__assert_fail@plt+0x6a50>
   17970:	cmp	r3, #105	; 0x69
   17974:	beq	17984 <__assert_fail@plt+0x6a28>
   17978:	cmp	r3, #66	; 0x42
   1797c:	beq	179ac <__assert_fail@plt+0x6a50>
   17980:	b	179c8 <__assert_fail@plt+0x6a6c>
   17984:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17988:	ldr	r3, [r3]
   1798c:	add	r3, r3, #2
   17990:	ldrb	r3, [r3]
   17994:	cmp	r3, #66	; 0x42
   17998:	bne	179c4 <__assert_fail@plt+0x6a68>
   1799c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179a0:	add	r3, r3, #2
   179a4:	str	r3, [fp, #-24]	; 0xffffffe8
   179a8:	b	179c4 <__assert_fail@plt+0x6a68>
   179ac:	mov	r3, #1000	; 0x3e8
   179b0:	str	r3, [fp, #-20]	; 0xffffffec
   179b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179b8:	add	r3, r3, #1
   179bc:	str	r3, [fp, #-24]	; 0xffffffe8
   179c0:	b	179c8 <__assert_fail@plt+0x6a6c>
   179c4:	nop			; (mov r0, r0)
   179c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   179cc:	ldr	r3, [r3]
   179d0:	ldrb	r3, [r3]
   179d4:	sub	r3, r3, #66	; 0x42
   179d8:	cmp	r3, #53	; 0x35
   179dc:	ldrls	pc, [pc, r3, lsl #2]
   179e0:	b	17bf0 <__assert_fail@plt+0x6c94>
   179e4:	ldrdeq	r7, [r1], -r4
   179e8:	strdeq	r7, [r1], -r0
   179ec:	strdeq	r7, [r1], -r0
   179f0:	strdeq	r7, [r1], -r8
   179f4:	strdeq	r7, [r1], -r0
   179f8:	andeq	r7, r1, r4, lsl fp
   179fc:	strdeq	r7, [r1], -r0
   17a00:	strdeq	r7, [r1], -r0
   17a04:	strdeq	r7, [r1], -r0
   17a08:	andeq	r7, r1, r0, lsr fp
   17a0c:	strdeq	r7, [r1], -r0
   17a10:	andeq	r7, r1, ip, asr #22
   17a14:	strdeq	r7, [r1], -r0
   17a18:	strdeq	r7, [r1], -r0
   17a1c:	andeq	r7, r1, r8, ror #22
   17a20:	strdeq	r7, [r1], -r0
   17a24:	strdeq	r7, [r1], -r0
   17a28:	strdeq	r7, [r1], -r0
   17a2c:	andeq	r7, r1, r4, lsl #23
   17a30:	strdeq	r7, [r1], -r0
   17a34:	strdeq	r7, [r1], -r0
   17a38:	strdeq	r7, [r1], -r0
   17a3c:	strdeq	r7, [r1], -r0
   17a40:			; <UNDEFINED> instruction: 0x00017bb8
   17a44:	ldrdeq	r7, [r1], -r4
   17a48:	strdeq	r7, [r1], -r0
   17a4c:	strdeq	r7, [r1], -r0
   17a50:	strdeq	r7, [r1], -r0
   17a54:	strdeq	r7, [r1], -r0
   17a58:	strdeq	r7, [r1], -r0
   17a5c:	strdeq	r7, [r1], -r0
   17a60:	strdeq	r7, [r1], -r0
   17a64:			; <UNDEFINED> instruction: 0x00017abc
   17a68:	andeq	r7, r1, ip, ror #21
   17a6c:	strdeq	r7, [r1], -r0
   17a70:	strdeq	r7, [r1], -r0
   17a74:	strdeq	r7, [r1], -r0
   17a78:	andeq	r7, r1, r4, lsl fp
   17a7c:	strdeq	r7, [r1], -r0
   17a80:	strdeq	r7, [r1], -r0
   17a84:	strdeq	r7, [r1], -r0
   17a88:	andeq	r7, r1, r0, lsr fp
   17a8c:	strdeq	r7, [r1], -r0
   17a90:	andeq	r7, r1, ip, asr #22
   17a94:	strdeq	r7, [r1], -r0
   17a98:	strdeq	r7, [r1], -r0
   17a9c:	strdeq	r7, [r1], -r0
   17aa0:	strdeq	r7, [r1], -r0
   17aa4:	strdeq	r7, [r1], -r0
   17aa8:	strdeq	r7, [r1], -r0
   17aac:	andeq	r7, r1, r4, lsl #23
   17ab0:	strdeq	r7, [r1], -r0
   17ab4:	strdeq	r7, [r1], -r0
   17ab8:	andeq	r7, r1, r0, lsr #23
   17abc:	sub	r3, fp, #44	; 0x2c
   17ac0:	mov	r1, #512	; 0x200
   17ac4:	mov	r0, r3
   17ac8:	bl	17470 <__assert_fail@plt+0x6514>
   17acc:	str	r0, [fp, #-28]	; 0xffffffe4
   17ad0:	b	17c08 <__assert_fail@plt+0x6cac>
   17ad4:	sub	r3, fp, #44	; 0x2c
   17ad8:	mov	r1, #1024	; 0x400
   17adc:	mov	r0, r3
   17ae0:	bl	17470 <__assert_fail@plt+0x6514>
   17ae4:	str	r0, [fp, #-28]	; 0xffffffe4
   17ae8:	b	17c08 <__assert_fail@plt+0x6cac>
   17aec:	mov	r3, #0
   17af0:	str	r3, [fp, #-28]	; 0xffffffe4
   17af4:	b	17c08 <__assert_fail@plt+0x6cac>
   17af8:	sub	r3, fp, #44	; 0x2c
   17afc:	mov	r2, #6
   17b00:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b04:	mov	r0, r3
   17b08:	bl	175d4 <__assert_fail@plt+0x6678>
   17b0c:	str	r0, [fp, #-28]	; 0xffffffe4
   17b10:	b	17c08 <__assert_fail@plt+0x6cac>
   17b14:	sub	r3, fp, #44	; 0x2c
   17b18:	mov	r2, #3
   17b1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b20:	mov	r0, r3
   17b24:	bl	175d4 <__assert_fail@plt+0x6678>
   17b28:	str	r0, [fp, #-28]	; 0xffffffe4
   17b2c:	b	17c08 <__assert_fail@plt+0x6cac>
   17b30:	sub	r3, fp, #44	; 0x2c
   17b34:	mov	r2, #1
   17b38:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b3c:	mov	r0, r3
   17b40:	bl	175d4 <__assert_fail@plt+0x6678>
   17b44:	str	r0, [fp, #-28]	; 0xffffffe4
   17b48:	b	17c08 <__assert_fail@plt+0x6cac>
   17b4c:	sub	r3, fp, #44	; 0x2c
   17b50:	mov	r2, #2
   17b54:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b58:	mov	r0, r3
   17b5c:	bl	175d4 <__assert_fail@plt+0x6678>
   17b60:	str	r0, [fp, #-28]	; 0xffffffe4
   17b64:	b	17c08 <__assert_fail@plt+0x6cac>
   17b68:	sub	r3, fp, #44	; 0x2c
   17b6c:	mov	r2, #5
   17b70:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b74:	mov	r0, r3
   17b78:	bl	175d4 <__assert_fail@plt+0x6678>
   17b7c:	str	r0, [fp, #-28]	; 0xffffffe4
   17b80:	b	17c08 <__assert_fail@plt+0x6cac>
   17b84:	sub	r3, fp, #44	; 0x2c
   17b88:	mov	r2, #4
   17b8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b90:	mov	r0, r3
   17b94:	bl	175d4 <__assert_fail@plt+0x6678>
   17b98:	str	r0, [fp, #-28]	; 0xffffffe4
   17b9c:	b	17c08 <__assert_fail@plt+0x6cac>
   17ba0:	sub	r3, fp, #44	; 0x2c
   17ba4:	mov	r1, #2
   17ba8:	mov	r0, r3
   17bac:	bl	17470 <__assert_fail@plt+0x6514>
   17bb0:	str	r0, [fp, #-28]	; 0xffffffe4
   17bb4:	b	17c08 <__assert_fail@plt+0x6cac>
   17bb8:	sub	r3, fp, #44	; 0x2c
   17bbc:	mov	r2, #8
   17bc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   17bc4:	mov	r0, r3
   17bc8:	bl	175d4 <__assert_fail@plt+0x6678>
   17bcc:	str	r0, [fp, #-28]	; 0xffffffe4
   17bd0:	b	17c08 <__assert_fail@plt+0x6cac>
   17bd4:	sub	r3, fp, #44	; 0x2c
   17bd8:	mov	r2, #7
   17bdc:	ldr	r1, [fp, #-20]	; 0xffffffec
   17be0:	mov	r0, r3
   17be4:	bl	175d4 <__assert_fail@plt+0x6678>
   17be8:	str	r0, [fp, #-28]	; 0xffffffe4
   17bec:	b	17c08 <__assert_fail@plt+0x6cac>
   17bf0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17bf4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17bf8:	strd	r2, [r1]
   17bfc:	ldr	r3, [fp, #-8]
   17c00:	orr	r3, r3, #2
   17c04:	b	17c60 <__assert_fail@plt+0x6d04>
   17c08:	ldr	r2, [fp, #-8]
   17c0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17c10:	orr	r3, r2, r3
   17c14:	str	r3, [fp, #-8]
   17c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c1c:	ldr	r2, [r3]
   17c20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c24:	add	r2, r2, r3
   17c28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c2c:	str	r2, [r3]
   17c30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c34:	ldr	r3, [r3]
   17c38:	ldrb	r3, [r3]
   17c3c:	cmp	r3, #0
   17c40:	beq	17c50 <__assert_fail@plt+0x6cf4>
   17c44:	ldr	r3, [fp, #-8]
   17c48:	orr	r3, r3, #2
   17c4c:	str	r3, [fp, #-8]
   17c50:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17c54:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17c58:	strd	r2, [r1]
   17c5c:	ldr	r3, [fp, #-8]
   17c60:	mov	r0, r3
   17c64:	sub	sp, fp, #4
   17c68:	pop	{fp, pc}
   17c6c:	ldrdeq	r9, [r1], -r8
   17c70:	andeq	r9, r1, r0, lsr #27
   17c74:			; <UNDEFINED> instruction: 0x00019db0
   17c78:	push	{r4, r5, fp, lr}
   17c7c:	add	fp, sp, #12
   17c80:	sub	sp, sp, #16
   17c84:	str	r0, [fp, #-24]	; 0xffffffe8
   17c88:	str	r1, [fp, #-28]	; 0xffffffe4
   17c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c90:	cmp	r3, #0
   17c94:	beq	17ca4 <__assert_fail@plt+0x6d48>
   17c98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17c9c:	cmp	r3, #0
   17ca0:	bne	17cb4 <__assert_fail@plt+0x6d58>
   17ca4:	mov	r3, #1
   17ca8:	str	r3, [fp, #-28]	; 0xffffffe4
   17cac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cb0:	str	r3, [fp, #-24]	; 0xffffffe8
   17cb4:	mov	r1, #0
   17cb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17cbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cc0:	umull	r2, r3, r2, r3
   17cc4:	mov	r4, r3
   17cc8:	mov	r5, #0
   17ccc:	cmp	r4, #0
   17cd0:	beq	17cd8 <__assert_fail@plt+0x6d7c>
   17cd4:	mov	r1, #1
   17cd8:	cmp	r2, #0
   17cdc:	bge	17ce4 <__assert_fail@plt+0x6d88>
   17ce0:	mov	r1, #1
   17ce4:	mov	r3, r2
   17ce8:	str	r3, [fp, #-20]	; 0xffffffec
   17cec:	mov	r3, r1
   17cf0:	and	r3, r3, #1
   17cf4:	uxtb	r3, r3
   17cf8:	cmp	r3, #0
   17cfc:	beq	17d18 <__assert_fail@plt+0x6dbc>
   17d00:	bl	10e9c <__errno_location@plt>
   17d04:	mov	r2, r0
   17d08:	mov	r3, #12
   17d0c:	str	r3, [r2]
   17d10:	mov	r3, #0
   17d14:	b	17d30 <__assert_fail@plt+0x6dd4>
   17d18:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17d1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d20:	bl	10ce0 <calloc@plt>
   17d24:	mov	r3, r0
   17d28:	str	r3, [fp, #-16]
   17d2c:	ldr	r3, [fp, #-16]
   17d30:	mov	r0, r3
   17d34:	sub	sp, fp, #12
   17d38:	pop	{r4, r5, fp, pc}
   17d3c:	push	{r4, r5, fp, lr}
   17d40:	add	fp, sp, #12
   17d44:	sub	sp, sp, #16
   17d48:	str	r0, [fp, #-24]	; 0xffffffe8
   17d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d50:	cmp	r3, #0
   17d54:	bne	17d60 <__assert_fail@plt+0x6e04>
   17d58:	mov	r3, #1
   17d5c:	str	r3, [fp, #-24]	; 0xffffffe8
   17d60:	mov	r1, #0
   17d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d68:	mov	r2, r3
   17d6c:	mov	r3, #0
   17d70:	mov	r4, r3
   17d74:	mov	r5, #0
   17d78:	cmp	r4, #0
   17d7c:	beq	17d84 <__assert_fail@plt+0x6e28>
   17d80:	mov	r1, #1
   17d84:	cmp	r2, #0
   17d88:	bge	17d90 <__assert_fail@plt+0x6e34>
   17d8c:	mov	r1, #1
   17d90:	mov	r3, r2
   17d94:	str	r3, [fp, #-20]	; 0xffffffec
   17d98:	mov	r3, r1
   17d9c:	and	r3, r3, #1
   17da0:	uxtb	r3, r3
   17da4:	cmp	r3, #0
   17da8:	beq	17dc4 <__assert_fail@plt+0x6e68>
   17dac:	bl	10e9c <__errno_location@plt>
   17db0:	mov	r2, r0
   17db4:	mov	r3, #12
   17db8:	str	r3, [r2]
   17dbc:	mov	r3, #0
   17dc0:	b	17dd8 <__assert_fail@plt+0x6e7c>
   17dc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17dc8:	bl	10e18 <malloc@plt>
   17dcc:	mov	r3, r0
   17dd0:	str	r3, [fp, #-16]
   17dd4:	ldr	r3, [fp, #-16]
   17dd8:	mov	r0, r3
   17ddc:	sub	sp, fp, #12
   17de0:	pop	{r4, r5, fp, pc}
   17de4:	push	{r4, r5, fp, lr}
   17de8:	add	fp, sp, #12
   17dec:	sub	sp, sp, #16
   17df0:	str	r0, [fp, #-24]	; 0xffffffe8
   17df4:	str	r1, [fp, #-28]	; 0xffffffe4
   17df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17dfc:	cmp	r3, #0
   17e00:	bne	17e14 <__assert_fail@plt+0x6eb8>
   17e04:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17e08:	bl	17d3c <__assert_fail@plt+0x6de0>
   17e0c:	mov	r3, r0
   17e10:	b	17ea8 <__assert_fail@plt+0x6f4c>
   17e14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e18:	cmp	r3, #0
   17e1c:	bne	17e30 <__assert_fail@plt+0x6ed4>
   17e20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17e24:	bl	18024 <__assert_fail@plt+0x70c8>
   17e28:	mov	r3, #0
   17e2c:	b	17ea8 <__assert_fail@plt+0x6f4c>
   17e30:	mov	r1, #0
   17e34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e38:	mov	r2, r3
   17e3c:	mov	r3, #0
   17e40:	mov	r4, r3
   17e44:	mov	r5, #0
   17e48:	cmp	r4, #0
   17e4c:	beq	17e54 <__assert_fail@plt+0x6ef8>
   17e50:	mov	r1, #1
   17e54:	cmp	r2, #0
   17e58:	bge	17e60 <__assert_fail@plt+0x6f04>
   17e5c:	mov	r1, #1
   17e60:	mov	r3, r2
   17e64:	str	r3, [fp, #-20]	; 0xffffffec
   17e68:	mov	r3, r1
   17e6c:	and	r3, r3, #1
   17e70:	uxtb	r3, r3
   17e74:	cmp	r3, #0
   17e78:	beq	17e94 <__assert_fail@plt+0x6f38>
   17e7c:	bl	10e9c <__errno_location@plt>
   17e80:	mov	r2, r0
   17e84:	mov	r3, #12
   17e88:	str	r3, [r2]
   17e8c:	mov	r3, #0
   17e90:	b	17ea8 <__assert_fail@plt+0x6f4c>
   17e94:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17e98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17e9c:	bl	10da0 <realloc@plt>
   17ea0:	str	r0, [fp, #-16]
   17ea4:	ldr	r3, [fp, #-16]
   17ea8:	mov	r0, r3
   17eac:	sub	sp, fp, #12
   17eb0:	pop	{r4, r5, fp, pc}
   17eb4:	push	{r4, r5, fp, lr}
   17eb8:	add	fp, sp, #12
   17ebc:	sub	sp, sp, #16
   17ec0:	str	r0, [fp, #-24]	; 0xffffffe8
   17ec4:	str	r1, [fp, #-28]	; 0xffffffe4
   17ec8:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17ecc:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17ed0:	cmp	r5, r4
   17ed4:	bne	17ee0 <__assert_fail@plt+0x6f84>
   17ed8:	mov	r3, #0
   17edc:	b	17f40 <__assert_fail@plt+0x6fe4>
   17ee0:	ldrb	r3, [r5]
   17ee4:	mov	r0, r3
   17ee8:	bl	18818 <__assert_fail@plt+0x78bc>
   17eec:	mov	r3, r0
   17ef0:	strb	r3, [fp, #-13]
   17ef4:	ldrb	r3, [r4]
   17ef8:	mov	r0, r3
   17efc:	bl	18818 <__assert_fail@plt+0x78bc>
   17f00:	mov	r3, r0
   17f04:	strb	r3, [fp, #-14]
   17f08:	ldrb	r3, [fp, #-13]
   17f0c:	cmp	r3, #0
   17f10:	beq	17f30 <__assert_fail@plt+0x6fd4>
   17f14:	add	r5, r5, #1
   17f18:	add	r4, r4, #1
   17f1c:	ldrb	r2, [fp, #-13]
   17f20:	ldrb	r3, [fp, #-14]
   17f24:	cmp	r2, r3
   17f28:	beq	17ee0 <__assert_fail@plt+0x6f84>
   17f2c:	b	17f34 <__assert_fail@plt+0x6fd8>
   17f30:	nop			; (mov r0, r0)
   17f34:	ldrb	r2, [fp, #-13]
   17f38:	ldrb	r3, [fp, #-14]
   17f3c:	sub	r3, r2, r3
   17f40:	mov	r0, r3
   17f44:	sub	sp, fp, #12
   17f48:	pop	{r4, r5, fp, pc}
   17f4c:	push	{fp, lr}
   17f50:	add	fp, sp, #4
   17f54:	sub	sp, sp, #16
   17f58:	str	r0, [fp, #-16]
   17f5c:	ldr	r0, [fp, #-16]
   17f60:	bl	10de8 <__fpending@plt>
   17f64:	mov	r3, r0
   17f68:	cmp	r3, #0
   17f6c:	movne	r3, #1
   17f70:	moveq	r3, #0
   17f74:	strb	r3, [fp, #-5]
   17f78:	ldr	r0, [fp, #-16]
   17f7c:	bl	10df4 <ferror_unlocked@plt>
   17f80:	mov	r3, r0
   17f84:	cmp	r3, #0
   17f88:	movne	r3, #1
   17f8c:	moveq	r3, #0
   17f90:	strb	r3, [fp, #-6]
   17f94:	ldr	r0, [fp, #-16]
   17f98:	bl	13574 <__assert_fail@plt+0x2618>
   17f9c:	mov	r3, r0
   17fa0:	cmp	r3, #0
   17fa4:	movne	r3, #1
   17fa8:	moveq	r3, #0
   17fac:	strb	r3, [fp, #-7]
   17fb0:	ldrb	r3, [fp, #-6]
   17fb4:	cmp	r3, #0
   17fb8:	bne	17fe8 <__assert_fail@plt+0x708c>
   17fbc:	ldrb	r3, [fp, #-7]
   17fc0:	cmp	r3, #0
   17fc4:	beq	18014 <__assert_fail@plt+0x70b8>
   17fc8:	ldrb	r3, [fp, #-5]
   17fcc:	cmp	r3, #0
   17fd0:	bne	17fe8 <__assert_fail@plt+0x708c>
   17fd4:	bl	10e9c <__errno_location@plt>
   17fd8:	mov	r3, r0
   17fdc:	ldr	r3, [r3]
   17fe0:	cmp	r3, #9
   17fe4:	beq	18014 <__assert_fail@plt+0x70b8>
   17fe8:	ldrb	r3, [fp, #-7]
   17fec:	eor	r3, r3, #1
   17ff0:	uxtb	r3, r3
   17ff4:	cmp	r3, #0
   17ff8:	beq	1800c <__assert_fail@plt+0x70b0>
   17ffc:	bl	10e9c <__errno_location@plt>
   18000:	mov	r2, r0
   18004:	mov	r3, #0
   18008:	str	r3, [r2]
   1800c:	mvn	r3, #0
   18010:	b	18018 <__assert_fail@plt+0x70bc>
   18014:	mov	r3, #0
   18018:	mov	r0, r3
   1801c:	sub	sp, fp, #4
   18020:	pop	{fp, pc}
   18024:	push	{r4, fp, lr}
   18028:	add	fp, sp, #8
   1802c:	sub	sp, sp, #20
   18030:	str	r0, [fp, #-24]	; 0xffffffe8
   18034:	bl	10e9c <__errno_location@plt>
   18038:	mov	r3, r0
   1803c:	ldr	r3, [r3]
   18040:	str	r3, [fp, #-20]	; 0xffffffec
   18044:	bl	10e9c <__errno_location@plt>
   18048:	mov	r3, r0
   1804c:	ldr	r3, [r3]
   18050:	str	r3, [fp, #-16]
   18054:	bl	10e9c <__errno_location@plt>
   18058:	mov	r2, r0
   1805c:	mov	r3, #0
   18060:	str	r3, [r2]
   18064:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18068:	bl	10d40 <free@plt>
   1806c:	bl	10e9c <__errno_location@plt>
   18070:	mov	r4, r0
   18074:	bl	10e9c <__errno_location@plt>
   18078:	mov	r3, r0
   1807c:	ldr	r3, [r3]
   18080:	cmp	r3, #0
   18084:	moveq	r3, #1
   18088:	movne	r3, #0
   1808c:	uxtb	r3, r3
   18090:	lsl	r3, r3, #2
   18094:	sub	r2, fp, #12
   18098:	add	r3, r2, r3
   1809c:	ldr	r3, [r3, #-8]
   180a0:	str	r3, [r4]
   180a4:	nop			; (mov r0, r0)
   180a8:	sub	sp, fp, #8
   180ac:	pop	{r4, fp, pc}
   180b0:	push	{fp, lr}
   180b4:	add	fp, sp, #4
   180b8:	bl	10e9c <__errno_location@plt>
   180bc:	mov	r2, r0
   180c0:	mov	r3, #12
   180c4:	str	r3, [r2]
   180c8:	mov	r3, #0
   180cc:	mov	r0, r3
   180d0:	pop	{fp, pc}
   180d4:	push	{fp, lr}
   180d8:	add	fp, sp, #4
   180dc:	sub	sp, sp, #8
   180e0:	str	r0, [fp, #-8]
   180e4:	ldr	r3, [fp, #-8]
   180e8:	mov	r0, r3
   180ec:	bl	17d3c <__assert_fail@plt+0x6de0>
   180f0:	mov	r3, r0
   180f4:	mov	r0, r3
   180f8:	sub	sp, fp, #4
   180fc:	pop	{fp, pc}
   18100:	push	{fp, lr}
   18104:	add	fp, sp, #4
   18108:	sub	sp, sp, #8
   1810c:	str	r0, [fp, #-8]
   18110:	str	r1, [fp, #-12]
   18114:	ldr	r3, [fp, #-12]
   18118:	cmp	r3, #0
   1811c:	moveq	r3, #1
   18120:	movne	r3, #0
   18124:	uxtb	r3, r3
   18128:	mov	r2, r3
   1812c:	ldr	r3, [fp, #-12]
   18130:	orr	r3, r2, r3
   18134:	mov	r1, r3
   18138:	ldr	r0, [fp, #-8]
   1813c:	bl	17de4 <__assert_fail@plt+0x6e88>
   18140:	mov	r3, r0
   18144:	mov	r0, r3
   18148:	sub	sp, fp, #4
   1814c:	pop	{fp, pc}
   18150:	push	{fp, lr}
   18154:	add	fp, sp, #4
   18158:	sub	sp, sp, #8
   1815c:	str	r0, [fp, #-8]
   18160:	str	r1, [fp, #-12]
   18164:	ldr	r3, [fp, #-8]
   18168:	ldr	r2, [fp, #-12]
   1816c:	mov	r1, r2
   18170:	mov	r0, r3
   18174:	bl	17c78 <__assert_fail@plt+0x6d1c>
   18178:	mov	r3, r0
   1817c:	mov	r0, r3
   18180:	sub	sp, fp, #4
   18184:	pop	{fp, pc}
   18188:	push	{fp, lr}
   1818c:	add	fp, sp, #4
   18190:	sub	sp, sp, #16
   18194:	str	r0, [fp, #-8]
   18198:	str	r1, [fp, #-12]
   1819c:	str	r2, [fp, #-16]
   181a0:	ldr	r3, [fp, #-12]
   181a4:	cmp	r3, #0
   181a8:	beq	181b8 <__assert_fail@plt+0x725c>
   181ac:	ldr	r3, [fp, #-16]
   181b0:	cmp	r3, #0
   181b4:	bne	181c8 <__assert_fail@plt+0x726c>
   181b8:	mov	r3, #1
   181bc:	str	r3, [fp, #-16]
   181c0:	ldr	r3, [fp, #-16]
   181c4:	str	r3, [fp, #-12]
   181c8:	ldr	r3, [fp, #-12]
   181cc:	ldr	r2, [fp, #-16]
   181d0:	mov	r1, r3
   181d4:	ldr	r0, [fp, #-8]
   181d8:	bl	182f4 <__assert_fail@plt+0x7398>
   181dc:	mov	r3, r0
   181e0:	mov	r0, r3
   181e4:	sub	sp, fp, #4
   181e8:	pop	{fp, pc}
   181ec:	push	{fp, lr}
   181f0:	add	fp, sp, #4
   181f4:	sub	sp, sp, #8
   181f8:	mov	r0, #14
   181fc:	bl	10f08 <nl_langinfo@plt>
   18200:	str	r0, [fp, #-8]
   18204:	ldr	r3, [fp, #-8]
   18208:	cmp	r3, #0
   1820c:	bne	18218 <__assert_fail@plt+0x72bc>
   18210:	ldr	r3, [pc, #40]	; 18240 <__assert_fail@plt+0x72e4>
   18214:	str	r3, [fp, #-8]
   18218:	ldr	r3, [fp, #-8]
   1821c:	ldrb	r3, [r3]
   18220:	cmp	r3, #0
   18224:	bne	18230 <__assert_fail@plt+0x72d4>
   18228:	ldr	r3, [pc, #20]	; 18244 <__assert_fail@plt+0x72e8>
   1822c:	str	r3, [fp, #-8]
   18230:	ldr	r3, [fp, #-8]
   18234:	mov	r0, r3
   18238:	sub	sp, fp, #4
   1823c:	pop	{fp, pc}
   18240:	andeq	r9, r1, r4, ror #27
   18244:	andeq	r9, r1, r8, ror #27
   18248:	push	{fp, lr}
   1824c:	add	fp, sp, #4
   18250:	sub	sp, sp, #32
   18254:	str	r0, [fp, #-24]	; 0xffffffe8
   18258:	str	r1, [fp, #-28]	; 0xffffffe4
   1825c:	str	r2, [fp, #-32]	; 0xffffffe0
   18260:	str	r3, [fp, #-36]	; 0xffffffdc
   18264:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18268:	cmp	r3, #0
   1826c:	bne	18278 <__assert_fail@plt+0x731c>
   18270:	sub	r3, fp, #16
   18274:	str	r3, [fp, #-24]	; 0xffffffe8
   18278:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1827c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18280:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18284:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18288:	bl	10e00 <mbrtowc@plt>
   1828c:	str	r0, [fp, #-8]
   18290:	ldr	r3, [fp, #-8]
   18294:	cmn	r3, #3
   18298:	bls	182e4 <__assert_fail@plt+0x7388>
   1829c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182a0:	cmp	r3, #0
   182a4:	beq	182e4 <__assert_fail@plt+0x7388>
   182a8:	mov	r0, #0
   182ac:	bl	18898 <__assert_fail@plt+0x793c>
   182b0:	mov	r3, r0
   182b4:	eor	r3, r3, #1
   182b8:	uxtb	r3, r3
   182bc:	cmp	r3, #0
   182c0:	beq	182e4 <__assert_fail@plt+0x7388>
   182c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   182c8:	ldrb	r3, [r3]
   182cc:	strb	r3, [fp, #-9]
   182d0:	ldrb	r2, [fp, #-9]
   182d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182d8:	str	r2, [r3]
   182dc:	mov	r3, #1
   182e0:	b	182e8 <__assert_fail@plt+0x738c>
   182e4:	ldr	r3, [fp, #-8]
   182e8:	mov	r0, r3
   182ec:	sub	sp, fp, #4
   182f0:	pop	{fp, pc}
   182f4:	push	{fp, lr}
   182f8:	add	fp, sp, #4
   182fc:	sub	sp, sp, #24
   18300:	str	r0, [fp, #-16]
   18304:	str	r1, [fp, #-20]	; 0xffffffec
   18308:	str	r2, [fp, #-24]	; 0xffffffe8
   1830c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18310:	cmp	r3, #0
   18314:	beq	18350 <__assert_fail@plt+0x73f4>
   18318:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1831c:	mvn	r0, #0
   18320:	bl	18a9c <__assert_fail@plt+0x7b40>
   18324:	mov	r3, r0
   18328:	mov	r2, r3
   1832c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18330:	cmp	r2, r3
   18334:	bcs	18350 <__assert_fail@plt+0x73f4>
   18338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1833c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18340:	mul	r3, r2, r3
   18344:	str	r3, [fp, #-8]
   18348:	mov	r3, #1
   1834c:	b	18364 <__assert_fail@plt+0x7408>
   18350:	ldr	r3, [fp, #-20]	; 0xffffffec
   18354:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18358:	mul	r3, r2, r3
   1835c:	str	r3, [fp, #-8]
   18360:	mov	r3, #0
   18364:	cmp	r3, #0
   18368:	beq	18384 <__assert_fail@plt+0x7428>
   1836c:	bl	10e9c <__errno_location@plt>
   18370:	mov	r2, r0
   18374:	mov	r3, #12
   18378:	str	r3, [r2]
   1837c:	mov	r3, #0
   18380:	b	18398 <__assert_fail@plt+0x743c>
   18384:	ldr	r3, [fp, #-8]
   18388:	mov	r1, r3
   1838c:	ldr	r0, [fp, #-16]
   18390:	bl	17de4 <__assert_fail@plt+0x6e88>
   18394:	mov	r3, r0
   18398:	mov	r0, r3
   1839c:	sub	sp, fp, #4
   183a0:	pop	{fp, pc}
   183a4:	push	{fp}		; (str fp, [sp, #-4]!)
   183a8:	add	fp, sp, #0
   183ac:	sub	sp, sp, #12
   183b0:	str	r0, [fp, #-8]
   183b4:	ldr	r3, [fp, #-8]
   183b8:	cmp	r3, #90	; 0x5a
   183bc:	bgt	183d8 <__assert_fail@plt+0x747c>
   183c0:	cmp	r3, #65	; 0x41
   183c4:	bge	183e4 <__assert_fail@plt+0x7488>
   183c8:	sub	r3, r3, #48	; 0x30
   183cc:	cmp	r3, #9
   183d0:	bhi	183ec <__assert_fail@plt+0x7490>
   183d4:	b	183e4 <__assert_fail@plt+0x7488>
   183d8:	sub	r3, r3, #97	; 0x61
   183dc:	cmp	r3, #25
   183e0:	bhi	183ec <__assert_fail@plt+0x7490>
   183e4:	mov	r3, #1
   183e8:	b	183f0 <__assert_fail@plt+0x7494>
   183ec:	mov	r3, #0
   183f0:	mov	r0, r3
   183f4:	add	sp, fp, #0
   183f8:	pop	{fp}		; (ldr fp, [sp], #4)
   183fc:	bx	lr
   18400:	push	{fp}		; (str fp, [sp, #-4]!)
   18404:	add	fp, sp, #0
   18408:	sub	sp, sp, #12
   1840c:	str	r0, [fp, #-8]
   18410:	ldr	r3, [fp, #-8]
   18414:	cmp	r3, #65	; 0x41
   18418:	blt	18438 <__assert_fail@plt+0x74dc>
   1841c:	cmp	r3, #90	; 0x5a
   18420:	ble	18430 <__assert_fail@plt+0x74d4>
   18424:	sub	r3, r3, #97	; 0x61
   18428:	cmp	r3, #25
   1842c:	bhi	18438 <__assert_fail@plt+0x74dc>
   18430:	mov	r3, #1
   18434:	b	1843c <__assert_fail@plt+0x74e0>
   18438:	mov	r3, #0
   1843c:	mov	r0, r3
   18440:	add	sp, fp, #0
   18444:	pop	{fp}		; (ldr fp, [sp], #4)
   18448:	bx	lr
   1844c:	push	{fp}		; (str fp, [sp, #-4]!)
   18450:	add	fp, sp, #0
   18454:	sub	sp, sp, #12
   18458:	str	r0, [fp, #-8]
   1845c:	ldr	r3, [fp, #-8]
   18460:	add	r3, r3, #0
   18464:	cmp	r3, #127	; 0x7f
   18468:	bhi	18474 <__assert_fail@plt+0x7518>
   1846c:	mov	r3, #1
   18470:	b	18478 <__assert_fail@plt+0x751c>
   18474:	mov	r3, #0
   18478:	mov	r0, r3
   1847c:	add	sp, fp, #0
   18480:	pop	{fp}		; (ldr fp, [sp], #4)
   18484:	bx	lr
   18488:	push	{fp}		; (str fp, [sp, #-4]!)
   1848c:	add	fp, sp, #0
   18490:	sub	sp, sp, #12
   18494:	str	r0, [fp, #-8]
   18498:	ldr	r3, [fp, #-8]
   1849c:	cmp	r3, #32
   184a0:	beq	184b0 <__assert_fail@plt+0x7554>
   184a4:	ldr	r3, [fp, #-8]
   184a8:	cmp	r3, #9
   184ac:	bne	184b8 <__assert_fail@plt+0x755c>
   184b0:	mov	r3, #1
   184b4:	b	184bc <__assert_fail@plt+0x7560>
   184b8:	mov	r3, #0
   184bc:	and	r3, r3, #1
   184c0:	uxtb	r3, r3
   184c4:	mov	r0, r3
   184c8:	add	sp, fp, #0
   184cc:	pop	{fp}		; (ldr fp, [sp], #4)
   184d0:	bx	lr
   184d4:	push	{fp}		; (str fp, [sp, #-4]!)
   184d8:	add	fp, sp, #0
   184dc:	sub	sp, sp, #12
   184e0:	str	r0, [fp, #-8]
   184e4:	ldr	r3, [fp, #-8]
   184e8:	cmp	r3, #0
   184ec:	blt	18508 <__assert_fail@plt+0x75ac>
   184f0:	cmp	r3, #31
   184f4:	ble	18500 <__assert_fail@plt+0x75a4>
   184f8:	cmp	r3, #127	; 0x7f
   184fc:	bne	18508 <__assert_fail@plt+0x75ac>
   18500:	mov	r3, #1
   18504:	b	1850c <__assert_fail@plt+0x75b0>
   18508:	mov	r3, #0
   1850c:	mov	r0, r3
   18510:	add	sp, fp, #0
   18514:	pop	{fp}		; (ldr fp, [sp], #4)
   18518:	bx	lr
   1851c:	push	{fp}		; (str fp, [sp, #-4]!)
   18520:	add	fp, sp, #0
   18524:	sub	sp, sp, #12
   18528:	str	r0, [fp, #-8]
   1852c:	ldr	r3, [fp, #-8]
   18530:	sub	r3, r3, #48	; 0x30
   18534:	cmp	r3, #9
   18538:	bhi	18544 <__assert_fail@plt+0x75e8>
   1853c:	mov	r3, #1
   18540:	b	18548 <__assert_fail@plt+0x75ec>
   18544:	mov	r3, #0
   18548:	mov	r0, r3
   1854c:	add	sp, fp, #0
   18550:	pop	{fp}		; (ldr fp, [sp], #4)
   18554:	bx	lr
   18558:	push	{fp}		; (str fp, [sp, #-4]!)
   1855c:	add	fp, sp, #0
   18560:	sub	sp, sp, #12
   18564:	str	r0, [fp, #-8]
   18568:	ldr	r3, [fp, #-8]
   1856c:	sub	r3, r3, #33	; 0x21
   18570:	cmp	r3, #93	; 0x5d
   18574:	bhi	18580 <__assert_fail@plt+0x7624>
   18578:	mov	r3, #1
   1857c:	b	18584 <__assert_fail@plt+0x7628>
   18580:	mov	r3, #0
   18584:	mov	r0, r3
   18588:	add	sp, fp, #0
   1858c:	pop	{fp}		; (ldr fp, [sp], #4)
   18590:	bx	lr
   18594:	push	{fp}		; (str fp, [sp, #-4]!)
   18598:	add	fp, sp, #0
   1859c:	sub	sp, sp, #12
   185a0:	str	r0, [fp, #-8]
   185a4:	ldr	r3, [fp, #-8]
   185a8:	sub	r3, r3, #97	; 0x61
   185ac:	cmp	r3, #25
   185b0:	bhi	185bc <__assert_fail@plt+0x7660>
   185b4:	mov	r3, #1
   185b8:	b	185c0 <__assert_fail@plt+0x7664>
   185bc:	mov	r3, #0
   185c0:	mov	r0, r3
   185c4:	add	sp, fp, #0
   185c8:	pop	{fp}		; (ldr fp, [sp], #4)
   185cc:	bx	lr
   185d0:	push	{fp}		; (str fp, [sp, #-4]!)
   185d4:	add	fp, sp, #0
   185d8:	sub	sp, sp, #12
   185dc:	str	r0, [fp, #-8]
   185e0:	ldr	r3, [fp, #-8]
   185e4:	sub	r3, r3, #32
   185e8:	cmp	r3, #94	; 0x5e
   185ec:	bhi	185f8 <__assert_fail@plt+0x769c>
   185f0:	mov	r3, #1
   185f4:	b	185fc <__assert_fail@plt+0x76a0>
   185f8:	mov	r3, #0
   185fc:	mov	r0, r3
   18600:	add	sp, fp, #0
   18604:	pop	{fp}		; (ldr fp, [sp], #4)
   18608:	bx	lr
   1860c:	push	{fp}		; (str fp, [sp, #-4]!)
   18610:	add	fp, sp, #0
   18614:	sub	sp, sp, #12
   18618:	str	r0, [fp, #-8]
   1861c:	ldr	r3, [fp, #-8]
   18620:	cmp	r3, #64	; 0x40
   18624:	bgt	18640 <__assert_fail@plt+0x76e4>
   18628:	cmp	r3, #58	; 0x3a
   1862c:	bge	1865c <__assert_fail@plt+0x7700>
   18630:	sub	r3, r3, #33	; 0x21
   18634:	cmp	r3, #14
   18638:	bhi	18664 <__assert_fail@plt+0x7708>
   1863c:	b	1865c <__assert_fail@plt+0x7700>
   18640:	cmp	r3, #91	; 0x5b
   18644:	blt	18664 <__assert_fail@plt+0x7708>
   18648:	cmp	r3, #96	; 0x60
   1864c:	ble	1865c <__assert_fail@plt+0x7700>
   18650:	sub	r3, r3, #123	; 0x7b
   18654:	cmp	r3, #3
   18658:	bhi	18664 <__assert_fail@plt+0x7708>
   1865c:	mov	r3, #1
   18660:	b	18668 <__assert_fail@plt+0x770c>
   18664:	mov	r3, #0
   18668:	mov	r0, r3
   1866c:	add	sp, fp, #0
   18670:	pop	{fp}		; (ldr fp, [sp], #4)
   18674:	bx	lr
   18678:	push	{fp}		; (str fp, [sp, #-4]!)
   1867c:	add	fp, sp, #0
   18680:	sub	sp, sp, #12
   18684:	str	r0, [fp, #-8]
   18688:	ldr	r3, [fp, #-8]
   1868c:	cmp	r3, #9
   18690:	blt	186ac <__assert_fail@plt+0x7750>
   18694:	cmp	r3, #13
   18698:	ble	186a4 <__assert_fail@plt+0x7748>
   1869c:	cmp	r3, #32
   186a0:	bne	186ac <__assert_fail@plt+0x7750>
   186a4:	mov	r3, #1
   186a8:	b	186b0 <__assert_fail@plt+0x7754>
   186ac:	mov	r3, #0
   186b0:	mov	r0, r3
   186b4:	add	sp, fp, #0
   186b8:	pop	{fp}		; (ldr fp, [sp], #4)
   186bc:	bx	lr
   186c0:	push	{fp}		; (str fp, [sp, #-4]!)
   186c4:	add	fp, sp, #0
   186c8:	sub	sp, sp, #12
   186cc:	str	r0, [fp, #-8]
   186d0:	ldr	r3, [fp, #-8]
   186d4:	sub	r3, r3, #65	; 0x41
   186d8:	cmp	r3, #25
   186dc:	bhi	186e8 <__assert_fail@plt+0x778c>
   186e0:	mov	r3, #1
   186e4:	b	186ec <__assert_fail@plt+0x7790>
   186e8:	mov	r3, #0
   186ec:	mov	r0, r3
   186f0:	add	sp, fp, #0
   186f4:	pop	{fp}		; (ldr fp, [sp], #4)
   186f8:	bx	lr
   186fc:	push	{fp}		; (str fp, [sp, #-4]!)
   18700:	add	fp, sp, #0
   18704:	sub	sp, sp, #12
   18708:	str	r0, [fp, #-8]
   1870c:	ldr	r3, [fp, #-8]
   18710:	sub	r3, r3, #48	; 0x30
   18714:	cmp	r3, #54	; 0x36
   18718:	addls	pc, pc, r3, lsl #2
   1871c:	b	18804 <__assert_fail@plt+0x78a8>
   18720:	b	187fc <__assert_fail@plt+0x78a0>
   18724:	b	187fc <__assert_fail@plt+0x78a0>
   18728:	b	187fc <__assert_fail@plt+0x78a0>
   1872c:	b	187fc <__assert_fail@plt+0x78a0>
   18730:	b	187fc <__assert_fail@plt+0x78a0>
   18734:	b	187fc <__assert_fail@plt+0x78a0>
   18738:	b	187fc <__assert_fail@plt+0x78a0>
   1873c:	b	187fc <__assert_fail@plt+0x78a0>
   18740:	b	187fc <__assert_fail@plt+0x78a0>
   18744:	b	187fc <__assert_fail@plt+0x78a0>
   18748:	b	18804 <__assert_fail@plt+0x78a8>
   1874c:	b	18804 <__assert_fail@plt+0x78a8>
   18750:	b	18804 <__assert_fail@plt+0x78a8>
   18754:	b	18804 <__assert_fail@plt+0x78a8>
   18758:	b	18804 <__assert_fail@plt+0x78a8>
   1875c:	b	18804 <__assert_fail@plt+0x78a8>
   18760:	b	18804 <__assert_fail@plt+0x78a8>
   18764:	b	187fc <__assert_fail@plt+0x78a0>
   18768:	b	187fc <__assert_fail@plt+0x78a0>
   1876c:	b	187fc <__assert_fail@plt+0x78a0>
   18770:	b	187fc <__assert_fail@plt+0x78a0>
   18774:	b	187fc <__assert_fail@plt+0x78a0>
   18778:	b	187fc <__assert_fail@plt+0x78a0>
   1877c:	b	18804 <__assert_fail@plt+0x78a8>
   18780:	b	18804 <__assert_fail@plt+0x78a8>
   18784:	b	18804 <__assert_fail@plt+0x78a8>
   18788:	b	18804 <__assert_fail@plt+0x78a8>
   1878c:	b	18804 <__assert_fail@plt+0x78a8>
   18790:	b	18804 <__assert_fail@plt+0x78a8>
   18794:	b	18804 <__assert_fail@plt+0x78a8>
   18798:	b	18804 <__assert_fail@plt+0x78a8>
   1879c:	b	18804 <__assert_fail@plt+0x78a8>
   187a0:	b	18804 <__assert_fail@plt+0x78a8>
   187a4:	b	18804 <__assert_fail@plt+0x78a8>
   187a8:	b	18804 <__assert_fail@plt+0x78a8>
   187ac:	b	18804 <__assert_fail@plt+0x78a8>
   187b0:	b	18804 <__assert_fail@plt+0x78a8>
   187b4:	b	18804 <__assert_fail@plt+0x78a8>
   187b8:	b	18804 <__assert_fail@plt+0x78a8>
   187bc:	b	18804 <__assert_fail@plt+0x78a8>
   187c0:	b	18804 <__assert_fail@plt+0x78a8>
   187c4:	b	18804 <__assert_fail@plt+0x78a8>
   187c8:	b	18804 <__assert_fail@plt+0x78a8>
   187cc:	b	18804 <__assert_fail@plt+0x78a8>
   187d0:	b	18804 <__assert_fail@plt+0x78a8>
   187d4:	b	18804 <__assert_fail@plt+0x78a8>
   187d8:	b	18804 <__assert_fail@plt+0x78a8>
   187dc:	b	18804 <__assert_fail@plt+0x78a8>
   187e0:	b	18804 <__assert_fail@plt+0x78a8>
   187e4:	b	187fc <__assert_fail@plt+0x78a0>
   187e8:	b	187fc <__assert_fail@plt+0x78a0>
   187ec:	b	187fc <__assert_fail@plt+0x78a0>
   187f0:	b	187fc <__assert_fail@plt+0x78a0>
   187f4:	b	187fc <__assert_fail@plt+0x78a0>
   187f8:	b	187fc <__assert_fail@plt+0x78a0>
   187fc:	mov	r3, #1
   18800:	b	18808 <__assert_fail@plt+0x78ac>
   18804:	mov	r3, #0
   18808:	mov	r0, r3
   1880c:	add	sp, fp, #0
   18810:	pop	{fp}		; (ldr fp, [sp], #4)
   18814:	bx	lr
   18818:	push	{fp}		; (str fp, [sp, #-4]!)
   1881c:	add	fp, sp, #0
   18820:	sub	sp, sp, #12
   18824:	str	r0, [fp, #-8]
   18828:	ldr	r3, [fp, #-8]
   1882c:	sub	r3, r3, #65	; 0x41
   18830:	cmp	r3, #25
   18834:	bhi	18844 <__assert_fail@plt+0x78e8>
   18838:	ldr	r3, [fp, #-8]
   1883c:	add	r3, r3, #32
   18840:	b	18848 <__assert_fail@plt+0x78ec>
   18844:	ldr	r3, [fp, #-8]
   18848:	mov	r0, r3
   1884c:	add	sp, fp, #0
   18850:	pop	{fp}		; (ldr fp, [sp], #4)
   18854:	bx	lr
   18858:	push	{fp}		; (str fp, [sp, #-4]!)
   1885c:	add	fp, sp, #0
   18860:	sub	sp, sp, #12
   18864:	str	r0, [fp, #-8]
   18868:	ldr	r3, [fp, #-8]
   1886c:	sub	r3, r3, #97	; 0x61
   18870:	cmp	r3, #25
   18874:	bhi	18884 <__assert_fail@plt+0x7928>
   18878:	ldr	r3, [fp, #-8]
   1887c:	sub	r3, r3, #32
   18880:	b	18888 <__assert_fail@plt+0x792c>
   18884:	ldr	r3, [fp, #-8]
   18888:	mov	r0, r3
   1888c:	add	sp, fp, #0
   18890:	pop	{fp}		; (ldr fp, [sp], #4)
   18894:	bx	lr
   18898:	push	{fp, lr}
   1889c:	add	fp, sp, #4
   188a0:	sub	sp, sp, #272	; 0x110
   188a4:	str	r0, [fp, #-272]	; 0xfffffef0
   188a8:	sub	r3, fp, #264	; 0x108
   188ac:	ldr	r2, [pc, #116]	; 18928 <__assert_fail@plt+0x79cc>
   188b0:	mov	r1, r3
   188b4:	ldr	r0, [fp, #-272]	; 0xfffffef0
   188b8:	bl	18a3c <__assert_fail@plt+0x7ae0>
   188bc:	mov	r3, r0
   188c0:	cmp	r3, #0
   188c4:	beq	188d0 <__assert_fail@plt+0x7974>
   188c8:	mov	r3, #0
   188cc:	b	1891c <__assert_fail@plt+0x79c0>
   188d0:	sub	r3, fp, #264	; 0x108
   188d4:	ldr	r1, [pc, #80]	; 1892c <__assert_fail@plt+0x79d0>
   188d8:	mov	r0, r3
   188dc:	bl	10d04 <strcmp@plt>
   188e0:	mov	r3, r0
   188e4:	cmp	r3, #0
   188e8:	beq	18910 <__assert_fail@plt+0x79b4>
   188ec:	sub	r3, fp, #264	; 0x108
   188f0:	ldr	r1, [pc, #56]	; 18930 <__assert_fail@plt+0x79d4>
   188f4:	mov	r0, r3
   188f8:	bl	10d04 <strcmp@plt>
   188fc:	mov	r3, r0
   18900:	cmp	r3, #0
   18904:	beq	18910 <__assert_fail@plt+0x79b4>
   18908:	mov	r3, #1
   1890c:	b	18914 <__assert_fail@plt+0x79b8>
   18910:	mov	r3, #0
   18914:	and	r3, r3, #1
   18918:	uxtb	r3, r3
   1891c:	mov	r0, r3
   18920:	sub	sp, fp, #4
   18924:	pop	{fp, pc}
   18928:	andeq	r0, r0, r1, lsl #2
   1892c:	strdeq	r9, [r1], -r0
   18930:	strdeq	r9, [r1], -r4
   18934:	push	{fp, lr}
   18938:	add	fp, sp, #4
   1893c:	sub	sp, sp, #16
   18940:	str	r0, [fp, #-16]
   18944:	mov	r1, #0
   18948:	ldr	r0, [fp, #-16]
   1894c:	bl	10ef0 <setlocale@plt>
   18950:	str	r0, [fp, #-8]
   18954:	ldr	r3, [fp, #-8]
   18958:	mov	r0, r3
   1895c:	sub	sp, fp, #4
   18960:	pop	{fp, pc}
   18964:	push	{fp, lr}
   18968:	add	fp, sp, #4
   1896c:	sub	sp, sp, #24
   18970:	str	r0, [fp, #-16]
   18974:	str	r1, [fp, #-20]	; 0xffffffec
   18978:	str	r2, [fp, #-24]	; 0xffffffe8
   1897c:	ldr	r0, [fp, #-16]
   18980:	bl	18934 <__assert_fail@plt+0x79d8>
   18984:	str	r0, [fp, #-8]
   18988:	ldr	r3, [fp, #-8]
   1898c:	cmp	r3, #0
   18990:	bne	189b4 <__assert_fail@plt+0x7a58>
   18994:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18998:	cmp	r3, #0
   1899c:	beq	189ac <__assert_fail@plt+0x7a50>
   189a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   189a4:	mov	r2, #0
   189a8:	strb	r2, [r3]
   189ac:	mov	r3, #22
   189b0:	b	18a30 <__assert_fail@plt+0x7ad4>
   189b4:	ldr	r0, [fp, #-8]
   189b8:	bl	10e78 <strlen@plt>
   189bc:	str	r0, [fp, #-12]
   189c0:	ldr	r2, [fp, #-12]
   189c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189c8:	cmp	r2, r3
   189cc:	bcs	189f0 <__assert_fail@plt+0x7a94>
   189d0:	ldr	r3, [fp, #-12]
   189d4:	add	r3, r3, #1
   189d8:	mov	r2, r3
   189dc:	ldr	r1, [fp, #-8]
   189e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   189e4:	bl	10d58 <memcpy@plt>
   189e8:	mov	r3, #0
   189ec:	b	18a30 <__assert_fail@plt+0x7ad4>
   189f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189f4:	cmp	r3, #0
   189f8:	beq	18a2c <__assert_fail@plt+0x7ad0>
   189fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a00:	sub	r3, r3, #1
   18a04:	mov	r2, r3
   18a08:	ldr	r1, [fp, #-8]
   18a0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18a10:	bl	10d58 <memcpy@plt>
   18a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a18:	sub	r3, r3, #1
   18a1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18a20:	add	r3, r2, r3
   18a24:	mov	r2, #0
   18a28:	strb	r2, [r3]
   18a2c:	mov	r3, #34	; 0x22
   18a30:	mov	r0, r3
   18a34:	sub	sp, fp, #4
   18a38:	pop	{fp, pc}
   18a3c:	push	{fp, lr}
   18a40:	add	fp, sp, #4
   18a44:	sub	sp, sp, #16
   18a48:	str	r0, [fp, #-8]
   18a4c:	str	r1, [fp, #-12]
   18a50:	str	r2, [fp, #-16]
   18a54:	ldr	r2, [fp, #-16]
   18a58:	ldr	r1, [fp, #-12]
   18a5c:	ldr	r0, [fp, #-8]
   18a60:	bl	18964 <__assert_fail@plt+0x7a08>
   18a64:	mov	r3, r0
   18a68:	mov	r0, r3
   18a6c:	sub	sp, fp, #4
   18a70:	pop	{fp, pc}
   18a74:	push	{fp, lr}
   18a78:	add	fp, sp, #4
   18a7c:	sub	sp, sp, #8
   18a80:	str	r0, [fp, #-8]
   18a84:	ldr	r0, [fp, #-8]
   18a88:	bl	18934 <__assert_fail@plt+0x79d8>
   18a8c:	mov	r3, r0
   18a90:	mov	r0, r3
   18a94:	sub	sp, fp, #4
   18a98:	pop	{fp, pc}
   18a9c:	subs	r2, r1, #1
   18aa0:	bxeq	lr
   18aa4:	bcc	18c7c <__assert_fail@plt+0x7d20>
   18aa8:	cmp	r0, r1
   18aac:	bls	18c60 <__assert_fail@plt+0x7d04>
   18ab0:	tst	r1, r2
   18ab4:	beq	18c6c <__assert_fail@plt+0x7d10>
   18ab8:	clz	r3, r0
   18abc:	clz	r2, r1
   18ac0:	sub	r3, r2, r3
   18ac4:	rsbs	r3, r3, #31
   18ac8:	addne	r3, r3, r3, lsl #1
   18acc:	mov	r2, #0
   18ad0:	addne	pc, pc, r3, lsl #2
   18ad4:	nop			; (mov r0, r0)
   18ad8:	cmp	r0, r1, lsl #31
   18adc:	adc	r2, r2, r2
   18ae0:	subcs	r0, r0, r1, lsl #31
   18ae4:	cmp	r0, r1, lsl #30
   18ae8:	adc	r2, r2, r2
   18aec:	subcs	r0, r0, r1, lsl #30
   18af0:	cmp	r0, r1, lsl #29
   18af4:	adc	r2, r2, r2
   18af8:	subcs	r0, r0, r1, lsl #29
   18afc:	cmp	r0, r1, lsl #28
   18b00:	adc	r2, r2, r2
   18b04:	subcs	r0, r0, r1, lsl #28
   18b08:	cmp	r0, r1, lsl #27
   18b0c:	adc	r2, r2, r2
   18b10:	subcs	r0, r0, r1, lsl #27
   18b14:	cmp	r0, r1, lsl #26
   18b18:	adc	r2, r2, r2
   18b1c:	subcs	r0, r0, r1, lsl #26
   18b20:	cmp	r0, r1, lsl #25
   18b24:	adc	r2, r2, r2
   18b28:	subcs	r0, r0, r1, lsl #25
   18b2c:	cmp	r0, r1, lsl #24
   18b30:	adc	r2, r2, r2
   18b34:	subcs	r0, r0, r1, lsl #24
   18b38:	cmp	r0, r1, lsl #23
   18b3c:	adc	r2, r2, r2
   18b40:	subcs	r0, r0, r1, lsl #23
   18b44:	cmp	r0, r1, lsl #22
   18b48:	adc	r2, r2, r2
   18b4c:	subcs	r0, r0, r1, lsl #22
   18b50:	cmp	r0, r1, lsl #21
   18b54:	adc	r2, r2, r2
   18b58:	subcs	r0, r0, r1, lsl #21
   18b5c:	cmp	r0, r1, lsl #20
   18b60:	adc	r2, r2, r2
   18b64:	subcs	r0, r0, r1, lsl #20
   18b68:	cmp	r0, r1, lsl #19
   18b6c:	adc	r2, r2, r2
   18b70:	subcs	r0, r0, r1, lsl #19
   18b74:	cmp	r0, r1, lsl #18
   18b78:	adc	r2, r2, r2
   18b7c:	subcs	r0, r0, r1, lsl #18
   18b80:	cmp	r0, r1, lsl #17
   18b84:	adc	r2, r2, r2
   18b88:	subcs	r0, r0, r1, lsl #17
   18b8c:	cmp	r0, r1, lsl #16
   18b90:	adc	r2, r2, r2
   18b94:	subcs	r0, r0, r1, lsl #16
   18b98:	cmp	r0, r1, lsl #15
   18b9c:	adc	r2, r2, r2
   18ba0:	subcs	r0, r0, r1, lsl #15
   18ba4:	cmp	r0, r1, lsl #14
   18ba8:	adc	r2, r2, r2
   18bac:	subcs	r0, r0, r1, lsl #14
   18bb0:	cmp	r0, r1, lsl #13
   18bb4:	adc	r2, r2, r2
   18bb8:	subcs	r0, r0, r1, lsl #13
   18bbc:	cmp	r0, r1, lsl #12
   18bc0:	adc	r2, r2, r2
   18bc4:	subcs	r0, r0, r1, lsl #12
   18bc8:	cmp	r0, r1, lsl #11
   18bcc:	adc	r2, r2, r2
   18bd0:	subcs	r0, r0, r1, lsl #11
   18bd4:	cmp	r0, r1, lsl #10
   18bd8:	adc	r2, r2, r2
   18bdc:	subcs	r0, r0, r1, lsl #10
   18be0:	cmp	r0, r1, lsl #9
   18be4:	adc	r2, r2, r2
   18be8:	subcs	r0, r0, r1, lsl #9
   18bec:	cmp	r0, r1, lsl #8
   18bf0:	adc	r2, r2, r2
   18bf4:	subcs	r0, r0, r1, lsl #8
   18bf8:	cmp	r0, r1, lsl #7
   18bfc:	adc	r2, r2, r2
   18c00:	subcs	r0, r0, r1, lsl #7
   18c04:	cmp	r0, r1, lsl #6
   18c08:	adc	r2, r2, r2
   18c0c:	subcs	r0, r0, r1, lsl #6
   18c10:	cmp	r0, r1, lsl #5
   18c14:	adc	r2, r2, r2
   18c18:	subcs	r0, r0, r1, lsl #5
   18c1c:	cmp	r0, r1, lsl #4
   18c20:	adc	r2, r2, r2
   18c24:	subcs	r0, r0, r1, lsl #4
   18c28:	cmp	r0, r1, lsl #3
   18c2c:	adc	r2, r2, r2
   18c30:	subcs	r0, r0, r1, lsl #3
   18c34:	cmp	r0, r1, lsl #2
   18c38:	adc	r2, r2, r2
   18c3c:	subcs	r0, r0, r1, lsl #2
   18c40:	cmp	r0, r1, lsl #1
   18c44:	adc	r2, r2, r2
   18c48:	subcs	r0, r0, r1, lsl #1
   18c4c:	cmp	r0, r1
   18c50:	adc	r2, r2, r2
   18c54:	subcs	r0, r0, r1
   18c58:	mov	r0, r2
   18c5c:	bx	lr
   18c60:	moveq	r0, #1
   18c64:	movne	r0, #0
   18c68:	bx	lr
   18c6c:	clz	r2, r1
   18c70:	rsb	r2, r2, #31
   18c74:	lsr	r0, r0, r2
   18c78:	bx	lr
   18c7c:	cmp	r0, #0
   18c80:	mvnne	r0, #0
   18c84:	b	18f24 <__assert_fail@plt+0x7fc8>
   18c88:	cmp	r1, #0
   18c8c:	beq	18c7c <__assert_fail@plt+0x7d20>
   18c90:	push	{r0, r1, lr}
   18c94:	bl	18a9c <__assert_fail@plt+0x7b40>
   18c98:	pop	{r1, r2, lr}
   18c9c:	mul	r3, r2, r0
   18ca0:	sub	r1, r1, r3
   18ca4:	bx	lr
   18ca8:	cmp	r1, #0
   18cac:	beq	18eb8 <__assert_fail@plt+0x7f5c>
   18cb0:	eor	ip, r0, r1
   18cb4:	rsbmi	r1, r1, #0
   18cb8:	subs	r2, r1, #1
   18cbc:	beq	18e84 <__assert_fail@plt+0x7f28>
   18cc0:	movs	r3, r0
   18cc4:	rsbmi	r3, r0, #0
   18cc8:	cmp	r3, r1
   18ccc:	bls	18e90 <__assert_fail@plt+0x7f34>
   18cd0:	tst	r1, r2
   18cd4:	beq	18ea0 <__assert_fail@plt+0x7f44>
   18cd8:	clz	r2, r3
   18cdc:	clz	r0, r1
   18ce0:	sub	r2, r0, r2
   18ce4:	rsbs	r2, r2, #31
   18ce8:	addne	r2, r2, r2, lsl #1
   18cec:	mov	r0, #0
   18cf0:	addne	pc, pc, r2, lsl #2
   18cf4:	nop			; (mov r0, r0)
   18cf8:	cmp	r3, r1, lsl #31
   18cfc:	adc	r0, r0, r0
   18d00:	subcs	r3, r3, r1, lsl #31
   18d04:	cmp	r3, r1, lsl #30
   18d08:	adc	r0, r0, r0
   18d0c:	subcs	r3, r3, r1, lsl #30
   18d10:	cmp	r3, r1, lsl #29
   18d14:	adc	r0, r0, r0
   18d18:	subcs	r3, r3, r1, lsl #29
   18d1c:	cmp	r3, r1, lsl #28
   18d20:	adc	r0, r0, r0
   18d24:	subcs	r3, r3, r1, lsl #28
   18d28:	cmp	r3, r1, lsl #27
   18d2c:	adc	r0, r0, r0
   18d30:	subcs	r3, r3, r1, lsl #27
   18d34:	cmp	r3, r1, lsl #26
   18d38:	adc	r0, r0, r0
   18d3c:	subcs	r3, r3, r1, lsl #26
   18d40:	cmp	r3, r1, lsl #25
   18d44:	adc	r0, r0, r0
   18d48:	subcs	r3, r3, r1, lsl #25
   18d4c:	cmp	r3, r1, lsl #24
   18d50:	adc	r0, r0, r0
   18d54:	subcs	r3, r3, r1, lsl #24
   18d58:	cmp	r3, r1, lsl #23
   18d5c:	adc	r0, r0, r0
   18d60:	subcs	r3, r3, r1, lsl #23
   18d64:	cmp	r3, r1, lsl #22
   18d68:	adc	r0, r0, r0
   18d6c:	subcs	r3, r3, r1, lsl #22
   18d70:	cmp	r3, r1, lsl #21
   18d74:	adc	r0, r0, r0
   18d78:	subcs	r3, r3, r1, lsl #21
   18d7c:	cmp	r3, r1, lsl #20
   18d80:	adc	r0, r0, r0
   18d84:	subcs	r3, r3, r1, lsl #20
   18d88:	cmp	r3, r1, lsl #19
   18d8c:	adc	r0, r0, r0
   18d90:	subcs	r3, r3, r1, lsl #19
   18d94:	cmp	r3, r1, lsl #18
   18d98:	adc	r0, r0, r0
   18d9c:	subcs	r3, r3, r1, lsl #18
   18da0:	cmp	r3, r1, lsl #17
   18da4:	adc	r0, r0, r0
   18da8:	subcs	r3, r3, r1, lsl #17
   18dac:	cmp	r3, r1, lsl #16
   18db0:	adc	r0, r0, r0
   18db4:	subcs	r3, r3, r1, lsl #16
   18db8:	cmp	r3, r1, lsl #15
   18dbc:	adc	r0, r0, r0
   18dc0:	subcs	r3, r3, r1, lsl #15
   18dc4:	cmp	r3, r1, lsl #14
   18dc8:	adc	r0, r0, r0
   18dcc:	subcs	r3, r3, r1, lsl #14
   18dd0:	cmp	r3, r1, lsl #13
   18dd4:	adc	r0, r0, r0
   18dd8:	subcs	r3, r3, r1, lsl #13
   18ddc:	cmp	r3, r1, lsl #12
   18de0:	adc	r0, r0, r0
   18de4:	subcs	r3, r3, r1, lsl #12
   18de8:	cmp	r3, r1, lsl #11
   18dec:	adc	r0, r0, r0
   18df0:	subcs	r3, r3, r1, lsl #11
   18df4:	cmp	r3, r1, lsl #10
   18df8:	adc	r0, r0, r0
   18dfc:	subcs	r3, r3, r1, lsl #10
   18e00:	cmp	r3, r1, lsl #9
   18e04:	adc	r0, r0, r0
   18e08:	subcs	r3, r3, r1, lsl #9
   18e0c:	cmp	r3, r1, lsl #8
   18e10:	adc	r0, r0, r0
   18e14:	subcs	r3, r3, r1, lsl #8
   18e18:	cmp	r3, r1, lsl #7
   18e1c:	adc	r0, r0, r0
   18e20:	subcs	r3, r3, r1, lsl #7
   18e24:	cmp	r3, r1, lsl #6
   18e28:	adc	r0, r0, r0
   18e2c:	subcs	r3, r3, r1, lsl #6
   18e30:	cmp	r3, r1, lsl #5
   18e34:	adc	r0, r0, r0
   18e38:	subcs	r3, r3, r1, lsl #5
   18e3c:	cmp	r3, r1, lsl #4
   18e40:	adc	r0, r0, r0
   18e44:	subcs	r3, r3, r1, lsl #4
   18e48:	cmp	r3, r1, lsl #3
   18e4c:	adc	r0, r0, r0
   18e50:	subcs	r3, r3, r1, lsl #3
   18e54:	cmp	r3, r1, lsl #2
   18e58:	adc	r0, r0, r0
   18e5c:	subcs	r3, r3, r1, lsl #2
   18e60:	cmp	r3, r1, lsl #1
   18e64:	adc	r0, r0, r0
   18e68:	subcs	r3, r3, r1, lsl #1
   18e6c:	cmp	r3, r1
   18e70:	adc	r0, r0, r0
   18e74:	subcs	r3, r3, r1
   18e78:	cmp	ip, #0
   18e7c:	rsbmi	r0, r0, #0
   18e80:	bx	lr
   18e84:	teq	ip, r0
   18e88:	rsbmi	r0, r0, #0
   18e8c:	bx	lr
   18e90:	movcc	r0, #0
   18e94:	asreq	r0, ip, #31
   18e98:	orreq	r0, r0, #1
   18e9c:	bx	lr
   18ea0:	clz	r2, r1
   18ea4:	rsb	r2, r2, #31
   18ea8:	cmp	ip, #0
   18eac:	lsr	r0, r3, r2
   18eb0:	rsbmi	r0, r0, #0
   18eb4:	bx	lr
   18eb8:	cmp	r0, #0
   18ebc:	mvngt	r0, #-2147483648	; 0x80000000
   18ec0:	movlt	r0, #-2147483648	; 0x80000000
   18ec4:	b	18f24 <__assert_fail@plt+0x7fc8>
   18ec8:	cmp	r1, #0
   18ecc:	beq	18eb8 <__assert_fail@plt+0x7f5c>
   18ed0:	push	{r0, r1, lr}
   18ed4:	bl	18cb0 <__assert_fail@plt+0x7d54>
   18ed8:	pop	{r1, r2, lr}
   18edc:	mul	r3, r2, r0
   18ee0:	sub	r1, r1, r3
   18ee4:	bx	lr
   18ee8:	cmp	r3, #0
   18eec:	cmpeq	r2, #0
   18ef0:	bne	18f08 <__assert_fail@plt+0x7fac>
   18ef4:	cmp	r1, #0
   18ef8:	cmpeq	r0, #0
   18efc:	mvnne	r1, #0
   18f00:	mvnne	r0, #0
   18f04:	b	18f24 <__assert_fail@plt+0x7fc8>
   18f08:	sub	sp, sp, #8
   18f0c:	push	{sp, lr}
   18f10:	bl	18f34 <__assert_fail@plt+0x7fd8>
   18f14:	ldr	lr, [sp, #4]
   18f18:	add	sp, sp, #8
   18f1c:	pop	{r2, r3}
   18f20:	bx	lr
   18f24:	push	{r1, lr}
   18f28:	mov	r0, #8
   18f2c:	bl	10cf8 <raise@plt>
   18f30:	pop	{r1, pc}
   18f34:	cmp	r1, r3
   18f38:	push	{r4, r5, r6, r7, r8, r9, lr}
   18f3c:	cmpeq	r0, r2
   18f40:	mov	r4, r0
   18f44:	mov	r5, r1
   18f48:	ldr	r9, [sp, #28]
   18f4c:	movcc	r0, #0
   18f50:	movcc	r1, #0
   18f54:	bcc	1904c <__assert_fail@plt+0x80f0>
   18f58:	cmp	r3, #0
   18f5c:	clzeq	ip, r2
   18f60:	clzne	ip, r3
   18f64:	addeq	ip, ip, #32
   18f68:	cmp	r5, #0
   18f6c:	clzeq	r1, r4
   18f70:	addeq	r1, r1, #32
   18f74:	clzne	r1, r5
   18f78:	sub	ip, ip, r1
   18f7c:	sub	lr, ip, #32
   18f80:	lsl	r7, r3, ip
   18f84:	rsb	r8, ip, #32
   18f88:	orr	r7, r7, r2, lsl lr
   18f8c:	orr	r7, r7, r2, lsr r8
   18f90:	lsl	r6, r2, ip
   18f94:	cmp	r5, r7
   18f98:	cmpeq	r4, r6
   18f9c:	movcc	r0, #0
   18fa0:	movcc	r1, #0
   18fa4:	bcc	18fc0 <__assert_fail@plt+0x8064>
   18fa8:	mov	r3, #1
   18fac:	subs	r4, r4, r6
   18fb0:	lsl	r1, r3, lr
   18fb4:	lsl	r0, r3, ip
   18fb8:	orr	r1, r1, r3, lsr r8
   18fbc:	sbc	r5, r5, r7
   18fc0:	cmp	ip, #0
   18fc4:	beq	1904c <__assert_fail@plt+0x80f0>
   18fc8:	lsrs	r3, r7, #1
   18fcc:	rrx	r2, r6
   18fd0:	mov	r6, ip
   18fd4:	b	18ff8 <__assert_fail@plt+0x809c>
   18fd8:	subs	r4, r4, r2
   18fdc:	sbc	r5, r5, r3
   18fe0:	adds	r4, r4, r4
   18fe4:	adc	r5, r5, r5
   18fe8:	adds	r4, r4, #1
   18fec:	adc	r5, r5, #0
   18ff0:	subs	r6, r6, #1
   18ff4:	beq	19014 <__assert_fail@plt+0x80b8>
   18ff8:	cmp	r5, r3
   18ffc:	cmpeq	r4, r2
   19000:	bcs	18fd8 <__assert_fail@plt+0x807c>
   19004:	adds	r4, r4, r4
   19008:	adc	r5, r5, r5
   1900c:	subs	r6, r6, #1
   19010:	bne	18ff8 <__assert_fail@plt+0x809c>
   19014:	lsr	r6, r4, ip
   19018:	lsr	r7, r5, ip
   1901c:	orr	r6, r6, r5, lsl r8
   19020:	adds	r2, r0, r4
   19024:	orr	r6, r6, r5, lsr lr
   19028:	adc	r3, r1, r5
   1902c:	lsl	r1, r7, ip
   19030:	orr	r1, r1, r6, lsl lr
   19034:	lsl	r0, r6, ip
   19038:	orr	r1, r1, r6, lsr r8
   1903c:	subs	r0, r2, r0
   19040:	mov	r4, r6
   19044:	mov	r5, r7
   19048:	sbc	r1, r3, r1
   1904c:	cmp	r9, #0
   19050:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19054:	strd	r4, [r9]
   19058:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1905c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19060:	mov	r7, r0
   19064:	ldr	r6, [pc, #72]	; 190b4 <__assert_fail@plt+0x8158>
   19068:	ldr	r5, [pc, #72]	; 190b8 <__assert_fail@plt+0x815c>
   1906c:	add	r6, pc, r6
   19070:	add	r5, pc, r5
   19074:	sub	r6, r6, r5
   19078:	mov	r8, r1
   1907c:	mov	r9, r2
   19080:	bl	10cc0 <calloc@plt-0x20>
   19084:	asrs	r6, r6, #2
   19088:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1908c:	mov	r4, #0
   19090:	add	r4, r4, #1
   19094:	ldr	r3, [r5], #4
   19098:	mov	r2, r9
   1909c:	mov	r1, r8
   190a0:	mov	r0, r7
   190a4:	blx	r3
   190a8:	cmp	r6, r4
   190ac:	bne	19090 <__assert_fail@plt+0x8134>
   190b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   190b4:	muleq	r1, ip, lr
   190b8:	muleq	r1, r4, lr
   190bc:	bx	lr
   190c0:	ldr	r3, [pc, #12]	; 190d4 <__assert_fail@plt+0x8178>
   190c4:	mov	r1, #0
   190c8:	add	r3, pc, r3
   190cc:	ldr	r2, [r3]
   190d0:	b	10ea8 <__cxa_atexit@plt>
   190d4:	andeq	r1, r1, ip, lsl r0

Disassembly of section .fini:

000190d8 <.fini>:
   190d8:	push	{r3, lr}
   190dc:	pop	{r3, pc}
