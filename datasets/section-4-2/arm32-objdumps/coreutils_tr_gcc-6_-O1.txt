
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	10f8c <__assert_fail@plt+0x48>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r8, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <read@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <fflush@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__strtoull_internal@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <stpcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <fputc_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <dcgettext@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <textdomain@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <iswprint@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <fwrite@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <lseek64@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <__ctype_get_mb_cur_max@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <__fpending@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <mbrtowc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <error@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <malloc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__libc_start_main@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__freading@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <__ctype_tolower_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_toupper_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <__gmon_start__@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <getopt_long@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <__ctype_b_loc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <exit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <strlen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <strchr@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__errno_location@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <__sprintf_chk@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #420]!	; 0x1a4

00010f38 <close@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #412]!	; 0x19c

00010f44 <__assert_fail@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #404]!	; 0x194

Disassembly of section .text:

00010f50 <.text>:
   10f50:	mov	fp, #0
   10f54:	mov	lr, #0
   10f58:	pop	{r1}		; (ldr r1, [sp], #4)
   10f5c:	mov	r2, sp
   10f60:	push	{r2}		; (str r2, [sp, #-4]!)
   10f64:	push	{r0}		; (str r0, [sp, #-4]!)
   10f68:	ldr	ip, [pc, #16]	; 10f80 <__assert_fail@plt+0x3c>
   10f6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f70:	ldr	r0, [pc, #12]	; 10f84 <__assert_fail@plt+0x40>
   10f74:	ldr	r3, [pc, #12]	; 10f88 <__assert_fail@plt+0x44>
   10f78:	bl	10e0c <__libc_start_main@plt>
   10f7c:	bl	10f2c <abort@plt>
   10f80:	andeq	r7, r1, ip, asr r0
   10f84:	strdeq	r2, [r1], -r0
   10f88:	strdeq	r6, [r1], -ip
   10f8c:	ldr	r3, [pc, #20]	; 10fa8 <__assert_fail@plt+0x64>
   10f90:	ldr	r2, [pc, #20]	; 10fac <__assert_fail@plt+0x68>
   10f94:	add	r3, pc, r3
   10f98:	ldr	r2, [r3, r2]
   10f9c:	cmp	r2, #0
   10fa0:	bxeq	lr
   10fa4:	b	10e3c <__gmon_start__@plt>
   10fa8:	andeq	r8, r1, r4, rrx
   10fac:	andeq	r0, r0, r4, ror #1
   10fb0:	ldr	r3, [pc, #28]	; 10fd4 <__assert_fail@plt+0x90>
   10fb4:	ldr	r0, [pc, #28]	; 10fd8 <__assert_fail@plt+0x94>
   10fb8:	sub	r3, r3, r0
   10fbc:	cmp	r3, #6
   10fc0:	bxls	lr
   10fc4:	ldr	r3, [pc, #16]	; 10fdc <__assert_fail@plt+0x98>
   10fc8:	cmp	r3, #0
   10fcc:	bxeq	lr
   10fd0:	bx	r3
   10fd4:	andeq	r9, r2, fp, lsr r1
   10fd8:	andeq	r9, r2, r8, lsr r1
   10fdc:	andeq	r0, r0, r0
   10fe0:	ldr	r1, [pc, #36]	; 1100c <__assert_fail@plt+0xc8>
   10fe4:	ldr	r0, [pc, #36]	; 11010 <__assert_fail@plt+0xcc>
   10fe8:	sub	r1, r1, r0
   10fec:	asr	r1, r1, #2
   10ff0:	add	r1, r1, r1, lsr #31
   10ff4:	asrs	r1, r1, #1
   10ff8:	bxeq	lr
   10ffc:	ldr	r3, [pc, #16]	; 11014 <__assert_fail@plt+0xd0>
   11000:	cmp	r3, #0
   11004:	bxeq	lr
   11008:	bx	r3
   1100c:	andeq	r9, r2, r8, lsr r1
   11010:	andeq	r9, r2, r8, lsr r1
   11014:	andeq	r0, r0, r0
   11018:	push	{r4, lr}
   1101c:	ldr	r4, [pc, #24]	; 1103c <__assert_fail@plt+0xf8>
   11020:	ldrb	r3, [r4]
   11024:	cmp	r3, #0
   11028:	popne	{r4, pc}
   1102c:	bl	10fb0 <__assert_fail@plt+0x6c>
   11030:	mov	r3, #1
   11034:	strb	r3, [r4]
   11038:	pop	{r4, pc}
   1103c:	andeq	r9, r2, r8, asr r1
   11040:	ldr	r0, [pc, #40]	; 11070 <__assert_fail@plt+0x12c>
   11044:	ldr	r3, [r0]
   11048:	cmp	r3, #0
   1104c:	bne	11054 <__assert_fail@plt+0x110>
   11050:	b	10fe0 <__assert_fail@plt+0x9c>
   11054:	ldr	r3, [pc, #24]	; 11074 <__assert_fail@plt+0x130>
   11058:	cmp	r3, #0
   1105c:	beq	11050 <__assert_fail@plt+0x10c>
   11060:	push	{r4, lr}
   11064:	blx	r3
   11068:	pop	{r4, lr}
   1106c:	b	10fe0 <__assert_fail@plt+0x9c>
   11070:	andeq	r8, r2, r4, lsl pc
   11074:	andeq	r0, r0, r0
   11078:	mov	r3, r0
   1107c:	ldr	r2, [r0]
   11080:	ldrb	r0, [r2, r1]
   11084:	cmp	r0, #42	; 0x2a
   11088:	beq	11094 <__assert_fail@plt+0x150>
   1108c:	mov	r0, #0
   11090:	bx	lr
   11094:	push	{r4, r5, lr}
   11098:	ldr	r5, [r3, #4]
   1109c:	ldrb	r0, [r5, r1]
   110a0:	cmp	r0, #0
   110a4:	bne	11130 <__assert_fail@plt+0x1ec>
   110a8:	add	r1, r1, #1
   110ac:	ldr	r4, [r3, #8]
   110b0:	cmp	r1, r4
   110b4:	bcs	11138 <__assert_fail@plt+0x1f4>
   110b8:	add	r3, r2, r1
   110bc:	ldrb	r2, [r2, r1]
   110c0:	sub	r0, r2, #48	; 0x30
   110c4:	cmp	r0, #9
   110c8:	bhi	11110 <__assert_fail@plt+0x1cc>
   110cc:	add	ip, r5, r1
   110d0:	ldrb	r0, [r5, r1]
   110d4:	cmp	r0, #0
   110d8:	bne	11124 <__assert_fail@plt+0x1e0>
   110dc:	add	r1, r1, #1
   110e0:	cmp	r1, r4
   110e4:	bcs	1112c <__assert_fail@plt+0x1e8>
   110e8:	ldrb	r2, [r3, #1]!
   110ec:	sub	lr, r2, #48	; 0x30
   110f0:	cmp	lr, #9
   110f4:	bhi	11110 <__assert_fail@plt+0x1cc>
   110f8:	ldrb	r2, [ip, #1]!
   110fc:	cmp	r2, #0
   11100:	beq	110dc <__assert_fail@plt+0x198>
   11104:	mov	r0, #0
   11108:	and	r0, r0, #1
   1110c:	pop	{r4, r5, pc}
   11110:	cmp	r2, #93	; 0x5d
   11114:	movne	r0, #0
   11118:	ldrbeq	r0, [r5, r1]
   1111c:	eoreq	r0, r0, #1
   11120:	b	11108 <__assert_fail@plt+0x1c4>
   11124:	mov	r0, #0
   11128:	b	11108 <__assert_fail@plt+0x1c4>
   1112c:	pop	{r4, r5, pc}
   11130:	mov	r0, #0
   11134:	pop	{r4, r5, pc}
   11138:	pop	{r4, r5, pc}
   1113c:	push	{r4, lr}
   11140:	mov	r2, r1
   11144:	mov	r1, r0
   11148:	mov	r0, #0
   1114c:	bl	1541c <__assert_fail@plt+0x44d8>
   11150:	cmn	r0, #1
   11154:	popne	{r4, pc}
   11158:	bl	10e84 <__errno_location@plt>
   1115c:	ldr	r4, [r0]
   11160:	mov	r2, #5
   11164:	ldr	r1, [pc, #20]	; 11180 <__assert_fail@plt+0x23c>
   11168:	mov	r0, #0
   1116c:	bl	10d88 <dcgettext@plt>
   11170:	mov	r2, r0
   11174:	mov	r1, r4
   11178:	mov	r0, #1
   1117c:	bl	10df4 <error@plt>
   11180:	strdeq	r7, [r1], -ip
   11184:	push	{r4, r5, r6, r7, r8, lr}
   11188:	mov	r4, r0
   1118c:	mov	r6, r1
   11190:	ldr	r5, [pc, #168]	; 11240 <__assert_fail@plt+0x2fc>
   11194:	mov	r7, #0
   11198:	mov	r8, #1
   1119c:	b	111f8 <__assert_fail@plt+0x2b4>
   111a0:	mov	r3, ip
   111a4:	add	ip, r3, #1
   111a8:	cmp	r0, ip
   111ac:	beq	111c0 <__assert_fail@plt+0x27c>
   111b0:	ldrb	r1, [r2, #1]!
   111b4:	ldrb	r1, [r5, r1]
   111b8:	cmp	r1, #0
   111bc:	beq	111a0 <__assert_fail@plt+0x25c>
   111c0:	add	r3, r3, #2
   111c4:	cmp	r0, r3
   111c8:	bls	111f0 <__assert_fail@plt+0x2ac>
   111cc:	add	r3, r4, r3
   111d0:	ldrb	r2, [r3], #1
   111d4:	ldrb	r1, [r5, r2]
   111d8:	cmp	r1, #0
   111dc:	strbeq	r2, [r4, ip]
   111e0:	addeq	ip, ip, #1
   111e4:	sub	r2, r3, r4
   111e8:	cmp	r2, r0
   111ec:	bcc	111d0 <__assert_fail@plt+0x28c>
   111f0:	cmp	ip, #0
   111f4:	bne	11238 <__assert_fail@plt+0x2f4>
   111f8:	mov	r1, r6
   111fc:	mov	r0, r4
   11200:	bl	1113c <__assert_fail@plt+0x1f8>
   11204:	cmp	r0, #0
   11208:	popeq	{r4, r5, r6, r7, r8, pc}
   1120c:	ldrb	r3, [r4]
   11210:	ldrb	r3, [r5, r3]
   11214:	cmp	r3, #0
   11218:	moveq	r2, r4
   1121c:	moveq	r3, r7
   11220:	beq	111a4 <__assert_fail@plt+0x260>
   11224:	cmp	r0, #1
   11228:	movhi	ip, r7
   1122c:	movhi	r3, r8
   11230:	bhi	111cc <__assert_fail@plt+0x288>
   11234:	b	111f8 <__assert_fail@plt+0x2b4>
   11238:	mov	r0, ip
   1123c:	pop	{r4, r5, r6, r7, r8, pc}
   11240:	andeq	r9, r2, ip, asr r1
   11244:	push	{r4, lr}
   11248:	mov	r4, r0
   1124c:	bl	1113c <__assert_fail@plt+0x1f8>
   11250:	cmp	r0, #0
   11254:	popeq	{r4, pc}
   11258:	mov	r3, r4
   1125c:	add	r1, r4, r0
   11260:	ldr	ip, [pc, #24]	; 11280 <__assert_fail@plt+0x33c>
   11264:	ldrb	r2, [r3]
   11268:	add	r2, ip, r2
   1126c:	ldrb	r2, [r2, #256]	; 0x100
   11270:	strb	r2, [r3], #1
   11274:	cmp	r3, r1
   11278:	bne	11264 <__assert_fail@plt+0x320>
   1127c:	pop	{r4, pc}
   11280:	andeq	r9, r2, ip, asr r1
   11284:	push	{r4, r5, r6, r7, r8, lr}
   11288:	mov	r4, r0
   1128c:	mov	r5, r1
   11290:	mov	r6, r2
   11294:	mov	r7, r3
   11298:	mov	r0, #24
   1129c:	bl	15a14 <__assert_fail@plt+0x4ad0>
   112a0:	mov	r3, #0
   112a4:	str	r3, [r0, #4]
   112a8:	mov	r3, #4
   112ac:	str	r3, [r0]
   112b0:	strb	r5, [r0, #8]
   112b4:	strd	r6, [r0, #16]
   112b8:	ldr	r3, [r4, #4]
   112bc:	cmp	r3, #0
   112c0:	beq	112d0 <__assert_fail@plt+0x38c>
   112c4:	str	r0, [r3, #4]
   112c8:	str	r0, [r4, #4]
   112cc:	pop	{r4, r5, r6, r7, r8, pc}
   112d0:	ldr	r3, [pc, #12]	; 112e4 <__assert_fail@plt+0x3a0>
   112d4:	ldr	r2, [pc, #12]	; 112e8 <__assert_fail@plt+0x3a4>
   112d8:	ldr	r1, [pc, #12]	; 112ec <__assert_fail@plt+0x3a8>
   112dc:	ldr	r0, [pc, #12]	; 112f0 <__assert_fail@plt+0x3ac>
   112e0:	bl	10f44 <__assert_fail@plt>
   112e4:	andeq	r7, r1, r4, lsl #1
   112e8:	ldrdeq	r0, [r0], -r1
   112ec:	andeq	r7, r1, r8, lsl #4
   112f0:	andeq	r7, r1, r4, lsl r2
   112f4:	push	{r4, r5, r6, lr}
   112f8:	mov	r4, r0
   112fc:	mov	r5, r1
   11300:	mov	r0, #24
   11304:	bl	15a14 <__assert_fail@plt+0x4ad0>
   11308:	mov	r3, #0
   1130c:	str	r3, [r0, #4]
   11310:	str	r3, [r0]
   11314:	strb	r5, [r0, #8]
   11318:	ldr	r3, [r4, #4]
   1131c:	cmp	r3, #0
   11320:	beq	11330 <__assert_fail@plt+0x3ec>
   11324:	str	r0, [r3, #4]
   11328:	str	r0, [r4, #4]
   1132c:	pop	{r4, r5, r6, pc}
   11330:	ldr	r3, [pc, #12]	; 11344 <__assert_fail@plt+0x400>
   11334:	ldr	r2, [pc, #12]	; 11348 <__assert_fail@plt+0x404>
   11338:	ldr	r1, [pc, #12]	; 1134c <__assert_fail@plt+0x408>
   1133c:	ldr	r0, [pc, #12]	; 11350 <__assert_fail@plt+0x40c>
   11340:	bl	10f44 <__assert_fail@plt>
   11344:	muleq	r1, ip, r0
   11348:	andeq	r0, r0, r9, lsl #5
   1134c:	andeq	r7, r1, r8, lsl #4
   11350:	andeq	r7, r1, r4, lsl r2
   11354:	push	{r4, r5, lr}
   11358:	sub	sp, sp, #12
   1135c:	mov	r5, r0
   11360:	mov	r0, #5
   11364:	bl	15a14 <__assert_fail@plt+0x4ad0>
   11368:	mov	r4, r0
   1136c:	bl	10e54 <__ctype_b_loc@plt>
   11370:	ldr	r2, [r0]
   11374:	lsl	r3, r5, #1
   11378:	ldrh	r3, [r2, r3]
   1137c:	tst	r3, #16384	; 0x4000
   11380:	beq	1139c <__assert_fail@plt+0x458>
   11384:	strb	r5, [r4]
   11388:	mov	r3, #0
   1138c:	strb	r3, [r4, #1]
   11390:	mov	r0, r4
   11394:	add	sp, sp, #12
   11398:	pop	{r4, r5, pc}
   1139c:	str	r5, [sp]
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x474>
   113a4:	mov	r2, #5
   113a8:	mov	r1, #1
   113ac:	mov	r0, r4
   113b0:	bl	10e90 <__sprintf_chk@plt>
   113b4:	b	11390 <__assert_fail@plt+0x44c>
   113b8:	andeq	r7, r1, r0, lsr #4
   113bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c0:	sub	sp, sp, #28
   113c4:	mov	r7, r0
   113c8:	mov	r4, r1
   113cc:	mov	r1, #4
   113d0:	add	r0, r4, #1
   113d4:	bl	15b0c <__assert_fail@plt+0x4bc8>
   113d8:	str	r0, [sp, #12]
   113dc:	cmp	r4, #0
   113e0:	beq	114d0 <__assert_fail@plt+0x58c>
   113e4:	mov	r5, r7
   113e8:	add	r7, r7, r4
   113ec:	mov	r6, r0
   113f0:	ldr	fp, [pc, #228]	; 114dc <__assert_fail@plt+0x598>
   113f4:	ldr	sl, [pc, #228]	; 114e0 <__assert_fail@plt+0x59c>
   113f8:	ldr	r9, [pc, #228]	; 114e4 <__assert_fail@plt+0x5a0>
   113fc:	ldr	r8, [pc, #228]	; 114e8 <__assert_fail@plt+0x5a4>
   11400:	b	11430 <__assert_fail@plt+0x4ec>
   11404:	cmp	r4, #8
   11408:	beq	11498 <__assert_fail@plt+0x554>
   1140c:	bhi	114a8 <__assert_fail@plt+0x564>
   11410:	cmp	r4, #7
   11414:	ldreq	r1, [pc, #208]	; 114ec <__assert_fail@plt+0x5a8>
   11418:	bne	1146c <__assert_fail@plt+0x528>
   1141c:	mov	r0, r6
   11420:	bl	10d70 <stpcpy@plt>
   11424:	mov	r6, r0
   11428:	cmp	r5, r7
   1142c:	beq	114d0 <__assert_fail@plt+0x58c>
   11430:	ldrb	r4, [r5], #1
   11434:	cmp	r4, #10
   11438:	beq	114a0 <__assert_fail@plt+0x55c>
   1143c:	bls	11404 <__assert_fail@plt+0x4c0>
   11440:	cmp	r4, #12
   11444:	moveq	r1, sl
   11448:	beq	1141c <__assert_fail@plt+0x4d8>
   1144c:	movcc	r1, r9
   11450:	bcc	1141c <__assert_fail@plt+0x4d8>
   11454:	cmp	r4, #13
   11458:	moveq	r1, r8
   1145c:	beq	1141c <__assert_fail@plt+0x4d8>
   11460:	cmp	r4, #92	; 0x5c
   11464:	ldreq	r1, [pc, #132]	; 114f0 <__assert_fail@plt+0x5ac>
   11468:	beq	1141c <__assert_fail@plt+0x4d8>
   1146c:	bl	10e54 <__ctype_b_loc@plt>
   11470:	ldr	r2, [r0]
   11474:	lsl	r3, r4, #1
   11478:	ldrh	r3, [r2, r3]
   1147c:	tst	r3, #16384	; 0x4000
   11480:	beq	114b0 <__assert_fail@plt+0x56c>
   11484:	strb	r4, [sp, #16]
   11488:	mov	r3, #0
   1148c:	strb	r3, [sp, #17]
   11490:	add	r1, sp, #16
   11494:	b	1141c <__assert_fail@plt+0x4d8>
   11498:	ldr	r1, [pc, #84]	; 114f4 <__assert_fail@plt+0x5b0>
   1149c:	b	1141c <__assert_fail@plt+0x4d8>
   114a0:	mov	r1, fp
   114a4:	b	1141c <__assert_fail@plt+0x4d8>
   114a8:	ldr	r1, [pc, #72]	; 114f8 <__assert_fail@plt+0x5b4>
   114ac:	b	1141c <__assert_fail@plt+0x4d8>
   114b0:	str	r4, [sp]
   114b4:	ldr	r3, [pc, #64]	; 114fc <__assert_fail@plt+0x5b8>
   114b8:	mov	r2, #5
   114bc:	mov	r1, #1
   114c0:	add	r0, sp, #16
   114c4:	bl	10e90 <__sprintf_chk@plt>
   114c8:	add	r1, sp, #16
   114cc:	b	1141c <__assert_fail@plt+0x4d8>
   114d0:	ldr	r0, [sp, #12]
   114d4:	add	sp, sp, #28
   114d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114dc:	andeq	r7, r1, r8, lsr r2
   114e0:	andeq	r7, r1, r4, lsr r2
   114e4:	andeq	r7, r1, r4, asr #4
   114e8:	andeq	r7, r1, ip, lsr r2
   114ec:	andeq	r7, r1, ip, lsr #4
   114f0:	andeq	r7, r1, r8, lsr #4
   114f4:	andeq	r7, r1, r0, lsr r2
   114f8:	andeq	r7, r1, r0, asr #4
   114fc:	andeq	r7, r1, r0, lsr #4
   11500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11504:	sub	sp, sp, #100	; 0x64
   11508:	mov	r8, r0
   1150c:	str	r1, [sp, #28]
   11510:	bl	10e6c <strlen@plt>
   11514:	mov	r4, r0
   11518:	bl	15a14 <__assert_fail@plt+0x4ad0>
   1151c:	str	r0, [sp, #84]	; 0x54
   11520:	mov	r1, #1
   11524:	mov	r0, r4
   11528:	bl	15ee0 <__assert_fail@plt+0x4f9c>
   1152c:	str	r0, [sp, #88]	; 0x58
   11530:	ldrb	r3, [r8]
   11534:	cmp	r3, #0
   11538:	beq	116f8 <__assert_fail@plt+0x7b4>
   1153c:	mov	r6, #1
   11540:	mov	r4, #0
   11544:	mov	fp, #8
   11548:	b	115d4 <__assert_fail@plt+0x690>
   1154c:	cmp	r3, #55	; 0x37
   11550:	bhi	11598 <__assert_fail@plt+0x654>
   11554:	cmp	r3, #48	; 0x30
   11558:	bcs	11654 <__assert_fail@plt+0x710>
   1155c:	cmp	r3, #0
   11560:	bne	11628 <__assert_fail@plt+0x6e4>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #1860]	; 11cb4 <__assert_fail@plt+0xd70>
   1156c:	mov	r0, #0
   11570:	bl	10d88 <dcgettext@plt>
   11574:	mov	r2, r0
   11578:	mov	r1, #0
   1157c:	mov	r0, r1
   11580:	bl	10df4 <error@plt>
   11584:	mov	r3, #0
   11588:	strb	r3, [r5, r7]
   1158c:	sub	r4, r4, #1
   11590:	mov	r5, #92	; 0x5c
   11594:	b	115b0 <__assert_fail@plt+0x66c>
   11598:	cmp	r3, #92	; 0x5c
   1159c:	moveq	r5, #92	; 0x5c
   115a0:	beq	115b0 <__assert_fail@plt+0x66c>
   115a4:	cmp	r3, #97	; 0x61
   115a8:	moveq	r5, #7
   115ac:	bne	11628 <__assert_fail@plt+0x6e4>
   115b0:	add	r4, r4, #1
   115b4:	ldr	r3, [sp, #84]	; 0x54
   115b8:	strb	r5, [r3, r7]
   115bc:	add	r4, r4, #1
   115c0:	ldrb	r3, [r8, r4]
   115c4:	add	r2, r6, #1
   115c8:	cmp	r3, #0
   115cc:	beq	116fc <__assert_fail@plt+0x7b8>
   115d0:	mov	r6, r2
   115d4:	sub	r7, r6, #1
   115d8:	cmp	r3, #92	; 0x5c
   115dc:	bne	116ec <__assert_fail@plt+0x7a8>
   115e0:	ldr	r5, [sp, #88]	; 0x58
   115e4:	mov	r3, #1
   115e8:	strb	r3, [r5, r7]
   115ec:	add	r9, r4, r3
   115f0:	ldrb	r3, [r8, r9]
   115f4:	cmp	r3, #98	; 0x62
   115f8:	beq	1164c <__assert_fail@plt+0x708>
   115fc:	bls	1154c <__assert_fail@plt+0x608>
   11600:	cmp	r3, #114	; 0x72
   11604:	moveq	r5, #13
   11608:	beq	115b0 <__assert_fail@plt+0x66c>
   1160c:	bhi	11630 <__assert_fail@plt+0x6ec>
   11610:	cmp	r3, #102	; 0x66
   11614:	moveq	r5, #12
   11618:	beq	115b0 <__assert_fail@plt+0x66c>
   1161c:	cmp	r3, #110	; 0x6e
   11620:	moveq	r5, #10
   11624:	beq	115b0 <__assert_fail@plt+0x66c>
   11628:	mov	r5, r3
   1162c:	b	115b0 <__assert_fail@plt+0x66c>
   11630:	cmp	r3, #116	; 0x74
   11634:	moveq	r5, #9
   11638:	beq	115b0 <__assert_fail@plt+0x66c>
   1163c:	cmp	r3, #118	; 0x76
   11640:	moveq	r5, #11
   11644:	beq	115b0 <__assert_fail@plt+0x66c>
   11648:	b	11628 <__assert_fail@plt+0x6e4>
   1164c:	mov	r5, fp
   11650:	b	115b0 <__assert_fail@plt+0x66c>
   11654:	sub	r3, r3, #48	; 0x30
   11658:	uxtb	r5, r3
   1165c:	add	sl, r4, #2
   11660:	ldrb	r3, [r8, sl]
   11664:	sub	r3, r3, #48	; 0x30
   11668:	cmp	r3, #7
   1166c:	bhi	115b0 <__assert_fail@plt+0x66c>
   11670:	add	r3, r3, r5, lsl #3
   11674:	and	r5, r3, #255	; 0xff
   11678:	add	r4, r4, #3
   1167c:	ldrb	r3, [r8, r4]
   11680:	sub	r3, r3, #48	; 0x30
   11684:	cmp	r3, #7
   11688:	movhi	r4, r9
   1168c:	bhi	115b0 <__assert_fail@plt+0x66c>
   11690:	add	r2, r3, r5, lsl #3
   11694:	cmp	r2, #255	; 0xff
   11698:	andle	r5, r2, #255	; 0xff
   1169c:	movle	r4, sl
   116a0:	ble	115b0 <__assert_fail@plt+0x66c>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #1544]	; 11cb8 <__assert_fail@plt+0xd74>
   116ac:	mov	r0, #0
   116b0:	bl	10d88 <dcgettext@plt>
   116b4:	ldrb	r3, [r8, r9]
   116b8:	ldrb	r2, [r8, sl]
   116bc:	ldrb	r1, [r8, r4]
   116c0:	str	r1, [sp, #16]
   116c4:	str	r2, [sp, #12]
   116c8:	str	r3, [sp, #8]
   116cc:	str	r1, [sp, #4]
   116d0:	str	r2, [sp]
   116d4:	mov	r2, r0
   116d8:	mov	r1, #0
   116dc:	mov	r0, r1
   116e0:	bl	10df4 <error@plt>
   116e4:	mov	r4, r9
   116e8:	b	115b0 <__assert_fail@plt+0x66c>
   116ec:	ldr	r2, [sp, #84]	; 0x54
   116f0:	strb	r3, [r2, r7]
   116f4:	b	115bc <__assert_fail@plt+0x678>
   116f8:	mov	r6, #0
   116fc:	str	r6, [sp, #92]	; 0x5c
   11700:	ldr	sl, [sp, #84]	; 0x54
   11704:	mov	r9, #0
   11708:	b	11c1c <__assert_fail@plt+0xcd8>
   1170c:	ldr	r7, [sp, #88]	; 0x58
   11710:	ldrb	r3, [r7, r9]
   11714:	str	r3, [sp, #40]	; 0x28
   11718:	cmp	r3, #0
   1171c:	bne	11c3c <__assert_fail@plt+0xcf8>
   11720:	add	r6, r9, #1
   11724:	ldrb	r3, [r5, r6]
   11728:	str	r3, [sp, #32]
   1172c:	cmp	r3, #58	; 0x3a
   11730:	beq	117b0 <__assert_fail@plt+0x86c>
   11734:	cmp	r3, #61	; 0x3d
   11738:	beq	117dc <__assert_fail@plt+0x898>
   1173c:	ldrb	r3, [r5, r8]
   11740:	cmp	r3, #42	; 0x2a
   11744:	bne	11c3c <__assert_fail@plt+0xcf8>
   11748:	ldrb	r3, [r7, r8]
   1174c:	cmp	r3, #0
   11750:	bne	11c3c <__assert_fail@plt+0xcf8>
   11754:	add	r3, r9, #3
   11758:	cmp	fp, r3
   1175c:	bls	11c3c <__assert_fail@plt+0xcf8>
   11760:	add	r1, r7, r3
   11764:	ldrb	r2, [r7, r3]
   11768:	cmp	r2, #0
   1176c:	bne	11c3c <__assert_fail@plt+0xcf8>
   11770:	add	r7, r5, r3
   11774:	ldrb	r2, [r5, r3]
   11778:	cmp	r2, #93	; 0x5d
   1177c:	movne	r0, r7
   11780:	beq	11aa8 <__assert_fail@plt+0xb64>
   11784:	add	r4, r3, #1
   11788:	cmp	fp, r4
   1178c:	bls	11c3c <__assert_fail@plt+0xcf8>
   11790:	ldrb	ip, [r1, #1]!
   11794:	cmp	ip, #0
   11798:	bne	11c3c <__assert_fail@plt+0xcf8>
   1179c:	ldrb	ip, [r0, #1]!
   117a0:	cmp	ip, #93	; 0x5d
   117a4:	beq	11a78 <__assert_fail@plt+0xb34>
   117a8:	mov	r3, r4
   117ac:	b	11784 <__assert_fail@plt+0x840>
   117b0:	ldrb	r3, [r7, r6]
   117b4:	cmp	r3, #0
   117b8:	bne	1173c <__assert_fail@plt+0x7f8>
   117bc:	ldrb	ip, [sl, r6]
   117c0:	sub	r0, fp, #1
   117c4:	cmp	r8, r0
   117c8:	bcs	1173c <__assert_fail@plt+0x7f8>
   117cc:	add	r3, r5, r8
   117d0:	add	r2, r7, r8
   117d4:	mov	r4, r8
   117d8:	b	117fc <__assert_fail@plt+0x8b8>
   117dc:	ldrb	r3, [r7, r6]
   117e0:	cmp	r3, #0
   117e4:	bne	1173c <__assert_fail@plt+0x7f8>
   117e8:	b	117bc <__assert_fail@plt+0x878>
   117ec:	add	r4, r4, #1
   117f0:	add	r2, r2, #1
   117f4:	cmp	r4, r0
   117f8:	bcs	1173c <__assert_fail@plt+0x7f8>
   117fc:	ldrb	r1, [r3], #1
   11800:	cmp	ip, r1
   11804:	bne	117ec <__assert_fail@plt+0x8a8>
   11808:	ldrb	r1, [r3]
   1180c:	cmp	r1, #93	; 0x5d
   11810:	bne	117ec <__assert_fail@plt+0x8a8>
   11814:	ldrb	r1, [r2]
   11818:	cmp	r1, #0
   1181c:	bne	117ec <__assert_fail@plt+0x8a8>
   11820:	ldrb	r1, [r2, #1]
   11824:	cmp	r1, #0
   11828:	bne	117ec <__assert_fail@plt+0x8a8>
   1182c:	mvn	r3, #1
   11830:	sub	r3, r3, r9
   11834:	add	r2, sl, r8
   11838:	str	r2, [sp, #36]	; 0x24
   1183c:	adds	r3, r3, r4
   11840:	str	r3, [sp, #44]	; 0x2c
   11844:	beq	118b0 <__assert_fail@plt+0x96c>
   11848:	cmp	ip, #58	; 0x3a
   1184c:	beq	118dc <__assert_fail@plt+0x998>
   11850:	ldr	r3, [sp, #44]	; 0x2c
   11854:	cmp	r3, #1
   11858:	beq	11a28 <__assert_fail@plt+0xae4>
   1185c:	mov	r1, r8
   11860:	add	r0, sp, #84	; 0x54
   11864:	bl	11078 <__assert_fail@plt+0x134>
   11868:	cmp	r0, #0
   1186c:	bne	1173c <__assert_fail@plt+0x7f8>
   11870:	ldr	r1, [sp, #44]	; 0x2c
   11874:	ldr	r0, [sp, #36]	; 0x24
   11878:	bl	113bc <__assert_fail@plt+0x478>
   1187c:	mov	r4, r0
   11880:	mov	r2, #5
   11884:	ldr	r1, [pc, #1072]	; 11cbc <__assert_fail@plt+0xd78>
   11888:	mov	r0, #0
   1188c:	bl	10d88 <dcgettext@plt>
   11890:	mov	r3, r4
   11894:	mov	r2, r0
   11898:	mov	r1, #0
   1189c:	mov	r0, r1
   118a0:	bl	10df4 <error@plt>
   118a4:	mov	r0, r4
   118a8:	bl	13860 <__assert_fail@plt+0x291c>
   118ac:	b	11ba0 <__assert_fail@plt+0xc5c>
   118b0:	cmp	ip, #58	; 0x3a
   118b4:	mov	r2, #5
   118b8:	ldreq	r1, [pc, #1024]	; 11cc0 <__assert_fail@plt+0xd7c>
   118bc:	ldrne	r1, [pc, #1024]	; 11cc4 <__assert_fail@plt+0xd80>
   118c0:	mov	r0, #0
   118c4:	bl	10d88 <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r1, #0
   118d0:	mov	r0, r1
   118d4:	bl	10df4 <error@plt>
   118d8:	b	11ba0 <__assert_fail@plt+0xc5c>
   118dc:	ldr	r3, [pc, #996]	; 11cc8 <__assert_fail@plt+0xd84>
   118e0:	add	r3, r3, #40	; 0x28
   118e4:	mov	r2, #0
   118e8:	str	r9, [sp, #48]	; 0x30
   118ec:	str	sl, [sp, #52]	; 0x34
   118f0:	str	r5, [sp, #56]	; 0x38
   118f4:	ldr	sl, [sp, #44]	; 0x2c
   118f8:	mov	r9, r3
   118fc:	str	r4, [sp, #60]	; 0x3c
   11900:	mov	r4, r2
   11904:	b	11914 <__assert_fail@plt+0x9d0>
   11908:	add	r4, r4, #1
   1190c:	cmp	r4, #11
   11910:	bhi	119a8 <__assert_fail@plt+0xa64>
   11914:	ldr	r5, [r9, #4]!
   11918:	mov	r2, sl
   1191c:	mov	r1, r5
   11920:	ldr	r0, [sp, #36]	; 0x24
   11924:	bl	10f20 <strncmp@plt>
   11928:	cmp	r0, #0
   1192c:	bne	11908 <__assert_fail@plt+0x9c4>
   11930:	mov	r0, r5
   11934:	bl	10e6c <strlen@plt>
   11938:	cmp	sl, r0
   1193c:	bne	11908 <__assert_fail@plt+0x9c4>
   11940:	ldr	r9, [sp, #48]	; 0x30
   11944:	ldr	sl, [sp, #52]	; 0x34
   11948:	ldr	r5, [sp, #56]	; 0x38
   1194c:	mov	r3, r4
   11950:	ldr	r4, [sp, #60]	; 0x3c
   11954:	str	r3, [sp, #48]	; 0x30
   11958:	ldr	r2, [pc, #876]	; 11ccc <__assert_fail@plt+0xd88>
   1195c:	cmp	r3, r2
   11960:	beq	119b4 <__assert_fail@plt+0xa70>
   11964:	mov	r0, #24
   11968:	bl	15a14 <__assert_fail@plt+0x4ad0>
   1196c:	mov	r3, #0
   11970:	str	r3, [r0, #4]
   11974:	mov	r3, #2
   11978:	str	r3, [r0]
   1197c:	ldr	r3, [sp, #48]	; 0x30
   11980:	str	r3, [r0, #8]
   11984:	ldr	r3, [sp, #28]
   11988:	ldr	r3, [r3, #4]
   1198c:	cmp	r3, #0
   11990:	beq	11a14 <__assert_fail@plt+0xad0>
   11994:	str	r0, [r3, #4]
   11998:	ldr	r3, [sp, #28]
   1199c:	str	r0, [r3, #4]
   119a0:	add	r9, r4, #2
   119a4:	b	11c1c <__assert_fail@plt+0xcd8>
   119a8:	ldr	r9, [sp, #48]	; 0x30
   119ac:	ldr	sl, [sp, #52]	; 0x34
   119b0:	ldr	r5, [sp, #56]	; 0x38
   119b4:	mov	r1, r8
   119b8:	add	r0, sp, #84	; 0x54
   119bc:	bl	11078 <__assert_fail@plt+0x134>
   119c0:	cmp	r0, #0
   119c4:	bne	1173c <__assert_fail@plt+0x7f8>
   119c8:	ldr	r1, [sp, #44]	; 0x2c
   119cc:	ldr	r0, [sp, #36]	; 0x24
   119d0:	bl	113bc <__assert_fail@plt+0x478>
   119d4:	mov	r4, r0
   119d8:	mov	r2, #5
   119dc:	ldr	r1, [pc, #748]	; 11cd0 <__assert_fail@plt+0xd8c>
   119e0:	mov	r0, #0
   119e4:	bl	10d88 <dcgettext@plt>
   119e8:	mov	r5, r0
   119ec:	mov	r0, r4
   119f0:	bl	15408 <__assert_fail@plt+0x44c4>
   119f4:	mov	r3, r0
   119f8:	mov	r2, r5
   119fc:	mov	r1, #0
   11a00:	mov	r0, r1
   11a04:	bl	10df4 <error@plt>
   11a08:	mov	r0, r4
   11a0c:	bl	13860 <__assert_fail@plt+0x291c>
   11a10:	b	11ba0 <__assert_fail@plt+0xc5c>
   11a14:	ldr	r3, [pc, #696]	; 11cd4 <__assert_fail@plt+0xd90>
   11a18:	ldr	r2, [pc, #696]	; 11cd8 <__assert_fail@plt+0xd94>
   11a1c:	ldr	r1, [pc, #696]	; 11cdc <__assert_fail@plt+0xd98>
   11a20:	ldr	r0, [pc, #696]	; 11ce0 <__assert_fail@plt+0xd9c>
   11a24:	bl	10f44 <__assert_fail@plt>
   11a28:	mov	r0, #24
   11a2c:	bl	15a14 <__assert_fail@plt+0x4ad0>
   11a30:	mov	r3, #0
   11a34:	str	r3, [r0, #4]
   11a38:	mov	r3, #3
   11a3c:	str	r3, [r0]
   11a40:	ldrb	r3, [sl, r8]
   11a44:	strb	r3, [r0, #8]
   11a48:	ldr	r3, [sp, #28]
   11a4c:	ldr	r3, [r3, #4]
   11a50:	cmp	r3, #0
   11a54:	strne	r0, [r3, #4]
   11a58:	ldrne	r3, [sp, #28]
   11a5c:	strne	r0, [r3, #4]
   11a60:	bne	119a0 <__assert_fail@plt+0xa5c>
   11a64:	ldr	r3, [pc, #632]	; 11ce4 <__assert_fail@plt+0xda0>
   11a68:	ldr	r2, [pc, #632]	; 11ce8 <__assert_fail@plt+0xda4>
   11a6c:	ldr	r1, [pc, #616]	; 11cdc <__assert_fail@plt+0xd98>
   11a70:	ldr	r0, [pc, #616]	; 11ce0 <__assert_fail@plt+0xd9c>
   11a74:	bl	10f44 <__assert_fail@plt>
   11a78:	mvn	r1, r6
   11a7c:	adds	r5, r1, r3
   11a80:	bne	11ab0 <__assert_fail@plt+0xb6c>
   11a84:	mov	r2, #0
   11a88:	mov	r3, #0
   11a8c:	strd	r2, [sp, #72]	; 0x48
   11a90:	ldrd	r2, [sp, #72]	; 0x48
   11a94:	ldr	r1, [sp, #32]
   11a98:	ldr	r0, [sp, #28]
   11a9c:	bl	11284 <__assert_fail@plt+0x340>
   11aa0:	add	r9, r4, #1
   11aa4:	b	11c1c <__assert_fail@plt+0xcd8>
   11aa8:	mov	r4, r3
   11aac:	b	11a84 <__assert_fail@plt+0xb40>
   11ab0:	mov	r3, #0
   11ab4:	str	r3, [sp]
   11ab8:	add	r3, sp, #72	; 0x48
   11abc:	cmp	r2, #48	; 0x30
   11ac0:	moveq	r2, #8
   11ac4:	movne	r2, #10
   11ac8:	add	r1, sp, #68	; 0x44
   11acc:	mov	r0, r7
   11ad0:	bl	160e0 <__assert_fail@plt+0x519c>
   11ad4:	cmp	r0, #0
   11ad8:	bne	11b04 <__assert_fail@plt+0xbc0>
   11adc:	ldrd	r2, [sp, #72]	; 0x48
   11ae0:	mvn	r0, #0
   11ae4:	mvn	r1, #0
   11ae8:	cmp	r3, r1
   11aec:	cmpeq	r2, r0
   11af0:	beq	11b04 <__assert_fail@plt+0xbc0>
   11af4:	add	r3, r7, r5
   11af8:	ldr	r2, [sp, #68]	; 0x44
   11afc:	cmp	r2, r3
   11b00:	beq	11a90 <__assert_fail@plt+0xb4c>
   11b04:	mov	r1, r5
   11b08:	mov	r0, r7
   11b0c:	bl	113bc <__assert_fail@plt+0x478>
   11b10:	mov	r4, r0
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #460]	; 11cec <__assert_fail@plt+0xda8>
   11b1c:	mov	r0, #0
   11b20:	bl	10d88 <dcgettext@plt>
   11b24:	mov	r5, r0
   11b28:	mov	r0, r4
   11b2c:	bl	15408 <__assert_fail@plt+0x44c4>
   11b30:	mov	r3, r0
   11b34:	mov	r2, r5
   11b38:	mov	r1, #0
   11b3c:	mov	r0, r1
   11b40:	bl	10df4 <error@plt>
   11b44:	mov	r0, r4
   11b48:	bl	13860 <__assert_fail@plt+0x291c>
   11b4c:	b	11ba0 <__assert_fail@plt+0xc5c>
   11b50:	mov	r0, r4
   11b54:	bl	11354 <__assert_fail@plt+0x410>
   11b58:	mov	r6, r0
   11b5c:	mov	r0, r5
   11b60:	bl	11354 <__assert_fail@plt+0x410>
   11b64:	mov	r4, r0
   11b68:	mov	r2, #5
   11b6c:	ldr	r1, [pc, #380]	; 11cf0 <__assert_fail@plt+0xdac>
   11b70:	mov	r0, #0
   11b74:	bl	10d88 <dcgettext@plt>
   11b78:	str	r4, [sp]
   11b7c:	mov	r3, r6
   11b80:	mov	r2, r0
   11b84:	mov	r1, #0
   11b88:	mov	r0, r1
   11b8c:	bl	10df4 <error@plt>
   11b90:	mov	r0, r6
   11b94:	bl	13860 <__assert_fail@plt+0x291c>
   11b98:	mov	r0, r4
   11b9c:	bl	13860 <__assert_fail@plt+0x291c>
   11ba0:	ldr	r0, [sp, #84]	; 0x54
   11ba4:	bl	13860 <__assert_fail@plt+0x291c>
   11ba8:	ldr	r0, [sp, #88]	; 0x58
   11bac:	bl	13860 <__assert_fail@plt+0x291c>
   11bb0:	ldr	r0, [sp, #40]	; 0x28
   11bb4:	add	sp, sp, #100	; 0x64
   11bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bbc:	ldr	r3, [pc, #304]	; 11cf4 <__assert_fail@plt+0xdb0>
   11bc0:	ldr	r2, [pc, #304]	; 11cf8 <__assert_fail@plt+0xdb4>
   11bc4:	ldr	r1, [pc, #272]	; 11cdc <__assert_fail@plt+0xd98>
   11bc8:	ldr	r0, [pc, #272]	; 11ce0 <__assert_fail@plt+0xd9c>
   11bcc:	bl	10f44 <__assert_fail@plt>
   11bd0:	cmp	r9, fp
   11bd4:	bcs	11c00 <__assert_fail@plt+0xcbc>
   11bd8:	add	r4, sl, r9
   11bdc:	add	r5, sl, fp
   11be0:	ldrb	r1, [r4], #1
   11be4:	ldr	r0, [sp, #28]
   11be8:	bl	112f4 <__assert_fail@plt+0x3b0>
   11bec:	cmp	r4, r5
   11bf0:	bne	11be0 <__assert_fail@plt+0xc9c>
   11bf4:	mov	r3, #1
   11bf8:	str	r3, [sp, #40]	; 0x28
   11bfc:	b	11ba0 <__assert_fail@plt+0xc5c>
   11c00:	mov	r3, #1
   11c04:	str	r3, [sp, #40]	; 0x28
   11c08:	b	11ba0 <__assert_fail@plt+0xc5c>
   11c0c:	ldrb	r1, [sl, r9]
   11c10:	ldr	r0, [sp, #28]
   11c14:	bl	112f4 <__assert_fail@plt+0x3b0>
   11c18:	mov	r9, r4
   11c1c:	add	r8, r9, #2
   11c20:	ldr	fp, [sp, #92]	; 0x5c
   11c24:	cmp	r8, fp
   11c28:	bcs	11bd0 <__assert_fail@plt+0xc8c>
   11c2c:	ldr	r5, [sp, #84]	; 0x54
   11c30:	ldrb	r3, [r5, r9]
   11c34:	cmp	r3, #91	; 0x5b
   11c38:	beq	1170c <__assert_fail@plt+0x7c8>
   11c3c:	add	r4, r9, #1
   11c40:	ldrb	r3, [r5, r4]
   11c44:	cmp	r3, #45	; 0x2d
   11c48:	bne	11c0c <__assert_fail@plt+0xcc8>
   11c4c:	ldr	r3, [sp, #88]	; 0x58
   11c50:	ldrb	r3, [r3, r4]
   11c54:	str	r3, [sp, #40]	; 0x28
   11c58:	cmp	r3, #0
   11c5c:	bne	11c0c <__assert_fail@plt+0xcc8>
   11c60:	ldrb	r4, [sl, r9]
   11c64:	ldrb	r5, [sl, r8]
   11c68:	cmp	r4, r5
   11c6c:	bhi	11b50 <__assert_fail@plt+0xc0c>
   11c70:	mov	r0, #24
   11c74:	bl	15a14 <__assert_fail@plt+0x4ad0>
   11c78:	mov	r3, #0
   11c7c:	str	r3, [r0, #4]
   11c80:	mov	r3, #1
   11c84:	str	r3, [r0]
   11c88:	strb	r4, [r0, #8]
   11c8c:	strb	r5, [r0, #9]
   11c90:	ldr	r3, [sp, #28]
   11c94:	ldr	r3, [r3, #4]
   11c98:	cmp	r3, #0
   11c9c:	beq	11bbc <__assert_fail@plt+0xc78>
   11ca0:	str	r0, [r3, #4]
   11ca4:	ldr	r3, [sp, #28]
   11ca8:	str	r0, [r3, #4]
   11cac:	add	r9, r9, #3
   11cb0:	b	11c1c <__assert_fail@plt+0xcd8>
   11cb4:	andeq	r7, r1, ip, lsr #5
   11cb8:	andeq	r7, r1, r8, asr #4
   11cbc:	andeq	r7, r1, ip, asr r3
   11cc0:	strdeq	r7, [r1], -r0
   11cc4:	andeq	r7, r1, r4, lsl r3
   11cc8:	andeq	r7, r1, r4, lsl #1
   11ccc:	andeq	r2, r0, pc, lsl #14
   11cd0:	andeq	r7, r1, r0, asr #6
   11cd4:	andeq	r7, r1, r0, ror #1
   11cd8:			; <UNDEFINED> instruction: 0x000002bd
   11cdc:	andeq	r7, r1, r8, lsl #4
   11ce0:	andeq	r7, r1, r4, lsl r2
   11ce4:	strdeq	r7, [r1], -r4
   11ce8:	andeq	r0, r0, r7, ror #5
   11cec:	muleq	r1, r8, r3
   11cf0:	andeq	r7, r1, r4, asr #7
   11cf4:	andeq	r7, r1, r8, lsl #2
   11cf8:	andeq	r0, r0, r7, lsr #5
   11cfc:	push	{r4, lr}
   11d00:	mov	r4, r1
   11d04:	cmp	r0, #11
   11d08:	ldrls	pc, [pc, r0, lsl #2]
   11d0c:	b	11e68 <__assert_fail@plt+0xf24>
   11d10:	andeq	r1, r1, r0, asr #26
   11d14:	andeq	r1, r1, r0, ror #26
   11d18:	andeq	r1, r1, r8, ror sp
   11d1c:	muleq	r1, r0, sp
   11d20:	andeq	r1, r1, r8, lsr #27
   11d24:	andeq	r1, r1, r0, asr #27
   11d28:	ldrdeq	r1, [r1], -r8
   11d2c:	strdeq	r1, [r1], -r0
   11d30:	andeq	r1, r1, r8, lsl #28
   11d34:	andeq	r1, r1, r0, lsr #28
   11d38:	andeq	r1, r1, r8, lsr lr
   11d3c:	andeq	r1, r1, r0, asr lr
   11d40:	bl	10e54 <__ctype_b_loc@plt>
   11d44:	ldr	r3, [r0]
   11d48:	lsl	r4, r4, #1
   11d4c:	ldrh	r0, [r3, r4]
   11d50:	and	r0, r0, #8
   11d54:	adds	r0, r0, #0
   11d58:	movne	r0, #1
   11d5c:	pop	{r4, pc}
   11d60:	bl	10e54 <__ctype_b_loc@plt>
   11d64:	ldr	r3, [r0]
   11d68:	lsl	r4, r4, #1
   11d6c:	ldrh	r0, [r3, r4]
   11d70:	and	r0, r0, #1024	; 0x400
   11d74:	b	11d54 <__assert_fail@plt+0xe10>
   11d78:	bl	10e54 <__ctype_b_loc@plt>
   11d7c:	ldr	r3, [r0]
   11d80:	lsl	r4, r4, #1
   11d84:	ldrh	r0, [r3, r4]
   11d88:	and	r0, r0, #1
   11d8c:	b	11d54 <__assert_fail@plt+0xe10>
   11d90:	bl	10e54 <__ctype_b_loc@plt>
   11d94:	ldr	r3, [r0]
   11d98:	lsl	r4, r4, #1
   11d9c:	ldrh	r0, [r3, r4]
   11da0:	and	r0, r0, #2
   11da4:	b	11d54 <__assert_fail@plt+0xe10>
   11da8:	bl	10e54 <__ctype_b_loc@plt>
   11dac:	ldr	r3, [r0]
   11db0:	lsl	r4, r4, #1
   11db4:	ldrh	r0, [r3, r4]
   11db8:	and	r0, r0, #2048	; 0x800
   11dbc:	b	11d54 <__assert_fail@plt+0xe10>
   11dc0:	bl	10e54 <__ctype_b_loc@plt>
   11dc4:	ldr	r3, [r0]
   11dc8:	lsl	r4, r4, #1
   11dcc:	ldrh	r0, [r3, r4]
   11dd0:	and	r0, r0, #32768	; 0x8000
   11dd4:	b	11d54 <__assert_fail@plt+0xe10>
   11dd8:	bl	10e54 <__ctype_b_loc@plt>
   11ddc:	ldr	r3, [r0]
   11de0:	lsl	r4, r4, #1
   11de4:	ldrh	r0, [r3, r4]
   11de8:	and	r0, r0, #512	; 0x200
   11dec:	b	11d54 <__assert_fail@plt+0xe10>
   11df0:	bl	10e54 <__ctype_b_loc@plt>
   11df4:	ldr	r3, [r0]
   11df8:	lsl	r4, r4, #1
   11dfc:	ldrh	r0, [r3, r4]
   11e00:	and	r0, r0, #16384	; 0x4000
   11e04:	b	11d54 <__assert_fail@plt+0xe10>
   11e08:	bl	10e54 <__ctype_b_loc@plt>
   11e0c:	ldr	r3, [r0]
   11e10:	lsl	r4, r4, #1
   11e14:	ldrh	r0, [r3, r4]
   11e18:	and	r0, r0, #4
   11e1c:	b	11d54 <__assert_fail@plt+0xe10>
   11e20:	bl	10e54 <__ctype_b_loc@plt>
   11e24:	ldr	r3, [r0]
   11e28:	lsl	r4, r4, #1
   11e2c:	ldrh	r0, [r3, r4]
   11e30:	and	r0, r0, #8192	; 0x2000
   11e34:	b	11d54 <__assert_fail@plt+0xe10>
   11e38:	bl	10e54 <__ctype_b_loc@plt>
   11e3c:	ldr	r3, [r0]
   11e40:	lsl	r4, r4, #1
   11e44:	ldrh	r0, [r3, r4]
   11e48:	and	r0, r0, #256	; 0x100
   11e4c:	b	11d54 <__assert_fail@plt+0xe10>
   11e50:	bl	10e54 <__ctype_b_loc@plt>
   11e54:	ldr	r3, [r0]
   11e58:	lsl	r4, r4, #1
   11e5c:	ldrh	r0, [r3, r4]
   11e60:	and	r0, r0, #4096	; 0x1000
   11e64:	b	11d54 <__assert_fail@plt+0xe10>
   11e68:	bl	10f2c <abort@plt>
   11e6c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e70:	mov	fp, r0
   11e74:	mov	r3, #0
   11e78:	str	r3, [r0, #24]
   11e7c:	strb	r3, [r0, #32]
   11e80:	strb	r3, [r0, #34]	; 0x22
   11e84:	strb	r3, [r0, #33]	; 0x21
   11e88:	ldr	r3, [r0]
   11e8c:	ldr	sl, [r3, #4]
   11e90:	cmp	sl, #0
   11e94:	beq	12028 <__assert_fail@plt+0x10e4>
   11e98:	mov	r8, #0
   11e9c:	mov	r9, #0
   11ea0:	b	11fe4 <__assert_fail@plt+0x10a0>
   11ea4:	ldrb	r3, [sl, #9]
   11ea8:	ldrb	r6, [sl, #8]
   11eac:	cmp	r3, r6
   11eb0:	subcs	r6, r3, r6
   11eb4:	addcs	r6, r6, #1
   11eb8:	asrcs	r7, r6, #31
   11ebc:	bcs	11fa0 <__assert_fail@plt+0x105c>
   11ec0:	ldr	r3, [pc, #368]	; 12038 <__assert_fail@plt+0x10f4>
   11ec4:	ldr	r2, [pc, #368]	; 1203c <__assert_fail@plt+0x10f8>
   11ec8:	ldr	r1, [pc, #368]	; 12040 <__assert_fail@plt+0x10fc>
   11ecc:	ldr	r0, [pc, #368]	; 12044 <__assert_fail@plt+0x1100>
   11ed0:	bl	10f44 <__assert_fail@plt>
   11ed4:	mov	r3, #1
   11ed8:	strb	r3, [fp, #33]	; 0x21
   11edc:	ldr	r5, [sl, #8]
   11ee0:	mov	r4, #0
   11ee4:	mov	r6, #0
   11ee8:	mov	r7, #0
   11eec:	b	11efc <__assert_fail@plt+0xfb8>
   11ef0:	add	r4, r4, #1
   11ef4:	cmp	r4, #256	; 0x100
   11ef8:	beq	11f1c <__assert_fail@plt+0xfd8>
   11efc:	uxtb	r1, r4
   11f00:	mov	r0, r5
   11f04:	bl	11cfc <__assert_fail@plt+0xdb8>
   11f08:	cmp	r0, #0
   11f0c:	beq	11ef0 <__assert_fail@plt+0xfac>
   11f10:	adds	r6, r6, #1
   11f14:	adc	r7, r7, #0
   11f18:	b	11ef0 <__assert_fail@plt+0xfac>
   11f1c:	cmp	r5, #6
   11f20:	beq	11fa0 <__assert_fail@plt+0x105c>
   11f24:	cmp	r5, #10
   11f28:	movne	r3, #1
   11f2c:	strbne	r3, [fp, #34]	; 0x22
   11f30:	b	11fa0 <__assert_fail@plt+0x105c>
   11f34:	ldrb	r1, [sl, #8]
   11f38:	mov	r3, #0
   11f3c:	mov	r6, #0
   11f40:	mov	r7, #0
   11f44:	b	11f54 <__assert_fail@plt+0x1010>
   11f48:	add	r3, r3, #1
   11f4c:	cmp	r3, #256	; 0x100
   11f50:	beq	11f6c <__assert_fail@plt+0x1028>
   11f54:	uxtb	r2, r3
   11f58:	cmp	r1, r2
   11f5c:	bne	11f48 <__assert_fail@plt+0x1004>
   11f60:	adds	r6, r6, #1
   11f64:	adc	r7, r7, #0
   11f68:	b	11f48 <__assert_fail@plt+0x1004>
   11f6c:	mov	r3, #1
   11f70:	strb	r3, [fp, #32]
   11f74:	b	11fa0 <__assert_fail@plt+0x105c>
   11f78:	ldrd	r6, [sl, #16]
   11f7c:	orrs	r3, r6, r7
   11f80:	streq	sl, [fp, #28]
   11f84:	ldreq	r3, [fp, #24]
   11f88:	addeq	r3, r3, #1
   11f8c:	streq	r3, [fp, #24]
   11f90:	b	11fa0 <__assert_fail@plt+0x105c>
   11f94:	bl	10f2c <abort@plt>
   11f98:	mov	r6, #1
   11f9c:	mov	r7, #0
   11fa0:	adds	r6, r6, r8
   11fa4:	adc	r7, r7, r9
   11fa8:	cmp	r7, r9
   11fac:	cmpeq	r6, r8
   11fb0:	movcc	r2, #1
   11fb4:	movcs	r2, #0
   11fb8:	and	r3, r6, r7
   11fbc:	cmn	r3, #1
   11fc0:	movne	r3, #0
   11fc4:	moveq	r3, #1
   11fc8:	orrs	r3, r2, r3
   11fcc:	bne	12008 <__assert_fail@plt+0x10c4>
   11fd0:	ldr	sl, [sl, #4]
   11fd4:	mov	r8, r6
   11fd8:	mov	r9, r7
   11fdc:	cmp	sl, #0
   11fe0:	beq	12030 <__assert_fail@plt+0x10ec>
   11fe4:	ldr	r3, [sl]
   11fe8:	cmp	r3, #4
   11fec:	ldrls	pc, [pc, r3, lsl #2]
   11ff0:	b	11f94 <__assert_fail@plt+0x1050>
   11ff4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11ff8:	andeq	r1, r1, r4, lsr #29
   11ffc:	ldrdeq	r1, [r1], -r4
   12000:	andeq	r1, r1, r4, lsr pc
   12004:	andeq	r1, r1, r8, ror pc
   12008:	mov	r2, #5
   1200c:	ldr	r1, [pc, #52]	; 12048 <__assert_fail@plt+0x1104>
   12010:	mov	r0, #0
   12014:	bl	10d88 <dcgettext@plt>
   12018:	mov	r2, r0
   1201c:	mov	r1, #0
   12020:	mov	r0, #1
   12024:	bl	10df4 <error@plt>
   12028:	mov	r6, #0
   1202c:	mov	r7, #0
   12030:	strd	r6, [fp, #16]
   12034:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12038:	andeq	r7, r1, r8, lsl r1
   1203c:	strdeq	r0, [r0], -r1
   12040:	andeq	r7, r1, r8, lsl #4
   12044:	andeq	r7, r1, r8, lsl #8
   12048:	andeq	r7, r1, r8, lsr r4
   1204c:	push	{r4, r5, r6, r7, r8, lr}
   12050:	cmp	r1, #0
   12054:	movne	r3, #2
   12058:	strne	r3, [r1]
   1205c:	ldrd	r2, [r0, #8]
   12060:	mvn	r4, #1
   12064:	mvn	r5, #0
   12068:	cmp	r3, r5
   1206c:	cmpeq	r2, r4
   12070:	beq	120a8 <__assert_fail@plt+0x1164>
   12074:	ldr	r6, [r0, #4]
   12078:	cmp	r6, #0
   1207c:	beq	12324 <__assert_fail@plt+0x13e0>
   12080:	mov	r5, r0
   12084:	ldr	r3, [r6]
   12088:	cmp	r3, #4
   1208c:	ldrls	pc, [pc, r3, lsl #2]
   12090:	b	12320 <__assert_fail@plt+0x13dc>
   12094:	andeq	r2, r1, r4, asr #1
   12098:	andeq	r2, r1, r4, ror #1
   1209c:	andeq	r2, r1, ip, asr #2
   120a0:	andeq	r2, r1, r4, ror r2
   120a4:	muleq	r1, r0, r2
   120a8:	ldr	r3, [r0]
   120ac:	ldr	r3, [r3, #4]
   120b0:	str	r3, [r0, #4]
   120b4:	mvn	r2, #0
   120b8:	mvn	r3, #0
   120bc:	strd	r2, [r0, #8]
   120c0:	b	12074 <__assert_fail@plt+0x1130>
   120c4:	ldrb	r8, [r6, #8]
   120c8:	mvn	r2, #0
   120cc:	mvn	r3, #0
   120d0:	strd	r2, [r0, #8]
   120d4:	ldr	r3, [r6, #4]
   120d8:	str	r3, [r0, #4]
   120dc:	mov	r0, r8
   120e0:	pop	{r4, r5, r6, r7, r8, pc}
   120e4:	ldrd	r2, [r0, #8]
   120e8:	mvn	r0, #0
   120ec:	mvn	r1, #0
   120f0:	cmp	r3, r1
   120f4:	cmpeq	r2, r0
   120f8:	beq	1213c <__assert_fail@plt+0x11f8>
   120fc:	adds	r2, r2, #1
   12100:	adc	r3, r3, #0
   12104:	strd	r2, [r5, #8]
   12108:	ldrd	r2, [r5, #8]
   1210c:	mov	r8, r2
   12110:	ldrb	r0, [r6, #9]
   12114:	mov	r1, #0
   12118:	cmp	r3, r1
   1211c:	cmpeq	r2, r0
   12120:	bne	120dc <__assert_fail@plt+0x1198>
   12124:	ldr	r3, [r6, #4]
   12128:	str	r3, [r5, #4]
   1212c:	mvn	r2, #0
   12130:	mvn	r3, #0
   12134:	strd	r2, [r5, #8]
   12138:	b	120dc <__assert_fail@plt+0x1198>
   1213c:	ldrb	r2, [r6, #8]
   12140:	mov	r3, #0
   12144:	strd	r2, [r5, #8]
   12148:	b	12108 <__assert_fail@plt+0x11c4>
   1214c:	cmp	r1, #0
   12150:	beq	1216c <__assert_fail@plt+0x1228>
   12154:	ldr	r3, [r6, #8]
   12158:	cmp	r3, #6
   1215c:	beq	121e8 <__assert_fail@plt+0x12a4>
   12160:	cmp	r3, #10
   12164:	moveq	r3, #1
   12168:	streq	r3, [r1]
   1216c:	ldrd	r2, [r5, #8]
   12170:	mvn	r0, #0
   12174:	mvn	r1, #0
   12178:	cmp	r3, r1
   1217c:	cmpeq	r2, r0
   12180:	beq	121f4 <__assert_fail@plt+0x12b0>
   12184:	ldr	r7, [r6, #8]
   12188:	ldr	r4, [r5, #8]
   1218c:	uxtb	r1, r4
   12190:	mov	r0, r7
   12194:	bl	11cfc <__assert_fail@plt+0xdb8>
   12198:	cmp	r0, #0
   1219c:	beq	12248 <__assert_fail@plt+0x1304>
   121a0:	mov	r8, r4
   121a4:	add	r4, r4, #1
   121a8:	cmp	r4, #255	; 0xff
   121ac:	bgt	121d0 <__assert_fail@plt+0x128c>
   121b0:	uxtb	r1, r4
   121b4:	mov	r0, r7
   121b8:	bl	11cfc <__assert_fail@plt+0xdb8>
   121bc:	cmp	r0, #0
   121c0:	bne	1225c <__assert_fail@plt+0x1318>
   121c4:	add	r4, r4, #1
   121c8:	cmp	r4, #256	; 0x100
   121cc:	bne	121b0 <__assert_fail@plt+0x126c>
   121d0:	ldr	r3, [r6, #4]
   121d4:	str	r3, [r5, #4]
   121d8:	mvn	r2, #0
   121dc:	mvn	r3, #0
   121e0:	strd	r2, [r5, #8]
   121e4:	b	120dc <__assert_fail@plt+0x1198>
   121e8:	mov	r3, #0
   121ec:	str	r3, [r1]
   121f0:	b	1216c <__assert_fail@plt+0x1228>
   121f4:	ldr	r7, [r6, #8]
   121f8:	mov	r4, #0
   121fc:	uxtb	r1, r4
   12200:	mov	r0, r7
   12204:	bl	11cfc <__assert_fail@plt+0xdb8>
   12208:	cmp	r0, #0
   1220c:	bne	12230 <__assert_fail@plt+0x12ec>
   12210:	add	r4, r4, #1
   12214:	cmp	r4, #256	; 0x100
   12218:	bne	121fc <__assert_fail@plt+0x12b8>
   1221c:	ldr	r3, [pc, #264]	; 1232c <__assert_fail@plt+0x13e8>
   12220:	ldr	r2, [pc, #264]	; 12330 <__assert_fail@plt+0x13ec>
   12224:	ldr	r1, [pc, #264]	; 12334 <__assert_fail@plt+0x13f0>
   12228:	ldr	r0, [pc, #264]	; 12338 <__assert_fail@plt+0x13f4>
   1222c:	bl	10f44 <__assert_fail@plt>
   12230:	cmp	r4, #255	; 0xff
   12234:	bgt	1221c <__assert_fail@plt+0x12d8>
   12238:	mov	r2, r4
   1223c:	asr	r3, r4, #31
   12240:	strd	r2, [r5, #8]
   12244:	b	12184 <__assert_fail@plt+0x1240>
   12248:	ldr	r3, [pc, #220]	; 1232c <__assert_fail@plt+0x13e8>
   1224c:	ldr	r2, [pc, #232]	; 1233c <__assert_fail@plt+0x13f8>
   12250:	ldr	r1, [pc, #220]	; 12334 <__assert_fail@plt+0x13f0>
   12254:	ldr	r0, [pc, #228]	; 12340 <__assert_fail@plt+0x13fc>
   12258:	bl	10f44 <__assert_fail@plt>
   1225c:	cmp	r4, #255	; 0xff
   12260:	bgt	121d0 <__assert_fail@plt+0x128c>
   12264:	mov	r2, r4
   12268:	asr	r3, r4, #31
   1226c:	strd	r2, [r5, #8]
   12270:	b	120dc <__assert_fail@plt+0x1198>
   12274:	ldrb	r8, [r6, #8]
   12278:	mvn	r2, #0
   1227c:	mvn	r3, #0
   12280:	strd	r2, [r0, #8]
   12284:	ldr	r3, [r6, #4]
   12288:	str	r3, [r0, #4]
   1228c:	b	120dc <__assert_fail@plt+0x1198>
   12290:	ldrd	r2, [r6, #16]
   12294:	orrs	r3, r2, r3
   12298:	beq	122f0 <__assert_fail@plt+0x13ac>
   1229c:	ldrd	r2, [r0, #8]
   122a0:	mvn	r0, #0
   122a4:	mvn	r1, #0
   122a8:	cmp	r3, r1
   122ac:	cmpeq	r2, r0
   122b0:	beq	12310 <__assert_fail@plt+0x13cc>
   122b4:	ldrd	r0, [r5, #8]
   122b8:	adds	r0, r0, #1
   122bc:	adc	r1, r1, #0
   122c0:	strd	r0, [r5, #8]
   122c4:	ldrb	r8, [r6, #8]
   122c8:	ldrd	r2, [r6, #16]
   122cc:	cmp	r1, r3
   122d0:	cmpeq	r0, r2
   122d4:	bne	120dc <__assert_fail@plt+0x1198>
   122d8:	ldr	r3, [r6, #4]
   122dc:	str	r3, [r5, #4]
   122e0:	mvn	r2, #0
   122e4:	mvn	r3, #0
   122e8:	strd	r2, [r5, #8]
   122ec:	b	120dc <__assert_fail@plt+0x1198>
   122f0:	ldr	r3, [r6, #4]
   122f4:	str	r3, [r0, #4]
   122f8:	mvn	r2, #0
   122fc:	mvn	r3, #0
   12300:	strd	r2, [r0, #8]
   12304:	bl	1204c <__assert_fail@plt+0x1108>
   12308:	mov	r8, r0
   1230c:	b	120dc <__assert_fail@plt+0x1198>
   12310:	mov	r2, #0
   12314:	mov	r3, #0
   12318:	strd	r2, [r5, #8]
   1231c:	b	122b4 <__assert_fail@plt+0x1370>
   12320:	bl	10f2c <abort@plt>
   12324:	mvn	r8, #0
   12328:	b	120dc <__assert_fail@plt+0x1198>
   1232c:	andeq	r7, r1, r8, lsr #2
   12330:	andeq	r0, r0, r7, lsr r4
   12334:	andeq	r7, r1, r8, lsl #4
   12338:	andeq	r7, r1, r4, asr r4
   1233c:	andeq	r0, r0, sl, lsr r4
   12340:	andeq	r7, r1, r0, ror #8
   12344:	push	{r4, r5, r6, r7, r8, lr}
   12348:	mov	r5, r0
   1234c:	mov	r8, r1
   12350:	mov	r4, r2
   12354:	mvn	r2, #1
   12358:	mvn	r3, #0
   1235c:	strd	r2, [r0, #8]
   12360:	mov	r6, #0
   12364:	mov	r7, #1
   12368:	b	12370 <__assert_fail@plt+0x142c>
   1236c:	strb	r7, [r4, r0]
   12370:	mov	r1, r6
   12374:	mov	r0, r5
   12378:	bl	1204c <__assert_fail@plt+0x1108>
   1237c:	cmn	r0, #1
   12380:	bne	1236c <__assert_fail@plt+0x1428>
   12384:	cmp	r8, #0
   12388:	popeq	{r4, r5, r6, r7, r8, pc}
   1238c:	sub	r3, r4, #1
   12390:	add	r1, r4, #255	; 0xff
   12394:	ldrb	r2, [r3, #1]
   12398:	eor	r2, r2, #1
   1239c:	strb	r2, [r3, #1]!
   123a0:	cmp	r3, r1
   123a4:	bne	12394 <__assert_fail@plt+0x1450>
   123a8:	pop	{r4, r5, r6, r7, r8, pc}
   123ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123b0:	sub	sp, sp, #12
   123b4:	mov	r6, r0
   123b8:	str	r1, [sp, #4]
   123bc:	mov	sl, r2
   123c0:	mov	r4, #0
   123c4:	mov	r0, r4
   123c8:	mvn	r5, #-2147483648	; 0x80000000
   123cc:	ldr	r9, [pc, #404]	; 12568 <__assert_fail@plt+0x1624>
   123d0:	ldr	fp, [pc, #404]	; 1256c <__assert_fail@plt+0x1628>
   123d4:	b	1251c <__assert_fail@plt+0x15d8>
   123d8:	ldr	r1, [sp, #4]
   123dc:	mov	r0, r6
   123e0:	blx	sl
   123e4:	subs	r4, r0, #0
   123e8:	beq	12560 <__assert_fail@plt+0x161c>
   123ec:	cmn	r5, #-2147483647	; 0x80000001
   123f0:	movne	r0, #0
   123f4:	bne	1252c <__assert_fail@plt+0x15e8>
   123f8:	mov	r0, #0
   123fc:	ldrb	r3, [r6, r0]
   12400:	add	r3, r9, r3
   12404:	ldrb	r3, [r3, #512]	; 0x200
   12408:	cmp	r3, #0
   1240c:	bne	124c4 <__assert_fail@plt+0x1580>
   12410:	mov	r7, r0
   12414:	add	r7, r7, #2
   12418:	cmp	r7, r4
   1241c:	bcs	12490 <__assert_fail@plt+0x154c>
   12420:	ldrb	r3, [r6, r7]
   12424:	add	r3, r9, r3
   12428:	ldrb	r3, [r3, #512]	; 0x200
   1242c:	cmp	r3, #0
   12430:	beq	12414 <__assert_fail@plt+0x14d0>
   12434:	ldrb	r5, [r6, r7]
   12438:	sub	r3, r7, r0
   1243c:	add	r8, r3, #1
   12440:	cmp	r7, #0
   12444:	beq	12458 <__assert_fail@plt+0x1514>
   12448:	add	r2, r6, r7
   1244c:	ldrb	r2, [r2, #-1]
   12450:	cmp	r5, r2
   12454:	moveq	r8, r3
   12458:	add	r7, r7, #1
   1245c:	cmp	r8, #0
   12460:	beq	12510 <__assert_fail@plt+0x15cc>
   12464:	ldr	r3, [fp]
   12468:	mov	r2, r8
   1246c:	mov	r1, #1
   12470:	add	r0, r6, r0
   12474:	bl	10d58 <fwrite_unlocked@plt>
   12478:	cmp	r0, r8
   1247c:	bne	124e8 <__assert_fail@plt+0x15a4>
   12480:	mov	r0, r7
   12484:	cmn	r5, #-2147483647	; 0x80000001
   12488:	beq	1251c <__assert_fail@plt+0x15d8>
   1248c:	b	1252c <__assert_fail@plt+0x15e8>
   12490:	bne	124d0 <__assert_fail@plt+0x158c>
   12494:	sub	r2, r4, #1
   12498:	ldrb	r3, [r6, r2]
   1249c:	add	r3, r9, r3
   124a0:	ldrb	r3, [r3, #512]	; 0x200
   124a4:	cmp	r3, #0
   124a8:	movne	r4, r7
   124ac:	movne	r7, r2
   124b0:	bne	124c8 <__assert_fail@plt+0x1584>
   124b4:	mov	r3, r7
   124b8:	mov	r7, r4
   124bc:	mov	r4, r3
   124c0:	b	124d0 <__assert_fail@plt+0x158c>
   124c4:	mov	r7, r0
   124c8:	cmp	r7, r4
   124cc:	bcc	12434 <__assert_fail@plt+0x14f0>
   124d0:	subs	r8, r4, r0
   124d4:	moveq	r0, r7
   124d8:	mvneq	r5, #-2147483648	; 0x80000000
   124dc:	beq	1251c <__assert_fail@plt+0x15d8>
   124e0:	mvn	r5, #-2147483648	; 0x80000000
   124e4:	b	12464 <__assert_fail@plt+0x1520>
   124e8:	bl	10e84 <__errno_location@plt>
   124ec:	ldr	r4, [r0]
   124f0:	mov	r2, #5
   124f4:	ldr	r1, [pc, #116]	; 12570 <__assert_fail@plt+0x162c>
   124f8:	mov	r0, #0
   124fc:	bl	10d88 <dcgettext@plt>
   12500:	mov	r2, r0
   12504:	mov	r1, r4
   12508:	mov	r0, #1
   1250c:	bl	10df4 <error@plt>
   12510:	mov	r0, r7
   12514:	b	12484 <__assert_fail@plt+0x1540>
   12518:	mvn	r5, #-2147483648	; 0x80000000
   1251c:	cmp	r0, r4
   12520:	bcs	123d8 <__assert_fail@plt+0x1494>
   12524:	cmn	r5, #-2147483647	; 0x80000001
   12528:	beq	123fc <__assert_fail@plt+0x14b8>
   1252c:	cmp	r0, r4
   12530:	bcs	1251c <__assert_fail@plt+0x15d8>
   12534:	add	r2, r6, r0
   12538:	ldrb	r3, [r6, r0]
   1253c:	cmp	r3, r5
   12540:	bne	12518 <__assert_fail@plt+0x15d4>
   12544:	add	r0, r0, #1
   12548:	cmp	r0, r4
   1254c:	beq	1251c <__assert_fail@plt+0x15d8>
   12550:	ldrb	r1, [r2, #1]!
   12554:	cmp	r1, r3
   12558:	bne	12518 <__assert_fail@plt+0x15d4>
   1255c:	b	12544 <__assert_fail@plt+0x1600>
   12560:	add	sp, sp, #12
   12564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12568:	andeq	r9, r2, ip, asr r1
   1256c:	andeq	r9, r2, r4, asr r1
   12570:	muleq	r1, r4, r4
   12574:	push	{lr}		; (str lr, [sp, #-4]!)
   12578:	sub	sp, sp, #60	; 0x3c
   1257c:	subs	r6, r0, #0
   12580:	beq	125bc <__assert_fail@plt+0x1678>
   12584:	ldr	r3, [pc, #776]	; 12894 <__assert_fail@plt+0x1950>
   12588:	ldr	r4, [r3]
   1258c:	mov	r2, #5
   12590:	ldr	r1, [pc, #768]	; 12898 <__assert_fail@plt+0x1954>
   12594:	mov	r0, #0
   12598:	bl	10d88 <dcgettext@plt>
   1259c:	ldr	r3, [pc, #760]	; 1289c <__assert_fail@plt+0x1958>
   125a0:	ldr	r3, [r3]
   125a4:	mov	r2, r0
   125a8:	mov	r1, #1
   125ac:	mov	r0, r4
   125b0:	bl	10ecc <__fprintf_chk@plt>
   125b4:	mov	r0, r6
   125b8:	bl	10e60 <exit@plt>
   125bc:	mov	r2, #5
   125c0:	ldr	r1, [pc, #728]	; 128a0 <__assert_fail@plt+0x195c>
   125c4:	mov	r0, #0
   125c8:	bl	10d88 <dcgettext@plt>
   125cc:	ldr	r3, [pc, #712]	; 1289c <__assert_fail@plt+0x1958>
   125d0:	ldr	r2, [r3]
   125d4:	mov	r1, r0
   125d8:	mov	r0, #1
   125dc:	bl	10eb4 <__printf_chk@plt>
   125e0:	mov	r2, #5
   125e4:	ldr	r1, [pc, #696]	; 128a4 <__assert_fail@plt+0x1960>
   125e8:	mov	r0, #0
   125ec:	bl	10d88 <dcgettext@plt>
   125f0:	ldr	r4, [pc, #688]	; 128a8 <__assert_fail@plt+0x1964>
   125f4:	ldr	r1, [r4]
   125f8:	bl	10cd4 <fputs_unlocked@plt>
   125fc:	mov	r2, #5
   12600:	ldr	r1, [pc, #676]	; 128ac <__assert_fail@plt+0x1968>
   12604:	mov	r0, #0
   12608:	bl	10d88 <dcgettext@plt>
   1260c:	ldr	r1, [r4]
   12610:	bl	10cd4 <fputs_unlocked@plt>
   12614:	mov	r2, #5
   12618:	ldr	r1, [pc, #656]	; 128b0 <__assert_fail@plt+0x196c>
   1261c:	mov	r0, #0
   12620:	bl	10d88 <dcgettext@plt>
   12624:	ldr	r1, [r4]
   12628:	bl	10cd4 <fputs_unlocked@plt>
   1262c:	mov	r2, #5
   12630:	ldr	r1, [pc, #636]	; 128b4 <__assert_fail@plt+0x1970>
   12634:	mov	r0, #0
   12638:	bl	10d88 <dcgettext@plt>
   1263c:	ldr	r1, [r4]
   12640:	bl	10cd4 <fputs_unlocked@plt>
   12644:	mov	r2, #5
   12648:	ldr	r1, [pc, #616]	; 128b8 <__assert_fail@plt+0x1974>
   1264c:	mov	r0, #0
   12650:	bl	10d88 <dcgettext@plt>
   12654:	ldr	r1, [r4]
   12658:	bl	10cd4 <fputs_unlocked@plt>
   1265c:	mov	r2, #5
   12660:	ldr	r1, [pc, #596]	; 128bc <__assert_fail@plt+0x1978>
   12664:	mov	r0, #0
   12668:	bl	10d88 <dcgettext@plt>
   1266c:	ldr	r1, [r4]
   12670:	bl	10cd4 <fputs_unlocked@plt>
   12674:	mov	r2, #5
   12678:	ldr	r1, [pc, #576]	; 128c0 <__assert_fail@plt+0x197c>
   1267c:	mov	r0, #0
   12680:	bl	10d88 <dcgettext@plt>
   12684:	ldr	r1, [r4]
   12688:	bl	10cd4 <fputs_unlocked@plt>
   1268c:	mov	ip, sp
   12690:	ldr	lr, [pc, #556]	; 128c4 <__assert_fail@plt+0x1980>
   12694:	ldm	lr!, {r0, r1, r2, r3}
   12698:	stmia	ip!, {r0, r1, r2, r3}
   1269c:	ldm	lr!, {r0, r1, r2, r3}
   126a0:	stmia	ip!, {r0, r1, r2, r3}
   126a4:	ldm	lr!, {r0, r1, r2, r3}
   126a8:	stmia	ip!, {r0, r1, r2, r3}
   126ac:	ldm	lr, {r0, r1}
   126b0:	stm	ip, {r0, r1}
   126b4:	ldr	r1, [sp]
   126b8:	cmp	r1, #0
   126bc:	moveq	r4, sp
   126c0:	beq	126e8 <__assert_fail@plt+0x17a4>
   126c4:	mov	r4, sp
   126c8:	ldr	r5, [pc, #504]	; 128c8 <__assert_fail@plt+0x1984>
   126cc:	mov	r0, r5
   126d0:	bl	10cec <strcmp@plt>
   126d4:	cmp	r0, #0
   126d8:	beq	126e8 <__assert_fail@plt+0x17a4>
   126dc:	ldr	r1, [r4, #8]!
   126e0:	cmp	r1, #0
   126e4:	bne	126cc <__assert_fail@plt+0x1788>
   126e8:	ldr	r4, [r4, #4]
   126ec:	cmp	r4, #0
   126f0:	beq	12804 <__assert_fail@plt+0x18c0>
   126f4:	mov	r2, #5
   126f8:	ldr	r1, [pc, #460]	; 128cc <__assert_fail@plt+0x1988>
   126fc:	mov	r0, #0
   12700:	bl	10d88 <dcgettext@plt>
   12704:	ldr	r3, [pc, #452]	; 128d0 <__assert_fail@plt+0x198c>
   12708:	ldr	r2, [pc, #452]	; 128d4 <__assert_fail@plt+0x1990>
   1270c:	mov	r1, r0
   12710:	mov	r0, #1
   12714:	bl	10eb4 <__printf_chk@plt>
   12718:	mov	r1, #0
   1271c:	mov	r0, #5
   12720:	bl	10ef0 <setlocale@plt>
   12724:	cmp	r0, #0
   12728:	beq	12740 <__assert_fail@plt+0x17fc>
   1272c:	mov	r2, #3
   12730:	ldr	r1, [pc, #416]	; 128d8 <__assert_fail@plt+0x1994>
   12734:	bl	10f20 <strncmp@plt>
   12738:	cmp	r0, #0
   1273c:	bne	127a0 <__assert_fail@plt+0x185c>
   12740:	mov	r2, #5
   12744:	ldr	r1, [pc, #400]	; 128dc <__assert_fail@plt+0x1998>
   12748:	mov	r0, #0
   1274c:	bl	10d88 <dcgettext@plt>
   12750:	ldr	r5, [pc, #368]	; 128c8 <__assert_fail@plt+0x1984>
   12754:	mov	r3, r5
   12758:	ldr	r2, [pc, #368]	; 128d0 <__assert_fail@plt+0x198c>
   1275c:	mov	r1, r0
   12760:	mov	r0, #1
   12764:	bl	10eb4 <__printf_chk@plt>
   12768:	mov	r2, #5
   1276c:	ldr	r1, [pc, #364]	; 128e0 <__assert_fail@plt+0x199c>
   12770:	mov	r0, #0
   12774:	bl	10d88 <dcgettext@plt>
   12778:	mov	r1, r0
   1277c:	ldr	r2, [pc, #352]	; 128e4 <__assert_fail@plt+0x19a0>
   12780:	ldr	r3, [pc, #352]	; 128e8 <__assert_fail@plt+0x19a4>
   12784:	cmp	r4, r5
   12788:	movne	r3, r2
   1278c:	mov	r2, r4
   12790:	mov	r0, #1
   12794:	bl	10eb4 <__printf_chk@plt>
   12798:	b	125b4 <__assert_fail@plt+0x1670>
   1279c:	ldr	r4, [pc, #292]	; 128c8 <__assert_fail@plt+0x1984>
   127a0:	mov	r2, #5
   127a4:	ldr	r1, [pc, #320]	; 128ec <__assert_fail@plt+0x19a8>
   127a8:	mov	r0, #0
   127ac:	bl	10d88 <dcgettext@plt>
   127b0:	ldr	r3, [pc, #240]	; 128a8 <__assert_fail@plt+0x1964>
   127b4:	ldr	r1, [r3]
   127b8:	bl	10cd4 <fputs_unlocked@plt>
   127bc:	b	12740 <__assert_fail@plt+0x17fc>
   127c0:	mov	r2, #5
   127c4:	ldr	r1, [pc, #272]	; 128dc <__assert_fail@plt+0x1998>
   127c8:	mov	r0, #0
   127cc:	bl	10d88 <dcgettext@plt>
   127d0:	ldr	r4, [pc, #240]	; 128c8 <__assert_fail@plt+0x1984>
   127d4:	mov	r3, r4
   127d8:	ldr	r2, [pc, #240]	; 128d0 <__assert_fail@plt+0x198c>
   127dc:	mov	r1, r0
   127e0:	mov	r0, #1
   127e4:	bl	10eb4 <__printf_chk@plt>
   127e8:	mov	r2, #5
   127ec:	ldr	r1, [pc, #236]	; 128e0 <__assert_fail@plt+0x199c>
   127f0:	mov	r0, #0
   127f4:	bl	10d88 <dcgettext@plt>
   127f8:	mov	r1, r0
   127fc:	ldr	r3, [pc, #228]	; 128e8 <__assert_fail@plt+0x19a4>
   12800:	b	1278c <__assert_fail@plt+0x1848>
   12804:	mov	r2, #5
   12808:	ldr	r1, [pc, #188]	; 128cc <__assert_fail@plt+0x1988>
   1280c:	mov	r0, #0
   12810:	bl	10d88 <dcgettext@plt>
   12814:	ldr	r3, [pc, #180]	; 128d0 <__assert_fail@plt+0x198c>
   12818:	ldr	r2, [pc, #180]	; 128d4 <__assert_fail@plt+0x1990>
   1281c:	mov	r1, r0
   12820:	mov	r0, #1
   12824:	bl	10eb4 <__printf_chk@plt>
   12828:	mov	r1, #0
   1282c:	mov	r0, #5
   12830:	bl	10ef0 <setlocale@plt>
   12834:	cmp	r0, #0
   12838:	beq	127c0 <__assert_fail@plt+0x187c>
   1283c:	mov	r2, #3
   12840:	ldr	r1, [pc, #144]	; 128d8 <__assert_fail@plt+0x1994>
   12844:	bl	10f20 <strncmp@plt>
   12848:	cmp	r0, #0
   1284c:	bne	1279c <__assert_fail@plt+0x1858>
   12850:	mov	r2, #5
   12854:	ldr	r1, [pc, #128]	; 128dc <__assert_fail@plt+0x1998>
   12858:	mov	r0, #0
   1285c:	bl	10d88 <dcgettext@plt>
   12860:	ldr	r4, [pc, #96]	; 128c8 <__assert_fail@plt+0x1984>
   12864:	mov	r3, r4
   12868:	ldr	r2, [pc, #96]	; 128d0 <__assert_fail@plt+0x198c>
   1286c:	mov	r1, r0
   12870:	mov	r0, #1
   12874:	bl	10eb4 <__printf_chk@plt>
   12878:	mov	r2, #5
   1287c:	ldr	r1, [pc, #92]	; 128e0 <__assert_fail@plt+0x199c>
   12880:	mov	r0, #0
   12884:	bl	10d88 <dcgettext@plt>
   12888:	mov	r1, r0
   1288c:	ldr	r3, [pc, #84]	; 128e8 <__assert_fail@plt+0x19a4>
   12890:	b	1278c <__assert_fail@plt+0x1848>
   12894:	andeq	r9, r2, r8, asr #2
   12898:	andeq	r7, r1, r4, lsr #9
   1289c:	andeq	fp, r2, ip, ror #8
   128a0:	andeq	r7, r1, ip, asr #9
   128a4:	strdeq	r7, [r1], -r0
   128a8:	andeq	r9, r2, r4, asr r1
   128ac:	andeq	r7, r1, r0, ror #13
   128b0:	andeq	r7, r1, r0, lsl r7
   128b4:	andeq	r7, r1, r8, asr #14
   128b8:	andeq	r7, r1, r0, asr #17
   128bc:	andeq	r7, r1, ip, ror #20
   128c0:	andeq	r7, r1, r8, lsl #24
   128c4:	andeq	r7, r1, r4, lsr r1
   128c8:	andeq	r7, r1, r0, lsr #9
   128cc:	andeq	r7, r1, r0, ror #27
   128d0:	strdeq	r7, [r1], -r8
   128d4:	andeq	r7, r1, r0, lsr #28
   128d8:	andeq	r7, r1, r0, lsr lr
   128dc:	andeq	r7, r1, ip, ror lr
   128e0:	muleq	r1, r8, lr
   128e4:			; <UNDEFINED> instruction: 0x000178bc
   128e8:	andeq	r8, r1, r8, lsl #6
   128ec:	andeq	r7, r1, r4, lsr lr
   128f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f4:	sub	sp, sp, #380	; 0x17c
   128f8:	mov	r7, r0
   128fc:	mov	r4, r1
   12900:	ldr	r0, [r1]
   12904:	bl	138b8 <__assert_fail@plt+0x2974>
   12908:	ldr	r1, [pc, #3360]	; 13630 <__assert_fail@plt+0x26ec>
   1290c:	mov	r0, #6
   12910:	bl	10ef0 <setlocale@plt>
   12914:	ldr	r5, [pc, #3352]	; 13634 <__assert_fail@plt+0x26f0>
   12918:	ldr	r1, [pc, #3352]	; 13638 <__assert_fail@plt+0x26f4>
   1291c:	mov	r0, r5
   12920:	bl	10f14 <bindtextdomain@plt>
   12924:	mov	r0, r5
   12928:	bl	10da0 <textdomain@plt>
   1292c:	ldr	r0, [pc, #3336]	; 1363c <__assert_fail@plt+0x26f8>
   12930:	bl	17060 <__assert_fail@plt+0x611c>
   12934:	ldr	r8, [pc, #3332]	; 13640 <__assert_fail@plt+0x26fc>
   12938:	ldr	r6, [pc, #3332]	; 13644 <__assert_fail@plt+0x2700>
   1293c:	mov	r5, #0
   12940:	ldr	sl, [pc, #3328]	; 13648 <__assert_fail@plt+0x2704>
   12944:	mov	r9, #1
   12948:	ldr	fp, [pc, #3324]	; 1364c <__assert_fail@plt+0x2708>
   1294c:	str	r5, [sp]
   12950:	mov	r3, r8
   12954:	mov	r2, r6
   12958:	mov	r1, r4
   1295c:	mov	r0, r7
   12960:	bl	10e48 <getopt_long@plt>
   12964:	cmn	r0, #1
   12968:	beq	12a34 <__assert_fail@plt+0x1af0>
   1296c:	cmp	r0, #67	; 0x43
   12970:	beq	129c4 <__assert_fail@plt+0x1a80>
   12974:	ble	1299c <__assert_fail@plt+0x1a58>
   12978:	cmp	r0, #100	; 0x64
   1297c:	beq	129e8 <__assert_fail@plt+0x1aa4>
   12980:	ble	129bc <__assert_fail@plt+0x1a78>
   12984:	cmp	r0, #115	; 0x73
   12988:	beq	129f0 <__assert_fail@plt+0x1aac>
   1298c:	cmp	r0, #116	; 0x74
   12990:	bne	129b4 <__assert_fail@plt+0x1a70>
   12994:	strb	r9, [sl, #771]	; 0x303
   12998:	b	1294c <__assert_fail@plt+0x1a08>
   1299c:	cmn	r0, #2
   129a0:	beq	129f8 <__assert_fail@plt+0x1ab4>
   129a4:	cmp	r0, #65	; 0x41
   129a8:	beq	129cc <__assert_fail@plt+0x1a88>
   129ac:	cmn	r0, #3
   129b0:	beq	12a00 <__assert_fail@plt+0x1abc>
   129b4:	mov	r0, #1
   129b8:	bl	12574 <__assert_fail@plt+0x1630>
   129bc:	cmp	r0, #99	; 0x63
   129c0:	bne	129b4 <__assert_fail@plt+0x1a70>
   129c4:	strb	r9, [sl, #768]	; 0x300
   129c8:	b	1294c <__assert_fail@plt+0x1a08>
   129cc:	mov	r1, fp
   129d0:	mov	r0, #3
   129d4:	bl	10ef0 <setlocale@plt>
   129d8:	mov	r1, fp
   129dc:	mov	r0, r5
   129e0:	bl	10ef0 <setlocale@plt>
   129e4:	b	1294c <__assert_fail@plt+0x1a08>
   129e8:	strb	r9, [sl, #769]	; 0x301
   129ec:	b	1294c <__assert_fail@plt+0x1a08>
   129f0:	strb	r9, [sl, #770]	; 0x302
   129f4:	b	1294c <__assert_fail@plt+0x1a08>
   129f8:	mov	r0, #0
   129fc:	bl	12574 <__assert_fail@plt+0x1630>
   12a00:	mov	r4, #0
   12a04:	str	r4, [sp, #4]
   12a08:	ldr	r3, [pc, #3136]	; 13650 <__assert_fail@plt+0x270c>
   12a0c:	str	r3, [sp]
   12a10:	ldr	r3, [pc, #3132]	; 13654 <__assert_fail@plt+0x2710>
   12a14:	ldr	r3, [r3]
   12a18:	ldr	r2, [pc, #3128]	; 13658 <__assert_fail@plt+0x2714>
   12a1c:	ldr	r1, [pc, #3128]	; 1365c <__assert_fail@plt+0x2718>
   12a20:	ldr	r0, [pc, #3128]	; 13660 <__assert_fail@plt+0x271c>
   12a24:	ldr	r0, [r0]
   12a28:	bl	15948 <__assert_fail@plt+0x4a04>
   12a2c:	mov	r0, r4
   12a30:	bl	10e60 <exit@plt>
   12a34:	ldr	r3, [pc, #3112]	; 13664 <__assert_fail@plt+0x2720>
   12a38:	ldr	r6, [r3]
   12a3c:	sub	r6, r7, r6
   12a40:	cmp	r6, #2
   12a44:	beq	12be4 <__assert_fail@plt+0x1ca0>
   12a48:	ldr	r2, [pc, #3064]	; 13648 <__assert_fail@plt+0x2704>
   12a4c:	mov	r3, #0
   12a50:	strb	r3, [r2, #772]	; 0x304
   12a54:	ldrb	r3, [r2, #769]	; 0x301
   12a58:	ldrb	r5, [r2, #770]	; 0x302
   12a5c:	cmp	r3, r5
   12a60:	movne	r2, #1
   12a64:	moveq	r2, #2
   12a68:	cmp	r3, r5
   12a6c:	movle	r5, #2
   12a70:	movgt	r5, #1
   12a74:	cmp	r6, r2
   12a78:	blt	12c18 <__assert_fail@plt+0x1cd4>
   12a7c:	cmp	r5, r6
   12a80:	blt	12cc0 <__assert_fail@plt+0x1d7c>
   12a84:	mov	r0, #24
   12a88:	bl	15a14 <__assert_fail@plt+0x4ad0>
   12a8c:	str	r0, [sp, #340]	; 0x154
   12a90:	add	r1, sp, #376	; 0x178
   12a94:	str	r0, [r1, #-40]!	; 0xffffffd8
   12a98:	mov	r3, #0
   12a9c:	str	r3, [r0, #4]
   12aa0:	ldr	r3, [pc, #3004]	; 13664 <__assert_fail@plt+0x2720>
   12aa4:	ldr	r3, [r3]
   12aa8:	ldr	r0, [r4, r3, lsl #2]
   12aac:	bl	11500 <__assert_fail@plt+0x5bc>
   12ab0:	cmp	r0, #0
   12ab4:	beq	12d74 <__assert_fail@plt+0x1e30>
   12ab8:	cmp	r6, #2
   12abc:	movne	sl, #0
   12ac0:	beq	12d38 <__assert_fail@plt+0x1df4>
   12ac4:	add	r0, sp, #336	; 0x150
   12ac8:	bl	11e6c <__assert_fail@plt+0xf28>
   12acc:	ldr	r3, [pc, #2932]	; 13648 <__assert_fail@plt+0x2704>
   12ad0:	ldrb	r3, [r3, #768]	; 0x300
   12ad4:	cmp	r3, #0
   12ad8:	bne	12d80 <__assert_fail@plt+0x1e3c>
   12adc:	ldr	r7, [sp, #360]	; 0x168
   12ae0:	cmp	r7, #0
   12ae4:	bne	12dec <__assert_fail@plt+0x1ea8>
   12ae8:	cmp	sl, #0
   12aec:	beq	130e4 <__assert_fail@plt+0x21a0>
   12af0:	add	r3, sp, #352	; 0x160
   12af4:	ldrd	r4, [r3]
   12af8:	mov	r0, sl
   12afc:	bl	11e6c <__assert_fail@plt+0xf28>
   12b00:	ldrd	r2, [sl, #16]
   12b04:	cmp	r5, r3
   12b08:	cmpeq	r4, r2
   12b0c:	bcc	12b1c <__assert_fail@plt+0x1bd8>
   12b10:	ldr	r1, [sl, #24]
   12b14:	cmp	r1, #1
   12b18:	beq	12e0c <__assert_fail@plt+0x1ec8>
   12b1c:	ldr	r3, [sl, #24]
   12b20:	cmp	r3, #1
   12b24:	bhi	12e24 <__assert_fail@plt+0x1ee0>
   12b28:	ldr	r2, [pc, #2840]	; 13648 <__assert_fail@plt+0x2704>
   12b2c:	ldrb	r2, [r2, #772]	; 0x304
   12b30:	cmp	r2, #0
   12b34:	beq	130dc <__assert_fail@plt+0x2198>
   12b38:	ldrb	r3, [sl, #32]
   12b3c:	cmp	r3, #0
   12b40:	bne	12e44 <__assert_fail@plt+0x1f00>
   12b44:	ldrb	r3, [sl, #34]	; 0x22
   12b48:	cmp	r3, #0
   12b4c:	bne	12e64 <__assert_fail@plt+0x1f20>
   12b50:	ldr	r3, [pc, #2800]	; 13648 <__assert_fail@plt+0x2704>
   12b54:	ldrb	r3, [r3, #768]	; 0x300
   12b58:	cmp	r3, #0
   12b5c:	bne	1357c <__assert_fail@plt+0x2638>
   12b60:	ldrb	r4, [sl, #33]	; 0x21
   12b64:	cmp	r4, #0
   12b68:	beq	12fe0 <__assert_fail@plt+0x209c>
   12b6c:	bl	10e54 <__ctype_b_loc@plt>
   12b70:	ldr	r2, [r0]
   12b74:	sub	r3, r2, #2
   12b78:	add	r2, r2, #508	; 0x1fc
   12b7c:	add	r1, r2, #2
   12b80:	mov	r8, r7
   12b84:	ldrh	r2, [r3, #2]!
   12b88:	tst	r2, #256	; 0x100
   12b8c:	addne	r7, r7, #1
   12b90:	tst	r2, #512	; 0x200
   12b94:	addne	r8, r8, #1
   12b98:	cmp	r1, r3
   12b9c:	bne	12b84 <__assert_fail@plt+0x1c40>
   12ba0:	add	r3, sp, #352	; 0x160
   12ba4:	ldrd	r2, [r3]
   12ba8:	strd	r2, [sp, #8]
   12bac:	ldrd	r2, [sl, #16]
   12bb0:	strd	r2, [sp, #16]
   12bb4:	ldr	r3, [sp, #340]	; 0x154
   12bb8:	str	r3, [sp, #28]
   12bbc:	ldr	fp, [sl, #4]
   12bc0:	mvn	r2, #1
   12bc4:	mvn	r3, #0
   12bc8:	add	r1, sp, #344	; 0x158
   12bcc:	strd	r2, [r1]
   12bd0:	strd	r2, [sl, #8]
   12bd4:	mov	r5, r4
   12bd8:	sub	r8, r8, #1
   12bdc:	sub	r7, r7, #1
   12be0:	b	12f44 <__assert_fail@plt+0x2000>
   12be4:	ldr	r3, [pc, #2652]	; 13648 <__assert_fail@plt+0x2704>
   12be8:	ldrb	r3, [r3, #769]	; 0x301
   12bec:	cmp	r3, #0
   12bf0:	bne	12a48 <__assert_fail@plt+0x1b04>
   12bf4:	ldr	r3, [pc, #2636]	; 13648 <__assert_fail@plt+0x2704>
   12bf8:	mov	r2, #1
   12bfc:	strb	r2, [r3, #772]	; 0x304
   12c00:	ldrb	r3, [r3, #770]	; 0x302
   12c04:	cmp	r3, #0
   12c08:	movne	r5, r6
   12c0c:	movne	r2, #1
   12c10:	bne	12a74 <__assert_fail@plt+0x1b30>
   12c14:	b	12a84 <__assert_fail@plt+0x1b40>
   12c18:	cmp	r6, #0
   12c1c:	bne	12c48 <__assert_fail@plt+0x1d04>
   12c20:	mov	r2, #5
   12c24:	ldr	r1, [pc, #2620]	; 13668 <__assert_fail@plt+0x2724>
   12c28:	mov	r0, #0
   12c2c:	bl	10d88 <dcgettext@plt>
   12c30:	mov	r2, r0
   12c34:	mov	r1, #0
   12c38:	mov	r0, r1
   12c3c:	bl	10df4 <error@plt>
   12c40:	mov	r0, #1
   12c44:	bl	12574 <__assert_fail@plt+0x1630>
   12c48:	mov	r2, #5
   12c4c:	ldr	r1, [pc, #2584]	; 1366c <__assert_fail@plt+0x2728>
   12c50:	mov	r0, #0
   12c54:	bl	10d88 <dcgettext@plt>
   12c58:	mov	r5, r0
   12c5c:	sub	r7, r7, #-1073741823	; 0xc0000001
   12c60:	ldr	r0, [r4, r7, lsl #2]
   12c64:	bl	15408 <__assert_fail@plt+0x44c4>
   12c68:	mov	r3, r0
   12c6c:	mov	r2, r5
   12c70:	mov	r1, #0
   12c74:	mov	r0, r1
   12c78:	bl	10df4 <error@plt>
   12c7c:	ldr	r3, [pc, #2540]	; 13670 <__assert_fail@plt+0x272c>
   12c80:	ldr	r4, [r3]
   12c84:	ldr	r3, [pc, #2492]	; 13648 <__assert_fail@plt+0x2704>
   12c88:	ldrb	r0, [r3, #770]	; 0x302
   12c8c:	mov	r2, #5
   12c90:	ldr	r3, [pc, #2524]	; 13674 <__assert_fail@plt+0x2730>
   12c94:	ldr	r1, [pc, #2524]	; 13678 <__assert_fail@plt+0x2734>
   12c98:	cmp	r0, #0
   12c9c:	moveq	r1, r3
   12ca0:	mov	r0, #0
   12ca4:	bl	10d88 <dcgettext@plt>
   12ca8:	mov	r3, r0
   12cac:	ldr	r2, [pc, #2504]	; 1367c <__assert_fail@plt+0x2738>
   12cb0:	mov	r1, #1
   12cb4:	mov	r0, r4
   12cb8:	bl	10ecc <__fprintf_chk@plt>
   12cbc:	b	12c40 <__assert_fail@plt+0x1cfc>
   12cc0:	mov	r2, #5
   12cc4:	ldr	r1, [pc, #2484]	; 13680 <__assert_fail@plt+0x273c>
   12cc8:	mov	r0, #0
   12ccc:	bl	10d88 <dcgettext@plt>
   12cd0:	mov	r7, r0
   12cd4:	ldr	r3, [pc, #2440]	; 13664 <__assert_fail@plt+0x2720>
   12cd8:	ldr	r3, [r3]
   12cdc:	add	r3, r5, r3
   12ce0:	ldr	r0, [r4, r3, lsl #2]
   12ce4:	bl	15408 <__assert_fail@plt+0x44c4>
   12ce8:	mov	r3, r0
   12cec:	mov	r2, r7
   12cf0:	mov	r1, #0
   12cf4:	mov	r0, r1
   12cf8:	bl	10df4 <error@plt>
   12cfc:	cmp	r6, #2
   12d00:	bne	12d30 <__assert_fail@plt+0x1dec>
   12d04:	ldr	r3, [pc, #2404]	; 13670 <__assert_fail@plt+0x272c>
   12d08:	ldr	r4, [r3]
   12d0c:	mov	r2, #5
   12d10:	ldr	r1, [pc, #2412]	; 13684 <__assert_fail@plt+0x2740>
   12d14:	mov	r0, #0
   12d18:	bl	10d88 <dcgettext@plt>
   12d1c:	mov	r3, r0
   12d20:	ldr	r2, [pc, #2388]	; 1367c <__assert_fail@plt+0x2738>
   12d24:	mov	r1, #1
   12d28:	mov	r0, r4
   12d2c:	bl	10ecc <__fprintf_chk@plt>
   12d30:	mov	r0, #1
   12d34:	bl	12574 <__assert_fail@plt+0x1630>
   12d38:	mov	r0, #24
   12d3c:	bl	15a14 <__assert_fail@plt+0x4ad0>
   12d40:	str	r0, [sp, #300]	; 0x12c
   12d44:	add	r1, sp, #376	; 0x178
   12d48:	str	r0, [r1, #-80]!	; 0xffffffb0
   12d4c:	mov	r3, #0
   12d50:	str	r3, [r0, #4]
   12d54:	ldr	r3, [pc, #2312]	; 13664 <__assert_fail@plt+0x2720>
   12d58:	ldr	r3, [r3]
   12d5c:	add	r3, r3, #1
   12d60:	ldr	r0, [r4, r3, lsl #2]
   12d64:	bl	11500 <__assert_fail@plt+0x5bc>
   12d68:	cmp	r0, #0
   12d6c:	addne	sl, sp, #296	; 0x128
   12d70:	bne	12ac4 <__assert_fail@plt+0x1b80>
   12d74:	mov	r0, #1
   12d78:	add	sp, sp, #380	; 0x17c
   12d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d80:	mov	r4, #256	; 0x100
   12d84:	mov	r2, r4
   12d88:	mov	r1, #0
   12d8c:	add	r0, sp, #40	; 0x28
   12d90:	bl	10ea8 <memset@plt>
   12d94:	mvn	r2, #1
   12d98:	mvn	r3, #0
   12d9c:	add	r1, sp, #344	; 0x158
   12da0:	strd	r2, [r1]
   12da4:	mov	r5, #0
   12da8:	mov	r7, #1
   12dac:	b	12dc8 <__assert_fail@plt+0x1e84>
   12db0:	add	r3, sp, #376	; 0x178
   12db4:	add	r0, r3, r0
   12db8:	ldrb	r3, [r0, #-336]	; 0xfffffeb0
   12dbc:	eor	r3, r3, #1
   12dc0:	sub	r4, r4, r3
   12dc4:	strb	r7, [r0, #-336]	; 0xfffffeb0
   12dc8:	mov	r1, r5
   12dcc:	add	r0, sp, #336	; 0x150
   12dd0:	bl	1204c <__assert_fail@plt+0x1108>
   12dd4:	cmn	r0, #1
   12dd8:	bne	12db0 <__assert_fail@plt+0x1e6c>
   12ddc:	asr	r5, r4, #31
   12de0:	add	r3, sp, #352	; 0x160
   12de4:	strd	r4, [r3]
   12de8:	b	12adc <__assert_fail@plt+0x1b98>
   12dec:	mov	r2, #5
   12df0:	ldr	r1, [pc, #2192]	; 13688 <__assert_fail@plt+0x2744>
   12df4:	mov	r0, #0
   12df8:	bl	10d88 <dcgettext@plt>
   12dfc:	mov	r2, r0
   12e00:	mov	r1, #0
   12e04:	mov	r0, #1
   12e08:	bl	10df4 <error@plt>
   12e0c:	ldr	r1, [sl, #28]
   12e10:	subs	r2, r4, r2
   12e14:	sbc	r3, r5, r3
   12e18:	strd	r2, [r1, #16]
   12e1c:	strd	r4, [sl, #16]
   12e20:	b	12b1c <__assert_fail@plt+0x1bd8>
   12e24:	mov	r2, #5
   12e28:	ldr	r1, [pc, #2140]	; 1368c <__assert_fail@plt+0x2748>
   12e2c:	mov	r0, #0
   12e30:	bl	10d88 <dcgettext@plt>
   12e34:	mov	r2, r0
   12e38:	mov	r1, #0
   12e3c:	mov	r0, #1
   12e40:	bl	10df4 <error@plt>
   12e44:	mov	r2, #5
   12e48:	ldr	r1, [pc, #2112]	; 13690 <__assert_fail@plt+0x274c>
   12e4c:	mov	r0, #0
   12e50:	bl	10d88 <dcgettext@plt>
   12e54:	mov	r2, r0
   12e58:	mov	r1, #0
   12e5c:	mov	r0, #1
   12e60:	bl	10df4 <error@plt>
   12e64:	mov	r2, #5
   12e68:	ldr	r1, [pc, #2084]	; 13694 <__assert_fail@plt+0x2750>
   12e6c:	mov	r0, #0
   12e70:	bl	10d88 <dcgettext@plt>
   12e74:	mov	r2, r0
   12e78:	mov	r1, #0
   12e7c:	mov	r0, #1
   12e80:	bl	10df4 <error@plt>
   12e84:	ldr	r1, [sp, #40]	; 0x28
   12e88:	cmp	r1, #2
   12e8c:	beq	12f08 <__assert_fail@plt+0x1fc4>
   12e90:	ldr	r3, [sp, #340]	; 0x154
   12e94:	ldr	r3, [r3, #4]
   12e98:	str	r3, [sp, #340]	; 0x154
   12e9c:	add	ip, sp, #344	; 0x158
   12ea0:	mvn	r2, #0
   12ea4:	mvn	r3, #0
   12ea8:	strd	r2, [ip]
   12eac:	ldr	r3, [sl, #4]
   12eb0:	ldr	r3, [r3, #4]
   12eb4:	str	r3, [sl, #4]
   12eb8:	mvn	r2, #0
   12ebc:	mvn	r3, #0
   12ec0:	strd	r2, [sl, #8]
   12ec4:	ldr	r3, [sp, #36]	; 0x24
   12ec8:	cmp	r3, #1
   12ecc:	movne	ip, r8
   12ed0:	moveq	ip, r7
   12ed4:	add	r3, sp, #352	; 0x160
   12ed8:	ldrd	r2, [r3]
   12edc:	subs	r2, r2, ip
   12ee0:	sbc	r3, r3, #0
   12ee4:	add	ip, sp, #352	; 0x160
   12ee8:	strd	r2, [ip]
   12eec:	ldrd	r2, [sl, #16]
   12ef0:	cmp	r1, #1
   12ef4:	movne	r1, r8
   12ef8:	moveq	r1, r7
   12efc:	subs	r2, r2, r1
   12f00:	sbc	r3, r3, #0
   12f04:	strd	r2, [sl, #16]
   12f08:	ldr	r3, [sp, #348]	; 0x15c
   12f0c:	ldr	r5, [sp, #344]	; 0x158
   12f10:	and	r5, r5, r3
   12f14:	cmn	r5, #1
   12f18:	movne	r5, #0
   12f1c:	moveq	r5, #1
   12f20:	ldr	r4, [sl, #8]
   12f24:	ldr	r3, [sl, #12]
   12f28:	and	r4, r4, r3
   12f2c:	cmn	r4, #1
   12f30:	movne	r4, #0
   12f34:	moveq	r4, #1
   12f38:	cmn	r0, #1
   12f3c:	cmnne	r9, #1
   12f40:	beq	12fa8 <__assert_fail@plt+0x2064>
   12f44:	add	r1, sp, #36	; 0x24
   12f48:	add	r0, sp, #336	; 0x150
   12f4c:	bl	1204c <__assert_fail@plt+0x1108>
   12f50:	mov	r9, r0
   12f54:	add	r1, sp, #40	; 0x28
   12f58:	mov	r0, sl
   12f5c:	bl	1204c <__assert_fail@plt+0x1108>
   12f60:	cmp	r4, #0
   12f64:	beq	12e84 <__assert_fail@plt+0x1f40>
   12f68:	ldr	r1, [sp, #40]	; 0x28
   12f6c:	cmp	r1, #2
   12f70:	beq	12f08 <__assert_fail@plt+0x1fc4>
   12f74:	cmp	r5, #0
   12f78:	beq	12f88 <__assert_fail@plt+0x2044>
   12f7c:	ldr	r3, [sp, #36]	; 0x24
   12f80:	cmp	r3, #2
   12f84:	bne	12e90 <__assert_fail@plt+0x1f4c>
   12f88:	mov	r2, #5
   12f8c:	ldr	r1, [pc, #1796]	; 13698 <__assert_fail@plt+0x2754>
   12f90:	mov	r0, #0
   12f94:	bl	10d88 <dcgettext@plt>
   12f98:	mov	r2, r0
   12f9c:	mov	r1, #0
   12fa0:	mov	r0, #1
   12fa4:	bl	10df4 <error@plt>
   12fa8:	add	r3, sp, #352	; 0x160
   12fac:	ldrd	r2, [r3]
   12fb0:	ldrd	r0, [sp, #8]
   12fb4:	cmp	r1, r3
   12fb8:	cmpeq	r0, r2
   12fbc:	bcc	13038 <__assert_fail@plt+0x20f4>
   12fc0:	ldrd	r2, [sl, #16]
   12fc4:	ldrd	r0, [sp, #16]
   12fc8:	cmp	r1, r3
   12fcc:	cmpeq	r0, r2
   12fd0:	ldrcs	r3, [sp, #28]
   12fd4:	strcs	r3, [sp, #340]	; 0x154
   12fd8:	strcs	fp, [sl, #4]
   12fdc:	bcc	13038 <__assert_fail@plt+0x20f4>
   12fe0:	add	r3, sp, #352	; 0x160
   12fe4:	ldrd	r0, [r3]
   12fe8:	ldrd	r2, [sl, #16]
   12fec:	cmp	r1, r3
   12ff0:	cmpeq	r0, r2
   12ff4:	bls	130e4 <__assert_fail@plt+0x21a0>
   12ff8:	ldr	ip, [pc, #1608]	; 13648 <__assert_fail@plt+0x2704>
   12ffc:	ldrb	ip, [ip, #771]	; 0x303
   13000:	cmp	ip, #0
   13004:	bne	130e4 <__assert_fail@plt+0x21a0>
   13008:	orrs	ip, r2, r3
   1300c:	beq	1304c <__assert_fail@plt+0x2108>
   13010:	ldr	ip, [sl, #4]
   13014:	ldr	lr, [ip]
   13018:	cmp	lr, #4
   1301c:	ldrls	pc, [pc, lr, lsl #2]
   13020:	b	130d8 <__assert_fail@plt+0x2194>
   13024:	andeq	r3, r1, ip, rrx
   13028:	andeq	r3, r1, r4, lsr #1
   1302c:	andeq	r3, r1, ip, lsr #1
   13030:	ldrdeq	r3, [r1], -r4
   13034:	andeq	r3, r1, ip, asr #1
   13038:	ldr	r3, [pc, #1628]	; 1369c <__assert_fail@plt+0x2758>
   1303c:	ldr	r2, [pc, #1628]	; 136a0 <__assert_fail@plt+0x275c>
   13040:	ldr	r1, [pc, #1628]	; 136a4 <__assert_fail@plt+0x2760>
   13044:	ldr	r0, [pc, #1628]	; 136a8 <__assert_fail@plt+0x2764>
   13048:	bl	10f44 <__assert_fail@plt>
   1304c:	mov	r2, #5
   13050:	ldr	r1, [pc, #1620]	; 136ac <__assert_fail@plt+0x2768>
   13054:	mov	r0, #0
   13058:	bl	10d88 <dcgettext@plt>
   1305c:	mov	r2, r0
   13060:	mov	r1, #0
   13064:	mov	r0, #1
   13068:	bl	10df4 <error@plt>
   1306c:	ldrb	ip, [ip, #8]
   13070:	subs	r2, r0, r2
   13074:	sbc	r3, r1, r3
   13078:	mov	r1, ip
   1307c:	mov	r0, sl
   13080:	bl	11284 <__assert_fail@plt+0x340>
   13084:	add	r3, sp, #352	; 0x160
   13088:	ldrd	r2, [r3]
   1308c:	strd	r2, [sl, #16]
   13090:	ldr	r3, [pc, #1456]	; 13648 <__assert_fail@plt+0x2704>
   13094:	ldrb	r3, [r3, #768]	; 0x300
   13098:	cmp	r3, #0
   1309c:	bne	13594 <__assert_fail@plt+0x2650>
   130a0:	b	130e4 <__assert_fail@plt+0x21a0>
   130a4:	ldrb	ip, [ip, #9]
   130a8:	b	13070 <__assert_fail@plt+0x212c>
   130ac:	mov	r2, #5
   130b0:	ldr	r1, [pc, #1528]	; 136b0 <__assert_fail@plt+0x276c>
   130b4:	mov	r0, #0
   130b8:	bl	10d88 <dcgettext@plt>
   130bc:	mov	r2, r0
   130c0:	mov	r1, #0
   130c4:	mov	r0, #1
   130c8:	bl	10df4 <error@plt>
   130cc:	ldrb	ip, [ip, #8]
   130d0:	b	13070 <__assert_fail@plt+0x212c>
   130d4:	bl	10f2c <abort@plt>
   130d8:	bl	10f2c <abort@plt>
   130dc:	cmp	r3, #0
   130e0:	bne	13194 <__assert_fail@plt+0x2250>
   130e4:	mov	r1, #2
   130e8:	ldr	r3, [pc, #1476]	; 136b4 <__assert_fail@plt+0x2770>
   130ec:	ldr	r0, [r3]
   130f0:	bl	1382c <__assert_fail@plt+0x28e8>
   130f4:	ldr	r3, [pc, #1356]	; 13648 <__assert_fail@plt+0x2704>
   130f8:	ldrb	r3, [r3, #770]	; 0x302
   130fc:	cmp	r6, #1
   13100:	movne	r2, #0
   13104:	moveq	r2, #1
   13108:	tst	r3, r2
   1310c:	bne	131b4 <__assert_fail@plt+0x2270>
   13110:	ldr	r1, [pc, #1328]	; 13648 <__assert_fail@plt+0x2704>
   13114:	ldrb	r1, [r1, #769]	; 0x301
   13118:	tst	r1, r2
   1311c:	bne	131dc <__assert_fail@plt+0x2298>
   13120:	and	r3, r3, r1
   13124:	cmp	r6, #2
   13128:	movne	r6, #0
   1312c:	andeq	r6, r3, #1
   13130:	cmp	r6, #0
   13134:	bne	13254 <__assert_fail@plt+0x2310>
   13138:	ldr	r3, [pc, #1288]	; 13648 <__assert_fail@plt+0x2704>
   1313c:	ldrb	r3, [r3, #772]	; 0x304
   13140:	cmp	r3, #0
   13144:	beq	13514 <__assert_fail@plt+0x25d0>
   13148:	ldr	r3, [pc, #1272]	; 13648 <__assert_fail@plt+0x2704>
   1314c:	ldrb	r3, [r3, #768]	; 0x300
   13150:	cmp	r3, #0
   13154:	ldreq	r2, [pc, #1372]	; 136b8 <__assert_fail@plt+0x2774>
   13158:	moveq	r3, #0
   1315c:	bne	1328c <__assert_fail@plt+0x2348>
   13160:	strb	r3, [r2, #1]!
   13164:	add	r3, r3, #1
   13168:	cmp	r3, #256	; 0x100
   1316c:	bne	13160 <__assert_fail@plt+0x221c>
   13170:	mvn	r2, #1
   13174:	mvn	r3, #0
   13178:	add	r1, sp, #344	; 0x158
   1317c:	strd	r2, [r1]
   13180:	strd	r2, [sl, #8]
   13184:	ldr	r6, [pc, #1212]	; 13648 <__assert_fail@plt+0x2704>
   13188:	ldr	r9, [pc, #1324]	; 136bc <__assert_fail@plt+0x2778>
   1318c:	add	r8, r6, #256	; 0x100
   13190:	b	133b0 <__assert_fail@plt+0x246c>
   13194:	mov	r2, #5
   13198:	ldr	r1, [pc, #1312]	; 136c0 <__assert_fail@plt+0x277c>
   1319c:	mov	r0, #0
   131a0:	bl	10d88 <dcgettext@plt>
   131a4:	mov	r2, r0
   131a8:	mov	r1, #0
   131ac:	mov	r0, #1
   131b0:	bl	10df4 <error@plt>
   131b4:	ldr	r4, [pc, #1164]	; 13648 <__assert_fail@plt+0x2704>
   131b8:	add	r2, r4, #512	; 0x200
   131bc:	ldrb	r1, [r4, #768]	; 0x300
   131c0:	add	r0, sp, #336	; 0x150
   131c4:	bl	12344 <__assert_fail@plt+0x1400>
   131c8:	ldr	r2, [pc, #1268]	; 136c4 <__assert_fail@plt+0x2780>
   131cc:	mov	r1, #8192	; 0x2000
   131d0:	add	r0, r4, #776	; 0x308
   131d4:	bl	123ac <__assert_fail@plt+0x1468>
   131d8:	b	13514 <__assert_fail@plt+0x25d0>
   131dc:	ldr	r3, [pc, #1124]	; 13648 <__assert_fail@plt+0x2704>
   131e0:	mov	r2, r3
   131e4:	ldrb	r1, [r3, #768]	; 0x300
   131e8:	add	r0, sp, #336	; 0x150
   131ec:	bl	12344 <__assert_fail@plt+0x1400>
   131f0:	ldr	r5, [pc, #1232]	; 136c8 <__assert_fail@plt+0x2784>
   131f4:	mov	r6, #8192	; 0x2000
   131f8:	ldr	r7, [pc, #1120]	; 13660 <__assert_fail@plt+0x271c>
   131fc:	mov	r1, r6
   13200:	mov	r0, r5
   13204:	bl	11184 <__assert_fail@plt+0x240>
   13208:	subs	r4, r0, #0
   1320c:	beq	13514 <__assert_fail@plt+0x25d0>
   13210:	ldr	r3, [r7]
   13214:	mov	r2, r4
   13218:	mov	r1, #1
   1321c:	mov	r0, r5
   13220:	bl	10d58 <fwrite_unlocked@plt>
   13224:	cmp	r4, r0
   13228:	beq	131fc <__assert_fail@plt+0x22b8>
   1322c:	bl	10e84 <__errno_location@plt>
   13230:	ldr	r4, [r0]
   13234:	mov	r2, #5
   13238:	ldr	r1, [pc, #1164]	; 136cc <__assert_fail@plt+0x2788>
   1323c:	mov	r0, #0
   13240:	bl	10d88 <dcgettext@plt>
   13244:	mov	r2, r0
   13248:	mov	r1, r4
   1324c:	mov	r0, #1
   13250:	bl	10df4 <error@plt>
   13254:	ldr	r4, [pc, #1004]	; 13648 <__assert_fail@plt+0x2704>
   13258:	mov	r2, r4
   1325c:	ldrb	r1, [r4, #768]	; 0x300
   13260:	add	r0, sp, #336	; 0x150
   13264:	bl	12344 <__assert_fail@plt+0x1400>
   13268:	add	r2, r4, #512	; 0x200
   1326c:	mov	r1, #0
   13270:	mov	r0, sl
   13274:	bl	12344 <__assert_fail@plt+0x1400>
   13278:	ldr	r2, [pc, #1104]	; 136d0 <__assert_fail@plt+0x278c>
   1327c:	mov	r1, #8192	; 0x2000
   13280:	add	r0, r4, #776	; 0x308
   13284:	bl	123ac <__assert_fail@plt+0x1468>
   13288:	b	13514 <__assert_fail@plt+0x25d0>
   1328c:	ldr	r2, [pc, #948]	; 13648 <__assert_fail@plt+0x2704>
   13290:	mov	r1, #0
   13294:	add	r0, sp, #336	; 0x150
   13298:	bl	12344 <__assert_fail@plt+0x1400>
   1329c:	mvn	r2, #1
   132a0:	mvn	r3, #0
   132a4:	strd	r2, [sl, #8]
   132a8:	mov	r3, #0
   132ac:	ldr	r2, [pc, #1056]	; 136d4 <__assert_fail@plt+0x2790>
   132b0:	strb	r3, [r3, r2]
   132b4:	add	r3, r3, #1
   132b8:	cmp	r3, #256	; 0x100
   132bc:	bne	132b0 <__assert_fail@plt+0x236c>
   132c0:	mov	r4, #0
   132c4:	ldr	r6, [pc, #892]	; 13648 <__assert_fail@plt+0x2704>
   132c8:	mov	r7, r4
   132cc:	add	r8, r6, #256	; 0x100
   132d0:	b	132f8 <__assert_fail@plt+0x23b4>
   132d4:	ldr	r3, [pc, #1020]	; 136d8 <__assert_fail@plt+0x2794>
   132d8:	mov	r2, #1840	; 0x730
   132dc:	ldr	r1, [pc, #960]	; 136a4 <__assert_fail@plt+0x2760>
   132e0:	ldr	r0, [pc, #1012]	; 136dc <__assert_fail@plt+0x2798>
   132e4:	bl	10f44 <__assert_fail@plt>
   132e8:	strb	r0, [r4, r8]
   132ec:	add	r4, r4, #1
   132f0:	cmp	r4, #256	; 0x100
   132f4:	beq	13328 <__assert_fail@plt+0x23e4>
   132f8:	ldrb	r3, [r4, r6]
   132fc:	cmp	r3, #0
   13300:	bne	132ec <__assert_fail@plt+0x23a8>
   13304:	mov	r1, r7
   13308:	mov	r0, sl
   1330c:	bl	1204c <__assert_fail@plt+0x1108>
   13310:	cmn	r0, #1
   13314:	bne	132e8 <__assert_fail@plt+0x23a4>
   13318:	ldr	r3, [pc, #808]	; 13648 <__assert_fail@plt+0x2704>
   1331c:	ldrb	r3, [r3, #771]	; 0x303
   13320:	cmp	r3, #0
   13324:	beq	132d4 <__assert_fail@plt+0x2390>
   13328:	ldr	r3, [pc, #792]	; 13648 <__assert_fail@plt+0x2704>
   1332c:	ldrb	r3, [r3, #770]	; 0x302
   13330:	cmp	r3, #0
   13334:	bne	134bc <__assert_fail@plt+0x2578>
   13338:	ldr	r5, [pc, #904]	; 136c8 <__assert_fail@plt+0x2784>
   1333c:	mov	r6, #8192	; 0x2000
   13340:	ldr	r7, [pc, #792]	; 13660 <__assert_fail@plt+0x271c>
   13344:	b	13500 <__assert_fail@plt+0x25bc>
   13348:	strb	r3, [r7, r8]
   1334c:	add	r4, r4, #1
   13350:	cmp	r4, #256	; 0x100
   13354:	beq	13458 <__assert_fail@plt+0x2514>
   13358:	ldrh	r3, [r5, #2]!
   1335c:	tst	r3, #512	; 0x200
   13360:	beq	1334c <__assert_fail@plt+0x2408>
   13364:	mov	r7, r4
   13368:	add	r3, r4, #128	; 0x80
   1336c:	cmp	r3, r9
   13370:	movhi	r3, r4
   13374:	bhi	13348 <__assert_fail@plt+0x2404>
   13378:	bl	10e30 <__ctype_toupper_loc@plt>
   1337c:	ldr	r3, [r0]
   13380:	ldr	r3, [r3, r4, lsl #2]
   13384:	b	13348 <__assert_fail@plt+0x2404>
   13388:	cmp	r3, #1
   1338c:	beq	133f8 <__assert_fail@plt+0x24b4>
   13390:	cmn	r4, #1
   13394:	cmnne	r0, #1
   13398:	beq	13490 <__assert_fail@plt+0x254c>
   1339c:	add	r4, r6, r4
   133a0:	strb	r0, [r4, #256]	; 0x100
   133a4:	ldr	r3, [sp, #40]	; 0x28
   133a8:	cmp	r3, #2
   133ac:	bne	13458 <__assert_fail@plt+0x2514>
   133b0:	add	r1, sp, #36	; 0x24
   133b4:	add	r0, sp, #336	; 0x150
   133b8:	bl	1204c <__assert_fail@plt+0x1108>
   133bc:	mov	r4, r0
   133c0:	add	r1, sp, #40	; 0x28
   133c4:	mov	r0, sl
   133c8:	bl	1204c <__assert_fail@plt+0x1108>
   133cc:	ldr	r3, [sp, #36]	; 0x24
   133d0:	cmp	r3, #0
   133d4:	bne	13388 <__assert_fail@plt+0x2444>
   133d8:	ldr	r3, [sp, #40]	; 0x28
   133dc:	cmp	r3, #1
   133e0:	bne	13390 <__assert_fail@plt+0x244c>
   133e4:	bl	10e54 <__ctype_b_loc@plt>
   133e8:	ldr	r5, [r0]
   133ec:	sub	r5, r5, #2
   133f0:	mov	r4, #0
   133f4:	b	13358 <__assert_fail@plt+0x2414>
   133f8:	ldr	r3, [sp, #40]	; 0x28
   133fc:	cmp	r3, #0
   13400:	bne	13390 <__assert_fail@plt+0x244c>
   13404:	bl	10e54 <__ctype_b_loc@plt>
   13408:	ldr	r5, [r0]
   1340c:	sub	r5, r5, #2
   13410:	mov	r4, #0
   13414:	b	13428 <__assert_fail@plt+0x24e4>
   13418:	strb	r3, [r7, r8]
   1341c:	add	r4, r4, #1
   13420:	cmp	r4, #256	; 0x100
   13424:	beq	13458 <__assert_fail@plt+0x2514>
   13428:	ldrh	r3, [r5, #2]!
   1342c:	tst	r3, #256	; 0x100
   13430:	beq	1341c <__assert_fail@plt+0x24d8>
   13434:	mov	r7, r4
   13438:	add	r3, r4, #128	; 0x80
   1343c:	cmp	r3, r9
   13440:	movhi	r3, r4
   13444:	bhi	13418 <__assert_fail@plt+0x24d4>
   13448:	bl	10e24 <__ctype_tolower_loc@plt>
   1344c:	ldr	r3, [r0]
   13450:	ldr	r3, [r3, r4, lsl #2]
   13454:	b	13418 <__assert_fail@plt+0x24d4>
   13458:	ldr	r3, [sp, #340]	; 0x154
   1345c:	ldr	r3, [r3, #4]
   13460:	str	r3, [sp, #340]	; 0x154
   13464:	add	r1, sp, #344	; 0x158
   13468:	mvn	r2, #0
   1346c:	mvn	r3, #0
   13470:	strd	r2, [r1]
   13474:	ldr	r3, [sl, #4]
   13478:	ldr	r3, [r3, #4]
   1347c:	str	r3, [sl, #4]
   13480:	mvn	r2, #0
   13484:	mvn	r3, #0
   13488:	strd	r2, [sl, #8]
   1348c:	b	133b0 <__assert_fail@plt+0x246c>
   13490:	cmn	r4, #1
   13494:	beq	13328 <__assert_fail@plt+0x23e4>
   13498:	ldr	r3, [pc, #424]	; 13648 <__assert_fail@plt+0x2704>
   1349c:	ldrb	r3, [r3, #771]	; 0x303
   134a0:	cmp	r3, #0
   134a4:	bne	13328 <__assert_fail@plt+0x23e4>
   134a8:	ldr	r3, [pc, #552]	; 136d8 <__assert_fail@plt+0x2794>
   134ac:	ldr	r2, [pc, #556]	; 136e0 <__assert_fail@plt+0x279c>
   134b0:	ldr	r1, [pc, #492]	; 136a4 <__assert_fail@plt+0x2760>
   134b4:	ldr	r0, [pc, #552]	; 136e4 <__assert_fail@plt+0x27a0>
   134b8:	bl	10f44 <__assert_fail@plt>
   134bc:	ldr	r4, [pc, #388]	; 13648 <__assert_fail@plt+0x2704>
   134c0:	add	r2, r4, #512	; 0x200
   134c4:	mov	r1, #0
   134c8:	mov	r0, sl
   134cc:	bl	12344 <__assert_fail@plt+0x1400>
   134d0:	ldr	r2, [pc, #528]	; 136e8 <__assert_fail@plt+0x27a4>
   134d4:	mov	r1, #8192	; 0x2000
   134d8:	add	r0, r4, #776	; 0x308
   134dc:	bl	123ac <__assert_fail@plt+0x1468>
   134e0:	b	13514 <__assert_fail@plt+0x25d0>
   134e4:	ldr	r3, [r7]
   134e8:	mov	r2, r4
   134ec:	mov	r1, #1
   134f0:	mov	r0, r5
   134f4:	bl	10d58 <fwrite_unlocked@plt>
   134f8:	cmp	r4, r0
   134fc:	bne	1354c <__assert_fail@plt+0x2608>
   13500:	mov	r1, r6
   13504:	mov	r0, r5
   13508:	bl	11244 <__assert_fail@plt+0x300>
   1350c:	subs	r4, r0, #0
   13510:	bne	134e4 <__assert_fail@plt+0x25a0>
   13514:	mov	r0, #0
   13518:	bl	10f38 <close@plt>
   1351c:	cmp	r0, #0
   13520:	beq	13574 <__assert_fail@plt+0x2630>
   13524:	bl	10e84 <__errno_location@plt>
   13528:	ldr	r4, [r0]
   1352c:	mov	r2, #5
   13530:	ldr	r1, [pc, #436]	; 136ec <__assert_fail@plt+0x27a8>
   13534:	mov	r0, #0
   13538:	bl	10d88 <dcgettext@plt>
   1353c:	mov	r2, r0
   13540:	mov	r1, r4
   13544:	mov	r0, #1
   13548:	bl	10df4 <error@plt>
   1354c:	bl	10e84 <__errno_location@plt>
   13550:	ldr	r4, [r0]
   13554:	mov	r2, #5
   13558:	ldr	r1, [pc, #364]	; 136cc <__assert_fail@plt+0x2788>
   1355c:	mov	r0, #0
   13560:	bl	10d88 <dcgettext@plt>
   13564:	mov	r2, r0
   13568:	mov	r1, r4
   1356c:	mov	r0, #1
   13570:	bl	10df4 <error@plt>
   13574:	mov	r0, #0
   13578:	bl	10e60 <exit@plt>
   1357c:	add	r3, sp, #352	; 0x160
   13580:	ldrd	r0, [r3]
   13584:	ldrd	r2, [sl, #16]
   13588:	cmp	r1, r3
   1358c:	cmpeq	r0, r2
   13590:	bhi	1361c <__assert_fail@plt+0x26d8>
   13594:	ldrb	r3, [sp, #369]	; 0x171
   13598:	cmp	r3, #0
   1359c:	beq	130e4 <__assert_fail@plt+0x21a0>
   135a0:	ldrd	r0, [sl, #16]
   135a4:	add	r3, sp, #352	; 0x160
   135a8:	ldrd	r2, [r3]
   135ac:	cmp	r1, r3
   135b0:	cmpeq	r0, r2
   135b4:	bne	135fc <__assert_fail@plt+0x26b8>
   135b8:	mvn	r2, #1
   135bc:	mvn	r3, #0
   135c0:	strd	r2, [sl, #8]
   135c4:	mov	r1, #0
   135c8:	mov	r0, sl
   135cc:	bl	1204c <__assert_fail@plt+0x1108>
   135d0:	mov	r4, r0
   135d4:	cmn	r0, #1
   135d8:	movne	r5, #0
   135dc:	beq	135fc <__assert_fail@plt+0x26b8>
   135e0:	mov	r1, r5
   135e4:	mov	r0, sl
   135e8:	bl	1204c <__assert_fail@plt+0x1108>
   135ec:	cmn	r0, #1
   135f0:	beq	130e4 <__assert_fail@plt+0x21a0>
   135f4:	cmp	r4, r0
   135f8:	beq	135e0 <__assert_fail@plt+0x269c>
   135fc:	mov	r2, #5
   13600:	ldr	r1, [pc, #232]	; 136f0 <__assert_fail@plt+0x27ac>
   13604:	mov	r0, #0
   13608:	bl	10d88 <dcgettext@plt>
   1360c:	mov	r2, r0
   13610:	mov	r1, #0
   13614:	mov	r0, #1
   13618:	bl	10df4 <error@plt>
   1361c:	ldr	ip, [pc, #36]	; 13648 <__assert_fail@plt+0x2704>
   13620:	ldrb	ip, [ip, #771]	; 0x303
   13624:	cmp	ip, #0
   13628:	bne	13594 <__assert_fail@plt+0x2650>
   1362c:	b	13008 <__assert_fail@plt+0x20c4>
   13630:			; <UNDEFINED> instruction: 0x000178bc
   13634:	andeq	r7, r1, r4, lsr #28
   13638:	andeq	r7, r1, ip, lsr pc
   1363c:	andeq	r3, r1, r4, lsl r7
   13640:	andeq	r7, r1, ip, ror #2
   13644:	andeq	r7, r1, r8, ror #30
   13648:	andeq	r9, r2, ip, asr r1
   1364c:	andeq	r7, r1, r4, asr pc
   13650:	andeq	r7, r1, r8, asr pc
   13654:	strdeq	r9, [r2], -r0
   13658:	andeq	r7, r1, r0, lsr #28
   1365c:	andeq	r7, r1, r0, lsr #9
   13660:	andeq	r9, r2, r4, asr r1
   13664:	andeq	r9, r2, r0, asr #2
   13668:	andeq	r7, r1, r0, ror pc
   1366c:	andeq	r7, r1, r0, lsl #31
   13670:	andeq	r9, r2, r8, asr #2
   13674:	andeq	r7, r1, r0, lsl pc
   13678:	andeq	r7, r1, ip, asr #29
   1367c:	andeq	r8, r1, r8, asr #10
   13680:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13684:			; <UNDEFINED> instruction: 0x00017fb0
   13688:	strdeq	r7, [r1], -r8
   1368c:	andeq	r8, r1, ip, lsr #32
   13690:	andeq	r8, r1, r4, rrx
   13694:	andeq	r8, r1, r4, lsr #1
   13698:	andeq	r8, r1, r4, lsl #2
   1369c:	ldrdeq	r7, [r1], -ip
   136a0:	andeq	r0, r0, r8, asr #9
   136a4:	andeq	r7, r1, r8, lsl #4
   136a8:	andeq	r8, r1, r4, lsr r1
   136ac:	andeq	r8, r1, ip, ror #2
   136b0:	andeq	r8, r1, r0, lsr #3
   136b4:	andeq	r9, r2, r0, asr r1
   136b8:	andeq	r9, r2, fp, asr r2
   136bc:	andeq	r0, r0, pc, ror r1
   136c0:	andeq	r8, r1, r8, ror r2
   136c4:	andeq	r1, r1, ip, lsr r1
   136c8:	andeq	r9, r2, r4, ror #8
   136cc:	muleq	r1, r4, r4
   136d0:	andeq	r1, r1, r4, lsl #3
   136d4:	andeq	r9, r2, ip, asr r2
   136d8:	strdeq	r7, [r1], -r4
   136dc:			; <UNDEFINED> instruction: 0x000182b8
   136e0:	andeq	r0, r0, r5, ror #14
   136e4:	ldrdeq	r8, [r1], -r4
   136e8:	andeq	r1, r1, r4, asr #4
   136ec:	strdeq	r8, [r1], -r0
   136f0:	andeq	r8, r1, ip, lsl #4
   136f4:	ldr	r3, [pc, #4]	; 13700 <__assert_fail@plt+0x27bc>
   136f8:	str	r0, [r3]
   136fc:	bx	lr
   13700:	andeq	fp, r2, r4, ror #8
   13704:	ldr	r3, [pc, #4]	; 13710 <__assert_fail@plt+0x27cc>
   13708:	strb	r0, [r3, #4]
   1370c:	bx	lr
   13710:	andeq	fp, r2, r4, ror #8
   13714:	push	{r4, r5, r6, lr}
   13718:	sub	sp, sp, #8
   1371c:	ldr	r3, [pc, #200]	; 137ec <__assert_fail@plt+0x28a8>
   13720:	ldr	r0, [r3]
   13724:	bl	16630 <__assert_fail@plt+0x56ec>
   13728:	cmp	r0, #0
   1372c:	beq	13750 <__assert_fail@plt+0x280c>
   13730:	ldr	r3, [pc, #184]	; 137f0 <__assert_fail@plt+0x28ac>
   13734:	ldrb	r3, [r3, #4]
   13738:	cmp	r3, #0
   1373c:	beq	1376c <__assert_fail@plt+0x2828>
   13740:	bl	10e84 <__errno_location@plt>
   13744:	ldr	r3, [r0]
   13748:	cmp	r3, #32
   1374c:	bne	1376c <__assert_fail@plt+0x2828>
   13750:	ldr	r3, [pc, #156]	; 137f4 <__assert_fail@plt+0x28b0>
   13754:	ldr	r0, [r3]
   13758:	bl	16630 <__assert_fail@plt+0x56ec>
   1375c:	cmp	r0, #0
   13760:	bne	137e0 <__assert_fail@plt+0x289c>
   13764:	add	sp, sp, #8
   13768:	pop	{r4, r5, r6, pc}
   1376c:	mov	r2, #5
   13770:	ldr	r1, [pc, #128]	; 137f8 <__assert_fail@plt+0x28b4>
   13774:	mov	r0, #0
   13778:	bl	10d88 <dcgettext@plt>
   1377c:	mov	r4, r0
   13780:	ldr	r3, [pc, #104]	; 137f0 <__assert_fail@plt+0x28ac>
   13784:	ldr	r5, [r3]
   13788:	cmp	r5, #0
   1378c:	beq	137c4 <__assert_fail@plt+0x2880>
   13790:	bl	10e84 <__errno_location@plt>
   13794:	ldr	r6, [r0]
   13798:	mov	r0, r5
   1379c:	bl	15280 <__assert_fail@plt+0x433c>
   137a0:	str	r4, [sp]
   137a4:	mov	r3, r0
   137a8:	ldr	r2, [pc, #76]	; 137fc <__assert_fail@plt+0x28b8>
   137ac:	mov	r1, r6
   137b0:	mov	r0, #0
   137b4:	bl	10df4 <error@plt>
   137b8:	ldr	r3, [pc, #64]	; 13800 <__assert_fail@plt+0x28bc>
   137bc:	ldr	r0, [r3]
   137c0:	bl	10d28 <_exit@plt>
   137c4:	bl	10e84 <__errno_location@plt>
   137c8:	mov	r3, r4
   137cc:	ldr	r2, [pc, #48]	; 13804 <__assert_fail@plt+0x28c0>
   137d0:	ldr	r1, [r0]
   137d4:	mov	r0, #0
   137d8:	bl	10df4 <error@plt>
   137dc:	b	137b8 <__assert_fail@plt+0x2874>
   137e0:	ldr	r3, [pc, #24]	; 13800 <__assert_fail@plt+0x28bc>
   137e4:	ldr	r0, [r3]
   137e8:	bl	10d28 <_exit@plt>
   137ec:	andeq	r9, r2, r4, asr r1
   137f0:	andeq	fp, r2, r4, ror #8
   137f4:	andeq	r9, r2, r8, asr #2
   137f8:	muleq	r1, r4, r4
   137fc:	andeq	r8, r1, r0, lsr #8
   13800:	strdeq	r9, [r2], -r4
   13804:	andeq	r8, r1, r4, lsr #8
   13808:	push	{r4, r5, lr}
   1380c:	sub	sp, sp, #20
   13810:	ldr	r1, [sp, #40]	; 0x28
   13814:	str	r1, [sp, #8]
   13818:	ldrd	r4, [sp, #32]
   1381c:	strd	r4, [sp]
   13820:	bl	10cf8 <posix_fadvise64@plt>
   13824:	add	sp, sp, #20
   13828:	pop	{r4, r5, pc}
   1382c:	cmp	r0, #0
   13830:	bxeq	lr
   13834:	push	{r4, lr}
   13838:	sub	sp, sp, #16
   1383c:	mov	r4, r1
   13840:	bl	10ec0 <fileno@plt>
   13844:	str	r4, [sp, #8]
   13848:	mov	r2, #0
   1384c:	mov	r3, #0
   13850:	strd	r2, [sp]
   13854:	bl	10cf8 <posix_fadvise64@plt>
   13858:	add	sp, sp, #16
   1385c:	pop	{r4, pc}
   13860:	push	{r4, r5, lr}
   13864:	sub	sp, sp, #12
   13868:	mov	r5, r0
   1386c:	bl	10e84 <__errno_location@plt>
   13870:	mov	r4, r0
   13874:	ldr	r3, [r0]
   13878:	str	r3, [sp]
   1387c:	str	r3, [sp, #4]
   13880:	mov	r3, #0
   13884:	str	r3, [r0]
   13888:	mov	r0, r5
   1388c:	bl	10d1c <free@plt>
   13890:	ldr	r3, [r4]
   13894:	cmp	r3, #0
   13898:	moveq	r3, #4
   1389c:	movne	r3, #0
   138a0:	add	r2, sp, #8
   138a4:	add	r3, r2, r3
   138a8:	ldr	r3, [r3, #-8]
   138ac:	str	r3, [r4]
   138b0:	add	sp, sp, #12
   138b4:	pop	{r4, r5, pc}
   138b8:	push	{r4, r5, r6, lr}
   138bc:	subs	r4, r0, #0
   138c0:	beq	13938 <__assert_fail@plt+0x29f4>
   138c4:	mov	r1, #47	; 0x2f
   138c8:	mov	r0, r4
   138cc:	bl	10efc <strrchr@plt>
   138d0:	cmp	r0, #0
   138d4:	addne	r5, r0, #1
   138d8:	moveq	r5, r4
   138dc:	sub	r3, r5, r4
   138e0:	cmp	r3, #6
   138e4:	ble	13924 <__assert_fail@plt+0x29e0>
   138e8:	mov	r2, #7
   138ec:	ldr	r1, [pc, #96]	; 13954 <__assert_fail@plt+0x2a10>
   138f0:	sub	r0, r5, #7
   138f4:	bl	10f20 <strncmp@plt>
   138f8:	cmp	r0, #0
   138fc:	bne	13924 <__assert_fail@plt+0x29e0>
   13900:	mov	r2, #3
   13904:	ldr	r1, [pc, #76]	; 13958 <__assert_fail@plt+0x2a14>
   13908:	mov	r0, r5
   1390c:	bl	10f20 <strncmp@plt>
   13910:	cmp	r0, #0
   13914:	addeq	r4, r5, #3
   13918:	ldreq	r3, [pc, #60]	; 1395c <__assert_fail@plt+0x2a18>
   1391c:	streq	r4, [r3]
   13920:	movne	r4, r5
   13924:	ldr	r3, [pc, #52]	; 13960 <__assert_fail@plt+0x2a1c>
   13928:	str	r4, [r3]
   1392c:	ldr	r3, [pc, #48]	; 13964 <__assert_fail@plt+0x2a20>
   13930:	str	r4, [r3]
   13934:	pop	{r4, r5, r6, pc}
   13938:	ldr	r3, [pc, #40]	; 13968 <__assert_fail@plt+0x2a24>
   1393c:	ldr	r3, [r3]
   13940:	mov	r2, #55	; 0x37
   13944:	mov	r1, #1
   13948:	ldr	r0, [pc, #28]	; 1396c <__assert_fail@plt+0x2a28>
   1394c:	bl	10db8 <fwrite@plt>
   13950:	bl	10f2c <abort@plt>
   13954:	andeq	r8, r1, r0, ror #8
   13958:	andeq	r8, r1, r8, ror #8
   1395c:	andeq	r9, r2, r8, lsr r1
   13960:	andeq	fp, r2, ip, ror #8
   13964:	andeq	r9, r2, ip, lsr r1
   13968:	andeq	r9, r2, r8, asr #2
   1396c:	andeq	r8, r1, r8, lsr #8
   13970:	push	{r4, r5, r6, lr}
   13974:	mov	r5, r0
   13978:	mov	r4, r1
   1397c:	mov	r2, #48	; 0x30
   13980:	mov	r1, #0
   13984:	bl	10ea8 <memset@plt>
   13988:	cmp	r4, #10
   1398c:	beq	1399c <__assert_fail@plt+0x2a58>
   13990:	str	r4, [r5]
   13994:	mov	r0, r5
   13998:	pop	{r4, r5, r6, pc}
   1399c:	bl	10f2c <abort@plt>
   139a0:	push	{r4, r5, r6, lr}
   139a4:	mov	r4, r0
   139a8:	mov	r5, r1
   139ac:	mov	r2, #5
   139b0:	mov	r1, r0
   139b4:	mov	r0, #0
   139b8:	bl	10d88 <dcgettext@plt>
   139bc:	cmp	r4, r0
   139c0:	popne	{r4, r5, r6, pc}
   139c4:	bl	1685c <__assert_fail@plt+0x5918>
   139c8:	ldrb	r3, [r0]
   139cc:	bic	r3, r3, #32
   139d0:	cmp	r3, #85	; 0x55
   139d4:	beq	13a50 <__assert_fail@plt+0x2b0c>
   139d8:	cmp	r3, #71	; 0x47
   139dc:	bne	13aac <__assert_fail@plt+0x2b68>
   139e0:	ldrb	r3, [r0, #1]
   139e4:	bic	r3, r3, #32
   139e8:	cmp	r3, #66	; 0x42
   139ec:	bne	13aac <__assert_fail@plt+0x2b68>
   139f0:	ldrb	r3, [r0, #2]
   139f4:	cmp	r3, #49	; 0x31
   139f8:	bne	13aac <__assert_fail@plt+0x2b68>
   139fc:	ldrb	r3, [r0, #3]
   13a00:	cmp	r3, #56	; 0x38
   13a04:	bne	13aac <__assert_fail@plt+0x2b68>
   13a08:	ldrb	r3, [r0, #4]
   13a0c:	cmp	r3, #48	; 0x30
   13a10:	bne	13aac <__assert_fail@plt+0x2b68>
   13a14:	ldrb	r3, [r0, #5]
   13a18:	cmp	r3, #51	; 0x33
   13a1c:	bne	13aac <__assert_fail@plt+0x2b68>
   13a20:	ldrb	r3, [r0, #6]
   13a24:	cmp	r3, #48	; 0x30
   13a28:	bne	13aac <__assert_fail@plt+0x2b68>
   13a2c:	ldrb	r3, [r0, #7]
   13a30:	cmp	r3, #0
   13a34:	bne	13aac <__assert_fail@plt+0x2b68>
   13a38:	ldrb	r2, [r4]
   13a3c:	ldr	r3, [pc, #124]	; 13ac0 <__assert_fail@plt+0x2b7c>
   13a40:	ldr	r0, [pc, #124]	; 13ac4 <__assert_fail@plt+0x2b80>
   13a44:	cmp	r2, #96	; 0x60
   13a48:	movne	r0, r3
   13a4c:	pop	{r4, r5, r6, pc}
   13a50:	ldrb	r3, [r0, #1]
   13a54:	bic	r3, r3, #32
   13a58:	cmp	r3, #84	; 0x54
   13a5c:	bne	13aac <__assert_fail@plt+0x2b68>
   13a60:	ldrb	r3, [r0, #2]
   13a64:	bic	r3, r3, #32
   13a68:	cmp	r3, #70	; 0x46
   13a6c:	bne	13aac <__assert_fail@plt+0x2b68>
   13a70:	ldrb	r3, [r0, #3]
   13a74:	cmp	r3, #45	; 0x2d
   13a78:	bne	13aac <__assert_fail@plt+0x2b68>
   13a7c:	ldrb	r3, [r0, #4]
   13a80:	cmp	r3, #56	; 0x38
   13a84:	bne	13aac <__assert_fail@plt+0x2b68>
   13a88:	ldrb	r3, [r0, #5]
   13a8c:	cmp	r3, #0
   13a90:	bne	13aac <__assert_fail@plt+0x2b68>
   13a94:	ldrb	r2, [r4]
   13a98:	ldr	r3, [pc, #40]	; 13ac8 <__assert_fail@plt+0x2b84>
   13a9c:	ldr	r0, [pc, #40]	; 13acc <__assert_fail@plt+0x2b88>
   13aa0:	cmp	r2, #96	; 0x60
   13aa4:	movne	r0, r3
   13aa8:	pop	{r4, r5, r6, pc}
   13aac:	ldr	r3, [pc, #28]	; 13ad0 <__assert_fail@plt+0x2b8c>
   13ab0:	ldr	r0, [pc, #28]	; 13ad4 <__assert_fail@plt+0x2b90>
   13ab4:	cmp	r5, #9
   13ab8:	movne	r0, r3
   13abc:	pop	{r4, r5, r6, pc}
   13ac0:	andeq	r8, r1, r4, asr #9
   13ac4:	ldrdeq	r8, [r1], -r0
   13ac8:	andeq	r8, r1, r0, asr #9
   13acc:	ldrdeq	r8, [r1], -r4
   13ad0:	andeq	r8, r1, r8, asr #9
   13ad4:	andeq	r8, r1, ip, asr #9
   13ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13adc:	sub	sp, sp, #116	; 0x74
   13ae0:	str	r0, [sp, #36]	; 0x24
   13ae4:	mov	sl, r1
   13ae8:	str	r2, [sp, #52]	; 0x34
   13aec:	str	r3, [sp, #28]
   13af0:	ldr	r8, [sp, #152]	; 0x98
   13af4:	bl	10dd0 <__ctype_get_mb_cur_max@plt>
   13af8:	str	r0, [sp, #84]	; 0x54
   13afc:	ldr	r3, [sp, #156]	; 0x9c
   13b00:	lsr	r3, r3, #1
   13b04:	and	r3, r3, #1
   13b08:	str	r3, [sp, #32]
   13b0c:	mov	r3, #1
   13b10:	str	r3, [sp, #40]	; 0x28
   13b14:	mov	r3, #0
   13b18:	str	r3, [sp, #80]	; 0x50
   13b1c:	str	r3, [sp, #44]	; 0x2c
   13b20:	str	r3, [sp, #48]	; 0x30
   13b24:	str	r3, [sp, #60]	; 0x3c
   13b28:	str	r3, [sp, #72]	; 0x48
   13b2c:	str	r3, [sp, #76]	; 0x4c
   13b30:	mov	r7, sl
   13b34:	mov	sl, r8
   13b38:	cmp	sl, #10
   13b3c:	ldrls	pc, [pc, sl, lsl #2]
   13b40:	b	13cf8 <__assert_fail@plt+0x2db4>
   13b44:	andeq	r3, r1, r8, lsr #23
   13b48:	andeq	r3, r1, r8, ror fp
   13b4c:	ldrdeq	r3, [r1], -r4
   13b50:	andeq	r3, r1, r0, ror fp
   13b54:	andeq	r3, r1, r8, lsl #25
   13b58:			; <UNDEFINED> instruction: 0x00013bb8
   13b5c:	andeq	r4, r1, r4, lsr #24
   13b60:	strdeq	r3, [r1], -ip
   13b64:	strdeq	r3, [r1], -r4
   13b68:	strdeq	r3, [r1], -r4
   13b6c:	strdeq	r3, [r1], -r4
   13b70:	mov	r3, #1
   13b74:	str	r3, [sp, #48]	; 0x30
   13b78:	mov	r3, #1
   13b7c:	str	r3, [sp, #32]
   13b80:	str	r3, [sp, #60]	; 0x3c
   13b84:	ldr	r3, [pc, #4068]	; 14b70 <__assert_fail@plt+0x3c2c>
   13b88:	str	r3, [sp, #72]	; 0x48
   13b8c:	mov	fp, #0
   13b90:	mov	sl, #2
   13b94:	mov	r6, #0
   13b98:	ldr	r3, [sp, #48]	; 0x30
   13b9c:	eor	r3, r3, #1
   13ba0:	str	r3, [sp, #68]	; 0x44
   13ba4:	b	1448c <__assert_fail@plt+0x3548>
   13ba8:	mov	r3, #0
   13bac:	str	r3, [sp, #32]
   13bb0:	mov	fp, r3
   13bb4:	b	13b94 <__assert_fail@plt+0x2c50>
   13bb8:	ldr	r3, [sp, #32]
   13bbc:	cmp	r3, #0
   13bc0:	bne	13d14 <__assert_fail@plt+0x2dd0>
   13bc4:	cmp	r7, #0
   13bc8:	beq	13d34 <__assert_fail@plt+0x2df0>
   13bcc:	ldr	r3, [sp, #36]	; 0x24
   13bd0:	mov	r2, #34	; 0x22
   13bd4:	strb	r2, [r3]
   13bd8:	mov	r3, #1
   13bdc:	str	r3, [sp, #48]	; 0x30
   13be0:	str	r3, [sp, #60]	; 0x3c
   13be4:	ldr	r3, [pc, #3980]	; 14b78 <__assert_fail@plt+0x3c34>
   13be8:	str	r3, [sp, #72]	; 0x48
   13bec:	mov	fp, #1
   13bf0:	b	13b94 <__assert_fail@plt+0x2c50>
   13bf4:	cmp	sl, #10
   13bf8:	beq	13c1c <__assert_fail@plt+0x2cd8>
   13bfc:	mov	r1, sl
   13c00:	ldr	r0, [pc, #3948]	; 14b74 <__assert_fail@plt+0x3c30>
   13c04:	bl	139a0 <__assert_fail@plt+0x2a5c>
   13c08:	str	r0, [sp, #164]	; 0xa4
   13c0c:	mov	r1, sl
   13c10:	ldr	r0, [pc, #3928]	; 14b70 <__assert_fail@plt+0x3c2c>
   13c14:	bl	139a0 <__assert_fail@plt+0x2a5c>
   13c18:	str	r0, [sp, #168]	; 0xa8
   13c1c:	ldr	r3, [sp, #32]
   13c20:	cmp	r3, #0
   13c24:	movne	fp, #0
   13c28:	bne	13c60 <__assert_fail@plt+0x2d1c>
   13c2c:	ldr	r3, [sp, #164]	; 0xa4
   13c30:	ldrb	r3, [r3]
   13c34:	cmp	r3, #0
   13c38:	beq	13c80 <__assert_fail@plt+0x2d3c>
   13c3c:	ldr	r2, [sp, #164]	; 0xa4
   13c40:	mov	fp, #0
   13c44:	ldr	r1, [sp, #36]	; 0x24
   13c48:	cmp	r7, fp
   13c4c:	strbhi	r3, [r1, fp]
   13c50:	add	fp, fp, #1
   13c54:	ldrb	r3, [r2, #1]!
   13c58:	cmp	r3, #0
   13c5c:	bne	13c48 <__assert_fail@plt+0x2d04>
   13c60:	ldr	r0, [sp, #168]	; 0xa8
   13c64:	bl	10e6c <strlen@plt>
   13c68:	str	r0, [sp, #60]	; 0x3c
   13c6c:	ldr	r3, [sp, #168]	; 0xa8
   13c70:	str	r3, [sp, #72]	; 0x48
   13c74:	mov	r3, #1
   13c78:	str	r3, [sp, #48]	; 0x30
   13c7c:	b	13b94 <__assert_fail@plt+0x2c50>
   13c80:	mov	fp, #0
   13c84:	b	13c60 <__assert_fail@plt+0x2d1c>
   13c88:	ldr	r3, [sp, #32]
   13c8c:	cmp	r3, #0
   13c90:	bne	13d50 <__assert_fail@plt+0x2e0c>
   13c94:	mov	r3, #1
   13c98:	str	r3, [sp, #48]	; 0x30
   13c9c:	cmp	r7, #0
   13ca0:	beq	13d6c <__assert_fail@plt+0x2e28>
   13ca4:	ldr	r3, [sp, #36]	; 0x24
   13ca8:	mov	r2, #39	; 0x27
   13cac:	strb	r2, [r3]
   13cb0:	mov	r3, #0
   13cb4:	str	r3, [sp, #32]
   13cb8:	mov	r3, #1
   13cbc:	str	r3, [sp, #60]	; 0x3c
   13cc0:	ldr	r3, [pc, #3752]	; 14b70 <__assert_fail@plt+0x3c2c>
   13cc4:	str	r3, [sp, #72]	; 0x48
   13cc8:	mov	fp, #1
   13ccc:	mov	sl, #2
   13cd0:	b	13b94 <__assert_fail@plt+0x2c50>
   13cd4:	ldr	r3, [sp, #32]
   13cd8:	cmp	r3, #0
   13cdc:	beq	13c9c <__assert_fail@plt+0x2d58>
   13ce0:	mov	r3, #1
   13ce4:	str	r3, [sp, #60]	; 0x3c
   13ce8:	ldr	r3, [pc, #3712]	; 14b70 <__assert_fail@plt+0x3c2c>
   13cec:	str	r3, [sp, #72]	; 0x48
   13cf0:	mov	fp, #0
   13cf4:	b	13b94 <__assert_fail@plt+0x2c50>
   13cf8:	bl	10f2c <abort@plt>
   13cfc:	mov	r3, #0
   13d00:	str	r3, [sp, #32]
   13d04:	mov	r3, #1
   13d08:	str	r3, [sp, #48]	; 0x30
   13d0c:	mov	fp, #0
   13d10:	b	13b94 <__assert_fail@plt+0x2c50>
   13d14:	ldr	r3, [sp, #32]
   13d18:	str	r3, [sp, #48]	; 0x30
   13d1c:	mov	r3, #1
   13d20:	str	r3, [sp, #60]	; 0x3c
   13d24:	ldr	r3, [pc, #3660]	; 14b78 <__assert_fail@plt+0x3c34>
   13d28:	str	r3, [sp, #72]	; 0x48
   13d2c:	mov	fp, #0
   13d30:	b	13b94 <__assert_fail@plt+0x2c50>
   13d34:	mov	r3, #1
   13d38:	str	r3, [sp, #48]	; 0x30
   13d3c:	str	r3, [sp, #60]	; 0x3c
   13d40:	ldr	r3, [pc, #3632]	; 14b78 <__assert_fail@plt+0x3c34>
   13d44:	str	r3, [sp, #72]	; 0x48
   13d48:	mov	fp, #1
   13d4c:	b	13b94 <__assert_fail@plt+0x2c50>
   13d50:	mov	r3, #1
   13d54:	str	r3, [sp, #60]	; 0x3c
   13d58:	ldr	r3, [pc, #3600]	; 14b70 <__assert_fail@plt+0x3c2c>
   13d5c:	str	r3, [sp, #72]	; 0x48
   13d60:	mov	fp, #0
   13d64:	mov	sl, #2
   13d68:	b	13b94 <__assert_fail@plt+0x2c50>
   13d6c:	mov	r3, #0
   13d70:	str	r3, [sp, #32]
   13d74:	mov	r3, #1
   13d78:	str	r3, [sp, #60]	; 0x3c
   13d7c:	ldr	r3, [pc, #3564]	; 14b70 <__assert_fail@plt+0x3c2c>
   13d80:	str	r3, [sp, #72]	; 0x48
   13d84:	mov	fp, #1
   13d88:	mov	sl, #2
   13d8c:	b	13b94 <__assert_fail@plt+0x2c50>
   13d90:	mov	r3, #0
   13d94:	str	r3, [sp, #56]	; 0x38
   13d98:	ldr	r3, [sp, #52]	; 0x34
   13d9c:	add	r2, r3, r6
   13da0:	str	r2, [sp, #64]	; 0x40
   13da4:	ldrb	r4, [r3, r6]
   13da8:	cmp	r4, #126	; 0x7e
   13dac:	ldrls	pc, [pc, r4, lsl #2]
   13db0:	b	145ec <__assert_fail@plt+0x36a8>
   13db4:	andeq	r3, r1, ip, asr #31
   13db8:	andeq	r4, r1, ip, ror #11
   13dbc:	andeq	r4, r1, ip, ror #11
   13dc0:	andeq	r4, r1, ip, ror #11
   13dc4:	andeq	r4, r1, ip, ror #11
   13dc8:	andeq	r4, r1, ip, ror #11
   13dcc:	andeq	r4, r1, ip, ror #11
   13dd0:	andeq	r4, r1, r8, lsr #6
   13dd4:	andeq	r3, r1, r4, asr #31
   13dd8:	andeq	r4, r1, r0, ror #5
   13ddc:	ldrdeq	r4, [r1], -r8
   13de0:	andeq	r4, r1, r8, asr #4
   13de4:	andeq	r4, r1, r0, asr #4
   13de8:			; <UNDEFINED> instruction: 0x00013fbc
   13dec:	andeq	r4, r1, ip, ror #11
   13df0:	andeq	r4, r1, ip, ror #11
   13df4:	andeq	r4, r1, ip, ror #11
   13df8:	andeq	r4, r1, ip, ror #11
   13dfc:	andeq	r4, r1, ip, ror #11
   13e00:	andeq	r4, r1, ip, ror #11
   13e04:	andeq	r4, r1, ip, ror #11
   13e08:	andeq	r4, r1, ip, ror #11
   13e0c:	andeq	r4, r1, ip, ror #11
   13e10:	andeq	r4, r1, ip, ror #11
   13e14:	andeq	r4, r1, ip, ror #11
   13e18:	andeq	r4, r1, ip, ror #11
   13e1c:	andeq	r4, r1, ip, ror #11
   13e20:	andeq	r4, r1, ip, ror #11
   13e24:	andeq	r4, r1, ip, ror #11
   13e28:	andeq	r4, r1, ip, ror #11
   13e2c:	andeq	r4, r1, ip, ror #11
   13e30:	andeq	r4, r1, ip, ror #11
   13e34:	andeq	r4, r1, ip, ror r3
   13e38:	andeq	r4, r1, r8, ror r3
   13e3c:	andeq	r4, r1, r8, ror r3
   13e40:	andeq	r4, r1, r0, asr r3
   13e44:	andeq	r4, r1, r8, ror r3
   13e48:	andeq	r4, r1, r0, asr #19
   13e4c:	andeq	r4, r1, r8, ror r3
   13e50:	andeq	r4, r1, r0, asr r5
   13e54:	andeq	r4, r1, r8, ror r3
   13e58:	andeq	r4, r1, r8, ror r3
   13e5c:	andeq	r4, r1, r8, ror r3
   13e60:	andeq	r4, r1, r0, asr #19
   13e64:	andeq	r4, r1, r0, asr #19
   13e68:	andeq	r4, r1, r0, asr #19
   13e6c:	andeq	r4, r1, r0, asr #19
   13e70:	andeq	r4, r1, r0, asr #19
   13e74:	andeq	r4, r1, r0, asr #19
   13e78:	andeq	r4, r1, r0, asr #19
   13e7c:	andeq	r4, r1, r0, asr #19
   13e80:	andeq	r4, r1, r0, asr #19
   13e84:	andeq	r4, r1, r0, asr #19
   13e88:	andeq	r4, r1, r0, asr #19
   13e8c:	andeq	r4, r1, r0, asr #19
   13e90:	andeq	r4, r1, r0, asr #19
   13e94:	andeq	r4, r1, r0, asr #19
   13e98:	andeq	r4, r1, r0, asr #19
   13e9c:	andeq	r4, r1, r0, asr #19
   13ea0:	andeq	r4, r1, r8, ror r3
   13ea4:	andeq	r4, r1, r8, ror r3
   13ea8:	andeq	r4, r1, r8, ror r3
   13eac:	andeq	r4, r1, r8, ror r3
   13eb0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13eb4:	andeq	r4, r1, ip, ror #11
   13eb8:	andeq	r4, r1, r0, asr #19
   13ebc:	andeq	r4, r1, r0, asr #19
   13ec0:	andeq	r4, r1, r0, asr #19
   13ec4:	andeq	r4, r1, r0, asr #19
   13ec8:	andeq	r4, r1, r0, asr #19
   13ecc:	andeq	r4, r1, r0, asr #19
   13ed0:	andeq	r4, r1, r0, asr #19
   13ed4:	andeq	r4, r1, r0, asr #19
   13ed8:	andeq	r4, r1, r0, asr #19
   13edc:	andeq	r4, r1, r0, asr #19
   13ee0:	andeq	r4, r1, r0, asr #19
   13ee4:	andeq	r4, r1, r0, asr #19
   13ee8:	andeq	r4, r1, r0, asr #19
   13eec:	andeq	r4, r1, r0, asr #19
   13ef0:	andeq	r4, r1, r0, asr #19
   13ef4:	andeq	r4, r1, r0, asr #19
   13ef8:	andeq	r4, r1, r0, asr #19
   13efc:	andeq	r4, r1, r0, asr #19
   13f00:	andeq	r4, r1, r0, asr #19
   13f04:	andeq	r4, r1, r0, asr #19
   13f08:	andeq	r4, r1, r0, asr #19
   13f0c:	andeq	r4, r1, r0, asr #19
   13f10:	andeq	r4, r1, r0, asr #19
   13f14:	andeq	r4, r1, r0, asr #19
   13f18:	andeq	r4, r1, r0, asr #19
   13f1c:	andeq	r4, r1, r0, asr #19
   13f20:	andeq	r4, r1, r8, ror r3
   13f24:	andeq	r4, r1, r0, asr r2
   13f28:	andeq	r4, r1, r0, asr #19
   13f2c:	andeq	r4, r1, r8, ror r3
   13f30:	andeq	r4, r1, r0, asr #19
   13f34:	andeq	r4, r1, r8, ror r3
   13f38:	andeq	r4, r1, r0, asr #19
   13f3c:	andeq	r4, r1, r0, asr #19
   13f40:	andeq	r4, r1, r0, asr #19
   13f44:	andeq	r4, r1, r0, asr #19
   13f48:	andeq	r4, r1, r0, asr #19
   13f4c:	andeq	r4, r1, r0, asr #19
   13f50:	andeq	r4, r1, r0, asr #19
   13f54:	andeq	r4, r1, r0, asr #19
   13f58:	andeq	r4, r1, r0, asr #19
   13f5c:	andeq	r4, r1, r0, asr #19
   13f60:	andeq	r4, r1, r0, asr #19
   13f64:	andeq	r4, r1, r0, asr #19
   13f68:	andeq	r4, r1, r0, asr #19
   13f6c:	andeq	r4, r1, r0, asr #19
   13f70:	andeq	r4, r1, r0, asr #19
   13f74:	andeq	r4, r1, r0, asr #19
   13f78:	andeq	r4, r1, r0, asr #19
   13f7c:	andeq	r4, r1, r0, asr #19
   13f80:	andeq	r4, r1, r0, asr #19
   13f84:	andeq	r4, r1, r0, asr #19
   13f88:	andeq	r4, r1, r0, asr #19
   13f8c:	andeq	r4, r1, r0, asr #19
   13f90:	andeq	r4, r1, r0, asr #19
   13f94:	andeq	r4, r1, r0, asr #19
   13f98:	andeq	r4, r1, r0, asr #19
   13f9c:	andeq	r4, r1, r0, asr #19
   13fa0:	andeq	r4, r1, r0, lsr r3
   13fa4:	andeq	r4, r1, r8, ror r3
   13fa8:	andeq	r4, r1, r0, lsr r3
   13fac:	andeq	r4, r1, r0, asr r3
   13fb0:	mov	r3, #0
   13fb4:	str	r3, [sp, #56]	; 0x38
   13fb8:	b	13d98 <__assert_fail@plt+0x2e54>
   13fbc:	mov	r3, #114	; 0x72
   13fc0:	b	142e4 <__assert_fail@plt+0x33a0>
   13fc4:	mov	r3, #98	; 0x62
   13fc8:	b	142fc <__assert_fail@plt+0x33b8>
   13fcc:	ldr	r3, [sp, #48]	; 0x30
   13fd0:	cmp	r3, #0
   13fd4:	beq	140bc <__assert_fail@plt+0x3178>
   13fd8:	ldr	r3, [sp, #32]
   13fdc:	cmp	r3, #0
   13fe0:	bne	14b44 <__assert_fail@plt+0x3c00>
   13fe4:	ldr	r3, [sp, #44]	; 0x2c
   13fe8:	eor	r3, r3, #1
   13fec:	cmp	sl, #2
   13ff0:	movne	r3, #0
   13ff4:	andeq	r3, r3, #1
   13ff8:	cmp	r3, #0
   13ffc:	moveq	r2, fp
   14000:	beq	14044 <__assert_fail@plt+0x3100>
   14004:	cmp	r7, fp
   14008:	ldrhi	r2, [sp, #36]	; 0x24
   1400c:	movhi	r1, #39	; 0x27
   14010:	strbhi	r1, [r2, fp]
   14014:	add	r2, fp, #1
   14018:	cmp	r7, r2
   1401c:	ldrhi	r1, [sp, #36]	; 0x24
   14020:	movhi	r0, #36	; 0x24
   14024:	strbhi	r0, [r1, r2]
   14028:	add	r2, fp, #2
   1402c:	cmp	r7, r2
   14030:	ldrhi	r1, [sp, #36]	; 0x24
   14034:	movhi	r0, #39	; 0x27
   14038:	strbhi	r0, [r1, r2]
   1403c:	add	r2, fp, #3
   14040:	str	r3, [sp, #44]	; 0x2c
   14044:	cmp	r7, r2
   14048:	ldrhi	r3, [sp, #36]	; 0x24
   1404c:	movhi	r1, #92	; 0x5c
   14050:	strbhi	r1, [r3, r2]
   14054:	add	fp, r2, #1
   14058:	cmp	r5, #0
   1405c:	beq	149c8 <__assert_fail@plt+0x3a84>
   14060:	add	r3, r6, #1
   14064:	ldr	r1, [sp, #28]
   14068:	cmp	r1, r3
   1406c:	bls	149d8 <__assert_fail@plt+0x3a94>
   14070:	ldr	r1, [sp, #52]	; 0x34
   14074:	ldrb	r3, [r1, r3]
   14078:	sub	r3, r3, #48	; 0x30
   1407c:	uxtb	r3, r3
   14080:	cmp	r3, #9
   14084:	bhi	149e4 <__assert_fail@plt+0x3aa0>
   14088:	cmp	r7, fp
   1408c:	movhi	r3, #48	; 0x30
   14090:	ldrhi	r1, [sp, #36]	; 0x24
   14094:	strbhi	r3, [r1, fp]
   14098:	add	r3, r2, #2
   1409c:	cmp	r7, r3
   140a0:	movhi	r1, #48	; 0x30
   140a4:	ldrhi	r0, [sp, #36]	; 0x24
   140a8:	strbhi	r1, [r0, r3]
   140ac:	add	fp, r2, #3
   140b0:	ldr	r8, [sp, #32]
   140b4:	mov	r4, #48	; 0x30
   140b8:	b	14394 <__assert_fail@plt+0x3450>
   140bc:	ldr	r3, [sp, #156]	; 0x9c
   140c0:	tst	r3, #1
   140c4:	bne	14488 <__assert_fail@plt+0x3544>
   140c8:	ldr	r5, [sp, #48]	; 0x30
   140cc:	mov	r8, r5
   140d0:	b	14394 <__assert_fail@plt+0x3450>
   140d4:	cmp	sl, #2
   140d8:	beq	140f0 <__assert_fail@plt+0x31ac>
   140dc:	cmp	sl, #5
   140e0:	beq	14108 <__assert_fail@plt+0x31c4>
   140e4:	mov	r8, #0
   140e8:	mov	r5, r8
   140ec:	b	14394 <__assert_fail@plt+0x3450>
   140f0:	ldr	r3, [sp, #32]
   140f4:	cmp	r3, #0
   140f8:	bne	14b58 <__assert_fail@plt+0x3c14>
   140fc:	mov	r8, r3
   14100:	mov	r5, r3
   14104:	b	14394 <__assert_fail@plt+0x3450>
   14108:	ldr	r3, [sp, #156]	; 0x9c
   1410c:	tst	r3, #4
   14110:	beq	149f0 <__assert_fail@plt+0x3aac>
   14114:	add	r3, r6, #2
   14118:	ldr	r2, [sp, #28]
   1411c:	cmp	r2, r3
   14120:	bls	149fc <__assert_fail@plt+0x3ab8>
   14124:	ldr	r2, [sp, #52]	; 0x34
   14128:	add	r2, r2, r6
   1412c:	ldrb	r2, [r2, #1]
   14130:	cmp	r2, #63	; 0x3f
   14134:	movne	r8, #0
   14138:	movne	r5, r8
   1413c:	bne	14394 <__assert_fail@plt+0x3450>
   14140:	ldr	r2, [sp, #52]	; 0x34
   14144:	ldrb	r2, [r2, r3]
   14148:	sub	r1, r2, #33	; 0x21
   1414c:	cmp	r1, #29
   14150:	ldrls	pc, [pc, r1, lsl #2]
   14154:	b	14a08 <__assert_fail@plt+0x3ac4>
   14158:	ldrdeq	r4, [r1], -r0
   1415c:	andeq	r4, r1, r8, lsl #20
   14160:	andeq	r4, r1, r8, lsl #20
   14164:	andeq	r4, r1, r8, lsl #20
   14168:	andeq	r4, r1, r8, lsl #20
   1416c:	andeq	r4, r1, r8, lsl #20
   14170:	ldrdeq	r4, [r1], -r0
   14174:	ldrdeq	r4, [r1], -r0
   14178:	ldrdeq	r4, [r1], -r0
   1417c:	andeq	r4, r1, r8, lsl #20
   14180:	andeq	r4, r1, r8, lsl #20
   14184:	andeq	r4, r1, r8, lsl #20
   14188:	ldrdeq	r4, [r1], -r0
   1418c:	andeq	r4, r1, r8, lsl #20
   14190:	ldrdeq	r4, [r1], -r0
   14194:	andeq	r4, r1, r8, lsl #20
   14198:	andeq	r4, r1, r8, lsl #20
   1419c:	andeq	r4, r1, r8, lsl #20
   141a0:	andeq	r4, r1, r8, lsl #20
   141a4:	andeq	r4, r1, r8, lsl #20
   141a8:	andeq	r4, r1, r8, lsl #20
   141ac:	andeq	r4, r1, r8, lsl #20
   141b0:	andeq	r4, r1, r8, lsl #20
   141b4:	andeq	r4, r1, r8, lsl #20
   141b8:	andeq	r4, r1, r8, lsl #20
   141bc:	andeq	r4, r1, r8, lsl #20
   141c0:	andeq	r4, r1, r8, lsl #20
   141c4:	ldrdeq	r4, [r1], -r0
   141c8:	ldrdeq	r4, [r1], -r0
   141cc:	ldrdeq	r4, [r1], -r0
   141d0:	ldr	r1, [sp, #32]
   141d4:	cmp	r1, #0
   141d8:	bne	14c18 <__assert_fail@plt+0x3cd4>
   141dc:	cmp	r7, fp
   141e0:	movhi	r1, #63	; 0x3f
   141e4:	ldrhi	r0, [sp, #36]	; 0x24
   141e8:	strbhi	r1, [r0, fp]
   141ec:	add	r1, fp, #1
   141f0:	cmp	r7, r1
   141f4:	ldrhi	r0, [sp, #36]	; 0x24
   141f8:	movhi	ip, #34	; 0x22
   141fc:	strbhi	ip, [r0, r1]
   14200:	add	r1, fp, #2
   14204:	cmp	r7, r1
   14208:	ldrhi	r0, [sp, #36]	; 0x24
   1420c:	movhi	ip, #34	; 0x22
   14210:	strbhi	ip, [r0, r1]
   14214:	add	r1, fp, #3
   14218:	cmp	r7, r1
   1421c:	movhi	r0, #63	; 0x3f
   14220:	ldrhi	ip, [sp, #36]	; 0x24
   14224:	strbhi	r0, [ip, r1]
   14228:	add	fp, fp, #4
   1422c:	ldr	r5, [sp, #32]
   14230:	mov	r8, r5
   14234:	mov	r4, r2
   14238:	mov	r6, r3
   1423c:	b	14394 <__assert_fail@plt+0x3450>
   14240:	mov	r3, #102	; 0x66
   14244:	b	142fc <__assert_fail@plt+0x33b8>
   14248:	mov	r3, #118	; 0x76
   1424c:	b	142fc <__assert_fail@plt+0x33b8>
   14250:	cmp	sl, #2
   14254:	beq	142c0 <__assert_fail@plt+0x337c>
   14258:	ldr	r3, [sp, #48]	; 0x30
   1425c:	ldr	r2, [sp, #32]
   14260:	and	r3, r3, r2
   14264:	tst	r9, r3
   14268:	moveq	r3, r4
   1426c:	beq	142fc <__assert_fail@plt+0x33b8>
   14270:	mov	r8, #0
   14274:	mov	r5, r8
   14278:	eor	r5, r5, #1
   1427c:	ldr	r3, [sp, #44]	; 0x2c
   14280:	and	r5, r5, r3
   14284:	tst	r5, #255	; 0xff
   14288:	beq	14468 <__assert_fail@plt+0x3524>
   1428c:	cmp	r7, fp
   14290:	ldrhi	r3, [sp, #36]	; 0x24
   14294:	movhi	r2, #39	; 0x27
   14298:	strbhi	r2, [r3, fp]
   1429c:	add	r3, fp, #1
   142a0:	cmp	r7, r3
   142a4:	ldrhi	r2, [sp, #36]	; 0x24
   142a8:	movhi	r1, #39	; 0x27
   142ac:	strbhi	r1, [r2, r3]
   142b0:	add	fp, fp, #2
   142b4:	mov	r3, #0
   142b8:	str	r3, [sp, #44]	; 0x2c
   142bc:	b	14468 <__assert_fail@plt+0x3524>
   142c0:	ldr	r3, [sp, #32]
   142c4:	cmp	r3, #0
   142c8:	bne	14b64 <__assert_fail@plt+0x3c20>
   142cc:	mov	r8, r3
   142d0:	mov	r5, r3
   142d4:	b	14278 <__assert_fail@plt+0x3334>
   142d8:	mov	r3, #110	; 0x6e
   142dc:	b	142e4 <__assert_fail@plt+0x33a0>
   142e0:	mov	r3, #116	; 0x74
   142e4:	ldr	r2, [sp, #32]
   142e8:	cmp	sl, #2
   142ec:	movne	r2, #0
   142f0:	andeq	r2, r2, #1
   142f4:	cmp	r2, #0
   142f8:	bne	1431c <__assert_fail@plt+0x33d8>
   142fc:	ldr	r2, [sp, #48]	; 0x30
   14300:	cmp	r2, #0
   14304:	moveq	r8, r2
   14308:	moveq	r5, r2
   1430c:	beq	14394 <__assert_fail@plt+0x3450>
   14310:	mov	r4, r3
   14314:	mov	r8, #0
   14318:	b	143ec <__assert_fail@plt+0x34a8>
   1431c:	mov	r8, sl
   14320:	mov	sl, r7
   14324:	b	14b90 <__assert_fail@plt+0x3c4c>
   14328:	mov	r3, #97	; 0x61
   1432c:	b	142fc <__assert_fail@plt+0x33b8>
   14330:	ldr	r3, [sp, #28]
   14334:	cmn	r3, #1
   14338:	beq	14364 <__assert_fail@plt+0x3420>
   1433c:	ldr	r3, [sp, #28]
   14340:	subs	r3, r3, #1
   14344:	movne	r3, #1
   14348:	cmp	r3, #0
   1434c:	bne	14a14 <__assert_fail@plt+0x3ad0>
   14350:	cmp	r6, #0
   14354:	beq	1437c <__assert_fail@plt+0x3438>
   14358:	mov	r8, #0
   1435c:	mov	r5, r8
   14360:	b	14394 <__assert_fail@plt+0x3450>
   14364:	ldr	r3, [sp, #52]	; 0x34
   14368:	ldrb	r3, [r3, #1]
   1436c:	adds	r3, r3, #0
   14370:	movne	r3, #1
   14374:	b	14348 <__assert_fail@plt+0x3404>
   14378:	mov	r8, #0
   1437c:	ldr	r5, [sp, #32]
   14380:	cmp	sl, #2
   14384:	movne	r5, #0
   14388:	andeq	r5, r5, #1
   1438c:	cmp	r5, #0
   14390:	bne	14544 <__assert_fail@plt+0x3600>
   14394:	ldr	r3, [sp, #68]	; 0x44
   14398:	cmp	sl, #2
   1439c:	orreq	r3, r3, #1
   143a0:	eor	r3, r3, #1
   143a4:	ldr	r2, [sp, #32]
   143a8:	orr	r3, r2, r3
   143ac:	tst	r3, #255	; 0xff
   143b0:	beq	143e0 <__assert_fail@plt+0x349c>
   143b4:	ldr	r3, [sp, #160]	; 0xa0
   143b8:	cmp	r3, #0
   143bc:	beq	143e0 <__assert_fail@plt+0x349c>
   143c0:	lsr	r2, r4, #5
   143c4:	uxtb	r2, r2
   143c8:	and	r3, r4, #31
   143cc:	ldr	r1, [sp, #160]	; 0xa0
   143d0:	ldr	r2, [r1, r2, lsl #2]
   143d4:	lsr	r3, r2, r3
   143d8:	tst	r3, #1
   143dc:	bne	143ec <__assert_fail@plt+0x34a8>
   143e0:	ldr	r3, [sp, #56]	; 0x38
   143e4:	cmp	r3, #0
   143e8:	beq	14278 <__assert_fail@plt+0x3334>
   143ec:	ldr	r3, [sp, #32]
   143f0:	cmp	r3, #0
   143f4:	bne	14c00 <__assert_fail@plt+0x3cbc>
   143f8:	ldr	r3, [sp, #44]	; 0x2c
   143fc:	eor	r3, r3, #1
   14400:	cmp	sl, #2
   14404:	movne	r3, #0
   14408:	andeq	r3, r3, #1
   1440c:	cmp	r3, #0
   14410:	beq	14454 <__assert_fail@plt+0x3510>
   14414:	cmp	r7, fp
   14418:	ldrhi	r2, [sp, #36]	; 0x24
   1441c:	movhi	r1, #39	; 0x27
   14420:	strbhi	r1, [r2, fp]
   14424:	add	r2, fp, #1
   14428:	cmp	r7, r2
   1442c:	ldrhi	r1, [sp, #36]	; 0x24
   14430:	movhi	r0, #36	; 0x24
   14434:	strbhi	r0, [r1, r2]
   14438:	add	r2, fp, #2
   1443c:	cmp	r7, r2
   14440:	ldrhi	r1, [sp, #36]	; 0x24
   14444:	movhi	r0, #39	; 0x27
   14448:	strbhi	r0, [r1, r2]
   1444c:	add	fp, fp, #3
   14450:	str	r3, [sp, #44]	; 0x2c
   14454:	cmp	r7, fp
   14458:	ldrhi	r3, [sp, #36]	; 0x24
   1445c:	movhi	r2, #92	; 0x5c
   14460:	strbhi	r2, [r3, fp]
   14464:	add	fp, fp, #1
   14468:	cmp	fp, r7
   1446c:	ldrcc	r3, [sp, #36]	; 0x24
   14470:	strbcc	r4, [r3, fp]
   14474:	add	fp, fp, #1
   14478:	ldr	r3, [sp, #40]	; 0x28
   1447c:	cmp	r8, #0
   14480:	moveq	r3, #0
   14484:	str	r3, [sp, #40]	; 0x28
   14488:	add	r6, r6, #1
   1448c:	ldr	r3, [sp, #28]
   14490:	cmn	r3, #1
   14494:	beq	14a20 <__assert_fail@plt+0x3adc>
   14498:	ldr	r3, [sp, #28]
   1449c:	subs	r8, r3, r6
   144a0:	movne	r8, #1
   144a4:	cmp	r8, #0
   144a8:	beq	14a34 <__assert_fail@plt+0x3af0>
   144ac:	ldr	r5, [sp, #48]	; 0x30
   144b0:	cmp	sl, #2
   144b4:	moveq	r5, #0
   144b8:	andne	r5, r5, #1
   144bc:	ldr	r3, [sp, #60]	; 0x3c
   144c0:	adds	r9, r3, #0
   144c4:	movne	r9, #1
   144c8:	ands	r2, r5, r9
   144cc:	str	r2, [sp, #56]	; 0x38
   144d0:	beq	13d98 <__assert_fail@plt+0x2e54>
   144d4:	add	r4, r6, r3
   144d8:	ldr	r2, [sp, #28]
   144dc:	cmp	r3, #1
   144e0:	movls	r3, #0
   144e4:	movhi	r3, #1
   144e8:	cmn	r2, #1
   144ec:	movne	r3, #0
   144f0:	cmp	r3, #0
   144f4:	beq	14504 <__assert_fail@plt+0x35c0>
   144f8:	ldr	r0, [sp, #52]	; 0x34
   144fc:	bl	10e6c <strlen@plt>
   14500:	str	r0, [sp, #28]
   14504:	ldr	r3, [sp, #28]
   14508:	cmp	r3, r4
   1450c:	bcc	13d90 <__assert_fail@plt+0x2e4c>
   14510:	ldr	r2, [sp, #60]	; 0x3c
   14514:	ldr	r1, [sp, #72]	; 0x48
   14518:	ldr	r3, [sp, #52]	; 0x34
   1451c:	add	r0, r3, r6
   14520:	bl	10d64 <memcmp@plt>
   14524:	cmp	r0, #0
   14528:	bne	13fb0 <__assert_fail@plt+0x306c>
   1452c:	ldr	r3, [sp, #32]
   14530:	cmp	r3, #0
   14534:	beq	13d98 <__assert_fail@plt+0x2e54>
   14538:	mov	r8, sl
   1453c:	mov	sl, r7
   14540:	b	14b90 <__assert_fail@plt+0x3c4c>
   14544:	mov	r8, sl
   14548:	mov	sl, r7
   1454c:	b	14b90 <__assert_fail@plt+0x3c4c>
   14550:	cmp	sl, #2
   14554:	strne	r8, [sp, #80]	; 0x50
   14558:	movne	r5, #0
   1455c:	bne	14394 <__assert_fail@plt+0x3450>
   14560:	ldr	r3, [sp, #32]
   14564:	cmp	r3, #0
   14568:	bne	14b7c <__assert_fail@plt+0x3c38>
   1456c:	ldr	r2, [sp, #76]	; 0x4c
   14570:	adds	r3, r7, #0
   14574:	movne	r3, #1
   14578:	cmp	r2, #0
   1457c:	movne	r3, #0
   14580:	cmp	r3, #0
   14584:	movne	r3, #0
   14588:	bne	145b8 <__assert_fail@plt+0x3674>
   1458c:	cmp	r7, fp
   14590:	ldrhi	r3, [sp, #36]	; 0x24
   14594:	movhi	r2, #39	; 0x27
   14598:	strbhi	r2, [r3, fp]
   1459c:	add	r3, fp, #1
   145a0:	cmp	r7, r3
   145a4:	ldrhi	r2, [sp, #36]	; 0x24
   145a8:	movhi	r1, #92	; 0x5c
   145ac:	strbhi	r1, [r2, r3]
   145b0:	mov	r3, r7
   145b4:	ldr	r7, [sp, #76]	; 0x4c
   145b8:	add	r2, fp, #2
   145bc:	cmp	r2, r3
   145c0:	ldrcc	r1, [sp, #36]	; 0x24
   145c4:	movcc	r0, #39	; 0x27
   145c8:	strbcc	r0, [r1, r2]
   145cc:	add	fp, fp, #3
   145d0:	ldr	r2, [sp, #32]
   145d4:	mov	r5, r2
   145d8:	str	r8, [sp, #80]	; 0x50
   145dc:	str	r2, [sp, #44]	; 0x2c
   145e0:	str	r7, [sp, #76]	; 0x4c
   145e4:	mov	r7, r3
   145e8:	b	14394 <__assert_fail@plt+0x3450>
   145ec:	ldr	r5, [sp, #84]	; 0x54
   145f0:	cmp	r5, #1
   145f4:	beq	14624 <__assert_fail@plt+0x36e0>
   145f8:	mov	r3, #0
   145fc:	str	r3, [sp, #104]	; 0x68
   14600:	str	r3, [sp, #108]	; 0x6c
   14604:	ldr	r3, [sp, #28]
   14608:	cmn	r3, #1
   1460c:	beq	14658 <__assert_fail@plt+0x3714>
   14610:	mov	r3, #0
   14614:	str	r4, [sp, #88]	; 0x58
   14618:	str	fp, [sp, #92]	; 0x5c
   1461c:	mov	fp, r3
   14620:	b	14780 <__assert_fail@plt+0x383c>
   14624:	bl	10e54 <__ctype_b_loc@plt>
   14628:	ldr	r2, [r0]
   1462c:	lsl	r3, r4, #1
   14630:	ldrh	r8, [r2, r3]
   14634:	lsr	r8, r8, #14
   14638:	and	r8, r8, #1
   1463c:	mov	r2, r5
   14640:	eor	r5, r8, #1
   14644:	ldr	r3, [sp, #48]	; 0x30
   14648:	and	r5, r5, r3
   1464c:	ands	r5, r5, #255	; 0xff
   14650:	beq	14394 <__assert_fail@plt+0x3450>
   14654:	b	14818 <__assert_fail@plt+0x38d4>
   14658:	ldr	r0, [sp, #52]	; 0x34
   1465c:	bl	10e6c <strlen@plt>
   14660:	str	r0, [sp, #28]
   14664:	b	14610 <__assert_fail@plt+0x36cc>
   14668:	mov	r2, fp
   1466c:	mov	r1, r4
   14670:	ldr	r4, [sp, #88]	; 0x58
   14674:	ldr	fp, [sp, #92]	; 0x5c
   14678:	ldr	r0, [sp, #28]
   1467c:	cmp	r0, r5
   14680:	bls	1484c <__assert_fail@plt+0x3908>
   14684:	ldrb	r3, [r1]
   14688:	cmp	r3, #0
   1468c:	beq	14854 <__assert_fail@plt+0x3910>
   14690:	mov	r3, r1
   14694:	add	r2, r2, #1
   14698:	add	r1, r6, r2
   1469c:	cmp	r0, r1
   146a0:	bls	1485c <__assert_fail@plt+0x3918>
   146a4:	ldrb	r1, [r3, #1]!
   146a8:	cmp	r1, #0
   146ac:	bne	14694 <__assert_fail@plt+0x3750>
   146b0:	mov	r8, #0
   146b4:	b	14810 <__assert_fail@plt+0x38cc>
   146b8:	cmp	r4, r5
   146bc:	beq	1475c <__assert_fail@plt+0x3818>
   146c0:	ldrb	r3, [r4, #1]!
   146c4:	sub	r3, r3, #91	; 0x5b
   146c8:	cmp	r3, #33	; 0x21
   146cc:	ldrls	pc, [pc, r3, lsl #2]
   146d0:	b	146b8 <__assert_fail@plt+0x3774>
   146d4:	andeq	r4, r1, r8, lsl #23
   146d8:	andeq	r4, r1, r8, lsl #23
   146dc:			; <UNDEFINED> instruction: 0x000146b8
   146e0:	andeq	r4, r1, r8, lsl #23
   146e4:			; <UNDEFINED> instruction: 0x000146b8
   146e8:	andeq	r4, r1, r8, lsl #23
   146ec:			; <UNDEFINED> instruction: 0x000146b8
   146f0:			; <UNDEFINED> instruction: 0x000146b8
   146f4:			; <UNDEFINED> instruction: 0x000146b8
   146f8:			; <UNDEFINED> instruction: 0x000146b8
   146fc:			; <UNDEFINED> instruction: 0x000146b8
   14700:			; <UNDEFINED> instruction: 0x000146b8
   14704:			; <UNDEFINED> instruction: 0x000146b8
   14708:			; <UNDEFINED> instruction: 0x000146b8
   1470c:			; <UNDEFINED> instruction: 0x000146b8
   14710:			; <UNDEFINED> instruction: 0x000146b8
   14714:			; <UNDEFINED> instruction: 0x000146b8
   14718:			; <UNDEFINED> instruction: 0x000146b8
   1471c:			; <UNDEFINED> instruction: 0x000146b8
   14720:			; <UNDEFINED> instruction: 0x000146b8
   14724:			; <UNDEFINED> instruction: 0x000146b8
   14728:			; <UNDEFINED> instruction: 0x000146b8
   1472c:			; <UNDEFINED> instruction: 0x000146b8
   14730:			; <UNDEFINED> instruction: 0x000146b8
   14734:			; <UNDEFINED> instruction: 0x000146b8
   14738:			; <UNDEFINED> instruction: 0x000146b8
   1473c:			; <UNDEFINED> instruction: 0x000146b8
   14740:			; <UNDEFINED> instruction: 0x000146b8
   14744:			; <UNDEFINED> instruction: 0x000146b8
   14748:			; <UNDEFINED> instruction: 0x000146b8
   1474c:			; <UNDEFINED> instruction: 0x000146b8
   14750:			; <UNDEFINED> instruction: 0x000146b8
   14754:			; <UNDEFINED> instruction: 0x000146b8
   14758:	andeq	r4, r1, r8, lsl #23
   1475c:	ldr	r0, [sp, #100]	; 0x64
   14760:	bl	10dac <iswprint@plt>
   14764:	cmp	r0, #0
   14768:	moveq	r8, #0
   1476c:	add	fp, fp, r9
   14770:	add	r0, sp, #104	; 0x68
   14774:	bl	10d4c <mbsinit@plt>
   14778:	cmp	r0, #0
   1477c:	bne	147f0 <__assert_fail@plt+0x38ac>
   14780:	add	r5, r6, fp
   14784:	ldr	r3, [sp, #52]	; 0x34
   14788:	add	r4, r3, r5
   1478c:	add	r3, sp, #104	; 0x68
   14790:	ldr	r2, [sp, #28]
   14794:	sub	r2, r2, r5
   14798:	mov	r1, r4
   1479c:	add	r0, sp, #100	; 0x64
   147a0:	bl	16890 <__assert_fail@plt+0x594c>
   147a4:	subs	r9, r0, #0
   147a8:	beq	14864 <__assert_fail@plt+0x3920>
   147ac:	cmn	r9, #1
   147b0:	beq	14800 <__assert_fail@plt+0x38bc>
   147b4:	cmn	r9, #2
   147b8:	beq	14668 <__assert_fail@plt+0x3724>
   147bc:	ldr	r3, [sp, #32]
   147c0:	cmp	sl, #2
   147c4:	movne	r3, #0
   147c8:	andeq	r3, r3, #1
   147cc:	cmp	r3, #0
   147d0:	beq	1475c <__assert_fail@plt+0x3818>
   147d4:	cmp	r9, #1
   147d8:	bls	1475c <__assert_fail@plt+0x3818>
   147dc:	sub	r3, r9, #1
   147e0:	add	r5, r3, r5
   147e4:	ldr	r3, [sp, #52]	; 0x34
   147e8:	add	r5, r3, r5
   147ec:	b	146c0 <__assert_fail@plt+0x377c>
   147f0:	ldr	r4, [sp, #88]	; 0x58
   147f4:	mov	r2, fp
   147f8:	ldr	fp, [sp, #92]	; 0x5c
   147fc:	b	14810 <__assert_fail@plt+0x38cc>
   14800:	ldr	r4, [sp, #88]	; 0x58
   14804:	mov	r2, fp
   14808:	ldr	fp, [sp, #92]	; 0x5c
   1480c:	mov	r8, #0
   14810:	cmp	r2, #1
   14814:	bls	14640 <__assert_fail@plt+0x36fc>
   14818:	add	r1, r6, r2
   1481c:	ldr	ip, [sp, #64]	; 0x40
   14820:	mov	r5, #0
   14824:	eor	r3, r8, #1
   14828:	ldr	r2, [sp, #48]	; 0x30
   1482c:	and	r3, r3, r2
   14830:	uxtb	r3, r3
   14834:	ldr	r9, [sp, #32]
   14838:	ldr	lr, [sp, #44]	; 0x2c
   1483c:	ldr	r2, [sp, #56]	; 0x38
   14840:	str	r8, [sp, #56]	; 0x38
   14844:	ldr	r0, [sp, #36]	; 0x24
   14848:	b	148e4 <__assert_fail@plt+0x39a0>
   1484c:	mov	r8, #0
   14850:	b	14810 <__assert_fail@plt+0x38cc>
   14854:	mov	r8, #0
   14858:	b	14810 <__assert_fail@plt+0x38cc>
   1485c:	mov	r8, #0
   14860:	b	14810 <__assert_fail@plt+0x38cc>
   14864:	ldr	r4, [sp, #88]	; 0x58
   14868:	mov	r2, fp
   1486c:	ldr	fp, [sp, #92]	; 0x5c
   14870:	b	14810 <__assert_fail@plt+0x38cc>
   14874:	cmp	r2, #0
   14878:	beq	1488c <__assert_fail@plt+0x3948>
   1487c:	cmp	r7, fp
   14880:	movhi	r2, #92	; 0x5c
   14884:	strbhi	r2, [r0, fp]
   14888:	add	fp, fp, #1
   1488c:	add	r8, r6, #1
   14890:	cmp	r1, r8
   14894:	bls	1499c <__assert_fail@plt+0x3a58>
   14898:	eor	r2, r5, #1
   1489c:	and	r2, r2, lr
   148a0:	ands	r2, r2, #255	; 0xff
   148a4:	beq	149b8 <__assert_fail@plt+0x3a74>
   148a8:	cmp	r7, fp
   148ac:	movhi	r2, #39	; 0x27
   148b0:	strbhi	r2, [r0, fp]
   148b4:	add	r2, fp, #1
   148b8:	cmp	r7, r2
   148bc:	movhi	lr, #39	; 0x27
   148c0:	strbhi	lr, [r0, r2]
   148c4:	add	fp, fp, #2
   148c8:	mov	r6, r8
   148cc:	mov	r2, r3
   148d0:	mov	lr, r3
   148d4:	cmp	r7, fp
   148d8:	strbhi	r4, [r0, fp]
   148dc:	add	fp, fp, #1
   148e0:	ldrb	r4, [ip, #1]!
   148e4:	cmp	r3, #0
   148e8:	beq	14874 <__assert_fail@plt+0x3930>
   148ec:	cmp	r9, #0
   148f0:	bne	14bf4 <__assert_fail@plt+0x3cb0>
   148f4:	eor	r5, lr, #1
   148f8:	cmp	sl, #2
   148fc:	movne	r5, #0
   14900:	andeq	r5, r5, #1
   14904:	cmp	r5, #0
   14908:	beq	14940 <__assert_fail@plt+0x39fc>
   1490c:	cmp	r7, fp
   14910:	movhi	lr, #39	; 0x27
   14914:	strbhi	lr, [r0, fp]
   14918:	add	lr, fp, #1
   1491c:	cmp	r7, lr
   14920:	movhi	r8, #36	; 0x24
   14924:	strbhi	r8, [r0, lr]
   14928:	add	lr, fp, #2
   1492c:	cmp	r7, lr
   14930:	movhi	r8, #39	; 0x27
   14934:	strbhi	r8, [r0, lr]
   14938:	add	fp, fp, #3
   1493c:	mov	lr, r5
   14940:	cmp	r7, fp
   14944:	movhi	r5, #92	; 0x5c
   14948:	strbhi	r5, [r0, fp]
   1494c:	add	r5, fp, #1
   14950:	cmp	r7, r5
   14954:	lsrhi	r8, r4, #6
   14958:	addhi	r8, r8, #48	; 0x30
   1495c:	strbhi	r8, [r0, r5]
   14960:	add	r8, fp, #2
   14964:	cmp	r7, r8
   14968:	lsrhi	r5, r4, #3
   1496c:	andhi	r5, r5, #7
   14970:	addhi	r5, r5, #48	; 0x30
   14974:	strbhi	r5, [r0, r8]
   14978:	add	fp, fp, #3
   1497c:	and	r4, r4, #7
   14980:	add	r4, r4, #48	; 0x30
   14984:	add	r5, r6, #1
   14988:	cmp	r1, r5
   1498c:	bls	149a8 <__assert_fail@plt+0x3a64>
   14990:	mov	r6, r5
   14994:	mov	r5, r3
   14998:	b	148d4 <__assert_fail@plt+0x3990>
   1499c:	str	lr, [sp, #44]	; 0x2c
   149a0:	ldr	r8, [sp, #56]	; 0x38
   149a4:	b	14278 <__assert_fail@plt+0x3334>
   149a8:	str	lr, [sp, #44]	; 0x2c
   149ac:	ldr	r8, [sp, #56]	; 0x38
   149b0:	mov	r5, r3
   149b4:	b	14278 <__assert_fail@plt+0x3334>
   149b8:	mov	r6, r8
   149bc:	b	148d4 <__assert_fail@plt+0x3990>
   149c0:	mov	r5, #0
   149c4:	b	14394 <__assert_fail@plt+0x3450>
   149c8:	mov	r8, r5
   149cc:	ldr	r5, [sp, #48]	; 0x30
   149d0:	mov	r4, #48	; 0x30
   149d4:	b	14394 <__assert_fail@plt+0x3450>
   149d8:	ldr	r8, [sp, #32]
   149dc:	mov	r4, #48	; 0x30
   149e0:	b	14394 <__assert_fail@plt+0x3450>
   149e4:	ldr	r8, [sp, #32]
   149e8:	mov	r4, #48	; 0x30
   149ec:	b	14394 <__assert_fail@plt+0x3450>
   149f0:	mov	r8, #0
   149f4:	mov	r5, r8
   149f8:	b	14394 <__assert_fail@plt+0x3450>
   149fc:	mov	r8, #0
   14a00:	mov	r5, r8
   14a04:	b	14394 <__assert_fail@plt+0x3450>
   14a08:	mov	r8, #0
   14a0c:	mov	r5, r8
   14a10:	b	14394 <__assert_fail@plt+0x3450>
   14a14:	mov	r8, #0
   14a18:	mov	r5, r8
   14a1c:	b	14394 <__assert_fail@plt+0x3450>
   14a20:	ldr	r3, [sp, #52]	; 0x34
   14a24:	ldrb	r8, [r3, r6]
   14a28:	adds	r8, r8, #0
   14a2c:	movne	r8, #1
   14a30:	b	144a4 <__assert_fail@plt+0x3560>
   14a34:	cmp	sl, #2
   14a38:	movne	r3, #0
   14a3c:	moveq	r3, #1
   14a40:	ldr	r1, [sp, #32]
   14a44:	mov	r2, r1
   14a48:	and	r2, r2, r3
   14a4c:	cmp	fp, #0
   14a50:	movne	r2, #0
   14a54:	andeq	r2, r2, #1
   14a58:	cmp	r2, #0
   14a5c:	bne	14c0c <__assert_fail@plt+0x3cc8>
   14a60:	eor	r2, r1, #1
   14a64:	and	r3, r3, r2
   14a68:	ldr	r1, [sp, #80]	; 0x50
   14a6c:	tst	r1, r3
   14a70:	beq	14ae8 <__assert_fail@plt+0x3ba4>
   14a74:	ldr	r3, [sp, #40]	; 0x28
   14a78:	cmp	r3, #0
   14a7c:	bne	14aa4 <__assert_fail@plt+0x3b60>
   14a80:	ldr	r1, [sp, #76]	; 0x4c
   14a84:	clz	r3, r7
   14a88:	lsr	r3, r3, #5
   14a8c:	cmp	r1, #0
   14a90:	moveq	r3, #0
   14a94:	cmp	r3, #0
   14a98:	beq	14ae8 <__assert_fail@plt+0x3ba4>
   14a9c:	ldr	r7, [sp, #76]	; 0x4c
   14aa0:	b	13b38 <__assert_fail@plt+0x2bf4>
   14aa4:	ldr	r3, [sp, #168]	; 0xa8
   14aa8:	str	r3, [sp, #16]
   14aac:	ldr	r3, [sp, #164]	; 0xa4
   14ab0:	str	r3, [sp, #12]
   14ab4:	ldr	r3, [sp, #160]	; 0xa0
   14ab8:	str	r3, [sp, #8]
   14abc:	ldr	r3, [sp, #156]	; 0x9c
   14ac0:	str	r3, [sp, #4]
   14ac4:	mov	r3, #5
   14ac8:	str	r3, [sp]
   14acc:	ldr	r3, [sp, #28]
   14ad0:	ldr	r2, [sp, #52]	; 0x34
   14ad4:	ldr	r1, [sp, #76]	; 0x4c
   14ad8:	ldr	r0, [sp, #36]	; 0x24
   14adc:	bl	13ad8 <__assert_fail@plt+0x2b94>
   14ae0:	mov	fp, r0
   14ae4:	b	14be8 <__assert_fail@plt+0x3ca4>
   14ae8:	mov	sl, r7
   14aec:	ldr	r3, [sp, #72]	; 0x48
   14af0:	cmp	r3, #0
   14af4:	moveq	r2, #0
   14af8:	andne	r2, r2, #1
   14afc:	cmp	r2, #0
   14b00:	beq	14b30 <__assert_fail@plt+0x3bec>
   14b04:	mov	r2, r3
   14b08:	ldrb	r3, [r3]
   14b0c:	cmp	r3, #0
   14b10:	beq	14b30 <__assert_fail@plt+0x3bec>
   14b14:	ldr	r1, [sp, #36]	; 0x24
   14b18:	cmp	sl, fp
   14b1c:	strbhi	r3, [r1, fp]
   14b20:	add	fp, fp, #1
   14b24:	ldrb	r3, [r2, #1]!
   14b28:	cmp	r3, #0
   14b2c:	bne	14b18 <__assert_fail@plt+0x3bd4>
   14b30:	cmp	sl, fp
   14b34:	movhi	r3, #0
   14b38:	ldrhi	r2, [sp, #36]	; 0x24
   14b3c:	strbhi	r3, [r2, fp]
   14b40:	b	14be8 <__assert_fail@plt+0x3ca4>
   14b44:	mov	r8, sl
   14b48:	mov	sl, r7
   14b4c:	ldr	r3, [sp, #32]
   14b50:	str	r3, [sp, #48]	; 0x30
   14b54:	b	14b90 <__assert_fail@plt+0x3c4c>
   14b58:	mov	r8, sl
   14b5c:	mov	sl, r7
   14b60:	b	14b90 <__assert_fail@plt+0x3c4c>
   14b64:	mov	r8, sl
   14b68:	mov	sl, r7
   14b6c:	b	14b90 <__assert_fail@plt+0x3c4c>
   14b70:	andeq	r8, r1, r8, asr #9
   14b74:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14b78:	andeq	r8, r1, ip, asr #9
   14b7c:	mov	r8, sl
   14b80:	mov	sl, r7
   14b84:	b	14b90 <__assert_fail@plt+0x3c4c>
   14b88:	mov	r8, sl
   14b8c:	mov	sl, r7
   14b90:	ldr	r3, [sp, #48]	; 0x30
   14b94:	cmp	r8, #2
   14b98:	movne	r3, #0
   14b9c:	andeq	r3, r3, #1
   14ba0:	cmp	r3, #0
   14ba4:	movne	r8, #4
   14ba8:	ldr	r3, [sp, #168]	; 0xa8
   14bac:	str	r3, [sp, #16]
   14bb0:	ldr	r3, [sp, #164]	; 0xa4
   14bb4:	str	r3, [sp, #12]
   14bb8:	mov	r3, #0
   14bbc:	str	r3, [sp, #8]
   14bc0:	ldr	r3, [sp, #156]	; 0x9c
   14bc4:	bic	r3, r3, #2
   14bc8:	str	r3, [sp, #4]
   14bcc:	str	r8, [sp]
   14bd0:	ldr	r3, [sp, #28]
   14bd4:	ldr	r2, [sp, #52]	; 0x34
   14bd8:	mov	r1, sl
   14bdc:	ldr	r0, [sp, #36]	; 0x24
   14be0:	bl	13ad8 <__assert_fail@plt+0x2b94>
   14be4:	mov	fp, r0
   14be8:	mov	r0, fp
   14bec:	add	sp, sp, #116	; 0x74
   14bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bf4:	mov	r8, sl
   14bf8:	mov	sl, r7
   14bfc:	b	14b90 <__assert_fail@plt+0x3c4c>
   14c00:	mov	r8, sl
   14c04:	mov	sl, r7
   14c08:	b	14b90 <__assert_fail@plt+0x3c4c>
   14c0c:	mov	r8, sl
   14c10:	mov	sl, r7
   14c14:	b	14b90 <__assert_fail@plt+0x3c4c>
   14c18:	mov	r8, sl
   14c1c:	mov	sl, r7
   14c20:	b	14ba8 <__assert_fail@plt+0x3c64>
   14c24:	mov	r3, #1
   14c28:	str	r3, [sp, #32]
   14c2c:	str	r3, [sp, #48]	; 0x30
   14c30:	str	r3, [sp, #60]	; 0x3c
   14c34:	ldr	r3, [pc, #-196]	; 14b78 <__assert_fail@plt+0x3c34>
   14c38:	str	r3, [sp, #72]	; 0x48
   14c3c:	mov	fp, #0
   14c40:	mov	sl, #5
   14c44:	b	13b94 <__assert_fail@plt+0x2c50>
   14c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c4c:	sub	sp, sp, #52	; 0x34
   14c50:	mov	r5, r0
   14c54:	str	r1, [sp, #24]
   14c58:	str	r2, [sp, #28]
   14c5c:	mov	r4, r3
   14c60:	bl	10e84 <__errno_location@plt>
   14c64:	str	r0, [sp, #32]
   14c68:	ldr	r3, [r0]
   14c6c:	str	r3, [sp, #36]	; 0x24
   14c70:	ldr	r3, [pc, #396]	; 14e04 <__assert_fail@plt+0x3ec0>
   14c74:	ldr	r6, [r3]
   14c78:	cmn	r5, #-2147483647	; 0x80000001
   14c7c:	movne	r3, #0
   14c80:	moveq	r3, #1
   14c84:	orrs	r3, r3, r5, lsr #31
   14c88:	bne	14dc8 <__assert_fail@plt+0x3e84>
   14c8c:	ldr	r3, [pc, #368]	; 14e04 <__assert_fail@plt+0x3ec0>
   14c90:	ldr	r2, [r3, #4]
   14c94:	cmp	r5, r2
   14c98:	blt	14d00 <__assert_fail@plt+0x3dbc>
   14c9c:	str	r2, [sp, #44]	; 0x2c
   14ca0:	add	r3, r3, #8
   14ca4:	cmp	r6, r3
   14ca8:	beq	14dcc <__assert_fail@plt+0x3e88>
   14cac:	sub	r2, r5, r2
   14cb0:	mov	r3, #8
   14cb4:	str	r3, [sp]
   14cb8:	mvn	r3, #-2147483648	; 0x80000000
   14cbc:	add	r2, r2, #1
   14cc0:	add	r1, sp, #44	; 0x2c
   14cc4:	mov	r0, r6
   14cc8:	bl	15bc0 <__assert_fail@plt+0x4c7c>
   14ccc:	mov	r6, r0
   14cd0:	ldr	r3, [pc, #300]	; 14e04 <__assert_fail@plt+0x3ec0>
   14cd4:	str	r0, [r3]
   14cd8:	ldr	r7, [pc, #292]	; 14e04 <__assert_fail@plt+0x3ec0>
   14cdc:	ldr	r0, [r7, #4]
   14ce0:	ldr	r2, [sp, #44]	; 0x2c
   14ce4:	sub	r2, r2, r0
   14ce8:	lsl	r2, r2, #3
   14cec:	mov	r1, #0
   14cf0:	add	r0, r6, r0, lsl #3
   14cf4:	bl	10ea8 <memset@plt>
   14cf8:	ldr	r3, [sp, #44]	; 0x2c
   14cfc:	str	r3, [r7, #4]
   14d00:	add	fp, r6, r5, lsl #3
   14d04:	ldr	r8, [r6, r5, lsl #3]
   14d08:	ldr	r7, [fp, #4]
   14d0c:	ldr	r9, [r4, #4]
   14d10:	orr	r9, r9, #1
   14d14:	add	sl, r4, #8
   14d18:	ldr	r3, [r4, #44]	; 0x2c
   14d1c:	str	r3, [sp, #16]
   14d20:	ldr	r3, [r4, #40]	; 0x28
   14d24:	str	r3, [sp, #12]
   14d28:	str	sl, [sp, #8]
   14d2c:	str	r9, [sp, #4]
   14d30:	ldr	r3, [r4]
   14d34:	str	r3, [sp]
   14d38:	ldr	r3, [sp, #28]
   14d3c:	ldr	r2, [sp, #24]
   14d40:	mov	r1, r8
   14d44:	mov	r0, r7
   14d48:	bl	13ad8 <__assert_fail@plt+0x2b94>
   14d4c:	cmp	r8, r0
   14d50:	bhi	14db0 <__assert_fail@plt+0x3e6c>
   14d54:	add	r8, r0, #1
   14d58:	str	r8, [r6, r5, lsl #3]
   14d5c:	ldr	r3, [pc, #164]	; 14e08 <__assert_fail@plt+0x3ec4>
   14d60:	cmp	r7, r3
   14d64:	beq	14d70 <__assert_fail@plt+0x3e2c>
   14d68:	mov	r0, r7
   14d6c:	bl	13860 <__assert_fail@plt+0x291c>
   14d70:	mov	r0, r8
   14d74:	bl	15a3c <__assert_fail@plt+0x4af8>
   14d78:	mov	r7, r0
   14d7c:	str	r0, [fp, #4]
   14d80:	ldr	r3, [r4, #44]	; 0x2c
   14d84:	str	r3, [sp, #16]
   14d88:	ldr	r3, [r4, #40]	; 0x28
   14d8c:	str	r3, [sp, #12]
   14d90:	str	sl, [sp, #8]
   14d94:	str	r9, [sp, #4]
   14d98:	ldr	r3, [r4]
   14d9c:	str	r3, [sp]
   14da0:	ldr	r3, [sp, #28]
   14da4:	ldr	r2, [sp, #24]
   14da8:	mov	r1, r8
   14dac:	bl	13ad8 <__assert_fail@plt+0x2b94>
   14db0:	ldr	r3, [sp, #32]
   14db4:	ldr	r2, [sp, #36]	; 0x24
   14db8:	str	r2, [r3]
   14dbc:	mov	r0, r7
   14dc0:	add	sp, sp, #52	; 0x34
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dc8:	bl	10f2c <abort@plt>
   14dcc:	sub	r2, r5, r2
   14dd0:	mov	r3, #8
   14dd4:	str	r3, [sp]
   14dd8:	mvn	r3, #-2147483648	; 0x80000000
   14ddc:	add	r2, r2, #1
   14de0:	add	r1, sp, #44	; 0x2c
   14de4:	mov	r0, #0
   14de8:	bl	15bc0 <__assert_fail@plt+0x4c7c>
   14dec:	mov	r6, r0
   14df0:	ldr	r3, [pc, #12]	; 14e04 <__assert_fail@plt+0x3ec0>
   14df4:	str	r0, [r3], #8
   14df8:	ldm	r3, {r0, r1}
   14dfc:	stm	r6, {r0, r1}
   14e00:	b	14cd8 <__assert_fail@plt+0x3d94>
   14e04:	strdeq	r9, [r2], -r8
   14e08:	andeq	fp, r2, r0, ror r4
   14e0c:	push	{r4, r5, r6, lr}
   14e10:	mov	r4, r0
   14e14:	bl	10e84 <__errno_location@plt>
   14e18:	mov	r5, r0
   14e1c:	ldr	r6, [r0]
   14e20:	cmp	r4, #0
   14e24:	ldr	r3, [pc, #20]	; 14e40 <__assert_fail@plt+0x3efc>
   14e28:	moveq	r4, r3
   14e2c:	mov	r1, #48	; 0x30
   14e30:	mov	r0, r4
   14e34:	bl	15f28 <__assert_fail@plt+0x4fe4>
   14e38:	str	r6, [r5]
   14e3c:	pop	{r4, r5, r6, pc}
   14e40:	andeq	fp, r2, r0, ror r5
   14e44:	subs	r3, r0, #0
   14e48:	ldr	r2, [pc, #8]	; 14e58 <__assert_fail@plt+0x3f14>
   14e4c:	moveq	r3, r2
   14e50:	ldr	r0, [r3]
   14e54:	bx	lr
   14e58:	andeq	fp, r2, r0, ror r5
   14e5c:	subs	r3, r0, #0
   14e60:	ldr	r2, [pc, #8]	; 14e70 <__assert_fail@plt+0x3f2c>
   14e64:	moveq	r3, r2
   14e68:	str	r1, [r3]
   14e6c:	bx	lr
   14e70:	andeq	fp, r2, r0, ror r5
   14e74:	push	{lr}		; (str lr, [sp, #-4]!)
   14e78:	subs	r3, r0, #0
   14e7c:	ldr	r0, [pc, #44]	; 14eb0 <__assert_fail@plt+0x3f6c>
   14e80:	moveq	r3, r0
   14e84:	add	r3, r3, #8
   14e88:	lsr	lr, r1, #5
   14e8c:	and	r1, r1, #31
   14e90:	ldr	ip, [r3, lr, lsl #2]
   14e94:	lsr	r0, ip, r1
   14e98:	eor	r2, r2, r0
   14e9c:	and	r2, r2, #1
   14ea0:	eor	r1, ip, r2, lsl r1
   14ea4:	str	r1, [r3, lr, lsl #2]
   14ea8:	and	r0, r0, #1
   14eac:	pop	{pc}		; (ldr pc, [sp], #4)
   14eb0:	andeq	fp, r2, r0, ror r5
   14eb4:	subs	r3, r0, #0
   14eb8:	ldr	r2, [pc, #12]	; 14ecc <__assert_fail@plt+0x3f88>
   14ebc:	moveq	r3, r2
   14ec0:	ldr	r0, [r3, #4]
   14ec4:	str	r1, [r3, #4]
   14ec8:	bx	lr
   14ecc:	andeq	fp, r2, r0, ror r5
   14ed0:	subs	r3, r0, #0
   14ed4:	ldr	r0, [pc, #40]	; 14f04 <__assert_fail@plt+0x3fc0>
   14ed8:	moveq	r3, r0
   14edc:	mov	r0, #10
   14ee0:	str	r0, [r3]
   14ee4:	cmp	r2, #0
   14ee8:	cmpne	r1, #0
   14eec:	beq	14efc <__assert_fail@plt+0x3fb8>
   14ef0:	str	r1, [r3, #40]	; 0x28
   14ef4:	str	r2, [r3, #44]	; 0x2c
   14ef8:	bx	lr
   14efc:	push	{r4, lr}
   14f00:	bl	10f2c <abort@plt>
   14f04:	andeq	fp, r2, r0, ror r5
   14f08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f0c:	sub	sp, sp, #24
   14f10:	mov	r7, r0
   14f14:	mov	r8, r1
   14f18:	mov	r9, r2
   14f1c:	mov	sl, r3
   14f20:	ldr	r4, [sp, #56]	; 0x38
   14f24:	cmp	r4, #0
   14f28:	ldr	r3, [pc, #84]	; 14f84 <__assert_fail@plt+0x4040>
   14f2c:	moveq	r4, r3
   14f30:	bl	10e84 <__errno_location@plt>
   14f34:	mov	r5, r0
   14f38:	ldr	r6, [r0]
   14f3c:	ldr	r3, [r4, #44]	; 0x2c
   14f40:	str	r3, [sp, #16]
   14f44:	ldr	r3, [r4, #40]	; 0x28
   14f48:	str	r3, [sp, #12]
   14f4c:	add	r3, r4, #8
   14f50:	str	r3, [sp, #8]
   14f54:	ldr	r3, [r4, #4]
   14f58:	str	r3, [sp, #4]
   14f5c:	ldr	r3, [r4]
   14f60:	str	r3, [sp]
   14f64:	mov	r3, sl
   14f68:	mov	r2, r9
   14f6c:	mov	r1, r8
   14f70:	mov	r0, r7
   14f74:	bl	13ad8 <__assert_fail@plt+0x2b94>
   14f78:	str	r6, [r5]
   14f7c:	add	sp, sp, #24
   14f80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f84:	andeq	fp, r2, r0, ror r5
   14f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f8c:	sub	sp, sp, #44	; 0x2c
   14f90:	str	r0, [sp, #28]
   14f94:	str	r1, [sp, #32]
   14f98:	mov	r6, r2
   14f9c:	subs	r4, r3, #0
   14fa0:	ldr	r3, [pc, #172]	; 15054 <__assert_fail@plt+0x4110>
   14fa4:	moveq	r4, r3
   14fa8:	bl	10e84 <__errno_location@plt>
   14fac:	mov	r7, r0
   14fb0:	ldr	fp, [r0]
   14fb4:	ldr	r5, [r4, #4]
   14fb8:	cmp	r6, #0
   14fbc:	orreq	r5, r5, #1
   14fc0:	add	r9, r4, #8
   14fc4:	ldr	r3, [r4, #44]	; 0x2c
   14fc8:	str	r3, [sp, #16]
   14fcc:	ldr	r3, [r4, #40]	; 0x28
   14fd0:	str	r3, [sp, #12]
   14fd4:	str	r9, [sp, #8]
   14fd8:	str	r5, [sp, #4]
   14fdc:	ldr	r3, [r4]
   14fe0:	str	r3, [sp]
   14fe4:	ldr	r3, [sp, #32]
   14fe8:	ldr	r2, [sp, #28]
   14fec:	mov	r1, #0
   14ff0:	mov	r0, r1
   14ff4:	bl	13ad8 <__assert_fail@plt+0x2b94>
   14ff8:	mov	sl, r0
   14ffc:	add	r8, r0, #1
   15000:	mov	r0, r8
   15004:	bl	15a3c <__assert_fail@plt+0x4af8>
   15008:	str	r0, [sp, #36]	; 0x24
   1500c:	ldr	r3, [r4, #44]	; 0x2c
   15010:	str	r3, [sp, #16]
   15014:	ldr	r3, [r4, #40]	; 0x28
   15018:	str	r3, [sp, #12]
   1501c:	str	r9, [sp, #8]
   15020:	str	r5, [sp, #4]
   15024:	ldr	r3, [r4]
   15028:	str	r3, [sp]
   1502c:	ldr	r3, [sp, #32]
   15030:	ldr	r2, [sp, #28]
   15034:	mov	r1, r8
   15038:	bl	13ad8 <__assert_fail@plt+0x2b94>
   1503c:	str	fp, [r7]
   15040:	cmp	r6, #0
   15044:	strne	sl, [r6]
   15048:	ldr	r0, [sp, #36]	; 0x24
   1504c:	add	sp, sp, #44	; 0x2c
   15050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15054:	andeq	fp, r2, r0, ror r5
   15058:	push	{r4, lr}
   1505c:	mov	r3, r2
   15060:	mov	r2, #0
   15064:	bl	14f88 <__assert_fail@plt+0x4044>
   15068:	pop	{r4, pc}
   1506c:	push	{r4, r5, r6, r7, r8, lr}
   15070:	ldr	r3, [pc, #140]	; 15104 <__assert_fail@plt+0x41c0>
   15074:	ldr	r7, [r3]
   15078:	ldr	r3, [r3, #4]
   1507c:	cmp	r3, #1
   15080:	ble	150ac <__assert_fail@plt+0x4168>
   15084:	mov	r5, r7
   15088:	mov	r4, #1
   1508c:	ldr	r6, [pc, #112]	; 15104 <__assert_fail@plt+0x41c0>
   15090:	ldr	r0, [r5, #12]
   15094:	bl	13860 <__assert_fail@plt+0x291c>
   15098:	add	r4, r4, #1
   1509c:	add	r5, r5, #8
   150a0:	ldr	r3, [r6, #4]
   150a4:	cmp	r3, r4
   150a8:	bgt	15090 <__assert_fail@plt+0x414c>
   150ac:	ldr	r0, [r7, #4]
   150b0:	ldr	r3, [pc, #80]	; 15108 <__assert_fail@plt+0x41c4>
   150b4:	cmp	r0, r3
   150b8:	beq	150d4 <__assert_fail@plt+0x4190>
   150bc:	bl	13860 <__assert_fail@plt+0x291c>
   150c0:	ldr	r3, [pc, #60]	; 15104 <__assert_fail@plt+0x41c0>
   150c4:	mov	r2, #256	; 0x100
   150c8:	str	r2, [r3, #8]
   150cc:	ldr	r2, [pc, #52]	; 15108 <__assert_fail@plt+0x41c4>
   150d0:	str	r2, [r3, #12]
   150d4:	ldr	r3, [pc, #48]	; 1510c <__assert_fail@plt+0x41c8>
   150d8:	cmp	r7, r3
   150dc:	beq	150f4 <__assert_fail@plt+0x41b0>
   150e0:	mov	r0, r7
   150e4:	bl	13860 <__assert_fail@plt+0x291c>
   150e8:	ldr	r3, [pc, #20]	; 15104 <__assert_fail@plt+0x41c0>
   150ec:	add	r2, r3, #8
   150f0:	str	r2, [r3]
   150f4:	mov	r2, #1
   150f8:	ldr	r3, [pc, #4]	; 15104 <__assert_fail@plt+0x41c0>
   150fc:	str	r2, [r3, #4]
   15100:	pop	{r4, r5, r6, r7, r8, pc}
   15104:	strdeq	r9, [r2], -r8
   15108:	andeq	fp, r2, r0, ror r4
   1510c:	andeq	r9, r2, r0, lsl #2
   15110:	push	{r4, lr}
   15114:	ldr	r3, [pc, #8]	; 15124 <__assert_fail@plt+0x41e0>
   15118:	mvn	r2, #0
   1511c:	bl	14c48 <__assert_fail@plt+0x3d04>
   15120:	pop	{r4, pc}
   15124:	andeq	fp, r2, r0, ror r5
   15128:	push	{r4, lr}
   1512c:	ldr	r3, [pc, #4]	; 15138 <__assert_fail@plt+0x41f4>
   15130:	bl	14c48 <__assert_fail@plt+0x3d04>
   15134:	pop	{r4, pc}
   15138:	andeq	fp, r2, r0, ror r5
   1513c:	push	{r4, lr}
   15140:	mov	r1, r0
   15144:	mov	r0, #0
   15148:	bl	15110 <__assert_fail@plt+0x41cc>
   1514c:	pop	{r4, pc}
   15150:	push	{r4, lr}
   15154:	mov	r2, r1
   15158:	mov	r1, r0
   1515c:	mov	r0, #0
   15160:	bl	15128 <__assert_fail@plt+0x41e4>
   15164:	pop	{r4, pc}
   15168:	push	{r4, r5, lr}
   1516c:	sub	sp, sp, #52	; 0x34
   15170:	mov	r4, r0
   15174:	mov	r5, r2
   15178:	mov	r0, sp
   1517c:	bl	13970 <__assert_fail@plt+0x2a2c>
   15180:	mov	r3, sp
   15184:	mvn	r2, #0
   15188:	mov	r1, r5
   1518c:	mov	r0, r4
   15190:	bl	14c48 <__assert_fail@plt+0x3d04>
   15194:	add	sp, sp, #52	; 0x34
   15198:	pop	{r4, r5, pc}
   1519c:	push	{r4, r5, r6, lr}
   151a0:	sub	sp, sp, #48	; 0x30
   151a4:	mov	r4, r0
   151a8:	mov	r5, r2
   151ac:	mov	r6, r3
   151b0:	mov	r0, sp
   151b4:	bl	13970 <__assert_fail@plt+0x2a2c>
   151b8:	mov	r3, sp
   151bc:	mov	r2, r6
   151c0:	mov	r1, r5
   151c4:	mov	r0, r4
   151c8:	bl	14c48 <__assert_fail@plt+0x3d04>
   151cc:	add	sp, sp, #48	; 0x30
   151d0:	pop	{r4, r5, r6, pc}
   151d4:	push	{r4, lr}
   151d8:	mov	r2, r1
   151dc:	mov	r1, r0
   151e0:	mov	r0, #0
   151e4:	bl	15168 <__assert_fail@plt+0x4224>
   151e8:	pop	{r4, pc}
   151ec:	push	{r4, lr}
   151f0:	mov	r3, r2
   151f4:	mov	r2, r1
   151f8:	mov	r1, r0
   151fc:	mov	r0, #0
   15200:	bl	1519c <__assert_fail@plt+0x4258>
   15204:	pop	{r4, pc}
   15208:	push	{r4, r5, r6, lr}
   1520c:	sub	sp, sp, #48	; 0x30
   15210:	mov	r4, r0
   15214:	mov	r5, r1
   15218:	mov	r6, r2
   1521c:	mov	ip, sp
   15220:	ldr	lr, [pc, #64]	; 15268 <__assert_fail@plt+0x4324>
   15224:	ldm	lr!, {r0, r1, r2, r3}
   15228:	stmia	ip!, {r0, r1, r2, r3}
   1522c:	ldm	lr!, {r0, r1, r2, r3}
   15230:	stmia	ip!, {r0, r1, r2, r3}
   15234:	ldm	lr, {r0, r1, r2, r3}
   15238:	stm	ip, {r0, r1, r2, r3}
   1523c:	mov	r2, #1
   15240:	mov	r1, r6
   15244:	mov	r0, sp
   15248:	bl	14e74 <__assert_fail@plt+0x3f30>
   1524c:	mov	r3, sp
   15250:	mov	r2, r5
   15254:	mov	r1, r4
   15258:	mov	r0, #0
   1525c:	bl	14c48 <__assert_fail@plt+0x3d04>
   15260:	add	sp, sp, #48	; 0x30
   15264:	pop	{r4, r5, r6, pc}
   15268:	andeq	fp, r2, r0, ror r5
   1526c:	push	{r4, lr}
   15270:	mov	r2, r1
   15274:	mvn	r1, #0
   15278:	bl	15208 <__assert_fail@plt+0x42c4>
   1527c:	pop	{r4, pc}
   15280:	push	{r4, lr}
   15284:	mov	r1, #58	; 0x3a
   15288:	bl	1526c <__assert_fail@plt+0x4328>
   1528c:	pop	{r4, pc}
   15290:	push	{r4, lr}
   15294:	mov	r2, #58	; 0x3a
   15298:	bl	15208 <__assert_fail@plt+0x42c4>
   1529c:	pop	{r4, pc}
   152a0:	push	{r4, r5, lr}
   152a4:	sub	sp, sp, #100	; 0x64
   152a8:	mov	r4, r0
   152ac:	mov	r5, r2
   152b0:	mov	r0, sp
   152b4:	bl	13970 <__assert_fail@plt+0x2a2c>
   152b8:	add	lr, sp, #48	; 0x30
   152bc:	mov	ip, sp
   152c0:	ldm	ip!, {r0, r1, r2, r3}
   152c4:	stmia	lr!, {r0, r1, r2, r3}
   152c8:	ldm	ip!, {r0, r1, r2, r3}
   152cc:	stmia	lr!, {r0, r1, r2, r3}
   152d0:	ldm	ip, {r0, r1, r2, r3}
   152d4:	stm	lr, {r0, r1, r2, r3}
   152d8:	mov	r2, #1
   152dc:	mov	r1, #58	; 0x3a
   152e0:	add	r0, sp, #48	; 0x30
   152e4:	bl	14e74 <__assert_fail@plt+0x3f30>
   152e8:	add	r3, sp, #48	; 0x30
   152ec:	mvn	r2, #0
   152f0:	mov	r1, r5
   152f4:	mov	r0, r4
   152f8:	bl	14c48 <__assert_fail@plt+0x3d04>
   152fc:	add	sp, sp, #100	; 0x64
   15300:	pop	{r4, r5, pc}
   15304:	push	{r4, r5, r6, r7, lr}
   15308:	sub	sp, sp, #52	; 0x34
   1530c:	mov	r4, r0
   15310:	mov	r6, r1
   15314:	mov	r7, r2
   15318:	mov	r5, r3
   1531c:	mov	ip, sp
   15320:	ldr	lr, [pc, #64]	; 15368 <__assert_fail@plt+0x4424>
   15324:	ldm	lr!, {r0, r1, r2, r3}
   15328:	stmia	ip!, {r0, r1, r2, r3}
   1532c:	ldm	lr!, {r0, r1, r2, r3}
   15330:	stmia	ip!, {r0, r1, r2, r3}
   15334:	ldm	lr, {r0, r1, r2, r3}
   15338:	stm	ip, {r0, r1, r2, r3}
   1533c:	mov	r2, r7
   15340:	mov	r1, r6
   15344:	mov	r0, sp
   15348:	bl	14ed0 <__assert_fail@plt+0x3f8c>
   1534c:	mov	r3, sp
   15350:	ldr	r2, [sp, #72]	; 0x48
   15354:	mov	r1, r5
   15358:	mov	r0, r4
   1535c:	bl	14c48 <__assert_fail@plt+0x3d04>
   15360:	add	sp, sp, #52	; 0x34
   15364:	pop	{r4, r5, r6, r7, pc}
   15368:	andeq	fp, r2, r0, ror r5
   1536c:	push	{lr}		; (str lr, [sp, #-4]!)
   15370:	sub	sp, sp, #12
   15374:	mvn	ip, #0
   15378:	str	ip, [sp]
   1537c:	bl	15304 <__assert_fail@plt+0x43c0>
   15380:	add	sp, sp, #12
   15384:	pop	{pc}		; (ldr pc, [sp], #4)
   15388:	push	{r4, lr}
   1538c:	mov	r3, r2
   15390:	mov	r2, r1
   15394:	mov	r1, r0
   15398:	mov	r0, #0
   1539c:	bl	1536c <__assert_fail@plt+0x4428>
   153a0:	pop	{r4, pc}
   153a4:	push	{lr}		; (str lr, [sp, #-4]!)
   153a8:	sub	sp, sp, #12
   153ac:	str	r3, [sp]
   153b0:	mov	r3, r2
   153b4:	mov	r2, r1
   153b8:	mov	r1, r0
   153bc:	mov	r0, #0
   153c0:	bl	15304 <__assert_fail@plt+0x43c0>
   153c4:	add	sp, sp, #12
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	push	{r4, lr}
   153d0:	ldr	r3, [pc, #4]	; 153dc <__assert_fail@plt+0x4498>
   153d4:	bl	14c48 <__assert_fail@plt+0x3d04>
   153d8:	pop	{r4, pc}
   153dc:	andeq	r9, r2, r8, lsl #2
   153e0:	push	{r4, lr}
   153e4:	mov	r2, r1
   153e8:	mov	r1, r0
   153ec:	mov	r0, #0
   153f0:	bl	153cc <__assert_fail@plt+0x4488>
   153f4:	pop	{r4, pc}
   153f8:	push	{r4, lr}
   153fc:	mvn	r2, #0
   15400:	bl	153cc <__assert_fail@plt+0x4488>
   15404:	pop	{r4, pc}
   15408:	push	{r4, lr}
   1540c:	mov	r1, r0
   15410:	mov	r0, #0
   15414:	bl	153f8 <__assert_fail@plt+0x44b4>
   15418:	pop	{r4, pc}
   1541c:	push	{r4, r5, r6, r7, r8, lr}
   15420:	mov	r8, r0
   15424:	mov	r7, r1
   15428:	mov	r4, r2
   1542c:	ldr	r5, [pc, #88]	; 1548c <__assert_fail@plt+0x4548>
   15430:	b	15438 <__assert_fail@plt+0x44f4>
   15434:	mov	r4, r5
   15438:	mov	r2, r4
   1543c:	mov	r1, r7
   15440:	mov	r0, r8
   15444:	bl	10d04 <read@plt>
   15448:	subs	r6, r0, #0
   1544c:	bge	15484 <__assert_fail@plt+0x4540>
   15450:	bl	10e84 <__errno_location@plt>
   15454:	ldr	r3, [r0]
   15458:	cmp	r3, #4
   1545c:	beq	15438 <__assert_fail@plt+0x44f4>
   15460:	cmp	r4, r5
   15464:	movls	r4, #0
   15468:	movhi	r4, #1
   1546c:	cmp	r3, #22
   15470:	movne	r4, #0
   15474:	cmp	r4, #0
   15478:	bne	15434 <__assert_fail@plt+0x44f0>
   1547c:	mov	r0, r6
   15480:	pop	{r4, r5, r6, r7, r8, pc}
   15484:	mov	r0, r6
   15488:	pop	{r4, r5, r6, r7, r8, pc}
   1548c:	svcvc	0x00f00000	; IMB
   15490:	push	{r4, r5, r6, lr}
   15494:	sub	sp, sp, #32
   15498:	mov	r4, r0
   1549c:	ldr	r5, [sp, #48]	; 0x30
   154a0:	ldr	r6, [sp, #52]	; 0x34
   154a4:	cmp	r1, #0
   154a8:	beq	15560 <__assert_fail@plt+0x461c>
   154ac:	str	r3, [sp, #4]
   154b0:	str	r2, [sp]
   154b4:	mov	r3, r1
   154b8:	ldr	r2, [pc, #940]	; 1586c <__assert_fail@plt+0x4928>
   154bc:	mov	r1, #1
   154c0:	bl	10ecc <__fprintf_chk@plt>
   154c4:	mov	r2, #5
   154c8:	ldr	r1, [pc, #928]	; 15870 <__assert_fail@plt+0x492c>
   154cc:	mov	r0, #0
   154d0:	bl	10d88 <dcgettext@plt>
   154d4:	ldr	r3, [pc, #920]	; 15874 <__assert_fail@plt+0x4930>
   154d8:	str	r3, [sp]
   154dc:	mov	r3, r0
   154e0:	ldr	r2, [pc, #912]	; 15878 <__assert_fail@plt+0x4934>
   154e4:	mov	r1, #1
   154e8:	mov	r0, r4
   154ec:	bl	10ecc <__fprintf_chk@plt>
   154f0:	mov	r1, r4
   154f4:	mov	r0, #10
   154f8:	bl	10d7c <fputc_unlocked@plt>
   154fc:	mov	r2, #5
   15500:	ldr	r1, [pc, #884]	; 1587c <__assert_fail@plt+0x4938>
   15504:	mov	r0, #0
   15508:	bl	10d88 <dcgettext@plt>
   1550c:	ldr	r3, [pc, #876]	; 15880 <__assert_fail@plt+0x493c>
   15510:	mov	r2, r0
   15514:	mov	r1, #1
   15518:	mov	r0, r4
   1551c:	bl	10ecc <__fprintf_chk@plt>
   15520:	mov	r1, r4
   15524:	mov	r0, #10
   15528:	bl	10d7c <fputc_unlocked@plt>
   1552c:	cmp	r6, #9
   15530:	ldrls	pc, [pc, r6, lsl #2]
   15534:	b	15804 <__assert_fail@plt+0x48c0>
   15538:	muleq	r1, ip, r5
   1553c:	andeq	r5, r1, r8, ror r5
   15540:	andeq	r5, r1, r4, lsr #11
   15544:	ldrdeq	r5, [r1], -r4
   15548:	andeq	r5, r1, ip, lsl #12
   1554c:	andeq	r5, r1, ip, asr #12
   15550:	muleq	r1, r4, r6
   15554:	andeq	r5, r1, r4, ror #13
   15558:	andeq	r5, r1, ip, lsr r7
   1555c:	muleq	r1, ip, r7
   15560:	str	r3, [sp]
   15564:	mov	r3, r2
   15568:	ldr	r2, [pc, #788]	; 15884 <__assert_fail@plt+0x4940>
   1556c:	mov	r1, #1
   15570:	bl	10ecc <__fprintf_chk@plt>
   15574:	b	154c4 <__assert_fail@plt+0x4580>
   15578:	mov	r2, #5
   1557c:	ldr	r1, [pc, #772]	; 15888 <__assert_fail@plt+0x4944>
   15580:	mov	r0, #0
   15584:	bl	10d88 <dcgettext@plt>
   15588:	ldr	r3, [r5]
   1558c:	mov	r2, r0
   15590:	mov	r1, #1
   15594:	mov	r0, r4
   15598:	bl	10ecc <__fprintf_chk@plt>
   1559c:	add	sp, sp, #32
   155a0:	pop	{r4, r5, r6, pc}
   155a4:	mov	r2, #5
   155a8:	ldr	r1, [pc, #732]	; 1588c <__assert_fail@plt+0x4948>
   155ac:	mov	r0, #0
   155b0:	bl	10d88 <dcgettext@plt>
   155b4:	ldr	r3, [r5]
   155b8:	ldr	r2, [r5, #4]
   155bc:	str	r2, [sp]
   155c0:	mov	r2, r0
   155c4:	mov	r1, #1
   155c8:	mov	r0, r4
   155cc:	bl	10ecc <__fprintf_chk@plt>
   155d0:	b	1559c <__assert_fail@plt+0x4658>
   155d4:	mov	r2, #5
   155d8:	ldr	r1, [pc, #688]	; 15890 <__assert_fail@plt+0x494c>
   155dc:	mov	r0, #0
   155e0:	bl	10d88 <dcgettext@plt>
   155e4:	ldr	r3, [r5]
   155e8:	ldr	r2, [r5, #8]
   155ec:	str	r2, [sp, #4]
   155f0:	ldr	r2, [r5, #4]
   155f4:	str	r2, [sp]
   155f8:	mov	r2, r0
   155fc:	mov	r1, #1
   15600:	mov	r0, r4
   15604:	bl	10ecc <__fprintf_chk@plt>
   15608:	b	1559c <__assert_fail@plt+0x4658>
   1560c:	mov	r2, #5
   15610:	ldr	r1, [pc, #636]	; 15894 <__assert_fail@plt+0x4950>
   15614:	mov	r0, #0
   15618:	bl	10d88 <dcgettext@plt>
   1561c:	ldr	r3, [r5]
   15620:	ldr	r2, [r5, #12]
   15624:	str	r2, [sp, #8]
   15628:	ldr	r2, [r5, #8]
   1562c:	str	r2, [sp, #4]
   15630:	ldr	r2, [r5, #4]
   15634:	str	r2, [sp]
   15638:	mov	r2, r0
   1563c:	mov	r1, #1
   15640:	mov	r0, r4
   15644:	bl	10ecc <__fprintf_chk@plt>
   15648:	b	1559c <__assert_fail@plt+0x4658>
   1564c:	mov	r2, #5
   15650:	ldr	r1, [pc, #576]	; 15898 <__assert_fail@plt+0x4954>
   15654:	mov	r0, #0
   15658:	bl	10d88 <dcgettext@plt>
   1565c:	ldr	r3, [r5]
   15660:	ldr	r2, [r5, #16]
   15664:	str	r2, [sp, #12]
   15668:	ldr	r2, [r5, #12]
   1566c:	str	r2, [sp, #8]
   15670:	ldr	r2, [r5, #8]
   15674:	str	r2, [sp, #4]
   15678:	ldr	r2, [r5, #4]
   1567c:	str	r2, [sp]
   15680:	mov	r2, r0
   15684:	mov	r1, #1
   15688:	mov	r0, r4
   1568c:	bl	10ecc <__fprintf_chk@plt>
   15690:	b	1559c <__assert_fail@plt+0x4658>
   15694:	mov	r2, #5
   15698:	ldr	r1, [pc, #508]	; 1589c <__assert_fail@plt+0x4958>
   1569c:	mov	r0, #0
   156a0:	bl	10d88 <dcgettext@plt>
   156a4:	ldr	r3, [r5]
   156a8:	ldr	r2, [r5, #20]
   156ac:	str	r2, [sp, #16]
   156b0:	ldr	r2, [r5, #16]
   156b4:	str	r2, [sp, #12]
   156b8:	ldr	r2, [r5, #12]
   156bc:	str	r2, [sp, #8]
   156c0:	ldr	r2, [r5, #8]
   156c4:	str	r2, [sp, #4]
   156c8:	ldr	r2, [r5, #4]
   156cc:	str	r2, [sp]
   156d0:	mov	r2, r0
   156d4:	mov	r1, #1
   156d8:	mov	r0, r4
   156dc:	bl	10ecc <__fprintf_chk@plt>
   156e0:	b	1559c <__assert_fail@plt+0x4658>
   156e4:	mov	r2, #5
   156e8:	ldr	r1, [pc, #432]	; 158a0 <__assert_fail@plt+0x495c>
   156ec:	mov	r0, #0
   156f0:	bl	10d88 <dcgettext@plt>
   156f4:	ldr	r3, [r5]
   156f8:	ldr	r2, [r5, #24]
   156fc:	str	r2, [sp, #20]
   15700:	ldr	r2, [r5, #20]
   15704:	str	r2, [sp, #16]
   15708:	ldr	r2, [r5, #16]
   1570c:	str	r2, [sp, #12]
   15710:	ldr	r2, [r5, #12]
   15714:	str	r2, [sp, #8]
   15718:	ldr	r2, [r5, #8]
   1571c:	str	r2, [sp, #4]
   15720:	ldr	r2, [r5, #4]
   15724:	str	r2, [sp]
   15728:	mov	r2, r0
   1572c:	mov	r1, #1
   15730:	mov	r0, r4
   15734:	bl	10ecc <__fprintf_chk@plt>
   15738:	b	1559c <__assert_fail@plt+0x4658>
   1573c:	mov	r2, #5
   15740:	ldr	r1, [pc, #348]	; 158a4 <__assert_fail@plt+0x4960>
   15744:	mov	r0, #0
   15748:	bl	10d88 <dcgettext@plt>
   1574c:	ldr	r3, [r5]
   15750:	ldr	r2, [r5, #28]
   15754:	str	r2, [sp, #24]
   15758:	ldr	r2, [r5, #24]
   1575c:	str	r2, [sp, #20]
   15760:	ldr	r2, [r5, #20]
   15764:	str	r2, [sp, #16]
   15768:	ldr	r2, [r5, #16]
   1576c:	str	r2, [sp, #12]
   15770:	ldr	r2, [r5, #12]
   15774:	str	r2, [sp, #8]
   15778:	ldr	r2, [r5, #8]
   1577c:	str	r2, [sp, #4]
   15780:	ldr	r2, [r5, #4]
   15784:	str	r2, [sp]
   15788:	mov	r2, r0
   1578c:	mov	r1, #1
   15790:	mov	r0, r4
   15794:	bl	10ecc <__fprintf_chk@plt>
   15798:	b	1559c <__assert_fail@plt+0x4658>
   1579c:	mov	r2, #5
   157a0:	ldr	r1, [pc, #256]	; 158a8 <__assert_fail@plt+0x4964>
   157a4:	mov	r0, #0
   157a8:	bl	10d88 <dcgettext@plt>
   157ac:	ldr	r3, [r5]
   157b0:	ldr	r2, [r5, #32]
   157b4:	str	r2, [sp, #28]
   157b8:	ldr	r2, [r5, #28]
   157bc:	str	r2, [sp, #24]
   157c0:	ldr	r2, [r5, #24]
   157c4:	str	r2, [sp, #20]
   157c8:	ldr	r2, [r5, #20]
   157cc:	str	r2, [sp, #16]
   157d0:	ldr	r2, [r5, #16]
   157d4:	str	r2, [sp, #12]
   157d8:	ldr	r2, [r5, #12]
   157dc:	str	r2, [sp, #8]
   157e0:	ldr	r2, [r5, #8]
   157e4:	str	r2, [sp, #4]
   157e8:	ldr	r2, [r5, #4]
   157ec:	str	r2, [sp]
   157f0:	mov	r2, r0
   157f4:	mov	r1, #1
   157f8:	mov	r0, r4
   157fc:	bl	10ecc <__fprintf_chk@plt>
   15800:	b	1559c <__assert_fail@plt+0x4658>
   15804:	mov	r2, #5
   15808:	ldr	r1, [pc, #156]	; 158ac <__assert_fail@plt+0x4968>
   1580c:	mov	r0, #0
   15810:	bl	10d88 <dcgettext@plt>
   15814:	ldr	r3, [r5]
   15818:	ldr	r2, [r5, #32]
   1581c:	str	r2, [sp, #28]
   15820:	ldr	r2, [r5, #28]
   15824:	str	r2, [sp, #24]
   15828:	ldr	r2, [r5, #24]
   1582c:	str	r2, [sp, #20]
   15830:	ldr	r2, [r5, #20]
   15834:	str	r2, [sp, #16]
   15838:	ldr	r2, [r5, #16]
   1583c:	str	r2, [sp, #12]
   15840:	ldr	r2, [r5, #12]
   15844:	str	r2, [sp, #8]
   15848:	ldr	r2, [r5, #8]
   1584c:	str	r2, [sp, #4]
   15850:	ldr	r2, [r5, #4]
   15854:	str	r2, [sp]
   15858:	mov	r2, r0
   1585c:	mov	r1, #1
   15860:	mov	r0, r4
   15864:	bl	10ecc <__fprintf_chk@plt>
   15868:	b	1559c <__assert_fail@plt+0x4658>
   1586c:	andeq	r8, r1, r0, asr #10
   15870:	andeq	r8, r1, r4, asr r5
   15874:	andeq	r0, r0, r6, ror #15
   15878:	andeq	r8, r1, ip, lsr #16
   1587c:	andeq	r8, r1, r8, asr r5
   15880:	andeq	r8, r1, r4, lsl #12
   15884:	andeq	r8, r1, ip, asr #10
   15888:	andeq	r8, r1, r8, lsr #12
   1588c:	andeq	r8, r1, r8, lsr r6
   15890:	andeq	r8, r1, r0, asr r6
   15894:	andeq	r8, r1, ip, ror #12
   15898:	andeq	r8, r1, ip, lsl #13
   1589c:			; <UNDEFINED> instruction: 0x000186b0
   158a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   158a4:	andeq	r8, r1, r4, lsl #14
   158a8:	andeq	r8, r1, r4, lsr r7
   158ac:	andeq	r8, r1, r8, ror #14
   158b0:	push	{r4, r5, lr}
   158b4:	sub	sp, sp, #12
   158b8:	ldr	r5, [sp, #24]
   158bc:	ldr	ip, [r5]
   158c0:	cmp	ip, #0
   158c4:	beq	158f4 <__assert_fail@plt+0x49b0>
   158c8:	mov	lr, r5
   158cc:	mov	ip, #0
   158d0:	add	ip, ip, #1
   158d4:	ldr	r4, [lr, #4]!
   158d8:	cmp	r4, #0
   158dc:	bne	158d0 <__assert_fail@plt+0x498c>
   158e0:	str	ip, [sp, #4]
   158e4:	str	r5, [sp]
   158e8:	bl	15490 <__assert_fail@plt+0x454c>
   158ec:	add	sp, sp, #12
   158f0:	pop	{r4, r5, pc}
   158f4:	mov	ip, #0
   158f8:	b	158e0 <__assert_fail@plt+0x499c>
   158fc:	push	{r4, r5, lr}
   15900:	sub	sp, sp, #52	; 0x34
   15904:	ldr	r4, [sp, #64]	; 0x40
   15908:	sub	r4, r4, #4
   1590c:	add	r5, sp, #4
   15910:	mov	ip, #0
   15914:	ldr	lr, [r4, #4]!
   15918:	str	lr, [r5, #4]!
   1591c:	cmp	lr, #0
   15920:	beq	15930 <__assert_fail@plt+0x49ec>
   15924:	add	ip, ip, #1
   15928:	cmp	ip, #10
   1592c:	bne	15914 <__assert_fail@plt+0x49d0>
   15930:	str	ip, [sp, #4]
   15934:	add	ip, sp, #8
   15938:	str	ip, [sp]
   1593c:	bl	15490 <__assert_fail@plt+0x454c>
   15940:	add	sp, sp, #52	; 0x34
   15944:	pop	{r4, r5, pc}
   15948:	push	{r3}		; (str r3, [sp, #-4]!)
   1594c:	push	{lr}		; (str lr, [sp, #-4]!)
   15950:	sub	sp, sp, #16
   15954:	add	r3, sp, #24
   15958:	str	r3, [sp, #12]
   1595c:	str	r3, [sp]
   15960:	ldr	r3, [sp, #20]
   15964:	bl	158fc <__assert_fail@plt+0x49b8>
   15968:	add	sp, sp, #16
   1596c:	pop	{lr}		; (ldr lr, [sp], #4)
   15970:	add	sp, sp, #4
   15974:	bx	lr
   15978:	push	{r4, lr}
   1597c:	ldr	r3, [pc, #112]	; 159f4 <__assert_fail@plt+0x4ab0>
   15980:	ldr	r1, [r3]
   15984:	mov	r0, #10
   15988:	bl	10d7c <fputc_unlocked@plt>
   1598c:	mov	r2, #5
   15990:	ldr	r1, [pc, #96]	; 159f8 <__assert_fail@plt+0x4ab4>
   15994:	mov	r0, #0
   15998:	bl	10d88 <dcgettext@plt>
   1599c:	ldr	r2, [pc, #88]	; 159fc <__assert_fail@plt+0x4ab8>
   159a0:	mov	r1, r0
   159a4:	mov	r0, #1
   159a8:	bl	10eb4 <__printf_chk@plt>
   159ac:	mov	r2, #5
   159b0:	ldr	r1, [pc, #72]	; 15a00 <__assert_fail@plt+0x4abc>
   159b4:	mov	r0, #0
   159b8:	bl	10d88 <dcgettext@plt>
   159bc:	ldr	r3, [pc, #64]	; 15a04 <__assert_fail@plt+0x4ac0>
   159c0:	ldr	r2, [pc, #64]	; 15a08 <__assert_fail@plt+0x4ac4>
   159c4:	mov	r1, r0
   159c8:	mov	r0, #1
   159cc:	bl	10eb4 <__printf_chk@plt>
   159d0:	mov	r2, #5
   159d4:	ldr	r1, [pc, #48]	; 15a0c <__assert_fail@plt+0x4ac8>
   159d8:	mov	r0, #0
   159dc:	bl	10d88 <dcgettext@plt>
   159e0:	ldr	r2, [pc, #40]	; 15a10 <__assert_fail@plt+0x4acc>
   159e4:	mov	r1, r0
   159e8:	mov	r0, #1
   159ec:	bl	10eb4 <__printf_chk@plt>
   159f0:	pop	{r4, pc}
   159f4:	andeq	r9, r2, r4, asr r1
   159f8:	andeq	r8, r1, r4, lsr #15
   159fc:			; <UNDEFINED> instruction: 0x000187b8
   15a00:	ldrdeq	r8, [r1], -r0
   15a04:	strdeq	r7, [r1], -r8
   15a08:	andeq	r7, r1, r0, lsr #28
   15a0c:	andeq	r8, r1, r4, ror #15
   15a10:	andeq	r8, r1, ip, lsl #16
   15a14:	push	{r4, lr}
   15a18:	bl	165b0 <__assert_fail@plt+0x566c>
   15a1c:	cmp	r0, #0
   15a20:	popne	{r4, pc}
   15a24:	bl	15fb8 <__assert_fail@plt+0x5074>
   15a28:	push	{r4, lr}
   15a2c:	bl	165b0 <__assert_fail@plt+0x566c>
   15a30:	cmp	r0, #0
   15a34:	popne	{r4, pc}
   15a38:	bl	15fb8 <__assert_fail@plt+0x5074>
   15a3c:	push	{r4, lr}
   15a40:	bl	15a14 <__assert_fail@plt+0x4ad0>
   15a44:	pop	{r4, pc}
   15a48:	push	{r4, r5, r6, lr}
   15a4c:	mov	r5, r0
   15a50:	mov	r4, r1
   15a54:	bl	165e0 <__assert_fail@plt+0x569c>
   15a58:	cmp	r0, #0
   15a5c:	popne	{r4, r5, r6, pc}
   15a60:	adds	r4, r4, #0
   15a64:	movne	r4, #1
   15a68:	cmp	r5, #0
   15a6c:	orreq	r4, r4, #1
   15a70:	cmp	r4, #0
   15a74:	popeq	{r4, r5, r6, pc}
   15a78:	bl	15fb8 <__assert_fail@plt+0x5074>
   15a7c:	push	{r4, lr}
   15a80:	cmp	r1, #0
   15a84:	orreq	r1, r1, #1
   15a88:	bl	165e0 <__assert_fail@plt+0x569c>
   15a8c:	cmp	r0, #0
   15a90:	popne	{r4, pc}
   15a94:	bl	15fb8 <__assert_fail@plt+0x5074>
   15a98:	push	{r4, r5, r6, lr}
   15a9c:	mov	r6, r0
   15aa0:	mov	r5, r1
   15aa4:	mov	r4, r2
   15aa8:	bl	168e8 <__assert_fail@plt+0x59a4>
   15aac:	cmp	r0, #0
   15ab0:	popne	{r4, r5, r6, pc}
   15ab4:	cmp	r6, #0
   15ab8:	beq	15ac8 <__assert_fail@plt+0x4b84>
   15abc:	cmp	r5, #0
   15ac0:	cmpne	r4, #0
   15ac4:	popeq	{r4, r5, r6, pc}
   15ac8:	bl	15fb8 <__assert_fail@plt+0x5074>
   15acc:	push	{r4, lr}
   15ad0:	bl	15a98 <__assert_fail@plt+0x4b54>
   15ad4:	pop	{r4, pc}
   15ad8:	push	{r4, lr}
   15adc:	mov	ip, r1
   15ae0:	mov	r3, r2
   15ae4:	cmp	r2, #0
   15ae8:	cmpne	r1, #0
   15aec:	moveq	r3, #1
   15af0:	moveq	ip, r3
   15af4:	mov	r2, r3
   15af8:	mov	r1, ip
   15afc:	bl	168e8 <__assert_fail@plt+0x59a4>
   15b00:	cmp	r0, #0
   15b04:	popne	{r4, pc}
   15b08:	bl	15fb8 <__assert_fail@plt+0x5074>
   15b0c:	push	{r4, lr}
   15b10:	mov	r2, r1
   15b14:	mov	r1, r0
   15b18:	mov	r0, #0
   15b1c:	bl	15a98 <__assert_fail@plt+0x4b54>
   15b20:	pop	{r4, pc}
   15b24:	push	{r4, lr}
   15b28:	mov	r2, r1
   15b2c:	mov	r1, r0
   15b30:	mov	r0, #0
   15b34:	bl	15ad8 <__assert_fail@plt+0x4b94>
   15b38:	pop	{r4, pc}
   15b3c:	push	{r4, r5, r6, r7, r8, lr}
   15b40:	mov	r5, r1
   15b44:	mov	r6, r2
   15b48:	ldr	r4, [r1]
   15b4c:	subs	r7, r0, #0
   15b50:	beq	15b6c <__assert_fail@plt+0x4c28>
   15b54:	lsr	r2, r4, #1
   15b58:	add	r3, r2, #1
   15b5c:	mvn	r3, r3
   15b60:	cmp	r4, r3
   15b64:	bls	15b90 <__assert_fail@plt+0x4c4c>
   15b68:	bl	15fb8 <__assert_fail@plt+0x5074>
   15b6c:	cmp	r4, #0
   15b70:	bne	15b98 <__assert_fail@plt+0x4c54>
   15b74:	mov	r1, r2
   15b78:	mov	r0, #64	; 0x40
   15b7c:	bl	16a3c <__assert_fail@plt+0x5af8>
   15b80:	cmp	r0, #0
   15b84:	movne	r4, r0
   15b88:	addeq	r4, r0, #1
   15b8c:	b	15b98 <__assert_fail@plt+0x4c54>
   15b90:	add	r4, r4, #1
   15b94:	add	r4, r4, r2
   15b98:	mov	r2, r6
   15b9c:	mov	r1, r4
   15ba0:	mov	r0, r7
   15ba4:	bl	15a98 <__assert_fail@plt+0x4b54>
   15ba8:	str	r4, [r5]
   15bac:	pop	{r4, r5, r6, r7, r8, pc}
   15bb0:	push	{r4, lr}
   15bb4:	mov	r2, #1
   15bb8:	bl	15b3c <__assert_fail@plt+0x4bf8>
   15bbc:	pop	{r4, pc}
   15bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc4:	sub	sp, sp, #12
   15bc8:	mov	fp, r0
   15bcc:	mov	sl, r1
   15bd0:	mov	r9, r2
   15bd4:	mov	r7, r3
   15bd8:	ldr	r6, [sp, #48]	; 0x30
   15bdc:	ldr	r5, [r1]
   15be0:	asrs	r4, r5, #1
   15be4:	bmi	15d40 <__assert_fail@plt+0x4dfc>
   15be8:	cmp	r5, #0
   15bec:	blt	15d54 <__assert_fail@plt+0x4e10>
   15bf0:	mvn	r3, #-2147483648	; 0x80000000
   15bf4:	sub	r3, r3, r4
   15bf8:	cmp	r5, r3
   15bfc:	movle	r3, #0
   15c00:	movgt	r3, #1
   15c04:	cmp	r3, #0
   15c08:	addeq	r4, r4, r5
   15c0c:	mvnne	r4, #-2147483648	; 0x80000000
   15c10:	mvn	r8, r7
   15c14:	lsr	r8, r8, #31
   15c18:	cmp	r7, r4
   15c1c:	movge	r3, #0
   15c20:	andlt	r3, r8, #1
   15c24:	cmp	r3, #0
   15c28:	movne	r4, r7
   15c2c:	cmp	r6, #0
   15c30:	blt	15d68 <__assert_fail@plt+0x4e24>
   15c34:	cmp	r6, #0
   15c38:	beq	15e14 <__assert_fail@plt+0x4ed0>
   15c3c:	cmp	r4, #0
   15c40:	blt	15dc4 <__assert_fail@plt+0x4e80>
   15c44:	mov	r1, r6
   15c48:	mvn	r0, #-2147483648	; 0x80000000
   15c4c:	bl	16c48 <__assert_fail@plt+0x5d04>
   15c50:	cmp	r0, r4
   15c54:	movge	r0, #0
   15c58:	movlt	r0, #1
   15c5c:	cmp	r0, #0
   15c60:	mvnne	r3, #-2147483648	; 0x80000000
   15c64:	strne	r3, [sp, #4]
   15c68:	beq	15dfc <__assert_fail@plt+0x4eb8>
   15c6c:	mov	r1, r6
   15c70:	ldr	r0, [sp, #4]
   15c74:	bl	16c48 <__assert_fail@plt+0x5d04>
   15c78:	mov	r4, r0
   15c7c:	mov	r1, r6
   15c80:	ldr	r0, [sp, #4]
   15c84:	bl	16e68 <__assert_fail@plt+0x5f24>
   15c88:	ldr	r3, [sp, #4]
   15c8c:	sub	r1, r3, r1
   15c90:	cmp	fp, #0
   15c94:	moveq	r3, #0
   15c98:	streq	r3, [sl]
   15c9c:	sub	r3, r4, r5
   15ca0:	cmp	r3, r9
   15ca4:	bge	15d2c <__assert_fail@plt+0x4de8>
   15ca8:	cmp	r9, #0
   15cac:	blt	15e20 <__assert_fail@plt+0x4edc>
   15cb0:	cmp	r5, #0
   15cb4:	blt	15e34 <__assert_fail@plt+0x4ef0>
   15cb8:	mvn	r3, #-2147483648	; 0x80000000
   15cbc:	sub	r3, r3, r9
   15cc0:	cmp	r5, r3
   15cc4:	movle	r3, #0
   15cc8:	movgt	r3, #1
   15ccc:	cmp	r3, #0
   15cd0:	bne	15edc <__assert_fail@plt+0x4f98>
   15cd4:	add	r5, r5, r9
   15cd8:	mov	r4, r5
   15cdc:	cmp	r7, r5
   15ce0:	movge	r7, #0
   15ce4:	andlt	r7, r8, #1
   15ce8:	cmp	r7, #0
   15cec:	bne	15edc <__assert_fail@plt+0x4f98>
   15cf0:	cmp	r6, #0
   15cf4:	blt	15e48 <__assert_fail@plt+0x4f04>
   15cf8:	cmp	r6, #0
   15cfc:	beq	15d28 <__assert_fail@plt+0x4de4>
   15d00:	cmp	r5, #0
   15d04:	blt	15ea4 <__assert_fail@plt+0x4f60>
   15d08:	mov	r1, r6
   15d0c:	mvn	r0, #-2147483648	; 0x80000000
   15d10:	bl	16c48 <__assert_fail@plt+0x5d04>
   15d14:	cmp	r5, r0
   15d18:	movle	r0, #0
   15d1c:	movgt	r0, #1
   15d20:	cmp	r0, #0
   15d24:	bne	15edc <__assert_fail@plt+0x4f98>
   15d28:	mul	r1, r5, r6
   15d2c:	mov	r0, fp
   15d30:	bl	15a48 <__assert_fail@plt+0x4b04>
   15d34:	str	r4, [sl]
   15d38:	add	sp, sp, #12
   15d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d40:	rsb	r3, r4, #-2147483648	; 0x80000000
   15d44:	cmp	r5, r3
   15d48:	movge	r3, #0
   15d4c:	movlt	r3, #1
   15d50:	b	15c04 <__assert_fail@plt+0x4cc0>
   15d54:	rsb	r3, r5, #-2147483648	; 0x80000000
   15d58:	cmp	r4, r3
   15d5c:	movge	r3, #0
   15d60:	movlt	r3, #1
   15d64:	b	15c04 <__assert_fail@plt+0x4cc0>
   15d68:	cmp	r4, #0
   15d6c:	blt	15d94 <__assert_fail@plt+0x4e50>
   15d70:	cmn	r6, #1
   15d74:	beq	15db0 <__assert_fail@plt+0x4e6c>
   15d78:	mov	r1, r6
   15d7c:	mov	r0, #-2147483648	; 0x80000000
   15d80:	bl	16c48 <__assert_fail@plt+0x5d04>
   15d84:	cmp	r0, r4
   15d88:	movge	r0, #0
   15d8c:	movlt	r0, #1
   15d90:	b	15c5c <__assert_fail@plt+0x4d18>
   15d94:	mov	r1, r6
   15d98:	mvn	r0, #-2147483648	; 0x80000000
   15d9c:	bl	16c48 <__assert_fail@plt+0x5d04>
   15da0:	cmp	r0, r4
   15da4:	movle	r0, #0
   15da8:	movgt	r0, #1
   15dac:	b	15c5c <__assert_fail@plt+0x4d18>
   15db0:	add	r0, r4, #-2147483648	; 0x80000000
   15db4:	cmp	r0, #0
   15db8:	movle	r0, #0
   15dbc:	movgt	r0, #1
   15dc0:	b	15c5c <__assert_fail@plt+0x4d18>
   15dc4:	cmn	r4, #1
   15dc8:	beq	15de8 <__assert_fail@plt+0x4ea4>
   15dcc:	mov	r1, r4
   15dd0:	mov	r0, #-2147483648	; 0x80000000
   15dd4:	bl	16c48 <__assert_fail@plt+0x5d04>
   15dd8:	cmp	r6, r0
   15ddc:	movle	r0, #0
   15de0:	movgt	r0, #1
   15de4:	b	15c5c <__assert_fail@plt+0x4d18>
   15de8:	add	r0, r6, #-2147483648	; 0x80000000
   15dec:	cmp	r0, #0
   15df0:	movle	r0, #0
   15df4:	movgt	r0, #1
   15df8:	b	15c5c <__assert_fail@plt+0x4d18>
   15dfc:	mul	r1, r6, r4
   15e00:	cmp	r1, #63	; 0x3f
   15e04:	movle	r3, #64	; 0x40
   15e08:	strle	r3, [sp, #4]
   15e0c:	bgt	15c90 <__assert_fail@plt+0x4d4c>
   15e10:	b	15c6c <__assert_fail@plt+0x4d28>
   15e14:	mov	r3, #64	; 0x40
   15e18:	str	r3, [sp, #4]
   15e1c:	b	15c6c <__assert_fail@plt+0x4d28>
   15e20:	rsb	r3, r9, #-2147483648	; 0x80000000
   15e24:	cmp	r5, r3
   15e28:	movge	r3, #0
   15e2c:	movlt	r3, #1
   15e30:	b	15ccc <__assert_fail@plt+0x4d88>
   15e34:	rsb	r3, r5, #-2147483648	; 0x80000000
   15e38:	cmp	r9, r3
   15e3c:	movge	r3, #0
   15e40:	movlt	r3, #1
   15e44:	b	15ccc <__assert_fail@plt+0x4d88>
   15e48:	cmp	r5, #0
   15e4c:	blt	15e74 <__assert_fail@plt+0x4f30>
   15e50:	cmn	r6, #1
   15e54:	beq	15e90 <__assert_fail@plt+0x4f4c>
   15e58:	mov	r1, r6
   15e5c:	mov	r0, #-2147483648	; 0x80000000
   15e60:	bl	16c48 <__assert_fail@plt+0x5d04>
   15e64:	cmp	r5, r0
   15e68:	movle	r0, #0
   15e6c:	movgt	r0, #1
   15e70:	b	15d20 <__assert_fail@plt+0x4ddc>
   15e74:	mov	r1, r6
   15e78:	mvn	r0, #-2147483648	; 0x80000000
   15e7c:	bl	16c48 <__assert_fail@plt+0x5d04>
   15e80:	cmp	r5, r0
   15e84:	movge	r0, #0
   15e88:	movlt	r0, #1
   15e8c:	b	15d20 <__assert_fail@plt+0x4ddc>
   15e90:	add	r0, r5, #-2147483648	; 0x80000000
   15e94:	cmp	r0, #0
   15e98:	movle	r0, #0
   15e9c:	movgt	r0, #1
   15ea0:	b	15d20 <__assert_fail@plt+0x4ddc>
   15ea4:	cmn	r5, #1
   15ea8:	beq	15ec8 <__assert_fail@plt+0x4f84>
   15eac:	mov	r1, r5
   15eb0:	mov	r0, #-2147483648	; 0x80000000
   15eb4:	bl	16c48 <__assert_fail@plt+0x5d04>
   15eb8:	cmp	r6, r0
   15ebc:	movle	r0, #0
   15ec0:	movgt	r0, #1
   15ec4:	b	15d20 <__assert_fail@plt+0x4ddc>
   15ec8:	add	r0, r6, #-2147483648	; 0x80000000
   15ecc:	cmp	r0, #0
   15ed0:	movle	r0, #0
   15ed4:	movgt	r0, #1
   15ed8:	b	15d20 <__assert_fail@plt+0x4ddc>
   15edc:	bl	15fb8 <__assert_fail@plt+0x5074>
   15ee0:	push	{r4, lr}
   15ee4:	bl	16560 <__assert_fail@plt+0x561c>
   15ee8:	cmp	r0, #0
   15eec:	popne	{r4, pc}
   15ef0:	bl	15fb8 <__assert_fail@plt+0x5074>
   15ef4:	push	{r4, lr}
   15ef8:	mov	r1, #1
   15efc:	bl	15ee0 <__assert_fail@plt+0x4f9c>
   15f00:	pop	{r4, pc}
   15f04:	push	{r4, lr}
   15f08:	bl	16560 <__assert_fail@plt+0x561c>
   15f0c:	cmp	r0, #0
   15f10:	popne	{r4, pc}
   15f14:	bl	15fb8 <__assert_fail@plt+0x5074>
   15f18:	push	{r4, lr}
   15f1c:	mov	r1, #1
   15f20:	bl	15f04 <__assert_fail@plt+0x4fc0>
   15f24:	pop	{r4, pc}
   15f28:	push	{r4, r5, r6, lr}
   15f2c:	mov	r5, r0
   15f30:	mov	r4, r1
   15f34:	mov	r0, r1
   15f38:	bl	15a14 <__assert_fail@plt+0x4ad0>
   15f3c:	mov	r2, r4
   15f40:	mov	r1, r5
   15f44:	bl	10d34 <memcpy@plt>
   15f48:	pop	{r4, r5, r6, pc}
   15f4c:	push	{r4, r5, r6, lr}
   15f50:	mov	r5, r0
   15f54:	mov	r4, r1
   15f58:	mov	r0, r1
   15f5c:	bl	15a28 <__assert_fail@plt+0x4ae4>
   15f60:	mov	r2, r4
   15f64:	mov	r1, r5
   15f68:	bl	10d34 <memcpy@plt>
   15f6c:	pop	{r4, r5, r6, pc}
   15f70:	push	{r4, r5, r6, lr}
   15f74:	mov	r5, r0
   15f78:	mov	r4, r1
   15f7c:	add	r0, r1, #1
   15f80:	bl	15a28 <__assert_fail@plt+0x4ae4>
   15f84:	mov	r2, #0
   15f88:	strb	r2, [r0, r4]
   15f8c:	mov	r2, r4
   15f90:	mov	r1, r5
   15f94:	bl	10d34 <memcpy@plt>
   15f98:	pop	{r4, r5, r6, pc}
   15f9c:	push	{r4, lr}
   15fa0:	mov	r4, r0
   15fa4:	bl	10e6c <strlen@plt>
   15fa8:	add	r1, r0, #1
   15fac:	mov	r0, r4
   15fb0:	bl	15f28 <__assert_fail@plt+0x4fe4>
   15fb4:	pop	{r4, pc}
   15fb8:	push	{r4, lr}
   15fbc:	ldr	r3, [pc, #40]	; 15fec <__assert_fail@plt+0x50a8>
   15fc0:	ldr	r4, [r3]
   15fc4:	mov	r2, #5
   15fc8:	ldr	r1, [pc, #32]	; 15ff0 <__assert_fail@plt+0x50ac>
   15fcc:	mov	r0, #0
   15fd0:	bl	10d88 <dcgettext@plt>
   15fd4:	mov	r3, r0
   15fd8:	ldr	r2, [pc, #20]	; 15ff4 <__assert_fail@plt+0x50b0>
   15fdc:	mov	r1, #0
   15fe0:	mov	r0, r4
   15fe4:	bl	10df4 <error@plt>
   15fe8:	bl	10f2c <abort@plt>
   15fec:	strdeq	r9, [r2], -r4
   15ff0:	andeq	r8, r1, ip, asr r8
   15ff4:	andeq	r8, r1, r4, lsr #8
   15ff8:	push	{r4, r5, r6, lr}
   15ffc:	mov	r5, r0
   16000:	subs	r4, r1, #0
   16004:	blt	16058 <__assert_fail@plt+0x5114>
   16008:	cmp	r4, #0
   1600c:	moveq	r3, #0
   16010:	beq	1603c <__assert_fail@plt+0x50f8>
   16014:	mov	r2, r4
   16018:	asr	r3, r4, #31
   1601c:	mvn	r0, #0
   16020:	mvn	r1, #0
   16024:	bl	16e88 <__assert_fail@plt+0x5f44>
   16028:	ldrd	r2, [r5]
   1602c:	cmp	r1, r3
   16030:	cmpeq	r0, r2
   16034:	movcc	r3, #1
   16038:	movcs	r3, #0
   1603c:	cmp	r3, #0
   16040:	beq	16078 <__assert_fail@plt+0x5134>
   16044:	mvn	r2, #0
   16048:	mvn	r3, #0
   1604c:	strd	r2, [r5]
   16050:	mov	r0, #1
   16054:	pop	{r4, r5, r6, pc}
   16058:	mov	r1, r4
   1605c:	mov	r0, #0
   16060:	bl	16c48 <__assert_fail@plt+0x5d04>
   16064:	ldrd	r2, [r5]
   16068:	orrs	r3, r2, r3
   1606c:	movne	r3, #1
   16070:	moveq	r3, #0
   16074:	b	1603c <__assert_fail@plt+0x50f8>
   16078:	asr	r3, r4, #31
   1607c:	ldr	r1, [r5, #4]
   16080:	ldr	r2, [r5]
   16084:	mul	r3, r3, r2
   16088:	mla	r1, r4, r1, r3
   1608c:	umull	r2, r3, r2, r4
   16090:	add	r3, r1, r3
   16094:	strd	r2, [r5]
   16098:	mov	r0, #0
   1609c:	pop	{r4, r5, r6, pc}
   160a0:	push	{r4, r5, r6, r7, r8, lr}
   160a4:	subs	r4, r2, #0
   160a8:	beq	160d8 <__assert_fail@plt+0x5194>
   160ac:	mov	r7, r1
   160b0:	mov	r6, r0
   160b4:	mov	r5, #0
   160b8:	mov	r1, r7
   160bc:	mov	r0, r6
   160c0:	bl	15ff8 <__assert_fail@plt+0x50b4>
   160c4:	orr	r5, r5, r0
   160c8:	subs	r4, r4, #1
   160cc:	bne	160b8 <__assert_fail@plt+0x5174>
   160d0:	mov	r0, r5
   160d4:	pop	{r4, r5, r6, r7, r8, pc}
   160d8:	mov	r5, #0
   160dc:	b	160d0 <__assert_fail@plt+0x518c>
   160e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   160e4:	sub	sp, sp, #20
   160e8:	cmp	r2, #36	; 0x24
   160ec:	bhi	1612c <__assert_fail@plt+0x51e8>
   160f0:	mov	r5, r0
   160f4:	mov	r6, r1
   160f8:	mov	r7, r2
   160fc:	mov	r9, r3
   16100:	cmp	r1, #0
   16104:	addeq	r6, sp, #12
   16108:	bl	10e84 <__errno_location@plt>
   1610c:	mov	r8, r0
   16110:	mov	r3, #0
   16114:	str	r3, [r0]
   16118:	ldrb	r4, [r5]
   1611c:	bl	10e54 <__ctype_b_loc@plt>
   16120:	ldr	r1, [r0]
   16124:	mov	r2, r5
   16128:	b	16144 <__assert_fail@plt+0x5200>
   1612c:	ldr	r3, [pc, #1056]	; 16554 <__assert_fail@plt+0x5610>
   16130:	mov	r2, #85	; 0x55
   16134:	ldr	r1, [pc, #1052]	; 16558 <__assert_fail@plt+0x5614>
   16138:	ldr	r0, [pc, #1052]	; 1655c <__assert_fail@plt+0x5618>
   1613c:	bl	10f44 <__assert_fail@plt>
   16140:	ldrb	r4, [r2, #1]!
   16144:	lsl	r3, r4, #1
   16148:	ldrh	r3, [r1, r3]
   1614c:	tst	r3, #8192	; 0x2000
   16150:	bne	16140 <__assert_fail@plt+0x51fc>
   16154:	cmp	r4, #45	; 0x2d
   16158:	moveq	r4, #4
   1615c:	bne	1616c <__assert_fail@plt+0x5228>
   16160:	mov	r0, r4
   16164:	add	sp, sp, #20
   16168:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1616c:	mov	r3, #0
   16170:	mov	r2, r7
   16174:	mov	r1, r6
   16178:	mov	r0, r5
   1617c:	bl	10d40 <__strtoull_internal@plt>
   16180:	strd	r0, [sp]
   16184:	ldr	r7, [r6]
   16188:	cmp	r5, r7
   1618c:	beq	161b0 <__assert_fail@plt+0x526c>
   16190:	ldr	r3, [r8]
   16194:	cmp	r3, #0
   16198:	beq	161f8 <__assert_fail@plt+0x52b4>
   1619c:	cmp	r3, #34	; 0x22
   161a0:	moveq	r4, #1
   161a4:	beq	161fc <__assert_fail@plt+0x52b8>
   161a8:	mov	r4, #4
   161ac:	b	16160 <__assert_fail@plt+0x521c>
   161b0:	ldr	r3, [sp, #48]	; 0x30
   161b4:	cmp	r3, #0
   161b8:	moveq	r4, #4
   161bc:	beq	16160 <__assert_fail@plt+0x521c>
   161c0:	ldrb	r1, [r7]
   161c4:	cmp	r1, #0
   161c8:	moveq	r4, #4
   161cc:	beq	16160 <__assert_fail@plt+0x521c>
   161d0:	mov	r0, r3
   161d4:	bl	10e78 <strchr@plt>
   161d8:	cmp	r0, #0
   161dc:	moveq	r4, #4
   161e0:	beq	16160 <__assert_fail@plt+0x521c>
   161e4:	mov	r2, #1
   161e8:	mov	r3, #0
   161ec:	strd	r2, [sp]
   161f0:	mov	r4, #0
   161f4:	b	16208 <__assert_fail@plt+0x52c4>
   161f8:	mov	r4, #0
   161fc:	ldr	r3, [sp, #48]	; 0x30
   16200:	cmp	r3, #0
   16204:	beq	162f8 <__assert_fail@plt+0x53b4>
   16208:	ldrb	r5, [r7]
   1620c:	cmp	r5, #0
   16210:	beq	16490 <__assert_fail@plt+0x554c>
   16214:	mov	r1, r5
   16218:	ldr	r0, [sp, #48]	; 0x30
   1621c:	bl	10e78 <strchr@plt>
   16220:	cmp	r0, #0
   16224:	beq	16300 <__assert_fail@plt+0x53bc>
   16228:	sub	r3, r5, #69	; 0x45
   1622c:	cmp	r3, #47	; 0x2f
   16230:	ldrls	pc, [pc, r3, lsl #2]
   16234:	b	1636c <__assert_fail@plt+0x5428>
   16238:	andeq	r6, r1, r0, lsl r3
   1623c:	andeq	r6, r1, ip, ror #6
   16240:	andeq	r6, r1, r0, lsl r3
   16244:	andeq	r6, r1, ip, ror #6
   16248:	andeq	r6, r1, ip, ror #6
   1624c:	andeq	r6, r1, ip, ror #6
   16250:	andeq	r6, r1, r0, lsl r3
   16254:	andeq	r6, r1, ip, ror #6
   16258:	andeq	r6, r1, r0, lsl r3
   1625c:	andeq	r6, r1, ip, ror #6
   16260:	andeq	r6, r1, ip, ror #6
   16264:	andeq	r6, r1, r0, lsl r3
   16268:	andeq	r6, r1, ip, ror #6
   1626c:	andeq	r6, r1, ip, ror #6
   16270:	andeq	r6, r1, ip, ror #6
   16274:	andeq	r6, r1, r0, lsl r3
   16278:	andeq	r6, r1, ip, ror #6
   1627c:	andeq	r6, r1, ip, ror #6
   16280:	andeq	r6, r1, ip, ror #6
   16284:	andeq	r6, r1, ip, ror #6
   16288:	andeq	r6, r1, r0, lsl r3
   1628c:	andeq	r6, r1, r0, lsl r3
   16290:	andeq	r6, r1, ip, ror #6
   16294:	andeq	r6, r1, ip, ror #6
   16298:	andeq	r6, r1, ip, ror #6
   1629c:	andeq	r6, r1, ip, ror #6
   162a0:	andeq	r6, r1, ip, ror #6
   162a4:	andeq	r6, r1, ip, ror #6
   162a8:	andeq	r6, r1, ip, ror #6
   162ac:	andeq	r6, r1, ip, ror #6
   162b0:	andeq	r6, r1, ip, ror #6
   162b4:	andeq	r6, r1, ip, ror #6
   162b8:	andeq	r6, r1, ip, ror #6
   162bc:	andeq	r6, r1, ip, ror #6
   162c0:	andeq	r6, r1, r0, lsl r3
   162c4:	andeq	r6, r1, ip, ror #6
   162c8:	andeq	r6, r1, ip, ror #6
   162cc:	andeq	r6, r1, ip, ror #6
   162d0:	andeq	r6, r1, r0, lsl r3
   162d4:	andeq	r6, r1, ip, ror #6
   162d8:	andeq	r6, r1, r0, lsl r3
   162dc:	andeq	r6, r1, ip, ror #6
   162e0:	andeq	r6, r1, ip, ror #6
   162e4:	andeq	r6, r1, ip, ror #6
   162e8:	andeq	r6, r1, ip, ror #6
   162ec:	andeq	r6, r1, ip, ror #6
   162f0:	andeq	r6, r1, ip, ror #6
   162f4:	andeq	r6, r1, r0, lsl r3
   162f8:	strd	r0, [r9]
   162fc:	b	16160 <__assert_fail@plt+0x521c>
   16300:	ldrd	r2, [sp]
   16304:	strd	r2, [r9]
   16308:	orr	r4, r4, #2
   1630c:	b	16160 <__assert_fail@plt+0x521c>
   16310:	mov	r1, #48	; 0x30
   16314:	ldr	r0, [sp, #48]	; 0x30
   16318:	bl	10e78 <strchr@plt>
   1631c:	cmp	r0, #0
   16320:	beq	1645c <__assert_fail@plt+0x5518>
   16324:	ldrb	r3, [r7, #1]
   16328:	cmp	r3, #68	; 0x44
   1632c:	beq	16348 <__assert_fail@plt+0x5404>
   16330:	cmp	r3, #105	; 0x69
   16334:	beq	16354 <__assert_fail@plt+0x5410>
   16338:	cmp	r3, #66	; 0x42
   1633c:	movne	r7, #1
   16340:	movne	r1, #1024	; 0x400
   16344:	bne	16374 <__assert_fail@plt+0x5430>
   16348:	mov	r7, #2
   1634c:	mov	r1, #1000	; 0x3e8
   16350:	b	16374 <__assert_fail@plt+0x5430>
   16354:	ldrb	r7, [r7, #2]
   16358:	cmp	r7, #66	; 0x42
   1635c:	movne	r7, #1
   16360:	moveq	r7, #3
   16364:	mov	r1, #1024	; 0x400
   16368:	b	16374 <__assert_fail@plt+0x5430>
   1636c:	mov	r7, #1
   16370:	mov	r1, #1024	; 0x400
   16374:	sub	r5, r5, #66	; 0x42
   16378:	cmp	r5, #53	; 0x35
   1637c:	ldrls	pc, [pc, r5, lsl #2]
   16380:	b	1653c <__assert_fail@plt+0x55f8>
   16384:	muleq	r1, ip, r4
   16388:	andeq	r6, r1, ip, lsr r5
   1638c:	andeq	r6, r1, ip, lsr r5
   16390:	andeq	r6, r1, ip, lsr #9
   16394:	andeq	r6, r1, ip, lsr r5
   16398:			; <UNDEFINED> instruction: 0x000164bc
   1639c:	andeq	r6, r1, ip, lsr r5
   163a0:	andeq	r6, r1, ip, lsr r5
   163a4:	andeq	r6, r1, ip, lsr r5
   163a8:	andeq	r6, r1, ip, asr #9
   163ac:	andeq	r6, r1, ip, lsr r5
   163b0:	ldrdeq	r6, [r1], -ip
   163b4:	andeq	r6, r1, ip, lsr r5
   163b8:	andeq	r6, r1, ip, lsr r5
   163bc:	andeq	r6, r1, ip, ror #9
   163c0:	andeq	r6, r1, ip, lsr r5
   163c4:	andeq	r6, r1, ip, lsr r5
   163c8:	andeq	r6, r1, ip, lsr r5
   163cc:	strdeq	r6, [r1], -ip
   163d0:	andeq	r6, r1, ip, lsr r5
   163d4:	andeq	r6, r1, ip, lsr r5
   163d8:	andeq	r6, r1, ip, lsr r5
   163dc:	andeq	r6, r1, ip, lsr r5
   163e0:	andeq	r6, r1, ip, lsl r5
   163e4:	andeq	r6, r1, ip, lsr #10
   163e8:	andeq	r6, r1, ip, lsr r5
   163ec:	andeq	r6, r1, ip, lsr r5
   163f0:	andeq	r6, r1, ip, lsr r5
   163f4:	andeq	r6, r1, ip, lsr r5
   163f8:	andeq	r6, r1, ip, lsr r5
   163fc:	andeq	r6, r1, ip, lsr r5
   16400:	andeq	r6, r1, ip, lsr r5
   16404:	andeq	r6, r1, r8, ror #8
   16408:	andeq	r6, r1, ip, asr #10
   1640c:	andeq	r6, r1, ip, lsr r5
   16410:	andeq	r6, r1, ip, lsr r5
   16414:	andeq	r6, r1, ip, lsr r5
   16418:			; <UNDEFINED> instruction: 0x000164bc
   1641c:	andeq	r6, r1, ip, lsr r5
   16420:	andeq	r6, r1, ip, lsr r5
   16424:	andeq	r6, r1, ip, lsr r5
   16428:	andeq	r6, r1, ip, asr #9
   1642c:	andeq	r6, r1, ip, lsr r5
   16430:	ldrdeq	r6, [r1], -ip
   16434:	andeq	r6, r1, ip, lsr r5
   16438:	andeq	r6, r1, ip, lsr r5
   1643c:	andeq	r6, r1, ip, lsr r5
   16440:	andeq	r6, r1, ip, lsr r5
   16444:	andeq	r6, r1, ip, lsr r5
   16448:	andeq	r6, r1, ip, lsr r5
   1644c:	strdeq	r6, [r1], -ip
   16450:	andeq	r6, r1, ip, lsr r5
   16454:	andeq	r6, r1, ip, lsr r5
   16458:	andeq	r6, r1, ip, lsl #10
   1645c:	mov	r7, #1
   16460:	mov	r1, #1024	; 0x400
   16464:	b	16374 <__assert_fail@plt+0x5430>
   16468:	mov	r1, #512	; 0x200
   1646c:	mov	r0, sp
   16470:	bl	15ff8 <__assert_fail@plt+0x50b4>
   16474:	orr	r4, r4, r0
   16478:	ldr	r3, [r6]
   1647c:	add	r2, r3, r7
   16480:	str	r2, [r6]
   16484:	ldrb	r3, [r3, r7]
   16488:	cmp	r3, #0
   1648c:	orrne	r4, r4, #2
   16490:	ldrd	r2, [sp]
   16494:	strd	r2, [r9]
   16498:	b	16160 <__assert_fail@plt+0x521c>
   1649c:	mov	r1, #1024	; 0x400
   164a0:	mov	r0, sp
   164a4:	bl	15ff8 <__assert_fail@plt+0x50b4>
   164a8:	b	16474 <__assert_fail@plt+0x5530>
   164ac:	mov	r2, #6
   164b0:	mov	r0, sp
   164b4:	bl	160a0 <__assert_fail@plt+0x515c>
   164b8:	b	16474 <__assert_fail@plt+0x5530>
   164bc:	mov	r2, #3
   164c0:	mov	r0, sp
   164c4:	bl	160a0 <__assert_fail@plt+0x515c>
   164c8:	b	16474 <__assert_fail@plt+0x5530>
   164cc:	mov	r2, #1
   164d0:	mov	r0, sp
   164d4:	bl	160a0 <__assert_fail@plt+0x515c>
   164d8:	b	16474 <__assert_fail@plt+0x5530>
   164dc:	mov	r2, #2
   164e0:	mov	r0, sp
   164e4:	bl	160a0 <__assert_fail@plt+0x515c>
   164e8:	b	16474 <__assert_fail@plt+0x5530>
   164ec:	mov	r2, #5
   164f0:	mov	r0, sp
   164f4:	bl	160a0 <__assert_fail@plt+0x515c>
   164f8:	b	16474 <__assert_fail@plt+0x5530>
   164fc:	mov	r2, #4
   16500:	mov	r0, sp
   16504:	bl	160a0 <__assert_fail@plt+0x515c>
   16508:	b	16474 <__assert_fail@plt+0x5530>
   1650c:	mov	r1, #2
   16510:	mov	r0, sp
   16514:	bl	15ff8 <__assert_fail@plt+0x50b4>
   16518:	b	16474 <__assert_fail@plt+0x5530>
   1651c:	mov	r2, #8
   16520:	mov	r0, sp
   16524:	bl	160a0 <__assert_fail@plt+0x515c>
   16528:	b	16474 <__assert_fail@plt+0x5530>
   1652c:	mov	r2, #7
   16530:	mov	r0, sp
   16534:	bl	160a0 <__assert_fail@plt+0x515c>
   16538:	b	16474 <__assert_fail@plt+0x5530>
   1653c:	ldrd	r2, [sp]
   16540:	strd	r2, [r9]
   16544:	orr	r4, r4, #2
   16548:	b	16160 <__assert_fail@plt+0x521c>
   1654c:	mov	r0, #0
   16550:	b	16474 <__assert_fail@plt+0x5530>
   16554:	andeq	r8, r1, r0, ror r8
   16558:	andeq	r8, r1, ip, ror r8
   1655c:	andeq	r8, r1, ip, lsl #17
   16560:	push	{r4, lr}
   16564:	mov	r2, r0
   16568:	mov	r3, r1
   1656c:	cmp	r1, #0
   16570:	cmpne	r0, #0
   16574:	moveq	r3, #1
   16578:	moveq	r2, r3
   1657c:	umull	r0, r1, r2, r3
   16580:	cmp	r0, #0
   16584:	cmpge	r1, #0
   16588:	bne	1659c <__assert_fail@plt+0x5658>
   1658c:	mov	r1, r3
   16590:	mov	r0, r2
   16594:	bl	10cc8 <calloc@plt>
   16598:	pop	{r4, pc}
   1659c:	bl	10e84 <__errno_location@plt>
   165a0:	mov	r3, #12
   165a4:	str	r3, [r0]
   165a8:	mov	r0, #0
   165ac:	pop	{r4, pc}
   165b0:	push	{r4, lr}
   165b4:	cmp	r0, #0
   165b8:	moveq	r0, #1
   165bc:	cmp	r0, #0
   165c0:	blt	165cc <__assert_fail@plt+0x5688>
   165c4:	bl	10e00 <malloc@plt>
   165c8:	pop	{r4, pc}
   165cc:	bl	10e84 <__errno_location@plt>
   165d0:	mov	r3, #12
   165d4:	str	r3, [r0]
   165d8:	mov	r0, #0
   165dc:	pop	{r4, pc}
   165e0:	push	{r4, lr}
   165e4:	cmp	r0, #0
   165e8:	beq	16604 <__assert_fail@plt+0x56c0>
   165ec:	cmp	r1, #0
   165f0:	beq	16610 <__assert_fail@plt+0x56cc>
   165f4:	cmp	r1, #0
   165f8:	blt	1661c <__assert_fail@plt+0x56d8>
   165fc:	bl	10d94 <realloc@plt>
   16600:	pop	{r4, pc}
   16604:	mov	r0, r1
   16608:	bl	165b0 <__assert_fail@plt+0x566c>
   1660c:	pop	{r4, pc}
   16610:	bl	13860 <__assert_fail@plt+0x291c>
   16614:	mov	r0, #0
   16618:	pop	{r4, pc}
   1661c:	bl	10e84 <__errno_location@plt>
   16620:	mov	r3, #12
   16624:	str	r3, [r0]
   16628:	mov	r0, #0
   1662c:	pop	{r4, pc}
   16630:	push	{r4, r5, r6, lr}
   16634:	mov	r5, r0
   16638:	bl	10ddc <__fpending@plt>
   1663c:	mov	r6, r0
   16640:	ldr	r4, [r5]
   16644:	and	r4, r4, #32
   16648:	mov	r0, r5
   1664c:	bl	166a8 <__assert_fail@plt+0x5764>
   16650:	cmp	r4, #0
   16654:	bne	1667c <__assert_fail@plt+0x5738>
   16658:	cmp	r0, #0
   1665c:	popeq	{r4, r5, r6, pc}
   16660:	cmp	r6, #0
   16664:	bne	16698 <__assert_fail@plt+0x5754>
   16668:	bl	10e84 <__errno_location@plt>
   1666c:	ldr	r0, [r0]
   16670:	subs	r0, r0, #9
   16674:	mvnne	r0, #0
   16678:	pop	{r4, r5, r6, pc}
   1667c:	cmp	r0, #0
   16680:	bne	166a0 <__assert_fail@plt+0x575c>
   16684:	bl	10e84 <__errno_location@plt>
   16688:	mov	r3, #0
   1668c:	str	r3, [r0]
   16690:	mvn	r0, #0
   16694:	pop	{r4, r5, r6, pc}
   16698:	mvn	r0, #0
   1669c:	pop	{r4, r5, r6, pc}
   166a0:	mvn	r0, #0
   166a4:	pop	{r4, r5, r6, pc}
   166a8:	push	{r4, r5, r6, lr}
   166ac:	sub	sp, sp, #8
   166b0:	mov	r4, r0
   166b4:	bl	10ec0 <fileno@plt>
   166b8:	cmp	r0, #0
   166bc:	blt	16734 <__assert_fail@plt+0x57f0>
   166c0:	mov	r0, r4
   166c4:	bl	10e18 <__freading@plt>
   166c8:	cmp	r0, #0
   166cc:	beq	16700 <__assert_fail@plt+0x57bc>
   166d0:	mov	r0, r4
   166d4:	bl	10ec0 <fileno@plt>
   166d8:	mov	r3, #1
   166dc:	str	r3, [sp]
   166e0:	mov	r2, #0
   166e4:	mov	r3, #0
   166e8:	bl	10dc4 <lseek64@plt>
   166ec:	mvn	r2, #0
   166f0:	mvn	r3, #0
   166f4:	cmp	r1, r3
   166f8:	cmpeq	r0, r2
   166fc:	beq	16740 <__assert_fail@plt+0x57fc>
   16700:	mov	r0, r4
   16704:	bl	16750 <__assert_fail@plt+0x580c>
   16708:	cmp	r0, #0
   1670c:	beq	16740 <__assert_fail@plt+0x57fc>
   16710:	bl	10e84 <__errno_location@plt>
   16714:	mov	r5, r0
   16718:	ldr	r6, [r0]
   1671c:	mov	r0, r4
   16720:	bl	10ed8 <fclose@plt>
   16724:	cmp	r6, #0
   16728:	strne	r6, [r5]
   1672c:	mvnne	r0, #0
   16730:	b	16748 <__assert_fail@plt+0x5804>
   16734:	mov	r0, r4
   16738:	bl	10ed8 <fclose@plt>
   1673c:	b	16748 <__assert_fail@plt+0x5804>
   16740:	mov	r0, r4
   16744:	bl	10ed8 <fclose@plt>
   16748:	add	sp, sp, #8
   1674c:	pop	{r4, r5, r6, pc}
   16750:	push	{r4, lr}
   16754:	sub	sp, sp, #8
   16758:	subs	r4, r0, #0
   1675c:	beq	16770 <__assert_fail@plt+0x582c>
   16760:	mov	r0, r4
   16764:	bl	10e18 <__freading@plt>
   16768:	cmp	r0, #0
   1676c:	bne	16780 <__assert_fail@plt+0x583c>
   16770:	mov	r0, r4
   16774:	bl	10d10 <fflush@plt>
   16778:	add	sp, sp, #8
   1677c:	pop	{r4, pc}
   16780:	ldr	r3, [r4]
   16784:	tst	r3, #256	; 0x100
   16788:	bne	16798 <__assert_fail@plt+0x5854>
   1678c:	mov	r0, r4
   16790:	bl	10d10 <fflush@plt>
   16794:	b	16778 <__assert_fail@plt+0x5834>
   16798:	mov	r3, #1
   1679c:	str	r3, [sp]
   167a0:	mov	r2, #0
   167a4:	mov	r3, #0
   167a8:	mov	r0, r4
   167ac:	bl	167b4 <__assert_fail@plt+0x5870>
   167b0:	b	1678c <__assert_fail@plt+0x5848>
   167b4:	push	{r4, r5, r6, r7, lr}
   167b8:	sub	sp, sp, #12
   167bc:	mov	r4, r0
   167c0:	mov	r6, r2
   167c4:	mov	r7, r3
   167c8:	ldr	r5, [sp, #32]
   167cc:	ldr	r2, [r0, #8]
   167d0:	ldr	r3, [r0, #4]
   167d4:	cmp	r2, r3
   167d8:	beq	167f8 <__assert_fail@plt+0x58b4>
   167dc:	str	r5, [sp]
   167e0:	mov	r2, r6
   167e4:	mov	r3, r7
   167e8:	mov	r0, r4
   167ec:	bl	10ee4 <fseeko64@plt>
   167f0:	add	sp, sp, #12
   167f4:	pop	{r4, r5, r6, r7, pc}
   167f8:	ldr	r2, [r0, #20]
   167fc:	ldr	r3, [r0, #16]
   16800:	cmp	r2, r3
   16804:	bne	167dc <__assert_fail@plt+0x5898>
   16808:	ldr	r3, [r0, #36]	; 0x24
   1680c:	cmp	r3, #0
   16810:	bne	167dc <__assert_fail@plt+0x5898>
   16814:	bl	10ec0 <fileno@plt>
   16818:	str	r5, [sp]
   1681c:	mov	r2, r6
   16820:	mov	r3, r7
   16824:	bl	10dc4 <lseek64@plt>
   16828:	mvn	r2, #0
   1682c:	mvn	r3, #0
   16830:	cmp	r1, r3
   16834:	cmpeq	r0, r2
   16838:	beq	16854 <__assert_fail@plt+0x5910>
   1683c:	ldr	r3, [r4]
   16840:	bic	r3, r3, #16
   16844:	str	r3, [r4]
   16848:	strd	r0, [r4, #80]	; 0x50
   1684c:	mov	r0, #0
   16850:	b	167f0 <__assert_fail@plt+0x58ac>
   16854:	mvn	r0, #0
   16858:	b	167f0 <__assert_fail@plt+0x58ac>
   1685c:	push	{r4, lr}
   16860:	mov	r0, #14
   16864:	bl	10f08 <nl_langinfo@plt>
   16868:	cmp	r0, #0
   1686c:	beq	16884 <__assert_fail@plt+0x5940>
   16870:	ldrb	r2, [r0]
   16874:	ldr	r3, [pc, #16]	; 1688c <__assert_fail@plt+0x5948>
   16878:	cmp	r2, #0
   1687c:	moveq	r0, r3
   16880:	pop	{r4, pc}
   16884:	ldr	r0, [pc]	; 1688c <__assert_fail@plt+0x5948>
   16888:	pop	{r4, pc}
   1688c:			; <UNDEFINED> instruction: 0x000188b4
   16890:	push	{r4, r5, r6, r7, lr}
   16894:	sub	sp, sp, #12
   16898:	mov	r7, r1
   1689c:	mov	r5, r2
   168a0:	subs	r6, r0, #0
   168a4:	addeq	r6, sp, #4
   168a8:	mov	r0, r6
   168ac:	bl	10de8 <mbrtowc@plt>
   168b0:	mov	r4, r0
   168b4:	cmp	r5, #0
   168b8:	cmnne	r0, #3
   168bc:	bhi	168cc <__assert_fail@plt+0x5988>
   168c0:	mov	r0, r4
   168c4:	add	sp, sp, #12
   168c8:	pop	{r4, r5, r6, r7, pc}
   168cc:	mov	r0, #0
   168d0:	bl	16934 <__assert_fail@plt+0x59f0>
   168d4:	cmp	r0, #0
   168d8:	ldrbeq	r3, [r7]
   168dc:	streq	r3, [r6]
   168e0:	moveq	r4, #1
   168e4:	b	168c0 <__assert_fail@plt+0x597c>
   168e8:	push	{r4, r5, r6, lr}
   168ec:	mov	r6, r0
   168f0:	mov	r5, r1
   168f4:	subs	r4, r2, #0
   168f8:	beq	16924 <__assert_fail@plt+0x59e0>
   168fc:	mov	r1, r4
   16900:	mvn	r0, #0
   16904:	bl	16a3c <__assert_fail@plt+0x5af8>
   16908:	cmp	r0, r5
   1690c:	bcs	16924 <__assert_fail@plt+0x59e0>
   16910:	bl	10e84 <__errno_location@plt>
   16914:	mov	r3, #12
   16918:	str	r3, [r0]
   1691c:	mov	r0, #0
   16920:	pop	{r4, r5, r6, pc}
   16924:	mul	r1, r5, r4
   16928:	mov	r0, r6
   1692c:	bl	165e0 <__assert_fail@plt+0x569c>
   16930:	pop	{r4, r5, r6, pc}
   16934:	push	{lr}		; (str lr, [sp, #-4]!)
   16938:	sub	sp, sp, #268	; 0x10c
   1693c:	ldr	r2, [pc, #68]	; 16988 <__assert_fail@plt+0x5a44>
   16940:	add	r1, sp, #4
   16944:	bl	16994 <__assert_fail@plt+0x5a50>
   16948:	cmp	r0, #0
   1694c:	movne	r0, #0
   16950:	bne	16980 <__assert_fail@plt+0x5a3c>
   16954:	ldr	r1, [pc, #48]	; 1698c <__assert_fail@plt+0x5a48>
   16958:	add	r0, sp, #4
   1695c:	bl	10cec <strcmp@plt>
   16960:	cmp	r0, #0
   16964:	moveq	r0, #0
   16968:	beq	16980 <__assert_fail@plt+0x5a3c>
   1696c:	ldr	r1, [pc, #28]	; 16990 <__assert_fail@plt+0x5a4c>
   16970:	add	r0, sp, #4
   16974:	bl	10cec <strcmp@plt>
   16978:	adds	r0, r0, #0
   1697c:	movne	r0, #1
   16980:	add	sp, sp, #268	; 0x10c
   16984:	pop	{pc}		; (ldr pc, [sp], #4)
   16988:	andeq	r0, r0, r1, lsl #2
   1698c:	andeq	r7, r1, r4, asr pc
   16990:			; <UNDEFINED> instruction: 0x000188bc
   16994:	push	{r4, r5, r6, lr}
   16998:	mov	r6, r1
   1699c:	mov	r4, r2
   169a0:	mov	r1, #0
   169a4:	bl	10ef0 <setlocale@plt>
   169a8:	subs	r5, r0, #0
   169ac:	beq	169d0 <__assert_fail@plt+0x5a8c>
   169b0:	mov	r0, r5
   169b4:	bl	10e6c <strlen@plt>
   169b8:	cmp	r4, r0
   169bc:	bhi	169e8 <__assert_fail@plt+0x5aa4>
   169c0:	cmp	r4, #0
   169c4:	bne	16a00 <__assert_fail@plt+0x5abc>
   169c8:	mov	r0, #34	; 0x22
   169cc:	pop	{r4, r5, r6, pc}
   169d0:	cmp	r4, #0
   169d4:	beq	16a24 <__assert_fail@plt+0x5ae0>
   169d8:	mov	r3, #0
   169dc:	strb	r3, [r6]
   169e0:	mov	r0, #22
   169e4:	pop	{r4, r5, r6, pc}
   169e8:	add	r2, r0, #1
   169ec:	mov	r1, r5
   169f0:	mov	r0, r6
   169f4:	bl	10d34 <memcpy@plt>
   169f8:	mov	r0, #0
   169fc:	pop	{r4, r5, r6, pc}
   16a00:	sub	r4, r4, #1
   16a04:	mov	r2, r4
   16a08:	mov	r1, r5
   16a0c:	mov	r0, r6
   16a10:	bl	10d34 <memcpy@plt>
   16a14:	mov	r3, #0
   16a18:	strb	r3, [r6, r4]
   16a1c:	mov	r0, #34	; 0x22
   16a20:	pop	{r4, r5, r6, pc}
   16a24:	mov	r0, #22
   16a28:	pop	{r4, r5, r6, pc}
   16a2c:	push	{r4, lr}
   16a30:	mov	r1, #0
   16a34:	bl	10ef0 <setlocale@plt>
   16a38:	pop	{r4, pc}
   16a3c:	subs	r2, r1, #1
   16a40:	bxeq	lr
   16a44:	bcc	16c1c <__assert_fail@plt+0x5cd8>
   16a48:	cmp	r0, r1
   16a4c:	bls	16c00 <__assert_fail@plt+0x5cbc>
   16a50:	tst	r1, r2
   16a54:	beq	16c0c <__assert_fail@plt+0x5cc8>
   16a58:	clz	r3, r0
   16a5c:	clz	r2, r1
   16a60:	sub	r3, r2, r3
   16a64:	rsbs	r3, r3, #31
   16a68:	addne	r3, r3, r3, lsl #1
   16a6c:	mov	r2, #0
   16a70:	addne	pc, pc, r3, lsl #2
   16a74:	nop			; (mov r0, r0)
   16a78:	cmp	r0, r1, lsl #31
   16a7c:	adc	r2, r2, r2
   16a80:	subcs	r0, r0, r1, lsl #31
   16a84:	cmp	r0, r1, lsl #30
   16a88:	adc	r2, r2, r2
   16a8c:	subcs	r0, r0, r1, lsl #30
   16a90:	cmp	r0, r1, lsl #29
   16a94:	adc	r2, r2, r2
   16a98:	subcs	r0, r0, r1, lsl #29
   16a9c:	cmp	r0, r1, lsl #28
   16aa0:	adc	r2, r2, r2
   16aa4:	subcs	r0, r0, r1, lsl #28
   16aa8:	cmp	r0, r1, lsl #27
   16aac:	adc	r2, r2, r2
   16ab0:	subcs	r0, r0, r1, lsl #27
   16ab4:	cmp	r0, r1, lsl #26
   16ab8:	adc	r2, r2, r2
   16abc:	subcs	r0, r0, r1, lsl #26
   16ac0:	cmp	r0, r1, lsl #25
   16ac4:	adc	r2, r2, r2
   16ac8:	subcs	r0, r0, r1, lsl #25
   16acc:	cmp	r0, r1, lsl #24
   16ad0:	adc	r2, r2, r2
   16ad4:	subcs	r0, r0, r1, lsl #24
   16ad8:	cmp	r0, r1, lsl #23
   16adc:	adc	r2, r2, r2
   16ae0:	subcs	r0, r0, r1, lsl #23
   16ae4:	cmp	r0, r1, lsl #22
   16ae8:	adc	r2, r2, r2
   16aec:	subcs	r0, r0, r1, lsl #22
   16af0:	cmp	r0, r1, lsl #21
   16af4:	adc	r2, r2, r2
   16af8:	subcs	r0, r0, r1, lsl #21
   16afc:	cmp	r0, r1, lsl #20
   16b00:	adc	r2, r2, r2
   16b04:	subcs	r0, r0, r1, lsl #20
   16b08:	cmp	r0, r1, lsl #19
   16b0c:	adc	r2, r2, r2
   16b10:	subcs	r0, r0, r1, lsl #19
   16b14:	cmp	r0, r1, lsl #18
   16b18:	adc	r2, r2, r2
   16b1c:	subcs	r0, r0, r1, lsl #18
   16b20:	cmp	r0, r1, lsl #17
   16b24:	adc	r2, r2, r2
   16b28:	subcs	r0, r0, r1, lsl #17
   16b2c:	cmp	r0, r1, lsl #16
   16b30:	adc	r2, r2, r2
   16b34:	subcs	r0, r0, r1, lsl #16
   16b38:	cmp	r0, r1, lsl #15
   16b3c:	adc	r2, r2, r2
   16b40:	subcs	r0, r0, r1, lsl #15
   16b44:	cmp	r0, r1, lsl #14
   16b48:	adc	r2, r2, r2
   16b4c:	subcs	r0, r0, r1, lsl #14
   16b50:	cmp	r0, r1, lsl #13
   16b54:	adc	r2, r2, r2
   16b58:	subcs	r0, r0, r1, lsl #13
   16b5c:	cmp	r0, r1, lsl #12
   16b60:	adc	r2, r2, r2
   16b64:	subcs	r0, r0, r1, lsl #12
   16b68:	cmp	r0, r1, lsl #11
   16b6c:	adc	r2, r2, r2
   16b70:	subcs	r0, r0, r1, lsl #11
   16b74:	cmp	r0, r1, lsl #10
   16b78:	adc	r2, r2, r2
   16b7c:	subcs	r0, r0, r1, lsl #10
   16b80:	cmp	r0, r1, lsl #9
   16b84:	adc	r2, r2, r2
   16b88:	subcs	r0, r0, r1, lsl #9
   16b8c:	cmp	r0, r1, lsl #8
   16b90:	adc	r2, r2, r2
   16b94:	subcs	r0, r0, r1, lsl #8
   16b98:	cmp	r0, r1, lsl #7
   16b9c:	adc	r2, r2, r2
   16ba0:	subcs	r0, r0, r1, lsl #7
   16ba4:	cmp	r0, r1, lsl #6
   16ba8:	adc	r2, r2, r2
   16bac:	subcs	r0, r0, r1, lsl #6
   16bb0:	cmp	r0, r1, lsl #5
   16bb4:	adc	r2, r2, r2
   16bb8:	subcs	r0, r0, r1, lsl #5
   16bbc:	cmp	r0, r1, lsl #4
   16bc0:	adc	r2, r2, r2
   16bc4:	subcs	r0, r0, r1, lsl #4
   16bc8:	cmp	r0, r1, lsl #3
   16bcc:	adc	r2, r2, r2
   16bd0:	subcs	r0, r0, r1, lsl #3
   16bd4:	cmp	r0, r1, lsl #2
   16bd8:	adc	r2, r2, r2
   16bdc:	subcs	r0, r0, r1, lsl #2
   16be0:	cmp	r0, r1, lsl #1
   16be4:	adc	r2, r2, r2
   16be8:	subcs	r0, r0, r1, lsl #1
   16bec:	cmp	r0, r1
   16bf0:	adc	r2, r2, r2
   16bf4:	subcs	r0, r0, r1
   16bf8:	mov	r0, r2
   16bfc:	bx	lr
   16c00:	moveq	r0, #1
   16c04:	movne	r0, #0
   16c08:	bx	lr
   16c0c:	clz	r2, r1
   16c10:	rsb	r2, r2, #31
   16c14:	lsr	r0, r0, r2
   16c18:	bx	lr
   16c1c:	cmp	r0, #0
   16c20:	mvnne	r0, #0
   16c24:	b	16ec4 <__assert_fail@plt+0x5f80>
   16c28:	cmp	r1, #0
   16c2c:	beq	16c1c <__assert_fail@plt+0x5cd8>
   16c30:	push	{r0, r1, lr}
   16c34:	bl	16a3c <__assert_fail@plt+0x5af8>
   16c38:	pop	{r1, r2, lr}
   16c3c:	mul	r3, r2, r0
   16c40:	sub	r1, r1, r3
   16c44:	bx	lr
   16c48:	cmp	r1, #0
   16c4c:	beq	16e58 <__assert_fail@plt+0x5f14>
   16c50:	eor	ip, r0, r1
   16c54:	rsbmi	r1, r1, #0
   16c58:	subs	r2, r1, #1
   16c5c:	beq	16e24 <__assert_fail@plt+0x5ee0>
   16c60:	movs	r3, r0
   16c64:	rsbmi	r3, r0, #0
   16c68:	cmp	r3, r1
   16c6c:	bls	16e30 <__assert_fail@plt+0x5eec>
   16c70:	tst	r1, r2
   16c74:	beq	16e40 <__assert_fail@plt+0x5efc>
   16c78:	clz	r2, r3
   16c7c:	clz	r0, r1
   16c80:	sub	r2, r0, r2
   16c84:	rsbs	r2, r2, #31
   16c88:	addne	r2, r2, r2, lsl #1
   16c8c:	mov	r0, #0
   16c90:	addne	pc, pc, r2, lsl #2
   16c94:	nop			; (mov r0, r0)
   16c98:	cmp	r3, r1, lsl #31
   16c9c:	adc	r0, r0, r0
   16ca0:	subcs	r3, r3, r1, lsl #31
   16ca4:	cmp	r3, r1, lsl #30
   16ca8:	adc	r0, r0, r0
   16cac:	subcs	r3, r3, r1, lsl #30
   16cb0:	cmp	r3, r1, lsl #29
   16cb4:	adc	r0, r0, r0
   16cb8:	subcs	r3, r3, r1, lsl #29
   16cbc:	cmp	r3, r1, lsl #28
   16cc0:	adc	r0, r0, r0
   16cc4:	subcs	r3, r3, r1, lsl #28
   16cc8:	cmp	r3, r1, lsl #27
   16ccc:	adc	r0, r0, r0
   16cd0:	subcs	r3, r3, r1, lsl #27
   16cd4:	cmp	r3, r1, lsl #26
   16cd8:	adc	r0, r0, r0
   16cdc:	subcs	r3, r3, r1, lsl #26
   16ce0:	cmp	r3, r1, lsl #25
   16ce4:	adc	r0, r0, r0
   16ce8:	subcs	r3, r3, r1, lsl #25
   16cec:	cmp	r3, r1, lsl #24
   16cf0:	adc	r0, r0, r0
   16cf4:	subcs	r3, r3, r1, lsl #24
   16cf8:	cmp	r3, r1, lsl #23
   16cfc:	adc	r0, r0, r0
   16d00:	subcs	r3, r3, r1, lsl #23
   16d04:	cmp	r3, r1, lsl #22
   16d08:	adc	r0, r0, r0
   16d0c:	subcs	r3, r3, r1, lsl #22
   16d10:	cmp	r3, r1, lsl #21
   16d14:	adc	r0, r0, r0
   16d18:	subcs	r3, r3, r1, lsl #21
   16d1c:	cmp	r3, r1, lsl #20
   16d20:	adc	r0, r0, r0
   16d24:	subcs	r3, r3, r1, lsl #20
   16d28:	cmp	r3, r1, lsl #19
   16d2c:	adc	r0, r0, r0
   16d30:	subcs	r3, r3, r1, lsl #19
   16d34:	cmp	r3, r1, lsl #18
   16d38:	adc	r0, r0, r0
   16d3c:	subcs	r3, r3, r1, lsl #18
   16d40:	cmp	r3, r1, lsl #17
   16d44:	adc	r0, r0, r0
   16d48:	subcs	r3, r3, r1, lsl #17
   16d4c:	cmp	r3, r1, lsl #16
   16d50:	adc	r0, r0, r0
   16d54:	subcs	r3, r3, r1, lsl #16
   16d58:	cmp	r3, r1, lsl #15
   16d5c:	adc	r0, r0, r0
   16d60:	subcs	r3, r3, r1, lsl #15
   16d64:	cmp	r3, r1, lsl #14
   16d68:	adc	r0, r0, r0
   16d6c:	subcs	r3, r3, r1, lsl #14
   16d70:	cmp	r3, r1, lsl #13
   16d74:	adc	r0, r0, r0
   16d78:	subcs	r3, r3, r1, lsl #13
   16d7c:	cmp	r3, r1, lsl #12
   16d80:	adc	r0, r0, r0
   16d84:	subcs	r3, r3, r1, lsl #12
   16d88:	cmp	r3, r1, lsl #11
   16d8c:	adc	r0, r0, r0
   16d90:	subcs	r3, r3, r1, lsl #11
   16d94:	cmp	r3, r1, lsl #10
   16d98:	adc	r0, r0, r0
   16d9c:	subcs	r3, r3, r1, lsl #10
   16da0:	cmp	r3, r1, lsl #9
   16da4:	adc	r0, r0, r0
   16da8:	subcs	r3, r3, r1, lsl #9
   16dac:	cmp	r3, r1, lsl #8
   16db0:	adc	r0, r0, r0
   16db4:	subcs	r3, r3, r1, lsl #8
   16db8:	cmp	r3, r1, lsl #7
   16dbc:	adc	r0, r0, r0
   16dc0:	subcs	r3, r3, r1, lsl #7
   16dc4:	cmp	r3, r1, lsl #6
   16dc8:	adc	r0, r0, r0
   16dcc:	subcs	r3, r3, r1, lsl #6
   16dd0:	cmp	r3, r1, lsl #5
   16dd4:	adc	r0, r0, r0
   16dd8:	subcs	r3, r3, r1, lsl #5
   16ddc:	cmp	r3, r1, lsl #4
   16de0:	adc	r0, r0, r0
   16de4:	subcs	r3, r3, r1, lsl #4
   16de8:	cmp	r3, r1, lsl #3
   16dec:	adc	r0, r0, r0
   16df0:	subcs	r3, r3, r1, lsl #3
   16df4:	cmp	r3, r1, lsl #2
   16df8:	adc	r0, r0, r0
   16dfc:	subcs	r3, r3, r1, lsl #2
   16e00:	cmp	r3, r1, lsl #1
   16e04:	adc	r0, r0, r0
   16e08:	subcs	r3, r3, r1, lsl #1
   16e0c:	cmp	r3, r1
   16e10:	adc	r0, r0, r0
   16e14:	subcs	r3, r3, r1
   16e18:	cmp	ip, #0
   16e1c:	rsbmi	r0, r0, #0
   16e20:	bx	lr
   16e24:	teq	ip, r0
   16e28:	rsbmi	r0, r0, #0
   16e2c:	bx	lr
   16e30:	movcc	r0, #0
   16e34:	asreq	r0, ip, #31
   16e38:	orreq	r0, r0, #1
   16e3c:	bx	lr
   16e40:	clz	r2, r1
   16e44:	rsb	r2, r2, #31
   16e48:	cmp	ip, #0
   16e4c:	lsr	r0, r3, r2
   16e50:	rsbmi	r0, r0, #0
   16e54:	bx	lr
   16e58:	cmp	r0, #0
   16e5c:	mvngt	r0, #-2147483648	; 0x80000000
   16e60:	movlt	r0, #-2147483648	; 0x80000000
   16e64:	b	16ec4 <__assert_fail@plt+0x5f80>
   16e68:	cmp	r1, #0
   16e6c:	beq	16e58 <__assert_fail@plt+0x5f14>
   16e70:	push	{r0, r1, lr}
   16e74:	bl	16c50 <__assert_fail@plt+0x5d0c>
   16e78:	pop	{r1, r2, lr}
   16e7c:	mul	r3, r2, r0
   16e80:	sub	r1, r1, r3
   16e84:	bx	lr
   16e88:	cmp	r3, #0
   16e8c:	cmpeq	r2, #0
   16e90:	bne	16ea8 <__assert_fail@plt+0x5f64>
   16e94:	cmp	r1, #0
   16e98:	cmpeq	r0, #0
   16e9c:	mvnne	r1, #0
   16ea0:	mvnne	r0, #0
   16ea4:	b	16ec4 <__assert_fail@plt+0x5f80>
   16ea8:	sub	sp, sp, #8
   16eac:	push	{sp, lr}
   16eb0:	bl	16ed4 <__assert_fail@plt+0x5f90>
   16eb4:	ldr	lr, [sp, #4]
   16eb8:	add	sp, sp, #8
   16ebc:	pop	{r2, r3}
   16ec0:	bx	lr
   16ec4:	push	{r1, lr}
   16ec8:	mov	r0, #8
   16ecc:	bl	10ce0 <raise@plt>
   16ed0:	pop	{r1, pc}
   16ed4:	cmp	r1, r3
   16ed8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16edc:	cmpeq	r0, r2
   16ee0:	mov	r4, r0
   16ee4:	mov	r5, r1
   16ee8:	ldr	r9, [sp, #28]
   16eec:	movcc	r0, #0
   16ef0:	movcc	r1, #0
   16ef4:	bcc	16fec <__assert_fail@plt+0x60a8>
   16ef8:	cmp	r3, #0
   16efc:	clzeq	ip, r2
   16f00:	clzne	ip, r3
   16f04:	addeq	ip, ip, #32
   16f08:	cmp	r5, #0
   16f0c:	clzeq	r1, r4
   16f10:	addeq	r1, r1, #32
   16f14:	clzne	r1, r5
   16f18:	sub	ip, ip, r1
   16f1c:	sub	lr, ip, #32
   16f20:	lsl	r7, r3, ip
   16f24:	rsb	r8, ip, #32
   16f28:	orr	r7, r7, r2, lsl lr
   16f2c:	orr	r7, r7, r2, lsr r8
   16f30:	lsl	r6, r2, ip
   16f34:	cmp	r5, r7
   16f38:	cmpeq	r4, r6
   16f3c:	movcc	r0, #0
   16f40:	movcc	r1, #0
   16f44:	bcc	16f60 <__assert_fail@plt+0x601c>
   16f48:	mov	r3, #1
   16f4c:	subs	r4, r4, r6
   16f50:	lsl	r1, r3, lr
   16f54:	lsl	r0, r3, ip
   16f58:	orr	r1, r1, r3, lsr r8
   16f5c:	sbc	r5, r5, r7
   16f60:	cmp	ip, #0
   16f64:	beq	16fec <__assert_fail@plt+0x60a8>
   16f68:	lsrs	r3, r7, #1
   16f6c:	rrx	r2, r6
   16f70:	mov	r6, ip
   16f74:	b	16f98 <__assert_fail@plt+0x6054>
   16f78:	subs	r4, r4, r2
   16f7c:	sbc	r5, r5, r3
   16f80:	adds	r4, r4, r4
   16f84:	adc	r5, r5, r5
   16f88:	adds	r4, r4, #1
   16f8c:	adc	r5, r5, #0
   16f90:	subs	r6, r6, #1
   16f94:	beq	16fb4 <__assert_fail@plt+0x6070>
   16f98:	cmp	r5, r3
   16f9c:	cmpeq	r4, r2
   16fa0:	bcs	16f78 <__assert_fail@plt+0x6034>
   16fa4:	adds	r4, r4, r4
   16fa8:	adc	r5, r5, r5
   16fac:	subs	r6, r6, #1
   16fb0:	bne	16f98 <__assert_fail@plt+0x6054>
   16fb4:	lsr	r6, r4, ip
   16fb8:	lsr	r7, r5, ip
   16fbc:	orr	r6, r6, r5, lsl r8
   16fc0:	adds	r2, r0, r4
   16fc4:	orr	r6, r6, r5, lsr lr
   16fc8:	adc	r3, r1, r5
   16fcc:	lsl	r1, r7, ip
   16fd0:	orr	r1, r1, r6, lsl lr
   16fd4:	lsl	r0, r6, ip
   16fd8:	orr	r1, r1, r6, lsr r8
   16fdc:	subs	r0, r2, r0
   16fe0:	mov	r4, r6
   16fe4:	mov	r5, r7
   16fe8:	sbc	r1, r3, r1
   16fec:	cmp	r9, #0
   16ff0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16ff4:	strd	r4, [r9]
   16ff8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ffc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17000:	mov	r7, r0
   17004:	ldr	r6, [pc, #72]	; 17054 <__assert_fail@plt+0x6110>
   17008:	ldr	r5, [pc, #72]	; 17058 <__assert_fail@plt+0x6114>
   1700c:	add	r6, pc, r6
   17010:	add	r5, pc, r5
   17014:	sub	r6, r6, r5
   17018:	mov	r8, r1
   1701c:	mov	r9, r2
   17020:	bl	10ca8 <calloc@plt-0x20>
   17024:	asrs	r6, r6, #2
   17028:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1702c:	mov	r4, #0
   17030:	add	r4, r4, #1
   17034:	ldr	r3, [r5], #4
   17038:	mov	r2, r9
   1703c:	mov	r1, r8
   17040:	mov	r0, r7
   17044:	blx	r3
   17048:	cmp	r6, r4
   1704c:	bne	17030 <__assert_fail@plt+0x60ec>
   17050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17054:	strdeq	r1, [r1], -ip
   17058:	strdeq	r1, [r1], -r4
   1705c:	bx	lr
   17060:	ldr	r3, [pc, #12]	; 17074 <__assert_fail@plt+0x6130>
   17064:	mov	r1, #0
   17068:	add	r3, pc, r3
   1706c:	ldr	r2, [r3]
   17070:	b	10e9c <__cxa_atexit@plt>
   17074:	andeq	r2, r1, ip, ror r0

Disassembly of section .fini:

00017078 <.fini>:
   17078:	push	{r3, lr}
   1707c:	pop	{r3, pc}
