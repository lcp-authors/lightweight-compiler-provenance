
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e1c <.init>:
   10e1c:	push	{r3, lr}
   10e20:	bl	11100 <__assert_fail@plt+0x48>
   10e24:	pop	{r3, pc}

Disassembly of section .plt:

00010e28 <calloc@plt-0x14>:
   10e28:	push	{lr}		; (str lr, [sp, #-4]!)
   10e2c:	ldr	lr, [pc, #4]	; 10e38 <calloc@plt-0x4>
   10e30:	add	lr, pc, lr
   10e34:	ldr	pc, [lr, #8]!
   10e38:	andeq	r8, r1, r8, asr #3

00010e3c <calloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #456]!	; 0x1c8

00010e48 <fputs_unlocked@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #448]!	; 0x1c0

00010e54 <raise@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #440]!	; 0x1b8

00010e60 <strcmp@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #432]!	; 0x1b0

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #424]!	; 0x1a8

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #416]!	; 0x1a0

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #408]!	; 0x198

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #400]!	; 0x190

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #392]!	; 0x188

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #384]!	; 0x180

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #376]!	; 0x178

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #368]!	; 0x170

00010ecc <dcgettext@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #360]!	; 0x168

00010ed8 <realloc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #352]!	; 0x160

00010ee4 <textdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #344]!	; 0x158

00010ef0 <rawmemchr@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #336]!	; 0x150

00010efc <iswprint@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #328]!	; 0x148

00010f08 <__fxstat64@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #320]!	; 0x140

00010f14 <fwrite@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #312]!	; 0x138

00010f20 <lseek64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #304]!	; 0x130

00010f2c <__ctype_get_mb_cur_max@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #296]!	; 0x128

00010f38 <__fpending@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #288]!	; 0x120

00010f44 <mbrtowc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #280]!	; 0x118

00010f50 <error@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #272]!	; 0x110

00010f5c <open64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #264]!	; 0x108

00010f68 <malloc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #256]!	; 0x100

00010f74 <__libc_start_main@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #248]!	; 0xf8

00010f80 <__freading@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #240]!	; 0xf0

00010f8c <__gmon_start__@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #232]!	; 0xe8

00010f98 <getopt_long@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #224]!	; 0xe0

00010fa4 <__ctype_b_loc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #216]!	; 0xd8

00010fb0 <exit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #208]!	; 0xd0

00010fbc <bcmp@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #200]!	; 0xc8

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #192]!	; 0xc0

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #184]!	; 0xb8

00010fe0 <memrchr@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #176]!	; 0xb0

00010fec <__errno_location@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #168]!	; 0xa8

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #160]!	; 0xa0

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #152]!	; 0x98

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #144]!	; 0x90

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #136]!	; 0x88

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #128]!	; 0x80

00011034 <memchr@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #120]!	; 0x78

00011040 <fclose@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #112]!	; 0x70

0001104c <fseeko64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #104]!	; 0x68

00011058 <setlocale@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #96]!	; 0x60

00011064 <strrchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #88]!	; 0x58

00011070 <nl_langinfo@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #80]!	; 0x50

0001107c <clearerr_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #72]!	; 0x48

00011088 <bindtextdomain@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #64]!	; 0x40

00011094 <strncmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #56]!	; 0x38

000110a0 <abort@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #48]!	; 0x30

000110ac <close@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #40]!	; 0x28

000110b8 <__assert_fail@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110c4 <.text>:
   110c4:	mov	fp, #0
   110c8:	mov	lr, #0
   110cc:	pop	{r1}		; (ldr r1, [sp], #4)
   110d0:	mov	r2, sp
   110d4:	push	{r2}		; (str r2, [sp, #-4]!)
   110d8:	push	{r0}		; (str r0, [sp, #-4]!)
   110dc:	ldr	ip, [pc, #16]	; 110f4 <__assert_fail@plt+0x3c>
   110e0:	push	{ip}		; (str ip, [sp, #-4]!)
   110e4:	ldr	r0, [pc, #12]	; 110f8 <__assert_fail@plt+0x40>
   110e8:	ldr	r3, [pc, #12]	; 110fc <__assert_fail@plt+0x44>
   110ec:	bl	10f74 <__libc_start_main@plt>
   110f0:	bl	110a0 <abort@plt>
   110f4:	andeq	r7, r1, r8, asr r2
   110f8:			; <UNDEFINED> instruction: 0x000114b0
   110fc:	strdeq	r7, [r1], -r8
   11100:	ldr	r3, [pc, #20]	; 1111c <__assert_fail@plt+0x64>
   11104:	ldr	r2, [pc, #20]	; 11120 <__assert_fail@plt+0x68>
   11108:	add	r3, pc, r3
   1110c:	ldr	r2, [r3, r2]
   11110:	cmp	r2, #0
   11114:	bxeq	lr
   11118:	b	10f8c <__gmon_start__@plt>
   1111c:	strdeq	r7, [r1], -r0
   11120:	andeq	r0, r0, r4, ror #1
   11124:	ldr	r0, [pc, #24]	; 11144 <__assert_fail@plt+0x8c>
   11128:	ldr	r3, [pc, #24]	; 11148 <__assert_fail@plt+0x90>
   1112c:	cmp	r3, r0
   11130:	bxeq	lr
   11134:	ldr	r3, [pc, #16]	; 1114c <__assert_fail@plt+0x94>
   11138:	cmp	r3, #0
   1113c:	bxeq	lr
   11140:	bx	r3
   11144:	andeq	r9, r2, r8, lsr r1
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r0, r0, r0
   11150:	ldr	r0, [pc, #36]	; 1117c <__assert_fail@plt+0xc4>
   11154:	ldr	r1, [pc, #36]	; 11180 <__assert_fail@plt+0xc8>
   11158:	sub	r1, r1, r0
   1115c:	asr	r1, r1, #2
   11160:	add	r1, r1, r1, lsr #31
   11164:	asrs	r1, r1, #1
   11168:	bxeq	lr
   1116c:	ldr	r3, [pc, #16]	; 11184 <__assert_fail@plt+0xcc>
   11170:	cmp	r3, #0
   11174:	bxeq	lr
   11178:	bx	r3
   1117c:	andeq	r9, r2, r8, lsr r1
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r0, r0, r0
   11188:	push	{r4, lr}
   1118c:	ldr	r4, [pc, #24]	; 111ac <__assert_fail@plt+0xf4>
   11190:	ldrb	r3, [r4]
   11194:	cmp	r3, #0
   11198:	popne	{r4, pc}
   1119c:	bl	11124 <__assert_fail@plt+0x6c>
   111a0:	mov	r3, #1
   111a4:	strb	r3, [r4]
   111a8:	pop	{r4, pc}
   111ac:	andeq	r9, r2, r4, asr r1
   111b0:	b	11150 <__assert_fail@plt+0x98>
   111b4:	push	{fp, lr}
   111b8:	mov	fp, sp
   111bc:	sub	sp, sp, #56	; 0x38
   111c0:	mov	r4, r0
   111c4:	cmp	r0, #0
   111c8:	bne	1146c <__assert_fail@plt+0x3b4>
   111cc:	movw	r1, #29355	; 0x72ab
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10ecc <dcgettext@plt>
   111e0:	mov	r1, r0
   111e4:	movw	r0, #37220	; 0x9164
   111e8:	movt	r0, #2
   111ec:	ldr	r2, [r0]
   111f0:	mov	r0, #1
   111f4:	bl	11010 <__printf_chk@plt>
   111f8:	movw	r1, #29388	; 0x72cc
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10ecc <dcgettext@plt>
   1120c:	mov	r1, r0
   11210:	mov	r0, #1
   11214:	mov	r2, #10
   11218:	bl	11010 <__printf_chk@plt>
   1121c:	movw	r1, #30576	; 0x7770
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10ecc <dcgettext@plt>
   11230:	movw	r7, #37196	; 0x914c
   11234:	movt	r7, #2
   11238:	ldr	r1, [r7]
   1123c:	bl	10e48 <fputs_unlocked@plt>
   11240:	movw	r1, #30632	; 0x77a8
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ecc <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e48 <fputs_unlocked@plt>
   1125c:	movw	r1, #29521	; 0x7351
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ecc <dcgettext@plt>
   11270:	mov	r1, r0
   11274:	mov	r0, #1
   11278:	mov	r2, #10
   1127c:	bl	11010 <__printf_chk@plt>
   11280:	movw	r1, #29919	; 0x74df
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ecc <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10e48 <fputs_unlocked@plt>
   1129c:	movw	r1, #30051	; 0x7563
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10ecc <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10e48 <fputs_unlocked@plt>
   112b8:	movw	r1, #30114	; 0x75a2
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10ecc <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10e48 <fputs_unlocked@plt>
   112d4:	movw	r1, #30159	; 0x75cf
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10ecc <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10e48 <fputs_unlocked@plt>
   112f0:	movw	r1, #30213	; 0x7605
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10ecc <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10e48 <fputs_unlocked@plt>
   1130c:	movw	r0, #31568	; 0x7b50
   11310:	mov	r2, #48	; 0x30
   11314:	mov	r6, sp
   11318:	movw	r5, #30425	; 0x76d9
   1131c:	movt	r0, #1
   11320:	movt	r5, #1
   11324:	add	r1, r0, #32
   11328:	add	r3, r0, #16
   1132c:	vld1.64	{d18-d19}, [r0], r2
   11330:	vld1.64	{d16-d17}, [r1]
   11334:	vld1.64	{d20-d21}, [r3]
   11338:	vldr	d22, [r0]
   1133c:	add	r1, r6, #32
   11340:	add	r0, r6, #16
   11344:	vst1.64	{d16-d17}, [r1]
   11348:	movw	r1, #30707	; 0x77f3
   1134c:	vst1.64	{d20-d21}, [r0]
   11350:	mov	r0, r6
   11354:	movt	r1, #1
   11358:	vst1.64	{d18-d19}, [r0], r2
   1135c:	vstr	d22, [r0]
   11360:	mov	r0, r5
   11364:	bl	10e60 <strcmp@plt>
   11368:	cmp	r0, #0
   1136c:	ldrne	r1, [r6, #8]!
   11370:	cmpne	r1, #0
   11374:	bne	11360 <__assert_fail@plt+0x2a8>
   11378:	movw	r1, #30802	; 0x7852
   1137c:	ldr	r6, [r6, #4]
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ecc <dcgettext@plt>
   11390:	movw	r2, #30502	; 0x7726
   11394:	movw	r3, #30825	; 0x7869
   11398:	mov	r1, r0
   1139c:	mov	r0, #1
   113a0:	movt	r2, #1
   113a4:	movt	r3, #1
   113a8:	bl	11010 <__printf_chk@plt>
   113ac:	cmp	r6, #0
   113b0:	mov	r0, #5
   113b4:	mov	r1, #0
   113b8:	moveq	r6, r5
   113bc:	bl	11058 <setlocale@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	113fc <__assert_fail@plt+0x344>
   113c8:	movw	r1, #30865	; 0x7891
   113cc:	mov	r2, #3
   113d0:	movt	r1, #1
   113d4:	bl	11094 <strncmp@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	113fc <__assert_fail@plt+0x344>
   113e0:	movw	r1, #30869	; 0x7895
   113e4:	mov	r0, #0
   113e8:	mov	r2, #5
   113ec:	movt	r1, #1
   113f0:	bl	10ecc <dcgettext@plt>
   113f4:	ldr	r1, [r7]
   113f8:	bl	10e48 <fputs_unlocked@plt>
   113fc:	movw	r1, #30940	; 0x78dc
   11400:	mov	r0, #0
   11404:	mov	r2, #5
   11408:	movt	r1, #1
   1140c:	bl	10ecc <dcgettext@plt>
   11410:	movw	r2, #30825	; 0x7869
   11414:	mov	r1, r0
   11418:	mov	r0, #1
   1141c:	mov	r3, r5
   11420:	movt	r2, #1
   11424:	bl	11010 <__printf_chk@plt>
   11428:	movw	r1, #30967	; 0x78f7
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	movt	r1, #1
   11438:	bl	10ecc <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r0, #30735	; 0x780f
   11444:	movw	r3, #31017	; 0x7929
   11448:	cmp	r6, r5
   1144c:	mov	r2, r6
   11450:	movt	r0, #1
   11454:	movt	r3, #1
   11458:	moveq	r3, r0
   1145c:	mov	r0, #1
   11460:	bl	11010 <__printf_chk@plt>
   11464:	mov	r0, r4
   11468:	bl	10fb0 <exit@plt>
   1146c:	movw	r0, #37192	; 0x9148
   11470:	movw	r1, #29316	; 0x7284
   11474:	mov	r2, #5
   11478:	movt	r0, #2
   1147c:	movt	r1, #1
   11480:	ldr	r5, [r0]
   11484:	mov	r0, #0
   11488:	bl	10ecc <dcgettext@plt>
   1148c:	mov	r2, r0
   11490:	movw	r0, #37220	; 0x9164
   11494:	mov	r1, #1
   11498:	movt	r0, #2
   1149c:	ldr	r3, [r0]
   114a0:	mov	r0, r5
   114a4:	bl	11028 <__fprintf_chk@plt>
   114a8:	mov	r0, r4
   114ac:	bl	10fb0 <exit@plt>
   114b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114b4:	add	fp, sp, #28
   114b8:	sub	sp, sp, #236	; 0xec
   114bc:	sub	sp, sp, #16384	; 0x4000
   114c0:	mov	r4, r0
   114c4:	ldr	r0, [r1]
   114c8:	mov	r6, r1
   114cc:	bl	132f8 <__assert_fail@plt+0x2240>
   114d0:	movw	r1, #31017	; 0x7929
   114d4:	mov	r0, #6
   114d8:	movt	r1, #1
   114dc:	bl	11058 <setlocale@plt>
   114e0:	movw	r5, #30506	; 0x772a
   114e4:	movw	r1, #30430	; 0x76de
   114e8:	movt	r5, #1
   114ec:	movt	r1, #1
   114f0:	mov	r0, r5
   114f4:	bl	11088 <bindtextdomain@plt>
   114f8:	mov	r0, r5
   114fc:	bl	10ee4 <textdomain@plt>
   11500:	movw	r0, #12372	; 0x3054
   11504:	movt	r0, #1
   11508:	bl	1725c <__assert_fail@plt+0x61a4>
   1150c:	movw	r0, #37205	; 0x9155
   11510:	mov	r9, #0
   11514:	mov	sl, #1
   11518:	mov	r2, #10
   1151c:	cmp	r4, #2
   11520:	movt	r0, #2
   11524:	strb	r9, [r0]
   11528:	movw	r0, #37206	; 0x9156
   1152c:	movt	r0, #2
   11530:	strb	r9, [r0]
   11534:	movw	r0, #37207	; 0x9157
   11538:	movt	r0, #2
   1153c:	strb	sl, [r0]
   11540:	blt	1166c <__assert_fail@plt+0x5b4>
   11544:	mov	r5, r6
   11548:	ldr	r1, [r5, #4]!
   1154c:	ldrb	r0, [r1]
   11550:	cmp	r0, #45	; 0x2d
   11554:	bne	1166c <__assert_fail@plt+0x5b4>
   11558:	ldrb	r0, [r1, #1]!
   1155c:	sub	r0, r0, #48	; 0x30
   11560:	cmp	r0, #9
   11564:	bhi	1166c <__assert_fail@plt+0x5b4>
   11568:	mov	r0, r1
   1156c:	str	r1, [sp, #120]	; 0x78
   11570:	ldrb	r3, [r0, #1]!
   11574:	sub	r1, r3, #48	; 0x30
   11578:	cmp	r1, #10
   1157c:	bcc	11570 <__assert_fail@plt+0x4b8>
   11580:	mov	r2, #0
   11584:	mov	r1, #1
   11588:	mov	r7, r0
   1158c:	str	r2, [sp, #124]	; 0x7c
   11590:	mov	r2, #0
   11594:	mov	ip, r1
   11598:	mvn	r1, #97	; 0x61
   1159c:	mov	lr, r2
   115a0:	uxtab	r8, r1, r3
   115a4:	cmp	r8, #24
   115a8:	bhi	12c54 <__assert_fail@plt+0x1b9c>
   115ac:	add	sl, pc, #8
   115b0:	mov	r1, #0
   115b4:	mov	r2, #0
   115b8:	ldr	pc, [sl, r8, lsl #2]
   115bc:	andeq	r1, r1, r0, lsr #12
   115c0:	andeq	r1, r1, r8, lsr #12
   115c4:	muleq	r1, r0, sp
   115c8:	muleq	r1, r0, sp
   115cc:	muleq	r1, r0, sp
   115d0:	muleq	r1, r0, sp
   115d4:	muleq	r1, r0, sp
   115d8:	muleq	r1, r0, sp
   115dc:	muleq	r1, r0, sp
   115e0:	andeq	r1, r1, r0, lsr #12
   115e4:	andeq	r1, r1, ip, asr r6
   115e8:	andeq	r1, r1, r0, lsr #12
   115ec:	muleq	r1, r0, sp
   115f0:	muleq	r1, r0, sp
   115f4:	muleq	r1, r0, sp
   115f8:	andeq	r1, r1, r4, asr #12
   115fc:	muleq	r1, r0, sp
   11600:	muleq	r1, r0, sp
   11604:	muleq	r1, r0, sp
   11608:	muleq	r1, r0, sp
   1160c:	andeq	r1, r1, ip, asr #12
   11610:	muleq	r1, r0, sp
   11614:	muleq	r1, r0, sp
   11618:	muleq	r1, r0, sp
   1161c:	andeq	r1, r1, r0, lsr r6
   11620:	mov	r1, #0
   11624:	mov	r2, r3
   11628:	ldrb	r3, [r7, #1]!
   1162c:	b	11594 <__assert_fail@plt+0x4dc>
   11630:	movw	r1, #37207	; 0x9157
   11634:	mov	r2, #0
   11638:	movt	r1, #2
   1163c:	strb	r2, [r1]
   11640:	b	11654 <__assert_fail@plt+0x59c>
   11644:	mov	r1, #2
   11648:	b	11650 <__assert_fail@plt+0x598>
   1164c:	mov	r1, #1
   11650:	str	r1, [sp, #124]	; 0x7c
   11654:	mov	r1, ip
   11658:	b	11660 <__assert_fail@plt+0x5a8>
   1165c:	mov	r1, #1
   11660:	ldrb	r3, [r7, #1]!
   11664:	mov	r2, lr
   11668:	b	11594 <__assert_fail@plt+0x4dc>
   1166c:	mov	r0, #0
   11670:	mov	r5, r6
   11674:	str	r0, [sp, #124]	; 0x7c
   11678:	mov	r0, #0
   1167c:	str	r0, [sp, #100]	; 0x64
   11680:	mov	r0, #1
   11684:	str	r0, [sp, #76]	; 0x4c
   11688:	movw	r8, #30484	; 0x7714
   1168c:	movw	r7, #31408	; 0x7ab0
   11690:	mov	r0, #0
   11694:	movt	r8, #1
   11698:	movt	r7, #1
   1169c:	str	r0, [sp, #84]	; 0x54
   116a0:	str	r2, [sp, #120]	; 0x78
   116a4:	mov	r0, r4
   116a8:	mov	r1, r5
   116ac:	mov	r2, r8
   116b0:	mov	r3, r7
   116b4:	str	r9, [sp]
   116b8:	bl	10f98 <getopt_long@plt>
   116bc:	mov	r6, r0
   116c0:	cmp	r0, #98	; 0x62
   116c4:	ble	11834 <__assert_fail@plt+0x77c>
   116c8:	sub	r0, r6, #99	; 0x63
   116cc:	cmp	r0, #23
   116d0:	bhi	117f4 <__assert_fail@plt+0x73c>
   116d4:	add	r1, pc, #0
   116d8:	ldr	pc, [r1, r0, lsl #2]
   116dc:	andeq	r1, r1, ip, lsr r7
   116e0:	andeq	r2, r1, r4, asr sp
   116e4:	andeq	r2, r1, r4, asr sp
   116e8:	andeq	r2, r1, r4, asr sp
   116ec:	andeq	r2, r1, r4, asr sp
   116f0:	andeq	r2, r1, r4, asr sp
   116f4:	andeq	r2, r1, r4, asr sp
   116f8:	andeq	r2, r1, r4, asr sp
   116fc:	andeq	r2, r1, r4, asr sp
   11700:	andeq	r2, r1, r4, asr sp
   11704:	andeq	r2, r1, r4, asr sp
   11708:	andeq	r1, r1, r4, ror r7
   1170c:	andeq	r2, r1, r4, asr sp
   11710:	andeq	r2, r1, r4, asr sp
   11714:	andeq	r1, r1, ip, lsl r8
   11718:	andeq	r2, r1, r4, asr sp
   1171c:	andeq	r2, r1, r4, asr sp
   11720:	andeq	r2, r1, r4, asr sp
   11724:	andeq	r2, r1, r4, asr sp
   11728:	andeq	r1, r1, r4, lsr #16
   1172c:	andeq	r2, r1, r4, asr sp
   11730:	andeq	r2, r1, r4, asr sp
   11734:	andeq	r2, r1, r4, asr sp
   11738:	andeq	r1, r1, ip, lsl #16
   1173c:	movw	r1, #37200	; 0x9150
   11740:	movt	r1, #2
   11744:	ldr	r6, [r1]
   11748:	ldrb	r0, [r6]
   1174c:	subs	r0, r0, #45	; 0x2d
   11750:	clz	r0, r0
   11754:	addeq	r6, r6, #1
   11758:	lsr	r0, r0, #5
   1175c:	streq	r6, [r1]
   11760:	movw	r1, #30552	; 0x7758
   11764:	str	r0, [sp, #84]	; 0x54
   11768:	mov	r0, #0
   1176c:	movt	r1, #1
   11770:	b	117a8 <__assert_fail@plt+0x6f0>
   11774:	movw	r1, #37200	; 0x9150
   11778:	movt	r1, #2
   1177c:	ldr	r6, [r1]
   11780:	ldrb	r0, [r6]
   11784:	subs	r0, r0, #45	; 0x2d
   11788:	addeq	r6, r6, #1
   1178c:	clz	r0, r0
   11790:	streq	r6, [r1]
   11794:	movw	r1, #31031	; 0x7937
   11798:	lsr	r0, r0, #5
   1179c:	movt	r1, #1
   117a0:	str	r0, [sp, #84]	; 0x54
   117a4:	mov	r0, #1
   117a8:	str	r0, [sp, #76]	; 0x4c
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	10ecc <dcgettext@plt>
   117b8:	mvn	r1, #0
   117bc:	str	r0, [sp, #12]
   117c0:	mov	r0, r6
   117c4:	mov	r2, #0
   117c8:	mov	r3, #0
   117cc:	str	r9, [sp, #16]
   117d0:	str	r1, [sp]
   117d4:	str	r1, [sp, #4]
   117d8:	movw	r1, #31018	; 0x792a
   117dc:	movt	r1, #1
   117e0:	str	r1, [sp, #8]
   117e4:	bl	15e28 <__assert_fail@plt+0x4d70>
   117e8:	str	r0, [sp, #120]	; 0x78
   117ec:	str	r1, [sp, #100]	; 0x64
   117f0:	b	116a4 <__assert_fail@plt+0x5ec>
   117f4:	cmp	r6, #256	; 0x100
   117f8:	bne	12d54 <__assert_fail@plt+0x1c9c>
   117fc:	movw	r0, #37208	; 0x9158
   11800:	movt	r0, #2
   11804:	strb	sl, [r0]
   11808:	b	116a4 <__assert_fail@plt+0x5ec>
   1180c:	movw	r0, #37207	; 0x9157
   11810:	movt	r0, #2
   11814:	strb	r9, [r0]
   11818:	b	116a4 <__assert_fail@plt+0x5ec>
   1181c:	mov	r0, #2
   11820:	b	11828 <__assert_fail@plt+0x770>
   11824:	mov	r0, #1
   11828:	ldr	r2, [sp, #120]	; 0x78
   1182c:	str	r0, [sp, #124]	; 0x7c
   11830:	b	116a0 <__assert_fail@plt+0x5e8>
   11834:	cmn	r6, #1
   11838:	bne	12ce8 <__assert_fail@plt+0x1c30>
   1183c:	ldr	r1, [sp, #124]	; 0x7c
   11840:	movw	r0, #37184	; 0x9140
   11844:	movt	r0, #2
   11848:	cmp	r1, #1
   1184c:	beq	11868 <__assert_fail@plt+0x7b0>
   11850:	cmp	r1, #0
   11854:	bne	11878 <__assert_fail@plt+0x7c0>
   11858:	ldr	r1, [r0]
   1185c:	sub	r2, r4, #1
   11860:	cmp	r1, r2
   11864:	bge	11878 <__assert_fail@plt+0x7c0>
   11868:	movw	r2, #37206	; 0x9156
   1186c:	mov	r1, #1
   11870:	movt	r2, #2
   11874:	strb	r1, [r2]
   11878:	ldr	r3, [sp, #100]	; 0x64
   1187c:	ldr	r2, [sp, #84]	; 0x54
   11880:	mov	r1, #0
   11884:	mov	r6, #0
   11888:	cmn	r3, #1
   1188c:	mvn	r2, r2
   11890:	movwgt	r1, #1
   11894:	orr	r1, r1, r2
   11898:	tst	r1, #1
   1189c:	bne	118b0 <__assert_fail@plt+0x7f8>
   118a0:	ldr	r1, [sp, #76]	; 0x4c
   118a4:	eor	r1, r1, #1
   118a8:	tst	r1, #1
   118ac:	bne	12e00 <__assert_fail@plt+0x1d48>
   118b0:	ldr	r0, [r0]
   118b4:	movw	r1, #31400	; 0x7aa8
   118b8:	ldr	r2, [sp, #120]	; 0x78
   118bc:	movt	r1, #1
   118c0:	cmp	r0, r4
   118c4:	addlt	r1, r5, r0, lsl #2
   118c8:	ldr	r8, [r1]
   118cc:	str	r1, [sp, #92]	; 0x5c
   118d0:	cmp	r8, #0
   118d4:	beq	12c24 <__assert_fail@plt+0x1b6c>
   118d8:	adds	r0, r2, #8192	; 0x2000
   118dc:	mov	r1, #1
   118e0:	str	r3, [sp, #100]	; 0x64
   118e4:	mov	r9, #1
   118e8:	adc	r0, r3, #0
   118ec:	mov	r3, r2
   118f0:	str	r0, [sp, #24]
   118f4:	mov	r0, r2
   118f8:	bfc	r0, #13, #19
   118fc:	str	r0, [sp, #20]
   11900:	rsb	r0, r0, #8192	; 0x2000
   11904:	str	r0, [sp, #64]	; 0x40
   11908:	add	r0, r0, r2
   1190c:	add	r1, r1, r0, lsr #13
   11910:	lsr	r0, r0, #13
   11914:	str	r0, [sp, #68]	; 0x44
   11918:	add	r0, sp, #128	; 0x80
   1191c:	add	r0, r0, #48	; 0x30
   11920:	cmp	r1, #16
   11924:	mov	r2, r1
   11928:	str	r1, [sp, #80]	; 0x50
   1192c:	str	r0, [sp, #28]
   11930:	add	r0, r3, #8192	; 0x2000
   11934:	movcs	r2, #16
   11938:	str	r0, [sp, #72]	; 0x48
   1193c:	lsr	r0, r1, #1
   11940:	mov	r1, #0
   11944:	str	r2, [sp, #40]	; 0x28
   11948:	str	r0, [sp, #32]
   1194c:	b	119b0 <__assert_fail@plt+0x8f8>
   11950:	bl	10fec <__errno_location@plt>
   11954:	ldr	r4, [r0]
   11958:	movw	r1, #31140	; 0x79a4
   1195c:	mov	r7, #0
   11960:	mov	r0, #0
   11964:	movt	r1, #1
   11968:	mov	r2, #5
   1196c:	bl	10ecc <dcgettext@plt>
   11970:	mov	r5, r0
   11974:	mov	r0, #4
   11978:	mov	r1, r8
   1197c:	bl	14a24 <__assert_fail@plt+0x396c>
   11980:	mov	r3, r0
   11984:	mov	r0, #0
   11988:	mov	r1, r4
   1198c:	mov	r2, r5
   11990:	bl	10f50 <error@plt>
   11994:	ldr	r1, [sp, #116]	; 0x74
   11998:	ldr	r0, [sp, #92]	; 0x5c
   1199c:	and	r9, r9, r7
   119a0:	add	r1, r1, #1
   119a4:	ldr	r8, [r0, r1, lsl #2]
   119a8:	cmp	r8, #0
   119ac:	beq	12c20 <__assert_fail@plt+0x1b68>
   119b0:	str	r1, [sp, #116]	; 0x74
   119b4:	movw	r1, #31717	; 0x7be5
   119b8:	mov	r0, r8
   119bc:	movt	r1, #1
   119c0:	bl	10e60 <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	str	r0, [sp, #112]	; 0x70
   119cc:	beq	119ec <__assert_fail@plt+0x934>
   119d0:	mov	r0, r8
   119d4:	mov	r1, #0
   119d8:	bl	10f5c <open64@plt>
   119dc:	cmn	r0, #1
   119e0:	ble	11950 <__assert_fail@plt+0x898>
   119e4:	mov	sl, r0
   119e8:	b	11a18 <__assert_fail@plt+0x960>
   119ec:	movw	r1, #37205	; 0x9155
   119f0:	mov	r0, #1
   119f4:	mov	r2, #5
   119f8:	mov	sl, #0
   119fc:	movt	r1, #2
   11a00:	strb	r0, [r1]
   11a04:	movw	r1, #31125	; 0x7995
   11a08:	mov	r0, #0
   11a0c:	movt	r1, #1
   11a10:	bl	10ecc <dcgettext@plt>
   11a14:	mov	r8, r0
   11a18:	movw	r0, #37206	; 0x9156
   11a1c:	movt	r0, #2
   11a20:	ldrb	r0, [r0]
   11a24:	cmp	r0, #1
   11a28:	bne	11a70 <__assert_fail@plt+0x9b8>
   11a2c:	movw	r0, #37209	; 0x9159
   11a30:	movw	r1, #31202	; 0x79e2
   11a34:	movw	r2, #31017	; 0x7929
   11a38:	mov	r3, r8
   11a3c:	movt	r0, #2
   11a40:	movt	r1, #1
   11a44:	movt	r2, #1
   11a48:	mov	r4, r0
   11a4c:	ldrb	r0, [r0]
   11a50:	cmp	r0, #0
   11a54:	movw	r0, #31016	; 0x7928
   11a58:	movt	r0, #1
   11a5c:	movne	r2, r0
   11a60:	mov	r0, #1
   11a64:	bl	11010 <__printf_chk@plt>
   11a68:	mov	r0, #1
   11a6c:	strb	r0, [r4]
   11a70:	ldr	r0, [sp, #84]	; 0x54
   11a74:	str	sl, [sp, #124]	; 0x7c
   11a78:	tst	r0, #1
   11a7c:	beq	11ae0 <__assert_fail@plt+0xa28>
   11a80:	mov	r0, #3
   11a84:	mov	r1, sl
   11a88:	add	r2, sp, #128	; 0x80
   11a8c:	bl	10f08 <__fxstat64@plt>
   11a90:	cmp	r0, #0
   11a94:	beq	11cd0 <__assert_fail@plt+0xc18>
   11a98:	bl	10fec <__errno_location@plt>
   11a9c:	ldr	r4, [r0]
   11aa0:	movw	r1, #31186	; 0x79d2
   11aa4:	mov	r7, #0
   11aa8:	mov	r0, #0
   11aac:	movt	r1, #1
   11ab0:	mov	r2, #5
   11ab4:	bl	10ecc <dcgettext@plt>
   11ab8:	mov	r5, r0
   11abc:	mov	r0, #4
   11ac0:	mov	r1, r8
   11ac4:	bl	14a24 <__assert_fail@plt+0x396c>
   11ac8:	mov	r3, r0
   11acc:	mov	r0, #0
   11ad0:	mov	r1, r4
   11ad4:	mov	r2, r5
   11ad8:	bl	10f50 <error@plt>
   11adc:	b	11c98 <__assert_fail@plt+0xbe0>
   11ae0:	ldr	r0, [sp, #76]	; 0x4c
   11ae4:	ldr	r7, [sp, #100]	; 0x64
   11ae8:	ldr	r6, [sp, #120]	; 0x78
   11aec:	add	r1, sp, #232	; 0xe8
   11af0:	tst	r0, #1
   11af4:	beq	11c24 <__assert_fail@plt+0xb6c>
   11af8:	orrs	r0, r6, r7
   11afc:	beq	11c94 <__assert_fail@plt+0xbdc>
   11b00:	mov	r4, r6
   11b04:	mov	r5, r7
   11b08:	b	11b1c <__assert_fail@plt+0xa64>
   11b0c:	bl	12f18 <__assert_fail@plt+0x1e60>
   11b10:	add	r1, sp, #232	; 0xe8
   11b14:	orrs	r0, r4, r5
   11b18:	beq	11c94 <__assert_fail@plt+0xbdc>
   11b1c:	mov	r0, sl
   11b20:	mov	r2, #8192	; 0x2000
   11b24:	bl	15098 <__assert_fail@plt+0x3fe0>
   11b28:	cmn	r0, #1
   11b2c:	mov	r7, #1
   11b30:	beq	1297c <__assert_fail@plt+0x18c4>
   11b34:	mov	r1, r0
   11b38:	cmp	r0, #0
   11b3c:	beq	11c98 <__assert_fail@plt+0xbe0>
   11b40:	movw	r0, #37207	; 0x9157
   11b44:	mov	r7, #0
   11b48:	movt	r0, #2
   11b4c:	ldrb	r3, [r0]
   11b50:	add	r0, sp, #232	; 0xe8
   11b54:	cmp	r3, #0
   11b58:	movwne	r3, #10
   11b5c:	b	11b6c <__assert_fail@plt+0xab4>
   11b60:	add	r7, r7, #1
   11b64:	cmp	r1, r7
   11b68:	beq	11b0c <__assert_fail@plt+0xa54>
   11b6c:	ldrb	r2, [r0, r7]
   11b70:	cmp	r3, r2
   11b74:	bne	11b60 <__assert_fail@plt+0xaa8>
   11b78:	subs	r4, r4, #1
   11b7c:	sbc	r5, r5, #0
   11b80:	orrs	r2, r4, r5
   11b84:	bne	11b60 <__assert_fail@plt+0xaa8>
   11b88:	mov	r0, #1
   11b8c:	str	r0, [sp]
   11b90:	mvn	r0, r7
   11b94:	add	r0, r0, r1
   11b98:	rsbs	r5, r0, #0
   11b9c:	mov	r0, #0
   11ba0:	sbc	r6, r0, #0
   11ba4:	mov	r0, sl
   11ba8:	mov	r2, r5
   11bac:	mov	r3, r6
   11bb0:	bl	10f20 <lseek64@plt>
   11bb4:	add	r4, r7, #1
   11bb8:	cmn	r1, #1
   11bbc:	mov	r7, #1
   11bc0:	bgt	11c10 <__assert_fail@plt+0xb58>
   11bc4:	ldr	r1, [sp, #124]	; 0x7c
   11bc8:	sub	lr, fp, #8192	; 0x2000
   11bcc:	mov	r0, #3
   11bd0:	sub	r2, lr, #32
   11bd4:	bl	10f08 <__fxstat64@plt>
   11bd8:	cmp	r0, #0
   11bdc:	bne	11bf8 <__assert_fail@plt+0xb40>
   11be0:	sub	lr, fp, #8192	; 0x2000
   11be4:	sub	r0, lr, #32
   11be8:	ldr	r0, [r0, #16]
   11bec:	and	r0, r0, #61440	; 0xf000
   11bf0:	cmp	r0, #32768	; 0x8000
   11bf4:	bne	11c10 <__assert_fail@plt+0xb58>
   11bf8:	mov	r0, #1
   11bfc:	mov	r2, r5
   11c00:	mov	r3, r6
   11c04:	stm	sp, {r0, r8}
   11c08:	ldr	r0, [sp, #124]	; 0x7c
   11c0c:	bl	12e68 <__assert_fail@plt+0x1db0>
   11c10:	add	r0, sp, #232	; 0xe8
   11c14:	mov	r1, r4
   11c18:	bl	12f18 <__assert_fail@plt+0x1e60>
   11c1c:	ldr	sl, [sp, #124]	; 0x7c
   11c20:	b	11c98 <__assert_fail@plt+0xbe0>
   11c24:	orrs	r0, r6, r7
   11c28:	beq	11c94 <__assert_fail@plt+0xbdc>
   11c2c:	str	r9, [sp, #60]	; 0x3c
   11c30:	mov	r9, r8
   11c34:	mov	r4, #8192	; 0x2000
   11c38:	subs	r0, r6, r4
   11c3c:	sbcs	r0, r7, #0
   11c40:	ldr	r0, [sp, #124]	; 0x7c
   11c44:	movcc	r4, r6
   11c48:	mov	r2, r4
   11c4c:	bl	15098 <__assert_fail@plt+0x3fe0>
   11c50:	cmp	r0, #0
   11c54:	beq	11c88 <__assert_fail@plt+0xbd0>
   11c58:	mov	r5, r0
   11c5c:	cmn	r0, #1
   11c60:	beq	11d40 <__assert_fail@plt+0xc88>
   11c64:	add	r8, sp, #232	; 0xe8
   11c68:	mov	r1, r5
   11c6c:	mov	r0, r8
   11c70:	bl	12f18 <__assert_fail@plt+0x1e60>
   11c74:	subs	r6, r6, r5
   11c78:	mov	r1, r8
   11c7c:	sbc	r7, r7, #0
   11c80:	orrs	r0, r6, r7
   11c84:	bne	11c38 <__assert_fail@plt+0xb80>
   11c88:	mov	r8, r9
   11c8c:	ldr	r9, [sp, #60]	; 0x3c
   11c90:	ldr	sl, [sp, #124]	; 0x7c
   11c94:	mov	r7, #1
   11c98:	ldr	r0, [sp, #112]	; 0x70
   11c9c:	cmp	r0, #0
   11ca0:	beq	11994 <__assert_fail@plt+0x8dc>
   11ca4:	mov	r0, sl
   11ca8:	bl	110ac <close@plt>
   11cac:	cmp	r0, #0
   11cb0:	beq	11994 <__assert_fail@plt+0x8dc>
   11cb4:	bl	10fec <__errno_location@plt>
   11cb8:	ldr	r4, [r0]
   11cbc:	movw	r1, #31167	; 0x79bf
   11cc0:	mov	r7, #0
   11cc4:	mov	r0, #0
   11cc8:	movt	r1, #1
   11ccc:	b	11968 <__assert_fail@plt+0x8b0>
   11cd0:	movw	r0, #37208	; 0x9158
   11cd4:	movt	r0, #2
   11cd8:	ldrb	r1, [r0]
   11cdc:	mov	r0, #1
   11ce0:	cmp	r1, #0
   11ce4:	mvn	r1, #0
   11ce8:	str	r1, [sp, #56]	; 0x38
   11cec:	mvn	r1, #0
   11cf0:	bne	11d9c <__assert_fail@plt+0xce4>
   11cf4:	ldr	r0, [sp, #144]	; 0x90
   11cf8:	and	r0, r0, #53248	; 0xd000
   11cfc:	orr	r0, r0, #8192	; 0x2000
   11d00:	cmp	r0, #40960	; 0xa000
   11d04:	bne	11d8c <__assert_fail@plt+0xcd4>
   11d08:	mov	r0, #1
   11d0c:	mov	r2, #0
   11d10:	mov	r3, #0
   11d14:	mov	r7, #0
   11d18:	stm	sp, {r0, r8}
   11d1c:	mov	r0, sl
   11d20:	bl	12e68 <__assert_fail@plt+0x1db0>
   11d24:	cmp	r1, #0
   11d28:	bmi	11c98 <__assert_fail@plt+0xbe0>
   11d2c:	str	r0, [sp, #56]	; 0x38
   11d30:	movw	r0, #37208	; 0x9158
   11d34:	movt	r0, #2
   11d38:	ldrb	r0, [r0]
   11d3c:	b	11d9c <__assert_fail@plt+0xce4>
   11d40:	bl	10fec <__errno_location@plt>
   11d44:	movw	r1, #31283	; 0x7a33
   11d48:	ldr	r4, [r0]
   11d4c:	mov	r0, #0
   11d50:	mov	r2, #5
   11d54:	mov	r7, #0
   11d58:	movt	r1, #1
   11d5c:	bl	10ecc <dcgettext@plt>
   11d60:	mov	r5, r0
   11d64:	mov	r0, #4
   11d68:	mov	r1, r9
   11d6c:	mov	r8, r9
   11d70:	bl	14a24 <__assert_fail@plt+0x396c>
   11d74:	mov	r3, r0
   11d78:	mov	r0, #0
   11d7c:	mov	r1, r4
   11d80:	mov	r2, r5
   11d84:	bl	10f50 <error@plt>
   11d88:	b	12be8 <__assert_fail@plt+0x1b30>
   11d8c:	mvn	r1, #0
   11d90:	mov	r0, #0
   11d94:	str	r1, [sp, #56]	; 0x38
   11d98:	mvn	r1, #0
   11d9c:	cmp	r1, #0
   11da0:	str	r1, [sp, #44]	; 0x2c
   11da4:	mov	r1, #0
   11da8:	ldr	r3, [sp, #76]	; 0x4c
   11dac:	movwmi	r1, #1
   11db0:	orr	r2, r0, r1
   11db4:	ldr	r0, [sp, #28]
   11db8:	tst	r3, #1
   11dbc:	ldr	r4, [r0]
   11dc0:	ldr	r1, [r0, #4]
   11dc4:	beq	12034 <__assert_fail@plt+0xf7c>
   11dc8:	cmp	r2, #0
   11dcc:	bne	1213c <__assert_fail@plt+0x1084>
   11dd0:	ldr	r2, [sp, #184]	; 0xb8
   11dd4:	mov	r6, #0
   11dd8:	ldr	sl, [sp, #124]	; 0x7c
   11ddc:	subs	r3, r2, #536870913	; 0x20000001
   11de0:	rscs	r3, r6, r2, asr #31
   11de4:	mov	r3, #0
   11de8:	movwcc	r3, #1
   11dec:	rsbs	r7, r2, #0
   11df0:	sbcs	r7, r6, r2, asr #31
   11df4:	mov	r7, #0
   11df8:	movwlt	r7, #1
   11dfc:	ands	r3, r7, r3
   11e00:	mov	r7, #512	; 0x200
   11e04:	asrne	r3, r2, #31
   11e08:	moveq	r2, r7
   11e0c:	subs	r2, r2, r4
   11e10:	sbcs	r2, r3, r1
   11e14:	bge	1213c <__assert_fail@plt+0x1084>
   11e18:	ldr	r3, [sp, #56]	; 0x38
   11e1c:	ldr	r0, [sp, #44]	; 0x2c
   11e20:	mov	r7, #1
   11e24:	subs	r2, r3, r4
   11e28:	sbcs	r2, r0, r1
   11e2c:	bge	11c98 <__assert_fail@plt+0xbe0>
   11e30:	subs	r2, r4, r3
   11e34:	mov	r7, #0
   11e38:	str	r8, [sp, #36]	; 0x24
   11e3c:	str	r9, [sp, #60]	; 0x3c
   11e40:	sbc	r3, r1, r0
   11e44:	stm	sp, {r7, r8}
   11e48:	mov	r0, sl
   11e4c:	asr	r3, r3, #31
   11e50:	add	r3, r2, r3, lsr #19
   11e54:	bfc	r3, #0, #13
   11e58:	subs	r6, r2, r3
   11e5c:	movweq	r6, #8192	; 0x2000
   11e60:	subs	r8, r4, r6
   11e64:	sbc	r9, r1, #0
   11e68:	mov	r2, r8
   11e6c:	mov	r3, r9
   11e70:	bl	12e68 <__assert_fail@plt+0x1db0>
   11e74:	cmp	r1, #0
   11e78:	bmi	12be4 <__assert_fail@plt+0x1b2c>
   11e7c:	ldr	r0, [sp, #124]	; 0x7c
   11e80:	sub	lr, fp, #8192	; 0x2000
   11e84:	mov	r2, r6
   11e88:	sub	r1, lr, #32
   11e8c:	bl	15098 <__assert_fail@plt+0x3fe0>
   11e90:	cmn	r0, #1
   11e94:	beq	11fec <__assert_fail@plt+0xf34>
   11e98:	ldr	r2, [sp, #120]	; 0x78
   11e9c:	ldr	r3, [sp, #100]	; 0x64
   11ea0:	mov	r6, r0
   11ea4:	orrs	sl, r2, r3
   11ea8:	mov	r5, r2
   11eac:	mov	r4, r3
   11eb0:	beq	11efc <__assert_fail@plt+0xe44>
   11eb4:	cmp	r6, #0
   11eb8:	mov	r5, r2
   11ebc:	mov	r4, r3
   11ec0:	beq	11efc <__assert_fail@plt+0xe44>
   11ec4:	movw	r1, #37207	; 0x9157
   11ec8:	sub	lr, fp, #8192	; 0x2000
   11ecc:	subs	r5, r2, #1
   11ed0:	movt	r1, #2
   11ed4:	sub	r0, lr, #32
   11ed8:	sbc	r4, r3, #0
   11edc:	add	r0, r6, r0
   11ee0:	ldrb	r1, [r1]
   11ee4:	ldrb	r0, [r0, #-1]
   11ee8:	cmp	r1, #0
   11eec:	movwne	r1, #10
   11ef0:	cmp	r1, r0
   11ef4:	moveq	r4, r3
   11ef8:	moveq	r5, r2
   11efc:	movw	r0, #37207	; 0x9157
   11f00:	movt	r0, #2
   11f04:	ldrb	r7, [r0]
   11f08:	cmp	r7, #0
   11f0c:	movwne	r7, #10
   11f10:	cmp	r6, #0
   11f14:	bne	11f40 <__assert_fail@plt+0xe88>
   11f18:	b	11f74 <__assert_fail@plt+0xebc>
   11f1c:	sub	r6, r6, #1
   11f20:	subs	r0, r5, #1
   11f24:	sbc	r1, r4, #0
   11f28:	orrs	r2, r5, r4
   11f2c:	mov	r5, r0
   11f30:	mov	r4, r1
   11f34:	beq	12ae8 <__assert_fail@plt+0x1a30>
   11f38:	cmp	r6, #0
   11f3c:	beq	11f74 <__assert_fail@plt+0xebc>
   11f40:	cmp	sl, #0
   11f44:	beq	11f1c <__assert_fail@plt+0xe64>
   11f48:	sub	lr, fp, #8192	; 0x2000
   11f4c:	mov	r1, r7
   11f50:	mov	r2, r6
   11f54:	sub	r0, lr, #32
   11f58:	bl	10fe0 <memrchr@plt>
   11f5c:	cmp	r0, #0
   11f60:	beq	11f74 <__assert_fail@plt+0xebc>
   11f64:	sub	lr, fp, #8192	; 0x2000
   11f68:	sub	r1, lr, #32
   11f6c:	sub	r6, r0, r1
   11f70:	b	11f20 <__assert_fail@plt+0xe68>
   11f74:	ldr	r0, [sp, #56]	; 0x38
   11f78:	ldr	r1, [sp, #44]	; 0x2c
   11f7c:	mov	r7, #1
   11f80:	eor	r0, r8, r0
   11f84:	eor	r1, r9, r1
   11f88:	orrs	r0, r0, r1
   11f8c:	beq	12be4 <__assert_fail@plt+0x1b2c>
   11f90:	ldr	r0, [sp, #36]	; 0x24
   11f94:	subs	r8, r8, #8192	; 0x2000
   11f98:	mov	r7, #0
   11f9c:	sbc	r9, r9, #0
   11fa0:	mov	r2, r8
   11fa4:	str	r7, [sp]
   11fa8:	mov	r3, r9
   11fac:	str	r0, [sp, #4]
   11fb0:	ldr	r0, [sp, #124]	; 0x7c
   11fb4:	bl	12e68 <__assert_fail@plt+0x1db0>
   11fb8:	cmp	r1, #0
   11fbc:	bmi	12be4 <__assert_fail@plt+0x1b2c>
   11fc0:	ldr	r0, [sp, #124]	; 0x7c
   11fc4:	sub	lr, fp, #8192	; 0x2000
   11fc8:	mov	r2, #8192	; 0x2000
   11fcc:	sub	r1, lr, #32
   11fd0:	bl	15098 <__assert_fail@plt+0x3fe0>
   11fd4:	cmp	r0, #0
   11fd8:	mov	r7, #1
   11fdc:	beq	12be4 <__assert_fail@plt+0x1b2c>
   11fe0:	mov	r6, r0
   11fe4:	cmn	r0, #1
   11fe8:	bne	11efc <__assert_fail@plt+0xe44>
   11fec:	bl	10fec <__errno_location@plt>
   11ff0:	movw	r1, #31283	; 0x7a33
   11ff4:	ldr	r4, [r0]
   11ff8:	mov	r0, #0
   11ffc:	mov	r2, #5
   12000:	mov	r7, #0
   12004:	movt	r1, #1
   12008:	bl	10ecc <dcgettext@plt>
   1200c:	ldr	r1, [sp, #36]	; 0x24
   12010:	mov	r5, r0
   12014:	mov	r0, #4
   12018:	bl	14a24 <__assert_fail@plt+0x396c>
   1201c:	mov	r3, r0
   12020:	mov	r0, #0
   12024:	mov	r1, r4
   12028:	mov	r2, r5
   1202c:	bl	10f50 <error@plt>
   12030:	b	12be4 <__assert_fail@plt+0x1b2c>
   12034:	cmp	r2, #0
   12038:	bne	121ac <__assert_fail@plt+0x10f4>
   1203c:	ldr	r2, [sp, #184]	; 0xb8
   12040:	mov	r6, #0
   12044:	ldr	sl, [sp, #124]	; 0x7c
   12048:	subs	r3, r2, #536870913	; 0x20000001
   1204c:	rscs	r3, r6, r2, asr #31
   12050:	mov	r3, #0
   12054:	movwcc	r3, #1
   12058:	rsbs	r7, r2, #0
   1205c:	sbcs	r7, r6, r2, asr #31
   12060:	mov	r7, #0
   12064:	movwlt	r7, #1
   12068:	ands	r3, r7, r3
   1206c:	mov	r7, #512	; 0x200
   12070:	asrne	r3, r2, #31
   12074:	moveq	r2, r7
   12078:	subs	r2, r2, r4
   1207c:	sbcs	r2, r3, r1
   12080:	bge	121ac <__assert_fail@plt+0x10f4>
   12084:	ldr	r0, [sp, #56]	; 0x38
   12088:	ldr	r6, [sp, #120]	; 0x78
   1208c:	ldr	r3, [sp, #100]	; 0x64
   12090:	mov	r7, #1
   12094:	subs	r2, r4, r0
   12098:	ldr	r0, [sp, #44]	; 0x2c
   1209c:	sbc	r0, r1, r0
   120a0:	rsbs	r1, r2, #0
   120a4:	rscs	r1, r0, #0
   120a8:	mov	r1, #0
   120ac:	movwlt	r1, #1
   120b0:	cmp	r1, #0
   120b4:	moveq	r0, r1
   120b8:	movne	r1, r2
   120bc:	subs	r2, r6, r1
   120c0:	sbcs	r2, r3, r0
   120c4:	bcs	11c98 <__assert_fail@plt+0xbe0>
   120c8:	subs	r4, r1, r6
   120cc:	add	r6, sp, #232	; 0xe8
   120d0:	sbc	r5, r0, r3
   120d4:	orrs	r0, r4, r5
   120d8:	bne	120f4 <__assert_fail@plt+0x103c>
   120dc:	b	12ae0 <__assert_fail@plt+0x1a28>
   120e0:	add	r6, sp, #232	; 0xe8
   120e4:	mov	r0, r6
   120e8:	bl	12f18 <__assert_fail@plt+0x1e60>
   120ec:	orrs	r0, r4, r5
   120f0:	beq	12ae0 <__assert_fail@plt+0x1a28>
   120f4:	subs	r0, r4, #8192	; 0x2000
   120f8:	mov	r2, #8192	; 0x2000
   120fc:	mov	r1, r6
   12100:	sbcs	r0, r5, #0
   12104:	ldr	r0, [sp, #124]	; 0x7c
   12108:	movcc	r2, r4
   1210c:	bl	15098 <__assert_fail@plt+0x3fe0>
   12110:	cmn	r0, #1
   12114:	beq	12bf4 <__assert_fail@plt+0x1b3c>
   12118:	subs	r4, r4, r0
   1211c:	mov	r1, r0
   12120:	sbc	r5, r5, #0
   12124:	cmp	r0, #0
   12128:	bne	120e0 <__assert_fail@plt+0x1028>
   1212c:	orrs	r0, r4, r5
   12130:	beq	120e0 <__assert_fail@plt+0x1028>
   12134:	mov	r0, #2
   12138:	b	12bf8 <__assert_fail@plt+0x1b40>
   1213c:	movw	r0, #8208	; 0x2010
   12140:	str	r9, [sp, #60]	; 0x3c
   12144:	bl	157b4 <__assert_fail@plt+0x46fc>
   12148:	mov	r6, #0
   1214c:	movw	r1, #8196	; 0x2004
   12150:	mov	r4, r0
   12154:	str	r6, [r0, r1]!
   12158:	str	r6, [r0, #4]
   1215c:	str	r6, [r0, #8]
   12160:	movw	r0, #8208	; 0x2010
   12164:	bl	157b4 <__assert_fail@plt+0x46fc>
   12168:	mov	r5, r0
   1216c:	mov	r0, sl
   12170:	mov	r2, #8192	; 0x2000
   12174:	mov	r1, r5
   12178:	bl	15098 <__assert_fail@plt+0x3fe0>
   1217c:	mov	r9, r0
   12180:	add	r0, r0, #1
   12184:	str	r8, [sp, #36]	; 0x24
   12188:	str	r4, [sp, #88]	; 0x58
   1218c:	cmp	r0, #2
   12190:	bcs	12314 <__assert_fail@plt+0x125c>
   12194:	ldr	r0, [sp, #56]	; 0x38
   12198:	str	r4, [sp, #104]	; 0x68
   1219c:	str	r0, [sp, #52]	; 0x34
   121a0:	ldr	r0, [sp, #44]	; 0x2c
   121a4:	str	r0, [sp, #48]	; 0x30
   121a8:	b	126e8 <__assert_fail@plt+0x1630>
   121ac:	ldr	r0, [sp, #24]
   121b0:	cmp	r0, #0
   121b4:	bne	12dc0 <__assert_fail@plt+0x1d08>
   121b8:	ldr	r0, [sp, #120]	; 0x78
   121bc:	str	r9, [sp, #60]	; 0x3c
   121c0:	str	r8, [sp, #36]	; 0x24
   121c4:	cmp	r0, #1048576	; 0x100000
   121c8:	bhi	124cc <__assert_fail@plt+0x1414>
   121cc:	ldr	r4, [sp, #72]	; 0x48
   121d0:	mov	r0, #2
   121d4:	mov	r1, r4
   121d8:	bl	15884 <__assert_fail@plt+0x47cc>
   121dc:	sub	lr, fp, #8192	; 0x2000
   121e0:	mov	r8, r0
   121e4:	add	r0, r0, r4
   121e8:	mov	r9, #0
   121ec:	mov	r5, #1
   121f0:	sub	r1, lr, #32
   121f4:	str	r8, [sp, #96]	; 0x60
   121f8:	str	r8, [r1]
   121fc:	str	r0, [r1, #4]
   12200:	ldr	r0, [sp, #56]	; 0x38
   12204:	str	r0, [sp, #104]	; 0x68
   12208:	ldr	r0, [sp, #44]	; 0x2c
   1220c:	str	r0, [sp, #108]	; 0x6c
   12210:	ldr	r4, [sp, #72]	; 0x48
   12214:	mov	r0, sl
   12218:	mov	r1, r8
   1221c:	mov	r2, r4
   12220:	bl	13164 <__assert_fail@plt+0x20ac>
   12224:	mov	r6, r0
   12228:	cmp	r0, r4
   1222c:	mov	r0, #0
   12230:	mov	r7, #0
   12234:	bcs	12268 <__assert_fail@plt+0x11b0>
   12238:	bl	10fec <__errno_location@plt>
   1223c:	ldr	r4, [r0]
   12240:	cmp	r4, #0
   12244:	bne	128cc <__assert_fail@plt+0x1814>
   12248:	ldr	r1, [sp, #120]	; 0x78
   1224c:	mov	r7, #1
   12250:	mov	r0, #0
   12254:	cmp	r6, r1
   12258:	bhi	12268 <__assert_fail@plt+0x11b0>
   1225c:	tst	r5, #1
   12260:	sub	r0, r1, r6
   12264:	movwne	r0, #0
   12268:	tst	r5, #1
   1226c:	beq	12284 <__assert_fail@plt+0x11cc>
   12270:	ldr	r5, [sp, #104]	; 0x68
   12274:	ldr	sl, [sp, #120]	; 0x78
   12278:	cmp	r6, sl
   1227c:	bhi	122c8 <__assert_fail@plt+0x1210>
   12280:	b	122e8 <__assert_fail@plt+0x1230>
   12284:	ldr	sl, [sp, #120]	; 0x78
   12288:	sub	lr, fp, #8192	; 0x2000
   1228c:	sub	r1, lr, #32
   12290:	sub	r4, sl, r0
   12294:	mov	r0, #1
   12298:	bic	r0, r0, r9
   1229c:	ldr	r0, [r1, r0, lsl #2]
   122a0:	mov	r1, r4
   122a4:	add	r0, r0, #8192	; 0x2000
   122a8:	bl	12f18 <__assert_fail@plt+0x1e60>
   122ac:	ldr	r5, [sp, #104]	; 0x68
   122b0:	ldr	r0, [sp, #108]	; 0x6c
   122b4:	adds	r5, r5, r4
   122b8:	adc	r0, r0, #0
   122bc:	str	r0, [sp, #108]	; 0x6c
   122c0:	cmp	r6, sl
   122c4:	bls	122e8 <__assert_fail@plt+0x1230>
   122c8:	sub	r4, r6, sl
   122cc:	mov	r0, r8
   122d0:	mov	r1, r4
   122d4:	bl	12f18 <__assert_fail@plt+0x1e60>
   122d8:	ldr	r0, [sp, #108]	; 0x6c
   122dc:	adds	r5, r5, r4
   122e0:	adc	r0, r0, #0
   122e4:	str	r0, [sp, #108]	; 0x6c
   122e8:	ldr	sl, [sp, #124]	; 0x7c
   122ec:	cmp	r7, #0
   122f0:	bne	12620 <__assert_fail@plt+0x1568>
   122f4:	eor	r9, r9, #1
   122f8:	sub	lr, fp, #8192	; 0x2000
   122fc:	str	r5, [sp, #104]	; 0x68
   12300:	mov	r5, #0
   12304:	and	r0, r9, #1
   12308:	sub	r1, lr, #32
   1230c:	ldr	r8, [r1, r0, lsl #2]
   12310:	b	12210 <__assert_fail@plt+0x1158>
   12314:	ldr	r0, [sp, #120]	; 0x78
   12318:	ldr	r1, [sp, #100]	; 0x64
   1231c:	orrs	r0, r0, r1
   12320:	ldr	r0, [sp, #44]	; 0x2c
   12324:	ldr	r1, [sp, #56]	; 0x38
   12328:	beq	1268c <__assert_fail@plt+0x15d4>
   1232c:	str	r0, [sp, #48]	; 0x30
   12330:	ldr	r0, [sp, #88]	; 0x58
   12334:	mov	r6, #0
   12338:	str	r1, [sp, #52]	; 0x34
   1233c:	str	r0, [sp, #104]	; 0x68
   12340:	b	12394 <__assert_fail@plt+0x12dc>
   12344:	ldr	r1, [sp, #96]	; 0x60
   12348:	add	r0, sl, r0
   1234c:	bl	10e9c <memcpy@plt>
   12350:	ldr	r0, [r4]
   12354:	ldm	r9, {r1, r2}
   12358:	ldr	sl, [sp, #124]	; 0x7c
   1235c:	mov	r5, r8
   12360:	add	r0, r1, r0
   12364:	str	r0, [r9]
   12368:	ldr	r0, [r4, #4]
   1236c:	add	r0, r2, r0
   12370:	str	r0, [r9, #4]
   12374:	mov	r0, sl
   12378:	mov	r1, r5
   1237c:	mov	r2, #8192	; 0x2000
   12380:	bl	15098 <__assert_fail@plt+0x3fe0>
   12384:	mov	r9, r0
   12388:	add	r0, r0, #1
   1238c:	cmp	r0, #1
   12390:	bls	126e8 <__assert_fail@plt+0x1630>
   12394:	mov	r4, r5
   12398:	movw	sl, #8196	; 0x2004
   1239c:	str	r6, [sp, #108]	; 0x6c
   123a0:	mov	r0, #0
   123a4:	mov	r6, r5
   123a8:	mov	r8, r5
   123ac:	str	r9, [r4, sl]!
   123b0:	str	r0, [r4, #4]
   123b4:	str	r0, [r4, #8]
   123b8:	movw	r0, #37207	; 0x9157
   123bc:	movt	r0, #2
   123c0:	mov	r1, r0
   123c4:	ldrb	r0, [r0]
   123c8:	cmp	r0, #0
   123cc:	movwne	r0, #10
   123d0:	strb	r0, [r6, r9]!
   123d4:	mov	r0, r5
   123d8:	str	r5, [sp, #96]	; 0x60
   123dc:	ldrb	r7, [r1]
   123e0:	cmp	r7, #0
   123e4:	movwne	r7, #10
   123e8:	mov	r1, r7
   123ec:	bl	10ef0 <rawmemchr@plt>
   123f0:	ldr	r1, [sp, #104]	; 0x68
   123f4:	ldr	r5, [r4, #4]
   123f8:	add	r9, r1, sl
   123fc:	mov	sl, r1
   12400:	cmp	r0, r6
   12404:	bcs	12424 <__assert_fail@plt+0x136c>
   12408:	add	r5, r5, #1
   1240c:	add	r0, r0, #1
   12410:	mov	r1, r7
   12414:	str	r5, [r4, #4]
   12418:	bl	10ef0 <rawmemchr@plt>
   1241c:	cmp	r0, r6
   12420:	bcc	12408 <__assert_fail@plt+0x1350>
   12424:	ldr	r2, [r4]
   12428:	ldr	r0, [r9]
   1242c:	ldr	r6, [sp, #108]	; 0x6c
   12430:	mov	r3, #0
   12434:	add	r1, r0, r2
   12438:	add	r6, r5, r6
   1243c:	cmp	r3, r1, lsr #13
   12440:	beq	12344 <__assert_fail@plt+0x128c>
   12444:	ldr	r2, [sp, #88]	; 0x58
   12448:	movw	r0, #8196	; 0x2004
   1244c:	str	r8, [r9, #8]
   12450:	ldr	r1, [sp, #120]	; 0x78
   12454:	ldr	sl, [sp, #124]	; 0x7c
   12458:	add	r5, r2, r0
   1245c:	ldr	r0, [r5, #4]
   12460:	sub	r0, r6, r0
   12464:	subs	r0, r1, r0
   12468:	ldr	r0, [sp, #100]	; 0x64
   1246c:	sbcs	r0, r0, #0
   12470:	bcs	124b8 <__assert_fail@plt+0x1400>
   12474:	ldr	r4, [r5]
   12478:	mov	r0, r2
   1247c:	mov	r7, r2
   12480:	mov	r1, r4
   12484:	bl	12f18 <__assert_fail@plt+0x1e60>
   12488:	ldr	r0, [sp, #52]	; 0x34
   1248c:	adds	r0, r0, r4
   12490:	str	r0, [sp, #52]	; 0x34
   12494:	ldr	r0, [sp, #48]	; 0x30
   12498:	adc	r0, r0, #0
   1249c:	str	r0, [sp, #48]	; 0x30
   124a0:	ldmib	r5, {r0, r1}
   124a4:	mov	r5, r7
   124a8:	str	r8, [sp, #104]	; 0x68
   124ac:	str	r1, [sp, #88]	; 0x58
   124b0:	sub	r6, r6, r0
   124b4:	b	12374 <__assert_fail@plt+0x12bc>
   124b8:	movw	r0, #8208	; 0x2010
   124bc:	bl	157b4 <__assert_fail@plt+0x46fc>
   124c0:	mov	r5, r0
   124c4:	str	r8, [sp, #104]	; 0x68
   124c8:	b	12374 <__assert_fail@plt+0x12bc>
   124cc:	ldr	r0, [sp, #56]	; 0x38
   124d0:	mov	r5, #0
   124d4:	mov	r7, #1
   124d8:	mov	r9, #0
   124dc:	mov	r8, #0
   124e0:	str	r0, [sp, #104]	; 0x68
   124e4:	ldr	r0, [sp, #44]	; 0x2c
   124e8:	str	r0, [sp, #108]	; 0x6c
   124ec:	mov	r0, #0
   124f0:	str	r0, [sp, #52]	; 0x34
   124f4:	mov	r0, #0
   124f8:	str	r0, [sp, #96]	; 0x60
   124fc:	b	12548 <__assert_fail@plt+0x1490>
   12500:	ldr	r4, [sp, #88]	; 0x58
   12504:	mov	r1, r6
   12508:	ldr	r0, [r7, r4, lsl #2]
   1250c:	bl	12f18 <__assert_fail@plt+0x1e60>
   12510:	ldr	r0, [sp, #104]	; 0x68
   12514:	adds	r0, r0, r6
   12518:	str	r0, [sp, #104]	; 0x68
   1251c:	ldr	r0, [sp, #108]	; 0x6c
   12520:	adc	r0, r0, #0
   12524:	str	r0, [sp, #108]	; 0x6c
   12528:	ldr	r2, [sp, #80]	; 0x50
   1252c:	add	r0, r4, #1
   12530:	cmp	sl, #0
   12534:	mov	r9, r4
   12538:	udiv	r1, r0, r2
   1253c:	mls	r7, r1, r2, r0
   12540:	ldr	r1, [sp, #64]	; 0x40
   12544:	bne	12628 <__assert_fail@plt+0x1570>
   12548:	cmp	r5, r9
   1254c:	str	r7, [sp, #88]	; 0x58
   12550:	bne	125b4 <__assert_fail@plt+0x14fc>
   12554:	ldr	r4, [sp, #40]	; 0x28
   12558:	ldr	r1, [sp, #96]	; 0x60
   1255c:	cmp	r5, #0
   12560:	beq	12574 <__assert_fail@plt+0x14bc>
   12564:	ldr	r0, [sp, #32]
   12568:	ldr	r4, [sp, #80]	; 0x50
   1256c:	cmp	r5, r0
   12570:	lslls	r4, r5, #1
   12574:	mov	r0, r1
   12578:	mov	r1, r4
   1257c:	mov	r2, #4
   12580:	bl	15778 <__assert_fail@plt+0x46c0>
   12584:	mov	r5, r4
   12588:	ldr	r4, [sp, #124]	; 0x7c
   1258c:	mov	r7, r0
   12590:	tst	r8, #1
   12594:	bne	125c4 <__assert_fail@plt+0x150c>
   12598:	mov	r0, #8192	; 0x2000
   1259c:	bl	157b4 <__assert_fail@plt+0x46fc>
   125a0:	mov	r1, r0
   125a4:	str	r0, [r7, r9, lsl #2]
   125a8:	add	r0, r9, #1
   125ac:	str	r0, [sp, #52]	; 0x34
   125b0:	b	125c8 <__assert_fail@plt+0x1510>
   125b4:	ldr	r4, [sp, #124]	; 0x7c
   125b8:	ldr	r7, [sp, #96]	; 0x60
   125bc:	tst	r8, #1
   125c0:	beq	12598 <__assert_fail@plt+0x14e0>
   125c4:	ldr	r1, [r7, r9, lsl #2]
   125c8:	mov	r0, r4
   125cc:	mov	r2, #8192	; 0x2000
   125d0:	bl	13164 <__assert_fail@plt+0x20ac>
   125d4:	mov	sl, #0
   125d8:	mov	r6, r0
   125dc:	str	r7, [sp, #96]	; 0x60
   125e0:	cmp	sl, r0, lsr #13
   125e4:	bne	125fc <__assert_fail@plt+0x1544>
   125e8:	bl	10fec <__errno_location@plt>
   125ec:	ldr	r4, [r0]
   125f0:	mov	sl, #1
   125f4:	cmp	r4, #0
   125f8:	bne	12924 <__assert_fail@plt+0x186c>
   125fc:	ldr	r0, [sp, #68]	; 0x44
   12600:	sub	r0, r9, r0
   12604:	clz	r0, r0
   12608:	lsr	r0, r0, #5
   1260c:	orr	r8, r8, r0
   12610:	tst	r8, #1
   12614:	bne	12500 <__assert_fail@plt+0x1448>
   12618:	ldr	r4, [sp, #88]	; 0x58
   1261c:	b	12528 <__assert_fail@plt+0x1470>
   12620:	mov	r7, #1
   12624:	b	12910 <__assert_fail@plt+0x1858>
   12628:	cmp	r1, #0
   1262c:	beq	1296c <__assert_fail@plt+0x18b4>
   12630:	tst	r8, #1
   12634:	beq	12998 <__assert_fail@plt+0x18e0>
   12638:	ldr	r0, [sp, #104]	; 0x68
   1263c:	ldr	r9, [sp, #60]	; 0x3c
   12640:	adds	r0, r0, r1
   12644:	str	r0, [sp, #104]	; 0x68
   12648:	ldr	r0, [sp, #108]	; 0x6c
   1264c:	adc	r0, r0, #0
   12650:	str	r0, [sp, #108]	; 0x6c
   12654:	mov	r0, r4
   12658:	ldr	r4, [sp, #96]	; 0x60
   1265c:	ldr	r0, [r4, r0, lsl #2]
   12660:	add	r0, r0, r6
   12664:	rsb	r6, r6, #8192	; 0x2000
   12668:	cmp	r1, r6
   1266c:	bcc	12684 <__assert_fail@plt+0x15cc>
   12670:	mov	sl, r1
   12674:	mov	r1, r6
   12678:	bl	12f18 <__assert_fail@plt+0x1e60>
   1267c:	ldr	r0, [r4, r7, lsl #2]
   12680:	sub	r1, sl, r6
   12684:	bl	12f18 <__assert_fail@plt+0x1e60>
   12688:	b	129d8 <__assert_fail@plt+0x1920>
   1268c:	mov	r8, r5
   12690:	mov	r7, r9
   12694:	mov	r4, r1
   12698:	mov	r5, r0
   1269c:	mov	r0, r8
   126a0:	mov	r1, r7
   126a4:	bl	12f18 <__assert_fail@plt+0x1e60>
   126a8:	mov	r0, sl
   126ac:	mov	r1, r8
   126b0:	mov	r2, #8192	; 0x2000
   126b4:	bl	15098 <__assert_fail@plt+0x3fe0>
   126b8:	mov	r9, r0
   126bc:	adds	r4, r4, r7
   126c0:	add	r0, r0, #1
   126c4:	adc	r5, r5, #0
   126c8:	cmp	r0, #2
   126cc:	mov	r7, r9
   126d0:	bcs	1269c <__assert_fail@plt+0x15e4>
   126d4:	ldr	r0, [sp, #88]	; 0x58
   126d8:	str	r5, [sp, #48]	; 0x30
   126dc:	str	r4, [sp, #52]	; 0x34
   126e0:	mov	r5, r8
   126e4:	str	r0, [sp, #104]	; 0x68
   126e8:	mov	r0, r5
   126ec:	bl	1313c <__assert_fail@plt+0x2084>
   126f0:	cmn	r9, #1
   126f4:	beq	12750 <__assert_fail@plt+0x1698>
   126f8:	ldr	r2, [sp, #104]	; 0x68
   126fc:	movw	r3, #8196	; 0x2004
   12700:	add	r0, r2, r3
   12704:	ldr	r1, [r0]
   12708:	cmp	r1, #0
   1270c:	beq	127a0 <__assert_fail@plt+0x16e8>
   12710:	add	r1, r1, r2
   12714:	movw	r2, #37207	; 0x9157
   12718:	ldr	r7, [sp, #100]	; 0x64
   1271c:	ldr	r4, [sp, #88]	; 0x58
   12720:	movt	r2, #2
   12724:	ldrb	r1, [r1, #-1]
   12728:	ldrb	r2, [r2]
   1272c:	cmp	r2, #0
   12730:	movwne	r2, #10
   12734:	cmp	r2, r1
   12738:	beq	127a8 <__assert_fail@plt+0x16f0>
   1273c:	ldr	r1, [r0, #4]
   12740:	add	r6, r6, #1
   12744:	add	r1, r1, #1
   12748:	str	r1, [r0, #4]
   1274c:	b	127a8 <__assert_fail@plt+0x16f0>
   12750:	bl	10fec <__errno_location@plt>
   12754:	movw	r1, #31283	; 0x7a33
   12758:	ldr	r4, [r0]
   1275c:	mov	r0, #0
   12760:	mov	r2, #5
   12764:	movt	r1, #1
   12768:	str	r0, [sp, #108]	; 0x6c
   1276c:	mov	r0, #0
   12770:	bl	10ecc <dcgettext@plt>
   12774:	ldr	r1, [sp, #36]	; 0x24
   12778:	mov	r7, r0
   1277c:	mov	r0, #4
   12780:	bl	14a24 <__assert_fail@plt+0x396c>
   12784:	mov	r3, r0
   12788:	mov	r0, #0
   1278c:	mov	r1, r4
   12790:	mov	r2, r7
   12794:	bl	10f50 <error@plt>
   12798:	ldr	r9, [sp, #60]	; 0x3c
   1279c:	b	12a6c <__assert_fail@plt+0x19b4>
   127a0:	ldr	r7, [sp, #100]	; 0x64
   127a4:	ldr	r4, [sp, #88]	; 0x58
   127a8:	movw	r0, #8200	; 0x2008
   127ac:	mov	r5, r4
   127b0:	ldr	r2, [sp, #120]	; 0x78
   127b4:	mov	r9, r6
   127b8:	ldr	r0, [r5, r0]!
   127bc:	sub	r1, r6, r0
   127c0:	subs	r1, r2, r1
   127c4:	sbcs	r1, r7, #0
   127c8:	bcs	1282c <__assert_fail@plt+0x1774>
   127cc:	ldr	sl, [sp, #52]	; 0x34
   127d0:	ldr	r8, [sp, #48]	; 0x30
   127d4:	mov	r6, r4
   127d8:	mov	r0, r4
   127dc:	ldr	r7, [r6, r3]!
   127e0:	mov	r1, r7
   127e4:	bl	12f18 <__assert_fail@plt+0x1e60>
   127e8:	ldr	r4, [r6, #8]
   127ec:	ldr	r1, [r5]
   127f0:	movw	r0, #8200	; 0x2008
   127f4:	ldr	r2, [sp, #120]	; 0x78
   127f8:	adds	sl, sl, r7
   127fc:	movw	r3, #8196	; 0x2004
   12800:	adc	r8, r8, #0
   12804:	mov	r6, r4
   12808:	sub	r9, r9, r1
   1280c:	ldr	r0, [r6, r0]!
   12810:	mov	r5, r6
   12814:	sub	r1, r9, r0
   12818:	subs	r1, r2, r1
   1281c:	ldr	r1, [sp, #100]	; 0x64
   12820:	sbcs	r1, r1, #0
   12824:	bcc	127d4 <__assert_fail@plt+0x171c>
   12828:	b	12838 <__assert_fail@plt+0x1780>
   1282c:	ldr	sl, [sp, #52]	; 0x34
   12830:	ldr	r8, [sp, #48]	; 0x30
   12834:	mov	r6, r5
   12838:	ldr	r1, [sp, #120]	; 0x78
   1283c:	str	r8, [sp, #48]	; 0x30
   12840:	str	sl, [sp, #52]	; 0x34
   12844:	subs	r1, r1, r9
   12848:	ldr	r1, [sp, #100]	; 0x64
   1284c:	sbcs	r1, r1, #0
   12850:	bcs	128c0 <__assert_fail@plt+0x1808>
   12854:	mov	r1, #1
   12858:	str	r1, [sp, #108]	; 0x6c
   1285c:	ldr	r1, [sp, #120]	; 0x78
   12860:	subs	r1, r9, r1
   12864:	beq	12974 <__assert_fail@plt+0x18bc>
   12868:	ldr	r1, [sp, #120]	; 0x78
   1286c:	add	r7, r0, #1
   12870:	movw	r0, #37207	; 0x9157
   12874:	movt	r0, #2
   12878:	sub	r5, r1, r9
   1287c:	ldrb	r9, [r0]
   12880:	ldr	r1, [r4, r3]
   12884:	mov	r0, r4
   12888:	cmp	r9, #0
   1288c:	add	r8, r4, r1
   12890:	movwne	r9, #10
   12894:	sub	r2, r8, r0
   12898:	mov	r1, r9
   1289c:	bl	11034 <memchr@plt>
   128a0:	cmp	r0, #0
   128a4:	beq	12a38 <__assert_fail@plt+0x1980>
   128a8:	str	r7, [r6]
   128ac:	adds	r5, r5, #1
   128b0:	add	r7, r7, #1
   128b4:	add	r0, r0, #1
   128b8:	bcc	12894 <__assert_fail@plt+0x17dc>
   128bc:	b	12a3c <__assert_fail@plt+0x1984>
   128c0:	mov	r0, #1
   128c4:	str	r0, [sp, #108]	; 0x6c
   128c8:	b	12a64 <__assert_fail@plt+0x19ac>
   128cc:	movw	r1, #31283	; 0x7a33
   128d0:	mov	r0, #0
   128d4:	mov	r2, #5
   128d8:	mov	r7, #0
   128dc:	movt	r1, #1
   128e0:	bl	10ecc <dcgettext@plt>
   128e4:	ldr	r1, [sp, #36]	; 0x24
   128e8:	mov	r6, r0
   128ec:	mov	r0, #4
   128f0:	bl	14a24 <__assert_fail@plt+0x396c>
   128f4:	mov	r3, r0
   128f8:	mov	r0, #0
   128fc:	mov	r1, r4
   12900:	mov	r2, r6
   12904:	bl	10f50 <error@plt>
   12908:	ldr	sl, [sp, #124]	; 0x7c
   1290c:	ldr	r5, [sp, #104]	; 0x68
   12910:	ldr	r0, [sp, #96]	; 0x60
   12914:	bl	1313c <__assert_fail@plt+0x2084>
   12918:	ldr	r8, [sp, #36]	; 0x24
   1291c:	ldr	r9, [sp, #60]	; 0x3c
   12920:	b	12a10 <__assert_fail@plt+0x1958>
   12924:	movw	r1, #31283	; 0x7a33
   12928:	mov	r0, #0
   1292c:	mov	r2, #5
   12930:	mov	r7, #0
   12934:	movt	r1, #1
   12938:	bl	10ecc <dcgettext@plt>
   1293c:	ldr	r1, [sp, #36]	; 0x24
   12940:	mov	r6, r0
   12944:	mov	r0, #4
   12948:	bl	14a24 <__assert_fail@plt+0x396c>
   1294c:	mov	r3, r0
   12950:	mov	r0, #0
   12954:	mov	r1, r4
   12958:	mov	r2, r6
   1295c:	bl	10f50 <error@plt>
   12960:	ldr	r9, [sp, #60]	; 0x3c
   12964:	ldr	sl, [sp, #124]	; 0x7c
   12968:	b	129e0 <__assert_fail@plt+0x1928>
   1296c:	ldr	r9, [sp, #60]	; 0x3c
   12970:	b	129d8 <__assert_fail@plt+0x1920>
   12974:	mov	r0, r4
   12978:	b	12a3c <__assert_fail@plt+0x1984>
   1297c:	bl	10fec <__errno_location@plt>
   12980:	ldr	r4, [r0]
   12984:	movw	r1, #31283	; 0x7a33
   12988:	mov	r7, #0
   1298c:	mov	r0, #0
   12990:	movt	r1, #1
   12994:	b	11ab0 <__assert_fail@plt+0x9f8>
   12998:	ldr	r0, [sp, #68]	; 0x44
   1299c:	ldr	r9, [sp, #60]	; 0x3c
   129a0:	cmp	r4, r0
   129a4:	bne	129d8 <__assert_fail@plt+0x1920>
   129a8:	ldr	r0, [sp, #96]	; 0x60
   129ac:	ldr	r1, [sp, #20]
   129b0:	ldr	r0, [r0, r7, lsl #2]
   129b4:	sub	r4, r6, r1
   129b8:	mov	r1, r4
   129bc:	bl	12f18 <__assert_fail@plt+0x1e60>
   129c0:	ldr	r0, [sp, #104]	; 0x68
   129c4:	adds	r0, r0, r4
   129c8:	str	r0, [sp, #104]	; 0x68
   129cc:	ldr	r0, [sp, #108]	; 0x6c
   129d0:	adc	r0, r0, #0
   129d4:	str	r0, [sp, #108]	; 0x6c
   129d8:	ldr	sl, [sp, #124]	; 0x7c
   129dc:	mov	r7, #1
   129e0:	ldr	r5, [sp, #52]	; 0x34
   129e4:	cmp	r5, #0
   129e8:	beq	12a00 <__assert_fail@plt+0x1948>
   129ec:	ldr	r4, [sp, #96]	; 0x60
   129f0:	ldr	r0, [r4], #4
   129f4:	bl	1313c <__assert_fail@plt+0x2084>
   129f8:	subs	r5, r5, #1
   129fc:	bne	129f0 <__assert_fail@plt+0x1938>
   12a00:	ldr	r0, [sp, #96]	; 0x60
   12a04:	bl	1313c <__assert_fail@plt+0x2084>
   12a08:	ldr	r8, [sp, #36]	; 0x24
   12a0c:	ldr	r5, [sp, #104]	; 0x68
   12a10:	ldr	r0, [sp, #56]	; 0x38
   12a14:	mvn	r4, #0
   12a18:	subs	r0, r4, r0
   12a1c:	ldr	r0, [sp, #44]	; 0x2c
   12a20:	sbcs	r0, r4, r0
   12a24:	bge	11c98 <__assert_fail@plt+0xbe0>
   12a28:	ldr	r3, [sp, #108]	; 0x6c
   12a2c:	mov	r0, #0
   12a30:	mov	r2, r5
   12a34:	b	12abc <__assert_fail@plt+0x1a04>
   12a38:	mov	r0, #0
   12a3c:	sub	r7, r0, r4
   12a40:	mov	r0, r4
   12a44:	mov	r1, r7
   12a48:	bl	12f18 <__assert_fail@plt+0x1e60>
   12a4c:	ldr	r0, [sp, #52]	; 0x34
   12a50:	adds	r0, r0, r7
   12a54:	str	r0, [sp, #52]	; 0x34
   12a58:	ldr	r0, [sp, #48]	; 0x30
   12a5c:	adc	r0, r0, r7, asr #31
   12a60:	str	r0, [sp, #48]	; 0x30
   12a64:	ldr	r9, [sp, #60]	; 0x3c
   12a68:	ldr	sl, [sp, #124]	; 0x7c
   12a6c:	ldr	r0, [sp, #88]	; 0x58
   12a70:	movw	r5, #8204	; 0x200c
   12a74:	cmp	r0, #0
   12a78:	beq	12a90 <__assert_fail@plt+0x19d8>
   12a7c:	ldr	r4, [r0, r5]
   12a80:	bl	1313c <__assert_fail@plt+0x2084>
   12a84:	cmp	r4, #0
   12a88:	mov	r0, r4
   12a8c:	bne	12a7c <__assert_fail@plt+0x19c4>
   12a90:	ldr	r0, [sp, #56]	; 0x38
   12a94:	mvn	r4, #0
   12a98:	ldr	r8, [sp, #36]	; 0x24
   12a9c:	ldr	r7, [sp, #108]	; 0x6c
   12aa0:	subs	r0, r4, r0
   12aa4:	ldr	r0, [sp, #44]	; 0x2c
   12aa8:	sbcs	r0, r4, r0
   12aac:	bge	11c98 <__assert_fail@plt+0xbe0>
   12ab0:	ldr	r2, [sp, #52]	; 0x34
   12ab4:	ldr	r3, [sp, #48]	; 0x30
   12ab8:	mov	r0, #0
   12abc:	stm	sp, {r0, r8}
   12ac0:	mov	r0, sl
   12ac4:	bl	12e68 <__assert_fail@plt+0x1db0>
   12ac8:	subs	r0, r4, r0
   12acc:	sbcs	r0, r4, r1
   12ad0:	mov	r0, #0
   12ad4:	movwlt	r0, #1
   12ad8:	and	r7, r7, r0
   12adc:	b	11c98 <__assert_fail@plt+0xbe0>
   12ae0:	ldr	sl, [sp, #124]	; 0x7c
   12ae4:	b	11c98 <__assert_fail@plt+0xbe0>
   12ae8:	ldr	r2, [sp, #56]	; 0x38
   12aec:	ldr	r3, [sp, #44]	; 0x2c
   12af0:	subs	r0, r2, r8
   12af4:	sbcs	r0, r3, r9
   12af8:	bge	12b98 <__assert_fail@plt+0x1ae0>
   12afc:	ldr	r0, [sp, #36]	; 0x24
   12b00:	mov	r7, #0
   12b04:	mov	r5, r3
   12b08:	mov	r4, r2
   12b0c:	str	r7, [sp]
   12b10:	str	r0, [sp, #4]
   12b14:	ldr	r0, [sp, #124]	; 0x7c
   12b18:	bl	12e68 <__assert_fail@plt+0x1db0>
   12b1c:	cmp	r1, #0
   12b20:	bmi	12be4 <__assert_fail@plt+0x1b2c>
   12b24:	subs	r4, r8, r4
   12b28:	add	r7, sp, #232	; 0xe8
   12b2c:	sbc	r5, r9, r5
   12b30:	orrs	r0, r4, r5
   12b34:	bne	12b50 <__assert_fail@plt+0x1a98>
   12b38:	b	12b98 <__assert_fail@plt+0x1ae0>
   12b3c:	add	r7, sp, #232	; 0xe8
   12b40:	mov	r0, r7
   12b44:	bl	12f18 <__assert_fail@plt+0x1e60>
   12b48:	orrs	r0, r4, r5
   12b4c:	beq	12b98 <__assert_fail@plt+0x1ae0>
   12b50:	subs	r0, r4, #8192	; 0x2000
   12b54:	mov	r2, #8192	; 0x2000
   12b58:	mov	r1, r7
   12b5c:	sbcs	r0, r5, #0
   12b60:	ldr	r0, [sp, #124]	; 0x7c
   12b64:	movcc	r2, r4
   12b68:	bl	15098 <__assert_fail@plt+0x3fe0>
   12b6c:	cmn	r0, #1
   12b70:	beq	12c0c <__assert_fail@plt+0x1b54>
   12b74:	subs	r4, r4, r0
   12b78:	mov	r1, r0
   12b7c:	sbc	r5, r5, #0
   12b80:	cmp	r0, #0
   12b84:	bne	12b3c <__assert_fail@plt+0x1a84>
   12b88:	orrs	r0, r4, r5
   12b8c:	beq	12b3c <__assert_fail@plt+0x1a84>
   12b90:	mov	r0, #2
   12b94:	b	12c10 <__assert_fail@plt+0x1b58>
   12b98:	sub	lr, fp, #8192	; 0x2000
   12b9c:	add	r1, r6, #1
   12ba0:	sub	r0, lr, #32
   12ba4:	bl	12f18 <__assert_fail@plt+0x1e60>
   12ba8:	mov	r0, #0
   12bac:	str	r0, [sp]
   12bb0:	ldr	r0, [sp, #36]	; 0x24
   12bb4:	str	r0, [sp, #4]
   12bb8:	adds	r0, r8, r6
   12bbc:	adc	r1, r9, #0
   12bc0:	adds	r2, r0, #1
   12bc4:	ldr	r0, [sp, #124]	; 0x7c
   12bc8:	adc	r3, r1, #0
   12bcc:	bl	12e68 <__assert_fail@plt+0x1db0>
   12bd0:	mvn	r2, #0
   12bd4:	mov	r7, #0
   12bd8:	subs	r0, r2, r0
   12bdc:	sbcs	r0, r2, r1
   12be0:	movwlt	r7, #1
   12be4:	ldr	r8, [sp, #36]	; 0x24
   12be8:	ldr	r9, [sp, #60]	; 0x3c
   12bec:	ldr	sl, [sp, #124]	; 0x7c
   12bf0:	b	11c98 <__assert_fail@plt+0xbe0>
   12bf4:	mov	r0, #1
   12bf8:	mov	r1, r8
   12bfc:	bl	12f9c <__assert_fail@plt+0x1ee4>
   12c00:	ldr	sl, [sp, #124]	; 0x7c
   12c04:	mov	r7, #0
   12c08:	b	11c98 <__assert_fail@plt+0xbe0>
   12c0c:	mov	r0, #1
   12c10:	ldr	r1, [sp, #36]	; 0x24
   12c14:	bl	12f9c <__assert_fail@plt+0x1ee4>
   12c18:	mov	r7, #0
   12c1c:	b	12be4 <__assert_fail@plt+0x1b2c>
   12c20:	eor	r6, r9, #1
   12c24:	movw	r0, #37205	; 0x9155
   12c28:	movt	r0, #2
   12c2c:	ldrb	r0, [r0]
   12c30:	cmp	r0, #1
   12c34:	bne	12c48 <__assert_fail@plt+0x1b90>
   12c38:	mov	r0, #0
   12c3c:	bl	110ac <close@plt>
   12c40:	cmn	r0, #1
   12c44:	ble	12e50 <__assert_fail@plt+0x1d98>
   12c48:	mov	r0, r6
   12c4c:	sub	sp, fp, #28
   12c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c54:	uxtb	r1, r3
   12c58:	cmp	r1, #0
   12c5c:	bne	12d90 <__assert_fail@plt+0x1cd8>
   12c60:	tst	lr, #255	; 0xff
   12c64:	strb	lr, [r0]
   12c68:	mov	r2, #5
   12c6c:	mov	r7, #0
   12c70:	movne	r1, #0
   12c74:	strbne	r1, [r0, #1]
   12c78:	ands	r0, ip, #1
   12c7c:	movw	r1, #30552	; 0x7758
   12c80:	str	r0, [sp, #76]	; 0x4c
   12c84:	movw	r0, #31031	; 0x7937
   12c88:	movt	r1, #1
   12c8c:	movt	r0, #1
   12c90:	movne	r1, r0
   12c94:	mov	r0, #0
   12c98:	bl	10ecc <dcgettext@plt>
   12c9c:	mvn	r1, #0
   12ca0:	str	r0, [sp, #12]
   12ca4:	ldr	r0, [sp, #120]	; 0x78
   12ca8:	mov	r2, #0
   12cac:	mov	r3, #0
   12cb0:	str	r7, [sp, #16]
   12cb4:	str	r1, [sp]
   12cb8:	str	r1, [sp, #4]
   12cbc:	movw	r1, #31018	; 0x792a
   12cc0:	movt	r1, #1
   12cc4:	str	r1, [sp, #8]
   12cc8:	bl	15e28 <__assert_fail@plt+0x4d70>
   12ccc:	mov	r2, r0
   12cd0:	ldr	r0, [r6]
   12cd4:	sub	r4, r4, #1
   12cd8:	mov	sl, #1
   12cdc:	str	r1, [sp, #100]	; 0x64
   12ce0:	str	r0, [r6, #4]
   12ce4:	b	11688 <__assert_fail@plt+0x5d0>
   12ce8:	cmn	r6, #3
   12cec:	bne	12d44 <__assert_fail@plt+0x1c8c>
   12cf0:	movw	r0, #37104	; 0x90f0
   12cf4:	movw	r2, #30532	; 0x7744
   12cf8:	mov	r1, #0
   12cfc:	movw	r7, #30516	; 0x7734
   12d00:	movt	r0, #2
   12d04:	movt	r2, #1
   12d08:	str	r1, [sp, #8]
   12d0c:	movw	r1, #30425	; 0x76d9
   12d10:	movt	r7, #1
   12d14:	movt	r1, #1
   12d18:	ldr	r3, [r0]
   12d1c:	movw	r0, #37196	; 0x914c
   12d20:	str	r2, [sp, #4]
   12d24:	movw	r2, #30502	; 0x7726
   12d28:	str	r7, [sp]
   12d2c:	movt	r0, #2
   12d30:	movt	r2, #1
   12d34:	ldr	r0, [r0]
   12d38:	bl	15580 <__assert_fail@plt+0x44c8>
   12d3c:	mov	r0, #0
   12d40:	bl	10fb0 <exit@plt>
   12d44:	cmn	r6, #2
   12d48:	bne	12d54 <__assert_fail@plt+0x1c9c>
   12d4c:	mov	r0, #0
   12d50:	bl	111b4 <__assert_fail@plt+0xfc>
   12d54:	sub	r0, r6, #48	; 0x30
   12d58:	cmp	r0, #9
   12d5c:	bhi	12d88 <__assert_fail@plt+0x1cd0>
   12d60:	movw	r1, #30454	; 0x76f6
   12d64:	mov	r0, #0
   12d68:	mov	r2, #5
   12d6c:	movt	r1, #1
   12d70:	bl	10ecc <dcgettext@plt>
   12d74:	mov	r2, r0
   12d78:	mov	r0, #0
   12d7c:	mov	r1, #0
   12d80:	mov	r3, r6
   12d84:	bl	10f50 <error@plt>
   12d88:	mov	r0, #1
   12d8c:	bl	111b4 <__assert_fail@plt+0xfc>
   12d90:	movw	r1, #30454	; 0x76f6
   12d94:	mov	r0, #0
   12d98:	mov	r2, #5
   12d9c:	movt	r1, #1
   12da0:	bl	10ecc <dcgettext@plt>
   12da4:	ldrb	r3, [r7]
   12da8:	mov	r2, r0
   12dac:	mov	r0, #0
   12db0:	mov	r1, #0
   12db4:	bl	10f50 <error@plt>
   12db8:	mov	r0, #1
   12dbc:	bl	111b4 <__assert_fail@plt+0xfc>
   12dc0:	movw	r1, #31362	; 0x7a82
   12dc4:	mov	r0, #0
   12dc8:	mov	r2, #5
   12dcc:	movt	r1, #1
   12dd0:	bl	10ecc <dcgettext@plt>
   12dd4:	mov	r4, r0
   12dd8:	ldr	r0, [sp, #120]	; 0x78
   12ddc:	ldr	r1, [sp, #100]	; 0x64
   12de0:	sub	lr, fp, #8192	; 0x2000
   12de4:	sub	r2, lr, #32
   12de8:	bl	1329c <__assert_fail@plt+0x21e4>
   12dec:	mov	r3, r0
   12df0:	mov	r0, #1
   12df4:	mov	r1, #0
   12df8:	mov	r2, r4
   12dfc:	bl	10f50 <error@plt>
   12e00:	movw	r1, #30552	; 0x7758
   12e04:	mov	r0, #0
   12e08:	mov	r2, #5
   12e0c:	mov	r5, r3
   12e10:	movt	r1, #1
   12e14:	bl	10ecc <dcgettext@plt>
   12e18:	mov	r4, r0
   12e1c:	ldr	r0, [sp, #120]	; 0x78
   12e20:	sub	lr, fp, #8192	; 0x2000
   12e24:	mov	r1, r5
   12e28:	sub	r2, lr, #32
   12e2c:	bl	1329c <__assert_fail@plt+0x21e4>
   12e30:	bl	14f4c <__assert_fail@plt+0x3e94>
   12e34:	movw	r2, #30545	; 0x7751
   12e38:	str	r0, [sp]
   12e3c:	mov	r0, #1
   12e40:	mov	r1, #75	; 0x4b
   12e44:	mov	r3, r4
   12e48:	movt	r2, #1
   12e4c:	bl	10f50 <error@plt>
   12e50:	bl	10fec <__errno_location@plt>
   12e54:	ldr	r1, [r0]
   12e58:	movw	r2, #31717	; 0x7be5
   12e5c:	mov	r0, #1
   12e60:	movt	r2, #1
   12e64:	bl	10f50 <error@plt>
   12e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e6c:	add	fp, sp, #28
   12e70:	sub	sp, sp, #28
   12e74:	ldr	r8, [fp, #8]
   12e78:	mov	r6, r3
   12e7c:	mov	r7, r2
   12e80:	str	r8, [sp]
   12e84:	bl	10f20 <lseek64@plt>
   12e88:	mov	r9, r0
   12e8c:	mov	r5, r1
   12e90:	cmn	r1, #1
   12e94:	bgt	12f08 <__assert_fail@plt+0x1e50>
   12e98:	movw	r0, #31216	; 0x79f0
   12e9c:	movw	r4, #31245	; 0x7a0d
   12ea0:	cmp	r8, #0
   12ea4:	movt	r0, #1
   12ea8:	movt	r4, #1
   12eac:	moveq	r4, r0
   12eb0:	bl	10fec <__errno_location@plt>
   12eb4:	ldr	sl, [r0]
   12eb8:	mov	r0, #0
   12ebc:	mov	r1, r4
   12ec0:	mov	r2, #5
   12ec4:	bl	10ecc <dcgettext@plt>
   12ec8:	ldr	r2, [fp, #12]
   12ecc:	mov	r8, r0
   12ed0:	mov	r0, #0
   12ed4:	mov	r1, #3
   12ed8:	bl	14ca0 <__assert_fail@plt+0x3be8>
   12edc:	mov	r4, r0
   12ee0:	add	r2, sp, #7
   12ee4:	mov	r0, r7
   12ee8:	mov	r1, r6
   12eec:	bl	131dc <__assert_fail@plt+0x2124>
   12ef0:	str	r0, [sp]
   12ef4:	mov	r0, #0
   12ef8:	mov	r1, sl
   12efc:	mov	r2, r8
   12f00:	mov	r3, r4
   12f04:	bl	10f50 <error@plt>
   12f08:	mov	r0, r9
   12f0c:	mov	r1, r5
   12f10:	sub	sp, fp, #28
   12f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f18:	push	{r4, r5, fp, lr}
   12f1c:	add	fp, sp, #8
   12f20:	cmp	r1, #0
   12f24:	popeq	{r4, r5, fp, pc}
   12f28:	movw	r5, #37196	; 0x914c
   12f2c:	mov	r4, r1
   12f30:	mov	r1, #1
   12f34:	movt	r5, #2
   12f38:	mov	r2, r4
   12f3c:	ldr	r3, [r5]
   12f40:	bl	10ec0 <fwrite_unlocked@plt>
   12f44:	cmp	r0, r4
   12f48:	bcc	12f50 <__assert_fail@plt+0x1e98>
   12f4c:	pop	{r4, r5, fp, pc}
   12f50:	ldr	r0, [r5]
   12f54:	bl	1107c <clearerr_unlocked@plt>
   12f58:	bl	10fec <__errno_location@plt>
   12f5c:	movw	r1, #31300	; 0x7a44
   12f60:	ldr	r4, [r0]
   12f64:	mov	r0, #0
   12f68:	mov	r2, #5
   12f6c:	movt	r1, #1
   12f70:	bl	10ecc <dcgettext@plt>
   12f74:	movw	r1, #31317	; 0x7a55
   12f78:	mov	r5, r0
   12f7c:	mov	r0, #4
   12f80:	movt	r1, #1
   12f84:	bl	14a24 <__assert_fail@plt+0x396c>
   12f88:	mov	r3, r0
   12f8c:	mov	r0, #1
   12f90:	mov	r1, r4
   12f94:	mov	r2, r5
   12f98:	bl	10f50 <error@plt>
   12f9c:	push	{r4, r5, r6, sl, fp, lr}
   12fa0:	add	fp, sp, #16
   12fa4:	mov	r4, r1
   12fa8:	cmp	r0, #2
   12fac:	beq	12fe8 <__assert_fail@plt+0x1f30>
   12fb0:	cmp	r0, #1
   12fb4:	bne	13030 <__assert_fail@plt+0x1f78>
   12fb8:	bl	10fec <__errno_location@plt>
   12fbc:	movw	r1, #31283	; 0x7a33
   12fc0:	ldr	r5, [r0]
   12fc4:	mov	r0, #0
   12fc8:	mov	r2, #5
   12fcc:	movt	r1, #1
   12fd0:	bl	10ecc <dcgettext@plt>
   12fd4:	mov	r6, r0
   12fd8:	mov	r0, #4
   12fdc:	mov	r1, r4
   12fe0:	bl	14a24 <__assert_fail@plt+0x396c>
   12fe4:	b	13018 <__assert_fail@plt+0x1f60>
   12fe8:	bl	10fec <__errno_location@plt>
   12fec:	movw	r1, #31333	; 0x7a65
   12ff0:	ldr	r5, [r0]
   12ff4:	mov	r0, #0
   12ff8:	mov	r2, #5
   12ffc:	movt	r1, #1
   13000:	bl	10ecc <dcgettext@plt>
   13004:	mov	r6, r0
   13008:	mov	r0, #0
   1300c:	mov	r1, #3
   13010:	mov	r2, r4
   13014:	bl	14ca0 <__assert_fail@plt+0x3be8>
   13018:	mov	r3, r0
   1301c:	mov	r0, #0
   13020:	mov	r1, r5
   13024:	mov	r2, r6
   13028:	pop	{r4, r5, r6, sl, fp, lr}
   1302c:	b	10f50 <error@plt>
   13030:	bl	110a0 <abort@plt>
   13034:	movw	r1, #37212	; 0x915c
   13038:	movt	r1, #2
   1303c:	str	r0, [r1]
   13040:	bx	lr
   13044:	movw	r1, #37216	; 0x9160
   13048:	movt	r1, #2
   1304c:	strb	r0, [r1]
   13050:	bx	lr
   13054:	push	{r4, r5, r6, sl, fp, lr}
   13058:	add	fp, sp, #16
   1305c:	sub	sp, sp, #8
   13060:	movw	r0, #37196	; 0x914c
   13064:	movt	r0, #2
   13068:	ldr	r0, [r0]
   1306c:	bl	16ba8 <__assert_fail@plt+0x5af0>
   13070:	cmp	r0, #0
   13074:	beq	1309c <__assert_fail@plt+0x1fe4>
   13078:	movw	r0, #37216	; 0x9160
   1307c:	movt	r0, #2
   13080:	ldrb	r0, [r0]
   13084:	cmp	r0, #0
   13088:	beq	130bc <__assert_fail@plt+0x2004>
   1308c:	bl	10fec <__errno_location@plt>
   13090:	ldr	r0, [r0]
   13094:	cmp	r0, #32
   13098:	bne	130bc <__assert_fail@plt+0x2004>
   1309c:	movw	r0, #37192	; 0x9148
   130a0:	movt	r0, #2
   130a4:	ldr	r0, [r0]
   130a8:	bl	16ba8 <__assert_fail@plt+0x5af0>
   130ac:	cmp	r0, #0
   130b0:	subeq	sp, fp, #16
   130b4:	popeq	{r4, r5, r6, sl, fp, pc}
   130b8:	b	1312c <__assert_fail@plt+0x2074>
   130bc:	movw	r1, #31639	; 0x7b97
   130c0:	mov	r0, #0
   130c4:	mov	r2, #5
   130c8:	movt	r1, #1
   130cc:	bl	10ecc <dcgettext@plt>
   130d0:	mov	r4, r0
   130d4:	movw	r0, #37212	; 0x915c
   130d8:	movt	r0, #2
   130dc:	ldr	r6, [r0]
   130e0:	bl	10fec <__errno_location@plt>
   130e4:	ldr	r5, [r0]
   130e8:	cmp	r6, #0
   130ec:	bne	13108 <__assert_fail@plt+0x2050>
   130f0:	movw	r2, #30549	; 0x7755
   130f4:	mov	r0, #0
   130f8:	mov	r1, r5
   130fc:	mov	r3, r4
   13100:	movt	r2, #1
   13104:	b	13128 <__assert_fail@plt+0x2070>
   13108:	mov	r0, r6
   1310c:	bl	14bc4 <__assert_fail@plt+0x3b0c>
   13110:	movw	r2, #30545	; 0x7751
   13114:	mov	r3, r0
   13118:	str	r4, [sp]
   1311c:	mov	r0, #0
   13120:	mov	r1, r5
   13124:	movt	r2, #1
   13128:	bl	10f50 <error@plt>
   1312c:	movw	r0, #37108	; 0x90f4
   13130:	movt	r0, #2
   13134:	ldr	r0, [r0]
   13138:	bl	10e90 <_exit@plt>
   1313c:	push	{r4, r5, r6, sl, fp, lr}
   13140:	add	fp, sp, #16
   13144:	mov	r4, r0
   13148:	bl	10fec <__errno_location@plt>
   1314c:	ldr	r6, [r0]
   13150:	mov	r5, r0
   13154:	mov	r0, r4
   13158:	bl	10e84 <free@plt>
   1315c:	str	r6, [r5]
   13160:	pop	{r4, r5, r6, sl, fp, pc}
   13164:	push	{r4, r5, r6, r7, fp, lr}
   13168:	add	fp, sp, #16
   1316c:	cmp	r2, #0
   13170:	beq	131bc <__assert_fail@plt+0x2104>
   13174:	mov	r5, r2
   13178:	mov	r6, r1
   1317c:	mov	r7, r0
   13180:	mov	r4, #0
   13184:	mov	r0, r7
   13188:	mov	r1, r6
   1318c:	mov	r2, r5
   13190:	bl	15098 <__assert_fail@plt+0x3fe0>
   13194:	cmn	r0, #1
   13198:	beq	131b4 <__assert_fail@plt+0x20fc>
   1319c:	cmp	r0, #0
   131a0:	beq	131c8 <__assert_fail@plt+0x2110>
   131a4:	subs	r5, r5, r0
   131a8:	add	r6, r6, r0
   131ac:	add	r4, r0, r4
   131b0:	bne	13184 <__assert_fail@plt+0x20cc>
   131b4:	mov	r0, r4
   131b8:	pop	{r4, r5, r6, r7, fp, pc}
   131bc:	mov	r4, #0
   131c0:	mov	r0, r4
   131c4:	pop	{r4, r5, r6, r7, fp, pc}
   131c8:	bl	10fec <__errno_location@plt>
   131cc:	mov	r1, #0
   131d0:	str	r1, [r0]
   131d4:	mov	r0, r4
   131d8:	pop	{r4, r5, r6, r7, fp, pc}
   131dc:	push	{r4, r5, r6, sl, fp, lr}
   131e0:	add	fp, sp, #16
   131e4:	mov	r5, r0
   131e8:	mov	r0, #0
   131ec:	mov	r4, r1
   131f0:	add	r6, r2, #19
   131f4:	cmp	r1, #0
   131f8:	strb	r0, [r2, #20]
   131fc:	bmi	1324c <__assert_fail@plt+0x2194>
   13200:	mov	r0, r5
   13204:	mov	r1, r4
   13208:	mov	r2, #10
   1320c:	mov	r3, #0
   13210:	bl	16fb0 <__assert_fail@plt+0x5ef8>
   13214:	add	r2, r0, r0, lsl #2
   13218:	sub	r2, r5, r2, lsl #1
   1321c:	add	r2, r2, #48	; 0x30
   13220:	strb	r2, [r6], #-1
   13224:	adds	r2, r5, #9
   13228:	mov	r5, r0
   1322c:	adc	r3, r4, #0
   13230:	rsbs	r2, r2, #18
   13234:	mov	r4, r1
   13238:	rscs	r2, r3, #0
   1323c:	bcc	13200 <__assert_fail@plt+0x2148>
   13240:	add	r6, r6, #1
   13244:	mov	r0, r6
   13248:	pop	{r4, r5, r6, sl, fp, pc}
   1324c:	mov	r0, r5
   13250:	mov	r1, r4
   13254:	mov	r2, #10
   13258:	mov	r3, #0
   1325c:	bl	16fb0 <__assert_fail@plt+0x5ef8>
   13260:	add	r2, r0, r0, lsl #2
   13264:	rsb	r2, r5, r2, lsl #1
   13268:	add	r2, r2, #48	; 0x30
   1326c:	strb	r2, [r6], #-1
   13270:	adds	r2, r5, #9
   13274:	mov	r5, r0
   13278:	adc	r3, r4, #0
   1327c:	rsbs	r2, r2, #18
   13280:	mov	r4, r1
   13284:	rscs	r2, r3, #0
   13288:	bcc	1324c <__assert_fail@plt+0x2194>
   1328c:	mov	r0, #45	; 0x2d
   13290:	strb	r0, [r6]
   13294:	mov	r0, r6
   13298:	pop	{r4, r5, r6, sl, fp, pc}
   1329c:	push	{r4, r5, r6, sl, fp, lr}
   132a0:	add	fp, sp, #16
   132a4:	mov	r5, r0
   132a8:	mov	r0, #0
   132ac:	mov	r4, r1
   132b0:	add	r6, r2, #19
   132b4:	strb	r0, [r2, #20]
   132b8:	mov	r0, r5
   132bc:	mov	r1, r4
   132c0:	mov	r2, #10
   132c4:	mov	r3, #0
   132c8:	bl	17084 <__assert_fail@plt+0x5fcc>
   132cc:	add	r2, r0, r0, lsl #2
   132d0:	sub	r2, r5, r2, lsl #1
   132d4:	orr	r2, r2, #48	; 0x30
   132d8:	strb	r2, [r6], #-1
   132dc:	rsbs	r2, r5, #9
   132e0:	mov	r5, r0
   132e4:	rscs	r2, r4, #0
   132e8:	mov	r4, r1
   132ec:	bcc	132b8 <__assert_fail@plt+0x2200>
   132f0:	add	r0, r6, #1
   132f4:	pop	{r4, r5, r6, sl, fp, pc}
   132f8:	push	{r4, r5, fp, lr}
   132fc:	add	fp, sp, #8
   13300:	cmp	r0, #0
   13304:	beq	13398 <__assert_fail@plt+0x22e0>
   13308:	mov	r1, #47	; 0x2f
   1330c:	mov	r4, r0
   13310:	bl	11064 <strrchr@plt>
   13314:	cmp	r0, #0
   13318:	mov	r5, r4
   1331c:	addne	r5, r0, #1
   13320:	sub	r0, r5, r4
   13324:	cmp	r0, #7
   13328:	blt	1337c <__assert_fail@plt+0x22c4>
   1332c:	movw	r1, #31707	; 0x7bdb
   13330:	sub	r0, r5, #7
   13334:	mov	r2, #7
   13338:	movt	r1, #1
   1333c:	bl	11094 <strncmp@plt>
   13340:	cmp	r0, #0
   13344:	bne	1337c <__assert_fail@plt+0x22c4>
   13348:	movw	r1, #31715	; 0x7be3
   1334c:	mov	r0, r5
   13350:	mov	r2, #3
   13354:	movt	r1, #1
   13358:	bl	11094 <strncmp@plt>
   1335c:	cmp	r0, #0
   13360:	beq	1336c <__assert_fail@plt+0x22b4>
   13364:	mov	r4, r5
   13368:	b	1337c <__assert_fail@plt+0x22c4>
   1336c:	movw	r0, #37176	; 0x9138
   13370:	add	r4, r5, #3
   13374:	movt	r0, #2
   13378:	str	r4, [r0]
   1337c:	movw	r0, #37180	; 0x913c
   13380:	movt	r0, #2
   13384:	str	r4, [r0]
   13388:	movw	r0, #37220	; 0x9164
   1338c:	movt	r0, #2
   13390:	str	r4, [r0]
   13394:	pop	{r4, r5, fp, pc}
   13398:	movw	r0, #37192	; 0x9148
   1339c:	mov	r1, #55	; 0x37
   133a0:	mov	r2, #1
   133a4:	movt	r0, #2
   133a8:	ldr	r3, [r0]
   133ac:	movw	r0, #31651	; 0x7ba3
   133b0:	movt	r0, #1
   133b4:	bl	10f14 <fwrite@plt>
   133b8:	bl	110a0 <abort@plt>
   133bc:	push	{r4, r5, r6, sl, fp, lr}
   133c0:	add	fp, sp, #16
   133c4:	mov	r4, r0
   133c8:	movw	r0, #37224	; 0x9168
   133cc:	movt	r0, #2
   133d0:	cmp	r4, #0
   133d4:	moveq	r4, r0
   133d8:	bl	10fec <__errno_location@plt>
   133dc:	ldr	r6, [r0]
   133e0:	mov	r5, r0
   133e4:	mov	r0, r4
   133e8:	mov	r1, #48	; 0x30
   133ec:	bl	15c14 <__assert_fail@plt+0x4b5c>
   133f0:	str	r6, [r5]
   133f4:	pop	{r4, r5, r6, sl, fp, pc}
   133f8:	movw	r1, #37224	; 0x9168
   133fc:	cmp	r0, #0
   13400:	movt	r1, #2
   13404:	movne	r1, r0
   13408:	ldr	r0, [r1]
   1340c:	bx	lr
   13410:	movw	r2, #37224	; 0x9168
   13414:	cmp	r0, #0
   13418:	movt	r2, #2
   1341c:	movne	r2, r0
   13420:	str	r1, [r2]
   13424:	bx	lr
   13428:	movw	r3, #37224	; 0x9168
   1342c:	cmp	r0, #0
   13430:	and	r2, r2, #1
   13434:	movt	r3, #2
   13438:	movne	r3, r0
   1343c:	ubfx	r0, r1, #5, #3
   13440:	and	r1, r1, #31
   13444:	add	ip, r3, r0, lsl #2
   13448:	mov	r0, #1
   1344c:	ldr	r3, [ip, #8]
   13450:	and	r0, r0, r3, lsr r1
   13454:	eor	r2, r0, r2
   13458:	eor	r1, r3, r2, lsl r1
   1345c:	str	r1, [ip, #8]
   13460:	bx	lr
   13464:	movw	r2, #37224	; 0x9168
   13468:	cmp	r0, #0
   1346c:	movt	r2, #2
   13470:	movne	r2, r0
   13474:	ldr	r0, [r2, #4]
   13478:	str	r1, [r2, #4]
   1347c:	bx	lr
   13480:	push	{fp, lr}
   13484:	mov	fp, sp
   13488:	movw	r3, #37224	; 0x9168
   1348c:	cmp	r0, #0
   13490:	movt	r3, #2
   13494:	movne	r3, r0
   13498:	cmp	r1, #0
   1349c:	mov	r0, #10
   134a0:	cmpne	r2, #0
   134a4:	str	r0, [r3]
   134a8:	bne	134b0 <__assert_fail@plt+0x23f8>
   134ac:	bl	110a0 <abort@plt>
   134b0:	str	r1, [r3, #40]	; 0x28
   134b4:	str	r2, [r3, #44]	; 0x2c
   134b8:	pop	{fp, pc}
   134bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134c0:	add	fp, sp, #28
   134c4:	sub	sp, sp, #20
   134c8:	mov	r7, r0
   134cc:	ldr	r0, [fp, #8]
   134d0:	movw	r5, #37224	; 0x9168
   134d4:	mov	r8, r3
   134d8:	mov	r9, r2
   134dc:	mov	sl, r1
   134e0:	movt	r5, #2
   134e4:	cmp	r0, #0
   134e8:	movne	r5, r0
   134ec:	bl	10fec <__errno_location@plt>
   134f0:	ldr	r2, [r5, #40]	; 0x28
   134f4:	ldr	r3, [r5, #44]	; 0x2c
   134f8:	mov	r4, r0
   134fc:	ldm	r5, {r0, r1}
   13500:	add	r5, r5, #8
   13504:	ldr	r6, [r4]
   13508:	stm	sp, {r0, r1, r5}
   1350c:	mov	r0, r7
   13510:	mov	r1, sl
   13514:	str	r2, [sp, #12]
   13518:	str	r3, [sp, #16]
   1351c:	mov	r2, r9
   13520:	mov	r3, r8
   13524:	bl	13534 <__assert_fail@plt+0x247c>
   13528:	str	r6, [r4]
   1352c:	sub	sp, fp, #28
   13530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13538:	add	fp, sp, #28
   1353c:	sub	sp, sp, #156	; 0x9c
   13540:	mov	r5, r0
   13544:	add	r0, r2, #1
   13548:	mov	r6, r1
   1354c:	mov	sl, r3
   13550:	str	r2, [fp, #-80]	; 0xffffffb0
   13554:	str	r0, [sp, #72]	; 0x48
   13558:	ldr	r0, [fp, #12]
   1355c:	and	r1, r0, #1
   13560:	str	r1, [sp, #36]	; 0x24
   13564:	and	r1, r0, #4
   13568:	str	r1, [sp, #32]
   1356c:	ubfx	r9, r0, #1, #1
   13570:	bl	10f2c <__ctype_get_mb_cur_max@plt>
   13574:	str	r0, [sp, #40]	; 0x28
   13578:	ldr	r0, [fp, #24]
   1357c:	ldr	r7, [fp, #8]
   13580:	mov	r1, #0
   13584:	str	r5, [fp, #-84]	; 0xffffffac
   13588:	str	r1, [fp, #-56]	; 0xffffffc8
   1358c:	mov	r1, #0
   13590:	str	r1, [sp, #60]	; 0x3c
   13594:	mov	r1, #1
   13598:	str	r1, [fp, #-48]	; 0xffffffd0
   1359c:	str	r0, [sp, #80]	; 0x50
   135a0:	ldr	r0, [fp, #20]
   135a4:	str	r0, [sp, #76]	; 0x4c
   135a8:	mov	r0, #0
   135ac:	str	r0, [sp, #56]	; 0x38
   135b0:	mov	r0, #0
   135b4:	str	r0, [fp, #-88]	; 0xffffffa8
   135b8:	mov	r0, #0
   135bc:	str	r0, [fp, #-72]	; 0xffffffb8
   135c0:	mov	r0, #0
   135c4:	cmp	r7, #10
   135c8:	bhi	1455c <__assert_fail@plt+0x34a4>
   135cc:	add	r1, pc, #24
   135d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   135d4:	mov	r4, r6
   135d8:	mov	r8, #0
   135dc:	mov	r2, #1
   135e0:	mov	r3, #0
   135e4:	mov	lr, sl
   135e8:	ldr	pc, [r1, r7, lsl #2]
   135ec:			; <UNDEFINED> instruction: 0x000136b0
   135f0:	andeq	r3, r1, r4, lsl #14
   135f4:	andeq	r3, r1, r4, asr #13
   135f8:	andeq	r3, r1, r8, lsr #13
   135fc:	strdeq	r3, [r1], -r8
   13600:	andeq	r3, r1, ip, lsr #14
   13604:	ldrdeq	r3, [r1], -r4
   13608:			; <UNDEFINED> instruction: 0x000137b0
   1360c:	andeq	r3, r1, r8, lsl r6
   13610:	andeq	r3, r1, r8, lsl r6
   13614:	andeq	r3, r1, r0, asr #12
   13618:	movw	r0, #31797	; 0x7c35
   1361c:	mov	r1, r7
   13620:	movt	r0, #1
   13624:	bl	14f64 <__assert_fail@plt+0x3eac>
   13628:	str	r0, [sp, #76]	; 0x4c
   1362c:	movw	r0, #31799	; 0x7c37
   13630:	mov	r1, r7
   13634:	movt	r0, #1
   13638:	bl	14f64 <__assert_fail@plt+0x3eac>
   1363c:	str	r0, [sp, #80]	; 0x50
   13640:	mov	r8, #0
   13644:	tst	r9, #1
   13648:	bne	13680 <__assert_fail@plt+0x25c8>
   1364c:	ldr	r0, [sp, #76]	; 0x4c
   13650:	ldrb	r0, [r0]
   13654:	cmp	r0, #0
   13658:	beq	13680 <__assert_fail@plt+0x25c8>
   1365c:	ldr	r1, [sp, #76]	; 0x4c
   13660:	mov	r8, #0
   13664:	add	r1, r1, #1
   13668:	cmp	r8, r4
   1366c:	strbcc	r0, [r5, r8]
   13670:	ldrb	r0, [r1, r8]
   13674:	add	r8, r8, #1
   13678:	cmp	r0, #0
   1367c:	bne	13668 <__assert_fail@plt+0x25b0>
   13680:	ldr	r6, [sp, #80]	; 0x50
   13684:	mov	r0, r6
   13688:	bl	10fc8 <strlen@plt>
   1368c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13690:	str	r0, [fp, #-72]	; 0xffffffb8
   13694:	str	r6, [fp, #-88]	; 0xffffffa8
   13698:	mov	r2, #1
   1369c:	mov	r3, r9
   136a0:	mov	lr, sl
   136a4:	b	137b0 <__assert_fail@plt+0x26f8>
   136a8:	mov	r0, #1
   136ac:	b	13704 <__assert_fail@plt+0x264c>
   136b0:	mov	r7, #0
   136b4:	mov	r8, #0
   136b8:	mov	r2, r0
   136bc:	mov	r3, #0
   136c0:	b	137b0 <__assert_fail@plt+0x26f8>
   136c4:	tst	r9, #1
   136c8:	bne	13704 <__assert_fail@plt+0x264c>
   136cc:	mov	r2, r0
   136d0:	b	1375c <__assert_fail@plt+0x26a4>
   136d4:	mov	r0, #1
   136d8:	mov	r8, #0
   136dc:	mov	r7, #5
   136e0:	mov	r2, #1
   136e4:	str	r0, [fp, #-72]	; 0xffffffb8
   136e8:	movw	r0, #31795	; 0x7c33
   136ec:	movt	r0, #1
   136f0:	str	r0, [fp, #-88]	; 0xffffffa8
   136f4:	b	13724 <__assert_fail@plt+0x266c>
   136f8:	mov	r2, #1
   136fc:	tst	r9, #1
   13700:	beq	1375c <__assert_fail@plt+0x26a4>
   13704:	mov	r1, #1
   13708:	mov	r8, #0
   1370c:	mov	r7, #2
   13710:	mov	r2, r0
   13714:	str	r1, [fp, #-72]	; 0xffffffb8
   13718:	movw	r1, #31799	; 0x7c37
   1371c:	movt	r1, #1
   13720:	str	r1, [fp, #-88]	; 0xffffffa8
   13724:	mov	r3, #1
   13728:	b	137b0 <__assert_fail@plt+0x26f8>
   1372c:	tst	r9, #1
   13730:	beq	13780 <__assert_fail@plt+0x26c8>
   13734:	mov	r0, #1
   13738:	mov	r8, #0
   1373c:	mov	r2, #1
   13740:	mov	r3, #1
   13744:	mov	r7, #5
   13748:	str	r0, [fp, #-72]	; 0xffffffb8
   1374c:	movw	r0, #31795	; 0x7c33
   13750:	movt	r0, #1
   13754:	str	r0, [fp, #-88]	; 0xffffffa8
   13758:	b	137b0 <__assert_fail@plt+0x26f8>
   1375c:	cmp	r4, #0
   13760:	mov	r8, #1
   13764:	mov	r3, #0
   13768:	mov	r7, #2
   1376c:	movne	r0, #39	; 0x27
   13770:	strbne	r0, [r5]
   13774:	movw	r0, #31799	; 0x7c37
   13778:	movt	r0, #1
   1377c:	b	137a4 <__assert_fail@plt+0x26ec>
   13780:	cmp	r4, #0
   13784:	mov	r8, #1
   13788:	mov	r2, #1
   1378c:	mov	r7, #5
   13790:	mov	r3, #0
   13794:	movne	r0, #34	; 0x22
   13798:	strbne	r0, [r5]
   1379c:	movw	r0, #31795	; 0x7c33
   137a0:	movt	r0, #1
   137a4:	str	r0, [fp, #-88]	; 0xffffffa8
   137a8:	mov	r0, #1
   137ac:	str	r0, [fp, #-72]	; 0xffffffb8
   137b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137b4:	eor	r6, r3, #1
   137b8:	str	r7, [fp, #-68]	; 0xffffffbc
   137bc:	str	r3, [fp, #-76]	; 0xffffffb4
   137c0:	str	r2, [sp, #84]	; 0x54
   137c4:	str	r6, [sp, #92]	; 0x5c
   137c8:	cmp	r0, #0
   137cc:	movwne	r0, #1
   137d0:	and	r1, r0, r3
   137d4:	and	r1, r2, r1
   137d8:	str	r1, [sp, #48]	; 0x30
   137dc:	sub	r1, r7, #2
   137e0:	clz	r1, r1
   137e4:	lsr	r1, r1, #5
   137e8:	and	r1, r1, r3
   137ec:	str	r1, [sp, #64]	; 0x40
   137f0:	subs	r1, r7, #2
   137f4:	mov	r7, #0
   137f8:	movwne	r1, #1
   137fc:	orr	r6, r1, r6
   13800:	and	r1, r1, r2
   13804:	and	r0, r0, r1
   13808:	str	r6, [sp, #68]	; 0x44
   1380c:	str	r0, [fp, #-60]	; 0xffffffc4
   13810:	orr	r0, r1, r3
   13814:	ldr	r1, [fp, #16]
   13818:	eor	r0, r0, #1
   1381c:	clz	r1, r1
   13820:	lsr	r1, r1, #5
   13824:	orr	r0, r1, r0
   13828:	str	r0, [fp, #-64]	; 0xffffffc0
   1382c:	eor	r0, r2, #1
   13830:	str	r0, [sp, #52]	; 0x34
   13834:	cmn	lr, #1
   13838:	beq	13848 <__assert_fail@plt+0x2790>
   1383c:	cmp	r7, lr
   13840:	bne	13854 <__assert_fail@plt+0x279c>
   13844:	b	1439c <__assert_fail@plt+0x32e4>
   13848:	ldrb	r0, [ip, r7]
   1384c:	cmp	r0, #0
   13850:	beq	143a4 <__assert_fail@plt+0x32ec>
   13854:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13858:	mov	sl, #0
   1385c:	cmp	r0, #0
   13860:	beq	13898 <__assert_fail@plt+0x27e0>
   13864:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13868:	add	r5, r7, r0
   1386c:	cmp	r0, #2
   13870:	bcc	1388c <__assert_fail@plt+0x27d4>
   13874:	cmn	lr, #1
   13878:	bne	1388c <__assert_fail@plt+0x27d4>
   1387c:	mov	r0, ip
   13880:	bl	10fc8 <strlen@plt>
   13884:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13888:	mov	lr, r0
   1388c:	cmp	r5, lr
   13890:	bls	138a0 <__assert_fail@plt+0x27e8>
   13894:	ldr	r5, [fp, #-84]	; 0xffffffac
   13898:	mov	r0, #0
   1389c:	b	138ec <__assert_fail@plt+0x2834>
   138a0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   138a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   138a8:	add	r0, ip, r7
   138ac:	mov	r6, r4
   138b0:	mov	r4, lr
   138b4:	bl	10fbc <bcmp@plt>
   138b8:	ldr	r2, [sp, #92]	; 0x5c
   138bc:	cmp	r0, #0
   138c0:	ldr	r5, [fp, #-84]	; 0xffffffac
   138c4:	mov	r1, r0
   138c8:	movwne	r1, #1
   138cc:	orr	r1, r1, r2
   138d0:	tst	r1, #1
   138d4:	beq	1442c <__assert_fail@plt+0x3374>
   138d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   138dc:	clz	r0, r0
   138e0:	mov	lr, r4
   138e4:	mov	r4, r6
   138e8:	lsr	r0, r0, #5
   138ec:	str	r0, [fp, #-52]	; 0xffffffcc
   138f0:	ldrb	r6, [ip, r7]
   138f4:	cmp	r6, #126	; 0x7e
   138f8:	bhi	13e28 <__assert_fail@plt+0x2d70>
   138fc:	add	r3, pc, #16
   13900:	mov	r9, #1
   13904:	mov	r2, #110	; 0x6e
   13908:	mov	r0, #97	; 0x61
   1390c:	mov	r1, #0
   13910:	ldr	pc, [r3, r6, lsl #2]
   13914:	andeq	r3, r1, r8, lsl #25
   13918:	andeq	r3, r1, r8, lsr #28
   1391c:	andeq	r3, r1, r8, lsr #28
   13920:	andeq	r3, r1, r8, lsr #28
   13924:	andeq	r3, r1, r8, lsr #28
   13928:	andeq	r3, r1, r8, lsr #28
   1392c:	andeq	r3, r1, r8, lsr #28
   13930:	andeq	r3, r1, r4, lsl #30
   13934:	andeq	r3, r1, r8, ror #24
   13938:	andeq	r3, r1, r0, ror #24
   1393c:	andeq	r3, r1, r4, ror ip
   13940:	muleq	r1, r0, sp
   13944:	andeq	r3, r1, r8, asr ip
   13948:	andeq	r3, r1, r0, ror ip
   1394c:	andeq	r3, r1, r8, lsr #28
   13950:	andeq	r3, r1, r8, lsr #28
   13954:	andeq	r3, r1, r8, lsr #28
   13958:	andeq	r3, r1, r8, lsr #28
   1395c:	andeq	r3, r1, r8, lsr #28
   13960:	andeq	r3, r1, r8, lsr #28
   13964:	andeq	r3, r1, r8, lsr #28
   13968:	andeq	r3, r1, r8, lsr #28
   1396c:	andeq	r3, r1, r8, lsr #28
   13970:	andeq	r3, r1, r8, lsr #28
   13974:	andeq	r3, r1, r8, lsr #28
   13978:	andeq	r3, r1, r8, lsr #28
   1397c:	andeq	r3, r1, r8, lsr #28
   13980:	andeq	r3, r1, r8, lsr #28
   13984:	andeq	r3, r1, r8, lsr #28
   13988:	andeq	r3, r1, r8, lsr #28
   1398c:	andeq	r3, r1, r8, lsr #28
   13990:	andeq	r3, r1, r8, lsr #28
   13994:	andeq	r3, r1, ip, lsl #24
   13998:	andeq	r3, r1, r0, lsl ip
   1399c:	andeq	r3, r1, r0, lsl ip
   139a0:	strdeq	r3, [r1], -r8
   139a4:	andeq	r3, r1, r0, lsl ip
   139a8:	andeq	r3, r1, r0, lsl fp
   139ac:	andeq	r3, r1, r0, lsl ip
   139b0:	muleq	r1, r8, sp
   139b4:	andeq	r3, r1, r0, lsl ip
   139b8:	andeq	r3, r1, r0, lsl ip
   139bc:	andeq	r3, r1, r0, lsl ip
   139c0:	andeq	r3, r1, r0, lsl fp
   139c4:	andeq	r3, r1, r0, lsl fp
   139c8:	andeq	r3, r1, r0, lsl fp
   139cc:	andeq	r3, r1, r0, lsl fp
   139d0:	andeq	r3, r1, r0, lsl fp
   139d4:	andeq	r3, r1, r0, lsl fp
   139d8:	andeq	r3, r1, r0, lsl fp
   139dc:	andeq	r3, r1, r0, lsl fp
   139e0:	andeq	r3, r1, r0, lsl fp
   139e4:	andeq	r3, r1, r0, lsl fp
   139e8:	andeq	r3, r1, r0, lsl fp
   139ec:	andeq	r3, r1, r0, lsl fp
   139f0:	andeq	r3, r1, r0, lsl fp
   139f4:	andeq	r3, r1, r0, lsl fp
   139f8:	andeq	r3, r1, r0, lsl fp
   139fc:	andeq	r3, r1, r0, lsl fp
   13a00:	andeq	r3, r1, r0, lsl ip
   13a04:	andeq	r3, r1, r0, lsl ip
   13a08:	andeq	r3, r1, r0, lsl ip
   13a0c:	andeq	r3, r1, r0, lsl ip
   13a10:	andeq	r3, r1, r0, ror #26
   13a14:	andeq	r3, r1, r8, lsr #28
   13a18:	andeq	r3, r1, r0, lsl fp
   13a1c:	andeq	r3, r1, r0, lsl fp
   13a20:	andeq	r3, r1, r0, lsl fp
   13a24:	andeq	r3, r1, r0, lsl fp
   13a28:	andeq	r3, r1, r0, lsl fp
   13a2c:	andeq	r3, r1, r0, lsl fp
   13a30:	andeq	r3, r1, r0, lsl fp
   13a34:	andeq	r3, r1, r0, lsl fp
   13a38:	andeq	r3, r1, r0, lsl fp
   13a3c:	andeq	r3, r1, r0, lsl fp
   13a40:	andeq	r3, r1, r0, lsl fp
   13a44:	andeq	r3, r1, r0, lsl fp
   13a48:	andeq	r3, r1, r0, lsl fp
   13a4c:	andeq	r3, r1, r0, lsl fp
   13a50:	andeq	r3, r1, r0, lsl fp
   13a54:	andeq	r3, r1, r0, lsl fp
   13a58:	andeq	r3, r1, r0, lsl fp
   13a5c:	andeq	r3, r1, r0, lsl fp
   13a60:	andeq	r3, r1, r0, lsl fp
   13a64:	andeq	r3, r1, r0, lsl fp
   13a68:	andeq	r3, r1, r0, lsl fp
   13a6c:	andeq	r3, r1, r0, lsl fp
   13a70:	andeq	r3, r1, r0, lsl fp
   13a74:	andeq	r3, r1, r0, lsl fp
   13a78:	andeq	r3, r1, r0, lsl fp
   13a7c:	andeq	r3, r1, r0, lsl fp
   13a80:	andeq	r3, r1, r0, lsl ip
   13a84:	andeq	r3, r1, r8, lsr ip
   13a88:	andeq	r3, r1, r0, lsl fp
   13a8c:	andeq	r3, r1, r0, lsl ip
   13a90:	andeq	r3, r1, r0, lsl fp
   13a94:	andeq	r3, r1, r0, lsl ip
   13a98:	andeq	r3, r1, r0, lsl fp
   13a9c:	andeq	r3, r1, r0, lsl fp
   13aa0:	andeq	r3, r1, r0, lsl fp
   13aa4:	andeq	r3, r1, r0, lsl fp
   13aa8:	andeq	r3, r1, r0, lsl fp
   13aac:	andeq	r3, r1, r0, lsl fp
   13ab0:	andeq	r3, r1, r0, lsl fp
   13ab4:	andeq	r3, r1, r0, lsl fp
   13ab8:	andeq	r3, r1, r0, lsl fp
   13abc:	andeq	r3, r1, r0, lsl fp
   13ac0:	andeq	r3, r1, r0, lsl fp
   13ac4:	andeq	r3, r1, r0, lsl fp
   13ac8:	andeq	r3, r1, r0, lsl fp
   13acc:	andeq	r3, r1, r0, lsl fp
   13ad0:	andeq	r3, r1, r0, lsl fp
   13ad4:	andeq	r3, r1, r0, lsl fp
   13ad8:	andeq	r3, r1, r0, lsl fp
   13adc:	andeq	r3, r1, r0, lsl fp
   13ae0:	andeq	r3, r1, r0, lsl fp
   13ae4:	andeq	r3, r1, r0, lsl fp
   13ae8:	andeq	r3, r1, r0, lsl fp
   13aec:	andeq	r3, r1, r0, lsl fp
   13af0:	andeq	r3, r1, r0, lsl fp
   13af4:	andeq	r3, r1, r0, lsl fp
   13af8:	andeq	r3, r1, r0, lsl fp
   13afc:	andeq	r3, r1, r0, lsl fp
   13b00:	andeq	r3, r1, ip, asr #23
   13b04:	andeq	r3, r1, r0, lsl ip
   13b08:	andeq	r3, r1, ip, asr #23
   13b0c:	strdeq	r3, [r1], -r8
   13b10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b14:	tst	r0, #1
   13b18:	bne	13b44 <__assert_fail@plt+0x2a8c>
   13b1c:	ldr	r1, [fp, #16]
   13b20:	ubfx	r0, r6, #5, #3
   13b24:	mov	r2, #1
   13b28:	ldr	r0, [r1, r0, lsl #2]
   13b2c:	and	r1, r6, #31
   13b30:	tst	r0, r2, lsl r1
   13b34:	beq	13b44 <__assert_fail@plt+0x2a8c>
   13b38:	mov	r0, r6
   13b3c:	mov	r1, r9
   13b40:	b	13b58 <__assert_fail@plt+0x2aa0>
   13b44:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b48:	mov	r1, r9
   13b4c:	cmp	r0, #0
   13b50:	mov	r0, r6
   13b54:	beq	13e98 <__assert_fail@plt+0x2de0>
   13b58:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b5c:	tst	r2, #1
   13b60:	bne	14468 <__assert_fail@plt+0x33b0>
   13b64:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b6c:	subs	r2, r2, #2
   13b70:	movwne	r2, #1
   13b74:	orr	r2, r2, r3
   13b78:	tst	r2, #1
   13b7c:	bne	13bb8 <__assert_fail@plt+0x2b00>
   13b80:	cmp	r8, r4
   13b84:	movcc	r2, #39	; 0x27
   13b88:	strbcc	r2, [r5, r8]
   13b8c:	add	r2, r8, #1
   13b90:	cmp	r2, r4
   13b94:	movcc	r3, #36	; 0x24
   13b98:	strbcc	r3, [r5, r2]
   13b9c:	add	r2, r8, #2
   13ba0:	add	r8, r8, #3
   13ba4:	cmp	r2, r4
   13ba8:	movcc	r3, #39	; 0x27
   13bac:	strbcc	r3, [r5, r2]
   13bb0:	mov	r2, #1
   13bb4:	str	r2, [fp, #-56]	; 0xffffffc8
   13bb8:	cmp	r8, r4
   13bbc:	movcc	r2, #92	; 0x5c
   13bc0:	strbcc	r2, [r5, r8]
   13bc4:	add	r8, r8, #1
   13bc8:	b	13edc <__assert_fail@plt+0x2e24>
   13bcc:	cmp	lr, #1
   13bd0:	beq	13bf8 <__assert_fail@plt+0x2b40>
   13bd4:	mov	r9, #0
   13bd8:	cmn	lr, #1
   13bdc:	bne	13c04 <__assert_fail@plt+0x2b4c>
   13be0:	ldrb	r0, [ip, #1]
   13be4:	cmp	r0, #0
   13be8:	beq	13bf8 <__assert_fail@plt+0x2b40>
   13bec:	mvn	lr, #0
   13bf0:	mov	sl, #0
   13bf4:	b	13b10 <__assert_fail@plt+0x2a58>
   13bf8:	mov	r9, #0
   13bfc:	cmp	r7, #0
   13c00:	beq	13c0c <__assert_fail@plt+0x2b54>
   13c04:	mov	sl, #0
   13c08:	b	13b10 <__assert_fail@plt+0x2a58>
   13c0c:	mov	r1, #1
   13c10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c14:	cmp	r0, #2
   13c18:	bne	13c30 <__assert_fail@plt+0x2b78>
   13c1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c20:	mov	r9, r1
   13c24:	tst	r0, #1
   13c28:	beq	13b10 <__assert_fail@plt+0x2a58>
   13c2c:	b	14468 <__assert_fail@plt+0x33b0>
   13c30:	mov	r9, r1
   13c34:	b	13b10 <__assert_fail@plt+0x2a58>
   13c38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c3c:	cmp	r0, #2
   13c40:	bne	13e7c <__assert_fail@plt+0x2dc4>
   13c44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c48:	tst	r0, #1
   13c4c:	bne	14468 <__assert_fail@plt+0x33b0>
   13c50:	mov	sl, #0
   13c54:	b	13e90 <__assert_fail@plt+0x2dd8>
   13c58:	mov	r0, #102	; 0x66
   13c5c:	b	13f04 <__assert_fail@plt+0x2e4c>
   13c60:	mov	r2, #116	; 0x74
   13c64:	b	13c74 <__assert_fail@plt+0x2bbc>
   13c68:	mov	r0, #98	; 0x62
   13c6c:	b	13f04 <__assert_fail@plt+0x2e4c>
   13c70:	mov	r2, #114	; 0x72
   13c74:	ldr	r0, [sp, #68]	; 0x44
   13c78:	tst	r0, #1
   13c7c:	mov	r0, r2
   13c80:	bne	13f04 <__assert_fail@plt+0x2e4c>
   13c84:	b	14468 <__assert_fail@plt+0x33b0>
   13c88:	ldr	r0, [sp, #84]	; 0x54
   13c8c:	tst	r0, #1
   13c90:	beq	13f20 <__assert_fail@plt+0x2e68>
   13c94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c98:	tst	r0, #1
   13c9c:	bne	14554 <__assert_fail@plt+0x349c>
   13ca0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ca4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13ca8:	subs	r0, r0, #2
   13cac:	movwne	r0, #1
   13cb0:	orr	r0, r0, r1
   13cb4:	tst	r0, #1
   13cb8:	bne	13cf4 <__assert_fail@plt+0x2c3c>
   13cbc:	cmp	r8, r4
   13cc0:	movcc	r0, #39	; 0x27
   13cc4:	strbcc	r0, [r5, r8]
   13cc8:	add	r0, r8, #1
   13ccc:	cmp	r0, r4
   13cd0:	movcc	r1, #36	; 0x24
   13cd4:	strbcc	r1, [r5, r0]
   13cd8:	add	r0, r8, #2
   13cdc:	add	r8, r8, #3
   13ce0:	cmp	r0, r4
   13ce4:	movcc	r1, #39	; 0x27
   13ce8:	strbcc	r1, [r5, r0]
   13cec:	mov	r0, #1
   13cf0:	str	r0, [fp, #-56]	; 0xffffffc8
   13cf4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13cf8:	cmp	r8, r4
   13cfc:	mov	r9, #0
   13d00:	mov	sl, #1
   13d04:	mov	r6, #48	; 0x30
   13d08:	movcc	r0, #92	; 0x5c
   13d0c:	strbcc	r0, [r5, r8]
   13d10:	add	r0, r8, #1
   13d14:	cmp	r1, #2
   13d18:	beq	140e8 <__assert_fail@plt+0x3030>
   13d1c:	add	r1, r7, #1
   13d20:	cmp	r1, lr
   13d24:	bcs	140e8 <__assert_fail@plt+0x3030>
   13d28:	ldrb	r1, [ip, r1]
   13d2c:	sub	r1, r1, #48	; 0x30
   13d30:	uxtb	r1, r1
   13d34:	cmp	r1, #9
   13d38:	bhi	140e8 <__assert_fail@plt+0x3030>
   13d3c:	cmp	r0, r4
   13d40:	movcc	r1, #48	; 0x30
   13d44:	strbcc	r1, [r5, r0]
   13d48:	add	r0, r8, #2
   13d4c:	add	r8, r8, #3
   13d50:	cmp	r0, r4
   13d54:	movcc	r1, #48	; 0x30
   13d58:	strbcc	r1, [r5, r0]
   13d5c:	b	13b10 <__assert_fail@plt+0x2a58>
   13d60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d64:	mov	sl, #0
   13d68:	mov	r6, #63	; 0x3f
   13d6c:	cmp	r0, #5
   13d70:	beq	140f0 <__assert_fail@plt+0x3038>
   13d74:	cmp	r0, #2
   13d78:	bne	14198 <__assert_fail@plt+0x30e0>
   13d7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d80:	mov	r9, #0
   13d84:	tst	r0, #1
   13d88:	beq	13b10 <__assert_fail@plt+0x2a58>
   13d8c:	b	14468 <__assert_fail@plt+0x33b0>
   13d90:	mov	r0, #118	; 0x76
   13d94:	b	13f04 <__assert_fail@plt+0x2e4c>
   13d98:	mov	r0, #1
   13d9c:	mov	r6, #39	; 0x27
   13da0:	str	r0, [sp, #60]	; 0x3c
   13da4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13da8:	cmp	r0, #2
   13dac:	bne	13f3c <__assert_fail@plt+0x2e84>
   13db0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13db4:	tst	r0, #1
   13db8:	bne	14468 <__assert_fail@plt+0x33b0>
   13dbc:	ldr	r2, [sp, #56]	; 0x38
   13dc0:	clz	r1, r4
   13dc4:	mov	sl, #0
   13dc8:	mov	r9, #1
   13dcc:	lsr	r1, r1, #5
   13dd0:	cmp	r2, #0
   13dd4:	mov	r0, r2
   13dd8:	movwne	r0, #1
   13ddc:	orrs	r0, r0, r1
   13de0:	moveq	r2, r4
   13de4:	moveq	r4, r0
   13de8:	cmp	r8, r4
   13dec:	str	r2, [sp, #56]	; 0x38
   13df0:	movcc	r0, #39	; 0x27
   13df4:	strbcc	r0, [r5, r8]
   13df8:	add	r0, r8, #1
   13dfc:	cmp	r0, r4
   13e00:	movcc	r1, #92	; 0x5c
   13e04:	strbcc	r1, [r5, r0]
   13e08:	add	r0, r8, #2
   13e0c:	add	r8, r8, #3
   13e10:	cmp	r0, r4
   13e14:	movcc	r1, #39	; 0x27
   13e18:	strbcc	r1, [r5, r0]
   13e1c:	mov	r0, #0
   13e20:	str	r0, [fp, #-56]	; 0xffffffc8
   13e24:	b	13b10 <__assert_fail@plt+0x2a58>
   13e28:	ldr	r0, [sp, #40]	; 0x28
   13e2c:	str	r4, [sp, #88]	; 0x58
   13e30:	cmp	r0, #1
   13e34:	bne	13f44 <__assert_fail@plt+0x2e8c>
   13e38:	str	lr, [sp, #28]
   13e3c:	bl	10fa4 <__ctype_b_loc@plt>
   13e40:	ldr	r0, [r0]
   13e44:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e48:	mov	r2, #1
   13e4c:	add	r0, r0, r6, lsl #1
   13e50:	ldrb	r0, [r0, #1]
   13e54:	ubfx	r9, r0, #6, #1
   13e58:	ldr	r0, [sp, #52]	; 0x34
   13e5c:	cmp	r2, #1
   13e60:	orr	r0, r9, r0
   13e64:	bhi	141a0 <__assert_fail@plt+0x30e8>
   13e68:	tst	r0, #1
   13e6c:	beq	141a0 <__assert_fail@plt+0x30e8>
   13e70:	ldr	lr, [sp, #28]
   13e74:	ldr	r4, [sp, #88]	; 0x58
   13e78:	b	13b10 <__assert_fail@plt+0x2a58>
   13e7c:	ldr	r1, [sp, #48]	; 0x30
   13e80:	mov	sl, #0
   13e84:	mov	r0, #92	; 0x5c
   13e88:	cmp	r1, #0
   13e8c:	beq	13f04 <__assert_fail@plt+0x2e4c>
   13e90:	mov	r6, #92	; 0x5c
   13e94:	mov	r9, #0
   13e98:	cmp	sl, #0
   13e9c:	bne	13ed4 <__assert_fail@plt+0x2e1c>
   13ea0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ea4:	tst	r0, #1
   13ea8:	beq	13ed4 <__assert_fail@plt+0x2e1c>
   13eac:	cmp	r8, r4
   13eb0:	movcc	r0, #39	; 0x27
   13eb4:	strbcc	r0, [r5, r8]
   13eb8:	add	r0, r8, #1
   13ebc:	add	r8, r8, #2
   13ec0:	cmp	r0, r4
   13ec4:	movcc	r1, #39	; 0x27
   13ec8:	strbcc	r1, [r5, r0]
   13ecc:	mov	r0, #0
   13ed0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ed4:	mov	r1, r9
   13ed8:	mov	r0, r6
   13edc:	cmp	r8, r4
   13ee0:	strbcc	r0, [r5, r8]
   13ee4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ee8:	add	r8, r8, #1
   13eec:	and	r0, r0, r1
   13ef0:	str	r0, [fp, #-48]	; 0xffffffd0
   13ef4:	add	r7, r7, #1
   13ef8:	cmn	lr, #1
   13efc:	bne	1383c <__assert_fail@plt+0x2784>
   13f00:	b	13848 <__assert_fail@plt+0x2790>
   13f04:	ldr	r1, [sp, #84]	; 0x54
   13f08:	mov	sl, #0
   13f0c:	mov	r9, #0
   13f10:	tst	r1, #1
   13f14:	mov	r1, #0
   13f18:	beq	13b10 <__assert_fail@plt+0x2a58>
   13f1c:	b	13b58 <__assert_fail@plt+0x2aa0>
   13f20:	ldr	r0, [sp, #36]	; 0x24
   13f24:	mov	r6, #0
   13f28:	mov	sl, #0
   13f2c:	mov	r9, #0
   13f30:	cmp	r0, #0
   13f34:	beq	13b10 <__assert_fail@plt+0x2a58>
   13f38:	b	13ef4 <__assert_fail@plt+0x2e3c>
   13f3c:	mov	r9, #1
   13f40:	b	13b10 <__assert_fail@plt+0x2a58>
   13f44:	mov	r0, #0
   13f48:	cmn	lr, #1
   13f4c:	sub	r4, fp, #40	; 0x28
   13f50:	str	r0, [fp, #-36]	; 0xffffffdc
   13f54:	str	r0, [fp, #-40]	; 0xffffffd8
   13f58:	bne	13f6c <__assert_fail@plt+0x2eb4>
   13f5c:	mov	r0, ip
   13f60:	bl	10fc8 <strlen@plt>
   13f64:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f68:	mov	lr, r0
   13f6c:	ldr	r0, [sp, #72]	; 0x48
   13f70:	mov	r9, #1
   13f74:	mov	r2, #0
   13f78:	str	lr, [sp, #28]
   13f7c:	add	r0, r0, r7
   13f80:	str	r0, [sp, #20]
   13f84:	b	13fc8 <__assert_fail@plt+0x2f10>
   13f88:	ldr	r5, [sp, #44]	; 0x2c
   13f8c:	add	r5, r0, r5
   13f90:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f94:	bl	10efc <iswprint@plt>
   13f98:	cmp	r0, #0
   13f9c:	sub	r4, fp, #40	; 0x28
   13fa0:	movwne	r0, #1
   13fa4:	and	r9, r9, r0
   13fa8:	mov	r0, r4
   13fac:	bl	10eb4 <mbsinit@plt>
   13fb0:	mov	r2, r5
   13fb4:	ldr	lr, [sp, #28]
   13fb8:	ldr	r5, [fp, #-84]	; 0xffffffac
   13fbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13fc0:	cmp	r0, #0
   13fc4:	bne	13e58 <__assert_fail@plt+0x2da0>
   13fc8:	add	r0, r2, r7
   13fcc:	str	r2, [sp, #44]	; 0x2c
   13fd0:	mov	r3, r4
   13fd4:	add	r1, ip, r0
   13fd8:	str	r0, [sp, #24]
   13fdc:	sub	r2, lr, r0
   13fe0:	sub	r0, fp, #44	; 0x2c
   13fe4:	bl	16e04 <__assert_fail@plt+0x5d4c>
   13fe8:	cmp	r0, #0
   13fec:	beq	14390 <__assert_fail@plt+0x32d8>
   13ff0:	cmn	r0, #1
   13ff4:	beq	1434c <__assert_fail@plt+0x3294>
   13ff8:	ldr	lr, [sp, #28]
   13ffc:	cmn	r0, #2
   14000:	beq	14354 <__assert_fail@plt+0x329c>
   14004:	ldr	r2, [sp, #64]	; 0x40
   14008:	ldr	r4, [sp, #88]	; 0x58
   1400c:	ldr	ip, [sp, #84]	; 0x54
   14010:	cmp	r0, #2
   14014:	mov	r1, #0
   14018:	movwcc	r1, #1
   1401c:	eor	r2, r2, #1
   14020:	orrs	r1, r2, r1
   14024:	bne	13f88 <__assert_fail@plt+0x2ed0>
   14028:	ldr	r1, [sp, #44]	; 0x2c
   1402c:	ldr	r2, [sp, #20]
   14030:	add	r1, r2, r1
   14034:	sub	r2, r0, #1
   14038:	b	14048 <__assert_fail@plt+0x2f90>
   1403c:	add	r1, r1, #1
   14040:	subs	r2, r2, #1
   14044:	beq	13f88 <__assert_fail@plt+0x2ed0>
   14048:	ldrb	r3, [r1]
   1404c:	sub	r3, r3, #91	; 0x5b
   14050:	cmp	r3, #33	; 0x21
   14054:	bhi	1403c <__assert_fail@plt+0x2f84>
   14058:	add	r5, pc, #0
   1405c:	ldr	pc, [r5, r3, lsl #2]
   14060:	andeq	r4, r1, r4, asr #8
   14064:	andeq	r4, r1, r4, asr #8
   14068:	andeq	r4, r1, ip, lsr r0
   1406c:	andeq	r4, r1, r4, asr #8
   14070:	andeq	r4, r1, ip, lsr r0
   14074:	andeq	r4, r1, r4, asr #8
   14078:	andeq	r4, r1, ip, lsr r0
   1407c:	andeq	r4, r1, ip, lsr r0
   14080:	andeq	r4, r1, ip, lsr r0
   14084:	andeq	r4, r1, ip, lsr r0
   14088:	andeq	r4, r1, ip, lsr r0
   1408c:	andeq	r4, r1, ip, lsr r0
   14090:	andeq	r4, r1, ip, lsr r0
   14094:	andeq	r4, r1, ip, lsr r0
   14098:	andeq	r4, r1, ip, lsr r0
   1409c:	andeq	r4, r1, ip, lsr r0
   140a0:	andeq	r4, r1, ip, lsr r0
   140a4:	andeq	r4, r1, ip, lsr r0
   140a8:	andeq	r4, r1, ip, lsr r0
   140ac:	andeq	r4, r1, ip, lsr r0
   140b0:	andeq	r4, r1, ip, lsr r0
   140b4:	andeq	r4, r1, ip, lsr r0
   140b8:	andeq	r4, r1, ip, lsr r0
   140bc:	andeq	r4, r1, ip, lsr r0
   140c0:	andeq	r4, r1, ip, lsr r0
   140c4:	andeq	r4, r1, ip, lsr r0
   140c8:	andeq	r4, r1, ip, lsr r0
   140cc:	andeq	r4, r1, ip, lsr r0
   140d0:	andeq	r4, r1, ip, lsr r0
   140d4:	andeq	r4, r1, ip, lsr r0
   140d8:	andeq	r4, r1, ip, lsr r0
   140dc:	andeq	r4, r1, ip, lsr r0
   140e0:	andeq	r4, r1, ip, lsr r0
   140e4:	andeq	r4, r1, r4, asr #8
   140e8:	mov	r8, r0
   140ec:	b	13b10 <__assert_fail@plt+0x2a58>
   140f0:	ldr	r0, [sp, #32]
   140f4:	cmp	r0, #0
   140f8:	beq	14198 <__assert_fail@plt+0x30e0>
   140fc:	add	r0, r7, #2
   14100:	cmp	r0, lr
   14104:	bcs	14198 <__assert_fail@plt+0x30e0>
   14108:	add	r1, r7, ip
   1410c:	ldrb	r1, [r1, #1]
   14110:	cmp	r1, #63	; 0x3f
   14114:	bne	14198 <__assert_fail@plt+0x30e0>
   14118:	ldrb	r9, [ip, r0]
   1411c:	sub	r2, r9, #33	; 0x21
   14120:	cmp	r2, #29
   14124:	bhi	14198 <__assert_fail@plt+0x30e0>
   14128:	movw	r1, #20929	; 0x51c1
   1412c:	mov	r3, #1
   14130:	movt	r1, #14336	; 0x3800
   14134:	tst	r1, r3, lsl r2
   14138:	beq	14198 <__assert_fail@plt+0x30e0>
   1413c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14140:	tst	r1, #1
   14144:	bne	14468 <__assert_fail@plt+0x33b0>
   14148:	cmp	r8, r4
   1414c:	add	r2, r8, #1
   14150:	mov	r6, r9
   14154:	mov	r7, r0
   14158:	mov	r9, #0
   1415c:	movcc	r1, #63	; 0x3f
   14160:	strbcc	r1, [r5, r8]
   14164:	cmp	r2, r4
   14168:	movcc	r1, #34	; 0x22
   1416c:	strbcc	r1, [r5, r2]
   14170:	add	r2, r8, #2
   14174:	cmp	r2, r4
   14178:	movcc	r1, #34	; 0x22
   1417c:	strbcc	r1, [r5, r2]
   14180:	add	r2, r8, #3
   14184:	add	r8, r8, #4
   14188:	cmp	r2, r4
   1418c:	movcc	r1, #63	; 0x3f
   14190:	strbcc	r1, [r5, r2]
   14194:	b	13b10 <__assert_fail@plt+0x2a58>
   14198:	mov	r9, #0
   1419c:	b	13b10 <__assert_fail@plt+0x2a58>
   141a0:	ldr	lr, [sp, #28]
   141a4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   141a8:	add	r1, r2, r7
   141ac:	mov	r2, #0
   141b0:	str	r1, [sp, #44]	; 0x2c
   141b4:	tst	r0, #1
   141b8:	bne	142d4 <__assert_fail@plt+0x321c>
   141bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   141c0:	tst	r1, #1
   141c4:	bne	14464 <__assert_fail@plt+0x33ac>
   141c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   141cc:	subs	r2, r1, #2
   141d0:	movwne	r2, #1
   141d4:	orr	r2, r2, r4
   141d8:	tst	r2, #1
   141dc:	bne	14220 <__assert_fail@plt+0x3168>
   141e0:	ldr	r1, [sp, #88]	; 0x58
   141e4:	add	r2, r8, #1
   141e8:	mov	r4, #1
   141ec:	cmp	r8, r1
   141f0:	movcc	r1, #39	; 0x27
   141f4:	strbcc	r1, [r5, r8]
   141f8:	ldr	r1, [sp, #88]	; 0x58
   141fc:	cmp	r2, r1
   14200:	movcc	r1, #36	; 0x24
   14204:	strbcc	r1, [r5, r2]
   14208:	ldr	r1, [sp, #88]	; 0x58
   1420c:	add	r2, r8, #2
   14210:	add	r8, r8, #3
   14214:	cmp	r2, r1
   14218:	movcc	r1, #39	; 0x27
   1421c:	strbcc	r1, [r5, r2]
   14220:	ldr	r1, [sp, #88]	; 0x58
   14224:	add	r2, r8, #1
   14228:	cmp	r8, r1
   1422c:	movcc	r1, #92	; 0x5c
   14230:	strbcc	r1, [r5, r8]
   14234:	ldr	r1, [sp, #88]	; 0x58
   14238:	cmp	r2, r1
   1423c:	bcs	14250 <__assert_fail@plt+0x3198>
   14240:	uxtb	r3, r6
   14244:	mov	r1, #48	; 0x30
   14248:	orr	r3, r1, r3, lsr #6
   1424c:	strb	r3, [r5, r2]
   14250:	ldr	r1, [sp, #88]	; 0x58
   14254:	add	r2, r8, #2
   14258:	add	r8, r8, #3
   1425c:	cmp	r2, r1
   14260:	lsrcc	r3, r6, #3
   14264:	movcc	r1, #6
   14268:	bficc	r3, r1, #3, #29
   1426c:	mov	r1, #6
   14270:	bfi	r6, r1, #3, #29
   14274:	strbcc	r3, [r5, r2]
   14278:	mov	r2, #1
   1427c:	b	142fc <__assert_fail@plt+0x3244>
   14280:	ldr	r1, [sp, #88]	; 0x58
   14284:	ldr	r5, [fp, #-84]	; 0xffffffac
   14288:	ldr	r4, [sp, #88]	; 0x58
   1428c:	cmp	r8, r1
   14290:	movcc	r1, #39	; 0x27
   14294:	strbcc	r1, [r5, r8]
   14298:	add	r1, r8, #1
   1429c:	add	r8, r8, #2
   142a0:	cmp	r1, r4
   142a4:	movcc	r4, #39	; 0x27
   142a8:	strbcc	r4, [r5, r1]
   142ac:	mov	r4, #0
   142b0:	ldr	r1, [sp, #88]	; 0x58
   142b4:	cmp	r8, r1
   142b8:	ldr	r1, [sp, #72]	; 0x48
   142bc:	strbcc	r6, [r5, r8]
   142c0:	add	r8, r8, #1
   142c4:	ldrb	r6, [r1, r7]
   142c8:	mov	r7, r3
   142cc:	tst	r0, #1
   142d0:	beq	141bc <__assert_fail@plt+0x3104>
   142d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   142d8:	tst	r1, #1
   142dc:	beq	142f4 <__assert_fail@plt+0x323c>
   142e0:	ldr	r1, [sp, #88]	; 0x58
   142e4:	cmp	r8, r1
   142e8:	movcc	r1, #92	; 0x5c
   142ec:	strbcc	r1, [r5, r8]
   142f0:	add	r8, r8, #1
   142f4:	mov	r1, #0
   142f8:	str	r1, [fp, #-52]	; 0xffffffcc
   142fc:	ldr	r1, [sp, #44]	; 0x2c
   14300:	add	r3, r7, #1
   14304:	and	sl, r2, #1
   14308:	cmp	r1, r3
   1430c:	bls	14330 <__assert_fail@plt+0x3278>
   14310:	cmp	sl, #0
   14314:	mvn	r5, r4
   14318:	movwne	sl, #1
   1431c:	orr	r5, r5, sl
   14320:	tst	r5, #1
   14324:	beq	14280 <__assert_fail@plt+0x31c8>
   14328:	ldr	r5, [fp, #-84]	; 0xffffffac
   1432c:	b	142b0 <__assert_fail@plt+0x31f8>
   14330:	str	r4, [fp, #-56]	; 0xffffffc8
   14334:	ldr	r4, [sp, #88]	; 0x58
   14338:	cmp	sl, #0
   1433c:	movwne	sl, #1
   14340:	cmp	sl, #0
   14344:	beq	13ea0 <__assert_fail@plt+0x2de8>
   14348:	b	13ed4 <__assert_fail@plt+0x2e1c>
   1434c:	mov	r9, #0
   14350:	b	14390 <__assert_fail@plt+0x32d8>
   14354:	ldr	r0, [sp, #24]
   14358:	mov	r9, #0
   1435c:	cmp	lr, r0
   14360:	bls	14390 <__assert_fail@plt+0x32d8>
   14364:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14368:	ldr	r2, [sp, #44]	; 0x2c
   1436c:	add	r0, ip, r7
   14370:	ldrb	r1, [r0, r2]
   14374:	cmp	r1, #0
   14378:	beq	13e58 <__assert_fail@plt+0x2da0>
   1437c:	add	r2, r2, #1
   14380:	add	r1, r7, r2
   14384:	cmp	r1, lr
   14388:	bcc	14370 <__assert_fail@plt+0x32b8>
   1438c:	b	13e58 <__assert_fail@plt+0x2da0>
   14390:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14394:	ldr	r2, [sp, #44]	; 0x2c
   14398:	b	13e58 <__assert_fail@plt+0x2da0>
   1439c:	mov	lr, r7
   143a0:	b	143a8 <__assert_fail@plt+0x32f0>
   143a4:	mvn	lr, #0
   143a8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   143ac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   143b0:	eor	r0, r1, #2
   143b4:	orr	r0, r0, r8
   143b8:	clz	r0, r0
   143bc:	lsr	r0, r0, #5
   143c0:	tst	r2, r0
   143c4:	bne	14468 <__assert_fail@plt+0x33b0>
   143c8:	subs	r0, r1, #2
   143cc:	movwne	r0, #1
   143d0:	orr	r0, r2, r0
   143d4:	tst	r0, #1
   143d8:	ldreq	r0, [sp, #60]	; 0x3c
   143dc:	eoreq	r0, r0, #1
   143e0:	tsteq	r0, #1
   143e4:	bne	144fc <__assert_fail@plt+0x3444>
   143e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   143ec:	mov	sl, lr
   143f0:	tst	r0, #1
   143f4:	bne	144c8 <__assert_fail@plt+0x3410>
   143f8:	ldr	r6, [sp, #56]	; 0x38
   143fc:	mov	r9, #0
   14400:	cmp	r6, #0
   14404:	beq	144f4 <__assert_fail@plt+0x343c>
   14408:	ldr	r0, [sp, #84]	; 0x54
   1440c:	mov	r1, #0
   14410:	mov	r7, #2
   14414:	cmp	r4, #0
   14418:	str	r1, [fp, #-48]	; 0xffffffd0
   1441c:	mov	r1, #0
   14420:	str	r1, [fp, #-76]	; 0xffffffb4
   14424:	beq	135c4 <__assert_fail@plt+0x250c>
   14428:	b	144fc <__assert_fail@plt+0x3444>
   1442c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14430:	ldr	r1, [fp, #12]
   14434:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14438:	mov	lr, r4
   1443c:	mov	r4, r6
   14440:	b	14488 <__assert_fail@plt+0x33d0>
   14444:	tst	ip, #1
   14448:	ldr	r5, [fp, #-84]	; 0xffffffac
   1444c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14450:	ldr	r1, [fp, #12]
   14454:	mov	r0, #2
   14458:	movwne	r0, #4
   1445c:	mov	r2, r0
   14460:	b	14488 <__assert_fail@plt+0x33d0>
   14464:	ldr	r4, [sp, #88]	; 0x58
   14468:	ldr	r1, [sp, #84]	; 0x54
   1446c:	mov	r0, #2
   14470:	tst	r1, #1
   14474:	movwne	r0, #4
   14478:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1447c:	ldr	r1, [fp, #12]
   14480:	cmp	r2, #2
   14484:	moveq	r2, r0
   14488:	mov	r0, #0
   1448c:	bic	r1, r1, #2
   14490:	str	r2, [sp]
   14494:	mov	r2, ip
   14498:	mov	r3, lr
   1449c:	str	r0, [sp, #8]
   144a0:	ldr	r0, [sp, #76]	; 0x4c
   144a4:	str	r1, [sp, #4]
   144a8:	mov	r1, r4
   144ac:	str	r0, [sp, #12]
   144b0:	ldr	r0, [sp, #80]	; 0x50
   144b4:	str	r0, [sp, #16]
   144b8:	mov	r0, r5
   144bc:	bl	13534 <__assert_fail@plt+0x247c>
   144c0:	mov	r8, r0
   144c4:	b	14548 <__assert_fail@plt+0x3490>
   144c8:	mov	r0, #5
   144cc:	ldr	r1, [sp, #56]	; 0x38
   144d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   144d4:	mov	r3, sl
   144d8:	str	r0, [sp]
   144dc:	ldr	r0, [fp, #12]
   144e0:	str	r0, [sp, #4]
   144e4:	ldr	r0, [fp, #16]
   144e8:	str	r0, [sp, #8]
   144ec:	ldr	r0, [sp, #76]	; 0x4c
   144f0:	b	144ac <__assert_fail@plt+0x33f4>
   144f4:	mov	r0, #0
   144f8:	str	r0, [fp, #-76]	; 0xffffffb4
   144fc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14500:	cmp	r1, #0
   14504:	beq	1453c <__assert_fail@plt+0x3484>
   14508:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1450c:	tst	r0, #1
   14510:	bne	1453c <__assert_fail@plt+0x3484>
   14514:	ldrb	r0, [r1]
   14518:	cmp	r0, #0
   1451c:	beq	1453c <__assert_fail@plt+0x3484>
   14520:	add	r1, r1, #1
   14524:	cmp	r8, r4
   14528:	strbcc	r0, [r5, r8]
   1452c:	add	r8, r8, #1
   14530:	ldrb	r0, [r1], #1
   14534:	cmp	r0, #0
   14538:	bne	14524 <__assert_fail@plt+0x346c>
   1453c:	cmp	r8, r4
   14540:	movcc	r0, #0
   14544:	strbcc	r0, [r5, r8]
   14548:	mov	r0, r8
   1454c:	sub	sp, fp, #28
   14550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14554:	mov	r0, #4
   14558:	b	14478 <__assert_fail@plt+0x33c0>
   1455c:	bl	110a0 <abort@plt>
   14560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14564:	add	fp, sp, #28
   14568:	sub	sp, sp, #28
   1456c:	movw	r5, #37224	; 0x9168
   14570:	cmp	r2, #0
   14574:	mov	r4, r1
   14578:	mov	r7, r0
   1457c:	str	r0, [sp, #20]
   14580:	movt	r5, #2
   14584:	movne	r5, r2
   14588:	bl	10fec <__errno_location@plt>
   1458c:	mov	sl, r0
   14590:	ldr	r2, [r5, #40]	; 0x28
   14594:	ldr	r3, [r5, #44]	; 0x2c
   14598:	ldm	r5, {r0, r1}
   1459c:	orr	r8, r1, #1
   145a0:	add	r9, r5, #8
   145a4:	mov	r1, #0
   145a8:	ldr	r6, [sl]
   145ac:	stm	sp, {r0, r8, r9}
   145b0:	mov	r0, #0
   145b4:	str	r2, [sp, #12]
   145b8:	str	r3, [sp, #16]
   145bc:	mov	r2, r7
   145c0:	mov	r3, r4
   145c4:	str	r6, [sp, #24]
   145c8:	mov	r6, r4
   145cc:	bl	13534 <__assert_fail@plt+0x247c>
   145d0:	add	r7, r0, #1
   145d4:	mov	r0, r7
   145d8:	bl	157e4 <__assert_fail@plt+0x472c>
   145dc:	mov	r4, r0
   145e0:	ldr	r0, [r5]
   145e4:	ldr	r2, [r5, #44]	; 0x2c
   145e8:	ldr	r1, [r5, #40]	; 0x28
   145ec:	mov	r3, r6
   145f0:	stm	sp, {r0, r8, r9}
   145f4:	str	r2, [sp, #16]
   145f8:	ldr	r2, [sp, #20]
   145fc:	str	r1, [sp, #12]
   14600:	mov	r0, r4
   14604:	mov	r1, r7
   14608:	bl	13534 <__assert_fail@plt+0x247c>
   1460c:	ldr	r0, [sp, #24]
   14610:	str	r0, [sl]
   14614:	mov	r0, r4
   14618:	sub	sp, fp, #28
   1461c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	add	fp, sp, #28
   14628:	sub	sp, sp, #36	; 0x24
   1462c:	movw	r8, #37224	; 0x9168
   14630:	cmp	r3, #0
   14634:	mov	r4, r2
   14638:	str	r2, [sp, #24]
   1463c:	mov	r5, r1
   14640:	mov	r6, r0
   14644:	str	r0, [sp, #20]
   14648:	movt	r8, #2
   1464c:	movne	r8, r3
   14650:	bl	10fec <__errno_location@plt>
   14654:	str	r0, [sp, #28]
   14658:	ldr	r1, [r8, #40]	; 0x28
   1465c:	ldr	r2, [r8, #44]	; 0x2c
   14660:	ldr	r7, [r0]
   14664:	cmp	r4, #0
   14668:	add	sl, r8, #8
   1466c:	mov	r0, #0
   14670:	ldm	r8, {r3, r9}
   14674:	orreq	r9, r9, #1
   14678:	stm	sp, {r3, r9, sl}
   1467c:	str	r1, [sp, #12]
   14680:	str	r2, [sp, #16]
   14684:	mov	r1, #0
   14688:	mov	r2, r6
   1468c:	mov	r3, r5
   14690:	str	r7, [sp, #32]
   14694:	mov	r7, r5
   14698:	bl	13534 <__assert_fail@plt+0x247c>
   1469c:	add	r4, r0, #1
   146a0:	mov	r5, r0
   146a4:	mov	r0, r4
   146a8:	bl	157e4 <__assert_fail@plt+0x472c>
   146ac:	mov	r6, r0
   146b0:	ldr	r0, [r8]
   146b4:	ldr	r2, [r8, #44]	; 0x2c
   146b8:	ldr	r1, [r8, #40]	; 0x28
   146bc:	mov	r3, r7
   146c0:	stm	sp, {r0, r9, sl}
   146c4:	str	r2, [sp, #16]
   146c8:	ldr	r2, [sp, #20]
   146cc:	str	r1, [sp, #12]
   146d0:	mov	r0, r6
   146d4:	mov	r1, r4
   146d8:	bl	13534 <__assert_fail@plt+0x247c>
   146dc:	ldr	r0, [sp, #24]
   146e0:	ldr	r1, [sp, #32]
   146e4:	ldr	r2, [sp, #28]
   146e8:	cmp	r0, #0
   146ec:	str	r1, [r2]
   146f0:	strne	r5, [r0]
   146f4:	mov	r0, r6
   146f8:	sub	sp, fp, #28
   146fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14700:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14704:	add	fp, sp, #24
   14708:	movw	r5, #37116	; 0x90fc
   1470c:	movw	r8, #37112	; 0x90f8
   14710:	movt	r5, #2
   14714:	movt	r8, #2
   14718:	ldr	r0, [r5]
   1471c:	ldr	r4, [r8]
   14720:	cmp	r0, #2
   14724:	blt	14750 <__assert_fail@plt+0x3698>
   14728:	add	r7, r4, #12
   1472c:	mov	r6, #0
   14730:	ldr	r0, [r7, r6, lsl #3]
   14734:	bl	1313c <__assert_fail@plt+0x2084>
   14738:	ldr	r1, [r5]
   1473c:	add	r2, r6, #2
   14740:	add	r0, r6, #1
   14744:	mov	r6, r0
   14748:	cmp	r2, r1
   1474c:	blt	14730 <__assert_fail@plt+0x3678>
   14750:	ldr	r0, [r4, #4]
   14754:	movw	r9, #37272	; 0x9198
   14758:	movw	r7, #37120	; 0x9100
   1475c:	movt	r9, #2
   14760:	movt	r7, #2
   14764:	cmp	r0, r9
   14768:	beq	14778 <__assert_fail@plt+0x36c0>
   1476c:	bl	1313c <__assert_fail@plt+0x2084>
   14770:	mov	r0, #256	; 0x100
   14774:	stm	r7, {r0, r9}
   14778:	cmp	r4, r7
   1477c:	beq	1478c <__assert_fail@plt+0x36d4>
   14780:	mov	r0, r4
   14784:	bl	1313c <__assert_fail@plt+0x2084>
   14788:	str	r7, [r8]
   1478c:	mov	r0, #1
   14790:	str	r0, [r5]
   14794:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14798:	movw	r3, #37224	; 0x9168
   1479c:	mvn	r2, #0
   147a0:	movt	r3, #2
   147a4:	b	147a8 <__assert_fail@plt+0x36f0>
   147a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ac:	add	fp, sp, #28
   147b0:	sub	sp, sp, #44	; 0x2c
   147b4:	mov	r7, r3
   147b8:	str	r2, [sp, #36]	; 0x24
   147bc:	str	r1, [sp, #32]
   147c0:	mov	r5, r0
   147c4:	bl	10fec <__errno_location@plt>
   147c8:	cmp	r5, #0
   147cc:	bmi	1493c <__assert_fail@plt+0x3884>
   147d0:	cmn	r5, #-2147483647	; 0x80000001
   147d4:	beq	1493c <__assert_fail@plt+0x3884>
   147d8:	movw	r8, #37116	; 0x90fc
   147dc:	movw	r4, #37112	; 0x90f8
   147e0:	str	r0, [sp, #28]
   147e4:	ldr	r0, [r0]
   147e8:	movt	r8, #2
   147ec:	movt	r4, #2
   147f0:	ldr	r1, [r8]
   147f4:	ldr	r6, [r4]
   147f8:	str	r0, [sp, #24]
   147fc:	cmp	r1, r5
   14800:	ble	1480c <__assert_fail@plt+0x3754>
   14804:	mov	sl, r6
   14808:	b	14878 <__assert_fail@plt+0x37c0>
   1480c:	movw	r9, #37120	; 0x9100
   14810:	mov	r0, #8
   14814:	str	r1, [fp, #-32]	; 0xffffffe0
   14818:	sub	r1, r5, r1
   1481c:	mvn	r3, #-2147483648	; 0x80000000
   14820:	movt	r9, #2
   14824:	str	r0, [sp]
   14828:	add	r2, r1, #1
   1482c:	sub	r1, fp, #32
   14830:	subs	r0, r6, r9
   14834:	movne	r0, r6
   14838:	bl	159e4 <__assert_fail@plt+0x492c>
   1483c:	mov	sl, r0
   14840:	cmp	r6, r9
   14844:	str	r0, [r4]
   14848:	bne	14854 <__assert_fail@plt+0x379c>
   1484c:	ldrd	r0, [r9]
   14850:	stm	sl, {r0, r1}
   14854:	ldr	r1, [r8]
   14858:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1485c:	add	r0, sl, r1, lsl #3
   14860:	sub	r1, r2, r1
   14864:	lsl	r2, r1, #3
   14868:	mov	r1, #0
   1486c:	bl	11004 <memset@plt>
   14870:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14874:	str	r0, [r8]
   14878:	mov	r9, sl
   1487c:	ldm	r7, {r0, r1}
   14880:	orr	r8, r1, #1
   14884:	add	r1, r7, #8
   14888:	ldr	r2, [r7, #40]	; 0x28
   1488c:	ldr	r3, [r7, #44]	; 0x2c
   14890:	ldr	r6, [r9, r5, lsl #3]!
   14894:	str	r1, [sp, #20]
   14898:	ldr	r4, [r9, #4]!
   1489c:	stm	sp, {r0, r8}
   148a0:	add	r0, sp, #8
   148a4:	stm	r0, {r1, r2, r3}
   148a8:	ldr	r2, [sp, #32]
   148ac:	ldr	r3, [sp, #36]	; 0x24
   148b0:	mov	r1, r6
   148b4:	mov	r0, r4
   148b8:	bl	13534 <__assert_fail@plt+0x247c>
   148bc:	cmp	r6, r0
   148c0:	bhi	14924 <__assert_fail@plt+0x386c>
   148c4:	add	r6, r0, #1
   148c8:	movw	r0, #37272	; 0x9198
   148cc:	movt	r0, #2
   148d0:	str	r6, [sl, r5, lsl #3]
   148d4:	cmp	r4, r0
   148d8:	beq	148e4 <__assert_fail@plt+0x382c>
   148dc:	mov	r0, r4
   148e0:	bl	1313c <__assert_fail@plt+0x2084>
   148e4:	mov	r0, r6
   148e8:	bl	157e4 <__assert_fail@plt+0x472c>
   148ec:	str	r0, [r9]
   148f0:	mov	r4, r0
   148f4:	add	r3, sp, #8
   148f8:	ldr	r0, [r7]
   148fc:	ldr	r1, [r7, #40]	; 0x28
   14900:	ldr	r2, [r7, #44]	; 0x2c
   14904:	stm	sp, {r0, r8}
   14908:	ldr	r0, [sp, #20]
   1490c:	stm	r3, {r0, r1, r2}
   14910:	ldr	r2, [sp, #32]
   14914:	ldr	r3, [sp, #36]	; 0x24
   14918:	mov	r0, r4
   1491c:	mov	r1, r6
   14920:	bl	13534 <__assert_fail@plt+0x247c>
   14924:	ldr	r0, [sp, #28]
   14928:	ldr	r1, [sp, #24]
   1492c:	str	r1, [r0]
   14930:	mov	r0, r4
   14934:	sub	sp, fp, #28
   14938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1493c:	bl	110a0 <abort@plt>
   14940:	movw	r3, #37224	; 0x9168
   14944:	movt	r3, #2
   14948:	b	147a8 <__assert_fail@plt+0x36f0>
   1494c:	movw	r3, #37224	; 0x9168
   14950:	mov	r1, r0
   14954:	mov	r0, #0
   14958:	mvn	r2, #0
   1495c:	movt	r3, #2
   14960:	b	147a8 <__assert_fail@plt+0x36f0>
   14964:	movw	r3, #37224	; 0x9168
   14968:	mov	r2, r1
   1496c:	mov	r1, r0
   14970:	mov	r0, #0
   14974:	movt	r3, #2
   14978:	b	147a8 <__assert_fail@plt+0x36f0>
   1497c:	push	{fp, lr}
   14980:	mov	fp, sp
   14984:	sub	sp, sp, #48	; 0x30
   14988:	vmov.i32	q8, #0	; 0x00000000
   1498c:	mov	ip, #32
   14990:	mov	r3, sp
   14994:	mov	lr, r2
   14998:	cmp	r1, #10
   1499c:	add	r2, r3, #16
   149a0:	vst1.64	{d16-d17}, [r3], ip
   149a4:	vst1.64	{d16-d17}, [r2]
   149a8:	vst1.64	{d16-d17}, [r3]
   149ac:	beq	149cc <__assert_fail@plt+0x3914>
   149b0:	str	r1, [sp]
   149b4:	mov	r3, sp
   149b8:	mov	r1, lr
   149bc:	mvn	r2, #0
   149c0:	bl	147a8 <__assert_fail@plt+0x36f0>
   149c4:	mov	sp, fp
   149c8:	pop	{fp, pc}
   149cc:	bl	110a0 <abort@plt>
   149d0:	push	{r4, sl, fp, lr}
   149d4:	add	fp, sp, #8
   149d8:	sub	sp, sp, #48	; 0x30
   149dc:	vmov.i32	q8, #0	; 0x00000000
   149e0:	mov	ip, r3
   149e4:	mov	r3, sp
   149e8:	mov	lr, #32
   149ec:	cmp	r1, #10
   149f0:	add	r4, r3, #16
   149f4:	vst1.64	{d16-d17}, [r3], lr
   149f8:	vst1.64	{d16-d17}, [r4]
   149fc:	vst1.64	{d16-d17}, [r3]
   14a00:	beq	14a20 <__assert_fail@plt+0x3968>
   14a04:	str	r1, [sp]
   14a08:	mov	r1, r2
   14a0c:	mov	r3, sp
   14a10:	mov	r2, ip
   14a14:	bl	147a8 <__assert_fail@plt+0x36f0>
   14a18:	sub	sp, fp, #8
   14a1c:	pop	{r4, sl, fp, pc}
   14a20:	bl	110a0 <abort@plt>
   14a24:	push	{fp, lr}
   14a28:	mov	fp, sp
   14a2c:	sub	sp, sp, #48	; 0x30
   14a30:	vmov.i32	q8, #0	; 0x00000000
   14a34:	mov	r3, sp
   14a38:	mov	ip, #32
   14a3c:	cmp	r0, #10
   14a40:	add	r2, r3, #16
   14a44:	vst1.64	{d16-d17}, [r3], ip
   14a48:	vst1.64	{d16-d17}, [r2]
   14a4c:	vst1.64	{d16-d17}, [r3]
   14a50:	beq	14a70 <__assert_fail@plt+0x39b8>
   14a54:	str	r0, [sp]
   14a58:	mov	r3, sp
   14a5c:	mov	r0, #0
   14a60:	mvn	r2, #0
   14a64:	bl	147a8 <__assert_fail@plt+0x36f0>
   14a68:	mov	sp, fp
   14a6c:	pop	{fp, pc}
   14a70:	bl	110a0 <abort@plt>
   14a74:	push	{fp, lr}
   14a78:	mov	fp, sp
   14a7c:	sub	sp, sp, #48	; 0x30
   14a80:	vmov.i32	q8, #0	; 0x00000000
   14a84:	mov	r3, sp
   14a88:	mov	ip, #32
   14a8c:	cmp	r0, #10
   14a90:	add	lr, r3, #16
   14a94:	vst1.64	{d16-d17}, [r3], ip
   14a98:	vst1.64	{d16-d17}, [lr]
   14a9c:	vst1.64	{d16-d17}, [r3]
   14aa0:	beq	14abc <__assert_fail@plt+0x3a04>
   14aa4:	str	r0, [sp]
   14aa8:	mov	r3, sp
   14aac:	mov	r0, #0
   14ab0:	bl	147a8 <__assert_fail@plt+0x36f0>
   14ab4:	mov	sp, fp
   14ab8:	pop	{fp, pc}
   14abc:	bl	110a0 <abort@plt>
   14ac0:	push	{r4, sl, fp, lr}
   14ac4:	add	fp, sp, #8
   14ac8:	sub	sp, sp, #48	; 0x30
   14acc:	mov	lr, r0
   14ad0:	movw	r0, #37224	; 0x9168
   14ad4:	mov	ip, r1
   14ad8:	mov	r1, #32
   14adc:	mov	r4, #1
   14ae0:	movt	r0, #2
   14ae4:	add	r3, r0, #16
   14ae8:	vld1.64	{d16-d17}, [r0], r1
   14aec:	vld1.64	{d20-d21}, [r0]
   14af0:	vld1.64	{d18-d19}, [r3]
   14af4:	mov	r3, sp
   14af8:	add	r0, r3, #32
   14afc:	add	r1, r3, #16
   14b00:	vst1.64	{d20-d21}, [r0]
   14b04:	mov	r0, #28
   14b08:	vst1.64	{d18-d19}, [r1]
   14b0c:	mov	r1, r3
   14b10:	and	r0, r0, r2, lsr #3
   14b14:	and	r2, r2, #31
   14b18:	vst1.64	{d16-d17}, [r1], r0
   14b1c:	ldr	r0, [r1, #8]
   14b20:	bic	r4, r4, r0, lsr r2
   14b24:	eor	r0, r0, r4, lsl r2
   14b28:	mov	r2, ip
   14b2c:	str	r0, [r1, #8]
   14b30:	mov	r0, #0
   14b34:	mov	r1, lr
   14b38:	bl	147a8 <__assert_fail@plt+0x36f0>
   14b3c:	sub	sp, fp, #8
   14b40:	pop	{r4, sl, fp, pc}
   14b44:	push	{fp, lr}
   14b48:	mov	fp, sp
   14b4c:	sub	sp, sp, #48	; 0x30
   14b50:	mov	ip, r0
   14b54:	movw	r0, #37224	; 0x9168
   14b58:	mov	r2, #32
   14b5c:	movt	r0, #2
   14b60:	add	r3, r0, #16
   14b64:	vld1.64	{d16-d17}, [r0], r2
   14b68:	vld1.64	{d20-d21}, [r0]
   14b6c:	vld1.64	{d18-d19}, [r3]
   14b70:	mov	r3, sp
   14b74:	add	r0, r3, #32
   14b78:	add	r2, r3, #16
   14b7c:	vst1.64	{d20-d21}, [r0]
   14b80:	mov	r0, #28
   14b84:	vst1.64	{d18-d19}, [r2]
   14b88:	mov	r2, r3
   14b8c:	and	r0, r0, r1, lsr #3
   14b90:	and	r1, r1, #31
   14b94:	vst1.64	{d16-d17}, [r2], r0
   14b98:	mov	r0, #1
   14b9c:	ldr	lr, [r2, #8]
   14ba0:	bic	r0, r0, lr, lsr r1
   14ba4:	eor	r0, lr, r0, lsl r1
   14ba8:	mov	r1, ip
   14bac:	str	r0, [r2, #8]
   14bb0:	mov	r0, #0
   14bb4:	mvn	r2, #0
   14bb8:	bl	147a8 <__assert_fail@plt+0x36f0>
   14bbc:	mov	sp, fp
   14bc0:	pop	{fp, pc}
   14bc4:	push	{fp, lr}
   14bc8:	mov	fp, sp
   14bcc:	sub	sp, sp, #48	; 0x30
   14bd0:	mov	r1, r0
   14bd4:	movw	r0, #37224	; 0x9168
   14bd8:	mov	r3, #32
   14bdc:	movt	r0, #2
   14be0:	add	r2, r0, #16
   14be4:	vld1.64	{d16-d17}, [r0], r3
   14be8:	mov	r3, sp
   14bec:	vld1.64	{d18-d19}, [r2]
   14bf0:	vld1.64	{d20-d21}, [r0]
   14bf4:	add	r2, r3, #16
   14bf8:	add	r0, r3, #32
   14bfc:	vst1.64	{d18-d19}, [r2]
   14c00:	vst1.64	{d20-d21}, [r0]
   14c04:	mov	r0, #12
   14c08:	mov	r2, r3
   14c0c:	vst1.64	{d16-d17}, [r2], r0
   14c10:	ldr	r0, [r2]
   14c14:	orr	r0, r0, #67108864	; 0x4000000
   14c18:	str	r0, [r2]
   14c1c:	mov	r0, #0
   14c20:	mvn	r2, #0
   14c24:	bl	147a8 <__assert_fail@plt+0x36f0>
   14c28:	mov	sp, fp
   14c2c:	pop	{fp, pc}
   14c30:	push	{fp, lr}
   14c34:	mov	fp, sp
   14c38:	sub	sp, sp, #48	; 0x30
   14c3c:	mov	ip, r1
   14c40:	mov	r1, r0
   14c44:	movw	r0, #37224	; 0x9168
   14c48:	mov	r2, #32
   14c4c:	movt	r0, #2
   14c50:	add	r3, r0, #16
   14c54:	vld1.64	{d16-d17}, [r0], r2
   14c58:	vld1.64	{d18-d19}, [r3]
   14c5c:	vld1.64	{d20-d21}, [r0]
   14c60:	mov	r3, sp
   14c64:	add	r2, r3, #16
   14c68:	add	r0, r3, #32
   14c6c:	vst1.64	{d18-d19}, [r2]
   14c70:	vst1.64	{d20-d21}, [r0]
   14c74:	mov	r0, #12
   14c78:	mov	r2, r3
   14c7c:	vst1.64	{d16-d17}, [r2], r0
   14c80:	ldr	r0, [r2]
   14c84:	orr	r0, r0, #67108864	; 0x4000000
   14c88:	str	r0, [r2]
   14c8c:	mov	r0, #0
   14c90:	mov	r2, ip
   14c94:	bl	147a8 <__assert_fail@plt+0x36f0>
   14c98:	mov	sp, fp
   14c9c:	pop	{fp, pc}
   14ca0:	push	{r4, sl, fp, lr}
   14ca4:	add	fp, sp, #8
   14ca8:	sub	sp, sp, #96	; 0x60
   14cac:	vmov.i32	q8, #0	; 0x00000000
   14cb0:	mov	ip, r2
   14cb4:	mov	r2, sp
   14cb8:	mov	r4, #28
   14cbc:	cmp	r1, #10
   14cc0:	mov	r3, r2
   14cc4:	add	lr, r2, #16
   14cc8:	vst1.64	{d16-d17}, [r3], r4
   14ccc:	vst1.64	{d16-d17}, [lr]
   14cd0:	vst1.32	{d16-d17}, [r3]
   14cd4:	beq	14d24 <__assert_fail@plt+0x3c6c>
   14cd8:	vld1.64	{d16-d17}, [r2], r4
   14cdc:	vld1.64	{d18-d19}, [lr]
   14ce0:	add	r3, sp, #48	; 0x30
   14ce4:	vld1.32	{d20-d21}, [r2]
   14ce8:	add	r2, r3, #20
   14cec:	add	r4, r3, #4
   14cf0:	vst1.32	{d18-d19}, [r2]
   14cf4:	add	r2, r3, #32
   14cf8:	vst1.32	{d16-d17}, [r4]
   14cfc:	vst1.32	{d20-d21}, [r2]
   14d00:	str	r1, [sp, #48]	; 0x30
   14d04:	mvn	r2, #0
   14d08:	ldr	r1, [sp, #60]	; 0x3c
   14d0c:	orr	r1, r1, #67108864	; 0x4000000
   14d10:	str	r1, [sp, #60]	; 0x3c
   14d14:	mov	r1, ip
   14d18:	bl	147a8 <__assert_fail@plt+0x36f0>
   14d1c:	sub	sp, fp, #8
   14d20:	pop	{r4, sl, fp, pc}
   14d24:	bl	110a0 <abort@plt>
   14d28:	push	{r4, r5, r6, sl, fp, lr}
   14d2c:	add	fp, sp, #16
   14d30:	sub	sp, sp, #48	; 0x30
   14d34:	mov	ip, r3
   14d38:	movw	r3, #37224	; 0x9168
   14d3c:	mov	r6, #32
   14d40:	cmp	r1, #0
   14d44:	mov	r4, sp
   14d48:	movt	r3, #2
   14d4c:	cmpne	r2, #0
   14d50:	add	r5, r4, #16
   14d54:	add	lr, r3, #16
   14d58:	vld1.64	{d16-d17}, [r3], r6
   14d5c:	vld1.64	{d18-d19}, [lr]
   14d60:	vld1.64	{d20-d21}, [r3]
   14d64:	mov	r3, #10
   14d68:	vst1.64	{d16-d17}, [r4], r6
   14d6c:	vst1.64	{d18-d19}, [r5]
   14d70:	vst1.64	{d20-d21}, [r4]
   14d74:	str	r3, [sp]
   14d78:	bne	14d80 <__assert_fail@plt+0x3cc8>
   14d7c:	bl	110a0 <abort@plt>
   14d80:	str	r2, [sp, #44]	; 0x2c
   14d84:	str	r1, [sp, #40]	; 0x28
   14d88:	mov	r3, sp
   14d8c:	mov	r1, ip
   14d90:	mvn	r2, #0
   14d94:	bl	147a8 <__assert_fail@plt+0x36f0>
   14d98:	sub	sp, fp, #16
   14d9c:	pop	{r4, r5, r6, sl, fp, pc}
   14da0:	push	{r4, r5, r6, sl, fp, lr}
   14da4:	add	fp, sp, #16
   14da8:	sub	sp, sp, #48	; 0x30
   14dac:	mov	lr, r3
   14db0:	movw	r3, #37224	; 0x9168
   14db4:	mov	r6, #32
   14db8:	cmp	r1, #0
   14dbc:	mov	r4, sp
   14dc0:	movt	r3, #2
   14dc4:	cmpne	r2, #0
   14dc8:	add	r5, r4, #16
   14dcc:	add	ip, r3, #16
   14dd0:	vld1.64	{d16-d17}, [r3], r6
   14dd4:	vld1.64	{d18-d19}, [ip]
   14dd8:	vld1.64	{d20-d21}, [r3]
   14ddc:	mov	r3, #10
   14de0:	vst1.64	{d16-d17}, [r4], r6
   14de4:	vst1.64	{d18-d19}, [r5]
   14de8:	vst1.64	{d20-d21}, [r4]
   14dec:	str	r3, [sp]
   14df0:	bne	14df8 <__assert_fail@plt+0x3d40>
   14df4:	bl	110a0 <abort@plt>
   14df8:	ldr	ip, [fp, #8]
   14dfc:	str	r2, [sp, #44]	; 0x2c
   14e00:	str	r1, [sp, #40]	; 0x28
   14e04:	mov	r3, sp
   14e08:	mov	r1, lr
   14e0c:	mov	r2, ip
   14e10:	bl	147a8 <__assert_fail@plt+0x36f0>
   14e14:	sub	sp, fp, #16
   14e18:	pop	{r4, r5, r6, sl, fp, pc}
   14e1c:	push	{r4, sl, fp, lr}
   14e20:	add	fp, sp, #8
   14e24:	sub	sp, sp, #48	; 0x30
   14e28:	movw	r3, #37224	; 0x9168
   14e2c:	mov	lr, #32
   14e30:	mov	ip, r2
   14e34:	cmp	r0, #0
   14e38:	movt	r3, #2
   14e3c:	cmpne	r1, #0
   14e40:	add	r2, r3, #16
   14e44:	vld1.64	{d16-d17}, [r3], lr
   14e48:	vld1.64	{d20-d21}, [r3]
   14e4c:	vld1.64	{d18-d19}, [r2]
   14e50:	mov	r2, sp
   14e54:	add	r4, r2, #16
   14e58:	vst1.64	{d16-d17}, [r2], lr
   14e5c:	vst1.64	{d20-d21}, [r2]
   14e60:	mov	r2, #10
   14e64:	vst1.64	{d18-d19}, [r4]
   14e68:	str	r2, [sp]
   14e6c:	bne	14e74 <__assert_fail@plt+0x3dbc>
   14e70:	bl	110a0 <abort@plt>
   14e74:	str	r1, [sp, #44]	; 0x2c
   14e78:	str	r0, [sp, #40]	; 0x28
   14e7c:	mov	r3, sp
   14e80:	mov	r0, #0
   14e84:	mov	r1, ip
   14e88:	mvn	r2, #0
   14e8c:	bl	147a8 <__assert_fail@plt+0x36f0>
   14e90:	sub	sp, fp, #8
   14e94:	pop	{r4, sl, fp, pc}
   14e98:	push	{r4, r5, fp, lr}
   14e9c:	add	fp, sp, #8
   14ea0:	sub	sp, sp, #48	; 0x30
   14ea4:	mov	ip, r3
   14ea8:	movw	r3, #37224	; 0x9168
   14eac:	mov	r4, #32
   14eb0:	mov	lr, r2
   14eb4:	cmp	r0, #0
   14eb8:	movt	r3, #2
   14ebc:	cmpne	r1, #0
   14ec0:	add	r2, r3, #16
   14ec4:	vld1.64	{d16-d17}, [r3], r4
   14ec8:	vld1.64	{d20-d21}, [r3]
   14ecc:	vld1.64	{d18-d19}, [r2]
   14ed0:	mov	r2, sp
   14ed4:	add	r5, r2, #16
   14ed8:	vst1.64	{d16-d17}, [r2], r4
   14edc:	vst1.64	{d20-d21}, [r2]
   14ee0:	mov	r2, #10
   14ee4:	vst1.64	{d18-d19}, [r5]
   14ee8:	str	r2, [sp]
   14eec:	bne	14ef4 <__assert_fail@plt+0x3e3c>
   14ef0:	bl	110a0 <abort@plt>
   14ef4:	str	r1, [sp, #44]	; 0x2c
   14ef8:	str	r0, [sp, #40]	; 0x28
   14efc:	mov	r3, sp
   14f00:	mov	r0, #0
   14f04:	mov	r1, lr
   14f08:	mov	r2, ip
   14f0c:	bl	147a8 <__assert_fail@plt+0x36f0>
   14f10:	sub	sp, fp, #8
   14f14:	pop	{r4, r5, fp, pc}
   14f18:	movw	r3, #37128	; 0x9108
   14f1c:	movt	r3, #2
   14f20:	b	147a8 <__assert_fail@plt+0x36f0>
   14f24:	movw	r3, #37128	; 0x9108
   14f28:	mov	r2, r1
   14f2c:	mov	r1, r0
   14f30:	mov	r0, #0
   14f34:	movt	r3, #2
   14f38:	b	147a8 <__assert_fail@plt+0x36f0>
   14f3c:	movw	r3, #37128	; 0x9108
   14f40:	mvn	r2, #0
   14f44:	movt	r3, #2
   14f48:	b	147a8 <__assert_fail@plt+0x36f0>
   14f4c:	movw	r3, #37128	; 0x9108
   14f50:	mov	r1, r0
   14f54:	mov	r0, #0
   14f58:	mvn	r2, #0
   14f5c:	movt	r3, #2
   14f60:	b	147a8 <__assert_fail@plt+0x36f0>
   14f64:	push	{r4, r5, fp, lr}
   14f68:	add	fp, sp, #8
   14f6c:	mov	r5, r0
   14f70:	mov	r4, r1
   14f74:	mov	r0, #0
   14f78:	mov	r2, #5
   14f7c:	mov	r1, r5
   14f80:	bl	10ecc <dcgettext@plt>
   14f84:	cmp	r0, r5
   14f88:	popne	{r4, r5, fp, pc}
   14f8c:	bl	16dcc <__assert_fail@plt+0x5d14>
   14f90:	ldrb	r1, [r0]
   14f94:	and	r1, r1, #223	; 0xdf
   14f98:	cmp	r1, #71	; 0x47
   14f9c:	beq	15004 <__assert_fail@plt+0x3f4c>
   14fa0:	cmp	r1, #85	; 0x55
   14fa4:	bne	1505c <__assert_fail@plt+0x3fa4>
   14fa8:	ldrb	r1, [r0, #1]
   14fac:	and	r1, r1, #223	; 0xdf
   14fb0:	cmp	r1, #84	; 0x54
   14fb4:	bne	1505c <__assert_fail@plt+0x3fa4>
   14fb8:	ldrb	r1, [r0, #2]
   14fbc:	and	r1, r1, #223	; 0xdf
   14fc0:	cmp	r1, #70	; 0x46
   14fc4:	bne	1505c <__assert_fail@plt+0x3fa4>
   14fc8:	ldrb	r1, [r0, #3]
   14fcc:	cmp	r1, #45	; 0x2d
   14fd0:	bne	1505c <__assert_fail@plt+0x3fa4>
   14fd4:	ldrb	r1, [r0, #4]
   14fd8:	cmp	r1, #56	; 0x38
   14fdc:	bne	1505c <__assert_fail@plt+0x3fa4>
   14fe0:	ldrb	r0, [r0, #5]
   14fe4:	cmp	r0, #0
   14fe8:	bne	1505c <__assert_fail@plt+0x3fa4>
   14fec:	ldrb	r1, [r5]
   14ff0:	movw	r2, #31801	; 0x7c39
   14ff4:	movw	r0, #31805	; 0x7c3d
   14ff8:	movt	r2, #1
   14ffc:	movt	r0, #1
   15000:	b	1508c <__assert_fail@plt+0x3fd4>
   15004:	ldrb	r1, [r0, #1]
   15008:	and	r1, r1, #223	; 0xdf
   1500c:	cmp	r1, #66	; 0x42
   15010:	bne	1505c <__assert_fail@plt+0x3fa4>
   15014:	ldrb	r1, [r0, #2]
   15018:	cmp	r1, #49	; 0x31
   1501c:	bne	1505c <__assert_fail@plt+0x3fa4>
   15020:	ldrb	r1, [r0, #3]
   15024:	cmp	r1, #56	; 0x38
   15028:	bne	1505c <__assert_fail@plt+0x3fa4>
   1502c:	ldrb	r1, [r0, #4]
   15030:	cmp	r1, #48	; 0x30
   15034:	bne	1505c <__assert_fail@plt+0x3fa4>
   15038:	ldrb	r1, [r0, #5]
   1503c:	cmp	r1, #51	; 0x33
   15040:	bne	1505c <__assert_fail@plt+0x3fa4>
   15044:	ldrb	r1, [r0, #6]
   15048:	cmp	r1, #48	; 0x30
   1504c:	bne	1505c <__assert_fail@plt+0x3fa4>
   15050:	ldrb	r0, [r0, #7]
   15054:	cmp	r0, #0
   15058:	beq	15078 <__assert_fail@plt+0x3fc0>
   1505c:	movw	r1, #31795	; 0x7c33
   15060:	movw	r0, #31799	; 0x7c37
   15064:	cmp	r4, #9
   15068:	movt	r1, #1
   1506c:	movt	r0, #1
   15070:	moveq	r0, r1
   15074:	pop	{r4, r5, fp, pc}
   15078:	ldrb	r1, [r5]
   1507c:	movw	r2, #31809	; 0x7c41
   15080:	movw	r0, #31813	; 0x7c45
   15084:	movt	r2, #1
   15088:	movt	r0, #1
   1508c:	cmp	r1, #96	; 0x60
   15090:	moveq	r0, r2
   15094:	pop	{r4, r5, fp, pc}
   15098:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1509c:	add	fp, sp, #24
   150a0:	movw	r8, #0
   150a4:	mov	r6, r2
   150a8:	mov	r4, r1
   150ac:	mov	r5, r0
   150b0:	movt	r8, #32752	; 0x7ff0
   150b4:	mov	r0, r5
   150b8:	mov	r1, r4
   150bc:	mov	r2, r6
   150c0:	bl	10e6c <read@plt>
   150c4:	mov	r7, r0
   150c8:	cmn	r0, #1
   150cc:	bgt	150f4 <__assert_fail@plt+0x403c>
   150d0:	bl	10fec <__errno_location@plt>
   150d4:	ldr	r0, [r0]
   150d8:	cmp	r0, #4
   150dc:	beq	150b4 <__assert_fail@plt+0x3ffc>
   150e0:	cmp	r6, r8
   150e4:	bls	150f4 <__assert_fail@plt+0x403c>
   150e8:	cmp	r0, #22
   150ec:	mov	r6, r8
   150f0:	beq	150b4 <__assert_fail@plt+0x3ffc>
   150f4:	mov	r0, r7
   150f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15100:	add	fp, sp, #24
   15104:	sub	sp, sp, #32
   15108:	ldr	r6, [fp, #12]
   1510c:	ldr	r7, [fp, #8]
   15110:	mov	r4, r2
   15114:	mov	r8, r0
   15118:	cmp	r1, #0
   1511c:	beq	15144 <__assert_fail@plt+0x408c>
   15120:	movw	r2, #31900	; 0x7c9c
   15124:	mov	r5, r1
   15128:	str	r3, [sp, #4]
   1512c:	str	r4, [sp]
   15130:	mov	r0, r8
   15134:	mov	r1, #1
   15138:	movt	r2, #1
   1513c:	mov	r3, r5
   15140:	b	1515c <__assert_fail@plt+0x40a4>
   15144:	movw	r2, #31912	; 0x7ca8
   15148:	str	r3, [sp]
   1514c:	mov	r0, r8
   15150:	mov	r1, #1
   15154:	mov	r3, r4
   15158:	movt	r2, #1
   1515c:	bl	11028 <__fprintf_chk@plt>
   15160:	movw	r1, #31919	; 0x7caf
   15164:	mov	r0, #0
   15168:	mov	r2, #5
   1516c:	movt	r1, #1
   15170:	bl	10ecc <dcgettext@plt>
   15174:	movw	r2, #32637	; 0x7f7d
   15178:	mov	r3, r0
   1517c:	movw	r0, #2022	; 0x7e6
   15180:	mov	r1, #1
   15184:	movt	r2, #1
   15188:	str	r0, [sp]
   1518c:	mov	r0, r8
   15190:	bl	11028 <__fprintf_chk@plt>
   15194:	movw	r4, #31016	; 0x7928
   15198:	mov	r1, r8
   1519c:	movt	r4, #1
   151a0:	mov	r0, r4
   151a4:	bl	10e48 <fputs_unlocked@plt>
   151a8:	movw	r1, #31923	; 0x7cb3
   151ac:	mov	r0, #0
   151b0:	mov	r2, #5
   151b4:	movt	r1, #1
   151b8:	bl	10ecc <dcgettext@plt>
   151bc:	movw	r3, #32094	; 0x7d5e
   151c0:	mov	r2, r0
   151c4:	mov	r0, r8
   151c8:	mov	r1, #1
   151cc:	movt	r3, #1
   151d0:	bl	11028 <__fprintf_chk@plt>
   151d4:	mov	r0, r4
   151d8:	mov	r1, r8
   151dc:	bl	10e48 <fputs_unlocked@plt>
   151e0:	cmp	r6, #9
   151e4:	bhi	15220 <__assert_fail@plt+0x4168>
   151e8:	add	r0, pc, #0
   151ec:	ldr	pc, [r0, r6, lsl #2]
   151f0:	andeq	r5, r1, r8, lsl r2
   151f4:	andeq	r5, r1, ip, lsr #4
   151f8:	andeq	r5, r1, ip, asr r2
   151fc:	andeq	r5, r1, r4, lsl #5
   15200:	andeq	r5, r1, ip, lsr #5
   15204:	ldrdeq	r5, [r1], -r4
   15208:	strdeq	r5, [r1], -ip
   1520c:	andeq	r5, r1, r4, lsr r3
   15210:	ldrdeq	r5, [r1], -r4
   15214:	andeq	r5, r1, ip, ror r3
   15218:	sub	sp, fp, #24
   1521c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15220:	movw	r1, #32447	; 0x7ebf
   15224:	movt	r1, #1
   15228:	b	15384 <__assert_fail@plt+0x42cc>
   1522c:	movw	r1, #32128	; 0x7d80
   15230:	mov	r0, #0
   15234:	mov	r2, #5
   15238:	movt	r1, #1
   1523c:	bl	10ecc <dcgettext@plt>
   15240:	ldr	r3, [r7]
   15244:	mov	r2, r0
   15248:	mov	r0, r8
   1524c:	mov	r1, #1
   15250:	sub	sp, fp, #24
   15254:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15258:	b	11028 <__fprintf_chk@plt>
   1525c:	movw	r1, #32144	; 0x7d90
   15260:	mov	r0, #0
   15264:	mov	r2, #5
   15268:	movt	r1, #1
   1526c:	bl	10ecc <dcgettext@plt>
   15270:	mov	r2, r0
   15274:	ldr	r3, [r7]
   15278:	ldr	r0, [r7, #4]
   1527c:	str	r0, [sp]
   15280:	b	15370 <__assert_fail@plt+0x42b8>
   15284:	movw	r1, #32167	; 0x7da7
   15288:	mov	r0, #0
   1528c:	mov	r2, #5
   15290:	movt	r1, #1
   15294:	bl	10ecc <dcgettext@plt>
   15298:	mov	r2, r0
   1529c:	ldr	r3, [r7]
   152a0:	ldmib	r7, {r0, r1}
   152a4:	stm	sp, {r0, r1}
   152a8:	b	15370 <__assert_fail@plt+0x42b8>
   152ac:	movw	r1, #32195	; 0x7dc3
   152b0:	mov	r0, #0
   152b4:	mov	r2, #5
   152b8:	movt	r1, #1
   152bc:	bl	10ecc <dcgettext@plt>
   152c0:	ldr	r3, [r7]
   152c4:	mov	r2, r0
   152c8:	ldmib	r7, {r0, r1, r7}
   152cc:	stm	sp, {r0, r1, r7}
   152d0:	b	15370 <__assert_fail@plt+0x42b8>
   152d4:	movw	r1, #32227	; 0x7de3
   152d8:	mov	r0, #0
   152dc:	mov	r2, #5
   152e0:	movt	r1, #1
   152e4:	bl	10ecc <dcgettext@plt>
   152e8:	ldr	r3, [r7]
   152ec:	mov	r2, r0
   152f0:	ldmib	r7, {r0, r1, r6, r7}
   152f4:	stm	sp, {r0, r1, r6, r7}
   152f8:	b	15370 <__assert_fail@plt+0x42b8>
   152fc:	movw	r1, #32263	; 0x7e07
   15300:	mov	r0, #0
   15304:	mov	r2, #5
   15308:	movt	r1, #1
   1530c:	bl	10ecc <dcgettext@plt>
   15310:	mov	r2, r0
   15314:	ldr	r3, [r7]
   15318:	ldmib	r7, {r0, r1, r6}
   1531c:	ldr	r5, [r7, #16]
   15320:	ldr	r7, [r7, #20]
   15324:	stm	sp, {r0, r1, r6}
   15328:	str	r5, [sp, #12]
   1532c:	str	r7, [sp, #16]
   15330:	b	15370 <__assert_fail@plt+0x42b8>
   15334:	movw	r1, #32303	; 0x7e2f
   15338:	mov	r0, #0
   1533c:	mov	r2, #5
   15340:	movt	r1, #1
   15344:	bl	10ecc <dcgettext@plt>
   15348:	mov	r2, r0
   1534c:	ldr	r3, [r7]
   15350:	ldmib	r7, {r0, r1, r6}
   15354:	ldr	r5, [r7, #16]
   15358:	ldr	r4, [r7, #20]
   1535c:	ldr	r7, [r7, #24]
   15360:	stm	sp, {r0, r1, r6}
   15364:	str	r5, [sp, #12]
   15368:	str	r4, [sp, #16]
   1536c:	str	r7, [sp, #20]
   15370:	mov	r0, r8
   15374:	mov	r1, #1
   15378:	b	15424 <__assert_fail@plt+0x436c>
   1537c:	movw	r1, #32395	; 0x7e8b
   15380:	movt	r1, #1
   15384:	mov	r0, #0
   15388:	mov	r2, #5
   1538c:	bl	10ecc <dcgettext@plt>
   15390:	mov	ip, r0
   15394:	ldr	r3, [r7]
   15398:	ldr	r0, [r7, #4]
   1539c:	ldr	r1, [r7, #8]
   153a0:	ldr	r6, [r7, #12]
   153a4:	ldr	r5, [r7, #16]
   153a8:	ldr	r4, [r7, #20]
   153ac:	ldr	r2, [r7, #24]
   153b0:	ldr	lr, [r7, #28]
   153b4:	ldr	r7, [r7, #32]
   153b8:	stm	sp, {r0, r1, r6}
   153bc:	str	r5, [sp, #12]
   153c0:	str	r4, [sp, #16]
   153c4:	str	r2, [sp, #20]
   153c8:	str	lr, [sp, #24]
   153cc:	str	r7, [sp, #28]
   153d0:	b	15418 <__assert_fail@plt+0x4360>
   153d4:	movw	r1, #32347	; 0x7e5b
   153d8:	mov	r0, #0
   153dc:	mov	r2, #5
   153e0:	movt	r1, #1
   153e4:	bl	10ecc <dcgettext@plt>
   153e8:	mov	ip, r0
   153ec:	ldr	r3, [r7]
   153f0:	ldmib	r7, {r0, r1, r6}
   153f4:	ldr	r5, [r7, #16]
   153f8:	ldr	r4, [r7, #20]
   153fc:	ldr	r2, [r7, #24]
   15400:	ldr	r7, [r7, #28]
   15404:	stm	sp, {r0, r1, r6}
   15408:	str	r5, [sp, #12]
   1540c:	str	r4, [sp, #16]
   15410:	str	r2, [sp, #20]
   15414:	str	r7, [sp, #24]
   15418:	mov	r0, r8
   1541c:	mov	r1, #1
   15420:	mov	r2, ip
   15424:	bl	11028 <__fprintf_chk@plt>
   15428:	sub	sp, fp, #24
   1542c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15430:	push	{r4, sl, fp, lr}
   15434:	add	fp, sp, #8
   15438:	sub	sp, sp, #8
   1543c:	ldr	ip, [fp, #8]
   15440:	mov	lr, #0
   15444:	ldr	r4, [ip, lr, lsl #2]
   15448:	add	lr, lr, #1
   1544c:	cmp	r4, #0
   15450:	bne	15444 <__assert_fail@plt+0x438c>
   15454:	sub	r4, lr, #1
   15458:	str	ip, [sp]
   1545c:	str	r4, [sp, #4]
   15460:	bl	150fc <__assert_fail@plt+0x4044>
   15464:	sub	sp, fp, #8
   15468:	pop	{r4, sl, fp, pc}
   1546c:	push	{fp, lr}
   15470:	mov	fp, sp
   15474:	sub	sp, sp, #48	; 0x30
   15478:	ldr	ip, [fp, #8]
   1547c:	ldr	lr, [ip]
   15480:	cmp	lr, #0
   15484:	str	lr, [sp, #8]
   15488:	beq	15524 <__assert_fail@plt+0x446c>
   1548c:	ldr	lr, [ip, #4]
   15490:	cmp	lr, #0
   15494:	str	lr, [sp, #12]
   15498:	beq	1552c <__assert_fail@plt+0x4474>
   1549c:	ldr	lr, [ip, #8]
   154a0:	cmp	lr, #0
   154a4:	str	lr, [sp, #16]
   154a8:	beq	15534 <__assert_fail@plt+0x447c>
   154ac:	ldr	lr, [ip, #12]
   154b0:	cmp	lr, #0
   154b4:	str	lr, [sp, #20]
   154b8:	beq	1553c <__assert_fail@plt+0x4484>
   154bc:	ldr	lr, [ip, #16]
   154c0:	cmp	lr, #0
   154c4:	str	lr, [sp, #24]
   154c8:	beq	15544 <__assert_fail@plt+0x448c>
   154cc:	ldr	lr, [ip, #20]
   154d0:	cmp	lr, #0
   154d4:	str	lr, [sp, #28]
   154d8:	beq	1554c <__assert_fail@plt+0x4494>
   154dc:	ldr	lr, [ip, #24]
   154e0:	cmp	lr, #0
   154e4:	str	lr, [sp, #32]
   154e8:	beq	15554 <__assert_fail@plt+0x449c>
   154ec:	ldr	lr, [ip, #28]
   154f0:	cmp	lr, #0
   154f4:	str	lr, [sp, #36]	; 0x24
   154f8:	beq	1555c <__assert_fail@plt+0x44a4>
   154fc:	ldr	lr, [ip, #32]
   15500:	cmp	lr, #0
   15504:	str	lr, [sp, #40]	; 0x28
   15508:	beq	15564 <__assert_fail@plt+0x44ac>
   1550c:	ldr	lr, [ip, #36]	; 0x24
   15510:	mov	ip, #10
   15514:	cmp	lr, #0
   15518:	str	lr, [sp, #44]	; 0x2c
   1551c:	movweq	ip, #9
   15520:	b	15568 <__assert_fail@plt+0x44b0>
   15524:	mov	ip, #0
   15528:	b	15568 <__assert_fail@plt+0x44b0>
   1552c:	mov	ip, #1
   15530:	b	15568 <__assert_fail@plt+0x44b0>
   15534:	mov	ip, #2
   15538:	b	15568 <__assert_fail@plt+0x44b0>
   1553c:	mov	ip, #3
   15540:	b	15568 <__assert_fail@plt+0x44b0>
   15544:	mov	ip, #4
   15548:	b	15568 <__assert_fail@plt+0x44b0>
   1554c:	mov	ip, #5
   15550:	b	15568 <__assert_fail@plt+0x44b0>
   15554:	mov	ip, #6
   15558:	b	15568 <__assert_fail@plt+0x44b0>
   1555c:	mov	ip, #7
   15560:	b	15568 <__assert_fail@plt+0x44b0>
   15564:	mov	ip, #8
   15568:	add	lr, sp, #8
   1556c:	str	ip, [sp, #4]
   15570:	str	lr, [sp]
   15574:	bl	150fc <__assert_fail@plt+0x4044>
   15578:	mov	sp, fp
   1557c:	pop	{fp, pc}
   15580:	push	{fp, lr}
   15584:	mov	fp, sp
   15588:	sub	sp, sp, #56	; 0x38
   1558c:	add	ip, fp, #8
   15590:	str	ip, [sp, #12]
   15594:	ldr	lr, [fp, #8]
   15598:	cmp	lr, #0
   1559c:	str	lr, [sp, #16]
   155a0:	beq	1563c <__assert_fail@plt+0x4584>
   155a4:	ldr	lr, [ip, #4]
   155a8:	cmp	lr, #0
   155ac:	str	lr, [sp, #20]
   155b0:	beq	15644 <__assert_fail@plt+0x458c>
   155b4:	ldr	lr, [ip, #8]
   155b8:	cmp	lr, #0
   155bc:	str	lr, [sp, #24]
   155c0:	beq	1564c <__assert_fail@plt+0x4594>
   155c4:	ldr	lr, [ip, #12]
   155c8:	cmp	lr, #0
   155cc:	str	lr, [sp, #28]
   155d0:	beq	15654 <__assert_fail@plt+0x459c>
   155d4:	ldr	lr, [ip, #16]
   155d8:	cmp	lr, #0
   155dc:	str	lr, [sp, #32]
   155e0:	beq	1565c <__assert_fail@plt+0x45a4>
   155e4:	ldr	lr, [ip, #20]
   155e8:	cmp	lr, #0
   155ec:	str	lr, [sp, #36]	; 0x24
   155f0:	beq	15664 <__assert_fail@plt+0x45ac>
   155f4:	ldr	lr, [ip, #24]
   155f8:	cmp	lr, #0
   155fc:	str	lr, [sp, #40]	; 0x28
   15600:	beq	1566c <__assert_fail@plt+0x45b4>
   15604:	ldr	lr, [ip, #28]
   15608:	cmp	lr, #0
   1560c:	str	lr, [sp, #44]	; 0x2c
   15610:	beq	15674 <__assert_fail@plt+0x45bc>
   15614:	ldr	lr, [ip, #32]
   15618:	cmp	lr, #0
   1561c:	str	lr, [sp, #48]	; 0x30
   15620:	beq	1567c <__assert_fail@plt+0x45c4>
   15624:	ldr	lr, [ip, #36]	; 0x24
   15628:	mov	ip, #10
   1562c:	cmp	lr, #0
   15630:	str	lr, [sp, #52]	; 0x34
   15634:	movweq	ip, #9
   15638:	b	15680 <__assert_fail@plt+0x45c8>
   1563c:	mov	ip, #0
   15640:	b	15680 <__assert_fail@plt+0x45c8>
   15644:	mov	ip, #1
   15648:	b	15680 <__assert_fail@plt+0x45c8>
   1564c:	mov	ip, #2
   15650:	b	15680 <__assert_fail@plt+0x45c8>
   15654:	mov	ip, #3
   15658:	b	15680 <__assert_fail@plt+0x45c8>
   1565c:	mov	ip, #4
   15660:	b	15680 <__assert_fail@plt+0x45c8>
   15664:	mov	ip, #5
   15668:	b	15680 <__assert_fail@plt+0x45c8>
   1566c:	mov	ip, #6
   15670:	b	15680 <__assert_fail@plt+0x45c8>
   15674:	mov	ip, #7
   15678:	b	15680 <__assert_fail@plt+0x45c8>
   1567c:	mov	ip, #8
   15680:	add	lr, sp, #16
   15684:	str	ip, [sp, #4]
   15688:	str	lr, [sp]
   1568c:	bl	150fc <__assert_fail@plt+0x4044>
   15690:	mov	sp, fp
   15694:	pop	{fp, pc}
   15698:	push	{fp, lr}
   1569c:	mov	fp, sp
   156a0:	movw	r0, #37196	; 0x914c
   156a4:	movt	r0, #2
   156a8:	ldr	r1, [r0]
   156ac:	movw	r0, #31016	; 0x7928
   156b0:	movt	r0, #1
   156b4:	bl	10e48 <fputs_unlocked@plt>
   156b8:	movw	r1, #32507	; 0x7efb
   156bc:	mov	r0, #0
   156c0:	mov	r2, #5
   156c4:	movt	r1, #1
   156c8:	bl	10ecc <dcgettext@plt>
   156cc:	movw	r2, #32527	; 0x7f0f
   156d0:	mov	r1, r0
   156d4:	mov	r0, #1
   156d8:	movt	r2, #1
   156dc:	bl	11010 <__printf_chk@plt>
   156e0:	movw	r1, #32549	; 0x7f25
   156e4:	mov	r0, #0
   156e8:	mov	r2, #5
   156ec:	movt	r1, #1
   156f0:	bl	10ecc <dcgettext@plt>
   156f4:	movw	r2, #30502	; 0x7726
   156f8:	movw	r3, #30825	; 0x7869
   156fc:	mov	r1, r0
   15700:	mov	r0, #1
   15704:	movt	r2, #1
   15708:	movt	r3, #1
   1570c:	bl	11010 <__printf_chk@plt>
   15710:	movw	r1, #32569	; 0x7f39
   15714:	mov	r0, #0
   15718:	mov	r2, #5
   1571c:	movt	r1, #1
   15720:	bl	10ecc <dcgettext@plt>
   15724:	movw	r2, #32608	; 0x7f60
   15728:	mov	r1, r0
   1572c:	mov	r0, #1
   15730:	movt	r2, #1
   15734:	pop	{fp, lr}
   15738:	b	11010 <__printf_chk@plt>
   1573c:	push	{r4, r5, r6, sl, fp, lr}
   15740:	add	fp, sp, #16
   15744:	mov	r4, r2
   15748:	mov	r5, r1
   1574c:	mov	r6, r0
   15750:	bl	16e68 <__assert_fail@plt+0x5db0>
   15754:	cmp	r0, #0
   15758:	popne	{r4, r5, r6, sl, fp, pc}
   1575c:	cmp	r6, #0
   15760:	beq	15774 <__assert_fail@plt+0x46bc>
   15764:	cmp	r5, #0
   15768:	cmpne	r4, #0
   1576c:	bne	15774 <__assert_fail@plt+0x46bc>
   15770:	pop	{r4, r5, r6, sl, fp, pc}
   15774:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15778:	push	{r4, r5, r6, sl, fp, lr}
   1577c:	add	fp, sp, #16
   15780:	mov	r4, r2
   15784:	mov	r5, r1
   15788:	mov	r6, r0
   1578c:	bl	16e68 <__assert_fail@plt+0x5db0>
   15790:	cmp	r0, #0
   15794:	popne	{r4, r5, r6, sl, fp, pc}
   15798:	cmp	r6, #0
   1579c:	beq	157b0 <__assert_fail@plt+0x46f8>
   157a0:	cmp	r5, #0
   157a4:	cmpne	r4, #0
   157a8:	bne	157b0 <__assert_fail@plt+0x46f8>
   157ac:	pop	{r4, r5, r6, sl, fp, pc}
   157b0:	bl	15cf0 <__assert_fail@plt+0x4c38>
   157b4:	push	{fp, lr}
   157b8:	mov	fp, sp
   157bc:	bl	16b24 <__assert_fail@plt+0x5a6c>
   157c0:	cmp	r0, #0
   157c4:	popne	{fp, pc}
   157c8:	bl	15cf0 <__assert_fail@plt+0x4c38>
   157cc:	push	{fp, lr}
   157d0:	mov	fp, sp
   157d4:	bl	16b24 <__assert_fail@plt+0x5a6c>
   157d8:	cmp	r0, #0
   157dc:	popne	{fp, pc}
   157e0:	bl	15cf0 <__assert_fail@plt+0x4c38>
   157e4:	push	{fp, lr}
   157e8:	mov	fp, sp
   157ec:	bl	16b24 <__assert_fail@plt+0x5a6c>
   157f0:	cmp	r0, #0
   157f4:	popne	{fp, pc}
   157f8:	bl	15cf0 <__assert_fail@plt+0x4c38>
   157fc:	push	{r4, r5, fp, lr}
   15800:	add	fp, sp, #8
   15804:	mov	r4, r1
   15808:	mov	r5, r0
   1580c:	bl	16b54 <__assert_fail@plt+0x5a9c>
   15810:	cmp	r0, #0
   15814:	popne	{r4, r5, fp, pc}
   15818:	cmp	r5, #0
   1581c:	beq	1582c <__assert_fail@plt+0x4774>
   15820:	cmp	r4, #0
   15824:	bne	1582c <__assert_fail@plt+0x4774>
   15828:	pop	{r4, r5, fp, pc}
   1582c:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15830:	push	{fp, lr}
   15834:	mov	fp, sp
   15838:	cmp	r1, #0
   1583c:	orreq	r1, r1, #1
   15840:	bl	16b54 <__assert_fail@plt+0x5a9c>
   15844:	cmp	r0, #0
   15848:	popne	{fp, pc}
   1584c:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15850:	push	{fp, lr}
   15854:	mov	fp, sp
   15858:	clz	r3, r2
   1585c:	lsr	ip, r3, #5
   15860:	clz	r3, r1
   15864:	lsr	r3, r3, #5
   15868:	orrs	r3, r3, ip
   1586c:	movwne	r1, #1
   15870:	movwne	r2, #1
   15874:	bl	16e68 <__assert_fail@plt+0x5db0>
   15878:	cmp	r0, #0
   1587c:	popne	{fp, pc}
   15880:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15884:	push	{fp, lr}
   15888:	mov	fp, sp
   1588c:	mov	r2, r1
   15890:	mov	r1, r0
   15894:	mov	r0, #0
   15898:	bl	16e68 <__assert_fail@plt+0x5db0>
   1589c:	cmp	r0, #0
   158a0:	popne	{fp, pc}
   158a4:	bl	15cf0 <__assert_fail@plt+0x4c38>
   158a8:	push	{fp, lr}
   158ac:	mov	fp, sp
   158b0:	mov	r2, r1
   158b4:	mov	r1, r0
   158b8:	clz	r0, r2
   158bc:	clz	r3, r1
   158c0:	lsr	r0, r0, #5
   158c4:	lsr	r3, r3, #5
   158c8:	orrs	r0, r3, r0
   158cc:	mov	r0, #0
   158d0:	movwne	r1, #1
   158d4:	movwne	r2, #1
   158d8:	bl	16e68 <__assert_fail@plt+0x5db0>
   158dc:	cmp	r0, #0
   158e0:	popne	{fp, pc}
   158e4:	bl	15cf0 <__assert_fail@plt+0x4c38>
   158e8:	push	{r4, r5, r6, sl, fp, lr}
   158ec:	add	fp, sp, #16
   158f0:	ldr	r5, [r1]
   158f4:	mov	r4, r1
   158f8:	mov	r6, r0
   158fc:	cmp	r0, #0
   15900:	beq	15918 <__assert_fail@plt+0x4860>
   15904:	mov	r0, #1
   15908:	add	r0, r0, r5, lsr #1
   1590c:	adds	r5, r5, r0
   15910:	bcc	15920 <__assert_fail@plt+0x4868>
   15914:	b	1595c <__assert_fail@plt+0x48a4>
   15918:	cmp	r5, #0
   1591c:	movweq	r5, #64	; 0x40
   15920:	mov	r0, r6
   15924:	mov	r1, r5
   15928:	mov	r2, #1
   1592c:	bl	16e68 <__assert_fail@plt+0x5db0>
   15930:	cmp	r5, #0
   15934:	mov	r1, r5
   15938:	movwne	r1, #1
   1593c:	cmp	r0, #0
   15940:	bne	15954 <__assert_fail@plt+0x489c>
   15944:	clz	r2, r6
   15948:	lsr	r2, r2, #5
   1594c:	orrs	r1, r2, r1
   15950:	bne	1595c <__assert_fail@plt+0x48a4>
   15954:	str	r5, [r4]
   15958:	pop	{r4, r5, r6, sl, fp, pc}
   1595c:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15960:	push	{r4, r5, r6, r7, fp, lr}
   15964:	add	fp, sp, #16
   15968:	ldr	r5, [r1]
   1596c:	mov	r6, r2
   15970:	mov	r4, r1
   15974:	mov	r7, r0
   15978:	cmp	r0, #0
   1597c:	beq	15994 <__assert_fail@plt+0x48dc>
   15980:	mov	r0, #1
   15984:	add	r0, r0, r5, lsr #1
   15988:	adds	r5, r5, r0
   1598c:	bcc	159ac <__assert_fail@plt+0x48f4>
   15990:	b	159e0 <__assert_fail@plt+0x4928>
   15994:	cmp	r5, #0
   15998:	bne	159ac <__assert_fail@plt+0x48f4>
   1599c:	mov	r0, #64	; 0x40
   159a0:	cmp	r6, #64	; 0x40
   159a4:	udiv	r5, r0, r6
   159a8:	addhi	r5, r5, #1
   159ac:	mov	r0, r7
   159b0:	mov	r1, r5
   159b4:	mov	r2, r6
   159b8:	bl	16e68 <__assert_fail@plt+0x5db0>
   159bc:	cmp	r0, #0
   159c0:	bne	159d8 <__assert_fail@plt+0x4920>
   159c4:	cmp	r7, #0
   159c8:	beq	159e0 <__assert_fail@plt+0x4928>
   159cc:	cmp	r6, #0
   159d0:	cmpne	r5, #0
   159d4:	bne	159e0 <__assert_fail@plt+0x4928>
   159d8:	str	r5, [r4]
   159dc:	pop	{r4, r5, r6, r7, fp, pc}
   159e0:	bl	15cf0 <__assert_fail@plt+0x4c38>
   159e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159e8:	add	fp, sp, #24
   159ec:	mov	r8, r1
   159f0:	ldr	r1, [r1]
   159f4:	mov	r5, r0
   159f8:	add	r0, r1, r1, asr #1
   159fc:	cmp	r0, r1
   15a00:	mvnvs	r0, #-2147483648	; 0x80000000
   15a04:	cmp	r0, r3
   15a08:	mov	r7, r0
   15a0c:	movgt	r7, r3
   15a10:	cmn	r3, #1
   15a14:	movle	r7, r0
   15a18:	ldr	r0, [fp, #8]
   15a1c:	cmn	r0, #1
   15a20:	ble	15a48 <__assert_fail@plt+0x4990>
   15a24:	cmp	r0, #0
   15a28:	beq	15a9c <__assert_fail@plt+0x49e4>
   15a2c:	cmn	r7, #1
   15a30:	ble	15a70 <__assert_fail@plt+0x49b8>
   15a34:	mvn	r4, #-2147483648	; 0x80000000
   15a38:	udiv	r6, r4, r0
   15a3c:	cmp	r6, r7
   15a40:	bge	15a9c <__assert_fail@plt+0x49e4>
   15a44:	b	15aac <__assert_fail@plt+0x49f4>
   15a48:	cmn	r7, #1
   15a4c:	ble	15a8c <__assert_fail@plt+0x49d4>
   15a50:	cmn	r0, #1
   15a54:	beq	15a9c <__assert_fail@plt+0x49e4>
   15a58:	mov	r6, #-2147483648	; 0x80000000
   15a5c:	mvn	r4, #-2147483648	; 0x80000000
   15a60:	sdiv	r6, r6, r0
   15a64:	cmp	r6, r7
   15a68:	bge	15a9c <__assert_fail@plt+0x49e4>
   15a6c:	b	15aac <__assert_fail@plt+0x49f4>
   15a70:	beq	15a9c <__assert_fail@plt+0x49e4>
   15a74:	mov	r6, #-2147483648	; 0x80000000
   15a78:	mvn	r4, #-2147483648	; 0x80000000
   15a7c:	sdiv	r6, r6, r7
   15a80:	cmp	r6, r0
   15a84:	bge	15a9c <__assert_fail@plt+0x49e4>
   15a88:	b	15aac <__assert_fail@plt+0x49f4>
   15a8c:	mvn	r4, #-2147483648	; 0x80000000
   15a90:	sdiv	r6, r4, r0
   15a94:	cmp	r7, r6
   15a98:	blt	15aac <__assert_fail@plt+0x49f4>
   15a9c:	mul	r6, r7, r0
   15aa0:	mov	r4, #64	; 0x40
   15aa4:	cmp	r6, #63	; 0x3f
   15aa8:	bgt	15ab4 <__assert_fail@plt+0x49fc>
   15aac:	sdiv	r7, r4, r0
   15ab0:	mul	r6, r7, r0
   15ab4:	cmp	r5, #0
   15ab8:	moveq	r4, #0
   15abc:	streq	r4, [r8]
   15ac0:	sub	r4, r7, r1
   15ac4:	cmp	r4, r2
   15ac8:	bge	15b74 <__assert_fail@plt+0x4abc>
   15acc:	add	r7, r1, r2
   15ad0:	mov	r6, #0
   15ad4:	mov	r2, #0
   15ad8:	cmp	r7, r3
   15adc:	movwgt	r6, #1
   15ae0:	cmn	r3, #1
   15ae4:	movwgt	r2, #1
   15ae8:	cmp	r7, r1
   15aec:	bvs	15ba8 <__assert_fail@plt+0x4af0>
   15af0:	ands	r1, r2, r6
   15af4:	bne	15ba8 <__assert_fail@plt+0x4af0>
   15af8:	cmn	r0, #1
   15afc:	ble	15b24 <__assert_fail@plt+0x4a6c>
   15b00:	cmp	r0, #0
   15b04:	beq	15b70 <__assert_fail@plt+0x4ab8>
   15b08:	cmn	r7, #1
   15b0c:	ble	15b48 <__assert_fail@plt+0x4a90>
   15b10:	mvn	r1, #-2147483648	; 0x80000000
   15b14:	udiv	r1, r1, r0
   15b18:	cmp	r1, r7
   15b1c:	bge	15b70 <__assert_fail@plt+0x4ab8>
   15b20:	b	15ba8 <__assert_fail@plt+0x4af0>
   15b24:	cmn	r7, #1
   15b28:	ble	15b60 <__assert_fail@plt+0x4aa8>
   15b2c:	cmn	r0, #1
   15b30:	beq	15b70 <__assert_fail@plt+0x4ab8>
   15b34:	mov	r1, #-2147483648	; 0x80000000
   15b38:	sdiv	r1, r1, r0
   15b3c:	cmp	r1, r7
   15b40:	bge	15b70 <__assert_fail@plt+0x4ab8>
   15b44:	b	15ba8 <__assert_fail@plt+0x4af0>
   15b48:	beq	15b70 <__assert_fail@plt+0x4ab8>
   15b4c:	mov	r1, #-2147483648	; 0x80000000
   15b50:	sdiv	r1, r1, r7
   15b54:	cmp	r1, r0
   15b58:	bge	15b70 <__assert_fail@plt+0x4ab8>
   15b5c:	b	15ba8 <__assert_fail@plt+0x4af0>
   15b60:	mvn	r1, #-2147483648	; 0x80000000
   15b64:	sdiv	r1, r1, r0
   15b68:	cmp	r7, r1
   15b6c:	blt	15ba8 <__assert_fail@plt+0x4af0>
   15b70:	mul	r6, r7, r0
   15b74:	mov	r0, r5
   15b78:	mov	r1, r6
   15b7c:	bl	16b54 <__assert_fail@plt+0x5a9c>
   15b80:	cmp	r6, #0
   15b84:	movwne	r6, #1
   15b88:	cmp	r0, #0
   15b8c:	bne	15ba0 <__assert_fail@plt+0x4ae8>
   15b90:	clz	r1, r5
   15b94:	lsr	r1, r1, #5
   15b98:	orrs	r1, r1, r6
   15b9c:	bne	15ba8 <__assert_fail@plt+0x4af0>
   15ba0:	str	r7, [r8]
   15ba4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ba8:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15bac:	push	{fp, lr}
   15bb0:	mov	fp, sp
   15bb4:	mov	r1, #1
   15bb8:	bl	16ad0 <__assert_fail@plt+0x5a18>
   15bbc:	cmp	r0, #0
   15bc0:	popne	{fp, pc}
   15bc4:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15bc8:	push	{fp, lr}
   15bcc:	mov	fp, sp
   15bd0:	bl	16ad0 <__assert_fail@plt+0x5a18>
   15bd4:	cmp	r0, #0
   15bd8:	popne	{fp, pc}
   15bdc:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15be0:	push	{fp, lr}
   15be4:	mov	fp, sp
   15be8:	mov	r1, #1
   15bec:	bl	16ad0 <__assert_fail@plt+0x5a18>
   15bf0:	cmp	r0, #0
   15bf4:	popne	{fp, pc}
   15bf8:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15bfc:	push	{fp, lr}
   15c00:	mov	fp, sp
   15c04:	bl	16ad0 <__assert_fail@plt+0x5a18>
   15c08:	cmp	r0, #0
   15c0c:	popne	{fp, pc}
   15c10:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15c14:	push	{r4, r5, fp, lr}
   15c18:	add	fp, sp, #8
   15c1c:	mov	r5, r0
   15c20:	mov	r0, r1
   15c24:	mov	r4, r1
   15c28:	bl	16b24 <__assert_fail@plt+0x5a6c>
   15c2c:	cmp	r0, #0
   15c30:	beq	15c44 <__assert_fail@plt+0x4b8c>
   15c34:	mov	r1, r5
   15c38:	mov	r2, r4
   15c3c:	pop	{r4, r5, fp, lr}
   15c40:	b	10e9c <memcpy@plt>
   15c44:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15c48:	push	{r4, r5, fp, lr}
   15c4c:	add	fp, sp, #8
   15c50:	mov	r5, r0
   15c54:	mov	r0, r1
   15c58:	mov	r4, r1
   15c5c:	bl	16b24 <__assert_fail@plt+0x5a6c>
   15c60:	cmp	r0, #0
   15c64:	beq	15c78 <__assert_fail@plt+0x4bc0>
   15c68:	mov	r1, r5
   15c6c:	mov	r2, r4
   15c70:	pop	{r4, r5, fp, lr}
   15c74:	b	10e9c <memcpy@plt>
   15c78:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15c7c:	push	{r4, r5, fp, lr}
   15c80:	add	fp, sp, #8
   15c84:	mov	r5, r0
   15c88:	add	r0, r1, #1
   15c8c:	mov	r4, r1
   15c90:	bl	16b24 <__assert_fail@plt+0x5a6c>
   15c94:	cmp	r0, #0
   15c98:	beq	15cb4 <__assert_fail@plt+0x4bfc>
   15c9c:	mov	r1, #0
   15ca0:	mov	r2, r4
   15ca4:	strb	r1, [r0, r4]
   15ca8:	mov	r1, r5
   15cac:	pop	{r4, r5, fp, lr}
   15cb0:	b	10e9c <memcpy@plt>
   15cb4:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15cb8:	push	{r4, r5, fp, lr}
   15cbc:	add	fp, sp, #8
   15cc0:	mov	r4, r0
   15cc4:	bl	10fc8 <strlen@plt>
   15cc8:	add	r5, r0, #1
   15ccc:	mov	r0, r5
   15cd0:	bl	16b24 <__assert_fail@plt+0x5a6c>
   15cd4:	cmp	r0, #0
   15cd8:	beq	15cec <__assert_fail@plt+0x4c34>
   15cdc:	mov	r1, r4
   15ce0:	mov	r2, r5
   15ce4:	pop	{r4, r5, fp, lr}
   15ce8:	b	10e9c <memcpy@plt>
   15cec:	bl	15cf0 <__assert_fail@plt+0x4c38>
   15cf0:	push	{fp, lr}
   15cf4:	mov	fp, sp
   15cf8:	movw	r0, #37108	; 0x90f4
   15cfc:	movw	r1, #32684	; 0x7fac
   15d00:	mov	r2, #5
   15d04:	movt	r0, #2
   15d08:	movt	r1, #1
   15d0c:	ldr	r4, [r0]
   15d10:	mov	r0, #0
   15d14:	bl	10ecc <dcgettext@plt>
   15d18:	movw	r2, #30549	; 0x7755
   15d1c:	mov	r3, r0
   15d20:	mov	r0, r4
   15d24:	mov	r1, #0
   15d28:	movt	r2, #1
   15d2c:	bl	10f50 <error@plt>
   15d30:	bl	110a0 <abort@plt>
   15d34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d38:	add	fp, sp, #24
   15d3c:	sub	sp, sp, #16
   15d40:	mov	r8, r0
   15d44:	ldr	r0, [fp, #16]
   15d48:	mov	r5, r3
   15d4c:	mov	r6, r2
   15d50:	mov	r2, r1
   15d54:	add	r3, sp, #8
   15d58:	mov	r1, #0
   15d5c:	str	r0, [sp]
   15d60:	mov	r0, r8
   15d64:	bl	15e30 <__assert_fail@plt+0x4d78>
   15d68:	cmp	r0, #0
   15d6c:	bne	15df8 <__assert_fail@plt+0x4d40>
   15d70:	ldr	r4, [sp, #8]
   15d74:	ldr	r7, [sp, #12]
   15d78:	subs	r0, r4, r6
   15d7c:	sbcs	r0, r7, r5
   15d80:	bcc	15da4 <__assert_fail@plt+0x4cec>
   15d84:	ldr	r1, [fp, #8]
   15d88:	ldr	r0, [fp, #12]
   15d8c:	subs	r1, r1, r4
   15d90:	sbcs	r0, r0, r7
   15d94:	movcs	r0, r4
   15d98:	movcs	r1, r7
   15d9c:	subcs	sp, fp, #24
   15da0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15da4:	bl	10fec <__errno_location@plt>
   15da8:	subs	r1, r4, #1073741824	; 0x40000000
   15dac:	sbcs	r1, r7, #0
   15db0:	movcc	r1, #34	; 0x22
   15db4:	movcs	r1, #75	; 0x4b
   15db8:	str	r1, [r0]
   15dbc:	ldr	r6, [r0]
   15dc0:	ldr	r4, [fp, #24]
   15dc4:	ldr	r5, [fp, #20]
   15dc8:	mov	r0, r8
   15dcc:	bl	14f4c <__assert_fail@plt+0x3e94>
   15dd0:	subs	r1, r6, #22
   15dd4:	movw	r2, #30545	; 0x7751
   15dd8:	str	r0, [sp]
   15ddc:	mov	r3, r5
   15de0:	movne	r1, r6
   15de4:	cmp	r4, #0
   15de8:	movt	r2, #1
   15dec:	movweq	r4, #1
   15df0:	mov	r0, r4
   15df4:	bl	10f50 <error@plt>
   15df8:	cmp	r0, #1
   15dfc:	beq	15e14 <__assert_fail@plt+0x4d5c>
   15e00:	cmp	r0, #3
   15e04:	bne	15e20 <__assert_fail@plt+0x4d68>
   15e08:	bl	10fec <__errno_location@plt>
   15e0c:	mov	r1, #0
   15e10:	b	15db8 <__assert_fail@plt+0x4d00>
   15e14:	bl	10fec <__errno_location@plt>
   15e18:	mov	r1, #75	; 0x4b
   15e1c:	b	15db8 <__assert_fail@plt+0x4d00>
   15e20:	bl	10fec <__errno_location@plt>
   15e24:	b	15dbc <__assert_fail@plt+0x4d04>
   15e28:	mov	r1, #10
   15e2c:	b	15d34 <__assert_fail@plt+0x4c7c>
   15e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e34:	add	fp, sp, #28
   15e38:	sub	sp, sp, #44	; 0x2c
   15e3c:	cmp	r2, #37	; 0x25
   15e40:	bcs	16ab0 <__assert_fail@plt+0x59f8>
   15e44:	ldr	sl, [fp, #8]
   15e48:	mov	r6, r2
   15e4c:	mov	r7, r1
   15e50:	mov	r4, r0
   15e54:	str	r3, [sp, #36]	; 0x24
   15e58:	bl	10fec <__errno_location@plt>
   15e5c:	mov	r5, r0
   15e60:	mov	r0, #0
   15e64:	str	r0, [r5]
   15e68:	bl	10fa4 <__ctype_b_loc@plt>
   15e6c:	ldr	r1, [r0]
   15e70:	mov	r2, r4
   15e74:	ldrb	r0, [r2], #1
   15e78:	add	r3, r1, r0, lsl #1
   15e7c:	ldrb	r3, [r3, #1]
   15e80:	tst	r3, #32
   15e84:	bne	15e74 <__assert_fail@plt+0x4dbc>
   15e88:	cmp	r7, #0
   15e8c:	sub	r9, fp, #32
   15e90:	mov	r8, #4
   15e94:	movne	r9, r7
   15e98:	cmp	r0, #45	; 0x2d
   15e9c:	beq	16aa4 <__assert_fail@plt+0x59ec>
   15ea0:	mov	r0, r4
   15ea4:	mov	r1, r9
   15ea8:	mov	r2, r6
   15eac:	mov	r3, #0
   15eb0:	bl	10ea8 <__strtoull_internal@plt>
   15eb4:	mov	r7, r1
   15eb8:	ldr	r1, [r9]
   15ebc:	cmp	r1, r4
   15ec0:	beq	15eec <__assert_fail@plt+0x4e34>
   15ec4:	mov	r6, r0
   15ec8:	ldr	r0, [r5]
   15ecc:	cmp	r0, #0
   15ed0:	beq	15f28 <__assert_fail@plt+0x4e70>
   15ed4:	cmp	r0, #34	; 0x22
   15ed8:	bne	16aa4 <__assert_fail@plt+0x59ec>
   15edc:	mov	r8, #1
   15ee0:	cmp	sl, #0
   15ee4:	bne	15f34 <__assert_fail@plt+0x4e7c>
   15ee8:	b	16a9c <__assert_fail@plt+0x59e4>
   15eec:	cmp	sl, #0
   15ef0:	beq	16aa4 <__assert_fail@plt+0x59ec>
   15ef4:	mov	r5, r1
   15ef8:	ldrb	r1, [r4]
   15efc:	cmp	r1, #0
   15f00:	beq	16aa4 <__assert_fail@plt+0x59ec>
   15f04:	mov	r0, sl
   15f08:	bl	10fd4 <strchr@plt>
   15f0c:	cmp	r0, #0
   15f10:	beq	16aa4 <__assert_fail@plt+0x59ec>
   15f14:	mov	r1, r5
   15f18:	mov	r8, #0
   15f1c:	mov	r6, #1
   15f20:	mov	r7, #0
   15f24:	b	15f34 <__assert_fail@plt+0x4e7c>
   15f28:	mov	r8, r0
   15f2c:	cmp	sl, #0
   15f30:	beq	16a9c <__assert_fail@plt+0x59e4>
   15f34:	ldrb	r4, [r1]
   15f38:	cmp	r4, #0
   15f3c:	beq	16a9c <__assert_fail@plt+0x59e4>
   15f40:	str	r1, [sp, #32]
   15f44:	mov	r0, sl
   15f48:	mov	r1, r4
   15f4c:	bl	10fd4 <strchr@plt>
   15f50:	cmp	r0, #0
   15f54:	beq	1621c <__assert_fail@plt+0x5164>
   15f58:	sub	r0, r4, #69	; 0x45
   15f5c:	mov	r1, #1
   15f60:	mov	r3, #0
   15f64:	mov	r5, #1024	; 0x400
   15f68:	cmp	r0, #47	; 0x2f
   15f6c:	str	r1, [sp, #28]
   15f70:	bhi	16074 <__assert_fail@plt+0x4fbc>
   15f74:	add	r1, pc, #0
   15f78:	ldr	pc, [r1, r0, lsl #2]
   15f7c:	andeq	r6, r1, ip, lsr r0
   15f80:	andeq	r6, r1, r4, ror r0
   15f84:	andeq	r6, r1, ip, lsr r0
   15f88:	andeq	r6, r1, r4, ror r0
   15f8c:	andeq	r6, r1, r4, ror r0
   15f90:	andeq	r6, r1, r4, ror r0
   15f94:	andeq	r6, r1, ip, lsr r0
   15f98:	andeq	r6, r1, r4, ror r0
   15f9c:	andeq	r6, r1, ip, lsr r0
   15fa0:	andeq	r6, r1, r4, ror r0
   15fa4:	andeq	r6, r1, r4, ror r0
   15fa8:	andeq	r6, r1, ip, lsr r0
   15fac:	andeq	r6, r1, r4, ror r0
   15fb0:	andeq	r6, r1, r4, ror r0
   15fb4:	andeq	r6, r1, r4, ror r0
   15fb8:	andeq	r6, r1, ip, lsr r0
   15fbc:	andeq	r6, r1, r4, ror r0
   15fc0:	andeq	r6, r1, r4, ror r0
   15fc4:	andeq	r6, r1, r4, ror r0
   15fc8:	andeq	r6, r1, r4, ror r0
   15fcc:	andeq	r6, r1, ip, lsr r0
   15fd0:	andeq	r6, r1, ip, lsr r0
   15fd4:	andeq	r6, r1, r4, ror r0
   15fd8:	andeq	r6, r1, r4, ror r0
   15fdc:	andeq	r6, r1, r4, ror r0
   15fe0:	andeq	r6, r1, r4, ror r0
   15fe4:	andeq	r6, r1, r4, ror r0
   15fe8:	andeq	r6, r1, r4, ror r0
   15fec:	andeq	r6, r1, r4, ror r0
   15ff0:	andeq	r6, r1, r4, ror r0
   15ff4:	andeq	r6, r1, r4, ror r0
   15ff8:	andeq	r6, r1, r4, ror r0
   15ffc:	andeq	r6, r1, r4, ror r0
   16000:	andeq	r6, r1, r4, ror r0
   16004:	andeq	r6, r1, ip, lsr r0
   16008:	andeq	r6, r1, r4, ror r0
   1600c:	andeq	r6, r1, r4, ror r0
   16010:	andeq	r6, r1, r4, ror r0
   16014:	andeq	r6, r1, ip, lsr r0
   16018:	andeq	r6, r1, r4, ror r0
   1601c:	andeq	r6, r1, ip, lsr r0
   16020:	andeq	r6, r1, r4, ror r0
   16024:	andeq	r6, r1, r4, ror r0
   16028:	andeq	r6, r1, r4, ror r0
   1602c:	andeq	r6, r1, r4, ror r0
   16030:	andeq	r6, r1, r4, ror r0
   16034:	andeq	r6, r1, r4, ror r0
   16038:	andeq	r6, r1, ip, lsr r0
   1603c:	mov	r0, sl
   16040:	mov	r1, #48	; 0x30
   16044:	bl	10fd4 <strchr@plt>
   16048:	cmp	r0, #0
   1604c:	beq	16070 <__assert_fail@plt+0x4fb8>
   16050:	ldr	r1, [sp, #32]
   16054:	ldrb	r0, [r1, #1]
   16058:	cmp	r0, #66	; 0x42
   1605c:	cmpne	r0, #68	; 0x44
   16060:	bne	16228 <__assert_fail@plt+0x5170>
   16064:	mov	r5, #1000	; 0x3e8
   16068:	mov	r0, #2
   1606c:	str	r0, [sp, #28]
   16070:	mov	r3, #0
   16074:	sub	r0, r4, #66	; 0x42
   16078:	cmp	r0, #53	; 0x35
   1607c:	bhi	1621c <__assert_fail@plt+0x5164>
   16080:	add	r1, pc, #0
   16084:	ldr	pc, [r1, r0, lsl #2]
   16088:	andeq	r6, r1, r4, lsr #11
   1608c:	andeq	r6, r1, ip, lsl r2
   16090:	andeq	r6, r1, ip, lsl r2
   16094:	andeq	r6, r1, ip, asr #11
   16098:	andeq	r6, r1, ip, lsl r2
   1609c:	andeq	r6, r1, r0, ror #2
   160a0:	andeq	r6, r1, ip, lsl r2
   160a4:	andeq	r6, r1, ip, lsl r2
   160a8:	andeq	r6, r1, ip, lsl r2
   160ac:	andeq	r6, r1, ip, asr #4
   160b0:	andeq	r6, r1, ip, lsl r2
   160b4:	muleq	r1, r4, r2
   160b8:	andeq	r6, r1, ip, lsl r2
   160bc:	andeq	r6, r1, ip, lsl r2
   160c0:	andeq	r6, r1, r4, lsr #14
   160c4:	andeq	r6, r1, ip, lsl r2
   160c8:	andeq	r6, r1, ip, lsl r2
   160cc:	andeq	r6, r1, ip, lsl r2
   160d0:	andeq	r6, r1, r0, lsr #6
   160d4:	andeq	r6, r1, ip, lsl r2
   160d8:	andeq	r6, r1, ip, lsl r2
   160dc:	andeq	r6, r1, ip, lsl r2
   160e0:	andeq	r6, r1, ip, lsl r2
   160e4:	andeq	r6, r1, ip, asr #16
   160e8:	andeq	r6, r1, r8, lsl #8
   160ec:	andeq	r6, r1, ip, lsl r2
   160f0:	andeq	r6, r1, ip, lsl r2
   160f4:	andeq	r6, r1, ip, lsl r2
   160f8:	andeq	r6, r1, ip, lsl r2
   160fc:	andeq	r6, r1, ip, lsl r2
   16100:	andeq	r6, r1, ip, lsl r2
   16104:	andeq	r6, r1, ip, lsl r2
   16108:	andeq	r6, r1, r4, lsr #20
   1610c:	andeq	r6, r1, ip, ror sl
   16110:	andeq	r6, r1, ip, lsl r2
   16114:	andeq	r6, r1, ip, lsl r2
   16118:	andeq	r6, r1, ip, lsl r2
   1611c:	andeq	r6, r1, r0, ror #2
   16120:	andeq	r6, r1, ip, lsl r2
   16124:	andeq	r6, r1, ip, lsl r2
   16128:	andeq	r6, r1, ip, lsl r2
   1612c:	andeq	r6, r1, ip, asr #4
   16130:	andeq	r6, r1, ip, lsl r2
   16134:	muleq	r1, r4, r2
   16138:	andeq	r6, r1, ip, lsl r2
   1613c:	andeq	r6, r1, ip, lsl r2
   16140:	andeq	r6, r1, ip, lsl r2
   16144:	andeq	r6, r1, ip, lsl r2
   16148:	andeq	r6, r1, ip, lsl r2
   1614c:	andeq	r6, r1, ip, lsl r2
   16150:	andeq	r6, r1, r0, lsr #6
   16154:	andeq	r6, r1, ip, lsl r2
   16158:	andeq	r6, r1, ip, lsl r2
   1615c:	andeq	r6, r1, r8, asr sl
   16160:	mvn	r0, #0
   16164:	mvn	r1, #0
   16168:	mov	r2, r5
   1616c:	mov	sl, r3
   16170:	bl	17084 <__assert_fail@plt+0x5fcc>
   16174:	subs	r3, r0, r6
   16178:	umull	r4, r2, r6, r5
   1617c:	mov	lr, #0
   16180:	str	r1, [sp, #20]
   16184:	sbcs	r3, r1, r7
   16188:	movwcc	lr, #1
   1618c:	mla	ip, r6, sl, r2
   16190:	mov	r2, r1
   16194:	mov	r2, #0
   16198:	cmp	lr, #0
   1619c:	mla	r7, r7, r5, ip
   161a0:	mvnne	r4, #0
   161a4:	mvnne	r7, #0
   161a8:	subs	r6, r0, r4
   161ac:	sbcs	r6, r1, r7
   161b0:	umull	r3, r6, r4, r5
   161b4:	movwcc	r2, #1
   161b8:	cmp	r2, #0
   161bc:	mvnne	r3, #0
   161c0:	cmp	r2, #0
   161c4:	str	r6, [sp, #16]
   161c8:	umull	r6, ip, r3, r5
   161cc:	mla	r1, r3, sl, ip
   161d0:	ldr	ip, [sp, #16]
   161d4:	str	r1, [sp, #12]
   161d8:	mla	r4, r4, sl, ip
   161dc:	mla	r4, r7, r5, r4
   161e0:	mvnne	r4, #0
   161e4:	subs	r0, r0, r3
   161e8:	ldr	r0, [sp, #20]
   161ec:	ldr	r7, [sp, #12]
   161f0:	sbcs	r0, r0, r4
   161f4:	mov	r0, #0
   161f8:	mla	r7, r4, r5, r7
   161fc:	movwcc	r0, #1
   16200:	cmp	r0, #0
   16204:	mov	r1, r0
   16208:	orr	r0, lr, r2
   1620c:	mvnne	r7, #0
   16210:	mvnne	r6, #0
   16214:	orr	r3, r0, r1
   16218:	b	16a7c <__assert_fail@plt+0x59c4>
   1621c:	ldr	r0, [sp, #36]	; 0x24
   16220:	orr	r8, r8, #2
   16224:	b	16aa0 <__assert_fail@plt+0x59e8>
   16228:	cmp	r0, #105	; 0x69
   1622c:	mov	r3, #0
   16230:	bne	16074 <__assert_fail@plt+0x4fbc>
   16234:	ldrb	r0, [r1, #2]
   16238:	mov	r1, #1
   1623c:	cmp	r0, #66	; 0x42
   16240:	movweq	r1, #3
   16244:	str	r1, [sp, #28]
   16248:	b	16074 <__assert_fail@plt+0x4fbc>
   1624c:	mvn	r0, #0
   16250:	mvn	r1, #0
   16254:	mov	r2, r5
   16258:	mov	r4, r3
   1625c:	bl	17084 <__assert_fail@plt+0x5fcc>
   16260:	subs	r0, r0, r6
   16264:	mov	r2, #0
   16268:	sbcs	r0, r1, r7
   1626c:	umull	r0, r1, r6, r5
   16270:	movwcc	r2, #1
   16274:	cmp	r2, #0
   16278:	mla	r1, r6, r4, r1
   1627c:	mov	r3, r2
   16280:	mvnne	r0, #0
   16284:	mla	r7, r7, r5, r1
   16288:	mvnne	r7, #0
   1628c:	mov	r6, r0
   16290:	b	16a7c <__assert_fail@plt+0x59c4>
   16294:	mvn	r0, #0
   16298:	mvn	r1, #0
   1629c:	mov	r2, r5
   162a0:	str	r3, [sp, #24]
   162a4:	bl	17084 <__assert_fail@plt+0x5fcc>
   162a8:	subs	r3, r0, r6
   162ac:	mov	ip, r0
   162b0:	umull	r4, r0, r6, r5
   162b4:	mov	sl, #0
   162b8:	sbcs	r3, r1, r7
   162bc:	mov	r3, #0
   162c0:	movwcc	r3, #1
   162c4:	cmp	r3, #0
   162c8:	str	r0, [sp, #20]
   162cc:	ldr	r0, [sp, #24]
   162d0:	mvnne	r4, #0
   162d4:	cmp	r3, #0
   162d8:	umull	lr, r2, r4, r5
   162dc:	mla	r2, r4, r0, r2
   162e0:	str	r2, [sp, #16]
   162e4:	ldr	r2, [sp, #20]
   162e8:	mla	r6, r6, r0, r2
   162ec:	ldr	r0, [sp, #16]
   162f0:	mla	r6, r7, r5, r6
   162f4:	mvnne	r6, #0
   162f8:	mla	r7, r6, r5, r0
   162fc:	subs	r0, ip, r4
   16300:	sbcs	r0, r1, r6
   16304:	movwcc	sl, #1
   16308:	cmp	sl, #0
   1630c:	orr	r3, r3, sl
   16310:	mvnne	lr, #0
   16314:	mvnne	r7, #0
   16318:	mov	r6, lr
   1631c:	b	16a7c <__assert_fail@plt+0x59c4>
   16320:	mvn	r0, #0
   16324:	mvn	r1, #0
   16328:	mov	r2, r5
   1632c:	mov	sl, r3
   16330:	bl	17084 <__assert_fail@plt+0x5fcc>
   16334:	subs	r3, r0, r6
   16338:	mov	ip, r1
   1633c:	umull	r2, lr, r6, r5
   16340:	str	r0, [sp, #20]
   16344:	sbcs	r3, r1, r7
   16348:	mov	r1, #0
   1634c:	str	ip, [sp, #16]
   16350:	movwcc	r1, #1
   16354:	mla	r6, r6, sl, lr
   16358:	mov	lr, #0
   1635c:	cmp	r1, #0
   16360:	mla	r7, r7, r5, r6
   16364:	mvnne	r2, #0
   16368:	cmp	r1, #0
   1636c:	umull	r3, r4, r2, r5
   16370:	mvnne	r7, #0
   16374:	mla	r4, r2, sl, r4
   16378:	subs	r2, r0, r2
   1637c:	sbcs	r2, ip, r7
   16380:	mla	r4, r7, r5, r4
   16384:	mov	r2, #0
   16388:	movwcc	lr, #1
   1638c:	cmp	lr, #0
   16390:	mvnne	r3, #0
   16394:	mvnne	r4, #0
   16398:	subs	r7, r0, r3
   1639c:	mov	r0, r5
   163a0:	sbcs	r7, ip, r4
   163a4:	umull	r5, r7, r3, r5
   163a8:	movwcc	r2, #1
   163ac:	cmp	r2, #0
   163b0:	mla	r3, r3, sl, r7
   163b4:	mvnne	r5, #0
   163b8:	cmp	r2, #0
   163bc:	mla	r3, r4, r0, r3
   163c0:	umull	r6, ip, r5, r0
   163c4:	mvnne	r3, #0
   163c8:	mla	ip, r5, sl, ip
   163cc:	mla	r7, r3, r0, ip
   163d0:	ldr	r0, [sp, #20]
   163d4:	subs	r0, r0, r5
   163d8:	ldr	r0, [sp, #16]
   163dc:	sbcs	r0, r0, r3
   163e0:	mov	r0, #0
   163e4:	movwcc	r0, #1
   163e8:	cmp	r0, #0
   163ec:	mov	r3, r0
   163f0:	orr	r0, r1, lr
   163f4:	orr	r0, r0, r2
   163f8:	mvnne	r7, #0
   163fc:	mvnne	r6, #0
   16400:	orr	r3, r0, r3
   16404:	b	16a7c <__assert_fail@plt+0x59c4>
   16408:	mvn	r0, #0
   1640c:	mvn	r1, #0
   16410:	mov	r2, r5
   16414:	mov	r4, r3
   16418:	str	r3, [sp, #24]
   1641c:	bl	17084 <__assert_fail@plt+0x5fcc>
   16420:	umull	r3, r2, r6, r5
   16424:	mla	r2, r6, r4, r2
   16428:	subs	r6, r0, r6
   1642c:	sbcs	r6, r1, r7
   16430:	mov	r6, #0
   16434:	mla	ip, r7, r5, r2
   16438:	ldr	r2, [sp, #24]
   1643c:	movwcc	r6, #1
   16440:	cmp	r6, #0
   16444:	str	r6, [sp, #20]
   16448:	mov	r6, #0
   1644c:	mvnne	r3, #0
   16450:	mvnne	ip, #0
   16454:	subs	r4, r0, r3
   16458:	umull	r7, lr, r3, r5
   1645c:	sbcs	r4, r1, ip
   16460:	movwcc	r6, #1
   16464:	mla	r3, r3, r2, lr
   16468:	cmp	r6, #0
   1646c:	str	r6, [sp, #16]
   16470:	mvnne	r7, #0
   16474:	cmp	r6, #0
   16478:	umull	sl, r4, r7, r5
   1647c:	mla	r4, r7, r2, r4
   16480:	mla	r2, ip, r5, r3
   16484:	mvnne	r2, #0
   16488:	subs	r3, r0, r7
   1648c:	mov	ip, #0
   16490:	mla	r6, r2, r5, r4
   16494:	sbcs	r2, r1, r2
   16498:	mov	r4, r0
   1649c:	mov	r0, #0
   164a0:	movwcc	r0, #1
   164a4:	mov	r3, r4
   164a8:	cmp	r0, #0
   164ac:	str	r0, [sp, #12]
   164b0:	mov	r0, r1
   164b4:	str	r3, [sp, #4]
   164b8:	mvnne	sl, #0
   164bc:	mvnne	r6, #0
   164c0:	str	r0, [sp, #8]
   164c4:	subs	r2, r4, sl
   164c8:	ldr	r4, [sp, #24]
   164cc:	sbcs	r2, r1, r6
   164d0:	umull	r7, r2, sl, r5
   164d4:	movwcc	ip, #1
   164d8:	cmp	ip, #0
   164dc:	mvnne	r7, #0
   164e0:	mla	r2, sl, r4, r2
   164e4:	cmp	ip, #0
   164e8:	mov	sl, #0
   164ec:	umull	r1, lr, r7, r5
   164f0:	mla	r2, r6, r5, r2
   164f4:	mvnne	r2, #0
   164f8:	subs	r6, r3, r7
   164fc:	mla	lr, r7, r4, lr
   16500:	mla	lr, r2, r5, lr
   16504:	sbcs	r2, r0, r2
   16508:	mov	r2, #0
   1650c:	movwcc	sl, #1
   16510:	cmp	sl, #0
   16514:	mvnne	r1, #0
   16518:	mvnne	lr, #0
   1651c:	subs	r6, r3, r1
   16520:	ldr	r3, [sp, #24]
   16524:	sbcs	r6, r0, lr
   16528:	umull	r0, r7, r1, r5
   1652c:	movwcc	r2, #1
   16530:	cmp	r2, #0
   16534:	mvnne	r0, #0
   16538:	mla	r1, r1, r3, r7
   1653c:	cmp	r2, #0
   16540:	umull	r6, r4, r0, r5
   16544:	mla	r1, lr, r5, r1
   16548:	mvnne	r1, #0
   1654c:	mla	r4, r0, r3, r4
   16550:	ldr	r3, [sp, #4]
   16554:	mla	r7, r1, r5, r4
   16558:	ldr	r5, [sp, #16]
   1655c:	subs	r0, r3, r0
   16560:	ldr	r0, [sp, #8]
   16564:	sbcs	r0, r0, r1
   16568:	mov	r0, #0
   1656c:	movwcc	r0, #1
   16570:	cmp	r0, #0
   16574:	mov	r1, r0
   16578:	ldr	r0, [sp, #20]
   1657c:	mvnne	r7, #0
   16580:	mvnne	r6, #0
   16584:	orr	r0, r0, r5
   16588:	ldr	r5, [sp, #12]
   1658c:	orr	r0, r0, r5
   16590:	orr	r0, r0, ip
   16594:	orr	r0, r0, sl
   16598:	orr	r0, r0, r2
   1659c:	orr	r0, r0, r1
   165a0:	b	16a1c <__assert_fail@plt+0x5964>
   165a4:	mov	r1, #0
   165a8:	lsl	r2, r7, #10
   165ac:	lsl	r0, r6, #10
   165b0:	lsr	r3, r7, #22
   165b4:	cmp	r1, r7, lsr #22
   165b8:	orr	r2, r2, r6, lsr #22
   165bc:	mvnne	r0, #0
   165c0:	movwne	r3, #1
   165c4:	cmp	r1, r7, lsr #22
   165c8:	b	16a48 <__assert_fail@plt+0x5990>
   165cc:	mvn	r0, #0
   165d0:	mvn	r1, #0
   165d4:	mov	r2, r5
   165d8:	mov	sl, r3
   165dc:	bl	17084 <__assert_fail@plt+0x5fcc>
   165e0:	subs	r2, r0, r6
   165e4:	mov	ip, r0
   165e8:	mov	r0, #0
   165ec:	sbcs	r2, r1, r7
   165f0:	umull	r4, r2, r6, r5
   165f4:	movwcc	r0, #1
   165f8:	cmp	r0, #0
   165fc:	mla	r2, r6, sl, r2
   16600:	str	r0, [sp, #20]
   16604:	mvnne	r4, #0
   16608:	cmp	r0, #0
   1660c:	mla	r2, r7, r5, r2
   16610:	mov	r0, #0
   16614:	umull	lr, r3, r4, r5
   16618:	mvnne	r2, #0
   1661c:	mla	r3, r4, sl, r3
   16620:	mla	r6, r2, r5, r3
   16624:	subs	r3, ip, r4
   16628:	mov	r3, r1
   1662c:	sbcs	r2, r1, r2
   16630:	str	r3, [sp, #8]
   16634:	movwcc	r0, #1
   16638:	cmp	r0, #0
   1663c:	str	r0, [sp, #16]
   16640:	mov	r0, ip
   16644:	mvnne	lr, #0
   16648:	mvnne	r6, #0
   1664c:	str	r0, [sp, #12]
   16650:	subs	r2, ip, lr
   16654:	umull	r7, r4, lr, r5
   16658:	sbcs	r2, r1, r6
   1665c:	mov	r2, #0
   16660:	movwcc	r2, #1
   16664:	mla	r4, lr, sl, r4
   16668:	cmp	r2, #0
   1666c:	mla	r6, r6, r5, r4
   16670:	mov	r4, #0
   16674:	mvnne	r7, #0
   16678:	cmp	r2, #0
   1667c:	umull	r1, ip, r7, r5
   16680:	mvnne	r6, #0
   16684:	mla	ip, r7, sl, ip
   16688:	subs	r7, r0, r7
   1668c:	sbcs	r7, r3, r6
   16690:	mla	lr, r6, r5, ip
   16694:	mov	ip, #0
   16698:	movwcc	ip, #1
   1669c:	cmp	ip, #0
   166a0:	mvnne	r1, #0
   166a4:	mvnne	lr, #0
   166a8:	subs	r7, r0, r1
   166ac:	sbcs	r7, r3, lr
   166b0:	umull	r0, r7, r1, r5
   166b4:	movwcc	r4, #1
   166b8:	cmp	r4, #0
   166bc:	mla	r1, r1, sl, r7
   166c0:	mvnne	r0, #0
   166c4:	cmp	r4, #0
   166c8:	mla	r1, lr, r5, r1
   166cc:	umull	r6, r3, r0, r5
   166d0:	mvnne	r1, #0
   166d4:	mla	r3, r0, sl, r3
   166d8:	mla	r7, r1, r5, r3
   166dc:	ldr	r3, [sp, #12]
   166e0:	subs	r0, r3, r0
   166e4:	ldr	r0, [sp, #8]
   166e8:	ldr	r3, [sp, #16]
   166ec:	sbcs	r0, r0, r1
   166f0:	mov	r0, #0
   166f4:	movwcc	r0, #1
   166f8:	cmp	r0, #0
   166fc:	mov	r1, r0
   16700:	ldr	r0, [sp, #20]
   16704:	mvnne	r7, #0
   16708:	mvnne	r6, #0
   1670c:	orr	r0, r0, r3
   16710:	orr	r0, r0, r2
   16714:	orr	r0, r0, ip
   16718:	orr	r0, r0, r4
   1671c:	orr	r3, r0, r1
   16720:	b	16a7c <__assert_fail@plt+0x59c4>
   16724:	mvn	r0, #0
   16728:	mvn	r1, #0
   1672c:	mov	r2, r5
   16730:	mov	sl, r3
   16734:	bl	17084 <__assert_fail@plt+0x5fcc>
   16738:	umull	r3, r2, r6, r5
   1673c:	mov	lr, r1
   16740:	mov	r1, r0
   16744:	mla	r2, r6, sl, r2
   16748:	subs	r6, r0, r6
   1674c:	mov	r0, #0
   16750:	sbcs	r6, lr, r7
   16754:	mla	r2, r7, r5, r2
   16758:	movwcc	r0, #1
   1675c:	cmp	r0, #0
   16760:	str	r0, [sp, #20]
   16764:	mov	r0, r1
   16768:	mvnne	r3, #0
   1676c:	mvnne	r2, #0
   16770:	str	r0, [sp, #16]
   16774:	subs	r4, r1, r3
   16778:	umull	r7, ip, r3, r5
   1677c:	sbcs	r4, lr, r2
   16780:	mov	r4, #0
   16784:	movwcc	r4, #1
   16788:	mla	r3, r3, sl, ip
   1678c:	mov	ip, #0
   16790:	cmp	r4, #0
   16794:	mla	r2, r2, r5, r3
   16798:	mvnne	r7, #0
   1679c:	cmp	r4, #0
   167a0:	umull	r1, r6, r7, r5
   167a4:	mvnne	r2, #0
   167a8:	mla	r6, r7, sl, r6
   167ac:	mla	r3, r2, r5, r6
   167b0:	subs	r6, r0, r7
   167b4:	sbcs	r2, lr, r2
   167b8:	mov	r2, #0
   167bc:	movwcc	ip, #1
   167c0:	cmp	ip, #0
   167c4:	mvnne	r1, #0
   167c8:	mvnne	r3, #0
   167cc:	subs	r6, r0, r1
   167d0:	sbcs	r6, lr, r3
   167d4:	umull	r0, r6, r1, r5
   167d8:	movwcc	r2, #1
   167dc:	cmp	r2, #0
   167e0:	mvnne	r0, #0
   167e4:	cmp	r2, #0
   167e8:	str	r6, [sp, #12]
   167ec:	umull	r6, r7, r0, r5
   167f0:	mla	r7, r0, sl, r7
   167f4:	str	r7, [sp, #8]
   167f8:	ldr	r7, [sp, #12]
   167fc:	mla	r1, r1, sl, r7
   16800:	mla	r1, r3, r5, r1
   16804:	ldr	r3, [sp, #8]
   16808:	mvnne	r1, #0
   1680c:	mla	r7, r1, r5, r3
   16810:	ldr	r3, [sp, #16]
   16814:	subs	r0, r3, r0
   16818:	sbcs	r0, lr, r1
   1681c:	mov	r0, #0
   16820:	movwcc	r0, #1
   16824:	cmp	r0, #0
   16828:	mov	r1, r0
   1682c:	ldr	r0, [sp, #20]
   16830:	mvnne	r7, #0
   16834:	mvnne	r6, #0
   16838:	orr	r0, r0, r4
   1683c:	orr	r0, r0, ip
   16840:	orr	r0, r0, r2
   16844:	orr	r3, r0, r1
   16848:	b	16a7c <__assert_fail@plt+0x59c4>
   1684c:	mvn	r0, #0
   16850:	mvn	r1, #0
   16854:	mov	r2, r5
   16858:	mov	sl, r3
   1685c:	bl	17084 <__assert_fail@plt+0x5fcc>
   16860:	mov	lr, r0
   16864:	subs	r0, r0, r6
   16868:	mov	r2, #0
   1686c:	mov	ip, r1
   16870:	str	sl, [sp, #24]
   16874:	sbcs	r0, r1, r7
   16878:	umull	r3, r1, r6, r5
   1687c:	str	lr, [sp, #4]
   16880:	movwcc	r2, #1
   16884:	cmp	r2, #0
   16888:	mla	r6, r6, sl, r1
   1688c:	mov	r1, #0
   16890:	str	r2, [sp, #20]
   16894:	mvnne	r3, #0
   16898:	cmp	r2, #0
   1689c:	mla	r7, r7, r5, r6
   168a0:	mov	r2, #0
   168a4:	umull	r0, r4, r3, r5
   168a8:	mvnne	r7, #0
   168ac:	mla	r4, r3, sl, r4
   168b0:	subs	r3, lr, r3
   168b4:	sbcs	r3, ip, r7
   168b8:	mla	r4, r7, r5, r4
   168bc:	movwcc	r1, #1
   168c0:	cmp	r1, #0
   168c4:	str	r1, [sp, #16]
   168c8:	mvnne	r0, #0
   168cc:	mvnne	r4, #0
   168d0:	subs	r3, lr, r0
   168d4:	sbcs	r3, ip, r4
   168d8:	umull	r6, r3, r0, r5
   168dc:	movwcc	r2, #1
   168e0:	cmp	r2, #0
   168e4:	mla	r0, r0, sl, r3
   168e8:	str	r2, [sp, #12]
   168ec:	mvnne	r6, #0
   168f0:	cmp	r2, #0
   168f4:	mla	r0, r4, r5, r0
   168f8:	ldr	r4, [sp, #24]
   168fc:	umull	r1, r7, r6, r5
   16900:	mvnne	r0, #0
   16904:	subs	r3, lr, r6
   16908:	mov	r3, ip
   1690c:	str	r3, [sp]
   16910:	mla	r7, r6, sl, r7
   16914:	mla	r7, r0, r5, r7
   16918:	sbcs	r0, ip, r0
   1691c:	mov	r0, #0
   16920:	movwcc	r0, #1
   16924:	cmp	r0, #0
   16928:	str	r0, [sp, #8]
   1692c:	mvnne	r1, #0
   16930:	mvnne	r7, #0
   16934:	subs	r0, lr, r1
   16938:	sbcs	r0, ip, r7
   1693c:	mov	ip, #0
   16940:	umull	r6, r0, r1, r5
   16944:	movwcc	ip, #1
   16948:	cmp	ip, #0
   1694c:	mla	r1, r1, r4, r0
   16950:	mov	r0, lr
   16954:	mvnne	r6, #0
   16958:	cmp	ip, #0
   1695c:	mla	r1, r7, r5, r1
   16960:	umull	r2, sl, r6, r5
   16964:	mvnne	r1, #0
   16968:	mla	sl, r6, r4, sl
   1696c:	subs	r6, lr, r6
   16970:	mov	lr, #0
   16974:	mla	r7, r1, r5, sl
   16978:	sbcs	r1, r3, r1
   1697c:	ldr	r1, [sp, #24]
   16980:	movwcc	lr, #1
   16984:	cmp	lr, #0
   16988:	mvnne	r2, #0
   1698c:	mvnne	r7, #0
   16990:	subs	r6, r0, r2
   16994:	umull	r0, sl, r2, r5
   16998:	sbcs	r6, r3, r7
   1699c:	mov	r3, #0
   169a0:	movwcc	r3, #1
   169a4:	mla	r2, r2, r1, sl
   169a8:	cmp	r3, #0
   169ac:	mla	r2, r7, r5, r2
   169b0:	mvnne	r0, #0
   169b4:	cmp	r3, #0
   169b8:	umull	r6, r4, r0, r5
   169bc:	mvnne	r2, #0
   169c0:	mla	r4, r0, r1, r4
   169c4:	ldr	r1, [sp, #4]
   169c8:	mla	r7, r2, r5, r4
   169cc:	ldr	r5, [sp, #16]
   169d0:	subs	r0, r1, r0
   169d4:	ldr	r0, [sp]
   169d8:	sbcs	r0, r0, r2
   169dc:	mov	r0, #0
   169e0:	movwcc	r0, #1
   169e4:	cmp	r0, #0
   169e8:	mov	r2, r0
   169ec:	ldr	r0, [sp, #20]
   169f0:	mvnne	r7, #0
   169f4:	mvnne	r6, #0
   169f8:	orr	r0, r0, r5
   169fc:	ldr	r5, [sp, #12]
   16a00:	orr	r0, r0, r5
   16a04:	ldr	r5, [sp, #8]
   16a08:	orr	r0, r0, r5
   16a0c:	orr	r0, r0, ip
   16a10:	orr	r0, r0, lr
   16a14:	orr	r0, r0, r3
   16a18:	orr	r0, r0, r2
   16a1c:	and	r3, r0, #1
   16a20:	b	16a7c <__assert_fail@plt+0x59c4>
   16a24:	mov	r1, #0
   16a28:	lsl	r2, r7, #9
   16a2c:	lsl	r0, r6, #9
   16a30:	lsr	r3, r7, #23
   16a34:	cmp	r1, r7, lsr #23
   16a38:	orr	r2, r2, r6, lsr #23
   16a3c:	mvnne	r0, #0
   16a40:	movwne	r3, #1
   16a44:	cmp	r1, r7, lsr #23
   16a48:	mvnne	r2, #0
   16a4c:	mov	r6, r0
   16a50:	mov	r7, r2
   16a54:	b	16a7c <__assert_fail@plt+0x59c4>
   16a58:	lsl	r1, r7, #1
   16a5c:	cmp	r7, #0
   16a60:	lsl	r0, r6, #1
   16a64:	lsr	r3, r7, #31
   16a68:	orr	r1, r1, r6, lsr #31
   16a6c:	mvnmi	r0, #0
   16a70:	mvnmi	r1, #0
   16a74:	mov	r6, r0
   16a78:	mov	r7, r1
   16a7c:	ldr	r1, [sp, #32]
   16a80:	ldr	r2, [sp, #28]
   16a84:	orr	r8, r3, r8
   16a88:	add	r0, r1, r2
   16a8c:	str	r0, [r9]
   16a90:	ldrb	r0, [r1, r2]
   16a94:	cmp	r0, #0
   16a98:	orrne	r8, r8, #2
   16a9c:	ldr	r0, [sp, #36]	; 0x24
   16aa0:	strd	r6, [r0]
   16aa4:	mov	r0, r8
   16aa8:	sub	sp, fp, #28
   16aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ab0:	movw	r0, #32701	; 0x7fbd
   16ab4:	movw	r1, #32739	; 0x7fe3
   16ab8:	movw	r3, #32755	; 0x7ff3
   16abc:	mov	r2, #85	; 0x55
   16ac0:	movt	r0, #1
   16ac4:	movt	r1, #1
   16ac8:	movt	r3, #1
   16acc:	bl	110b8 <__assert_fail@plt>
   16ad0:	clz	r2, r1
   16ad4:	clz	r3, r0
   16ad8:	lsr	r2, r2, #5
   16adc:	lsr	r3, r3, #5
   16ae0:	orrs	r2, r3, r2
   16ae4:	movwne	r1, #1
   16ae8:	movwne	r0, #1
   16aec:	cmp	r1, #0
   16af0:	beq	16b20 <__assert_fail@plt+0x5a68>
   16af4:	mvn	r2, #-2147483648	; 0x80000000
   16af8:	udiv	r2, r2, r1
   16afc:	cmp	r2, r0
   16b00:	bcs	16b20 <__assert_fail@plt+0x5a68>
   16b04:	push	{fp, lr}
   16b08:	mov	fp, sp
   16b0c:	bl	10fec <__errno_location@plt>
   16b10:	mov	r1, #12
   16b14:	str	r1, [r0]
   16b18:	mov	r0, #0
   16b1c:	pop	{fp, pc}
   16b20:	b	10e3c <calloc@plt>
   16b24:	cmp	r0, #0
   16b28:	movweq	r0, #1
   16b2c:	cmn	r0, #1
   16b30:	ble	16b38 <__assert_fail@plt+0x5a80>
   16b34:	b	10f68 <malloc@plt>
   16b38:	push	{fp, lr}
   16b3c:	mov	fp, sp
   16b40:	bl	10fec <__errno_location@plt>
   16b44:	mov	r1, #12
   16b48:	str	r1, [r0]
   16b4c:	mov	r0, #0
   16b50:	pop	{fp, pc}
   16b54:	push	{fp, lr}
   16b58:	mov	fp, sp
   16b5c:	cmp	r0, #0
   16b60:	beq	16b7c <__assert_fail@plt+0x5ac4>
   16b64:	cmp	r1, #0
   16b68:	beq	16b88 <__assert_fail@plt+0x5ad0>
   16b6c:	cmn	r1, #1
   16b70:	ble	16b94 <__assert_fail@plt+0x5adc>
   16b74:	pop	{fp, lr}
   16b78:	b	10ed8 <realloc@plt>
   16b7c:	mov	r0, r1
   16b80:	pop	{fp, lr}
   16b84:	b	16b24 <__assert_fail@plt+0x5a6c>
   16b88:	bl	1313c <__assert_fail@plt+0x2084>
   16b8c:	mov	r0, #0
   16b90:	pop	{fp, pc}
   16b94:	bl	10fec <__errno_location@plt>
   16b98:	mov	r1, #12
   16b9c:	str	r1, [r0]
   16ba0:	mov	r0, #0
   16ba4:	pop	{fp, pc}
   16ba8:	push	{r4, r5, r6, sl, fp, lr}
   16bac:	add	fp, sp, #16
   16bb0:	mov	r4, r0
   16bb4:	bl	10f38 <__fpending@plt>
   16bb8:	ldr	r6, [r4]
   16bbc:	mov	r5, r0
   16bc0:	mov	r0, r4
   16bc4:	bl	16c2c <__assert_fail@plt+0x5b74>
   16bc8:	tst	r6, #32
   16bcc:	bne	16c04 <__assert_fail@plt+0x5b4c>
   16bd0:	cmp	r0, #0
   16bd4:	mov	r4, r0
   16bd8:	mvnne	r4, #0
   16bdc:	cmp	r5, #0
   16be0:	bne	16c10 <__assert_fail@plt+0x5b58>
   16be4:	cmp	r0, #0
   16be8:	beq	16c10 <__assert_fail@plt+0x5b58>
   16bec:	bl	10fec <__errno_location@plt>
   16bf0:	ldr	r0, [r0]
   16bf4:	subs	r4, r0, #9
   16bf8:	mvnne	r4, #0
   16bfc:	mov	r0, r4
   16c00:	pop	{r4, r5, r6, sl, fp, pc}
   16c04:	mvn	r4, #0
   16c08:	cmp	r0, #0
   16c0c:	beq	16c18 <__assert_fail@plt+0x5b60>
   16c10:	mov	r0, r4
   16c14:	pop	{r4, r5, r6, sl, fp, pc}
   16c18:	bl	10fec <__errno_location@plt>
   16c1c:	mov	r1, #0
   16c20:	str	r1, [r0]
   16c24:	mov	r0, r4
   16c28:	pop	{r4, r5, r6, sl, fp, pc}
   16c2c:	push	{r4, r5, r6, sl, fp, lr}
   16c30:	add	fp, sp, #16
   16c34:	sub	sp, sp, #8
   16c38:	mov	r4, r0
   16c3c:	bl	1101c <fileno@plt>
   16c40:	cmn	r0, #1
   16c44:	ble	16cb8 <__assert_fail@plt+0x5c00>
   16c48:	mov	r0, r4
   16c4c:	bl	10f80 <__freading@plt>
   16c50:	cmp	r0, #0
   16c54:	beq	16c80 <__assert_fail@plt+0x5bc8>
   16c58:	mov	r0, r4
   16c5c:	bl	1101c <fileno@plt>
   16c60:	mov	r1, #1
   16c64:	mov	r2, #0
   16c68:	mov	r3, #0
   16c6c:	str	r1, [sp]
   16c70:	bl	10f20 <lseek64@plt>
   16c74:	and	r0, r0, r1
   16c78:	cmn	r0, #1
   16c7c:	beq	16cb8 <__assert_fail@plt+0x5c00>
   16c80:	mov	r0, r4
   16c84:	bl	16cc8 <__assert_fail@plt+0x5c10>
   16c88:	cmp	r0, #0
   16c8c:	beq	16cb8 <__assert_fail@plt+0x5c00>
   16c90:	bl	10fec <__errno_location@plt>
   16c94:	ldr	r6, [r0]
   16c98:	mov	r5, r0
   16c9c:	mov	r0, r4
   16ca0:	bl	11040 <fclose@plt>
   16ca4:	cmp	r6, #0
   16ca8:	strne	r6, [r5]
   16cac:	mvnne	r0, #0
   16cb0:	sub	sp, fp, #16
   16cb4:	pop	{r4, r5, r6, sl, fp, pc}
   16cb8:	mov	r0, r4
   16cbc:	sub	sp, fp, #16
   16cc0:	pop	{r4, r5, r6, sl, fp, lr}
   16cc4:	b	11040 <fclose@plt>
   16cc8:	push	{r4, sl, fp, lr}
   16ccc:	add	fp, sp, #8
   16cd0:	sub	sp, sp, #8
   16cd4:	mov	r4, r0
   16cd8:	cmp	r0, #0
   16cdc:	beq	16d14 <__assert_fail@plt+0x5c5c>
   16ce0:	mov	r0, r4
   16ce4:	bl	10f80 <__freading@plt>
   16ce8:	cmp	r0, #0
   16cec:	beq	16d14 <__assert_fail@plt+0x5c5c>
   16cf0:	ldrb	r0, [r4, #1]
   16cf4:	tst	r0, #1
   16cf8:	beq	16d14 <__assert_fail@plt+0x5c5c>
   16cfc:	mov	r0, #1
   16d00:	mov	r2, #0
   16d04:	mov	r3, #0
   16d08:	str	r0, [sp]
   16d0c:	mov	r0, r4
   16d10:	bl	16d24 <__assert_fail@plt+0x5c6c>
   16d14:	mov	r0, r4
   16d18:	sub	sp, fp, #8
   16d1c:	pop	{r4, sl, fp, lr}
   16d20:	b	10e78 <fflush@plt>
   16d24:	push	{r4, r5, r6, r7, fp, lr}
   16d28:	add	fp, sp, #16
   16d2c:	sub	sp, sp, #8
   16d30:	mov	r4, r0
   16d34:	ldr	r0, [r0, #4]
   16d38:	mov	r5, r3
   16d3c:	mov	r6, r2
   16d40:	ldr	r1, [r4, #8]
   16d44:	cmp	r1, r0
   16d48:	bne	16d64 <__assert_fail@plt+0x5cac>
   16d4c:	ldrd	r0, [r4, #16]
   16d50:	cmp	r1, r0
   16d54:	bne	16d64 <__assert_fail@plt+0x5cac>
   16d58:	ldr	r0, [r4, #36]	; 0x24
   16d5c:	cmp	r0, #0
   16d60:	beq	16d7c <__assert_fail@plt+0x5cc4>
   16d64:	mov	r0, r4
   16d68:	mov	r2, r6
   16d6c:	mov	r3, r5
   16d70:	sub	sp, fp, #16
   16d74:	pop	{r4, r5, r6, r7, fp, lr}
   16d78:	b	1104c <fseeko64@plt>
   16d7c:	ldr	r7, [fp, #8]
   16d80:	mov	r0, r4
   16d84:	bl	1101c <fileno@plt>
   16d88:	mov	r2, r6
   16d8c:	mov	r3, r5
   16d90:	str	r7, [sp]
   16d94:	bl	10f20 <lseek64@plt>
   16d98:	and	r2, r0, r1
   16d9c:	cmn	r2, #1
   16da0:	beq	16dc0 <__assert_fail@plt+0x5d08>
   16da4:	strd	r0, [r4, #80]	; 0x50
   16da8:	ldr	r0, [r4]
   16dac:	bic	r0, r0, #16
   16db0:	str	r0, [r4]
   16db4:	mov	r0, #0
   16db8:	sub	sp, fp, #16
   16dbc:	pop	{r4, r5, r6, r7, fp, pc}
   16dc0:	mvn	r0, #0
   16dc4:	sub	sp, fp, #16
   16dc8:	pop	{r4, r5, r6, r7, fp, pc}
   16dcc:	push	{fp, lr}
   16dd0:	mov	fp, sp
   16dd4:	mov	r0, #14
   16dd8:	bl	11070 <nl_langinfo@plt>
   16ddc:	movw	r1, #31017	; 0x7929
   16de0:	cmp	r0, #0
   16de4:	movt	r1, #1
   16de8:	movne	r1, r0
   16dec:	movw	r0, #32834	; 0x8042
   16df0:	ldrb	r2, [r1]
   16df4:	movt	r0, #1
   16df8:	cmp	r2, #0
   16dfc:	movne	r0, r1
   16e00:	pop	{fp, pc}
   16e04:	push	{r4, r5, r6, r7, fp, lr}
   16e08:	add	fp, sp, #16
   16e0c:	sub	sp, sp, #8
   16e10:	cmp	r0, #0
   16e14:	add	r5, sp, #4
   16e18:	mov	r7, r2
   16e1c:	mov	r4, r1
   16e20:	movne	r5, r0
   16e24:	mov	r0, r5
   16e28:	bl	10f44 <mbrtowc@plt>
   16e2c:	mov	r6, r0
   16e30:	cmp	r7, #0
   16e34:	beq	16e5c <__assert_fail@plt+0x5da4>
   16e38:	cmn	r6, #2
   16e3c:	bcc	16e5c <__assert_fail@plt+0x5da4>
   16e40:	mov	r0, #0
   16e44:	bl	16ea4 <__assert_fail@plt+0x5dec>
   16e48:	cmp	r0, #0
   16e4c:	bne	16e5c <__assert_fail@plt+0x5da4>
   16e50:	ldrb	r0, [r4]
   16e54:	mov	r6, #1
   16e58:	str	r0, [r5]
   16e5c:	mov	r0, r6
   16e60:	sub	sp, fp, #16
   16e64:	pop	{r4, r5, r6, r7, fp, pc}
   16e68:	cmp	r2, #0
   16e6c:	beq	16e9c <__assert_fail@plt+0x5de4>
   16e70:	mvn	r3, #0
   16e74:	udiv	r3, r3, r2
   16e78:	cmp	r3, r1
   16e7c:	bcs	16e9c <__assert_fail@plt+0x5de4>
   16e80:	push	{fp, lr}
   16e84:	mov	fp, sp
   16e88:	bl	10fec <__errno_location@plt>
   16e8c:	mov	r1, #12
   16e90:	str	r1, [r0]
   16e94:	mov	r0, #0
   16e98:	pop	{fp, pc}
   16e9c:	mul	r1, r2, r1
   16ea0:	b	16b54 <__assert_fail@plt+0x5a9c>
   16ea4:	push	{r4, sl, fp, lr}
   16ea8:	add	fp, sp, #8
   16eac:	sub	sp, sp, #264	; 0x108
   16eb0:	add	r1, sp, #7
   16eb4:	movw	r2, #257	; 0x101
   16eb8:	bl	16f10 <__assert_fail@plt+0x5e58>
   16ebc:	mov	r4, #0
   16ec0:	cmp	r0, #0
   16ec4:	bne	16f04 <__assert_fail@plt+0x5e4c>
   16ec8:	movw	r1, #32840	; 0x8048
   16ecc:	add	r0, sp, #7
   16ed0:	mov	r2, #2
   16ed4:	movt	r1, #1
   16ed8:	bl	10fbc <bcmp@plt>
   16edc:	cmp	r0, #0
   16ee0:	beq	16f04 <__assert_fail@plt+0x5e4c>
   16ee4:	movw	r1, #32842	; 0x804a
   16ee8:	add	r0, sp, #7
   16eec:	mov	r2, #6
   16ef0:	movt	r1, #1
   16ef4:	bl	10fbc <bcmp@plt>
   16ef8:	cmp	r0, #0
   16efc:	mov	r4, r0
   16f00:	movwne	r4, #1
   16f04:	mov	r0, r4
   16f08:	sub	sp, fp, #8
   16f0c:	pop	{r4, sl, fp, pc}
   16f10:	push	{r4, r5, r6, r7, fp, lr}
   16f14:	add	fp, sp, #16
   16f18:	mov	r4, r1
   16f1c:	mov	r1, #0
   16f20:	mov	r6, r2
   16f24:	bl	11058 <setlocale@plt>
   16f28:	cmp	r0, #0
   16f2c:	beq	16f5c <__assert_fail@plt+0x5ea4>
   16f30:	mov	r7, r0
   16f34:	bl	10fc8 <strlen@plt>
   16f38:	cmp	r0, r6
   16f3c:	bcs	16f78 <__assert_fail@plt+0x5ec0>
   16f40:	add	r2, r0, #1
   16f44:	mov	r0, r4
   16f48:	mov	r1, r7
   16f4c:	bl	10e9c <memcpy@plt>
   16f50:	mov	r5, #0
   16f54:	mov	r0, r5
   16f58:	pop	{r4, r5, r6, r7, fp, pc}
   16f5c:	mov	r5, #22
   16f60:	cmp	r6, #0
   16f64:	beq	16fa0 <__assert_fail@plt+0x5ee8>
   16f68:	mov	r0, #0
   16f6c:	strb	r0, [r4]
   16f70:	mov	r0, r5
   16f74:	pop	{r4, r5, r6, r7, fp, pc}
   16f78:	mov	r5, #34	; 0x22
   16f7c:	cmp	r6, #0
   16f80:	beq	16fa0 <__assert_fail@plt+0x5ee8>
   16f84:	sub	r6, r6, #1
   16f88:	mov	r0, r4
   16f8c:	mov	r1, r7
   16f90:	mov	r2, r6
   16f94:	bl	10e9c <memcpy@plt>
   16f98:	mov	r0, #0
   16f9c:	strb	r0, [r4, r6]
   16fa0:	mov	r0, r5
   16fa4:	pop	{r4, r5, r6, r7, fp, pc}
   16fa8:	mov	r1, #0
   16fac:	b	11058 <setlocale@plt>
   16fb0:	cmp	r3, #0
   16fb4:	cmpeq	r2, #0
   16fb8:	bne	16fdc <__assert_fail@plt+0x5f24>
   16fbc:	cmp	r1, #0
   16fc0:	movlt	r1, #-2147483648	; 0x80000000
   16fc4:	movlt	r0, #0
   16fc8:	blt	16fd8 <__assert_fail@plt+0x5f20>
   16fcc:	cmpeq	r0, #0
   16fd0:	mvnne	r1, #-2147483648	; 0x80000000
   16fd4:	mvnne	r0, #0
   16fd8:	b	170c0 <__assert_fail@plt+0x6008>
   16fdc:	sub	sp, sp, #8
   16fe0:	push	{sp, lr}
   16fe4:	cmp	r1, #0
   16fe8:	blt	17008 <__assert_fail@plt+0x5f50>
   16fec:	cmp	r3, #0
   16ff0:	blt	1703c <__assert_fail@plt+0x5f84>
   16ff4:	bl	170d0 <__assert_fail@plt+0x6018>
   16ff8:	ldr	lr, [sp, #4]
   16ffc:	add	sp, sp, #8
   17000:	pop	{r2, r3}
   17004:	bx	lr
   17008:	rsbs	r0, r0, #0
   1700c:	sbc	r1, r1, r1, lsl #1
   17010:	cmp	r3, #0
   17014:	blt	17060 <__assert_fail@plt+0x5fa8>
   17018:	bl	170d0 <__assert_fail@plt+0x6018>
   1701c:	ldr	lr, [sp, #4]
   17020:	add	sp, sp, #8
   17024:	pop	{r2, r3}
   17028:	rsbs	r0, r0, #0
   1702c:	sbc	r1, r1, r1, lsl #1
   17030:	rsbs	r2, r2, #0
   17034:	sbc	r3, r3, r3, lsl #1
   17038:	bx	lr
   1703c:	rsbs	r2, r2, #0
   17040:	sbc	r3, r3, r3, lsl #1
   17044:	bl	170d0 <__assert_fail@plt+0x6018>
   17048:	ldr	lr, [sp, #4]
   1704c:	add	sp, sp, #8
   17050:	pop	{r2, r3}
   17054:	rsbs	r0, r0, #0
   17058:	sbc	r1, r1, r1, lsl #1
   1705c:	bx	lr
   17060:	rsbs	r2, r2, #0
   17064:	sbc	r3, r3, r3, lsl #1
   17068:	bl	170d0 <__assert_fail@plt+0x6018>
   1706c:	ldr	lr, [sp, #4]
   17070:	add	sp, sp, #8
   17074:	pop	{r2, r3}
   17078:	rsbs	r2, r2, #0
   1707c:	sbc	r3, r3, r3, lsl #1
   17080:	bx	lr
   17084:	cmp	r3, #0
   17088:	cmpeq	r2, #0
   1708c:	bne	170a4 <__assert_fail@plt+0x5fec>
   17090:	cmp	r1, #0
   17094:	cmpeq	r0, #0
   17098:	mvnne	r1, #0
   1709c:	mvnne	r0, #0
   170a0:	b	170c0 <__assert_fail@plt+0x6008>
   170a4:	sub	sp, sp, #8
   170a8:	push	{sp, lr}
   170ac:	bl	170d0 <__assert_fail@plt+0x6018>
   170b0:	ldr	lr, [sp, #4]
   170b4:	add	sp, sp, #8
   170b8:	pop	{r2, r3}
   170bc:	bx	lr
   170c0:	push	{r1, lr}
   170c4:	mov	r0, #8
   170c8:	bl	10e54 <raise@plt>
   170cc:	pop	{r1, pc}
   170d0:	cmp	r1, r3
   170d4:	cmpeq	r0, r2
   170d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170dc:	mov	r4, r0
   170e0:	movcc	r0, #0
   170e4:	mov	r5, r1
   170e8:	ldr	lr, [sp, #36]	; 0x24
   170ec:	movcc	r1, r0
   170f0:	bcc	171ec <__assert_fail@plt+0x6134>
   170f4:	cmp	r3, #0
   170f8:	clzeq	ip, r2
   170fc:	clzne	ip, r3
   17100:	addeq	ip, ip, #32
   17104:	cmp	r5, #0
   17108:	clzeq	r1, r4
   1710c:	addeq	r1, r1, #32
   17110:	clzne	r1, r5
   17114:	sub	ip, ip, r1
   17118:	sub	sl, ip, #32
   1711c:	lsl	r9, r3, ip
   17120:	rsb	fp, ip, #32
   17124:	orr	r9, r9, r2, lsl sl
   17128:	orr	r9, r9, r2, lsr fp
   1712c:	lsl	r8, r2, ip
   17130:	cmp	r5, r9
   17134:	cmpeq	r4, r8
   17138:	movcc	r0, #0
   1713c:	movcc	r1, r0
   17140:	bcc	1715c <__assert_fail@plt+0x60a4>
   17144:	mov	r0, #1
   17148:	subs	r4, r4, r8
   1714c:	lsl	r1, r0, sl
   17150:	orr	r1, r1, r0, lsr fp
   17154:	lsl	r0, r0, ip
   17158:	sbc	r5, r5, r9
   1715c:	cmp	ip, #0
   17160:	beq	171ec <__assert_fail@plt+0x6134>
   17164:	lsr	r6, r8, #1
   17168:	orr	r6, r6, r9, lsl #31
   1716c:	lsr	r7, r9, #1
   17170:	mov	r2, ip
   17174:	b	17198 <__assert_fail@plt+0x60e0>
   17178:	subs	r3, r4, r6
   1717c:	sbc	r8, r5, r7
   17180:	adds	r3, r3, r3
   17184:	adc	r8, r8, r8
   17188:	adds	r4, r3, #1
   1718c:	adc	r5, r8, #0
   17190:	subs	r2, r2, #1
   17194:	beq	171b4 <__assert_fail@plt+0x60fc>
   17198:	cmp	r5, r7
   1719c:	cmpeq	r4, r6
   171a0:	bcs	17178 <__assert_fail@plt+0x60c0>
   171a4:	adds	r4, r4, r4
   171a8:	adc	r5, r5, r5
   171ac:	subs	r2, r2, #1
   171b0:	bne	17198 <__assert_fail@plt+0x60e0>
   171b4:	lsr	r3, r4, ip
   171b8:	orr	r3, r3, r5, lsl fp
   171bc:	lsr	r2, r5, ip
   171c0:	orr	r3, r3, r5, lsr sl
   171c4:	adds	r0, r0, r4
   171c8:	mov	r4, r3
   171cc:	lsl	r3, r2, ip
   171d0:	orr	r3, r3, r4, lsl sl
   171d4:	lsl	ip, r4, ip
   171d8:	orr	r3, r3, r4, lsr fp
   171dc:	adc	r1, r1, r5
   171e0:	subs	r0, r0, ip
   171e4:	mov	r5, r2
   171e8:	sbc	r1, r1, r3
   171ec:	cmp	lr, #0
   171f0:	strdne	r4, [lr]
   171f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   171fc:	mov	r7, r0
   17200:	ldr	r6, [pc, #72]	; 17250 <__assert_fail@plt+0x6198>
   17204:	ldr	r5, [pc, #72]	; 17254 <__assert_fail@plt+0x619c>
   17208:	add	r6, pc, r6
   1720c:	add	r5, pc, r5
   17210:	sub	r6, r6, r5
   17214:	mov	r8, r1
   17218:	mov	r9, r2
   1721c:	bl	10e1c <calloc@plt-0x20>
   17220:	asrs	r6, r6, #2
   17224:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17228:	mov	r4, #0
   1722c:	add	r4, r4, #1
   17230:	ldr	r3, [r5], #4
   17234:	mov	r2, r9
   17238:	mov	r1, r8
   1723c:	mov	r0, r7
   17240:	blx	r3
   17244:	cmp	r6, r4
   17248:	bne	1722c <__assert_fail@plt+0x6174>
   1724c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17250:	strdeq	r1, [r1], -ip
   17254:	strdeq	r1, [r1], -r4
   17258:	bx	lr
   1725c:	ldr	r3, [pc, #12]	; 17270 <__assert_fail@plt+0x61b8>
   17260:	mov	r1, #0
   17264:	add	r3, pc, r3
   17268:	ldr	r2, [r3]
   1726c:	b	10ff8 <__cxa_atexit@plt>
   17270:	andeq	r1, r1, r0, lsl #29

Disassembly of section .fini:

00017274 <.fini>:
   17274:	push	{r3, lr}
   17278:	pop	{r3, pc}
