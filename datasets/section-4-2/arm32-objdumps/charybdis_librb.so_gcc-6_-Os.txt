
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004364 <_init>:
    4364:	push	{r3, lr}
    4368:	bl	4d50 <call_weak_fn>
    436c:	pop	{r3, pc}

Disassembly of section .plt:

00004370 <.plt>:
    4370:	push	{lr}		; (str lr, [sp, #-4]!)
    4374:	ldr	lr, [pc, #4]	; 4380 <.plt+0x10>
    4378:	add	lr, pc, lr
    437c:	ldr	pc, [lr, #8]!
    4380:	.word	0x00021c80

00004384 <rb_helper_run@plt>:
    4384:	add	ip, pc, #0, 12
    4388:	add	ip, ip, #135168	; 0x21000
    438c:	ldr	pc, [ip, #3200]!	; 0xc80

00004390 <TLS_method@plt>:
    4390:	add	ip, pc, #0, 12
    4394:	add	ip, ip, #135168	; 0x21000
    4398:	ldr	pc, [ip, #3192]!	; 0xc78

0000439c <open@plt>:
    439c:	add	ip, pc, #0, 12
    43a0:	add	ip, ip, #135168	; 0x21000
    43a4:	ldr	pc, [ip, #3184]!	; 0xc70

000043a8 <rb_init_netio@plt>:
    43a8:	add	ip, pc, #0, 12
    43ac:	add	ip, ip, #135168	; 0x21000
    43b0:	ldr	pc, [ip, #3176]!	; 0xc68

000043b4 <sigemptyset@plt>:
    43b4:	add	ip, pc, #0, 12
    43b8:	add	ip, ip, #135168	; 0x21000
    43bc:	ldr	pc, [ip, #3168]!	; 0xc60

000043c0 <strerror@plt>:
    43c0:	add	ip, pc, #0, 12
    43c4:	add	ip, ip, #135168	; 0x21000
    43c8:	ldr	pc, [ip, #3160]!	; 0xc58

000043cc <rb_radixtree_elem_delete@plt>:
    43cc:	add	ip, pc, #0, 12
    43d0:	add	ip, ip, #135168	; 0x21000
    43d4:	ldr	pc, [ip, #3152]!	; 0xc50

000043d8 <getdtablesize@plt>:
    43d8:	add	ip, pc, #0, 12
    43dc:	add	ip, ip, #135168	; 0x21000
    43e0:	ldr	pc, [ip, #3144]!	; 0xc48

000043e4 <abort@plt>:
    43e4:	add	ip, pc, #0, 12
    43e8:	add	ip, ip, #135168	; 0x21000
    43ec:	ldr	pc, [ip, #3136]!	; 0xc40

000043f0 <connect@plt>:
    43f0:	add	ip, pc, #0, 12
    43f4:	add	ip, ip, #135168	; 0x21000
    43f8:	ldr	pc, [ip, #3128]!	; 0xc38

000043fc <rb_ignore_errno@plt>:
    43fc:	add	ip, pc, #0, 12
    4400:	add	ip, ip, #135168	; 0x21000
    4404:	ldr	pc, [ip, #3120]!	; 0xc30

00004408 <rb_settimeout@plt>:
    4408:	add	ip, pc, #0, 12
    440c:	add	ip, ip, #135168	; 0x21000
    4410:	ldr	pc, [ip, #3112]!	; 0xc28

00004414 <SSL_CTX_set_cipher_list@plt>:
    4414:	add	ip, pc, #0, 12
    4418:	add	ip, ip, #135168	; 0x21000
    441c:	ldr	pc, [ip, #3104]!	; 0xc20

00004420 <ERR_get_error@plt>:
    4420:	add	ip, pc, #0, 12
    4424:	add	ip, ip, #135168	; 0x21000
    4428:	ldr	pc, [ip, #3096]!	; 0xc18

0000442c <rb_radixtree_foreach_start@plt>:
    442c:	add	ip, pc, #0, 12
    4430:	add	ip, ip, #135168	; 0x21000
    4434:	ldr	pc, [ip, #3088]!	; 0xc10

00004438 <strcasestr@plt>:
    4438:	add	ip, pc, #0, 12
    443c:	add	ip, ip, #135168	; 0x21000
    4440:	ldr	pc, [ip, #3080]!	; 0xc08

00004444 <rb_connect_tcp@plt>:
    4444:	add	ip, pc, #0, 12
    4448:	add	ip, ip, #135168	; 0x21000
    444c:	ldr	pc, [ip, #3072]!	; 0xc00

00004450 <RAND_load_file@plt>:
    4450:	add	ip, pc, #0, 12
    4454:	add	ip, ip, #135168	; 0x21000
    4458:	ldr	pc, [ip, #3064]!	; 0xbf8

0000445c <signalfd@plt>:
    445c:	add	ip, pc, #0, 12
    4460:	add	ip, ip, #135168	; 0x21000
    4464:	ldr	pc, [ip, #3056]!	; 0xbf0

00004468 <rb_radixtree_foreach_next@plt>:
    4468:	add	ip, pc, #0, 12
    446c:	add	ip, ip, #135168	; 0x21000
    4470:	ldr	pc, [ip, #3048]!	; 0xbe8

00004474 <memcmp@plt>:
    4474:	add	ip, pc, #0, 12
    4478:	add	ip, ip, #135168	; 0x21000
    447c:	ldr	pc, [ip, #3040]!	; 0xbe0

00004480 <SSL_CTX_free@plt>:
    4480:	add	ip, pc, #0, 12
    4484:	add	ip, ip, #135168	; 0x21000
    4488:	ldr	pc, [ip, #3032]!	; 0xbd8

0000448c <rb_getmaxconnect@plt>:
    448c:	add	ip, pc, #0, 12
    4490:	add	ip, ip, #135168	; 0x21000
    4494:	ldr	pc, [ip, #3024]!	; 0xbd0

00004498 <sigwaitinfo@plt>:
    4498:	add	ip, pc, #0, 12
    449c:	add	ip, ip, #135168	; 0x21000
    44a0:	ldr	pc, [ip, #3016]!	; 0xbc8

000044a4 <__libc_current_sigrtmin@plt>:
    44a4:	add	ip, pc, #0, 12
    44a8:	add	ip, ip, #135168	; 0x21000
    44ac:	ldr	pc, [ip, #3008]!	; 0xbc0

000044b0 <__xstat@plt>:
    44b0:	add	ip, pc, #0, 12
    44b4:	add	ip, ip, #135168	; 0x21000
    44b8:	ldr	pc, [ip, #3000]!	; 0xbb8

000044bc <rb_event_delete@plt>:
    44bc:	add	ip, pc, #0, 12
    44c0:	add	ip, ip, #135168	; 0x21000
    44c4:	ldr	pc, [ip, #2992]!	; 0xbb0

000044c8 <rb_setselect@plt>:
    44c8:	add	ip, pc, #0, 12
    44cc:	add	ip, ip, #135168	; 0x21000
    44d0:	ldr	pc, [ip, #2984]!	; 0xba8

000044d4 <rb_fd_ssl@plt>:
    44d4:	add	ip, pc, #0, 12
    44d8:	add	ip, ip, #135168	; 0x21000
    44dc:	ldr	pc, [ip, #2976]!	; 0xba0

000044e0 <sigtimedwait@plt>:
    44e0:	add	ip, pc, #0, 12
    44e4:	add	ip, ip, #135168	; 0x21000
    44e8:	ldr	pc, [ip, #2968]!	; 0xb98

000044ec <rb_setenv@plt>:
    44ec:	add	ip, pc, #0, 12
    44f0:	add	ip, ip, #135168	; 0x21000
    44f4:	ldr	pc, [ip, #2960]!	; 0xb90

000044f8 <signal@plt>:
    44f8:	add	ip, pc, #0, 12
    44fc:	add	ip, ip, #135168	; 0x21000
    4500:	ldr	pc, [ip, #2952]!	; 0xb88

00004504 <rb_get_fd@plt>:
    4504:	add	ip, pc, #0, 12
    4508:	add	ip, ip, #135168	; 0x21000
    450c:	ldr	pc, [ip, #2944]!	; 0xb80

00004510 <epoll_create@plt>:
    4510:	add	ip, pc, #0, 12
    4514:	add	ip, ip, #135168	; 0x21000
    4518:	ldr	pc, [ip, #2936]!	; 0xb78

0000451c <rb_clear_patricia@plt>:
    451c:	add	ip, pc, #0, 12
    4520:	add	ip, ip, #135168	; 0x21000
    4524:	ldr	pc, [ip, #2928]!	; 0xb70

00004528 <__gmon_start__@plt>:
    4528:	add	ip, pc, #0, 12
    452c:	add	ip, ip, #135168	; 0x21000
    4530:	ldr	pc, [ip, #2920]!	; 0xb68

00004534 <SSL_CTX_clear_options@plt>:
    4534:	add	ip, pc, #0, 12
    4538:	add	ip, ip, #135168	; 0x21000
    453c:	ldr	pc, [ip, #2912]!	; 0xb60

00004540 <SSL_get_current_cipher@plt>:
    4540:	add	ip, pc, #0, 12
    4544:	add	ip, ip, #135168	; 0x21000
    4548:	ldr	pc, [ip, #2904]!	; 0xb58

0000454c <timer_create@plt>:
    454c:	add	ip, pc, #0, 12
    4550:	add	ip, ip, #135168	; 0x21000
    4554:	ldr	pc, [ip, #2896]!	; 0xb50

00004558 <X509_get_X509_PUBKEY@plt>:
    4558:	add	ip, pc, #0, 12
    455c:	add	ip, ip, #135168	; 0x21000
    4560:	ldr	pc, [ip, #2888]!	; 0xb48

00004564 <rb_select@plt>:
    4564:	add	ip, pc, #0, 12
    4568:	add	ip, ip, #135168	; 0x21000
    456c:	ldr	pc, [ip, #2880]!	; 0xb40

00004570 <rb_patricia_search_best@plt>:
    4570:	add	ip, pc, #0, 12
    4574:	add	ip, ip, #135168	; 0x21000
    4578:	ldr	pc, [ip, #2872]!	; 0xb38

0000457c <vsnprintf@plt>:
    457c:	add	ip, pc, #0, 12
    4580:	add	ip, ip, #135168	; 0x21000
    4584:	ldr	pc, [ip, #2864]!	; 0xb30

00004588 <socketpair@plt>:
    4588:	add	ip, pc, #0, 12
    458c:	add	ip, ip, #135168	; 0x21000
    4590:	ldr	pc, [ip, #2856]!	; 0xb28

00004594 <strncpy@plt>:
    4594:	add	ip, pc, #0, 12
    4598:	add	ip, ip, #135168	; 0x21000
    459c:	ldr	pc, [ip, #2848]!	; 0xb20

000045a0 <fclose@plt>:
    45a0:	add	ip, pc, #0, 12
    45a4:	add	ip, ip, #135168	; 0x21000
    45a8:	ldr	pc, [ip, #2840]!	; 0xb18

000045ac <recv@plt>:
    45ac:	add	ip, pc, #0, 12
    45b0:	add	ip, ip, #135168	; 0x21000
    45b4:	ldr	pc, [ip, #2832]!	; 0xb10

000045b8 <getenv@plt>:
    45b8:	add	ip, pc, #0, 12
    45bc:	add	ip, ip, #135168	; 0x21000
    45c0:	ldr	pc, [ip, #2824]!	; 0xb08

000045c4 <ERR_error_string_n@plt>:
    45c4:	add	ip, pc, #0, 12
    45c8:	add	ip, ip, #135168	; 0x21000
    45cc:	ldr	pc, [ip, #2816]!	; 0xb00

000045d0 <strchr@plt>:
    45d0:	add	ip, pc, #0, 12
    45d4:	add	ip, ip, #135168	; 0x21000
    45d8:	ldr	pc, [ip, #2808]!	; 0xaf8

000045dc <rb_gettimeofday@plt>:
    45dc:	add	ip, pc, #0, 12
    45e0:	add	ip, ip, #135168	; 0x21000
    45e4:	ldr	pc, [ip, #2800]!	; 0xaf0

000045e8 <strcasecmp@plt>:
    45e8:	add	ip, pc, #0, 12
    45ec:	add	ip, ip, #135168	; 0x21000
    45f0:	ldr	pc, [ip, #2792]!	; 0xae8

000045f4 <rb_helper_restart@plt>:
    45f4:	add	ip, pc, #0, 12
    45f8:	add	ip, ip, #135168	; 0x21000
    45fc:	ldr	pc, [ip, #2784]!	; 0xae0

00004600 <listen@plt>:
    4600:	add	ip, pc, #0, 12
    4604:	add	ip, ip, #135168	; 0x21000
    4608:	ldr	pc, [ip, #2776]!	; 0xad8

0000460c <calloc@plt>:
    460c:	add	ip, pc, #0, 12
    4610:	add	ip, ip, #135168	; 0x21000
    4614:	ldr	pc, [ip, #2768]!	; 0xad0

00004618 <SSL_write@plt>:
    4618:	add	ip, pc, #0, 12
    461c:	add	ip, ip, #135168	; 0x21000
    4620:	ldr	pc, [ip, #2760]!	; 0xac8

00004624 <rb_event_init@plt>:
    4624:	add	ip, pc, #0, 12
    4628:	add	ip, ip, #135168	; 0x21000
    462c:	ldr	pc, [ip, #2752]!	; 0xac0

00004630 <fopen@plt>:
    4630:	add	ip, pc, #0, 12
    4634:	add	ip, ip, #135168	; 0x21000
    4638:	ldr	pc, [ip, #2744]!	; 0xab8

0000463c <rb_set_nb@plt>:
    463c:	add	ip, pc, #0, 12
    4640:	add	ip, ip, #135168	; 0x21000
    4644:	ldr	pc, [ip, #2736]!	; 0xab0

00004648 <memset@plt>:
    4648:	add	ip, pc, #0, 12
    464c:	add	ip, ip, #135168	; 0x21000
    4650:	ldr	pc, [ip, #2728]!	; 0xaa8

00004654 <rb_inet_pton@plt>:
    4654:	add	ip, pc, #0, 12
    4658:	add	ip, ip, #135168	; 0x21000
    465c:	ldr	pc, [ip, #2720]!	; 0xaa0

00004660 <rb_radixtree_stats@plt>:
    4660:	add	ip, pc, #0, 12
    4664:	add	ip, ip, #135168	; 0x21000
    4668:	ldr	pc, [ip, #2712]!	; 0xa98

0000466c <strrchr@plt>:
    466c:	add	ip, pc, #0, 12
    4670:	add	ip, ip, #135168	; 0x21000
    4674:	ldr	pc, [ip, #2704]!	; 0xa90

00004678 <rb_write@plt>:
    4678:	add	ip, pc, #0, 12
    467c:	add	ip, ip, #135168	; 0x21000
    4680:	ldr	pc, [ip, #2696]!	; 0xa88

00004684 <SSL_set_fd@plt>:
    4684:	add	ip, pc, #0, 12
    4688:	add	ip, ip, #135168	; 0x21000
    468c:	ldr	pc, [ip, #2688]!	; 0xa80

00004690 <SSL_CTX_ctrl@plt>:
    4690:	add	ip, pc, #0, 12
    4694:	add	ip, ip, #135168	; 0x21000
    4698:	ldr	pc, [ip, #2680]!	; 0xa78

0000469c <rb_linebuf_parse@plt>:
    469c:	add	ip, pc, #0, 12
    46a0:	add	ip, ip, #135168	; 0x21000
    46a4:	ldr	pc, [ip, #2672]!	; 0xa70

000046a8 <writev@plt>:
    46a8:	add	ip, pc, #0, 12
    46ac:	add	ip, ip, #135168	; 0x21000
    46b0:	ldr	pc, [ip, #2664]!	; 0xa68

000046b4 <rb_fsnprint@plt>:
    46b4:	add	ip, pc, #0, 12
    46b8:	add	ip, ip, #135168	; 0x21000
    46bc:	ldr	pc, [ip, #2656]!	; 0xa60

000046c0 <rb_strlcpy@plt>:
    46c0:	add	ip, pc, #0, 12
    46c4:	add	ip, ip, #135168	; 0x21000
    46c8:	ldr	pc, [ip, #2648]!	; 0xa58

000046cc <rb_patricia_search_best2@plt>:
    46cc:	add	ip, pc, #0, 12
    46d0:	add	ip, ip, #135168	; 0x21000
    46d4:	ldr	pc, [ip, #2640]!	; 0xa50

000046d8 <SSL_CIPHER_get_name@plt>:
    46d8:	add	ip, pc, #0, 12
    46dc:	add	ip, ip, #135168	; 0x21000
    46e0:	ldr	pc, [ip, #2632]!	; 0xa48

000046e4 <posix_spawnattr_init@plt>:
    46e4:	add	ip, pc, #0, 12
    46e8:	add	ip, ip, #135168	; 0x21000
    46ec:	ldr	pc, [ip, #2624]!	; 0xa40

000046f0 <OpenSSL_version_num@plt>:
    46f0:	add	ip, pc, #0, 12
    46f4:	add	ip, ip, #135168	; 0x21000
    46f8:	ldr	pc, [ip, #2616]!	; 0xa38

000046fc <rb_dictionary_foreach_next@plt>:
    46fc:	add	ip, pc, #0, 12
    4700:	add	ip, ip, #135168	; 0x21000
    4704:	ldr	pc, [ip, #2608]!	; 0xa30

00004708 <rb_kill@plt>:
    4708:	add	ip, pc, #0, 12
    470c:	add	ip, ip, #135168	; 0x21000
    4710:	ldr	pc, [ip, #2600]!	; 0xa28

00004714 <free@plt>:
    4714:	add	ip, pc, #0, 12
    4718:	add	ip, ip, #135168	; 0x21000
    471c:	ldr	pc, [ip, #2592]!	; 0xa20

00004720 <sendmsg@plt>:
    4720:	add	ip, pc, #0, 12
    4724:	add	ip, ip, #135168	; 0x21000
    4728:	ldr	pc, [ip, #2584]!	; 0xa18

0000472c <read@plt>:
    472c:	add	ip, pc, #0, 12
    4730:	add	ip, ip, #135168	; 0x21000
    4734:	ldr	pc, [ip, #2576]!	; 0xa10

00004738 <rb_radixtree_elem_add@plt>:
    4738:	add	ip, pc, #0, 12
    473c:	add	ip, ip, #135168	; 0x21000
    4740:	ldr	pc, [ip, #2568]!	; 0xa08

00004744 <write@plt>:
    4744:	add	ip, pc, #0, 12
    4748:	add	ip, ip, #135168	; 0x21000
    474c:	ldr	pc, [ip, #2560]!	; 0xa00

00004750 <SSL_new@plt>:
    4750:	add	ip, pc, #0, 12
    4754:	add	ip, ip, #135168	; 0x21000
    4758:	ldr	pc, [ip, #2552]!	; 0x9f8

0000475c <access@plt>:
    475c:	add	ip, pc, #0, 12
    4760:	add	ip, ip, #135168	; 0x21000
    4764:	ldr	pc, [ip, #2544]!	; 0x9f0

00004768 <rb_lib_loop@plt>:
    4768:	add	ip, pc, #0, 12
    476c:	add	ip, ip, #135168	; 0x21000
    4770:	ldr	pc, [ip, #2536]!	; 0x9e8

00004774 <timer_settime@plt>:
    4774:	add	ip, pc, #0, 12
    4778:	add	ip, ip, #135168	; 0x21000
    477c:	ldr	pc, [ip, #2528]!	; 0x9e0

00004780 <gettimeofday@plt>:
    4780:	add	ip, pc, #0, 12
    4784:	add	ip, ip, #135168	; 0x21000
    4788:	ldr	pc, [ip, #2520]!	; 0x9d8

0000478c <accept@plt>:
    478c:	add	ip, pc, #0, 12
    4790:	add	ip, ip, #135168	; 0x21000
    4794:	ldr	pc, [ip, #2512]!	; 0x9d0

00004798 <SSL_read@plt>:
    4798:	add	ip, pc, #0, 12
    479c:	add	ip, ip, #135168	; 0x21000
    47a0:	ldr	pc, [ip, #2504]!	; 0x9c8

000047a4 <rb_read@plt>:
    47a4:	add	ip, pc, #0, 12
    47a8:	add	ip, ip, #135168	; 0x21000
    47ac:	ldr	pc, [ip, #2496]!	; 0x9c0

000047b0 <socket@plt>:
    47b0:	add	ip, pc, #0, 12
    47b4:	add	ip, ip, #135168	; 0x21000
    47b8:	ldr	pc, [ip, #2488]!	; 0x9b8

000047bc <rb_linebuf_get@plt>:
    47bc:	add	ip, pc, #0, 12
    47c0:	add	ip, ip, #135168	; 0x21000
    47c4:	ldr	pc, [ip, #2480]!	; 0x9b0

000047c8 <rb_radixtree_foreach_cur@plt>:
    47c8:	add	ip, pc, #0, 12
    47cc:	add	ip, ip, #135168	; 0x21000
    47d0:	ldr	pc, [ip, #2472]!	; 0x9a8

000047d4 <epoll_wait@plt>:
    47d4:	add	ip, pc, #0, 12
    47d8:	add	ip, ip, #135168	; 0x21000
    47dc:	ldr	pc, [ip, #2464]!	; 0x9a0

000047e0 <SSL_do_handshake@plt>:
    47e0:	add	ip, pc, #0, 12
    47e4:	add	ip, ip, #135168	; 0x21000
    47e8:	ldr	pc, [ip, #2456]!	; 0x998

000047ec <rb_linebuf_flush@plt>:
    47ec:	add	ip, pc, #0, 12
    47f0:	add	ip, ip, #135168	; 0x21000
    47f4:	ldr	pc, [ip, #2448]!	; 0x990

000047f8 <posix_spawn@plt>:
    47f8:	add	ip, pc, #0, 12
    47fc:	add	ip, ip, #135168	; 0x21000
    4800:	ldr	pc, [ip, #2440]!	; 0x988

00004804 <strlen@plt>:
    4804:	add	ip, pc, #0, 12
    4808:	add	ip, ip, #135168	; 0x21000
    480c:	ldr	pc, [ip, #2432]!	; 0x980

00004810 <rb_current_time@plt>:
    4810:	add	ip, pc, #0, 12
    4814:	add	ip, ip, #135168	; 0x21000
    4818:	ldr	pc, [ip, #2424]!	; 0x978

0000481c <strtoul@plt>:
    481c:	add	ip, pc, #0, 12
    4820:	add	ip, ip, #135168	; 0x21000
    4824:	ldr	pc, [ip, #2416]!	; 0x970

00004828 <memcpy@plt>:
    4828:	add	ip, pc, #0, 12
    482c:	add	ip, ip, #135168	; 0x21000
    4830:	ldr	pc, [ip, #2408]!	; 0x968

00004834 <PEM_read_X509@plt>:
    4834:	add	ip, pc, #0, 12
    4838:	add	ip, ip, #135168	; 0x21000
    483c:	ldr	pc, [ip, #2400]!	; 0x960

00004840 <posix_spawnattr_setflags@plt>:
    4840:	add	ip, pc, #0, 12
    4844:	add	ip, ip, #135168	; 0x21000
    4848:	ldr	pc, [ip, #2392]!	; 0x958

0000484c <__ctype_tolower_loc@plt>:
    484c:	add	ip, pc, #0, 12
    4850:	add	ip, ip, #135168	; 0x21000
    4854:	ldr	pc, [ip, #2384]!	; 0x950

00004858 <SSL_CTX_use_certificate_chain_file@plt>:
    4858:	add	ip, pc, #0, 12
    485c:	add	ip, ip, #135168	; 0x21000
    4860:	ldr	pc, [ip, #2376]!	; 0x948

00004864 <rb_free_rb_dlink_node@plt>:
    4864:	add	ip, pc, #0, 12
    4868:	add	ip, ip, #135168	; 0x21000
    486c:	ldr	pc, [ip, #2368]!	; 0x940

00004870 <SSL_CTX_set_options@plt>:
    4870:	add	ip, pc, #0, 12
    4874:	add	ip, ip, #135168	; 0x21000
    4878:	ldr	pc, [ip, #2360]!	; 0x938

0000487c <posix_spawnattr_destroy@plt>:
    487c:	add	ip, pc, #0, 12
    4880:	add	ip, ip, #135168	; 0x21000
    4884:	ldr	pc, [ip, #2352]!	; 0x930

00004888 <rb_close@plt>:
    4888:	add	ip, pc, #0, 12
    488c:	add	ip, ip, #135168	; 0x21000
    4890:	ldr	pc, [ip, #2344]!	; 0x928

00004894 <strtol@plt>:
    4894:	add	ip, pc, #0, 12
    4898:	add	ip, ip, #135168	; 0x21000
    489c:	ldr	pc, [ip, #2336]!	; 0x920

000048a0 <sigaddset@plt>:
    48a0:	add	ip, pc, #0, 12
    48a4:	add	ip, ip, #135168	; 0x21000
    48a8:	ldr	pc, [ip, #2328]!	; 0x918

000048ac <strcpy@plt>:
    48ac:	add	ip, pc, #0, 12
    48b0:	add	ip, ip, #135168	; 0x21000
    48b4:	ldr	pc, [ip, #2320]!	; 0x910

000048b8 <waitpid@plt>:
    48b8:	add	ip, pc, #0, 12
    48bc:	add	ip, ip, #135168	; 0x21000
    48c0:	ldr	pc, [ip, #2312]!	; 0x908

000048c4 <rb_run_one_event@plt>:
    48c4:	add	ip, pc, #0, 12
    48c8:	add	ip, ip, #135168	; 0x21000
    48cc:	ldr	pc, [ip, #2304]!	; 0x900

000048d0 <rb_patricia_search_exact@plt>:
    48d0:	add	ip, pc, #0, 12
    48d4:	add	ip, ip, #135168	; 0x21000
    48d8:	ldr	pc, [ip, #2296]!	; 0x8f8

000048dc <strncat@plt>:
    48dc:	add	ip, pc, #0, 12
    48e0:	add	ip, ip, #135168	; 0x21000
    48e4:	ldr	pc, [ip, #2288]!	; 0x8f0

000048e8 <atol@plt>:
    48e8:	add	ip, pc, #0, 12
    48ec:	add	ip, ip, #135168	; 0x21000
    48f0:	ldr	pc, [ip, #2280]!	; 0x8e8

000048f4 <rb_bh_free@plt>:
    48f4:	add	ip, pc, #0, 12
    48f8:	add	ip, ip, #135168	; 0x21000
    48fc:	ldr	pc, [ip, #2272]!	; 0x8e0

00004900 <rb_init_rb_dlink_nodes@plt>:
    4900:	add	ip, pc, #0, 12
    4904:	add	ip, ip, #135168	; 0x21000
    4908:	ldr	pc, [ip, #2264]!	; 0x8d8

0000490c <raise@plt>:
    490c:	add	ip, pc, #0, 12
    4910:	add	ip, ip, #135168	; 0x21000
    4914:	ldr	pc, [ip, #2256]!	; 0x8d0

00004918 <EVP_sha1@plt>:
    4918:	add	ip, pc, #0, 12
    491c:	add	ip, ip, #135168	; 0x21000
    4920:	ldr	pc, [ip, #2248]!	; 0x8c8

00004924 <rb_patricia_lookup@plt>:
    4924:	add	ip, pc, #0, 12
    4928:	add	ip, ip, #135168	; 0x21000
    492c:	ldr	pc, [ip, #2240]!	; 0x8c0

00004930 <shutdown@plt>:
    4930:	add	ip, pc, #0, 12
    4934:	add	ip, ip, #135168	; 0x21000
    4938:	ldr	pc, [ip, #2232]!	; 0x8b8

0000493c <bind@plt>:
    493c:	add	ip, pc, #0, 12
    4940:	add	ip, ip, #135168	; 0x21000
    4944:	ldr	pc, [ip, #2224]!	; 0x8b0

00004948 <rb_lib_log@plt>:
    4948:	add	ip, pc, #0, 12
    494c:	add	ip, ip, #135168	; 0x21000
    4950:	ldr	pc, [ip, #2216]!	; 0x8a8

00004954 <SSL_CTX_use_PrivateKey_file@plt>:
    4954:	add	ip, pc, #0, 12
    4958:	add	ip, ip, #135168	; 0x21000
    495c:	ldr	pc, [ip, #2208]!	; 0x8a0

00004960 <select@plt>:
    4960:	add	ip, pc, #0, 12
    4964:	add	ip, ip, #135168	; 0x21000
    4968:	ldr	pc, [ip, #2200]!	; 0x898

0000496c <close@plt>:
    496c:	add	ip, pc, #0, 12
    4970:	add	ip, ip, #135168	; 0x21000
    4974:	ldr	pc, [ip, #2192]!	; 0x890

00004978 <rb_inet_ntop@plt>:
    4978:	add	ip, pc, #0, 12
    497c:	add	ip, ip, #135168	; 0x21000
    4980:	ldr	pc, [ip, #2184]!	; 0x888

00004984 <rb_bh_alloc@plt>:
    4984:	add	ip, pc, #0, 12
    4988:	add	ip, ip, #135168	; 0x21000
    498c:	ldr	pc, [ip, #2176]!	; 0x880

00004990 <SSL_free@plt>:
    4990:	add	ip, pc, #0, 12
    4994:	add	ip, ip, #135168	; 0x21000
    4998:	ldr	pc, [ip, #2168]!	; 0x878

0000499c <rb_pipe@plt>:
    499c:	add	ip, pc, #0, 12
    49a0:	add	ip, ip, #135168	; 0x21000
    49a4:	ldr	pc, [ip, #2160]!	; 0x870

000049a8 <strncasecmp@plt>:
    49a8:	add	ip, pc, #0, 12
    49ac:	add	ip, ip, #135168	; 0x21000
    49b0:	ldr	pc, [ip, #2152]!	; 0x868

000049b4 <rb_outofmemory@plt>:
    49b4:	add	ip, pc, #0, 12
    49b8:	add	ip, ip, #135168	; 0x21000
    49bc:	ldr	pc, [ip, #2144]!	; 0x860

000049c0 <rb_set_time@plt>:
    49c0:	add	ip, pc, #0, 12
    49c4:	add	ip, ip, #135168	; 0x21000
    49c8:	ldr	pc, [ip, #2136]!	; 0x858

000049cc <rb_dictionary_stats@plt>:
    49cc:	add	ip, pc, #0, 12
    49d0:	add	ip, ip, #135168	; 0x21000
    49d4:	ldr	pc, [ip, #2128]!	; 0x850

000049d8 <malloc@plt>:
    49d8:	add	ip, pc, #0, 12
    49dc:	add	ip, ip, #135168	; 0x21000
    49e0:	ldr	pc, [ip, #2120]!	; 0x848

000049e4 <sigprocmask@plt>:
    49e4:	add	ip, pc, #0, 12
    49e8:	add	ip, ip, #135168	; 0x21000
    49ec:	ldr	pc, [ip, #2112]!	; 0x840

000049f0 <rb_event_run@plt>:
    49f0:	add	ip, pc, #0, 12
    49f4:	add	ip, ip, #135168	; 0x21000
    49f8:	ldr	pc, [ip, #2104]!	; 0x838

000049fc <SSL_set_accept_state@plt>:
    49fc:	add	ip, pc, #0, 12
    4a00:	add	ip, ip, #135168	; 0x21000
    4a04:	ldr	pc, [ip, #2096]!	; 0x830

00004a08 <rb_init_bh@plt>:
    4a08:	add	ip, pc, #0, 12
    4a0c:	add	ip, ip, #135168	; 0x21000
    4a10:	ldr	pc, [ip, #2088]!	; 0x828

00004a14 <PEM_read_DHparams@plt>:
    4a14:	add	ip, pc, #0, 12
    4a18:	add	ip, ip, #135168	; 0x21000
    4a1c:	ldr	pc, [ip, #2080]!	; 0x820

00004a20 <gmtime_r@plt>:
    4a20:	add	ip, pc, #0, 12
    4a24:	add	ip, ip, #135168	; 0x21000
    4a28:	ldr	pc, [ip, #2072]!	; 0x818

00004a2c <poll@plt>:
    4a2c:	add	ip, pc, #0, 12
    4a30:	add	ip, ip, #135168	; 0x21000
    4a34:	ldr	pc, [ip, #2064]!	; 0x810

00004a38 <ASN1_item_digest@plt>:
    4a38:	add	ip, pc, #0, 12
    4a3c:	add	ip, ip, #135168	; 0x21000
    4a40:	ldr	pc, [ip, #2056]!	; 0x808

00004a44 <strnlen@plt>:
    4a44:	add	ip, pc, #0, 12
    4a48:	add	ip, ip, #135168	; 0x21000
    4a4c:	ldr	pc, [ip, #2048]!	; 0x800

00004a50 <SSL_get_peer_certificate@plt>:
    4a50:	add	ip, pc, #0, 12
    4a54:	add	ip, ip, #135168	; 0x21000
    4a58:	ldr	pc, [ip, #2040]!	; 0x7f8

00004a5c <rb_dictionary_find@plt>:
    4a5c:	add	ip, pc, #0, 12
    4a60:	add	ip, ip, #135168	; 0x21000
    4a64:	ldr	pc, [ip, #2032]!	; 0x7f0

00004a68 <rb_lib_init@plt>:
    4a68:	add	ip, pc, #0, 12
    4a6c:	add	ip, ip, #135168	; 0x21000
    4a70:	ldr	pc, [ip, #2024]!	; 0x7e8

00004a74 <SSL_get_verify_result@plt>:
    4a74:	add	ip, pc, #0, 12
    4a78:	add	ip, ip, #135168	; 0x21000
    4a7c:	ldr	pc, [ip, #2016]!	; 0x7e0

00004a80 <strtok_r@plt>:
    4a80:	add	ip, pc, #0, 12
    4a84:	add	ip, ip, #135168	; 0x21000
    4a88:	ldr	pc, [ip, #2008]!	; 0x7d8

00004a8c <rb_lib_restart@plt>:
    4a8c:	add	ip, pc, #0, 12
    4a90:	add	ip, ip, #135168	; 0x21000
    4a94:	ldr	pc, [ip, #2000]!	; 0x7d0

00004a98 <DH_free@plt>:
    4a98:	add	ip, pc, #0, 12
    4a9c:	add	ip, ip, #135168	; 0x21000
    4aa0:	ldr	pc, [ip, #1992]!	; 0x7c8

00004aa4 <timer_delete@plt>:
    4aa4:	add	ip, pc, #0, 12
    4aa8:	add	ip, ip, #135168	; 0x21000
    4aac:	ldr	pc, [ip, #1984]!	; 0x7c0

00004ab0 <rb_open@plt>:
    4ab0:	add	ip, pc, #0, 12
    4ab4:	add	ip, ip, #135168	; 0x21000
    4ab8:	ldr	pc, [ip, #1976]!	; 0x7b8

00004abc <rb_get_sockerr@plt>:
    4abc:	add	ip, pc, #0, 12
    4ac0:	add	ip, ip, #135168	; 0x21000
    4ac4:	ldr	pc, [ip, #1968]!	; 0x7b0

00004ac8 <send@plt>:
    4ac8:	add	ip, pc, #0, 12
    4acc:	add	ip, ip, #135168	; 0x21000
    4ad0:	ldr	pc, [ip, #1960]!	; 0x7a8

00004ad4 <SSL_shutdown@plt>:
    4ad4:	add	ip, pc, #0, 12
    4ad8:	add	ip, ip, #135168	; 0x21000
    4adc:	ldr	pc, [ip, #1952]!	; 0x7a0

00004ae0 <rb_bh_create@plt>:
    4ae0:	add	ip, pc, #0, 12
    4ae4:	add	ip, ip, #135168	; 0x21000
    4ae8:	ldr	pc, [ip, #1944]!	; 0x798

00004aec <dup2@plt>:
    4aec:	add	ip, pc, #0, 12
    4af0:	add	ip, ip, #135168	; 0x21000
    4af4:	ldr	pc, [ip, #1936]!	; 0x790

00004af8 <getpid@plt>:
    4af8:	add	ip, pc, #0, 12
    4afc:	add	ip, ip, #135168	; 0x21000
    4b00:	ldr	pc, [ip, #1928]!	; 0x788

00004b04 <rb_writev@plt>:
    4b04:	add	ip, pc, #0, 12
    4b08:	add	ip, ip, #135168	; 0x21000
    4b0c:	ldr	pc, [ip, #1920]!	; 0x780

00004b10 <RAND_bytes@plt>:
    4b10:	add	ip, pc, #0, 12
    4b14:	add	ip, ip, #135168	; 0x21000
    4b18:	ldr	pc, [ip, #1912]!	; 0x778

00004b1c <rb_linebuf_newbuf@plt>:
    4b1c:	add	ip, pc, #0, 12
    4b20:	add	ip, ip, #135168	; 0x21000
    4b24:	ldr	pc, [ip, #1904]!	; 0x770

00004b28 <rb_fdlist_init@plt>:
    4b28:	add	ip, pc, #0, 12
    4b2c:	add	ip, ip, #135168	; 0x21000
    4b30:	ldr	pc, [ip, #1896]!	; 0x768

00004b34 <rb_event_add@plt>:
    4b34:	add	ip, pc, #0, 12
    4b38:	add	ip, ip, #135168	; 0x21000
    4b3c:	ldr	pc, [ip, #1888]!	; 0x760

00004b40 <readlink@plt>:
    4b40:	add	ip, pc, #0, 12
    4b44:	add	ip, ip, #135168	; 0x21000
    4b48:	ldr	pc, [ip, #1880]!	; 0x758

00004b4c <SSL_CTX_new@plt>:
    4b4c:	add	ip, pc, #0, 12
    4b50:	add	ip, ip, #135168	; 0x21000
    4b54:	ldr	pc, [ip, #1872]!	; 0x750

00004b58 <rb_setup_fd@plt>:
    4b58:	add	ip, pc, #0, 12
    4b5c:	add	ip, ip, #135168	; 0x21000
    4b60:	ldr	pc, [ip, #1864]!	; 0x748

00004b64 <recvmsg@plt>:
    4b64:	add	ip, pc, #0, 12
    4b68:	add	ip, ip, #135168	; 0x21000
    4b6c:	ldr	pc, [ip, #1856]!	; 0x740

00004b70 <rand@plt>:
    4b70:	add	ip, pc, #0, 12
    4b74:	add	ip, ip, #135168	; 0x21000
    4b78:	ldr	pc, [ip, #1848]!	; 0x738

00004b7c <rb_linebuf_init@plt>:
    4b7c:	add	ip, pc, #0, 12
    4b80:	add	ip, ip, #135168	; 0x21000
    4b84:	ldr	pc, [ip, #1840]!	; 0x730

00004b88 <__fxstat@plt>:
    4b88:	add	ip, pc, #0, 12
    4b8c:	add	ip, ip, #135168	; 0x21000
    4b90:	ldr	pc, [ip, #1832]!	; 0x728

00004b94 <SSL_set_connect_state@plt>:
    4b94:	add	ip, pc, #0, 12
    4b98:	add	ip, ip, #135168	; 0x21000
    4b9c:	ldr	pc, [ip, #1824]!	; 0x720

00004ba0 <rb_radixtree_elem_find@plt>:
    4ba0:	add	ip, pc, #0, 12
    4ba4:	add	ip, ip, #135168	; 0x21000
    4ba8:	ldr	pc, [ip, #1816]!	; 0x718

00004bac <rb_make_rb_dlink_node@plt>:
    4bac:	add	ip, pc, #0, 12
    4bb0:	add	ip, ip, #135168	; 0x21000
    4bb4:	ldr	pc, [ip, #1808]!	; 0x710

00004bb8 <rb_strlcat@plt>:
    4bb8:	add	ip, pc, #0, 12
    4bbc:	add	ip, ip, #135168	; 0x21000
    4bc0:	ldr	pc, [ip, #1800]!	; 0x708

00004bc4 <rb_spawn_process@plt>:
    4bc4:	add	ip, pc, #0, 12
    4bc8:	add	ip, ip, #135168	; 0x21000
    4bcc:	ldr	pc, [ip, #1792]!	; 0x700

00004bd0 <EVP_sha512@plt>:
    4bd0:	add	ip, pc, #0, 12
    4bd4:	add	ip, ip, #135168	; 0x21000
    4bd8:	ldr	pc, [ip, #1784]!	; 0x6f8

00004bdc <snprintf@plt>:
    4bdc:	add	ip, pc, #0, 12
    4be0:	add	ip, ip, #135168	; 0x21000
    4be4:	ldr	pc, [ip, #1776]!	; 0x6f0

00004be8 <RAND_status@plt>:
    4be8:	add	ip, pc, #0, 12
    4bec:	add	ip, ip, #135168	; 0x21000
    4bf0:	ldr	pc, [ip, #1768]!	; 0x6e8

00004bf4 <timerfd_create@plt>:
    4bf4:	add	ip, pc, #0, 12
    4bf8:	add	ip, ip, #135168	; 0x21000
    4bfc:	ldr	pc, [ip, #1760]!	; 0x6e0

00004c00 <EVP_sha256@plt>:
    4c00:	add	ip, pc, #0, 12
    4c04:	add	ip, ip, #135168	; 0x21000
    4c08:	ldr	pc, [ip, #1752]!	; 0x6d8

00004c0c <strcspn@plt>:
    4c0c:	add	ip, pc, #0, 12
    4c10:	add	ip, ip, #135168	; 0x21000
    4c14:	ldr	pc, [ip, #1744]!	; 0x6d0

00004c18 <rb_linebuf_put@plt>:
    4c18:	add	ip, pc, #0, 12
    4c1c:	add	ip, ip, #135168	; 0x21000
    4c20:	ldr	pc, [ip, #1736]!	; 0x6c8

00004c24 <rb_listen@plt>:
    4c24:	add	ip, pc, #0, 12
    4c28:	add	ip, ip, #135168	; 0x21000
    4c2c:	ldr	pc, [ip, #1728]!	; 0x6c0

00004c30 <fcntl@plt>:
    4c30:	add	ip, pc, #0, 12
    4c34:	add	ip, ip, #135168	; 0x21000
    4c38:	ldr	pc, [ip, #1720]!	; 0x6b8

00004c3c <strncmp@plt>:
    4c3c:	add	ip, pc, #0, 12
    4c40:	add	ip, ip, #135168	; 0x21000
    4c44:	ldr	pc, [ip, #1712]!	; 0x6b0

00004c48 <kill@plt>:
    4c48:	add	ip, pc, #0, 12
    4c4c:	add	ip, ip, #135168	; 0x21000
    4c50:	ldr	pc, [ip, #1704]!	; 0x6a8

00004c54 <nanosleep@plt>:
    4c54:	add	ip, pc, #0, 12
    4c58:	add	ip, ip, #135168	; 0x21000
    4c5c:	ldr	pc, [ip, #1696]!	; 0x6a0

00004c60 <rb_event_next@plt>:
    4c60:	add	ip, pc, #0, 12
    4c64:	add	ip, ip, #135168	; 0x21000
    4c68:	ldr	pc, [ip, #1688]!	; 0x698

00004c6c <realloc@plt>:
    4c6c:	add	ip, pc, #0, 12
    4c70:	add	ip, ip, #135168	; 0x21000
    4c74:	ldr	pc, [ip, #1680]!	; 0x690

00004c78 <timerfd_settime@plt>:
    4c78:	add	ip, pc, #0, 12
    4c7c:	add	ip, ip, #135168	; 0x21000
    4c80:	ldr	pc, [ip, #1672]!	; 0x688

00004c84 <epoll_ctl@plt>:
    4c84:	add	ip, pc, #0, 12
    4c88:	add	ip, ip, #135168	; 0x21000
    4c8c:	ldr	pc, [ip, #1664]!	; 0x680

00004c90 <X509_free@plt>:
    4c90:	add	ip, pc, #0, 12
    4c94:	add	ip, ip, #135168	; 0x21000
    4c98:	ldr	pc, [ip, #1656]!	; 0x678

00004c9c <readv@plt>:
    4c9c:	add	ip, pc, #0, 12
    4ca0:	add	ip, ip, #135168	; 0x21000
    4ca4:	ldr	pc, [ip, #1648]!	; 0x670

00004ca8 <getsockopt@plt>:
    4ca8:	add	ip, pc, #0, 12
    4cac:	add	ip, ip, #135168	; 0x21000
    4cb0:	ldr	pc, [ip, #1640]!	; 0x668

00004cb4 <pipe@plt>:
    4cb4:	add	ip, pc, #0, 12
    4cb8:	add	ip, ip, #135168	; 0x21000
    4cbc:	ldr	pc, [ip, #1632]!	; 0x660

00004cc0 <OpenSSL_version@plt>:
    4cc0:	add	ip, pc, #0, 12
    4cc4:	add	ip, ip, #135168	; 0x21000
    4cc8:	ldr	pc, [ip, #1624]!	; 0x658

00004ccc <setsockopt@plt>:
    4ccc:	add	ip, pc, #0, 12
    4cd0:	add	ip, ip, #135168	; 0x21000
    4cd4:	ldr	pc, [ip, #1616]!	; 0x650

00004cd8 <SSL_get_error@plt>:
    4cd8:	add	ip, pc, #0, 12
    4cdc:	add	ip, ip, #135168	; 0x21000
    4ce0:	ldr	pc, [ip, #1608]!	; 0x648

00004ce4 <SSL_get_version@plt>:
    4ce4:	add	ip, pc, #0, 12
    4ce8:	add	ip, ip, #135168	; 0x21000
    4cec:	ldr	pc, [ip, #1600]!	; 0x640

00004cf0 <rb_radixtree_delete@plt>:
    4cf0:	add	ip, pc, #0, 12
    4cf4:	add	ip, ip, #135168	; 0x21000
    4cf8:	ldr	pc, [ip, #1592]!	; 0x638

00004cfc <setenv@plt>:
    4cfc:	add	ip, pc, #0, 12
    4d00:	add	ip, ip, #135168	; 0x21000
    4d04:	ldr	pc, [ip, #1584]!	; 0x630

00004d08 <strcmp@plt>:
    4d08:	add	ip, pc, #0, 12
    4d0c:	add	ip, ip, #135168	; 0x21000
    4d10:	ldr	pc, [ip, #1576]!	; 0x628

00004d14 <__errno_location@plt>:
    4d14:	add	ip, pc, #0, 12
    4d18:	add	ip, ip, #135168	; 0x21000
    4d1c:	ldr	pc, [ip, #1568]!	; 0x620

00004d20 <__cxa_finalize@plt>:
    4d20:	add	ip, pc, #0, 12
    4d24:	add	ip, ip, #135168	; 0x21000
    4d28:	ldr	pc, [ip, #1560]!	; 0x618

00004d2c <sprintf@plt>:
    4d2c:	add	ip, pc, #0, 12
    4d30:	add	ip, ip, #135168	; 0x21000
    4d34:	ldr	pc, [ip, #1552]!	; 0x610

00004d38 <rb_bh_usage@plt>:
    4d38:	add	ip, pc, #0, 12
    4d3c:	add	ip, ip, #135168	; 0x21000
    4d40:	ldr	pc, [ip, #1544]!	; 0x608

00004d44 <SSL_CTX_set_verify@plt>:
    4d44:	add	ip, pc, #0, 12
    4d48:	add	ip, ip, #135168	; 0x21000
    4d4c:	ldr	pc, [ip, #1536]!	; 0x600

Disassembly of section .text:

00004d50 <call_weak_fn>:
    4d50:	ldr	r3, [pc, #20]	; 4d6c <call_weak_fn+0x1c>
    4d54:	ldr	r2, [pc, #20]	; 4d70 <call_weak_fn+0x20>
    4d58:	add	r3, pc, r3
    4d5c:	ldr	r2, [r3, r2]
    4d60:	cmp	r2, #0
    4d64:	bxeq	lr
    4d68:	b	4528 <__gmon_start__@plt>
    4d6c:	.word	0x000212a0
    4d70:	.word	0x00000360

00004d74 <deregister_tm_clones>:
    4d74:	ldr	r3, [pc, #52]	; 4db0 <deregister_tm_clones+0x3c>
    4d78:	ldr	r0, [pc, #52]	; 4db4 <deregister_tm_clones+0x40>
    4d7c:	add	r3, pc, r3
    4d80:	add	r0, pc, r0
    4d84:	add	r3, r3, #3
    4d88:	sub	r3, r3, r0
    4d8c:	cmp	r3, #6
    4d90:	ldr	r3, [pc, #32]	; 4db8 <deregister_tm_clones+0x44>
    4d94:	add	r3, pc, r3
    4d98:	bxls	lr
    4d9c:	ldr	r2, [pc, #24]	; 4dbc <deregister_tm_clones+0x48>
    4da0:	ldr	r3, [r3, r2]
    4da4:	cmp	r3, #0
    4da8:	bxeq	lr
    4dac:	bx	r3
    4db0:	.word	0x00021750
    4db4:	.word	0x0002174c
    4db8:	.word	0x00021264
    4dbc:	.word	0x00000380

00004dc0 <register_tm_clones>:
    4dc0:	ldr	r1, [pc, #56]	; 4e00 <register_tm_clones+0x40>
    4dc4:	ldr	r0, [pc, #56]	; 4e04 <register_tm_clones+0x44>
    4dc8:	add	r1, pc, r1
    4dcc:	add	r0, pc, r0
    4dd0:	sub	r1, r1, r0
    4dd4:	ldr	r3, [pc, #44]	; 4e08 <register_tm_clones+0x48>
    4dd8:	asr	r1, r1, #2
    4ddc:	add	r3, pc, r3
    4de0:	add	r1, r1, r1, lsr #31
    4de4:	asrs	r1, r1, #1
    4de8:	bxeq	lr
    4dec:	ldr	r2, [pc, #24]	; 4e0c <register_tm_clones+0x4c>
    4df0:	ldr	r3, [r3, r2]
    4df4:	cmp	r3, #0
    4df8:	bxeq	lr
    4dfc:	bx	r3
    4e00:	.word	0x00021704
    4e04:	.word	0x00021700
    4e08:	.word	0x0002121c
    4e0c:	.word	0x00000390

00004e10 <__do_global_dtors_aux>:
    4e10:	ldr	r3, [pc, #76]	; 4e64 <__do_global_dtors_aux+0x54>
    4e14:	ldr	r2, [pc, #76]	; 4e68 <__do_global_dtors_aux+0x58>
    4e18:	add	r3, pc, r3
    4e1c:	add	r2, pc, r2
    4e20:	ldrb	r3, [r3]
    4e24:	cmp	r3, #0
    4e28:	bxne	lr
    4e2c:	ldr	r3, [pc, #56]	; 4e6c <__do_global_dtors_aux+0x5c>
    4e30:	push	{r4, lr}
    4e34:	ldr	r3, [r2, r3]
    4e38:	cmp	r3, #0
    4e3c:	beq	4e4c <__do_global_dtors_aux+0x3c>
    4e40:	ldr	r3, [pc, #40]	; 4e70 <__do_global_dtors_aux+0x60>
    4e44:	ldr	r0, [pc, r3]
    4e48:	bl	4d20 <__cxa_finalize@plt>
    4e4c:	bl	4d74 <deregister_tm_clones>
    4e50:	ldr	r3, [pc, #28]	; 4e74 <__do_global_dtors_aux+0x64>
    4e54:	mov	r2, #1
    4e58:	add	r3, pc, r3
    4e5c:	strb	r2, [r3]
    4e60:	pop	{r4, pc}
    4e64:	.word	0x000216b8
    4e68:	.word	0x000211dc
    4e6c:	.word	0x00000420
    4e70:	.word	0x000215dc
    4e74:	.word	0x00021678

00004e78 <frame_dummy>:
    4e78:	ldr	r0, [pc, #56]	; 4eb8 <frame_dummy+0x40>
    4e7c:	ldr	r3, [pc, #56]	; 4ebc <frame_dummy+0x44>
    4e80:	add	r0, pc, r0
    4e84:	ldr	r2, [r0]
    4e88:	add	r3, pc, r3
    4e8c:	cmp	r2, #0
    4e90:	bne	4e98 <frame_dummy+0x20>
    4e94:	b	4dc0 <register_tm_clones>
    4e98:	ldr	r2, [pc, #32]	; 4ec0 <frame_dummy+0x48>
    4e9c:	ldr	r3, [r3, r2]
    4ea0:	cmp	r3, #0
    4ea4:	beq	4e94 <frame_dummy+0x1c>
    4ea8:	push	{r4, lr}
    4eac:	blx	r3
    4eb0:	pop	{r4, lr}
    4eb4:	b	4dc0 <register_tm_clones>
    4eb8:	.word	0x00020bb8
    4ebc:	.word	0x00021170
    4ec0:	.word	0x00000364

00004ec4 <rb_spawn_process>:
    4ec4:	push	{r4, r5, r6, r7, lr}
    4ec8:	sub	sp, sp, #356	; 0x164
    4ecc:	add	r4, sp, #16
    4ed0:	mov	r6, r0
    4ed4:	mov	r0, r4
    4ed8:	mov	r7, r1
    4edc:	ldr	r5, [pc, #104]	; 4f4c <rb_spawn_process+0x88>
    4ee0:	bl	46e4 <posix_spawnattr_init@plt>
    4ee4:	mov	r1, #64	; 0x40
    4ee8:	mov	r0, r4
    4eec:	bl	4840 <posix_spawnattr_setflags@plt>
    4ef0:	ldr	r3, [pc, #88]	; 4f50 <rb_spawn_process+0x8c>
    4ef4:	add	r5, pc, r5
    4ef8:	mov	r2, #0
    4efc:	ldr	r3, [r5, r3]
    4f00:	mov	r1, r6
    4f04:	add	r0, sp, #12
    4f08:	ldr	r3, [r3]
    4f0c:	str	r7, [sp]
    4f10:	str	r3, [sp, #4]
    4f14:	mov	r3, r4
    4f18:	bl	47f8 <posix_spawn@plt>
    4f1c:	mov	r5, r0
    4f20:	mov	r0, r4
    4f24:	bl	487c <posix_spawnattr_destroy@plt>
    4f28:	cmp	r5, #0
    4f2c:	beq	4f40 <rb_spawn_process+0x7c>
    4f30:	bl	4d14 <__errno_location@plt>
    4f34:	mvn	r3, #0
    4f38:	str	r3, [sp, #12]
    4f3c:	str	r5, [r0]
    4f40:	ldr	r0, [sp, #12]
    4f44:	add	sp, sp, #356	; 0x164
    4f48:	pop	{r4, r5, r6, r7, pc}
    4f4c:	.word	0x00021104
    4f50:	.word	0x000003a8

00004f54 <rb_gettimeofday>:
    4f54:	b	4780 <gettimeofday@plt>

00004f58 <rb_sleep>:
    4f58:	mov	r3, #1000	; 0x3e8
    4f5c:	push	{r0, r1, r2, lr}
    4f60:	mul	r1, r3, r1
    4f64:	add	r3, sp, #8
    4f68:	str	r1, [sp, #4]
    4f6c:	str	r0, [r3, #-8]!
    4f70:	mov	r1, #0
    4f74:	mov	r0, r3
    4f78:	bl	4c54 <nanosleep@plt>
    4f7c:	add	sp, sp, #12
    4f80:	pop	{pc}		; (ldr pc, [sp], #4)

00004f84 <rb_strerror>:
    4f84:	b	43c0 <strerror@plt>

00004f88 <rb_kill>:
    4f88:	b	4c48 <kill@plt>

00004f8c <rb_setenv>:
    4f8c:	b	4cfc <setenv@plt>

00004f90 <rb_waitpid>:
    4f90:	b	48b8 <waitpid@plt>

00004f94 <rb_getpid>:
    4f94:	b	4af8 <getpid@plt>

00004f98 <rb_path_to_self>:
    4f98:	push	{r4, lr}
    4f9c:	mov	r2, #4096	; 0x1000
    4fa0:	ldr	r4, [pc, #32]	; 4fc8 <rb_path_to_self+0x30>
    4fa4:	ldr	r0, [pc, #32]	; 4fcc <rb_path_to_self+0x34>
    4fa8:	add	r4, pc, r4
    4fac:	mov	r1, r4
    4fb0:	add	r0, pc, r0
    4fb4:	bl	4b40 <readlink@plt>
    4fb8:	cmn	r0, #1
    4fbc:	movne	r0, r4
    4fc0:	moveq	r0, #0
    4fc4:	pop	{r4, pc}
    4fc8:	.word	0x00021529
    4fcc:	.word	0x0000e6e0

00004fd0 <rb_init_netio_win32>:
    4fd0:	push	{r4, lr}
    4fd4:	bl	4d14 <__errno_location@plt>
    4fd8:	mov	r3, #38	; 0x26
    4fdc:	str	r3, [r0]
    4fe0:	mvn	r0, #0
    4fe4:	pop	{r4, pc}

00004fe8 <rb_setselect_win32>:
    4fe8:	push	{r4, lr}
    4fec:	bl	4d14 <__errno_location@plt>
    4ff0:	mov	r3, #38	; 0x26
    4ff4:	str	r3, [r0]
    4ff8:	pop	{r4, pc}

00004ffc <rb_select_win32>:
    4ffc:	push	{r4, lr}
    5000:	bl	4d14 <__errno_location@plt>
    5004:	mov	r3, #38	; 0x26
    5008:	str	r3, [r0]
    500c:	mvn	r0, #0
    5010:	pop	{r4, pc}

00005014 <rb_setup_fd_win32>:
    5014:	push	{r4, lr}
    5018:	bl	4d14 <__errno_location@plt>
    501c:	mov	r3, #38	; 0x26
    5020:	str	r3, [r0]
    5024:	mvn	r0, #0
    5028:	pop	{r4, pc}
    502c:	andeq	r0, r0, r0

00005030 <rb_des_init>:
    5030:	ldr	r3, [pc, #1416]	; 55c0 <rb_des_init+0x590>
    5034:	add	r3, pc, r3
    5038:	ldr	r2, [r3]
    503c:	cmp	r2, #1
    5040:	bxeq	lr
    5044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5048:	mov	r2, #0
    504c:	ldr	r5, [pc, #1392]	; 55c4 <rb_des_init+0x594>
    5050:	str	r2, [r3, #4]
    5054:	str	r2, [r3, #8]
    5058:	str	r2, [r3, #12]
    505c:	str	r2, [r3, #16]
    5060:	sub	sp, sp, #52	; 0x34
    5064:	mov	r0, r2
    5068:	add	r3, r3, #20
    506c:	add	r5, pc, r5
    5070:	lsl	lr, r0, #6
    5074:	mov	r2, #0
    5078:	add	r4, r5, lr
    507c:	lsl	ip, r2, #27
    5080:	and	r1, r2, #32
    5084:	orr	r1, r1, ip, lsr #28
    5088:	lsl	ip, r2, #4
    508c:	and	ip, ip, #16
    5090:	orr	r1, r1, ip
    5094:	add	r6, r3, r2
    5098:	ldrb	r1, [r4, r1]
    509c:	add	r2, r2, #1
    50a0:	cmp	r2, #64	; 0x40
    50a4:	strb	r1, [r6, lr]
    50a8:	bne	507c <rb_des_init+0x4c>
    50ac:	add	r0, r0, #1
    50b0:	cmp	r0, #8
    50b4:	bne	5070 <rb_des_init+0x40>
    50b8:	ldr	ip, [pc, #1288]	; 55c8 <rb_des_init+0x598>
    50bc:	mov	r3, #0
    50c0:	add	ip, pc, ip
    50c4:	add	r5, ip, #20
    50c8:	mov	r8, r5
    50cc:	lsl	r4, r3, #7
    50d0:	add	r7, r4, #64	; 0x40
    50d4:	mov	r2, #0
    50d8:	add	r6, ip, r3, lsl #12
    50dc:	b	5110 <rb_des_init+0xe0>
    50e0:	add	sl, r8, r1
    50e4:	orr	lr, r1, r9
    50e8:	ldrb	sl, [sl, r7]
    50ec:	add	lr, r6, lr
    50f0:	add	r1, r1, #1
    50f4:	orr	sl, r0, sl
    50f8:	cmp	r1, #64	; 0x40
    50fc:	strb	sl, [lr, #532]	; 0x214
    5100:	bne	50e0 <rb_des_init+0xb0>
    5104:	add	r2, r2, #1
    5108:	cmp	r2, #64	; 0x40
    510c:	beq	512c <rb_des_init+0xfc>
    5110:	add	r1, r5, r2
    5114:	lsl	r9, r2, #6
    5118:	ldrb	r0, [r1, r4]
    511c:	mov	r1, #0
    5120:	lsl	r0, r0, #4
    5124:	sxtb	r0, r0
    5128:	b	50e0 <rb_des_init+0xb0>
    512c:	add	r3, r3, #1
    5130:	cmp	r3, #4
    5134:	bne	50cc <rb_des_init+0x9c>
    5138:	ldr	r0, [pc, #1164]	; 55cc <rb_des_init+0x59c>
    513c:	ldr	r1, [pc, #1164]	; 55d0 <rb_des_init+0x5a0>
    5140:	add	r0, pc, r0
    5144:	add	r1, pc, r1
    5148:	mov	r2, #0
    514c:	add	r0, r0, #512	; 0x200
    5150:	add	r4, r1, #548	; 0x224
    5154:	add	ip, r1, #676	; 0x2a4
    5158:	mvn	lr, #0
    515c:	ldrb	r3, [r2, r0]
    5160:	strb	lr, [r2, ip]
    5164:	sub	r3, r3, #1
    5168:	uxtb	r3, r3
    516c:	strb	r3, [r2, r4]
    5170:	add	r3, r1, r3
    5174:	strb	r2, [r3, #612]	; 0x264
    5178:	add	r2, r2, #1
    517c:	cmp	r2, #64	; 0x40
    5180:	bne	515c <rb_des_init+0x12c>
    5184:	ldr	r0, [pc, #1096]	; 55d4 <rb_des_init+0x5a4>
    5188:	ldr	r1, [pc, #1096]	; 55d8 <rb_des_init+0x5a8>
    518c:	add	r0, pc, r0
    5190:	add	r1, pc, r1
    5194:	mov	r3, #0
    5198:	add	r1, r1, #576	; 0x240
    519c:	add	ip, r0, #740	; 0x2e4
    51a0:	mvn	lr, #0
    51a4:	ldrb	r2, [r3, r1]
    51a8:	strb	lr, [r3, ip]
    51ac:	add	r2, r0, r2
    51b0:	strb	r3, [r2, #675]	; 0x2a3
    51b4:	add	r3, r3, #1
    51b8:	cmp	r3, #56	; 0x38
    51bc:	bne	51a4 <rb_des_init+0x174>
    51c0:	ldr	r1, [pc, #1044]	; 55dc <rb_des_init+0x5ac>
    51c4:	ldr	r0, [pc, #1044]	; 55e0 <rb_des_init+0x5b0>
    51c8:	add	r1, pc, r1
    51cc:	mov	r3, #0
    51d0:	add	r0, pc, r0
    51d4:	add	r1, r1, #632	; 0x278
    51d8:	ldrb	r2, [r3, r1]
    51dc:	add	r2, r0, r2
    51e0:	strb	r3, [r2, #739]	; 0x2e3
    51e4:	add	r3, r3, #1
    51e8:	cmp	r3, #48	; 0x30
    51ec:	bne	51d8 <rb_des_init+0x1a8>
    51f0:	ldr	r3, [pc, #1004]	; 55e4 <rb_des_init+0x5b4>
    51f4:	ldr	lr, [pc, #1004]	; 55e8 <rb_des_init+0x5b8>
    51f8:	add	r3, pc, r3
    51fc:	add	r3, r3, #804	; 0x324
    5200:	add	lr, pc, lr
    5204:	str	r3, [sp, #8]
    5208:	add	r3, lr, #820	; 0x334
    520c:	str	r3, [sp, #12]
    5210:	ldr	r3, [pc, #980]	; 55ec <rb_des_init+0x5bc>
    5214:	ldr	ip, [pc, #980]	; 55f0 <rb_des_init+0x5c0>
    5218:	add	r3, pc, r3
    521c:	sub	r3, r3, #3248	; 0xcb0
    5220:	sub	r3, r3, #12
    5224:	str	r3, [sp, #24]
    5228:	ldr	r3, [pc, #964]	; 55f4 <rb_des_init+0x5c4>
    522c:	add	ip, pc, ip
    5230:	add	r3, pc, r3
    5234:	add	r3, r3, #676	; 0x2a4
    5238:	str	r3, [sp, #44]	; 0x2c
    523c:	ldr	r3, [pc, #948]	; 55f8 <rb_des_init+0x5c8>
    5240:	add	r9, r0, #796	; 0x31c
    5244:	add	r3, pc, r3
    5248:	sub	r3, r3, #3248	; 0xcb0
    524c:	add	ip, ip, #812	; 0x32c
    5250:	mov	r4, #0
    5254:	sub	r3, r3, #4
    5258:	str	r4, [sp, #4]
    525c:	str	r3, [sp, #28]
    5260:	ldr	r3, [sp, #4]
    5264:	ldr	fp, [pc, #912]	; 55fc <rb_des_init+0x5cc>
    5268:	ldr	r6, [pc, #912]	; 5600 <rb_des_init+0x5d0>
    526c:	add	fp, pc, fp
    5270:	lsl	r3, r3, #3
    5274:	add	sl, fp, #612	; 0x264
    5278:	ldr	r8, [pc, #900]	; 5604 <rb_des_init+0x5d4>
    527c:	add	fp, fp, #548	; 0x224
    5280:	ldr	r7, [pc, #896]	; 5608 <rb_des_init+0x5d8>
    5284:	str	r3, [sp, #16]
    5288:	add	sl, sl, r3
    528c:	add	fp, fp, r3
    5290:	mov	r3, #0
    5294:	add	r6, pc, r6
    5298:	mov	r5, r3
    529c:	add	r8, pc, r8
    52a0:	add	r7, pc, r7
    52a4:	add	r2, r6, #680	; 0x2a8
    52a8:	str	r2, [sp, #20]
    52ac:	ldr	r1, [sp, #12]
    52b0:	lsl	r2, r3, #2
    52b4:	mov	r0, #0
    52b8:	str	r5, [r1, r3, lsl #2]
    52bc:	ldr	r1, [sp, #8]
    52c0:	str	r5, [ip, r3, lsl #2]
    52c4:	str	r5, [r9, r3, lsl #2]
    52c8:	str	r5, [r1, r3, lsl #2]
    52cc:	ldr	r1, [sp, #20]
    52d0:	ldrb	r1, [r0, r1]
    52d4:	tst	r1, r3
    52d8:	beq	5348 <rb_des_init+0x318>
    52dc:	ldrb	r1, [sl, r0]
    52e0:	cmp	r1, #31
    52e4:	add	r1, r6, r1, lsl #2
    52e8:	ldrgt	lr, [sp, #12]
    52ec:	ldrgt	r1, [r1, #560]	; 0x230
    52f0:	ldrle	lr, [ip, r2]
    52f4:	ldrgt	lr, [lr, r2]
    52f8:	ldrle	r1, [r1, #688]	; 0x2b0
    52fc:	orrgt	r1, lr, r1
    5300:	ldrgt	lr, [sp, #12]
    5304:	orrle	r1, lr, r1
    5308:	strle	r1, [ip, r2]
    530c:	strgt	r1, [lr, r2]
    5310:	ldrb	r1, [fp, r0]
    5314:	cmp	r1, #31
    5318:	addgt	r1, r8, r1, lsl #2
    531c:	ldrgt	lr, [sp, #8]
    5320:	addle	r1, r7, r1, lsl #2
    5324:	ldrgt	r1, [r1, #560]	; 0x230
    5328:	ldrgt	lr, [lr, r2]
    532c:	ldrle	r1, [r1, #688]	; 0x2b0
    5330:	ldrle	lr, [r9, r2]
    5334:	orrgt	r1, lr, r1
    5338:	ldrgt	lr, [sp, #8]
    533c:	orrle	r1, lr, r1
    5340:	strle	r1, [r9, r2]
    5344:	strgt	r1, [lr, r2]
    5348:	add	r0, r0, #1
    534c:	cmp	r0, #8
    5350:	bne	52cc <rb_des_init+0x29c>
    5354:	add	r3, r3, #1
    5358:	cmp	r3, #256	; 0x100
    535c:	bne	52ac <rb_des_init+0x27c>
    5360:	ldr	r2, [sp, #4]
    5364:	mov	r3, #7
    5368:	ldr	fp, [pc, #668]	; 560c <rb_des_init+0x5dc>
    536c:	mul	r3, r3, r2
    5370:	ldr	r5, [pc, #664]	; 5610 <rb_des_init+0x5e0>
    5374:	str	r3, [sp, #32]
    5378:	ldr	r3, [sp, #24]
    537c:	add	fp, pc, fp
    5380:	ldr	r6, [pc, #652]	; 5614 <rb_des_init+0x5e4>
    5384:	add	r7, r3, r4
    5388:	add	r3, fp, #680	; 0x2a8
    538c:	add	r5, pc, r5
    5390:	str	r3, [sp, #36]	; 0x24
    5394:	add	r6, pc, r6
    5398:	ldr	r3, [sp, #28]
    539c:	add	r5, r5, #828	; 0x33c
    53a0:	add	r6, r6, #836	; 0x344
    53a4:	mov	r1, #0
    53a8:	add	r5, r5, r4
    53ac:	add	r6, r6, r4
    53b0:	add	r8, r3, r4
    53b4:	lsl	r3, r1, #2
    53b8:	mov	r2, #0
    53bc:	str	r2, [r5, r1, lsl #2]
    53c0:	str	r2, [r7, r1, lsl #2]
    53c4:	ldr	r0, [sp, #36]	; 0x24
    53c8:	add	r2, r2, #1
    53cc:	ldrb	r0, [r2, r0]
    53d0:	tst	r0, r1
    53d4:	beq	541c <rb_des_init+0x3ec>
    53d8:	ldr	r0, [sp, #16]
    53dc:	ldr	lr, [sp, #44]	; 0x2c
    53e0:	add	r0, r2, r0
    53e4:	add	r0, lr, r0
    53e8:	ldrb	r0, [r0, #-1]
    53ec:	cmp	r0, #255	; 0xff
    53f0:	beq	541c <rb_des_init+0x3ec>
    53f4:	cmp	r0, #27
    53f8:	add	r0, fp, r0, lsl #2
    53fc:	ldrle	sl, [r5, r3]
    5400:	ldrle	r0, [r0, #704]	; 0x2c0
    5404:	ldrgt	sl, [r7, r3]
    5408:	ldrgt	r0, [r0, #592]	; 0x250
    540c:	orrle	r0, sl, r0
    5410:	orrgt	r0, sl, r0
    5414:	strle	r0, [r5, r3]
    5418:	strgt	r0, [r7, r3]
    541c:	cmp	r2, #7
    5420:	bne	53c4 <rb_des_init+0x394>
    5424:	ldr	sl, [pc, #492]	; 5618 <rb_des_init+0x5e8>
    5428:	ldr	r0, [pc, #492]	; 561c <rb_des_init+0x5ec>
    542c:	add	sl, pc, sl
    5430:	add	r0, pc, r0
    5434:	add	sl, sl, #740	; 0x2e4
    5438:	mov	r2, #0
    543c:	str	r0, [sp, #20]
    5440:	add	r0, r0, #680	; 0x2a8
    5444:	str	r2, [r6, r3]
    5448:	str	r2, [r8, r3]
    544c:	str	r0, [sp, #40]	; 0x28
    5450:	ldr	r0, [sp, #40]	; 0x28
    5454:	add	r2, r2, #1
    5458:	ldrb	r0, [r2, r0]
    545c:	tst	r0, r1
    5460:	beq	54a8 <rb_des_init+0x478>
    5464:	ldr	r0, [sp, #32]
    5468:	add	r0, r2, r0
    546c:	add	r0, sl, r0
    5470:	ldrb	r0, [r0, #-1]
    5474:	cmp	r0, #255	; 0xff
    5478:	beq	54a8 <rb_des_init+0x478>
    547c:	ldr	lr, [sp, #20]
    5480:	cmp	r0, #23
    5484:	add	r0, lr, r0, lsl #2
    5488:	ldrle	lr, [r6, r3]
    548c:	ldrle	r0, [r0, #720]	; 0x2d0
    5490:	ldrgt	r0, [r0, #624]	; 0x270
    5494:	ldrgt	lr, [r8, r3]
    5498:	orrle	r0, lr, r0
    549c:	orrgt	r0, lr, r0
    54a0:	strle	r0, [r6, r3]
    54a4:	strgt	r0, [r8, r3]
    54a8:	cmp	r2, #7
    54ac:	bne	5450 <rb_des_init+0x420>
    54b0:	add	r1, r1, #1
    54b4:	cmp	r1, #128	; 0x80
    54b8:	bne	53b4 <rb_des_init+0x384>
    54bc:	ldr	r3, [sp, #4]
    54c0:	add	r9, r9, #1024	; 0x400
    54c4:	add	r3, r3, #1
    54c8:	str	r3, [sp, #4]
    54cc:	ldr	r3, [sp, #8]
    54d0:	add	ip, ip, #1024	; 0x400
    54d4:	add	r3, r3, #1024	; 0x400
    54d8:	str	r3, [sp, #8]
    54dc:	ldr	r3, [sp, #12]
    54e0:	add	r4, r4, #512	; 0x200
    54e4:	add	r3, r3, #1024	; 0x400
    54e8:	str	r3, [sp, #12]
    54ec:	ldr	r3, [sp, #4]
    54f0:	cmp	r3, #8
    54f4:	bne	5260 <rb_des_init+0x230>
    54f8:	ldr	r1, [pc, #288]	; 5620 <rb_des_init+0x5f0>
    54fc:	ldr	r0, [pc, #288]	; 5624 <rb_des_init+0x5f4>
    5500:	add	r1, pc, r1
    5504:	mov	r3, #0
    5508:	add	r0, pc, r0
    550c:	add	r1, r1, #816	; 0x330
    5510:	ldrb	r2, [r3, r1]
    5514:	add	r2, r0, r2
    5518:	strb	r3, [r2, #843]	; 0x34b
    551c:	add	r3, r3, #1
    5520:	cmp	r3, #32
    5524:	bne	5510 <rb_des_init+0x4e0>
    5528:	ldr	r6, [pc, #248]	; 5628 <rb_des_init+0x5f8>
    552c:	ldr	r4, [pc, #248]	; 562c <rb_des_init+0x5fc>
    5530:	mov	r1, #0
    5534:	add	r6, pc, r6
    5538:	add	r4, pc, r4
    553c:	add	r3, r0, #876	; 0x36c
    5540:	mov	r8, r1
    5544:	add	r9, r6, #680	; 0x2a8
    5548:	add	r4, r4, #844	; 0x34c
    554c:	mov	r2, #0
    5550:	add	r7, r4, r1
    5554:	lsl	r5, r2, #2
    5558:	mov	r0, #0
    555c:	str	r8, [r3, r2, lsl #2]
    5560:	ldrb	ip, [r0, r9]
    5564:	tst	ip, r2
    5568:	ldrbne	lr, [r7, r0]
    556c:	ldrne	ip, [r3, r5]
    5570:	add	r0, r0, #1
    5574:	addne	lr, r6, lr, lsl #2
    5578:	ldrne	lr, [lr, #688]	; 0x2b0
    557c:	orrne	ip, ip, lr
    5580:	strne	ip, [r3, r5]
    5584:	cmp	r0, #8
    5588:	bne	5560 <rb_des_init+0x530>
    558c:	add	r2, r2, #1
    5590:	cmp	r2, #256	; 0x100
    5594:	bne	5554 <rb_des_init+0x524>
    5598:	add	r1, r1, #8
    559c:	cmp	r1, #32
    55a0:	add	r3, r3, #1024	; 0x400
    55a4:	bne	554c <rb_des_init+0x51c>
    55a8:	ldr	r3, [pc, #128]	; 5630 <rb_des_init+0x600>
    55ac:	mov	r2, #1
    55b0:	add	r3, pc, r3
    55b4:	str	r2, [r3]
    55b8:	add	sp, sp, #52	; 0x34
    55bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55c0:	.word	0x000224a0
    55c4:	.word	0x0000e634
    55c8:	.word	0x00022414
    55cc:	.word	0x0000e560
    55d0:	.word	0x00026380
    55d4:	.word	0x00026338
    55d8:	.word	0x0000e510
    55dc:	.word	0x0000e4d8
    55e0:	.word	0x000262f4
    55e4:	.word	0x000282c4
    55e8:	.word	0x0002c2ac
    55ec:	.word	0x00030284
    55f0:	.word	0x0002a288
    55f4:	.word	0x00026294
    55f8:	.word	0x00032250
    55fc:	.word	0x00026258
    5600:	.word	0x0000e40c
    5604:	.word	0x0000e404
    5608:	.word	0x0000e400
    560c:	.word	0x0000e324
    5610:	.word	0x0002e118
    5614:	.word	0x00030108
    5618:	.word	0x00026098
    561c:	.word	0x0000e270
    5620:	.word	0x0000e1a0
    5624:	.word	0x00031f8c
    5628:	.word	0x0000e16c
    562c:	.word	0x00031f5c
    5630:	.word	0x00021f24

00005634 <_crypt_to64>:
    5634:	ldr	ip, [pc, #36]	; 5660 <_crypt_to64+0x2c>
    5638:	add	ip, pc, ip
    563c:	subs	r2, r2, #1
    5640:	bpl	5648 <_crypt_to64+0x14>
    5644:	bx	lr
    5648:	and	r3, r1, #63	; 0x3f
    564c:	add	r3, ip, r3
    5650:	lsr	r1, r1, #6
    5654:	ldrb	r3, [r3, #848]	; 0x350
    5658:	strb	r3, [r0], #1
    565c:	b	563c <_crypt_to64+0x8>
    5660:	.word	0x0000e068

00005664 <rb_sha256_process_block>:
    5664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5668:	sub	sp, sp, #308	; 0x134
    566c:	lsr	r3, r1, #2
    5670:	str	r3, [sp, #36]	; 0x24
    5674:	ldr	r3, [r2]
    5678:	ldr	sl, [r2, #28]
    567c:	str	r3, [sp, #4]
    5680:	ldr	r3, [r2, #4]
    5684:	add	r9, sp, #48	; 0x30
    5688:	str	r3, [sp, #8]
    568c:	ldr	r3, [r2, #8]
    5690:	str	r0, [sp, #32]
    5694:	str	r3, [sp, #12]
    5698:	ldr	r3, [r2, #12]
    569c:	str	r3, [sp, #16]
    56a0:	ldr	r3, [r2, #16]
    56a4:	str	r3, [sp, #20]
    56a8:	ldr	r3, [r2, #20]
    56ac:	str	r3, [sp, #24]
    56b0:	ldr	r3, [r2, #24]
    56b4:	str	r3, [sp, #28]
    56b8:	ldr	r3, [r2, #32]
    56bc:	add	r3, r1, r3
    56c0:	cmp	r1, r3
    56c4:	str	r3, [r2, #32]
    56c8:	ldrhi	r3, [r2, #36]	; 0x24
    56cc:	addhi	r3, r3, #1
    56d0:	strhi	r3, [r2, #36]	; 0x24
    56d4:	ldr	r3, [pc, #492]	; 58c8 <rb_sha256_process_block+0x264>
    56d8:	add	r3, pc, r3
    56dc:	add	r3, r3, #916	; 0x394
    56e0:	str	r3, [sp, #44]	; 0x2c
    56e4:	ldr	r3, [sp, #36]	; 0x24
    56e8:	cmp	r3, #0
    56ec:	bne	5734 <rb_sha256_process_block+0xd0>
    56f0:	ldr	r3, [sp, #4]
    56f4:	str	sl, [r2, #28]
    56f8:	str	r3, [r2]
    56fc:	ldr	r3, [sp, #8]
    5700:	str	r3, [r2, #4]
    5704:	ldr	r3, [sp, #12]
    5708:	str	r3, [r2, #8]
    570c:	ldr	r3, [sp, #16]
    5710:	str	r3, [r2, #12]
    5714:	ldr	r3, [sp, #20]
    5718:	str	r3, [r2, #16]
    571c:	ldr	r3, [sp, #24]
    5720:	str	r3, [r2, #20]
    5724:	ldr	r3, [sp, #28]
    5728:	str	r3, [r2, #24]
    572c:	add	sp, sp, #308	; 0x134
    5730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5734:	mov	r3, #0
    5738:	ldr	r1, [sp, #32]
    573c:	ldr	r1, [r1, r3, lsl #2]
    5740:	rev	r1, r1
    5744:	str	r1, [r9, r3, lsl #2]
    5748:	add	r3, r3, #1
    574c:	cmp	r3, #16
    5750:	bne	5738 <rb_sha256_process_block+0xd4>
    5754:	ldr	r3, [sp, #32]
    5758:	mov	r1, r9
    575c:	mov	ip, #48	; 0x30
    5760:	add	r3, r3, #64	; 0x40
    5764:	str	r3, [sp, #32]
    5768:	ldr	r3, [r1, #56]	; 0x38
    576c:	mov	r4, r1
    5770:	ldr	lr, [r1, #4]!
    5774:	ror	r0, r3, #19
    5778:	eor	r0, r0, r3, ror #17
    577c:	eor	r0, r0, r3, lsr #10
    5780:	ldr	r3, [r4, #36]	; 0x24
    5784:	ldr	r4, [r4]
    5788:	subs	ip, ip, #1
    578c:	add	r3, r3, r4
    5790:	ror	r4, lr, #18
    5794:	eor	r4, r4, lr, ror #7
    5798:	add	r0, r0, r3
    579c:	eor	lr, r4, lr, lsr #3
    57a0:	add	r0, r0, lr
    57a4:	str	r0, [r1, #60]	; 0x3c
    57a8:	bne	5768 <rb_sha256_process_block+0x104>
    57ac:	ldr	r7, [sp, #28]
    57b0:	ldr	r8, [sp, #24]
    57b4:	ldr	r0, [sp, #20]
    57b8:	ldr	r4, [sp, #12]
    57bc:	ldr	r5, [sp, #8]
    57c0:	ldr	lr, [sp, #4]
    57c4:	ldr	r3, [sp, #16]
    57c8:	mov	fp, sl
    57cc:	str	r3, [sp, #40]	; 0x28
    57d0:	ldr	r1, [sp, #44]	; 0x2c
    57d4:	ldr	r6, [r9, ip, lsl #2]
    57d8:	ror	r3, r0, #11
    57dc:	ldr	r1, [r1, ip, lsl #2]
    57e0:	eor	r3, r3, r0, ror #6
    57e4:	add	r1, r1, r6
    57e8:	eor	r3, r3, r0, ror #25
    57ec:	add	r3, r3, r1
    57f0:	bic	r6, r7, r0
    57f4:	and	r1, r0, r8
    57f8:	eor	r1, r1, r6
    57fc:	add	r1, r3, r1
    5800:	ror	r6, lr, #13
    5804:	eor	r3, r4, r5
    5808:	add	r1, r1, fp
    580c:	eor	r6, r6, lr, ror #2
    5810:	and	fp, r5, r4
    5814:	and	r3, r3, lr
    5818:	eor	r3, r3, fp
    581c:	eor	r6, r6, lr, ror #22
    5820:	add	r6, r6, r3
    5824:	add	ip, ip, #1
    5828:	ldr	r3, [sp, #40]	; 0x28
    582c:	cmp	ip, #64	; 0x40
    5830:	add	r3, r1, r3
    5834:	str	r4, [sp, #40]	; 0x28
    5838:	add	r1, r1, r6
    583c:	mov	fp, r7
    5840:	bne	58ac <rb_sha256_process_block+0x248>
    5844:	ldr	ip, [sp, #4]
    5848:	add	sl, sl, r7
    584c:	add	r1, ip, r1
    5850:	str	r1, [sp, #4]
    5854:	ldr	r1, [sp, #8]
    5858:	add	r1, r1, lr
    585c:	str	r1, [sp, #8]
    5860:	ldr	r1, [sp, #12]
    5864:	add	r1, r1, r5
    5868:	str	r1, [sp, #12]
    586c:	ldr	r1, [sp, #16]
    5870:	add	r1, r1, r4
    5874:	str	r1, [sp, #16]
    5878:	ldr	r1, [sp, #20]
    587c:	add	r3, r1, r3
    5880:	str	r3, [sp, #20]
    5884:	ldr	r3, [sp, #24]
    5888:	add	r3, r3, r0
    588c:	str	r3, [sp, #24]
    5890:	ldr	r3, [sp, #28]
    5894:	add	r3, r3, r8
    5898:	str	r3, [sp, #28]
    589c:	ldr	r3, [sp, #36]	; 0x24
    58a0:	sub	r3, r3, #16
    58a4:	str	r3, [sp, #36]	; 0x24
    58a8:	b	56e4 <rb_sha256_process_block+0x80>
    58ac:	mov	r7, r8
    58b0:	mov	r4, r5
    58b4:	mov	r8, r0
    58b8:	mov	r5, lr
    58bc:	mov	r0, r3
    58c0:	mov	lr, r1
    58c4:	b	57d0 <rb_sha256_process_block+0x16c>
    58c8:	.word	0x0000dfc8

000058cc <rb_sha256_init_ctx>:
    58cc:	ldr	r3, [pc, #64]	; 5914 <rb_sha256_init_ctx+0x48>
    58d0:	ldr	r1, [pc, #64]	; 5918 <rb_sha256_init_ctx+0x4c>
    58d4:	ldr	r2, [pc, #64]	; 591c <rb_sha256_init_ctx+0x50>
    58d8:	ldr	ip, [pc, #64]	; 5920 <rb_sha256_init_ctx+0x54>
    58dc:	stm	r0, {r1, r2, r3, ip}
    58e0:	ldr	r3, [pc, #60]	; 5924 <rb_sha256_init_ctx+0x58>
    58e4:	str	r3, [r0, #16]
    58e8:	ldr	r3, [pc, #56]	; 5928 <rb_sha256_init_ctx+0x5c>
    58ec:	str	r3, [r0, #20]
    58f0:	ldr	r3, [pc, #52]	; 592c <rb_sha256_init_ctx+0x60>
    58f4:	str	r3, [r0, #24]
    58f8:	ldr	r3, [pc, #48]	; 5930 <rb_sha256_init_ctx+0x64>
    58fc:	str	r3, [r0, #28]
    5900:	mov	r3, #0
    5904:	str	r3, [r0, #36]	; 0x24
    5908:	str	r3, [r0, #32]
    590c:	str	r3, [r0, #40]	; 0x28
    5910:	bx	lr
    5914:	.word	0x3c6ef372
    5918:	.word	0x6a09e667
    591c:	.word	0xbb67ae85
    5920:	.word	0xa54ff53a
    5924:	.word	0x510e527f
    5928:	.word	0x9b05688c
    592c:	.word	0x1f83d9ab
    5930:	.word	0x5be0cd19

00005934 <rb_sha512_process_block>:
    5934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5938:	sub	sp, sp, #876	; 0x36c
    593c:	ldrd	r4, [r2]
    5940:	mov	r7, #0
    5944:	lsr	r3, r1, #3
    5948:	strd	r4, [sp, #16]
    594c:	ldrd	r4, [r2, #8]
    5950:	str	r3, [sp, #224]	; 0xe0
    5954:	strd	r4, [sp, #24]
    5958:	ldrd	r4, [r2, #16]
    595c:	strd	r4, [sp, #32]
    5960:	ldrd	r4, [r2, #24]
    5964:	strd	r4, [sp, #40]	; 0x28
    5968:	ldrd	r4, [r2, #32]
    596c:	strd	r4, [sp, #48]	; 0x30
    5970:	ldrd	r4, [r2, #40]	; 0x28
    5974:	strd	r4, [sp, #56]	; 0x38
    5978:	ldrd	r4, [r2, #48]	; 0x30
    597c:	strd	r4, [sp, #64]	; 0x40
    5980:	ldrd	r4, [r2, #56]	; 0x38
    5984:	strd	r4, [sp, #72]	; 0x48
    5988:	ldrd	r4, [r2, #64]	; 0x40
    598c:	adds	r4, r4, r1
    5990:	adc	r5, r5, r7
    5994:	cmp	r7, r5
    5998:	cmpeq	r1, r4
    599c:	strd	r4, [r2, #64]	; 0x40
    59a0:	bls	59b4 <rb_sha512_process_block+0x80>
    59a4:	ldrd	r4, [r2, #72]	; 0x48
    59a8:	adds	r4, r4, #1
    59ac:	adc	r5, r5, #0
    59b0:	strd	r4, [r2, #72]	; 0x48
    59b4:	ldr	r3, [pc, #1116]	; 5e18 <rb_sha512_process_block+0x4e4>
    59b8:	add	lr, sp, #232	; 0xe8
    59bc:	add	r3, pc, r3
    59c0:	add	r3, r3, #1168	; 0x490
    59c4:	add	r3, r3, #8
    59c8:	str	r0, [sp, #116]	; 0x74
    59cc:	str	r3, [sp, #228]	; 0xe4
    59d0:	ldr	r3, [sp, #224]	; 0xe0
    59d4:	cmp	r3, #0
    59d8:	bne	5a24 <rb_sha512_process_block+0xf0>
    59dc:	ldrd	r0, [sp, #16]
    59e0:	strd	r0, [r2]
    59e4:	ldrd	r0, [sp, #24]
    59e8:	strd	r0, [r2, #8]
    59ec:	ldrd	r0, [sp, #32]
    59f0:	strd	r0, [r2, #16]
    59f4:	ldrd	r0, [sp, #40]	; 0x28
    59f8:	strd	r0, [r2, #24]
    59fc:	ldrd	r0, [sp, #48]	; 0x30
    5a00:	strd	r0, [r2, #32]
    5a04:	ldrd	r0, [sp, #56]	; 0x38
    5a08:	strd	r0, [r2, #40]	; 0x28
    5a0c:	ldrd	r0, [sp, #64]	; 0x40
    5a10:	strd	r0, [r2, #48]	; 0x30
    5a14:	ldrd	r0, [sp, #72]	; 0x48
    5a18:	strd	r0, [r2, #56]	; 0x38
    5a1c:	add	sp, sp, #876	; 0x36c
    5a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a24:	mov	r3, #0
    5a28:	ldr	r1, [sp, #116]	; 0x74
    5a2c:	ldr	r0, [r1, r3]!
    5a30:	rev	r0, r0
    5a34:	ldr	ip, [r1, #4]
    5a38:	mov	r1, r3
    5a3c:	add	r3, r3, #8
    5a40:	rev	ip, ip
    5a44:	cmp	r3, #128	; 0x80
    5a48:	str	ip, [r1, lr]!
    5a4c:	str	r0, [r1, #4]
    5a50:	bne	5a28 <rb_sha512_process_block+0xf4>
    5a54:	ldr	r3, [sp, #116]	; 0x74
    5a58:	mov	r1, lr
    5a5c:	add	r3, r3, #128	; 0x80
    5a60:	str	r3, [sp, #116]	; 0x74
    5a64:	mov	r3, #64	; 0x40
    5a68:	mov	r4, r1
    5a6c:	ldr	r9, [r1, #112]	; 0x70
    5a70:	ldrd	r6, [r4, #72]	; 0x48
    5a74:	ldrd	r4, [r4]
    5a78:	ldr	r8, [r1, #116]	; 0x74
    5a7c:	ldr	ip, [r1, #8]
    5a80:	adds	r6, r6, r4
    5a84:	lsr	r4, r9, #19
    5a88:	orr	r4, r4, r8, lsl #13
    5a8c:	str	r4, [sp, #136]	; 0x88
    5a90:	lsr	r4, r8, #19
    5a94:	orr	r4, r4, r9, lsl #13
    5a98:	str	r4, [sp, #140]	; 0x8c
    5a9c:	lsl	r4, r8, #3
    5aa0:	orr	r4, r4, r9, lsr #29
    5aa4:	str	r4, [sp, #148]	; 0x94
    5aa8:	lsl	r4, r9, #3
    5aac:	orr	r4, r4, r8, lsr #29
    5ab0:	lsr	r9, r9, #6
    5ab4:	orr	r9, r9, r8, lsl #26
    5ab8:	str	r4, [sp, #144]	; 0x90
    5abc:	lsr	r8, r8, #6
    5ac0:	adc	r7, r7, r5
    5ac4:	ldrd	sl, [sp, #144]	; 0x90
    5ac8:	ldrd	r4, [sp, #136]	; 0x88
    5acc:	str	r9, [sp, #96]	; 0x60
    5ad0:	str	r8, [sp, #100]	; 0x64
    5ad4:	ldrd	r8, [sp, #96]	; 0x60
    5ad8:	ldr	r0, [r1, #12]
    5adc:	eor	r4, r4, sl
    5ae0:	eor	r8, r8, r4
    5ae4:	lsr	r4, ip, #1
    5ae8:	orr	r4, r4, r0, lsl #31
    5aec:	str	r4, [sp, #152]	; 0x98
    5af0:	lsr	r4, r0, #1
    5af4:	orr	r4, r4, ip, lsl #31
    5af8:	str	r4, [sp, #156]	; 0x9c
    5afc:	lsr	r4, ip, #8
    5b00:	orr	r4, r4, r0, lsl #24
    5b04:	str	r4, [sp, #160]	; 0xa0
    5b08:	lsr	r4, r0, #8
    5b0c:	orr	r4, r4, ip, lsl #24
    5b10:	eor	r5, r5, fp
    5b14:	eor	r9, r9, r5
    5b18:	adds	r6, r6, r8
    5b1c:	str	r4, [sp, #164]	; 0xa4
    5b20:	adc	r7, r7, r9
    5b24:	ldrd	r4, [sp, #152]	; 0x98
    5b28:	ldrd	r8, [sp, #160]	; 0xa0
    5b2c:	lsr	ip, ip, #7
    5b30:	orr	ip, ip, r0, lsl #25
    5b34:	lsr	r0, r0, #7
    5b38:	str	ip, [sp, #104]	; 0x68
    5b3c:	str	r0, [sp, #108]	; 0x6c
    5b40:	eor	r4, r4, r8
    5b44:	eor	r5, r5, r9
    5b48:	ldrd	r8, [sp, #104]	; 0x68
    5b4c:	add	r1, r1, #8
    5b50:	eor	r8, r8, r4
    5b54:	adds	r4, r8, r6
    5b58:	eor	r9, r9, r5
    5b5c:	adc	r5, r9, r7
    5b60:	subs	r3, r3, #1
    5b64:	strd	r4, [r1, #120]	; 0x78
    5b68:	bne	5a68 <rb_sha512_process_block+0x134>
    5b6c:	ldrd	r0, [sp, #72]	; 0x48
    5b70:	ldrd	sl, [sp, #48]	; 0x30
    5b74:	ldrd	r6, [sp, #16]
    5b78:	strd	r0, [sp, #128]	; 0x80
    5b7c:	ldrd	r0, [sp, #64]	; 0x40
    5b80:	strd	r0, [sp, #88]	; 0x58
    5b84:	ldrd	r0, [sp, #56]	; 0x38
    5b88:	strd	r0, [sp, #80]	; 0x50
    5b8c:	ldrd	r0, [sp, #40]	; 0x28
    5b90:	strd	r0, [sp, #120]	; 0x78
    5b94:	ldrd	r0, [sp, #32]
    5b98:	strd	r0, [sp, #8]
    5b9c:	ldrd	r0, [sp, #24]
    5ba0:	strd	r0, [sp]
    5ba4:	ldr	r1, [sp, #228]	; 0xe4
    5ba8:	lsl	ip, fp, #23
    5bac:	orr	ip, ip, sl, lsr #9
    5bb0:	ldrd	r4, [r3, r1]
    5bb4:	ldrd	r0, [r3, lr]
    5bb8:	str	ip, [sp, #188]	; 0xbc
    5bbc:	lsl	ip, sl, #23
    5bc0:	adds	r4, r4, r0
    5bc4:	adc	r5, r5, r1
    5bc8:	lsr	r1, sl, #14
    5bcc:	orr	r1, r1, fp, lsl #18
    5bd0:	str	r1, [sp, #168]	; 0xa8
    5bd4:	lsr	r1, fp, #14
    5bd8:	orr	r1, r1, sl, lsl #18
    5bdc:	str	r1, [sp, #172]	; 0xac
    5be0:	lsr	r1, sl, #18
    5be4:	orr	r1, r1, fp, lsl #14
    5be8:	str	r1, [sp, #176]	; 0xb0
    5bec:	lsr	r1, fp, #18
    5bf0:	orr	r1, r1, sl, lsl #14
    5bf4:	str	r1, [sp, #180]	; 0xb4
    5bf8:	ldrd	r8, [sp, #176]	; 0xb0
    5bfc:	ldrd	r0, [sp, #168]	; 0xa8
    5c00:	orr	ip, ip, fp, lsr #9
    5c04:	str	ip, [sp, #184]	; 0xb8
    5c08:	eor	r0, r0, r8
    5c0c:	eor	r1, r1, r9
    5c10:	ldrd	r8, [sp, #184]	; 0xb8
    5c14:	add	r3, r3, #8
    5c18:	eor	r8, r8, r0
    5c1c:	adds	r0, r8, r4
    5c20:	eor	r9, r9, r1
    5c24:	adc	r1, r9, r5
    5c28:	ldrd	r4, [sp, #80]	; 0x50
    5c2c:	and	r4, r4, sl
    5c30:	and	r5, r5, fp
    5c34:	mov	r8, r4
    5c38:	mov	r9, r5
    5c3c:	ldrd	r4, [sp, #88]	; 0x58
    5c40:	bic	r4, r4, sl
    5c44:	bic	r5, r5, fp
    5c48:	eor	r8, r8, r4
    5c4c:	adds	r4, r8, r0
    5c50:	eor	r9, r9, r5
    5c54:	adc	r5, r9, r1
    5c58:	ldrd	r0, [sp, #128]	; 0x80
    5c5c:	adds	r0, r0, r4
    5c60:	adc	r1, r1, r5
    5c64:	ldrd	r4, [sp]
    5c68:	strd	r0, [sp, #128]	; 0x80
    5c6c:	lsr	r1, r6, #28
    5c70:	orr	r1, r1, r7, lsl #4
    5c74:	str	r1, [sp, #192]	; 0xc0
    5c78:	lsr	r1, r7, #28
    5c7c:	orr	r1, r1, r6, lsl #4
    5c80:	str	r1, [sp, #196]	; 0xc4
    5c84:	lsl	r1, r7, #30
    5c88:	orr	r1, r1, r6, lsr #2
    5c8c:	str	r1, [sp, #204]	; 0xcc
    5c90:	lsl	r1, r6, #30
    5c94:	orr	r1, r1, r7, lsr #2
    5c98:	str	r1, [sp, #200]	; 0xc8
    5c9c:	ldrd	r0, [sp, #200]	; 0xc8
    5ca0:	ldrd	r8, [sp, #192]	; 0xc0
    5ca4:	eor	r9, r9, r1
    5ca8:	lsl	r1, r7, #25
    5cac:	orr	r1, r1, r6, lsr #7
    5cb0:	str	r1, [sp, #212]	; 0xd4
    5cb4:	lsl	r1, r6, #25
    5cb8:	orr	r1, r1, r7, lsr #7
    5cbc:	str	r1, [sp, #208]	; 0xd0
    5cc0:	eor	r8, r8, r0
    5cc4:	ldrd	r0, [sp, #208]	; 0xd0
    5cc8:	eor	r0, r0, r8
    5ccc:	eor	r1, r1, r9
    5cd0:	mov	r8, r0
    5cd4:	mov	r9, r1
    5cd8:	ldrd	r0, [sp, #8]
    5cdc:	eor	r0, r0, r4
    5ce0:	eor	r1, r1, r5
    5ce4:	and	r4, r0, r6
    5ce8:	and	r5, r1, r7
    5cec:	ldrd	r0, [sp]
    5cf0:	strd	r4, [sp, #216]	; 0xd8
    5cf4:	ldrd	r4, [sp, #8]
    5cf8:	and	r4, r4, r0
    5cfc:	and	r5, r5, r1
    5d00:	ldrd	r0, [sp, #216]	; 0xd8
    5d04:	eor	r0, r0, r4
    5d08:	adds	r0, r0, r8
    5d0c:	eor	r1, r1, r5
    5d10:	adc	r1, r1, r9
    5d14:	ldrd	r4, [sp, #120]	; 0x78
    5d18:	ldrd	r8, [sp, #128]	; 0x80
    5d1c:	adds	r4, r4, r8
    5d20:	adc	r5, r5, r9
    5d24:	adds	r8, r8, r0
    5d28:	adc	r9, r9, r1
    5d2c:	mov	r0, r8
    5d30:	mov	r1, r9
    5d34:	ldrd	r8, [sp, #8]
    5d38:	cmp	r3, #640	; 0x280
    5d3c:	strd	r8, [sp, #120]	; 0x78
    5d40:	ldrd	r8, [sp, #88]	; 0x58
    5d44:	strd	r8, [sp, #128]	; 0x80
    5d48:	bne	5dec <rb_sha512_process_block+0x4b8>
    5d4c:	ldrd	r8, [sp, #16]
    5d50:	ldr	r3, [sp, #224]	; 0xe0
    5d54:	adds	r8, r8, r0
    5d58:	adc	r9, r9, r1
    5d5c:	ldrd	r0, [sp, #24]
    5d60:	sub	r3, r3, #16
    5d64:	strd	r8, [sp, #16]
    5d68:	adds	r0, r0, r6
    5d6c:	adc	r1, r1, r7
    5d70:	ldrd	r6, [sp, #32]
    5d74:	strd	r0, [sp, #24]
    5d78:	ldrd	r0, [sp]
    5d7c:	str	r3, [sp, #224]	; 0xe0
    5d80:	adds	r0, r0, r6
    5d84:	adc	r1, r1, r7
    5d88:	ldrd	r6, [sp, #40]	; 0x28
    5d8c:	strd	r0, [sp, #32]
    5d90:	ldrd	r0, [sp, #8]
    5d94:	adds	r0, r0, r6
    5d98:	adc	r1, r1, r7
    5d9c:	strd	r0, [sp, #40]	; 0x28
    5da0:	ldrd	r0, [sp, #48]	; 0x30
    5da4:	adds	r0, r0, r4
    5da8:	adc	r1, r1, r5
    5dac:	ldrd	r4, [sp, #64]	; 0x40
    5db0:	strd	r0, [sp, #48]	; 0x30
    5db4:	ldrd	r0, [sp, #56]	; 0x38
    5db8:	adds	r0, r0, sl
    5dbc:	adc	r1, r1, fp
    5dc0:	strd	r0, [sp, #56]	; 0x38
    5dc4:	ldrd	r0, [sp, #80]	; 0x50
    5dc8:	adds	r0, r0, r4
    5dcc:	adc	r1, r1, r5
    5dd0:	ldrd	r4, [sp, #72]	; 0x48
    5dd4:	strd	r0, [sp, #64]	; 0x40
    5dd8:	ldrd	r0, [sp, #88]	; 0x58
    5ddc:	adds	r0, r0, r4
    5de0:	adc	r1, r1, r5
    5de4:	strd	r0, [sp, #72]	; 0x48
    5de8:	b	59d0 <rb_sha512_process_block+0x9c>
    5dec:	ldrd	r8, [sp, #80]	; 0x50
    5df0:	strd	sl, [sp, #80]	; 0x50
    5df4:	mov	sl, r4
    5df8:	mov	fp, r5
    5dfc:	ldrd	r4, [sp]
    5e00:	strd	r8, [sp, #88]	; 0x58
    5e04:	strd	r6, [sp]
    5e08:	strd	r4, [sp, #8]
    5e0c:	mov	r6, r0
    5e10:	mov	r7, r1
    5e14:	b	5ba4 <rb_sha512_process_block+0x270>
    5e18:	.word	0x0000dce4

00005e1c <rb_sha512_init_ctx>:
    5e1c:	add	r3, pc, #116	; 0x74
    5e20:	ldrd	r2, [r3]
    5e24:	strd	r2, [r0]
    5e28:	add	r3, pc, #112	; 0x70
    5e2c:	ldrd	r2, [r3]
    5e30:	strd	r2, [r0, #8]
    5e34:	add	r3, pc, #108	; 0x6c
    5e38:	ldrd	r2, [r3]
    5e3c:	strd	r2, [r0, #16]
    5e40:	add	r3, pc, #104	; 0x68
    5e44:	ldrd	r2, [r3]
    5e48:	strd	r2, [r0, #24]
    5e4c:	add	r3, pc, #100	; 0x64
    5e50:	ldrd	r2, [r3]
    5e54:	strd	r2, [r0, #32]
    5e58:	add	r3, pc, #96	; 0x60
    5e5c:	ldrd	r2, [r3]
    5e60:	strd	r2, [r0, #40]	; 0x28
    5e64:	add	r3, pc, #92	; 0x5c
    5e68:	ldrd	r2, [r3]
    5e6c:	strd	r2, [r0, #48]	; 0x30
    5e70:	add	r3, pc, #88	; 0x58
    5e74:	ldrd	r2, [r3]
    5e78:	strd	r2, [r0, #56]	; 0x38
    5e7c:	mov	r2, #0
    5e80:	mov	r3, #0
    5e84:	strd	r2, [r0, #72]	; 0x48
    5e88:	strd	r2, [r0, #64]	; 0x40
    5e8c:	strd	r2, [r0, #80]	; 0x50
    5e90:	bx	lr
    5e94:	nop			; (mov r0, r0)
    5e98:	.word	0xf3bcc908
    5e9c:	.word	0x6a09e667
    5ea0:	.word	0x84caa73b
    5ea4:	.word	0xbb67ae85
    5ea8:	.word	0xfe94f82b
    5eac:	.word	0x3c6ef372
    5eb0:	.word	0x5f1d36f1
    5eb4:	.word	0xa54ff53a
    5eb8:	.word	0xade682d1
    5ebc:	.word	0x510e527f
    5ec0:	.word	0x2b3e6c1f
    5ec4:	.word	0x9b05688c
    5ec8:	.word	0xfb41bd6b
    5ecc:	.word	0x1f83d9ab
    5ed0:	.word	0x137e2179
    5ed4:	.word	0x5be0cd19

00005ed8 <MD5Transform>:
    5ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5edc:	sub	sp, sp, #76	; 0x4c
    5ee0:	ldr	r3, [r0]
    5ee4:	ldr	lr, [r0, #4]
    5ee8:	ldr	r5, [r0, #8]
    5eec:	ldr	r6, [r0, #12]
    5ef0:	str	r3, [sp, #4]
    5ef4:	mov	r4, r0
    5ef8:	mov	r3, r1
    5efc:	add	ip, sp, #8
    5f00:	add	r7, r1, #64	; 0x40
    5f04:	ldr	r0, [r3]
    5f08:	ldr	r1, [r3, #4]
    5f0c:	mov	r2, ip
    5f10:	add	r3, r3, #8
    5f14:	cmp	r3, r7
    5f18:	stmia	r2!, {r0, r1}
    5f1c:	mov	ip, r2
    5f20:	bne	5f04 <MD5Transform+0x2c>
    5f24:	ldr	r2, [sp, #8]
    5f28:	ldr	r3, [pc, #2228]	; 67e4 <MD5Transform+0x90c>
    5f2c:	ldr	r1, [pc, #2228]	; 67e8 <MD5Transform+0x910>
    5f30:	add	r3, r2, r3
    5f34:	ldr	r2, [sp, #4]
    5f38:	ldr	r0, [pc, #2220]	; 67ec <MD5Transform+0x914>
    5f3c:	add	r2, r3, r2
    5f40:	eor	r3, r5, r6
    5f44:	and	r3, r3, lr
    5f48:	eor	r3, r3, r6
    5f4c:	add	r3, r3, r2
    5f50:	ldr	r2, [sp, #12]
    5f54:	add	r3, lr, r3, ror #25
    5f58:	add	r1, r2, r1
    5f5c:	add	r2, r1, r6
    5f60:	eor	r1, lr, r5
    5f64:	and	r1, r1, r3
    5f68:	eor	r1, r1, r5
    5f6c:	add	r1, r1, r2
    5f70:	ldr	r2, [sp, #16]
    5f74:	add	r1, r3, r1, ror #20
    5f78:	add	r0, r2, r0
    5f7c:	add	r2, r0, r5
    5f80:	eor	r0, lr, r3
    5f84:	and	r0, r0, r1
    5f88:	eor	r0, r0, lr
    5f8c:	ldr	ip, [sp, #20]
    5f90:	add	r0, r0, r2
    5f94:	ldr	r2, [pc, #2132]	; 67f0 <MD5Transform+0x918>
    5f98:	add	r0, r1, r0, ror #15
    5f9c:	add	r2, ip, r2
    5fa0:	add	ip, r2, lr
    5fa4:	eor	r2, r3, r1
    5fa8:	and	r2, r2, r0
    5fac:	eor	r2, r2, r3
    5fb0:	ldr	r7, [sp, #24]
    5fb4:	add	r2, r2, ip
    5fb8:	ldr	ip, [pc, #2100]	; 67f4 <MD5Transform+0x91c>
    5fbc:	add	r2, r0, r2, ror #10
    5fc0:	add	ip, r7, ip
    5fc4:	add	ip, ip, r3
    5fc8:	eor	r3, r1, r0
    5fcc:	and	r3, r3, r2
    5fd0:	eor	r3, r3, r1
    5fd4:	ldr	r7, [sp, #28]
    5fd8:	add	r3, r3, ip
    5fdc:	ldr	ip, [pc, #2068]	; 67f8 <MD5Transform+0x920>
    5fe0:	add	r3, r2, r3, ror #25
    5fe4:	add	ip, r7, ip
    5fe8:	add	ip, ip, r1
    5fec:	eor	r1, r0, r2
    5ff0:	and	r1, r1, r3
    5ff4:	eor	r1, r1, r0
    5ff8:	ldr	r7, [sp, #32]
    5ffc:	add	r1, r1, ip
    6000:	ldr	ip, [pc, #2036]	; 67fc <MD5Transform+0x924>
    6004:	add	r1, r3, r1, ror #20
    6008:	add	ip, r7, ip
    600c:	add	ip, ip, r0
    6010:	eor	r0, r2, r3
    6014:	and	r0, r0, r1
    6018:	eor	r0, r0, r2
    601c:	ldr	sl, [sp, #36]	; 0x24
    6020:	add	r0, r0, ip
    6024:	ldr	ip, [pc, #2004]	; 6800 <MD5Transform+0x928>
    6028:	add	r0, r1, r0, ror #15
    602c:	add	ip, sl, ip
    6030:	add	ip, ip, r2
    6034:	eor	r2, r3, r1
    6038:	and	r2, r2, r0
    603c:	eor	r2, r2, r3
    6040:	ldr	r7, [sp, #40]	; 0x28
    6044:	add	r2, r2, ip
    6048:	ldr	ip, [pc, #1972]	; 6804 <MD5Transform+0x92c>
    604c:	add	r2, r0, r2, ror #10
    6050:	add	ip, r7, ip
    6054:	add	ip, ip, r3
    6058:	eor	r3, r1, r0
    605c:	and	r3, r3, r2
    6060:	eor	r3, r3, r1
    6064:	ldr	r7, [sp, #44]	; 0x2c
    6068:	add	r3, r3, ip
    606c:	ldr	ip, [pc, #1940]	; 6808 <MD5Transform+0x930>
    6070:	add	r3, r2, r3, ror #25
    6074:	add	ip, r7, ip
    6078:	add	ip, ip, r1
    607c:	eor	r1, r0, r2
    6080:	and	r1, r1, r3
    6084:	eor	r1, r1, r0
    6088:	add	r1, r1, ip
    608c:	ldr	ip, [sp, #48]	; 0x30
    6090:	add	r1, r3, r1, ror #20
    6094:	sub	ip, ip, #41984	; 0xa400
    6098:	sub	ip, ip, #79	; 0x4f
    609c:	add	ip, ip, r0
    60a0:	eor	r0, r2, r3
    60a4:	and	r0, r0, r1
    60a8:	eor	r0, r0, r2
    60ac:	ldr	r7, [sp, #52]	; 0x34
    60b0:	add	r0, r0, ip
    60b4:	ldr	ip, [pc, #1872]	; 680c <MD5Transform+0x934>
    60b8:	add	r0, r1, r0, ror #15
    60bc:	add	ip, r7, ip
    60c0:	add	ip, ip, r2
    60c4:	eor	r2, r3, r1
    60c8:	and	r2, r2, r0
    60cc:	eor	r2, r2, r3
    60d0:	ldr	r8, [sp, #56]	; 0x38
    60d4:	add	r2, r2, ip
    60d8:	ldr	ip, [pc, #1840]	; 6810 <MD5Transform+0x938>
    60dc:	add	r2, r0, r2, ror #10
    60e0:	add	ip, r8, ip
    60e4:	add	ip, ip, r3
    60e8:	eor	r3, r1, r0
    60ec:	and	r3, r3, r2
    60f0:	eor	r3, r3, r1
    60f4:	ldr	r7, [sp, #60]	; 0x3c
    60f8:	add	r3, r3, ip
    60fc:	ldr	ip, [pc, #1808]	; 6814 <MD5Transform+0x93c>
    6100:	add	r3, r2, r3, ror #25
    6104:	add	ip, r7, ip
    6108:	add	ip, ip, r1
    610c:	eor	r1, r0, r2
    6110:	and	r1, r1, r3
    6114:	eor	r1, r1, r0
    6118:	ldr	r9, [sp, #64]	; 0x40
    611c:	add	r1, r1, ip
    6120:	ldr	ip, [pc, #1776]	; 6818 <MD5Transform+0x940>
    6124:	add	r1, r3, r1, ror #20
    6128:	add	ip, r9, ip
    612c:	add	ip, ip, r0
    6130:	eor	r0, r2, r3
    6134:	and	r0, r0, r1
    6138:	eor	r0, r0, r2
    613c:	ldr	r7, [sp, #68]	; 0x44
    6140:	add	r0, r0, ip
    6144:	ldr	ip, [pc, #1744]	; 681c <MD5Transform+0x944>
    6148:	add	r0, r1, r0, ror #15
    614c:	add	ip, r7, ip
    6150:	add	ip, ip, r2
    6154:	eor	r2, r3, r1
    6158:	and	r2, r2, r0
    615c:	eor	r2, r2, r3
    6160:	ldr	fp, [sp, #12]
    6164:	add	r2, r2, ip
    6168:	ldr	ip, [pc, #1712]	; 6820 <MD5Transform+0x948>
    616c:	add	r2, r0, r2, ror #10
    6170:	add	ip, fp, ip
    6174:	add	ip, ip, r3
    6178:	eor	r3, r0, r2
    617c:	and	r3, r3, r1
    6180:	eor	r3, r3, r0
    6184:	ldr	fp, [sp, #32]
    6188:	add	r3, r3, ip
    618c:	ldr	ip, [pc, #1680]	; 6824 <MD5Transform+0x94c>
    6190:	add	r3, r2, r3, ror #27
    6194:	add	ip, fp, ip
    6198:	add	ip, ip, r1
    619c:	eor	r1, r2, r3
    61a0:	and	r1, r1, r0
    61a4:	eor	r1, r1, r2
    61a8:	ldr	fp, [sp, #52]	; 0x34
    61ac:	add	r1, r1, ip
    61b0:	ldr	ip, [pc, #1648]	; 6828 <MD5Transform+0x950>
    61b4:	add	r1, r3, r1, ror #23
    61b8:	add	ip, fp, ip
    61bc:	add	ip, ip, r0
    61c0:	eor	r0, r3, r1
    61c4:	and	r0, r0, r2
    61c8:	eor	r0, r0, r3
    61cc:	ldr	fp, [sp, #8]
    61d0:	add	r0, r0, ip
    61d4:	ldr	ip, [pc, #1616]	; 682c <MD5Transform+0x954>
    61d8:	add	r0, r1, r0, ror #18
    61dc:	add	ip, fp, ip
    61e0:	add	ip, ip, r2
    61e4:	eor	r2, r1, r0
    61e8:	and	r2, r2, r3
    61ec:	eor	r2, r2, r1
    61f0:	ldr	fp, [sp, #28]
    61f4:	add	r2, r2, ip
    61f8:	ldr	ip, [pc, #1584]	; 6830 <MD5Transform+0x958>
    61fc:	add	r2, r0, r2, ror #12
    6200:	add	ip, fp, ip
    6204:	add	ip, ip, r3
    6208:	eor	r3, r0, r2
    620c:	and	r3, r3, r1
    6210:	eor	r3, r3, r0
    6214:	ldr	fp, [sp, #48]	; 0x30
    6218:	add	r3, r3, ip
    621c:	ldr	ip, [pc, #1552]	; 6834 <MD5Transform+0x95c>
    6220:	add	r3, r2, r3, ror #27
    6224:	add	ip, fp, ip
    6228:	add	ip, ip, r1
    622c:	eor	r1, r2, r3
    6230:	and	r1, r1, r0
    6234:	eor	r1, r1, r2
    6238:	add	r1, r1, ip
    623c:	ldr	ip, [pc, #1524]	; 6838 <MD5Transform+0x960>
    6240:	add	r1, r3, r1, ror #23
    6244:	add	ip, r7, ip
    6248:	add	ip, ip, r0
    624c:	eor	r0, r3, r1
    6250:	and	r0, r0, r2
    6254:	eor	r0, r0, r3
    6258:	ldr	fp, [sp, #24]
    625c:	add	r0, r0, ip
    6260:	ldr	ip, [pc, #1492]	; 683c <MD5Transform+0x964>
    6264:	add	r0, r1, r0, ror #18
    6268:	add	ip, fp, ip
    626c:	add	ip, ip, r2
    6270:	eor	r2, r1, r0
    6274:	and	r2, r2, r3
    6278:	eor	r2, r2, r1
    627c:	ldr	fp, [sp, #44]	; 0x2c
    6280:	add	r2, r2, ip
    6284:	ldr	ip, [pc, #1460]	; 6840 <MD5Transform+0x968>
    6288:	add	r2, r0, r2, ror #12
    628c:	add	ip, fp, ip
    6290:	add	ip, ip, r3
    6294:	eor	r3, r0, r2
    6298:	and	r3, r3, r1
    629c:	eor	r3, r3, r0
    62a0:	add	r3, r3, ip
    62a4:	ldr	ip, [pc, #1432]	; 6844 <MD5Transform+0x96c>
    62a8:	add	r3, r2, r3, ror #27
    62ac:	add	ip, r9, ip
    62b0:	add	ip, ip, r1
    62b4:	eor	r1, r2, r3
    62b8:	and	r1, r1, r0
    62bc:	eor	r1, r1, r2
    62c0:	ldr	fp, [sp, #20]
    62c4:	add	r1, r1, ip
    62c8:	ldr	ip, [pc, #1400]	; 6848 <MD5Transform+0x970>
    62cc:	add	r1, r3, r1, ror #23
    62d0:	add	ip, fp, ip
    62d4:	add	r0, ip, r0
    62d8:	eor	ip, r3, r1
    62dc:	and	ip, ip, r2
    62e0:	eor	ip, ip, r3
    62e4:	ldr	fp, [sp, #40]	; 0x28
    62e8:	add	r0, ip, r0
    62ec:	ldr	ip, [pc, #1368]	; 684c <MD5Transform+0x974>
    62f0:	add	r0, r1, r0, ror #18
    62f4:	add	ip, fp, ip
    62f8:	add	r2, ip, r2
    62fc:	eor	ip, r1, r0
    6300:	and	ip, ip, r3
    6304:	eor	ip, ip, r1
    6308:	ldr	fp, [sp, #60]	; 0x3c
    630c:	add	r2, ip, r2
    6310:	ldr	ip, [pc, #1336]	; 6850 <MD5Transform+0x978>
    6314:	add	r2, r0, r2, ror #12
    6318:	add	ip, fp, ip
    631c:	add	r3, ip, r3
    6320:	eor	ip, r0, r2
    6324:	and	ip, ip, r1
    6328:	eor	ip, ip, r0
    632c:	ldr	fp, [sp, #16]
    6330:	add	r3, ip, r3
    6334:	ldr	ip, [pc, #1304]	; 6854 <MD5Transform+0x97c>
    6338:	add	r3, r2, r3, ror #27
    633c:	add	ip, fp, ip
    6340:	add	r1, ip, r1
    6344:	eor	ip, r2, r3
    6348:	and	ip, ip, r0
    634c:	eor	ip, ip, r2
    6350:	add	r1, ip, r1
    6354:	ldr	ip, [pc, #1276]	; 6858 <MD5Transform+0x980>
    6358:	add	r1, r3, r1, ror #23
    635c:	add	ip, sl, ip
    6360:	add	r0, ip, r0
    6364:	eor	ip, r3, r1
    6368:	and	ip, ip, r2
    636c:	eor	ip, ip, r3
    6370:	add	ip, ip, r0
    6374:	ldr	fp, [pc, #1248]	; 685c <MD5Transform+0x984>
    6378:	add	ip, r1, ip, ror #18
    637c:	add	fp, r8, fp
    6380:	add	fp, fp, r2
    6384:	eor	r2, r1, ip
    6388:	and	r2, r3, r2
    638c:	eor	r2, r2, r1
    6390:	ldr	r0, [sp, #28]
    6394:	add	r2, r2, fp
    6398:	ldr	fp, [pc, #1216]	; 6860 <MD5Transform+0x988>
    639c:	add	r2, ip, r2, ror #12
    63a0:	add	fp, r0, fp
    63a4:	eor	r0, r1, ip
    63a8:	eor	r0, r0, r2
    63ac:	add	r3, fp, r3
    63b0:	add	r3, r0, r3
    63b4:	ldr	fp, [sp, #40]	; 0x28
    63b8:	ldr	r0, [pc, #1188]	; 6864 <MD5Transform+0x98c>
    63bc:	add	r3, r2, r3, ror #28
    63c0:	add	r0, fp, r0
    63c4:	add	r0, r0, r1
    63c8:	eor	r1, ip, r2
    63cc:	eor	r1, r1, r3
    63d0:	ldr	fp, [sp, #52]	; 0x34
    63d4:	add	r1, r1, r0
    63d8:	ldr	r0, [pc, #1160]	; 6868 <MD5Transform+0x990>
    63dc:	add	r1, r3, r1, ror #21
    63e0:	add	r0, fp, r0
    63e4:	add	ip, r0, ip
    63e8:	eor	r0, r2, r3
    63ec:	eor	r0, r0, r1
    63f0:	add	ip, r0, ip
    63f4:	ldr	r0, [pc, #1136]	; 686c <MD5Transform+0x994>
    63f8:	add	ip, r1, ip, ror #16
    63fc:	add	r0, r9, r0
    6400:	add	r0, r0, r2
    6404:	eor	r2, r3, r1
    6408:	eor	r2, r2, ip
    640c:	ldr	fp, [sp, #12]
    6410:	add	r2, r2, r0
    6414:	ldr	r0, [pc, #1108]	; 6870 <MD5Transform+0x998>
    6418:	add	r2, ip, r2, ror #9
    641c:	add	r0, fp, r0
    6420:	add	r0, r0, r3
    6424:	eor	r3, r1, ip
    6428:	eor	r3, r3, r2
    642c:	ldr	fp, [sp, #24]
    6430:	add	r3, r3, r0
    6434:	ldr	r0, [pc, #1080]	; 6874 <MD5Transform+0x99c>
    6438:	add	r3, r2, r3, ror #28
    643c:	add	r0, fp, r0
    6440:	add	r0, r0, r1
    6444:	eor	r1, ip, r2
    6448:	eor	r1, r1, r3
    644c:	add	r1, r1, r0
    6450:	ldr	r0, [pc, #1056]	; 6878 <MD5Transform+0x9a0>
    6454:	add	r1, r3, r1, ror #21
    6458:	add	r0, sl, r0
    645c:	add	ip, r0, ip
    6460:	eor	r0, r2, r3
    6464:	eor	r0, r0, r1
    6468:	ldr	fp, [sp, #48]	; 0x30
    646c:	add	r0, r0, ip
    6470:	ldr	ip, [pc, #1028]	; 687c <MD5Transform+0x9a4>
    6474:	add	r0, r1, r0, ror #16
    6478:	add	ip, fp, ip
    647c:	add	ip, ip, r2
    6480:	eor	r2, r3, r1
    6484:	eor	r2, r2, r0
    6488:	ldr	fp, [sp, #60]	; 0x3c
    648c:	add	r2, r2, ip
    6490:	ldr	ip, [pc, #1000]	; 6880 <MD5Transform+0x9a8>
    6494:	add	r2, r0, r2, ror #9
    6498:	add	ip, fp, ip
    649c:	add	ip, ip, r3
    64a0:	eor	r3, r1, r0
    64a4:	eor	r3, r3, r2
    64a8:	ldr	fp, [sp, #8]
    64ac:	add	r3, r3, ip
    64b0:	ldr	ip, [pc, #972]	; 6884 <MD5Transform+0x9ac>
    64b4:	add	r3, r2, r3, ror #28
    64b8:	add	ip, fp, ip
    64bc:	add	r1, ip, r1
    64c0:	eor	ip, r0, r2
    64c4:	eor	ip, ip, r3
    64c8:	ldr	fp, [sp, #20]
    64cc:	add	r1, ip, r1
    64d0:	ldr	ip, [pc, #944]	; 6888 <MD5Transform+0x9b0>
    64d4:	add	r1, r3, r1, ror #21
    64d8:	add	ip, fp, ip
    64dc:	add	ip, ip, r0
    64e0:	eor	r0, r2, r3
    64e4:	eor	r0, r0, r1
    64e8:	ldr	fp, [sp, #32]
    64ec:	add	r0, r0, ip
    64f0:	ldr	ip, [pc, #916]	; 688c <MD5Transform+0x9b4>
    64f4:	add	r0, r1, r0, ror #16
    64f8:	add	ip, fp, ip
    64fc:	add	r2, ip, r2
    6500:	eor	ip, r3, r1
    6504:	eor	ip, ip, r0
    6508:	ldr	fp, [sp, #44]	; 0x2c
    650c:	add	ip, ip, r2
    6510:	ldr	r2, [pc, #888]	; 6890 <MD5Transform+0x9b8>
    6514:	add	ip, r0, ip, ror #9
    6518:	add	r2, fp, r2
    651c:	add	r3, r2, r3
    6520:	eor	r2, r1, r0
    6524:	eor	r2, r2, ip
    6528:	add	r2, r2, r3
    652c:	ldr	r3, [pc, #864]	; 6894 <MD5Transform+0x9bc>
    6530:	add	r2, ip, r2, ror #28
    6534:	add	r3, r8, r3
    6538:	add	r3, r3, r1
    653c:	eor	r1, r0, ip
    6540:	eor	r1, r1, r2
    6544:	add	r1, r1, r3
    6548:	ldr	r3, [pc, #840]	; 6898 <MD5Transform+0x9c0>
    654c:	add	r1, r2, r1, ror #21
    6550:	add	r3, r7, r3
    6554:	add	r0, r3, r0
    6558:	eor	r3, ip, r2
    655c:	eor	r3, r3, r1
    6560:	ldr	fp, [sp, #16]
    6564:	add	r0, r3, r0
    6568:	ldr	r3, [pc, #812]	; 689c <MD5Transform+0x9c4>
    656c:	add	r0, r1, r0, ror #16
    6570:	add	r3, fp, r3
    6574:	add	ip, r3, ip
    6578:	eor	r3, r2, r1
    657c:	eor	r3, r3, r0
    6580:	ldr	fp, [sp, #8]
    6584:	add	r3, r3, ip
    6588:	ldr	ip, [pc, #784]	; 68a0 <MD5Transform+0x9c8>
    658c:	add	r3, r0, r3, ror #9
    6590:	add	ip, fp, ip
    6594:	mvn	fp, r1
    6598:	orr	fp, fp, r3
    659c:	eor	fp, fp, r0
    65a0:	add	r2, ip, r2
    65a4:	add	r2, fp, r2
    65a8:	ldr	ip, [pc, #756]	; 68a4 <MD5Transform+0x9cc>
    65ac:	add	r2, r3, r2, ror #26
    65b0:	add	ip, sl, ip
    65b4:	mvn	sl, r0
    65b8:	orr	sl, sl, r2
    65bc:	eor	sl, sl, r3
    65c0:	add	r1, ip, r1
    65c4:	add	r1, sl, r1
    65c8:	ldr	ip, [pc, #728]	; 68a8 <MD5Transform+0x9d0>
    65cc:	add	r1, r2, r1, ror #22
    65d0:	add	ip, r9, ip
    65d4:	mvn	r9, r3
    65d8:	orr	r9, r9, r1
    65dc:	eor	r9, r9, r2
    65e0:	add	r0, ip, r0
    65e4:	add	r0, r9, r0
    65e8:	ldr	ip, [pc, #700]	; 68ac <MD5Transform+0x9d4>
    65ec:	ldr	r9, [sp, #28]
    65f0:	add	r0, r1, r0, ror #17
    65f4:	add	ip, r9, ip
    65f8:	mvn	r9, r2
    65fc:	orr	r9, r9, r0
    6600:	eor	r9, r9, r1
    6604:	add	r3, ip, r3
    6608:	add	r3, r9, r3
    660c:	ldr	ip, [pc, #668]	; 68b0 <MD5Transform+0x9d8>
    6610:	add	r3, r0, r3, ror #11
    6614:	add	ip, r8, ip
    6618:	mvn	r8, r1
    661c:	orr	r8, r8, r3
    6620:	eor	r8, r8, r0
    6624:	add	r2, ip, r2
    6628:	add	r2, r8, r2
    662c:	ldr	ip, [pc, #640]	; 68b4 <MD5Transform+0x9dc>
    6630:	ldr	r8, [sp, #20]
    6634:	add	r2, r3, r2, ror #26
    6638:	add	ip, r8, ip
    663c:	mvn	r8, r0
    6640:	orr	r8, r8, r2
    6644:	eor	r8, r8, r3
    6648:	add	r1, ip, r1
    664c:	add	r1, r8, r1
    6650:	ldr	ip, [pc, #608]	; 68b8 <MD5Transform+0x9e0>
    6654:	ldr	r8, [sp, #48]	; 0x30
    6658:	add	r1, r2, r1, ror #22
    665c:	add	ip, r8, ip
    6660:	mvn	r8, r3
    6664:	orr	r8, r8, r1
    6668:	eor	r8, r8, r2
    666c:	add	r0, ip, r0
    6670:	add	r0, r8, r0
    6674:	ldr	ip, [pc, #576]	; 68bc <MD5Transform+0x9e4>
    6678:	ldr	r8, [sp, #12]
    667c:	add	r0, r1, r0, ror #17
    6680:	add	ip, r8, ip
    6684:	mvn	r8, r2
    6688:	orr	r8, r8, r0
    668c:	eor	r8, r8, r1
    6690:	add	r3, ip, r3
    6694:	add	r3, r8, r3
    6698:	ldr	ip, [pc, #544]	; 68c0 <MD5Transform+0x9e8>
    669c:	ldr	r8, [sp, #40]	; 0x28
    66a0:	add	r3, r0, r3, ror #11
    66a4:	add	ip, r8, ip
    66a8:	mvn	r8, r1
    66ac:	orr	r8, r8, r3
    66b0:	eor	r8, r8, r0
    66b4:	add	r2, ip, r2
    66b8:	add	r2, r8, r2
    66bc:	ldr	ip, [pc, #512]	; 68c4 <MD5Transform+0x9ec>
    66c0:	add	r2, r3, r2, ror #26
    66c4:	add	ip, r7, ip
    66c8:	mvn	r7, r0
    66cc:	orr	r7, r7, r2
    66d0:	eor	r7, r7, r3
    66d4:	add	r1, ip, r1
    66d8:	add	r1, r7, r1
    66dc:	ldr	ip, [pc, #484]	; 68c8 <MD5Transform+0x9f0>
    66e0:	ldr	r7, [sp, #32]
    66e4:	add	r1, r2, r1, ror #22
    66e8:	add	ip, r7, ip
    66ec:	mvn	r7, r3
    66f0:	orr	r7, r7, r1
    66f4:	eor	r7, r7, r2
    66f8:	add	r0, ip, r0
    66fc:	add	r0, r7, r0
    6700:	ldr	ip, [pc, #452]	; 68cc <MD5Transform+0x9f4>
    6704:	ldr	r7, [sp, #60]	; 0x3c
    6708:	add	r0, r1, r0, ror #17
    670c:	add	ip, r7, ip
    6710:	add	ip, ip, r3
    6714:	mvn	r3, r2
    6718:	orr	r3, r3, r0
    671c:	eor	r3, r3, r1
    6720:	ldr	r7, [sp, #24]
    6724:	add	r3, r3, ip
    6728:	ldr	ip, [pc, #416]	; 68d0 <MD5Transform+0x9f8>
    672c:	add	r3, r0, r3, ror #11
    6730:	add	ip, r7, ip
    6734:	add	ip, ip, r2
    6738:	mvn	r2, r1
    673c:	orr	r2, r2, r3
    6740:	eor	r2, r2, r0
    6744:	ldr	r7, [sp, #52]	; 0x34
    6748:	add	r2, r2, ip
    674c:	ldr	ip, [pc, #384]	; 68d4 <MD5Transform+0x9fc>
    6750:	add	r2, r3, r2, ror #26
    6754:	add	ip, r7, ip
    6758:	add	ip, ip, r1
    675c:	mvn	r1, r0
    6760:	orr	r1, r1, r2
    6764:	eor	r1, r1, r3
    6768:	ldr	r7, [sp, #16]
    676c:	add	r1, r1, ip
    6770:	ldr	ip, [pc, #352]	; 68d8 <MD5Transform+0xa00>
    6774:	add	r1, r2, r1, ror #22
    6778:	add	ip, r7, ip
    677c:	add	ip, ip, r0
    6780:	mvn	r0, r3
    6784:	orr	r0, r0, r1
    6788:	eor	r0, r0, r2
    678c:	add	r0, r0, ip
    6790:	ldr	r7, [sp, #44]	; 0x2c
    6794:	ldr	ip, [pc, #320]	; 68dc <MD5Transform+0xa04>
    6798:	add	r0, r1, r0, ror #17
    679c:	add	ip, r7, ip
    67a0:	add	ip, ip, r3
    67a4:	mvn	r3, r2
    67a8:	orr	r3, r3, r0
    67ac:	eor	r3, r3, r1
    67b0:	add	r3, r3, ip
    67b4:	ldr	ip, [sp, #4]
    67b8:	add	lr, lr, r0
    67bc:	add	r2, ip, r2
    67c0:	add	lr, lr, r3, ror #11
    67c4:	add	r5, r5, r0
    67c8:	add	r6, r6, r1
    67cc:	str	r2, [r4]
    67d0:	str	lr, [r4, #4]
    67d4:	str	r5, [r4, #8]
    67d8:	str	r6, [r4, #12]
    67dc:	add	sp, sp, #76	; 0x4c
    67e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67e4:	.word	0xd76aa478
    67e8:	.word	0xe8c7b756
    67ec:	.word	0x242070db
    67f0:	.word	0xc1bdceee
    67f4:	.word	0xf57c0faf
    67f8:	.word	0x4787c62a
    67fc:	.word	0xa8304613
    6800:	.word	0xfd469501
    6804:	.word	0x698098d8
    6808:	.word	0x8b44f7af
    680c:	.word	0x895cd7be
    6810:	.word	0x6b901122
    6814:	.word	0xfd987193
    6818:	.word	0xa679438e
    681c:	.word	0x49b40821
    6820:	.word	0xf61e2562
    6824:	.word	0xc040b340
    6828:	.word	0x265e5a51
    682c:	.word	0xe9b6c7aa
    6830:	.word	0xd62f105d
    6834:	.word	0x02441453
    6838:	.word	0xd8a1e681
    683c:	.word	0xe7d3fbc8
    6840:	.word	0x21e1cde6
    6844:	.word	0xc33707d6
    6848:	.word	0xf4d50d87
    684c:	.word	0x455a14ed
    6850:	.word	0xa9e3e905
    6854:	.word	0xfcefa3f8
    6858:	.word	0x676f02d9
    685c:	.word	0x8d2a4c8a
    6860:	.word	0xfffa3942
    6864:	.word	0x8771f681
    6868:	.word	0x6d9d6122
    686c:	.word	0xfde5380c
    6870:	.word	0xa4beea44
    6874:	.word	0x4bdecfa9
    6878:	.word	0xf6bb4b60
    687c:	.word	0xbebfbc70
    6880:	.word	0x289b7ec6
    6884:	.word	0xeaa127fa
    6888:	.word	0xd4ef3085
    688c:	.word	0x04881d05
    6890:	.word	0xd9d4d039
    6894:	.word	0xe6db99e5
    6898:	.word	0x1fa27cf8
    689c:	.word	0xc4ac5665
    68a0:	.word	0xf4292244
    68a4:	.word	0x432aff97
    68a8:	.word	0xab9423a7
    68ac:	.word	0xfc93a039
    68b0:	.word	0x655b59c3
    68b4:	.word	0x8f0ccc92
    68b8:	.word	0xffeff47d
    68bc:	.word	0x85845dd1
    68c0:	.word	0x6fa87e4f
    68c4:	.word	0xfe2ce6e0
    68c8:	.word	0xa3014314
    68cc:	.word	0x4e0811a1
    68d0:	.word	0xf7537e82
    68d4:	.word	0xbd3af235
    68d8:	.word	0x2ad7d2bb
    68dc:	.word	0xeb86d391

000068e0 <MD5Update>:
    68e0:	ldr	r3, [r0, #16]
    68e4:	push	{r4, r5, r6, r7, r8, lr}
    68e8:	mov	r6, r2
    68ec:	lsl	r2, r2, #3
    68f0:	mov	r4, r0
    68f4:	lsr	r0, r3, #3
    68f8:	add	r3, r3, r2
    68fc:	cmp	r2, r3
    6900:	str	r3, [r4, #16]
    6904:	ldrhi	r3, [r4, #20]
    6908:	and	r0, r0, #63	; 0x3f
    690c:	addhi	r3, r3, #1
    6910:	strhi	r3, [r4, #20]
    6914:	ldr	r3, [r4, #20]
    6918:	rsb	r5, r0, #64	; 0x40
    691c:	add	r3, r3, r6, lsr #29
    6920:	cmp	r6, r5
    6924:	mov	r7, r1
    6928:	str	r3, [r4, #20]
    692c:	movcc	r5, #0
    6930:	bcc	6960 <MD5Update+0x80>
    6934:	add	r0, r0, #24
    6938:	mov	r2, r5
    693c:	add	r0, r4, r0
    6940:	bl	4828 <memcpy@plt>
    6944:	add	r1, r4, #24
    6948:	mov	r0, r4
    694c:	bl	5ed8 <MD5Transform>
    6950:	add	r3, r5, #63	; 0x3f
    6954:	cmp	r6, r3
    6958:	bhi	6978 <MD5Update+0x98>
    695c:	mov	r0, #0
    6960:	add	r0, r0, #24
    6964:	sub	r2, r6, r5
    6968:	add	r1, r7, r5
    696c:	add	r0, r4, r0
    6970:	pop	{r4, r5, r6, r7, r8, lr}
    6974:	b	4828 <memcpy@plt>
    6978:	add	r1, r7, r5
    697c:	mov	r0, r4
    6980:	bl	5ed8 <MD5Transform>
    6984:	add	r5, r5, #64	; 0x40
    6988:	b	6950 <MD5Update+0x70>

0000698c <MD5Final>:
    698c:	add	r3, r1, #16
    6990:	push	{r0, r1, r4, r5, r6, lr}
    6994:	mov	r4, r1
    6998:	mov	r5, r0
    699c:	ldm	r3, {r0, r1}
    69a0:	lsr	r2, r0, #3
    69a4:	and	r2, r2, #63	; 0x3f
    69a8:	stm	sp, {r0, r1}
    69ac:	ldr	r1, [pc, #68]	; 69f8 <MD5Final+0x6c>
    69b0:	cmp	r2, #55	; 0x37
    69b4:	rsbls	r2, r2, #56	; 0x38
    69b8:	rsbhi	r2, r2, #120	; 0x78
    69bc:	mov	r0, r4
    69c0:	add	r1, pc, r1
    69c4:	bl	68e0 <MD5Update>
    69c8:	mov	r1, sp
    69cc:	mov	r0, r4
    69d0:	mov	r2, #8
    69d4:	bl	68e0 <MD5Update>
    69d8:	ldm	r4, {r0, r1, r2, r3}
    69dc:	stm	r5, {r0, r1, r2, r3}
    69e0:	mov	r2, #88	; 0x58
    69e4:	mov	r1, #0
    69e8:	mov	r0, r4
    69ec:	add	sp, sp, #8
    69f0:	pop	{r4, r5, r6, lr}
    69f4:	b	4648 <memset@plt>
    69f8:	.word	0x0001fa64

000069fc <rb_sha256_process_bytes>:
    69fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    6a00:	mov	r6, r0
    6a04:	ldr	r7, [r2, #40]	; 0x28
    6a08:	mov	r5, r1
    6a0c:	cmp	r7, #0
    6a10:	mov	r4, r2
    6a14:	beq	6a8c <rb_sha256_process_bytes+0x90>
    6a18:	rsb	r8, r7, #128	; 0x80
    6a1c:	cmp	r8, r1
    6a20:	movcs	r8, r1
    6a24:	add	r0, r7, #44	; 0x2c
    6a28:	mov	r1, r6
    6a2c:	mov	r2, r8
    6a30:	add	r0, r4, r0
    6a34:	bl	4828 <memcpy@plt>
    6a38:	ldr	r1, [r4, #40]	; 0x28
    6a3c:	add	r1, r8, r1
    6a40:	cmp	r1, #64	; 0x40
    6a44:	str	r1, [r4, #40]	; 0x28
    6a48:	bls	6a84 <rb_sha256_process_bytes+0x88>
    6a4c:	add	r9, r4, #44	; 0x2c
    6a50:	mov	r2, r4
    6a54:	bic	r1, r1, #63	; 0x3f
    6a58:	mov	r0, r9
    6a5c:	bl	5664 <rb_sha256_process_block>
    6a60:	ldr	r2, [r4, #40]	; 0x28
    6a64:	add	r1, r7, r8
    6a68:	bic	r1, r1, #63	; 0x3f
    6a6c:	and	r2, r2, #63	; 0x3f
    6a70:	add	r1, r1, #44	; 0x2c
    6a74:	str	r2, [r4, #40]	; 0x28
    6a78:	add	r1, r4, r1
    6a7c:	mov	r0, r9
    6a80:	bl	4828 <memcpy@plt>
    6a84:	add	r6, r6, r8
    6a88:	sub	r5, r5, r8
    6a8c:	cmp	r5, #63	; 0x3f
    6a90:	bls	6ac4 <rb_sha256_process_bytes+0xc8>
    6a94:	tst	r6, #3
    6a98:	movne	r7, r5
    6a9c:	addne	r8, r4, #44	; 0x2c
    6aa0:	movne	r9, #64	; 0x40
    6aa4:	bne	6b0c <rb_sha256_process_bytes+0x110>
    6aa8:	bic	r7, r5, #63	; 0x3f
    6aac:	mov	r0, r6
    6ab0:	mov	r2, r4
    6ab4:	mov	r1, r7
    6ab8:	bl	5664 <rb_sha256_process_block>
    6abc:	add	r6, r6, r7
    6ac0:	and	r5, r5, #63	; 0x3f
    6ac4:	cmp	r5, #0
    6ac8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    6acc:	b	6b30 <rb_sha256_process_bytes+0x134>
    6ad0:	mov	ip, r8
    6ad4:	add	lr, r3, #64	; 0x40
    6ad8:	ldr	r0, [r3]
    6adc:	ldr	r1, [r3, #4]
    6ae0:	mov	r2, ip
    6ae4:	add	r3, r3, #8
    6ae8:	cmp	r3, lr
    6aec:	stmia	r2!, {r0, r1}
    6af0:	mov	ip, r2
    6af4:	bne	6ad8 <rb_sha256_process_bytes+0xdc>
    6af8:	mov	r2, r4
    6afc:	mov	r1, r9
    6b00:	mov	r0, r8
    6b04:	bl	5664 <rb_sha256_process_block>
    6b08:	sub	r7, r7, #64	; 0x40
    6b0c:	sub	r3, r5, r7
    6b10:	cmp	r7, #64	; 0x40
    6b14:	add	r3, r6, r3
    6b18:	bhi	6ad0 <rb_sha256_process_bytes+0xd4>
    6b1c:	sub	r3, r5, #1
    6b20:	bic	r2, r3, #63	; 0x3f
    6b24:	lsr	r3, r3, #6
    6b28:	add	r6, r6, r2
    6b2c:	sub	r5, r5, r3, lsl #6
    6b30:	ldr	r7, [r4, #40]	; 0x28
    6b34:	mov	r2, r5
    6b38:	add	r0, r7, #44	; 0x2c
    6b3c:	mov	r1, r6
    6b40:	add	r0, r4, r0
    6b44:	add	r5, r7, r5
    6b48:	bl	4828 <memcpy@plt>
    6b4c:	cmp	r5, #63	; 0x3f
    6b50:	bls	6b7c <rb_sha256_process_bytes+0x180>
    6b54:	add	r6, r4, #44	; 0x2c
    6b58:	mov	r2, r4
    6b5c:	mov	r1, #64	; 0x40
    6b60:	mov	r0, r6
    6b64:	sub	r5, r5, #64	; 0x40
    6b68:	bl	5664 <rb_sha256_process_block>
    6b6c:	mov	r2, r5
    6b70:	add	r1, r4, #108	; 0x6c
    6b74:	mov	r0, r6
    6b78:	bl	4828 <memcpy@plt>
    6b7c:	str	r5, [r4, #40]	; 0x28
    6b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00006b84 <rb_sha256_finish_ctx>:
    6b84:	push	{r4, r5, r6, r7, r8, lr}
    6b88:	mov	r5, r1
    6b8c:	ldr	r6, [r0, #40]	; 0x28
    6b90:	ldr	r3, [r0, #32]
    6b94:	ldr	r1, [pc, #188]	; 6c58 <rb_sha256_finish_ctx+0xd4>
    6b98:	add	r3, r6, r3
    6b9c:	cmp	r6, r3
    6ba0:	str	r3, [r0, #32]
    6ba4:	ldrhi	r3, [r0, #36]	; 0x24
    6ba8:	add	r1, pc, r1
    6bac:	addhi	r3, r3, #1
    6bb0:	strhi	r3, [r0, #36]	; 0x24
    6bb4:	cmp	r6, #55	; 0x37
    6bb8:	mov	r4, r0
    6bbc:	rsbhi	r7, r6, #120	; 0x78
    6bc0:	rsbls	r7, r6, #56	; 0x38
    6bc4:	add	r0, r6, #44	; 0x2c
    6bc8:	add	r1, r1, #1808	; 0x710
    6bcc:	mov	r2, r7
    6bd0:	add	r1, r1, #8
    6bd4:	add	r0, r4, r0
    6bd8:	bl	4828 <memcpy@plt>
    6bdc:	ldr	r3, [r4, #32]
    6be0:	add	r1, r7, r6
    6be4:	add	ip, r4, r1
    6be8:	lsl	r2, r3, #3
    6bec:	lsl	r0, r3, #11
    6bf0:	and	r0, r0, #16711680	; 0xff0000
    6bf4:	orr	r0, r0, r2, lsr #24
    6bf8:	lsr	r2, r2, #8
    6bfc:	orr	r0, r0, r3, lsl #27
    6c00:	and	r2, r2, #65280	; 0xff00
    6c04:	orr	r0, r0, r2
    6c08:	str	r0, [ip, #48]	; 0x30
    6c0c:	ldr	r2, [r4, #36]	; 0x24
    6c10:	lsr	r3, r3, #29
    6c14:	add	r1, r1, #8
    6c18:	orr	r3, r3, r2, lsl #3
    6c1c:	rev	r3, r3
    6c20:	str	r3, [ip, #44]	; 0x2c
    6c24:	mov	r2, r4
    6c28:	add	r0, r4, #44	; 0x2c
    6c2c:	bl	5664 <rb_sha256_process_block>
    6c30:	sub	r3, r4, #4
    6c34:	sub	r1, r5, #4
    6c38:	add	r4, r4, #28
    6c3c:	ldr	r2, [r3, #4]!
    6c40:	rev	r2, r2
    6c44:	cmp	r3, r4
    6c48:	str	r2, [r1, #4]!
    6c4c:	bne	6c3c <rb_sha256_finish_ctx+0xb8>
    6c50:	mov	r0, r5
    6c54:	pop	{r4, r5, r6, r7, r8, pc}
    6c58:	.word	0x0000caf8

00006c5c <rb_sha512_process_bytes>:
    6c5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    6c60:	mov	r6, r0
    6c64:	ldrd	r8, [r2, #80]	; 0x50
    6c68:	mov	r5, r1
    6c6c:	mov	r4, r2
    6c70:	orrs	r3, r8, r9
    6c74:	beq	6cf8 <rb_sha512_process_bytes+0x9c>
    6c78:	rsb	r7, r8, #256	; 0x100
    6c7c:	cmp	r7, r1
    6c80:	movcs	r7, r1
    6c84:	add	r0, r8, #88	; 0x58
    6c88:	mov	r1, r6
    6c8c:	mov	r2, r7
    6c90:	add	r0, r4, r0
    6c94:	bl	4828 <memcpy@plt>
    6c98:	ldrd	r0, [r4, #80]	; 0x50
    6c9c:	adds	r0, r0, r7
    6ca0:	adc	r1, r1, #0
    6ca4:	cmp	r1, #0
    6ca8:	cmpeq	r0, #128	; 0x80
    6cac:	strd	r0, [r4, #80]	; 0x50
    6cb0:	bls	6cf0 <rb_sha512_process_bytes+0x94>
    6cb4:	add	r9, r4, #88	; 0x58
    6cb8:	bic	r1, r0, #127	; 0x7f
    6cbc:	mov	r2, r4
    6cc0:	mov	r0, r9
    6cc4:	bl	5934 <rb_sha512_process_block>
    6cc8:	ldrd	r2, [r4, #80]	; 0x50
    6ccc:	add	r1, r7, r8
    6cd0:	mov	r3, #0
    6cd4:	and	r2, r2, #127	; 0x7f
    6cd8:	bic	r1, r1, #127	; 0x7f
    6cdc:	add	r1, r1, #88	; 0x58
    6ce0:	strd	r2, [r4, #80]	; 0x50
    6ce4:	add	r1, r4, r1
    6ce8:	mov	r0, r9
    6cec:	bl	4828 <memcpy@plt>
    6cf0:	add	r6, r6, r7
    6cf4:	sub	r5, r5, r7
    6cf8:	cmp	r5, #127	; 0x7f
    6cfc:	bls	6d30 <rb_sha512_process_bytes+0xd4>
    6d00:	tst	r6, #7
    6d04:	movne	r7, r5
    6d08:	addne	r9, r4, #88	; 0x58
    6d0c:	movne	r8, #128	; 0x80
    6d10:	bne	6d58 <rb_sha512_process_bytes+0xfc>
    6d14:	bic	r7, r5, #127	; 0x7f
    6d18:	mov	r0, r6
    6d1c:	mov	r2, r4
    6d20:	mov	r1, r7
    6d24:	bl	5934 <rb_sha512_process_block>
    6d28:	add	r6, r6, r7
    6d2c:	and	r5, r5, #127	; 0x7f
    6d30:	cmp	r5, #0
    6d34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    6d38:	b	6d7c <rb_sha512_process_bytes+0x120>
    6d3c:	mov	r2, r8
    6d40:	mov	r0, r9
    6d44:	bl	4828 <memcpy@plt>
    6d48:	mov	r2, r4
    6d4c:	mov	r1, r8
    6d50:	bl	5934 <rb_sha512_process_block>
    6d54:	sub	r7, r7, #128	; 0x80
    6d58:	sub	r1, r5, r7
    6d5c:	cmp	r7, #128	; 0x80
    6d60:	add	r1, r6, r1
    6d64:	bhi	6d3c <rb_sha512_process_bytes+0xe0>
    6d68:	sub	r3, r5, #1
    6d6c:	bic	r2, r3, #127	; 0x7f
    6d70:	lsr	r3, r3, #7
    6d74:	add	r6, r6, r2
    6d78:	sub	r5, r5, r3, lsl #7
    6d7c:	ldr	r7, [r4, #80]	; 0x50
    6d80:	mov	r2, r5
    6d84:	add	r0, r7, #88	; 0x58
    6d88:	mov	r1, r6
    6d8c:	add	r0, r4, r0
    6d90:	add	r5, r7, r5
    6d94:	bl	4828 <memcpy@plt>
    6d98:	cmp	r5, #127	; 0x7f
    6d9c:	bls	6dc8 <rb_sha512_process_bytes+0x16c>
    6da0:	add	r6, r4, #88	; 0x58
    6da4:	mov	r2, r4
    6da8:	mov	r1, #128	; 0x80
    6dac:	mov	r0, r6
    6db0:	sub	r5, r5, #128	; 0x80
    6db4:	bl	5934 <rb_sha512_process_block>
    6db8:	mov	r2, r5
    6dbc:	add	r1, r4, #216	; 0xd8
    6dc0:	mov	r0, r6
    6dc4:	bl	4828 <memcpy@plt>
    6dc8:	mov	r2, r5
    6dcc:	mov	r3, #0
    6dd0:	strd	r2, [r4, #80]	; 0x50
    6dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00006dd8 <rb_sha512_finish_ctx>:
    6dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ddc:	sub	sp, sp, #28
    6de0:	ldrd	sl, [r0, #80]	; 0x50
    6de4:	ldrd	r2, [r0, #64]	; 0x40
    6de8:	mov	r4, r0
    6dec:	str	r1, [sp, #20]
    6df0:	adds	r2, r2, sl
    6df4:	adc	r3, r3, fp
    6df8:	cmp	fp, r3
    6dfc:	cmpeq	sl, r2
    6e00:	strd	r2, [r0, #64]	; 0x40
    6e04:	bls	6e18 <rb_sha512_finish_ctx+0x40>
    6e08:	ldrd	r2, [r0, #72]	; 0x48
    6e0c:	adds	r2, r2, #1
    6e10:	adc	r3, r3, #0
    6e14:	strd	r2, [r0, #72]	; 0x48
    6e18:	ldr	r1, [pc, #392]	; 6fa8 <rb_sha512_finish_ctx+0x1d0>
    6e1c:	cmp	fp, #0
    6e20:	cmpeq	sl, #111	; 0x6f
    6e24:	add	r1, pc, r1
    6e28:	rsbhi	r5, sl, #240	; 0xf0
    6e2c:	rsbls	r5, sl, #112	; 0x70
    6e30:	add	r0, sl, #88	; 0x58
    6e34:	add	r1, r1, #1872	; 0x750
    6e38:	mov	r2, r5
    6e3c:	add	r1, r1, #8
    6e40:	add	r0, r4, r0
    6e44:	bl	4828 <memcpy@plt>
    6e48:	adds	r2, sl, r5
    6e4c:	adc	r3, fp, #0
    6e50:	ldr	ip, [r4, #64]	; 0x40
    6e54:	strd	r2, [sp, #8]
    6e58:	ldr	r3, [sp, #8]
    6e5c:	ldr	r0, [r4, #68]	; 0x44
    6e60:	add	fp, r4, r3
    6e64:	lsl	r3, ip, #11
    6e68:	str	r3, [sp, #4]
    6e6c:	mov	r3, #0
    6e70:	str	r3, [sp]
    6e74:	ldrd	r2, [sp]
    6e78:	lsl	r1, r0, #3
    6e7c:	mov	r2, #0
    6e80:	mov	r6, #0
    6e84:	orr	r1, r1, ip, lsr #29
    6e88:	lsl	r9, r0, #27
    6e8c:	orr	r6, r6, r2
    6e90:	mov	r2, #0
    6e94:	lsl	lr, ip, #3
    6e98:	orr	r9, r9, ip, lsr #5
    6e9c:	orr	r6, r6, r2
    6ea0:	mov	r2, #0
    6ea4:	and	r3, r3, #16711680	; 0xff0000
    6ea8:	and	r7, r9, #65280	; 0xff00
    6eac:	orr	r2, r2, r6
    6eb0:	lsr	r6, r1, #24
    6eb4:	orr	r2, r2, r6
    6eb8:	orr	r7, r7, r3
    6ebc:	lsr	r6, lr, #8
    6ec0:	lsl	r3, r0, #11
    6ec4:	lsl	r8, ip, #27
    6ec8:	orr	r6, r6, r1, lsl #24
    6ecc:	orr	r3, r3, ip, lsr #21
    6ed0:	orr	r7, r7, r8
    6ed4:	and	r3, r3, #255	; 0xff
    6ed8:	and	r8, r6, #-16777216	; 0xff000000
    6edc:	orr	r8, r8, r2
    6ee0:	orr	r3, r3, r7
    6ee4:	lsr	r2, lr, #24
    6ee8:	mov	r7, #0
    6eec:	orr	r3, r3, r7
    6ef0:	orr	r2, r2, r1, lsl #8
    6ef4:	mov	r9, #0
    6ef8:	lsr	r7, r1, #8
    6efc:	orr	r9, r9, r3
    6f00:	and	r2, r2, #16711680	; 0xff0000
    6f04:	mov	r3, #0
    6f08:	orr	r2, r2, r8
    6f0c:	orr	r3, r3, r9
    6f10:	and	r8, r7, #65280	; 0xff00
    6f14:	mov	r9, #0
    6f18:	orr	r8, r8, r2
    6f1c:	orr	r9, r9, r3
    6f20:	mov	r7, #0
    6f24:	strd	r8, [fp, #96]	; 0x60
    6f28:	ldr	ip, [r4, #76]	; 0x4c
    6f2c:	ldr	r1, [r4, #72]	; 0x48
    6f30:	lsr	r6, r0, #29
    6f34:	lsl	r3, ip, #3
    6f38:	orr	r3, r3, r1, lsr #29
    6f3c:	orr	r3, r3, r7
    6f40:	lsl	r2, r1, #3
    6f44:	orr	r2, r2, r6
    6f48:	rev	r1, r3
    6f4c:	rev	r2, r2
    6f50:	str	r1, [fp, #88]	; 0x58
    6f54:	add	r1, sl, #16
    6f58:	str	r2, [fp, #92]	; 0x5c
    6f5c:	add	r0, r4, #88	; 0x58
    6f60:	mov	r2, r4
    6f64:	add	r1, r1, r5
    6f68:	bl	5934 <rb_sha512_process_block>
    6f6c:	ldr	r2, [sp, #20]
    6f70:	sub	r3, r4, #8
    6f74:	sub	r2, r2, #8
    6f78:	add	r4, r4, #56	; 0x38
    6f7c:	ldr	r1, [r3, #8]!
    6f80:	rev	r1, r1
    6f84:	ldr	r0, [r3, #4]
    6f88:	cmp	r3, r4
    6f8c:	rev	r0, r0
    6f90:	str	r0, [r2, #8]!
    6f94:	str	r1, [r2, #4]
    6f98:	bne	6f7c <rb_sha512_finish_ctx+0x1a4>
    6f9c:	ldr	r0, [sp, #20]
    6fa0:	add	sp, sp, #28
    6fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fa8:	.word	0x0000c87c

00006fac <rb_sha256_crypt_r>:
    6fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fb0:	mov	r8, r0
    6fb4:	ldr	r0, [pc, #2300]	; 78b8 <rb_sha256_crypt_r+0x90c>
    6fb8:	add	fp, sp, #32
    6fbc:	add	r0, pc, r0
    6fc0:	add	r0, r0, #2000	; 0x7d0
    6fc4:	sub	sp, sp, #460	; 0x1cc
    6fc8:	add	r0, r0, #8
    6fcc:	str	r2, [fp, #-452]	; 0xfffffe3c
    6fd0:	mov	r2, #3
    6fd4:	mov	r4, r1
    6fd8:	str	r3, [fp, #-476]	; 0xfffffe24
    6fdc:	bl	4c3c <strncmp@plt>
    6fe0:	ldr	r1, [pc, #2260]	; 78bc <rb_sha256_crypt_r+0x910>
    6fe4:	mov	r2, #7
    6fe8:	add	r1, pc, r1
    6fec:	add	r1, r1, #2000	; 0x7d0
    6ff0:	add	r1, r1, #12
    6ff4:	sub	r6, fp, #208	; 0xd0
    6ff8:	cmp	r0, #0
    6ffc:	addeq	r4, r4, #3
    7000:	mov	r0, r4
    7004:	bl	4c3c <strncmp@plt>
    7008:	subs	r3, r0, #0
    700c:	str	r3, [fp, #-468]	; 0xfffffe2c
    7010:	movne	r3, #0
    7014:	strne	r3, [fp, #-468]	; 0xfffffe2c
    7018:	bne	7630 <rb_sha256_crypt_r+0x684>
    701c:	mov	r2, #10
    7020:	mov	r1, r6
    7024:	add	r0, r4, #7
    7028:	bl	481c <strtoul@plt>
    702c:	ldr	r3, [fp, #-208]	; 0xffffff30
    7030:	ldrb	r2, [r3]
    7034:	cmp	r2, #36	; 0x24
    7038:	bne	7630 <rb_sha256_crypt_r+0x684>
    703c:	add	r4, r3, #1
    7040:	ldr	r3, [pc, #2168]	; 78c0 <rb_sha256_crypt_r+0x914>
    7044:	cmp	r0, r3
    7048:	movcc	r3, r0
    704c:	cmp	r3, #1000	; 0x3e8
    7050:	movcc	r3, #1000	; 0x3e8
    7054:	str	r3, [fp, #-456]	; 0xfffffe38
    7058:	mov	r3, #1
    705c:	str	r3, [fp, #-468]	; 0xfffffe2c
    7060:	ldr	r1, [pc, #2140]	; 78c4 <rb_sha256_crypt_r+0x918>
    7064:	mov	r0, r4
    7068:	add	r1, pc, r1
    706c:	bl	4c0c <strcspn@plt>
    7070:	cmp	r0, #16
    7074:	movcc	r3, r0
    7078:	movcs	r3, #16
    707c:	mov	r0, r8
    7080:	str	r3, [fp, #-448]	; 0xfffffe40
    7084:	bl	4804 <strlen@plt>
    7088:	ands	r3, r8, #3
    708c:	streq	r3, [fp, #-460]	; 0xfffffe34
    7090:	mov	r9, r0
    7094:	beq	70bc <rb_sha256_crypt_r+0x110>
    7098:	add	r3, r0, #18
    709c:	bic	r3, r3, #7
    70a0:	sub	sp, sp, r3
    70a4:	mov	r2, r0
    70a8:	mov	r1, r8
    70ac:	add	r0, sp, #12
    70b0:	bl	4828 <memcpy@plt>
    70b4:	mov	r8, r0
    70b8:	str	r0, [fp, #-460]	; 0xfffffe34
    70bc:	ands	r3, r4, #3
    70c0:	streq	r3, [fp, #-464]	; 0xfffffe30
    70c4:	beq	70f0 <rb_sha256_crypt_r+0x144>
    70c8:	ldr	r3, [fp, #-448]	; 0xfffffe40
    70cc:	mov	r1, r4
    70d0:	add	r3, r3, #18
    70d4:	bic	r3, r3, #7
    70d8:	sub	sp, sp, r3
    70dc:	ldr	r2, [fp, #-448]	; 0xfffffe40
    70e0:	add	r0, sp, #12
    70e4:	bl	4828 <memcpy@plt>
    70e8:	mov	r4, r0
    70ec:	str	r0, [fp, #-464]	; 0xfffffe30
    70f0:	sub	r7, fp, #380	; 0x17c
    70f4:	mov	r0, r7
    70f8:	bl	58cc <rb_sha256_init_ctx>
    70fc:	mov	r2, r7
    7100:	mov	r1, r9
    7104:	mov	r0, r8
    7108:	bl	69fc <rb_sha256_process_bytes>
    710c:	mov	r2, r7
    7110:	ldr	r1, [fp, #-448]	; 0xfffffe40
    7114:	mov	r0, r4
    7118:	bl	69fc <rb_sha256_process_bytes>
    711c:	mov	r0, r6
    7120:	bl	58cc <rb_sha256_init_ctx>
    7124:	mov	r2, r6
    7128:	mov	r1, r9
    712c:	mov	r0, r8
    7130:	bl	69fc <rb_sha256_process_bytes>
    7134:	mov	r2, r6
    7138:	ldr	r1, [fp, #-448]	; 0xfffffe40
    713c:	mov	r0, r4
    7140:	bl	69fc <rb_sha256_process_bytes>
    7144:	sub	sl, fp, #444	; 0x1bc
    7148:	mov	r2, r6
    714c:	mov	r1, r9
    7150:	mov	r0, r8
    7154:	bl	69fc <rb_sha256_process_bytes>
    7158:	mov	r1, sl
    715c:	mov	r0, r6
    7160:	bl	6b84 <rb_sha256_finish_ctx>
    7164:	mov	r5, r9
    7168:	mov	r3, #32
    716c:	cmp	r5, #32
    7170:	mov	r2, r7
    7174:	bhi	763c <rb_sha256_crypt_r+0x690>
    7178:	mov	r1, r5
    717c:	mov	r0, sl
    7180:	bl	69fc <rb_sha256_process_bytes>
    7184:	mov	r5, r9
    7188:	cmp	r5, #0
    718c:	bne	7658 <rb_sha256_crypt_r+0x6ac>
    7190:	sub	r1, fp, #444	; 0x1bc
    7194:	mov	r0, r7
    7198:	bl	6b84 <rb_sha256_finish_ctx>
    719c:	mov	r0, r6
    71a0:	bl	58cc <rb_sha256_init_ctx>
    71a4:	mov	r7, r5
    71a8:	cmp	r7, r9
    71ac:	bne	767c <rb_sha256_crypt_r+0x6d0>
    71b0:	sub	r1, fp, #412	; 0x19c
    71b4:	mov	r0, r6
    71b8:	bl	6b84 <rb_sha256_finish_ctx>
    71bc:	add	r3, r7, #14
    71c0:	bic	r3, r3, #7
    71c4:	sub	sp, sp, r3
    71c8:	add	sl, sp, #8
    71cc:	mov	r8, #0
    71d0:	sub	r3, r7, r8
    71d4:	cmp	r3, #31
    71d8:	bhi	7694 <rb_sha256_crypt_r+0x6e8>
    71dc:	bic	r0, r7, #31
    71e0:	and	r2, r7, #31
    71e4:	sub	r1, fp, #412	; 0x19c
    71e8:	add	r0, sl, r0
    71ec:	bl	4828 <memcpy@plt>
    71f0:	mov	r0, r6
    71f4:	bl	58cc <rb_sha256_init_ctx>
    71f8:	mov	r8, r5
    71fc:	ldrb	r3, [fp, #-444]	; 0xfffffe44
    7200:	add	r3, r3, #16
    7204:	cmp	r8, r3
    7208:	bcc	76b4 <rb_sha256_crypt_r+0x708>
    720c:	sub	r8, fp, #412	; 0x19c
    7210:	mov	r1, r8
    7214:	mov	r0, r6
    7218:	bl	6b84 <rb_sha256_finish_ctx>
    721c:	ldr	r3, [fp, #-448]	; 0xfffffe40
    7220:	mov	r1, r8
    7224:	add	r3, r3, #14
    7228:	bic	r3, r3, #7
    722c:	sub	sp, sp, r3
    7230:	add	r3, sp, #8
    7234:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7238:	mov	r0, r3
    723c:	str	r3, [fp, #-472]	; 0xfffffe28
    7240:	bl	4828 <memcpy@plt>
    7244:	sub	r6, fp, #380	; 0x17c
    7248:	sub	r8, fp, #444	; 0x1bc
    724c:	mov	r9, #32
    7250:	mov	r0, r6
    7254:	bl	58cc <rb_sha256_init_ctx>
    7258:	ands	r3, r5, #1
    725c:	movne	r1, r7
    7260:	movne	r0, sl
    7264:	moveq	r1, r9
    7268:	moveq	r0, r8
    726c:	mov	r2, r6
    7270:	str	r3, [fp, #-480]	; 0xfffffe20
    7274:	bl	69fc <rb_sha256_process_bytes>
    7278:	mov	r1, #3
    727c:	mov	r0, r5
    7280:	bl	133fc <__aeabi_uidivmod>
    7284:	cmp	r1, #0
    7288:	beq	729c <rb_sha256_crypt_r+0x2f0>
    728c:	mov	r2, r6
    7290:	ldr	r1, [fp, #-448]	; 0xfffffe40
    7294:	ldr	r0, [fp, #-472]	; 0xfffffe28
    7298:	bl	69fc <rb_sha256_process_bytes>
    729c:	mov	r1, #7
    72a0:	mov	r0, r5
    72a4:	bl	133fc <__aeabi_uidivmod>
    72a8:	cmp	r1, #0
    72ac:	beq	72c0 <rb_sha256_crypt_r+0x314>
    72b0:	mov	r2, r6
    72b4:	mov	r1, r7
    72b8:	mov	r0, sl
    72bc:	bl	69fc <rb_sha256_process_bytes>
    72c0:	ands	r3, r5, #1
    72c4:	cmp	r3, #0
    72c8:	movne	r1, r9
    72cc:	movne	r0, r8
    72d0:	moveq	r1, r7
    72d4:	moveq	r0, sl
    72d8:	mov	r2, r6
    72dc:	bl	69fc <rb_sha256_process_bytes>
    72e0:	mov	r1, r8
    72e4:	mov	r0, r6
    72e8:	bl	6b84 <rb_sha256_finish_ctx>
    72ec:	ldr	r3, [fp, #-456]	; 0xfffffe38
    72f0:	add	r5, r5, #1
    72f4:	cmp	r3, r5
    72f8:	bne	7250 <rb_sha256_crypt_r+0x2a4>
    72fc:	ldr	r3, [fp, #-476]	; 0xfffffe24
    7300:	mov	r1, #0
    7304:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    7308:	bic	r8, r3, r3, asr #31
    730c:	mov	r2, r8
    7310:	bl	4648 <memset@plt>
    7314:	ldr	r1, [pc, #1452]	; 78c8 <rb_sha256_crypt_r+0x91c>
    7318:	mov	r2, r8
    731c:	add	r1, pc, r1
    7320:	add	r1, r1, #2000	; 0x7d0
    7324:	add	r1, r1, #8
    7328:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    732c:	bl	4594 <strncpy@plt>
    7330:	mov	r1, #0
    7334:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    7338:	bl	45d0 <strchr@plt>
    733c:	subs	r9, r0, #0
    7340:	ldreq	r3, [fp, #-452]	; 0xfffffe3c
    7344:	addeq	r9, r3, r8
    7348:	ldr	r3, [fp, #-476]	; 0xfffffe24
    734c:	sub	r8, r3, #3
    7350:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    7354:	cmp	r3, #0
    7358:	beq	738c <rb_sha256_crypt_r+0x3e0>
    735c:	ldr	r3, [pc, #1384]	; 78cc <rb_sha256_crypt_r+0x920>
    7360:	ldr	r2, [pc, #1384]	; 78d0 <rb_sha256_crypt_r+0x924>
    7364:	add	r3, pc, r3
    7368:	add	r3, r3, #2000	; 0x7d0
    736c:	bic	r1, r8, r8, asr #31
    7370:	mov	r0, r9
    7374:	str	r5, [sp]
    7378:	add	r3, r3, #12
    737c:	add	r2, pc, r2
    7380:	bl	4bdc <snprintf@plt>
    7384:	add	r9, r9, r0
    7388:	sub	r8, r8, r0
    738c:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7390:	mov	r1, #0
    7394:	mov	r0, r9
    7398:	bl	4648 <memset@plt>
    739c:	bic	r5, r8, r8, asr #31
    73a0:	ldr	r3, [fp, #-448]	; 0xfffffe40
    73a4:	mov	r1, r4
    73a8:	cmp	r5, r3
    73ac:	movcs	r5, r3
    73b0:	mov	r2, r5
    73b4:	mov	r0, r9
    73b8:	bl	4594 <strncpy@plt>
    73bc:	mov	r1, #0
    73c0:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    73c4:	bl	45d0 <strchr@plt>
    73c8:	ldr	r3, [fp, #-448]	; 0xfffffe40
    73cc:	sub	r8, r8, r5
    73d0:	ldr	ip, [pc, #1276]	; 78d4 <rb_sha256_crypt_r+0x928>
    73d4:	add	ip, pc, ip
    73d8:	cmp	r0, #0
    73dc:	moveq	r0, r3
    73e0:	cmp	r8, #0
    73e4:	movgt	r3, #36	; 0x24
    73e8:	strbgt	r3, [r0]
    73ec:	ldrb	r3, [fp, #-434]	; 0xfffffe4e
    73f0:	ldrb	r2, [fp, #-444]	; 0xfffffe44
    73f4:	addgt	r0, r0, #1
    73f8:	subgt	r8, r8, #1
    73fc:	lsl	r3, r3, #8
    7400:	orr	r3, r3, r2, lsl #16
    7404:	ldrb	r2, [fp, #-424]	; 0xfffffe58
    7408:	orr	r3, r3, r2
    740c:	mov	r2, r0
    7410:	sub	r1, r2, #4
    7414:	cmp	r0, r1
    7418:	cmpne	r8, #0
    741c:	bgt	76cc <rb_sha256_crypt_r+0x720>
    7420:	ldrb	r3, [fp, #-443]	; 0xfffffe45
    7424:	ldrb	r1, [fp, #-423]	; 0xfffffe59
    7428:	ldr	ip, [pc, #1192]	; 78d8 <rb_sha256_crypt_r+0x92c>
    742c:	lsl	r3, r3, #8
    7430:	orr	r3, r3, r1, lsl #16
    7434:	ldrb	r1, [fp, #-433]	; 0xfffffe4f
    7438:	add	ip, pc, ip
    743c:	orr	r3, r3, r1
    7440:	mov	r1, r2
    7444:	sub	r0, r1, #4
    7448:	cmp	r2, r0
    744c:	cmpne	r8, #0
    7450:	bgt	76e8 <rb_sha256_crypt_r+0x73c>
    7454:	ldrb	r3, [fp, #-422]	; 0xfffffe5a
    7458:	ldrb	r2, [fp, #-432]	; 0xfffffe50
    745c:	ldr	ip, [pc, #1144]	; 78dc <rb_sha256_crypt_r+0x930>
    7460:	lsl	r3, r3, #8
    7464:	orr	r3, r3, r2, lsl #16
    7468:	ldrb	r2, [fp, #-442]	; 0xfffffe46
    746c:	add	ip, pc, ip
    7470:	orr	r3, r3, r2
    7474:	mov	r2, r1
    7478:	sub	r0, r2, #4
    747c:	cmp	r1, r0
    7480:	cmpne	r8, #0
    7484:	bgt	7704 <rb_sha256_crypt_r+0x758>
    7488:	ldrb	r3, [fp, #-431]	; 0xfffffe51
    748c:	ldrb	r1, [fp, #-441]	; 0xfffffe47
    7490:	ldr	ip, [pc, #1096]	; 78e0 <rb_sha256_crypt_r+0x934>
    7494:	lsl	r3, r3, #8
    7498:	orr	r3, r3, r1, lsl #16
    749c:	ldrb	r1, [fp, #-421]	; 0xfffffe5b
    74a0:	add	ip, pc, ip
    74a4:	orr	r3, r3, r1
    74a8:	mov	r1, r2
    74ac:	sub	r0, r1, #4
    74b0:	cmp	r2, r0
    74b4:	cmpne	r8, #0
    74b8:	bgt	7720 <rb_sha256_crypt_r+0x774>
    74bc:	ldrb	r3, [fp, #-440]	; 0xfffffe48
    74c0:	ldrb	r2, [fp, #-420]	; 0xfffffe5c
    74c4:	ldr	ip, [pc, #1048]	; 78e4 <rb_sha256_crypt_r+0x938>
    74c8:	lsl	r3, r3, #8
    74cc:	orr	r3, r3, r2, lsl #16
    74d0:	ldrb	r2, [fp, #-430]	; 0xfffffe52
    74d4:	add	ip, pc, ip
    74d8:	orr	r3, r3, r2
    74dc:	mov	r2, r1
    74e0:	sub	r0, r2, #4
    74e4:	cmp	r1, r0
    74e8:	cmpne	r8, #0
    74ec:	bgt	773c <rb_sha256_crypt_r+0x790>
    74f0:	ldrb	r3, [fp, #-419]	; 0xfffffe5d
    74f4:	ldrb	r1, [fp, #-429]	; 0xfffffe53
    74f8:	ldr	ip, [pc, #1000]	; 78e8 <rb_sha256_crypt_r+0x93c>
    74fc:	lsl	r3, r3, #8
    7500:	orr	r3, r3, r1, lsl #16
    7504:	ldrb	r1, [fp, #-439]	; 0xfffffe49
    7508:	add	ip, pc, ip
    750c:	orr	r3, r3, r1
    7510:	mov	r1, r2
    7514:	sub	r0, r1, #4
    7518:	cmp	r2, r0
    751c:	cmpne	r8, #0
    7520:	bgt	7758 <rb_sha256_crypt_r+0x7ac>
    7524:	ldrb	r3, [fp, #-428]	; 0xfffffe54
    7528:	ldrb	r2, [fp, #-438]	; 0xfffffe4a
    752c:	ldr	ip, [pc, #952]	; 78ec <rb_sha256_crypt_r+0x940>
    7530:	lsl	r3, r3, #8
    7534:	orr	r3, r3, r2, lsl #16
    7538:	ldrb	r2, [fp, #-418]	; 0xfffffe5e
    753c:	add	ip, pc, ip
    7540:	orr	r3, r3, r2
    7544:	mov	r2, r1
    7548:	sub	r0, r2, #4
    754c:	cmp	r1, r0
    7550:	cmpne	r8, #0
    7554:	bgt	7774 <rb_sha256_crypt_r+0x7c8>
    7558:	ldrb	r3, [fp, #-437]	; 0xfffffe4b
    755c:	ldrb	r1, [fp, #-417]	; 0xfffffe5f
    7560:	ldr	ip, [pc, #904]	; 78f0 <rb_sha256_crypt_r+0x944>
    7564:	lsl	r3, r3, #8
    7568:	orr	r3, r3, r1, lsl #16
    756c:	ldrb	r1, [fp, #-427]	; 0xfffffe55
    7570:	add	ip, pc, ip
    7574:	orr	r3, r3, r1
    7578:	mov	r1, r2
    757c:	sub	r0, r1, #4
    7580:	cmp	r2, r0
    7584:	cmpne	r8, #0
    7588:	bgt	7790 <rb_sha256_crypt_r+0x7e4>
    758c:	ldrb	r3, [fp, #-416]	; 0xfffffe60
    7590:	ldrb	r2, [fp, #-426]	; 0xfffffe56
    7594:	ldr	ip, [pc, #856]	; 78f4 <rb_sha256_crypt_r+0x948>
    7598:	lsl	r3, r3, #8
    759c:	orr	r3, r3, r2, lsl #16
    75a0:	ldrb	r2, [fp, #-436]	; 0xfffffe4c
    75a4:	add	ip, pc, ip
    75a8:	orr	r3, r3, r2
    75ac:	mov	r2, r1
    75b0:	sub	r0, r2, #4
    75b4:	cmp	r1, r0
    75b8:	cmpne	r8, #0
    75bc:	bgt	77ac <rb_sha256_crypt_r+0x800>
    75c0:	ldrb	r3, [fp, #-425]	; 0xfffffe57
    75c4:	ldrb	r1, [fp, #-435]	; 0xfffffe4d
    75c8:	ldr	ip, [pc, #808]	; 78f8 <rb_sha256_crypt_r+0x94c>
    75cc:	lsl	r3, r3, #8
    75d0:	orr	r3, r3, r1, lsl #16
    75d4:	ldrb	r1, [fp, #-415]	; 0xfffffe61
    75d8:	add	ip, pc, ip
    75dc:	orr	r3, r3, r1
    75e0:	mov	r1, r2
    75e4:	sub	r0, r1, #4
    75e8:	cmp	r2, r0
    75ec:	cmpne	r8, #0
    75f0:	bgt	77c8 <rb_sha256_crypt_r+0x81c>
    75f4:	sub	r4, fp, #444	; 0x1bc
    75f8:	ldr	ip, [pc, #764]	; 78fc <rb_sha256_crypt_r+0x950>
    75fc:	ldrh	r3, [r4, #30]
    7600:	add	r0, r1, #3
    7604:	add	ip, pc, ip
    7608:	cmp	r1, r0
    760c:	beq	7800 <rb_sha256_crypt_r+0x854>
    7610:	cmp	r8, #0
    7614:	bgt	77e4 <rb_sha256_crypt_r+0x838>
    7618:	bl	4d14 <__errno_location@plt>
    761c:	mov	r3, #34	; 0x22
    7620:	str	r3, [r0]
    7624:	mov	r3, #0
    7628:	str	r3, [fp, #-452]	; 0xfffffe3c
    762c:	b	7810 <rb_sha256_crypt_r+0x864>
    7630:	ldr	r3, [pc, #712]	; 7900 <rb_sha256_crypt_r+0x954>
    7634:	str	r3, [fp, #-456]	; 0xfffffe38
    7638:	b	7060 <rb_sha256_crypt_r+0xb4>
    763c:	mov	r1, r3
    7640:	mov	r0, sl
    7644:	str	r3, [fp, #-472]	; 0xfffffe28
    7648:	sub	r5, r5, #32
    764c:	bl	69fc <rb_sha256_process_bytes>
    7650:	ldr	r3, [fp, #-472]	; 0xfffffe28
    7654:	b	716c <rb_sha256_crypt_r+0x1c0>
    7658:	tst	r5, #1
    765c:	mov	r2, r7
    7660:	movne	r1, #32
    7664:	movne	r0, sl
    7668:	moveq	r1, r9
    766c:	moveq	r0, r8
    7670:	bl	69fc <rb_sha256_process_bytes>
    7674:	lsr	r5, r5, #1
    7678:	b	7188 <rb_sha256_crypt_r+0x1dc>
    767c:	mov	r2, r6
    7680:	mov	r1, r9
    7684:	mov	r0, r8
    7688:	bl	69fc <rb_sha256_process_bytes>
    768c:	add	r7, r7, #1
    7690:	b	71a8 <rb_sha256_crypt_r+0x1fc>
    7694:	sub	lr, fp, #412	; 0x19c
    7698:	add	ip, sl, r8
    769c:	ldm	lr!, {r0, r1, r2, r3}
    76a0:	add	r8, r8, #32
    76a4:	stmia	ip!, {r0, r1, r2, r3}
    76a8:	ldm	lr, {r0, r1, r2, r3}
    76ac:	stm	ip, {r0, r1, r2, r3}
    76b0:	b	71d0 <rb_sha256_crypt_r+0x224>
    76b4:	mov	r2, r6
    76b8:	ldr	r1, [fp, #-448]	; 0xfffffe40
    76bc:	mov	r0, r4
    76c0:	bl	69fc <rb_sha256_process_bytes>
    76c4:	add	r8, r8, #1
    76c8:	b	71fc <rb_sha256_crypt_r+0x250>
    76cc:	and	r1, r3, #63	; 0x3f
    76d0:	add	r1, ip, r1
    76d4:	sub	r8, r8, #1
    76d8:	ldrb	r1, [r1, #848]	; 0x350
    76dc:	lsr	r3, r3, #6
    76e0:	strb	r1, [r2], #1
    76e4:	b	7410 <rb_sha256_crypt_r+0x464>
    76e8:	and	r0, r3, #63	; 0x3f
    76ec:	add	r0, ip, r0
    76f0:	sub	r8, r8, #1
    76f4:	ldrb	r0, [r0, #848]	; 0x350
    76f8:	lsr	r3, r3, #6
    76fc:	strb	r0, [r1], #1
    7700:	b	7444 <rb_sha256_crypt_r+0x498>
    7704:	and	r0, r3, #63	; 0x3f
    7708:	add	r0, ip, r0
    770c:	sub	r8, r8, #1
    7710:	ldrb	r0, [r0, #848]	; 0x350
    7714:	lsr	r3, r3, #6
    7718:	strb	r0, [r2], #1
    771c:	b	7478 <rb_sha256_crypt_r+0x4cc>
    7720:	and	r0, r3, #63	; 0x3f
    7724:	add	r0, ip, r0
    7728:	sub	r8, r8, #1
    772c:	ldrb	r0, [r0, #848]	; 0x350
    7730:	lsr	r3, r3, #6
    7734:	strb	r0, [r1], #1
    7738:	b	74ac <rb_sha256_crypt_r+0x500>
    773c:	and	r0, r3, #63	; 0x3f
    7740:	add	r0, ip, r0
    7744:	sub	r8, r8, #1
    7748:	ldrb	r0, [r0, #848]	; 0x350
    774c:	lsr	r3, r3, #6
    7750:	strb	r0, [r2], #1
    7754:	b	74e0 <rb_sha256_crypt_r+0x534>
    7758:	and	r0, r3, #63	; 0x3f
    775c:	add	r0, ip, r0
    7760:	sub	r8, r8, #1
    7764:	ldrb	r0, [r0, #848]	; 0x350
    7768:	lsr	r3, r3, #6
    776c:	strb	r0, [r1], #1
    7770:	b	7514 <rb_sha256_crypt_r+0x568>
    7774:	and	r0, r3, #63	; 0x3f
    7778:	add	r0, ip, r0
    777c:	sub	r8, r8, #1
    7780:	ldrb	r0, [r0, #848]	; 0x350
    7784:	lsr	r3, r3, #6
    7788:	strb	r0, [r2], #1
    778c:	b	7548 <rb_sha256_crypt_r+0x59c>
    7790:	and	r0, r3, #63	; 0x3f
    7794:	add	r0, ip, r0
    7798:	sub	r8, r8, #1
    779c:	ldrb	r0, [r0, #848]	; 0x350
    77a0:	lsr	r3, r3, #6
    77a4:	strb	r0, [r1], #1
    77a8:	b	757c <rb_sha256_crypt_r+0x5d0>
    77ac:	and	r0, r3, #63	; 0x3f
    77b0:	add	r0, ip, r0
    77b4:	sub	r8, r8, #1
    77b8:	ldrb	r0, [r0, #848]	; 0x350
    77bc:	lsr	r3, r3, #6
    77c0:	strb	r0, [r2], #1
    77c4:	b	75b0 <rb_sha256_crypt_r+0x604>
    77c8:	and	r0, r3, #63	; 0x3f
    77cc:	add	r0, ip, r0
    77d0:	sub	r8, r8, #1
    77d4:	ldrb	r0, [r0, #848]	; 0x350
    77d8:	lsr	r3, r3, #6
    77dc:	strb	r0, [r1], #1
    77e0:	b	75e4 <rb_sha256_crypt_r+0x638>
    77e4:	and	r2, r3, #63	; 0x3f
    77e8:	add	r2, ip, r2
    77ec:	sub	r8, r8, #1
    77f0:	ldrb	r2, [r2, #848]	; 0x350
    77f4:	lsr	r3, r3, #6
    77f8:	strb	r2, [r1], #1
    77fc:	b	7608 <rb_sha256_crypt_r+0x65c>
    7800:	cmp	r8, #0
    7804:	movgt	r3, #0
    7808:	strbgt	r3, [r1]
    780c:	ble	7618 <rb_sha256_crypt_r+0x66c>
    7810:	mov	r0, r6
    7814:	bl	58cc <rb_sha256_init_ctx>
    7818:	mov	r1, r4
    781c:	mov	r0, r6
    7820:	bl	6b84 <rb_sha256_finish_ctx>
    7824:	mov	r2, #32
    7828:	mov	r1, #0
    782c:	sub	r0, fp, #412	; 0x19c
    7830:	bl	4648 <memset@plt>
    7834:	mov	r2, r7
    7838:	mov	r1, #0
    783c:	mov	r0, sl
    7840:	bl	4648 <memset@plt>
    7844:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7848:	mov	r1, #0
    784c:	ldr	r0, [fp, #-472]	; 0xfffffe28
    7850:	bl	4648 <memset@plt>
    7854:	mov	r2, #172	; 0xac
    7858:	mov	r1, #0
    785c:	mov	r0, r6
    7860:	bl	4648 <memset@plt>
    7864:	mov	r2, #172	; 0xac
    7868:	mov	r1, #0
    786c:	sub	r0, fp, #208	; 0xd0
    7870:	bl	4648 <memset@plt>
    7874:	ldr	r3, [fp, #-460]	; 0xfffffe34
    7878:	cmp	r3, #0
    787c:	beq	7890 <rb_sha256_crypt_r+0x8e4>
    7880:	mov	r2, r7
    7884:	mov	r1, #0
    7888:	mov	r0, r3
    788c:	bl	4648 <memset@plt>
    7890:	ldr	r3, [fp, #-464]	; 0xfffffe30
    7894:	cmp	r3, #0
    7898:	beq	78ac <rb_sha256_crypt_r+0x900>
    789c:	ldr	r2, [fp, #-448]	; 0xfffffe40
    78a0:	mov	r1, #0
    78a4:	mov	r0, r3
    78a8:	bl	4648 <memset@plt>
    78ac:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    78b0:	sub	sp, fp, #32
    78b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78b8:	.word	0x0000c6e4
    78bc:	.word	0x0000c6b8
    78c0:	.word	0x3b9ac9ff
    78c4:	.word	0x0000ce41
    78c8:	.word	0x0000c384
    78cc:	.word	0x0000c33c
    78d0:	.word	0x0000cb24
    78d4:	.word	0x0000c2cc
    78d8:	.word	0x0000c268
    78dc:	.word	0x0000c234
    78e0:	.word	0x0000c200
    78e4:	.word	0x0000c1cc
    78e8:	.word	0x0000c198
    78ec:	.word	0x0000c164
    78f0:	.word	0x0000c130
    78f4:	.word	0x0000c0fc
    78f8:	.word	0x0000c0c8
    78fc:	.word	0x0000c09c
    7900:	.word	0x00001388

00007904 <rb_sha512_crypt_r>:
    7904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7908:	mov	r7, r0
    790c:	ldr	r0, [pc, #3188]	; 8588 <rb_sha512_crypt_r+0xc84>
    7910:	add	fp, sp, #32
    7914:	add	r0, pc, r0
    7918:	add	r0, r0, #2016	; 0x7e0
    791c:	sub	sp, sp, #860	; 0x35c
    7920:	add	r0, r0, #4
    7924:	str	r2, [fp, #-856]	; 0xfffffca8
    7928:	mov	r2, #3
    792c:	mov	r4, r1
    7930:	str	r3, [fp, #-880]	; 0xfffffc90
    7934:	bl	4c3c <strncmp@plt>
    7938:	ldr	r1, [pc, #3148]	; 858c <rb_sha512_crypt_r+0xc88>
    793c:	mov	r2, #7
    7940:	add	r1, pc, r1
    7944:	add	r1, r1, #2016	; 0x7e0
    7948:	add	r1, r1, #8
    794c:	cmp	r0, #0
    7950:	addeq	r4, r4, #3
    7954:	mov	r0, r4
    7958:	bl	4c3c <strncmp@plt>
    795c:	subs	r3, r0, #0
    7960:	str	r3, [fp, #-876]	; 0xfffffc94
    7964:	movne	r3, #0
    7968:	strne	r3, [fp, #-876]	; 0xfffffc94
    796c:	bne	8290 <rb_sha512_crypt_r+0x98c>
    7970:	mov	r2, #10
    7974:	sub	r1, fp, #380	; 0x17c
    7978:	add	r0, r4, #7
    797c:	bl	481c <strtoul@plt>
    7980:	ldr	r3, [fp, #-380]	; 0xfffffe84
    7984:	ldrb	r2, [r3]
    7988:	cmp	r2, #36	; 0x24
    798c:	bne	8290 <rb_sha512_crypt_r+0x98c>
    7990:	add	r4, r3, #1
    7994:	ldr	r3, [pc, #3060]	; 8590 <rb_sha512_crypt_r+0xc8c>
    7998:	cmp	r0, r3
    799c:	movcc	r3, r0
    79a0:	cmp	r3, #1000	; 0x3e8
    79a4:	movcc	r3, #1000	; 0x3e8
    79a8:	str	r3, [fp, #-864]	; 0xfffffca0
    79ac:	mov	r3, #1
    79b0:	str	r3, [fp, #-876]	; 0xfffffc94
    79b4:	ldr	r1, [pc, #3032]	; 8594 <rb_sha512_crypt_r+0xc90>
    79b8:	mov	r0, r4
    79bc:	add	r1, pc, r1
    79c0:	bl	4c0c <strcspn@plt>
    79c4:	cmp	r0, #16
    79c8:	movcc	r9, r0
    79cc:	mov	r0, r7
    79d0:	movcs	r9, #16
    79d4:	bl	4804 <strlen@plt>
    79d8:	ands	r3, r7, #7
    79dc:	streq	r3, [fp, #-868]	; 0xfffffc9c
    79e0:	mov	r8, r0
    79e4:	beq	7a0c <rb_sha512_crypt_r+0x108>
    79e8:	add	r3, r0, #22
    79ec:	bic	r3, r3, #7
    79f0:	sub	sp, sp, r3
    79f4:	mov	r2, r0
    79f8:	mov	r1, r7
    79fc:	add	r0, sp, #16
    7a00:	bl	4828 <memcpy@plt>
    7a04:	mov	r7, r0
    7a08:	str	r0, [fp, #-868]	; 0xfffffc9c
    7a0c:	ands	r3, r4, #7
    7a10:	streq	r3, [fp, #-872]	; 0xfffffc98
    7a14:	beq	7a3c <rb_sha512_crypt_r+0x138>
    7a18:	add	r3, r9, #22
    7a1c:	bic	r3, r3, #7
    7a20:	sub	sp, sp, r3
    7a24:	mov	r1, r4
    7a28:	mov	r2, r9
    7a2c:	add	r0, sp, #16
    7a30:	bl	4828 <memcpy@plt>
    7a34:	mov	r4, r0
    7a38:	str	r0, [fp, #-872]	; 0xfffffc98
    7a3c:	sub	r6, fp, #724	; 0x2d4
    7a40:	mov	r0, r6
    7a44:	bl	5e1c <rb_sha512_init_ctx>
    7a48:	mov	r2, r6
    7a4c:	mov	r1, r8
    7a50:	mov	r0, r7
    7a54:	bl	6c5c <rb_sha512_process_bytes>
    7a58:	mov	r2, r6
    7a5c:	mov	r1, r9
    7a60:	mov	r0, r4
    7a64:	bl	6c5c <rb_sha512_process_bytes>
    7a68:	sub	r3, fp, #380	; 0x17c
    7a6c:	mov	r0, r3
    7a70:	str	r3, [fp, #-860]	; 0xfffffca4
    7a74:	bl	5e1c <rb_sha512_init_ctx>
    7a78:	ldr	r2, [fp, #-860]	; 0xfffffca4
    7a7c:	mov	r1, r8
    7a80:	mov	r0, r7
    7a84:	bl	6c5c <rb_sha512_process_bytes>
    7a88:	ldr	r2, [fp, #-860]	; 0xfffffca4
    7a8c:	mov	r1, r9
    7a90:	mov	r0, r4
    7a94:	bl	6c5c <rb_sha512_process_bytes>
    7a98:	sub	sl, fp, #852	; 0x354
    7a9c:	ldr	r2, [fp, #-860]	; 0xfffffca4
    7aa0:	mov	r1, r8
    7aa4:	mov	r0, r7
    7aa8:	bl	6c5c <rb_sha512_process_bytes>
    7aac:	mov	r1, sl
    7ab0:	ldr	r0, [fp, #-860]	; 0xfffffca4
    7ab4:	bl	6dd8 <rb_sha512_finish_ctx>
    7ab8:	mov	r5, r8
    7abc:	mov	r3, #64	; 0x40
    7ac0:	cmp	r5, #64	; 0x40
    7ac4:	mov	r2, r6
    7ac8:	bhi	829c <rb_sha512_crypt_r+0x998>
    7acc:	mov	r1, r5
    7ad0:	mov	r0, sl
    7ad4:	bl	6c5c <rb_sha512_process_bytes>
    7ad8:	mov	r5, r8
    7adc:	cmp	r5, #0
    7ae0:	bne	82b8 <rb_sha512_crypt_r+0x9b4>
    7ae4:	sub	r1, fp, #852	; 0x354
    7ae8:	mov	r0, r6
    7aec:	bl	6dd8 <rb_sha512_finish_ctx>
    7af0:	ldr	r0, [fp, #-860]	; 0xfffffca4
    7af4:	bl	5e1c <rb_sha512_init_ctx>
    7af8:	ldr	sl, [fp, #-860]	; 0xfffffca4
    7afc:	mov	r6, r5
    7b00:	cmp	r6, r8
    7b04:	bne	82dc <rb_sha512_crypt_r+0x9d8>
    7b08:	sub	r1, fp, #788	; 0x314
    7b0c:	ldr	r0, [fp, #-860]	; 0xfffffca4
    7b10:	bl	6dd8 <rb_sha512_finish_ctx>
    7b14:	add	r3, r6, #14
    7b18:	bic	r3, r3, #7
    7b1c:	sub	sp, sp, r3
    7b20:	add	sl, sp, #8
    7b24:	mov	r7, #0
    7b28:	sub	r3, r6, r7
    7b2c:	cmp	r3, #63	; 0x3f
    7b30:	bhi	82f4 <rb_sha512_crypt_r+0x9f0>
    7b34:	bic	r0, r6, #63	; 0x3f
    7b38:	and	r2, r6, #63	; 0x3f
    7b3c:	sub	r1, fp, #788	; 0x314
    7b40:	add	r0, sl, r0
    7b44:	sub	r8, fp, #380	; 0x17c
    7b48:	bl	4828 <memcpy@plt>
    7b4c:	mov	r0, r8
    7b50:	bl	5e1c <rb_sha512_init_ctx>
    7b54:	mov	r7, r5
    7b58:	ldrb	r3, [fp, #-852]	; 0xfffffcac
    7b5c:	add	r3, r3, #16
    7b60:	cmp	r7, r3
    7b64:	bcc	8324 <rb_sha512_crypt_r+0xa20>
    7b68:	sub	r7, fp, #788	; 0x314
    7b6c:	mov	r1, r7
    7b70:	mov	r0, r8
    7b74:	bl	6dd8 <rb_sha512_finish_ctx>
    7b78:	add	r3, r9, #14
    7b7c:	bic	r3, r3, #7
    7b80:	sub	sp, sp, r3
    7b84:	add	r3, sp, #8
    7b88:	mov	r1, r7
    7b8c:	mov	r2, r9
    7b90:	mov	r0, r3
    7b94:	str	r3, [fp, #-860]	; 0xfffffca4
    7b98:	bl	4828 <memcpy@plt>
    7b9c:	sub	r7, fp, #724	; 0x2d4
    7ba0:	sub	r8, fp, #852	; 0x354
    7ba4:	mov	r0, r7
    7ba8:	bl	5e1c <rb_sha512_init_ctx>
    7bac:	ands	r3, r5, #1
    7bb0:	movne	r1, r6
    7bb4:	movne	r0, sl
    7bb8:	moveq	r1, #64	; 0x40
    7bbc:	moveq	r0, r8
    7bc0:	mov	r2, r7
    7bc4:	str	r3, [fp, #-884]	; 0xfffffc8c
    7bc8:	bl	6c5c <rb_sha512_process_bytes>
    7bcc:	mov	r1, #3
    7bd0:	mov	r0, r5
    7bd4:	bl	133fc <__aeabi_uidivmod>
    7bd8:	cmp	r1, #0
    7bdc:	beq	7bf0 <rb_sha512_crypt_r+0x2ec>
    7be0:	mov	r2, r7
    7be4:	mov	r1, r9
    7be8:	ldr	r0, [fp, #-860]	; 0xfffffca4
    7bec:	bl	6c5c <rb_sha512_process_bytes>
    7bf0:	mov	r1, #7
    7bf4:	mov	r0, r5
    7bf8:	bl	133fc <__aeabi_uidivmod>
    7bfc:	cmp	r1, #0
    7c00:	beq	7c14 <rb_sha512_crypt_r+0x310>
    7c04:	mov	r2, r7
    7c08:	mov	r1, r6
    7c0c:	mov	r0, sl
    7c10:	bl	6c5c <rb_sha512_process_bytes>
    7c14:	ands	r3, r5, #1
    7c18:	cmp	r3, #0
    7c1c:	movne	r1, #64	; 0x40
    7c20:	movne	r0, r8
    7c24:	moveq	r1, r6
    7c28:	moveq	r0, sl
    7c2c:	mov	r2, r7
    7c30:	bl	6c5c <rb_sha512_process_bytes>
    7c34:	mov	r1, r8
    7c38:	mov	r0, r7
    7c3c:	bl	6dd8 <rb_sha512_finish_ctx>
    7c40:	ldr	r3, [fp, #-864]	; 0xfffffca0
    7c44:	add	r5, r5, #1
    7c48:	cmp	r3, r5
    7c4c:	bne	7ba4 <rb_sha512_crypt_r+0x2a0>
    7c50:	ldr	r3, [fp, #-880]	; 0xfffffc90
    7c54:	mov	r1, #0
    7c58:	ldr	r0, [fp, #-856]	; 0xfffffca8
    7c5c:	bic	r7, r3, r3, asr #31
    7c60:	mov	r2, r7
    7c64:	bl	4648 <memset@plt>
    7c68:	ldr	r1, [pc, #2344]	; 8598 <rb_sha512_crypt_r+0xc94>
    7c6c:	mov	r2, r7
    7c70:	add	r1, pc, r1
    7c74:	add	r1, r1, #2016	; 0x7e0
    7c78:	add	r1, r1, #4
    7c7c:	ldr	r0, [fp, #-856]	; 0xfffffca8
    7c80:	bl	4594 <strncpy@plt>
    7c84:	mov	r1, #0
    7c88:	ldr	r0, [fp, #-856]	; 0xfffffca8
    7c8c:	bl	45d0 <strchr@plt>
    7c90:	subs	r8, r0, #0
    7c94:	ldreq	r3, [fp, #-856]	; 0xfffffca8
    7c98:	addeq	r8, r3, r7
    7c9c:	ldr	r3, [fp, #-880]	; 0xfffffc90
    7ca0:	sub	r7, r3, #3
    7ca4:	ldr	r3, [fp, #-876]	; 0xfffffc94
    7ca8:	cmp	r3, #0
    7cac:	beq	7ce0 <rb_sha512_crypt_r+0x3dc>
    7cb0:	ldr	r3, [pc, #2276]	; 859c <rb_sha512_crypt_r+0xc98>
    7cb4:	ldr	r2, [pc, #2276]	; 85a0 <rb_sha512_crypt_r+0xc9c>
    7cb8:	add	r3, pc, r3
    7cbc:	add	r3, r3, #2016	; 0x7e0
    7cc0:	bic	r1, r7, r7, asr #31
    7cc4:	mov	r0, r8
    7cc8:	str	r5, [sp]
    7ccc:	add	r3, r3, #8
    7cd0:	add	r2, pc, r2
    7cd4:	bl	4bdc <snprintf@plt>
    7cd8:	add	r8, r8, r0
    7cdc:	sub	r7, r7, r0
    7ce0:	bic	r5, r7, r7, asr #31
    7ce4:	cmp	r5, r9
    7ce8:	movcs	r5, r9
    7cec:	mov	r2, r5
    7cf0:	mov	r1, #0
    7cf4:	mov	r0, r8
    7cf8:	bl	4648 <memset@plt>
    7cfc:	mov	r2, r5
    7d00:	mov	r1, r4
    7d04:	mov	r0, r8
    7d08:	bl	4594 <strncpy@plt>
    7d0c:	mov	r1, #0
    7d10:	ldr	r0, [fp, #-856]	; 0xfffffca8
    7d14:	bl	45d0 <strchr@plt>
    7d18:	sub	r7, r7, r5
    7d1c:	ldrb	r2, [fp, #-852]	; 0xfffffcac
    7d20:	ldr	ip, [pc, #2172]	; 85a4 <rb_sha512_crypt_r+0xca0>
    7d24:	add	ip, pc, ip
    7d28:	cmp	r0, #0
    7d2c:	ldreq	r3, [fp, #-856]	; 0xfffffca8
    7d30:	addeq	r0, r3, r9
    7d34:	cmp	r7, #0
    7d38:	movgt	r3, #36	; 0x24
    7d3c:	strbgt	r3, [r0]
    7d40:	ldrb	r3, [fp, #-831]	; 0xfffffcc1
    7d44:	addgt	r0, r0, #1
    7d48:	subgt	r7, r7, #1
    7d4c:	mov	r1, r0
    7d50:	lsl	r3, r3, #8
    7d54:	orr	r3, r3, r2, lsl #16
    7d58:	ldrb	r2, [fp, #-810]	; 0xfffffcd6
    7d5c:	orr	r3, r3, r2
    7d60:	sub	r2, r1, #4
    7d64:	cmp	r0, r2
    7d68:	cmpne	r7, #0
    7d6c:	bgt	833c <rb_sha512_crypt_r+0xa38>
    7d70:	ldrb	r3, [fp, #-809]	; 0xfffffcd7
    7d74:	ldrb	r2, [fp, #-830]	; 0xfffffcc2
    7d78:	ldr	ip, [pc, #2088]	; 85a8 <rb_sha512_crypt_r+0xca4>
    7d7c:	lsl	r3, r3, #8
    7d80:	orr	r3, r3, r2, lsl #16
    7d84:	ldrb	r2, [fp, #-851]	; 0xfffffcad
    7d88:	add	ip, pc, ip
    7d8c:	orr	r3, r3, r2
    7d90:	mov	r2, r1
    7d94:	sub	r0, r2, #4
    7d98:	cmp	r1, r0
    7d9c:	cmpne	r7, #0
    7da0:	bgt	8358 <rb_sha512_crypt_r+0xa54>
    7da4:	ldrb	r3, [fp, #-850]	; 0xfffffcae
    7da8:	ldrb	r1, [fp, #-808]	; 0xfffffcd8
    7dac:	ldr	ip, [pc, #2040]	; 85ac <rb_sha512_crypt_r+0xca8>
    7db0:	lsl	r3, r3, #8
    7db4:	orr	r3, r3, r1, lsl #16
    7db8:	ldrb	r1, [fp, #-829]	; 0xfffffcc3
    7dbc:	add	ip, pc, ip
    7dc0:	orr	r3, r3, r1
    7dc4:	mov	r1, r2
    7dc8:	sub	r0, r1, #4
    7dcc:	cmp	r2, r0
    7dd0:	cmpne	r7, #0
    7dd4:	bgt	8374 <rb_sha512_crypt_r+0xa70>
    7dd8:	ldrb	r3, [fp, #-828]	; 0xfffffcc4
    7ddc:	ldrb	r2, [fp, #-849]	; 0xfffffcaf
    7de0:	ldr	ip, [pc, #1992]	; 85b0 <rb_sha512_crypt_r+0xcac>
    7de4:	lsl	r3, r3, #8
    7de8:	orr	r3, r3, r2, lsl #16
    7dec:	ldrb	r2, [fp, #-807]	; 0xfffffcd9
    7df0:	add	ip, pc, ip
    7df4:	orr	r3, r3, r2
    7df8:	mov	r2, r1
    7dfc:	sub	r0, r2, #4
    7e00:	cmp	r1, r0
    7e04:	cmpne	r7, #0
    7e08:	bgt	8390 <rb_sha512_crypt_r+0xa8c>
    7e0c:	ldrb	r3, [fp, #-806]	; 0xfffffcda
    7e10:	ldrb	r1, [fp, #-827]	; 0xfffffcc5
    7e14:	ldr	ip, [pc, #1944]	; 85b4 <rb_sha512_crypt_r+0xcb0>
    7e18:	lsl	r3, r3, #8
    7e1c:	orr	r3, r3, r1, lsl #16
    7e20:	ldrb	r1, [fp, #-848]	; 0xfffffcb0
    7e24:	add	ip, pc, ip
    7e28:	orr	r3, r3, r1
    7e2c:	mov	r1, r2
    7e30:	sub	r0, r1, #4
    7e34:	cmp	r2, r0
    7e38:	cmpne	r7, #0
    7e3c:	bgt	83ac <rb_sha512_crypt_r+0xaa8>
    7e40:	ldrb	r3, [fp, #-847]	; 0xfffffcb1
    7e44:	ldrb	r2, [fp, #-805]	; 0xfffffcdb
    7e48:	ldr	ip, [pc, #1896]	; 85b8 <rb_sha512_crypt_r+0xcb4>
    7e4c:	lsl	r3, r3, #8
    7e50:	orr	r3, r3, r2, lsl #16
    7e54:	ldrb	r2, [fp, #-826]	; 0xfffffcc6
    7e58:	add	ip, pc, ip
    7e5c:	orr	r3, r3, r2
    7e60:	mov	r2, r1
    7e64:	sub	r0, r2, #4
    7e68:	cmp	r1, r0
    7e6c:	cmpne	r7, #0
    7e70:	bgt	83c8 <rb_sha512_crypt_r+0xac4>
    7e74:	ldrb	r3, [fp, #-825]	; 0xfffffcc7
    7e78:	ldrb	r1, [fp, #-846]	; 0xfffffcb2
    7e7c:	ldr	ip, [pc, #1848]	; 85bc <rb_sha512_crypt_r+0xcb8>
    7e80:	lsl	r3, r3, #8
    7e84:	orr	r3, r3, r1, lsl #16
    7e88:	ldrb	r1, [fp, #-804]	; 0xfffffcdc
    7e8c:	add	ip, pc, ip
    7e90:	orr	r3, r3, r1
    7e94:	mov	r1, r2
    7e98:	sub	r0, r1, #4
    7e9c:	cmp	r2, r0
    7ea0:	cmpne	r7, #0
    7ea4:	bgt	83e4 <rb_sha512_crypt_r+0xae0>
    7ea8:	ldrb	r3, [fp, #-803]	; 0xfffffcdd
    7eac:	ldrb	r2, [fp, #-824]	; 0xfffffcc8
    7eb0:	ldr	ip, [pc, #1800]	; 85c0 <rb_sha512_crypt_r+0xcbc>
    7eb4:	lsl	r3, r3, #8
    7eb8:	orr	r3, r3, r2, lsl #16
    7ebc:	ldrb	r2, [fp, #-845]	; 0xfffffcb3
    7ec0:	add	ip, pc, ip
    7ec4:	orr	r3, r3, r2
    7ec8:	mov	r2, r1
    7ecc:	sub	r0, r2, #4
    7ed0:	cmp	r1, r0
    7ed4:	cmpne	r7, #0
    7ed8:	bgt	8400 <rb_sha512_crypt_r+0xafc>
    7edc:	ldrb	r3, [fp, #-844]	; 0xfffffcb4
    7ee0:	ldrb	r1, [fp, #-802]	; 0xfffffcde
    7ee4:	ldr	ip, [pc, #1752]	; 85c4 <rb_sha512_crypt_r+0xcc0>
    7ee8:	lsl	r3, r3, #8
    7eec:	orr	r3, r3, r1, lsl #16
    7ef0:	ldrb	r1, [fp, #-823]	; 0xfffffcc9
    7ef4:	add	ip, pc, ip
    7ef8:	orr	r3, r3, r1
    7efc:	mov	r1, r2
    7f00:	sub	r0, r1, #4
    7f04:	cmp	r2, r0
    7f08:	cmpne	r7, #0
    7f0c:	bgt	841c <rb_sha512_crypt_r+0xb18>
    7f10:	ldrb	r3, [fp, #-822]	; 0xfffffcca
    7f14:	ldrb	r2, [fp, #-843]	; 0xfffffcb5
    7f18:	ldr	ip, [pc, #1704]	; 85c8 <rb_sha512_crypt_r+0xcc4>
    7f1c:	lsl	r3, r3, #8
    7f20:	orr	r3, r3, r2, lsl #16
    7f24:	ldrb	r2, [fp, #-801]	; 0xfffffcdf
    7f28:	add	ip, pc, ip
    7f2c:	orr	r3, r3, r2
    7f30:	mov	r2, r1
    7f34:	sub	r0, r2, #4
    7f38:	cmp	r1, r0
    7f3c:	cmpne	r7, #0
    7f40:	bgt	8438 <rb_sha512_crypt_r+0xb34>
    7f44:	ldrb	r3, [fp, #-800]	; 0xfffffce0
    7f48:	ldrb	r1, [fp, #-821]	; 0xfffffccb
    7f4c:	ldr	ip, [pc, #1656]	; 85cc <rb_sha512_crypt_r+0xcc8>
    7f50:	lsl	r3, r3, #8
    7f54:	orr	r3, r3, r1, lsl #16
    7f58:	ldrb	r1, [fp, #-842]	; 0xfffffcb6
    7f5c:	add	ip, pc, ip
    7f60:	orr	r3, r3, r1
    7f64:	mov	r1, r2
    7f68:	sub	r0, r1, #4
    7f6c:	cmp	r2, r0
    7f70:	cmpne	r7, #0
    7f74:	bgt	8454 <rb_sha512_crypt_r+0xb50>
    7f78:	ldrb	r3, [fp, #-841]	; 0xfffffcb7
    7f7c:	ldrb	r2, [fp, #-799]	; 0xfffffce1
    7f80:	ldr	ip, [pc, #1608]	; 85d0 <rb_sha512_crypt_r+0xccc>
    7f84:	lsl	r3, r3, #8
    7f88:	orr	r3, r3, r2, lsl #16
    7f8c:	ldrb	r2, [fp, #-820]	; 0xfffffccc
    7f90:	add	ip, pc, ip
    7f94:	orr	r3, r3, r2
    7f98:	mov	r2, r1
    7f9c:	sub	r0, r2, #4
    7fa0:	cmp	r1, r0
    7fa4:	cmpne	r7, #0
    7fa8:	bgt	8470 <rb_sha512_crypt_r+0xb6c>
    7fac:	ldrb	r3, [fp, #-819]	; 0xfffffccd
    7fb0:	ldrb	r1, [fp, #-840]	; 0xfffffcb8
    7fb4:	ldr	ip, [pc, #1560]	; 85d4 <rb_sha512_crypt_r+0xcd0>
    7fb8:	lsl	r3, r3, #8
    7fbc:	orr	r3, r3, r1, lsl #16
    7fc0:	ldrb	r1, [fp, #-798]	; 0xfffffce2
    7fc4:	add	ip, pc, ip
    7fc8:	orr	r3, r3, r1
    7fcc:	mov	r1, r2
    7fd0:	sub	r0, r1, #4
    7fd4:	cmp	r2, r0
    7fd8:	cmpne	r7, #0
    7fdc:	bgt	848c <rb_sha512_crypt_r+0xb88>
    7fe0:	ldrb	r3, [fp, #-797]	; 0xfffffce3
    7fe4:	ldrb	r2, [fp, #-818]	; 0xfffffcce
    7fe8:	ldr	ip, [pc, #1512]	; 85d8 <rb_sha512_crypt_r+0xcd4>
    7fec:	lsl	r3, r3, #8
    7ff0:	orr	r3, r3, r2, lsl #16
    7ff4:	ldrb	r2, [fp, #-839]	; 0xfffffcb9
    7ff8:	add	ip, pc, ip
    7ffc:	orr	r3, r3, r2
    8000:	mov	r2, r1
    8004:	sub	r0, r2, #4
    8008:	cmp	r1, r0
    800c:	cmpne	r7, #0
    8010:	bgt	84a8 <rb_sha512_crypt_r+0xba4>
    8014:	ldrb	r3, [fp, #-838]	; 0xfffffcba
    8018:	ldrb	r1, [fp, #-796]	; 0xfffffce4
    801c:	ldr	ip, [pc, #1464]	; 85dc <rb_sha512_crypt_r+0xcd8>
    8020:	lsl	r3, r3, #8
    8024:	orr	r3, r3, r1, lsl #16
    8028:	ldrb	r1, [fp, #-817]	; 0xfffffccf
    802c:	add	ip, pc, ip
    8030:	orr	r3, r3, r1
    8034:	mov	r1, r2
    8038:	sub	r0, r1, #4
    803c:	cmp	r2, r0
    8040:	cmpne	r7, #0
    8044:	bgt	84c4 <rb_sha512_crypt_r+0xbc0>
    8048:	ldrb	r3, [fp, #-816]	; 0xfffffcd0
    804c:	ldrb	r2, [fp, #-837]	; 0xfffffcbb
    8050:	ldr	ip, [pc, #1416]	; 85e0 <rb_sha512_crypt_r+0xcdc>
    8054:	lsl	r3, r3, #8
    8058:	orr	r3, r3, r2, lsl #16
    805c:	ldrb	r2, [fp, #-795]	; 0xfffffce5
    8060:	add	ip, pc, ip
    8064:	orr	r3, r3, r2
    8068:	mov	r2, r1
    806c:	sub	r0, r2, #4
    8070:	cmp	r1, r0
    8074:	cmpne	r7, #0
    8078:	bgt	84e0 <rb_sha512_crypt_r+0xbdc>
    807c:	ldrb	r3, [fp, #-794]	; 0xfffffce6
    8080:	ldrb	r1, [fp, #-815]	; 0xfffffcd1
    8084:	ldr	ip, [pc, #1368]	; 85e4 <rb_sha512_crypt_r+0xce0>
    8088:	lsl	r3, r3, #8
    808c:	orr	r3, r3, r1, lsl #16
    8090:	ldrb	r1, [fp, #-836]	; 0xfffffcbc
    8094:	add	ip, pc, ip
    8098:	orr	r3, r3, r1
    809c:	mov	r1, r2
    80a0:	sub	r0, r1, #4
    80a4:	cmp	r2, r0
    80a8:	cmpne	r7, #0
    80ac:	bgt	84fc <rb_sha512_crypt_r+0xbf8>
    80b0:	ldrb	r3, [fp, #-835]	; 0xfffffcbd
    80b4:	ldrb	r2, [fp, #-793]	; 0xfffffce7
    80b8:	ldr	ip, [pc, #1320]	; 85e8 <rb_sha512_crypt_r+0xce4>
    80bc:	lsl	r3, r3, #8
    80c0:	orr	r3, r3, r2, lsl #16
    80c4:	ldrb	r2, [fp, #-814]	; 0xfffffcd2
    80c8:	add	ip, pc, ip
    80cc:	orr	r3, r3, r2
    80d0:	mov	r2, r1
    80d4:	sub	r0, r2, #4
    80d8:	cmp	r1, r0
    80dc:	cmpne	r7, #0
    80e0:	bgt	8518 <rb_sha512_crypt_r+0xc14>
    80e4:	ldrb	r3, [fp, #-813]	; 0xfffffcd3
    80e8:	ldrb	r1, [fp, #-834]	; 0xfffffcbe
    80ec:	ldr	ip, [pc, #1272]	; 85ec <rb_sha512_crypt_r+0xce8>
    80f0:	lsl	r3, r3, #8
    80f4:	orr	r3, r3, r1, lsl #16
    80f8:	ldrb	r1, [fp, #-792]	; 0xfffffce8
    80fc:	add	ip, pc, ip
    8100:	orr	r3, r3, r1
    8104:	mov	r1, r2
    8108:	sub	r0, r1, #4
    810c:	cmp	r2, r0
    8110:	cmpne	r7, #0
    8114:	bgt	8534 <rb_sha512_crypt_r+0xc30>
    8118:	ldrb	r3, [fp, #-791]	; 0xfffffce9
    811c:	ldrb	r2, [fp, #-812]	; 0xfffffcd4
    8120:	ldr	ip, [pc, #1224]	; 85f0 <rb_sha512_crypt_r+0xcec>
    8124:	lsl	r3, r3, #8
    8128:	orr	r3, r3, r2, lsl #16
    812c:	ldrb	r2, [fp, #-833]	; 0xfffffcbf
    8130:	add	ip, pc, ip
    8134:	orr	r3, r3, r2
    8138:	mov	r2, r1
    813c:	sub	r0, r2, #4
    8140:	cmp	r1, r0
    8144:	cmpne	r7, #0
    8148:	bgt	8550 <rb_sha512_crypt_r+0xc4c>
    814c:	ldrb	r3, [fp, #-832]	; 0xfffffcc0
    8150:	ldrb	r1, [fp, #-790]	; 0xfffffcea
    8154:	ldr	ip, [pc, #1176]	; 85f4 <rb_sha512_crypt_r+0xcf0>
    8158:	lsl	r3, r3, #8
    815c:	orr	r3, r3, r1, lsl #16
    8160:	ldrb	r1, [fp, #-811]	; 0xfffffcd5
    8164:	add	ip, pc, ip
    8168:	orr	r3, r3, r1
    816c:	mov	r1, r2
    8170:	sub	r0, r1, #4
    8174:	cmp	r2, r0
    8178:	cmpne	r7, #0
    817c:	movgt	r0, #1
    8180:	movle	r0, #0
    8184:	bgt	856c <rb_sha512_crypt_r+0xc68>
    8188:	cmp	r7, #0
    818c:	ldrb	r2, [fp, #-789]	; 0xfffffceb
    8190:	ble	81d0 <rb_sha512_crypt_r+0x8cc>
    8194:	ldr	r3, [pc, #1116]	; 85f8 <rb_sha512_crypt_r+0xcf4>
    8198:	and	ip, r2, #63	; 0x3f
    819c:	add	r3, pc, r3
    81a0:	add	ip, r3, ip
    81a4:	cmp	r7, #1
    81a8:	ldrb	ip, [ip, #848]	; 0x350
    81ac:	lsr	r2, r2, #6
    81b0:	strb	ip, [r1]
    81b4:	beq	81d0 <rb_sha512_crypt_r+0x8cc>
    81b8:	add	r3, r3, r2
    81bc:	cmp	r7, #2
    81c0:	ldrb	r3, [r3, #848]	; 0x350
    81c4:	strbne	r0, [r1, #2]
    81c8:	strb	r3, [r1, #1]
    81cc:	bne	81e4 <rb_sha512_crypt_r+0x8e0>
    81d0:	bl	4d14 <__errno_location@plt>
    81d4:	mov	r3, #34	; 0x22
    81d8:	str	r3, [r0]
    81dc:	mov	r3, #0
    81e0:	str	r3, [fp, #-856]	; 0xfffffca8
    81e4:	sub	r4, fp, #724	; 0x2d4
    81e8:	mov	r0, r4
    81ec:	bl	5e1c <rb_sha512_init_ctx>
    81f0:	sub	r1, fp, #852	; 0x354
    81f4:	mov	r0, r4
    81f8:	bl	6dd8 <rb_sha512_finish_ctx>
    81fc:	mov	r2, #64	; 0x40
    8200:	mov	r1, #0
    8204:	sub	r0, fp, #788	; 0x314
    8208:	bl	4648 <memset@plt>
    820c:	mov	r2, r6
    8210:	mov	r1, #0
    8214:	mov	r0, sl
    8218:	bl	4648 <memset@plt>
    821c:	mov	r2, r9
    8220:	mov	r1, #0
    8224:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8228:	bl	4648 <memset@plt>
    822c:	mov	r2, #344	; 0x158
    8230:	mov	r1, #0
    8234:	mov	r0, r4
    8238:	bl	4648 <memset@plt>
    823c:	mov	r2, #344	; 0x158
    8240:	mov	r1, #0
    8244:	sub	r0, fp, #380	; 0x17c
    8248:	bl	4648 <memset@plt>
    824c:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    8250:	cmp	r3, #0
    8254:	beq	8268 <rb_sha512_crypt_r+0x964>
    8258:	mov	r2, r6
    825c:	mov	r1, #0
    8260:	mov	r0, r3
    8264:	bl	4648 <memset@plt>
    8268:	ldr	r3, [fp, #-872]	; 0xfffffc98
    826c:	cmp	r3, #0
    8270:	beq	8284 <rb_sha512_crypt_r+0x980>
    8274:	mov	r2, r9
    8278:	mov	r1, #0
    827c:	mov	r0, r3
    8280:	bl	4648 <memset@plt>
    8284:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8288:	sub	sp, fp, #32
    828c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8290:	ldr	r3, [pc, #868]	; 85fc <rb_sha512_crypt_r+0xcf8>
    8294:	str	r3, [fp, #-864]	; 0xfffffca0
    8298:	b	79b4 <rb_sha512_crypt_r+0xb0>
    829c:	mov	r1, r3
    82a0:	mov	r0, sl
    82a4:	str	r3, [fp, #-884]	; 0xfffffc8c
    82a8:	sub	r5, r5, #64	; 0x40
    82ac:	bl	6c5c <rb_sha512_process_bytes>
    82b0:	ldr	r3, [fp, #-884]	; 0xfffffc8c
    82b4:	b	7ac0 <rb_sha512_crypt_r+0x1bc>
    82b8:	tst	r5, #1
    82bc:	mov	r2, r6
    82c0:	movne	r1, #64	; 0x40
    82c4:	movne	r0, sl
    82c8:	moveq	r1, r8
    82cc:	moveq	r0, r7
    82d0:	bl	6c5c <rb_sha512_process_bytes>
    82d4:	lsr	r5, r5, #1
    82d8:	b	7adc <rb_sha512_crypt_r+0x1d8>
    82dc:	mov	r2, sl
    82e0:	mov	r1, r8
    82e4:	mov	r0, r7
    82e8:	bl	6c5c <rb_sha512_process_bytes>
    82ec:	add	r6, r6, #1
    82f0:	b	7b00 <rb_sha512_crypt_r+0x1fc>
    82f4:	sub	lr, fp, #788	; 0x314
    82f8:	add	ip, sl, r7
    82fc:	ldm	lr!, {r0, r1, r2, r3}
    8300:	add	r7, r7, #64	; 0x40
    8304:	stmia	ip!, {r0, r1, r2, r3}
    8308:	ldm	lr!, {r0, r1, r2, r3}
    830c:	stmia	ip!, {r0, r1, r2, r3}
    8310:	ldm	lr!, {r0, r1, r2, r3}
    8314:	stmia	ip!, {r0, r1, r2, r3}
    8318:	ldm	lr, {r0, r1, r2, r3}
    831c:	stm	ip, {r0, r1, r2, r3}
    8320:	b	7b28 <rb_sha512_crypt_r+0x224>
    8324:	mov	r2, r8
    8328:	mov	r1, r9
    832c:	mov	r0, r4
    8330:	bl	6c5c <rb_sha512_process_bytes>
    8334:	add	r7, r7, #1
    8338:	b	7b58 <rb_sha512_crypt_r+0x254>
    833c:	and	r2, r3, #63	; 0x3f
    8340:	add	r2, ip, r2
    8344:	sub	r7, r7, #1
    8348:	ldrb	r2, [r2, #848]	; 0x350
    834c:	lsr	r3, r3, #6
    8350:	strb	r2, [r1], #1
    8354:	b	7d60 <rb_sha512_crypt_r+0x45c>
    8358:	and	r0, r3, #63	; 0x3f
    835c:	add	r0, ip, r0
    8360:	sub	r7, r7, #1
    8364:	ldrb	r0, [r0, #848]	; 0x350
    8368:	lsr	r3, r3, #6
    836c:	strb	r0, [r2], #1
    8370:	b	7d94 <rb_sha512_crypt_r+0x490>
    8374:	and	r0, r3, #63	; 0x3f
    8378:	add	r0, ip, r0
    837c:	sub	r7, r7, #1
    8380:	ldrb	r0, [r0, #848]	; 0x350
    8384:	lsr	r3, r3, #6
    8388:	strb	r0, [r1], #1
    838c:	b	7dc8 <rb_sha512_crypt_r+0x4c4>
    8390:	and	r0, r3, #63	; 0x3f
    8394:	add	r0, ip, r0
    8398:	sub	r7, r7, #1
    839c:	ldrb	r0, [r0, #848]	; 0x350
    83a0:	lsr	r3, r3, #6
    83a4:	strb	r0, [r2], #1
    83a8:	b	7dfc <rb_sha512_crypt_r+0x4f8>
    83ac:	and	r0, r3, #63	; 0x3f
    83b0:	add	r0, ip, r0
    83b4:	sub	r7, r7, #1
    83b8:	ldrb	r0, [r0, #848]	; 0x350
    83bc:	lsr	r3, r3, #6
    83c0:	strb	r0, [r1], #1
    83c4:	b	7e30 <rb_sha512_crypt_r+0x52c>
    83c8:	and	r0, r3, #63	; 0x3f
    83cc:	add	r0, ip, r0
    83d0:	sub	r7, r7, #1
    83d4:	ldrb	r0, [r0, #848]	; 0x350
    83d8:	lsr	r3, r3, #6
    83dc:	strb	r0, [r2], #1
    83e0:	b	7e64 <rb_sha512_crypt_r+0x560>
    83e4:	and	r0, r3, #63	; 0x3f
    83e8:	add	r0, ip, r0
    83ec:	sub	r7, r7, #1
    83f0:	ldrb	r0, [r0, #848]	; 0x350
    83f4:	lsr	r3, r3, #6
    83f8:	strb	r0, [r1], #1
    83fc:	b	7e98 <rb_sha512_crypt_r+0x594>
    8400:	and	r0, r3, #63	; 0x3f
    8404:	add	r0, ip, r0
    8408:	sub	r7, r7, #1
    840c:	ldrb	r0, [r0, #848]	; 0x350
    8410:	lsr	r3, r3, #6
    8414:	strb	r0, [r2], #1
    8418:	b	7ecc <rb_sha512_crypt_r+0x5c8>
    841c:	and	r0, r3, #63	; 0x3f
    8420:	add	r0, ip, r0
    8424:	sub	r7, r7, #1
    8428:	ldrb	r0, [r0, #848]	; 0x350
    842c:	lsr	r3, r3, #6
    8430:	strb	r0, [r1], #1
    8434:	b	7f00 <rb_sha512_crypt_r+0x5fc>
    8438:	and	r0, r3, #63	; 0x3f
    843c:	add	r0, ip, r0
    8440:	sub	r7, r7, #1
    8444:	ldrb	r0, [r0, #848]	; 0x350
    8448:	lsr	r3, r3, #6
    844c:	strb	r0, [r2], #1
    8450:	b	7f34 <rb_sha512_crypt_r+0x630>
    8454:	and	r0, r3, #63	; 0x3f
    8458:	add	r0, ip, r0
    845c:	sub	r7, r7, #1
    8460:	ldrb	r0, [r0, #848]	; 0x350
    8464:	lsr	r3, r3, #6
    8468:	strb	r0, [r1], #1
    846c:	b	7f68 <rb_sha512_crypt_r+0x664>
    8470:	and	r0, r3, #63	; 0x3f
    8474:	add	r0, ip, r0
    8478:	sub	r7, r7, #1
    847c:	ldrb	r0, [r0, #848]	; 0x350
    8480:	lsr	r3, r3, #6
    8484:	strb	r0, [r2], #1
    8488:	b	7f9c <rb_sha512_crypt_r+0x698>
    848c:	and	r0, r3, #63	; 0x3f
    8490:	add	r0, ip, r0
    8494:	sub	r7, r7, #1
    8498:	ldrb	r0, [r0, #848]	; 0x350
    849c:	lsr	r3, r3, #6
    84a0:	strb	r0, [r1], #1
    84a4:	b	7fd0 <rb_sha512_crypt_r+0x6cc>
    84a8:	and	r0, r3, #63	; 0x3f
    84ac:	add	r0, ip, r0
    84b0:	sub	r7, r7, #1
    84b4:	ldrb	r0, [r0, #848]	; 0x350
    84b8:	lsr	r3, r3, #6
    84bc:	strb	r0, [r2], #1
    84c0:	b	8004 <rb_sha512_crypt_r+0x700>
    84c4:	and	r0, r3, #63	; 0x3f
    84c8:	add	r0, ip, r0
    84cc:	sub	r7, r7, #1
    84d0:	ldrb	r0, [r0, #848]	; 0x350
    84d4:	lsr	r3, r3, #6
    84d8:	strb	r0, [r1], #1
    84dc:	b	8038 <rb_sha512_crypt_r+0x734>
    84e0:	and	r0, r3, #63	; 0x3f
    84e4:	add	r0, ip, r0
    84e8:	sub	r7, r7, #1
    84ec:	ldrb	r0, [r0, #848]	; 0x350
    84f0:	lsr	r3, r3, #6
    84f4:	strb	r0, [r2], #1
    84f8:	b	806c <rb_sha512_crypt_r+0x768>
    84fc:	and	r0, r3, #63	; 0x3f
    8500:	add	r0, ip, r0
    8504:	sub	r7, r7, #1
    8508:	ldrb	r0, [r0, #848]	; 0x350
    850c:	lsr	r3, r3, #6
    8510:	strb	r0, [r1], #1
    8514:	b	80a0 <rb_sha512_crypt_r+0x79c>
    8518:	and	r0, r3, #63	; 0x3f
    851c:	add	r0, ip, r0
    8520:	sub	r7, r7, #1
    8524:	ldrb	r0, [r0, #848]	; 0x350
    8528:	lsr	r3, r3, #6
    852c:	strb	r0, [r2], #1
    8530:	b	80d4 <rb_sha512_crypt_r+0x7d0>
    8534:	and	r0, r3, #63	; 0x3f
    8538:	add	r0, ip, r0
    853c:	sub	r7, r7, #1
    8540:	ldrb	r0, [r0, #848]	; 0x350
    8544:	lsr	r3, r3, #6
    8548:	strb	r0, [r1], #1
    854c:	b	8108 <rb_sha512_crypt_r+0x804>
    8550:	and	r0, r3, #63	; 0x3f
    8554:	add	r0, ip, r0
    8558:	sub	r7, r7, #1
    855c:	ldrb	r0, [r0, #848]	; 0x350
    8560:	lsr	r3, r3, #6
    8564:	strb	r0, [r2], #1
    8568:	b	813c <rb_sha512_crypt_r+0x838>
    856c:	and	r0, r3, #63	; 0x3f
    8570:	add	r0, ip, r0
    8574:	sub	r7, r7, #1
    8578:	ldrb	r0, [r0, #848]	; 0x350
    857c:	lsr	r3, r3, #6
    8580:	strb	r0, [r1], #1
    8584:	b	8170 <rb_sha512_crypt_r+0x86c>
    8588:	.word	0x0000bd8c
    858c:	.word	0x0000bd60
    8590:	.word	0x3b9ac9ff
    8594:	.word	0x0000c4ed
    8598:	.word	0x0000ba30
    859c:	.word	0x0000b9e8
    85a0:	.word	0x0000c1d0
    85a4:	.word	0x0000b97c
    85a8:	.word	0x0000b918
    85ac:	.word	0x0000b8e4
    85b0:	.word	0x0000b8b0
    85b4:	.word	0x0000b87c
    85b8:	.word	0x0000b848
    85bc:	.word	0x0000b814
    85c0:	.word	0x0000b7e0
    85c4:	.word	0x0000b7ac
    85c8:	.word	0x0000b778
    85cc:	.word	0x0000b744
    85d0:	.word	0x0000b710
    85d4:	.word	0x0000b6dc
    85d8:	.word	0x0000b6a8
    85dc:	.word	0x0000b674
    85e0:	.word	0x0000b640
    85e4:	.word	0x0000b60c
    85e8:	.word	0x0000b5d8
    85ec:	.word	0x0000b5a4
    85f0:	.word	0x0000b570
    85f4:	.word	0x0000b53c
    85f8:	.word	0x0000b504
    85fc:	.word	0x00001388

00008600 <rb_ascii_to_bin>:
    8600:	cmp	r0, #122	; 0x7a
    8604:	bhi	8644 <rb_ascii_to_bin+0x44>
    8608:	cmp	r0, #96	; 0x60
    860c:	bls	8618 <rb_ascii_to_bin+0x18>
    8610:	sub	r0, r0, #59	; 0x3b
    8614:	bx	lr
    8618:	cmp	r0, #90	; 0x5a
    861c:	bhi	8644 <rb_ascii_to_bin+0x44>
    8620:	cmp	r0, #64	; 0x40
    8624:	bls	8630 <rb_ascii_to_bin+0x30>
    8628:	sub	r0, r0, #53	; 0x35
    862c:	bx	lr
    8630:	sub	r0, r0, #46	; 0x2e
    8634:	uxtb	r3, r0
    8638:	cmp	r3, #11
    863c:	movhi	r0, #0
    8640:	bx	lr
    8644:	mov	r0, #0
    8648:	bx	lr

0000864c <rb_crypt>:
    864c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8650:	mov	r4, r0
    8654:	ldrb	r3, [r1]
    8658:	sub	sp, sp, #236	; 0xec
    865c:	mov	r5, r1
    8660:	cmp	r3, #36	; 0x24
    8664:	bne	8b7c <rb_crypt+0x530>
    8668:	ldrb	r3, [r1, #2]
    866c:	cmp	r3, #36	; 0x24
    8670:	beq	8680 <rb_crypt+0x34>
    8674:	ldrb	r3, [r1, #3]
    8678:	cmp	r3, #36	; 0x24
    867c:	bne	8b7c <rb_crypt+0x530>
    8680:	ldrb	r3, [r5, #1]
    8684:	cmp	r3, #53	; 0x35
    8688:	beq	8ae8 <rb_crypt+0x49c>
    868c:	cmp	r3, #54	; 0x36
    8690:	beq	8b20 <rb_crypt+0x4d4>
    8694:	cmp	r3, #49	; 0x31
    8698:	bne	8b04 <rb_crypt+0x4b8>
    869c:	ldr	r6, [pc, #3364]	; 93c8 <rb_crypt+0xd7c>
    86a0:	ldr	r1, [pc, #3364]	; 93cc <rb_crypt+0xd80>
    86a4:	add	r6, pc, r6
    86a8:	add	r1, pc, r1
    86ac:	mov	r0, r5
    86b0:	mov	r2, #3
    86b4:	str	r5, [r6, #-3068]	; 0xfffff404
    86b8:	bl	4c3c <strncmp@plt>
    86bc:	ldr	r3, [pc, #3340]	; 93d0 <rb_crypt+0xd84>
    86c0:	mov	r1, #0
    86c4:	add	r3, pc, r3
    86c8:	cmp	r0, #0
    86cc:	addeq	r5, r5, #3
    86d0:	streq	r5, [r6, #-3068]	; 0xfffff404
    86d4:	ldr	r6, [r3, #-3068]	; 0xfffff404
    86d8:	str	r6, [r3, #-3064]	; 0xfffff408
    86dc:	add	r0, r6, #8
    86e0:	mov	r3, r6
    86e4:	ldrb	r2, [r3]
    86e8:	cmp	r2, #0
    86ec:	cmpne	r2, #36	; 0x24
    86f0:	movne	r2, #1
    86f4:	moveq	r2, #0
    86f8:	bne	8a8c <rb_crypt+0x440>
    86fc:	cmp	r1, #0
    8700:	beq	8710 <rb_crypt+0xc4>
    8704:	ldr	r2, [pc, #3272]	; 93d4 <rb_crypt+0xd88>
    8708:	add	r2, pc, r2
    870c:	str	r3, [r2, #-3064]	; 0xfffff408
    8710:	sub	r3, r3, r6
    8714:	ldr	fp, [pc, #3260]	; 93d8 <rb_crypt+0xd8c>
    8718:	ldr	sl, [pc, #3260]	; 93dc <rb_crypt+0xd90>
    871c:	ldr	r9, [pc, #3260]	; 93e0 <rb_crypt+0xd94>
    8720:	str	r3, [sp]
    8724:	ldr	r3, [pc, #3256]	; 93e4 <rb_crypt+0xd98>
    8728:	mov	r5, #0
    872c:	mov	r0, r4
    8730:	str	r3, [sp, #56]	; 0x38
    8734:	str	r3, [sp, #4]
    8738:	str	r5, [sp, #76]	; 0x4c
    873c:	str	r5, [sp, #72]	; 0x48
    8740:	str	fp, [sp, #60]	; 0x3c
    8744:	str	sl, [sp, #64]	; 0x40
    8748:	str	r9, [sp, #68]	; 0x44
    874c:	bl	4804 <strlen@plt>
    8750:	add	r7, sp, #56	; 0x38
    8754:	mov	r1, r4
    8758:	mov	r2, r0
    875c:	mov	r0, r7
    8760:	bl	68e0 <MD5Update>
    8764:	ldr	r1, [pc, #3196]	; 93e8 <rb_crypt+0xd9c>
    8768:	mov	r2, #3
    876c:	add	r1, pc, r1
    8770:	mov	r0, r7
    8774:	bl	68e0 <MD5Update>
    8778:	mov	r1, r6
    877c:	ldr	r2, [sp]
    8780:	mov	r0, r7
    8784:	bl	68e0 <MD5Update>
    8788:	ldr	r3, [sp, #4]
    878c:	mov	r0, r4
    8790:	str	r3, [sp, #144]	; 0x90
    8794:	str	r5, [sp, #164]	; 0xa4
    8798:	str	r5, [sp, #160]	; 0xa0
    879c:	str	fp, [sp, #148]	; 0x94
    87a0:	str	sl, [sp, #152]	; 0x98
    87a4:	str	r9, [sp, #156]	; 0x9c
    87a8:	bl	4804 <strlen@plt>
    87ac:	add	r5, sp, #144	; 0x90
    87b0:	mov	r1, r4
    87b4:	mov	r2, r0
    87b8:	mov	r0, r5
    87bc:	bl	68e0 <MD5Update>
    87c0:	mov	r1, r6
    87c4:	ldr	r2, [sp]
    87c8:	mov	r0, r5
    87cc:	bl	68e0 <MD5Update>
    87d0:	mov	r0, r4
    87d4:	bl	4804 <strlen@plt>
    87d8:	add	r6, sp, #40	; 0x28
    87dc:	mov	r1, r4
    87e0:	mov	r2, r0
    87e4:	mov	r0, r5
    87e8:	bl	68e0 <MD5Update>
    87ec:	mov	r1, r5
    87f0:	mov	r0, r6
    87f4:	bl	698c <MD5Final>
    87f8:	mov	r0, r4
    87fc:	bl	4804 <strlen@plt>
    8800:	str	fp, [sp, #8]
    8804:	str	sl, [sp, #12]
    8808:	str	r9, [sp, #16]
    880c:	mov	r8, r0
    8810:	cmp	r8, #0
    8814:	bgt	8aa8 <rb_crypt+0x45c>
    8818:	mov	r2, #16
    881c:	mov	r1, #0
    8820:	mov	r0, r6
    8824:	bl	4648 <memset@plt>
    8828:	mov	r0, r4
    882c:	bl	4804 <strlen@plt>
    8830:	mov	r9, #1
    8834:	mov	r8, r0
    8838:	cmp	r8, #0
    883c:	bne	8ac8 <rb_crypt+0x47c>
    8840:	ldr	sl, [pc, #2980]	; 93ec <rb_crypt+0xda0>
    8844:	ldr	r1, [pc, #2980]	; 93f0 <rb_crypt+0xda4>
    8848:	add	sl, pc, sl
    884c:	sub	r9, sl, #3200	; 0xc80
    8850:	sub	r9, r9, #12
    8854:	mov	r2, #120	; 0x78
    8858:	add	r1, pc, r1
    885c:	mov	r0, r9
    8860:	bl	46c0 <rb_strlcpy@plt>
    8864:	ldr	r2, [sp]
    8868:	ldr	r1, [sl, #-3068]	; 0xfffff404
    886c:	mov	r0, r9
    8870:	bl	48dc <strncat@plt>
    8874:	ldr	r1, [pc, #2936]	; 93f4 <rb_crypt+0xda8>
    8878:	mov	r2, #120	; 0x78
    887c:	add	r1, pc, r1
    8880:	mov	r0, r9
    8884:	bl	4bb8 <rb_strlcat@plt>
    8888:	mov	r1, r7
    888c:	mov	r0, r6
    8890:	bl	698c <MD5Final>
    8894:	ldr	r9, [pc, #2908]	; 93f8 <rb_crypt+0xdac>
    8898:	mov	fp, r8
    889c:	mov	r7, #16
    88a0:	add	r9, pc, r9
    88a4:	ldr	r3, [sp, #4]
    88a8:	ands	sl, r8, #1
    88ac:	str	r3, [sp, #144]	; 0x90
    88b0:	ldr	r3, [sp, #8]
    88b4:	str	fp, [sp, #164]	; 0xa4
    88b8:	str	r3, [sp, #148]	; 0x94
    88bc:	ldr	r3, [sp, #12]
    88c0:	str	fp, [sp, #160]	; 0xa0
    88c4:	str	r3, [sp, #152]	; 0x98
    88c8:	ldr	r3, [sp, #16]
    88cc:	moveq	r2, r7
    88d0:	str	r3, [sp, #156]	; 0x9c
    88d4:	moveq	r1, r6
    88d8:	beq	88ec <rb_crypt+0x2a0>
    88dc:	mov	r0, r4
    88e0:	bl	4804 <strlen@plt>
    88e4:	mov	r1, r4
    88e8:	mov	r2, r0
    88ec:	mov	r0, r5
    88f0:	bl	68e0 <MD5Update>
    88f4:	mov	r1, #3
    88f8:	mov	r0, r8
    88fc:	bl	133fc <__aeabi_uidivmod>
    8900:	cmp	r1, #0
    8904:	beq	8918 <rb_crypt+0x2cc>
    8908:	ldr	r2, [sp]
    890c:	ldr	r1, [r9, #-3068]	; 0xfffff404
    8910:	mov	r0, r5
    8914:	bl	68e0 <MD5Update>
    8918:	mov	r1, #7
    891c:	mov	r0, r8
    8920:	bl	133fc <__aeabi_uidivmod>
    8924:	cmp	r1, #0
    8928:	beq	8944 <rb_crypt+0x2f8>
    892c:	mov	r0, r4
    8930:	bl	4804 <strlen@plt>
    8934:	mov	r1, r4
    8938:	mov	r2, r0
    893c:	mov	r0, r5
    8940:	bl	68e0 <MD5Update>
    8944:	cmp	sl, #0
    8948:	movne	r2, r7
    894c:	movne	r1, r6
    8950:	bne	8964 <rb_crypt+0x318>
    8954:	mov	r0, r4
    8958:	bl	4804 <strlen@plt>
    895c:	mov	r1, r4
    8960:	mov	r2, r0
    8964:	mov	r0, r5
    8968:	bl	68e0 <MD5Update>
    896c:	add	r8, r8, #1
    8970:	mov	r1, r5
    8974:	mov	r0, r6
    8978:	bl	698c <MD5Final>
    897c:	cmp	r8, #1000	; 0x3e8
    8980:	bne	88a4 <rb_crypt+0x258>
    8984:	ldr	r6, [pc, #2672]	; 93fc <rb_crypt+0xdb0>
    8988:	add	r6, pc, r6
    898c:	sub	r4, r6, #3200	; 0xc80
    8990:	sub	r4, r4, #12
    8994:	mov	r0, r4
    8998:	bl	4804 <strlen@plt>
    899c:	ldrb	r3, [sp, #46]	; 0x2e
    89a0:	ldrb	r1, [sp, #40]	; 0x28
    89a4:	mov	r2, #4
    89a8:	lsl	r3, r3, #8
    89ac:	orr	r3, r3, r1, lsl #16
    89b0:	ldrb	r1, [sp, #52]	; 0x34
    89b4:	orr	r1, r3, r1
    89b8:	add	r5, r4, r0
    89bc:	mov	r0, r5
    89c0:	bl	5634 <_crypt_to64>
    89c4:	ldrb	r3, [sp, #47]	; 0x2f
    89c8:	ldrb	r1, [sp, #41]	; 0x29
    89cc:	mov	r2, #4
    89d0:	add	r0, r5, r2
    89d4:	lsl	r3, r3, #8
    89d8:	orr	r3, r3, r1, lsl #16
    89dc:	ldrb	r1, [sp, #53]	; 0x35
    89e0:	orr	r1, r3, r1
    89e4:	bl	5634 <_crypt_to64>
    89e8:	ldrb	r3, [sp, #48]	; 0x30
    89ec:	ldrb	r1, [sp, #42]	; 0x2a
    89f0:	mov	r2, #4
    89f4:	add	r0, r5, #8
    89f8:	lsl	r3, r3, #8
    89fc:	orr	r3, r3, r1, lsl #16
    8a00:	ldrb	r1, [sp, #54]	; 0x36
    8a04:	orr	r1, r3, r1
    8a08:	bl	5634 <_crypt_to64>
    8a0c:	ldrb	r3, [sp, #49]	; 0x31
    8a10:	ldrb	r1, [sp, #43]	; 0x2b
    8a14:	mov	r2, #4
    8a18:	add	r0, r5, #12
    8a1c:	lsl	r3, r3, #8
    8a20:	orr	r3, r3, r1, lsl #16
    8a24:	ldrb	r1, [sp, #55]	; 0x37
    8a28:	orr	r1, r3, r1
    8a2c:	bl	5634 <_crypt_to64>
    8a30:	ldrb	r3, [sp, #50]	; 0x32
    8a34:	ldrb	r1, [sp, #44]	; 0x2c
    8a38:	mov	r2, #4
    8a3c:	add	r0, r5, #16
    8a40:	lsl	r3, r3, #8
    8a44:	orr	r3, r3, r1, lsl #16
    8a48:	ldrb	r1, [sp, #45]	; 0x2d
    8a4c:	orr	r1, r3, r1
    8a50:	bl	5634 <_crypt_to64>
    8a54:	add	r0, r5, #20
    8a58:	mov	r2, #2
    8a5c:	ldrb	r1, [sp, #51]	; 0x33
    8a60:	bl	5634 <_crypt_to64>
    8a64:	add	r3, r5, #22
    8a68:	mov	r0, r4
    8a6c:	str	r3, [r6, #-3060]	; 0xfffff40c
    8a70:	mov	r3, #0
    8a74:	strb	r3, [r5, #22]
    8a78:	add	sp, sp, #236	; 0xec
    8a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a80:	add	r3, r3, #1
    8a84:	mov	r1, r2
    8a88:	b	86e4 <rb_crypt+0x98>
    8a8c:	cmp	r3, r0
    8a90:	bcc	8a80 <rb_crypt+0x434>
    8a94:	cmp	r1, #0
    8a98:	beq	8710 <rb_crypt+0xc4>
    8a9c:	ldr	r2, [pc, #2396]	; 9400 <rb_crypt+0xdb4>
    8aa0:	add	r2, pc, r2
    8aa4:	b	870c <rb_crypt+0xc0>
    8aa8:	cmp	r8, #16
    8aac:	movlt	r2, r8
    8ab0:	movge	r2, #16
    8ab4:	mov	r1, r6
    8ab8:	mov	r0, r7
    8abc:	bl	68e0 <MD5Update>
    8ac0:	sub	r8, r8, #16
    8ac4:	b	8810 <rb_crypt+0x1c4>
    8ac8:	tst	r8, #1
    8acc:	mov	r2, r9
    8ad0:	movne	r1, r6
    8ad4:	moveq	r1, r4
    8ad8:	mov	r0, r7
    8adc:	bl	68e0 <MD5Update>
    8ae0:	lsr	r8, r8, #1
    8ae4:	b	8838 <rb_crypt+0x1ec>
    8ae8:	mov	r0, r5
    8aec:	bl	4804 <strlen@plt>
    8af0:	add	r6, r0, #66	; 0x42
    8af4:	mov	r0, r6
    8af8:	bl	49d8 <malloc@plt>
    8afc:	subs	r2, r0, #0
    8b00:	bne	8b0c <rb_crypt+0x4c0>
    8b04:	mov	r0, #0
    8b08:	b	8a78 <rb_crypt+0x42c>
    8b0c:	mov	r3, r6
    8b10:	mov	r1, r5
    8b14:	mov	r0, r4
    8b18:	bl	6fac <rb_sha256_crypt_r>
    8b1c:	b	8a78 <rb_crypt+0x42c>
    8b20:	mov	r0, r5
    8b24:	bl	4804 <strlen@plt>
    8b28:	ldr	r6, [pc, #2260]	; 9404 <rb_crypt+0xdb8>
    8b2c:	add	r6, pc, r6
    8b30:	ldr	r3, [r6, #-3056]	; 0xfffff410
    8b34:	add	r7, r0, #109	; 0x6d
    8b38:	cmp	r7, r3
    8b3c:	ble	8b5c <rb_crypt+0x510>
    8b40:	mov	r1, r7
    8b44:	ldr	r0, [r6, #-3052]	; 0xfffff414
    8b48:	bl	4c6c <realloc@plt>
    8b4c:	cmp	r0, #0
    8b50:	beq	8b04 <rb_crypt+0x4b8>
    8b54:	str	r0, [r6, #-3052]	; 0xfffff414
    8b58:	str	r7, [r6, #-3056]	; 0xfffff410
    8b5c:	ldr	r2, [pc, #2212]	; 9408 <rb_crypt+0xdbc>
    8b60:	mov	r1, r5
    8b64:	add	r2, pc, r2
    8b68:	mov	r0, r4
    8b6c:	ldr	r3, [r2, #-3056]	; 0xfffff410
    8b70:	ldr	r2, [r2, #-3052]	; 0xfffff414
    8b74:	bl	7904 <rb_sha512_crypt_r>
    8b78:	b	8a78 <rb_crypt+0x42c>
    8b7c:	bl	5030 <rb_des_init>
    8b80:	add	r2, sp, #144	; 0x90
    8b84:	mov	r1, r2
    8b88:	sub	r3, r2, r1
    8b8c:	cmp	r3, #8
    8b90:	bne	8efc <rb_crypt+0x8b0>
    8b94:	bl	5030 <rb_des_init>
    8b98:	ldr	r2, [sp, #144]	; 0x90
    8b9c:	ldr	r3, [sp, #148]	; 0x94
    8ba0:	rev	r2, r2
    8ba4:	rev	r3, r3
    8ba8:	orrs	r1, r2, r3
    8bac:	beq	8f18 <rb_crypt+0x8cc>
    8bb0:	ldr	r1, [pc, #2132]	; 940c <rb_crypt+0xdc0>
    8bb4:	add	r1, pc, r1
    8bb8:	ldr	r0, [r1, #8]
    8bbc:	cmp	r2, r0
    8bc0:	bne	8f18 <rb_crypt+0x8cc>
    8bc4:	ldr	r1, [r1, #4]
    8bc8:	cmp	r3, r1
    8bcc:	bne	8f18 <rb_crypt+0x8cc>
    8bd0:	ldrb	r1, [r5, #1]
    8bd4:	mov	r0, r1
    8bd8:	bl	8600 <rb_ascii_to_bin>
    8bdc:	ldrb	r4, [r5]
    8be0:	mov	r2, r0
    8be4:	mov	r0, r4
    8be8:	bl	8600 <rb_ascii_to_bin>
    8bec:	ldr	r3, [pc, #2076]	; 9410 <rb_crypt+0xdc4>
    8bf0:	add	r3, pc, r3
    8bf4:	strb	r4, [r3, #-3092]	; 0xfffff3ec
    8bf8:	orr	r0, r0, r2, lsl #6
    8bfc:	ldr	r2, [pc, #2064]	; 9414 <rb_crypt+0xdc8>
    8c00:	cmp	r1, #0
    8c04:	add	r2, pc, r2
    8c08:	moveq	r1, r4
    8c0c:	strb	r1, [r3, #-3091]	; 0xfffff3ed
    8c10:	ldr	r3, [r2, #16]
    8c14:	cmp	r0, r3
    8c18:	bne	926c <rb_crypt+0xc20>
    8c1c:	ldr	r3, [pc, #2036]	; 9418 <rb_crypt+0xdcc>
    8c20:	ldr	lr, [pc, #2036]	; 941c <rb_crypt+0xdd0>
    8c24:	add	r3, pc, r3
    8c28:	add	r3, r3, #4096	; 0x1000
    8c2c:	ldr	r1, [r3, #-2260]	; 0xfffff72c
    8c30:	ldr	r2, [r3, #-3284]	; 0xfffff32c
    8c34:	ldr	r4, [pc, #2020]	; 9420 <rb_crypt+0xdd4>
    8c38:	orr	r2, r2, r1
    8c3c:	ldr	r1, [r3, #-1236]	; 0xfffffb2c
    8c40:	ldr	r6, [pc, #2012]	; 9424 <rb_crypt+0xdd8>
    8c44:	orr	r2, r2, r1
    8c48:	ldr	r1, [r3, #-212]	; 0xffffff2c
    8c4c:	add	lr, pc, lr
    8c50:	orr	r2, r2, r1
    8c54:	ldr	r1, [r3, #812]	; 0x32c
    8c58:	add	r4, pc, r4
    8c5c:	orr	r2, r2, r1
    8c60:	ldr	r1, [r3, #1836]	; 0x72c
    8c64:	orr	r2, r2, r1
    8c68:	ldr	r1, [r3, #2860]	; 0xb2c
    8c6c:	ldr	r3, [r3, #3884]	; 0xf2c
    8c70:	orr	r2, r2, r1
    8c74:	ldr	r1, [pc, #1964]	; 9428 <rb_crypt+0xddc>
    8c78:	orr	r2, r2, r3
    8c7c:	add	r1, pc, r1
    8c80:	add	r1, r1, #4096	; 0x1000
    8c84:	ldr	r0, [r1, #-2252]	; 0xfffff734
    8c88:	ldr	r3, [r1, #-3276]	; 0xfffff334
    8c8c:	orr	r3, r3, r0
    8c90:	ldr	r0, [r1, #-1228]	; 0xfffffb34
    8c94:	orr	r3, r3, r0
    8c98:	ldr	r0, [r1, #-204]	; 0xffffff34
    8c9c:	orr	r3, r3, r0
    8ca0:	ldr	r0, [r1, #820]	; 0x334
    8ca4:	orr	r3, r3, r0
    8ca8:	ldr	r0, [r1, #1844]	; 0x734
    8cac:	orr	r3, r3, r0
    8cb0:	ldr	r0, [r1, #2868]	; 0xb34
    8cb4:	ldr	r1, [r1, #3892]	; 0xf34
    8cb8:	orr	r3, r3, r0
    8cbc:	orr	r3, r3, r1
    8cc0:	ldr	r0, [pc, #1892]	; 942c <rb_crypt+0xde0>
    8cc4:	ldr	r1, [pc, #1892]	; 9430 <rb_crypt+0xde4>
    8cc8:	add	r0, pc, r0
    8ccc:	add	r1, pc, r1
    8cd0:	sub	r5, r0, #3040	; 0xbe0
    8cd4:	sub	r0, r0, #2912	; 0xb60
    8cd8:	ldr	r8, [r1, #12]
    8cdc:	sub	r5, r5, #8
    8ce0:	mov	r1, #26
    8ce4:	sub	r0, r0, #8
    8ce8:	subs	r1, r1, #1
    8cec:	bne	92bc <rb_crypt+0xc70>
    8cf0:	uxtb	r9, r2
    8cf4:	lsr	sl, r2, #24
    8cf8:	ldr	ip, [pc, #1844]	; 9434 <rb_crypt+0xde8>
    8cfc:	add	r9, r9, #768	; 0x300
    8d00:	add	ip, pc, ip
    8d04:	lsl	sl, sl, #2
    8d08:	lsl	r9, r9, #2
    8d0c:	lsr	r6, r2, #16
    8d10:	lsr	r5, r2, #8
    8d14:	lsr	r8, r3, #24
    8d18:	add	r2, ip, sl
    8d1c:	lsr	r4, r3, #16
    8d20:	lsr	r0, r3, #8
    8d24:	uxtb	r7, r3
    8d28:	add	r3, ip, r9
    8d2c:	add	r8, r8, #1024	; 0x400
    8d30:	ldr	r3, [r3, #796]	; 0x31c
    8d34:	ldr	r2, [r2, #796]	; 0x31c
    8d38:	lsl	r8, r8, #2
    8d3c:	orr	r2, r2, r3
    8d40:	add	r3, ip, r8
    8d44:	add	r7, r7, #1792	; 0x700
    8d48:	ldr	r3, [r3, #796]	; 0x31c
    8d4c:	lsl	r7, r7, #2
    8d50:	orr	r2, r2, r3
    8d54:	uxtb	r6, r6
    8d58:	add	r3, ip, r7
    8d5c:	add	r6, r6, #256	; 0x100
    8d60:	ldr	r3, [r3, #796]	; 0x31c
    8d64:	lsl	r6, r6, #2
    8d68:	orr	r2, r2, r3
    8d6c:	uxtb	r5, r5
    8d70:	add	r3, ip, r6
    8d74:	add	r5, r5, #512	; 0x200
    8d78:	ldr	r3, [r3, #796]	; 0x31c
    8d7c:	lsl	r5, r5, #2
    8d80:	orr	r2, r2, r3
    8d84:	uxtb	r4, r4
    8d88:	add	r3, ip, r5
    8d8c:	uxtb	r0, r0
    8d90:	add	r4, r4, #1280	; 0x500
    8d94:	ldr	r3, [r3, #796]	; 0x31c
    8d98:	add	r0, r0, #1536	; 0x600
    8d9c:	lsl	r4, r4, #2
    8da0:	lsl	lr, r0, #2
    8da4:	orr	r2, r2, r3
    8da8:	ldr	r0, [pc, #1672]	; 9438 <rb_crypt+0xdec>
    8dac:	add	r3, ip, r4
    8db0:	add	ip, ip, lr
    8db4:	add	r0, pc, r0
    8db8:	ldr	r3, [r3, #796]	; 0x31c
    8dbc:	ldr	ip, [ip, #796]	; 0x31c
    8dc0:	add	sl, r0, sl
    8dc4:	add	r9, r0, r9
    8dc8:	orr	r2, r2, r3
    8dcc:	orr	ip, r2, ip
    8dd0:	ldr	r3, [sl, #804]	; 0x324
    8dd4:	ldr	r2, [r9, #804]	; 0x324
    8dd8:	add	r8, r0, r8
    8ddc:	orr	r3, r3, r2
    8de0:	add	r7, r0, r7
    8de4:	ldr	r2, [r8, #804]	; 0x324
    8de8:	add	r6, r0, r6
    8dec:	orr	r3, r3, r2
    8df0:	ldr	r2, [r7, #804]	; 0x324
    8df4:	add	r5, r0, r5
    8df8:	orr	r3, r3, r2
    8dfc:	ldr	r2, [r6, #804]	; 0x324
    8e00:	add	r4, r0, r4
    8e04:	orr	r3, r3, r2
    8e08:	ldr	r2, [r5, #804]	; 0x324
    8e0c:	add	r0, r0, lr
    8e10:	orr	r3, r3, r2
    8e14:	ldr	r2, [r4, #804]	; 0x324
    8e18:	ldr	lr, [pc, #1564]	; 943c <rb_crypt+0xdf0>
    8e1c:	orr	r3, r3, r2
    8e20:	ldr	r2, [r0, #804]	; 0x324
    8e24:	add	lr, pc, lr
    8e28:	orr	r3, r3, r2
    8e2c:	add	r2, lr, ip, lsr #26
    8e30:	ldr	r0, [pc, #1544]	; 9440 <rb_crypt+0xdf4>
    8e34:	ldrb	r2, [r2, #848]	; 0x350
    8e38:	add	r0, pc, r0
    8e3c:	sub	r0, r0, #3088	; 0xc10
    8e40:	strb	r2, [r0, #-2]
    8e44:	lsl	r2, ip, #6
    8e48:	add	r2, lr, r2, lsr #26
    8e4c:	ldrb	r2, [r2, #848]	; 0x350
    8e50:	strb	r2, [r0, #-1]
    8e54:	lsl	r2, ip, #12
    8e58:	add	r2, lr, r2, lsr #26
    8e5c:	ldrb	r2, [r2, #848]	; 0x350
    8e60:	strb	r2, [r0]
    8e64:	lsl	r2, ip, #18
    8e68:	add	r2, lr, r2, lsr #26
    8e6c:	ldrb	r2, [r2, #848]	; 0x350
    8e70:	strb	r2, [r0, #1]
    8e74:	lsr	r2, r3, #16
    8e78:	orr	r2, r2, ip, lsl #16
    8e7c:	lsl	ip, r2, #8
    8e80:	add	ip, lr, ip, lsr #26
    8e84:	ldrb	ip, [ip, #848]	; 0x350
    8e88:	strb	ip, [r0, #2]
    8e8c:	lsl	ip, r2, #14
    8e90:	add	ip, lr, ip, lsr #26
    8e94:	ldrb	ip, [ip, #848]	; 0x350
    8e98:	strb	ip, [r0, #3]
    8e9c:	lsl	ip, r2, #20
    8ea0:	and	r2, r2, #63	; 0x3f
    8ea4:	add	r2, lr, r2
    8ea8:	add	ip, lr, ip, lsr #26
    8eac:	ldrb	r2, [r2, #848]	; 0x350
    8eb0:	ldrb	ip, [ip, #848]	; 0x350
    8eb4:	strb	r2, [r0, #5]
    8eb8:	lsl	r2, r3, #2
    8ebc:	strb	ip, [r0, #4]
    8ec0:	lsl	r3, r2, #14
    8ec4:	add	r3, lr, r3, lsr #26
    8ec8:	ldrb	r3, [r3, #848]	; 0x350
    8ecc:	strb	r1, [r0, #9]
    8ed0:	strb	r3, [r0, #6]
    8ed4:	lsl	r3, r2, #20
    8ed8:	and	r2, r2, #63	; 0x3f
    8edc:	add	r3, lr, r3, lsr #26
    8ee0:	ldrb	r3, [r3, #848]	; 0x350
    8ee4:	strb	r3, [r0, #7]
    8ee8:	add	r3, lr, r2
    8eec:	ldrb	r3, [r3, #848]	; 0x350
    8ef0:	strb	r3, [r0, #8]
    8ef4:	sub	r0, r0, #4
    8ef8:	b	8a78 <rb_crypt+0x42c>
    8efc:	ldrb	r3, [r4]
    8f00:	lsl	r3, r3, #1
    8f04:	uxtb	r3, r3
    8f08:	cmp	r3, #0
    8f0c:	strb	r3, [r2], #1
    8f10:	addne	r4, r4, #1
    8f14:	b	8b88 <rb_crypt+0x53c>
    8f18:	ldr	r1, [pc, #1316]	; 9444 <rb_crypt+0xdf8>
    8f1c:	lsr	r8, r3, #25
    8f20:	add	r1, pc, r1
    8f24:	lsr	r9, r2, #25
    8f28:	str	r2, [r1, #8]
    8f2c:	str	r3, [r1, #4]
    8f30:	add	r8, r8, #512	; 0x200
    8f34:	ldr	r1, [pc, #1292]	; 9448 <rb_crypt+0xdfc>
    8f38:	lsr	r7, r2, #17
    8f3c:	add	r1, pc, r1
    8f40:	lsr	lr, r3, #17
    8f44:	lsr	ip, r3, #9
    8f48:	lsl	r9, r9, #2
    8f4c:	lsr	r3, r3, #1
    8f50:	lsl	r8, r8, #2
    8f54:	add	r4, r1, r9
    8f58:	and	r0, r3, #127	; 0x7f
    8f5c:	and	r7, r7, #127	; 0x7f
    8f60:	add	r3, r1, r8
    8f64:	add	r7, r7, #128	; 0x80
    8f68:	ldr	r4, [r4, #828]	; 0x33c
    8f6c:	ldr	r3, [r3, #828]	; 0x33c
    8f70:	lsr	r6, r2, #9
    8f74:	lsl	r7, r7, #2
    8f78:	orr	r3, r4, r3
    8f7c:	and	r6, r6, #127	; 0x7f
    8f80:	add	r4, r1, r7
    8f84:	add	r6, r6, #256	; 0x100
    8f88:	ldr	r4, [r4, #828]	; 0x33c
    8f8c:	lsl	r6, r6, #2
    8f90:	orr	r3, r3, r4
    8f94:	lsr	r2, r2, #1
    8f98:	add	r4, r1, r6
    8f9c:	and	r2, r2, #127	; 0x7f
    8fa0:	ldr	r4, [r4, #828]	; 0x33c
    8fa4:	add	r2, r2, #384	; 0x180
    8fa8:	orr	r3, r3, r4
    8fac:	lsl	r4, r2, #2
    8fb0:	add	r2, r1, r4
    8fb4:	and	lr, lr, #127	; 0x7f
    8fb8:	add	lr, lr, #640	; 0x280
    8fbc:	ldr	r2, [r2, #828]	; 0x33c
    8fc0:	lsl	lr, lr, #2
    8fc4:	orr	r2, r3, r2
    8fc8:	and	ip, ip, #127	; 0x7f
    8fcc:	add	r3, r1, lr
    8fd0:	add	ip, ip, #768	; 0x300
    8fd4:	ldr	r3, [r3, #828]	; 0x33c
    8fd8:	lsl	ip, ip, #2
    8fdc:	add	r0, r0, #896	; 0x380
    8fe0:	orr	r3, r2, r3
    8fe4:	add	r2, r1, ip
    8fe8:	lsl	r0, r0, #2
    8fec:	add	r1, r1, r0
    8ff0:	ldr	r2, [r2, #828]	; 0x33c
    8ff4:	mov	sl, #0
    8ff8:	orr	r3, r3, r2
    8ffc:	ldr	r2, [r1, #828]	; 0x33c
    9000:	orr	r3, r3, r2
    9004:	ldr	r2, [pc, #1088]	; 944c <rb_crypt+0xe00>
    9008:	str	r3, [sp, #8]
    900c:	add	r2, pc, r2
    9010:	add	r8, r2, r8
    9014:	add	r9, r2, r9
    9018:	ldr	r1, [r8, #-3260]	; 0xfffff344
    901c:	ldr	r3, [r9, #-3260]	; 0xfffff344
    9020:	add	r7, r2, r7
    9024:	orr	r3, r3, r1
    9028:	add	r6, r2, r6
    902c:	ldr	r1, [r7, #-3260]	; 0xfffff344
    9030:	add	r4, r2, r4
    9034:	orr	r3, r3, r1
    9038:	ldr	r1, [r6, #-3260]	; 0xfffff344
    903c:	add	lr, r2, lr
    9040:	orr	r3, r3, r1
    9044:	ldr	r1, [r4, #-3260]	; 0xfffff344
    9048:	add	ip, r2, ip
    904c:	orr	r3, r3, r1
    9050:	ldr	r1, [lr, #-3260]	; 0xfffff344
    9054:	add	r0, r2, r0
    9058:	orr	r3, r3, r1
    905c:	ldr	r1, [ip, #-3260]	; 0xfffff344
    9060:	ldr	r6, [pc, #1000]	; 9450 <rb_crypt+0xe04>
    9064:	orr	r3, r3, r1
    9068:	ldr	r1, [r0, #-3260]	; 0xfffff344
    906c:	mov	r8, sl
    9070:	orr	r3, r3, r1
    9074:	str	r3, [sp, #12]
    9078:	mov	r3, #15
    907c:	str	r3, [sp]
    9080:	ldr	r3, [pc, #972]	; 9454 <rb_crypt+0xe08>
    9084:	add	r6, pc, r6
    9088:	add	r3, pc, r3
    908c:	add	r3, r3, #2032	; 0x7f0
    9090:	str	r3, [sp, #24]
    9094:	ldr	r3, [pc, #956]	; 9458 <rb_crypt+0xe0c>
    9098:	add	r3, pc, r3
    909c:	sub	r1, r3, #3040	; 0xbe0
    90a0:	sub	r1, r1, #8
    90a4:	str	r1, [sp, #28]
    90a8:	sub	r1, r3, #2976	; 0xba0
    90ac:	sub	r1, r1, #8
    90b0:	str	r1, [sp, #32]
    90b4:	sub	r1, r3, #2912	; 0xb60
    90b8:	sub	r3, r3, #2848	; 0xb20
    90bc:	sub	r1, r1, #8
    90c0:	sub	r3, r3, #8
    90c4:	str	r1, [sp, #36]	; 0x24
    90c8:	str	r3, [sp, #4]
    90cc:	ldr	r3, [sp, #24]
    90d0:	ldr	r1, [sp, #8]
    90d4:	ldr	r0, [sp, #8]
    90d8:	ldrb	r3, [r8, r3]
    90dc:	add	sl, sl, r3
    90e0:	rsb	r3, sl, #28
    90e4:	lsr	r1, r1, r3
    90e8:	orr	r1, r1, r0, lsl sl
    90ec:	ldr	r0, [sp, #12]
    90f0:	lsr	r9, r1, #19
    90f4:	lsr	lr, r1, #14
    90f8:	lsr	r3, r0, r3
    90fc:	orr	r3, r3, r0, lsl sl
    9100:	lsr	ip, r1, #7
    9104:	lsr	r4, r3, #7
    9108:	lsr	r0, r3, #21
    910c:	lsr	r7, r3, #14
    9110:	and	r1, r1, #127	; 0x7f
    9114:	and	r3, r3, #127	; 0x7f
    9118:	add	r1, r1, #384	; 0x180
    911c:	add	r3, r3, #896	; 0x380
    9120:	lsl	r1, r1, #2
    9124:	lsl	r3, r3, #2
    9128:	and	fp, r4, #127	; 0x7f
    912c:	str	r1, [sp, #16]
    9130:	add	r4, r2, r1
    9134:	add	r1, r2, r3
    9138:	ldr	r4, [r4, #836]	; 0x344
    913c:	ldr	r1, [r1, #836]	; 0x344
    9140:	and	r9, r9, #508	; 0x1fc
    9144:	orr	r1, r4, r1
    9148:	and	lr, lr, #127	; 0x7f
    914c:	add	r4, r2, r9
    9150:	add	lr, lr, #128	; 0x80
    9154:	ldr	r4, [r4, #836]	; 0x344
    9158:	lsl	lr, lr, #2
    915c:	orr	r1, r1, r4
    9160:	and	ip, ip, #127	; 0x7f
    9164:	add	r4, r2, lr
    9168:	add	ip, ip, #256	; 0x100
    916c:	ldr	r4, [r4, #836]	; 0x344
    9170:	lsl	ip, ip, #2
    9174:	orr	r1, r1, r4
    9178:	and	r0, r0, #127	; 0x7f
    917c:	add	r4, r2, ip
    9180:	add	r0, r0, #512	; 0x200
    9184:	ldr	r4, [r4, #836]	; 0x344
    9188:	lsl	r0, r0, #2
    918c:	orr	r1, r1, r4
    9190:	and	r7, r7, #127	; 0x7f
    9194:	add	r4, r2, r0
    9198:	add	r7, r7, #640	; 0x280
    919c:	ldr	r4, [r4, #836]	; 0x344
    91a0:	lsl	r7, r7, #2
    91a4:	orr	r1, r1, r4
    91a8:	add	r4, r2, r7
    91ac:	str	r3, [sp, #20]
    91b0:	ldr	r4, [r4, #836]	; 0x344
    91b4:	ldr	r3, [sp]
    91b8:	orr	r1, r1, r4
    91bc:	add	r4, fp, #768	; 0x300
    91c0:	add	r9, r6, r9
    91c4:	lsl	r4, r4, #2
    91c8:	add	fp, r2, r4
    91cc:	add	lr, r6, lr
    91d0:	ldr	fp, [fp, #836]	; 0x344
    91d4:	add	ip, r6, ip
    91d8:	orr	r1, r1, fp
    91dc:	ldr	fp, [sp, #28]
    91e0:	add	r0, r6, r0
    91e4:	add	r7, r6, r7
    91e8:	str	r1, [fp, r8, lsl #2]
    91ec:	ldr	fp, [sp, #32]
    91f0:	add	r4, r6, r4
    91f4:	str	r1, [fp, r3, lsl #2]
    91f8:	ldr	r3, [sp, #16]
    91fc:	add	r1, r6, r3
    9200:	ldr	r3, [sp, #20]
    9204:	ldr	r1, [r1, #-3252]	; 0xfffff34c
    9208:	add	r3, r6, r3
    920c:	ldr	r3, [r3, #-3252]	; 0xfffff34c
    9210:	orr	r1, r1, r3
    9214:	ldr	r3, [r9, #-3252]	; 0xfffff34c
    9218:	orr	r1, r1, r3
    921c:	ldr	r3, [lr, #-3252]	; 0xfffff34c
    9220:	orr	r1, r1, r3
    9224:	ldr	r3, [ip, #-3252]	; 0xfffff34c
    9228:	orr	r1, r1, r3
    922c:	ldr	r3, [r0, #-3252]	; 0xfffff34c
    9230:	orr	r1, r1, r3
    9234:	ldr	r3, [r7, #-3252]	; 0xfffff34c
    9238:	orr	r1, r1, r3
    923c:	ldr	r3, [r4, #-3252]	; 0xfffff34c
    9240:	orr	r3, r1, r3
    9244:	ldr	r1, [sp, #36]	; 0x24
    9248:	str	r3, [r1, r8, lsl #2]
    924c:	ldm	sp, {r0, r1}
    9250:	add	r8, r8, #1
    9254:	cmp	r8, #16
    9258:	str	r3, [r1, r0, lsl #2]
    925c:	sub	r3, r0, #1
    9260:	str	r3, [sp]
    9264:	bne	90cc <rb_crypt+0xa80>
    9268:	b	8bd0 <rb_crypt+0x584>
    926c:	mov	r3, #0
    9270:	str	r0, [r2, #16]
    9274:	str	r3, [r2, #12]
    9278:	mov	r2, #1
    927c:	mov	ip, #24
    9280:	mov	r1, r3
    9284:	mov	lr, #8388608	; 0x800000
    9288:	mov	r4, r2
    928c:	tst	r2, r0
    9290:	orrne	r1, r1, lr
    9294:	movne	r3, r4
    9298:	subs	ip, ip, #1
    929c:	lsl	r2, r2, #1
    92a0:	lsr	lr, lr, #1
    92a4:	bne	928c <rb_crypt+0xc40>
    92a8:	cmp	r3, #0
    92ac:	ldrne	r3, [pc, #424]	; 945c <rb_crypt+0xe10>
    92b0:	addne	r3, pc, r3
    92b4:	strne	r1, [r3, #12]
    92b8:	b	8c1c <rb_crypt+0x5d0>
    92bc:	mov	ip, #0
    92c0:	mov	r7, r2
    92c4:	lsl	r9, r3, #23
    92c8:	lsr	r2, r3, #9
    92cc:	and	r2, r2, #8126464	; 0x7c0000
    92d0:	and	r9, r9, #8388608	; 0x800000
    92d4:	orr	r9, r9, r2
    92d8:	lsr	r2, r3, #11
    92dc:	and	r2, r2, #258048	; 0x3f000
    92e0:	orr	r9, r9, r2
    92e4:	lsr	r2, r3, #13
    92e8:	and	r2, r2, #4032	; 0xfc0
    92ec:	orr	r9, r9, r2
    92f0:	lsl	r2, r3, #11
    92f4:	lsl	sl, r3, #5
    92f8:	orr	r9, r9, r2, lsr #26
    92fc:	lsl	r2, r3, #7
    9300:	and	sl, sl, #258048	; 0x3f000
    9304:	and	r2, r2, #16515072	; 0xfc0000
    9308:	orr	r2, r2, sl
    930c:	lsl	sl, r3, #3
    9310:	and	sl, sl, #4032	; 0xfc0
    9314:	orr	r2, r2, r3, lsr #31
    9318:	orr	r2, r2, sl
    931c:	lsl	sl, r3, #1
    9320:	and	sl, sl, #62	; 0x3e
    9324:	ldr	fp, [r5, ip, lsl #2]
    9328:	orr	r2, r2, sl
    932c:	eor	sl, r9, r2
    9330:	and	sl, sl, r8
    9334:	eor	r9, r9, fp
    9338:	ldr	fp, [r0, ip, lsl #2]
    933c:	eor	r9, r9, sl
    9340:	eor	r2, r2, fp
    9344:	eor	r2, r2, sl
    9348:	add	sl, r4, r9, lsr #12
    934c:	and	r9, r9, r6
    9350:	add	r9, r4, r9
    9354:	add	r9, r9, #4608	; 0x1200
    9358:	ldrb	sl, [sl, #532]	; 0x214
    935c:	ldrb	fp, [r9, #20]
    9360:	add	ip, ip, #1
    9364:	cmp	ip, #16
    9368:	add	sl, lr, sl, lsl #2
    936c:	add	fp, lr, fp, lsl #2
    9370:	ldr	sl, [sl, #876]	; 0x36c
    9374:	ldr	r9, [fp, #1900]	; 0x76c
    9378:	orr	r9, sl, r9
    937c:	add	sl, r4, r2, lsr #12
    9380:	and	r2, r2, r6
    9384:	add	sl, sl, #8704	; 0x2200
    9388:	add	r2, r4, r2
    938c:	add	r2, r2, #12800	; 0x3200
    9390:	ldrb	sl, [sl, #20]
    9394:	ldrb	r2, [r2, #20]
    9398:	add	sl, lr, sl, lsl #2
    939c:	add	r2, lr, r2, lsl #2
    93a0:	ldr	sl, [sl, #2924]	; 0xb6c
    93a4:	ldr	r2, [r2, #3948]	; 0xf6c
    93a8:	orr	r9, r9, sl
    93ac:	orr	r9, r9, r2
    93b0:	eor	r9, r9, r7
    93b4:	mov	r2, r9
    93b8:	mov	r7, r3
    93bc:	beq	8ce8 <rb_crypt+0x69c>
    93c0:	mov	r3, r9
    93c4:	b	92c4 <rb_crypt+0xc78>
    93c8:	.word	0x00030de8
    93cc:	.word	0x0000b7ff
    93d0:	.word	0x00030dc8
    93d4:	.word	0x00030d84
    93d8:	.word	0xefcdab89
    93dc:	.word	0x98badcfe
    93e0:	.word	0x10325476
    93e4:	.word	0x67452301
    93e8:	.word	0x0000b73b
    93ec:	.word	0x00030c44
    93f0:	.word	0x0000b64f
    93f4:	.word	0x0000b62d
    93f8:	.word	0x00030bec
    93fc:	.word	0x00030b04
    9400:	.word	0x000309ec
    9404:	.word	0x00030960
    9408:	.word	0x00030928
    940c:	.word	0x0001e920
    9410:	.word	0x0003089c
    9414:	.word	0x0001e8d0
    9418:	.word	0x00026890
    941c:	.word	0x0002e848
    9420:	.word	0x0001e87c
    9424:	.word	0x00000fff
    9428:	.word	0x00028830
    942c:	.word	0x000307c4
    9430:	.word	0x0001e808
    9434:	.word	0x000227c4
    9438:	.word	0x00024708
    943c:	.word	0x0000a87c
    9440:	.word	0x00030654
    9444:	.word	0x0001e5b4
    9448:	.word	0x0002a568
    944c:	.word	0x0002c490
    9450:	.word	0x0002e410
    9454:	.word	0x0000a618
    9458:	.word	0x000303f4
    945c:	.word	0x0001e224

00009460 <rb_malloc>:
    9460:	push	{r4, lr}
    9464:	mov	r1, r0
    9468:	mov	r0, #1
    946c:	bl	460c <calloc@plt>
    9470:	cmp	r0, #0
    9474:	popne	{r4, pc}
    9478:	bl	49b4 <rb_outofmemory@plt>

0000947c <rb_init_bh>:
    947c:	push	{r4, lr}
    9480:	mov	r0, #12
    9484:	bl	9460 <rb_malloc>
    9488:	ldr	r3, [pc, #8]	; 9498 <rb_init_bh+0x1c>
    948c:	add	r3, pc, r3
    9490:	str	r0, [r3]
    9494:	pop	{r4, pc}
    9498:	.word	0x0002f518

0000949c <rb_bh_create>:
    949c:	cmp	r0, #0
    94a0:	cmpne	r1, #0
    94a4:	push	{r4, r5, r6, r7, r8, lr}
    94a8:	bgt	94d0 <rb_bh_create+0x34>
    94ac:	ldr	r2, [pc, #228]	; 9598 <rb_bh_create+0xfc>
    94b0:	ldr	r1, [pc, #228]	; 959c <rb_bh_create+0x100>
    94b4:	ldr	r0, [pc, #228]	; 95a0 <rb_bh_create+0x104>
    94b8:	mov	r3, #147	; 0x93
    94bc:	add	r2, pc, r2
    94c0:	add	r1, pc, r1
    94c4:	add	r0, pc, r0
    94c8:	bl	4948 <rb_lib_log@plt>
    94cc:	bl	43e4 <abort@plt>
    94d0:	cmp	r0, #11
    94d4:	mov	r6, r0
    94d8:	bhi	94fc <rb_bh_create+0x60>
    94dc:	ldr	r2, [pc, #192]	; 95a4 <rb_bh_create+0x108>
    94e0:	ldr	r1, [pc, #192]	; 95a8 <rb_bh_create+0x10c>
    94e4:	ldr	r0, [pc, #192]	; 95ac <rb_bh_create+0x110>
    94e8:	mov	r3, #151	; 0x97
    94ec:	add	r2, pc, r2
    94f0:	add	r1, pc, r1
    94f4:	add	r0, pc, r0
    94f8:	b	94c8 <rb_bh_create+0x2c>
    94fc:	mov	r0, #48	; 0x30
    9500:	mov	r5, r2
    9504:	mov	r7, r1
    9508:	bl	9460 <rb_malloc>
    950c:	cmp	r5, #0
    9510:	mov	r4, r0
    9514:	str	r6, [r0, #12]
    9518:	str	r7, [r0, #16]
    951c:	beq	9548 <rb_bh_create+0xac>
    9520:	mov	r0, r5
    9524:	bl	4804 <strlen@plt>
    9528:	add	r0, r0, #1
    952c:	bl	49d8 <malloc@plt>
    9530:	subs	r6, r0, #0
    9534:	bne	953c <rb_bh_create+0xa0>
    9538:	bl	49b4 <rb_outofmemory@plt>
    953c:	mov	r1, r5
    9540:	bl	48ac <strcpy@plt>
    9544:	str	r6, [r4, #44]	; 0x2c
    9548:	ldr	r3, [pc, #96]	; 95b0 <rb_bh_create+0x114>
    954c:	mov	r2, #0
    9550:	add	r3, pc, r3
    9554:	str	r2, [r4, #4]
    9558:	ldr	r3, [r3]
    955c:	str	r4, [r4]
    9560:	ldr	r2, [r3]
    9564:	cmp	r2, #0
    9568:	str	r2, [r4, #8]
    956c:	strne	r4, [r2, #4]
    9570:	bne	9580 <rb_bh_create+0xe4>
    9574:	ldr	r2, [r3, #4]
    9578:	cmp	r2, #0
    957c:	streq	r4, [r3, #4]
    9580:	ldr	r2, [r3, #8]
    9584:	str	r4, [r3]
    9588:	add	r2, r2, #1
    958c:	str	r2, [r3, #8]
    9590:	mov	r0, r4
    9594:	pop	{r4, r5, r6, r7, r8, pc}
    9598:	.word	0x0000a9ef
    959c:	.word	0x0000a9f4
    95a0:	.word	0x0000aa19
    95a4:	.word	0x0000a9bf
    95a8:	.word	0x0000aa13
    95ac:	.word	0x0000a9e9
    95b0:	.word	0x0002f454

000095b4 <rb_bh_alloc>:
    95b4:	cmp	r0, #0
    95b8:	bne	95e4 <rb_bh_alloc+0x30>
    95bc:	ldr	r2, [pc, #40]	; 95ec <rb_bh_alloc+0x38>
    95c0:	ldr	r1, [pc, #40]	; 95f0 <rb_bh_alloc+0x3c>
    95c4:	ldr	r0, [pc, #40]	; 95f4 <rb_bh_alloc+0x40>
    95c8:	push	{r4, lr}
    95cc:	mov	r3, #186	; 0xba
    95d0:	add	r2, pc, r2
    95d4:	add	r1, pc, r1
    95d8:	add	r0, pc, r0
    95dc:	bl	4948 <rb_lib_log@plt>
    95e0:	bl	43e4 <abort@plt>
    95e4:	ldr	r0, [r0, #12]
    95e8:	b	9460 <rb_malloc>
    95ec:	.word	0x0000a8db
    95f0:	.word	0x0000a96a
    95f4:	.word	0x0000a905

000095f8 <rb_bh_free>:
    95f8:	cmp	r0, #0
    95fc:	push	{r4, lr}
    9600:	bne	9618 <rb_bh_free+0x20>
    9604:	ldr	r0, [pc, #44]	; 9638 <rb_bh_free+0x40>
    9608:	add	r0, pc, r0
    960c:	bl	4948 <rb_lib_log@plt>
    9610:	mov	r0, #1
    9614:	pop	{r4, pc}
    9618:	cmp	r1, #0
    961c:	ldreq	r0, [pc, #24]	; 963c <rb_bh_free+0x44>
    9620:	addeq	r0, pc, r0
    9624:	beq	960c <rb_bh_free+0x14>
    9628:	mov	r0, r1
    962c:	bl	4714 <free@plt>
    9630:	mov	r0, #0
    9634:	pop	{r4, pc}
    9638:	.word	0x0000a954
    963c:	.word	0x0000a95c

00009640 <rb_bh_destroy>:
    9640:	push	{r4, lr}
    9644:	subs	r4, r0, #0
    9648:	beq	96b4 <rb_bh_destroy+0x74>
    964c:	ldr	r3, [pc, #104]	; 96bc <rb_bh_destroy+0x7c>
    9650:	ldr	r2, [r4, #8]
    9654:	add	r3, pc, r3
    9658:	ldr	r1, [r4, #4]
    965c:	ldr	r3, [r3]
    9660:	cmp	r2, #0
    9664:	strne	r1, [r2, #4]
    9668:	streq	r1, [r3, #4]
    966c:	ldr	r1, [r4, #4]
    9670:	ldr	r0, [r4, #44]	; 0x2c
    9674:	cmp	r1, #0
    9678:	strne	r2, [r1, #8]
    967c:	streq	r2, [r3]
    9680:	mov	r2, #0
    9684:	str	r2, [r4, #4]
    9688:	str	r2, [r4, #8]
    968c:	ldr	r2, [r3, #8]
    9690:	cmp	r0, #0
    9694:	sub	r2, r2, #1
    9698:	str	r2, [r3, #8]
    969c:	beq	96a4 <rb_bh_destroy+0x64>
    96a0:	bl	4714 <free@plt>
    96a4:	mov	r0, r4
    96a8:	bl	4714 <free@plt>
    96ac:	mov	r0, #0
    96b0:	pop	{r4, pc}
    96b4:	mov	r0, #1
    96b8:	pop	{r4, pc}
    96bc:	.word	0x0002f350

000096c0 <rb_bh_usage>:
    96c0:	cmp	r1, #0
    96c4:	movne	ip, #0
    96c8:	strne	ip, [r1]
    96cc:	cmp	r2, #0
    96d0:	movne	r1, #0
    96d4:	strne	r1, [r2]
    96d8:	ldr	r0, [sp]
    96dc:	cmp	r3, #0
    96e0:	movne	r2, #0
    96e4:	strne	r2, [r3]
    96e8:	cmp	r0, #0
    96ec:	ldrne	r3, [pc, #8]	; 96fc <rb_bh_usage+0x3c>
    96f0:	addne	r3, pc, r3
    96f4:	strne	r3, [r0]
    96f8:	bx	lr
    96fc:	.word	0x0000a8ab

00009700 <rb_bh_usage_all>:
    9700:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9704:	subs	r7, r0, #0
    9708:	beq	9730 <rb_bh_usage_all+0x30>
    970c:	ldr	r3, [pc, #100]	; 9778 <rb_bh_usage_all+0x78>
    9710:	ldr	r5, [pc, #100]	; 977c <rb_bh_usage_all+0x7c>
    9714:	add	r3, pc, r3
    9718:	mov	r6, r1
    971c:	ldr	r3, [r3]
    9720:	add	r5, pc, r5
    9724:	ldr	r4, [r3]
    9728:	cmp	r4, #0
    972c:	bne	9738 <rb_bh_usage_all+0x38>
    9730:	add	sp, sp, #12
    9734:	pop	{r4, r5, r6, r7, pc}
    9738:	ldr	ip, [r4]
    973c:	ldr	r2, [ip, #28]
    9740:	ldr	r3, [ip, #16]
    9744:	ldr	r1, [ip, #40]	; 0x28
    9748:	mul	r3, r3, r2
    974c:	ldr	r2, [ip, #12]
    9750:	ldr	ip, [ip, #44]	; 0x2c
    9754:	sub	r0, r3, r1
    9758:	cmp	ip, #0
    975c:	movne	r5, ip
    9760:	mul	r3, r2, r3
    9764:	stm	sp, {r5, r6}
    9768:	mul	r2, r2, r0
    976c:	blx	r7
    9770:	ldr	r4, [r4, #8]
    9774:	b	9728 <rb_bh_usage_all+0x28>
    9778:	.word	0x0002f290
    977c:	.word	0x0000a888

00009780 <rb_bh_total_usage>:
    9780:	ldr	r3, [pc, #92]	; 97e4 <rb_bh_total_usage+0x64>
    9784:	push	{r4, r5, lr}
    9788:	add	r3, pc, r3
    978c:	ldr	r3, [r3]
    9790:	ldr	r2, [r3]
    9794:	mov	r3, #0
    9798:	mov	r4, r3
    979c:	cmp	r2, #0
    97a0:	bne	97b8 <rb_bh_total_usage+0x38>
    97a4:	cmp	r0, #0
    97a8:	strne	r4, [r0]
    97ac:	cmp	r1, #0
    97b0:	strne	r3, [r1]
    97b4:	pop	{r4, r5, pc}
    97b8:	ldr	lr, [r2]
    97bc:	ldr	r2, [r2, #8]
    97c0:	ldr	r5, [lr, #28]
    97c4:	ldr	ip, [lr, #16]
    97c8:	mul	ip, ip, r5
    97cc:	ldr	r5, [lr, #12]
    97d0:	ldr	lr, [lr, #40]	; 0x28
    97d4:	sub	lr, ip, lr
    97d8:	mla	r4, r5, ip, r4
    97dc:	mla	r3, r5, lr, r3
    97e0:	b	979c <rb_bh_total_usage+0x1c>
    97e4:	.word	0x0002f21c

000097e8 <rb_dlinkDelete>:
    97e8:	ldr	r3, [r0, #8]
    97ec:	ldr	r2, [r0, #4]
    97f0:	cmp	r3, #0
    97f4:	strne	r2, [r3, #4]
    97f8:	streq	r2, [r1, #4]
    97fc:	ldr	r2, [r0, #4]
    9800:	cmp	r2, #0
    9804:	strne	r3, [r2, #8]
    9808:	streq	r3, [r1]
    980c:	mov	r3, #0
    9810:	str	r3, [r0, #4]
    9814:	str	r3, [r0, #8]
    9818:	ldr	r3, [r1, #8]
    981c:	sub	r3, r3, #1
    9820:	str	r3, [r1, #8]
    9824:	bx	lr

00009828 <inetntoa>:
    9828:	ldrb	r2, [r0]
    982c:	ldr	r3, [pc, #220]	; 9910 <inetntoa+0xe8>
    9830:	add	r3, pc, r3
    9834:	ldr	r1, [r3, r2, lsl #2]
    9838:	ldr	r3, [pc, #212]	; 9914 <inetntoa+0xec>
    983c:	sub	r1, r1, #1
    9840:	add	r3, pc, r3
    9844:	ldrb	ip, [r1, #1]!
    9848:	add	r2, r3, #1
    984c:	cmp	ip, #0
    9850:	bne	98e4 <inetntoa+0xbc>
    9854:	mov	r1, #46	; 0x2e
    9858:	strb	r1, [r3]
    985c:	ldr	r3, [pc, #180]	; 9918 <inetntoa+0xf0>
    9860:	ldrb	r1, [r0, #1]
    9864:	add	r3, pc, r3
    9868:	ldr	r1, [r3, r1, lsl #2]
    986c:	sub	r1, r1, #1
    9870:	ldrb	ip, [r1, #1]!
    9874:	add	r3, r2, #1
    9878:	cmp	ip, #0
    987c:	bne	98f0 <inetntoa+0xc8>
    9880:	mov	r1, #46	; 0x2e
    9884:	strb	r1, [r2]
    9888:	ldr	r2, [pc, #140]	; 991c <inetntoa+0xf4>
    988c:	ldrb	r1, [r0, #2]
    9890:	add	r2, pc, r2
    9894:	ldr	r1, [r2, r1, lsl #2]
    9898:	sub	r1, r1, #1
    989c:	ldrb	ip, [r1, #1]!
    98a0:	add	r2, r3, #1
    98a4:	cmp	ip, #0
    98a8:	bne	98fc <inetntoa+0xd4>
    98ac:	mov	r1, #46	; 0x2e
    98b0:	strb	r1, [r3]
    98b4:	ldr	r3, [pc, #100]	; 9920 <inetntoa+0xf8>
    98b8:	ldrb	r1, [r0, #3]
    98bc:	add	r3, pc, r3
    98c0:	ldr	r3, [r3, r1, lsl #2]
    98c4:	sub	r3, r3, #1
    98c8:	ldrb	r1, [r3, #1]!
    98cc:	cmp	r1, #0
    98d0:	bne	9908 <inetntoa+0xe0>
    98d4:	ldr	r0, [pc, #72]	; 9924 <inetntoa+0xfc>
    98d8:	strb	r1, [r2]
    98dc:	add	r0, pc, r0
    98e0:	bx	lr
    98e4:	mov	r3, r2
    98e8:	strb	ip, [r2, #-1]
    98ec:	b	9844 <inetntoa+0x1c>
    98f0:	mov	r2, r3
    98f4:	strb	ip, [r3, #-1]
    98f8:	b	9870 <inetntoa+0x48>
    98fc:	mov	r3, r2
    9900:	strb	ip, [r2, #-1]
    9904:	b	989c <inetntoa+0x74>
    9908:	strb	r1, [r2], #1
    990c:	b	98c8 <inetntoa+0xa0>
    9910:	.word	0x0001c20c
    9914:	.word	0x0002f168
    9918:	.word	0x0001c1d8
    991c:	.word	0x0001c1ac
    9920:	.word	0x0001c180
    9924:	.word	0x0002f0cc

00009928 <inet_pton4>:
    9928:	mov	r2, #0
    992c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
    9930:	mov	r3, r2
    9934:	add	ip, sp, #8
    9938:	mov	r5, r2
    993c:	mov	r6, #10
    9940:	mov	r7, #1
    9944:	strb	r2, [ip, #-4]!
    9948:	ldrb	r4, [r0], #1
    994c:	cmp	r4, #0
    9950:	bne	996c <inet_pton4+0x44>
    9954:	cmp	r2, #3
    9958:	ble	9988 <inet_pton4+0x60>
    995c:	ldr	r3, [sp, #4]
    9960:	mov	r0, #1
    9964:	str	r3, [r1]
    9968:	b	998c <inet_pton4+0x64>
    996c:	sub	r8, r4, #48	; 0x30
    9970:	cmp	r8, #9
    9974:	bhi	99b4 <inet_pton4+0x8c>
    9978:	ldrb	lr, [ip]
    997c:	smlabb	lr, r6, lr, r8
    9980:	cmp	lr, #255	; 0xff
    9984:	bls	9994 <inet_pton4+0x6c>
    9988:	mov	r0, #0
    998c:	add	sp, sp, #8
    9990:	pop	{r4, r5, r6, r7, r8, pc}
    9994:	cmp	r3, #0
    9998:	strb	lr, [ip]
    999c:	bne	9948 <inet_pton4+0x20>
    99a0:	add	r2, r2, #1
    99a4:	cmp	r2, #4
    99a8:	bgt	9988 <inet_pton4+0x60>
    99ac:	mov	r3, r7
    99b0:	b	9948 <inet_pton4+0x20>
    99b4:	cmp	r4, #46	; 0x2e
    99b8:	movne	r3, #0
    99bc:	andeq	r3, r3, #1
    99c0:	eor	r3, r3, #1
    99c4:	cmp	r2, #4
    99c8:	orreq	r3, r3, #1
    99cc:	cmp	r3, #0
    99d0:	bne	9988 <inet_pton4+0x60>
    99d4:	strb	r3, [ip, #1]
    99d8:	add	ip, ip, #1
    99dc:	mov	r3, r5
    99e0:	b	9948 <inet_pton4+0x20>

000099e4 <rb_unsupported_event>:
    99e4:	mov	r0, #0
    99e8:	bx	lr

000099ec <rb_find_fd>:
    99ec:	ldr	r1, [pc, #92]	; 9a50 <rb_find_fd+0x64>
    99f0:	subs	r2, r0, #0
    99f4:	add	r1, pc, r1
    99f8:	blt	9a30 <rb_find_fd+0x44>
    99fc:	ldr	r0, [pc, #80]	; 9a54 <rb_find_fd+0x68>
    9a00:	asr	r3, r2, #24
    9a04:	eor	r3, r3, r2, asr #12
    9a08:	eor	r3, r3, r2
    9a0c:	ldr	r1, [r1, r0]
    9a10:	lsl	r3, r3, #20
    9a14:	ldr	r0, [r1]
    9a18:	lsr	r3, r3, #20
    9a1c:	mov	r1, #12
    9a20:	mul	r3, r1, r3
    9a24:	ldr	r3, [r0, r3]
    9a28:	cmp	r3, #0
    9a2c:	bne	9a38 <rb_find_fd+0x4c>
    9a30:	mov	r0, #0
    9a34:	bx	lr
    9a38:	ldr	r0, [r3]
    9a3c:	ldr	r1, [r0, #12]
    9a40:	cmp	r2, r1
    9a44:	bxeq	lr
    9a48:	ldr	r3, [r3, #8]
    9a4c:	b	9a28 <rb_find_fd+0x3c>
    9a50:	.word	0x0001c604
    9a54:	.word	0x000003c4

00009a58 <rb_free>:
    9a58:	cmp	r0, #0
    9a5c:	bxeq	lr
    9a60:	b	4714 <free@plt>

00009a64 <rb_checktimeouts>:
    9a64:	ldr	r3, [pc, #144]	; 9afc <rb_checktimeouts+0x98>
    9a68:	add	r3, pc, r3
    9a6c:	ldr	r3, [r3, #16]
    9a70:	cmp	r3, #0
    9a74:	bxeq	lr
    9a78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9a7c:	mov	r8, #0
    9a80:	ldr	r7, [pc, #120]	; 9b00 <rb_checktimeouts+0x9c>
    9a84:	ldr	r5, [r3, #8]
    9a88:	add	r7, pc, r7
    9a8c:	add	r7, r7, #16
    9a90:	ldr	r4, [r3]
    9a94:	ldr	r6, [r4]
    9a98:	cmp	r6, #0
    9a9c:	beq	9ae8 <rb_checktimeouts+0x84>
    9aa0:	ldrb	r3, [r6, #16]
    9aa4:	tst	r3, #1
    9aa8:	beq	9ae8 <rb_checktimeouts+0x84>
    9aac:	ldr	r9, [r4, #16]
    9ab0:	bl	4810 <rb_current_time@plt>
    9ab4:	cmp	r9, r0
    9ab8:	bge	9ae8 <rb_checktimeouts+0x84>
    9abc:	mov	r1, r7
    9ac0:	ldr	sl, [r4, #24]
    9ac4:	add	r0, r4, #4
    9ac8:	ldr	r9, [r4, #20]
    9acc:	bl	97e8 <rb_dlinkDelete>
    9ad0:	mov	r0, r4
    9ad4:	str	r8, [r6, #44]	; 0x2c
    9ad8:	bl	9a58 <rb_free>
    9adc:	mov	r1, sl
    9ae0:	mov	r0, r6
    9ae4:	blx	r9
    9ae8:	cmp	r5, #0
    9aec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9af0:	mov	r3, r5
    9af4:	ldr	r5, [r5, #8]
    9af8:	b	9a90 <rb_checktimeouts+0x2c>
    9afc:	.word	0x0002ef40
    9b00:	.word	0x0002ef20

00009b04 <rb_malloc>:
    9b04:	push	{r4, lr}
    9b08:	mov	r1, r0
    9b0c:	mov	r0, #1
    9b10:	bl	460c <calloc@plt>
    9b14:	cmp	r0, #0
    9b18:	popne	{r4, pc}
    9b1c:	bl	49b4 <rb_outofmemory@plt>

00009b20 <inet_pton6>:
    9b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b24:	sub	sp, sp, #36	; 0x24
    9b28:	add	r8, sp, #16
    9b2c:	mov	r6, r0
    9b30:	str	r1, [sp, #4]
    9b34:	mov	r2, #16
    9b38:	mov	r1, #0
    9b3c:	mov	r0, r8
    9b40:	bl	4648 <memset@plt>
    9b44:	ldrb	r3, [r6]
    9b48:	cmp	r3, #58	; 0x3a
    9b4c:	mov	r4, r0
    9b50:	add	r7, r0, #16
    9b54:	bne	9b74 <inet_pton6+0x54>
    9b58:	ldrb	r3, [r6, #1]
    9b5c:	cmp	r3, #58	; 0x3a
    9b60:	beq	9b70 <inet_pton6+0x50>
    9b64:	mov	r0, #0
    9b68:	add	sp, sp, #36	; 0x24
    9b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b70:	add	r6, r6, #1
    9b74:	bl	484c <__ctype_tolower_loc@plt>
    9b78:	ldr	r2, [pc, #420]	; 9d24 <inet_pton6+0x204>
    9b7c:	mov	r5, #0
    9b80:	mov	sl, r5
    9b84:	mov	r9, r5
    9b88:	add	r2, pc, r2
    9b8c:	ldr	r3, [r0]
    9b90:	str	r3, [sp]
    9b94:	mov	r3, r6
    9b98:	ldrb	r1, [r6], #1
    9b9c:	ldr	r0, [sp]
    9ba0:	ldr	fp, [r0, r1, lsl #2]
    9ba4:	cmp	fp, #0
    9ba8:	bne	9bd0 <inet_pton6+0xb0>
    9bac:	cmp	sl, #0
    9bb0:	beq	9cfc <inet_pton6+0x1dc>
    9bb4:	add	r6, r4, #2
    9bb8:	cmp	r7, r6
    9bbc:	lsrcs	r3, r5, #8
    9bc0:	strbcs	r3, [r4]
    9bc4:	strbcs	r5, [r4, #1]
    9bc8:	bcs	9ca8 <inet_pton6+0x188>
    9bcc:	b	9b64 <inet_pton6+0x44>
    9bd0:	mov	r0, r2
    9bd4:	mov	r1, fp
    9bd8:	str	r3, [sp, #12]
    9bdc:	str	r2, [sp, #8]
    9be0:	bl	45d0 <strchr@plt>
    9be4:	ldr	r2, [sp, #8]
    9be8:	ldr	r3, [sp, #12]
    9bec:	cmp	r0, #0
    9bf0:	beq	9c10 <inet_pton6+0xf0>
    9bf4:	sub	r0, r0, r2
    9bf8:	ldr	r1, [pc, #296]	; 9d28 <inet_pton6+0x208>
    9bfc:	orr	r5, r0, r5, lsl #4
    9c00:	cmp	r5, r1
    9c04:	bhi	9b64 <inet_pton6+0x44>
    9c08:	mov	sl, #1
    9c0c:	b	9b98 <inet_pton6+0x78>
    9c10:	cmp	fp, #58	; 0x3a
    9c14:	bne	9c6c <inet_pton6+0x14c>
    9c18:	cmp	sl, #0
    9c1c:	bne	9c34 <inet_pton6+0x114>
    9c20:	cmp	r9, #0
    9c24:	bne	9b64 <inet_pton6+0x44>
    9c28:	mov	r3, r6
    9c2c:	mov	r9, r4
    9c30:	b	9b98 <inet_pton6+0x78>
    9c34:	ldrb	r3, [r6]
    9c38:	cmp	r3, #0
    9c3c:	beq	9b64 <inet_pton6+0x44>
    9c40:	add	r1, r4, #2
    9c44:	cmp	r7, r1
    9c48:	bcc	9b64 <inet_pton6+0x44>
    9c4c:	lsr	r3, r5, #8
    9c50:	strb	r5, [r4, #1]
    9c54:	mov	r5, #0
    9c58:	strb	r3, [r4]
    9c5c:	mov	sl, r5
    9c60:	mov	r3, r6
    9c64:	mov	r4, r1
    9c68:	b	9b98 <inet_pton6+0x78>
    9c6c:	ldrb	r1, [r6]
    9c70:	adds	r1, r1, #0
    9c74:	movne	r1, #1
    9c78:	cmp	fp, #46	; 0x2e
    9c7c:	movne	r1, #0
    9c80:	cmp	r1, #0
    9c84:	beq	9b98 <inet_pton6+0x78>
    9c88:	add	r6, r4, #4
    9c8c:	cmp	r7, r6
    9c90:	bcc	9b64 <inet_pton6+0x44>
    9c94:	mov	r1, r4
    9c98:	mov	r0, r3
    9c9c:	bl	9928 <inet_pton4>
    9ca0:	cmp	r0, #0
    9ca4:	ble	9b64 <inet_pton6+0x44>
    9ca8:	cmp	r9, #0
    9cac:	beq	9d18 <inet_pton6+0x1f8>
    9cb0:	cmp	r6, r7
    9cb4:	sub	r9, r6, r9
    9cb8:	movne	r3, #1
    9cbc:	movne	r2, #0
    9cc0:	beq	9b64 <inet_pton6+0x44>
    9cc4:	cmp	r3, r9
    9cc8:	ble	9d04 <inet_pton6+0x1e4>
    9ccc:	ldr	r2, [sp, #4]
    9cd0:	add	ip, sp, #32
    9cd4:	mov	r3, r8
    9cd8:	add	r2, r2, #8
    9cdc:	ldm	r3!, {r0, r1}
    9ce0:	cmp	r3, ip
    9ce4:	str	r0, [r2, #-8]
    9ce8:	str	r1, [r2, #-4]
    9cec:	mov	r8, r3
    9cf0:	bne	9cd4 <inet_pton6+0x1b4>
    9cf4:	mov	r0, #1
    9cf8:	b	9b68 <inet_pton6+0x48>
    9cfc:	mov	r6, r4
    9d00:	b	9ca8 <inet_pton6+0x188>
    9d04:	ldrb	r1, [r6, #-1]
    9d08:	add	r3, r3, #1
    9d0c:	strb	r1, [r7, #-1]!
    9d10:	strb	r2, [r6, #-1]!
    9d14:	b	9cc4 <inet_pton6+0x1a4>
    9d18:	cmp	r6, r7
    9d1c:	bne	9b64 <inet_pton6+0x44>
    9d20:	b	9ccc <inet_pton6+0x1ac>
    9d24:	.word	0x0000a42f
    9d28:	.word	0x0000ffff

00009d2c <try_kqueue>:
    9d2c:	push	{r4, r5, r6, lr}
    9d30:	bl	10cc8 <rb_init_netio_kqueue>
    9d34:	ldr	r4, [pc, #132]	; 9dc0 <try_kqueue+0x94>
    9d38:	add	r4, pc, r4
    9d3c:	subs	r5, r0, #0
    9d40:	mvnne	r5, #0
    9d44:	bne	9db8 <try_kqueue+0x8c>
    9d48:	ldr	r3, [pc, #116]	; 9dc4 <try_kqueue+0x98>
    9d4c:	ldr	r0, [pc, #116]	; 9dc8 <try_kqueue+0x9c>
    9d50:	ldr	r1, [pc, #116]	; 9dcc <try_kqueue+0xa0>
    9d54:	add	r0, pc, r0
    9d58:	ldr	r3, [r4, r3]
    9d5c:	mov	r2, #25
    9d60:	str	r3, [r0, #28]
    9d64:	ldr	r3, [pc, #100]	; 9dd0 <try_kqueue+0xa4>
    9d68:	add	r1, pc, r1
    9d6c:	add	r0, r0, #56	; 0x38
    9d70:	ldr	r3, [r4, r3]
    9d74:	str	r3, [r0, #-24]	; 0xffffffe8
    9d78:	ldr	r3, [pc, #84]	; 9dd4 <try_kqueue+0xa8>
    9d7c:	ldr	r3, [r4, r3]
    9d80:	str	r3, [r0, #-20]	; 0xffffffec
    9d84:	ldr	r3, [pc, #76]	; 9dd8 <try_kqueue+0xac>
    9d88:	ldr	r3, [r4, r3]
    9d8c:	str	r3, [r0, #-16]
    9d90:	ldr	r3, [pc, #68]	; 9ddc <try_kqueue+0xb0>
    9d94:	ldr	r3, [r4, r3]
    9d98:	str	r3, [r0, #-12]
    9d9c:	ldr	r3, [pc, #60]	; 9de0 <try_kqueue+0xb4>
    9da0:	ldr	r3, [r4, r3]
    9da4:	str	r3, [r0, #-8]
    9da8:	ldr	r3, [pc, #52]	; 9de4 <try_kqueue+0xb8>
    9dac:	ldr	r3, [r4, r3]
    9db0:	str	r3, [r0, #-4]
    9db4:	bl	46c0 <rb_strlcpy@plt>
    9db8:	mov	r0, r5
    9dbc:	pop	{r4, r5, r6, pc}
    9dc0:	.word	0x0001c2c0
    9dc4:	.word	0x000003c0
    9dc8:	.word	0x0002ec54
    9dcc:	.word	0x0000a265
    9dd0:	.word	0x0000037c
    9dd4:	.word	0x0000039c
    9dd8:	.word	0x00000394
    9ddc:	.word	0x000003d8
    9de0:	.word	0x00000398
    9de4:	.word	0x000003e8

00009de8 <try_epoll>:
    9de8:	push	{r4, r5, r6, lr}
    9dec:	bl	f2f4 <rb_init_netio_epoll>
    9df0:	ldr	r4, [pc, #132]	; 9e7c <try_epoll+0x94>
    9df4:	add	r4, pc, r4
    9df8:	subs	r5, r0, #0
    9dfc:	mvnne	r5, #0
    9e00:	bne	9e74 <try_epoll+0x8c>
    9e04:	ldr	r3, [pc, #116]	; 9e80 <try_epoll+0x98>
    9e08:	ldr	r0, [pc, #116]	; 9e84 <try_epoll+0x9c>
    9e0c:	ldr	r1, [pc, #116]	; 9e88 <try_epoll+0xa0>
    9e10:	add	r0, pc, r0
    9e14:	ldr	r3, [r4, r3]
    9e18:	mov	r2, #25
    9e1c:	str	r3, [r0, #28]
    9e20:	ldr	r3, [pc, #100]	; 9e8c <try_epoll+0xa4>
    9e24:	add	r1, pc, r1
    9e28:	add	r0, r0, #56	; 0x38
    9e2c:	ldr	r3, [r4, r3]
    9e30:	str	r3, [r0, #-24]	; 0xffffffe8
    9e34:	ldr	r3, [pc, #84]	; 9e90 <try_epoll+0xa8>
    9e38:	ldr	r3, [r4, r3]
    9e3c:	str	r3, [r0, #-20]	; 0xffffffec
    9e40:	ldr	r3, [pc, #76]	; 9e94 <try_epoll+0xac>
    9e44:	ldr	r3, [r4, r3]
    9e48:	str	r3, [r0, #-16]
    9e4c:	ldr	r3, [pc, #68]	; 9e98 <try_epoll+0xb0>
    9e50:	ldr	r3, [r4, r3]
    9e54:	str	r3, [r0, #-12]
    9e58:	ldr	r3, [pc, #60]	; 9e9c <try_epoll+0xb4>
    9e5c:	ldr	r3, [r4, r3]
    9e60:	str	r3, [r0, #-4]
    9e64:	ldr	r3, [pc, #52]	; 9ea0 <try_epoll+0xb8>
    9e68:	ldr	r3, [r4, r3]
    9e6c:	str	r3, [r0, #-8]
    9e70:	bl	46c0 <rb_strlcpy@plt>
    9e74:	mov	r0, r5
    9e78:	pop	{r4, r5, r6, pc}
    9e7c:	.word	0x0001c204
    9e80:	.word	0x0000036c
    9e84:	.word	0x0002eb98
    9e88:	.word	0x0000a1b0
    9e8c:	.word	0x000003cc
    9e90:	.word	0x00000408
    9e94:	.word	0x00000388
    9e98:	.word	0x000003c8
    9e9c:	.word	0x00000358
    9ea0:	.word	0x0000041c

00009ea4 <try_ports>:
    9ea4:	push	{r4, r5, r6, lr}
    9ea8:	bl	ff24 <rb_init_netio_ports>
    9eac:	ldr	r4, [pc, #132]	; 9f38 <try_ports+0x94>
    9eb0:	add	r4, pc, r4
    9eb4:	subs	r5, r0, #0
    9eb8:	mvnne	r5, #0
    9ebc:	bne	9f30 <try_ports+0x8c>
    9ec0:	ldr	r3, [pc, #116]	; 9f3c <try_ports+0x98>
    9ec4:	ldr	r0, [pc, #116]	; 9f40 <try_ports+0x9c>
    9ec8:	ldr	r1, [pc, #116]	; 9f44 <try_ports+0xa0>
    9ecc:	add	r0, pc, r0
    9ed0:	ldr	r3, [r4, r3]
    9ed4:	mov	r2, #25
    9ed8:	str	r3, [r0, #28]
    9edc:	ldr	r3, [pc, #100]	; 9f48 <try_ports+0xa4>
    9ee0:	add	r1, pc, r1
    9ee4:	add	r0, r0, #56	; 0x38
    9ee8:	ldr	r3, [r4, r3]
    9eec:	str	r3, [r0, #-24]	; 0xffffffe8
    9ef0:	ldr	r3, [pc, #84]	; 9f4c <try_ports+0xa8>
    9ef4:	ldr	r3, [r4, r3]
    9ef8:	str	r3, [r0, #-20]	; 0xffffffec
    9efc:	ldr	r3, [pc, #76]	; 9f50 <try_ports+0xac>
    9f00:	ldr	r3, [r4, r3]
    9f04:	str	r3, [r0, #-16]
    9f08:	ldr	r3, [pc, #68]	; 9f54 <try_ports+0xb0>
    9f0c:	ldr	r3, [r4, r3]
    9f10:	str	r3, [r0, #-12]
    9f14:	ldr	r3, [pc, #60]	; 9f58 <try_ports+0xb4>
    9f18:	ldr	r3, [r4, r3]
    9f1c:	str	r3, [r0, #-8]
    9f20:	ldr	r3, [pc, #52]	; 9f5c <try_ports+0xb8>
    9f24:	ldr	r3, [r4, r3]
    9f28:	str	r3, [r0, #-4]
    9f2c:	bl	46c0 <rb_strlcpy@plt>
    9f30:	mov	r0, r5
    9f34:	pop	{r4, r5, r6, pc}
    9f38:	.word	0x0001c148
    9f3c:	.word	0x000003ec
    9f40:	.word	0x0002eadc
    9f44:	.word	0x0000a0fa
    9f48:	.word	0x0000038c
    9f4c:	.word	0x00000414
    9f50:	.word	0x00000354
    9f54:	.word	0x00000410
    9f58:	.word	0x00000368
    9f5c:	.word	0x000003e4

00009f60 <try_devpoll>:
    9f60:	push	{r4, r5, r6, lr}
    9f64:	bl	f1e8 <rb_init_netio_devpoll>
    9f68:	ldr	r5, [pc, #108]	; 9fdc <try_devpoll+0x7c>
    9f6c:	add	r5, pc, r5
    9f70:	subs	r4, r0, #0
    9f74:	mvnne	r4, #0
    9f78:	bne	9fd4 <try_devpoll+0x74>
    9f7c:	ldr	r3, [pc, #92]	; 9fe0 <try_devpoll+0x80>
    9f80:	ldr	r0, [pc, #92]	; 9fe4 <try_devpoll+0x84>
    9f84:	ldr	r1, [pc, #92]	; 9fe8 <try_devpoll+0x88>
    9f88:	add	r0, pc, r0
    9f8c:	ldr	r3, [r5, r3]
    9f90:	mov	r2, #25
    9f94:	str	r3, [r0, #28]
    9f98:	ldr	r3, [pc, #76]	; 9fec <try_devpoll+0x8c>
    9f9c:	add	r1, pc, r1
    9fa0:	add	r0, r0, #56	; 0x38
    9fa4:	ldr	r3, [r5, r3]
    9fa8:	str	r3, [r0, #-24]	; 0xffffffe8
    9fac:	ldr	r3, [pc, #60]	; 9ff0 <try_devpoll+0x90>
    9fb0:	ldr	r3, [r5, r3]
    9fb4:	str	r4, [r0, #-16]
    9fb8:	str	r3, [r0, #-20]	; 0xffffffec
    9fbc:	ldr	r3, [pc, #48]	; 9ff4 <try_devpoll+0x94>
    9fc0:	str	r4, [r0, #-12]
    9fc4:	add	r3, pc, r3
    9fc8:	str	r4, [r0, #-8]
    9fcc:	str	r3, [r0, #-4]
    9fd0:	bl	46c0 <rb_strlcpy@plt>
    9fd4:	mov	r0, r4
    9fd8:	pop	{r4, r5, r6, pc}
    9fdc:	.word	0x0001c08c
    9fe0:	.word	0x000003b4
    9fe4:	.word	0x0002ea20
    9fe8:	.word	0x0000a044
    9fec:	.word	0x000003f4
    9ff0:	.word	0x000003b8
    9ff4:	.word	0xfffffa18

00009ff8 <try_sigio>:
    9ff8:	push	{r4, r5, r6, lr}
    9ffc:	bl	ffdc <rb_init_netio_sigio>
    a000:	ldr	r4, [pc, #132]	; a08c <try_sigio+0x94>
    a004:	add	r4, pc, r4
    a008:	subs	r5, r0, #0
    a00c:	mvnne	r5, #0
    a010:	bne	a084 <try_sigio+0x8c>
    a014:	ldr	r3, [pc, #116]	; a090 <try_sigio+0x98>
    a018:	ldr	r0, [pc, #116]	; a094 <try_sigio+0x9c>
    a01c:	ldr	r1, [pc, #116]	; a098 <try_sigio+0xa0>
    a020:	add	r0, pc, r0
    a024:	ldr	r3, [r4, r3]
    a028:	mov	r2, #25
    a02c:	str	r3, [r0, #28]
    a030:	ldr	r3, [pc, #100]	; a09c <try_sigio+0xa4>
    a034:	add	r1, pc, r1
    a038:	add	r0, r0, #56	; 0x38
    a03c:	ldr	r3, [r4, r3]
    a040:	str	r3, [r0, #-24]	; 0xffffffe8
    a044:	ldr	r3, [pc, #84]	; a0a0 <try_sigio+0xa8>
    a048:	ldr	r3, [r4, r3]
    a04c:	str	r3, [r0, #-20]	; 0xffffffec
    a050:	ldr	r3, [pc, #76]	; a0a4 <try_sigio+0xac>
    a054:	ldr	r3, [r4, r3]
    a058:	str	r3, [r0, #-16]
    a05c:	ldr	r3, [pc, #68]	; a0a8 <try_sigio+0xb0>
    a060:	ldr	r3, [r4, r3]
    a064:	str	r3, [r0, #-12]
    a068:	ldr	r3, [pc, #60]	; a0ac <try_sigio+0xb4>
    a06c:	ldr	r3, [r4, r3]
    a070:	str	r3, [r0, #-4]
    a074:	ldr	r3, [pc, #52]	; a0b0 <try_sigio+0xb8>
    a078:	ldr	r3, [r4, r3]
    a07c:	str	r3, [r0, #-8]
    a080:	bl	46c0 <rb_strlcpy@plt>
    a084:	mov	r0, r5
    a088:	pop	{r4, r5, r6, pc}
    a08c:	.word	0x0001bff4
    a090:	.word	0x000003d0
    a094:	.word	0x0002e988
    a098:	.word	0x00009fb4
    a09c:	.word	0x00000370
    a0a0:	.word	0x000003e0
    a0a4:	.word	0x00000378
    a0a8:	.word	0x0000035c
    a0ac:	.word	0x000003dc
    a0b0:	.word	0x000003fc

0000a0b4 <try_poll>:
    a0b4:	push	{r4, r5, r6, lr}
    a0b8:	bl	fb40 <rb_init_netio_poll>
    a0bc:	ldr	r5, [pc, #108]	; a130 <try_poll+0x7c>
    a0c0:	add	r5, pc, r5
    a0c4:	subs	r4, r0, #0
    a0c8:	mvnne	r4, #0
    a0cc:	bne	a128 <try_poll+0x74>
    a0d0:	ldr	r3, [pc, #92]	; a134 <try_poll+0x80>
    a0d4:	ldr	r0, [pc, #92]	; a138 <try_poll+0x84>
    a0d8:	ldr	r1, [pc, #92]	; a13c <try_poll+0x88>
    a0dc:	add	r0, pc, r0
    a0e0:	ldr	r3, [r5, r3]
    a0e4:	mov	r2, #25
    a0e8:	str	r3, [r0, #28]
    a0ec:	ldr	r3, [pc, #76]	; a140 <try_poll+0x8c>
    a0f0:	add	r1, pc, r1
    a0f4:	add	r0, r0, #56	; 0x38
    a0f8:	ldr	r3, [r5, r3]
    a0fc:	str	r3, [r0, #-24]	; 0xffffffe8
    a100:	ldr	r3, [pc, #60]	; a144 <try_poll+0x90>
    a104:	ldr	r3, [r5, r3]
    a108:	str	r4, [r0, #-16]
    a10c:	str	r3, [r0, #-20]	; 0xffffffec
    a110:	ldr	r3, [pc, #48]	; a148 <try_poll+0x94>
    a114:	str	r4, [r0, #-12]
    a118:	add	r3, pc, r3
    a11c:	str	r4, [r0, #-8]
    a120:	str	r3, [r0, #-4]
    a124:	bl	46c0 <rb_strlcpy@plt>
    a128:	mov	r0, r4
    a12c:	pop	{r4, r5, r6, pc}
    a130:	.word	0x0001bf38
    a134:	.word	0x000003f0
    a138:	.word	0x0002e8cc
    a13c:	.word	0x00009ee5
    a140:	.word	0x00000400
    a144:	.word	0x00000384
    a148:	.word	0xfffff8c4

0000a14c <try_win32>:
    a14c:	push	{r4, r5, r6, lr}
    a150:	bl	4fd0 <rb_init_netio_win32>
    a154:	ldr	r5, [pc, #108]	; a1c8 <try_win32+0x7c>
    a158:	add	r5, pc, r5
    a15c:	subs	r4, r0, #0
    a160:	mvnne	r4, #0
    a164:	bne	a1c0 <try_win32+0x74>
    a168:	ldr	r3, [pc, #92]	; a1cc <try_win32+0x80>
    a16c:	ldr	r0, [pc, #92]	; a1d0 <try_win32+0x84>
    a170:	ldr	r1, [pc, #92]	; a1d4 <try_win32+0x88>
    a174:	add	r0, pc, r0
    a178:	ldr	r3, [r5, r3]
    a17c:	mov	r2, #25
    a180:	str	r3, [r0, #28]
    a184:	ldr	r3, [pc, #76]	; a1d8 <try_win32+0x8c>
    a188:	add	r1, pc, r1
    a18c:	add	r0, r0, #56	; 0x38
    a190:	ldr	r3, [r5, r3]
    a194:	str	r3, [r0, #-24]	; 0xffffffe8
    a198:	ldr	r3, [pc, #60]	; a1dc <try_win32+0x90>
    a19c:	ldr	r3, [r5, r3]
    a1a0:	str	r4, [r0, #-16]
    a1a4:	str	r3, [r0, #-20]	; 0xffffffec
    a1a8:	ldr	r3, [pc, #48]	; a1e0 <try_win32+0x94>
    a1ac:	str	r4, [r0, #-12]
    a1b0:	add	r3, pc, r3
    a1b4:	str	r4, [r0, #-8]
    a1b8:	str	r3, [r0, #-4]
    a1bc:	bl	46c0 <rb_strlcpy@plt>
    a1c0:	mov	r0, r4
    a1c4:	pop	{r4, r5, r6, pc}
    a1c8:	.word	0x0001bea0
    a1cc:	.word	0x000003a0
    a1d0:	.word	0x0002e834
    a1d4:	.word	0x00009e66
    a1d8:	.word	0x000003ac
    a1dc:	.word	0x00000374
    a1e0:	.word	0xfffff82c

0000a1e4 <try_select>:
    a1e4:	push	{r4, r5, r6, lr}
    a1e8:	bl	109e4 <rb_init_netio_select>
    a1ec:	ldr	r5, [pc, #108]	; a260 <try_select+0x7c>
    a1f0:	add	r5, pc, r5
    a1f4:	subs	r4, r0, #0
    a1f8:	mvnne	r4, #0
    a1fc:	bne	a258 <try_select+0x74>
    a200:	ldr	r3, [pc, #92]	; a264 <try_select+0x80>
    a204:	ldr	r0, [pc, #92]	; a268 <try_select+0x84>
    a208:	ldr	r1, [pc, #92]	; a26c <try_select+0x88>
    a20c:	add	r0, pc, r0
    a210:	ldr	r3, [r5, r3]
    a214:	mov	r2, #25
    a218:	str	r3, [r0, #28]
    a21c:	ldr	r3, [pc, #76]	; a270 <try_select+0x8c>
    a220:	add	r1, pc, r1
    a224:	add	r0, r0, #56	; 0x38
    a228:	ldr	r3, [r5, r3]
    a22c:	str	r3, [r0, #-24]	; 0xffffffe8
    a230:	ldr	r3, [pc, #60]	; a274 <try_select+0x90>
    a234:	ldr	r3, [r5, r3]
    a238:	str	r4, [r0, #-16]
    a23c:	str	r3, [r0, #-20]	; 0xffffffec
    a240:	ldr	r3, [pc, #48]	; a278 <try_select+0x94>
    a244:	str	r4, [r0, #-12]
    a248:	add	r3, pc, r3
    a24c:	str	r4, [r0, #-8]
    a250:	str	r3, [r0, #-4]
    a254:	bl	46c0 <rb_strlcpy@plt>
    a258:	mov	r0, r4
    a25c:	pop	{r4, r5, r6, pc}
    a260:	.word	0x0001be08
    a264:	.word	0x00000424
    a268:	.word	0x0002e79c
    a26c:	.word	0x00009dd4
    a270:	.word	0x000003bc
    a274:	.word	0x00000404
    a278:	.word	0xfffff794

0000a27c <rb_getmaxconnect>:
    a27c:	ldr	r3, [pc, #16]	; a294 <rb_getmaxconnect+0x18>
    a280:	ldr	r2, [pc, #16]	; a298 <rb_getmaxconnect+0x1c>
    a284:	add	r3, pc, r3
    a288:	ldr	r3, [r3, r2]
    a28c:	ldr	r0, [r3]
    a290:	bx	lr
    a294:	.word	0x0001bd74
    a298:	.word	0x000003a4

0000a29c <rb_set_buffers>:
    a29c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a2a0:	subs	r4, r0, #0
    a2a4:	str	r1, [sp, #12]
    a2a8:	bne	a2b8 <rb_set_buffers+0x1c>
    a2ac:	mov	r0, #0
    a2b0:	add	sp, sp, #16
    a2b4:	pop	{r4, r5, r6, pc}
    a2b8:	add	r5, sp, #12
    a2bc:	mov	r6, #4
    a2c0:	str	r6, [sp]
    a2c4:	mov	r3, r5
    a2c8:	mov	r2, #8
    a2cc:	mov	r1, #1
    a2d0:	ldr	r0, [r4, #12]
    a2d4:	bl	4ccc <setsockopt@plt>
    a2d8:	cmp	r0, #0
    a2dc:	bne	a2ac <rb_set_buffers+0x10>
    a2e0:	str	r6, [sp]
    a2e4:	mov	r3, r5
    a2e8:	mov	r2, #7
    a2ec:	mov	r1, #1
    a2f0:	ldr	r0, [r4, #12]
    a2f4:	bl	4ccc <setsockopt@plt>
    a2f8:	clz	r0, r0
    a2fc:	lsr	r0, r0, #5
    a300:	b	a2b0 <rb_set_buffers+0x14>

0000a304 <rb_settimeout>:
    a304:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a308:	subs	r5, r0, #0
    a30c:	ldr	r8, [pc, #280]	; a42c <rb_settimeout+0x128>
    a310:	add	r8, pc, r8
    a314:	beq	a370 <rb_settimeout+0x6c>
    a318:	cmp	r2, #0
    a31c:	mov	r9, r3
    a320:	mov	r6, r2
    a324:	mov	r7, r1
    a328:	ldr	r4, [r5, #44]	; 0x2c
    a32c:	bne	a378 <rb_settimeout+0x74>
    a330:	cmp	r4, #0
    a334:	beq	a370 <rb_settimeout+0x6c>
    a338:	ldr	r7, [pc, #240]	; a430 <rb_settimeout+0x12c>
    a33c:	add	r0, r4, #4
    a340:	add	r7, pc, r7
    a344:	add	r1, r7, #16
    a348:	bl	97e8 <rb_dlinkDelete>
    a34c:	mov	r0, r4
    a350:	bl	9a58 <rb_free>
    a354:	ldr	r4, [r7, #24]
    a358:	str	r6, [r5, #44]	; 0x2c
    a35c:	cmp	r4, #0
    a360:	bne	a370 <rb_settimeout+0x6c>
    a364:	ldr	r0, [r7, #84]	; 0x54
    a368:	bl	44bc <rb_event_delete@plt>
    a36c:	str	r4, [r7, #84]	; 0x54
    a370:	add	sp, sp, #12
    a374:	pop	{r4, r5, r6, r7, r8, r9, pc}
    a378:	cmp	r4, #0
    a37c:	bne	a390 <rb_settimeout+0x8c>
    a380:	mov	r0, #28
    a384:	bl	9b04 <rb_malloc>
    a388:	mov	r4, r0
    a38c:	str	r0, [r5, #44]	; 0x2c
    a390:	str	r5, [r4]
    a394:	bl	4810 <rb_current_time@plt>
    a398:	mov	r2, #0
    a39c:	str	r2, [r4, #8]
    a3a0:	ldr	r2, [pc, #140]	; a434 <rb_settimeout+0x130>
    a3a4:	add	r3, r4, #4
    a3a8:	add	r2, pc, r2
    a3ac:	str	r6, [r4, #20]
    a3b0:	ldr	r1, [r2, #16]
    a3b4:	str	r9, [r4, #24]
    a3b8:	cmp	r1, #0
    a3bc:	str	r4, [r4, #4]
    a3c0:	str	r1, [r4, #12]
    a3c4:	add	r0, r0, r7
    a3c8:	str	r0, [r4, #16]
    a3cc:	strne	r3, [r1, #4]
    a3d0:	bne	a3e0 <rb_settimeout+0xdc>
    a3d4:	ldr	r1, [r2, #20]
    a3d8:	cmp	r1, #0
    a3dc:	streq	r3, [r2, #20]
    a3e0:	ldr	r4, [pc, #80]	; a438 <rb_settimeout+0x134>
    a3e4:	add	r4, pc, r4
    a3e8:	str	r3, [r4, #16]
    a3ec:	ldr	r2, [r4, #84]	; 0x54
    a3f0:	ldr	r3, [r4, #24]
    a3f4:	cmp	r2, #0
    a3f8:	add	r3, r3, #1
    a3fc:	str	r3, [r4, #24]
    a400:	bne	a370 <rb_settimeout+0x6c>
    a404:	ldr	r3, [pc, #48]	; a43c <rb_settimeout+0x138>
    a408:	ldr	r0, [pc, #48]	; a440 <rb_settimeout+0x13c>
    a40c:	ldr	r3, [r8, r3]
    a410:	add	r0, pc, r0
    a414:	str	r3, [sp, #4]
    a418:	ldr	r1, [sp, #4]
    a41c:	mov	r3, #5
    a420:	bl	4b34 <rb_event_add@plt>
    a424:	str	r0, [r4, #84]	; 0x54
    a428:	b	a370 <rb_settimeout+0x6c>
    a42c:	.word	0x0001bce8
    a430:	.word	0x0002e668
    a434:	.word	0x0002e600
    a438:	.word	0x0002e5c4
    a43c:	.word	0x00000350
    a440:	.word	0x00009beb

0000a444 <rb_sctp_bindx>:
    a444:	mvn	r0, #0
    a448:	bx	lr

0000a44c <rb_inet_get_proto>:
    a44c:	mov	r0, #6
    a450:	bx	lr

0000a454 <rb_connect_callback>:
    a454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a458:	mov	r4, r0
    a45c:	mov	r7, r1
    a460:	bl	4d14 <__errno_location@plt>
    a464:	cmp	r4, #0
    a468:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a46c:	ldr	r2, [r4, #48]	; 0x30
    a470:	cmp	r2, #0
    a474:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a478:	ldr	r5, [r2, #260]	; 0x104
    a47c:	cmp	r5, #0
    a480:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a484:	ldr	r9, [r0]
    a488:	mov	r3, #0
    a48c:	ldr	r8, [r2, #264]	; 0x108
    a490:	mov	r6, r0
    a494:	str	r3, [r2, #260]	; 0x104
    a498:	mov	r1, r3
    a49c:	mov	r2, r3
    a4a0:	mov	r0, r4
    a4a4:	bl	4408 <rb_settimeout@plt>
    a4a8:	str	r9, [r6]
    a4ac:	mov	r2, r8
    a4b0:	mov	r1, r7
    a4b4:	mov	r0, r4
    a4b8:	mov	r3, r5
    a4bc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a4c0:	bx	r3

0000a4c4 <rb_connect_outcome>:
    a4c4:	push	{r4, r5, lr}
    a4c8:	sub	sp, sp, #20
    a4cc:	mov	r3, #0
    a4d0:	mov	r2, #4
    a4d4:	subs	r4, r0, #0
    a4d8:	str	r3, [sp, #8]
    a4dc:	str	r2, [sp, #12]
    a4e0:	beq	a540 <rb_connect_outcome+0x7c>
    a4e4:	ldr	r3, [r4, #48]	; 0x30
    a4e8:	cmp	r3, #0
    a4ec:	beq	a540 <rb_connect_outcome+0x7c>
    a4f0:	ldr	r3, [r3, #260]	; 0x104
    a4f4:	cmp	r3, #0
    a4f8:	beq	a540 <rb_connect_outcome+0x7c>
    a4fc:	add	r3, sp, #12
    a500:	str	r3, [sp]
    a504:	mov	r1, #1
    a508:	add	r3, sp, #8
    a50c:	ldr	r0, [r4, #12]
    a510:	bl	4ca8 <getsockopt@plt>
    a514:	cmp	r0, #0
    a518:	blt	a534 <rb_connect_outcome+0x70>
    a51c:	ldr	r5, [sp, #8]
    a520:	cmp	r5, #0
    a524:	moveq	r1, r5
    a528:	beq	a538 <rb_connect_outcome+0x74>
    a52c:	bl	4d14 <__errno_location@plt>
    a530:	str	r5, [r0]
    a534:	mov	r1, #4
    a538:	mov	r0, r4
    a53c:	bl	a454 <rb_connect_callback>
    a540:	add	sp, sp, #20
    a544:	pop	{r4, r5, pc}

0000a548 <rb_connect_timeout>:
    a548:	mov	r1, #3
    a54c:	b	a454 <rb_connect_callback>

0000a550 <rb_connect_sctp>:
    a550:	mov	r1, #4
    a554:	b	a454 <rb_connect_callback>

0000a558 <rb_connect_sockaddr>:
    a558:	cmp	r0, #0
    a55c:	bxeq	lr
    a560:	mov	r3, r0
    a564:	mov	r0, r1
    a568:	ldr	r1, [r3, #48]	; 0x30
    a56c:	push	{r4, lr}
    a570:	add	r1, r1, #128	; 0x80
    a574:	bl	4828 <memcpy@plt>
    a578:	mov	r0, #1
    a57c:	pop	{r4, pc}

0000a580 <rb_errstr>:
    a580:	cmp	r0, #6
    a584:	bhi	a59c <rb_errstr+0x1c>
    a588:	ldr	r3, [pc, #24]	; a5a8 <rb_errstr+0x28>
    a58c:	add	r3, pc, r3
    a590:	add	r0, r3, r0, lsl #2
    a594:	ldr	r0, [r0, #1024]	; 0x400
    a598:	bx	lr
    a59c:	ldr	r0, [pc, #8]	; a5ac <rb_errstr+0x2c>
    a5a0:	add	r0, pc, r0
    a5a4:	bx	lr
    a5a8:	.word	0x0001b4b0
    a5ac:	.word	0x00009a6c

0000a5b0 <rb_listen>:
    a5b0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a5b4:	mov	r4, r0
    a5b8:	ldrb	r3, [r0, #17]
    a5bc:	mov	r5, r2
    a5c0:	str	r1, [sp, #12]
    a5c4:	bic	r3, r3, #127	; 0x7f
    a5c8:	orr	r3, r3, #20
    a5cc:	strb	r3, [r0, #17]
    a5d0:	ldr	r0, [r0, #12]
    a5d4:	bl	4600 <listen@plt>
    a5d8:	adds	r5, r5, #0
    a5dc:	movne	r5, #1
    a5e0:	cmp	r0, #0
    a5e4:	movne	r5, #0
    a5e8:	cmp	r5, #0
    a5ec:	mov	r6, r0
    a5f0:	beq	a610 <rb_listen+0x60>
    a5f4:	mov	r3, #4
    a5f8:	str	r3, [sp]
    a5fc:	mov	r2, #9
    a600:	add	r3, sp, #12
    a604:	mov	r1, #6
    a608:	ldr	r0, [r4, #12]
    a60c:	bl	4ccc <setsockopt@plt>
    a610:	mov	r0, r6
    a614:	add	sp, sp, #16
    a618:	pop	{r4, r5, r6, pc}

0000a61c <rb_fdlist_init>:
    a61c:	push	{r4, r5, r6, lr}
    a620:	mov	r6, r2
    a624:	ldr	r2, [pc, #124]	; a6a8 <rb_fdlist_init+0x8c>
    a628:	ldr	r3, [pc, #124]	; a6ac <rb_fdlist_init+0x90>
    a62c:	add	r2, pc, r2
    a630:	add	r3, pc, r3
    a634:	ldr	r2, [r2, #88]	; 0x58
    a638:	cmp	r2, #0
    a63c:	bne	a668 <rb_fdlist_init+0x4c>
    a640:	ldr	r2, [pc, #104]	; a6b0 <rb_fdlist_init+0x94>
    a644:	cmp	r0, #0
    a648:	movne	r4, #3
    a64c:	ldr	r5, [r3, r2]
    a650:	str	r1, [r5]
    a654:	bne	a698 <rb_fdlist_init+0x7c>
    a658:	ldr	r3, [pc, #84]	; a6b4 <rb_fdlist_init+0x98>
    a65c:	mov	r2, #1
    a660:	add	r3, pc, r3
    a664:	str	r2, [r3, #88]	; 0x58
    a668:	ldr	r2, [pc, #72]	; a6b8 <rb_fdlist_init+0x9c>
    a66c:	mov	r1, r6
    a670:	add	r2, pc, r2
    a674:	mov	r0, #68	; 0x44
    a678:	bl	4ae0 <rb_bh_create@plt>
    a67c:	ldr	r3, [pc, #56]	; a6bc <rb_fdlist_init+0xa0>
    a680:	add	r3, pc, r3
    a684:	str	r0, [r3, #92]	; 0x5c
    a688:	pop	{r4, r5, r6, pc}
    a68c:	mov	r0, r4
    a690:	bl	496c <close@plt>
    a694:	add	r4, r4, #1
    a698:	ldr	r3, [r5]
    a69c:	cmp	r4, r3
    a6a0:	blt	a68c <rb_fdlist_init+0x70>
    a6a4:	b	a658 <rb_fdlist_init+0x3c>
    a6a8:	.word	0x0002e37c
    a6ac:	.word	0x0001b9c8
    a6b0:	.word	0x000003a4
    a6b4:	.word	0x0002e348
    a6b8:	.word	0x000099b2
    a6bc:	.word	0x0002e328

0000a6c0 <rb_open>:
    a6c0:	push	{r4, r5, r6, r7, r8, lr}
    a6c4:	mov	r5, r0
    a6c8:	mov	r7, r1
    a6cc:	mov	r6, r2
    a6d0:	bl	99ec <rb_find_fd>
    a6d4:	ldr	r8, [pc, #276]	; a7f0 <rb_open+0x130>
    a6d8:	add	r8, pc, r8
    a6dc:	subs	r4, r0, #0
    a6e0:	bne	a764 <rb_open+0xa4>
    a6e4:	ldr	r3, [pc, #264]	; a7f4 <rb_open+0x134>
    a6e8:	add	r3, pc, r3
    a6ec:	ldr	r0, [r3, #92]	; 0x5c
    a6f0:	bl	4984 <rb_bh_alloc@plt>
    a6f4:	ldr	r3, [pc, #252]	; a7f8 <rb_open+0x138>
    a6f8:	mov	r2, #12
    a6fc:	str	r5, [r0, #12]
    a700:	ldr	r1, [r8, r3]
    a704:	asr	r3, r5, #24
    a708:	eor	r3, r3, r5, asr #12
    a70c:	eor	r3, r3, r5
    a710:	mov	r4, r0
    a714:	lsl	r3, r3, #20
    a718:	ldr	r1, [r1]
    a71c:	lsr	r3, r3, #20
    a720:	str	r0, [r4]
    a724:	mul	r3, r2, r3
    a728:	mov	r0, #0
    a72c:	str	r0, [r4, #4]
    a730:	ldr	r0, [r1, r3]
    a734:	add	r2, r1, r3
    a738:	cmp	r0, #0
    a73c:	str	r0, [r4, #8]
    a740:	strne	r4, [r0, #4]
    a744:	bne	a754 <rb_open+0x94>
    a748:	ldr	r0, [r2, #4]
    a74c:	cmp	r0, #0
    a750:	streq	r4, [r2, #4]
    a754:	str	r4, [r1, r3]
    a758:	ldr	r3, [r2, #8]
    a75c:	add	r3, r3, #1
    a760:	str	r3, [r2, #8]
    a764:	ldrb	r3, [r4, #16]
    a768:	tst	r3, #1
    a76c:	beq	a79c <rb_open+0xdc>
    a770:	ldr	r2, [r4, #24]
    a774:	cmp	r2, #0
    a778:	ldreq	r2, [pc, #124]	; a7fc <rb_open+0x13c>
    a77c:	addeq	r2, pc, r2
    a780:	ldr	r0, [pc, #120]	; a800 <rb_open+0x140>
    a784:	mov	r1, r5
    a788:	add	r0, pc, r0
    a78c:	bl	4948 <rb_lib_log@plt>
    a790:	mov	r4, #0
    a794:	mov	r0, r4
    a798:	pop	{r4, r5, r6, r7, r8, pc}
    a79c:	orr	r3, r3, #1
    a7a0:	cmp	r6, #0
    a7a4:	str	r5, [r4, #12]
    a7a8:	strb	r7, [r4, #17]
    a7ac:	strb	r3, [r4, #16]
    a7b0:	beq	a7d8 <rb_open+0x118>
    a7b4:	mov	r0, #128	; 0x80
    a7b8:	bl	49d8 <malloc@plt>
    a7bc:	subs	r5, r0, #0
    a7c0:	bne	a7c8 <rb_open+0x108>
    a7c4:	bl	49b4 <rb_outofmemory@plt>
    a7c8:	mov	r2, #128	; 0x80
    a7cc:	mov	r1, r6
    a7d0:	bl	46c0 <rb_strlcpy@plt>
    a7d4:	str	r5, [r4, #24]
    a7d8:	ldr	r2, [pc, #36]	; a804 <rb_open+0x144>
    a7dc:	add	r2, pc, r2
    a7e0:	ldr	r3, [r2, #96]	; 0x60
    a7e4:	add	r3, r3, #1
    a7e8:	str	r3, [r2, #96]	; 0x60
    a7ec:	b	a794 <rb_open+0xd4>
    a7f0:	.word	0x0001b920
    a7f4:	.word	0x0002e2c0
    a7f8:	.word	0x000003c4
    a7fc:	.word	0x000097fb
    a800:	.word	0x000098a8
    a804:	.word	0x0002e1cc

0000a808 <rb_dump_fd>:
    a808:	ldr	r3, [pc, #136]	; a898 <rb_dump_fd+0x90>
    a80c:	ldr	r2, [pc, #136]	; a89c <rb_dump_fd+0x94>
    a810:	add	r3, pc, r3
    a814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a818:	mov	r6, r0
    a81c:	ldr	r9, [pc, #124]	; a8a0 <rb_dump_fd+0x98>
    a820:	ldr	r8, [r3, r2]
    a824:	mov	r7, r1
    a828:	mov	r4, #0
    a82c:	add	r9, pc, r9
    a830:	ldr	r3, [r8]
    a834:	add	r2, r3, r4
    a838:	ldr	r2, [r2, #8]
    a83c:	cmp	r2, #0
    a840:	bne	a854 <rb_dump_fd+0x4c>
    a844:	add	r4, r4, #12
    a848:	cmp	r4, #49152	; 0xc000
    a84c:	bne	a830 <rb_dump_fd+0x28>
    a850:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a854:	ldr	r5, [r3, r4]
    a858:	cmp	r5, #0
    a85c:	beq	a844 <rb_dump_fd+0x3c>
    a860:	ldr	r3, [r5]
    a864:	cmp	r3, #0
    a868:	beq	a890 <rb_dump_fd+0x88>
    a86c:	ldrb	r2, [r3, #16]
    a870:	tst	r2, #1
    a874:	beq	a890 <rb_dump_fd+0x88>
    a878:	ldr	r1, [r3, #24]
    a87c:	ldr	r0, [r3, #12]
    a880:	cmp	r1, #0
    a884:	moveq	r1, r9
    a888:	mov	r2, r7
    a88c:	blx	r6
    a890:	ldr	r5, [r5, #8]
    a894:	b	a858 <rb_dump_fd+0x50>
    a898:	.word	0x0001b7e8
    a89c:	.word	0x000003c4
    a8a0:	.word	0x00009a2f

0000a8a4 <rb_note>:
    a8a4:	push	{r4, r5, r6, lr}
    a8a8:	subs	r4, r0, #0
    a8ac:	popeq	{r4, r5, r6, pc}
    a8b0:	ldr	r0, [r4, #24]
    a8b4:	mov	r5, r1
    a8b8:	bl	9a58 <rb_free>
    a8bc:	mov	r0, #128	; 0x80
    a8c0:	bl	49d8 <malloc@plt>
    a8c4:	subs	r6, r0, #0
    a8c8:	bne	a8d0 <rb_note+0x2c>
    a8cc:	bl	49b4 <rb_outofmemory@plt>
    a8d0:	mov	r2, #128	; 0x80
    a8d4:	mov	r1, r5
    a8d8:	bl	46c0 <rb_strlcpy@plt>
    a8dc:	str	r6, [r4, #24]
    a8e0:	pop	{r4, r5, r6, pc}

0000a8e4 <rb_set_type>:
    a8e4:	strb	r1, [r0, #17]
    a8e8:	bx	lr

0000a8ec <rb_get_type>:
    a8ec:	ldrb	r0, [r0, #17]
    a8f0:	bx	lr

0000a8f4 <rb_fd_ssl>:
    a8f4:	cmp	r0, #0
    a8f8:	ldrbne	r0, [r0, #17]
    a8fc:	lsrne	r0, r0, #5
    a900:	andne	r0, r0, #1
    a904:	bx	lr

0000a908 <rb_get_fd>:
    a908:	cmp	r0, #0
    a90c:	ldrne	r0, [r0, #12]
    a910:	mvneq	r0, #0
    a914:	bx	lr

0000a918 <rb_get_sockerr>:
    a918:	push	{r4, r5, r6, r7, lr}
    a91c:	sub	sp, sp, #20
    a920:	mov	r3, #0
    a924:	str	r3, [sp, #8]
    a928:	ldrb	r3, [r0, #17]
    a92c:	mov	r6, #4
    a930:	str	r6, [sp, #12]
    a934:	tst	r3, #4
    a938:	bne	a950 <rb_get_sockerr+0x38>
    a93c:	bl	4d14 <__errno_location@plt>
    a940:	ldr	r4, [r0]
    a944:	mov	r0, r4
    a948:	add	sp, sp, #20
    a94c:	pop	{r4, r5, r6, r7, pc}
    a950:	mov	r7, r0
    a954:	bl	4d14 <__errno_location@plt>
    a958:	ldr	r4, [r0]
    a95c:	mov	r5, r0
    a960:	mov	r0, r7
    a964:	bl	4504 <rb_get_fd@plt>
    a968:	add	r3, sp, #12
    a96c:	str	r3, [sp]
    a970:	mov	r2, r6
    a974:	add	r3, sp, #8
    a978:	mov	r1, #1
    a97c:	bl	4ca8 <getsockopt@plt>
    a980:	cmp	r0, #0
    a984:	bne	a994 <rb_get_sockerr+0x7c>
    a988:	ldr	r3, [sp, #8]
    a98c:	cmp	r3, #0
    a990:	movne	r4, r3
    a994:	str	r4, [r5]
    a998:	b	a944 <rb_get_sockerr+0x2c>

0000a99c <rb_bind>:
    a99c:	push	{r4, r5, r6, r7, lr}
    a9a0:	sub	sp, sp, #20
    a9a4:	add	r3, sp, #16
    a9a8:	mov	r2, #4
    a9ac:	mov	r7, r1
    a9b0:	mov	r1, #1
    a9b4:	mov	r4, r0
    a9b8:	str	r1, [r3, #-4]!
    a9bc:	str	r2, [sp]
    a9c0:	mov	r2, #2
    a9c4:	ldr	r0, [r0, #12]
    a9c8:	bl	4ccc <setsockopt@plt>
    a9cc:	ldr	r6, [r4, #12]
    a9d0:	subs	r5, r0, #0
    a9d4:	beq	aa04 <rb_bind+0x68>
    a9d8:	mov	r0, r4
    a9dc:	bl	4abc <rb_get_sockerr@plt>
    a9e0:	bl	43c0 <strerror@plt>
    a9e4:	mov	r1, r6
    a9e8:	mov	r2, r0
    a9ec:	ldr	r0, [pc, #52]	; aa28 <rb_bind+0x8c>
    a9f0:	add	r0, pc, r0
    a9f4:	bl	4948 <rb_lib_log@plt>
    a9f8:	mov	r0, r5
    a9fc:	add	sp, sp, #20
    aa00:	pop	{r4, r5, r6, r7, pc}
    aa04:	ldrh	r2, [r7]
    aa08:	mov	r1, r7
    aa0c:	mov	r0, r6
    aa10:	cmp	r2, #2
    aa14:	moveq	r2, #16
    aa18:	movne	r2, #28
    aa1c:	bl	493c <bind@plt>
    aa20:	mov	r5, r0
    aa24:	b	a9f8 <rb_bind+0x5c>
    aa28:	.word	0x00009672

0000aa2c <rb_get_fde>:
    aa2c:	b	99ec <rb_find_fd>

0000aa30 <rb_read>:
    aa30:	subs	ip, r0, #0
    aa34:	bxeq	lr
    aa38:	push	{lr}		; (str lr, [sp, #-4]!)
    aa3c:	ldrb	lr, [ip, #17]
    aa40:	ands	r3, lr, #32
    aa44:	beq	aa50 <rb_read+0x20>
    aa48:	pop	{lr}		; (ldr lr, [sp], #4)
    aa4c:	b	cc84 <rb_ssl_read>
    aa50:	tst	lr, #4
    aa54:	ldr	r0, [ip, #12]
    aa58:	beq	aa64 <rb_read+0x34>
    aa5c:	pop	{lr}		; (ldr lr, [sp], #4)
    aa60:	b	45ac <recv@plt>
    aa64:	pop	{lr}		; (ldr lr, [sp], #4)
    aa68:	b	472c <read@plt>

0000aa6c <rb_write>:
    aa6c:	subs	ip, r0, #0
    aa70:	bxeq	lr
    aa74:	ldrb	r3, [ip, #17]
    aa78:	tst	r3, #32
    aa7c:	beq	aa84 <rb_write+0x18>
    aa80:	b	cca8 <rb_ssl_write>
    aa84:	tst	r3, #4
    aa88:	beq	aa98 <rb_write+0x2c>
    aa8c:	mov	r3, #16384	; 0x4000
    aa90:	ldr	r0, [ip, #12]
    aa94:	b	4ac8 <send@plt>
    aa98:	ldr	r0, [ip, #12]
    aa9c:	b	4744 <write@plt>

0000aaa0 <rb_writev>:
    aaa0:	push	{r4, r5, r6, r7, lr}
    aaa4:	subs	r7, r0, #0
    aaa8:	sub	sp, sp, #36	; 0x24
    aaac:	bne	aacc <rb_writev+0x2c>
    aab0:	bl	4d14 <__errno_location@plt>
    aab4:	mvn	r4, #0
    aab8:	mov	r3, #9
    aabc:	str	r3, [r0]
    aac0:	mov	r0, r4
    aac4:	add	sp, sp, #36	; 0x24
    aac8:	pop	{r4, r5, r6, r7, pc}
    aacc:	ldrb	r3, [r7, #17]
    aad0:	mov	r5, r1
    aad4:	mov	r6, r2
    aad8:	ands	r0, r3, #32
    aadc:	addne	r5, r1, #8
    aae0:	movne	r4, #0
    aae4:	bne	ab28 <rb_writev+0x88>
    aae8:	tst	r3, #4
    aaec:	beq	ab58 <rb_writev+0xb8>
    aaf0:	add	r4, sp, #4
    aaf4:	mov	r1, r0
    aaf8:	mov	r2, #28
    aafc:	mov	r0, r4
    ab00:	bl	4648 <memset@plt>
    ab04:	mov	r2, #16384	; 0x4000
    ab08:	mov	r1, r4
    ab0c:	ldr	r0, [r7, #12]
    ab10:	str	r5, [sp, #12]
    ab14:	str	r6, [sp, #16]
    ab18:	bl	4720 <sendmsg@plt>
    ab1c:	mov	r4, r0
    ab20:	b	aac0 <rb_writev+0x20>
    ab24:	add	r4, r4, r0
    ab28:	cmp	r6, #0
    ab2c:	beq	aac0 <rb_writev+0x20>
    ab30:	ldmdb	r5, {r1, r2}
    ab34:	mov	r0, r7
    ab38:	bl	4678 <rb_write@plt>
    ab3c:	add	r5, r5, #8
    ab40:	sub	r6, r6, #1
    ab44:	cmp	r0, #0
    ab48:	bgt	ab24 <rb_writev+0x84>
    ab4c:	cmp	r4, #0
    ab50:	moveq	r4, r0
    ab54:	b	aac0 <rb_writev+0x20>
    ab58:	ldr	r0, [r7, #12]
    ab5c:	bl	46a8 <writev@plt>
    ab60:	b	ab1c <rb_writev+0x7c>

0000ab64 <rb_inet_ntop>:
    ab64:	cmp	r0, #2
    ab68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab6c:	mov	r5, r1
    ab70:	sub	sp, sp, #92	; 0x5c
    ab74:	mov	r9, r2
    ab78:	mov	sl, r3
    ab7c:	beq	ab90 <rb_inet_ntop+0x2c>
    ab80:	cmp	r0, #10
    ab84:	beq	abb4 <rb_inet_ntop+0x50>
    ab88:	mov	r0, #0
    ab8c:	b	abac <rb_inet_ntop+0x48>
    ab90:	cmp	r3, #15
    ab94:	movhi	r0, r1
    ab98:	bls	ab88 <rb_inet_ntop+0x24>
    ab9c:	bl	9828 <inetntoa>
    aba0:	mov	r1, r0
    aba4:	mov	r0, r9
    aba8:	bl	48ac <strcpy@plt>
    abac:	add	sp, sp, #92	; 0x5c
    abb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abb4:	ldr	r3, [r1]
    abb8:	cmp	r3, #0
    abbc:	bne	adc4 <rb_inet_ntop+0x260>
    abc0:	ldr	r3, [r1, #4]
    abc4:	cmp	r3, #0
    abc8:	bne	adc4 <rb_inet_ntop+0x260>
    abcc:	ldr	r3, [r1, #8]
    abd0:	cmn	r3, #65536	; 0x10000
    abd4:	beq	abf0 <rb_inet_ntop+0x8c>
    abd8:	cmp	r3, #0
    abdc:	bne	adc4 <rb_inet_ntop+0x260>
    abe0:	ldr	r3, [r1, #12]
    abe4:	rev	r3, r3
    abe8:	cmp	r3, #1
    abec:	bls	adc4 <rb_inet_ntop+0x260>
    abf0:	cmp	sl, #15
    abf4:	add	r0, r5, #12
    abf8:	bhi	ab9c <rb_inet_ntop+0x38>
    abfc:	b	ab88 <rb_inet_ntop+0x24>
    ac00:	cmn	r2, #1
    ac04:	beq	ac2c <rb_inet_ntop+0xc8>
    ac08:	cmn	r4, #1
    ac0c:	movne	ip, #0
    ac10:	moveq	ip, #1
    ac14:	cmp	r1, r6
    ac18:	orrgt	ip, ip, #1
    ac1c:	cmp	ip, #0
    ac20:	movne	r4, r2
    ac24:	movne	r6, r1
    ac28:	mov	r2, lr
    ac2c:	add	r0, r0, #1
    ac30:	cmp	r0, #8
    ac34:	bne	ae28 <rb_inet_ntop+0x2c4>
    ac38:	cmn	r2, #1
    ac3c:	beq	ac6c <rb_inet_ntop+0x108>
    ac40:	cmn	r4, #1
    ac44:	movne	r0, #0
    ac48:	moveq	r0, #1
    ac4c:	cmp	r6, r1
    ac50:	orrlt	r0, r0, #1
    ac54:	cmp	r0, #0
    ac58:	movne	r6, r1
    ac5c:	movne	r4, r2
    ac60:	cmp	r6, #1
    ac64:	mvnle	r4, #0
    ac68:	b	ac74 <rb_inet_ntop+0x110>
    ac6c:	cmn	r4, #1
    ac70:	bne	ac60 <rb_inet_ntop+0xfc>
    ac74:	add	r0, sp, #40	; 0x28
    ac78:	ldr	r2, [pc, #456]	; ae48 <rb_inet_ntop+0x2e4>
    ac7c:	mov	r7, #0
    ac80:	mov	fp, r0
    ac84:	add	r2, pc, r2
    ac88:	str	r2, [sp]
    ac8c:	cmp	r4, r7
    ac90:	movgt	r2, #0
    ac94:	movle	r2, #1
    ac98:	cmn	r4, #1
    ac9c:	moveq	r2, #0
    aca0:	cmp	r2, #0
    aca4:	beq	ad10 <rb_inet_ntop+0x1ac>
    aca8:	add	r2, r4, r6
    acac:	cmp	r2, r7
    acb0:	ble	ad10 <rb_inet_ntop+0x1ac>
    acb4:	cmp	r4, r7
    acb8:	bne	acd8 <rb_inet_ntop+0x174>
    acbc:	cmp	r4, #0
    acc0:	moveq	r2, #48	; 0x30
    acc4:	strbeq	r2, [r0]
    acc8:	addeq	r0, r0, #1
    accc:	mov	r2, #58	; 0x3a
    acd0:	strb	r2, [r0]
    acd4:	add	r0, r0, #1
    acd8:	add	r7, r7, #1
    acdc:	cmp	r7, #8
    ace0:	bne	ac8c <rb_inet_ntop+0x128>
    ace4:	cmn	r4, #1
    ace8:	bne	ad88 <rb_inet_ntop+0x224>
    acec:	mov	r3, #0
    acf0:	strb	r3, [r0], #1
    acf4:	sub	r2, r0, fp
    acf8:	cmp	sl, r2
    acfc:	bcc	ab88 <rb_inet_ntop+0x24>
    ad00:	mov	r1, fp
    ad04:	mov	r0, r9
    ad08:	bl	4828 <memcpy@plt>
    ad0c:	b	abac <rb_inet_ntop+0x48>
    ad10:	cmp	r7, #0
    ad14:	beq	ada0 <rb_inet_ntop+0x23c>
    ad18:	mov	r2, #58	; 0x3a
    ad1c:	cmp	r4, #0
    ad20:	cmpeq	r7, #6
    ad24:	add	r8, r0, #1
    ad28:	strb	r2, [r0]
    ad2c:	bne	ada4 <rb_inet_ntop+0x240>
    ad30:	cmp	r6, #6
    ad34:	beq	ad50 <rb_inet_ntop+0x1ec>
    ad38:	cmp	r6, #5
    ad3c:	bne	ada4 <rb_inet_ntop+0x240>
    ad40:	ldr	r2, [sp, #28]
    ad44:	ldr	r1, [pc, #256]	; ae4c <rb_inet_ntop+0x2e8>
    ad48:	cmp	r2, r1
    ad4c:	bne	ada4 <rb_inet_ntop+0x240>
    ad50:	sub	r3, r8, fp
    ad54:	rsb	r3, r3, #46	; 0x2e
    ad58:	cmp	r3, #15
    ad5c:	add	r0, r5, #12
    ad60:	bls	ab88 <rb_inet_ntop+0x24>
    ad64:	bl	9828 <inetntoa>
    ad68:	mov	r1, r0
    ad6c:	mov	r0, r8
    ad70:	bl	48ac <strcpy@plt>
    ad74:	cmp	r0, #0
    ad78:	beq	ab88 <rb_inet_ntop+0x24>
    ad7c:	mov	r0, r8
    ad80:	bl	4804 <strlen@plt>
    ad84:	add	r0, r8, r0
    ad88:	add	r4, r4, r6
    ad8c:	cmp	r4, #8
    ad90:	moveq	r3, #58	; 0x3a
    ad94:	strbeq	r3, [r0]
    ad98:	addeq	r0, r0, #1
    ad9c:	b	acec <rb_inet_ntop+0x188>
    ada0:	mov	r8, r0
    ada4:	ldr	r2, [r3, r7, lsl #2]
    ada8:	ldr	r1, [sp]
    adac:	mov	r0, r8
    adb0:	str	r3, [sp, #4]
    adb4:	bl	4d2c <sprintf@plt>
    adb8:	ldr	r3, [sp, #4]
    adbc:	add	r0, r8, r0
    adc0:	b	acd8 <rb_inet_ntop+0x174>
    adc4:	add	r3, sp, #8
    adc8:	mov	r2, #32
    adcc:	mov	r0, r3
    add0:	mov	r1, #0
    add4:	str	r3, [sp]
    add8:	bl	4648 <memset@plt>
    addc:	ldr	r3, [sp]
    ade0:	mov	r2, #0
    ade4:	mov	ip, r5
    ade8:	asr	r1, r2, #1
    adec:	ldrb	lr, [ip, r2]!
    adf0:	add	r0, sp, #88	; 0x58
    adf4:	add	r1, r0, r1, lsl #2
    adf8:	add	r2, r2, #2
    adfc:	ldrb	r0, [ip, #1]
    ae00:	cmp	r2, #16
    ae04:	orr	r0, r0, lr, lsl #8
    ae08:	str	r0, [r1, #-80]	; 0xffffffb0
    ae0c:	bne	ade4 <rb_inet_ntop+0x280>
    ae10:	mov	r6, #0
    ae14:	mvn	r4, #0
    ae18:	mov	r1, r6
    ae1c:	mov	r2, r4
    ae20:	mov	r0, r6
    ae24:	mov	lr, r4
    ae28:	ldr	ip, [r3, r0, lsl #2]
    ae2c:	cmp	ip, #0
    ae30:	bne	ac00 <rb_inet_ntop+0x9c>
    ae34:	cmn	r2, #1
    ae38:	addne	r1, r1, #1
    ae3c:	moveq	r2, r0
    ae40:	moveq	r1, #1
    ae44:	b	ac2c <rb_inet_ntop+0xc8>
    ae48:	.word	0x0000941d
    ae4c:	.word	0x0000ffff

0000ae50 <rb_inet_ntop_sock>:
    ae50:	mov	ip, r0
    ae54:	ldrh	r0, [r0]
    ae58:	mov	r3, r2
    ae5c:	cmp	r0, #2
    ae60:	beq	ae74 <rb_inet_ntop_sock+0x24>
    ae64:	cmp	r0, #10
    ae68:	beq	ae80 <rb_inet_ntop_sock+0x30>
    ae6c:	mov	r0, #0
    ae70:	bx	lr
    ae74:	mov	r2, r1
    ae78:	add	r1, ip, #4
    ae7c:	b	4978 <rb_inet_ntop@plt>
    ae80:	mov	r2, r1
    ae84:	add	r1, ip, #8
    ae88:	b	ae7c <rb_inet_ntop_sock+0x2c>

0000ae8c <rb_inet_pton>:
    ae8c:	cmp	r0, #2
    ae90:	push	{r4, r5, lr}
    ae94:	mov	r4, r1
    ae98:	sub	sp, sp, #60	; 0x3c
    ae9c:	mov	r5, r2
    aea0:	beq	aeb4 <rb_inet_pton+0x28>
    aea4:	cmp	r0, #10
    aea8:	beq	aec8 <rb_inet_pton+0x3c>
    aeac:	mvn	r0, #0
    aeb0:	b	aec0 <rb_inet_pton+0x34>
    aeb4:	mov	r1, r2
    aeb8:	mov	r0, r4
    aebc:	bl	9928 <inet_pton4>
    aec0:	add	sp, sp, #60	; 0x3c
    aec4:	pop	{r4, r5, pc}
    aec8:	mov	r1, r2
    aecc:	mov	r0, r4
    aed0:	bl	9928 <inet_pton4>
    aed4:	cmp	r0, #0
    aed8:	beq	aef4 <rb_inet_pton+0x68>
    aedc:	ldr	r1, [pc, #32]	; af04 <rb_inet_pton+0x78>
    aee0:	mov	r2, r4
    aee4:	add	r1, pc, r1
    aee8:	mov	r0, sp
    aeec:	mov	r4, sp
    aef0:	bl	4d2c <sprintf@plt>
    aef4:	mov	r1, r5
    aef8:	mov	r0, r4
    aefc:	bl	9b20 <inet_pton6>
    af00:	b	aec0 <rb_inet_pton+0x34>
    af04:	.word	0x000091c0

0000af08 <rb_inet_pton_sock>:
    af08:	push	{r4, r5, r6, lr}
    af0c:	mov	r4, r1
    af10:	mov	r5, r0
    af14:	mov	r2, #128	; 0x80
    af18:	mov	r1, #0
    af1c:	mov	r0, r4
    af20:	bl	4648 <memset@plt>
    af24:	add	r2, r4, #4
    af28:	mov	r1, r5
    af2c:	mov	r0, #2
    af30:	bl	4654 <rb_inet_pton@plt>
    af34:	subs	r6, r0, #0
    af38:	beq	af54 <rb_inet_pton_sock+0x4c>
    af3c:	mov	r3, #2
    af40:	strh	r3, [r4]
    af44:	mov	r3, #0
    af48:	strh	r3, [r4, #2]
    af4c:	mov	r0, #1
    af50:	pop	{r4, r5, r6, pc}
    af54:	add	r2, r4, #8
    af58:	mov	r1, r5
    af5c:	mov	r0, #10
    af60:	bl	4654 <rb_inet_pton@plt>
    af64:	cmp	r0, #0
    af68:	popeq	{r4, r5, r6, pc}
    af6c:	mov	r3, #10
    af70:	strh	r3, [r4]
    af74:	strh	r6, [r4, #2]
    af78:	b	af4c <rb_inet_pton_sock+0x44>

0000af7c <rb_get_iotype>:
    af7c:	ldr	r0, [pc, #8]	; af8c <rb_get_iotype+0x10>
    af80:	add	r0, pc, r0
    af84:	add	r0, r0, #56	; 0x38
    af88:	bx	lr
    af8c:	.word	0x0002da28

0000af90 <rb_io_sched_event>:
    af90:	push	{r4, r5, r6, lr}
    af94:	subs	r4, r0, #0
    af98:	beq	afe0 <rb_io_sched_event+0x50>
    af9c:	ldr	r6, [pc, #68]	; afe8 <rb_io_sched_event+0x58>
    afa0:	add	r6, pc, r6
    afa4:	ldr	r3, [r6, #52]	; 0x34
    afa8:	cmp	r3, #0
    afac:	beq	afe0 <rb_io_sched_event+0x50>
    afb0:	ldr	r2, [r6, #40]	; 0x28
    afb4:	cmp	r2, #0
    afb8:	beq	afe0 <rb_io_sched_event+0x50>
    afbc:	mov	r5, r1
    afc0:	blx	r3
    afc4:	cmp	r0, #0
    afc8:	beq	afe0 <rb_io_sched_event+0x50>
    afcc:	ldr	r3, [r6, #40]	; 0x28
    afd0:	mov	r1, r5
    afd4:	mov	r0, r4
    afd8:	pop	{r4, r5, r6, lr}
    afdc:	bx	r3
    afe0:	mov	r0, #0
    afe4:	pop	{r4, r5, r6, pc}
    afe8:	.word	0x0002da08

0000afec <rb_io_unsched_event>:
    afec:	push	{r4, r5, r6, lr}
    aff0:	subs	r4, r0, #0
    aff4:	popeq	{r4, r5, r6, pc}
    aff8:	ldr	r5, [pc, #52]	; b034 <rb_io_unsched_event+0x48>
    affc:	add	r5, pc, r5
    b000:	ldr	r3, [r5, #52]	; 0x34
    b004:	cmp	r3, #0
    b008:	popeq	{r4, r5, r6, pc}
    b00c:	ldr	r2, [r5, #44]	; 0x2c
    b010:	cmp	r2, #0
    b014:	popeq	{r4, r5, r6, pc}
    b018:	blx	r3
    b01c:	cmp	r0, #0
    b020:	popeq	{r4, r5, r6, pc}
    b024:	ldr	r3, [r5, #44]	; 0x2c
    b028:	mov	r0, r4
    b02c:	pop	{r4, r5, r6, lr}
    b030:	bx	r3
    b034:	.word	0x0002d9ac

0000b038 <rb_io_supports_event>:
    b038:	ldr	r3, [pc, #16]	; b050 <rb_io_supports_event+0x18>
    b03c:	add	r3, pc, r3
    b040:	ldr	r0, [r3, #52]	; 0x34
    b044:	cmp	r0, #0
    b048:	bxeq	lr
    b04c:	bx	r0
    b050:	.word	0x0002d96c

0000b054 <rb_io_init_event>:
    b054:	ldr	r3, [pc, #20]	; b070 <rb_io_init_event+0x1c>
    b058:	push	{r4, lr}
    b05c:	add	r3, pc, r3
    b060:	ldr	r3, [r3, #48]	; 0x30
    b064:	blx	r3
    b068:	pop	{r4, lr}
    b06c:	b	d43c <rb_event_io_register_all>
    b070:	.word	0x0002d94c

0000b074 <rb_init_netio>:
    b074:	ldr	r0, [pc, #480]	; b25c <rb_init_netio+0x1e8>
    b078:	push	{r4, r5, r6, lr}
    b07c:	add	r0, pc, r0
    b080:	bl	45b8 <getenv@plt>
    b084:	ldr	r5, [pc, #468]	; b260 <rb_init_netio+0x1ec>
    b088:	add	r5, pc, r5
    b08c:	mov	r4, r0
    b090:	mov	r0, #49152	; 0xc000
    b094:	bl	9b04 <rb_malloc>
    b098:	ldr	r3, [pc, #452]	; b264 <rb_init_netio+0x1f0>
    b09c:	ldr	r3, [r5, r3]
    b0a0:	str	r0, [r3]
    b0a4:	bl	c5b8 <rb_init_ssl>
    b0a8:	cmp	r4, #0
    b0ac:	bne	b120 <rb_init_netio+0xac>
    b0b0:	bl	9d2c <try_kqueue>
    b0b4:	cmp	r0, #0
    b0b8:	popeq	{r4, r5, r6, pc}
    b0bc:	bl	9de8 <try_epoll>
    b0c0:	cmp	r0, #0
    b0c4:	popeq	{r4, r5, r6, pc}
    b0c8:	bl	9ea4 <try_ports>
    b0cc:	cmp	r0, #0
    b0d0:	popeq	{r4, r5, r6, pc}
    b0d4:	bl	9f60 <try_devpoll>
    b0d8:	cmp	r0, #0
    b0dc:	popeq	{r4, r5, r6, pc}
    b0e0:	bl	9ff8 <try_sigio>
    b0e4:	cmp	r0, #0
    b0e8:	popeq	{r4, r5, r6, pc}
    b0ec:	bl	a0b4 <try_poll>
    b0f0:	cmp	r0, #0
    b0f4:	popeq	{r4, r5, r6, pc}
    b0f8:	bl	a14c <try_win32>
    b0fc:	cmp	r0, #0
    b100:	popeq	{r4, r5, r6, pc}
    b104:	bl	a1e4 <try_select>
    b108:	cmp	r0, #0
    b10c:	popeq	{r4, r5, r6, pc}
    b110:	ldr	r0, [pc, #336]	; b268 <rb_init_netio+0x1f4>
    b114:	add	r0, pc, r0
    b118:	bl	4948 <rb_lib_log@plt>
    b11c:	bl	43e4 <abort@plt>
    b120:	ldr	r0, [pc, #324]	; b26c <rb_init_netio+0x1f8>
    b124:	mov	r1, r4
    b128:	add	r0, pc, r0
    b12c:	bl	4d08 <strcmp@plt>
    b130:	cmp	r0, #0
    b134:	bne	b16c <rb_init_netio+0xf8>
    b138:	bl	9de8 <try_epoll>
    b13c:	cmp	r0, #0
    b140:	popeq	{r4, r5, r6, pc}
    b144:	ldr	r0, [pc, #292]	; b270 <rb_init_netio+0x1fc>
    b148:	mov	r1, r4
    b14c:	add	r0, pc, r0
    b150:	bl	4d08 <strcmp@plt>
    b154:	cmp	r0, #0
    b158:	bne	b0b0 <rb_init_netio+0x3c>
    b15c:	bl	a14c <try_win32>
    b160:	cmp	r0, #0
    b164:	bne	b0b0 <rb_init_netio+0x3c>
    b168:	pop	{r4, r5, r6, pc}
    b16c:	ldr	r0, [pc, #256]	; b274 <rb_init_netio+0x200>
    b170:	mov	r1, r4
    b174:	add	r0, pc, r0
    b178:	bl	4d08 <strcmp@plt>
    b17c:	cmp	r0, #0
    b180:	bne	b194 <rb_init_netio+0x120>
    b184:	bl	9d2c <try_kqueue>
    b188:	cmp	r0, #0
    b18c:	bne	b144 <rb_init_netio+0xd0>
    b190:	pop	{r4, r5, r6, pc}
    b194:	ldr	r0, [pc, #220]	; b278 <rb_init_netio+0x204>
    b198:	mov	r1, r4
    b19c:	add	r0, pc, r0
    b1a0:	bl	4d08 <strcmp@plt>
    b1a4:	cmp	r0, #0
    b1a8:	bne	b1bc <rb_init_netio+0x148>
    b1ac:	bl	9ea4 <try_ports>
    b1b0:	cmp	r0, #0
    b1b4:	bne	b144 <rb_init_netio+0xd0>
    b1b8:	pop	{r4, r5, r6, pc}
    b1bc:	ldr	r0, [pc, #184]	; b27c <rb_init_netio+0x208>
    b1c0:	mov	r1, r4
    b1c4:	add	r0, pc, r0
    b1c8:	bl	4d08 <strcmp@plt>
    b1cc:	cmp	r0, #0
    b1d0:	bne	b1e4 <rb_init_netio+0x170>
    b1d4:	bl	a0b4 <try_poll>
    b1d8:	cmp	r0, #0
    b1dc:	bne	b144 <rb_init_netio+0xd0>
    b1e0:	pop	{r4, r5, r6, pc}
    b1e4:	ldr	r0, [pc, #148]	; b280 <rb_init_netio+0x20c>
    b1e8:	mov	r1, r4
    b1ec:	add	r0, pc, r0
    b1f0:	bl	4d08 <strcmp@plt>
    b1f4:	cmp	r0, #0
    b1f8:	bne	b20c <rb_init_netio+0x198>
    b1fc:	bl	9f60 <try_devpoll>
    b200:	cmp	r0, #0
    b204:	bne	b144 <rb_init_netio+0xd0>
    b208:	pop	{r4, r5, r6, pc}
    b20c:	ldr	r0, [pc, #112]	; b284 <rb_init_netio+0x210>
    b210:	mov	r1, r4
    b214:	add	r0, pc, r0
    b218:	bl	4d08 <strcmp@plt>
    b21c:	cmp	r0, #0
    b220:	bne	b234 <rb_init_netio+0x1c0>
    b224:	bl	9ff8 <try_sigio>
    b228:	cmp	r0, #0
    b22c:	bne	b144 <rb_init_netio+0xd0>
    b230:	pop	{r4, r5, r6, pc}
    b234:	ldr	r0, [pc, #76]	; b288 <rb_init_netio+0x214>
    b238:	mov	r1, r4
    b23c:	add	r0, pc, r0
    b240:	bl	4d08 <strcmp@plt>
    b244:	cmp	r0, #0
    b248:	bne	b144 <rb_init_netio+0xd0>
    b24c:	bl	a1e4 <try_select>
    b250:	cmp	r0, #0
    b254:	bne	b144 <rb_init_netio+0xd0>
    b258:	pop	{r4, r5, r6, pc}
    b25c:	.word	0x00009032
    b260:	.word	0x0001af70
    b264:	.word	0x000003c4
    b268:	.word	0x00008fab
    b26c:	.word	0x00008eac
    b270:	.word	0x00008ea2
    b274:	.word	0x00008e59
    b278:	.word	0x00008e3e
    b27c:	.word	0x00008e11
    b280:	.word	0x00008df4
    b284:	.word	0x00008dd4
    b288:	.word	0x00008db8

0000b28c <rb_setselect>:
    b28c:	ldr	ip, [pc, #20]	; b2a8 <rb_setselect+0x1c>
    b290:	push	{lr}		; (str lr, [sp, #-4]!)
    b294:	add	ip, pc, ip
    b298:	ldr	lr, [ip, #28]
    b29c:	mov	ip, lr
    b2a0:	pop	{lr}		; (ldr lr, [sp], #4)
    b2a4:	bx	ip
    b2a8:	.word	0x0002d714

0000b2ac <rb_close>:
    b2ac:	push	{r4, r5, r6, r7, r8, lr}
    b2b0:	subs	r4, r0, #0
    b2b4:	ldr	r8, [pc, #328]	; b404 <rb_close+0x158>
    b2b8:	add	r8, pc, r8
    b2bc:	popeq	{r4, r5, r6, r7, r8, pc}
    b2c0:	ldrb	r7, [r4, #17]
    b2c4:	ldr	r5, [r4, #12]
    b2c8:	ands	r6, r7, #16
    b2cc:	beq	b2dc <rb_close+0x30>
    b2d0:	mov	r1, #0
    b2d4:	mov	r0, r5
    b2d8:	bl	4600 <listen@plt>
    b2dc:	mov	r3, #0
    b2e0:	mov	r2, r3
    b2e4:	mov	r1, #3
    b2e8:	mov	r0, r4
    b2ec:	bl	44c8 <rb_setselect@plt>
    b2f0:	mov	r3, #0
    b2f4:	mov	r2, r3
    b2f8:	mov	r1, r3
    b2fc:	mov	r0, r4
    b300:	bl	4408 <rb_settimeout@plt>
    b304:	ldr	r0, [r4, #52]	; 0x34
    b308:	bl	9a58 <rb_free>
    b30c:	ldr	r0, [r4, #48]	; 0x30
    b310:	bl	9a58 <rb_free>
    b314:	ldr	r0, [r4, #24]
    b318:	bl	9a58 <rb_free>
    b31c:	tst	r7, #32
    b320:	beq	b32c <rb_close+0x80>
    b324:	mov	r0, r4
    b328:	bl	c550 <rb_ssl_shutdown>
    b32c:	ldrb	r3, [r4, #16]
    b330:	tst	r3, #1
    b334:	beq	b3ec <rb_close+0x140>
    b338:	ldr	r2, [r4, #12]
    b33c:	ldr	r3, [pc, #196]	; b408 <rb_close+0x15c>
    b340:	ldr	ip, [r4, #4]
    b344:	ldr	r1, [r8, r3]
    b348:	asr	r3, r2, #24
    b34c:	eor	r3, r3, r2, asr #12
    b350:	eor	r3, r3, r2
    b354:	mov	r2, #12
    b358:	lsl	r3, r3, #20
    b35c:	ldr	r0, [r1]
    b360:	lsr	r3, r3, #20
    b364:	mul	r3, r2, r3
    b368:	ldr	r2, [r4, #8]
    b36c:	add	r1, r0, r3
    b370:	cmp	r2, #0
    b374:	strne	ip, [r2, #4]
    b378:	streq	ip, [r1, #4]
    b37c:	ldr	ip, [r4, #4]
    b380:	cmp	ip, #0
    b384:	streq	r2, [r0, r3]
    b388:	mov	r3, #0
    b38c:	strne	r2, [ip, #8]
    b390:	str	r3, [r4, #4]
    b394:	ldr	r3, [pc, #112]	; b40c <rb_close+0x160>
    b398:	add	r3, pc, r3
    b39c:	ldr	r2, [r3, #100]	; 0x64
    b3a0:	cmp	r2, #0
    b3a4:	str	r2, [r4, #8]
    b3a8:	strne	r4, [r2, #4]
    b3ac:	bne	b3bc <rb_close+0x110>
    b3b0:	ldr	r2, [r3, #104]	; 0x68
    b3b4:	cmp	r2, #0
    b3b8:	streq	r4, [r3, #104]	; 0x68
    b3bc:	ldr	r3, [pc, #76]	; b410 <rb_close+0x164>
    b3c0:	ldr	r2, [r1, #8]
    b3c4:	add	r3, pc, r3
    b3c8:	sub	r2, r2, #1
    b3cc:	str	r2, [r1, #8]
    b3d0:	ldr	r2, [r3, #108]	; 0x6c
    b3d4:	str	r4, [r3, #100]	; 0x64
    b3d8:	add	r2, r2, #1
    b3dc:	str	r2, [r3, #108]	; 0x6c
    b3e0:	ldrb	r3, [r4, #16]
    b3e4:	bic	r3, r3, #1
    b3e8:	strb	r3, [r4, #16]
    b3ec:	cmp	r6, #0
    b3f0:	popeq	{r4, r5, r6, r7, r8, pc}
    b3f4:	mov	r0, r5
    b3f8:	mov	r1, #2
    b3fc:	pop	{r4, r5, r6, r7, r8, lr}
    b400:	b	4930 <shutdown@plt>
    b404:	.word	0x0001ad40
    b408:	.word	0x000003c4
    b40c:	.word	0x0002d610
    b410:	.word	0x0002d5e4

0000b414 <rb_select>:
    b414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b418:	ldr	r4, [pc, #104]	; b488 <rb_select+0x74>
    b41c:	add	r4, pc, r4
    b420:	ldr	r3, [r4, #32]
    b424:	blx	r3
    b428:	ldr	r5, [r4, #100]	; 0x64
    b42c:	cmp	r5, #0
    b430:	mov	r8, r0
    b434:	beq	b480 <rb_select+0x6c>
    b438:	ldr	r6, [r5, #8]
    b43c:	add	r9, r4, #100	; 0x64
    b440:	ldr	r7, [r5]
    b444:	ldr	r3, [r4, #96]	; 0x60
    b448:	ldr	r0, [r7, #12]
    b44c:	sub	r3, r3, #1
    b450:	str	r3, [r4, #96]	; 0x60
    b454:	bl	496c <close@plt>
    b458:	mov	r1, r9
    b45c:	mov	r0, r5
    b460:	bl	97e8 <rb_dlinkDelete>
    b464:	mov	r1, r7
    b468:	ldr	r0, [r4, #92]	; 0x5c
    b46c:	bl	48f4 <rb_bh_free@plt>
    b470:	cmp	r6, #0
    b474:	movne	r5, r6
    b478:	ldrne	r6, [r6, #8]
    b47c:	bne	b440 <rb_select+0x2c>
    b480:	mov	r0, r8
    b484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b488:	.word	0x0002d58c

0000b48c <rb_setup_fd>:
    b48c:	ldr	r3, [pc, #8]	; b49c <rb_setup_fd+0x10>
    b490:	add	r3, pc, r3
    b494:	ldr	r3, [r3, #36]	; 0x24
    b498:	bx	r3
    b49c:	.word	0x0002d518

0000b4a0 <rb_set_nb>:
    b4a0:	subs	r3, r0, #0
    b4a4:	bne	b4b8 <rb_set_nb+0x18>
    b4a8:	mov	r0, #0
    b4ac:	bx	lr
    b4b0:	mov	r0, #0
    b4b4:	pop	{r4, pc}
    b4b8:	push	{r4, lr}
    b4bc:	ldr	r4, [r3, #12]
    b4c0:	bl	4b58 <rb_setup_fd@plt>
    b4c4:	cmp	r0, #0
    b4c8:	popne	{r4, pc}
    b4cc:	mov	r2, r0
    b4d0:	mov	r1, #3
    b4d4:	mov	r0, r4
    b4d8:	bl	4c30 <fcntl@plt>
    b4dc:	cmn	r0, #1
    b4e0:	beq	b4b0 <rb_set_nb+0x10>
    b4e4:	orr	r2, r0, #2048	; 0x800
    b4e8:	mov	r1, #4
    b4ec:	mov	r0, r4
    b4f0:	bl	4c30 <fcntl@plt>
    b4f4:	adds	r0, r0, #1
    b4f8:	movne	r0, #1
    b4fc:	pop	{r4, pc}

0000b500 <rb_accept_tryaccept>:
    b500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b504:	mov	r6, r0
    b508:	ldr	r8, [pc, #408]	; b6a8 <rb_accept_tryaccept+0x1a8>
    b50c:	ldr	r9, [pc, #408]	; b6ac <rb_accept_tryaccept+0x1ac>
    b510:	ldr	sl, [pc, #408]	; b6b0 <rb_accept_tryaccept+0x1b0>
    b514:	sub	sp, sp, #160	; 0xa0
    b518:	add	r8, pc, r8
    b51c:	add	r9, pc, r9
    b520:	add	sl, pc, sl
    b524:	mov	r5, #128	; 0x80
    b528:	add	r4, sp, #32
    b52c:	mov	r2, r5
    b530:	mov	r1, #0
    b534:	mov	r0, r4
    b538:	bl	4648 <memset@plt>
    b53c:	add	r2, sp, #160	; 0xa0
    b540:	mov	r1, r4
    b544:	str	r5, [r2, #-148]!	; 0xffffff6c
    b548:	ldr	r0, [r6, #12]
    b54c:	bl	478c <accept@plt>
    b550:	subs	r5, r0, #0
    b554:	bge	b578 <rb_accept_tryaccept+0x78>
    b558:	ldr	r2, [pc, #340]	; b6b4 <rb_accept_tryaccept+0x1b4>
    b55c:	mov	r3, #0
    b560:	add	r2, pc, r2
    b564:	mov	r1, #1
    b568:	mov	r0, r6
    b56c:	bl	44c8 <rb_setselect@plt>
    b570:	add	sp, sp, #160	; 0xa0
    b574:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b578:	ldrb	r1, [r6, #17]
    b57c:	mov	r2, r8
    b580:	bic	r1, r1, #127	; 0x7f
    b584:	orr	r1, r1, #4
    b588:	bl	4ab0 <rb_open@plt>
    b58c:	subs	r7, r0, #0
    b590:	bne	b5ac <rb_accept_tryaccept+0xac>
    b594:	mov	r0, sl
    b598:	mov	r1, r5
    b59c:	bl	4948 <rb_lib_log@plt>
    b5a0:	mov	r0, r5
    b5a4:	bl	496c <close@plt>
    b5a8:	b	b524 <rb_accept_tryaccept+0x24>
    b5ac:	bl	463c <rb_set_nb@plt>
    b5b0:	cmp	r0, #0
    b5b4:	bne	b5cc <rb_accept_tryaccept+0xcc>
    b5b8:	mov	r0, r9
    b5bc:	ldr	r1, [r7, #12]
    b5c0:	bl	4948 <rb_lib_log@plt>
    b5c4:	mov	r0, r7
    b5c8:	bl	4888 <rb_close@plt>
    b5cc:	ldrh	r3, [sp, #32]
    b5d0:	cmp	r3, #10
    b5d4:	bne	b5fc <rb_accept_tryaccept+0xfc>
    b5d8:	ldr	r3, [sp, #40]	; 0x28
    b5dc:	cmp	r3, #0
    b5e0:	bne	b5fc <rb_accept_tryaccept+0xfc>
    b5e4:	ldr	r1, [sp, #44]	; 0x2c
    b5e8:	cmp	r1, #0
    b5ec:	bne	b5fc <rb_accept_tryaccept+0xfc>
    b5f0:	ldr	r3, [sp, #48]	; 0x30
    b5f4:	cmn	r3, #65536	; 0x10000
    b5f8:	beq	b674 <rb_accept_tryaccept+0x174>
    b5fc:	ldr	r3, [r6, #52]	; 0x34
    b600:	ldr	r5, [r3, #136]	; 0x88
    b604:	cmp	r5, #0
    b608:	bne	b63c <rb_accept_tryaccept+0x13c>
    b60c:	ldrb	r1, [r6, #17]
    b610:	ands	r1, r1, #32
    b614:	bne	b65c <rb_accept_tryaccept+0x15c>
    b618:	ldr	r3, [r6, #52]	; 0x34
    b61c:	mov	r0, r7
    b620:	ldr	r2, [r3, #140]	; 0x8c
    b624:	str	r2, [sp]
    b628:	mov	r2, r4
    b62c:	ldr	r5, [r3, #132]	; 0x84
    b630:	ldr	r3, [sp, #12]
    b634:	blx	r5
    b638:	b	b524 <rb_accept_tryaccept+0x24>
    b63c:	ldr	r3, [r3, #140]	; 0x8c
    b640:	ldr	r2, [sp, #12]
    b644:	mov	r1, r4
    b648:	mov	r0, r7
    b64c:	blx	r5
    b650:	cmp	r0, #0
    b654:	beq	b524 <rb_accept_tryaccept+0x24>
    b658:	b	b60c <rb_accept_tryaccept+0x10c>
    b65c:	ldr	r3, [sp, #12]
    b660:	mov	r2, r4
    b664:	mov	r1, r7
    b668:	mov	r0, r6
    b66c:	bl	cd68 <rb_ssl_accept_setup>
    b670:	b	b524 <rb_accept_tryaccept+0x24>
    b674:	mov	r2, #16
    b678:	add	r5, sp, r2
    b67c:	mov	r0, r5
    b680:	bl	4648 <memset@plt>
    b684:	mov	r3, #2
    b688:	strh	r3, [sp, #16]
    b68c:	ldrh	r3, [sp, #34]	; 0x22
    b690:	strh	r3, [sp, #18]
    b694:	ldr	r3, [sp, #52]	; 0x34
    b698:	str	r3, [sp, #20]
    b69c:	ldm	r5, {r0, r1, r2, r3}
    b6a0:	stm	r4, {r0, r1, r2, r3}
    b6a4:	b	b5fc <rb_accept_tryaccept+0xfc>
    b6a8:	.word	0x00008be1
    b6ac:	.word	0x00008c37
    b6b0:	.word	0x00008bed
    b6b4:	.word	0xffffff98

0000b6b8 <rb_accept_tcp>:
    b6b8:	push	{r4, r5, r6, r7, r8, lr}
    b6bc:	subs	r4, r0, #0
    b6c0:	popeq	{r4, r5, r6, r7, r8, pc}
    b6c4:	mov	r0, #144	; 0x90
    b6c8:	mov	r5, r1
    b6cc:	mov	r6, r3
    b6d0:	mov	r7, r2
    b6d4:	bl	9b04 <rb_malloc>
    b6d8:	mov	r1, #0
    b6dc:	str	r0, [r4, #52]	; 0x34
    b6e0:	str	r7, [r0, #132]	; 0x84
    b6e4:	str	r6, [r0, #140]	; 0x8c
    b6e8:	str	r5, [r0, #136]	; 0x88
    b6ec:	mov	r0, r4
    b6f0:	pop	{r4, r5, r6, r7, r8, lr}
    b6f4:	b	b500 <rb_accept_tryaccept>

0000b6f8 <rb_socketpair>:
    b6f8:	push	{r0, r1, r4, r5, r6, lr}
    b6fc:	mov	r6, r3
    b700:	ldr	r3, [pc, #280]	; b820 <rb_socketpair+0x128>
    b704:	ldr	ip, [pc, #280]	; b824 <rb_socketpair+0x12c>
    b708:	add	r3, pc, r3
    b70c:	ldr	r5, [sp, #24]
    b710:	ldr	r3, [r3, ip]
    b714:	ldr	ip, [pc, #268]	; b828 <rb_socketpair+0x130>
    b718:	add	ip, pc, ip
    b71c:	ldr	r3, [r3]
    b720:	ldr	ip, [ip, #96]	; 0x60
    b724:	cmp	ip, r3
    b728:	blt	b748 <rb_socketpair+0x50>
    b72c:	bl	4d14 <__errno_location@plt>
    b730:	mov	r3, #23
    b734:	str	r3, [r0]
    b738:	mvn	r4, #0
    b73c:	mov	r0, r4
    b740:	add	sp, sp, #8
    b744:	pop	{r4, r5, r6, pc}
    b748:	mov	r3, sp
    b74c:	bl	4588 <socketpair@plt>
    b750:	subs	r4, r0, #0
    b754:	bne	b738 <rb_socketpair+0x40>
    b758:	ldr	r2, [sp, #28]
    b75c:	mov	r1, #4
    b760:	ldr	r0, [sp]
    b764:	bl	4ab0 <rb_open@plt>
    b768:	ldr	r2, [sp, #28]
    b76c:	mov	r1, #4
    b770:	str	r0, [r6]
    b774:	ldr	r0, [sp, #4]
    b778:	bl	4ab0 <rb_open@plt>
    b77c:	str	r0, [r5]
    b780:	ldr	r3, [r6]
    b784:	mov	r2, r0
    b788:	cmp	r3, #0
    b78c:	bne	b7a0 <rb_socketpair+0xa8>
    b790:	cmp	r0, #0
    b794:	beq	b738 <rb_socketpair+0x40>
    b798:	bl	4888 <rb_close@plt>
    b79c:	b	b738 <rb_socketpair+0x40>
    b7a0:	cmp	r2, #0
    b7a4:	mov	r0, r3
    b7a8:	beq	b798 <rb_socketpair+0xa0>
    b7ac:	bl	463c <rb_set_nb@plt>
    b7b0:	cmp	r0, #0
    b7b4:	bne	b7ec <rb_socketpair+0xf4>
    b7b8:	bl	4d14 <__errno_location@plt>
    b7bc:	ldr	r4, [sp]
    b7c0:	ldr	r0, [r0]
    b7c4:	bl	43c0 <strerror@plt>
    b7c8:	mov	r1, r4
    b7cc:	mov	r2, r0
    b7d0:	ldr	r0, [pc, #84]	; b82c <rb_socketpair+0x134>
    b7d4:	add	r0, pc, r0
    b7d8:	bl	4948 <rb_lib_log@plt>
    b7dc:	ldr	r0, [r6]
    b7e0:	bl	4888 <rb_close@plt>
    b7e4:	ldr	r0, [r5]
    b7e8:	b	b798 <rb_socketpair+0xa0>
    b7ec:	ldr	r0, [r5]
    b7f0:	bl	463c <rb_set_nb@plt>
    b7f4:	cmp	r0, #0
    b7f8:	bne	b73c <rb_socketpair+0x44>
    b7fc:	bl	4d14 <__errno_location@plt>
    b800:	ldr	r4, [sp, #4]
    b804:	ldr	r0, [r0]
    b808:	bl	43c0 <strerror@plt>
    b80c:	mov	r1, r4
    b810:	mov	r2, r0
    b814:	ldr	r0, [pc, #20]	; b830 <rb_socketpair+0x138>
    b818:	add	r0, pc, r0
    b81c:	b	b7d8 <rb_socketpair+0xe0>
    b820:	.word	0x0001a8f0
    b824:	.word	0x000003a4
    b828:	.word	0x0002d290
    b82c:	.word	0x000089ab
    b830:	.word	0x00008967

0000b834 <rb_pipe>:
    b834:	ldr	r3, [pc, #256]	; b93c <rb_pipe+0x108>
    b838:	push	{r0, r1, r4, r5, r6, lr}
    b83c:	mov	r6, r2
    b840:	ldr	r2, [pc, #248]	; b940 <rb_pipe+0x10c>
    b844:	add	r3, pc, r3
    b848:	ldr	r3, [r3, r2]
    b84c:	ldr	r2, [pc, #240]	; b944 <rb_pipe+0x110>
    b850:	add	r2, pc, r2
    b854:	ldr	r3, [r3]
    b858:	ldr	r2, [r2, #96]	; 0x60
    b85c:	cmp	r2, r3
    b860:	blt	b87c <rb_pipe+0x48>
    b864:	bl	4d14 <__errno_location@plt>
    b868:	mov	r3, #23
    b86c:	str	r3, [r0]
    b870:	mvn	r0, #0
    b874:	add	sp, sp, #8
    b878:	pop	{r4, r5, r6, pc}
    b87c:	mov	r5, r0
    b880:	mov	r0, sp
    b884:	mov	r4, r1
    b888:	bl	4cb4 <pipe@plt>
    b88c:	cmn	r0, #1
    b890:	beq	b874 <rb_pipe+0x40>
    b894:	mov	r2, r6
    b898:	mov	r1, #8
    b89c:	ldr	r0, [sp]
    b8a0:	bl	4ab0 <rb_open@plt>
    b8a4:	mov	r2, r6
    b8a8:	mov	r1, #8
    b8ac:	str	r0, [r5]
    b8b0:	ldr	r0, [sp, #4]
    b8b4:	bl	4ab0 <rb_open@plt>
    b8b8:	str	r0, [r4]
    b8bc:	ldr	r0, [r5]
    b8c0:	bl	463c <rb_set_nb@plt>
    b8c4:	cmp	r0, #0
    b8c8:	bne	b904 <rb_pipe+0xd0>
    b8cc:	bl	4d14 <__errno_location@plt>
    b8d0:	ldr	r6, [sp]
    b8d4:	ldr	r0, [r0]
    b8d8:	bl	43c0 <strerror@plt>
    b8dc:	mov	r1, r6
    b8e0:	mov	r2, r0
    b8e4:	ldr	r0, [pc, #92]	; b948 <rb_pipe+0x114>
    b8e8:	add	r0, pc, r0
    b8ec:	bl	4948 <rb_lib_log@plt>
    b8f0:	ldr	r0, [r5]
    b8f4:	bl	4888 <rb_close@plt>
    b8f8:	ldr	r0, [r4]
    b8fc:	bl	4888 <rb_close@plt>
    b900:	b	b870 <rb_pipe+0x3c>
    b904:	ldr	r0, [r4]
    b908:	bl	463c <rb_set_nb@plt>
    b90c:	cmp	r0, #0
    b910:	movne	r0, #0
    b914:	bne	b874 <rb_pipe+0x40>
    b918:	bl	4d14 <__errno_location@plt>
    b91c:	ldr	r6, [sp, #4]
    b920:	ldr	r0, [r0]
    b924:	bl	43c0 <strerror@plt>
    b928:	mov	r1, r6
    b92c:	mov	r2, r0
    b930:	ldr	r0, [pc, #20]	; b94c <rb_pipe+0x118>
    b934:	add	r0, pc, r0
    b938:	b	b8ec <rb_pipe+0xb8>
    b93c:	.word	0x0001a7b4
    b940:	.word	0x000003a4
    b944:	.word	0x0002d158
    b948:	.word	0x00008897
    b94c:	.word	0x0000884b

0000b950 <rb_socket>:
    b950:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b954:	mov	r4, r3
    b958:	ldr	r3, [pc, #300]	; ba8c <rb_socket+0x13c>
    b95c:	ldr	ip, [pc, #300]	; ba90 <rb_socket+0x140>
    b960:	add	r3, pc, r3
    b964:	ldr	r3, [r3, ip]
    b968:	ldr	ip, [pc, #292]	; ba94 <rb_socket+0x144>
    b96c:	add	ip, pc, ip
    b970:	ldr	r3, [r3]
    b974:	ldr	ip, [ip, #96]	; 0x60
    b978:	cmp	ip, r3
    b97c:	blt	b994 <rb_socket+0x44>
    b980:	bl	4d14 <__errno_location@plt>
    b984:	mov	r3, #23
    b988:	str	r3, [r0]
    b98c:	mov	r4, #0
    b990:	b	ba48 <rb_socket+0xf8>
    b994:	mov	r6, r0
    b998:	bl	47b0 <socket@plt>
    b99c:	subs	r5, r0, #0
    b9a0:	blt	b98c <rb_socket+0x3c>
    b9a4:	cmp	r6, #10
    b9a8:	bne	ba08 <rb_socket+0xb8>
    b9ac:	add	r3, sp, #16
    b9b0:	mov	r2, #1
    b9b4:	str	r2, [r3, #-4]!
    b9b8:	mov	r2, #4
    b9bc:	str	r2, [sp]
    b9c0:	mov	r1, #41	; 0x29
    b9c4:	mov	r2, #26
    b9c8:	bl	4ccc <setsockopt@plt>
    b9cc:	cmn	r0, #1
    b9d0:	bne	ba08 <rb_socket+0xb8>
    b9d4:	bl	4d14 <__errno_location@plt>
    b9d8:	ldr	r4, [sp, #12]
    b9dc:	ldr	r0, [r0]
    b9e0:	bl	43c0 <strerror@plt>
    b9e4:	mov	r2, r5
    b9e8:	mov	r1, r4
    b9ec:	mov	r3, r0
    b9f0:	ldr	r0, [pc, #160]	; ba98 <rb_socket+0x148>
    b9f4:	add	r0, pc, r0
    b9f8:	bl	4948 <rb_lib_log@plt>
    b9fc:	mov	r0, r5
    ba00:	bl	496c <close@plt>
    ba04:	b	b98c <rb_socket+0x3c>
    ba08:	mov	r2, r4
    ba0c:	mov	r1, #4
    ba10:	mov	r0, r5
    ba14:	bl	4ab0 <rb_open@plt>
    ba18:	subs	r4, r0, #0
    ba1c:	bne	ba54 <rb_socket+0x104>
    ba20:	bl	4d14 <__errno_location@plt>
    ba24:	ldr	r0, [r0]
    ba28:	bl	43c0 <strerror@plt>
    ba2c:	mov	r1, r5
    ba30:	mov	r2, r0
    ba34:	ldr	r0, [pc, #96]	; ba9c <rb_socket+0x14c>
    ba38:	add	r0, pc, r0
    ba3c:	bl	4948 <rb_lib_log@plt>
    ba40:	mov	r0, r5
    ba44:	bl	496c <close@plt>
    ba48:	mov	r0, r4
    ba4c:	add	sp, sp, #16
    ba50:	pop	{r4, r5, r6, pc}
    ba54:	bl	463c <rb_set_nb@plt>
    ba58:	subs	r6, r0, #0
    ba5c:	bne	ba48 <rb_socket+0xf8>
    ba60:	bl	4d14 <__errno_location@plt>
    ba64:	ldr	r0, [r0]
    ba68:	bl	43c0 <strerror@plt>
    ba6c:	mov	r1, r5
    ba70:	mov	r2, r0
    ba74:	ldr	r0, [pc, #36]	; baa0 <rb_socket+0x150>
    ba78:	add	r0, pc, r0
    ba7c:	bl	4948 <rb_lib_log@plt>
    ba80:	mov	r0, r4
    ba84:	bl	4888 <rb_close@plt>
    ba88:	b	b98c <rb_socket+0x3c>
    ba8c:	.word	0x0001a698
    ba90:	.word	0x000003a4
    ba94:	.word	0x0002d03c
    ba98:	.word	0x000087b8
    ba9c:	.word	0x000087b3
    baa0:	.word	0x00008707

0000baa4 <rb_ignore_errno>:
    baa4:	cmp	r0, #85	; 0x55
    baa8:	beq	bad8 <rb_ignore_errno+0x34>
    baac:	bgt	bac8 <rb_ignore_errno+0x24>
    bab0:	cmp	r0, #4
    bab4:	beq	bad8 <rb_ignore_errno+0x34>
    bab8:	cmp	r0, #11
    babc:	beq	bad8 <rb_ignore_errno+0x34>
    bac0:	mov	r0, #0
    bac4:	bx	lr
    bac8:	cmp	r0, #105	; 0x69
    bacc:	beq	bad8 <rb_ignore_errno+0x34>
    bad0:	cmp	r0, #115	; 0x73
    bad4:	b	babc <rb_ignore_errno+0x18>
    bad8:	mov	r0, #1
    badc:	bx	lr

0000bae0 <rb_connect_tcp>:
    bae0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bae4:	subs	r4, r0, #0
    bae8:	ldr	r9, [sp, #32]
    baec:	ldr	r8, [sp, #36]	; 0x24
    baf0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    baf4:	mov	r0, #268	; 0x10c
    baf8:	mov	r7, r3
    bafc:	mov	r5, r2
    bb00:	mov	r6, r1
    bb04:	bl	9b04 <rb_malloc>
    bb08:	mov	r2, #128	; 0x80
    bb0c:	mov	r1, r6
    bb10:	str	r0, [r4, #48]	; 0x30
    bb14:	str	r7, [r0, #260]	; 0x104
    bb18:	str	r9, [r0, #264]	; 0x108
    bb1c:	add	r0, r0, r2
    bb20:	bl	4828 <memcpy@plt>
    bb24:	cmp	r5, #0
    bb28:	beq	bb54 <rb_connect_tcp+0x74>
    bb2c:	ldrh	r2, [r5]
    bb30:	mov	r1, r5
    bb34:	ldr	r0, [r4, #12]
    bb38:	cmp	r2, #2
    bb3c:	moveq	r2, #16
    bb40:	movne	r2, #28
    bb44:	bl	493c <bind@plt>
    bb48:	cmp	r0, #0
    bb4c:	movlt	r1, #1
    bb50:	blt	bba8 <rb_connect_tcp+0xc8>
    bb54:	ldr	r2, [pc, #136]	; bbe4 <rb_connect_tcp+0x104>
    bb58:	mov	r3, #0
    bb5c:	add	r2, pc, r2
    bb60:	mov	r1, r8
    bb64:	mov	r0, r4
    bb68:	bl	4408 <rb_settimeout@plt>
    bb6c:	ldr	r1, [r4, #48]	; 0x30
    bb70:	ldr	r0, [r4, #12]
    bb74:	add	r1, r1, #128	; 0x80
    bb78:	ldrh	r2, [r1]
    bb7c:	cmp	r2, #2
    bb80:	moveq	r2, #16
    bb84:	movne	r2, #28
    bb88:	bl	43f0 <connect@plt>
    bb8c:	cmp	r0, #0
    bb90:	bge	bba4 <rb_connect_tcp+0xc4>
    bb94:	bl	4d14 <__errno_location@plt>
    bb98:	ldr	r0, [r0]
    bb9c:	cmp	r0, #106	; 0x6a
    bba0:	bne	bbb4 <rb_connect_tcp+0xd4>
    bba4:	mov	r1, #0
    bba8:	mov	r0, r4
    bbac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    bbb0:	b	a454 <rb_connect_callback>
    bbb4:	bl	43fc <rb_ignore_errno@plt>
    bbb8:	cmp	r0, #0
    bbbc:	beq	bbdc <rb_connect_tcp+0xfc>
    bbc0:	ldr	r2, [pc, #32]	; bbe8 <rb_connect_tcp+0x108>
    bbc4:	mov	r0, r4
    bbc8:	mov	r3, #0
    bbcc:	add	r2, pc, r2
    bbd0:	mov	r1, #2
    bbd4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    bbd8:	b	44c8 <rb_setselect@plt>
    bbdc:	mov	r1, #4
    bbe0:	b	bba8 <rb_connect_tcp+0xc8>
    bbe4:	.word	0xffffe9e4
    bbe8:	.word	0xffffe8f0

0000bbec <rb_recv_fd_buf>:
    bbec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbf0:	add	fp, sp, #32
    bbf4:	sub	sp, sp, #148	; 0x94
    bbf8:	ldr	r7, [fp, #4]
    bbfc:	mov	r8, r3
    bc00:	str	r2, [fp, #-156]	; 0xffffff64
    bc04:	lsl	r3, r7, #2
    bc08:	add	ip, r3, #12
    bc0c:	add	r3, r3, #26
    bc10:	bic	r3, r3, #7
    bc14:	sub	r2, fp, #160	; 0xa0
    bc18:	mov	r4, #0
    bc1c:	sub	sp, sp, r3
    bc20:	str	r2, [fp, #-144]	; 0xffffff70
    bc24:	mov	r2, #1
    bc28:	str	r1, [fp, #-160]	; 0xffffff60
    bc2c:	str	r2, [fp, #-140]	; 0xffffff74
    bc30:	str	ip, [fp, #-132]	; 0xffffff7c
    bc34:	str	r4, [fp, #-152]	; 0xffffff68
    bc38:	str	r4, [fp, #-148]	; 0xffffff6c
    bc3c:	str	r4, [fp, #-128]	; 0xffffff80
    bc40:	str	sp, [fp, #-136]	; 0xffffff78
    bc44:	bl	4504 <rb_get_fd@plt>
    bc48:	mov	r2, r4
    bc4c:	sub	r1, fp, #152	; 0x98
    bc50:	bl	4b64 <recvmsg@plt>
    bc54:	subs	r9, r0, #0
    bc58:	ble	bd04 <rb_recv_fd_buf+0x118>
    bc5c:	ldr	r3, [fp, #-132]	; 0xffffff7c
    bc60:	cmp	r3, r4
    bc64:	beq	bc78 <rb_recv_fd_buf+0x8c>
    bc68:	ldr	r6, [fp, #-136]	; 0xffffff78
    bc6c:	cmp	r6, r4
    bc70:	cmpne	r3, #11
    bc74:	bhi	bd28 <rb_recv_fd_buf+0x13c>
    bc78:	mov	r3, #0
    bc7c:	str	r3, [r8]
    bc80:	b	bd04 <rb_recv_fd_buf+0x118>
    bc84:	ldr	r3, [r6, r4, lsl #2]
    bc88:	sub	r1, fp, #124	; 0x7c
    bc8c:	mov	r0, r3
    bc90:	str	r3, [fp, #-176]	; 0xffffff50
    bc94:	bl	1367c <__fstat>
    bc98:	ldr	r3, [fp, #-176]	; 0xffffff50
    bc9c:	cmp	r0, #0
    bca0:	bne	bd10 <rb_recv_fd_buf+0x124>
    bca4:	ldr	r2, [fp, #-108]	; 0xffffff94
    bca8:	and	r2, r2, #61440	; 0xf000
    bcac:	cmp	r2, #49152	; 0xc000
    bcb0:	moveq	r1, #4
    bcb4:	ldreq	r2, [fp, #-168]	; 0xffffff58
    bcb8:	beq	bce0 <rb_recv_fd_buf+0xf4>
    bcbc:	cmp	r2, #4096	; 0x1000
    bcc0:	moveq	r1, #8
    bcc4:	ldreq	r2, [fp, #-172]	; 0xffffff54
    bcc8:	beq	bce0 <rb_recv_fd_buf+0xf4>
    bccc:	cmp	r2, #32768	; 0x8000
    bcd0:	bne	bd1c <rb_recv_fd_buf+0x130>
    bcd4:	ldr	r2, [pc, #128]	; bd5c <rb_recv_fd_buf+0x170>
    bcd8:	mov	r1, #2
    bcdc:	add	r2, pc, r2
    bce0:	mov	r0, r3
    bce4:	bl	4ab0 <rb_open@plt>
    bce8:	str	r0, [r8, r4, lsl #2]
    bcec:	add	r4, r4, #1
    bcf0:	cmp	r7, r5
    bcf4:	movlt	r3, r7
    bcf8:	movge	r3, r5
    bcfc:	cmp	r4, r3
    bd00:	blt	bc84 <rb_recv_fd_buf+0x98>
    bd04:	mov	r0, r9
    bd08:	sub	sp, fp, #32
    bd0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd10:	mov	r2, sl
    bd14:	mov	r1, #64	; 0x40
    bd18:	b	bce0 <rb_recv_fd_buf+0xf4>
    bd1c:	ldr	r2, [pc, #60]	; bd60 <rb_recv_fd_buf+0x174>
    bd20:	add	r2, pc, r2
    bd24:	b	bd14 <rb_recv_fd_buf+0x128>
    bd28:	ldr	r3, [pc, #52]	; bd64 <rb_recv_fd_buf+0x178>
    bd2c:	ldr	r5, [r6]
    bd30:	add	r3, pc, r3
    bd34:	str	r3, [fp, #-168]	; 0xffffff58
    bd38:	ldr	r3, [pc, #40]	; bd68 <rb_recv_fd_buf+0x17c>
    bd3c:	sub	r5, r5, #12
    bd40:	ldr	sl, [pc, #36]	; bd6c <rb_recv_fd_buf+0x180>
    bd44:	add	r3, pc, r3
    bd48:	add	r6, r6, #12
    bd4c:	lsr	r5, r5, #2
    bd50:	add	sl, pc, sl
    bd54:	str	r3, [fp, #-172]	; 0xffffff54
    bd58:	b	bcf0 <rb_recv_fd_buf+0x104>
    bd5c:	.word	0x00008571
    bd60:	.word	0x00008504
    bd64:	.word	0x00008503
    bd68:	.word	0x000084fd
    bd6c:	.word	0x000084d4

0000bd70 <rb_send_fd_buf>:
    bd70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd74:	add	fp, sp, #32
    bd78:	sub	r4, fp, #64	; 0x40
    bd7c:	sub	sp, sp, #52	; 0x34
    bd80:	mov	r5, r2
    bd84:	mov	r9, r3
    bd88:	mov	r6, r0
    bd8c:	mov	r3, #48	; 0x30
    bd90:	mov	r8, r1
    bd94:	mov	r2, #28
    bd98:	mov	r1, #0
    bd9c:	mov	r0, r4
    bda0:	strb	r3, [fp, #-73]	; 0xffffffb7
    bda4:	ldr	r7, [fp, #4]
    bda8:	bl	4648 <memset@plt>
    bdac:	cmp	r7, #0
    bdb0:	subeq	r3, fp, #73	; 0x49
    bdb4:	strne	r9, [fp, #-72]	; 0xffffffb8
    bdb8:	strne	r7, [fp, #-68]	; 0xffffffbc
    bdbc:	mov	r0, #1
    bdc0:	str	r0, [fp, #-52]	; 0xffffffcc
    bdc4:	streq	r3, [fp, #-72]	; 0xffffffb8
    bdc8:	moveq	r3, #1
    bdcc:	streq	r3, [fp, #-68]	; 0xffffffbc
    bdd0:	sub	r3, fp, #72	; 0x48
    bdd4:	str	r3, [fp, #-56]	; 0xffffffc8
    bdd8:	mov	r3, #0
    bddc:	cmp	r5, r3
    bde0:	str	r3, [fp, #-64]	; 0xffffffc0
    bde4:	str	r3, [fp, #-60]	; 0xffffffc4
    bde8:	str	r3, [fp, #-40]	; 0xffffffd8
    bdec:	str	r3, [fp, #-48]	; 0xffffffd0
    bdf0:	str	r3, [fp, #-44]	; 0xffffffd4
    bdf4:	ble	be84 <rb_send_fd_buf+0x114>
    bdf8:	add	r2, r5, r0
    bdfc:	mov	r7, sp
    be00:	lsl	r2, r2, #2
    be04:	add	r1, r2, #15
    be08:	add	ip, r2, #8
    be0c:	bic	r1, r1, #7
    be10:	sub	sp, sp, r1
    be14:	cmp	ip, #11
    be18:	mov	sl, sp
    be1c:	str	sp, [fp, #-48]	; 0xffffffd0
    be20:	str	ip, [fp, #-44]	; 0xffffffd4
    be24:	bls	be9c <rb_send_fd_buf+0x12c>
    be28:	mov	r1, sp
    be2c:	mov	r9, r3
    be30:	str	r0, [sp, #4]
    be34:	str	r0, [sp, #8]
    be38:	str	ip, [r1], #8
    be3c:	ldr	r0, [r8, r9, lsl #2]
    be40:	str	r1, [fp, #-80]	; 0xffffffb0
    be44:	bl	4504 <rb_get_fd@plt>
    be48:	ldr	r1, [fp, #-80]	; 0xffffffb0
    be4c:	add	r9, r9, #1
    be50:	cmp	r5, r9
    be54:	str	r0, [r1, #4]!
    be58:	bhi	be3c <rb_send_fd_buf+0xcc>
    be5c:	ldr	r3, [sl]
    be60:	mov	r0, r6
    be64:	str	r3, [fp, #-44]	; 0xffffffd4
    be68:	bl	4504 <rb_get_fd@plt>
    be6c:	mov	r2, #16384	; 0x4000
    be70:	mov	r1, r4
    be74:	bl	4720 <sendmsg@plt>
    be78:	mov	sp, r7
    be7c:	sub	sp, fp, #32
    be80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be84:	mov	r0, r6
    be88:	bl	4504 <rb_get_fd@plt>
    be8c:	mov	r2, #16384	; 0x4000
    be90:	mov	r1, r4
    be94:	bl	4720 <sendmsg@plt>
    be98:	b	be7c <rb_send_fd_buf+0x10c>
    be9c:	str	r3, [r3, #4]
    bea0:	udf	#0

0000bea4 <rb_ipv4_from_ipv6>:
    bea4:	push	{r4, r5, r6, lr}
    bea8:	mov	r5, r1
    beac:	ldr	r1, [pc, #132]	; bf38 <rb_ipv4_from_ipv6+0x94>
    beb0:	add	r6, r0, #8
    beb4:	mov	r4, r0
    beb8:	mov	r2, #2
    bebc:	add	r1, pc, r1
    bec0:	mov	r0, r6
    bec4:	bl	4474 <memcmp@plt>
    bec8:	cmp	r0, #0
    becc:	ldreq	r3, [r4, #10]
    bed0:	streq	r3, [r5, #4]
    bed4:	beq	bf18 <rb_ipv4_from_ipv6+0x74>
    bed8:	ldr	r1, [pc, #92]	; bf3c <rb_ipv4_from_ipv6+0x98>
    bedc:	mov	r2, #4
    bee0:	add	r1, pc, r1
    bee4:	add	r1, r1, #17
    bee8:	mov	r0, r6
    beec:	bl	4474 <memcmp@plt>
    bef0:	cmp	r0, #0
    bef4:	bne	bf30 <rb_ipv4_from_ipv6+0x8c>
    bef8:	add	r4, r4, #20
    befc:	add	r3, r5, #3
    bf00:	add	r1, r5, #7
    bf04:	ldrb	r2, [r4], #1
    bf08:	mvn	r2, r2
    bf0c:	strb	r2, [r3, #1]!
    bf10:	cmp	r3, r1
    bf14:	bne	bf04 <rb_ipv4_from_ipv6+0x60>
    bf18:	mov	r3, #2
    bf1c:	strh	r3, [r5]
    bf20:	mov	r3, #0
    bf24:	strh	r3, [r5, #2]
    bf28:	mov	r0, #1
    bf2c:	pop	{r4, r5, r6, pc}
    bf30:	mov	r0, #0
    bf34:	pop	{r4, r5, r6, pc}
    bf38:	.word	0x0000839d
    bf3c:	.word	0x000080d7

0000bf40 <verify_accept_all_cb>:
    bf40:	mov	r0, #1
    bf44:	bx	lr

0000bf48 <rb_ssl_timeout_cb>:
    bf48:	ldr	r3, [r0, #52]	; 0x34
    bf4c:	push	{r0, r1, r4, lr}
    bf50:	mov	r1, #3
    bf54:	ldr	r2, [r3, #140]	; 0x8c
    bf58:	str	r2, [sp]
    bf5c:	ldr	r4, [r3, #132]	; 0x84
    bf60:	mov	r3, #0
    bf64:	mov	r2, r3
    bf68:	blx	r4
    bf6c:	add	sp, sp, #8
    bf70:	pop	{r4, pc}

0000bf74 <rb_ssl_last_err>:
    bf74:	push	{r4, lr}
    bf78:	mov	r4, #0
    bf7c:	bl	4420 <ERR_get_error@plt>
    bf80:	cmp	r0, #0
    bf84:	bne	bf90 <rb_ssl_last_err+0x1c>
    bf88:	mov	r0, r4
    bf8c:	pop	{r4, pc}
    bf90:	mov	r4, r0
    bf94:	b	bf7c <rb_ssl_last_err+0x8>

0000bf98 <rb_ssl_strerror>:
    bf98:	push	{r4, lr}
    bf9c:	mov	r2, #512	; 0x200
    bfa0:	ldr	r4, [pc, #16]	; bfb8 <rb_ssl_strerror+0x20>
    bfa4:	add	r4, pc, r4
    bfa8:	mov	r1, r4
    bfac:	bl	45c4 <ERR_error_string_n@plt>
    bfb0:	mov	r0, r4
    bfb4:	pop	{r4, pc}
    bfb8:	.word	0x0002ca78

0000bfbc <make_certfp>:
    bfbc:	push	{r4, r5, r6, r7, lr}
    bfc0:	cmp	r2, #2
    bfc4:	ldr	r5, [pc, #252]	; c0c8 <make_certfp+0x10c>
    bfc8:	sub	sp, sp, #20
    bfcc:	add	r5, pc, r5
    bfd0:	mov	r4, r0
    bfd4:	mov	r7, r1
    bfd8:	beq	c094 <make_certfp+0xd8>
    bfdc:	bgt	bffc <make_certfp+0x40>
    bfe0:	cmp	r2, #0
    bfe4:	beq	c024 <make_certfp+0x68>
    bfe8:	cmp	r2, #1
    bfec:	beq	c084 <make_certfp+0xc8>
    bff0:	mov	r0, #0
    bff4:	add	sp, sp, #20
    bff8:	pop	{r4, r5, r6, r7, pc}
    bffc:	ldr	r3, [pc, #200]	; c0cc <make_certfp+0x110>
    c000:	cmp	r2, r3
    c004:	beq	c0a4 <make_certfp+0xe8>
    c008:	add	r3, r3, #1
    c00c:	cmp	r2, r3
    c010:	bne	bff0 <make_certfp+0x34>
    c014:	mov	r3, #64	; 0x40
    c018:	str	r3, [sp, #12]
    c01c:	bl	4bd0 <EVP_sha512@plt>
    c020:	b	c0b0 <make_certfp+0xf4>
    c024:	mov	r3, #20
    c028:	str	r3, [sp, #12]
    c02c:	bl	4918 <EVP_sha1@plt>
    c030:	ldr	r3, [pc, #152]	; c0d0 <make_certfp+0x114>
    c034:	mov	r6, r0
    c038:	ldr	r0, [r5, r3]
    c03c:	add	r3, sp, #12
    c040:	str	r3, [sp]
    c044:	mov	r2, r4
    c048:	mov	r3, r7
    c04c:	mov	r1, r6
    c050:	bl	4a38 <ASN1_item_digest@plt>
    c054:	cmp	r0, #1
    c058:	ldreq	r0, [sp, #12]
    c05c:	beq	bff4 <make_certfp+0x38>
    c060:	bl	bf74 <rb_ssl_last_err>
    c064:	bl	bf98 <rb_ssl_strerror>
    c068:	ldr	r1, [pc, #100]	; c0d4 <make_certfp+0x118>
    c06c:	add	r1, pc, r1
    c070:	mov	r2, r0
    c074:	ldr	r0, [pc, #92]	; c0d8 <make_certfp+0x11c>
    c078:	add	r0, pc, r0
    c07c:	bl	4948 <rb_lib_log@plt>
    c080:	b	bff0 <make_certfp+0x34>
    c084:	mov	r3, #32
    c088:	str	r3, [sp, #12]
    c08c:	bl	4c00 <EVP_sha256@plt>
    c090:	b	c030 <make_certfp+0x74>
    c094:	mov	r3, #64	; 0x40
    c098:	str	r3, [sp, #12]
    c09c:	bl	4bd0 <EVP_sha512@plt>
    c0a0:	b	c030 <make_certfp+0x74>
    c0a4:	mov	r3, #32
    c0a8:	str	r3, [sp, #12]
    c0ac:	bl	4c00 <EVP_sha256@plt>
    c0b0:	mov	r6, r0
    c0b4:	mov	r0, r4
    c0b8:	bl	4558 <X509_get_X509_PUBKEY@plt>
    c0bc:	ldr	r3, [pc, #24]	; c0dc <make_certfp+0x120>
    c0c0:	mov	r4, r0
    c0c4:	b	c038 <make_certfp+0x7c>
    c0c8:	.word	0x0001a02c
    c0cc:	.word	0x00001001
    c0d0:	.word	0x0000040c
    c0d4:	.word	0x000084d5
    c0d8:	.word	0x000086af
    c0dc:	.word	0x00000418

0000c0e0 <rb_ssl_read_or_write>:
    c0e0:	push	{r4, r5, r6, r7, r8, lr}
    c0e4:	mov	r7, r0
    c0e8:	mov	r6, r2
    c0ec:	mov	r4, r1
    c0f0:	mov	r5, r3
    c0f4:	bl	bf74 <rb_ssl_last_err>
    c0f8:	cmp	r7, #0
    c0fc:	ldr	r2, [sp, #24]
    c100:	bne	c148 <rb_ssl_read_or_write+0x68>
    c104:	mov	r1, r6
    c108:	ldr	r0, [r4, #56]	; 0x38
    c10c:	bl	4798 <SSL_read@plt>
    c110:	cmp	r0, #0
    c114:	popge	{r4, r5, r6, r7, r8, pc}
    c118:	mov	r1, r0
    c11c:	ldr	r0, [r4, #56]	; 0x38
    c120:	bl	4cd8 <SSL_get_error@plt>
    c124:	sub	r0, r0, #2
    c128:	cmp	r0, #4
    c12c:	addls	pc, pc, r0, lsl #2
    c130:	b	c1b0 <rb_ssl_read_or_write+0xd0>
    c134:	b	c158 <rb_ssl_read_or_write+0x78>
    c138:	b	c16c <rb_ssl_read_or_write+0x8c>
    c13c:	b	c1b0 <rb_ssl_read_or_write+0xd0>
    c140:	b	c180 <rb_ssl_read_or_write+0xa0>
    c144:	b	c1b8 <rb_ssl_read_or_write+0xd8>
    c148:	mov	r1, r5
    c14c:	ldr	r0, [r4, #56]	; 0x38
    c150:	bl	4618 <SSL_write@plt>
    c154:	b	c110 <rb_ssl_read_or_write+0x30>
    c158:	bl	4d14 <__errno_location@plt>
    c15c:	mov	r3, #11
    c160:	str	r3, [r0]
    c164:	mvn	r0, #2
    c168:	pop	{r4, r5, r6, r7, r8, pc}
    c16c:	bl	4d14 <__errno_location@plt>
    c170:	mov	r3, #11
    c174:	str	r3, [r0]
    c178:	mvn	r0, #3
    c17c:	pop	{r4, r5, r6, r7, r8, pc}
    c180:	bl	bf74 <rb_ssl_last_err>
    c184:	cmp	r0, #0
    c188:	streq	r0, [r4, #64]	; 0x40
    c18c:	beq	c1c0 <rb_ssl_read_or_write+0xe0>
    c190:	cmp	r0, #0
    c194:	str	r0, [r4, #64]	; 0x40
    c198:	beq	c1c0 <rb_ssl_read_or_write+0xe0>
    c19c:	bl	4d14 <__errno_location@plt>
    c1a0:	mov	r3, #5
    c1a4:	str	r3, [r0]
    c1a8:	mvn	r0, #1
    c1ac:	pop	{r4, r5, r6, r7, r8, pc}
    c1b0:	bl	bf74 <rb_ssl_last_err>
    c1b4:	b	c190 <rb_ssl_read_or_write+0xb0>
    c1b8:	mov	r0, #0
    c1bc:	pop	{r4, r5, r6, r7, r8, pc}
    c1c0:	mvn	r0, #0
    c1c4:	pop	{r4, r5, r6, r7, r8, pc}

0000c1c8 <rb_malloc>:
    c1c8:	push	{r4, lr}
    c1cc:	mov	r1, r0
    c1d0:	mov	r0, #1
    c1d4:	bl	460c <calloc@plt>
    c1d8:	cmp	r0, #0
    c1dc:	popne	{r4, pc}
    c1e0:	bl	49b4 <rb_outofmemory@plt>

0000c1e4 <rb_ssl_accept_common>:
    c1e4:	push	{r0, r1, r4, r5, r6, lr}
    c1e8:	mov	r4, r0
    c1ec:	bl	bf74 <rb_ssl_last_err>
    c1f0:	ldr	r0, [r4, #56]	; 0x38
    c1f4:	bl	47e0 <SSL_do_handshake@plt>
    c1f8:	mov	r5, r0
    c1fc:	mov	r1, r0
    c200:	ldr	r0, [r4, #56]	; 0x38
    c204:	bl	4cd8 <SSL_get_error@plt>
    c208:	cmp	r5, #1
    c20c:	bne	c27c <rb_ssl_accept_common+0x98>
    c210:	ldr	r3, [r4, #60]	; 0x3c
    c214:	mov	r0, r4
    c218:	add	r3, r3, #1
    c21c:	str	r3, [r4, #60]	; 0x3c
    c220:	mov	r3, #0
    c224:	mov	r2, r3
    c228:	mov	r1, r3
    c22c:	bl	4408 <rb_settimeout@plt>
    c230:	mov	r3, #0
    c234:	mov	r2, r3
    c238:	mov	r0, r4
    c23c:	mov	r1, #3
    c240:	bl	44c8 <rb_setselect@plt>
    c244:	ldr	r5, [r4, #52]	; 0x34
    c248:	mov	r1, #0
    c24c:	mov	r0, r4
    c250:	ldr	r3, [r5, #140]	; 0x8c
    c254:	str	r1, [r4, #52]	; 0x34
    c258:	str	r3, [sp]
    c25c:	mov	r2, r5
    c260:	ldr	r6, [r5, #132]	; 0x84
    c264:	ldr	r3, [r5, #128]	; 0x80
    c268:	blx	r6
    c26c:	mov	r0, r5
    c270:	add	sp, sp, #8
    c274:	pop	{r4, r5, r6, lr}
    c278:	b	4714 <free@plt>
    c27c:	cmn	r5, #1
    c280:	movne	r5, #0
    c284:	moveq	r5, #1
    c288:	cmp	r0, #2
    c28c:	movne	r3, #0
    c290:	andeq	r3, r5, #1
    c294:	cmp	r3, #0
    c298:	mov	r6, r0
    c29c:	beq	c2c0 <rb_ssl_accept_common+0xdc>
    c2a0:	ldr	r2, [pc, #116]	; c31c <rb_ssl_accept_common+0x138>
    c2a4:	mov	r3, #0
    c2a8:	add	r2, pc, r2
    c2ac:	mov	r1, #1
    c2b0:	mov	r0, r4
    c2b4:	add	sp, sp, #8
    c2b8:	pop	{r4, r5, r6, lr}
    c2bc:	b	44c8 <rb_setselect@plt>
    c2c0:	cmp	r0, #3
    c2c4:	movne	r5, #0
    c2c8:	andeq	r5, r5, #1
    c2cc:	cmp	r5, #0
    c2d0:	ldrne	r2, [pc, #72]	; c320 <rb_ssl_accept_common+0x13c>
    c2d4:	movne	r1, #2
    c2d8:	addne	r2, pc, r2
    c2dc:	bne	c2b0 <rb_ssl_accept_common+0xcc>
    c2e0:	bl	4d14 <__errno_location@plt>
    c2e4:	mov	r3, #5
    c2e8:	mov	r1, #6
    c2ec:	str	r3, [r0]
    c2f0:	ldr	r3, [r4, #52]	; 0x34
    c2f4:	str	r6, [r4, #64]	; 0x40
    c2f8:	mov	r0, r4
    c2fc:	ldr	r2, [r3, #140]	; 0x8c
    c300:	str	r2, [sp]
    c304:	mov	r2, r5
    c308:	ldr	r6, [r3, #132]	; 0x84
    c30c:	mov	r3, r5
    c310:	blx	r6
    c314:	add	sp, sp, #8
    c318:	pop	{r4, r5, r6, pc}
    c31c:	.word	0xffffff34
    c320:	.word	0xffffff04

0000c324 <rb_ssl_init_fd>:
    c324:	push	{r4, r5, r6, lr}
    c328:	mov	r4, r0
    c32c:	mov	r5, r1
    c330:	bl	bf74 <rb_ssl_last_err>
    c334:	ldr	r3, [pc, #128]	; c3bc <rb_ssl_init_fd+0x98>
    c338:	add	r3, pc, r3
    c33c:	ldr	r0, [r3, #512]	; 0x200
    c340:	bl	4750 <SSL_new@plt>
    c344:	cmp	r0, #0
    c348:	str	r0, [r4, #56]	; 0x38
    c34c:	bne	c380 <rb_ssl_init_fd+0x5c>
    c350:	bl	bf74 <rb_ssl_last_err>
    c354:	bl	bf98 <rb_ssl_strerror>
    c358:	ldr	r1, [pc, #96]	; c3c0 <rb_ssl_init_fd+0x9c>
    c35c:	add	r1, pc, r1
    c360:	add	r1, r1, #12
    c364:	mov	r2, r0
    c368:	ldr	r0, [pc, #84]	; c3c4 <rb_ssl_init_fd+0xa0>
    c36c:	add	r0, pc, r0
    c370:	bl	4948 <rb_lib_log@plt>
    c374:	mov	r0, r4
    c378:	pop	{r4, r5, r6, lr}
    c37c:	b	4888 <rb_close@plt>
    c380:	cmp	r5, #0
    c384:	beq	c3ac <rb_ssl_init_fd+0x88>
    c388:	cmp	r5, #1
    c38c:	beq	c3b4 <rb_ssl_init_fd+0x90>
    c390:	mov	r0, r4
    c394:	ldr	r5, [r4, #56]	; 0x38
    c398:	bl	4504 <rb_get_fd@plt>
    c39c:	mov	r1, r0
    c3a0:	mov	r0, r5
    c3a4:	pop	{r4, r5, r6, lr}
    c3a8:	b	4684 <SSL_set_fd@plt>
    c3ac:	bl	49fc <SSL_set_accept_state@plt>
    c3b0:	b	c390 <rb_ssl_init_fd+0x6c>
    c3b4:	bl	4b94 <SSL_set_connect_state@plt>
    c3b8:	b	c390 <rb_ssl_init_fd+0x6c>
    c3bc:	.word	0x0002c6e4
    c3c0:	.word	0x000081e5
    c3c4:	.word	0x000083d4

0000c3c8 <rb_ssl_connect_realcb>:
    c3c8:	ldr	r3, [r0, #48]	; 0x30
    c3cc:	push	{r4, lr}
    c3d0:	mov	r4, r2
    c3d4:	ldr	r2, [r2]
    c3d8:	str	r2, [r3, #260]	; 0x104
    c3dc:	ldr	r2, [r4, #4]
    c3e0:	str	r2, [r3, #264]	; 0x108
    c3e4:	bl	a454 <rb_connect_callback>
    c3e8:	mov	r0, r4
    c3ec:	pop	{r4, lr}
    c3f0:	b	4714 <free@plt>

0000c3f4 <rb_ssl_tryconn_timeout_cb>:
    c3f4:	mov	r2, r1
    c3f8:	mov	r1, #3
    c3fc:	b	c3c8 <rb_ssl_connect_realcb>

0000c400 <rb_ssl_connect_common>:
    c400:	push	{r4, r5, r6, r7, r8, lr}
    c404:	mov	r4, r0
    c408:	mov	r5, r1
    c40c:	bl	bf74 <rb_ssl_last_err>
    c410:	ldr	r0, [r4, #56]	; 0x38
    c414:	bl	47e0 <SSL_do_handshake@plt>
    c418:	mov	r6, r0
    c41c:	mov	r1, r0
    c420:	ldr	r0, [r4, #56]	; 0x38
    c424:	bl	4cd8 <SSL_get_error@plt>
    c428:	cmp	r6, #1
    c42c:	bne	c478 <rb_ssl_connect_common+0x78>
    c430:	ldr	r3, [r4, #60]	; 0x3c
    c434:	mov	r0, r4
    c438:	add	r3, r3, #1
    c43c:	str	r3, [r4, #60]	; 0x3c
    c440:	mov	r3, #0
    c444:	mov	r2, r3
    c448:	mov	r1, r3
    c44c:	bl	4408 <rb_settimeout@plt>
    c450:	mov	r3, #0
    c454:	mov	r2, r3
    c458:	mov	r1, #3
    c45c:	mov	r0, r4
    c460:	bl	44c8 <rb_setselect@plt>
    c464:	mov	r2, r5
    c468:	mov	r1, #0
    c46c:	mov	r0, r4
    c470:	pop	{r4, r5, r6, r7, r8, lr}
    c474:	b	c3c8 <rb_ssl_connect_realcb>
    c478:	cmn	r6, #1
    c47c:	movne	r3, #0
    c480:	moveq	r3, #1
    c484:	cmp	r0, #2
    c488:	cmneq	r6, #1
    c48c:	mov	r7, r0
    c490:	bne	c4b0 <rb_ssl_connect_common+0xb0>
    c494:	ldr	r2, [pc, #84]	; c4f0 <rb_ssl_connect_common+0xf0>
    c498:	mov	r3, r5
    c49c:	add	r2, pc, r2
    c4a0:	mov	r1, #1
    c4a4:	mov	r0, r4
    c4a8:	pop	{r4, r5, r6, r7, r8, lr}
    c4ac:	b	44c8 <rb_setselect@plt>
    c4b0:	cmp	r0, #3
    c4b4:	movne	r3, #0
    c4b8:	andeq	r3, r3, #1
    c4bc:	cmp	r3, #0
    c4c0:	ldrne	r2, [pc, #44]	; c4f4 <rb_ssl_connect_common+0xf4>
    c4c4:	movne	r3, r5
    c4c8:	addne	r2, pc, r2
    c4cc:	movne	r1, #2
    c4d0:	bne	c4a4 <rb_ssl_connect_common+0xa4>
    c4d4:	bl	4d14 <__errno_location@plt>
    c4d8:	mov	r3, #5
    c4dc:	mov	r2, r5
    c4e0:	mov	r1, #6
    c4e4:	str	r3, [r0]
    c4e8:	str	r7, [r4, #64]	; 0x40
    c4ec:	b	c46c <rb_ssl_connect_common+0x6c>
    c4f0:	.word	0xffffff5c
    c4f4:	.word	0xffffff30

0000c4f8 <rb_ssl_tryconn>:
    c4f8:	cmp	r1, #0
    c4fc:	beq	c504 <rb_ssl_tryconn+0xc>
    c500:	b	c3c8 <rb_ssl_connect_realcb>
    c504:	push	{r4, r5, r6, lr}
    c508:	mov	r5, r2
    c50c:	ldrb	r3, [r0, #17]
    c510:	mov	r4, r0
    c514:	orr	r3, r3, #32
    c518:	strb	r3, [r0, #17]
    c51c:	mov	r3, r2
    c520:	ldr	r2, [pc, #36]	; c54c <rb_ssl_tryconn+0x54>
    c524:	ldr	r1, [r5, #8]
    c528:	add	r2, pc, r2
    c52c:	bl	4408 <rb_settimeout@plt>
    c530:	mov	r0, r4
    c534:	mov	r1, #1
    c538:	bl	c324 <rb_ssl_init_fd>
    c53c:	mov	r1, r5
    c540:	mov	r0, r4
    c544:	pop	{r4, r5, r6, lr}
    c548:	b	c400 <rb_ssl_connect_common>
    c54c:	.word	0xfffffec4

0000c550 <rb_ssl_shutdown>:
    c550:	push	{r4, r5, r6, lr}
    c554:	subs	r4, r0, #0
    c558:	popeq	{r4, r5, r6, pc}
    c55c:	ldr	r3, [r4, #56]	; 0x38
    c560:	cmp	r3, #0
    c564:	popeq	{r4, r5, r6, pc}
    c568:	bl	bf74 <rb_ssl_last_err>
    c56c:	mov	r5, #4
    c570:	ldr	r0, [r4, #56]	; 0x38
    c574:	bl	4ad4 <SSL_shutdown@plt>
    c578:	mov	r6, r0
    c57c:	mov	r1, r0
    c580:	ldr	r0, [r4, #56]	; 0x38
    c584:	bl	4cd8 <SSL_get_error@plt>
    c588:	cmp	r6, #0
    c58c:	bge	c5a4 <rb_ssl_shutdown+0x54>
    c590:	sub	r0, r0, #2
    c594:	cmp	r0, #1
    c598:	bhi	c5a4 <rb_ssl_shutdown+0x54>
    c59c:	subs	r5, r5, #1
    c5a0:	bne	c570 <rb_ssl_shutdown+0x20>
    c5a4:	ldr	r0, [r4, #56]	; 0x38
    c5a8:	bl	4990 <SSL_free@plt>
    c5ac:	mov	r3, #0
    c5b0:	str	r3, [r4, #56]	; 0x38
    c5b4:	pop	{r4, r5, r6, pc}

0000c5b8 <rb_init_ssl>:
    c5b8:	ldr	r1, [pc, #28]	; c5dc <rb_init_ssl+0x24>
    c5bc:	ldr	r0, [pc, #28]	; c5e0 <rb_init_ssl+0x28>
    c5c0:	add	r1, pc, r1
    c5c4:	push	{r4, lr}
    c5c8:	add	r1, r1, #27
    c5cc:	add	r0, pc, r0
    c5d0:	bl	4948 <rb_lib_log@plt>
    c5d4:	mov	r0, #1
    c5d8:	pop	{r4, pc}
    c5dc:	.word	0x00007f81
    c5e0:	.word	0x00008184

0000c5e4 <rb_setup_ssl_server>:
    c5e4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
    c5e8:	subs	r5, r0, #0
    c5ec:	bne	c610 <rb_setup_ssl_server+0x2c>
    c5f0:	ldr	r1, [pc, #764]	; c8f4 <rb_setup_ssl_server+0x310>
    c5f4:	ldr	r0, [pc, #764]	; c8f8 <rb_setup_ssl_server+0x314>
    c5f8:	add	r1, pc, r1
    c5fc:	add	r1, r1, #436	; 0x1b4
    c600:	add	r1, r1, #3
    c604:	add	r0, pc, r0
    c608:	bl	4948 <rb_lib_log@plt>
    c60c:	b	c674 <rb_setup_ssl_server+0x90>
    c610:	cmp	r1, #0
    c614:	mov	r7, r1
    c618:	moveq	r7, r5
    c61c:	cmp	r3, #0
    c620:	mov	r8, r2
    c624:	mov	r6, r3
    c628:	ldreq	r6, [pc, #716]	; c8fc <rb_setup_ssl_server+0x318>
    c62c:	addeq	r6, pc, r6
    c630:	addeq	r6, r6, #39	; 0x27
    c634:	bl	bf74 <rb_ssl_last_err>
    c638:	bl	4390 <TLS_method@plt>
    c63c:	bl	4b4c <SSL_CTX_new@plt>
    c640:	subs	r4, r0, #0
    c644:	bne	c680 <rb_setup_ssl_server+0x9c>
    c648:	bl	bf74 <rb_ssl_last_err>
    c64c:	bl	bf98 <rb_ssl_strerror>
    c650:	ldr	r1, [pc, #680]	; c900 <rb_setup_ssl_server+0x31c>
    c654:	add	r1, pc, r1
    c658:	add	r1, r1, #436	; 0x1b4
    c65c:	add	r1, r1, #3
    c660:	mov	r2, r0
    c664:	ldr	r0, [pc, #664]	; c904 <rb_setup_ssl_server+0x320>
    c668:	add	r0, pc, r0
    c66c:	bl	4948 <rb_lib_log@plt>
    c670:	mov	r5, #0
    c674:	mov	r0, r5
    c678:	add	sp, sp, #8
    c67c:	pop	{r4, r5, r6, r7, r8, pc}
    c680:	mov	r1, r5
    c684:	bl	4858 <SSL_CTX_use_certificate_chain_file@plt>
    c688:	cmp	r0, #1
    c68c:	mov	r2, r0
    c690:	beq	c6cc <rb_setup_ssl_server+0xe8>
    c694:	bl	bf74 <rb_ssl_last_err>
    c698:	bl	bf98 <rb_ssl_strerror>
    c69c:	ldr	r1, [pc, #612]	; c908 <rb_setup_ssl_server+0x324>
    c6a0:	mov	r2, r5
    c6a4:	add	r1, pc, r1
    c6a8:	add	r1, r1, #436	; 0x1b4
    c6ac:	add	r1, r1, #3
    c6b0:	mov	r3, r0
    c6b4:	ldr	r0, [pc, #592]	; c90c <rb_setup_ssl_server+0x328>
    c6b8:	add	r0, pc, r0
    c6bc:	bl	4948 <rb_lib_log@plt>
    c6c0:	mov	r0, r4
    c6c4:	bl	4480 <SSL_CTX_free@plt>
    c6c8:	b	c670 <rb_setup_ssl_server+0x8c>
    c6cc:	mov	r1, r7
    c6d0:	mov	r0, r4
    c6d4:	bl	4954 <SSL_CTX_use_PrivateKey_file@plt>
    c6d8:	cmp	r0, #1
    c6dc:	beq	c70c <rb_setup_ssl_server+0x128>
    c6e0:	bl	bf74 <rb_ssl_last_err>
    c6e4:	bl	bf98 <rb_ssl_strerror>
    c6e8:	ldr	r1, [pc, #544]	; c910 <rb_setup_ssl_server+0x32c>
    c6ec:	mov	r2, r7
    c6f0:	add	r1, pc, r1
    c6f4:	add	r1, r1, #436	; 0x1b4
    c6f8:	add	r1, r1, #3
    c6fc:	mov	r3, r0
    c700:	ldr	r0, [pc, #524]	; c914 <rb_setup_ssl_server+0x330>
    c704:	add	r0, pc, r0
    c708:	b	c6bc <rb_setup_ssl_server+0xd8>
    c70c:	cmp	r8, #0
    c710:	bne	c768 <rb_setup_ssl_server+0x184>
    c714:	ldr	r1, [pc, #508]	; c918 <rb_setup_ssl_server+0x334>
    c718:	ldr	r0, [pc, #508]	; c91c <rb_setup_ssl_server+0x338>
    c71c:	add	r1, pc, r1
    c720:	add	r1, r1, #436	; 0x1b4
    c724:	add	r1, r1, #3
    c728:	add	r0, pc, r0
    c72c:	bl	4948 <rb_lib_log@plt>
    c730:	mov	r1, r6
    c734:	mov	r0, r4
    c738:	bl	4414 <SSL_CTX_set_cipher_list@plt>
    c73c:	cmp	r0, #1
    c740:	mov	r5, r0
    c744:	beq	c82c <rb_setup_ssl_server+0x248>
    c748:	ldr	r1, [pc, #464]	; c920 <rb_setup_ssl_server+0x33c>
    c74c:	ldr	r0, [pc, #464]	; c924 <rb_setup_ssl_server+0x340>
    c750:	add	r1, pc, r1
    c754:	add	r1, r1, #436	; 0x1b4
    c758:	add	r1, r1, #3
    c75c:	add	r0, pc, r0
    c760:	bl	4948 <rb_lib_log@plt>
    c764:	b	c6c0 <rb_setup_ssl_server+0xdc>
    c768:	ldr	r1, [pc, #440]	; c928 <rb_setup_ssl_server+0x344>
    c76c:	mov	r0, r8
    c770:	add	r1, pc, r1
    c774:	bl	4630 <fopen@plt>
    c778:	mov	r5, #0
    c77c:	str	r5, [sp, #4]
    c780:	subs	r7, r0, #0
    c784:	bne	c7bc <rb_setup_ssl_server+0x1d8>
    c788:	bl	4d14 <__errno_location@plt>
    c78c:	ldr	r0, [r0]
    c790:	bl	43c0 <strerror@plt>
    c794:	ldr	r1, [pc, #400]	; c92c <rb_setup_ssl_server+0x348>
    c798:	mov	r2, r8
    c79c:	add	r1, pc, r1
    c7a0:	add	r1, r1, #436	; 0x1b4
    c7a4:	add	r1, r1, #3
    c7a8:	mov	r3, r0
    c7ac:	ldr	r0, [pc, #380]	; c930 <rb_setup_ssl_server+0x34c>
    c7b0:	add	r0, pc, r0
    c7b4:	bl	4948 <rb_lib_log@plt>
    c7b8:	b	c730 <rb_setup_ssl_server+0x14c>
    c7bc:	mov	r3, r5
    c7c0:	mov	r2, r5
    c7c4:	add	r1, sp, #4
    c7c8:	bl	4a14 <PEM_read_DHparams@plt>
    c7cc:	cmp	r0, #0
    c7d0:	bne	c80c <rb_setup_ssl_server+0x228>
    c7d4:	bl	bf74 <rb_ssl_last_err>
    c7d8:	bl	bf98 <rb_ssl_strerror>
    c7dc:	ldr	r1, [pc, #336]	; c934 <rb_setup_ssl_server+0x350>
    c7e0:	mov	r2, r8
    c7e4:	add	r1, pc, r1
    c7e8:	add	r1, r1, #436	; 0x1b4
    c7ec:	add	r1, r1, #3
    c7f0:	mov	r3, r0
    c7f4:	ldr	r0, [pc, #316]	; c938 <rb_setup_ssl_server+0x354>
    c7f8:	add	r0, pc, r0
    c7fc:	bl	4948 <rb_lib_log@plt>
    c800:	mov	r0, r7
    c804:	bl	45a0 <fclose@plt>
    c808:	b	c730 <rb_setup_ssl_server+0x14c>
    c80c:	ldr	r3, [sp, #4]
    c810:	mov	r2, r5
    c814:	mov	r1, #3
    c818:	mov	r0, r4
    c81c:	bl	4690 <SSL_CTX_ctrl@plt>
    c820:	ldr	r0, [sp, #4]
    c824:	bl	4a98 <DH_free@plt>
    c828:	b	c800 <rb_setup_ssl_server+0x21c>
    c82c:	mov	r3, #0
    c830:	mov	r2, r3
    c834:	mov	r1, #44	; 0x2c
    c838:	mov	r0, r4
    c83c:	bl	4690 <SSL_CTX_ctrl@plt>
    c840:	ldr	r2, [pc, #244]	; c93c <rb_setup_ssl_server+0x358>
    c844:	mov	r1, #5
    c848:	add	r2, pc, r2
    c84c:	mov	r0, r4
    c850:	bl	4d44 <SSL_CTX_set_verify@plt>
    c854:	mov	r1, #2048	; 0x800
    c858:	mov	r0, r4
    c85c:	bl	4534 <SSL_CTX_clear_options@plt>
    c860:	mov	r1, #67108864	; 0x4000000
    c864:	mov	r0, r4
    c868:	bl	4870 <SSL_CTX_set_options@plt>
    c86c:	mov	r1, #16384	; 0x4000
    c870:	mov	r0, r4
    c874:	bl	4870 <SSL_CTX_set_options@plt>
    c878:	mov	r1, #4194304	; 0x400000
    c87c:	mov	r0, r4
    c880:	bl	4870 <SSL_CTX_set_options@plt>
    c884:	mov	r1, #0
    c888:	mov	r0, r4
    c88c:	bl	4870 <SSL_CTX_set_options@plt>
    c890:	mov	r1, #0
    c894:	mov	r0, r4
    c898:	bl	4870 <SSL_CTX_set_options@plt>
    c89c:	ldr	r3, [pc, #156]	; c940 <rb_setup_ssl_server+0x35c>
    c8a0:	mov	r2, #0
    c8a4:	add	r3, pc, r3
    c8a8:	mov	r1, #92	; 0x5c
    c8ac:	mov	r0, r4
    c8b0:	bl	4690 <SSL_CTX_ctrl@plt>
    c8b4:	ldr	r3, [pc, #136]	; c944 <rb_setup_ssl_server+0x360>
    c8b8:	add	r3, pc, r3
    c8bc:	ldr	r0, [r3, #512]	; 0x200
    c8c0:	cmp	r0, #0
    c8c4:	beq	c8cc <rb_setup_ssl_server+0x2e8>
    c8c8:	bl	4480 <SSL_CTX_free@plt>
    c8cc:	ldr	r3, [pc, #116]	; c948 <rb_setup_ssl_server+0x364>
    c8d0:	ldr	r1, [pc, #116]	; c94c <rb_setup_ssl_server+0x368>
    c8d4:	add	r3, pc, r3
    c8d8:	add	r1, pc, r1
    c8dc:	ldr	r0, [pc, #108]	; c950 <rb_setup_ssl_server+0x36c>
    c8e0:	add	r1, r1, #436	; 0x1b4
    c8e4:	str	r4, [r3, #512]	; 0x200
    c8e8:	add	r1, r1, #3
    c8ec:	add	r0, pc, r0
    c8f0:	b	c608 <rb_setup_ssl_server+0x24>
    c8f4:	.word	0x00007f49
    c8f8:	.word	0x0000816c
    c8fc:	.word	0x00007f15
    c900:	.word	0x00007eed
    c904:	.word	0x0000812a
    c908:	.word	0x00007e9d
    c90c:	.word	0x000080ee
    c910:	.word	0x00007e51
    c914:	.word	0x000080d4
    c918:	.word	0x00007e25
    c91c:	.word	0x000080db
    c920:	.word	0x00007df1
    c924:	.word	0x00008101
    c928:	.word	0x000085e8
    c92c:	.word	0x00007da5
    c930:	.word	0x00008077
    c934:	.word	0x00007d5d
    c938:	.word	0x00008044
    c93c:	.word	0xfffff6f0
    c940:	.word	0x00019bc0
    c944:	.word	0x0002c164
    c948:	.word	0x0002c148
    c94c:	.word	0x00007c69
    c950:	.word	0x00007fae

0000c954 <rb_init_prng>:
    c954:	push	{r4, r5, r6, lr}
    c958:	mov	r5, r1
    c95c:	mov	r4, r0
    c960:	bl	bf74 <rb_ssl_last_err>
    c964:	cmp	r5, #0
    c968:	bne	c9a8 <rb_init_prng+0x54>
    c96c:	mvn	r1, #0
    c970:	mov	r0, r4
    c974:	bl	4450 <RAND_load_file@plt>
    c978:	cmp	r0, #0
    c97c:	bge	c9a8 <rb_init_prng+0x54>
    c980:	bl	bf74 <rb_ssl_last_err>
    c984:	bl	bf98 <rb_ssl_strerror>
    c988:	ldr	r1, [pc, #124]	; ca0c <rb_init_prng+0xb8>
    c98c:	add	r1, pc, r1
    c990:	add	r1, r1, #456	; 0x1c8
    c994:	add	r1, r1, #3
    c998:	mov	r2, r0
    c99c:	ldr	r0, [pc, #108]	; ca10 <rb_init_prng+0xbc>
    c9a0:	add	r0, pc, r0
    c9a4:	bl	4948 <rb_lib_log@plt>
    c9a8:	bl	4be8 <RAND_status@plt>
    c9ac:	cmp	r0, #1
    c9b0:	mov	r4, r0
    c9b4:	beq	c9ec <rb_init_prng+0x98>
    c9b8:	bl	bf74 <rb_ssl_last_err>
    c9bc:	bl	bf98 <rb_ssl_strerror>
    c9c0:	ldr	r1, [pc, #76]	; ca14 <rb_init_prng+0xc0>
    c9c4:	mov	r4, #0
    c9c8:	add	r1, pc, r1
    c9cc:	add	r1, r1, #456	; 0x1c8
    c9d0:	add	r1, r1, #3
    c9d4:	mov	r2, r0
    c9d8:	ldr	r0, [pc, #56]	; ca18 <rb_init_prng+0xc4>
    c9dc:	add	r0, pc, r0
    c9e0:	bl	4948 <rb_lib_log@plt>
    c9e4:	mov	r0, r4
    c9e8:	pop	{r4, r5, r6, pc}
    c9ec:	ldr	r1, [pc, #40]	; ca1c <rb_init_prng+0xc8>
    c9f0:	ldr	r0, [pc, #40]	; ca20 <rb_init_prng+0xcc>
    c9f4:	add	r1, pc, r1
    c9f8:	add	r1, r1, #456	; 0x1c8
    c9fc:	add	r1, r1, #3
    ca00:	add	r0, pc, r0
    ca04:	bl	4948 <rb_lib_log@plt>
    ca08:	b	c9e4 <rb_init_prng+0x90>
    ca0c:	.word	0x00007bb5
    ca10:	.word	0x00007f1b
    ca14:	.word	0x00007b79
    ca18:	.word	0x00007ef6
    ca1c:	.word	0x00007b4d
    ca20:	.word	0x00007ee6

0000ca24 <rb_get_random>:
    ca24:	push	{r4, r5, r6, lr}
    ca28:	mov	r4, r0
    ca2c:	mov	r5, r1
    ca30:	bl	bf74 <rb_ssl_last_err>
    ca34:	mov	r1, r5
    ca38:	mov	r0, r4
    ca3c:	bl	4b10 <RAND_bytes@plt>
    ca40:	cmp	r0, #1
    ca44:	popeq	{r4, r5, r6, pc}
    ca48:	bl	bf74 <rb_ssl_last_err>
    ca4c:	bl	bf98 <rb_ssl_strerror>
    ca50:	ldr	r1, [pc, #28]	; ca74 <rb_get_random+0x50>
    ca54:	add	r1, pc, r1
    ca58:	add	r1, r1, #472	; 0x1d8
    ca5c:	mov	r2, r0
    ca60:	ldr	r0, [pc, #16]	; ca78 <rb_get_random+0x54>
    ca64:	add	r0, pc, r0
    ca68:	bl	4948 <rb_lib_log@plt>
    ca6c:	mov	r0, #0
    ca70:	pop	{r4, r5, r6, pc}
    ca74:	.word	0x00007aed
    ca78:	.word	0x00007e97

0000ca7c <rb_get_ssl_strerror>:
    ca7c:	ldr	r0, [r0, #64]	; 0x40
    ca80:	b	bf98 <rb_ssl_strerror>

0000ca84 <rb_get_ssl_certfp>:
    ca84:	push	{r4, r5, r6, r7, r8, lr}
    ca88:	subs	r4, r0, #0
    ca8c:	bne	ca9c <rb_get_ssl_certfp+0x18>
    ca90:	mov	r4, #0
    ca94:	mov	r0, r4
    ca98:	pop	{r4, r5, r6, r7, r8, pc}
    ca9c:	ldr	r0, [r4, #56]	; 0x38
    caa0:	cmp	r0, #0
    caa4:	beq	ca90 <rb_get_ssl_certfp+0xc>
    caa8:	mov	r6, r2
    caac:	mov	r5, r1
    cab0:	bl	4a50 <SSL_get_peer_certificate@plt>
    cab4:	subs	r7, r0, #0
    cab8:	beq	ca90 <rb_get_ssl_certfp+0xc>
    cabc:	ldr	r0, [r4, #56]	; 0x38
    cac0:	bl	4a74 <SSL_get_verify_result@plt>
    cac4:	cmp	r0, #27
    cac8:	movhi	r4, #0
    cacc:	bhi	caf4 <rb_get_ssl_certfp+0x70>
    cad0:	mov	r3, #1
    cad4:	ldr	r4, [pc, #36]	; cb00 <rb_get_ssl_certfp+0x7c>
    cad8:	ands	r4, r4, r3, lsl r0
    cadc:	beq	caf4 <rb_get_ssl_certfp+0x70>
    cae0:	mov	r2, r6
    cae4:	mov	r1, r5
    cae8:	mov	r0, r7
    caec:	bl	bfbc <make_certfp>
    caf0:	mov	r4, r0
    caf4:	mov	r0, r7
    caf8:	bl	4c90 <X509_free@plt>
    cafc:	b	ca94 <rb_get_ssl_certfp+0x10>
    cb00:	.word	0x083c0001

0000cb04 <rb_get_ssl_certfp_file>:
    cb04:	push	{r4, r5, r6, r7, r8, lr}
    cb08:	mov	r4, r1
    cb0c:	ldr	r1, [pc, #100]	; cb78 <rb_get_ssl_certfp_file+0x74>
    cb10:	mov	r7, r2
    cb14:	add	r1, pc, r1
    cb18:	bl	4630 <fopen@plt>
    cb1c:	subs	r5, r0, #0
    cb20:	mvneq	r4, #0
    cb24:	beq	cb4c <rb_get_ssl_certfp_file+0x48>
    cb28:	mov	r3, #0
    cb2c:	mov	r2, r3
    cb30:	mov	r1, r3
    cb34:	bl	4834 <PEM_read_X509@plt>
    cb38:	subs	r6, r0, #0
    cb3c:	bne	cb54 <rb_get_ssl_certfp_file+0x50>
    cb40:	mov	r0, r5
    cb44:	bl	45a0 <fclose@plt>
    cb48:	mov	r4, r6
    cb4c:	mov	r0, r4
    cb50:	pop	{r4, r5, r6, r7, r8, pc}
    cb54:	mov	r1, r4
    cb58:	mov	r2, r7
    cb5c:	bl	bfbc <make_certfp>
    cb60:	mov	r4, r0
    cb64:	mov	r0, r6
    cb68:	bl	4c90 <X509_free@plt>
    cb6c:	mov	r0, r5
    cb70:	bl	45a0 <fclose@plt>
    cb74:	b	cb4c <rb_get_ssl_certfp_file+0x48>
    cb78:	.word	0x00008244

0000cb7c <rb_get_ssl_info>:
    cb7c:	push	{r4, r5, r6, r7, lr}
    cb80:	sub	sp, sp, #20
    cb84:	mov	r4, r0
    cb88:	mov	r5, r1
    cb8c:	bl	46f0 <OpenSSL_version_num@plt>
    cb90:	ldr	r6, [pc, #112]	; cc08 <rb_get_ssl_info+0x8c>
    cb94:	cmp	r0, r6
    cb98:	bne	cbc8 <rb_get_ssl_info+0x4c>
    cb9c:	ldr	r2, [pc, #104]	; cc0c <rb_get_ssl_info+0x90>
    cba0:	mov	r3, r0
    cba4:	add	r2, pc, r2
    cba8:	str	r2, [sp]
    cbac:	ldr	r2, [pc, #92]	; cc10 <rb_get_ssl_info+0x94>
    cbb0:	mov	r1, r5
    cbb4:	add	r2, pc, r2
    cbb8:	mov	r0, r4
    cbbc:	bl	4bdc <snprintf@plt>
    cbc0:	add	sp, sp, #20
    cbc4:	pop	{r4, r5, r6, r7, pc}
    cbc8:	bl	46f0 <OpenSSL_version_num@plt>
    cbcc:	mov	r7, r0
    cbd0:	mov	r0, #0
    cbd4:	bl	4cc0 <OpenSSL_version@plt>
    cbd8:	ldr	r3, [pc, #52]	; cc14 <rb_get_ssl_info+0x98>
    cbdc:	ldr	r2, [pc, #52]	; cc18 <rb_get_ssl_info+0x9c>
    cbe0:	add	r3, pc, r3
    cbe4:	str	r3, [sp]
    cbe8:	str	r7, [sp, #4]
    cbec:	mov	r3, r6
    cbf0:	add	r2, pc, r2
    cbf4:	mov	r1, r5
    cbf8:	str	r0, [sp, #8]
    cbfc:	mov	r0, r4
    cc00:	bl	4bdc <snprintf@plt>
    cc04:	b	cbc0 <rb_get_ssl_info+0x44>
    cc08:	.word	0x1010104f
    cc0c:	.word	0x00007d8e
    cc10:	.word	0x00007d5a
    cc14:	.word	0x00007d52
    cc18:	.word	0x00007d5e

0000cc1c <rb_ssl_get_cipher>:
    cc1c:	push	{r0, r1, r2, r4, r5, lr}
    cc20:	subs	r4, r0, #0
    cc24:	beq	cc70 <rb_ssl_get_cipher+0x54>
    cc28:	ldr	r0, [r4, #56]	; 0x38
    cc2c:	cmp	r0, #0
    cc30:	beq	cc74 <rb_ssl_get_cipher+0x58>
    cc34:	bl	4ce4 <SSL_get_version@plt>
    cc38:	mov	r5, r0
    cc3c:	ldr	r0, [r4, #56]	; 0x38
    cc40:	bl	4540 <SSL_get_current_cipher@plt>
    cc44:	bl	46d8 <SSL_CIPHER_get_name@plt>
    cc48:	ldr	r4, [pc, #44]	; cc7c <rb_ssl_get_cipher+0x60>
    cc4c:	ldr	r2, [pc, #44]	; cc80 <rb_ssl_get_cipher+0x64>
    cc50:	add	r4, pc, r4
    cc54:	add	r4, r4, #516	; 0x204
    cc58:	mov	r3, r5
    cc5c:	add	r2, pc, r2
    cc60:	mov	r1, #512	; 0x200
    cc64:	str	r0, [sp]
    cc68:	mov	r0, r4
    cc6c:	bl	4bdc <snprintf@plt>
    cc70:	mov	r0, r4
    cc74:	add	sp, sp, #12
    cc78:	pop	{r4, r5, pc}
    cc7c:	.word	0x0002bdcc
    cc80:	.word	0x00007d25

0000cc84 <rb_ssl_read>:
    cc84:	mov	r3, #0
    cc88:	push	{r0, r1, r2, lr}
    cc8c:	str	r2, [sp]
    cc90:	mov	r2, r1
    cc94:	mov	r1, r0
    cc98:	mov	r0, r3
    cc9c:	bl	c0e0 <rb_ssl_read_or_write>
    cca0:	add	sp, sp, #12
    cca4:	pop	{pc}		; (ldr pc, [sp], #4)

0000cca8 <rb_ssl_write>:
    cca8:	push	{r0, r1, r2, lr}
    ccac:	mov	r3, r1
    ccb0:	str	r2, [sp]
    ccb4:	mov	r1, r0
    ccb8:	mov	r2, #0
    ccbc:	mov	r0, #1
    ccc0:	bl	c0e0 <rb_ssl_read_or_write>
    ccc4:	add	sp, sp, #12
    ccc8:	pop	{pc}		; (ldr pc, [sp], #4)

0000cccc <rb_supports_ssl>:
    cccc:	mov	r0, #1
    ccd0:	bx	lr

0000ccd4 <rb_ssl_handshake_count>:
    ccd4:	ldr	r0, [r0, #60]	; 0x3c
    ccd8:	bx	lr

0000ccdc <rb_ssl_clear_handshake_count>:
    ccdc:	mov	r3, #0
    cce0:	str	r3, [r0, #60]	; 0x3c
    cce4:	bx	lr

0000cce8 <rb_ssl_start_accepted>:
    cce8:	push	{r4, r5, r6, r7, r8, lr}
    ccec:	mov	r6, r3
    ccf0:	ldrb	r3, [r0, #17]
    ccf4:	mov	r4, r0
    ccf8:	mov	r7, r1
    ccfc:	orr	r3, r3, #32
    cd00:	strb	r3, [r0, #17]
    cd04:	mov	r0, #144	; 0x90
    cd08:	mov	r5, r2
    cd0c:	bl	c1c8 <rb_malloc>
    cd10:	mov	r2, #128	; 0x80
    cd14:	str	r0, [r4, #52]	; 0x34
    cd18:	str	r5, [r0, #140]	; 0x8c
    cd1c:	mov	r5, #0
    cd20:	mov	r1, r5
    cd24:	str	r7, [r0, #132]	; 0x84
    cd28:	str	r5, [r0, #128]	; 0x80
    cd2c:	bl	4648 <memset@plt>
    cd30:	ldr	r2, [pc, #44]	; cd64 <rb_ssl_start_accepted+0x7c>
    cd34:	mov	r3, r5
    cd38:	mov	r1, r6
    cd3c:	mov	r0, r4
    cd40:	add	r2, pc, r2
    cd44:	bl	4408 <rb_settimeout@plt>
    cd48:	mov	r1, r5
    cd4c:	mov	r0, r4
    cd50:	bl	c324 <rb_ssl_init_fd>
    cd54:	mov	r1, r5
    cd58:	mov	r0, r4
    cd5c:	pop	{r4, r5, r6, r7, r8, lr}
    cd60:	b	c1e4 <rb_ssl_accept_common>
    cd64:	.word	0xfffff200

0000cd68 <rb_ssl_accept_setup>:
    cd68:	push	{r4, r5, r6, r7, r8, lr}
    cd6c:	mov	r5, r3
    cd70:	ldrb	r3, [r1, #17]
    cd74:	mov	r7, r0
    cd78:	mov	r0, #144	; 0x90
    cd7c:	orr	r3, r3, #32
    cd80:	strb	r3, [r1, #17]
    cd84:	mov	r4, r1
    cd88:	mov	r6, r2
    cd8c:	bl	c1c8 <rb_malloc>
    cd90:	str	r0, [r4, #52]	; 0x34
    cd94:	ldr	r2, [r7, #52]	; 0x34
    cd98:	ldr	r1, [r2, #132]	; 0x84
    cd9c:	ldr	r2, [r2, #140]	; 0x8c
    cda0:	str	r1, [r0, #132]	; 0x84
    cda4:	str	r2, [r0, #140]	; 0x8c
    cda8:	str	r5, [r0, #128]	; 0x80
    cdac:	mov	r2, #128	; 0x80
    cdb0:	mov	r1, #0
    cdb4:	bl	4648 <memset@plt>
    cdb8:	mov	r2, r5
    cdbc:	mov	r1, r6
    cdc0:	ldr	r0, [r4, #52]	; 0x34
    cdc4:	bl	4828 <memcpy@plt>
    cdc8:	ldr	r2, [pc, #44]	; cdfc <rb_ssl_accept_setup+0x94>
    cdcc:	mov	r0, r4
    cdd0:	mov	r3, #0
    cdd4:	add	r2, pc, r2
    cdd8:	mov	r1, #10
    cddc:	bl	4408 <rb_settimeout@plt>
    cde0:	mov	r0, r4
    cde4:	mov	r1, #0
    cde8:	bl	c324 <rb_ssl_init_fd>
    cdec:	mov	r0, r4
    cdf0:	mov	r1, #0
    cdf4:	pop	{r4, r5, r6, r7, r8, lr}
    cdf8:	b	c1e4 <rb_ssl_accept_common>
    cdfc:	.word	0xfffff16c

0000ce00 <rb_ssl_listen>:
    ce00:	push	{r4, lr}
    ce04:	mov	r4, r0
    ce08:	bl	4c24 <rb_listen@plt>
    ce0c:	mov	r3, #52	; 0x34
    ce10:	strb	r3, [r4, #17]
    ce14:	pop	{r4, pc}

0000ce18 <rb_connect_tcp_ssl>:
    ce18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ce1c:	subs	r4, r0, #0
    ce20:	ldr	r9, [sp, #32]
    ce24:	ldr	r8, [sp, #36]	; 0x24
    ce28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    ce2c:	mov	r0, #12
    ce30:	mov	r7, r3
    ce34:	mov	r6, r2
    ce38:	mov	r5, r1
    ce3c:	bl	c1c8 <rb_malloc>
    ce40:	ldr	r3, [pc, #36]	; ce6c <rb_connect_tcp_ssl+0x54>
    ce44:	mov	r2, r6
    ce48:	mov	r1, r5
    ce4c:	add	r3, pc, r3
    ce50:	stm	r0, {r7, r9}
    ce54:	str	r8, [r0, #8]
    ce58:	str	r0, [sp, #32]
    ce5c:	str	r8, [sp, #36]	; 0x24
    ce60:	mov	r0, r4
    ce64:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    ce68:	b	4444 <rb_connect_tcp@plt>
    ce6c:	.word	0xfffff6a4

0000ce70 <rb_ssl_start_connected>:
    ce70:	push	{r4, r5, r6, r7, r8, lr}
    ce74:	subs	r4, r0, #0
    ce78:	popeq	{r4, r5, r6, r7, r8, pc}
    ce7c:	mov	r0, #12
    ce80:	mov	r6, r2
    ce84:	mov	r7, r1
    ce88:	mov	r8, r3
    ce8c:	bl	c1c8 <rb_malloc>
    ce90:	mov	r5, r0
    ce94:	str	r6, [r0, #4]
    ce98:	str	r7, [r0]
    ce9c:	str	r8, [r0, #8]
    cea0:	mov	r0, #268	; 0x10c
    cea4:	bl	c1c8 <rb_malloc>
    cea8:	ldr	r2, [pc, #68]	; cef4 <rb_ssl_start_connected+0x84>
    ceac:	add	r2, pc, r2
    ceb0:	str	r0, [r4, #48]	; 0x30
    ceb4:	str	r7, [r0, #260]	; 0x104
    ceb8:	str	r6, [r0, #264]	; 0x108
    cebc:	ldrb	r3, [r4, #17]
    cec0:	mov	r0, r4
    cec4:	orr	r3, r3, #32
    cec8:	strb	r3, [r4, #17]
    cecc:	mov	r3, r5
    ced0:	ldr	r1, [r5, #8]
    ced4:	bl	4408 <rb_settimeout@plt>
    ced8:	mov	r0, r4
    cedc:	mov	r1, #1
    cee0:	bl	c324 <rb_ssl_init_fd>
    cee4:	mov	r1, r5
    cee8:	mov	r0, r4
    ceec:	pop	{r4, r5, r6, r7, r8, lr}
    cef0:	b	c400 <rb_ssl_connect_common>
    cef4:	.word	0xfffff540

0000cef8 <rb_free>:
    cef8:	cmp	r0, #0
    cefc:	bxeq	lr
    cf00:	b	4714 <free@plt>

0000cf04 <rb_event_frequency.part.0>:
    cf04:	cmp	r0, #0
    cf08:	rsblt	r0, r0, #0
    cf0c:	push	{r4, lr}
    cf10:	mov	r1, #3
    cf14:	lsl	r0, r0, #1
    cf18:	bl	1341c <__divsi3>
    cf1c:	mov	r4, r0
    cf20:	bl	4b70 <rand@plt>
    cf24:	mov	r1, #1000	; 0x3e8
    cf28:	bl	1363c <__aeabi_idivmod>
    cf2c:	mul	r0, r4, r1
    cf30:	mov	r1, #1000	; 0x3e8
    cf34:	bl	1341c <__divsi3>
    cf38:	add	r0, r0, r4
    cf3c:	pop	{r4, pc}

0000cf40 <rb_event_add_common>:
    cf40:	push	{r4, r5, r6, r7, r8, lr}
    cf44:	mov	r8, r0
    cf48:	mov	r7, r1
    cf4c:	mov	r0, #1
    cf50:	mov	r1, #48	; 0x30
    cf54:	mov	r6, r2
    cf58:	mov	r5, r3
    cf5c:	bl	460c <calloc@plt>
    cf60:	subs	r4, r0, #0
    cf64:	bne	cf6c <rb_event_add_common+0x2c>
    cf68:	bl	49b4 <rb_outofmemory@plt>
    cf6c:	str	r7, [r4, #12]
    cf70:	mov	r0, #33	; 0x21
    cf74:	bl	49d8 <malloc@plt>
    cf78:	subs	r7, r0, #0
    cf7c:	beq	cf68 <rb_event_add_common+0x28>
    cf80:	mov	r2, #33	; 0x21
    cf84:	mov	r1, r8
    cf88:	bl	46c0 <rb_strlcpy@plt>
    cf8c:	str	r7, [r4, #20]
    cf90:	str	r6, [r4, #16]
    cf94:	bl	4810 <rb_current_time@plt>
    cf98:	ldr	r1, [pc, #152]	; d038 <rb_event_add_common+0xf8>
    cf9c:	ldr	r3, [sp, #24]
    cfa0:	add	r1, pc, r1
    cfa4:	str	r3, [r4, #24]
    cfa8:	ldr	ip, [r1]
    cfac:	mov	r3, #0
    cfb0:	cmn	ip, #1
    cfb4:	movne	r2, #0
    cfb8:	moveq	r2, #1
    cfbc:	str	r3, [r4, #44]	; 0x2c
    cfc0:	str	r3, [r4, #4]
    cfc4:	str	r5, [r4, #32]
    cfc8:	str	r4, [r4]
    cfcc:	add	r0, r0, r5
    cfd0:	cmp	r0, ip
    cfd4:	orrlt	r2, r2, #1
    cfd8:	cmp	r2, r3
    cfdc:	ldr	r3, [pc, #88]	; d03c <rb_event_add_common+0xfc>
    cfe0:	strne	r0, [r1]
    cfe4:	add	r3, pc, r3
    cfe8:	str	r0, [r4, #28]
    cfec:	ldr	r2, [r3]
    cff0:	cmp	r2, #0
    cff4:	str	r2, [r4, #8]
    cff8:	strne	r4, [r2, #4]
    cffc:	bne	d00c <rb_event_add_common+0xcc>
    d000:	ldr	r2, [r3, #4]
    d004:	cmp	r2, #0
    d008:	streq	r4, [r3, #4]
    d00c:	ldr	r3, [pc, #44]	; d040 <rb_event_add_common+0x100>
    d010:	mov	r1, r5
    d014:	add	r3, pc, r3
    d018:	mov	r0, r4
    d01c:	ldr	r2, [r3, #8]
    d020:	str	r4, [r3]
    d024:	add	r2, r2, #1
    d028:	str	r2, [r3, #8]
    d02c:	bl	af90 <rb_io_sched_event>
    d030:	mov	r0, r4
    d034:	pop	{r4, r5, r6, r7, r8, pc}
    d038:	.word	0x000194e0
    d03c:	.word	0x0002be3c
    d040:	.word	0x0002be0c

0000d044 <rb_event_add>:
    d044:	cmp	r3, #0
    d048:	push	{r0, r1, r4, r5, r6, lr}
    d04c:	mov	r4, r0
    d050:	mov	r5, r1
    d054:	mov	r6, r2
    d058:	bgt	d074 <rb_event_add+0x30>
    d05c:	mov	r1, r0
    d060:	ldr	r0, [pc, #40]	; d090 <rb_event_add+0x4c>
    d064:	mov	r2, r3
    d068:	add	r0, pc, r0
    d06c:	bl	4948 <rb_lib_log@plt>
    d070:	mov	r3, #1
    d074:	str	r3, [sp]
    d078:	mov	r2, r6
    d07c:	mov	r1, r5
    d080:	mov	r0, r4
    d084:	bl	cf40 <rb_event_add_common>
    d088:	add	sp, sp, #8
    d08c:	pop	{r4, r5, r6, pc}
    d090:	.word	0x00007920

0000d094 <rb_event_addonce>:
    d094:	cmp	r3, #0
    d098:	push	{r0, r1, r4, r5, r6, lr}
    d09c:	mov	r4, r0
    d0a0:	mov	r5, r1
    d0a4:	mov	r6, r2
    d0a8:	bgt	d0c4 <rb_event_addonce+0x30>
    d0ac:	mov	r1, r0
    d0b0:	ldr	r0, [pc, #44]	; d0e4 <rb_event_addonce+0x50>
    d0b4:	mov	r2, r3
    d0b8:	add	r0, pc, r0
    d0bc:	bl	4948 <rb_lib_log@plt>
    d0c0:	mov	r3, #1
    d0c4:	mov	r2, #0
    d0c8:	str	r2, [sp]
    d0cc:	mov	r1, r5
    d0d0:	mov	r2, r6
    d0d4:	mov	r0, r4
    d0d8:	bl	cf40 <rb_event_add_common>
    d0dc:	add	sp, sp, #8
    d0e0:	pop	{r4, r5, r6, pc}
    d0e4:	.word	0x00007914

0000d0e8 <rb_event_delete>:
    d0e8:	subs	r3, r0, #0
    d0ec:	bxeq	lr
    d0f0:	mov	r2, #1
    d0f4:	str	r2, [r3, #44]	; 0x2c
    d0f8:	b	afec <rb_io_unsched_event>

0000d0fc <rb_event_find_delete>:
    d0fc:	ldr	r3, [pc, #60]	; d140 <rb_event_find_delete+0x44>
    d100:	add	r3, pc, r3
    d104:	ldr	r3, [r3]
    d108:	cmp	r3, #0
    d10c:	bne	d11c <rb_event_find_delete+0x20>
    d110:	mov	r2, r3
    d114:	mov	r0, r2
    d118:	b	44bc <rb_event_delete@plt>
    d11c:	ldr	r2, [r3]
    d120:	ldr	ip, [r2, #12]
    d124:	cmp	r0, ip
    d128:	bne	d138 <rb_event_find_delete+0x3c>
    d12c:	ldr	ip, [r2, #16]
    d130:	cmp	r1, ip
    d134:	beq	d114 <rb_event_find_delete+0x18>
    d138:	ldr	r3, [r3, #8]
    d13c:	b	d108 <rb_event_find_delete+0xc>
    d140:	.word	0x0002bd20

0000d144 <rb_event_addish>:
    d144:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d148:	mov	r5, r0
    d14c:	eor	r0, r3, r3, asr #31
    d150:	sub	r0, r0, r3, asr #31
    d154:	mov	r6, r1
    d158:	vmov	s15, r0
    d15c:	mov	r7, r2
    d160:	vcvt.f64.s32	d6, s15
    d164:	vldr	d7, [pc, #68]	; d1b0 <rb_event_addish+0x6c>
    d168:	vcmpe.f64	d6, d7
    d16c:	vmrs	APSR_nzcv, fpscr
    d170:	movlt	r4, r0
    d174:	blt	d18c <rb_event_addish+0x48>
    d178:	rsb	r4, r0, #0
    d17c:	cmp	r3, #0
    d180:	mov	r0, r4
    d184:	beq	d18c <rb_event_addish+0x48>
    d188:	bl	cf04 <rb_event_frequency.part.0>
    d18c:	mov	r3, r0
    d190:	str	r4, [sp]
    d194:	mov	r2, r7
    d198:	mov	r1, r6
    d19c:	mov	r0, r5
    d1a0:	bl	cf40 <rb_event_add_common>
    d1a4:	add	sp, sp, #12
    d1a8:	pop	{r4, r5, r6, r7, pc}
    d1ac:	nop			; (mov r0, r0)
    d1b0:	.word	0x00000000
    d1b4:	.word	0x40080000

0000d1b8 <rb_run_one_event>:
    d1b8:	push	{r4, r5, r6, lr}
    d1bc:	mov	r4, r0
    d1c0:	ldr	r1, [r0, #20]
    d1c4:	ldr	r0, [pc, #124]	; d248 <rb_run_one_event+0x90>
    d1c8:	mov	r2, #33	; 0x21
    d1cc:	add	r0, pc, r0
    d1d0:	add	r0, r0, #12
    d1d4:	bl	46c0 <rb_strlcpy@plt>
    d1d8:	ldr	r3, [r4, #12]
    d1dc:	ldr	r0, [r4, #16]
    d1e0:	blx	r3
    d1e4:	ldr	r3, [r4, #24]
    d1e8:	cmp	r3, #0
    d1ec:	bne	d1fc <rb_run_one_event+0x44>
    d1f0:	mov	r0, r4
    d1f4:	pop	{r4, r5, r6, lr}
    d1f8:	b	44bc <rb_event_delete@plt>
    d1fc:	bl	4810 <rb_current_time@plt>
    d200:	mov	r5, r0
    d204:	ldr	r0, [r4, #24]
    d208:	cmp	r0, #0
    d20c:	bge	d214 <rb_run_one_event+0x5c>
    d210:	bl	cf04 <rb_event_frequency.part.0>
    d214:	ldr	r2, [pc, #48]	; d24c <rb_run_one_event+0x94>
    d218:	add	r0, r5, r0
    d21c:	add	r2, pc, r2
    d220:	str	r0, [r4, #28]
    d224:	ldr	r1, [r2]
    d228:	cmn	r1, #1
    d22c:	movne	r3, #0
    d230:	moveq	r3, #1
    d234:	cmp	r0, r1
    d238:	orrlt	r3, r3, #1
    d23c:	cmp	r3, #0
    d240:	strne	r0, [r2]
    d244:	pop	{r4, r5, r6, pc}
    d248:	.word	0x0002bc54
    d24c:	.word	0x00019264

0000d250 <rb_event_run>:
    d250:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d254:	bl	b038 <rb_io_supports_event>
    d258:	cmp	r0, #0
    d25c:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    d260:	ldr	r3, [pc, #428]	; d414 <rb_event_run+0x1c4>
    d264:	mvn	r2, #0
    d268:	add	r3, pc, r3
    d26c:	str	r2, [r3]
    d270:	ldr	r3, [pc, #416]	; d418 <rb_event_run+0x1c8>
    d274:	add	r3, pc, r3
    d278:	ldr	r3, [r3]
    d27c:	cmp	r3, #0
    d280:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    d284:	ldr	r8, [pc, #400]	; d41c <rb_event_run+0x1cc>
    d288:	ldr	r7, [pc, #400]	; d420 <rb_event_run+0x1d0>
    d28c:	add	r8, pc, r8
    d290:	ldr	r6, [r3, #8]
    d294:	add	r7, pc, r7
    d298:	add	r9, r8, #12
    d29c:	ldr	r4, [r3]
    d2a0:	ldr	r3, [r4, #44]	; 0x2c
    d2a4:	cmp	r3, #0
    d2a8:	beq	d314 <rb_event_run+0xc4>
    d2ac:	ldr	r3, [r4, #8]
    d2b0:	ldr	r2, [r4, #4]
    d2b4:	cmp	r3, #0
    d2b8:	strne	r2, [r3, #4]
    d2bc:	ldreq	r1, [pc, #352]	; d424 <rb_event_run+0x1d4>
    d2c0:	addeq	r1, pc, r1
    d2c4:	streq	r2, [r1, #4]
    d2c8:	ldr	r2, [r4, #4]
    d2cc:	cmp	r2, #0
    d2d0:	strne	r3, [r2, #8]
    d2d4:	ldreq	r2, [pc, #332]	; d428 <rb_event_run+0x1d8>
    d2d8:	addeq	r2, pc, r2
    d2dc:	streq	r3, [r2]
    d2e0:	ldr	r2, [pc, #324]	; d42c <rb_event_run+0x1dc>
    d2e4:	mov	r3, #0
    d2e8:	add	r2, pc, r2
    d2ec:	str	r3, [r4, #4]
    d2f0:	str	r3, [r4, #8]
    d2f4:	ldr	r3, [r2, #8]
    d2f8:	ldr	r0, [r4, #20]
    d2fc:	sub	r3, r3, #1
    d300:	str	r3, [r2, #8]
    d304:	bl	cef8 <rb_free>
    d308:	mov	r0, r4
    d30c:	bl	cef8 <rb_free>
    d310:	b	d394 <rb_event_run+0x144>
    d314:	ldr	r5, [r4, #28]
    d318:	bl	4810 <rb_current_time@plt>
    d31c:	cmp	r5, r0
    d320:	bgt	d3ec <rb_event_run+0x19c>
    d324:	mov	r2, #33	; 0x21
    d328:	ldr	r1, [r4, #20]
    d32c:	mov	r0, r9
    d330:	bl	46c0 <rb_strlcpy@plt>
    d334:	ldr	r3, [r4, #12]
    d338:	ldr	r0, [r4, #16]
    d33c:	blx	r3
    d340:	ldr	r3, [r4, #24]
    d344:	cmp	r3, #0
    d348:	beq	d3a8 <rb_event_run+0x158>
    d34c:	bl	4810 <rb_current_time@plt>
    d350:	mov	r5, r0
    d354:	ldr	r0, [r4, #24]
    d358:	cmp	r0, #0
    d35c:	bge	d364 <rb_event_run+0x114>
    d360:	bl	cf04 <rb_event_frequency.part.0>
    d364:	ldr	r2, [pc, #196]	; d430 <rb_event_run+0x1e0>
    d368:	add	r0, r5, r0
    d36c:	add	r2, pc, r2
    d370:	str	r0, [r4, #28]
    d374:	ldr	r1, [r2]
    d378:	cmn	r1, #1
    d37c:	movne	r3, #0
    d380:	moveq	r3, #1
    d384:	cmp	r0, r1
    d388:	orrlt	r3, r3, #1
    d38c:	cmp	r3, #0
    d390:	strne	r0, [r2]
    d394:	cmp	r6, #0
    d398:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    d39c:	mov	r3, r6
    d3a0:	ldr	r6, [r6, #8]
    d3a4:	b	d29c <rb_event_run+0x4c>
    d3a8:	ldr	r3, [r4, #8]
    d3ac:	ldr	r2, [r4, #4]
    d3b0:	cmp	r3, #0
    d3b4:	strne	r2, [r3, #4]
    d3b8:	streq	r2, [r8, #4]
    d3bc:	ldr	r2, [r4, #4]
    d3c0:	cmp	r2, #0
    d3c4:	strne	r3, [r2, #8]
    d3c8:	ldreq	r2, [pc, #100]	; d434 <rb_event_run+0x1e4>
    d3cc:	addeq	r2, pc, r2
    d3d0:	streq	r3, [r2]
    d3d4:	ldr	r2, [pc, #92]	; d438 <rb_event_run+0x1e8>
    d3d8:	mov	r3, #0
    d3dc:	str	r3, [r4, #4]
    d3e0:	str	r3, [r4, #8]
    d3e4:	add	r2, pc, r2
    d3e8:	b	d2f4 <rb_event_run+0xa4>
    d3ec:	ldr	r1, [r7]
    d3f0:	ldr	r2, [r4, #28]
    d3f4:	cmn	r1, #1
    d3f8:	movne	r3, #0
    d3fc:	moveq	r3, #1
    d400:	cmp	r2, r1
    d404:	orrlt	r3, r3, #1
    d408:	cmp	r3, #0
    d40c:	strne	r2, [r7]
    d410:	b	d394 <rb_event_run+0x144>
    d414:	.word	0x00019218
    d418:	.word	0x0002bbac
    d41c:	.word	0x0002bb94
    d420:	.word	0x000191ec
    d424:	.word	0x0002bb60
    d428:	.word	0x0002bb48
    d42c:	.word	0x0002bb38
    d430:	.word	0x00019114
    d434:	.word	0x0002ba54
    d438:	.word	0x0002ba3c

0000d43c <rb_event_io_register_all>:
    d43c:	push	{r4, lr}
    d440:	bl	b038 <rb_io_supports_event>
    d444:	cmp	r0, #0
    d448:	popeq	{r4, pc}
    d44c:	ldr	r3, [pc, #32]	; d474 <rb_event_io_register_all+0x38>
    d450:	ldr	r4, [pc, r3]
    d454:	cmp	r4, #0
    d458:	bne	d460 <rb_event_io_register_all+0x24>
    d45c:	pop	{r4, pc}
    d460:	ldr	r0, [r4]
    d464:	ldr	r1, [r0, #32]
    d468:	bl	af90 <rb_io_sched_event>
    d46c:	ldr	r4, [r4, #8]
    d470:	b	d454 <rb_event_io_register_all+0x18>
    d474:	.word	0x0002b9d0

0000d478 <rb_event_init>:
    d478:	ldr	r0, [pc, #20]	; d494 <rb_event_init+0x1c>
    d47c:	ldr	r1, [pc, #20]	; d498 <rb_event_init+0x20>
    d480:	add	r0, pc, r0
    d484:	mov	r2, #33	; 0x21
    d488:	add	r1, pc, r1
    d48c:	add	r0, r0, #12
    d490:	b	46c0 <rb_strlcpy@plt>
    d494:	.word	0x0002b9a0
    d498:	.word	0x00007586

0000d49c <rb_dump_events>:
    d49c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4a0:	sub	sp, sp, #532	; 0x214
    d4a4:	ldr	r5, [pc, #188]	; d568 <rb_dump_events+0xcc>
    d4a8:	ldr	r2, [pc, #188]	; d56c <rb_dump_events+0xd0>
    d4ac:	add	r4, sp, #16
    d4b0:	add	r5, pc, r5
    d4b4:	add	r3, r5, #12
    d4b8:	mov	r6, r0
    d4bc:	mov	r7, r1
    d4c0:	add	r2, pc, r2
    d4c4:	mov	r1, #512	; 0x200
    d4c8:	mov	r0, r4
    d4cc:	bl	4bdc <snprintf@plt>
    d4d0:	mov	r1, r7
    d4d4:	mov	r0, r4
    d4d8:	blx	r6
    d4dc:	ldr	r1, [pc, #140]	; d570 <rb_dump_events+0xd4>
    d4e0:	mov	r2, #512	; 0x200
    d4e4:	add	r1, pc, r1
    d4e8:	mov	r0, r4
    d4ec:	bl	46c0 <rb_strlcpy@plt>
    d4f0:	ldr	r9, [pc, #124]	; d574 <rb_dump_events+0xd8>
    d4f4:	mov	r1, r7
    d4f8:	mov	r0, r4
    d4fc:	blx	r6
    d500:	ldr	r5, [r5]
    d504:	add	r9, pc, r9
    d508:	mov	sl, #512	; 0x200
    d50c:	cmp	r5, #0
    d510:	bne	d51c <rb_dump_events+0x80>
    d514:	add	sp, sp, #532	; 0x214
    d518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d51c:	ldr	fp, [r5]
    d520:	ldr	r3, [fp, #20]
    d524:	ldr	r8, [fp, #28]
    d528:	str	r3, [sp, #12]
    d52c:	bl	4810 <rb_current_time@plt>
    d530:	ldr	r2, [fp, #24]
    d534:	ldr	r3, [sp, #12]
    d538:	str	r2, [sp, #4]
    d53c:	mov	r1, sl
    d540:	mov	r2, r9
    d544:	sub	r0, r8, r0
    d548:	str	r0, [sp]
    d54c:	mov	r0, r4
    d550:	bl	4bdc <snprintf@plt>
    d554:	mov	r1, r7
    d558:	mov	r0, r4
    d55c:	blx	r6
    d560:	ldr	r5, [r5, #8]
    d564:	b	d50c <rb_dump_events+0x70>
    d568:	.word	0x0002b970
    d56c:	.word	0x00007553
    d570:	.word	0x00007545
    d574:	.word	0x00007551

0000d578 <rb_set_back_events>:
    d578:	ldr	r3, [pc, #52]	; d5b4 <rb_set_back_events+0x3c>
    d57c:	mov	ip, #0
    d580:	add	r3, pc, r3
    d584:	ldr	r3, [r3]
    d588:	cmp	r3, #0
    d58c:	bne	d594 <rb_set_back_events+0x1c>
    d590:	bx	lr
    d594:	ldr	r1, [r3]
    d598:	ldr	r3, [r3, #8]
    d59c:	ldr	r2, [r1, #28]
    d5a0:	cmp	r2, r0
    d5a4:	subgt	r2, r2, r0
    d5a8:	strgt	r2, [r1, #28]
    d5ac:	strle	ip, [r1, #28]
    d5b0:	b	d588 <rb_set_back_events+0x10>
    d5b4:	.word	0x0002b8a0

0000d5b8 <rb_event_update>:
    d5b8:	push	{r4, r5, r6, lr}
    d5bc:	subs	r5, r0, #0
    d5c0:	popeq	{r4, r5, r6, pc}
    d5c4:	cmp	r1, #0
    d5c8:	mov	r4, r1
    d5cc:	str	r1, [r5, #24]
    d5d0:	bge	d5e0 <rb_event_update+0x28>
    d5d4:	mov	r0, r1
    d5d8:	bl	cf04 <rb_event_frequency.part.0>
    d5dc:	mov	r4, r0
    d5e0:	bl	4810 <rb_current_time@plt>
    d5e4:	ldr	r3, [r5, #28]
    d5e8:	add	r0, r0, r4
    d5ec:	cmp	r0, r3
    d5f0:	popge	{r4, r5, r6, pc}
    d5f4:	bl	4810 <rb_current_time@plt>
    d5f8:	add	r0, r0, r4
    d5fc:	str	r0, [r5, #28]
    d600:	pop	{r4, r5, r6, pc}

0000d604 <rb_event_next>:
    d604:	ldr	r3, [pc, #4]	; d610 <rb_event_next+0xc>
    d608:	ldr	r0, [pc, r3]
    d60c:	bx	lr
    d610:	.word	0x00018e78

0000d614 <rb_ctime>:
    d614:	push	{r4, r5, lr}
    d618:	sub	sp, sp, #84	; 0x54
    d61c:	mov	r4, r1
    d620:	str	r0, [sp, #28]
    d624:	add	r1, sp, #36	; 0x24
    d628:	add	r0, sp, #28
    d62c:	mov	r5, r2
    d630:	bl	4a20 <gmtime_r@plt>
    d634:	cmp	r4, #0
    d638:	ldreq	r4, [pc, #152]	; d6d8 <rb_ctime+0xc4>
    d63c:	moveq	r5, #128	; 0x80
    d640:	addeq	r4, pc, r4
    d644:	cmp	r0, #0
    d648:	bne	d66c <rb_ctime+0x58>
    d64c:	ldr	r1, [pc, #136]	; d6dc <rb_ctime+0xc8>
    d650:	mov	r2, r5
    d654:	add	r1, pc, r1
    d658:	mov	r0, r4
    d65c:	bl	46c0 <rb_strlcpy@plt>
    d660:	mov	r0, r4
    d664:	add	sp, sp, #84	; 0x54
    d668:	pop	{r4, r5, pc}
    d66c:	ldr	r3, [r0, #20]
    d670:	ldr	ip, [r0, #24]
    d674:	add	r3, r3, #1888	; 0x760
    d678:	add	r3, r3, #12
    d67c:	str	r3, [sp, #20]
    d680:	ldr	r3, [r0]
    d684:	ldr	r2, [pc, #84]	; d6e0 <rb_ctime+0xcc>
    d688:	str	r3, [sp, #16]
    d68c:	ldr	r3, [r0, #4]
    d690:	add	r2, pc, r2
    d694:	str	r3, [sp, #12]
    d698:	ldr	r3, [r0, #8]
    d69c:	str	r3, [sp, #8]
    d6a0:	ldr	r3, [r0, #12]
    d6a4:	str	r3, [sp, #4]
    d6a8:	ldr	r1, [r0, #16]
    d6ac:	mov	r3, r2
    d6b0:	mov	r0, r4
    d6b4:	add	r2, r2, r1, lsl #2
    d6b8:	ldr	r3, [r3, ip, lsl #2]
    d6bc:	ldr	r2, [r2, #28]
    d6c0:	mov	r1, r5
    d6c4:	str	r2, [sp]
    d6c8:	ldr	r2, [pc, #20]	; d6e4 <rb_ctime+0xd0>
    d6cc:	add	r2, pc, r2
    d6d0:	bl	4bdc <snprintf@plt>
    d6d4:	b	d660 <rb_ctime+0x4c>
    d6d8:	.word	0x0002b810
    d6dc:	.word	0x00006c07
    d6e0:	.word	0x000187c8
    d6e4:	.word	0x000075ee

0000d6e8 <rb_date>:
    d6e8:	push	{r4, r5, lr}
    d6ec:	sub	sp, sp, #84	; 0x54
    d6f0:	mov	r4, r1
    d6f4:	str	r0, [sp, #28]
    d6f8:	add	r1, sp, #36	; 0x24
    d6fc:	add	r0, sp, #28
    d700:	mov	r5, r2
    d704:	bl	4a20 <gmtime_r@plt>
    d708:	cmp	r0, #0
    d70c:	bne	d730 <rb_date+0x48>
    d710:	ldr	r1, [pc, #132]	; d79c <rb_date+0xb4>
    d714:	mov	r2, r5
    d718:	add	r1, pc, r1
    d71c:	mov	r0, r4
    d720:	bl	46c0 <rb_strlcpy@plt>
    d724:	mov	r0, r4
    d728:	add	sp, sp, #84	; 0x54
    d72c:	pop	{r4, r5, pc}
    d730:	ldr	r2, [r0]
    d734:	ldr	r1, [r0, #24]
    d738:	str	r2, [sp, #20]
    d73c:	ldr	r2, [r0, #4]
    d740:	ldr	r3, [pc, #88]	; d7a0 <rb_date+0xb8>
    d744:	str	r2, [sp, #16]
    d748:	ldr	r2, [r0, #8]
    d74c:	add	r3, pc, r3
    d750:	str	r2, [sp, #12]
    d754:	ldr	r2, [r0, #20]
    d758:	add	r1, r3, r1, lsl #2
    d75c:	add	r2, r2, #1888	; 0x760
    d760:	add	r2, r2, #12
    d764:	str	r2, [sp, #8]
    d768:	ldr	r2, [r0, #12]
    d76c:	str	r2, [sp, #4]
    d770:	ldr	r2, [r0, #16]
    d774:	mov	r0, r4
    d778:	add	r3, r3, r2, lsl #2
    d77c:	ldr	r2, [pc, #32]	; d7a4 <rb_date+0xbc>
    d780:	ldr	r3, [r3, #104]	; 0x68
    d784:	add	r2, pc, r2
    d788:	str	r3, [sp]
    d78c:	ldr	r3, [r1, #76]	; 0x4c
    d790:	mov	r1, r5
    d794:	bl	4bdc <snprintf@plt>
    d798:	b	d724 <rb_date+0x3c>
    d79c:	.word	0x00006b43
    d7a0:	.word	0x0001870c
    d7a4:	.word	0x00007551

0000d7a8 <rb_current_time>:
    d7a8:	ldr	r3, [pc, #8]	; d7b8 <rb_current_time+0x10>
    d7ac:	add	r3, pc, r3
    d7b0:	ldr	r0, [r3, #128]	; 0x80
    d7b4:	bx	lr
    d7b8:	.word	0x0002b6a4

0000d7bc <rb_current_time_tv>:
    d7bc:	ldr	r0, [pc, #8]	; d7cc <rb_current_time_tv+0x10>
    d7c0:	add	r0, pc, r0
    d7c4:	add	r0, r0, #128	; 0x80
    d7c8:	bx	lr
    d7cc:	.word	0x0002b690

0000d7d0 <rb_lib_log>:
    d7d0:	push	{r0, r1, r2, r3}
    d7d4:	push	{r0, r1, r2, r4, r5, lr}
    d7d8:	ldr	r4, [pc, #68]	; d824 <rb_lib_log+0x54>
    d7dc:	add	r4, pc, r4
    d7e0:	ldr	r3, [r4, #136]	; 0x88
    d7e4:	cmp	r3, #0
    d7e8:	beq	d814 <rb_lib_log+0x44>
    d7ec:	add	r5, r4, #140	; 0x8c
    d7f0:	add	r3, sp, #28
    d7f4:	ldr	r2, [sp, #24]
    d7f8:	mov	r1, #512	; 0x200
    d7fc:	mov	r0, r5
    d800:	str	r3, [sp, #4]
    d804:	bl	457c <vsnprintf@plt>
    d808:	ldr	r3, [r4, #136]	; 0x88
    d80c:	mov	r0, r5
    d810:	blx	r3
    d814:	add	sp, sp, #12
    d818:	pop	{r4, r5, lr}
    d81c:	add	sp, sp, #16
    d820:	bx	lr
    d824:	.word	0x0002b674

0000d828 <rb_lib_die>:
    d828:	push	{r0, r1, r2, r3}
    d82c:	push	{r0, r1, r2, r4, r5, lr}
    d830:	ldr	r4, [pc, #72]	; d880 <rb_lib_die+0x58>
    d834:	add	r4, pc, r4
    d838:	ldr	r3, [r4, #652]	; 0x28c
    d83c:	cmp	r3, #0
    d840:	bne	d848 <rb_lib_die+0x20>
    d844:	bl	43e4 <abort@plt>
    d848:	add	r5, r4, #140	; 0x8c
    d84c:	add	r3, sp, #28
    d850:	ldr	r2, [sp, #24]
    d854:	mov	r1, #512	; 0x200
    d858:	mov	r0, r5
    d85c:	str	r3, [sp, #4]
    d860:	bl	457c <vsnprintf@plt>
    d864:	ldr	r3, [r4, #652]	; 0x28c
    d868:	mov	r0, r5
    d86c:	blx	r3
    d870:	add	sp, sp, #12
    d874:	pop	{r4, r5, lr}
    d878:	add	sp, sp, #16
    d87c:	bx	lr
    d880:	.word	0x0002b61c

0000d884 <rb_lib_restart>:
    d884:	ldr	r4, [pc, #68]	; d8d0 <rb_lib_restart+0x4c>
    d888:	push	{r0, r1, r2, r3}
    d88c:	add	r4, pc, r4
    d890:	push	{r0, r1, r2, lr}
    d894:	ldr	r3, [r4, #656]	; 0x290
    d898:	cmp	r3, #0
    d89c:	bne	d8a4 <rb_lib_restart+0x20>
    d8a0:	bl	43e4 <abort@plt>
    d8a4:	add	r5, r4, #140	; 0x8c
    d8a8:	add	r3, sp, #20
    d8ac:	ldr	r2, [sp, #16]
    d8b0:	mov	r1, #512	; 0x200
    d8b4:	mov	r0, r5
    d8b8:	str	r3, [sp, #4]
    d8bc:	bl	457c <vsnprintf@plt>
    d8c0:	ldr	r3, [r4, #656]	; 0x290
    d8c4:	mov	r0, r5
    d8c8:	blx	r3
    d8cc:	b	d8a0 <rb_lib_restart+0x1c>
    d8d0:	.word	0x0002b5c4

0000d8d4 <rb_set_time>:
    d8d4:	push	{r0, r1, r4, lr}
    d8d8:	mov	r1, #0
    d8dc:	mov	r0, sp
    d8e0:	bl	45dc <rb_gettimeofday@plt>
    d8e4:	cmn	r0, #1
    d8e8:	bne	d914 <rb_set_time+0x40>
    d8ec:	bl	4d14 <__errno_location@plt>
    d8f0:	ldr	r0, [r0]
    d8f4:	bl	43c0 <strerror@plt>
    d8f8:	mov	r1, r0
    d8fc:	ldr	r0, [pc, #80]	; d954 <rb_set_time+0x80>
    d900:	add	r0, pc, r0
    d904:	bl	4948 <rb_lib_log@plt>
    d908:	ldr	r0, [pc, #72]	; d958 <rb_set_time+0x84>
    d90c:	add	r0, pc, r0
    d910:	bl	4a8c <rb_lib_restart@plt>
    d914:	ldr	r2, [pc, #64]	; d95c <rb_set_time+0x88>
    d918:	ldr	r3, [sp]
    d91c:	add	r2, pc, r2
    d920:	mov	r4, sp
    d924:	ldr	r0, [r2, #128]	; 0x80
    d928:	cmp	r3, r0
    d92c:	bge	d938 <rb_set_time+0x64>
    d930:	sub	r0, r0, r3
    d934:	bl	d578 <rb_set_back_events>
    d938:	ldr	r3, [pc, #32]	; d960 <rb_set_time+0x8c>
    d93c:	ldm	r4, {r0, r1}
    d940:	add	r3, pc, r3
    d944:	add	r3, r3, #128	; 0x80
    d948:	stm	r3, {r0, r1}
    d94c:	add	sp, sp, #8
    d950:	pop	{r4, pc}
    d954:	.word	0x000073fa
    d958:	.word	0x00007401
    d95c:	.word	0x0002b534
    d960:	.word	0x0002b510

0000d964 <rb_lib_version>:
    d964:	push	{r4, r5, lr}
    d968:	sub	sp, sp, #524	; 0x20c
    d96c:	add	r5, sp, #8
    d970:	mov	r0, r5
    d974:	mov	r1, #512	; 0x200
    d978:	ldr	r4, [pc, #64]	; d9c0 <rb_lib_version+0x5c>
    d97c:	bl	cb7c <rb_get_ssl_info>
    d980:	ldr	r3, [pc, #60]	; d9c4 <rb_lib_version+0x60>
    d984:	add	r4, pc, r4
    d988:	ldr	r2, [pc, #56]	; d9c8 <rb_lib_version+0x64>
    d98c:	ldr	r3, [r4, r3]
    d990:	ldr	r4, [pc, #52]	; d9cc <rb_lib_version+0x68>
    d994:	str	r5, [sp]
    d998:	add	r4, pc, r4
    d99c:	add	r4, r4, #660	; 0x294
    d9a0:	ldr	r3, [r3]
    d9a4:	add	r2, pc, r2
    d9a8:	mov	r1, #640	; 0x280
    d9ac:	mov	r0, r4
    d9b0:	bl	4bdc <snprintf@plt>
    d9b4:	mov	r0, r4
    d9b8:	add	sp, sp, #524	; 0x20c
    d9bc:	pop	{r4, r5, pc}
    d9c0:	.word	0x00018674
    d9c4:	.word	0x000003b0
    d9c8:	.word	0x00007377
    d9cc:	.word	0x0002b4b8

0000d9d0 <rb_lib_init>:
    d9d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d9d4:	mov	r5, r3
    d9d8:	mov	sl, r0
    d9dc:	mov	r9, r1
    d9e0:	mov	r8, r2
    d9e4:	ldr	r6, [sp, #32]
    d9e8:	ldr	r4, [sp, #36]	; 0x24
    d9ec:	ldr	r7, [sp, #40]	; 0x28
    d9f0:	bl	49c0 <rb_set_time@plt>
    d9f4:	ldr	ip, [pc, #68]	; da40 <rb_lib_init+0x70>
    d9f8:	add	ip, pc, ip
    d9fc:	str	sl, [ip, #136]	; 0x88
    da00:	str	r9, [ip, #656]	; 0x290
    da04:	str	r8, [ip, #652]	; 0x28c
    da08:	bl	4624 <rb_event_init@plt>
    da0c:	bl	4a08 <rb_init_bh@plt>
    da10:	mov	r2, r7
    da14:	mov	r1, r6
    da18:	mov	r0, r5
    da1c:	bl	4b28 <rb_fdlist_init@plt>
    da20:	bl	43a8 <rb_init_netio@plt>
    da24:	mov	r0, r4
    da28:	bl	4900 <rb_init_rb_dlink_nodes@plt>
    da2c:	bl	b038 <rb_io_supports_event>
    da30:	cmp	r0, #0
    da34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    da38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    da3c:	b	b054 <rb_io_init_event>
    da40:	.word	0x0002b458

0000da44 <rb_lib_loop>:
    da44:	push	{r7, lr}
    da48:	mov	r5, r0
    da4c:	bl	49c0 <rb_set_time@plt>
    da50:	bl	b038 <rb_io_supports_event>
    da54:	cmp	r0, #0
    da58:	mvneq	r7, #0
    da5c:	moveq	r6, #1000	; 0x3e8
    da60:	beq	da74 <rb_lib_loop+0x30>
    da64:	mvn	r4, #0
    da68:	mov	r0, r4
    da6c:	bl	4564 <rb_select@plt>
    da70:	b	da68 <rb_lib_loop+0x24>
    da74:	cmp	r5, #0
    da78:	movne	r0, r5
    da7c:	bne	daa4 <rb_lib_loop+0x60>
    da80:	bl	4c60 <rb_event_next@plt>
    da84:	subs	r4, r0, #0
    da88:	movle	r0, r7
    da8c:	ble	daa4 <rb_lib_loop+0x60>
    da90:	bl	4810 <rb_current_time@plt>
    da94:	sub	r0, r4, r0
    da98:	cmp	r0, #0
    da9c:	mulgt	r0, r6, r0
    daa0:	movle	r0, r6
    daa4:	bl	4564 <rb_select@plt>
    daa8:	bl	49f0 <rb_event_run@plt>
    daac:	b	da74 <rb_lib_loop+0x30>

0000dab0 <rb_strtok_r>:
    dab0:	b	4a80 <strtok_r@plt>

0000dab4 <rb_base64_encode>:
    dab4:	cmn	r1, #2
    dab8:	blt	dbe0 <rb_base64_encode+0x12c>
    dabc:	push	{r4, r5, r6, lr}
    dac0:	mov	r4, r1
    dac4:	mov	r5, r0
    dac8:	mov	r1, #3
    dacc:	add	r0, r4, #2
    dad0:	bl	1341c <__divsi3>
    dad4:	add	r1, r0, r0, lsl #2
    dad8:	mov	r0, #1
    dadc:	bl	460c <calloc@plt>
    dae0:	cmp	r0, #0
    dae4:	beq	db74 <rb_base64_encode+0xc0>
    dae8:	ldr	lr, [pc, #248]	; dbe8 <rb_base64_encode+0x134>
    daec:	mov	r2, r5
    daf0:	mov	r1, r0
    daf4:	add	lr, pc, lr
    daf8:	cmp	r4, #2
    dafc:	mov	r3, r1
    db00:	mov	ip, r2
    db04:	add	r1, r1, #4
    db08:	add	r2, r2, #3
    db0c:	bgt	db78 <rb_base64_encode+0xc4>
    db10:	cmp	r4, #0
    db14:	beq	db68 <rb_base64_encode+0xb4>
    db18:	ldrb	r2, [ip]
    db1c:	ldr	lr, [pc, #200]	; dbec <rb_base64_encode+0x138>
    db20:	cmp	r4, #2
    db24:	add	lr, pc, lr
    db28:	ldrb	r5, [lr, r2, lsr #2]
    db2c:	lsl	r2, r2, #4
    db30:	strb	r5, [r3]
    db34:	bne	dbc8 <rb_base64_encode+0x114>
    db38:	ldrb	ip, [ip, #1]
    db3c:	and	r2, r2, #48	; 0x30
    db40:	add	r2, lr, r2
    db44:	ldrb	r2, [r2, ip, lsr #4]
    db48:	lsl	ip, ip, #2
    db4c:	and	ip, ip, #60	; 0x3c
    db50:	strb	r2, [r3, #1]
    db54:	ldrb	r2, [lr, ip]
    db58:	strb	r2, [r3, #2]
    db5c:	mov	r2, #61	; 0x3d
    db60:	strb	r2, [r3, #3]
    db64:	mov	r3, r1
    db68:	mov	r2, #0
    db6c:	strb	r2, [r3]
    db70:	pop	{r4, r5, r6, pc}
    db74:	bl	49b4 <rb_outofmemory@plt>
    db78:	ldrb	ip, [r2, #-3]
    db7c:	sub	r4, r4, #3
    db80:	ldrb	r3, [lr, ip, lsr #2]
    db84:	lsl	ip, ip, #4
    db88:	and	ip, ip, #48	; 0x30
    db8c:	strb	r3, [r1, #-4]
    db90:	ldrb	r3, [r2, #-2]
    db94:	add	ip, lr, ip
    db98:	ldrb	ip, [ip, r3, lsr #4]
    db9c:	lsl	r3, r3, #2
    dba0:	and	r3, r3, #60	; 0x3c
    dba4:	strb	ip, [r1, #-3]
    dba8:	ldrb	ip, [r2, #-1]
    dbac:	add	r3, lr, r3
    dbb0:	ldrb	r3, [r3, ip, lsr #6]
    dbb4:	and	ip, ip, #63	; 0x3f
    dbb8:	strb	r3, [r1, #-2]
    dbbc:	ldrb	r3, [lr, ip]
    dbc0:	strb	r3, [r1, #-1]
    dbc4:	b	daf8 <rb_base64_encode+0x44>
    dbc8:	and	r2, r2, #48	; 0x30
    dbcc:	ldrb	r2, [lr, r2]
    dbd0:	strb	r2, [r3, #1]
    dbd4:	mov	r2, #61	; 0x3d
    dbd8:	strb	r2, [r3, #2]
    dbdc:	b	db60 <rb_base64_encode+0xac>
    dbe0:	mov	r0, #0
    dbe4:	bx	lr
    dbe8:	.word	0x00006f84
    dbec:	.word	0x00006f54

0000dbf0 <rb_base64_decode>:
    dbf0:	push	{r4, r5, r6, r7, r8, lr}
    dbf4:	mov	r5, r0
    dbf8:	mov	r4, r1
    dbfc:	mov	r0, #1
    dc00:	add	r1, r1, #1
    dc04:	mov	r6, r2
    dc08:	bl	460c <calloc@plt>
    dc0c:	cmp	r0, #0
    dc10:	beq	dc54 <rb_base64_decode+0x64>
    dc14:	ldr	r7, [pc, #272]	; dd2c <rb_base64_decode+0x13c>
    dc18:	mov	r3, #0
    dc1c:	mov	r1, r4
    dc20:	mov	lr, r3
    dc24:	add	r7, pc, r7
    dc28:	ldrb	ip, [r5], #1
    dc2c:	cmp	ip, #0
    dc30:	beq	dc44 <rb_base64_decode+0x54>
    dc34:	cmp	r1, #0
    dc38:	bgt	dc58 <rb_base64_decode+0x68>
    dc3c:	cmp	ip, #61	; 0x3d
    dc40:	beq	dc60 <rb_base64_decode+0x70>
    dc44:	mov	r2, #0
    dc48:	strb	r2, [r0, r3]
    dc4c:	str	r3, [r6]
    dc50:	pop	{r4, r5, r6, r7, r8, pc}
    dc54:	bl	49b4 <rb_outofmemory@plt>
    dc58:	cmp	ip, #61	; 0x3d
    dc5c:	bne	dc88 <rb_base64_decode+0x98>
    dc60:	and	lr, lr, #3
    dc64:	cmp	lr, #2
    dc68:	beq	dd14 <rb_base64_decode+0x124>
    dc6c:	cmp	lr, #3
    dc70:	beq	dd24 <rb_base64_decode+0x134>
    dc74:	cmp	lr, #1
    dc78:	bne	dc44 <rb_base64_decode+0x54>
    dc7c:	bl	4714 <free@plt>
    dc80:	mov	r0, #0
    dc84:	pop	{r4, r5, r6, r7, r8, pc}
    dc88:	add	ip, r7, ip, lsl #1
    dc8c:	ldrsh	ip, [ip, #66]	; 0x42
    dc90:	cmp	ip, #0
    dc94:	blt	dce0 <rb_base64_decode+0xf0>
    dc98:	and	r2, lr, #3
    dc9c:	cmp	r2, #2
    dca0:	beq	dce8 <rb_base64_decode+0xf8>
    dca4:	cmp	r2, #3
    dca8:	beq	dd00 <rb_base64_decode+0x110>
    dcac:	cmp	r2, #1
    dcb0:	lslne	ip, ip, #2
    dcb4:	strbne	ip, [r0, r3]
    dcb8:	movne	r4, r3
    dcbc:	bne	dcd8 <rb_base64_decode+0xe8>
    dcc0:	ldrb	r2, [r0, r3]
    dcc4:	add	r4, r3, #1
    dcc8:	orr	r2, r2, ip, asr #4
    dccc:	lsl	ip, ip, #4
    dcd0:	strb	r2, [r0, r3]
    dcd4:	strb	ip, [r0, r4]
    dcd8:	add	lr, lr, #1
    dcdc:	mov	r3, r4
    dce0:	sub	r1, r1, #1
    dce4:	b	dc28 <rb_base64_decode+0x38>
    dce8:	ldrb	r2, [r0, r3]
    dcec:	add	r4, r3, #1
    dcf0:	orr	r2, r2, ip, asr #2
    dcf4:	strb	r2, [r0, r3]
    dcf8:	lsl	ip, ip, #6
    dcfc:	b	dcd4 <rb_base64_decode+0xe4>
    dd00:	ldrb	r2, [r0, r3]
    dd04:	add	r4, r3, #1
    dd08:	orr	ip, r2, ip
    dd0c:	strb	ip, [r0, r3]
    dd10:	b	dcd8 <rb_base64_decode+0xe8>
    dd14:	add	r2, r3, #1
    dd18:	mov	r1, #0
    dd1c:	strb	r1, [r0, r2]
    dd20:	b	dc44 <rb_base64_decode+0x54>
    dd24:	mov	r2, r3
    dd28:	b	dd18 <rb_base64_decode+0x128>
    dd2c:	.word	0x00006e54

0000dd30 <rb_outofmemory>:
    dd30:	ldr	r3, [pc, #52]	; dd6c <rb_outofmemory+0x3c>
    dd34:	push	{r4, lr}
    dd38:	add	r3, pc, r3
    dd3c:	ldr	r2, [r3]
    dd40:	cmp	r2, #0
    dd44:	beq	dd4c <rb_outofmemory+0x1c>
    dd48:	bl	43e4 <abort@plt>
    dd4c:	ldr	r0, [pc, #28]	; dd70 <rb_outofmemory+0x40>
    dd50:	mov	r2, #1
    dd54:	add	r0, pc, r0
    dd58:	str	r2, [r3]
    dd5c:	bl	4948 <rb_lib_log@plt>
    dd60:	ldr	r0, [pc, #12]	; dd74 <rb_outofmemory+0x44>
    dd64:	add	r0, pc, r0
    dd68:	bl	4a8c <rb_lib_restart@plt>
    dd6c:	.word	0x0002b62c
    dd70:	.word	0x000070b5
    dd74:	.word	0x000070c9

0000dd78 <rb_linebuf_skip_crlf>:
    dd78:	mov	r3, r1
    dd7c:	cmp	r3, #0
    dd80:	mov	r2, r0
    dd84:	bne	dd90 <rb_linebuf_skip_crlf+0x18>
    dd88:	sub	r0, r1, r3
    dd8c:	bx	lr
    dd90:	ldrb	ip, [r0], #1
    dd94:	cmp	ip, #10
    dd98:	cmpne	ip, #13
    dd9c:	subne	r3, r3, #1
    dda0:	bne	dd7c <rb_linebuf_skip_crlf+0x4>
    dda4:	sub	r2, r2, #1
    dda8:	ldrb	r0, [r2, #1]!
    ddac:	cmp	r0, #13
    ddb0:	cmpne	r0, #10
    ddb4:	bne	dd88 <rb_linebuf_skip_crlf+0x10>
    ddb8:	subs	r3, r3, #1
    ddbc:	bne	dda8 <rb_linebuf_skip_crlf+0x30>
    ddc0:	b	dd88 <rb_linebuf_skip_crlf+0x10>

0000ddc4 <rb_linebuf_new_line>:
    ddc4:	push	{r4, r5, r6, lr}
    ddc8:	mov	r4, r0
    ddcc:	ldr	r6, [pc, #136]	; de5c <rb_linebuf_new_line+0x98>
    ddd0:	add	r6, pc, r6
    ddd4:	ldr	r0, [r6]
    ddd8:	bl	4984 <rb_bh_alloc@plt>
    dddc:	subs	r5, r0, #0
    dde0:	beq	de54 <rb_linebuf_new_line+0x90>
    dde4:	ldr	r3, [r6, #4]
    dde8:	add	r3, r3, #1
    ddec:	str	r3, [r6, #4]
    ddf0:	bl	4bac <rb_make_rb_dlink_node@plt>
    ddf4:	mov	r3, #0
    ddf8:	str	r3, [r0, #8]
    ddfc:	ldr	r3, [r4, #4]
    de00:	str	r5, [r0]
    de04:	cmp	r3, #0
    de08:	str	r3, [r0, #4]
    de0c:	strne	r0, [r3, #8]
    de10:	bne	de20 <rb_linebuf_new_line+0x5c>
    de14:	ldr	r3, [r4]
    de18:	cmp	r3, #0
    de1c:	streq	r0, [r4]
    de20:	ldr	r3, [r4, #8]
    de24:	str	r0, [r4, #4]
    de28:	add	r3, r3, #1
    de2c:	str	r3, [r4, #8]
    de30:	ldr	r3, [r5, #1032]	; 0x408
    de34:	add	r3, r3, #1
    de38:	str	r3, [r5, #1032]	; 0x408
    de3c:	ldr	r3, [r4, #16]
    de40:	add	r3, r3, #1
    de44:	str	r3, [r4, #16]
    de48:	ldr	r3, [r4, #24]
    de4c:	add	r3, r3, #1
    de50:	str	r3, [r4, #24]
    de54:	mov	r0, r5
    de58:	pop	{r4, r5, r6, pc}
    de5c:	.word	0x0002b598

0000de60 <rb_linebuf_done_line>:
    de60:	ldr	r3, [r2, #8]
    de64:	push	{r4, r5, r6, lr}
    de68:	mov	r5, r1
    de6c:	ldr	r1, [r2, #4]
    de70:	cmp	r3, #0
    de74:	strne	r1, [r3, #4]
    de78:	streq	r1, [r0, #4]
    de7c:	ldr	r1, [r2, #4]
    de80:	mov	r4, r0
    de84:	cmp	r1, #0
    de88:	strne	r3, [r1, #8]
    de8c:	streq	r3, [r0]
    de90:	mov	r3, #0
    de94:	str	r3, [r2, #4]
    de98:	str	r3, [r2, #8]
    de9c:	ldr	r3, [r0, #8]
    dea0:	sub	r3, r3, #1
    dea4:	str	r3, [r0, #8]
    dea8:	mov	r0, r2
    deac:	bl	4864 <rb_free_rb_dlink_node@plt>
    deb0:	ldr	r3, [r4, #16]
    deb4:	ldr	r2, [r5, #1028]	; 0x404
    deb8:	sub	r3, r3, #1
    debc:	str	r3, [r4, #16]
    dec0:	ldr	r3, [r4, #12]
    dec4:	sub	r3, r3, r2
    dec8:	str	r3, [r4, #12]
    decc:	ldr	r3, [r4, #24]
    ded0:	sub	r3, r3, #1
    ded4:	str	r3, [r4, #24]
    ded8:	ldr	r3, [r5, #1032]	; 0x408
    dedc:	sub	r3, r3, #1
    dee0:	cmp	r3, #0
    dee4:	str	r3, [r5, #1032]	; 0x408
    dee8:	popne	{r4, r5, r6, pc}
    deec:	ldr	r3, [pc, #28]	; df10 <rb_linebuf_done_line+0xb0>
    def0:	mov	r1, r5
    def4:	add	r3, pc, r3
    def8:	pop	{r4, r5, r6, lr}
    defc:	ldr	r2, [r3, #4]
    df00:	ldr	r0, [r3]
    df04:	sub	r2, r2, #1
    df08:	str	r2, [r3, #4]
    df0c:	b	48f4 <rb_bh_free@plt>
    df10:	.word	0x0002b474

0000df14 <rb_linebuf_copy_line.isra.1>:
    df14:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df18:	mov	r6, #0
    df1c:	ldr	r8, [r1, #1028]	; 0x404
    df20:	mov	r4, r1
    df24:	add	fp, r1, r8
    df28:	strb	r6, [r1, #1026]	; 0x402
    df2c:	ldrb	r1, [r1, #1025]	; 0x401
    df30:	cmp	r1, #1
    df34:	moveq	r5, r6
    df38:	beq	dfc0 <rb_linebuf_copy_line.isra.1+0xac>
    df3c:	mov	r1, r3
    df40:	mov	r7, r0
    df44:	mov	r0, r2
    df48:	mov	r9, r2
    df4c:	bl	dd78 <rb_linebuf_skip_crlf>
    df50:	cmn	r0, #1
    df54:	mov	r5, r0
    df58:	beq	dfc0 <rb_linebuf_copy_line.isra.1+0xac>
    df5c:	ldr	sl, [pc, #260]	; e068 <rb_linebuf_copy_line.isra.1+0x154>
    df60:	sub	r8, sl, r8
    df64:	cmp	r0, r8
    df68:	ble	dfd0 <rb_linebuf_copy_line.isra.1+0xbc>
    df6c:	mov	r2, r8
    df70:	mov	r1, r9
    df74:	mov	r0, fp
    df78:	bl	4828 <memcpy@plt>
    df7c:	add	r3, r4, #1020	; 0x3fc
    df80:	add	r3, r3, #1
    df84:	sub	r8, r8, r3
    df88:	strb	r6, [r4, #1022]	; 0x3fe
    df8c:	cmn	r8, r3
    df90:	beq	dfa4 <rb_linebuf_copy_line.isra.1+0x90>
    df94:	ldrb	r2, [r3], #-1
    df98:	cmp	r2, #10
    df9c:	cmpne	r2, #13
    dfa0:	beq	dfc8 <rb_linebuf_copy_line.isra.1+0xb4>
    dfa4:	mov	r3, #1
    dfa8:	strb	r3, [r4, #1025]	; 0x401
    dfac:	str	sl, [r4, #1028]	; 0x404
    dfb0:	ldr	r3, [r7]
    dfb4:	add	r3, r3, #1020	; 0x3fc
    dfb8:	add	r3, r3, #2
    dfbc:	str	r3, [r7]
    dfc0:	mov	r0, r5
    dfc4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfc8:	strb	r6, [r3, #1]
    dfcc:	b	df8c <rb_linebuf_copy_line.isra.1+0x78>
    dfd0:	mov	r2, r0
    dfd4:	mov	r1, r9
    dfd8:	mov	r0, fp
    dfdc:	bl	4828 <memcpy@plt>
    dfe0:	add	r2, fp, r5
    dfe4:	strb	r6, [fp, r5]
    dfe8:	ldrb	r3, [r2, #-1]
    dfec:	cmp	r3, #13
    dff0:	cmpne	r3, #10
    dff4:	movne	r3, #1
    dff8:	moveq	r3, #0
    dffc:	moveq	r1, r5
    e000:	beq	e02c <rb_linebuf_copy_line.isra.1+0x118>
    e004:	ldr	r3, [r7]
    e008:	add	r3, r3, r5
    e00c:	str	r3, [r7]
    e010:	ldr	r3, [r4, #1028]	; 0x404
    e014:	strb	r6, [r4, #1025]	; 0x401
    e018:	add	r3, r3, r5
    e01c:	str	r3, [r4, #1028]	; 0x404
    e020:	b	dfc0 <rb_linebuf_copy_line.isra.1+0xac>
    e024:	sub	r1, r1, #1
    e028:	strb	r3, [r2]
    e02c:	cmp	r1, #0
    e030:	beq	e044 <rb_linebuf_copy_line.isra.1+0x130>
    e034:	ldrb	r0, [r2, #-1]!
    e038:	cmp	r0, #10
    e03c:	cmpne	r0, #13
    e040:	beq	e024 <rb_linebuf_copy_line.isra.1+0x110>
    e044:	mov	r3, #1
    e048:	strb	r3, [r4, #1025]	; 0x401
    e04c:	ldr	r3, [r7]
    e050:	add	r3, r3, r1
    e054:	str	r3, [r7]
    e058:	ldr	r3, [r4, #1028]	; 0x404
    e05c:	add	r1, r3, r1
    e060:	str	r1, [r4, #1028]	; 0x404
    e064:	b	dfc0 <rb_linebuf_copy_line.isra.1+0xac>
    e068:	.word	0x000003fe

0000e06c <rb_linebuf_copy_raw.isra.2>:
    e06c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e070:	mov	sl, #1
    e074:	ldr	r6, [r1, #1028]	; 0x404
    e078:	mov	r4, r1
    e07c:	add	r9, r1, r6
    e080:	strb	sl, [r1, #1026]	; 0x402
    e084:	ldrb	r1, [r1, #1025]	; 0x401
    e088:	cmp	r1, sl
    e08c:	moveq	r5, #0
    e090:	beq	e0f8 <rb_linebuf_copy_raw.isra.2+0x8c>
    e094:	mov	r1, r3
    e098:	mov	r8, r0
    e09c:	mov	r0, r2
    e0a0:	mov	r7, r2
    e0a4:	bl	dd78 <rb_linebuf_skip_crlf>
    e0a8:	cmn	r0, #1
    e0ac:	mov	r5, r0
    e0b0:	beq	e0f8 <rb_linebuf_copy_raw.isra.2+0x8c>
    e0b4:	ldr	fp, [pc, #176]	; e16c <rb_linebuf_copy_raw.isra.2+0x100>
    e0b8:	sub	r6, fp, r6
    e0bc:	cmp	r0, r6
    e0c0:	ble	e100 <rb_linebuf_copy_raw.isra.2+0x94>
    e0c4:	mov	r2, r6
    e0c8:	mov	r1, r7
    e0cc:	mov	r0, r9
    e0d0:	bl	4828 <memcpy@plt>
    e0d4:	mov	r3, #0
    e0d8:	strb	r3, [r4, #1022]	; 0x3fe
    e0dc:	strb	sl, [r4, #1025]	; 0x401
    e0e0:	str	fp, [r4, #1028]	; 0x404
    e0e4:	ldr	r3, [r8]
    e0e8:	mov	r5, r6
    e0ec:	add	r3, r3, #1020	; 0x3fc
    e0f0:	add	r3, r3, #2
    e0f4:	str	r3, [r8]
    e0f8:	mov	r0, r5
    e0fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e100:	mov	r2, r0
    e104:	mov	r1, r7
    e108:	mov	r0, r9
    e10c:	bl	4828 <memcpy@plt>
    e110:	add	r3, r9, r5
    e114:	mov	r2, #0
    e118:	strb	r2, [r9, r5]
    e11c:	ldrb	r3, [r3, #-1]
    e120:	cmp	r3, #13
    e124:	cmpne	r3, #10
    e128:	beq	e14c <rb_linebuf_copy_raw.isra.2+0xe0>
    e12c:	ldr	r3, [r8]
    e130:	add	r3, r3, r5
    e134:	str	r3, [r8]
    e138:	ldr	r3, [r4, #1028]	; 0x404
    e13c:	strb	r2, [r4, #1025]	; 0x401
    e140:	add	r3, r3, r5
    e144:	str	r3, [r4, #1028]	; 0x404
    e148:	b	e0f8 <rb_linebuf_copy_raw.isra.2+0x8c>
    e14c:	strb	sl, [r4, #1025]	; 0x401
    e150:	ldr	r3, [r8]
    e154:	add	r3, r3, r5
    e158:	str	r3, [r8]
    e15c:	ldr	r3, [r4, #1028]	; 0x404
    e160:	add	r3, r3, r5
    e164:	str	r3, [r4, #1028]	; 0x404
    e168:	b	e0f8 <rb_linebuf_copy_raw.isra.2+0x8c>
    e16c:	.word	0x000003fe

0000e170 <rb_linebuf_init>:
    e170:	ldr	r2, [pc, #32]	; e198 <rb_linebuf_init+0x28>
    e174:	mov	r1, r0
    e178:	push	{r4, lr}
    e17c:	add	r2, pc, r2
    e180:	ldr	r0, [pc, #20]	; e19c <rb_linebuf_init+0x2c>
    e184:	bl	4ae0 <rb_bh_create@plt>
    e188:	ldr	r3, [pc, #16]	; e1a0 <rb_linebuf_init+0x30>
    e18c:	add	r3, pc, r3
    e190:	str	r0, [r3]
    e194:	pop	{r4, pc}
    e198:	.word	0x00006cbf
    e19c:	.word	0x0000040c
    e1a0:	.word	0x0002b1dc

0000e1a4 <rb_linebuf_newbuf>:
    e1a4:	mov	r2, #28
    e1a8:	mov	r1, #0
    e1ac:	b	4648 <memset@plt>

0000e1b0 <rb_linebuf_donebuf>:
    e1b0:	push	{r4, lr}
    e1b4:	mov	r4, r0
    e1b8:	ldr	r2, [r4]
    e1bc:	cmp	r2, #0
    e1c0:	bne	e1c8 <rb_linebuf_donebuf+0x18>
    e1c4:	pop	{r4, pc}
    e1c8:	ldr	r1, [r2]
    e1cc:	mov	r0, r4
    e1d0:	bl	de60 <rb_linebuf_done_line>
    e1d4:	b	e1b8 <rb_linebuf_donebuf+0x8>

0000e1d8 <rb_linebuf_parse>:
    e1d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e1dc:	mov	r7, r0
    e1e0:	ldr	r4, [r0, #4]
    e1e4:	mov	r6, r1
    e1e8:	cmp	r4, #0
    e1ec:	mov	r5, r2
    e1f0:	mov	r8, r3
    e1f4:	beq	e248 <rb_linebuf_parse+0x70>
    e1f8:	cmp	r8, #0
    e1fc:	mov	r3, r2
    e200:	ldr	r1, [r4]
    e204:	mov	r2, r6
    e208:	add	r0, r0, #12
    e20c:	bne	e228 <rb_linebuf_parse+0x50>
    e210:	bl	df14 <rb_linebuf_copy_line.isra.1>
    e214:	cmn	r0, #1
    e218:	bne	e230 <rb_linebuf_parse+0x58>
    e21c:	mvn	r4, #0
    e220:	mov	r0, r4
    e224:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e228:	bl	e06c <rb_linebuf_copy_raw.isra.2>
    e22c:	b	e214 <rb_linebuf_parse+0x3c>
    e230:	cmp	r0, r5
    e234:	moveq	r4, #1
    e238:	beq	e220 <rb_linebuf_parse+0x48>
    e23c:	sub	r5, r5, r0
    e240:	add	r6, r6, r0
    e244:	mov	r4, #1
    e248:	add	r9, r7, #12
    e24c:	cmp	r5, #0
    e250:	ble	e220 <rb_linebuf_parse+0x48>
    e254:	mov	r0, r7
    e258:	bl	ddc4 <rb_linebuf_new_line>
    e25c:	cmp	r8, #0
    e260:	mov	r3, r5
    e264:	mov	r2, r6
    e268:	mov	r1, r0
    e26c:	mov	r0, r9
    e270:	bne	e290 <rb_linebuf_parse+0xb8>
    e274:	bl	df14 <rb_linebuf_copy_line.isra.1>
    e278:	cmn	r0, #1
    e27c:	beq	e21c <rb_linebuf_parse+0x44>
    e280:	sub	r5, r5, r0
    e284:	add	r6, r6, r0
    e288:	add	r4, r4, #1
    e28c:	b	e24c <rb_linebuf_parse+0x74>
    e290:	bl	e06c <rb_linebuf_copy_raw.isra.2>
    e294:	b	e278 <rb_linebuf_parse+0xa0>

0000e298 <rb_linebuf_get>:
    e298:	push	{r4, r5, r6, r7, r8, lr}
    e29c:	mov	r4, r3
    e2a0:	ldr	r3, [r0]
    e2a4:	ldr	r7, [sp, #24]
    e2a8:	cmp	r3, #0
    e2ac:	moveq	r4, r3
    e2b0:	beq	e328 <rb_linebuf_get+0x90>
    e2b4:	cmp	r4, #0
    e2b8:	mov	r6, r0
    e2bc:	mov	r8, r1
    e2c0:	ldr	r5, [r3]
    e2c4:	bne	e2d4 <rb_linebuf_get+0x3c>
    e2c8:	ldrb	r3, [r5, #1025]	; 0x401
    e2cc:	cmp	r3, #0
    e2d0:	beq	e328 <rb_linebuf_get+0x90>
    e2d4:	ldr	r4, [r5, #1028]	; 0x404
    e2d8:	ldrb	r3, [r5, #1026]	; 0x402
    e2dc:	cmp	r4, r2
    e2e0:	subgt	r4, r2, #1
    e2e4:	adds	r3, r3, #0
    e2e8:	movne	r3, #1
    e2ec:	cmp	r7, #0
    e2f0:	movne	r3, #0
    e2f4:	cmp	r3, #0
    e2f8:	mov	r1, r5
    e2fc:	movne	r3, r5
    e300:	bne	e334 <rb_linebuf_get+0x9c>
    e304:	mov	r2, r4
    e308:	mov	r0, r8
    e30c:	bl	4828 <memcpy@plt>
    e310:	cmp	r7, #0
    e314:	strbeq	r7, [r8, r4]
    e318:	mov	r1, r5
    e31c:	ldr	r2, [r6]
    e320:	mov	r0, r6
    e324:	bl	de60 <rb_linebuf_done_line>
    e328:	mov	r0, r4
    e32c:	pop	{r4, r5, r6, r7, r8, pc}
    e330:	sub	r4, r4, #1
    e334:	cmp	r4, #0
    e338:	mov	r1, r3
    e33c:	beq	e350 <rb_linebuf_get+0xb8>
    e340:	ldrb	r2, [r3], #1
    e344:	cmp	r2, #10
    e348:	cmpne	r2, #13
    e34c:	beq	e330 <rb_linebuf_get+0x98>
    e350:	add	r2, r1, r4
    e354:	cmp	r4, #0
    e358:	beq	e304 <rb_linebuf_get+0x6c>
    e35c:	ldrb	r3, [r2, #-1]!
    e360:	cmp	r3, #10
    e364:	cmpne	r3, #13
    e368:	bne	e304 <rb_linebuf_get+0x6c>
    e36c:	sub	r4, r4, #1
    e370:	b	e354 <rb_linebuf_get+0xbc>

0000e374 <rb_linebuf_attach>:
    e374:	push	{r4, r5, r6, r7, r8, lr}
    e378:	mov	r4, r0
    e37c:	ldr	r5, [r1]
    e380:	mov	r7, #0
    e384:	cmp	r5, #0
    e388:	bne	e390 <rb_linebuf_attach+0x1c>
    e38c:	pop	{r4, r5, r6, r7, r8, pc}
    e390:	ldr	r6, [r5]
    e394:	bl	4bac <rb_make_rb_dlink_node@plt>
    e398:	ldr	r3, [r4, #4]
    e39c:	cmp	r3, #0
    e3a0:	str	r6, [r0]
    e3a4:	str	r7, [r0, #8]
    e3a8:	str	r3, [r0, #4]
    e3ac:	strne	r0, [r3, #8]
    e3b0:	bne	e3c0 <rb_linebuf_attach+0x4c>
    e3b4:	ldr	r3, [r4]
    e3b8:	cmp	r3, #0
    e3bc:	streq	r0, [r4]
    e3c0:	ldr	r3, [r4, #8]
    e3c4:	ldr	r2, [r6, #1028]	; 0x404
    e3c8:	add	r3, r3, #1
    e3cc:	str	r3, [r4, #8]
    e3d0:	ldr	r3, [r4, #16]
    e3d4:	str	r0, [r4, #4]
    e3d8:	add	r3, r3, #1
    e3dc:	str	r3, [r4, #16]
    e3e0:	ldr	r3, [r4, #12]
    e3e4:	ldr	r5, [r5, #8]
    e3e8:	add	r3, r3, r2
    e3ec:	str	r3, [r4, #12]
    e3f0:	ldr	r3, [r4, #24]
    e3f4:	add	r3, r3, #1
    e3f8:	str	r3, [r4, #24]
    e3fc:	ldr	r3, [r6, #1032]	; 0x408
    e400:	add	r3, r3, #1
    e404:	str	r3, [r6, #1032]	; 0x408
    e408:	b	e384 <rb_linebuf_attach+0x10>

0000e40c <rb_linebuf_put>:
    e40c:	push	{r4, r5, r6, lr}
    e410:	mov	r6, r1
    e414:	mov	r5, r0
    e418:	bl	ddc4 <rb_linebuf_new_line>
    e41c:	mov	r2, r6
    e420:	ldr	r1, [pc, #88]	; e480 <rb_linebuf_put+0x74>
    e424:	mov	r4, r0
    e428:	bl	46b4 <rb_fsnprint@plt>
    e42c:	cmp	r0, #0
    e430:	movle	r0, #0
    e434:	ble	e444 <rb_linebuf_put+0x38>
    e438:	ldr	r3, [pc, #68]	; e484 <rb_linebuf_put+0x78>
    e43c:	cmp	r0, r3
    e440:	movcs	r0, r3
    e444:	mov	r3, r4
    e448:	mov	r2, #13
    e44c:	strb	r2, [r3, r0]!
    e450:	add	r0, r0, #2
    e454:	mov	r2, #10
    e458:	strb	r2, [r3, #1]
    e45c:	mov	r3, #0
    e460:	strb	r3, [r4, r0]
    e464:	mov	r3, #1
    e468:	strb	r3, [r4, #1025]	; 0x401
    e46c:	ldr	r3, [r5, #12]
    e470:	str	r0, [r4, #1028]	; 0x404
    e474:	add	r0, r3, r0
    e478:	str	r0, [r5, #12]
    e47c:	pop	{r4, r5, r6, pc}
    e480:	.word	0x000003ff
    e484:	.word	0x000003fe

0000e488 <rb_linebuf_flush>:
    e488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e48c:	mov	r7, r0
    e490:	mov	r4, r1
    e494:	bl	44d4 <rb_fd_ssl@plt>
    e498:	subs	r8, r0, #0
    e49c:	bne	e5c4 <rb_linebuf_flush+0x13c>
    e4a0:	ldr	r6, [pc, #396]	; e634 <rb_linebuf_flush+0x1ac>
    e4a4:	mov	r2, #8192	; 0x2000
    e4a8:	add	r6, pc, r6
    e4ac:	add	r5, r6, #8
    e4b0:	mov	r1, r8
    e4b4:	mov	r0, r5
    e4b8:	bl	4648 <memset@plt>
    e4bc:	ldr	r3, [r4]
    e4c0:	cmp	r3, #0
    e4c4:	bne	e4dc <rb_linebuf_flush+0x54>
    e4c8:	bl	4d14 <__errno_location@plt>
    e4cc:	mov	r3, #11
    e4d0:	mvn	r5, #0
    e4d4:	str	r3, [r0]
    e4d8:	b	e5b0 <rb_linebuf_flush+0x128>
    e4dc:	ldr	r1, [r3]
    e4e0:	ldrb	r2, [r1, #1025]	; 0x401
    e4e4:	cmp	r2, #0
    e4e8:	beq	e4c8 <rb_linebuf_flush+0x40>
    e4ec:	ldr	r0, [r4, #20]
    e4f0:	ldr	r3, [r3, #8]
    e4f4:	add	r2, r1, r0
    e4f8:	str	r2, [r6, #8]
    e4fc:	ldr	r2, [r1, #1028]	; 0x404
    e500:	sub	r2, r2, r0
    e504:	str	r2, [r6, #12]
    e508:	mov	r0, r5
    e50c:	mov	r6, #1
    e510:	cmp	r3, #0
    e514:	beq	e548 <rb_linebuf_flush+0xc0>
    e518:	ldr	r2, [r3]
    e51c:	ldrb	r1, [r2, #1025]	; 0x401
    e520:	cmp	r1, #0
    e524:	beq	e548 <rb_linebuf_flush+0xc0>
    e528:	str	r2, [r0, #8]
    e52c:	add	r6, r6, #1
    e530:	ldr	r2, [r2, #1028]	; 0x404
    e534:	cmp	r6, #1024	; 0x400
    e538:	str	r2, [r0, #12]
    e53c:	ldr	r3, [r3, #8]
    e540:	add	r0, r0, #8
    e544:	bne	e510 <rb_linebuf_flush+0x88>
    e548:	ldr	r1, [pc, #232]	; e638 <rb_linebuf_flush+0x1b0>
    e54c:	mov	r2, r6
    e550:	add	r1, pc, r1
    e554:	add	r1, r1, #8
    e558:	mov	r0, r7
    e55c:	bl	4b04 <rb_writev@plt>
    e560:	subs	r5, r0, #0
    e564:	ble	e5b0 <rb_linebuf_flush+0x128>
    e568:	ldr	r9, [r4]
    e56c:	mov	r7, r5
    e570:	mov	sl, #0
    e574:	ldr	r1, [r9]
    e578:	ldr	r3, [r4, #20]
    e57c:	ldr	r2, [r1, #1028]	; 0x404
    e580:	sub	r2, r2, r3
    e584:	cmp	r2, r7
    e588:	bgt	e5b8 <rb_linebuf_flush+0x130>
    e58c:	sub	r7, r7, r2
    e590:	mov	r0, r4
    e594:	ldr	r2, [r4]
    e598:	add	r8, r8, #1
    e59c:	ldr	r9, [r9, #8]
    e5a0:	bl	de60 <rb_linebuf_done_line>
    e5a4:	cmp	r6, r8
    e5a8:	str	sl, [r4, #20]
    e5ac:	bne	e574 <rb_linebuf_flush+0xec>
    e5b0:	mov	r0, r5
    e5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e5b8:	add	r3, r3, r7
    e5bc:	str	r3, [r4, #20]
    e5c0:	b	e5b0 <rb_linebuf_flush+0x128>
    e5c4:	ldr	r3, [r4]
    e5c8:	cmp	r3, #0
    e5cc:	beq	e4c8 <rb_linebuf_flush+0x40>
    e5d0:	ldr	r6, [r3]
    e5d4:	ldrb	r3, [r6, #1025]	; 0x401
    e5d8:	cmp	r3, #0
    e5dc:	beq	e4c8 <rb_linebuf_flush+0x40>
    e5e0:	ldr	r1, [r4, #20]
    e5e4:	ldr	r2, [r6, #1028]	; 0x404
    e5e8:	mov	r0, r7
    e5ec:	sub	r2, r2, r1
    e5f0:	add	r1, r6, r1
    e5f4:	bl	4678 <rb_write@plt>
    e5f8:	subs	r5, r0, #0
    e5fc:	ble	e5b0 <rb_linebuf_flush+0x128>
    e600:	ldr	r3, [r4, #20]
    e604:	ldr	r2, [r6, #1028]	; 0x404
    e608:	add	r3, r5, r3
    e60c:	cmp	r3, r2
    e610:	str	r3, [r4, #20]
    e614:	bne	e5b0 <rb_linebuf_flush+0x128>
    e618:	mov	r3, #0
    e61c:	str	r3, [r4, #20]
    e620:	ldr	r2, [r4]
    e624:	mov	r1, r6
    e628:	mov	r0, r4
    e62c:	bl	de60 <rb_linebuf_done_line>
    e630:	b	e5b0 <rb_linebuf_flush+0x128>
    e634:	.word	0x0002aec0
    e638:	.word	0x0002ae18

0000e63c <rb_count_rb_linebuf_memory>:
    e63c:	push	{r0, r1, r2, lr}
    e640:	mov	r3, r1
    e644:	mov	r1, r0
    e648:	ldr	r0, [pc, #24]	; e668 <rb_count_rb_linebuf_memory+0x2c>
    e64c:	mov	r2, #0
    e650:	add	r0, pc, r0
    e654:	str	r2, [sp]
    e658:	ldr	r0, [r0]
    e65c:	bl	4d38 <rb_bh_usage@plt>
    e660:	add	sp, sp, #12
    e664:	pop	{pc}		; (ldr pc, [sp], #4)
    e668:	.word	0x0002ad18

0000e66c <rb_strdup>:
    e66c:	push	{r4, r5, r6, lr}
    e670:	mov	r5, r0
    e674:	bl	4804 <strlen@plt>
    e678:	add	r0, r0, #1
    e67c:	bl	49d8 <malloc@plt>
    e680:	subs	r4, r0, #0
    e684:	bne	e68c <rb_strdup+0x20>
    e688:	bl	49b4 <rb_outofmemory@plt>
    e68c:	mov	r1, r5
    e690:	bl	48ac <strcpy@plt>
    e694:	mov	r0, r4
    e698:	pop	{r4, r5, r6, pc}

0000e69c <rb_init_rb_dlink_nodes>:
    e69c:	ldr	r2, [pc, #40]	; e6cc <rb_init_rb_dlink_nodes+0x30>
    e6a0:	mov	r1, r0
    e6a4:	push	{r4, lr}
    e6a8:	add	r2, pc, r2
    e6ac:	mov	r0, #12
    e6b0:	bl	4ae0 <rb_bh_create@plt>
    e6b4:	ldr	r3, [pc, #20]	; e6d0 <rb_init_rb_dlink_nodes+0x34>
    e6b8:	add	r3, pc, r3
    e6bc:	cmp	r0, #0
    e6c0:	str	r0, [r3]
    e6c4:	popne	{r4, pc}
    e6c8:	bl	49b4 <rb_outofmemory@plt>
    e6cc:	.word	0x000067a6
    e6d0:	.word	0x0002ccb8

0000e6d4 <rb_make_rb_dlink_node>:
    e6d4:	ldr	r3, [pc, #4]	; e6e0 <rb_make_rb_dlink_node+0xc>
    e6d8:	ldr	r0, [pc, r3]
    e6dc:	b	4984 <rb_bh_alloc@plt>
    e6e0:	.word	0x0002cc98

0000e6e4 <rb_free_rb_dlink_node>:
    e6e4:	ldr	r3, [pc, #8]	; e6f4 <rb_free_rb_dlink_node+0x10>
    e6e8:	mov	r1, r0
    e6ec:	ldr	r0, [pc, r3]
    e6f0:	b	48f4 <rb_bh_free@plt>
    e6f4:	.word	0x0002cc84

0000e6f8 <rb_string_to_array>:
    e6f8:	cmp	r0, #0
    e6fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e700:	moveq	r4, r0
    e704:	beq	e76c <rb_string_to_array+0x74>
    e708:	ldrb	r4, [r0]
    e70c:	cmp	r4, #0
    e710:	beq	e76c <rb_string_to_array+0x74>
    e714:	mov	r4, r0
    e718:	ldrb	r3, [r4]
    e71c:	mov	r0, r4
    e720:	add	r4, r4, #1
    e724:	cmp	r3, #32
    e728:	beq	e718 <rb_string_to_array+0x20>
    e72c:	cmp	r3, #0
    e730:	moveq	r4, r3
    e734:	beq	e76c <rb_string_to_array+0x74>
    e738:	mov	r5, #0
    e73c:	mov	r6, r1
    e740:	sub	r9, r1, #4
    e744:	mov	sl, #32
    e748:	mov	fp, r5
    e74c:	sub	r8, r2, #1
    e750:	ldrb	r3, [r0]
    e754:	add	r7, r5, #1
    e758:	mov	r4, r7
    e75c:	cmp	r3, #58	; 0x3a
    e760:	bne	e77c <rb_string_to_array+0x84>
    e764:	add	r0, r0, #1
    e768:	str	r0, [r6, r5, lsl #2]
    e76c:	mov	r0, r4
    e770:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e774:	mov	r5, r7
    e778:	b	e750 <rb_string_to_array+0x58>
    e77c:	str	r0, [r9, #4]!
    e780:	mov	r1, sl
    e784:	bl	45d0 <strchr@plt>
    e788:	subs	r3, r0, #0
    e78c:	beq	e76c <rb_string_to_array+0x74>
    e790:	add	r2, r3, #1
    e794:	mov	r1, r2
    e798:	strb	fp, [r3]
    e79c:	mov	r0, r1
    e7a0:	ldrb	ip, [r1], #1
    e7a4:	cmp	ip, #32
    e7a8:	beq	e79c <rb_string_to_array+0xa4>
    e7ac:	cmp	ip, #0
    e7b0:	beq	e76c <rb_string_to_array+0x74>
    e7b4:	cmp	r7, r8
    e7b8:	blt	e774 <rb_string_to_array+0x7c>
    e7bc:	ldrb	r1, [r3, #1]
    e7c0:	add	r4, r5, #2
    e7c4:	cmp	r1, #58	; 0x3a
    e7c8:	addeq	r2, r3, #2
    e7cc:	str	r2, [r6, r7, lsl #2]
    e7d0:	b	e76c <rb_string_to_array+0x74>

0000e7d4 <rb_strcasecmp>:
    e7d4:	b	45e8 <strcasecmp@plt>

0000e7d8 <rb_strncasecmp>:
    e7d8:	b	49a8 <strncasecmp@plt>

0000e7dc <rb_strcasestr>:
    e7dc:	b	4438 <strcasestr@plt>

0000e7e0 <rb_strlcat>:
    e7e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e7e4:	mov	r8, r1
    e7e8:	mov	r6, r2
    e7ec:	mov	r5, r0
    e7f0:	bl	4804 <strlen@plt>
    e7f4:	mov	r7, r0
    e7f8:	mov	r0, r8
    e7fc:	bl	4804 <strlen@plt>
    e800:	sub	r2, r6, r7
    e804:	add	r5, r5, r7
    e808:	mov	r1, r8
    e80c:	cmp	r0, r2
    e810:	movcc	r4, r0
    e814:	subcs	r4, r2, #1
    e818:	add	r9, r7, r0
    e81c:	mov	r2, r4
    e820:	mov	r0, r5
    e824:	bl	4828 <memcpy@plt>
    e828:	mov	r2, #0
    e82c:	strb	r2, [r5, r4]
    e830:	mov	r0, r9
    e834:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000e838 <rb_strlcpy>:
    e838:	push	{r4, r5, r6, r7, r8, lr}
    e83c:	mov	r6, r0
    e840:	mov	r0, r1
    e844:	mov	r4, r2
    e848:	mov	r7, r1
    e84c:	bl	4804 <strlen@plt>
    e850:	cmp	r4, #0
    e854:	mov	r5, r0
    e858:	beq	e880 <rb_strlcpy+0x48>
    e85c:	cmp	r0, r4
    e860:	movcc	r4, r0
    e864:	subcs	r4, r4, #1
    e868:	mov	r2, r4
    e86c:	mov	r1, r7
    e870:	mov	r0, r6
    e874:	bl	4828 <memcpy@plt>
    e878:	mov	r3, #0
    e87c:	strb	r3, [r6, r4]
    e880:	mov	r0, r5
    e884:	pop	{r4, r5, r6, r7, r8, pc}

0000e888 <rb_strnlen>:
    e888:	b	4a44 <strnlen@plt>

0000e88c <rb_snprintf_append>:
    e88c:	push	{r2, r3}
    e890:	push	{r0, r1, r4, r5, r6, lr}
    e894:	subs	r4, r1, #0
    e898:	mvneq	r0, #0
    e89c:	beq	e8c0 <rb_snprintf_append+0x34>
    e8a0:	mov	r6, r0
    e8a4:	bl	4804 <strlen@plt>
    e8a8:	cmp	r0, r4
    e8ac:	mov	r5, r0
    e8b0:	ble	e8d0 <rb_snprintf_append+0x44>
    e8b4:	sub	r0, r4, #1
    e8b8:	mov	r3, #0
    e8bc:	strb	r3, [r6, r0]
    e8c0:	add	sp, sp, #8
    e8c4:	pop	{r4, r5, r6, lr}
    e8c8:	add	sp, sp, #8
    e8cc:	bx	lr
    e8d0:	add	r3, sp, #28
    e8d4:	sub	r1, r4, r0
    e8d8:	ldr	r2, [sp, #24]
    e8dc:	add	r0, r6, r0
    e8e0:	str	r3, [sp, #4]
    e8e4:	bl	457c <vsnprintf@plt>
    e8e8:	cmp	r0, #0
    e8ec:	addge	r0, r0, r5
    e8f0:	b	e8c0 <rb_snprintf_append+0x34>

0000e8f4 <rb_snprintf_try_append>:
    e8f4:	push	{r2, r3}
    e8f8:	push	{r0, r1, r4, r5, r6, lr}
    e8fc:	subs	r4, r1, #0
    e900:	beq	e95c <rb_snprintf_try_append+0x68>
    e904:	mov	r5, r0
    e908:	bl	4804 <strlen@plt>
    e90c:	cmp	r0, r4
    e910:	addgt	r4, r5, r4
    e914:	movgt	r3, #0
    e918:	mov	r6, r0
    e91c:	strbgt	r3, [r4, #-1]
    e920:	bgt	e95c <rb_snprintf_try_append+0x68>
    e924:	add	r3, sp, #28
    e928:	sub	r1, r4, r0
    e92c:	ldr	r2, [sp, #24]
    e930:	add	r0, r5, r0
    e934:	str	r3, [sp, #4]
    e938:	bl	457c <vsnprintf@plt>
    e93c:	cmp	r0, #0
    e940:	blt	e960 <rb_snprintf_try_append+0x6c>
    e944:	add	r0, r0, r6
    e948:	sub	r4, r4, #1
    e94c:	cmp	r0, r4
    e950:	ble	e960 <rb_snprintf_try_append+0x6c>
    e954:	mov	r3, #0
    e958:	strb	r3, [r5, r6]
    e95c:	mvn	r0, #0
    e960:	add	sp, sp, #8
    e964:	pop	{r4, r5, r6, lr}
    e968:	add	sp, sp, #8
    e96c:	bx	lr

0000e970 <rb_basename>:
    e970:	push	{r4, lr}
    e974:	mov	r1, #47	; 0x2f
    e978:	mov	r4, r0
    e97c:	bl	466c <strrchr@plt>
    e980:	cmp	r0, #0
    e984:	addne	r4, r0, #1
    e988:	mov	r0, r4
    e98c:	pop	{r4, lr}
    e990:	b	e66c <rb_strdup>

0000e994 <rb_dirname>:
    e994:	push	{r4, r5, r6, lr}
    e998:	mov	r1, #47	; 0x2f
    e99c:	mov	r5, r0
    e9a0:	bl	466c <strrchr@plt>
    e9a4:	cmp	r0, #0
    e9a8:	bne	e9d0 <rb_dirname+0x3c>
    e9ac:	ldr	r0, [pc, #84]	; ea08 <rb_dirname+0x74>
    e9b0:	pop	{r4, r5, r6, lr}
    e9b4:	add	r0, pc, r0
    e9b8:	b	e66c <rb_strdup>
    e9bc:	ldrb	r3, [r0]
    e9c0:	sub	r2, r0, #1
    e9c4:	cmp	r3, #47	; 0x2f
    e9c8:	bne	e9d8 <rb_dirname+0x44>
    e9cc:	mov	r0, r2
    e9d0:	cmp	r0, r5
    e9d4:	bhi	e9bc <rb_dirname+0x28>
    e9d8:	rsb	r4, r5, #2
    e9dc:	add	r4, r4, r0
    e9e0:	mov	r0, r4
    e9e4:	bl	49d8 <malloc@plt>
    e9e8:	subs	r6, r0, #0
    e9ec:	bne	e9f4 <rb_dirname+0x60>
    e9f0:	bl	49b4 <rb_outofmemory@plt>
    e9f4:	mov	r2, r4
    e9f8:	mov	r1, r5
    e9fc:	bl	46c0 <rb_strlcpy@plt>
    ea00:	mov	r0, r6
    ea04:	pop	{r4, r5, r6, pc}
    ea08:	.word	0x00006477

0000ea0c <rb_fsnprint>:
    ea0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ea10:	mov	r5, #0
    ea14:	mov	r8, r0
    ea18:	mov	r7, r1
    ea1c:	mov	r6, r2
    ea20:	mov	r4, r1
    ea24:	mov	sl, r5
    ea28:	sub	r9, r1, #1
    ea2c:	cmp	r6, #0
    ea30:	beq	ea54 <rb_fsnprint+0x48>
    ea34:	ldr	r3, [r6]
    ea38:	cmp	r3, #0
    ea3c:	beq	ea4c <rb_fsnprint+0x40>
    ea40:	sub	r4, r7, r5
    ea44:	cmp	r3, r4
    ea48:	bls	ea5c <rb_fsnprint+0x50>
    ea4c:	cmp	r4, #0
    ea50:	bne	ea60 <rb_fsnprint+0x54>
    ea54:	mov	r0, r5
    ea58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ea5c:	mov	r4, r3
    ea60:	ldr	r1, [r6, #4]
    ea64:	cmp	r1, #0
    ea68:	beq	eaa4 <rb_fsnprint+0x98>
    ea6c:	ldr	r3, [r6, #12]
    ea70:	add	r0, r8, r5
    ea74:	cmp	r3, #0
    ea78:	beq	ea98 <rb_fsnprint+0x8c>
    ea7c:	mov	r2, r1
    ea80:	ldr	r3, [r3]
    ea84:	mov	r1, r4
    ea88:	bl	457c <vsnprintf@plt>
    ea8c:	cmp	r0, #0
    ea90:	bge	eac8 <rb_fsnprint+0xbc>
    ea94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ea98:	mov	r2, r4
    ea9c:	bl	46c0 <rb_strlcpy@plt>
    eaa0:	b	ea8c <rb_fsnprint+0x80>
    eaa4:	ldr	r3, [r6, #8]
    eaa8:	cmp	r3, #0
    eaac:	beq	eac4 <rb_fsnprint+0xb8>
    eab0:	ldr	r2, [r6, #12]
    eab4:	mov	r1, r4
    eab8:	add	r0, r8, r5
    eabc:	blx	r3
    eac0:	b	ea8c <rb_fsnprint+0x80>
    eac4:	mov	r0, sl
    eac8:	sub	r3, r4, #1
    eacc:	cmp	r3, r0
    ead0:	subcc	r5, r5, #1
    ead4:	addcc	r3, r5, r4
    ead8:	addcs	r3, r5, r0
    eadc:	cmp	r3, r9
    eae0:	mov	r5, r9
    eae4:	bcs	ea54 <rb_fsnprint+0x48>
    eae8:	sub	r4, r4, r0
    eaec:	ldr	r6, [r6, #16]
    eaf0:	mov	r5, r3
    eaf4:	b	ea2c <rb_fsnprint+0x20>

0000eaf8 <rb_fsnprintf>:
    eaf8:	push	{r3}		; (str r3, [sp, #-4]!)
    eafc:	push	{r4, r5, r6, r7, lr}
    eb00:	sub	sp, sp, #24
    eb04:	add	r4, sp, #4
    eb08:	mov	r5, r0
    eb0c:	mov	r6, r1
    eb10:	mov	r7, r2
    eb14:	mov	r1, #0
    eb18:	mov	r2, #20
    eb1c:	mov	r0, r4
    eb20:	bl	4648 <memset@plt>
    eb24:	ldr	r3, [sp, #44]	; 0x2c
    eb28:	mov	r2, r4
    eb2c:	str	r3, [sp, #8]
    eb30:	mov	r1, r6
    eb34:	add	r3, sp, #48	; 0x30
    eb38:	mov	r0, r5
    eb3c:	str	sp, [sp, #16]
    eb40:	str	r7, [sp, #20]
    eb44:	str	r3, [sp]
    eb48:	bl	46b4 <rb_fsnprint@plt>
    eb4c:	add	sp, sp, #24
    eb50:	pop	{r4, r5, r6, r7, lr}
    eb54:	add	sp, sp, #4
    eb58:	bx	lr

0000eb5c <rb_free>:
    eb5c:	cmp	r0, #0
    eb60:	bxeq	lr
    eb64:	b	4714 <free@plt>

0000eb68 <rb_helper_child>:
    eb68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb6c:	mov	r9, r0
    eb70:	ldr	r0, [pc, #472]	; ed50 <rb_helper_child+0x1e8>
    eb74:	sub	sp, sp, #28
    eb78:	add	r0, pc, r0
    eb7c:	str	r1, [sp, #20]
    eb80:	mov	sl, r2
    eb84:	mov	fp, r3
    eb88:	bl	45b8 <getenv@plt>
    eb8c:	mov	r7, r0
    eb90:	ldr	r0, [pc, #444]	; ed54 <rb_helper_child+0x1ec>
    eb94:	add	r0, pc, r0
    eb98:	bl	45b8 <getenv@plt>
    eb9c:	mov	r6, r0
    eba0:	ldr	r0, [pc, #432]	; ed58 <rb_helper_child+0x1f0>
    eba4:	add	r0, pc, r0
    eba8:	bl	45b8 <getenv@plt>
    ebac:	cmp	r6, #0
    ebb0:	cmpne	r7, #0
    ebb4:	moveq	r4, #1
    ebb8:	movne	r4, #0
    ebbc:	cmp	r0, #0
    ebc0:	orreq	r4, r4, #1
    ebc4:	cmp	r4, #0
    ebc8:	bne	ed48 <rb_helper_child+0x1e0>
    ebcc:	mov	r8, r0
    ebd0:	mov	r1, #84	; 0x54
    ebd4:	mov	r0, #1
    ebd8:	bl	460c <calloc@plt>
    ebdc:	subs	r5, r0, #0
    ebe0:	bne	ebe8 <rb_helper_child+0x80>
    ebe4:	bl	49b4 <rb_outofmemory@plt>
    ebe8:	mov	r2, #10
    ebec:	mov	r1, r4
    ebf0:	mov	r0, r7
    ebf4:	bl	4894 <strtol@plt>
    ebf8:	mov	r2, #10
    ebfc:	mov	r1, r4
    ec00:	mov	r7, r0
    ec04:	mov	r0, r6
    ec08:	bl	4894 <strtol@plt>
    ec0c:	mov	r2, #10
    ec10:	mov	r1, r4
    ec14:	mov	r6, r0
    ec18:	mov	r0, r8
    ec1c:	bl	4894 <strtol@plt>
    ec20:	mov	r8, r0
    ec24:	cmp	r4, r8
    ec28:	blt	ed2c <rb_helper_child+0x1c4>
    ec2c:	ldr	r0, [pc, #296]	; ed5c <rb_helper_child+0x1f4>
    ec30:	mov	r1, #2
    ec34:	add	r0, pc, r0
    ec38:	bl	439c <open@plt>
    ec3c:	cmp	r7, #0
    ec40:	cmpne	r6, #0
    ec44:	mov	r4, r0
    ec48:	beq	ec54 <rb_helper_child+0xec>
    ec4c:	mov	r1, #0
    ec50:	bl	4aec <dup2@plt>
    ec54:	cmp	r7, #1
    ec58:	cmpne	r6, #1
    ec5c:	beq	ec6c <rb_helper_child+0x104>
    ec60:	mov	r1, #1
    ec64:	mov	r0, r4
    ec68:	bl	4aec <dup2@plt>
    ec6c:	cmp	r7, #2
    ec70:	cmpne	r6, #2
    ec74:	beq	ec84 <rb_helper_child+0x11c>
    ec78:	mov	r1, #2
    ec7c:	mov	r0, r4
    ec80:	bl	4aec <dup2@plt>
    ec84:	cmp	r4, #2
    ec88:	ble	ec94 <rb_helper_child+0x12c>
    ec8c:	mov	r0, r4
    ec90:	bl	496c <close@plt>
    ec94:	ldr	r3, [sp, #76]	; 0x4c
    ec98:	ldr	r2, [sp, #64]	; 0x40
    ec9c:	str	r3, [sp, #8]
    eca0:	ldr	r3, [sp, #72]	; 0x48
    eca4:	mov	r1, fp
    eca8:	str	r3, [sp, #4]
    ecac:	mov	r0, sl
    ecb0:	mov	r3, #0
    ecb4:	str	r8, [sp]
    ecb8:	bl	4a68 <rb_lib_init@plt>
    ecbc:	ldr	r0, [sp, #68]	; 0x44
    ecc0:	bl	4b7c <rb_linebuf_init@plt>
    ecc4:	add	r0, r5, #4
    ecc8:	bl	4b1c <rb_linebuf_newbuf@plt>
    eccc:	add	r0, r5, #32
    ecd0:	bl	4b1c <rb_linebuf_newbuf@plt>
    ecd4:	ldr	r2, [pc, #132]	; ed60 <rb_helper_child+0x1f8>
    ecd8:	mov	r1, #8
    ecdc:	add	r2, pc, r2
    ece0:	mov	r0, r7
    ece4:	bl	4ab0 <rb_open@plt>
    ece8:	ldr	r2, [pc, #116]	; ed64 <rb_helper_child+0x1fc>
    ecec:	mov	r1, #8
    ecf0:	add	r2, pc, r2
    ecf4:	str	r0, [r5, #60]	; 0x3c
    ecf8:	mov	r0, r6
    ecfc:	bl	4ab0 <rb_open@plt>
    ed00:	str	r0, [r5, #64]	; 0x40
    ed04:	ldr	r0, [r5, #60]	; 0x3c
    ed08:	bl	463c <rb_set_nb@plt>
    ed0c:	ldr	r0, [r5, #64]	; 0x40
    ed10:	bl	463c <rb_set_nb@plt>
    ed14:	ldr	r3, [sp, #20]
    ed18:	mov	r0, r5
    ed1c:	str	r9, [r5, #76]	; 0x4c
    ed20:	str	r3, [r5, #80]	; 0x50
    ed24:	add	sp, sp, #28
    ed28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed2c:	cmp	r4, r7
    ed30:	cmpne	r4, r6
    ed34:	beq	ed40 <rb_helper_child+0x1d8>
    ed38:	mov	r0, r4
    ed3c:	bl	496c <close@plt>
    ed40:	add	r4, r4, #1
    ed44:	b	ec24 <rb_helper_child+0xbc>
    ed48:	mov	r0, #0
    ed4c:	b	ed24 <rb_helper_child+0x1bc>
    ed50:	.word	0x000062e7
    ed54:	.word	0x000062cf
    ed58:	.word	0x000062c3
    ed5c:	.word	0x00006239
    ed60:	.word	0x0000619b
    ed64:	.word	0x0000619b

0000ed68 <rb_helper_start>:
    ed68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed6c:	mov	r9, r1
    ed70:	sub	sp, sp, #188	; 0xbc
    ed74:	mov	r8, r0
    ed78:	mov	r1, #1
    ed7c:	mov	r0, r9
    ed80:	mov	fp, r2
    ed84:	mov	sl, r3
    ed88:	bl	475c <access@plt>
    ed8c:	cmn	r0, #1
    ed90:	beq	ede8 <rb_helper_start+0x80>
    ed94:	mov	r1, #84	; 0x54
    ed98:	mov	r0, #1
    ed9c:	bl	460c <calloc@plt>
    eda0:	subs	r4, r0, #0
    eda4:	bne	edac <rb_helper_start+0x44>
    eda8:	bl	49b4 <rb_outofmemory@plt>
    edac:	ldr	r2, [pc, #448]	; ef74 <rb_helper_start+0x20c>
    edb0:	add	r5, sp, #56	; 0x38
    edb4:	mov	r3, r8
    edb8:	add	r2, pc, r2
    edbc:	mov	r1, #128	; 0x80
    edc0:	mov	r0, r5
    edc4:	bl	4bdc <snprintf@plt>
    edc8:	add	r0, sp, #8
    edcc:	mov	r2, r5
    edd0:	add	r1, r0, #4
    edd4:	bl	499c <rb_pipe@plt>
    edd8:	cmp	r0, #0
    eddc:	bge	edf0 <rb_helper_start+0x88>
    ede0:	mov	r0, r4
    ede4:	bl	eb5c <rb_free>
    ede8:	mov	r0, #0
    edec:	b	ef6c <rb_helper_start+0x204>
    edf0:	ldr	r2, [pc, #384]	; ef78 <rb_helper_start+0x210>
    edf4:	mov	r3, r8
    edf8:	add	r2, pc, r2
    edfc:	mov	r1, #128	; 0x80
    ee00:	mov	r0, r5
    ee04:	bl	4bdc <snprintf@plt>
    ee08:	add	r0, sp, #16
    ee0c:	mov	r2, r5
    ee10:	add	r1, r0, #4
    ee14:	bl	499c <rb_pipe@plt>
    ee18:	cmp	r0, #0
    ee1c:	blt	ede0 <rb_helper_start+0x78>
    ee20:	ldr	r0, [sp, #12]
    ee24:	bl	4504 <rb_get_fd@plt>
    ee28:	ldr	r7, [pc, #332]	; ef7c <rb_helper_start+0x214>
    ee2c:	add	r6, sp, #24
    ee30:	add	r7, pc, r7
    ee34:	mov	r2, r7
    ee38:	mov	r1, #16
    ee3c:	mov	r3, r0
    ee40:	mov	r0, r6
    ee44:	bl	4bdc <snprintf@plt>
    ee48:	ldr	r0, [sp, #16]
    ee4c:	bl	4504 <rb_get_fd@plt>
    ee50:	mov	r2, r7
    ee54:	add	r7, sp, #40	; 0x28
    ee58:	mov	r1, #16
    ee5c:	mov	r3, r0
    ee60:	mov	r0, r7
    ee64:	bl	4bdc <snprintf@plt>
    ee68:	ldr	r0, [sp, #8]
    ee6c:	bl	463c <rb_set_nb@plt>
    ee70:	ldr	r0, [sp, #12]
    ee74:	bl	463c <rb_set_nb@plt>
    ee78:	ldr	r0, [sp, #16]
    ee7c:	bl	463c <rb_set_nb@plt>
    ee80:	ldr	r0, [sp, #20]
    ee84:	bl	463c <rb_set_nb@plt>
    ee88:	ldr	r0, [pc, #240]	; ef80 <rb_helper_start+0x218>
    ee8c:	mov	r2, #1
    ee90:	mov	r1, r7
    ee94:	add	r0, pc, r0
    ee98:	bl	44ec <rb_setenv@plt>
    ee9c:	ldr	r0, [pc, #224]	; ef84 <rb_helper_start+0x21c>
    eea0:	mov	r1, r6
    eea4:	mov	r2, #1
    eea8:	add	r0, pc, r0
    eeac:	bl	44ec <rb_setenv@plt>
    eeb0:	ldr	r1, [pc, #208]	; ef88 <rb_helper_start+0x220>
    eeb4:	ldr	r0, [pc, #208]	; ef8c <rb_helper_start+0x224>
    eeb8:	mov	r2, #1
    eebc:	add	r1, pc, r1
    eec0:	add	r0, pc, r0
    eec4:	bl	44ec <rb_setenv@plt>
    eec8:	ldr	r2, [pc, #192]	; ef90 <rb_helper_start+0x228>
    eecc:	mov	r3, r8
    eed0:	add	r2, pc, r2
    eed4:	mov	r1, #128	; 0x80
    eed8:	mov	r0, r5
    eedc:	bl	4bdc <snprintf@plt>
    eee0:	str	r5, [sp]
    eee4:	mov	r1, sp
    eee8:	mov	r5, #0
    eeec:	mov	r0, r9
    eef0:	str	r5, [sp, #4]
    eef4:	bl	4bc4 <rb_spawn_process@plt>
    eef8:	cmn	r0, #1
    eefc:	mov	r6, r0
    ef00:	bne	ef28 <rb_helper_start+0x1c0>
    ef04:	ldr	r0, [sp, #8]
    ef08:	bl	4888 <rb_close@plt>
    ef0c:	ldr	r0, [sp, #12]
    ef10:	bl	4888 <rb_close@plt>
    ef14:	ldr	r0, [sp, #16]
    ef18:	bl	4888 <rb_close@plt>
    ef1c:	ldr	r0, [sp, #20]
    ef20:	bl	4888 <rb_close@plt>
    ef24:	b	ede0 <rb_helper_start+0x78>
    ef28:	ldr	r0, [sp, #12]
    ef2c:	bl	4888 <rb_close@plt>
    ef30:	ldr	r0, [sp, #16]
    ef34:	bl	4888 <rb_close@plt>
    ef38:	add	r0, r4, #4
    ef3c:	bl	4b1c <rb_linebuf_newbuf@plt>
    ef40:	add	r0, r4, #32
    ef44:	bl	4b1c <rb_linebuf_newbuf@plt>
    ef48:	ldr	r3, [sp, #8]
    ef4c:	mov	r0, r4
    ef50:	str	r3, [r4, #60]	; 0x3c
    ef54:	ldr	r3, [sp, #20]
    ef58:	str	fp, [r4, #76]	; 0x4c
    ef5c:	str	r3, [r4, #64]	; 0x40
    ef60:	str	sl, [r4, #80]	; 0x50
    ef64:	str	r5, [r4, #72]	; 0x48
    ef68:	str	r6, [r4, #68]	; 0x44
    ef6c:	add	sp, sp, #188	; 0xbc
    ef70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef74:	.word	0x000060e7
    ef78:	.word	0x000060b8
    ef7c:	.word	0x00005320
    ef80:	.word	0x00005fcb
    ef84:	.word	0x00005fbb
    ef88:	.word	0x00006006
    ef8c:	.word	0x00005fa7
    ef90:	.word	0x00005ff6

0000ef94 <rb_helper_restart>:
    ef94:	ldr	r3, [r0, #80]	; 0x50
    ef98:	bx	r3

0000ef9c <rb_helper_write_sendq>:
    ef9c:	ldr	r3, [r1, #16]
    efa0:	push	{r4, r5, r6, lr}
    efa4:	cmp	r3, #0
    efa8:	mov	r4, r1
    efac:	ble	eff0 <rb_helper_write_sendq+0x54>
    efb0:	mov	r5, r0
    efb4:	add	r6, r1, #4
    efb8:	mov	r1, r6
    efbc:	mov	r0, r5
    efc0:	bl	47ec <rb_linebuf_flush@plt>
    efc4:	cmp	r0, #0
    efc8:	bgt	efb8 <rb_helper_write_sendq+0x1c>
    efcc:	bne	efdc <rb_helper_write_sendq+0x40>
    efd0:	mov	r0, r4
    efd4:	pop	{r4, r5, r6, lr}
    efd8:	b	45f4 <rb_helper_restart@plt>
    efdc:	bl	4d14 <__errno_location@plt>
    efe0:	ldr	r0, [r0]
    efe4:	bl	43fc <rb_ignore_errno@plt>
    efe8:	cmp	r0, #0
    efec:	beq	efd0 <rb_helper_write_sendq+0x34>
    eff0:	ldr	r3, [r4, #16]
    eff4:	cmp	r3, #0
    eff8:	pople	{r4, r5, r6, pc}
    effc:	ldr	r2, [pc, #20]	; f018 <rb_helper_write_sendq+0x7c>
    f000:	mov	r3, r4
    f004:	ldr	r0, [r4, #64]	; 0x40
    f008:	add	r2, pc, r2
    f00c:	mov	r1, #2
    f010:	pop	{r4, r5, r6, lr}
    f014:	b	44c8 <rb_setselect@plt>
    f018:	.word	0xffffff8c

0000f01c <rb_helper_read_cb>:
    f01c:	push	{r4, r5, r6, r7, r8, lr}
    f020:	subs	r4, r1, #0
    f024:	popeq	{r4, r5, r6, r7, r8, pc}
    f028:	ldr	r5, [pc, #128]	; f0b0 <rb_helper_read_cb+0x94>
    f02c:	mov	r6, #32768	; 0x8000
    f030:	add	r5, pc, r5
    f034:	add	r7, r4, #32
    f038:	mov	r2, r6
    f03c:	mov	r1, r5
    f040:	ldr	r0, [r4, #60]	; 0x3c
    f044:	bl	47a4 <rb_read@plt>
    f048:	subs	r2, r0, #0
    f04c:	bgt	f060 <rb_helper_read_cb+0x44>
    f050:	bne	f080 <rb_helper_read_cb+0x64>
    f054:	mov	r0, r4
    f058:	pop	{r4, r5, r6, r7, r8, lr}
    f05c:	b	45f4 <rb_helper_restart@plt>
    f060:	mov	r3, #0
    f064:	mov	r1, r5
    f068:	mov	r0, r7
    f06c:	bl	469c <rb_linebuf_parse@plt>
    f070:	ldr	r3, [r4, #76]	; 0x4c
    f074:	mov	r0, r4
    f078:	blx	r3
    f07c:	b	f038 <rb_helper_read_cb+0x1c>
    f080:	bl	4d14 <__errno_location@plt>
    f084:	ldr	r0, [r0]
    f088:	bl	43fc <rb_ignore_errno@plt>
    f08c:	cmp	r0, #0
    f090:	beq	f054 <rb_helper_read_cb+0x38>
    f094:	ldr	r2, [pc, #24]	; f0b4 <rb_helper_read_cb+0x98>
    f098:	mov	r3, r4
    f09c:	ldr	r0, [r4, #60]	; 0x3c
    f0a0:	add	r2, pc, r2
    f0a4:	mov	r1, #1
    f0a8:	pop	{r4, r5, r6, r7, r8, lr}
    f0ac:	b	44c8 <rb_setselect@plt>
    f0b0:	.word	0x0002c344
    f0b4:	.word	0xffffff74

0000f0b8 <rb_helper_write_queue>:
    f0b8:	push	{r1, r2, r3}
    f0bc:	mov	r2, #20
    f0c0:	push	{r4, r5, lr}
    f0c4:	sub	sp, sp, #24
    f0c8:	add	r4, sp, #4
    f0cc:	mov	r5, r0
    f0d0:	mov	r1, #0
    f0d4:	mov	r0, r4
    f0d8:	bl	4648 <memset@plt>
    f0dc:	ldr	r3, [sp, #36]	; 0x24
    f0e0:	mov	r1, r4
    f0e4:	str	r3, [sp, #8]
    f0e8:	add	r0, r5, #4
    f0ec:	add	r3, sp, #40	; 0x28
    f0f0:	str	sp, [sp, #16]
    f0f4:	str	r3, [sp]
    f0f8:	bl	4c18 <rb_linebuf_put@plt>
    f0fc:	add	sp, sp, #24
    f100:	pop	{r4, r5, lr}
    f104:	add	sp, sp, #12
    f108:	bx	lr

0000f10c <rb_helper_write_flush>:
    f10c:	mov	r1, r0
    f110:	ldr	r0, [r0, #64]	; 0x40
    f114:	b	ef9c <rb_helper_write_sendq>

0000f118 <rb_helper_write>:
    f118:	push	{r1, r2, r3}
    f11c:	mov	r2, #20
    f120:	push	{r4, r5, lr}
    f124:	sub	sp, sp, #24
    f128:	add	r4, sp, #4
    f12c:	mov	r5, r0
    f130:	mov	r1, #0
    f134:	mov	r0, r4
    f138:	bl	4648 <memset@plt>
    f13c:	ldr	r3, [sp, #36]	; 0x24
    f140:	mov	r1, r4
    f144:	str	r3, [sp, #8]
    f148:	add	r0, r5, #4
    f14c:	add	r3, sp, #40	; 0x28
    f150:	str	r3, [sp]
    f154:	str	sp, [sp, #16]
    f158:	bl	4c18 <rb_linebuf_put@plt>
    f15c:	mov	r0, r5
    f160:	bl	f10c <rb_helper_write_flush>
    f164:	add	sp, sp, #24
    f168:	pop	{r4, r5, lr}
    f16c:	add	sp, sp, #12
    f170:	bx	lr

0000f174 <rb_helper_run>:
    f174:	subs	r1, r0, #0
    f178:	bxeq	lr
    f17c:	ldr	r0, [r1, #60]	; 0x3c
    f180:	b	f01c <rb_helper_read_cb>

0000f184 <rb_helper_close>:
    f184:	push	{r4, lr}
    f188:	subs	r4, r0, #0
    f18c:	popeq	{r4, pc}
    f190:	mov	r1, #9
    f194:	ldr	r0, [r4, #68]	; 0x44
    f198:	bl	4708 <rb_kill@plt>
    f19c:	ldr	r0, [r4, #60]	; 0x3c
    f1a0:	bl	4888 <rb_close@plt>
    f1a4:	ldr	r0, [r4, #64]	; 0x40
    f1a8:	bl	4888 <rb_close@plt>
    f1ac:	mov	r0, r4
    f1b0:	pop	{r4, lr}
    f1b4:	b	eb5c <rb_free>

0000f1b8 <rb_helper_read>:
    f1b8:	mov	r3, #0
    f1bc:	push	{r0, r1, r2, lr}
    f1c0:	add	r0, r0, #32
    f1c4:	str	r3, [sp]
    f1c8:	bl	47bc <rb_linebuf_get@plt>
    f1cc:	add	sp, sp, #12
    f1d0:	pop	{pc}		; (ldr pc, [sp], #4)

0000f1d4 <rb_helper_loop>:
    f1d4:	push	{r4, lr}
    f1d8:	mov	r4, r1
    f1dc:	bl	4384 <rb_helper_run@plt>
    f1e0:	mov	r0, r4
    f1e4:	bl	4768 <rb_lib_loop@plt>

0000f1e8 <rb_init_netio_devpoll>:
    f1e8:	mov	r0, #38	; 0x26
    f1ec:	bx	lr

0000f1f0 <rb_setselect_devpoll>:
    f1f0:	push	{r4, lr}
    f1f4:	bl	4d14 <__errno_location@plt>
    f1f8:	mov	r3, #38	; 0x26
    f1fc:	str	r3, [r0]
    f200:	pop	{r4, pc}

0000f204 <rb_select_devpoll>:
    f204:	push	{r4, lr}
    f208:	bl	4d14 <__errno_location@plt>
    f20c:	mov	r3, #38	; 0x26
    f210:	str	r3, [r0]
    f214:	mvn	r0, #0
    f218:	pop	{r4, pc}

0000f21c <rb_setup_fd_devpoll>:
    f21c:	push	{r4, lr}
    f220:	bl	4d14 <__errno_location@plt>
    f224:	mov	r3, #38	; 0x26
    f228:	str	r3, [r0]
    f22c:	mvn	r0, #0
    f230:	pop	{r4, pc}

0000f234 <rb_malloc>:
    f234:	push	{r4, lr}
    f238:	mov	r1, r0
    f23c:	mov	r0, #1
    f240:	bl	460c <calloc@plt>
    f244:	cmp	r0, #0
    f248:	popne	{r4, pc}
    f24c:	bl	49b4 <rb_outofmemory@plt>

0000f250 <rb_read_timerfd>:
    f250:	push	{r0, r1, r2, r4, r5, lr}
    f254:	subs	r4, r1, #0
    f258:	bne	f268 <rb_read_timerfd+0x18>
    f25c:	bl	4888 <rb_close@plt>
    f260:	add	sp, sp, #12
    f264:	pop	{r4, r5, pc}
    f268:	mov	r2, #8
    f26c:	mov	r1, sp
    f270:	mov	r5, r0
    f274:	bl	47a4 <rb_read@plt>
    f278:	cmp	r0, #0
    f27c:	bne	f2b0 <rb_read_timerfd+0x60>
    f280:	mov	r0, r5
    f284:	bl	4888 <rb_close@plt>
    f288:	bl	4d14 <__errno_location@plt>
    f28c:	ldr	r4, [r4, #20]
    f290:	ldr	r0, [r0]
    f294:	bl	43c0 <strerror@plt>
    f298:	mov	r1, r4
    f29c:	mov	r2, r0
    f2a0:	ldr	r0, [pc, #68]	; f2ec <rb_read_timerfd+0x9c>
    f2a4:	add	r0, pc, r0
    f2a8:	bl	4948 <rb_lib_log@plt>
    f2ac:	b	f260 <rb_read_timerfd+0x10>
    f2b0:	bge	f2c8 <rb_read_timerfd+0x78>
    f2b4:	bl	4d14 <__errno_location@plt>
    f2b8:	ldr	r0, [r0]
    f2bc:	bl	43fc <rb_ignore_errno@plt>
    f2c0:	cmp	r0, #0
    f2c4:	beq	f280 <rb_read_timerfd+0x30>
    f2c8:	ldr	r2, [pc, #32]	; f2f0 <rb_read_timerfd+0xa0>
    f2cc:	mov	r0, r5
    f2d0:	mov	r3, r4
    f2d4:	add	r2, pc, r2
    f2d8:	mov	r1, #1
    f2dc:	bl	44c8 <rb_setselect@plt>
    f2e0:	mov	r0, r4
    f2e4:	bl	48c4 <rb_run_one_event@plt>
    f2e8:	b	f260 <rb_read_timerfd+0x10>
    f2ec:	.word	0x00005c32
    f2f0:	.word	0xffffff74

0000f2f4 <rb_init_netio_epoll>:
    f2f4:	push	{r4, r5, r6, lr}
    f2f8:	mov	r0, #12
    f2fc:	ldr	r5, [pc, #100]	; f368 <rb_init_netio_epoll+0x74>
    f300:	mov	r4, #0
    f304:	add	r5, pc, r5
    f308:	str	r4, [r5]
    f30c:	str	r4, [r5, #4]
    f310:	bl	f234 <rb_malloc>
    f314:	mov	r6, r0
    f318:	str	r0, [r5, #8]
    f31c:	bl	43d8 <getdtablesize@plt>
    f320:	str	r0, [r6, #8]
    f324:	bl	4510 <epoll_create@plt>
    f328:	cmp	r0, r4
    f32c:	str	r0, [r6]
    f330:	blt	f360 <rb_init_netio_epoll+0x6c>
    f334:	ldr	r2, [pc, #48]	; f36c <rb_init_netio_epoll+0x78>
    f338:	mov	r1, #64	; 0x40
    f33c:	add	r2, pc, r2
    f340:	bl	4ab0 <rb_open@plt>
    f344:	ldr	r5, [r5, #8]
    f348:	ldr	r0, [r5, #8]
    f34c:	lsl	r0, r0, #4
    f350:	bl	f234 <rb_malloc>
    f354:	str	r0, [r5, #4]
    f358:	mov	r0, r4
    f35c:	pop	{r4, r5, r6, pc}
    f360:	mvn	r0, #0
    f364:	pop	{r4, r5, r6, pc}
    f368:	.word	0x00034074
    f36c:	.word	0x00005bcb

0000f370 <rb_setup_fd_epoll>:
    f370:	mov	r0, #0
    f374:	bx	lr

0000f378 <rb_setselect_epoll>:
    f378:	tst	r1, #1
    f37c:	push	{r0, r1, r2, r3, r4, lr}
    f380:	ldr	ip, [r0, #20]
    f384:	beq	f3a0 <rb_setselect_epoll+0x28>
    f388:	cmp	r2, #0
    f38c:	orrne	lr, ip, #1
    f390:	biceq	lr, ip, #1
    f394:	str	lr, [r0, #20]
    f398:	str	r2, [r0, #28]
    f39c:	str	r3, [r0, #32]
    f3a0:	tst	r1, #2
    f3a4:	beq	f3c4 <rb_setselect_epoll+0x4c>
    f3a8:	ldr	r1, [r0, #20]
    f3ac:	cmp	r2, #0
    f3b0:	orrne	r1, r1, #4
    f3b4:	biceq	r1, r1, #4
    f3b8:	str	r1, [r0, #20]
    f3bc:	str	r2, [r0, #36]	; 0x24
    f3c0:	str	r3, [r0, #40]	; 0x28
    f3c4:	cmp	ip, #0
    f3c8:	ldr	r3, [r0, #20]
    f3cc:	bne	f3d8 <rb_setselect_epoll+0x60>
    f3d0:	cmp	r3, #0
    f3d4:	beq	f3f4 <rb_setselect_epoll+0x7c>
    f3d8:	cmp	r3, #0
    f3dc:	ble	f3fc <rb_setselect_epoll+0x84>
    f3e0:	cmp	ip, #0
    f3e4:	beq	f458 <rb_setselect_epoll+0xe0>
    f3e8:	cmp	ip, r3
    f3ec:	movne	r1, #3
    f3f0:	bne	f400 <rb_setselect_epoll+0x88>
    f3f4:	add	sp, sp, #20
    f3f8:	pop	{pc}		; (ldr pc, [sp], #4)
    f3fc:	mov	r1, #2
    f400:	tst	r1, #1
    f404:	str	r3, [sp]
    f408:	orrne	r3, r3, #-2147483648	; 0x80000000
    f40c:	strne	r3, [sp]
    f410:	ldr	r3, [pc, #72]	; f460 <rb_setselect_epoll+0xe8>
    f414:	str	r0, [sp, #8]
    f418:	add	r3, pc, r3
    f41c:	ldr	r2, [r0, #12]
    f420:	ldr	ip, [r3, #8]
    f424:	mov	r3, sp
    f428:	ldr	r0, [ip]
    f42c:	bl	4c84 <epoll_ctl@plt>
    f430:	cmp	r0, #0
    f434:	beq	f3f4 <rb_setselect_epoll+0x7c>
    f438:	bl	4d14 <__errno_location@plt>
    f43c:	ldr	r0, [r0]
    f440:	bl	43c0 <strerror@plt>
    f444:	mov	r1, r0
    f448:	ldr	r0, [pc, #20]	; f464 <rb_setselect_epoll+0xec>
    f44c:	add	r0, pc, r0
    f450:	bl	4948 <rb_lib_log@plt>
    f454:	bl	43e4 <abort@plt>
    f458:	mov	r1, #1
    f45c:	b	f400 <rb_setselect_epoll+0x88>
    f460:	.word	0x00033f60
    f464:	.word	0x00005ad1

0000f468 <rb_select_epoll>:
    f468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f46c:	mov	r3, r0
    f470:	ldr	r6, [pc, #424]	; f620 <rb_select_epoll+0x1b8>
    f474:	sub	sp, sp, #28
    f478:	add	r6, pc, r6
    f47c:	ldr	ip, [r6, #8]
    f480:	ldm	ip, {r0, r1, r2}
    f484:	bl	47d4 <epoll_wait@plt>
    f488:	mov	r8, r0
    f48c:	bl	4d14 <__errno_location@plt>
    f490:	mov	r7, r0
    f494:	ldr	r4, [r0]
    f498:	bl	49c0 <rb_set_time@plt>
    f49c:	cmp	r8, #0
    f4a0:	str	r4, [r7]
    f4a4:	bge	f4c8 <rb_select_epoll+0x60>
    f4a8:	mov	r0, r4
    f4ac:	bl	43fc <rb_ignore_errno@plt>
    f4b0:	cmp	r0, #0
    f4b4:	moveq	r0, #5
    f4b8:	beq	f4c0 <rb_select_epoll+0x58>
    f4bc:	mov	r0, #0
    f4c0:	add	sp, sp, #28
    f4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4c8:	beq	f4bc <rb_select_epoll+0x54>
    f4cc:	ldr	sl, [pc, #336]	; f624 <rb_select_epoll+0x1bc>
    f4d0:	ldr	fp, [pc, #336]	; f628 <rb_select_epoll+0x1c0>
    f4d4:	mov	r5, #0
    f4d8:	add	sl, pc, sl
    f4dc:	add	fp, pc, fp
    f4e0:	ldr	r2, [r6, #8]
    f4e4:	lsl	r3, r5, #4
    f4e8:	ldr	r2, [r2, #4]
    f4ec:	add	r1, r2, r3
    f4f0:	ldr	r2, [r2, r5, lsl #4]
    f4f4:	ldr	r4, [r1, #8]
    f4f8:	tst	r2, #25
    f4fc:	ldr	r9, [r4, #20]
    f500:	beq	f530 <rb_select_epoll+0xc8>
    f504:	ldr	r2, [r4, #28]
    f508:	mov	r0, #0
    f50c:	cmp	r2, r0
    f510:	ldr	r1, [r4, #32]
    f514:	str	r0, [r4, #28]
    f518:	str	r0, [r4, #32]
    f51c:	beq	f530 <rb_select_epoll+0xc8>
    f520:	mov	r0, r4
    f524:	str	r3, [sp, #4]
    f528:	blx	r2
    f52c:	ldr	r3, [sp, #4]
    f530:	ldrb	r2, [r4, #16]
    f534:	tst	r2, #1
    f538:	beq	f610 <rb_select_epoll+0x1a8>
    f53c:	ldr	r2, [sl, #8]
    f540:	ldr	r2, [r2, #4]
    f544:	ldr	r3, [r2, r3]
    f548:	tst	r3, #28
    f54c:	beq	f574 <rb_select_epoll+0x10c>
    f550:	ldr	r3, [r4, #36]	; 0x24
    f554:	mov	r2, #0
    f558:	cmp	r3, r2
    f55c:	ldr	r1, [r4, #40]	; 0x28
    f560:	str	r2, [r4, #36]	; 0x24
    f564:	str	r2, [r4, #40]	; 0x28
    f568:	beq	f574 <rb_select_epoll+0x10c>
    f56c:	mov	r0, r4
    f570:	blx	r3
    f574:	ldrb	r3, [r4, #16]
    f578:	tst	r3, #1
    f57c:	beq	f610 <rb_select_epoll+0x1a8>
    f580:	ldr	r2, [r4, #28]
    f584:	ldr	r1, [r4, #36]	; 0x24
    f588:	adds	r3, r2, #0
    f58c:	movne	r3, #1
    f590:	cmp	r1, #0
    f594:	beq	f5ac <rb_select_epoll+0x144>
    f598:	orr	r3, r3, #4
    f59c:	cmp	r9, r3
    f5a0:	beq	f610 <rb_select_epoll+0x1a8>
    f5a4:	mov	r1, #3
    f5a8:	b	f5c4 <rb_select_epoll+0x15c>
    f5ac:	cmp	r3, r9
    f5b0:	beq	f610 <rb_select_epoll+0x1a8>
    f5b4:	cmp	r2, #0
    f5b8:	moveq	r3, #0
    f5bc:	movne	r1, #3
    f5c0:	moveq	r1, #2
    f5c4:	ldr	r0, [fp, #8]
    f5c8:	cmp	r1, #3
    f5cc:	str	r3, [sp, #8]
    f5d0:	str	r3, [r4, #20]
    f5d4:	orreq	r3, r3, #-2147483648	; 0x80000000
    f5d8:	streq	r3, [sp, #8]
    f5dc:	str	r4, [sp, #16]
    f5e0:	add	r3, sp, #8
    f5e4:	ldr	r2, [r4, #12]
    f5e8:	ldr	r0, [r0]
    f5ec:	bl	4c84 <epoll_ctl@plt>
    f5f0:	cmp	r0, #0
    f5f4:	beq	f610 <rb_select_epoll+0x1a8>
    f5f8:	ldr	r0, [r7]
    f5fc:	bl	43c0 <strerror@plt>
    f600:	mov	r1, r0
    f604:	ldr	r0, [pc, #32]	; f62c <rb_select_epoll+0x1c4>
    f608:	add	r0, pc, r0
    f60c:	bl	4948 <rb_lib_log@plt>
    f610:	add	r5, r5, #1
    f614:	cmp	r8, r5
    f618:	bne	f4e0 <rb_select_epoll+0x78>
    f61c:	b	f4bc <rb_select_epoll+0x54>
    f620:	.word	0x00033f00
    f624:	.word	0x00033ea0
    f628:	.word	0x00033e9c
    f62c:	.word	0x00005940

0000f630 <rb_epoll_supports_event>:
    f630:	push	{r4, r5, r6, lr}
    f634:	sub	sp, sp, #288	; 0x120
    f638:	ldr	r4, [pc, #216]	; f718 <rb_epoll_supports_event+0xe8>
    f63c:	add	r4, pc, r4
    f640:	ldr	r0, [r4]
    f644:	cmp	r0, #1
    f648:	beq	f698 <rb_epoll_supports_event+0x68>
    f64c:	cmn	r0, #1
    f650:	beq	f6d4 <rb_epoll_supports_event+0xa4>
    f654:	ldr	r0, [pc, #192]	; f71c <rb_epoll_supports_event+0xec>
    f658:	add	r1, sp, #72	; 0x48
    f65c:	add	r0, pc, r0
    f660:	bl	1366c <__stat>
    f664:	cmp	r0, #0
    f668:	mvneq	r3, #0
    f66c:	streq	r3, [r4]
    f670:	beq	f698 <rb_epoll_supports_event+0x68>
    f674:	mov	r1, #0
    f678:	mov	r0, r1
    f67c:	bl	4bf4 <timerfd_create@plt>
    f680:	cmp	r0, #0
    f684:	blt	f6a0 <rb_epoll_supports_event+0x70>
    f688:	bl	496c <close@plt>
    f68c:	mov	r0, #1
    f690:	str	r0, [r4]
    f694:	str	r0, [r4, #4]
    f698:	add	sp, sp, #288	; 0x120
    f69c:	pop	{r4, r5, r6, pc}
    f6a0:	mov	r3, #26
    f6a4:	mov	r0, #0
    f6a8:	add	r2, sp, #4
    f6ac:	add	r1, sp, #8
    f6b0:	str	r3, [sp, #12]
    f6b4:	str	r0, [sp, #16]
    f6b8:	bl	454c <timer_create@plt>
    f6bc:	subs	r6, r0, #0
    f6c0:	beq	f6dc <rb_epoll_supports_event+0xac>
    f6c4:	ldr	r3, [pc, #84]	; f720 <rb_epoll_supports_event+0xf0>
    f6c8:	mvn	r2, #0
    f6cc:	add	r3, pc, r3
    f6d0:	str	r2, [r3]
    f6d4:	mov	r0, #0
    f6d8:	b	f698 <rb_epoll_supports_event+0x68>
    f6dc:	add	r5, sp, #160	; 0xa0
    f6e0:	ldr	r0, [sp, #4]
    f6e4:	bl	4aa4 <timer_delete@plt>
    f6e8:	mov	r0, r5
    f6ec:	bl	43b4 <sigemptyset@plt>
    f6f0:	mov	r2, r6
    f6f4:	mov	r1, r5
    f6f8:	mvn	r0, #0
    f6fc:	bl	445c <signalfd@plt>
    f700:	cmp	r0, #0
    f704:	blt	f6c4 <rb_epoll_supports_event+0x94>
    f708:	bl	496c <close@plt>
    f70c:	mov	r0, #1
    f710:	str	r0, [r4]
    f714:	b	f698 <rb_epoll_supports_event+0x68>
    f718:	.word	0x00033d3c
    f71c:	.word	0x00005914
    f720:	.word	0x00033cac

0000f724 <rb_epoll_init_event>:
    f724:	push	{r4, r5, r6, lr}
    f728:	sub	sp, sp, #128	; 0x80
    f72c:	ldr	r6, [pc, #152]	; f7cc <rb_epoll_init_event+0xa8>
    f730:	bl	f630 <rb_epoll_supports_event>
    f734:	add	r6, pc, r6
    f738:	ldr	r5, [r6, #4]
    f73c:	cmp	r5, #0
    f740:	bne	f7c4 <rb_epoll_init_event+0xa0>
    f744:	mov	r0, sp
    f748:	bl	43b4 <sigemptyset@plt>
    f74c:	bl	44a4 <__libc_current_sigrtmin@plt>
    f750:	mov	r1, r0
    f754:	mov	r0, sp
    f758:	bl	48a0 <sigaddset@plt>
    f75c:	mov	r2, r5
    f760:	mov	r1, sp
    f764:	mov	r0, r5
    f768:	bl	49e4 <sigprocmask@plt>
    f76c:	mov	r0, sp
    f770:	bl	43b4 <sigemptyset@plt>
    f774:	bl	44a4 <__libc_current_sigrtmin@plt>
    f778:	mov	r1, r0
    f77c:	mov	r0, sp
    f780:	bl	48a0 <sigaddset@plt>
    f784:	mov	r2, r5
    f788:	mov	r1, sp
    f78c:	mvn	r0, #0
    f790:	bl	445c <signalfd@plt>
    f794:	cmn	r0, #1
    f798:	streq	r0, [r6]
    f79c:	beq	f7c4 <rb_epoll_init_event+0xa0>
    f7a0:	ldr	r2, [pc, #40]	; f7d0 <rb_epoll_init_event+0xac>
    f7a4:	mov	r1, #64	; 0x40
    f7a8:	add	r2, pc, r2
    f7ac:	bl	4ab0 <rb_open@plt>
    f7b0:	mov	r4, r0
    f7b4:	bl	463c <rb_set_nb@plt>
    f7b8:	mov	r1, r5
    f7bc:	mov	r0, r4
    f7c0:	bl	f7d4 <signalfd_handler>
    f7c4:	add	sp, sp, #128	; 0x80
    f7c8:	pop	{r4, r5, r6, pc}
    f7cc:	.word	0x00033c44
    f7d0:	.word	0x000057e0

0000f7d4 <signalfd_handler>:
    f7d4:	ldr	r2, [pc, #216]	; f8b4 <signalfd_handler+0xe0>
    f7d8:	push	{r4, r5, r6, r7, r8, lr}
    f7dc:	add	r2, pc, r2
    f7e0:	mov	r5, r0
    f7e4:	add	lr, r2, #12
    f7e8:	mov	r3, #0
    f7ec:	add	r2, r2, #144	; 0x90
    f7f0:	mov	r0, #128	; 0x80
    f7f4:	mov	r1, lr
    f7f8:	add	ip, r2, r3, lsl #4
    f7fc:	str	ip, [r1, r3]!
    f800:	add	r3, r3, #8
    f804:	cmp	r3, #128	; 0x80
    f808:	str	r0, [r1, #4]
    f80c:	bne	f7f4 <signalfd_handler+0x20>
    f810:	ldr	r6, [pc, #160]	; f8b8 <signalfd_handler+0xe4>
    f814:	ldr	r7, [pc, #160]	; f8bc <signalfd_handler+0xe8>
    f818:	add	r6, pc, r6
    f81c:	add	r7, pc, r7
    f820:	add	r6, r6, #12
    f824:	add	r7, r7, #144	; 0x90
    f828:	mov	r0, r5
    f82c:	bl	4504 <rb_get_fd@plt>
    f830:	mov	r2, #16
    f834:	mov	r1, r6
    f838:	bl	4c9c <readv@plt>
    f83c:	cmp	r0, #0
    f840:	bne	f854 <signalfd_handler+0x80>
    f844:	mov	r0, r5
    f848:	bl	4888 <rb_close@plt>
    f84c:	pop	{r4, r5, r6, r7, r8, lr}
    f850:	b	f724 <rb_epoll_init_event>
    f854:	blt	f884 <signalfd_handler+0xb0>
    f858:	asr	r8, r0, #7
    f85c:	mov	r4, #0
    f860:	cmp	r4, r8
    f864:	beq	f828 <signalfd_handler+0x54>
    f868:	add	r3, r7, r4, lsl #7
    f86c:	ldr	r0, [r3, #48]	; 0x30
    f870:	cmp	r0, #0
    f874:	beq	f87c <signalfd_handler+0xa8>
    f878:	bl	48c4 <rb_run_one_event@plt>
    f87c:	add	r4, r4, #1
    f880:	b	f860 <signalfd_handler+0x8c>
    f884:	bl	4d14 <__errno_location@plt>
    f888:	ldr	r0, [r0]
    f88c:	bl	43fc <rb_ignore_errno@plt>
    f890:	cmp	r0, #0
    f894:	beq	f844 <signalfd_handler+0x70>
    f898:	ldr	r2, [pc, #32]	; f8c0 <signalfd_handler+0xec>
    f89c:	mov	r0, r5
    f8a0:	mov	r3, #0
    f8a4:	add	r2, pc, r2
    f8a8:	mov	r1, #1
    f8ac:	pop	{r4, r5, r6, r7, r8, lr}
    f8b0:	b	44c8 <rb_setselect@plt>
    f8b4:	.word	0x00033b9c
    f8b8:	.word	0x00033b60
    f8bc:	.word	0x00033b5c
    f8c0:	.word	0xffffff28

0000f8c4 <rb_epoll_sched_event>:
    f8c4:	ldr	r3, [pc, #504]	; fac4 <rb_epoll_sched_event+0x200>
    f8c8:	push	{r4, r5, r6, r7, r8, lr}
    f8cc:	add	r3, pc, r3
    f8d0:	sub	sp, sp, #80	; 0x50
    f8d4:	ldr	r4, [r3, #4]
    f8d8:	mov	r5, r0
    f8dc:	cmp	r4, #0
    f8e0:	mov	r8, r1
    f8e4:	beq	f9f8 <rb_epoll_sched_event+0x134>
    f8e8:	mov	r1, #0
    f8ec:	mov	r0, r1
    f8f0:	bl	4bf4 <timerfd_create@plt>
    f8f4:	subs	r6, r0, #0
    f8f8:	bge	f928 <rb_epoll_sched_event+0x64>
    f8fc:	bl	4d14 <__errno_location@plt>
    f900:	ldr	r0, [r0]
    f904:	bl	43c0 <strerror@plt>
    f908:	mov	r1, r0
    f90c:	ldr	r0, [pc, #436]	; fac8 <rb_epoll_sched_event+0x204>
    f910:	add	r0, pc, r0
    f914:	bl	4948 <rb_lib_log@plt>
    f918:	mov	r4, #0
    f91c:	mov	r0, r4
    f920:	add	sp, sp, #80	; 0x50
    f924:	pop	{r4, r5, r6, r7, r8, pc}
    f928:	add	r4, sp, #16
    f92c:	mov	r1, #0
    f930:	mov	r2, #16
    f934:	mov	r0, r4
    f938:	bl	4648 <memset@plt>
    f93c:	ldr	r3, [r5, #24]
    f940:	str	r8, [sp, #24]
    f944:	cmp	r3, #0
    f948:	addne	r3, sp, #24
    f94c:	mov	r2, r4
    f950:	ldmne	r3, {r0, r1}
    f954:	mov	r3, #0
    f958:	stmne	r4, {r0, r1}
    f95c:	mov	r1, r3
    f960:	mov	r0, r6
    f964:	bl	4c78 <timerfd_settime@plt>
    f968:	cmp	r0, #0
    f96c:	bge	f998 <rb_epoll_sched_event+0xd4>
    f970:	bl	4d14 <__errno_location@plt>
    f974:	ldr	r0, [r0]
    f978:	bl	43c0 <strerror@plt>
    f97c:	mov	r1, r0
    f980:	ldr	r0, [pc, #324]	; facc <rb_epoll_sched_event+0x208>
    f984:	add	r0, pc, r0
    f988:	bl	4948 <rb_lib_log@plt>
    f98c:	mov	r0, r6
    f990:	bl	496c <close@plt>
    f994:	b	f918 <rb_epoll_sched_event+0x54>
    f998:	ldr	r4, [pc, #304]	; fad0 <rb_epoll_sched_event+0x20c>
    f99c:	ldr	r2, [pc, #304]	; fad4 <rb_epoll_sched_event+0x210>
    f9a0:	add	r4, pc, r4
    f9a4:	add	r4, r4, #2192	; 0x890
    f9a8:	ldr	r3, [r5, #20]
    f9ac:	add	r2, pc, r2
    f9b0:	mov	r1, #136	; 0x88
    f9b4:	mov	r0, r4
    f9b8:	bl	4bdc <snprintf@plt>
    f9bc:	mov	r2, r4
    f9c0:	mov	r1, #64	; 0x40
    f9c4:	mov	r0, r6
    f9c8:	bl	4ab0 <rb_open@plt>
    f9cc:	mov	r4, r0
    f9d0:	bl	463c <rb_set_nb@plt>
    f9d4:	ldr	r2, [pc, #252]	; fad8 <rb_epoll_sched_event+0x214>
    f9d8:	str	r4, [r5, #40]	; 0x28
    f9dc:	mov	r3, r5
    f9e0:	add	r2, pc, r2
    f9e4:	mov	r1, #1
    f9e8:	mov	r0, r4
    f9ec:	bl	44c8 <rb_setselect@plt>
    f9f0:	mov	r4, #1
    f9f4:	b	f91c <rb_epoll_sched_event+0x58>
    f9f8:	add	r6, sp, #16
    f9fc:	mov	r2, #64	; 0x40
    fa00:	mov	r1, r4
    fa04:	mov	r0, r6
    fa08:	bl	4648 <memset@plt>
    fa0c:	mov	r0, #4
    fa10:	bl	f234 <rb_malloc>
    fa14:	str	r4, [sp, #24]
    fa18:	str	r0, [r5, #40]	; 0x28
    fa1c:	mov	r7, r0
    fa20:	bl	44a4 <__libc_current_sigrtmin@plt>
    fa24:	mov	r2, r7
    fa28:	mov	r1, r6
    fa2c:	str	r5, [sp, #16]
    fa30:	str	r0, [sp, #20]
    fa34:	mov	r0, r4
    fa38:	bl	454c <timer_create@plt>
    fa3c:	cmp	r0, #0
    fa40:	bge	fa64 <rb_epoll_sched_event+0x1a0>
    fa44:	bl	4d14 <__errno_location@plt>
    fa48:	ldr	r0, [r0]
    fa4c:	bl	43c0 <strerror@plt>
    fa50:	mov	r1, r0
    fa54:	ldr	r0, [pc, #128]	; fadc <rb_epoll_sched_event+0x218>
    fa58:	add	r0, pc, r0
    fa5c:	bl	4948 <rb_lib_log@plt>
    fa60:	b	f91c <rb_epoll_sched_event+0x58>
    fa64:	mov	r1, r4
    fa68:	mov	r2, #16
    fa6c:	mov	r0, sp
    fa70:	bl	4648 <memset@plt>
    fa74:	ldr	r3, [r5, #24]
    fa78:	str	r8, [sp, #8]
    fa7c:	cmp	r3, #0
    fa80:	addne	r3, sp, #8
    fa84:	mov	r2, sp
    fa88:	ldmne	r3, {r0, r1}
    fa8c:	mov	r3, #0
    fa90:	stmne	sp, {r0, r1}
    fa94:	mov	r1, r3
    fa98:	ldr	r0, [r7]
    fa9c:	bl	4774 <timer_settime@plt>
    faa0:	cmp	r0, #0
    faa4:	bge	f9f0 <rb_epoll_sched_event+0x12c>
    faa8:	bl	4d14 <__errno_location@plt>
    faac:	ldr	r0, [r0]
    fab0:	bl	43c0 <strerror@plt>
    fab4:	mov	r1, r0
    fab8:	ldr	r0, [pc, #32]	; fae0 <rb_epoll_sched_event+0x21c>
    fabc:	add	r0, pc, r0
    fac0:	b	fa5c <rb_epoll_sched_event+0x198>
    fac4:	.word	0x00033aac
    fac8:	.word	0x00005681
    facc:	.word	0x00005621
    fad0:	.word	0x000339d8
    fad4:	.word	0x0000560e
    fad8:	.word	0xfffff868
    fadc:	.word	0x0000556e
    fae0:	.word	0x0000551c

0000fae4 <rb_epoll_unsched_event>:
    fae4:	ldr	r3, [pc, #72]	; fb34 <rb_epoll_unsched_event+0x50>
    fae8:	push	{r4, lr}
    faec:	add	r3, pc, r3
    faf0:	mov	r4, r0
    faf4:	ldr	r3, [r3, #4]
    faf8:	cmp	r3, #0
    fafc:	beq	fb14 <rb_epoll_unsched_event+0x30>
    fb00:	ldr	r0, [r0, #40]	; 0x28
    fb04:	bl	4888 <rb_close@plt>
    fb08:	mov	r3, #0
    fb0c:	str	r3, [r4, #40]	; 0x28
    fb10:	pop	{r4, pc}
    fb14:	ldr	r3, [r0, #40]	; 0x28
    fb18:	ldr	r0, [r3]
    fb1c:	bl	4aa4 <timer_delete@plt>
    fb20:	ldr	r0, [r4, #40]	; 0x28
    fb24:	cmp	r0, #0
    fb28:	beq	fb08 <rb_epoll_unsched_event+0x24>
    fb2c:	bl	4714 <free@plt>
    fb30:	b	fb08 <rb_epoll_unsched_event+0x24>
    fb34:	.word	0x0003388c

0000fb38 <rb_setup_fd_poll>:
    fb38:	mov	r0, #0
    fb3c:	bx	lr

0000fb40 <rb_init_netio_poll>:
    fb40:	push	{r4, r5, r6, lr}
    fb44:	bl	448c <rb_getmaxconnect@plt>
    fb48:	lsl	r1, r0, #3
    fb4c:	mov	r0, #1
    fb50:	bl	460c <calloc@plt>
    fb54:	cmp	r0, #0
    fb58:	bne	fb60 <rb_init_netio_poll+0x20>
    fb5c:	bl	49b4 <rb_outofmemory@plt>
    fb60:	ldr	r4, [pc, #76]	; fbb4 <rb_init_netio_poll+0x74>
    fb64:	ldr	r5, [pc, #76]	; fbb8 <rb_init_netio_poll+0x78>
    fb68:	add	r4, pc, r4
    fb6c:	add	r5, pc, r5
    fb70:	str	r0, [r4]
    fb74:	bl	448c <rb_getmaxconnect@plt>
    fb78:	mvn	r6, #0
    fb7c:	str	r0, [r4, #8]
    fb80:	mov	r4, #0
    fb84:	bl	448c <rb_getmaxconnect@plt>
    fb88:	cmp	r4, r0
    fb8c:	blt	fba4 <rb_init_netio_poll+0x64>
    fb90:	ldr	r3, [pc, #36]	; fbbc <rb_init_netio_poll+0x7c>
    fb94:	mov	r0, #0
    fb98:	add	r3, pc, r3
    fb9c:	str	r0, [r3, #4]
    fba0:	pop	{r4, r5, r6, pc}
    fba4:	ldr	r3, [r5]
    fba8:	str	r6, [r3, r4, lsl #3]
    fbac:	add	r4, r4, #1
    fbb0:	b	fb84 <rb_init_netio_poll+0x44>
    fbb4:	.word	0x00034128
    fbb8:	.word	0x00034124
    fbbc:	.word	0x000340f8

0000fbc0 <rb_setselect_poll>:
    fbc0:	push	{r4, r5, r6, r7, r8, lr}
    fbc4:	subs	r5, r0, #0
    fbc8:	popeq	{r4, r5, r6, r7, r8, pc}
    fbcc:	tst	r1, #1
    fbd0:	beq	fbf0 <rb_setselect_poll+0x30>
    fbd4:	ldr	ip, [r5, #20]
    fbd8:	cmp	r2, #0
    fbdc:	orrne	ip, ip, #64	; 0x40
    fbe0:	biceq	ip, ip, #64	; 0x40
    fbe4:	str	r2, [r5, #28]
    fbe8:	str	r3, [r5, #32]
    fbec:	str	ip, [r5, #20]
    fbf0:	tst	r1, #2
    fbf4:	beq	fc14 <rb_setselect_poll+0x54>
    fbf8:	str	r3, [r5, #40]	; 0x28
    fbfc:	ldr	r3, [r5, #20]
    fc00:	cmp	r2, #0
    fc04:	orrne	r3, r3, #256	; 0x100
    fc08:	biceq	r3, r3, #256	; 0x100
    fc0c:	str	r2, [r5, #36]	; 0x24
    fc10:	str	r3, [r5, #20]
    fc14:	ldr	r7, [pc, #300]	; fd48 <rb_setselect_poll+0x188>
    fc18:	ldr	r3, [r5, #12]
    fc1c:	add	r7, pc, r7
    fc20:	ldr	r4, [r7, #8]
    fc24:	cmp	r3, r4
    fc28:	bge	fc70 <rb_setselect_poll+0xb0>
    fc2c:	ldr	r0, [r5, #20]
    fc30:	ldr	r3, [r5, #12]
    fc34:	cmp	r0, #0
    fc38:	bgt	fd20 <rb_setselect_poll+0x160>
    fc3c:	ldr	r0, [pc, #264]	; fd4c <rb_setselect_poll+0x18c>
    fc40:	mov	r2, #0
    fc44:	add	r0, pc, r0
    fc48:	ldr	r1, [r0]
    fc4c:	ldr	r0, [r0, #4]
    fc50:	add	ip, r1, r3, lsl #3
    fc54:	cmp	r3, r0
    fc58:	strh	r2, [ip, #4]
    fc5c:	mvn	ip, #0
    fc60:	str	ip, [r1, r3, lsl #3]
    fc64:	moveq	lr, #1
    fc68:	beq	fcd8 <rb_setselect_poll+0x118>
    fc6c:	pop	{r4, r5, r6, r7, r8, pc}
    fc70:	add	r4, r4, #1024	; 0x400
    fc74:	str	r4, [r7, #8]
    fc78:	lsl	r4, r4, #3
    fc7c:	mov	r1, r4
    fc80:	ldr	r0, [r7]
    fc84:	bl	4c6c <realloc@plt>
    fc88:	subs	r6, r0, #0
    fc8c:	bne	fc94 <rb_setselect_poll+0xd4>
    fc90:	bl	49b4 <rb_outofmemory@plt>
    fc94:	sub	r0, r4, #8128	; 0x1fc0
    fc98:	sub	r0, r0, #56	; 0x38
    fc9c:	mov	r2, #8192	; 0x2000
    fca0:	mov	r1, #0
    fca4:	add	r0, r6, r0
    fca8:	sub	r4, r4, #8192	; 0x2000
    fcac:	str	r6, [r7]
    fcb0:	add	r4, r6, r4
    fcb4:	bl	4648 <memset@plt>
    fcb8:	mov	r3, #0
    fcbc:	mvn	r2, #0
    fcc0:	add	r3, r3, #1
    fcc4:	cmp	r3, #1024	; 0x400
    fcc8:	beq	fc2c <rb_setselect_poll+0x6c>
    fccc:	str	r2, [r4, r3, lsl #3]
    fcd0:	b	fcc0 <rb_setselect_poll+0x100>
    fcd4:	mov	r2, lr
    fcd8:	subs	r0, r3, #0
    fcdc:	bge	fcf8 <rb_setselect_poll+0x138>
    fce0:	cmp	r2, #0
    fce4:	popeq	{r4, r5, r6, r7, r8, pc}
    fce8:	ldr	r2, [pc, #96]	; fd50 <rb_setselect_poll+0x190>
    fcec:	add	r2, pc, r2
    fcf0:	str	r3, [r2, #4]
    fcf4:	pop	{r4, r5, r6, r7, r8, pc}
    fcf8:	sub	r3, r3, #1
    fcfc:	add	ip, r1, r3, lsl #3
    fd00:	ldr	ip, [ip, #8]
    fd04:	cmn	ip, #1
    fd08:	beq	fcd4 <rb_setselect_poll+0x114>
    fd0c:	cmp	r2, #0
    fd10:	ldrne	r3, [pc, #60]	; fd54 <rb_setselect_poll+0x194>
    fd14:	addne	r3, pc, r3
    fd18:	strne	r0, [r3, #4]
    fd1c:	pop	{r4, r5, r6, r7, r8, pc}
    fd20:	ldr	r2, [pc, #48]	; fd58 <rb_setselect_poll+0x198>
    fd24:	add	r2, pc, r2
    fd28:	ldr	r1, [r2]
    fd2c:	add	ip, r1, r3, lsl #3
    fd30:	strh	r0, [ip, #4]
    fd34:	str	r3, [r1, r3, lsl #3]
    fd38:	ldr	r1, [r2, #4]
    fd3c:	cmp	r3, r1
    fd40:	bgt	fcf0 <rb_setselect_poll+0x130>
    fd44:	pop	{r4, r5, r6, r7, r8, pc}
    fd48:	.word	0x00034074
    fd4c:	.word	0x0003404c
    fd50:	.word	0x00033fa4
    fd54:	.word	0x00033f7c
    fd58:	.word	0x00033f6c

0000fd5c <rb_select_poll>:
    fd5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fd60:	mov	r2, r0
    fd64:	ldr	r5, [pc, #368]	; fedc <rb_select_poll+0x180>
    fd68:	ldr	r7, [pc, #368]	; fee0 <rb_select_poll+0x184>
    fd6c:	add	r5, pc, r5
    fd70:	add	r7, pc, r7
    fd74:	ldr	r1, [r5, #4]
    fd78:	ldr	r0, [r5]
    fd7c:	add	r1, r1, #1
    fd80:	bl	4a2c <poll@plt>
    fd84:	mov	r4, r0
    fd88:	bl	49c0 <rb_set_time@plt>
    fd8c:	cmp	r4, #0
    fd90:	bge	fdb0 <rb_select_poll+0x54>
    fd94:	bl	4d14 <__errno_location@plt>
    fd98:	ldr	r0, [r0]
    fd9c:	bl	43fc <rb_ignore_errno@plt>
    fda0:	cmp	r0, #0
    fda4:	bne	fe30 <rb_select_poll+0xd4>
    fda8:	mov	r0, #0
    fdac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fdb0:	beq	fda8 <rb_select_poll+0x4c>
    fdb4:	ldr	r8, [pc, #296]	; fee4 <rb_select_poll+0x188>
    fdb8:	mov	r6, #0
    fdbc:	mov	r9, #12
    fdc0:	ldr	r3, [r5, #4]
    fdc4:	cmp	r6, r3
    fdc8:	bgt	fda8 <rb_select_poll+0x4c>
    fdcc:	ldr	r3, [r5]
    fdd0:	add	r2, r3, r6, lsl #3
    fdd4:	ldrsh	sl, [r2, #6]
    fdd8:	ldr	r2, [r3, r6, lsl #3]
    fddc:	clz	r3, sl
    fde0:	lsr	r3, r3, #5
    fde4:	orrs	r3, r3, r2, lsr #31
    fde8:	bne	fed4 <rb_select_poll+0x178>
    fdec:	asr	r3, r2, #24
    fdf0:	ldr	r1, [pc, #240]	; fee8 <rb_select_poll+0x18c>
    fdf4:	eor	r3, r3, r2, asr #12
    fdf8:	eor	r3, r3, r2
    fdfc:	and	r3, r3, r8
    fe00:	ldr	r1, [r7, r1]
    fe04:	mul	r3, r9, r3
    fe08:	ldr	r1, [r1]
    fe0c:	ldr	r3, [r1, r3]
    fe10:	cmp	r3, #0
    fe14:	beq	fed4 <rb_select_poll+0x178>
    fe18:	ldr	r4, [r3]
    fe1c:	ldr	r1, [r4, #12]
    fe20:	cmp	r2, r1
    fe24:	beq	fe38 <rb_select_poll+0xdc>
    fe28:	ldr	r3, [r3, #8]
    fe2c:	b	fe10 <rb_select_poll+0xb4>
    fe30:	mov	r0, #5
    fe34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fe38:	tst	sl, #89	; 0x59
    fe3c:	beq	fe64 <rb_select_poll+0x108>
    fe40:	ldr	r3, [r4, #28]
    fe44:	mov	r2, #0
    fe48:	cmp	r3, r2
    fe4c:	ldr	r1, [r4, #32]
    fe50:	str	r2, [r4, #28]
    fe54:	str	r2, [r4, #32]
    fe58:	beq	fe64 <rb_select_poll+0x108>
    fe5c:	mov	r0, r4
    fe60:	blx	r3
    fe64:	ldrb	r3, [r4, #16]
    fe68:	tst	r3, #1
    fe6c:	beq	fe9c <rb_select_poll+0x140>
    fe70:	tst	sl, #284	; 0x11c
    fe74:	beq	fe9c <rb_select_poll+0x140>
    fe78:	ldr	r3, [r4, #36]	; 0x24
    fe7c:	mov	r2, #0
    fe80:	cmp	r3, r2
    fe84:	ldr	r1, [r4, #40]	; 0x28
    fe88:	str	r2, [r4, #36]	; 0x24
    fe8c:	str	r2, [r4, #40]	; 0x28
    fe90:	beq	fe9c <rb_select_poll+0x140>
    fe94:	mov	r0, r4
    fe98:	blx	r3
    fe9c:	ldr	r3, [r4, #28]
    fea0:	cmp	r3, #0
    fea4:	bne	feb8 <rb_select_poll+0x15c>
    fea8:	mov	r2, r3
    feac:	mov	r1, #1
    feb0:	mov	r0, r4
    feb4:	bl	fbc0 <rb_setselect_poll>
    feb8:	ldr	r3, [r4, #36]	; 0x24
    febc:	cmp	r3, #0
    fec0:	bne	fed4 <rb_select_poll+0x178>
    fec4:	mov	r2, r3
    fec8:	mov	r1, #2
    fecc:	mov	r0, r4
    fed0:	bl	fbc0 <rb_setselect_poll>
    fed4:	add	r6, r6, #1
    fed8:	b	fdc0 <rb_select_poll+0x64>
    fedc:	.word	0x00033f24
    fee0:	.word	0x00016288
    fee4:	.word	0x00000fff
    fee8:	.word	0x000003c4

0000feec <rb_ports_supports_event>:
    feec:	push	{r4, lr}
    fef0:	bl	4d14 <__errno_location@plt>
    fef4:	mov	r3, #38	; 0x26
    fef8:	str	r3, [r0]
    fefc:	mov	r0, #0
    ff00:	pop	{r4, pc}

0000ff04 <rb_ports_init_event>:
    ff04:	bx	lr

0000ff08 <rb_ports_sched_event>:
    ff08:	push	{r4, lr}
    ff0c:	bl	4d14 <__errno_location@plt>
    ff10:	mov	r3, #38	; 0x26
    ff14:	str	r3, [r0]
    ff18:	mvn	r0, #0
    ff1c:	pop	{r4, pc}

0000ff20 <rb_ports_unsched_event>:
    ff20:	bx	lr

0000ff24 <rb_init_netio_ports>:
    ff24:	mov	r0, #38	; 0x26
    ff28:	bx	lr

0000ff2c <rb_setselect_ports>:
    ff2c:	push	{r4, lr}
    ff30:	bl	4d14 <__errno_location@plt>
    ff34:	mov	r3, #38	; 0x26
    ff38:	str	r3, [r0]
    ff3c:	pop	{r4, pc}

0000ff40 <rb_select_ports>:
    ff40:	push	{r4, lr}
    ff44:	bl	4d14 <__errno_location@plt>
    ff48:	mov	r3, #38	; 0x26
    ff4c:	str	r3, [r0]
    ff50:	mvn	r0, #0
    ff54:	pop	{r4, pc}

0000ff58 <rb_setup_fd_ports>:
    ff58:	push	{r4, lr}
    ff5c:	bl	4d14 <__errno_location@plt>
    ff60:	mov	r3, #38	; 0x26
    ff64:	str	r3, [r0]
    ff68:	mvn	r0, #0
    ff6c:	pop	{r4, pc}

0000ff70 <rb_find_fd>:
    ff70:	ldr	r1, [pc, #92]	; ffd4 <rb_find_fd+0x64>
    ff74:	subs	r2, r0, #0
    ff78:	add	r1, pc, r1
    ff7c:	blt	ffb4 <rb_find_fd+0x44>
    ff80:	ldr	r0, [pc, #80]	; ffd8 <rb_find_fd+0x68>
    ff84:	asr	r3, r2, #24
    ff88:	eor	r3, r3, r2, asr #12
    ff8c:	eor	r3, r3, r2
    ff90:	ldr	r1, [r1, r0]
    ff94:	lsl	r3, r3, #20
    ff98:	ldr	r0, [r1]
    ff9c:	lsr	r3, r3, #20
    ffa0:	mov	r1, #12
    ffa4:	mul	r3, r1, r3
    ffa8:	ldr	r3, [r0, r3]
    ffac:	cmp	r3, #0
    ffb0:	bne	ffbc <rb_find_fd+0x4c>
    ffb4:	mov	r0, #0
    ffb8:	bx	lr
    ffbc:	ldr	r0, [r3]
    ffc0:	ldr	r1, [r0, #12]
    ffc4:	cmp	r2, r1
    ffc8:	bxeq	lr
    ffcc:	ldr	r3, [r3, #8]
    ffd0:	b	ffac <rb_find_fd+0x3c>
    ffd4:	.word	0x00016080
    ffd8:	.word	0x000003c4

0000ffdc <rb_init_netio_sigio>:
    ffdc:	push	{r4, r5, r6, lr}
    ffe0:	bl	448c <rb_getmaxconnect@plt>
    ffe4:	ldr	r4, [pc, #180]	; 100a0 <rb_init_netio_sigio+0xc4>
    ffe8:	add	r4, pc, r4
    ffec:	lsl	r1, r0, #3
    fff0:	mov	r0, #1
    fff4:	bl	460c <calloc@plt>
    fff8:	cmp	r0, #0
    fffc:	bne	10004 <rb_init_netio_sigio+0x28>
   10000:	bl	49b4 <rb_outofmemory@plt>
   10004:	ldr	r3, [pc, #152]	; 100a4 <rb_init_netio_sigio+0xc8>
   10008:	mov	r5, #0
   1000c:	mvn	r6, #0
   10010:	ldr	r4, [r4, r3]
   10014:	str	r0, [r4]
   10018:	bl	448c <rb_getmaxconnect@plt>
   1001c:	str	r0, [r4, #8]
   10020:	bl	448c <rb_getmaxconnect@plt>
   10024:	cmp	r5, r0
   10028:	blt	10090 <rb_init_netio_sigio+0xb4>
   1002c:	mov	r5, #0
   10030:	str	r5, [r4, #4]
   10034:	ldr	r4, [pc, #108]	; 100a8 <rb_init_netio_sigio+0xcc>
   10038:	mov	r3, #1
   1003c:	add	r4, pc, r4
   10040:	str	r3, [r4], #4
   10044:	mov	r0, r4
   10048:	bl	43b4 <sigemptyset@plt>
   1004c:	bl	44a4 <__libc_current_sigrtmin@plt>
   10050:	mov	r1, r0
   10054:	mov	r0, r4
   10058:	bl	48a0 <sigaddset@plt>
   1005c:	mov	r1, #29
   10060:	mov	r0, r4
   10064:	bl	48a0 <sigaddset@plt>
   10068:	bl	44a4 <__libc_current_sigrtmin@plt>
   1006c:	add	r1, r0, #1
   10070:	mov	r0, r4
   10074:	bl	48a0 <sigaddset@plt>
   10078:	mov	r2, r5
   1007c:	mov	r1, r4
   10080:	mov	r0, r5
   10084:	bl	49e4 <sigprocmask@plt>
   10088:	mov	r0, r5
   1008c:	pop	{r4, r5, r6, pc}
   10090:	ldr	r3, [r4]
   10094:	str	r6, [r3, r5, lsl #3]
   10098:	add	r5, r5, #1
   1009c:	b	10020 <rb_init_netio_sigio+0x44>
   100a0:	.word	0x00016010
   100a4:	.word	0x000003d4
   100a8:	.word	0x00033c60

000100ac <rb_setup_fd_sigio>:
   100ac:	push	{r4, r5, r6, lr}
   100b0:	mov	r2, #0
   100b4:	ldr	r5, [r0, #12]
   100b8:	mov	r1, #3
   100bc:	mov	r0, r5
   100c0:	bl	4c30 <fcntl@plt>
   100c4:	cmn	r0, #1
   100c8:	bne	100d4 <rb_setup_fd_sigio+0x28>
   100cc:	mov	r0, #0
   100d0:	pop	{r4, r5, r6, pc}
   100d4:	tst	r0, #8192	; 0x2000
   100d8:	mov	r4, r0
   100dc:	beq	100f4 <rb_setup_fd_sigio+0x48>
   100e0:	bic	r4, r0, #8192	; 0x2000
   100e4:	mov	r2, r4
   100e8:	mov	r1, #4
   100ec:	mov	r0, r5
   100f0:	bl	4c30 <fcntl@plt>
   100f4:	orr	r2, r4, #10240	; 0x2800
   100f8:	mov	r1, #4
   100fc:	mov	r0, r5
   10100:	bl	4c30 <fcntl@plt>
   10104:	cmn	r0, #1
   10108:	beq	100cc <rb_setup_fd_sigio+0x20>
   1010c:	bl	44a4 <__libc_current_sigrtmin@plt>
   10110:	mov	r1, #10
   10114:	mov	r2, r0
   10118:	mov	r0, r5
   1011c:	bl	4c30 <fcntl@plt>
   10120:	cmn	r0, #1
   10124:	beq	100cc <rb_setup_fd_sigio+0x20>
   10128:	bl	4af8 <getpid@plt>
   1012c:	mov	r1, #8
   10130:	mov	r2, r0
   10134:	mov	r0, r5
   10138:	bl	4c30 <fcntl@plt>
   1013c:	adds	r0, r0, #1
   10140:	movne	r0, #1
   10144:	pop	{r4, r5, r6, pc}

00010148 <rb_setselect_sigio>:
   10148:	push	{r4, r5, r6, r7, r8, lr}
   1014c:	subs	r4, r0, #0
   10150:	ldr	lr, [pc, #352]	; 102b8 <rb_setselect_sigio+0x170>
   10154:	add	lr, pc, lr
   10158:	popeq	{r4, r5, r6, r7, r8, pc}
   1015c:	tst	r1, #1
   10160:	beq	10180 <rb_setselect_sigio+0x38>
   10164:	ldr	ip, [r4, #20]
   10168:	cmp	r2, #0
   1016c:	orrne	ip, ip, #64	; 0x40
   10170:	biceq	ip, ip, #64	; 0x40
   10174:	str	r2, [r4, #28]
   10178:	str	r3, [r4, #32]
   1017c:	str	ip, [r4, #20]
   10180:	tst	r1, #2
   10184:	beq	101a4 <rb_setselect_sigio+0x5c>
   10188:	str	r3, [r4, #40]	; 0x28
   1018c:	ldr	r3, [r4, #20]
   10190:	cmp	r2, #0
   10194:	orrne	r3, r3, #256	; 0x100
   10198:	biceq	r3, r3, #256	; 0x100
   1019c:	str	r2, [r4, #36]	; 0x24
   101a0:	str	r3, [r4, #20]
   101a4:	ldr	r3, [pc, #272]	; 102bc <rb_setselect_sigio+0x174>
   101a8:	ldr	r5, [lr, r3]
   101ac:	ldr	r3, [r4, #12]
   101b0:	ldr	r7, [r5, #8]
   101b4:	cmp	r3, r7
   101b8:	bge	101f8 <rb_setselect_sigio+0xb0>
   101bc:	ldr	r1, [r4, #20]
   101c0:	ldr	r3, [r4, #12]
   101c4:	cmp	r1, #0
   101c8:	bgt	10298 <rb_setselect_sigio+0x150>
   101cc:	ldr	r1, [r5]
   101d0:	mov	r2, #0
   101d4:	add	r0, r1, r3, lsl #3
   101d8:	strh	r2, [r0, #4]
   101dc:	mvn	r0, #0
   101e0:	str	r0, [r1, r3, lsl #3]
   101e4:	ldr	r0, [r5, #4]
   101e8:	cmp	r3, r0
   101ec:	moveq	lr, #1
   101f0:	beq	10260 <rb_setselect_sigio+0x118>
   101f4:	pop	{r4, r5, r6, r7, r8, pc}
   101f8:	add	r3, r7, #1024	; 0x400
   101fc:	ldr	r0, [r5]
   10200:	lsl	r6, r3, #3
   10204:	mov	r1, r6
   10208:	str	r3, [r5, #8]
   1020c:	bl	4c6c <realloc@plt>
   10210:	cmp	r0, #0
   10214:	bne	1021c <rb_setselect_sigio+0xd4>
   10218:	bl	49b4 <rb_outofmemory@plt>
   1021c:	sub	r6, r6, #8128	; 0x1fc0
   10220:	sub	r6, r6, #56	; 0x38
   10224:	str	r0, [r5]
   10228:	mov	r2, #8192	; 0x2000
   1022c:	mov	r1, #0
   10230:	add	r0, r0, r6
   10234:	bl	4648 <memset@plt>
   10238:	ldr	r2, [r5, #8]
   1023c:	ldr	r1, [r5]
   10240:	add	r3, r7, #1
   10244:	mvn	r0, #0
   10248:	cmp	r3, r2
   1024c:	bge	101bc <rb_setselect_sigio+0x74>
   10250:	str	r0, [r1, r3, lsl #3]
   10254:	add	r3, r3, #1
   10258:	b	10248 <rb_setselect_sigio+0x100>
   1025c:	mov	r2, lr
   10260:	subs	r0, r3, #0
   10264:	bge	10278 <rb_setselect_sigio+0x130>
   10268:	cmp	r2, #0
   1026c:	popeq	{r4, r5, r6, r7, r8, pc}
   10270:	str	r3, [r5, #4]
   10274:	pop	{r4, r5, r6, r7, r8, pc}
   10278:	sub	r3, r3, #1
   1027c:	add	ip, r1, r3, lsl #3
   10280:	ldr	ip, [ip, #8]
   10284:	cmn	ip, #1
   10288:	beq	1025c <rb_setselect_sigio+0x114>
   1028c:	cmp	r2, #0
   10290:	strne	r0, [r5, #4]
   10294:	pop	{r4, r5, r6, r7, r8, pc}
   10298:	ldr	r2, [r5]
   1029c:	add	r0, r2, r3, lsl #3
   102a0:	strh	r1, [r0, #4]
   102a4:	str	r3, [r2, r3, lsl #3]
   102a8:	ldr	r2, [r5, #4]
   102ac:	cmp	r3, r2
   102b0:	bgt	10270 <rb_setselect_sigio+0x128>
   102b4:	pop	{r4, r5, r6, r7, r8, pc}
   102b8:	.word	0x00015ea4
   102bc:	.word	0x000003d4

000102c0 <rb_sigio_supports_event>:
   102c0:	push	{r4, r5, lr}
   102c4:	sub	sp, sp, #76	; 0x4c
   102c8:	ldr	r5, [pc, #100]	; 10334 <rb_sigio_supports_event+0x74>
   102cc:	add	r5, pc, r5
   102d0:	ldr	r0, [r5, #132]	; 0x84
   102d4:	cmp	r0, #1
   102d8:	beq	10324 <rb_sigio_supports_event+0x64>
   102dc:	cmn	r0, #1
   102e0:	mov	r4, #0
   102e4:	beq	1032c <rb_sigio_supports_event+0x6c>
   102e8:	mov	r3, #26
   102ec:	add	r2, sp, #4
   102f0:	add	r1, sp, #8
   102f4:	mov	r0, r4
   102f8:	str	r3, [sp, #12]
   102fc:	str	r4, [sp, #16]
   10300:	bl	454c <timer_create@plt>
   10304:	cmp	r0, r4
   10308:	mvnne	r3, #0
   1030c:	strne	r3, [r5, #132]	; 0x84
   10310:	bne	1032c <rb_sigio_supports_event+0x6c>
   10314:	ldr	r0, [sp, #4]
   10318:	bl	4aa4 <timer_delete@plt>
   1031c:	mov	r0, #1
   10320:	str	r0, [r5, #132]	; 0x84
   10324:	add	sp, sp, #76	; 0x4c
   10328:	pop	{r4, r5, pc}
   1032c:	mov	r0, r4
   10330:	b	10324 <rb_sigio_supports_event+0x64>
   10334:	.word	0x000339d0

00010338 <rb_select_sigio>:
   10338:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1033c:	sub	sp, sp, #136	; 0x88
   10340:	mov	r6, r0
   10344:	bl	102c0 <rb_sigio_supports_event>
   10348:	mvn	r3, r6
   1034c:	ldr	r7, [pc, #752]	; 10644 <rb_select_sigio+0x30c>
   10350:	lsr	r3, r3, #31
   10354:	add	r7, pc, r7
   10358:	cmp	r0, #0
   1035c:	moveq	r0, r3
   10360:	orrne	r0, r3, #1
   10364:	cmp	r0, #0
   10368:	beq	10394 <rb_select_sigio+0x5c>
   1036c:	mov	r1, #1000	; 0x3e8
   10370:	mov	r0, r6
   10374:	bl	1341c <__divsi3>
   10378:	mov	r1, #1000	; 0x3e8
   1037c:	str	r0, [sp]
   10380:	mov	r0, r6
   10384:	bl	1363c <__aeabi_idivmod>
   10388:	ldr	r3, [pc, #696]	; 10648 <rb_select_sigio+0x310>
   1038c:	mul	r1, r3, r1
   10390:	str	r1, [sp, #4]
   10394:	ldr	r8, [pc, #688]	; 1064c <rb_select_sigio+0x314>
   10398:	ldr	sl, [pc, #688]	; 10650 <rb_select_sigio+0x318>
   1039c:	add	r8, pc, r8
   103a0:	add	r9, r8, #4
   103a4:	add	sl, pc, sl
   103a8:	ldr	r3, [r8]
   103ac:	cmp	r3, #0
   103b0:	bne	104f0 <rb_select_sigio+0x1b8>
   103b4:	ldr	r3, [r8, #132]	; 0x84
   103b8:	add	r1, sp, #8
   103bc:	adds	r3, r3, #0
   103c0:	movne	r3, #1
   103c4:	orrs	r3, r3, r6, lsr #31
   103c8:	beq	10424 <rb_select_sigio+0xec>
   103cc:	mov	r0, r9
   103d0:	bl	4498 <sigwaitinfo@plt>
   103d4:	cmp	r0, #0
   103d8:	mov	r4, r0
   103dc:	ble	10404 <rb_select_sigio+0xcc>
   103e0:	cmp	r0, #29
   103e4:	bne	10434 <rb_select_sigio+0xfc>
   103e8:	ldr	r0, [pc, #612]	; 10654 <rb_select_sigio+0x31c>
   103ec:	add	r0, pc, r0
   103f0:	bl	4948 <rb_lib_log@plt>
   103f4:	ldr	r3, [pc, #604]	; 10658 <rb_select_sigio+0x320>
   103f8:	mov	r2, #1
   103fc:	add	r3, pc, r3
   10400:	str	r2, [r3]
   10404:	ldr	r3, [pc, #592]	; 1065c <rb_select_sigio+0x324>
   10408:	ldr	r4, [pc, r3]
   1040c:	cmp	r4, #0
   10410:	bne	104f0 <rb_select_sigio+0x1b8>
   10414:	bl	49c0 <rb_set_time@plt>
   10418:	mov	r0, r4
   1041c:	add	sp, sp, #136	; 0x88
   10420:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10424:	mov	r2, sp
   10428:	mov	r0, r9
   1042c:	bl	44e0 <sigtimedwait@plt>
   10430:	b	103d4 <rb_select_sigio+0x9c>
   10434:	bl	44a4 <__libc_current_sigrtmin@plt>
   10438:	add	r0, r0, #1
   1043c:	cmp	r4, r0
   10440:	bne	10464 <rb_select_sigio+0x12c>
   10444:	ldr	r3, [sl, #132]	; 0x84
   10448:	cmp	r3, #0
   1044c:	beq	10464 <rb_select_sigio+0x12c>
   10450:	ldr	r0, [sp, #28]
   10454:	cmp	r0, #0
   10458:	beq	103a8 <rb_select_sigio+0x70>
   1045c:	bl	48c4 <rb_run_one_event@plt>
   10460:	b	103a8 <rb_select_sigio+0x70>
   10464:	ldr	r3, [pc, #500]	; 10660 <rb_select_sigio+0x328>
   10468:	ldr	r0, [sp, #24]
   1046c:	ldr	r2, [sp, #20]
   10470:	ldr	r3, [r7, r3]
   10474:	ldr	r3, [r3]
   10478:	add	r3, r3, r0, lsl #3
   1047c:	ldrh	r5, [r3, #6]
   10480:	orr	r5, r5, r2
   10484:	sxth	r5, r5
   10488:	strh	r5, [r3, #6]
   1048c:	bl	ff70 <rb_find_fd>
   10490:	subs	r4, r0, #0
   10494:	beq	103a8 <rb_select_sigio+0x70>
   10498:	tst	r5, #89	; 0x59
   1049c:	beq	104c0 <rb_select_sigio+0x188>
   104a0:	ldr	r3, [r4, #28]
   104a4:	mov	r2, #0
   104a8:	cmp	r3, r2
   104ac:	ldr	r1, [r4, #32]
   104b0:	str	r2, [r4, #28]
   104b4:	str	r2, [r4, #32]
   104b8:	beq	104c0 <rb_select_sigio+0x188>
   104bc:	blx	r3
   104c0:	tst	r5, #284	; 0x11c
   104c4:	beq	103a8 <rb_select_sigio+0x70>
   104c8:	ldr	r3, [r4, #36]	; 0x24
   104cc:	mov	r2, #0
   104d0:	cmp	r3, r2
   104d4:	ldr	r1, [r4, #40]	; 0x28
   104d8:	str	r2, [r4, #36]	; 0x24
   104dc:	str	r2, [r4, #40]	; 0x28
   104e0:	beq	103a8 <rb_select_sigio+0x70>
   104e4:	mov	r0, r4
   104e8:	blx	r3
   104ec:	b	103a8 <rb_select_sigio+0x70>
   104f0:	bl	44a4 <__libc_current_sigrtmin@plt>
   104f4:	mov	r1, #1
   104f8:	bl	44f8 <signal@plt>
   104fc:	bl	44a4 <__libc_current_sigrtmin@plt>
   10500:	mov	r1, #0
   10504:	bl	44f8 <signal@plt>
   10508:	ldr	r3, [pc, #340]	; 10664 <rb_select_sigio+0x32c>
   1050c:	mov	r5, #0
   10510:	add	r3, pc, r3
   10514:	mov	r2, r6
   10518:	str	r5, [r3]
   1051c:	ldr	r3, [pc, #316]	; 10660 <rb_select_sigio+0x328>
   10520:	ldr	r8, [r7, r3]
   10524:	ldr	r1, [r8, #4]
   10528:	ldr	r0, [r8]
   1052c:	add	r1, r1, #1
   10530:	bl	4a2c <poll@plt>
   10534:	mov	r4, r0
   10538:	bl	49c0 <rb_set_time@plt>
   1053c:	cmp	r4, r5
   10540:	bge	10564 <rb_select_sigio+0x22c>
   10544:	bl	4d14 <__errno_location@plt>
   10548:	ldr	r0, [r0]
   1054c:	bl	43fc <rb_ignore_errno@plt>
   10550:	cmp	r0, r5
   10554:	movne	r4, #5
   10558:	bne	10418 <rb_select_sigio+0xe0>
   1055c:	mov	r4, #0
   10560:	b	10418 <rb_select_sigio+0xe0>
   10564:	movne	r7, r5
   10568:	movne	r9, #2
   1056c:	movne	sl, #1
   10570:	beq	1055c <rb_select_sigio+0x224>
   10574:	ldr	r3, [r8, #4]
   10578:	cmp	r5, r3
   1057c:	bgt	1055c <rb_select_sigio+0x224>
   10580:	ldr	r3, [r8]
   10584:	add	r2, r3, r5, lsl #3
   10588:	ldrsh	r6, [r2, #6]
   1058c:	cmp	r6, #0
   10590:	beq	1063c <rb_select_sigio+0x304>
   10594:	ldr	r0, [r3, r5, lsl #3]
   10598:	cmn	r0, #1
   1059c:	beq	1063c <rb_select_sigio+0x304>
   105a0:	bl	ff70 <rb_find_fd>
   105a4:	subs	r4, r0, #0
   105a8:	beq	1063c <rb_select_sigio+0x304>
   105ac:	tst	r6, #89	; 0x59
   105b0:	beq	105d0 <rb_select_sigio+0x298>
   105b4:	ldr	r3, [r4, #28]
   105b8:	ldr	r1, [r4, #32]
   105bc:	cmp	r3, #0
   105c0:	str	r7, [r4, #28]
   105c4:	str	r7, [r4, #32]
   105c8:	beq	105d0 <rb_select_sigio+0x298>
   105cc:	blx	r3
   105d0:	ldrb	r3, [r4, #16]
   105d4:	tst	r3, #1
   105d8:	beq	10604 <rb_select_sigio+0x2cc>
   105dc:	tst	r6, #284	; 0x11c
   105e0:	beq	10604 <rb_select_sigio+0x2cc>
   105e4:	ldr	r3, [r4, #36]	; 0x24
   105e8:	ldr	r1, [r4, #40]	; 0x28
   105ec:	cmp	r3, #0
   105f0:	str	r7, [r4, #36]	; 0x24
   105f4:	str	r7, [r4, #40]	; 0x28
   105f8:	beq	10604 <rb_select_sigio+0x2cc>
   105fc:	mov	r0, r4
   10600:	blx	r3
   10604:	ldr	r2, [r4, #28]
   10608:	cmp	r2, #0
   1060c:	bne	10620 <rb_select_sigio+0x2e8>
   10610:	mov	r3, r7
   10614:	mov	r1, sl
   10618:	mov	r0, r4
   1061c:	bl	10148 <rb_setselect_sigio>
   10620:	ldr	r2, [r4, #36]	; 0x24
   10624:	cmp	r2, #0
   10628:	bne	1063c <rb_select_sigio+0x304>
   1062c:	mov	r3, r7
   10630:	mov	r1, r9
   10634:	mov	r0, r4
   10638:	bl	10148 <rb_setselect_sigio>
   1063c:	add	r5, r5, #1
   10640:	b	10574 <rb_select_sigio+0x23c>
   10644:	.word	0x00015ca4
   10648:	.word	0x000f4240
   1064c:	.word	0x00033900
   10650:	.word	0x000338f8
   10654:	.word	0x00004bff
   10658:	.word	0x000338a0
   1065c:	.word	0x00033894
   10660:	.word	0x000003d4
   10664:	.word	0x0003378c

00010668 <rb_sigio_init_event>:
   10668:	b	102c0 <rb_sigio_supports_event>

0001066c <rb_sigio_sched_event>:
   1066c:	ldr	r3, [pc, #264]	; 1077c <rb_sigio_sched_event+0x110>
   10670:	add	r3, pc, r3
   10674:	ldr	r3, [r3, #132]	; 0x84
   10678:	cmp	r3, #0
   1067c:	ble	10774 <rb_sigio_sched_event+0x108>
   10680:	push	{r4, r5, r6, r7, lr}
   10684:	sub	sp, sp, #84	; 0x54
   10688:	add	r5, sp, #16
   1068c:	mov	r2, #64	; 0x40
   10690:	mov	r7, r1
   10694:	mov	r4, r0
   10698:	mov	r1, #0
   1069c:	mov	r0, r5
   106a0:	bl	4648 <memset@plt>
   106a4:	mov	r1, #4
   106a8:	mov	r0, #1
   106ac:	bl	460c <calloc@plt>
   106b0:	subs	r6, r0, #0
   106b4:	bne	106bc <rb_sigio_sched_event+0x50>
   106b8:	bl	49b4 <rb_outofmemory@plt>
   106bc:	str	r6, [r4, #40]	; 0x28
   106c0:	bl	44a4 <__libc_current_sigrtmin@plt>
   106c4:	mov	r2, r6
   106c8:	mov	r1, r5
   106cc:	str	r4, [sp, #16]
   106d0:	add	r0, r0, #1
   106d4:	str	r0, [sp, #20]
   106d8:	mov	r0, #0
   106dc:	bl	454c <timer_create@plt>
   106e0:	cmp	r0, #0
   106e4:	bge	10710 <rb_sigio_sched_event+0xa4>
   106e8:	bl	4d14 <__errno_location@plt>
   106ec:	ldr	r0, [r0]
   106f0:	bl	43c0 <strerror@plt>
   106f4:	mov	r1, r0
   106f8:	ldr	r0, [pc, #128]	; 10780 <rb_sigio_sched_event+0x114>
   106fc:	add	r0, pc, r0
   10700:	bl	4948 <rb_lib_log@plt>
   10704:	mov	r0, #0
   10708:	add	sp, sp, #84	; 0x54
   1070c:	pop	{r4, r5, r6, r7, pc}
   10710:	mov	r1, #0
   10714:	mov	r2, #16
   10718:	mov	r0, sp
   1071c:	bl	4648 <memset@plt>
   10720:	ldr	r3, [r4, #24]
   10724:	str	r7, [sp, #8]
   10728:	cmp	r3, #0
   1072c:	addne	r3, sp, #8
   10730:	mov	r2, sp
   10734:	ldmne	r3, {r0, r1}
   10738:	mov	r3, #0
   1073c:	stmne	sp, {r0, r1}
   10740:	mov	r1, r3
   10744:	ldr	r0, [r6]
   10748:	bl	4774 <timer_settime@plt>
   1074c:	cmp	r0, #0
   10750:	movge	r0, #1
   10754:	bge	10708 <rb_sigio_sched_event+0x9c>
   10758:	bl	4d14 <__errno_location@plt>
   1075c:	ldr	r0, [r0]
   10760:	bl	43c0 <strerror@plt>
   10764:	mov	r1, r0
   10768:	ldr	r0, [pc, #20]	; 10784 <rb_sigio_sched_event+0x118>
   1076c:	add	r0, pc, r0
   10770:	b	10700 <rb_sigio_sched_event+0x94>
   10774:	mov	r0, #0
   10778:	bx	lr
   1077c:	.word	0x0003362c
   10780:	.word	0x000048ca
   10784:	.word	0x0000486c

00010788 <rb_sigio_unsched_event>:
   10788:	ldr	r3, [pc, #60]	; 107cc <rb_sigio_unsched_event+0x44>
   1078c:	add	r3, pc, r3
   10790:	ldr	r3, [r3, #132]	; 0x84
   10794:	cmp	r3, #0
   10798:	bxle	lr
   1079c:	ldr	r3, [r0, #40]	; 0x28
   107a0:	push	{r4, lr}
   107a4:	mov	r4, r0
   107a8:	ldr	r0, [r3]
   107ac:	bl	4aa4 <timer_delete@plt>
   107b0:	ldr	r0, [r4, #40]	; 0x28
   107b4:	cmp	r0, #0
   107b8:	beq	107c0 <rb_sigio_unsched_event+0x38>
   107bc:	bl	4714 <free@plt>
   107c0:	mov	r3, #0
   107c4:	str	r3, [r4, #40]	; 0x28
   107c8:	pop	{r4, pc}
   107cc:	.word	0x00033510

000107d0 <select_update_selectfds>:
   107d0:	uxth	r1, r1
   107d4:	tst	r1, #1
   107d8:	push	{r4, r5, r6, r7, lr}
   107dc:	ldr	r3, [r0, #12]
   107e0:	beq	10830 <select_update_selectfds+0x60>
   107e4:	cmp	r3, #0
   107e8:	add	lr, r3, #31
   107ec:	movge	lr, r3
   107f0:	cmp	r2, #0
   107f4:	asr	lr, lr, #5
   107f8:	ldr	ip, [r0, #20]
   107fc:	beq	108b0 <select_update_selectfds+0xe0>
   10800:	ldr	r6, [pc, #428]	; 109b4 <select_update_selectfds+0x1e4>
   10804:	rsbs	r4, r3, #0
   10808:	add	r6, pc, r6
   1080c:	and	r4, r4, #31
   10810:	and	r5, r3, #31
   10814:	mov	r7, #1
   10818:	rsbpl	r5, r4, #0
   1081c:	ldr	r4, [r6, lr, lsl #2]
   10820:	orr	ip, ip, r7
   10824:	orr	r4, r4, r7, lsl r5
   10828:	str	r4, [r6, lr, lsl #2]
   1082c:	str	ip, [r0, #20]
   10830:	tst	r1, #2
   10834:	beq	10888 <select_update_selectfds+0xb8>
   10838:	cmp	r3, #0
   1083c:	add	r1, r3, #31
   10840:	movge	r1, r3
   10844:	cmp	r2, #0
   10848:	asr	r1, r1, #5
   1084c:	ldr	r2, [r0, #20]
   10850:	beq	108e0 <select_update_selectfds+0x110>
   10854:	ldr	ip, [pc, #348]	; 109b8 <select_update_selectfds+0x1e8>
   10858:	and	lr, r3, #31
   1085c:	add	ip, pc, ip
   10860:	add	r1, ip, r1, lsl #2
   10864:	rsbs	ip, r3, #0
   10868:	and	ip, ip, #31
   1086c:	rsbpl	lr, ip, #0
   10870:	mov	r4, #1
   10874:	ldr	ip, [r1, #128]	; 0x80
   10878:	orr	r2, r2, #2
   1087c:	orr	ip, ip, r4, lsl lr
   10880:	str	ip, [r1, #128]	; 0x80
   10884:	str	r2, [r0, #20]
   10888:	ldr	r2, [r0, #20]
   1088c:	ands	r1, r2, #3
   10890:	beq	10914 <select_update_selectfds+0x144>
   10894:	ldr	r2, [pc, #288]	; 109bc <select_update_selectfds+0x1ec>
   10898:	add	r2, pc, r2
   1089c:	ldr	r1, [r2]
   108a0:	cmp	r3, r1
   108a4:	pople	{r4, r5, r6, r7, pc}
   108a8:	str	r3, [r2]
   108ac:	pop	{r4, r5, r6, r7, pc}
   108b0:	ldr	r6, [pc, #264]	; 109c0 <select_update_selectfds+0x1f0>
   108b4:	rsbs	r4, r3, #0
   108b8:	add	r6, pc, r6
   108bc:	and	r4, r4, #31
   108c0:	and	r5, r3, #31
   108c4:	mov	r7, #1
   108c8:	rsbpl	r5, r4, #0
   108cc:	ldr	r4, [r6, lr, lsl #2]
   108d0:	bic	ip, ip, #1
   108d4:	bic	r4, r4, r7, lsl r5
   108d8:	str	r4, [r6, lr, lsl #2]
   108dc:	b	1082c <select_update_selectfds+0x5c>
   108e0:	ldr	ip, [pc, #220]	; 109c4 <select_update_selectfds+0x1f4>
   108e4:	and	lr, r3, #31
   108e8:	add	ip, pc, ip
   108ec:	add	r1, ip, r1, lsl #2
   108f0:	rsbs	ip, r3, #0
   108f4:	and	ip, ip, #31
   108f8:	rsbpl	lr, ip, #0
   108fc:	mov	r4, #1
   10900:	ldr	ip, [r1, #128]	; 0x80
   10904:	bic	r2, r2, #2
   10908:	bic	ip, ip, r4, lsl lr
   1090c:	str	ip, [r1, #128]	; 0x80
   10910:	b	10884 <select_update_selectfds+0xb4>
   10914:	ldr	r2, [pc, #172]	; 109c8 <select_update_selectfds+0x1f8>
   10918:	add	r2, pc, r2
   1091c:	ldr	r2, [r2]
   10920:	cmp	r3, r2
   10924:	popgt	{r4, r5, r6, r7, pc}
   10928:	ldr	ip, [pc, #156]	; 109cc <select_update_selectfds+0x1fc>
   1092c:	mov	r3, r2
   10930:	mov	lr, #1
   10934:	mov	r2, r1
   10938:	add	ip, pc, ip
   1093c:	subs	r4, r3, #0
   10940:	bge	10960 <select_update_selectfds+0x190>
   10944:	cmp	r2, #0
   10948:	popeq	{r4, r5, r6, r7, pc}
   1094c:	ldr	r2, [pc, #124]	; 109d0 <select_update_selectfds+0x200>
   10950:	add	r2, pc, r2
   10954:	b	108a8 <select_update_selectfds+0xd8>
   10958:	mov	r2, lr
   1095c:	b	1093c <select_update_selectfds+0x16c>
   10960:	asr	r0, r3, #5
   10964:	and	r1, r3, #31
   10968:	ldr	r5, [ip, r0, lsl #2]
   1096c:	lsl	r1, lr, r1
   10970:	tst	r1, r5
   10974:	beq	1098c <select_update_selectfds+0x1bc>
   10978:	cmp	r2, #0
   1097c:	popeq	{r4, r5, r6, r7, pc}
   10980:	ldr	r2, [pc, #76]	; 109d4 <select_update_selectfds+0x204>
   10984:	add	r2, pc, r2
   10988:	b	108a8 <select_update_selectfds+0xd8>
   1098c:	add	r0, ip, r0, lsl #2
   10990:	sub	r3, r3, #1
   10994:	ldr	r0, [r0, #128]	; 0x80
   10998:	tst	r1, r0
   1099c:	beq	10958 <select_update_selectfds+0x188>
   109a0:	cmp	r2, #0
   109a4:	ldrne	r3, [pc, #44]	; 109d8 <select_update_selectfds+0x208>
   109a8:	addne	r3, pc, r3
   109ac:	strne	r4, [r3]
   109b0:	pop	{r4, r5, r6, r7, pc}
   109b4:	.word	0x0003351c
   109b8:	.word	0x000334c8
   109bc:	.word	0x00015bec
   109c0:	.word	0x0003346c
   109c4:	.word	0x0003343c
   109c8:	.word	0x00015b6c
   109cc:	.word	0x000333ec
   109d0:	.word	0x00015b34
   109d4:	.word	0x00015b00
   109d8:	.word	0x00015adc

000109dc <rb_setup_fd_select>:
   109dc:	mov	r0, #0
   109e0:	bx	lr

000109e4 <rb_init_netio_select>:
   109e4:	ldr	r3, [pc, #100]	; 10a50 <rb_init_netio_select+0x6c>
   109e8:	ldr	r2, [pc, #100]	; 10a54 <rb_init_netio_select+0x70>
   109ec:	add	r3, pc, r3
   109f0:	ldr	r3, [r3, r2]
   109f4:	ldr	r2, [r3]
   109f8:	cmp	r2, #1024	; 0x400
   109fc:	movgt	r2, #1024	; 0x400
   10a00:	strgt	r2, [r3]
   10a04:	ldr	r2, [pc, #76]	; 10a58 <rb_init_netio_select+0x74>
   10a08:	mov	r3, #0
   10a0c:	add	r2, pc, r2
   10a10:	mov	r1, r3
   10a14:	str	r1, [r2, r3, lsl #2]
   10a18:	add	r3, r3, #1
   10a1c:	cmp	r3, #32
   10a20:	bne	10a14 <rb_init_netio_select+0x30>
   10a24:	ldr	r2, [pc, #48]	; 10a5c <rb_init_netio_select+0x78>
   10a28:	mov	r3, #0
   10a2c:	add	r2, pc, r2
   10a30:	add	r2, r2, #128	; 0x80
   10a34:	mov	r1, r3
   10a38:	str	r1, [r2, r3, lsl #2]
   10a3c:	add	r3, r3, #1
   10a40:	cmp	r3, #32
   10a44:	bne	10a38 <rb_init_netio_select+0x54>
   10a48:	mov	r0, #0
   10a4c:	bx	lr
   10a50:	.word	0x0001560c
   10a54:	.word	0x000003a4
   10a58:	.word	0x00033318
   10a5c:	.word	0x000332f8

00010a60 <rb_setselect_select>:
   10a60:	tst	r1, #1
   10a64:	push	{r4, r5, r6, r7, r8, lr}
   10a68:	mov	r4, r0
   10a6c:	mov	r7, r1
   10a70:	mov	r5, r2
   10a74:	mov	r6, r3
   10a78:	beq	10a8c <rb_setselect_select+0x2c>
   10a7c:	str	r2, [r4, #28]
   10a80:	str	r3, [r4, #32]
   10a84:	mov	r1, #1
   10a88:	bl	107d0 <select_update_selectfds>
   10a8c:	tst	r7, #2
   10a90:	popeq	{r4, r5, r6, r7, r8, pc}
   10a94:	str	r5, [r4, #36]	; 0x24
   10a98:	str	r6, [r4, #40]	; 0x28
   10a9c:	mov	r2, r5
   10aa0:	mov	r0, r4
   10aa4:	mov	r1, #2
   10aa8:	pop	{r4, r5, r6, r7, r8, lr}
   10aac:	b	107d0 <select_update_selectfds>

00010ab0 <rb_select_select>:
   10ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ab4:	mov	r2, #128	; 0x80
   10ab8:	ldr	r4, [pc, #492]	; 10cac <rb_select_select+0x1fc>
   10abc:	sub	sp, sp, #20
   10ac0:	add	r4, pc, r4
   10ac4:	mov	r5, r0
   10ac8:	mov	r1, r4
   10acc:	add	r0, r4, #256	; 0x100
   10ad0:	bl	4828 <memcpy@plt>
   10ad4:	add	r6, r4, #384	; 0x180
   10ad8:	mov	r2, #128	; 0x80
   10adc:	add	r1, r4, r2
   10ae0:	mov	r0, r6
   10ae4:	bl	4828 <memcpy@plt>
   10ae8:	mov	r8, #1000	; 0x3e8
   10aec:	ldr	sl, [pc, #444]	; 10cb0 <rb_select_select+0x200>
   10af0:	mul	r8, r8, r5
   10af4:	ldr	r7, [pc, #440]	; 10cb4 <rb_select_select+0x204>
   10af8:	add	sl, pc, sl
   10afc:	add	r7, pc, r7
   10b00:	add	r3, sp, #8
   10b04:	str	r3, [sp]
   10b08:	ldr	r0, [sl]
   10b0c:	mov	r5, #0
   10b10:	mov	r3, r5
   10b14:	mov	r2, r6
   10b18:	add	r1, r4, #256	; 0x100
   10b1c:	add	r0, r0, #1
   10b20:	str	r5, [sp, #8]
   10b24:	str	r8, [sp, #12]
   10b28:	bl	4960 <select@plt>
   10b2c:	subs	r9, r0, #0
   10b30:	bge	10b58 <rb_select_select+0xa8>
   10b34:	bl	4d14 <__errno_location@plt>
   10b38:	ldr	r0, [r0]
   10b3c:	bl	43fc <rb_ignore_errno@plt>
   10b40:	cmp	r0, r5
   10b44:	bne	10b00 <rb_select_select+0x50>
   10b48:	bl	49c0 <rb_set_time@plt>
   10b4c:	mvn	r0, #0
   10b50:	add	sp, sp, #20
   10b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b58:	bl	49c0 <rb_set_time@plt>
   10b5c:	cmp	r9, #0
   10b60:	beq	10b8c <rb_select_select+0xdc>
   10b64:	ldr	r8, [pc, #332]	; 10cb8 <rb_select_select+0x208>
   10b68:	ldr	r9, [pc, #332]	; 10cbc <rb_select_select+0x20c>
   10b6c:	ldr	sl, [pc, #332]	; 10cc0 <rb_select_select+0x210>
   10b70:	mov	r4, r5
   10b74:	add	r8, pc, r8
   10b78:	add	r9, pc, r9
   10b7c:	add	sl, pc, sl
   10b80:	ldr	r3, [r8]
   10b84:	cmp	r4, r3
   10b88:	ble	10b94 <rb_select_select+0xe4>
   10b8c:	mov	r0, #0
   10b90:	b	10b50 <rb_select_select+0xa0>
   10b94:	asr	r3, r4, #24
   10b98:	ldr	r2, [pc, #292]	; 10cc4 <rb_select_select+0x214>
   10b9c:	eor	r3, r3, r4, asr #12
   10ba0:	eor	r3, r3, r4
   10ba4:	ldr	r2, [r7, r2]
   10ba8:	lsl	r3, r3, #20
   10bac:	ldr	r1, [r2]
   10bb0:	lsr	r3, r3, #20
   10bb4:	mov	r2, #12
   10bb8:	mul	r3, r2, r3
   10bbc:	ldr	r3, [r1, r3]
   10bc0:	cmp	r3, #0
   10bc4:	beq	10ca4 <rb_select_select+0x1f4>
   10bc8:	ldr	r5, [r3]
   10bcc:	ldr	r2, [r5, #12]
   10bd0:	cmp	r4, r2
   10bd4:	ldrne	r3, [r3, #8]
   10bd8:	bne	10bc0 <rb_select_select+0x110>
   10bdc:	cmp	r4, #0
   10be0:	add	r6, r4, #31
   10be4:	movge	r6, r4
   10be8:	rsbs	r2, r4, #0
   10bec:	asr	r6, r6, #5
   10bf0:	and	r2, r2, #31
   10bf4:	and	r3, r4, #31
   10bf8:	mov	fp, #1
   10bfc:	rsbpl	r3, r2, #0
   10c00:	lsl	r6, r6, #2
   10c04:	lsl	fp, fp, r3
   10c08:	add	r3, r9, r6
   10c0c:	ldr	r3, [r3, #256]	; 0x100
   10c10:	tst	fp, r3
   10c14:	beq	10c38 <rb_select_select+0x188>
   10c18:	ldr	r3, [r5, #28]
   10c1c:	mov	r2, #0
   10c20:	cmp	r3, r2
   10c24:	str	r2, [r5, #28]
   10c28:	beq	10c38 <rb_select_select+0x188>
   10c2c:	ldr	r1, [r5, #32]
   10c30:	mov	r0, r5
   10c34:	blx	r3
   10c38:	ldrb	r3, [r5, #16]
   10c3c:	tst	r3, #1
   10c40:	beq	10ca4 <rb_select_select+0x1f4>
   10c44:	add	r6, sl, r6
   10c48:	ldr	r3, [r6, #384]	; 0x180
   10c4c:	tst	fp, r3
   10c50:	beq	10c74 <rb_select_select+0x1c4>
   10c54:	ldr	r3, [r5, #36]	; 0x24
   10c58:	mov	r2, #0
   10c5c:	cmp	r3, r2
   10c60:	str	r2, [r5, #36]	; 0x24
   10c64:	beq	10c74 <rb_select_select+0x1c4>
   10c68:	ldr	r1, [r5, #40]	; 0x28
   10c6c:	mov	r0, r5
   10c70:	blx	r3
   10c74:	ldr	r2, [r5, #28]
   10c78:	cmp	r2, #0
   10c7c:	bne	10c8c <rb_select_select+0x1dc>
   10c80:	mov	r1, #1
   10c84:	mov	r0, r5
   10c88:	bl	107d0 <select_update_selectfds>
   10c8c:	ldr	r2, [r5, #36]	; 0x24
   10c90:	cmp	r2, #0
   10c94:	bne	10ca4 <rb_select_select+0x1f4>
   10c98:	mov	r1, #2
   10c9c:	mov	r0, r5
   10ca0:	bl	107d0 <select_update_selectfds>
   10ca4:	add	r4, r4, #1
   10ca8:	b	10b80 <rb_select_select+0xd0>
   10cac:	.word	0x00033264
   10cb0:	.word	0x0001598c
   10cb4:	.word	0x000154fc
   10cb8:	.word	0x00015910
   10cbc:	.word	0x000331ac
   10cc0:	.word	0x000331a8
   10cc4:	.word	0x000003c4

00010cc8 <rb_init_netio_kqueue>:
   10cc8:	push	{r4, lr}
   10ccc:	bl	4d14 <__errno_location@plt>
   10cd0:	mov	r3, #38	; 0x26
   10cd4:	str	r3, [r0]
   10cd8:	mvn	r0, #0
   10cdc:	pop	{r4, pc}

00010ce0 <rb_setselect_kqueue>:
   10ce0:	push	{r4, lr}
   10ce4:	bl	4d14 <__errno_location@plt>
   10ce8:	mov	r3, #38	; 0x26
   10cec:	str	r3, [r0]
   10cf0:	pop	{r4, pc}

00010cf4 <rb_select_kqueue>:
   10cf4:	push	{r4, lr}
   10cf8:	bl	4d14 <__errno_location@plt>
   10cfc:	mov	r3, #38	; 0x26
   10d00:	str	r3, [r0]
   10d04:	mvn	r0, #0
   10d08:	pop	{r4, pc}

00010d0c <rb_setup_fd_kqueue>:
   10d0c:	push	{r4, lr}
   10d10:	bl	4d14 <__errno_location@plt>
   10d14:	mov	r3, #38	; 0x26
   10d18:	str	r3, [r0]
   10d1c:	mvn	r0, #0
   10d20:	pop	{r4, pc}

00010d24 <rb_kqueue_init_event>:
   10d24:	bx	lr

00010d28 <rb_kqueue_sched_event>:
   10d28:	push	{r4, lr}
   10d2c:	bl	4d14 <__errno_location@plt>
   10d30:	mov	r3, #38	; 0x26
   10d34:	str	r3, [r0]
   10d38:	mvn	r0, #0
   10d3c:	pop	{r4, pc}

00010d40 <rb_kqueue_unsched_event>:
   10d40:	bx	lr

00010d44 <rb_kqueue_supports_event>:
   10d44:	push	{r4, lr}
   10d48:	bl	4d14 <__errno_location@plt>
   10d4c:	mov	r3, #38	; 0x26
   10d50:	str	r3, [r0]
   10d54:	mov	r0, #0
   10d58:	pop	{r4, pc}

00010d5c <rb_rawbuf_done>:
   10d5c:	ldr	r3, [r1, #8]
   10d60:	ldr	r2, [r1, #4]
   10d64:	cmp	r3, #0
   10d68:	strne	r2, [r3, #4]
   10d6c:	streq	r2, [r0, #4]
   10d70:	ldr	r2, [r1, #4]
   10d74:	cmp	r2, #0
   10d78:	strne	r3, [r2, #8]
   10d7c:	streq	r3, [r0]
   10d80:	mov	r3, #0
   10d84:	str	r3, [r1, #4]
   10d88:	str	r3, [r1, #8]
   10d8c:	ldr	r3, [r0, #8]
   10d90:	sub	r3, r3, #1
   10d94:	str	r3, [r0, #8]
   10d98:	ldr	r3, [pc, #4]	; 10da4 <rb_rawbuf_done+0x48>
   10d9c:	ldr	r0, [pc, r3]
   10da0:	b	48f4 <rb_bh_free@plt>
   10da4:	.word	0x00033188

00010da8 <rb_rawbuf_flush_writev>:
   10da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10dac:	mov	r4, r0
   10db0:	sub	sp, sp, #8192	; 0x2000
   10db4:	mov	r2, #8192	; 0x2000
   10db8:	mov	r6, r1
   10dbc:	mov	r0, sp
   10dc0:	mov	r1, #0
   10dc4:	bl	4648 <memset@plt>
   10dc8:	ldr	r2, [r4]
   10dcc:	cmp	r2, #0
   10dd0:	beq	10ec0 <rb_rawbuf_flush_writev+0x118>
   10dd4:	ldr	r8, [pc, #332]	; 10f28 <rb_rawbuf_flush_writev+0x180>
   10dd8:	mov	r5, sp
   10ddc:	mov	r3, sp
   10de0:	mov	r1, #1
   10de4:	ldr	r0, [r2]
   10de8:	ldrb	ip, [r0, #1040]	; 0x410
   10dec:	cmp	ip, #0
   10df0:	add	ip, r0, #12
   10df4:	ldrne	lr, [r4, #16]
   10df8:	ldr	r0, [r0, #1036]	; 0x40c
   10dfc:	addne	ip, ip, lr
   10e00:	strne	ip, [r3]
   10e04:	streq	ip, [r3]
   10e08:	ldr	r2, [r2, #8]
   10e0c:	subne	r0, r0, lr
   10e10:	movne	r7, r1
   10e14:	moveq	r7, r1
   10e18:	cmp	r2, #0
   10e1c:	str	r0, [r3, #4]
   10e20:	bne	10edc <rb_rawbuf_flush_writev+0x134>
   10e24:	mov	r2, r7
   10e28:	mov	r1, r5
   10e2c:	mov	r0, r6
   10e30:	bl	4b04 <rb_writev@plt>
   10e34:	subs	sl, r0, #0
   10e38:	ble	10ed0 <rb_rawbuf_flush_writev+0x128>
   10e3c:	ldr	r3, [r4]
   10e40:	cmp	r3, #0
   10e44:	beq	10ed0 <rb_rawbuf_flush_writev+0x128>
   10e48:	mov	r9, #0
   10e4c:	ldr	r6, [r3, #8]
   10e50:	mov	r5, sl
   10e54:	mov	r8, r9
   10e58:	cmp	r7, r9
   10e5c:	ldr	r1, [r3]
   10e60:	beq	10ed0 <rb_rawbuf_flush_writev+0x128>
   10e64:	ldrb	r3, [r1, #1040]	; 0x410
   10e68:	ldr	r2, [r1, #1036]	; 0x40c
   10e6c:	cmp	r3, #0
   10e70:	beq	10ef4 <rb_rawbuf_flush_writev+0x14c>
   10e74:	ldr	r3, [r4, #16]
   10e78:	sub	r3, r2, r3
   10e7c:	cmp	r3, r5
   10e80:	bgt	10ef4 <rb_rawbuf_flush_writev+0x14c>
   10e84:	ldr	r2, [r4, #12]
   10e88:	sub	r5, r5, r3
   10e8c:	sub	r3, r2, r3
   10e90:	str	r3, [r4, #12]
   10e94:	mov	r0, r4
   10e98:	bl	10d5c <rb_rawbuf_done>
   10e9c:	cmp	r6, #0
   10ea0:	moveq	r2, r8
   10ea4:	ldrne	r2, [r6, #8]
   10ea8:	cmp	r6, #0
   10eac:	add	r9, r9, #1
   10eb0:	mov	r3, r6
   10eb4:	beq	10ed0 <rb_rawbuf_flush_writev+0x128>
   10eb8:	mov	r6, r2
   10ebc:	b	10e58 <rb_rawbuf_flush_writev+0xb0>
   10ec0:	bl	4d14 <__errno_location@plt>
   10ec4:	mvn	sl, #0
   10ec8:	mov	r3, #11
   10ecc:	str	r3, [r0]
   10ed0:	mov	r0, sl
   10ed4:	add	sp, sp, #8192	; 0x2000
   10ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10edc:	add	r1, r1, #1
   10ee0:	cmp	r1, r8
   10ee4:	add	r3, r3, #8
   10ee8:	bne	10de4 <rb_rawbuf_flush_writev+0x3c>
   10eec:	mov	r7, #1024	; 0x400
   10ef0:	b	10e24 <rb_rawbuf_flush_writev+0x7c>
   10ef4:	cmp	r2, r5
   10ef8:	ldrle	r3, [r4, #12]
   10efc:	suble	r5, r5, r2
   10f00:	suble	r2, r3, r2
   10f04:	strle	r2, [r4, #12]
   10f08:	ble	10e94 <rb_rawbuf_flush_writev+0xec>
   10f0c:	mov	r3, #1
   10f10:	strb	r3, [r1, #1040]	; 0x410
   10f14:	ldr	r3, [r4, #12]
   10f18:	str	r5, [r4, #16]
   10f1c:	sub	r5, r3, r5
   10f20:	str	r5, [r4, #12]
   10f24:	b	10ed0 <rb_rawbuf_flush_writev+0x128>
   10f28:	.word	0x00000401

00010f2c <rb_rawbuf_flush>:
   10f2c:	ldr	r3, [r0]
   10f30:	push	{r4, r5, r6, lr}
   10f34:	cmp	r3, #0
   10f38:	bne	10f54 <rb_rawbuf_flush+0x28>
   10f3c:	bl	4d14 <__errno_location@plt>
   10f40:	mvn	r6, #0
   10f44:	mov	r3, #11
   10f48:	str	r3, [r0]
   10f4c:	mov	r0, r6
   10f50:	pop	{r4, r5, r6, pc}
   10f54:	mov	r4, r0
   10f58:	mov	r0, r1
   10f5c:	mov	r6, r1
   10f60:	bl	44d4 <rb_fd_ssl@plt>
   10f64:	cmp	r0, #0
   10f68:	bne	10f7c <rb_rawbuf_flush+0x50>
   10f6c:	mov	r1, r6
   10f70:	mov	r0, r4
   10f74:	pop	{r4, r5, r6, lr}
   10f78:	b	10da8 <rb_rawbuf_flush_writev>
   10f7c:	ldr	r3, [r4]
   10f80:	mov	r0, r6
   10f84:	ldr	r5, [r3]
   10f88:	add	r1, r5, #12
   10f8c:	ldrb	r3, [r5, #1040]	; 0x410
   10f90:	cmp	r3, #0
   10f94:	moveq	r2, #1
   10f98:	strbeq	r2, [r5, #1040]	; 0x410
   10f9c:	streq	r3, [r4, #16]
   10fa0:	ldr	r2, [r5, #1036]	; 0x40c
   10fa4:	ldr	r3, [r4, #16]
   10fa8:	sub	r2, r2, r3
   10fac:	add	r1, r1, r3
   10fb0:	bl	4678 <rb_write@plt>
   10fb4:	subs	r6, r0, #0
   10fb8:	ble	10f4c <rb_rawbuf_flush+0x20>
   10fbc:	ldr	r3, [r4, #16]
   10fc0:	ldr	r2, [r5, #1036]	; 0x40c
   10fc4:	add	r3, r6, r3
   10fc8:	cmp	r3, r2
   10fcc:	str	r3, [r4, #16]
   10fd0:	bne	11028 <rb_rawbuf_flush+0xfc>
   10fd4:	mov	r3, #0
   10fd8:	str	r3, [r4, #16]
   10fdc:	ldr	r3, [r5, #8]
   10fe0:	ldr	r2, [r5, #4]
   10fe4:	cmp	r3, #0
   10fe8:	strne	r2, [r3, #4]
   10fec:	streq	r2, [r4, #4]
   10ff0:	ldr	r2, [r5, #4]
   10ff4:	mov	r1, r5
   10ff8:	cmp	r2, #0
   10ffc:	strne	r3, [r2, #8]
   11000:	streq	r3, [r4]
   11004:	mov	r3, #0
   11008:	str	r3, [r5, #4]
   1100c:	str	r3, [r5, #8]
   11010:	ldr	r3, [r4, #8]
   11014:	sub	r3, r3, #1
   11018:	str	r3, [r4, #8]
   1101c:	ldr	r3, [pc, #20]	; 11038 <rb_rawbuf_flush+0x10c>
   11020:	ldr	r0, [pc, r3]
   11024:	bl	48f4 <rb_bh_free@plt>
   11028:	ldr	r3, [r4, #12]
   1102c:	sub	r3, r3, r6
   11030:	str	r3, [r4, #12]
   11034:	b	10f4c <rb_rawbuf_flush+0x20>
   11038:	.word	0x00032f04

0001103c <rb_rawbuf_append>:
   1103c:	ldr	r3, [r0, #4]
   11040:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11044:	cmp	r3, #0
   11048:	mov	r4, r0
   1104c:	mov	r8, r1
   11050:	mov	r5, r2
   11054:	beq	110bc <rb_rawbuf_append+0x80>
   11058:	ldr	r7, [r3]
   1105c:	cmp	r7, #0
   11060:	beq	110bc <rb_rawbuf_append+0x80>
   11064:	ldr	r3, [r7, #1036]	; 0x40c
   11068:	cmp	r3, #1024	; 0x400
   1106c:	bge	110bc <rb_rawbuf_append+0x80>
   11070:	ldrb	r2, [r7, #1040]	; 0x410
   11074:	cmp	r2, #0
   11078:	bne	110bc <rb_rawbuf_append+0x80>
   1107c:	rsb	r6, r3, #1024	; 0x400
   11080:	cmp	r5, r6
   11084:	movlt	r6, r5
   11088:	add	r0, r7, #12
   1108c:	add	r0, r0, r3
   11090:	mov	r2, r6
   11094:	bl	4828 <memcpy@plt>
   11098:	ldr	r3, [r7, #1036]	; 0x40c
   1109c:	subs	r5, r5, r6
   110a0:	add	r3, r3, r6
   110a4:	str	r3, [r7, #1036]	; 0x40c
   110a8:	ldr	r3, [r4, #12]
   110ac:	add	r3, r3, r6
   110b0:	str	r3, [r4, #12]
   110b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   110b8:	add	r8, r8, r6
   110bc:	ldr	r9, [pc, #148]	; 11158 <rb_rawbuf_append+0x11c>
   110c0:	mov	sl, #0
   110c4:	add	r9, pc, r9
   110c8:	cmp	r5, #0
   110cc:	bgt	110d4 <rb_rawbuf_append+0x98>
   110d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110d4:	ldr	r0, [r9]
   110d8:	bl	4984 <rb_bh_alloc@plt>
   110dc:	ldr	r3, [r4, #4]
   110e0:	cmp	r3, #0
   110e4:	mov	r6, r0
   110e8:	str	r0, [r6]
   110ec:	str	sl, [r0, #8]
   110f0:	str	r3, [r0, #4]
   110f4:	strne	r0, [r3, #8]
   110f8:	bne	11108 <rb_rawbuf_append+0xcc>
   110fc:	ldr	r3, [r4]
   11100:	cmp	r3, #0
   11104:	streq	r0, [r4]
   11108:	ldr	r3, [r4, #8]
   1110c:	cmp	r5, #1024	; 0x400
   11110:	movlt	r7, r5
   11114:	movge	r7, #1024	; 0x400
   11118:	add	r3, r3, #1
   1111c:	str	r3, [r4, #8]
   11120:	mov	r2, r7
   11124:	mov	r1, r8
   11128:	str	r6, [r4, #4]
   1112c:	add	r0, r6, #12
   11130:	bl	4828 <memcpy@plt>
   11134:	ldr	r3, [r6, #1036]	; 0x40c
   11138:	sub	r5, r5, r7
   1113c:	add	r3, r3, r7
   11140:	str	r3, [r6, #1036]	; 0x40c
   11144:	ldr	r3, [r4, #12]
   11148:	add	r8, r8, r7
   1114c:	add	r7, r3, r7
   11150:	str	r7, [r4, #12]
   11154:	b	110c8 <rb_rawbuf_append+0x8c>
   11158:	.word	0x00032e60

0001115c <rb_rawbuf_get>:
   1115c:	push	{r4, r5, r6, r7, r8, lr}
   11160:	ldr	r4, [r0]
   11164:	cmp	r4, #0
   11168:	beq	111d8 <rb_rawbuf_get+0x7c>
   1116c:	ldr	r5, [r4]
   11170:	mov	r6, r2
   11174:	mov	r7, r0
   11178:	ldrb	r3, [r5, #1040]	; 0x410
   1117c:	ldr	r4, [r5, #1036]	; 0x40c
   11180:	cmp	r3, #0
   11184:	add	r3, r5, #12
   11188:	ldrne	ip, [r0, #16]
   1118c:	addne	r3, r3, ip
   11190:	cmp	r2, r4
   11194:	mov	ip, r1
   11198:	movlt	r4, r2
   1119c:	mov	r1, r3
   111a0:	mov	r2, r4
   111a4:	mov	r0, ip
   111a8:	bl	4828 <memcpy@plt>
   111ac:	ldr	r3, [r5, #1036]	; 0x40c
   111b0:	cmp	r3, r4
   111b4:	bne	111e0 <rb_rawbuf_get+0x84>
   111b8:	mov	r3, #0
   111bc:	str	r3, [r7, #16]
   111c0:	mov	r1, r5
   111c4:	mov	r0, r7
   111c8:	bl	10d5c <rb_rawbuf_done>
   111cc:	ldr	r2, [r7, #12]
   111d0:	sub	r6, r2, r6
   111d4:	str	r6, [r7, #12]
   111d8:	mov	r0, r4
   111dc:	pop	{r4, r5, r6, r7, r8, pc}
   111e0:	sub	r3, r3, r4
   111e4:	mov	r2, #1
   111e8:	strb	r2, [r5, #1040]	; 0x410
   111ec:	str	r3, [r5, #1036]	; 0x40c
   111f0:	ldr	r3, [r7, #12]
   111f4:	sub	r3, r3, r4
   111f8:	str	r3, [r7, #12]
   111fc:	ldr	r3, [r7, #16]
   11200:	add	r3, r3, r4
   11204:	str	r3, [r7, #16]
   11208:	b	111d8 <rb_rawbuf_get+0x7c>

0001120c <rb_rawbuf_length>:
   1120c:	ldr	r0, [r0, #12]
   11210:	bx	lr

00011214 <rb_new_rawbuffer>:
   11214:	push	{r4, lr}
   11218:	mov	r1, #20
   1121c:	mov	r0, #1
   11220:	bl	460c <calloc@plt>
   11224:	cmp	r0, #0
   11228:	popne	{r4, pc}
   1122c:	bl	49b4 <rb_outofmemory@plt>

00011230 <rb_free_rawbuffer>:
   11230:	ldr	r3, [r0]
   11234:	push	{r4, r5, r6, lr}
   11238:	cmp	r3, #0
   1123c:	mov	r5, r0
   11240:	ldrne	r4, [r3, #8]
   11244:	movne	r6, #0
   11248:	bne	1125c <rb_free_rawbuffer+0x2c>
   1124c:	mov	r0, r5
   11250:	pop	{r4, r5, r6, lr}
   11254:	b	4714 <free@plt>
   11258:	mov	r4, r2
   1125c:	ldr	r1, [r3]
   11260:	mov	r0, r5
   11264:	bl	10d5c <rb_rawbuf_done>
   11268:	cmp	r4, #0
   1126c:	moveq	r2, r6
   11270:	ldrne	r2, [r4, #8]
   11274:	cmp	r4, #0
   11278:	mov	r3, r4
   1127c:	bne	11258 <rb_free_rawbuffer+0x28>
   11280:	b	1124c <rb_free_rawbuffer+0x1c>

00011284 <rb_init_rawbuffers>:
   11284:	push	{r4, lr}
   11288:	ldr	r4, [pc, #40]	; 112b8 <rb_init_rawbuffers+0x34>
   1128c:	add	r4, pc, r4
   11290:	ldr	r3, [r4]
   11294:	cmp	r3, #0
   11298:	popne	{r4, pc}
   1129c:	ldr	r2, [pc, #24]	; 112bc <rb_init_rawbuffers+0x38>
   112a0:	mov	r1, r0
   112a4:	add	r2, pc, r2
   112a8:	ldr	r0, [pc, #16]	; 112c0 <rb_init_rawbuffers+0x3c>
   112ac:	bl	4ae0 <rb_bh_create@plt>
   112b0:	str	r0, [r4]
   112b4:	pop	{r4, pc}
   112b8:	.word	0x00032c98
   112bc:	.word	0x00003db8
   112c0:	.word	0x00000414

000112c4 <rb_malloc>:
   112c4:	push	{r4, lr}
   112c8:	mov	r1, r0
   112cc:	mov	r0, #1
   112d0:	bl	460c <calloc@plt>
   112d4:	cmp	r0, #0
   112d8:	popne	{r4, pc}
   112dc:	bl	49b4 <rb_outofmemory@plt>

000112e0 <rb_free>:
   112e0:	cmp	r0, #0
   112e4:	bxeq	lr
   112e8:	b	4714 <free@plt>

000112ec <Deref_Prefix>:
   112ec:	subs	r2, r0, #0
   112f0:	bxeq	lr
   112f4:	ldr	r3, [r2, #4]
   112f8:	sub	r3, r3, #1
   112fc:	cmp	r3, #0
   11300:	str	r3, [r2, #4]
   11304:	bxgt	lr
   11308:	b	112e0 <rb_free>

0001130c <comp_with_mask>:
   1130c:	push	{r4, r5, r6, lr}
   11310:	mov	r4, r2
   11314:	lsr	r2, r2, #3
   11318:	mov	r6, r0
   1131c:	mov	r5, r1
   11320:	bl	4474 <memcmp@plt>
   11324:	cmp	r0, #0
   11328:	bne	11358 <comp_with_mask+0x4c>
   1132c:	ands	r2, r4, #7
   11330:	beq	11360 <comp_with_mask+0x54>
   11334:	ldrb	r1, [r5, r4, lsr #3]
   11338:	ldrb	r3, [r6, r4, lsr #3]
   1133c:	rsb	r2, r2, #8
   11340:	eor	r3, r3, r1
   11344:	mov	r1, #255	; 0xff
   11348:	ands	r3, r3, r1, lsl r2
   1134c:	moveq	r0, #1
   11350:	movne	r0, #0
   11354:	pop	{r4, r5, r6, pc}
   11358:	mov	r0, #0
   1135c:	pop	{r4, r5, r6, pc}
   11360:	mov	r0, #1
   11364:	pop	{r4, r5, r6, pc}

00011368 <New_Prefix2.constprop.1>:
   11368:	cmp	r0, #10
   1136c:	push	{r4, r5, r6, lr}
   11370:	mov	r6, r0
   11374:	mov	r4, r1
   11378:	mov	r5, r2
   1137c:	bne	113c0 <New_Prefix2.constprop.1+0x58>
   11380:	mov	r0, #24
   11384:	bl	112c4 <rb_malloc>
   11388:	mov	r1, r4
   1138c:	add	r2, r4, #16
   11390:	add	r3, r0, #8
   11394:	ldr	ip, [r1], #4
   11398:	cmp	r1, r2
   1139c:	str	ip, [r3], #4
   113a0:	bne	11394 <New_Prefix2.constprop.1+0x2c>
   113a4:	cmp	r5, #0
   113a8:	movlt	r5, #128	; 0x80
   113ac:	mov	r3, #1
   113b0:	strh	r5, [r0, #2]
   113b4:	strh	r6, [r0]
   113b8:	str	r3, [r0, #4]
   113bc:	pop	{r4, r5, r6, pc}
   113c0:	cmp	r0, #2
   113c4:	bne	113dc <New_Prefix2.constprop.1+0x74>
   113c8:	mov	r0, #24
   113cc:	bl	112c4 <rb_malloc>
   113d0:	ldr	r3, [r4]
   113d4:	str	r3, [r0, #8]
   113d8:	b	113a4 <New_Prefix2.constprop.1+0x3c>
   113dc:	mov	r0, #0
   113e0:	pop	{r4, r5, r6, pc}

000113e4 <Ref_Prefix>:
   113e4:	cmp	r0, #0
   113e8:	bxeq	lr
   113ec:	ldr	r3, [r0, #4]
   113f0:	cmp	r3, #0
   113f4:	bne	11408 <Ref_Prefix+0x24>
   113f8:	ldrh	r2, [r0, #2]
   113fc:	add	r1, r0, #8
   11400:	ldrh	r0, [r0]
   11404:	b	11368 <New_Prefix2.constprop.1>
   11408:	add	r3, r3, #1
   1140c:	str	r3, [r0, #4]
   11410:	bx	lr

00011414 <ascii2prefix>:
   11414:	push	{r4, r5, r6, r7, r8, lr}
   11418:	subs	r6, r1, #0
   1141c:	sub	sp, sp, #1040	; 0x410
   11420:	bne	11430 <ascii2prefix+0x1c>
   11424:	mov	r0, #0
   11428:	add	sp, sp, #1040	; 0x410
   1142c:	pop	{r4, r5, r6, r7, r8, pc}
   11430:	cmp	r0, #0
   11434:	mov	r4, r0
   11438:	bne	114e4 <ascii2prefix+0xd0>
   1143c:	mov	r1, #58	; 0x3a
   11440:	mov	r0, r6
   11444:	bl	45d0 <strchr@plt>
   11448:	cmp	r0, #0
   1144c:	moveq	r4, #2
   11450:	movne	r4, #10
   11454:	moveq	r5, #32
   11458:	movne	r5, #128	; 0x80
   1145c:	mov	r1, #47	; 0x2f
   11460:	mov	r0, r6
   11464:	bl	45d0 <strchr@plt>
   11468:	subs	r7, r0, #0
   1146c:	beq	114b0 <ascii2prefix+0x9c>
   11470:	add	r0, r7, #1
   11474:	bl	48e8 <atol@plt>
   11478:	sub	r7, r7, r6
   1147c:	mov	r1, r6
   11480:	add	r6, sp, #16
   11484:	mov	r2, r7
   11488:	mov	r8, r0
   1148c:	mov	r0, r6
   11490:	bl	4828 <memcpy@plt>
   11494:	add	r3, sp, #1040	; 0x410
   11498:	add	r7, r3, r7
   1149c:	mov	r3, #0
   114a0:	cmp	r5, r8
   114a4:	cmpge	r8, r3
   114a8:	movgt	r5, r8
   114ac:	strb	r3, [r7, #-1024]	; 0xfffffc00
   114b0:	cmp	r4, #2
   114b4:	bne	11500 <ascii2prefix+0xec>
   114b8:	mov	r2, sp
   114bc:	mov	r1, r6
   114c0:	mov	r0, r4
   114c4:	bl	4654 <rb_inet_pton@plt>
   114c8:	cmp	r0, #0
   114cc:	ble	11424 <ascii2prefix+0x10>
   114d0:	mov	r2, r5
   114d4:	mov	r1, sp
   114d8:	mov	r0, r4
   114dc:	bl	11368 <New_Prefix2.constprop.1>
   114e0:	b	11428 <ascii2prefix+0x14>
   114e4:	cmp	r0, #2
   114e8:	moveq	r5, #32
   114ec:	beq	1145c <ascii2prefix+0x48>
   114f0:	cmp	r0, #10
   114f4:	moveq	r5, #128	; 0x80
   114f8:	movne	r5, #0
   114fc:	b	1145c <ascii2prefix+0x48>
   11500:	cmp	r4, #10
   11504:	beq	114b8 <ascii2prefix+0xa4>
   11508:	b	11424 <ascii2prefix+0x10>

0001150c <rb_init_patricia>:
   1150c:	bx	lr

00011510 <rb_new_patricia>:
   11510:	push	{r4, lr}
   11514:	mov	r4, r0
   11518:	mov	r0, #12
   1151c:	bl	112c4 <rb_malloc>
   11520:	mov	r2, #0
   11524:	str	r2, [r0]
   11528:	str	r2, [r0, #8]
   1152c:	ldr	r2, [pc, #20]	; 11548 <rb_new_patricia+0x38>
   11530:	str	r4, [r0, #4]
   11534:	add	r2, pc, r2
   11538:	ldr	r3, [r2]
   1153c:	add	r3, r3, #1
   11540:	str	r3, [r2]
   11544:	pop	{r4, pc}
   11548:	.word	0x000329f4

0001154c <rb_clear_patricia>:
   1154c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11550:	mov	r6, r0
   11554:	ldr	r4, [r0]
   11558:	sub	sp, sp, #520	; 0x208
   1155c:	cmp	r4, #0
   11560:	beq	115f0 <rb_clear_patricia+0xa4>
   11564:	add	r5, sp, #4
   11568:	mov	r9, r1
   1156c:	mov	sl, r5
   11570:	ldr	r0, [r4, #4]
   11574:	ldr	r8, [r4, #8]
   11578:	cmp	r0, #0
   1157c:	ldr	r7, [r4, #12]
   11580:	beq	1159c <rb_clear_patricia+0x50>
   11584:	bl	112ec <Deref_Prefix>
   11588:	ldr	r0, [r4, #20]
   1158c:	cmp	r0, #0
   11590:	cmpne	r9, #0
   11594:	beq	1159c <rb_clear_patricia+0x50>
   11598:	blx	r9
   1159c:	mov	r0, r4
   115a0:	bl	112e0 <rb_free>
   115a4:	ldr	r3, [r6, #8]
   115a8:	cmp	r8, #0
   115ac:	sub	r3, r3, #1
   115b0:	str	r3, [r6, #8]
   115b4:	beq	115cc <rb_clear_patricia+0x80>
   115b8:	cmp	r7, #0
   115bc:	strne	r7, [r5]
   115c0:	addne	r5, r5, #4
   115c4:	mov	r4, r8
   115c8:	b	11570 <rb_clear_patricia+0x24>
   115cc:	cmp	r7, #0
   115d0:	movne	r8, r7
   115d4:	bne	115c4 <rb_clear_patricia+0x78>
   115d8:	cmp	r5, sl
   115dc:	beq	115f0 <rb_clear_patricia+0xa4>
   115e0:	ldr	r4, [r5, #-4]
   115e4:	cmp	r4, #0
   115e8:	subne	r5, r5, #4
   115ec:	bne	11570 <rb_clear_patricia+0x24>
   115f0:	mov	r0, r6
   115f4:	add	sp, sp, #520	; 0x208
   115f8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   115fc:	b	112e0 <rb_free>

00011600 <rb_destroy_patricia>:
   11600:	push	{r4, lr}
   11604:	bl	451c <rb_clear_patricia@plt>
   11608:	ldr	r2, [pc, #16]	; 11620 <rb_destroy_patricia+0x20>
   1160c:	add	r2, pc, r2
   11610:	ldr	r3, [r2]
   11614:	sub	r3, r3, #1
   11618:	str	r3, [r2]
   1161c:	pop	{r4, pc}
   11620:	.word	0x0003291c

00011624 <rb_patricia_process>:
   11624:	push	{r4, r5, r6, r7, lr}
   11628:	sub	sp, sp, #524	; 0x20c
   1162c:	add	r4, sp, #4
   11630:	ldr	r5, [r0]
   11634:	mov	r6, r1
   11638:	mov	r7, r4
   1163c:	cmp	r5, #0
   11640:	bne	1164c <rb_patricia_process+0x28>
   11644:	add	sp, sp, #524	; 0x20c
   11648:	pop	{r4, r5, r6, r7, pc}
   1164c:	ldr	r0, [r5, #4]
   11650:	cmp	r0, #0
   11654:	beq	11660 <rb_patricia_process+0x3c>
   11658:	ldr	r1, [r5, #20]
   1165c:	blx	r6
   11660:	ldr	r3, [r5, #8]
   11664:	ldr	r2, [r5, #12]
   11668:	cmp	r3, #0
   1166c:	beq	11684 <rb_patricia_process+0x60>
   11670:	cmp	r2, #0
   11674:	strne	r2, [r4]
   11678:	addne	r4, r4, #4
   1167c:	mov	r5, r3
   11680:	b	1163c <rb_patricia_process+0x18>
   11684:	subs	r3, r2, #0
   11688:	bne	1167c <rb_patricia_process+0x58>
   1168c:	cmp	r4, r7
   11690:	ldrne	r3, [r4, #-4]
   11694:	subne	r4, r4, #4
   11698:	b	1167c <rb_patricia_process+0x58>

0001169c <rb_patricia_search_exact>:
   1169c:	push	{r4, lr}
   116a0:	ldr	r4, [r0]
   116a4:	cmp	r4, #0
   116a8:	beq	11714 <rb_patricia_search_exact+0x78>
   116ac:	mov	r3, r1
   116b0:	mov	r0, #128	; 0x80
   116b4:	ldrh	r2, [r3, #2]
   116b8:	add	r1, r1, #8
   116bc:	ldr	r3, [r4]
   116c0:	cmp	r2, r3
   116c4:	bhi	116f4 <rb_patricia_search_exact+0x58>
   116c8:	movcc	r4, #0
   116cc:	bcc	11714 <rb_patricia_search_exact+0x78>
   116d0:	ldr	r0, [r4, #4]
   116d4:	cmp	r0, #0
   116d8:	moveq	r4, r0
   116dc:	beq	11714 <rb_patricia_search_exact+0x78>
   116e0:	add	r0, r0, #8
   116e4:	bl	1130c <comp_with_mask>
   116e8:	cmp	r0, #0
   116ec:	moveq	r4, #0
   116f0:	b	11714 <rb_patricia_search_exact+0x78>
   116f4:	ldrb	lr, [r1, r3, lsr #3]
   116f8:	and	r3, r3, #7
   116fc:	ldr	ip, [r4, #8]
   11700:	ands	r3, lr, r0, asr r3
   11704:	ldr	r4, [r4, #12]
   11708:	moveq	r4, ip
   1170c:	cmp	r4, #0
   11710:	bne	116bc <rb_patricia_search_exact+0x20>
   11714:	mov	r0, r4
   11718:	pop	{r4, pc}

0001171c <rb_patricia_search_best2>:
   1171c:	ldr	r3, [r0]
   11720:	push	{r4, r5, r6, r7, r8, lr}
   11724:	cmp	r3, #0
   11728:	sub	sp, sp, #520	; 0x208
   1172c:	bne	11740 <rb_patricia_search_best2+0x24>
   11730:	mov	r5, #0
   11734:	mov	r0, r5
   11738:	add	sp, sp, #520	; 0x208
   1173c:	pop	{r4, r5, r6, r7, r8, pc}
   11740:	ldrh	r0, [r1, #2]
   11744:	add	r6, r1, #8
   11748:	mov	r4, #0
   1174c:	mov	ip, #128	; 0x80
   11750:	ldr	r1, [r3]
   11754:	cmp	r0, r1
   11758:	bls	11794 <rb_patricia_search_best2+0x78>
   1175c:	ldr	lr, [r3, #4]
   11760:	ldrb	r5, [r6, r1, lsr #3]
   11764:	cmp	lr, #0
   11768:	addne	lr, sp, #520	; 0x208
   1176c:	addne	lr, lr, r4, lsl #2
   11770:	and	r1, r1, #7
   11774:	strne	r3, [lr, #-516]	; 0xfffffdfc
   11778:	addne	r4, r4, #1
   1177c:	ldr	lr, [r3, #8]
   11780:	ands	r1, r5, ip, asr r1
   11784:	ldr	r3, [r3, #12]
   11788:	moveq	r3, lr
   1178c:	cmp	r3, #0
   11790:	bne	11750 <rb_patricia_search_best2+0x34>
   11794:	cmp	r2, #0
   11798:	cmpne	r3, #0
   1179c:	beq	117c8 <rb_patricia_search_best2+0xac>
   117a0:	ldr	r2, [r3, #4]
   117a4:	cmp	r2, #0
   117a8:	beq	117c8 <rb_patricia_search_best2+0xac>
   117ac:	add	r2, sp, #520	; 0x208
   117b0:	add	r2, r2, r4, lsl #2
   117b4:	add	r4, r4, #1
   117b8:	str	r3, [r2, #-516]	; 0xfffffdfc
   117bc:	add	r7, sp, #4
   117c0:	mov	r8, #0
   117c4:	b	117fc <rb_patricia_search_best2+0xe0>
   117c8:	cmp	r4, #0
   117cc:	bne	117bc <rb_patricia_search_best2+0xa0>
   117d0:	b	11730 <rb_patricia_search_best2+0x14>
   117d4:	ldr	r5, [r7, r4, lsl #2]
   117d8:	mov	r1, r6
   117dc:	ldr	r3, [r5, #4]
   117e0:	cmp	r3, #0
   117e4:	addne	r0, r3, #8
   117e8:	moveq	r0, r8
   117ec:	ldrh	r2, [r3, #2]
   117f0:	bl	1130c <comp_with_mask>
   117f4:	cmp	r0, #0
   117f8:	bne	11734 <rb_patricia_search_best2+0x18>
   117fc:	subs	r4, r4, #1
   11800:	bcs	117d4 <rb_patricia_search_best2+0xb8>
   11804:	b	11730 <rb_patricia_search_best2+0x14>

00011808 <rb_patricia_search_best>:
   11808:	mov	r2, #1
   1180c:	b	46cc <rb_patricia_search_best2@plt>

00011810 <rb_patricia_lookup>:
   11810:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11814:	mov	r7, r0
   11818:	ldr	r4, [r0]
   1181c:	mov	r8, r1
   11820:	cmp	r4, #0
   11824:	addne	sl, r1, #8
   11828:	ldrhne	r9, [r1, #2]
   1182c:	movne	r2, #128	; 0x80
   11830:	bne	11888 <rb_patricia_lookup+0x78>
   11834:	mov	r0, #24
   11838:	bl	112c4 <rb_malloc>
   1183c:	ldrh	r3, [r8, #2]
   11840:	mov	r5, r0
   11844:	str	r3, [r0]
   11848:	mov	r0, r8
   1184c:	bl	113e4 <Ref_Prefix>
   11850:	ldr	r3, [r7, #8]
   11854:	str	r4, [r5, #16]
   11858:	add	r3, r3, #1
   1185c:	str	r4, [r5, #12]
   11860:	str	r4, [r5, #8]
   11864:	str	r4, [r5, #20]
   11868:	str	r0, [r5, #4]
   1186c:	str	r5, [r7]
   11870:	str	r3, [r7, #8]
   11874:	mov	r0, r5
   11878:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1187c:	ldr	r3, [r4, #8]
   11880:	b	118c0 <rb_patricia_lookup+0xb0>
   11884:	mov	r4, r3
   11888:	ldr	r6, [r4]
   1188c:	cmp	r9, r6
   11890:	bhi	118a0 <rb_patricia_lookup+0x90>
   11894:	ldr	r3, [r4, #4]
   11898:	cmp	r3, #0
   1189c:	bne	118c8 <rb_patricia_lookup+0xb8>
   118a0:	ldr	r3, [r7, #4]
   118a4:	cmp	r6, r3
   118a8:	bcs	1187c <rb_patricia_lookup+0x6c>
   118ac:	ldrb	r3, [sl, r6, lsr #3]
   118b0:	and	r1, r6, #7
   118b4:	ands	r3, r3, r2, asr r1
   118b8:	beq	1187c <rb_patricia_lookup+0x6c>
   118bc:	ldr	r3, [r4, #12]
   118c0:	cmp	r3, #0
   118c4:	bne	11884 <rb_patricia_lookup+0x74>
   118c8:	ldr	r2, [r4, #4]
   118cc:	cmp	r9, r6
   118d0:	add	fp, r2, #8
   118d4:	movcs	r3, r6
   118d8:	movcc	r3, r9
   118dc:	add	r0, r8, #7
   118e0:	add	r2, r2, #7
   118e4:	mov	r6, #0
   118e8:	cmp	r6, r3
   118ec:	bcs	11928 <rb_patricia_lookup+0x118>
   118f0:	ldrb	r1, [r0, #1]!
   118f4:	ldrb	ip, [r2, #1]!
   118f8:	cmp	r1, ip
   118fc:	addeq	r6, r6, #8
   11900:	beq	118e8 <rb_patricia_lookup+0xd8>
   11904:	mov	r2, #0
   11908:	eor	r1, r1, ip
   1190c:	mov	r0, #128	; 0x80
   11910:	ands	ip, r1, r0, asr r2
   11914:	bne	11924 <rb_patricia_lookup+0x114>
   11918:	add	r2, r2, #1
   1191c:	cmp	r2, #8
   11920:	bne	11910 <rb_patricia_lookup+0x100>
   11924:	add	r6, r6, r2
   11928:	cmp	r6, r3
   1192c:	movcs	r6, r3
   11930:	ldr	r3, [r4, #16]
   11934:	cmp	r3, #0
   11938:	bne	11970 <rb_patricia_lookup+0x160>
   1193c:	cmp	r6, r9
   11940:	bne	11988 <rb_patricia_lookup+0x178>
   11944:	ldr	r3, [r4]
   11948:	cmp	r6, r3
   1194c:	bne	11988 <rb_patricia_lookup+0x178>
   11950:	ldr	r3, [r4, #4]
   11954:	cmp	r3, #0
   11958:	bne	11968 <rb_patricia_lookup+0x158>
   1195c:	mov	r0, r8
   11960:	bl	113e4 <Ref_Prefix>
   11964:	str	r0, [r4, #4]
   11968:	mov	r5, r4
   1196c:	b	11874 <rb_patricia_lookup+0x64>
   11970:	ldr	r2, [r3]
   11974:	cmp	r6, r2
   11978:	bhi	1193c <rb_patricia_lookup+0x12c>
   1197c:	mov	r4, r3
   11980:	ldr	r3, [r3, #16]
   11984:	b	11934 <rb_patricia_lookup+0x124>
   11988:	mov	r0, #24
   1198c:	bl	112c4 <rb_malloc>
   11990:	ldrh	r3, [r8, #2]
   11994:	mov	r5, r0
   11998:	str	r3, [r0]
   1199c:	mov	r0, r8
   119a0:	bl	113e4 <Ref_Prefix>
   119a4:	ldr	r3, [r7, #8]
   119a8:	mov	r8, #0
   119ac:	add	r3, r3, #1
   119b0:	str	r8, [r5, #16]
   119b4:	str	r8, [r5, #12]
   119b8:	str	r8, [r5, #8]
   119bc:	str	r8, [r5, #20]
   119c0:	str	r0, [r5, #4]
   119c4:	str	r3, [r7, #8]
   119c8:	ldr	r3, [r4]
   119cc:	cmp	r6, r3
   119d0:	bne	11a04 <rb_patricia_lookup+0x1f4>
   119d4:	ldr	r3, [r7, #4]
   119d8:	str	r4, [r5, #16]
   119dc:	cmp	r6, r3
   119e0:	bcs	119fc <rb_patricia_lookup+0x1ec>
   119e4:	ldrb	r3, [sl, r6, lsr #3]
   119e8:	mov	r2, #128	; 0x80
   119ec:	and	r6, r6, #7
   119f0:	ands	r3, r3, r2, asr r6
   119f4:	strne	r5, [r4, #12]
   119f8:	bne	11874 <rb_patricia_lookup+0x64>
   119fc:	str	r5, [r4, #8]
   11a00:	b	11874 <rb_patricia_lookup+0x64>
   11a04:	cmp	r6, r9
   11a08:	bne	11a64 <rb_patricia_lookup+0x254>
   11a0c:	ldr	r3, [r7, #4]
   11a10:	cmp	r6, r3
   11a14:	bcs	11a30 <rb_patricia_lookup+0x220>
   11a18:	ldrb	r3, [fp, r6, lsr #3]
   11a1c:	mov	r2, #128	; 0x80
   11a20:	and	r6, r6, #7
   11a24:	ands	r3, r3, r2, asr r6
   11a28:	strne	r4, [r5, #12]
   11a2c:	bne	11a34 <rb_patricia_lookup+0x224>
   11a30:	str	r4, [r5, #8]
   11a34:	ldr	r3, [r4, #16]
   11a38:	str	r3, [r5, #16]
   11a3c:	ldr	r3, [r4, #16]
   11a40:	cmp	r3, #0
   11a44:	streq	r5, [r7]
   11a48:	beq	11a5c <rb_patricia_lookup+0x24c>
   11a4c:	ldr	r2, [r3, #12]
   11a50:	cmp	r4, r2
   11a54:	streq	r5, [r3, #12]
   11a58:	strne	r5, [r3, #8]
   11a5c:	str	r5, [r4, #16]
   11a60:	b	11874 <rb_patricia_lookup+0x64>
   11a64:	mov	r0, #24
   11a68:	bl	112c4 <rb_malloc>
   11a6c:	ldr	r3, [r4, #16]
   11a70:	str	r3, [r0, #16]
   11a74:	ldr	r3, [r7, #8]
   11a78:	stm	r0, {r6, r8}
   11a7c:	add	r3, r3, #1
   11a80:	str	r8, [r0, #20]
   11a84:	str	r3, [r7, #8]
   11a88:	ldr	r3, [r7, #4]
   11a8c:	cmp	r6, r3
   11a90:	bcs	11ab0 <rb_patricia_lookup+0x2a0>
   11a94:	ldrb	r3, [sl, r6, lsr #3]
   11a98:	mov	r2, #128	; 0x80
   11a9c:	and	r6, r6, #7
   11aa0:	ands	r3, r3, r2, asr r6
   11aa4:	strne	r5, [r0, #12]
   11aa8:	strne	r4, [r0, #8]
   11aac:	bne	11ab8 <rb_patricia_lookup+0x2a8>
   11ab0:	str	r4, [r0, #12]
   11ab4:	str	r5, [r0, #8]
   11ab8:	str	r0, [r5, #16]
   11abc:	ldr	r3, [r4, #16]
   11ac0:	cmp	r3, #0
   11ac4:	streq	r0, [r7]
   11ac8:	beq	11adc <rb_patricia_lookup+0x2cc>
   11acc:	ldr	r2, [r3, #12]
   11ad0:	cmp	r4, r2
   11ad4:	streq	r0, [r3, #12]
   11ad8:	strne	r0, [r3, #8]
   11adc:	str	r0, [r4, #16]
   11ae0:	b	11874 <rb_patricia_lookup+0x64>

00011ae4 <rb_patricia_remove>:
   11ae4:	push	{r4, r5, r6, r7, r8, lr}
   11ae8:	mov	r6, r0
   11aec:	ldr	r5, [r1, #12]
   11af0:	mov	r4, r1
   11af4:	cmp	r5, #0
   11af8:	ldr	r7, [r1, #8]
   11afc:	beq	11b28 <rb_patricia_remove+0x44>
   11b00:	cmp	r7, #0
   11b04:	beq	11bbc <rb_patricia_remove+0xd8>
   11b08:	ldr	r0, [r1, #4]
   11b0c:	cmp	r0, #0
   11b10:	beq	11b18 <rb_patricia_remove+0x34>
   11b14:	bl	112ec <Deref_Prefix>
   11b18:	mov	r3, #0
   11b1c:	str	r3, [r4, #4]
   11b20:	str	r3, [r4, #20]
   11b24:	pop	{r4, r5, r6, r7, r8, pc}
   11b28:	subs	r5, r7, #0
   11b2c:	bne	11bbc <rb_patricia_remove+0xd8>
   11b30:	ldr	r0, [r1, #4]
   11b34:	ldr	r5, [r1, #16]
   11b38:	bl	112ec <Deref_Prefix>
   11b3c:	mov	r0, r4
   11b40:	bl	112e0 <rb_free>
   11b44:	ldr	r3, [r6, #8]
   11b48:	cmp	r5, #0
   11b4c:	sub	r3, r3, #1
   11b50:	str	r3, [r6, #8]
   11b54:	bne	11b60 <rb_patricia_remove+0x7c>
   11b58:	str	r5, [r6]
   11b5c:	pop	{r4, r5, r6, r7, r8, pc}
   11b60:	ldr	r3, [r5, #12]
   11b64:	ldr	r2, [r5, #4]
   11b68:	cmp	r4, r3
   11b6c:	streq	r7, [r5, #12]
   11b70:	ldreq	r3, [r5, #8]
   11b74:	strne	r7, [r5, #8]
   11b78:	cmp	r2, #0
   11b7c:	popne	{r4, r5, r6, r7, r8, pc}
   11b80:	ldr	r2, [r5, #16]
   11b84:	cmp	r2, #0
   11b88:	streq	r3, [r6]
   11b8c:	beq	11ba0 <rb_patricia_remove+0xbc>
   11b90:	ldr	r1, [r2, #12]
   11b94:	cmp	r5, r1
   11b98:	streq	r3, [r2, #12]
   11b9c:	strne	r3, [r2, #8]
   11ba0:	str	r2, [r3, #16]
   11ba4:	mov	r0, r5
   11ba8:	bl	112e0 <rb_free>
   11bac:	ldr	r3, [r6, #8]
   11bb0:	sub	r3, r3, #1
   11bb4:	str	r3, [r6, #8]
   11bb8:	pop	{r4, r5, r6, r7, r8, pc}
   11bbc:	ldr	r7, [r4, #16]
   11bc0:	ldr	r0, [r4, #4]
   11bc4:	str	r7, [r5, #16]
   11bc8:	bl	112ec <Deref_Prefix>
   11bcc:	mov	r0, r4
   11bd0:	bl	112e0 <rb_free>
   11bd4:	ldr	r3, [r6, #8]
   11bd8:	cmp	r7, #0
   11bdc:	sub	r3, r3, #1
   11be0:	str	r3, [r6, #8]
   11be4:	beq	11b58 <rb_patricia_remove+0x74>
   11be8:	ldr	r3, [r7, #12]
   11bec:	cmp	r4, r3
   11bf0:	streq	r5, [r7, #12]
   11bf4:	strne	r5, [r7, #8]
   11bf8:	pop	{r4, r5, r6, r7, r8, pc}

00011bfc <make_and_lookup_ip>:
   11bfc:	push	{r4, r5, r6, lr}
   11c00:	mov	r5, r0
   11c04:	ldrh	r0, [r1]
   11c08:	cmp	r0, #10
   11c0c:	addeq	r1, r1, #8
   11c10:	addne	r1, r1, #4
   11c14:	bl	11368 <New_Prefix2.constprop.1>
   11c18:	subs	r4, r0, #0
   11c1c:	moveq	r5, r4
   11c20:	beq	11c3c <make_and_lookup_ip+0x40>
   11c24:	mov	r0, r5
   11c28:	mov	r1, r4
   11c2c:	bl	4924 <rb_patricia_lookup@plt>
   11c30:	mov	r5, r0
   11c34:	mov	r0, r4
   11c38:	bl	112ec <Deref_Prefix>
   11c3c:	mov	r0, r5
   11c40:	pop	{r4, r5, r6, pc}

00011c44 <make_and_lookup>:
   11c44:	push	{r4, r5, r6, lr}
   11c48:	mov	r5, r0
   11c4c:	mov	r0, #2
   11c50:	mov	r6, r1
   11c54:	bl	11414 <ascii2prefix>
   11c58:	subs	r4, r0, #0
   11c5c:	beq	11c7c <make_and_lookup+0x38>
   11c60:	mov	r1, r4
   11c64:	mov	r0, r5
   11c68:	bl	4924 <rb_patricia_lookup@plt>
   11c6c:	mov	r5, r0
   11c70:	mov	r0, r4
   11c74:	bl	112ec <Deref_Prefix>
   11c78:	b	11c94 <make_and_lookup+0x50>
   11c7c:	mov	r1, r6
   11c80:	mov	r0, #10
   11c84:	bl	11414 <ascii2prefix>
   11c88:	subs	r4, r0, #0
   11c8c:	moveq	r5, r4
   11c90:	bne	11c60 <make_and_lookup+0x1c>
   11c94:	mov	r0, r5
   11c98:	pop	{r4, r5, r6, pc}

00011c9c <rb_match_ip>:
   11c9c:	push	{r4, r5, r6, lr}
   11ca0:	mov	r5, r0
   11ca4:	ldrh	r0, [r1]
   11ca8:	cmp	r0, #10
   11cac:	addeq	r1, r1, #8
   11cb0:	moveq	r2, #128	; 0x80
   11cb4:	addne	r1, r1, #4
   11cb8:	movne	r0, #2
   11cbc:	movne	r2, #32
   11cc0:	bl	11368 <New_Prefix2.constprop.1>
   11cc4:	subs	r4, r0, #0
   11cc8:	moveq	r5, r4
   11ccc:	beq	11ce8 <rb_match_ip+0x4c>
   11cd0:	mov	r0, r5
   11cd4:	mov	r1, r4
   11cd8:	bl	4570 <rb_patricia_search_best@plt>
   11cdc:	mov	r5, r0
   11ce0:	mov	r0, r4
   11ce4:	bl	112ec <Deref_Prefix>
   11ce8:	mov	r0, r5
   11cec:	pop	{r4, r5, r6, pc}

00011cf0 <rb_match_ip_exact>:
   11cf0:	push	{r4, r5, r6, lr}
   11cf4:	mov	r5, r0
   11cf8:	ldrh	r0, [r1]
   11cfc:	cmp	r0, #10
   11d00:	bne	11d40 <rb_match_ip_exact+0x50>
   11d04:	cmp	r2, #128	; 0x80
   11d08:	movcs	r2, #128	; 0x80
   11d0c:	add	r1, r1, #8
   11d10:	bl	11368 <New_Prefix2.constprop.1>
   11d14:	subs	r4, r0, #0
   11d18:	moveq	r5, r4
   11d1c:	beq	11d38 <rb_match_ip_exact+0x48>
   11d20:	mov	r0, r5
   11d24:	mov	r1, r4
   11d28:	bl	48d0 <rb_patricia_search_exact@plt>
   11d2c:	mov	r5, r0
   11d30:	mov	r0, r4
   11d34:	bl	112ec <Deref_Prefix>
   11d38:	mov	r0, r5
   11d3c:	pop	{r4, r5, r6, pc}
   11d40:	cmp	r2, #32
   11d44:	movcs	r2, #32
   11d48:	add	r1, r1, #4
   11d4c:	mov	r0, #2
   11d50:	b	11d10 <rb_match_ip_exact+0x20>

00011d54 <rb_match_string>:
   11d54:	push	{r4, r5, r6, lr}
   11d58:	mov	r4, r0
   11d5c:	mov	r0, #2
   11d60:	mov	r6, r1
   11d64:	bl	11414 <ascii2prefix>
   11d68:	subs	r5, r0, #0
   11d6c:	beq	11d8c <rb_match_string+0x38>
   11d70:	mov	r1, r5
   11d74:	mov	r0, r4
   11d78:	bl	4570 <rb_patricia_search_best@plt>
   11d7c:	mov	r4, r0
   11d80:	mov	r0, r5
   11d84:	bl	112ec <Deref_Prefix>
   11d88:	b	11da4 <rb_match_string+0x50>
   11d8c:	mov	r1, r6
   11d90:	mov	r0, #10
   11d94:	bl	11414 <ascii2prefix>
   11d98:	subs	r5, r0, #0
   11d9c:	moveq	r4, r5
   11da0:	bne	11d70 <rb_match_string+0x1c>
   11da4:	mov	r0, r4
   11da8:	pop	{r4, r5, r6, pc}

00011dac <rb_match_exact_string>:
   11dac:	push	{r4, r5, r6, lr}
   11db0:	mov	r4, r0
   11db4:	mov	r0, #2
   11db8:	mov	r6, r1
   11dbc:	bl	11414 <ascii2prefix>
   11dc0:	subs	r5, r0, #0
   11dc4:	beq	11de4 <rb_match_exact_string+0x38>
   11dc8:	mov	r1, r5
   11dcc:	mov	r0, r4
   11dd0:	bl	48d0 <rb_patricia_search_exact@plt>
   11dd4:	mov	r4, r0
   11dd8:	mov	r0, r5
   11ddc:	bl	112ec <Deref_Prefix>
   11de0:	b	11dfc <rb_match_exact_string+0x50>
   11de4:	mov	r1, r6
   11de8:	mov	r0, #10
   11dec:	bl	11414 <ascii2prefix>
   11df0:	subs	r5, r0, #0
   11df4:	moveq	r4, r5
   11df8:	bne	11dc8 <rb_match_exact_string+0x1c>
   11dfc:	mov	r0, r4
   11e00:	pop	{r4, r5, r6, pc}

00011e04 <rb_dictionary_retune>:
   11e04:	push	{r4, r5, r6, r7, r8, lr}
   11e08:	sub	sp, sp, #32
   11e0c:	ldr	r4, [r0, #4]
   11e10:	cmp	r4, #0
   11e14:	beq	11ebc <rb_dictionary_retune+0xb8>
   11e18:	add	r6, sp, #32
   11e1c:	mov	r3, #0
   11e20:	str	r3, [r6, #-28]!	; 0xffffffe4
   11e24:	mov	r7, r1
   11e28:	mov	r5, r0
   11e2c:	mov	r8, r6
   11e30:	str	r3, [sp, #8]
   11e34:	ldr	r3, [r5]
   11e38:	ldr	r1, [r4, #20]
   11e3c:	mov	r0, r7
   11e40:	blx	r3
   11e44:	cmp	r0, #0
   11e48:	beq	11e98 <rb_dictionary_retune+0x94>
   11e4c:	bge	11edc <rb_dictionary_retune+0xd8>
   11e50:	ldr	r3, [r4]
   11e54:	cmp	r3, #0
   11e58:	beq	11e98 <rb_dictionary_retune+0x94>
   11e5c:	ldr	r2, [r5]
   11e60:	ldr	r1, [r3, #20]
   11e64:	mov	r0, r7
   11e68:	blx	r2
   11e6c:	cmp	r0, #0
   11e70:	movge	r2, r4
   11e74:	bge	11ec4 <rb_dictionary_retune+0xc0>
   11e78:	ldr	r2, [r4]
   11e7c:	ldr	r3, [r2, #4]
   11e80:	str	r3, [r4]
   11e84:	ldr	r3, [r2]
   11e88:	str	r4, [r2, #4]
   11e8c:	cmp	r3, #0
   11e90:	bne	11ec4 <rb_dictionary_retune+0xc0>
   11e94:	mov	r4, r2
   11e98:	ldr	r3, [r4]
   11e9c:	str	r3, [r8, #4]
   11ea0:	ldr	r3, [r4, #4]
   11ea4:	str	r3, [r6]
   11ea8:	ldr	r3, [sp, #8]
   11eac:	str	r3, [r4]
   11eb0:	ldr	r3, [sp, #4]
   11eb4:	str	r3, [r4, #4]
   11eb8:	str	r4, [r5, #4]
   11ebc:	add	sp, sp, #32
   11ec0:	pop	{r4, r5, r6, r7, r8, pc}
   11ec4:	str	r2, [r6]
   11ec8:	ldr	r4, [r2]
   11ecc:	mov	r3, r8
   11ed0:	mov	r6, r2
   11ed4:	mov	r8, r3
   11ed8:	b	11e34 <rb_dictionary_retune+0x30>
   11edc:	ldr	r3, [r4, #4]
   11ee0:	cmp	r3, #0
   11ee4:	beq	11e98 <rb_dictionary_retune+0x94>
   11ee8:	ldr	r2, [r5]
   11eec:	ldr	r1, [r3, #20]
   11ef0:	mov	r0, r7
   11ef4:	blx	r2
   11ef8:	cmp	r0, #0
   11efc:	ble	11f24 <rb_dictionary_retune+0x120>
   11f00:	ldr	r3, [r4, #4]
   11f04:	ldr	r2, [r3]
   11f08:	str	r2, [r4, #4]
   11f0c:	ldr	r2, [r3, #4]
   11f10:	str	r4, [r3]
   11f14:	cmp	r2, #0
   11f18:	bne	11f28 <rb_dictionary_retune+0x124>
   11f1c:	mov	r4, r3
   11f20:	b	11e98 <rb_dictionary_retune+0x94>
   11f24:	mov	r3, r4
   11f28:	str	r3, [r8, #4]
   11f2c:	mov	r2, r6
   11f30:	ldr	r4, [r3, #4]
   11f34:	b	11ed0 <rb_dictionary_retune+0xcc>

00011f38 <stats_recurse>:
   11f38:	push	{r4, r5, r6, r7, r8, lr}
   11f3c:	mov	r5, r0
   11f40:	mov	r4, r1
   11f44:	mov	r7, r2
   11f48:	mov	r6, #0
   11f4c:	ldr	r3, [r7]
   11f50:	cmp	r3, r4
   11f54:	strlt	r4, [r7]
   11f58:	cmp	r5, #0
   11f5c:	beq	11f90 <stats_recurse+0x58>
   11f60:	ldr	r0, [r5]
   11f64:	cmp	r0, #0
   11f68:	moveq	r0, r4
   11f6c:	beq	11f80 <stats_recurse+0x48>
   11f70:	mov	r2, r7
   11f74:	add	r1, r4, #1
   11f78:	bl	11f38 <stats_recurse>
   11f7c:	add	r0, r4, r0
   11f80:	ldr	r5, [r5, #4]
   11f84:	cmp	r5, #0
   11f88:	bne	11f98 <stats_recurse+0x60>
   11f8c:	mov	r4, r0
   11f90:	add	r0, r4, r6
   11f94:	pop	{r4, r5, r6, r7, r8, pc}
   11f98:	add	r4, r4, #1
   11f9c:	add	r6, r6, r0
   11fa0:	b	11f4c <stats_recurse+0x14>

00011fa4 <rb_free>:
   11fa4:	cmp	r0, #0
   11fa8:	bxeq	lr
   11fac:	b	4714 <free@plt>

00011fb0 <rb_dictionary_create>:
   11fb0:	push	{r4, r5, r6, lr}
   11fb4:	mov	r5, r0
   11fb8:	mov	r6, r1
   11fbc:	mov	r0, #1
   11fc0:	mov	r1, #40	; 0x28
   11fc4:	bl	460c <calloc@plt>
   11fc8:	subs	r4, r0, #0
   11fcc:	bne	11fd4 <rb_dictionary_create+0x24>
   11fd0:	bl	49b4 <rb_outofmemory@plt>
   11fd4:	str	r6, [r4]
   11fd8:	mov	r0, r5
   11fdc:	bl	4804 <strlen@plt>
   11fe0:	add	r0, r0, #1
   11fe4:	bl	49d8 <malloc@plt>
   11fe8:	subs	r6, r0, #0
   11fec:	beq	11fd0 <rb_dictionary_create+0x20>
   11ff0:	mov	r1, r5
   11ff4:	bl	48ac <strcpy@plt>
   11ff8:	mov	r3, #0
   11ffc:	str	r3, [r4, #32]
   12000:	ldr	r3, [pc, #76]	; 12054 <rb_dictionary_create+0xa4>
   12004:	add	r2, r4, #28
   12008:	add	r3, pc, r3
   1200c:	str	r6, [r4, #20]
   12010:	ldr	r1, [r3]
   12014:	str	r4, [r4, #28]
   12018:	cmp	r1, #0
   1201c:	str	r1, [r4, #36]	; 0x24
   12020:	strne	r2, [r1, #4]
   12024:	bne	12034 <rb_dictionary_create+0x84>
   12028:	ldr	r1, [r3, #4]
   1202c:	cmp	r1, #0
   12030:	streq	r2, [r3, #4]
   12034:	ldr	r3, [pc, #28]	; 12058 <rb_dictionary_create+0xa8>
   12038:	mov	r0, r4
   1203c:	add	r3, pc, r3
   12040:	str	r2, [r3]
   12044:	ldr	r2, [r3, #8]
   12048:	add	r2, r2, #1
   1204c:	str	r2, [r3, #8]
   12050:	pop	{r4, r5, r6, pc}
   12054:	.word	0x00031f24
   12058:	.word	0x00031ef0

0001205c <rb_dictionary_set_comparator_func>:
   1205c:	str	r1, [r0]
   12060:	bx	lr

00012064 <rb_dictionary_get_comparator_func>:
   12064:	ldr	r0, [r0]
   12068:	bx	lr

0001206c <rb_dictionary_destroy>:
   1206c:	push	{r4, r5, r6, r7, r8, lr}
   12070:	mov	r4, r0
   12074:	ldr	r5, [r0, #8]
   12078:	cmp	r5, #0
   1207c:	movne	r7, r1
   12080:	movne	r8, r2
   12084:	ldrne	r6, [r5, #12]
   12088:	bne	120f4 <rb_dictionary_destroy+0x88>
   1208c:	ldr	r3, [r4, #36]	; 0x24
   12090:	ldr	r2, [r4, #32]
   12094:	cmp	r3, #0
   12098:	strne	r2, [r3, #4]
   1209c:	ldreq	r1, [pc, #128]	; 12124 <rb_dictionary_destroy+0xb8>
   120a0:	addeq	r1, pc, r1
   120a4:	streq	r2, [r1, #4]
   120a8:	ldr	r2, [r4, #32]
   120ac:	cmp	r2, #0
   120b0:	strne	r3, [r2, #8]
   120b4:	ldreq	r2, [pc, #108]	; 12128 <rb_dictionary_destroy+0xbc>
   120b8:	addeq	r2, pc, r2
   120bc:	streq	r3, [r2]
   120c0:	ldr	r2, [pc, #100]	; 1212c <rb_dictionary_destroy+0xc0>
   120c4:	mov	r3, #0
   120c8:	add	r2, pc, r2
   120cc:	str	r3, [r4, #32]
   120d0:	str	r3, [r4, #36]	; 0x24
   120d4:	ldr	r3, [r2, #8]
   120d8:	ldr	r0, [r4, #20]
   120dc:	sub	r3, r3, #1
   120e0:	str	r3, [r2, #8]
   120e4:	bl	11fa4 <rb_free>
   120e8:	mov	r0, r4
   120ec:	pop	{r4, r5, r6, r7, r8, lr}
   120f0:	b	11fa4 <rb_free>
   120f4:	cmp	r7, #0
   120f8:	beq	12108 <rb_dictionary_destroy+0x9c>
   120fc:	mov	r1, r8
   12100:	mov	r0, r5
   12104:	blx	r7
   12108:	mov	r0, r5
   1210c:	bl	11fa4 <rb_free>
   12110:	cmp	r6, #0
   12114:	beq	1208c <rb_dictionary_destroy+0x20>
   12118:	mov	r5, r6
   1211c:	ldr	r6, [r6, #12]
   12120:	b	120f4 <rb_dictionary_destroy+0x88>
   12124:	.word	0x00031e8c
   12128:	.word	0x00031e74
   1212c:	.word	0x00031e64

00012130 <rb_dictionary_foreach>:
   12130:	ldr	r0, [r0, #8]
   12134:	cmp	r0, #0
   12138:	bxeq	lr
   1213c:	push	{r4, r5, r6, lr}
   12140:	mov	r6, r2
   12144:	ldr	r4, [r0, #12]
   12148:	mov	r5, r1
   1214c:	cmp	r5, #0
   12150:	beq	1215c <rb_dictionary_foreach+0x2c>
   12154:	mov	r1, r6
   12158:	blx	r5
   1215c:	cmp	r4, #0
   12160:	popeq	{r4, r5, r6, pc}
   12164:	mov	r0, r4
   12168:	ldr	r4, [r4, #12]
   1216c:	b	1214c <rb_dictionary_foreach+0x1c>

00012170 <rb_dictionary_search>:
   12170:	ldr	r0, [r0, #8]
   12174:	cmp	r0, #0
   12178:	bne	12184 <rb_dictionary_search+0x14>
   1217c:	mov	r0, #0
   12180:	bx	lr
   12184:	push	{r4, r5, r6, lr}
   12188:	mov	r6, r2
   1218c:	ldr	r4, [r0, #12]
   12190:	mov	r5, r1
   12194:	cmp	r5, #0
   12198:	bne	121ac <rb_dictionary_search+0x3c>
   1219c:	cmp	r4, #0
   121a0:	bne	121c0 <rb_dictionary_search+0x50>
   121a4:	mov	r0, #0
   121a8:	pop	{r4, r5, r6, pc}
   121ac:	mov	r1, r6
   121b0:	blx	r5
   121b4:	cmp	r0, #0
   121b8:	beq	1219c <rb_dictionary_search+0x2c>
   121bc:	pop	{r4, r5, r6, pc}
   121c0:	mov	r0, r4
   121c4:	ldr	r4, [r4, #12]
   121c8:	b	12194 <rb_dictionary_search+0x24>

000121cc <rb_dictionary_foreach_cur>:
   121cc:	ldr	r0, [r1]
   121d0:	cmp	r0, #0
   121d4:	ldrne	r0, [r0, #16]
   121d8:	bx	lr

000121dc <rb_dictionary_foreach_next>:
   121dc:	ldr	r3, [r1]
   121e0:	cmp	r3, #0
   121e4:	bne	121f8 <rb_dictionary_foreach_next+0x1c>
   121e8:	mov	r1, r0
   121ec:	ldr	r0, [pc, #28]	; 12210 <rb_dictionary_foreach_next+0x34>
   121f0:	add	r0, pc, r0
   121f4:	b	4948 <rb_lib_log@plt>
   121f8:	ldr	r3, [r1, #4]
   121fc:	cmp	r3, #0
   12200:	str	r3, [r1]
   12204:	ldrne	r3, [r3, #12]
   12208:	strne	r3, [r1, #4]
   1220c:	bx	lr
   12210:	.word	0x00002e7e

00012214 <rb_dictionary_foreach_start>:
   12214:	mov	r2, #0
   12218:	str	r2, [r1, #4]
   1221c:	ldr	r2, [r0, #8]
   12220:	cmp	r2, #0
   12224:	str	r2, [r1]
   12228:	bxeq	lr
   1222c:	str	r2, [r1, #4]
   12230:	b	46fc <rb_dictionary_foreach_next@plt>

00012234 <rb_dictionary_find>:
   12234:	push	{r4, r5, r6, lr}
   12238:	mov	r4, r0
   1223c:	mov	r5, r1
   12240:	bl	11e04 <rb_dictionary_retune>
   12244:	ldr	r3, [r4, #4]
   12248:	cmp	r3, #0
   1224c:	bne	12258 <rb_dictionary_find+0x24>
   12250:	mov	r0, #0
   12254:	pop	{r4, r5, r6, pc}
   12258:	ldr	r2, [r4]
   1225c:	ldr	r1, [r3, #20]
   12260:	mov	r0, r5
   12264:	blx	r2
   12268:	cmp	r0, #0
   1226c:	bne	12250 <rb_dictionary_find+0x1c>
   12270:	ldr	r0, [r4, #4]
   12274:	pop	{r4, r5, r6, pc}

00012278 <rb_dictionary_get_linear_index>:
   12278:	push	{r4, lr}
   1227c:	mov	r4, r0
   12280:	bl	4a5c <rb_dictionary_find@plt>
   12284:	cmp	r0, #0
   12288:	beq	122cc <rb_dictionary_get_linear_index+0x54>
   1228c:	ldrb	r3, [r4, #24]
   12290:	tst	r3, #1
   12294:	movne	r2, #0
   12298:	ldrne	r3, [r4, #8]
   1229c:	bne	122b4 <rb_dictionary_get_linear_index+0x3c>
   122a0:	ldr	r0, [r0, #24]
   122a4:	pop	{r4, pc}
   122a8:	str	r2, [r3, #24]
   122ac:	ldr	r3, [r3, #12]
   122b0:	add	r2, r2, #1
   122b4:	cmp	r3, #0
   122b8:	bne	122a8 <rb_dictionary_get_linear_index+0x30>
   122bc:	ldrb	r3, [r4, #24]
   122c0:	bic	r3, r3, #1
   122c4:	strb	r3, [r4, #24]
   122c8:	b	122a0 <rb_dictionary_get_linear_index+0x28>
   122cc:	mvn	r0, #0
   122d0:	pop	{r4, pc}

000122d4 <rb_dictionary_add>:
   122d4:	push	{r4, r5, r6, r7, r8, lr}
   122d8:	mov	r5, r0
   122dc:	mov	r6, r1
   122e0:	mov	r0, #1
   122e4:	mov	r1, #28
   122e8:	mov	r7, r2
   122ec:	bl	460c <calloc@plt>
   122f0:	subs	r4, r0, #0
   122f4:	bne	122fc <rb_dictionary_add+0x28>
   122f8:	bl	49b4 <rb_outofmemory@plt>
   122fc:	ldrb	r3, [r5, #24]
   12300:	str	r6, [r4, #20]
   12304:	str	r7, [r4, #16]
   12308:	orr	r3, r3, #1
   1230c:	strb	r3, [r5, #24]
   12310:	ldr	r3, [r5, #16]
   12314:	add	r3, r3, #1
   12318:	str	r3, [r5, #16]
   1231c:	ldr	r3, [r5, #4]
   12320:	cmp	r3, #0
   12324:	bne	1234c <rb_dictionary_add+0x78>
   12328:	str	r3, [r4, #4]
   1232c:	str	r3, [r4]
   12330:	str	r3, [r4, #8]
   12334:	str	r3, [r4, #12]
   12338:	str	r4, [r5, #4]
   1233c:	str	r4, [r5, #12]
   12340:	str	r4, [r5, #8]
   12344:	mov	r0, r4
   12348:	pop	{r4, r5, r6, r7, r8, pc}
   1234c:	mov	r1, r6
   12350:	mov	r0, r5
   12354:	bl	11e04 <rb_dictionary_retune>
   12358:	ldr	r2, [r5, #4]
   1235c:	ldr	r3, [r5]
   12360:	ldr	r0, [r4, #20]
   12364:	ldr	r1, [r2, #20]
   12368:	blx	r3
   1236c:	ldr	r3, [r5, #4]
   12370:	cmp	r0, #0
   12374:	bge	123ac <rb_dictionary_add+0xd8>
   12378:	ldr	r2, [r3]
   1237c:	stm	r4, {r2, r3}
   12380:	mov	r2, #0
   12384:	str	r2, [r3]
   12388:	ldr	r2, [r3, #8]
   1238c:	cmp	r2, #0
   12390:	strne	r4, [r2, #12]
   12394:	streq	r4, [r5, #8]
   12398:	str	r2, [r4, #8]
   1239c:	str	r3, [r4, #12]
   123a0:	str	r4, [r3, #8]
   123a4:	str	r4, [r5, #4]
   123a8:	b	12344 <rb_dictionary_add+0x70>
   123ac:	beq	123e4 <rb_dictionary_add+0x110>
   123b0:	ldr	r2, [r3, #4]
   123b4:	str	r3, [r4]
   123b8:	str	r2, [r4, #4]
   123bc:	mov	r2, #0
   123c0:	str	r2, [r3, #4]
   123c4:	ldr	r2, [r3, #12]
   123c8:	cmp	r2, #0
   123cc:	strne	r4, [r2, #8]
   123d0:	streq	r4, [r5, #12]
   123d4:	str	r2, [r4, #12]
   123d8:	str	r3, [r4, #8]
   123dc:	str	r4, [r3, #12]
   123e0:	b	123a4 <rb_dictionary_add+0xd0>
   123e4:	ldr	r2, [r4, #20]
   123e8:	mov	r0, r4
   123ec:	str	r2, [r3, #20]
   123f0:	ldr	r2, [r4, #16]
   123f4:	str	r2, [r3, #16]
   123f8:	ldr	r3, [r5, #16]
   123fc:	sub	r3, r3, #1
   12400:	str	r3, [r5, #16]
   12404:	bl	11fa4 <rb_free>
   12408:	ldr	r4, [r5, #4]
   1240c:	b	12344 <rb_dictionary_add+0x70>

00012410 <rb_dictionary_delete>:
   12410:	push	{r4, r5, r6, lr}
   12414:	mov	r4, r0
   12418:	bl	4a5c <rb_dictionary_find@plt>
   1241c:	cmp	r0, #0
   12420:	moveq	r5, r0
   12424:	beq	124c0 <rb_dictionary_delete+0xb0>
   12428:	ldrb	r3, [r4, #24]
   1242c:	ldr	r5, [r0, #16]
   12430:	orr	r3, r3, #1
   12434:	strb	r3, [r4, #24]
   12438:	ldr	r3, [r4, #4]
   1243c:	cmp	r3, #0
   12440:	beq	124bc <rb_dictionary_delete+0xac>
   12444:	ldr	ip, [r3]
   12448:	ldr	r1, [r3, #4]
   1244c:	cmp	ip, #0
   12450:	ldr	r2, [r3, #12]
   12454:	streq	r1, [r4, #4]
   12458:	beq	1247c <rb_dictionary_delete+0x6c>
   1245c:	cmp	r1, #0
   12460:	streq	ip, [r4, #4]
   12464:	beq	1247c <rb_dictionary_delete+0x6c>
   12468:	cmp	r1, r2
   1246c:	streq	r2, [r4, #4]
   12470:	movne	ip, r1
   12474:	streq	ip, [r2]
   12478:	bne	124cc <rb_dictionary_delete+0xbc>
   1247c:	ldr	r1, [r3, #8]
   12480:	cmp	r1, #0
   12484:	strne	r2, [r1, #12]
   12488:	ldr	r2, [r4, #8]
   1248c:	cmp	r3, r2
   12490:	ldr	r2, [r3, #12]
   12494:	streq	r2, [r4, #8]
   12498:	cmp	r2, #0
   1249c:	strne	r1, [r2, #8]
   124a0:	ldr	r2, [r4, #12]
   124a4:	cmp	r3, r2
   124a8:	ldreq	r3, [r3, #8]
   124ac:	streq	r3, [r4, #12]
   124b0:	ldr	r3, [r4, #16]
   124b4:	sub	r3, r3, #1
   124b8:	str	r3, [r4, #16]
   124bc:	bl	11fa4 <rb_free>
   124c0:	mov	r0, r5
   124c4:	pop	{r4, r5, r6, pc}
   124c8:	mov	ip, lr
   124cc:	ldr	lr, [ip]
   124d0:	cmp	lr, #0
   124d4:	cmpne	r2, lr
   124d8:	bne	124c8 <rb_dictionary_delete+0xb8>
   124dc:	ldr	lr, [r2, #4]
   124e0:	str	lr, [ip]
   124e4:	ldr	ip, [r3]
   124e8:	str	r2, [r4, #4]
   124ec:	str	ip, [r2]
   124f0:	str	r1, [r2, #4]
   124f4:	b	1247c <rb_dictionary_delete+0x6c>

000124f8 <rb_dictionary_retrieve>:
   124f8:	push	{r4, lr}
   124fc:	bl	4a5c <rb_dictionary_find@plt>
   12500:	cmp	r0, #0
   12504:	ldrne	r0, [r0, #16]
   12508:	pop	{r4, pc}

0001250c <rb_dictionary_size>:
   1250c:	ldr	r0, [r0, #16]
   12510:	bx	lr

00012514 <rb_dictionary_stats>:
   12514:	ldr	r3, [r0, #16]
   12518:	push	{r4, r5, r6, r7, r8, r9, lr}
   1251c:	cmp	r3, #0
   12520:	sub	sp, sp, #292	; 0x124
   12524:	mov	r4, r0
   12528:	mov	r7, r1
   1252c:	mov	r8, r2
   12530:	add	r5, sp, #32
   12534:	beq	125a4 <rb_dictionary_stats+0x90>
   12538:	add	r2, sp, #288	; 0x120
   1253c:	mov	r1, #0
   12540:	str	r1, [r2, #-260]!	; 0xfffffefc
   12544:	ldr	r0, [r0, #4]
   12548:	bl	11f38 <stats_recurse>
   1254c:	ldr	r6, [r4, #16]
   12550:	ldr	r3, [sp, #28]
   12554:	mov	r1, r6
   12558:	str	r3, [sp, #16]
   1255c:	mov	r9, r0
   12560:	bl	13210 <__udivsi3>
   12564:	ldr	r3, [pc, #108]	; 125d8 <rb_dictionary_stats+0xc4>
   12568:	ldr	r2, [pc, #108]	; 125dc <rb_dictionary_stats+0xc8>
   1256c:	add	r3, pc, r3
   12570:	str	r3, [sp]
   12574:	ldr	r3, [r4, #20]
   12578:	add	r2, pc, r2
   1257c:	stmib	sp, {r6, r9}
   12580:	str	r0, [sp, #12]
   12584:	mov	r1, #256	; 0x100
   12588:	mov	r0, r5
   1258c:	bl	4bdc <snprintf@plt>
   12590:	mov	r1, r8
   12594:	mov	r0, r5
   12598:	blx	r7
   1259c:	add	sp, sp, #292	; 0x124
   125a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   125a4:	ldr	r3, [pc, #52]	; 125e0 <rb_dictionary_stats+0xcc>
   125a8:	ldr	r2, [pc, #52]	; 125e4 <rb_dictionary_stats+0xd0>
   125ac:	add	r3, pc, r3
   125b0:	str	r3, [sp, #16]
   125b4:	str	r3, [sp, #12]
   125b8:	str	r3, [sp, #8]
   125bc:	str	r3, [sp, #4]
   125c0:	ldr	r3, [pc, #32]	; 125e8 <rb_dictionary_stats+0xd4>
   125c4:	add	r2, pc, r2
   125c8:	add	r3, pc, r3
   125cc:	str	r3, [sp]
   125d0:	ldr	r3, [r0, #20]
   125d4:	b	12584 <rb_dictionary_stats+0x70>
   125d8:	.word	0x00002b77
   125dc:	.word	0x00002b47
   125e0:	.word	0x00001cb2
   125e4:	.word	0x00002b24
   125e8:	.word	0x00002b1b

000125ec <rb_dictionary_stats_walk>:
   125ec:	ldr	r3, [pc, #48]	; 12624 <rb_dictionary_stats_walk+0x38>
   125f0:	push	{r4, r5, r6, lr}
   125f4:	mov	r5, r0
   125f8:	ldr	r4, [pc, r3]
   125fc:	mov	r6, r1
   12600:	cmp	r4, #0
   12604:	bne	1260c <rb_dictionary_stats_walk+0x20>
   12608:	pop	{r4, r5, r6, pc}
   1260c:	ldr	r0, [r4]
   12610:	mov	r2, r6
   12614:	mov	r1, r5
   12618:	bl	49cc <rb_dictionary_stats@plt>
   1261c:	ldr	r4, [r4, #8]
   12620:	b	12600 <rb_dictionary_stats_walk+0x14>
   12624:	.word	0x00031934

00012628 <stats_recurse>:
   12628:	ldr	r3, [r2]
   1262c:	push	{r4, r5, r6, r7, r8, lr}
   12630:	cmp	r3, r1
   12634:	strlt	r1, [r2]
   12638:	ldr	r3, [r0]
   1263c:	cmn	r3, #1
   12640:	moveq	r4, r1
   12644:	beq	12680 <stats_recurse+0x58>
   12648:	mov	r8, r2
   1264c:	add	r6, r0, #4
   12650:	add	r5, r0, #68	; 0x44
   12654:	mov	r4, #0
   12658:	add	r7, r1, #1
   1265c:	ldr	r0, [r6], #4
   12660:	cmp	r0, #0
   12664:	beq	12678 <stats_recurse+0x50>
   12668:	mov	r2, r8
   1266c:	mov	r1, r7
   12670:	bl	12628 <stats_recurse>
   12674:	add	r4, r4, r0
   12678:	cmp	r5, r6
   1267c:	bne	1265c <stats_recurse+0x34>
   12680:	mov	r0, r4
   12684:	pop	{r4, r5, r6, r7, r8, pc}

00012688 <rb_malloc>:
   12688:	push	{r4, lr}
   1268c:	mov	r1, r0
   12690:	mov	r0, #1
   12694:	bl	460c <calloc@plt>
   12698:	cmp	r0, #0
   1269c:	popne	{r4, pc}
   126a0:	bl	49b4 <rb_outofmemory@plt>

000126a4 <rb_strdup>:
   126a4:	push	{r4, r5, r6, lr}
   126a8:	mov	r5, r0
   126ac:	bl	4804 <strlen@plt>
   126b0:	add	r0, r0, #1
   126b4:	bl	49d8 <malloc@plt>
   126b8:	subs	r4, r0, #0
   126bc:	bne	126c4 <rb_strdup+0x20>
   126c0:	bl	49b4 <rb_outofmemory@plt>
   126c4:	mov	r1, r5
   126c8:	bl	48ac <strcpy@plt>
   126cc:	mov	r0, r4
   126d0:	pop	{r4, r5, r6, pc}

000126d4 <rb_free>:
   126d4:	cmp	r0, #0
   126d8:	bxeq	lr
   126dc:	b	4714 <free@plt>

000126e0 <rb_radixtree_create>:
   126e0:	push	{r4, r5, r6, r7, r8, lr}
   126e4:	mov	r6, r0
   126e8:	mov	r0, #28
   126ec:	mov	r7, r1
   126f0:	bl	12688 <rb_malloc>
   126f4:	ldr	r5, [pc, #104]	; 12764 <rb_radixtree_create+0x84>
   126f8:	add	r5, pc, r5
   126fc:	mov	r4, r0
   12700:	str	r7, [r0]
   12704:	mov	r0, r6
   12708:	bl	126a4 <rb_strdup>
   1270c:	mov	r3, #0
   12710:	str	r3, [r4, #4]
   12714:	str	r3, [r4, #20]
   12718:	ldr	r3, [pc, #72]	; 12768 <rb_radixtree_create+0x88>
   1271c:	str	r4, [r4, #16]
   12720:	add	r2, r4, #16
   12724:	str	r0, [r4, #12]
   12728:	ldr	r3, [r5, r3]
   1272c:	ldr	r1, [r3]
   12730:	cmp	r1, #0
   12734:	str	r1, [r4, #24]
   12738:	strne	r2, [r1, #4]
   1273c:	bne	1274c <rb_radixtree_create+0x6c>
   12740:	ldr	r1, [r3, #4]
   12744:	cmp	r1, #0
   12748:	streq	r2, [r3, #4]
   1274c:	str	r2, [r3]
   12750:	ldr	r2, [r3, #8]
   12754:	mov	r0, r4
   12758:	add	r2, r2, #1
   1275c:	str	r2, [r3, #8]
   12760:	pop	{r4, r5, r6, r7, r8, pc}
   12764:	.word	0x00013900
   12768:	.word	0x000003f8

0001276c <rb_radixtree_foreach>:
   1276c:	push	{r4, r5, r6, r7, r8, lr}
   12770:	ldr	r5, [r0, #4]
   12774:	cmp	r5, #0
   12778:	popeq	{r4, r5, r6, r7, r8, pc}
   1277c:	mov	r3, r1
   12780:	ldr	r1, [r5]
   12784:	cmn	r1, #1
   12788:	movne	r7, r2
   1278c:	movne	r6, r3
   12790:	movne	r4, #0
   12794:	bne	127b4 <rb_radixtree_foreach+0x48>
   12798:	cmp	r3, #0
   1279c:	popeq	{r4, r5, r6, r7, r8, pc}
   127a0:	ldr	r1, [r5, #4]
   127a4:	ldr	r0, [r5, #8]
   127a8:	pop	{r4, r5, r6, r7, r8, lr}
   127ac:	bx	r3
   127b0:	mov	r5, r3
   127b4:	add	r4, r4, #1
   127b8:	ldr	r3, [r5, r4, lsl #2]
   127bc:	cmp	r4, #15
   127c0:	cmple	r3, #0
   127c4:	moveq	r1, #1
   127c8:	movne	r1, #0
   127cc:	beq	127b4 <rb_radixtree_foreach+0x48>
   127d0:	cmp	r3, #0
   127d4:	beq	12800 <rb_radixtree_foreach+0x94>
   127d8:	ldr	r2, [r3]
   127dc:	cmn	r2, #1
   127e0:	movne	r4, r1
   127e4:	bne	127b0 <rb_radixtree_foreach+0x44>
   127e8:	cmp	r6, #0
   127ec:	beq	12800 <rb_radixtree_foreach+0x94>
   127f0:	mov	r2, r7
   127f4:	ldr	r1, [r3, #4]
   127f8:	ldr	r0, [r3, #8]
   127fc:	blx	r6
   12800:	mov	r3, r5
   12804:	cmp	r4, #15
   12808:	ble	127b0 <rb_radixtree_foreach+0x44>
   1280c:	ldrb	r4, [r3, #72]	; 0x48
   12810:	ldr	r3, [r3, #68]	; 0x44
   12814:	cmp	r3, #0
   12818:	popeq	{r4, r5, r6, r7, r8, pc}
   1281c:	add	r4, r4, #1
   12820:	b	12804 <rb_radixtree_foreach+0x98>

00012824 <rb_radixtree_search>:
   12824:	push	{r4, r5, r6, r7, r8, lr}
   12828:	ldr	r5, [r0, #4]
   1282c:	cmp	r5, #0
   12830:	beq	128e8 <rb_radixtree_search+0xc4>
   12834:	mov	r3, r1
   12838:	ldr	r1, [r5]
   1283c:	cmn	r1, #1
   12840:	movne	r6, r2
   12844:	movne	r7, r3
   12848:	movne	r4, #0
   1284c:	bne	1286c <rb_radixtree_search+0x48>
   12850:	cmp	r3, #0
   12854:	beq	128f0 <rb_radixtree_search+0xcc>
   12858:	ldr	r1, [r5, #4]
   1285c:	ldr	r0, [r5, #8]
   12860:	pop	{r4, r5, r6, r7, r8, lr}
   12864:	bx	r3
   12868:	mov	r5, r3
   1286c:	add	r4, r4, #1
   12870:	ldr	r3, [r5, r4, lsl #2]
   12874:	cmp	r4, #15
   12878:	cmple	r3, #0
   1287c:	moveq	r1, #1
   12880:	movne	r1, #0
   12884:	beq	1286c <rb_radixtree_search+0x48>
   12888:	cmp	r3, #0
   1288c:	bne	128b4 <rb_radixtree_search+0x90>
   12890:	mov	r3, r5
   12894:	cmp	r4, #15
   12898:	ble	12868 <rb_radixtree_search+0x44>
   1289c:	ldrb	r4, [r3, #72]	; 0x48
   128a0:	ldr	r3, [r3, #68]	; 0x44
   128a4:	cmp	r3, #0
   128a8:	beq	12868 <rb_radixtree_search+0x44>
   128ac:	add	r4, r4, #1
   128b0:	b	12894 <rb_radixtree_search+0x70>
   128b4:	ldr	r2, [r3]
   128b8:	cmn	r2, #1
   128bc:	movne	r4, r1
   128c0:	bne	12868 <rb_radixtree_search+0x44>
   128c4:	cmp	r7, #0
   128c8:	beq	12890 <rb_radixtree_search+0x6c>
   128cc:	mov	r2, r6
   128d0:	ldr	r1, [r3, #4]
   128d4:	ldr	r0, [r3, #8]
   128d8:	blx	r7
   128dc:	cmp	r0, #0
   128e0:	beq	12890 <rb_radixtree_search+0x6c>
   128e4:	pop	{r4, r5, r6, r7, r8, pc}
   128e8:	mov	r0, r5
   128ec:	pop	{r4, r5, r6, r7, r8, pc}
   128f0:	mov	r0, r3
   128f4:	pop	{r4, r5, r6, r7, r8, pc}

000128f8 <rb_radixtree_foreach_cur>:
   128f8:	cmp	r0, #0
   128fc:	bxeq	lr
   12900:	ldr	r0, [r1, #8]
   12904:	cmp	r0, #0
   12908:	ldrne	r0, [r0, #4]
   1290c:	bx	lr

00012910 <rb_radixtree_foreach_next>:
   12910:	cmp	r0, #0
   12914:	bxeq	lr
   12918:	ldr	r3, [r1, #8]
   1291c:	cmp	r3, #0
   12920:	bxeq	lr
   12924:	ldr	r2, [r1, #12]
   12928:	cmp	r2, #0
   1292c:	str	r2, [r1, #8]
   12930:	bxeq	lr
   12934:	push	{r4, r5, r6, lr}
   12938:	mov	r5, r1
   1293c:	ldrb	r3, [r2, #16]
   12940:	ldr	r4, [r2, #12]
   12944:	subs	r1, r4, #0
   12948:	beq	129c0 <rb_radixtree_foreach_next+0xb0>
   1294c:	add	r3, r3, #1
   12950:	ldr	r4, [r1, r3, lsl #2]
   12954:	cmp	r3, #15
   12958:	cmple	r4, #0
   1295c:	moveq	r0, #1
   12960:	movne	r0, #0
   12964:	beq	1294c <rb_radixtree_foreach_next+0x3c>
   12968:	cmp	r4, #0
   1296c:	beq	12988 <rb_radixtree_foreach_next+0x78>
   12970:	ldr	ip, [r4]
   12974:	cmn	ip, #1
   12978:	movne	r3, r0
   1297c:	bne	12944 <rb_radixtree_foreach_next+0x34>
   12980:	cmp	r2, r4
   12984:	bne	129ac <rb_radixtree_foreach_next+0x9c>
   12988:	mov	r4, r1
   1298c:	cmp	r3, #15
   12990:	ble	12944 <rb_radixtree_foreach_next+0x34>
   12994:	ldrb	r3, [r4, #72]	; 0x48
   12998:	ldr	r4, [r4, #68]	; 0x44
   1299c:	cmp	r4, #0
   129a0:	beq	12944 <rb_radixtree_foreach_next+0x34>
   129a4:	add	r3, r3, #1
   129a8:	b	1298c <rb_radixtree_foreach_next+0x7c>
   129ac:	ldr	r1, [r2, #8]
   129b0:	ldr	r0, [r4, #8]
   129b4:	bl	4d08 <strcmp@plt>
   129b8:	cmp	r0, #0
   129bc:	bge	129cc <rb_radixtree_foreach_next+0xbc>
   129c0:	mov	r3, #0
   129c4:	str	r3, [r5, #12]
   129c8:	pop	{r4, r5, r6, pc}
   129cc:	str	r4, [r5, #12]
   129d0:	pop	{r4, r5, r6, pc}

000129d4 <rb_radixtree_foreach_start>:
   129d4:	cmp	r0, #0
   129d8:	bxeq	lr
   129dc:	ldr	r3, [r0, #4]
   129e0:	cmp	r3, #0
   129e4:	bne	12a50 <rb_radixtree_foreach_start+0x7c>
   129e8:	str	r3, [r1, #12]
   129ec:	ldr	r3, [r1, #12]
   129f0:	cmp	r3, #0
   129f4:	str	r3, [r1, #8]
   129f8:	bxeq	lr
   129fc:	b	4468 <rb_radixtree_foreach_next@plt>
   12a00:	ldr	lr, [r2], #4
   12a04:	cmp	lr, #0
   12a08:	bne	12a24 <rb_radixtree_foreach_start+0x50>
   12a0c:	cmp	r2, ip
   12a10:	bne	12a00 <rb_radixtree_foreach_start+0x2c>
   12a14:	cmn	r4, #1
   12a18:	beq	12a34 <rb_radixtree_foreach_start+0x60>
   12a1c:	add	r2, r3, #4
   12a20:	b	12a00 <rb_radixtree_foreach_start+0x2c>
   12a24:	mov	r3, lr
   12a28:	mov	ip, r3
   12a2c:	ldr	r4, [ip], #68	; 0x44
   12a30:	b	12a14 <rb_radixtree_foreach_start+0x40>
   12a34:	str	r3, [r1, #12]
   12a38:	ldr	r3, [r1, #12]
   12a3c:	cmp	r3, #0
   12a40:	str	r3, [r1, #8]
   12a44:	popeq	{r4, pc}
   12a48:	pop	{r4, lr}
   12a4c:	b	129fc <rb_radixtree_foreach_start+0x28>
   12a50:	push	{r4, lr}
   12a54:	b	12a28 <rb_radixtree_foreach_start+0x54>

00012a58 <rb_radixtree_elem_find>:
   12a58:	push	{r4, r5, r6, r7, r8, lr}
   12a5c:	mov	r4, r0
   12a60:	sub	sp, sp, #256	; 0x100
   12a64:	mov	r0, r1
   12a68:	mov	r8, r1
   12a6c:	mov	r7, r2
   12a70:	bl	4804 <strlen@plt>
   12a74:	ldr	r5, [r4]
   12a78:	cmp	r5, #0
   12a7c:	mov	r6, r0
   12a80:	beq	12aa4 <rb_radixtree_elem_find+0x4c>
   12a84:	cmp	r0, #255	; 0xff
   12a88:	ble	12b08 <rb_radixtree_elem_find+0xb0>
   12a8c:	mov	r0, r8
   12a90:	bl	126a4 <rb_strdup>
   12a94:	ldr	r3, [r4]
   12a98:	mov	r5, r0
   12a9c:	blx	r3
   12aa0:	mov	r8, r5
   12aa4:	ldr	r4, [r4, #4]
   12aa8:	mov	r1, #0
   12aac:	cmp	r4, #0
   12ab0:	beq	12ac0 <rb_radixtree_elem_find+0x68>
   12ab4:	ldr	r2, [r4]
   12ab8:	cmn	r2, #1
   12abc:	bne	12b30 <rb_radixtree_elem_find+0xd8>
   12ac0:	adds	r3, r4, #0
   12ac4:	movne	r3, #1
   12ac8:	cmp	r7, #0
   12acc:	movne	r3, #0
   12ad0:	cmp	r3, #0
   12ad4:	beq	12aec <rb_radixtree_elem_find+0x94>
   12ad8:	ldr	r0, [r4, #8]
   12adc:	mov	r1, r8
   12ae0:	bl	4d08 <strcmp@plt>
   12ae4:	cmp	r0, #0
   12ae8:	movne	r4, #0
   12aec:	cmp	r5, #0
   12af0:	beq	12afc <rb_radixtree_elem_find+0xa4>
   12af4:	mov	r0, r5
   12af8:	bl	126d4 <rb_free>
   12afc:	mov	r0, r4
   12b00:	add	sp, sp, #256	; 0x100
   12b04:	pop	{r4, r5, r6, r7, r8, pc}
   12b08:	mov	r1, r8
   12b0c:	mov	r2, #256	; 0x100
   12b10:	mov	r0, sp
   12b14:	bl	46c0 <rb_strlcpy@plt>
   12b18:	ldr	r3, [r4]
   12b1c:	mov	r0, sp
   12b20:	mov	r8, sp
   12b24:	blx	r3
   12b28:	mov	r5, #0
   12b2c:	b	12aa4 <rb_radixtree_elem_find+0x4c>
   12b30:	add	r3, r2, r2, lsr #31
   12b34:	cmp	r6, r3, asr #1
   12b38:	movle	r3, r1
   12b3c:	ble	12b58 <rb_radixtree_elem_find+0x100>
   12b40:	ldrb	r3, [r8, r3, asr #1]
   12b44:	tst	r2, #1
   12b48:	movne	r2, #0
   12b4c:	moveq	r2, #4
   12b50:	asr	r3, r3, r2
   12b54:	and	r3, r3, #15
   12b58:	add	r4, r4, r3, lsl #2
   12b5c:	ldr	r4, [r4, #4]
   12b60:	b	12aac <rb_radixtree_elem_find+0x54>

00012b64 <rb_radixtree_foreach_start_from>:
   12b64:	cmp	r2, #0
   12b68:	beq	12ba0 <rb_radixtree_foreach_start_from+0x3c>
   12b6c:	push	{r4, r5, r6, lr}
   12b70:	mov	r4, r1
   12b74:	mov	r3, #0
   12b78:	mov	r1, r2
   12b7c:	str	r3, [r4, #8]
   12b80:	mov	r2, #1
   12b84:	mov	r5, r0
   12b88:	bl	4ba0 <rb_radixtree_elem_find@plt>
   12b8c:	mov	r1, r4
   12b90:	str	r0, [r4, #12]
   12b94:	mov	r0, r5
   12b98:	pop	{r4, r5, r6, lr}
   12b9c:	b	4468 <rb_radixtree_foreach_next@plt>
   12ba0:	b	442c <rb_radixtree_foreach_start@plt>

00012ba4 <rb_radixtree_elem_add>:
   12ba4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ba8:	mov	r6, r0
   12bac:	mov	r0, r1
   12bb0:	mov	r4, r1
   12bb4:	mov	sl, r2
   12bb8:	bl	4804 <strlen@plt>
   12bbc:	mov	r9, r0
   12bc0:	mov	r0, r4
   12bc4:	bl	126a4 <rb_strdup>
   12bc8:	subs	r7, r0, #0
   12bcc:	moveq	r0, r7
   12bd0:	beq	12c28 <rb_radixtree_elem_add+0x84>
   12bd4:	ldr	r3, [r6]
   12bd8:	cmp	r3, #0
   12bdc:	beq	12be4 <rb_radixtree_elem_add+0x40>
   12be0:	blx	r3
   12be4:	mov	r4, #0
   12be8:	ldr	r5, [r6, #4]
   12bec:	mov	r8, #18
   12bf0:	mov	r1, r4
   12bf4:	cmp	r5, #0
   12bf8:	beq	12c68 <rb_radixtree_elem_add+0xc4>
   12bfc:	ldr	r3, [r5]
   12c00:	cmn	r3, #1
   12c04:	bne	12c30 <rb_radixtree_elem_add+0x8c>
   12c08:	mov	r1, r7
   12c0c:	ldr	r0, [r5, #8]
   12c10:	bl	4d08 <strcmp@plt>
   12c14:	subs	r9, r0, #0
   12c18:	bne	12c68 <rb_radixtree_elem_add+0xc4>
   12c1c:	mov	r0, r7
   12c20:	bl	126d4 <rb_free>
   12c24:	mov	r0, r9
   12c28:	add	sp, sp, #12
   12c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c30:	add	r2, r3, r3, lsr #31
   12c34:	cmp	r9, r2, asr #1
   12c38:	movle	r8, r1
   12c3c:	ble	12c58 <rb_radixtree_elem_add+0xb4>
   12c40:	ldrb	r8, [r7, r2, asr #1]
   12c44:	tst	r3, #1
   12c48:	movne	r4, #0
   12c4c:	moveq	r4, #4
   12c50:	asr	r8, r8, r4
   12c54:	and	r8, r8, #15
   12c58:	add	r3, r5, r8, lsl #2
   12c5c:	mov	r4, r5
   12c60:	ldr	r5, [r3, #4]
   12c64:	b	12bf4 <rb_radixtree_elem_add+0x50>
   12c68:	cmp	r4, #0
   12c6c:	clz	r3, r5
   12c70:	lsr	r3, r3, #5
   12c74:	moveq	r3, #0
   12c78:	cmp	r3, #0
   12c7c:	beq	12cbc <rb_radixtree_elem_add+0x118>
   12c80:	mov	r5, r4
   12c84:	mov	r2, r5
   12c88:	ldr	r0, [r2], #68	; 0x44
   12c8c:	b	12ca4 <rb_radixtree_elem_add+0x100>
   12c90:	ldr	r1, [r3], #4
   12c94:	cmp	r1, #0
   12c98:	bne	12cb4 <rb_radixtree_elem_add+0x110>
   12c9c:	cmp	r2, r3
   12ca0:	bne	12c90 <rb_radixtree_elem_add+0xec>
   12ca4:	cmn	r0, #1
   12ca8:	beq	12cc4 <rb_radixtree_elem_add+0x120>
   12cac:	add	r3, r5, #4
   12cb0:	b	12c90 <rb_radixtree_elem_add+0xec>
   12cb4:	mov	r5, r1
   12cb8:	b	12c84 <rb_radixtree_elem_add+0xe0>
   12cbc:	cmp	r5, #0
   12cc0:	beq	12e08 <rb_radixtree_elem_add+0x264>
   12cc4:	ldr	r0, [r5, #8]
   12cc8:	mov	fp, #0
   12ccc:	ldrb	r1, [r7, fp, asr #1]
   12cd0:	tst	fp, #1
   12cd4:	movne	r9, #0
   12cd8:	moveq	r9, #4
   12cdc:	ldrb	ip, [r0, fp, asr #1]
   12ce0:	asr	r1, r1, r9
   12ce4:	asr	r3, fp, #1
   12ce8:	eor	r1, r1, ip, asr r9
   12cec:	tst	r1, #15
   12cf0:	add	r2, r7, r3
   12cf4:	beq	12e50 <rb_radixtree_elem_add+0x2ac>
   12cf8:	cmp	r4, #0
   12cfc:	beq	12d10 <rb_radixtree_elem_add+0x16c>
   12d00:	ldr	r1, [r4]
   12d04:	cmp	fp, r1
   12d08:	blt	12e58 <rb_radixtree_elem_add+0x2b4>
   12d0c:	ble	12db0 <rb_radixtree_elem_add+0x20c>
   12d10:	mov	r0, #76	; 0x4c
   12d14:	str	r2, [sp, #4]
   12d18:	str	r3, [sp]
   12d1c:	bl	12688 <rb_malloc>
   12d20:	ldr	r2, [sp, #4]
   12d24:	ldr	r3, [sp]
   12d28:	mov	lr, #0
   12d2c:	add	r1, r0, #4
   12d30:	add	ip, r0, #68	; 0x44
   12d34:	str	fp, [r0]
   12d38:	str	r4, [r0, #68]	; 0x44
   12d3c:	strb	r8, [r0, #72]	; 0x48
   12d40:	str	lr, [r1], #4
   12d44:	cmp	ip, r1
   12d48:	bne	12d40 <rb_radixtree_elem_add+0x19c>
   12d4c:	cmp	r4, #0
   12d50:	ldr	r1, [r5, #8]
   12d54:	bne	12e64 <rb_radixtree_elem_add+0x2c0>
   12d58:	ldrb	r1, [r1, r3]
   12d5c:	ldr	ip, [r6, #4]
   12d60:	asr	r1, r1, r9
   12d64:	and	r1, r1, #15
   12d68:	add	r1, r0, r1, lsl #2
   12d6c:	str	ip, [r1, #4]
   12d70:	ldr	r1, [ip]
   12d74:	cmn	r1, #1
   12d78:	streq	r0, [ip, #12]
   12d7c:	strne	r0, [ip, #68]	; 0x44
   12d80:	ldreq	r1, [r5, #8]
   12d84:	ldrne	r1, [r5, #8]
   12d88:	ldrbeq	r3, [r1, r3]
   12d8c:	ldrbne	r3, [r1, r3]
   12d90:	asreq	r3, r3, r9
   12d94:	asrne	r3, r3, r9
   12d98:	andeq	r3, r3, #15
   12d9c:	andne	r3, r3, #15
   12da0:	strbeq	r3, [ip, #16]
   12da4:	strbne	r3, [ip, #72]	; 0x48
   12da8:	str	r0, [r6, #4]
   12dac:	mov	r4, r0
   12db0:	ldrb	r3, [r2]
   12db4:	mov	r0, #20
   12db8:	asr	r9, r3, r9
   12dbc:	bl	12688 <rb_malloc>
   12dc0:	and	r9, r9, #15
   12dc4:	mvn	r2, #0
   12dc8:	add	r3, r4, r9, lsl #2
   12dcc:	str	r0, [r3, #4]
   12dd0:	str	r2, [r0]
   12dd4:	ldr	r2, [r3, #4]
   12dd8:	str	sl, [r2, #4]
   12ddc:	ldr	r2, [r3, #4]
   12de0:	str	r7, [r2, #8]
   12de4:	ldr	r2, [r3, #4]
   12de8:	str	r4, [r2, #12]
   12dec:	ldr	r2, [r3, #4]
   12df0:	strb	r9, [r2, #16]
   12df4:	ldr	r2, [r6, #8]
   12df8:	ldr	r0, [r3, #4]
   12dfc:	add	r2, r2, #1
   12e00:	str	r2, [r6, #8]
   12e04:	b	12c28 <rb_radixtree_elem_add+0x84>
   12e08:	mov	r0, #20
   12e0c:	bl	12688 <rb_malloc>
   12e10:	mvn	r3, #0
   12e14:	str	r0, [r6, #4]
   12e18:	str	r3, [r0]
   12e1c:	ldr	r3, [r6, #4]
   12e20:	str	sl, [r3, #4]
   12e24:	ldr	r3, [r6, #4]
   12e28:	str	r7, [r3, #8]
   12e2c:	ldr	r3, [r6, #4]
   12e30:	str	r4, [r3, #12]
   12e34:	ldr	r3, [r6, #4]
   12e38:	strb	r8, [r3, #16]
   12e3c:	ldr	r3, [r6, #8]
   12e40:	ldr	r0, [r6, #4]
   12e44:	add	r3, r3, #1
   12e48:	str	r3, [r6, #8]
   12e4c:	b	12c28 <rb_radixtree_elem_add+0x84>
   12e50:	add	fp, fp, #1
   12e54:	b	12ccc <rb_radixtree_elem_add+0x128>
   12e58:	ldrb	r8, [r4, #72]	; 0x48
   12e5c:	ldr	r4, [r4, #68]	; 0x44
   12e60:	b	12cf8 <rb_radixtree_elem_add+0x154>
   12e64:	ldrb	r1, [r1, r3]
   12e68:	add	r4, r4, r8, lsl #2
   12e6c:	ldr	ip, [r4, #4]
   12e70:	asr	r1, r1, r9
   12e74:	and	r1, r1, #15
   12e78:	add	r1, r0, r1, lsl #2
   12e7c:	str	ip, [r1, #4]
   12e80:	ldr	r1, [r4, #4]
   12e84:	ldr	ip, [r1]
   12e88:	cmn	ip, #1
   12e8c:	bne	12eb4 <rb_radixtree_elem_add+0x310>
   12e90:	str	r0, [r1, #12]
   12e94:	ldr	ip, [r5, #8]
   12e98:	ldr	r1, [r4, #4]
   12e9c:	ldrb	r3, [ip, r3]
   12ea0:	asr	r3, r3, r9
   12ea4:	and	r3, r3, #15
   12ea8:	strb	r3, [r1, #16]
   12eac:	str	r0, [r4, #4]
   12eb0:	b	12dac <rb_radixtree_elem_add+0x208>
   12eb4:	str	r0, [r1, #68]	; 0x44
   12eb8:	ldr	ip, [r5, #8]
   12ebc:	ldrb	r3, [ip, r3]
   12ec0:	asr	r3, r3, r9
   12ec4:	and	r3, r3, #15
   12ec8:	strb	r3, [r1, #72]	; 0x48
   12ecc:	b	12eac <rb_radixtree_elem_add+0x308>

00012ed0 <rb_radixtree_add>:
   12ed0:	push	{r4, lr}
   12ed4:	bl	4738 <rb_radixtree_elem_add@plt>
   12ed8:	adds	r0, r0, #0
   12edc:	movne	r0, #1
   12ee0:	pop	{r4, pc}

00012ee4 <rb_radixtree_elem_delete>:
   12ee4:	push	{r4, r5, r6, r7, r8, lr}
   12ee8:	mov	r6, r1
   12eec:	ldr	r4, [r1, #12]
   12ef0:	mov	r5, r0
   12ef4:	ldr	r0, [r1, #8]
   12ef8:	ldrb	r7, [r1, #16]
   12efc:	bl	126d4 <rb_free>
   12f00:	mov	r0, r6
   12f04:	bl	126d4 <rb_free>
   12f08:	cmp	r4, #0
   12f0c:	streq	r4, [r5, #4]
   12f10:	beq	12f94 <rb_radixtree_elem_delete+0xb0>
   12f14:	add	r7, r4, r7, lsl #2
   12f18:	add	r1, r4, #4
   12f1c:	mvn	r2, #0
   12f20:	mov	r3, #0
   12f24:	str	r3, [r7, #4]
   12f28:	ldr	r0, [r1], #4
   12f2c:	cmp	r0, #0
   12f30:	beq	12f40 <rb_radixtree_elem_delete+0x5c>
   12f34:	cmn	r2, #1
   12f38:	moveq	r2, r3
   12f3c:	mvnne	r2, #1
   12f40:	add	r3, r3, #1
   12f44:	cmp	r3, #16
   12f48:	bne	12f28 <rb_radixtree_elem_delete+0x44>
   12f4c:	cmp	r2, #0
   12f50:	blt	12f94 <rb_radixtree_elem_delete+0xb0>
   12f54:	add	r2, r4, r2, lsl #2
   12f58:	ldrb	r1, [r4, #72]	; 0x48
   12f5c:	ldr	r3, [r2, #4]
   12f60:	ldr	r2, [r4, #68]	; 0x44
   12f64:	cmp	r2, #0
   12f68:	addne	r0, r2, r1, lsl #2
   12f6c:	streq	r3, [r5, #4]
   12f70:	strne	r3, [r0, #4]
   12f74:	ldr	r0, [r3]
   12f78:	cmn	r0, #1
   12f7c:	streq	r2, [r3, #12]
   12f80:	strbeq	r1, [r3, #16]
   12f84:	strne	r2, [r3, #68]	; 0x44
   12f88:	strbne	r1, [r3, #72]	; 0x48
   12f8c:	mov	r0, r4
   12f90:	bl	126d4 <rb_free>
   12f94:	ldr	r3, [r5, #8]
   12f98:	sub	r3, r3, #1
   12f9c:	cmp	r3, #0
   12fa0:	str	r3, [r5, #8]
   12fa4:	streq	r3, [r5, #4]
   12fa8:	pop	{r4, r5, r6, r7, r8, pc}

00012fac <rb_radixtree_delete>:
   12fac:	push	{r4, r5, r6, lr}
   12fb0:	mov	r2, #0
   12fb4:	mov	r5, r0
   12fb8:	bl	4ba0 <rb_radixtree_elem_find@plt>
   12fbc:	subs	r1, r0, #0
   12fc0:	moveq	r4, r1
   12fc4:	beq	12fd4 <rb_radixtree_delete+0x28>
   12fc8:	mov	r0, r5
   12fcc:	ldr	r4, [r1, #4]
   12fd0:	bl	43cc <rb_radixtree_elem_delete@plt>
   12fd4:	mov	r0, r4
   12fd8:	pop	{r4, r5, r6, pc}

00012fdc <rb_radixtree_destroy>:
   12fdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   12fe0:	sub	sp, sp, #44	; 0x2c
   12fe4:	ldr	r7, [pc, #192]	; 130ac <rb_radixtree_destroy+0xd0>
   12fe8:	mov	r8, r1
   12fec:	mov	r1, sp
   12ff0:	add	r7, pc, r7
   12ff4:	mov	r4, r0
   12ff8:	mov	r9, r2
   12ffc:	mov	r5, sp
   13000:	bl	442c <rb_radixtree_foreach_start@plt>
   13004:	mov	r1, r5
   13008:	mov	r0, r4
   1300c:	bl	47c8 <rb_radixtree_foreach_cur@plt>
   13010:	cmp	r0, #0
   13014:	bne	13074 <rb_radixtree_destroy+0x98>
   13018:	ldr	r3, [pc, #144]	; 130b0 <rb_radixtree_destroy+0xd4>
   1301c:	ldr	r2, [r4, #24]
   13020:	ldr	r1, [r4, #20]
   13024:	ldr	r3, [r7, r3]
   13028:	cmp	r2, #0
   1302c:	strne	r1, [r2, #4]
   13030:	streq	r1, [r3, #4]
   13034:	ldr	r1, [r4, #20]
   13038:	ldr	r0, [r4, #12]
   1303c:	cmp	r1, #0
   13040:	strne	r2, [r1, #8]
   13044:	streq	r2, [r3]
   13048:	mov	r2, #0
   1304c:	str	r2, [r4, #20]
   13050:	str	r2, [r4, #24]
   13054:	ldr	r2, [r3, #8]
   13058:	sub	r2, r2, #1
   1305c:	str	r2, [r3, #8]
   13060:	bl	126d4 <rb_free>
   13064:	mov	r0, r4
   13068:	bl	126d4 <rb_free>
   1306c:	add	sp, sp, #44	; 0x2c
   13070:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13074:	cmp	r8, #0
   13078:	ldr	r6, [sp, #8]
   1307c:	beq	13090 <rb_radixtree_destroy+0xb4>
   13080:	mov	r2, r9
   13084:	ldr	r1, [r6, #4]
   13088:	ldr	r0, [r6, #8]
   1308c:	blx	r8
   13090:	ldr	r1, [r6, #8]
   13094:	mov	r0, r4
   13098:	bl	4cf0 <rb_radixtree_delete@plt>
   1309c:	mov	r1, r5
   130a0:	mov	r0, r4
   130a4:	bl	4468 <rb_radixtree_foreach_next@plt>
   130a8:	b	13004 <rb_radixtree_destroy+0x28>
   130ac:	.word	0x00013008
   130b0:	.word	0x000003f8

000130b4 <rb_radixtree_retrieve>:
   130b4:	push	{r4, lr}
   130b8:	mov	r2, #0
   130bc:	bl	4ba0 <rb_radixtree_elem_find@plt>
   130c0:	cmp	r0, #0
   130c4:	ldrne	r0, [r0, #4]
   130c8:	pop	{r4, pc}

000130cc <rb_radixtree_elem_get_key>:
   130cc:	ldr	r0, [r0, #8]
   130d0:	bx	lr

000130d4 <rb_radixtree_elem_set_data>:
   130d4:	str	r1, [r0, #4]
   130d8:	bx	lr

000130dc <rb_radixtree_elem_get_data>:
   130dc:	ldr	r0, [r0, #4]
   130e0:	bx	lr

000130e4 <rb_radixtree_size>:
   130e4:	ldr	r0, [r0, #8]
   130e8:	bx	lr

000130ec <rb_radixtree_stats>:
   130ec:	ldr	r3, [r0, #8]
   130f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   130f4:	mov	r7, r1
   130f8:	sub	sp, sp, #292	; 0x124
   130fc:	mov	r1, #0
   13100:	cmp	r3, r1
   13104:	mov	r4, r0
   13108:	mov	r8, r2
   1310c:	str	r1, [sp, #28]
   13110:	add	r5, sp, #32
   13114:	beq	1317c <rb_radixtree_stats+0x90>
   13118:	add	r2, sp, #28
   1311c:	ldr	r0, [r0, #4]
   13120:	bl	12628 <stats_recurse>
   13124:	ldr	r6, [r4, #8]
   13128:	ldr	r3, [sp, #28]
   1312c:	mov	r1, r6
   13130:	str	r3, [sp, #16]
   13134:	mov	r9, r0
   13138:	bl	13210 <__udivsi3>
   1313c:	ldr	r3, [pc, #108]	; 131b0 <rb_radixtree_stats+0xc4>
   13140:	ldr	r2, [pc, #108]	; 131b4 <rb_radixtree_stats+0xc8>
   13144:	add	r3, pc, r3
   13148:	str	r3, [sp]
   1314c:	ldr	r3, [r4, #12]
   13150:	add	r2, pc, r2
   13154:	stmib	sp, {r6, r9}
   13158:	str	r0, [sp, #12]
   1315c:	mov	r1, #256	; 0x100
   13160:	mov	r0, r5
   13164:	bl	4bdc <snprintf@plt>
   13168:	mov	r1, r8
   1316c:	mov	r0, r5
   13170:	blx	r7
   13174:	add	sp, sp, #292	; 0x124
   13178:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1317c:	ldr	r3, [pc, #52]	; 131b8 <rb_radixtree_stats+0xcc>
   13180:	ldr	r2, [pc, #52]	; 131bc <rb_radixtree_stats+0xd0>
   13184:	add	r3, pc, r3
   13188:	str	r3, [sp, #16]
   1318c:	str	r3, [sp, #12]
   13190:	str	r3, [sp, #8]
   13194:	str	r3, [sp, #4]
   13198:	ldr	r3, [pc, #32]	; 131c0 <rb_radixtree_stats+0xd4>
   1319c:	add	r2, pc, r2
   131a0:	add	r3, pc, r3
   131a4:	str	r3, [sp]
   131a8:	ldr	r3, [r0, #12]
   131ac:	b	1315c <rb_radixtree_stats+0x70>
   131b0:	.word	0x00001fc8
   131b4:	.word	0x00001f6f
   131b8:	.word	0x000010da
   131bc:	.word	0x00001f4c
   131c0:	.word	0x00001f6c

000131c4 <rb_radixtree_stats_walk>:
   131c4:	ldr	r3, [pc, #60]	; 13208 <rb_radixtree_stats_walk+0x44>
   131c8:	ldr	r2, [pc, #60]	; 1320c <rb_radixtree_stats_walk+0x48>
   131cc:	add	r3, pc, r3
   131d0:	push	{r4, r5, r6, lr}
   131d4:	mov	r5, r0
   131d8:	ldr	r3, [r3, r2]
   131dc:	mov	r6, r1
   131e0:	ldr	r4, [r3]
   131e4:	cmp	r4, #0
   131e8:	bne	131f0 <rb_radixtree_stats_walk+0x2c>
   131ec:	pop	{r4, r5, r6, pc}
   131f0:	ldr	r0, [r4]
   131f4:	mov	r2, r6
   131f8:	mov	r1, r5
   131fc:	bl	4660 <rb_radixtree_stats@plt>
   13200:	ldr	r4, [r4, #8]
   13204:	b	131e4 <rb_radixtree_stats_walk+0x20>
   13208:	.word	0x00012e2c
   1320c:	.word	0x000003f8

00013210 <__udivsi3>:
   13210:	subs	r2, r1, #1
   13214:	bxeq	lr
   13218:	bcc	133f0 <__udivsi3+0x1e0>
   1321c:	cmp	r0, r1
   13220:	bls	133d4 <__udivsi3+0x1c4>
   13224:	tst	r1, r2
   13228:	beq	133e0 <__udivsi3+0x1d0>
   1322c:	clz	r3, r0
   13230:	clz	r2, r1
   13234:	sub	r3, r2, r3
   13238:	rsbs	r3, r3, #31
   1323c:	addne	r3, r3, r3, lsl #1
   13240:	mov	r2, #0
   13244:	addne	pc, pc, r3, lsl #2
   13248:	nop			; (mov r0, r0)
   1324c:	cmp	r0, r1, lsl #31
   13250:	adc	r2, r2, r2
   13254:	subcs	r0, r0, r1, lsl #31
   13258:	cmp	r0, r1, lsl #30
   1325c:	adc	r2, r2, r2
   13260:	subcs	r0, r0, r1, lsl #30
   13264:	cmp	r0, r1, lsl #29
   13268:	adc	r2, r2, r2
   1326c:	subcs	r0, r0, r1, lsl #29
   13270:	cmp	r0, r1, lsl #28
   13274:	adc	r2, r2, r2
   13278:	subcs	r0, r0, r1, lsl #28
   1327c:	cmp	r0, r1, lsl #27
   13280:	adc	r2, r2, r2
   13284:	subcs	r0, r0, r1, lsl #27
   13288:	cmp	r0, r1, lsl #26
   1328c:	adc	r2, r2, r2
   13290:	subcs	r0, r0, r1, lsl #26
   13294:	cmp	r0, r1, lsl #25
   13298:	adc	r2, r2, r2
   1329c:	subcs	r0, r0, r1, lsl #25
   132a0:	cmp	r0, r1, lsl #24
   132a4:	adc	r2, r2, r2
   132a8:	subcs	r0, r0, r1, lsl #24
   132ac:	cmp	r0, r1, lsl #23
   132b0:	adc	r2, r2, r2
   132b4:	subcs	r0, r0, r1, lsl #23
   132b8:	cmp	r0, r1, lsl #22
   132bc:	adc	r2, r2, r2
   132c0:	subcs	r0, r0, r1, lsl #22
   132c4:	cmp	r0, r1, lsl #21
   132c8:	adc	r2, r2, r2
   132cc:	subcs	r0, r0, r1, lsl #21
   132d0:	cmp	r0, r1, lsl #20
   132d4:	adc	r2, r2, r2
   132d8:	subcs	r0, r0, r1, lsl #20
   132dc:	cmp	r0, r1, lsl #19
   132e0:	adc	r2, r2, r2
   132e4:	subcs	r0, r0, r1, lsl #19
   132e8:	cmp	r0, r1, lsl #18
   132ec:	adc	r2, r2, r2
   132f0:	subcs	r0, r0, r1, lsl #18
   132f4:	cmp	r0, r1, lsl #17
   132f8:	adc	r2, r2, r2
   132fc:	subcs	r0, r0, r1, lsl #17
   13300:	cmp	r0, r1, lsl #16
   13304:	adc	r2, r2, r2
   13308:	subcs	r0, r0, r1, lsl #16
   1330c:	cmp	r0, r1, lsl #15
   13310:	adc	r2, r2, r2
   13314:	subcs	r0, r0, r1, lsl #15
   13318:	cmp	r0, r1, lsl #14
   1331c:	adc	r2, r2, r2
   13320:	subcs	r0, r0, r1, lsl #14
   13324:	cmp	r0, r1, lsl #13
   13328:	adc	r2, r2, r2
   1332c:	subcs	r0, r0, r1, lsl #13
   13330:	cmp	r0, r1, lsl #12
   13334:	adc	r2, r2, r2
   13338:	subcs	r0, r0, r1, lsl #12
   1333c:	cmp	r0, r1, lsl #11
   13340:	adc	r2, r2, r2
   13344:	subcs	r0, r0, r1, lsl #11
   13348:	cmp	r0, r1, lsl #10
   1334c:	adc	r2, r2, r2
   13350:	subcs	r0, r0, r1, lsl #10
   13354:	cmp	r0, r1, lsl #9
   13358:	adc	r2, r2, r2
   1335c:	subcs	r0, r0, r1, lsl #9
   13360:	cmp	r0, r1, lsl #8
   13364:	adc	r2, r2, r2
   13368:	subcs	r0, r0, r1, lsl #8
   1336c:	cmp	r0, r1, lsl #7
   13370:	adc	r2, r2, r2
   13374:	subcs	r0, r0, r1, lsl #7
   13378:	cmp	r0, r1, lsl #6
   1337c:	adc	r2, r2, r2
   13380:	subcs	r0, r0, r1, lsl #6
   13384:	cmp	r0, r1, lsl #5
   13388:	adc	r2, r2, r2
   1338c:	subcs	r0, r0, r1, lsl #5
   13390:	cmp	r0, r1, lsl #4
   13394:	adc	r2, r2, r2
   13398:	subcs	r0, r0, r1, lsl #4
   1339c:	cmp	r0, r1, lsl #3
   133a0:	adc	r2, r2, r2
   133a4:	subcs	r0, r0, r1, lsl #3
   133a8:	cmp	r0, r1, lsl #2
   133ac:	adc	r2, r2, r2
   133b0:	subcs	r0, r0, r1, lsl #2
   133b4:	cmp	r0, r1, lsl #1
   133b8:	adc	r2, r2, r2
   133bc:	subcs	r0, r0, r1, lsl #1
   133c0:	cmp	r0, r1
   133c4:	adc	r2, r2, r2
   133c8:	subcs	r0, r0, r1
   133cc:	mov	r0, r2
   133d0:	bx	lr
   133d4:	moveq	r0, #1
   133d8:	movne	r0, #0
   133dc:	bx	lr
   133e0:	clz	r2, r1
   133e4:	rsb	r2, r2, #31
   133e8:	lsr	r0, r0, r2
   133ec:	bx	lr
   133f0:	cmp	r0, #0
   133f4:	mvnne	r0, #0
   133f8:	b	1365c <__aeabi_idiv0>

000133fc <__aeabi_uidivmod>:
   133fc:	cmp	r1, #0
   13400:	beq	133f0 <__udivsi3+0x1e0>
   13404:	push	{r0, r1, lr}
   13408:	bl	13210 <__udivsi3>
   1340c:	pop	{r1, r2, lr}
   13410:	mul	r3, r2, r0
   13414:	sub	r1, r1, r3
   13418:	bx	lr

0001341c <__divsi3>:
   1341c:	cmp	r1, #0
   13420:	beq	1362c <.divsi3_skip_div0_test+0x208>

00013424 <.divsi3_skip_div0_test>:
   13424:	eor	ip, r0, r1
   13428:	rsbmi	r1, r1, #0
   1342c:	subs	r2, r1, #1
   13430:	beq	135f8 <.divsi3_skip_div0_test+0x1d4>
   13434:	movs	r3, r0
   13438:	rsbmi	r3, r0, #0
   1343c:	cmp	r3, r1
   13440:	bls	13604 <.divsi3_skip_div0_test+0x1e0>
   13444:	tst	r1, r2
   13448:	beq	13614 <.divsi3_skip_div0_test+0x1f0>
   1344c:	clz	r2, r3
   13450:	clz	r0, r1
   13454:	sub	r2, r0, r2
   13458:	rsbs	r2, r2, #31
   1345c:	addne	r2, r2, r2, lsl #1
   13460:	mov	r0, #0
   13464:	addne	pc, pc, r2, lsl #2
   13468:	nop			; (mov r0, r0)
   1346c:	cmp	r3, r1, lsl #31
   13470:	adc	r0, r0, r0
   13474:	subcs	r3, r3, r1, lsl #31
   13478:	cmp	r3, r1, lsl #30
   1347c:	adc	r0, r0, r0
   13480:	subcs	r3, r3, r1, lsl #30
   13484:	cmp	r3, r1, lsl #29
   13488:	adc	r0, r0, r0
   1348c:	subcs	r3, r3, r1, lsl #29
   13490:	cmp	r3, r1, lsl #28
   13494:	adc	r0, r0, r0
   13498:	subcs	r3, r3, r1, lsl #28
   1349c:	cmp	r3, r1, lsl #27
   134a0:	adc	r0, r0, r0
   134a4:	subcs	r3, r3, r1, lsl #27
   134a8:	cmp	r3, r1, lsl #26
   134ac:	adc	r0, r0, r0
   134b0:	subcs	r3, r3, r1, lsl #26
   134b4:	cmp	r3, r1, lsl #25
   134b8:	adc	r0, r0, r0
   134bc:	subcs	r3, r3, r1, lsl #25
   134c0:	cmp	r3, r1, lsl #24
   134c4:	adc	r0, r0, r0
   134c8:	subcs	r3, r3, r1, lsl #24
   134cc:	cmp	r3, r1, lsl #23
   134d0:	adc	r0, r0, r0
   134d4:	subcs	r3, r3, r1, lsl #23
   134d8:	cmp	r3, r1, lsl #22
   134dc:	adc	r0, r0, r0
   134e0:	subcs	r3, r3, r1, lsl #22
   134e4:	cmp	r3, r1, lsl #21
   134e8:	adc	r0, r0, r0
   134ec:	subcs	r3, r3, r1, lsl #21
   134f0:	cmp	r3, r1, lsl #20
   134f4:	adc	r0, r0, r0
   134f8:	subcs	r3, r3, r1, lsl #20
   134fc:	cmp	r3, r1, lsl #19
   13500:	adc	r0, r0, r0
   13504:	subcs	r3, r3, r1, lsl #19
   13508:	cmp	r3, r1, lsl #18
   1350c:	adc	r0, r0, r0
   13510:	subcs	r3, r3, r1, lsl #18
   13514:	cmp	r3, r1, lsl #17
   13518:	adc	r0, r0, r0
   1351c:	subcs	r3, r3, r1, lsl #17
   13520:	cmp	r3, r1, lsl #16
   13524:	adc	r0, r0, r0
   13528:	subcs	r3, r3, r1, lsl #16
   1352c:	cmp	r3, r1, lsl #15
   13530:	adc	r0, r0, r0
   13534:	subcs	r3, r3, r1, lsl #15
   13538:	cmp	r3, r1, lsl #14
   1353c:	adc	r0, r0, r0
   13540:	subcs	r3, r3, r1, lsl #14
   13544:	cmp	r3, r1, lsl #13
   13548:	adc	r0, r0, r0
   1354c:	subcs	r3, r3, r1, lsl #13
   13550:	cmp	r3, r1, lsl #12
   13554:	adc	r0, r0, r0
   13558:	subcs	r3, r3, r1, lsl #12
   1355c:	cmp	r3, r1, lsl #11
   13560:	adc	r0, r0, r0
   13564:	subcs	r3, r3, r1, lsl #11
   13568:	cmp	r3, r1, lsl #10
   1356c:	adc	r0, r0, r0
   13570:	subcs	r3, r3, r1, lsl #10
   13574:	cmp	r3, r1, lsl #9
   13578:	adc	r0, r0, r0
   1357c:	subcs	r3, r3, r1, lsl #9
   13580:	cmp	r3, r1, lsl #8
   13584:	adc	r0, r0, r0
   13588:	subcs	r3, r3, r1, lsl #8
   1358c:	cmp	r3, r1, lsl #7
   13590:	adc	r0, r0, r0
   13594:	subcs	r3, r3, r1, lsl #7
   13598:	cmp	r3, r1, lsl #6
   1359c:	adc	r0, r0, r0
   135a0:	subcs	r3, r3, r1, lsl #6
   135a4:	cmp	r3, r1, lsl #5
   135a8:	adc	r0, r0, r0
   135ac:	subcs	r3, r3, r1, lsl #5
   135b0:	cmp	r3, r1, lsl #4
   135b4:	adc	r0, r0, r0
   135b8:	subcs	r3, r3, r1, lsl #4
   135bc:	cmp	r3, r1, lsl #3
   135c0:	adc	r0, r0, r0
   135c4:	subcs	r3, r3, r1, lsl #3
   135c8:	cmp	r3, r1, lsl #2
   135cc:	adc	r0, r0, r0
   135d0:	subcs	r3, r3, r1, lsl #2
   135d4:	cmp	r3, r1, lsl #1
   135d8:	adc	r0, r0, r0
   135dc:	subcs	r3, r3, r1, lsl #1
   135e0:	cmp	r3, r1
   135e4:	adc	r0, r0, r0
   135e8:	subcs	r3, r3, r1
   135ec:	cmp	ip, #0
   135f0:	rsbmi	r0, r0, #0
   135f4:	bx	lr
   135f8:	teq	ip, r0
   135fc:	rsbmi	r0, r0, #0
   13600:	bx	lr
   13604:	movcc	r0, #0
   13608:	asreq	r0, ip, #31
   1360c:	orreq	r0, r0, #1
   13610:	bx	lr
   13614:	clz	r2, r1
   13618:	rsb	r2, r2, #31
   1361c:	cmp	ip, #0
   13620:	lsr	r0, r3, r2
   13624:	rsbmi	r0, r0, #0
   13628:	bx	lr
   1362c:	cmp	r0, #0
   13630:	mvngt	r0, #-2147483648	; 0x80000000
   13634:	movlt	r0, #-2147483648	; 0x80000000
   13638:	b	1365c <__aeabi_idiv0>

0001363c <__aeabi_idivmod>:
   1363c:	cmp	r1, #0
   13640:	beq	1362c <.divsi3_skip_div0_test+0x208>
   13644:	push	{r0, r1, lr}
   13648:	bl	13424 <.divsi3_skip_div0_test>
   1364c:	pop	{r1, r2, lr}
   13650:	mul	r3, r2, r0
   13654:	sub	r1, r1, r3
   13658:	bx	lr

0001365c <__aeabi_idiv0>:
   1365c:	push	{r1, lr}
   13660:	mov	r0, #8
   13664:	bl	490c <raise@plt>
   13668:	pop	{r1, pc}

0001366c <__stat>:
   1366c:	mov	r2, r1
   13670:	mov	r1, r0
   13674:	mov	r0, #3
   13678:	b	44b0 <__xstat@plt>

0001367c <__fstat>:
   1367c:	mov	r2, r1
   13680:	mov	r1, r0
   13684:	mov	r0, #3
   13688:	b	4b88 <__fxstat@plt>

Disassembly of section .fini:

0001368c <_fini>:
   1368c:	push	{r3, lr}
   13690:	pop	{r3, pc}
