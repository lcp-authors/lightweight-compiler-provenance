
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	1124c <__assert_fail@plt+0x48>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	fp, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <fputs_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <raise@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <strcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <fflush@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <ferror@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <_exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <memcpy@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <__strtoull_internal@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <mbsinit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <strtold@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <fwrite_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <memcmp@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <fputc_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <iswprint@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <__fxstat64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__fpending@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <mbrtowc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <error@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <strtof@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <puts@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #28]!

00011060 <malloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #20]!

0001106c <__libc_start_main@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #12]!

00011078 <__vfprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #4]!

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <strchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <__sprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <__cxa_atexit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <setvbuf@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <memset@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <fgetc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__printf_chk@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <strtod@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <__overflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <__fread_unlocked_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <localeconv@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <clearerr_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <fopen64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <bindtextdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <fread_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <strncmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <abort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <__snprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <__assert_fail@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

Disassembly of section .text:

00011210 <.text>:
   11210:	mov	fp, #0
   11214:	mov	lr, #0
   11218:	pop	{r1}		; (ldr r1, [sp], #4)
   1121c:	mov	r2, sp
   11220:	push	{r2}		; (str r2, [sp, #-4]!)
   11224:	push	{r0}		; (str r0, [sp, #-4]!)
   11228:	ldr	ip, [pc, #16]	; 11240 <__assert_fail@plt+0x3c>
   1122c:	push	{ip}		; (str ip, [sp, #-4]!)
   11230:	ldr	r0, [pc, #12]	; 11244 <__assert_fail@plt+0x40>
   11234:	ldr	r3, [pc, #12]	; 11248 <__assert_fail@plt+0x44>
   11238:	bl	1106c <__libc_start_main@plt>
   1123c:	bl	111ec <abort@plt>
   11240:	andeq	r9, r1, r4, asr #20
   11244:	muleq	r1, r4, sl
   11248:	andeq	r9, r1, r4, ror #19
   1124c:	ldr	r3, [pc, #20]	; 11268 <__assert_fail@plt+0x64>
   11250:	ldr	r2, [pc, #20]	; 1126c <__assert_fail@plt+0x68>
   11254:	add	r3, pc, r3
   11258:	ldr	r2, [r3, r2]
   1125c:	cmp	r2, #0
   11260:	bxeq	lr
   11264:	b	11090 <__gmon_start__@plt>
   11268:	andeq	sl, r1, r4, lsr #27
   1126c:	andeq	r0, r0, ip, lsl #2
   11270:	ldr	r0, [pc, #24]	; 11290 <__assert_fail@plt+0x8c>
   11274:	ldr	r3, [pc, #24]	; 11294 <__assert_fail@plt+0x90>
   11278:	cmp	r3, r0
   1127c:	bxeq	lr
   11280:	ldr	r3, [pc, #16]	; 11298 <__assert_fail@plt+0x94>
   11284:	cmp	r3, #0
   11288:	bxeq	lr
   1128c:	bx	r3
   11290:	andeq	ip, r2, r8, ror #2
   11294:	andeq	ip, r2, r8, ror #2
   11298:	andeq	r0, r0, r0
   1129c:	ldr	r0, [pc, #36]	; 112c8 <__assert_fail@plt+0xc4>
   112a0:	ldr	r1, [pc, #36]	; 112cc <__assert_fail@plt+0xc8>
   112a4:	sub	r1, r1, r0
   112a8:	asr	r1, r1, #2
   112ac:	add	r1, r1, r1, lsr #31
   112b0:	asrs	r1, r1, #1
   112b4:	bxeq	lr
   112b8:	ldr	r3, [pc, #16]	; 112d0 <__assert_fail@plt+0xcc>
   112bc:	cmp	r3, #0
   112c0:	bxeq	lr
   112c4:	bx	r3
   112c8:	andeq	ip, r2, r8, ror #2
   112cc:	andeq	ip, r2, r8, ror #2
   112d0:	andeq	r0, r0, r0
   112d4:	push	{r4, lr}
   112d8:	ldr	r4, [pc, #24]	; 112f8 <__assert_fail@plt+0xf4>
   112dc:	ldrb	r3, [r4]
   112e0:	cmp	r3, #0
   112e4:	popne	{r4, pc}
   112e8:	bl	11270 <__assert_fail@plt+0x6c>
   112ec:	mov	r3, #1
   112f0:	strb	r3, [r4]
   112f4:	pop	{r4, pc}
   112f8:	andeq	ip, r2, ip, lsl #3
   112fc:	b	1129c <__assert_fail@plt+0x98>
   11300:	bx	lr
   11304:	strd	r4, [sp, #-12]!
   11308:	str	lr, [sp, #8]
   1130c:	movw	r3, #49552	; 0xc190
   11310:	movt	r3, #2
   11314:	ldr	r4, [r3]
   11318:	cmp	r4, #0
   1131c:	beq	11380 <__assert_fail@plt+0x17c>
   11320:	movw	r3, #49552	; 0xc190
   11324:	movt	r3, #2
   11328:	ldr	ip, [r3, #4]
   1132c:	add	r4, ip, r4, lsl #5
   11330:	mov	r0, #1
   11334:	movw	r5, #39532	; 0x9a6c
   11338:	movt	r5, #1
   1133c:	b	1136c <__assert_fail@plt+0x168>
   11340:	mov	r2, r3
   11344:	udiv	r3, r0, r2
   11348:	mls	r3, r2, r3, r0
   1134c:	mov	r0, r2
   11350:	cmp	r3, #0
   11354:	bne	11340 <__assert_fail@plt+0x13c>
   11358:	udiv	r0, r1, r2
   1135c:	mul	r0, lr, r0
   11360:	add	ip, ip, #32
   11364:	cmp	ip, r4
   11368:	beq	11384 <__assert_fail@plt+0x180>
   1136c:	mov	lr, r0
   11370:	ldr	r3, [ip, #4]
   11374:	ldr	r1, [r5, r3, lsl #2]
   11378:	mov	r2, r1
   1137c:	b	11344 <__assert_fail@plt+0x140>
   11380:	mov	r0, #1
   11384:	ldrd	r4, [sp]
   11388:	add	sp, sp, #8
   1138c:	pop	{pc}		; (ldr pc, [sp], #4)
   11390:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11394:	strd	r6, [sp, #8]
   11398:	strd	r8, [sp, #16]
   1139c:	str	lr, [sp, #24]
   113a0:	sub	sp, sp, #36	; 0x24
   113a4:	mov	r4, r0
   113a8:	mov	r5, r1
   113ac:	mov	r3, #0
   113b0:	strb	r3, [sp, #28]
   113b4:	strb	r2, [sp, #27]
   113b8:	movw	r3, #49552	; 0xc190
   113bc:	movt	r3, #2
   113c0:	ldr	r2, [r3, #8]
   113c4:	add	r7, sp, #27
   113c8:	sub	r7, r7, r2
   113cc:	ldr	r3, [r3, #12]
   113d0:	cmp	r3, #10
   113d4:	beq	11468 <__assert_fail@plt+0x264>
   113d8:	cmp	r3, #16
   113dc:	beq	114c0 <__assert_fail@plt+0x2bc>
   113e0:	cmp	r3, #8
   113e4:	addne	r6, sp, #27
   113e8:	beq	11430 <__assert_fail@plt+0x22c>
   113ec:	cmp	r7, r6
   113f0:	bcs	11460 <__assert_fail@plt+0x25c>
   113f4:	mov	r3, #48	; 0x30
   113f8:	strb	r3, [r6, #-1]!
   113fc:	cmp	r7, r6
   11400:	bne	113f8 <__assert_fail@plt+0x1f4>
   11404:	movw	r3, #49540	; 0xc184
   11408:	movt	r3, #2
   1140c:	ldr	r1, [r3]
   11410:	mov	r0, r7
   11414:	bl	10f1c <fputs_unlocked@plt>
   11418:	add	sp, sp, #36	; 0x24
   1141c:	ldrd	r4, [sp]
   11420:	ldrd	r6, [sp, #8]
   11424:	ldrd	r8, [sp, #16]
   11428:	add	sp, sp, #24
   1142c:	pop	{pc}		; (ldr pc, [sp], #4)
   11430:	add	r6, sp, #27
   11434:	and	r3, r4, #7
   11438:	add	r3, r3, #48	; 0x30
   1143c:	strb	r3, [r6, #-1]!
   11440:	lsr	r3, r4, #3
   11444:	orr	r3, r3, r5, lsl #29
   11448:	lsr	r2, r5, #3
   1144c:	mov	r4, r3
   11450:	mov	r5, r2
   11454:	orrs	r3, r4, r5
   11458:	bne	11434 <__assert_fail@plt+0x230>
   1145c:	b	113ec <__assert_fail@plt+0x1e8>
   11460:	mov	r7, r6
   11464:	b	11404 <__assert_fail@plt+0x200>
   11468:	add	r6, sp, #27
   1146c:	mov	r8, #10
   11470:	mov	r9, #0
   11474:	b	11480 <__assert_fail@plt+0x27c>
   11478:	mov	r4, r0
   1147c:	mov	r5, r1
   11480:	mov	r2, r8
   11484:	mov	r3, r9
   11488:	mov	r0, r4
   1148c:	mov	r1, r5
   11490:	bl	19870 <__assert_fail@plt+0x866c>
   11494:	add	r2, r2, #48	; 0x30
   11498:	strb	r2, [r6, #-1]!
   1149c:	mov	r2, r8
   114a0:	mov	r3, r9
   114a4:	mov	r0, r4
   114a8:	mov	r1, r5
   114ac:	bl	19870 <__assert_fail@plt+0x866c>
   114b0:	cmp	r5, #0
   114b4:	cmpeq	r4, #9
   114b8:	bhi	11478 <__assert_fail@plt+0x274>
   114bc:	b	113ec <__assert_fail@plt+0x1e8>
   114c0:	add	r6, sp, #27
   114c4:	movw	r1, #40364	; 0x9dac
   114c8:	movt	r1, #1
   114cc:	and	r3, r4, #15
   114d0:	ldrb	r3, [r1, r3]
   114d4:	strb	r3, [r6, #-1]!
   114d8:	lsr	r3, r4, #4
   114dc:	orr	r3, r3, r5, lsl #28
   114e0:	lsr	r2, r5, #4
   114e4:	mov	r4, r3
   114e8:	mov	r5, r2
   114ec:	orrs	r3, r4, r5
   114f0:	bne	114cc <__assert_fail@plt+0x2c8>
   114f4:	b	113ec <__assert_fail@plt+0x1e8>
   114f8:	strd	r4, [sp, #-16]!
   114fc:	str	r6, [sp, #8]
   11500:	str	lr, [sp, #12]
   11504:	mov	r4, r0
   11508:	mov	r5, r1
   1150c:	mov	r6, r2
   11510:	movw	r3, #49540	; 0xc184
   11514:	movt	r3, #2
   11518:	ldr	r0, [r3]
   1151c:	ldr	r3, [r0, #20]
   11520:	ldr	r2, [r0, #24]
   11524:	cmp	r3, r2
   11528:	addcc	r2, r3, #1
   1152c:	strcc	r2, [r0, #20]
   11530:	movcc	r2, #40	; 0x28
   11534:	strbcc	r2, [r3]
   11538:	bcs	1158c <__assert_fail@plt+0x388>
   1153c:	mov	r2, #41	; 0x29
   11540:	mov	r0, r4
   11544:	mov	r1, r5
   11548:	bl	11390 <__assert_fail@plt+0x18c>
   1154c:	cmp	r6, #0
   11550:	beq	1157c <__assert_fail@plt+0x378>
   11554:	movw	r3, #49540	; 0xc184
   11558:	movt	r3, #2
   1155c:	ldr	r0, [r3]
   11560:	ldr	r3, [r0, #20]
   11564:	ldr	r2, [r0, #24]
   11568:	cmp	r3, r2
   1156c:	addcc	r2, r3, #1
   11570:	strcc	r2, [r0, #20]
   11574:	strbcc	r6, [r3]
   11578:	bcs	11598 <__assert_fail@plt+0x394>
   1157c:	ldrd	r4, [sp]
   11580:	ldr	r6, [sp, #8]
   11584:	add	sp, sp, #12
   11588:	pop	{pc}		; (ldr pc, [sp], #4)
   1158c:	mov	r1, #40	; 0x28
   11590:	bl	11168 <__overflow@plt>
   11594:	b	1153c <__assert_fail@plt+0x338>
   11598:	mov	r1, r6
   1159c:	bl	11168 <__overflow@plt>
   115a0:	b	1157c <__assert_fail@plt+0x378>
   115a4:	strd	r4, [sp, #-16]!
   115a8:	str	r6, [sp, #8]
   115ac:	str	lr, [sp, #12]
   115b0:	mov	r4, r0
   115b4:	mov	r5, r1
   115b8:	mov	r6, r2
   115bc:	mov	r2, #32
   115c0:	bl	11390 <__assert_fail@plt+0x18c>
   115c4:	movw	r3, #49552	; 0xc190
   115c8:	movt	r3, #2
   115cc:	ldr	r0, [r3, #16]
   115d0:	ldr	r1, [r3, #20]
   115d4:	mov	r2, r6
   115d8:	adds	r0, r4, r0
   115dc:	adc	r1, r5, r1
   115e0:	bl	114f8 <__assert_fail@plt+0x2f4>
   115e4:	ldrd	r4, [sp]
   115e8:	ldr	r6, [sp, #8]
   115ec:	add	sp, sp, #12
   115f0:	pop	{pc}		; (ldr pc, [sp], #4)
   115f4:	ldrb	r3, [r0]
   115f8:	cmp	r3, #0
   115fc:	beq	11690 <__assert_fail@plt+0x48c>
   11600:	strd	r4, [sp, #-12]!
   11604:	str	lr, [sp, #8]
   11608:	sub	sp, sp, #12
   1160c:	mov	r4, r0
   11610:	mov	r5, r1
   11614:	cmp	r3, #43	; 0x2b
   11618:	addeq	r4, r0, #1
   1161c:	mov	r1, #46	; 0x2e
   11620:	mov	r0, r4
   11624:	bl	110cc <strchr@plt>
   11628:	cmp	r0, #0
   1162c:	movne	r2, #10
   11630:	beq	11668 <__assert_fail@plt+0x464>
   11634:	movw	r3, #40384	; 0x9dc0
   11638:	movt	r3, #1
   1163c:	str	r3, [sp]
   11640:	mov	r3, r5
   11644:	mov	r1, #0
   11648:	mov	r0, r4
   1164c:	bl	18f7c <__assert_fail@plt+0x7d78>
   11650:	clz	r0, r0
   11654:	lsr	r0, r0, #5
   11658:	add	sp, sp, #12
   1165c:	ldrd	r4, [sp]
   11660:	add	sp, sp, #8
   11664:	pop	{pc}		; (ldr pc, [sp], #4)
   11668:	ldrb	r3, [r4]
   1166c:	cmp	r3, #48	; 0x30
   11670:	movne	r2, #8
   11674:	bne	11634 <__assert_fail@plt+0x430>
   11678:	ldrb	r3, [r4, #1]
   1167c:	and	r3, r3, #223	; 0xdf
   11680:	cmp	r3, #88	; 0x58
   11684:	movne	r2, #8
   11688:	moveq	r2, #16
   1168c:	b	11634 <__assert_fail@plt+0x430>
   11690:	mov	r0, #0
   11694:	bx	lr
   11698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1169c:	strd	r6, [sp, #8]
   116a0:	strd	r8, [sp, #16]
   116a4:	strd	sl, [sp, #24]
   116a8:	str	lr, [sp, #32]
   116ac:	sub	sp, sp, #36	; 0x24
   116b0:	mov	sl, r2
   116b4:	ldr	r8, [sp, #76]	; 0x4c
   116b8:	mov	r4, r0
   116bc:	mov	r5, #0
   116c0:	strd	r4, [sp]
   116c4:	mov	r2, r1
   116c8:	mov	r3, #0
   116cc:	strd	r2, [sp, #8]
   116d0:	cmp	r5, r3
   116d4:	cmpeq	r0, r1
   116d8:	bls	117a4 <__assert_fail@plt+0x5a0>
   116dc:	asr	r1, r8, #31
   116e0:	subs	r6, r4, #1
   116e4:	sbc	r3, r5, #0
   116e8:	mul	r2, r6, r1
   116ec:	mla	r3, r8, r3, r2
   116f0:	umull	r6, r7, r6, r8
   116f4:	add	r7, r3, r7
   116f8:	movw	r3, #40388	; 0x9dc4
   116fc:	movt	r3, #1
   11700:	str	r3, [sp, #20]
   11704:	mov	r9, sl
   11708:	mov	sl, r8
   1170c:	mov	fp, r1
   11710:	b	11764 <__assert_fail@plt+0x560>
   11714:	strb	r2, [sp, #28]
   11718:	mov	r3, #0
   1171c:	strb	r3, [sp, #29]
   11720:	add	r2, sp, #28
   11724:	b	1172c <__assert_fail@plt+0x528>
   11728:	ldr	r2, [sp, #20]
   1172c:	ldr	r3, [sp, #16]
   11730:	sub	r1, r8, r3
   11734:	ldr	r0, [sp, #72]	; 0x48
   11738:	add	r1, r1, r0
   1173c:	movw	r0, #40392	; 0x9dc8
   11740:	movt	r0, #1
   11744:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11748:	subs	r6, r6, sl
   1174c:	sbc	r7, r7, fp
   11750:	ldr	r8, [sp, #16]
   11754:	ldrd	r2, [sp, #8]
   11758:	cmp	r5, r3
   1175c:	cmpeq	r4, r2
   11760:	beq	117a4 <__assert_fail@plt+0x5a0>
   11764:	subs	r4, r4, #1
   11768:	sbc	r5, r5, #0
   1176c:	ldrd	r2, [sp]
   11770:	mov	r0, r6
   11774:	mov	r1, r7
   11778:	bl	19870 <__assert_fail@plt+0x866c>
   1177c:	str	r0, [sp, #16]
   11780:	ldrb	r2, [r9], #1
   11784:	and	r2, r2, #127	; 0x7f
   11788:	cmp	r2, #127	; 0x7f
   1178c:	beq	11728 <__assert_fail@plt+0x524>
   11790:	cmp	r2, #32
   11794:	bgt	11714 <__assert_fail@plt+0x510>
   11798:	ldr	r3, [pc, #32]	; 117c0 <__assert_fail@plt+0x5bc>
   1179c:	add	r2, r3, r2, lsl #2
   117a0:	b	1172c <__assert_fail@plt+0x528>
   117a4:	add	sp, sp, #36	; 0x24
   117a8:	ldrd	r4, [sp]
   117ac:	ldrd	r6, [sp, #8]
   117b0:	ldrd	r8, [sp, #16]
   117b4:	ldrd	sl, [sp, #24]
   117b8:	add	sp, sp, #32
   117bc:	pop	{pc}		; (ldr pc, [sp], #4)
   117c0:	muleq	r1, r0, sl
   117c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   117c8:	strd	r6, [sp, #8]
   117cc:	strd	r8, [sp, #16]
   117d0:	strd	sl, [sp, #24]
   117d4:	str	lr, [sp, #32]
   117d8:	sub	sp, sp, #44	; 0x2c
   117dc:	mov	r9, r2
   117e0:	str	r3, [sp, #20]
   117e4:	ldr	r8, [sp, #84]	; 0x54
   117e8:	mov	r4, r0
   117ec:	mov	r5, #0
   117f0:	strd	r4, [sp]
   117f4:	mov	r2, r1
   117f8:	mov	r3, #0
   117fc:	strd	r2, [sp, #8]
   11800:	cmp	r5, r3
   11804:	cmpeq	r0, r1
   11808:	bls	118c4 <__assert_fail@plt+0x6c0>
   1180c:	mov	r0, r8
   11810:	asr	r1, r8, #31
   11814:	strd	r0, [sp, #24]
   11818:	subs	r6, r4, #1
   1181c:	sbc	r3, r5, #0
   11820:	mul	r2, r6, r1
   11824:	mla	r3, r8, r3, r2
   11828:	umull	r6, r7, r6, r8
   1182c:	add	r7, r3, r7
   11830:	movw	fp, #49552	; 0xc190
   11834:	movt	fp, #2
   11838:	b	1186c <__assert_fail@plt+0x668>
   1183c:	ldrd	r2, [r9]
   11840:	add	r9, r9, #8
   11844:	ldr	r0, [sp, #20]
   11848:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   1184c:	ldrd	r2, [sp, #24]
   11850:	subs	r6, r6, r2
   11854:	sbc	r7, r7, r3
   11858:	mov	r8, sl
   1185c:	ldrd	r2, [sp, #8]
   11860:	cmp	r5, r3
   11864:	cmpeq	r4, r2
   11868:	beq	118c4 <__assert_fail@plt+0x6c0>
   1186c:	subs	r4, r4, #1
   11870:	sbc	r5, r5, #0
   11874:	ldrd	r2, [sp]
   11878:	mov	r0, r6
   1187c:	mov	r1, r7
   11880:	bl	19870 <__assert_fail@plt+0x866c>
   11884:	mov	sl, r0
   11888:	sub	r1, r8, r0
   1188c:	ldr	r3, [sp, #80]	; 0x50
   11890:	add	r1, r1, r3
   11894:	ldrb	r3, [fp, #24]
   11898:	cmp	r3, #0
   1189c:	beq	1183c <__assert_fail@plt+0x638>
   118a0:	mov	ip, r9
   118a4:	add	r3, r9, #8
   118a8:	add	r2, sp, #31
   118ac:	ldrb	r0, [r3, #-1]!
   118b0:	strb	r0, [r2, #1]!
   118b4:	cmp	r3, ip
   118b8:	bne	118ac <__assert_fail@plt+0x6a8>
   118bc:	ldrd	r2, [sp, #32]
   118c0:	b	11840 <__assert_fail@plt+0x63c>
   118c4:	add	sp, sp, #44	; 0x2c
   118c8:	ldrd	r4, [sp]
   118cc:	ldrd	r6, [sp, #8]
   118d0:	ldrd	r8, [sp, #16]
   118d4:	ldrd	sl, [sp, #24]
   118d8:	add	sp, sp, #32
   118dc:	pop	{pc}		; (ldr pc, [sp], #4)
   118e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   118e4:	strd	r6, [sp, #8]
   118e8:	strd	r8, [sp, #16]
   118ec:	strd	sl, [sp, #24]
   118f0:	str	lr, [sp, #32]
   118f4:	sub	sp, sp, #36	; 0x24
   118f8:	mov	r7, r2
   118fc:	str	r3, [sp, #24]
   11900:	ldr	r6, [sp, #76]	; 0x4c
   11904:	mov	sl, r0
   11908:	mov	fp, #0
   1190c:	strd	sl, [sp]
   11910:	mov	r2, r1
   11914:	mov	r3, #0
   11918:	strd	r2, [sp, #8]
   1191c:	cmp	fp, r3
   11920:	cmpeq	r0, r1
   11924:	bls	119ec <__assert_fail@plt+0x7e8>
   11928:	mov	r0, r6
   1192c:	asr	r1, r6, #31
   11930:	strd	r0, [sp, #16]
   11934:	subs	r4, sl, #1
   11938:	sbc	r3, fp, #0
   1193c:	mul	r2, r4, r1
   11940:	mla	r3, r6, r3, r2
   11944:	umull	r4, r5, r4, r6
   11948:	add	r5, r3, r5
   1194c:	movw	r3, #49552	; 0xc190
   11950:	movt	r3, #2
   11954:	str	r3, [sp, #28]
   11958:	b	1198c <__assert_fail@plt+0x788>
   1195c:	ldr	r2, [r7]
   11960:	add	r7, r7, #4
   11964:	ldr	r0, [sp, #24]
   11968:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   1196c:	ldrd	r2, [sp, #16]
   11970:	subs	r4, r4, r2
   11974:	sbc	r5, r5, r3
   11978:	mov	r6, r8
   1197c:	ldrd	r2, [sp, #8]
   11980:	cmp	fp, r3
   11984:	cmpeq	sl, r2
   11988:	beq	119ec <__assert_fail@plt+0x7e8>
   1198c:	subs	sl, sl, #1
   11990:	sbc	fp, fp, #0
   11994:	ldrd	r2, [sp]
   11998:	mov	r0, r4
   1199c:	mov	r1, r5
   119a0:	bl	19870 <__assert_fail@plt+0x866c>
   119a4:	mov	r8, r0
   119a8:	sub	r1, r6, r0
   119ac:	ldr	r3, [sp, #72]	; 0x48
   119b0:	add	r1, r1, r3
   119b4:	ldr	r3, [sp, #28]
   119b8:	ldrb	r3, [r3, #24]
   119bc:	cmp	r3, #0
   119c0:	beq	1195c <__assert_fail@plt+0x758>
   119c4:	ldrb	r3, [r7, #3]
   119c8:	bfi	r9, r3, #0, #8
   119cc:	ldrb	r3, [r7, #2]
   119d0:	bfi	r9, r3, #8, #8
   119d4:	ldrb	r3, [r7, #1]
   119d8:	bfi	r9, r3, #16, #8
   119dc:	ldrb	r3, [r7]
   119e0:	bfi	r9, r3, #24, #8
   119e4:	mov	r2, r9
   119e8:	b	11960 <__assert_fail@plt+0x75c>
   119ec:	add	sp, sp, #36	; 0x24
   119f0:	ldrd	r4, [sp]
   119f4:	ldrd	r6, [sp, #8]
   119f8:	ldrd	r8, [sp, #16]
   119fc:	ldrd	sl, [sp, #24]
   11a00:	add	sp, sp, #32
   11a04:	pop	{pc}		; (ldr pc, [sp], #4)
   11a08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a0c:	strd	r6, [sp, #8]
   11a10:	strd	r8, [sp, #16]
   11a14:	strd	sl, [sp, #24]
   11a18:	str	lr, [sp, #32]
   11a1c:	sub	sp, sp, #36	; 0x24
   11a20:	mov	r7, r2
   11a24:	str	r3, [sp, #24]
   11a28:	ldr	r6, [sp, #76]	; 0x4c
   11a2c:	mov	sl, r0
   11a30:	mov	fp, #0
   11a34:	strd	sl, [sp]
   11a38:	mov	r2, r1
   11a3c:	mov	r3, #0
   11a40:	strd	r2, [sp, #8]
   11a44:	cmp	fp, r3
   11a48:	cmpeq	r0, r1
   11a4c:	bls	11b14 <__assert_fail@plt+0x910>
   11a50:	mov	r0, r6
   11a54:	asr	r1, r6, #31
   11a58:	strd	r0, [sp, #16]
   11a5c:	subs	r4, sl, #1
   11a60:	sbc	r3, fp, #0
   11a64:	mul	r2, r4, r1
   11a68:	mla	r3, r6, r3, r2
   11a6c:	umull	r4, r5, r4, r6
   11a70:	add	r5, r3, r5
   11a74:	movw	r3, #49552	; 0xc190
   11a78:	movt	r3, #2
   11a7c:	str	r3, [sp, #28]
   11a80:	b	11ab4 <__assert_fail@plt+0x8b0>
   11a84:	ldr	r2, [r7]
   11a88:	add	r7, r7, #4
   11a8c:	ldr	r0, [sp, #24]
   11a90:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11a94:	ldrd	r2, [sp, #16]
   11a98:	subs	r4, r4, r2
   11a9c:	sbc	r5, r5, r3
   11aa0:	mov	r6, r8
   11aa4:	ldrd	r2, [sp, #8]
   11aa8:	cmp	fp, r3
   11aac:	cmpeq	sl, r2
   11ab0:	beq	11b14 <__assert_fail@plt+0x910>
   11ab4:	subs	sl, sl, #1
   11ab8:	sbc	fp, fp, #0
   11abc:	ldrd	r2, [sp]
   11ac0:	mov	r0, r4
   11ac4:	mov	r1, r5
   11ac8:	bl	19870 <__assert_fail@plt+0x866c>
   11acc:	mov	r8, r0
   11ad0:	sub	r1, r6, r0
   11ad4:	ldr	r3, [sp, #72]	; 0x48
   11ad8:	add	r1, r1, r3
   11adc:	ldr	r3, [sp, #28]
   11ae0:	ldrb	r3, [r3, #24]
   11ae4:	cmp	r3, #0
   11ae8:	beq	11a84 <__assert_fail@plt+0x880>
   11aec:	ldrb	r3, [r7, #3]
   11af0:	bfi	r9, r3, #0, #8
   11af4:	ldrb	r3, [r7, #2]
   11af8:	bfi	r9, r3, #8, #8
   11afc:	ldrb	r3, [r7, #1]
   11b00:	bfi	r9, r3, #16, #8
   11b04:	ldrb	r3, [r7]
   11b08:	bfi	r9, r3, #24, #8
   11b0c:	mov	r2, r9
   11b10:	b	11a88 <__assert_fail@plt+0x884>
   11b14:	add	sp, sp, #36	; 0x24
   11b18:	ldrd	r4, [sp]
   11b1c:	ldrd	r6, [sp, #8]
   11b20:	ldrd	r8, [sp, #16]
   11b24:	ldrd	sl, [sp, #24]
   11b28:	add	sp, sp, #32
   11b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b34:	strd	r6, [sp, #8]
   11b38:	strd	r8, [sp, #16]
   11b3c:	strd	sl, [sp, #24]
   11b40:	str	lr, [sp, #32]
   11b44:	sub	sp, sp, #36	; 0x24
   11b48:	mov	r7, r2
   11b4c:	str	r3, [sp, #24]
   11b50:	ldr	r6, [sp, #76]	; 0x4c
   11b54:	mov	r8, r0
   11b58:	mov	r9, #0
   11b5c:	strd	r8, [sp]
   11b60:	mov	r2, r1
   11b64:	mov	r3, #0
   11b68:	strd	r2, [sp, #8]
   11b6c:	cmp	r9, r3
   11b70:	cmpeq	r0, r1
   11b74:	bls	11c2c <__assert_fail@plt+0xa28>
   11b78:	mov	r0, r6
   11b7c:	asr	r1, r6, #31
   11b80:	strd	r0, [sp, #16]
   11b84:	subs	r4, r8, #1
   11b88:	sbc	r3, r9, #0
   11b8c:	mul	r2, r4, r1
   11b90:	mla	r3, r6, r3, r2
   11b94:	umull	r4, r5, r4, r6
   11b98:	add	r5, r3, r5
   11b9c:	movw	r3, #49552	; 0xc190
   11ba0:	movt	r3, #2
   11ba4:	str	r3, [sp, #28]
   11ba8:	b	11bdc <__assert_fail@plt+0x9d8>
   11bac:	ldrh	r2, [r7]
   11bb0:	add	r7, r7, #2
   11bb4:	ldr	r0, [sp, #24]
   11bb8:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11bbc:	ldrd	r2, [sp, #16]
   11bc0:	subs	r4, r4, r2
   11bc4:	sbc	r5, r5, r3
   11bc8:	mov	r6, fp
   11bcc:	ldrd	r2, [sp, #8]
   11bd0:	cmp	r9, r3
   11bd4:	cmpeq	r8, r2
   11bd8:	beq	11c2c <__assert_fail@plt+0xa28>
   11bdc:	subs	r8, r8, #1
   11be0:	sbc	r9, r9, #0
   11be4:	ldrd	r2, [sp]
   11be8:	mov	r0, r4
   11bec:	mov	r1, r5
   11bf0:	bl	19870 <__assert_fail@plt+0x866c>
   11bf4:	mov	fp, r0
   11bf8:	sub	r1, r6, r0
   11bfc:	ldr	r3, [sp, #72]	; 0x48
   11c00:	add	r1, r1, r3
   11c04:	ldr	r3, [sp, #28]
   11c08:	ldrb	r3, [r3, #24]
   11c0c:	cmp	r3, #0
   11c10:	beq	11bac <__assert_fail@plt+0x9a8>
   11c14:	ldrb	r3, [r7, #1]
   11c18:	bfi	sl, r3, #0, #8
   11c1c:	ldrb	r3, [r7]
   11c20:	bfi	sl, r3, #8, #8
   11c24:	uxth	r2, sl
   11c28:	b	11bb0 <__assert_fail@plt+0x9ac>
   11c2c:	add	sp, sp, #36	; 0x24
   11c30:	ldrd	r4, [sp]
   11c34:	ldrd	r6, [sp, #8]
   11c38:	ldrd	r8, [sp, #16]
   11c3c:	ldrd	sl, [sp, #24]
   11c40:	add	sp, sp, #32
   11c44:	pop	{pc}		; (ldr pc, [sp], #4)
   11c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11c4c:	strd	r6, [sp, #8]
   11c50:	strd	r8, [sp, #16]
   11c54:	strd	sl, [sp, #24]
   11c58:	str	lr, [sp, #32]
   11c5c:	sub	sp, sp, #36	; 0x24
   11c60:	mov	r7, r2
   11c64:	str	r3, [sp, #24]
   11c68:	ldr	r6, [sp, #76]	; 0x4c
   11c6c:	mov	r8, r0
   11c70:	mov	r9, #0
   11c74:	strd	r8, [sp]
   11c78:	mov	r2, r1
   11c7c:	mov	r3, #0
   11c80:	strd	r2, [sp, #8]
   11c84:	cmp	r9, r3
   11c88:	cmpeq	r0, r1
   11c8c:	bls	11d44 <__assert_fail@plt+0xb40>
   11c90:	mov	r0, r6
   11c94:	asr	r1, r6, #31
   11c98:	strd	r0, [sp, #16]
   11c9c:	subs	r4, r8, #1
   11ca0:	sbc	r3, r9, #0
   11ca4:	mul	r2, r4, r1
   11ca8:	mla	r3, r6, r3, r2
   11cac:	umull	r4, r5, r4, r6
   11cb0:	add	r5, r3, r5
   11cb4:	movw	r3, #49552	; 0xc190
   11cb8:	movt	r3, #2
   11cbc:	str	r3, [sp, #28]
   11cc0:	b	11cf4 <__assert_fail@plt+0xaf0>
   11cc4:	ldrsh	r2, [r7]
   11cc8:	add	r7, r7, #2
   11ccc:	ldr	r0, [sp, #24]
   11cd0:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11cd4:	ldrd	r2, [sp, #16]
   11cd8:	subs	r4, r4, r2
   11cdc:	sbc	r5, r5, r3
   11ce0:	mov	r6, fp
   11ce4:	ldrd	r2, [sp, #8]
   11ce8:	cmp	r9, r3
   11cec:	cmpeq	r8, r2
   11cf0:	beq	11d44 <__assert_fail@plt+0xb40>
   11cf4:	subs	r8, r8, #1
   11cf8:	sbc	r9, r9, #0
   11cfc:	ldrd	r2, [sp]
   11d00:	mov	r0, r4
   11d04:	mov	r1, r5
   11d08:	bl	19870 <__assert_fail@plt+0x866c>
   11d0c:	mov	fp, r0
   11d10:	sub	r1, r6, r0
   11d14:	ldr	r3, [sp, #72]	; 0x48
   11d18:	add	r1, r1, r3
   11d1c:	ldr	r3, [sp, #28]
   11d20:	ldrb	r3, [r3, #24]
   11d24:	cmp	r3, #0
   11d28:	beq	11cc4 <__assert_fail@plt+0xac0>
   11d2c:	ldrb	r3, [r7, #1]
   11d30:	bfi	sl, r3, #0, #8
   11d34:	ldrb	r3, [r7]
   11d38:	bfi	sl, r3, #8, #8
   11d3c:	sxth	r2, sl
   11d40:	b	11cc8 <__assert_fail@plt+0xac4>
   11d44:	add	sp, sp, #36	; 0x24
   11d48:	ldrd	r4, [sp]
   11d4c:	ldrd	r6, [sp, #8]
   11d50:	ldrd	r8, [sp, #16]
   11d54:	ldrd	sl, [sp, #24]
   11d58:	add	sp, sp, #32
   11d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d64:	strd	r6, [sp, #8]
   11d68:	strd	r8, [sp, #16]
   11d6c:	strd	sl, [sp, #24]
   11d70:	str	lr, [sp, #32]
   11d74:	sub	sp, sp, #28
   11d78:	mov	sl, r2
   11d7c:	str	r3, [sp, #20]
   11d80:	ldr	r8, [sp, #68]	; 0x44
   11d84:	mov	r4, r0
   11d88:	mov	r5, #0
   11d8c:	strd	r4, [sp]
   11d90:	mov	r2, r1
   11d94:	mov	r3, #0
   11d98:	strd	r2, [sp, #8]
   11d9c:	cmp	r5, r3
   11da0:	cmpeq	r0, r1
   11da4:	bls	11e20 <__assert_fail@plt+0xc1c>
   11da8:	asr	r1, r8, #31
   11dac:	subs	r6, r4, #1
   11db0:	sbc	r3, r5, #0
   11db4:	mul	r2, r6, r1
   11db8:	mla	r3, r8, r3, r2
   11dbc:	umull	r6, r7, r6, r8
   11dc0:	add	r7, r3, r7
   11dc4:	mov	r9, sl
   11dc8:	mov	sl, r8
   11dcc:	mov	fp, r1
   11dd0:	subs	r4, r4, #1
   11dd4:	sbc	r5, r5, #0
   11dd8:	ldrd	r2, [sp]
   11ddc:	mov	r0, r6
   11de0:	mov	r1, r7
   11de4:	bl	19870 <__assert_fail@plt+0x866c>
   11de8:	str	r0, [sp, #16]
   11dec:	sub	r1, r8, r0
   11df0:	ldrb	r2, [r9], #1
   11df4:	ldr	r0, [sp, #64]	; 0x40
   11df8:	add	r1, r1, r0
   11dfc:	ldr	r0, [sp, #20]
   11e00:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11e04:	subs	r6, r6, sl
   11e08:	sbc	r7, r7, fp
   11e0c:	ldr	r8, [sp, #16]
   11e10:	ldrd	r2, [sp, #8]
   11e14:	cmp	r5, r3
   11e18:	cmpeq	r4, r2
   11e1c:	bne	11dd0 <__assert_fail@plt+0xbcc>
   11e20:	add	sp, sp, #28
   11e24:	ldrd	r4, [sp]
   11e28:	ldrd	r6, [sp, #8]
   11e2c:	ldrd	r8, [sp, #16]
   11e30:	ldrd	sl, [sp, #24]
   11e34:	add	sp, sp, #32
   11e38:	pop	{pc}		; (ldr pc, [sp], #4)
   11e3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e40:	strd	r6, [sp, #8]
   11e44:	strd	r8, [sp, #16]
   11e48:	strd	sl, [sp, #24]
   11e4c:	str	lr, [sp, #32]
   11e50:	sub	sp, sp, #28
   11e54:	mov	sl, r2
   11e58:	str	r3, [sp, #20]
   11e5c:	ldr	r8, [sp, #68]	; 0x44
   11e60:	mov	r4, r0
   11e64:	mov	r5, #0
   11e68:	strd	r4, [sp]
   11e6c:	mov	r2, r1
   11e70:	mov	r3, #0
   11e74:	strd	r2, [sp, #8]
   11e78:	cmp	r5, r3
   11e7c:	cmpeq	r0, r1
   11e80:	bls	11efc <__assert_fail@plt+0xcf8>
   11e84:	asr	r1, r8, #31
   11e88:	subs	r6, r4, #1
   11e8c:	sbc	r3, r5, #0
   11e90:	mul	r2, r6, r1
   11e94:	mla	r3, r8, r3, r2
   11e98:	umull	r6, r7, r6, r8
   11e9c:	add	r7, r3, r7
   11ea0:	mov	r9, sl
   11ea4:	mov	sl, r8
   11ea8:	mov	fp, r1
   11eac:	subs	r4, r4, #1
   11eb0:	sbc	r5, r5, #0
   11eb4:	ldrd	r2, [sp]
   11eb8:	mov	r0, r6
   11ebc:	mov	r1, r7
   11ec0:	bl	19870 <__assert_fail@plt+0x866c>
   11ec4:	str	r0, [sp, #16]
   11ec8:	sub	r1, r8, r0
   11ecc:	ldrsb	r2, [r9], #1
   11ed0:	ldr	r0, [sp, #64]	; 0x40
   11ed4:	add	r1, r1, r0
   11ed8:	ldr	r0, [sp, #20]
   11edc:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11ee0:	subs	r6, r6, sl
   11ee4:	sbc	r7, r7, fp
   11ee8:	ldr	r8, [sp, #16]
   11eec:	ldrd	r2, [sp, #8]
   11ef0:	cmp	r5, r3
   11ef4:	cmpeq	r4, r2
   11ef8:	bne	11eac <__assert_fail@plt+0xca8>
   11efc:	add	sp, sp, #28
   11f00:	ldrd	r4, [sp]
   11f04:	ldrd	r6, [sp, #8]
   11f08:	ldrd	r8, [sp, #16]
   11f0c:	ldrd	sl, [sp, #24]
   11f10:	add	sp, sp, #32
   11f14:	pop	{pc}		; (ldr pc, [sp], #4)
   11f18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f1c:	strd	r6, [sp, #8]
   11f20:	strd	r8, [sp, #16]
   11f24:	strd	sl, [sp, #24]
   11f28:	str	lr, [sp, #32]
   11f2c:	sub	sp, sp, #76	; 0x4c
   11f30:	mov	r9, r2
   11f34:	ldr	r8, [sp, #116]	; 0x74
   11f38:	mov	r4, r0
   11f3c:	mov	r5, #0
   11f40:	strd	r4, [sp]
   11f44:	mov	r2, r1
   11f48:	mov	r3, #0
   11f4c:	strd	r2, [sp, #8]
   11f50:	cmp	r5, r3
   11f54:	cmpeq	r0, r1
   11f58:	bls	1203c <__assert_fail@plt+0xe38>
   11f5c:	mov	r0, r8
   11f60:	asr	r1, r8, #31
   11f64:	strd	r0, [sp, #16]
   11f68:	subs	r6, r4, #1
   11f6c:	sbc	r3, r5, #0
   11f70:	mul	r2, r6, r1
   11f74:	mla	r3, r8, r3, r2
   11f78:	umull	r6, r7, r6, r8
   11f7c:	add	r7, r3, r7
   11f80:	movw	fp, #49552	; 0xc190
   11f84:	movt	fp, #2
   11f88:	movw	r3, #40392	; 0x9dc8
   11f8c:	movt	r3, #1
   11f90:	str	r3, [sp, #28]
   11f94:	b	11fe4 <__assert_fail@plt+0xde0>
   11f98:	vldr	d0, [r9]
   11f9c:	add	r9, r9, #8
   11fa0:	mov	r3, #0
   11fa4:	mov	r2, r3
   11fa8:	mov	r1, #40	; 0x28
   11fac:	add	r0, sp, #32
   11fb0:	bl	15d08 <__assert_fail@plt+0x4b04>
   11fb4:	add	r2, sp, #32
   11fb8:	mov	r1, r8
   11fbc:	ldr	r0, [sp, #28]
   11fc0:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   11fc4:	ldrd	r2, [sp, #16]
   11fc8:	subs	r6, r6, r2
   11fcc:	sbc	r7, r7, r3
   11fd0:	mov	r8, sl
   11fd4:	ldrd	r2, [sp, #8]
   11fd8:	cmp	r5, r3
   11fdc:	cmpeq	r4, r2
   11fe0:	beq	1203c <__assert_fail@plt+0xe38>
   11fe4:	subs	r4, r4, #1
   11fe8:	sbc	r5, r5, #0
   11fec:	ldrd	r2, [sp]
   11ff0:	mov	r0, r6
   11ff4:	mov	r1, r7
   11ff8:	bl	19870 <__assert_fail@plt+0x866c>
   11ffc:	mov	sl, r0
   12000:	sub	r8, r8, r0
   12004:	ldr	r3, [sp, #112]	; 0x70
   12008:	add	r8, r8, r3
   1200c:	ldrb	r3, [fp, #24]
   12010:	cmp	r3, #0
   12014:	beq	11f98 <__assert_fail@plt+0xd94>
   12018:	mov	r0, r9
   1201c:	add	r3, r9, #8
   12020:	add	r2, sp, #31
   12024:	ldrb	r1, [r3, #-1]!
   12028:	strb	r1, [r2, #1]!
   1202c:	cmp	r3, r0
   12030:	bne	12024 <__assert_fail@plt+0xe20>
   12034:	vldr	d0, [sp, #32]
   12038:	b	11f9c <__assert_fail@plt+0xd98>
   1203c:	add	sp, sp, #76	; 0x4c
   12040:	ldrd	r4, [sp]
   12044:	ldrd	r6, [sp, #8]
   12048:	ldrd	r8, [sp, #16]
   1204c:	ldrd	sl, [sp, #24]
   12050:	add	sp, sp, #32
   12054:	pop	{pc}		; (ldr pc, [sp], #4)
   12058:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1205c:	strd	r6, [sp, #8]
   12060:	strd	r8, [sp, #16]
   12064:	strd	sl, [sp, #24]
   12068:	str	lr, [sp, #32]
   1206c:	sub	sp, sp, #76	; 0x4c
   12070:	mov	r9, r2
   12074:	ldr	r8, [sp, #116]	; 0x74
   12078:	mov	r4, r0
   1207c:	mov	r5, #0
   12080:	strd	r4, [sp]
   12084:	mov	r2, r1
   12088:	mov	r3, #0
   1208c:	strd	r2, [sp, #8]
   12090:	cmp	r5, r3
   12094:	cmpeq	r0, r1
   12098:	bls	1217c <__assert_fail@plt+0xf78>
   1209c:	mov	r0, r8
   120a0:	asr	r1, r8, #31
   120a4:	strd	r0, [sp, #16]
   120a8:	subs	r6, r4, #1
   120ac:	sbc	r3, r5, #0
   120b0:	mul	r2, r6, r1
   120b4:	mla	r3, r8, r3, r2
   120b8:	umull	r6, r7, r6, r8
   120bc:	add	r7, r3, r7
   120c0:	movw	fp, #49552	; 0xc190
   120c4:	movt	fp, #2
   120c8:	movw	r3, #40392	; 0x9dc8
   120cc:	movt	r3, #1
   120d0:	str	r3, [sp, #28]
   120d4:	b	12124 <__assert_fail@plt+0xf20>
   120d8:	vldr	d0, [r9]
   120dc:	add	r9, r9, #8
   120e0:	mov	r3, #0
   120e4:	mov	r2, r3
   120e8:	mov	r1, #40	; 0x28
   120ec:	add	r0, sp, #32
   120f0:	bl	157e8 <__assert_fail@plt+0x45e4>
   120f4:	add	r2, sp, #32
   120f8:	mov	r1, r8
   120fc:	ldr	r0, [sp, #28]
   12100:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   12104:	ldrd	r2, [sp, #16]
   12108:	subs	r6, r6, r2
   1210c:	sbc	r7, r7, r3
   12110:	mov	r8, sl
   12114:	ldrd	r2, [sp, #8]
   12118:	cmp	r5, r3
   1211c:	cmpeq	r4, r2
   12120:	beq	1217c <__assert_fail@plt+0xf78>
   12124:	subs	r4, r4, #1
   12128:	sbc	r5, r5, #0
   1212c:	ldrd	r2, [sp]
   12130:	mov	r0, r6
   12134:	mov	r1, r7
   12138:	bl	19870 <__assert_fail@plt+0x866c>
   1213c:	mov	sl, r0
   12140:	sub	r8, r8, r0
   12144:	ldr	r3, [sp, #112]	; 0x70
   12148:	add	r8, r8, r3
   1214c:	ldrb	r3, [fp, #24]
   12150:	cmp	r3, #0
   12154:	beq	120d8 <__assert_fail@plt+0xed4>
   12158:	mov	r0, r9
   1215c:	add	r3, r9, #8
   12160:	add	r2, sp, #31
   12164:	ldrb	r1, [r3, #-1]!
   12168:	strb	r1, [r2, #1]!
   1216c:	cmp	r3, r0
   12170:	bne	12164 <__assert_fail@plt+0xf60>
   12174:	vldr	d0, [sp, #32]
   12178:	b	120dc <__assert_fail@plt+0xed8>
   1217c:	add	sp, sp, #76	; 0x4c
   12180:	ldrd	r4, [sp]
   12184:	ldrd	r6, [sp, #8]
   12188:	ldrd	r8, [sp, #16]
   1218c:	ldrd	sl, [sp, #24]
   12190:	add	sp, sp, #32
   12194:	pop	{pc}		; (ldr pc, [sp], #4)
   12198:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1219c:	strd	r6, [sp, #8]
   121a0:	strd	r8, [sp, #16]
   121a4:	strd	sl, [sp, #24]
   121a8:	str	lr, [sp, #32]
   121ac:	sub	sp, sp, #68	; 0x44
   121b0:	mov	r7, r2
   121b4:	ldr	r6, [sp, #108]	; 0x6c
   121b8:	mov	r4, r0
   121bc:	mov	r5, #0
   121c0:	strd	r4, [sp]
   121c4:	mov	r2, r1
   121c8:	mov	r3, #0
   121cc:	strd	r2, [sp, #8]
   121d0:	cmp	r5, r3
   121d4:	cmpeq	r0, r1
   121d8:	bls	122c8 <__assert_fail@plt+0x10c4>
   121dc:	mov	r0, r6
   121e0:	asr	r1, r6, #31
   121e4:	strd	r0, [sp, #16]
   121e8:	subs	r2, r4, #1
   121ec:	sbc	r3, r5, #0
   121f0:	mul	r1, r2, r1
   121f4:	mla	r3, r6, r3, r1
   121f8:	umull	sl, fp, r2, r6
   121fc:	add	fp, r3, fp
   12200:	movw	r3, #49552	; 0xc190
   12204:	movt	r3, #2
   12208:	str	r3, [sp, #24]
   1220c:	movw	r3, #40392	; 0x9dc8
   12210:	movt	r3, #1
   12214:	str	r3, [sp, #28]
   12218:	b	12268 <__assert_fail@plt+0x1064>
   1221c:	vldr	s0, [r7]
   12220:	add	r7, r7, #4
   12224:	mov	r3, #0
   12228:	mov	r2, r3
   1222c:	mov	r1, #31
   12230:	add	r0, sp, #32
   12234:	bl	15b9c <__assert_fail@plt+0x4998>
   12238:	add	r2, sp, #32
   1223c:	mov	r1, r6
   12240:	ldr	r0, [sp, #28]
   12244:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   12248:	ldrd	r2, [sp, #16]
   1224c:	subs	sl, sl, r2
   12250:	sbc	fp, fp, r3
   12254:	mov	r6, r8
   12258:	ldrd	r2, [sp, #8]
   1225c:	cmp	r5, r3
   12260:	cmpeq	r4, r2
   12264:	beq	122c8 <__assert_fail@plt+0x10c4>
   12268:	subs	r4, r4, #1
   1226c:	sbc	r5, r5, #0
   12270:	ldrd	r2, [sp]
   12274:	mov	r0, sl
   12278:	mov	r1, fp
   1227c:	bl	19870 <__assert_fail@plt+0x866c>
   12280:	mov	r8, r0
   12284:	sub	r6, r6, r0
   12288:	ldr	r3, [sp, #104]	; 0x68
   1228c:	add	r6, r6, r3
   12290:	ldr	r3, [sp, #24]
   12294:	ldrb	r3, [r3, #24]
   12298:	cmp	r3, #0
   1229c:	beq	1221c <__assert_fail@plt+0x1018>
   122a0:	ldrb	r3, [r7, #3]
   122a4:	bfi	r9, r3, #0, #8
   122a8:	ldrb	r3, [r7, #2]
   122ac:	bfi	r9, r3, #8, #8
   122b0:	ldrb	r3, [r7, #1]
   122b4:	bfi	r9, r3, #16, #8
   122b8:	ldrb	r3, [r7]
   122bc:	bfi	r9, r3, #24, #8
   122c0:	vmov	s0, r9
   122c4:	b	12220 <__assert_fail@plt+0x101c>
   122c8:	add	sp, sp, #68	; 0x44
   122cc:	ldrd	r4, [sp]
   122d0:	ldrd	r6, [sp, #8]
   122d4:	ldrd	r8, [sp, #16]
   122d8:	ldrd	sl, [sp, #24]
   122dc:	add	sp, sp, #32
   122e0:	pop	{pc}		; (ldr pc, [sp], #4)
   122e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   122e8:	strd	r6, [sp, #8]
   122ec:	strd	r8, [sp, #16]
   122f0:	strd	sl, [sp, #24]
   122f4:	str	lr, [sp, #32]
   122f8:	sub	sp, sp, #60	; 0x3c
   122fc:	mov	fp, r2
   12300:	ldr	r8, [sp, #100]	; 0x64
   12304:	mov	r4, r0
   12308:	mov	r5, #0
   1230c:	strd	r4, [sp, #8]
   12310:	mov	r2, r1
   12314:	mov	r3, #0
   12318:	strd	r2, [sp, #16]
   1231c:	cmp	r5, r3
   12320:	cmpeq	r0, r1
   12324:	bls	124ac <__assert_fail@plt+0x12a8>
   12328:	mov	r0, r8
   1232c:	asr	r1, r8, #31
   12330:	strd	r0, [sp, #24]
   12334:	subs	r6, r4, #1
   12338:	sbc	r3, r5, #0
   1233c:	mul	r2, r6, r1
   12340:	mla	r3, r8, r3, r2
   12344:	umull	r6, r7, r6, r8
   12348:	add	r7, r3, r7
   1234c:	movw	r3, #40408	; 0x9dd8
   12350:	movt	r3, #1
   12354:	str	r3, [sp, #36]	; 0x24
   12358:	movw	r3, #40396	; 0x9dcc
   1235c:	movt	r3, #1
   12360:	str	r3, [sp, #40]	; 0x28
   12364:	movw	r3, #40400	; 0x9dd0
   12368:	movt	r3, #1
   1236c:	str	r3, [sp, #44]	; 0x2c
   12370:	b	12448 <__assert_fail@plt+0x1244>
   12374:	movw	r2, #40436	; 0x9df4
   12378:	movt	r2, #1
   1237c:	b	12410 <__assert_fail@plt+0x120c>
   12380:	movw	r2, #40412	; 0x9ddc
   12384:	movt	r2, #1
   12388:	b	12410 <__assert_fail@plt+0x120c>
   1238c:	movw	r2, #40416	; 0x9de0
   12390:	movt	r2, #1
   12394:	b	12410 <__assert_fail@plt+0x120c>
   12398:	movw	r2, #40420	; 0x9de4
   1239c:	movt	r2, #1
   123a0:	b	12410 <__assert_fail@plt+0x120c>
   123a4:	movw	r2, #40424	; 0x9de8
   123a8:	movt	r2, #1
   123ac:	b	12410 <__assert_fail@plt+0x120c>
   123b0:	movw	r2, #40428	; 0x9dec
   123b4:	movt	r2, #1
   123b8:	b	12410 <__assert_fail@plt+0x120c>
   123bc:	movw	r2, #40432	; 0x9df0
   123c0:	movt	r2, #1
   123c4:	b	12410 <__assert_fail@plt+0x120c>
   123c8:	bl	110a8 <__ctype_b_loc@plt>
   123cc:	ldr	r2, [r0]
   123d0:	lsl	r3, r9, #1
   123d4:	ldrh	r3, [r2, r3]
   123d8:	and	r3, r3, #16384	; 0x4000
   123dc:	str	r9, [sp]
   123e0:	ldr	r2, [sp, #40]	; 0x28
   123e4:	ldr	r1, [sp, #44]	; 0x2c
   123e8:	cmp	r3, #0
   123ec:	moveq	r2, r1
   123f0:	mov	r3, r2
   123f4:	mov	r2, #4
   123f8:	mov	r1, #1
   123fc:	add	r0, sp, #52	; 0x34
   12400:	bl	110e4 <__sprintf_chk@plt>
   12404:	add	r2, sp, #52	; 0x34
   12408:	b	12410 <__assert_fail@plt+0x120c>
   1240c:	ldr	r2, [sp, #36]	; 0x24
   12410:	sub	r1, r8, sl
   12414:	ldr	r3, [sp, #96]	; 0x60
   12418:	add	r1, r1, r3
   1241c:	movw	r0, #40392	; 0x9dc8
   12420:	movt	r0, #1
   12424:	bl	18cb8 <__assert_fail@plt+0x7ab4>
   12428:	ldrd	r2, [sp, #24]
   1242c:	subs	r6, r6, r2
   12430:	sbc	r7, r7, r3
   12434:	mov	r8, sl
   12438:	ldrd	r2, [sp, #16]
   1243c:	cmp	r5, r3
   12440:	cmpeq	r4, r2
   12444:	beq	124ac <__assert_fail@plt+0x12a8>
   12448:	subs	r4, r4, #1
   1244c:	sbc	r5, r5, #0
   12450:	ldrd	r2, [sp, #8]
   12454:	mov	r0, r6
   12458:	mov	r1, r7
   1245c:	bl	19870 <__assert_fail@plt+0x866c>
   12460:	mov	sl, r0
   12464:	ldrb	r9, [fp], #1
   12468:	cmp	r9, #13
   1246c:	ldrls	pc, [pc, r9, lsl #2]
   12470:	b	123c8 <__assert_fail@plt+0x11c4>
   12474:	andeq	r2, r1, ip, lsl #8
   12478:	andeq	r2, r1, r8, asr #7
   1247c:	andeq	r2, r1, r8, asr #7
   12480:	andeq	r2, r1, r8, asr #7
   12484:	andeq	r2, r1, r8, asr #7
   12488:	andeq	r2, r1, r8, asr #7
   1248c:	andeq	r2, r1, r8, asr #7
   12490:	andeq	r2, r1, r4, ror r3
   12494:	andeq	r2, r1, r0, lsl #7
   12498:			; <UNDEFINED> instruction: 0x000123b0
   1249c:	muleq	r1, r8, r3
   124a0:			; <UNDEFINED> instruction: 0x000123bc
   124a4:	andeq	r2, r1, ip, lsl #7
   124a8:	andeq	r2, r1, r4, lsr #7
   124ac:	add	sp, sp, #60	; 0x3c
   124b0:	ldrd	r4, [sp]
   124b4:	ldrd	r6, [sp, #8]
   124b8:	ldrd	r8, [sp, #16]
   124bc:	ldrd	sl, [sp, #24]
   124c0:	add	sp, sp, #32
   124c4:	pop	{pc}		; (ldr pc, [sp], #4)
   124c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   124cc:	strd	r6, [sp, #8]
   124d0:	str	r8, [sp, #16]
   124d4:	str	lr, [sp, #20]
   124d8:	mov	r8, #1
   124dc:	movw	r4, #49552	; 0xc190
   124e0:	movt	r4, #2
   124e4:	movw	r6, #40440	; 0x9df8
   124e8:	movt	r6, #1
   124ec:	movw	r7, #40460	; 0x9e0c
   124f0:	movt	r7, #1
   124f4:	b	12590 <__assert_fail@plt+0x138c>
   124f8:	mov	r1, r7
   124fc:	mov	r0, r5
   12500:	bl	111bc <fopen64@plt>
   12504:	str	r0, [r4, #36]	; 0x24
   12508:	cmp	r0, #0
   1250c:	beq	12550 <__assert_fail@plt+0x134c>
   12510:	movw	r3, #49552	; 0xc190
   12514:	movt	r3, #2
   12518:	ldrb	r3, [r3, #41]	; 0x29
   1251c:	cmp	r3, #0
   12520:	beq	12538 <__assert_fail@plt+0x1334>
   12524:	movw	r3, #49552	; 0xc190
   12528:	movt	r3, #2
   1252c:	ldrb	r3, [r3, #42]	; 0x2a
   12530:	cmp	r3, #0
   12534:	beq	125f0 <__assert_fail@plt+0x13ec>
   12538:	mov	r0, r8
   1253c:	ldrd	r4, [sp]
   12540:	ldrd	r6, [sp, #8]
   12544:	ldr	r8, [sp, #16]
   12548:	add	sp, sp, #20
   1254c:	pop	{pc}		; (ldr pc, [sp], #4)
   12550:	bl	110d8 <__errno_location@plt>
   12554:	ldr	r5, [r0]
   12558:	ldr	r2, [r4, #32]
   1255c:	mov	r1, #3
   12560:	mov	r0, #0
   12564:	bl	17fa8 <__assert_fail@plt+0x6da4>
   12568:	mov	r3, r0
   1256c:	movw	r2, #45376	; 0xb140
   12570:	movt	r2, #1
   12574:	mov	r1, r5
   12578:	mov	r0, #0
   1257c:	bl	1103c <error@plt>
   12580:	mov	r8, #0
   12584:	ldr	r0, [r4, #36]	; 0x24
   12588:	cmp	r0, #0
   1258c:	bne	12510 <__assert_fail@plt+0x130c>
   12590:	ldr	r3, [r4, #28]
   12594:	ldr	r5, [r3]
   12598:	str	r5, [r4, #32]
   1259c:	cmp	r5, #0
   125a0:	beq	12538 <__assert_fail@plt+0x1334>
   125a4:	add	r3, r3, #4
   125a8:	str	r3, [r4, #28]
   125ac:	mov	r1, r6
   125b0:	mov	r0, r5
   125b4:	bl	10f34 <strcmp@plt>
   125b8:	cmp	r0, #0
   125bc:	bne	124f8 <__assert_fail@plt+0x12f4>
   125c0:	mov	r2, #5
   125c4:	movw	r1, #40444	; 0x9dfc
   125c8:	movt	r1, #1
   125cc:	bl	10fc4 <dcgettext@plt>
   125d0:	str	r0, [r4, #32]
   125d4:	movw	r3, #49536	; 0xc180
   125d8:	movt	r3, #2
   125dc:	ldr	r3, [r3]
   125e0:	str	r3, [r4, #36]	; 0x24
   125e4:	mov	r3, #1
   125e8:	strb	r3, [r4, #40]	; 0x28
   125ec:	b	12584 <__assert_fail@plt+0x1380>
   125f0:	mov	r2, #2
   125f4:	mov	r1, r3
   125f8:	bl	110fc <setvbuf@plt>
   125fc:	b	12538 <__assert_fail@plt+0x1334>
   12600:	strd	r4, [sp, #-16]!
   12604:	str	r6, [sp, #8]
   12608:	str	lr, [sp, #12]
   1260c:	movw	r3, #49552	; 0xc190
   12610:	movt	r3, #2
   12614:	ldr	r5, [r3, #36]	; 0x24
   12618:	cmp	r5, #0
   1261c:	moveq	r0, #1
   12620:	beq	12684 <__assert_fail@plt+0x1480>
   12624:	mov	r4, r0
   12628:	ldr	r3, [r5]
   1262c:	and	r3, r3, #32
   12630:	cmp	r3, #0
   12634:	movne	r4, r0
   12638:	moveq	r4, r3
   1263c:	movw	r3, #49552	; 0xc190
   12640:	movt	r3, #2
   12644:	ldr	r3, [r3, #28]
   12648:	movw	r1, #40440	; 0x9df8
   1264c:	movt	r1, #1
   12650:	ldr	r0, [r3, #-4]
   12654:	bl	10f34 <strcmp@plt>
   12658:	cmp	r0, #0
   1265c:	bne	126ac <__assert_fail@plt+0x14a8>
   12660:	mov	r0, r5
   12664:	bl	111b0 <clearerr_unlocked@plt>
   12668:	cmp	r4, #0
   1266c:	moveq	r0, #1
   12670:	bne	126d8 <__assert_fail@plt+0x14d4>
   12674:	movw	r3, #49552	; 0xc190
   12678:	movt	r3, #2
   1267c:	mov	r2, #0
   12680:	str	r2, [r3, #36]	; 0x24
   12684:	movw	r3, #49540	; 0xc184
   12688:	movt	r3, #2
   1268c:	ldr	r3, [r3]
   12690:	ldr	r3, [r3]
   12694:	tst	r3, #32
   12698:	bne	12710 <__assert_fail@plt+0x150c>
   1269c:	ldrd	r4, [sp]
   126a0:	ldr	r6, [sp, #8]
   126a4:	add	sp, sp, #12
   126a8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ac:	mov	r0, r5
   126b0:	bl	15950 <__assert_fail@plt+0x474c>
   126b4:	adds	r0, r0, #0
   126b8:	movne	r0, #1
   126bc:	cmp	r4, #0
   126c0:	movne	r0, #0
   126c4:	cmp	r0, #0
   126c8:	beq	12668 <__assert_fail@plt+0x1464>
   126cc:	bl	110d8 <__errno_location@plt>
   126d0:	ldr	r4, [r0]
   126d4:	b	12668 <__assert_fail@plt+0x1464>
   126d8:	movw	r3, #49552	; 0xc190
   126dc:	movt	r3, #2
   126e0:	ldr	r2, [r3, #32]
   126e4:	mov	r1, #3
   126e8:	mov	r0, #0
   126ec:	bl	17fa8 <__assert_fail@plt+0x6da4>
   126f0:	mov	r3, r0
   126f4:	movw	r2, #45376	; 0xb140
   126f8:	movt	r2, #1
   126fc:	mov	r1, r4
   12700:	mov	r0, #0
   12704:	bl	1103c <error@plt>
   12708:	mov	r0, #0
   1270c:	b	12674 <__assert_fail@plt+0x1470>
   12710:	mov	r2, #5
   12714:	movw	r1, #40464	; 0x9e10
   12718:	movt	r1, #1
   1271c:	mov	r0, #0
   12720:	bl	10fc4 <dcgettext@plt>
   12724:	mov	r2, r0
   12728:	mov	r1, #0
   1272c:	mov	r0, r1
   12730:	bl	1103c <error@plt>
   12734:	mov	r0, #0
   12738:	b	1269c <__assert_fail@plt+0x1498>
   1273c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12740:	strd	r6, [sp, #8]
   12744:	strd	r8, [sp, #16]
   12748:	str	sl, [sp, #24]
   1274c:	str	lr, [sp, #28]
   12750:	sub	sp, sp, #8256	; 0x2040
   12754:	sub	sp, sp, #48	; 0x30
   12758:	mov	r4, r0
   1275c:	mov	r5, r1
   12760:	orrs	r3, r4, r5
   12764:	beq	12954 <__assert_fail@plt+0x1750>
   12768:	movw	r3, #49552	; 0xc190
   1276c:	movt	r3, #2
   12770:	ldr	r9, [r3, #36]	; 0x24
   12774:	cmp	r9, #0
   12778:	beq	12930 <__assert_fail@plt+0x172c>
   1277c:	mov	sl, #0
   12780:	mov	r8, #1
   12784:	movw	r7, #49552	; 0xc190
   12788:	movt	r7, #2
   1278c:	b	1287c <__assert_fail@plt+0x1678>
   12790:	mov	r3, #1
   12794:	str	r3, [sp]
   12798:	mov	r2, r4
   1279c:	mov	r3, r5
   127a0:	mov	r0, r9
   127a4:	bl	15adc <__assert_fail@plt+0x48d8>
   127a8:	cmp	r0, #0
   127ac:	movne	r8, #0
   127b0:	b	12960 <__assert_fail@plt+0x175c>
   127b4:	mov	r3, #1
   127b8:	str	r3, [sp]
   127bc:	mov	r2, r4
   127c0:	mov	r3, r5
   127c4:	mov	r0, r9
   127c8:	bl	15adc <__assert_fail@plt+0x48d8>
   127cc:	cmp	r0, #0
   127d0:	beq	12960 <__assert_fail@plt+0x175c>
   127d4:	orrs	r3, r4, r5
   127d8:	beq	12960 <__assert_fail@plt+0x175c>
   127dc:	mov	r6, #8192	; 0x2000
   127e0:	mov	r9, #1
   127e4:	b	127f4 <__assert_fail@plt+0x15f0>
   127e8:	mov	r6, r0
   127ec:	orrs	r3, r4, r5
   127f0:	beq	12960 <__assert_fail@plt+0x175c>
   127f4:	mov	r3, #0
   127f8:	cmp	r3, r5
   127fc:	cmpeq	r6, r4
   12800:	movhi	r6, r4
   12804:	ldr	r3, [r7, #36]	; 0x24
   12808:	str	r3, [sp]
   1280c:	mov	r3, r6
   12810:	mov	r2, r9
   12814:	mov	r1, #8192	; 0x2000
   12818:	add	r0, sp, #112	; 0x70
   1281c:	bl	11198 <__fread_unlocked_chk@plt>
   12820:	subs	r4, r4, r0
   12824:	sbc	r5, r5, #0
   12828:	cmp	r6, r0
   1282c:	beq	127e8 <__assert_fail@plt+0x15e4>
   12830:	ldr	r3, [r7, #36]	; 0x24
   12834:	ldr	r3, [r3]
   12838:	tst	r3, #32
   1283c:	bne	1295c <__assert_fail@plt+0x1758>
   12840:	tst	r3, #16
   12844:	beq	127ec <__assert_fail@plt+0x15e8>
   12848:	orrs	r3, r4, r5
   1284c:	beq	12960 <__assert_fail@plt+0x175c>
   12850:	mov	r6, sl
   12854:	mov	r0, sl
   12858:	bl	12600 <__assert_fail@plt+0x13fc>
   1285c:	and	r8, r8, r0
   12860:	uxtb	r8, r8
   12864:	bl	124c8 <__assert_fail@plt+0x12c4>
   12868:	and	r8, r8, r0
   1286c:	ldr	r9, [r7, #36]	; 0x24
   12870:	cmp	r9, #0
   12874:	beq	12928 <__assert_fail@plt+0x1724>
   12878:	mov	sl, r6
   1287c:	mov	r0, r9
   12880:	bl	11138 <fileno@plt>
   12884:	add	r2, sp, #8
   12888:	mov	r1, r0
   1288c:	mov	r0, #3
   12890:	bl	10ff4 <__fxstat64@plt>
   12894:	cmp	r0, #0
   12898:	bne	128ec <__assert_fail@plt+0x16e8>
   1289c:	ldr	r3, [sp, #24]
   128a0:	and	r3, r3, #53248	; 0xd000
   128a4:	cmp	r3, #32768	; 0x8000
   128a8:	bne	127b4 <__assert_fail@plt+0x15b0>
   128ac:	ldr	r2, [sp, #64]	; 0x40
   128b0:	sub	r3, r2, #1
   128b4:	cmp	r3, #536870912	; 0x20000000
   128b8:	movcs	r2, #512	; 0x200
   128bc:	ldrd	r0, [sp, #56]	; 0x38
   128c0:	asr	r3, r2, #31
   128c4:	cmp	r2, r0
   128c8:	sbcs	r3, r3, r1
   128cc:	bge	127d4 <__assert_fail@plt+0x15d0>
   128d0:	cmp	r1, r5
   128d4:	cmpeq	r0, r4
   128d8:	bcs	12790 <__assert_fail@plt+0x158c>
   128dc:	subs	r4, r4, r0
   128e0:	sbc	r5, r5, r1
   128e4:	mov	r6, sl
   128e8:	b	12854 <__assert_fail@plt+0x1650>
   128ec:	bl	110d8 <__errno_location@plt>
   128f0:	ldr	r6, [r0]
   128f4:	ldr	r2, [r7, #32]
   128f8:	mov	r1, #3
   128fc:	mov	r0, #0
   12900:	bl	17fa8 <__assert_fail@plt+0x6da4>
   12904:	mov	r3, r0
   12908:	movw	r2, #45376	; 0xb140
   1290c:	movt	r2, #1
   12910:	mov	r1, r6
   12914:	mov	r0, #0
   12918:	bl	1103c <error@plt>
   1291c:	mov	r6, sl
   12920:	mov	r8, #0
   12924:	b	12854 <__assert_fail@plt+0x1650>
   12928:	orrs	r3, r4, r5
   1292c:	beq	12960 <__assert_fail@plt+0x175c>
   12930:	mov	r2, #5
   12934:	movw	r1, #40476	; 0x9e1c
   12938:	movt	r1, #1
   1293c:	mov	r0, #0
   12940:	bl	10fc4 <dcgettext@plt>
   12944:	mov	r2, r0
   12948:	mov	r1, #0
   1294c:	mov	r0, #1
   12950:	bl	1103c <error@plt>
   12954:	mov	r8, #1
   12958:	b	12960 <__assert_fail@plt+0x175c>
   1295c:	mov	r8, #0
   12960:	mov	r0, r8
   12964:	add	sp, sp, #8256	; 0x2040
   12968:	add	sp, sp, #48	; 0x30
   1296c:	ldrd	r4, [sp]
   12970:	ldrd	r6, [sp, #8]
   12974:	ldrd	r8, [sp, #16]
   12978:	ldr	sl, [sp, #24]
   1297c:	add	sp, sp, #28
   12980:	pop	{pc}		; (ldr pc, [sp], #4)
   12984:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12988:	strd	r6, [sp, #8]
   1298c:	strd	r8, [sp, #16]
   12990:	str	sl, [sp, #24]
   12994:	str	lr, [sp, #28]
   12998:	subs	r8, r0, #0
   1299c:	beq	12a58 <__assert_fail@plt+0x1854>
   129a0:	mov	r9, r1
   129a4:	mov	r4, r2
   129a8:	movw	r3, #49552	; 0xc190
   129ac:	movt	r3, #2
   129b0:	ldr	r3, [r3, #44]	; 0x2c
   129b4:	cmp	r3, r8
   129b8:	bcc	12a58 <__assert_fail@plt+0x1854>
   129bc:	mov	r3, #0
   129c0:	str	r3, [r2]
   129c4:	movw	r3, #49552	; 0xc190
   129c8:	movt	r3, #2
   129cc:	ldr	r3, [r3, #36]	; 0x24
   129d0:	cmp	r3, #0
   129d4:	beq	12a74 <__assert_fail@plt+0x1870>
   129d8:	mov	r6, #1
   129dc:	mov	sl, r6
   129e0:	movw	r7, #49552	; 0xc190
   129e4:	movt	r7, #2
   129e8:	ldr	r0, [r4]
   129ec:	sub	r5, r8, r0
   129f0:	mov	r2, r5
   129f4:	mov	r1, sl
   129f8:	add	r0, r9, r0
   129fc:	bl	111d4 <fread_unlocked@plt>
   12a00:	ldr	r3, [r4]
   12a04:	add	r3, r3, r0
   12a08:	str	r3, [r4]
   12a0c:	cmp	r5, r0
   12a10:	beq	12a3c <__assert_fail@plt+0x1838>
   12a14:	bl	110d8 <__errno_location@plt>
   12a18:	ldr	r0, [r0]
   12a1c:	bl	12600 <__assert_fail@plt+0x13fc>
   12a20:	mov	r5, r0
   12a24:	bl	124c8 <__assert_fail@plt+0x12c4>
   12a28:	and	r0, r0, r5
   12a2c:	and	r6, r6, r0
   12a30:	ldr	r3, [r7, #36]	; 0x24
   12a34:	cmp	r3, #0
   12a38:	bne	129e8 <__assert_fail@plt+0x17e4>
   12a3c:	mov	r0, r6
   12a40:	ldrd	r4, [sp]
   12a44:	ldrd	r6, [sp, #8]
   12a48:	ldrd	r8, [sp, #16]
   12a4c:	ldr	sl, [sp, #24]
   12a50:	add	sp, sp, #28
   12a54:	pop	{pc}		; (ldr pc, [sp], #4)
   12a58:	ldr	r3, [pc, #28]	; 12a7c <__assert_fail@plt+0x1878>
   12a5c:	movw	r2, #1293	; 0x50d
   12a60:	movw	r1, #40516	; 0x9e44
   12a64:	movt	r1, #1
   12a68:	movw	r0, #40528	; 0x9e50
   12a6c:	movt	r0, #1
   12a70:	bl	11204 <__assert_fail@plt>
   12a74:	mov	r6, #1
   12a78:	b	12a3c <__assert_fail@plt+0x1838>
   12a7c:	andeq	r9, r1, r4, lsl fp
   12a80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12a84:	strd	r6, [sp, #8]
   12a88:	str	r8, [sp, #16]
   12a8c:	str	lr, [sp, #20]
   12a90:	mov	r6, r0
   12a94:	mvn	r3, #0
   12a98:	str	r3, [r0]
   12a9c:	movw	r3, #49552	; 0xc190
   12aa0:	movt	r3, #2
   12aa4:	ldr	r0, [r3, #36]	; 0x24
   12aa8:	cmp	r0, #0
   12aac:	beq	12b08 <__assert_fail@plt+0x1904>
   12ab0:	mov	r5, #1
   12ab4:	mov	r7, r3
   12ab8:	bl	11114 <fgetc@plt>
   12abc:	str	r0, [r6]
   12ac0:	cmn	r0, #1
   12ac4:	bne	12af0 <__assert_fail@plt+0x18ec>
   12ac8:	bl	110d8 <__errno_location@plt>
   12acc:	ldr	r0, [r0]
   12ad0:	bl	12600 <__assert_fail@plt+0x13fc>
   12ad4:	mov	r4, r0
   12ad8:	bl	124c8 <__assert_fail@plt+0x12c4>
   12adc:	and	r0, r0, r4
   12ae0:	and	r5, r5, r0
   12ae4:	ldr	r0, [r7, #36]	; 0x24
   12ae8:	cmp	r0, #0
   12aec:	bne	12ab8 <__assert_fail@plt+0x18b4>
   12af0:	mov	r0, r5
   12af4:	ldrd	r4, [sp]
   12af8:	ldrd	r6, [sp, #8]
   12afc:	ldr	r8, [sp, #16]
   12b00:	add	sp, sp, #20
   12b04:	pop	{pc}		; (ldr pc, [sp], #4)
   12b08:	mov	r5, #1
   12b0c:	b	12af0 <__assert_fail@plt+0x18ec>
   12b10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b14:	strd	r6, [sp, #8]
   12b18:	strd	r8, [sp, #16]
   12b1c:	strd	sl, [sp, #24]
   12b20:	str	lr, [sp, #32]
   12b24:	sub	sp, sp, #28
   12b28:	strd	r0, [sp, #16]
   12b2c:	mov	fp, r2
   12b30:	movw	r2, #49432	; 0xc118
   12b34:	movt	r2, #2
   12b38:	ldrb	r2, [r2]
   12b3c:	cmp	r2, #0
   12b40:	beq	12b6c <__assert_fail@plt+0x1968>
   12b44:	movw	r2, #49432	; 0xc118
   12b48:	movt	r2, #2
   12b4c:	ldrb	r2, [r2, #1]
   12b50:	cmp	r2, #0
   12b54:	bne	12b6c <__assert_fail@plt+0x1968>
   12b58:	movw	r2, #49552	; 0xc190
   12b5c:	movt	r2, #2
   12b60:	ldr	r2, [r2, #44]	; 0x2c
   12b64:	cmp	r2, fp
   12b68:	beq	12bac <__assert_fail@plt+0x19a8>
   12b6c:	movw	r3, #49552	; 0xc190
   12b70:	movt	r3, #2
   12b74:	mov	r2, #0
   12b78:	strb	r2, [r3, #48]	; 0x30
   12b7c:	ldr	r3, [r3]
   12b80:	cmp	r3, r2
   12b84:	beq	12bd8 <__assert_fail@plt+0x19d4>
   12b88:	mov	r6, r2
   12b8c:	movw	r5, #49552	; 0xc190
   12b90:	movt	r5, #2
   12b94:	movw	r3, #39532	; 0x9a6c
   12b98:	movt	r3, #1
   12b9c:	str	r3, [sp, #12]
   12ba0:	movw	r8, #49540	; 0xc184
   12ba4:	movt	r8, #2
   12ba8:	b	12cb8 <__assert_fail@plt+0x1ab4>
   12bac:	mov	r2, fp
   12bb0:	ldr	r1, [sp, #64]	; 0x40
   12bb4:	mov	r0, r3
   12bb8:	bl	10fac <memcmp@plt>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12b6c <__assert_fail@plt+0x1968>
   12bc4:	movw	r3, #49552	; 0xc190
   12bc8:	movt	r3, #2
   12bcc:	ldrb	r3, [r3, #48]	; 0x30
   12bd0:	cmp	r3, #0
   12bd4:	beq	12c04 <__assert_fail@plt+0x1a00>
   12bd8:	movw	r3, #49432	; 0xc118
   12bdc:	movt	r3, #2
   12be0:	mov	r2, #0
   12be4:	strb	r2, [r3, #1]
   12be8:	add	sp, sp, #28
   12bec:	ldrd	r4, [sp]
   12bf0:	ldrd	r6, [sp, #8]
   12bf4:	ldrd	r8, [sp, #16]
   12bf8:	ldrd	sl, [sp, #24]
   12bfc:	add	sp, sp, #32
   12c00:	pop	{pc}		; (ldr pc, [sp], #4)
   12c04:	movw	r0, #40560	; 0x9e70
   12c08:	movt	r0, #1
   12c0c:	bl	11054 <puts@plt>
   12c10:	movw	r3, #49552	; 0xc190
   12c14:	movt	r3, #2
   12c18:	mov	r2, #1
   12c1c:	strb	r2, [r3, #48]	; 0x30
   12c20:	b	12bd8 <__assert_fail@plt+0x19d4>
   12c24:	movw	r3, #43772	; 0xaafc
   12c28:	movt	r3, #1
   12c2c:	ldr	r2, [r5, #8]
   12c30:	movw	r1, #40392	; 0x9dc8
   12c34:	movt	r1, #1
   12c38:	mov	r0, #1
   12c3c:	bl	11120 <__printf_chk@plt>
   12c40:	ldr	r3, [r5, #4]
   12c44:	add	r3, r3, r7
   12c48:	ldr	r2, [r3, #28]
   12c4c:	str	r2, [sp, #4]
   12c50:	ldr	r2, [r3, #24]
   12c54:	str	r2, [sp]
   12c58:	ldr	sl, [r3, #8]
   12c5c:	add	r3, r3, #12
   12c60:	ldr	r2, [sp, #64]	; 0x40
   12c64:	mov	r1, r4
   12c68:	mov	r0, r9
   12c6c:	blx	sl
   12c70:	ldr	r3, [r5, #4]
   12c74:	add	r7, r3, r7
   12c78:	ldrb	r3, [r7, #21]
   12c7c:	cmp	r3, #0
   12c80:	bne	12cfc <__assert_fail@plt+0x1af8>
   12c84:	ldr	r0, [r8]
   12c88:	ldr	r3, [r0, #20]
   12c8c:	ldr	r2, [r0, #24]
   12c90:	cmp	r3, r2
   12c94:	addcc	r2, r3, #1
   12c98:	strcc	r2, [r0, #20]
   12c9c:	movcc	r2, #10
   12ca0:	strbcc	r2, [r3]
   12ca4:	bcs	12dd8 <__assert_fail@plt+0x1bd4>
   12ca8:	add	r6, r6, #1
   12cac:	ldr	r3, [r5]
   12cb0:	cmp	r3, r6
   12cb4:	bls	12bd8 <__assert_fail@plt+0x19d4>
   12cb8:	lsl	r7, r6, #5
   12cbc:	ldr	r4, [r5, #44]	; 0x2c
   12cc0:	ldr	r3, [r5, #4]
   12cc4:	add	r3, r3, r7
   12cc8:	ldr	r3, [r3, #4]
   12ccc:	ldr	r2, [sp, #12]
   12cd0:	ldr	r3, [r2, r3, lsl #2]
   12cd4:	udiv	r9, r4, r3
   12cd8:	sub	r4, r4, fp
   12cdc:	udiv	r4, r4, r3
   12ce0:	cmp	r6, #0
   12ce4:	bne	12c24 <__assert_fail@plt+0x1a20>
   12ce8:	ldr	r3, [r5, #52]	; 0x34
   12cec:	mov	r2, #0
   12cf0:	ldrd	r0, [sp, #16]
   12cf4:	blx	r3
   12cf8:	b	12c40 <__assert_fail@plt+0x1a3c>
   12cfc:	ldr	r2, [r7, #28]
   12d00:	mul	r2, r2, r4
   12d04:	sdiv	r9, r2, r9
   12d08:	ldr	r2, [r7, #24]
   12d0c:	movw	r3, #43772	; 0xaafc
   12d10:	movt	r3, #1
   12d14:	mla	r2, r2, r4, r9
   12d18:	movw	r1, #40392	; 0x9dc8
   12d1c:	movt	r1, #1
   12d20:	mov	r0, #1
   12d24:	bl	11120 <__printf_chk@plt>
   12d28:	ldr	r3, [r8]
   12d2c:	mov	r2, #3
   12d30:	mov	r1, #1
   12d34:	movw	r0, #40564	; 0x9e74
   12d38:	movt	r0, #1
   12d3c:	bl	10fa0 <fwrite_unlocked@plt>
   12d40:	cmp	fp, #0
   12d44:	beq	12da0 <__assert_fail@plt+0x1b9c>
   12d48:	bl	110a8 <__ctype_b_loc@plt>
   12d4c:	mov	r9, r0
   12d50:	ldr	r3, [sp, #64]	; 0x40
   12d54:	add	r7, r3, fp
   12d58:	mov	r4, r3
   12d5c:	ldrb	r1, [r4], #1
   12d60:	ldr	r2, [r9]
   12d64:	lsl	r3, r1, #1
   12d68:	ldrh	r3, [r2, r3]
   12d6c:	and	r3, r3, #16384	; 0x4000
   12d70:	cmp	r3, #0
   12d74:	moveq	r1, #46	; 0x2e
   12d78:	ldr	r0, [r8]
   12d7c:	ldr	r3, [r0, #20]
   12d80:	ldr	r2, [r0, #24]
   12d84:	cmp	r3, r2
   12d88:	addcc	r2, r3, #1
   12d8c:	strcc	r2, [r0, #20]
   12d90:	strbcc	r1, [r3]
   12d94:	bcs	12dd0 <__assert_fail@plt+0x1bcc>
   12d98:	cmp	r7, r4
   12d9c:	bne	12d5c <__assert_fail@plt+0x1b58>
   12da0:	ldr	r0, [r8]
   12da4:	ldr	r3, [r0, #20]
   12da8:	ldr	r2, [r0, #24]
   12dac:	cmp	r3, r2
   12db0:	addcc	r2, r3, #1
   12db4:	strcc	r2, [r0, #20]
   12db8:	movcc	r2, #60	; 0x3c
   12dbc:	strbcc	r2, [r3]
   12dc0:	bcc	12c84 <__assert_fail@plt+0x1a80>
   12dc4:	mov	r1, #60	; 0x3c
   12dc8:	bl	11168 <__overflow@plt>
   12dcc:	b	12c84 <__assert_fail@plt+0x1a80>
   12dd0:	bl	11168 <__overflow@plt>
   12dd4:	b	12d98 <__assert_fail@plt+0x1b94>
   12dd8:	mov	r1, #10
   12ddc:	bl	11168 <__overflow@plt>
   12de0:	b	12ca8 <__assert_fail@plt+0x1aa4>
   12de4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12de8:	strd	r6, [sp, #8]
   12dec:	strd	r8, [sp, #16]
   12df0:	strd	sl, [sp, #24]
   12df4:	str	lr, [sp, #32]
   12df8:	sub	sp, sp, #28
   12dfc:	subs	r3, r0, #0
   12e00:	str	r3, [sp, #16]
   12e04:	beq	12e3c <__assert_fail@plt+0x1c38>
   12e08:	ldrb	r3, [r3]
   12e0c:	cmp	r3, #0
   12e10:	moveq	r0, #1
   12e14:	beq	134b4 <__assert_fail@plt+0x22b0>
   12e18:	ldr	r6, [sp, #16]
   12e1c:	movw	r4, #49552	; 0xc190
   12e20:	movt	r4, #2
   12e24:	add	r3, r4, #56	; 0x38
   12e28:	str	r3, [sp, #12]
   12e2c:	movw	r3, #52429	; 0xcccd
   12e30:	movt	r3, #52428	; 0xcccc
   12e34:	str	r3, [sp, #20]
   12e38:	b	133c4 <__assert_fail@plt+0x21c0>
   12e3c:	ldr	r3, [pc, #1920]	; 135c4 <__assert_fail@plt+0x23c0>
   12e40:	movw	r2, #985	; 0x3d9
   12e44:	movw	r1, #40516	; 0x9e44
   12e48:	movt	r1, #1
   12e4c:	movw	r0, #40612	; 0x9ea4
   12e50:	movt	r0, #1
   12e54:	bl	11204 <__assert_fail@plt>
   12e58:	mov	r2, #32
   12e5c:	ldr	r1, [sp, #12]
   12e60:	ldr	r0, [r4, #4]
   12e64:	bl	18910 <__assert_fail@plt+0x770c>
   12e68:	str	r0, [r4, #4]
   12e6c:	b	133d4 <__assert_fail@plt+0x21d0>
   12e70:	ldr	r3, [pc, #1872]	; 135c8 <__assert_fail@plt+0x23c4>
   12e74:	mov	r2, #648	; 0x288
   12e78:	movw	r1, #40516	; 0x9e44
   12e7c:	movt	r1, #1
   12e80:	movw	r0, #40624	; 0x9eb0
   12e84:	movt	r0, #1
   12e88:	bl	11204 <__assert_fail@plt>
   12e8c:	ldrb	r3, [r6, #1]
   12e90:	sub	r1, r3, #67	; 0x43
   12e94:	cmp	r1, #16
   12e98:	ldrls	pc, [pc, r1, lsl #2]
   12e9c:	b	12ee4 <__assert_fail@plt+0x1ce0>
   12ea0:	andeq	r2, r1, ip, ror #30
   12ea4:	andeq	r2, r1, r4, ror #29
   12ea8:	andeq	r2, r1, r4, ror #29
   12eac:	andeq	r2, r1, r4, ror #29
   12eb0:	andeq	r2, r1, r4, ror #29
   12eb4:	andeq	r2, r1, r4, ror #29
   12eb8:	andeq	r2, r1, ip, ror #31
   12ebc:	andeq	r2, r1, r4, ror #29
   12ec0:	andeq	r2, r1, r4, ror #29
   12ec4:	strdeq	r2, [r1], -r8
   12ec8:	andeq	r2, r1, r4, ror #29
   12ecc:	andeq	r2, r1, r4, ror #29
   12ed0:	andeq	r2, r1, r4, ror #29
   12ed4:	andeq	r2, r1, r4, ror #29
   12ed8:	andeq	r2, r1, r4, ror #29
   12edc:	andeq	r2, r1, r4, ror #29
   12ee0:	andeq	r2, r1, r0, ror #31
   12ee4:	add	ip, r6, #1
   12ee8:	sub	r1, r3, #48	; 0x30
   12eec:	cmp	r1, #9
   12ef0:	bhi	13004 <__assert_fail@plt+0x1e00>
   12ef4:	mov	r3, r1
   12ef8:	add	r0, r6, #2
   12efc:	mov	sl, #0
   12f00:	ldr	lr, [sp, #20]
   12f04:	mov	r5, r0
   12f08:	add	sl, sl, sl, lsl #2
   12f0c:	add	sl, r3, sl, lsl #1
   12f10:	ldrb	r3, [r0], #1
   12f14:	sub	r1, r3, #48	; 0x30
   12f18:	cmp	r1, #9
   12f1c:	bhi	1350c <__assert_fail@plt+0x2308>
   12f20:	sub	r3, r3, #48	; 0x30
   12f24:	mvn	r1, r3
   12f28:	umull	r5, r1, lr, r1
   12f2c:	cmp	sl, r1, lsr #3
   12f30:	bls	12f04 <__assert_fail@plt+0x1d00>
   12f34:	mov	r2, #5
   12f38:	movw	r1, #40880	; 0x9fb0
   12f3c:	movt	r1, #1
   12f40:	mov	r0, #0
   12f44:	bl	10fc4 <dcgettext@plt>
   12f48:	mov	r4, r0
   12f4c:	ldr	r0, [sp, #16]
   12f50:	bl	18174 <__assert_fail@plt+0x6f70>
   12f54:	mov	r3, r0
   12f58:	mov	r2, r4
   12f5c:	mov	r1, #0
   12f60:	mov	r0, r1
   12f64:	bl	1103c <error@plt>
   12f68:	b	134b0 <__assert_fail@plt+0x22ac>
   12f6c:	add	r5, r6, #2
   12f70:	mov	sl, #1
   12f74:	add	r3, r4, sl, lsl #2
   12f78:	ldr	fp, [r3, #60]	; 0x3c
   12f7c:	sub	r2, r2, #100	; 0x64
   12f80:	cmp	r2, #20
   12f84:	ldrls	pc, [pc, r2, lsl #2]
   12f88:	b	131c0 <__assert_fail@plt+0x1fbc>
   12f8c:	andeq	r3, r1, r8, lsl r0
   12f90:	andeq	r3, r1, r0, asr #3
   12f94:	andeq	r3, r1, r0, asr #3
   12f98:	andeq	r3, r1, r0, asr #3
   12f9c:	andeq	r3, r1, r0, asr #3
   12fa0:	andeq	r3, r1, r0, asr #3
   12fa4:	andeq	r3, r1, r0, asr #3
   12fa8:	andeq	r3, r1, r0, asr #3
   12fac:	andeq	r3, r1, r0, asr #3
   12fb0:	andeq	r3, r1, r0, asr #3
   12fb4:	andeq	r3, r1, r0, asr #3
   12fb8:	muleq	r1, r8, r0
   12fbc:	andeq	r3, r1, r0, asr #3
   12fc0:	andeq	r3, r1, r0, asr #3
   12fc4:	andeq	r3, r1, r0, asr #3
   12fc8:	andeq	r3, r1, r0, asr #3
   12fcc:	andeq	r3, r1, r0, asr #3
   12fd0:	strdeq	r3, [r1], -ip
   12fd4:	andeq	r3, r1, r0, asr #3
   12fd8:	andeq	r3, r1, r0, asr #3
   12fdc:	andeq	r3, r1, ip, asr r1
   12fe0:	add	r5, r6, #2
   12fe4:	mov	sl, #2
   12fe8:	b	12f74 <__assert_fail@plt+0x1d70>
   12fec:	add	r5, r6, #2
   12ff0:	mov	sl, #4
   12ff4:	b	12f74 <__assert_fail@plt+0x1d70>
   12ff8:	add	r5, r6, #2
   12ffc:	mov	sl, #4
   13000:	b	12f74 <__assert_fail@plt+0x1d70>
   13004:	mov	r5, ip
   13008:	mov	sl, #4
   1300c:	b	12f74 <__assert_fail@plt+0x1d70>
   13010:	mov	sl, #4
   13014:	b	12f74 <__assert_fail@plt+0x1d70>
   13018:	movw	r3, #39532	; 0x9a6c
   1301c:	movt	r3, #1
   13020:	add	sl, r3, sl, lsl #2
   13024:	ldr	sl, [sl, #224]	; 0xe0
   13028:	add	r0, r7, #12
   1302c:	cmp	fp, #5
   13030:	beq	1308c <__assert_fail@plt+0x1e88>
   13034:	movw	r3, #40572	; 0x9e7c
   13038:	movt	r3, #1
   1303c:	movw	r2, #40576	; 0x9e80
   13040:	movt	r2, #1
   13044:	cmp	fp, #4
   13048:	movne	r3, r2
   1304c:	str	r3, [sp]
   13050:	movw	r3, #40720	; 0x9f10
   13054:	movt	r3, #1
   13058:	mov	r2, #9
   1305c:	mov	r1, #1
   13060:	bl	110e4 <__sprintf_chk@plt>
   13064:	mov	r2, #0
   13068:	sub	r3, fp, #1
   1306c:	cmp	r3, #4
   13070:	ldrls	pc, [pc, r3, lsl #2]
   13074:	b	13208 <__assert_fail@plt+0x2004>
   13078:	ldrdeq	r3, [r1], -r0
   1307c:	andeq	r3, r1, ip, ror #3
   13080:	ldrdeq	r3, [r1], -r0
   13084:	andeq	r3, r1, r4, asr #3
   13088:	ldrdeq	r3, [r1], -ip
   1308c:	movw	r3, #40568	; 0x9e78
   13090:	movt	r3, #1
   13094:	b	1304c <__assert_fail@plt+0x1e48>
   13098:	add	r0, r7, #12
   1309c:	movw	r3, #39532	; 0x9a6c
   130a0:	movt	r3, #1
   130a4:	add	sl, r3, sl, lsl #2
   130a8:	ldr	sl, [sl, #292]	; 0x124
   130ac:	cmp	fp, #5
   130b0:	beq	130f0 <__assert_fail@plt+0x1eec>
   130b4:	movw	r3, #40584	; 0x9e88
   130b8:	movt	r3, #1
   130bc:	movw	r2, #40588	; 0x9e8c
   130c0:	movt	r2, #1
   130c4:	cmp	fp, #4
   130c8:	movne	r3, r2
   130cc:	str	r3, [sp, #4]
   130d0:	str	sl, [sp]
   130d4:	movw	r3, #40728	; 0x9f18
   130d8:	movt	r3, #1
   130dc:	mov	r2, #9
   130e0:	mov	r1, #1
   130e4:	bl	110e4 <__sprintf_chk@plt>
   130e8:	mov	r2, #2
   130ec:	b	13068 <__assert_fail@plt+0x1e64>
   130f0:	movw	r3, #40580	; 0x9e84
   130f4:	movt	r3, #1
   130f8:	b	130cc <__assert_fail@plt+0x1ec8>
   130fc:	movw	r3, #39532	; 0x9a6c
   13100:	movt	r3, #1
   13104:	add	sl, r3, sl, lsl #2
   13108:	ldr	sl, [sl, #360]	; 0x168
   1310c:	add	r0, r7, #12
   13110:	cmp	fp, #5
   13114:	beq	13150 <__assert_fail@plt+0x1f4c>
   13118:	movw	r3, #40596	; 0x9e94
   1311c:	movt	r3, #1
   13120:	movw	r2, #40600	; 0x9e98
   13124:	movt	r2, #1
   13128:	cmp	fp, #4
   1312c:	movne	r3, r2
   13130:	str	r3, [sp]
   13134:	movw	r3, #40720	; 0x9f10
   13138:	movt	r3, #1
   1313c:	mov	r2, #9
   13140:	mov	r1, #1
   13144:	bl	110e4 <__sprintf_chk@plt>
   13148:	mov	r2, #1
   1314c:	b	13068 <__assert_fail@plt+0x1e64>
   13150:	movw	r3, #40592	; 0x9e90
   13154:	movt	r3, #1
   13158:	b	13130 <__assert_fail@plt+0x1f2c>
   1315c:	add	r0, r7, #12
   13160:	movw	r3, #39532	; 0x9a6c
   13164:	movt	r3, #1
   13168:	add	sl, r3, sl, lsl #2
   1316c:	ldr	sl, [sl, #428]	; 0x1ac
   13170:	cmp	fp, #5
   13174:	beq	131b4 <__assert_fail@plt+0x1fb0>
   13178:	movw	r3, #40608	; 0x9ea0
   1317c:	movt	r3, #1
   13180:	movw	r2, #45148	; 0xb05c
   13184:	movt	r2, #1
   13188:	cmp	fp, #4
   1318c:	movne	r3, r2
   13190:	str	r3, [sp, #4]
   13194:	str	sl, [sp]
   13198:	movw	r3, #40728	; 0x9f18
   1319c:	movt	r3, #1
   131a0:	mov	r2, #9
   131a4:	mov	r1, #1
   131a8:	bl	110e4 <__sprintf_chk@plt>
   131ac:	mov	r2, #3
   131b0:	b	13068 <__assert_fail@plt+0x1e64>
   131b4:	movw	r3, #40604	; 0x9e9c
   131b8:	movt	r3, #1
   131bc:	b	13190 <__assert_fail@plt+0x1f8c>
   131c0:	bl	111ec <abort@plt>
   131c4:	movw	r3, #6368	; 0x18e0
   131c8:	movt	r3, #1
   131cc:	b	13378 <__assert_fail@plt+0x2174>
   131d0:	movw	r3, #7740	; 0x1e3c
   131d4:	movt	r3, #1
   131d8:	movw	r1, #7520	; 0x1d60
   131dc:	movt	r1, #1
   131e0:	cmp	r2, #0
   131e4:	movne	r3, r1
   131e8:	b	13378 <__assert_fail@plt+0x2174>
   131ec:	movw	r3, #7240	; 0x1c48
   131f0:	movt	r3, #1
   131f4:	movw	r1, #6960	; 0x1b30
   131f8:	movt	r1, #1
   131fc:	cmp	r2, #0
   13200:	movne	r3, r1
   13204:	b	13378 <__assert_fail@plt+0x2174>
   13208:	bl	111ec <abort@plt>
   1320c:	ldrb	r3, [r6, #1]
   13210:	cmp	r3, #70	; 0x46
   13214:	beq	132b0 <__assert_fail@plt+0x20ac>
   13218:	cmp	r3, #76	; 0x4c
   1321c:	beq	13314 <__assert_fail@plt+0x2110>
   13220:	cmp	r3, #68	; 0x44
   13224:	beq	13308 <__assert_fail@plt+0x2104>
   13228:	add	r1, r6, #1
   1322c:	sub	r2, r3, #48	; 0x30
   13230:	cmp	r2, #9
   13234:	bhi	13320 <__assert_fail@plt+0x211c>
   13238:	mov	r3, r2
   1323c:	add	r0, r6, #2
   13240:	mov	sl, #0
   13244:	ldr	ip, [sp, #20]
   13248:	mov	r5, r0
   1324c:	add	sl, sl, sl, lsl #2
   13250:	add	sl, r3, sl, lsl #1
   13254:	ldrb	r3, [r0], #1
   13258:	sub	r2, r3, #48	; 0x30
   1325c:	cmp	r2, #9
   13260:	bhi	13568 <__assert_fail@plt+0x2364>
   13264:	sub	r3, r3, #48	; 0x30
   13268:	mvn	r2, r3
   1326c:	umull	lr, r2, ip, r2
   13270:	cmp	sl, r2, lsr #3
   13274:	bls	13248 <__assert_fail@plt+0x2044>
   13278:	mov	r2, #5
   1327c:	movw	r1, #40880	; 0x9fb0
   13280:	movt	r1, #1
   13284:	mov	r0, #0
   13288:	bl	10fc4 <dcgettext@plt>
   1328c:	mov	r4, r0
   13290:	ldr	r0, [sp, #16]
   13294:	bl	18174 <__assert_fail@plt+0x6f70>
   13298:	mov	r3, r0
   1329c:	mov	r2, r4
   132a0:	mov	r1, #0
   132a4:	mov	r0, r1
   132a8:	bl	1103c <error@plt>
   132ac:	b	134b0 <__assert_fail@plt+0x22ac>
   132b0:	add	r5, r6, #2
   132b4:	mov	sl, #4
   132b8:	add	sl, r4, sl, lsl #2
   132bc:	ldr	fp, [sl, #96]	; 0x60
   132c0:	bl	111a4 <localeconv@plt>
   132c4:	ldr	r0, [r0]
   132c8:	ldrb	r3, [r0]
   132cc:	cmp	r3, #0
   132d0:	moveq	r0, #1
   132d4:	beq	132dc <__assert_fail@plt+0x20d8>
   132d8:	bl	110c0 <strlen@plt>
   132dc:	cmp	fp, #7
   132e0:	beq	13334 <__assert_fail@plt+0x2130>
   132e4:	cmp	fp, #8
   132e8:	beq	13348 <__assert_fail@plt+0x2144>
   132ec:	cmp	fp, #6
   132f0:	bne	1335c <__assert_fail@plt+0x2158>
   132f4:	add	sl, r0, #14
   132f8:	movw	r3, #8600	; 0x2198
   132fc:	movt	r3, #1
   13300:	mov	r2, #4
   13304:	b	13378 <__assert_fail@plt+0x2174>
   13308:	add	r5, r6, #2
   1330c:	mov	sl, #8
   13310:	b	132b8 <__assert_fail@plt+0x20b4>
   13314:	add	r5, r6, #2
   13318:	mov	sl, #8
   1331c:	b	132b8 <__assert_fail@plt+0x20b4>
   13320:	mov	r5, r1
   13324:	mov	sl, #8
   13328:	b	132b8 <__assert_fail@plt+0x20b4>
   1332c:	mov	sl, #8
   13330:	b	132b8 <__assert_fail@plt+0x20b4>
   13334:	add	sl, r0, #23
   13338:	movw	r3, #8280	; 0x2058
   1333c:	movt	r3, #1
   13340:	mov	r2, #4
   13344:	b	13378 <__assert_fail@plt+0x2174>
   13348:	add	sl, r0, #23
   1334c:	movw	r3, #7960	; 0x1f18
   13350:	movt	r3, #1
   13354:	mov	r2, #4
   13358:	b	13378 <__assert_fail@plt+0x2174>
   1335c:	bl	111ec <abort@plt>
   13360:	add	r5, r6, #1
   13364:	mov	sl, #3
   13368:	movw	r3, #5784	; 0x1698
   1336c:	movt	r3, #1
   13370:	mov	r2, #5
   13374:	mov	fp, #1
   13378:	str	fp, [r7, #4]
   1337c:	str	r2, [r9, r8, lsl #5]
   13380:	str	r3, [r7, #8]
   13384:	str	sl, [r7, #24]
   13388:	ldrb	r3, [r5]
   1338c:	cmp	r3, #122	; 0x7a
   13390:	moveq	r3, #1
   13394:	movne	r3, #0
   13398:	strb	r3, [r7, #21]
   1339c:	addeq	r5, r5, #1
   133a0:	cmp	r6, r5
   133a4:	beq	134e8 <__assert_fail@plt+0x22e4>
   133a8:	ldr	r3, [r4]
   133ac:	add	r3, r3, #1
   133b0:	str	r3, [r4]
   133b4:	mov	r6, r5
   133b8:	ldrb	r3, [r5]
   133bc:	cmp	r3, #0
   133c0:	beq	13504 <__assert_fail@plt+0x2300>
   133c4:	ldr	r2, [r4, #56]	; 0x38
   133c8:	ldr	r3, [r4]
   133cc:	cmp	r2, r3
   133d0:	bls	12e58 <__assert_fail@plt+0x1c54>
   133d4:	ldr	r8, [r4]
   133d8:	ldr	r9, [r4, #4]
   133dc:	adds	r7, r9, r8, lsl #5
   133e0:	beq	12e70 <__assert_fail@plt+0x1c6c>
   133e4:	ldrb	r2, [r6]
   133e8:	sub	r3, r2, #97	; 0x61
   133ec:	cmp	r3, #23
   133f0:	ldrls	pc, [pc, r3, lsl #2]
   133f4:	b	13474 <__assert_fail@plt+0x2270>
   133f8:	andeq	r3, r1, r0, ror #6
   133fc:	andeq	r3, r1, r4, ror r4
   13400:	andeq	r3, r1, r8, asr r4
   13404:	andeq	r2, r1, ip, lsl #29
   13408:	andeq	r3, r1, r4, ror r4
   1340c:	andeq	r3, r1, ip, lsl #4
   13410:	andeq	r3, r1, r4, ror r4
   13414:	andeq	r3, r1, r4, ror r4
   13418:	andeq	r3, r1, r4, ror r4
   1341c:	andeq	r3, r1, r4, ror r4
   13420:	andeq	r3, r1, r4, ror r4
   13424:	andeq	r3, r1, r4, ror r4
   13428:	andeq	r3, r1, r4, ror r4
   1342c:	andeq	r3, r1, r4, ror r4
   13430:	andeq	r2, r1, ip, lsl #29
   13434:	andeq	r3, r1, r4, ror r4
   13438:	andeq	r3, r1, r4, ror r4
   1343c:	andeq	r3, r1, r4, ror r4
   13440:	andeq	r3, r1, r4, ror r4
   13444:	andeq	r3, r1, r4, ror r4
   13448:	andeq	r2, r1, ip, lsl #29
   1344c:	andeq	r3, r1, r4, ror r4
   13450:	andeq	r3, r1, r4, ror r4
   13454:	andeq	r2, r1, ip, lsl #29
   13458:	add	r5, r6, #1
   1345c:	mov	sl, #3
   13460:	movw	r3, #8932	; 0x22e4
   13464:	movt	r3, #1
   13468:	mov	r2, #6
   1346c:	mov	fp, #1
   13470:	b	13378 <__assert_fail@plt+0x2174>
   13474:	mov	r2, #5
   13478:	movw	r1, #40824	; 0x9f78
   1347c:	movt	r1, #1
   13480:	mov	r0, #0
   13484:	bl	10fc4 <dcgettext@plt>
   13488:	mov	r4, r0
   1348c:	ldrb	r5, [r6]
   13490:	ldr	r0, [sp, #16]
   13494:	bl	18174 <__assert_fail@plt+0x6f70>
   13498:	str	r0, [sp]
   1349c:	mov	r3, r5
   134a0:	mov	r2, r4
   134a4:	mov	r1, #0
   134a8:	mov	r0, r1
   134ac:	bl	1103c <error@plt>
   134b0:	mov	r0, #0
   134b4:	add	sp, sp, #28
   134b8:	ldrd	r4, [sp]
   134bc:	ldrd	r6, [sp, #8]
   134c0:	ldrd	r8, [sp, #16]
   134c4:	ldrd	sl, [sp, #24]
   134c8:	add	sp, sp, #32
   134cc:	pop	{pc}		; (ldr pc, [sp], #4)
   134d0:	movw	r3, #6664	; 0x1a08
   134d4:	movt	r3, #1
   134d8:	b	13378 <__assert_fail@plt+0x2174>
   134dc:	movw	r3, #6084	; 0x17c4
   134e0:	movt	r3, #1
   134e4:	b	13378 <__assert_fail@plt+0x2174>
   134e8:	ldr	r3, [pc, #212]	; 135c4 <__assert_fail@plt+0x23c0>
   134ec:	movw	r2, #997	; 0x3e5
   134f0:	movw	r1, #40516	; 0x9e44
   134f4:	movt	r1, #1
   134f8:	movw	r0, #40868	; 0x9fa4
   134fc:	movt	r0, #1
   13500:	bl	11204 <__assert_fail@plt>
   13504:	mov	r0, #1
   13508:	b	134b4 <__assert_fail@plt+0x22b0>
   1350c:	cmp	ip, r5
   13510:	beq	13010 <__assert_fail@plt+0x1e0c>
   13514:	cmp	sl, #8
   13518:	bhi	1352c <__assert_fail@plt+0x2328>
   1351c:	add	r3, r4, sl, lsl #2
   13520:	ldr	r3, [r3, #60]	; 0x3c
   13524:	cmp	r3, #0
   13528:	bne	12f74 <__assert_fail@plt+0x1d70>
   1352c:	mov	r2, #5
   13530:	movw	r1, #40640	; 0x9ec0
   13534:	movt	r1, #1
   13538:	mov	r0, #0
   1353c:	bl	10fc4 <dcgettext@plt>
   13540:	mov	r4, r0
   13544:	ldr	r0, [sp, #16]
   13548:	bl	18174 <__assert_fail@plt+0x6f70>
   1354c:	str	sl, [sp]
   13550:	mov	r3, r0
   13554:	mov	r2, r4
   13558:	mov	r1, #0
   1355c:	mov	r0, r1
   13560:	bl	1103c <error@plt>
   13564:	b	134b0 <__assert_fail@plt+0x22ac>
   13568:	cmp	r1, r5
   1356c:	beq	1332c <__assert_fail@plt+0x2128>
   13570:	cmp	sl, #8
   13574:	bhi	13588 <__assert_fail@plt+0x2384>
   13578:	add	r3, r4, sl, lsl #2
   1357c:	ldr	r3, [r3, #96]	; 0x60
   13580:	cmp	r3, #0
   13584:	bne	132b8 <__assert_fail@plt+0x20b4>
   13588:	mov	r2, #5
   1358c:	movw	r1, #40740	; 0x9f24
   13590:	movt	r1, #1
   13594:	mov	r0, #0
   13598:	bl	10fc4 <dcgettext@plt>
   1359c:	mov	r4, r0
   135a0:	ldr	r0, [sp, #16]
   135a4:	bl	18174 <__assert_fail@plt+0x6f70>
   135a8:	str	sl, [sp]
   135ac:	mov	r3, r0
   135b0:	mov	r2, r4
   135b4:	mov	r1, #0
   135b8:	mov	r0, r1
   135bc:	bl	1103c <error@plt>
   135c0:	b	134b0 <__assert_fail@plt+0x22ac>
   135c4:	andeq	r9, r1, r0, lsr #22
   135c8:	andeq	r9, r1, r8, lsr fp
   135cc:	push	{lr}		; (str lr, [sp, #-4]!)
   135d0:	sub	sp, sp, #68	; 0x44
   135d4:	subs	r5, r0, #0
   135d8:	beq	13620 <__assert_fail@plt+0x241c>
   135dc:	movw	r3, #49528	; 0xc178
   135e0:	movt	r3, #2
   135e4:	ldr	r4, [r3]
   135e8:	mov	r2, #5
   135ec:	movw	r1, #40908	; 0x9fcc
   135f0:	movt	r1, #1
   135f4:	mov	r0, #0
   135f8:	bl	10fc4 <dcgettext@plt>
   135fc:	movw	r3, #49728	; 0xc240
   13600:	movt	r3, #2
   13604:	ldr	r3, [r3]
   13608:	mov	r2, r0
   1360c:	mov	r1, #1
   13610:	mov	r0, r4
   13614:	bl	11144 <__fprintf_chk@plt>
   13618:	mov	r0, r5
   1361c:	bl	110b4 <exit@plt>
   13620:	mov	r2, #5
   13624:	movw	r1, #40948	; 0x9ff4
   13628:	movt	r1, #1
   1362c:	mov	r0, #0
   13630:	bl	10fc4 <dcgettext@plt>
   13634:	movw	r3, #49728	; 0xc240
   13638:	movt	r3, #2
   1363c:	ldr	r2, [r3]
   13640:	str	r2, [sp]
   13644:	mov	r3, r2
   13648:	mov	r1, r0
   1364c:	mov	r0, #1
   13650:	bl	11120 <__printf_chk@plt>
   13654:	mov	r2, #5
   13658:	movw	r1, #41112	; 0xa098
   1365c:	movt	r1, #1
   13660:	mov	r0, #0
   13664:	bl	10fc4 <dcgettext@plt>
   13668:	movw	r4, #49540	; 0xc184
   1366c:	movt	r4, #2
   13670:	ldr	r1, [r4]
   13674:	bl	10f1c <fputs_unlocked@plt>
   13678:	mov	r2, #5
   1367c:	movw	r1, #41296	; 0xa150
   13680:	movt	r1, #1
   13684:	mov	r0, #0
   13688:	bl	10fc4 <dcgettext@plt>
   1368c:	ldr	r1, [r4]
   13690:	bl	10f1c <fputs_unlocked@plt>
   13694:	mov	r2, #5
   13698:	movw	r1, #41352	; 0xa188
   1369c:	movt	r1, #1
   136a0:	mov	r0, #0
   136a4:	bl	10fc4 <dcgettext@plt>
   136a8:	ldr	r1, [r4]
   136ac:	bl	10f1c <fputs_unlocked@plt>
   136b0:	mov	r2, #5
   136b4:	movw	r1, #41744	; 0xa310
   136b8:	movt	r1, #1
   136bc:	mov	r0, #0
   136c0:	bl	10fc4 <dcgettext@plt>
   136c4:	ldr	r1, [r4]
   136c8:	bl	10f1c <fputs_unlocked@plt>
   136cc:	mov	r2, #5
   136d0:	movw	r1, #41820	; 0xa35c
   136d4:	movt	r1, #1
   136d8:	mov	r0, #0
   136dc:	bl	10fc4 <dcgettext@plt>
   136e0:	ldr	r1, [r4]
   136e4:	bl	10f1c <fputs_unlocked@plt>
   136e8:	mov	r2, #5
   136ec:	movw	r1, #42108	; 0xa47c
   136f0:	movt	r1, #1
   136f4:	mov	r0, #0
   136f8:	bl	10fc4 <dcgettext@plt>
   136fc:	ldr	r1, [r4]
   13700:	bl	10f1c <fputs_unlocked@plt>
   13704:	mov	r2, #5
   13708:	movw	r1, #42660	; 0xa6a4
   1370c:	movt	r1, #1
   13710:	mov	r0, #0
   13714:	bl	10fc4 <dcgettext@plt>
   13718:	ldr	r1, [r4]
   1371c:	bl	10f1c <fputs_unlocked@plt>
   13720:	mov	r2, #5
   13724:	movw	r1, #42708	; 0xa6d4
   13728:	movt	r1, #1
   1372c:	mov	r0, #0
   13730:	bl	10fc4 <dcgettext@plt>
   13734:	ldr	r1, [r4]
   13738:	bl	10f1c <fputs_unlocked@plt>
   1373c:	mov	r2, #5
   13740:	movw	r1, #42764	; 0xa70c
   13744:	movt	r1, #1
   13748:	mov	r0, #0
   1374c:	bl	10fc4 <dcgettext@plt>
   13750:	ldr	r1, [r4]
   13754:	bl	10f1c <fputs_unlocked@plt>
   13758:	mov	r2, #5
   1375c:	movw	r1, #43080	; 0xa848
   13760:	movt	r1, #1
   13764:	mov	r0, #0
   13768:	bl	10fc4 <dcgettext@plt>
   1376c:	ldr	r1, [r4]
   13770:	bl	10f1c <fputs_unlocked@plt>
   13774:	mov	r2, #5
   13778:	movw	r1, #43356	; 0xa95c
   1377c:	movt	r1, #1
   13780:	mov	r0, #0
   13784:	bl	10fc4 <dcgettext@plt>
   13788:	ldr	r1, [r4]
   1378c:	bl	10f1c <fputs_unlocked@plt>
   13790:	mov	r2, #5
   13794:	movw	r1, #43524	; 0xaa04
   13798:	movt	r1, #1
   1379c:	mov	r0, #0
   137a0:	bl	10fc4 <dcgettext@plt>
   137a4:	ldr	r1, [r4]
   137a8:	bl	10f1c <fputs_unlocked@plt>
   137ac:	mov	r2, #5
   137b0:	movw	r1, #43776	; 0xab00
   137b4:	movt	r1, #1
   137b8:	mov	r0, #0
   137bc:	bl	10fc4 <dcgettext@plt>
   137c0:	ldr	r1, [r4]
   137c4:	bl	10f1c <fputs_unlocked@plt>
   137c8:	mov	r2, #5
   137cc:	movw	r1, #44020	; 0xabf4
   137d0:	movt	r1, #1
   137d4:	mov	r0, #0
   137d8:	bl	10fc4 <dcgettext@plt>
   137dc:	ldr	r1, [r4]
   137e0:	bl	10f1c <fputs_unlocked@plt>
   137e4:	mov	r2, #5
   137e8:	movw	r1, #44116	; 0xac54
   137ec:	movt	r1, #1
   137f0:	mov	r0, #0
   137f4:	bl	10fc4 <dcgettext@plt>
   137f8:	ldr	r1, [r4]
   137fc:	bl	10f1c <fputs_unlocked@plt>
   13800:	ldr	r0, [pc, #648]	; 13a90 <__assert_fail@plt+0x288c>
   13804:	ldr	r1, [r0]
   13808:	ldr	r3, [r0, #4]
   1380c:	str	r1, [sp, #8]
   13810:	str	r3, [sp, #12]
   13814:	ldrd	r2, [r0, #8]
   13818:	strd	r2, [sp, #16]
   1381c:	ldrd	r2, [r0, #16]
   13820:	strd	r2, [sp, #24]
   13824:	ldrd	r2, [r0, #24]
   13828:	strd	r2, [sp, #32]
   1382c:	ldrd	r2, [r0, #32]
   13830:	strd	r2, [sp, #40]	; 0x28
   13834:	ldrd	r2, [r0, #40]	; 0x28
   13838:	strd	r2, [sp, #48]	; 0x30
   1383c:	ldrd	r2, [r0, #48]	; 0x30
   13840:	strd	r2, [sp, #56]	; 0x38
   13844:	cmp	r1, #0
   13848:	addeq	r4, sp, #8
   1384c:	beq	13878 <__assert_fail@plt+0x2674>
   13850:	add	r4, sp, #8
   13854:	movw	r6, #40904	; 0x9fc8
   13858:	movt	r6, #1
   1385c:	mov	r0, r6
   13860:	bl	10f34 <strcmp@plt>
   13864:	cmp	r0, #0
   13868:	beq	13878 <__assert_fail@plt+0x2674>
   1386c:	ldr	r1, [r4, #8]!
   13870:	cmp	r1, #0
   13874:	bne	1385c <__assert_fail@plt+0x2658>
   13878:	ldr	r4, [r4, #4]
   1387c:	cmp	r4, #0
   13880:	beq	139dc <__assert_fail@plt+0x27d8>
   13884:	mov	r2, #5
   13888:	movw	r1, #44348	; 0xad3c
   1388c:	movt	r1, #1
   13890:	mov	r0, #0
   13894:	bl	10fc4 <dcgettext@plt>
   13898:	movw	r3, #44372	; 0xad54
   1389c:	movt	r3, #1
   138a0:	movw	r2, #44412	; 0xad7c
   138a4:	movt	r2, #1
   138a8:	mov	r1, r0
   138ac:	mov	r0, #1
   138b0:	bl	11120 <__printf_chk@plt>
   138b4:	mov	r1, #0
   138b8:	mov	r0, #5
   138bc:	bl	11174 <setlocale@plt>
   138c0:	cmp	r0, #0
   138c4:	beq	138e0 <__assert_fail@plt+0x26dc>
   138c8:	mov	r2, #3
   138cc:	movw	r1, #44428	; 0xad8c
   138d0:	movt	r1, #1
   138d4:	bl	111e0 <strncmp@plt>
   138d8:	cmp	r0, #0
   138dc:	bne	1395c <__assert_fail@plt+0x2758>
   138e0:	mov	r2, #5
   138e4:	movw	r1, #44504	; 0xadd8
   138e8:	movt	r1, #1
   138ec:	mov	r0, #0
   138f0:	bl	10fc4 <dcgettext@plt>
   138f4:	movw	r6, #40904	; 0x9fc8
   138f8:	movt	r6, #1
   138fc:	mov	r3, r6
   13900:	movw	r2, #44372	; 0xad54
   13904:	movt	r2, #1
   13908:	mov	r1, r0
   1390c:	mov	r0, #1
   13910:	bl	11120 <__printf_chk@plt>
   13914:	mov	r2, #5
   13918:	movw	r1, #44532	; 0xadf4
   1391c:	movt	r1, #1
   13920:	mov	r0, #0
   13924:	bl	10fc4 <dcgettext@plt>
   13928:	mov	r1, r0
   1392c:	movw	r2, #45024	; 0xafe0
   13930:	movt	r2, #1
   13934:	movw	r3, #43772	; 0xaafc
   13938:	movt	r3, #1
   1393c:	cmp	r4, r6
   13940:	moveq	r3, r2
   13944:	mov	r2, r4
   13948:	mov	r0, #1
   1394c:	bl	11120 <__printf_chk@plt>
   13950:	b	13618 <__assert_fail@plt+0x2414>
   13954:	movw	r4, #40904	; 0x9fc8
   13958:	movt	r4, #1
   1395c:	mov	r2, #5
   13960:	movw	r1, #44432	; 0xad90
   13964:	movt	r1, #1
   13968:	mov	r0, #0
   1396c:	bl	10fc4 <dcgettext@plt>
   13970:	movw	r3, #49540	; 0xc184
   13974:	movt	r3, #2
   13978:	ldr	r1, [r3]
   1397c:	bl	10f1c <fputs_unlocked@plt>
   13980:	b	138e0 <__assert_fail@plt+0x26dc>
   13984:	mov	r2, #5
   13988:	movw	r1, #44504	; 0xadd8
   1398c:	movt	r1, #1
   13990:	mov	r0, #0
   13994:	bl	10fc4 <dcgettext@plt>
   13998:	movw	r4, #40904	; 0x9fc8
   1399c:	movt	r4, #1
   139a0:	mov	r3, r4
   139a4:	movw	r2, #44372	; 0xad54
   139a8:	movt	r2, #1
   139ac:	mov	r1, r0
   139b0:	mov	r0, #1
   139b4:	bl	11120 <__printf_chk@plt>
   139b8:	mov	r2, #5
   139bc:	movw	r1, #44532	; 0xadf4
   139c0:	movt	r1, #1
   139c4:	mov	r0, #0
   139c8:	bl	10fc4 <dcgettext@plt>
   139cc:	mov	r1, r0
   139d0:	movw	r3, #45024	; 0xafe0
   139d4:	movt	r3, #1
   139d8:	b	13944 <__assert_fail@plt+0x2740>
   139dc:	mov	r2, #5
   139e0:	movw	r1, #44348	; 0xad3c
   139e4:	movt	r1, #1
   139e8:	mov	r0, #0
   139ec:	bl	10fc4 <dcgettext@plt>
   139f0:	movw	r3, #44372	; 0xad54
   139f4:	movt	r3, #1
   139f8:	movw	r2, #44412	; 0xad7c
   139fc:	movt	r2, #1
   13a00:	mov	r1, r0
   13a04:	mov	r0, #1
   13a08:	bl	11120 <__printf_chk@plt>
   13a0c:	mov	r1, #0
   13a10:	mov	r0, #5
   13a14:	bl	11174 <setlocale@plt>
   13a18:	cmp	r0, #0
   13a1c:	beq	13984 <__assert_fail@plt+0x2780>
   13a20:	mov	r2, #3
   13a24:	movw	r1, #44428	; 0xad8c
   13a28:	movt	r1, #1
   13a2c:	bl	111e0 <strncmp@plt>
   13a30:	cmp	r0, #0
   13a34:	bne	13954 <__assert_fail@plt+0x2750>
   13a38:	mov	r2, #5
   13a3c:	movw	r1, #44504	; 0xadd8
   13a40:	movt	r1, #1
   13a44:	mov	r0, #0
   13a48:	bl	10fc4 <dcgettext@plt>
   13a4c:	movw	r4, #40904	; 0x9fc8
   13a50:	movt	r4, #1
   13a54:	mov	r3, r4
   13a58:	movw	r2, #44372	; 0xad54
   13a5c:	movt	r2, #1
   13a60:	mov	r1, r0
   13a64:	mov	r0, #1
   13a68:	bl	11120 <__printf_chk@plt>
   13a6c:	mov	r2, #5
   13a70:	movw	r1, #44532	; 0xadf4
   13a74:	movt	r1, #1
   13a78:	mov	r0, #0
   13a7c:	bl	10fc4 <dcgettext@plt>
   13a80:	mov	r1, r0
   13a84:	movw	r3, #45024	; 0xafe0
   13a88:	movt	r3, #1
   13a8c:	b	13944 <__assert_fail@plt+0x2740>
   13a90:	andeq	r9, r1, ip, asr ip
   13a94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a98:	strd	r6, [sp, #8]
   13a9c:	strd	r8, [sp, #16]
   13aa0:	strd	sl, [sp, #24]
   13aa4:	str	lr, [sp, #32]
   13aa8:	sub	sp, sp, #84	; 0x54
   13aac:	str	r0, [sp, #16]
   13ab0:	mov	r6, r1
   13ab4:	ldr	r0, [r1]
   13ab8:	bl	15e78 <__assert_fail@plt+0x4c74>
   13abc:	movw	r1, #43772	; 0xaafc
   13ac0:	movt	r1, #1
   13ac4:	mov	r0, #6
   13ac8:	bl	11174 <setlocale@plt>
   13acc:	movw	r4, #44416	; 0xad80
   13ad0:	movt	r4, #1
   13ad4:	movw	r1, #44584	; 0xae28
   13ad8:	movt	r1, #1
   13adc:	mov	r0, r4
   13ae0:	bl	111c8 <bindtextdomain@plt>
   13ae4:	mov	r0, r4
   13ae8:	bl	10fdc <textdomain@plt>
   13aec:	movw	r0, #22228	; 0x56d4
   13af0:	movt	r0, #1
   13af4:	bl	19a48 <__assert_fail@plt+0x8844>
   13af8:	movw	r2, #49552	; 0xc190
   13afc:	movt	r2, #2
   13b00:	add	r3, r2, #56	; 0x38
   13b04:	add	r2, r2, #92	; 0x5c
   13b08:	mov	r1, #0
   13b0c:	str	r1, [r3, #4]!
   13b10:	cmp	r3, r2
   13b14:	bne	13b0c <__assert_fail@plt+0x2908>
   13b18:	movw	r2, #49552	; 0xc190
   13b1c:	movt	r2, #2
   13b20:	mov	r3, #1
   13b24:	str	r3, [r2, #64]	; 0x40
   13b28:	mov	r3, #2
   13b2c:	str	r3, [r2, #68]	; 0x44
   13b30:	mov	r3, #4
   13b34:	str	r3, [r2, #76]	; 0x4c
   13b38:	mov	r3, r2
   13b3c:	mov	r1, #5
   13b40:	str	r1, [r3, #92]!	; 0x5c
   13b44:	add	r2, r2, #128	; 0x80
   13b48:	mov	r1, #0
   13b4c:	str	r1, [r3, #4]!
   13b50:	cmp	r3, r2
   13b54:	bne	13b4c <__assert_fail@plt+0x2948>
   13b58:	movw	r3, #49552	; 0xc190
   13b5c:	movt	r3, #2
   13b60:	mov	r2, #6
   13b64:	str	r2, [r3, #112]	; 0x70
   13b68:	mov	r0, #7
   13b6c:	str	r0, [r3, #128]	; 0x80
   13b70:	mov	r2, #0
   13b74:	str	r2, [r3]
   13b78:	str	r2, [r3, #56]	; 0x38
   13b7c:	str	r2, [r3, #4]
   13b80:	movw	r1, #5008	; 0x1390
   13b84:	movt	r1, #1
   13b88:	str	r1, [r3, #52]	; 0x34
   13b8c:	mov	r1, #8
   13b90:	str	r1, [r3, #12]
   13b94:	str	r0, [r3, #8]
   13b98:	strb	r2, [r3, #42]	; 0x2a
   13b9c:	mov	r4, #1
   13ba0:	str	r2, [sp, #28]
   13ba4:	mov	r9, r2
   13ba8:	str	r2, [sp, #32]
   13bac:	movw	r5, #39532	; 0x9a6c
   13bb0:	movt	r5, #1
   13bb4:	add	r7, r5, #560	; 0x230
   13bb8:	movw	sl, #49544	; 0xc188
   13bbc:	movt	sl, #2
   13bc0:	movw	fp, #43772	; 0xaafc
   13bc4:	movt	fp, #1
   13bc8:	mov	r8, r3
   13bcc:	add	r3, r3, #144	; 0x90
   13bd0:	str	r3, [sp, #36]	; 0x24
   13bd4:	mvn	r3, #0
   13bd8:	str	r3, [sp, #64]	; 0x40
   13bdc:	add	r3, sp, #64	; 0x40
   13be0:	str	r3, [sp]
   13be4:	mov	r3, r7
   13be8:	add	r2, r5, #752	; 0x2f0
   13bec:	mov	r1, r6
   13bf0:	ldr	r0, [sp, #16]
   13bf4:	bl	1109c <getopt_long@plt>
   13bf8:	cmn	r0, #1
   13bfc:	beq	145b0 <__assert_fail@plt+0x33ac>
   13c00:	add	r0, r0, #3
   13c04:	cmp	r0, #260	; 0x104
   13c08:	ldrls	pc, [pc, r0, lsl #2]
   13c0c:	b	14590 <__assert_fail@plt+0x338c>
   13c10:	andeq	r4, r1, r8, asr #10
   13c14:	andeq	r4, r1, r0, asr #10
   13c18:	muleq	r1, r0, r5
   13c1c:	muleq	r1, r0, r5
   13c20:	muleq	r1, r0, r5
   13c24:	muleq	r1, r0, r5
   13c28:	muleq	r1, r0, r5
   13c2c:	muleq	r1, r0, r5
   13c30:	muleq	r1, r0, r5
   13c34:	muleq	r1, r0, r5
   13c38:	muleq	r1, r0, r5
   13c3c:	muleq	r1, r0, r5
   13c40:	muleq	r1, r0, r5
   13c44:	muleq	r1, r0, r5
   13c48:	muleq	r1, r0, r5
   13c4c:	muleq	r1, r0, r5
   13c50:	muleq	r1, r0, r5
   13c54:	muleq	r1, r0, r5
   13c58:	muleq	r1, r0, r5
   13c5c:	muleq	r1, r0, r5
   13c60:	muleq	r1, r0, r5
   13c64:	muleq	r1, r0, r5
   13c68:	muleq	r1, r0, r5
   13c6c:	muleq	r1, r0, r5
   13c70:	muleq	r1, r0, r5
   13c74:	muleq	r1, r0, r5
   13c78:	muleq	r1, r0, r5
   13c7c:	muleq	r1, r0, r5
   13c80:	muleq	r1, r0, r5
   13c84:	muleq	r1, r0, r5
   13c88:	muleq	r1, r0, r5
   13c8c:	muleq	r1, r0, r5
   13c90:	muleq	r1, r0, r5
   13c94:	muleq	r1, r0, r5
   13c98:	muleq	r1, r0, r5
   13c9c:	muleq	r1, r0, r5
   13ca0:	muleq	r1, r0, r5
   13ca4:	muleq	r1, r0, r5
   13ca8:	muleq	r1, r0, r5
   13cac:	muleq	r1, r0, r5
   13cb0:	muleq	r1, r0, r5
   13cb4:	muleq	r1, r0, r5
   13cb8:	muleq	r1, r0, r5
   13cbc:	muleq	r1, r0, r5
   13cc0:	muleq	r1, r0, r5
   13cc4:	muleq	r1, r0, r5
   13cc8:	muleq	r1, r0, r5
   13ccc:	muleq	r1, r0, r5
   13cd0:	muleq	r1, r0, r5
   13cd4:	muleq	r1, r0, r5
   13cd8:	muleq	r1, r0, r5
   13cdc:	muleq	r1, r0, r5
   13ce0:	muleq	r1, r0, r5
   13ce4:	muleq	r1, r0, r5
   13ce8:	muleq	r1, r0, r5
   13cec:	muleq	r1, r0, r5
   13cf0:	muleq	r1, r0, r5
   13cf4:	muleq	r1, r0, r5
   13cf8:	muleq	r1, r0, r5
   13cfc:	muleq	r1, r0, r5
   13d00:	muleq	r1, r0, r5
   13d04:	muleq	r1, r0, r5
   13d08:	muleq	r1, r0, r5
   13d0c:	muleq	r1, r0, r5
   13d10:	muleq	r1, r0, r5
   13d14:	muleq	r1, r0, r5
   13d18:	muleq	r1, r0, r5
   13d1c:	muleq	r1, r0, r5
   13d20:	andeq	r4, r1, r4, lsr #32
   13d24:	andeq	r4, r1, r8, asr #8
   13d28:	muleq	r1, r0, r5
   13d2c:	andeq	r4, r1, r8, lsl #7
   13d30:	muleq	r1, r0, r5
   13d34:			; <UNDEFINED> instruction: 0x000143b8
   13d38:	muleq	r1, r0, r5
   13d3c:	andeq	r4, r1, r8, ror #7
   13d40:	andeq	r4, r1, r8, lsl r4
   13d44:	muleq	r1, r0, r5
   13d48:	muleq	r1, r0, r5
   13d4c:	andeq	r4, r1, r8, lsl r4
   13d50:	muleq	r1, r0, r5
   13d54:	muleq	r1, r8, r1
   13d58:	andeq	r4, r1, r0, lsr r4
   13d5c:	muleq	r1, r0, r5
   13d60:	muleq	r1, r0, r5
   13d64:	muleq	r1, r0, r5
   13d68:	andeq	r4, r1, ip, ror #3
   13d6c:	muleq	r1, r0, r5
   13d70:	muleq	r1, r0, r5
   13d74:	muleq	r1, r0, r5
   13d78:	muleq	r1, r0, r5
   13d7c:	andeq	r4, r1, r8, ror #7
   13d80:	muleq	r1, r0, r5
   13d84:	muleq	r1, r0, r5
   13d88:	muleq	r1, r0, r5
   13d8c:	muleq	r1, r0, r5
   13d90:	muleq	r1, r0, r5
   13d94:	muleq	r1, r0, r5
   13d98:	muleq	r1, r0, r5
   13d9c:	muleq	r1, r0, r5
   13da0:	andeq	r4, r1, r0, asr #6
   13da4:	andeq	r4, r1, r8, asr r3
   13da8:	andeq	r4, r1, r0, ror r3
   13dac:	andeq	r4, r1, r0, lsr #7
   13db0:			; <UNDEFINED> instruction: 0x000143b8
   13db4:	ldrdeq	r4, [r1], -r0
   13db8:	muleq	r1, r0, r5
   13dbc:	andeq	r4, r1, r8, ror r4
   13dc0:	andeq	r4, r1, r0, lsl #8
   13dc4:	andeq	r4, r1, ip, asr #2
   13dc8:	muleq	r1, r0, r5
   13dcc:	andeq	r4, r1, r8, lsl r4
   13dd0:	muleq	r1, r0, r5
   13dd4:	muleq	r1, r0, r5
   13dd8:	andeq	r4, r1, r8, asr #8
   13ddc:	muleq	r1, r0, r5
   13de0:	muleq	r1, r0, r5
   13de4:	muleq	r1, r0, r5
   13de8:	andeq	r4, r1, r0, ror #8
   13dec:	andeq	r4, r1, r4, lsr #5
   13df0:	muleq	r1, r0, r5
   13df4:			; <UNDEFINED> instruction: 0x000142bc
   13df8:	muleq	r1, r0, r4
   13dfc:	andeq	r4, r1, r8, ror r4
   13e00:	muleq	r1, r0, r5
   13e04:	muleq	r1, r0, r5
   13e08:	muleq	r1, r0, r5
   13e0c:	muleq	r1, r0, r5
   13e10:	muleq	r1, r0, r5
   13e14:	muleq	r1, r0, r5
   13e18:	muleq	r1, r0, r5
   13e1c:	muleq	r1, r0, r5
   13e20:	muleq	r1, r0, r5
   13e24:	muleq	r1, r0, r5
   13e28:	muleq	r1, r0, r5
   13e2c:	muleq	r1, r0, r5
   13e30:	muleq	r1, r0, r5
   13e34:	muleq	r1, r0, r5
   13e38:	muleq	r1, r0, r5
   13e3c:	muleq	r1, r0, r5
   13e40:	muleq	r1, r0, r5
   13e44:	muleq	r1, r0, r5
   13e48:	muleq	r1, r0, r5
   13e4c:	muleq	r1, r0, r5
   13e50:	muleq	r1, r0, r5
   13e54:	muleq	r1, r0, r5
   13e58:	muleq	r1, r0, r5
   13e5c:	muleq	r1, r0, r5
   13e60:	muleq	r1, r0, r5
   13e64:	muleq	r1, r0, r5
   13e68:	muleq	r1, r0, r5
   13e6c:	muleq	r1, r0, r5
   13e70:	muleq	r1, r0, r5
   13e74:	muleq	r1, r0, r5
   13e78:	muleq	r1, r0, r5
   13e7c:	muleq	r1, r0, r5
   13e80:	muleq	r1, r0, r5
   13e84:	muleq	r1, r0, r5
   13e88:	muleq	r1, r0, r5
   13e8c:	muleq	r1, r0, r5
   13e90:	muleq	r1, r0, r5
   13e94:	muleq	r1, r0, r5
   13e98:	muleq	r1, r0, r5
   13e9c:	muleq	r1, r0, r5
   13ea0:	muleq	r1, r0, r5
   13ea4:	muleq	r1, r0, r5
   13ea8:	muleq	r1, r0, r5
   13eac:	muleq	r1, r0, r5
   13eb0:	muleq	r1, r0, r5
   13eb4:	muleq	r1, r0, r5
   13eb8:	muleq	r1, r0, r5
   13ebc:	muleq	r1, r0, r5
   13ec0:	muleq	r1, r0, r5
   13ec4:	muleq	r1, r0, r5
   13ec8:	muleq	r1, r0, r5
   13ecc:	muleq	r1, r0, r5
   13ed0:	muleq	r1, r0, r5
   13ed4:	muleq	r1, r0, r5
   13ed8:	muleq	r1, r0, r5
   13edc:	muleq	r1, r0, r5
   13ee0:	muleq	r1, r0, r5
   13ee4:	muleq	r1, r0, r5
   13ee8:	muleq	r1, r0, r5
   13eec:	muleq	r1, r0, r5
   13ef0:	muleq	r1, r0, r5
   13ef4:	muleq	r1, r0, r5
   13ef8:	muleq	r1, r0, r5
   13efc:	muleq	r1, r0, r5
   13f00:	muleq	r1, r0, r5
   13f04:	muleq	r1, r0, r5
   13f08:	muleq	r1, r0, r5
   13f0c:	muleq	r1, r0, r5
   13f10:	muleq	r1, r0, r5
   13f14:	muleq	r1, r0, r5
   13f18:	muleq	r1, r0, r5
   13f1c:	muleq	r1, r0, r5
   13f20:	muleq	r1, r0, r5
   13f24:	muleq	r1, r0, r5
   13f28:	muleq	r1, r0, r5
   13f2c:	muleq	r1, r0, r5
   13f30:	muleq	r1, r0, r5
   13f34:	muleq	r1, r0, r5
   13f38:	muleq	r1, r0, r5
   13f3c:	muleq	r1, r0, r5
   13f40:	muleq	r1, r0, r5
   13f44:	muleq	r1, r0, r5
   13f48:	muleq	r1, r0, r5
   13f4c:	muleq	r1, r0, r5
   13f50:	muleq	r1, r0, r5
   13f54:	muleq	r1, r0, r5
   13f58:	muleq	r1, r0, r5
   13f5c:	muleq	r1, r0, r5
   13f60:	muleq	r1, r0, r5
   13f64:	muleq	r1, r0, r5
   13f68:	muleq	r1, r0, r5
   13f6c:	muleq	r1, r0, r5
   13f70:	muleq	r1, r0, r5
   13f74:	muleq	r1, r0, r5
   13f78:	muleq	r1, r0, r5
   13f7c:	muleq	r1, r0, r5
   13f80:	muleq	r1, r0, r5
   13f84:	muleq	r1, r0, r5
   13f88:	muleq	r1, r0, r5
   13f8c:	muleq	r1, r0, r5
   13f90:	muleq	r1, r0, r5
   13f94:	muleq	r1, r0, r5
   13f98:	muleq	r1, r0, r5
   13f9c:	muleq	r1, r0, r5
   13fa0:	muleq	r1, r0, r5
   13fa4:	muleq	r1, r0, r5
   13fa8:	muleq	r1, r0, r5
   13fac:	muleq	r1, r0, r5
   13fb0:	muleq	r1, r0, r5
   13fb4:	muleq	r1, r0, r5
   13fb8:	muleq	r1, r0, r5
   13fbc:	muleq	r1, r0, r5
   13fc0:	muleq	r1, r0, r5
   13fc4:	muleq	r1, r0, r5
   13fc8:	muleq	r1, r0, r5
   13fcc:	muleq	r1, r0, r5
   13fd0:	muleq	r1, r0, r5
   13fd4:	muleq	r1, r0, r5
   13fd8:	muleq	r1, r0, r5
   13fdc:	muleq	r1, r0, r5
   13fe0:	muleq	r1, r0, r5
   13fe4:	muleq	r1, r0, r5
   13fe8:	muleq	r1, r0, r5
   13fec:	muleq	r1, r0, r5
   13ff0:	muleq	r1, r0, r5
   13ff4:	muleq	r1, r0, r5
   13ff8:	muleq	r1, r0, r5
   13ffc:	muleq	r1, r0, r5
   14000:	muleq	r1, r0, r5
   14004:	muleq	r1, r0, r5
   14008:	muleq	r1, r0, r5
   1400c:	muleq	r1, r0, r5
   14010:	muleq	r1, r0, r5
   14014:	muleq	r1, r0, r5
   14018:	muleq	r1, r0, r5
   1401c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14020:	andeq	r4, r1, r0, ror #5
   14024:	ldr	r3, [sl]
   14028:	ldrb	r3, [r3]
   1402c:	sub	r3, r3, #100	; 0x64
   14030:	cmp	r3, #20
   14034:	ldrls	pc, [pc, r3, lsl #2]
   14038:	b	14118 <__assert_fail@plt+0x2f14>
   1403c:	muleq	r1, r0, r0
   14040:	andeq	r4, r1, r8, lsl r1
   14044:	andeq	r4, r1, r8, lsl r1
   14048:	andeq	r4, r1, r8, lsl r1
   1404c:	andeq	r4, r1, r8, lsl r1
   14050:	andeq	r4, r1, r8, lsl r1
   14054:	andeq	r4, r1, r8, lsl r1
   14058:	andeq	r4, r1, r8, lsl r1
   1405c:	andeq	r4, r1, r8, lsl r1
   14060:	andeq	r4, r1, r8, lsl r1
   14064:	strdeq	r4, [r1], -ip
   14068:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   1406c:	andeq	r4, r1, r8, lsl r1
   14070:	andeq	r4, r1, r8, lsl r1
   14074:	andeq	r4, r1, r8, lsl r1
   14078:	andeq	r4, r1, r8, lsl r1
   1407c:	andeq	r4, r1, r8, lsl r1
   14080:	andeq	r4, r1, r8, lsl r1
   14084:	andeq	r4, r1, r8, lsl r1
   14088:	andeq	r4, r1, r8, lsl r1
   1408c:	ldrdeq	r4, [r1], -r8
   14090:	movw	r3, #5008	; 0x1390
   14094:	movt	r3, #1
   14098:	str	r3, [r8, #52]	; 0x34
   1409c:	mov	r3, #10
   140a0:	str	r3, [r8, #12]
   140a4:	mov	r3, #7
   140a8:	str	r3, [r8, #8]
   140ac:	mov	r9, #1
   140b0:	b	13bd4 <__assert_fail@plt+0x29d0>
   140b4:	movw	r3, #5008	; 0x1390
   140b8:	movt	r3, #1
   140bc:	str	r3, [r8, #52]	; 0x34
   140c0:	mov	r3, #8
   140c4:	str	r3, [r8, #12]
   140c8:	mov	r3, #7
   140cc:	str	r3, [r8, #8]
   140d0:	mov	r9, #1
   140d4:	b	13bd4 <__assert_fail@plt+0x29d0>
   140d8:	movw	r3, #5008	; 0x1390
   140dc:	movt	r3, #1
   140e0:	str	r3, [r8, #52]	; 0x34
   140e4:	mov	r3, #16
   140e8:	str	r3, [r8, #12]
   140ec:	mov	r3, #6
   140f0:	str	r3, [r8, #8]
   140f4:	mov	r9, #1
   140f8:	b	13bd4 <__assert_fail@plt+0x29d0>
   140fc:	movw	r3, #4864	; 0x1300
   14100:	movt	r3, #1
   14104:	str	r3, [r8, #52]	; 0x34
   14108:	mov	r3, #0
   1410c:	str	r3, [r8, #8]
   14110:	mov	r9, #1
   14114:	b	13bd4 <__assert_fail@plt+0x29d0>
   14118:	mov	r2, #5
   1411c:	movw	r1, #44608	; 0xae40
   14120:	movt	r1, #1
   14124:	mov	r0, #0
   14128:	bl	10fc4 <dcgettext@plt>
   1412c:	movw	r3, #49544	; 0xc188
   14130:	movt	r3, #2
   14134:	ldr	r3, [r3]
   14138:	ldrb	r3, [r3]
   1413c:	mov	r2, r0
   14140:	mov	r1, #0
   14144:	mov	r0, #1
   14148:	bl	1103c <error@plt>
   1414c:	add	r3, r5, #788	; 0x314
   14150:	str	r3, [sp]
   14154:	add	r3, r8, #136	; 0x88
   14158:	mov	r2, #0
   1415c:	mov	r1, r2
   14160:	ldr	r0, [sl]
   14164:	bl	18f7c <__assert_fail@plt+0x7d78>
   14168:	cmp	r0, #0
   1416c:	bne	14178 <__assert_fail@plt+0x2f74>
   14170:	mov	r9, #1
   14174:	b	13bd4 <__assert_fail@plt+0x29d0>
   14178:	movw	r3, #49544	; 0xc188
   1417c:	movt	r3, #2
   14180:	ldr	r3, [r3]
   14184:	str	r3, [sp]
   14188:	ldr	r3, [pc, #4048]	; 15160 <__assert_fail@plt+0x3f5c>
   1418c:	mov	r2, #106	; 0x6a
   14190:	ldr	r1, [sp, #64]	; 0x40
   14194:	bl	18d98 <__assert_fail@plt+0x7b94>
   14198:	mov	r3, #1
   1419c:	strb	r3, [r8, #41]	; 0x29
   141a0:	add	r3, r5, #788	; 0x314
   141a4:	str	r3, [sp]
   141a8:	ldr	r3, [sp, #36]	; 0x24
   141ac:	mov	r2, #0
   141b0:	mov	r1, r2
   141b4:	ldr	r0, [sl]
   141b8:	bl	18f7c <__assert_fail@plt+0x7d78>
   141bc:	cmp	r0, #0
   141c0:	bne	141cc <__assert_fail@plt+0x2fc8>
   141c4:	mov	r9, #1
   141c8:	b	13bd4 <__assert_fail@plt+0x29d0>
   141cc:	movw	r3, #49544	; 0xc188
   141d0:	movt	r3, #2
   141d4:	ldr	r3, [r3]
   141d8:	str	r3, [sp]
   141dc:	ldr	r3, [pc, #3964]	; 15160 <__assert_fail@plt+0x3f5c>
   141e0:	mov	r2, #78	; 0x4e
   141e4:	ldr	r1, [sp, #64]	; 0x40
   141e8:	bl	18d98 <__assert_fail@plt+0x7b94>
   141ec:	ldr	r0, [sl]
   141f0:	cmp	r0, #0
   141f4:	moveq	r3, #3
   141f8:	streq	r3, [r8, #152]	; 0x98
   141fc:	beq	1423c <__assert_fail@plt+0x3038>
   14200:	add	r3, r5, #788	; 0x314
   14204:	str	r3, [sp]
   14208:	add	r3, sp, #72	; 0x48
   1420c:	mov	r2, #0
   14210:	mov	r1, r2
   14214:	bl	18f7c <__assert_fail@plt+0x7d78>
   14218:	cmp	r0, #0
   1421c:	bne	14248 <__assert_fail@plt+0x3044>
   14220:	ldrd	r2, [sp, #72]	; 0x48
   14224:	mvn	r0, #0
   14228:	mov	r1, #0
   1422c:	cmp	r3, r1
   14230:	cmpeq	r2, r0
   14234:	bhi	14268 <__assert_fail@plt+0x3064>
   14238:	str	r2, [r8, #152]	; 0x98
   1423c:	mov	r9, #1
   14240:	strb	r9, [r8, #42]	; 0x2a
   14244:	b	13bd4 <__assert_fail@plt+0x29d0>
   14248:	movw	r3, #49544	; 0xc188
   1424c:	movt	r3, #2
   14250:	ldr	r3, [r3]
   14254:	str	r3, [sp]
   14258:	ldr	r3, [pc, #3840]	; 15160 <__assert_fail@plt+0x3f5c>
   1425c:	mov	r2, #83	; 0x53
   14260:	ldr	r1, [sp, #64]	; 0x40
   14264:	bl	18d98 <__assert_fail@plt+0x7b94>
   14268:	mov	r2, #5
   1426c:	movw	r1, #44680	; 0xae88
   14270:	movt	r1, #1
   14274:	mov	r0, #0
   14278:	bl	10fc4 <dcgettext@plt>
   1427c:	mov	r4, r0
   14280:	movw	r3, #49544	; 0xc188
   14284:	movt	r3, #2
   14288:	ldr	r0, [r3]
   1428c:	bl	18174 <__assert_fail@plt+0x6f70>
   14290:	mov	r3, r0
   14294:	mov	r2, r4
   14298:	mov	r1, #0
   1429c:	mov	r0, #1
   142a0:	bl	1103c <error@plt>
   142a4:	ldr	r0, [sl]
   142a8:	bl	12de4 <__assert_fail@plt+0x1be0>
   142ac:	and	r4, r4, r0
   142b0:	uxtb	r4, r4
   142b4:	mov	r9, #1
   142b8:	b	13bd4 <__assert_fail@plt+0x29d0>
   142bc:	movw	r3, #49432	; 0xc118
   142c0:	movt	r3, #2
   142c4:	mov	r2, #0
   142c8:	strb	r2, [r3]
   142cc:	mov	r9, #1
   142d0:	b	13bd4 <__assert_fail@plt+0x29d0>
   142d4:	mov	r3, #1
   142d8:	strb	r3, [r8, #156]	; 0x9c
   142dc:	b	13bd4 <__assert_fail@plt+0x29d0>
   142e0:	mov	r3, #1
   142e4:	str	r3, [sp, #8]
   142e8:	movw	r3, #49440	; 0xc120
   142ec:	movt	r3, #2
   142f0:	ldr	r3, [r3]
   142f4:	str	r3, [sp, #4]
   142f8:	mov	r3, #4
   142fc:	str	r3, [sp]
   14300:	add	r3, r5, #804	; 0x324
   14304:	add	r2, r5, #812	; 0x32c
   14308:	ldr	r1, [sl]
   1430c:	movw	r0, #44696	; 0xae98
   14310:	movt	r0, #1
   14314:	bl	155ac <__assert_fail@plt+0x43a8>
   14318:	add	r0, r5, r0, lsl #2
   1431c:	ldr	r3, [r0, #804]	; 0x324
   14320:	cmp	r3, #0
   14324:	beq	14334 <__assert_fail@plt+0x3130>
   14328:	cmp	r3, #1
   1432c:	strbeq	r3, [r8, #24]
   14330:	b	13bd4 <__assert_fail@plt+0x29d0>
   14334:	mov	r3, #0
   14338:	strb	r3, [r8, #24]
   1433c:	b	13bd4 <__assert_fail@plt+0x29d0>
   14340:	movw	r0, #44708	; 0xaea4
   14344:	movt	r0, #1
   14348:	bl	12de4 <__assert_fail@plt+0x1be0>
   1434c:	and	r4, r4, r0
   14350:	uxtb	r4, r4
   14354:	b	13bd4 <__assert_fail@plt+0x29d0>
   14358:	movw	r0, #44712	; 0xaea8
   1435c:	movt	r0, #1
   14360:	bl	12de4 <__assert_fail@plt+0x1be0>
   14364:	and	r4, r4, r0
   14368:	uxtb	r4, r4
   1436c:	b	13bd4 <__assert_fail@plt+0x29d0>
   14370:	movw	r0, #46636	; 0xb62c
   14374:	movt	r0, #1
   14378:	bl	12de4 <__assert_fail@plt+0x1be0>
   1437c:	and	r4, r4, r0
   14380:	uxtb	r4, r4
   14384:	b	13bd4 <__assert_fail@plt+0x29d0>
   14388:	movw	r0, #44716	; 0xaeac
   1438c:	movt	r0, #1
   14390:	bl	12de4 <__assert_fail@plt+0x1be0>
   14394:	and	r4, r4, r0
   14398:	uxtb	r4, r4
   1439c:	b	13bd4 <__assert_fail@plt+0x29d0>
   143a0:	movw	r0, #44720	; 0xaeb0
   143a4:	movt	r0, #1
   143a8:	bl	12de4 <__assert_fail@plt+0x1be0>
   143ac:	and	r4, r4, r0
   143b0:	uxtb	r4, r4
   143b4:	b	13bd4 <__assert_fail@plt+0x29d0>
   143b8:	movw	r0, #44724	; 0xaeb4
   143bc:	movt	r0, #1
   143c0:	bl	12de4 <__assert_fail@plt+0x1be0>
   143c4:	and	r4, r4, r0
   143c8:	uxtb	r4, r4
   143cc:	b	13bd4 <__assert_fail@plt+0x29d0>
   143d0:	movw	r0, #44728	; 0xaeb8
   143d4:	movt	r0, #1
   143d8:	bl	12de4 <__assert_fail@plt+0x1be0>
   143dc:	and	r4, r4, r0
   143e0:	uxtb	r4, r4
   143e4:	b	13bd4 <__assert_fail@plt+0x29d0>
   143e8:	movw	r0, #44732	; 0xaebc
   143ec:	movt	r0, #1
   143f0:	bl	12de4 <__assert_fail@plt+0x1be0>
   143f4:	and	r4, r4, r0
   143f8:	uxtb	r4, r4
   143fc:	b	13bd4 <__assert_fail@plt+0x29d0>
   14400:	movw	r0, #44736	; 0xaec0
   14404:	movt	r0, #1
   14408:	bl	12de4 <__assert_fail@plt+0x1be0>
   1440c:	and	r4, r4, r0
   14410:	uxtb	r4, r4
   14414:	b	13bd4 <__assert_fail@plt+0x29d0>
   14418:	movw	r0, #44740	; 0xaec4
   1441c:	movt	r0, #1
   14420:	bl	12de4 <__assert_fail@plt+0x1be0>
   14424:	and	r4, r4, r0
   14428:	uxtb	r4, r4
   1442c:	b	13bd4 <__assert_fail@plt+0x29d0>
   14430:	movw	r0, #44744	; 0xaec8
   14434:	movt	r0, #1
   14438:	bl	12de4 <__assert_fail@plt+0x1be0>
   1443c:	and	r4, r4, r0
   14440:	uxtb	r4, r4
   14444:	b	13bd4 <__assert_fail@plt+0x29d0>
   14448:	movw	r0, #44748	; 0xaecc
   1444c:	movt	r0, #1
   14450:	bl	12de4 <__assert_fail@plt+0x1be0>
   14454:	and	r4, r4, r0
   14458:	uxtb	r4, r4
   1445c:	b	13bd4 <__assert_fail@plt+0x29d0>
   14460:	movw	r0, #44752	; 0xaed0
   14464:	movt	r0, #1
   14468:	bl	12de4 <__assert_fail@plt+0x1be0>
   1446c:	and	r4, r4, r0
   14470:	uxtb	r4, r4
   14474:	b	13bd4 <__assert_fail@plt+0x29d0>
   14478:	movw	r0, #44756	; 0xaed4
   1447c:	movt	r0, #1
   14480:	bl	12de4 <__assert_fail@plt+0x1be0>
   14484:	and	r4, r4, r0
   14488:	uxtb	r4, r4
   1448c:	b	13bd4 <__assert_fail@plt+0x29d0>
   14490:	ldr	r0, [sl]
   14494:	cmp	r0, #0
   14498:	beq	14598 <__assert_fail@plt+0x3394>
   1449c:	str	fp, [sp]
   144a0:	add	r3, sp, #72	; 0x48
   144a4:	mov	r2, #10
   144a8:	mov	r1, #0
   144ac:	bl	18f7c <__assert_fail@plt+0x7d78>
   144b0:	cmp	r0, #0
   144b4:	bne	144e4 <__assert_fail@plt+0x32e0>
   144b8:	ldrd	r2, [sp, #72]	; 0x48
   144bc:	mvn	r0, #0
   144c0:	mov	r1, #0
   144c4:	cmp	r3, r1
   144c8:	cmpeq	r2, r0
   144cc:	bhi	14504 <__assert_fail@plt+0x3300>
   144d0:	str	r2, [sp, #32]
   144d4:	mov	r3, #1
   144d8:	str	r3, [sp, #28]
   144dc:	mov	r9, r3
   144e0:	b	13bd4 <__assert_fail@plt+0x29d0>
   144e4:	movw	r3, #49544	; 0xc188
   144e8:	movt	r3, #2
   144ec:	ldr	r3, [r3]
   144f0:	str	r3, [sp]
   144f4:	ldr	r3, [pc, #3172]	; 15160 <__assert_fail@plt+0x3f5c>
   144f8:	mov	r2, #119	; 0x77
   144fc:	ldr	r1, [sp, #64]	; 0x40
   14500:	bl	18d98 <__assert_fail@plt+0x7b94>
   14504:	mov	r2, #5
   14508:	movw	r1, #44680	; 0xae88
   1450c:	movt	r1, #1
   14510:	mov	r0, #0
   14514:	bl	10fc4 <dcgettext@plt>
   14518:	mov	r4, r0
   1451c:	movw	r3, #49544	; 0xc188
   14520:	movt	r3, #2
   14524:	ldr	r0, [r3]
   14528:	bl	18174 <__assert_fail@plt+0x6f70>
   1452c:	mov	r3, r0
   14530:	mov	r2, r4
   14534:	mov	r1, #0
   14538:	mov	r0, #1
   1453c:	bl	1103c <error@plt>
   14540:	mov	r0, #0
   14544:	bl	135cc <__assert_fail@plt+0x23c8>
   14548:	movw	r3, #49436	; 0xc11c
   1454c:	movt	r3, #2
   14550:	movw	r0, #49540	; 0xc184
   14554:	movt	r0, #2
   14558:	mov	r4, #0
   1455c:	str	r4, [sp, #4]
   14560:	movw	r2, #44760	; 0xaed8
   14564:	movt	r2, #1
   14568:	str	r2, [sp]
   1456c:	ldr	r3, [r3]
   14570:	movw	r2, #44412	; 0xad7c
   14574:	movt	r2, #1
   14578:	movw	r1, #40904	; 0x9fc8
   1457c:	movt	r1, #1
   14580:	ldr	r0, [r0]
   14584:	bl	18670 <__assert_fail@plt+0x746c>
   14588:	mov	r0, r4
   1458c:	bl	110b4 <exit@plt>
   14590:	mov	r0, #1
   14594:	bl	135cc <__assert_fail@plt+0x23c8>
   14598:	mov	r3, #1
   1459c:	str	r3, [sp, #28]
   145a0:	mov	r9, r3
   145a4:	mov	r3, #32
   145a8:	str	r3, [sp, #32]
   145ac:	b	13bd4 <__assert_fail@plt+0x29d0>
   145b0:	cmp	r4, #0
   145b4:	beq	1522c <__assert_fail@plt+0x4028>
   145b8:	movw	r3, #49552	; 0xc190
   145bc:	movt	r3, #2
   145c0:	ldrb	r3, [r3, #42]	; 0x2a
   145c4:	cmp	r3, #0
   145c8:	beq	145e0 <__assert_fail@plt+0x33dc>
   145cc:	movw	r3, #49552	; 0xc190
   145d0:	movt	r3, #2
   145d4:	ldr	r3, [r3]
   145d8:	cmp	r3, #0
   145dc:	bne	14668 <__assert_fail@plt+0x3464>
   145e0:	movw	r3, #49520	; 0xc170
   145e4:	movt	r3, #2
   145e8:	ldr	r3, [r3]
   145ec:	ldr	r2, [sp, #16]
   145f0:	sub	r7, r2, r3
   145f4:	cmp	r9, #0
   145f8:	beq	1468c <__assert_fail@plt+0x3488>
   145fc:	movw	r2, #49552	; 0xc190
   14600:	movt	r2, #2
   14604:	ldrb	r2, [r2, #156]	; 0x9c
   14608:	cmp	r2, #0
   1460c:	moveq	r5, #0
   14610:	moveq	r8, r5
   14614:	beq	146cc <__assert_fail@plt+0x34c8>
   14618:	cmp	r7, #2
   1461c:	beq	14878 <__assert_fail@plt+0x3674>
   14620:	cmp	r7, #3
   14624:	beq	14960 <__assert_fail@plt+0x375c>
   14628:	cmp	r7, #1
   1462c:	bne	146a4 <__assert_fail@plt+0x34a0>
   14630:	add	r1, sp, #64	; 0x40
   14634:	ldr	r0, [r6, r3, lsl #2]
   14638:	bl	115f4 <__assert_fail@plt+0x3f0>
   1463c:	cmp	r0, #0
   14640:	beq	15234 <__assert_fail@plt+0x4030>
   14644:	movw	r1, #49552	; 0xc190
   14648:	movt	r1, #2
   1464c:	ldrd	r2, [sp, #64]	; 0x40
   14650:	strd	r2, [r1, #136]	; 0x88
   14654:	add	r6, r6, #4
   14658:	mov	r5, #0
   1465c:	mov	r8, r5
   14660:	mov	r7, r5
   14664:	b	146cc <__assert_fail@plt+0x34c8>
   14668:	mov	r2, #5
   1466c:	movw	r1, #44776	; 0xaee8
   14670:	movt	r1, #1
   14674:	mov	r0, #0
   14678:	bl	10fc4 <dcgettext@plt>
   1467c:	mov	r2, r0
   14680:	mov	r1, #0
   14684:	mov	r0, #1
   14688:	bl	1103c <error@plt>
   1468c:	cmp	r7, #2
   14690:	beq	14878 <__assert_fail@plt+0x3674>
   14694:	cmp	r7, #3
   14698:	beq	14960 <__assert_fail@plt+0x375c>
   1469c:	cmp	r7, #1
   146a0:	beq	14848 <__assert_fail@plt+0x3644>
   146a4:	movw	r3, #49552	; 0xc190
   146a8:	movt	r3, #2
   146ac:	ldrb	r3, [r3, #156]	; 0x9c
   146b0:	cmp	r7, #1
   146b4:	movle	r3, #0
   146b8:	andgt	r3, r3, #1
   146bc:	cmp	r3, #0
   146c0:	moveq	r5, #0
   146c4:	moveq	r8, r5
   146c8:	bne	14a10 <__assert_fail@plt+0x380c>
   146cc:	movw	r3, #49552	; 0xc190
   146d0:	movt	r3, #2
   146d4:	ldrb	r3, [r3, #157]	; 0x9d
   146d8:	cmp	r3, #0
   146dc:	beq	14710 <__assert_fail@plt+0x350c>
   146e0:	movw	r2, #49552	; 0xc190
   146e4:	movt	r2, #2
   146e8:	movw	r3, #4864	; 0x1300
   146ec:	movt	r3, #1
   146f0:	ldr	r2, [r2, #52]	; 0x34
   146f4:	cmp	r2, r3
   146f8:	beq	14a88 <__assert_fail@plt+0x3884>
   146fc:	movw	r3, #49552	; 0xc190
   14700:	movt	r3, #2
   14704:	movw	r2, #5540	; 0x15a4
   14708:	movt	r2, #1
   1470c:	str	r2, [r3, #52]	; 0x34
   14710:	movw	r3, #49552	; 0xc190
   14714:	movt	r3, #2
   14718:	ldrb	r3, [r3, #41]	; 0x29
   1471c:	cmp	r3, #0
   14720:	beq	1475c <__assert_fail@plt+0x3558>
   14724:	movw	r3, #49552	; 0xc190
   14728:	movt	r3, #2
   1472c:	ldrd	r0, [r3, #136]	; 0x88
   14730:	ldr	r2, [r3, #144]	; 0x90
   14734:	ldr	ip, [r3, #148]	; 0x94
   14738:	adds	r2, r0, r2
   1473c:	str	r2, [sp, #40]	; 0x28
   14740:	adc	r2, r1, ip
   14744:	str	r2, [sp, #44]	; 0x2c
   14748:	ldrd	sl, [sp, #40]	; 0x28
   1474c:	strd	sl, [r3, #160]	; 0xa0
   14750:	cmp	r1, fp
   14754:	cmpeq	r0, sl
   14758:	bhi	14ab0 <__assert_fail@plt+0x38ac>
   1475c:	movw	r3, #49552	; 0xc190
   14760:	movt	r3, #2
   14764:	ldr	r3, [r3]
   14768:	cmp	r3, #0
   1476c:	beq	14ad4 <__assert_fail@plt+0x38d0>
   14770:	cmp	r7, #0
   14774:	ldrle	r6, [pc, #2536]	; 15164 <__assert_fail@plt+0x3f60>
   14778:	ble	1478c <__assert_fail@plt+0x3588>
   1477c:	movw	r3, #49520	; 0xc170
   14780:	movt	r3, #2
   14784:	ldr	r3, [r3]
   14788:	add	r6, r6, r3, lsl #2
   1478c:	movw	r7, #49552	; 0xc190
   14790:	movt	r7, #2
   14794:	str	r6, [r7, #28]
   14798:	bl	124c8 <__assert_fail@plt+0x12c4>
   1479c:	mov	r6, r0
   147a0:	ldr	r3, [r7, #36]	; 0x24
   147a4:	cmp	r3, #0
   147a8:	beq	14cf8 <__assert_fail@plt+0x3af4>
   147ac:	movw	r7, #49552	; 0xc190
   147b0:	movt	r7, #2
   147b4:	ldrd	r0, [r7, #136]	; 0x88
   147b8:	bl	1273c <__assert_fail@plt+0x1538>
   147bc:	and	r6, r6, r0
   147c0:	uxtb	r6, r6
   147c4:	str	r6, [sp, #36]	; 0x24
   147c8:	ldr	r3, [r7, #36]	; 0x24
   147cc:	cmp	r3, #0
   147d0:	beq	14cf8 <__assert_fail@plt+0x3af4>
   147d4:	ldrb	r3, [r7, #157]	; 0x9d
   147d8:	cmp	r3, #0
   147dc:	moveq	r5, #0
   147e0:	moveq	r8, r5
   147e4:	beq	147f8 <__assert_fail@plt+0x35f4>
   147e8:	ldr	r3, [r7, #136]	; 0x88
   147ec:	ldr	r2, [r7, #140]	; 0x8c
   147f0:	subs	r5, r5, r3
   147f4:	sbc	r8, r8, r2
   147f8:	movw	r3, #49552	; 0xc190
   147fc:	movt	r3, #2
   14800:	str	r5, [r3, #16]
   14804:	str	r8, [r3, #20]
   14808:	bl	11304 <__assert_fail@plt+0x100>
   1480c:	mov	r5, r0
   14810:	ldr	r3, [sp, #28]
   14814:	cmp	r3, #0
   14818:	beq	14ca8 <__assert_fail@plt+0x3aa4>
   1481c:	ldr	r2, [sp, #32]
   14820:	cmp	r2, #0
   14824:	beq	14ae4 <__assert_fail@plt+0x38e0>
   14828:	udiv	r3, r2, r0
   1482c:	mls	r3, r0, r3, r2
   14830:	cmp	r3, #0
   14834:	bne	14ae4 <__assert_fail@plt+0x38e0>
   14838:	movw	r3, #49552	; 0xc190
   1483c:	movt	r3, #2
   14840:	str	r2, [r3, #44]	; 0x2c
   14844:	b	14b1c <__assert_fail@plt+0x3918>
   14848:	movw	r2, #49552	; 0xc190
   1484c:	movt	r2, #2
   14850:	ldrb	r2, [r2, #156]	; 0x9c
   14854:	cmp	r2, #0
   14858:	bne	14630 <__assert_fail@plt+0x342c>
   1485c:	ldr	r2, [r6, r3, lsl #2]
   14860:	ldrb	r2, [r2]
   14864:	cmp	r2, #43	; 0x2b
   14868:	movne	r5, #0
   1486c:	movne	r8, r5
   14870:	bne	146cc <__assert_fail@plt+0x34c8>
   14874:	b	14630 <__assert_fail@plt+0x342c>
   14878:	movw	r2, #49552	; 0xc190
   1487c:	movt	r2, #2
   14880:	ldrb	r2, [r2, #156]	; 0x9c
   14884:	cmp	r2, #0
   14888:	bne	148ac <__assert_fail@plt+0x36a8>
   1488c:	add	r2, r3, #1
   14890:	ldr	r2, [r6, r2, lsl #2]
   14894:	ldrb	r2, [r2]
   14898:	cmp	r2, #43	; 0x2b
   1489c:	beq	148ac <__assert_fail@plt+0x36a8>
   148a0:	sub	r2, r2, #48	; 0x30
   148a4:	cmp	r2, #9
   148a8:	bhi	15244 <__assert_fail@plt+0x4040>
   148ac:	add	r3, r3, #1
   148b0:	add	r1, sp, #72	; 0x48
   148b4:	ldr	r0, [r6, r3, lsl #2]
   148b8:	bl	115f4 <__assert_fail@plt+0x3f0>
   148bc:	cmp	r0, #0
   148c0:	beq	14a00 <__assert_fail@plt+0x37fc>
   148c4:	movw	r3, #49552	; 0xc190
   148c8:	movt	r3, #2
   148cc:	ldrb	r3, [r3, #156]	; 0x9c
   148d0:	cmp	r3, #0
   148d4:	bne	14914 <__assert_fail@plt+0x3710>
   148d8:	movw	r1, #49552	; 0xc190
   148dc:	movt	r1, #2
   148e0:	ldrd	r2, [sp, #72]	; 0x48
   148e4:	strd	r2, [r1, #136]	; 0x88
   148e8:	movw	r3, #49520	; 0xc170
   148ec:	movt	r3, #2
   148f0:	ldr	r3, [r3]
   148f4:	ldr	r2, [r6, r3, lsl #2]
   148f8:	add	r3, r6, r3, lsl #2
   148fc:	str	r2, [r3, #4]
   14900:	add	r6, r6, #4
   14904:	mov	r5, #0
   14908:	mov	r8, r5
   1490c:	mov	r7, #1
   14910:	b	146cc <__assert_fail@plt+0x34c8>
   14914:	movw	r3, #49520	; 0xc170
   14918:	movt	r3, #2
   1491c:	ldr	r3, [r3]
   14920:	add	r1, sp, #64	; 0x40
   14924:	ldr	r0, [r6, r3, lsl #2]
   14928:	bl	115f4 <__assert_fail@plt+0x3f0>
   1492c:	cmp	r0, #0
   14930:	beq	148d8 <__assert_fail@plt+0x36d4>
   14934:	movw	r1, #49552	; 0xc190
   14938:	movt	r1, #2
   1493c:	ldrd	r2, [sp, #64]	; 0x40
   14940:	strd	r2, [r1, #136]	; 0x88
   14944:	mov	r3, #1
   14948:	strb	r3, [r1, #157]	; 0x9d
   1494c:	ldr	r5, [sp, #72]	; 0x48
   14950:	ldr	r8, [sp, #76]	; 0x4c
   14954:	add	r6, r6, #8
   14958:	mov	r7, #0
   1495c:	b	146cc <__assert_fail@plt+0x34c8>
   14960:	movw	r2, #49552	; 0xc190
   14964:	movt	r2, #2
   14968:	ldrb	r2, [r2, #156]	; 0x9c
   1496c:	cmp	r2, #0
   14970:	moveq	r5, #0
   14974:	moveq	r8, r5
   14978:	moveq	r7, #3
   1497c:	beq	146cc <__assert_fail@plt+0x34c8>
   14980:	add	r3, r3, #1
   14984:	add	r1, sp, #64	; 0x40
   14988:	ldr	r0, [r6, r3, lsl #2]
   1498c:	bl	115f4 <__assert_fail@plt+0x3f0>
   14990:	cmp	r0, #0
   14994:	moveq	r7, #3
   14998:	beq	146a4 <__assert_fail@plt+0x34a0>
   1499c:	movw	r3, #49520	; 0xc170
   149a0:	movt	r3, #2
   149a4:	ldr	r3, [r3]
   149a8:	add	r3, r3, #2
   149ac:	add	r1, sp, #72	; 0x48
   149b0:	ldr	r0, [r6, r3, lsl #2]
   149b4:	bl	115f4 <__assert_fail@plt+0x3f0>
   149b8:	cmp	r0, #0
   149bc:	beq	14a08 <__assert_fail@plt+0x3804>
   149c0:	movw	r1, #49552	; 0xc190
   149c4:	movt	r1, #2
   149c8:	ldrd	r2, [sp, #64]	; 0x40
   149cc:	strd	r2, [r1, #136]	; 0x88
   149d0:	mov	r7, #1
   149d4:	strb	r7, [r1, #157]	; 0x9d
   149d8:	ldr	r5, [sp, #72]	; 0x48
   149dc:	ldr	r8, [sp, #76]	; 0x4c
   149e0:	movw	r3, #49520	; 0xc170
   149e4:	movt	r3, #2
   149e8:	ldr	r3, [r3]
   149ec:	ldr	r2, [r6, r3, lsl #2]
   149f0:	add	r3, r6, r3, lsl #2
   149f4:	str	r2, [r3, #8]
   149f8:	add	r6, r6, #8
   149fc:	b	146cc <__assert_fail@plt+0x34c8>
   14a00:	mov	r7, #2
   14a04:	b	146a4 <__assert_fail@plt+0x34a0>
   14a08:	mov	r7, #3
   14a0c:	b	146a4 <__assert_fail@plt+0x34a0>
   14a10:	mov	r2, #5
   14a14:	movw	r1, #44824	; 0xaf18
   14a18:	movt	r1, #1
   14a1c:	mov	r0, #0
   14a20:	bl	10fc4 <dcgettext@plt>
   14a24:	mov	r4, r0
   14a28:	movw	r3, #49520	; 0xc170
   14a2c:	movt	r3, #2
   14a30:	ldr	r3, [r3]
   14a34:	add	r3, r3, #1
   14a38:	ldr	r0, [r6, r3, lsl #2]
   14a3c:	bl	18174 <__assert_fail@plt+0x6f70>
   14a40:	mov	r3, r0
   14a44:	mov	r2, r4
   14a48:	mov	r1, #0
   14a4c:	mov	r0, r1
   14a50:	bl	1103c <error@plt>
   14a54:	mov	r2, #5
   14a58:	movw	r1, #44844	; 0xaf2c
   14a5c:	movt	r1, #1
   14a60:	mov	r0, #0
   14a64:	bl	10fc4 <dcgettext@plt>
   14a68:	mov	r3, r0
   14a6c:	movw	r2, #45376	; 0xb140
   14a70:	movt	r2, #1
   14a74:	mov	r1, #0
   14a78:	mov	r0, r1
   14a7c:	bl	1103c <error@plt>
   14a80:	mov	r0, #1
   14a84:	bl	135cc <__assert_fail@plt+0x23c8>
   14a88:	movw	r3, #49552	; 0xc190
   14a8c:	movt	r3, #2
   14a90:	mov	r2, #8
   14a94:	str	r2, [r3, #12]
   14a98:	mov	r2, #7
   14a9c:	str	r2, [r3, #8]
   14aa0:	movw	r2, #5368	; 0x14f8
   14aa4:	movt	r2, #1
   14aa8:	str	r2, [r3, #52]	; 0x34
   14aac:	b	14710 <__assert_fail@plt+0x350c>
   14ab0:	mov	r2, #5
   14ab4:	movw	r1, #44892	; 0xaf5c
   14ab8:	movt	r1, #1
   14abc:	mov	r0, #0
   14ac0:	bl	10fc4 <dcgettext@plt>
   14ac4:	mov	r2, r0
   14ac8:	mov	r1, #0
   14acc:	mov	r0, #1
   14ad0:	bl	1103c <error@plt>
   14ad4:	movw	r0, #44932	; 0xaf84
   14ad8:	movt	r0, #1
   14adc:	bl	12de4 <__assert_fail@plt+0x1be0>
   14ae0:	b	14770 <__assert_fail@plt+0x356c>
   14ae4:	mov	r2, #5
   14ae8:	movw	r1, #44936	; 0xaf88
   14aec:	movt	r1, #1
   14af0:	mov	r0, #0
   14af4:	bl	10fc4 <dcgettext@plt>
   14af8:	str	r5, [sp]
   14afc:	ldr	r3, [sp, #32]
   14b00:	mov	r2, r0
   14b04:	mov	r1, #0
   14b08:	mov	r0, r1
   14b0c:	bl	1103c <error@plt>
   14b10:	movw	r3, #49552	; 0xc190
   14b14:	movt	r3, #2
   14b18:	str	r5, [r3, #44]	; 0x2c
   14b1c:	movw	r3, #49552	; 0xc190
   14b20:	movt	r3, #2
   14b24:	ldr	ip, [r3]
   14b28:	cmp	ip, #0
   14b2c:	beq	14ba8 <__assert_fail@plt+0x39a4>
   14b30:	movw	r3, #49552	; 0xc190
   14b34:	movt	r3, #2
   14b38:	ldr	lr, [r3, #44]	; 0x2c
   14b3c:	ldr	r2, [r3, #4]
   14b40:	add	ip, r2, ip, lsl #5
   14b44:	mov	r1, r2
   14b48:	mov	r0, #0
   14b4c:	movw	r5, #39532	; 0x9a6c
   14b50:	movt	r5, #1
   14b54:	ldr	r3, [r1, #4]
   14b58:	ldr	r3, [r5, r3, lsl #2]
   14b5c:	udiv	r3, lr, r3
   14b60:	ldr	r6, [r1, #24]
   14b64:	mla	r3, r6, r3, r3
   14b68:	cmp	r0, r3
   14b6c:	movcc	r0, r3
   14b70:	add	r1, r1, #32
   14b74:	cmp	r1, ip
   14b78:	bne	14b54 <__assert_fail@plt+0x3950>
   14b7c:	movw	r1, #39532	; 0x9a6c
   14b80:	movt	r1, #1
   14b84:	ldr	r3, [r2, #4]
   14b88:	ldr	r3, [r1, r3, lsl #2]
   14b8c:	udiv	r3, lr, r3
   14b90:	ldr	r5, [r2, #24]
   14b94:	mls	r3, r5, r3, r0
   14b98:	str	r3, [r2, #28]
   14b9c:	add	r2, r2, #32
   14ba0:	cmp	r2, ip
   14ba4:	bne	14b84 <__assert_fail@plt+0x3980>
   14ba8:	movw	r3, #49552	; 0xc190
   14bac:	movt	r3, #2
   14bb0:	ldrb	r5, [r3, #42]	; 0x2a
   14bb4:	cmp	r5, #0
   14bb8:	beq	14f54 <__assert_fail@plt+0x3d50>
   14bbc:	mov	r4, r3
   14bc0:	ldr	r0, [r3, #152]	; 0x98
   14bc4:	cmp	r0, #100	; 0x64
   14bc8:	movcc	r0, #100	; 0x64
   14bcc:	str	r0, [sp, #64]	; 0x40
   14bd0:	bl	18748 <__assert_fail@plt+0x7544>
   14bd4:	mov	sl, r0
   14bd8:	ldrd	r6, [r4, #136]	; 0x88
   14bdc:	mov	r9, r4
   14be0:	movw	fp, #49540	; 0xc184
   14be4:	movt	fp, #2
   14be8:	movw	r3, #40428	; 0x9dec
   14bec:	movt	r3, #1
   14bf0:	str	r3, [sp, #16]
   14bf4:	movw	r3, #40432	; 0x9df0
   14bf8:	movt	r3, #1
   14bfc:	str	r3, [sp, #28]
   14c00:	ldrb	r3, [r9, #41]	; 0x29
   14c04:	cmp	r3, #0
   14c08:	beq	14c44 <__assert_fail@plt+0x3a40>
   14c0c:	ldr	r2, [r9, #152]	; 0x98
   14c10:	mov	r3, #0
   14c14:	ldrd	r0, [r9, #160]	; 0xa0
   14c18:	cmp	r3, r1
   14c1c:	cmpeq	r2, r0
   14c20:	bhi	14f38 <__assert_fail@plt+0x3d34>
   14c24:	subs	ip, r0, r2
   14c28:	str	ip, [sp, #48]	; 0x30
   14c2c:	sbc	r3, r1, r3
   14c30:	str	r3, [sp, #52]	; 0x34
   14c34:	ldrd	r2, [sp, #48]	; 0x30
   14c38:	cmp	r3, r7
   14c3c:	cmpeq	r2, r6
   14c40:	bls	14f38 <__assert_fail@plt+0x3d34>
   14c44:	ldr	r4, [r9, #152]	; 0x98
   14c48:	cmp	r4, #0
   14c4c:	movne	r4, #0
   14c50:	beq	14d88 <__assert_fail@plt+0x3b84>
   14c54:	add	r0, sp, #72	; 0x48
   14c58:	bl	12a80 <__assert_fail@plt+0x187c>
   14c5c:	and	r5, r5, r0
   14c60:	uxtb	r5, r5
   14c64:	adds	r6, r6, #1
   14c68:	adc	r7, r7, #0
   14c6c:	ldr	r8, [sp, #72]	; 0x48
   14c70:	cmp	r8, #0
   14c74:	blt	14cdc <__assert_fail@plt+0x3ad8>
   14c78:	bl	110a8 <__ctype_b_loc@plt>
   14c7c:	ldr	r2, [r0]
   14c80:	lsl	r3, r8, #1
   14c84:	ldrh	r3, [r2, r3]
   14c88:	tst	r3, #16384	; 0x4000
   14c8c:	beq	14c00 <__assert_fail@plt+0x39fc>
   14c90:	strb	r8, [sl, r4]
   14c94:	add	r4, r4, #1
   14c98:	ldr	r3, [r9, #152]	; 0x98
   14c9c:	cmp	r4, r3
   14ca0:	bcc	14c54 <__assert_fail@plt+0x3a50>
   14ca4:	b	14d88 <__assert_fail@plt+0x3b84>
   14ca8:	cmp	r0, #15
   14cac:	bgt	14ccc <__assert_fail@plt+0x3ac8>
   14cb0:	movw	r2, #49552	; 0xc190
   14cb4:	movt	r2, #2
   14cb8:	mov	r3, #16
   14cbc:	sdiv	r3, r3, r0
   14cc0:	mul	r5, r0, r3
   14cc4:	str	r5, [r2, #44]	; 0x2c
   14cc8:	b	14b1c <__assert_fail@plt+0x3918>
   14ccc:	movw	r3, #49552	; 0xc190
   14cd0:	movt	r3, #2
   14cd4:	str	r0, [r3, #44]	; 0x2c
   14cd8:	b	14b1c <__assert_fail@plt+0x3918>
   14cdc:	mov	r0, sl
   14ce0:	bl	15a7c <__assert_fail@plt+0x4878>
   14ce4:	mov	r0, r5
   14ce8:	ldr	r3, [sp, #36]	; 0x24
   14cec:	tst	r3, r0
   14cf0:	movne	r6, #1
   14cf4:	moveq	r6, #0
   14cf8:	movw	r3, #49552	; 0xc190
   14cfc:	movt	r3, #2
   14d00:	ldrb	r3, [r3, #40]	; 0x28
   14d04:	cmp	r3, #0
   14d08:	bne	151e8 <__assert_fail@plt+0x3fe4>
   14d0c:	eor	r0, r6, #1
   14d10:	uxtb	r0, r0
   14d14:	add	sp, sp, #84	; 0x54
   14d18:	ldrd	r4, [sp]
   14d1c:	ldrd	r6, [sp, #8]
   14d20:	ldrd	r8, [sp, #16]
   14d24:	ldrd	sl, [sp, #24]
   14d28:	add	sp, sp, #32
   14d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d30:	ldr	r3, [sp, #64]	; 0x40
   14d34:	cmp	r3, r4
   14d38:	beq	14dcc <__assert_fail@plt+0x3bc8>
   14d3c:	add	r0, sp, #72	; 0x48
   14d40:	bl	12a80 <__assert_fail@plt+0x187c>
   14d44:	and	r5, r5, r0
   14d48:	uxtb	r5, r5
   14d4c:	adds	r6, r6, #1
   14d50:	adc	r7, r7, #0
   14d54:	ldr	r8, [sp, #72]	; 0x48
   14d58:	cmp	r8, #0
   14d5c:	blt	14de0 <__assert_fail@plt+0x3bdc>
   14d60:	cmp	r8, #0
   14d64:	beq	14da4 <__assert_fail@plt+0x3ba0>
   14d68:	bl	110a8 <__ctype_b_loc@plt>
   14d6c:	ldr	r2, [r0]
   14d70:	lsl	r3, r8, #1
   14d74:	ldrh	r3, [r2, r3]
   14d78:	tst	r3, #16384	; 0x4000
   14d7c:	beq	14c00 <__assert_fail@plt+0x39fc>
   14d80:	strb	r8, [sl, r4]
   14d84:	add	r4, r4, #1
   14d88:	ldrb	r3, [r9, #41]	; 0x29
   14d8c:	cmp	r3, #0
   14d90:	beq	14d30 <__assert_fail@plt+0x3b2c>
   14d94:	ldrd	r2, [r9, #160]	; 0xa0
   14d98:	cmp	r7, r3
   14d9c:	cmpeq	r6, r2
   14da0:	bcc	14d30 <__assert_fail@plt+0x3b2c>
   14da4:	mov	r3, #0
   14da8:	strb	r3, [sl, r4]
   14dac:	mvn	r0, r4
   14db0:	ldr	r3, [r9, #52]	; 0x34
   14db4:	mov	r2, #32
   14db8:	adds	r0, r0, r6
   14dbc:	sbc	r1, r7, #0
   14dc0:	blx	r3
   14dc4:	sub	r4, sl, #1
   14dc8:	b	14e04 <__assert_fail@plt+0x3c00>
   14dcc:	add	r1, sp, #64	; 0x40
   14dd0:	mov	r0, sl
   14dd4:	bl	18978 <__assert_fail@plt+0x7774>
   14dd8:	mov	sl, r0
   14ddc:	b	14d3c <__assert_fail@plt+0x3b38>
   14de0:	mov	r0, sl
   14de4:	bl	15a7c <__assert_fail@plt+0x4878>
   14de8:	b	14ce4 <__assert_fail@plt+0x3ae0>
   14dec:	ldr	r3, [fp]
   14df0:	mov	r2, #2
   14df4:	mov	r1, #1
   14df8:	movw	r0, #40436	; 0x9df4
   14dfc:	movt	r0, #1
   14e00:	bl	10fa0 <fwrite_unlocked@plt>
   14e04:	ldrb	r1, [r4, #1]!
   14e08:	str	r1, [sp, #72]	; 0x48
   14e0c:	cmp	r1, #0
   14e10:	beq	14f08 <__assert_fail@plt+0x3d04>
   14e14:	sub	r3, r1, #7
   14e18:	cmp	r3, #6
   14e1c:	ldrls	pc, [pc, r3, lsl #2]
   14e20:	b	14ee0 <__assert_fail@plt+0x3cdc>
   14e24:	andeq	r4, r1, ip, ror #27
   14e28:	andeq	r4, r1, r0, asr #28
   14e2c:			; <UNDEFINED> instruction: 0x00014eb0
   14e30:	andeq	r4, r1, r8, ror lr
   14e34:	andeq	r4, r1, r8, asr #29
   14e38:	andeq	r4, r1, ip, asr lr
   14e3c:	muleq	r1, r4, lr
   14e40:	ldr	r3, [fp]
   14e44:	mov	r2, #2
   14e48:	mov	r1, #1
   14e4c:	movw	r0, #40412	; 0x9ddc
   14e50:	movt	r0, #1
   14e54:	bl	10fa0 <fwrite_unlocked@plt>
   14e58:	b	14e04 <__assert_fail@plt+0x3c00>
   14e5c:	ldr	r3, [fp]
   14e60:	mov	r2, #2
   14e64:	mov	r1, #1
   14e68:	movw	r0, #40416	; 0x9de0
   14e6c:	movt	r0, #1
   14e70:	bl	10fa0 <fwrite_unlocked@plt>
   14e74:	b	14e04 <__assert_fail@plt+0x3c00>
   14e78:	ldr	r3, [fp]
   14e7c:	mov	r2, #2
   14e80:	mov	r1, #1
   14e84:	movw	r0, #40420	; 0x9de4
   14e88:	movt	r0, #1
   14e8c:	bl	10fa0 <fwrite_unlocked@plt>
   14e90:	b	14e04 <__assert_fail@plt+0x3c00>
   14e94:	ldr	r3, [fp]
   14e98:	mov	r2, #2
   14e9c:	mov	r1, #1
   14ea0:	movw	r0, #40424	; 0x9de8
   14ea4:	movt	r0, #1
   14ea8:	bl	10fa0 <fwrite_unlocked@plt>
   14eac:	b	14e04 <__assert_fail@plt+0x3c00>
   14eb0:	ldr	r3, [fp]
   14eb4:	mov	r2, #2
   14eb8:	mov	r1, #1
   14ebc:	ldr	r0, [sp, #16]
   14ec0:	bl	10fa0 <fwrite_unlocked@plt>
   14ec4:	b	14e04 <__assert_fail@plt+0x3c00>
   14ec8:	ldr	r3, [fp]
   14ecc:	mov	r2, #2
   14ed0:	mov	r1, #1
   14ed4:	ldr	r0, [sp, #28]
   14ed8:	bl	10fa0 <fwrite_unlocked@plt>
   14edc:	b	14e04 <__assert_fail@plt+0x3c00>
   14ee0:	ldr	r0, [fp]
   14ee4:	ldr	r3, [r0, #20]
   14ee8:	ldr	r2, [r0, #24]
   14eec:	cmp	r3, r2
   14ef0:	addcc	r2, r3, #1
   14ef4:	strcc	r2, [r0, #20]
   14ef8:	strbcc	r1, [r3]
   14efc:	bcc	14e04 <__assert_fail@plt+0x3c00>
   14f00:	bl	11168 <__overflow@plt>
   14f04:	b	14e04 <__assert_fail@plt+0x3c00>
   14f08:	ldr	r0, [fp]
   14f0c:	ldr	r3, [r0, #20]
   14f10:	ldr	r2, [r0, #24]
   14f14:	cmp	r3, r2
   14f18:	addcc	r2, r3, #1
   14f1c:	strcc	r2, [r0, #20]
   14f20:	movcc	r2, #10
   14f24:	strbcc	r2, [r3]
   14f28:	bcc	14c00 <__assert_fail@plt+0x39fc>
   14f2c:	mov	r1, #10
   14f30:	bl	11168 <__overflow@plt>
   14f34:	b	14c00 <__assert_fail@plt+0x39fc>
   14f38:	mov	r0, sl
   14f3c:	bl	15a7c <__assert_fail@plt+0x4878>
   14f40:	mov	r0, #0
   14f44:	bl	12600 <__assert_fail@plt+0x13fc>
   14f48:	and	r5, r5, r0
   14f4c:	uxtb	r5, r5
   14f50:	b	14ce4 <__assert_fail@plt+0x3ae0>
   14f54:	movw	r6, #49552	; 0xc190
   14f58:	movt	r6, #2
   14f5c:	ldr	r1, [r6, #44]	; 0x2c
   14f60:	mov	r0, #2
   14f64:	bl	188c8 <__assert_fail@plt+0x76c4>
   14f68:	str	r0, [sp, #72]	; 0x48
   14f6c:	ldr	r3, [r6, #44]	; 0x2c
   14f70:	add	r0, r0, r3
   14f74:	str	r0, [sp, #76]	; 0x4c
   14f78:	ldrd	r8, [r6, #136]	; 0x88
   14f7c:	ldrb	r6, [r6, #41]	; 0x29
   14f80:	cmp	r6, #0
   14f84:	bne	14f94 <__assert_fail@plt+0x3d90>
   14f88:	movw	r7, #49552	; 0xc190
   14f8c:	movt	r7, #2
   14f90:	b	150a8 <__assert_fail@plt+0x3ea4>
   14f94:	movw	r7, #49552	; 0xc190
   14f98:	movt	r7, #2
   14f9c:	mov	fp, #0
   14fa0:	mov	sl, r5
   14fa4:	b	14fec <__assert_fail@plt+0x3de8>
   14fa8:	mov	r3, #0
   14fac:	str	r3, [sp, #64]	; 0x40
   14fb0:	mov	r4, r6
   14fb4:	b	1510c <__assert_fail@plt+0x3f08>
   14fb8:	eor	sl, sl, #1
   14fbc:	uxtb	sl, sl
   14fc0:	add	r3, sp, #80	; 0x50
   14fc4:	add	r3, r3, sl, lsl #2
   14fc8:	ldr	r1, [sp, #28]
   14fcc:	str	r1, [sp]
   14fd0:	ldr	r3, [r3, #-8]
   14fd4:	mov	r0, r8
   14fd8:	mov	r1, r9
   14fdc:	bl	12b10 <__assert_fail@plt+0x190c>
   14fe0:	ldr	r3, [sp, #64]	; 0x40
   14fe4:	adds	r8, r8, r3
   14fe8:	adc	r9, r9, #0
   14fec:	ldrd	r2, [r7, #160]	; 0xa0
   14ff0:	cmp	r3, r9
   14ff4:	cmpeq	r2, r8
   14ff8:	bls	14fa8 <__assert_fail@plt+0x3da4>
   14ffc:	add	r1, sp, #80	; 0x50
   15000:	add	r1, r1, sl, lsl #2
   15004:	ldr	r1, [r1, #-8]
   15008:	str	r1, [sp, #28]
   1500c:	subs	r4, r2, r8
   15010:	sbc	r5, r3, r9
   15014:	ldr	r3, [r7, #44]	; 0x2c
   15018:	str	r3, [sp, #16]
   1501c:	str	fp, [sp, #20]
   15020:	ldrd	r2, [sp, #16]
   15024:	cmp	r3, r5
   15028:	cmpeq	r2, r4
   1502c:	strdhi	r4, [sp, #16]
   15030:	add	r2, sp, #64	; 0x40
   15034:	ldr	r1, [sp, #28]
   15038:	ldr	r0, [sp, #16]
   1503c:	bl	12984 <__assert_fail@plt+0x1780>
   15040:	and	r6, r6, r0
   15044:	uxtb	r6, r6
   15048:	ldr	r2, [sp, #64]	; 0x40
   1504c:	ldr	r3, [r7, #44]	; 0x2c
   15050:	cmp	r2, r3
   15054:	bcc	15154 <__assert_fail@plt+0x3f50>
   15058:	beq	14fb8 <__assert_fail@plt+0x3db4>
   1505c:	ldr	r3, [pc, #260]	; 15168 <__assert_fail@plt+0x3f64>
   15060:	movw	r2, #1404	; 0x57c
   15064:	movw	r1, #40516	; 0x9e44
   15068:	movt	r1, #1
   1506c:	movw	r0, #44984	; 0xafb8
   15070:	movt	r0, #1
   15074:	bl	11204 <__assert_fail@plt>
   15078:	eor	r6, r6, #1
   1507c:	uxtb	r6, r6
   15080:	add	r3, sp, #80	; 0x50
   15084:	add	r3, r3, r6, lsl #2
   15088:	str	r5, [sp]
   1508c:	ldr	r3, [r3, #-8]
   15090:	mov	r0, r8
   15094:	mov	r1, r9
   15098:	bl	12b10 <__assert_fail@plt+0x190c>
   1509c:	ldr	r3, [sp, #64]	; 0x40
   150a0:	adds	r8, r8, r3
   150a4:	adc	r9, r9, #0
   150a8:	add	r3, sp, #80	; 0x50
   150ac:	add	r3, r3, r6, lsl #2
   150b0:	ldr	r5, [r3, #-8]
   150b4:	add	r2, sp, #64	; 0x40
   150b8:	mov	r1, r5
   150bc:	ldr	r0, [r7, #44]	; 0x2c
   150c0:	bl	12984 <__assert_fail@plt+0x1780>
   150c4:	and	r4, r4, r0
   150c8:	uxtb	r4, r4
   150cc:	ldr	r2, [sp, #64]	; 0x40
   150d0:	ldr	r3, [r7, #44]	; 0x2c
   150d4:	cmp	r2, r3
   150d8:	bcc	150fc <__assert_fail@plt+0x3ef8>
   150dc:	beq	15078 <__assert_fail@plt+0x3e74>
   150e0:	ldr	r3, [pc, #128]	; 15168 <__assert_fail@plt+0x3f64>
   150e4:	movw	r2, #1418	; 0x58a
   150e8:	movw	r1, #40516	; 0x9e44
   150ec:	movt	r1, #1
   150f0:	movw	r0, #44984	; 0xafb8
   150f4:	movt	r0, #1
   150f8:	bl	11204 <__assert_fail@plt>
   150fc:	mov	r5, r6
   15100:	ldr	r6, [sp, #64]	; 0x40
   15104:	cmp	r6, #0
   15108:	bne	1516c <__assert_fail@plt+0x3f68>
   1510c:	movw	r5, #49552	; 0xc190
   15110:	movt	r5, #2
   15114:	ldr	r3, [r5, #52]	; 0x34
   15118:	mov	r2, #10
   1511c:	mov	r0, r8
   15120:	mov	r1, r9
   15124:	blx	r3
   15128:	ldrb	r3, [r5, #41]	; 0x29
   1512c:	cmp	r3, #0
   15130:	beq	15144 <__assert_fail@plt+0x3f40>
   15134:	ldrd	r2, [r5, #160]	; 0xa0
   15138:	cmp	r9, r3
   1513c:	cmpeq	r8, r2
   15140:	bcs	151d4 <__assert_fail@plt+0x3fd0>
   15144:	ldr	r0, [sp, #72]	; 0x48
   15148:	bl	15a7c <__assert_fail@plt+0x4878>
   1514c:	mov	r0, r4
   15150:	b	14ce8 <__assert_fail@plt+0x3ae4>
   15154:	mov	r4, r6
   15158:	mov	r5, sl
   1515c:	b	15100 <__assert_fail@plt+0x3efc>
   15160:	muleq	r1, ip, ip
   15164:	muleq	r1, r4, ip
   15168:	andeq	r9, r1, r4, lsr #27
   1516c:	bl	11304 <__assert_fail@plt+0x100>
   15170:	add	r3, sp, #80	; 0x50
   15174:	add	r3, r3, r5, lsl #2
   15178:	ldr	r7, [r3, #-8]
   1517c:	sub	r2, r6, #1
   15180:	add	r2, r2, r0
   15184:	udiv	r2, r2, r0
   15188:	mul	r2, r0, r2
   1518c:	sub	r2, r2, r6
   15190:	mov	r1, #0
   15194:	add	r0, r7, r6
   15198:	bl	11108 <memset@plt>
   1519c:	eor	r3, r5, #1
   151a0:	uxtb	r3, r3
   151a4:	add	r2, sp, #80	; 0x50
   151a8:	add	r3, r2, r3, lsl #2
   151ac:	str	r7, [sp]
   151b0:	ldr	r3, [r3, #-8]
   151b4:	mov	r2, r6
   151b8:	mov	r0, r8
   151bc:	mov	r1, r9
   151c0:	bl	12b10 <__assert_fail@plt+0x190c>
   151c4:	ldr	r3, [sp, #64]	; 0x40
   151c8:	adds	r8, r8, r3
   151cc:	adc	r9, r9, #0
   151d0:	b	1510c <__assert_fail@plt+0x3f08>
   151d4:	mov	r0, #0
   151d8:	bl	12600 <__assert_fail@plt+0x13fc>
   151dc:	and	r4, r4, r0
   151e0:	uxtb	r4, r4
   151e4:	b	15144 <__assert_fail@plt+0x3f40>
   151e8:	movw	r3, #49536	; 0xc180
   151ec:	movt	r3, #2
   151f0:	ldr	r0, [r3]
   151f4:	bl	15950 <__assert_fail@plt+0x474c>
   151f8:	cmn	r0, #1
   151fc:	bne	14d0c <__assert_fail@plt+0x3b08>
   15200:	bl	110d8 <__errno_location@plt>
   15204:	ldr	r4, [r0]
   15208:	mov	r2, #5
   1520c:	movw	r1, #40444	; 0x9dfc
   15210:	movt	r1, #1
   15214:	mov	r0, #0
   15218:	bl	10fc4 <dcgettext@plt>
   1521c:	mov	r2, r0
   15220:	mov	r1, r4
   15224:	mov	r0, #1
   15228:	bl	1103c <error@plt>
   1522c:	mov	r0, #1
   15230:	b	14d14 <__assert_fail@plt+0x3b10>
   15234:	mov	r5, #0
   15238:	mov	r8, r5
   1523c:	mov	r7, #1
   15240:	b	146cc <__assert_fail@plt+0x34c8>
   15244:	mov	r5, #0
   15248:	mov	r8, r5
   1524c:	mov	r7, #2
   15250:	b	146cc <__assert_fail@plt+0x34c8>
   15254:	str	r4, [sp, #-8]!
   15258:	str	lr, [sp, #4]
   1525c:	mov	r0, #1
   15260:	bl	135cc <__assert_fail@plt+0x23c8>
   15264:	ldr	r4, [sp]
   15268:	add	sp, sp, #4
   1526c:	pop	{pc}		; (ldr pc, [sp], #4)
   15270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15274:	strd	r6, [sp, #8]
   15278:	strd	r8, [sp, #16]
   1527c:	strd	sl, [sp, #24]
   15280:	str	lr, [sp, #32]
   15284:	sub	sp, sp, #12
   15288:	str	r0, [sp]
   1528c:	mov	r5, r1
   15290:	mov	r6, r2
   15294:	str	r2, [sp, #4]
   15298:	mov	r9, r3
   1529c:	bl	110c0 <strlen@plt>
   152a0:	ldr	r4, [r5]
   152a4:	cmp	r4, #0
   152a8:	beq	15364 <__assert_fail@plt+0x4160>
   152ac:	mov	r8, r0
   152b0:	mov	fp, #0
   152b4:	mvn	sl, #0
   152b8:	mov	r7, fp
   152bc:	b	152dc <__assert_fail@plt+0x40d8>
   152c0:	mov	sl, r7
   152c4:	b	15344 <__assert_fail@plt+0x4140>
   152c8:	add	r7, r7, #1
   152cc:	ldr	r4, [r5, #4]!
   152d0:	add	r6, r6, r9
   152d4:	cmp	r4, #0
   152d8:	beq	1533c <__assert_fail@plt+0x4138>
   152dc:	mov	r2, r8
   152e0:	ldr	r1, [sp]
   152e4:	mov	r0, r4
   152e8:	bl	111e0 <strncmp@plt>
   152ec:	cmp	r0, #0
   152f0:	bne	152c8 <__assert_fail@plt+0x40c4>
   152f4:	mov	r0, r4
   152f8:	bl	110c0 <strlen@plt>
   152fc:	cmp	r0, r8
   15300:	beq	152c0 <__assert_fail@plt+0x40bc>
   15304:	cmn	sl, #1
   15308:	moveq	sl, r7
   1530c:	beq	152c8 <__assert_fail@plt+0x40c4>
   15310:	ldr	r3, [sp, #4]
   15314:	cmp	r3, #0
   15318:	moveq	fp, #1
   1531c:	beq	152c8 <__assert_fail@plt+0x40c4>
   15320:	mov	r2, r9
   15324:	mov	r1, r6
   15328:	mla	r0, r9, sl, r3
   1532c:	bl	10fac <memcmp@plt>
   15330:	cmp	r0, #0
   15334:	movne	fp, #1
   15338:	b	152c8 <__assert_fail@plt+0x40c4>
   1533c:	cmp	fp, #0
   15340:	mvnne	sl, #1
   15344:	mov	r0, sl
   15348:	add	sp, sp, #12
   1534c:	ldrd	r4, [sp]
   15350:	ldrd	r6, [sp, #8]
   15354:	ldrd	r8, [sp, #16]
   15358:	ldrd	sl, [sp, #24]
   1535c:	add	sp, sp, #32
   15360:	pop	{pc}		; (ldr pc, [sp], #4)
   15364:	mvn	sl, #0
   15368:	b	15344 <__assert_fail@plt+0x4140>
   1536c:	strd	r4, [sp, #-16]!
   15370:	str	r6, [sp, #8]
   15374:	str	lr, [sp, #12]
   15378:	mov	r6, r0
   1537c:	ldr	r0, [r1]
   15380:	cmp	r0, #0
   15384:	beq	153cc <__assert_fail@plt+0x41c8>
   15388:	mov	r4, r1
   1538c:	mov	r5, #0
   15390:	mov	r1, r6
   15394:	bl	10f34 <strcmp@plt>
   15398:	cmp	r0, #0
   1539c:	beq	153b8 <__assert_fail@plt+0x41b4>
   153a0:	add	r5, r5, #1
   153a4:	ldr	r0, [r4, #4]!
   153a8:	cmp	r0, #0
   153ac:	bne	15390 <__assert_fail@plt+0x418c>
   153b0:	mvn	r0, #0
   153b4:	b	153bc <__assert_fail@plt+0x41b8>
   153b8:	mov	r0, r5
   153bc:	ldrd	r4, [sp]
   153c0:	ldr	r6, [sp, #8]
   153c4:	add	sp, sp, #12
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	mvn	r0, #0
   153d0:	b	153bc <__assert_fail@plt+0x41b8>
   153d4:	strd	r4, [sp, #-16]!
   153d8:	str	r6, [sp, #8]
   153dc:	str	lr, [sp, #12]
   153e0:	sub	sp, sp, #8
   153e4:	mov	r6, r0
   153e8:	mov	r5, r1
   153ec:	cmn	r2, #1
   153f0:	mov	r2, #5
   153f4:	movweq	r1, #45272	; 0xb0d8
   153f8:	movteq	r1, #1
   153fc:	movwne	r1, #45300	; 0xb0f4
   15400:	movtne	r1, #1
   15404:	mov	r0, #0
   15408:	bl	10fc4 <dcgettext@plt>
   1540c:	mov	r4, r0
   15410:	mov	r2, r5
   15414:	mov	r1, #8
   15418:	mov	r0, #0
   1541c:	bl	17df8 <__assert_fail@plt+0x6bf4>
   15420:	mov	r5, r0
   15424:	mov	r1, r6
   15428:	mov	r0, #1
   1542c:	bl	18158 <__assert_fail@plt+0x6f54>
   15430:	str	r0, [sp]
   15434:	mov	r3, r5
   15438:	mov	r2, r4
   1543c:	mov	r1, #0
   15440:	mov	r0, r1
   15444:	bl	1103c <error@plt>
   15448:	add	sp, sp, #8
   1544c:	ldrd	r4, [sp]
   15450:	ldr	r6, [sp, #8]
   15454:	add	sp, sp, #12
   15458:	pop	{pc}		; (ldr pc, [sp], #4)
   1545c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15460:	strd	r6, [sp, #8]
   15464:	strd	r8, [sp, #16]
   15468:	strd	sl, [sp, #24]
   1546c:	str	lr, [sp, #32]
   15470:	sub	sp, sp, #12
   15474:	mov	r7, r0
   15478:	mov	r4, r1
   1547c:	mov	r8, r2
   15480:	mov	r2, #5
   15484:	movw	r1, #45332	; 0xb114
   15488:	movt	r1, #1
   1548c:	mov	r0, #0
   15490:	bl	10fc4 <dcgettext@plt>
   15494:	movw	r3, #49528	; 0xc178
   15498:	movt	r3, #2
   1549c:	ldr	r1, [r3]
   154a0:	bl	10f1c <fputs_unlocked@plt>
   154a4:	ldr	r5, [r7]
   154a8:	cmp	r5, #0
   154ac:	beq	15558 <__assert_fail@plt+0x4354>
   154b0:	mov	r3, #0
   154b4:	str	r3, [sp]
   154b8:	mov	r6, r3
   154bc:	movw	sl, #49528	; 0xc178
   154c0:	movt	sl, #2
   154c4:	movw	fp, #45356	; 0xb12c
   154c8:	movt	fp, #1
   154cc:	movw	r3, #45364	; 0xb134
   154d0:	movt	r3, #1
   154d4:	str	r3, [sp, #4]
   154d8:	b	15514 <__assert_fail@plt+0x4310>
   154dc:	ldr	r9, [sl]
   154e0:	mov	r0, r5
   154e4:	bl	18174 <__assert_fail@plt+0x6f70>
   154e8:	mov	r3, r0
   154ec:	mov	r2, fp
   154f0:	mov	r1, #1
   154f4:	mov	r0, r9
   154f8:	bl	11144 <__fprintf_chk@plt>
   154fc:	str	r4, [sp]
   15500:	add	r6, r6, #1
   15504:	ldr	r5, [r7, #4]!
   15508:	add	r4, r4, r8
   1550c:	cmp	r5, #0
   15510:	beq	15558 <__assert_fail@plt+0x4354>
   15514:	cmp	r6, #0
   15518:	beq	154dc <__assert_fail@plt+0x42d8>
   1551c:	mov	r2, r8
   15520:	mov	r1, r4
   15524:	ldr	r0, [sp]
   15528:	bl	10fac <memcmp@plt>
   1552c:	cmp	r0, #0
   15530:	bne	154dc <__assert_fail@plt+0x42d8>
   15534:	ldr	r9, [sl]
   15538:	mov	r0, r5
   1553c:	bl	18174 <__assert_fail@plt+0x6f70>
   15540:	mov	r3, r0
   15544:	ldr	r2, [sp, #4]
   15548:	mov	r1, #1
   1554c:	mov	r0, r9
   15550:	bl	11144 <__fprintf_chk@plt>
   15554:	b	15500 <__assert_fail@plt+0x42fc>
   15558:	movw	r3, #49528	; 0xc178
   1555c:	movt	r3, #2
   15560:	ldr	r0, [r3]
   15564:	ldr	r3, [r0, #20]
   15568:	ldr	r2, [r0, #24]
   1556c:	cmp	r3, r2
   15570:	addcc	r2, r3, #1
   15574:	strcc	r2, [r0, #20]
   15578:	movcc	r2, #10
   1557c:	strbcc	r2, [r3]
   15580:	bcs	155a0 <__assert_fail@plt+0x439c>
   15584:	add	sp, sp, #12
   15588:	ldrd	r4, [sp]
   1558c:	ldrd	r6, [sp, #8]
   15590:	ldrd	r8, [sp, #16]
   15594:	ldrd	sl, [sp, #24]
   15598:	add	sp, sp, #32
   1559c:	pop	{pc}		; (ldr pc, [sp], #4)
   155a0:	mov	r1, #10
   155a4:	bl	11168 <__overflow@plt>
   155a8:	b	15584 <__assert_fail@plt+0x4380>
   155ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   155b0:	strd	r6, [sp, #8]
   155b4:	str	r8, [sp, #16]
   155b8:	str	lr, [sp, #20]
   155bc:	mov	r7, r0
   155c0:	mov	r5, r1
   155c4:	mov	r4, r2
   155c8:	mov	r6, r3
   155cc:	ldrb	r3, [sp, #32]
   155d0:	cmp	r3, #0
   155d4:	beq	15608 <__assert_fail@plt+0x4404>
   155d8:	ldr	r3, [sp, #24]
   155dc:	mov	r2, r6
   155e0:	mov	r1, r4
   155e4:	mov	r0, r5
   155e8:	bl	15270 <__assert_fail@plt+0x406c>
   155ec:	cmp	r0, #0
   155f0:	blt	15618 <__assert_fail@plt+0x4414>
   155f4:	ldrd	r4, [sp]
   155f8:	ldrd	r6, [sp, #8]
   155fc:	ldr	r8, [sp, #16]
   15600:	add	sp, sp, #20
   15604:	pop	{pc}		; (ldr pc, [sp], #4)
   15608:	mov	r1, r2
   1560c:	mov	r0, r5
   15610:	bl	1536c <__assert_fail@plt+0x4168>
   15614:	b	155ec <__assert_fail@plt+0x43e8>
   15618:	mov	r2, r0
   1561c:	mov	r1, r5
   15620:	mov	r0, r7
   15624:	bl	153d4 <__assert_fail@plt+0x41d0>
   15628:	ldr	r2, [sp, #24]
   1562c:	mov	r1, r6
   15630:	mov	r0, r4
   15634:	bl	1545c <__assert_fail@plt+0x4258>
   15638:	ldr	r3, [sp, #28]
   1563c:	blx	r3
   15640:	mvn	r0, #0
   15644:	b	155f4 <__assert_fail@plt+0x43f0>
   15648:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1564c:	strd	r6, [sp, #8]
   15650:	str	r8, [sp, #16]
   15654:	str	lr, [sp, #20]
   15658:	ldr	r7, [r1]
   1565c:	cmp	r7, #0
   15660:	beq	1569c <__assert_fail@plt+0x4498>
   15664:	mov	r6, r3
   15668:	mov	r8, r0
   1566c:	mov	r4, r2
   15670:	mov	r5, r1
   15674:	mov	r2, r6
   15678:	mov	r1, r4
   1567c:	mov	r0, r8
   15680:	bl	10fac <memcmp@plt>
   15684:	cmp	r0, #0
   15688:	beq	1569c <__assert_fail@plt+0x4498>
   1568c:	ldr	r7, [r5, #4]!
   15690:	add	r4, r4, r6
   15694:	cmp	r7, #0
   15698:	bne	15674 <__assert_fail@plt+0x4470>
   1569c:	mov	r0, r7
   156a0:	ldrd	r4, [sp]
   156a4:	ldrd	r6, [sp, #8]
   156a8:	ldr	r8, [sp, #16]
   156ac:	add	sp, sp, #20
   156b0:	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	movw	r3, #49720	; 0xc238
   156b8:	movt	r3, #2
   156bc:	str	r0, [r3]
   156c0:	bx	lr
   156c4:	movw	r3, #49720	; 0xc238
   156c8:	movt	r3, #2
   156cc:	strb	r0, [r3, #4]
   156d0:	bx	lr
   156d4:	strd	r4, [sp, #-16]!
   156d8:	str	r6, [sp, #8]
   156dc:	str	lr, [sp, #12]
   156e0:	sub	sp, sp, #8
   156e4:	movw	r3, #49540	; 0xc184
   156e8:	movt	r3, #2
   156ec:	ldr	r0, [r3]
   156f0:	bl	195d8 <__assert_fail@plt+0x83d4>
   156f4:	cmp	r0, #0
   156f8:	beq	15720 <__assert_fail@plt+0x451c>
   156fc:	movw	r3, #49720	; 0xc238
   15700:	movt	r3, #2
   15704:	ldrb	r3, [r3, #4]
   15708:	cmp	r3, #0
   1570c:	beq	1574c <__assert_fail@plt+0x4548>
   15710:	bl	110d8 <__errno_location@plt>
   15714:	ldr	r3, [r0]
   15718:	cmp	r3, #32
   1571c:	bne	1574c <__assert_fail@plt+0x4548>
   15720:	movw	r3, #49528	; 0xc178
   15724:	movt	r3, #2
   15728:	ldr	r0, [r3]
   1572c:	bl	195d8 <__assert_fail@plt+0x83d4>
   15730:	cmp	r0, #0
   15734:	bne	157d4 <__assert_fail@plt+0x45d0>
   15738:	add	sp, sp, #8
   1573c:	ldrd	r4, [sp]
   15740:	ldr	r6, [sp, #8]
   15744:	add	sp, sp, #12
   15748:	pop	{pc}		; (ldr pc, [sp], #4)
   1574c:	mov	r2, #5
   15750:	movw	r1, #40464	; 0x9e10
   15754:	movt	r1, #1
   15758:	mov	r0, #0
   1575c:	bl	10fc4 <dcgettext@plt>
   15760:	mov	r4, r0
   15764:	movw	r3, #49720	; 0xc238
   15768:	movt	r3, #2
   1576c:	ldr	r5, [r3]
   15770:	cmp	r5, #0
   15774:	beq	157b4 <__assert_fail@plt+0x45b0>
   15778:	bl	110d8 <__errno_location@plt>
   1577c:	ldr	r6, [r0]
   15780:	mov	r0, r5
   15784:	bl	17f70 <__assert_fail@plt+0x6d6c>
   15788:	str	r4, [sp]
   1578c:	mov	r3, r0
   15790:	movw	r2, #45372	; 0xb13c
   15794:	movt	r2, #1
   15798:	mov	r1, r6
   1579c:	mov	r0, #0
   157a0:	bl	1103c <error@plt>
   157a4:	movw	r3, #49444	; 0xc124
   157a8:	movt	r3, #2
   157ac:	ldr	r0, [r3]
   157b0:	bl	10f64 <_exit@plt>
   157b4:	bl	110d8 <__errno_location@plt>
   157b8:	mov	r3, r4
   157bc:	movw	r2, #45376	; 0xb140
   157c0:	movt	r2, #1
   157c4:	ldr	r1, [r0]
   157c8:	mov	r0, #0
   157cc:	bl	1103c <error@plt>
   157d0:	b	157a4 <__assert_fail@plt+0x45a0>
   157d4:	movw	r3, #49444	; 0xc124
   157d8:	movt	r3, #2
   157dc:	ldr	r0, [r3]
   157e0:	bl	10f64 <_exit@plt>
   157e4:	andeq	r0, r0, r0
   157e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157ec:	strd	r6, [sp, #8]
   157f0:	strd	r8, [sp, #16]
   157f4:	strd	sl, [sp, #24]
   157f8:	str	lr, [sp, #32]
   157fc:	vpush	{d8}
   15800:	sub	sp, sp, #44	; 0x2c
   15804:	mov	r7, r0
   15808:	mov	r6, r1
   1580c:	mov	fp, r3
   15810:	vmov.f64	d8, d0
   15814:	vcmpe.f64	d0, #0.0
   15818:	vmrs	APSR_nzcv, fpscr
   1581c:	vnegmi.f64	d6, d0
   15820:	vmovpl.f64	d6, d0
   15824:	mov	r3, #37	; 0x25
   15828:	strb	r3, [sp, #28]
   1582c:	mov	r3, #45	; 0x2d
   15830:	strb	r3, [sp, #29]
   15834:	add	r1, sp, #29
   15838:	and	r3, r2, #1
   1583c:	add	r0, r1, r3
   15840:	mov	ip, #43	; 0x2b
   15844:	strb	ip, [r1, r3]
   15848:	ubfx	r3, r2, #1, #1
   1584c:	add	r1, r0, r3
   15850:	mov	ip, #32
   15854:	strb	ip, [r0, r3]
   15858:	ubfx	r3, r2, #2, #1
   1585c:	add	ip, r1, r3
   15860:	mov	r0, #48	; 0x30
   15864:	strb	r0, [r1, r3]
   15868:	ubfx	r0, r2, #3, #1
   1586c:	add	r3, ip, r0
   15870:	mov	r1, #42	; 0x2a
   15874:	strb	r1, [ip, r0]
   15878:	mov	r0, #46	; 0x2e
   1587c:	strb	r0, [r3, #1]
   15880:	strb	r1, [r3, #2]
   15884:	and	r2, r2, #16
   15888:	cmp	r2, #0
   1588c:	movne	r2, #71	; 0x47
   15890:	moveq	r2, #103	; 0x67
   15894:	strb	r2, [r3, #3]
   15898:	mov	r2, #0
   1589c:	strb	r2, [r3, #4]
   158a0:	vldr	d7, [pc, #160]	; 15948 <__assert_fail@plt+0x4744>
   158a4:	vcmpe.f64	d6, d7
   158a8:	vmrs	APSR_nzcv, fpscr
   158ac:	movmi	r4, #1
   158b0:	movpl	r4, #15
   158b4:	add	sl, sp, #28
   158b8:	mvn	r9, #0
   158bc:	mov	r8, #1
   158c0:	b	158c8 <__assert_fail@plt+0x46c4>
   158c4:	add	r4, r4, #1
   158c8:	vstr	d8, [sp, #16]
   158cc:	str	r4, [sp, #8]
   158d0:	str	fp, [sp, #4]
   158d4:	str	sl, [sp]
   158d8:	mov	r3, r9
   158dc:	mov	r2, r8
   158e0:	mov	r1, r6
   158e4:	mov	r0, r7
   158e8:	bl	111f8 <__snprintf_chk@plt>
   158ec:	mov	r5, r0
   158f0:	cmp	r4, #16
   158f4:	movle	r3, #0
   158f8:	movgt	r3, #1
   158fc:	orrs	r3, r3, r0, lsr #31
   15900:	bne	15924 <__assert_fail@plt+0x4720>
   15904:	cmp	r0, r6
   15908:	bcs	158c4 <__assert_fail@plt+0x46c0>
   1590c:	mov	r1, #0
   15910:	mov	r0, r7
   15914:	bl	1112c <strtod@plt>
   15918:	vcmp.f64	d0, d8
   1591c:	vmrs	APSR_nzcv, fpscr
   15920:	bne	158c4 <__assert_fail@plt+0x46c0>
   15924:	mov	r0, r5
   15928:	add	sp, sp, #44	; 0x2c
   1592c:	vpop	{d8}
   15930:	ldrd	r4, [sp]
   15934:	ldrd	r6, [sp, #8]
   15938:	ldrd	r8, [sp, #16]
   1593c:	ldrd	sl, [sp, #24]
   15940:	add	sp, sp, #32
   15944:	pop	{pc}		; (ldr pc, [sp], #4)
   15948:	andeq	r0, r0, r0
   1594c:	andseq	r0, r0, r0
   15950:	strd	r4, [sp, #-16]!
   15954:	str	r6, [sp, #8]
   15958:	str	lr, [sp, #12]
   1595c:	sub	sp, sp, #8
   15960:	mov	r4, r0
   15964:	bl	11138 <fileno@plt>
   15968:	cmp	r0, #0
   1596c:	blt	159e4 <__assert_fail@plt+0x47e0>
   15970:	mov	r0, r4
   15974:	bl	11084 <__freading@plt>
   15978:	cmp	r0, #0
   1597c:	beq	159b0 <__assert_fail@plt+0x47ac>
   15980:	mov	r0, r4
   15984:	bl	11138 <fileno@plt>
   15988:	mov	r3, #1
   1598c:	str	r3, [sp]
   15990:	mov	r2, #0
   15994:	mov	r3, #0
   15998:	bl	1100c <lseek64@plt>
   1599c:	mvn	r2, #0
   159a0:	mvn	r3, #0
   159a4:	cmp	r1, r3
   159a8:	cmpeq	r0, r2
   159ac:	beq	159f0 <__assert_fail@plt+0x47ec>
   159b0:	mov	r0, r4
   159b4:	bl	15a0c <__assert_fail@plt+0x4808>
   159b8:	cmp	r0, #0
   159bc:	beq	159f0 <__assert_fail@plt+0x47ec>
   159c0:	bl	110d8 <__errno_location@plt>
   159c4:	mov	r5, r0
   159c8:	ldr	r6, [r0]
   159cc:	mov	r0, r4
   159d0:	bl	11150 <fclose@plt>
   159d4:	cmp	r6, #0
   159d8:	strne	r6, [r5]
   159dc:	mvnne	r0, #0
   159e0:	b	159f8 <__assert_fail@plt+0x47f4>
   159e4:	mov	r0, r4
   159e8:	bl	11150 <fclose@plt>
   159ec:	b	159f8 <__assert_fail@plt+0x47f4>
   159f0:	mov	r0, r4
   159f4:	bl	11150 <fclose@plt>
   159f8:	add	sp, sp, #8
   159fc:	ldrd	r4, [sp]
   15a00:	ldr	r6, [sp, #8]
   15a04:	add	sp, sp, #12
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	str	r4, [sp, #-8]!
   15a10:	str	lr, [sp, #4]
   15a14:	sub	sp, sp, #8
   15a18:	subs	r4, r0, #0
   15a1c:	beq	15a30 <__assert_fail@plt+0x482c>
   15a20:	mov	r0, r4
   15a24:	bl	11084 <__freading@plt>
   15a28:	cmp	r0, #0
   15a2c:	bne	15a48 <__assert_fail@plt+0x4844>
   15a30:	mov	r0, r4
   15a34:	bl	10f40 <fflush@plt>
   15a38:	add	sp, sp, #8
   15a3c:	ldr	r4, [sp]
   15a40:	add	sp, sp, #4
   15a44:	pop	{pc}		; (ldr pc, [sp], #4)
   15a48:	ldr	r3, [r4]
   15a4c:	tst	r3, #256	; 0x100
   15a50:	bne	15a60 <__assert_fail@plt+0x485c>
   15a54:	mov	r0, r4
   15a58:	bl	10f40 <fflush@plt>
   15a5c:	b	15a38 <__assert_fail@plt+0x4834>
   15a60:	mov	r3, #1
   15a64:	str	r3, [sp]
   15a68:	mov	r2, #0
   15a6c:	mov	r3, #0
   15a70:	mov	r0, r4
   15a74:	bl	15adc <__assert_fail@plt+0x48d8>
   15a78:	b	15a54 <__assert_fail@plt+0x4850>
   15a7c:	strd	r4, [sp, #-12]!
   15a80:	str	lr, [sp, #8]
   15a84:	sub	sp, sp, #12
   15a88:	mov	r5, r0
   15a8c:	bl	110d8 <__errno_location@plt>
   15a90:	mov	r4, r0
   15a94:	ldr	r3, [r0]
   15a98:	str	r3, [sp]
   15a9c:	str	r3, [sp, #4]
   15aa0:	mov	r3, #0
   15aa4:	str	r3, [r0]
   15aa8:	mov	r0, r5
   15aac:	bl	10f4c <free@plt>
   15ab0:	ldr	r3, [r4]
   15ab4:	clz	r3, r3
   15ab8:	lsr	r3, r3, #5
   15abc:	add	r2, sp, #8
   15ac0:	add	r3, r2, r3, lsl #2
   15ac4:	ldr	r3, [r3, #-8]
   15ac8:	str	r3, [r4]
   15acc:	add	sp, sp, #12
   15ad0:	ldrd	r4, [sp]
   15ad4:	add	sp, sp, #8
   15ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   15adc:	str	r4, [sp, #-16]!
   15ae0:	strd	r6, [sp, #4]
   15ae4:	str	lr, [sp, #12]
   15ae8:	sub	sp, sp, #8
   15aec:	mov	r4, r0
   15af0:	mov	r6, r2
   15af4:	mov	r7, r3
   15af8:	ldr	r2, [r0, #8]
   15afc:	ldr	r3, [r0, #4]
   15b00:	cmp	r2, r3
   15b04:	beq	15b34 <__assert_fail@plt+0x4930>
   15b08:	ldr	r3, [sp, #24]
   15b0c:	str	r3, [sp]
   15b10:	mov	r2, r6
   15b14:	mov	r3, r7
   15b18:	mov	r0, r4
   15b1c:	bl	1115c <fseeko64@plt>
   15b20:	add	sp, sp, #8
   15b24:	ldr	r4, [sp]
   15b28:	ldrd	r6, [sp, #4]
   15b2c:	add	sp, sp, #12
   15b30:	pop	{pc}		; (ldr pc, [sp], #4)
   15b34:	ldr	r2, [r0, #20]
   15b38:	ldr	r3, [r0, #16]
   15b3c:	cmp	r2, r3
   15b40:	bne	15b08 <__assert_fail@plt+0x4904>
   15b44:	ldr	r3, [r0, #36]	; 0x24
   15b48:	cmp	r3, #0
   15b4c:	bne	15b08 <__assert_fail@plt+0x4904>
   15b50:	bl	11138 <fileno@plt>
   15b54:	ldr	r3, [sp, #24]
   15b58:	str	r3, [sp]
   15b5c:	mov	r2, r6
   15b60:	mov	r3, r7
   15b64:	bl	1100c <lseek64@plt>
   15b68:	mvn	r2, #0
   15b6c:	mvn	r3, #0
   15b70:	cmp	r1, r3
   15b74:	cmpeq	r0, r2
   15b78:	beq	15b94 <__assert_fail@plt+0x4990>
   15b7c:	ldr	r3, [r4]
   15b80:	bic	r3, r3, #16
   15b84:	str	r3, [r4]
   15b88:	strd	r0, [r4, #80]	; 0x50
   15b8c:	mov	r0, #0
   15b90:	b	15b20 <__assert_fail@plt+0x491c>
   15b94:	mvn	r0, #0
   15b98:	b	15b20 <__assert_fail@plt+0x491c>
   15b9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ba0:	strd	r6, [sp, #8]
   15ba4:	strd	r8, [sp, #16]
   15ba8:	strd	sl, [sp, #24]
   15bac:	str	lr, [sp, #32]
   15bb0:	vpush	{d8-d9}
   15bb4:	sub	sp, sp, #44	; 0x2c
   15bb8:	mov	r7, r0
   15bbc:	mov	r6, r1
   15bc0:	mov	fp, r3
   15bc4:	vmov.f32	s18, s0
   15bc8:	vcvt.f64.f32	d8, s0
   15bcc:	vcmpe.f32	s0, #0.0
   15bd0:	vmrs	APSR_nzcv, fpscr
   15bd4:	vnegmi.f32	s14, s0
   15bd8:	vmovpl.f32	s14, s0
   15bdc:	mov	r3, #37	; 0x25
   15be0:	strb	r3, [sp, #28]
   15be4:	mov	r3, #45	; 0x2d
   15be8:	strb	r3, [sp, #29]
   15bec:	add	r1, sp, #29
   15bf0:	and	r3, r2, #1
   15bf4:	add	r0, r1, r3
   15bf8:	mov	ip, #43	; 0x2b
   15bfc:	strb	ip, [r1, r3]
   15c00:	ubfx	r3, r2, #1, #1
   15c04:	add	r1, r0, r3
   15c08:	mov	ip, #32
   15c0c:	strb	ip, [r0, r3]
   15c10:	ubfx	r3, r2, #2, #1
   15c14:	add	ip, r1, r3
   15c18:	mov	r0, #48	; 0x30
   15c1c:	strb	r0, [r1, r3]
   15c20:	ubfx	r0, r2, #3, #1
   15c24:	add	r3, ip, r0
   15c28:	mov	r1, #42	; 0x2a
   15c2c:	strb	r1, [ip, r0]
   15c30:	mov	r0, #46	; 0x2e
   15c34:	strb	r0, [r3, #1]
   15c38:	strb	r1, [r3, #2]
   15c3c:	and	r2, r2, #16
   15c40:	cmp	r2, #0
   15c44:	movne	r2, #71	; 0x47
   15c48:	moveq	r2, #103	; 0x67
   15c4c:	strb	r2, [r3, #3]
   15c50:	mov	r2, #0
   15c54:	strb	r2, [r3, #4]
   15c58:	vldr	s15, [pc, #160]	; 15d00 <__assert_fail@plt+0x4afc>
   15c5c:	vcmpe.f32	s14, s15
   15c60:	vmrs	APSR_nzcv, fpscr
   15c64:	movmi	r4, #1
   15c68:	movpl	r4, #6
   15c6c:	add	sl, sp, #28
   15c70:	mvn	r9, #0
   15c74:	mov	r8, #1
   15c78:	b	15c80 <__assert_fail@plt+0x4a7c>
   15c7c:	add	r4, r4, #1
   15c80:	vstr	d8, [sp, #16]
   15c84:	str	r4, [sp, #8]
   15c88:	str	fp, [sp, #4]
   15c8c:	str	sl, [sp]
   15c90:	mov	r3, r9
   15c94:	mov	r2, r8
   15c98:	mov	r1, r6
   15c9c:	mov	r0, r7
   15ca0:	bl	111f8 <__snprintf_chk@plt>
   15ca4:	mov	r5, r0
   15ca8:	cmp	r4, #8
   15cac:	movle	r3, #0
   15cb0:	movgt	r3, #1
   15cb4:	orrs	r3, r3, r0, lsr #31
   15cb8:	bne	15cdc <__assert_fail@plt+0x4ad8>
   15cbc:	cmp	r0, r6
   15cc0:	bcs	15c7c <__assert_fail@plt+0x4a78>
   15cc4:	mov	r1, #0
   15cc8:	mov	r0, r7
   15ccc:	bl	11048 <strtof@plt>
   15cd0:	vcmp.f32	s0, s18
   15cd4:	vmrs	APSR_nzcv, fpscr
   15cd8:	bne	15c7c <__assert_fail@plt+0x4a78>
   15cdc:	mov	r0, r5
   15ce0:	add	sp, sp, #44	; 0x2c
   15ce4:	vpop	{d8-d9}
   15ce8:	ldrd	r4, [sp]
   15cec:	ldrd	r6, [sp, #8]
   15cf0:	ldrd	r8, [sp, #16]
   15cf4:	ldrd	sl, [sp, #24]
   15cf8:	add	sp, sp, #32
   15cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15d00:	addeq	r0, r0, r0
   15d04:	andeq	r0, r0, r0
   15d08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d0c:	strd	r6, [sp, #8]
   15d10:	strd	r8, [sp, #16]
   15d14:	strd	sl, [sp, #24]
   15d18:	str	lr, [sp, #32]
   15d1c:	vpush	{d8}
   15d20:	sub	sp, sp, #44	; 0x2c
   15d24:	mov	r7, r0
   15d28:	mov	r6, r1
   15d2c:	mov	fp, r3
   15d30:	vmov.f64	d8, d0
   15d34:	vcmpe.f64	d0, #0.0
   15d38:	vmrs	APSR_nzcv, fpscr
   15d3c:	vnegmi.f64	d6, d0
   15d40:	vmovpl.f64	d6, d0
   15d44:	mov	r3, #37	; 0x25
   15d48:	strb	r3, [sp, #28]
   15d4c:	mov	r3, #45	; 0x2d
   15d50:	strb	r3, [sp, #29]
   15d54:	add	r1, sp, #29
   15d58:	and	r3, r2, #1
   15d5c:	add	r0, r1, r3
   15d60:	mov	ip, #43	; 0x2b
   15d64:	strb	ip, [r1, r3]
   15d68:	ubfx	r3, r2, #1, #1
   15d6c:	add	r1, r0, r3
   15d70:	mov	ip, #32
   15d74:	strb	ip, [r0, r3]
   15d78:	ubfx	r3, r2, #2, #1
   15d7c:	add	ip, r1, r3
   15d80:	mov	r0, #48	; 0x30
   15d84:	strb	r0, [r1, r3]
   15d88:	ubfx	r0, r2, #3, #1
   15d8c:	add	r3, ip, r0
   15d90:	mov	r1, #42	; 0x2a
   15d94:	strb	r1, [ip, r0]
   15d98:	mov	r0, #46	; 0x2e
   15d9c:	strb	r0, [r3, #1]
   15da0:	strb	r1, [r3, #2]
   15da4:	mov	r1, #76	; 0x4c
   15da8:	strb	r1, [r3, #3]
   15dac:	and	r2, r2, #16
   15db0:	cmp	r2, #0
   15db4:	movne	r2, #71	; 0x47
   15db8:	moveq	r2, #103	; 0x67
   15dbc:	strb	r2, [r3, #4]
   15dc0:	mov	r2, #0
   15dc4:	strb	r2, [r3, #5]
   15dc8:	vldr	d7, [pc, #160]	; 15e70 <__assert_fail@plt+0x4c6c>
   15dcc:	vcmpe.f64	d6, d7
   15dd0:	vmrs	APSR_nzcv, fpscr
   15dd4:	movmi	r4, #1
   15dd8:	movpl	r4, #15
   15ddc:	add	sl, sp, #28
   15de0:	mvn	r9, #0
   15de4:	mov	r8, #1
   15de8:	b	15df0 <__assert_fail@plt+0x4bec>
   15dec:	add	r4, r4, #1
   15df0:	vstr	d8, [sp, #16]
   15df4:	str	r4, [sp, #8]
   15df8:	str	fp, [sp, #4]
   15dfc:	str	sl, [sp]
   15e00:	mov	r3, r9
   15e04:	mov	r2, r8
   15e08:	mov	r1, r6
   15e0c:	mov	r0, r7
   15e10:	bl	111f8 <__snprintf_chk@plt>
   15e14:	mov	r5, r0
   15e18:	cmp	r4, #16
   15e1c:	movle	r3, #0
   15e20:	movgt	r3, #1
   15e24:	orrs	r3, r3, r0, lsr #31
   15e28:	bne	15e4c <__assert_fail@plt+0x4c48>
   15e2c:	cmp	r0, r6
   15e30:	bcs	15dec <__assert_fail@plt+0x4be8>
   15e34:	mov	r1, #0
   15e38:	mov	r0, r7
   15e3c:	bl	10f94 <strtold@plt>
   15e40:	vcmp.f64	d0, d8
   15e44:	vmrs	APSR_nzcv, fpscr
   15e48:	bne	15dec <__assert_fail@plt+0x4be8>
   15e4c:	mov	r0, r5
   15e50:	add	sp, sp, #44	; 0x2c
   15e54:	vpop	{d8}
   15e58:	ldrd	r4, [sp]
   15e5c:	ldrd	r6, [sp, #8]
   15e60:	ldrd	r8, [sp, #16]
   15e64:	ldrd	sl, [sp, #24]
   15e68:	add	sp, sp, #32
   15e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e70:	andeq	r0, r0, r0
   15e74:	andseq	r0, r0, r0
   15e78:	strd	r4, [sp, #-16]!
   15e7c:	str	r6, [sp, #8]
   15e80:	str	lr, [sp, #12]
   15e84:	subs	r4, r0, #0
   15e88:	beq	15f24 <__assert_fail@plt+0x4d20>
   15e8c:	mov	r1, #47	; 0x2f
   15e90:	mov	r0, r4
   15e94:	bl	11180 <strrchr@plt>
   15e98:	subs	r5, r0, #0
   15e9c:	beq	15efc <__assert_fail@plt+0x4cf8>
   15ea0:	add	r6, r5, #1
   15ea4:	sub	r3, r6, r4
   15ea8:	cmp	r3, #6
   15eac:	ble	15efc <__assert_fail@plt+0x4cf8>
   15eb0:	mov	r2, #7
   15eb4:	movw	r1, #45436	; 0xb17c
   15eb8:	movt	r1, #1
   15ebc:	sub	r0, r5, #6
   15ec0:	bl	111e0 <strncmp@plt>
   15ec4:	cmp	r0, #0
   15ec8:	bne	15efc <__assert_fail@plt+0x4cf8>
   15ecc:	mov	r2, #3
   15ed0:	movw	r1, #45444	; 0xb184
   15ed4:	movt	r1, #1
   15ed8:	mov	r0, r6
   15edc:	bl	111e0 <strncmp@plt>
   15ee0:	cmp	r0, #0
   15ee4:	movne	r4, r6
   15ee8:	bne	15efc <__assert_fail@plt+0x4cf8>
   15eec:	add	r4, r5, #4
   15ef0:	movw	r3, #49512	; 0xc168
   15ef4:	movt	r3, #2
   15ef8:	str	r4, [r3]
   15efc:	movw	r3, #49728	; 0xc240
   15f00:	movt	r3, #2
   15f04:	str	r4, [r3]
   15f08:	movw	r3, #49516	; 0xc16c
   15f0c:	movt	r3, #2
   15f10:	str	r4, [r3]
   15f14:	ldrd	r4, [sp]
   15f18:	ldr	r6, [sp, #8]
   15f1c:	add	sp, sp, #12
   15f20:	pop	{pc}		; (ldr pc, [sp], #4)
   15f24:	movw	r3, #49528	; 0xc178
   15f28:	movt	r3, #2
   15f2c:	ldr	r3, [r3]
   15f30:	mov	r2, #55	; 0x37
   15f34:	mov	r1, #1
   15f38:	movw	r0, #45380	; 0xb144
   15f3c:	movt	r0, #1
   15f40:	bl	11000 <fwrite@plt>
   15f44:	bl	111ec <abort@plt>
   15f48:	mov	r2, #0
   15f4c:	mov	r3, #0
   15f50:	strd	r2, [r0]
   15f54:	strd	r2, [r0, #8]
   15f58:	strd	r2, [r0, #16]
   15f5c:	strd	r2, [r0, #24]
   15f60:	strd	r2, [r0, #32]
   15f64:	strd	r2, [r0, #40]	; 0x28
   15f68:	cmp	r1, #10
   15f6c:	beq	15f78 <__assert_fail@plt+0x4d74>
   15f70:	str	r1, [r0]
   15f74:	bx	lr
   15f78:	str	r4, [sp, #-8]!
   15f7c:	str	lr, [sp, #4]
   15f80:	bl	111ec <abort@plt>
   15f84:	strd	r4, [sp, #-16]!
   15f88:	str	r6, [sp, #8]
   15f8c:	str	lr, [sp, #12]
   15f90:	mov	r5, r0
   15f94:	mov	r6, r1
   15f98:	mov	r2, #5
   15f9c:	mov	r1, r0
   15fa0:	mov	r0, #0
   15fa4:	bl	10fc4 <dcgettext@plt>
   15fa8:	mov	r4, r0
   15fac:	cmp	r5, r0
   15fb0:	beq	15fc8 <__assert_fail@plt+0x4dc4>
   15fb4:	mov	r0, r4
   15fb8:	ldrd	r4, [sp]
   15fbc:	ldr	r6, [sp, #8]
   15fc0:	add	sp, sp, #12
   15fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc8:	bl	19664 <__assert_fail@plt+0x8460>
   15fcc:	ldrb	r3, [r0]
   15fd0:	bic	r3, r3, #32
   15fd4:	cmp	r3, #85	; 0x55
   15fd8:	bne	1605c <__assert_fail@plt+0x4e58>
   15fdc:	ldrb	r3, [r0, #1]
   15fe0:	bic	r3, r3, #32
   15fe4:	cmp	r3, #84	; 0x54
   15fe8:	bne	16020 <__assert_fail@plt+0x4e1c>
   15fec:	ldrb	r3, [r0, #2]
   15ff0:	bic	r3, r3, #32
   15ff4:	cmp	r3, #70	; 0x46
   15ff8:	bne	16020 <__assert_fail@plt+0x4e1c>
   15ffc:	ldrb	r3, [r0, #3]
   16000:	cmp	r3, #45	; 0x2d
   16004:	bne	16020 <__assert_fail@plt+0x4e1c>
   16008:	ldrb	r3, [r0, #4]
   1600c:	cmp	r3, #56	; 0x38
   16010:	bne	16020 <__assert_fail@plt+0x4e1c>
   16014:	ldrb	r3, [r0, #5]
   16018:	cmp	r3, #0
   1601c:	beq	1603c <__assert_fail@plt+0x4e38>
   16020:	movw	r4, #45532	; 0xb1dc
   16024:	movt	r4, #1
   16028:	movw	r3, #45552	; 0xb1f0
   1602c:	movt	r3, #1
   16030:	cmp	r6, #9
   16034:	movne	r4, r3
   16038:	b	15fb4 <__assert_fail@plt+0x4db0>
   1603c:	ldrb	r2, [r4]
   16040:	movw	r4, #45548	; 0xb1ec
   16044:	movt	r4, #1
   16048:	movw	r3, #45536	; 0xb1e0
   1604c:	movt	r3, #1
   16050:	cmp	r2, #96	; 0x60
   16054:	movne	r4, r3
   16058:	b	15fb4 <__assert_fail@plt+0x4db0>
   1605c:	cmp	r3, #71	; 0x47
   16060:	bne	16020 <__assert_fail@plt+0x4e1c>
   16064:	ldrb	r3, [r0, #1]
   16068:	bic	r3, r3, #32
   1606c:	cmp	r3, #66	; 0x42
   16070:	bne	16020 <__assert_fail@plt+0x4e1c>
   16074:	ldrb	r3, [r0, #2]
   16078:	cmp	r3, #49	; 0x31
   1607c:	bne	16020 <__assert_fail@plt+0x4e1c>
   16080:	ldrb	r3, [r0, #3]
   16084:	cmp	r3, #56	; 0x38
   16088:	bne	16020 <__assert_fail@plt+0x4e1c>
   1608c:	ldrb	r3, [r0, #4]
   16090:	cmp	r3, #48	; 0x30
   16094:	bne	16020 <__assert_fail@plt+0x4e1c>
   16098:	ldrb	r3, [r0, #5]
   1609c:	cmp	r3, #51	; 0x33
   160a0:	bne	16020 <__assert_fail@plt+0x4e1c>
   160a4:	ldrb	r3, [r0, #6]
   160a8:	cmp	r3, #48	; 0x30
   160ac:	bne	16020 <__assert_fail@plt+0x4e1c>
   160b0:	ldrb	r3, [r0, #7]
   160b4:	cmp	r3, #0
   160b8:	bne	16020 <__assert_fail@plt+0x4e1c>
   160bc:	ldrb	r2, [r4]
   160c0:	movw	r4, #45544	; 0xb1e8
   160c4:	movt	r4, #1
   160c8:	movw	r3, #45540	; 0xb1e4
   160cc:	movt	r3, #1
   160d0:	cmp	r2, #96	; 0x60
   160d4:	movne	r4, r3
   160d8:	b	15fb4 <__assert_fail@plt+0x4db0>
   160dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160e0:	strd	r6, [sp, #8]
   160e4:	strd	r8, [sp, #16]
   160e8:	strd	sl, [sp, #24]
   160ec:	str	lr, [sp, #32]
   160f0:	sub	sp, sp, #116	; 0x74
   160f4:	str	r0, [sp, #64]	; 0x40
   160f8:	mov	r8, r1
   160fc:	str	r2, [sp, #48]	; 0x30
   16100:	str	r3, [sp, #24]
   16104:	ldr	r7, [sp, #152]	; 0x98
   16108:	bl	11018 <__ctype_get_mb_cur_max@plt>
   1610c:	str	r0, [sp, #76]	; 0x4c
   16110:	ldr	r3, [sp, #156]	; 0x9c
   16114:	ubfx	r3, r3, #1, #1
   16118:	str	r3, [sp, #32]
   1611c:	mov	r3, #1
   16120:	str	r3, [sp, #40]	; 0x28
   16124:	mov	r3, #0
   16128:	str	r3, [sp, #68]	; 0x44
   1612c:	str	r3, [sp, #36]	; 0x24
   16130:	str	r3, [sp, #28]
   16134:	str	r3, [sp, #52]	; 0x34
   16138:	str	r3, [sp, #60]	; 0x3c
   1613c:	str	r3, [sp, #72]	; 0x48
   16140:	movw	r3, #45556	; 0xb1f4
   16144:	movt	r3, #1
   16148:	str	r3, [sp, #80]	; 0x50
   1614c:	mov	r9, r8
   16150:	mov	sl, r7
   16154:	cmp	sl, #10
   16158:	ldrls	pc, [pc, sl, lsl #2]
   1615c:	b	16320 <__assert_fail@plt+0x511c>
   16160:	andeq	r6, r1, r0, asr #3
   16164:	muleq	r1, r4, r1
   16168:	strdeq	r6, [r1], -r8
   1616c:	andeq	r6, r1, ip, lsl #3
   16170:	andeq	r6, r1, ip, lsr #5
   16174:	ldrdeq	r6, [r1], -r0
   16178:	muleq	r1, ip, r5
   1617c:	andeq	r6, r1, r4, lsr #6
   16180:	andeq	r6, r1, ip, lsl #4
   16184:	andeq	r6, r1, ip, lsl #4
   16188:	andeq	r6, r1, ip, lsl #4
   1618c:	mov	r3, #1
   16190:	str	r3, [sp, #28]
   16194:	mov	r3, #1
   16198:	str	r3, [sp, #32]
   1619c:	str	r3, [sp, #52]	; 0x34
   161a0:	movw	r3, #45552	; 0xb1f0
   161a4:	movt	r3, #1
   161a8:	str	r3, [sp, #60]	; 0x3c
   161ac:	mov	fp, #0
   161b0:	mov	sl, #2
   161b4:	mov	r6, #0
   161b8:	ldr	r8, [sp, #64]	; 0x40
   161bc:	b	16a34 <__assert_fail@plt+0x5830>
   161c0:	mov	fp, sl
   161c4:	mov	r3, #0
   161c8:	str	r3, [sp, #32]
   161cc:	b	161b4 <__assert_fail@plt+0x4fb0>
   161d0:	ldr	r3, [sp, #32]
   161d4:	cmp	r3, #0
   161d8:	bne	16338 <__assert_fail@plt+0x5134>
   161dc:	cmp	r9, #0
   161e0:	beq	1635c <__assert_fail@plt+0x5158>
   161e4:	mov	r3, #34	; 0x22
   161e8:	ldr	r2, [sp, #64]	; 0x40
   161ec:	strb	r3, [r2]
   161f0:	mov	fp, #1
   161f4:	str	fp, [sp, #28]
   161f8:	str	fp, [sp, #52]	; 0x34
   161fc:	movw	r3, #45532	; 0xb1dc
   16200:	movt	r3, #1
   16204:	str	r3, [sp, #60]	; 0x3c
   16208:	b	161b4 <__assert_fail@plt+0x4fb0>
   1620c:	cmp	sl, #10
   16210:	bne	16244 <__assert_fail@plt+0x5040>
   16214:	ldr	r3, [sp, #32]
   16218:	cmp	r3, #0
   1621c:	movne	fp, #0
   16220:	beq	1626c <__assert_fail@plt+0x5068>
   16224:	ldr	r0, [sp, #168]	; 0xa8
   16228:	bl	110c0 <strlen@plt>
   1622c:	str	r0, [sp, #52]	; 0x34
   16230:	ldr	r3, [sp, #168]	; 0xa8
   16234:	str	r3, [sp, #60]	; 0x3c
   16238:	mov	r3, #1
   1623c:	str	r3, [sp, #28]
   16240:	b	161b4 <__assert_fail@plt+0x4fb0>
   16244:	mov	r1, sl
   16248:	ldr	r0, [sp, #80]	; 0x50
   1624c:	bl	15f84 <__assert_fail@plt+0x4d80>
   16250:	str	r0, [sp, #164]	; 0xa4
   16254:	mov	r1, sl
   16258:	movw	r0, #45552	; 0xb1f0
   1625c:	movt	r0, #1
   16260:	bl	15f84 <__assert_fail@plt+0x4d80>
   16264:	str	r0, [sp, #168]	; 0xa8
   16268:	b	16214 <__assert_fail@plt+0x5010>
   1626c:	ldr	r3, [sp, #164]	; 0xa4
   16270:	ldrb	r3, [r3]
   16274:	cmp	r3, #0
   16278:	beq	162a4 <__assert_fail@plt+0x50a0>
   1627c:	ldr	r2, [sp, #164]	; 0xa4
   16280:	mov	fp, #0
   16284:	ldr	r1, [sp, #64]	; 0x40
   16288:	cmp	r9, fp
   1628c:	strbhi	r3, [r1, fp]
   16290:	add	fp, fp, #1
   16294:	ldrb	r3, [r2, #1]!
   16298:	cmp	r3, #0
   1629c:	bne	16288 <__assert_fail@plt+0x5084>
   162a0:	b	16224 <__assert_fail@plt+0x5020>
   162a4:	mov	fp, #0
   162a8:	b	16224 <__assert_fail@plt+0x5020>
   162ac:	ldr	r3, [sp, #32]
   162b0:	cmp	r3, #0
   162b4:	bne	16194 <__assert_fail@plt+0x4f90>
   162b8:	mov	r3, #1
   162bc:	str	r3, [sp, #28]
   162c0:	cmp	r9, #0
   162c4:	beq	16378 <__assert_fail@plt+0x5174>
   162c8:	mov	r3, #39	; 0x27
   162cc:	ldr	r2, [sp, #64]	; 0x40
   162d0:	strb	r3, [r2]
   162d4:	mov	r3, #0
   162d8:	str	r3, [sp, #32]
   162dc:	mov	fp, #1
   162e0:	str	fp, [sp, #52]	; 0x34
   162e4:	movw	r3, #45552	; 0xb1f0
   162e8:	movt	r3, #1
   162ec:	str	r3, [sp, #60]	; 0x3c
   162f0:	mov	sl, #2
   162f4:	b	161b4 <__assert_fail@plt+0x4fb0>
   162f8:	ldr	r3, [sp, #32]
   162fc:	cmp	r3, #0
   16300:	beq	162c0 <__assert_fail@plt+0x50bc>
   16304:	mov	r3, #1
   16308:	str	r3, [sp, #52]	; 0x34
   1630c:	movw	r3, #45552	; 0xb1f0
   16310:	movt	r3, #1
   16314:	str	r3, [sp, #60]	; 0x3c
   16318:	mov	fp, #0
   1631c:	b	161b4 <__assert_fail@plt+0x4fb0>
   16320:	bl	111ec <abort@plt>
   16324:	mov	fp, #0
   16328:	str	fp, [sp, #32]
   1632c:	mov	r3, #1
   16330:	str	r3, [sp, #28]
   16334:	b	161b4 <__assert_fail@plt+0x4fb0>
   16338:	ldr	r3, [sp, #32]
   1633c:	str	r3, [sp, #28]
   16340:	mov	r3, #1
   16344:	str	r3, [sp, #52]	; 0x34
   16348:	movw	r3, #45532	; 0xb1dc
   1634c:	movt	r3, #1
   16350:	str	r3, [sp, #60]	; 0x3c
   16354:	mov	fp, #0
   16358:	b	161b4 <__assert_fail@plt+0x4fb0>
   1635c:	mov	fp, #1
   16360:	str	fp, [sp, #28]
   16364:	str	fp, [sp, #52]	; 0x34
   16368:	movw	r3, #45532	; 0xb1dc
   1636c:	movt	r3, #1
   16370:	str	r3, [sp, #60]	; 0x3c
   16374:	b	161b4 <__assert_fail@plt+0x4fb0>
   16378:	mov	r3, #0
   1637c:	str	r3, [sp, #32]
   16380:	mov	fp, #1
   16384:	str	fp, [sp, #52]	; 0x34
   16388:	movw	r3, #45552	; 0xb1f0
   1638c:	movt	r3, #1
   16390:	str	r3, [sp, #60]	; 0x3c
   16394:	mov	sl, #2
   16398:	b	161b4 <__assert_fail@plt+0x4fb0>
   1639c:	mov	r3, r2
   163a0:	add	r4, r6, r2
   163a4:	ldr	r2, [sp, #24]
   163a8:	cmp	r3, #1
   163ac:	movls	r3, #0
   163b0:	movhi	r3, #1
   163b4:	cmn	r2, #1
   163b8:	movne	r3, #0
   163bc:	cmp	r3, #0
   163c0:	beq	163d0 <__assert_fail@plt+0x51cc>
   163c4:	ldr	r0, [sp, #48]	; 0x30
   163c8:	bl	110c0 <strlen@plt>
   163cc:	str	r0, [sp, #24]
   163d0:	ldr	r3, [sp, #24]
   163d4:	cmp	r4, r3
   163d8:	bhi	175c4 <__assert_fail@plt+0x63c0>
   163dc:	ldr	r3, [sp, #48]	; 0x30
   163e0:	add	r4, r3, r6
   163e4:	ldr	r2, [sp, #52]	; 0x34
   163e8:	ldr	r1, [sp, #60]	; 0x3c
   163ec:	mov	r0, r4
   163f0:	bl	10fac <memcmp@plt>
   163f4:	cmp	r0, #0
   163f8:	bne	175c4 <__assert_fail@plt+0x63c0>
   163fc:	ldr	r3, [sp, #32]
   16400:	cmp	r3, #0
   16404:	bne	16614 <__assert_fail@plt+0x5410>
   16408:	ldrb	r4, [r4]
   1640c:	cmp	r4, #126	; 0x7e
   16410:	ldrls	pc, [pc, r4, lsl #2]
   16414:	b	16ec8 <__assert_fail@plt+0x5cc4>
   16418:	andeq	r6, r1, r8, asr r6
   1641c:	andeq	r6, r1, r8, asr #29
   16420:	andeq	r6, r1, r8, asr #29
   16424:	andeq	r6, r1, r8, asr #29
   16428:	andeq	r6, r1, r8, asr #29
   1642c:	andeq	r6, r1, r8, asr #29
   16430:	andeq	r6, r1, r8, asr #29
   16434:	andeq	r6, r1, r0, ror sp
   16438:	strdeq	r6, [r1], -r4
   1643c:	muleq	r1, r8, ip
   16440:	andeq	r6, r1, r4, asr #26
   16444:	andeq	r6, r1, ip, lsr #25
   16448:	andeq	r6, r1, r8, lsl #18
   1644c:	andeq	r6, r1, ip, lsl r9
   16450:	andeq	r6, r1, r8, asr #29
   16454:	andeq	r6, r1, r8, asr #29
   16458:	andeq	r6, r1, r8, asr #29
   1645c:	andeq	r6, r1, r8, asr #29
   16460:	andeq	r6, r1, r8, asr #29
   16464:	andeq	r6, r1, r8, asr #29
   16468:	andeq	r6, r1, r8, asr #29
   1646c:	andeq	r6, r1, r8, asr #29
   16470:	andeq	r6, r1, r8, asr #29
   16474:	andeq	r6, r1, r8, asr #29
   16478:	andeq	r6, r1, r8, asr #29
   1647c:	andeq	r6, r1, r8, asr #29
   16480:	andeq	r6, r1, r8, asr #29
   16484:	andeq	r6, r1, r8, asr #29
   16488:	andeq	r6, r1, r8, asr #29
   1648c:	andeq	r6, r1, r8, asr #29
   16490:	andeq	r6, r1, r8, asr #29
   16494:	andeq	r6, r1, r8, asr #29
   16498:	andeq	r6, r1, r4, ror #27
   1649c:	andeq	r6, r1, r8, lsl #28
   164a0:	andeq	r6, r1, r8, lsl #28
   164a4:	andeq	r6, r1, r0, lsr #27
   164a8:	andeq	r6, r1, r8, lsl #28
   164ac:	andeq	r7, r1, r8, lsr #6
   164b0:	andeq	r6, r1, r8, lsl #28
   164b4:	andeq	r6, r1, r8, lsr #28
   164b8:	andeq	r6, r1, r8, lsl #28
   164bc:	andeq	r6, r1, r8, lsl #28
   164c0:	andeq	r6, r1, r8, lsl #28
   164c4:	andeq	r7, r1, r8, lsr #6
   164c8:	andeq	r7, r1, r8, lsr #6
   164cc:	andeq	r7, r1, r8, lsr #6
   164d0:	andeq	r7, r1, r8, lsr #6
   164d4:	andeq	r7, r1, r8, lsr #6
   164d8:	andeq	r7, r1, r8, lsr #6
   164dc:	andeq	r7, r1, r8, lsr #6
   164e0:	andeq	r7, r1, r8, lsr #6
   164e4:	andeq	r7, r1, r8, lsr #6
   164e8:	andeq	r7, r1, r8, lsr #6
   164ec:	andeq	r7, r1, r8, lsr #6
   164f0:	andeq	r7, r1, r8, lsr #6
   164f4:	andeq	r7, r1, r8, lsr #6
   164f8:	andeq	r7, r1, r8, lsr #6
   164fc:	andeq	r7, r1, r8, lsr #6
   16500:	andeq	r7, r1, r8, lsr #6
   16504:	andeq	r6, r1, r8, lsl #28
   16508:	andeq	r6, r1, r8, lsl #28
   1650c:	andeq	r6, r1, r8, lsl #28
   16510:	andeq	r6, r1, r8, lsl #28
   16514:	andeq	r6, r1, r8, lsl #15
   16518:	andeq	r6, r1, r8, asr #29
   1651c:	andeq	r7, r1, r8, lsr #6
   16520:	andeq	r7, r1, r8, lsr #6
   16524:	andeq	r7, r1, r8, lsr #6
   16528:	andeq	r7, r1, r8, lsr #6
   1652c:	andeq	r7, r1, r8, lsr #6
   16530:	andeq	r7, r1, r8, lsr #6
   16534:	andeq	r7, r1, r8, lsr #6
   16538:	andeq	r7, r1, r8, lsr #6
   1653c:	andeq	r7, r1, r8, lsr #6
   16540:	andeq	r7, r1, r8, lsr #6
   16544:	andeq	r7, r1, r8, lsr #6
   16548:	andeq	r7, r1, r8, lsr #6
   1654c:	andeq	r7, r1, r8, lsr #6
   16550:	andeq	r7, r1, r8, lsr #6
   16554:	andeq	r7, r1, r8, lsr #6
   16558:	andeq	r7, r1, r8, lsr #6
   1655c:	andeq	r7, r1, r8, lsr #6
   16560:	andeq	r7, r1, r8, lsr #6
   16564:	andeq	r7, r1, r8, lsr #6
   16568:	andeq	r7, r1, r8, lsr #6
   1656c:	andeq	r7, r1, r8, lsr #6
   16570:	andeq	r7, r1, r8, lsr #6
   16574:	andeq	r7, r1, r8, lsr #6
   16578:	andeq	r7, r1, r8, lsr #6
   1657c:	andeq	r7, r1, r8, lsr #6
   16580:	andeq	r7, r1, r8, lsr #6
   16584:	andeq	r6, r1, r8, lsl #28
   16588:	andeq	r6, r1, r0, asr #25
   1658c:	andeq	r7, r1, r8, lsr #6
   16590:	andeq	r6, r1, r8, lsl #28
   16594:	andeq	r7, r1, r8, lsr #6
   16598:	andeq	r6, r1, r8, lsl #28
   1659c:	andeq	r7, r1, r8, lsr #6
   165a0:	andeq	r7, r1, r8, lsr #6
   165a4:	andeq	r7, r1, r8, lsr #6
   165a8:	andeq	r7, r1, r8, lsr #6
   165ac:	andeq	r7, r1, r8, lsr #6
   165b0:	andeq	r7, r1, r8, lsr #6
   165b4:	andeq	r7, r1, r8, lsr #6
   165b8:	andeq	r7, r1, r8, lsr #6
   165bc:	andeq	r7, r1, r8, lsr #6
   165c0:	andeq	r7, r1, r8, lsr #6
   165c4:	andeq	r7, r1, r8, lsr #6
   165c8:	andeq	r7, r1, r8, lsr #6
   165cc:	andeq	r7, r1, r8, lsr #6
   165d0:	andeq	r7, r1, r8, lsr #6
   165d4:	andeq	r7, r1, r8, lsr #6
   165d8:	andeq	r7, r1, r8, lsr #6
   165dc:	andeq	r7, r1, r8, lsr #6
   165e0:	andeq	r7, r1, r8, lsr #6
   165e4:	andeq	r7, r1, r8, lsr #6
   165e8:	andeq	r7, r1, r8, lsr #6
   165ec:	andeq	r7, r1, r8, lsr #6
   165f0:	andeq	r7, r1, r8, lsr #6
   165f4:	andeq	r7, r1, r8, lsr #6
   165f8:	andeq	r7, r1, r8, lsr #6
   165fc:	andeq	r7, r1, r8, lsr #6
   16600:	andeq	r7, r1, r8, lsr #6
   16604:	andeq	r6, r1, r0, lsl #27
   16608:	andeq	r6, r1, r8, lsl #28
   1660c:	andeq	r6, r1, r0, lsl #27
   16610:	andeq	r6, r1, r0, lsr #27
   16614:	mov	r8, r9
   16618:	mov	r7, sl
   1661c:	b	1751c <__assert_fail@plt+0x6318>
   16620:	ldr	r3, [sp, #28]
   16624:	cmp	r3, #0
   16628:	bne	16648 <__assert_fail@plt+0x5444>
   1662c:	ldr	r3, [sp, #156]	; 0x9c
   16630:	tst	r3, #1
   16634:	bne	16a30 <__assert_fail@plt+0x582c>
   16638:	ldr	r3, [sp, #28]
   1663c:	str	r3, [sp, #44]	; 0x2c
   16640:	mov	r5, r3
   16644:	b	16950 <__assert_fail@plt+0x574c>
   16648:	ldr	r3, [sp, #32]
   1664c:	cmp	r3, #0
   16650:	bne	174cc <__assert_fail@plt+0x62c8>
   16654:	str	r3, [sp, #44]	; 0x2c
   16658:	ldr	r3, [sp, #36]	; 0x24
   1665c:	eor	r3, r3, #1
   16660:	cmp	sl, #2
   16664:	movne	r3, #0
   16668:	andeq	r3, r3, #1
   1666c:	cmp	r3, #0
   16670:	beq	166c8 <__assert_fail@plt+0x54c4>
   16674:	cmp	r9, fp
   16678:	movhi	r2, #39	; 0x27
   1667c:	strbhi	r2, [r8, fp]
   16680:	add	r2, fp, #1
   16684:	cmp	r9, r2
   16688:	movhi	r1, #36	; 0x24
   1668c:	strbhi	r1, [r8, r2]
   16690:	add	r2, fp, #2
   16694:	cmp	r9, r2
   16698:	movhi	r1, #39	; 0x27
   1669c:	strbhi	r1, [r8, r2]
   166a0:	add	r2, fp, #3
   166a4:	cmp	r9, r2
   166a8:	bls	17588 <__assert_fail@plt+0x6384>
   166ac:	mov	r1, #92	; 0x5c
   166b0:	strb	r1, [r8, r2]
   166b4:	add	fp, fp, #4
   166b8:	str	r3, [sp, #36]	; 0x24
   166bc:	mov	r5, #0
   166c0:	mov	r4, #48	; 0x30
   166c4:	b	1699c <__assert_fail@plt+0x5798>
   166c8:	cmp	r9, fp
   166cc:	bhi	166f4 <__assert_fail@plt+0x54f0>
   166d0:	add	r1, fp, #1
   166d4:	ldr	r2, [sp, #56]	; 0x38
   166d8:	cmp	r2, #0
   166dc:	bne	1671c <__assert_fail@plt+0x5518>
   166e0:	mov	r3, r5
   166e4:	ldr	r5, [sp, #56]	; 0x38
   166e8:	mov	fp, r1
   166ec:	mov	r4, #48	; 0x30
   166f0:	b	16950 <__assert_fail@plt+0x574c>
   166f4:	mov	r2, #92	; 0x5c
   166f8:	strb	r2, [r8, fp]
   166fc:	add	r1, fp, #1
   16700:	ldr	r2, [sp, #56]	; 0x38
   16704:	cmp	r2, #0
   16708:	moveq	r3, r5
   1670c:	moveq	r5, r2
   16710:	moveq	fp, r1
   16714:	moveq	r4, #48	; 0x30
   16718:	beq	1699c <__assert_fail@plt+0x5798>
   1671c:	add	r2, r6, #1
   16720:	ldr	r0, [sp, #24]
   16724:	cmp	r2, r0
   16728:	bcs	16744 <__assert_fail@plt+0x5540>
   1672c:	ldr	r0, [sp, #48]	; 0x30
   16730:	ldrb	r2, [r0, r2]
   16734:	sub	r2, r2, #48	; 0x30
   16738:	uxtb	r2, r2
   1673c:	cmp	r2, #9
   16740:	bls	1675c <__assert_fail@plt+0x5558>
   16744:	mov	r2, r3
   16748:	mov	r3, r5
   1674c:	mov	r5, r2
   16750:	mov	fp, r1
   16754:	mov	r4, #48	; 0x30
   16758:	b	16974 <__assert_fail@plt+0x5770>
   1675c:	cmp	r9, r1
   16760:	movhi	r2, #48	; 0x30
   16764:	strbhi	r2, [r8, r1]
   16768:	add	r2, fp, #2
   1676c:	cmp	r9, r2
   16770:	movhi	r1, #48	; 0x30
   16774:	strbhi	r1, [r8, r2]
   16778:	add	r1, fp, #3
   1677c:	b	16744 <__assert_fail@plt+0x5540>
   16780:	mov	r3, #0
   16784:	str	r3, [sp, #44]	; 0x2c
   16788:	cmp	sl, #2
   1678c:	beq	167a8 <__assert_fail@plt+0x55a4>
   16790:	cmp	sl, #5
   16794:	beq	167c0 <__assert_fail@plt+0x55bc>
   16798:	mov	r5, #0
   1679c:	mov	r3, r5
   167a0:	mov	r4, #63	; 0x3f
   167a4:	b	16950 <__assert_fail@plt+0x574c>
   167a8:	ldr	r3, [sp, #32]
   167ac:	cmp	r3, #0
   167b0:	bne	174d8 <__assert_fail@plt+0x62d4>
   167b4:	mov	r5, r3
   167b8:	mov	r4, #63	; 0x3f
   167bc:	b	16eb8 <__assert_fail@plt+0x5cb4>
   167c0:	ldr	r3, [sp, #156]	; 0x9c
   167c4:	tst	r3, #4
   167c8:	beq	172f0 <__assert_fail@plt+0x60ec>
   167cc:	add	r2, r6, #2
   167d0:	ldr	r3, [sp, #24]
   167d4:	cmp	r2, r3
   167d8:	bcs	17300 <__assert_fail@plt+0x60fc>
   167dc:	ldr	r3, [sp, #48]	; 0x30
   167e0:	add	r3, r3, r6
   167e4:	ldrb	r4, [r3, #1]
   167e8:	cmp	r4, #63	; 0x3f
   167ec:	movne	r5, #0
   167f0:	movne	r3, r5
   167f4:	movne	r4, #63	; 0x3f
   167f8:	bne	16950 <__assert_fail@plt+0x574c>
   167fc:	ldr	r3, [sp, #48]	; 0x30
   16800:	ldrb	r1, [r3, r2]
   16804:	sub	r3, r1, #33	; 0x21
   16808:	cmp	r3, #29
   1680c:	ldrls	pc, [pc, r3, lsl #2]
   16810:	b	17310 <__assert_fail@plt+0x610c>
   16814:	andeq	r6, r1, ip, lsl #17
   16818:	andeq	r7, r1, r0, lsl r3
   1681c:	andeq	r7, r1, r0, lsl r3
   16820:	andeq	r7, r1, r0, lsl r3
   16824:	andeq	r7, r1, r0, lsl r3
   16828:	andeq	r7, r1, r0, lsl r3
   1682c:	andeq	r6, r1, ip, lsl #17
   16830:	andeq	r6, r1, ip, lsl #17
   16834:	andeq	r6, r1, ip, lsl #17
   16838:	andeq	r7, r1, r0, lsl r3
   1683c:	andeq	r7, r1, r0, lsl r3
   16840:	andeq	r7, r1, r0, lsl r3
   16844:	andeq	r6, r1, ip, lsl #17
   16848:	andeq	r7, r1, r0, lsl r3
   1684c:	andeq	r6, r1, ip, lsl #17
   16850:	andeq	r7, r1, r0, lsl r3
   16854:	andeq	r7, r1, r0, lsl r3
   16858:	andeq	r7, r1, r0, lsl r3
   1685c:	andeq	r7, r1, r0, lsl r3
   16860:	andeq	r7, r1, r0, lsl r3
   16864:	andeq	r7, r1, r0, lsl r3
   16868:	andeq	r7, r1, r0, lsl r3
   1686c:	andeq	r7, r1, r0, lsl r3
   16870:	andeq	r7, r1, r0, lsl r3
   16874:	andeq	r7, r1, r0, lsl r3
   16878:	andeq	r7, r1, r0, lsl r3
   1687c:	andeq	r7, r1, r0, lsl r3
   16880:	andeq	r6, r1, ip, lsl #17
   16884:	andeq	r6, r1, ip, lsl #17
   16888:	andeq	r6, r1, ip, lsl #17
   1688c:	ldr	r3, [sp, #32]
   16890:	cmp	r3, #0
   16894:	bne	1757c <__assert_fail@plt+0x6378>
   16898:	cmp	r9, fp
   1689c:	movhi	r3, #63	; 0x3f
   168a0:	strbhi	r3, [r8, fp]
   168a4:	add	r3, fp, #1
   168a8:	cmp	r9, r3
   168ac:	movhi	r0, #34	; 0x22
   168b0:	strbhi	r0, [r8, r3]
   168b4:	add	r3, fp, #2
   168b8:	cmp	r9, r3
   168bc:	movhi	r0, #34	; 0x22
   168c0:	strbhi	r0, [r8, r3]
   168c4:	add	r3, fp, #3
   168c8:	cmp	r9, r3
   168cc:	movhi	r0, #63	; 0x3f
   168d0:	strbhi	r0, [r8, r3]
   168d4:	add	fp, fp, #4
   168d8:	ldr	r3, [sp, #32]
   168dc:	mov	r5, r3
   168e0:	mov	r4, r1
   168e4:	mov	r6, r2
   168e8:	b	16950 <__assert_fail@plt+0x574c>
   168ec:	mov	r3, #0
   168f0:	str	r3, [sp, #44]	; 0x2c
   168f4:	mov	r4, #8
   168f8:	mov	r3, #98	; 0x62
   168fc:	b	1693c <__assert_fail@plt+0x5738>
   16900:	mov	r3, #0
   16904:	str	r3, [sp, #44]	; 0x2c
   16908:	mov	r4, #12
   1690c:	mov	r3, #102	; 0x66
   16910:	b	1693c <__assert_fail@plt+0x5738>
   16914:	mov	r3, #0
   16918:	str	r3, [sp, #44]	; 0x2c
   1691c:	mov	r4, #13
   16920:	mov	r3, #114	; 0x72
   16924:	ldr	r2, [sp, #32]
   16928:	cmp	sl, #2
   1692c:	movne	r2, #0
   16930:	andeq	r2, r2, #1
   16934:	cmp	r2, #0
   16938:	bne	16d5c <__assert_fail@plt+0x5b58>
   1693c:	ldr	r2, [sp, #28]
   16940:	cmp	r2, #0
   16944:	bne	17344 <__assert_fail@plt+0x6140>
   16948:	mov	r5, r2
   1694c:	mov	r3, r2
   16950:	ldr	r2, [sp, #28]
   16954:	eor	r2, r2, #1
   16958:	cmp	sl, #2
   1695c:	orreq	r2, r2, #1
   16960:	eor	r2, r2, #1
   16964:	ldr	r1, [sp, #32]
   16968:	orr	r2, r1, r2
   1696c:	tst	r2, #255	; 0xff
   16970:	beq	1699c <__assert_fail@plt+0x5798>
   16974:	ldr	r2, [sp, #160]	; 0xa0
   16978:	cmp	r2, #0
   1697c:	beq	1699c <__assert_fail@plt+0x5798>
   16980:	ubfx	r1, r4, #5, #8
   16984:	and	r2, r4, #31
   16988:	ldr	r0, [sp, #160]	; 0xa0
   1698c:	ldr	r1, [r0, r1, lsl #2]
   16990:	lsr	r2, r1, r2
   16994:	tst	r2, #1
   16998:	bne	169a8 <__assert_fail@plt+0x57a4>
   1699c:	ldr	r2, [sp, #44]	; 0x2c
   169a0:	cmp	r2, #0
   169a4:	beq	16cfc <__assert_fail@plt+0x5af8>
   169a8:	ldr	r3, [sp, #32]
   169ac:	cmp	r3, #0
   169b0:	bne	174fc <__assert_fail@plt+0x62f8>
   169b4:	ldr	r3, [sp, #36]	; 0x24
   169b8:	eor	r3, r3, #1
   169bc:	cmp	sl, #2
   169c0:	movne	r3, #0
   169c4:	andeq	r3, r3, #1
   169c8:	cmp	r3, #0
   169cc:	beq	16a04 <__assert_fail@plt+0x5800>
   169d0:	cmp	r9, fp
   169d4:	movhi	r2, #39	; 0x27
   169d8:	strbhi	r2, [r8, fp]
   169dc:	add	r2, fp, #1
   169e0:	cmp	r9, r2
   169e4:	movhi	r1, #36	; 0x24
   169e8:	strbhi	r1, [r8, r2]
   169ec:	add	r2, fp, #2
   169f0:	cmp	r9, r2
   169f4:	movhi	r1, #39	; 0x27
   169f8:	strbhi	r1, [r8, r2]
   169fc:	add	fp, fp, #3
   16a00:	str	r3, [sp, #36]	; 0x24
   16a04:	cmp	r9, fp
   16a08:	movhi	r3, #92	; 0x5c
   16a0c:	strbhi	r3, [r8, fp]
   16a10:	add	fp, fp, #1
   16a14:	cmp	fp, r9
   16a18:	strbcc	r4, [r8, fp]
   16a1c:	add	fp, fp, #1
   16a20:	cmp	r5, #0
   16a24:	ldr	r3, [sp, #40]	; 0x28
   16a28:	moveq	r3, r5
   16a2c:	str	r3, [sp, #40]	; 0x28
   16a30:	add	r6, r6, #1
   16a34:	ldr	r3, [sp, #24]
   16a38:	cmn	r3, #1
   16a3c:	beq	1736c <__assert_fail@plt+0x6168>
   16a40:	ldr	r3, [sp, #24]
   16a44:	subs	r5, r3, r6
   16a48:	movne	r5, #1
   16a4c:	cmp	r5, #0
   16a50:	beq	17380 <__assert_fail@plt+0x617c>
   16a54:	ldr	r3, [sp, #28]
   16a58:	cmp	sl, #2
   16a5c:	moveq	r3, #0
   16a60:	andne	r3, r3, #1
   16a64:	str	r3, [sp, #56]	; 0x38
   16a68:	ldr	r2, [sp, #52]	; 0x34
   16a6c:	adds	r7, r2, #0
   16a70:	movne	r7, #1
   16a74:	ands	r3, r3, r7
   16a78:	str	r3, [sp, #44]	; 0x2c
   16a7c:	bne	1639c <__assert_fail@plt+0x5198>
   16a80:	ldr	r3, [sp, #48]	; 0x30
   16a84:	ldrb	r4, [r3, r6]
   16a88:	cmp	r4, #126	; 0x7e
   16a8c:	ldrls	pc, [pc, r4, lsl #2]
   16a90:	b	16ec8 <__assert_fail@plt+0x5cc4>
   16a94:	andeq	r6, r1, r0, lsr #12
   16a98:	andeq	r6, r1, r8, asr #29
   16a9c:	andeq	r6, r1, r8, asr #29
   16aa0:	andeq	r6, r1, r8, asr #29
   16aa4:	andeq	r6, r1, r8, asr #29
   16aa8:	andeq	r6, r1, r8, asr #29
   16aac:	andeq	r6, r1, r8, asr #29
   16ab0:	andeq	r6, r1, r8, ror #26
   16ab4:	strdeq	r6, [r1], -r4
   16ab8:	muleq	r1, r8, ip
   16abc:	andeq	r6, r1, ip, lsr sp
   16ac0:	andeq	r6, r1, ip, lsr #25
   16ac4:	andeq	r6, r1, r8, lsl #18
   16ac8:	andeq	r6, r1, ip, lsl r9
   16acc:	andeq	r6, r1, r8, asr #29
   16ad0:	andeq	r6, r1, r8, asr #29
   16ad4:	andeq	r6, r1, r8, asr #29
   16ad8:	andeq	r6, r1, r8, asr #29
   16adc:	andeq	r6, r1, r8, asr #29
   16ae0:	andeq	r6, r1, r8, asr #29
   16ae4:	andeq	r6, r1, r8, asr #29
   16ae8:	andeq	r6, r1, r8, asr #29
   16aec:	andeq	r6, r1, r8, asr #29
   16af0:	andeq	r6, r1, r8, asr #29
   16af4:	andeq	r6, r1, r8, asr #29
   16af8:	andeq	r6, r1, r8, asr #29
   16afc:	andeq	r6, r1, r8, asr #29
   16b00:	andeq	r6, r1, r8, asr #29
   16b04:	andeq	r6, r1, r8, asr #29
   16b08:	andeq	r6, r1, r8, asr #29
   16b0c:	andeq	r6, r1, r8, asr #29
   16b10:	andeq	r6, r1, r8, asr #29
   16b14:	andeq	r6, r1, r4, ror #27
   16b18:	andeq	r6, r1, r0, ror #27
   16b1c:	andeq	r6, r1, r0, ror #27
   16b20:	andeq	r6, r1, r0, lsr #27
   16b24:	andeq	r6, r1, r0, ror #27
   16b28:	andeq	r7, r1, r8, ror #5
   16b2c:	andeq	r6, r1, r0, ror #27
   16b30:	andeq	r6, r1, r8, lsr #28
   16b34:	andeq	r6, r1, r0, ror #27
   16b38:	andeq	r6, r1, r0, ror #27
   16b3c:	andeq	r6, r1, r0, ror #27
   16b40:	andeq	r7, r1, r8, ror #5
   16b44:	andeq	r7, r1, r8, ror #5
   16b48:	andeq	r7, r1, r8, ror #5
   16b4c:	andeq	r7, r1, r8, ror #5
   16b50:	andeq	r7, r1, r8, ror #5
   16b54:	andeq	r7, r1, r8, ror #5
   16b58:	andeq	r7, r1, r8, ror #5
   16b5c:	andeq	r7, r1, r8, ror #5
   16b60:	andeq	r7, r1, r8, ror #5
   16b64:	andeq	r7, r1, r8, ror #5
   16b68:	andeq	r7, r1, r8, ror #5
   16b6c:	andeq	r7, r1, r8, ror #5
   16b70:	andeq	r7, r1, r8, ror #5
   16b74:	andeq	r7, r1, r8, ror #5
   16b78:	andeq	r7, r1, r8, ror #5
   16b7c:	andeq	r7, r1, r8, ror #5
   16b80:	andeq	r6, r1, r0, ror #27
   16b84:	andeq	r6, r1, r0, ror #27
   16b88:	andeq	r6, r1, r0, ror #27
   16b8c:	andeq	r6, r1, r0, ror #27
   16b90:	andeq	r6, r1, r8, lsl #15
   16b94:	andeq	r6, r1, r8, asr #29
   16b98:	andeq	r7, r1, r8, ror #5
   16b9c:	andeq	r7, r1, r8, ror #5
   16ba0:	andeq	r7, r1, r8, ror #5
   16ba4:	andeq	r7, r1, r8, ror #5
   16ba8:	andeq	r7, r1, r8, ror #5
   16bac:	andeq	r7, r1, r8, ror #5
   16bb0:	andeq	r7, r1, r8, ror #5
   16bb4:	andeq	r7, r1, r8, ror #5
   16bb8:	andeq	r7, r1, r8, ror #5
   16bbc:	andeq	r7, r1, r8, ror #5
   16bc0:	andeq	r7, r1, r8, ror #5
   16bc4:	andeq	r7, r1, r8, ror #5
   16bc8:	andeq	r7, r1, r8, ror #5
   16bcc:	andeq	r7, r1, r8, ror #5
   16bd0:	andeq	r7, r1, r8, ror #5
   16bd4:	andeq	r7, r1, r8, ror #5
   16bd8:	andeq	r7, r1, r8, ror #5
   16bdc:	andeq	r7, r1, r8, ror #5
   16be0:	andeq	r7, r1, r8, ror #5
   16be4:	andeq	r7, r1, r8, ror #5
   16be8:	andeq	r7, r1, r8, ror #5
   16bec:	andeq	r7, r1, r8, ror #5
   16bf0:	andeq	r7, r1, r8, ror #5
   16bf4:	andeq	r7, r1, r8, ror #5
   16bf8:	andeq	r7, r1, r8, ror #5
   16bfc:	andeq	r7, r1, r8, ror #5
   16c00:	andeq	r6, r1, r0, ror #27
   16c04:	andeq	r6, r1, r0, asr #25
   16c08:	andeq	r7, r1, r8, ror #5
   16c0c:	andeq	r6, r1, r0, ror #27
   16c10:	andeq	r7, r1, r8, ror #5
   16c14:	andeq	r6, r1, r0, ror #27
   16c18:	andeq	r7, r1, r8, ror #5
   16c1c:	andeq	r7, r1, r8, ror #5
   16c20:	andeq	r7, r1, r8, ror #5
   16c24:	andeq	r7, r1, r8, ror #5
   16c28:	andeq	r7, r1, r8, ror #5
   16c2c:	andeq	r7, r1, r8, ror #5
   16c30:	andeq	r7, r1, r8, ror #5
   16c34:	andeq	r7, r1, r8, ror #5
   16c38:	andeq	r7, r1, r8, ror #5
   16c3c:	andeq	r7, r1, r8, ror #5
   16c40:	andeq	r7, r1, r8, ror #5
   16c44:	andeq	r7, r1, r8, ror #5
   16c48:	andeq	r7, r1, r8, ror #5
   16c4c:	andeq	r7, r1, r8, ror #5
   16c50:	andeq	r7, r1, r8, ror #5
   16c54:	andeq	r7, r1, r8, ror #5
   16c58:	andeq	r7, r1, r8, ror #5
   16c5c:	andeq	r7, r1, r8, ror #5
   16c60:	andeq	r7, r1, r8, ror #5
   16c64:	andeq	r7, r1, r8, ror #5
   16c68:	andeq	r7, r1, r8, ror #5
   16c6c:	andeq	r7, r1, r8, ror #5
   16c70:	andeq	r7, r1, r8, ror #5
   16c74:	andeq	r7, r1, r8, ror #5
   16c78:	andeq	r7, r1, r8, ror #5
   16c7c:	andeq	r7, r1, r8, ror #5
   16c80:	andeq	r6, r1, r0, lsl #27
   16c84:	andeq	r6, r1, r0, ror #27
   16c88:	andeq	r6, r1, r0, lsl #27
   16c8c:	andeq	r6, r1, r0, lsr #27
   16c90:	mov	r3, #0
   16c94:	str	r3, [sp, #44]	; 0x2c
   16c98:	mov	r4, #9
   16c9c:	mov	r3, #116	; 0x74
   16ca0:	b	16924 <__assert_fail@plt+0x5720>
   16ca4:	mov	r3, #0
   16ca8:	str	r3, [sp, #44]	; 0x2c
   16cac:	mov	r4, #11
   16cb0:	mov	r3, #118	; 0x76
   16cb4:	b	1693c <__assert_fail@plt+0x5738>
   16cb8:	mov	r3, #0
   16cbc:	str	r3, [sp, #44]	; 0x2c
   16cc0:	cmp	sl, #2
   16cc4:	beq	16ce8 <__assert_fail@plt+0x5ae4>
   16cc8:	ldr	r3, [sp, #28]
   16ccc:	ldr	r2, [sp, #32]
   16cd0:	and	r3, r3, r2
   16cd4:	tst	r7, r3
   16cd8:	bne	1735c <__assert_fail@plt+0x6158>
   16cdc:	mov	r4, #92	; 0x5c
   16ce0:	mov	r3, r4
   16ce4:	b	1693c <__assert_fail@plt+0x5738>
   16ce8:	ldr	r3, [sp, #32]
   16cec:	cmp	r3, #0
   16cf0:	bne	174e4 <__assert_fail@plt+0x62e0>
   16cf4:	mov	r5, r3
   16cf8:	mov	r4, #92	; 0x5c
   16cfc:	eor	r3, r3, #1
   16d00:	ldr	r2, [sp, #36]	; 0x24
   16d04:	and	r3, r3, r2
   16d08:	tst	r3, #255	; 0xff
   16d0c:	beq	16a14 <__assert_fail@plt+0x5810>
   16d10:	cmp	r9, fp
   16d14:	movhi	r3, #39	; 0x27
   16d18:	strbhi	r3, [r8, fp]
   16d1c:	add	r3, fp, #1
   16d20:	cmp	r9, r3
   16d24:	movhi	r2, #39	; 0x27
   16d28:	strbhi	r2, [r8, r3]
   16d2c:	add	fp, fp, #2
   16d30:	mov	r3, #0
   16d34:	str	r3, [sp, #36]	; 0x24
   16d38:	b	16a14 <__assert_fail@plt+0x5810>
   16d3c:	mov	r3, #110	; 0x6e
   16d40:	b	16924 <__assert_fail@plt+0x5720>
   16d44:	mov	r3, #110	; 0x6e
   16d48:	b	16924 <__assert_fail@plt+0x5720>
   16d4c:	mov	r3, #0
   16d50:	str	r3, [sp, #44]	; 0x2c
   16d54:	mov	r3, #110	; 0x6e
   16d58:	b	16924 <__assert_fail@plt+0x5720>
   16d5c:	mov	r8, r9
   16d60:	mov	r7, #2
   16d64:	b	17504 <__assert_fail@plt+0x6300>
   16d68:	mov	r3, #97	; 0x61
   16d6c:	b	1693c <__assert_fail@plt+0x5738>
   16d70:	mov	r3, #97	; 0x61
   16d74:	b	1693c <__assert_fail@plt+0x5738>
   16d78:	mov	r3, #0
   16d7c:	str	r3, [sp, #44]	; 0x2c
   16d80:	ldr	r3, [sp, #24]
   16d84:	cmn	r3, #1
   16d88:	beq	16db4 <__assert_fail@plt+0x5bb0>
   16d8c:	ldr	r3, [sp, #24]
   16d90:	subs	r3, r3, #1
   16d94:	movne	r3, #1
   16d98:	cmp	r3, #0
   16d9c:	bne	1731c <__assert_fail@plt+0x6118>
   16da0:	cmp	r6, #0
   16da4:	beq	16de4 <__assert_fail@plt+0x5be0>
   16da8:	mov	r5, #0
   16dac:	mov	r3, r5
   16db0:	b	16950 <__assert_fail@plt+0x574c>
   16db4:	ldr	r3, [sp, #48]	; 0x30
   16db8:	ldrb	r3, [r3, #1]
   16dbc:	adds	r3, r3, #0
   16dc0:	movne	r3, #1
   16dc4:	b	16d98 <__assert_fail@plt+0x5b94>
   16dc8:	mov	r3, #0
   16dcc:	str	r3, [sp, #44]	; 0x2c
   16dd0:	b	16da0 <__assert_fail@plt+0x5b9c>
   16dd4:	mov	r3, #0
   16dd8:	str	r3, [sp, #44]	; 0x2c
   16ddc:	b	16de4 <__assert_fail@plt+0x5be0>
   16de0:	ldr	r5, [sp, #44]	; 0x2c
   16de4:	ldr	r3, [sp, #32]
   16de8:	cmp	sl, #2
   16dec:	movne	r3, #0
   16df0:	andeq	r3, r3, #1
   16df4:	cmp	r3, #0
   16df8:	beq	16950 <__assert_fail@plt+0x574c>
   16dfc:	mov	r8, r9
   16e00:	mov	r7, #2
   16e04:	b	17504 <__assert_fail@plt+0x6300>
   16e08:	ldr	r5, [sp, #32]
   16e0c:	b	16de4 <__assert_fail@plt+0x5be0>
   16e10:	mov	r3, #0
   16e14:	str	r3, [sp, #44]	; 0x2c
   16e18:	mov	r5, r3
   16e1c:	b	16de4 <__assert_fail@plt+0x5be0>
   16e20:	mov	r3, #0
   16e24:	str	r3, [sp, #44]	; 0x2c
   16e28:	cmp	sl, #2
   16e2c:	strne	r5, [sp, #68]	; 0x44
   16e30:	movne	r3, #0
   16e34:	movne	r4, #39	; 0x27
   16e38:	bne	16950 <__assert_fail@plt+0x574c>
   16e3c:	ldr	r3, [sp, #32]
   16e40:	cmp	r3, #0
   16e44:	bne	174f0 <__assert_fail@plt+0x62ec>
   16e48:	ldr	r3, [sp, #72]	; 0x48
   16e4c:	clz	r3, r3
   16e50:	lsr	r3, r3, #5
   16e54:	cmp	r9, #0
   16e58:	moveq	r3, #0
   16e5c:	cmp	r3, #0
   16e60:	movne	r3, #0
   16e64:	bne	16e8c <__assert_fail@plt+0x5c88>
   16e68:	cmp	r9, fp
   16e6c:	movhi	r3, #39	; 0x27
   16e70:	strbhi	r3, [r8, fp]
   16e74:	add	r3, fp, #1
   16e78:	cmp	r9, r3
   16e7c:	movhi	r2, #92	; 0x5c
   16e80:	strbhi	r2, [r8, r3]
   16e84:	mov	r3, r9
   16e88:	ldr	r9, [sp, #72]	; 0x48
   16e8c:	add	r2, fp, #2
   16e90:	cmp	r2, r3
   16e94:	movcc	r1, #39	; 0x27
   16e98:	strbcc	r1, [r8, r2]
   16e9c:	add	fp, fp, #3
   16ea0:	str	r5, [sp, #68]	; 0x44
   16ea4:	ldr	r2, [sp, #32]
   16ea8:	str	r2, [sp, #36]	; 0x24
   16eac:	str	r9, [sp, #72]	; 0x48
   16eb0:	mov	r9, r3
   16eb4:	mov	r4, #39	; 0x27
   16eb8:	mov	r3, #0
   16ebc:	b	1699c <__assert_fail@plt+0x5798>
   16ec0:	mov	r3, #0
   16ec4:	str	r3, [sp, #44]	; 0x2c
   16ec8:	ldr	r7, [sp, #76]	; 0x4c
   16ecc:	cmp	r7, #1
   16ed0:	bne	16f08 <__assert_fail@plt+0x5d04>
   16ed4:	bl	110a8 <__ctype_b_loc@plt>
   16ed8:	ldr	r2, [r0]
   16edc:	lsl	r3, r4, #1
   16ee0:	ldrh	r5, [r2, r3]
   16ee4:	ubfx	r5, r5, #14, #1
   16ee8:	mov	ip, r7
   16eec:	eor	r3, r5, #1
   16ef0:	ldr	r2, [sp, #28]
   16ef4:	and	r3, r3, r2
   16ef8:	ands	r3, r3, #255	; 0xff
   16efc:	beq	16950 <__assert_fail@plt+0x574c>
   16f00:	mov	r5, #0
   16f04:	b	17164 <__assert_fail@plt+0x5f60>
   16f08:	mov	r2, #0
   16f0c:	mov	r3, #0
   16f10:	strd	r2, [sp, #104]	; 0x68
   16f14:	ldr	r3, [sp, #24]
   16f18:	cmn	r3, #1
   16f1c:	beq	16f40 <__assert_fail@plt+0x5d3c>
   16f20:	mov	r3, #0
   16f24:	str	r4, [sp, #88]	; 0x58
   16f28:	str	fp, [sp, #92]	; 0x5c
   16f2c:	str	r8, [sp, #56]	; 0x38
   16f30:	mov	r8, r3
   16f34:	str	r9, [sp, #84]	; 0x54
   16f38:	ldr	r9, [sp, #48]	; 0x30
   16f3c:	b	1708c <__assert_fail@plt+0x5e88>
   16f40:	ldr	r0, [sp, #48]	; 0x30
   16f44:	bl	110c0 <strlen@plt>
   16f48:	str	r0, [sp, #24]
   16f4c:	b	16f20 <__assert_fail@plt+0x5d1c>
   16f50:	mov	r1, fp
   16f54:	ldr	r4, [sp, #88]	; 0x58
   16f58:	mov	r2, r8
   16f5c:	mov	ip, r8
   16f60:	ldr	fp, [sp, #92]	; 0x5c
   16f64:	ldr	r8, [sp, #56]	; 0x38
   16f68:	ldr	r9, [sp, #84]	; 0x54
   16f6c:	ldr	r0, [sp, #24]
   16f70:	cmp	r7, r0
   16f74:	bcs	1712c <__assert_fail@plt+0x5f28>
   16f78:	ldrb	r3, [r1]
   16f7c:	cmp	r3, #0
   16f80:	beq	17134 <__assert_fail@plt+0x5f30>
   16f84:	mov	r3, r1
   16f88:	add	r2, r2, #1
   16f8c:	add	r1, r6, r2
   16f90:	cmp	r0, r1
   16f94:	bls	1713c <__assert_fail@plt+0x5f38>
   16f98:	ldrb	r1, [r3, #1]!
   16f9c:	cmp	r1, #0
   16fa0:	bne	16f88 <__assert_fail@plt+0x5d84>
   16fa4:	mov	ip, r2
   16fa8:	mov	r5, #0
   16fac:	b	1715c <__assert_fail@plt+0x5f58>
   16fb0:	ldr	r3, [sp, #56]	; 0x38
   16fb4:	str	r3, [sp, #64]	; 0x40
   16fb8:	ldr	r8, [sp, #84]	; 0x54
   16fbc:	mov	r7, #2
   16fc0:	b	17504 <__assert_fail@plt+0x6300>
   16fc4:	cmp	r2, r7
   16fc8:	beq	17068 <__assert_fail@plt+0x5e64>
   16fcc:	ldrb	r3, [r2], #1
   16fd0:	sub	r3, r3, #91	; 0x5b
   16fd4:	cmp	r3, #33	; 0x21
   16fd8:	ldrls	pc, [pc, r3, lsl #2]
   16fdc:	b	16fc4 <__assert_fail@plt+0x5dc0>
   16fe0:			; <UNDEFINED> instruction: 0x00016fb0
   16fe4:			; <UNDEFINED> instruction: 0x00016fb0
   16fe8:	andeq	r6, r1, r4, asr #31
   16fec:			; <UNDEFINED> instruction: 0x00016fb0
   16ff0:	andeq	r6, r1, r4, asr #31
   16ff4:			; <UNDEFINED> instruction: 0x00016fb0
   16ff8:	andeq	r6, r1, r4, asr #31
   16ffc:	andeq	r6, r1, r4, asr #31
   17000:	andeq	r6, r1, r4, asr #31
   17004:	andeq	r6, r1, r4, asr #31
   17008:	andeq	r6, r1, r4, asr #31
   1700c:	andeq	r6, r1, r4, asr #31
   17010:	andeq	r6, r1, r4, asr #31
   17014:	andeq	r6, r1, r4, asr #31
   17018:	andeq	r6, r1, r4, asr #31
   1701c:	andeq	r6, r1, r4, asr #31
   17020:	andeq	r6, r1, r4, asr #31
   17024:	andeq	r6, r1, r4, asr #31
   17028:	andeq	r6, r1, r4, asr #31
   1702c:	andeq	r6, r1, r4, asr #31
   17030:	andeq	r6, r1, r4, asr #31
   17034:	andeq	r6, r1, r4, asr #31
   17038:	andeq	r6, r1, r4, asr #31
   1703c:	andeq	r6, r1, r4, asr #31
   17040:	andeq	r6, r1, r4, asr #31
   17044:	andeq	r6, r1, r4, asr #31
   17048:	andeq	r6, r1, r4, asr #31
   1704c:	andeq	r6, r1, r4, asr #31
   17050:	andeq	r6, r1, r4, asr #31
   17054:	andeq	r6, r1, r4, asr #31
   17058:	andeq	r6, r1, r4, asr #31
   1705c:	andeq	r6, r1, r4, asr #31
   17060:	andeq	r6, r1, r4, asr #31
   17064:			; <UNDEFINED> instruction: 0x00016fb0
   17068:	ldr	r0, [sp, #100]	; 0x64
   1706c:	bl	10fe8 <iswprint@plt>
   17070:	cmp	r0, #0
   17074:	moveq	r5, #0
   17078:	add	r8, r8, r4
   1707c:	add	r0, sp, #104	; 0x68
   17080:	bl	10f88 <mbsinit@plt>
   17084:	cmp	r0, #0
   17088:	bne	170f8 <__assert_fail@plt+0x5ef4>
   1708c:	add	r7, r6, r8
   17090:	add	fp, r9, r7
   17094:	add	r3, sp, #104	; 0x68
   17098:	ldr	r2, [sp, #24]
   1709c:	sub	r2, r2, r7
   170a0:	mov	r1, fp
   170a4:	add	r0, sp, #100	; 0x64
   170a8:	bl	196a8 <__assert_fail@plt+0x84a4>
   170ac:	subs	r4, r0, #0
   170b0:	beq	17148 <__assert_fail@plt+0x5f44>
   170b4:	cmn	r4, #1
   170b8:	beq	17110 <__assert_fail@plt+0x5f0c>
   170bc:	cmn	r4, #2
   170c0:	beq	16f50 <__assert_fail@plt+0x5d4c>
   170c4:	ldr	r3, [sp, #32]
   170c8:	cmp	sl, #2
   170cc:	movne	r3, #0
   170d0:	andeq	r3, r3, #1
   170d4:	cmp	r3, #0
   170d8:	beq	17068 <__assert_fail@plt+0x5e64>
   170dc:	cmp	r4, #1
   170e0:	bls	17068 <__assert_fail@plt+0x5e64>
   170e4:	add	r2, r7, #1
   170e8:	add	r2, r9, r2
   170ec:	add	r3, r9, r4
   170f0:	add	r7, r3, r7
   170f4:	b	16fcc <__assert_fail@plt+0x5dc8>
   170f8:	ldr	r4, [sp, #88]	; 0x58
   170fc:	mov	ip, r8
   17100:	ldr	fp, [sp, #92]	; 0x5c
   17104:	ldr	r8, [sp, #56]	; 0x38
   17108:	ldr	r9, [sp, #84]	; 0x54
   1710c:	b	1715c <__assert_fail@plt+0x5f58>
   17110:	ldr	r4, [sp, #88]	; 0x58
   17114:	mov	ip, r8
   17118:	ldr	fp, [sp, #92]	; 0x5c
   1711c:	ldr	r8, [sp, #56]	; 0x38
   17120:	ldr	r9, [sp, #84]	; 0x54
   17124:	mov	r5, #0
   17128:	b	1715c <__assert_fail@plt+0x5f58>
   1712c:	mov	r5, #0
   17130:	b	1715c <__assert_fail@plt+0x5f58>
   17134:	mov	r5, #0
   17138:	b	1715c <__assert_fail@plt+0x5f58>
   1713c:	mov	ip, r2
   17140:	mov	r5, #0
   17144:	b	1715c <__assert_fail@plt+0x5f58>
   17148:	ldr	r4, [sp, #88]	; 0x58
   1714c:	mov	ip, r8
   17150:	ldr	fp, [sp, #92]	; 0x5c
   17154:	ldr	r8, [sp, #56]	; 0x38
   17158:	ldr	r9, [sp, #84]	; 0x54
   1715c:	cmp	ip, #1
   17160:	bls	16eec <__assert_fail@plt+0x5ce8>
   17164:	add	lr, r6, ip
   17168:	ldr	r3, [sp, #48]	; 0x30
   1716c:	add	r1, r3, r6
   17170:	mov	r3, #0
   17174:	eor	r0, r5, #1
   17178:	ldr	r2, [sp, #28]
   1717c:	and	r0, r0, r2
   17180:	uxtb	r0, r0
   17184:	str	r0, [sp, #56]	; 0x38
   17188:	mov	r7, #92	; 0x5c
   1718c:	ldr	ip, [sp, #36]	; 0x24
   17190:	str	r5, [sp, #84]	; 0x54
   17194:	ldr	r2, [sp, #44]	; 0x2c
   17198:	b	17208 <__assert_fail@plt+0x6004>
   1719c:	cmp	r2, #0
   171a0:	beq	171b0 <__assert_fail@plt+0x5fac>
   171a4:	cmp	r9, fp
   171a8:	strbhi	r7, [r8, fp]
   171ac:	add	fp, fp, #1
   171b0:	add	r5, r6, #1
   171b4:	cmp	r5, lr
   171b8:	bcs	172c4 <__assert_fail@plt+0x60c0>
   171bc:	eor	r2, r3, #1
   171c0:	and	r2, r2, ip
   171c4:	ands	r2, r2, #255	; 0xff
   171c8:	beq	172e0 <__assert_fail@plt+0x60dc>
   171cc:	cmp	r9, fp
   171d0:	movhi	r2, #39	; 0x27
   171d4:	strbhi	r2, [r8, fp]
   171d8:	add	r2, fp, #1
   171dc:	cmp	r9, r2
   171e0:	movhi	ip, #39	; 0x27
   171e4:	strbhi	ip, [r8, r2]
   171e8:	add	fp, fp, #2
   171ec:	ldr	ip, [sp, #56]	; 0x38
   171f0:	mov	r2, ip
   171f4:	mov	r6, r5
   171f8:	cmp	r9, fp
   171fc:	strbhi	r4, [r8, fp]
   17200:	add	fp, fp, #1
   17204:	ldrb	r4, [r1, #1]!
   17208:	cmp	r0, #0
   1720c:	beq	1719c <__assert_fail@plt+0x5f98>
   17210:	ldr	r3, [sp, #32]
   17214:	cmp	r3, #0
   17218:	bne	174ac <__assert_fail@plt+0x62a8>
   1721c:	eor	r3, ip, #1
   17220:	cmp	sl, #2
   17224:	movne	r3, #0
   17228:	andeq	r3, r3, #1
   1722c:	cmp	r3, #0
   17230:	beq	17268 <__assert_fail@plt+0x6064>
   17234:	cmp	r9, fp
   17238:	movhi	ip, #39	; 0x27
   1723c:	strbhi	ip, [r8, fp]
   17240:	add	ip, fp, #1
   17244:	cmp	r9, ip
   17248:	movhi	r5, #36	; 0x24
   1724c:	strbhi	r5, [r8, ip]
   17250:	add	ip, fp, #2
   17254:	cmp	r9, ip
   17258:	movhi	r5, #39	; 0x27
   1725c:	strbhi	r5, [r8, ip]
   17260:	add	fp, fp, #3
   17264:	mov	ip, r3
   17268:	cmp	r9, fp
   1726c:	strbhi	r7, [r8, fp]
   17270:	add	r3, fp, #1
   17274:	cmp	r9, r3
   17278:	bls	17288 <__assert_fail@plt+0x6084>
   1727c:	lsr	r5, r4, #6
   17280:	add	r5, r5, #48	; 0x30
   17284:	strb	r5, [r8, r3]
   17288:	add	r3, fp, #2
   1728c:	cmp	r9, r3
   17290:	bls	172a0 <__assert_fail@plt+0x609c>
   17294:	ubfx	r5, r4, #3, #3
   17298:	add	r5, r5, #48	; 0x30
   1729c:	strb	r5, [r8, r3]
   172a0:	add	fp, fp, #3
   172a4:	and	r4, r4, #7
   172a8:	add	r4, r4, #48	; 0x30
   172ac:	add	r5, r6, #1
   172b0:	cmp	r5, lr
   172b4:	bcs	172d0 <__assert_fail@plt+0x60cc>
   172b8:	ldr	r3, [sp, #56]	; 0x38
   172bc:	mov	r6, r5
   172c0:	b	171f8 <__assert_fail@plt+0x5ff4>
   172c4:	str	ip, [sp, #36]	; 0x24
   172c8:	ldr	r5, [sp, #84]	; 0x54
   172cc:	b	16cfc <__assert_fail@plt+0x5af8>
   172d0:	str	ip, [sp, #36]	; 0x24
   172d4:	ldr	r5, [sp, #84]	; 0x54
   172d8:	mov	r3, r0
   172dc:	b	16cfc <__assert_fail@plt+0x5af8>
   172e0:	mov	r6, r5
   172e4:	b	171f8 <__assert_fail@plt+0x5ff4>
   172e8:	ldr	r3, [sp, #44]	; 0x2c
   172ec:	b	16950 <__assert_fail@plt+0x574c>
   172f0:	mov	r5, #0
   172f4:	mov	r3, r5
   172f8:	mov	r4, #63	; 0x3f
   172fc:	b	16950 <__assert_fail@plt+0x574c>
   17300:	mov	r5, #0
   17304:	mov	r3, r5
   17308:	mov	r4, #63	; 0x3f
   1730c:	b	16950 <__assert_fail@plt+0x574c>
   17310:	mov	r5, #0
   17314:	mov	r3, r5
   17318:	b	16950 <__assert_fail@plt+0x574c>
   1731c:	mov	r5, #0
   17320:	mov	r3, r5
   17324:	b	16950 <__assert_fail@plt+0x574c>
   17328:	ldr	r5, [sp, #44]	; 0x2c
   1732c:	ldr	r3, [sp, #32]
   17330:	b	16950 <__assert_fail@plt+0x574c>
   17334:	ldr	r5, [sp, #44]	; 0x2c
   17338:	mov	r3, #0
   1733c:	str	r3, [sp, #44]	; 0x2c
   17340:	b	16950 <__assert_fail@plt+0x574c>
   17344:	mov	r4, r3
   17348:	mov	r5, #0
   1734c:	b	169a8 <__assert_fail@plt+0x57a4>
   17350:	mov	r5, #0
   17354:	mov	r4, #97	; 0x61
   17358:	b	169a8 <__assert_fail@plt+0x57a4>
   1735c:	mov	r5, #0
   17360:	mov	r3, r5
   17364:	mov	r4, #92	; 0x5c
   17368:	b	16cfc <__assert_fail@plt+0x5af8>
   1736c:	ldr	r3, [sp, #48]	; 0x30
   17370:	ldrb	r5, [r3, r6]
   17374:	adds	r5, r5, #0
   17378:	movne	r5, #1
   1737c:	b	16a4c <__assert_fail@plt+0x5848>
   17380:	cmp	sl, #2
   17384:	movne	r3, #0
   17388:	moveq	r3, #1
   1738c:	ldr	r1, [sp, #32]
   17390:	cmp	fp, #0
   17394:	andeq	r2, r3, r1
   17398:	movne	r2, #0
   1739c:	cmp	r2, #0
   173a0:	bne	174c0 <__assert_fail@plt+0x62bc>
   173a4:	eor	r2, r1, #1
   173a8:	uxtb	r2, r2
   173ac:	and	r3, r3, r2
   173b0:	ldr	r1, [sp, #68]	; 0x44
   173b4:	ands	r3, r1, r3
   173b8:	beq	1744c <__assert_fail@plt+0x6248>
   173bc:	ldr	r2, [sp, #40]	; 0x28
   173c0:	cmp	r2, #0
   173c4:	bne	173fc <__assert_fail@plt+0x61f8>
   173c8:	ldr	r2, [sp, #72]	; 0x48
   173cc:	adds	r2, r2, #0
   173d0:	movne	r2, #1
   173d4:	cmp	r9, #0
   173d8:	movne	r2, #0
   173dc:	str	r2, [sp, #68]	; 0x44
   173e0:	mov	sl, #2
   173e4:	ldr	r1, [sp, #40]	; 0x28
   173e8:	str	r1, [sp, #32]
   173ec:	cmp	r2, #0
   173f0:	beq	17440 <__assert_fail@plt+0x623c>
   173f4:	ldr	r9, [sp, #72]	; 0x48
   173f8:	b	16154 <__assert_fail@plt+0x4f50>
   173fc:	ldr	r3, [sp, #168]	; 0xa8
   17400:	str	r3, [sp, #16]
   17404:	ldr	r3, [sp, #164]	; 0xa4
   17408:	str	r3, [sp, #12]
   1740c:	ldr	r3, [sp, #160]	; 0xa0
   17410:	str	r3, [sp, #8]
   17414:	ldr	r3, [sp, #156]	; 0x9c
   17418:	str	r3, [sp, #4]
   1741c:	mov	r3, #5
   17420:	str	r3, [sp]
   17424:	ldr	r3, [sp, #24]
   17428:	ldr	r2, [sp, #48]	; 0x30
   1742c:	ldr	r1, [sp, #72]	; 0x48
   17430:	ldr	r0, [sp, #64]	; 0x40
   17434:	bl	160dc <__assert_fail@plt+0x4ed8>
   17438:	mov	fp, r0
   1743c:	b	1755c <__assert_fail@plt+0x6358>
   17440:	mov	r8, r9
   17444:	mov	r2, r3
   17448:	b	17450 <__assert_fail@plt+0x624c>
   1744c:	mov	r8, r9
   17450:	ldr	r3, [sp, #60]	; 0x3c
   17454:	cmp	r3, #0
   17458:	moveq	r2, #0
   1745c:	andne	r2, r2, #1
   17460:	cmp	r2, #0
   17464:	beq	17494 <__assert_fail@plt+0x6290>
   17468:	mov	r2, r3
   1746c:	ldrb	r3, [r3]
   17470:	cmp	r3, #0
   17474:	beq	17494 <__assert_fail@plt+0x6290>
   17478:	ldr	r1, [sp, #64]	; 0x40
   1747c:	cmp	r8, fp
   17480:	strbhi	r3, [r1, fp]
   17484:	add	fp, fp, #1
   17488:	ldrb	r3, [r2, #1]!
   1748c:	cmp	r3, #0
   17490:	bne	1747c <__assert_fail@plt+0x6278>
   17494:	cmp	r8, fp
   17498:	bls	1755c <__assert_fail@plt+0x6358>
   1749c:	mov	r3, #0
   174a0:	ldr	r2, [sp, #64]	; 0x40
   174a4:	strb	r3, [r2, fp]
   174a8:	b	1755c <__assert_fail@plt+0x6358>
   174ac:	mov	r8, r9
   174b0:	mov	r7, sl
   174b4:	ldr	r3, [sp, #32]
   174b8:	str	r3, [sp, #28]
   174bc:	b	17504 <__assert_fail@plt+0x6300>
   174c0:	mov	r8, r9
   174c4:	mov	r7, #2
   174c8:	b	17504 <__assert_fail@plt+0x6300>
   174cc:	mov	r8, r9
   174d0:	mov	r7, sl
   174d4:	b	17504 <__assert_fail@plt+0x6300>
   174d8:	mov	r8, r9
   174dc:	mov	r7, sl
   174e0:	b	17504 <__assert_fail@plt+0x6300>
   174e4:	mov	r8, r9
   174e8:	mov	r7, sl
   174ec:	b	17504 <__assert_fail@plt+0x6300>
   174f0:	mov	r8, r9
   174f4:	mov	r7, sl
   174f8:	b	17504 <__assert_fail@plt+0x6300>
   174fc:	mov	r8, r9
   17500:	mov	r7, sl
   17504:	ldr	r3, [sp, #28]
   17508:	cmp	r7, #2
   1750c:	movne	r3, #0
   17510:	andeq	r3, r3, #1
   17514:	cmp	r3, #0
   17518:	movne	r7, #4
   1751c:	ldr	r3, [sp, #168]	; 0xa8
   17520:	str	r3, [sp, #16]
   17524:	ldr	r3, [sp, #164]	; 0xa4
   17528:	str	r3, [sp, #12]
   1752c:	mov	r3, #0
   17530:	str	r3, [sp, #8]
   17534:	ldr	r3, [sp, #156]	; 0x9c
   17538:	bic	r3, r3, #2
   1753c:	str	r3, [sp, #4]
   17540:	str	r7, [sp]
   17544:	ldr	r3, [sp, #24]
   17548:	ldr	r2, [sp, #48]	; 0x30
   1754c:	mov	r1, r8
   17550:	ldr	r0, [sp, #64]	; 0x40
   17554:	bl	160dc <__assert_fail@plt+0x4ed8>
   17558:	mov	fp, r0
   1755c:	mov	r0, fp
   17560:	add	sp, sp, #116	; 0x74
   17564:	ldrd	r4, [sp]
   17568:	ldrd	r6, [sp, #8]
   1756c:	ldrd	r8, [sp, #16]
   17570:	ldrd	sl, [sp, #24]
   17574:	add	sp, sp, #32
   17578:	pop	{pc}		; (ldr pc, [sp], #4)
   1757c:	mov	r8, r9
   17580:	mov	r7, sl
   17584:	b	1751c <__assert_fail@plt+0x6318>
   17588:	add	fp, fp, #4
   1758c:	str	r3, [sp, #36]	; 0x24
   17590:	mov	r5, #0
   17594:	mov	r4, #48	; 0x30
   17598:	b	16950 <__assert_fail@plt+0x574c>
   1759c:	mov	r3, #1
   175a0:	str	r3, [sp, #32]
   175a4:	str	r3, [sp, #28]
   175a8:	str	r3, [sp, #52]	; 0x34
   175ac:	movw	r3, #45532	; 0xb1dc
   175b0:	movt	r3, #1
   175b4:	str	r3, [sp, #60]	; 0x3c
   175b8:	mov	fp, #0
   175bc:	mov	sl, #5
   175c0:	b	161b4 <__assert_fail@plt+0x4fb0>
   175c4:	ldr	r3, [sp, #48]	; 0x30
   175c8:	ldrb	r4, [r3, r6]
   175cc:	cmp	r4, #126	; 0x7e
   175d0:	ldrls	pc, [pc, r4, lsl #2]
   175d4:	b	16ec0 <__assert_fail@plt+0x5cbc>
   175d8:	andeq	r6, r1, r8, asr #12
   175dc:	andeq	r6, r1, r0, asr #29
   175e0:	andeq	r6, r1, r0, asr #29
   175e4:	andeq	r6, r1, r0, asr #29
   175e8:	andeq	r6, r1, r0, asr #29
   175ec:	andeq	r6, r1, r0, asr #29
   175f0:	andeq	r6, r1, r0, asr #29
   175f4:	andeq	r7, r1, r0, asr r3
   175f8:	andeq	r6, r1, ip, ror #17
   175fc:	muleq	r1, r0, ip
   17600:	andeq	r6, r1, ip, asr #26
   17604:	andeq	r6, r1, r4, lsr #25
   17608:	andeq	r6, r1, r0, lsl #18
   1760c:	andeq	r6, r1, r4, lsl r9
   17610:	andeq	r6, r1, r0, asr #29
   17614:	andeq	r6, r1, r0, asr #29
   17618:	andeq	r6, r1, r0, asr #29
   1761c:	andeq	r6, r1, r0, asr #29
   17620:	andeq	r6, r1, r0, asr #29
   17624:	andeq	r6, r1, r0, asr #29
   17628:	andeq	r6, r1, r0, asr #29
   1762c:	andeq	r6, r1, r0, asr #29
   17630:	andeq	r6, r1, r0, asr #29
   17634:	andeq	r6, r1, r0, asr #29
   17638:	andeq	r6, r1, r0, asr #29
   1763c:	andeq	r6, r1, r0, asr #29
   17640:	andeq	r6, r1, r0, asr #29
   17644:	andeq	r6, r1, r0, asr #29
   17648:	andeq	r6, r1, r0, asr #29
   1764c:	andeq	r6, r1, r0, asr #29
   17650:	andeq	r6, r1, r0, asr #29
   17654:	andeq	r6, r1, r0, asr #29
   17658:	ldrdeq	r6, [r1], -r4
   1765c:	andeq	r6, r1, r0, lsl lr
   17660:	andeq	r6, r1, r0, lsl lr
   17664:	andeq	r6, r1, r8, asr #27
   17668:	andeq	r6, r1, r0, lsl lr
   1766c:	andeq	r7, r1, r4, lsr r3
   17670:	andeq	r6, r1, r0, lsl lr
   17674:	andeq	r6, r1, r0, lsr #28
   17678:	andeq	r6, r1, r0, lsl lr
   1767c:	andeq	r6, r1, r0, lsl lr
   17680:	andeq	r6, r1, r0, lsl lr
   17684:	andeq	r7, r1, r4, lsr r3
   17688:	andeq	r7, r1, r4, lsr r3
   1768c:	andeq	r7, r1, r4, lsr r3
   17690:	andeq	r7, r1, r4, lsr r3
   17694:	andeq	r7, r1, r4, lsr r3
   17698:	andeq	r7, r1, r4, lsr r3
   1769c:	andeq	r7, r1, r4, lsr r3
   176a0:	andeq	r7, r1, r4, lsr r3
   176a4:	andeq	r7, r1, r4, lsr r3
   176a8:	andeq	r7, r1, r4, lsr r3
   176ac:	andeq	r7, r1, r4, lsr r3
   176b0:	andeq	r7, r1, r4, lsr r3
   176b4:	andeq	r7, r1, r4, lsr r3
   176b8:	andeq	r7, r1, r4, lsr r3
   176bc:	andeq	r7, r1, r4, lsr r3
   176c0:	andeq	r7, r1, r4, lsr r3
   176c4:	andeq	r6, r1, r0, lsl lr
   176c8:	andeq	r6, r1, r0, lsl lr
   176cc:	andeq	r6, r1, r0, lsl lr
   176d0:	andeq	r6, r1, r0, lsl lr
   176d4:	andeq	r6, r1, r0, lsl #15
   176d8:	andeq	r6, r1, r0, asr #29
   176dc:	andeq	r7, r1, r4, lsr r3
   176e0:	andeq	r7, r1, r4, lsr r3
   176e4:	andeq	r7, r1, r4, lsr r3
   176e8:	andeq	r7, r1, r4, lsr r3
   176ec:	andeq	r7, r1, r4, lsr r3
   176f0:	andeq	r7, r1, r4, lsr r3
   176f4:	andeq	r7, r1, r4, lsr r3
   176f8:	andeq	r7, r1, r4, lsr r3
   176fc:	andeq	r7, r1, r4, lsr r3
   17700:	andeq	r7, r1, r4, lsr r3
   17704:	andeq	r7, r1, r4, lsr r3
   17708:	andeq	r7, r1, r4, lsr r3
   1770c:	andeq	r7, r1, r4, lsr r3
   17710:	andeq	r7, r1, r4, lsr r3
   17714:	andeq	r7, r1, r4, lsr r3
   17718:	andeq	r7, r1, r4, lsr r3
   1771c:	andeq	r7, r1, r4, lsr r3
   17720:	andeq	r7, r1, r4, lsr r3
   17724:	andeq	r7, r1, r4, lsr r3
   17728:	andeq	r7, r1, r4, lsr r3
   1772c:	andeq	r7, r1, r4, lsr r3
   17730:	andeq	r7, r1, r4, lsr r3
   17734:	andeq	r7, r1, r4, lsr r3
   17738:	andeq	r7, r1, r4, lsr r3
   1773c:	andeq	r7, r1, r4, lsr r3
   17740:	andeq	r7, r1, r4, lsr r3
   17744:	andeq	r6, r1, r0, lsl lr
   17748:			; <UNDEFINED> instruction: 0x00016cb8
   1774c:	andeq	r7, r1, r4, lsr r3
   17750:	andeq	r6, r1, r0, lsl lr
   17754:	andeq	r7, r1, r4, lsr r3
   17758:	andeq	r6, r1, r0, lsl lr
   1775c:	andeq	r7, r1, r4, lsr r3
   17760:	andeq	r7, r1, r4, lsr r3
   17764:	andeq	r7, r1, r4, lsr r3
   17768:	andeq	r7, r1, r4, lsr r3
   1776c:	andeq	r7, r1, r4, lsr r3
   17770:	andeq	r7, r1, r4, lsr r3
   17774:	andeq	r7, r1, r4, lsr r3
   17778:	andeq	r7, r1, r4, lsr r3
   1777c:	andeq	r7, r1, r4, lsr r3
   17780:	andeq	r7, r1, r4, lsr r3
   17784:	andeq	r7, r1, r4, lsr r3
   17788:	andeq	r7, r1, r4, lsr r3
   1778c:	andeq	r7, r1, r4, lsr r3
   17790:	andeq	r7, r1, r4, lsr r3
   17794:	andeq	r7, r1, r4, lsr r3
   17798:	andeq	r7, r1, r4, lsr r3
   1779c:	andeq	r7, r1, r4, lsr r3
   177a0:	andeq	r7, r1, r4, lsr r3
   177a4:	andeq	r7, r1, r4, lsr r3
   177a8:	andeq	r7, r1, r4, lsr r3
   177ac:	andeq	r7, r1, r4, lsr r3
   177b0:	andeq	r7, r1, r4, lsr r3
   177b4:	andeq	r7, r1, r4, lsr r3
   177b8:	andeq	r7, r1, r4, lsr r3
   177bc:	andeq	r7, r1, r4, lsr r3
   177c0:	andeq	r7, r1, r4, lsr r3
   177c4:	andeq	r6, r1, r8, ror sp
   177c8:	andeq	r6, r1, r0, lsl lr
   177cc:	andeq	r6, r1, r8, ror sp
   177d0:	andeq	r6, r1, r8, asr #27
   177d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177d8:	strd	r6, [sp, #8]
   177dc:	strd	r8, [sp, #16]
   177e0:	strd	sl, [sp, #24]
   177e4:	str	lr, [sp, #32]
   177e8:	sub	sp, sp, #52	; 0x34
   177ec:	mov	r5, r0
   177f0:	str	r1, [sp, #24]
   177f4:	str	r2, [sp, #28]
   177f8:	mov	r4, r3
   177fc:	bl	110d8 <__errno_location@plt>
   17800:	str	r0, [sp, #32]
   17804:	ldr	r3, [r0]
   17808:	str	r3, [sp, #36]	; 0x24
   1780c:	movw	r3, #49448	; 0xc128
   17810:	movt	r3, #2
   17814:	ldr	r6, [r3]
   17818:	cmn	r5, #-2147483647	; 0x80000001
   1781c:	movne	r3, #0
   17820:	moveq	r3, #1
   17824:	orrs	r3, r3, r5, lsr #31
   17828:	bne	1798c <__assert_fail@plt+0x6788>
   1782c:	movw	r3, #49448	; 0xc128
   17830:	movt	r3, #2
   17834:	ldr	r2, [r3, #4]
   17838:	cmp	r2, r5
   1783c:	bgt	178ac <__assert_fail@plt+0x66a8>
   17840:	str	r2, [sp, #44]	; 0x2c
   17844:	add	r3, r3, #8
   17848:	cmp	r6, r3
   1784c:	beq	17990 <__assert_fail@plt+0x678c>
   17850:	sub	r2, r5, r2
   17854:	mov	r3, #8
   17858:	str	r3, [sp]
   1785c:	mvn	r3, #-2147483648	; 0x80000000
   17860:	add	r2, r2, #1
   17864:	add	r1, sp, #44	; 0x2c
   17868:	mov	r0, r6
   1786c:	bl	18994 <__assert_fail@plt+0x7790>
   17870:	mov	r6, r0
   17874:	movw	r3, #49448	; 0xc128
   17878:	movt	r3, #2
   1787c:	str	r0, [r3]
   17880:	movw	r7, #49448	; 0xc128
   17884:	movt	r7, #2
   17888:	ldr	r0, [r7, #4]
   1788c:	ldr	r2, [sp, #44]	; 0x2c
   17890:	sub	r2, r2, r0
   17894:	lsl	r2, r2, #3
   17898:	mov	r1, #0
   1789c:	add	r0, r6, r0, lsl #3
   178a0:	bl	11108 <memset@plt>
   178a4:	ldr	r3, [sp, #44]	; 0x2c
   178a8:	str	r3, [r7, #4]
   178ac:	add	fp, r6, r5, lsl #3
   178b0:	ldr	r8, [r6, r5, lsl #3]
   178b4:	ldr	r7, [fp, #4]
   178b8:	ldr	r3, [r4, #4]
   178bc:	orr	r9, r3, #1
   178c0:	add	sl, r4, #8
   178c4:	ldr	r3, [r4, #44]	; 0x2c
   178c8:	str	r3, [sp, #16]
   178cc:	ldr	r3, [r4, #40]	; 0x28
   178d0:	str	r3, [sp, #12]
   178d4:	str	sl, [sp, #8]
   178d8:	str	r9, [sp, #4]
   178dc:	ldr	r3, [r4]
   178e0:	str	r3, [sp]
   178e4:	ldr	r3, [sp, #28]
   178e8:	ldr	r2, [sp, #24]
   178ec:	mov	r1, r8
   178f0:	mov	r0, r7
   178f4:	bl	160dc <__assert_fail@plt+0x4ed8>
   178f8:	cmp	r8, r0
   178fc:	bhi	17960 <__assert_fail@plt+0x675c>
   17900:	add	r8, r0, #1
   17904:	str	r8, [r6, r5, lsl #3]
   17908:	movw	r3, #49732	; 0xc244
   1790c:	movt	r3, #2
   17910:	cmp	r7, r3
   17914:	beq	17920 <__assert_fail@plt+0x671c>
   17918:	mov	r0, r7
   1791c:	bl	15a7c <__assert_fail@plt+0x4878>
   17920:	mov	r0, r8
   17924:	bl	18790 <__assert_fail@plt+0x758c>
   17928:	mov	r7, r0
   1792c:	str	r0, [fp, #4]
   17930:	ldr	r3, [r4, #44]	; 0x2c
   17934:	str	r3, [sp, #16]
   17938:	ldr	r3, [r4, #40]	; 0x28
   1793c:	str	r3, [sp, #12]
   17940:	str	sl, [sp, #8]
   17944:	str	r9, [sp, #4]
   17948:	ldr	r3, [r4]
   1794c:	str	r3, [sp]
   17950:	ldr	r3, [sp, #28]
   17954:	ldr	r2, [sp, #24]
   17958:	mov	r1, r8
   1795c:	bl	160dc <__assert_fail@plt+0x4ed8>
   17960:	ldr	r3, [sp, #32]
   17964:	ldr	r2, [sp, #36]	; 0x24
   17968:	str	r2, [r3]
   1796c:	mov	r0, r7
   17970:	add	sp, sp, #52	; 0x34
   17974:	ldrd	r4, [sp]
   17978:	ldrd	r6, [sp, #8]
   1797c:	ldrd	r8, [sp, #16]
   17980:	ldrd	sl, [sp, #24]
   17984:	add	sp, sp, #32
   17988:	pop	{pc}		; (ldr pc, [sp], #4)
   1798c:	bl	111ec <abort@plt>
   17990:	sub	r2, r5, r2
   17994:	mov	r3, #8
   17998:	str	r3, [sp]
   1799c:	mvn	r3, #-2147483648	; 0x80000000
   179a0:	add	r2, r2, #1
   179a4:	add	r1, sp, #44	; 0x2c
   179a8:	mov	r0, #0
   179ac:	bl	18994 <__assert_fail@plt+0x7790>
   179b0:	mov	r6, r0
   179b4:	movw	r3, #49448	; 0xc128
   179b8:	movt	r3, #2
   179bc:	str	r0, [r3]
   179c0:	ldrd	r2, [r3, #8]
   179c4:	strd	r2, [r0]
   179c8:	b	17880 <__assert_fail@plt+0x667c>
   179cc:	strd	r4, [sp, #-16]!
   179d0:	str	r6, [sp, #8]
   179d4:	str	lr, [sp, #12]
   179d8:	mov	r4, r0
   179dc:	bl	110d8 <__errno_location@plt>
   179e0:	mov	r5, r0
   179e4:	ldr	r6, [r0]
   179e8:	cmp	r4, #0
   179ec:	ldr	r3, [pc, #32]	; 17a14 <__assert_fail@plt+0x6810>
   179f0:	moveq	r4, r3
   179f4:	mov	r1, #48	; 0x30
   179f8:	mov	r0, r4
   179fc:	bl	18b04 <__assert_fail@plt+0x7900>
   17a00:	str	r6, [r5]
   17a04:	ldrd	r4, [sp]
   17a08:	ldr	r6, [sp, #8]
   17a0c:	add	sp, sp, #12
   17a10:	pop	{pc}		; (ldr pc, [sp], #4)
   17a14:	andeq	ip, r2, r4, asr #6
   17a18:	subs	r3, r0, #0
   17a1c:	ldr	r2, [pc, #8]	; 17a2c <__assert_fail@plt+0x6828>
   17a20:	moveq	r3, r2
   17a24:	ldr	r0, [r3]
   17a28:	bx	lr
   17a2c:	andeq	ip, r2, r4, asr #6
   17a30:	subs	r3, r0, #0
   17a34:	ldr	r2, [pc, #8]	; 17a44 <__assert_fail@plt+0x6840>
   17a38:	moveq	r3, r2
   17a3c:	str	r1, [r3]
   17a40:	bx	lr
   17a44:	andeq	ip, r2, r4, asr #6
   17a48:	push	{lr}		; (str lr, [sp, #-4]!)
   17a4c:	subs	r3, r0, #0
   17a50:	ldr	r0, [pc, #44]	; 17a84 <__assert_fail@plt+0x6880>
   17a54:	moveq	r3, r0
   17a58:	add	r3, r3, #8
   17a5c:	lsr	lr, r1, #5
   17a60:	and	r1, r1, #31
   17a64:	ldr	ip, [r3, lr, lsl #2]
   17a68:	lsr	r0, ip, r1
   17a6c:	eor	r2, r2, r0
   17a70:	and	r2, r2, #1
   17a74:	eor	r1, ip, r2, lsl r1
   17a78:	str	r1, [r3, lr, lsl #2]
   17a7c:	and	r0, r0, #1
   17a80:	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	andeq	ip, r2, r4, asr #6
   17a88:	subs	r3, r0, #0
   17a8c:	ldr	r2, [pc, #12]	; 17aa0 <__assert_fail@plt+0x689c>
   17a90:	moveq	r3, r2
   17a94:	ldr	r0, [r3, #4]
   17a98:	str	r1, [r3, #4]
   17a9c:	bx	lr
   17aa0:	andeq	ip, r2, r4, asr #6
   17aa4:	subs	r3, r0, #0
   17aa8:	ldr	r0, [pc, #44]	; 17adc <__assert_fail@plt+0x68d8>
   17aac:	moveq	r3, r0
   17ab0:	mov	r0, #10
   17ab4:	str	r0, [r3]
   17ab8:	cmp	r2, #0
   17abc:	cmpne	r1, #0
   17ac0:	beq	17ad0 <__assert_fail@plt+0x68cc>
   17ac4:	str	r1, [r3, #40]	; 0x28
   17ac8:	str	r2, [r3, #44]	; 0x2c
   17acc:	bx	lr
   17ad0:	str	r4, [sp, #-8]!
   17ad4:	str	lr, [sp, #4]
   17ad8:	bl	111ec <abort@plt>
   17adc:	andeq	ip, r2, r4, asr #6
   17ae0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ae4:	strd	r6, [sp, #8]
   17ae8:	strd	r8, [sp, #16]
   17aec:	str	sl, [sp, #24]
   17af0:	str	lr, [sp, #28]
   17af4:	sub	sp, sp, #24
   17af8:	mov	r7, r0
   17afc:	mov	r8, r1
   17b00:	mov	r9, r2
   17b04:	mov	sl, r3
   17b08:	ldr	r4, [sp, #56]	; 0x38
   17b0c:	cmp	r4, #0
   17b10:	ldr	r3, [pc, #104]	; 17b80 <__assert_fail@plt+0x697c>
   17b14:	moveq	r4, r3
   17b18:	bl	110d8 <__errno_location@plt>
   17b1c:	mov	r5, r0
   17b20:	ldr	r6, [r0]
   17b24:	ldr	r3, [r4, #44]	; 0x2c
   17b28:	str	r3, [sp, #16]
   17b2c:	ldr	r3, [r4, #40]	; 0x28
   17b30:	str	r3, [sp, #12]
   17b34:	add	r3, r4, #8
   17b38:	str	r3, [sp, #8]
   17b3c:	ldr	r3, [r4, #4]
   17b40:	str	r3, [sp, #4]
   17b44:	ldr	r3, [r4]
   17b48:	str	r3, [sp]
   17b4c:	mov	r3, sl
   17b50:	mov	r2, r9
   17b54:	mov	r1, r8
   17b58:	mov	r0, r7
   17b5c:	bl	160dc <__assert_fail@plt+0x4ed8>
   17b60:	str	r6, [r5]
   17b64:	add	sp, sp, #24
   17b68:	ldrd	r4, [sp]
   17b6c:	ldrd	r6, [sp, #8]
   17b70:	ldrd	r8, [sp, #16]
   17b74:	ldr	sl, [sp, #24]
   17b78:	add	sp, sp, #28
   17b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b80:	andeq	ip, r2, r4, asr #6
   17b84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17b88:	strd	r6, [sp, #8]
   17b8c:	strd	r8, [sp, #16]
   17b90:	strd	sl, [sp, #24]
   17b94:	str	lr, [sp, #32]
   17b98:	sub	sp, sp, #44	; 0x2c
   17b9c:	mov	r8, r0
   17ba0:	mov	sl, r1
   17ba4:	mov	r6, r2
   17ba8:	subs	r4, r3, #0
   17bac:	ldr	r3, [pc, #200]	; 17c7c <__assert_fail@plt+0x6a78>
   17bb0:	moveq	r4, r3
   17bb4:	bl	110d8 <__errno_location@plt>
   17bb8:	mov	r7, r0
   17bbc:	ldr	fp, [r0]
   17bc0:	ldr	r5, [r4, #4]
   17bc4:	cmp	r6, #0
   17bc8:	orreq	r5, r5, #1
   17bcc:	add	r9, r4, #8
   17bd0:	ldr	r3, [r4, #44]	; 0x2c
   17bd4:	str	r3, [sp, #16]
   17bd8:	ldr	r3, [r4, #40]	; 0x28
   17bdc:	str	r3, [sp, #12]
   17be0:	str	r9, [sp, #8]
   17be4:	str	r5, [sp, #4]
   17be8:	ldr	r3, [r4]
   17bec:	str	r3, [sp]
   17bf0:	str	sl, [sp, #36]	; 0x24
   17bf4:	mov	r3, sl
   17bf8:	str	r8, [sp, #32]
   17bfc:	mov	r2, r8
   17c00:	mov	r1, #0
   17c04:	mov	r0, r1
   17c08:	bl	160dc <__assert_fail@plt+0x4ed8>
   17c0c:	mov	sl, r0
   17c10:	add	r8, r0, #1
   17c14:	mov	r0, r8
   17c18:	bl	18790 <__assert_fail@plt+0x758c>
   17c1c:	str	r0, [sp, #28]
   17c20:	ldr	r3, [r4, #44]	; 0x2c
   17c24:	str	r3, [sp, #16]
   17c28:	ldr	r3, [r4, #40]	; 0x28
   17c2c:	str	r3, [sp, #12]
   17c30:	str	r9, [sp, #8]
   17c34:	str	r5, [sp, #4]
   17c38:	ldr	r3, [r4]
   17c3c:	str	r3, [sp]
   17c40:	ldr	r3, [sp, #36]	; 0x24
   17c44:	ldr	r2, [sp, #32]
   17c48:	mov	r1, r8
   17c4c:	bl	160dc <__assert_fail@plt+0x4ed8>
   17c50:	str	fp, [r7]
   17c54:	cmp	r6, #0
   17c58:	strne	sl, [r6]
   17c5c:	ldr	r0, [sp, #28]
   17c60:	add	sp, sp, #44	; 0x2c
   17c64:	ldrd	r4, [sp]
   17c68:	ldrd	r6, [sp, #8]
   17c6c:	ldrd	r8, [sp, #16]
   17c70:	ldrd	sl, [sp, #24]
   17c74:	add	sp, sp, #32
   17c78:	pop	{pc}		; (ldr pc, [sp], #4)
   17c7c:	andeq	ip, r2, r4, asr #6
   17c80:	str	r4, [sp, #-8]!
   17c84:	str	lr, [sp, #4]
   17c88:	mov	r3, r2
   17c8c:	mov	r2, #0
   17c90:	bl	17b84 <__assert_fail@plt+0x6980>
   17c94:	ldr	r4, [sp]
   17c98:	add	sp, sp, #4
   17c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17ca0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17ca4:	strd	r6, [sp, #8]
   17ca8:	str	r8, [sp, #16]
   17cac:	str	lr, [sp, #20]
   17cb0:	movw	r3, #49448	; 0xc128
   17cb4:	movt	r3, #2
   17cb8:	ldr	r7, [r3]
   17cbc:	ldr	r3, [r3, #4]
   17cc0:	cmp	r3, #1
   17cc4:	ble	17cf0 <__assert_fail@plt+0x6aec>
   17cc8:	mov	r4, #1
   17ccc:	add	r6, r7, #4
   17cd0:	movw	r5, #49448	; 0xc128
   17cd4:	movt	r5, #2
   17cd8:	ldr	r0, [r6, r4, lsl #3]
   17cdc:	bl	15a7c <__assert_fail@plt+0x4878>
   17ce0:	add	r4, r4, #1
   17ce4:	ldr	r3, [r5, #4]
   17ce8:	cmp	r3, r4
   17cec:	bgt	17cd8 <__assert_fail@plt+0x6ad4>
   17cf0:	ldr	r0, [r7, #4]
   17cf4:	movw	r3, #49732	; 0xc244
   17cf8:	movt	r3, #2
   17cfc:	cmp	r0, r3
   17d00:	beq	17d24 <__assert_fail@plt+0x6b20>
   17d04:	bl	15a7c <__assert_fail@plt+0x4878>
   17d08:	movw	r3, #49448	; 0xc128
   17d0c:	movt	r3, #2
   17d10:	mov	r2, #256	; 0x100
   17d14:	str	r2, [r3, #8]
   17d18:	movw	r2, #49732	; 0xc244
   17d1c:	movt	r2, #2
   17d20:	str	r2, [r3, #12]
   17d24:	ldr	r3, [pc, #64]	; 17d6c <__assert_fail@plt+0x6b68>
   17d28:	cmp	r7, r3
   17d2c:	beq	17d48 <__assert_fail@plt+0x6b44>
   17d30:	mov	r0, r7
   17d34:	bl	15a7c <__assert_fail@plt+0x4878>
   17d38:	movw	r3, #49448	; 0xc128
   17d3c:	movt	r3, #2
   17d40:	add	r2, r3, #8
   17d44:	str	r2, [r3]
   17d48:	movw	r3, #49448	; 0xc128
   17d4c:	movt	r3, #2
   17d50:	mov	r2, #1
   17d54:	str	r2, [r3, #4]
   17d58:	ldrd	r4, [sp]
   17d5c:	ldrd	r6, [sp, #8]
   17d60:	ldr	r8, [sp, #16]
   17d64:	add	sp, sp, #20
   17d68:	pop	{pc}		; (ldr pc, [sp], #4)
   17d6c:	andeq	ip, r2, r0, lsr r1
   17d70:	str	r4, [sp, #-8]!
   17d74:	str	lr, [sp, #4]
   17d78:	ldr	r3, [pc, #16]	; 17d90 <__assert_fail@plt+0x6b8c>
   17d7c:	mvn	r2, #0
   17d80:	bl	177d4 <__assert_fail@plt+0x65d0>
   17d84:	ldr	r4, [sp]
   17d88:	add	sp, sp, #4
   17d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d90:	andeq	ip, r2, r4, asr #6
   17d94:	str	r4, [sp, #-8]!
   17d98:	str	lr, [sp, #4]
   17d9c:	ldr	r3, [pc, #12]	; 17db0 <__assert_fail@plt+0x6bac>
   17da0:	bl	177d4 <__assert_fail@plt+0x65d0>
   17da4:	ldr	r4, [sp]
   17da8:	add	sp, sp, #4
   17dac:	pop	{pc}		; (ldr pc, [sp], #4)
   17db0:	andeq	ip, r2, r4, asr #6
   17db4:	str	r4, [sp, #-8]!
   17db8:	str	lr, [sp, #4]
   17dbc:	mov	r1, r0
   17dc0:	mov	r0, #0
   17dc4:	bl	17d70 <__assert_fail@plt+0x6b6c>
   17dc8:	ldr	r4, [sp]
   17dcc:	add	sp, sp, #4
   17dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   17dd4:	str	r4, [sp, #-8]!
   17dd8:	str	lr, [sp, #4]
   17ddc:	mov	r2, r1
   17de0:	mov	r1, r0
   17de4:	mov	r0, #0
   17de8:	bl	17d94 <__assert_fail@plt+0x6b90>
   17dec:	ldr	r4, [sp]
   17df0:	add	sp, sp, #4
   17df4:	pop	{pc}		; (ldr pc, [sp], #4)
   17df8:	strd	r4, [sp, #-12]!
   17dfc:	str	lr, [sp, #8]
   17e00:	sub	sp, sp, #52	; 0x34
   17e04:	mov	r4, r0
   17e08:	mov	r5, r2
   17e0c:	mov	r0, sp
   17e10:	bl	15f48 <__assert_fail@plt+0x4d44>
   17e14:	mov	r3, sp
   17e18:	mvn	r2, #0
   17e1c:	mov	r1, r5
   17e20:	mov	r0, r4
   17e24:	bl	177d4 <__assert_fail@plt+0x65d0>
   17e28:	add	sp, sp, #52	; 0x34
   17e2c:	ldrd	r4, [sp]
   17e30:	add	sp, sp, #8
   17e34:	pop	{pc}		; (ldr pc, [sp], #4)
   17e38:	strd	r4, [sp, #-16]!
   17e3c:	str	r6, [sp, #8]
   17e40:	str	lr, [sp, #12]
   17e44:	sub	sp, sp, #48	; 0x30
   17e48:	mov	r4, r0
   17e4c:	mov	r5, r2
   17e50:	mov	r6, r3
   17e54:	mov	r0, sp
   17e58:	bl	15f48 <__assert_fail@plt+0x4d44>
   17e5c:	mov	r3, sp
   17e60:	mov	r2, r6
   17e64:	mov	r1, r5
   17e68:	mov	r0, r4
   17e6c:	bl	177d4 <__assert_fail@plt+0x65d0>
   17e70:	add	sp, sp, #48	; 0x30
   17e74:	ldrd	r4, [sp]
   17e78:	ldr	r6, [sp, #8]
   17e7c:	add	sp, sp, #12
   17e80:	pop	{pc}		; (ldr pc, [sp], #4)
   17e84:	str	r4, [sp, #-8]!
   17e88:	str	lr, [sp, #4]
   17e8c:	mov	r2, r1
   17e90:	mov	r1, r0
   17e94:	mov	r0, #0
   17e98:	bl	17df8 <__assert_fail@plt+0x6bf4>
   17e9c:	ldr	r4, [sp]
   17ea0:	add	sp, sp, #4
   17ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ea8:	str	r4, [sp, #-8]!
   17eac:	str	lr, [sp, #4]
   17eb0:	mov	r3, r2
   17eb4:	mov	r2, r1
   17eb8:	mov	r1, r0
   17ebc:	mov	r0, #0
   17ec0:	bl	17e38 <__assert_fail@plt+0x6c34>
   17ec4:	ldr	r4, [sp]
   17ec8:	add	sp, sp, #4
   17ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed0:	strd	r4, [sp, #-12]!
   17ed4:	str	lr, [sp, #8]
   17ed8:	sub	sp, sp, #52	; 0x34
   17edc:	mov	r4, r0
   17ee0:	mov	r5, r1
   17ee4:	mov	r1, r2
   17ee8:	ldr	r0, [pc, #92]	; 17f4c <__assert_fail@plt+0x6d48>
   17eec:	ldrd	r2, [r0]
   17ef0:	strd	r2, [sp]
   17ef4:	ldrd	r2, [r0, #8]
   17ef8:	strd	r2, [sp, #8]
   17efc:	ldrd	r2, [r0, #16]
   17f00:	strd	r2, [sp, #16]
   17f04:	ldrd	r2, [r0, #24]
   17f08:	strd	r2, [sp, #24]
   17f0c:	ldrd	r2, [r0, #32]
   17f10:	strd	r2, [sp, #32]
   17f14:	ldrd	r2, [r0, #40]	; 0x28
   17f18:	strd	r2, [sp, #40]	; 0x28
   17f1c:	mov	r2, #1
   17f20:	mov	r0, sp
   17f24:	bl	17a48 <__assert_fail@plt+0x6844>
   17f28:	mov	r3, sp
   17f2c:	mov	r2, r5
   17f30:	mov	r1, r4
   17f34:	mov	r0, #0
   17f38:	bl	177d4 <__assert_fail@plt+0x65d0>
   17f3c:	add	sp, sp, #52	; 0x34
   17f40:	ldrd	r4, [sp]
   17f44:	add	sp, sp, #8
   17f48:	pop	{pc}		; (ldr pc, [sp], #4)
   17f4c:	andeq	ip, r2, r4, asr #6
   17f50:	str	r4, [sp, #-8]!
   17f54:	str	lr, [sp, #4]
   17f58:	mov	r2, r1
   17f5c:	mvn	r1, #0
   17f60:	bl	17ed0 <__assert_fail@plt+0x6ccc>
   17f64:	ldr	r4, [sp]
   17f68:	add	sp, sp, #4
   17f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f70:	str	r4, [sp, #-8]!
   17f74:	str	lr, [sp, #4]
   17f78:	mov	r1, #58	; 0x3a
   17f7c:	bl	17f50 <__assert_fail@plt+0x6d4c>
   17f80:	ldr	r4, [sp]
   17f84:	add	sp, sp, #4
   17f88:	pop	{pc}		; (ldr pc, [sp], #4)
   17f8c:	str	r4, [sp, #-8]!
   17f90:	str	lr, [sp, #4]
   17f94:	mov	r2, #58	; 0x3a
   17f98:	bl	17ed0 <__assert_fail@plt+0x6ccc>
   17f9c:	ldr	r4, [sp]
   17fa0:	add	sp, sp, #4
   17fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fa8:	strd	r4, [sp, #-12]!
   17fac:	str	lr, [sp, #8]
   17fb0:	sub	sp, sp, #100	; 0x64
   17fb4:	mov	r4, r0
   17fb8:	mov	r5, r2
   17fbc:	mov	r0, sp
   17fc0:	bl	15f48 <__assert_fail@plt+0x4d44>
   17fc4:	ldrd	r2, [sp]
   17fc8:	strd	r2, [sp, #48]	; 0x30
   17fcc:	ldrd	r2, [sp, #8]
   17fd0:	strd	r2, [sp, #56]	; 0x38
   17fd4:	ldrd	r2, [sp, #16]
   17fd8:	strd	r2, [sp, #64]	; 0x40
   17fdc:	ldrd	r2, [sp, #24]
   17fe0:	strd	r2, [sp, #72]	; 0x48
   17fe4:	ldrd	r2, [sp, #32]
   17fe8:	strd	r2, [sp, #80]	; 0x50
   17fec:	ldrd	r2, [sp, #40]	; 0x28
   17ff0:	strd	r2, [sp, #88]	; 0x58
   17ff4:	mov	r2, #1
   17ff8:	mov	r1, #58	; 0x3a
   17ffc:	add	r0, sp, #48	; 0x30
   18000:	bl	17a48 <__assert_fail@plt+0x6844>
   18004:	add	r3, sp, #48	; 0x30
   18008:	mvn	r2, #0
   1800c:	mov	r1, r5
   18010:	mov	r0, r4
   18014:	bl	177d4 <__assert_fail@plt+0x65d0>
   18018:	add	sp, sp, #100	; 0x64
   1801c:	ldrd	r4, [sp]
   18020:	add	sp, sp, #8
   18024:	pop	{pc}		; (ldr pc, [sp], #4)
   18028:	strd	r4, [sp, #-20]!	; 0xffffffec
   1802c:	strd	r6, [sp, #8]
   18030:	str	lr, [sp, #16]
   18034:	sub	sp, sp, #52	; 0x34
   18038:	mov	r4, r0
   1803c:	mov	r5, r3
   18040:	ldr	r3, [pc, #92]	; 180a4 <__assert_fail@plt+0x6ea0>
   18044:	ldrd	r6, [r3]
   18048:	strd	r6, [sp]
   1804c:	ldrd	r6, [r3, #8]
   18050:	strd	r6, [sp, #8]
   18054:	ldrd	r6, [r3, #16]
   18058:	strd	r6, [sp, #16]
   1805c:	ldrd	r6, [r3, #24]
   18060:	strd	r6, [sp, #24]
   18064:	ldrd	r6, [r3, #32]
   18068:	strd	r6, [sp, #32]
   1806c:	ldrd	r6, [r3, #40]	; 0x28
   18070:	strd	r6, [sp, #40]	; 0x28
   18074:	mov	r0, sp
   18078:	bl	17aa4 <__assert_fail@plt+0x68a0>
   1807c:	mov	r3, sp
   18080:	ldr	r2, [sp, #72]	; 0x48
   18084:	mov	r1, r5
   18088:	mov	r0, r4
   1808c:	bl	177d4 <__assert_fail@plt+0x65d0>
   18090:	add	sp, sp, #52	; 0x34
   18094:	ldrd	r4, [sp]
   18098:	ldrd	r6, [sp, #8]
   1809c:	add	sp, sp, #16
   180a0:	pop	{pc}		; (ldr pc, [sp], #4)
   180a4:	andeq	ip, r2, r4, asr #6
   180a8:	push	{lr}		; (str lr, [sp, #-4]!)
   180ac:	sub	sp, sp, #12
   180b0:	mvn	ip, #0
   180b4:	str	ip, [sp]
   180b8:	bl	18028 <__assert_fail@plt+0x6e24>
   180bc:	add	sp, sp, #12
   180c0:	pop	{pc}		; (ldr pc, [sp], #4)
   180c4:	str	r4, [sp, #-8]!
   180c8:	str	lr, [sp, #4]
   180cc:	mov	r3, r2
   180d0:	mov	r2, r1
   180d4:	mov	r1, r0
   180d8:	mov	r0, #0
   180dc:	bl	180a8 <__assert_fail@plt+0x6ea4>
   180e0:	ldr	r4, [sp]
   180e4:	add	sp, sp, #4
   180e8:	pop	{pc}		; (ldr pc, [sp], #4)
   180ec:	push	{lr}		; (str lr, [sp, #-4]!)
   180f0:	sub	sp, sp, #12
   180f4:	str	r3, [sp]
   180f8:	mov	r3, r2
   180fc:	mov	r2, r1
   18100:	mov	r1, r0
   18104:	mov	r0, #0
   18108:	bl	18028 <__assert_fail@plt+0x6e24>
   1810c:	add	sp, sp, #12
   18110:	pop	{pc}		; (ldr pc, [sp], #4)
   18114:	str	r4, [sp, #-8]!
   18118:	str	lr, [sp, #4]
   1811c:	ldr	r3, [pc, #12]	; 18130 <__assert_fail@plt+0x6f2c>
   18120:	bl	177d4 <__assert_fail@plt+0x65d0>
   18124:	ldr	r4, [sp]
   18128:	add	sp, sp, #4
   1812c:	pop	{pc}		; (ldr pc, [sp], #4)
   18130:	andeq	ip, r2, r8, lsr r1
   18134:	str	r4, [sp, #-8]!
   18138:	str	lr, [sp, #4]
   1813c:	mov	r2, r1
   18140:	mov	r1, r0
   18144:	mov	r0, #0
   18148:	bl	18114 <__assert_fail@plt+0x6f10>
   1814c:	ldr	r4, [sp]
   18150:	add	sp, sp, #4
   18154:	pop	{pc}		; (ldr pc, [sp], #4)
   18158:	str	r4, [sp, #-8]!
   1815c:	str	lr, [sp, #4]
   18160:	mvn	r2, #0
   18164:	bl	18114 <__assert_fail@plt+0x6f10>
   18168:	ldr	r4, [sp]
   1816c:	add	sp, sp, #4
   18170:	pop	{pc}		; (ldr pc, [sp], #4)
   18174:	str	r4, [sp, #-8]!
   18178:	str	lr, [sp, #4]
   1817c:	mov	r1, r0
   18180:	mov	r0, #0
   18184:	bl	18158 <__assert_fail@plt+0x6f54>
   18188:	ldr	r4, [sp]
   1818c:	add	sp, sp, #4
   18190:	pop	{pc}		; (ldr pc, [sp], #4)
   18194:	strd	r4, [sp, #-16]!
   18198:	str	r6, [sp, #8]
   1819c:	str	lr, [sp, #12]
   181a0:	sub	sp, sp, #32
   181a4:	mov	r4, r0
   181a8:	ldr	r5, [sp, #48]	; 0x30
   181ac:	ldr	r6, [sp, #52]	; 0x34
   181b0:	cmp	r1, #0
   181b4:	beq	18280 <__assert_fail@plt+0x707c>
   181b8:	str	r3, [sp, #4]
   181bc:	str	r2, [sp]
   181c0:	mov	r3, r1
   181c4:	movw	r2, #45660	; 0xb25c
   181c8:	movt	r2, #1
   181cc:	mov	r1, #1
   181d0:	bl	11144 <__fprintf_chk@plt>
   181d4:	mov	r2, #5
   181d8:	movw	r1, #45680	; 0xb270
   181dc:	movt	r1, #1
   181e0:	mov	r0, #0
   181e4:	bl	10fc4 <dcgettext@plt>
   181e8:	movw	r3, #2022	; 0x7e6
   181ec:	str	r3, [sp]
   181f0:	mov	r3, r0
   181f4:	movw	r2, #46408	; 0xb548
   181f8:	movt	r2, #1
   181fc:	mov	r1, #1
   18200:	mov	r0, r4
   18204:	bl	11144 <__fprintf_chk@plt>
   18208:	mov	r1, r4
   1820c:	mov	r0, #10
   18210:	bl	10fb8 <fputc_unlocked@plt>
   18214:	mov	r2, #5
   18218:	movw	r1, #45684	; 0xb274
   1821c:	movt	r1, #1
   18220:	mov	r0, #0
   18224:	bl	10fc4 <dcgettext@plt>
   18228:	movw	r3, #45856	; 0xb320
   1822c:	movt	r3, #1
   18230:	mov	r2, r0
   18234:	mov	r1, #1
   18238:	mov	r0, r4
   1823c:	bl	11144 <__fprintf_chk@plt>
   18240:	mov	r1, r4
   18244:	mov	r0, #10
   18248:	bl	10fb8 <fputc_unlocked@plt>
   1824c:	cmp	r6, #9
   18250:	ldrls	pc, [pc, r6, lsl #2]
   18254:	b	18558 <__assert_fail@plt+0x7354>
   18258:	andeq	r8, r1, r4, asr #5
   1825c:	muleq	r1, ip, r2
   18260:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18264:	andeq	r8, r1, ip, lsl #6
   18268:	andeq	r8, r1, r8, asr #6
   1826c:	andeq	r8, r1, ip, lsl #7
   18270:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18274:	andeq	r8, r1, ip, lsr #8
   18278:	andeq	r8, r1, r8, lsl #9
   1827c:	andeq	r8, r1, ip, ror #9
   18280:	str	r3, [sp]
   18284:	mov	r3, r2
   18288:	movw	r2, #45672	; 0xb268
   1828c:	movt	r2, #1
   18290:	mov	r1, #1
   18294:	bl	11144 <__fprintf_chk@plt>
   18298:	b	181d4 <__assert_fail@plt+0x6fd0>
   1829c:	mov	r2, #5
   182a0:	movw	r1, #45892	; 0xb344
   182a4:	movt	r1, #1
   182a8:	mov	r0, #0
   182ac:	bl	10fc4 <dcgettext@plt>
   182b0:	ldr	r3, [r5]
   182b4:	mov	r2, r0
   182b8:	mov	r1, #1
   182bc:	mov	r0, r4
   182c0:	bl	11144 <__fprintf_chk@plt>
   182c4:	add	sp, sp, #32
   182c8:	ldrd	r4, [sp]
   182cc:	ldr	r6, [sp, #8]
   182d0:	add	sp, sp, #12
   182d4:	pop	{pc}		; (ldr pc, [sp], #4)
   182d8:	mov	r2, #5
   182dc:	movw	r1, #45908	; 0xb354
   182e0:	movt	r1, #1
   182e4:	mov	r0, #0
   182e8:	bl	10fc4 <dcgettext@plt>
   182ec:	ldr	r3, [r5, #4]
   182f0:	str	r3, [sp]
   182f4:	ldr	r3, [r5]
   182f8:	mov	r2, r0
   182fc:	mov	r1, #1
   18300:	mov	r0, r4
   18304:	bl	11144 <__fprintf_chk@plt>
   18308:	b	182c4 <__assert_fail@plt+0x70c0>
   1830c:	mov	r2, #5
   18310:	movw	r1, #45932	; 0xb36c
   18314:	movt	r1, #1
   18318:	mov	r0, #0
   1831c:	bl	10fc4 <dcgettext@plt>
   18320:	ldr	r3, [r5, #8]
   18324:	str	r3, [sp, #4]
   18328:	ldr	r3, [r5, #4]
   1832c:	str	r3, [sp]
   18330:	ldr	r3, [r5]
   18334:	mov	r2, r0
   18338:	mov	r1, #1
   1833c:	mov	r0, r4
   18340:	bl	11144 <__fprintf_chk@plt>
   18344:	b	182c4 <__assert_fail@plt+0x70c0>
   18348:	mov	r2, #5
   1834c:	movw	r1, #45960	; 0xb388
   18350:	movt	r1, #1
   18354:	mov	r0, #0
   18358:	bl	10fc4 <dcgettext@plt>
   1835c:	ldr	r3, [r5, #12]
   18360:	str	r3, [sp, #8]
   18364:	ldr	r3, [r5, #8]
   18368:	str	r3, [sp, #4]
   1836c:	ldr	r3, [r5, #4]
   18370:	str	r3, [sp]
   18374:	ldr	r3, [r5]
   18378:	mov	r2, r0
   1837c:	mov	r1, #1
   18380:	mov	r0, r4
   18384:	bl	11144 <__fprintf_chk@plt>
   18388:	b	182c4 <__assert_fail@plt+0x70c0>
   1838c:	mov	r2, #5
   18390:	movw	r1, #45992	; 0xb3a8
   18394:	movt	r1, #1
   18398:	mov	r0, #0
   1839c:	bl	10fc4 <dcgettext@plt>
   183a0:	ldr	r3, [r5, #16]
   183a4:	str	r3, [sp, #12]
   183a8:	ldr	r3, [r5, #12]
   183ac:	str	r3, [sp, #8]
   183b0:	ldr	r3, [r5, #8]
   183b4:	str	r3, [sp, #4]
   183b8:	ldr	r3, [r5, #4]
   183bc:	str	r3, [sp]
   183c0:	ldr	r3, [r5]
   183c4:	mov	r2, r0
   183c8:	mov	r1, #1
   183cc:	mov	r0, r4
   183d0:	bl	11144 <__fprintf_chk@plt>
   183d4:	b	182c4 <__assert_fail@plt+0x70c0>
   183d8:	mov	r2, #5
   183dc:	movw	r1, #46028	; 0xb3cc
   183e0:	movt	r1, #1
   183e4:	mov	r0, #0
   183e8:	bl	10fc4 <dcgettext@plt>
   183ec:	ldr	r3, [r5, #20]
   183f0:	str	r3, [sp, #16]
   183f4:	ldr	r3, [r5, #16]
   183f8:	str	r3, [sp, #12]
   183fc:	ldr	r3, [r5, #12]
   18400:	str	r3, [sp, #8]
   18404:	ldr	r3, [r5, #8]
   18408:	str	r3, [sp, #4]
   1840c:	ldr	r3, [r5, #4]
   18410:	str	r3, [sp]
   18414:	ldr	r3, [r5]
   18418:	mov	r2, r0
   1841c:	mov	r1, #1
   18420:	mov	r0, r4
   18424:	bl	11144 <__fprintf_chk@plt>
   18428:	b	182c4 <__assert_fail@plt+0x70c0>
   1842c:	mov	r2, #5
   18430:	movw	r1, #46068	; 0xb3f4
   18434:	movt	r1, #1
   18438:	mov	r0, #0
   1843c:	bl	10fc4 <dcgettext@plt>
   18440:	ldr	r3, [r5, #24]
   18444:	str	r3, [sp, #20]
   18448:	ldr	r3, [r5, #20]
   1844c:	str	r3, [sp, #16]
   18450:	ldr	r3, [r5, #16]
   18454:	str	r3, [sp, #12]
   18458:	ldr	r3, [r5, #12]
   1845c:	str	r3, [sp, #8]
   18460:	ldr	r3, [r5, #8]
   18464:	str	r3, [sp, #4]
   18468:	ldr	r3, [r5, #4]
   1846c:	str	r3, [sp]
   18470:	ldr	r3, [r5]
   18474:	mov	r2, r0
   18478:	mov	r1, #1
   1847c:	mov	r0, r4
   18480:	bl	11144 <__fprintf_chk@plt>
   18484:	b	182c4 <__assert_fail@plt+0x70c0>
   18488:	mov	r2, #5
   1848c:	movw	r1, #46112	; 0xb420
   18490:	movt	r1, #1
   18494:	mov	r0, #0
   18498:	bl	10fc4 <dcgettext@plt>
   1849c:	ldr	r3, [r5, #28]
   184a0:	str	r3, [sp, #24]
   184a4:	ldr	r3, [r5, #24]
   184a8:	str	r3, [sp, #20]
   184ac:	ldr	r3, [r5, #20]
   184b0:	str	r3, [sp, #16]
   184b4:	ldr	r3, [r5, #16]
   184b8:	str	r3, [sp, #12]
   184bc:	ldr	r3, [r5, #12]
   184c0:	str	r3, [sp, #8]
   184c4:	ldr	r3, [r5, #8]
   184c8:	str	r3, [sp, #4]
   184cc:	ldr	r3, [r5, #4]
   184d0:	str	r3, [sp]
   184d4:	ldr	r3, [r5]
   184d8:	mov	r2, r0
   184dc:	mov	r1, #1
   184e0:	mov	r0, r4
   184e4:	bl	11144 <__fprintf_chk@plt>
   184e8:	b	182c4 <__assert_fail@plt+0x70c0>
   184ec:	mov	r2, #5
   184f0:	movw	r1, #46160	; 0xb450
   184f4:	movt	r1, #1
   184f8:	mov	r0, #0
   184fc:	bl	10fc4 <dcgettext@plt>
   18500:	ldr	r3, [r5, #32]
   18504:	str	r3, [sp, #28]
   18508:	ldr	r3, [r5, #28]
   1850c:	str	r3, [sp, #24]
   18510:	ldr	r3, [r5, #24]
   18514:	str	r3, [sp, #20]
   18518:	ldr	r3, [r5, #20]
   1851c:	str	r3, [sp, #16]
   18520:	ldr	r3, [r5, #16]
   18524:	str	r3, [sp, #12]
   18528:	ldr	r3, [r5, #12]
   1852c:	str	r3, [sp, #8]
   18530:	ldr	r3, [r5, #8]
   18534:	str	r3, [sp, #4]
   18538:	ldr	r3, [r5, #4]
   1853c:	str	r3, [sp]
   18540:	ldr	r3, [r5]
   18544:	mov	r2, r0
   18548:	mov	r1, #1
   1854c:	mov	r0, r4
   18550:	bl	11144 <__fprintf_chk@plt>
   18554:	b	182c4 <__assert_fail@plt+0x70c0>
   18558:	mov	r2, #5
   1855c:	movw	r1, #46212	; 0xb484
   18560:	movt	r1, #1
   18564:	mov	r0, #0
   18568:	bl	10fc4 <dcgettext@plt>
   1856c:	ldr	r3, [r5, #32]
   18570:	str	r3, [sp, #28]
   18574:	ldr	r3, [r5, #28]
   18578:	str	r3, [sp, #24]
   1857c:	ldr	r3, [r5, #24]
   18580:	str	r3, [sp, #20]
   18584:	ldr	r3, [r5, #20]
   18588:	str	r3, [sp, #16]
   1858c:	ldr	r3, [r5, #16]
   18590:	str	r3, [sp, #12]
   18594:	ldr	r3, [r5, #12]
   18598:	str	r3, [sp, #8]
   1859c:	ldr	r3, [r5, #8]
   185a0:	str	r3, [sp, #4]
   185a4:	ldr	r3, [r5, #4]
   185a8:	str	r3, [sp]
   185ac:	ldr	r3, [r5]
   185b0:	mov	r2, r0
   185b4:	mov	r1, #1
   185b8:	mov	r0, r4
   185bc:	bl	11144 <__fprintf_chk@plt>
   185c0:	b	182c4 <__assert_fail@plt+0x70c0>
   185c4:	strd	r4, [sp, #-12]!
   185c8:	str	lr, [sp, #8]
   185cc:	sub	sp, sp, #12
   185d0:	ldr	r5, [sp, #24]
   185d4:	ldr	ip, [r5]
   185d8:	cmp	ip, #0
   185dc:	beq	18614 <__assert_fail@plt+0x7410>
   185e0:	mov	lr, r5
   185e4:	mov	ip, #0
   185e8:	add	ip, ip, #1
   185ec:	ldr	r4, [lr, #4]!
   185f0:	cmp	r4, #0
   185f4:	bne	185e8 <__assert_fail@plt+0x73e4>
   185f8:	str	ip, [sp, #4]
   185fc:	str	r5, [sp]
   18600:	bl	18194 <__assert_fail@plt+0x6f90>
   18604:	add	sp, sp, #12
   18608:	ldrd	r4, [sp]
   1860c:	add	sp, sp, #8
   18610:	pop	{pc}		; (ldr pc, [sp], #4)
   18614:	mov	ip, #0
   18618:	b	185f8 <__assert_fail@plt+0x73f4>
   1861c:	strd	r4, [sp, #-12]!
   18620:	str	lr, [sp, #8]
   18624:	sub	sp, sp, #52	; 0x34
   18628:	ldr	r5, [sp, #64]	; 0x40
   1862c:	add	r4, sp, #8
   18630:	mov	ip, #0
   18634:	ldr	lr, [r5], #4
   18638:	str	lr, [r4], #4
   1863c:	cmp	lr, #0
   18640:	beq	18650 <__assert_fail@plt+0x744c>
   18644:	add	ip, ip, #1
   18648:	cmp	ip, #10
   1864c:	bne	18634 <__assert_fail@plt+0x7430>
   18650:	str	ip, [sp, #4]
   18654:	add	ip, sp, #8
   18658:	str	ip, [sp]
   1865c:	bl	18194 <__assert_fail@plt+0x6f90>
   18660:	add	sp, sp, #52	; 0x34
   18664:	ldrd	r4, [sp]
   18668:	add	sp, sp, #8
   1866c:	pop	{pc}		; (ldr pc, [sp], #4)
   18670:	push	{r3}		; (str r3, [sp, #-4]!)
   18674:	push	{lr}		; (str lr, [sp, #-4]!)
   18678:	sub	sp, sp, #16
   1867c:	add	r3, sp, #24
   18680:	str	r3, [sp, #12]
   18684:	str	r3, [sp]
   18688:	ldr	r3, [sp, #20]
   1868c:	bl	1861c <__assert_fail@plt+0x7418>
   18690:	add	sp, sp, #16
   18694:	pop	{lr}		; (ldr lr, [sp], #4)
   18698:	add	sp, sp, #4
   1869c:	bx	lr
   186a0:	str	r4, [sp, #-8]!
   186a4:	str	lr, [sp, #4]
   186a8:	movw	r3, #49540	; 0xc184
   186ac:	movt	r3, #2
   186b0:	ldr	r1, [r3]
   186b4:	mov	r0, #10
   186b8:	bl	10fb8 <fputc_unlocked@plt>
   186bc:	mov	r2, #5
   186c0:	movw	r1, #46272	; 0xb4c0
   186c4:	movt	r1, #1
   186c8:	mov	r0, #0
   186cc:	bl	10fc4 <dcgettext@plt>
   186d0:	movw	r2, #46292	; 0xb4d4
   186d4:	movt	r2, #1
   186d8:	mov	r1, r0
   186dc:	mov	r0, #1
   186e0:	bl	11120 <__printf_chk@plt>
   186e4:	mov	r2, #5
   186e8:	movw	r1, #46316	; 0xb4ec
   186ec:	movt	r1, #1
   186f0:	mov	r0, #0
   186f4:	bl	10fc4 <dcgettext@plt>
   186f8:	movw	r3, #44372	; 0xad54
   186fc:	movt	r3, #1
   18700:	movw	r2, #44412	; 0xad7c
   18704:	movt	r2, #1
   18708:	mov	r1, r0
   1870c:	mov	r0, #1
   18710:	bl	11120 <__printf_chk@plt>
   18714:	mov	r2, #5
   18718:	movw	r1, #46336	; 0xb500
   1871c:	movt	r1, #1
   18720:	mov	r0, #0
   18724:	bl	10fc4 <dcgettext@plt>
   18728:	movw	r2, #46376	; 0xb528
   1872c:	movt	r2, #1
   18730:	mov	r1, r0
   18734:	mov	r0, #1
   18738:	bl	11120 <__printf_chk@plt>
   1873c:	ldr	r4, [sp]
   18740:	add	sp, sp, #4
   18744:	pop	{pc}		; (ldr pc, [sp], #4)
   18748:	str	r4, [sp, #-8]!
   1874c:	str	lr, [sp, #4]
   18750:	bl	19540 <__assert_fail@plt+0x833c>
   18754:	cmp	r0, #0
   18758:	beq	18768 <__assert_fail@plt+0x7564>
   1875c:	ldr	r4, [sp]
   18760:	add	sp, sp, #4
   18764:	pop	{pc}		; (ldr pc, [sp], #4)
   18768:	bl	18bdc <__assert_fail@plt+0x79d8>
   1876c:	str	r4, [sp, #-8]!
   18770:	str	lr, [sp, #4]
   18774:	bl	19540 <__assert_fail@plt+0x833c>
   18778:	cmp	r0, #0
   1877c:	beq	1878c <__assert_fail@plt+0x7588>
   18780:	ldr	r4, [sp]
   18784:	add	sp, sp, #4
   18788:	pop	{pc}		; (ldr pc, [sp], #4)
   1878c:	bl	18bdc <__assert_fail@plt+0x79d8>
   18790:	str	r4, [sp, #-8]!
   18794:	str	lr, [sp, #4]
   18798:	bl	18748 <__assert_fail@plt+0x7544>
   1879c:	ldr	r4, [sp]
   187a0:	add	sp, sp, #4
   187a4:	pop	{pc}		; (ldr pc, [sp], #4)
   187a8:	strd	r4, [sp, #-16]!
   187ac:	str	r6, [sp, #8]
   187b0:	str	lr, [sp, #12]
   187b4:	mov	r5, r0
   187b8:	mov	r4, r1
   187bc:	bl	1957c <__assert_fail@plt+0x8378>
   187c0:	cmp	r0, #0
   187c4:	beq	187d8 <__assert_fail@plt+0x75d4>
   187c8:	ldrd	r4, [sp]
   187cc:	ldr	r6, [sp, #8]
   187d0:	add	sp, sp, #12
   187d4:	pop	{pc}		; (ldr pc, [sp], #4)
   187d8:	adds	r4, r4, #0
   187dc:	movne	r4, #1
   187e0:	cmp	r5, #0
   187e4:	moveq	r4, #1
   187e8:	cmp	r4, #0
   187ec:	beq	187c8 <__assert_fail@plt+0x75c4>
   187f0:	bl	18bdc <__assert_fail@plt+0x79d8>
   187f4:	str	r4, [sp, #-8]!
   187f8:	str	lr, [sp, #4]
   187fc:	cmp	r1, #0
   18800:	orreq	r1, r1, #1
   18804:	bl	1957c <__assert_fail@plt+0x8378>
   18808:	cmp	r0, #0
   1880c:	beq	1881c <__assert_fail@plt+0x7618>
   18810:	ldr	r4, [sp]
   18814:	add	sp, sp, #4
   18818:	pop	{pc}		; (ldr pc, [sp], #4)
   1881c:	bl	18bdc <__assert_fail@plt+0x79d8>
   18820:	strd	r4, [sp, #-16]!
   18824:	str	r6, [sp, #8]
   18828:	str	lr, [sp, #12]
   1882c:	mov	r4, r0
   18830:	mov	r6, r1
   18834:	mov	r5, r2
   18838:	bl	19718 <__assert_fail@plt+0x8514>
   1883c:	cmp	r0, #0
   18840:	beq	18854 <__assert_fail@plt+0x7650>
   18844:	ldrd	r4, [sp]
   18848:	ldr	r6, [sp, #8]
   1884c:	add	sp, sp, #12
   18850:	pop	{pc}		; (ldr pc, [sp], #4)
   18854:	cmp	r4, #0
   18858:	beq	18868 <__assert_fail@plt+0x7664>
   1885c:	cmp	r6, #0
   18860:	cmpne	r5, #0
   18864:	beq	18844 <__assert_fail@plt+0x7640>
   18868:	bl	18bdc <__assert_fail@plt+0x79d8>
   1886c:	str	r4, [sp, #-8]!
   18870:	str	lr, [sp, #4]
   18874:	bl	18820 <__assert_fail@plt+0x761c>
   18878:	ldr	r4, [sp]
   1887c:	add	sp, sp, #4
   18880:	pop	{pc}		; (ldr pc, [sp], #4)
   18884:	str	r4, [sp, #-8]!
   18888:	str	lr, [sp, #4]
   1888c:	mov	ip, r1
   18890:	mov	r3, r2
   18894:	cmp	r2, #0
   18898:	cmpne	r1, #0
   1889c:	moveq	r3, #1
   188a0:	moveq	ip, r3
   188a4:	mov	r2, r3
   188a8:	mov	r1, ip
   188ac:	bl	19718 <__assert_fail@plt+0x8514>
   188b0:	cmp	r0, #0
   188b4:	beq	188c4 <__assert_fail@plt+0x76c0>
   188b8:	ldr	r4, [sp]
   188bc:	add	sp, sp, #4
   188c0:	pop	{pc}		; (ldr pc, [sp], #4)
   188c4:	bl	18bdc <__assert_fail@plt+0x79d8>
   188c8:	str	r4, [sp, #-8]!
   188cc:	str	lr, [sp, #4]
   188d0:	mov	r2, r1
   188d4:	mov	r1, r0
   188d8:	mov	r0, #0
   188dc:	bl	18820 <__assert_fail@plt+0x761c>
   188e0:	ldr	r4, [sp]
   188e4:	add	sp, sp, #4
   188e8:	pop	{pc}		; (ldr pc, [sp], #4)
   188ec:	str	r4, [sp, #-8]!
   188f0:	str	lr, [sp, #4]
   188f4:	mov	r2, r1
   188f8:	mov	r1, r0
   188fc:	mov	r0, #0
   18900:	bl	18884 <__assert_fail@plt+0x7680>
   18904:	ldr	r4, [sp]
   18908:	add	sp, sp, #4
   1890c:	pop	{pc}		; (ldr pc, [sp], #4)
   18910:	strd	r4, [sp, #-16]!
   18914:	str	r6, [sp, #8]
   18918:	str	lr, [sp, #12]
   1891c:	mov	r5, r1
   18920:	ldr	r4, [r1]
   18924:	cmp	r0, #0
   18928:	beq	18958 <__assert_fail@plt+0x7754>
   1892c:	lsr	r3, r4, #1
   18930:	add	r3, r3, #1
   18934:	adds	r4, r4, r3
   18938:	bcs	18974 <__assert_fail@plt+0x7770>
   1893c:	mov	r1, r4
   18940:	bl	18820 <__assert_fail@plt+0x761c>
   18944:	str	r4, [r5]
   18948:	ldrd	r4, [sp]
   1894c:	ldr	r6, [sp, #8]
   18950:	add	sp, sp, #12
   18954:	pop	{pc}		; (ldr pc, [sp], #4)
   18958:	cmp	r4, #0
   1895c:	bne	1893c <__assert_fail@plt+0x7738>
   18960:	mov	r4, #64	; 0x40
   18964:	udiv	r4, r4, r2
   18968:	cmp	r2, #64	; 0x40
   1896c:	addhi	r4, r4, #1
   18970:	b	1893c <__assert_fail@plt+0x7738>
   18974:	bl	18bdc <__assert_fail@plt+0x79d8>
   18978:	str	r4, [sp, #-8]!
   1897c:	str	lr, [sp, #4]
   18980:	mov	r2, #1
   18984:	bl	18910 <__assert_fail@plt+0x770c>
   18988:	ldr	r4, [sp]
   1898c:	add	sp, sp, #4
   18990:	pop	{pc}		; (ldr pc, [sp], #4)
   18994:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18998:	strd	r6, [sp, #8]
   1899c:	str	r8, [sp, #16]
   189a0:	str	lr, [sp, #20]
   189a4:	mov	r5, r1
   189a8:	ldr	lr, [sp, #24]
   189ac:	ldr	ip, [r1]
   189b0:	asr	r4, ip, #1
   189b4:	adds	r4, ip, r4
   189b8:	movvs	r1, #1
   189bc:	movvc	r1, #0
   189c0:	cmp	r1, #0
   189c4:	mvnne	r4, #-2147483648	; 0x80000000
   189c8:	mvn	r8, r3
   189cc:	lsr	r8, r8, #31
   189d0:	cmp	r3, r4
   189d4:	movge	r1, #0
   189d8:	andlt	r1, r8, #1
   189dc:	cmp	r1, #0
   189e0:	movne	r4, r3
   189e4:	smull	r6, r7, r4, lr
   189e8:	asr	r1, r6, #31
   189ec:	cmp	r1, r7
   189f0:	bne	18a08 <__assert_fail@plt+0x7804>
   189f4:	mov	r1, r6
   189f8:	cmp	r6, #63	; 0x3f
   189fc:	movle	r1, #64	; 0x40
   18a00:	ble	18a0c <__assert_fail@plt+0x7808>
   18a04:	b	18a18 <__assert_fail@plt+0x7814>
   18a08:	mvn	r1, #-2147483648	; 0x80000000
   18a0c:	sdiv	r4, r1, lr
   18a10:	mls	r6, lr, r4, r1
   18a14:	sub	r1, r1, r6
   18a18:	cmp	r0, #0
   18a1c:	moveq	r6, #0
   18a20:	streq	r6, [r5]
   18a24:	sub	r6, r4, ip
   18a28:	cmp	r6, r2
   18a2c:	bge	18a64 <__assert_fail@plt+0x7860>
   18a30:	adds	r2, ip, r2
   18a34:	mov	r4, r2
   18a38:	bvs	18a80 <__assert_fail@plt+0x787c>
   18a3c:	cmp	r2, r3
   18a40:	movle	r3, #0
   18a44:	andgt	r3, r8, #1
   18a48:	cmp	r3, #0
   18a4c:	bne	18a80 <__assert_fail@plt+0x787c>
   18a50:	smull	r2, r3, r2, lr
   18a54:	asr	ip, r2, #31
   18a58:	mov	r1, r2
   18a5c:	cmp	ip, r3
   18a60:	bne	18a80 <__assert_fail@plt+0x787c>
   18a64:	bl	187a8 <__assert_fail@plt+0x75a4>
   18a68:	str	r4, [r5]
   18a6c:	ldrd	r4, [sp]
   18a70:	ldrd	r6, [sp, #8]
   18a74:	ldr	r8, [sp, #16]
   18a78:	add	sp, sp, #20
   18a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a80:	bl	18bdc <__assert_fail@plt+0x79d8>
   18a84:	str	r4, [sp, #-8]!
   18a88:	str	lr, [sp, #4]
   18a8c:	bl	194cc <__assert_fail@plt+0x82c8>
   18a90:	cmp	r0, #0
   18a94:	beq	18aa4 <__assert_fail@plt+0x78a0>
   18a98:	ldr	r4, [sp]
   18a9c:	add	sp, sp, #4
   18aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa4:	bl	18bdc <__assert_fail@plt+0x79d8>
   18aa8:	str	r4, [sp, #-8]!
   18aac:	str	lr, [sp, #4]
   18ab0:	mov	r1, #1
   18ab4:	bl	18a84 <__assert_fail@plt+0x7880>
   18ab8:	ldr	r4, [sp]
   18abc:	add	sp, sp, #4
   18ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ac4:	str	r4, [sp, #-8]!
   18ac8:	str	lr, [sp, #4]
   18acc:	bl	194cc <__assert_fail@plt+0x82c8>
   18ad0:	cmp	r0, #0
   18ad4:	beq	18ae4 <__assert_fail@plt+0x78e0>
   18ad8:	ldr	r4, [sp]
   18adc:	add	sp, sp, #4
   18ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ae4:	bl	18bdc <__assert_fail@plt+0x79d8>
   18ae8:	str	r4, [sp, #-8]!
   18aec:	str	lr, [sp, #4]
   18af0:	mov	r1, #1
   18af4:	bl	18ac4 <__assert_fail@plt+0x78c0>
   18af8:	ldr	r4, [sp]
   18afc:	add	sp, sp, #4
   18b00:	pop	{pc}		; (ldr pc, [sp], #4)
   18b04:	strd	r4, [sp, #-16]!
   18b08:	str	r6, [sp, #8]
   18b0c:	str	lr, [sp, #12]
   18b10:	mov	r5, r0
   18b14:	mov	r4, r1
   18b18:	mov	r0, r1
   18b1c:	bl	18748 <__assert_fail@plt+0x7544>
   18b20:	mov	r2, r4
   18b24:	mov	r1, r5
   18b28:	bl	10f70 <memcpy@plt>
   18b2c:	ldrd	r4, [sp]
   18b30:	ldr	r6, [sp, #8]
   18b34:	add	sp, sp, #12
   18b38:	pop	{pc}		; (ldr pc, [sp], #4)
   18b3c:	strd	r4, [sp, #-16]!
   18b40:	str	r6, [sp, #8]
   18b44:	str	lr, [sp, #12]
   18b48:	mov	r5, r0
   18b4c:	mov	r4, r1
   18b50:	mov	r0, r1
   18b54:	bl	1876c <__assert_fail@plt+0x7568>
   18b58:	mov	r2, r4
   18b5c:	mov	r1, r5
   18b60:	bl	10f70 <memcpy@plt>
   18b64:	ldrd	r4, [sp]
   18b68:	ldr	r6, [sp, #8]
   18b6c:	add	sp, sp, #12
   18b70:	pop	{pc}		; (ldr pc, [sp], #4)
   18b74:	strd	r4, [sp, #-16]!
   18b78:	str	r6, [sp, #8]
   18b7c:	str	lr, [sp, #12]
   18b80:	mov	r5, r0
   18b84:	mov	r4, r1
   18b88:	add	r0, r1, #1
   18b8c:	bl	1876c <__assert_fail@plt+0x7568>
   18b90:	mov	r2, #0
   18b94:	strb	r2, [r0, r4]
   18b98:	mov	r2, r4
   18b9c:	mov	r1, r5
   18ba0:	bl	10f70 <memcpy@plt>
   18ba4:	ldrd	r4, [sp]
   18ba8:	ldr	r6, [sp, #8]
   18bac:	add	sp, sp, #12
   18bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bb4:	str	r4, [sp, #-8]!
   18bb8:	str	lr, [sp, #4]
   18bbc:	mov	r4, r0
   18bc0:	bl	110c0 <strlen@plt>
   18bc4:	add	r1, r0, #1
   18bc8:	mov	r0, r4
   18bcc:	bl	18b04 <__assert_fail@plt+0x7900>
   18bd0:	ldr	r4, [sp]
   18bd4:	add	sp, sp, #4
   18bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   18bdc:	str	r4, [sp, #-8]!
   18be0:	str	lr, [sp, #4]
   18be4:	movw	r3, #49444	; 0xc124
   18be8:	movt	r3, #2
   18bec:	ldr	r4, [r3]
   18bf0:	mov	r2, #5
   18bf4:	movw	r1, #46456	; 0xb578
   18bf8:	movt	r1, #1
   18bfc:	mov	r0, #0
   18c00:	bl	10fc4 <dcgettext@plt>
   18c04:	mov	r3, r0
   18c08:	movw	r2, #45376	; 0xb140
   18c0c:	movt	r2, #1
   18c10:	mov	r1, #0
   18c14:	mov	r0, r4
   18c18:	bl	1103c <error@plt>
   18c1c:	bl	111ec <abort@plt>
   18c20:	strd	r4, [sp, #-16]!
   18c24:	str	r6, [sp, #8]
   18c28:	str	lr, [sp, #12]
   18c2c:	movw	ip, #49540	; 0xc184
   18c30:	movt	ip, #2
   18c34:	mov	r3, r1
   18c38:	mov	r2, r0
   18c3c:	mov	r1, #1
   18c40:	ldr	r0, [ip]
   18c44:	bl	11078 <__vfprintf_chk@plt>
   18c48:	subs	r4, r0, #0
   18c4c:	blt	18c64 <__assert_fail@plt+0x7a60>
   18c50:	mov	r0, r4
   18c54:	ldrd	r4, [sp]
   18c58:	ldr	r6, [sp, #8]
   18c5c:	add	sp, sp, #12
   18c60:	pop	{pc}		; (ldr pc, [sp], #4)
   18c64:	movw	r3, #49540	; 0xc184
   18c68:	movt	r3, #2
   18c6c:	ldr	r0, [r3]
   18c70:	bl	10f58 <ferror@plt>
   18c74:	cmp	r0, #0
   18c78:	bne	18c50 <__assert_fail@plt+0x7a4c>
   18c7c:	movw	r3, #49444	; 0xc124
   18c80:	movt	r3, #2
   18c84:	ldr	r5, [r3]
   18c88:	bl	110d8 <__errno_location@plt>
   18c8c:	ldr	r6, [r0]
   18c90:	mov	r2, #5
   18c94:	movw	r1, #46476	; 0xb58c
   18c98:	movt	r1, #1
   18c9c:	mov	r0, #0
   18ca0:	bl	10fc4 <dcgettext@plt>
   18ca4:	mov	r2, r0
   18ca8:	mov	r1, r6
   18cac:	mov	r0, r5
   18cb0:	bl	1103c <error@plt>
   18cb4:	b	18c50 <__assert_fail@plt+0x7a4c>
   18cb8:	push	{r0, r1, r2, r3}
   18cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   18cc0:	sub	sp, sp, #12
   18cc4:	add	r1, sp, #20
   18cc8:	str	r1, [sp, #4]
   18ccc:	ldr	r0, [sp, #16]
   18cd0:	bl	18c20 <__assert_fail@plt+0x7a1c>
   18cd4:	add	sp, sp, #12
   18cd8:	pop	{lr}		; (ldr lr, [sp], #4)
   18cdc:	add	sp, sp, #16
   18ce0:	bx	lr
   18ce4:	strd	r4, [sp, #-16]!
   18ce8:	str	r6, [sp, #8]
   18cec:	str	lr, [sp, #12]
   18cf0:	mov	r5, r0
   18cf4:	mov	r3, r2
   18cf8:	mov	r2, r1
   18cfc:	mov	r1, #1
   18d00:	bl	11078 <__vfprintf_chk@plt>
   18d04:	subs	r4, r0, #0
   18d08:	blt	18d20 <__assert_fail@plt+0x7b1c>
   18d0c:	mov	r0, r4
   18d10:	ldrd	r4, [sp]
   18d14:	ldr	r6, [sp, #8]
   18d18:	add	sp, sp, #12
   18d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d20:	mov	r0, r5
   18d24:	bl	10f58 <ferror@plt>
   18d28:	cmp	r0, #0
   18d2c:	bne	18d0c <__assert_fail@plt+0x7b08>
   18d30:	movw	r3, #49444	; 0xc124
   18d34:	movt	r3, #2
   18d38:	ldr	r5, [r3]
   18d3c:	bl	110d8 <__errno_location@plt>
   18d40:	ldr	r6, [r0]
   18d44:	mov	r2, #5
   18d48:	movw	r1, #46476	; 0xb58c
   18d4c:	movt	r1, #1
   18d50:	mov	r0, #0
   18d54:	bl	10fc4 <dcgettext@plt>
   18d58:	mov	r2, r0
   18d5c:	mov	r1, r6
   18d60:	mov	r0, r5
   18d64:	bl	1103c <error@plt>
   18d68:	b	18d0c <__assert_fail@plt+0x7b08>
   18d6c:	push	{r1, r2, r3}
   18d70:	push	{lr}		; (str lr, [sp, #-4]!)
   18d74:	sub	sp, sp, #8
   18d78:	add	r2, sp, #16
   18d7c:	str	r2, [sp, #4]
   18d80:	ldr	r1, [sp, #12]
   18d84:	bl	18ce4 <__assert_fail@plt+0x7ae0>
   18d88:	add	sp, sp, #8
   18d8c:	pop	{lr}		; (ldr lr, [sp], #4)
   18d90:	add	sp, sp, #12
   18d94:	bx	lr
   18d98:	push	{lr}		; (str lr, [sp, #-4]!)
   18d9c:	sub	sp, sp, #20
   18da0:	movw	ip, #49444	; 0xc124
   18da4:	movt	ip, #2
   18da8:	ldr	r5, [ip]
   18dac:	sub	r0, r0, #1
   18db0:	cmp	r0, #3
   18db4:	ldrls	pc, [pc, r0, lsl #2]
   18db8:	b	18dd8 <__assert_fail@plt+0x7bd4>
   18dbc:	ldrdeq	r8, [r1], -ip
   18dc0:	andeq	r8, r1, ip, asr #27
   18dc4:	andeq	r8, r1, ip, asr #27
   18dc8:	andeq	r8, r1, r8, ror #27
   18dcc:	movw	r0, #46568	; 0xb5e8
   18dd0:	movt	r0, #1
   18dd4:	b	18df0 <__assert_fail@plt+0x7bec>
   18dd8:	bl	111ec <abort@plt>
   18ddc:	movw	r0, #46508	; 0xb5ac
   18de0:	movt	r0, #1
   18de4:	b	18df0 <__assert_fail@plt+0x7bec>
   18de8:	movw	r0, #46540	; 0xb5cc
   18dec:	movt	r0, #1
   18df0:	cmp	r1, #0
   18df4:	blt	18e38 <__assert_fail@plt+0x7c34>
   18df8:	ldr	r6, [r3, r1, lsl #4]
   18dfc:	movw	r4, #46608	; 0xb610
   18e00:	movt	r4, #1
   18e04:	mov	r2, #5
   18e08:	mov	r1, r0
   18e0c:	mov	r0, #0
   18e10:	bl	10fc4 <dcgettext@plt>
   18e14:	ldr	r3, [sp, #24]
   18e18:	str	r3, [sp, #4]
   18e1c:	str	r6, [sp]
   18e20:	mov	r3, r4
   18e24:	mov	r2, r0
   18e28:	mov	r1, #0
   18e2c:	mov	r0, r5
   18e30:	bl	1103c <error@plt>
   18e34:	bl	111ec <abort@plt>
   18e38:	movw	r4, #46608	; 0xb610
   18e3c:	movt	r4, #1
   18e40:	sub	r4, r4, r1
   18e44:	strb	r2, [sp, #12]
   18e48:	mov	r3, #0
   18e4c:	strb	r3, [sp, #13]
   18e50:	add	r6, sp, #12
   18e54:	b	18e04 <__assert_fail@plt+0x7c00>
   18e58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e5c:	strd	r6, [sp, #8]
   18e60:	strd	r8, [sp, #16]
   18e64:	strd	sl, [sp, #24]
   18e68:	str	lr, [sp, #32]
   18e6c:	sub	sp, sp, #12
   18e70:	str	r0, [sp, #4]
   18e74:	cmp	r2, #0
   18e78:	beq	18f74 <__assert_fail@plt+0x7d70>
   18e7c:	sub	ip, r2, #1
   18e80:	ldrd	r2, [r0]
   18e84:	mov	r0, #0
   18e88:	mov	r8, r1
   18e8c:	asr	r9, r1, #31
   18e90:	str	r1, [sp]
   18e94:	b	18ee4 <__assert_fail@plt+0x7ce0>
   18e98:	orrs	r4, r2, r3
   18e9c:	movne	lr, #1
   18ea0:	b	18ef4 <__assert_fail@plt+0x7cf0>
   18ea4:	mov	sl, r3
   18ea8:	ldr	fp, [sp]
   18eac:	umull	r6, r7, r1, r2
   18eb0:	mov	r4, r7
   18eb4:	mov	r5, #0
   18eb8:	umlal	r4, r5, sl, fp
   18ebc:	cmp	r5, #0
   18ec0:	bne	18f28 <__assert_fail@plt+0x7d24>
   18ec4:	cmp	lr, #0
   18ec8:	bne	18f40 <__assert_fail@plt+0x7d3c>
   18ecc:	mov	r2, r6
   18ed0:	mov	r3, r4
   18ed4:	orr	r0, r0, lr
   18ed8:	sub	ip, ip, #1
   18edc:	cmn	ip, #1
   18ee0:	beq	18f50 <__assert_fail@plt+0x7d4c>
   18ee4:	mov	lr, #0
   18ee8:	cmp	r8, #0
   18eec:	sbcs	r4, r9, #0
   18ef0:	blt	18e98 <__assert_fail@plt+0x7c94>
   18ef4:	cmp	r9, #0
   18ef8:	bne	18f14 <__assert_fail@plt+0x7d10>
   18efc:	cmp	r3, #0
   18f00:	bne	18ea4 <__assert_fail@plt+0x7ca0>
   18f04:	umull	r2, r3, r1, r2
   18f08:	mov	r6, r2
   18f0c:	mov	r4, r3
   18f10:	b	18ec4 <__assert_fail@plt+0x7cc0>
   18f14:	cmp	r3, #0
   18f18:	bne	18f28 <__assert_fail@plt+0x7d24>
   18f1c:	mov	sl, r9
   18f20:	mov	fp, r2
   18f24:	b	18eac <__assert_fail@plt+0x7ca8>
   18f28:	mul	r4, r1, r3
   18f2c:	mla	r4, r2, r9, r4
   18f30:	umull	r6, r7, r1, r2
   18f34:	add	r4, r4, r7
   18f38:	mov	lr, #1
   18f3c:	b	18ec4 <__assert_fail@plt+0x7cc0>
   18f40:	mvn	r2, #0
   18f44:	mvn	r3, #0
   18f48:	mov	lr, #1
   18f4c:	b	18ed4 <__assert_fail@plt+0x7cd0>
   18f50:	ldr	r1, [sp, #4]
   18f54:	strd	r2, [r1]
   18f58:	add	sp, sp, #12
   18f5c:	ldrd	r4, [sp]
   18f60:	ldrd	r6, [sp, #8]
   18f64:	ldrd	r8, [sp, #16]
   18f68:	ldrd	sl, [sp, #24]
   18f6c:	add	sp, sp, #32
   18f70:	pop	{pc}		; (ldr pc, [sp], #4)
   18f74:	mov	r0, #0
   18f78:	b	18f58 <__assert_fail@plt+0x7d54>
   18f7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18f80:	strd	r6, [sp, #8]
   18f84:	strd	r8, [sp, #16]
   18f88:	str	lr, [sp, #24]
   18f8c:	sub	sp, sp, #20
   18f90:	cmp	r2, #36	; 0x24
   18f94:	bhi	18fe8 <__assert_fail@plt+0x7de4>
   18f98:	mov	r5, r0
   18f9c:	mov	r6, r1
   18fa0:	mov	r7, r2
   18fa4:	mov	r9, r3
   18fa8:	cmp	r1, #0
   18fac:	addeq	r6, sp, #12
   18fb0:	bl	110d8 <__errno_location@plt>
   18fb4:	mov	r8, r0
   18fb8:	mov	r3, #0
   18fbc:	str	r3, [r0]
   18fc0:	ldrb	r4, [r5]
   18fc4:	bl	110a8 <__ctype_b_loc@plt>
   18fc8:	ldr	r1, [r0]
   18fcc:	mov	r2, r5
   18fd0:	lsl	r3, r4, #1
   18fd4:	ldrh	r3, [r1, r3]
   18fd8:	tst	r3, #8192	; 0x2000
   18fdc:	beq	19008 <__assert_fail@plt+0x7e04>
   18fe0:	ldrb	r4, [r2, #1]!
   18fe4:	b	18fd0 <__assert_fail@plt+0x7dcc>
   18fe8:	movw	r3, #46612	; 0xb614
   18fec:	movt	r3, #1
   18ff0:	mov	r2, #85	; 0x55
   18ff4:	movw	r1, #46624	; 0xb620
   18ff8:	movt	r1, #1
   18ffc:	movw	r0, #46640	; 0xb630
   19000:	movt	r0, #1
   19004:	bl	11204 <__assert_fail@plt>
   19008:	cmp	r4, #45	; 0x2d
   1900c:	moveq	r4, #4
   19010:	beq	191a4 <__assert_fail@plt+0x7fa0>
   19014:	mov	r3, #0
   19018:	mov	r2, r7
   1901c:	mov	r1, r6
   19020:	mov	r0, r5
   19024:	bl	10f7c <__strtoull_internal@plt>
   19028:	strd	r0, [sp]
   1902c:	ldr	r7, [r6]
   19030:	cmp	r7, r5
   19034:	beq	19058 <__assert_fail@plt+0x7e54>
   19038:	ldr	r3, [r8]
   1903c:	cmp	r3, #0
   19040:	beq	1917c <__assert_fail@plt+0x7f78>
   19044:	cmp	r3, #34	; 0x22
   19048:	moveq	r4, #1
   1904c:	beq	19180 <__assert_fail@plt+0x7f7c>
   19050:	mov	r4, #4
   19054:	b	191a4 <__assert_fail@plt+0x7fa0>
   19058:	ldr	r3, [sp, #48]	; 0x30
   1905c:	cmp	r3, #0
   19060:	beq	194bc <__assert_fail@plt+0x82b8>
   19064:	ldrb	r1, [r5]
   19068:	cmp	r1, #0
   1906c:	moveq	r4, #4
   19070:	beq	191a4 <__assert_fail@plt+0x7fa0>
   19074:	mov	r0, r3
   19078:	bl	110cc <strchr@plt>
   1907c:	cmp	r0, #0
   19080:	beq	194c4 <__assert_fail@plt+0x82c0>
   19084:	mov	r2, #1
   19088:	mov	r3, #0
   1908c:	strd	r2, [sp]
   19090:	ldrb	r5, [r7]
   19094:	mov	r4, #0
   19098:	mov	r1, r5
   1909c:	ldr	r0, [sp, #48]	; 0x30
   190a0:	bl	110cc <strchr@plt>
   190a4:	cmp	r0, #0
   190a8:	beq	191c0 <__assert_fail@plt+0x7fbc>
   190ac:	sub	r3, r5, #69	; 0x45
   190b0:	cmp	r3, #47	; 0x2f
   190b4:	ldrls	pc, [pc, r3, lsl #2]
   190b8:	b	1930c <__assert_fail@plt+0x8108>
   190bc:	ldrdeq	r9, [r1], -r0
   190c0:	andeq	r9, r1, ip, lsl #6
   190c4:	ldrdeq	r9, [r1], -r0
   190c8:	andeq	r9, r1, ip, lsl #6
   190cc:	andeq	r9, r1, ip, lsl #6
   190d0:	andeq	r9, r1, ip, lsl #6
   190d4:	ldrdeq	r9, [r1], -r0
   190d8:	andeq	r9, r1, ip, lsl #6
   190dc:	ldrdeq	r9, [r1], -r0
   190e0:	andeq	r9, r1, ip, lsl #6
   190e4:	andeq	r9, r1, ip, lsl #6
   190e8:	ldrdeq	r9, [r1], -r0
   190ec:	andeq	r9, r1, ip, lsl #6
   190f0:	andeq	r9, r1, ip, lsl #6
   190f4:	andeq	r9, r1, ip, lsl #6
   190f8:	ldrdeq	r9, [r1], -r0
   190fc:	andeq	r9, r1, ip, lsl #6
   19100:	andeq	r9, r1, ip, lsl #6
   19104:	andeq	r9, r1, ip, lsl #6
   19108:	andeq	r9, r1, ip, lsl #6
   1910c:	ldrdeq	r9, [r1], -r0
   19110:	ldrdeq	r9, [r1], -r0
   19114:	andeq	r9, r1, ip, lsl #6
   19118:	andeq	r9, r1, ip, lsl #6
   1911c:	andeq	r9, r1, ip, lsl #6
   19120:	andeq	r9, r1, ip, lsl #6
   19124:	andeq	r9, r1, ip, lsl #6
   19128:	andeq	r9, r1, ip, lsl #6
   1912c:	andeq	r9, r1, ip, lsl #6
   19130:	andeq	r9, r1, ip, lsl #6
   19134:	andeq	r9, r1, ip, lsl #6
   19138:	andeq	r9, r1, ip, lsl #6
   1913c:	andeq	r9, r1, ip, lsl #6
   19140:	andeq	r9, r1, ip, lsl #6
   19144:	ldrdeq	r9, [r1], -r0
   19148:	andeq	r9, r1, ip, lsl #6
   1914c:	andeq	r9, r1, ip, lsl #6
   19150:	andeq	r9, r1, ip, lsl #6
   19154:	ldrdeq	r9, [r1], -r0
   19158:	andeq	r9, r1, ip, lsl #6
   1915c:	ldrdeq	r9, [r1], -r0
   19160:	andeq	r9, r1, ip, lsl #6
   19164:	andeq	r9, r1, ip, lsl #6
   19168:	andeq	r9, r1, ip, lsl #6
   1916c:	andeq	r9, r1, ip, lsl #6
   19170:	andeq	r9, r1, ip, lsl #6
   19174:	andeq	r9, r1, ip, lsl #6
   19178:	ldrdeq	r9, [r1], -r0
   1917c:	mov	r4, #0
   19180:	ldr	r3, [sp, #48]	; 0x30
   19184:	cmp	r3, #0
   19188:	strdeq	r0, [r9]
   1918c:	beq	191a4 <__assert_fail@plt+0x7fa0>
   19190:	ldrb	r5, [r7]
   19194:	cmp	r5, #0
   19198:	bne	19098 <__assert_fail@plt+0x7e94>
   1919c:	ldrd	r2, [sp]
   191a0:	strd	r2, [r9]
   191a4:	mov	r0, r4
   191a8:	add	sp, sp, #20
   191ac:	ldrd	r4, [sp]
   191b0:	ldrd	r6, [sp, #8]
   191b4:	ldrd	r8, [sp, #16]
   191b8:	add	sp, sp, #24
   191bc:	pop	{pc}		; (ldr pc, [sp], #4)
   191c0:	ldrd	r2, [sp]
   191c4:	strd	r2, [r9]
   191c8:	orr	r4, r4, #2
   191cc:	b	191a4 <__assert_fail@plt+0x7fa0>
   191d0:	mov	r1, #48	; 0x30
   191d4:	ldr	r0, [sp, #48]	; 0x30
   191d8:	bl	110cc <strchr@plt>
   191dc:	cmp	r0, #0
   191e0:	beq	19318 <__assert_fail@plt+0x8114>
   191e4:	ldrb	r3, [r7, #1]
   191e8:	cmp	r3, #68	; 0x44
   191ec:	beq	19324 <__assert_fail@plt+0x8120>
   191f0:	cmp	r3, #105	; 0x69
   191f4:	beq	192f4 <__assert_fail@plt+0x80f0>
   191f8:	cmp	r3, #66	; 0x42
   191fc:	moveq	r7, #2
   19200:	movne	r7, #1
   19204:	moveq	r1, #1000	; 0x3e8
   19208:	movne	r1, #1024	; 0x400
   1920c:	sub	r5, r5, #66	; 0x42
   19210:	cmp	r5, #53	; 0x35
   19214:	ldrls	pc, [pc, r5, lsl #2]
   19218:	b	19488 <__assert_fail@plt+0x8284>
   1921c:	andeq	r9, r1, r8, ror r3
   19220:	andeq	r9, r1, r8, lsl #9
   19224:	andeq	r9, r1, r8, lsl #9
   19228:	andeq	r9, r1, r0, asr #7
   1922c:	andeq	r9, r1, r8, lsl #9
   19230:	ldrdeq	r9, [r1], -r0
   19234:	andeq	r9, r1, r8, lsl #9
   19238:	andeq	r9, r1, r8, lsl #9
   1923c:	andeq	r9, r1, r8, lsl #9
   19240:	andeq	r9, r1, r0, ror #7
   19244:	andeq	r9, r1, r8, lsl #9
   19248:	strdeq	r9, [r1], -r0
   1924c:	andeq	r9, r1, r8, lsl #9
   19250:	andeq	r9, r1, r8, lsl #9
   19254:	andeq	r9, r1, r0, lsl #8
   19258:	andeq	r9, r1, r8, lsl #9
   1925c:	andeq	r9, r1, r8, lsl #9
   19260:	andeq	r9, r1, r8, lsl #9
   19264:	andeq	r9, r1, r0, lsl r4
   19268:	andeq	r9, r1, r8, lsl #9
   1926c:	andeq	r9, r1, r8, lsl #9
   19270:	andeq	r9, r1, r8, lsl #9
   19274:	andeq	r9, r1, r8, lsl #9
   19278:	andeq	r9, r1, r8, ror #8
   1927c:	andeq	r9, r1, r8, ror r4
   19280:	andeq	r9, r1, r8, lsl #9
   19284:	andeq	r9, r1, r8, lsl #9
   19288:	andeq	r9, r1, r8, lsl #9
   1928c:	andeq	r9, r1, r8, lsl #9
   19290:	andeq	r9, r1, r8, lsl #9
   19294:	andeq	r9, r1, r8, lsl #9
   19298:	andeq	r9, r1, r8, lsl #9
   1929c:	andeq	r9, r1, r0, lsr r3
   192a0:	muleq	r1, r8, r4
   192a4:	andeq	r9, r1, r8, lsl #9
   192a8:	andeq	r9, r1, r8, lsl #9
   192ac:	andeq	r9, r1, r8, lsl #9
   192b0:	ldrdeq	r9, [r1], -r0
   192b4:	andeq	r9, r1, r8, lsl #9
   192b8:	andeq	r9, r1, r8, lsl #9
   192bc:	andeq	r9, r1, r8, lsl #9
   192c0:	andeq	r9, r1, r0, ror #7
   192c4:	andeq	r9, r1, r8, lsl #9
   192c8:	strdeq	r9, [r1], -r0
   192cc:	andeq	r9, r1, r8, lsl #9
   192d0:	andeq	r9, r1, r8, lsl #9
   192d4:	andeq	r9, r1, r8, lsl #9
   192d8:	andeq	r9, r1, r8, lsl #9
   192dc:	andeq	r9, r1, r8, lsl #9
   192e0:	andeq	r9, r1, r8, lsl #9
   192e4:	andeq	r9, r1, r0, lsl r4
   192e8:	andeq	r9, r1, r8, lsl #9
   192ec:	andeq	r9, r1, r8, lsl #9
   192f0:	andeq	r9, r1, r0, lsr #8
   192f4:	ldrb	r3, [r7, #2]
   192f8:	cmp	r3, #66	; 0x42
   192fc:	movne	r7, #1
   19300:	moveq	r7, #3
   19304:	mov	r1, #1024	; 0x400
   19308:	b	1920c <__assert_fail@plt+0x8008>
   1930c:	mov	r7, #1
   19310:	mov	r1, #1024	; 0x400
   19314:	b	1920c <__assert_fail@plt+0x8008>
   19318:	mov	r7, #1
   1931c:	mov	r1, #1024	; 0x400
   19320:	b	1920c <__assert_fail@plt+0x8008>
   19324:	mov	r7, #2
   19328:	mov	r1, #1000	; 0x3e8
   1932c:	b	1920c <__assert_fail@plt+0x8008>
   19330:	ldr	r3, [sp]
   19334:	ldr	ip, [sp, #4]
   19338:	lsl	r2, ip, #9
   1933c:	orr	r2, r2, r3, lsr #23
   19340:	lsl	r3, r3, #9
   19344:	mov	r0, #0
   19348:	mov	r1, r0
   1934c:	lsr	r0, ip, #23
   19350:	orrs	r1, r0, r1
   19354:	streq	r3, [sp]
   19358:	streq	r2, [sp, #4]
   1935c:	moveq	r0, #0
   19360:	beq	1949c <__assert_fail@plt+0x8298>
   19364:	mvn	r2, #0
   19368:	mvn	r3, #0
   1936c:	strd	r2, [sp]
   19370:	mov	r0, #1
   19374:	b	1949c <__assert_fail@plt+0x8298>
   19378:	ldr	r3, [sp]
   1937c:	ldr	ip, [sp, #4]
   19380:	lsl	r2, ip, #10
   19384:	orr	r2, r2, r3, lsr #22
   19388:	lsl	r3, r3, #10
   1938c:	mov	r0, #0
   19390:	mov	r1, r0
   19394:	lsr	r0, ip, #22
   19398:	orrs	r1, r0, r1
   1939c:	streq	r3, [sp]
   193a0:	streq	r2, [sp, #4]
   193a4:	moveq	r0, #0
   193a8:	beq	1949c <__assert_fail@plt+0x8298>
   193ac:	mvn	r2, #0
   193b0:	mvn	r3, #0
   193b4:	strd	r2, [sp]
   193b8:	mov	r0, #1
   193bc:	b	1949c <__assert_fail@plt+0x8298>
   193c0:	mov	r2, #6
   193c4:	mov	r0, sp
   193c8:	bl	18e58 <__assert_fail@plt+0x7c54>
   193cc:	b	1949c <__assert_fail@plt+0x8298>
   193d0:	mov	r2, #3
   193d4:	mov	r0, sp
   193d8:	bl	18e58 <__assert_fail@plt+0x7c54>
   193dc:	b	1949c <__assert_fail@plt+0x8298>
   193e0:	mov	r2, #1
   193e4:	mov	r0, sp
   193e8:	bl	18e58 <__assert_fail@plt+0x7c54>
   193ec:	b	1949c <__assert_fail@plt+0x8298>
   193f0:	mov	r2, #2
   193f4:	mov	r0, sp
   193f8:	bl	18e58 <__assert_fail@plt+0x7c54>
   193fc:	b	1949c <__assert_fail@plt+0x8298>
   19400:	mov	r2, #5
   19404:	mov	r0, sp
   19408:	bl	18e58 <__assert_fail@plt+0x7c54>
   1940c:	b	1949c <__assert_fail@plt+0x8298>
   19410:	mov	r2, #4
   19414:	mov	r0, sp
   19418:	bl	18e58 <__assert_fail@plt+0x7c54>
   1941c:	b	1949c <__assert_fail@plt+0x8298>
   19420:	ldr	r3, [sp]
   19424:	ldr	r2, [sp, #4]
   19428:	adds	r3, r3, r3
   1942c:	adc	r2, r2, r2
   19430:	mov	r1, #0
   19434:	mov	r0, r1
   19438:	ldr	r1, [sp, #4]
   1943c:	lsr	r1, r1, #31
   19440:	orrs	r1, r1, r0
   19444:	streq	r3, [sp]
   19448:	streq	r2, [sp, #4]
   1944c:	moveq	r0, #0
   19450:	beq	1949c <__assert_fail@plt+0x8298>
   19454:	mvn	r2, #0
   19458:	mvn	r3, #0
   1945c:	strd	r2, [sp]
   19460:	mov	r0, #1
   19464:	b	1949c <__assert_fail@plt+0x8298>
   19468:	mov	r2, #8
   1946c:	mov	r0, sp
   19470:	bl	18e58 <__assert_fail@plt+0x7c54>
   19474:	b	1949c <__assert_fail@plt+0x8298>
   19478:	mov	r2, #7
   1947c:	mov	r0, sp
   19480:	bl	18e58 <__assert_fail@plt+0x7c54>
   19484:	b	1949c <__assert_fail@plt+0x8298>
   19488:	ldrd	r2, [sp]
   1948c:	strd	r2, [r9]
   19490:	orr	r4, r4, #2
   19494:	b	191a4 <__assert_fail@plt+0x7fa0>
   19498:	mov	r0, #0
   1949c:	orr	r4, r4, r0
   194a0:	ldr	r3, [r6]
   194a4:	add	r2, r3, r7
   194a8:	str	r2, [r6]
   194ac:	ldrb	r3, [r3, r7]
   194b0:	cmp	r3, #0
   194b4:	orrne	r4, r4, #2
   194b8:	b	1919c <__assert_fail@plt+0x7f98>
   194bc:	mov	r4, #4
   194c0:	b	191a4 <__assert_fail@plt+0x7fa0>
   194c4:	mov	r4, #4
   194c8:	b	191a4 <__assert_fail@plt+0x7fa0>
   194cc:	strd	r4, [sp, #-16]!
   194d0:	str	r6, [sp, #8]
   194d4:	str	lr, [sp, #12]
   194d8:	cmp	r1, #0
   194dc:	cmpne	r0, #0
   194e0:	beq	1951c <__assert_fail@plt+0x8318>
   194e4:	mov	r2, r0
   194e8:	mov	r3, r1
   194ec:	umull	r4, r5, r0, r1
   194f0:	adds	r1, r5, #0
   194f4:	movne	r1, #1
   194f8:	cmp	r4, #0
   194fc:	movlt	r1, #1
   19500:	cmp	r1, #0
   19504:	beq	19524 <__assert_fail@plt+0x8320>
   19508:	bl	110d8 <__errno_location@plt>
   1950c:	mov	r3, #12
   19510:	str	r3, [r0]
   19514:	mov	r0, #0
   19518:	b	19530 <__assert_fail@plt+0x832c>
   1951c:	mov	r3, #1
   19520:	mov	r2, r3
   19524:	mov	r1, r3
   19528:	mov	r0, r2
   1952c:	bl	10f10 <calloc@plt>
   19530:	ldrd	r4, [sp]
   19534:	ldr	r6, [sp, #8]
   19538:	add	sp, sp, #12
   1953c:	pop	{pc}		; (ldr pc, [sp], #4)
   19540:	str	r4, [sp, #-8]!
   19544:	str	lr, [sp, #4]
   19548:	cmp	r0, #0
   1954c:	beq	19568 <__assert_fail@plt+0x8364>
   19550:	bge	1956c <__assert_fail@plt+0x8368>
   19554:	bl	110d8 <__errno_location@plt>
   19558:	mov	r3, #12
   1955c:	str	r3, [r0]
   19560:	mov	r0, #0
   19564:	b	19570 <__assert_fail@plt+0x836c>
   19568:	mov	r0, #1
   1956c:	bl	11060 <malloc@plt>
   19570:	ldr	r4, [sp]
   19574:	add	sp, sp, #4
   19578:	pop	{pc}		; (ldr pc, [sp], #4)
   1957c:	str	r4, [sp, #-8]!
   19580:	str	lr, [sp, #4]
   19584:	cmp	r0, #0
   19588:	beq	195ac <__assert_fail@plt+0x83a8>
   1958c:	cmp	r1, #0
   19590:	beq	195b8 <__assert_fail@plt+0x83b4>
   19594:	cmp	r1, #0
   19598:	blt	195c4 <__assert_fail@plt+0x83c0>
   1959c:	bl	10fd0 <realloc@plt>
   195a0:	ldr	r4, [sp]
   195a4:	add	sp, sp, #4
   195a8:	pop	{pc}		; (ldr pc, [sp], #4)
   195ac:	mov	r0, r1
   195b0:	bl	19540 <__assert_fail@plt+0x833c>
   195b4:	b	195a0 <__assert_fail@plt+0x839c>
   195b8:	bl	15a7c <__assert_fail@plt+0x4878>
   195bc:	mov	r0, #0
   195c0:	b	195a0 <__assert_fail@plt+0x839c>
   195c4:	bl	110d8 <__errno_location@plt>
   195c8:	mov	r3, #12
   195cc:	str	r3, [r0]
   195d0:	mov	r0, #0
   195d4:	b	195a0 <__assert_fail@plt+0x839c>
   195d8:	strd	r4, [sp, #-16]!
   195dc:	str	r6, [sp, #8]
   195e0:	str	lr, [sp, #12]
   195e4:	mov	r5, r0
   195e8:	bl	11024 <__fpending@plt>
   195ec:	mov	r6, r0
   195f0:	ldr	r4, [r5]
   195f4:	and	r4, r4, #32
   195f8:	mov	r0, r5
   195fc:	bl	15950 <__assert_fail@plt+0x474c>
   19600:	cmp	r4, #0
   19604:	bne	19638 <__assert_fail@plt+0x8434>
   19608:	cmp	r0, #0
   1960c:	beq	19628 <__assert_fail@plt+0x8424>
   19610:	cmp	r6, #0
   19614:	bne	19654 <__assert_fail@plt+0x8450>
   19618:	bl	110d8 <__errno_location@plt>
   1961c:	ldr	r0, [r0]
   19620:	subs	r0, r0, #9
   19624:	mvnne	r0, #0
   19628:	ldrd	r4, [sp]
   1962c:	ldr	r6, [sp, #8]
   19630:	add	sp, sp, #12
   19634:	pop	{pc}		; (ldr pc, [sp], #4)
   19638:	cmp	r0, #0
   1963c:	bne	1965c <__assert_fail@plt+0x8458>
   19640:	bl	110d8 <__errno_location@plt>
   19644:	mov	r3, #0
   19648:	str	r3, [r0]
   1964c:	mvn	r0, #0
   19650:	b	19628 <__assert_fail@plt+0x8424>
   19654:	mvn	r0, #0
   19658:	b	19628 <__assert_fail@plt+0x8424>
   1965c:	mvn	r0, #0
   19660:	b	19628 <__assert_fail@plt+0x8424>
   19664:	str	r4, [sp, #-8]!
   19668:	str	lr, [sp, #4]
   1966c:	mov	r0, #14
   19670:	bl	1118c <nl_langinfo@plt>
   19674:	cmp	r0, #0
   19678:	beq	1969c <__assert_fail@plt+0x8498>
   1967c:	ldrb	r2, [r0]
   19680:	movw	r3, #46680	; 0xb658
   19684:	movt	r3, #1
   19688:	cmp	r2, #0
   1968c:	moveq	r0, r3
   19690:	ldr	r4, [sp]
   19694:	add	sp, sp, #4
   19698:	pop	{pc}		; (ldr pc, [sp], #4)
   1969c:	movw	r0, #46680	; 0xb658
   196a0:	movt	r0, #1
   196a4:	b	19690 <__assert_fail@plt+0x848c>
   196a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   196ac:	strd	r6, [sp, #8]
   196b0:	str	lr, [sp, #16]
   196b4:	sub	sp, sp, #12
   196b8:	mov	r7, r1
   196bc:	mov	r5, r2
   196c0:	subs	r6, r0, #0
   196c4:	addeq	r6, sp, #4
   196c8:	mov	r0, r6
   196cc:	bl	11030 <mbrtowc@plt>
   196d0:	mov	r4, r0
   196d4:	cmp	r5, #0
   196d8:	cmnne	r0, #3
   196dc:	bhi	196f8 <__assert_fail@plt+0x84f4>
   196e0:	mov	r0, r4
   196e4:	add	sp, sp, #12
   196e8:	ldrd	r4, [sp]
   196ec:	ldrd	r6, [sp, #8]
   196f0:	add	sp, sp, #16
   196f4:	pop	{pc}		; (ldr pc, [sp], #4)
   196f8:	mov	r0, #0
   196fc:	bl	19754 <__assert_fail@plt+0x8550>
   19700:	cmp	r0, #0
   19704:	bne	196e0 <__assert_fail@plt+0x84dc>
   19708:	ldrb	r3, [r7]
   1970c:	str	r3, [r6]
   19710:	mov	r4, #1
   19714:	b	196e0 <__assert_fail@plt+0x84dc>
   19718:	str	r4, [sp, #-8]!
   1971c:	str	lr, [sp, #4]
   19720:	umull	r2, r3, r1, r2
   19724:	cmp	r3, #0
   19728:	bne	19740 <__assert_fail@plt+0x853c>
   1972c:	mov	r1, r2
   19730:	bl	1957c <__assert_fail@plt+0x8378>
   19734:	ldr	r4, [sp]
   19738:	add	sp, sp, #4
   1973c:	pop	{pc}		; (ldr pc, [sp], #4)
   19740:	bl	110d8 <__errno_location@plt>
   19744:	mov	r3, #12
   19748:	str	r3, [r0]
   1974c:	mov	r0, #0
   19750:	b	19734 <__assert_fail@plt+0x8530>
   19754:	push	{lr}		; (str lr, [sp, #-4]!)
   19758:	sub	sp, sp, #268	; 0x10c
   1975c:	movw	r2, #257	; 0x101
   19760:	add	r1, sp, #4
   19764:	bl	197b0 <__assert_fail@plt+0x85ac>
   19768:	cmp	r0, #0
   1976c:	movne	r0, #0
   19770:	bne	197a8 <__assert_fail@plt+0x85a4>
   19774:	movw	r1, #46688	; 0xb660
   19778:	movt	r1, #1
   1977c:	add	r0, sp, #4
   19780:	bl	10f34 <strcmp@plt>
   19784:	cmp	r0, #0
   19788:	beq	197a4 <__assert_fail@plt+0x85a0>
   1978c:	movw	r1, #46692	; 0xb664
   19790:	movt	r1, #1
   19794:	add	r0, sp, #4
   19798:	bl	10f34 <strcmp@plt>
   1979c:	adds	r0, r0, #0
   197a0:	movne	r0, #1
   197a4:	and	r0, r0, #1
   197a8:	add	sp, sp, #268	; 0x10c
   197ac:	pop	{pc}		; (ldr pc, [sp], #4)
   197b0:	strd	r4, [sp, #-16]!
   197b4:	str	r6, [sp, #8]
   197b8:	str	lr, [sp, #12]
   197bc:	mov	r6, r1
   197c0:	mov	r4, r2
   197c4:	mov	r1, #0
   197c8:	bl	11174 <setlocale@plt>
   197cc:	subs	r5, r0, #0
   197d0:	beq	19814 <__assert_fail@plt+0x8610>
   197d4:	mov	r0, r5
   197d8:	bl	110c0 <strlen@plt>
   197dc:	cmp	r4, r0
   197e0:	bhi	19830 <__assert_fail@plt+0x862c>
   197e4:	cmp	r4, #0
   197e8:	moveq	r0, #34	; 0x22
   197ec:	beq	19844 <__assert_fail@plt+0x8640>
   197f0:	sub	r4, r4, #1
   197f4:	mov	r2, r4
   197f8:	mov	r1, r5
   197fc:	mov	r0, r6
   19800:	bl	10f70 <memcpy@plt>
   19804:	mov	r3, #0
   19808:	strb	r3, [r6, r4]
   1980c:	mov	r0, #34	; 0x22
   19810:	b	19844 <__assert_fail@plt+0x8640>
   19814:	cmp	r4, #0
   19818:	moveq	r0, #22
   1981c:	beq	19844 <__assert_fail@plt+0x8640>
   19820:	mov	r3, #0
   19824:	strb	r3, [r6]
   19828:	mov	r0, #22
   1982c:	b	19844 <__assert_fail@plt+0x8640>
   19830:	add	r2, r0, #1
   19834:	mov	r1, r5
   19838:	mov	r0, r6
   1983c:	bl	10f70 <memcpy@plt>
   19840:	mov	r0, #0
   19844:	ldrd	r4, [sp]
   19848:	ldr	r6, [sp, #8]
   1984c:	add	sp, sp, #12
   19850:	pop	{pc}		; (ldr pc, [sp], #4)
   19854:	str	r4, [sp, #-8]!
   19858:	str	lr, [sp, #4]
   1985c:	mov	r1, #0
   19860:	bl	11174 <setlocale@plt>
   19864:	ldr	r4, [sp]
   19868:	add	sp, sp, #4
   1986c:	pop	{pc}		; (ldr pc, [sp], #4)
   19870:	cmp	r3, #0
   19874:	cmpeq	r2, #0
   19878:	bne	19890 <__assert_fail@plt+0x868c>
   1987c:	cmp	r1, #0
   19880:	cmpeq	r0, #0
   19884:	mvnne	r1, #0
   19888:	mvnne	r0, #0
   1988c:	b	198ac <__assert_fail@plt+0x86a8>
   19890:	sub	sp, sp, #8
   19894:	push	{sp, lr}
   19898:	bl	198bc <__assert_fail@plt+0x86b8>
   1989c:	ldr	lr, [sp, #4]
   198a0:	add	sp, sp, #8
   198a4:	pop	{r2, r3}
   198a8:	bx	lr
   198ac:	push	{r1, lr}
   198b0:	mov	r0, #8
   198b4:	bl	10f28 <raise@plt>
   198b8:	pop	{r1, pc}
   198bc:	cmp	r1, r3
   198c0:	cmpeq	r0, r2
   198c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198c8:	mov	r4, r0
   198cc:	movcc	r0, #0
   198d0:	mov	r5, r1
   198d4:	ldr	lr, [sp, #36]	; 0x24
   198d8:	movcc	r1, r0
   198dc:	bcc	199d8 <__assert_fail@plt+0x87d4>
   198e0:	cmp	r3, #0
   198e4:	clzeq	ip, r2
   198e8:	clzne	ip, r3
   198ec:	addeq	ip, ip, #32
   198f0:	cmp	r5, #0
   198f4:	clzeq	r1, r4
   198f8:	addeq	r1, r1, #32
   198fc:	clzne	r1, r5
   19900:	sub	ip, ip, r1
   19904:	sub	sl, ip, #32
   19908:	lsl	r9, r3, ip
   1990c:	rsb	fp, ip, #32
   19910:	orr	r9, r9, r2, lsl sl
   19914:	orr	r9, r9, r2, lsr fp
   19918:	lsl	r8, r2, ip
   1991c:	cmp	r5, r9
   19920:	cmpeq	r4, r8
   19924:	movcc	r0, #0
   19928:	movcc	r1, r0
   1992c:	bcc	19948 <__assert_fail@plt+0x8744>
   19930:	mov	r0, #1
   19934:	subs	r4, r4, r8
   19938:	lsl	r1, r0, sl
   1993c:	orr	r1, r1, r0, lsr fp
   19940:	lsl	r0, r0, ip
   19944:	sbc	r5, r5, r9
   19948:	cmp	ip, #0
   1994c:	beq	199d8 <__assert_fail@plt+0x87d4>
   19950:	lsr	r6, r8, #1
   19954:	orr	r6, r6, r9, lsl #31
   19958:	lsr	r7, r9, #1
   1995c:	mov	r2, ip
   19960:	b	19984 <__assert_fail@plt+0x8780>
   19964:	subs	r3, r4, r6
   19968:	sbc	r8, r5, r7
   1996c:	adds	r3, r3, r3
   19970:	adc	r8, r8, r8
   19974:	adds	r4, r3, #1
   19978:	adc	r5, r8, #0
   1997c:	subs	r2, r2, #1
   19980:	beq	199a0 <__assert_fail@plt+0x879c>
   19984:	cmp	r5, r7
   19988:	cmpeq	r4, r6
   1998c:	bcs	19964 <__assert_fail@plt+0x8760>
   19990:	adds	r4, r4, r4
   19994:	adc	r5, r5, r5
   19998:	subs	r2, r2, #1
   1999c:	bne	19984 <__assert_fail@plt+0x8780>
   199a0:	lsr	r3, r4, ip
   199a4:	orr	r3, r3, r5, lsl fp
   199a8:	lsr	r2, r5, ip
   199ac:	orr	r3, r3, r5, lsr sl
   199b0:	adds	r0, r0, r4
   199b4:	mov	r4, r3
   199b8:	lsl	r3, r2, ip
   199bc:	orr	r3, r3, r4, lsl sl
   199c0:	lsl	ip, r4, ip
   199c4:	orr	r3, r3, r4, lsr fp
   199c8:	adc	r1, r1, r5
   199cc:	subs	r0, r0, ip
   199d0:	mov	r5, r2
   199d4:	sbc	r1, r1, r3
   199d8:	cmp	lr, #0
   199dc:	strdne	r4, [lr]
   199e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199e8:	mov	r7, r0
   199ec:	ldr	r6, [pc, #72]	; 19a3c <__assert_fail@plt+0x8838>
   199f0:	ldr	r5, [pc, #72]	; 19a40 <__assert_fail@plt+0x883c>
   199f4:	add	r6, pc, r6
   199f8:	add	r5, pc, r5
   199fc:	sub	r6, r6, r5
   19a00:	mov	r8, r1
   19a04:	mov	r9, r2
   19a08:	bl	10ef0 <calloc@plt-0x20>
   19a0c:	asrs	r6, r6, #2
   19a10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a14:	mov	r4, #0
   19a18:	add	r4, r4, #1
   19a1c:	ldr	r3, [r5], #4
   19a20:	mov	r2, r9
   19a24:	mov	r1, r8
   19a28:	mov	r0, r7
   19a2c:	blx	r3
   19a30:	cmp	r6, r4
   19a34:	bne	19a18 <__assert_fail@plt+0x8814>
   19a38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a3c:	andeq	r2, r1, r8, lsl r5
   19a40:	andeq	r2, r1, r0, lsl r5
   19a44:	bx	lr
   19a48:	ldr	r3, [pc, #12]	; 19a5c <__assert_fail@plt+0x8858>
   19a4c:	mov	r1, #0
   19a50:	add	r3, pc, r3
   19a54:	ldr	r2, [r3]
   19a58:	b	110f0 <__cxa_atexit@plt>
   19a5c:			; <UNDEFINED> instruction: 0x000126bc

Disassembly of section .fini:

00019a60 <.fini>:
   19a60:	push	{r3, lr}
   19a64:	pop	{r3, pc}
