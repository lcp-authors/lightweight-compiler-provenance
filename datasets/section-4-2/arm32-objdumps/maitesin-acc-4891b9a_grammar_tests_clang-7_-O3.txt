
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011df0 <.init>:
   11df0:	push	{r3, lr}
   11df4:	bl	1203c <_start@@Base+0x3c>
   11df8:	pop	{r3, pc}

Disassembly of section .plt:

00011dfc <fdopen@plt-0x14>:
   11dfc:	push	{lr}		; (str lr, [sp, #-4]!)
   11e00:	ldr	lr, [pc, #4]	; 11e0c <fdopen@plt-0x4>
   11e04:	add	lr, pc, lr
   11e08:	ldr	pc, [lr, #8]!
   11e0c:	strdeq	sl, [r1], -r4

00011e10 <fdopen@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #106496	; 0x1a000
   11e18:	ldr	pc, [ip, #500]!	; 0x1f4

00011e1c <setbuf@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #106496	; 0x1a000
   11e24:	ldr	pc, [ip, #492]!	; 0x1ec

00011e28 <strtol@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #106496	; 0x1a000
   11e30:	ldr	pc, [ip, #484]!	; 0x1e4

00011e34 <printf@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #106496	; 0x1a000
   11e3c:	ldr	pc, [ip, #476]!	; 0x1dc

00011e40 <fflush@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #106496	; 0x1a000
   11e48:	ldr	pc, [ip, #468]!	; 0x1d4

00011e4c <free@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #106496	; 0x1a000
   11e54:	ldr	pc, [ip, #460]!	; 0x1cc

00011e58 <memcpy@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #106496	; 0x1a000
   11e60:	ldr	pc, [ip, #452]!	; 0x1c4

00011e64 <mmap64@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #106496	; 0x1a000
   11e6c:	ldr	pc, [ip, #444]!	; 0x1bc

00011e70 <ftell@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #106496	; 0x1a000
   11e78:	ldr	pc, [ip, #436]!	; 0x1b4

00011e7c <uname@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #106496	; 0x1a000
   11e84:	ldr	pc, [ip, #428]!	; 0x1ac

00011e88 <strdup@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #106496	; 0x1a000
   11e90:	ldr	pc, [ip, #420]!	; 0x1a4

00011e94 <realloc@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #106496	; 0x1a000
   11e9c:	ldr	pc, [ip, #412]!	; 0x19c

00011ea0 <fwrite@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #106496	; 0x1a000
   11ea8:	ldr	pc, [ip, #404]!	; 0x194

00011eac <open64@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #106496	; 0x1a000
   11eb4:	ldr	pc, [ip, #396]!	; 0x18c

00011eb8 <getenv@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #106496	; 0x1a000
   11ec0:	ldr	pc, [ip, #388]!	; 0x184

00011ec4 <puts@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #106496	; 0x1a000
   11ecc:	ldr	pc, [ip, #380]!	; 0x17c

00011ed0 <malloc@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #106496	; 0x1a000
   11ed8:	ldr	pc, [ip, #372]!	; 0x174

00011edc <__libc_start_main@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #106496	; 0x1a000
   11ee4:	ldr	pc, [ip, #364]!	; 0x16c

00011ee8 <strerror@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #106496	; 0x1a000
   11ef0:	ldr	pc, [ip, #356]!	; 0x164

00011ef4 <__gmon_start__@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #106496	; 0x1a000
   11efc:	ldr	pc, [ip, #348]!	; 0x15c

00011f00 <getpid@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #106496	; 0x1a000
   11f08:	ldr	pc, [ip, #340]!	; 0x154

00011f0c <exit@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #106496	; 0x1a000
   11f14:	ldr	pc, [ip, #332]!	; 0x14c

00011f18 <strlen@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #106496	; 0x1a000
   11f20:	ldr	pc, [ip, #324]!	; 0x144

00011f24 <strchr@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #106496	; 0x1a000
   11f2c:	ldr	pc, [ip, #316]!	; 0x13c

00011f30 <fprintf@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #106496	; 0x1a000
   11f38:	ldr	pc, [ip, #308]!	; 0x134

00011f3c <__errno_location@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #106496	; 0x1a000
   11f44:	ldr	pc, [ip, #300]!	; 0x12c

00011f48 <__cxa_atexit@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #106496	; 0x1a000
   11f50:	ldr	pc, [ip, #292]!	; 0x124

00011f54 <mkdir@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #106496	; 0x1a000
   11f5c:	ldr	pc, [ip, #284]!	; 0x11c

00011f60 <memset@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #106496	; 0x1a000
   11f68:	ldr	pc, [ip, #276]!	; 0x114

00011f6c <strncpy@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #106496	; 0x1a000
   11f74:	ldr	pc, [ip, #268]!	; 0x10c

00011f78 <prctl@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #106496	; 0x1a000
   11f80:	ldr	pc, [ip, #260]!	; 0x104

00011f84 <fclose@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #106496	; 0x1a000
   11f8c:	ldr	pc, [ip, #252]!	; 0xfc

00011f90 <strnlen@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #106496	; 0x1a000
   11f98:	ldr	pc, [ip, #244]!	; 0xf4

00011f9c <munmap@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #106496	; 0x1a000
   11fa4:	ldr	pc, [ip, #236]!	; 0xec

00011fa8 <fcntl64@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #106496	; 0x1a000
   11fb0:	ldr	pc, [ip, #228]!	; 0xe4

00011fb4 <strrchr@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #220]!	; 0xdc

00011fc0 <msync@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #212]!	; 0xd4

00011fcc <fseek@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #204]!	; 0xcc

00011fd8 <strncmp@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #196]!	; 0xc4

00011fe4 <abort@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #188]!	; 0xbc

00011ff0 <__assert_fail@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #180]!	; 0xb4

Disassembly of section .text:

00012000 <_start@@Base>:
   12000:	mov	fp, #0
   12004:	mov	lr, #0
   12008:	pop	{r1}		; (ldr r1, [sp], #4)
   1200c:	mov	r2, sp
   12010:	push	{r2}		; (str r2, [sp, #-4]!)
   12014:	push	{r0}		; (str r0, [sp, #-4]!)
   12018:	ldr	ip, [pc, #16]	; 12030 <_start@@Base+0x30>
   1201c:	push	{ip}		; (str ip, [sp, #-4]!)
   12020:	ldr	r0, [pc, #12]	; 12034 <_start@@Base+0x34>
   12024:	ldr	r3, [pc, #12]	; 12038 <_start@@Base+0x38>
   12028:	bl	11edc <__libc_start_main@plt>
   1202c:	bl	11fe4 <abort@plt>
   12030:	andeq	sl, r1, ip, ror r4
   12034:	andeq	r4, r1, r0, rrx
   12038:	andeq	sl, r1, ip, lsl r4
   1203c:	ldr	r3, [pc, #20]	; 12058 <_start@@Base+0x58>
   12040:	ldr	r2, [pc, #20]	; 1205c <_start@@Base+0x5c>
   12044:	add	r3, pc, r3
   12048:	ldr	r2, [r3, r2]
   1204c:	cmp	r2, #0
   12050:	bxeq	lr
   12054:	b	11ef4 <__gmon_start__@plt>
   12058:			; <UNDEFINED> instruction: 0x00019fb4
   1205c:	andeq	r0, r0, r0, asr #1
   12060:	ldr	r0, [pc, #24]	; 12080 <_start@@Base+0x80>
   12064:	ldr	r3, [pc, #24]	; 12084 <_start@@Base+0x84>
   12068:	cmp	r3, r0
   1206c:	bxeq	lr
   12070:	ldr	r3, [pc, #16]	; 12088 <_start@@Base+0x88>
   12074:	cmp	r3, #0
   12078:	bxeq	lr
   1207c:	bx	r3
   12080:	ldrdeq	ip, [r2], -r4
   12084:	ldrdeq	ip, [r2], -r4
   12088:	andeq	r0, r0, r0
   1208c:	ldr	r0, [pc, #36]	; 120b8 <_start@@Base+0xb8>
   12090:	ldr	r1, [pc, #36]	; 120bc <_start@@Base+0xbc>
   12094:	sub	r1, r1, r0
   12098:	asr	r1, r1, #2
   1209c:	add	r1, r1, r1, lsr #31
   120a0:	asrs	r1, r1, #1
   120a4:	bxeq	lr
   120a8:	ldr	r3, [pc, #16]	; 120c0 <_start@@Base+0xc0>
   120ac:	cmp	r3, #0
   120b0:	bxeq	lr
   120b4:	bx	r3
   120b8:	ldrdeq	ip, [r2], -r4
   120bc:	ldrdeq	ip, [r2], -r4
   120c0:	andeq	r0, r0, r0
   120c4:	push	{r4, lr}
   120c8:	ldr	r4, [pc, #24]	; 120e8 <_start@@Base+0xe8>
   120cc:	ldrb	r3, [r4]
   120d0:	cmp	r3, #0
   120d4:	popne	{r4, pc}
   120d8:	bl	12060 <_start@@Base+0x60>
   120dc:	mov	r3, #1
   120e0:	strb	r3, [r4]
   120e4:	pop	{r4, pc}
   120e8:	andeq	ip, r2, r8, ror #1
   120ec:	b	1208c <_start@@Base+0x8c>

000120f0 <next@@Base>:
   120f0:	push	{r4, r5, r6, r7, fp, lr}
   120f4:	add	fp, sp, #16
   120f8:	movw	r7, #49392	; 0xc0f0
   120fc:	movw	ip, #53136	; 0xcf90
   12100:	movt	r7, #2
   12104:	movt	ip, #2
   12108:	ldrd	r2, [r7]
   1210c:	str	r0, [ip]
   12110:	mov	r4, r7
   12114:	adds	r2, r2, #1
   12118:	adc	r3, r3, #0
   1211c:	strd	r2, [r7]
   12120:	ldr	r2, [ip, #204]	; 0xcc
   12124:	mov	r3, #16
   12128:	cmp	r2, #50	; 0x32
   1212c:	movwcc	r3, #8
   12130:	ldr	r3, [r4, r3]!
   12134:	adds	r3, r3, #1
   12138:	str	r3, [r4]
   1213c:	ldr	r3, [r4, #4]
   12140:	adc	r3, r3, #0
   12144:	cmp	r2, #49	; 0x31
   12148:	str	r3, [r4, #4]
   1214c:	bhi	12178 <next@@Base+0x88>
   12150:	ldr	r4, [r7, #24]
   12154:	ldr	r3, [r7, #28]
   12158:	add	r2, ip, r2, lsl #2
   1215c:	adds	r4, r4, #1
   12160:	adc	r3, r3, #0
   12164:	str	r4, [r7, #24]
   12168:	str	r3, [r7, #28]
   1216c:	str	r0, [r2, #4]
   12170:	ldr	r2, [ip, #204]	; 0xcc
   12174:	b	1219c <next@@Base+0xac>
   12178:	ldr	r4, [r7, #32]
   1217c:	ldr	r3, [r7, #36]	; 0x24
   12180:	ldr	r1, [ip, #212]	; 0xd4
   12184:	add	r1, r1, #1
   12188:	adds	r4, r4, #1
   1218c:	str	r1, [ip, #212]	; 0xd4
   12190:	adc	r1, r3, #0
   12194:	str	r4, [r7, #32]
   12198:	str	r1, [r7, #36]	; 0x24
   1219c:	add	r1, r2, #1
   121a0:	movw	r2, #53372	; 0xd07c
   121a4:	mov	r5, r7
   121a8:	movt	r2, #2
   121ac:	str	r1, [ip, #204]	; 0xcc
   121b0:	mov	r1, #48	; 0x30
   121b4:	ldr	r3, [r2, #200]	; 0xc8
   121b8:	cmp	r3, #50	; 0x32
   121bc:	movwcc	r1, #40	; 0x28
   121c0:	ldr	r1, [r5, r1]!
   121c4:	adds	r1, r1, #1
   121c8:	str	r1, [r5]
   121cc:	ldr	r1, [r5, #4]
   121d0:	adc	r1, r1, #0
   121d4:	cmp	r3, #49	; 0x31
   121d8:	str	r1, [r5, #4]
   121dc:	bhi	12204 <next@@Base+0x114>
   121e0:	ldrd	r4, [r7, #56]	; 0x38
   121e4:	add	r1, r3, #1
   121e8:	str	r1, [r2, #200]	; 0xc8
   121ec:	movw	r1, #8432	; 0x20f0
   121f0:	movt	r1, #1
   121f4:	str	r1, [r2, r3, lsl #2]
   121f8:	adds	r4, r4, #1
   121fc:	adc	r5, r5, #0
   12200:	strd	r4, [r7, #56]	; 0x38
   12204:	ldr	r2, [ip, #232]	; 0xe8
   12208:	mov	r1, #72	; 0x48
   1220c:	mov	r3, r7
   12210:	cmp	r2, #0
   12214:	movwne	r1, #64	; 0x40
   12218:	ldr	r1, [r3, r1]!
   1221c:	adds	r1, r1, #1
   12220:	str	r1, [r3]
   12224:	ldr	r1, [r3, #4]
   12228:	adc	r1, r1, #0
   1222c:	cmp	r2, #0
   12230:	str	r1, [r3, #4]
   12234:	beq	12260 <next@@Base+0x170>
   12238:	ldrd	r4, [r7, #80]	; 0x50
   1223c:	adds	r4, r4, #1
   12240:	adc	r5, r5, #0
   12244:	strd	r4, [r7, #80]	; 0x50
   12248:	blx	r2
   1224c:	ldrd	r2, [r7, #144]	; 0x90
   12250:	adds	r2, r2, #1
   12254:	adc	r3, r3, #0
   12258:	strd	r2, [r7, #144]	; 0x90
   1225c:	pop	{r4, r5, r6, r7, fp, pc}
   12260:	ldr	r0, [ip, #220]	; 0xdc
   12264:	mov	r1, #96	; 0x60
   12268:	mov	r2, r7
   1226c:	cmp	r0, #0
   12270:	movwne	r1, #88	; 0x58
   12274:	ldr	r1, [r2, r1]!
   12278:	adds	r1, r1, #1
   1227c:	str	r1, [r2]
   12280:	ldr	r1, [r2, #4]
   12284:	adc	r1, r1, #0
   12288:	cmp	r0, #0
   1228c:	str	r1, [r2, #4]
   12290:	beq	122ec <next@@Base+0x1fc>
   12294:	ldr	r3, [ip, #224]	; 0xe0
   12298:	mov	r1, #112	; 0x70
   1229c:	mov	r6, r7
   122a0:	ldr	r2, [ip, #228]	; 0xe4
   122a4:	cmp	r3, r0
   122a8:	movwlt	r1, #104	; 0x68
   122ac:	ldr	r1, [r6, r1]!
   122b0:	adds	r1, r1, #1
   122b4:	str	r1, [r6]
   122b8:	ldr	r1, [r6, #4]
   122bc:	adc	r1, r1, #0
   122c0:	cmp	r3, r0
   122c4:	str	r1, [r6, #4]
   122c8:	bge	12304 <next@@Base+0x214>
   122cc:	add	r0, r3, #1
   122d0:	str	r0, [ip, #224]	; 0xe0
   122d4:	ldrd	r0, [r7, #120]	; 0x78
   122d8:	adds	r0, r0, #1
   122dc:	adc	r1, r1, #0
   122e0:	strd	r0, [r7, #120]	; 0x78
   122e4:	ldr	r0, [r2, r3, lsl #2]
   122e8:	b	1224c <next@@Base+0x15c>
   122ec:	ldrd	r0, [r7, #136]	; 0x88
   122f0:	adds	r0, r0, #1
   122f4:	adc	r1, r1, #0
   122f8:	strd	r0, [r7, #136]	; 0x88
   122fc:	ldr	r0, [ip, #216]	; 0xd8
   12300:	b	1224c <next@@Base+0x15c>
   12304:	ldrd	r4, [r7, #128]	; 0x80
   12308:	add	r0, r2, r0, lsl #2
   1230c:	adds	r4, r4, #1
   12310:	adc	r5, r5, #0
   12314:	strd	r4, [r7, #128]	; 0x80
   12318:	ldr	r0, [r0, #-4]
   1231c:	b	1224c <next@@Base+0x15c>

00012320 <next_reset@@Base>:
   12320:	push	{r4, sl, fp, lr}
   12324:	add	fp, sp, #8
   12328:	movw	r0, #50336	; 0xc4a0
   1232c:	add	r1, pc, #60	; 0x3c
   12330:	movw	r4, #53136	; 0xcf90
   12334:	mov	r2, #236	; 0xec
   12338:	movt	r0, #2
   1233c:	vld1.64	{d16-d17}, [r1 :128]
   12340:	movt	r4, #2
   12344:	mov	r1, #0
   12348:	vld1.64	{d18-d19}, [r0 :128]
   1234c:	vadd.i64	q8, q9, q8
   12350:	vst1.64	{d16-d17}, [r0 :128]
   12354:	mov	r0, r4
   12358:	bl	11f60 <memset@plt>
   1235c:	mov	r0, #50	; 0x32
   12360:	str	r0, [r4, #208]	; 0xd0
   12364:	pop	{r4, sl, fp, pc}
   12368:	nop	{0}
   1236c:	nop	{0}
   12370:	andeq	r0, r0, r1
   12374:	andeq	r0, r0, r0
   12378:	andeq	r0, r0, r1
   1237c:	andeq	r0, r0, r0

00012380 <push_back@@Base>:
   12380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12384:	add	fp, sp, #24
   12388:	movw	r8, #49552	; 0xc190
   1238c:	movw	r2, #52712	; 0xcde8
   12390:	movt	r8, #2
   12394:	movt	r2, #2
   12398:	ldrd	r6, [r8]
   1239c:	str	r0, [r2]
   123a0:	str	r1, [r2, #204]	; 0xcc
   123a4:	mov	r4, r8
   123a8:	ldr	r3, [r2, #408]	; 0x198
   123ac:	adds	r6, r6, #1
   123b0:	adc	r7, r7, #0
   123b4:	cmp	r3, #50	; 0x32
   123b8:	strd	r6, [r8]
   123bc:	mov	r7, #16
   123c0:	movwcc	r7, #8
   123c4:	ldr	r7, [r4, r7]!
   123c8:	adds	r7, r7, #1
   123cc:	str	r7, [r4]
   123d0:	ldr	r7, [r4, #4]
   123d4:	adc	r7, r7, #0
   123d8:	cmp	r3, #49	; 0x31
   123dc:	str	r7, [r4, #4]
   123e0:	bhi	12418 <push_back@@Base+0x98>
   123e4:	ldr	r4, [r8, #24]
   123e8:	ldr	r7, [r8, #28]
   123ec:	add	r3, r2, r3, lsl #2
   123f0:	adds	r4, r4, #1
   123f4:	adc	r7, r7, #0
   123f8:	str	r4, [r8, #24]
   123fc:	str	r7, [r8, #28]
   12400:	str	r0, [r3, #4]
   12404:	ldr	r3, [r2, #408]	; 0x198
   12408:	add	r3, r2, r3, lsl #2
   1240c:	str	r1, [r3, #208]	; 0xd0
   12410:	ldr	r3, [r2, #408]	; 0x198
   12414:	b	1243c <push_back@@Base+0xbc>
   12418:	ldr	r4, [r8, #32]
   1241c:	ldr	r7, [r8, #36]	; 0x24
   12420:	ldr	r6, [r2, #416]	; 0x1a0
   12424:	adds	r4, r4, #1
   12428:	add	r6, r6, #1
   1242c:	adc	r7, r7, #0
   12430:	str	r6, [r2, #416]	; 0x1a0
   12434:	str	r4, [r8, #32]
   12438:	str	r7, [r8, #36]	; 0x24
   1243c:	movw	ip, #53372	; 0xd07c
   12440:	add	r3, r3, #1
   12444:	mov	r7, #48	; 0x30
   12448:	mov	r5, r8
   1244c:	movt	ip, #2
   12450:	str	r3, [r2, #408]	; 0x198
   12454:	ldr	r3, [ip, #200]	; 0xc8
   12458:	cmp	r3, #50	; 0x32
   1245c:	movwcc	r7, #40	; 0x28
   12460:	ldr	r7, [r5, r7]!
   12464:	adds	r7, r7, #1
   12468:	str	r7, [r5]
   1246c:	ldr	r7, [r5, #4]
   12470:	adc	r7, r7, #0
   12474:	cmp	r3, #49	; 0x31
   12478:	str	r7, [r5, #4]
   1247c:	bhi	124a4 <push_back@@Base+0x124>
   12480:	ldrd	r4, [r8, #56]	; 0x38
   12484:	add	r7, r3, #1
   12488:	str	r7, [ip, #200]	; 0xc8
   1248c:	movw	r7, #9088	; 0x2380
   12490:	movt	r7, #1
   12494:	str	r7, [ip, r3, lsl #2]
   12498:	adds	r4, r4, #1
   1249c:	adc	r5, r5, #0
   124a0:	strd	r4, [r8, #56]	; 0x38
   124a4:	ldr	r2, [r2, #420]	; 0x1a4
   124a8:	mov	r3, #72	; 0x48
   124ac:	mov	r7, r8
   124b0:	cmp	r2, #0
   124b4:	movwne	r3, #64	; 0x40
   124b8:	ldr	r3, [r7, r3]!
   124bc:	adds	r3, r3, #1
   124c0:	str	r3, [r7]
   124c4:	ldr	r3, [r7, #4]
   124c8:	adc	r3, r3, #0
   124cc:	cmp	r2, #0
   124d0:	str	r3, [r7, #4]
   124d4:	beq	124ec <push_back@@Base+0x16c>
   124d8:	ldrd	r4, [r8, #80]	; 0x50
   124dc:	adds	r4, r4, #1
   124e0:	adc	r5, r5, #0
   124e4:	strd	r4, [r8, #80]	; 0x50
   124e8:	blx	r2
   124ec:	ldrd	r0, [r8, #88]	; 0x58
   124f0:	adds	r0, r0, #1
   124f4:	adc	r1, r1, #0
   124f8:	strd	r0, [r8, #88]	; 0x58
   124fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012500 <push_back_reset@@Base>:
   12500:	push	{r4, sl, fp, lr}
   12504:	add	fp, sp, #8
   12508:	movw	r0, #50336	; 0xc4a0
   1250c:	add	r1, pc, #60	; 0x3c
   12510:	movw	r4, #52712	; 0xcde8
   12514:	mov	r2, #424	; 0x1a8
   12518:	movt	r0, #2
   1251c:	vld1.64	{d16-d17}, [r1 :128]
   12520:	movt	r4, #2
   12524:	mov	r1, #0
   12528:	add	r0, r0, #16
   1252c:	vld1.64	{d18-d19}, [r0 :128]
   12530:	vadd.i64	q8, q9, q8
   12534:	vst1.64	{d16-d17}, [r0 :128]
   12538:	mov	r0, r4
   1253c:	bl	11f60 <memset@plt>
   12540:	mov	r0, #50	; 0x32
   12544:	str	r0, [r4, #412]	; 0x19c
   12548:	pop	{r4, sl, fp, pc}
   1254c:	nop	{0}
   12550:	andeq	r0, r0, r1
   12554:	andeq	r0, r0, r0
   12558:	andeq	r0, r0, r1
   1255c:	andeq	r0, r0, r0

00012560 <setup@@Base>:
   12560:	push	{r4, r5, r6, sl, fp, lr}
   12564:	add	fp, sp, #16
   12568:	vpush	{d8-d9}
   1256c:	movw	r5, #50336	; 0xc4a0
   12570:	mov	r0, #32
   12574:	movw	r4, #53136	; 0xcf90
   12578:	mov	r2, #236	; 0xec
   1257c:	movt	r5, #2
   12580:	movt	r4, #2
   12584:	mov	r1, r5
   12588:	vld1.64	{d16-d17}, [r1 :128], r0
   1258c:	add	r0, pc, #92	; 0x5c
   12590:	vld1.64	{d8-d9}, [r0 :128]
   12594:	mov	r0, r4
   12598:	vld1.64	{d18-d19}, [r1 :128]
   1259c:	vadd.i64	q8, q8, q4
   125a0:	vadd.i64	q9, q9, q4
   125a4:	vst1.64	{d18-d19}, [r1 :128]
   125a8:	mov	r1, #0
   125ac:	vst1.64	{d16-d17}, [r5 :128]!
   125b0:	bl	11f60 <memset@plt>
   125b4:	vld1.64	{d16-d17}, [r5 :128]
   125b8:	mov	r6, #50	; 0x32
   125bc:	mov	r1, #0
   125c0:	mov	r2, #424	; 0x1a8
   125c4:	str	r6, [r4, #208]	; 0xd0
   125c8:	movw	r4, #52712	; 0xcde8
   125cc:	movt	r4, #2
   125d0:	mov	r0, r4
   125d4:	vadd.i64	q8, q8, q4
   125d8:	vst1.64	{d16-d17}, [r5 :128]
   125dc:	bl	11f60 <memset@plt>
   125e0:	str	r6, [r4, #412]	; 0x19c
   125e4:	vpop	{d8-d9}
   125e8:	pop	{r4, r5, r6, sl, fp, pc}
   125ec:	nop	{0}
   125f0:	andeq	r0, r0, r1
   125f4:	andeq	r0, r0, r0
   125f8:	andeq	r0, r0, r1
   125fc:	andeq	r0, r0, r0

00012600 <no_int_as_first_stuff@@Base>:
   12600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12604:	add	fp, sp, #24
   12608:	sub	sp, sp, #16
   1260c:	movw	r8, #50336	; 0xc4a0
   12610:	mov	r4, sp
   12614:	add	r1, sp, #4
   12618:	movt	r8, #2
   1261c:	mov	r7, r8
   12620:	ldr	r0, [r7, #64]!	; 0x40
   12624:	adds	r0, r0, #1
   12628:	str	r0, [r7]
   1262c:	ldr	r0, [r7, #4]
   12630:	adc	r0, r0, #0
   12634:	str	r0, [r7, #4]
   12638:	mov	r0, r4
   1263c:	bl	162b0 <init_grammar@@Base>
   12640:	mov	r0, #4
   12644:	bl	11ed0 <malloc@plt>
   12648:	mov	r5, r0
   1264c:	bl	14a60 <init_token_opar@@Base>
   12650:	movw	r6, #53136	; 0xcf90
   12654:	mov	r0, r4
   12658:	movt	r6, #2
   1265c:	str	r5, [r6, #216]	; 0xd8
   12660:	bl	16370 <read_function_ast_node@@Base>
   12664:	ldr	r1, [r6, #204]	; 0xcc
   12668:	mov	r2, #16
   1266c:	cmp	r1, #1
   12670:	movweq	r2, #8
   12674:	ldr	r2, [r7, r2]!
   12678:	adds	r2, r2, #1
   1267c:	str	r2, [r7]
   12680:	ldr	r2, [r7, #4]
   12684:	adc	r2, r2, #0
   12688:	cmp	r1, #1
   1268c:	str	r2, [r7, #4]
   12690:	bne	126d4 <no_int_as_first_stuff@@Base+0xd4>
   12694:	mov	r1, #32
   12698:	cmp	r0, #0
   1269c:	movweq	r1, #24
   126a0:	add	r1, r8, r1
   126a4:	ldrd	r2, [r1, #64]	; 0x40
   126a8:	adds	r2, r2, #1
   126ac:	adc	r3, r3, #0
   126b0:	cmp	r0, #0
   126b4:	strd	r2, [r1, #64]	; 0x40
   126b8:	bne	126f4 <no_int_as_first_stuff@@Base+0xf4>
   126bc:	ldrd	r0, [r8, #104]	; 0x68
   126c0:	adds	r0, r0, #1
   126c4:	adc	r1, r1, #0
   126c8:	strd	r0, [r8, #104]	; 0x68
   126cc:	sub	sp, fp, #24
   126d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   126d4:	movw	r0, #42148	; 0xa4a4
   126d8:	movw	r1, #42174	; 0xa4be
   126dc:	movw	r3, #42242	; 0xa502
   126e0:	mov	r2, #41	; 0x29
   126e4:	movt	r0, #1
   126e8:	movt	r1, #1
   126ec:	movt	r3, #1
   126f0:	bl	11ff0 <__assert_fail@plt>
   126f4:	movw	r0, #42271	; 0xa51f
   126f8:	movw	r1, #42174	; 0xa4be
   126fc:	movw	r3, #42242	; 0xa502
   12700:	mov	r2, #42	; 0x2a
   12704:	movt	r0, #1
   12708:	movt	r1, #1
   1270c:	movt	r3, #1
   12710:	bl	11ff0 <__assert_fail@plt>

00012714 <int_but_not_followed_by_function@@Base>:
   12714:	push	{r4, r5, r6, r7, fp, lr}
   12718:	add	fp, sp, #16
   1271c:	sub	sp, sp, #16
   12720:	movw	r6, #50448	; 0xc510
   12724:	mov	r4, sp
   12728:	movt	r6, #2
   1272c:	ldrd	r0, [r6]
   12730:	adds	r0, r0, #1
   12734:	adc	r1, r1, #0
   12738:	strd	r0, [r6]
   1273c:	add	r1, sp, #4
   12740:	mov	r0, r4
   12744:	bl	162b0 <init_grammar@@Base>
   12748:	mov	r0, #8
   1274c:	bl	11ed0 <malloc@plt>
   12750:	mov	r5, r0
   12754:	mov	r0, #4
   12758:	bl	11ed0 <malloc@plt>
   1275c:	str	r0, [r5]
   12760:	bl	149a0 <init_token_int_type@@Base>
   12764:	mov	r0, #4
   12768:	bl	11ed0 <malloc@plt>
   1276c:	str	r0, [r5, #4]
   12770:	bl	14a60 <init_token_opar@@Base>
   12774:	movw	r7, #53136	; 0xcf90
   12778:	mov	r0, #2
   1277c:	movt	r7, #2
   12780:	str	r0, [r7, #220]	; 0xdc
   12784:	mov	r0, r4
   12788:	str	r5, [r7, #228]	; 0xe4
   1278c:	bl	16370 <read_function_ast_node@@Base>
   12790:	ldr	r1, [r7, #204]	; 0xcc
   12794:	mov	r2, #16
   12798:	mov	r3, r6
   1279c:	cmp	r1, #2
   127a0:	movweq	r2, #8
   127a4:	ldr	r2, [r3, r2]!
   127a8:	adds	r2, r2, #1
   127ac:	str	r2, [r3]
   127b0:	ldr	r2, [r3, #4]
   127b4:	adc	r2, r2, #0
   127b8:	cmp	r1, #2
   127bc:	str	r2, [r3, #4]
   127c0:	bne	1280c <int_but_not_followed_by_function@@Base+0xf8>
   127c4:	mov	r1, #32
   127c8:	cmp	r0, #0
   127cc:	mov	r2, r6
   127d0:	movweq	r1, #24
   127d4:	ldr	r1, [r2, r1]!
   127d8:	adds	r1, r1, #1
   127dc:	str	r1, [r2]
   127e0:	ldr	r1, [r2, #4]
   127e4:	adc	r1, r1, #0
   127e8:	cmp	r0, #0
   127ec:	str	r1, [r2, #4]
   127f0:	bne	1282c <int_but_not_followed_by_function@@Base+0x118>
   127f4:	ldrd	r0, [r6, #40]	; 0x28
   127f8:	adds	r0, r0, #1
   127fc:	adc	r1, r1, #0
   12800:	strd	r0, [r6, #40]	; 0x28
   12804:	sub	sp, fp, #16
   12808:	pop	{r4, r5, r6, r7, fp, pc}
   1280c:	movw	r0, #42283	; 0xa52b
   12810:	movw	r1, #42174	; 0xa4be
   12814:	movw	r3, #42309	; 0xa545
   12818:	mov	r2, #67	; 0x43
   1281c:	movt	r0, #1
   12820:	movt	r1, #1
   12824:	movt	r3, #1
   12828:	bl	11ff0 <__assert_fail@plt>
   1282c:	movw	r0, #42271	; 0xa51f
   12830:	movw	r1, #42174	; 0xa4be
   12834:	movw	r3, #42309	; 0xa545
   12838:	mov	r2, #68	; 0x44
   1283c:	movt	r0, #1
   12840:	movt	r1, #1
   12844:	movt	r3, #1
   12848:	bl	11ff0 <__assert_fail@plt>

0001284c <boolean_expression_is_read_properly@@Base>:
   1284c:	push	{r4, r5, r6, r7, fp, lr}
   12850:	add	fp, sp, #16
   12854:	sub	sp, sp, #16
   12858:	movw	r7, #49648	; 0xc1f0
   1285c:	movt	r7, #2
   12860:	ldrd	r0, [r7]
   12864:	adds	r0, r0, #1
   12868:	adc	r1, r1, #0
   1286c:	strd	r0, [r7]
   12870:	mov	r0, #3
   12874:	bl	11ed0 <malloc@plt>
   12878:	mov	r6, r0
   1287c:	movw	r0, #15649	; 0x3d21
   12880:	mov	r4, sp
   12884:	add	r1, sp, #4
   12888:	strh	r0, [r6]
   1288c:	mov	r0, #0
   12890:	strb	r0, [r6, #2]
   12894:	mov	r0, r4
   12898:	bl	162b0 <init_grammar@@Base>
   1289c:	mov	r0, #20
   128a0:	bl	11ed0 <malloc@plt>
   128a4:	mov	r5, r0
   128a8:	mov	r0, #8
   128ac:	bl	11ed0 <malloc@plt>
   128b0:	mov	r1, #2
   128b4:	str	r0, [r5]
   128b8:	bl	149e0 <init_token_int_value@@Base>
   128bc:	mov	r0, #8
   128c0:	bl	11ed0 <malloc@plt>
   128c4:	mov	r1, #2
   128c8:	str	r0, [r5, #4]
   128cc:	bl	149e0 <init_token_int_value@@Base>
   128d0:	mov	r0, #8
   128d4:	bl	11ed0 <malloc@plt>
   128d8:	mov	r1, r6
   128dc:	str	r0, [r5, #8]
   128e0:	bl	14ca0 <init_token_boolean_op@@Base>
   128e4:	mov	r0, #8
   128e8:	bl	11ed0 <malloc@plt>
   128ec:	mov	r1, #1
   128f0:	str	r0, [r5, #12]
   128f4:	bl	149e0 <init_token_int_value@@Base>
   128f8:	mov	r0, #4
   128fc:	bl	11ed0 <malloc@plt>
   12900:	str	r0, [r5, #16]
   12904:	bl	14aa0 <init_token_cpar@@Base>
   12908:	movw	r6, #53136	; 0xcf90
   1290c:	mov	r0, #5
   12910:	movt	r6, #2
   12914:	str	r0, [r6, #220]	; 0xdc
   12918:	mov	r0, r4
   1291c:	str	r5, [r6, #228]	; 0xe4
   12920:	bl	16a60 <read_boolean_expression@@Base>
   12924:	ldr	r1, [r6, #204]	; 0xcc
   12928:	mov	r2, #16
   1292c:	mov	r3, r7
   12930:	cmp	r1, #5
   12934:	movweq	r2, #8
   12938:	ldr	r2, [r3, r2]!
   1293c:	adds	r2, r2, #1
   12940:	str	r2, [r3]
   12944:	ldr	r2, [r3, #4]
   12948:	adc	r2, r2, #0
   1294c:	cmp	r1, #5
   12950:	str	r2, [r3, #4]
   12954:	bne	129e0 <boolean_expression_is_read_properly@@Base+0x194>
   12958:	movw	r1, #52712	; 0xcde8
   1295c:	mov	r2, #32
   12960:	mov	r3, r7
   12964:	movt	r1, #2
   12968:	ldr	r1, [r1, #408]	; 0x198
   1296c:	cmp	r1, #1
   12970:	movweq	r2, #24
   12974:	ldr	r2, [r3, r2]!
   12978:	adds	r2, r2, #1
   1297c:	str	r2, [r3]
   12980:	ldr	r2, [r3, #4]
   12984:	adc	r2, r2, #0
   12988:	cmp	r1, #1
   1298c:	str	r2, [r3, #4]
   12990:	bne	12a00 <boolean_expression_is_read_properly@@Base+0x1b4>
   12994:	ldr	r0, [r0]
   12998:	mov	r1, #48	; 0x30
   1299c:	mov	r2, r7
   129a0:	cmp	r0, #5
   129a4:	movweq	r1, #40	; 0x28
   129a8:	ldr	r1, [r2, r1]!
   129ac:	adds	r1, r1, #1
   129b0:	str	r1, [r2]
   129b4:	ldr	r1, [r2, #4]
   129b8:	adc	r1, r1, #0
   129bc:	cmp	r0, #5
   129c0:	str	r1, [r2, #4]
   129c4:	bne	12a20 <boolean_expression_is_read_properly@@Base+0x1d4>
   129c8:	ldrd	r0, [r7, #56]	; 0x38
   129cc:	adds	r0, r0, #1
   129d0:	adc	r1, r1, #0
   129d4:	strd	r0, [r7, #56]	; 0x38
   129d8:	sub	sp, fp, #16
   129dc:	pop	{r4, r5, r6, r7, fp, pc}
   129e0:	movw	r0, #42349	; 0xa56d
   129e4:	movw	r1, #42174	; 0xa4be
   129e8:	movw	r3, #42375	; 0xa587
   129ec:	mov	r2, #105	; 0x69
   129f0:	movt	r0, #1
   129f4:	movt	r1, #1
   129f8:	movt	r3, #1
   129fc:	bl	11ff0 <__assert_fail@plt>
   12a00:	movw	r0, #42418	; 0xa5b2
   12a04:	movw	r1, #42174	; 0xa4be
   12a08:	movw	r3, #42375	; 0xa587
   12a0c:	mov	r2, #106	; 0x6a
   12a10:	movt	r0, #1
   12a14:	movt	r1, #1
   12a18:	movt	r3, #1
   12a1c:	bl	11ff0 <__assert_fail@plt>
   12a20:	movw	r0, #42449	; 0xa5d1
   12a24:	movw	r1, #42174	; 0xa4be
   12a28:	movw	r3, #42375	; 0xa587
   12a2c:	mov	r2, #107	; 0x6b
   12a30:	movt	r0, #1
   12a34:	movt	r1, #1
   12a38:	movt	r3, #1
   12a3c:	bl	11ff0 <__assert_fail@plt>

00012a40 <boolean_expression_complex@@Base>:
   12a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a44:	add	fp, sp, #28
   12a48:	sub	sp, sp, #20
   12a4c:	movw	r9, #50448	; 0xc510
   12a50:	movt	r9, #2
   12a54:	mov	r6, r9
   12a58:	ldr	r0, [r6, #48]!	; 0x30
   12a5c:	adds	r0, r0, #1
   12a60:	str	r0, [r6]
   12a64:	ldr	r0, [r6, #4]
   12a68:	adc	r0, r0, #0
   12a6c:	str	r0, [r6, #4]
   12a70:	mov	r0, #3
   12a74:	bl	11ed0 <malloc@plt>
   12a78:	mov	r4, r0
   12a7c:	mov	r0, #3
   12a80:	bl	11ed0 <malloc@plt>
   12a84:	mov	r7, r0
   12a88:	mov	r0, #3
   12a8c:	bl	11ed0 <malloc@plt>
   12a90:	mov	sl, r0
   12a94:	movw	r0, #15676	; 0x3d3c
   12a98:	movw	r1, #9766	; 0x2626
   12a9c:	add	r8, sp, #4
   12aa0:	strh	r0, [r4]
   12aa4:	mov	r0, #0
   12aa8:	strb	r0, [r7, #2]
   12aac:	strb	r0, [r4, #2]
   12ab0:	strb	r0, [sl, #2]
   12ab4:	movw	r0, #15677	; 0x3d3d
   12ab8:	strh	r1, [r7]
   12abc:	add	r1, sp, #8
   12ac0:	strh	r0, [sl]
   12ac4:	mov	r0, r8
   12ac8:	bl	162b0 <init_grammar@@Base>
   12acc:	mov	r0, #40	; 0x28
   12ad0:	bl	11ed0 <malloc@plt>
   12ad4:	mov	r5, r0
   12ad8:	mov	r0, #8
   12adc:	bl	11ed0 <malloc@plt>
   12ae0:	mov	r1, #2
   12ae4:	str	r0, [r5]
   12ae8:	bl	149e0 <init_token_int_value@@Base>
   12aec:	mov	r0, #8
   12af0:	bl	11ed0 <malloc@plt>
   12af4:	mov	r1, #2
   12af8:	str	r0, [r5, #4]
   12afc:	bl	149e0 <init_token_int_value@@Base>
   12b00:	mov	r0, #8
   12b04:	bl	11ed0 <malloc@plt>
   12b08:	mov	r1, r4
   12b0c:	str	r0, [r5, #8]
   12b10:	bl	14ca0 <init_token_boolean_op@@Base>
   12b14:	mov	r0, #8
   12b18:	bl	11ed0 <malloc@plt>
   12b1c:	mov	r1, #1
   12b20:	str	r0, [r5, #12]
   12b24:	bl	149e0 <init_token_int_value@@Base>
   12b28:	mov	r0, #8
   12b2c:	bl	11ed0 <malloc@plt>
   12b30:	mov	r1, r7
   12b34:	str	r0, [r5, #16]
   12b38:	bl	14ca0 <init_token_boolean_op@@Base>
   12b3c:	mov	r0, #8
   12b40:	bl	11ed0 <malloc@plt>
   12b44:	mov	r1, #4
   12b48:	str	r0, [r5, #20]
   12b4c:	bl	149e0 <init_token_int_value@@Base>
   12b50:	mov	r0, #8
   12b54:	bl	11ed0 <malloc@plt>
   12b58:	mov	r1, #4
   12b5c:	str	r0, [r5, #24]
   12b60:	bl	149e0 <init_token_int_value@@Base>
   12b64:	mov	r0, #8
   12b68:	bl	11ed0 <malloc@plt>
   12b6c:	mov	r1, sl
   12b70:	str	r0, [r5, #28]
   12b74:	bl	14ca0 <init_token_boolean_op@@Base>
   12b78:	mov	r0, #8
   12b7c:	bl	11ed0 <malloc@plt>
   12b80:	mov	r1, #4
   12b84:	str	r0, [r5, #32]
   12b88:	bl	149e0 <init_token_int_value@@Base>
   12b8c:	mov	r0, #4
   12b90:	bl	11ed0 <malloc@plt>
   12b94:	str	r0, [r5, #36]	; 0x24
   12b98:	bl	14aa0 <init_token_cpar@@Base>
   12b9c:	movw	r4, #53136	; 0xcf90
   12ba0:	mov	r0, #10
   12ba4:	movt	r4, #2
   12ba8:	str	r0, [r4, #220]	; 0xdc
   12bac:	mov	r0, r8
   12bb0:	str	r5, [r4, #228]	; 0xe4
   12bb4:	bl	16a60 <read_boolean_expression@@Base>
   12bb8:	ldr	r1, [r4, #204]	; 0xcc
   12bbc:	mov	r2, #16
   12bc0:	cmp	r1, #10
   12bc4:	movweq	r2, #8
   12bc8:	ldr	r2, [r6, r2]!
   12bcc:	adds	r2, r2, #1
   12bd0:	str	r2, [r6]
   12bd4:	ldr	r2, [r6, #4]
   12bd8:	adc	r2, r2, #0
   12bdc:	cmp	r1, #10
   12be0:	str	r2, [r6, #4]
   12be4:	bne	12c2c <boolean_expression_complex@@Base+0x1ec>
   12be8:	ldr	r0, [r0]
   12bec:	mov	r1, #32
   12bf0:	cmp	r0, #5
   12bf4:	movweq	r1, #24
   12bf8:	add	r1, r9, r1
   12bfc:	ldrd	r2, [r1, #48]	; 0x30
   12c00:	adds	r2, r2, #1
   12c04:	adc	r3, r3, #0
   12c08:	cmp	r0, #5
   12c0c:	strd	r2, [r1, #48]	; 0x30
   12c10:	bne	12c4c <boolean_expression_complex@@Base+0x20c>
   12c14:	ldrd	r0, [r9, #88]	; 0x58
   12c18:	adds	r0, r0, #1
   12c1c:	adc	r1, r1, #0
   12c20:	strd	r0, [r9, #88]	; 0x58
   12c24:	sub	sp, fp, #28
   12c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c2c:	movw	r0, #42481	; 0xa5f1
   12c30:	movw	r1, #42174	; 0xa4be
   12c34:	movw	r3, #42508	; 0xa60c
   12c38:	mov	r2, #166	; 0xa6
   12c3c:	movt	r0, #1
   12c40:	movt	r1, #1
   12c44:	movt	r3, #1
   12c48:	bl	11ff0 <__assert_fail@plt>
   12c4c:	movw	r0, #42449	; 0xa5d1
   12c50:	movw	r1, #42174	; 0xa4be
   12c54:	movw	r3, #42508	; 0xa60c
   12c58:	mov	r2, #167	; 0xa7
   12c5c:	movt	r0, #1
   12c60:	movt	r1, #1
   12c64:	movt	r3, #1
   12c68:	bl	11ff0 <__assert_fail@plt>

00012c6c <boolean_binary_operator_is_read_properly@@Base>:
   12c6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c70:	add	fp, sp, #24
   12c74:	sub	sp, sp, #16
   12c78:	movw	r7, #49712	; 0xc230
   12c7c:	mov	r8, #3
   12c80:	movt	r7, #2
   12c84:	ldrd	r0, [r7]
   12c88:	adds	r0, r0, #1
   12c8c:	adc	r1, r1, #0
   12c90:	strd	r0, [r7]
   12c94:	mov	r0, #3
   12c98:	bl	11ed0 <malloc@plt>
   12c9c:	mov	r5, r0
   12ca0:	movw	r0, #15649	; 0x3d21
   12ca4:	mov	r4, sp
   12ca8:	add	r1, sp, #4
   12cac:	strh	r0, [r5]
   12cb0:	mov	r0, #0
   12cb4:	strb	r0, [r5, #2]
   12cb8:	mov	r0, r4
   12cbc:	bl	162b0 <init_grammar@@Base>
   12cc0:	mov	r0, #12
   12cc4:	bl	11ed0 <malloc@plt>
   12cc8:	mov	r6, r0
   12ccc:	mov	r0, #8
   12cd0:	bl	11ed0 <malloc@plt>
   12cd4:	mov	r1, #2
   12cd8:	str	r0, [r6]
   12cdc:	bl	149e0 <init_token_int_value@@Base>
   12ce0:	mov	r0, #8
   12ce4:	bl	11ed0 <malloc@plt>
   12ce8:	mov	r1, r5
   12cec:	str	r0, [r6, #4]
   12cf0:	bl	14ca0 <init_token_boolean_op@@Base>
   12cf4:	mov	r0, #8
   12cf8:	bl	11ed0 <malloc@plt>
   12cfc:	mov	r1, #1
   12d00:	str	r0, [r6, #8]
   12d04:	bl	149e0 <init_token_int_value@@Base>
   12d08:	movw	r5, #53136	; 0xcf90
   12d0c:	mov	r0, r4
   12d10:	movt	r5, #2
   12d14:	str	r8, [r5, #220]	; 0xdc
   12d18:	str	r6, [r5, #228]	; 0xe4
   12d1c:	bl	16d74 <read_boolean_binary_expression@@Base>
   12d20:	ldr	r1, [r5, #204]	; 0xcc
   12d24:	mov	r2, #16
   12d28:	mov	r3, r7
   12d2c:	cmp	r1, #3
   12d30:	movweq	r2, #8
   12d34:	ldr	r2, [r3, r2]!
   12d38:	adds	r2, r2, #1
   12d3c:	str	r2, [r3]
   12d40:	ldr	r2, [r3, #4]
   12d44:	adc	r2, r2, #0
   12d48:	cmp	r1, #3
   12d4c:	str	r2, [r3, #4]
   12d50:	bne	12e44 <boolean_binary_operator_is_read_properly@@Base+0x1d8>
   12d54:	ldr	r1, [r0]
   12d58:	mov	r2, #32
   12d5c:	mov	r3, r7
   12d60:	cmp	r1, #5
   12d64:	movweq	r2, #24
   12d68:	ldr	r2, [r3, r2]!
   12d6c:	adds	r2, r2, #1
   12d70:	str	r2, [r3]
   12d74:	ldr	r2, [r3, #4]
   12d78:	adc	r2, r2, #0
   12d7c:	cmp	r1, #5
   12d80:	str	r2, [r3, #4]
   12d84:	bne	12e64 <boolean_binary_operator_is_read_properly@@Base+0x1f8>
   12d88:	ldr	r1, [r0, #8]
   12d8c:	mov	r2, #48	; 0x30
   12d90:	mov	r3, r7
   12d94:	ldr	r1, [r1]
   12d98:	cmp	r1, #1
   12d9c:	movweq	r2, #40	; 0x28
   12da0:	ldr	r2, [r3, r2]!
   12da4:	adds	r2, r2, #1
   12da8:	str	r2, [r3]
   12dac:	ldr	r2, [r3, #4]
   12db0:	adc	r2, r2, #0
   12db4:	cmp	r1, #1
   12db8:	str	r2, [r3, #4]
   12dbc:	bne	12e84 <boolean_binary_operator_is_read_properly@@Base+0x218>
   12dc0:	ldr	r1, [r0, #16]
   12dc4:	mov	r2, #64	; 0x40
   12dc8:	mov	r3, r7
   12dcc:	cmp	r1, #1
   12dd0:	movweq	r2, #56	; 0x38
   12dd4:	ldr	r2, [r3, r2]!
   12dd8:	adds	r2, r2, #1
   12ddc:	str	r2, [r3]
   12de0:	ldr	r2, [r3, #4]
   12de4:	adc	r2, r2, #0
   12de8:	cmp	r1, #1
   12dec:	str	r2, [r3, #4]
   12df0:	bne	12ea4 <boolean_binary_operator_is_read_properly@@Base+0x238>
   12df4:	ldr	r0, [r0, #12]
   12df8:	mov	r1, #80	; 0x50
   12dfc:	mov	r2, r7
   12e00:	ldr	r0, [r0]
   12e04:	cmp	r0, #1
   12e08:	movweq	r1, #72	; 0x48
   12e0c:	ldr	r1, [r2, r1]!
   12e10:	adds	r1, r1, #1
   12e14:	str	r1, [r2]
   12e18:	ldr	r1, [r2, #4]
   12e1c:	adc	r1, r1, #0
   12e20:	cmp	r0, #1
   12e24:	str	r1, [r2, #4]
   12e28:	bne	12ec4 <boolean_binary_operator_is_read_properly@@Base+0x258>
   12e2c:	ldrd	r0, [r7, #88]	; 0x58
   12e30:	adds	r0, r0, #1
   12e34:	adc	r1, r1, #0
   12e38:	strd	r0, [r7, #88]	; 0x58
   12e3c:	sub	sp, fp, #24
   12e40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e44:	movw	r0, #42542	; 0xa62e
   12e48:	movw	r1, #42174	; 0xa4be
   12e4c:	movw	r3, #42568	; 0xa648
   12e50:	mov	r2, #200	; 0xc8
   12e54:	movt	r0, #1
   12e58:	movt	r1, #1
   12e5c:	movt	r3, #1
   12e60:	bl	11ff0 <__assert_fail@plt>
   12e64:	movw	r0, #42449	; 0xa5d1
   12e68:	movw	r1, #42174	; 0xa4be
   12e6c:	movw	r3, #42568	; 0xa648
   12e70:	mov	r2, #201	; 0xc9
   12e74:	movt	r0, #1
   12e78:	movt	r1, #1
   12e7c:	movt	r3, #1
   12e80:	bl	11ff0 <__assert_fail@plt>
   12e84:	movw	r0, #42616	; 0xa678
   12e88:	movw	r1, #42174	; 0xa4be
   12e8c:	movw	r3, #42568	; 0xa648
   12e90:	mov	r2, #203	; 0xcb
   12e94:	movt	r0, #1
   12e98:	movt	r1, #1
   12e9c:	movt	r3, #1
   12ea0:	bl	11ff0 <__assert_fail@plt>
   12ea4:	movw	r0, #42643	; 0xa693
   12ea8:	movw	r1, #42174	; 0xa4be
   12eac:	movw	r3, #42568	; 0xa648
   12eb0:	mov	r2, #204	; 0xcc
   12eb4:	movt	r0, #1
   12eb8:	movt	r1, #1
   12ebc:	movt	r3, #1
   12ec0:	bl	11ff0 <__assert_fail@plt>
   12ec4:	movw	r0, #42668	; 0xa6ac
   12ec8:	movw	r1, #42174	; 0xa4be
   12ecc:	movw	r3, #42568	; 0xa648
   12ed0:	mov	r2, #205	; 0xcd
   12ed4:	movt	r0, #1
   12ed8:	movt	r1, #1
   12edc:	movt	r3, #1
   12ee0:	bl	11ff0 <__assert_fail@plt>

00012ee4 <boolean_unary_operator_is_read_properly@@Base>:
   12ee4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ee8:	add	fp, sp, #24
   12eec:	sub	sp, sp, #16
   12ef0:	movw	r7, #49808	; 0xc290
   12ef4:	mov	r8, #2
   12ef8:	movt	r7, #2
   12efc:	ldrd	r0, [r7]
   12f00:	adds	r0, r0, #1
   12f04:	adc	r1, r1, #0
   12f08:	strd	r0, [r7]
   12f0c:	mov	r0, #2
   12f10:	bl	11ed0 <malloc@plt>
   12f14:	mov	r5, r0
   12f18:	mov	r0, #33	; 0x21
   12f1c:	mov	r4, sp
   12f20:	add	r1, sp, #4
   12f24:	strh	r0, [r5]
   12f28:	mov	r0, r4
   12f2c:	bl	162b0 <init_grammar@@Base>
   12f30:	mov	r0, #8
   12f34:	bl	11ed0 <malloc@plt>
   12f38:	mov	r6, r0
   12f3c:	mov	r0, #8
   12f40:	bl	11ed0 <malloc@plt>
   12f44:	mov	r1, r5
   12f48:	str	r0, [r6]
   12f4c:	bl	14ca0 <init_token_boolean_op@@Base>
   12f50:	mov	r0, #8
   12f54:	bl	11ed0 <malloc@plt>
   12f58:	mov	r1, #1
   12f5c:	str	r0, [r6, #4]
   12f60:	bl	149e0 <init_token_int_value@@Base>
   12f64:	movw	r5, #53136	; 0xcf90
   12f68:	mov	r0, r4
   12f6c:	movt	r5, #2
   12f70:	str	r8, [r5, #220]	; 0xdc
   12f74:	str	r6, [r5, #228]	; 0xe4
   12f78:	bl	16f90 <read_boolean_unary_expression@@Base>
   12f7c:	ldr	r1, [r5, #204]	; 0xcc
   12f80:	mov	r2, #16
   12f84:	mov	r3, r7
   12f88:	cmp	r1, #2
   12f8c:	movweq	r2, #8
   12f90:	ldr	r2, [r3, r2]!
   12f94:	adds	r2, r2, #1
   12f98:	str	r2, [r3]
   12f9c:	ldr	r2, [r3, #4]
   12fa0:	adc	r2, r2, #0
   12fa4:	cmp	r1, #2
   12fa8:	str	r2, [r3, #4]
   12fac:	bne	1309c <boolean_unary_operator_is_read_properly@@Base+0x1b8>
   12fb0:	ldr	r1, [r0]
   12fb4:	mov	r2, #32
   12fb8:	mov	r3, r7
   12fbc:	cmp	r1, #5
   12fc0:	movweq	r2, #24
   12fc4:	ldr	r2, [r3, r2]!
   12fc8:	adds	r2, r2, #1
   12fcc:	str	r2, [r3]
   12fd0:	ldr	r2, [r3, #4]
   12fd4:	adc	r2, r2, #0
   12fd8:	cmp	r1, #5
   12fdc:	str	r2, [r3, #4]
   12fe0:	bne	130bc <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12fe4:	ldr	r1, [r0, #8]
   12fe8:	mov	r2, #48	; 0x30
   12fec:	mov	r3, r7
   12ff0:	ldr	r1, [r1]
   12ff4:	cmp	r1, #1
   12ff8:	movweq	r2, #40	; 0x28
   12ffc:	ldr	r2, [r3, r2]!
   13000:	adds	r2, r2, #1
   13004:	str	r2, [r3]
   13008:	ldr	r2, [r3, #4]
   1300c:	adc	r2, r2, #0
   13010:	cmp	r1, #1
   13014:	str	r2, [r3, #4]
   13018:	bne	130dc <boolean_unary_operator_is_read_properly@@Base+0x1f8>
   1301c:	ldr	r1, [r0, #16]
   13020:	mov	r2, #64	; 0x40
   13024:	mov	r3, r7
   13028:	cmp	r1, #8
   1302c:	movweq	r2, #56	; 0x38
   13030:	ldr	r2, [r3, r2]!
   13034:	adds	r2, r2, #1
   13038:	str	r2, [r3]
   1303c:	ldr	r2, [r3, #4]
   13040:	adc	r2, r2, #0
   13044:	cmp	r1, #8
   13048:	str	r2, [r3, #4]
   1304c:	bne	130fc <boolean_unary_operator_is_read_properly@@Base+0x218>
   13050:	ldr	r0, [r0, #12]
   13054:	mov	r1, #80	; 0x50
   13058:	mov	r2, r7
   1305c:	cmp	r0, #0
   13060:	movweq	r1, #72	; 0x48
   13064:	ldr	r1, [r2, r1]!
   13068:	adds	r1, r1, #1
   1306c:	str	r1, [r2]
   13070:	ldr	r1, [r2, #4]
   13074:	adc	r1, r1, #0
   13078:	cmp	r0, #0
   1307c:	str	r1, [r2, #4]
   13080:	bne	1311c <boolean_unary_operator_is_read_properly@@Base+0x238>
   13084:	ldrd	r0, [r7, #88]	; 0x58
   13088:	adds	r0, r0, #1
   1308c:	adc	r1, r1, #0
   13090:	strd	r0, [r7, #88]	; 0x58
   13094:	sub	sp, fp, #24
   13098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1309c:	movw	r0, #42283	; 0xa52b
   130a0:	movw	r1, #42174	; 0xa4be
   130a4:	movw	r3, #42696	; 0xa6c8
   130a8:	mov	r2, #235	; 0xeb
   130ac:	movt	r0, #1
   130b0:	movt	r1, #1
   130b4:	movt	r3, #1
   130b8:	bl	11ff0 <__assert_fail@plt>
   130bc:	movw	r0, #42449	; 0xa5d1
   130c0:	movw	r1, #42174	; 0xa4be
   130c4:	movw	r3, #42696	; 0xa6c8
   130c8:	mov	r2, #236	; 0xec
   130cc:	movt	r0, #1
   130d0:	movt	r1, #1
   130d4:	movt	r3, #1
   130d8:	bl	11ff0 <__assert_fail@plt>
   130dc:	movw	r0, #42616	; 0xa678
   130e0:	movw	r1, #42174	; 0xa4be
   130e4:	movw	r3, #42696	; 0xa6c8
   130e8:	mov	r2, #238	; 0xee
   130ec:	movt	r0, #1
   130f0:	movt	r1, #1
   130f4:	movt	r3, #1
   130f8:	bl	11ff0 <__assert_fail@plt>
   130fc:	movw	r0, #42743	; 0xa6f7
   13100:	movw	r1, #42174	; 0xa4be
   13104:	movw	r3, #42696	; 0xa6c8
   13108:	mov	r2, #239	; 0xef
   1310c:	movt	r0, #1
   13110:	movt	r1, #1
   13114:	movt	r3, #1
   13118:	bl	11ff0 <__assert_fail@plt>
   1311c:	movw	r0, #42763	; 0xa70b
   13120:	movw	r1, #42174	; 0xa4be
   13124:	movw	r3, #42696	; 0xa6c8
   13128:	mov	r2, #240	; 0xf0
   1312c:	movt	r0, #1
   13130:	movt	r1, #1
   13134:	movt	r3, #1
   13138:	bl	11ff0 <__assert_fail@plt>

0001313c <if_statement_only@@Base>:
   1313c:	push	{r4, r5, r6, r7, fp, lr}
   13140:	add	fp, sp, #16
   13144:	sub	sp, sp, #16
   13148:	movw	r7, #49904	; 0xc2f0
   1314c:	mov	r4, sp
   13150:	movt	r7, #2
   13154:	ldrd	r0, [r7]
   13158:	adds	r0, r0, #1
   1315c:	adc	r1, r1, #0
   13160:	strd	r0, [r7]
   13164:	add	r1, sp, #4
   13168:	mov	r0, r4
   1316c:	bl	162b0 <init_grammar@@Base>
   13170:	mov	r0, #3
   13174:	bl	11ed0 <malloc@plt>
   13178:	mov	r6, r0
   1317c:	movw	r0, #15649	; 0x3d21
   13180:	strh	r0, [r6]
   13184:	mov	r0, #0
   13188:	strb	r0, [r6, #2]
   1318c:	mov	r0, #36	; 0x24
   13190:	bl	11ed0 <malloc@plt>
   13194:	mov	r5, r0
   13198:	mov	r0, #4
   1319c:	bl	11ed0 <malloc@plt>
   131a0:	str	r0, [r5]
   131a4:	bl	14a60 <init_token_opar@@Base>
   131a8:	mov	r0, #8
   131ac:	bl	11ed0 <malloc@plt>
   131b0:	mov	r1, #1
   131b4:	str	r0, [r5, #4]
   131b8:	bl	149e0 <init_token_int_value@@Base>
   131bc:	mov	r0, #8
   131c0:	bl	11ed0 <malloc@plt>
   131c4:	mov	r1, #1
   131c8:	str	r0, [r5, #8]
   131cc:	bl	149e0 <init_token_int_value@@Base>
   131d0:	mov	r0, #8
   131d4:	bl	11ed0 <malloc@plt>
   131d8:	mov	r1, r6
   131dc:	str	r0, [r5, #12]
   131e0:	bl	14ca0 <init_token_boolean_op@@Base>
   131e4:	mov	r0, #8
   131e8:	bl	11ed0 <malloc@plt>
   131ec:	mov	r1, #1
   131f0:	str	r0, [r5, #16]
   131f4:	bl	149e0 <init_token_int_value@@Base>
   131f8:	mov	r0, #4
   131fc:	bl	11ed0 <malloc@plt>
   13200:	str	r0, [r5, #20]
   13204:	bl	14aa0 <init_token_cpar@@Base>
   13208:	mov	r0, #4
   1320c:	bl	11ed0 <malloc@plt>
   13210:	str	r0, [r5, #24]
   13214:	bl	14ae0 <init_token_obra@@Base>
   13218:	mov	r0, #4
   1321c:	bl	11ed0 <malloc@plt>
   13220:	str	r0, [r5, #28]
   13224:	bl	14b20 <init_token_cbra@@Base>
   13228:	mov	r0, #4
   1322c:	bl	11ed0 <malloc@plt>
   13230:	str	r0, [r5, #32]
   13234:	bl	14be0 <init_token_eof@@Base>
   13238:	movw	r6, #53136	; 0xcf90
   1323c:	mov	r0, #9
   13240:	movt	r6, #2
   13244:	str	r0, [r6, #220]	; 0xdc
   13248:	mov	r0, r4
   1324c:	str	r5, [r6, #228]	; 0xe4
   13250:	bl	168e8 <read_if_statement@@Base>
   13254:	ldr	r1, [r6, #204]	; 0xcc
   13258:	mov	r2, #16
   1325c:	mov	r3, r7
   13260:	cmp	r1, #9
   13264:	movweq	r2, #8
   13268:	ldr	r2, [r3, r2]!
   1326c:	adds	r2, r2, #1
   13270:	str	r2, [r3]
   13274:	ldr	r2, [r3, #4]
   13278:	adc	r2, r2, #0
   1327c:	cmp	r1, #9
   13280:	str	r2, [r3, #4]
   13284:	bne	13304 <if_statement_only@@Base+0x1c8>
   13288:	mov	r1, #32
   1328c:	cmp	r0, #0
   13290:	mov	r2, r7
   13294:	movwne	r1, #24
   13298:	ldr	r1, [r2, r1]!
   1329c:	adds	r1, r1, #1
   132a0:	str	r1, [r2]
   132a4:	ldr	r1, [r2, #4]
   132a8:	adc	r1, r1, #0
   132ac:	cmp	r0, #0
   132b0:	str	r1, [r2, #4]
   132b4:	beq	13324 <if_statement_only@@Base+0x1e8>
   132b8:	ldr	r0, [r0]
   132bc:	mov	r1, #48	; 0x30
   132c0:	mov	r2, r7
   132c4:	cmp	r0, #4
   132c8:	movweq	r1, #40	; 0x28
   132cc:	ldr	r1, [r2, r1]!
   132d0:	adds	r1, r1, #1
   132d4:	str	r1, [r2]
   132d8:	ldr	r1, [r2, #4]
   132dc:	adc	r1, r1, #0
   132e0:	cmp	r0, #4
   132e4:	str	r1, [r2, #4]
   132e8:	bne	13344 <if_statement_only@@Base+0x208>
   132ec:	ldrd	r0, [r7, #56]	; 0x38
   132f0:	adds	r0, r0, #1
   132f4:	adc	r1, r1, #0
   132f8:	strd	r0, [r7, #56]	; 0x38
   132fc:	sub	sp, fp, #16
   13300:	pop	{r4, r5, r6, r7, fp, pc}
   13304:	movw	r0, #42784	; 0xa720
   13308:	movw	r1, #42174	; 0xa4be
   1330c:	movw	r3, #42810	; 0xa73a
   13310:	movw	r2, #283	; 0x11b
   13314:	movt	r0, #1
   13318:	movt	r1, #1
   1331c:	movt	r3, #1
   13320:	bl	11ff0 <__assert_fail@plt>
   13324:	movw	r0, #42835	; 0xa753
   13328:	movw	r1, #42174	; 0xa4be
   1332c:	movw	r3, #42810	; 0xa73a
   13330:	mov	r2, #284	; 0x11c
   13334:	movt	r0, #1
   13338:	movt	r1, #1
   1333c:	movt	r3, #1
   13340:	bl	11ff0 <__assert_fail@plt>
   13344:	movw	r0, #42847	; 0xa75f
   13348:	movw	r1, #42174	; 0xa4be
   1334c:	movw	r3, #42810	; 0xa73a
   13350:	movw	r2, #285	; 0x11d
   13354:	movt	r0, #1
   13358:	movt	r1, #1
   1335c:	movt	r3, #1
   13360:	bl	11ff0 <__assert_fail@plt>

00013364 <if_else_statements@@Base>:
   13364:	push	{r4, r5, r6, r7, fp, lr}
   13368:	add	fp, sp, #16
   1336c:	sub	sp, sp, #16
   13370:	movw	r7, #49968	; 0xc330
   13374:	mov	r4, sp
   13378:	movt	r7, #2
   1337c:	ldrd	r0, [r7]
   13380:	adds	r0, r0, #1
   13384:	adc	r1, r1, #0
   13388:	strd	r0, [r7]
   1338c:	add	r1, sp, #4
   13390:	mov	r0, r4
   13394:	bl	162b0 <init_grammar@@Base>
   13398:	mov	r0, #3
   1339c:	bl	11ed0 <malloc@plt>
   133a0:	mov	r6, r0
   133a4:	movw	r0, #15649	; 0x3d21
   133a8:	strh	r0, [r6]
   133ac:	mov	r0, #0
   133b0:	strb	r0, [r6, #2]
   133b4:	mov	r0, #44	; 0x2c
   133b8:	bl	11ed0 <malloc@plt>
   133bc:	mov	r5, r0
   133c0:	mov	r0, #4
   133c4:	bl	11ed0 <malloc@plt>
   133c8:	str	r0, [r5]
   133cc:	bl	14a60 <init_token_opar@@Base>
   133d0:	mov	r0, #8
   133d4:	bl	11ed0 <malloc@plt>
   133d8:	mov	r1, #1
   133dc:	str	r0, [r5, #4]
   133e0:	bl	149e0 <init_token_int_value@@Base>
   133e4:	mov	r0, #8
   133e8:	bl	11ed0 <malloc@plt>
   133ec:	mov	r1, #1
   133f0:	str	r0, [r5, #8]
   133f4:	bl	149e0 <init_token_int_value@@Base>
   133f8:	mov	r0, #8
   133fc:	bl	11ed0 <malloc@plt>
   13400:	mov	r1, r6
   13404:	str	r0, [r5, #12]
   13408:	bl	14ca0 <init_token_boolean_op@@Base>
   1340c:	mov	r0, #8
   13410:	bl	11ed0 <malloc@plt>
   13414:	mov	r1, #1
   13418:	str	r0, [r5, #16]
   1341c:	bl	149e0 <init_token_int_value@@Base>
   13420:	mov	r0, #4
   13424:	bl	11ed0 <malloc@plt>
   13428:	str	r0, [r5, #20]
   1342c:	bl	14aa0 <init_token_cpar@@Base>
   13430:	mov	r0, #4
   13434:	bl	11ed0 <malloc@plt>
   13438:	str	r0, [r5, #24]
   1343c:	bl	14ae0 <init_token_obra@@Base>
   13440:	mov	r0, #4
   13444:	bl	11ed0 <malloc@plt>
   13448:	str	r0, [r5, #28]
   1344c:	bl	14b20 <init_token_cbra@@Base>
   13450:	mov	r0, #4
   13454:	bl	11ed0 <malloc@plt>
   13458:	str	r0, [r5, #32]
   1345c:	bl	14c60 <init_token_else@@Base>
   13460:	mov	r0, #4
   13464:	bl	11ed0 <malloc@plt>
   13468:	str	r0, [r5, #36]	; 0x24
   1346c:	bl	14ae0 <init_token_obra@@Base>
   13470:	mov	r0, #4
   13474:	bl	11ed0 <malloc@plt>
   13478:	str	r0, [r5, #40]	; 0x28
   1347c:	bl	14b20 <init_token_cbra@@Base>
   13480:	movw	r6, #53136	; 0xcf90
   13484:	mov	r0, #11
   13488:	movt	r6, #2
   1348c:	str	r0, [r6, #220]	; 0xdc
   13490:	mov	r0, r4
   13494:	str	r5, [r6, #228]	; 0xe4
   13498:	bl	168e8 <read_if_statement@@Base>
   1349c:	ldr	r1, [r6, #204]	; 0xcc
   134a0:	mov	r2, #16
   134a4:	mov	r3, r7
   134a8:	cmp	r1, #11
   134ac:	movweq	r2, #8
   134b0:	ldr	r2, [r3, r2]!
   134b4:	adds	r2, r2, #1
   134b8:	str	r2, [r3]
   134bc:	ldr	r2, [r3, #4]
   134c0:	adc	r2, r2, #0
   134c4:	cmp	r1, #11
   134c8:	str	r2, [r3, #4]
   134cc:	bne	1354c <if_else_statements@@Base+0x1e8>
   134d0:	mov	r1, #32
   134d4:	cmp	r0, #0
   134d8:	mov	r2, r7
   134dc:	movwne	r1, #24
   134e0:	ldr	r1, [r2, r1]!
   134e4:	adds	r1, r1, #1
   134e8:	str	r1, [r2]
   134ec:	ldr	r1, [r2, #4]
   134f0:	adc	r1, r1, #0
   134f4:	cmp	r0, #0
   134f8:	str	r1, [r2, #4]
   134fc:	beq	1356c <if_else_statements@@Base+0x208>
   13500:	ldr	r0, [r0]
   13504:	mov	r1, #48	; 0x30
   13508:	mov	r2, r7
   1350c:	cmp	r0, #4
   13510:	movweq	r1, #40	; 0x28
   13514:	ldr	r1, [r2, r1]!
   13518:	adds	r1, r1, #1
   1351c:	str	r1, [r2]
   13520:	ldr	r1, [r2, #4]
   13524:	adc	r1, r1, #0
   13528:	cmp	r0, #4
   1352c:	str	r1, [r2, #4]
   13530:	bne	1358c <if_else_statements@@Base+0x228>
   13534:	ldrd	r0, [r7, #56]	; 0x38
   13538:	adds	r0, r0, #1
   1353c:	adc	r1, r1, #0
   13540:	strd	r0, [r7, #56]	; 0x38
   13544:	sub	sp, fp, #16
   13548:	pop	{r4, r5, r6, r7, fp, pc}
   1354c:	movw	r0, #42865	; 0xa771
   13550:	movw	r1, #42174	; 0xa4be
   13554:	movw	r3, #42892	; 0xa78c
   13558:	mov	r2, #332	; 0x14c
   1355c:	movt	r0, #1
   13560:	movt	r1, #1
   13564:	movt	r3, #1
   13568:	bl	11ff0 <__assert_fail@plt>
   1356c:	movw	r0, #42835	; 0xa753
   13570:	movw	r1, #42174	; 0xa4be
   13574:	movw	r3, #42892	; 0xa78c
   13578:	movw	r2, #333	; 0x14d
   1357c:	movt	r0, #1
   13580:	movt	r1, #1
   13584:	movt	r3, #1
   13588:	bl	11ff0 <__assert_fail@plt>
   1358c:	movw	r0, #42847	; 0xa75f
   13590:	movw	r1, #42174	; 0xa4be
   13594:	movw	r3, #42892	; 0xa78c
   13598:	movw	r2, #334	; 0x14e
   1359c:	movt	r0, #1
   135a0:	movt	r1, #1
   135a4:	movt	r3, #1
   135a8:	bl	11ff0 <__assert_fail@plt>

000135ac <body_with_two_returns@@Base>:
   135ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135b0:	add	fp, sp, #24
   135b4:	sub	sp, sp, #16
   135b8:	movw	r6, #50032	; 0xc370
   135bc:	mov	r9, sp
   135c0:	movt	r6, #2
   135c4:	ldrd	r0, [r6]
   135c8:	adds	r0, r0, #1
   135cc:	adc	r1, r1, #0
   135d0:	strd	r0, [r6]
   135d4:	add	r1, sp, #4
   135d8:	mov	r0, r9
   135dc:	bl	162b0 <init_grammar@@Base>
   135e0:	mov	r0, #32
   135e4:	mov	r7, #32
   135e8:	bl	11ed0 <malloc@plt>
   135ec:	mov	r5, r0
   135f0:	mov	r0, #4
   135f4:	bl	11ed0 <malloc@plt>
   135f8:	str	r0, [r5]
   135fc:	bl	14ae0 <init_token_obra@@Base>
   13600:	mov	r0, #4
   13604:	bl	11ed0 <malloc@plt>
   13608:	str	r0, [r5, #4]
   1360c:	bl	14b60 <init_token_return@@Base>
   13610:	mov	r0, #8
   13614:	mov	r8, #8
   13618:	bl	11ed0 <malloc@plt>
   1361c:	mov	r1, #1
   13620:	str	r0, [r5, #8]
   13624:	bl	149e0 <init_token_int_value@@Base>
   13628:	mov	r0, #4
   1362c:	bl	11ed0 <malloc@plt>
   13630:	str	r0, [r5, #12]
   13634:	bl	14ba0 <init_token_semicolon@@Base>
   13638:	mov	r0, #4
   1363c:	bl	11ed0 <malloc@plt>
   13640:	str	r0, [r5, #16]
   13644:	bl	14b60 <init_token_return@@Base>
   13648:	mov	r0, #8
   1364c:	bl	11ed0 <malloc@plt>
   13650:	mov	r1, #1
   13654:	str	r0, [r5, #20]
   13658:	bl	149e0 <init_token_int_value@@Base>
   1365c:	mov	r0, #4
   13660:	bl	11ed0 <malloc@plt>
   13664:	str	r0, [r5, #24]
   13668:	bl	14ba0 <init_token_semicolon@@Base>
   1366c:	mov	r0, #4
   13670:	bl	11ed0 <malloc@plt>
   13674:	str	r0, [r5, #28]
   13678:	bl	14b20 <init_token_cbra@@Base>
   1367c:	movw	r4, #53136	; 0xcf90
   13680:	mov	r0, r9
   13684:	movt	r4, #2
   13688:	str	r8, [r4, #220]	; 0xdc
   1368c:	str	r5, [r4, #228]	; 0xe4
   13690:	bl	16548 <read_body@@Base>
   13694:	ldr	r1, [r4, #204]	; 0xcc
   13698:	mov	r3, r6
   1369c:	cmp	r1, #8
   136a0:	mov	r2, r1
   136a4:	movwne	r2, #16
   136a8:	ldr	r2, [r3, r2]!
   136ac:	adds	r2, r2, #1
   136b0:	str	r2, [r3]
   136b4:	ldr	r2, [r3, #4]
   136b8:	adc	r2, r2, #0
   136bc:	cmp	r1, #8
   136c0:	str	r2, [r3, #4]
   136c4:	bne	137ac <body_with_two_returns@@Base+0x200>
   136c8:	cmp	r0, #0
   136cc:	mov	r1, r6
   136d0:	movwne	r7, #24
   136d4:	ldr	r2, [r1, r7]!
   136d8:	adds	r2, r2, #1
   136dc:	str	r2, [r1]
   136e0:	ldr	r2, [r1, #4]
   136e4:	adc	r2, r2, #0
   136e8:	cmp	r0, #0
   136ec:	str	r2, [r1, #4]
   136f0:	beq	137cc <body_with_two_returns@@Base+0x220>
   136f4:	ldr	r1, [r0]
   136f8:	mov	r2, #48	; 0x30
   136fc:	mov	r3, r6
   13700:	cmp	r1, #3
   13704:	movweq	r2, #40	; 0x28
   13708:	ldr	r2, [r3, r2]!
   1370c:	adds	r2, r2, #1
   13710:	str	r2, [r3]
   13714:	ldr	r2, [r3, #4]
   13718:	adc	r2, r2, #0
   1371c:	cmp	r1, #3
   13720:	str	r2, [r3, #4]
   13724:	bne	137ec <body_with_two_returns@@Base+0x240>
   13728:	ldr	r0, [r0, #4]
   1372c:	mov	r2, #64	; 0x40
   13730:	mov	r3, r6
   13734:	ldr	r1, [r0]
   13738:	cmp	r1, #3
   1373c:	movweq	r2, #56	; 0x38
   13740:	ldr	r2, [r3, r2]!
   13744:	adds	r2, r2, #1
   13748:	str	r2, [r3]
   1374c:	ldr	r2, [r3, #4]
   13750:	adc	r2, r2, #0
   13754:	cmp	r1, #3
   13758:	str	r2, [r3, #4]
   1375c:	bne	1380c <body_with_two_returns@@Base+0x260>
   13760:	ldr	r0, [r0, #4]
   13764:	mov	r1, #80	; 0x50
   13768:	mov	r2, r6
   1376c:	cmp	r0, #0
   13770:	movweq	r1, #72	; 0x48
   13774:	ldr	r1, [r2, r1]!
   13778:	adds	r1, r1, #1
   1377c:	str	r1, [r2]
   13780:	ldr	r1, [r2, #4]
   13784:	adc	r1, r1, #0
   13788:	cmp	r0, #0
   1378c:	str	r1, [r2, #4]
   13790:	bne	1382c <body_with_two_returns@@Base+0x280>
   13794:	ldrd	r0, [r6, #88]	; 0x58
   13798:	adds	r0, r0, #1
   1379c:	adc	r1, r1, #0
   137a0:	strd	r0, [r6, #88]	; 0x58
   137a4:	sub	sp, fp, #24
   137a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137ac:	movw	r0, #42918	; 0xa7a6
   137b0:	movw	r1, #42174	; 0xa4be
   137b4:	movw	r3, #42944	; 0xa7c0
   137b8:	movw	r2, #371	; 0x173
   137bc:	movt	r0, #1
   137c0:	movt	r1, #1
   137c4:	movt	r3, #1
   137c8:	bl	11ff0 <__assert_fail@plt>
   137cc:	movw	r0, #42835	; 0xa753
   137d0:	movw	r1, #42174	; 0xa4be
   137d4:	movw	r3, #42944	; 0xa7c0
   137d8:	mov	r2, #372	; 0x174
   137dc:	movt	r0, #1
   137e0:	movt	r1, #1
   137e4:	movt	r3, #1
   137e8:	bl	11ff0 <__assert_fail@plt>
   137ec:	movw	r0, #42973	; 0xa7dd
   137f0:	movw	r1, #42174	; 0xa4be
   137f4:	movw	r3, #42944	; 0xa7c0
   137f8:	movw	r2, #373	; 0x175
   137fc:	movt	r0, #1
   13800:	movt	r1, #1
   13804:	movt	r3, #1
   13808:	bl	11ff0 <__assert_fail@plt>
   1380c:	movw	r0, #42995	; 0xa7f3
   13810:	movw	r1, #42174	; 0xa4be
   13814:	movw	r3, #42944	; 0xa7c0
   13818:	movw	r2, #374	; 0x176
   1381c:	movt	r0, #1
   13820:	movt	r1, #1
   13824:	movt	r3, #1
   13828:	bl	11ff0 <__assert_fail@plt>
   1382c:	movw	r0, #43023	; 0xa80f
   13830:	movw	r1, #42174	; 0xa4be
   13834:	movw	r3, #42944	; 0xa7c0
   13838:	movw	r2, #375	; 0x177
   1383c:	movt	r0, #1
   13840:	movt	r1, #1
   13844:	movt	r3, #1
   13848:	bl	11ff0 <__assert_fail@plt>

0001384c <body_with_one_return@@Base>:
   1384c:	push	{r4, r5, r6, r7, fp, lr}
   13850:	add	fp, sp, #16
   13854:	sub	sp, sp, #16
   13858:	movw	r6, #50128	; 0xc3d0
   1385c:	mov	r4, sp
   13860:	movt	r6, #2
   13864:	ldrd	r0, [r6]
   13868:	adds	r0, r0, #1
   1386c:	adc	r1, r1, #0
   13870:	strd	r0, [r6]
   13874:	add	r1, sp, #4
   13878:	mov	r0, r4
   1387c:	bl	162b0 <init_grammar@@Base>
   13880:	mov	r0, #20
   13884:	bl	11ed0 <malloc@plt>
   13888:	mov	r5, r0
   1388c:	mov	r0, #4
   13890:	bl	11ed0 <malloc@plt>
   13894:	str	r0, [r5]
   13898:	bl	14ae0 <init_token_obra@@Base>
   1389c:	mov	r0, #4
   138a0:	bl	11ed0 <malloc@plt>
   138a4:	str	r0, [r5, #4]
   138a8:	bl	14b60 <init_token_return@@Base>
   138ac:	mov	r0, #8
   138b0:	bl	11ed0 <malloc@plt>
   138b4:	mov	r1, #1
   138b8:	str	r0, [r5, #8]
   138bc:	bl	149e0 <init_token_int_value@@Base>
   138c0:	mov	r0, #4
   138c4:	bl	11ed0 <malloc@plt>
   138c8:	str	r0, [r5, #12]
   138cc:	bl	14ba0 <init_token_semicolon@@Base>
   138d0:	mov	r0, #4
   138d4:	bl	11ed0 <malloc@plt>
   138d8:	str	r0, [r5, #16]
   138dc:	bl	14b20 <init_token_cbra@@Base>
   138e0:	movw	r7, #53136	; 0xcf90
   138e4:	mov	r0, #5
   138e8:	movt	r7, #2
   138ec:	str	r0, [r7, #220]	; 0xdc
   138f0:	mov	r0, r4
   138f4:	str	r5, [r7, #228]	; 0xe4
   138f8:	bl	16548 <read_body@@Base>
   138fc:	ldr	r1, [r7, #204]	; 0xcc
   13900:	mov	r2, #16
   13904:	mov	r3, r6
   13908:	cmp	r1, #5
   1390c:	movweq	r2, #8
   13910:	ldr	r2, [r3, r2]!
   13914:	adds	r2, r2, #1
   13918:	str	r2, [r3]
   1391c:	ldr	r2, [r3, #4]
   13920:	adc	r2, r2, #0
   13924:	cmp	r1, #5
   13928:	str	r2, [r3, #4]
   1392c:	bne	139e0 <body_with_one_return@@Base+0x194>
   13930:	mov	r1, #32
   13934:	cmp	r0, #0
   13938:	mov	r2, r6
   1393c:	movwne	r1, #24
   13940:	ldr	r1, [r2, r1]!
   13944:	adds	r1, r1, #1
   13948:	str	r1, [r2]
   1394c:	ldr	r1, [r2, #4]
   13950:	adc	r1, r1, #0
   13954:	cmp	r0, #0
   13958:	str	r1, [r2, #4]
   1395c:	beq	13a00 <body_with_one_return@@Base+0x1b4>
   13960:	ldr	r1, [r0]
   13964:	mov	r2, #48	; 0x30
   13968:	mov	r3, r6
   1396c:	cmp	r1, #3
   13970:	movweq	r2, #40	; 0x28
   13974:	ldr	r2, [r3, r2]!
   13978:	adds	r2, r2, #1
   1397c:	str	r2, [r3]
   13980:	ldr	r2, [r3, #4]
   13984:	adc	r2, r2, #0
   13988:	cmp	r1, #3
   1398c:	str	r2, [r3, #4]
   13990:	bne	13a20 <body_with_one_return@@Base+0x1d4>
   13994:	ldr	r0, [r0, #4]
   13998:	mov	r1, #64	; 0x40
   1399c:	mov	r2, r6
   139a0:	cmp	r0, #0
   139a4:	movweq	r1, #56	; 0x38
   139a8:	ldr	r1, [r2, r1]!
   139ac:	adds	r1, r1, #1
   139b0:	str	r1, [r2]
   139b4:	ldr	r1, [r2, #4]
   139b8:	adc	r1, r1, #0
   139bc:	cmp	r0, #0
   139c0:	str	r1, [r2, #4]
   139c4:	bne	13a40 <body_with_one_return@@Base+0x1f4>
   139c8:	ldrd	r0, [r6, #72]	; 0x48
   139cc:	adds	r0, r0, #1
   139d0:	adc	r1, r1, #0
   139d4:	strd	r0, [r6, #72]	; 0x48
   139d8:	sub	sp, fp, #16
   139dc:	pop	{r4, r5, r6, r7, fp, pc}
   139e0:	movw	r0, #42349	; 0xa56d
   139e4:	movw	r1, #42174	; 0xa4be
   139e8:	movw	r3, #43047	; 0xa827
   139ec:	movw	r2, #406	; 0x196
   139f0:	movt	r0, #1
   139f4:	movt	r1, #1
   139f8:	movt	r3, #1
   139fc:	bl	11ff0 <__assert_fail@plt>
   13a00:	movw	r0, #42835	; 0xa753
   13a04:	movw	r1, #42174	; 0xa4be
   13a08:	movw	r3, #43047	; 0xa827
   13a0c:	movw	r2, #407	; 0x197
   13a10:	movt	r0, #1
   13a14:	movt	r1, #1
   13a18:	movt	r3, #1
   13a1c:	bl	11ff0 <__assert_fail@plt>
   13a20:	movw	r0, #42973	; 0xa7dd
   13a24:	movw	r1, #42174	; 0xa4be
   13a28:	movw	r3, #43047	; 0xa827
   13a2c:	mov	r2, #408	; 0x198
   13a30:	movt	r0, #1
   13a34:	movt	r1, #1
   13a38:	movt	r3, #1
   13a3c:	bl	11ff0 <__assert_fail@plt>
   13a40:	movw	r0, #43075	; 0xa843
   13a44:	movw	r1, #42174	; 0xa4be
   13a48:	movw	r3, #43047	; 0xa827
   13a4c:	movw	r2, #409	; 0x199
   13a50:	movt	r0, #1
   13a54:	movt	r1, #1
   13a58:	movt	r3, #1
   13a5c:	bl	11ff0 <__assert_fail@plt>

00013a60 <if_statement_inside_if_statement@@Base>:
   13a60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a64:	add	fp, sp, #24
   13a68:	sub	sp, sp, #16
   13a6c:	movw	r4, #50208	; 0xc420
   13a70:	mov	r8, sp
   13a74:	movt	r4, #2
   13a78:	ldrd	r0, [r4]
   13a7c:	adds	r0, r0, #1
   13a80:	adc	r1, r1, #0
   13a84:	strd	r0, [r4]
   13a88:	add	r1, sp, #4
   13a8c:	mov	r0, r8
   13a90:	bl	162b0 <init_grammar@@Base>
   13a94:	mov	r0, #3
   13a98:	bl	11ed0 <malloc@plt>
   13a9c:	mov	r7, r0
   13aa0:	mov	r0, #3
   13aa4:	bl	11ed0 <malloc@plt>
   13aa8:	mov	r6, r0
   13aac:	movw	r0, #15649	; 0x3d21
   13ab0:	mov	r1, #0
   13ab4:	strh	r0, [r7]
   13ab8:	strb	r1, [r6, #2]
   13abc:	strh	r0, [r6]
   13ac0:	mov	r0, #76	; 0x4c
   13ac4:	strb	r1, [r7, #2]
   13ac8:	bl	11ed0 <malloc@plt>
   13acc:	mov	r5, r0
   13ad0:	mov	r0, #4
   13ad4:	bl	11ed0 <malloc@plt>
   13ad8:	str	r0, [r5]
   13adc:	bl	14a60 <init_token_opar@@Base>
   13ae0:	mov	r0, #8
   13ae4:	bl	11ed0 <malloc@plt>
   13ae8:	mov	r1, #1
   13aec:	str	r0, [r5, #4]
   13af0:	bl	149e0 <init_token_int_value@@Base>
   13af4:	mov	r0, #8
   13af8:	bl	11ed0 <malloc@plt>
   13afc:	mov	r1, #1
   13b00:	str	r0, [r5, #8]
   13b04:	bl	149e0 <init_token_int_value@@Base>
   13b08:	mov	r0, #8
   13b0c:	bl	11ed0 <malloc@plt>
   13b10:	mov	r1, r7
   13b14:	str	r0, [r5, #12]
   13b18:	bl	14ca0 <init_token_boolean_op@@Base>
   13b1c:	mov	r0, #8
   13b20:	bl	11ed0 <malloc@plt>
   13b24:	mov	r1, #1
   13b28:	str	r0, [r5, #16]
   13b2c:	bl	149e0 <init_token_int_value@@Base>
   13b30:	mov	r0, #4
   13b34:	bl	11ed0 <malloc@plt>
   13b38:	str	r0, [r5, #20]
   13b3c:	bl	14aa0 <init_token_cpar@@Base>
   13b40:	mov	r0, #4
   13b44:	bl	11ed0 <malloc@plt>
   13b48:	str	r0, [r5, #24]
   13b4c:	bl	14ae0 <init_token_obra@@Base>
   13b50:	mov	r0, #4
   13b54:	bl	11ed0 <malloc@plt>
   13b58:	str	r0, [r5, #28]
   13b5c:	bl	14c20 <init_token_if@@Base>
   13b60:	mov	r0, #4
   13b64:	bl	11ed0 <malloc@plt>
   13b68:	str	r0, [r5, #32]
   13b6c:	bl	14a60 <init_token_opar@@Base>
   13b70:	mov	r0, #8
   13b74:	bl	11ed0 <malloc@plt>
   13b78:	mov	r1, #1
   13b7c:	str	r0, [r5, #36]	; 0x24
   13b80:	bl	149e0 <init_token_int_value@@Base>
   13b84:	mov	r0, #8
   13b88:	bl	11ed0 <malloc@plt>
   13b8c:	mov	r1, #1
   13b90:	str	r0, [r5, #40]	; 0x28
   13b94:	bl	149e0 <init_token_int_value@@Base>
   13b98:	mov	r0, #8
   13b9c:	bl	11ed0 <malloc@plt>
   13ba0:	mov	r1, r6
   13ba4:	str	r0, [r5, #44]	; 0x2c
   13ba8:	bl	14ca0 <init_token_boolean_op@@Base>
   13bac:	mov	r0, #8
   13bb0:	bl	11ed0 <malloc@plt>
   13bb4:	mov	r1, #1
   13bb8:	str	r0, [r5, #48]	; 0x30
   13bbc:	bl	149e0 <init_token_int_value@@Base>
   13bc0:	mov	r0, #4
   13bc4:	bl	11ed0 <malloc@plt>
   13bc8:	str	r0, [r5, #52]	; 0x34
   13bcc:	bl	14aa0 <init_token_cpar@@Base>
   13bd0:	mov	r0, #4
   13bd4:	bl	11ed0 <malloc@plt>
   13bd8:	str	r0, [r5, #56]	; 0x38
   13bdc:	bl	14ae0 <init_token_obra@@Base>
   13be0:	mov	r0, #4
   13be4:	bl	11ed0 <malloc@plt>
   13be8:	str	r0, [r5, #60]	; 0x3c
   13bec:	bl	14b20 <init_token_cbra@@Base>
   13bf0:	mov	r0, #4
   13bf4:	bl	11ed0 <malloc@plt>
   13bf8:	str	r0, [r5, #64]	; 0x40
   13bfc:	bl	14b20 <init_token_cbra@@Base>
   13c00:	mov	r0, #4
   13c04:	bl	11ed0 <malloc@plt>
   13c08:	str	r0, [r5, #68]	; 0x44
   13c0c:	bl	14b20 <init_token_cbra@@Base>
   13c10:	mov	r0, #4
   13c14:	bl	11ed0 <malloc@plt>
   13c18:	str	r0, [r5, #72]	; 0x48
   13c1c:	bl	14be0 <init_token_eof@@Base>
   13c20:	movw	r6, #53136	; 0xcf90
   13c24:	mov	r0, #19
   13c28:	movt	r6, #2
   13c2c:	str	r0, [r6, #220]	; 0xdc
   13c30:	mov	r0, r8
   13c34:	str	r5, [r6, #228]	; 0xe4
   13c38:	bl	168e8 <read_if_statement@@Base>
   13c3c:	ldr	r1, [r6, #204]	; 0xcc
   13c40:	mov	r2, #16
   13c44:	mov	r3, r4
   13c48:	cmp	r1, #19
   13c4c:	movweq	r2, #8
   13c50:	ldr	r2, [r3, r2]!
   13c54:	adds	r2, r2, #1
   13c58:	str	r2, [r3]
   13c5c:	ldr	r2, [r3, #4]
   13c60:	adc	r2, r2, #0
   13c64:	cmp	r1, #19
   13c68:	str	r2, [r3, #4]
   13c6c:	bne	13cec <if_statement_inside_if_statement@@Base+0x28c>
   13c70:	mov	r1, #32
   13c74:	cmp	r0, #0
   13c78:	mov	r2, r4
   13c7c:	movwne	r1, #24
   13c80:	ldr	r1, [r2, r1]!
   13c84:	adds	r1, r1, #1
   13c88:	str	r1, [r2]
   13c8c:	ldr	r1, [r2, #4]
   13c90:	adc	r1, r1, #0
   13c94:	cmp	r0, #0
   13c98:	str	r1, [r2, #4]
   13c9c:	beq	13d0c <if_statement_inside_if_statement@@Base+0x2ac>
   13ca0:	ldr	r0, [r0]
   13ca4:	mov	r1, #48	; 0x30
   13ca8:	mov	r2, r4
   13cac:	cmp	r0, #4
   13cb0:	movweq	r1, #40	; 0x28
   13cb4:	ldr	r1, [r2, r1]!
   13cb8:	adds	r1, r1, #1
   13cbc:	str	r1, [r2]
   13cc0:	ldr	r1, [r2, #4]
   13cc4:	adc	r1, r1, #0
   13cc8:	cmp	r0, #4
   13ccc:	str	r1, [r2, #4]
   13cd0:	bne	13d2c <if_statement_inside_if_statement@@Base+0x2cc>
   13cd4:	ldrd	r0, [r4, #56]	; 0x38
   13cd8:	adds	r0, r0, #1
   13cdc:	adc	r1, r1, #0
   13ce0:	strd	r0, [r4, #56]	; 0x38
   13ce4:	sub	sp, fp, #24
   13ce8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cec:	movw	r0, #43093	; 0xa855
   13cf0:	movw	r1, #42174	; 0xa4be
   13cf4:	movw	r3, #43120	; 0xa870
   13cf8:	mov	r2, #480	; 0x1e0
   13cfc:	movt	r0, #1
   13d00:	movt	r1, #1
   13d04:	movt	r3, #1
   13d08:	bl	11ff0 <__assert_fail@plt>
   13d0c:	movw	r0, #42835	; 0xa753
   13d10:	movw	r1, #42174	; 0xa4be
   13d14:	movw	r3, #43120	; 0xa870
   13d18:	movw	r2, #481	; 0x1e1
   13d1c:	movt	r0, #1
   13d20:	movt	r1, #1
   13d24:	movt	r3, #1
   13d28:	bl	11ff0 <__assert_fail@plt>
   13d2c:	movw	r0, #42847	; 0xa75f
   13d30:	movw	r1, #42174	; 0xa4be
   13d34:	movw	r3, #43120	; 0xa870
   13d38:	movw	r2, #482	; 0x1e2
   13d3c:	movt	r0, #1
   13d40:	movt	r1, #1
   13d44:	movt	r3, #1
   13d48:	bl	11ff0 <__assert_fail@plt>

00013d4c <if_statement_inside_else_statement@@Base>:
   13d4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d50:	add	fp, sp, #24
   13d54:	sub	sp, sp, #16
   13d58:	movw	r4, #50272	; 0xc460
   13d5c:	mov	r8, sp
   13d60:	movt	r4, #2
   13d64:	ldrd	r0, [r4]
   13d68:	adds	r0, r0, #1
   13d6c:	adc	r1, r1, #0
   13d70:	strd	r0, [r4]
   13d74:	add	r1, sp, #4
   13d78:	mov	r0, r8
   13d7c:	bl	162b0 <init_grammar@@Base>
   13d80:	mov	r0, #3
   13d84:	bl	11ed0 <malloc@plt>
   13d88:	mov	r7, r0
   13d8c:	mov	r0, #3
   13d90:	bl	11ed0 <malloc@plt>
   13d94:	mov	r6, r0
   13d98:	movw	r0, #15649	; 0x3d21
   13d9c:	mov	r1, #0
   13da0:	strh	r0, [r7]
   13da4:	strb	r1, [r6, #2]
   13da8:	strh	r0, [r6]
   13dac:	mov	r0, #84	; 0x54
   13db0:	strb	r1, [r7, #2]
   13db4:	bl	11ed0 <malloc@plt>
   13db8:	mov	r5, r0
   13dbc:	mov	r0, #4
   13dc0:	bl	11ed0 <malloc@plt>
   13dc4:	str	r0, [r5]
   13dc8:	bl	14a60 <init_token_opar@@Base>
   13dcc:	mov	r0, #8
   13dd0:	bl	11ed0 <malloc@plt>
   13dd4:	mov	r1, #1
   13dd8:	str	r0, [r5, #4]
   13ddc:	bl	149e0 <init_token_int_value@@Base>
   13de0:	mov	r0, #8
   13de4:	bl	11ed0 <malloc@plt>
   13de8:	mov	r1, #1
   13dec:	str	r0, [r5, #8]
   13df0:	bl	149e0 <init_token_int_value@@Base>
   13df4:	mov	r0, #8
   13df8:	bl	11ed0 <malloc@plt>
   13dfc:	mov	r1, r7
   13e00:	str	r0, [r5, #12]
   13e04:	bl	14ca0 <init_token_boolean_op@@Base>
   13e08:	mov	r0, #8
   13e0c:	bl	11ed0 <malloc@plt>
   13e10:	mov	r1, #1
   13e14:	str	r0, [r5, #16]
   13e18:	bl	149e0 <init_token_int_value@@Base>
   13e1c:	mov	r0, #4
   13e20:	bl	11ed0 <malloc@plt>
   13e24:	str	r0, [r5, #20]
   13e28:	bl	14aa0 <init_token_cpar@@Base>
   13e2c:	mov	r0, #4
   13e30:	bl	11ed0 <malloc@plt>
   13e34:	str	r0, [r5, #24]
   13e38:	bl	14ae0 <init_token_obra@@Base>
   13e3c:	mov	r0, #4
   13e40:	bl	11ed0 <malloc@plt>
   13e44:	str	r0, [r5, #28]
   13e48:	bl	14b20 <init_token_cbra@@Base>
   13e4c:	mov	r0, #4
   13e50:	bl	11ed0 <malloc@plt>
   13e54:	str	r0, [r5, #32]
   13e58:	bl	14c60 <init_token_else@@Base>
   13e5c:	mov	r0, #4
   13e60:	bl	11ed0 <malloc@plt>
   13e64:	str	r0, [r5, #36]	; 0x24
   13e68:	bl	14ae0 <init_token_obra@@Base>
   13e6c:	mov	r0, #4
   13e70:	bl	11ed0 <malloc@plt>
   13e74:	str	r0, [r5, #40]	; 0x28
   13e78:	bl	14c20 <init_token_if@@Base>
   13e7c:	mov	r0, #4
   13e80:	bl	11ed0 <malloc@plt>
   13e84:	str	r0, [r5, #44]	; 0x2c
   13e88:	bl	14a60 <init_token_opar@@Base>
   13e8c:	mov	r0, #8
   13e90:	bl	11ed0 <malloc@plt>
   13e94:	mov	r1, #1
   13e98:	str	r0, [r5, #48]	; 0x30
   13e9c:	bl	149e0 <init_token_int_value@@Base>
   13ea0:	mov	r0, #8
   13ea4:	bl	11ed0 <malloc@plt>
   13ea8:	mov	r1, #1
   13eac:	str	r0, [r5, #52]	; 0x34
   13eb0:	bl	149e0 <init_token_int_value@@Base>
   13eb4:	mov	r0, #8
   13eb8:	bl	11ed0 <malloc@plt>
   13ebc:	mov	r1, r6
   13ec0:	str	r0, [r5, #56]	; 0x38
   13ec4:	bl	14ca0 <init_token_boolean_op@@Base>
   13ec8:	mov	r0, #8
   13ecc:	bl	11ed0 <malloc@plt>
   13ed0:	mov	r1, #1
   13ed4:	str	r0, [r5, #60]	; 0x3c
   13ed8:	bl	149e0 <init_token_int_value@@Base>
   13edc:	mov	r0, #4
   13ee0:	bl	11ed0 <malloc@plt>
   13ee4:	str	r0, [r5, #64]	; 0x40
   13ee8:	bl	14aa0 <init_token_cpar@@Base>
   13eec:	mov	r0, #4
   13ef0:	bl	11ed0 <malloc@plt>
   13ef4:	str	r0, [r5, #68]	; 0x44
   13ef8:	bl	14ae0 <init_token_obra@@Base>
   13efc:	mov	r0, #4
   13f00:	bl	11ed0 <malloc@plt>
   13f04:	str	r0, [r5, #72]	; 0x48
   13f08:	bl	14b20 <init_token_cbra@@Base>
   13f0c:	mov	r0, #4
   13f10:	bl	11ed0 <malloc@plt>
   13f14:	str	r0, [r5, #76]	; 0x4c
   13f18:	bl	14b20 <init_token_cbra@@Base>
   13f1c:	mov	r0, #4
   13f20:	bl	11ed0 <malloc@plt>
   13f24:	str	r0, [r5, #80]	; 0x50
   13f28:	bl	14b20 <init_token_cbra@@Base>
   13f2c:	movw	r6, #53136	; 0xcf90
   13f30:	mov	r0, #21
   13f34:	movt	r6, #2
   13f38:	str	r0, [r6, #220]	; 0xdc
   13f3c:	mov	r0, r8
   13f40:	str	r5, [r6, #228]	; 0xe4
   13f44:	bl	168e8 <read_if_statement@@Base>
   13f48:	ldr	r1, [r6, #204]	; 0xcc
   13f4c:	mov	r2, #16
   13f50:	mov	r3, r4
   13f54:	cmp	r1, #21
   13f58:	movweq	r2, #8
   13f5c:	ldr	r2, [r3, r2]!
   13f60:	adds	r2, r2, #1
   13f64:	str	r2, [r3]
   13f68:	ldr	r2, [r3, #4]
   13f6c:	adc	r2, r2, #0
   13f70:	cmp	r1, #21
   13f74:	str	r2, [r3, #4]
   13f78:	bne	13ff8 <if_statement_inside_else_statement@@Base+0x2ac>
   13f7c:	mov	r1, #32
   13f80:	cmp	r0, #0
   13f84:	mov	r2, r4
   13f88:	movwne	r1, #24
   13f8c:	ldr	r1, [r2, r1]!
   13f90:	adds	r1, r1, #1
   13f94:	str	r1, [r2]
   13f98:	ldr	r1, [r2, #4]
   13f9c:	adc	r1, r1, #0
   13fa0:	cmp	r0, #0
   13fa4:	str	r1, [r2, #4]
   13fa8:	beq	14018 <if_statement_inside_else_statement@@Base+0x2cc>
   13fac:	ldr	r0, [r0]
   13fb0:	mov	r1, #48	; 0x30
   13fb4:	mov	r2, r4
   13fb8:	cmp	r0, #4
   13fbc:	movweq	r1, #40	; 0x28
   13fc0:	ldr	r1, [r2, r1]!
   13fc4:	adds	r1, r1, #1
   13fc8:	str	r1, [r2]
   13fcc:	ldr	r1, [r2, #4]
   13fd0:	adc	r1, r1, #0
   13fd4:	cmp	r0, #4
   13fd8:	str	r1, [r2, #4]
   13fdc:	bne	14038 <if_statement_inside_else_statement@@Base+0x2ec>
   13fe0:	ldrd	r0, [r4, #56]	; 0x38
   13fe4:	adds	r0, r0, #1
   13fe8:	adc	r1, r1, #0
   13fec:	strd	r0, [r4, #56]	; 0x38
   13ff0:	sub	sp, fp, #24
   13ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ff8:	movw	r0, #43160	; 0xa898
   13ffc:	movw	r1, #42174	; 0xa4be
   14000:	movw	r3, #43187	; 0xa8b3
   14004:	movw	r2, #558	; 0x22e
   14008:	movt	r0, #1
   1400c:	movt	r1, #1
   14010:	movt	r3, #1
   14014:	bl	11ff0 <__assert_fail@plt>
   14018:	movw	r0, #42835	; 0xa753
   1401c:	movw	r1, #42174	; 0xa4be
   14020:	movw	r3, #43187	; 0xa8b3
   14024:	movw	r2, #559	; 0x22f
   14028:	movt	r0, #1
   1402c:	movt	r1, #1
   14030:	movt	r3, #1
   14034:	bl	11ff0 <__assert_fail@plt>
   14038:	movw	r0, #42847	; 0xa75f
   1403c:	movw	r1, #42174	; 0xa4be
   14040:	movw	r3, #43187	; 0xa8b3
   14044:	mov	r2, #560	; 0x230
   14048:	movt	r0, #1
   1404c:	movt	r1, #1
   14050:	movt	r3, #1
   14054:	bl	11ff0 <__assert_fail@plt>
   14058:	nop	{0}
   1405c:	nop	{0}

00014060 <main@@Base>:
   14060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14064:	add	fp, sp, #28
   14068:	sub	sp, sp, #4
   1406c:	vpush	{d8-d9}
   14070:	movw	sl, #50336	; 0xc4a0
   14074:	add	r1, pc, #980	; 0x3d4
   14078:	movw	r4, #49380	; 0xc0e4
   1407c:	movt	sl, #2
   14080:	vld1.64	{d8-d9}, [r1 :128]
   14084:	movt	r4, #2
   14088:	mov	r1, #0
   1408c:	add	r0, sl, #48	; 0x30
   14090:	vld1.64	{d16-d17}, [r0 :128]
   14094:	vadd.i64	q8, q8, q4
   14098:	vst1.64	{d16-d17}, [r0 :128]
   1409c:	ldr	r0, [r4]
   140a0:	bl	11e1c <setbuf@plt>
   140a4:	ldr	r3, [r4]
   140a8:	movw	r0, #43381	; 0xa975
   140ac:	mov	r1, #14
   140b0:	mov	r2, #1
   140b4:	movt	r0, #1
   140b8:	bl	11ea0 <fwrite@plt>
   140bc:	ldr	r3, [r4]
   140c0:	movw	r0, #43229	; 0xa8dd
   140c4:	mov	r1, #14
   140c8:	mov	r2, #1
   140cc:	movt	r0, #1
   140d0:	bl	11ea0 <fwrite@plt>
   140d4:	ldr	r3, [r4]
   140d8:	movw	r0, #43244	; 0xa8ec
   140dc:	mov	r1, #15
   140e0:	mov	r2, #1
   140e4:	movt	r0, #1
   140e8:	bl	11ea0 <fwrite@plt>
   140ec:	mov	r0, #0
   140f0:	bl	11e40 <fflush@plt>
   140f4:	movw	r0, #43260	; 0xa8fc
   140f8:	movw	r1, #43278	; 0xa90e
   140fc:	movw	r2, #43520	; 0xaa00
   14100:	movt	r0, #1
   14104:	movt	r1, #1
   14108:	movt	r2, #1
   1410c:	bl	11e34 <printf@plt>
   14110:	mov	r0, #32
   14114:	mov	r8, sl
   14118:	movw	r5, #53136	; 0xcf90
   1411c:	mov	r7, sl
   14120:	mov	r1, #0
   14124:	mov	r2, #236	; 0xec
   14128:	vld1.64	{d16-d17}, [r8 :128], r0
   1412c:	movt	r5, #2
   14130:	mov	r0, r5
   14134:	vld1.64	{d18-d19}, [r8 :128]
   14138:	vadd.i64	q8, q8, q4
   1413c:	vadd.i64	q9, q9, q4
   14140:	vst1.64	{d18-d19}, [r8 :128]
   14144:	vst1.64	{d16-d17}, [r7 :128]!
   14148:	bl	11f60 <memset@plt>
   1414c:	vld1.64	{d16-d17}, [r7 :128]
   14150:	movw	r4, #52712	; 0xcde8
   14154:	mov	r9, #50	; 0x32
   14158:	mov	r1, #0
   1415c:	mov	r2, #424	; 0x1a8
   14160:	movt	r4, #2
   14164:	str	r9, [r5, #208]	; 0xd0
   14168:	mov	r0, r4
   1416c:	vadd.i64	q8, q8, q4
   14170:	vst1.64	{d16-d17}, [r7 :128]
   14174:	bl	11f60 <memset@plt>
   14178:	str	r9, [r4, #412]	; 0x19c
   1417c:	bl	12600 <no_int_as_first_stuff@@Base>
   14180:	movw	r6, #43348	; 0xa954
   14184:	movt	r6, #1
   14188:	mov	r0, r6
   1418c:	bl	11ec4 <puts@plt>
   14190:	movw	r2, #43552	; 0xaa20
   14194:	movw	r0, #43260	; 0xa8fc
   14198:	movw	r1, #43278	; 0xa90e
   1419c:	movt	r2, #1
   141a0:	movt	r0, #1
   141a4:	movt	r1, #1
   141a8:	bl	11e34 <printf@plt>
   141ac:	vld1.64	{d16-d17}, [r8 :128]
   141b0:	vld1.64	{d18-d19}, [sl :128]
   141b4:	mov	r0, r5
   141b8:	mov	r1, #0
   141bc:	mov	r2, #236	; 0xec
   141c0:	vadd.i64	q8, q8, q4
   141c4:	vadd.i64	q9, q9, q4
   141c8:	vst1.64	{d16-d17}, [r8 :128]
   141cc:	vst1.64	{d18-d19}, [sl :128]
   141d0:	bl	11f60 <memset@plt>
   141d4:	vld1.64	{d16-d17}, [r7 :128]
   141d8:	mov	r0, r4
   141dc:	mov	r1, #0
   141e0:	mov	r2, #424	; 0x1a8
   141e4:	str	r9, [r5, #208]	; 0xd0
   141e8:	vadd.i64	q8, q8, q4
   141ec:	vst1.64	{d16-d17}, [r7 :128]
   141f0:	bl	11f60 <memset@plt>
   141f4:	str	r9, [r4, #412]	; 0x19c
   141f8:	bl	12714 <int_but_not_followed_by_function@@Base>
   141fc:	mov	r0, r6
   14200:	bl	11ec4 <puts@plt>
   14204:	movw	r2, #43728	; 0xaad0
   14208:	movw	r0, #43260	; 0xa8fc
   1420c:	movw	r1, #43278	; 0xa90e
   14210:	movt	r2, #1
   14214:	movt	r0, #1
   14218:	movt	r1, #1
   1421c:	bl	11e34 <printf@plt>
   14220:	vld1.64	{d16-d17}, [r8 :128]
   14224:	vld1.64	{d18-d19}, [sl :128]
   14228:	mov	r0, r5
   1422c:	mov	r1, #0
   14230:	mov	r2, #236	; 0xec
   14234:	vadd.i64	q8, q8, q4
   14238:	vadd.i64	q9, q9, q4
   1423c:	vst1.64	{d16-d17}, [r8 :128]
   14240:	vst1.64	{d18-d19}, [sl :128]
   14244:	bl	11f60 <memset@plt>
   14248:	vld1.64	{d16-d17}, [r7 :128]
   1424c:	mov	r0, r4
   14250:	mov	r1, #0
   14254:	mov	r2, #424	; 0x1a8
   14258:	str	r9, [r5, #208]	; 0xd0
   1425c:	vadd.i64	q8, q8, q4
   14260:	vst1.64	{d16-d17}, [r7 :128]
   14264:	bl	11f60 <memset@plt>
   14268:	str	r9, [r4, #412]	; 0x19c
   1426c:	bl	12ee4 <boolean_unary_operator_is_read_properly@@Base>
   14270:	mov	r0, r6
   14274:	bl	11ec4 <puts@plt>
   14278:	movw	r2, #43680	; 0xaaa0
   1427c:	movw	r0, #43260	; 0xa8fc
   14280:	movw	r1, #43278	; 0xa90e
   14284:	movt	r2, #1
   14288:	movt	r0, #1
   1428c:	movt	r1, #1
   14290:	bl	11e34 <printf@plt>
   14294:	vld1.64	{d16-d17}, [r8 :128]
   14298:	vld1.64	{d18-d19}, [sl :128]
   1429c:	mov	r0, r5
   142a0:	mov	r1, #0
   142a4:	mov	r2, #236	; 0xec
   142a8:	vadd.i64	q8, q8, q4
   142ac:	vadd.i64	q9, q9, q4
   142b0:	vst1.64	{d16-d17}, [r8 :128]
   142b4:	vst1.64	{d18-d19}, [sl :128]
   142b8:	bl	11f60 <memset@plt>
   142bc:	vld1.64	{d16-d17}, [r7 :128]
   142c0:	mov	r0, r4
   142c4:	mov	r1, #0
   142c8:	mov	r2, #424	; 0x1a8
   142cc:	str	r9, [r5, #208]	; 0xd0
   142d0:	vadd.i64	q8, q8, q4
   142d4:	vst1.64	{d16-d17}, [r7 :128]
   142d8:	bl	11f60 <memset@plt>
   142dc:	str	r9, [r4, #412]	; 0x19c
   142e0:	bl	12c6c <boolean_binary_operator_is_read_properly@@Base>
   142e4:	mov	r0, r6
   142e8:	bl	11ec4 <puts@plt>
   142ec:	movw	r2, #43600	; 0xaa50
   142f0:	movw	r0, #43260	; 0xa8fc
   142f4:	movw	r1, #43278	; 0xa90e
   142f8:	movt	r2, #1
   142fc:	movt	r0, #1
   14300:	movt	r1, #1
   14304:	bl	11e34 <printf@plt>
   14308:	vld1.64	{d16-d17}, [r8 :128]
   1430c:	vld1.64	{d18-d19}, [sl :128]
   14310:	mov	r0, r5
   14314:	mov	r1, #0
   14318:	mov	r2, #236	; 0xec
   1431c:	vadd.i64	q8, q8, q4
   14320:	vadd.i64	q9, q9, q4
   14324:	vst1.64	{d16-d17}, [r8 :128]
   14328:	vst1.64	{d18-d19}, [sl :128]
   1432c:	bl	11f60 <memset@plt>
   14330:	vld1.64	{d16-d17}, [r7 :128]
   14334:	mov	r0, r4
   14338:	mov	r1, #0
   1433c:	mov	r2, #424	; 0x1a8
   14340:	str	r9, [r5, #208]	; 0xd0
   14344:	vadd.i64	q8, q8, q4
   14348:	vst1.64	{d16-d17}, [r7 :128]
   1434c:	bl	11f60 <memset@plt>
   14350:	str	r9, [r4, #412]	; 0x19c
   14354:	bl	1284c <boolean_expression_is_read_properly@@Base>
   14358:	mov	r0, r6
   1435c:	bl	11ec4 <puts@plt>
   14360:	movw	r2, #43648	; 0xaa80
   14364:	movw	r0, #43260	; 0xa8fc
   14368:	movw	r1, #43278	; 0xa90e
   1436c:	movt	r2, #1
   14370:	movt	r0, #1
   14374:	movt	r1, #1
   14378:	bl	11e34 <printf@plt>
   1437c:	vld1.64	{d16-d17}, [r8 :128]
   14380:	vld1.64	{d18-d19}, [sl :128]
   14384:	mov	r0, r5
   14388:	mov	r1, #0
   1438c:	mov	r2, #236	; 0xec
   14390:	vadd.i64	q8, q8, q4
   14394:	vadd.i64	q9, q9, q4
   14398:	vst1.64	{d16-d17}, [r8 :128]
   1439c:	vst1.64	{d18-d19}, [sl :128]
   143a0:	bl	11f60 <memset@plt>
   143a4:	vld1.64	{d16-d17}, [r7 :128]
   143a8:	mov	r0, r4
   143ac:	mov	r1, #0
   143b0:	mov	r2, #424	; 0x1a8
   143b4:	str	r9, [r5, #208]	; 0xd0
   143b8:	vadd.i64	q8, q8, q4
   143bc:	vst1.64	{d16-d17}, [r7 :128]
   143c0:	bl	11f60 <memset@plt>
   143c4:	str	r9, [r4, #412]	; 0x19c
   143c8:	bl	12a40 <boolean_expression_complex@@Base>
   143cc:	mov	r0, r6
   143d0:	bl	11ec4 <puts@plt>
   143d4:	movw	r2, #43776	; 0xab00
   143d8:	movw	r0, #43260	; 0xa8fc
   143dc:	movw	r1, #43278	; 0xa90e
   143e0:	movt	r2, #1
   143e4:	movt	r0, #1
   143e8:	movt	r1, #1
   143ec:	bl	11e34 <printf@plt>
   143f0:	vld1.64	{d16-d17}, [r8 :128]
   143f4:	vld1.64	{d18-d19}, [sl :128]
   143f8:	mov	r0, r5
   143fc:	mov	r1, #0
   14400:	mov	r2, #236	; 0xec
   14404:	vadd.i64	q8, q8, q4
   14408:	vadd.i64	q9, q9, q4
   1440c:	vst1.64	{d16-d17}, [r8 :128]
   14410:	vst1.64	{d18-d19}, [sl :128]
   14414:	bl	11f60 <memset@plt>
   14418:	vld1.64	{d16-d17}, [r7 :128]
   1441c:	mov	r0, r4
   14420:	mov	r1, #0
   14424:	mov	r2, #424	; 0x1a8
   14428:	str	r9, [r5, #208]	; 0xd0
   1442c:	vadd.i64	q8, q8, q4
   14430:	vst1.64	{d16-d17}, [r7 :128]
   14434:	bl	11f60 <memset@plt>
   14438:	str	r9, [r4, #412]	; 0x19c
   1443c:	bl	1313c <if_statement_only@@Base>
   14440:	mov	r0, r6
   14444:	bl	11ec4 <puts@plt>
   14448:	movw	r2, #43808	; 0xab20
   1444c:	b	14460 <main@@Base+0x400>
   14450:	andeq	r0, r0, r1
   14454:	andeq	r0, r0, r0
   14458:	andeq	r0, r0, r1
   1445c:	andeq	r0, r0, r0
   14460:	movw	r0, #43260	; 0xa8fc
   14464:	movw	r1, #43278	; 0xa90e
   14468:	movt	r2, #1
   1446c:	movt	r0, #1
   14470:	movt	r1, #1
   14474:	bl	11e34 <printf@plt>
   14478:	vld1.64	{d16-d17}, [r8 :128]
   1447c:	b	14480 <main@@Base+0x420>
   14480:	vld1.64	{d18-d19}, [sl :128]
   14484:	mov	r0, r5
   14488:	mov	r1, #0
   1448c:	mov	r2, #236	; 0xec
   14490:	vadd.i64	q8, q8, q4
   14494:	vadd.i64	q9, q9, q4
   14498:	vst1.64	{d16-d17}, [r8 :128]
   1449c:	vst1.64	{d18-d19}, [sl :128]
   144a0:	bl	11f60 <memset@plt>
   144a4:	vld1.64	{d16-d17}, [r7 :128]
   144a8:	mov	r0, r4
   144ac:	mov	r1, #0
   144b0:	mov	r2, #424	; 0x1a8
   144b4:	str	r9, [r5, #208]	; 0xd0
   144b8:	vadd.i64	q8, q8, q4
   144bc:	vst1.64	{d16-d17}, [r7 :128]
   144c0:	bl	11f60 <memset@plt>
   144c4:	str	r9, [r4, #412]	; 0x19c
   144c8:	bl	13364 <if_else_statements@@Base>
   144cc:	mov	r0, r6
   144d0:	bl	11ec4 <puts@plt>
   144d4:	movw	r2, #43904	; 0xab80
   144d8:	movw	r0, #43260	; 0xa8fc
   144dc:	movw	r1, #43278	; 0xa90e
   144e0:	movt	r2, #1
   144e4:	movt	r0, #1
   144e8:	movt	r1, #1
   144ec:	bl	11e34 <printf@plt>
   144f0:	vld1.64	{d16-d17}, [r8 :128]
   144f4:	vld1.64	{d18-d19}, [sl :128]
   144f8:	mov	r0, r5
   144fc:	mov	r1, #0
   14500:	mov	r2, #236	; 0xec
   14504:	vadd.i64	q8, q8, q4
   14508:	vadd.i64	q9, q9, q4
   1450c:	vst1.64	{d16-d17}, [r8 :128]
   14510:	vst1.64	{d18-d19}, [sl :128]
   14514:	bl	11f60 <memset@plt>
   14518:	vld1.64	{d16-d17}, [r7 :128]
   1451c:	mov	r0, r4
   14520:	mov	r1, #0
   14524:	mov	r2, #424	; 0x1a8
   14528:	str	r9, [r5, #208]	; 0xd0
   1452c:	vadd.i64	q8, q8, q4
   14530:	vst1.64	{d16-d17}, [r7 :128]
   14534:	bl	11f60 <memset@plt>
   14538:	str	r9, [r4, #412]	; 0x19c
   1453c:	bl	13a60 <if_statement_inside_if_statement@@Base>
   14540:	mov	r0, r6
   14544:	bl	11ec4 <puts@plt>
   14548:	movw	r2, #43952	; 0xabb0
   1454c:	movw	r0, #43260	; 0xa8fc
   14550:	movw	r1, #43278	; 0xa90e
   14554:	movt	r2, #1
   14558:	movt	r0, #1
   1455c:	movt	r1, #1
   14560:	bl	11e34 <printf@plt>
   14564:	vld1.64	{d16-d17}, [r8 :128]
   14568:	vld1.64	{d18-d19}, [sl :128]
   1456c:	mov	r0, r5
   14570:	mov	r1, #0
   14574:	mov	r2, #236	; 0xec
   14578:	vadd.i64	q8, q8, q4
   1457c:	vadd.i64	q9, q9, q4
   14580:	vst1.64	{d16-d17}, [r8 :128]
   14584:	vst1.64	{d18-d19}, [sl :128]
   14588:	bl	11f60 <memset@plt>
   1458c:	vld1.64	{d16-d17}, [r7 :128]
   14590:	mov	r0, r4
   14594:	mov	r1, #0
   14598:	mov	r2, #424	; 0x1a8
   1459c:	str	r9, [r5, #208]	; 0xd0
   145a0:	vadd.i64	q8, q8, q4
   145a4:	vst1.64	{d16-d17}, [r7 :128]
   145a8:	bl	11f60 <memset@plt>
   145ac:	str	r9, [r4, #412]	; 0x19c
   145b0:	bl	13d4c <if_statement_inside_else_statement@@Base>
   145b4:	mov	r0, r6
   145b8:	bl	11ec4 <puts@plt>
   145bc:	movw	r2, #43872	; 0xab60
   145c0:	movw	r0, #43260	; 0xa8fc
   145c4:	movw	r1, #43278	; 0xa90e
   145c8:	movt	r2, #1
   145cc:	movt	r0, #1
   145d0:	movt	r1, #1
   145d4:	bl	11e34 <printf@plt>
   145d8:	vld1.64	{d16-d17}, [r8 :128]
   145dc:	vld1.64	{d18-d19}, [sl :128]
   145e0:	mov	r0, r5
   145e4:	mov	r1, #0
   145e8:	mov	r2, #236	; 0xec
   145ec:	vadd.i64	q8, q8, q4
   145f0:	vadd.i64	q9, q9, q4
   145f4:	vst1.64	{d16-d17}, [r8 :128]
   145f8:	vst1.64	{d18-d19}, [sl :128]
   145fc:	bl	11f60 <memset@plt>
   14600:	vld1.64	{d16-d17}, [r7 :128]
   14604:	mov	r0, r4
   14608:	mov	r1, #0
   1460c:	mov	r2, #424	; 0x1a8
   14610:	str	r9, [r5, #208]	; 0xd0
   14614:	vadd.i64	q8, q8, q4
   14618:	vst1.64	{d16-d17}, [r7 :128]
   1461c:	bl	11f60 <memset@plt>
   14620:	str	r9, [r4, #412]	; 0x19c
   14624:	bl	1384c <body_with_one_return@@Base>
   14628:	mov	r0, r6
   1462c:	bl	11ec4 <puts@plt>
   14630:	movw	r2, #43840	; 0xab40
   14634:	movw	r0, #43260	; 0xa8fc
   14638:	movw	r1, #43278	; 0xa90e
   1463c:	movt	r2, #1
   14640:	movt	r0, #1
   14644:	movt	r1, #1
   14648:	bl	11e34 <printf@plt>
   1464c:	vld1.64	{d16-d17}, [r8 :128]
   14650:	mov	r0, r5
   14654:	mov	r1, #0
   14658:	mov	r2, #236	; 0xec
   1465c:	vadd.i64	q8, q8, q4
   14660:	vst1.64	{d16-d17}, [r8 :128]
   14664:	vld1.64	{d16-d17}, [sl :128]
   14668:	vadd.i64	q8, q8, q4
   1466c:	vst1.64	{d16-d17}, [sl :128]
   14670:	bl	11f60 <memset@plt>
   14674:	vld1.64	{d16-d17}, [r7 :128]
   14678:	mov	r0, r4
   1467c:	mov	r1, #0
   14680:	mov	r2, #424	; 0x1a8
   14684:	str	r9, [r5, #208]	; 0xd0
   14688:	vadd.i64	q8, q8, q4
   1468c:	vst1.64	{d16-d17}, [r7 :128]
   14690:	bl	11f60 <memset@plt>
   14694:	str	r9, [r4, #412]	; 0x19c
   14698:	bl	135ac <body_with_two_returns@@Base>
   1469c:	mov	r0, r6
   146a0:	bl	11ec4 <puts@plt>
   146a4:	movw	r0, #43357	; 0xa95d
   146a8:	movt	r0, #1
   146ac:	bl	11ec4 <puts@plt>
   146b0:	movw	r0, #43372	; 0xa96c
   146b4:	movt	r0, #1
   146b8:	bl	11ec4 <puts@plt>
   146bc:	movw	r0, #43381	; 0xa975
   146c0:	movt	r0, #1
   146c4:	bl	11ec4 <puts@plt>
   146c8:	mov	r0, #0
   146cc:	vpop	{d8-d9}
   146d0:	add	sp, sp, #4
   146d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d8:	push	{r4, r5, r6, lr}
   146dc:	sub	sp, sp, #8
   146e0:	movw	r0, #43408	; 0xa990
   146e4:	movw	r1, #43290	; 0xa91a
   146e8:	movw	r2, #18131	; 0x46d3
   146ec:	movt	r0, #1
   146f0:	movt	r1, #1
   146f4:	movt	r2, #24865	; 0x6121
   146f8:	bl	1751c <read_boolean_unary_expression@@Base+0x58c>
   146fc:	movw	r0, #44368	; 0xad50
   14700:	movw	r6, #44000	; 0xabe0
   14704:	mov	r5, #0
   14708:	movt	r0, #1
   1470c:	movt	r6, #1
   14710:	add	r4, r0, #4
   14714:	mov	r3, r6
   14718:	ldr	r0, [r3, r5]!
   1471c:	ldr	r1, [r3, #16]
   14720:	str	r1, [sp]
   14724:	ldmib	r3, {r1, r2}
   14728:	ldrb	r3, [r3, #12]
   1472c:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   14730:	ldrd	r0, [r4, #-4]
   14734:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   14738:	add	r5, r5, #20
   1473c:	add	r4, r4, #8
   14740:	cmp	r5, #360	; 0x168
   14744:	bne	14714 <main@@Base+0x6b4>
   14748:	bl	18cb0 <read_boolean_unary_expression@@Base+0x1d20>
   1474c:	add	sp, sp, #8
   14750:	pop	{r4, r5, r6, lr}
   14754:	b	19a1c <read_boolean_unary_expression@@Base+0x2a8c>
   14758:	push	{r4, lr}
   1475c:	bl	146d8 <main@@Base+0x678>
   14760:	movw	r0, #49392	; 0xc0f0
   14764:	mov	r1, #0
   14768:	mov	r2, #152	; 0x98
   1476c:	movt	r0, #2
   14770:	bl	11f60 <memset@plt>
   14774:	movw	lr, #50336	; 0xc4a0
   14778:	vmov.i32	q8, #0	; 0x00000000
   1477c:	movw	r3, #50448	; 0xc510
   14780:	mov	r2, #80	; 0x50
   14784:	movw	r4, #49648	; 0xc1f0
   14788:	mov	ip, #64	; 0x40
   1478c:	movt	lr, #2
   14790:	movt	r3, #2
   14794:	movt	r4, #2
   14798:	add	r1, lr, #96	; 0x60
   1479c:	add	r0, r3, #32
   147a0:	vst1.64	{d16-d17}, [r1 :128]
   147a4:	add	r1, lr, #64	; 0x40
   147a8:	vst1.64	{d16-d17}, [r0 :128]
   147ac:	add	r0, r3, #16
   147b0:	vst1.64	{d16-d17}, [r1 :128]
   147b4:	add	r1, lr, #16
   147b8:	vst1.64	{d16-d17}, [r0 :128]
   147bc:	vst1.64	{d16-d17}, [r1 :128]
   147c0:	add	r1, lr, #32
   147c4:	vst1.64	{d16-d17}, [r1 :128]
   147c8:	mov	r1, lr
   147cc:	vst1.64	{d16-d17}, [r1 :128], r2
   147d0:	vst1.64	{d16-d17}, [r1 :128]
   147d4:	movw	r1, #49552	; 0xc190
   147d8:	movt	r1, #2
   147dc:	add	r0, r1, #64	; 0x40
   147e0:	vst1.64	{d16-d17}, [r0 :128]
   147e4:	add	r0, r1, #48	; 0x30
   147e8:	vst1.64	{d16-d17}, [r0 :128]
   147ec:	add	r0, r1, #32
   147f0:	vst1.64	{d16-d17}, [r0 :128]
   147f4:	add	r0, r1, #16
   147f8:	vst1.64	{d16-d17}, [r1 :128], r2
   147fc:	vst1.64	{d16-d17}, [r0 :128]
   14800:	mov	r0, r3
   14804:	vst1.64	{d16-d17}, [r1 :128]
   14808:	add	r1, r4, #32
   1480c:	vst1.64	{d16-d17}, [r0 :128], ip
   14810:	vst1.64	{d16-d17}, [r1 :128]
   14814:	add	r1, r4, #16
   14818:	vst1.64	{d16-d17}, [r0 :128]
   1481c:	add	r0, r3, #48	; 0x30
   14820:	vst1.64	{d16-d17}, [r1 :128]
   14824:	mov	r1, #48	; 0x30
   14828:	vst1.64	{d16-d17}, [r0 :128]
   1482c:	movw	r0, #49712	; 0xc230
   14830:	vst1.64	{d16-d17}, [r4 :128], r1
   14834:	movt	r0, #2
   14838:	vst1.64	{d16-d17}, [r4 :128]
   1483c:	add	r4, r3, #80	; 0x50
   14840:	add	r3, r0, #64	; 0x40
   14844:	vst1.64	{d16-d17}, [r4 :128]
   14848:	vst1.64	{d16-d17}, [r3 :128]
   1484c:	add	r3, r0, #48	; 0x30
   14850:	vst1.64	{d16-d17}, [r3 :128]
   14854:	add	r3, r0, #32
   14858:	vst1.64	{d16-d17}, [r3 :128]
   1485c:	add	r3, r0, #16
   14860:	vst1.64	{d16-d17}, [r0 :128], r2
   14864:	vst1.64	{d16-d17}, [r0 :128]
   14868:	movw	r0, #49808	; 0xc290
   1486c:	vst1.64	{d16-d17}, [r3 :128]
   14870:	movt	r0, #2
   14874:	add	r3, r0, #64	; 0x40
   14878:	vst1.64	{d16-d17}, [r3 :128]
   1487c:	add	r3, r0, #48	; 0x30
   14880:	vst1.64	{d16-d17}, [r3 :128]
   14884:	add	r3, r0, #32
   14888:	vst1.64	{d16-d17}, [r3 :128]
   1488c:	add	r3, r0, #16
   14890:	vst1.64	{d16-d17}, [r0 :128], r2
   14894:	vst1.64	{d16-d17}, [r0 :128]
   14898:	movw	r0, #49904	; 0xc2f0
   1489c:	vst1.64	{d16-d17}, [r3 :128]
   148a0:	movt	r0, #2
   148a4:	add	r3, r0, #32
   148a8:	vst1.64	{d16-d17}, [r3 :128]
   148ac:	add	r3, r0, #16
   148b0:	vst1.64	{d16-d17}, [r0 :128], r1
   148b4:	vst1.64	{d16-d17}, [r0 :128]
   148b8:	movw	r0, #49968	; 0xc330
   148bc:	vst1.64	{d16-d17}, [r3 :128]
   148c0:	movt	r0, #2
   148c4:	add	r3, r0, #32
   148c8:	vst1.64	{d16-d17}, [r3 :128]
   148cc:	add	r3, r0, #16
   148d0:	vst1.64	{d16-d17}, [r0 :128], r1
   148d4:	vst1.64	{d16-d17}, [r0 :128]
   148d8:	movw	r0, #50032	; 0xc370
   148dc:	vst1.64	{d16-d17}, [r3 :128]
   148e0:	movt	r0, #2
   148e4:	add	r3, r0, #64	; 0x40
   148e8:	vst1.64	{d16-d17}, [r3 :128]
   148ec:	add	r3, r0, #48	; 0x30
   148f0:	vst1.64	{d16-d17}, [r3 :128]
   148f4:	add	r3, r0, #32
   148f8:	vst1.64	{d16-d17}, [r3 :128]
   148fc:	add	r3, r0, #16
   14900:	vst1.64	{d16-d17}, [r0 :128], r2
   14904:	vst1.64	{d16-d17}, [r0 :128]
   14908:	movw	r0, #50128	; 0xc3d0
   1490c:	vst1.64	{d16-d17}, [r3 :128]
   14910:	movt	r0, #2
   14914:	add	r2, r0, #48	; 0x30
   14918:	vst1.64	{d16-d17}, [r2 :128]
   1491c:	add	r2, r0, #32
   14920:	vst1.64	{d16-d17}, [r2 :128]
   14924:	add	r2, r0, #16
   14928:	vst1.64	{d16-d17}, [r0 :128], ip
   1492c:	vst1.64	{d16-d17}, [r0 :128]
   14930:	movw	r0, #50208	; 0xc420
   14934:	vst1.64	{d16-d17}, [r2 :128]
   14938:	movt	r0, #2
   1493c:	add	r2, r0, #32
   14940:	vst1.64	{d16-d17}, [r2 :128]
   14944:	add	r2, r0, #16
   14948:	vst1.64	{d16-d17}, [r0 :128], r1
   1494c:	vst1.64	{d16-d17}, [r0 :128]
   14950:	movw	r0, #50272	; 0xc460
   14954:	vst1.64	{d16-d17}, [r2 :128]
   14958:	movt	r0, #2
   1495c:	add	r2, r0, #32
   14960:	vst1.64	{d16-d17}, [r2 :128]
   14964:	add	r2, r0, #16
   14968:	vst1.64	{d16-d17}, [r0 :128], r1
   1496c:	vst1.64	{d16-d17}, [r0 :128]
   14970:	add	r0, lr, #48	; 0x30
   14974:	vst1.64	{d16-d17}, [r2 :128]
   14978:	vst1.64	{d16-d17}, [r0 :128]
   1497c:	pop	{r4, pc}
   14980:	movw	r0, #18136	; 0x46d8
   14984:	movw	r1, #18264	; 0x4758
   14988:	movt	r0, #1
   1498c:	movt	r1, #1
   14990:	b	19ecc <__gcov_flush@@Base+0xb4>
	...

000149a0 <init_token_int_type@@Base>:
   149a0:	movw	r1, #50544	; 0xc570
   149a4:	add	r2, pc, #36	; 0x24
   149a8:	movt	r1, #2
   149ac:	vld1.64	{d16-d17}, [r2 :128]
   149b0:	vld1.64	{d18-d19}, [r1 :128]
   149b4:	vadd.i64	q8, q9, q8
   149b8:	vst1.64	{d16-d17}, [r1 :128]
   149bc:	mov	r1, #0
   149c0:	str	r1, [r0]
   149c4:	bx	lr
   149c8:	nop	{0}
   149cc:	nop	{0}
   149d0:	andeq	r0, r0, r1
   149d4:	andeq	r0, r0, r0
   149d8:	andeq	r0, r0, r1
   149dc:	andeq	r0, r0, r0

000149e0 <init_token_int_value@@Base>:
   149e0:	movw	r2, #50544	; 0xc570
   149e4:	add	r3, pc, #36	; 0x24
   149e8:	movt	r2, #2
   149ec:	vld1.64	{d16-d17}, [r3 :128]
   149f0:	add	r2, r2, #16
   149f4:	vld1.64	{d18-d19}, [r2 :128]
   149f8:	vadd.i64	q8, q9, q8
   149fc:	vst1.64	{d16-d17}, [r2 :128]
   14a00:	mov	r2, #1
   14a04:	str	r2, [r0]
   14a08:	str	r1, [r0, #4]
   14a0c:	bx	lr
   14a10:	andeq	r0, r0, r1
   14a14:	andeq	r0, r0, r0
   14a18:	andeq	r0, r0, r1
   14a1c:	andeq	r0, r0, r0

00014a20 <init_token_function@@Base>:
   14a20:	movw	r2, #50544	; 0xc570
   14a24:	add	r3, pc, #36	; 0x24
   14a28:	movt	r2, #2
   14a2c:	vld1.64	{d16-d17}, [r3 :128]
   14a30:	add	r2, r2, #32
   14a34:	vld1.64	{d18-d19}, [r2 :128]
   14a38:	vadd.i64	q8, q9, q8
   14a3c:	vst1.64	{d16-d17}, [r2 :128]
   14a40:	mov	r2, #2
   14a44:	str	r2, [r0]
   14a48:	str	r1, [r0, #4]
   14a4c:	bx	lr
   14a50:	andeq	r0, r0, r1
   14a54:	andeq	r0, r0, r0
   14a58:	andeq	r0, r0, r1
   14a5c:	andeq	r0, r0, r0

00014a60 <init_token_opar@@Base>:
   14a60:	movw	r1, #50544	; 0xc570
   14a64:	add	r2, pc, #36	; 0x24
   14a68:	movt	r1, #2
   14a6c:	vld1.64	{d16-d17}, [r2 :128]
   14a70:	add	r1, r1, #48	; 0x30
   14a74:	vld1.64	{d18-d19}, [r1 :128]
   14a78:	vadd.i64	q8, q9, q8
   14a7c:	vst1.64	{d16-d17}, [r1 :128]
   14a80:	mov	r1, #3
   14a84:	str	r1, [r0]
   14a88:	bx	lr
   14a8c:	nop	{0}
   14a90:	andeq	r0, r0, r1
   14a94:	andeq	r0, r0, r0
   14a98:	andeq	r0, r0, r1
   14a9c:	andeq	r0, r0, r0

00014aa0 <init_token_cpar@@Base>:
   14aa0:	movw	r1, #50544	; 0xc570
   14aa4:	add	r2, pc, #36	; 0x24
   14aa8:	movt	r1, #2
   14aac:	vld1.64	{d16-d17}, [r2 :128]
   14ab0:	add	r1, r1, #64	; 0x40
   14ab4:	vld1.64	{d18-d19}, [r1 :128]
   14ab8:	vadd.i64	q8, q9, q8
   14abc:	vst1.64	{d16-d17}, [r1 :128]
   14ac0:	mov	r1, #4
   14ac4:	str	r1, [r0]
   14ac8:	bx	lr
   14acc:	nop	{0}
   14ad0:	andeq	r0, r0, r1
   14ad4:	andeq	r0, r0, r0
   14ad8:	andeq	r0, r0, r1
   14adc:	andeq	r0, r0, r0

00014ae0 <init_token_obra@@Base>:
   14ae0:	movw	r1, #50544	; 0xc570
   14ae4:	add	r2, pc, #36	; 0x24
   14ae8:	movt	r1, #2
   14aec:	vld1.64	{d16-d17}, [r2 :128]
   14af0:	add	r1, r1, #80	; 0x50
   14af4:	vld1.64	{d18-d19}, [r1 :128]
   14af8:	vadd.i64	q8, q9, q8
   14afc:	vst1.64	{d16-d17}, [r1 :128]
   14b00:	mov	r1, #5
   14b04:	str	r1, [r0]
   14b08:	bx	lr
   14b0c:	nop	{0}
   14b10:	andeq	r0, r0, r1
   14b14:	andeq	r0, r0, r0
   14b18:	andeq	r0, r0, r1
   14b1c:	andeq	r0, r0, r0

00014b20 <init_token_cbra@@Base>:
   14b20:	movw	r1, #50544	; 0xc570
   14b24:	add	r2, pc, #36	; 0x24
   14b28:	movt	r1, #2
   14b2c:	vld1.64	{d16-d17}, [r2 :128]
   14b30:	add	r1, r1, #96	; 0x60
   14b34:	vld1.64	{d18-d19}, [r1 :128]
   14b38:	vadd.i64	q8, q9, q8
   14b3c:	vst1.64	{d16-d17}, [r1 :128]
   14b40:	mov	r1, #6
   14b44:	str	r1, [r0]
   14b48:	bx	lr
   14b4c:	nop	{0}
   14b50:	andeq	r0, r0, r1
   14b54:	andeq	r0, r0, r0
   14b58:	andeq	r0, r0, r1
   14b5c:	andeq	r0, r0, r0

00014b60 <init_token_return@@Base>:
   14b60:	movw	r1, #50656	; 0xc5e0
   14b64:	add	r2, pc, #36	; 0x24
   14b68:	movt	r1, #2
   14b6c:	vld1.64	{d16-d17}, [r2 :128]
   14b70:	vld1.64	{d18-d19}, [r1 :128]
   14b74:	vadd.i64	q8, q9, q8
   14b78:	vst1.64	{d16-d17}, [r1 :128]
   14b7c:	mov	r1, #7
   14b80:	str	r1, [r0]
   14b84:	bx	lr
   14b88:	nop	{0}
   14b8c:	nop	{0}
   14b90:	andeq	r0, r0, r1
   14b94:	andeq	r0, r0, r0
   14b98:	andeq	r0, r0, r1
   14b9c:	andeq	r0, r0, r0

00014ba0 <init_token_semicolon@@Base>:
   14ba0:	movw	r1, #50656	; 0xc5e0
   14ba4:	add	r2, pc, #36	; 0x24
   14ba8:	movt	r1, #2
   14bac:	vld1.64	{d16-d17}, [r2 :128]
   14bb0:	add	r1, r1, #16
   14bb4:	vld1.64	{d18-d19}, [r1 :128]
   14bb8:	vadd.i64	q8, q9, q8
   14bbc:	vst1.64	{d16-d17}, [r1 :128]
   14bc0:	mov	r1, #8
   14bc4:	str	r1, [r0]
   14bc8:	bx	lr
   14bcc:	nop	{0}
   14bd0:	andeq	r0, r0, r1
   14bd4:	andeq	r0, r0, r0
   14bd8:	andeq	r0, r0, r1
   14bdc:	andeq	r0, r0, r0

00014be0 <init_token_eof@@Base>:
   14be0:	movw	r1, #50656	; 0xc5e0
   14be4:	add	r2, pc, #36	; 0x24
   14be8:	movt	r1, #2
   14bec:	vld1.64	{d16-d17}, [r2 :128]
   14bf0:	add	r1, r1, #32
   14bf4:	vld1.64	{d18-d19}, [r1 :128]
   14bf8:	vadd.i64	q8, q9, q8
   14bfc:	vst1.64	{d16-d17}, [r1 :128]
   14c00:	mov	r1, #9
   14c04:	str	r1, [r0]
   14c08:	bx	lr
   14c0c:	nop	{0}
   14c10:	andeq	r0, r0, r1
   14c14:	andeq	r0, r0, r0
   14c18:	andeq	r0, r0, r1
   14c1c:	andeq	r0, r0, r0

00014c20 <init_token_if@@Base>:
   14c20:	movw	r1, #50656	; 0xc5e0
   14c24:	add	r2, pc, #36	; 0x24
   14c28:	movt	r1, #2
   14c2c:	vld1.64	{d16-d17}, [r2 :128]
   14c30:	add	r1, r1, #48	; 0x30
   14c34:	vld1.64	{d18-d19}, [r1 :128]
   14c38:	vadd.i64	q8, q9, q8
   14c3c:	vst1.64	{d16-d17}, [r1 :128]
   14c40:	mov	r1, #10
   14c44:	str	r1, [r0]
   14c48:	bx	lr
   14c4c:	nop	{0}
   14c50:	andeq	r0, r0, r1
   14c54:	andeq	r0, r0, r0
   14c58:	andeq	r0, r0, r1
   14c5c:	andeq	r0, r0, r0

00014c60 <init_token_else@@Base>:
   14c60:	movw	r1, #50656	; 0xc5e0
   14c64:	add	r2, pc, #36	; 0x24
   14c68:	movt	r1, #2
   14c6c:	vld1.64	{d16-d17}, [r2 :128]
   14c70:	add	r1, r1, #64	; 0x40
   14c74:	vld1.64	{d18-d19}, [r1 :128]
   14c78:	vadd.i64	q8, q9, q8
   14c7c:	vst1.64	{d16-d17}, [r1 :128]
   14c80:	mov	r1, #11
   14c84:	str	r1, [r0]
   14c88:	bx	lr
   14c8c:	nop	{0}
   14c90:	andeq	r0, r0, r1
   14c94:	andeq	r0, r0, r0
   14c98:	andeq	r0, r0, r1
   14c9c:	andeq	r0, r0, r0

00014ca0 <init_token_boolean_op@@Base>:
   14ca0:	movw	r2, #50656	; 0xc5e0
   14ca4:	add	r3, pc, #36	; 0x24
   14ca8:	movt	r2, #2
   14cac:	vld1.64	{d16-d17}, [r3 :128]
   14cb0:	add	r2, r2, #80	; 0x50
   14cb4:	vld1.64	{d18-d19}, [r2 :128]
   14cb8:	vadd.i64	q8, q9, q8
   14cbc:	vst1.64	{d16-d17}, [r2 :128]
   14cc0:	mov	r2, #12
   14cc4:	str	r2, [r0]
   14cc8:	str	r1, [r0, #4]
   14ccc:	bx	lr
   14cd0:	andeq	r0, r0, r1
   14cd4:	andeq	r0, r0, r0
   14cd8:	andeq	r0, r0, r1
   14cdc:	andeq	r0, r0, r0

00014ce0 <free_token_int_type@@Base>:
   14ce0:	movw	r1, #50656	; 0xc5e0
   14ce4:	add	r2, pc, #36	; 0x24
   14ce8:	movt	r1, #2
   14cec:	vld1.64	{d16-d17}, [r2 :128]
   14cf0:	add	r1, r1, #96	; 0x60
   14cf4:	vld1.64	{d18-d19}, [r1 :128]
   14cf8:	vadd.i64	q8, q9, q8
   14cfc:	vst1.64	{d16-d17}, [r1 :128]
   14d00:	b	11e4c <free@plt>
   14d04:	nop	{0}
   14d08:	nop	{0}
   14d0c:	nop	{0}
   14d10:	andeq	r0, r0, r1
   14d14:	andeq	r0, r0, r0
   14d18:	andeq	r0, r0, r1
   14d1c:	andeq	r0, r0, r0

00014d20 <free_token_int_value@@Base>:
   14d20:	movw	r1, #50768	; 0xc650
   14d24:	add	r2, pc, #20
   14d28:	movt	r1, #2
   14d2c:	vld1.64	{d16-d17}, [r2 :128]
   14d30:	vld1.64	{d18-d19}, [r1 :128]
   14d34:	vadd.i64	q8, q9, q8
   14d38:	vst1.64	{d16-d17}, [r1 :128]
   14d3c:	b	11e4c <free@plt>
   14d40:	andeq	r0, r0, r1
   14d44:	andeq	r0, r0, r0
   14d48:	andeq	r0, r0, r1
   14d4c:	andeq	r0, r0, r0

00014d50 <free_token_function@@Base>:
   14d50:	movw	r1, #50768	; 0xc650
   14d54:	add	r2, pc, #36	; 0x24
   14d58:	movt	r1, #2
   14d5c:	vld1.64	{d16-d17}, [r2 :128]
   14d60:	add	r1, r1, #16
   14d64:	vld1.64	{d18-d19}, [r1 :128]
   14d68:	vadd.i64	q8, q9, q8
   14d6c:	vst1.64	{d16-d17}, [r1 :128]
   14d70:	b	11e4c <free@plt>
   14d74:	nop	{0}
   14d78:	nop	{0}
   14d7c:	nop	{0}
   14d80:	andeq	r0, r0, r1
   14d84:	andeq	r0, r0, r0
   14d88:	andeq	r0, r0, r1
   14d8c:	andeq	r0, r0, r0

00014d90 <free_token_opar@@Base>:
   14d90:	movw	r1, #50768	; 0xc650
   14d94:	add	r2, pc, #36	; 0x24
   14d98:	movt	r1, #2
   14d9c:	vld1.64	{d16-d17}, [r2 :128]
   14da0:	add	r1, r1, #32
   14da4:	vld1.64	{d18-d19}, [r1 :128]
   14da8:	vadd.i64	q8, q9, q8
   14dac:	vst1.64	{d16-d17}, [r1 :128]
   14db0:	b	11e4c <free@plt>
   14db4:	nop	{0}
   14db8:	nop	{0}
   14dbc:	nop	{0}
   14dc0:	andeq	r0, r0, r1
   14dc4:	andeq	r0, r0, r0
   14dc8:	andeq	r0, r0, r1
   14dcc:	andeq	r0, r0, r0

00014dd0 <free_token_cpar@@Base>:
   14dd0:	movw	r1, #50768	; 0xc650
   14dd4:	add	r2, pc, #36	; 0x24
   14dd8:	movt	r1, #2
   14ddc:	vld1.64	{d16-d17}, [r2 :128]
   14de0:	add	r1, r1, #48	; 0x30
   14de4:	vld1.64	{d18-d19}, [r1 :128]
   14de8:	vadd.i64	q8, q9, q8
   14dec:	vst1.64	{d16-d17}, [r1 :128]
   14df0:	b	11e4c <free@plt>
   14df4:	nop	{0}
   14df8:	nop	{0}
   14dfc:	nop	{0}
   14e00:	andeq	r0, r0, r1
   14e04:	andeq	r0, r0, r0
   14e08:	andeq	r0, r0, r1
   14e0c:	andeq	r0, r0, r0

00014e10 <free_token_obra@@Base>:
   14e10:	movw	r1, #50768	; 0xc650
   14e14:	add	r2, pc, #36	; 0x24
   14e18:	movt	r1, #2
   14e1c:	vld1.64	{d16-d17}, [r2 :128]
   14e20:	add	r1, r1, #64	; 0x40
   14e24:	vld1.64	{d18-d19}, [r1 :128]
   14e28:	vadd.i64	q8, q9, q8
   14e2c:	vst1.64	{d16-d17}, [r1 :128]
   14e30:	b	11e4c <free@plt>
   14e34:	nop	{0}
   14e38:	nop	{0}
   14e3c:	nop	{0}
   14e40:	andeq	r0, r0, r1
   14e44:	andeq	r0, r0, r0
   14e48:	andeq	r0, r0, r1
   14e4c:	andeq	r0, r0, r0

00014e50 <free_token_cbra@@Base>:
   14e50:	movw	r1, #50768	; 0xc650
   14e54:	add	r2, pc, #36	; 0x24
   14e58:	movt	r1, #2
   14e5c:	vld1.64	{d16-d17}, [r2 :128]
   14e60:	add	r1, r1, #80	; 0x50
   14e64:	vld1.64	{d18-d19}, [r1 :128]
   14e68:	vadd.i64	q8, q9, q8
   14e6c:	vst1.64	{d16-d17}, [r1 :128]
   14e70:	b	11e4c <free@plt>
   14e74:	nop	{0}
   14e78:	nop	{0}
   14e7c:	nop	{0}
   14e80:	andeq	r0, r0, r1
   14e84:	andeq	r0, r0, r0
   14e88:	andeq	r0, r0, r1
   14e8c:	andeq	r0, r0, r0

00014e90 <free_token_return@@Base>:
   14e90:	movw	r1, #50768	; 0xc650
   14e94:	add	r2, pc, #36	; 0x24
   14e98:	movt	r1, #2
   14e9c:	vld1.64	{d16-d17}, [r2 :128]
   14ea0:	add	r1, r1, #96	; 0x60
   14ea4:	vld1.64	{d18-d19}, [r1 :128]
   14ea8:	vadd.i64	q8, q9, q8
   14eac:	vst1.64	{d16-d17}, [r1 :128]
   14eb0:	b	11e4c <free@plt>
   14eb4:	nop	{0}
   14eb8:	nop	{0}
   14ebc:	nop	{0}
   14ec0:	andeq	r0, r0, r1
   14ec4:	andeq	r0, r0, r0
   14ec8:	andeq	r0, r0, r1
   14ecc:	andeq	r0, r0, r0

00014ed0 <free_token_semicolon@@Base>:
   14ed0:	movw	r1, #50880	; 0xc6c0
   14ed4:	add	r2, pc, #20
   14ed8:	movt	r1, #2
   14edc:	vld1.64	{d16-d17}, [r2 :128]
   14ee0:	vld1.64	{d18-d19}, [r1 :128]
   14ee4:	vadd.i64	q8, q9, q8
   14ee8:	vst1.64	{d16-d17}, [r1 :128]
   14eec:	b	11e4c <free@plt>
   14ef0:	andeq	r0, r0, r1
   14ef4:	andeq	r0, r0, r0
   14ef8:	andeq	r0, r0, r1
   14efc:	andeq	r0, r0, r0

00014f00 <free_token_eof@@Base>:
   14f00:	movw	r1, #50880	; 0xc6c0
   14f04:	add	r2, pc, #36	; 0x24
   14f08:	movt	r1, #2
   14f0c:	vld1.64	{d16-d17}, [r2 :128]
   14f10:	add	r1, r1, #16
   14f14:	vld1.64	{d18-d19}, [r1 :128]
   14f18:	vadd.i64	q8, q9, q8
   14f1c:	vst1.64	{d16-d17}, [r1 :128]
   14f20:	b	11e4c <free@plt>
   14f24:	nop	{0}
   14f28:	nop	{0}
   14f2c:	nop	{0}
   14f30:	andeq	r0, r0, r1
   14f34:	andeq	r0, r0, r0
   14f38:	andeq	r0, r0, r1
   14f3c:	andeq	r0, r0, r0

00014f40 <free_token_if@@Base>:
   14f40:	movw	r1, #50880	; 0xc6c0
   14f44:	add	r2, pc, #36	; 0x24
   14f48:	movt	r1, #2
   14f4c:	vld1.64	{d16-d17}, [r2 :128]
   14f50:	add	r1, r1, #32
   14f54:	vld1.64	{d18-d19}, [r1 :128]
   14f58:	vadd.i64	q8, q9, q8
   14f5c:	vst1.64	{d16-d17}, [r1 :128]
   14f60:	b	11e4c <free@plt>
   14f64:	nop	{0}
   14f68:	nop	{0}
   14f6c:	nop	{0}
   14f70:	andeq	r0, r0, r1
   14f74:	andeq	r0, r0, r0
   14f78:	andeq	r0, r0, r1
   14f7c:	andeq	r0, r0, r0

00014f80 <free_token_else@@Base>:
   14f80:	movw	r1, #50880	; 0xc6c0
   14f84:	add	r2, pc, #36	; 0x24
   14f88:	movt	r1, #2
   14f8c:	vld1.64	{d16-d17}, [r2 :128]
   14f90:	add	r1, r1, #48	; 0x30
   14f94:	vld1.64	{d18-d19}, [r1 :128]
   14f98:	vadd.i64	q8, q9, q8
   14f9c:	vst1.64	{d16-d17}, [r1 :128]
   14fa0:	b	11e4c <free@plt>
   14fa4:	nop	{0}
   14fa8:	nop	{0}
   14fac:	nop	{0}
   14fb0:	andeq	r0, r0, r1
   14fb4:	andeq	r0, r0, r0
   14fb8:	andeq	r0, r0, r1
   14fbc:	andeq	r0, r0, r0

00014fc0 <free_token_boolean_op@@Base>:
   14fc0:	push	{r4, r5, fp, lr}
   14fc4:	add	fp, sp, #8
   14fc8:	movw	r5, #50880	; 0xc6c0
   14fcc:	mov	r4, r0
   14fd0:	mov	r2, #16
   14fd4:	movt	r5, #2
   14fd8:	mov	r1, r5
   14fdc:	ldr	r0, [r1, #64]!	; 0x40
   14fe0:	adds	r0, r0, #1
   14fe4:	str	r0, [r1]
   14fe8:	ldr	r0, [r1, #4]
   14fec:	adc	r0, r0, #0
   14ff0:	str	r0, [r1, #4]
   14ff4:	ldr	r0, [r4, #4]
   14ff8:	cmp	r0, #0
   14ffc:	movwne	r2, #8
   15000:	ldr	r2, [r1, r2]!
   15004:	adds	r2, r2, #1
   15008:	str	r2, [r1]
   1500c:	ldr	r2, [r1, #4]
   15010:	adc	r2, r2, #0
   15014:	cmp	r0, #0
   15018:	str	r2, [r1, #4]
   1501c:	beq	15034 <free_token_boolean_op@@Base+0x74>
   15020:	ldrd	r2, [r5, #88]	; 0x58
   15024:	adds	r2, r2, #1
   15028:	adc	r3, r3, #0
   1502c:	strd	r2, [r5, #88]	; 0x58
   15030:	bl	11e4c <free@plt>
   15034:	ldrd	r0, [r5, #96]	; 0x60
   15038:	adds	r0, r0, #1
   1503c:	adc	r1, r1, #0
   15040:	strd	r0, [r5, #96]	; 0x60
   15044:	mov	r0, r4
   15048:	pop	{r4, r5, fp, lr}
   1504c:	b	11e4c <free@plt>
   15050:	push	{r4, r5, r6, lr}
   15054:	sub	sp, sp, #8
   15058:	movw	r0, #44512	; 0xade0
   1505c:	movw	r1, #43290	; 0xa91a
   15060:	movw	r2, #10327	; 0x2857
   15064:	movt	r0, #1
   15068:	movt	r1, #1
   1506c:	movt	r2, #23326	; 0x5b1e
   15070:	bl	1751c <read_boolean_unary_expression@@Base+0x58c>
   15074:	movw	r0, #45728	; 0xb2a0
   15078:	movw	r6, #45200	; 0xb090
   1507c:	mov	r5, #0
   15080:	movt	r0, #1
   15084:	movt	r6, #1
   15088:	add	r4, r0, #4
   1508c:	mov	r3, r6
   15090:	ldr	r0, [r3, r5]!
   15094:	ldr	r1, [r3, #16]
   15098:	str	r1, [sp]
   1509c:	ldmib	r3, {r1, r2}
   150a0:	ldrb	r3, [r3, #12]
   150a4:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   150a8:	ldrd	r0, [r4, #-4]
   150ac:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   150b0:	add	r5, r5, #20
   150b4:	add	r4, r4, #8
   150b8:	cmp	r5, #520	; 0x208
   150bc:	bne	1508c <free_token_boolean_op@@Base+0xcc>
   150c0:	bl	18cb0 <read_boolean_unary_expression@@Base+0x1d20>
   150c4:	add	sp, sp, #8
   150c8:	pop	{r4, r5, r6, lr}
   150cc:	b	19a1c <read_boolean_unary_expression@@Base+0x2a8c>
   150d0:	push	{fp, lr}
   150d4:	bl	15050 <free_token_boolean_op@@Base+0x90>
   150d8:	movw	r1, #50656	; 0xc5e0
   150dc:	vmov.i32	q8, #0	; 0x00000000
   150e0:	mov	r0, #96	; 0x60
   150e4:	movt	r1, #2
   150e8:	mov	r2, r1
   150ec:	vst1.64	{d16-d17}, [r2 :128], r0
   150f0:	vst1.64	{d16-d17}, [r2 :128]
   150f4:	movw	r2, #50544	; 0xc570
   150f8:	movt	r2, #2
   150fc:	add	r3, r2, #16
   15100:	vst1.64	{d16-d17}, [r3 :128]
   15104:	add	r3, r2, #32
   15108:	vst1.64	{d16-d17}, [r3 :128]
   1510c:	add	r3, r2, #48	; 0x30
   15110:	vst1.64	{d16-d17}, [r3 :128]
   15114:	add	r3, r2, #64	; 0x40
   15118:	vst1.64	{d16-d17}, [r3 :128]
   1511c:	add	r3, r2, #80	; 0x50
   15120:	vst1.64	{d16-d17}, [r3 :128]
   15124:	add	r3, r1, #16
   15128:	vst1.64	{d16-d17}, [r2 :128], r0
   1512c:	vst1.64	{d16-d17}, [r3 :128]
   15130:	add	r3, r1, #32
   15134:	vst1.64	{d16-d17}, [r2 :128]
   15138:	vst1.64	{d16-d17}, [r3 :128]
   1513c:	add	r3, r1, #48	; 0x30
   15140:	vst1.64	{d16-d17}, [r3 :128]
   15144:	add	r3, r1, #64	; 0x40
   15148:	add	r1, r1, #80	; 0x50
   1514c:	vst1.64	{d16-d17}, [r3 :128]
   15150:	vst1.64	{d16-d17}, [r1 :128]
   15154:	movw	r1, #50768	; 0xc650
   15158:	movt	r1, #2
   1515c:	add	r3, r1, #16
   15160:	add	r2, r1, #80	; 0x50
   15164:	vst1.64	{d16-d17}, [r3 :128]
   15168:	add	r3, r1, #32
   1516c:	vst1.64	{d16-d17}, [r3 :128]
   15170:	add	r3, r1, #48	; 0x30
   15174:	vst1.64	{d16-d17}, [r3 :128]
   15178:	add	r3, r1, #64	; 0x40
   1517c:	vst1.64	{d16-d17}, [r3 :128]
   15180:	vst1.64	{d16-d17}, [r1 :128], r0
   15184:	vst1.64	{d16-d17}, [r2 :128]
   15188:	mov	r0, #80	; 0x50
   1518c:	vst1.64	{d16-d17}, [r1 :128]
   15190:	movw	r1, #50880	; 0xc6c0
   15194:	movt	r1, #2
   15198:	mov	r2, r1
   1519c:	vst1.64	{d16-d17}, [r2 :128], r0
   151a0:	add	r0, r1, #32
   151a4:	vst1.64	{d16-d17}, [r0 :128]
   151a8:	add	r0, r1, #16
   151ac:	vst1.64	{d16-d17}, [r0 :128]
   151b0:	add	r0, r1, #48	; 0x30
   151b4:	vst1.64	{d16-d17}, [r0 :128]
   151b8:	mov	r0, #0
   151bc:	vst1.64	{d16-d17}, [r2 :128]
   151c0:	str	r0, [r1, #96]	; 0x60
   151c4:	str	r0, [r1, #100]	; 0x64
   151c8:	add	r0, r1, #64	; 0x40
   151cc:	vst1.64	{d16-d17}, [r0 :128]
   151d0:	pop	{fp, pc}
   151d4:	movw	r0, #20560	; 0x5050
   151d8:	movw	r1, #20688	; 0x50d0
   151dc:	movt	r0, #1
   151e0:	movt	r1, #1
   151e4:	b	19ecc <__gcov_flush@@Base+0xb4>
	...

000151f0 <init_ast_base@@Base>:
   151f0:	movw	ip, #51360	; 0xc8a0
   151f4:	add	r3, pc, #36	; 0x24
   151f8:	movt	ip, #2
   151fc:	vld1.64	{d16-d17}, [r3 :128]
   15200:	vld1.64	{d18-d19}, [ip :128]
   15204:	vadd.i64	q8, q9, q8
   15208:	vst1.64	{d16-d17}, [ip :128]
   1520c:	stm	r0, {r1, r2}
   15210:	bx	lr
   15214:	nop	{0}
   15218:	nop	{0}
   1521c:	nop	{0}
   15220:	andeq	r0, r0, r1
   15224:	andeq	r0, r0, r0
   15228:	andeq	r0, r0, r1
   1522c:	andeq	r0, r0, r0

00015230 <init_ast_base_single@@Base>:
   15230:	movw	r2, #51360	; 0xc8a0
   15234:	add	r3, pc, #52	; 0x34
   15238:	movt	r2, #2
   1523c:	vld1.64	{d16-d17}, [r3 :128]
   15240:	vld1.64	{d18-d19}, [r2 :128]
   15244:	vadd.i64	q9, q9, q8
   15248:	vst1.64	{d18-d19}, [r2 :128]!
   1524c:	vld1.64	{d18-d19}, [r2 :128]
   15250:	vadd.i64	q8, q9, q8
   15254:	vst1.64	{d16-d17}, [r2 :128]
   15258:	mov	r2, #0
   1525c:	stm	r0, {r1, r2}
   15260:	bx	lr
   15264:	nop	{0}
   15268:	nop	{0}
   1526c:	nop	{0}
   15270:	andeq	r0, r0, r1
   15274:	andeq	r0, r0, r0
   15278:	andeq	r0, r0, r1
   1527c:	andeq	r0, r0, r0

00015280 <init_node_id@@Base>:
   15280:	push	{fp, lr}
   15284:	mov	fp, sp
   15288:	movw	r3, #51360	; 0xc8a0
   1528c:	mov	ip, #32
   15290:	movt	r3, #2
   15294:	mov	lr, r3
   15298:	vld1.64	{d16-d17}, [lr :128], ip
   1529c:	add	r2, pc, #60	; 0x3c
   152a0:	vld1.64	{d18-d19}, [r2 :128]
   152a4:	mov	r2, #0
   152a8:	vld1.64	{d20-d21}, [lr :128]
   152ac:	vadd.i64	q8, q8, q9
   152b0:	vadd.i64	q10, q10, q9
   152b4:	vst1.64	{d20-d21}, [lr :128]
   152b8:	vst1.64	{d16-d17}, [r3 :128]!
   152bc:	vld1.64	{d16-d17}, [r3 :128]
   152c0:	vadd.i64	q8, q8, q9
   152c4:	vst1.64	{d16-d17}, [r3 :128]
   152c8:	str	r2, [r0]
   152cc:	str	r2, [r0, #4]
   152d0:	str	r1, [r0, #8]
   152d4:	pop	{fp, pc}
   152d8:	nop	{0}
   152dc:	nop	{0}
   152e0:	andeq	r0, r0, r1
   152e4:	andeq	r0, r0, r0
   152e8:	andeq	r0, r0, r1
   152ec:	andeq	r0, r0, r0

000152f0 <init_node_int@@Base>:
   152f0:	push	{fp, lr}
   152f4:	mov	fp, sp
   152f8:	movw	r3, #51360	; 0xc8a0
   152fc:	mov	ip, #48	; 0x30
   15300:	movt	r3, #2
   15304:	mov	lr, r3
   15308:	vld1.64	{d16-d17}, [lr :128], ip
   1530c:	add	r2, pc, #60	; 0x3c
   15310:	vld1.64	{d18-d19}, [r2 :128]
   15314:	mov	r2, #0
   15318:	vld1.64	{d20-d21}, [lr :128]
   1531c:	vadd.i64	q8, q8, q9
   15320:	vadd.i64	q10, q10, q9
   15324:	vst1.64	{d20-d21}, [lr :128]
   15328:	vst1.64	{d16-d17}, [r3 :128]!
   1532c:	vld1.64	{d16-d17}, [r3 :128]
   15330:	vadd.i64	q8, q8, q9
   15334:	vst1.64	{d16-d17}, [r3 :128]
   15338:	mov	r3, #1
   1533c:	str	r3, [r0]
   15340:	str	r2, [r0, #4]
   15344:	str	r1, [r0, #8]
   15348:	pop	{fp, pc}
   1534c:	nop	{0}
   15350:	andeq	r0, r0, r1
   15354:	andeq	r0, r0, r0
   15358:	andeq	r0, r0, r1
   1535c:	andeq	r0, r0, r0

00015360 <init_node_function@@Base>:
   15360:	push	{r4, sl, fp, lr}
   15364:	add	fp, sp, #8
   15368:	movw	r4, #51360	; 0xc8a0
   1536c:	mov	ip, #64	; 0x40
   15370:	movt	r4, #2
   15374:	mov	lr, r4
   15378:	vld1.64	{d16-d17}, [lr :128], ip
   1537c:	add	r3, pc, #60	; 0x3c
   15380:	vld1.64	{d18-d19}, [r3 :128]
   15384:	mov	r3, #0
   15388:	vld1.64	{d20-d21}, [lr :128]
   1538c:	vadd.i64	q8, q8, q9
   15390:	vadd.i64	q10, q10, q9
   15394:	vst1.64	{d20-d21}, [lr :128]
   15398:	vst1.64	{d16-d17}, [r4 :128]!
   1539c:	vld1.64	{d16-d17}, [r4 :128]
   153a0:	vadd.i64	q8, q8, q9
   153a4:	vst1.64	{d16-d17}, [r4 :128]
   153a8:	mov	r4, #2
   153ac:	str	r4, [r0]
   153b0:	str	r3, [r0, #4]
   153b4:	str	r1, [r0, #8]
   153b8:	str	r2, [r0, #12]
   153bc:	pop	{r4, sl, fp, pc}
   153c0:	andeq	r0, r0, r1
   153c4:	andeq	r0, r0, r0
   153c8:	andeq	r0, r0, r1
   153cc:	andeq	r0, r0, r0

000153d0 <init_node_return@@Base>:
   153d0:	push	{fp, lr}
   153d4:	mov	fp, sp
   153d8:	movw	r3, #51360	; 0xc8a0
   153dc:	mov	ip, #80	; 0x50
   153e0:	movt	r3, #2
   153e4:	mov	lr, r3
   153e8:	vld1.64	{d16-d17}, [lr :128], ip
   153ec:	add	r2, pc, #60	; 0x3c
   153f0:	vld1.64	{d18-d19}, [r2 :128]
   153f4:	mov	r2, #0
   153f8:	vld1.64	{d20-d21}, [lr :128]
   153fc:	vadd.i64	q8, q8, q9
   15400:	vadd.i64	q10, q10, q9
   15404:	vst1.64	{d20-d21}, [lr :128]
   15408:	vst1.64	{d16-d17}, [r3 :128]!
   1540c:	vld1.64	{d16-d17}, [r3 :128]
   15410:	vadd.i64	q8, q8, q9
   15414:	vst1.64	{d16-d17}, [r3 :128]
   15418:	mov	r3, #3
   1541c:	str	r3, [r0]
   15420:	str	r2, [r0, #4]
   15424:	str	r1, [r0, #8]
   15428:	pop	{fp, pc}
   1542c:	nop	{0}
   15430:	andeq	r0, r0, r1
   15434:	andeq	r0, r0, r0
   15438:	andeq	r0, r0, r1
   1543c:	andeq	r0, r0, r0

00015440 <init_node_if@@Base>:
   15440:	push	{r4, r5, fp, lr}
   15444:	add	fp, sp, #8
   15448:	movw	lr, #51360	; 0xc8a0
   1544c:	mov	ip, #96	; 0x60
   15450:	movt	lr, #2
   15454:	mov	r5, lr
   15458:	vld1.64	{d16-d17}, [r5 :128], ip
   1545c:	add	r4, pc, #60	; 0x3c
   15460:	vld1.64	{d18-d19}, [r4 :128]
   15464:	mov	r4, #4
   15468:	vld1.64	{d20-d21}, [r5 :128]
   1546c:	vadd.i64	q8, q8, q9
   15470:	vadd.i64	q10, q10, q9
   15474:	vst1.64	{d20-d21}, [r5 :128]
   15478:	vst1.64	{d16-d17}, [lr :128]!
   1547c:	mov	r5, #0
   15480:	vld1.64	{d16-d17}, [lr :128]
   15484:	vadd.i64	q8, q8, q9
   15488:	vst1.64	{d16-d17}, [lr :128]
   1548c:	stmia	r0!, {r4, r5}
   15490:	stm	r0, {r1, r2, r3}
   15494:	pop	{r4, r5, fp, pc}
   15498:	nop	{0}
   1549c:	nop	{0}
   154a0:	andeq	r0, r0, r1
   154a4:	andeq	r0, r0, r0
   154a8:	andeq	r0, r0, r1
   154ac:	andeq	r0, r0, r0

000154b0 <init_node_boolean_operator@@Base>:
   154b0:	push	{r4, sl, fp, lr}
   154b4:	add	fp, sp, #8
   154b8:	movw	ip, #51360	; 0xc8a0
   154bc:	movw	lr, #51472	; 0xc910
   154c0:	add	r4, pc, #72	; 0x48
   154c4:	movt	ip, #2
   154c8:	movt	lr, #2
   154cc:	vld1.64	{d16-d17}, [r4 :128]
   154d0:	mov	r4, #5
   154d4:	vld1.64	{d20-d21}, [ip :128]
   154d8:	vld1.64	{d18-d19}, [lr :128]
   154dc:	vadd.i64	q10, q10, q8
   154e0:	vadd.i64	q9, q9, q8
   154e4:	vst1.64	{d20-d21}, [ip :128]!
   154e8:	vst1.64	{d18-d19}, [lr :128]
   154ec:	vld1.64	{d18-d19}, [ip :128]
   154f0:	vadd.i64	q8, q9, q8
   154f4:	vst1.64	{d16-d17}, [ip :128]
   154f8:	mov	ip, #0
   154fc:	stm	r0, {r4, ip}
   15500:	str	r2, [r0, #8]
   15504:	str	r3, [r0, #12]
   15508:	str	r1, [r0, #16]
   1550c:	pop	{r4, sl, fp, pc}
   15510:	andeq	r0, r0, r1
   15514:	andeq	r0, r0, r0
   15518:	andeq	r0, r0, r1
   1551c:	andeq	r0, r0, r0

00015520 <free_node@@Base>:
   15520:	push	{r4, r5, r6, sl, fp, lr}
   15524:	add	fp, sp, #16
   15528:	movw	r5, #50992	; 0xc730
   1552c:	mov	r4, r0
   15530:	movt	r5, #2
   15534:	ldrd	r0, [r5]
   15538:	adds	r0, r0, #1
   1553c:	adc	r1, r1, #0
   15540:	strd	r0, [r5]
   15544:	ldr	r0, [r4]
   15548:	cmp	r0, #5
   1554c:	bhi	1596c <free_node@@Base+0x44c>
   15550:	add	r1, pc, #0
   15554:	ldr	pc, [r1, r0, lsl #2]
   15558:	andeq	r5, r1, r0, ror r5
   1555c:	andeq	r5, r1, r4, ror #14
   15560:	andeq	r5, r1, r0, asr #13
   15564:	andeq	r5, r1, r4, lsl #16
   15568:	andeq	r5, r1, r0, lsl r6
   1556c:	andeq	r5, r1, r4, lsr #17
   15570:	movw	r0, #46144	; 0xb440
   15574:	movt	r0, #1
   15578:	add	r1, r0, #4
   1557c:	mov	r0, #0
   15580:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15584:	movw	r6, #51472	; 0xc910
   15588:	ldrd	r0, [r5, #64]	; 0x40
   1558c:	movt	r6, #2
   15590:	mov	r2, r6
   15594:	ldr	r3, [r2, #16]!
   15598:	adds	r0, r0, #1
   1559c:	adc	r1, r1, #0
   155a0:	strd	r0, [r5, #64]	; 0x40
   155a4:	mov	r1, #16
   155a8:	ldr	r0, [r2, #4]
   155ac:	adds	r3, r3, #1
   155b0:	str	r3, [r2]
   155b4:	adc	r0, r0, #0
   155b8:	str	r0, [r2, #4]
   155bc:	ldr	r0, [r4, #4]
   155c0:	cmp	r0, #0
   155c4:	movwne	r1, #8
   155c8:	ldr	r1, [r2, r1]!
   155cc:	adds	r1, r1, #1
   155d0:	str	r1, [r2]
   155d4:	ldr	r1, [r2, #4]
   155d8:	adc	r1, r1, #0
   155dc:	cmp	r0, #0
   155e0:	str	r1, [r2, #4]
   155e4:	beq	155fc <free_node@@Base+0xdc>
   155e8:	ldrd	r2, [r6, #40]	; 0x28
   155ec:	adds	r2, r2, #1
   155f0:	adc	r3, r3, #0
   155f4:	strd	r2, [r6, #40]	; 0x28
   155f8:	bl	15520 <free_node@@Base>
   155fc:	ldrd	r0, [r6, #48]	; 0x30
   15600:	adds	r0, r0, #1
   15604:	adc	r1, r1, #0
   15608:	strd	r0, [r6, #48]	; 0x30
   1560c:	b	15950 <free_node@@Base+0x430>
   15610:	movw	r0, #46144	; 0xb440
   15614:	movt	r0, #1
   15618:	add	r1, r0, #20
   1561c:	mov	r0, #0
   15620:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15624:	movw	r6, #51680	; 0xc9e0
   15628:	ldrd	r0, [r5, #96]	; 0x60
   1562c:	movt	r6, #2
   15630:	ldrd	r2, [r6]
   15634:	adds	r0, r0, #1
   15638:	str	r0, [r5, #96]	; 0x60
   1563c:	adc	r0, r1, #0
   15640:	mov	r1, #16
   15644:	adds	r2, r2, #1
   15648:	str	r0, [r5, #100]	; 0x64
   1564c:	adc	r3, r3, #0
   15650:	strd	r2, [r6]
   15654:	mov	r2, r6
   15658:	ldr	r0, [r4, #4]
   1565c:	cmp	r0, #0
   15660:	movwne	r1, #8
   15664:	ldr	r1, [r2, r1]!
   15668:	adds	r1, r1, #1
   1566c:	str	r1, [r2]
   15670:	ldr	r1, [r2, #4]
   15674:	adc	r1, r1, #0
   15678:	cmp	r0, #0
   1567c:	str	r1, [r2, #4]
   15680:	beq	15698 <free_node@@Base+0x178>
   15684:	ldrd	r2, [r6, #24]
   15688:	adds	r2, r2, #1
   1568c:	adc	r3, r3, #0
   15690:	strd	r2, [r6, #24]
   15694:	bl	15520 <free_node@@Base>
   15698:	ldrd	r0, [r6, #32]
   1569c:	adds	r0, r0, #1
   156a0:	adc	r1, r1, #0
   156a4:	strd	r0, [r6, #32]
   156a8:	ldr	r0, [r4, #8]
   156ac:	bl	15520 <free_node@@Base>
   156b0:	ldr	r0, [r4, #12]
   156b4:	bl	15520 <free_node@@Base>
   156b8:	ldr	r0, [r4, #16]
   156bc:	b	1594c <free_node@@Base+0x42c>
   156c0:	movw	r0, #46144	; 0xb440
   156c4:	movt	r0, #1
   156c8:	add	r1, r0, #12
   156cc:	mov	r0, #0
   156d0:	bl	16094 <get_boolean_op_value@@Base+0x370>
   156d4:	movw	r6, #51584	; 0xc980
   156d8:	ldrd	r0, [r5, #80]	; 0x50
   156dc:	movt	r6, #2
   156e0:	ldrd	r2, [r6]
   156e4:	adds	r0, r0, #1
   156e8:	str	r0, [r5, #80]	; 0x50
   156ec:	adc	r0, r1, #0
   156f0:	mov	r1, #16
   156f4:	adds	r2, r2, #1
   156f8:	str	r0, [r5, #84]	; 0x54
   156fc:	adc	r3, r3, #0
   15700:	strd	r2, [r6]
   15704:	mov	r2, r6
   15708:	ldr	r0, [r4, #4]
   1570c:	cmp	r0, #0
   15710:	movwne	r1, #8
   15714:	ldr	r1, [r2, r1]!
   15718:	adds	r1, r1, #1
   1571c:	str	r1, [r2]
   15720:	ldr	r1, [r2, #4]
   15724:	adc	r1, r1, #0
   15728:	cmp	r0, #0
   1572c:	str	r1, [r2, #4]
   15730:	beq	15748 <free_node@@Base+0x228>
   15734:	ldrd	r2, [r6, #24]
   15738:	adds	r2, r2, #1
   1573c:	adc	r3, r3, #0
   15740:	strd	r2, [r6, #24]
   15744:	bl	15520 <free_node@@Base>
   15748:	ldrd	r0, [r6, #32]
   1574c:	adds	r0, r0, #1
   15750:	adc	r1, r1, #0
   15754:	strd	r0, [r6, #32]
   15758:	ldr	r0, [r4, #8]
   1575c:	bl	11e4c <free@plt>
   15760:	b	15950 <free_node@@Base+0x430>
   15764:	movw	r0, #46144	; 0xb440
   15768:	movt	r0, #1
   1576c:	add	r1, r0, #8
   15770:	mov	r0, #0
   15774:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15778:	movw	r6, #51472	; 0xc910
   1577c:	ldrd	r0, [r5, #72]	; 0x48
   15780:	movt	r6, #2
   15784:	mov	r2, r6
   15788:	ldr	r3, [r2, #64]!	; 0x40
   1578c:	adds	r0, r0, #1
   15790:	adc	r1, r1, #0
   15794:	strd	r0, [r5, #72]	; 0x48
   15798:	mov	r1, #16
   1579c:	ldr	r0, [r2, #4]
   157a0:	adds	r3, r3, #1
   157a4:	str	r3, [r2]
   157a8:	adc	r0, r0, #0
   157ac:	str	r0, [r2, #4]
   157b0:	ldr	r0, [r4, #4]
   157b4:	cmp	r0, #0
   157b8:	movwne	r1, #8
   157bc:	ldr	r1, [r2, r1]!
   157c0:	adds	r1, r1, #1
   157c4:	str	r1, [r2]
   157c8:	ldr	r1, [r2, #4]
   157cc:	adc	r1, r1, #0
   157d0:	cmp	r0, #0
   157d4:	str	r1, [r2, #4]
   157d8:	beq	157f0 <free_node@@Base+0x2d0>
   157dc:	ldrd	r2, [r6, #88]	; 0x58
   157e0:	adds	r2, r2, #1
   157e4:	adc	r3, r3, #0
   157e8:	strd	r2, [r6, #88]	; 0x58
   157ec:	bl	15520 <free_node@@Base>
   157f0:	ldrd	r0, [r6, #96]	; 0x60
   157f4:	adds	r0, r0, #1
   157f8:	adc	r1, r1, #0
   157fc:	strd	r0, [r6, #96]	; 0x60
   15800:	b	15950 <free_node@@Base+0x430>
   15804:	movw	r0, #46144	; 0xb440
   15808:	movt	r0, #1
   1580c:	add	r1, r0, #16
   15810:	mov	r0, #0
   15814:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15818:	movw	r6, #51584	; 0xc980
   1581c:	ldrd	r0, [r5, #88]	; 0x58
   15820:	movt	r6, #2
   15824:	mov	r2, r6
   15828:	ldr	r3, [r2, #48]!	; 0x30
   1582c:	adds	r0, r0, #1
   15830:	adc	r1, r1, #0
   15834:	strd	r0, [r5, #88]	; 0x58
   15838:	mov	r1, #16
   1583c:	ldr	r0, [r2, #4]
   15840:	adds	r3, r3, #1
   15844:	str	r3, [r2]
   15848:	adc	r0, r0, #0
   1584c:	str	r0, [r2, #4]
   15850:	ldr	r0, [r4, #4]
   15854:	cmp	r0, #0
   15858:	movwne	r1, #8
   1585c:	ldr	r1, [r2, r1]!
   15860:	adds	r1, r1, #1
   15864:	str	r1, [r2]
   15868:	ldr	r1, [r2, #4]
   1586c:	adc	r1, r1, #0
   15870:	cmp	r0, #0
   15874:	str	r1, [r2, #4]
   15878:	beq	15890 <free_node@@Base+0x370>
   1587c:	ldrd	r2, [r6, #72]	; 0x48
   15880:	adds	r2, r2, #1
   15884:	adc	r3, r3, #0
   15888:	strd	r2, [r6, #72]	; 0x48
   1588c:	bl	15520 <free_node@@Base>
   15890:	ldrd	r0, [r6, #80]	; 0x50
   15894:	adds	r0, r0, #1
   15898:	adc	r1, r1, #0
   1589c:	strd	r0, [r6, #80]	; 0x50
   158a0:	b	15950 <free_node@@Base+0x430>
   158a4:	movw	r0, #46144	; 0xb440
   158a8:	movt	r0, #1
   158ac:	add	r1, r0, #24
   158b0:	mov	r0, #0
   158b4:	bl	16094 <get_boolean_op_value@@Base+0x370>
   158b8:	movw	r6, #51680	; 0xc9e0
   158bc:	ldrd	r0, [r5, #104]	; 0x68
   158c0:	movt	r6, #2
   158c4:	mov	r2, r6
   158c8:	ldr	r3, [r2, #48]!	; 0x30
   158cc:	adds	r0, r0, #1
   158d0:	adc	r1, r1, #0
   158d4:	strd	r0, [r5, #104]	; 0x68
   158d8:	mov	r1, #16
   158dc:	ldr	r0, [r2, #4]
   158e0:	adds	r3, r3, #1
   158e4:	str	r3, [r2]
   158e8:	adc	r0, r0, #0
   158ec:	str	r0, [r2, #4]
   158f0:	ldr	r0, [r4, #4]
   158f4:	cmp	r0, #0
   158f8:	movwne	r1, #8
   158fc:	ldr	r1, [r2, r1]!
   15900:	adds	r1, r1, #1
   15904:	str	r1, [r2]
   15908:	ldr	r1, [r2, #4]
   1590c:	adc	r1, r1, #0
   15910:	cmp	r0, #0
   15914:	str	r1, [r2, #4]
   15918:	beq	15930 <free_node@@Base+0x410>
   1591c:	ldrd	r2, [r6, #72]	; 0x48
   15920:	adds	r2, r2, #1
   15924:	adc	r3, r3, #0
   15928:	strd	r2, [r6, #72]	; 0x48
   1592c:	bl	15520 <free_node@@Base>
   15930:	ldrd	r0, [r6, #80]	; 0x50
   15934:	adds	r0, r0, #1
   15938:	adc	r1, r1, #0
   1593c:	strd	r0, [r6, #80]	; 0x50
   15940:	ldr	r0, [r4, #8]
   15944:	bl	15520 <free_node@@Base>
   15948:	ldr	r0, [r4, #12]
   1594c:	bl	15520 <free_node@@Base>
   15950:	mov	r0, r4
   15954:	bl	11e4c <free@plt>
   15958:	ldrd	r0, [r5, #112]	; 0x70
   1595c:	adds	r0, r0, #1
   15960:	adc	r1, r1, #0
   15964:	strd	r0, [r5, #112]	; 0x70
   15968:	pop	{r4, r5, r6, sl, fp, pc}
   1596c:	movw	r1, #46144	; 0xb440
   15970:	mov	r0, #0
   15974:	movt	r1, #1
   15978:	bl	16094 <get_boolean_op_value@@Base+0x370>
   1597c:	movw	r0, #49376	; 0xc0e0
   15980:	mov	r1, #31
   15984:	mov	r2, #1
   15988:	movt	r0, #2
   1598c:	ldr	r3, [r0]
   15990:	movw	r0, #45936	; 0xb370
   15994:	movt	r0, #1
   15998:	bl	11ea0 <fwrite@plt>
   1599c:	mov	r0, #1
   159a0:	bl	11f0c <exit@plt>

000159a4 <free_node_id@@Base>:
   159a4:	push	{r4, r5, fp, lr}
   159a8:	add	fp, sp, #8
   159ac:	movw	r5, #51472	; 0xc910
   159b0:	mov	r4, r0
   159b4:	mov	r2, #16
   159b8:	movt	r5, #2
   159bc:	mov	r1, r5
   159c0:	ldr	r0, [r1, #16]!
   159c4:	adds	r0, r0, #1
   159c8:	str	r0, [r1]
   159cc:	ldr	r0, [r1, #4]
   159d0:	adc	r0, r0, #0
   159d4:	str	r0, [r1, #4]
   159d8:	ldr	r0, [r4, #4]
   159dc:	cmp	r0, #0
   159e0:	movwne	r2, #8
   159e4:	ldr	r2, [r1, r2]!
   159e8:	adds	r2, r2, #1
   159ec:	str	r2, [r1]
   159f0:	ldr	r2, [r1, #4]
   159f4:	adc	r2, r2, #0
   159f8:	cmp	r0, #0
   159fc:	str	r2, [r1, #4]
   15a00:	beq	15a18 <free_node_id@@Base+0x74>
   15a04:	ldrd	r2, [r5, #40]	; 0x28
   15a08:	adds	r2, r2, #1
   15a0c:	adc	r3, r3, #0
   15a10:	strd	r2, [r5, #40]	; 0x28
   15a14:	bl	15520 <free_node@@Base>
   15a18:	ldrd	r0, [r5, #48]	; 0x30
   15a1c:	adds	r0, r0, #1
   15a20:	adc	r1, r1, #0
   15a24:	strd	r0, [r5, #48]	; 0x30
   15a28:	mov	r0, r4
   15a2c:	pop	{r4, r5, fp, lr}
   15a30:	b	11e4c <free@plt>

00015a34 <free_node_int@@Base>:
   15a34:	push	{r4, r5, fp, lr}
   15a38:	add	fp, sp, #8
   15a3c:	movw	r5, #51472	; 0xc910
   15a40:	mov	r4, r0
   15a44:	mov	r2, #16
   15a48:	movt	r5, #2
   15a4c:	mov	r1, r5
   15a50:	ldr	r0, [r1, #64]!	; 0x40
   15a54:	adds	r0, r0, #1
   15a58:	str	r0, [r1]
   15a5c:	ldr	r0, [r1, #4]
   15a60:	adc	r0, r0, #0
   15a64:	str	r0, [r1, #4]
   15a68:	ldr	r0, [r4, #4]
   15a6c:	cmp	r0, #0
   15a70:	movwne	r2, #8
   15a74:	ldr	r2, [r1, r2]!
   15a78:	adds	r2, r2, #1
   15a7c:	str	r2, [r1]
   15a80:	ldr	r2, [r1, #4]
   15a84:	adc	r2, r2, #0
   15a88:	cmp	r0, #0
   15a8c:	str	r2, [r1, #4]
   15a90:	beq	15aa8 <free_node_int@@Base+0x74>
   15a94:	ldrd	r2, [r5, #88]	; 0x58
   15a98:	adds	r2, r2, #1
   15a9c:	adc	r3, r3, #0
   15aa0:	strd	r2, [r5, #88]	; 0x58
   15aa4:	bl	15520 <free_node@@Base>
   15aa8:	ldrd	r0, [r5, #96]	; 0x60
   15aac:	adds	r0, r0, #1
   15ab0:	adc	r1, r1, #0
   15ab4:	strd	r0, [r5, #96]	; 0x60
   15ab8:	mov	r0, r4
   15abc:	pop	{r4, r5, fp, lr}
   15ac0:	b	11e4c <free@plt>

00015ac4 <free_node_function@@Base>:
   15ac4:	push	{r4, r5, fp, lr}
   15ac8:	add	fp, sp, #8
   15acc:	movw	r5, #51584	; 0xc980
   15ad0:	mov	r4, r0
   15ad4:	movt	r5, #2
   15ad8:	ldrd	r0, [r5]
   15adc:	mov	r2, r5
   15ae0:	adds	r0, r0, #1
   15ae4:	adc	r1, r1, #0
   15ae8:	strd	r0, [r5]
   15aec:	mov	r1, #16
   15af0:	ldr	r0, [r4, #4]
   15af4:	cmp	r0, #0
   15af8:	movwne	r1, #8
   15afc:	ldr	r1, [r2, r1]!
   15b00:	adds	r1, r1, #1
   15b04:	str	r1, [r2]
   15b08:	ldr	r1, [r2, #4]
   15b0c:	adc	r1, r1, #0
   15b10:	cmp	r0, #0
   15b14:	str	r1, [r2, #4]
   15b18:	beq	15b30 <free_node_function@@Base+0x6c>
   15b1c:	ldrd	r2, [r5, #24]
   15b20:	adds	r2, r2, #1
   15b24:	adc	r3, r3, #0
   15b28:	strd	r2, [r5, #24]
   15b2c:	bl	15520 <free_node@@Base>
   15b30:	ldrd	r0, [r5, #32]
   15b34:	adds	r0, r0, #1
   15b38:	adc	r1, r1, #0
   15b3c:	strd	r0, [r5, #32]
   15b40:	ldr	r0, [r4, #8]
   15b44:	bl	11e4c <free@plt>
   15b48:	mov	r0, r4
   15b4c:	pop	{r4, r5, fp, lr}
   15b50:	b	11e4c <free@plt>

00015b54 <free_node_return@@Base>:
   15b54:	push	{r4, r5, fp, lr}
   15b58:	add	fp, sp, #8
   15b5c:	movw	r5, #51584	; 0xc980
   15b60:	mov	r4, r0
   15b64:	mov	r2, #16
   15b68:	movt	r5, #2
   15b6c:	mov	r1, r5
   15b70:	ldr	r0, [r1, #48]!	; 0x30
   15b74:	adds	r0, r0, #1
   15b78:	str	r0, [r1]
   15b7c:	ldr	r0, [r1, #4]
   15b80:	adc	r0, r0, #0
   15b84:	str	r0, [r1, #4]
   15b88:	ldr	r0, [r4, #4]
   15b8c:	cmp	r0, #0
   15b90:	movwne	r2, #8
   15b94:	ldr	r2, [r1, r2]!
   15b98:	adds	r2, r2, #1
   15b9c:	str	r2, [r1]
   15ba0:	ldr	r2, [r1, #4]
   15ba4:	adc	r2, r2, #0
   15ba8:	cmp	r0, #0
   15bac:	str	r2, [r1, #4]
   15bb0:	beq	15bc8 <free_node_return@@Base+0x74>
   15bb4:	ldrd	r2, [r5, #72]	; 0x48
   15bb8:	adds	r2, r2, #1
   15bbc:	adc	r3, r3, #0
   15bc0:	strd	r2, [r5, #72]	; 0x48
   15bc4:	bl	15520 <free_node@@Base>
   15bc8:	ldrd	r0, [r5, #80]	; 0x50
   15bcc:	adds	r0, r0, #1
   15bd0:	adc	r1, r1, #0
   15bd4:	strd	r0, [r5, #80]	; 0x50
   15bd8:	mov	r0, r4
   15bdc:	pop	{r4, r5, fp, lr}
   15be0:	b	11e4c <free@plt>

00015be4 <free_node_if@@Base>:
   15be4:	push	{r4, r5, fp, lr}
   15be8:	add	fp, sp, #8
   15bec:	movw	r5, #51680	; 0xc9e0
   15bf0:	mov	r4, r0
   15bf4:	movt	r5, #2
   15bf8:	ldrd	r0, [r5]
   15bfc:	mov	r2, r5
   15c00:	adds	r0, r0, #1
   15c04:	adc	r1, r1, #0
   15c08:	strd	r0, [r5]
   15c0c:	mov	r1, #16
   15c10:	ldr	r0, [r4, #4]
   15c14:	cmp	r0, #0
   15c18:	movwne	r1, #8
   15c1c:	ldr	r1, [r2, r1]!
   15c20:	adds	r1, r1, #1
   15c24:	str	r1, [r2]
   15c28:	ldr	r1, [r2, #4]
   15c2c:	adc	r1, r1, #0
   15c30:	cmp	r0, #0
   15c34:	str	r1, [r2, #4]
   15c38:	beq	15c50 <free_node_if@@Base+0x6c>
   15c3c:	ldrd	r2, [r5, #24]
   15c40:	adds	r2, r2, #1
   15c44:	adc	r3, r3, #0
   15c48:	strd	r2, [r5, #24]
   15c4c:	bl	15520 <free_node@@Base>
   15c50:	ldrd	r0, [r5, #32]
   15c54:	adds	r0, r0, #1
   15c58:	adc	r1, r1, #0
   15c5c:	strd	r0, [r5, #32]
   15c60:	ldr	r0, [r4, #8]
   15c64:	bl	15520 <free_node@@Base>
   15c68:	ldr	r0, [r4, #12]
   15c6c:	bl	15520 <free_node@@Base>
   15c70:	ldr	r0, [r4, #16]
   15c74:	bl	15520 <free_node@@Base>
   15c78:	mov	r0, r4
   15c7c:	pop	{r4, r5, fp, lr}
   15c80:	b	11e4c <free@plt>

00015c84 <free_node_boolean_operator@@Base>:
   15c84:	push	{r4, r5, fp, lr}
   15c88:	add	fp, sp, #8
   15c8c:	movw	r5, #51680	; 0xc9e0
   15c90:	mov	r4, r0
   15c94:	mov	r2, #16
   15c98:	movt	r5, #2
   15c9c:	mov	r1, r5
   15ca0:	ldr	r0, [r1, #48]!	; 0x30
   15ca4:	adds	r0, r0, #1
   15ca8:	str	r0, [r1]
   15cac:	ldr	r0, [r1, #4]
   15cb0:	adc	r0, r0, #0
   15cb4:	str	r0, [r1, #4]
   15cb8:	ldr	r0, [r4, #4]
   15cbc:	cmp	r0, #0
   15cc0:	movwne	r2, #8
   15cc4:	ldr	r2, [r1, r2]!
   15cc8:	adds	r2, r2, #1
   15ccc:	str	r2, [r1]
   15cd0:	ldr	r2, [r1, #4]
   15cd4:	adc	r2, r2, #0
   15cd8:	cmp	r0, #0
   15cdc:	str	r2, [r1, #4]
   15ce0:	beq	15cf8 <free_node_boolean_operator@@Base+0x74>
   15ce4:	ldrd	r2, [r5, #72]	; 0x48
   15ce8:	adds	r2, r2, #1
   15cec:	adc	r3, r3, #0
   15cf0:	strd	r2, [r5, #72]	; 0x48
   15cf4:	bl	15520 <free_node@@Base>
   15cf8:	ldrd	r0, [r5, #80]	; 0x50
   15cfc:	adds	r0, r0, #1
   15d00:	adc	r1, r1, #0
   15d04:	strd	r0, [r5, #80]	; 0x50
   15d08:	ldr	r0, [r4, #8]
   15d0c:	bl	15520 <free_node@@Base>
   15d10:	ldr	r0, [r4, #12]
   15d14:	bl	15520 <free_node@@Base>
   15d18:	mov	r0, r4
   15d1c:	pop	{r4, r5, fp, lr}
   15d20:	b	11e4c <free@plt>

00015d24 <get_boolean_op_value@@Base>:
   15d24:	push	{r4, r5, r6, sl, fp, lr}
   15d28:	add	fp, sp, #16
   15d2c:	movw	r6, #51120	; 0xc7b0
   15d30:	mov	r1, #2
   15d34:	movt	r6, #2
   15d38:	ldrd	r2, [r6]
   15d3c:	adds	r2, r2, #1
   15d40:	adc	r3, r3, #0
   15d44:	strd	r2, [r6]
   15d48:	ldr	r4, [r0, #4]
   15d4c:	mov	r0, r4
   15d50:	bl	11f90 <strnlen@plt>
   15d54:	mov	r1, #16
   15d58:	cmp	r0, #2
   15d5c:	mov	r2, r6
   15d60:	movweq	r1, #8
   15d64:	ldr	r1, [r2, r1]!
   15d68:	adds	r1, r1, #1
   15d6c:	str	r1, [r2]
   15d70:	ldr	r1, [r2, #4]
   15d74:	adc	r1, r1, #0
   15d78:	cmp	r0, #2
   15d7c:	str	r1, [r2, #4]
   15d80:	bne	15f38 <get_boolean_op_value@@Base+0x214>
   15d84:	movw	r1, #45968	; 0xb390
   15d88:	mov	r0, r4
   15d8c:	mov	r2, #2
   15d90:	movt	r1, #1
   15d94:	bl	11fd8 <strncmp@plt>
   15d98:	mov	r1, #32
   15d9c:	cmp	r0, #0
   15da0:	mov	r2, r6
   15da4:	movweq	r1, #24
   15da8:	ldr	r1, [r2, r1]!
   15dac:	adds	r1, r1, #1
   15db0:	str	r1, [r2]
   15db4:	ldr	r1, [r2, #4]
   15db8:	adc	r1, r1, #0
   15dbc:	cmp	r0, #0
   15dc0:	str	r1, [r2, #4]
   15dc4:	beq	15f80 <get_boolean_op_value@@Base+0x25c>
   15dc8:	movw	r1, #45971	; 0xb393
   15dcc:	mov	r0, r4
   15dd0:	mov	r2, #2
   15dd4:	movt	r1, #1
   15dd8:	bl	11fd8 <strncmp@plt>
   15ddc:	mov	r1, #56	; 0x38
   15de0:	cmp	r0, #0
   15de4:	mov	r2, r6
   15de8:	movweq	r1, #48	; 0x30
   15dec:	ldr	r1, [r2, r1]!
   15df0:	adds	r1, r1, #1
   15df4:	str	r1, [r2]
   15df8:	ldr	r1, [r2, #4]
   15dfc:	adc	r1, r1, #0
   15e00:	cmp	r0, #0
   15e04:	str	r1, [r2, #4]
   15e08:	beq	15ff0 <get_boolean_op_value@@Base+0x2cc>
   15e0c:	movw	r1, #45974	; 0xb396
   15e10:	mov	r0, r4
   15e14:	mov	r2, #2
   15e18:	mov	r5, #2
   15e1c:	movt	r1, #1
   15e20:	bl	11fd8 <strncmp@plt>
   15e24:	mov	r1, #80	; 0x50
   15e28:	cmp	r0, #0
   15e2c:	mov	r2, r6
   15e30:	movweq	r1, #72	; 0x48
   15e34:	ldr	r1, [r2, r1]!
   15e38:	adds	r1, r1, #1
   15e3c:	str	r1, [r2]
   15e40:	ldr	r1, [r2, #4]
   15e44:	adc	r1, r1, #0
   15e48:	cmp	r0, #0
   15e4c:	str	r1, [r2, #4]
   15e50:	beq	16008 <get_boolean_op_value@@Base+0x2e4>
   15e54:	movw	r1, #45977	; 0xb399
   15e58:	mov	r0, r4
   15e5c:	mov	r2, #2
   15e60:	movt	r1, #1
   15e64:	bl	11fd8 <strncmp@plt>
   15e68:	mov	r1, #104	; 0x68
   15e6c:	cmp	r0, #0
   15e70:	mov	r2, r6
   15e74:	movweq	r1, #96	; 0x60
   15e78:	ldr	r1, [r2, r1]!
   15e7c:	adds	r1, r1, #1
   15e80:	str	r1, [r2]
   15e84:	ldr	r1, [r2, #4]
   15e88:	adc	r1, r1, #0
   15e8c:	cmp	r0, #0
   15e90:	str	r1, [r2, #4]
   15e94:	beq	1601c <get_boolean_op_value@@Base+0x2f8>
   15e98:	movw	r1, #45980	; 0xb39c
   15e9c:	mov	r0, r4
   15ea0:	mov	r2, #2
   15ea4:	movt	r1, #1
   15ea8:	bl	11fd8 <strncmp@plt>
   15eac:	mov	r1, #128	; 0x80
   15eb0:	cmp	r0, #0
   15eb4:	mov	r2, r6
   15eb8:	movweq	r1, #120	; 0x78
   15ebc:	ldr	r1, [r2, r1]!
   15ec0:	adds	r1, r1, #1
   15ec4:	str	r1, [r2]
   15ec8:	ldr	r1, [r2, #4]
   15ecc:	adc	r1, r1, #0
   15ed0:	cmp	r0, #0
   15ed4:	str	r1, [r2, #4]
   15ed8:	beq	16034 <get_boolean_op_value@@Base+0x310>
   15edc:	movw	r1, #45983	; 0xb39f
   15ee0:	mov	r0, r4
   15ee4:	mov	r2, #2
   15ee8:	movt	r1, #1
   15eec:	bl	11fd8 <strncmp@plt>
   15ef0:	mov	r1, #152	; 0x98
   15ef4:	cmp	r0, #0
   15ef8:	mov	r2, r6
   15efc:	movweq	r1, #144	; 0x90
   15f00:	ldr	r1, [r2, r1]!
   15f04:	adds	r1, r1, #1
   15f08:	str	r1, [r2]
   15f0c:	ldr	r1, [r2, #4]
   15f10:	adc	r1, r1, #0
   15f14:	cmp	r0, #0
   15f18:	str	r1, [r2, #4]
   15f1c:	bne	16070 <get_boolean_op_value@@Base+0x34c>
   15f20:	ldrd	r0, [r6, #160]	; 0xa0
   15f24:	mov	r5, #5
   15f28:	adds	r0, r0, #1
   15f2c:	adc	r1, r1, #0
   15f30:	strd	r0, [r6, #160]	; 0xa0
   15f34:	b	16048 <get_boolean_op_value@@Base+0x324>
   15f38:	ldrb	r0, [r4]
   15f3c:	cmp	r0, #62	; 0x3e
   15f40:	beq	15fc4 <get_boolean_op_value@@Base+0x2a0>
   15f44:	cmp	r0, #60	; 0x3c
   15f48:	beq	15f98 <get_boolean_op_value@@Base+0x274>
   15f4c:	cmp	r0, #33	; 0x21
   15f50:	bne	16060 <get_boolean_op_value@@Base+0x33c>
   15f54:	movw	r0, #46172	; 0xb45c
   15f58:	movt	r0, #1
   15f5c:	add	r1, r0, #4
   15f60:	mov	r0, #0
   15f64:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15f68:	ldrd	r0, [r6, #200]	; 0xc8
   15f6c:	mov	r5, #8
   15f70:	adds	r0, r0, #1
   15f74:	adc	r1, r1, #0
   15f78:	strd	r0, [r6, #200]	; 0xc8
   15f7c:	b	16048 <get_boolean_op_value@@Base+0x324>
   15f80:	ldrd	r0, [r6, #40]	; 0x28
   15f84:	mov	r5, #0
   15f88:	adds	r0, r0, #1
   15f8c:	adc	r1, r1, #0
   15f90:	strd	r0, [r6, #40]	; 0x28
   15f94:	b	16048 <get_boolean_op_value@@Base+0x324>
   15f98:	movw	r0, #46172	; 0xb45c
   15f9c:	movt	r0, #1
   15fa0:	add	r1, r0, #8
   15fa4:	mov	r0, #0
   15fa8:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15fac:	ldrd	r0, [r6, #208]	; 0xd0
   15fb0:	mov	r5, #6
   15fb4:	adds	r0, r0, #1
   15fb8:	adc	r1, r1, #0
   15fbc:	strd	r0, [r6, #208]	; 0xd0
   15fc0:	b	16048 <get_boolean_op_value@@Base+0x324>
   15fc4:	movw	r0, #46172	; 0xb45c
   15fc8:	movt	r0, #1
   15fcc:	add	r1, r0, #12
   15fd0:	mov	r0, #0
   15fd4:	bl	16094 <get_boolean_op_value@@Base+0x370>
   15fd8:	ldrd	r0, [r6, #216]	; 0xd8
   15fdc:	mov	r5, #7
   15fe0:	adds	r0, r0, #1
   15fe4:	adc	r1, r1, #0
   15fe8:	strd	r0, [r6, #216]	; 0xd8
   15fec:	b	16048 <get_boolean_op_value@@Base+0x324>
   15ff0:	ldrd	r0, [r6, #64]	; 0x40
   15ff4:	mov	r5, #1
   15ff8:	adds	r0, r0, #1
   15ffc:	adc	r1, r1, #0
   16000:	strd	r0, [r6, #64]	; 0x40
   16004:	b	16048 <get_boolean_op_value@@Base+0x324>
   16008:	ldrd	r0, [r6, #88]	; 0x58
   1600c:	adds	r0, r0, #1
   16010:	adc	r1, r1, #0
   16014:	strd	r0, [r6, #88]	; 0x58
   16018:	b	16048 <get_boolean_op_value@@Base+0x324>
   1601c:	ldrd	r0, [r6, #112]	; 0x70
   16020:	mov	r5, #3
   16024:	adds	r0, r0, #1
   16028:	adc	r1, r1, #0
   1602c:	strd	r0, [r6, #112]	; 0x70
   16030:	b	16048 <get_boolean_op_value@@Base+0x324>
   16034:	ldrd	r0, [r6, #136]	; 0x88
   16038:	mov	r5, #4
   1603c:	adds	r0, r0, #1
   16040:	adc	r1, r1, #0
   16044:	strd	r0, [r6, #136]	; 0x88
   16048:	ldrd	r0, [r6, #224]	; 0xe0
   1604c:	adds	r0, r0, #1
   16050:	adc	r1, r1, #0
   16054:	strd	r0, [r6, #224]	; 0xe0
   16058:	mov	r0, r5
   1605c:	pop	{r4, r5, r6, sl, fp, pc}
   16060:	movw	r1, #46172	; 0xb45c
   16064:	mov	r0, #0
   16068:	movt	r1, #1
   1606c:	bl	16094 <get_boolean_op_value@@Base+0x370>
   16070:	movw	r0, #49376	; 0xc0e0
   16074:	movw	r1, #45986	; 0xb3a2
   16078:	mov	r2, r4
   1607c:	movt	r0, #2
   16080:	movt	r1, #1
   16084:	ldr	r0, [r0]
   16088:	bl	11f30 <fprintf@plt>
   1608c:	mov	r0, #1
   16090:	bl	11f0c <exit@plt>
   16094:	cmn	r0, #1
   16098:	ldrne	r0, [r1, r0, lsl #2]
   1609c:	cmpne	r0, #0
   160a0:	bne	160a8 <get_boolean_op_value@@Base+0x384>
   160a4:	bx	lr
   160a8:	ldrd	r2, [r0]
   160ac:	adds	r2, r2, #1
   160b0:	adc	r3, r3, #0
   160b4:	strd	r2, [r0]
   160b8:	bx	lr
   160bc:	push	{r4, r5, r6, lr}
   160c0:	sub	sp, sp, #8
   160c4:	movw	r0, #46640	; 0xb630
   160c8:	movw	r1, #43290	; 0xa91a
   160cc:	movw	r2, #23410	; 0x5b72
   160d0:	movt	r0, #1
   160d4:	movt	r1, #1
   160d8:	movt	r2, #13184	; 0x3380
   160dc:	bl	1751c <read_boolean_unary_expression@@Base+0x58c>
   160e0:	movw	r0, #46512	; 0xb5b0
   160e4:	movw	r6, #46192	; 0xb470
   160e8:	mov	r5, #0
   160ec:	movt	r0, #1
   160f0:	movt	r6, #1
   160f4:	add	r4, r0, #4
   160f8:	mov	r3, r6
   160fc:	ldr	r0, [r3, r5]!
   16100:	ldr	r1, [r3, #16]
   16104:	str	r1, [sp]
   16108:	ldmib	r3, {r1, r2}
   1610c:	ldrb	r3, [r3, #12]
   16110:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   16114:	ldrd	r0, [r4, #-4]
   16118:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   1611c:	add	r5, r5, #20
   16120:	add	r4, r4, #8
   16124:	cmp	r5, #320	; 0x140
   16128:	bne	160f8 <get_boolean_op_value@@Base+0x3d4>
   1612c:	bl	18cb0 <read_boolean_unary_expression@@Base+0x1d20>
   16130:	add	sp, sp, #8
   16134:	pop	{r4, r5, r6, lr}
   16138:	b	19a1c <read_boolean_unary_expression@@Base+0x2a8c>
   1613c:	push	{fp, lr}
   16140:	bl	160bc <get_boolean_op_value@@Base+0x398>
   16144:	movw	r2, #51360	; 0xc8a0
   16148:	vmov.i32	q8, #0	; 0x00000000
   1614c:	movw	r0, #51472	; 0xc910
   16150:	movw	r1, #50992	; 0xc730
   16154:	mov	ip, #32
   16158:	mov	lr, #0
   1615c:	movt	r2, #2
   16160:	movt	r0, #2
   16164:	movt	r1, #2
   16168:	add	r3, r2, #16
   1616c:	str	lr, [r1, #112]	; 0x70
   16170:	vst1.64	{d16-d17}, [r3 :128]
   16174:	add	r3, r2, #32
   16178:	vst1.64	{d16-d17}, [r3 :128]
   1617c:	add	r3, r2, #48	; 0x30
   16180:	vst1.64	{d16-d17}, [r3 :128]
   16184:	add	r3, r2, #64	; 0x40
   16188:	vst1.64	{d16-d17}, [r3 :128]
   1618c:	add	r3, r2, #80	; 0x50
   16190:	vst1.64	{d16-d17}, [r3 :128]
   16194:	mov	r3, r0
   16198:	vst1.64	{d16-d17}, [r3 :128], ip
   1619c:	str	lr, [r0, #48]	; 0x30
   161a0:	str	lr, [r0, #52]	; 0x34
   161a4:	vst1.64	{d16-d17}, [r3 :128]
   161a8:	add	r3, r1, #96	; 0x60
   161ac:	vst1.64	{d16-d17}, [r3 :128]
   161b0:	add	r3, r1, #80	; 0x50
   161b4:	vst1.64	{d16-d17}, [r3 :128]
   161b8:	add	r3, r1, #64	; 0x40
   161bc:	vst1.64	{d16-d17}, [r3 :128]
   161c0:	add	r3, r1, #48	; 0x30
   161c4:	vst1.64	{d16-d17}, [r3 :128]
   161c8:	add	r3, r1, #32
   161cc:	vst1.64	{d16-d17}, [r3 :128]
   161d0:	add	r3, r1, #16
   161d4:	vst1.64	{d16-d17}, [r3 :128]
   161d8:	mov	r3, #96	; 0x60
   161dc:	vst1.64	{d16-d17}, [r2 :128], r3
   161e0:	vst1.64	{d16-d17}, [r2 :128]
   161e4:	mov	r2, #116	; 0x74
   161e8:	vst1.64	{d16-d17}, [r1 :128], r2
   161ec:	str	lr, [r1]
   161f0:	add	r1, r0, #16
   161f4:	vst1.64	{d16-d17}, [r1 :128]
   161f8:	add	r1, r0, #80	; 0x50
   161fc:	str	lr, [r0, #96]	; 0x60
   16200:	str	lr, [r0, #100]	; 0x64
   16204:	add	r0, r0, #64	; 0x40
   16208:	vst1.64	{d16-d17}, [r1 :128]
   1620c:	movw	r1, #51584	; 0xc980
   16210:	vst1.64	{d16-d17}, [r0 :128]
   16214:	mov	r0, #36	; 0x24
   16218:	movt	r1, #2
   1621c:	mov	r2, r1
   16220:	str	lr, [r1, #32]
   16224:	vst1.64	{d16-d17}, [r2 :128], r0
   16228:	str	lr, [r2]
   1622c:	add	r2, r1, #16
   16230:	vst1.64	{d16-d17}, [r2 :128]
   16234:	add	r2, r1, #64	; 0x40
   16238:	str	lr, [r1, #80]	; 0x50
   1623c:	str	lr, [r1, #84]	; 0x54
   16240:	add	r1, r1, #48	; 0x30
   16244:	vst1.64	{d16-d17}, [r1 :128]
   16248:	movw	r1, #51680	; 0xc9e0
   1624c:	vst1.64	{d16-d17}, [r2 :128]
   16250:	movt	r1, #2
   16254:	mov	r2, r1
   16258:	str	lr, [r1, #32]
   1625c:	vst1.64	{d16-d17}, [r2 :128], r0
   16260:	add	r0, r1, #16
   16264:	vst1.64	{d16-d17}, [r0 :128]
   16268:	add	r0, r1, #64	; 0x40
   1626c:	str	lr, [r2]
   16270:	str	lr, [r1, #80]	; 0x50
   16274:	str	lr, [r1, #84]	; 0x54
   16278:	mov	r2, #232	; 0xe8
   1627c:	vst1.64	{d16-d17}, [r0 :128]
   16280:	add	r0, r1, #48	; 0x30
   16284:	mov	r1, #0
   16288:	vst1.64	{d16-d17}, [r0 :128]
   1628c:	movw	r0, #51120	; 0xc7b0
   16290:	movt	r0, #2
   16294:	bl	11f60 <memset@plt>
   16298:	pop	{fp, pc}
   1629c:	movw	r0, #24764	; 0x60bc
   162a0:	movw	r1, #24892	; 0x613c
   162a4:	movt	r0, #1
   162a8:	movt	r1, #1
   162ac:	b	19ecc <__gcov_flush@@Base+0xb4>

000162b0 <init_grammar@@Base>:
   162b0:	movw	r2, #52544	; 0xcd40
   162b4:	add	r3, pc, #36	; 0x24
   162b8:	movt	r2, #2
   162bc:	vld1.64	{d16-d17}, [r3 :128]
   162c0:	vld1.64	{d18-d19}, [r2 :128]
   162c4:	vadd.i64	q8, q9, q8
   162c8:	vst1.64	{d16-d17}, [r2 :128]
   162cc:	str	r1, [r0]
   162d0:	bx	lr
   162d4:	nop	{0}
   162d8:	nop	{0}
   162dc:	nop	{0}
   162e0:	andeq	r0, r0, r1
   162e4:	andeq	r0, r0, r0
   162e8:	andeq	r0, r0, r1
   162ec:	andeq	r0, r0, r0

000162f0 <destroy_grammar@@Base>:
   162f0:	movw	r0, #52544	; 0xcd40
   162f4:	add	r1, pc, #36	; 0x24
   162f8:	movt	r0, #2
   162fc:	vld1.64	{d16-d17}, [r1 :128]
   16300:	add	r0, r0, #16
   16304:	vld1.64	{d18-d19}, [r0 :128]
   16308:	vadd.i64	q8, q9, q8
   1630c:	vst1.64	{d16-d17}, [r0 :128]
   16310:	bx	lr
   16314:	nop	{0}
   16318:	nop	{0}
   1631c:	nop	{0}
   16320:	andeq	r0, r0, r1
   16324:	andeq	r0, r0, r0
   16328:	andeq	r0, r0, r1
   1632c:	andeq	r0, r0, r0

00016330 <build_ast@@Base>:
   16330:	movw	r1, #52544	; 0xcd40
   16334:	add	r2, pc, #36	; 0x24
   16338:	movt	r1, #2
   1633c:	vld1.64	{d16-d17}, [r2 :128]
   16340:	add	r1, r1, #32
   16344:	vld1.64	{d18-d19}, [r1 :128]
   16348:	vadd.i64	q8, q9, q8
   1634c:	vst1.64	{d16-d17}, [r1 :128]
   16350:	b	16370 <read_function_ast_node@@Base>
   16354:	nop	{0}
   16358:	nop	{0}
   1635c:	nop	{0}
   16360:	andeq	r0, r0, r1
   16364:	andeq	r0, r0, r0
   16368:	andeq	r0, r0, r1
   1636c:	andeq	r0, r0, r0

00016370 <read_function_ast_node@@Base>:
   16370:	push	{r4, r5, r6, r7, fp, lr}
   16374:	add	fp, sp, #16
   16378:	movw	r7, #51776	; 0xca40
   1637c:	mov	r4, r0
   16380:	movt	r7, #2
   16384:	ldrd	r0, [r7]
   16388:	adds	r0, r0, #1
   1638c:	adc	r1, r1, #0
   16390:	strd	r0, [r7]
   16394:	ldr	r0, [r4]
   16398:	bl	120f0 <next@@Base>
   1639c:	ldr	r1, [r0]
   163a0:	mov	r2, #16
   163a4:	mov	r3, r7
   163a8:	cmp	r1, #0
   163ac:	movwne	r2, #8
   163b0:	ldr	r2, [r3, r2]!
   163b4:	adds	r2, r2, #1
   163b8:	str	r2, [r3]
   163bc:	ldr	r2, [r3, #4]
   163c0:	adc	r2, r2, #0
   163c4:	cmp	r1, #0
   163c8:	str	r2, [r3, #4]
   163cc:	beq	163e8 <read_function_ast_node@@Base+0x78>
   163d0:	ldrd	r0, [r7, #24]
   163d4:	mov	r4, #0
   163d8:	adds	r0, r0, #1
   163dc:	adc	r1, r1, #0
   163e0:	strd	r0, [r7, #24]
   163e4:	b	16530 <read_function_ast_node@@Base+0x1c0>
   163e8:	bl	14ce0 <free_token_int_type@@Base>
   163ec:	ldr	r0, [r4]
   163f0:	bl	120f0 <next@@Base>
   163f4:	mov	r5, r0
   163f8:	ldr	r0, [r0]
   163fc:	mov	r1, #40	; 0x28
   16400:	mov	r2, r7
   16404:	cmp	r0, #2
   16408:	movwne	r1, #32
   1640c:	ldr	r1, [r2, r1]!
   16410:	adds	r1, r1, #1
   16414:	str	r1, [r2]
   16418:	ldr	r1, [r2, #4]
   1641c:	adc	r1, r1, #0
   16420:	cmp	r0, #2
   16424:	str	r1, [r2, #4]
   16428:	beq	16444 <read_function_ast_node@@Base+0xd4>
   1642c:	ldrd	r0, [r7, #48]	; 0x30
   16430:	mov	r4, #0
   16434:	adds	r0, r0, #1
   16438:	adc	r1, r1, #0
   1643c:	strd	r0, [r7, #48]	; 0x30
   16440:	b	16530 <read_function_ast_node@@Base+0x1c0>
   16444:	ldr	r0, [r4]
   16448:	bl	120f0 <next@@Base>
   1644c:	ldr	r1, [r0]
   16450:	mov	r2, #64	; 0x40
   16454:	mov	r3, r7
   16458:	cmp	r1, #3
   1645c:	movwne	r2, #56	; 0x38
   16460:	ldr	r2, [r3, r2]!
   16464:	adds	r2, r2, #1
   16468:	str	r2, [r3]
   1646c:	ldr	r2, [r3, #4]
   16470:	adc	r2, r2, #0
   16474:	cmp	r1, #3
   16478:	str	r2, [r3, #4]
   1647c:	beq	16498 <read_function_ast_node@@Base+0x128>
   16480:	ldrd	r0, [r7, #72]	; 0x48
   16484:	mov	r4, #0
   16488:	adds	r0, r0, #1
   1648c:	adc	r1, r1, #0
   16490:	strd	r0, [r7, #72]	; 0x48
   16494:	b	16530 <read_function_ast_node@@Base+0x1c0>
   16498:	bl	14d90 <free_token_opar@@Base>
   1649c:	ldr	r0, [r4]
   164a0:	bl	120f0 <next@@Base>
   164a4:	ldr	r1, [r0]
   164a8:	mov	r2, #88	; 0x58
   164ac:	mov	r3, r7
   164b0:	cmp	r1, #4
   164b4:	movwne	r2, #80	; 0x50
   164b8:	ldr	r2, [r3, r2]!
   164bc:	adds	r2, r2, #1
   164c0:	str	r2, [r3]
   164c4:	ldr	r2, [r3, #4]
   164c8:	adc	r2, r2, #0
   164cc:	cmp	r1, #4
   164d0:	str	r2, [r3, #4]
   164d4:	beq	164f0 <read_function_ast_node@@Base+0x180>
   164d8:	ldrd	r0, [r7, #96]	; 0x60
   164dc:	mov	r4, #0
   164e0:	adds	r0, r0, #1
   164e4:	adc	r1, r1, #0
   164e8:	strd	r0, [r7, #96]	; 0x60
   164ec:	b	16530 <read_function_ast_node@@Base+0x1c0>
   164f0:	ldrd	r2, [r7, #104]	; 0x68
   164f4:	adds	r2, r2, #1
   164f8:	adc	r3, r3, #0
   164fc:	strd	r2, [r7, #104]	; 0x68
   16500:	bl	14dd0 <free_token_cpar@@Base>
   16504:	mov	r0, r4
   16508:	bl	16548 <read_body@@Base>
   1650c:	mov	r6, r0
   16510:	mov	r0, #16
   16514:	bl	11ed0 <malloc@plt>
   16518:	ldr	r1, [r5, #4]
   1651c:	mov	r2, r6
   16520:	mov	r4, r0
   16524:	bl	15360 <init_node_function@@Base>
   16528:	mov	r0, r5
   1652c:	bl	14d50 <free_token_function@@Base>
   16530:	ldrd	r0, [r7, #112]	; 0x70
   16534:	adds	r0, r0, #1
   16538:	adc	r1, r1, #0
   1653c:	strd	r0, [r7, #112]	; 0x70
   16540:	mov	r0, r4
   16544:	pop	{r4, r5, r6, r7, fp, pc}

00016548 <read_body@@Base>:
   16548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1654c:	add	fp, sp, #28
   16550:	sub	sp, sp, #4
   16554:	movw	r4, #51904	; 0xcac0
   16558:	mov	r9, r0
   1655c:	movt	r4, #2
   16560:	ldrd	r0, [r4]
   16564:	adds	r0, r0, #1
   16568:	adc	r1, r1, #0
   1656c:	strd	r0, [r4]
   16570:	ldr	r0, [r9]
   16574:	bl	120f0 <next@@Base>
   16578:	ldr	r1, [r0]
   1657c:	mov	r2, #16
   16580:	mov	r3, r4
   16584:	cmp	r1, #5
   16588:	movwne	r2, #8
   1658c:	ldr	r2, [r3, r2]!
   16590:	adds	r2, r2, #1
   16594:	str	r2, [r3]
   16598:	ldr	r2, [r3, #4]
   1659c:	adc	r2, r2, #0
   165a0:	cmp	r1, #5
   165a4:	str	r2, [r3, #4]
   165a8:	beq	165c4 <read_body@@Base+0x7c>
   165ac:	ldrd	r0, [r4, #24]
   165b0:	mov	r6, #0
   165b4:	adds	r0, r0, #1
   165b8:	adc	r1, r1, #0
   165bc:	strd	r0, [r4, #24]
   165c0:	b	167a0 <read_body@@Base+0x258>
   165c4:	ldrd	r2, [r4, #32]
   165c8:	adds	r2, r2, #1
   165cc:	adc	r3, r3, #0
   165d0:	strd	r2, [r4, #32]
   165d4:	bl	14e10 <free_token_obra@@Base>
   165d8:	ldr	r0, [r9]
   165dc:	bl	120f0 <next@@Base>
   165e0:	mov	r7, r0
   165e4:	ldr	r0, [r0]
   165e8:	mov	r1, #48	; 0x30
   165ec:	mov	r2, r4
   165f0:	mov	r6, #0
   165f4:	cmp	r0, #6
   165f8:	movwne	r1, #40	; 0x28
   165fc:	ldr	r1, [r2, r1]!
   16600:	adds	r1, r1, #1
   16604:	str	r1, [r2]
   16608:	ldr	r1, [r2, #4]
   1660c:	adc	r1, r1, #0
   16610:	cmp	r0, #6
   16614:	str	r1, [r2, #4]
   16618:	beq	16758 <read_body@@Base+0x210>
   1661c:	movw	r1, #47120	; 0xb810
   16620:	mov	sl, #0
   16624:	mov	r6, #0
   16628:	movt	r1, #1
   1662c:	add	r8, r1, #8
   16630:	cmp	r0, #10
   16634:	beq	16678 <read_body@@Base+0x130>
   16638:	cmp	r0, #7
   1663c:	bne	16774 <read_body@@Base+0x22c>
   16640:	movw	r0, #47120	; 0xb810
   16644:	movt	r0, #1
   16648:	add	r1, r0, #4
   1664c:	mov	r0, #0
   16650:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16654:	ldrd	r0, [r4, #80]	; 0x50
   16658:	adds	r0, r0, #1
   1665c:	adc	r1, r1, #0
   16660:	strd	r0, [r4, #80]	; 0x50
   16664:	mov	r0, r7
   16668:	bl	14e90 <free_token_return@@Base>
   1666c:	mov	r0, r9
   16670:	bl	167bc <read_return_expression@@Base>
   16674:	b	166a4 <read_body@@Base+0x15c>
   16678:	mov	r0, #0
   1667c:	mov	r1, r8
   16680:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16684:	ldrd	r0, [r4, #88]	; 0x58
   16688:	adds	r0, r0, #1
   1668c:	adc	r1, r1, #0
   16690:	strd	r0, [r4, #88]	; 0x58
   16694:	mov	r0, r7
   16698:	bl	14f40 <free_token_if@@Base>
   1669c:	mov	r0, r9
   166a0:	bl	168e8 <read_if_statement@@Base>
   166a4:	mov	r5, r0
   166a8:	cmp	r6, #0
   166ac:	mov	r0, #112	; 0x70
   166b0:	mov	r1, r4
   166b4:	movwne	r0, #104	; 0x68
   166b8:	ldr	r0, [r1, r0]!
   166bc:	adds	r0, r0, #1
   166c0:	str	r0, [r1]
   166c4:	ldr	r0, [r1, #4]
   166c8:	adc	r0, r0, #0
   166cc:	cmp	r6, #0
   166d0:	str	r0, [r1, #4]
   166d4:	beq	166f0 <read_body@@Base+0x1a8>
   166d8:	ldrd	r0, [r4, #120]	; 0x78
   166dc:	adds	r0, r0, #1
   166e0:	adc	r1, r1, #0
   166e4:	strd	r0, [r4, #120]	; 0x78
   166e8:	str	r5, [sl, #4]
   166ec:	b	16704 <read_body@@Base+0x1bc>
   166f0:	ldrd	r0, [r4, #128]	; 0x80
   166f4:	mov	r6, r5
   166f8:	adds	r0, r0, #1
   166fc:	adc	r1, r1, #0
   16700:	strd	r0, [r4, #128]	; 0x80
   16704:	ldrd	r0, [r4, #136]	; 0x88
   16708:	adds	r0, r0, #1
   1670c:	adc	r1, r1, #0
   16710:	strd	r0, [r4, #136]	; 0x88
   16714:	ldr	r0, [r9]
   16718:	bl	120f0 <next@@Base>
   1671c:	mov	r7, r0
   16720:	ldr	r0, [r0]
   16724:	mov	r1, #48	; 0x30
   16728:	mov	r2, r4
   1672c:	mov	sl, r5
   16730:	cmp	r0, #6
   16734:	movwne	r1, #40	; 0x28
   16738:	ldr	r1, [r2, r1]!
   1673c:	adds	r1, r1, #1
   16740:	str	r1, [r2]
   16744:	ldr	r1, [r2, #4]
   16748:	adc	r1, r1, #0
   1674c:	cmp	r0, #6
   16750:	str	r1, [r2, #4]
   16754:	bne	16630 <read_body@@Base+0xe8>
   16758:	ldrd	r0, [r4, #144]	; 0x90
   1675c:	adds	r0, r0, #1
   16760:	adc	r1, r1, #0
   16764:	strd	r0, [r4, #144]	; 0x90
   16768:	mov	r0, r7
   1676c:	bl	14e50 <free_token_cbra@@Base>
   16770:	b	167a0 <read_body@@Base+0x258>
   16774:	movw	r1, #47120	; 0xb810
   16778:	mov	r0, #0
   1677c:	movt	r1, #1
   16780:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16784:	ldrd	r0, [r4, #96]	; 0x60
   16788:	adds	r0, r0, #1
   1678c:	adc	r1, r1, #0
   16790:	strd	r0, [r4, #96]	; 0x60
   16794:	mov	r1, r7
   16798:	ldr	r0, [r9]
   1679c:	bl	12380 <push_back@@Base>
   167a0:	ldrd	r0, [r4, #152]	; 0x98
   167a4:	adds	r0, r0, #1
   167a8:	adc	r1, r1, #0
   167ac:	strd	r0, [r4, #152]	; 0x98
   167b0:	mov	r0, r6
   167b4:	sub	sp, fp, #28
   167b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000167bc <read_return_expression@@Base>:
   167bc:	push	{r4, r5, r6, r7, fp, lr}
   167c0:	add	fp, sp, #16
   167c4:	movw	r7, #52064	; 0xcb60
   167c8:	mov	r4, r0
   167cc:	movt	r7, #2
   167d0:	ldrd	r0, [r7]
   167d4:	adds	r0, r0, #1
   167d8:	adc	r1, r1, #0
   167dc:	strd	r0, [r7]
   167e0:	ldr	r0, [r4]
   167e4:	bl	120f0 <next@@Base>
   167e8:	mov	r5, r0
   167ec:	ldr	r0, [r0]
   167f0:	mov	r1, #16
   167f4:	mov	r2, r7
   167f8:	cmp	r0, #1
   167fc:	movwne	r1, #8
   16800:	ldr	r1, [r2, r1]!
   16804:	adds	r1, r1, #1
   16808:	str	r1, [r2]
   1680c:	ldr	r1, [r2, #4]
   16810:	adc	r1, r1, #0
   16814:	cmp	r0, #1
   16818:	str	r1, [r2, #4]
   1681c:	beq	16838 <read_return_expression@@Base+0x7c>
   16820:	ldrd	r0, [r7, #24]
   16824:	mov	r5, #0
   16828:	adds	r0, r0, #1
   1682c:	adc	r1, r1, #0
   16830:	strd	r0, [r7, #24]
   16834:	b	168d0 <read_return_expression@@Base+0x114>
   16838:	mov	r0, #12
   1683c:	bl	11ed0 <malloc@plt>
   16840:	ldr	r1, [r5, #4]
   16844:	mov	r6, r0
   16848:	bl	152f0 <init_node_int@@Base>
   1684c:	mov	r0, r5
   16850:	bl	14d20 <free_token_int_value@@Base>
   16854:	mov	r0, #12
   16858:	bl	11ed0 <malloc@plt>
   1685c:	mov	r1, r6
   16860:	mov	r5, r0
   16864:	bl	153d0 <init_node_return@@Base>
   16868:	ldr	r0, [r4]
   1686c:	bl	120f0 <next@@Base>
   16870:	ldr	r1, [r0]
   16874:	mov	r2, #40	; 0x28
   16878:	mov	r3, r7
   1687c:	cmp	r1, #8
   16880:	movwne	r2, #32
   16884:	ldr	r2, [r3, r2]!
   16888:	adds	r2, r2, #1
   1688c:	str	r2, [r3]
   16890:	ldr	r2, [r3, #4]
   16894:	adc	r2, r2, #0
   16898:	cmp	r1, #8
   1689c:	str	r2, [r3, #4]
   168a0:	beq	168bc <read_return_expression@@Base+0x100>
   168a4:	ldrd	r0, [r7, #48]	; 0x30
   168a8:	mov	r5, #0
   168ac:	adds	r0, r0, #1
   168b0:	adc	r1, r1, #0
   168b4:	strd	r0, [r7, #48]	; 0x30
   168b8:	b	168d0 <read_return_expression@@Base+0x114>
   168bc:	ldrd	r2, [r7, #56]	; 0x38
   168c0:	adds	r2, r2, #1
   168c4:	adc	r3, r3, #0
   168c8:	strd	r2, [r7, #56]	; 0x38
   168cc:	bl	14ed0 <free_token_semicolon@@Base>
   168d0:	ldrd	r0, [r7, #64]	; 0x40
   168d4:	adds	r0, r0, #1
   168d8:	adc	r1, r1, #0
   168dc:	strd	r0, [r7, #64]	; 0x40
   168e0:	mov	r0, r5
   168e4:	pop	{r4, r5, r6, r7, fp, pc}

000168e8 <read_if_statement@@Base>:
   168e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   168ec:	add	fp, sp, #24
   168f0:	movw	r5, #52144	; 0xcbb0
   168f4:	mov	r4, r0
   168f8:	movt	r5, #2
   168fc:	ldrd	r0, [r5]
   16900:	adds	r0, r0, #1
   16904:	adc	r1, r1, #0
   16908:	strd	r0, [r5]
   1690c:	ldr	r0, [r4]
   16910:	bl	120f0 <next@@Base>
   16914:	ldr	r1, [r0]
   16918:	mov	r2, #16
   1691c:	mov	r3, r5
   16920:	cmp	r1, #3
   16924:	movwne	r2, #8
   16928:	ldr	r2, [r3, r2]!
   1692c:	adds	r2, r2, #1
   16930:	str	r2, [r3]
   16934:	ldr	r2, [r3, #4]
   16938:	adc	r2, r2, #0
   1693c:	cmp	r1, #3
   16940:	str	r2, [r3, #4]
   16944:	beq	16960 <read_if_statement@@Base+0x78>
   16948:	ldrd	r0, [r5, #24]
   1694c:	mov	r7, #0
   16950:	adds	r0, r0, #1
   16954:	adc	r1, r1, #0
   16958:	strd	r0, [r5, #24]
   1695c:	b	16a3c <read_if_statement@@Base+0x154>
   16960:	bl	14d90 <free_token_opar@@Base>
   16964:	mov	r0, r4
   16968:	bl	16a60 <read_boolean_expression@@Base>
   1696c:	mov	r8, r0
   16970:	mov	r0, r4
   16974:	bl	16548 <read_body@@Base>
   16978:	mov	r6, r0
   1697c:	ldr	r0, [r4]
   16980:	bl	120f0 <next@@Base>
   16984:	mov	r1, r0
   16988:	ldr	r0, [r0]
   1698c:	mov	r2, #40	; 0x28
   16990:	mov	r3, r5
   16994:	cmp	r0, #11
   16998:	movweq	r2, #32
   1699c:	ldr	r2, [r3, r2]!
   169a0:	adds	r2, r2, #1
   169a4:	str	r2, [r3]
   169a8:	ldr	r2, [r3, #4]
   169ac:	adc	r2, r2, #0
   169b0:	cmp	r0, #11
   169b4:	str	r2, [r3, #4]
   169b8:	bne	169ec <read_if_statement@@Base+0x104>
   169bc:	ldr	r0, [r5, #48]	; 0x30
   169c0:	ldr	r3, [r5, #52]	; 0x34
   169c4:	adds	r0, r0, #1
   169c8:	str	r0, [r5, #48]	; 0x30
   169cc:	adc	r3, r3, #0
   169d0:	mov	r0, r1
   169d4:	str	r3, [r5, #52]	; 0x34
   169d8:	bl	14f80 <free_token_else@@Base>
   169dc:	mov	r0, r4
   169e0:	bl	16548 <read_body@@Base>
   169e4:	mov	r4, r0
   169e8:	b	16a10 <read_if_statement@@Base+0x128>
   169ec:	ldr	r0, [r5, #56]	; 0x38
   169f0:	ldr	r3, [r5, #60]	; 0x3c
   169f4:	adds	r0, r0, #1
   169f8:	adc	r3, r3, #0
   169fc:	str	r0, [r5, #56]	; 0x38
   16a00:	str	r3, [r5, #60]	; 0x3c
   16a04:	ldr	r0, [r4]
   16a08:	bl	12380 <push_back@@Base>
   16a0c:	mov	r4, #0
   16a10:	ldrd	r0, [r5, #64]	; 0x40
   16a14:	adds	r0, r0, #1
   16a18:	adc	r1, r1, #0
   16a1c:	strd	r0, [r5, #64]	; 0x40
   16a20:	mov	r0, #20
   16a24:	bl	11ed0 <malloc@plt>
   16a28:	mov	r1, r8
   16a2c:	mov	r2, r6
   16a30:	mov	r3, r4
   16a34:	mov	r7, r0
   16a38:	bl	15440 <init_node_if@@Base>
   16a3c:	ldrd	r0, [r5, #72]	; 0x48
   16a40:	adds	r0, r0, #1
   16a44:	adc	r1, r1, #0
   16a48:	strd	r0, [r5, #72]	; 0x48
   16a4c:	mov	r0, r7
   16a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a54:	nop	{0}
   16a58:	nop	{0}
   16a5c:	nop	{0}

00016a60 <read_boolean_expression@@Base>:
   16a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a64:	add	fp, sp, #28
   16a68:	sub	sp, sp, #4
   16a6c:	movw	r7, #52224	; 0xcc00
   16a70:	mov	r4, r0
   16a74:	add	r0, pc, #452	; 0x1c4
   16a78:	mov	r5, #0
   16a7c:	movt	r7, #2
   16a80:	vld1.64	{d16-d17}, [r0 :128]
   16a84:	str	r5, [sp]
   16a88:	vld1.64	{d18-d19}, [r7 :128]
   16a8c:	vadd.i64	q8, q9, q8
   16a90:	vst1.64	{d16-d17}, [r7 :128]
   16a94:	ldr	r0, [r4]
   16a98:	bl	120f0 <next@@Base>
   16a9c:	mov	r6, r0
   16aa0:	ldr	r0, [r0]
   16aa4:	mov	r1, #24
   16aa8:	mov	r2, r7
   16aac:	cmp	r0, #4
   16ab0:	movwne	r1, #16
   16ab4:	ldr	r1, [r2, r1]!
   16ab8:	adds	r1, r1, #1
   16abc:	str	r1, [r2]
   16ac0:	ldr	r1, [r2, #4]
   16ac4:	adc	r1, r1, #0
   16ac8:	cmp	r0, #4
   16acc:	str	r1, [r2, #4]
   16ad0:	beq	16be0 <read_boolean_expression@@Base+0x180>
   16ad4:	movw	r8, #47132	; 0xb81c
   16ad8:	mov	r5, #0
   16adc:	movt	r8, #1
   16ae0:	add	r9, r8, #8
   16ae4:	cmp	r0, #12
   16ae8:	beq	16b60 <read_boolean_expression@@Base+0x100>
   16aec:	cmp	r0, #3
   16af0:	beq	16b28 <read_boolean_expression@@Base+0xc8>
   16af4:	cmp	r0, #1
   16af8:	bne	16c04 <read_boolean_expression@@Base+0x1a4>
   16afc:	add	r1, r8, #4
   16b00:	mov	r0, #0
   16b04:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16b08:	ldrd	r0, [r7, #64]	; 0x40
   16b0c:	adds	r0, r0, #1
   16b10:	adc	r1, r1, #0
   16b14:	strd	r0, [r7, #64]	; 0x40
   16b18:	mov	r1, r6
   16b1c:	ldr	r0, [r4]
   16b20:	bl	12380 <push_back@@Base>
   16b24:	b	16b44 <read_boolean_expression@@Base+0xe4>
   16b28:	add	r1, r8, #12
   16b2c:	mov	r0, #0
   16b30:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16b34:	ldrd	r0, [r7, #80]	; 0x50
   16b38:	adds	r0, r0, #1
   16b3c:	adc	r1, r1, #0
   16b40:	strd	r0, [r7, #80]	; 0x50
   16b44:	mov	r0, r4
   16b48:	mov	r1, r5
   16b4c:	mov	r2, sp
   16b50:	mov	r3, sl
   16b54:	bl	16c50 <read_single_boolean_expression@@Base>
   16b58:	mov	r5, r0
   16b5c:	b	16b90 <read_boolean_expression@@Base+0x130>
   16b60:	mov	r0, #0
   16b64:	mov	r1, r9
   16b68:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16b6c:	ldrd	r0, [r7, #72]	; 0x48
   16b70:	adds	r0, r0, #1
   16b74:	adc	r1, r1, #0
   16b78:	strd	r0, [r7, #72]	; 0x48
   16b7c:	mov	r0, r6
   16b80:	bl	15d24 <get_boolean_op_value@@Base>
   16b84:	mov	sl, r0
   16b88:	mov	r0, #1
   16b8c:	str	r0, [sp]
   16b90:	ldrd	r0, [r7, #88]	; 0x58
   16b94:	adds	r0, r0, #1
   16b98:	adc	r1, r1, #0
   16b9c:	strd	r0, [r7, #88]	; 0x58
   16ba0:	ldr	r0, [r4]
   16ba4:	bl	120f0 <next@@Base>
   16ba8:	mov	r6, r0
   16bac:	ldr	r0, [r0]
   16bb0:	mov	r1, #24
   16bb4:	mov	r2, r7
   16bb8:	cmp	r0, #4
   16bbc:	movwne	r1, #16
   16bc0:	ldr	r1, [r2, r1]!
   16bc4:	adds	r1, r1, #1
   16bc8:	str	r1, [r2]
   16bcc:	ldr	r1, [r2, #4]
   16bd0:	adc	r1, r1, #0
   16bd4:	cmp	r0, #4
   16bd8:	str	r1, [r2, #4]
   16bdc:	bne	16ae4 <read_boolean_expression@@Base+0x84>
   16be0:	ldrd	r0, [r7, #96]	; 0x60
   16be4:	adds	r0, r0, #1
   16be8:	adc	r1, r1, #0
   16bec:	strd	r0, [r7, #96]	; 0x60
   16bf0:	mov	r0, r6
   16bf4:	bl	14dd0 <free_token_cpar@@Base>
   16bf8:	mov	r0, r5
   16bfc:	sub	sp, fp, #28
   16c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c04:	movw	r1, #47132	; 0xb81c
   16c08:	mov	r0, #0
   16c0c:	movt	r1, #1
   16c10:	bl	170e0 <read_boolean_unary_expression@@Base+0x150>
   16c14:	movw	r0, #49376	; 0xc0e0
   16c18:	mov	r1, #33	; 0x21
   16c1c:	mov	r2, #1
   16c20:	movt	r0, #2
   16c24:	ldr	r3, [r0]
   16c28:	movw	r0, #46981	; 0xb785
   16c2c:	movt	r0, #1
   16c30:	bl	11ea0 <fwrite@plt>
   16c34:	mov	r0, #1
   16c38:	bl	11f0c <exit@plt>
   16c3c:	nop	{0}
   16c40:	andeq	r0, r0, r1
   16c44:	andeq	r0, r0, r0
   16c48:	andeq	r0, r0, r1
   16c4c:	andeq	r0, r0, r0

00016c50 <read_single_boolean_expression@@Base>:
   16c50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16c54:	add	fp, sp, #24
   16c58:	movw	r5, #52544	; 0xcd40
   16c5c:	mov	r4, r2
   16c60:	mov	r8, r3
   16c64:	movt	r5, #2
   16c68:	mov	r2, r5
   16c6c:	ldr	r3, [r2, #48]!	; 0x30
   16c70:	adds	r3, r3, #1
   16c74:	str	r3, [r2]
   16c78:	ldr	r3, [r2, #4]
   16c7c:	adc	r3, r3, #0
   16c80:	cmp	r1, #0
   16c84:	str	r3, [r2, #4]
   16c88:	mov	r3, #16
   16c8c:	movweq	r3, #8
   16c90:	ldr	r3, [r2, r3]!
   16c94:	adds	r3, r3, #1
   16c98:	str	r3, [r2]
   16c9c:	ldr	r3, [r2, #4]
   16ca0:	adc	r3, r3, #0
   16ca4:	cmp	r1, #0
   16ca8:	str	r3, [r2, #4]
   16cac:	beq	16d1c <read_single_boolean_expression@@Base+0xcc>
   16cb0:	ldr	r1, [r4]
   16cb4:	mov	r2, #40	; 0x28
   16cb8:	cmp	r1, #0
   16cbc:	movwne	r2, #32
   16cc0:	add	r2, r5, r2
   16cc4:	ldrd	r6, [r2, #48]	; 0x30
   16cc8:	adds	r6, r6, #1
   16ccc:	adc	r7, r7, #0
   16cd0:	cmp	r1, #0
   16cd4:	strd	r6, [r2, #48]	; 0x30
   16cd8:	beq	16d4c <read_single_boolean_expression@@Base+0xfc>
   16cdc:	ldrd	r2, [r5, #96]	; 0x60
   16ce0:	adds	r2, r2, #1
   16ce4:	adc	r3, r3, #0
   16ce8:	strd	r2, [r5, #96]	; 0x60
   16cec:	bl	16d74 <read_boolean_binary_expression@@Base>
   16cf0:	mov	r7, r0
   16cf4:	mov	r0, #20
   16cf8:	bl	11ed0 <malloc@plt>
   16cfc:	mov	r1, r8
   16d00:	mov	r2, #0
   16d04:	mov	r3, r7
   16d08:	mov	r6, r0
   16d0c:	mov	r9, #0
   16d10:	bl	154b0 <init_node_boolean_operator@@Base>
   16d14:	str	r9, [r4]
   16d18:	b	16d34 <read_single_boolean_expression@@Base+0xe4>
   16d1c:	ldrd	r2, [r5, #72]	; 0x48
   16d20:	adds	r2, r2, #1
   16d24:	adc	r3, r3, #0
   16d28:	strd	r2, [r5, #72]	; 0x48
   16d2c:	bl	16d74 <read_boolean_binary_expression@@Base>
   16d30:	mov	r6, r0
   16d34:	ldrd	r0, [r5, #104]	; 0x68
   16d38:	adds	r0, r0, #1
   16d3c:	adc	r1, r1, #0
   16d40:	strd	r0, [r5, #104]	; 0x68
   16d44:	mov	r0, r6
   16d48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d4c:	mov	r0, #4
   16d50:	movw	r1, #47015	; 0xb7a7
   16d54:	ldr	r2, [r0]
   16d58:	movw	r0, #49376	; 0xc0e0
   16d5c:	movt	r1, #1
   16d60:	movt	r0, #2
   16d64:	ldr	r0, [r0]
   16d68:	bl	11f30 <fprintf@plt>
   16d6c:	mov	r0, #1
   16d70:	bl	11f0c <exit@plt>

00016d74 <read_boolean_binary_expression@@Base>:
   16d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d78:	add	fp, sp, #24
   16d7c:	movw	r4, #52336	; 0xcc70
   16d80:	mov	r5, r0
   16d84:	movt	r4, #2
   16d88:	ldrd	r0, [r4]
   16d8c:	adds	r0, r0, #1
   16d90:	adc	r1, r1, #0
   16d94:	strd	r0, [r4]
   16d98:	ldr	r0, [r5]
   16d9c:	bl	120f0 <next@@Base>
   16da0:	mov	r6, r0
   16da4:	ldr	r0, [r0]
   16da8:	mov	r1, #16
   16dac:	mov	r2, r4
   16db0:	cmp	r0, #1
   16db4:	movwne	r1, #8
   16db8:	ldr	r1, [r2, r1]!
   16dbc:	adds	r1, r1, #1
   16dc0:	str	r1, [r2]
   16dc4:	ldr	r1, [r2, #4]
   16dc8:	adc	r1, r1, #0
   16dcc:	cmp	r0, #1
   16dd0:	str	r1, [r2, #4]
   16dd4:	beq	16e34 <read_boolean_binary_expression@@Base+0xc0>
   16dd8:	mov	r1, #32
   16ddc:	cmp	r0, #12
   16de0:	mov	r2, r4
   16de4:	movweq	r1, #24
   16de8:	ldr	r1, [r2, r1]!
   16dec:	adds	r1, r1, #1
   16df0:	str	r1, [r2]
   16df4:	ldr	r1, [r2, #4]
   16df8:	adc	r1, r1, #0
   16dfc:	cmp	r0, #12
   16e00:	str	r1, [r2, #4]
   16e04:	bne	16ea4 <read_boolean_binary_expression@@Base+0x130>
   16e08:	ldrd	r0, [r4, #40]	; 0x28
   16e0c:	adds	r0, r0, #1
   16e10:	adc	r1, r1, #0
   16e14:	strd	r0, [r4, #40]	; 0x28
   16e18:	mov	r1, r6
   16e1c:	ldr	r0, [r5]
   16e20:	bl	12380 <push_back@@Base>
   16e24:	mov	r0, r5
   16e28:	bl	16f90 <read_boolean_unary_expression@@Base>
   16e2c:	mov	r5, r0
   16e30:	b	16f78 <read_boolean_binary_expression@@Base+0x204>
   16e34:	mov	r0, #12
   16e38:	bl	11ed0 <malloc@plt>
   16e3c:	ldr	r1, [r6, #4]
   16e40:	mov	r8, r0
   16e44:	bl	152f0 <init_node_int@@Base>
   16e48:	mov	r0, r6
   16e4c:	bl	14d20 <free_token_int_value@@Base>
   16e50:	ldr	r0, [r5]
   16e54:	bl	120f0 <next@@Base>
   16e58:	mov	r7, r0
   16e5c:	ldr	r0, [r0]
   16e60:	mov	r1, #64	; 0x40
   16e64:	mov	r2, r4
   16e68:	cmp	r0, #12
   16e6c:	movwne	r1, #56	; 0x38
   16e70:	ldr	r1, [r2, r1]!
   16e74:	adds	r1, r1, #1
   16e78:	str	r1, [r2]
   16e7c:	ldr	r1, [r2, #4]
   16e80:	adc	r1, r1, #0
   16e84:	cmp	r0, #12
   16e88:	str	r1, [r2, #4]
   16e8c:	beq	16ebc <read_boolean_binary_expression@@Base+0x148>
   16e90:	ldrd	r0, [r4, #72]	; 0x48
   16e94:	adds	r0, r0, #1
   16e98:	adc	r1, r1, #0
   16e9c:	strd	r0, [r4, #72]	; 0x48
   16ea0:	b	16f20 <read_boolean_binary_expression@@Base+0x1ac>
   16ea4:	ldrd	r0, [r4, #48]	; 0x30
   16ea8:	mov	r5, #0
   16eac:	adds	r0, r0, #1
   16eb0:	adc	r1, r1, #0
   16eb4:	strd	r0, [r4, #48]	; 0x30
   16eb8:	b	16f78 <read_boolean_binary_expression@@Base+0x204>
   16ebc:	mov	r0, r7
   16ec0:	bl	15d24 <get_boolean_op_value@@Base>
   16ec4:	mov	r6, r0
   16ec8:	mov	r0, r7
   16ecc:	bl	14fc0 <free_token_boolean_op@@Base>
   16ed0:	ldr	r0, [r5]
   16ed4:	bl	120f0 <next@@Base>
   16ed8:	mov	r5, r0
   16edc:	ldr	r0, [r0]
   16ee0:	mov	r1, #88	; 0x58
   16ee4:	mov	r2, r4
   16ee8:	cmp	r0, #1
   16eec:	movwne	r1, #80	; 0x50
   16ef0:	ldr	r1, [r2, r1]!
   16ef4:	adds	r1, r1, #1
   16ef8:	str	r1, [r2]
   16efc:	ldr	r1, [r2, #4]
   16f00:	adc	r1, r1, #0
   16f04:	cmp	r0, #1
   16f08:	str	r1, [r2, #4]
   16f0c:	beq	16f30 <read_boolean_binary_expression@@Base+0x1bc>
   16f10:	ldrd	r0, [r4, #96]	; 0x60
   16f14:	adds	r0, r0, #1
   16f18:	adc	r1, r1, #0
   16f1c:	strd	r0, [r4, #96]	; 0x60
   16f20:	mov	r0, r8
   16f24:	bl	15520 <free_node@@Base>
   16f28:	mov	r5, #0
   16f2c:	b	16f78 <read_boolean_binary_expression@@Base+0x204>
   16f30:	ldrd	r0, [r4, #104]	; 0x68
   16f34:	adds	r0, r0, #1
   16f38:	adc	r1, r1, #0
   16f3c:	strd	r0, [r4, #104]	; 0x68
   16f40:	mov	r0, #12
   16f44:	bl	11ed0 <malloc@plt>
   16f48:	ldr	r1, [r5, #4]
   16f4c:	mov	r7, r0
   16f50:	bl	152f0 <init_node_int@@Base>
   16f54:	mov	r0, r5
   16f58:	bl	14d20 <free_token_int_value@@Base>
   16f5c:	mov	r0, #20
   16f60:	bl	11ed0 <malloc@plt>
   16f64:	mov	r1, r6
   16f68:	mov	r2, r8
   16f6c:	mov	r3, r7
   16f70:	mov	r5, r0
   16f74:	bl	154b0 <init_node_boolean_operator@@Base>
   16f78:	ldrd	r0, [r4, #112]	; 0x70
   16f7c:	adds	r0, r0, #1
   16f80:	adc	r1, r1, #0
   16f84:	strd	r0, [r4, #112]	; 0x70
   16f88:	mov	r0, r5
   16f8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016f90 <read_boolean_unary_expression@@Base>:
   16f90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16f94:	add	fp, sp, #24
   16f98:	movw	r5, #52464	; 0xccf0
   16f9c:	mov	r6, r0
   16fa0:	movt	r5, #2
   16fa4:	ldrd	r0, [r5]
   16fa8:	adds	r0, r0, #1
   16fac:	adc	r1, r1, #0
   16fb0:	strd	r0, [r5]
   16fb4:	mov	r0, #20
   16fb8:	bl	11ed0 <malloc@plt>
   16fbc:	mov	r4, r0
   16fc0:	ldr	r0, [r6]
   16fc4:	bl	120f0 <next@@Base>
   16fc8:	mov	r7, r0
   16fcc:	ldr	r0, [r0]
   16fd0:	mov	r1, #16
   16fd4:	mov	r2, r5
   16fd8:	cmp	r0, #12
   16fdc:	movwne	r1, #8
   16fe0:	ldr	r1, [r2, r1]!
   16fe4:	adds	r1, r1, #1
   16fe8:	str	r1, [r2]
   16fec:	ldr	r1, [r2, #4]
   16ff0:	adc	r1, r1, #0
   16ff4:	cmp	r0, #12
   16ff8:	str	r1, [r2, #4]
   16ffc:	beq	17014 <read_boolean_unary_expression@@Base+0x84>
   17000:	ldrd	r0, [r5, #24]
   17004:	adds	r0, r0, #1
   17008:	adc	r1, r1, #0
   1700c:	strd	r0, [r5, #24]
   17010:	b	17078 <read_boolean_unary_expression@@Base+0xe8>
   17014:	mov	r0, r7
   17018:	bl	15d24 <get_boolean_op_value@@Base>
   1701c:	mov	r8, r0
   17020:	mov	r0, r7
   17024:	bl	14fc0 <free_token_boolean_op@@Base>
   17028:	ldr	r0, [r6]
   1702c:	bl	120f0 <next@@Base>
   17030:	mov	r6, r0
   17034:	ldr	r0, [r0]
   17038:	mov	r1, #40	; 0x28
   1703c:	mov	r2, r5
   17040:	cmp	r0, #1
   17044:	movwne	r1, #32
   17048:	ldr	r1, [r2, r1]!
   1704c:	adds	r1, r1, #1
   17050:	str	r1, [r2]
   17054:	ldr	r1, [r2, #4]
   17058:	adc	r1, r1, #0
   1705c:	cmp	r0, #1
   17060:	str	r1, [r2, #4]
   17064:	beq	17088 <read_boolean_unary_expression@@Base+0xf8>
   17068:	ldrd	r0, [r5, #48]	; 0x30
   1706c:	adds	r0, r0, #1
   17070:	adc	r1, r1, #0
   17074:	strd	r0, [r5, #48]	; 0x30
   17078:	mov	r0, r4
   1707c:	bl	15c84 <free_node_boolean_operator@@Base>
   17080:	mov	r4, #0
   17084:	b	170c8 <read_boolean_unary_expression@@Base+0x138>
   17088:	ldrd	r0, [r5, #56]	; 0x38
   1708c:	adds	r0, r0, #1
   17090:	adc	r1, r1, #0
   17094:	strd	r0, [r5, #56]	; 0x38
   17098:	mov	r0, #12
   1709c:	bl	11ed0 <malloc@plt>
   170a0:	ldr	r1, [r6, #4]
   170a4:	mov	r7, r0
   170a8:	bl	152f0 <init_node_int@@Base>
   170ac:	mov	r0, r6
   170b0:	bl	14d20 <free_token_int_value@@Base>
   170b4:	mov	r0, r4
   170b8:	mov	r1, r8
   170bc:	mov	r2, r7
   170c0:	mov	r3, #0
   170c4:	bl	154b0 <init_node_boolean_operator@@Base>
   170c8:	ldrd	r0, [r5, #64]	; 0x40
   170cc:	adds	r0, r0, #1
   170d0:	adc	r1, r1, #0
   170d4:	strd	r0, [r5, #64]	; 0x40
   170d8:	mov	r0, r4
   170dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170e0:	cmn	r0, #1
   170e4:	ldrne	r0, [r1, r0, lsl #2]
   170e8:	cmpne	r0, #0
   170ec:	bne	170f4 <read_boolean_unary_expression@@Base+0x164>
   170f0:	bx	lr
   170f4:	ldrd	r2, [r0]
   170f8:	adds	r2, r2, #1
   170fc:	adc	r3, r3, #0
   17100:	strd	r2, [r0]
   17104:	bx	lr
   17108:	push	{r4, r5, fp, lr}
   1710c:	sub	sp, sp, #8
   17110:	movw	r4, #27576	; 0x6bb8
   17114:	movw	r0, #47152	; 0xb830
   17118:	movw	r1, #43290	; 0xa91a
   1711c:	movt	r4, #51930	; 0xcada
   17120:	movt	r0, #1
   17124:	movt	r1, #1
   17128:	mov	r2, r4
   1712c:	bl	1751c <read_boolean_unary_expression@@Base+0x58c>
   17130:	movw	r1, #47071	; 0xb7df
   17134:	movw	r2, #28921	; 0x70f9
   17138:	mov	r0, #0
   1713c:	mov	r3, #0
   17140:	str	r4, [sp]
   17144:	movt	r1, #1
   17148:	movt	r2, #25998	; 0x658e
   1714c:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   17150:	movw	r5, #52544	; 0xcd40
   17154:	mov	r0, #2
   17158:	movt	r5, #2
   1715c:	mov	r1, r5
   17160:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   17164:	movw	r1, #47084	; 0xb7ec
   17168:	movw	r2, #23612	; 0x5c3c
   1716c:	mov	r0, #1
   17170:	mov	r3, #0
   17174:	str	r4, [sp]
   17178:	movt	r1, #1
   1717c:	movt	r2, #45187	; 0xb083
   17180:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   17184:	add	r1, r5, #16
   17188:	mov	r0, #2
   1718c:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   17190:	movw	r1, #47100	; 0xb7fc
   17194:	movw	r2, #17474	; 0x4442
   17198:	mov	r0, #2
   1719c:	mov	r3, #0
   171a0:	str	r4, [sp]
   171a4:	movt	r1, #1
   171a8:	movt	r2, #7506	; 0x1d52
   171ac:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   171b0:	add	r1, r5, #32
   171b4:	mov	r0, #2
   171b8:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   171bc:	movw	r1, #47248	; 0xb890
   171c0:	movw	r2, #45287	; 0xb0e7
   171c4:	mov	r0, #3
   171c8:	mov	r3, #0
   171cc:	str	r4, [sp]
   171d0:	movt	r1, #1
   171d4:	movt	r2, #16066	; 0x3ec2
   171d8:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   171dc:	movw	r1, #51776	; 0xca40
   171e0:	mov	r0, #15
   171e4:	movt	r1, #2
   171e8:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   171ec:	movw	r1, #47110	; 0xb806
   171f0:	movw	r2, #53414	; 0xd0a6
   171f4:	mov	r0, #4
   171f8:	mov	r3, #0
   171fc:	str	r4, [sp]
   17200:	movt	r1, #1
   17204:	movt	r2, #50009	; 0xc359
   17208:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   1720c:	movw	r1, #51904	; 0xcac0
   17210:	mov	r0, #20
   17214:	movt	r1, #2
   17218:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   1721c:	movw	r1, #47280	; 0xb8b0
   17220:	movw	r2, #22695	; 0x58a7
   17224:	mov	r0, #5
   17228:	mov	r3, #0
   1722c:	str	r4, [sp]
   17230:	movt	r1, #1
   17234:	movt	r2, #15548	; 0x3cbc
   17238:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   1723c:	movw	r1, #52064	; 0xcb60
   17240:	mov	r0, #9
   17244:	movt	r1, #2
   17248:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   1724c:	movw	r1, #47312	; 0xb8d0
   17250:	movw	r2, #45831	; 0xb307
   17254:	mov	r0, #6
   17258:	mov	r3, #0
   1725c:	str	r4, [sp]
   17260:	movt	r1, #1
   17264:	movt	r2, #14394	; 0x383a
   17268:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   1726c:	movw	r1, #52144	; 0xcbb0
   17270:	mov	r0, #10
   17274:	movt	r1, #2
   17278:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   1727c:	movw	r1, #47344	; 0xb8f0
   17280:	movw	r2, #51825	; 0xca71
   17284:	mov	r0, #7
   17288:	mov	r3, #0
   1728c:	str	r4, [sp]
   17290:	movt	r1, #1
   17294:	movt	r2, #25259	; 0x62ab
   17298:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   1729c:	movw	r1, #52224	; 0xcc00
   172a0:	mov	r0, #13
   172a4:	movt	r1, #2
   172a8:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   172ac:	movw	r1, #47376	; 0xb910
   172b0:	movw	r2, #53843	; 0xd253
   172b4:	mov	r0, #8
   172b8:	mov	r3, #0
   172bc:	str	r4, [sp]
   172c0:	movt	r1, #1
   172c4:	movt	r2, #32347	; 0x7e5b
   172c8:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   172cc:	add	r1, r5, #48	; 0x30
   172d0:	mov	r0, #8
   172d4:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   172d8:	movw	r1, #47408	; 0xb930
   172dc:	movw	r2, #3619	; 0xe23
   172e0:	mov	r0, #9
   172e4:	mov	r3, #0
   172e8:	str	r4, [sp]
   172ec:	movt	r1, #1
   172f0:	movt	r2, #35429	; 0x8a65
   172f4:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   172f8:	movw	r1, #52336	; 0xcc70
   172fc:	mov	r0, #15
   17300:	movt	r1, #2
   17304:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   17308:	movw	r1, #47440	; 0xb950
   1730c:	movw	r2, #19840	; 0x4d80
   17310:	mov	r0, #10
   17314:	mov	r3, #0
   17318:	str	r4, [sp]
   1731c:	movt	r1, #1
   17320:	movt	r2, #45708	; 0xb28c
   17324:	bl	17c80 <read_boolean_unary_expression@@Base+0xcf0>
   17328:	movw	r1, #52464	; 0xccf0
   1732c:	mov	r0, #9
   17330:	movt	r1, #2
   17334:	bl	18534 <read_boolean_unary_expression@@Base+0x15a4>
   17338:	bl	18cb0 <read_boolean_unary_expression@@Base+0x1d20>
   1733c:	add	sp, sp, #8
   17340:	pop	{r4, r5, fp, lr}
   17344:	b	19a1c <read_boolean_unary_expression@@Base+0x2a8c>
   17348:	push	{r4, r5, r6, r7, r8, lr}
   1734c:	vpush	{d8-d9}
   17350:	bl	17108 <read_boolean_unary_expression@@Base+0x178>
   17354:	movw	r5, #52544	; 0xcd40
   17358:	vmov.i32	q4, #0	; 0x00000000
   1735c:	mov	r4, #0
   17360:	mov	r8, #116	; 0x74
   17364:	mov	r6, #64	; 0x40
   17368:	mov	r2, #160	; 0xa0
   1736c:	movt	r5, #2
   17370:	add	r0, r5, #16
   17374:	mov	r7, r5
   17378:	vst1.64	{d8-d9}, [r0 :128]
   1737c:	add	r0, r5, #32
   17380:	vst1.64	{d8-d9}, [r0 :128]
   17384:	movw	r0, #51776	; 0xca40
   17388:	vst1.64	{d8-d9}, [r7 :128], r6
   1738c:	movt	r0, #2
   17390:	add	r1, r0, #96	; 0x60
   17394:	str	r4, [r0, #112]	; 0x70
   17398:	vst1.64	{d8-d9}, [r1 :128]
   1739c:	add	r1, r0, #80	; 0x50
   173a0:	vst1.64	{d8-d9}, [r1 :128]
   173a4:	add	r1, r0, #64	; 0x40
   173a8:	vst1.64	{d8-d9}, [r1 :128]
   173ac:	add	r1, r0, #48	; 0x30
   173b0:	vst1.64	{d8-d9}, [r1 :128]
   173b4:	add	r1, r0, #32
   173b8:	vst1.64	{d8-d9}, [r1 :128]
   173bc:	add	r1, r0, #16
   173c0:	vst1.64	{d8-d9}, [r0 :128], r8
   173c4:	str	r4, [r0]
   173c8:	movw	r0, #51904	; 0xcac0
   173cc:	vst1.64	{d8-d9}, [r1 :128]
   173d0:	mov	r1, #0
   173d4:	movt	r0, #2
   173d8:	bl	11f60 <memset@plt>
   173dc:	movw	r1, #52224	; 0xcc00
   173e0:	vst1.64	{d8-d9}, [r7 :128]
   173e4:	movt	r1, #2
   173e8:	add	r0, r1, #80	; 0x50
   173ec:	str	r4, [r1, #96]	; 0x60
   173f0:	vst1.64	{d8-d9}, [r0 :128]
   173f4:	add	r0, r1, #64	; 0x40
   173f8:	vst1.64	{d8-d9}, [r0 :128]
   173fc:	add	r0, r1, #48	; 0x30
   17400:	vst1.64	{d8-d9}, [r0 :128]
   17404:	add	r0, r1, #32
   17408:	vst1.64	{d8-d9}, [r0 :128]
   1740c:	add	r0, r1, #16
   17410:	vst1.64	{d8-d9}, [r0 :128]
   17414:	movw	r0, #52144	; 0xcbb0
   17418:	movt	r0, #2
   1741c:	add	r2, r0, #48	; 0x30
   17420:	vst1.64	{d8-d9}, [r2 :128]
   17424:	add	r2, r0, #32
   17428:	vst1.64	{d8-d9}, [r2 :128]
   1742c:	add	r2, r0, #16
   17430:	vst1.64	{d8-d9}, [r0 :128], r6
   17434:	vst1.64	{d8-d9}, [r2 :128]
   17438:	movw	r2, #52064	; 0xcb60
   1743c:	vst1.64	{d8-d9}, [r0 :128]
   17440:	mov	r0, #68	; 0x44
   17444:	movt	r2, #2
   17448:	add	r3, r2, #48	; 0x30
   1744c:	str	r4, [r2, #64]	; 0x40
   17450:	vst1.64	{d8-d9}, [r3 :128]
   17454:	add	r3, r2, #32
   17458:	vst1.64	{d8-d9}, [r3 :128]
   1745c:	add	r3, r2, #16
   17460:	vst1.64	{d8-d9}, [r2 :128], r0
   17464:	str	r4, [r2]
   17468:	mov	r2, #100	; 0x64
   1746c:	vst1.64	{d8-d9}, [r3 :128]
   17470:	vst1.64	{d8-d9}, [r1 :128], r2
   17474:	str	r4, [r1]
   17478:	add	r1, r5, #96	; 0x60
   1747c:	vst1.64	{d8-d9}, [r1 :128]
   17480:	add	r1, r5, #80	; 0x50
   17484:	vst1.64	{d8-d9}, [r1 :128]
   17488:	add	r1, r5, #48	; 0x30
   1748c:	vst1.64	{d8-d9}, [r1 :128]
   17490:	movw	r1, #52336	; 0xcc70
   17494:	movt	r1, #2
   17498:	add	r2, r1, #96	; 0x60
   1749c:	str	r4, [r1, #112]	; 0x70
   174a0:	vst1.64	{d8-d9}, [r2 :128]
   174a4:	add	r2, r1, #80	; 0x50
   174a8:	vst1.64	{d8-d9}, [r2 :128]
   174ac:	add	r2, r1, #64	; 0x40
   174b0:	vst1.64	{d8-d9}, [r2 :128]
   174b4:	add	r2, r1, #48	; 0x30
   174b8:	vst1.64	{d8-d9}, [r2 :128]
   174bc:	add	r2, r1, #32
   174c0:	vst1.64	{d8-d9}, [r2 :128]
   174c4:	add	r2, r1, #16
   174c8:	vst1.64	{d8-d9}, [r1 :128], r8
   174cc:	str	r4, [r1]
   174d0:	movw	r1, #52464	; 0xccf0
   174d4:	vst1.64	{d8-d9}, [r2 :128]
   174d8:	movt	r1, #2
   174dc:	add	r2, r1, #48	; 0x30
   174e0:	str	r4, [r1, #64]	; 0x40
   174e4:	vst1.64	{d8-d9}, [r2 :128]
   174e8:	add	r2, r1, #32
   174ec:	vst1.64	{d8-d9}, [r2 :128]
   174f0:	add	r2, r1, #16
   174f4:	vst1.64	{d8-d9}, [r1 :128], r0
   174f8:	vst1.64	{d8-d9}, [r2 :128]
   174fc:	str	r4, [r1]
   17500:	vpop	{d8-d9}
   17504:	pop	{r4, r5, r6, r7, r8, pc}
   17508:	movw	r0, #28936	; 0x7108
   1750c:	movw	r1, #29512	; 0x7348
   17510:	movt	r0, #1
   17514:	movt	r1, #1
   17518:	b	19ecc <__gcov_flush@@Base+0xb4>
   1751c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17520:	add	fp, sp, #28
   17524:	sub	sp, sp, #36	; 0x24
   17528:	mov	r9, r1
   1752c:	mov	r6, r0
   17530:	add	r0, sp, #28
   17534:	add	r1, sp, #32
   17538:	mov	r8, r2
   1753c:	bl	1a278 <__gcov_flush@@Base+0x460>
   17540:	cmp	r0, #0
   17544:	beq	17588 <read_boolean_unary_expression@@Base+0x5f8>
   17548:	mov	r4, r0
   1754c:	mov	r0, r6
   17550:	ldr	r5, [sp, #32]
   17554:	bl	11f18 <strlen@plt>
   17558:	add	r0, r5, r0
   1755c:	add	r0, r0, #2
   17560:	bl	11ed0 <malloc@plt>
   17564:	mov	r7, r0
   17568:	ldr	r0, [sp, #28]
   1756c:	mov	r1, r6
   17570:	mov	r2, r4
   17574:	str	r0, [sp]
   17578:	mov	r0, r7
   1757c:	mov	r3, r5
   17580:	bl	1a30c <__gcov_flush@@Base+0x4f4>
   17584:	b	17594 <read_boolean_unary_expression@@Base+0x604>
   17588:	mov	r0, r6
   1758c:	bl	11e88 <strdup@plt>
   17590:	mov	r7, r0
   17594:	ldr	r0, [pc, #1548]	; 17ba8 <read_boolean_unary_expression@@Base+0xc18>
   17598:	ldr	r6, [pc, #1548]	; 17bac <read_boolean_unary_expression@@Base+0xc1c>
   1759c:	mov	r1, #2
   175a0:	add	r0, pc, r0
   175a4:	add	r6, pc, r6
   175a8:	str	r7, [r0]
   175ac:	mov	r0, r7
   175b0:	mov	r4, #0
   175b4:	strb	r4, [r6]
   175b8:	bl	11eac <open64@plt>
   175bc:	ldr	r5, [pc, #1516]	; 17bb0 <read_boolean_unary_expression@@Base+0xc20>
   175c0:	cmn	r0, #1
   175c4:	add	r5, pc, r5
   175c8:	str	r0, [r5]
   175cc:	beq	175dc <read_boolean_unary_expression@@Base+0x64c>
   175d0:	ldr	r6, [pc, #1500]	; 17bb4 <read_boolean_unary_expression@@Base+0xc24>
   175d4:	add	r6, pc, r6
   175d8:	b	17638 <read_boolean_unary_expression@@Base+0x6a8>
   175dc:	mov	r0, #1
   175e0:	strb	r0, [r6]
   175e4:	ldr	r0, [pc, #1508]	; 17bd0 <read_boolean_unary_expression@@Base+0xc40>
   175e8:	mov	r1, #66	; 0x42
   175ec:	mov	r2, #420	; 0x1a4
   175f0:	ldr	r0, [pc, r0]
   175f4:	bl	11eac <open64@plt>
   175f8:	ldr	r6, [pc, #1492]	; 17bd4 <read_boolean_unary_expression@@Base+0xc44>
   175fc:	cmn	r0, #1
   17600:	str	r0, [r5]
   17604:	add	r6, pc, r6
   17608:	bne	17638 <read_boolean_unary_expression@@Base+0x6a8>
   1760c:	ldr	r0, [pc, #1476]	; 17bd8 <read_boolean_unary_expression@@Base+0xc48>
   17610:	ldr	r0, [pc, r0]
   17614:	bl	19fe0 <__gcov_flush@@Base+0x1c8>
   17618:	ldr	r0, [pc, #1468]	; 17bdc <read_boolean_unary_expression@@Base+0xc4c>
   1761c:	mov	r1, #66	; 0x42
   17620:	mov	r2, #420	; 0x1a4
   17624:	ldr	r0, [pc, r0]
   17628:	bl	11eac <open64@plt>
   1762c:	cmn	r0, #1
   17630:	str	r0, [r5]
   17634:	beq	17b60 <read_boolean_unary_expression@@Base+0xbd0>
   17638:	str	r9, [sp, #20]
   1763c:	bl	1a0ac <__gcov_flush@@Base+0x294>
   17640:	ldr	r0, [pc, #1392]	; 17bb8 <read_boolean_unary_expression@@Base+0xc28>
   17644:	mov	r1, r6
   17648:	ldr	r0, [pc, r0]
   1764c:	bl	11e10 <fdopen@plt>
   17650:	ldr	r5, [pc, #1380]	; 17bbc <read_boolean_unary_expression@@Base+0xc2c>
   17654:	ldr	r9, [pc, #1380]	; 17bc0 <read_boolean_unary_expression@@Base+0xc30>
   17658:	ldr	r1, [pc, #1380]	; 17bc4 <read_boolean_unary_expression@@Base+0xc34>
   1765c:	ldr	sl, [pc, #1380]	; 17bc8 <read_boolean_unary_expression@@Base+0xc38>
   17660:	add	r5, pc, r5
   17664:	add	r9, pc, r9
   17668:	add	r1, pc, r1
   1766c:	add	sl, pc, sl
   17670:	str	r4, [r5]
   17674:	str	r4, [r5, #4]
   17678:	str	r4, [r9]
   1767c:	str	r4, [r9, #4]
   17680:	str	r0, [r1]
   17684:	str	r4, [sl]
   17688:	ldr	r6, [pc, #1340]	; 17bcc <read_boolean_unary_expression@@Base+0xc3c>
   1768c:	ldr	r2, [pc, #1292]	; 17ba0 <read_boolean_unary_expression@@Base+0xc10>
   17690:	str	r8, [sp, #24]
   17694:	add	r6, pc, r6
   17698:	ldrb	r1, [r6]
   1769c:	mov	r6, r2
   176a0:	cmp	r1, #1
   176a4:	bne	176cc <read_boolean_unary_expression@@Base+0x73c>
   176a8:	mov	r0, #131072	; 0x20000
   176ac:	mov	r4, #131072	; 0x20000
   176b0:	bl	11ed0 <malloc@plt>
   176b4:	mov	r1, #0
   176b8:	str	r4, [r5]
   176bc:	str	r1, [r5, #4]
   176c0:	mov	r8, r0
   176c4:	str	r0, [sl]
   176c8:	b	1785c <read_boolean_unary_expression@@Base+0x8cc>
   176cc:	mov	r1, #0
   176d0:	mov	r2, #2
   176d4:	mov	r8, #0
   176d8:	bl	11fcc <fseek@plt>
   176dc:	ldr	r0, [pc, #1288]	; 17bec <read_boolean_unary_expression@@Base+0xc5c>
   176e0:	ldr	r0, [pc, r0]
   176e4:	bl	11e70 <ftell@plt>
   176e8:	mov	r2, r0
   176ec:	ldr	r0, [pc, #1276]	; 17bf0 <read_boolean_unary_expression@@Base+0xc60>
   176f0:	asr	r3, r2, #31
   176f4:	add	r0, pc, r0
   176f8:	cmp	r2, #0
   176fc:	strd	r2, [r0]
   17700:	beq	177d0 <read_boolean_unary_expression@@Base+0x840>
   17704:	ldr	r0, [pc, #1256]	; 17bf4 <read_boolean_unary_expression@@Base+0xc64>
   17708:	mov	r1, r2
   1770c:	mov	r2, #3
   17710:	mov	r3, #1
   17714:	ldr	r0, [pc, r0]
   17718:	str	r8, [sp, #8]
   1771c:	str	r8, [sp, #12]
   17720:	str	r0, [sp]
   17724:	mov	r0, #0
   17728:	bl	11e64 <mmap64@plt>
   1772c:	ldr	r1, [pc, #1220]	; 17bf8 <read_boolean_unary_expression@@Base+0xc68>
   17730:	cmn	r0, #1
   17734:	add	r1, pc, r1
   17738:	str	r0, [r1]
   1773c:	beq	17798 <read_boolean_unary_expression@@Base+0x808>
   17740:	ldr	r1, [pc, #1232]	; 17c18 <read_boolean_unary_expression@@Base+0xc88>
   17744:	add	r1, pc, r1
   17748:	ldrb	r1, [r1]
   1774c:	cmp	r1, #0
   17750:	beq	1775c <read_boolean_unary_expression@@Base+0x7cc>
   17754:	mov	r8, r0
   17758:	b	17868 <read_boolean_unary_expression@@Base+0x8d8>
   1775c:	ldr	ip, [r9, #4]
   17760:	ldr	r5, [pc, #1236]	; 17c3c <read_boolean_unary_expression@@Base+0xcac>
   17764:	mov	r4, r0
   17768:	lsr	r2, r6, #16
   1776c:	ldr	r5, [pc, r5]
   17770:	lsr	r1, r6, #24
   17774:	lsr	r3, r6, #8
   17778:	strb	r6, [r4, r5]!
   1777c:	strb	r2, [r4, #2]
   17780:	adds	r2, r5, #4
   17784:	adc	ip, ip, #0
   17788:	strb	r1, [r4, #3]
   1778c:	strb	r3, [r4, #1]
   17790:	stm	r9, {r2, ip}
   17794:	b	17930 <read_boolean_unary_expression@@Base+0x9a0>
   17798:	bl	11f3c <__errno_location@plt>
   1779c:	ldr	r1, [pc, #1112]	; 17bfc <read_boolean_unary_expression@@Base+0xc6c>
   177a0:	ldr	r1, [pc, r1]
   177a4:	ldr	r0, [r0]
   177a8:	ldr	r4, [r1]
   177ac:	ldr	r7, [pc, #1100]	; 17c00 <read_boolean_unary_expression@@Base+0xc70>
   177b0:	ldr	r7, [pc, r7]
   177b4:	bl	11ee8 <strerror@plt>
   177b8:	ldr	r1, [pc, #1092]	; 17c04 <read_boolean_unary_expression@@Base+0xc74>
   177bc:	mov	r3, r0
   177c0:	mov	r0, r4
   177c4:	add	r1, pc, r1
   177c8:	mov	r2, r7
   177cc:	bl	11f30 <fprintf@plt>
   177d0:	str	r8, [r5]
   177d4:	str	r8, [r5, #4]
   177d8:	ldr	r0, [pc, #1064]	; 17c08 <read_boolean_unary_expression@@Base+0xc78>
   177dc:	mov	r2, #16646144	; 0xfe0000
   177e0:	orr	r2, r2, #-16777216	; 0xff000000
   177e4:	add	r0, pc, r0
   177e8:	mvn	r3, #0
   177ec:	str	r8, [r0]
   177f0:	ldr	r1, [pc, #1044]	; 17c0c <read_boolean_unary_expression@@Base+0xc7c>
   177f4:	mov	r0, #1
   177f8:	add	r1, pc, r1
   177fc:	strb	r0, [r1]
   17800:	ldr	r0, [r9, #4]
   17804:	ldr	r1, [pc, #1028]	; 17c10 <read_boolean_unary_expression@@Base+0xc80>
   17808:	eor	r3, r0, r3
   1780c:	ldr	r1, [pc, r1]
   17810:	eor	r2, r1, r2
   17814:	orrs	r2, r2, r3
   17818:	beq	17858 <read_boolean_unary_expression@@Base+0x8c8>
   1781c:	ldr	r2, [pc, #896]	; 17ba4 <read_boolean_unary_expression@@Base+0xc14>
   17820:	adds	r1, r1, r2
   17824:	adc	r0, r0, #0
   17828:	mvn	r2, #0
   1782c:	and	r7, r0, r2
   17830:	mov	r0, #16646144	; 0xfe0000
   17834:	orr	r0, r0, #-16777216	; 0xff000000
   17838:	and	r4, r1, r0
   1783c:	mov	r0, r4
   17840:	bl	11ed0 <malloc@plt>
   17844:	stm	r5, {r4, r7}
   17848:	mov	r8, r0
   1784c:	ldr	r0, [pc, #960]	; 17c14 <read_boolean_unary_expression@@Base+0xc84>
   17850:	add	r0, pc, r0
   17854:	str	r8, [r0]
   17858:	mov	r0, r8
   1785c:	mov	r1, #0
   17860:	mov	r2, #131072	; 0x20000
   17864:	bl	11f60 <memset@plt>
   17868:	ldr	r0, [r9, #4]
   1786c:	ldr	r1, [pc, #936]	; 17c1c <read_boolean_unary_expression@@Base+0xc8c>
   17870:	mov	sl, r5
   17874:	mov	r7, #7
   17878:	orr	r7, r7, #131072	; 0x20000
   1787c:	ldr	r1, [pc, r1]
   17880:	ldr	r4, [r5, #4]
   17884:	ldr	r5, [pc, #916]	; 17c20 <read_boolean_unary_expression@@Base+0xc90>
   17888:	adds	r2, r1, #4
   1788c:	adc	r3, r0, #0
   17890:	ldr	r5, [pc, r5]
   17894:	subs	r2, r5, r2
   17898:	sbcs	r2, r4, r3
   1789c:	bcs	17974 <read_boolean_unary_expression@@Base+0x9e4>
   178a0:	adds	r1, r1, r7
   178a4:	adc	r0, r0, #0
   178a8:	subs	r1, r1, #4
   178ac:	sbc	r0, r0, #0
   178b0:	mvn	r2, #0
   178b4:	and	r5, r0, r2
   178b8:	mov	r0, #16646144	; 0xfe0000
   178bc:	orr	r0, r0, #-16777216	; 0xff000000
   178c0:	and	r4, r1, r0
   178c4:	mov	r0, r8
   178c8:	mov	r1, r4
   178cc:	bl	11e94 <realloc@plt>
   178d0:	strd	r4, [sl]
   178d4:	ldr	r1, [pc, #844]	; 17c28 <read_boolean_unary_expression@@Base+0xc98>
   178d8:	mov	r7, r6
   178dc:	lsr	r2, r6, #24
   178e0:	add	r1, pc, r1
   178e4:	mov	r3, r0
   178e8:	str	r0, [r1]
   178ec:	ldr	r6, [pc, #824]	; 17c2c <read_boolean_unary_expression@@Base+0xc9c>
   178f0:	ldr	r1, [r9, #4]
   178f4:	lsr	r5, r7, #16
   178f8:	add	r6, pc, r6
   178fc:	ldrb	r6, [r6]
   17900:	ldr	r4, [pc, #808]	; 17c30 <read_boolean_unary_expression@@Base+0xca0>
   17904:	ldr	r4, [pc, r4]
   17908:	strb	r7, [r3, r4]!
   1790c:	strb	r2, [r3, #3]
   17910:	lsr	r2, r7, #8
   17914:	strb	r2, [r3, #1]
   17918:	adds	r2, r4, #4
   1791c:	adc	ip, r1, #0
   17920:	cmp	r6, #1
   17924:	strb	r5, [r3, #2]
   17928:	stm	r9, {r2, ip}
   1792c:	beq	179b4 <read_boolean_unary_expression@@Base+0xa24>
   17930:	ldr	r4, [sp, #20]
   17934:	mov	r5, r0
   17938:	mov	lr, r9
   1793c:	ldrb	r1, [r4]
   17940:	ldrb	r3, [r4, #1]
   17944:	ldrb	r7, [r4, #2]
   17948:	ldrb	r6, [r4, #3]
   1794c:	strb	r1, [r5, r2]!
   17950:	adds	r4, r2, #4
   17954:	adc	r1, ip, #0
   17958:	strb	r6, [r5, #3]
   1795c:	strb	r7, [r5, #2]
   17960:	strb	r3, [r5, #1]
   17964:	str	r4, [lr]
   17968:	str	r1, [lr, #4]
   1796c:	ldr	r6, [sp, #24]
   17970:	b	17b30 <read_boolean_unary_expression@@Base+0xba0>
   17974:	ldr	r1, [r9, #4]
   17978:	ldr	r4, [pc, #676]	; 17c24 <read_boolean_unary_expression@@Base+0xc94>
   1797c:	mov	r5, r6
   17980:	lsr	r0, r6, #24
   17984:	ldr	r4, [pc, r4]
   17988:	lsr	r2, r6, #16
   1798c:	lsr	r3, r6, #8
   17990:	mov	r6, r8
   17994:	strb	r5, [r6, r4]!
   17998:	strb	r2, [r6, #2]
   1799c:	adds	r2, r4, #4
   179a0:	adc	ip, r1, #0
   179a4:	strb	r0, [r6, #3]
   179a8:	strb	r3, [r6, #1]
   179ac:	stm	r9, {r2, ip}
   179b0:	mov	r0, r8
   179b4:	ldr	r7, [sl, #4]
   179b8:	ldr	r3, [pc, #628]	; 17c34 <read_boolean_unary_expression@@Base+0xca4>
   179bc:	adds	r6, r4, #8
   179c0:	mov	r8, r9
   179c4:	adc	r5, r1, #0
   179c8:	ldr	r3, [pc, r3]
   179cc:	mov	r9, sl
   179d0:	subs	r3, r3, r6
   179d4:	sbcs	r3, r7, r5
   179d8:	bcs	17a7c <read_boolean_unary_expression@@Base+0xaec>
   179dc:	mov	r2, #7
   179e0:	orr	r2, r2, #131072	; 0x20000
   179e4:	adds	r2, r4, r2
   179e8:	adc	r4, r1, #0
   179ec:	mov	r1, #16646144	; 0xfe0000
   179f0:	orr	r1, r1, #-16777216	; 0xff000000
   179f4:	and	r6, r2, r1
   179f8:	mov	r1, r6
   179fc:	bl	11e94 <realloc@plt>
   17a00:	ldr	sl, [pc, #568]	; 17c40 <read_boolean_unary_expression@@Base+0xcb0>
   17a04:	mvn	r1, #0
   17a08:	and	r7, r4, r1
   17a0c:	add	sl, pc, sl
   17a10:	strd	r6, [r9]
   17a14:	str	r0, [sl]
   17a18:	ldr	r1, [pc, #548]	; 17c44 <read_boolean_unary_expression@@Base+0xcb4>
   17a1c:	ldr	r2, [sp, #20]
   17a20:	ldr	ip, [r8, #4]
   17a24:	add	r1, pc, r1
   17a28:	mov	lr, r8
   17a2c:	ldrb	r3, [r1]
   17a30:	ldrb	r1, [r2]
   17a34:	ldrb	r7, [r2, #1]
   17a38:	ldrb	r6, [r2, #2]
   17a3c:	ldrb	r5, [r2, #3]
   17a40:	ldr	r2, [pc, #512]	; 17c48 <read_boolean_unary_expression@@Base+0xcb8>
   17a44:	ldr	r2, [pc, r2]
   17a48:	adds	r4, r2, #4
   17a4c:	strb	r1, [r0, r2]
   17a50:	add	r1, r0, r2
   17a54:	strb	r5, [r1, #3]
   17a58:	strb	r6, [r1, #2]
   17a5c:	strb	r7, [r1, #1]
   17a60:	adc	r1, ip, #0
   17a64:	str	r4, [lr]
   17a68:	str	r1, [lr, #4]
   17a6c:	ldr	r6, [sp, #24]
   17a70:	cmp	r3, #1
   17a74:	beq	17ac4 <read_boolean_unary_expression@@Base+0xb34>
   17a78:	b	17b30 <read_boolean_unary_expression@@Base+0xba0>
   17a7c:	ldr	r6, [sp, #20]
   17a80:	mov	r5, r0
   17a84:	adds	r4, r2, #4
   17a88:	ldrb	r1, [r6]
   17a8c:	ldrb	r3, [r6, #1]
   17a90:	ldrb	r7, [r6, #2]
   17a94:	ldrb	r6, [r6, #3]
   17a98:	strb	r1, [r5, r2]!
   17a9c:	adc	r1, ip, #0
   17aa0:	strb	r3, [r5, #1]
   17aa4:	mov	r3, r8
   17aa8:	strb	r6, [r5, #3]
   17aac:	strb	r7, [r5, #2]
   17ab0:	str	r4, [r3]
   17ab4:	str	r1, [r3, #4]
   17ab8:	ldr	r6, [sp, #24]
   17abc:	ldr	sl, [pc, #372]	; 17c38 <read_boolean_unary_expression@@Base+0xca8>
   17ac0:	add	sl, pc, sl
   17ac4:	ldr	r7, [r9, #4]
   17ac8:	ldr	r5, [pc, #380]	; 17c4c <read_boolean_unary_expression@@Base+0xcbc>
   17acc:	adds	r3, r2, #8
   17ad0:	adc	lr, ip, #0
   17ad4:	ldr	r5, [pc, r5]
   17ad8:	subs	r3, r5, r3
   17adc:	sbcs	r3, r7, lr
   17ae0:	bcs	17b2c <read_boolean_unary_expression@@Base+0xb9c>
   17ae4:	mov	r1, #7
   17ae8:	orr	r1, r1, #131072	; 0x20000
   17aec:	adds	r1, r2, r1
   17af0:	adc	r2, ip, #0
   17af4:	mvn	r3, #0
   17af8:	and	r5, r2, r3
   17afc:	mov	r2, #16646144	; 0xfe0000
   17b00:	orr	r2, r2, #-16777216	; 0xff000000
   17b04:	and	r4, r1, r2
   17b08:	mov	r1, r4
   17b0c:	bl	11e94 <realloc@plt>
   17b10:	strd	r4, [r9]
   17b14:	str	r0, [sl]
   17b18:	ldr	r1, [r8, #4]
   17b1c:	ldr	r4, [pc, #300]	; 17c50 <read_boolean_unary_expression@@Base+0xcc0>
   17b20:	mov	lr, r8
   17b24:	ldr	r4, [pc, r4]
   17b28:	b	17b30 <read_boolean_unary_expression@@Base+0xba0>
   17b2c:	mov	lr, r8
   17b30:	lsr	r2, r6, #24
   17b34:	strb	r6, [r0, r4]!
   17b38:	lsr	r3, r6, #16
   17b3c:	lsr	r7, r6, #8
   17b40:	strb	r2, [r0, #3]
   17b44:	strb	r3, [r0, #2]
   17b48:	strb	r7, [r0, #1]
   17b4c:	adds	r0, r4, #4
   17b50:	adc	r1, r1, #0
   17b54:	strd	r0, [lr]
   17b58:	sub	sp, fp, #28
   17b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b60:	bl	11f3c <__errno_location@plt>
   17b64:	ldr	r1, [pc, #116]	; 17be0 <read_boolean_unary_expression@@Base+0xc50>
   17b68:	ldr	r1, [pc, r1]
   17b6c:	ldr	r0, [r0]
   17b70:	ldr	r4, [r1]
   17b74:	ldr	r5, [pc, #104]	; 17be4 <read_boolean_unary_expression@@Base+0xc54>
   17b78:	ldr	r5, [pc, r5]
   17b7c:	bl	11ee8 <strerror@plt>
   17b80:	ldr	r1, [pc, #96]	; 17be8 <read_boolean_unary_expression@@Base+0xc58>
   17b84:	mov	r3, r0
   17b88:	mov	r0, r4
   17b8c:	add	r1, pc, r1
   17b90:	mov	r2, r5
   17b94:	bl	11f30 <fprintf@plt>
   17b98:	sub	sp, fp, #28
   17b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba0:	strbvs	r6, [r3, -r1, ror #8]!
   17ba4:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   17ba8:	andeq	r5, r1, r8, lsl #16
   17bac:	andeq	r5, r1, r8, lsl #16
   17bb0:	andeq	r4, r1, r0, lsl #22
   17bb4:	muleq	r0, r4, r3
   17bb8:	andeq	r4, r1, ip, ror sl
   17bbc:	andeq	r5, r1, r8, asr r7
   17bc0:	andeq	r5, r1, ip, asr r7
   17bc4:	andeq	r5, r1, r8, asr #14
   17bc8:	andeq	r5, r1, r8, asr #14
   17bcc:	andeq	r5, r1, r8, lsl r7
   17bd0:			; <UNDEFINED> instruction: 0x000157b8
   17bd4:	andeq	r4, r0, r8, ror #6
   17bd8:	muleq	r1, r8, r7
   17bdc:	andeq	r5, r1, r4, lsl #15
   17be0:	andeq	r4, r1, ip, asr #10
   17be4:	andeq	r5, r1, r0, lsr r2
   17be8:	andeq	r3, r0, r4, ror #27
   17bec:	ldrdeq	r5, [r1], -r0
   17bf0:	andeq	r5, r1, r4, ror #13
   17bf4:			; <UNDEFINED> instruction: 0x000149b0
   17bf8:	andeq	r5, r1, r0, lsl #13
   17bfc:	andeq	r4, r1, r4, lsl r9
   17c00:	strdeq	r5, [r1], -r8
   17c04:	andeq	r4, r0, r6, lsl #6
   17c08:	ldrdeq	r5, [r1], -r0
   17c0c:			; <UNDEFINED> instruction: 0x000155b4
   17c10:			; <UNDEFINED> instruction: 0x000155b4
   17c14:	andeq	r5, r1, r4, ror #10
   17c18:	andeq	r5, r1, r8, ror #12
   17c1c:	andeq	r5, r1, r4, asr #10
   17c20:	andeq	r5, r1, r8, lsr #10
   17c24:	andeq	r5, r1, ip, lsr r4
   17c28:	ldrdeq	r5, [r1], -r4
   17c2c:			; <UNDEFINED> instruction: 0x000154b4
   17c30:			; <UNDEFINED> instruction: 0x000154bc
   17c34:	strdeq	r5, [r1], -r0
   17c38:	strdeq	r5, [r1], -r4
   17c3c:	andeq	r5, r1, r4, asr r6
   17c40:	andeq	r5, r1, r8, lsr #7
   17c44:	andeq	r5, r1, r8, lsl #7
   17c48:	andeq	r5, r1, ip, ror r3
   17c4c:	andeq	r5, r1, r4, ror #5
   17c50:	muleq	r1, ip, r2
   17c54:	ldr	r0, [r0]
   17c58:	cmn	r0, #1
   17c5c:	beq	17c7c <read_boolean_unary_expression@@Base+0xcec>
   17c60:	ldr	r0, [r1, r0, lsl #2]
   17c64:	cmp	r0, #0
   17c68:	bxeq	lr
   17c6c:	ldrd	r2, [r0]
   17c70:	adds	r2, r2, #1
   17c74:	adc	r3, r3, #0
   17c78:	strd	r2, [r0]
   17c7c:	bx	lr
   17c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c84:	add	fp, sp, #28
   17c88:	sub	sp, sp, #12
   17c8c:	mov	r9, r0
   17c90:	ldr	r0, [pc, #2000]	; 18468 <read_boolean_unary_expression@@Base+0x14d8>
   17c94:	mov	sl, #2
   17c98:	cmp	r3, #0
   17c9c:	movne	sl, #3
   17ca0:	ldr	r0, [pc, r0]
   17ca4:	cmp	r0, #0
   17ca8:	beq	18460 <read_boolean_unary_expression@@Base+0x14d0>
   17cac:	stm	sp, {r2, r3}
   17cb0:	ldr	r0, [pc, #1972]	; 1846c <read_boolean_unary_expression@@Base+0x14dc>
   17cb4:	str	r1, [sp, #8]
   17cb8:	add	r0, pc, r0
   17cbc:	ldrb	r0, [r0]
   17cc0:	cmp	r0, #1
   17cc4:	bne	17d54 <read_boolean_unary_expression@@Base+0xdc4>
   17cc8:	ldr	r0, [pc, #1952]	; 18470 <read_boolean_unary_expression@@Base+0x14e0>
   17ccc:	ldr	r4, [pc, #1952]	; 18474 <read_boolean_unary_expression@@Base+0x14e4>
   17cd0:	add	r0, pc, r0
   17cd4:	add	r4, pc, r4
   17cd8:	ldr	r0, [r0, #4]
   17cdc:	ldr	r5, [pc, #1940]	; 18478 <read_boolean_unary_expression@@Base+0x14e8>
   17ce0:	ldr	r5, [pc, r5]
   17ce4:	ldr	r7, [r4, #4]
   17ce8:	ldr	r6, [pc, #1932]	; 1847c <read_boolean_unary_expression@@Base+0x14ec>
   17cec:	adds	r2, r5, #4
   17cf0:	adc	r3, r0, #0
   17cf4:	ldr	r6, [pc, r6]
   17cf8:	subs	r2, r6, r2
   17cfc:	sbcs	r2, r7, r3
   17d00:	bcs	17d54 <read_boolean_unary_expression@@Base+0xdc4>
   17d04:	mov	r2, #7
   17d08:	orr	r2, r2, #131072	; 0x20000
   17d0c:	adds	r1, r5, r2
   17d10:	adc	r0, r0, #0
   17d14:	subs	r1, r1, #4
   17d18:	sbc	r0, r0, #0
   17d1c:	mvn	r2, #0
   17d20:	and	r7, r0, r2
   17d24:	mov	r0, #16646144	; 0xfe0000
   17d28:	orr	r0, r0, #-16777216	; 0xff000000
   17d2c:	ldr	r8, [pc, #1868]	; 18480 <read_boolean_unary_expression@@Base+0x14f0>
   17d30:	and	r6, r1, r0
   17d34:	ldr	r0, [pc, #1864]	; 18484 <read_boolean_unary_expression@@Base+0x14f4>
   17d38:	mov	r1, r6
   17d3c:	add	r8, pc, r8
   17d40:	ldr	r0, [pc, r0]
   17d44:	bl	11e94 <realloc@plt>
   17d48:	ldr	r1, [sp, #8]
   17d4c:	strd	r6, [r4]
   17d50:	str	r0, [r8]
   17d54:	ldr	r3, [pc, #1836]	; 18488 <read_boolean_unary_expression@@Base+0x14f8>
   17d58:	ldr	r7, [pc, #1836]	; 1848c <read_boolean_unary_expression@@Base+0x14fc>
   17d5c:	mov	r0, #0
   17d60:	add	r3, pc, r3
   17d64:	mov	r2, #1
   17d68:	ldr	r7, [pc, r7]
   17d6c:	ldr	r8, [pc, #1820]	; 18490 <read_boolean_unary_expression@@Base+0x1500>
   17d70:	adds	r4, r7, #4
   17d74:	ldr	r8, [pc, r8]
   17d78:	ldr	r6, [r3, #4]
   17d7c:	mov	r5, r8
   17d80:	strb	r0, [r5, r7]!
   17d84:	strb	r2, [r5, #3]
   17d88:	strb	r0, [r5, #2]
   17d8c:	strb	r0, [r5, #1]
   17d90:	adc	r5, r6, #0
   17d94:	cmp	r1, #0
   17d98:	strd	r4, [r3]
   17d9c:	beq	17db0 <read_boolean_unary_expression@@Base+0xe20>
   17da0:	mov	r0, r1
   17da4:	bl	11f18 <strlen@plt>
   17da8:	add	r0, sl, r0, lsr #2
   17dac:	add	sl, r0, #2
   17db0:	ldr	r0, [pc, #1756]	; 18494 <read_boolean_unary_expression@@Base+0x1504>
   17db4:	add	r0, pc, r0
   17db8:	ldrb	r0, [r0]
   17dbc:	cmp	r0, #0
   17dc0:	beq	17ea0 <read_boolean_unary_expression@@Base+0xf10>
   17dc4:	ldr	lr, [pc, #1744]	; 1849c <read_boolean_unary_expression@@Base+0x150c>
   17dc8:	adds	r0, r7, #8
   17dcc:	adc	r1, r6, #0
   17dd0:	add	lr, pc, lr
   17dd4:	ldr	r2, [lr, #4]
   17dd8:	ldr	r3, [pc, #1728]	; 184a0 <read_boolean_unary_expression@@Base+0x1510>
   17ddc:	ldr	r3, [pc, r3]
   17de0:	subs	r0, r3, r0
   17de4:	sbcs	r0, r2, r1
   17de8:	bcs	180f0 <read_boolean_unary_expression@@Base+0x1160>
   17dec:	mov	r0, #7
   17df0:	orr	r0, r0, #131072	; 0x20000
   17df4:	adds	r0, r7, r0
   17df8:	adc	r1, r6, #0
   17dfc:	mvn	r2, #0
   17e00:	and	r5, r1, r2
   17e04:	mov	r1, #16646144	; 0xfe0000
   17e08:	orr	r1, r1, #-16777216	; 0xff000000
   17e0c:	and	r6, r0, r1
   17e10:	ldr	r4, [pc, #1680]	; 184a8 <read_boolean_unary_expression@@Base+0x1518>
   17e14:	mov	r0, r8
   17e18:	mov	r1, r6
   17e1c:	add	r4, pc, r4
   17e20:	mov	r7, lr
   17e24:	bl	11e94 <realloc@plt>
   17e28:	mov	lr, r7
   17e2c:	mov	r8, r0
   17e30:	str	r6, [lr]
   17e34:	str	r5, [lr, #4]
   17e38:	str	r8, [r4]
   17e3c:	ldr	r1, [pc, #1640]	; 184ac <read_boolean_unary_expression@@Base+0x151c>
   17e40:	lsr	r0, sl, #24
   17e44:	add	r1, pc, r1
   17e48:	lsr	r3, sl, #16
   17e4c:	ldrb	r2, [r1]
   17e50:	ldr	r1, [pc, #1624]	; 184b0 <read_boolean_unary_expression@@Base+0x1520>
   17e54:	add	r1, pc, r1
   17e58:	mov	r7, r1
   17e5c:	ldr	r5, [r1, #4]
   17e60:	ldr	r4, [pc, #1612]	; 184b4 <read_boolean_unary_expression@@Base+0x1524>
   17e64:	mov	r1, r8
   17e68:	ldr	r4, [pc, r4]
   17e6c:	strb	sl, [r1, r4]!
   17e70:	ldr	ip, [sp, #8]
   17e74:	strb	r0, [r1, #3]
   17e78:	lsr	r0, sl, #8
   17e7c:	strb	r0, [r1, #1]
   17e80:	adds	r0, r4, #4
   17e84:	strb	r3, [r1, #2]
   17e88:	adc	r1, r5, #0
   17e8c:	mov	sl, r7
   17e90:	cmp	r2, #1
   17e94:	strd	r0, [sl]
   17e98:	bne	17ed8 <read_boolean_unary_expression@@Base+0xf48>
   17e9c:	b	18128 <read_boolean_unary_expression@@Base+0x1198>
   17ea0:	mov	r3, r8
   17ea4:	lsr	r0, sl, #24
   17ea8:	strb	sl, [r3, r4]!
   17eac:	lsr	r1, sl, #16
   17eb0:	lsr	r2, sl, #8
   17eb4:	strb	r0, [r3, #3]
   17eb8:	strb	r1, [r3, #2]
   17ebc:	strb	r2, [r3, #1]
   17ec0:	ldr	sl, [pc, #1488]	; 18498 <read_boolean_unary_expression@@Base+0x1508>
   17ec4:	ldr	ip, [sp, #8]
   17ec8:	adds	r0, r7, #8
   17ecc:	adc	r1, r6, #0
   17ed0:	add	sl, pc, sl
   17ed4:	strd	r0, [sl]
   17ed8:	mov	r6, r8
   17edc:	lsr	r2, r9, #24
   17ee0:	strb	r9, [r6, r0]!
   17ee4:	lsr	r3, r9, #16
   17ee8:	strb	r2, [r6, #3]
   17eec:	adds	r2, r0, #4
   17ef0:	lsr	r7, r9, #8
   17ef4:	strb	r3, [r6, #2]
   17ef8:	adc	r3, r1, #0
   17efc:	strb	r7, [r6, #1]
   17f00:	strd	r2, [sl]
   17f04:	ldr	r5, [sp]
   17f08:	mov	r6, r8
   17f0c:	adds	r4, r2, #4
   17f10:	lsr	r7, r5, #8
   17f14:	strb	r5, [r6, r2]!
   17f18:	lsr	r0, r5, #24
   17f1c:	lsr	r1, r5, #16
   17f20:	strb	r7, [r6, #1]
   17f24:	adc	r7, r3, #0
   17f28:	strb	r0, [r6, #3]
   17f2c:	strb	r1, [r6, #2]
   17f30:	stm	sl, {r4, r7}
   17f34:	ldr	r0, [sp, #4]
   17f38:	cmp	r0, #0
   17f3c:	beq	18014 <read_boolean_unary_expression@@Base+0x1084>
   17f40:	ldr	r0, [pc, #1420]	; 184d4 <read_boolean_unary_expression@@Base+0x1544>
   17f44:	ldr	sl, [fp, #8]
   17f48:	add	r0, pc, r0
   17f4c:	ldrb	r0, [r0]
   17f50:	cmp	r0, #1
   17f54:	bne	17fe0 <read_boolean_unary_expression@@Base+0x1050>
   17f58:	ldr	r9, [pc, #1400]	; 184d8 <read_boolean_unary_expression@@Base+0x1548>
   17f5c:	adds	r0, r2, #8
   17f60:	adc	r1, r3, #0
   17f64:	add	r9, pc, r9
   17f68:	ldr	r6, [r9, #4]
   17f6c:	ldr	r5, [pc, #1384]	; 184dc <read_boolean_unary_expression@@Base+0x154c>
   17f70:	ldr	r5, [pc, r5]
   17f74:	subs	r0, r5, r0
   17f78:	sbcs	r0, r6, r1
   17f7c:	bcs	17fe0 <read_boolean_unary_expression@@Base+0x1050>
   17f80:	mov	r0, #7
   17f84:	orr	r0, r0, #131072	; 0x20000
   17f88:	adds	r0, r2, r0
   17f8c:	adc	r1, r3, #0
   17f90:	mvn	r2, #0
   17f94:	and	r5, r1, r2
   17f98:	mov	r1, #16646144	; 0xfe0000
   17f9c:	orr	r1, r1, #-16777216	; 0xff000000
   17fa0:	and	r6, r0, r1
   17fa4:	ldr	r4, [pc, #1332]	; 184e0 <read_boolean_unary_expression@@Base+0x1550>
   17fa8:	mov	r0, r8
   17fac:	mov	r1, r6
   17fb0:	add	r4, pc, r4
   17fb4:	bl	11e94 <realloc@plt>
   17fb8:	ldr	ip, [sp, #8]
   17fbc:	str	r6, [r9]
   17fc0:	str	r5, [r9, #4]
   17fc4:	mov	r8, r0
   17fc8:	ldr	r0, [pc, #1300]	; 184e4 <read_boolean_unary_expression@@Base+0x1554>
   17fcc:	str	r8, [r4]
   17fd0:	add	r0, pc, r0
   17fd4:	ldr	r7, [r0, #4]
   17fd8:	ldr	r4, [pc, #1288]	; 184e8 <read_boolean_unary_expression@@Base+0x1558>
   17fdc:	ldr	r4, [pc, r4]
   17fe0:	mov	r3, r8
   17fe4:	lsr	r0, sl, #24
   17fe8:	strb	sl, [r3, r4]!
   17fec:	lsr	r1, sl, #16
   17ff0:	lsr	r2, sl, #8
   17ff4:	strb	r0, [r3, #3]
   17ff8:	strb	r1, [r3, #2]
   17ffc:	strb	r2, [r3, #1]
   18000:	ldr	sl, [pc, #1252]	; 184ec <read_boolean_unary_expression@@Base+0x155c>
   18004:	adds	r4, r4, #4
   18008:	adc	r7, r7, #0
   1800c:	add	sl, pc, sl
   18010:	stm	sl, {r4, r7}
   18014:	cmp	ip, #0
   18018:	beq	18460 <read_boolean_unary_expression@@Base+0x14d0>
   1801c:	mov	r0, ip
   18020:	bl	11f18 <strlen@plt>
   18024:	mov	r9, #1
   18028:	add	r5, r9, r0, lsr #2
   1802c:	ldr	r0, [pc, #1212]	; 184f0 <read_boolean_unary_expression@@Base+0x1560>
   18030:	add	r0, pc, r0
   18034:	ldrb	r0, [r0]
   18038:	cmp	r0, #1
   1803c:	bne	180e0 <read_boolean_unary_expression@@Base+0x1150>
   18040:	ldr	sl, [pc, #1196]	; 184f4 <read_boolean_unary_expression@@Base+0x1564>
   18044:	adds	r0, r4, #4
   18048:	adc	r1, r7, #0
   1804c:	add	sl, pc, sl
   18050:	ldr	r2, [sl, #4]
   18054:	ldr	r3, [pc, #1180]	; 184f8 <read_boolean_unary_expression@@Base+0x1568>
   18058:	ldr	r3, [pc, r3]
   1805c:	subs	r0, r3, r0
   18060:	sbcs	r0, r2, r1
   18064:	bcs	18294 <read_boolean_unary_expression@@Base+0x1304>
   18068:	mov	r0, #0
   1806c:	str	r0, [sp, #4]
   18070:	mov	r0, #7
   18074:	orr	r0, r0, #131072	; 0x20000
   18078:	adds	r0, r4, r0
   1807c:	adc	r1, r7, #0
   18080:	subs	r0, r0, #4
   18084:	sbc	r1, r1, #0
   18088:	mvn	r2, #0
   1808c:	and	r7, r1, r2
   18090:	mov	r1, #16646144	; 0xfe0000
   18094:	orr	r1, r1, #-16777216	; 0xff000000
   18098:	and	r4, r0, r1
   1809c:	ldr	r6, [pc, #1116]	; 18500 <read_boolean_unary_expression@@Base+0x1570>
   180a0:	mov	r0, r8
   180a4:	mov	r1, r4
   180a8:	add	r6, pc, r6
   180ac:	bl	11e94 <realloc@plt>
   180b0:	stm	sl, {r4, r7}
   180b4:	str	r0, [r6]
   180b8:	ldr	sl, [pc, #1092]	; 18504 <read_boolean_unary_expression@@Base+0x1574>
   180bc:	mov	r8, r0
   180c0:	add	sl, pc, sl
   180c4:	ldr	r7, [sl, #4]
   180c8:	ldr	r0, [pc, #1080]	; 18508 <read_boolean_unary_expression@@Base+0x1578>
   180cc:	add	r0, pc, r0
   180d0:	ldrb	r9, [r0]
   180d4:	ldr	r4, [pc, #1072]	; 1850c <read_boolean_unary_expression@@Base+0x157c>
   180d8:	ldr	r4, [pc, r4]
   180dc:	b	182a4 <read_boolean_unary_expression@@Base+0x1314>
   180e0:	mov	r0, #0
   180e4:	str	r0, [sp, #4]
   180e8:	mov	r9, #0
   180ec:	b	182a4 <read_boolean_unary_expression@@Base+0x1314>
   180f0:	mov	r3, r8
   180f4:	lsr	r0, sl, #24
   180f8:	strb	sl, [r3, r4]!
   180fc:	lsr	r1, sl, #16
   18100:	lsr	r2, sl, #8
   18104:	strb	r0, [r3, #3]
   18108:	strb	r1, [r3, #2]
   1810c:	strb	r2, [r3, #1]
   18110:	ldr	sl, [pc, #908]	; 184a4 <read_boolean_unary_expression@@Base+0x1514>
   18114:	adds	r0, r7, #8
   18118:	adc	r1, r6, #0
   1811c:	add	sl, pc, sl
   18120:	ldr	ip, [sp, #8]
   18124:	strd	r0, [sl]
   18128:	ldr	r7, [lr, #4]
   1812c:	ldr	r6, [pc, #900]	; 184b8 <read_boolean_unary_expression@@Base+0x1528>
   18130:	adds	r2, r4, #8
   18134:	adc	r3, r5, #0
   18138:	ldr	r6, [pc, r6]
   1813c:	subs	r2, r6, r2
   18140:	sbcs	r2, r7, r3
   18144:	bcs	181e8 <read_boolean_unary_expression@@Base+0x1258>
   18148:	mov	r0, #7
   1814c:	orr	r0, r0, #131072	; 0x20000
   18150:	adds	r0, r4, r0
   18154:	adc	r1, r5, #0
   18158:	mvn	r2, #0
   1815c:	and	r5, r1, r2
   18160:	mov	r1, #16646144	; 0xfe0000
   18164:	orr	r1, r1, #-16777216	; 0xff000000
   18168:	and	r4, r0, r1
   1816c:	ldr	r6, [pc, #840]	; 184bc <read_boolean_unary_expression@@Base+0x152c>
   18170:	mov	r0, r8
   18174:	mov	r1, r4
   18178:	add	r6, pc, r6
   1817c:	mov	r7, lr
   18180:	bl	11e94 <realloc@plt>
   18184:	mov	lr, r7
   18188:	str	r0, [r6]
   1818c:	strd	r4, [lr]
   18190:	mov	r8, r0
   18194:	ldr	ip, [sp, #8]
   18198:	ldr	r0, [pc, #800]	; 184c0 <read_boolean_unary_expression@@Base+0x1530>
   1819c:	ldr	r1, [sl, #4]
   181a0:	mov	r3, r8
   181a4:	add	r0, pc, r0
   181a8:	lsr	r2, r9, #24
   181ac:	ldrb	r7, [r0]
   181b0:	ldr	r0, [pc, #780]	; 184c4 <read_boolean_unary_expression@@Base+0x1534>
   181b4:	lsr	r6, r9, #16
   181b8:	ldr	r0, [pc, r0]
   181bc:	strb	r9, [r3, r0]!
   181c0:	strb	r2, [r3, #3]
   181c4:	lsr	r2, r9, #8
   181c8:	strb	r2, [r3, #1]
   181cc:	adds	r2, r0, #4
   181d0:	strb	r6, [r3, #2]
   181d4:	adc	r3, r1, #0
   181d8:	cmp	r7, #1
   181dc:	strd	r2, [sl]
   181e0:	bne	17f04 <read_boolean_unary_expression@@Base+0xf74>
   181e4:	b	18214 <read_boolean_unary_expression@@Base+0x1284>
   181e8:	mov	r6, r8
   181ec:	lsr	r2, r9, #24
   181f0:	strb	r9, [r6, r0]!
   181f4:	lsr	r3, r9, #16
   181f8:	strb	r2, [r6, #3]
   181fc:	adds	r2, r0, #4
   18200:	lsr	r7, r9, #8
   18204:	strb	r3, [r6, #2]
   18208:	adc	r3, r1, #0
   1820c:	strb	r7, [r6, #1]
   18210:	strd	r2, [sl]
   18214:	ldr	r5, [lr, #4]
   18218:	ldr	r4, [pc, #680]	; 184c8 <read_boolean_unary_expression@@Base+0x1538>
   1821c:	adds	r7, r0, #8
   18220:	adc	r6, r1, #0
   18224:	ldr	r4, [pc, r4]
   18228:	subs	r7, r4, r7
   1822c:	sbcs	r7, r5, r6
   18230:	bcs	17f04 <read_boolean_unary_expression@@Base+0xf74>
   18234:	mov	r2, #7
   18238:	orr	r2, r2, #131072	; 0x20000
   1823c:	adds	r0, r0, r2
   18240:	adc	r1, r1, #0
   18244:	mvn	r2, #0
   18248:	and	r5, r1, r2
   1824c:	mov	r1, #16646144	; 0xfe0000
   18250:	orr	r1, r1, #-16777216	; 0xff000000
   18254:	and	r6, r0, r1
   18258:	ldr	r4, [pc, #620]	; 184cc <read_boolean_unary_expression@@Base+0x153c>
   1825c:	mov	r0, r8
   18260:	mov	r1, r6
   18264:	add	r4, pc, r4
   18268:	mov	r7, lr
   1826c:	bl	11e94 <realloc@plt>
   18270:	ldr	ip, [sp, #8]
   18274:	str	r6, [r7]
   18278:	str	r5, [r7, #4]
   1827c:	str	r0, [r4]
   18280:	ldr	r3, [sl, #4]
   18284:	ldr	r2, [pc, #580]	; 184d0 <read_boolean_unary_expression@@Base+0x1540>
   18288:	mov	r8, r0
   1828c:	ldr	r2, [pc, r2]
   18290:	b	17f04 <read_boolean_unary_expression@@Base+0xf74>
   18294:	mov	r0, #0
   18298:	str	r0, [sp, #4]
   1829c:	ldr	sl, [pc, #600]	; 184fc <read_boolean_unary_expression@@Base+0x156c>
   182a0:	add	sl, pc, sl
   182a4:	mov	r3, r8
   182a8:	ldr	r0, [sp, #8]
   182ac:	strb	r5, [r3, r4]!
   182b0:	adds	r4, r4, #4
   182b4:	lsr	r6, r5, #24
   182b8:	lsr	r1, r5, #16
   182bc:	lsr	r2, r5, #8
   182c0:	adc	r5, r7, #0
   182c4:	strb	r6, [r3, #3]
   182c8:	strb	r1, [r3, #2]
   182cc:	strb	r2, [r3, #1]
   182d0:	strd	r4, [sl]
   182d4:	bl	11f18 <strlen@plt>
   182d8:	mov	r7, r0
   182dc:	cmp	r9, #0
   182e0:	beq	18380 <read_boolean_unary_expression@@Base+0x13f0>
   182e4:	ldr	r6, [pc, #548]	; 18510 <read_boolean_unary_expression@@Base+0x1580>
   182e8:	adds	r0, r4, r7
   182ec:	adc	r1, r5, #0
   182f0:	add	r6, pc, r6
   182f4:	ldr	r2, [r6, #4]
   182f8:	ldr	r3, [pc, #532]	; 18514 <read_boolean_unary_expression@@Base+0x1584>
   182fc:	ldr	r3, [pc, r3]
   18300:	subs	r3, r3, r0
   18304:	sbcs	r2, r2, r1
   18308:	bcs	18378 <read_boolean_unary_expression@@Base+0x13e8>
   1830c:	mov	r2, #7
   18310:	orr	r2, r2, #131072	; 0x20000
   18314:	adds	r0, r0, r2
   18318:	adc	r1, r1, #0
   1831c:	subs	r0, r0, #8
   18320:	sbc	r1, r1, #0
   18324:	mvn	r2, #0
   18328:	and	r5, r1, r2
   1832c:	mov	r1, #16646144	; 0xfe0000
   18330:	orr	r1, r1, #-16777216	; 0xff000000
   18334:	and	r4, r0, r1
   18338:	ldr	r9, [pc, #472]	; 18518 <read_boolean_unary_expression@@Base+0x1588>
   1833c:	mov	r0, r8
   18340:	mov	r1, r4
   18344:	add	r9, pc, r9
   18348:	bl	11e94 <realloc@plt>
   1834c:	strd	r4, [r6]
   18350:	str	r0, [r9]
   18354:	mov	r8, r0
   18358:	ldr	r5, [sl, #4]
   1835c:	ldr	r0, [pc, #440]	; 1851c <read_boolean_unary_expression@@Base+0x158c>
   18360:	add	r0, pc, r0
   18364:	ldrb	r0, [r0]
   18368:	str	r0, [sp, #4]
   1836c:	ldr	r4, [pc, #428]	; 18520 <read_boolean_unary_expression@@Base+0x1590>
   18370:	ldr	r4, [pc, r4]
   18374:	b	18380 <read_boolean_unary_expression@@Base+0x13f0>
   18378:	mov	r0, #1
   1837c:	str	r0, [sp, #4]
   18380:	ldr	r9, [sp, #8]
   18384:	add	r0, r8, r4
   18388:	mov	r2, r7
   1838c:	mov	r1, r9
   18390:	bl	11e58 <memcpy@plt>
   18394:	adds	r6, r4, r7
   18398:	mov	r0, r9
   1839c:	adc	r5, r5, #0
   183a0:	str	r6, [sl]
   183a4:	str	r5, [sl, #4]
   183a8:	bl	11f18 <strlen@plt>
   183ac:	and	r0, r0, #3
   183b0:	rsb	r4, r0, #4
   183b4:	ldr	r0, [sp, #4]
   183b8:	cmp	r0, #0
   183bc:	beq	18444 <read_boolean_unary_expression@@Base+0x14b4>
   183c0:	ldr	r7, [pc, #348]	; 18524 <read_boolean_unary_expression@@Base+0x1594>
   183c4:	adds	r0, r6, r4
   183c8:	adc	r1, r5, #0
   183cc:	add	r7, pc, r7
   183d0:	ldr	r2, [r7, #4]
   183d4:	ldr	r3, [pc, #332]	; 18528 <read_boolean_unary_expression@@Base+0x1598>
   183d8:	ldr	r3, [pc, r3]
   183dc:	subs	r3, r3, r0
   183e0:	sbcs	r2, r2, r1
   183e4:	bcs	18444 <read_boolean_unary_expression@@Base+0x14b4>
   183e8:	mov	r2, #7
   183ec:	orr	r2, r2, #131072	; 0x20000
   183f0:	adds	r0, r0, r2
   183f4:	adc	r1, r1, #0
   183f8:	subs	r0, r0, #8
   183fc:	sbc	r1, r1, #0
   18400:	mvn	r2, #0
   18404:	and	r5, r1, r2
   18408:	mov	r1, #16646144	; 0xfe0000
   1840c:	orr	r1, r1, #-16777216	; 0xff000000
   18410:	and	r6, r0, r1
   18414:	ldr	r9, [pc, #272]	; 1852c <read_boolean_unary_expression@@Base+0x159c>
   18418:	mov	r0, r8
   1841c:	mov	r1, r6
   18420:	add	r9, pc, r9
   18424:	bl	11e94 <realloc@plt>
   18428:	str	r6, [r7]
   1842c:	str	r5, [r7, #4]
   18430:	str	r0, [r9]
   18434:	ldr	r5, [sl, #4]
   18438:	ldr	r6, [pc, #240]	; 18530 <read_boolean_unary_expression@@Base+0x15a0>
   1843c:	mov	r8, r0
   18440:	ldr	r6, [pc, r6]
   18444:	add	r0, r8, r6
   18448:	mov	r1, #0
   1844c:	mov	r2, r4
   18450:	bl	11f60 <memset@plt>
   18454:	adds	r0, r6, r4
   18458:	adc	r1, r5, #0
   1845c:	strd	r0, [sl]
   18460:	sub	sp, fp, #28
   18464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18468:	andeq	r5, r1, r0, lsl r1
   1846c:	strdeq	r5, [r1], -r4
   18470:	strdeq	r5, [r1], -r0
   18474:	andeq	r5, r1, r4, ror #1
   18478:	andeq	r5, r1, r0, ror #1
   1847c:	andeq	r5, r1, r4, asr #1
   18480:	andeq	r5, r1, r8, ror r0
   18484:	andeq	r5, r1, r4, ror r0
   18488:	andeq	r5, r1, r0, rrx
   1848c:	andeq	r5, r1, r8, asr r0
   18490:	andeq	r5, r1, r0, asr #32
   18494:	strdeq	r4, [r1], -r8
   18498:	strdeq	r4, [r1], -r0
   1849c:	andeq	r4, r1, r8, ror #31
   184a0:	ldrdeq	r4, [r1], -ip
   184a4:	andeq	r4, r1, r4, lsr #25
   184a8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   184ac:	andeq	r4, r1, r8, ror #30
   184b0:	andeq	r4, r1, ip, ror #30
   184b4:	andeq	r4, r1, r8, asr pc
   184b8:	andeq	r4, r1, r0, lsl #25
   184bc:	andeq	r4, r1, ip, lsr ip
   184c0:	andeq	r4, r1, r8, lsl #24
   184c4:	andeq	r4, r1, r8, lsl #24
   184c8:	muleq	r1, r4, fp
   184cc:	andeq	r4, r1, r0, asr fp
   184d0:	andeq	r4, r1, r4, lsr fp
   184d4:	andeq	r4, r1, r4, ror #28
   184d8:	andeq	r4, r1, r4, asr lr
   184dc:	andeq	r4, r1, r8, asr #28
   184e0:	andeq	r4, r1, r4, lsl #28
   184e4:	strdeq	r4, [r1], -r0
   184e8:	andeq	r4, r1, r4, ror #27
   184ec:			; <UNDEFINED> instruction: 0x00014db4
   184f0:	andeq	r4, r1, ip, ror sp
   184f4:	andeq	r4, r1, ip, ror #26
   184f8:	andeq	r4, r1, r0, ror #26
   184fc:	andeq	r4, r1, r0, lsr #22
   18500:	andeq	r4, r1, ip, lsl #26
   18504:	andeq	r4, r1, r0, lsl #26
   18508:	andeq	r4, r1, r0, ror #25
   1850c:	andeq	r4, r1, r8, ror #25
   18510:	andeq	r4, r1, r8, asr #21
   18514:			; <UNDEFINED> instruction: 0x00014abc
   18518:	andeq	r4, r1, r0, ror sl
   1851c:	andeq	r4, r1, ip, asr #20
   18520:	andeq	r4, r1, r0, asr sl
   18524:	andeq	r4, r1, ip, ror #19
   18528:	andeq	r4, r1, r0, ror #19
   1852c:	muleq	r1, r4, r9
   18530:	andeq	r4, r1, r0, lsl #19
   18534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18538:	add	fp, sp, #28
   1853c:	sub	sp, sp, #28
   18540:	mov	ip, r0
   18544:	ldr	r0, [pc, #1728]	; 18c0c <read_boolean_unary_expression@@Base+0x1c7c>
   18548:	ldr	r0, [pc, r0]
   1854c:	cmp	r0, #0
   18550:	beq	1866c <read_boolean_unary_expression@@Base+0x16dc>
   18554:	ldr	r2, [pc, #1716]	; 18c10 <read_boolean_unary_expression@@Base+0x1c80>
   18558:	mov	sl, r1
   1855c:	add	r2, pc, r2
   18560:	ldr	r3, [r2, #4]
   18564:	ldr	r4, [pc, #1704]	; 18c14 <read_boolean_unary_expression@@Base+0x1c84>
   18568:	ldr	r4, [pc, r4]
   1856c:	ldr	r6, [pc, #1700]	; 18c18 <read_boolean_unary_expression@@Base+0x1c88>
   18570:	add	r6, pc, r6
   18574:	ldrb	r0, [r6]
   18578:	cmp	r0, #0
   1857c:	beq	18674 <read_boolean_unary_expression@@Base+0x16e4>
   18580:	ldr	r8, [pc, #1720]	; 18c40 <read_boolean_unary_expression@@Base+0x1cb0>
   18584:	mov	r5, #10551296	; 0xa10000
   18588:	adds	r9, r4, #4
   1858c:	add	r8, pc, r8
   18590:	adc	r2, r3, #0
   18594:	ldr	r0, [r8, #4]
   18598:	ldr	r1, [pc, #1700]	; 18c44 <read_boolean_unary_expression@@Base+0x1cb4>
   1859c:	orr	r5, r5, #16777216	; 0x1000000
   185a0:	ldr	r1, [pc, r1]
   185a4:	subs	r1, r1, r9
   185a8:	sbcs	r0, r0, r2
   185ac:	bcs	18784 <read_boolean_unary_expression@@Base+0x17f4>
   185b0:	mov	r0, #3
   185b4:	orr	r0, r0, #131072	; 0x20000
   185b8:	adds	r0, r4, r0
   185bc:	adc	r1, r3, #0
   185c0:	mvn	r2, #0
   185c4:	and	r9, r1, r2
   185c8:	mov	r1, #16646144	; 0xfe0000
   185cc:	orr	r1, r1, #-16777216	; 0xff000000
   185d0:	and	r4, r0, r1
   185d4:	ldr	r0, [pc, #1652]	; 18c50 <read_boolean_unary_expression@@Base+0x1cc0>
   185d8:	mov	r1, r4
   185dc:	mov	r7, ip
   185e0:	ldr	r0, [pc, r0]
   185e4:	bl	11e94 <realloc@plt>
   185e8:	ldr	ip, [pc, #1636]	; 18c54 <read_boolean_unary_expression@@Base+0x1cc4>
   185ec:	ldr	lr, [pc, #1636]	; 18c58 <read_boolean_unary_expression@@Base+0x1cc8>
   185f0:	stm	r8, {r4, r9}
   185f4:	ldr	r1, [pc, #1632]	; 18c5c <read_boolean_unary_expression@@Base+0x1ccc>
   185f8:	add	ip, pc, ip
   185fc:	add	lr, pc, lr
   18600:	add	r1, pc, r1
   18604:	mov	r2, r0
   18608:	str	r2, [r1]
   1860c:	mov	r6, ip
   18610:	ldrb	ip, [ip]
   18614:	ldr	r3, [lr, #4]
   18618:	ldr	r4, [pc, #1600]	; 18c60 <read_boolean_unary_expression@@Base+0x1cd0>
   1861c:	lsr	r0, r5, #24
   18620:	mov	r1, r8
   18624:	ldr	r4, [pc, r4]
   18628:	str	r2, [sp, #20]
   1862c:	lsl	r8, r7, #1
   18630:	strb	r5, [r2, r4]!
   18634:	adds	r9, r4, #4
   18638:	strb	r0, [r2, #3]
   1863c:	lsr	r0, r5, #16
   18640:	strb	r0, [r2, #2]
   18644:	lsr	r0, r5, #8
   18648:	strb	r0, [r2, #1]
   1864c:	adc	r5, r3, #0
   18650:	mov	r0, #0
   18654:	cmp	ip, #1
   18658:	str	r3, [sp, #16]
   1865c:	str	r9, [lr]
   18660:	str	r5, [lr, #4]
   18664:	beq	187d8 <read_boolean_unary_expression@@Base+0x1848>
   18668:	b	18928 <read_boolean_unary_expression@@Base+0x1998>
   1866c:	sub	sp, fp, #28
   18670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18674:	ldr	r0, [pc, #1440]	; 18c1c <read_boolean_unary_expression@@Base+0x1c8c>
   18678:	mov	r7, r3
   1867c:	adds	r9, r4, #4
   18680:	mov	lr, r2
   18684:	ldr	r0, [pc, r0]
   18688:	str	r0, [sp, #20]
   1868c:	ldrb	r1, [r0, r4]!
   18690:	str	r7, [sp, #16]
   18694:	ldrb	r5, [r0, #1]
   18698:	ldrb	r3, [r0, #2]
   1869c:	ldrb	r0, [r0, #3]
   186a0:	orr	r1, r1, r5, lsl #8
   186a4:	orr	r1, r1, r3, lsl #16
   186a8:	orr	r3, r1, r0, lsl #24
   186ac:	adc	r5, r7, #0
   186b0:	mov	r7, #0
   186b4:	cmn	r3, #1
   186b8:	str	r9, [r2]
   186bc:	str	r5, [r2, #4]
   186c0:	beq	18884 <read_boolean_unary_expression@@Base+0x18f4>
   186c4:	mov	r0, #10551296	; 0xa10000
   186c8:	orr	r0, r0, #16777216	; 0x1000000
   186cc:	cmp	r3, r0
   186d0:	bne	18890 <read_boolean_unary_expression@@Base+0x1900>
   186d4:	str	r5, [sp, #8]
   186d8:	ldr	r0, [sp, #20]
   186dc:	str	r4, [sp, #4]
   186e0:	adds	r5, r4, #8
   186e4:	ldr	r3, [r0, r9]
   186e8:	ldr	r0, [sp, #16]
   186ec:	mov	r1, r9
   186f0:	adc	r9, r0, #0
   186f4:	cmn	r3, #1
   186f8:	stm	lr, {r5, r9}
   186fc:	beq	1889c <read_boolean_unary_expression@@Base+0x190c>
   18700:	lsr	r0, r3, #1
   18704:	mov	r7, ip
   18708:	cmp	r0, ip
   1870c:	bne	1889c <read_boolean_unary_expression@@Base+0x190c>
   18710:	lsl	r0, r7, #3
   18714:	mov	r4, r1
   18718:	bl	11ed0 <malloc@plt>
   1871c:	mov	r1, r0
   18720:	cmp	r7, #0
   18724:	beq	188c4 <read_boolean_unary_expression@@Base+0x1934>
   18728:	mov	r0, r7
   1872c:	str	r7, [sp, #24]
   18730:	str	r1, [sp, #12]
   18734:	ldr	r2, [sp, #20]
   18738:	ldr	r3, [r2, r5]!
   1873c:	adds	r5, r5, #8
   18740:	ldr	r2, [r2, #4]
   18744:	str	r3, [r1]
   18748:	adc	r9, r9, #0
   1874c:	str	r2, [r1, #4]
   18750:	subs	r0, r0, #1
   18754:	add	r1, r1, #8
   18758:	bne	18734 <read_boolean_unary_expression@@Base+0x17a4>
   1875c:	ldr	lr, [pc, #1236]	; 18c38 <read_boolean_unary_expression@@Base+0x1ca8>
   18760:	add	lr, pc, lr
   18764:	mov	r0, lr
   18768:	stm	r0, {r5, r9}
   1876c:	ldr	ip, [pc, #1224]	; 18c3c <read_boolean_unary_expression@@Base+0x1cac>
   18770:	ldr	r0, [sp, #12]
   18774:	add	ip, pc, ip
   18778:	mov	r6, ip
   1877c:	ldr	ip, [sp, #24]
   18780:	b	188e0 <read_boolean_unary_expression@@Base+0x1950>
   18784:	str	r3, [sp, #16]
   18788:	ldr	r3, [pc, #1208]	; 18c48 <read_boolean_unary_expression@@Base+0x1cb8>
   1878c:	mov	lr, r5
   18790:	mov	r7, ip
   18794:	lsr	ip, r5, #16
   18798:	ldr	r3, [pc, r3]
   1879c:	lsr	r1, r5, #8
   187a0:	str	r3, [sp, #20]
   187a4:	strb	lr, [r3, r4]!
   187a8:	lsr	r0, lr, #24
   187ac:	strb	r1, [r3, #1]
   187b0:	strb	r0, [r3, #3]
   187b4:	strb	ip, [r3, #2]
   187b8:	ldr	lr, [pc, #1164]	; 18c4c <read_boolean_unary_expression@@Base+0x1cbc>
   187bc:	lsl	r5, r7, #1
   187c0:	add	lr, pc, lr
   187c4:	mov	r1, r8
   187c8:	mov	r8, r5
   187cc:	str	r9, [lr]
   187d0:	str	r2, [lr, #4]
   187d4:	mov	r5, r2
   187d8:	str	r8, [sp, #24]
   187dc:	mov	r8, r1
   187e0:	ldr	r0, [sp, #16]
   187e4:	ldr	r2, [r8, #4]
   187e8:	ldr	r3, [pc, #1140]	; 18c64 <read_boolean_unary_expression@@Base+0x1cd4>
   187ec:	adds	ip, r4, #8
   187f0:	adc	r1, r0, #0
   187f4:	mov	r0, #0
   187f8:	ldr	r3, [pc, r3]
   187fc:	subs	r3, r3, ip
   18800:	sbcs	r1, r2, r1
   18804:	bcs	1887c <read_boolean_unary_expression@@Base+0x18ec>
   18808:	ldr	r5, [pc, #1112]	; 18c68 <read_boolean_unary_expression@@Base+0x1cd8>
   1880c:	mov	r0, #3
   18810:	ldr	r1, [sp, #16]
   18814:	orr	r0, r0, #131072	; 0x20000
   18818:	adds	r0, r4, r0
   1881c:	adc	r1, r1, #0
   18820:	adds	r0, r0, #4
   18824:	adc	r1, r1, #0
   18828:	mvn	r2, #0
   1882c:	and	r9, r1, r2
   18830:	mov	r1, #16646144	; 0xfe0000
   18834:	orr	r1, r1, #-16777216	; 0xff000000
   18838:	and	r4, r0, r1
   1883c:	ldr	r0, [sp, #20]
   18840:	mov	r1, r4
   18844:	add	r5, pc, r5
   18848:	bl	11e94 <realloc@plt>
   1884c:	ldr	ip, [pc, #1048]	; 18c6c <read_boolean_unary_expression@@Base+0x1cdc>
   18850:	ldr	lr, [pc, #1048]	; 18c70 <read_boolean_unary_expression@@Base+0x1ce0>
   18854:	stm	r8, {r4, r9}
   18858:	add	lr, pc, lr
   1885c:	str	r0, [r5]
   18860:	str	r0, [sp, #20]
   18864:	ldr	r5, [lr, #4]
   18868:	ldr	r9, [pc, #1028]	; 18c74 <read_boolean_unary_expression@@Base+0x1ce4>
   1886c:	add	ip, pc, ip
   18870:	mov	r6, ip
   18874:	mov	r0, #0
   18878:	ldr	r9, [pc, r9]
   1887c:	ldr	r8, [sp, #24]
   18880:	b	18928 <read_boolean_unary_expression@@Base+0x1998>
   18884:	ldr	r1, [sp, #16]
   18888:	mov	r0, #0
   1888c:	b	188f4 <read_boolean_unary_expression@@Base+0x1964>
   18890:	ldr	r1, [pc, #904]	; 18c20 <read_boolean_unary_expression@@Base+0x1c90>
   18894:	add	r1, pc, r1
   18898:	b	188a4 <read_boolean_unary_expression@@Base+0x1914>
   1889c:	ldr	r1, [pc, #904]	; 18c2c <read_boolean_unary_expression@@Base+0x1c9c>
   188a0:	add	r1, pc, r1
   188a4:	ldr	r0, [pc, #888]	; 18c24 <read_boolean_unary_expression@@Base+0x1c94>
   188a8:	ldr	r0, [pc, r0]
   188ac:	ldr	r0, [r0]
   188b0:	ldr	r2, [pc, #880]	; 18c28 <read_boolean_unary_expression@@Base+0x1c98>
   188b4:	ldr	r2, [pc, r2]
   188b8:	sub	sp, fp, #28
   188bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188c0:	b	11f30 <fprintf@plt>
   188c4:	ldr	lr, [pc, #868]	; 18c30 <read_boolean_unary_expression@@Base+0x1ca0>
   188c8:	ldr	ip, [pc, #868]	; 18c34 <read_boolean_unary_expression@@Base+0x1ca4>
   188cc:	mov	r0, r1
   188d0:	add	lr, pc, lr
   188d4:	add	ip, pc, ip
   188d8:	mov	r6, ip
   188dc:	mov	ip, r7
   188e0:	mov	r9, r4
   188e4:	ldr	r5, [sp, #8]
   188e8:	ldr	r4, [sp, #4]
   188ec:	ldr	r1, [sp, #16]
   188f0:	mov	r7, #0
   188f4:	str	r4, [lr]
   188f8:	str	r1, [lr, #4]
   188fc:	ldr	r2, [sp, #20]
   18900:	mov	r1, #1
   18904:	lsl	r8, ip, #1
   18908:	strb	r7, [r2, r4]!
   1890c:	strb	r1, [r2, #3]
   18910:	mov	r1, #161	; 0xa1
   18914:	strb	r7, [r2, #1]
   18918:	strb	r1, [r2, #2]
   1891c:	str	r9, [lr]
   18920:	str	r5, [lr, #4]
   18924:	mov	r7, ip
   18928:	ldr	r3, [sp, #20]
   1892c:	lsr	r1, r8, #16
   18930:	mov	ip, r3
   18934:	strb	r8, [r3, r9]!
   18938:	lsr	r4, r8, #24
   1893c:	lsr	r2, r8, #8
   18940:	adds	r8, r9, #4
   18944:	strb	r1, [r3, #2]
   18948:	adc	r1, r5, #0
   1894c:	cmp	r7, #0
   18950:	strb	r4, [r3, #3]
   18954:	strb	r2, [r3, #1]
   18958:	str	r8, [lr]
   1895c:	str	r1, [lr, #4]
   18960:	str	r7, [sp, #24]
   18964:	beq	18c00 <read_boolean_unary_expression@@Base+0x1c70>
   18968:	ldr	r7, [pc, #776]	; 18c78 <read_boolean_unary_expression@@Base+0x1ce8>
   1896c:	mov	r4, lr
   18970:	mov	r2, r0
   18974:	add	r7, pc, r7
   18978:	str	r0, [sp, #12]
   1897c:	cmp	r0, #0
   18980:	mov	r0, r4
   18984:	str	r2, [sp, #16]
   18988:	beq	18994 <read_boolean_unary_expression@@Base+0x1a04>
   1898c:	ldrd	r2, [r2]
   18990:	b	1899c <read_boolean_unary_expression@@Base+0x1a0c>
   18994:	mov	r2, #0
   18998:	mov	r3, #0
   1899c:	ldrd	r4, [sl]
   189a0:	adds	r4, r4, r2
   189a4:	adc	r5, r5, r3
   189a8:	strd	r4, [sl]
   189ac:	ldrb	r2, [r6]
   189b0:	str	sl, [sp, #20]
   189b4:	cmp	r2, #0
   189b8:	beq	18a84 <read_boolean_unary_expression@@Base+0x1af4>
   189bc:	ldr	r3, [r7, #4]
   189c0:	ldr	r6, [pc, #692]	; 18c7c <read_boolean_unary_expression@@Base+0x1cec>
   189c4:	adds	r2, r8, #4
   189c8:	adc	r9, r1, #0
   189cc:	ldr	r6, [pc, r6]
   189d0:	subs	r2, r6, r2
   189d4:	sbcs	r2, r3, r9
   189d8:	bcs	18ac0 <read_boolean_unary_expression@@Base+0x1b30>
   189dc:	mov	r2, #3
   189e0:	orr	r2, r2, #131072	; 0x20000
   189e4:	adds	r0, r8, r2
   189e8:	adc	r1, r1, #0
   189ec:	mvn	r2, #0
   189f0:	and	r8, r1, r2
   189f4:	mov	r1, #16646144	; 0xfe0000
   189f8:	orr	r1, r1, #-16777216	; 0xff000000
   189fc:	and	r6, r0, r1
   18a00:	mov	r0, ip
   18a04:	mov	r1, r6
   18a08:	bl	11e94 <realloc@plt>
   18a0c:	ldr	ip, [pc, #620]	; 18c80 <read_boolean_unary_expression@@Base+0x1cf0>
   18a10:	ldr	lr, [pc, #620]	; 18c84 <read_boolean_unary_expression@@Base+0x1cf4>
   18a14:	stm	r7, {r6, r8}
   18a18:	mov	r3, r0
   18a1c:	ldr	r0, [pc, #612]	; 18c88 <read_boolean_unary_expression@@Base+0x1cf8>
   18a20:	add	lr, pc, lr
   18a24:	mov	r9, lr
   18a28:	add	r0, pc, r0
   18a2c:	add	ip, pc, ip
   18a30:	str	r3, [r0]
   18a34:	mov	lr, ip
   18a38:	ldrb	ip, [ip]
   18a3c:	ldr	r1, [r9, #4]
   18a40:	ldr	r8, [pc, #580]	; 18c8c <read_boolean_unary_expression@@Base+0x1cfc>
   18a44:	mov	r7, r3
   18a48:	lsr	r2, r4, #24
   18a4c:	ldr	r8, [pc, r8]
   18a50:	lsr	r6, r4, #16
   18a54:	strb	r4, [r7, r8]!
   18a58:	strb	r2, [r7, #3]
   18a5c:	lsr	r2, r4, #8
   18a60:	strb	r2, [r7, #1]
   18a64:	adds	r2, r8, #4
   18a68:	mov	r4, r9
   18a6c:	adc	r9, r1, #0
   18a70:	cmp	ip, #1
   18a74:	strb	r6, [r7, #2]
   18a78:	stm	r4, {r2, r9}
   18a7c:	beq	18af4 <read_boolean_unary_expression@@Base+0x1b64>
   18a80:	b	18ba0 <read_boolean_unary_expression@@Base+0x1c10>
   18a84:	mov	r7, ip
   18a88:	lsr	r2, r4, #24
   18a8c:	strb	r4, [r7, r8]!
   18a90:	lsr	r9, r4, #16
   18a94:	strb	r2, [r7, #3]
   18a98:	adds	r2, r8, #4
   18a9c:	mov	lr, r6
   18aa0:	lsr	r6, r4, #8
   18aa4:	strb	r9, [r7, #2]
   18aa8:	adc	r9, r1, #0
   18aac:	mov	r4, r0
   18ab0:	strb	r6, [r7, #1]
   18ab4:	mov	r3, ip
   18ab8:	stm	r4, {r2, r9}
   18abc:	b	18ba0 <read_boolean_unary_expression@@Base+0x1c10>
   18ac0:	mov	r6, ip
   18ac4:	lsr	r2, r4, #24
   18ac8:	strb	r4, [r6, r8]!
   18acc:	lsr	r9, r4, #16
   18ad0:	strb	r2, [r6, #3]
   18ad4:	adds	r2, r8, #4
   18ad8:	lsr	r7, r4, #8
   18adc:	strb	r9, [r6, #2]
   18ae0:	adc	r9, r1, #0
   18ae4:	mov	r4, r0
   18ae8:	strb	r7, [r6, #1]
   18aec:	mov	r3, ip
   18af0:	stm	r4, {r2, r9}
   18af4:	ldr	lr, [pc, #404]	; 18c90 <read_boolean_unary_expression@@Base+0x1d00>
   18af8:	mov	r0, r4
   18afc:	adds	r7, r8, #8
   18b00:	add	lr, pc, lr
   18b04:	adc	ip, r1, #0
   18b08:	ldr	r4, [lr, #4]
   18b0c:	ldr	r6, [pc, #384]	; 18c94 <read_boolean_unary_expression@@Base+0x1d04>
   18b10:	ldr	r6, [pc, r6]
   18b14:	subs	r7, r6, r7
   18b18:	sbcs	r7, r4, ip
   18b1c:	bcs	18b94 <read_boolean_unary_expression@@Base+0x1c04>
   18b20:	mov	r2, #3
   18b24:	orr	r2, r2, #131072	; 0x20000
   18b28:	adds	r0, r8, r2
   18b2c:	adc	r1, r1, #0
   18b30:	adds	r0, r0, #4
   18b34:	adc	r1, r1, #0
   18b38:	mvn	r2, #0
   18b3c:	and	r7, r1, r2
   18b40:	mov	r1, #16646144	; 0xfe0000
   18b44:	orr	r1, r1, #-16777216	; 0xff000000
   18b48:	and	r6, r0, r1
   18b4c:	mov	r0, r3
   18b50:	mov	r1, r6
   18b54:	mov	r8, lr
   18b58:	bl	11e94 <realloc@plt>
   18b5c:	ldr	lr, [pc, #312]	; 18c9c <read_boolean_unary_expression@@Base+0x1d0c>
   18b60:	strd	r6, [r8]
   18b64:	mov	r3, r0
   18b68:	add	lr, pc, lr
   18b6c:	mov	r4, lr
   18b70:	ldr	r9, [lr, #4]
   18b74:	ldr	r0, [pc, #292]	; 18ca0 <read_boolean_unary_expression@@Base+0x1d10>
   18b78:	add	r0, pc, r0
   18b7c:	str	r3, [r0]
   18b80:	ldr	r2, [pc, #284]	; 18ca4 <read_boolean_unary_expression@@Base+0x1d14>
   18b84:	ldr	r2, [pc, r2]
   18b88:	ldr	lr, [pc, #280]	; 18ca8 <read_boolean_unary_expression@@Base+0x1d18>
   18b8c:	add	lr, pc, lr
   18b90:	b	18ba0 <read_boolean_unary_expression@@Base+0x1c10>
   18b94:	ldr	lr, [pc, #252]	; 18c98 <read_boolean_unary_expression@@Base+0x1d08>
   18b98:	mov	r4, r0
   18b9c:	add	lr, pc, lr
   18ba0:	mov	ip, r3
   18ba4:	lsr	r1, r5, #16
   18ba8:	strb	r5, [r3, r2]!
   18bac:	lsr	r0, r5, #24
   18bb0:	lsr	r7, r5, #8
   18bb4:	adds	r8, r2, #4
   18bb8:	strb	r1, [r3, #2]
   18bbc:	adc	r1, r9, #0
   18bc0:	strb	r0, [r3, #3]
   18bc4:	strb	r7, [r3, #1]
   18bc8:	str	r8, [r4]
   18bcc:	str	r1, [r4, #4]
   18bd0:	ldr	r0, [sp, #24]
   18bd4:	mov	r6, lr
   18bd8:	subs	r0, r0, #1
   18bdc:	str	r0, [sp, #24]
   18be0:	ldr	sl, [sp, #20]
   18be4:	ldr	r2, [sp, #16]
   18be8:	ldr	r0, [sp, #12]
   18bec:	ldr	r7, [pc, #184]	; 18cac <read_boolean_unary_expression@@Base+0x1d1c>
   18bf0:	add	sl, sl, #8
   18bf4:	add	r2, r2, #8
   18bf8:	add	r7, pc, r7
   18bfc:	bne	1897c <read_boolean_unary_expression@@Base+0x19ec>
   18c00:	sub	sp, fp, #28
   18c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c08:	b	11e4c <free@plt>
   18c0c:	andeq	r4, r1, r8, ror #16
   18c10:	andeq	r4, r1, r4, ror #16
   18c14:	andeq	r4, r1, r8, asr r8
   18c18:	andeq	r4, r1, ip, lsr r8
   18c1c:	andeq	r4, r1, r0, lsr r7
   18c20:	strdeq	r3, [r0], -ip
   18c24:	andeq	r3, r1, ip, lsl #16
   18c28:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18c2c:	andeq	r3, r0, sl, lsr r1
   18c30:	strdeq	r4, [r1], -r0
   18c34:	ldrdeq	r4, [r1], -r8
   18c38:	andeq	r4, r1, r0, ror #12
   18c3c:	andeq	r4, r1, r8, lsr r6
   18c40:	andeq	r4, r1, ip, lsr #16
   18c44:	andeq	r4, r1, r8, lsl r8
   18c48:	andeq	r4, r1, ip, lsl r6
   18c4c:	andeq	r4, r1, r0, lsl #12
   18c50:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18c54:			; <UNDEFINED> instruction: 0x000147b4
   18c58:	andeq	r4, r1, r4, asr #15
   18c5c:			; <UNDEFINED> instruction: 0x000147b4
   18c60:	muleq	r1, ip, r7
   18c64:	andeq	r4, r1, r0, asr #11
   18c68:	andeq	r4, r1, r0, ror r5
   18c6c:	andeq	r4, r1, r0, asr #10
   18c70:	andeq	r4, r1, r8, ror #10
   18c74:	andeq	r4, r1, r8, asr #10
   18c78:	andeq	r4, r1, r4, asr #8
   18c7c:	andeq	r4, r1, ip, ror #7
   18c80:	andeq	r4, r1, r0, lsl #7
   18c84:	andeq	r4, r1, r0, lsr #7
   18c88:	andeq	r4, r1, ip, lsl #7
   18c8c:	andeq	r4, r1, r4, ror r3
   18c90:			; <UNDEFINED> instruction: 0x000142b8
   18c94:	andeq	r4, r1, r8, lsr #5
   18c98:	andeq	r4, r1, r0, lsl r2
   18c9c:	andeq	r4, r1, r8, asr r2
   18ca0:	andeq	r4, r1, ip, lsr r2
   18ca4:	andeq	r4, r1, ip, lsr r2
   18ca8:	andeq	r4, r1, r0, lsr #4
   18cac:	andeq	r4, r1, r0, asr #3
   18cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cb4:	add	fp, sp, #28
   18cb8:	sub	sp, sp, #4
   18cbc:	ldr	r0, [pc, #3180]	; 19930 <read_boolean_unary_expression@@Base+0x29a0>
   18cc0:	ldr	r0, [pc, r0]
   18cc4:	cmp	r0, #0
   18cc8:	beq	19324 <read_boolean_unary_expression@@Base+0x2394>
   18ccc:	ldr	sl, [pc, #3168]	; 19934 <read_boolean_unary_expression@@Base+0x29a4>
   18cd0:	add	sl, pc, sl
   18cd4:	ldr	r6, [sl, #4]
   18cd8:	ldr	r5, [pc, #3160]	; 19938 <read_boolean_unary_expression@@Base+0x29a8>
   18cdc:	ldr	r5, [pc, r5]
   18ce0:	ldr	r8, [pc, #3156]	; 1993c <read_boolean_unary_expression@@Base+0x29ac>
   18ce4:	add	r8, pc, r8
   18ce8:	ldrb	r0, [r8]
   18cec:	cmp	r0, #0
   18cf0:	beq	18db4 <read_boolean_unary_expression@@Base+0x1e24>
   18cf4:	ldr	r9, [pc, #3164]	; 19958 <read_boolean_unary_expression@@Base+0x29c8>
   18cf8:	adds	r2, r5, #4
   18cfc:	adc	ip, r6, #0
   18d00:	add	r9, pc, r9
   18d04:	ldr	r0, [r9, #4]
   18d08:	ldr	r3, [pc, #3148]	; 1995c <read_boolean_unary_expression@@Base+0x29cc>
   18d0c:	ldr	r3, [pc, r3]
   18d10:	subs	r3, r3, r2
   18d14:	sbcs	r0, r0, ip
   18d18:	bcs	18e08 <read_boolean_unary_expression@@Base+0x1e78>
   18d1c:	mov	r0, #7
   18d20:	orr	r0, r0, #131072	; 0x20000
   18d24:	adds	r0, r5, r0
   18d28:	adc	r1, r6, #0
   18d2c:	subs	r0, r0, #4
   18d30:	sbc	r1, r1, #0
   18d34:	mvn	r2, #0
   18d38:	and	r5, r1, r2
   18d3c:	mov	r1, #16646144	; 0xfe0000
   18d40:	orr	r1, r1, #-16777216	; 0xff000000
   18d44:	ldr	r4, [pc, #3096]	; 19964 <read_boolean_unary_expression@@Base+0x29d4>
   18d48:	and	r6, r0, r1
   18d4c:	ldr	r0, [pc, #3092]	; 19968 <read_boolean_unary_expression@@Base+0x29d8>
   18d50:	mov	r1, r6
   18d54:	add	r4, pc, r4
   18d58:	ldr	r0, [pc, r0]
   18d5c:	bl	11e94 <realloc@plt>
   18d60:	str	r6, [r9]
   18d64:	str	r5, [r9, #4]
   18d68:	str	r0, [r4]
   18d6c:	ldrb	r3, [r8]
   18d70:	ldr	r6, [sl, #4]
   18d74:	ldr	r5, [pc, #3056]	; 1996c <read_boolean_unary_expression@@Base+0x29dc>
   18d78:	mov	r2, r0
   18d7c:	mov	r1, #0
   18d80:	mov	r7, #161	; 0xa1
   18d84:	ldr	r5, [pc, r5]
   18d88:	strb	r1, [r2, r5]!
   18d8c:	strb	r7, [r2, #3]
   18d90:	strb	r1, [r2, #2]
   18d94:	strb	r1, [r2, #1]
   18d98:	adds	r2, r5, #4
   18d9c:	adc	ip, r6, #0
   18da0:	mov	r7, #1
   18da4:	cmp	r3, #1
   18da8:	stm	sl, {r2, ip}
   18dac:	beq	18e30 <read_boolean_unary_expression@@Base+0x1ea0>
   18db0:	b	19008 <read_boolean_unary_expression@@Base+0x2078>
   18db4:	ldr	r0, [pc, #2948]	; 19940 <read_boolean_unary_expression@@Base+0x29b0>
   18db8:	ldr	r0, [pc, r0]
   18dbc:	mov	r1, r0
   18dc0:	ldrb	r2, [r1, r5]!
   18dc4:	ldrb	r3, [r1, #1]
   18dc8:	ldrb	r7, [r1, #2]
   18dcc:	ldrb	r1, [r1, #3]
   18dd0:	orr	r2, r2, r3, lsl #8
   18dd4:	orr	r2, r2, r7, lsl #16
   18dd8:	orr	r3, r2, r1, lsl #24
   18ddc:	adds	r2, r5, #4
   18de0:	adc	ip, r6, #0
   18de4:	cmp	r3, #-1593835520	; 0xa1000000
   18de8:	stm	sl, {r2, ip}
   18dec:	beq	18fa8 <read_boolean_unary_expression@@Base+0x2018>
   18df0:	mov	r7, #1
   18df4:	cmn	r3, #1
   18df8:	beq	18fe8 <read_boolean_unary_expression@@Base+0x2058>
   18dfc:	ldr	r1, [pc, #2880]	; 19944 <read_boolean_unary_expression@@Base+0x29b4>
   18e00:	add	r1, pc, r1
   18e04:	b	196e8 <read_boolean_unary_expression@@Base+0x2758>
   18e08:	ldr	r0, [pc, #2896]	; 19960 <read_boolean_unary_expression@@Base+0x29d0>
   18e0c:	mov	r3, #0
   18e10:	mov	r4, #161	; 0xa1
   18e14:	ldr	r0, [pc, r0]
   18e18:	mov	r7, r0
   18e1c:	strb	r3, [r7, r5]!
   18e20:	strb	r4, [r7, #3]
   18e24:	strb	r3, [r7, #2]
   18e28:	strb	r3, [r7, #1]
   18e2c:	stm	sl, {r2, ip}
   18e30:	ldr	r4, [r9, #4]
   18e34:	ldr	r1, [pc, #2868]	; 19970 <read_boolean_unary_expression@@Base+0x29e0>
   18e38:	adds	r3, r5, #8
   18e3c:	adc	r7, r6, #0
   18e40:	ldr	r1, [pc, r1]
   18e44:	subs	r1, r1, r3
   18e48:	sbcs	r1, r4, r7
   18e4c:	bcs	18ed8 <read_boolean_unary_expression@@Base+0x1f48>
   18e50:	mov	r1, #7
   18e54:	orr	r1, r1, #131072	; 0x20000
   18e58:	adds	r1, r5, r1
   18e5c:	adc	r2, r6, #0
   18e60:	mvn	r3, #0
   18e64:	and	r5, r2, r3
   18e68:	mov	r2, #16646144	; 0xfe0000
   18e6c:	orr	r2, r2, #-16777216	; 0xff000000
   18e70:	ldr	r4, [pc, #2812]	; 19974 <read_boolean_unary_expression@@Base+0x29e4>
   18e74:	and	r6, r1, r2
   18e78:	mov	r1, r6
   18e7c:	add	r4, pc, r4
   18e80:	bl	11e94 <realloc@plt>
   18e84:	str	r6, [r9]
   18e88:	str	r5, [r9, #4]
   18e8c:	str	r0, [r4]
   18e90:	ldrb	r1, [r8]
   18e94:	ldr	ip, [sl, #4]
   18e98:	ldr	r2, [pc, #2776]	; 19978 <read_boolean_unary_expression@@Base+0x29e8>
   18e9c:	mov	r7, r0
   18ea0:	mov	r3, #9
   18ea4:	ldr	r2, [pc, r2]
   18ea8:	strb	r3, [r7, r2]!
   18eac:	mov	r3, #0
   18eb0:	strb	r3, [r7, #3]
   18eb4:	strb	r3, [r7, #2]
   18eb8:	strb	r3, [r7, #1]
   18ebc:	adds	r3, r2, #4
   18ec0:	adc	r5, ip, #0
   18ec4:	mov	r7, #1
   18ec8:	cmp	r1, #1
   18ecc:	stm	sl, {r3, r5}
   18ed0:	beq	18f00 <read_boolean_unary_expression@@Base+0x1f70>
   18ed4:	b	19030 <read_boolean_unary_expression@@Base+0x20a0>
   18ed8:	mov	r3, r0
   18edc:	mov	r1, #9
   18ee0:	strb	r1, [r3, r2]!
   18ee4:	mov	r1, #0
   18ee8:	strb	r1, [r3, #3]
   18eec:	strb	r1, [r3, #2]
   18ef0:	strb	r1, [r3, #1]
   18ef4:	adds	r3, r2, #4
   18ef8:	adc	r5, ip, #0
   18efc:	stm	sl, {r3, r5}
   18f00:	ldr	r6, [r9, #4]
   18f04:	ldr	r4, [pc, #2672]	; 1997c <read_boolean_unary_expression@@Base+0x29ec>
   18f08:	adds	r1, r2, #8
   18f0c:	adc	r7, ip, #0
   18f10:	ldr	r4, [pc, r4]
   18f14:	subs	r1, r4, r1
   18f18:	sbcs	r1, r6, r7
   18f1c:	bcs	193f4 <read_boolean_unary_expression@@Base+0x2464>
   18f20:	mov	r1, #7
   18f24:	orr	r1, r1, #131072	; 0x20000
   18f28:	adds	r1, r2, r1
   18f2c:	adc	r2, ip, #0
   18f30:	mvn	r3, #0
   18f34:	and	r5, r2, r3
   18f38:	mov	r2, #16646144	; 0xfe0000
   18f3c:	orr	r2, r2, #-16777216	; 0xff000000
   18f40:	ldr	r4, [pc, #2616]	; 19980 <read_boolean_unary_expression@@Base+0x29f0>
   18f44:	and	r6, r1, r2
   18f48:	mov	r1, r6
   18f4c:	add	r4, pc, r4
   18f50:	bl	11e94 <realloc@plt>
   18f54:	str	r6, [r9]
   18f58:	str	r5, [r9, #4]
   18f5c:	str	r0, [r4]
   18f60:	ldrb	r2, [r8]
   18f64:	ldr	r5, [sl, #4]
   18f68:	ldr	r3, [pc, #2580]	; 19984 <read_boolean_unary_expression@@Base+0x29f4>
   18f6c:	mov	r7, r0
   18f70:	mov	r1, #0
   18f74:	ldr	r3, [pc, r3]
   18f78:	adds	r6, r3, #4
   18f7c:	strb	r1, [r7, r3]!
   18f80:	strb	r1, [r7, #3]
   18f84:	strb	r1, [r7, #2]
   18f88:	strb	r1, [r7, #1]
   18f8c:	adc	r1, r5, #0
   18f90:	mov	r7, #1
   18f94:	cmp	r2, #1
   18f98:	str	r6, [sl]
   18f9c:	str	r1, [sl, #4]
   18fa0:	bne	19058 <read_boolean_unary_expression@@Base+0x20c8>
   18fa4:	b	1941c <read_boolean_unary_expression@@Base+0x248c>
   18fa8:	ldr	r3, [r0, r2]
   18fac:	adds	r4, r5, #8
   18fb0:	adc	r7, r6, #0
   18fb4:	cmp	r3, #9
   18fb8:	stm	sl, {r4, r7}
   18fbc:	bne	196e0 <read_boolean_unary_expression@@Base+0x2750>
   18fc0:	ldr	r3, [pc, #2444]	; 19954 <read_boolean_unary_expression@@Base+0x29c4>
   18fc4:	adds	r4, r5, #20
   18fc8:	adc	r7, r6, #0
   18fcc:	add	r3, pc, r3
   18fd0:	add	r6, r0, r5
   18fd4:	ldrb	r3, [r3]
   18fd8:	ldr	r6, [r6, #16]
   18fdc:	stm	sl, {r4, r7}
   18fe0:	eor	r3, r3, #1
   18fe4:	add	r7, r6, r3
   18fe8:	mov	r6, r0
   18fec:	mov	r3, #0
   18ff0:	strb	r3, [r6, r5]!
   18ff4:	mov	r5, #161	; 0xa1
   18ff8:	strb	r5, [r6, #3]
   18ffc:	strb	r3, [r6, #2]
   19000:	strb	r3, [r6, #1]
   19004:	stm	sl, {r2, ip}
   19008:	mov	r3, r0
   1900c:	mov	r1, #9
   19010:	strb	r1, [r3, r2]!
   19014:	mov	r1, #0
   19018:	strb	r1, [r3, #3]
   1901c:	strb	r1, [r3, #2]
   19020:	strb	r1, [r3, #1]
   19024:	adds	r3, r2, #4
   19028:	adc	r5, ip, #0
   1902c:	stm	sl, {r3, r5}
   19030:	mov	r2, r0
   19034:	mov	r1, #0
   19038:	strb	r1, [r2, r3]!
   1903c:	adds	r6, r3, #4
   19040:	strb	r1, [r2, #3]
   19044:	strb	r1, [r2, #2]
   19048:	strb	r1, [r2, #1]
   1904c:	adc	r1, r5, #0
   19050:	str	r6, [sl]
   19054:	str	r1, [sl, #4]
   19058:	mov	r3, r0
   1905c:	mov	r2, #0
   19060:	strb	r2, [r3, r6]!
   19064:	strb	r2, [r3, #3]
   19068:	strb	r2, [r3, #2]
   1906c:	strb	r2, [r3, #1]
   19070:	adds	r2, r6, #4
   19074:	adc	r3, r1, #0
   19078:	strd	r2, [sl]
   1907c:	lsr	r1, r7, #24
   19080:	strb	r7, [r0, r2]!
   19084:	lsr	r6, r7, #16
   19088:	lsr	r5, r7, #8
   1908c:	strb	r1, [r0, #3]
   19090:	strb	r6, [r0, #2]
   19094:	strb	r5, [r0, #1]
   19098:	ldrb	r0, [r8]
   1909c:	adds	r4, r2, #4
   190a0:	adc	r5, r3, #0
   190a4:	cmp	r0, #0
   190a8:	strd	r4, [sl]
   190ac:	beq	19160 <read_boolean_unary_expression@@Base+0x21d0>
   190b0:	ldr	r9, [pc, #2284]	; 199a4 <read_boolean_unary_expression@@Base+0x2a14>
   190b4:	adds	r0, r2, #8
   190b8:	adc	r1, r3, #0
   190bc:	add	r9, pc, r9
   190c0:	ldr	r7, [r9, #4]
   190c4:	ldr	r6, [pc, #2268]	; 199a8 <read_boolean_unary_expression@@Base+0x2a18>
   190c8:	ldr	r6, [pc, r6]
   190cc:	subs	r0, r6, r0
   190d0:	sbcs	r0, r7, r1
   190d4:	bcs	1932c <read_boolean_unary_expression@@Base+0x239c>
   190d8:	mov	r0, #7
   190dc:	orr	r0, r0, #131072	; 0x20000
   190e0:	adds	r0, r2, r0
   190e4:	adc	r1, r3, #0
   190e8:	mvn	r2, #0
   190ec:	and	r5, r1, r2
   190f0:	mov	r1, #16646144	; 0xfe0000
   190f4:	orr	r1, r1, #-16777216	; 0xff000000
   190f8:	ldr	r4, [pc, #2268]	; 199dc <read_boolean_unary_expression@@Base+0x2a4c>
   190fc:	and	r6, r0, r1
   19100:	ldr	r0, [pc, #2264]	; 199e0 <read_boolean_unary_expression@@Base+0x2a50>
   19104:	mov	r1, r6
   19108:	add	r4, pc, r4
   1910c:	ldr	r0, [pc, r0]
   19110:	bl	11e94 <realloc@plt>
   19114:	str	r6, [r9]
   19118:	str	r5, [r9, #4]
   1911c:	str	r0, [r4]
   19120:	ldrb	r1, [r8]
   19124:	ldr	r5, [sl, #4]
   19128:	ldr	r4, [pc, #2228]	; 199e4 <read_boolean_unary_expression@@Base+0x2a54>
   1912c:	mov	r3, r0
   19130:	mov	r2, #0
   19134:	ldr	r4, [pc, r4]
   19138:	strb	r2, [r3, r4]!
   1913c:	strb	r2, [r3, #3]
   19140:	strb	r2, [r3, #2]
   19144:	strb	r2, [r3, #1]
   19148:	adds	r2, r4, #4
   1914c:	adc	r3, r5, #0
   19150:	cmp	r1, #0
   19154:	strd	r2, [sl]
   19158:	beq	1918c <read_boolean_unary_expression@@Base+0x21fc>
   1915c:	b	19358 <read_boolean_unary_expression@@Base+0x23c8>
   19160:	ldr	r0, [pc, #2104]	; 199a0 <read_boolean_unary_expression@@Base+0x2a10>
   19164:	adds	r2, r2, #8
   19168:	mov	r1, #0
   1916c:	adc	r3, r3, #0
   19170:	ldr	r0, [pc, r0]
   19174:	mov	r7, r0
   19178:	strb	r1, [r7, r4]!
   1917c:	strb	r1, [r7, #3]
   19180:	strb	r1, [r7, #2]
   19184:	strb	r1, [r7, #1]
   19188:	strd	r2, [sl]
   1918c:	mov	r7, r0
   19190:	mov	r1, #0
   19194:	strb	r1, [r7, r2]!
   19198:	strb	r1, [r7, #3]
   1919c:	strb	r1, [r7, #2]
   191a0:	strb	r1, [r7, #1]
   191a4:	adds	r1, r2, #4
   191a8:	adc	r5, r3, #0
   191ac:	stm	sl, {r1, r5}
   191b0:	mov	r3, r0
   191b4:	mov	r2, #0
   191b8:	strb	r2, [r3, r1]!
   191bc:	strb	r2, [r3, #3]
   191c0:	strb	r2, [r3, #2]
   191c4:	strb	r2, [r3, #1]
   191c8:	adds	r2, r1, #4
   191cc:	adc	r3, r5, #0
   191d0:	strd	r2, [sl]
   191d4:	mov	r7, r0
   191d8:	mov	r1, #0
   191dc:	strb	r1, [r7, r2]!
   191e0:	strb	r1, [r7, #3]
   191e4:	strb	r1, [r7, #2]
   191e8:	strb	r1, [r7, #1]
   191ec:	adds	r1, r2, #4
   191f0:	adc	r5, r3, #0
   191f4:	stm	sl, {r1, r5}
   191f8:	mov	r3, r0
   191fc:	mov	r2, #0
   19200:	strb	r2, [r3, r1]!
   19204:	adds	r4, r1, #4
   19208:	strb	r2, [r3, #3]
   1920c:	strb	r2, [r3, #2]
   19210:	strb	r2, [r3, #1]
   19214:	adc	r3, r5, #0
   19218:	str	r4, [sl]
   1921c:	str	r3, [sl, #4]
   19220:	mov	r2, r0
   19224:	mov	r1, #0
   19228:	strb	r1, [r2, r4]!
   1922c:	strb	r1, [r2, #3]
   19230:	strb	r1, [r2, #2]
   19234:	strb	r1, [r2, #1]
   19238:	adds	r2, r4, #4
   1923c:	adc	r1, r3, #0
   19240:	str	r2, [sl]
   19244:	str	r1, [sl, #4]
   19248:	mov	r3, r0
   1924c:	mov	r4, #0
   19250:	strb	r4, [r3, r2]!
   19254:	mov	r7, #163	; 0xa3
   19258:	strb	r7, [r3, #3]
   1925c:	strb	r4, [r3, #2]
   19260:	strb	r4, [r3, #1]
   19264:	ldrb	r7, [r8]
   19268:	adds	r6, r2, #4
   1926c:	adc	r3, r1, #0
   19270:	cmp	r7, #1
   19274:	str	r6, [sl]
   19278:	str	r3, [sl, #4]
   1927c:	bne	192f0 <read_boolean_unary_expression@@Base+0x2360>
   19280:	ldr	r8, [pc, #1852]	; 199c4 <read_boolean_unary_expression@@Base+0x2a34>
   19284:	adds	lr, r2, #8
   19288:	adc	ip, r1, #0
   1928c:	add	r8, pc, r8
   19290:	ldr	r5, [r8, #4]
   19294:	ldr	r7, [pc, #1836]	; 199c8 <read_boolean_unary_expression@@Base+0x2a38>
   19298:	ldr	r7, [pc, r7]
   1929c:	subs	r7, r7, lr
   192a0:	sbcs	r7, r5, ip
   192a4:	bcs	192f0 <read_boolean_unary_expression@@Base+0x2360>
   192a8:	mov	r3, #7
   192ac:	orr	r3, r3, #131072	; 0x20000
   192b0:	adds	r2, r2, r3
   192b4:	adc	r1, r1, #0
   192b8:	mvn	r3, #0
   192bc:	and	r7, r1, r3
   192c0:	mov	r1, #16646144	; 0xfe0000
   192c4:	orr	r1, r1, #-16777216	; 0xff000000
   192c8:	ldr	r5, [pc, #1788]	; 199cc <read_boolean_unary_expression@@Base+0x2a3c>
   192cc:	and	r6, r2, r1
   192d0:	mov	r1, r6
   192d4:	add	r5, pc, r5
   192d8:	bl	11e94 <realloc@plt>
   192dc:	strd	r6, [r8]
   192e0:	str	r0, [r5]
   192e4:	ldr	r3, [sl, #4]
   192e8:	ldr	r6, [pc, #1760]	; 199d0 <read_boolean_unary_expression@@Base+0x2a40>
   192ec:	ldr	r6, [pc, r6]
   192f0:	ldr	r0, [pc, #1756]	; 199d4 <read_boolean_unary_expression@@Base+0x2a44>
   192f4:	ldr	r1, [pc, #1756]	; 199d8 <read_boolean_unary_expression@@Base+0x2a48>
   192f8:	adds	r2, r6, #4
   192fc:	add	r0, pc, r0
   19300:	adc	r3, r3, #0
   19304:	ldr	r1, [pc, r1]
   19308:	strb	r4, [r1, r6]!
   1930c:	strb	r4, [r1, #3]
   19310:	strb	r4, [r1, #2]
   19314:	strb	r4, [r1, #1]
   19318:	mov	r1, #1
   1931c:	strd	r2, [sl]
   19320:	strb	r1, [r0]
   19324:	sub	sp, fp, #28
   19328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1932c:	ldr	r0, [pc, #1656]	; 199ac <read_boolean_unary_expression@@Base+0x2a1c>
   19330:	adds	r2, r2, #8
   19334:	mov	r1, #0
   19338:	adc	r3, r3, #0
   1933c:	ldr	r0, [pc, r0]
   19340:	mov	r7, r0
   19344:	strb	r1, [r7, r4]!
   19348:	strb	r1, [r7, #3]
   1934c:	strb	r1, [r7, #2]
   19350:	strb	r1, [r7, #1]
   19354:	strd	r2, [sl]
   19358:	ldr	r6, [r9, #4]
   1935c:	ldr	r1, [pc, #1668]	; 199e8 <read_boolean_unary_expression@@Base+0x2a58>
   19360:	adds	ip, r4, #8
   19364:	adc	r7, r5, #0
   19368:	ldr	r1, [pc, r1]
   1936c:	subs	r1, r1, ip
   19370:	sbcs	r1, r6, r7
   19374:	bcs	194c0 <read_boolean_unary_expression@@Base+0x2530>
   19378:	mov	r1, #7
   1937c:	orr	r1, r1, #131072	; 0x20000
   19380:	adds	r1, r4, r1
   19384:	adc	r2, r5, #0
   19388:	mvn	r3, #0
   1938c:	and	r5, r2, r3
   19390:	mov	r2, #16646144	; 0xfe0000
   19394:	orr	r2, r2, #-16777216	; 0xff000000
   19398:	ldr	r6, [pc, #1612]	; 199ec <read_boolean_unary_expression@@Base+0x2a5c>
   1939c:	and	r4, r1, r2
   193a0:	mov	r1, r4
   193a4:	add	r6, pc, r6
   193a8:	bl	11e94 <realloc@plt>
   193ac:	str	r0, [r6]
   193b0:	strd	r4, [r9]
   193b4:	ldrb	r7, [r8]
   193b8:	ldr	r3, [sl, #4]
   193bc:	ldr	r2, [pc, #1580]	; 199f0 <read_boolean_unary_expression@@Base+0x2a60>
   193c0:	mov	r6, r0
   193c4:	mov	r1, #0
   193c8:	ldr	r2, [pc, r2]
   193cc:	strb	r1, [r6, r2]!
   193d0:	strb	r1, [r6, #3]
   193d4:	strb	r1, [r6, #2]
   193d8:	strb	r1, [r6, #1]
   193dc:	adds	r1, r2, #4
   193e0:	adc	r5, r3, #0
   193e4:	cmp	r7, #1
   193e8:	stm	sl, {r1, r5}
   193ec:	bne	191b0 <read_boolean_unary_expression@@Base+0x2220>
   193f0:	b	194e4 <read_boolean_unary_expression@@Base+0x2554>
   193f4:	mov	r2, r0
   193f8:	mov	r1, #0
   193fc:	strb	r1, [r2, r3]!
   19400:	adds	r6, r3, #4
   19404:	strb	r1, [r2, #3]
   19408:	strb	r1, [r2, #2]
   1940c:	strb	r1, [r2, #1]
   19410:	adc	r1, r5, #0
   19414:	str	r6, [sl]
   19418:	str	r1, [sl, #4]
   1941c:	ldr	r4, [r9, #4]
   19420:	ldr	r2, [pc, #1376]	; 19988 <read_boolean_unary_expression@@Base+0x29f8>
   19424:	adds	ip, r3, #8
   19428:	adc	r7, r5, #0
   1942c:	ldr	r2, [pc, r2]
   19430:	subs	r2, r2, ip
   19434:	sbcs	r2, r4, r7
   19438:	bcs	19584 <read_boolean_unary_expression@@Base+0x25f4>
   1943c:	mov	r1, #7
   19440:	orr	r1, r1, #131072	; 0x20000
   19444:	adds	r1, r3, r1
   19448:	adc	r2, r5, #0
   1944c:	mvn	r3, #0
   19450:	and	r5, r2, r3
   19454:	mov	r2, #16646144	; 0xfe0000
   19458:	orr	r2, r2, #-16777216	; 0xff000000
   1945c:	ldr	r4, [pc, #1320]	; 1998c <read_boolean_unary_expression@@Base+0x29fc>
   19460:	and	r6, r1, r2
   19464:	mov	r1, r6
   19468:	add	r4, pc, r4
   1946c:	bl	11e94 <realloc@plt>
   19470:	str	r6, [r9]
   19474:	str	r5, [r9, #4]
   19478:	str	r0, [r4]
   1947c:	ldrb	r5, [r8]
   19480:	ldr	r1, [sl, #4]
   19484:	ldr	r6, [pc, #1284]	; 19990 <read_boolean_unary_expression@@Base+0x2a00>
   19488:	mov	r3, r0
   1948c:	mov	r2, #0
   19490:	mov	r7, #1
   19494:	ldr	r6, [pc, r6]
   19498:	strb	r2, [r3, r6]!
   1949c:	strb	r2, [r3, #3]
   194a0:	strb	r2, [r3, #2]
   194a4:	strb	r2, [r3, #1]
   194a8:	adds	r2, r6, #4
   194ac:	adc	r3, r1, #0
   194b0:	cmp	r5, #1
   194b4:	strd	r2, [sl]
   194b8:	bne	1907c <read_boolean_unary_expression@@Base+0x20ec>
   194bc:	b	195a8 <read_boolean_unary_expression@@Base+0x2618>
   194c0:	mov	r7, r0
   194c4:	mov	r1, #0
   194c8:	strb	r1, [r7, r2]!
   194cc:	strb	r1, [r7, #3]
   194d0:	strb	r1, [r7, #2]
   194d4:	strb	r1, [r7, #1]
   194d8:	adds	r1, r2, #4
   194dc:	adc	r5, r3, #0
   194e0:	stm	sl, {r1, r5}
   194e4:	ldr	r4, [r9, #4]
   194e8:	ldr	r6, [pc, #1284]	; 199f4 <read_boolean_unary_expression@@Base+0x2a64>
   194ec:	adds	r7, r2, #8
   194f0:	adc	ip, r3, #0
   194f4:	ldr	r6, [pc, r6]
   194f8:	subs	r7, r6, r7
   194fc:	sbcs	r7, r4, ip
   19500:	bcs	1961c <read_boolean_unary_expression@@Base+0x268c>
   19504:	mov	r1, #7
   19508:	orr	r1, r1, #131072	; 0x20000
   1950c:	adds	r1, r2, r1
   19510:	adc	r2, r3, #0
   19514:	mvn	r3, #0
   19518:	and	r5, r2, r3
   1951c:	mov	r2, #16646144	; 0xfe0000
   19520:	orr	r2, r2, #-16777216	; 0xff000000
   19524:	ldr	r4, [pc, #1228]	; 199f8 <read_boolean_unary_expression@@Base+0x2a68>
   19528:	and	r6, r1, r2
   1952c:	mov	r1, r6
   19530:	add	r4, pc, r4
   19534:	bl	11e94 <realloc@plt>
   19538:	str	r6, [r9]
   1953c:	str	r5, [r9, #4]
   19540:	str	r0, [r4]
   19544:	ldrb	r7, [r8]
   19548:	ldr	r5, [sl, #4]
   1954c:	ldr	r1, [pc, #1192]	; 199fc <read_boolean_unary_expression@@Base+0x2a6c>
   19550:	mov	r3, r0
   19554:	mov	r2, #0
   19558:	ldr	r1, [pc, r1]
   1955c:	strb	r2, [r3, r1]!
   19560:	strb	r2, [r3, #3]
   19564:	strb	r2, [r3, #2]
   19568:	strb	r2, [r3, #1]
   1956c:	adds	r2, r1, #4
   19570:	adc	r3, r5, #0
   19574:	cmp	r7, #1
   19578:	strd	r2, [sl]
   1957c:	bne	191d4 <read_boolean_unary_expression@@Base+0x2244>
   19580:	b	19640 <read_boolean_unary_expression@@Base+0x26b0>
   19584:	mov	r3, r0
   19588:	mov	r2, #0
   1958c:	strb	r2, [r3, r6]!
   19590:	strb	r2, [r3, #3]
   19594:	strb	r2, [r3, #2]
   19598:	strb	r2, [r3, #1]
   1959c:	adds	r2, r6, #4
   195a0:	adc	r3, r1, #0
   195a4:	strd	r2, [sl]
   195a8:	ldr	r4, [r9, #4]
   195ac:	ldr	r5, [pc, #992]	; 19994 <read_boolean_unary_expression@@Base+0x2a04>
   195b0:	adds	lr, r6, #8
   195b4:	adc	ip, r1, #0
   195b8:	mov	r7, #1
   195bc:	ldr	r5, [pc, r5]
   195c0:	subs	r5, r5, lr
   195c4:	sbcs	r5, r4, ip
   195c8:	bcs	1907c <read_boolean_unary_expression@@Base+0x20ec>
   195cc:	mov	r2, #7
   195d0:	orr	r2, r2, #131072	; 0x20000
   195d4:	adds	r2, r6, r2
   195d8:	adc	r1, r1, #0
   195dc:	mvn	r3, #0
   195e0:	and	r5, r1, r3
   195e4:	mov	r1, #16646144	; 0xfe0000
   195e8:	orr	r1, r1, #-16777216	; 0xff000000
   195ec:	ldr	r4, [pc, #932]	; 19998 <read_boolean_unary_expression@@Base+0x2a08>
   195f0:	and	r6, r2, r1
   195f4:	mov	r1, r6
   195f8:	add	r4, pc, r4
   195fc:	bl	11e94 <realloc@plt>
   19600:	str	r6, [r9]
   19604:	str	r5, [r9, #4]
   19608:	str	r0, [r4]
   1960c:	ldr	r3, [sl, #4]
   19610:	ldr	r2, [pc, #900]	; 1999c <read_boolean_unary_expression@@Base+0x2a0c>
   19614:	ldr	r2, [pc, r2]
   19618:	b	1907c <read_boolean_unary_expression@@Base+0x20ec>
   1961c:	mov	r3, r0
   19620:	mov	r2, #0
   19624:	strb	r2, [r3, r1]!
   19628:	strb	r2, [r3, #3]
   1962c:	strb	r2, [r3, #2]
   19630:	strb	r2, [r3, #1]
   19634:	adds	r2, r1, #4
   19638:	adc	r3, r5, #0
   1963c:	strd	r2, [sl]
   19640:	ldr	r4, [r9, #4]
   19644:	ldr	r6, [pc, #948]	; 19a00 <read_boolean_unary_expression@@Base+0x2a70>
   19648:	adds	r7, r1, #8
   1964c:	adc	ip, r5, #0
   19650:	ldr	r6, [pc, r6]
   19654:	subs	r7, r6, r7
   19658:	sbcs	r7, r4, ip
   1965c:	bcs	19708 <read_boolean_unary_expression@@Base+0x2778>
   19660:	mov	r2, #7
   19664:	orr	r2, r2, #131072	; 0x20000
   19668:	adds	r1, r1, r2
   1966c:	adc	r2, r5, #0
   19670:	mvn	r3, #0
   19674:	and	r5, r2, r3
   19678:	mov	r2, #16646144	; 0xfe0000
   1967c:	orr	r2, r2, #-16777216	; 0xff000000
   19680:	ldr	r4, [pc, #892]	; 19a04 <read_boolean_unary_expression@@Base+0x2a74>
   19684:	and	r6, r1, r2
   19688:	mov	r1, r6
   1968c:	add	r4, pc, r4
   19690:	bl	11e94 <realloc@plt>
   19694:	str	r6, [r9]
   19698:	str	r5, [r9, #4]
   1969c:	str	r0, [r4]
   196a0:	ldrb	r7, [r8]
   196a4:	ldr	r3, [sl, #4]
   196a8:	ldr	r2, [pc, #856]	; 19a08 <read_boolean_unary_expression@@Base+0x2a78>
   196ac:	mov	r6, r0
   196b0:	mov	r1, #0
   196b4:	ldr	r2, [pc, r2]
   196b8:	strb	r1, [r6, r2]!
   196bc:	strb	r1, [r6, #3]
   196c0:	strb	r1, [r6, #2]
   196c4:	strb	r1, [r6, #1]
   196c8:	adds	r1, r2, #4
   196cc:	adc	r5, r3, #0
   196d0:	cmp	r7, #1
   196d4:	stm	sl, {r1, r5}
   196d8:	bne	191f8 <read_boolean_unary_expression@@Base+0x2268>
   196dc:	b	1972c <read_boolean_unary_expression@@Base+0x279c>
   196e0:	ldr	r1, [pc, #616]	; 19950 <read_boolean_unary_expression@@Base+0x29c0>
   196e4:	add	r1, pc, r1
   196e8:	ldr	r0, [pc, #600]	; 19948 <read_boolean_unary_expression@@Base+0x29b8>
   196ec:	ldr	r0, [pc, r0]
   196f0:	ldr	r0, [r0]
   196f4:	ldr	r2, [pc, #592]	; 1994c <read_boolean_unary_expression@@Base+0x29bc>
   196f8:	ldr	r2, [pc, r2]
   196fc:	sub	sp, fp, #28
   19700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19704:	b	11f30 <fprintf@plt>
   19708:	mov	r7, r0
   1970c:	mov	r1, #0
   19710:	strb	r1, [r7, r2]!
   19714:	strb	r1, [r7, #3]
   19718:	strb	r1, [r7, #2]
   1971c:	strb	r1, [r7, #1]
   19720:	adds	r1, r2, #4
   19724:	adc	r5, r3, #0
   19728:	stm	sl, {r1, r5}
   1972c:	ldr	r4, [r9, #4]
   19730:	ldr	r6, [pc, #724]	; 19a0c <read_boolean_unary_expression@@Base+0x2a7c>
   19734:	adds	r7, r2, #8
   19738:	adc	ip, r3, #0
   1973c:	ldr	r6, [pc, r6]
   19740:	subs	r7, r6, r7
   19744:	sbcs	r7, r4, ip
   19748:	bcs	197d0 <read_boolean_unary_expression@@Base+0x2840>
   1974c:	mov	r1, #7
   19750:	orr	r1, r1, #131072	; 0x20000
   19754:	adds	r1, r2, r1
   19758:	adc	r2, r3, #0
   1975c:	mvn	r3, #0
   19760:	and	r5, r2, r3
   19764:	mov	r2, #16646144	; 0xfe0000
   19768:	orr	r2, r2, #-16777216	; 0xff000000
   1976c:	ldr	r4, [pc, #668]	; 19a10 <read_boolean_unary_expression@@Base+0x2a80>
   19770:	and	r6, r1, r2
   19774:	mov	r1, r6
   19778:	add	r4, pc, r4
   1977c:	bl	11e94 <realloc@plt>
   19780:	str	r6, [r9]
   19784:	str	r5, [r9, #4]
   19788:	str	r0, [r4]
   1978c:	ldrb	r2, [r8]
   19790:	ldr	r5, [sl, #4]
   19794:	ldr	r1, [pc, #632]	; 19a14 <read_boolean_unary_expression@@Base+0x2a84>
   19798:	mov	r7, r0
   1979c:	mov	r3, #0
   197a0:	ldr	r1, [pc, r1]
   197a4:	adds	r4, r1, #4
   197a8:	strb	r3, [r7, r1]!
   197ac:	strb	r3, [r7, #3]
   197b0:	strb	r3, [r7, #2]
   197b4:	strb	r3, [r7, #1]
   197b8:	adc	r3, r5, #0
   197bc:	cmp	r2, #1
   197c0:	str	r4, [sl]
   197c4:	str	r3, [sl, #4]
   197c8:	bne	19220 <read_boolean_unary_expression@@Base+0x2290>
   197cc:	b	197f8 <read_boolean_unary_expression@@Base+0x2868>
   197d0:	mov	r3, r0
   197d4:	mov	r2, #0
   197d8:	strb	r2, [r3, r1]!
   197dc:	adds	r4, r1, #4
   197e0:	strb	r2, [r3, #3]
   197e4:	strb	r2, [r3, #2]
   197e8:	strb	r2, [r3, #1]
   197ec:	adc	r3, r5, #0
   197f0:	str	r4, [sl]
   197f4:	str	r3, [sl, #4]
   197f8:	ldr	r6, [r9, #4]
   197fc:	ldr	r2, [pc, #532]	; 19a18 <read_boolean_unary_expression@@Base+0x2a88>
   19800:	adds	ip, r1, #8
   19804:	adc	r7, r5, #0
   19808:	ldr	r2, [pc, r2]
   1980c:	subs	r2, r2, ip
   19810:	sbcs	r2, r6, r7
   19814:	bcs	1989c <read_boolean_unary_expression@@Base+0x290c>
   19818:	mov	r2, #7
   1981c:	orr	r2, r2, #131072	; 0x20000
   19820:	adds	r1, r1, r2
   19824:	adc	r2, r5, #0
   19828:	mvn	r3, #0
   1982c:	and	r5, r2, r3
   19830:	mov	r2, #16646144	; 0xfe0000
   19834:	orr	r2, r2, #-16777216	; 0xff000000
   19838:	ldr	r4, [pc, #368]	; 199b0 <read_boolean_unary_expression@@Base+0x2a20>
   1983c:	and	r6, r1, r2
   19840:	mov	r1, r6
   19844:	add	r4, pc, r4
   19848:	bl	11e94 <realloc@plt>
   1984c:	str	r6, [r9]
   19850:	str	r5, [r9, #4]
   19854:	str	r0, [r4]
   19858:	ldrb	r7, [r8]
   1985c:	ldr	r3, [sl, #4]
   19860:	ldr	r4, [pc, #332]	; 199b4 <read_boolean_unary_expression@@Base+0x2a24>
   19864:	mov	r2, r0
   19868:	mov	r1, #0
   1986c:	ldr	r4, [pc, r4]
   19870:	strb	r1, [r2, r4]!
   19874:	strb	r1, [r2, #3]
   19878:	strb	r1, [r2, #2]
   1987c:	strb	r1, [r2, #1]
   19880:	adds	r2, r4, #4
   19884:	adc	r1, r3, #0
   19888:	cmp	r7, #0
   1988c:	str	r2, [sl]
   19890:	str	r1, [sl, #4]
   19894:	beq	19248 <read_boolean_unary_expression@@Base+0x22b8>
   19898:	b	198c4 <read_boolean_unary_expression@@Base+0x2934>
   1989c:	mov	r2, r0
   198a0:	mov	r1, #0
   198a4:	strb	r1, [r2, r4]!
   198a8:	strb	r1, [r2, #3]
   198ac:	strb	r1, [r2, #2]
   198b0:	strb	r1, [r2, #1]
   198b4:	adds	r2, r4, #4
   198b8:	adc	r1, r3, #0
   198bc:	str	r2, [sl]
   198c0:	str	r1, [sl, #4]
   198c4:	ldr	r5, [r9, #4]
   198c8:	ldr	r6, [pc, #232]	; 199b8 <read_boolean_unary_expression@@Base+0x2a28>
   198cc:	adds	r7, r4, #8
   198d0:	adc	ip, r3, #0
   198d4:	ldr	r6, [pc, r6]
   198d8:	subs	r7, r6, r7
   198dc:	sbcs	r7, r5, ip
   198e0:	bcs	19248 <read_boolean_unary_expression@@Base+0x22b8>
   198e4:	mov	r1, #7
   198e8:	orr	r1, r1, #131072	; 0x20000
   198ec:	adds	r1, r4, r1
   198f0:	adc	r2, r3, #0
   198f4:	mvn	r3, #0
   198f8:	and	r7, r2, r3
   198fc:	mov	r2, #16646144	; 0xfe0000
   19900:	orr	r2, r2, #-16777216	; 0xff000000
   19904:	ldr	r5, [pc, #176]	; 199bc <read_boolean_unary_expression@@Base+0x2a2c>
   19908:	and	r6, r1, r2
   1990c:	mov	r1, r6
   19910:	add	r5, pc, r5
   19914:	bl	11e94 <realloc@plt>
   19918:	strd	r6, [r9]
   1991c:	str	r0, [r5]
   19920:	ldr	r1, [sl, #4]
   19924:	ldr	r2, [pc, #148]	; 199c0 <read_boolean_unary_expression@@Base+0x2a30>
   19928:	ldr	r2, [pc, r2]
   1992c:	b	19248 <read_boolean_unary_expression@@Base+0x22b8>
   19930:	strdeq	r4, [r1], -r0
   19934:	strdeq	r4, [r1], -r0
   19938:	andeq	r4, r1, r4, ror #1
   1993c:	andeq	r4, r1, r8, asr #1
   19940:	strdeq	r3, [r1], -ip
   19944:	andeq	r2, r0, lr, lsr #24
   19948:	andeq	r2, r1, r8, asr #19
   1994c:			; <UNDEFINED> instruction: 0x000136b0
   19950:	muleq	r0, r7, r3
   19954:	strdeq	r3, [r1], -ip
   19958:	strheq	r4, [r1], -r8
   1995c:	andeq	r4, r1, ip, lsr #1
   19960:	andeq	r3, r1, r0, lsr #31
   19964:	andeq	r4, r1, r0, rrx
   19968:	andeq	r4, r1, ip, asr r0
   1996c:	andeq	r4, r1, ip, lsr r0
   19970:	andeq	r3, r1, r8, ror pc
   19974:	andeq	r3, r1, r8, lsr pc
   19978:	andeq	r3, r1, ip, lsl pc
   1997c:	andeq	r3, r1, r8, lsr #29
   19980:	andeq	r3, r1, r8, ror #28
   19984:	andeq	r3, r1, ip, asr #28
   19988:	andeq	r3, r1, ip, lsl #19
   1998c:	andeq	r3, r1, ip, asr #18
   19990:	andeq	r3, r1, ip, lsr #18
   19994:	strdeq	r3, [r1], -ip
   19998:			; <UNDEFINED> instruction: 0x000137bc
   1999c:	andeq	r3, r1, ip, lsr #15
   199a0:	andeq	r3, r1, r4, asr #24
   199a4:	strdeq	r3, [r1], -ip
   199a8:	strdeq	r3, [r1], -r0
   199ac:	andeq	r3, r1, r8, ror sl
   199b0:	andeq	r3, r1, r0, ror r5
   199b4:	andeq	r3, r1, r4, asr r5
   199b8:	andeq	r3, r1, r4, ror #9
   199bc:	andeq	r3, r1, r4, lsr #9
   199c0:	muleq	r1, r8, r4
   199c4:	andeq	r3, r1, ip, lsr #22
   199c8:	andeq	r3, r1, r0, lsr #22
   199cc:	andeq	r3, r1, r0, ror #21
   199d0:	ldrdeq	r3, [r1], -r4
   199d4:	andeq	r3, r1, ip, asr #21
   199d8:			; <UNDEFINED> instruction: 0x00013ab0
   199dc:	andeq	r3, r1, ip, lsr #25
   199e0:	andeq	r3, r1, r8, lsr #25
   199e4:	andeq	r3, r1, ip, lsl #25
   199e8:	andeq	r3, r1, r0, asr sl
   199ec:	andeq	r3, r1, r0, lsl sl
   199f0:	strdeq	r3, [r1], -r8
   199f4:	andeq	r3, r1, r4, asr #17
   199f8:	andeq	r3, r1, r4, lsl #17
   199fc:	andeq	r3, r1, r8, ror #16
   19a00:	andeq	r3, r1, r8, ror #14
   19a04:	andeq	r3, r1, r8, lsr #14
   19a08:	andeq	r3, r1, ip, lsl #14
   19a0c:	andeq	r3, r1, ip, ror r6
   19a10:	andeq	r3, r1, ip, lsr r6
   19a14:	andeq	r3, r1, r0, lsr #12
   19a18:			; <UNDEFINED> instruction: 0x000135b0
   19a1c:	ldr	r0, [pc, #508]	; 19c20 <read_boolean_unary_expression@@Base+0x2c90>
   19a20:	ldr	r0, [pc, r0]
   19a24:	cmp	r0, #0
   19a28:	beq	19bd8 <read_boolean_unary_expression@@Base+0x2c48>
   19a2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19a30:	add	fp, sp, #24
   19a34:	ldr	r9, [pc, #488]	; 19c24 <read_boolean_unary_expression@@Base+0x2c94>
   19a38:	mov	r4, #0
   19a3c:	mov	r1, #0
   19a40:	add	r9, pc, r9
   19a44:	ldrb	r0, [r9]
   19a48:	cmp	r0, #1
   19a4c:	bne	19ad0 <read_boolean_unary_expression@@Base+0x2b40>
   19a50:	ldr	r0, [pc, #464]	; 19c28 <read_boolean_unary_expression@@Base+0x2c98>
   19a54:	ldr	r8, [pc, #464]	; 19c2c <read_boolean_unary_expression@@Base+0x2c9c>
   19a58:	mov	r1, #1
   19a5c:	add	r0, pc, r0
   19a60:	add	r8, pc, r8
   19a64:	ldr	r0, [r0, #4]
   19a68:	ldr	r2, [pc, #448]	; 19c30 <read_boolean_unary_expression@@Base+0x2ca0>
   19a6c:	ldr	r2, [pc, r2]
   19a70:	ldr	r7, [r8, #4]
   19a74:	ldr	r5, [pc, #440]	; 19c34 <read_boolean_unary_expression@@Base+0x2ca4>
   19a78:	adds	r3, r2, #8
   19a7c:	adc	r6, r0, #0
   19a80:	ldr	r5, [pc, r5]
   19a84:	subs	r3, r5, r3
   19a88:	sbcs	r3, r7, r6
   19a8c:	bcs	19ad0 <read_boolean_unary_expression@@Base+0x2b40>
   19a90:	mov	r1, #7
   19a94:	orr	r1, r1, #131072	; 0x20000
   19a98:	adds	r1, r2, r1
   19a9c:	adc	r7, r0, #0
   19aa0:	mov	r0, #16646144	; 0xfe0000
   19aa4:	orr	r0, r0, #-16777216	; 0xff000000
   19aa8:	ldr	r5, [pc, #392]	; 19c38 <read_boolean_unary_expression@@Base+0x2ca8>
   19aac:	and	r6, r1, r0
   19ab0:	ldr	r0, [pc, #388]	; 19c3c <read_boolean_unary_expression@@Base+0x2cac>
   19ab4:	mov	r1, r6
   19ab8:	add	r5, pc, r5
   19abc:	ldr	r0, [pc, r0]
   19ac0:	bl	11e94 <realloc@plt>
   19ac4:	ldrb	r1, [r9]
   19ac8:	strd	r6, [r8]
   19acc:	str	r0, [r5]
   19ad0:	ldr	r3, [pc, #360]	; 19c40 <read_boolean_unary_expression@@Base+0x2cb0>
   19ad4:	ldr	r2, [pc, #360]	; 19c44 <read_boolean_unary_expression@@Base+0x2cb4>
   19ad8:	add	r3, pc, r3
   19adc:	ldr	r2, [pc, r2]
   19ae0:	ldr	r0, [pc, #352]	; 19c48 <read_boolean_unary_expression@@Base+0x2cb8>
   19ae4:	ldr	r0, [pc, r0]
   19ae8:	ldr	r7, [r3, #4]
   19aec:	mov	r6, r0
   19af0:	strb	r4, [r6, r2]!
   19af4:	adds	r2, r2, #8
   19af8:	adc	r5, r7, #0
   19afc:	strb	r4, [r6, #5]
   19b00:	strb	r4, [r6, #3]
   19b04:	strb	r4, [r6, #2]
   19b08:	strb	r4, [r6, #1]
   19b0c:	strb	r4, [r6, #4]!
   19b10:	cmp	r1, #0
   19b14:	strb	r4, [r6, #3]
   19b18:	strb	r4, [r6, #2]
   19b1c:	stm	r3, {r2, r5}
   19b20:	beq	19b48 <read_boolean_unary_expression@@Base+0x2bb8>
   19b24:	ldr	r3, [pc, #288]	; 19c4c <read_boolean_unary_expression@@Base+0x2cbc>
   19b28:	mov	r1, r2
   19b2c:	mov	r2, #1
   19b30:	ldr	r3, [pc, r3]
   19b34:	bl	11ea0 <fwrite@plt>
   19b38:	ldr	r0, [pc, #272]	; 19c50 <read_boolean_unary_expression@@Base+0x2cc0>
   19b3c:	ldr	r0, [pc, r0]
   19b40:	bl	11e4c <free@plt>
   19b44:	b	19b94 <read_boolean_unary_expression@@Base+0x2c04>
   19b48:	ldr	r1, [pc, #260]	; 19c54 <read_boolean_unary_expression@@Base+0x2cc4>
   19b4c:	mov	r2, #4
   19b50:	ldr	r1, [pc, r1]
   19b54:	bl	11fc0 <msync@plt>
   19b58:	cmn	r0, #1
   19b5c:	beq	19be4 <read_boolean_unary_expression@@Base+0x2c54>
   19b60:	ldr	r1, [pc, #252]	; 19c64 <read_boolean_unary_expression@@Base+0x2cd4>
   19b64:	ldr	r1, [pc, r1]
   19b68:	ldr	r0, [pc, #248]	; 19c68 <read_boolean_unary_expression@@Base+0x2cd8>
   19b6c:	ldr	r0, [pc, r0]
   19b70:	bl	11f9c <munmap@plt>
   19b74:	ldr	r0, [pc, #240]	; 19c6c <read_boolean_unary_expression@@Base+0x2cdc>
   19b78:	ldr	r1, [pc, #240]	; 19c70 <read_boolean_unary_expression@@Base+0x2ce0>
   19b7c:	mov	r2, #0
   19b80:	add	r0, pc, r0
   19b84:	add	r1, pc, r1
   19b88:	str	r2, [r0]
   19b8c:	str	r2, [r0, #4]
   19b90:	str	r2, [r1]
   19b94:	ldr	r0, [pc, #216]	; 19c74 <read_boolean_unary_expression@@Base+0x2ce4>
   19b98:	ldr	r0, [pc, r0]
   19b9c:	bl	11e40 <fflush@plt>
   19ba0:	ldr	r0, [pc, #208]	; 19c78 <read_boolean_unary_expression@@Base+0x2ce8>
   19ba4:	ldr	r0, [pc, r0]
   19ba8:	bl	1a124 <__gcov_flush@@Base+0x30c>
   19bac:	ldr	r0, [pc, #200]	; 19c7c <read_boolean_unary_expression@@Base+0x2cec>
   19bb0:	ldr	r0, [pc, r0]
   19bb4:	bl	11f84 <fclose@plt>
   19bb8:	ldr	r0, [pc, #192]	; 19c80 <read_boolean_unary_expression@@Base+0x2cf0>
   19bbc:	ldr	r1, [pc, #192]	; 19c84 <read_boolean_unary_expression@@Base+0x2cf4>
   19bc0:	mov	r2, #0
   19bc4:	add	r0, pc, r0
   19bc8:	add	r1, pc, r1
   19bcc:	str	r2, [r0]
   19bd0:	str	r2, [r1]
   19bd4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19bd8:	ldr	r0, [pc, #168]	; 19c88 <read_boolean_unary_expression@@Base+0x2cf8>
   19bdc:	ldr	r0, [pc, r0]
   19be0:	b	11e4c <free@plt>
   19be4:	bl	11f3c <__errno_location@plt>
   19be8:	ldr	r1, [pc, #104]	; 19c58 <read_boolean_unary_expression@@Base+0x2cc8>
   19bec:	ldr	r1, [pc, r1]
   19bf0:	ldr	r0, [r0]
   19bf4:	ldr	r4, [r1]
   19bf8:	ldr	r5, [pc, #92]	; 19c5c <read_boolean_unary_expression@@Base+0x2ccc>
   19bfc:	ldr	r5, [pc, r5]
   19c00:	bl	11ee8 <strerror@plt>
   19c04:	ldr	r1, [pc, #84]	; 19c60 <read_boolean_unary_expression@@Base+0x2cd0>
   19c08:	mov	r3, r0
   19c0c:	mov	r0, r4
   19c10:	add	r1, pc, r1
   19c14:	mov	r2, r5
   19c18:	bl	11f30 <fprintf@plt>
   19c1c:	b	19b60 <read_boolean_unary_expression@@Base+0x2bd0>
   19c20:	muleq	r1, r0, r3
   19c24:	andeq	r3, r1, ip, ror #6
   19c28:	andeq	r3, r1, r4, ror #6
   19c2c:	andeq	r3, r1, r8, asr r3
   19c30:	andeq	r3, r1, r4, asr r3
   19c34:	andeq	r3, r1, r8, lsr r3
   19c38:	strdeq	r3, [r1], -ip
   19c3c:	strdeq	r3, [r1], -r8
   19c40:	andeq	r3, r1, r8, ror #5
   19c44:	andeq	r3, r1, r4, ror #5
   19c48:	ldrdeq	r3, [r1], -r0
   19c4c:	andeq	r3, r1, r0, lsl #5
   19c50:	andeq	r3, r1, r8, ror r2
   19c54:	andeq	r3, r1, r8, lsl #5
   19c58:	andeq	r2, r1, r8, asr #9
   19c5c:	andeq	r3, r1, ip, lsr #3
   19c60:	ldrdeq	r1, [r0], -r9
   19c64:	andeq	r3, r1, r4, ror r2
   19c68:	andeq	r3, r1, r8, asr #4
   19c6c:	andeq	r3, r1, r8, asr r2
   19c70:	andeq	r3, r1, r0, lsr r2
   19c74:	andeq	r3, r1, r8, lsl r2
   19c78:	andeq	r2, r1, r0, lsr #10
   19c7c:	andeq	r3, r1, r0, lsl #4
   19c80:	andeq	r3, r1, ip, ror #3
   19c84:	andeq	r3, r1, ip, ror #3
   19c88:	andeq	r3, r1, ip, asr #3
   19c8c:	push	{r4, sl, fp, lr}
   19c90:	add	fp, sp, #8
   19c94:	mov	r4, r0
   19c98:	mov	r0, #12
   19c9c:	bl	11ed0 <malloc@plt>
   19ca0:	ldr	r1, [pc, #60]	; 19ce4 <read_boolean_unary_expression@@Base+0x2d54>
   19ca4:	mov	r2, #0
   19ca8:	add	r1, pc, r1
   19cac:	stm	r0, {r1, r4}
   19cb0:	str	r2, [r0, #8]
   19cb4:	ldr	r1, [pc, #44]	; 19ce8 <read_boolean_unary_expression@@Base+0x2d58>
   19cb8:	ldr	r1, [pc, r1]
   19cbc:	mov	r2, r1
   19cc0:	ldr	r3, [r2], #4
   19cc4:	ldr	r4, [r2]
   19cc8:	cmp	r3, #0
   19ccc:	mov	r3, r2
   19cd0:	addne	r3, r4, #8
   19cd4:	moveq	r2, r1
   19cd8:	str	r0, [r3]
   19cdc:	str	r0, [r2]
   19ce0:	pop	{r4, sl, fp, pc}
   19ce4:	andeq	r3, r1, r4, lsr #2
   19ce8:	strdeq	r2, [r1], -r8
   19cec:	push	{r4, r5, fp, lr}
   19cf0:	add	fp, sp, #8
   19cf4:	ldr	r0, [pc, #56]	; 19d34 <read_boolean_unary_expression@@Base+0x2da4>
   19cf8:	ldr	r0, [pc, r0]
   19cfc:	ldr	r4, [r0]
   19d00:	cmp	r4, #0
   19d04:	beq	19d30 <read_boolean_unary_expression@@Base+0x2da0>
   19d08:	ldr	r5, [pc, #40]	; 19d38 <read_boolean_unary_expression@@Base+0x2da8>
   19d0c:	add	r5, pc, r5
   19d10:	ldr	r0, [r4]
   19d14:	cmp	r0, r5
   19d18:	bne	19d24 <read_boolean_unary_expression@@Base+0x2d94>
   19d1c:	ldr	r0, [r4, #4]
   19d20:	blx	r0
   19d24:	ldr	r4, [r4, #8]
   19d28:	cmp	r4, #0
   19d2c:	bne	19d10 <read_boolean_unary_expression@@Base+0x2d80>
   19d30:	pop	{r4, r5, fp, pc}
   19d34:			; <UNDEFINED> instruction: 0x000123b8
   19d38:	andeq	r3, r1, r0, asr #1
   19d3c:	push	{r4, r5, r6, r7, fp, lr}
   19d40:	add	fp, sp, #16
   19d44:	ldr	r4, [pc, #100]	; 19db0 <read_boolean_unary_expression@@Base+0x2e20>
   19d48:	ldr	r4, [pc, r4]
   19d4c:	ldr	r0, [r4]
   19d50:	cmp	r0, #0
   19d54:	beq	19dac <read_boolean_unary_expression@@Base+0x2e1c>
   19d58:	ldr	r5, [pc, #84]	; 19db4 <read_boolean_unary_expression@@Base+0x2e24>
   19d5c:	mov	r6, #0
   19d60:	add	r5, pc, r5
   19d64:	ldr	r1, [r0]
   19d68:	ldr	r7, [r0, #8]
   19d6c:	cmp	r1, r5
   19d70:	beq	19d7c <read_boolean_unary_expression@@Base+0x2dec>
   19d74:	mov	r6, r0
   19d78:	b	19da0 <read_boolean_unary_expression@@Base+0x2e10>
   19d7c:	ldr	r1, [r4]
   19d80:	cmp	r0, r1
   19d84:	streq	r7, [r4]
   19d88:	ldr	r1, [r4, #4]
   19d8c:	cmp	r0, r1
   19d90:	streq	r6, [r4, #4]
   19d94:	cmp	r6, #0
   19d98:	strne	r7, [r6, #8]
   19d9c:	bl	11e4c <free@plt>
   19da0:	mov	r0, r7
   19da4:	cmp	r7, #0
   19da8:	bne	19d64 <read_boolean_unary_expression@@Base+0x2dd4>
   19dac:	pop	{r4, r5, r6, r7, fp, pc}
   19db0:	andeq	r2, r1, r8, ror #6
   19db4:	andeq	r3, r1, ip, rrx
   19db8:	push	{r4, sl, fp, lr}
   19dbc:	add	fp, sp, #8
   19dc0:	mov	r4, r0
   19dc4:	mov	r0, #12
   19dc8:	bl	11ed0 <malloc@plt>
   19dcc:	ldr	r1, [pc, #60]	; 19e10 <read_boolean_unary_expression@@Base+0x2e80>
   19dd0:	mov	r2, #0
   19dd4:	add	r1, pc, r1
   19dd8:	stm	r0, {r1, r4}
   19ddc:	str	r2, [r0, #8]
   19de0:	ldr	r1, [pc, #44]	; 19e14 <read_boolean_unary_expression@@Base+0x2e84>
   19de4:	ldr	r1, [pc, r1]
   19de8:	mov	r2, r1
   19dec:	ldr	r3, [r2], #4
   19df0:	ldr	r4, [r2]
   19df4:	cmp	r3, #0
   19df8:	mov	r3, r2
   19dfc:	addne	r3, r4, #8
   19e00:	moveq	r2, r1
   19e04:	str	r0, [r3]
   19e08:	str	r0, [r2]
   19e0c:	pop	{r4, sl, fp, pc}
   19e10:	strdeq	r2, [r1], -r8
   19e14:	andeq	r2, r1, r8, asr #5

00019e18 <__gcov_flush@@Base>:
   19e18:	push	{r4, sl, fp, lr}
   19e1c:	add	fp, sp, #8
   19e20:	ldr	r0, [pc, #36]	; 19e4c <__gcov_flush@@Base+0x34>
   19e24:	ldr	r0, [pc, r0]
   19e28:	ldr	r4, [r0]
   19e2c:	cmp	r4, #0
   19e30:	beq	19e48 <__gcov_flush@@Base+0x30>
   19e34:	ldr	r0, [r4, #4]
   19e38:	blx	r0
   19e3c:	ldr	r4, [r4, #8]
   19e40:	cmp	r4, #0
   19e44:	bne	19e34 <__gcov_flush@@Base+0x1c>
   19e48:	pop	{r4, sl, fp, pc}
   19e4c:	andeq	r2, r1, r8, lsl #5
   19e50:	push	{r4, r5, r6, r7, fp, lr}
   19e54:	add	fp, sp, #16
   19e58:	ldr	r4, [pc, #100]	; 19ec4 <__gcov_flush@@Base+0xac>
   19e5c:	ldr	r4, [pc, r4]
   19e60:	ldr	r0, [r4]
   19e64:	cmp	r0, #0
   19e68:	beq	19ec0 <__gcov_flush@@Base+0xa8>
   19e6c:	ldr	r5, [pc, #84]	; 19ec8 <__gcov_flush@@Base+0xb0>
   19e70:	mov	r6, #0
   19e74:	add	r5, pc, r5
   19e78:	ldr	r1, [r0]
   19e7c:	ldr	r7, [r0, #8]
   19e80:	cmp	r1, r5
   19e84:	beq	19e90 <__gcov_flush@@Base+0x78>
   19e88:	mov	r6, r0
   19e8c:	b	19eb4 <__gcov_flush@@Base+0x9c>
   19e90:	ldr	r1, [r4]
   19e94:	cmp	r0, r1
   19e98:	streq	r7, [r4]
   19e9c:	ldr	r1, [r4, #4]
   19ea0:	cmp	r0, r1
   19ea4:	streq	r6, [r4, #4]
   19ea8:	cmp	r6, #0
   19eac:	strne	r7, [r6, #8]
   19eb0:	bl	11e4c <free@plt>
   19eb4:	mov	r0, r7
   19eb8:	cmp	r7, #0
   19ebc:	bne	19e78 <__gcov_flush@@Base+0x60>
   19ec0:	pop	{r4, r5, r6, r7, fp, pc}
   19ec4:	andeq	r2, r1, r0, asr r2
   19ec8:	andeq	r2, r1, r8, asr pc
   19ecc:	push	{r4, r5, fp, lr}
   19ed0:	add	fp, sp, #8
   19ed4:	mov	r4, r1
   19ed8:	cmp	r0, #0
   19edc:	beq	19f2c <__gcov_flush@@Base+0x114>
   19ee0:	mov	r5, r0
   19ee4:	mov	r0, #12
   19ee8:	bl	11ed0 <malloc@plt>
   19eec:	ldr	r1, [pc, #204]	; 19fc0 <__gcov_flush@@Base+0x1a8>
   19ef0:	mov	r2, #0
   19ef4:	add	r1, pc, r1
   19ef8:	stm	r0, {r1, r5}
   19efc:	str	r2, [r0, #8]
   19f00:	ldr	r1, [pc, #188]	; 19fc4 <__gcov_flush@@Base+0x1ac>
   19f04:	ldr	r1, [pc, r1]
   19f08:	mov	r2, r1
   19f0c:	ldr	r3, [r2], #4
   19f10:	ldr	r5, [r2]
   19f14:	cmp	r3, #0
   19f18:	mov	r3, r2
   19f1c:	addne	r3, r5, #8
   19f20:	moveq	r2, r1
   19f24:	str	r0, [r3]
   19f28:	str	r0, [r2]
   19f2c:	cmp	r4, #0
   19f30:	beq	19f7c <__gcov_flush@@Base+0x164>
   19f34:	mov	r0, #12
   19f38:	bl	11ed0 <malloc@plt>
   19f3c:	ldr	r1, [pc, #132]	; 19fc8 <__gcov_flush@@Base+0x1b0>
   19f40:	mov	r2, #0
   19f44:	add	r1, pc, r1
   19f48:	stm	r0, {r1, r4}
   19f4c:	str	r2, [r0, #8]
   19f50:	ldr	r1, [pc, #116]	; 19fcc <__gcov_flush@@Base+0x1b4>
   19f54:	ldr	r1, [pc, r1]
   19f58:	mov	r2, r1
   19f5c:	ldr	r3, [r2], #4
   19f60:	ldr	r5, [r2]
   19f64:	cmp	r3, #0
   19f68:	mov	r3, r2
   19f6c:	addne	r3, r5, #8
   19f70:	moveq	r2, r1
   19f74:	str	r0, [r3]
   19f78:	str	r0, [r2]
   19f7c:	ldr	r1, [pc, #76]	; 19fd0 <__gcov_flush@@Base+0x1b8>
   19f80:	add	r1, pc, r1
   19f84:	ldrb	r0, [r1]
   19f88:	cmp	r0, #0
   19f8c:	popne	{r4, r5, fp, pc}
   19f90:	ldr	r0, [pc, #60]	; 19fd4 <__gcov_flush@@Base+0x1bc>
   19f94:	mov	r2, #1
   19f98:	strb	r2, [r1]
   19f9c:	add	r0, pc, r0
   19fa0:	bl	1a480 <__libc_csu_fini@@Base+0x4>
   19fa4:	ldr	r0, [pc, #44]	; 19fd8 <__gcov_flush@@Base+0x1c0>
   19fa8:	add	r0, pc, r0
   19fac:	bl	1a480 <__libc_csu_fini@@Base+0x4>
   19fb0:	ldr	r0, [pc, #36]	; 19fdc <__gcov_flush@@Base+0x1c4>
   19fb4:	add	r0, pc, r0
   19fb8:	pop	{r4, r5, fp, lr}
   19fbc:	b	1a480 <__libc_csu_fini@@Base+0x4>
   19fc0:	ldrdeq	r2, [r1], -r8
   19fc4:	andeq	r2, r1, ip, lsr #3
   19fc8:	andeq	r2, r1, r8, lsl #29
   19fcc:	andeq	r2, r1, r8, asr r1
   19fd0:	andeq	r2, r1, r0, asr lr
   19fd4:			; <UNDEFINED> instruction: 0xfffffeac
   19fd8:			; <UNDEFINED> instruction: 0xfffffd8c
   19fdc:			; <UNDEFINED> instruction: 0xfffffd30
   19fe0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19fe4:	add	fp, sp, #24
   19fe8:	ldr	r7, [pc, #76]	; 1a03c <__gcov_flush@@Base+0x224>
   19fec:	mov	r4, r0
   19ff0:	mov	r5, #1
   19ff4:	mov	r8, #0
   19ff8:	ldr	r7, [pc, r7]
   19ffc:	mov	r6, #47	; 0x2f
   1a000:	b	1a008 <__gcov_flush@@Base+0x1f0>
   1a004:	add	r5, r5, #1
   1a008:	ldrb	r0, [r4, r5]
   1a00c:	cmp	r0, #47	; 0x2f
   1a010:	beq	1a020 <__gcov_flush@@Base+0x208>
   1a014:	cmp	r0, #0
   1a018:	bne	1a004 <__gcov_flush@@Base+0x1ec>
   1a01c:	b	1a038 <__gcov_flush@@Base+0x220>
   1a020:	strb	r8, [r4, r5]
   1a024:	ldr	r1, [r7]
   1a028:	mov	r0, r4
   1a02c:	bl	11f54 <mkdir@plt>
   1a030:	strb	r6, [r4, r5]
   1a034:	b	1a004 <__gcov_flush@@Base+0x1ec>
   1a038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a03c:	strheq	r2, [r1], -r0
   1a040:	ldr	r0, [pc, #8]	; 1a050 <__gcov_flush@@Base+0x238>
   1a044:	ldr	r0, [pc, r0]
   1a048:	ldr	r0, [r0]
   1a04c:	bx	lr
   1a050:	andeq	r2, r1, r4, rrx
   1a054:	ldr	r1, [pc, #8]	; 1a064 <__gcov_flush@@Base+0x24c>
   1a058:	ldr	r1, [pc, r1]
   1a05c:	str	r0, [r1]
   1a060:	bx	lr
   1a064:	andeq	r2, r1, r0, asr r0
   1a068:	push	{r4, r5, r6, sl, fp, lr}
   1a06c:	add	fp, sp, #16
   1a070:	sub	sp, sp, #392	; 0x188
   1a074:	mov	r6, sp
   1a078:	mov	r5, r0
   1a07c:	mov	r0, r6
   1a080:	mov	r4, r1
   1a084:	bl	11e7c <uname@plt>
   1a088:	cmp	r0, #0
   1a08c:	blt	1a0a4 <__gcov_flush@@Base+0x28c>
   1a090:	add	r1, r6, #65	; 0x41
   1a094:	mov	r0, r5
   1a098:	mov	r2, r4
   1a09c:	bl	11f6c <strncpy@plt>
   1a0a0:	mov	r0, #0
   1a0a4:	sub	sp, fp, #16
   1a0a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a0ac:	push	{r4, r5, r6, sl, fp, lr}
   1a0b0:	add	fp, sp, #16
   1a0b4:	sub	sp, sp, #32
   1a0b8:	mov	r4, #0
   1a0bc:	mov	r5, r0
   1a0c0:	str	r4, [sp, #20]
   1a0c4:	str	r4, [sp, #16]
   1a0c8:	str	r4, [sp, #12]
   1a0cc:	str	r4, [sp, #8]
   1a0d0:	strh	r4, [sp, #2]
   1a0d4:	bl	11f00 <getpid@plt>
   1a0d8:	mov	r6, sp
   1a0dc:	str	r0, [sp, #24]
   1a0e0:	mov	r0, #1
   1a0e4:	strh	r0, [sp]
   1a0e8:	mov	r0, r5
   1a0ec:	mov	r1, #14
   1a0f0:	mov	r2, r6
   1a0f4:	bl	11fa8 <fcntl64@plt>
   1a0f8:	cmn	r0, #1
   1a0fc:	bne	1a118 <__gcov_flush@@Base+0x300>
   1a100:	bl	11f3c <__errno_location@plt>
   1a104:	ldr	r0, [r0]
   1a108:	cmp	r0, #4
   1a10c:	beq	1a0e8 <__gcov_flush@@Base+0x2d0>
   1a110:	cmp	r0, #37	; 0x25
   1a114:	mvneq	r4, #0
   1a118:	mov	r0, r4
   1a11c:	sub	sp, fp, #16
   1a120:	pop	{r4, r5, r6, sl, fp, pc}
   1a124:	push	{r4, r5, r6, sl, fp, lr}
   1a128:	add	fp, sp, #16
   1a12c:	sub	sp, sp, #32
   1a130:	mov	r4, #0
   1a134:	mov	r5, r0
   1a138:	str	r4, [sp, #20]
   1a13c:	str	r4, [sp, #16]
   1a140:	str	r4, [sp, #12]
   1a144:	str	r4, [sp, #8]
   1a148:	strh	r4, [sp, #2]
   1a14c:	bl	11f00 <getpid@plt>
   1a150:	mov	r6, sp
   1a154:	str	r0, [sp, #24]
   1a158:	mov	r0, #2
   1a15c:	strh	r0, [sp]
   1a160:	mov	r0, r5
   1a164:	mov	r1, #14
   1a168:	mov	r2, r6
   1a16c:	bl	11fa8 <fcntl64@plt>
   1a170:	cmn	r0, #1
   1a174:	bne	1a190 <__gcov_flush@@Base+0x378>
   1a178:	bl	11f3c <__errno_location@plt>
   1a17c:	ldr	r0, [r0]
   1a180:	cmp	r0, #4
   1a184:	beq	1a160 <__gcov_flush@@Base+0x348>
   1a188:	cmp	r0, #37	; 0x25
   1a18c:	mvneq	r4, #0
   1a190:	mov	r0, r4
   1a194:	sub	sp, fp, #16
   1a198:	pop	{r4, r5, r6, sl, fp, pc}
   1a19c:	push	{r4, r5, fp, lr}
   1a1a0:	add	fp, sp, #8
   1a1a4:	sub	sp, sp, #32
   1a1a8:	mov	r2, #182	; 0xb6
   1a1ac:	orr	r2, r2, #256	; 0x100
   1a1b0:	mov	r1, #66	; 0x42
   1a1b4:	bl	11eac <open64@plt>
   1a1b8:	cmp	r0, #0
   1a1bc:	blt	1a238 <__gcov_flush@@Base+0x420>
   1a1c0:	mov	r4, r0
   1a1c4:	mov	r0, #0
   1a1c8:	str	r0, [sp, #20]
   1a1cc:	str	r0, [sp, #16]
   1a1d0:	str	r0, [sp, #12]
   1a1d4:	str	r0, [sp, #8]
   1a1d8:	strh	r0, [sp, #2]
   1a1dc:	bl	11f00 <getpid@plt>
   1a1e0:	mov	r5, sp
   1a1e4:	str	r0, [sp, #24]
   1a1e8:	mov	r0, #1
   1a1ec:	strh	r0, [sp]
   1a1f0:	mov	r0, r4
   1a1f4:	mov	r1, #14
   1a1f8:	mov	r2, r5
   1a1fc:	bl	11fa8 <fcntl64@plt>
   1a200:	cmn	r0, #1
   1a204:	bne	1a220 <__gcov_flush@@Base+0x408>
   1a208:	bl	11f3c <__errno_location@plt>
   1a20c:	ldr	r0, [r0]
   1a210:	cmp	r0, #4
   1a214:	beq	1a1f0 <__gcov_flush@@Base+0x3d8>
   1a218:	cmp	r0, #37	; 0x25
   1a21c:	beq	1a244 <__gcov_flush@@Base+0x42c>
   1a220:	ldr	r1, [pc, #76]	; 1a274 <__gcov_flush@@Base+0x45c>
   1a224:	mov	r0, r4
   1a228:	add	r1, pc, r1
   1a22c:	bl	11e10 <fdopen@plt>
   1a230:	sub	sp, fp, #8
   1a234:	pop	{r4, r5, fp, pc}
   1a238:	mov	r0, #0
   1a23c:	sub	sp, fp, #8
   1a240:	pop	{r4, r5, fp, pc}
   1a244:	ldr	r1, [pc, #28]	; 1a268 <__gcov_flush@@Base+0x450>
   1a248:	ldr	r2, [pc, #28]	; 1a26c <__gcov_flush@@Base+0x454>
   1a24c:	ldr	r0, [pc, #28]	; 1a270 <__gcov_flush@@Base+0x458>
   1a250:	add	r1, pc, r1
   1a254:	add	r2, pc, r2
   1a258:	ldr	r0, [pc, r0]
   1a25c:	ldr	r0, [r0]
   1a260:	bl	11f30 <fprintf@plt>
   1a264:	b	1a220 <__gcov_flush@@Base+0x408>
   1a268:			; <UNDEFINED> instruction: 0x000018ba
   1a26c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1a270:	andeq	r1, r1, ip, asr lr
   1a274:	andeq	r1, r0, r0, asr #14
   1a278:	push	{r4, r5, r6, sl, fp, lr}
   1a27c:	add	fp, sp, #16
   1a280:	mov	r6, r0
   1a284:	ldr	r0, [pc, #120]	; 1a304 <__gcov_flush@@Base+0x4ec>
   1a288:	mov	r4, r1
   1a28c:	add	r0, pc, r0
   1a290:	bl	11eb8 <getenv@plt>
   1a294:	mov	r5, r0
   1a298:	ldr	r0, [pc, #104]	; 1a308 <__gcov_flush@@Base+0x4f0>
   1a29c:	add	r0, pc, r0
   1a2a0:	bl	11eb8 <getenv@plt>
   1a2a4:	mov	r1, #0
   1a2a8:	str	r1, [r4]
   1a2ac:	str	r1, [r6]
   1a2b0:	cmp	r5, #0
   1a2b4:	ldrbne	r2, [r5]
   1a2b8:	cmpne	r2, #0
   1a2bc:	bne	1a2c8 <__gcov_flush@@Base+0x4b0>
   1a2c0:	mov	r0, r1
   1a2c4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a2e4 <__gcov_flush@@Base+0x4cc>
   1a2d0:	mov	r1, #0
   1a2d4:	mov	r2, #10
   1a2d8:	bl	11e28 <strtol@plt>
   1a2dc:	bic	r0, r0, r0, asr #31
   1a2e0:	b	1a2e8 <__gcov_flush@@Base+0x4d0>
   1a2e4:	mov	r0, #0
   1a2e8:	str	r0, [r6]
   1a2ec:	mov	r0, r5
   1a2f0:	bl	11f18 <strlen@plt>
   1a2f4:	mov	r1, r5
   1a2f8:	str	r0, [r4]
   1a2fc:	mov	r0, r1
   1a300:	pop	{r4, r5, r6, sl, fp, pc}
   1a304:	strdeq	r1, [r0], -r5
   1a308:	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1a30c:	push	{r4, r5, r6, r7, fp, lr}
   1a310:	add	fp, sp, #16
   1a314:	mov	r6, r0
   1a318:	ldr	r0, [fp, #8]
   1a31c:	mov	r5, r3
   1a320:	mov	r7, r2
   1a324:	mov	r4, r1
   1a328:	cmp	r0, #1
   1a32c:	blt	1a364 <__gcov_flush@@Base+0x54c>
   1a330:	add	r1, r4, #1
   1a334:	mov	r2, #0
   1a338:	ldrb	r3, [r1]
   1a33c:	cmp	r3, #47	; 0x2f
   1a340:	beq	1a350 <__gcov_flush@@Base+0x538>
   1a344:	cmp	r3, #0
   1a348:	bne	1a358 <__gcov_flush@@Base+0x540>
   1a34c:	b	1a364 <__gcov_flush@@Base+0x54c>
   1a350:	add	r2, r2, #1
   1a354:	mov	r4, r1
   1a358:	add	r1, r1, #1
   1a35c:	cmp	r2, r0
   1a360:	blt	1a338 <__gcov_flush@@Base+0x520>
   1a364:	mov	r0, r6
   1a368:	mov	r1, r7
   1a36c:	mov	r2, r5
   1a370:	bl	11e58 <memcpy@plt>
   1a374:	add	r0, r7, r5
   1a378:	ldrb	r0, [r0, #-1]
   1a37c:	cmp	r0, #47	; 0x2f
   1a380:	movne	r0, #47	; 0x2f
   1a384:	strbne	r0, [r6, r5]
   1a388:	mov	r0, r4
   1a38c:	addne	r5, r5, #1
   1a390:	add	r5, r6, r5
   1a394:	bl	11f18 <strlen@plt>
   1a398:	add	r2, r0, #1
   1a39c:	mov	r0, r5
   1a3a0:	mov	r1, r4
   1a3a4:	pop	{r4, r5, r6, r7, fp, lr}
   1a3a8:	b	11e58 <memcpy@plt>
   1a3ac:	mov	r1, #47	; 0x2f
   1a3b0:	b	11f24 <strchr@plt>
   1a3b4:	mov	r1, #47	; 0x2f
   1a3b8:	b	11fb4 <strrchr@plt>
   1a3bc:	push	{fp, lr}
   1a3c0:	mov	fp, sp
   1a3c4:	sub	sp, sp, #8
   1a3c8:	mov	r0, #0
   1a3cc:	str	r0, [sp, #4]
   1a3d0:	add	r1, sp, #4
   1a3d4:	mov	r0, #2
   1a3d8:	bl	11f78 <prctl@plt>
   1a3dc:	ldr	r1, [sp, #4]
   1a3e0:	cmp	r0, #0
   1a3e4:	cmpeq	r1, #9
   1a3e8:	bne	1a3fc <__gcov_flush@@Base+0x5e4>
   1a3ec:	mov	r0, #1
   1a3f0:	mov	r1, #0
   1a3f4:	bl	11f78 <prctl@plt>
   1a3f8:	ldr	r1, [sp, #4]
   1a3fc:	sub	r0, r1, #9
   1a400:	clz	r0, r0
   1a404:	lsr	r0, r0, #5
   1a408:	mov	sp, fp
   1a40c:	pop	{fp, pc}
   1a410:	mov	r0, #1
   1a414:	mov	r1, #9
   1a418:	b	11f78 <prctl@plt>

0001a41c <__libc_csu_init@@Base>:
   1a41c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a420:	mov	r7, r0
   1a424:	ldr	r6, [pc, #72]	; 1a474 <__libc_csu_init@@Base+0x58>
   1a428:	ldr	r5, [pc, #72]	; 1a478 <__libc_csu_init@@Base+0x5c>
   1a42c:	add	r6, pc, r6
   1a430:	add	r5, pc, r5
   1a434:	sub	r6, r6, r5
   1a438:	mov	r8, r1
   1a43c:	mov	r9, r2
   1a440:	bl	11df0 <fdopen@plt-0x20>
   1a444:	asrs	r6, r6, #2
   1a448:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a44c:	mov	r4, #0
   1a450:	add	r4, r4, #1
   1a454:	ldr	r3, [r5], #4
   1a458:	mov	r2, r9
   1a45c:	mov	r1, r8
   1a460:	mov	r0, r7
   1a464:	blx	r3
   1a468:	cmp	r6, r4
   1a46c:	bne	1a450 <__libc_csu_init@@Base+0x34>
   1a470:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a474:	ldrdeq	r1, [r1], -r0
   1a478:			; <UNDEFINED> instruction: 0x00011ab8

0001a47c <__libc_csu_fini@@Base>:
   1a47c:	bx	lr
   1a480:	ldr	r3, [pc, #12]	; 1a494 <__libc_csu_fini@@Base+0x18>
   1a484:	mov	r1, #0
   1a488:	add	r3, pc, r3
   1a48c:	ldr	r2, [r3]
   1a490:	b	11f48 <__cxa_atexit@plt>
   1a494:	andeq	r1, r1, r8, lsr ip

Disassembly of section .fini:

0001a498 <.fini>:
   1a498:	push	{r3, lr}
   1a49c:	pop	{r3, pc}
