
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b40 <.init>:
   10b40:	push	{r3, lr}
   10b44:	bl	10dc4 <__assert_fail@plt+0x48>
   10b48:	pop	{r3, pc}

Disassembly of section .plt:

00010b4c <calloc@plt-0x14>:
   10b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b50:	ldr	lr, [pc, #4]	; 10b5c <calloc@plt-0x4>
   10b54:	add	lr, pc, lr
   10b58:	ldr	pc, [lr, #8]!
   10b5c:	andeq	r4, r1, r4, lsr #9

00010b60 <calloc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #20, 20	; 0x14000
   10b68:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b6c <raise@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #20, 20	; 0x14000
   10b74:	ldr	pc, [ip, #1180]!	; 0x49c

00010b78 <strcmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #20, 20	; 0x14000
   10b80:	ldr	pc, [ip, #1172]!	; 0x494

00010b84 <strtol@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #20, 20	; 0x14000
   10b8c:	ldr	pc, [ip, #1164]!	; 0x48c

00010b90 <printf@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #20, 20	; 0x14000
   10b98:	ldr	pc, [ip, #1156]!	; 0x484

00010b9c <fflush@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #20, 20	; 0x14000
   10ba4:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba8 <free@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #20, 20	; 0x14000
   10bb0:	ldr	pc, [ip, #1140]!	; 0x474

00010bb4 <ferror@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #20, 20	; 0x14000
   10bbc:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc0 <_exit@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #20, 20	; 0x14000
   10bc8:	ldr	pc, [ip, #1124]!	; 0x464

00010bcc <memcpy@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #20, 20	; 0x14000
   10bd4:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd8 <mbsinit@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #20, 20	; 0x14000
   10be0:	ldr	pc, [ip, #1108]!	; 0x454

00010be4 <memcmp@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #20, 20	; 0x14000
   10bec:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf0 <dcgettext@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #20, 20	; 0x14000
   10bf8:	ldr	pc, [ip, #1092]!	; 0x444

00010bfc <realloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #20, 20	; 0x14000
   10c04:	ldr	pc, [ip, #1084]!	; 0x43c

00010c08 <iswprint@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #20, 20	; 0x14000
   10c10:	ldr	pc, [ip, #1076]!	; 0x434

00010c14 <fwrite@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #20, 20	; 0x14000
   10c1c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c20 <lseek64@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #20, 20	; 0x14000
   10c28:	ldr	pc, [ip, #1060]!	; 0x424

00010c2c <__ctype_get_mb_cur_max@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #20, 20	; 0x14000
   10c34:	ldr	pc, [ip, #1052]!	; 0x41c

00010c38 <__fpending@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #20, 20	; 0x14000
   10c40:	ldr	pc, [ip, #1044]!	; 0x414

00010c44 <mbrtowc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c50 <error@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #1028]!	; 0x404

00010c5c <malloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c68 <__libc_start_main@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c74 <__freading@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c80 <__gmon_start__@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #996]!	; 0x3e4

00010c8c <getopt_long@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #988]!	; 0x3dc

00010c98 <__ctype_b_loc@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca4 <exit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb0 <strlen@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #964]!	; 0x3c4

00010cbc <fprintf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cc8 <__errno_location@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd4 <__cxa_atexit@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce0 <memset@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cec <fileno@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #924]!	; 0x39c

00010cf8 <fclose@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #916]!	; 0x394

00010d04 <fseeko64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #908]!	; 0x38c

00010d10 <setlocale@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #900]!	; 0x384

00010d1c <strrchr@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #892]!	; 0x37c

00010d28 <nl_langinfo@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #884]!	; 0x374

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #876]!	; 0x36c

00010d40 <putc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #868]!	; 0x364

00010d4c <getdelim@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #860]!	; 0x35c

00010d58 <fputs@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #852]!	; 0x354

00010d64 <strncmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #844]!	; 0x34c

00010d70 <abort@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #836]!	; 0x344

00010d7c <__assert_fail@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #828]!	; 0x33c

Disassembly of section .text:

00010d88 <.text>:
   10d88:	mov	fp, #0
   10d8c:	mov	lr, #0
   10d90:	pop	{r1}		; (ldr r1, [sp], #4)
   10d94:	mov	r2, sp
   10d98:	push	{r2}		; (str r2, [sp, #-4]!)
   10d9c:	push	{r0}		; (str r0, [sp, #-4]!)
   10da0:	ldr	ip, [pc, #16]	; 10db8 <__assert_fail@plt+0x3c>
   10da4:	push	{ip}		; (str ip, [sp, #-4]!)
   10da8:	ldr	r0, [pc, #12]	; 10dbc <__assert_fail@plt+0x40>
   10dac:	ldr	r3, [pc, #12]	; 10dc0 <__assert_fail@plt+0x44>
   10db0:	bl	10c68 <__libc_start_main@plt>
   10db4:	bl	10d70 <abort@plt>
   10db8:	andeq	r4, r1, r4, lsl #13
   10dbc:	andeq	r0, r1, r4, ror pc
   10dc0:	andeq	r4, r1, r4, lsr #12
   10dc4:	ldr	r3, [pc, #20]	; 10de0 <__assert_fail@plt+0x64>
   10dc8:	ldr	r2, [pc, #20]	; 10de4 <__assert_fail@plt+0x68>
   10dcc:	add	r3, pc, r3
   10dd0:	ldr	r2, [r3, r2]
   10dd4:	cmp	r2, #0
   10dd8:	bxeq	lr
   10ddc:	b	10c80 <__gmon_start__@plt>
   10de0:	andeq	r4, r1, ip, lsr #4
   10de4:	andeq	r0, r0, r4, asr #1
   10de8:	ldr	r3, [pc, #28]	; 10e0c <__assert_fail@plt+0x90>
   10dec:	ldr	r0, [pc, #28]	; 10e10 <__assert_fail@plt+0x94>
   10df0:	sub	r3, r3, r0
   10df4:	cmp	r3, #6
   10df8:	bxls	lr
   10dfc:	ldr	r3, [pc, #16]	; 10e14 <__assert_fail@plt+0x98>
   10e00:	cmp	r3, #0
   10e04:	bxeq	lr
   10e08:	bx	r3
   10e0c:	andeq	r5, r2, fp, lsl r1
   10e10:	andeq	r5, r2, r8, lsl r1
   10e14:	andeq	r0, r0, r0
   10e18:	ldr	r1, [pc, #36]	; 10e44 <__assert_fail@plt+0xc8>
   10e1c:	ldr	r0, [pc, #36]	; 10e48 <__assert_fail@plt+0xcc>
   10e20:	sub	r1, r1, r0
   10e24:	asr	r1, r1, #2
   10e28:	add	r1, r1, r1, lsr #31
   10e2c:	asrs	r1, r1, #1
   10e30:	bxeq	lr
   10e34:	ldr	r3, [pc, #16]	; 10e4c <__assert_fail@plt+0xd0>
   10e38:	cmp	r3, #0
   10e3c:	bxeq	lr
   10e40:	bx	r3
   10e44:	andeq	r5, r2, r8, lsl r1
   10e48:	andeq	r5, r2, r8, lsl r1
   10e4c:	andeq	r0, r0, r0
   10e50:	push	{r4, lr}
   10e54:	ldr	r4, [pc, #24]	; 10e74 <__assert_fail@plt+0xf8>
   10e58:	ldrb	r3, [r4]
   10e5c:	cmp	r3, #0
   10e60:	popne	{r4, pc}
   10e64:	bl	10de8 <__assert_fail@plt+0x6c>
   10e68:	mov	r3, #1
   10e6c:	strb	r3, [r4]
   10e70:	pop	{r4, pc}
   10e74:	andeq	r5, r2, ip, lsr r1
   10e78:	ldr	r0, [pc, #40]	; 10ea8 <__assert_fail@plt+0x12c>
   10e7c:	ldr	r3, [r0]
   10e80:	cmp	r3, #0
   10e84:	bne	10e8c <__assert_fail@plt+0x110>
   10e88:	b	10e18 <__assert_fail@plt+0x9c>
   10e8c:	ldr	r3, [pc, #24]	; 10eac <__assert_fail@plt+0x130>
   10e90:	cmp	r3, #0
   10e94:	beq	10e88 <__assert_fail@plt+0x10c>
   10e98:	push	{r4, lr}
   10e9c:	blx	r3
   10ea0:	pop	{r4, lr}
   10ea4:	b	10e18 <__assert_fail@plt+0x9c>
   10ea8:	andeq	r4, r2, r4, lsl pc
   10eac:	andeq	r0, r0, r0
   10eb0:	push	{r4, lr}
   10eb4:	bl	10cc8 <__errno_location@plt>
   10eb8:	ldr	r4, [r0]
   10ebc:	mov	r2, #5
   10ec0:	ldr	r1, [pc, #20]	; 10edc <__assert_fail@plt+0x160>
   10ec4:	mov	r0, #0
   10ec8:	bl	10bf0 <dcgettext@plt>
   10ecc:	mov	r2, r0
   10ed0:	mov	r1, r4
   10ed4:	mov	r0, #1
   10ed8:	bl	10c50 <error@plt>
   10edc:	andeq	r4, r1, r4, lsl #14
   10ee0:	push	{r4, lr}
   10ee4:	subs	r4, r0, #0
   10ee8:	beq	10f20 <__assert_fail@plt+0x1a4>
   10eec:	ldr	r3, [pc, #108]	; 10f60 <__assert_fail@plt+0x1e4>
   10ef0:	ldr	r5, [r3]
   10ef4:	mov	r2, #5
   10ef8:	ldr	r1, [pc, #100]	; 10f64 <__assert_fail@plt+0x1e8>
   10efc:	mov	r0, #0
   10f00:	bl	10bf0 <dcgettext@plt>
   10f04:	ldr	r3, [pc, #92]	; 10f68 <__assert_fail@plt+0x1ec>
   10f08:	ldr	r2, [r3]
   10f0c:	mov	r1, r0
   10f10:	mov	r0, r5
   10f14:	bl	10cbc <fprintf@plt>
   10f18:	mov	r0, r4
   10f1c:	bl	10ca4 <exit@plt>
   10f20:	ldr	r4, [pc, #68]	; 10f6c <__assert_fail@plt+0x1f0>
   10f24:	ldr	r6, [r4]
   10f28:	mov	r2, #5
   10f2c:	ldr	r1, [pc, #60]	; 10f70 <__assert_fail@plt+0x1f4>
   10f30:	mov	r0, #0
   10f34:	bl	10bf0 <dcgettext@plt>
   10f38:	ldr	r5, [pc, #40]	; 10f68 <__assert_fail@plt+0x1ec>
   10f3c:	ldr	r2, [r5]
   10f40:	mov	r1, r0
   10f44:	mov	r0, r6
   10f48:	bl	10cbc <fprintf@plt>
   10f4c:	ldr	r1, [r5]
   10f50:	ldr	r0, [r4]
   10f54:	bl	11570 <__assert_fail@plt+0x7f4>
   10f58:	mov	r0, #0
   10f5c:	bl	10ca4 <exit@plt>
   10f60:	andeq	r5, r2, r8, lsr #2
   10f64:	andeq	r4, r1, r0, lsl r7
   10f68:	andeq	r5, r2, r8, asr #2
   10f6c:	andeq	r5, r2, r4, lsr r1
   10f70:	andeq	r4, r1, r8, lsr r7
   10f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f78:	sub	sp, sp, #44	; 0x2c
   10f7c:	str	r0, [sp, #16]
   10f80:	mov	r4, r1
   10f84:	ldr	r0, [r1]
   10f88:	cmp	r0, #0
   10f8c:	ldreq	r0, [pc, #1232]	; 11464 <__assert_fail@plt+0x6e8>
   10f90:	bl	116ec <__assert_fail@plt+0x970>
   10f94:	ldr	r0, [pc, #1228]	; 11468 <__assert_fail@plt+0x6ec>
   10f98:	bl	14688 <__assert_fail@plt+0x390c>
   10f9c:	subs	r3, r0, #0
   10fa0:	str	r3, [sp, #8]
   10fa4:	bne	11044 <__assert_fail@plt+0x2c8>
   10fa8:	ldr	r5, [pc, #1212]	; 1146c <__assert_fail@plt+0x6f0>
   10fac:	str	r5, [sp, #32]
   10fb0:	mov	r0, r5
   10fb4:	bl	13754 <__assert_fail@plt+0x29d8>
   10fb8:	str	r0, [sp, #36]	; 0x24
   10fbc:	mov	r0, r5
   10fc0:	bl	13754 <__assert_fail@plt+0x29d8>
   10fc4:	mov	r5, r0
   10fc8:	mov	fp, #0
   10fcc:	strb	fp, [r0]
   10fd0:	ldr	r8, [sp, #8]
   10fd4:	mov	r3, #10
   10fd8:	str	r3, [sp, #12]
   10fdc:	ldr	r7, [pc, #1164]	; 11470 <__assert_fail@plt+0x6f4>
   10fe0:	ldr	r9, [pc, #1164]	; 11474 <__assert_fail@plt+0x6f8>
   10fe4:	mov	r6, fp
   10fe8:	ldr	sl, [pc, #1160]	; 11478 <__assert_fail@plt+0x6fc>
   10fec:	ldr	r3, [sp, #8]
   10ff0:	str	r3, [sp, #20]
   10ff4:	str	r6, [sp]
   10ff8:	mov	r3, r7
   10ffc:	mov	r2, r9
   11000:	mov	r1, r4
   11004:	ldr	r0, [sp, #16]
   11008:	bl	10c8c <getopt_long@plt>
   1100c:	cmn	r0, #1
   11010:	beq	111b0 <__assert_fail@plt+0x434>
   11014:	cmp	r0, #83	; 0x53
   11018:	beq	11080 <__assert_fail@plt+0x304>
   1101c:	ble	1106c <__assert_fail@plt+0x2f0>
   11020:	cmp	r0, #104	; 0x68
   11024:	beq	111a0 <__assert_fail@plt+0x424>
   11028:	cmp	r0, #118	; 0x76
   1102c:	bne	111a8 <__assert_fail@plt+0x42c>
   11030:	ldr	r0, [pc, #1068]	; 11464 <__assert_fail@plt+0x6e8>
   11034:	bl	114c4 <__assert_fail@plt+0x748>
   11038:	mov	r0, #0
   1103c:	add	sp, sp, #44	; 0x2c
   11040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11044:	bl	10cc8 <__errno_location@plt>
   11048:	ldr	r4, [r0]
   1104c:	mov	r2, #5
   11050:	ldr	r1, [pc, #1060]	; 1147c <__assert_fail@plt+0x700>
   11054:	mov	r0, #0
   11058:	bl	10bf0 <dcgettext@plt>
   1105c:	mov	r2, r0
   11060:	mov	r1, r4
   11064:	mov	r0, #1
   11068:	bl	10c50 <error@plt>
   1106c:	cmp	r0, #48	; 0x30
   11070:	bne	111a8 <__assert_fail@plt+0x42c>
   11074:	ldr	r3, [sp, #20]
   11078:	str	r3, [sp, #12]
   1107c:	b	10ff4 <__assert_fail@plt+0x278>
   11080:	ldr	r3, [sl]
   11084:	mov	fp, r3
   11088:	str	r3, [sp, #20]
   1108c:	bl	10cc8 <__errno_location@plt>
   11090:	mov	r8, r0
   11094:	str	r6, [r0]
   11098:	mov	r2, #10
   1109c:	add	r1, sp, #28
   110a0:	mov	r0, fp
   110a4:	bl	10b84 <strtol@plt>
   110a8:	subs	fp, r0, #0
   110ac:	bne	110f4 <__assert_fail@plt+0x378>
   110b0:	ldr	r3, [sl]
   110b4:	ldr	r2, [sp, #28]
   110b8:	cmp	r2, r3
   110bc:	beq	110d8 <__assert_fail@plt+0x35c>
   110c0:	ldr	r3, [sp, #28]
   110c4:	ldrb	r3, [r3]
   110c8:	cmp	r3, #0
   110cc:	bne	11174 <__assert_fail@plt+0x3f8>
   110d0:	mov	r8, #1
   110d4:	b	10fec <__assert_fail@plt+0x270>
   110d8:	mov	r2, #5
   110dc:	ldr	r1, [pc, #924]	; 11480 <__assert_fail@plt+0x704>
   110e0:	bl	10bf0 <dcgettext@plt>
   110e4:	mov	r2, r0
   110e8:	mov	r1, #0
   110ec:	mov	r0, #1
   110f0:	bl	10c50 <error@plt>
   110f4:	mov	r3, fp
   110f8:	sub	r2, fp, #-2147483647	; 0x80000001
   110fc:	cmn	r2, #3
   11100:	bls	11110 <__assert_fail@plt+0x394>
   11104:	ldr	r2, [r8]
   11108:	cmp	r2, #0
   1110c:	bne	11150 <__assert_fail@plt+0x3d4>
   11110:	ldr	r2, [sp, #28]
   11114:	ldrb	r2, [r2]
   11118:	cmp	r2, #0
   1111c:	bne	11174 <__assert_fail@plt+0x3f8>
   11120:	mov	r8, #1
   11124:	cmp	r3, r8
   11128:	bls	10fec <__assert_fail@plt+0x270>
   1112c:	mov	r2, #5
   11130:	ldr	r1, [pc, #844]	; 11484 <__assert_fail@plt+0x708>
   11134:	mov	r0, #0
   11138:	bl	10bf0 <dcgettext@plt>
   1113c:	mov	r3, fp
   11140:	mov	r2, r0
   11144:	mov	r1, #0
   11148:	mov	r0, r8
   1114c:	bl	10c50 <error@plt>
   11150:	mov	r2, #5
   11154:	ldr	r1, [pc, #812]	; 11488 <__assert_fail@plt+0x70c>
   11158:	mov	r0, #0
   1115c:	bl	10bf0 <dcgettext@plt>
   11160:	ldr	r3, [sp, #20]
   11164:	mov	r2, r0
   11168:	mov	r1, #0
   1116c:	mov	r0, #1
   11170:	bl	10c50 <error@plt>
   11174:	mov	r2, #5
   11178:	ldr	r1, [pc, #780]	; 1148c <__assert_fail@plt+0x710>
   1117c:	mov	r0, #0
   11180:	bl	10bf0 <dcgettext@plt>
   11184:	ldr	r3, [sp, #28]
   11188:	str	r3, [sp]
   1118c:	ldr	r3, [sp, #20]
   11190:	mov	r2, r0
   11194:	mov	r1, #0
   11198:	mov	r0, #1
   1119c:	bl	10c50 <error@plt>
   111a0:	mov	r0, #0
   111a4:	bl	10ee0 <__assert_fail@plt+0x164>
   111a8:	mov	r0, #1
   111ac:	bl	10ee0 <__assert_fail@plt+0x164>
   111b0:	ldr	r3, [pc, #728]	; 11490 <__assert_fail@plt+0x714>
   111b4:	ldr	r3, [r3]
   111b8:	ldr	r2, [sp, #16]
   111bc:	cmp	r2, r3
   111c0:	bne	11204 <__assert_fail@plt+0x488>
   111c4:	cmp	r8, #0
   111c8:	beq	1122c <__assert_fail@plt+0x4b0>
   111cc:	ldr	r4, [pc, #704]	; 11494 <__assert_fail@plt+0x718>
   111d0:	ldr	r1, [r4]
   111d4:	cmp	fp, #0
   111d8:	movne	r0, #49	; 0x31
   111dc:	moveq	r0, #48	; 0x30
   111e0:	bl	10d34 <fputc@plt>
   111e4:	ldr	r1, [r4]
   111e8:	mov	r0, #0
   111ec:	bl	10d34 <fputc@plt>
   111f0:	ldr	r9, [sp, #8]
   111f4:	ldr	sl, [pc, #624]	; 1146c <__assert_fail@plt+0x6f0>
   111f8:	ldr	fp, [pc, #664]	; 11498 <__assert_fail@plt+0x71c>
   111fc:	ldr	r7, [pc, #656]	; 11494 <__assert_fail@plt+0x718>
   11200:	b	11308 <__assert_fail@plt+0x58c>
   11204:	mov	r2, #5
   11208:	ldr	r1, [pc, #652]	; 1149c <__assert_fail@plt+0x720>
   1120c:	mov	r0, #0
   11210:	bl	10bf0 <dcgettext@plt>
   11214:	mov	r2, r0
   11218:	mov	r1, #0
   1121c:	mov	r0, r1
   11220:	bl	10c50 <error@plt>
   11224:	mov	r0, #1
   11228:	bl	10ee0 <__assert_fail@plt+0x164>
   1122c:	ldr	r3, [pc, #608]	; 11494 <__assert_fail@plt+0x718>
   11230:	ldr	r3, [r3]
   11234:	mov	r2, #10
   11238:	mov	r1, #1
   1123c:	ldr	r0, [pc, #604]	; 114a0 <__assert_fail@plt+0x724>
   11240:	bl	10c14 <fwrite@plt>
   11244:	cmp	r0, #10
   11248:	beq	111f0 <__assert_fail@plt+0x474>
   1124c:	bl	10cc8 <__errno_location@plt>
   11250:	ldr	r4, [r0]
   11254:	mov	r2, #5
   11258:	ldr	r1, [pc, #580]	; 114a4 <__assert_fail@plt+0x728>
   1125c:	mov	r0, #0
   11260:	bl	10bf0 <dcgettext@plt>
   11264:	mov	r2, r0
   11268:	mov	r1, r4
   1126c:	mov	r0, #1
   11270:	bl	10c50 <error@plt>
   11274:	mov	r4, r5
   11278:	b	113c0 <__assert_fail@plt+0x644>
   1127c:	bl	10eb0 <__assert_fail@plt+0x134>
   11280:	ldr	r3, [pc, #544]	; 114a8 <__assert_fail@plt+0x72c>
   11284:	mov	r2, #104	; 0x68
   11288:	ldr	r1, [pc, #540]	; 114ac <__assert_fail@plt+0x730>
   1128c:	ldr	r0, [pc, #540]	; 114b0 <__assert_fail@plt+0x734>
   11290:	bl	10d7c <__assert_fail@plt>
   11294:	ldr	r3, [pc, #524]	; 114a8 <__assert_fail@plt+0x72c>
   11298:	mov	r2, #105	; 0x69
   1129c:	ldr	r1, [pc, #520]	; 114ac <__assert_fail@plt+0x730>
   112a0:	ldr	r0, [pc, #524]	; 114b4 <__assert_fail@plt+0x738>
   112a4:	bl	10d7c <__assert_fail@plt>
   112a8:	ldr	r1, [r7]
   112ac:	mov	r0, r6
   112b0:	bl	10d40 <putc@plt>
   112b4:	cmn	r0, #1
   112b8:	beq	11448 <__assert_fail@plt+0x6cc>
   112bc:	ldr	r1, [r7]
   112c0:	ldr	r0, [sp, #36]	; 0x24
   112c4:	add	r0, r0, r4
   112c8:	bl	10d58 <fputs@plt>
   112cc:	cmn	r0, #1
   112d0:	beq	1144c <__assert_fail@plt+0x6d0>
   112d4:	ldr	r1, [r7]
   112d8:	mov	r0, #0
   112dc:	bl	10d40 <putc@plt>
   112e0:	cmn	r0, #1
   112e4:	beq	1144c <__assert_fail@plt+0x6d0>
   112e8:	ldr	r3, [sp, #36]	; 0x24
   112ec:	ldr	r2, [sp, #32]
   112f0:	str	r5, [sp, #36]	; 0x24
   112f4:	str	sl, [sp, #32]
   112f8:	ldr	r8, [sp, #8]
   112fc:	mov	r9, r4
   11300:	mov	sl, r2
   11304:	mov	r5, r3
   11308:	ldr	r3, [fp]
   1130c:	ldr	r2, [sp, #12]
   11310:	add	r1, sp, #32
   11314:	add	r0, sp, #36	; 0x24
   11318:	bl	10d4c <getdelim@plt>
   1131c:	cmp	r0, #0
   11320:	ble	11450 <__assert_fail@plt+0x6d4>
   11324:	sub	r0, r0, #1
   11328:	ldr	r3, [sp, #36]	; 0x24
   1132c:	ldrb	r2, [r3, r0]
   11330:	ldr	r1, [sp, #12]
   11334:	cmp	r1, r2
   11338:	moveq	r2, #0
   1133c:	strbeq	r2, [r3, r0]
   11340:	beq	11364 <__assert_fail@plt+0x5e8>
   11344:	mov	r2, #5
   11348:	ldr	r1, [pc, #360]	; 114b8 <__assert_fail@plt+0x73c>
   1134c:	mov	r0, #0
   11350:	bl	10bf0 <dcgettext@plt>
   11354:	mov	r2, r0
   11358:	mov	r1, #0
   1135c:	mov	r0, r1
   11360:	bl	10c50 <error@plt>
   11364:	ldr	r1, [sp, #36]	; 0x24
   11368:	ldrb	r2, [r5]
   1136c:	ldrb	r3, [r1]
   11370:	cmp	r3, r2
   11374:	movne	r3, #0
   11378:	moveq	r3, #1
   1137c:	cmp	r2, #0
   11380:	moveq	r3, #0
   11384:	cmp	r3, #0
   11388:	beq	11274 <__assert_fail@plt+0x4f8>
   1138c:	sub	r0, r5, #-2147483646	; 0x80000002
   11390:	mov	r4, r5
   11394:	ldrb	r2, [r4, #1]!
   11398:	ldrb	r3, [r1, #1]!
   1139c:	cmp	r3, r2
   113a0:	movne	r3, #0
   113a4:	moveq	r3, #1
   113a8:	cmp	r2, #0
   113ac:	moveq	r3, #0
   113b0:	cmp	r3, #0
   113b4:	beq	113c0 <__assert_fail@plt+0x644>
   113b8:	cmp	r4, r0
   113bc:	bne	11394 <__assert_fail@plt+0x618>
   113c0:	sub	r4, r4, r5
   113c4:	sub	r6, r4, r9
   113c8:	add	r3, r6, #32768	; 0x8000
   113cc:	ldr	r2, [pc, #232]	; 114bc <__assert_fail@plt+0x740>
   113d0:	cmp	r3, r2
   113d4:	rsbhi	r6, r9, #0
   113d8:	ldrhi	r4, [sp, #8]
   113dc:	cmp	r8, #0
   113e0:	bne	112bc <__assert_fail@plt+0x540>
   113e4:	add	r3, r6, #127	; 0x7f
   113e8:	cmp	r3, #254	; 0xfe
   113ec:	bls	112a8 <__assert_fail@plt+0x52c>
   113f0:	ldr	r1, [r7]
   113f4:	mov	r0, #128	; 0x80
   113f8:	bl	10d40 <putc@plt>
   113fc:	cmn	r0, #1
   11400:	beq	1127c <__assert_fail@plt+0x500>
   11404:	ldr	r8, [r7]
   11408:	ldr	r3, [pc, #176]	; 114c0 <__assert_fail@plt+0x744>
   1140c:	cmp	r6, r3
   11410:	bgt	11280 <__assert_fail@plt+0x504>
   11414:	cmn	r6, #32768	; 0x8000
   11418:	blt	11294 <__assert_fail@plt+0x518>
   1141c:	mov	r1, r8
   11420:	asr	r0, r6, #8
   11424:	bl	10d40 <putc@plt>
   11428:	cmn	r0, #1
   1142c:	beq	11444 <__assert_fail@plt+0x6c8>
   11430:	mov	r1, r8
   11434:	mov	r0, r6
   11438:	bl	10d40 <putc@plt>
   1143c:	cmn	r0, #1
   11440:	bne	112bc <__assert_fail@plt+0x540>
   11444:	bl	10eb0 <__assert_fail@plt+0x134>
   11448:	bl	10eb0 <__assert_fail@plt+0x134>
   1144c:	bl	10eb0 <__assert_fail@plt+0x134>
   11450:	ldr	r0, [sp, #36]	; 0x24
   11454:	bl	13dec <__assert_fail@plt+0x3070>
   11458:	mov	r0, r5
   1145c:	bl	13dec <__assert_fail@plt+0x3070>
   11460:	b	11038 <__assert_fail@plt+0x2bc>
   11464:	andeq	r4, r1, r8, ror #14
   11468:	strdeq	r1, [r1], -r8
   1146c:	andeq	r0, r0, r2, lsl #8
   11470:	andeq	r4, r1, ip, lsr #13
   11474:	andeq	r4, r1, ip, asr r8
   11478:	andeq	r5, r2, r8, lsr r1
   1147c:	andeq	r4, r1, r0, ror r7
   11480:	muleq	r1, r4, r7
   11484:	andeq	r4, r1, r0, lsr r8
   11488:	ldrdeq	r4, [r1], -r0
   1148c:	andeq	r4, r1, r4, lsl #16
   11490:	andeq	r5, r2, r0, lsr #2
   11494:	andeq	r5, r2, r4, lsr r1
   11498:	andeq	r5, r2, r0, lsr r1
   1149c:	andeq	r4, r1, r4, ror #16
   114a0:	andeq	r4, r1, ip, ror #13
   114a4:	andeq	r4, r1, ip, ror r8
   114a8:	strdeq	r4, [r1], -r8
   114ac:	ldrdeq	r4, [r1], -r0
   114b0:	ldrdeq	r4, [r1], -ip
   114b4:	andeq	r4, r1, ip, ror #17
   114b8:	andeq	r4, r1, r0, lsr #17
   114bc:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   114c0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   114c4:	push	{r4, r5, r6, r7, r8, lr}
   114c8:	sub	sp, sp, #16
   114cc:	mov	r5, r0
   114d0:	ldr	r3, [pc, #124]	; 11554 <__assert_fail@plt+0x7d8>
   114d4:	ldr	r0, [r3]
   114d8:	bl	13d88 <__assert_fail@plt+0x300c>
   114dc:	ldr	r3, [pc, #116]	; 11558 <__assert_fail@plt+0x7dc>
   114e0:	ldr	r4, [r3]
   114e4:	ldr	r3, [pc, #112]	; 1155c <__assert_fail@plt+0x7e0>
   114e8:	ldr	r6, [r3]
   114ec:	mov	r2, #5
   114f0:	ldr	r1, [pc, #104]	; 11560 <__assert_fail@plt+0x7e4>
   114f4:	mov	r0, #0
   114f8:	bl	10bf0 <dcgettext@plt>
   114fc:	mov	r7, r0
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #88]	; 11564 <__assert_fail@plt+0x7e8>
   11508:	mov	r0, #0
   1150c:	bl	10bf0 <dcgettext@plt>
   11510:	mov	r8, r0
   11514:	mov	r2, #5
   11518:	ldr	r1, [pc, #72]	; 11568 <__assert_fail@plt+0x7ec>
   1151c:	mov	r0, #0
   11520:	bl	10bf0 <dcgettext@plt>
   11524:	mov	r3, #0
   11528:	str	r3, [sp, #12]
   1152c:	str	r0, [sp, #8]
   11530:	str	r8, [sp, #4]
   11534:	str	r7, [sp]
   11538:	mov	r3, r6
   1153c:	ldr	r2, [pc, #40]	; 1156c <__assert_fail@plt+0x7f0>
   11540:	mov	r1, r5
   11544:	mov	r0, r4
   11548:	bl	136a0 <__assert_fail@plt+0x2924>
   1154c:	add	sp, sp, #16
   11550:	pop	{r4, r5, r6, r7, r8, pc}
   11554:	andeq	r5, r2, r8, lsr #2
   11558:	andeq	r5, r2, r4, lsr r1
   1155c:	ldrdeq	r5, [r2], -r0
   11560:	andeq	r4, r1, r4, lsl r9
   11564:	andeq	r4, r1, r4, lsr #18
   11568:	andeq	r4, r1, r4, lsr r9
   1156c:	andeq	r4, r1, r4, asr #18
   11570:	push	{r4, r5, lr}
   11574:	sub	sp, sp, #20
   11578:	mov	r4, r0
   1157c:	mov	r5, r1
   11580:	mov	r2, #5
   11584:	ldr	r1, [pc, #56]	; 115c4 <__assert_fail@plt+0x848>
   11588:	mov	r0, #0
   1158c:	bl	10bf0 <dcgettext@plt>
   11590:	ldr	r3, [pc, #48]	; 115c8 <__assert_fail@plt+0x84c>
   11594:	str	r3, [sp, #8]
   11598:	ldr	r3, [pc, #44]	; 115cc <__assert_fail@plt+0x850>
   1159c:	str	r3, [sp, #4]
   115a0:	ldr	r3, [pc, #40]	; 115d0 <__assert_fail@plt+0x854>
   115a4:	str	r3, [sp]
   115a8:	mov	r3, r5
   115ac:	ldr	r2, [pc, #32]	; 115d4 <__assert_fail@plt+0x858>
   115b0:	mov	r1, r0
   115b4:	mov	r0, r4
   115b8:	bl	10cbc <fprintf@plt>
   115bc:	add	sp, sp, #20
   115c0:	pop	{r4, r5, pc}
   115c4:	andeq	r4, r1, r4, ror #18
   115c8:	andeq	r4, r1, ip, asr sl
   115cc:	andeq	r4, r1, r4, ror sl
   115d0:	andeq	r4, r1, r4, asr #18
   115d4:	andeq	r4, r1, r4, lsr sl
   115d8:	ldr	r3, [pc, #4]	; 115e4 <__assert_fail@plt+0x868>
   115dc:	str	r0, [r3]
   115e0:	bx	lr
   115e4:	andeq	r5, r2, r0, asr #2
   115e8:	ldr	r3, [pc, #4]	; 115f4 <__assert_fail@plt+0x878>
   115ec:	strb	r0, [r3, #4]
   115f0:	bx	lr
   115f4:	andeq	r5, r2, r0, asr #2
   115f8:	push	{r4, r5, r6, lr}
   115fc:	sub	sp, sp, #8
   11600:	ldr	r3, [pc, #200]	; 116d0 <__assert_fail@plt+0x954>
   11604:	ldr	r0, [r3]
   11608:	bl	14010 <__assert_fail@plt+0x3294>
   1160c:	cmp	r0, #0
   11610:	beq	11634 <__assert_fail@plt+0x8b8>
   11614:	ldr	r3, [pc, #184]	; 116d4 <__assert_fail@plt+0x958>
   11618:	ldrb	r3, [r3, #4]
   1161c:	cmp	r3, #0
   11620:	beq	11650 <__assert_fail@plt+0x8d4>
   11624:	bl	10cc8 <__errno_location@plt>
   11628:	ldr	r3, [r0]
   1162c:	cmp	r3, #32
   11630:	bne	11650 <__assert_fail@plt+0x8d4>
   11634:	ldr	r3, [pc, #156]	; 116d8 <__assert_fail@plt+0x95c>
   11638:	ldr	r0, [r3]
   1163c:	bl	14010 <__assert_fail@plt+0x3294>
   11640:	cmp	r0, #0
   11644:	bne	116c4 <__assert_fail@plt+0x948>
   11648:	add	sp, sp, #8
   1164c:	pop	{r4, r5, r6, pc}
   11650:	mov	r2, #5
   11654:	ldr	r1, [pc, #128]	; 116dc <__assert_fail@plt+0x960>
   11658:	mov	r0, #0
   1165c:	bl	10bf0 <dcgettext@plt>
   11660:	mov	r4, r0
   11664:	ldr	r3, [pc, #104]	; 116d4 <__assert_fail@plt+0x958>
   11668:	ldr	r5, [r3]
   1166c:	cmp	r5, #0
   11670:	beq	116a8 <__assert_fail@plt+0x92c>
   11674:	bl	10cc8 <__errno_location@plt>
   11678:	ldr	r6, [r0]
   1167c:	mov	r0, r5
   11680:	bl	130b4 <__assert_fail@plt+0x2338>
   11684:	str	r4, [sp]
   11688:	mov	r3, r0
   1168c:	ldr	r2, [pc, #76]	; 116e0 <__assert_fail@plt+0x964>
   11690:	mov	r1, r6
   11694:	mov	r0, #0
   11698:	bl	10c50 <error@plt>
   1169c:	ldr	r3, [pc, #64]	; 116e4 <__assert_fail@plt+0x968>
   116a0:	ldr	r0, [r3]
   116a4:	bl	10bc0 <_exit@plt>
   116a8:	bl	10cc8 <__errno_location@plt>
   116ac:	mov	r3, r4
   116b0:	ldr	r2, [pc, #48]	; 116e8 <__assert_fail@plt+0x96c>
   116b4:	ldr	r1, [r0]
   116b8:	mov	r0, #0
   116bc:	bl	10c50 <error@plt>
   116c0:	b	1169c <__assert_fail@plt+0x920>
   116c4:	ldr	r3, [pc, #24]	; 116e4 <__assert_fail@plt+0x968>
   116c8:	ldr	r0, [r3]
   116cc:	bl	10bc0 <_exit@plt>
   116d0:	andeq	r5, r2, r4, lsr r1
   116d4:	andeq	r5, r2, r0, asr #2
   116d8:	andeq	r5, r2, r8, lsr #2
   116dc:	andeq	r4, r1, r4, lsl #14
   116e0:	andeq	r4, r1, r4, lsr #21
   116e4:	ldrdeq	r5, [r2], -r4
   116e8:	andeq	r4, r1, r8, lsr #21
   116ec:	push	{r4, r5, r6, lr}
   116f0:	subs	r4, r0, #0
   116f4:	beq	1176c <__assert_fail@plt+0x9f0>
   116f8:	mov	r1, #47	; 0x2f
   116fc:	mov	r0, r4
   11700:	bl	10d1c <strrchr@plt>
   11704:	cmp	r0, #0
   11708:	addne	r5, r0, #1
   1170c:	moveq	r5, r4
   11710:	sub	r3, r5, r4
   11714:	cmp	r3, #6
   11718:	ble	11758 <__assert_fail@plt+0x9dc>
   1171c:	mov	r2, #7
   11720:	ldr	r1, [pc, #96]	; 11788 <__assert_fail@plt+0xa0c>
   11724:	sub	r0, r5, #7
   11728:	bl	10d64 <strncmp@plt>
   1172c:	cmp	r0, #0
   11730:	bne	11758 <__assert_fail@plt+0x9dc>
   11734:	mov	r2, #3
   11738:	ldr	r1, [pc, #76]	; 1178c <__assert_fail@plt+0xa10>
   1173c:	mov	r0, r5
   11740:	bl	10d64 <strncmp@plt>
   11744:	cmp	r0, #0
   11748:	addeq	r4, r5, #3
   1174c:	ldreq	r3, [pc, #60]	; 11790 <__assert_fail@plt+0xa14>
   11750:	streq	r4, [r3]
   11754:	movne	r4, r5
   11758:	ldr	r3, [pc, #52]	; 11794 <__assert_fail@plt+0xa18>
   1175c:	str	r4, [r3]
   11760:	ldr	r3, [pc, #48]	; 11798 <__assert_fail@plt+0xa1c>
   11764:	str	r4, [r3]
   11768:	pop	{r4, r5, r6, pc}
   1176c:	ldr	r3, [pc, #40]	; 1179c <__assert_fail@plt+0xa20>
   11770:	ldr	r3, [r3]
   11774:	mov	r2, #55	; 0x37
   11778:	mov	r1, #1
   1177c:	ldr	r0, [pc, #28]	; 117a0 <__assert_fail@plt+0xa24>
   11780:	bl	10c14 <fwrite@plt>
   11784:	bl	10d70 <abort@plt>
   11788:	andeq	r4, r1, r4, ror #21
   1178c:	andeq	r4, r1, ip, ror #21
   11790:	andeq	r5, r2, r8, lsl r1
   11794:	andeq	r5, r2, r8, asr #2
   11798:	andeq	r5, r2, ip, lsl r1
   1179c:	andeq	r5, r2, r8, lsr #2
   117a0:	andeq	r4, r1, ip, lsr #21
   117a4:	push	{r4, r5, r6, lr}
   117a8:	mov	r5, r0
   117ac:	mov	r4, r1
   117b0:	mov	r2, #48	; 0x30
   117b4:	mov	r1, #0
   117b8:	bl	10ce0 <memset@plt>
   117bc:	cmp	r4, #10
   117c0:	beq	117d0 <__assert_fail@plt+0xa54>
   117c4:	str	r4, [r5]
   117c8:	mov	r0, r5
   117cc:	pop	{r4, r5, r6, pc}
   117d0:	bl	10d70 <abort@plt>
   117d4:	push	{r4, r5, r6, lr}
   117d8:	mov	r4, r0
   117dc:	mov	r5, r1
   117e0:	mov	r2, #5
   117e4:	mov	r1, r0
   117e8:	mov	r0, #0
   117ec:	bl	10bf0 <dcgettext@plt>
   117f0:	cmp	r4, r0
   117f4:	popne	{r4, r5, r6, pc}
   117f8:	bl	140ec <__assert_fail@plt+0x3370>
   117fc:	ldrb	r3, [r0]
   11800:	bic	r3, r3, #32
   11804:	cmp	r3, #85	; 0x55
   11808:	beq	11884 <__assert_fail@plt+0xb08>
   1180c:	cmp	r3, #71	; 0x47
   11810:	bne	118e0 <__assert_fail@plt+0xb64>
   11814:	ldrb	r3, [r0, #1]
   11818:	bic	r3, r3, #32
   1181c:	cmp	r3, #66	; 0x42
   11820:	bne	118e0 <__assert_fail@plt+0xb64>
   11824:	ldrb	r3, [r0, #2]
   11828:	cmp	r3, #49	; 0x31
   1182c:	bne	118e0 <__assert_fail@plt+0xb64>
   11830:	ldrb	r3, [r0, #3]
   11834:	cmp	r3, #56	; 0x38
   11838:	bne	118e0 <__assert_fail@plt+0xb64>
   1183c:	ldrb	r3, [r0, #4]
   11840:	cmp	r3, #48	; 0x30
   11844:	bne	118e0 <__assert_fail@plt+0xb64>
   11848:	ldrb	r3, [r0, #5]
   1184c:	cmp	r3, #51	; 0x33
   11850:	bne	118e0 <__assert_fail@plt+0xb64>
   11854:	ldrb	r3, [r0, #6]
   11858:	cmp	r3, #48	; 0x30
   1185c:	bne	118e0 <__assert_fail@plt+0xb64>
   11860:	ldrb	r3, [r0, #7]
   11864:	cmp	r3, #0
   11868:	bne	118e0 <__assert_fail@plt+0xb64>
   1186c:	ldrb	r2, [r4]
   11870:	ldr	r3, [pc, #124]	; 118f4 <__assert_fail@plt+0xb78>
   11874:	ldr	r0, [pc, #124]	; 118f8 <__assert_fail@plt+0xb7c>
   11878:	cmp	r2, #96	; 0x60
   1187c:	movne	r0, r3
   11880:	pop	{r4, r5, r6, pc}
   11884:	ldrb	r3, [r0, #1]
   11888:	bic	r3, r3, #32
   1188c:	cmp	r3, #84	; 0x54
   11890:	bne	118e0 <__assert_fail@plt+0xb64>
   11894:	ldrb	r3, [r0, #2]
   11898:	bic	r3, r3, #32
   1189c:	cmp	r3, #70	; 0x46
   118a0:	bne	118e0 <__assert_fail@plt+0xb64>
   118a4:	ldrb	r3, [r0, #3]
   118a8:	cmp	r3, #45	; 0x2d
   118ac:	bne	118e0 <__assert_fail@plt+0xb64>
   118b0:	ldrb	r3, [r0, #4]
   118b4:	cmp	r3, #56	; 0x38
   118b8:	bne	118e0 <__assert_fail@plt+0xb64>
   118bc:	ldrb	r3, [r0, #5]
   118c0:	cmp	r3, #0
   118c4:	bne	118e0 <__assert_fail@plt+0xb64>
   118c8:	ldrb	r2, [r4]
   118cc:	ldr	r3, [pc, #40]	; 118fc <__assert_fail@plt+0xb80>
   118d0:	ldr	r0, [pc, #40]	; 11900 <__assert_fail@plt+0xb84>
   118d4:	cmp	r2, #96	; 0x60
   118d8:	movne	r0, r3
   118dc:	pop	{r4, r5, r6, pc}
   118e0:	ldr	r3, [pc, #28]	; 11904 <__assert_fail@plt+0xb88>
   118e4:	ldr	r0, [pc, #28]	; 11908 <__assert_fail@plt+0xb8c>
   118e8:	cmp	r5, #9
   118ec:	movne	r0, r3
   118f0:	pop	{r4, r5, r6, pc}
   118f4:	andeq	r4, r1, r8, asr #22
   118f8:	andeq	r4, r1, r4, asr fp
   118fc:	andeq	r4, r1, r4, asr #22
   11900:	andeq	r4, r1, r8, asr fp
   11904:	andeq	r4, r1, ip, asr #22
   11908:	andeq	r4, r1, r0, asr fp
   1190c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11910:	sub	sp, sp, #116	; 0x74
   11914:	str	r0, [sp, #36]	; 0x24
   11918:	mov	sl, r1
   1191c:	str	r2, [sp, #52]	; 0x34
   11920:	str	r3, [sp, #28]
   11924:	ldr	r8, [sp, #152]	; 0x98
   11928:	bl	10c2c <__ctype_get_mb_cur_max@plt>
   1192c:	str	r0, [sp, #84]	; 0x54
   11930:	ldr	r3, [sp, #156]	; 0x9c
   11934:	lsr	r3, r3, #1
   11938:	and	r3, r3, #1
   1193c:	str	r3, [sp, #32]
   11940:	mov	r3, #1
   11944:	str	r3, [sp, #40]	; 0x28
   11948:	mov	r3, #0
   1194c:	str	r3, [sp, #80]	; 0x50
   11950:	str	r3, [sp, #44]	; 0x2c
   11954:	str	r3, [sp, #48]	; 0x30
   11958:	str	r3, [sp, #60]	; 0x3c
   1195c:	str	r3, [sp, #72]	; 0x48
   11960:	str	r3, [sp, #76]	; 0x4c
   11964:	mov	r7, sl
   11968:	mov	sl, r8
   1196c:	cmp	sl, #10
   11970:	ldrls	pc, [pc, sl, lsl #2]
   11974:	b	11b2c <__assert_fail@plt+0xdb0>
   11978:	ldrdeq	r1, [r1], -ip
   1197c:	andeq	r1, r1, ip, lsr #19
   11980:	andeq	r1, r1, r8, lsl #22
   11984:	andeq	r1, r1, r4, lsr #19
   11988:			; <UNDEFINED> instruction: 0x00011abc
   1198c:	andeq	r1, r1, ip, ror #19
   11990:	andeq	r2, r1, r8, asr sl
   11994:	andeq	r1, r1, r0, lsr fp
   11998:	andeq	r1, r1, r8, lsr #20
   1199c:	andeq	r1, r1, r8, lsr #20
   119a0:	andeq	r1, r1, r8, lsr #20
   119a4:	mov	r3, #1
   119a8:	str	r3, [sp, #48]	; 0x30
   119ac:	mov	r3, #1
   119b0:	str	r3, [sp, #32]
   119b4:	str	r3, [sp, #60]	; 0x3c
   119b8:	ldr	r3, [pc, #4068]	; 129a4 <__assert_fail@plt+0x1c28>
   119bc:	str	r3, [sp, #72]	; 0x48
   119c0:	mov	fp, #0
   119c4:	mov	sl, #2
   119c8:	mov	r6, #0
   119cc:	ldr	r3, [sp, #48]	; 0x30
   119d0:	eor	r3, r3, #1
   119d4:	str	r3, [sp, #68]	; 0x44
   119d8:	b	122c0 <__assert_fail@plt+0x1544>
   119dc:	mov	r3, #0
   119e0:	str	r3, [sp, #32]
   119e4:	mov	fp, r3
   119e8:	b	119c8 <__assert_fail@plt+0xc4c>
   119ec:	ldr	r3, [sp, #32]
   119f0:	cmp	r3, #0
   119f4:	bne	11b48 <__assert_fail@plt+0xdcc>
   119f8:	cmp	r7, #0
   119fc:	beq	11b68 <__assert_fail@plt+0xdec>
   11a00:	ldr	r3, [sp, #36]	; 0x24
   11a04:	mov	r2, #34	; 0x22
   11a08:	strb	r2, [r3]
   11a0c:	mov	r3, #1
   11a10:	str	r3, [sp, #48]	; 0x30
   11a14:	str	r3, [sp, #60]	; 0x3c
   11a18:	ldr	r3, [pc, #3980]	; 129ac <__assert_fail@plt+0x1c30>
   11a1c:	str	r3, [sp, #72]	; 0x48
   11a20:	mov	fp, #1
   11a24:	b	119c8 <__assert_fail@plt+0xc4c>
   11a28:	cmp	sl, #10
   11a2c:	beq	11a50 <__assert_fail@plt+0xcd4>
   11a30:	mov	r1, sl
   11a34:	ldr	r0, [pc, #3948]	; 129a8 <__assert_fail@plt+0x1c2c>
   11a38:	bl	117d4 <__assert_fail@plt+0xa58>
   11a3c:	str	r0, [sp, #164]	; 0xa4
   11a40:	mov	r1, sl
   11a44:	ldr	r0, [pc, #3928]	; 129a4 <__assert_fail@plt+0x1c28>
   11a48:	bl	117d4 <__assert_fail@plt+0xa58>
   11a4c:	str	r0, [sp, #168]	; 0xa8
   11a50:	ldr	r3, [sp, #32]
   11a54:	cmp	r3, #0
   11a58:	movne	fp, #0
   11a5c:	bne	11a94 <__assert_fail@plt+0xd18>
   11a60:	ldr	r3, [sp, #164]	; 0xa4
   11a64:	ldrb	r3, [r3]
   11a68:	cmp	r3, #0
   11a6c:	beq	11ab4 <__assert_fail@plt+0xd38>
   11a70:	ldr	r2, [sp, #164]	; 0xa4
   11a74:	mov	fp, #0
   11a78:	ldr	r1, [sp, #36]	; 0x24
   11a7c:	cmp	r7, fp
   11a80:	strbhi	r3, [r1, fp]
   11a84:	add	fp, fp, #1
   11a88:	ldrb	r3, [r2, #1]!
   11a8c:	cmp	r3, #0
   11a90:	bne	11a7c <__assert_fail@plt+0xd00>
   11a94:	ldr	r0, [sp, #168]	; 0xa8
   11a98:	bl	10cb0 <strlen@plt>
   11a9c:	str	r0, [sp, #60]	; 0x3c
   11aa0:	ldr	r3, [sp, #168]	; 0xa8
   11aa4:	str	r3, [sp, #72]	; 0x48
   11aa8:	mov	r3, #1
   11aac:	str	r3, [sp, #48]	; 0x30
   11ab0:	b	119c8 <__assert_fail@plt+0xc4c>
   11ab4:	mov	fp, #0
   11ab8:	b	11a94 <__assert_fail@plt+0xd18>
   11abc:	ldr	r3, [sp, #32]
   11ac0:	cmp	r3, #0
   11ac4:	bne	11b84 <__assert_fail@plt+0xe08>
   11ac8:	mov	r3, #1
   11acc:	str	r3, [sp, #48]	; 0x30
   11ad0:	cmp	r7, #0
   11ad4:	beq	11ba0 <__assert_fail@plt+0xe24>
   11ad8:	ldr	r3, [sp, #36]	; 0x24
   11adc:	mov	r2, #39	; 0x27
   11ae0:	strb	r2, [r3]
   11ae4:	mov	r3, #0
   11ae8:	str	r3, [sp, #32]
   11aec:	mov	r3, #1
   11af0:	str	r3, [sp, #60]	; 0x3c
   11af4:	ldr	r3, [pc, #3752]	; 129a4 <__assert_fail@plt+0x1c28>
   11af8:	str	r3, [sp, #72]	; 0x48
   11afc:	mov	fp, #1
   11b00:	mov	sl, #2
   11b04:	b	119c8 <__assert_fail@plt+0xc4c>
   11b08:	ldr	r3, [sp, #32]
   11b0c:	cmp	r3, #0
   11b10:	beq	11ad0 <__assert_fail@plt+0xd54>
   11b14:	mov	r3, #1
   11b18:	str	r3, [sp, #60]	; 0x3c
   11b1c:	ldr	r3, [pc, #3712]	; 129a4 <__assert_fail@plt+0x1c28>
   11b20:	str	r3, [sp, #72]	; 0x48
   11b24:	mov	fp, #0
   11b28:	b	119c8 <__assert_fail@plt+0xc4c>
   11b2c:	bl	10d70 <abort@plt>
   11b30:	mov	r3, #0
   11b34:	str	r3, [sp, #32]
   11b38:	mov	r3, #1
   11b3c:	str	r3, [sp, #48]	; 0x30
   11b40:	mov	fp, #0
   11b44:	b	119c8 <__assert_fail@plt+0xc4c>
   11b48:	ldr	r3, [sp, #32]
   11b4c:	str	r3, [sp, #48]	; 0x30
   11b50:	mov	r3, #1
   11b54:	str	r3, [sp, #60]	; 0x3c
   11b58:	ldr	r3, [pc, #3660]	; 129ac <__assert_fail@plt+0x1c30>
   11b5c:	str	r3, [sp, #72]	; 0x48
   11b60:	mov	fp, #0
   11b64:	b	119c8 <__assert_fail@plt+0xc4c>
   11b68:	mov	r3, #1
   11b6c:	str	r3, [sp, #48]	; 0x30
   11b70:	str	r3, [sp, #60]	; 0x3c
   11b74:	ldr	r3, [pc, #3632]	; 129ac <__assert_fail@plt+0x1c30>
   11b78:	str	r3, [sp, #72]	; 0x48
   11b7c:	mov	fp, #1
   11b80:	b	119c8 <__assert_fail@plt+0xc4c>
   11b84:	mov	r3, #1
   11b88:	str	r3, [sp, #60]	; 0x3c
   11b8c:	ldr	r3, [pc, #3600]	; 129a4 <__assert_fail@plt+0x1c28>
   11b90:	str	r3, [sp, #72]	; 0x48
   11b94:	mov	fp, #0
   11b98:	mov	sl, #2
   11b9c:	b	119c8 <__assert_fail@plt+0xc4c>
   11ba0:	mov	r3, #0
   11ba4:	str	r3, [sp, #32]
   11ba8:	mov	r3, #1
   11bac:	str	r3, [sp, #60]	; 0x3c
   11bb0:	ldr	r3, [pc, #3564]	; 129a4 <__assert_fail@plt+0x1c28>
   11bb4:	str	r3, [sp, #72]	; 0x48
   11bb8:	mov	fp, #1
   11bbc:	mov	sl, #2
   11bc0:	b	119c8 <__assert_fail@plt+0xc4c>
   11bc4:	mov	r3, #0
   11bc8:	str	r3, [sp, #56]	; 0x38
   11bcc:	ldr	r3, [sp, #52]	; 0x34
   11bd0:	add	r2, r3, r6
   11bd4:	str	r2, [sp, #64]	; 0x40
   11bd8:	ldrb	r4, [r3, r6]
   11bdc:	cmp	r4, #126	; 0x7e
   11be0:	ldrls	pc, [pc, r4, lsl #2]
   11be4:	b	12420 <__assert_fail@plt+0x16a4>
   11be8:	andeq	r1, r1, r0, lsl #28
   11bec:	andeq	r2, r1, r0, lsr #8
   11bf0:	andeq	r2, r1, r0, lsr #8
   11bf4:	andeq	r2, r1, r0, lsr #8
   11bf8:	andeq	r2, r1, r0, lsr #8
   11bfc:	andeq	r2, r1, r0, lsr #8
   11c00:	andeq	r2, r1, r0, lsr #8
   11c04:	andeq	r2, r1, ip, asr r1
   11c08:	strdeq	r1, [r1], -r8
   11c0c:	andeq	r2, r1, r4, lsl r1
   11c10:	andeq	r2, r1, ip, lsl #2
   11c14:	andeq	r2, r1, ip, ror r0
   11c18:	andeq	r2, r1, r4, ror r0
   11c1c:	strdeq	r1, [r1], -r0
   11c20:	andeq	r2, r1, r0, lsr #8
   11c24:	andeq	r2, r1, r0, lsr #8
   11c28:	andeq	r2, r1, r0, lsr #8
   11c2c:	andeq	r2, r1, r0, lsr #8
   11c30:	andeq	r2, r1, r0, lsr #8
   11c34:	andeq	r2, r1, r0, lsr #8
   11c38:	andeq	r2, r1, r0, lsr #8
   11c3c:	andeq	r2, r1, r0, lsr #8
   11c40:	andeq	r2, r1, r0, lsr #8
   11c44:	andeq	r2, r1, r0, lsr #8
   11c48:	andeq	r2, r1, r0, lsr #8
   11c4c:	andeq	r2, r1, r0, lsr #8
   11c50:	andeq	r2, r1, r0, lsr #8
   11c54:	andeq	r2, r1, r0, lsr #8
   11c58:	andeq	r2, r1, r0, lsr #8
   11c5c:	andeq	r2, r1, r0, lsr #8
   11c60:	andeq	r2, r1, r0, lsr #8
   11c64:	andeq	r2, r1, r0, lsr #8
   11c68:			; <UNDEFINED> instruction: 0x000121b0
   11c6c:	andeq	r2, r1, ip, lsr #3
   11c70:	andeq	r2, r1, ip, lsr #3
   11c74:	andeq	r2, r1, r4, lsl #3
   11c78:	andeq	r2, r1, ip, lsr #3
   11c7c:	strdeq	r2, [r1], -r4
   11c80:	andeq	r2, r1, ip, lsr #3
   11c84:	andeq	r2, r1, r4, lsl #7
   11c88:	andeq	r2, r1, ip, lsr #3
   11c8c:	andeq	r2, r1, ip, lsr #3
   11c90:	andeq	r2, r1, ip, lsr #3
   11c94:	strdeq	r2, [r1], -r4
   11c98:	strdeq	r2, [r1], -r4
   11c9c:	strdeq	r2, [r1], -r4
   11ca0:	strdeq	r2, [r1], -r4
   11ca4:	strdeq	r2, [r1], -r4
   11ca8:	strdeq	r2, [r1], -r4
   11cac:	strdeq	r2, [r1], -r4
   11cb0:	strdeq	r2, [r1], -r4
   11cb4:	strdeq	r2, [r1], -r4
   11cb8:	strdeq	r2, [r1], -r4
   11cbc:	strdeq	r2, [r1], -r4
   11cc0:	strdeq	r2, [r1], -r4
   11cc4:	strdeq	r2, [r1], -r4
   11cc8:	strdeq	r2, [r1], -r4
   11ccc:	strdeq	r2, [r1], -r4
   11cd0:	strdeq	r2, [r1], -r4
   11cd4:	andeq	r2, r1, ip, lsr #3
   11cd8:	andeq	r2, r1, ip, lsr #3
   11cdc:	andeq	r2, r1, ip, lsr #3
   11ce0:	andeq	r2, r1, ip, lsr #3
   11ce4:	andeq	r1, r1, r8, lsl #30
   11ce8:	andeq	r2, r1, r0, lsr #8
   11cec:	strdeq	r2, [r1], -r4
   11cf0:	strdeq	r2, [r1], -r4
   11cf4:	strdeq	r2, [r1], -r4
   11cf8:	strdeq	r2, [r1], -r4
   11cfc:	strdeq	r2, [r1], -r4
   11d00:	strdeq	r2, [r1], -r4
   11d04:	strdeq	r2, [r1], -r4
   11d08:	strdeq	r2, [r1], -r4
   11d0c:	strdeq	r2, [r1], -r4
   11d10:	strdeq	r2, [r1], -r4
   11d14:	strdeq	r2, [r1], -r4
   11d18:	strdeq	r2, [r1], -r4
   11d1c:	strdeq	r2, [r1], -r4
   11d20:	strdeq	r2, [r1], -r4
   11d24:	strdeq	r2, [r1], -r4
   11d28:	strdeq	r2, [r1], -r4
   11d2c:	strdeq	r2, [r1], -r4
   11d30:	strdeq	r2, [r1], -r4
   11d34:	strdeq	r2, [r1], -r4
   11d38:	strdeq	r2, [r1], -r4
   11d3c:	strdeq	r2, [r1], -r4
   11d40:	strdeq	r2, [r1], -r4
   11d44:	strdeq	r2, [r1], -r4
   11d48:	strdeq	r2, [r1], -r4
   11d4c:	strdeq	r2, [r1], -r4
   11d50:	strdeq	r2, [r1], -r4
   11d54:	andeq	r2, r1, ip, lsr #3
   11d58:	andeq	r2, r1, r4, lsl #1
   11d5c:	strdeq	r2, [r1], -r4
   11d60:	andeq	r2, r1, ip, lsr #3
   11d64:	strdeq	r2, [r1], -r4
   11d68:	andeq	r2, r1, ip, lsr #3
   11d6c:	strdeq	r2, [r1], -r4
   11d70:	strdeq	r2, [r1], -r4
   11d74:	strdeq	r2, [r1], -r4
   11d78:	strdeq	r2, [r1], -r4
   11d7c:	strdeq	r2, [r1], -r4
   11d80:	strdeq	r2, [r1], -r4
   11d84:	strdeq	r2, [r1], -r4
   11d88:	strdeq	r2, [r1], -r4
   11d8c:	strdeq	r2, [r1], -r4
   11d90:	strdeq	r2, [r1], -r4
   11d94:	strdeq	r2, [r1], -r4
   11d98:	strdeq	r2, [r1], -r4
   11d9c:	strdeq	r2, [r1], -r4
   11da0:	strdeq	r2, [r1], -r4
   11da4:	strdeq	r2, [r1], -r4
   11da8:	strdeq	r2, [r1], -r4
   11dac:	strdeq	r2, [r1], -r4
   11db0:	strdeq	r2, [r1], -r4
   11db4:	strdeq	r2, [r1], -r4
   11db8:	strdeq	r2, [r1], -r4
   11dbc:	strdeq	r2, [r1], -r4
   11dc0:	strdeq	r2, [r1], -r4
   11dc4:	strdeq	r2, [r1], -r4
   11dc8:	strdeq	r2, [r1], -r4
   11dcc:	strdeq	r2, [r1], -r4
   11dd0:	strdeq	r2, [r1], -r4
   11dd4:	andeq	r2, r1, r4, ror #2
   11dd8:	andeq	r2, r1, ip, lsr #3
   11ddc:	andeq	r2, r1, r4, ror #2
   11de0:	andeq	r2, r1, r4, lsl #3
   11de4:	mov	r3, #0
   11de8:	str	r3, [sp, #56]	; 0x38
   11dec:	b	11bcc <__assert_fail@plt+0xe50>
   11df0:	mov	r3, #114	; 0x72
   11df4:	b	12118 <__assert_fail@plt+0x139c>
   11df8:	mov	r3, #98	; 0x62
   11dfc:	b	12130 <__assert_fail@plt+0x13b4>
   11e00:	ldr	r3, [sp, #48]	; 0x30
   11e04:	cmp	r3, #0
   11e08:	beq	11ef0 <__assert_fail@plt+0x1174>
   11e0c:	ldr	r3, [sp, #32]
   11e10:	cmp	r3, #0
   11e14:	bne	12978 <__assert_fail@plt+0x1bfc>
   11e18:	ldr	r3, [sp, #44]	; 0x2c
   11e1c:	eor	r3, r3, #1
   11e20:	cmp	sl, #2
   11e24:	movne	r3, #0
   11e28:	andeq	r3, r3, #1
   11e2c:	cmp	r3, #0
   11e30:	moveq	r2, fp
   11e34:	beq	11e78 <__assert_fail@plt+0x10fc>
   11e38:	cmp	r7, fp
   11e3c:	ldrhi	r2, [sp, #36]	; 0x24
   11e40:	movhi	r1, #39	; 0x27
   11e44:	strbhi	r1, [r2, fp]
   11e48:	add	r2, fp, #1
   11e4c:	cmp	r7, r2
   11e50:	ldrhi	r1, [sp, #36]	; 0x24
   11e54:	movhi	r0, #36	; 0x24
   11e58:	strbhi	r0, [r1, r2]
   11e5c:	add	r2, fp, #2
   11e60:	cmp	r7, r2
   11e64:	ldrhi	r1, [sp, #36]	; 0x24
   11e68:	movhi	r0, #39	; 0x27
   11e6c:	strbhi	r0, [r1, r2]
   11e70:	add	r2, fp, #3
   11e74:	str	r3, [sp, #44]	; 0x2c
   11e78:	cmp	r7, r2
   11e7c:	ldrhi	r3, [sp, #36]	; 0x24
   11e80:	movhi	r1, #92	; 0x5c
   11e84:	strbhi	r1, [r3, r2]
   11e88:	add	fp, r2, #1
   11e8c:	cmp	r5, #0
   11e90:	beq	127fc <__assert_fail@plt+0x1a80>
   11e94:	add	r3, r6, #1
   11e98:	ldr	r1, [sp, #28]
   11e9c:	cmp	r1, r3
   11ea0:	bls	1280c <__assert_fail@plt+0x1a90>
   11ea4:	ldr	r1, [sp, #52]	; 0x34
   11ea8:	ldrb	r3, [r1, r3]
   11eac:	sub	r3, r3, #48	; 0x30
   11eb0:	uxtb	r3, r3
   11eb4:	cmp	r3, #9
   11eb8:	bhi	12818 <__assert_fail@plt+0x1a9c>
   11ebc:	cmp	r7, fp
   11ec0:	movhi	r3, #48	; 0x30
   11ec4:	ldrhi	r1, [sp, #36]	; 0x24
   11ec8:	strbhi	r3, [r1, fp]
   11ecc:	add	r3, r2, #2
   11ed0:	cmp	r7, r3
   11ed4:	movhi	r1, #48	; 0x30
   11ed8:	ldrhi	r0, [sp, #36]	; 0x24
   11edc:	strbhi	r1, [r0, r3]
   11ee0:	add	fp, r2, #3
   11ee4:	ldr	r8, [sp, #32]
   11ee8:	mov	r4, #48	; 0x30
   11eec:	b	121c8 <__assert_fail@plt+0x144c>
   11ef0:	ldr	r3, [sp, #156]	; 0x9c
   11ef4:	tst	r3, #1
   11ef8:	bne	122bc <__assert_fail@plt+0x1540>
   11efc:	ldr	r5, [sp, #48]	; 0x30
   11f00:	mov	r8, r5
   11f04:	b	121c8 <__assert_fail@plt+0x144c>
   11f08:	cmp	sl, #2
   11f0c:	beq	11f24 <__assert_fail@plt+0x11a8>
   11f10:	cmp	sl, #5
   11f14:	beq	11f3c <__assert_fail@plt+0x11c0>
   11f18:	mov	r8, #0
   11f1c:	mov	r5, r8
   11f20:	b	121c8 <__assert_fail@plt+0x144c>
   11f24:	ldr	r3, [sp, #32]
   11f28:	cmp	r3, #0
   11f2c:	bne	1298c <__assert_fail@plt+0x1c10>
   11f30:	mov	r8, r3
   11f34:	mov	r5, r3
   11f38:	b	121c8 <__assert_fail@plt+0x144c>
   11f3c:	ldr	r3, [sp, #156]	; 0x9c
   11f40:	tst	r3, #4
   11f44:	beq	12824 <__assert_fail@plt+0x1aa8>
   11f48:	add	r3, r6, #2
   11f4c:	ldr	r2, [sp, #28]
   11f50:	cmp	r2, r3
   11f54:	bls	12830 <__assert_fail@plt+0x1ab4>
   11f58:	ldr	r2, [sp, #52]	; 0x34
   11f5c:	add	r2, r2, r6
   11f60:	ldrb	r2, [r2, #1]
   11f64:	cmp	r2, #63	; 0x3f
   11f68:	movne	r8, #0
   11f6c:	movne	r5, r8
   11f70:	bne	121c8 <__assert_fail@plt+0x144c>
   11f74:	ldr	r2, [sp, #52]	; 0x34
   11f78:	ldrb	r2, [r2, r3]
   11f7c:	sub	r1, r2, #33	; 0x21
   11f80:	cmp	r1, #29
   11f84:	ldrls	pc, [pc, r1, lsl #2]
   11f88:	b	1283c <__assert_fail@plt+0x1ac0>
   11f8c:	andeq	r2, r1, r4
   11f90:	andeq	r2, r1, ip, lsr r8
   11f94:	andeq	r2, r1, ip, lsr r8
   11f98:	andeq	r2, r1, ip, lsr r8
   11f9c:	andeq	r2, r1, ip, lsr r8
   11fa0:	andeq	r2, r1, ip, lsr r8
   11fa4:	andeq	r2, r1, r4
   11fa8:	andeq	r2, r1, r4
   11fac:	andeq	r2, r1, r4
   11fb0:	andeq	r2, r1, ip, lsr r8
   11fb4:	andeq	r2, r1, ip, lsr r8
   11fb8:	andeq	r2, r1, ip, lsr r8
   11fbc:	andeq	r2, r1, r4
   11fc0:	andeq	r2, r1, ip, lsr r8
   11fc4:	andeq	r2, r1, r4
   11fc8:	andeq	r2, r1, ip, lsr r8
   11fcc:	andeq	r2, r1, ip, lsr r8
   11fd0:	andeq	r2, r1, ip, lsr r8
   11fd4:	andeq	r2, r1, ip, lsr r8
   11fd8:	andeq	r2, r1, ip, lsr r8
   11fdc:	andeq	r2, r1, ip, lsr r8
   11fe0:	andeq	r2, r1, ip, lsr r8
   11fe4:	andeq	r2, r1, ip, lsr r8
   11fe8:	andeq	r2, r1, ip, lsr r8
   11fec:	andeq	r2, r1, ip, lsr r8
   11ff0:	andeq	r2, r1, ip, lsr r8
   11ff4:	andeq	r2, r1, ip, lsr r8
   11ff8:	andeq	r2, r1, r4
   11ffc:	andeq	r2, r1, r4
   12000:	andeq	r2, r1, r4
   12004:	ldr	r1, [sp, #32]
   12008:	cmp	r1, #0
   1200c:	bne	12a4c <__assert_fail@plt+0x1cd0>
   12010:	cmp	r7, fp
   12014:	movhi	r1, #63	; 0x3f
   12018:	ldrhi	r0, [sp, #36]	; 0x24
   1201c:	strbhi	r1, [r0, fp]
   12020:	add	r1, fp, #1
   12024:	cmp	r7, r1
   12028:	ldrhi	r0, [sp, #36]	; 0x24
   1202c:	movhi	ip, #34	; 0x22
   12030:	strbhi	ip, [r0, r1]
   12034:	add	r1, fp, #2
   12038:	cmp	r7, r1
   1203c:	ldrhi	r0, [sp, #36]	; 0x24
   12040:	movhi	ip, #34	; 0x22
   12044:	strbhi	ip, [r0, r1]
   12048:	add	r1, fp, #3
   1204c:	cmp	r7, r1
   12050:	movhi	r0, #63	; 0x3f
   12054:	ldrhi	ip, [sp, #36]	; 0x24
   12058:	strbhi	r0, [ip, r1]
   1205c:	add	fp, fp, #4
   12060:	ldr	r5, [sp, #32]
   12064:	mov	r8, r5
   12068:	mov	r4, r2
   1206c:	mov	r6, r3
   12070:	b	121c8 <__assert_fail@plt+0x144c>
   12074:	mov	r3, #102	; 0x66
   12078:	b	12130 <__assert_fail@plt+0x13b4>
   1207c:	mov	r3, #118	; 0x76
   12080:	b	12130 <__assert_fail@plt+0x13b4>
   12084:	cmp	sl, #2
   12088:	beq	120f4 <__assert_fail@plt+0x1378>
   1208c:	ldr	r3, [sp, #48]	; 0x30
   12090:	ldr	r2, [sp, #32]
   12094:	and	r3, r3, r2
   12098:	tst	r9, r3
   1209c:	moveq	r3, r4
   120a0:	beq	12130 <__assert_fail@plt+0x13b4>
   120a4:	mov	r8, #0
   120a8:	mov	r5, r8
   120ac:	eor	r5, r5, #1
   120b0:	ldr	r3, [sp, #44]	; 0x2c
   120b4:	and	r5, r5, r3
   120b8:	tst	r5, #255	; 0xff
   120bc:	beq	1229c <__assert_fail@plt+0x1520>
   120c0:	cmp	r7, fp
   120c4:	ldrhi	r3, [sp, #36]	; 0x24
   120c8:	movhi	r2, #39	; 0x27
   120cc:	strbhi	r2, [r3, fp]
   120d0:	add	r3, fp, #1
   120d4:	cmp	r7, r3
   120d8:	ldrhi	r2, [sp, #36]	; 0x24
   120dc:	movhi	r1, #39	; 0x27
   120e0:	strbhi	r1, [r2, r3]
   120e4:	add	fp, fp, #2
   120e8:	mov	r3, #0
   120ec:	str	r3, [sp, #44]	; 0x2c
   120f0:	b	1229c <__assert_fail@plt+0x1520>
   120f4:	ldr	r3, [sp, #32]
   120f8:	cmp	r3, #0
   120fc:	bne	12998 <__assert_fail@plt+0x1c1c>
   12100:	mov	r8, r3
   12104:	mov	r5, r3
   12108:	b	120ac <__assert_fail@plt+0x1330>
   1210c:	mov	r3, #110	; 0x6e
   12110:	b	12118 <__assert_fail@plt+0x139c>
   12114:	mov	r3, #116	; 0x74
   12118:	ldr	r2, [sp, #32]
   1211c:	cmp	sl, #2
   12120:	movne	r2, #0
   12124:	andeq	r2, r2, #1
   12128:	cmp	r2, #0
   1212c:	bne	12150 <__assert_fail@plt+0x13d4>
   12130:	ldr	r2, [sp, #48]	; 0x30
   12134:	cmp	r2, #0
   12138:	moveq	r8, r2
   1213c:	moveq	r5, r2
   12140:	beq	121c8 <__assert_fail@plt+0x144c>
   12144:	mov	r4, r3
   12148:	mov	r8, #0
   1214c:	b	12220 <__assert_fail@plt+0x14a4>
   12150:	mov	r8, sl
   12154:	mov	sl, r7
   12158:	b	129c4 <__assert_fail@plt+0x1c48>
   1215c:	mov	r3, #97	; 0x61
   12160:	b	12130 <__assert_fail@plt+0x13b4>
   12164:	ldr	r3, [sp, #28]
   12168:	cmn	r3, #1
   1216c:	beq	12198 <__assert_fail@plt+0x141c>
   12170:	ldr	r3, [sp, #28]
   12174:	subs	r3, r3, #1
   12178:	movne	r3, #1
   1217c:	cmp	r3, #0
   12180:	bne	12848 <__assert_fail@plt+0x1acc>
   12184:	cmp	r6, #0
   12188:	beq	121b0 <__assert_fail@plt+0x1434>
   1218c:	mov	r8, #0
   12190:	mov	r5, r8
   12194:	b	121c8 <__assert_fail@plt+0x144c>
   12198:	ldr	r3, [sp, #52]	; 0x34
   1219c:	ldrb	r3, [r3, #1]
   121a0:	adds	r3, r3, #0
   121a4:	movne	r3, #1
   121a8:	b	1217c <__assert_fail@plt+0x1400>
   121ac:	mov	r8, #0
   121b0:	ldr	r5, [sp, #32]
   121b4:	cmp	sl, #2
   121b8:	movne	r5, #0
   121bc:	andeq	r5, r5, #1
   121c0:	cmp	r5, #0
   121c4:	bne	12378 <__assert_fail@plt+0x15fc>
   121c8:	ldr	r3, [sp, #68]	; 0x44
   121cc:	cmp	sl, #2
   121d0:	orreq	r3, r3, #1
   121d4:	eor	r3, r3, #1
   121d8:	ldr	r2, [sp, #32]
   121dc:	orr	r3, r2, r3
   121e0:	tst	r3, #255	; 0xff
   121e4:	beq	12214 <__assert_fail@plt+0x1498>
   121e8:	ldr	r3, [sp, #160]	; 0xa0
   121ec:	cmp	r3, #0
   121f0:	beq	12214 <__assert_fail@plt+0x1498>
   121f4:	lsr	r2, r4, #5
   121f8:	uxtb	r2, r2
   121fc:	and	r3, r4, #31
   12200:	ldr	r1, [sp, #160]	; 0xa0
   12204:	ldr	r2, [r1, r2, lsl #2]
   12208:	lsr	r3, r2, r3
   1220c:	tst	r3, #1
   12210:	bne	12220 <__assert_fail@plt+0x14a4>
   12214:	ldr	r3, [sp, #56]	; 0x38
   12218:	cmp	r3, #0
   1221c:	beq	120ac <__assert_fail@plt+0x1330>
   12220:	ldr	r3, [sp, #32]
   12224:	cmp	r3, #0
   12228:	bne	12a34 <__assert_fail@plt+0x1cb8>
   1222c:	ldr	r3, [sp, #44]	; 0x2c
   12230:	eor	r3, r3, #1
   12234:	cmp	sl, #2
   12238:	movne	r3, #0
   1223c:	andeq	r3, r3, #1
   12240:	cmp	r3, #0
   12244:	beq	12288 <__assert_fail@plt+0x150c>
   12248:	cmp	r7, fp
   1224c:	ldrhi	r2, [sp, #36]	; 0x24
   12250:	movhi	r1, #39	; 0x27
   12254:	strbhi	r1, [r2, fp]
   12258:	add	r2, fp, #1
   1225c:	cmp	r7, r2
   12260:	ldrhi	r1, [sp, #36]	; 0x24
   12264:	movhi	r0, #36	; 0x24
   12268:	strbhi	r0, [r1, r2]
   1226c:	add	r2, fp, #2
   12270:	cmp	r7, r2
   12274:	ldrhi	r1, [sp, #36]	; 0x24
   12278:	movhi	r0, #39	; 0x27
   1227c:	strbhi	r0, [r1, r2]
   12280:	add	fp, fp, #3
   12284:	str	r3, [sp, #44]	; 0x2c
   12288:	cmp	r7, fp
   1228c:	ldrhi	r3, [sp, #36]	; 0x24
   12290:	movhi	r2, #92	; 0x5c
   12294:	strbhi	r2, [r3, fp]
   12298:	add	fp, fp, #1
   1229c:	cmp	fp, r7
   122a0:	ldrcc	r3, [sp, #36]	; 0x24
   122a4:	strbcc	r4, [r3, fp]
   122a8:	add	fp, fp, #1
   122ac:	ldr	r3, [sp, #40]	; 0x28
   122b0:	cmp	r8, #0
   122b4:	moveq	r3, #0
   122b8:	str	r3, [sp, #40]	; 0x28
   122bc:	add	r6, r6, #1
   122c0:	ldr	r3, [sp, #28]
   122c4:	cmn	r3, #1
   122c8:	beq	12854 <__assert_fail@plt+0x1ad8>
   122cc:	ldr	r3, [sp, #28]
   122d0:	subs	r8, r3, r6
   122d4:	movne	r8, #1
   122d8:	cmp	r8, #0
   122dc:	beq	12868 <__assert_fail@plt+0x1aec>
   122e0:	ldr	r5, [sp, #48]	; 0x30
   122e4:	cmp	sl, #2
   122e8:	moveq	r5, #0
   122ec:	andne	r5, r5, #1
   122f0:	ldr	r3, [sp, #60]	; 0x3c
   122f4:	adds	r9, r3, #0
   122f8:	movne	r9, #1
   122fc:	ands	r2, r5, r9
   12300:	str	r2, [sp, #56]	; 0x38
   12304:	beq	11bcc <__assert_fail@plt+0xe50>
   12308:	add	r4, r6, r3
   1230c:	ldr	r2, [sp, #28]
   12310:	cmp	r3, #1
   12314:	movls	r3, #0
   12318:	movhi	r3, #1
   1231c:	cmn	r2, #1
   12320:	movne	r3, #0
   12324:	cmp	r3, #0
   12328:	beq	12338 <__assert_fail@plt+0x15bc>
   1232c:	ldr	r0, [sp, #52]	; 0x34
   12330:	bl	10cb0 <strlen@plt>
   12334:	str	r0, [sp, #28]
   12338:	ldr	r3, [sp, #28]
   1233c:	cmp	r3, r4
   12340:	bcc	11bc4 <__assert_fail@plt+0xe48>
   12344:	ldr	r2, [sp, #60]	; 0x3c
   12348:	ldr	r1, [sp, #72]	; 0x48
   1234c:	ldr	r3, [sp, #52]	; 0x34
   12350:	add	r0, r3, r6
   12354:	bl	10be4 <memcmp@plt>
   12358:	cmp	r0, #0
   1235c:	bne	11de4 <__assert_fail@plt+0x1068>
   12360:	ldr	r3, [sp, #32]
   12364:	cmp	r3, #0
   12368:	beq	11bcc <__assert_fail@plt+0xe50>
   1236c:	mov	r8, sl
   12370:	mov	sl, r7
   12374:	b	129c4 <__assert_fail@plt+0x1c48>
   12378:	mov	r8, sl
   1237c:	mov	sl, r7
   12380:	b	129c4 <__assert_fail@plt+0x1c48>
   12384:	cmp	sl, #2
   12388:	strne	r8, [sp, #80]	; 0x50
   1238c:	movne	r5, #0
   12390:	bne	121c8 <__assert_fail@plt+0x144c>
   12394:	ldr	r3, [sp, #32]
   12398:	cmp	r3, #0
   1239c:	bne	129b0 <__assert_fail@plt+0x1c34>
   123a0:	ldr	r2, [sp, #76]	; 0x4c
   123a4:	adds	r3, r7, #0
   123a8:	movne	r3, #1
   123ac:	cmp	r2, #0
   123b0:	movne	r3, #0
   123b4:	cmp	r3, #0
   123b8:	movne	r3, #0
   123bc:	bne	123ec <__assert_fail@plt+0x1670>
   123c0:	cmp	r7, fp
   123c4:	ldrhi	r3, [sp, #36]	; 0x24
   123c8:	movhi	r2, #39	; 0x27
   123cc:	strbhi	r2, [r3, fp]
   123d0:	add	r3, fp, #1
   123d4:	cmp	r7, r3
   123d8:	ldrhi	r2, [sp, #36]	; 0x24
   123dc:	movhi	r1, #92	; 0x5c
   123e0:	strbhi	r1, [r2, r3]
   123e4:	mov	r3, r7
   123e8:	ldr	r7, [sp, #76]	; 0x4c
   123ec:	add	r2, fp, #2
   123f0:	cmp	r2, r3
   123f4:	ldrcc	r1, [sp, #36]	; 0x24
   123f8:	movcc	r0, #39	; 0x27
   123fc:	strbcc	r0, [r1, r2]
   12400:	add	fp, fp, #3
   12404:	ldr	r2, [sp, #32]
   12408:	mov	r5, r2
   1240c:	str	r8, [sp, #80]	; 0x50
   12410:	str	r2, [sp, #44]	; 0x2c
   12414:	str	r7, [sp, #76]	; 0x4c
   12418:	mov	r7, r3
   1241c:	b	121c8 <__assert_fail@plt+0x144c>
   12420:	ldr	r5, [sp, #84]	; 0x54
   12424:	cmp	r5, #1
   12428:	beq	12458 <__assert_fail@plt+0x16dc>
   1242c:	mov	r3, #0
   12430:	str	r3, [sp, #104]	; 0x68
   12434:	str	r3, [sp, #108]	; 0x6c
   12438:	ldr	r3, [sp, #28]
   1243c:	cmn	r3, #1
   12440:	beq	1248c <__assert_fail@plt+0x1710>
   12444:	mov	r3, #0
   12448:	str	r4, [sp, #88]	; 0x58
   1244c:	str	fp, [sp, #92]	; 0x5c
   12450:	mov	fp, r3
   12454:	b	125b4 <__assert_fail@plt+0x1838>
   12458:	bl	10c98 <__ctype_b_loc@plt>
   1245c:	ldr	r2, [r0]
   12460:	lsl	r3, r4, #1
   12464:	ldrh	r8, [r2, r3]
   12468:	lsr	r8, r8, #14
   1246c:	and	r8, r8, #1
   12470:	mov	r2, r5
   12474:	eor	r5, r8, #1
   12478:	ldr	r3, [sp, #48]	; 0x30
   1247c:	and	r5, r5, r3
   12480:	ands	r5, r5, #255	; 0xff
   12484:	beq	121c8 <__assert_fail@plt+0x144c>
   12488:	b	1264c <__assert_fail@plt+0x18d0>
   1248c:	ldr	r0, [sp, #52]	; 0x34
   12490:	bl	10cb0 <strlen@plt>
   12494:	str	r0, [sp, #28]
   12498:	b	12444 <__assert_fail@plt+0x16c8>
   1249c:	mov	r2, fp
   124a0:	mov	r1, r4
   124a4:	ldr	r4, [sp, #88]	; 0x58
   124a8:	ldr	fp, [sp, #92]	; 0x5c
   124ac:	ldr	r0, [sp, #28]
   124b0:	cmp	r0, r5
   124b4:	bls	12680 <__assert_fail@plt+0x1904>
   124b8:	ldrb	r3, [r1]
   124bc:	cmp	r3, #0
   124c0:	beq	12688 <__assert_fail@plt+0x190c>
   124c4:	mov	r3, r1
   124c8:	add	r2, r2, #1
   124cc:	add	r1, r6, r2
   124d0:	cmp	r0, r1
   124d4:	bls	12690 <__assert_fail@plt+0x1914>
   124d8:	ldrb	r1, [r3, #1]!
   124dc:	cmp	r1, #0
   124e0:	bne	124c8 <__assert_fail@plt+0x174c>
   124e4:	mov	r8, #0
   124e8:	b	12644 <__assert_fail@plt+0x18c8>
   124ec:	cmp	r4, r5
   124f0:	beq	12590 <__assert_fail@plt+0x1814>
   124f4:	ldrb	r3, [r4, #1]!
   124f8:	sub	r3, r3, #91	; 0x5b
   124fc:	cmp	r3, #33	; 0x21
   12500:	ldrls	pc, [pc, r3, lsl #2]
   12504:	b	124ec <__assert_fail@plt+0x1770>
   12508:			; <UNDEFINED> instruction: 0x000129bc
   1250c:			; <UNDEFINED> instruction: 0x000129bc
   12510:	andeq	r2, r1, ip, ror #9
   12514:			; <UNDEFINED> instruction: 0x000129bc
   12518:	andeq	r2, r1, ip, ror #9
   1251c:			; <UNDEFINED> instruction: 0x000129bc
   12520:	andeq	r2, r1, ip, ror #9
   12524:	andeq	r2, r1, ip, ror #9
   12528:	andeq	r2, r1, ip, ror #9
   1252c:	andeq	r2, r1, ip, ror #9
   12530:	andeq	r2, r1, ip, ror #9
   12534:	andeq	r2, r1, ip, ror #9
   12538:	andeq	r2, r1, ip, ror #9
   1253c:	andeq	r2, r1, ip, ror #9
   12540:	andeq	r2, r1, ip, ror #9
   12544:	andeq	r2, r1, ip, ror #9
   12548:	andeq	r2, r1, ip, ror #9
   1254c:	andeq	r2, r1, ip, ror #9
   12550:	andeq	r2, r1, ip, ror #9
   12554:	andeq	r2, r1, ip, ror #9
   12558:	andeq	r2, r1, ip, ror #9
   1255c:	andeq	r2, r1, ip, ror #9
   12560:	andeq	r2, r1, ip, ror #9
   12564:	andeq	r2, r1, ip, ror #9
   12568:	andeq	r2, r1, ip, ror #9
   1256c:	andeq	r2, r1, ip, ror #9
   12570:	andeq	r2, r1, ip, ror #9
   12574:	andeq	r2, r1, ip, ror #9
   12578:	andeq	r2, r1, ip, ror #9
   1257c:	andeq	r2, r1, ip, ror #9
   12580:	andeq	r2, r1, ip, ror #9
   12584:	andeq	r2, r1, ip, ror #9
   12588:	andeq	r2, r1, ip, ror #9
   1258c:			; <UNDEFINED> instruction: 0x000129bc
   12590:	ldr	r0, [sp, #100]	; 0x64
   12594:	bl	10c08 <iswprint@plt>
   12598:	cmp	r0, #0
   1259c:	moveq	r8, #0
   125a0:	add	fp, fp, r9
   125a4:	add	r0, sp, #104	; 0x68
   125a8:	bl	10bd8 <mbsinit@plt>
   125ac:	cmp	r0, #0
   125b0:	bne	12624 <__assert_fail@plt+0x18a8>
   125b4:	add	r5, r6, fp
   125b8:	ldr	r3, [sp, #52]	; 0x34
   125bc:	add	r4, r3, r5
   125c0:	add	r3, sp, #104	; 0x68
   125c4:	ldr	r2, [sp, #28]
   125c8:	sub	r2, r2, r5
   125cc:	mov	r1, r4
   125d0:	add	r0, sp, #100	; 0x64
   125d4:	bl	13f1c <__assert_fail@plt+0x31a0>
   125d8:	subs	r9, r0, #0
   125dc:	beq	12698 <__assert_fail@plt+0x191c>
   125e0:	cmn	r9, #1
   125e4:	beq	12634 <__assert_fail@plt+0x18b8>
   125e8:	cmn	r9, #2
   125ec:	beq	1249c <__assert_fail@plt+0x1720>
   125f0:	ldr	r3, [sp, #32]
   125f4:	cmp	sl, #2
   125f8:	movne	r3, #0
   125fc:	andeq	r3, r3, #1
   12600:	cmp	r3, #0
   12604:	beq	12590 <__assert_fail@plt+0x1814>
   12608:	cmp	r9, #1
   1260c:	bls	12590 <__assert_fail@plt+0x1814>
   12610:	sub	r3, r9, #1
   12614:	add	r5, r3, r5
   12618:	ldr	r3, [sp, #52]	; 0x34
   1261c:	add	r5, r3, r5
   12620:	b	124f4 <__assert_fail@plt+0x1778>
   12624:	ldr	r4, [sp, #88]	; 0x58
   12628:	mov	r2, fp
   1262c:	ldr	fp, [sp, #92]	; 0x5c
   12630:	b	12644 <__assert_fail@plt+0x18c8>
   12634:	ldr	r4, [sp, #88]	; 0x58
   12638:	mov	r2, fp
   1263c:	ldr	fp, [sp, #92]	; 0x5c
   12640:	mov	r8, #0
   12644:	cmp	r2, #1
   12648:	bls	12474 <__assert_fail@plt+0x16f8>
   1264c:	add	r1, r6, r2
   12650:	ldr	ip, [sp, #64]	; 0x40
   12654:	mov	r5, #0
   12658:	eor	r3, r8, #1
   1265c:	ldr	r2, [sp, #48]	; 0x30
   12660:	and	r3, r3, r2
   12664:	uxtb	r3, r3
   12668:	ldr	r9, [sp, #32]
   1266c:	ldr	lr, [sp, #44]	; 0x2c
   12670:	ldr	r2, [sp, #56]	; 0x38
   12674:	str	r8, [sp, #56]	; 0x38
   12678:	ldr	r0, [sp, #36]	; 0x24
   1267c:	b	12718 <__assert_fail@plt+0x199c>
   12680:	mov	r8, #0
   12684:	b	12644 <__assert_fail@plt+0x18c8>
   12688:	mov	r8, #0
   1268c:	b	12644 <__assert_fail@plt+0x18c8>
   12690:	mov	r8, #0
   12694:	b	12644 <__assert_fail@plt+0x18c8>
   12698:	ldr	r4, [sp, #88]	; 0x58
   1269c:	mov	r2, fp
   126a0:	ldr	fp, [sp, #92]	; 0x5c
   126a4:	b	12644 <__assert_fail@plt+0x18c8>
   126a8:	cmp	r2, #0
   126ac:	beq	126c0 <__assert_fail@plt+0x1944>
   126b0:	cmp	r7, fp
   126b4:	movhi	r2, #92	; 0x5c
   126b8:	strbhi	r2, [r0, fp]
   126bc:	add	fp, fp, #1
   126c0:	add	r8, r6, #1
   126c4:	cmp	r1, r8
   126c8:	bls	127d0 <__assert_fail@plt+0x1a54>
   126cc:	eor	r2, r5, #1
   126d0:	and	r2, r2, lr
   126d4:	ands	r2, r2, #255	; 0xff
   126d8:	beq	127ec <__assert_fail@plt+0x1a70>
   126dc:	cmp	r7, fp
   126e0:	movhi	r2, #39	; 0x27
   126e4:	strbhi	r2, [r0, fp]
   126e8:	add	r2, fp, #1
   126ec:	cmp	r7, r2
   126f0:	movhi	lr, #39	; 0x27
   126f4:	strbhi	lr, [r0, r2]
   126f8:	add	fp, fp, #2
   126fc:	mov	r6, r8
   12700:	mov	r2, r3
   12704:	mov	lr, r3
   12708:	cmp	r7, fp
   1270c:	strbhi	r4, [r0, fp]
   12710:	add	fp, fp, #1
   12714:	ldrb	r4, [ip, #1]!
   12718:	cmp	r3, #0
   1271c:	beq	126a8 <__assert_fail@plt+0x192c>
   12720:	cmp	r9, #0
   12724:	bne	12a28 <__assert_fail@plt+0x1cac>
   12728:	eor	r5, lr, #1
   1272c:	cmp	sl, #2
   12730:	movne	r5, #0
   12734:	andeq	r5, r5, #1
   12738:	cmp	r5, #0
   1273c:	beq	12774 <__assert_fail@plt+0x19f8>
   12740:	cmp	r7, fp
   12744:	movhi	lr, #39	; 0x27
   12748:	strbhi	lr, [r0, fp]
   1274c:	add	lr, fp, #1
   12750:	cmp	r7, lr
   12754:	movhi	r8, #36	; 0x24
   12758:	strbhi	r8, [r0, lr]
   1275c:	add	lr, fp, #2
   12760:	cmp	r7, lr
   12764:	movhi	r8, #39	; 0x27
   12768:	strbhi	r8, [r0, lr]
   1276c:	add	fp, fp, #3
   12770:	mov	lr, r5
   12774:	cmp	r7, fp
   12778:	movhi	r5, #92	; 0x5c
   1277c:	strbhi	r5, [r0, fp]
   12780:	add	r5, fp, #1
   12784:	cmp	r7, r5
   12788:	lsrhi	r8, r4, #6
   1278c:	addhi	r8, r8, #48	; 0x30
   12790:	strbhi	r8, [r0, r5]
   12794:	add	r8, fp, #2
   12798:	cmp	r7, r8
   1279c:	lsrhi	r5, r4, #3
   127a0:	andhi	r5, r5, #7
   127a4:	addhi	r5, r5, #48	; 0x30
   127a8:	strbhi	r5, [r0, r8]
   127ac:	add	fp, fp, #3
   127b0:	and	r4, r4, #7
   127b4:	add	r4, r4, #48	; 0x30
   127b8:	add	r5, r6, #1
   127bc:	cmp	r1, r5
   127c0:	bls	127dc <__assert_fail@plt+0x1a60>
   127c4:	mov	r6, r5
   127c8:	mov	r5, r3
   127cc:	b	12708 <__assert_fail@plt+0x198c>
   127d0:	str	lr, [sp, #44]	; 0x2c
   127d4:	ldr	r8, [sp, #56]	; 0x38
   127d8:	b	120ac <__assert_fail@plt+0x1330>
   127dc:	str	lr, [sp, #44]	; 0x2c
   127e0:	ldr	r8, [sp, #56]	; 0x38
   127e4:	mov	r5, r3
   127e8:	b	120ac <__assert_fail@plt+0x1330>
   127ec:	mov	r6, r8
   127f0:	b	12708 <__assert_fail@plt+0x198c>
   127f4:	mov	r5, #0
   127f8:	b	121c8 <__assert_fail@plt+0x144c>
   127fc:	mov	r8, r5
   12800:	ldr	r5, [sp, #48]	; 0x30
   12804:	mov	r4, #48	; 0x30
   12808:	b	121c8 <__assert_fail@plt+0x144c>
   1280c:	ldr	r8, [sp, #32]
   12810:	mov	r4, #48	; 0x30
   12814:	b	121c8 <__assert_fail@plt+0x144c>
   12818:	ldr	r8, [sp, #32]
   1281c:	mov	r4, #48	; 0x30
   12820:	b	121c8 <__assert_fail@plt+0x144c>
   12824:	mov	r8, #0
   12828:	mov	r5, r8
   1282c:	b	121c8 <__assert_fail@plt+0x144c>
   12830:	mov	r8, #0
   12834:	mov	r5, r8
   12838:	b	121c8 <__assert_fail@plt+0x144c>
   1283c:	mov	r8, #0
   12840:	mov	r5, r8
   12844:	b	121c8 <__assert_fail@plt+0x144c>
   12848:	mov	r8, #0
   1284c:	mov	r5, r8
   12850:	b	121c8 <__assert_fail@plt+0x144c>
   12854:	ldr	r3, [sp, #52]	; 0x34
   12858:	ldrb	r8, [r3, r6]
   1285c:	adds	r8, r8, #0
   12860:	movne	r8, #1
   12864:	b	122d8 <__assert_fail@plt+0x155c>
   12868:	cmp	sl, #2
   1286c:	movne	r3, #0
   12870:	moveq	r3, #1
   12874:	ldr	r1, [sp, #32]
   12878:	mov	r2, r1
   1287c:	and	r2, r2, r3
   12880:	cmp	fp, #0
   12884:	movne	r2, #0
   12888:	andeq	r2, r2, #1
   1288c:	cmp	r2, #0
   12890:	bne	12a40 <__assert_fail@plt+0x1cc4>
   12894:	eor	r2, r1, #1
   12898:	and	r3, r3, r2
   1289c:	ldr	r1, [sp, #80]	; 0x50
   128a0:	tst	r1, r3
   128a4:	beq	1291c <__assert_fail@plt+0x1ba0>
   128a8:	ldr	r3, [sp, #40]	; 0x28
   128ac:	cmp	r3, #0
   128b0:	bne	128d8 <__assert_fail@plt+0x1b5c>
   128b4:	ldr	r1, [sp, #76]	; 0x4c
   128b8:	clz	r3, r7
   128bc:	lsr	r3, r3, #5
   128c0:	cmp	r1, #0
   128c4:	moveq	r3, #0
   128c8:	cmp	r3, #0
   128cc:	beq	1291c <__assert_fail@plt+0x1ba0>
   128d0:	ldr	r7, [sp, #76]	; 0x4c
   128d4:	b	1196c <__assert_fail@plt+0xbf0>
   128d8:	ldr	r3, [sp, #168]	; 0xa8
   128dc:	str	r3, [sp, #16]
   128e0:	ldr	r3, [sp, #164]	; 0xa4
   128e4:	str	r3, [sp, #12]
   128e8:	ldr	r3, [sp, #160]	; 0xa0
   128ec:	str	r3, [sp, #8]
   128f0:	ldr	r3, [sp, #156]	; 0x9c
   128f4:	str	r3, [sp, #4]
   128f8:	mov	r3, #5
   128fc:	str	r3, [sp]
   12900:	ldr	r3, [sp, #28]
   12904:	ldr	r2, [sp, #52]	; 0x34
   12908:	ldr	r1, [sp, #76]	; 0x4c
   1290c:	ldr	r0, [sp, #36]	; 0x24
   12910:	bl	1190c <__assert_fail@plt+0xb90>
   12914:	mov	fp, r0
   12918:	b	12a1c <__assert_fail@plt+0x1ca0>
   1291c:	mov	sl, r7
   12920:	ldr	r3, [sp, #72]	; 0x48
   12924:	cmp	r3, #0
   12928:	moveq	r2, #0
   1292c:	andne	r2, r2, #1
   12930:	cmp	r2, #0
   12934:	beq	12964 <__assert_fail@plt+0x1be8>
   12938:	mov	r2, r3
   1293c:	ldrb	r3, [r3]
   12940:	cmp	r3, #0
   12944:	beq	12964 <__assert_fail@plt+0x1be8>
   12948:	ldr	r1, [sp, #36]	; 0x24
   1294c:	cmp	sl, fp
   12950:	strbhi	r3, [r1, fp]
   12954:	add	fp, fp, #1
   12958:	ldrb	r3, [r2, #1]!
   1295c:	cmp	r3, #0
   12960:	bne	1294c <__assert_fail@plt+0x1bd0>
   12964:	cmp	sl, fp
   12968:	movhi	r3, #0
   1296c:	ldrhi	r2, [sp, #36]	; 0x24
   12970:	strbhi	r3, [r2, fp]
   12974:	b	12a1c <__assert_fail@plt+0x1ca0>
   12978:	mov	r8, sl
   1297c:	mov	sl, r7
   12980:	ldr	r3, [sp, #32]
   12984:	str	r3, [sp, #48]	; 0x30
   12988:	b	129c4 <__assert_fail@plt+0x1c48>
   1298c:	mov	r8, sl
   12990:	mov	sl, r7
   12994:	b	129c4 <__assert_fail@plt+0x1c48>
   12998:	mov	r8, sl
   1299c:	mov	sl, r7
   129a0:	b	129c4 <__assert_fail@plt+0x1c48>
   129a4:	andeq	r4, r1, ip, asr #22
   129a8:	andeq	r4, r1, ip, asr fp
   129ac:	andeq	r4, r1, r0, asr fp
   129b0:	mov	r8, sl
   129b4:	mov	sl, r7
   129b8:	b	129c4 <__assert_fail@plt+0x1c48>
   129bc:	mov	r8, sl
   129c0:	mov	sl, r7
   129c4:	ldr	r3, [sp, #48]	; 0x30
   129c8:	cmp	r8, #2
   129cc:	movne	r3, #0
   129d0:	andeq	r3, r3, #1
   129d4:	cmp	r3, #0
   129d8:	movne	r8, #4
   129dc:	ldr	r3, [sp, #168]	; 0xa8
   129e0:	str	r3, [sp, #16]
   129e4:	ldr	r3, [sp, #164]	; 0xa4
   129e8:	str	r3, [sp, #12]
   129ec:	mov	r3, #0
   129f0:	str	r3, [sp, #8]
   129f4:	ldr	r3, [sp, #156]	; 0x9c
   129f8:	bic	r3, r3, #2
   129fc:	str	r3, [sp, #4]
   12a00:	str	r8, [sp]
   12a04:	ldr	r3, [sp, #28]
   12a08:	ldr	r2, [sp, #52]	; 0x34
   12a0c:	mov	r1, sl
   12a10:	ldr	r0, [sp, #36]	; 0x24
   12a14:	bl	1190c <__assert_fail@plt+0xb90>
   12a18:	mov	fp, r0
   12a1c:	mov	r0, fp
   12a20:	add	sp, sp, #116	; 0x74
   12a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a28:	mov	r8, sl
   12a2c:	mov	sl, r7
   12a30:	b	129c4 <__assert_fail@plt+0x1c48>
   12a34:	mov	r8, sl
   12a38:	mov	sl, r7
   12a3c:	b	129c4 <__assert_fail@plt+0x1c48>
   12a40:	mov	r8, sl
   12a44:	mov	sl, r7
   12a48:	b	129c4 <__assert_fail@plt+0x1c48>
   12a4c:	mov	r8, sl
   12a50:	mov	sl, r7
   12a54:	b	129dc <__assert_fail@plt+0x1c60>
   12a58:	mov	r3, #1
   12a5c:	str	r3, [sp, #32]
   12a60:	str	r3, [sp, #48]	; 0x30
   12a64:	str	r3, [sp, #60]	; 0x3c
   12a68:	ldr	r3, [pc, #-196]	; 129ac <__assert_fail@plt+0x1c30>
   12a6c:	str	r3, [sp, #72]	; 0x48
   12a70:	mov	fp, #0
   12a74:	mov	sl, #5
   12a78:	b	119c8 <__assert_fail@plt+0xc4c>
   12a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a80:	sub	sp, sp, #52	; 0x34
   12a84:	mov	r5, r0
   12a88:	str	r1, [sp, #24]
   12a8c:	str	r2, [sp, #28]
   12a90:	mov	r4, r3
   12a94:	bl	10cc8 <__errno_location@plt>
   12a98:	str	r0, [sp, #32]
   12a9c:	ldr	r3, [r0]
   12aa0:	str	r3, [sp, #36]	; 0x24
   12aa4:	ldr	r3, [pc, #396]	; 12c38 <__assert_fail@plt+0x1ebc>
   12aa8:	ldr	r6, [r3]
   12aac:	cmn	r5, #-2147483647	; 0x80000001
   12ab0:	movne	r3, #0
   12ab4:	moveq	r3, #1
   12ab8:	orrs	r3, r3, r5, lsr #31
   12abc:	bne	12bfc <__assert_fail@plt+0x1e80>
   12ac0:	ldr	r3, [pc, #368]	; 12c38 <__assert_fail@plt+0x1ebc>
   12ac4:	ldr	r2, [r3, #4]
   12ac8:	cmp	r5, r2
   12acc:	blt	12b34 <__assert_fail@plt+0x1db8>
   12ad0:	str	r2, [sp, #44]	; 0x2c
   12ad4:	add	r3, r3, #8
   12ad8:	cmp	r6, r3
   12adc:	beq	12c00 <__assert_fail@plt+0x1e84>
   12ae0:	sub	r2, r5, r2
   12ae4:	mov	r3, #8
   12ae8:	str	r3, [sp]
   12aec:	mvn	r3, #-2147483648	; 0x80000000
   12af0:	add	r2, r2, #1
   12af4:	add	r1, sp, #44	; 0x2c
   12af8:	mov	r0, r6
   12afc:	bl	13900 <__assert_fail@plt+0x2b84>
   12b00:	mov	r6, r0
   12b04:	ldr	r3, [pc, #300]	; 12c38 <__assert_fail@plt+0x1ebc>
   12b08:	str	r0, [r3]
   12b0c:	ldr	r7, [pc, #292]	; 12c38 <__assert_fail@plt+0x1ebc>
   12b10:	ldr	r0, [r7, #4]
   12b14:	ldr	r2, [sp, #44]	; 0x2c
   12b18:	sub	r2, r2, r0
   12b1c:	lsl	r2, r2, #3
   12b20:	mov	r1, #0
   12b24:	add	r0, r6, r0, lsl #3
   12b28:	bl	10ce0 <memset@plt>
   12b2c:	ldr	r3, [sp, #44]	; 0x2c
   12b30:	str	r3, [r7, #4]
   12b34:	add	fp, r6, r5, lsl #3
   12b38:	ldr	r8, [r6, r5, lsl #3]
   12b3c:	ldr	r7, [fp, #4]
   12b40:	ldr	r9, [r4, #4]
   12b44:	orr	r9, r9, #1
   12b48:	add	sl, r4, #8
   12b4c:	ldr	r3, [r4, #44]	; 0x2c
   12b50:	str	r3, [sp, #16]
   12b54:	ldr	r3, [r4, #40]	; 0x28
   12b58:	str	r3, [sp, #12]
   12b5c:	str	sl, [sp, #8]
   12b60:	str	r9, [sp, #4]
   12b64:	ldr	r3, [r4]
   12b68:	str	r3, [sp]
   12b6c:	ldr	r3, [sp, #28]
   12b70:	ldr	r2, [sp, #24]
   12b74:	mov	r1, r8
   12b78:	mov	r0, r7
   12b7c:	bl	1190c <__assert_fail@plt+0xb90>
   12b80:	cmp	r8, r0
   12b84:	bhi	12be4 <__assert_fail@plt+0x1e68>
   12b88:	add	r8, r0, #1
   12b8c:	str	r8, [r6, r5, lsl #3]
   12b90:	ldr	r3, [pc, #164]	; 12c3c <__assert_fail@plt+0x1ec0>
   12b94:	cmp	r7, r3
   12b98:	beq	12ba4 <__assert_fail@plt+0x1e28>
   12b9c:	mov	r0, r7
   12ba0:	bl	13dec <__assert_fail@plt+0x3070>
   12ba4:	mov	r0, r8
   12ba8:	bl	1377c <__assert_fail@plt+0x2a00>
   12bac:	mov	r7, r0
   12bb0:	str	r0, [fp, #4]
   12bb4:	ldr	r3, [r4, #44]	; 0x2c
   12bb8:	str	r3, [sp, #16]
   12bbc:	ldr	r3, [r4, #40]	; 0x28
   12bc0:	str	r3, [sp, #12]
   12bc4:	str	sl, [sp, #8]
   12bc8:	str	r9, [sp, #4]
   12bcc:	ldr	r3, [r4]
   12bd0:	str	r3, [sp]
   12bd4:	ldr	r3, [sp, #28]
   12bd8:	ldr	r2, [sp, #24]
   12bdc:	mov	r1, r8
   12be0:	bl	1190c <__assert_fail@plt+0xb90>
   12be4:	ldr	r3, [sp, #32]
   12be8:	ldr	r2, [sp, #36]	; 0x24
   12bec:	str	r2, [r3]
   12bf0:	mov	r0, r7
   12bf4:	add	sp, sp, #52	; 0x34
   12bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bfc:	bl	10d70 <abort@plt>
   12c00:	sub	r2, r5, r2
   12c04:	mov	r3, #8
   12c08:	str	r3, [sp]
   12c0c:	mvn	r3, #-2147483648	; 0x80000000
   12c10:	add	r2, r2, #1
   12c14:	add	r1, sp, #44	; 0x2c
   12c18:	mov	r0, #0
   12c1c:	bl	13900 <__assert_fail@plt+0x2b84>
   12c20:	mov	r6, r0
   12c24:	ldr	r3, [pc, #12]	; 12c38 <__assert_fail@plt+0x1ebc>
   12c28:	str	r0, [r3], #8
   12c2c:	ldm	r3, {r0, r1}
   12c30:	stm	r6, {r0, r1}
   12c34:	b	12b0c <__assert_fail@plt+0x1d90>
   12c38:	ldrdeq	r5, [r2], -r8
   12c3c:	andeq	r5, r2, ip, asr #2
   12c40:	push	{r4, r5, r6, lr}
   12c44:	mov	r4, r0
   12c48:	bl	10cc8 <__errno_location@plt>
   12c4c:	mov	r5, r0
   12c50:	ldr	r6, [r0]
   12c54:	cmp	r4, #0
   12c58:	ldr	r3, [pc, #20]	; 12c74 <__assert_fail@plt+0x1ef8>
   12c5c:	moveq	r4, r3
   12c60:	mov	r1, #48	; 0x30
   12c64:	mov	r0, r4
   12c68:	bl	13c68 <__assert_fail@plt+0x2eec>
   12c6c:	str	r6, [r5]
   12c70:	pop	{r4, r5, r6, pc}
   12c74:	andeq	r5, r2, ip, asr #4
   12c78:	subs	r3, r0, #0
   12c7c:	ldr	r2, [pc, #8]	; 12c8c <__assert_fail@plt+0x1f10>
   12c80:	moveq	r3, r2
   12c84:	ldr	r0, [r3]
   12c88:	bx	lr
   12c8c:	andeq	r5, r2, ip, asr #4
   12c90:	subs	r3, r0, #0
   12c94:	ldr	r2, [pc, #8]	; 12ca4 <__assert_fail@plt+0x1f28>
   12c98:	moveq	r3, r2
   12c9c:	str	r1, [r3]
   12ca0:	bx	lr
   12ca4:	andeq	r5, r2, ip, asr #4
   12ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   12cac:	subs	r3, r0, #0
   12cb0:	ldr	r0, [pc, #44]	; 12ce4 <__assert_fail@plt+0x1f68>
   12cb4:	moveq	r3, r0
   12cb8:	add	r3, r3, #8
   12cbc:	lsr	lr, r1, #5
   12cc0:	and	r1, r1, #31
   12cc4:	ldr	ip, [r3, lr, lsl #2]
   12cc8:	lsr	r0, ip, r1
   12ccc:	eor	r2, r2, r0
   12cd0:	and	r2, r2, #1
   12cd4:	eor	r1, ip, r2, lsl r1
   12cd8:	str	r1, [r3, lr, lsl #2]
   12cdc:	and	r0, r0, #1
   12ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ce4:	andeq	r5, r2, ip, asr #4
   12ce8:	subs	r3, r0, #0
   12cec:	ldr	r2, [pc, #12]	; 12d00 <__assert_fail@plt+0x1f84>
   12cf0:	moveq	r3, r2
   12cf4:	ldr	r0, [r3, #4]
   12cf8:	str	r1, [r3, #4]
   12cfc:	bx	lr
   12d00:	andeq	r5, r2, ip, asr #4
   12d04:	subs	r3, r0, #0
   12d08:	ldr	r0, [pc, #40]	; 12d38 <__assert_fail@plt+0x1fbc>
   12d0c:	moveq	r3, r0
   12d10:	mov	r0, #10
   12d14:	str	r0, [r3]
   12d18:	cmp	r2, #0
   12d1c:	cmpne	r1, #0
   12d20:	beq	12d30 <__assert_fail@plt+0x1fb4>
   12d24:	str	r1, [r3, #40]	; 0x28
   12d28:	str	r2, [r3, #44]	; 0x2c
   12d2c:	bx	lr
   12d30:	push	{r4, lr}
   12d34:	bl	10d70 <abort@plt>
   12d38:	andeq	r5, r2, ip, asr #4
   12d3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d40:	sub	sp, sp, #24
   12d44:	mov	r7, r0
   12d48:	mov	r8, r1
   12d4c:	mov	r9, r2
   12d50:	mov	sl, r3
   12d54:	ldr	r4, [sp, #56]	; 0x38
   12d58:	cmp	r4, #0
   12d5c:	ldr	r3, [pc, #84]	; 12db8 <__assert_fail@plt+0x203c>
   12d60:	moveq	r4, r3
   12d64:	bl	10cc8 <__errno_location@plt>
   12d68:	mov	r5, r0
   12d6c:	ldr	r6, [r0]
   12d70:	ldr	r3, [r4, #44]	; 0x2c
   12d74:	str	r3, [sp, #16]
   12d78:	ldr	r3, [r4, #40]	; 0x28
   12d7c:	str	r3, [sp, #12]
   12d80:	add	r3, r4, #8
   12d84:	str	r3, [sp, #8]
   12d88:	ldr	r3, [r4, #4]
   12d8c:	str	r3, [sp, #4]
   12d90:	ldr	r3, [r4]
   12d94:	str	r3, [sp]
   12d98:	mov	r3, sl
   12d9c:	mov	r2, r9
   12da0:	mov	r1, r8
   12da4:	mov	r0, r7
   12da8:	bl	1190c <__assert_fail@plt+0xb90>
   12dac:	str	r6, [r5]
   12db0:	add	sp, sp, #24
   12db4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12db8:	andeq	r5, r2, ip, asr #4
   12dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc0:	sub	sp, sp, #44	; 0x2c
   12dc4:	str	r0, [sp, #28]
   12dc8:	str	r1, [sp, #32]
   12dcc:	mov	r6, r2
   12dd0:	subs	r4, r3, #0
   12dd4:	ldr	r3, [pc, #172]	; 12e88 <__assert_fail@plt+0x210c>
   12dd8:	moveq	r4, r3
   12ddc:	bl	10cc8 <__errno_location@plt>
   12de0:	mov	r7, r0
   12de4:	ldr	fp, [r0]
   12de8:	ldr	r5, [r4, #4]
   12dec:	cmp	r6, #0
   12df0:	orreq	r5, r5, #1
   12df4:	add	r9, r4, #8
   12df8:	ldr	r3, [r4, #44]	; 0x2c
   12dfc:	str	r3, [sp, #16]
   12e00:	ldr	r3, [r4, #40]	; 0x28
   12e04:	str	r3, [sp, #12]
   12e08:	str	r9, [sp, #8]
   12e0c:	str	r5, [sp, #4]
   12e10:	ldr	r3, [r4]
   12e14:	str	r3, [sp]
   12e18:	ldr	r3, [sp, #32]
   12e1c:	ldr	r2, [sp, #28]
   12e20:	mov	r1, #0
   12e24:	mov	r0, r1
   12e28:	bl	1190c <__assert_fail@plt+0xb90>
   12e2c:	mov	sl, r0
   12e30:	add	r8, r0, #1
   12e34:	mov	r0, r8
   12e38:	bl	1377c <__assert_fail@plt+0x2a00>
   12e3c:	str	r0, [sp, #36]	; 0x24
   12e40:	ldr	r3, [r4, #44]	; 0x2c
   12e44:	str	r3, [sp, #16]
   12e48:	ldr	r3, [r4, #40]	; 0x28
   12e4c:	str	r3, [sp, #12]
   12e50:	str	r9, [sp, #8]
   12e54:	str	r5, [sp, #4]
   12e58:	ldr	r3, [r4]
   12e5c:	str	r3, [sp]
   12e60:	ldr	r3, [sp, #32]
   12e64:	ldr	r2, [sp, #28]
   12e68:	mov	r1, r8
   12e6c:	bl	1190c <__assert_fail@plt+0xb90>
   12e70:	str	fp, [r7]
   12e74:	cmp	r6, #0
   12e78:	strne	sl, [r6]
   12e7c:	ldr	r0, [sp, #36]	; 0x24
   12e80:	add	sp, sp, #44	; 0x2c
   12e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e88:	andeq	r5, r2, ip, asr #4
   12e8c:	push	{r4, lr}
   12e90:	mov	r3, r2
   12e94:	mov	r2, #0
   12e98:	bl	12dbc <__assert_fail@plt+0x2040>
   12e9c:	pop	{r4, pc}
   12ea0:	push	{r4, r5, r6, r7, r8, lr}
   12ea4:	ldr	r3, [pc, #140]	; 12f38 <__assert_fail@plt+0x21bc>
   12ea8:	ldr	r7, [r3]
   12eac:	ldr	r3, [r3, #4]
   12eb0:	cmp	r3, #1
   12eb4:	ble	12ee0 <__assert_fail@plt+0x2164>
   12eb8:	mov	r5, r7
   12ebc:	mov	r4, #1
   12ec0:	ldr	r6, [pc, #112]	; 12f38 <__assert_fail@plt+0x21bc>
   12ec4:	ldr	r0, [r5, #12]
   12ec8:	bl	13dec <__assert_fail@plt+0x3070>
   12ecc:	add	r4, r4, #1
   12ed0:	add	r5, r5, #8
   12ed4:	ldr	r3, [r6, #4]
   12ed8:	cmp	r3, r4
   12edc:	bgt	12ec4 <__assert_fail@plt+0x2148>
   12ee0:	ldr	r0, [r7, #4]
   12ee4:	ldr	r3, [pc, #80]	; 12f3c <__assert_fail@plt+0x21c0>
   12ee8:	cmp	r0, r3
   12eec:	beq	12f08 <__assert_fail@plt+0x218c>
   12ef0:	bl	13dec <__assert_fail@plt+0x3070>
   12ef4:	ldr	r3, [pc, #60]	; 12f38 <__assert_fail@plt+0x21bc>
   12ef8:	mov	r2, #256	; 0x100
   12efc:	str	r2, [r3, #8]
   12f00:	ldr	r2, [pc, #52]	; 12f3c <__assert_fail@plt+0x21c0>
   12f04:	str	r2, [r3, #12]
   12f08:	ldr	r3, [pc, #48]	; 12f40 <__assert_fail@plt+0x21c4>
   12f0c:	cmp	r7, r3
   12f10:	beq	12f28 <__assert_fail@plt+0x21ac>
   12f14:	mov	r0, r7
   12f18:	bl	13dec <__assert_fail@plt+0x3070>
   12f1c:	ldr	r3, [pc, #20]	; 12f38 <__assert_fail@plt+0x21bc>
   12f20:	add	r2, r3, #8
   12f24:	str	r2, [r3]
   12f28:	mov	r2, #1
   12f2c:	ldr	r3, [pc, #4]	; 12f38 <__assert_fail@plt+0x21bc>
   12f30:	str	r2, [r3, #4]
   12f34:	pop	{r4, r5, r6, r7, r8, pc}
   12f38:	ldrdeq	r5, [r2], -r8
   12f3c:	andeq	r5, r2, ip, asr #2
   12f40:	andeq	r5, r2, r0, ror #1
   12f44:	push	{r4, lr}
   12f48:	ldr	r3, [pc, #8]	; 12f58 <__assert_fail@plt+0x21dc>
   12f4c:	mvn	r2, #0
   12f50:	bl	12a7c <__assert_fail@plt+0x1d00>
   12f54:	pop	{r4, pc}
   12f58:	andeq	r5, r2, ip, asr #4
   12f5c:	push	{r4, lr}
   12f60:	ldr	r3, [pc, #4]	; 12f6c <__assert_fail@plt+0x21f0>
   12f64:	bl	12a7c <__assert_fail@plt+0x1d00>
   12f68:	pop	{r4, pc}
   12f6c:	andeq	r5, r2, ip, asr #4
   12f70:	push	{r4, lr}
   12f74:	mov	r1, r0
   12f78:	mov	r0, #0
   12f7c:	bl	12f44 <__assert_fail@plt+0x21c8>
   12f80:	pop	{r4, pc}
   12f84:	push	{r4, lr}
   12f88:	mov	r2, r1
   12f8c:	mov	r1, r0
   12f90:	mov	r0, #0
   12f94:	bl	12f5c <__assert_fail@plt+0x21e0>
   12f98:	pop	{r4, pc}
   12f9c:	push	{r4, r5, lr}
   12fa0:	sub	sp, sp, #52	; 0x34
   12fa4:	mov	r4, r0
   12fa8:	mov	r5, r2
   12fac:	mov	r0, sp
   12fb0:	bl	117a4 <__assert_fail@plt+0xa28>
   12fb4:	mov	r3, sp
   12fb8:	mvn	r2, #0
   12fbc:	mov	r1, r5
   12fc0:	mov	r0, r4
   12fc4:	bl	12a7c <__assert_fail@plt+0x1d00>
   12fc8:	add	sp, sp, #52	; 0x34
   12fcc:	pop	{r4, r5, pc}
   12fd0:	push	{r4, r5, r6, lr}
   12fd4:	sub	sp, sp, #48	; 0x30
   12fd8:	mov	r4, r0
   12fdc:	mov	r5, r2
   12fe0:	mov	r6, r3
   12fe4:	mov	r0, sp
   12fe8:	bl	117a4 <__assert_fail@plt+0xa28>
   12fec:	mov	r3, sp
   12ff0:	mov	r2, r6
   12ff4:	mov	r1, r5
   12ff8:	mov	r0, r4
   12ffc:	bl	12a7c <__assert_fail@plt+0x1d00>
   13000:	add	sp, sp, #48	; 0x30
   13004:	pop	{r4, r5, r6, pc}
   13008:	push	{r4, lr}
   1300c:	mov	r2, r1
   13010:	mov	r1, r0
   13014:	mov	r0, #0
   13018:	bl	12f9c <__assert_fail@plt+0x2220>
   1301c:	pop	{r4, pc}
   13020:	push	{r4, lr}
   13024:	mov	r3, r2
   13028:	mov	r2, r1
   1302c:	mov	r1, r0
   13030:	mov	r0, #0
   13034:	bl	12fd0 <__assert_fail@plt+0x2254>
   13038:	pop	{r4, pc}
   1303c:	push	{r4, r5, r6, lr}
   13040:	sub	sp, sp, #48	; 0x30
   13044:	mov	r4, r0
   13048:	mov	r5, r1
   1304c:	mov	r6, r2
   13050:	mov	ip, sp
   13054:	ldr	lr, [pc, #64]	; 1309c <__assert_fail@plt+0x2320>
   13058:	ldm	lr!, {r0, r1, r2, r3}
   1305c:	stmia	ip!, {r0, r1, r2, r3}
   13060:	ldm	lr!, {r0, r1, r2, r3}
   13064:	stmia	ip!, {r0, r1, r2, r3}
   13068:	ldm	lr, {r0, r1, r2, r3}
   1306c:	stm	ip, {r0, r1, r2, r3}
   13070:	mov	r2, #1
   13074:	mov	r1, r6
   13078:	mov	r0, sp
   1307c:	bl	12ca8 <__assert_fail@plt+0x1f2c>
   13080:	mov	r3, sp
   13084:	mov	r2, r5
   13088:	mov	r1, r4
   1308c:	mov	r0, #0
   13090:	bl	12a7c <__assert_fail@plt+0x1d00>
   13094:	add	sp, sp, #48	; 0x30
   13098:	pop	{r4, r5, r6, pc}
   1309c:	andeq	r5, r2, ip, asr #4
   130a0:	push	{r4, lr}
   130a4:	mov	r2, r1
   130a8:	mvn	r1, #0
   130ac:	bl	1303c <__assert_fail@plt+0x22c0>
   130b0:	pop	{r4, pc}
   130b4:	push	{r4, lr}
   130b8:	mov	r1, #58	; 0x3a
   130bc:	bl	130a0 <__assert_fail@plt+0x2324>
   130c0:	pop	{r4, pc}
   130c4:	push	{r4, lr}
   130c8:	mov	r2, #58	; 0x3a
   130cc:	bl	1303c <__assert_fail@plt+0x22c0>
   130d0:	pop	{r4, pc}
   130d4:	push	{r4, r5, lr}
   130d8:	sub	sp, sp, #100	; 0x64
   130dc:	mov	r4, r0
   130e0:	mov	r5, r2
   130e4:	mov	r0, sp
   130e8:	bl	117a4 <__assert_fail@plt+0xa28>
   130ec:	add	lr, sp, #48	; 0x30
   130f0:	mov	ip, sp
   130f4:	ldm	ip!, {r0, r1, r2, r3}
   130f8:	stmia	lr!, {r0, r1, r2, r3}
   130fc:	ldm	ip!, {r0, r1, r2, r3}
   13100:	stmia	lr!, {r0, r1, r2, r3}
   13104:	ldm	ip, {r0, r1, r2, r3}
   13108:	stm	lr, {r0, r1, r2, r3}
   1310c:	mov	r2, #1
   13110:	mov	r1, #58	; 0x3a
   13114:	add	r0, sp, #48	; 0x30
   13118:	bl	12ca8 <__assert_fail@plt+0x1f2c>
   1311c:	add	r3, sp, #48	; 0x30
   13120:	mvn	r2, #0
   13124:	mov	r1, r5
   13128:	mov	r0, r4
   1312c:	bl	12a7c <__assert_fail@plt+0x1d00>
   13130:	add	sp, sp, #100	; 0x64
   13134:	pop	{r4, r5, pc}
   13138:	push	{r4, r5, r6, r7, lr}
   1313c:	sub	sp, sp, #52	; 0x34
   13140:	mov	r4, r0
   13144:	mov	r6, r1
   13148:	mov	r7, r2
   1314c:	mov	r5, r3
   13150:	mov	ip, sp
   13154:	ldr	lr, [pc, #64]	; 1319c <__assert_fail@plt+0x2420>
   13158:	ldm	lr!, {r0, r1, r2, r3}
   1315c:	stmia	ip!, {r0, r1, r2, r3}
   13160:	ldm	lr!, {r0, r1, r2, r3}
   13164:	stmia	ip!, {r0, r1, r2, r3}
   13168:	ldm	lr, {r0, r1, r2, r3}
   1316c:	stm	ip, {r0, r1, r2, r3}
   13170:	mov	r2, r7
   13174:	mov	r1, r6
   13178:	mov	r0, sp
   1317c:	bl	12d04 <__assert_fail@plt+0x1f88>
   13180:	mov	r3, sp
   13184:	ldr	r2, [sp, #72]	; 0x48
   13188:	mov	r1, r5
   1318c:	mov	r0, r4
   13190:	bl	12a7c <__assert_fail@plt+0x1d00>
   13194:	add	sp, sp, #52	; 0x34
   13198:	pop	{r4, r5, r6, r7, pc}
   1319c:	andeq	r5, r2, ip, asr #4
   131a0:	push	{lr}		; (str lr, [sp, #-4]!)
   131a4:	sub	sp, sp, #12
   131a8:	mvn	ip, #0
   131ac:	str	ip, [sp]
   131b0:	bl	13138 <__assert_fail@plt+0x23bc>
   131b4:	add	sp, sp, #12
   131b8:	pop	{pc}		; (ldr pc, [sp], #4)
   131bc:	push	{r4, lr}
   131c0:	mov	r3, r2
   131c4:	mov	r2, r1
   131c8:	mov	r1, r0
   131cc:	mov	r0, #0
   131d0:	bl	131a0 <__assert_fail@plt+0x2424>
   131d4:	pop	{r4, pc}
   131d8:	push	{lr}		; (str lr, [sp, #-4]!)
   131dc:	sub	sp, sp, #12
   131e0:	str	r3, [sp]
   131e4:	mov	r3, r2
   131e8:	mov	r2, r1
   131ec:	mov	r1, r0
   131f0:	mov	r0, #0
   131f4:	bl	13138 <__assert_fail@plt+0x23bc>
   131f8:	add	sp, sp, #12
   131fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13200:	push	{r4, lr}
   13204:	ldr	r3, [pc, #4]	; 13210 <__assert_fail@plt+0x2494>
   13208:	bl	12a7c <__assert_fail@plt+0x1d00>
   1320c:	pop	{r4, pc}
   13210:	andeq	r5, r2, r8, ror #1
   13214:	push	{r4, lr}
   13218:	mov	r2, r1
   1321c:	mov	r1, r0
   13220:	mov	r0, #0
   13224:	bl	13200 <__assert_fail@plt+0x2484>
   13228:	pop	{r4, pc}
   1322c:	push	{r4, lr}
   13230:	mvn	r2, #0
   13234:	bl	13200 <__assert_fail@plt+0x2484>
   13238:	pop	{r4, pc}
   1323c:	push	{r4, lr}
   13240:	mov	r1, r0
   13244:	mov	r0, #0
   13248:	bl	1322c <__assert_fail@plt+0x24b0>
   1324c:	pop	{r4, pc}
   13250:	push	{r4, r5, r6, lr}
   13254:	sub	sp, sp, #32
   13258:	mov	r4, r0
   1325c:	ldr	r5, [sp, #48]	; 0x30
   13260:	ldr	r6, [sp, #52]	; 0x34
   13264:	cmp	r1, #0
   13268:	beq	13310 <__assert_fail@plt+0x2594>
   1326c:	str	r3, [sp]
   13270:	mov	r3, r2
   13274:	mov	r2, r1
   13278:	ldr	r1, [pc, #836]	; 135c4 <__assert_fail@plt+0x2848>
   1327c:	bl	10cbc <fprintf@plt>
   13280:	mov	r2, #5
   13284:	ldr	r1, [pc, #828]	; 135c8 <__assert_fail@plt+0x284c>
   13288:	mov	r0, #0
   1328c:	bl	10bf0 <dcgettext@plt>
   13290:	ldr	r3, [pc, #820]	; 135cc <__assert_fail@plt+0x2850>
   13294:	mov	r2, r0
   13298:	ldr	r1, [pc, #816]	; 135d0 <__assert_fail@plt+0x2854>
   1329c:	mov	r0, r4
   132a0:	bl	10cbc <fprintf@plt>
   132a4:	mov	r1, r4
   132a8:	mov	r0, #10
   132ac:	bl	10d34 <fputc@plt>
   132b0:	mov	r2, #5
   132b4:	ldr	r1, [pc, #792]	; 135d4 <__assert_fail@plt+0x2858>
   132b8:	mov	r0, #0
   132bc:	bl	10bf0 <dcgettext@plt>
   132c0:	ldr	r2, [pc, #784]	; 135d8 <__assert_fail@plt+0x285c>
   132c4:	mov	r1, r0
   132c8:	mov	r0, r4
   132cc:	bl	10cbc <fprintf@plt>
   132d0:	mov	r1, r4
   132d4:	mov	r0, #10
   132d8:	bl	10d34 <fputc@plt>
   132dc:	cmp	r6, #9
   132e0:	ldrls	pc, [pc, r6, lsl #2]
   132e4:	b	13564 <__assert_fail@plt+0x27e8>
   132e8:	andeq	r3, r1, ip, lsr r3
   132ec:	andeq	r3, r1, ip, lsl r3
   132f0:	andeq	r3, r1, r4, asr #6
   132f4:	andeq	r3, r1, ip, ror #6
   132f8:	muleq	r1, ip, r3
   132fc:	ldrdeq	r3, [r1], -r4
   13300:	andeq	r3, r1, r4, lsl r4
   13304:	andeq	r3, r1, ip, asr r4
   13308:	andeq	r3, r1, ip, lsr #9
   1330c:	andeq	r3, r1, r4, lsl #10
   13310:	ldr	r1, [pc, #708]	; 135dc <__assert_fail@plt+0x2860>
   13314:	bl	10cbc <fprintf@plt>
   13318:	b	13280 <__assert_fail@plt+0x2504>
   1331c:	mov	r2, #5
   13320:	ldr	r1, [pc, #696]	; 135e0 <__assert_fail@plt+0x2864>
   13324:	mov	r0, #0
   13328:	bl	10bf0 <dcgettext@plt>
   1332c:	ldr	r2, [r5]
   13330:	mov	r1, r0
   13334:	mov	r0, r4
   13338:	bl	10cbc <fprintf@plt>
   1333c:	add	sp, sp, #32
   13340:	pop	{r4, r5, r6, pc}
   13344:	mov	r2, #5
   13348:	ldr	r1, [pc, #660]	; 135e4 <__assert_fail@plt+0x2868>
   1334c:	mov	r0, #0
   13350:	bl	10bf0 <dcgettext@plt>
   13354:	ldr	r3, [r5, #4]
   13358:	ldr	r2, [r5]
   1335c:	mov	r1, r0
   13360:	mov	r0, r4
   13364:	bl	10cbc <fprintf@plt>
   13368:	b	1333c <__assert_fail@plt+0x25c0>
   1336c:	mov	r2, #5
   13370:	ldr	r1, [pc, #624]	; 135e8 <__assert_fail@plt+0x286c>
   13374:	mov	r0, #0
   13378:	bl	10bf0 <dcgettext@plt>
   1337c:	ldr	r3, [r5, #4]
   13380:	ldr	r2, [r5]
   13384:	ldr	r1, [r5, #8]
   13388:	str	r1, [sp]
   1338c:	mov	r1, r0
   13390:	mov	r0, r4
   13394:	bl	10cbc <fprintf@plt>
   13398:	b	1333c <__assert_fail@plt+0x25c0>
   1339c:	mov	r2, #5
   133a0:	ldr	r1, [pc, #580]	; 135ec <__assert_fail@plt+0x2870>
   133a4:	mov	r0, #0
   133a8:	bl	10bf0 <dcgettext@plt>
   133ac:	ldr	r3, [r5, #4]
   133b0:	ldr	r2, [r5]
   133b4:	ldr	r1, [r5, #12]
   133b8:	str	r1, [sp, #4]
   133bc:	ldr	r1, [r5, #8]
   133c0:	str	r1, [sp]
   133c4:	mov	r1, r0
   133c8:	mov	r0, r4
   133cc:	bl	10cbc <fprintf@plt>
   133d0:	b	1333c <__assert_fail@plt+0x25c0>
   133d4:	mov	r2, #5
   133d8:	ldr	r1, [pc, #528]	; 135f0 <__assert_fail@plt+0x2874>
   133dc:	mov	r0, #0
   133e0:	bl	10bf0 <dcgettext@plt>
   133e4:	ldr	r3, [r5, #4]
   133e8:	ldr	r2, [r5]
   133ec:	ldr	r1, [r5, #16]
   133f0:	str	r1, [sp, #8]
   133f4:	ldr	r1, [r5, #12]
   133f8:	str	r1, [sp, #4]
   133fc:	ldr	r1, [r5, #8]
   13400:	str	r1, [sp]
   13404:	mov	r1, r0
   13408:	mov	r0, r4
   1340c:	bl	10cbc <fprintf@plt>
   13410:	b	1333c <__assert_fail@plt+0x25c0>
   13414:	mov	r2, #5
   13418:	ldr	r1, [pc, #468]	; 135f4 <__assert_fail@plt+0x2878>
   1341c:	mov	r0, #0
   13420:	bl	10bf0 <dcgettext@plt>
   13424:	ldr	r3, [r5, #4]
   13428:	ldr	r2, [r5]
   1342c:	ldr	r1, [r5, #20]
   13430:	str	r1, [sp, #12]
   13434:	ldr	r1, [r5, #16]
   13438:	str	r1, [sp, #8]
   1343c:	ldr	r1, [r5, #12]
   13440:	str	r1, [sp, #4]
   13444:	ldr	r1, [r5, #8]
   13448:	str	r1, [sp]
   1344c:	mov	r1, r0
   13450:	mov	r0, r4
   13454:	bl	10cbc <fprintf@plt>
   13458:	b	1333c <__assert_fail@plt+0x25c0>
   1345c:	mov	r2, #5
   13460:	ldr	r1, [pc, #400]	; 135f8 <__assert_fail@plt+0x287c>
   13464:	mov	r0, #0
   13468:	bl	10bf0 <dcgettext@plt>
   1346c:	ldr	r3, [r5, #4]
   13470:	ldr	r2, [r5]
   13474:	ldr	r1, [r5, #24]
   13478:	str	r1, [sp, #16]
   1347c:	ldr	r1, [r5, #20]
   13480:	str	r1, [sp, #12]
   13484:	ldr	r1, [r5, #16]
   13488:	str	r1, [sp, #8]
   1348c:	ldr	r1, [r5, #12]
   13490:	str	r1, [sp, #4]
   13494:	ldr	r1, [r5, #8]
   13498:	str	r1, [sp]
   1349c:	mov	r1, r0
   134a0:	mov	r0, r4
   134a4:	bl	10cbc <fprintf@plt>
   134a8:	b	1333c <__assert_fail@plt+0x25c0>
   134ac:	mov	r2, #5
   134b0:	ldr	r1, [pc, #324]	; 135fc <__assert_fail@plt+0x2880>
   134b4:	mov	r0, #0
   134b8:	bl	10bf0 <dcgettext@plt>
   134bc:	ldr	r3, [r5, #4]
   134c0:	ldr	r2, [r5]
   134c4:	ldr	r1, [r5, #28]
   134c8:	str	r1, [sp, #20]
   134cc:	ldr	r1, [r5, #24]
   134d0:	str	r1, [sp, #16]
   134d4:	ldr	r1, [r5, #20]
   134d8:	str	r1, [sp, #12]
   134dc:	ldr	r1, [r5, #16]
   134e0:	str	r1, [sp, #8]
   134e4:	ldr	r1, [r5, #12]
   134e8:	str	r1, [sp, #4]
   134ec:	ldr	r1, [r5, #8]
   134f0:	str	r1, [sp]
   134f4:	mov	r1, r0
   134f8:	mov	r0, r4
   134fc:	bl	10cbc <fprintf@plt>
   13500:	b	1333c <__assert_fail@plt+0x25c0>
   13504:	mov	r2, #5
   13508:	ldr	r1, [pc, #240]	; 13600 <__assert_fail@plt+0x2884>
   1350c:	mov	r0, #0
   13510:	bl	10bf0 <dcgettext@plt>
   13514:	ldr	r3, [r5, #4]
   13518:	ldr	r2, [r5]
   1351c:	ldr	r1, [r5, #32]
   13520:	str	r1, [sp, #24]
   13524:	ldr	r1, [r5, #28]
   13528:	str	r1, [sp, #20]
   1352c:	ldr	r1, [r5, #24]
   13530:	str	r1, [sp, #16]
   13534:	ldr	r1, [r5, #20]
   13538:	str	r1, [sp, #12]
   1353c:	ldr	r1, [r5, #16]
   13540:	str	r1, [sp, #8]
   13544:	ldr	r1, [r5, #12]
   13548:	str	r1, [sp, #4]
   1354c:	ldr	r1, [r5, #8]
   13550:	str	r1, [sp]
   13554:	mov	r1, r0
   13558:	mov	r0, r4
   1355c:	bl	10cbc <fprintf@plt>
   13560:	b	1333c <__assert_fail@plt+0x25c0>
   13564:	mov	r2, #5
   13568:	ldr	r1, [pc, #148]	; 13604 <__assert_fail@plt+0x2888>
   1356c:	mov	r0, #0
   13570:	bl	10bf0 <dcgettext@plt>
   13574:	ldr	r3, [r5, #4]
   13578:	ldr	r2, [r5]
   1357c:	ldr	r1, [r5, #32]
   13580:	str	r1, [sp, #24]
   13584:	ldr	r1, [r5, #28]
   13588:	str	r1, [sp, #20]
   1358c:	ldr	r1, [r5, #24]
   13590:	str	r1, [sp, #16]
   13594:	ldr	r1, [r5, #20]
   13598:	str	r1, [sp, #12]
   1359c:	ldr	r1, [r5, #16]
   135a0:	str	r1, [sp, #8]
   135a4:	ldr	r1, [r5, #12]
   135a8:	str	r1, [sp, #4]
   135ac:	ldr	r1, [r5, #8]
   135b0:	str	r1, [sp]
   135b4:	mov	r1, r0
   135b8:	mov	r0, r4
   135bc:	bl	10cbc <fprintf@plt>
   135c0:	b	1333c <__assert_fail@plt+0x25c0>
   135c4:	andeq	r4, r1, r8, asr #23
   135c8:	ldrdeq	r4, [r1], -ip
   135cc:	andeq	r0, r0, r6, ror #15
   135d0:	muleq	r1, ip, lr
   135d4:	andeq	r4, r1, r0, ror #23
   135d8:	andeq	r4, r1, ip, lsl #25
   135dc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   135e0:			; <UNDEFINED> instruction: 0x00014cb0
   135e4:	andeq	r4, r1, r0, asr #25
   135e8:	ldrdeq	r4, [r1], -r8
   135ec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   135f0:	andeq	r4, r1, r4, lsl sp
   135f4:	andeq	r4, r1, r8, lsr sp
   135f8:	andeq	r4, r1, r0, ror #26
   135fc:	andeq	r4, r1, ip, lsl #27
   13600:			; <UNDEFINED> instruction: 0x00014dbc
   13604:	strdeq	r4, [r1], -r0
   13608:	push	{r4, r5, lr}
   1360c:	sub	sp, sp, #12
   13610:	ldr	r5, [sp, #24]
   13614:	ldr	ip, [r5]
   13618:	cmp	ip, #0
   1361c:	beq	1364c <__assert_fail@plt+0x28d0>
   13620:	mov	lr, r5
   13624:	mov	ip, #0
   13628:	add	ip, ip, #1
   1362c:	ldr	r4, [lr, #4]!
   13630:	cmp	r4, #0
   13634:	bne	13628 <__assert_fail@plt+0x28ac>
   13638:	str	ip, [sp, #4]
   1363c:	str	r5, [sp]
   13640:	bl	13250 <__assert_fail@plt+0x24d4>
   13644:	add	sp, sp, #12
   13648:	pop	{r4, r5, pc}
   1364c:	mov	ip, #0
   13650:	b	13638 <__assert_fail@plt+0x28bc>
   13654:	push	{r4, r5, lr}
   13658:	sub	sp, sp, #52	; 0x34
   1365c:	ldr	r4, [sp, #64]	; 0x40
   13660:	sub	r4, r4, #4
   13664:	add	r5, sp, #4
   13668:	mov	ip, #0
   1366c:	ldr	lr, [r4, #4]!
   13670:	str	lr, [r5, #4]!
   13674:	cmp	lr, #0
   13678:	beq	13688 <__assert_fail@plt+0x290c>
   1367c:	add	ip, ip, #1
   13680:	cmp	ip, #10
   13684:	bne	1366c <__assert_fail@plt+0x28f0>
   13688:	str	ip, [sp, #4]
   1368c:	add	ip, sp, #8
   13690:	str	ip, [sp]
   13694:	bl	13250 <__assert_fail@plt+0x24d4>
   13698:	add	sp, sp, #52	; 0x34
   1369c:	pop	{r4, r5, pc}
   136a0:	push	{r3}		; (str r3, [sp, #-4]!)
   136a4:	push	{lr}		; (str lr, [sp, #-4]!)
   136a8:	sub	sp, sp, #16
   136ac:	add	r3, sp, #24
   136b0:	str	r3, [sp, #12]
   136b4:	str	r3, [sp]
   136b8:	ldr	r3, [sp, #20]
   136bc:	bl	13654 <__assert_fail@plt+0x28d8>
   136c0:	add	sp, sp, #16
   136c4:	pop	{lr}		; (ldr lr, [sp], #4)
   136c8:	add	sp, sp, #4
   136cc:	bx	lr
   136d0:	push	{r4, lr}
   136d4:	ldr	r3, [pc, #88]	; 13734 <__assert_fail@plt+0x29b8>
   136d8:	ldr	r1, [r3]
   136dc:	mov	r0, #10
   136e0:	bl	10d34 <fputc@plt>
   136e4:	mov	r2, #5
   136e8:	ldr	r1, [pc, #72]	; 13738 <__assert_fail@plt+0x29bc>
   136ec:	mov	r0, #0
   136f0:	bl	10bf0 <dcgettext@plt>
   136f4:	ldr	r1, [pc, #64]	; 1373c <__assert_fail@plt+0x29c0>
   136f8:	bl	10b90 <printf@plt>
   136fc:	mov	r2, #5
   13700:	ldr	r1, [pc, #56]	; 13740 <__assert_fail@plt+0x29c4>
   13704:	mov	r0, #0
   13708:	bl	10bf0 <dcgettext@plt>
   1370c:	ldr	r2, [pc, #48]	; 13744 <__assert_fail@plt+0x29c8>
   13710:	ldr	r1, [pc, #48]	; 13748 <__assert_fail@plt+0x29cc>
   13714:	bl	10b90 <printf@plt>
   13718:	mov	r2, #5
   1371c:	ldr	r1, [pc, #40]	; 1374c <__assert_fail@plt+0x29d0>
   13720:	mov	r0, #0
   13724:	bl	10bf0 <dcgettext@plt>
   13728:	ldr	r1, [pc, #32]	; 13750 <__assert_fail@plt+0x29d4>
   1372c:	bl	10b90 <printf@plt>
   13730:	pop	{r4, pc}
   13734:	andeq	r5, r2, r4, lsr r1
   13738:	andeq	r4, r1, ip, lsr #28
   1373c:	andeq	r4, r1, ip, asr sl
   13740:	andeq	r4, r1, r0, asr #28
   13744:	andeq	r4, r1, r4, lsr sl
   13748:	andeq	r4, r1, r4, asr #18
   1374c:	andeq	r4, r1, r4, asr lr
   13750:	andeq	r4, r1, ip, ror lr
   13754:	push	{r4, lr}
   13758:	bl	13eec <__assert_fail@plt+0x3170>
   1375c:	cmp	r0, #0
   13760:	popne	{r4, pc}
   13764:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   13768:	push	{r4, lr}
   1376c:	bl	13eec <__assert_fail@plt+0x3170>
   13770:	cmp	r0, #0
   13774:	popne	{r4, pc}
   13778:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   1377c:	push	{r4, lr}
   13780:	bl	13754 <__assert_fail@plt+0x29d8>
   13784:	pop	{r4, pc}
   13788:	push	{r4, r5, r6, lr}
   1378c:	mov	r5, r0
   13790:	mov	r4, r1
   13794:	bl	13f74 <__assert_fail@plt+0x31f8>
   13798:	cmp	r0, #0
   1379c:	popne	{r4, r5, r6, pc}
   137a0:	adds	r4, r4, #0
   137a4:	movne	r4, #1
   137a8:	cmp	r5, #0
   137ac:	orreq	r4, r4, #1
   137b0:	cmp	r4, #0
   137b4:	popeq	{r4, r5, r6, pc}
   137b8:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   137bc:	push	{r4, lr}
   137c0:	cmp	r1, #0
   137c4:	orreq	r1, r1, #1
   137c8:	bl	13f74 <__assert_fail@plt+0x31f8>
   137cc:	cmp	r0, #0
   137d0:	popne	{r4, pc}
   137d4:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   137d8:	push	{r4, r5, r6, lr}
   137dc:	mov	r6, r0
   137e0:	mov	r5, r1
   137e4:	mov	r4, r2
   137e8:	bl	13fc4 <__assert_fail@plt+0x3248>
   137ec:	cmp	r0, #0
   137f0:	popne	{r4, r5, r6, pc}
   137f4:	cmp	r6, #0
   137f8:	beq	13808 <__assert_fail@plt+0x2a8c>
   137fc:	cmp	r5, #0
   13800:	cmpne	r4, #0
   13804:	popeq	{r4, r5, r6, pc}
   13808:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   1380c:	push	{r4, lr}
   13810:	bl	137d8 <__assert_fail@plt+0x2a5c>
   13814:	pop	{r4, pc}
   13818:	push	{r4, lr}
   1381c:	mov	ip, r1
   13820:	mov	r3, r2
   13824:	cmp	r2, #0
   13828:	cmpne	r1, #0
   1382c:	moveq	r3, #1
   13830:	moveq	ip, r3
   13834:	mov	r2, r3
   13838:	mov	r1, ip
   1383c:	bl	13fc4 <__assert_fail@plt+0x3248>
   13840:	cmp	r0, #0
   13844:	popne	{r4, pc}
   13848:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   1384c:	push	{r4, lr}
   13850:	mov	r2, r1
   13854:	mov	r1, r0
   13858:	mov	r0, #0
   1385c:	bl	137d8 <__assert_fail@plt+0x2a5c>
   13860:	pop	{r4, pc}
   13864:	push	{r4, lr}
   13868:	mov	r2, r1
   1386c:	mov	r1, r0
   13870:	mov	r0, #0
   13874:	bl	13818 <__assert_fail@plt+0x2a9c>
   13878:	pop	{r4, pc}
   1387c:	push	{r4, r5, r6, r7, r8, lr}
   13880:	mov	r5, r1
   13884:	mov	r6, r2
   13888:	ldr	r4, [r1]
   1388c:	subs	r7, r0, #0
   13890:	beq	138ac <__assert_fail@plt+0x2b30>
   13894:	lsr	r2, r4, #1
   13898:	add	r3, r2, #1
   1389c:	mvn	r3, r3
   138a0:	cmp	r4, r3
   138a4:	bls	138d0 <__assert_fail@plt+0x2b54>
   138a8:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   138ac:	cmp	r4, #0
   138b0:	bne	138d8 <__assert_fail@plt+0x2b5c>
   138b4:	mov	r1, r2
   138b8:	mov	r0, #64	; 0x40
   138bc:	bl	141c8 <__assert_fail@plt+0x344c>
   138c0:	cmp	r0, #0
   138c4:	movne	r4, r0
   138c8:	addeq	r4, r0, #1
   138cc:	b	138d8 <__assert_fail@plt+0x2b5c>
   138d0:	add	r4, r4, #1
   138d4:	add	r4, r4, r2
   138d8:	mov	r2, r6
   138dc:	mov	r1, r4
   138e0:	mov	r0, r7
   138e4:	bl	137d8 <__assert_fail@plt+0x2a5c>
   138e8:	str	r4, [r5]
   138ec:	pop	{r4, r5, r6, r7, r8, pc}
   138f0:	push	{r4, lr}
   138f4:	mov	r2, #1
   138f8:	bl	1387c <__assert_fail@plt+0x2b00>
   138fc:	pop	{r4, pc}
   13900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13904:	sub	sp, sp, #12
   13908:	mov	fp, r0
   1390c:	mov	sl, r1
   13910:	mov	r9, r2
   13914:	mov	r7, r3
   13918:	ldr	r6, [sp, #48]	; 0x30
   1391c:	ldr	r5, [r1]
   13920:	asrs	r4, r5, #1
   13924:	bmi	13a80 <__assert_fail@plt+0x2d04>
   13928:	cmp	r5, #0
   1392c:	blt	13a94 <__assert_fail@plt+0x2d18>
   13930:	mvn	r3, #-2147483648	; 0x80000000
   13934:	sub	r3, r3, r4
   13938:	cmp	r5, r3
   1393c:	movle	r3, #0
   13940:	movgt	r3, #1
   13944:	cmp	r3, #0
   13948:	addeq	r4, r4, r5
   1394c:	mvnne	r4, #-2147483648	; 0x80000000
   13950:	mvn	r8, r7
   13954:	lsr	r8, r8, #31
   13958:	cmp	r7, r4
   1395c:	movge	r3, #0
   13960:	andlt	r3, r8, #1
   13964:	cmp	r3, #0
   13968:	movne	r4, r7
   1396c:	cmp	r6, #0
   13970:	blt	13aa8 <__assert_fail@plt+0x2d2c>
   13974:	cmp	r6, #0
   13978:	beq	13b54 <__assert_fail@plt+0x2dd8>
   1397c:	cmp	r4, #0
   13980:	blt	13b04 <__assert_fail@plt+0x2d88>
   13984:	mov	r1, r6
   13988:	mvn	r0, #-2147483648	; 0x80000000
   1398c:	bl	143d4 <__assert_fail@plt+0x3658>
   13990:	cmp	r0, r4
   13994:	movge	r0, #0
   13998:	movlt	r0, #1
   1399c:	cmp	r0, #0
   139a0:	mvnne	r3, #-2147483648	; 0x80000000
   139a4:	strne	r3, [sp, #4]
   139a8:	beq	13b3c <__assert_fail@plt+0x2dc0>
   139ac:	mov	r1, r6
   139b0:	ldr	r0, [sp, #4]
   139b4:	bl	143d4 <__assert_fail@plt+0x3658>
   139b8:	mov	r4, r0
   139bc:	mov	r1, r6
   139c0:	ldr	r0, [sp, #4]
   139c4:	bl	145f4 <__assert_fail@plt+0x3878>
   139c8:	ldr	r3, [sp, #4]
   139cc:	sub	r1, r3, r1
   139d0:	cmp	fp, #0
   139d4:	moveq	r3, #0
   139d8:	streq	r3, [sl]
   139dc:	sub	r3, r4, r5
   139e0:	cmp	r3, r9
   139e4:	bge	13a6c <__assert_fail@plt+0x2cf0>
   139e8:	cmp	r9, #0
   139ec:	blt	13b60 <__assert_fail@plt+0x2de4>
   139f0:	cmp	r5, #0
   139f4:	blt	13b74 <__assert_fail@plt+0x2df8>
   139f8:	mvn	r3, #-2147483648	; 0x80000000
   139fc:	sub	r3, r3, r9
   13a00:	cmp	r5, r3
   13a04:	movle	r3, #0
   13a08:	movgt	r3, #1
   13a0c:	cmp	r3, #0
   13a10:	bne	13c1c <__assert_fail@plt+0x2ea0>
   13a14:	add	r5, r5, r9
   13a18:	mov	r4, r5
   13a1c:	cmp	r7, r5
   13a20:	movge	r7, #0
   13a24:	andlt	r7, r8, #1
   13a28:	cmp	r7, #0
   13a2c:	bne	13c1c <__assert_fail@plt+0x2ea0>
   13a30:	cmp	r6, #0
   13a34:	blt	13b88 <__assert_fail@plt+0x2e0c>
   13a38:	cmp	r6, #0
   13a3c:	beq	13a68 <__assert_fail@plt+0x2cec>
   13a40:	cmp	r5, #0
   13a44:	blt	13be4 <__assert_fail@plt+0x2e68>
   13a48:	mov	r1, r6
   13a4c:	mvn	r0, #-2147483648	; 0x80000000
   13a50:	bl	143d4 <__assert_fail@plt+0x3658>
   13a54:	cmp	r5, r0
   13a58:	movle	r0, #0
   13a5c:	movgt	r0, #1
   13a60:	cmp	r0, #0
   13a64:	bne	13c1c <__assert_fail@plt+0x2ea0>
   13a68:	mul	r1, r5, r6
   13a6c:	mov	r0, fp
   13a70:	bl	13788 <__assert_fail@plt+0x2a0c>
   13a74:	str	r4, [sl]
   13a78:	add	sp, sp, #12
   13a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a80:	rsb	r3, r4, #-2147483648	; 0x80000000
   13a84:	cmp	r5, r3
   13a88:	movge	r3, #0
   13a8c:	movlt	r3, #1
   13a90:	b	13944 <__assert_fail@plt+0x2bc8>
   13a94:	rsb	r3, r5, #-2147483648	; 0x80000000
   13a98:	cmp	r4, r3
   13a9c:	movge	r3, #0
   13aa0:	movlt	r3, #1
   13aa4:	b	13944 <__assert_fail@plt+0x2bc8>
   13aa8:	cmp	r4, #0
   13aac:	blt	13ad4 <__assert_fail@plt+0x2d58>
   13ab0:	cmn	r6, #1
   13ab4:	beq	13af0 <__assert_fail@plt+0x2d74>
   13ab8:	mov	r1, r6
   13abc:	mov	r0, #-2147483648	; 0x80000000
   13ac0:	bl	143d4 <__assert_fail@plt+0x3658>
   13ac4:	cmp	r0, r4
   13ac8:	movge	r0, #0
   13acc:	movlt	r0, #1
   13ad0:	b	1399c <__assert_fail@plt+0x2c20>
   13ad4:	mov	r1, r6
   13ad8:	mvn	r0, #-2147483648	; 0x80000000
   13adc:	bl	143d4 <__assert_fail@plt+0x3658>
   13ae0:	cmp	r0, r4
   13ae4:	movle	r0, #0
   13ae8:	movgt	r0, #1
   13aec:	b	1399c <__assert_fail@plt+0x2c20>
   13af0:	add	r0, r4, #-2147483648	; 0x80000000
   13af4:	cmp	r0, #0
   13af8:	movle	r0, #0
   13afc:	movgt	r0, #1
   13b00:	b	1399c <__assert_fail@plt+0x2c20>
   13b04:	cmn	r4, #1
   13b08:	beq	13b28 <__assert_fail@plt+0x2dac>
   13b0c:	mov	r1, r4
   13b10:	mov	r0, #-2147483648	; 0x80000000
   13b14:	bl	143d4 <__assert_fail@plt+0x3658>
   13b18:	cmp	r6, r0
   13b1c:	movle	r0, #0
   13b20:	movgt	r0, #1
   13b24:	b	1399c <__assert_fail@plt+0x2c20>
   13b28:	add	r0, r6, #-2147483648	; 0x80000000
   13b2c:	cmp	r0, #0
   13b30:	movle	r0, #0
   13b34:	movgt	r0, #1
   13b38:	b	1399c <__assert_fail@plt+0x2c20>
   13b3c:	mul	r1, r6, r4
   13b40:	cmp	r1, #63	; 0x3f
   13b44:	movle	r3, #64	; 0x40
   13b48:	strle	r3, [sp, #4]
   13b4c:	bgt	139d0 <__assert_fail@plt+0x2c54>
   13b50:	b	139ac <__assert_fail@plt+0x2c30>
   13b54:	mov	r3, #64	; 0x40
   13b58:	str	r3, [sp, #4]
   13b5c:	b	139ac <__assert_fail@plt+0x2c30>
   13b60:	rsb	r3, r9, #-2147483648	; 0x80000000
   13b64:	cmp	r5, r3
   13b68:	movge	r3, #0
   13b6c:	movlt	r3, #1
   13b70:	b	13a0c <__assert_fail@plt+0x2c90>
   13b74:	rsb	r3, r5, #-2147483648	; 0x80000000
   13b78:	cmp	r9, r3
   13b7c:	movge	r3, #0
   13b80:	movlt	r3, #1
   13b84:	b	13a0c <__assert_fail@plt+0x2c90>
   13b88:	cmp	r5, #0
   13b8c:	blt	13bb4 <__assert_fail@plt+0x2e38>
   13b90:	cmn	r6, #1
   13b94:	beq	13bd0 <__assert_fail@plt+0x2e54>
   13b98:	mov	r1, r6
   13b9c:	mov	r0, #-2147483648	; 0x80000000
   13ba0:	bl	143d4 <__assert_fail@plt+0x3658>
   13ba4:	cmp	r5, r0
   13ba8:	movle	r0, #0
   13bac:	movgt	r0, #1
   13bb0:	b	13a60 <__assert_fail@plt+0x2ce4>
   13bb4:	mov	r1, r6
   13bb8:	mvn	r0, #-2147483648	; 0x80000000
   13bbc:	bl	143d4 <__assert_fail@plt+0x3658>
   13bc0:	cmp	r5, r0
   13bc4:	movge	r0, #0
   13bc8:	movlt	r0, #1
   13bcc:	b	13a60 <__assert_fail@plt+0x2ce4>
   13bd0:	add	r0, r5, #-2147483648	; 0x80000000
   13bd4:	cmp	r0, #0
   13bd8:	movle	r0, #0
   13bdc:	movgt	r0, #1
   13be0:	b	13a60 <__assert_fail@plt+0x2ce4>
   13be4:	cmn	r5, #1
   13be8:	beq	13c08 <__assert_fail@plt+0x2e8c>
   13bec:	mov	r1, r5
   13bf0:	mov	r0, #-2147483648	; 0x80000000
   13bf4:	bl	143d4 <__assert_fail@plt+0x3658>
   13bf8:	cmp	r6, r0
   13bfc:	movle	r0, #0
   13c00:	movgt	r0, #1
   13c04:	b	13a60 <__assert_fail@plt+0x2ce4>
   13c08:	add	r0, r6, #-2147483648	; 0x80000000
   13c0c:	cmp	r0, #0
   13c10:	movle	r0, #0
   13c14:	movgt	r0, #1
   13c18:	b	13a60 <__assert_fail@plt+0x2ce4>
   13c1c:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   13c20:	push	{r4, lr}
   13c24:	bl	13d38 <__assert_fail@plt+0x2fbc>
   13c28:	cmp	r0, #0
   13c2c:	popne	{r4, pc}
   13c30:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   13c34:	push	{r4, lr}
   13c38:	mov	r1, #1
   13c3c:	bl	13c20 <__assert_fail@plt+0x2ea4>
   13c40:	pop	{r4, pc}
   13c44:	push	{r4, lr}
   13c48:	bl	13d38 <__assert_fail@plt+0x2fbc>
   13c4c:	cmp	r0, #0
   13c50:	popne	{r4, pc}
   13c54:	bl	13cf8 <__assert_fail@plt+0x2f7c>
   13c58:	push	{r4, lr}
   13c5c:	mov	r1, #1
   13c60:	bl	13c44 <__assert_fail@plt+0x2ec8>
   13c64:	pop	{r4, pc}
   13c68:	push	{r4, r5, r6, lr}
   13c6c:	mov	r5, r0
   13c70:	mov	r4, r1
   13c74:	mov	r0, r1
   13c78:	bl	13754 <__assert_fail@plt+0x29d8>
   13c7c:	mov	r2, r4
   13c80:	mov	r1, r5
   13c84:	bl	10bcc <memcpy@plt>
   13c88:	pop	{r4, r5, r6, pc}
   13c8c:	push	{r4, r5, r6, lr}
   13c90:	mov	r5, r0
   13c94:	mov	r4, r1
   13c98:	mov	r0, r1
   13c9c:	bl	13768 <__assert_fail@plt+0x29ec>
   13ca0:	mov	r2, r4
   13ca4:	mov	r1, r5
   13ca8:	bl	10bcc <memcpy@plt>
   13cac:	pop	{r4, r5, r6, pc}
   13cb0:	push	{r4, r5, r6, lr}
   13cb4:	mov	r5, r0
   13cb8:	mov	r4, r1
   13cbc:	add	r0, r1, #1
   13cc0:	bl	13768 <__assert_fail@plt+0x29ec>
   13cc4:	mov	r2, #0
   13cc8:	strb	r2, [r0, r4]
   13ccc:	mov	r2, r4
   13cd0:	mov	r1, r5
   13cd4:	bl	10bcc <memcpy@plt>
   13cd8:	pop	{r4, r5, r6, pc}
   13cdc:	push	{r4, lr}
   13ce0:	mov	r4, r0
   13ce4:	bl	10cb0 <strlen@plt>
   13ce8:	add	r1, r0, #1
   13cec:	mov	r0, r4
   13cf0:	bl	13c68 <__assert_fail@plt+0x2eec>
   13cf4:	pop	{r4, pc}
   13cf8:	push	{r4, lr}
   13cfc:	ldr	r3, [pc, #40]	; 13d2c <__assert_fail@plt+0x2fb0>
   13d00:	ldr	r4, [r3]
   13d04:	mov	r2, #5
   13d08:	ldr	r1, [pc, #32]	; 13d30 <__assert_fail@plt+0x2fb4>
   13d0c:	mov	r0, #0
   13d10:	bl	10bf0 <dcgettext@plt>
   13d14:	mov	r3, r0
   13d18:	ldr	r2, [pc, #20]	; 13d34 <__assert_fail@plt+0x2fb8>
   13d1c:	mov	r1, #0
   13d20:	mov	r0, r4
   13d24:	bl	10c50 <error@plt>
   13d28:	bl	10d70 <abort@plt>
   13d2c:	ldrdeq	r5, [r2], -r4
   13d30:	andeq	r4, r1, ip, asr #29
   13d34:	andeq	r4, r1, r8, lsr #21
   13d38:	push	{r4, lr}
   13d3c:	mov	r2, r0
   13d40:	mov	r3, r1
   13d44:	cmp	r1, #0
   13d48:	cmpne	r0, #0
   13d4c:	moveq	r3, #1
   13d50:	moveq	r2, r3
   13d54:	umull	r0, r1, r2, r3
   13d58:	cmp	r0, #0
   13d5c:	cmpge	r1, #0
   13d60:	bne	13d74 <__assert_fail@plt+0x2ff8>
   13d64:	mov	r1, r3
   13d68:	mov	r0, r2
   13d6c:	bl	10b60 <calloc@plt>
   13d70:	pop	{r4, pc}
   13d74:	bl	10cc8 <__errno_location@plt>
   13d78:	mov	r3, #12
   13d7c:	str	r3, [r0]
   13d80:	mov	r0, #0
   13d84:	pop	{r4, pc}
   13d88:	push	{r4, lr}
   13d8c:	sub	sp, sp, #8
   13d90:	subs	r4, r0, #0
   13d94:	beq	13da8 <__assert_fail@plt+0x302c>
   13d98:	mov	r0, r4
   13d9c:	bl	10c74 <__freading@plt>
   13da0:	cmp	r0, #0
   13da4:	bne	13db8 <__assert_fail@plt+0x303c>
   13da8:	mov	r0, r4
   13dac:	bl	10b9c <fflush@plt>
   13db0:	add	sp, sp, #8
   13db4:	pop	{r4, pc}
   13db8:	ldr	r3, [r4]
   13dbc:	tst	r3, #256	; 0x100
   13dc0:	bne	13dd0 <__assert_fail@plt+0x3054>
   13dc4:	mov	r0, r4
   13dc8:	bl	10b9c <fflush@plt>
   13dcc:	b	13db0 <__assert_fail@plt+0x3034>
   13dd0:	mov	r3, #1
   13dd4:	str	r3, [sp]
   13dd8:	mov	r2, #0
   13ddc:	mov	r3, #0
   13de0:	mov	r0, r4
   13de4:	bl	13e44 <__assert_fail@plt+0x30c8>
   13de8:	b	13dc4 <__assert_fail@plt+0x3048>
   13dec:	push	{r4, r5, lr}
   13df0:	sub	sp, sp, #12
   13df4:	mov	r5, r0
   13df8:	bl	10cc8 <__errno_location@plt>
   13dfc:	mov	r4, r0
   13e00:	ldr	r3, [r0]
   13e04:	str	r3, [sp]
   13e08:	str	r3, [sp, #4]
   13e0c:	mov	r3, #0
   13e10:	str	r3, [r0]
   13e14:	mov	r0, r5
   13e18:	bl	10ba8 <free@plt>
   13e1c:	ldr	r3, [r4]
   13e20:	cmp	r3, #0
   13e24:	moveq	r3, #4
   13e28:	movne	r3, #0
   13e2c:	add	r2, sp, #8
   13e30:	add	r3, r2, r3
   13e34:	ldr	r3, [r3, #-8]
   13e38:	str	r3, [r4]
   13e3c:	add	sp, sp, #12
   13e40:	pop	{r4, r5, pc}
   13e44:	push	{r4, r5, r6, r7, lr}
   13e48:	sub	sp, sp, #12
   13e4c:	mov	r4, r0
   13e50:	mov	r6, r2
   13e54:	mov	r7, r3
   13e58:	ldr	r5, [sp, #32]
   13e5c:	ldr	r2, [r0, #8]
   13e60:	ldr	r3, [r0, #4]
   13e64:	cmp	r2, r3
   13e68:	beq	13e88 <__assert_fail@plt+0x310c>
   13e6c:	str	r5, [sp]
   13e70:	mov	r2, r6
   13e74:	mov	r3, r7
   13e78:	mov	r0, r4
   13e7c:	bl	10d04 <fseeko64@plt>
   13e80:	add	sp, sp, #12
   13e84:	pop	{r4, r5, r6, r7, pc}
   13e88:	ldr	r2, [r0, #20]
   13e8c:	ldr	r3, [r0, #16]
   13e90:	cmp	r2, r3
   13e94:	bne	13e6c <__assert_fail@plt+0x30f0>
   13e98:	ldr	r3, [r0, #36]	; 0x24
   13e9c:	cmp	r3, #0
   13ea0:	bne	13e6c <__assert_fail@plt+0x30f0>
   13ea4:	bl	10cec <fileno@plt>
   13ea8:	str	r5, [sp]
   13eac:	mov	r2, r6
   13eb0:	mov	r3, r7
   13eb4:	bl	10c20 <lseek64@plt>
   13eb8:	mvn	r2, #0
   13ebc:	mvn	r3, #0
   13ec0:	cmp	r1, r3
   13ec4:	cmpeq	r0, r2
   13ec8:	beq	13ee4 <__assert_fail@plt+0x3168>
   13ecc:	ldr	r3, [r4]
   13ed0:	bic	r3, r3, #16
   13ed4:	str	r3, [r4]
   13ed8:	strd	r0, [r4, #80]	; 0x50
   13edc:	mov	r0, #0
   13ee0:	b	13e80 <__assert_fail@plt+0x3104>
   13ee4:	mvn	r0, #0
   13ee8:	b	13e80 <__assert_fail@plt+0x3104>
   13eec:	push	{r4, lr}
   13ef0:	cmp	r0, #0
   13ef4:	moveq	r0, #1
   13ef8:	cmp	r0, #0
   13efc:	blt	13f08 <__assert_fail@plt+0x318c>
   13f00:	bl	10c5c <malloc@plt>
   13f04:	pop	{r4, pc}
   13f08:	bl	10cc8 <__errno_location@plt>
   13f0c:	mov	r3, #12
   13f10:	str	r3, [r0]
   13f14:	mov	r0, #0
   13f18:	pop	{r4, pc}
   13f1c:	push	{r4, r5, r6, r7, lr}
   13f20:	sub	sp, sp, #12
   13f24:	mov	r7, r1
   13f28:	mov	r5, r2
   13f2c:	subs	r6, r0, #0
   13f30:	addeq	r6, sp, #4
   13f34:	mov	r0, r6
   13f38:	bl	10c44 <mbrtowc@plt>
   13f3c:	mov	r4, r0
   13f40:	cmp	r5, #0
   13f44:	cmnne	r0, #3
   13f48:	bhi	13f58 <__assert_fail@plt+0x31dc>
   13f4c:	mov	r0, r4
   13f50:	add	sp, sp, #12
   13f54:	pop	{r4, r5, r6, r7, pc}
   13f58:	mov	r0, #0
   13f5c:	bl	1408c <__assert_fail@plt+0x3310>
   13f60:	cmp	r0, #0
   13f64:	ldrbeq	r3, [r7]
   13f68:	streq	r3, [r6]
   13f6c:	moveq	r4, #1
   13f70:	b	13f4c <__assert_fail@plt+0x31d0>
   13f74:	push	{r4, lr}
   13f78:	cmp	r0, #0
   13f7c:	beq	13f98 <__assert_fail@plt+0x321c>
   13f80:	cmp	r1, #0
   13f84:	beq	13fa4 <__assert_fail@plt+0x3228>
   13f88:	cmp	r1, #0
   13f8c:	blt	13fb0 <__assert_fail@plt+0x3234>
   13f90:	bl	10bfc <realloc@plt>
   13f94:	pop	{r4, pc}
   13f98:	mov	r0, r1
   13f9c:	bl	13eec <__assert_fail@plt+0x3170>
   13fa0:	pop	{r4, pc}
   13fa4:	bl	13dec <__assert_fail@plt+0x3070>
   13fa8:	mov	r0, #0
   13fac:	pop	{r4, pc}
   13fb0:	bl	10cc8 <__errno_location@plt>
   13fb4:	mov	r3, #12
   13fb8:	str	r3, [r0]
   13fbc:	mov	r0, #0
   13fc0:	pop	{r4, pc}
   13fc4:	push	{r4, r5, r6, lr}
   13fc8:	mov	r6, r0
   13fcc:	mov	r5, r1
   13fd0:	subs	r4, r2, #0
   13fd4:	beq	14000 <__assert_fail@plt+0x3284>
   13fd8:	mov	r1, r4
   13fdc:	mvn	r0, #0
   13fe0:	bl	141c8 <__assert_fail@plt+0x344c>
   13fe4:	cmp	r0, r5
   13fe8:	bcs	14000 <__assert_fail@plt+0x3284>
   13fec:	bl	10cc8 <__errno_location@plt>
   13ff0:	mov	r3, #12
   13ff4:	str	r3, [r0]
   13ff8:	mov	r0, #0
   13ffc:	pop	{r4, r5, r6, pc}
   14000:	mul	r1, r5, r4
   14004:	mov	r0, r6
   14008:	bl	13f74 <__assert_fail@plt+0x31f8>
   1400c:	pop	{r4, r5, r6, pc}
   14010:	push	{r4, r5, r6, lr}
   14014:	mov	r4, r0
   14018:	bl	10c38 <__fpending@plt>
   1401c:	mov	r6, r0
   14020:	mov	r0, r4
   14024:	bl	10bb4 <ferror@plt>
   14028:	mov	r5, r0
   1402c:	mov	r0, r4
   14030:	bl	10cf8 <fclose@plt>
   14034:	cmp	r5, #0
   14038:	bne	14060 <__assert_fail@plt+0x32e4>
   1403c:	cmp	r0, #0
   14040:	popeq	{r4, r5, r6, pc}
   14044:	cmp	r6, #0
   14048:	bne	1407c <__assert_fail@plt+0x3300>
   1404c:	bl	10cc8 <__errno_location@plt>
   14050:	ldr	r0, [r0]
   14054:	subs	r0, r0, #9
   14058:	mvnne	r0, #0
   1405c:	pop	{r4, r5, r6, pc}
   14060:	cmp	r0, #0
   14064:	bne	14084 <__assert_fail@plt+0x3308>
   14068:	bl	10cc8 <__errno_location@plt>
   1406c:	mov	r3, #0
   14070:	str	r3, [r0]
   14074:	mvn	r0, #0
   14078:	pop	{r4, r5, r6, pc}
   1407c:	mvn	r0, #0
   14080:	pop	{r4, r5, r6, pc}
   14084:	mvn	r0, #0
   14088:	pop	{r4, r5, r6, pc}
   1408c:	push	{lr}		; (str lr, [sp, #-4]!)
   14090:	sub	sp, sp, #268	; 0x10c
   14094:	ldr	r2, [pc, #68]	; 140e0 <__assert_fail@plt+0x3364>
   14098:	add	r1, sp, #4
   1409c:	bl	14120 <__assert_fail@plt+0x33a4>
   140a0:	cmp	r0, #0
   140a4:	movne	r0, #0
   140a8:	bne	140d8 <__assert_fail@plt+0x335c>
   140ac:	ldr	r1, [pc, #48]	; 140e4 <__assert_fail@plt+0x3368>
   140b0:	add	r0, sp, #4
   140b4:	bl	10b78 <strcmp@plt>
   140b8:	cmp	r0, #0
   140bc:	moveq	r0, #0
   140c0:	beq	140d8 <__assert_fail@plt+0x335c>
   140c4:	ldr	r1, [pc, #28]	; 140e8 <__assert_fail@plt+0x336c>
   140c8:	add	r0, sp, #4
   140cc:	bl	10b78 <strcmp@plt>
   140d0:	adds	r0, r0, #0
   140d4:	movne	r0, #1
   140d8:	add	sp, sp, #268	; 0x10c
   140dc:	pop	{pc}		; (ldr pc, [sp], #4)
   140e0:	andeq	r0, r0, r1, lsl #2
   140e4:	andeq	r4, r1, r0, ror #29
   140e8:	andeq	r4, r1, r4, ror #29
   140ec:	push	{r4, lr}
   140f0:	mov	r0, #14
   140f4:	bl	10d28 <nl_langinfo@plt>
   140f8:	cmp	r0, #0
   140fc:	beq	14114 <__assert_fail@plt+0x3398>
   14100:	ldrb	r2, [r0]
   14104:	ldr	r3, [pc, #16]	; 1411c <__assert_fail@plt+0x33a0>
   14108:	cmp	r2, #0
   1410c:	moveq	r0, r3
   14110:	pop	{r4, pc}
   14114:	ldr	r0, [pc]	; 1411c <__assert_fail@plt+0x33a0>
   14118:	pop	{r4, pc}
   1411c:	andeq	r4, r1, ip, ror #29
   14120:	push	{r4, r5, r6, lr}
   14124:	mov	r6, r1
   14128:	mov	r4, r2
   1412c:	mov	r1, #0
   14130:	bl	10d10 <setlocale@plt>
   14134:	subs	r5, r0, #0
   14138:	beq	1415c <__assert_fail@plt+0x33e0>
   1413c:	mov	r0, r5
   14140:	bl	10cb0 <strlen@plt>
   14144:	cmp	r4, r0
   14148:	bhi	14174 <__assert_fail@plt+0x33f8>
   1414c:	cmp	r4, #0
   14150:	bne	1418c <__assert_fail@plt+0x3410>
   14154:	mov	r0, #34	; 0x22
   14158:	pop	{r4, r5, r6, pc}
   1415c:	cmp	r4, #0
   14160:	beq	141b0 <__assert_fail@plt+0x3434>
   14164:	mov	r3, #0
   14168:	strb	r3, [r6]
   1416c:	mov	r0, #22
   14170:	pop	{r4, r5, r6, pc}
   14174:	add	r2, r0, #1
   14178:	mov	r1, r5
   1417c:	mov	r0, r6
   14180:	bl	10bcc <memcpy@plt>
   14184:	mov	r0, #0
   14188:	pop	{r4, r5, r6, pc}
   1418c:	sub	r4, r4, #1
   14190:	mov	r2, r4
   14194:	mov	r1, r5
   14198:	mov	r0, r6
   1419c:	bl	10bcc <memcpy@plt>
   141a0:	mov	r3, #0
   141a4:	strb	r3, [r6, r4]
   141a8:	mov	r0, #34	; 0x22
   141ac:	pop	{r4, r5, r6, pc}
   141b0:	mov	r0, #22
   141b4:	pop	{r4, r5, r6, pc}
   141b8:	push	{r4, lr}
   141bc:	mov	r1, #0
   141c0:	bl	10d10 <setlocale@plt>
   141c4:	pop	{r4, pc}
   141c8:	subs	r2, r1, #1
   141cc:	bxeq	lr
   141d0:	bcc	143a8 <__assert_fail@plt+0x362c>
   141d4:	cmp	r0, r1
   141d8:	bls	1438c <__assert_fail@plt+0x3610>
   141dc:	tst	r1, r2
   141e0:	beq	14398 <__assert_fail@plt+0x361c>
   141e4:	clz	r3, r0
   141e8:	clz	r2, r1
   141ec:	sub	r3, r2, r3
   141f0:	rsbs	r3, r3, #31
   141f4:	addne	r3, r3, r3, lsl #1
   141f8:	mov	r2, #0
   141fc:	addne	pc, pc, r3, lsl #2
   14200:	nop			; (mov r0, r0)
   14204:	cmp	r0, r1, lsl #31
   14208:	adc	r2, r2, r2
   1420c:	subcs	r0, r0, r1, lsl #31
   14210:	cmp	r0, r1, lsl #30
   14214:	adc	r2, r2, r2
   14218:	subcs	r0, r0, r1, lsl #30
   1421c:	cmp	r0, r1, lsl #29
   14220:	adc	r2, r2, r2
   14224:	subcs	r0, r0, r1, lsl #29
   14228:	cmp	r0, r1, lsl #28
   1422c:	adc	r2, r2, r2
   14230:	subcs	r0, r0, r1, lsl #28
   14234:	cmp	r0, r1, lsl #27
   14238:	adc	r2, r2, r2
   1423c:	subcs	r0, r0, r1, lsl #27
   14240:	cmp	r0, r1, lsl #26
   14244:	adc	r2, r2, r2
   14248:	subcs	r0, r0, r1, lsl #26
   1424c:	cmp	r0, r1, lsl #25
   14250:	adc	r2, r2, r2
   14254:	subcs	r0, r0, r1, lsl #25
   14258:	cmp	r0, r1, lsl #24
   1425c:	adc	r2, r2, r2
   14260:	subcs	r0, r0, r1, lsl #24
   14264:	cmp	r0, r1, lsl #23
   14268:	adc	r2, r2, r2
   1426c:	subcs	r0, r0, r1, lsl #23
   14270:	cmp	r0, r1, lsl #22
   14274:	adc	r2, r2, r2
   14278:	subcs	r0, r0, r1, lsl #22
   1427c:	cmp	r0, r1, lsl #21
   14280:	adc	r2, r2, r2
   14284:	subcs	r0, r0, r1, lsl #21
   14288:	cmp	r0, r1, lsl #20
   1428c:	adc	r2, r2, r2
   14290:	subcs	r0, r0, r1, lsl #20
   14294:	cmp	r0, r1, lsl #19
   14298:	adc	r2, r2, r2
   1429c:	subcs	r0, r0, r1, lsl #19
   142a0:	cmp	r0, r1, lsl #18
   142a4:	adc	r2, r2, r2
   142a8:	subcs	r0, r0, r1, lsl #18
   142ac:	cmp	r0, r1, lsl #17
   142b0:	adc	r2, r2, r2
   142b4:	subcs	r0, r0, r1, lsl #17
   142b8:	cmp	r0, r1, lsl #16
   142bc:	adc	r2, r2, r2
   142c0:	subcs	r0, r0, r1, lsl #16
   142c4:	cmp	r0, r1, lsl #15
   142c8:	adc	r2, r2, r2
   142cc:	subcs	r0, r0, r1, lsl #15
   142d0:	cmp	r0, r1, lsl #14
   142d4:	adc	r2, r2, r2
   142d8:	subcs	r0, r0, r1, lsl #14
   142dc:	cmp	r0, r1, lsl #13
   142e0:	adc	r2, r2, r2
   142e4:	subcs	r0, r0, r1, lsl #13
   142e8:	cmp	r0, r1, lsl #12
   142ec:	adc	r2, r2, r2
   142f0:	subcs	r0, r0, r1, lsl #12
   142f4:	cmp	r0, r1, lsl #11
   142f8:	adc	r2, r2, r2
   142fc:	subcs	r0, r0, r1, lsl #11
   14300:	cmp	r0, r1, lsl #10
   14304:	adc	r2, r2, r2
   14308:	subcs	r0, r0, r1, lsl #10
   1430c:	cmp	r0, r1, lsl #9
   14310:	adc	r2, r2, r2
   14314:	subcs	r0, r0, r1, lsl #9
   14318:	cmp	r0, r1, lsl #8
   1431c:	adc	r2, r2, r2
   14320:	subcs	r0, r0, r1, lsl #8
   14324:	cmp	r0, r1, lsl #7
   14328:	adc	r2, r2, r2
   1432c:	subcs	r0, r0, r1, lsl #7
   14330:	cmp	r0, r1, lsl #6
   14334:	adc	r2, r2, r2
   14338:	subcs	r0, r0, r1, lsl #6
   1433c:	cmp	r0, r1, lsl #5
   14340:	adc	r2, r2, r2
   14344:	subcs	r0, r0, r1, lsl #5
   14348:	cmp	r0, r1, lsl #4
   1434c:	adc	r2, r2, r2
   14350:	subcs	r0, r0, r1, lsl #4
   14354:	cmp	r0, r1, lsl #3
   14358:	adc	r2, r2, r2
   1435c:	subcs	r0, r0, r1, lsl #3
   14360:	cmp	r0, r1, lsl #2
   14364:	adc	r2, r2, r2
   14368:	subcs	r0, r0, r1, lsl #2
   1436c:	cmp	r0, r1, lsl #1
   14370:	adc	r2, r2, r2
   14374:	subcs	r0, r0, r1, lsl #1
   14378:	cmp	r0, r1
   1437c:	adc	r2, r2, r2
   14380:	subcs	r0, r0, r1
   14384:	mov	r0, r2
   14388:	bx	lr
   1438c:	moveq	r0, #1
   14390:	movne	r0, #0
   14394:	bx	lr
   14398:	clz	r2, r1
   1439c:	rsb	r2, r2, #31
   143a0:	lsr	r0, r0, r2
   143a4:	bx	lr
   143a8:	cmp	r0, #0
   143ac:	mvnne	r0, #0
   143b0:	b	14614 <__assert_fail@plt+0x3898>
   143b4:	cmp	r1, #0
   143b8:	beq	143a8 <__assert_fail@plt+0x362c>
   143bc:	push	{r0, r1, lr}
   143c0:	bl	141c8 <__assert_fail@plt+0x344c>
   143c4:	pop	{r1, r2, lr}
   143c8:	mul	r3, r2, r0
   143cc:	sub	r1, r1, r3
   143d0:	bx	lr
   143d4:	cmp	r1, #0
   143d8:	beq	145e4 <__assert_fail@plt+0x3868>
   143dc:	eor	ip, r0, r1
   143e0:	rsbmi	r1, r1, #0
   143e4:	subs	r2, r1, #1
   143e8:	beq	145b0 <__assert_fail@plt+0x3834>
   143ec:	movs	r3, r0
   143f0:	rsbmi	r3, r0, #0
   143f4:	cmp	r3, r1
   143f8:	bls	145bc <__assert_fail@plt+0x3840>
   143fc:	tst	r1, r2
   14400:	beq	145cc <__assert_fail@plt+0x3850>
   14404:	clz	r2, r3
   14408:	clz	r0, r1
   1440c:	sub	r2, r0, r2
   14410:	rsbs	r2, r2, #31
   14414:	addne	r2, r2, r2, lsl #1
   14418:	mov	r0, #0
   1441c:	addne	pc, pc, r2, lsl #2
   14420:	nop			; (mov r0, r0)
   14424:	cmp	r3, r1, lsl #31
   14428:	adc	r0, r0, r0
   1442c:	subcs	r3, r3, r1, lsl #31
   14430:	cmp	r3, r1, lsl #30
   14434:	adc	r0, r0, r0
   14438:	subcs	r3, r3, r1, lsl #30
   1443c:	cmp	r3, r1, lsl #29
   14440:	adc	r0, r0, r0
   14444:	subcs	r3, r3, r1, lsl #29
   14448:	cmp	r3, r1, lsl #28
   1444c:	adc	r0, r0, r0
   14450:	subcs	r3, r3, r1, lsl #28
   14454:	cmp	r3, r1, lsl #27
   14458:	adc	r0, r0, r0
   1445c:	subcs	r3, r3, r1, lsl #27
   14460:	cmp	r3, r1, lsl #26
   14464:	adc	r0, r0, r0
   14468:	subcs	r3, r3, r1, lsl #26
   1446c:	cmp	r3, r1, lsl #25
   14470:	adc	r0, r0, r0
   14474:	subcs	r3, r3, r1, lsl #25
   14478:	cmp	r3, r1, lsl #24
   1447c:	adc	r0, r0, r0
   14480:	subcs	r3, r3, r1, lsl #24
   14484:	cmp	r3, r1, lsl #23
   14488:	adc	r0, r0, r0
   1448c:	subcs	r3, r3, r1, lsl #23
   14490:	cmp	r3, r1, lsl #22
   14494:	adc	r0, r0, r0
   14498:	subcs	r3, r3, r1, lsl #22
   1449c:	cmp	r3, r1, lsl #21
   144a0:	adc	r0, r0, r0
   144a4:	subcs	r3, r3, r1, lsl #21
   144a8:	cmp	r3, r1, lsl #20
   144ac:	adc	r0, r0, r0
   144b0:	subcs	r3, r3, r1, lsl #20
   144b4:	cmp	r3, r1, lsl #19
   144b8:	adc	r0, r0, r0
   144bc:	subcs	r3, r3, r1, lsl #19
   144c0:	cmp	r3, r1, lsl #18
   144c4:	adc	r0, r0, r0
   144c8:	subcs	r3, r3, r1, lsl #18
   144cc:	cmp	r3, r1, lsl #17
   144d0:	adc	r0, r0, r0
   144d4:	subcs	r3, r3, r1, lsl #17
   144d8:	cmp	r3, r1, lsl #16
   144dc:	adc	r0, r0, r0
   144e0:	subcs	r3, r3, r1, lsl #16
   144e4:	cmp	r3, r1, lsl #15
   144e8:	adc	r0, r0, r0
   144ec:	subcs	r3, r3, r1, lsl #15
   144f0:	cmp	r3, r1, lsl #14
   144f4:	adc	r0, r0, r0
   144f8:	subcs	r3, r3, r1, lsl #14
   144fc:	cmp	r3, r1, lsl #13
   14500:	adc	r0, r0, r0
   14504:	subcs	r3, r3, r1, lsl #13
   14508:	cmp	r3, r1, lsl #12
   1450c:	adc	r0, r0, r0
   14510:	subcs	r3, r3, r1, lsl #12
   14514:	cmp	r3, r1, lsl #11
   14518:	adc	r0, r0, r0
   1451c:	subcs	r3, r3, r1, lsl #11
   14520:	cmp	r3, r1, lsl #10
   14524:	adc	r0, r0, r0
   14528:	subcs	r3, r3, r1, lsl #10
   1452c:	cmp	r3, r1, lsl #9
   14530:	adc	r0, r0, r0
   14534:	subcs	r3, r3, r1, lsl #9
   14538:	cmp	r3, r1, lsl #8
   1453c:	adc	r0, r0, r0
   14540:	subcs	r3, r3, r1, lsl #8
   14544:	cmp	r3, r1, lsl #7
   14548:	adc	r0, r0, r0
   1454c:	subcs	r3, r3, r1, lsl #7
   14550:	cmp	r3, r1, lsl #6
   14554:	adc	r0, r0, r0
   14558:	subcs	r3, r3, r1, lsl #6
   1455c:	cmp	r3, r1, lsl #5
   14560:	adc	r0, r0, r0
   14564:	subcs	r3, r3, r1, lsl #5
   14568:	cmp	r3, r1, lsl #4
   1456c:	adc	r0, r0, r0
   14570:	subcs	r3, r3, r1, lsl #4
   14574:	cmp	r3, r1, lsl #3
   14578:	adc	r0, r0, r0
   1457c:	subcs	r3, r3, r1, lsl #3
   14580:	cmp	r3, r1, lsl #2
   14584:	adc	r0, r0, r0
   14588:	subcs	r3, r3, r1, lsl #2
   1458c:	cmp	r3, r1, lsl #1
   14590:	adc	r0, r0, r0
   14594:	subcs	r3, r3, r1, lsl #1
   14598:	cmp	r3, r1
   1459c:	adc	r0, r0, r0
   145a0:	subcs	r3, r3, r1
   145a4:	cmp	ip, #0
   145a8:	rsbmi	r0, r0, #0
   145ac:	bx	lr
   145b0:	teq	ip, r0
   145b4:	rsbmi	r0, r0, #0
   145b8:	bx	lr
   145bc:	movcc	r0, #0
   145c0:	asreq	r0, ip, #31
   145c4:	orreq	r0, r0, #1
   145c8:	bx	lr
   145cc:	clz	r2, r1
   145d0:	rsb	r2, r2, #31
   145d4:	cmp	ip, #0
   145d8:	lsr	r0, r3, r2
   145dc:	rsbmi	r0, r0, #0
   145e0:	bx	lr
   145e4:	cmp	r0, #0
   145e8:	mvngt	r0, #-2147483648	; 0x80000000
   145ec:	movlt	r0, #-2147483648	; 0x80000000
   145f0:	b	14614 <__assert_fail@plt+0x3898>
   145f4:	cmp	r1, #0
   145f8:	beq	145e4 <__assert_fail@plt+0x3868>
   145fc:	push	{r0, r1, lr}
   14600:	bl	143dc <__assert_fail@plt+0x3660>
   14604:	pop	{r1, r2, lr}
   14608:	mul	r3, r2, r0
   1460c:	sub	r1, r1, r3
   14610:	bx	lr
   14614:	push	{r1, lr}
   14618:	mov	r0, #8
   1461c:	bl	10b6c <raise@plt>
   14620:	pop	{r1, pc}
   14624:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14628:	mov	r7, r0
   1462c:	ldr	r6, [pc, #72]	; 1467c <__assert_fail@plt+0x3900>
   14630:	ldr	r5, [pc, #72]	; 14680 <__assert_fail@plt+0x3904>
   14634:	add	r6, pc, r6
   14638:	add	r5, pc, r5
   1463c:	sub	r6, r6, r5
   14640:	mov	r8, r1
   14644:	mov	r9, r2
   14648:	bl	10b40 <calloc@plt-0x20>
   1464c:	asrs	r6, r6, #2
   14650:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14654:	mov	r4, #0
   14658:	add	r4, r4, #1
   1465c:	ldr	r3, [r5], #4
   14660:	mov	r2, r9
   14664:	mov	r1, r8
   14668:	mov	r0, r7
   1466c:	blx	r3
   14670:	cmp	r6, r4
   14674:	bne	14658 <__assert_fail@plt+0x38dc>
   14678:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1467c:	ldrdeq	r0, [r1], -r4
   14680:	andeq	r0, r1, ip, asr #17
   14684:	bx	lr
   14688:	ldr	r3, [pc, #12]	; 1469c <__assert_fail@plt+0x3920>
   1468c:	mov	r1, #0
   14690:	add	r3, pc, r3
   14694:	ldr	r2, [r3]
   14698:	b	10cd4 <__cxa_atexit@plt>
   1469c:	andeq	r0, r1, r4, lsr sl

Disassembly of section .fini:

000146a0 <.fini>:
   146a0:	push	{r3, lr}
   146a4:	pop	{r3, pc}
