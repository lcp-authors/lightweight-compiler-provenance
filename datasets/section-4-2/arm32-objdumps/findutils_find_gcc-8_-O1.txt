
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011e60 <.init>:
   11e60:	push	{r3, lr}
   11e64:	bl	1260c <__assert_fail@plt+0x48>
   11e68:	pop	{r3, pc}

Disassembly of section .plt:

00011e6c <pthread_mutex_unlock@plt-0x14>:
   11e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e70:	ldr	lr, [pc, #4]	; 11e7c <pthread_mutex_unlock@plt-0x4>
   11e74:	add	lr, pc, lr
   11e78:	ldr	pc, [lr, #8]!
   11e7c:	andeq	r9, r4, r4, lsl #3

00011e80 <pthread_mutex_unlock@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #299008	; 0x49000
   11e88:	ldr	pc, [ip, #388]!	; 0x184

00011e8c <fdopen@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #299008	; 0x49000
   11e94:	ldr	pc, [ip, #380]!	; 0x17c

00011e98 <fstatfs64@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #299008	; 0x49000
   11ea0:	ldr	pc, [ip, #372]!	; 0x174

00011ea4 <calloc@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #299008	; 0x49000
   11eac:	ldr	pc, [ip, #364]!	; 0x16c

00011eb0 <endgrent@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #299008	; 0x49000
   11eb8:	ldr	pc, [ip, #356]!	; 0x164

00011ebc <wctype@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #299008	; 0x49000
   11ec4:	ldr	pc, [ip, #348]!	; 0x15c

00011ec8 <raise@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #299008	; 0x49000
   11ed0:	ldr	pc, [ip, #340]!	; 0x154

00011ed4 <wcrtomb@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #299008	; 0x49000
   11edc:	ldr	pc, [ip, #332]!	; 0x14c

00011ee0 <gmtime_r@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #299008	; 0x49000
   11ee8:	ldr	pc, [ip, #324]!	; 0x144

00011eec <__getdelim@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #299008	; 0x49000
   11ef4:	ldr	pc, [ip, #316]!	; 0x13c

00011ef8 <getpwnam@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #299008	; 0x49000
   11f00:	ldr	pc, [ip, #308]!	; 0x134

00011f04 <is_selinux_enabled@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #299008	; 0x49000
   11f0c:	ldr	pc, [ip, #300]!	; 0x12c

00011f10 <iswctype@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #299008	; 0x49000
   11f18:	ldr	pc, [ip, #292]!	; 0x124

00011f1c <strcmp@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #299008	; 0x49000
   11f24:	ldr	pc, [ip, #284]!	; 0x11c

00011f28 <strtol@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #299008	; 0x49000
   11f30:	ldr	pc, [ip, #276]!	; 0x114

00011f34 <getpwuid@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #299008	; 0x49000
   11f3c:	ldr	pc, [ip, #268]!	; 0x10c

00011f40 <printf@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #299008	; 0x49000
   11f48:	ldr	pc, [ip, #260]!	; 0x104

00011f4c <pthread_mutex_destroy@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #299008	; 0x49000
   11f54:	ldr	pc, [ip, #252]!	; 0xfc

00011f58 <mktime@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #299008	; 0x49000
   11f60:	ldr	pc, [ip, #244]!	; 0xf4

00011f64 <fflush@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #299008	; 0x49000
   11f6c:	ldr	pc, [ip, #236]!	; 0xec

00011f70 <unlinkat@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #299008	; 0x49000
   11f78:	ldr	pc, [ip, #228]!	; 0xe4

00011f7c <wcwidth@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #299008	; 0x49000
   11f84:	ldr	pc, [ip, #220]!	; 0xdc

00011f88 <lsetfilecon@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #299008	; 0x49000
   11f90:	ldr	pc, [ip, #212]!	; 0xd4

00011f94 <memmove@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #299008	; 0x49000
   11f9c:	ldr	pc, [ip, #204]!	; 0xcc

00011fa0 <free@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #299008	; 0x49000
   11fa8:	ldr	pc, [ip, #196]!	; 0xc4

00011fac <pthread_mutex_lock@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #299008	; 0x49000
   11fb4:	ldr	pc, [ip, #188]!	; 0xbc

00011fb8 <faccessat@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #299008	; 0x49000
   11fc0:	ldr	pc, [ip, #180]!	; 0xb4

00011fc4 <ferror@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #299008	; 0x49000
   11fcc:	ldr	pc, [ip, #172]!	; 0xac

00011fd0 <thrd_exit@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #299008	; 0x49000
   11fd8:	ldr	pc, [ip, #164]!	; 0xa4

00011fdc <strndup@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #299008	; 0x49000
   11fe4:	ldr	pc, [ip, #156]!	; 0x9c

00011fe8 <clock_gettime@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #299008	; 0x49000
   11ff0:	ldr	pc, [ip, #148]!	; 0x94

00011ff4 <_exit@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #299008	; 0x49000
   11ffc:	ldr	pc, [ip, #140]!	; 0x8c

00012000 <memcpy@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #299008	; 0x49000
   12008:	ldr	pc, [ip, #132]!	; 0x84

0001200c <execvp@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #299008	; 0x49000
   12014:	ldr	pc, [ip, #124]!	; 0x7c

00012018 <pthread_mutex_init@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #299008	; 0x49000
   12020:	ldr	pc, [ip, #116]!	; 0x74

00012024 <__strtoull_internal@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #299008	; 0x49000
   1202c:	ldr	pc, [ip, #108]!	; 0x6c

00012030 <towlower@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #299008	; 0x49000
   12038:	ldr	pc, [ip, #100]!	; 0x64

0001203c <mbsinit@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #299008	; 0x49000
   12044:	ldr	pc, [ip, #92]!	; 0x5c

00012048 <signal@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #299008	; 0x49000
   12050:	ldr	pc, [ip, #84]!	; 0x54

00012054 <time@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #299008	; 0x49000
   1205c:	ldr	pc, [ip, #76]!	; 0x4c

00012060 <memcmp@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #299008	; 0x49000
   12068:	ldr	pc, [ip, #68]!	; 0x44

0001206c <uname@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #299008	; 0x49000
   12074:	ldr	pc, [ip, #60]!	; 0x3c

00012078 <ctime@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #299008	; 0x49000
   12080:	ldr	pc, [ip, #52]!	; 0x34

00012084 <dcgettext@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #299008	; 0x49000
   1208c:	ldr	pc, [ip, #44]!	; 0x2c

00012090 <strdup@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #299008	; 0x49000
   12098:	ldr	pc, [ip, #36]!	; 0x24

0001209c <sysconf@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #299008	; 0x49000
   120a4:	ldr	pc, [ip, #28]!

000120a8 <getrlimit64@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #299008	; 0x49000
   120b0:	ldr	pc, [ip, #20]!

000120b4 <realloc@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #299008	; 0x49000
   120bc:	ldr	pc, [ip, #12]!

000120c0 <fgetfilecon@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #299008	; 0x49000
   120c8:	ldr	pc, [ip, #4]!

000120cc <localtime_r@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #72, 20	; 0x48000
   120d4:	ldr	pc, [ip, #4092]!	; 0xffc

000120d8 <textdomain@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #72, 20	; 0x48000
   120e0:	ldr	pc, [ip, #4084]!	; 0xff4

000120e4 <iswcntrl@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #72, 20	; 0x48000
   120ec:	ldr	pc, [ip, #4076]!	; 0xfec

000120f0 <chdir@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #72, 20	; 0x48000
   120f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000120fc <__fxstatat64@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #72, 20	; 0x48000
   12104:	ldr	pc, [ip, #4060]!	; 0xfdc

00012108 <iswprint@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #72, 20	; 0x48000
   12110:	ldr	pc, [ip, #4052]!	; 0xfd4

00012114 <tzset@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #72, 20	; 0x48000
   1211c:	ldr	pc, [ip, #4044]!	; 0xfcc

00012120 <poll@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #72, 20	; 0x48000
   12128:	ldr	pc, [ip, #4036]!	; 0xfc4

0001212c <__fxstat64@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #72, 20	; 0x48000
   12134:	ldr	pc, [ip, #4028]!	; 0xfbc

00012138 <fwrite@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #72, 20	; 0x48000
   12140:	ldr	pc, [ip, #4020]!	; 0xfb4

00012144 <strcat@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #72, 20	; 0x48000
   1214c:	ldr	pc, [ip, #4012]!	; 0xfac

00012150 <lseek64@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #72, 20	; 0x48000
   12158:	ldr	pc, [ip, #4004]!	; 0xfa4

0001215c <waitpid@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #72, 20	; 0x48000
   12164:	ldr	pc, [ip, #3996]!	; 0xf9c

00012168 <__ctype_get_mb_cur_max@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #72, 20	; 0x48000
   12170:	ldr	pc, [ip, #3988]!	; 0xf94

00012174 <hasmntopt@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #72, 20	; 0x48000
   1217c:	ldr	pc, [ip, #3980]!	; 0xf8c

00012180 <strcpy@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #72, 20	; 0x48000
   12188:	ldr	pc, [ip, #3972]!	; 0xf84

0001218c <gettimeofday@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #72, 20	; 0x48000
   12194:	ldr	pc, [ip, #3964]!	; 0xf7c

00012198 <__fpending@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #72, 20	; 0x48000
   121a0:	ldr	pc, [ip, #3956]!	; 0xf74

000121a4 <mbrtowc@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #72, 20	; 0x48000
   121ac:	ldr	pc, [ip, #3948]!	; 0xf6c

000121b0 <strtok_r@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #72, 20	; 0x48000
   121b8:	ldr	pc, [ip, #3940]!	; 0xf64

000121bc <error@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #72, 20	; 0x48000
   121c4:	ldr	pc, [ip, #3932]!	; 0xf5c

000121c8 <getmntent@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #72, 20	; 0x48000
   121d0:	ldr	pc, [ip, #3924]!	; 0xf54

000121d4 <opendir@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #72, 20	; 0x48000
   121dc:	ldr	pc, [ip, #3916]!	; 0xf4c

000121e0 <fnmatch@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #72, 20	; 0x48000
   121e8:	ldr	pc, [ip, #3908]!	; 0xf44

000121ec <open64@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #72, 20	; 0x48000
   121f4:	ldr	pc, [ip, #3900]!	; 0xf3c

000121f8 <getenv@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #72, 20	; 0x48000
   12200:	ldr	pc, [ip, #3892]!	; 0xf34

00012204 <lgetfilecon@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #72, 20	; 0x48000
   1220c:	ldr	pc, [ip, #3884]!	; 0xf2c

00012210 <malloc@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #72, 20	; 0x48000
   12218:	ldr	pc, [ip, #3876]!	; 0xf24

0001221c <__libc_start_main@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #72, 20	; 0x48000
   12224:	ldr	pc, [ip, #3868]!	; 0xf1c

00012228 <readlinkat@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #72, 20	; 0x48000
   12230:	ldr	pc, [ip, #3860]!	; 0xf14

00012234 <strftime@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #72, 20	; 0x48000
   1223c:	ldr	pc, [ip, #3852]!	; 0xf0c

00012240 <__freading@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #72, 20	; 0x48000
   12248:	ldr	pc, [ip, #3844]!	; 0xf04

0001224c <localtime@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #72, 20	; 0x48000
   12254:	ldr	pc, [ip, #3836]!	; 0xefc

00012258 <__ctype_tolower_loc@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #72, 20	; 0x48000
   12260:	ldr	pc, [ip, #3828]!	; 0xef4

00012264 <modf@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #72, 20	; 0x48000
   1226c:	ldr	pc, [ip, #3820]!	; 0xeec

00012270 <__ctype_toupper_loc@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #72, 20	; 0x48000
   12278:	ldr	pc, [ip, #3812]!	; 0xee4

0001227c <__gmon_start__@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #72, 20	; 0x48000
   12284:	ldr	pc, [ip, #3804]!	; 0xedc

00012288 <__ctype_b_loc@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #72, 20	; 0x48000
   12290:	ldr	pc, [ip, #3796]!	; 0xed4

00012294 <getcwd@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #72, 20	; 0x48000
   1229c:	ldr	pc, [ip, #3788]!	; 0xecc

000122a0 <exit@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #72, 20	; 0x48000
   122a8:	ldr	pc, [ip, #3780]!	; 0xec4

000122ac <feof@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #72, 20	; 0x48000
   122b4:	ldr	pc, [ip, #3772]!	; 0xebc

000122b8 <getfilecon@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #72, 20	; 0x48000
   122c0:	ldr	pc, [ip, #3764]!	; 0xeb4

000122c4 <strtoul@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #72, 20	; 0x48000
   122cc:	ldr	pc, [ip, #3756]!	; 0xeac

000122d0 <strlen@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #72, 20	; 0x48000
   122d8:	ldr	pc, [ip, #3748]!	; 0xea4

000122dc <strchr@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #72, 20	; 0x48000
   122e4:	ldr	pc, [ip, #3740]!	; 0xe9c

000122e8 <setenv@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #72, 20	; 0x48000
   122f0:	ldr	pc, [ip, #3732]!	; 0xe94

000122f4 <openat64@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #72, 20	; 0x48000
   122fc:	ldr	pc, [ip, #3724]!	; 0xe8c

00012300 <memrchr@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #72, 20	; 0x48000
   12308:	ldr	pc, [ip, #3716]!	; 0xe84

0001230c <fprintf@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #72, 20	; 0x48000
   12314:	ldr	pc, [ip, #3708]!	; 0xe7c

00012318 <__errno_location@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #72, 20	; 0x48000
   12320:	ldr	pc, [ip, #3700]!	; 0xe74

00012324 <iswalnum@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #72, 20	; 0x48000
   1232c:	ldr	pc, [ip, #3692]!	; 0xe6c

00012330 <snprintf@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #72, 20	; 0x48000
   12338:	ldr	pc, [ip, #3684]!	; 0xe64

0001233c <__cxa_atexit@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #72, 20	; 0x48000
   12344:	ldr	pc, [ip, #3676]!	; 0xe5c

00012348 <memset@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #72, 20	; 0x48000
   12350:	ldr	pc, [ip, #3668]!	; 0xe54

00012354 <putchar@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #72, 20	; 0x48000
   1235c:	ldr	pc, [ip, #3660]!	; 0xe4c

00012360 <strncpy@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #72, 20	; 0x48000
   12368:	ldr	pc, [ip, #3652]!	; 0xe44

0001236c <pthread_mutexattr_gettype@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #72, 20	; 0x48000
   12374:	ldr	pc, [ip, #3644]!	; 0xe3c

00012378 <btowc@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #72, 20	; 0x48000
   12380:	ldr	pc, [ip, #3636]!	; 0xe34

00012384 <strtod@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #72, 20	; 0x48000
   1238c:	ldr	pc, [ip, #3628]!	; 0xe2c

00012390 <fileno@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #72, 20	; 0x48000
   12398:	ldr	pc, [ip, #3620]!	; 0xe24

0001239c <difftime@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #72, 20	; 0x48000
   123a4:	ldr	pc, [ip, #3612]!	; 0xe1c

000123a8 <memchr@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #72, 20	; 0x48000
   123b0:	ldr	pc, [ip, #3604]!	; 0xe14

000123b4 <setfilecon@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #72, 20	; 0x48000
   123bc:	ldr	pc, [ip, #3596]!	; 0xe0c

000123c0 <access@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #72, 20	; 0x48000
   123c8:	ldr	pc, [ip, #3588]!	; 0xe04

000123cc <fclose@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #72, 20	; 0x48000
   123d4:	ldr	pc, [ip, #3580]!	; 0xdfc

000123d8 <strnlen@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #72, 20	; 0x48000
   123e0:	ldr	pc, [ip, #3572]!	; 0xdf4

000123e4 <fseeko64@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #72, 20	; 0x48000
   123ec:	ldr	pc, [ip, #3564]!	; 0xdec

000123f0 <endmntent@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #72, 20	; 0x48000
   123f8:	ldr	pc, [ip, #3556]!	; 0xde4

000123fc <fcntl64@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #72, 20	; 0x48000
   12404:	ldr	pc, [ip, #3548]!	; 0xddc

00012408 <rpmatch@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #72, 20	; 0x48000
   12410:	ldr	pc, [ip, #3540]!	; 0xdd4

00012414 <setlocale@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #72, 20	; 0x48000
   1241c:	ldr	pc, [ip, #3532]!	; 0xdcc

00012420 <fork@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #72, 20	; 0x48000
   12428:	ldr	pc, [ip, #3524]!	; 0xdc4

0001242c <endpwent@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #72, 20	; 0x48000
   12434:	ldr	pc, [ip, #3516]!	; 0xdbc

00012438 <strrchr@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #72, 20	; 0x48000
   12440:	ldr	pc, [ip, #3508]!	; 0xdb4

00012444 <vfprintf@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #72, 20	; 0x48000
   1244c:	ldr	pc, [ip, #3500]!	; 0xdac

00012450 <nl_langinfo@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #72, 20	; 0x48000
   12458:	ldr	pc, [ip, #3492]!	; 0xda4

0001245c <fputc@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #72, 20	; 0x48000
   12464:	ldr	pc, [ip, #3484]!	; 0xd9c

00012468 <sscanf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #72, 20	; 0x48000
   12470:	ldr	pc, [ip, #3476]!	; 0xd94

00012474 <localeconv@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #72, 20	; 0x48000
   1247c:	ldr	pc, [ip, #3468]!	; 0xd8c

00012480 <sprintf@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #72, 20	; 0x48000
   12488:	ldr	pc, [ip, #3460]!	; 0xd84

0001248c <readdir64@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #72, 20	; 0x48000
   12494:	ldr	pc, [ip, #3452]!	; 0xd7c

00012498 <fdopendir@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #72, 20	; 0x48000
   124a0:	ldr	pc, [ip, #3444]!	; 0xd74

000124a4 <timegm@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #72, 20	; 0x48000
   124ac:	ldr	pc, [ip, #3436]!	; 0xd6c

000124b0 <putc@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #72, 20	; 0x48000
   124b8:	ldr	pc, [ip, #3428]!	; 0xd64

000124bc <dirfd@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #72, 20	; 0x48000
   124c4:	ldr	pc, [ip, #3420]!	; 0xd5c

000124c8 <fchdir@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #72, 20	; 0x48000
   124d0:	ldr	pc, [ip, #3412]!	; 0xd54

000124d4 <fopen64@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #72, 20	; 0x48000
   124dc:	ldr	pc, [ip, #3404]!	; 0xd4c

000124e0 <qsort@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #72, 20	; 0x48000
   124e8:	ldr	pc, [ip, #3396]!	; 0xd44

000124ec <freecon@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #72, 20	; 0x48000
   124f4:	ldr	pc, [ip, #3388]!	; 0xd3c

000124f8 <strpbrk@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #72, 20	; 0x48000
   12500:	ldr	pc, [ip, #3380]!	; 0xd34

00012504 <setmntent@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #72, 20	; 0x48000
   1250c:	ldr	pc, [ip, #3372]!	; 0xd2c

00012510 <bindtextdomain@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #72, 20	; 0x48000
   12518:	ldr	pc, [ip, #3364]!	; 0xd24

0001251c <getdelim@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #72, 20	; 0x48000
   12524:	ldr	pc, [ip, #3356]!	; 0xd1c

00012528 <__xstat64@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #72, 20	; 0x48000
   12530:	ldr	pc, [ip, #3348]!	; 0xd14

00012534 <isatty@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #72, 20	; 0x48000
   1253c:	ldr	pc, [ip, #3340]!	; 0xd0c

00012540 <unsetenv@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #72, 20	; 0x48000
   12548:	ldr	pc, [ip, #3332]!	; 0xd04

0001254c <towupper@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #72, 20	; 0x48000
   12554:	ldr	pc, [ip, #3324]!	; 0xcfc

00012558 <fputs@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #72, 20	; 0x48000
   12560:	ldr	pc, [ip, #3316]!	; 0xcf4

00012564 <strncmp@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #72, 20	; 0x48000
   1256c:	ldr	pc, [ip, #3308]!	; 0xcec

00012570 <abort@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #72, 20	; 0x48000
   12578:	ldr	pc, [ip, #3300]!	; 0xce4

0001257c <close@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #72, 20	; 0x48000
   12584:	ldr	pc, [ip, #3292]!	; 0xcdc

00012588 <__lxstat64@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #72, 20	; 0x48000
   12590:	ldr	pc, [ip, #3284]!	; 0xcd4

00012594 <closedir@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #72, 20	; 0x48000
   1259c:	ldr	pc, [ip, #3276]!	; 0xccc

000125a0 <getgrgid@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #72, 20	; 0x48000
   125a8:	ldr	pc, [ip, #3268]!	; 0xcc4

000125ac <getgrnam@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #72, 20	; 0x48000
   125b4:	ldr	pc, [ip, #3260]!	; 0xcbc

000125b8 <strspn@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #72, 20	; 0x48000
   125c0:	ldr	pc, [ip, #3252]!	; 0xcb4

000125c4 <__assert_fail@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #72, 20	; 0x48000
   125cc:	ldr	pc, [ip, #3244]!	; 0xcac

Disassembly of section .text:

000125d0 <.text>:
   125d0:	mov	fp, #0
   125d4:	mov	lr, #0
   125d8:	pop	{r1}		; (ldr r1, [sp], #4)
   125dc:	mov	r2, sp
   125e0:	push	{r2}		; (str r2, [sp, #-4]!)
   125e4:	push	{r0}		; (str r0, [sp, #-4]!)
   125e8:	ldr	ip, [pc, #16]	; 12600 <__assert_fail@plt+0x3c>
   125ec:	push	{ip}		; (str ip, [sp, #-4]!)
   125f0:	ldr	r0, [pc, #12]	; 12604 <__assert_fail@plt+0x40>
   125f4:	ldr	r3, [pc, #12]	; 12608 <__assert_fail@plt+0x44>
   125f8:	bl	1221c <__libc_start_main@plt>
   125fc:	bl	12570 <abort@plt>
   12600:	andeq	r4, r4, r8, lsl #12
   12604:	andeq	r3, r1, ip, asr #2
   12608:	andeq	r4, r4, r8, lsr #11
   1260c:	ldr	r3, [pc, #20]	; 12628 <__assert_fail@plt+0x64>
   12610:	ldr	r2, [pc, #20]	; 1262c <__assert_fail@plt+0x68>
   12614:	add	r3, pc, r3
   12618:	ldr	r2, [r3, r2]
   1261c:	cmp	r2, #0
   12620:	bxeq	lr
   12624:	b	1227c <__gmon_start__@plt>
   12628:	andeq	r8, r4, r4, ror #19
   1262c:	andeq	r0, r0, ip, ror r2
   12630:	ldr	r0, [pc, #24]	; 12650 <__assert_fail@plt+0x8c>
   12634:	ldr	r3, [pc, #24]	; 12654 <__assert_fail@plt+0x90>
   12638:	cmp	r3, r0
   1263c:	bxeq	lr
   12640:	ldr	r3, [pc, #16]	; 12658 <__assert_fail@plt+0x94>
   12644:	cmp	r3, #0
   12648:	bxeq	lr
   1264c:	bx	r3
   12650:	andeq	fp, r5, r4, lsr r5
   12654:	andeq	fp, r5, r4, lsr r5
   12658:	andeq	r0, r0, r0
   1265c:	ldr	r0, [pc, #36]	; 12688 <__assert_fail@plt+0xc4>
   12660:	ldr	r1, [pc, #36]	; 1268c <__assert_fail@plt+0xc8>
   12664:	sub	r1, r1, r0
   12668:	asr	r1, r1, #2
   1266c:	add	r1, r1, r1, lsr #31
   12670:	asrs	r1, r1, #1
   12674:	bxeq	lr
   12678:	ldr	r3, [pc, #16]	; 12690 <__assert_fail@plt+0xcc>
   1267c:	cmp	r3, #0
   12680:	bxeq	lr
   12684:	bx	r3
   12688:	andeq	fp, r5, r4, lsr r5
   1268c:	andeq	fp, r5, r4, lsr r5
   12690:	andeq	r0, r0, r0
   12694:	push	{r4, lr}
   12698:	ldr	r4, [pc, #24]	; 126b8 <__assert_fail@plt+0xf4>
   1269c:	ldrb	r3, [r4]
   126a0:	cmp	r3, #0
   126a4:	popne	{r4, pc}
   126a8:	bl	12630 <__assert_fail@plt+0x6c>
   126ac:	mov	r3, #1
   126b0:	strb	r3, [r4]
   126b4:	pop	{r4, pc}
   126b8:	andeq	fp, r5, r8, asr r5
   126bc:	b	1265c <__assert_fail@plt+0x98>
   126c0:	push	{lr}		; (str lr, [sp, #-4]!)
   126c4:	sub	sp, sp, #108	; 0x6c
   126c8:	movw	r3, #48748	; 0xbe6c
   126cc:	movt	r3, #5
   126d0:	ldr	r3, [r3, #52]	; 0x34
   126d4:	mov	r1, sp
   126d8:	blx	r3
   126dc:	cmp	r0, #0
   126e0:	beq	126f8 <__assert_fail@plt+0x134>
   126e4:	bl	12318 <__errno_location@plt>
   126e8:	ldr	r0, [r0]
   126ec:	cmp	r0, #40	; 0x28
   126f0:	movne	r0, #0
   126f4:	moveq	r0, #1
   126f8:	and	r0, r0, #1
   126fc:	add	sp, sp, #108	; 0x6c
   12700:	pop	{pc}		; (ldr pc, [sp], #4)
   12704:	movw	r3, #45704	; 0xb288
   12708:	movt	r3, #5
   1270c:	ldr	r3, [r3]
   12710:	tst	r3, #512	; 0x200
   12714:	bxeq	lr
   12718:	str	r4, [sp, #-8]!
   1271c:	str	lr, [sp, #4]
   12720:	cmn	r0, #100	; 0x64
   12724:	cmpne	r0, #0
   12728:	blt	12758 <__assert_fail@plt+0x194>
   1272c:	movw	r3, #48704	; 0xbe40
   12730:	movt	r3, #5
   12734:	str	r0, [r3, #16]
   12738:	movw	r3, #45704	; 0xb288
   1273c:	movt	r3, #5
   12740:	ldr	r3, [r3, #4]
   12744:	cmp	r3, #0
   12748:	blt	12778 <__assert_fail@plt+0x1b4>
   1274c:	ldr	r4, [sp]
   12750:	add	sp, sp, #4
   12754:	pop	{pc}		; (ldr pc, [sp], #4)
   12758:	movw	r3, #17968	; 0x4630
   1275c:	movt	r3, #4
   12760:	mov	r2, #107	; 0x6b
   12764:	movw	r1, #18024	; 0x4668
   12768:	movt	r1, #4
   1276c:	movw	r0, #18036	; 0x4674
   12770:	movt	r0, #4
   12774:	bl	125c4 <__assert_fail@plt>
   12778:	cmn	r0, #100	; 0x64
   1277c:	beq	12794 <__assert_fail@plt+0x1d0>
   12780:	bl	22c64 <__assert_fail@plt+0x106a0>
   12784:	movw	r3, #45704	; 0xb288
   12788:	movt	r3, #5
   1278c:	str	r0, [r3, #4]
   12790:	b	1274c <__assert_fail@plt+0x188>
   12794:	movw	r3, #45704	; 0xb288
   12798:	movt	r3, #5
   1279c:	mvn	r2, #99	; 0x63
   127a0:	str	r2, [r3, #4]
   127a4:	b	1274c <__assert_fail@plt+0x188>
   127a8:	movw	r3, #45704	; 0xb288
   127ac:	movt	r3, #5
   127b0:	ldr	r3, [r3]
   127b4:	tst	r3, #512	; 0x200
   127b8:	bxeq	lr
   127bc:	movw	r3, #45704	; 0xb288
   127c0:	movt	r3, #5
   127c4:	ldr	r0, [r3, #4]
   127c8:	cmp	r0, #0
   127cc:	bxlt	lr
   127d0:	str	r4, [sp, #-8]!
   127d4:	str	lr, [sp, #4]
   127d8:	bl	1257c <close@plt>
   127dc:	movw	r3, #45704	; 0xb288
   127e0:	movt	r3, #5
   127e4:	mvn	r2, #0
   127e8:	str	r2, [r3, #4]
   127ec:	ldr	r4, [sp]
   127f0:	add	sp, sp, #4
   127f4:	pop	{pc}		; (ldr pc, [sp], #4)
   127f8:	sub	r3, r0, #1
   127fc:	cmp	r3, #13
   12800:	ldrls	pc, [pc, r3, lsl #2]
   12804:	b	128dc <__assert_fail@plt+0x318>
   12808:	andeq	r2, r1, r0, lsl r9
   1280c:	andeq	r2, r1, r0, asr #16
   12810:	andeq	r2, r1, ip, asr #16
   12814:	andeq	r2, r1, r8, asr r8
   12818:	andeq	r2, r1, r4, ror #16
   1281c:	andeq	r2, r1, r0, ror r8
   12820:	andeq	r2, r1, ip, ror r8
   12824:	andeq	r2, r1, r8, lsl #17
   12828:	muleq	r1, r4, r8
   1282c:	andeq	r2, r1, r0, lsr #17
   12830:	andeq	r2, r1, ip, lsr #17
   12834:			; <UNDEFINED> instruction: 0x000128b8
   12838:	andeq	r2, r1, r4, asr #17
   1283c:	ldrdeq	r2, [r1], -r0
   12840:	movw	r0, #18192	; 0x4710
   12844:	movt	r0, #4
   12848:	bx	lr
   1284c:	movw	r0, #18080	; 0x46a0
   12850:	movt	r0, #4
   12854:	bx	lr
   12858:	movw	r0, #18092	; 0x46ac
   1285c:	movt	r0, #4
   12860:	bx	lr
   12864:	movw	r0, #18100	; 0x46b4
   12868:	movt	r0, #4
   1286c:	bx	lr
   12870:	movw	r0, #18108	; 0x46bc
   12874:	movt	r0, #4
   12878:	bx	lr
   1287c:	movw	r0, #18116	; 0x46c4
   12880:	movt	r0, #4
   12884:	bx	lr
   12888:	movw	r0, #18124	; 0x46cc
   1288c:	movt	r0, #4
   12890:	bx	lr
   12894:	movw	r0, #18132	; 0x46d4
   12898:	movt	r0, #4
   1289c:	bx	lr
   128a0:	movw	r0, #18144	; 0x46e0
   128a4:	movt	r0, #4
   128a8:	bx	lr
   128ac:	movw	r0, #18152	; 0x46e8
   128b0:	movt	r0, #4
   128b4:	bx	lr
   128b8:	movw	r0, #18164	; 0x46f4
   128bc:	movt	r0, #4
   128c0:	bx	lr
   128c4:	movw	r0, #18172	; 0x46fc
   128c8:	movt	r0, #4
   128cc:	bx	lr
   128d0:	movw	r0, #18184	; 0x4708
   128d4:	movt	r0, #4
   128d8:	bx	lr
   128dc:	str	r4, [sp, #-8]!
   128e0:	str	lr, [sp, #4]
   128e4:	mov	r2, r0
   128e8:	movw	r4, #46428	; 0xb55c
   128ec:	movt	r4, #5
   128f0:	movw	r1, #18200	; 0x4718
   128f4:	movt	r1, #4
   128f8:	mov	r0, r4
   128fc:	bl	12480 <sprintf@plt>
   12900:	mov	r0, r4
   12904:	ldr	r4, [sp]
   12908:	add	sp, sp, #4
   1290c:	pop	{pc}		; (ldr pc, [sp], #4)
   12910:	movw	r0, #18072	; 0x4698
   12914:	movt	r0, #4
   12918:	bx	lr
   1291c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12920:	strd	r6, [sp, #8]
   12924:	strd	r8, [sp, #16]
   12928:	strd	sl, [sp, #24]
   1292c:	str	lr, [sp, #32]
   12930:	sub	sp, sp, #164	; 0xa4
   12934:	mov	r4, r0
   12938:	str	r0, [sp, #36]	; 0x24
   1293c:	bl	122d0 <strlen@plt>
   12940:	movw	r3, #48704	; 0xbe40
   12944:	movt	r3, #5
   12948:	str	r0, [r3, #20]
   1294c:	mvn	r0, #99	; 0x63
   12950:	bl	12704 <__assert_fail@plt+0x140>
   12954:	str	r4, [sp, #152]	; 0x98
   12958:	mov	r3, #0
   1295c:	str	r3, [sp, #156]	; 0x9c
   12960:	movw	r3, #48748	; 0xbe6c
   12964:	movt	r3, #5
   12968:	ldr	r3, [r3, #48]	; 0x30
   1296c:	cmp	r3, #1
   12970:	beq	129f8 <__assert_fail@plt+0x434>
   12974:	cmp	r3, #0
   12978:	beq	12a28 <__assert_fail@plt+0x464>
   1297c:	cmp	r3, #2
   12980:	beq	12a10 <__assert_fail@plt+0x44c>
   12984:	movw	r3, #48748	; 0xbe6c
   12988:	movt	r3, #5
   1298c:	ldrb	r3, [r3, #13]
   12990:	cmp	r3, #0
   12994:	beq	129ac <__assert_fail@plt+0x3e8>
   12998:	movw	r3, #45704	; 0xb288
   1299c:	movt	r3, #5
   129a0:	ldr	r2, [r3]
   129a4:	orr	r2, r2, #64	; 0x40
   129a8:	str	r2, [r3]
   129ac:	movw	r3, #45704	; 0xb288
   129b0:	movt	r3, #5
   129b4:	mov	r2, #0
   129b8:	ldr	r1, [r3]
   129bc:	add	r0, sp, #152	; 0x98
   129c0:	bl	312d8 <__assert_fail@plt+0x1ed14>
   129c4:	subs	r8, r0, #0
   129c8:	beq	12a40 <__assert_fail@plt+0x47c>
   129cc:	bl	12318 <__errno_location@plt>
   129d0:	mov	fp, r0
   129d4:	mov	sl, #-2147483648	; 0x80000000
   129d8:	movw	r5, #48704	; 0xbe40
   129dc:	movt	r5, #5
   129e0:	movw	r6, #48748	; 0xbe6c
   129e4:	movt	r6, #5
   129e8:	movw	r3, #46408	; 0xb548
   129ec:	movt	r3, #5
   129f0:	str	r3, [sp, #32]
   129f4:	b	12d70 <__assert_fail@plt+0x7ac>
   129f8:	movw	r3, #45704	; 0xb288
   129fc:	movt	r3, #5
   12a00:	ldr	r2, [r3]
   12a04:	orr	r2, r2, #3
   12a08:	str	r2, [r3]
   12a0c:	b	12984 <__assert_fail@plt+0x3c0>
   12a10:	movw	r3, #45704	; 0xb288
   12a14:	movt	r3, #5
   12a18:	ldr	r2, [r3]
   12a1c:	orr	r2, r2, #17
   12a20:	str	r2, [r3]
   12a24:	b	12984 <__assert_fail@plt+0x3c0>
   12a28:	movw	r3, #45704	; 0xb288
   12a2c:	movt	r3, #5
   12a30:	ldr	r2, [r3]
   12a34:	orr	r2, r2, #16
   12a38:	str	r2, [r3]
   12a3c:	b	12984 <__assert_fail@plt+0x3c0>
   12a40:	bl	12318 <__errno_location@plt>
   12a44:	ldr	r4, [r0]
   12a48:	mov	r2, #5
   12a4c:	movw	r1, #18208	; 0x4720
   12a50:	movt	r1, #4
   12a54:	mov	r0, #0
   12a58:	bl	12084 <dcgettext@plt>
   12a5c:	mov	r5, r0
   12a60:	ldr	r1, [sp, #36]	; 0x24
   12a64:	mov	r0, #0
   12a68:	bl	192b8 <__assert_fail@plt+0x6cf4>
   12a6c:	mov	r3, r0
   12a70:	mov	r2, r5
   12a74:	mov	r1, r4
   12a78:	mov	r0, #0
   12a7c:	bl	121bc <error@plt>
   12a80:	movw	r3, #48704	; 0xbe40
   12a84:	movt	r3, #5
   12a88:	mov	r0, #1
   12a8c:	str	r0, [r3, #28]
   12a90:	b	13094 <__assert_fail@plt+0xad0>
   12a94:	bl	187cc <__assert_fail@plt+0x6208>
   12a98:	b	12da0 <__assert_fail@plt+0x7dc>
   12a9c:	ldr	r3, [sp, #32]
   12aa0:	ldr	r3, [r3]
   12aa4:	str	r3, [sp, #16]
   12aa8:	ldr	r2, [r4, #28]
   12aac:	ldr	r1, [r6, #72]	; 0x48
   12ab0:	mov	r0, #0
   12ab4:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12ab8:	str	r0, [sp, #20]
   12abc:	ldrh	r0, [r4, #56]	; 0x38
   12ac0:	bl	127f8 <__assert_fail@plt+0x234>
   12ac4:	str	r0, [sp, #24]
   12ac8:	ldr	r9, [r4, #48]	; 0x30
   12acc:	movw	r3, #45704	; 0xb288
   12ad0:	movt	r3, #5
   12ad4:	ldr	r7, [r3, #8]
   12ad8:	ldr	r2, [r4, #28]
   12adc:	ldr	r1, [r6, #72]	; 0x48
   12ae0:	mov	r0, #1
   12ae4:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12ae8:	str	r0, [sp, #28]
   12aec:	ldr	r2, [r4, #24]
   12af0:	ldr	r1, [r6, #72]	; 0x48
   12af4:	mov	r0, #2
   12af8:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12afc:	str	r0, [sp, #12]
   12b00:	ldr	r1, [sp, #28]
   12b04:	str	r1, [sp, #8]
   12b08:	str	r7, [sp, #4]
   12b0c:	str	r9, [sp]
   12b10:	ldr	r3, [sp, #24]
   12b14:	ldr	r2, [sp, #20]
   12b18:	movw	r1, #18228	; 0x4734
   12b1c:	movt	r1, #4
   12b20:	ldr	r0, [sp, #16]
   12b24:	bl	1230c <fprintf@plt>
   12b28:	b	12dd0 <__assert_fail@plt+0x80c>
   12b2c:	bl	127a8 <__assert_fail@plt+0x1e4>
   12b30:	b	12e08 <__assert_fail@plt+0x844>
   12b34:	ldr	r1, [r4, #28]
   12b38:	ldr	r0, [r4, #32]
   12b3c:	bl	193a0 <__assert_fail@plt+0x6ddc>
   12b40:	b	12d70 <__assert_fail@plt+0x7ac>
   12b44:	ldr	r1, [r4, #28]
   12b48:	ldr	r0, [r4, #32]
   12b4c:	bl	193a0 <__assert_fail@plt+0x6ddc>
   12b50:	ldrb	r3, [r6]
   12b54:	cmp	r3, #0
   12b58:	beq	12e54 <__assert_fail@plt+0x890>
   12b5c:	b	12d70 <__assert_fail@plt+0x7ac>
   12b60:	ldr	r3, [r4, #80]	; 0x50
   12b64:	and	r3, r3, #61440	; 0xf000
   12b68:	cmp	r3, #40960	; 0xa000
   12b6c:	beq	12be0 <__assert_fail@plt+0x61c>
   12b70:	mov	r2, #5
   12b74:	movw	r1, #18456	; 0x4818
   12b78:	movt	r1, #4
   12b7c:	mov	r0, #0
   12b80:	bl	12084 <dcgettext@plt>
   12b84:	str	r0, [sp, #16]
   12b88:	ldr	r1, [r4, #28]
   12b8c:	mov	r0, #0
   12b90:	bl	192b8 <__assert_fail@plt+0x6cf4>
   12b94:	str	r0, [sp, #20]
   12b98:	ldr	r3, [r4]
   12b9c:	ldr	r4, [r3, #40]	; 0x28
   12ba0:	ldr	r1, [r6, #72]	; 0x48
   12ba4:	cmp	r4, #0
   12ba8:	bne	12c1c <__assert_fail@plt+0x658>
   12bac:	movw	r2, #25528	; 0x63b8
   12bb0:	movt	r2, #4
   12bb4:	mov	r0, #1
   12bb8:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12bbc:	str	r0, [sp]
   12bc0:	ldr	r3, [sp, #20]
   12bc4:	ldr	r2, [sp, #16]
   12bc8:	mov	r1, #0
   12bcc:	mov	r0, r1
   12bd0:	bl	121bc <error@plt>
   12bd4:	mov	r3, #1
   12bd8:	str	r3, [r5, #28]
   12bdc:	b	12d70 <__assert_fail@plt+0x7ac>
   12be0:	mov	r2, #5
   12be4:	movw	r1, #18332	; 0x479c
   12be8:	movt	r1, #4
   12bec:	mov	r0, #0
   12bf0:	bl	12084 <dcgettext@plt>
   12bf4:	mov	r7, r0
   12bf8:	ldr	r1, [r4, #28]
   12bfc:	mov	r0, #0
   12c00:	bl	192b8 <__assert_fail@plt+0x6cf4>
   12c04:	mov	r3, r0
   12c08:	mov	r2, r7
   12c0c:	mov	r1, #0
   12c10:	mov	r0, r1
   12c14:	bl	121bc <error@plt>
   12c18:	b	12bd4 <__assert_fail@plt+0x610>
   12c1c:	ldr	r7, [r3, #28]
   12c20:	ldrb	r9, [r7, r4]
   12c24:	mov	r3, #0
   12c28:	strb	r3, [r7, r4]
   12c2c:	mov	r2, r7
   12c30:	mov	r0, #1
   12c34:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12c38:	strb	r9, [r7, r4]
   12c3c:	b	12bbc <__assert_fail@plt+0x5f8>
   12c40:	ldr	r0, [r4, #24]
   12c44:	bl	126c0 <__assert_fail@plt+0xfc>
   12c48:	cmp	r0, #0
   12c4c:	beq	12e54 <__assert_fail@plt+0x890>
   12c50:	ldr	r1, [r4, #28]
   12c54:	mov	r0, #40	; 0x28
   12c58:	bl	193a0 <__assert_fail@plt+0x6ddc>
   12c5c:	b	12d70 <__assert_fail@plt+0x7ac>
   12c60:	cmp	r1, #0
   12c64:	beq	12c88 <__assert_fail@plt+0x6c4>
   12c68:	ldr	r0, [r4, #24]
   12c6c:	bl	126c0 <__assert_fail@plt+0xfc>
   12c70:	cmp	r0, #0
   12c74:	bne	12c98 <__assert_fail@plt+0x6d4>
   12c78:	ldr	r1, [r4, #28]
   12c7c:	ldr	r0, [r4, #32]
   12c80:	bl	193a0 <__assert_fail@plt+0x6ddc>
   12c84:	b	12e54 <__assert_fail@plt+0x890>
   12c88:	ldr	r1, [r4, #28]
   12c8c:	ldr	r0, [r4, #32]
   12c90:	bl	193a0 <__assert_fail@plt+0x6ddc>
   12c94:	b	12d70 <__assert_fail@plt+0x7ac>
   12c98:	ldr	r1, [r4, #28]
   12c9c:	mov	r0, #40	; 0x28
   12ca0:	bl	193a0 <__assert_fail@plt+0x6ddc>
   12ca4:	b	12d70 <__assert_fail@plt+0x7ac>
   12ca8:	ldrb	r3, [r5, #4]
   12cac:	cmp	r3, #0
   12cb0:	bne	12ed8 <__assert_fail@plt+0x914>
   12cb4:	cmp	r2, #11
   12cb8:	beq	12cc8 <__assert_fail@plt+0x704>
   12cbc:	ldr	r3, [r5, #8]
   12cc0:	cmp	r3, #0
   12cc4:	bne	12ef4 <__assert_fail@plt+0x930>
   12cc8:	ldr	r3, [r5, #8]
   12ccc:	str	r3, [sp, #44]	; 0x2c
   12cd0:	ldr	r3, [r4, #48]	; 0x30
   12cd4:	str	r3, [r5]
   12cd8:	ldr	r3, [sp, #44]	; 0x2c
   12cdc:	cmp	r3, #0
   12ce0:	bne	12f10 <__assert_fail@plt+0x94c>
   12ce4:	ldrh	r2, [r4, #56]	; 0x38
   12ce8:	sub	r3, r2, #1
   12cec:	uxth	r3, r3
   12cf0:	cmp	r2, #6
   12cf4:	cmpne	r3, #1
   12cf8:	bhi	1312c <__assert_fail@plt+0xb68>
   12cfc:	ldrh	r3, [r4, #56]	; 0x38
   12d00:	cmp	r3, #11
   12d04:	beq	12f48 <__assert_fail@plt+0x984>
   12d08:	ldr	r3, [r6, #4]
   12d0c:	cmp	r3, #0
   12d10:	movge	r9, #1
   12d14:	blt	12f84 <__assert_fail@plt+0x9c0>
   12d18:	ldr	r2, [r4, #48]	; 0x30
   12d1c:	cmp	r2, r3
   12d20:	movlt	r7, #0
   12d24:	bge	12f5c <__assert_fail@plt+0x998>
   12d28:	ldrh	r3, [r4, #56]	; 0x38
   12d2c:	cmp	r3, #1
   12d30:	beq	12f90 <__assert_fail@plt+0x9cc>
   12d34:	cmp	r3, #6
   12d38:	beq	12fa4 <__assert_fail@plt+0x9e0>
   12d3c:	ldr	r2, [r4, #48]	; 0x30
   12d40:	ldr	r3, [r6, #8]
   12d44:	cmp	r2, r3
   12d48:	movlt	r7, #1
   12d4c:	ldr	r3, [r6, #44]	; 0x2c
   12d50:	tst	r3, #4
   12d54:	bne	12fb8 <__assert_fail@plt+0x9f4>
   12d58:	cmp	r7, #0
   12d5c:	beq	13014 <__assert_fail@plt+0xa50>
   12d60:	ldrh	r3, [r4, #56]	; 0x38
   12d64:	cmp	r3, #6
   12d68:	moveq	r3, #0
   12d6c:	strbeq	r3, [r5, #24]
   12d70:	mov	r3, #0
   12d74:	str	r3, [fp]
   12d78:	mov	r0, r8
   12d7c:	bl	31810 <__assert_fail@plt+0x1f24c>
   12d80:	subs	r4, r0, #0
   12d84:	beq	13074 <__assert_fail@plt+0xab0>
   12d88:	ldrb	r3, [r5, #32]
   12d8c:	cmp	r3, #0
   12d90:	beq	12da0 <__assert_fail@plt+0x7dc>
   12d94:	ldr	r3, [r4, #48]	; 0x30
   12d98:	cmp	r3, sl
   12d9c:	bne	12a94 <__assert_fail@plt+0x4d0>
   12da0:	ldr	sl, [r4, #48]	; 0x30
   12da4:	mov	r3, #0
   12da8:	strb	r3, [r5, #40]	; 0x28
   12dac:	strb	r3, [r5, #4]
   12db0:	ldr	r3, [r4, #80]	; 0x50
   12db4:	adds	r2, r3, #0
   12db8:	movne	r2, #1
   12dbc:	strb	r2, [r5, #5]
   12dc0:	str	r3, [r5, #8]
   12dc4:	ldr	r3, [r6, #44]	; 0x2c
   12dc8:	tst	r3, #4
   12dcc:	bne	12a9c <__assert_fail@plt+0x4d8>
   12dd0:	ldrh	r3, [r4, #56]	; 0x38
   12dd4:	cmp	r3, #6
   12dd8:	beq	12b2c <__assert_fail@plt+0x568>
   12ddc:	ldr	r1, [r4, #48]	; 0x30
   12de0:	movw	r2, #45704	; 0xb288
   12de4:	movt	r2, #5
   12de8:	ldr	r2, [r2, #8]
   12dec:	clz	r3, r1
   12df0:	lsr	r3, r3, #5
   12df4:	cmp	r1, r2
   12df8:	orrgt	r3, r3, #1
   12dfc:	cmp	r3, #0
   12e00:	beq	12e08 <__assert_fail@plt+0x844>
   12e04:	bl	127a8 <__assert_fail@plt+0x1e4>
   12e08:	ldr	r0, [r8, #32]
   12e0c:	bl	12704 <__assert_fail@plt+0x140>
   12e10:	ldr	r1, [r4, #48]	; 0x30
   12e14:	movw	r3, #45704	; 0xb288
   12e18:	movt	r3, #5
   12e1c:	str	r1, [r3, #8]
   12e20:	ldrd	r2, [r4, #160]	; 0xa0
   12e24:	strd	r2, [sp, #144]	; 0x90
   12e28:	ldrh	r3, [r4, #56]	; 0x38
   12e2c:	cmp	r3, #7
   12e30:	beq	12b34 <__assert_fail@plt+0x570>
   12e34:	cmp	r3, #4
   12e38:	beq	12b44 <__assert_fail@plt+0x580>
   12e3c:	cmp	r3, #2
   12e40:	beq	12b60 <__assert_fail@plt+0x59c>
   12e44:	cmp	r3, #13
   12e48:	beq	12c40 <__assert_fail@plt+0x67c>
   12e4c:	cmp	r3, #10
   12e50:	beq	12c60 <__assert_fail@plt+0x69c>
   12e54:	ldrh	r2, [r4, #56]	; 0x38
   12e58:	sub	r3, r2, #10
   12e5c:	uxth	r3, r3
   12e60:	cmp	r3, #1
   12e64:	bls	12ca8 <__assert_fail@plt+0x6e4>
   12e68:	mov	r3, #1
   12e6c:	strb	r3, [r5, #4]
   12e70:	strb	r3, [r5, #5]
   12e74:	mov	r2, #104	; 0x68
   12e78:	add	r1, r4, #64	; 0x40
   12e7c:	add	r0, sp, #48	; 0x30
   12e80:	bl	12000 <memcpy@plt>
   12e84:	ldr	r3, [sp, #64]	; 0x40
   12e88:	str	r3, [sp, #44]	; 0x2c
   12e8c:	str	r3, [r5, #8]
   12e90:	cmp	r3, #0
   12e94:	bne	12cd0 <__assert_fail@plt+0x70c>
   12e98:	mov	r2, #5
   12e9c:	movw	r1, #18600	; 0x48a8
   12ea0:	movt	r1, #4
   12ea4:	mov	r0, #0
   12ea8:	bl	12084 <dcgettext@plt>
   12eac:	mov	r7, r0
   12eb0:	ldr	r2, [r4, #28]
   12eb4:	ldr	r1, [r6, #72]	; 0x48
   12eb8:	mov	r0, #0
   12ebc:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12ec0:	mov	r3, r0
   12ec4:	mov	r2, r7
   12ec8:	mov	r1, #0
   12ecc:	mov	r0, r1
   12ed0:	bl	121bc <error@plt>
   12ed4:	b	12cd0 <__assert_fail@plt+0x70c>
   12ed8:	ldr	r3, [pc, #616]	; 13148 <__assert_fail@plt+0xb84>
   12edc:	mov	r2, #380	; 0x17c
   12ee0:	movw	r1, #18024	; 0x4668
   12ee4:	movt	r1, #4
   12ee8:	movw	r0, #18532	; 0x4864
   12eec:	movt	r0, #4
   12ef0:	bl	125c4 <__assert_fail@plt>
   12ef4:	ldr	r3, [pc, #588]	; 13148 <__assert_fail@plt+0xb84>
   12ef8:	movw	r2, #381	; 0x17d
   12efc:	movw	r1, #18024	; 0x4668
   12f00:	movt	r1, #4
   12f04:	movw	r0, #18552	; 0x4878
   12f08:	movt	r0, #4
   12f0c:	bl	125c4 <__assert_fail@plt>
   12f10:	ldr	r1, [r4, #28]
   12f14:	mov	r3, #0
   12f18:	str	r3, [sp]
   12f1c:	add	r3, sp, #48	; 0x30
   12f20:	add	r2, r4, #168	; 0xa8
   12f24:	add	r0, sp, #44	; 0x2c
   12f28:	bl	194e4 <__assert_fail@plt+0x6f20>
   12f2c:	cmp	r0, #0
   12f30:	beq	12d70 <__assert_fail@plt+0x7ac>
   12f34:	ldr	r3, [sp, #44]	; 0x2c
   12f38:	and	r3, r3, #61440	; 0xf000
   12f3c:	cmp	r3, #16384	; 0x4000
   12f40:	beq	12cfc <__assert_fail@plt+0x738>
   12f44:	b	12ce4 <__assert_fail@plt+0x720>
   12f48:	mov	r2, #1
   12f4c:	mov	r1, r4
   12f50:	mov	r0, r8
   12f54:	bl	31ea0 <__assert_fail@plt+0x1f8dc>
   12f58:	b	12d70 <__assert_fail@plt+0x7ac>
   12f5c:	mov	r2, #4
   12f60:	mov	r1, r4
   12f64:	mov	r0, r8
   12f68:	bl	31ea0 <__assert_fail@plt+0x1f8dc>
   12f6c:	ldr	r7, [r4, #48]	; 0x30
   12f70:	ldr	r3, [r6, #4]
   12f74:	cmp	r7, r3
   12f78:	movle	r7, #0
   12f7c:	movgt	r7, #1
   12f80:	b	12d28 <__assert_fail@plt+0x764>
   12f84:	mov	r9, #1
   12f88:	mov	r7, #0
   12f8c:	b	12d28 <__assert_fail@plt+0x764>
   12f90:	ldrb	r3, [r6]
   12f94:	cmp	r3, #0
   12f98:	moveq	r7, #1
   12f9c:	beq	12d4c <__assert_fail@plt+0x788>
   12fa0:	b	12d3c <__assert_fail@plt+0x778>
   12fa4:	ldrb	r3, [r6]
   12fa8:	cmp	r3, #0
   12fac:	movne	r7, #1
   12fb0:	bne	12d4c <__assert_fail@plt+0x788>
   12fb4:	b	12d3c <__assert_fail@plt+0x778>
   12fb8:	ldr	r3, [sp, #32]
   12fbc:	ldr	r3, [r3]
   12fc0:	str	r3, [sp, #16]
   12fc4:	ldr	r2, [r4, #28]
   12fc8:	ldr	r1, [r6, #72]	; 0x48
   12fcc:	mov	r0, #0
   12fd0:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   12fd4:	str	r0, [sp, #20]
   12fd8:	ldrh	r0, [r4, #56]	; 0x38
   12fdc:	bl	127f8 <__assert_fail@plt+0x234>
   12fe0:	ldrb	r3, [r5, #5]
   12fe4:	str	r3, [sp, #12]
   12fe8:	ldrb	r3, [r5, #4]
   12fec:	str	r3, [sp, #8]
   12ff0:	str	r7, [sp, #4]
   12ff4:	str	r9, [sp]
   12ff8:	mov	r3, r0
   12ffc:	ldr	r2, [sp, #20]
   13000:	movw	r1, #18644	; 0x48d4
   13004:	movt	r1, #4
   13008:	ldr	r0, [sp, #16]
   1300c:	bl	1230c <fprintf@plt>
   13010:	b	12d58 <__assert_fail@plt+0x794>
   13014:	ldrh	r3, [r4, #56]	; 0x38
   13018:	sub	r3, r3, #10
   1301c:	uxth	r3, r3
   13020:	cmp	r3, #1
   13024:	movls	r3, #0
   13028:	movhi	r3, #1
   1302c:	strb	r3, [r5, #4]
   13030:	ldr	r3, [r4, #24]
   13034:	str	r3, [r5, #12]
   13038:	ldr	r3, [r8, #32]
   1303c:	str	r3, [r5, #16]
   13040:	bl	167a4 <__assert_fail@plt+0x41e0>
   13044:	mov	r2, r0
   13048:	add	r1, sp, #48	; 0x30
   1304c:	ldr	r0, [r4, #28]
   13050:	bl	195f8 <__assert_fail@plt+0x7034>
   13054:	ldrb	r3, [r5, #24]
   13058:	cmp	r3, #0
   1305c:	beq	12d60 <__assert_fail@plt+0x79c>
   13060:	mov	r2, #4
   13064:	mov	r1, r4
   13068:	mov	r0, r8
   1306c:	bl	31ea0 <__assert_fail@plt+0x1f8dc>
   13070:	b	12d60 <__assert_fail@plt+0x79c>
   13074:	ldr	r4, [fp]
   13078:	cmp	r4, #0
   1307c:	bne	130b0 <__assert_fail@plt+0xaec>
   13080:	mov	r0, r8
   13084:	bl	31694 <__assert_fail@plt+0x1f0d0>
   13088:	cmp	r0, #0
   1308c:	moveq	r0, #1
   13090:	bne	130e8 <__assert_fail@plt+0xb24>
   13094:	add	sp, sp, #164	; 0xa4
   13098:	ldrd	r4, [sp]
   1309c:	ldrd	r6, [sp, #8]
   130a0:	ldrd	r8, [sp, #16]
   130a4:	ldrd	sl, [sp, #24]
   130a8:	add	sp, sp, #32
   130ac:	pop	{pc}		; (ldr pc, [sp], #4)
   130b0:	ldr	r1, [sp, #36]	; 0x24
   130b4:	bl	192b8 <__assert_fail@plt+0x6cf4>
   130b8:	mov	r3, r0
   130bc:	movw	r2, #18736	; 0x4930
   130c0:	movt	r2, #4
   130c4:	mov	r1, r4
   130c8:	mov	r0, #0
   130cc:	bl	121bc <error@plt>
   130d0:	movw	r3, #48704	; 0xbe40
   130d4:	movt	r3, #5
   130d8:	mov	r2, #1
   130dc:	str	r2, [r3, #28]
   130e0:	mov	r0, #0
   130e4:	b	13094 <__assert_fail@plt+0xad0>
   130e8:	ldr	r4, [fp]
   130ec:	mov	r2, #5
   130f0:	movw	r1, #18796	; 0x496c
   130f4:	movt	r1, #4
   130f8:	mov	r0, #0
   130fc:	bl	12084 <dcgettext@plt>
   13100:	ldr	r3, [sp, #36]	; 0x24
   13104:	mov	r2, r0
   13108:	mov	r1, r4
   1310c:	mov	r0, #0
   13110:	bl	121bc <error@plt>
   13114:	movw	r3, #48704	; 0xbe40
   13118:	movt	r3, #5
   1311c:	mov	r2, #1
   13120:	str	r2, [r3, #28]
   13124:	mov	r0, #0
   13128:	b	13094 <__assert_fail@plt+0xad0>
   1312c:	ldr	r3, [r6, #4]
   13130:	cmp	r3, #0
   13134:	movlt	r7, #0
   13138:	movlt	r9, r7
   1313c:	blt	12d3c <__assert_fail@plt+0x778>
   13140:	mov	r9, #0
   13144:	b	12d18 <__assert_fail@plt+0x754>
   13148:	andeq	r4, r4, ip, lsr r6
   1314c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13150:	strd	r6, [sp, #8]
   13154:	strd	r8, [sp, #16]
   13158:	strd	sl, [sp, #24]
   1315c:	str	lr, [sp, #32]
   13160:	sub	sp, sp, #228	; 0xe4
   13164:	mov	r4, r0
   13168:	mov	r6, r1
   1316c:	ldr	r0, [r1]
   13170:	cmp	r0, #0
   13174:	movweq	r0, #18852	; 0x49a4
   13178:	movteq	r0, #4
   1317c:	bl	2b244 <__assert_fail@plt+0x18c80>
   13180:	bl	1880c <__assert_fail@plt+0x6248>
   13184:	movw	r3, #48704	; 0xbe40
   13188:	movt	r3, #5
   1318c:	mov	r2, #0
   13190:	strb	r2, [r3, #40]	; 0x28
   13194:	str	r2, [r3, #28]
   13198:	strb	r2, [r3, #32]
   1319c:	mvn	r2, #99	; 0x63
   131a0:	str	r2, [r3, #16]
   131a4:	bl	215c8 <__assert_fail@plt+0xf004>
   131a8:	cmp	r0, #0
   131ac:	bne	13328 <__assert_fail@plt+0xd64>
   131b0:	movw	r0, #18860	; 0x49ac
   131b4:	movt	r0, #4
   131b8:	bl	199dc <__assert_fail@plt+0x7418>
   131bc:	movw	r3, #48704	; 0xbe40
   131c0:	movt	r3, #5
   131c4:	str	r0, [r3, #36]	; 0x24
   131c8:	cmp	r0, #0
   131cc:	beq	13330 <__assert_fail@plt+0xd6c>
   131d0:	movw	r0, #48748	; 0xbe6c
   131d4:	movt	r0, #5
   131d8:	bl	190fc <__assert_fail@plt+0x6b38>
   131dc:	movw	r1, #25528	; 0x63b8
   131e0:	movt	r1, #4
   131e4:	mov	r0, #6
   131e8:	bl	12414 <setlocale@plt>
   131ec:	movw	r5, #35036	; 0x88dc
   131f0:	movt	r5, #4
   131f4:	movw	r1, #18908	; 0x49dc
   131f8:	movt	r1, #4
   131fc:	mov	r0, r5
   13200:	bl	12510 <bindtextdomain@plt>
   13204:	mov	r0, r5
   13208:	bl	120d8 <textdomain@plt>
   1320c:	movw	r0, #11428	; 0x2ca4
   13210:	movt	r0, #2
   13214:	bl	4460c <__assert_fail@plt+0x32048>
   13218:	cmp	r0, #0
   1321c:	bne	1335c <__assert_fail@plt+0xd98>
   13220:	mov	r1, r6
   13224:	mov	r0, r4
   13228:	bl	18c6c <__assert_fail@plt+0x66a8>
   1322c:	mov	r7, r0
   13230:	movw	r3, #48748	; 0xbe6c
   13234:	movt	r3, #5
   13238:	ldr	r3, [r3, #44]	; 0x2c
   1323c:	tst	r3, #2
   13240:	beq	13258 <__assert_fail@plt+0xc94>
   13244:	movw	r2, #48748	; 0xbe6c
   13248:	movt	r2, #5
   1324c:	movw	r1, #35460	; 0x8a84
   13250:	movt	r1, #1
   13254:	str	r1, [r2, #52]	; 0x34
   13258:	tst	r3, #128	; 0x80
   1325c:	bne	13388 <__assert_fail@plt+0xdc4>
   13260:	mov	r2, r7
   13264:	mov	r1, r6
   13268:	mov	r0, r4
   1326c:	bl	17a84 <__assert_fail@plt+0x54c0>
   13270:	str	r0, [sp, #12]
   13274:	add	r8, r6, r7, lsl #2
   13278:	sub	r4, r4, r7
   1327c:	cmp	r4, #0
   13280:	bgt	133b4 <__assert_fail@plt+0xdf0>
   13284:	movw	r3, #48748	; 0xbe6c
   13288:	movt	r3, #5
   1328c:	ldr	r4, [r3, #76]	; 0x4c
   13290:	cmp	r4, #0
   13294:	beq	135c4 <__assert_fail@plt+0x1000>
   13298:	movw	r1, #19060	; 0x4a74
   1329c:	movt	r1, #4
   132a0:	mov	r0, r4
   132a4:	bl	11f1c <strcmp@plt>
   132a8:	cmp	r0, #0
   132ac:	bne	13470 <__assert_fail@plt+0xeac>
   132b0:	movw	r3, #48748	; 0xbe6c
   132b4:	movt	r3, #5
   132b8:	ldrb	r3, [r3, #80]	; 0x50
   132bc:	cmp	r3, #0
   132c0:	bne	13448 <__assert_fail@plt+0xe84>
   132c4:	mov	r2, #5
   132c8:	movw	r1, #19148	; 0x4acc
   132cc:	movt	r1, #4
   132d0:	mov	r0, #0
   132d4:	bl	12084 <dcgettext@plt>
   132d8:	mov	r1, r0
   132dc:	mov	r0, #0
   132e0:	bl	192b8 <__assert_fail@plt+0x6cf4>
   132e4:	mov	r5, r0
   132e8:	movw	r3, #46416	; 0xb550
   132ec:	movt	r3, #5
   132f0:	ldr	r4, [r3]
   132f4:	mov	r0, r4
   132f8:	bl	228e4 <__assert_fail@plt+0x10320>
   132fc:	mov	r9, r0
   13300:	cmp	r9, #0
   13304:	beq	135e0 <__assert_fail@plt+0x101c>
   13308:	mov	fp, #1
   1330c:	movw	r8, #48748	; 0xbe6c
   13310:	movt	r8, #5
   13314:	movw	r7, #48704	; 0xbe40
   13318:	movt	r7, #5
   1331c:	movw	sl, #19368	; 0x4ba8
   13320:	movt	sl, #4
   13324:	b	13704 <__assert_fail@plt+0x1140>
   13328:	bl	21448 <__assert_fail@plt+0xee84>
   1332c:	b	131b0 <__assert_fail@plt+0xbec>
   13330:	bl	12318 <__errno_location@plt>
   13334:	ldr	r4, [r0]
   13338:	mov	r2, #5
   1333c:	movw	r1, #18864	; 0x49b0
   13340:	movt	r1, #4
   13344:	mov	r0, #0
   13348:	bl	12084 <dcgettext@plt>
   1334c:	mov	r2, r0
   13350:	mov	r1, r4
   13354:	mov	r0, #1
   13358:	bl	121bc <error@plt>
   1335c:	bl	12318 <__errno_location@plt>
   13360:	ldr	r4, [r0]
   13364:	mov	r2, #5
   13368:	movw	r1, #18932	; 0x49f4
   1336c:	movt	r1, #4
   13370:	mov	r0, #0
   13374:	bl	12084 <dcgettext@plt>
   13378:	mov	r2, r0
   1337c:	mov	r1, r4
   13380:	mov	r0, #1
   13384:	bl	121bc <error@plt>
   13388:	movw	r3, #46408	; 0xb548
   1338c:	movt	r3, #5
   13390:	ldr	r5, [r3]
   13394:	ldr	r0, [pc, #1104]	; 137ec <__assert_fail@plt+0x1228>
   13398:	bl	12078 <ctime@plt>
   1339c:	mov	r2, r0
   133a0:	movw	r1, #18968	; 0x4a18
   133a4:	movt	r1, #4
   133a8:	mov	r0, r5
   133ac:	bl	1230c <fprintf@plt>
   133b0:	b	13260 <__assert_fail@plt+0xc9c>
   133b4:	mov	r1, #1
   133b8:	ldr	r0, [r6, r7, lsl #2]
   133bc:	bl	18be0 <__assert_fail@plt+0x661c>
   133c0:	eor	r0, r0, #1
   133c4:	uxtb	r0, r0
   133c8:	movw	r3, #48748	; 0xbe6c
   133cc:	movt	r3, #5
   133d0:	ldr	r4, [r3, #76]	; 0x4c
   133d4:	cmp	r4, #0
   133d8:	beq	135a8 <__assert_fail@plt+0xfe4>
   133dc:	cmp	r0, #0
   133e0:	beq	13298 <__assert_fail@plt+0xcd4>
   133e4:	mov	r2, #5
   133e8:	movw	r1, #18988	; 0x4a2c
   133ec:	movt	r1, #4
   133f0:	mov	r0, #0
   133f4:	bl	12084 <dcgettext@plt>
   133f8:	mov	r4, r0
   133fc:	ldr	r1, [r6, r7, lsl #2]
   13400:	mov	r0, #0
   13404:	bl	192b8 <__assert_fail@plt+0x6cf4>
   13408:	mov	r3, r0
   1340c:	mov	r2, r4
   13410:	mov	r1, #0
   13414:	mov	r0, r1
   13418:	bl	121bc <error@plt>
   1341c:	mov	r2, #5
   13420:	movw	r1, #19008	; 0x4a40
   13424:	movt	r1, #4
   13428:	mov	r0, #0
   1342c:	bl	12084 <dcgettext@plt>
   13430:	mov	r3, r0
   13434:	movw	r2, #35960	; 0x8c78
   13438:	movt	r2, #4
   1343c:	mov	r1, #0
   13440:	mov	r0, #1
   13444:	bl	121bc <error@plt>
   13448:	mov	r2, #5
   1344c:	movw	r1, #19064	; 0x4a78
   13450:	movt	r1, #4
   13454:	bl	12084 <dcgettext@plt>
   13458:	mov	r3, r0
   1345c:	movw	r2, #40500	; 0x9e34
   13460:	movt	r2, #4
   13464:	mov	r1, #0
   13468:	mov	r0, #1
   1346c:	bl	121bc <error@plt>
   13470:	mov	r1, r4
   13474:	mov	r0, #0
   13478:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1347c:	mov	r5, r0
   13480:	movw	r3, #48748	; 0xbe6c
   13484:	movt	r3, #5
   13488:	movw	r1, #42276	; 0xa524
   1348c:	movt	r1, #4
   13490:	ldr	r0, [r3, #76]	; 0x4c
   13494:	bl	124d4 <fopen64@plt>
   13498:	subs	r4, r0, #0
   1349c:	beq	134ec <__assert_fail@plt+0xf28>
   134a0:	mov	r0, r4
   134a4:	bl	12390 <fileno@plt>
   134a8:	subs	r6, r0, #0
   134ac:	blt	1351c <__assert_fail@plt+0xf58>
   134b0:	movw	r3, #48748	; 0xbe6c
   134b4:	movt	r3, #5
   134b8:	ldrb	r3, [r3, #80]	; 0x50
   134bc:	cmp	r3, #0
   134c0:	beq	134dc <__assert_fail@plt+0xf18>
   134c4:	add	r2, sp, #16
   134c8:	mov	r1, r6
   134cc:	mov	r0, #3
   134d0:	bl	1212c <__fxstat64@plt>
   134d4:	cmp	r0, #0
   134d8:	beq	13538 <__assert_fail@plt+0xf74>
   134dc:	mov	r1, #1
   134e0:	mov	r0, r6
   134e4:	bl	22bf0 <__assert_fail@plt+0x1062c>
   134e8:	b	132f4 <__assert_fail@plt+0xd30>
   134ec:	bl	12318 <__errno_location@plt>
   134f0:	ldr	r4, [r0]
   134f4:	mov	r2, #5
   134f8:	movw	r1, #19168	; 0x4ae0
   134fc:	movt	r1, #4
   13500:	mov	r0, #0
   13504:	bl	12084 <dcgettext@plt>
   13508:	mov	r3, r5
   1350c:	mov	r2, r0
   13510:	mov	r1, r4
   13514:	mov	r0, #1
   13518:	bl	121bc <error@plt>
   1351c:	ldr	r3, [pc, #716]	; 137f0 <__assert_fail@plt+0x122c>
   13520:	movw	r2, #610	; 0x262
   13524:	movw	r1, #18024	; 0x4668
   13528:	movt	r1, #4
   1352c:	movw	r0, #19196	; 0x4afc
   13530:	movt	r0, #4
   13534:	bl	125c4 <__assert_fail@plt>
   13538:	add	r2, sp, #120	; 0x78
   1353c:	mov	r1, #0
   13540:	mov	r0, #3
   13544:	bl	1212c <__fxstat64@plt>
   13548:	cmp	r0, #0
   1354c:	bne	134dc <__assert_fail@plt+0xf18>
   13550:	ldrd	r0, [sp, #112]	; 0x70
   13554:	ldrd	r2, [sp, #216]	; 0xd8
   13558:	cmp	r1, r3
   1355c:	cmpeq	r0, r2
   13560:	bne	134dc <__assert_fail@plt+0xf18>
   13564:	ldrd	r0, [sp, #16]
   13568:	ldrd	r2, [sp, #120]	; 0x78
   1356c:	cmp	r1, r3
   13570:	cmpeq	r0, r2
   13574:	bne	134dc <__assert_fail@plt+0xf18>
   13578:	mov	r2, #5
   1357c:	movw	r1, #19204	; 0x4b04
   13580:	movt	r1, #4
   13584:	mov	r0, #0
   13588:	bl	12084 <dcgettext@plt>
   1358c:	str	r5, [sp]
   13590:	mov	r3, r0
   13594:	movw	r2, #19304	; 0x4b68
   13598:	movt	r2, #4
   1359c:	mov	r1, #0
   135a0:	mov	r0, #1
   135a4:	bl	121bc <error@plt>
   135a8:	cmp	r0, #0
   135ac:	beq	135c4 <__assert_fail@plt+0x1000>
   135b0:	mov	r0, r8
   135b4:	bl	228ac <__assert_fail@plt+0x102e8>
   135b8:	mov	r9, r0
   135bc:	mov	r5, r4
   135c0:	b	13300 <__assert_fail@plt+0xd3c>
   135c4:	mov	r3, #46	; 0x2e
   135c8:	strh	r3, [sp, #120]	; 0x78
   135cc:	add	r0, sp, #120	; 0x78
   135d0:	bl	1291c <__assert_fail@plt+0x358>
   135d4:	cmp	r0, #0
   135d8:	beq	1379c <__assert_fail@plt+0x11d8>
   135dc:	b	13790 <__assert_fail@plt+0x11cc>
   135e0:	bl	2e7dc <__assert_fail@plt+0x1c218>
   135e4:	ldr	r3, [sp, #120]	; 0x78
   135e8:	cmp	r3, #3
   135ec:	beq	13664 <__assert_fail@plt+0x10a0>
   135f0:	cmp	r3, #4
   135f4:	beq	1361c <__assert_fail@plt+0x1058>
   135f8:	cmp	r3, #2
   135fc:	beq	1374c <__assert_fail@plt+0x1188>
   13600:	ldr	r3, [pc, #488]	; 137f0 <__assert_fail@plt+0x122c>
   13604:	movw	r2, #675	; 0x2a3
   13608:	movw	r1, #18024	; 0x4668
   1360c:	movt	r1, #4
   13610:	movw	r0, #19328	; 0x4b80
   13614:	movt	r0, #4
   13618:	bl	125c4 <__assert_fail@plt>
   1361c:	bl	12318 <__errno_location@plt>
   13620:	ldr	r6, [r0]
   13624:	mov	r2, #5
   13628:	movw	r1, #19312	; 0x4b70
   1362c:	movt	r1, #4
   13630:	mov	r0, #0
   13634:	bl	12084 <dcgettext@plt>
   13638:	mov	r3, r5
   1363c:	mov	r2, r0
   13640:	mov	r1, r6
   13644:	mov	r0, #0
   13648:	bl	121bc <error@plt>
   1364c:	movw	r3, #48704	; 0xbe40
   13650:	movt	r3, #5
   13654:	mov	r2, #1
   13658:	str	r2, [r3, #28]
   1365c:	mov	fp, #0
   13660:	b	1374c <__assert_fail@plt+0x1188>
   13664:	bl	2e7dc <__assert_fail@plt+0x1c218>
   13668:	ldr	r3, [r8, #76]	; 0x4c
   1366c:	cmp	r3, #0
   13670:	beq	136c0 <__assert_fail@plt+0x10fc>
   13674:	mov	r0, r9
   13678:	bl	229e0 <__assert_fail@plt+0x1041c>
   1367c:	mov	r6, r0
   13680:	mov	r2, #5
   13684:	mov	r1, sl
   13688:	mov	r0, #0
   1368c:	bl	12084 <dcgettext@plt>
   13690:	str	r0, [sp, #4]
   13694:	str	r6, [sp]
   13698:	mov	r3, r5
   1369c:	movw	r2, #19400	; 0x4bc8
   136a0:	movt	r2, #4
   136a4:	mov	r1, #0
   136a8:	mov	r0, r1
   136ac:	bl	121bc <error@plt>
   136b0:	mov	r3, #1
   136b4:	str	r3, [r7, #28]
   136b8:	mov	fp, #0
   136bc:	b	13704 <__assert_fail@plt+0x1140>
   136c0:	mov	r1, r6
   136c4:	mov	r0, #0
   136c8:	bl	192b8 <__assert_fail@plt+0x6cf4>
   136cc:	mov	r3, r0
   136d0:	movw	r2, #35960	; 0x8c78
   136d4:	movt	r2, #4
   136d8:	mov	r1, #2
   136dc:	mov	r0, #0
   136e0:	bl	121bc <error@plt>
   136e4:	b	136b0 <__assert_fail@plt+0x10ec>
   136e8:	mov	r0, r6
   136ec:	bl	122d0 <strlen@plt>
   136f0:	str	r0, [r7, #20]
   136f4:	mov	r0, r6
   136f8:	bl	1291c <__assert_fail@plt+0x358>
   136fc:	cmp	r0, #0
   13700:	beq	13748 <__assert_fail@plt+0x1184>
   13704:	add	r1, sp, #120	; 0x78
   13708:	mov	r0, r9
   1370c:	bl	22924 <__assert_fail@plt+0x10360>
   13710:	subs	r6, r0, #0
   13714:	beq	135e4 <__assert_fail@plt+0x1020>
   13718:	ldrb	r3, [r6]
   1371c:	cmp	r3, #0
   13720:	beq	13668 <__assert_fail@plt+0x10a4>
   13724:	ldr	r3, [r8, #76]	; 0x4c
   13728:	cmp	r3, #0
   1372c:	bne	136e8 <__assert_fail@plt+0x1124>
   13730:	mov	r1, #1
   13734:	mov	r0, r6
   13738:	bl	18be0 <__assert_fail@plt+0x661c>
   1373c:	cmp	r0, #0
   13740:	beq	136e8 <__assert_fail@plt+0x1124>
   13744:	b	1374c <__assert_fail@plt+0x1188>
   13748:	mov	fp, r0
   1374c:	mov	r0, r9
   13750:	bl	22a08 <__assert_fail@plt+0x10444>
   13754:	cmp	fp, #0
   13758:	beq	1379c <__assert_fail@plt+0x11d8>
   1375c:	movw	r3, #48748	; 0xbe6c
   13760:	movt	r3, #5
   13764:	ldr	r3, [r3, #76]	; 0x4c
   13768:	cmp	r3, #0
   1376c:	beq	13790 <__assert_fail@plt+0x11cc>
   13770:	mov	r0, r4
   13774:	bl	11fc4 <ferror@plt>
   13778:	cmp	r0, #0
   1377c:	bne	137c4 <__assert_fail@plt+0x1200>
   13780:	mov	r0, r4
   13784:	bl	123cc <fclose@plt>
   13788:	cmp	r0, #0
   1378c:	bne	137c4 <__assert_fail@plt+0x1200>
   13790:	ldr	r0, [sp, #12]
   13794:	bl	15318 <__assert_fail@plt+0x2d54>
   13798:	bl	19754 <__assert_fail@plt+0x7190>
   1379c:	movw	r3, #48704	; 0xbe40
   137a0:	movt	r3, #5
   137a4:	ldr	r0, [r3, #28]
   137a8:	add	sp, sp, #228	; 0xe4
   137ac:	ldrd	r4, [sp]
   137b0:	ldrd	r6, [sp, #8]
   137b4:	ldrd	r8, [sp, #16]
   137b8:	ldrd	sl, [sp, #24]
   137bc:	add	sp, sp, #32
   137c0:	pop	{pc}		; (ldr pc, [sp], #4)
   137c4:	mov	r2, #5
   137c8:	movw	r1, #19412	; 0x4bd4
   137cc:	movt	r1, #4
   137d0:	mov	r0, #0
   137d4:	bl	12084 <dcgettext@plt>
   137d8:	mov	r3, r5
   137dc:	mov	r2, r0
   137e0:	mov	r1, #0
   137e4:	mov	r0, #1
   137e8:	bl	121bc <error@plt>
   137ec:	andeq	fp, r5, r8, lsl #29
   137f0:	andeq	r4, r4, r0, asr r6
   137f4:	movw	r3, #45704	; 0xb288
   137f8:	movt	r3, #5
   137fc:	ldr	r3, [r3]
   13800:	str	r3, [r0]
   13804:	mov	r0, #1
   13808:	bx	lr
   1380c:	andeq	r0, r0, r0
   13810:	movw	r3, #48748	; 0xbe6c
   13814:	movt	r3, #5
   13818:	ldrb	r3, [r3]
   1381c:	cmp	r3, #0
   13820:	beq	13850 <__assert_fail@plt+0x128c>
   13824:	movw	r3, #48704	; 0xbe40
   13828:	movt	r3, #5
   1382c:	ldrb	r3, [r3, #4]
   13830:	cmp	r3, #0
   13834:	beq	13858 <__assert_fail@plt+0x1294>
   13838:	cmp	r1, #0
   1383c:	beq	13850 <__assert_fail@plt+0x128c>
   13840:	ldr	r3, [r1, #16]
   13844:	and	r3, r3, #61440	; 0xf000
   13848:	cmp	r3, #16384	; 0x4000
   1384c:	beq	13880 <__assert_fail@plt+0x12bc>
   13850:	mov	r0, #1
   13854:	bx	lr
   13858:	str	r4, [sp, #-8]!
   1385c:	str	lr, [sp, #4]
   13860:	movw	r3, #19432	; 0x4be8
   13864:	movt	r3, #4
   13868:	movw	r2, #853	; 0x355
   1386c:	movw	r1, #19544	; 0x4c58
   13870:	movt	r1, #4
   13874:	movw	r0, #19552	; 0x4c60
   13878:	movt	r0, #4
   1387c:	bl	125c4 <__assert_fail@plt>
   13880:	movw	r3, #48704	; 0xbe40
   13884:	movt	r3, #5
   13888:	mov	r2, #1
   1388c:	strb	r2, [r3, #24]
   13890:	b	13850 <__assert_fail@plt+0x128c>
   13894:	strd	r4, [sp, #-12]!
   13898:	str	lr, [sp, #8]
   1389c:	sub	sp, sp, #20
   138a0:	add	ip, sp, #16
   138a4:	stmdb	ip, {r0, r1}
   138a8:	mov	r1, sp
   138ac:	stm	r1, {r2, r3}
   138b0:	ldr	r0, [sp, #8]
   138b4:	ldr	r4, [sp, #12]
   138b8:	mov	r1, r2
   138bc:	mov	r5, r3
   138c0:	cmp	r0, r2
   138c4:	bne	138d4 <__assert_fail@plt+0x1310>
   138c8:	cmp	r4, r3
   138cc:	moveq	r0, #0
   138d0:	beq	138fc <__assert_fail@plt+0x1338>
   138d4:	bl	1239c <difftime@plt>
   138d8:	sub	r4, r4, r5
   138dc:	vmov	s15, r4
   138e0:	vcvt.f64.s32	d7, s15
   138e4:	vldr	d6, [pc, #36]	; 13910 <__assert_fail@plt+0x134c>
   138e8:	vmla.f64	d0, d7, d6
   138ec:	vcmpe.f64	d0, #0.0
   138f0:	vmrs	APSR_nzcv, fpscr
   138f4:	mvnmi	r0, #0
   138f8:	movpl	r0, #1
   138fc:	add	sp, sp, #20
   13900:	ldrd	r4, [sp]
   13904:	add	sp, sp, #8
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	nop	{0}
   13910:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13914:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13918:	strd	r4, [sp, #-16]!
   1391c:	str	r6, [sp, #8]
   13920:	str	lr, [sp, #12]
   13924:	mov	r5, r0
   13928:	mov	r6, r1
   1392c:	mov	r4, r2
   13930:	ldr	r2, [r2, #156]	; 0x9c
   13934:	cmp	r2, #0
   13938:	beq	13948 <__assert_fail@plt+0x1384>
   1393c:	bl	195f8 <__assert_fail@plt+0x7034>
   13940:	cmp	r0, #0
   13944:	beq	13958 <__assert_fail@plt+0x1394>
   13948:	ldr	r2, [r4, #160]	; 0xa0
   1394c:	mov	r1, r6
   13950:	mov	r0, r5
   13954:	bl	195f8 <__assert_fail@plt+0x7034>
   13958:	ldrd	r4, [sp]
   1395c:	ldr	r6, [sp, #8]
   13960:	add	sp, sp, #12
   13964:	pop	{pc}		; (ldr pc, [sp], #4)
   13968:	strd	r4, [sp, #-16]!
   1396c:	str	r6, [sp, #8]
   13970:	str	lr, [sp, #12]
   13974:	mov	r5, r0
   13978:	mov	r6, r1
   1397c:	mov	r4, r2
   13980:	ldr	r2, [r2, #156]	; 0x9c
   13984:	cmp	r2, #0
   13988:	beq	13998 <__assert_fail@plt+0x13d4>
   1398c:	bl	195f8 <__assert_fail@plt+0x7034>
   13990:	cmp	r0, #0
   13994:	bne	139a8 <__assert_fail@plt+0x13e4>
   13998:	ldr	r2, [r4, #160]	; 0xa0
   1399c:	mov	r1, r6
   139a0:	mov	r0, r5
   139a4:	bl	195f8 <__assert_fail@plt+0x7034>
   139a8:	ldrd	r4, [sp]
   139ac:	ldr	r6, [sp, #8]
   139b0:	add	sp, sp, #12
   139b4:	pop	{pc}		; (ldr pc, [sp], #4)
   139b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   139bc:	strd	r6, [sp, #8]
   139c0:	str	r8, [sp, #16]
   139c4:	str	lr, [sp, #20]
   139c8:	ldr	ip, [r1, #16]
   139cc:	and	ip, ip, #61440	; 0xf000
   139d0:	cmp	ip, #40960	; 0xa000
   139d4:	movne	r4, #0
   139d8:	beq	139f4 <__assert_fail@plt+0x1430>
   139dc:	mov	r0, r4
   139e0:	ldrd	r4, [sp]
   139e4:	ldrd	r6, [sp, #8]
   139e8:	ldr	r8, [sp, #16]
   139ec:	add	sp, sp, #20
   139f0:	pop	{pc}		; (ldr pc, [sp], #4)
   139f4:	mov	r5, r3
   139f8:	mov	r4, r2
   139fc:	mov	r6, r0
   13a00:	movw	r3, #48704	; 0xbe40
   13a04:	movt	r3, #5
   13a08:	ldr	r1, [r3, #12]
   13a0c:	ldr	r0, [r3, #16]
   13a10:	bl	22880 <__assert_fail@plt+0x102bc>
   13a14:	subs	r7, r0, #0
   13a18:	beq	13a48 <__assert_fail@plt+0x1484>
   13a1c:	cmp	r5, #0
   13a20:	movne	r2, #16
   13a24:	moveq	r2, #0
   13a28:	mov	r1, r7
   13a2c:	ldr	r0, [r4, #40]	; 0x28
   13a30:	bl	121e0 <fnmatch@plt>
   13a34:	clz	r4, r0
   13a38:	lsr	r4, r4, #5
   13a3c:	mov	r0, r7
   13a40:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   13a44:	b	139dc <__assert_fail@plt+0x1418>
   13a48:	bl	12318 <__errno_location@plt>
   13a4c:	mov	r1, r6
   13a50:	ldr	r0, [r0]
   13a54:	bl	193a0 <__assert_fail@plt+0x6ddc>
   13a58:	movw	r3, #48704	; 0xbe40
   13a5c:	movt	r3, #5
   13a60:	mov	r2, #1
   13a64:	str	r2, [r3, #28]
   13a68:	mov	r4, #0
   13a6c:	b	13a3c <__assert_fail@plt+0x1478>
   13a70:	strd	r4, [sp, #-16]!
   13a74:	str	r6, [sp, #8]
   13a78:	str	lr, [sp, #12]
   13a7c:	mov	r5, r0
   13a80:	mov	r6, r1
   13a84:	movw	r3, #46420	; 0xb554
   13a88:	movt	r3, #5
   13a8c:	ldr	r0, [r3]
   13a90:	bl	2fb38 <__assert_fail@plt+0x1d574>
   13a94:	movw	r3, #46408	; 0xb548
   13a98:	movt	r3, #5
   13a9c:	ldr	r4, [r3]
   13aa0:	mov	r2, #5
   13aa4:	movw	r1, #19568	; 0x4c70
   13aa8:	movt	r1, #4
   13aac:	mov	r0, #0
   13ab0:	bl	12084 <dcgettext@plt>
   13ab4:	mov	r3, r6
   13ab8:	mov	r2, r5
   13abc:	mov	r1, r0
   13ac0:	mov	r0, r4
   13ac4:	bl	1230c <fprintf@plt>
   13ac8:	cmp	r0, #0
   13acc:	blt	13af4 <__assert_fail@plt+0x1530>
   13ad0:	movw	r3, #46408	; 0xb548
   13ad4:	movt	r3, #5
   13ad8:	ldr	r0, [r3]
   13adc:	bl	2fb38 <__assert_fail@plt+0x1d574>
   13ae0:	bl	2f488 <__assert_fail@plt+0x1cec4>
   13ae4:	ldrd	r4, [sp]
   13ae8:	ldr	r6, [sp, #8]
   13aec:	add	sp, sp, #12
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	bl	12318 <__errno_location@plt>
   13af8:	ldr	r4, [r0]
   13afc:	mov	r2, #5
   13b00:	movw	r1, #19588	; 0x4c84
   13b04:	movt	r1, #4
   13b08:	mov	r0, #0
   13b0c:	bl	12084 <dcgettext@plt>
   13b10:	mov	r2, r0
   13b14:	mov	r1, r4
   13b18:	mov	r0, #1
   13b1c:	bl	121bc <error@plt>
   13b20:	str	r4, [sp, #-8]!
   13b24:	str	lr, [sp, #4]
   13b28:	bl	19754 <__assert_fail@plt+0x7190>
   13b2c:	movw	r3, #48704	; 0xbe40
   13b30:	movt	r3, #5
   13b34:	ldr	r0, [r3, #28]
   13b38:	bl	122a0 <exit@plt>
   13b3c:	strd	r4, [sp, #-12]!
   13b40:	str	lr, [sp, #8]
   13b44:	sub	sp, sp, #12
   13b48:	add	ip, sp, #8
   13b4c:	stmdb	ip, {r0, r1}
   13b50:	mov	r4, r2
   13b54:	mov	r5, r3
   13b58:	ldr	r3, [r2, #44]	; 0x2c
   13b5c:	cmp	r3, #1
   13b60:	beq	13bf8 <__assert_fail@plt+0x1634>
   13b64:	cmp	r3, #0
   13b68:	beq	13bc8 <__assert_fail@plt+0x1604>
   13b6c:	cmp	r3, #2
   13b70:	bne	13c14 <__assert_fail@plt+0x1650>
   13b74:	ldr	r1, [r2, #48]	; 0x30
   13b78:	ldr	r0, [sp]
   13b7c:	bl	1239c <difftime@plt>
   13b80:	ldr	r2, [r4, #52]	; 0x34
   13b84:	ldr	r3, [sp, #4]
   13b88:	sub	r3, r3, r2
   13b8c:	vmov	s15, r3
   13b90:	vcvt.f64.s32	d7, s15
   13b94:	vldr	d6, [pc, #148]	; 13c30 <__assert_fail@plt+0x166c>
   13b98:	vmla.f64	d0, d7, d6
   13b9c:	vcmpe.f64	d0, #0.0
   13ba0:	vmrs	APSR_nzcv, fpscr
   13ba4:	movle	r0, #0
   13ba8:	ble	13be8 <__assert_fail@plt+0x1624>
   13bac:	vmov	s15, r5
   13bb0:	vcvt.f64.s32	d7, s15
   13bb4:	vcmpe.f64	d7, d0
   13bb8:	vmrs	APSR_nzcv, fpscr
   13bbc:	movge	r0, #1
   13bc0:	movlt	r0, #0
   13bc4:	b	13be8 <__assert_fail@plt+0x1624>
   13bc8:	add	r4, r2, #48	; 0x30
   13bcc:	ldm	r4, {r2, r3}
   13bd0:	add	r1, sp, #8
   13bd4:	ldmdb	r1, {r0, r1}
   13bd8:	bl	13894 <__assert_fail@plt+0x12d0>
   13bdc:	cmp	r0, #0
   13be0:	movle	r0, #0
   13be4:	movgt	r0, #1
   13be8:	add	sp, sp, #12
   13bec:	ldrd	r4, [sp]
   13bf0:	add	sp, sp, #8
   13bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf8:	add	r4, r2, #48	; 0x30
   13bfc:	ldm	r4, {r2, r3}
   13c00:	add	r1, sp, #8
   13c04:	ldmdb	r1, {r0, r1}
   13c08:	bl	13894 <__assert_fail@plt+0x12d0>
   13c0c:	lsr	r0, r0, #31
   13c10:	b	13be8 <__assert_fail@plt+0x1624>
   13c14:	ldr	r3, [pc, #28]	; 13c38 <__assert_fail@plt+0x1674>
   13c18:	mov	r2, #138	; 0x8a
   13c1c:	movw	r1, #19544	; 0x4c58
   13c20:	movt	r1, #4
   13c24:	movw	r0, #36300	; 0x8dcc
   13c28:	movt	r0, #4
   13c2c:	bl	125c4 <__assert_fail@plt>
   13c30:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13c34:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13c38:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   13c3c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c40:	sub	sp, sp, #12
   13c44:	ldrd	r0, [r1, #72]	; 0x48
   13c48:	strd	r0, [sp]
   13c4c:	mov	r3, #60	; 0x3c
   13c50:	add	r1, sp, #8
   13c54:	ldmdb	r1, {r0, r1}
   13c58:	bl	13b3c <__assert_fail@plt+0x1578>
   13c5c:	add	sp, sp, #12
   13c60:	pop	{pc}		; (ldr pc, [sp], #4)
   13c64:	push	{lr}		; (str lr, [sp, #-4]!)
   13c68:	sub	sp, sp, #12
   13c6c:	ldr	r3, [r2, #44]	; 0x2c
   13c70:	cmp	r3, #0
   13c74:	bne	13ca8 <__assert_fail@plt+0x16e4>
   13c78:	ldrd	r0, [r1, #72]	; 0x48
   13c7c:	strd	r0, [sp]
   13c80:	add	r2, r2, #48	; 0x30
   13c84:	ldm	r2, {r2, r3}
   13c88:	add	r1, sp, #8
   13c8c:	ldmdb	r1, {r0, r1}
   13c90:	bl	13894 <__assert_fail@plt+0x12d0>
   13c94:	cmp	r0, #0
   13c98:	movle	r0, #0
   13c9c:	movgt	r0, #1
   13ca0:	add	sp, sp, #12
   13ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca8:	ldr	r3, [pc, #20]	; 13cc4 <__assert_fail@plt+0x1700>
   13cac:	mov	r2, #166	; 0xa6
   13cb0:	movw	r1, #19544	; 0x4c58
   13cb4:	movt	r1, #4
   13cb8:	movw	r0, #19620	; 0x4ca4
   13cbc:	movt	r0, #4
   13cc0:	bl	125c4 <__assert_fail@plt>
   13cc4:	andeq	r4, r4, r4, lsl #24
   13cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   13ccc:	sub	sp, sp, #12
   13cd0:	ldrd	r0, [r1, #72]	; 0x48
   13cd4:	strd	r0, [sp]
   13cd8:	movw	r3, #20864	; 0x5180
   13cdc:	movt	r3, #1
   13ce0:	add	r1, sp, #8
   13ce4:	ldmdb	r1, {r0, r1}
   13ce8:	bl	13b3c <__assert_fail@plt+0x1578>
   13cec:	add	sp, sp, #12
   13cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf4:	mov	r0, #1
   13cf8:	bx	lr
   13cfc:	push	{lr}		; (str lr, [sp, #-4]!)
   13d00:	sub	sp, sp, #12
   13d04:	ldrd	r0, [r1, #88]	; 0x58
   13d08:	strd	r0, [sp]
   13d0c:	mov	r3, #60	; 0x3c
   13d10:	add	r1, sp, #8
   13d14:	ldmdb	r1, {r0, r1}
   13d18:	bl	13b3c <__assert_fail@plt+0x1578>
   13d1c:	add	sp, sp, #12
   13d20:	pop	{pc}		; (ldr pc, [sp], #4)
   13d24:	push	{lr}		; (str lr, [sp, #-4]!)
   13d28:	sub	sp, sp, #12
   13d2c:	ldr	r3, [r2, #44]	; 0x2c
   13d30:	cmp	r3, #0
   13d34:	bne	13d68 <__assert_fail@plt+0x17a4>
   13d38:	ldrd	r0, [r1, #88]	; 0x58
   13d3c:	strd	r0, [sp]
   13d40:	add	r2, r2, #48	; 0x30
   13d44:	ldm	r2, {r2, r3}
   13d48:	add	r1, sp, #8
   13d4c:	ldmdb	r1, {r0, r1}
   13d50:	bl	13894 <__assert_fail@plt+0x12d0>
   13d54:	cmp	r0, #0
   13d58:	movle	r0, #0
   13d5c:	movgt	r0, #1
   13d60:	add	sp, sp, #12
   13d64:	pop	{pc}		; (ldr pc, [sp], #4)
   13d68:	ldr	r3, [pc, #20]	; 13d84 <__assert_fail@plt+0x17c0>
   13d6c:	mov	r2, #199	; 0xc7
   13d70:	movw	r1, #19544	; 0x4c58
   13d74:	movt	r1, #4
   13d78:	movw	r0, #19620	; 0x4ca4
   13d7c:	movt	r0, #4
   13d80:	bl	125c4 <__assert_fail@plt>
   13d84:	andeq	r4, r4, r0, lsl ip
   13d88:	strd	r4, [sp, #-16]!
   13d8c:	str	r6, [sp, #8]
   13d90:	str	lr, [sp, #12]
   13d94:	mov	r5, r0
   13d98:	mov	r6, r1
   13d9c:	mov	r4, r2
   13da0:	ldr	r2, [r2, #156]	; 0x9c
   13da4:	cmp	r2, #0
   13da8:	beq	13db0 <__assert_fail@plt+0x17ec>
   13dac:	bl	195f8 <__assert_fail@plt+0x7034>
   13db0:	ldr	r2, [r4, #160]	; 0xa0
   13db4:	mov	r1, r6
   13db8:	mov	r0, r5
   13dbc:	bl	195f8 <__assert_fail@plt+0x7034>
   13dc0:	ldrd	r4, [sp]
   13dc4:	ldr	r6, [sp, #8]
   13dc8:	add	sp, sp, #12
   13dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   13dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   13dd4:	sub	sp, sp, #12
   13dd8:	ldrd	r0, [r1, #88]	; 0x58
   13ddc:	strd	r0, [sp]
   13de0:	movw	r3, #20864	; 0x5180
   13de4:	movt	r3, #1
   13de8:	add	r1, sp, #8
   13dec:	ldmdb	r1, {r0, r1}
   13df0:	bl	13b3c <__assert_fail@plt+0x1578>
   13df4:	add	sp, sp, #12
   13df8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dfc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e00:	strd	r6, [sp, #8]
   13e04:	str	r8, [sp, #16]
   13e08:	str	lr, [sp, #20]
   13e0c:	mov	r7, r0
   13e10:	mov	r4, r1
   13e14:	movw	r3, #48704	; 0xbe40
   13e18:	movt	r3, #5
   13e1c:	ldr	r5, [r3, #12]
   13e20:	movw	r1, #29972	; 0x7514
   13e24:	movt	r1, #4
   13e28:	mov	r0, r5
   13e2c:	bl	11f1c <strcmp@plt>
   13e30:	cmp	r0, #0
   13e34:	moveq	r4, #1
   13e38:	beq	13f04 <__assert_fail@plt+0x1940>
   13e3c:	movw	r3, #48704	; 0xbe40
   13e40:	movt	r3, #5
   13e44:	ldrb	r3, [r3, #4]
   13e48:	cmp	r3, #0
   13e4c:	moveq	r6, #0
   13e50:	beq	13e68 <__assert_fail@plt+0x18a4>
   13e54:	ldr	r3, [r4, #16]
   13e58:	and	r3, r3, #61440	; 0xf000
   13e5c:	cmp	r3, #16384	; 0x4000
   13e60:	movne	r6, #0
   13e64:	moveq	r6, #512	; 0x200
   13e68:	movw	r3, #48704	; 0xbe40
   13e6c:	movt	r3, #5
   13e70:	mov	r2, r6
   13e74:	mov	r1, r5
   13e78:	ldr	r0, [r3, #16]
   13e7c:	bl	11f70 <unlinkat@plt>
   13e80:	cmp	r0, #0
   13e84:	moveq	r4, #1
   13e88:	beq	13f04 <__assert_fail@plt+0x1940>
   13e8c:	bl	12318 <__errno_location@plt>
   13e90:	mov	r5, r0
   13e94:	ldr	r4, [r0]
   13e98:	cmp	r4, #2
   13e9c:	beq	13f1c <__assert_fail@plt+0x1958>
   13ea0:	cmp	r4, #21
   13ea4:	cmpeq	r6, #0
   13ea8:	moveq	r4, #1
   13eac:	movne	r4, #0
   13eb0:	beq	13f3c <__assert_fail@plt+0x1978>
   13eb4:	ldr	r4, [r5]
   13eb8:	mov	r2, #5
   13ebc:	movw	r1, #19660	; 0x4ccc
   13ec0:	movt	r1, #4
   13ec4:	mov	r0, #0
   13ec8:	bl	12084 <dcgettext@plt>
   13ecc:	mov	r5, r0
   13ed0:	mov	r1, r7
   13ed4:	mov	r0, #0
   13ed8:	bl	192b8 <__assert_fail@plt+0x6cf4>
   13edc:	mov	r3, r0
   13ee0:	mov	r2, r5
   13ee4:	mov	r1, r4
   13ee8:	mov	r0, #0
   13eec:	bl	121bc <error@plt>
   13ef0:	movw	r3, #48704	; 0xbe40
   13ef4:	movt	r3, #5
   13ef8:	mov	r2, #1
   13efc:	str	r2, [r3, #28]
   13f00:	mov	r4, #0
   13f04:	mov	r0, r4
   13f08:	ldrd	r4, [sp]
   13f0c:	ldrd	r6, [sp, #8]
   13f10:	ldr	r8, [sp, #16]
   13f14:	add	sp, sp, #20
   13f18:	pop	{pc}		; (ldr pc, [sp], #4)
   13f1c:	movw	r3, #48748	; 0xbe6c
   13f20:	movt	r3, #5
   13f24:	ldrb	r4, [r3, #14]
   13f28:	cmp	r4, #0
   13f2c:	movne	r3, #0
   13f30:	strne	r3, [r0]
   13f34:	beq	13eb4 <__assert_fail@plt+0x18f0>
   13f38:	b	13f04 <__assert_fail@plt+0x1940>
   13f3c:	movw	r3, #48704	; 0xbe40
   13f40:	movt	r3, #5
   13f44:	mov	r2, #512	; 0x200
   13f48:	ldr	r1, [r3, #12]
   13f4c:	ldr	r0, [r3, #16]
   13f50:	bl	11f70 <unlinkat@plt>
   13f54:	cmp	r0, #0
   13f58:	beq	13f04 <__assert_fail@plt+0x1940>
   13f5c:	b	13eb4 <__assert_fail@plt+0x18f0>
   13f60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13f64:	strd	r6, [sp, #8]
   13f68:	str	r8, [sp, #16]
   13f6c:	str	lr, [sp, #20]
   13f70:	ldr	r3, [r1, #16]
   13f74:	and	r3, r3, #61440	; 0xf000
   13f78:	cmp	r3, #16384	; 0x4000
   13f7c:	beq	13fa4 <__assert_fail@plt+0x19e0>
   13f80:	cmp	r3, #32768	; 0x8000
   13f84:	movne	r4, #0
   13f88:	beq	1418c <__assert_fail@plt+0x1bc8>
   13f8c:	mov	r0, r4
   13f90:	ldrd	r4, [sp]
   13f94:	ldrd	r6, [sp, #8]
   13f98:	ldr	r8, [sp, #16]
   13f9c:	add	sp, sp, #20
   13fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fa4:	mov	r6, r0
   13fa8:	bl	12318 <__errno_location@plt>
   13fac:	mov	r7, r0
   13fb0:	mov	r3, #0
   13fb4:	str	r3, [r0]
   13fb8:	movw	r3, #48704	; 0xbe40
   13fbc:	movt	r3, #5
   13fc0:	mov	r2, #18688	; 0x4900
   13fc4:	movt	r2, #10
   13fc8:	ldr	r1, [r3, #12]
   13fcc:	ldr	r0, [r3, #16]
   13fd0:	bl	27520 <__assert_fail@plt+0x14f5c>
   13fd4:	subs	r4, r0, #0
   13fd8:	blt	14018 <__assert_fail@plt+0x1a54>
   13fdc:	mov	r0, r4
   13fe0:	bl	12498 <fdopendir@plt>
   13fe4:	subs	r5, r0, #0
   13fe8:	beq	14058 <__assert_fail@plt+0x1a94>
   13fec:	mov	r3, #0
   13ff0:	str	r3, [r7]
   13ff4:	mov	r0, r5
   13ff8:	bl	1248c <readdir64@plt>
   13ffc:	cmp	r0, #0
   14000:	beq	14138 <__assert_fail@plt+0x1b74>
   14004:	ldrb	r3, [r0, #19]
   14008:	cmp	r3, #46	; 0x2e
   1400c:	beq	140b8 <__assert_fail@plt+0x1af4>
   14010:	mov	r4, #0
   14014:	b	140dc <__assert_fail@plt+0x1b18>
   14018:	ldr	r4, [r7]
   1401c:	mov	r1, r6
   14020:	mov	r0, #0
   14024:	bl	192b8 <__assert_fail@plt+0x6cf4>
   14028:	mov	r3, r0
   1402c:	movw	r2, #35960	; 0x8c78
   14030:	movt	r2, #4
   14034:	mov	r1, r4
   14038:	mov	r0, #0
   1403c:	bl	121bc <error@plt>
   14040:	movw	r3, #48704	; 0xbe40
   14044:	movt	r3, #5
   14048:	mov	r2, #1
   1404c:	str	r2, [r3, #28]
   14050:	mov	r4, #0
   14054:	b	13f8c <__assert_fail@plt+0x19c8>
   14058:	ldr	r5, [r7]
   1405c:	mov	r1, r6
   14060:	bl	192b8 <__assert_fail@plt+0x6cf4>
   14064:	mov	r3, r0
   14068:	movw	r2, #35960	; 0x8c78
   1406c:	movt	r2, #4
   14070:	mov	r1, r5
   14074:	mov	r0, #0
   14078:	bl	121bc <error@plt>
   1407c:	movw	r3, #48704	; 0xbe40
   14080:	movt	r3, #5
   14084:	mov	r2, #1
   14088:	str	r2, [r3, #28]
   1408c:	mov	r0, r4
   14090:	bl	1257c <close@plt>
   14094:	mov	r4, #0
   14098:	b	13f8c <__assert_fail@plt+0x19c8>
   1409c:	mov	r0, r5
   140a0:	bl	1248c <readdir64@plt>
   140a4:	cmp	r0, #0
   140a8:	beq	140d8 <__assert_fail@plt+0x1b14>
   140ac:	ldrb	r3, [r0, #19]
   140b0:	cmp	r3, #46	; 0x2e
   140b4:	bne	14140 <__assert_fail@plt+0x1b7c>
   140b8:	ldrb	r3, [r0, #20]
   140bc:	cmp	r3, #0
   140c0:	beq	1409c <__assert_fail@plt+0x1ad8>
   140c4:	ldrh	r3, [r0, #20]
   140c8:	cmp	r3, #46	; 0x2e
   140cc:	beq	1409c <__assert_fail@plt+0x1ad8>
   140d0:	mov	r4, #0
   140d4:	b	140dc <__assert_fail@plt+0x1b18>
   140d8:	mov	r4, #1
   140dc:	ldr	r8, [r7]
   140e0:	cmp	r8, #0
   140e4:	bne	14148 <__assert_fail@plt+0x1b84>
   140e8:	mov	r0, r5
   140ec:	bl	12594 <closedir@plt>
   140f0:	cmp	r0, #0
   140f4:	beq	13f8c <__assert_fail@plt+0x19c8>
   140f8:	ldr	r4, [r7]
   140fc:	mov	r1, r6
   14100:	mov	r0, #0
   14104:	bl	192b8 <__assert_fail@plt+0x6cf4>
   14108:	mov	r3, r0
   1410c:	movw	r2, #35960	; 0x8c78
   14110:	movt	r2, #4
   14114:	mov	r1, r4
   14118:	mov	r0, #0
   1411c:	bl	121bc <error@plt>
   14120:	movw	r3, #48704	; 0xbe40
   14124:	movt	r3, #5
   14128:	mov	r2, #1
   1412c:	str	r2, [r3, #28]
   14130:	mov	r4, #0
   14134:	b	13f8c <__assert_fail@plt+0x19c8>
   14138:	mov	r4, #1
   1413c:	b	140dc <__assert_fail@plt+0x1b18>
   14140:	mov	r4, #0
   14144:	b	140dc <__assert_fail@plt+0x1b18>
   14148:	mov	r1, r6
   1414c:	mov	r0, #0
   14150:	bl	192b8 <__assert_fail@plt+0x6cf4>
   14154:	mov	r3, r0
   14158:	movw	r2, #35960	; 0x8c78
   1415c:	movt	r2, #4
   14160:	mov	r1, r8
   14164:	mov	r0, #0
   14168:	bl	121bc <error@plt>
   1416c:	movw	r3, #48704	; 0xbe40
   14170:	movt	r3, #5
   14174:	mov	r2, #1
   14178:	str	r2, [r3, #28]
   1417c:	mov	r0, r5
   14180:	bl	12594 <closedir@plt>
   14184:	mov	r4, #0
   14188:	b	13f8c <__assert_fail@plt+0x19c8>
   1418c:	ldr	r2, [r1, #48]	; 0x30
   14190:	ldr	r3, [r1, #52]	; 0x34
   14194:	orrs	r3, r2, r3
   14198:	moveq	r4, #1
   1419c:	movne	r4, #0
   141a0:	b	13f8c <__assert_fail@plt+0x19c8>
   141a4:	str	r4, [sp, #-8]!
   141a8:	str	lr, [sp, #4]
   141ac:	bl	15600 <__assert_fail@plt+0x303c>
   141b0:	ldr	r4, [sp]
   141b4:	add	sp, sp, #4
   141b8:	pop	{pc}		; (ldr pc, [sp], #4)
   141bc:	str	r4, [sp, #-8]!
   141c0:	str	lr, [sp, #4]
   141c4:	movw	r3, #48704	; 0xbe40
   141c8:	movt	r3, #5
   141cc:	ldr	r0, [r3, #12]
   141d0:	bl	15600 <__assert_fail@plt+0x303c>
   141d4:	ldr	r4, [sp]
   141d8:	add	sp, sp, #4
   141dc:	pop	{pc}		; (ldr pc, [sp], #4)
   141e0:	mov	r0, #0
   141e4:	bx	lr
   141e8:	push	{lr}		; (str lr, [sp, #-4]!)
   141ec:	sub	sp, sp, #20
   141f0:	movw	ip, #48704	; 0xbe40
   141f4:	movt	ip, #5
   141f8:	ldr	r3, [r2, #44]	; 0x2c
   141fc:	str	r3, [sp, #12]
   14200:	ldrb	r3, [r2, #32]
   14204:	str	r3, [sp, #8]
   14208:	movw	r3, #48748	; 0xbe6c
   1420c:	movt	r3, #5
   14210:	ldr	r2, [r3, #40]	; 0x28
   14214:	str	r2, [sp, #4]
   14218:	ldr	r3, [r3, #20]
   1421c:	str	r3, [sp]
   14220:	mov	r3, r1
   14224:	ldr	r2, [ip, #12]
   14228:	ldr	r1, [ip, #16]
   1422c:	bl	218f0 <__assert_fail@plt+0xf32c>
   14230:	mov	r0, #1
   14234:	add	sp, sp, #20
   14238:	pop	{pc}		; (ldr pc, [sp], #4)
   1423c:	push	{lr}		; (str lr, [sp, #-4]!)
   14240:	sub	sp, sp, #12
   14244:	mov	ip, r2
   14248:	str	r0, [sp]
   1424c:	movw	r3, #40500	; 0x9e34
   14250:	movt	r3, #4
   14254:	ldrb	r2, [r2, #52]	; 0x34
   14258:	ldr	r1, [ip, #56]	; 0x38
   1425c:	ldr	r0, [ip, #44]	; 0x2c
   14260:	bl	22104 <__assert_fail@plt+0xfb40>
   14264:	mov	r0, #1
   14268:	add	sp, sp, #12
   1426c:	pop	{pc}		; (ldr pc, [sp], #4)
   14270:	str	r4, [sp, #-8]!
   14274:	str	lr, [sp, #4]
   14278:	ldr	r4, [r2, #44]	; 0x2c
   1427c:	mov	r1, r4
   14280:	bl	12558 <fputs@plt>
   14284:	mov	r1, r4
   14288:	mov	r0, #0
   1428c:	bl	124b0 <putc@plt>
   14290:	mov	r0, #1
   14294:	ldr	r4, [sp]
   14298:	add	sp, sp, #4
   1429c:	pop	{pc}		; (ldr pc, [sp], #4)
   142a0:	str	r4, [sp, #-8]!
   142a4:	str	lr, [sp, #4]
   142a8:	mov	r3, r1
   142ac:	mov	r4, r2
   142b0:	mov	r1, r0
   142b4:	mov	r0, r3
   142b8:	bl	1bc38 <__assert_fail@plt+0x9674>
   142bc:	ldr	r1, [r4, #40]	; 0x28
   142c0:	bl	11f1c <strcmp@plt>
   142c4:	clz	r0, r0
   142c8:	lsr	r0, r0, #5
   142cc:	ldr	r4, [sp]
   142d0:	add	sp, sp, #4
   142d4:	pop	{pc}		; (ldr pc, [sp], #4)
   142d8:	ldr	r3, [r2, #40]	; 0x28
   142dc:	cmp	r3, #1
   142e0:	beq	1431c <__assert_fail@plt+0x1d58>
   142e4:	cmp	r3, #0
   142e8:	beq	142fc <__assert_fail@plt+0x1d38>
   142ec:	cmp	r3, #2
   142f0:	beq	1433c <__assert_fail@plt+0x1d78>
   142f4:	mov	r0, #0
   142f8:	bx	lr
   142fc:	ldr	r0, [r1, #28]
   14300:	mov	r1, #0
   14304:	ldrd	r2, [r2, #48]	; 0x30
   14308:	cmp	r1, r3
   1430c:	cmpeq	r0, r2
   14310:	movhi	r0, #1
   14314:	movls	r0, #0
   14318:	bx	lr
   1431c:	ldr	r0, [r1, #28]
   14320:	mov	r1, #0
   14324:	ldrd	r2, [r2, #48]	; 0x30
   14328:	cmp	r1, r3
   1432c:	cmpeq	r0, r2
   14330:	movcc	r0, #1
   14334:	movcs	r0, #0
   14338:	bx	lr
   1433c:	ldr	r0, [r1, #28]
   14340:	mov	r1, #0
   14344:	ldrd	r2, [r2, #48]	; 0x30
   14348:	cmp	r3, r1
   1434c:	cmpeq	r2, r0
   14350:	moveq	r0, #1
   14354:	movne	r0, #0
   14358:	bx	lr
   1435c:	ldr	r0, [r2, #40]	; 0x28
   14360:	ldr	r3, [r1, #28]
   14364:	cmp	r0, r3
   14368:	movne	r0, #0
   1436c:	moveq	r0, #1
   14370:	bx	lr
   14374:	str	r4, [sp, #-8]!
   14378:	str	lr, [sp, #4]
   1437c:	mov	r3, #1
   14380:	bl	139b8 <__assert_fail@plt+0x13f4>
   14384:	ldr	r4, [sp]
   14388:	add	sp, sp, #4
   1438c:	pop	{pc}		; (ldr pc, [sp], #4)
   14390:	strd	r4, [sp, #-16]!
   14394:	str	r6, [sp, #8]
   14398:	str	lr, [sp, #12]
   1439c:	ldr	r5, [r2, #40]	; 0x28
   143a0:	bl	22e58 <__assert_fail@plt+0x10894>
   143a4:	mov	r4, r0
   143a8:	bl	22fc8 <__assert_fail@plt+0x10a04>
   143ac:	mov	r2, #16
   143b0:	mov	r1, r4
   143b4:	mov	r0, r5
   143b8:	bl	121e0 <fnmatch@plt>
   143bc:	mov	r5, r0
   143c0:	mov	r0, r4
   143c4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   143c8:	clz	r0, r5
   143cc:	lsr	r0, r0, #5
   143d0:	ldrd	r4, [sp]
   143d4:	ldr	r6, [sp, #8]
   143d8:	add	sp, sp, #12
   143dc:	pop	{pc}		; (ldr pc, [sp], #4)
   143e0:	ldr	r3, [r2, #40]	; 0x28
   143e4:	cmp	r3, #1
   143e8:	beq	14420 <__assert_fail@plt+0x1e5c>
   143ec:	cmp	r3, #0
   143f0:	beq	14404 <__assert_fail@plt+0x1e40>
   143f4:	cmp	r3, #2
   143f8:	beq	1443c <__assert_fail@plt+0x1e78>
   143fc:	mov	r0, #0
   14400:	bx	lr
   14404:	ldrd	r0, [r1, #96]	; 0x60
   14408:	ldrd	r2, [r2, #48]	; 0x30
   1440c:	cmp	r1, r3
   14410:	cmpeq	r0, r2
   14414:	movhi	r0, #1
   14418:	movls	r0, #0
   1441c:	bx	lr
   14420:	ldrd	r0, [r1, #96]	; 0x60
   14424:	ldrd	r2, [r2, #48]	; 0x30
   14428:	cmp	r1, r3
   1442c:	cmpeq	r0, r2
   14430:	movcc	r0, #1
   14434:	movcs	r0, #0
   14438:	bx	lr
   1443c:	ldrd	r0, [r1, #96]	; 0x60
   14440:	ldrd	r2, [r2, #48]	; 0x30
   14444:	cmp	r1, r3
   14448:	cmpeq	r0, r2
   1444c:	moveq	r0, #1
   14450:	movne	r0, #0
   14454:	bx	lr
   14458:	str	r4, [sp, #-8]!
   1445c:	str	lr, [sp, #4]
   14460:	ldr	r3, [r2, #40]	; 0x28
   14464:	mov	r2, #16
   14468:	mov	r1, r0
   1446c:	mov	r0, r3
   14470:	bl	121e0 <fnmatch@plt>
   14474:	clz	r0, r0
   14478:	lsr	r0, r0, #5
   1447c:	ldr	r4, [sp]
   14480:	add	sp, sp, #4
   14484:	pop	{pc}		; (ldr pc, [sp], #4)
   14488:	ldr	r3, [r2, #40]	; 0x28
   1448c:	cmp	r3, #1
   14490:	beq	144cc <__assert_fail@plt+0x1f08>
   14494:	cmp	r3, #0
   14498:	beq	144ac <__assert_fail@plt+0x1ee8>
   1449c:	cmp	r3, #2
   144a0:	beq	144ec <__assert_fail@plt+0x1f28>
   144a4:	mov	r0, #0
   144a8:	bx	lr
   144ac:	ldr	r0, [r1, #20]
   144b0:	mov	r1, #0
   144b4:	ldrd	r2, [r2, #48]	; 0x30
   144b8:	cmp	r1, r3
   144bc:	cmpeq	r0, r2
   144c0:	movhi	r0, #1
   144c4:	movls	r0, #0
   144c8:	bx	lr
   144cc:	ldr	r0, [r1, #20]
   144d0:	mov	r1, #0
   144d4:	ldrd	r2, [r2, #48]	; 0x30
   144d8:	cmp	r1, r3
   144dc:	cmpeq	r0, r2
   144e0:	movcc	r0, #1
   144e4:	movcs	r0, #0
   144e8:	bx	lr
   144ec:	ldr	r0, [r1, #20]
   144f0:	mov	r1, #0
   144f4:	ldrd	r2, [r2, #48]	; 0x30
   144f8:	cmp	r3, r1
   144fc:	cmpeq	r2, r0
   14500:	moveq	r0, #1
   14504:	movne	r0, #0
   14508:	bx	lr
   1450c:	str	r4, [sp, #-8]!
   14510:	str	lr, [sp, #4]
   14514:	mov	r3, #0
   14518:	bl	139b8 <__assert_fail@plt+0x13f4>
   1451c:	ldr	r4, [sp]
   14520:	add	sp, sp, #4
   14524:	pop	{pc}		; (ldr pc, [sp], #4)
   14528:	str	r4, [sp, #-8]!
   1452c:	str	lr, [sp, #4]
   14530:	bl	141e8 <__assert_fail@plt+0x1c24>
   14534:	ldr	r4, [sp]
   14538:	add	sp, sp, #4
   1453c:	pop	{pc}		; (ldr pc, [sp], #4)
   14540:	push	{lr}		; (str lr, [sp, #-4]!)
   14544:	sub	sp, sp, #12
   14548:	ldrd	r0, [r1, #80]	; 0x50
   1454c:	strd	r0, [sp]
   14550:	mov	r3, #60	; 0x3c
   14554:	add	r1, sp, #8
   14558:	ldmdb	r1, {r0, r1}
   1455c:	bl	13b3c <__assert_fail@plt+0x1578>
   14560:	add	sp, sp, #12
   14564:	pop	{pc}		; (ldr pc, [sp], #4)
   14568:	push	{lr}		; (str lr, [sp, #-4]!)
   1456c:	sub	sp, sp, #12
   14570:	ldrd	r0, [r1, #80]	; 0x50
   14574:	strd	r0, [sp]
   14578:	movw	r3, #20864	; 0x5180
   1457c:	movt	r3, #1
   14580:	add	r1, sp, #8
   14584:	ldmdb	r1, {r0, r1}
   14588:	bl	13b3c <__assert_fail@plt+0x1578>
   1458c:	add	sp, sp, #12
   14590:	pop	{pc}		; (ldr pc, [sp], #4)
   14594:	strd	r4, [sp, #-16]!
   14598:	str	r6, [sp, #8]
   1459c:	str	lr, [sp, #12]
   145a0:	ldr	r5, [r2, #40]	; 0x28
   145a4:	bl	22e58 <__assert_fail@plt+0x10894>
   145a8:	mov	r4, r0
   145ac:	bl	22fc8 <__assert_fail@plt+0x10a04>
   145b0:	mov	r2, #0
   145b4:	mov	r1, r4
   145b8:	mov	r0, r5
   145bc:	bl	121e0 <fnmatch@plt>
   145c0:	mov	r5, r0
   145c4:	mov	r0, r4
   145c8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   145cc:	clz	r0, r5
   145d0:	lsr	r0, r0, #5
   145d4:	ldrd	r4, [sp]
   145d8:	ldr	r6, [sp, #8]
   145dc:	add	sp, sp, #12
   145e0:	pop	{pc}		; (ldr pc, [sp], #4)
   145e4:	str	r4, [sp, #-8]!
   145e8:	str	lr, [sp, #4]
   145ec:	ldr	r2, [r2, #160]	; 0xa0
   145f0:	bl	195f8 <__assert_fail@plt+0x7034>
   145f4:	eor	r0, r0, #1
   145f8:	uxtb	r0, r0
   145fc:	ldr	r4, [sp]
   14600:	add	sp, sp, #4
   14604:	pop	{pc}		; (ldr pc, [sp], #4)
   14608:	push	{lr}		; (str lr, [sp, #-4]!)
   1460c:	sub	sp, sp, #12
   14610:	ldr	r3, [r2, #44]	; 0x2c
   14614:	cmp	r3, #0
   14618:	bne	1464c <__assert_fail@plt+0x2088>
   1461c:	ldrd	r0, [r1, #80]	; 0x50
   14620:	strd	r0, [sp]
   14624:	add	r2, r2, #48	; 0x30
   14628:	ldm	r2, {r2, r3}
   1462c:	add	r1, sp, #8
   14630:	ldmdb	r1, {r0, r1}
   14634:	bl	13894 <__assert_fail@plt+0x12d0>
   14638:	cmp	r0, #0
   1463c:	movle	r0, #0
   14640:	movgt	r0, #1
   14644:	add	sp, sp, #12
   14648:	pop	{pc}		; (ldr pc, [sp], #4)
   1464c:	ldr	r3, [pc, #20]	; 14668 <__assert_fail@plt+0x20a4>
   14650:	movw	r2, #621	; 0x26d
   14654:	movw	r1, #19544	; 0x4c58
   14658:	movt	r1, #4
   1465c:	movw	r0, #19620	; 0x4ca4
   14660:	movt	r0, #4
   14664:	bl	125c4 <__assert_fail@plt>
   14668:	andeq	r4, r4, ip, lsl ip
   1466c:	strd	r4, [sp, #-12]!
   14670:	str	lr, [sp, #8]
   14674:	sub	sp, sp, #12
   14678:	ldr	r3, [r2, #44]	; 0x2c
   1467c:	cmp	r3, #0
   14680:	bne	146ac <__assert_fail@plt+0x20e8>
   14684:	mov	r4, r0
   14688:	ldr	r3, [r2, #40]	; 0x28
   1468c:	cmp	r3, #4
   14690:	ldrls	pc, [pc, r3, lsl #2]
   14694:	b	146c8 <__assert_fail@plt+0x2104>
   14698:	andeq	r4, r1, r0, lsl #14
   1469c:	andeq	r4, r1, r0, asr #14
   146a0:	andeq	r4, r1, r0, lsl #15
   146a4:	muleq	r1, r0, r7
   146a8:	andeq	r4, r1, r4, ror #13
   146ac:	ldr	r3, [pc, #236]	; 147a0 <__assert_fail@plt+0x21dc>
   146b0:	movw	r2, #631	; 0x277
   146b4:	movw	r1, #19544	; 0x4c58
   146b8:	movt	r1, #4
   146bc:	movw	r0, #19620	; 0x4ca4
   146c0:	movt	r0, #4
   146c4:	bl	125c4 <__assert_fail@plt>
   146c8:	ldr	r3, [pc, #208]	; 147a0 <__assert_fail@plt+0x21dc>
   146cc:	movw	r2, #667	; 0x29b
   146d0:	movw	r1, #19544	; 0x4c58
   146d4:	movt	r1, #4
   146d8:	movw	r0, #19680	; 0x4ce0
   146dc:	movt	r0, #4
   146e0:	bl	125c4 <__assert_fail@plt>
   146e4:	ldr	r3, [pc, #180]	; 147a0 <__assert_fail@plt+0x21dc>
   146e8:	mov	r2, #636	; 0x27c
   146ec:	movw	r1, #19544	; 0x4c58
   146f0:	movt	r1, #4
   146f4:	movw	r0, #19692	; 0x4cec
   146f8:	movt	r0, #4
   146fc:	bl	125c4 <__assert_fail@plt>
   14700:	ldrd	r4, [r1, #72]	; 0x48
   14704:	strd	r4, [sp]
   14708:	ldr	r3, [r1, #76]	; 0x4c
   1470c:	str	r3, [sp, #4]
   14710:	add	r2, r2, #48	; 0x30
   14714:	ldm	r2, {r2, r3}
   14718:	add	r1, sp, #8
   1471c:	ldmdb	r1, {r0, r1}
   14720:	bl	13894 <__assert_fail@plt+0x12d0>
   14724:	cmp	r0, #0
   14728:	movle	r0, #0
   1472c:	movgt	r0, #1
   14730:	add	sp, sp, #12
   14734:	ldrd	r4, [sp]
   14738:	add	sp, sp, #8
   1473c:	pop	{pc}		; (ldr pc, [sp], #4)
   14740:	mov	r2, #5
   14744:	movw	r1, #19736	; 0x4d18
   14748:	movt	r1, #4
   1474c:	mov	r0, #0
   14750:	bl	12084 <dcgettext@plt>
   14754:	mov	r5, r0
   14758:	mov	r1, r4
   1475c:	mov	r0, #0
   14760:	bl	192b8 <__assert_fail@plt+0x6cf4>
   14764:	mov	r3, r0
   14768:	mov	r2, r5
   1476c:	mov	r1, #0
   14770:	mov	r0, r1
   14774:	bl	121bc <error@plt>
   14778:	mov	r0, #0
   1477c:	b	14730 <__assert_fail@plt+0x216c>
   14780:	ldr	r3, [r1, #92]	; 0x5c
   14784:	ldr	r1, [r1, #88]	; 0x58
   14788:	str	r1, [sp]
   1478c:	b	1470c <__assert_fail@plt+0x2148>
   14790:	ldr	r3, [r1, #84]	; 0x54
   14794:	ldr	r1, [r1, #80]	; 0x50
   14798:	str	r1, [sp]
   1479c:	b	1470c <__assert_fail@plt+0x2148>
   147a0:	andeq	r4, r4, r8, lsr #24
   147a4:	str	r4, [sp, #-8]!
   147a8:	str	lr, [sp, #4]
   147ac:	ldr	r0, [r1, #28]
   147b0:	bl	125a0 <getgrgid@plt>
   147b4:	clz	r0, r0
   147b8:	lsr	r0, r0, #5
   147bc:	ldr	r4, [sp]
   147c0:	add	sp, sp, #4
   147c4:	pop	{pc}		; (ldr pc, [sp], #4)
   147c8:	str	r4, [sp, #-8]!
   147cc:	str	lr, [sp, #4]
   147d0:	ldr	r0, [r1, #24]
   147d4:	bl	11f34 <getpwuid@plt>
   147d8:	clz	r0, r0
   147dc:	lsr	r0, r0, #5
   147e0:	ldr	r4, [sp]
   147e4:	add	sp, sp, #4
   147e8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ec:	strd	r4, [sp, #-16]!
   147f0:	str	r6, [sp, #8]
   147f4:	str	lr, [sp, #12]
   147f8:	mov	r4, r0
   147fc:	mov	r6, r1
   14800:	mov	r5, r2
   14804:	ldr	r3, [r2, #132]	; 0x84
   14808:	mov	r1, r0
   1480c:	ldr	r0, [r3]
   14810:	bl	13a70 <__assert_fail@plt+0x14ac>
   14814:	cmp	r0, #0
   14818:	bne	1482c <__assert_fail@plt+0x2268>
   1481c:	ldrd	r4, [sp]
   14820:	ldr	r6, [sp, #8]
   14824:	add	sp, sp, #12
   14828:	pop	{pc}		; (ldr pc, [sp], #4)
   1482c:	mov	r2, r5
   14830:	mov	r1, r6
   14834:	mov	r0, r4
   14838:	bl	15600 <__assert_fail@plt+0x303c>
   1483c:	b	1481c <__assert_fail@plt+0x2258>
   14840:	strd	r4, [sp, #-16]!
   14844:	str	r6, [sp, #8]
   14848:	str	lr, [sp, #12]
   1484c:	mov	r5, r1
   14850:	mov	r4, r2
   14854:	ldr	r3, [r2, #132]	; 0x84
   14858:	mov	r1, r0
   1485c:	ldr	r0, [r3]
   14860:	bl	13a70 <__assert_fail@plt+0x14ac>
   14864:	cmp	r0, #0
   14868:	bne	1487c <__assert_fail@plt+0x22b8>
   1486c:	ldrd	r4, [sp]
   14870:	ldr	r6, [sp, #8]
   14874:	add	sp, sp, #12
   14878:	pop	{pc}		; (ldr pc, [sp], #4)
   1487c:	movw	r3, #48704	; 0xbe40
   14880:	movt	r3, #5
   14884:	mov	r2, r4
   14888:	mov	r1, r5
   1488c:	ldr	r0, [r3, #12]
   14890:	bl	15600 <__assert_fail@plt+0x303c>
   14894:	b	1486c <__assert_fail@plt+0x22a8>
   14898:	mov	r0, #1
   1489c:	bx	lr
   148a0:	str	r4, [sp, #-8]!
   148a4:	str	lr, [sp, #4]
   148a8:	ldr	r3, [r2, #40]	; 0x28
   148ac:	mov	r2, #0
   148b0:	mov	r1, r0
   148b4:	mov	r0, r3
   148b8:	bl	121e0 <fnmatch@plt>
   148bc:	clz	r0, r0
   148c0:	lsr	r0, r0, #5
   148c4:	ldr	r4, [sp]
   148c8:	add	sp, sp, #4
   148cc:	pop	{pc}		; (ldr pc, [sp], #4)
   148d0:	ldr	r1, [r1, #16]
   148d4:	and	r3, r1, #61440	; 0xf000
   148d8:	cmp	r3, #16384	; 0x4000
   148dc:	moveq	r3, #44	; 0x2c
   148e0:	movne	r3, #40	; 0x28
   148e4:	add	r3, r2, r3
   148e8:	ldr	r0, [r3, #4]
   148ec:	ldr	r3, [r2, #40]	; 0x28
   148f0:	cmp	r3, #1
   148f4:	beq	14938 <__assert_fail@plt+0x2374>
   148f8:	cmp	r3, #0
   148fc:	beq	14928 <__assert_fail@plt+0x2364>
   14900:	cmp	r3, #2
   14904:	bne	1491c <__assert_fail@plt+0x2358>
   14908:	ubfx	r1, r1, #0, #12
   1490c:	cmp	r1, r0
   14910:	movne	r0, #0
   14914:	moveq	r0, #1
   14918:	bx	lr
   1491c:	str	r4, [sp, #-8]!
   14920:	str	lr, [sp, #4]
   14924:	bl	12570 <abort@plt>
   14928:	bics	r3, r0, r1
   1492c:	moveq	r0, #1
   14930:	movne	r0, #0
   14934:	bx	lr
   14938:	cmp	r0, #0
   1493c:	beq	14950 <__assert_fail@plt+0x238c>
   14940:	tst	r1, r0
   14944:	movne	r0, #1
   14948:	moveq	r0, #0
   1494c:	bx	lr
   14950:	mov	r0, #1
   14954:	bx	lr
   14958:	str	r4, [sp, #-8]!
   1495c:	str	lr, [sp, #4]
   14960:	movw	r0, #48704	; 0xbe40
   14964:	movt	r0, #5
   14968:	mov	r3, #0
   1496c:	mov	r2, #1
   14970:	ldr	r1, [r0, #12]
   14974:	ldr	r0, [r0, #16]
   14978:	bl	11fb8 <faccessat@plt>
   1497c:	clz	r0, r0
   14980:	lsr	r0, r0, #5
   14984:	ldr	r4, [sp]
   14988:	add	sp, sp, #4
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	str	r4, [sp, #-8]!
   14994:	str	lr, [sp, #4]
   14998:	movw	r0, #48704	; 0xbe40
   1499c:	movt	r0, #5
   149a0:	mov	r3, #0
   149a4:	mov	r2, #4
   149a8:	ldr	r1, [r0, #12]
   149ac:	ldr	r0, [r0, #16]
   149b0:	bl	11fb8 <faccessat@plt>
   149b4:	clz	r0, r0
   149b8:	lsr	r0, r0, #5
   149bc:	ldr	r4, [sp]
   149c0:	add	sp, sp, #4
   149c4:	pop	{pc}		; (ldr pc, [sp], #4)
   149c8:	str	r4, [sp, #-8]!
   149cc:	str	lr, [sp, #4]
   149d0:	movw	r0, #48704	; 0xbe40
   149d4:	movt	r0, #5
   149d8:	mov	r3, #0
   149dc:	mov	r2, #2
   149e0:	ldr	r1, [r0, #12]
   149e4:	ldr	r0, [r0, #16]
   149e8:	bl	11fb8 <faccessat@plt>
   149ec:	clz	r0, r0
   149f0:	lsr	r0, r0, #5
   149f4:	ldr	r4, [sp]
   149f8:	add	sp, sp, #4
   149fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14a00:	push	{lr}		; (str lr, [sp, #-4]!)
   14a04:	sub	sp, sp, #12
   14a08:	mov	ip, r2
   14a0c:	str	r0, [sp]
   14a10:	movw	r3, #40500	; 0x9e34
   14a14:	movt	r3, #4
   14a18:	ldrb	r2, [r2, #52]	; 0x34
   14a1c:	ldr	r1, [ip, #56]	; 0x38
   14a20:	ldr	r0, [ip, #44]	; 0x2c
   14a24:	bl	22104 <__assert_fail@plt+0xfb40>
   14a28:	mov	r0, #1
   14a2c:	add	sp, sp, #12
   14a30:	pop	{pc}		; (ldr pc, [sp], #4)
   14a34:	str	r4, [sp, #-8]!
   14a38:	str	lr, [sp, #4]
   14a3c:	bl	14270 <__assert_fail@plt+0x1cac>
   14a40:	ldr	r4, [sp]
   14a44:	add	sp, sp, #4
   14a48:	pop	{pc}		; (ldr pc, [sp], #4)
   14a4c:	strd	r4, [sp, #-16]!
   14a50:	str	r6, [sp, #8]
   14a54:	str	lr, [sp, #12]
   14a58:	sub	sp, sp, #8
   14a5c:	mov	r6, r0
   14a60:	mov	r5, r2
   14a64:	bl	122d0 <strlen@plt>
   14a68:	mov	r4, r0
   14a6c:	mov	r3, #0
   14a70:	str	r3, [sp]
   14a74:	mov	r2, r0
   14a78:	mov	r1, r6
   14a7c:	ldr	r0, [r5, #40]	; 0x28
   14a80:	bl	4064c <__assert_fail@plt+0x2e088>
   14a84:	cmp	r0, r4
   14a88:	movne	r0, #0
   14a8c:	moveq	r0, #1
   14a90:	add	sp, sp, #8
   14a94:	ldrd	r4, [sp]
   14a98:	ldr	r6, [sp, #8]
   14a9c:	add	sp, sp, #12
   14aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14aa8:	strd	r6, [sp, #8]
   14aac:	strd	r8, [sp, #16]
   14ab0:	strd	sl, [sp, #24]
   14ab4:	str	lr, [sp, #32]
   14ab8:	sub	sp, sp, #4
   14abc:	mov	fp, r2
   14ac0:	ldrd	r6, [r1, #48]	; 0x30
   14ac4:	ldr	r4, [r2, #44]	; 0x2c
   14ac8:	asr	r5, r4, #31
   14acc:	mov	r2, r4
   14ad0:	mov	r3, r5
   14ad4:	mov	r0, r6
   14ad8:	mov	r1, r7
   14adc:	bl	4431c <__assert_fail@plt+0x31d58>
   14ae0:	orrs	r3, r2, r3
   14ae4:	movne	sl, #1
   14ae8:	moveq	sl, #0
   14aec:	mov	r2, r4
   14af0:	mov	r3, r5
   14af4:	mov	r0, r6
   14af8:	mov	r1, r7
   14afc:	bl	4431c <__assert_fail@plt+0x31d58>
   14b00:	adds	r8, sl, r0
   14b04:	mov	r3, #0
   14b08:	adc	r9, r3, r1
   14b0c:	ldr	r3, [fp, #40]	; 0x28
   14b10:	cmp	r3, #1
   14b14:	beq	14b74 <__assert_fail@plt+0x25b0>
   14b18:	cmp	r3, #0
   14b1c:	beq	14b44 <__assert_fail@plt+0x2580>
   14b20:	cmp	r3, #2
   14b24:	movne	r0, #0
   14b28:	bne	14b58 <__assert_fail@plt+0x2594>
   14b2c:	ldrd	r2, [fp, #48]	; 0x30
   14b30:	cmp	r3, r9
   14b34:	cmpeq	r2, r8
   14b38:	moveq	r0, #1
   14b3c:	movne	r0, #0
   14b40:	b	14b58 <__assert_fail@plt+0x2594>
   14b44:	ldrd	r2, [fp, #48]	; 0x30
   14b48:	cmp	r3, r9
   14b4c:	cmpeq	r2, r8
   14b50:	movcc	r0, #1
   14b54:	movcs	r0, #0
   14b58:	add	sp, sp, #4
   14b5c:	ldrd	r4, [sp]
   14b60:	ldrd	r6, [sp, #8]
   14b64:	ldrd	r8, [sp, #16]
   14b68:	ldrd	sl, [sp, #24]
   14b6c:	add	sp, sp, #32
   14b70:	pop	{pc}		; (ldr pc, [sp], #4)
   14b74:	ldrd	r2, [fp, #48]	; 0x30
   14b78:	cmp	r3, r9
   14b7c:	cmpeq	r2, r8
   14b80:	movhi	r0, #1
   14b84:	movls	r0, #0
   14b88:	b	14b58 <__assert_fail@plt+0x2594>
   14b8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14b90:	strd	r6, [sp, #8]
   14b94:	strd	r8, [sp, #16]
   14b98:	str	sl, [sp, #24]
   14b9c:	str	lr, [sp, #28]
   14ba0:	ldrd	r6, [r1, #96]	; 0x60
   14ba4:	orrs	r3, r6, r7
   14ba8:	beq	14bc0 <__assert_fail@plt+0x25fc>
   14bac:	ldrd	r8, [r2, #40]	; 0x28
   14bb0:	cmp	r7, r9
   14bb4:	cmpeq	r6, r8
   14bb8:	movne	r0, #0
   14bbc:	bne	14c00 <__assert_fail@plt+0x263c>
   14bc0:	mov	r5, r2
   14bc4:	mov	r4, r1
   14bc8:	movw	r3, #48704	; 0xbe40
   14bcc:	movt	r3, #5
   14bd0:	mov	r2, r1
   14bd4:	ldr	r1, [r3, #12]
   14bd8:	bl	193c8 <__assert_fail@plt+0x6e04>
   14bdc:	cmp	r0, #0
   14be0:	movne	r0, #0
   14be4:	bne	14c00 <__assert_fail@plt+0x263c>
   14be8:	ldrd	r8, [r4, #96]	; 0x60
   14bec:	ldrd	r6, [r5, #40]	; 0x28
   14bf0:	cmp	r9, r7
   14bf4:	cmpeq	r8, r6
   14bf8:	beq	14c18 <__assert_fail@plt+0x2654>
   14bfc:	and	r0, r0, #1
   14c00:	ldrd	r4, [sp]
   14c04:	ldrd	r6, [sp, #8]
   14c08:	ldrd	r8, [sp, #16]
   14c0c:	ldr	sl, [sp, #24]
   14c10:	add	sp, sp, #28
   14c14:	pop	{pc}		; (ldr pc, [sp], #4)
   14c18:	ldrd	r0, [r4]
   14c1c:	ldrd	r2, [r5, #48]	; 0x30
   14c20:	cmp	r1, r3
   14c24:	cmpeq	r0, r2
   14c28:	moveq	r0, #1
   14c2c:	movne	r0, #0
   14c30:	b	14bfc <__assert_fail@plt+0x2638>
   14c34:	mov	r0, #1
   14c38:	bx	lr
   14c3c:	movw	r3, #48704	; 0xbe40
   14c40:	movt	r3, #5
   14c44:	ldrb	r3, [r3, #5]
   14c48:	cmp	r3, #0
   14c4c:	beq	14ca8 <__assert_fail@plt+0x26e4>
   14c50:	movw	r3, #48704	; 0xbe40
   14c54:	movt	r3, #5
   14c58:	ldr	r3, [r3, #8]
   14c5c:	cmp	r3, #0
   14c60:	beq	14d28 <__assert_fail@plt+0x2764>
   14c64:	movw	r0, #48704	; 0xbe40
   14c68:	movt	r0, #5
   14c6c:	ldrb	r0, [r0, #4]
   14c70:	cmp	r0, #0
   14c74:	ldrne	r3, [r1, #16]
   14c78:	and	r3, r3, #61440	; 0xf000
   14c7c:	cmp	r3, #24576	; 0x6000
   14c80:	beq	14cf0 <__assert_fail@plt+0x272c>
   14c84:	bhi	14ccc <__assert_fail@plt+0x2708>
   14c88:	cmp	r3, #8192	; 0x2000
   14c8c:	beq	14cf8 <__assert_fail@plt+0x2734>
   14c90:	cmp	r3, #16384	; 0x4000
   14c94:	beq	14d00 <__assert_fail@plt+0x273c>
   14c98:	cmp	r3, #4096	; 0x1000
   14c9c:	beq	14d10 <__assert_fail@plt+0x274c>
   14ca0:	mov	r0, #0
   14ca4:	bx	lr
   14ca8:	str	r4, [sp, #-8]!
   14cac:	str	lr, [sp, #4]
   14cb0:	ldr	r3, [pc, #120]	; 14d30 <__assert_fail@plt+0x276c>
   14cb4:	movw	r2, #977	; 0x3d1
   14cb8:	movw	r1, #19544	; 0x4c58
   14cbc:	movt	r1, #4
   14cc0:	movw	r0, #19784	; 0x4d48
   14cc4:	movt	r0, #4
   14cc8:	bl	125c4 <__assert_fail@plt>
   14ccc:	cmp	r3, #40960	; 0xa000
   14cd0:	beq	14d18 <__assert_fail@plt+0x2754>
   14cd4:	cmp	r3, #49152	; 0xc000
   14cd8:	beq	14d20 <__assert_fail@plt+0x275c>
   14cdc:	cmp	r3, #32768	; 0x8000
   14ce0:	moveq	r3, #3
   14ce4:	beq	14d04 <__assert_fail@plt+0x2740>
   14ce8:	mov	r0, #0
   14cec:	bx	lr
   14cf0:	mov	r3, #0
   14cf4:	b	14d04 <__assert_fail@plt+0x2740>
   14cf8:	mov	r3, #1
   14cfc:	b	14d04 <__assert_fail@plt+0x2740>
   14d00:	mov	r3, #2
   14d04:	add	r2, r2, r3
   14d08:	ldrb	r0, [r2, #40]	; 0x28
   14d0c:	bx	lr
   14d10:	mov	r3, #5
   14d14:	b	14d04 <__assert_fail@plt+0x2740>
   14d18:	mov	r3, #4
   14d1c:	b	14d04 <__assert_fail@plt+0x2740>
   14d20:	mov	r3, #6
   14d24:	b	14d04 <__assert_fail@plt+0x2740>
   14d28:	mov	r0, #0
   14d2c:	bx	lr
   14d30:	andeq	r4, r4, r8, lsr ip
   14d34:	ldr	r3, [r2, #40]	; 0x28
   14d38:	cmp	r3, #1
   14d3c:	beq	14d78 <__assert_fail@plt+0x27b4>
   14d40:	cmp	r3, #0
   14d44:	beq	14d58 <__assert_fail@plt+0x2794>
   14d48:	cmp	r3, #2
   14d4c:	beq	14d98 <__assert_fail@plt+0x27d4>
   14d50:	mov	r0, #0
   14d54:	bx	lr
   14d58:	ldr	r0, [r1, #24]
   14d5c:	mov	r1, #0
   14d60:	ldrd	r2, [r2, #48]	; 0x30
   14d64:	cmp	r1, r3
   14d68:	cmpeq	r0, r2
   14d6c:	movhi	r0, #1
   14d70:	movls	r0, #0
   14d74:	bx	lr
   14d78:	ldr	r0, [r1, #24]
   14d7c:	mov	r1, #0
   14d80:	ldrd	r2, [r2, #48]	; 0x30
   14d84:	cmp	r1, r3
   14d88:	cmpeq	r0, r2
   14d8c:	movcc	r0, #1
   14d90:	movcs	r0, #0
   14d94:	bx	lr
   14d98:	ldr	r0, [r1, #24]
   14d9c:	mov	r1, #0
   14da0:	ldrd	r2, [r2, #48]	; 0x30
   14da4:	cmp	r3, r1
   14da8:	cmpeq	r2, r0
   14dac:	moveq	r0, #1
   14db0:	movne	r0, #0
   14db4:	bx	lr
   14db8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14dbc:	strd	r6, [sp, #8]
   14dc0:	str	r8, [sp, #16]
   14dc4:	str	lr, [sp, #20]
   14dc8:	sub	sp, sp, #24
   14dcc:	mov	r7, r2
   14dd0:	ldr	r8, [r1, #72]	; 0x48
   14dd4:	ldr	r6, [r1, #76]	; 0x4c
   14dd8:	ldr	r5, [r1, #88]	; 0x58
   14ddc:	ldr	r4, [r1, #92]	; 0x5c
   14de0:	str	r8, [sp, #8]
   14de4:	str	r6, [sp, #12]
   14de8:	str	r5, [sp]
   14dec:	str	r4, [sp, #4]
   14df0:	mov	r3, sp
   14df4:	ldm	r3, {r2, r3}
   14df8:	add	r1, sp, #8
   14dfc:	ldm	r1, {r0, r1}
   14e00:	bl	13894 <__assert_fail@plt+0x12d0>
   14e04:	cmp	r0, #0
   14e08:	movlt	r0, #0
   14e0c:	blt	14e3c <__assert_fail@plt+0x2878>
   14e10:	sub	r5, r5, r8
   14e14:	subs	r4, r4, r6
   14e18:	bmi	14e54 <__assert_fail@plt+0x2890>
   14e1c:	str	r5, [sp, #16]
   14e20:	str	r4, [sp, #20]
   14e24:	movw	r3, #20864	; 0x5180
   14e28:	movt	r3, #1
   14e2c:	mov	r2, r7
   14e30:	add	r1, sp, #24
   14e34:	ldmdb	r1, {r0, r1}
   14e38:	bl	13b3c <__assert_fail@plt+0x1578>
   14e3c:	add	sp, sp, #24
   14e40:	ldrd	r4, [sp]
   14e44:	ldrd	r6, [sp, #8]
   14e48:	ldr	r8, [sp, #16]
   14e4c:	add	sp, sp, #20
   14e50:	pop	{pc}		; (ldr pc, [sp], #4)
   14e54:	add	r4, r4, #998244352	; 0x3b800000
   14e58:	add	r4, r4, #1753088	; 0x1ac000
   14e5c:	add	r4, r4, #2560	; 0xa00
   14e60:	sub	r5, r5, #1
   14e64:	b	14e1c <__assert_fail@plt+0x2858>
   14e68:	ldr	r0, [r2, #40]	; 0x28
   14e6c:	ldr	r3, [r1, #24]
   14e70:	cmp	r0, r3
   14e74:	movne	r0, #0
   14e78:	moveq	r0, #1
   14e7c:	bx	lr
   14e80:	strd	r4, [sp, #-20]!	; 0xffffffec
   14e84:	strd	r6, [sp, #8]
   14e88:	str	lr, [sp, #16]
   14e8c:	sub	sp, sp, #108	; 0x6c
   14e90:	mov	r5, r0
   14e94:	mov	r7, r1
   14e98:	mov	r6, r2
   14e9c:	bl	18b54 <__assert_fail@plt+0x6590>
   14ea0:	movw	r3, #35360	; 0x8a20
   14ea4:	movt	r3, #1
   14ea8:	movw	r4, #35216	; 0x8990
   14eac:	movt	r4, #1
   14eb0:	cmp	r0, #0
   14eb4:	movne	r4, r3
   14eb8:	mov	r0, sp
   14ebc:	bl	18720 <__assert_fail@plt+0x615c>
   14ec0:	movw	r3, #48704	; 0xbe40
   14ec4:	movt	r3, #5
   14ec8:	mov	r1, sp
   14ecc:	ldr	r0, [r3, #12]
   14ed0:	blx	r4
   14ed4:	cmp	r0, #0
   14ed8:	beq	14f50 <__assert_fail@plt+0x298c>
   14edc:	bl	18b54 <__assert_fail@plt+0x6590>
   14ee0:	cmp	r0, #0
   14ee4:	beq	14ef8 <__assert_fail@plt+0x2934>
   14ee8:	bl	12318 <__errno_location@plt>
   14eec:	ldr	r3, [r0]
   14ef0:	cmp	r3, #2
   14ef4:	beq	14f3c <__assert_fail@plt+0x2978>
   14ef8:	bl	12318 <__errno_location@plt>
   14efc:	ldr	r4, [r0]
   14f00:	mov	r1, r5
   14f04:	mov	r0, #0
   14f08:	bl	192b8 <__assert_fail@plt+0x6cf4>
   14f0c:	mov	r3, r0
   14f10:	movw	r2, #35960	; 0x8c78
   14f14:	movt	r2, #4
   14f18:	mov	r1, r4
   14f1c:	mov	r0, #0
   14f20:	bl	121bc <error@plt>
   14f24:	movw	r3, #48704	; 0xbe40
   14f28:	movt	r3, #5
   14f2c:	mov	r2, #1
   14f30:	str	r2, [r3, #28]
   14f34:	mov	r0, #0
   14f38:	b	14f60 <__assert_fail@plt+0x299c>
   14f3c:	mov	r2, r6
   14f40:	mov	r1, r7
   14f44:	mov	r0, r5
   14f48:	bl	14c3c <__assert_fail@plt+0x2678>
   14f4c:	b	14f60 <__assert_fail@plt+0x299c>
   14f50:	mov	r2, r6
   14f54:	mov	r1, sp
   14f58:	mov	r0, r5
   14f5c:	bl	14c3c <__assert_fail@plt+0x2678>
   14f60:	add	sp, sp, #108	; 0x6c
   14f64:	ldrd	r4, [sp]
   14f68:	ldrd	r6, [sp, #8]
   14f6c:	add	sp, sp, #16
   14f70:	pop	{pc}		; (ldr pc, [sp], #4)
   14f74:	strd	r4, [sp, #-16]!
   14f78:	str	r6, [sp, #8]
   14f7c:	str	lr, [sp, #12]
   14f80:	sub	sp, sp, #8
   14f84:	mov	r6, r0
   14f88:	mov	r5, r2
   14f8c:	movw	r3, #48704	; 0xbe40
   14f90:	movt	r3, #5
   14f94:	movw	r2, #48748	; 0xbe6c
   14f98:	movt	r2, #5
   14f9c:	ldr	r4, [r2, #64]	; 0x40
   14fa0:	add	r2, sp, #4
   14fa4:	ldr	r1, [r3, #12]
   14fa8:	ldr	r0, [r3, #16]
   14fac:	blx	r4
   14fb0:	cmp	r0, #0
   14fb4:	blt	14ff0 <__assert_fail@plt+0x2a2c>
   14fb8:	mov	r2, #0
   14fbc:	ldr	r1, [sp, #4]
   14fc0:	ldr	r0, [r5, #40]	; 0x28
   14fc4:	bl	121e0 <fnmatch@plt>
   14fc8:	clz	r4, r0
   14fcc:	lsr	r4, r4, #5
   14fd0:	ldr	r0, [sp, #4]
   14fd4:	bl	124ec <freecon@plt>
   14fd8:	mov	r0, r4
   14fdc:	add	sp, sp, #8
   14fe0:	ldrd	r4, [sp]
   14fe4:	ldr	r6, [sp, #8]
   14fe8:	add	sp, sp, #12
   14fec:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff0:	bl	12318 <__errno_location@plt>
   14ff4:	ldr	r4, [r0]
   14ff8:	mov	r2, #5
   14ffc:	movw	r1, #19800	; 0x4d58
   15000:	movt	r1, #4
   15004:	mov	r0, #0
   15008:	bl	12084 <dcgettext@plt>
   1500c:	mov	r5, r0
   15010:	mov	r1, r6
   15014:	mov	r0, #0
   15018:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1501c:	mov	r3, r0
   15020:	mov	r2, r5
   15024:	mov	r1, r4
   15028:	mov	r0, #0
   1502c:	bl	121bc <error@plt>
   15030:	mov	r4, #0
   15034:	b	14fd8 <__assert_fail@plt+0x2a14>
   15038:	strd	r4, [sp, #-20]!	; 0xffffffec
   1503c:	strd	r6, [sp, #8]
   15040:	str	lr, [sp, #16]
   15044:	sub	sp, sp, #260	; 0x104
   15048:	mov	r6, r0
   1504c:	subs	r4, r1, #0
   15050:	beq	150ec <__assert_fail@plt+0x2b28>
   15054:	mov	r7, #0
   15058:	movw	r5, #19824	; 0x4d70
   1505c:	movt	r5, #4
   15060:	b	1508c <__assert_fail@plt+0x2ac8>
   15064:	add	r2, sp, #256	; 0x100
   15068:	add	r3, r2, r3
   1506c:	strb	r7, [r3, #-255]	; 0xffffff01
   15070:	mov	r2, sp
   15074:	mov	r1, r5
   15078:	mov	r0, r6
   1507c:	bl	1230c <fprintf@plt>
   15080:	ldr	r4, [r4, #152]	; 0x98
   15084:	cmp	r4, #0
   15088:	beq	150ec <__assert_fail@plt+0x2b28>
   1508c:	ldr	r2, [r4, #4]
   15090:	cmp	r2, #0
   15094:	beq	15074 <__assert_fail@plt+0x2ab0>
   15098:	mov	r1, r2
   1509c:	mov	r0, sp
   150a0:	bl	12180 <strcpy@plt>
   150a4:	mov	r0, sp
   150a8:	bl	122d0 <strlen@plt>
   150ac:	sub	r0, r0, #1
   150b0:	mov	r3, r0
   150b4:	cmp	r0, #0
   150b8:	blt	15064 <__assert_fail@plt+0x2aa0>
   150bc:	add	r2, sp, r0
   150c0:	ldrb	r1, [sp, r0]
   150c4:	cmp	r1, #9
   150c8:	cmpne	r1, #32
   150cc:	bne	15064 <__assert_fail@plt+0x2aa0>
   150d0:	subs	r3, r3, #1
   150d4:	bmi	15064 <__assert_fail@plt+0x2aa0>
   150d8:	ldrb	r1, [r2, #-1]!
   150dc:	cmp	r1, #9
   150e0:	cmpne	r1, #32
   150e4:	beq	150d0 <__assert_fail@plt+0x2b0c>
   150e8:	b	15064 <__assert_fail@plt+0x2aa0>
   150ec:	mov	r1, r6
   150f0:	mov	r0, #10
   150f4:	bl	1245c <fputc@plt>
   150f8:	add	sp, sp, #260	; 0x104
   150fc:	ldrd	r4, [sp]
   15100:	ldrd	r6, [sp, #8]
   15104:	add	sp, sp, #16
   15108:	pop	{pc}		; (ldr pc, [sp], #4)
   1510c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15110:	strd	r6, [sp, #8]
   15114:	str	r8, [sp, #16]
   15118:	str	lr, [sp, #20]
   1511c:	sub	sp, sp, #8
   15120:	subs	r4, r1, #0
   15124:	beq	151d4 <__assert_fail@plt+0x2c10>
   15128:	mov	r5, r0
   1512c:	ldr	r1, [r4, #156]	; 0x9c
   15130:	bl	15258 <__assert_fail@plt+0x2c94>
   15134:	ldrb	r6, [r4, #18]
   15138:	movw	r2, #19832	; 0x4d78
   1513c:	movt	r2, #4
   15140:	movw	r0, #25528	; 0x63b8
   15144:	movt	r0, #4
   15148:	ldrb	r7, [r4, #19]
   1514c:	movw	r3, #19848	; 0x4d88
   15150:	movt	r3, #4
   15154:	ldrb	r8, [r4, #20]
   15158:	movw	r1, #19864	; 0x4d98
   1515c:	movt	r1, #4
   15160:	cmp	r8, #0
   15164:	moveq	r1, r0
   15168:	str	r1, [sp]
   1516c:	cmp	r7, #0
   15170:	moveq	r3, r0
   15174:	cmp	r6, #0
   15178:	moveq	r2, r0
   1517c:	movw	r1, #19880	; 0x4da8
   15180:	movt	r1, #4
   15184:	mov	r0, r5
   15188:	bl	1230c <fprintf@plt>
   1518c:	mov	r1, r4
   15190:	mov	r0, r5
   15194:	bl	16760 <__assert_fail@plt+0x419c>
   15198:	vldr	s15, [r4, #28]
   1519c:	vcvt.f64.f32	d7, s15
   151a0:	vmov	r2, r3, d7
   151a4:	movw	r1, #19888	; 0x4db0
   151a8:	movt	r1, #4
   151ac:	mov	r0, r5
   151b0:	bl	1230c <fprintf@plt>
   151b4:	movw	r3, #48748	; 0xbe6c
   151b8:	movt	r3, #5
   151bc:	ldr	r3, [r3, #44]	; 0x2c
   151c0:	tst	r3, #64	; 0x40
   151c4:	bne	151ec <__assert_fail@plt+0x2c28>
   151c8:	ldr	r1, [r4, #160]	; 0xa0
   151cc:	mov	r0, r5
   151d0:	bl	15258 <__assert_fail@plt+0x2c94>
   151d4:	add	sp, sp, #8
   151d8:	ldrd	r4, [sp]
   151dc:	ldrd	r6, [sp, #8]
   151e0:	ldr	r8, [sp, #16]
   151e4:	add	sp, sp, #20
   151e8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ec:	ldr	r3, [r4, #164]	; 0xa4
   151f0:	ldr	r2, [r4, #168]	; 0xa8
   151f4:	movw	r1, #19916	; 0x4dcc
   151f8:	movt	r1, #4
   151fc:	mov	r0, r5
   15200:	bl	1230c <fprintf@plt>
   15204:	ldr	r3, [r4, #164]	; 0xa4
   15208:	cmp	r3, #0
   1520c:	beq	1523c <__assert_fail@plt+0x2c78>
   15210:	vldr	s15, [r4, #168]	; 0xa8
   15214:	vcvt.f64.u32	d6, s15
   15218:	vmov	s15, r3
   1521c:	vcvt.f64.u32	d7, s15
   15220:	vdiv.f64	d7, d6, d7
   15224:	vmov	r2, r3, d7
   15228:	movw	r1, #19944	; 0x4de8
   1522c:	movt	r1, #4
   15230:	mov	r0, r5
   15234:	bl	1230c <fprintf@plt>
   15238:	b	151c8 <__assert_fail@plt+0x2c04>
   1523c:	mov	r3, r5
   15240:	mov	r2, #4
   15244:	mov	r1, #1
   15248:	movw	r0, #19952	; 0x4df0
   1524c:	movt	r0, #4
   15250:	bl	12138 <fwrite@plt>
   15254:	b	151c8 <__assert_fail@plt+0x2c04>
   15258:	strd	r4, [sp, #-16]!
   1525c:	str	r6, [sp, #8]
   15260:	str	lr, [sp, #12]
   15264:	subs	r4, r1, #0
   15268:	beq	152d8 <__assert_fail@plt+0x2d14>
   1526c:	mov	r5, r0
   15270:	ldr	r1, [r4]
   15274:	movw	r2, #14616	; 0x3918
   15278:	movt	r2, #1
   1527c:	movw	r3, #14696	; 0x3968
   15280:	movt	r3, #1
   15284:	cmp	r1, r3
   15288:	cmpne	r1, r2
   1528c:	bne	152f4 <__assert_fail@plt+0x2d30>
   15290:	ldr	r3, [r4, #156]	; 0x9c
   15294:	cmp	r3, #0
   15298:	beq	152e8 <__assert_fail@plt+0x2d24>
   1529c:	mov	r3, r5
   152a0:	mov	r2, #3
   152a4:	mov	r1, #1
   152a8:	movw	r0, #19960	; 0x4df8
   152ac:	movt	r0, #4
   152b0:	bl	12138 <fwrite@plt>
   152b4:	mov	r1, r4
   152b8:	mov	r0, r5
   152bc:	bl	1510c <__assert_fail@plt+0x2b48>
   152c0:	mov	r3, r5
   152c4:	mov	r2, #3
   152c8:	mov	r1, #1
   152cc:	movw	r0, #19964	; 0x4dfc
   152d0:	movt	r0, #4
   152d4:	bl	12138 <fwrite@plt>
   152d8:	ldrd	r4, [sp]
   152dc:	ldr	r6, [sp, #8]
   152e0:	add	sp, sp, #12
   152e4:	pop	{pc}		; (ldr pc, [sp], #4)
   152e8:	ldr	r1, [r4, #160]	; 0xa0
   152ec:	bl	15258 <__assert_fail@plt+0x2c94>
   152f0:	b	152d8 <__assert_fail@plt+0x2d14>
   152f4:	ldr	r3, [r4, #156]	; 0x9c
   152f8:	cmp	r3, #0
   152fc:	bne	1529c <__assert_fail@plt+0x2cd8>
   15300:	ldr	r3, [r4, #160]	; 0xa0
   15304:	cmp	r3, #0
   15308:	bne	1529c <__assert_fail@plt+0x2cd8>
   1530c:	mov	r1, r4
   15310:	bl	1510c <__assert_fail@plt+0x2b48>
   15314:	b	152d8 <__assert_fail@plt+0x2d14>
   15318:	movw	r3, #48748	; 0xbe6c
   1531c:	movt	r3, #5
   15320:	ldr	r3, [r3, #44]	; 0x2c
   15324:	tst	r3, #64	; 0x40
   15328:	bxeq	lr
   1532c:	strd	r4, [sp, #-16]!
   15330:	str	r6, [sp, #8]
   15334:	str	lr, [sp, #12]
   15338:	mov	r4, r0
   1533c:	movw	r5, #46408	; 0xb548
   15340:	movt	r5, #5
   15344:	ldr	r3, [r5]
   15348:	mov	r2, #42	; 0x2a
   1534c:	mov	r1, #1
   15350:	movw	r0, #19968	; 0x4e00
   15354:	movt	r0, #4
   15358:	bl	12138 <fwrite@plt>
   1535c:	mov	r1, r4
   15360:	ldr	r0, [r5]
   15364:	bl	1510c <__assert_fail@plt+0x2b48>
   15368:	ldr	r1, [r5]
   1536c:	mov	r0, #10
   15370:	bl	1245c <fputc@plt>
   15374:	ldrd	r4, [sp]
   15378:	ldr	r6, [sp, #8]
   1537c:	add	sp, sp, #12
   15380:	pop	{pc}		; (ldr pc, [sp], #4)
   15384:	cmp	r0, #0
   15388:	bxeq	lr
   1538c:	str	r4, [sp, #-8]!
   15390:	str	lr, [sp, #4]
   15394:	ldr	r2, [r0]
   15398:	cmp	r2, #0
   1539c:	beq	153d0 <__assert_fail@plt+0x2e0c>
   153a0:	ldr	r3, [r0, #172]	; 0xac
   153a4:	cmp	r3, #0
   153a8:	beq	153ec <__assert_fail@plt+0x2e28>
   153ac:	ldr	r1, [r3, #12]
   153b0:	cmp	r1, #0
   153b4:	cmpne	r2, r1
   153b8:	bne	15408 <__assert_fail@plt+0x2e44>
   153bc:	movw	lr, #15136	; 0x3b20
   153c0:	movt	lr, #1
   153c4:	movw	ip, #14352	; 0x3810
   153c8:	movt	ip, #1
   153cc:	b	15468 <__assert_fail@plt+0x2ea4>
   153d0:	ldr	r3, [pc, #428]	; 15584 <__assert_fail@plt+0x2fc0>
   153d4:	movw	r2, #1310	; 0x51e
   153d8:	movw	r1, #19544	; 0x4c58
   153dc:	movt	r1, #4
   153e0:	movw	r0, #20012	; 0x4e2c
   153e4:	movt	r0, #4
   153e8:	bl	125c4 <__assert_fail@plt>
   153ec:	ldr	r3, [pc, #400]	; 15584 <__assert_fail@plt+0x2fc0>
   153f0:	movw	r2, #1313	; 0x521
   153f4:	movw	r1, #19544	; 0x4c58
   153f8:	movt	r1, #4
   153fc:	movw	r0, #20036	; 0x4e44
   15400:	movt	r0, #4
   15404:	bl	125c4 <__assert_fail@plt>
   15408:	ldr	r3, [pc, #372]	; 15584 <__assert_fail@plt+0x2fc0>
   1540c:	movw	r2, #1322	; 0x52a
   15410:	movw	r1, #19544	; 0x4c58
   15414:	movt	r1, #4
   15418:	movw	r0, #20060	; 0x4e5c
   1541c:	movt	r0, #4
   15420:	bl	125c4 <__assert_fail@plt>
   15424:	cmp	r3, #0
   15428:	beq	15494 <__assert_fail@plt+0x2ed0>
   1542c:	cmp	r3, #2
   15430:	beq	154b0 <__assert_fail@plt+0x2eec>
   15434:	ldr	r0, [r0, #152]	; 0x98
   15438:	cmp	r0, #0
   1543c:	beq	15578 <__assert_fail@plt+0x2fb4>
   15440:	ldr	r2, [r0]
   15444:	cmp	r2, #0
   15448:	beq	153d0 <__assert_fail@plt+0x2e0c>
   1544c:	ldr	r3, [r0, #172]	; 0xac
   15450:	cmp	r3, #0
   15454:	beq	153ec <__assert_fail@plt+0x2e28>
   15458:	ldr	r1, [r3, #12]
   1545c:	cmp	r1, #0
   15460:	cmpne	r2, r1
   15464:	bne	15408 <__assert_fail@plt+0x2e44>
   15468:	ldr	r3, [r3]
   1546c:	cmp	r3, #6
   15470:	ldrls	pc, [pc, r3, lsl #2]
   15474:	b	15434 <__assert_fail@plt+0x2e70>
   15478:	andeq	r5, r1, r4, lsr #8
   1547c:	andeq	r5, r1, r8, lsr #10
   15480:	andeq	r5, r1, r4, lsr #8
   15484:	andeq	r5, r1, r8, lsr #10
   15488:	andeq	r5, r1, r8, lsr #10
   1548c:	andeq	r5, r1, r8, lsr #10
   15490:	andeq	r5, r1, ip, asr #9
   15494:	ldr	r3, [pc, #232]	; 15584 <__assert_fail@plt+0x2fc0>
   15498:	movw	r2, #1338	; 0x53a
   1549c:	movw	r1, #19544	; 0x4c58
   154a0:	movt	r1, #4
   154a4:	movw	r0, #20104	; 0x4e88
   154a8:	movt	r0, #4
   154ac:	bl	125c4 <__assert_fail@plt>
   154b0:	ldr	r3, [pc, #204]	; 15584 <__assert_fail@plt+0x2fc0>
   154b4:	movw	r2, #1339	; 0x53b
   154b8:	movw	r1, #19544	; 0x4c58
   154bc:	movt	r1, #4
   154c0:	movw	r0, #20140	; 0x4eac
   154c4:	movt	r0, #4
   154c8:	bl	125c4 <__assert_fail@plt>
   154cc:	ldrb	r3, [r0, #16]
   154d0:	cmp	r3, #0
   154d4:	beq	1550c <__assert_fail@plt+0x2f48>
   154d8:	cmp	r2, lr
   154dc:	cmpne	r2, ip
   154e0:	beq	15434 <__assert_fail@plt+0x2e70>
   154e4:	ldrb	r3, [r0, #17]
   154e8:	cmp	r3, #0
   154ec:	bne	15434 <__assert_fail@plt+0x2e70>
   154f0:	ldr	r3, [pc, #140]	; 15584 <__assert_fail@plt+0x2fc0>
   154f4:	movw	r2, #1349	; 0x545
   154f8:	movw	r1, #19544	; 0x4c58
   154fc:	movt	r1, #4
   15500:	movw	r0, #20204	; 0x4eec
   15504:	movt	r0, #4
   15508:	bl	125c4 <__assert_fail@plt>
   1550c:	ldr	r3, [pc, #112]	; 15584 <__assert_fail@plt+0x2fc0>
   15510:	movw	r2, #1343	; 0x53f
   15514:	movw	r1, #19544	; 0x4c58
   15518:	movt	r1, #4
   1551c:	movw	r0, #20188	; 0x4edc
   15520:	movt	r0, #4
   15524:	bl	125c4 <__assert_fail@plt>
   15528:	ldrb	r3, [r0, #17]
   1552c:	cmp	r3, #0
   15530:	bne	1555c <__assert_fail@plt+0x2f98>
   15534:	ldrb	r3, [r0, #16]
   15538:	cmp	r3, #0
   1553c:	beq	15434 <__assert_fail@plt+0x2e70>
   15540:	ldr	r3, [pc, #60]	; 15584 <__assert_fail@plt+0x2fc0>
   15544:	movw	r2, #1364	; 0x554
   15548:	movw	r1, #19544	; 0x4c58
   1554c:	movt	r1, #4
   15550:	movw	r0, #20248	; 0x4f18
   15554:	movt	r0, #4
   15558:	bl	125c4 <__assert_fail@plt>
   1555c:	ldr	r3, [pc, #32]	; 15584 <__assert_fail@plt+0x2fc0>
   15560:	movw	r2, #1363	; 0x553
   15564:	movw	r1, #19544	; 0x4c58
   15568:	movt	r1, #4
   1556c:	movw	r0, #20224	; 0x4f00
   15570:	movt	r0, #4
   15574:	bl	125c4 <__assert_fail@plt>
   15578:	ldr	r4, [sp]
   1557c:	add	sp, sp, #4
   15580:	pop	{pc}		; (ldr pc, [sp], #4)
   15584:	andeq	r4, r4, r4, asr #24
   15588:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1558c:	strd	r6, [sp, #8]
   15590:	str	r8, [sp, #16]
   15594:	str	lr, [sp, #20]
   15598:	mov	r5, r0
   1559c:	mov	r6, r1
   155a0:	mov	r7, r2
   155a4:	mov	r0, #8
   155a8:	bl	2e348 <__assert_fail@plt+0x1bd84>
   155ac:	mov	r4, r0
   155b0:	str	r0, [r5, #104]	; 0x68
   155b4:	mov	r2, #0
   155b8:	str	r2, [r0, #4]
   155bc:	mov	r1, r7
   155c0:	mov	r0, r6
   155c4:	bl	27520 <__assert_fail@plt+0x14f5c>
   155c8:	str	r0, [r4]
   155cc:	ldr	r3, [r5, #104]	; 0x68
   155d0:	ldr	r0, [r3]
   155d4:	cmp	r0, #0
   155d8:	movlt	r0, #0
   155dc:	blt	155ec <__assert_fail@plt+0x3028>
   155e0:	mov	r1, #1
   155e4:	bl	22bf0 <__assert_fail@plt+0x1062c>
   155e8:	mov	r0, #1
   155ec:	ldrd	r4, [sp]
   155f0:	ldrd	r6, [sp, #8]
   155f4:	ldr	r8, [sp, #16]
   155f8:	add	sp, sp, #20
   155fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15604:	strd	r6, [sp, #8]
   15608:	strd	r8, [sp, #16]
   1560c:	strd	sl, [sp, #24]
   15610:	str	lr, [sp, #32]
   15614:	sub	sp, sp, #44	; 0x2c
   15618:	mov	r7, r0
   1561c:	mov	r5, r2
   15620:	ldr	r0, [r2]
   15624:	bl	19294 <__assert_fail@plt+0x6cd0>
   15628:	subs	r8, r0, #0
   1562c:	bne	15730 <__assert_fail@plt+0x316c>
   15630:	movw	r3, #46444	; 0xb56c
   15634:	movt	r3, #5
   15638:	ldr	r2, [r5, #144]	; 0x90
   1563c:	ldr	r3, [r3]
   15640:	cmp	r2, r3
   15644:	moveq	r9, #0
   15648:	moveq	sl, r9
   1564c:	streq	r9, [sp, #36]	; 0x24
   15650:	bne	15830 <__assert_fail@plt+0x326c>
   15654:	ldrb	r4, [r5, #40]	; 0x28
   15658:	cmp	r4, #0
   1565c:	bne	15860 <__assert_fail@plt+0x329c>
   15660:	ldr	r3, [r5, #136]	; 0x88
   15664:	cmp	r3, #0
   15668:	ble	156d8 <__assert_fail@plt+0x3114>
   1566c:	mov	r4, #0
   15670:	add	r3, r5, #88	; 0x58
   15674:	str	r3, [sp, #28]
   15678:	add	r3, r5, #44	; 0x2c
   1567c:	str	r3, [sp, #32]
   15680:	mov	fp, r4
   15684:	ldr	r3, [r5, #132]	; 0x84
   15688:	ldr	r6, [r3, r4, lsl #2]
   1568c:	mov	r0, r6
   15690:	bl	122d0 <strlen@plt>
   15694:	str	r0, [sp, #24]
   15698:	mov	r0, r7
   1569c:	bl	122d0 <strlen@plt>
   156a0:	str	fp, [sp, #16]
   156a4:	str	r0, [sp, #12]
   156a8:	str	r7, [sp, #8]
   156ac:	str	r9, [sp, #4]
   156b0:	str	sl, [sp]
   156b4:	ldr	r3, [sp, #24]
   156b8:	mov	r2, r6
   156bc:	ldr	r1, [sp, #28]
   156c0:	ldr	r0, [sp, #32]
   156c4:	bl	20624 <__assert_fail@plt+0xe060>
   156c8:	add	r4, r4, #1
   156cc:	ldr	r3, [r5, #136]	; 0x88
   156d0:	cmp	r3, r4
   156d4:	bgt	15684 <__assert_fail@plt+0x30c0>
   156d8:	add	r1, r5, #88	; 0x58
   156dc:	add	r0, r5, #44	; 0x2c
   156e0:	bl	207e4 <__assert_fail@plt+0xe220>
   156e4:	ldr	r3, [r5, #148]	; 0x94
   156e8:	ubfx	r2, r3, #8, #8
   156ec:	and	r3, r3, #127	; 0x7f
   156f0:	orrs	r3, r2, r3
   156f4:	moveq	r4, #1
   156f8:	movne	r4, #0
   156fc:	cmp	r8, #0
   15700:	bne	158e8 <__assert_fail@plt+0x3324>
   15704:	ldr	r3, [sp, #36]	; 0x24
   15708:	cmp	r3, #0
   1570c:	beq	158c8 <__assert_fail@plt+0x3304>
   15710:	movw	r3, #20268	; 0x4f2c
   15714:	movt	r3, #4
   15718:	mov	r2, #208	; 0xd0
   1571c:	movw	r1, #20364	; 0x4f8c
   15720:	movt	r1, #4
   15724:	movw	r0, #20408	; 0x4fb8
   15728:	movt	r0, #4
   1572c:	bl	125c4 <__assert_fail@plt>
   15730:	ldr	r3, [r5, #116]	; 0x74
   15734:	cmp	r3, #0
   15738:	bne	15798 <__assert_fail@plt+0x31d4>
   1573c:	add	r6, r5, #40	; 0x28
   15740:	movw	r3, #48704	; 0xbe40
   15744:	movt	r3, #5
   15748:	ldr	r4, [r3, #12]
   1574c:	mov	r1, #47	; 0x2f
   15750:	mov	r0, r4
   15754:	bl	122dc <strchr@plt>
   15758:	cmp	r0, #0
   1575c:	beq	157cc <__assert_fail@plt+0x3208>
   15760:	mov	r0, r4
   15764:	bl	22f54 <__assert_fail@plt+0x10990>
   15768:	mov	r4, r0
   1576c:	movw	r3, #48704	; 0xbe40
   15770:	movt	r3, #5
   15774:	mov	r2, r0
   15778:	ldr	r1, [r3, #16]
   1577c:	mov	r0, r6
   15780:	bl	15588 <__assert_fail@plt+0x2fc4>
   15784:	mov	r6, r0
   15788:	mov	r0, r4
   1578c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   15790:	cmp	r6, #0
   15794:	beq	157f0 <__assert_fail@plt+0x322c>
   15798:	movw	r3, #48704	; 0xbe40
   1579c:	movt	r3, #5
   157a0:	ldr	r0, [r3, #12]
   157a4:	bl	22e58 <__assert_fail@plt+0x10894>
   157a8:	str	r0, [sp, #36]	; 0x24
   157ac:	mov	r7, r0
   157b0:	ldrb	r3, [r0]
   157b4:	cmp	r3, #47	; 0x2f
   157b8:	beq	15850 <__assert_fail@plt+0x328c>
   157bc:	mov	r9, #2
   157c0:	movw	sl, #20292	; 0x4f44
   157c4:	movt	sl, #4
   157c8:	b	15654 <__assert_fail@plt+0x3090>
   157cc:	movw	r3, #48704	; 0xbe40
   157d0:	movt	r3, #5
   157d4:	movw	r2, #29972	; 0x7514
   157d8:	movt	r2, #4
   157dc:	ldr	r1, [r3, #16]
   157e0:	mov	r0, r6
   157e4:	bl	15588 <__assert_fail@plt+0x2fc4>
   157e8:	mov	r6, r0
   157ec:	b	15790 <__assert_fail@plt+0x31cc>
   157f0:	bl	12318 <__errno_location@plt>
   157f4:	ldr	r4, [r0]
   157f8:	mov	r2, #5
   157fc:	movw	r1, #20296	; 0x4f48
   15800:	movt	r1, #4
   15804:	mov	r0, #0
   15808:	bl	12084 <dcgettext@plt>
   1580c:	mov	r5, r0
   15810:	mov	r1, r7
   15814:	mov	r0, #0
   15818:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1581c:	mov	r3, r0
   15820:	mov	r2, r5
   15824:	mov	r1, r4
   15828:	mov	r0, #1
   1582c:	bl	121bc <error@plt>
   15830:	movw	r3, #20268	; 0x4f2c
   15834:	movt	r3, #4
   15838:	mov	r2, #148	; 0x94
   1583c:	movw	r1, #20364	; 0x4f8c
   15840:	movt	r1, #4
   15844:	movw	r0, #20372	; 0x4f94
   15848:	movt	r0, #4
   1584c:	bl	125c4 <__assert_fail@plt>
   15850:	ldr	r7, [sp, #36]	; 0x24
   15854:	mov	r9, #0
   15858:	mov	sl, r9
   1585c:	b	15654 <__assert_fail@plt+0x3090>
   15860:	mov	r0, r7
   15864:	bl	122d0 <strlen@plt>
   15868:	mov	r3, #0
   1586c:	str	r3, [sp, #8]
   15870:	str	r9, [sp, #4]
   15874:	str	sl, [sp]
   15878:	add	r3, r0, #1
   1587c:	mov	r2, r7
   15880:	add	r1, r5, #88	; 0x58
   15884:	add	r0, r5, #44	; 0x2c
   15888:	bl	2034c <__assert_fail@plt+0xdd88>
   1588c:	ldr	r3, [r5, #116]	; 0x74
   15890:	cmp	r3, #0
   15894:	beq	158a8 <__assert_fail@plt+0x32e4>
   15898:	movw	r3, #48704	; 0xbe40
   1589c:	movt	r3, #5
   158a0:	mov	r2, #1
   158a4:	strb	r2, [r3, #32]
   158a8:	ldr	r3, [sp, #36]	; 0x24
   158ac:	cmp	r3, #0
   158b0:	beq	158c8 <__assert_fail@plt+0x3304>
   158b4:	cmp	r8, #0
   158b8:	beq	15710 <__assert_fail@plt+0x314c>
   158bc:	ldr	r0, [sp, #36]	; 0x24
   158c0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   158c4:	mov	r4, r8
   158c8:	mov	r0, r4
   158cc:	add	sp, sp, #44	; 0x2c
   158d0:	ldrd	r4, [sp]
   158d4:	ldrd	r6, [sp, #8]
   158d8:	ldrd	r8, [sp, #16]
   158dc:	ldrd	sl, [sp, #24]
   158e0:	add	sp, sp, #32
   158e4:	pop	{pc}		; (ldr pc, [sp], #4)
   158e8:	ldr	r0, [r5, #144]	; 0x90
   158ec:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   158f0:	ldr	r3, [sp, #36]	; 0x24
   158f4:	cmp	r3, #0
   158f8:	movne	r8, r4
   158fc:	bne	158bc <__assert_fail@plt+0x32f8>
   15900:	b	158c8 <__assert_fail@plt+0x3304>
   15904:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15908:	strd	r6, [sp, #8]
   1590c:	strd	r8, [sp, #16]
   15910:	str	sl, [sp, #24]
   15914:	str	lr, [sp, #28]
   15918:	sub	sp, sp, #24
   1591c:	mov	r5, r1
   15920:	mov	r7, r3
   15924:	movw	r3, #48748	; 0xbe6c
   15928:	movt	r3, #5
   1592c:	ldr	r3, [r3, #44]	; 0x2c
   15930:	tst	r3, #32
   15934:	bne	15a10 <__assert_fail@plt+0x344c>
   15938:	movw	r3, #46420	; 0xb554
   1593c:	movt	r3, #5
   15940:	ldr	r0, [r3]
   15944:	bl	2fb38 <__assert_fail@plt+0x1d574>
   15948:	movw	r3, #46408	; 0xb548
   1594c:	movt	r3, #5
   15950:	ldr	r0, [r3]
   15954:	bl	2fb38 <__assert_fail@plt+0x1d574>
   15958:	movw	r3, #45716	; 0xb294
   1595c:	movt	r3, #5
   15960:	ldr	r3, [r3]
   15964:	cmp	r3, #0
   15968:	bne	15aac <__assert_fail@plt+0x34e8>
   1596c:	bl	12420 <fork@plt>
   15970:	mov	r6, r0
   15974:	cmn	r0, #1
   15978:	beq	15ac8 <__assert_fail@plt+0x3504>
   1597c:	cmp	r0, #0
   15980:	addne	r9, r5, #108	; 0x6c
   15984:	movne	r8, #0
   15988:	bne	15c70 <__assert_fail@plt+0x36ac>
   1598c:	ldr	r4, [r5, #104]	; 0x68
   15990:	cmp	r4, #0
   15994:	beq	15af4 <__assert_fail@plt+0x3530>
   15998:	ldrb	r3, [r5, #100]	; 0x64
   1599c:	cmp	r3, #0
   159a0:	bne	15b10 <__assert_fail@plt+0x354c>
   159a4:	mov	r0, r4
   159a8:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   159ac:	cmp	r0, #0
   159b0:	bne	15b5c <__assert_fail@plt+0x3598>
   159b4:	bl	215c8 <__assert_fail@plt+0xf004>
   159b8:	cmp	r0, #0
   159bc:	bne	15c58 <__assert_fail@plt+0x3694>
   159c0:	mov	r0, r7
   159c4:	bl	20d14 <__assert_fail@plt+0xe750>
   159c8:	cmp	r0, #0
   159cc:	beq	15c60 <__assert_fail@plt+0x369c>
   159d0:	bl	12318 <__errno_location@plt>
   159d4:	mov	r3, #7
   159d8:	str	r3, [r0]
   159dc:	bl	12318 <__errno_location@plt>
   159e0:	ldr	r4, [r0]
   159e4:	ldr	r1, [r7]
   159e8:	mov	r0, #0
   159ec:	bl	192b8 <__assert_fail@plt+0x6cf4>
   159f0:	mov	r3, r0
   159f4:	movw	r2, #35960	; 0x8c78
   159f8:	movt	r2, #4
   159fc:	mov	r1, r4
   15a00:	mov	r0, #0
   15a04:	bl	121bc <error@plt>
   15a08:	mov	r0, #1
   15a0c:	bl	11ff4 <_exit@plt>
   15a10:	ldr	r2, [r1, #48]	; 0x30
   15a14:	movw	r0, #46408	; 0xb548
   15a18:	movt	r0, #5
   15a1c:	subs	r2, r2, #1
   15a20:	mov	r3, #0
   15a24:	sbc	r3, r3, #0
   15a28:	movw	r1, #20416	; 0x4fc0
   15a2c:	movt	r1, #4
   15a30:	ldr	r0, [r0]
   15a34:	bl	1230c <fprintf@plt>
   15a38:	ldr	r3, [r5, #48]	; 0x30
   15a3c:	cmp	r3, #1
   15a40:	beq	15a94 <__assert_fail@plt+0x34d0>
   15a44:	mov	r4, #0
   15a48:	movw	r8, #46408	; 0xb548
   15a4c:	movt	r8, #5
   15a50:	mov	r9, r4
   15a54:	movw	r6, #42464	; 0xa5e0
   15a58:	movt	r6, #4
   15a5c:	ldr	sl, [r8]
   15a60:	ldr	r3, [r5, #52]	; 0x34
   15a64:	ldr	r1, [r3, r4, lsl #2]
   15a68:	mov	r0, r9
   15a6c:	bl	192b8 <__assert_fail@plt+0x6cf4>
   15a70:	mov	r2, r0
   15a74:	mov	r1, r6
   15a78:	mov	r0, sl
   15a7c:	bl	1230c <fprintf@plt>
   15a80:	add	r4, r4, #1
   15a84:	ldr	r3, [r5, #48]	; 0x30
   15a88:	sub	r3, r3, #1
   15a8c:	cmp	r3, r4
   15a90:	bhi	15a5c <__assert_fail@plt+0x3498>
   15a94:	movw	r3, #46408	; 0xb548
   15a98:	movt	r3, #5
   15a9c:	ldr	r1, [r3]
   15aa0:	mov	r0, #10
   15aa4:	bl	1245c <fputc@plt>
   15aa8:	b	15938 <__assert_fail@plt+0x3374>
   15aac:	movw	r3, #45716	; 0xb294
   15ab0:	movt	r3, #5
   15ab4:	mov	r1, #0
   15ab8:	str	r1, [r3]
   15abc:	mov	r0, #17
   15ac0:	bl	12048 <signal@plt>
   15ac4:	b	1596c <__assert_fail@plt+0x33a8>
   15ac8:	bl	12318 <__errno_location@plt>
   15acc:	ldr	r4, [r0]
   15ad0:	mov	r2, #5
   15ad4:	movw	r1, #20460	; 0x4fec
   15ad8:	movt	r1, #4
   15adc:	mov	r0, #0
   15ae0:	bl	12084 <dcgettext@plt>
   15ae4:	mov	r2, r0
   15ae8:	mov	r1, r4
   15aec:	mov	r0, #1
   15af0:	bl	121bc <error@plt>
   15af4:	ldr	r3, [pc, #768]	; 15dfc <__assert_fail@plt+0x3838>
   15af8:	movw	r2, #321	; 0x141
   15afc:	movw	r1, #20364	; 0x4f8c
   15b00:	movt	r1, #4
   15b04:	movw	r0, #20472	; 0x4ff8
   15b08:	movt	r0, #4
   15b0c:	bl	125c4 <__assert_fail@plt>
   15b10:	movw	r1, #20676	; 0x50c4
   15b14:	movt	r1, #4
   15b18:	ldrd	r2, [r1]
   15b1c:	strd	r2, [sp, #12]
   15b20:	ldrh	r3, [r1, #8]
   15b24:	strh	r3, [sp, #20]
   15b28:	mov	r0, #0
   15b2c:	bl	1257c <close@plt>
   15b30:	cmp	r0, #0
   15b34:	blt	15bac <__assert_fail@plt+0x35e8>
   15b38:	mov	r1, #131072	; 0x20000
   15b3c:	add	r0, sp, #12
   15b40:	bl	2300c <__assert_fail@plt+0x10a48>
   15b44:	cmp	r0, #0
   15b48:	blt	15bec <__assert_fail@plt+0x3628>
   15b4c:	mov	r0, r4
   15b50:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   15b54:	cmp	r0, #0
   15b58:	beq	159b4 <__assert_fail@plt+0x33f0>
   15b5c:	bl	12318 <__errno_location@plt>
   15b60:	ldr	r5, [r0]
   15b64:	mov	r2, #5
   15b68:	movw	r1, #20528	; 0x5030
   15b6c:	movt	r1, #4
   15b70:	mov	r0, #0
   15b74:	bl	12084 <dcgettext@plt>
   15b78:	mov	r2, r0
   15b7c:	ldr	r3, [r4]
   15b80:	cmp	r3, #0
   15b84:	blt	15c1c <__assert_fail@plt+0x3658>
   15b88:	movw	r3, #25528	; 0x63b8
   15b8c:	movt	r3, #4
   15b90:	mov	r1, r3
   15b94:	str	r1, [sp]
   15b98:	mov	r1, r5
   15b9c:	mov	r0, #0
   15ba0:	bl	121bc <error@plt>
   15ba4:	mov	r0, #1
   15ba8:	bl	11ff4 <_exit@plt>
   15bac:	bl	12318 <__errno_location@plt>
   15bb0:	ldr	r5, [r0]
   15bb4:	mov	r2, #5
   15bb8:	movw	r1, #20500	; 0x5014
   15bbc:	movt	r1, #4
   15bc0:	mov	r0, #0
   15bc4:	bl	12084 <dcgettext@plt>
   15bc8:	mov	r2, r0
   15bcc:	mov	r1, r5
   15bd0:	mov	r0, #0
   15bd4:	bl	121bc <error@plt>
   15bd8:	mov	r0, r4
   15bdc:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   15be0:	cmp	r0, #0
   15be4:	beq	15ba4 <__assert_fail@plt+0x35e0>
   15be8:	b	15b5c <__assert_fail@plt+0x3598>
   15bec:	bl	12318 <__errno_location@plt>
   15bf0:	ldr	r5, [r0]
   15bf4:	add	r1, sp, #12
   15bf8:	mov	r0, #0
   15bfc:	bl	192b8 <__assert_fail@plt+0x6cf4>
   15c00:	mov	r3, r0
   15c04:	movw	r2, #35960	; 0x8c78
   15c08:	movt	r2, #4
   15c0c:	mov	r1, r5
   15c10:	mov	r0, #0
   15c14:	bl	121bc <error@plt>
   15c18:	b	15b4c <__assert_fail@plt+0x3588>
   15c1c:	ldr	r3, [r4, #4]
   15c20:	cmp	r3, #0
   15c24:	beq	15c38 <__assert_fail@plt+0x3674>
   15c28:	ldr	r1, [r4, #4]
   15c2c:	movw	r3, #29764	; 0x7444
   15c30:	movt	r3, #4
   15c34:	b	15b94 <__assert_fail@plt+0x35d0>
   15c38:	mov	r1, r3
   15c3c:	movwne	r3, #25528	; 0x63b8
   15c40:	movtne	r3, #4
   15c44:	bne	15b94 <__assert_fail@plt+0x35d0>
   15c48:	movw	r3, #25528	; 0x63b8
   15c4c:	movt	r3, #4
   15c50:	mov	r1, r3
   15c54:	b	15b94 <__assert_fail@plt+0x35d0>
   15c58:	bl	215f0 <__assert_fail@plt+0xf02c>
   15c5c:	b	159c0 <__assert_fail@plt+0x33fc>
   15c60:	mov	r1, r7
   15c64:	ldr	r0, [r7]
   15c68:	bl	1200c <execvp@plt>
   15c6c:	b	159dc <__assert_fail@plt+0x3418>
   15c70:	mov	r2, r8
   15c74:	mov	r1, r9
   15c78:	mov	r0, r6
   15c7c:	bl	1215c <waitpid@plt>
   15c80:	cmn	r0, #1
   15c84:	bne	15d00 <__assert_fail@plt+0x373c>
   15c88:	bl	12318 <__errno_location@plt>
   15c8c:	ldr	r4, [r0]
   15c90:	cmp	r4, #4
   15c94:	beq	15c70 <__assert_fail@plt+0x36ac>
   15c98:	mov	r2, #5
   15c9c:	movw	r1, #20560	; 0x5050
   15ca0:	movt	r1, #4
   15ca4:	mov	r0, #0
   15ca8:	bl	12084 <dcgettext@plt>
   15cac:	mov	r5, r0
   15cb0:	ldr	r1, [r7]
   15cb4:	mov	r0, #0
   15cb8:	bl	192b8 <__assert_fail@plt+0x6cf4>
   15cbc:	mov	r3, r0
   15cc0:	mov	r2, r5
   15cc4:	mov	r1, r4
   15cc8:	mov	r0, #0
   15ccc:	bl	121bc <error@plt>
   15cd0:	movw	r3, #48704	; 0xbe40
   15cd4:	movt	r3, #5
   15cd8:	mov	r2, #1
   15cdc:	str	r2, [r3, #28]
   15ce0:	mov	r0, #0
   15ce4:	add	sp, sp, #24
   15ce8:	ldrd	r4, [sp]
   15cec:	ldrd	r6, [sp, #8]
   15cf0:	ldrd	r8, [sp, #16]
   15cf4:	ldr	sl, [sp, #24]
   15cf8:	add	sp, sp, #28
   15cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15d00:	ldr	r2, [r5, #108]	; 0x6c
   15d04:	and	r3, r2, #127	; 0x7f
   15d08:	add	r3, r3, #1
   15d0c:	sbfx	r3, r3, #1, #7
   15d10:	sxtb	r3, r3
   15d14:	cmp	r3, #0
   15d18:	bgt	15d64 <__assert_fail@plt+0x37a0>
   15d1c:	ubfx	r4, r2, #8, #8
   15d20:	movw	r3, #48748	; 0xbe6c
   15d24:	movt	r3, #5
   15d28:	ldr	r3, [r3, #44]	; 0x2c
   15d2c:	tst	r3, #32
   15d30:	bne	15dd8 <__assert_fail@plt+0x3814>
   15d34:	cmp	r4, #0
   15d38:	moveq	r0, #1
   15d3c:	beq	15ce4 <__assert_fail@plt+0x3720>
   15d40:	ldrb	r3, [r5]
   15d44:	cmp	r3, #0
   15d48:	moveq	r0, #1
   15d4c:	beq	15ce4 <__assert_fail@plt+0x3720>
   15d50:	movw	r3, #48704	; 0xbe40
   15d54:	movt	r3, #5
   15d58:	mov	r0, #1
   15d5c:	str	r0, [r3, #28]
   15d60:	b	15ce4 <__assert_fail@plt+0x3720>
   15d64:	mov	r2, #5
   15d68:	movw	r1, #20584	; 0x5068
   15d6c:	movt	r1, #4
   15d70:	mov	r0, #0
   15d74:	bl	12084 <dcgettext@plt>
   15d78:	mov	r4, r0
   15d7c:	movw	r3, #48748	; 0xbe6c
   15d80:	movt	r3, #5
   15d84:	ldr	r2, [r7]
   15d88:	ldr	r1, [r3, #72]	; 0x48
   15d8c:	mov	r0, #0
   15d90:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   15d94:	ldr	r3, [r5, #108]	; 0x6c
   15d98:	and	r3, r3, #127	; 0x7f
   15d9c:	str	r3, [sp]
   15da0:	mov	r3, r0
   15da4:	mov	r2, r4
   15da8:	mov	r1, #0
   15dac:	mov	r0, r1
   15db0:	bl	121bc <error@plt>
   15db4:	ldrb	r3, [r5]
   15db8:	cmp	r3, #0
   15dbc:	moveq	r0, #1
   15dc0:	beq	15ce4 <__assert_fail@plt+0x3720>
   15dc4:	movw	r3, #48704	; 0xbe40
   15dc8:	movt	r3, #5
   15dcc:	mov	r0, #1
   15dd0:	str	r0, [r3, #28]
   15dd4:	b	15ce4 <__assert_fail@plt+0x3720>
   15dd8:	movw	r0, #46408	; 0xb548
   15ddc:	movt	r0, #5
   15de0:	mov	r3, r4
   15de4:	mov	r2, r6
   15de8:	movw	r1, #20612	; 0x5084
   15dec:	movt	r1, #4
   15df0:	ldr	r0, [r0]
   15df4:	bl	1230c <fprintf@plt>
   15df8:	b	15d34 <__assert_fail@plt+0x3770>
   15dfc:	andeq	r4, r4, ip, lsr pc
   15e00:	str	r4, [sp, #-8]!
   15e04:	str	lr, [sp, #4]
   15e08:	subs	r4, r0, #0
   15e0c:	moveq	r0, #0
   15e10:	beq	15e28 <__assert_fail@plt+0x3864>
   15e14:	ldrb	r3, [r4, #16]
   15e18:	cmp	r3, #0
   15e1c:	movne	r0, #1
   15e20:	beq	15e34 <__assert_fail@plt+0x3870>
   15e24:	and	r0, r0, #1
   15e28:	ldr	r4, [sp]
   15e2c:	add	sp, sp, #4
   15e30:	pop	{pc}		; (ldr pc, [sp], #4)
   15e34:	ldr	r0, [r4, #156]	; 0x9c
   15e38:	bl	15e00 <__assert_fail@plt+0x383c>
   15e3c:	cmp	r0, #0
   15e40:	movne	r0, #1
   15e44:	bne	15e24 <__assert_fail@plt+0x3860>
   15e48:	ldr	r0, [r4, #160]	; 0xa0
   15e4c:	bl	15e00 <__assert_fail@plt+0x383c>
   15e50:	b	15e24 <__assert_fail@plt+0x3860>
   15e54:	strd	r4, [sp, #-16]!
   15e58:	str	r6, [sp, #8]
   15e5c:	str	lr, [sp, #12]
   15e60:	subs	r5, r0, #0
   15e64:	moveq	r0, #0
   15e68:	beq	15e94 <__assert_fail@plt+0x38d0>
   15e6c:	ldr	r0, [r5, #156]	; 0x9c
   15e70:	bl	15e54 <__assert_fail@plt+0x3890>
   15e74:	mov	r4, r0
   15e78:	ldr	r0, [r5, #160]	; 0xa0
   15e7c:	bl	15e54 <__assert_fail@plt+0x3890>
   15e80:	cmp	r4, r0
   15e84:	movcs	r0, r4
   15e88:	ldr	r3, [r5, #24]
   15e8c:	cmp	r0, r3
   15e90:	movcc	r0, r3
   15e94:	ldrd	r4, [sp]
   15e98:	ldr	r6, [sp, #8]
   15e9c:	add	sp, sp, #12
   15ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea4:	str	r4, [sp, #-8]!
   15ea8:	str	lr, [sp, #4]
   15eac:	mov	r4, r0
   15eb0:	cmp	r1, #0
   15eb4:	beq	15ec4 <__assert_fail@plt+0x3900>
   15eb8:	ldr	r3, [r0, #8]
   15ebc:	cmp	r3, #3
   15ec0:	bne	15f04 <__assert_fail@plt+0x3940>
   15ec4:	ldr	r0, [r4, #156]	; 0x9c
   15ec8:	cmp	r0, #0
   15ecc:	beq	15ee4 <__assert_fail@plt+0x3920>
   15ed0:	ldr	r3, [r0, #8]
   15ed4:	cmp	r3, #3
   15ed8:	bne	15f24 <__assert_fail@plt+0x3960>
   15edc:	mov	r1, #0
   15ee0:	bl	15ea4 <__assert_fail@plt+0x38e0>
   15ee4:	ldr	r0, [r4, #160]	; 0xa0
   15ee8:	cmp	r0, #0
   15eec:	beq	15ef8 <__assert_fail@plt+0x3934>
   15ef0:	mov	r1, #0
   15ef4:	bl	15ea4 <__assert_fail@plt+0x38e0>
   15ef8:	ldr	r4, [sp]
   15efc:	add	sp, sp, #4
   15f00:	pop	{pc}		; (ldr pc, [sp], #4)
   15f04:	movw	r3, #20688	; 0x50d0
   15f08:	movt	r3, #4
   15f0c:	movw	r2, #1230	; 0x4ce
   15f10:	movw	r1, #20920	; 0x51b8
   15f14:	movt	r1, #4
   15f18:	movw	r0, #20928	; 0x51c0
   15f1c:	movt	r0, #4
   15f20:	bl	125c4 <__assert_fail@plt>
   15f24:	movw	r3, #20688	; 0x50d0
   15f28:	movt	r3, #4
   15f2c:	movw	r2, #1235	; 0x4d3
   15f30:	movw	r1, #20920	; 0x51b8
   15f34:	movt	r1, #4
   15f38:	movw	r0, #20948	; 0x51d4
   15f3c:	movt	r0, #4
   15f40:	bl	125c4 <__assert_fail@plt>
   15f44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f48:	strd	r6, [sp, #8]
   15f4c:	str	r8, [sp, #16]
   15f50:	str	lr, [sp, #20]
   15f54:	ldr	r4, [r0]
   15f58:	cmp	r4, #0
   15f5c:	beq	15f94 <__assert_fail@plt+0x39d0>
   15f60:	mov	r5, r0
   15f64:	mov	r6, r1
   15f68:	mov	r7, r2
   15f6c:	ldr	r3, [r4, #8]
   15f70:	cmp	r3, #5
   15f74:	ldrls	pc, [pc, r3, lsl #2]
   15f78:	b	1622c <__assert_fail@plt+0x3c68>
   15f7c:			; <UNDEFINED> instruction: 0x00015fb8
   15f80:	ldrdeq	r6, [r1], -r0
   15f84:	andeq	r6, r1, ip, lsl #2
   15f88:	ldrdeq	r5, [r1], -ip
   15f8c:	andeq	r6, r1, r8, lsr #2
   15f90:	andeq	r6, r1, r4
   15f94:	mov	r2, #5
   15f98:	movw	r1, #20980	; 0x51f4
   15f9c:	movt	r1, #4
   15fa0:	mov	r0, #0
   15fa4:	bl	12084 <dcgettext@plt>
   15fa8:	mov	r2, r0
   15fac:	mov	r1, #0
   15fb0:	mov	r0, #1
   15fb4:	bl	121bc <error@plt>
   15fb8:	mov	r2, #5
   15fbc:	movw	r1, #20980	; 0x51f4
   15fc0:	movt	r1, #4
   15fc4:	mov	r0, #0
   15fc8:	bl	12084 <dcgettext@plt>
   15fcc:	mov	r2, r0
   15fd0:	mov	r1, #0
   15fd4:	mov	r0, #1
   15fd8:	bl	121bc <error@plt>
   15fdc:	mov	r2, #5
   15fe0:	movw	r1, #21000	; 0x5208
   15fe4:	movt	r1, #4
   15fe8:	mov	r0, #0
   15fec:	bl	12084 <dcgettext@plt>
   15ff0:	ldr	r3, [r4, #4]
   15ff4:	mov	r2, r0
   15ff8:	mov	r1, #0
   15ffc:	mov	r0, #1
   16000:	bl	121bc <error@plt>
   16004:	cmp	r2, #0
   16008:	beq	1604c <__assert_fail@plt+0x3a88>
   1600c:	ldr	r3, [r2, #8]
   16010:	sub	r3, r3, #2
   16014:	cmp	r3, #1
   16018:	bls	16074 <__assert_fail@plt+0x3ab0>
   1601c:	ldrb	r3, [r4, #33]	; 0x21
   16020:	cmp	r3, #0
   16024:	bne	16080 <__assert_fail@plt+0x3abc>
   16028:	mov	r2, #5
   1602c:	movw	r1, #21240	; 0x52f8
   16030:	movt	r1, #4
   16034:	mov	r0, #0
   16038:	bl	12084 <dcgettext@plt>
   1603c:	mov	r2, r0
   16040:	mov	r1, #0
   16044:	mov	r0, #1
   16048:	bl	121bc <error@plt>
   1604c:	mov	r2, #5
   16050:	movw	r1, #21084	; 0x525c
   16054:	movt	r1, #4
   16058:	mov	r0, #0
   1605c:	bl	12084 <dcgettext@plt>
   16060:	ldr	r3, [r4, #4]
   16064:	mov	r2, r0
   16068:	mov	r1, #0
   1606c:	mov	r0, #1
   16070:	bl	121bc <error@plt>
   16074:	ldrb	r3, [r4, #33]	; 0x21
   16078:	cmp	r3, #0
   1607c:	beq	160a8 <__assert_fail@plt+0x3ae4>
   16080:	mov	r2, #5
   16084:	movw	r1, #21204	; 0x52d4
   16088:	movt	r1, #4
   1608c:	mov	r0, #0
   16090:	bl	12084 <dcgettext@plt>
   16094:	ldr	r3, [r7, #4]
   16098:	mov	r2, r0
   1609c:	mov	r1, #0
   160a0:	mov	r0, #1
   160a4:	bl	121bc <error@plt>
   160a8:	mov	r2, #5
   160ac:	movw	r1, #21160	; 0x52a8
   160b0:	movt	r1, #4
   160b4:	mov	r0, #0
   160b8:	bl	12084 <dcgettext@plt>
   160bc:	ldr	r3, [r7, #4]
   160c0:	mov	r2, r0
   160c4:	mov	r1, #0
   160c8:	mov	r0, #1
   160cc:	bl	121bc <error@plt>
   160d0:	ldr	r3, [r4, #152]	; 0x98
   160d4:	str	r3, [r0]
   160d8:	ldr	r2, [r5]
   160dc:	cmp	r2, #0
   160e0:	beq	160f4 <__assert_fail@plt+0x3b30>
   160e4:	mov	r7, r6
   160e8:	ldr	r3, [r2, #12]
   160ec:	cmp	r3, r6
   160f0:	bgt	16250 <__assert_fail@plt+0x3c8c>
   160f4:	mov	r0, r4
   160f8:	ldrd	r4, [sp]
   160fc:	ldrd	r6, [sp, #8]
   16100:	ldr	r8, [sp, #16]
   16104:	add	sp, sp, #20
   16108:	pop	{pc}		; (ldr pc, [sp], #4)
   1610c:	ldr	r3, [r4, #152]	; 0x98
   16110:	str	r3, [r0]
   16114:	mov	r2, r4
   16118:	mov	r1, #4
   1611c:	bl	15f44 <__assert_fail@plt+0x3980>
   16120:	str	r0, [r4, #160]	; 0xa0
   16124:	b	160d8 <__assert_fail@plt+0x3b14>
   16128:	ldr	r3, [r4, #152]	; 0x98
   1612c:	cmp	r3, #0
   16130:	beq	16188 <__assert_fail@plt+0x3bc4>
   16134:	ldrb	r2, [r3, #33]	; 0x21
   16138:	cmp	r2, #0
   1613c:	bne	16188 <__assert_fail@plt+0x3bc4>
   16140:	str	r3, [r0]
   16144:	ldr	r3, [r3, #8]
   16148:	cmp	r3, #5
   1614c:	bne	161d4 <__assert_fail@plt+0x3c10>
   16150:	ldrb	r3, [r4, #33]	; 0x21
   16154:	cmp	r3, #0
   16158:	beq	161b0 <__assert_fail@plt+0x3bec>
   1615c:	mov	r2, #5
   16160:	movw	r1, #21084	; 0x525c
   16164:	movt	r1, #4
   16168:	mov	r0, #0
   1616c:	bl	12084 <dcgettext@plt>
   16170:	ldr	r3, [r5]
   16174:	ldr	r3, [r3, #4]
   16178:	mov	r2, r0
   1617c:	mov	r1, #0
   16180:	mov	r0, #1
   16184:	bl	121bc <error@plt>
   16188:	mov	r2, #5
   1618c:	movw	r1, #21284	; 0x5324
   16190:	movt	r1, #4
   16194:	mov	r0, #0
   16198:	bl	12084 <dcgettext@plt>
   1619c:	ldr	r3, [r4, #4]
   161a0:	mov	r2, r0
   161a4:	mov	r1, #0
   161a8:	mov	r0, #1
   161ac:	bl	121bc <error@plt>
   161b0:	mov	r2, #5
   161b4:	movw	r1, #21396	; 0x5394
   161b8:	movt	r1, #4
   161bc:	mov	r0, #0
   161c0:	bl	12084 <dcgettext@plt>
   161c4:	mov	r2, r0
   161c8:	mov	r1, #0
   161cc:	mov	r0, #1
   161d0:	bl	121bc <error@plt>
   161d4:	mov	r2, r4
   161d8:	mov	r1, #0
   161dc:	bl	15f44 <__assert_fail@plt+0x3980>
   161e0:	mov	r4, r0
   161e4:	ldr	r3, [r5]
   161e8:	cmp	r3, #0
   161ec:	beq	16208 <__assert_fail@plt+0x3c44>
   161f0:	ldr	r2, [r3, #8]
   161f4:	cmp	r2, #5
   161f8:	bne	16208 <__assert_fail@plt+0x3c44>
   161fc:	ldr	r3, [r3, #152]	; 0x98
   16200:	str	r3, [r5]
   16204:	b	160d8 <__assert_fail@plt+0x3b14>
   16208:	mov	r2, #5
   1620c:	movw	r1, #21452	; 0x53cc
   16210:	movt	r1, #4
   16214:	mov	r0, #0
   16218:	bl	12084 <dcgettext@plt>
   1621c:	mov	r2, r0
   16220:	mov	r1, #0
   16224:	mov	r0, #1
   16228:	bl	121bc <error@plt>
   1622c:	mov	r2, #5
   16230:	movw	r1, #21536	; 0x5420
   16234:	movt	r1, #4
   16238:	mov	r0, #0
   1623c:	bl	12084 <dcgettext@plt>
   16240:	mov	r2, r0
   16244:	mov	r1, #0
   16248:	mov	r0, #1
   1624c:	bl	121bc <error@plt>
   16250:	ldr	r3, [r2, #8]
   16254:	cmp	r3, #5
   16258:	beq	16318 <__assert_fail@plt+0x3d54>
   1625c:	ldr	r3, [r2, #8]
   16260:	cmp	r3, #5
   16264:	ldrls	pc, [pc, r3, lsl #2]
   16268:	b	162e4 <__assert_fail@plt+0x3d20>
   1626c:	andeq	r6, r1, r4, lsl #5
   16270:	andeq	r6, r1, r4, lsl #5
   16274:	andeq	r6, r1, r4, lsl #5
   16278:	andeq	r6, r1, r8, lsr #5
   1627c:	andeq	r6, r1, r4, lsl #5
   16280:	andeq	r6, r1, r0, lsl r3
   16284:	mov	r2, #5
   16288:	movw	r1, #20980	; 0x51f4
   1628c:	movt	r1, #4
   16290:	mov	r0, #0
   16294:	bl	12084 <dcgettext@plt>
   16298:	mov	r2, r0
   1629c:	mov	r1, #0
   162a0:	mov	r0, #1
   162a4:	bl	121bc <error@plt>
   162a8:	str	r4, [r2, #156]	; 0x9c
   162ac:	ldr	r4, [r5]
   162b0:	ldr	r3, [r4, #152]	; 0x98
   162b4:	str	r3, [r5]
   162b8:	ldrsh	r1, [r4, #12]
   162bc:	mov	r0, r5
   162c0:	bl	15f44 <__assert_fail@plt+0x3980>
   162c4:	str	r0, [r4, #160]	; 0xa0
   162c8:	ldr	r2, [r5]
   162cc:	cmp	r2, #0
   162d0:	beq	160f4 <__assert_fail@plt+0x3b30>
   162d4:	ldr	r3, [r2, #12]
   162d8:	cmp	r7, r3
   162dc:	blt	1625c <__assert_fail@plt+0x3c98>
   162e0:	b	160f4 <__assert_fail@plt+0x3b30>
   162e4:	mov	r2, #5
   162e8:	movw	r1, #21572	; 0x5444
   162ec:	movt	r1, #4
   162f0:	mov	r0, #0
   162f4:	bl	12084 <dcgettext@plt>
   162f8:	ldr	r3, [r5]
   162fc:	ldr	r3, [r3, #8]
   16300:	mov	r2, r0
   16304:	mov	r1, #0
   16308:	mov	r0, #1
   1630c:	bl	121bc <error@plt>
   16310:	cmp	r4, #0
   16314:	bne	160f4 <__assert_fail@plt+0x3b30>
   16318:	mov	r2, #5
   1631c:	movw	r1, #20980	; 0x51f4
   16320:	movt	r1, #4
   16324:	mov	r0, #0
   16328:	bl	12084 <dcgettext@plt>
   1632c:	mov	r2, r0
   16330:	mov	r1, #0
   16334:	mov	r0, #1
   16338:	bl	121bc <error@plt>
   1633c:	push	{lr}		; (str lr, [sp, #-4]!)
   16340:	sub	sp, sp, #12
   16344:	ldr	r3, [r0]
   16348:	str	r3, [sp, #4]
   1634c:	ldr	r3, [r1]
   16350:	str	r3, [sp]
   16354:	mov	r2, #4
   16358:	mov	r1, sp
   1635c:	add	r0, sp, r2
   16360:	bl	12060 <memcmp@plt>
   16364:	add	sp, sp, #12
   16368:	pop	{pc}		; (ldr pc, [sp], #4)
   1636c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16370:	strd	r6, [sp, #8]
   16374:	strd	r8, [sp, #16]
   16378:	str	sl, [sp, #24]
   1637c:	str	lr, [sp, #28]
   16380:	sub	sp, sp, #8
   16384:	subs	r5, r0, #0
   16388:	beq	16408 <__assert_fail@plt+0x3e44>
   1638c:	ldr	r0, [r5, #160]	; 0xa0
   16390:	bl	1636c <__assert_fail@plt+0x3da8>
   16394:	ldr	r0, [r5, #156]	; 0x9c
   16398:	bl	1636c <__assert_fail@plt+0x3da8>
   1639c:	ldrb	r3, [r5, #18]
   163a0:	cmp	r3, #0
   163a4:	movne	r8, #3
   163a8:	bne	163cc <__assert_fail@plt+0x3e08>
   163ac:	ldrb	r3, [r5, #20]
   163b0:	cmp	r3, #0
   163b4:	movne	r8, #1
   163b8:	bne	163cc <__assert_fail@plt+0x3e08>
   163bc:	ldrb	r3, [r5, #19]
   163c0:	cmp	r3, #0
   163c4:	movne	r8, #2
   163c8:	moveq	r8, #0
   163cc:	ldr	r1, [r5]
   163d0:	movw	r2, #16804	; 0x41a4
   163d4:	movt	r2, #1
   163d8:	movw	r3, #16828	; 0x41bc
   163dc:	movt	r3, #1
   163e0:	cmp	r1, r3
   163e4:	cmpne	r1, r2
   163e8:	bne	16424 <__assert_fail@plt+0x3e60>
   163ec:	ldrb	r3, [r5, #40]	; 0x28
   163f0:	cmp	r3, #0
   163f4:	movne	r3, #7
   163f8:	moveq	r3, #8
   163fc:	cmp	r8, r3
   16400:	movcc	r8, r3
   16404:	str	r8, [r5, #24]
   16408:	add	sp, sp, #8
   1640c:	ldrd	r4, [sp]
   16410:	ldrd	r6, [sp, #8]
   16414:	ldrd	r8, [sp, #16]
   16418:	ldr	sl, [sp, #24]
   1641c:	add	sp, sp, #28
   16420:	pop	{pc}		; (ldr pc, [sp], #4)
   16424:	movw	r3, #45040	; 0xaff0
   16428:	movt	r3, #1
   1642c:	cmp	r1, r3
   16430:	beq	16464 <__assert_fail@plt+0x3ea0>
   16434:	movw	r3, #46448	; 0xb570
   16438:	movt	r3, #5
   1643c:	ldr	r3, [r3]
   16440:	cmp	r3, #0
   16444:	beq	1646c <__assert_fail@plt+0x3ea8>
   16448:	ldr	r3, [r5]
   1644c:	str	r3, [sp]
   16450:	mov	r7, #59	; 0x3b
   16454:	mov	r6, #0
   16458:	movw	sl, #45720	; 0xb298
   1645c:	movt	sl, #5
   16460:	b	16508 <__assert_fail@plt+0x3f44>
   16464:	ldr	r3, [r5, #24]
   16468:	b	163fc <__assert_fail@plt+0x3e38>
   1646c:	movw	r7, #45720	; 0xb298
   16470:	movt	r7, #5
   16474:	movw	r3, #25404	; 0x633c
   16478:	movt	r3, #1
   1647c:	mov	r2, #8
   16480:	mov	r1, #59	; 0x3b
   16484:	mov	r0, r7
   16488:	bl	124e0 <qsort@plt>
   1648c:	mov	r6, r7
   16490:	add	r7, r7, #464	; 0x1d0
   16494:	add	r4, r6, #8
   16498:	mov	r1, r6
   1649c:	mov	r0, r4
   164a0:	bl	1633c <__assert_fail@plt+0x3d78>
   164a4:	cmp	r0, #0
   164a8:	blt	16578 <__assert_fail@plt+0x3fb4>
   164ac:	mov	r1, r4
   164b0:	mov	r0, r6
   164b4:	bl	1633c <__assert_fail@plt+0x3d78>
   164b8:	cmp	r0, #0
   164bc:	bgt	164e0 <__assert_fail@plt+0x3f1c>
   164c0:	mov	r6, r4
   164c4:	cmp	r4, r7
   164c8:	bne	16494 <__assert_fail@plt+0x3ed0>
   164cc:	movw	r3, #46448	; 0xb570
   164d0:	movt	r3, #5
   164d4:	mov	r2, #1
   164d8:	str	r2, [r3]
   164dc:	b	16448 <__assert_fail@plt+0x3e84>
   164e0:	ldr	r3, [pc, #164]	; 1658c <__assert_fail@plt+0x3fc8>
   164e4:	movw	r2, #1013	; 0x3f5
   164e8:	movw	r1, #20920	; 0x51b8
   164ec:	movt	r1, #4
   164f0:	movw	r0, #21612	; 0x546c
   164f4:	movt	r0, #4
   164f8:	bl	125c4 <__assert_fail@plt>
   164fc:	cmp	r4, r6
   16500:	bls	16538 <__assert_fail@plt+0x3f74>
   16504:	mov	r7, r4
   16508:	add	r4, r6, r7
   1650c:	lsr	r4, r4, #1
   16510:	add	r9, sl, r4, lsl #3
   16514:	mov	r1, r9
   16518:	mov	r0, sp
   1651c:	bl	1633c <__assert_fail@plt+0x3d78>
   16520:	cmp	r0, #0
   16524:	blt	164fc <__assert_fail@plt+0x3f38>
   16528:	ble	16568 <__assert_fail@plt+0x3fa4>
   1652c:	add	r6, r4, #1
   16530:	cmp	r6, r7
   16534:	bcc	16508 <__assert_fail@plt+0x3f44>
   16538:	mov	r2, #5
   1653c:	movw	r1, #21624	; 0x5478
   16540:	movt	r1, #4
   16544:	mov	r0, #0
   16548:	bl	12084 <dcgettext@plt>
   1654c:	ldr	r3, [r5, #4]
   16550:	mov	r2, r0
   16554:	mov	r1, #0
   16558:	mov	r0, r1
   1655c:	bl	121bc <error@plt>
   16560:	mov	r3, #10
   16564:	b	163fc <__assert_fail@plt+0x3e38>
   16568:	cmp	r9, #0
   1656c:	beq	16538 <__assert_fail@plt+0x3f74>
   16570:	ldr	r3, [r9, #4]
   16574:	b	163fc <__assert_fail@plt+0x3e38>
   16578:	movw	r2, #21736	; 0x54e8
   1657c:	movt	r2, #4
   16580:	mov	r1, #0
   16584:	mov	r0, #1
   16588:	bl	121bc <error@plt>
   1658c:	andeq	r5, r4, r4, ror #1
   16590:	strd	r4, [sp, #-16]!
   16594:	str	r6, [sp, #8]
   16598:	str	lr, [sp, #12]
   1659c:	mov	r5, r0
   165a0:	mov	r4, r1
   165a4:	mov	r6, r2
   165a8:	mov	r0, #176	; 0xb0
   165ac:	bl	2e6a8 <__assert_fail@plt+0x1c0e4>
   165b0:	mov	r3, #3
   165b4:	str	r3, [r0, #8]
   165b8:	str	r4, [r0, #12]
   165bc:	mov	r3, #0
   165c0:	str	r3, [r0, #24]
   165c4:	cmp	r4, #2
   165c8:	beq	16618 <__assert_fail@plt+0x4054>
   165cc:	cmp	r4, #3
   165d0:	beq	16664 <__assert_fail@plt+0x40a0>
   165d4:	cmp	r4, #1
   165d8:	beq	165f4 <__assert_fail@plt+0x4030>
   165dc:	str	r5, [r0, #160]	; 0xa0
   165e0:	str	r0, [r6]
   165e4:	ldrd	r4, [sp]
   165e8:	ldr	r6, [sp, #8]
   165ec:	add	sp, sp, #12
   165f0:	pop	{pc}		; (ldr pc, [sp], #4)
   165f4:	movw	r3, #15752	; 0x3d88
   165f8:	movt	r3, #1
   165fc:	str	r3, [r0]
   16600:	movw	r3, #21772	; 0x550c
   16604:	movt	r3, #4
   16608:	str	r3, [r0, #4]
   1660c:	mov	r3, #1065353216	; 0x3f800000
   16610:	str	r3, [r0, #28]
   16614:	b	165dc <__assert_fail@plt+0x4018>
   16618:	movw	r3, #14696	; 0x3968
   1661c:	movt	r3, #1
   16620:	str	r3, [r0]
   16624:	movw	r3, #21776	; 0x5510
   16628:	movt	r3, #4
   1662c:	str	r3, [r0, #4]
   16630:	vldr	s15, [r5, #28]
   16634:	vldr	s14, [pc, #116]	; 166b0 <__assert_fail@plt+0x40ec>
   16638:	vcmpe.f32	s15, s14
   1663c:	vmrs	APSR_nzcv, fpscr
   16640:	bgt	1665c <__assert_fail@plt+0x4098>
   16644:	vcmp.f32	s15, #0.0
   16648:	vmrs	APSR_nzcv, fpscr
   1664c:	vldr	s14, [pc, #96]	; 166b4 <__assert_fail@plt+0x40f0>
   16650:	vmovmi.f32	s15, s14
   16654:	vstr	s15, [r0, #28]
   16658:	b	165dc <__assert_fail@plt+0x4018>
   1665c:	vldr	s15, [pc, #76]	; 166b0 <__assert_fail@plt+0x40ec>
   16660:	b	16654 <__assert_fail@plt+0x4090>
   16664:	movw	r3, #14616	; 0x3918
   16668:	movt	r3, #1
   1666c:	str	r3, [r0]
   16670:	movw	r3, #21780	; 0x5514
   16674:	movt	r3, #4
   16678:	str	r3, [r0, #4]
   1667c:	vldr	s15, [r5, #28]
   16680:	vldr	s14, [pc, #40]	; 166b0 <__assert_fail@plt+0x40ec>
   16684:	vcmpe.f32	s15, s14
   16688:	vmrs	APSR_nzcv, fpscr
   1668c:	bgt	166a8 <__assert_fail@plt+0x40e4>
   16690:	vcmp.f32	s15, #0.0
   16694:	vmrs	APSR_nzcv, fpscr
   16698:	vldr	s14, [pc, #20]	; 166b4 <__assert_fail@plt+0x40f0>
   1669c:	vmovmi.f32	s15, s14
   166a0:	vstr	s15, [r0, #28]
   166a4:	b	165dc <__assert_fail@plt+0x4018>
   166a8:	vldr	s15, [pc]	; 166b0 <__assert_fail@plt+0x40ec>
   166ac:	b	166a0 <__assert_fail@plt+0x40dc>
   166b0:	svccc	0x00800000
   166b4:	andeq	r0, r0, r0
   166b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166bc:	strd	r6, [sp, #8]
   166c0:	str	r8, [sp, #16]
   166c4:	str	lr, [sp, #20]
   166c8:	mov	r6, r0
   166cc:	cmp	r1, #0
   166d0:	moveq	r7, #0
   166d4:	movne	r7, #16
   166d8:	movw	r3, #46448	; 0xb570
   166dc:	movt	r3, #5
   166e0:	ldr	r3, [r3, #4]
   166e4:	cmp	r3, #0
   166e8:	beq	1672c <__assert_fail@plt+0x4168>
   166ec:	mov	r4, #0
   166f0:	movw	r5, #46448	; 0xb570
   166f4:	movt	r5, #5
   166f8:	ldr	r3, [r5, #8]
   166fc:	mov	r2, r7
   16700:	ldr	r1, [r3, r4, lsl #2]
   16704:	mov	r0, r6
   16708:	bl	121e0 <fnmatch@plt>
   1670c:	cmp	r0, #0
   16710:	beq	16748 <__assert_fail@plt+0x4184>
   16714:	add	r4, r4, #1
   16718:	ldr	r3, [r5, #4]
   1671c:	cmp	r3, r4
   16720:	bhi	166f8 <__assert_fail@plt+0x4134>
   16724:	mov	r0, #0
   16728:	b	1674c <__assert_fail@plt+0x4188>
   1672c:	mov	r2, r7
   16730:	movw	r1, #29972	; 0x7514
   16734:	movt	r1, #4
   16738:	bl	121e0 <fnmatch@plt>
   1673c:	clz	r0, r0
   16740:	lsr	r0, r0, #5
   16744:	b	1674c <__assert_fail@plt+0x4188>
   16748:	mov	r0, #1
   1674c:	ldrd	r4, [sp]
   16750:	ldrd	r6, [sp, #8]
   16754:	ldr	r8, [sp, #16]
   16758:	add	sp, sp, #20
   1675c:	pop	{pc}		; (ldr pc, [sp], #4)
   16760:	str	r4, [sp, #-8]!
   16764:	str	lr, [sp, #4]
   16768:	mov	r2, r1
   1676c:	ldr	r3, [r1, #36]	; 0x24
   16770:	cmp	r3, #0
   16774:	beq	16794 <__assert_fail@plt+0x41d0>
   16778:	ldr	r2, [r1, #4]
   1677c:	movw	r1, #21784	; 0x5518
   16780:	movt	r1, #4
   16784:	bl	1230c <fprintf@plt>
   16788:	ldr	r4, [sp]
   1678c:	add	sp, sp, #4
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	mov	r1, r0
   16798:	ldr	r0, [r2, #4]
   1679c:	bl	12558 <fputs@plt>
   167a0:	b	16788 <__assert_fail@plt+0x41c4>
   167a4:	movw	r3, #46448	; 0xb570
   167a8:	movt	r3, #5
   167ac:	ldr	r0, [r3, #12]
   167b0:	bx	lr
   167b4:	str	r4, [sp, #-8]!
   167b8:	str	lr, [sp, #4]
   167bc:	subs	r4, r0, #0
   167c0:	beq	1681c <__assert_fail@plt+0x4258>
   167c4:	ldr	r0, [r4, #160]	; 0xa0
   167c8:	cmp	r0, #0
   167cc:	beq	167d4 <__assert_fail@plt+0x4210>
   167d0:	bl	167b4 <__assert_fail@plt+0x41f0>
   167d4:	ldr	r0, [r4, #156]	; 0x9c
   167d8:	cmp	r0, #0
   167dc:	beq	167e4 <__assert_fail@plt+0x4220>
   167e0:	bl	167b4 <__assert_fail@plt+0x41f0>
   167e4:	ldr	r3, [r4, #8]
   167e8:	cmp	r3, #5
   167ec:	beq	16838 <__assert_fail@plt+0x4274>
   167f0:	cmp	r3, #4
   167f4:	beq	16854 <__assert_fail@plt+0x4290>
   167f8:	cmp	r3, #5
   167fc:	ldrls	pc, [pc, r3, lsl #2]
   16800:	b	16a78 <__assert_fail@plt+0x44b4>
   16804:	andeq	r6, r1, r0, ror r8
   16808:	andeq	r6, r1, r8, asr #17
   1680c:	andeq	r6, r1, r0, lsr #18
   16810:	muleq	r1, r0, r9
   16814:	andeq	r6, r1, r4, ror #20
   16818:	andeq	r6, r1, r4, ror #20
   1681c:	ldr	r3, [pc, #632]	; 16a9c <__assert_fail@plt+0x44d8>
   16820:	movw	r2, #1156	; 0x484
   16824:	movw	r1, #20920	; 0x51b8
   16828:	movt	r1, #4
   1682c:	movw	r0, #21792	; 0x5520
   16830:	movt	r0, #4
   16834:	bl	125c4 <__assert_fail@plt>
   16838:	ldr	r3, [pc, #604]	; 16a9c <__assert_fail@plt+0x44d8>
   1683c:	movw	r2, #1163	; 0x48b
   16840:	movw	r1, #20920	; 0x51b8
   16844:	movt	r1, #4
   16848:	movw	r0, #21804	; 0x552c
   1684c:	movt	r0, #4
   16850:	bl	125c4 <__assert_fail@plt>
   16854:	ldr	r3, [pc, #576]	; 16a9c <__assert_fail@plt+0x44d8>
   16858:	movw	r2, #1164	; 0x48c
   1685c:	movw	r1, #20920	; 0x51b8
   16860:	movt	r1, #4
   16864:	movw	r0, #21832	; 0x5548
   16868:	movt	r0, #4
   1686c:	bl	125c4 <__assert_fail@plt>
   16870:	ldr	r3, [r4, #160]	; 0xa0
   16874:	cmp	r3, #0
   16878:	bne	16890 <__assert_fail@plt+0x42cc>
   1687c:	ldr	r3, [r4, #156]	; 0x9c
   16880:	cmp	r3, #0
   16884:	bne	168ac <__assert_fail@plt+0x42e8>
   16888:	vldr	s0, [r4, #28]
   1688c:	b	16a6c <__assert_fail@plt+0x44a8>
   16890:	ldr	r3, [pc, #516]	; 16a9c <__assert_fail@plt+0x44d8>
   16894:	movw	r2, #1169	; 0x491
   16898:	movw	r1, #20920	; 0x51b8
   1689c:	movt	r1, #4
   168a0:	movw	r0, #21856	; 0x5560
   168a4:	movt	r0, #4
   168a8:	bl	125c4 <__assert_fail@plt>
   168ac:	ldr	r3, [pc, #488]	; 16a9c <__assert_fail@plt+0x44d8>
   168b0:	movw	r2, #1170	; 0x492
   168b4:	movw	r1, #20920	; 0x51b8
   168b8:	movt	r1, #4
   168bc:	movw	r0, #21880	; 0x5578
   168c0:	movt	r0, #4
   168c4:	bl	125c4 <__assert_fail@plt>
   168c8:	ldr	r3, [r4, #160]	; 0xa0
   168cc:	cmp	r3, #0
   168d0:	bne	168e8 <__assert_fail@plt+0x4324>
   168d4:	ldr	r3, [r4, #156]	; 0x9c
   168d8:	cmp	r3, #0
   168dc:	bne	16904 <__assert_fail@plt+0x4340>
   168e0:	vldr	s0, [r4, #28]
   168e4:	b	16a6c <__assert_fail@plt+0x44a8>
   168e8:	ldr	r3, [pc, #428]	; 16a9c <__assert_fail@plt+0x44d8>
   168ec:	movw	r2, #1174	; 0x496
   168f0:	movw	r1, #20920	; 0x51b8
   168f4:	movt	r1, #4
   168f8:	movw	r0, #21856	; 0x5560
   168fc:	movt	r0, #4
   16900:	bl	125c4 <__assert_fail@plt>
   16904:	ldr	r3, [pc, #400]	; 16a9c <__assert_fail@plt+0x44d8>
   16908:	movw	r2, #1175	; 0x497
   1690c:	movw	r1, #20920	; 0x51b8
   16910:	movt	r1, #4
   16914:	movw	r0, #21880	; 0x5578
   16918:	movt	r0, #4
   1691c:	bl	125c4 <__assert_fail@plt>
   16920:	movw	r3, #17892	; 0x45e4
   16924:	movt	r3, #1
   16928:	ldr	r2, [r4]
   1692c:	cmp	r2, r3
   16930:	bne	16958 <__assert_fail@plt+0x4394>
   16934:	ldr	r3, [r4, #156]	; 0x9c
   16938:	cmp	r3, #0
   1693c:	bne	16974 <__assert_fail@plt+0x43b0>
   16940:	ldr	r3, [r4, #160]	; 0xa0
   16944:	vldr	s15, [r3, #28]
   16948:	vldr	s0, [pc, #324]	; 16a94 <__assert_fail@plt+0x44d0>
   1694c:	vsub.f32	s0, s0, s15
   16950:	vstr	s0, [r4, #28]
   16954:	b	16a6c <__assert_fail@plt+0x44a8>
   16958:	ldr	r3, [pc, #316]	; 16a9c <__assert_fail@plt+0x44d8>
   1695c:	movw	r2, #1180	; 0x49c
   16960:	movw	r1, #20920	; 0x51b8
   16964:	movt	r1, #4
   16968:	movw	r0, #21904	; 0x5590
   1696c:	movt	r0, #4
   16970:	bl	125c4 <__assert_fail@plt>
   16974:	ldr	r3, [pc, #288]	; 16a9c <__assert_fail@plt+0x44d8>
   16978:	movw	r2, #1181	; 0x49d
   1697c:	movw	r1, #20920	; 0x51b8
   16980:	movt	r1, #4
   16984:	movw	r0, #21880	; 0x5578
   16988:	movt	r0, #4
   1698c:	bl	125c4 <__assert_fail@plt>
   16990:	ldr	r2, [r4]
   16994:	movw	r3, #14616	; 0x3918
   16998:	movt	r3, #1
   1699c:	cmp	r2, r3
   169a0:	beq	16a04 <__assert_fail@plt+0x4440>
   169a4:	movw	r3, #15752	; 0x3d88
   169a8:	movt	r3, #1
   169ac:	cmp	r2, r3
   169b0:	beq	16a5c <__assert_fail@plt+0x4498>
   169b4:	movw	r3, #14696	; 0x3968
   169b8:	movt	r3, #1
   169bc:	cmp	r2, r3
   169c0:	bne	16a2c <__assert_fail@plt+0x4468>
   169c4:	ldr	r3, [r4, #160]	; 0xa0
   169c8:	cmp	r3, #0
   169cc:	vldrne	s15, [r3, #28]
   169d0:	vldreq	s15, [pc, #188]	; 16a94 <__assert_fail@plt+0x44d0>
   169d4:	ldr	r3, [r4, #156]	; 0x9c
   169d8:	cmp	r3, #0
   169dc:	vldrne	s0, [r3, #28]
   169e0:	vldreq	s0, [pc, #172]	; 16a94 <__assert_fail@plt+0x44d0>
   169e4:	vadd.f32	s0, s0, s15
   169e8:	vldr	s15, [pc, #164]	; 16a94 <__assert_fail@plt+0x44d0>
   169ec:	vcmpe.f32	s0, s15
   169f0:	vmrs	APSR_nzcv, fpscr
   169f4:	ble	16a48 <__assert_fail@plt+0x4484>
   169f8:	vldr	s0, [pc, #148]	; 16a94 <__assert_fail@plt+0x44d0>
   169fc:	vstr	s0, [r4, #28]
   16a00:	b	16a6c <__assert_fail@plt+0x44a8>
   16a04:	ldr	r3, [r4, #160]	; 0xa0
   16a08:	cmp	r3, #0
   16a0c:	vldrne	s15, [r3, #28]
   16a10:	vldreq	s15, [pc, #124]	; 16a94 <__assert_fail@plt+0x44d0>
   16a14:	ldr	r3, [r4, #156]	; 0x9c
   16a18:	cmp	r3, #0
   16a1c:	vldrne	s0, [r3, #28]
   16a20:	vldreq	s0, [pc, #108]	; 16a94 <__assert_fail@plt+0x44d0>
   16a24:	vmul.f32	s0, s0, s15
   16a28:	b	169e8 <__assert_fail@plt+0x4424>
   16a2c:	ldr	r3, [pc, #104]	; 16a9c <__assert_fail@plt+0x44d8>
   16a30:	movw	r2, #1204	; 0x4b4
   16a34:	movw	r1, #20920	; 0x51b8
   16a38:	movt	r1, #4
   16a3c:	movw	r0, #36300	; 0x8dcc
   16a40:	movt	r0, #4
   16a44:	bl	125c4 <__assert_fail@plt>
   16a48:	vcmp.f32	s0, #0.0
   16a4c:	vmrs	APSR_nzcv, fpscr
   16a50:	vldr	s15, [pc, #64]	; 16a98 <__assert_fail@plt+0x44d4>
   16a54:	vmovmi.f32	s0, s15
   16a58:	b	169fc <__assert_fail@plt+0x4438>
   16a5c:	vldr	s0, [pc, #48]	; 16a94 <__assert_fail@plt+0x44d0>
   16a60:	b	169fc <__assert_fail@plt+0x4438>
   16a64:	vldr	s0, [pc, #40]	; 16a94 <__assert_fail@plt+0x44d0>
   16a68:	vstr	s0, [r4, #28]
   16a6c:	ldr	r4, [sp]
   16a70:	add	sp, sp, #4
   16a74:	pop	{pc}		; (ldr pc, [sp], #4)
   16a78:	ldr	r3, [pc, #28]	; 16a9c <__assert_fail@plt+0x44d8>
   16a7c:	mov	r2, #1216	; 0x4c0
   16a80:	movw	r1, #20920	; 0x51b8
   16a84:	movt	r1, #4
   16a88:	movw	r0, #36300	; 0x8dcc
   16a8c:	movt	r0, #4
   16a90:	bl	125c4 <__assert_fail@plt>
   16a94:	svccc	0x00800000
   16a98:	andeq	r0, r0, r0
   16a9c:	strdeq	r5, [r4], -r4
   16aa0:	str	r4, [sp, #-8]!
   16aa4:	str	lr, [sp, #4]
   16aa8:	ldr	r3, [r0]
   16aac:	cmp	r3, #0
   16ab0:	beq	16b58 <__assert_fail@plt+0x4594>
   16ab4:	mov	r4, r0
   16ab8:	cmp	r3, #2
   16abc:	beq	16b74 <__assert_fail@plt+0x45b0>
   16ac0:	mov	r0, #176	; 0xb0
   16ac4:	bl	2e6a8 <__assert_fail@plt+0x1c0e4>
   16ac8:	movw	r3, #46448	; 0xb570
   16acc:	movt	r3, #5
   16ad0:	ldr	r3, [r3, #16]
   16ad4:	cmp	r3, #0
   16ad8:	movw	r3, #46448	; 0xb570
   16adc:	movt	r3, #5
   16ae0:	streq	r0, [r3, #16]
   16ae4:	ldrne	r2, [r3, #20]
   16ae8:	strne	r0, [r2, #152]	; 0x98
   16aec:	str	r0, [r3, #20]
   16af0:	movw	r3, #46448	; 0xb570
   16af4:	movt	r3, #5
   16af8:	ldr	r0, [r3, #20]
   16afc:	str	r4, [r0, #172]	; 0xac
   16b00:	mov	r3, #0
   16b04:	str	r3, [r0, #8]
   16b08:	str	r3, [r0, #12]
   16b0c:	mov	r2, #1
   16b10:	strb	r2, [r0, #18]
   16b14:	strb	r2, [r0, #19]
   16b18:	mov	r2, #10
   16b1c:	str	r2, [r0, #24]
   16b20:	movw	r2, #22000	; 0x55f0
   16b24:	movt	r2, #4
   16b28:	str	r2, [r0, #36]	; 0x24
   16b2c:	movw	r2, #48748	; 0xbe6c
   16b30:	movt	r2, #5
   16b34:	ldrb	r2, [r2, #15]
   16b38:	strb	r2, [r0, #32]
   16b3c:	mov	r2, #1065353216	; 0x3f800000
   16b40:	str	r2, [r0, #28]
   16b44:	str	r3, [r0, #168]	; 0xa8
   16b48:	str	r3, [r0, #164]	; 0xa4
   16b4c:	ldr	r4, [sp]
   16b50:	add	sp, sp, #4
   16b54:	pop	{pc}		; (ldr pc, [sp], #4)
   16b58:	ldr	r3, [pc, #48]	; 16b90 <__assert_fail@plt+0x45cc>
   16b5c:	movw	r2, #1485	; 0x5cd
   16b60:	movw	r1, #20920	; 0x51b8
   16b64:	movt	r1, #4
   16b68:	movw	r0, #21932	; 0x55ac
   16b6c:	movt	r0, #4
   16b70:	bl	125c4 <__assert_fail@plt>
   16b74:	ldr	r3, [pc, #20]	; 16b90 <__assert_fail@plt+0x45cc>
   16b78:	movw	r2, #1486	; 0x5ce
   16b7c:	movw	r1, #20920	; 0x51b8
   16b80:	movt	r1, #4
   16b84:	movw	r0, #21960	; 0x55c8
   16b88:	movt	r0, #4
   16b8c:	bl	125c4 <__assert_fail@plt>
   16b90:	andeq	r5, r4, ip, lsl #2
   16b94:	str	r4, [sp, #-8]!
   16b98:	str	lr, [sp, #4]
   16b9c:	bl	16aa0 <__assert_fail@plt+0x44dc>
   16ba0:	cmp	r0, #0
   16ba4:	movne	r3, #0
   16ba8:	strne	r3, [r0, #36]	; 0x24
   16bac:	ldr	r4, [sp]
   16bb0:	add	sp, sp, #4
   16bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bb8:	strd	r4, [sp, #-16]!
   16bbc:	str	r6, [sp, #8]
   16bc0:	str	lr, [sp, #12]
   16bc4:	mov	r4, r0
   16bc8:	mov	r5, r1
   16bcc:	movw	r3, #46448	; 0xb570
   16bd0:	movt	r3, #5
   16bd4:	ldr	r0, [r3, #24]
   16bd8:	cmp	r0, #0
   16bdc:	beq	16c30 <__assert_fail@plt+0x466c>
   16be0:	movw	r3, #46448	; 0xb570
   16be4:	movt	r3, #5
   16be8:	ldr	r3, [r3, #20]
   16bec:	cmp	r3, #0
   16bf0:	beq	16c10 <__assert_fail@plt+0x464c>
   16bf4:	ldr	r3, [r3, #8]
   16bf8:	cmp	r3, #1
   16bfc:	beq	16c90 <__assert_fail@plt+0x46cc>
   16c00:	cmp	r3, #0
   16c04:	beq	16c6c <__assert_fail@plt+0x46a8>
   16c08:	cmp	r3, #5
   16c0c:	beq	16c90 <__assert_fail@plt+0x46cc>
   16c10:	mov	r0, r4
   16c14:	bl	16aa0 <__assert_fail@plt+0x44dc>
   16c18:	str	r5, [r0, #36]	; 0x24
   16c1c:	str	r4, [r0, #172]	; 0xac
   16c20:	ldrd	r4, [sp]
   16c24:	ldr	r6, [sp, #8]
   16c28:	add	sp, sp, #12
   16c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c30:	movw	r0, #22032	; 0x5610
   16c34:	movt	r0, #4
   16c38:	bl	1ff8c <__assert_fail@plt+0xd9c8>
   16c3c:	movw	r3, #46448	; 0xb570
   16c40:	movt	r3, #5
   16c44:	str	r0, [r3, #24]
   16c48:	cmp	r0, #0
   16c4c:	bne	16be0 <__assert_fail@plt+0x461c>
   16c50:	ldr	r3, [pc, #132]	; 16cdc <__assert_fail@plt+0x4718>
   16c54:	movw	r2, #1528	; 0x5f8
   16c58:	movw	r1, #20920	; 0x51b8
   16c5c:	movt	r1, #4
   16c60:	movw	r0, #22036	; 0x5614
   16c64:	movt	r0, #4
   16c68:	bl	125c4 <__assert_fail@plt>
   16c6c:	mov	r2, #5
   16c70:	movw	r1, #22056	; 0x5628
   16c74:	movt	r1, #4
   16c78:	mov	r0, #0
   16c7c:	bl	12084 <dcgettext@plt>
   16c80:	mov	r2, r0
   16c84:	mov	r1, #0
   16c88:	mov	r0, #1
   16c8c:	bl	121bc <error@plt>
   16c90:	bl	16b94 <__assert_fail@plt+0x45d0>
   16c94:	movw	r3, #14616	; 0x3918
   16c98:	movt	r3, #1
   16c9c:	str	r3, [r0]
   16ca0:	movw	r3, #21780	; 0x5514
   16ca4:	movt	r3, #4
   16ca8:	str	r3, [r0, #4]
   16cac:	mov	r3, #3
   16cb0:	str	r3, [r0, #8]
   16cb4:	str	r3, [r0, #12]
   16cb8:	mov	r3, #0
   16cbc:	strb	r3, [r0, #18]
   16cc0:	strb	r3, [r0, #19]
   16cc4:	strb	r3, [r0, #20]
   16cc8:	str	r3, [r0, #36]	; 0x24
   16ccc:	str	r3, [r0, #40]	; 0x28
   16cd0:	strb	r3, [r0, #16]
   16cd4:	strb	r3, [r0, #17]
   16cd8:	b	16c10 <__assert_fail@plt+0x464c>
   16cdc:	andeq	r5, r4, ip, lsl r1
   16ce0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16ce4:	strd	r6, [sp, #8]
   16ce8:	strd	r8, [sp, #16]
   16cec:	str	sl, [sp, #24]
   16cf0:	str	lr, [sp, #28]
   16cf4:	sub	sp, sp, #16
   16cf8:	subs	r7, r1, #0
   16cfc:	beq	17038 <__assert_fail@plt+0x4a74>
   16d00:	mov	r5, r2
   16d04:	mov	r4, r0
   16d08:	cmp	r2, #0
   16d0c:	ble	16d44 <__assert_fail@plt+0x4780>
   16d10:	mov	r6, #0
   16d14:	movw	r8, #22112	; 0x5660
   16d18:	movt	r8, #4
   16d1c:	mov	sl, #4
   16d20:	mov	r9, #1
   16d24:	mov	r3, r4
   16d28:	mov	r2, sl
   16d2c:	mov	r1, r9
   16d30:	mov	r0, r8
   16d34:	bl	12138 <fwrite@plt>
   16d38:	add	r6, r6, #1
   16d3c:	cmp	r5, r6
   16d40:	bne	16d24 <__assert_fail@plt+0x4760>
   16d44:	mov	r3, r4
   16d48:	mov	r2, #6
   16d4c:	mov	r1, #1
   16d50:	movw	r0, #22120	; 0x5668
   16d54:	movt	r0, #4
   16d58:	bl	12138 <fwrite@plt>
   16d5c:	mov	r1, r7
   16d60:	mov	r0, r4
   16d64:	bl	16760 <__assert_fail@plt+0x419c>
   16d68:	ldrsh	r0, [r7, #8]
   16d6c:	cmp	r0, #0
   16d70:	beq	16ec4 <__assert_fail@plt+0x4900>
   16d74:	ldr	r1, [pc, #860]	; 170d8 <__assert_fail@plt+0x4b14>
   16d78:	mov	r2, #0
   16d7c:	add	r2, r2, #1
   16d80:	ldrsh	r3, [r1, #8]!
   16d84:	cmn	r3, #1
   16d88:	cmpne	r0, r3
   16d8c:	bne	16d7c <__assert_fail@plt+0x47b8>
   16d90:	movw	r3, #20688	; 0x50d0
   16d94:	movt	r3, #4
   16d98:	add	r2, r3, r2, lsl #3
   16d9c:	ldr	r2, [r2, #100]	; 0x64
   16da0:	ldrsh	ip, [r7, #12]
   16da4:	cmp	ip, #0
   16da8:	beq	16ecc <__assert_fail@plt+0x4908>
   16dac:	add	r0, r3, #152	; 0x98
   16db0:	mov	r1, #0
   16db4:	add	r1, r1, #1
   16db8:	ldrsh	r3, [r0, #8]!
   16dbc:	cmn	r3, #1
   16dc0:	cmpne	ip, r3
   16dc4:	bne	16db4 <__assert_fail@plt+0x47f0>
   16dc8:	movw	r3, #20688	; 0x50d0
   16dcc:	movt	r3, #4
   16dd0:	add	r1, r3, r1, lsl #3
   16dd4:	ldr	r3, [r1, #156]	; 0x9c
   16dd8:	movw	r1, #22128	; 0x5670
   16ddc:	movt	r1, #4
   16de0:	mov	r0, r4
   16de4:	bl	1230c <fprintf@plt>
   16de8:	ldr	r1, [r7, #24]
   16dec:	movw	r3, #45720	; 0xb298
   16df0:	movt	r3, #5
   16df4:	ldr	r3, [r3, #472]	; 0x1d8
   16df8:	cmp	r1, r3
   16dfc:	beq	16ed4 <__assert_fail@plt+0x4910>
   16e00:	mov	r3, #1
   16e04:	ldr	r0, [pc, #720]	; 170dc <__assert_fail@plt+0x4b18>
   16e08:	ldr	r2, [r0, r3, lsl #3]
   16e0c:	cmp	r1, r2
   16e10:	beq	16ed8 <__assert_fail@plt+0x4914>
   16e14:	add	r3, r3, #1
   16e18:	cmp	r3, #11
   16e1c:	bne	16e08 <__assert_fail@plt+0x4844>
   16e20:	movw	r2, #22100	; 0x5654
   16e24:	movt	r2, #4
   16e28:	vldr	s14, [r7, #28]
   16e2c:	vcvt.f64.f32	d7, s14
   16e30:	ldrb	r0, [r7, #16]
   16e34:	movw	r3, #25528	; 0x63b8
   16e38:	movt	r3, #4
   16e3c:	movw	r1, #22108	; 0x565c
   16e40:	movt	r1, #4
   16e44:	cmp	r0, #0
   16e48:	moveq	r3, r1
   16e4c:	str	r3, [sp, #8]
   16e50:	vstr	d7, [sp]
   16e54:	movw	r1, #22148	; 0x5684
   16e58:	movt	r1, #4
   16e5c:	mov	r0, r4
   16e60:	bl	1230c <fprintf@plt>
   16e64:	ldrh	r3, [r7, #18]
   16e68:	cmp	r3, #0
   16e6c:	bne	16e7c <__assert_fail@plt+0x48b8>
   16e70:	ldrb	r3, [r7, #20]
   16e74:	cmp	r3, #0
   16e78:	beq	16f4c <__assert_fail@plt+0x4988>
   16e7c:	mov	r3, r4
   16e80:	mov	r2, #6
   16e84:	mov	r1, #1
   16e88:	movw	r0, #22196	; 0x56b4
   16e8c:	movt	r0, #4
   16e90:	bl	12138 <fwrite@plt>
   16e94:	ldrb	r3, [r7, #18]
   16e98:	cmp	r3, #0
   16e9c:	bne	16eec <__assert_fail@plt+0x4928>
   16ea0:	ldrb	r3, [r7, #20]
   16ea4:	cmp	r3, #0
   16ea8:	bne	17054 <__assert_fail@plt+0x4a90>
   16eac:	ldrb	r3, [r7, #19]
   16eb0:	cmp	r3, #0
   16eb4:	movwne	r2, #25528	; 0x63b8
   16eb8:	movtne	r2, #4
   16ebc:	bne	16f3c <__assert_fail@plt+0x4978>
   16ec0:	b	16f4c <__assert_fail@plt+0x4988>
   16ec4:	mov	r2, #0
   16ec8:	b	16d90 <__assert_fail@plt+0x47cc>
   16ecc:	mov	r1, #0
   16ed0:	b	16dc8 <__assert_fail@plt+0x4804>
   16ed4:	mov	r3, #0
   16ed8:	movw	r2, #45720	; 0xb298
   16edc:	movt	r2, #5
   16ee0:	add	r3, r2, r3, lsl #3
   16ee4:	ldr	r2, [r3, #476]	; 0x1dc
   16ee8:	b	16e28 <__assert_fail@plt+0x4864>
   16eec:	mov	r3, r4
   16ef0:	mov	r2, #4
   16ef4:	mov	r1, #1
   16ef8:	movw	r0, #18544	; 0x4870
   16efc:	movt	r0, #4
   16f00:	bl	12138 <fwrite@plt>
   16f04:	ldrb	r3, [r7, #20]
   16f08:	cmp	r3, #0
   16f0c:	beq	170c0 <__assert_fail@plt+0x4afc>
   16f10:	movw	r2, #21772	; 0x550c
   16f14:	movt	r2, #4
   16f18:	movw	r1, #22204	; 0x56bc
   16f1c:	movt	r1, #4
   16f20:	mov	r0, r4
   16f24:	bl	1230c <fprintf@plt>
   16f28:	ldrb	r3, [r7, #19]
   16f2c:	cmp	r3, #0
   16f30:	movwne	r2, #21772	; 0x550c
   16f34:	movtne	r2, #4
   16f38:	beq	16f4c <__assert_fail@plt+0x4988>
   16f3c:	movw	r1, #22212	; 0x56c4
   16f40:	movt	r1, #4
   16f44:	mov	r0, r4
   16f48:	bl	1230c <fprintf@plt>
   16f4c:	mov	r1, r4
   16f50:	mov	r0, #10
   16f54:	bl	1245c <fputc@plt>
   16f58:	cmp	r5, #0
   16f5c:	ble	16f94 <__assert_fail@plt+0x49d0>
   16f60:	mov	r6, #0
   16f64:	movw	r8, #22112	; 0x5660
   16f68:	movt	r8, #4
   16f6c:	mov	sl, #4
   16f70:	mov	r9, #1
   16f74:	mov	r3, r4
   16f78:	mov	r2, sl
   16f7c:	mov	r1, r9
   16f80:	mov	r0, r8
   16f84:	bl	12138 <fwrite@plt>
   16f88:	add	r6, r6, #1
   16f8c:	cmp	r5, r6
   16f90:	bne	16f74 <__assert_fail@plt+0x49b0>
   16f94:	ldr	r3, [r7, #156]	; 0x9c
   16f98:	cmp	r3, #0
   16f9c:	beq	17060 <__assert_fail@plt+0x4a9c>
   16fa0:	mov	r3, r4
   16fa4:	mov	r2, #6
   16fa8:	mov	r1, #1
   16fac:	movw	r0, #22236	; 0x56dc
   16fb0:	movt	r0, #4
   16fb4:	bl	12138 <fwrite@plt>
   16fb8:	add	r2, r5, #1
   16fbc:	ldr	r1, [r7, #156]	; 0x9c
   16fc0:	mov	r0, r4
   16fc4:	bl	16ce0 <__assert_fail@plt+0x471c>
   16fc8:	cmp	r5, #0
   16fcc:	ble	17004 <__assert_fail@plt+0x4a40>
   16fd0:	mov	r6, #0
   16fd4:	movw	r8, #22112	; 0x5660
   16fd8:	movt	r8, #4
   16fdc:	mov	sl, #4
   16fe0:	mov	r9, #1
   16fe4:	mov	r3, r4
   16fe8:	mov	r2, sl
   16fec:	mov	r1, r9
   16ff0:	mov	r0, r8
   16ff4:	bl	12138 <fwrite@plt>
   16ff8:	add	r6, r6, #1
   16ffc:	cmp	r5, r6
   17000:	bne	16fe4 <__assert_fail@plt+0x4a20>
   17004:	ldr	r3, [r7, #160]	; 0xa0
   17008:	cmp	r3, #0
   1700c:	beq	170a4 <__assert_fail@plt+0x4ae0>
   17010:	mov	r3, r4
   17014:	mov	r2, #7
   17018:	mov	r1, #1
   1701c:	movw	r0, #22256	; 0x56f0
   17020:	movt	r0, #4
   17024:	bl	12138 <fwrite@plt>
   17028:	add	r2, r5, #1
   1702c:	ldr	r1, [r7, #160]	; 0xa0
   17030:	mov	r0, r4
   17034:	bl	16ce0 <__assert_fail@plt+0x471c>
   17038:	add	sp, sp, #16
   1703c:	ldrd	r4, [sp]
   17040:	ldrd	r6, [sp, #8]
   17044:	ldrd	r8, [sp, #16]
   17048:	ldr	sl, [sp, #24]
   1704c:	add	sp, sp, #28
   17050:	pop	{pc}		; (ldr pc, [sp], #4)
   17054:	movw	r2, #25528	; 0x63b8
   17058:	movt	r2, #4
   1705c:	b	16f18 <__assert_fail@plt+0x4954>
   17060:	ldr	r3, [r7, #160]	; 0xa0
   17064:	cmp	r3, #0
   17068:	beq	17088 <__assert_fail@plt+0x4ac4>
   1706c:	mov	r3, r4
   17070:	mov	r2, #9
   17074:	mov	r1, #1
   17078:	movw	r0, #22244	; 0x56e4
   1707c:	movt	r0, #4
   17080:	bl	12138 <fwrite@plt>
   17084:	b	16fc8 <__assert_fail@plt+0x4a04>
   17088:	mov	r3, r4
   1708c:	mov	r2, #13
   17090:	mov	r1, #1
   17094:	movw	r0, #22220	; 0x56cc
   17098:	movt	r0, #4
   1709c:	bl	12138 <fwrite@plt>
   170a0:	b	17038 <__assert_fail@plt+0x4a74>
   170a4:	mov	r3, r4
   170a8:	mov	r2, #10
   170ac:	mov	r1, #1
   170b0:	movw	r0, #22264	; 0x56f8
   170b4:	movt	r0, #4
   170b8:	bl	12138 <fwrite@plt>
   170bc:	b	17038 <__assert_fail@plt+0x4a74>
   170c0:	ldrb	r3, [r7, #19]
   170c4:	cmp	r3, #0
   170c8:	beq	16f4c <__assert_fail@plt+0x4988>
   170cc:	movw	r2, #21772	; 0x550c
   170d0:	movt	r2, #4
   170d4:	b	16f3c <__assert_fail@plt+0x4978>
   170d8:	andeq	r5, r4, r0, lsr r1
   170dc:	andeq	fp, r5, r0, ror r4
   170e0:	ldr	r3, [r0]
   170e4:	cmp	r3, #0
   170e8:	bxeq	lr
   170ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   170f0:	strd	r6, [sp, #8]
   170f4:	str	r8, [sp, #16]
   170f8:	str	lr, [sp, #20]
   170fc:	mov	r7, r1
   17100:	mov	r4, r0
   17104:	movw	r3, #48748	; 0xbe6c
   17108:	movt	r3, #5
   1710c:	ldr	r3, [r3, #44]	; 0x2c
   17110:	tst	r3, #8
   17114:	bne	17130 <__assert_fail@plt+0x4b6c>
   17118:	ldr	r0, [r4]
   1711c:	bl	167b4 <__assert_fail@plt+0x41f0>
   17120:	mov	r6, #0
   17124:	mov	r5, r6
   17128:	mov	r8, r6
   1712c:	b	171d8 <__assert_fail@plt+0x4c14>
   17130:	movw	r5, #46408	; 0xb548
   17134:	movt	r5, #5
   17138:	movw	r2, #22276	; 0x5704
   1713c:	movt	r2, #4
   17140:	movw	r1, #22304	; 0x5720
   17144:	movt	r1, #4
   17148:	ldr	r0, [r5]
   1714c:	bl	1230c <fprintf@plt>
   17150:	mov	r2, #2
   17154:	ldr	r1, [r4]
   17158:	ldr	r0, [r5]
   1715c:	bl	16ce0 <__assert_fail@plt+0x471c>
   17160:	b	17118 <__assert_fail@plt+0x4b54>
   17164:	vcmpe.f32	s14, s15
   17168:	vmrs	APSR_nzcv, fpscr
   1716c:	bmi	171c4 <__assert_fail@plt+0x4c00>
   17170:	ldr	r3, [r3, #156]	; 0x9c
   17174:	cmp	r3, #0
   17178:	beq	17284 <__assert_fail@plt+0x4cc0>
   1717c:	ldr	ip, [r3, #160]	; 0xa0
   17180:	ldr	r2, [ip, #24]
   17184:	cmp	r2, lr
   17188:	bne	171bc <__assert_fail@plt+0x4bf8>
   1718c:	ldr	r2, [r3, #12]
   17190:	vldr	s14, [ip, #28]
   17194:	vldr	s15, [r0, #28]
   17198:	vcmp.f32	s14, s15
   1719c:	vmrs	APSR_nzcv, fpscr
   171a0:	beq	171c4 <__assert_fail@plt+0x4c00>
   171a4:	cmp	r2, #2
   171a8:	beq	17164 <__assert_fail@plt+0x4ba0>
   171ac:	vcmpe.f32	s14, s15
   171b0:	vmrs	APSR_nzcv, fpscr
   171b4:	bmi	17170 <__assert_fail@plt+0x4bac>
   171b8:	b	171c4 <__assert_fail@plt+0x4c00>
   171bc:	cmp	r2, lr
   171c0:	bcc	17170 <__assert_fail@plt+0x4bac>
   171c4:	ldr	r2, [r3, #156]	; 0x9c
   171c8:	str	r2, [r1, #156]	; 0x9c
   171cc:	cmp	r2, #0
   171d0:	moveq	r6, r1
   171d4:	str	r1, [r3, #156]	; 0x9c
   171d8:	ldr	r1, [r4]
   171dc:	cmp	r1, #0
   171e0:	beq	17208 <__assert_fail@plt+0x4c44>
   171e4:	ldr	r3, [r1, #156]	; 0x9c
   171e8:	str	r3, [r4]
   171ec:	str	r8, [r1, #156]	; 0x9c
   171f0:	cmp	r5, #0
   171f4:	beq	17284 <__assert_fail@plt+0x4cc0>
   171f8:	ldr	r0, [r1, #160]	; 0xa0
   171fc:	ldr	lr, [r0, #24]
   17200:	mov	r3, r5
   17204:	b	1717c <__assert_fail@plt+0x4bb8>
   17208:	movw	r3, #48748	; 0xbe6c
   1720c:	movt	r3, #5
   17210:	ldr	r3, [r3, #44]	; 0x2c
   17214:	tst	r3, #8
   17218:	bne	17250 <__assert_fail@plt+0x4c8c>
   1721c:	mov	r0, r5
   17220:	bl	167b4 <__assert_fail@plt+0x41f0>
   17224:	ldr	r3, [r7]
   17228:	str	r3, [r6, #156]	; 0x9c
   1722c:	str	r5, [r7]
   17230:	mov	r3, #0
   17234:	str	r3, [r4, #4]
   17238:	str	r3, [r4]
   1723c:	ldrd	r4, [sp]
   17240:	ldrd	r6, [sp, #8]
   17244:	ldr	r8, [sp, #16]
   17248:	add	sp, sp, #20
   1724c:	pop	{pc}		; (ldr pc, [sp], #4)
   17250:	movw	r8, #46408	; 0xb548
   17254:	movt	r8, #5
   17258:	movw	r2, #22312	; 0x5728
   1725c:	movt	r2, #4
   17260:	movw	r1, #22304	; 0x5720
   17264:	movt	r1, #4
   17268:	ldr	r0, [r8]
   1726c:	bl	1230c <fprintf@plt>
   17270:	mov	r2, #2
   17274:	mov	r1, r5
   17278:	ldr	r0, [r8]
   1727c:	bl	16ce0 <__assert_fail@plt+0x471c>
   17280:	b	1721c <__assert_fail@plt+0x4c58>
   17284:	str	r5, [r1, #156]	; 0x9c
   17288:	cmp	r6, #0
   1728c:	moveq	r6, r1
   17290:	moveq	r5, r1
   17294:	movne	r5, r1
   17298:	b	171d8 <__assert_fail@plt+0x4c14>
   1729c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   172a0:	strd	r6, [sp, #8]
   172a4:	str	r8, [sp, #16]
   172a8:	str	lr, [sp, #20]
   172ac:	mov	r5, r0
   172b0:	mov	r7, r1
   172b4:	mov	r8, r3
   172b8:	ldr	r6, [sp, #24]
   172bc:	movw	r4, #46448	; 0xb570
   172c0:	movt	r4, #5
   172c4:	movw	r3, #28896	; 0x70e0
   172c8:	movt	r3, #1
   172cc:	str	r3, [r4, #28]
   172d0:	mov	r1, r6
   172d4:	mov	r0, r2
   172d8:	bl	170e0 <__assert_fail@plt+0x4b1c>
   172dc:	ldr	r3, [r4, #28]
   172e0:	mov	r1, r6
   172e4:	mov	r0, r8
   172e8:	blx	r3
   172ec:	cmp	r7, #0
   172f0:	ble	17320 <__assert_fail@plt+0x4d5c>
   172f4:	mov	r4, r5
   172f8:	add	r5, r5, r7, lsl #3
   172fc:	movw	r7, #46448	; 0xb570
   17300:	movt	r7, #5
   17304:	ldr	r3, [r7, #28]
   17308:	mov	r1, r6
   1730c:	mov	r0, r4
   17310:	blx	r3
   17314:	add	r4, r4, #8
   17318:	cmp	r4, r5
   1731c:	bne	17304 <__assert_fail@plt+0x4d40>
   17320:	ldrd	r4, [sp]
   17324:	ldrd	r6, [sp, #8]
   17328:	ldr	r8, [sp, #16]
   1732c:	add	sp, sp, #20
   17330:	pop	{pc}		; (ldr pc, [sp], #4)
   17334:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17338:	strd	r6, [sp, #8]
   1733c:	strd	r8, [sp, #16]
   17340:	strd	sl, [sp, #24]
   17344:	str	lr, [sp, #32]
   17348:	sub	sp, sp, #116	; 0x74
   1734c:	mov	r3, #0
   17350:	str	r3, [sp, #104]	; 0x68
   17354:	str	r3, [sp, #108]	; 0x6c
   17358:	str	r3, [sp, #96]	; 0x60
   1735c:	str	r3, [sp, #100]	; 0x64
   17360:	subs	r6, r0, #0
   17364:	beq	17810 <__assert_fail@plt+0x524c>
   17368:	ldr	ip, [r6]
   1736c:	cmp	ip, r3
   17370:	beq	17818 <__assert_fail@plt+0x5254>
   17374:	add	r3, sp, #8
   17378:	add	r1, sp, #96	; 0x60
   1737c:	mov	r2, #0
   17380:	str	r2, [r3, #4]
   17384:	str	r2, [r3], #8
   17388:	cmp	r3, r1
   1738c:	bne	17380 <__assert_fail@plt+0x4dbc>
   17390:	ldr	r0, [ip, #156]	; 0x9c
   17394:	cmp	r0, #0
   17398:	beq	17448 <__assert_fail@plt+0x4e84>
   1739c:	mov	r2, ip
   173a0:	b	173ac <__assert_fail@plt+0x4de8>
   173a4:	mov	r2, r0
   173a8:	mov	r0, r3
   173ac:	ldr	r1, [r2, #12]
   173b0:	ldr	r3, [r0, #156]	; 0x9c
   173b4:	cmp	r3, #0
   173b8:	bne	173a4 <__assert_fail@plt+0x4de0>
   173bc:	add	r2, r2, #156	; 0x9c
   173c0:	ldr	r3, [r0, #8]
   173c4:	cmp	r3, #3
   173c8:	bne	17458 <__assert_fail@plt+0x4e94>
   173cc:	movw	r3, #48748	; 0xbe6c
   173d0:	movt	r3, #5
   173d4:	ldr	r3, [r3, #44]	; 0x2c
   173d8:	tst	r3, #9
   173dc:	beq	1741c <__assert_fail@plt+0x4e58>
   173e0:	movw	r4, #46408	; 0xb548
   173e4:	movt	r4, #5
   173e8:	ldr	r3, [r4]
   173ec:	mov	r2, #22
   173f0:	mov	r1, #1
   173f4:	movw	r0, #22340	; 0x5744
   173f8:	movt	r0, #4
   173fc:	bl	12138 <fwrite@plt>
   17400:	mov	r2, #0
   17404:	ldr	r1, [r6]
   17408:	ldr	r0, [r4]
   1740c:	bl	16ce0 <__assert_fail@plt+0x471c>
   17410:	ldr	ip, [r6]
   17414:	cmp	ip, #0
   17418:	beq	177d4 <__assert_fail@plt+0x5210>
   1741c:	ldr	r3, [ip, #8]
   17420:	cmp	r3, #3
   17424:	movne	r7, #0
   17428:	beq	17474 <__assert_fail@plt+0x4eb0>
   1742c:	mov	r8, #0
   17430:	movw	r9, #17812	; 0x4594
   17434:	movt	r9, #1
   17438:	movw	sl, #45720	; 0xb298
   1743c:	movt	sl, #5
   17440:	add	fp, sl, #472	; 0x1d8
   17444:	b	17744 <__assert_fail@plt+0x5180>
   17448:	mov	r2, r6
   1744c:	mov	r0, ip
   17450:	mov	r1, #3
   17454:	b	173c0 <__assert_fail@plt+0x4dfc>
   17458:	bl	16590 <__assert_fail@plt+0x3fcc>
   1745c:	movw	r3, #48748	; 0xbe6c
   17460:	movt	r3, #5
   17464:	ldr	r3, [r3, #44]	; 0x2c
   17468:	tst	r3, #9
   1746c:	beq	17410 <__assert_fail@plt+0x4e4c>
   17470:	b	173e0 <__assert_fail@plt+0x4e1c>
   17474:	ldr	r7, [ip, #12]
   17478:	b	1742c <__assert_fail@plt+0x4e68>
   1747c:	ldr	r3, [r4, #12]
   17480:	cmp	r3, r7
   17484:	beq	1775c <__assert_fail@plt+0x5198>
   17488:	mov	r2, r6
   1748c:	mov	r1, r7
   17490:	mov	r0, r4
   17494:	bl	16590 <__assert_fail@plt+0x3fcc>
   17498:	mov	r4, r0
   1749c:	b	1775c <__assert_fail@plt+0x5198>
   174a0:	cmp	r7, #1
   174a4:	beq	17730 <__assert_fail@plt+0x516c>
   174a8:	ldrb	r3, [r5, #16]
   174ac:	cmp	r3, #0
   174b0:	bne	177b4 <__assert_fail@plt+0x51f0>
   174b4:	ldr	r1, [r5]
   174b8:	movw	r3, #18592	; 0x48a0
   174bc:	movt	r3, #1
   174c0:	cmp	r1, r3
   174c4:	cmpne	r1, r9
   174c8:	moveq	r3, #1
   174cc:	movne	r3, #0
   174d0:	movw	r2, #17296	; 0x4390
   174d4:	movt	r2, #1
   174d8:	cmp	r1, r2
   174dc:	orreq	r3, r3, #1
   174e0:	movw	r2, #17496	; 0x4458
   174e4:	movt	r2, #1
   174e8:	cmp	r1, r2
   174ec:	orreq	r3, r3, #1
   174f0:	cmp	r3, #0
   174f4:	beq	17530 <__assert_fail@plt+0x4f6c>
   174f8:	movw	r3, #48748	; 0xbe6c
   174fc:	movt	r3, #5
   17500:	ldr	r3, [r3, #44]	; 0x2c
   17504:	tst	r3, #8
   17508:	bne	17624 <__assert_fail@plt+0x5060>
   1750c:	ldr	r3, [r4, #156]	; 0x9c
   17510:	str	r3, [r6]
   17514:	ldr	r3, [sp, #96]	; 0x60
   17518:	str	r3, [r4, #156]	; 0x9c
   1751c:	str	r4, [sp, #96]	; 0x60
   17520:	ldr	r3, [sp, #100]	; 0x64
   17524:	cmp	r3, #0
   17528:	streq	r4, [sp, #100]	; 0x64
   1752c:	b	17744 <__assert_fail@plt+0x5180>
   17530:	movw	r3, #48748	; 0xbe6c
   17534:	movt	r3, #5
   17538:	ldrh	r2, [r3, #68]	; 0x44
   1753c:	movw	r3, #14616	; 0x3918
   17540:	movt	r3, #1
   17544:	movw	r0, #17892	; 0x45e4
   17548:	movt	r0, #1
   1754c:	cmp	r1, r0
   17550:	cmpne	r1, r3
   17554:	moveq	r3, #1
   17558:	movne	r3, #0
   1755c:	cmp	r2, #0
   17560:	moveq	r3, #1
   17564:	movw	r0, #15752	; 0x3d88
   17568:	movt	r0, #1
   1756c:	cmp	r1, r0
   17570:	orreq	r3, r3, #1
   17574:	movw	r0, #14696	; 0x3968
   17578:	movt	r0, #1
   1757c:	cmp	r1, r0
   17580:	orreq	r3, r3, #1
   17584:	cmp	r3, #0
   17588:	beq	17614 <__assert_fail@plt+0x5050>
   1758c:	movw	r3, #19020	; 0x4a4c
   17590:	movt	r3, #1
   17594:	cmp	r1, r3
   17598:	beq	17670 <__assert_fail@plt+0x50ac>
   1759c:	cmp	r2, #1
   175a0:	bls	175b4 <__assert_fail@plt+0x4ff0>
   175a4:	ldr	r3, [r5, #24]
   175a8:	sub	r3, r3, #1
   175ac:	cmp	r3, #1
   175b0:	bls	17694 <__assert_fail@plt+0x50d0>
   175b4:	cmp	r2, #2
   175b8:	bls	17740 <__assert_fail@plt+0x517c>
   175bc:	movw	r3, #48748	; 0xbe6c
   175c0:	movt	r3, #5
   175c4:	ldr	r3, [r3, #44]	; 0x2c
   175c8:	tst	r3, #8
   175cc:	bne	176a4 <__assert_fail@plt+0x50e0>
   175d0:	ldr	r3, [r4, #160]	; 0xa0
   175d4:	ldr	r3, [r3, #24]
   175d8:	add	r2, sp, #8
   175dc:	ldr	r1, [r4, #156]	; 0x9c
   175e0:	str	r1, [r6]
   175e4:	ldr	r1, [r2, r3, lsl #3]
   175e8:	str	r1, [r4, #156]	; 0x9c
   175ec:	str	r4, [r2, r3, lsl #3]
   175f0:	add	r2, sp, #112	; 0x70
   175f4:	add	r2, r2, r3, lsl #3
   175f8:	ldr	r2, [r2, #-100]	; 0xffffff9c
   175fc:	cmp	r2, #0
   17600:	bne	17744 <__assert_fail@plt+0x5180>
   17604:	add	r2, sp, #112	; 0x70
   17608:	add	r3, r2, r3, lsl #3
   1760c:	str	r4, [r3, #-100]	; 0xffffff9c
   17610:	b	17744 <__assert_fail@plt+0x5180>
   17614:	ldr	r3, [r5, #24]
   17618:	cmp	r3, #0
   1761c:	bne	1758c <__assert_fail@plt+0x4fc8>
   17620:	b	174f8 <__assert_fail@plt+0x4f34>
   17624:	movw	r3, #48748	; 0xbe6c
   17628:	movt	r3, #5
   1762c:	movw	r5, #46408	; 0xb548
   17630:	movt	r5, #5
   17634:	ldrh	r2, [r3, #68]	; 0x44
   17638:	movw	r1, #22364	; 0x575c
   1763c:	movt	r1, #4
   17640:	ldr	r0, [r5]
   17644:	bl	1230c <fprintf@plt>
   17648:	ldr	r1, [r4, #160]	; 0xa0
   1764c:	ldr	r0, [r5]
   17650:	bl	16760 <__assert_fail@plt+0x419c>
   17654:	ldr	r3, [r5]
   17658:	mov	r2, #16
   1765c:	mov	r1, #1
   17660:	movw	r0, #22400	; 0x5780
   17664:	movt	r0, #4
   17668:	bl	12138 <fwrite@plt>
   1766c:	b	1750c <__assert_fail@plt+0x4f48>
   17670:	ldr	r3, [r4, #156]	; 0x9c
   17674:	str	r3, [r6]
   17678:	ldr	r3, [sp, #104]	; 0x68
   1767c:	str	r3, [r4, #156]	; 0x9c
   17680:	str	r4, [sp, #104]	; 0x68
   17684:	ldr	r3, [sp, #108]	; 0x6c
   17688:	cmp	r3, #0
   1768c:	streq	r4, [sp, #108]	; 0x6c
   17690:	b	17744 <__assert_fail@plt+0x5180>
   17694:	ldrb	r3, [r5, #18]
   17698:	cmp	r3, #0
   1769c:	beq	175bc <__assert_fail@plt+0x4ff8>
   176a0:	b	175b4 <__assert_fail@plt+0x4ff0>
   176a4:	movw	r5, #46408	; 0xb548
   176a8:	movt	r5, #5
   176ac:	movw	r1, #22420	; 0x5794
   176b0:	movt	r1, #4
   176b4:	ldr	r0, [r5]
   176b8:	bl	1230c <fprintf@plt>
   176bc:	ldr	r1, [r4, #160]	; 0xa0
   176c0:	ldr	r0, [r5]
   176c4:	bl	16760 <__assert_fail@plt+0x419c>
   176c8:	ldr	r0, [r5]
   176cc:	ldr	r3, [r4, #160]	; 0xa0
   176d0:	ldr	r1, [r3, #24]
   176d4:	ldr	r3, [sl, #472]	; 0x1d8
   176d8:	cmp	r1, r3
   176dc:	beq	17714 <__assert_fail@plt+0x5150>
   176e0:	mov	r3, #1
   176e4:	ldr	r2, [fp, r3, lsl #3]
   176e8:	cmp	r1, r2
   176ec:	beq	17718 <__assert_fail@plt+0x5154>
   176f0:	add	r3, r3, #1
   176f4:	cmp	r3, #11
   176f8:	bne	176e4 <__assert_fail@plt+0x5120>
   176fc:	movw	r2, #22100	; 0x5654
   17700:	movt	r2, #4
   17704:	movw	r1, #22452	; 0x57b4
   17708:	movt	r1, #4
   1770c:	bl	1230c <fprintf@plt>
   17710:	b	175d0 <__assert_fail@plt+0x500c>
   17714:	mov	r3, #0
   17718:	add	r3, sl, r3, lsl #3
   1771c:	ldr	r2, [r3, #476]	; 0x1dc
   17720:	b	17704 <__assert_fail@plt+0x5140>
   17724:	add	r0, r5, #160	; 0xa0
   17728:	bl	17334 <__assert_fail@plt+0x4d70>
   1772c:	strb	r0, [r5, #16]
   17730:	ldr	r3, [r4, #160]	; 0xa0
   17734:	ldrb	r3, [r3, #16]
   17738:	cmp	r3, #0
   1773c:	bne	177b4 <__assert_fail@plt+0x51f0>
   17740:	add	r6, r4, #156	; 0x9c
   17744:	ldr	r4, [r6]
   17748:	cmp	r4, #0
   1774c:	beq	177d8 <__assert_fail@plt+0x5214>
   17750:	ldr	r3, [r4, #8]
   17754:	cmp	r3, #3
   17758:	beq	1747c <__assert_fail@plt+0x4eb8>
   1775c:	ldr	r5, [r4, #160]	; 0xa0
   17760:	ldr	r3, [r5, #8]
   17764:	cmp	r3, #3
   17768:	ldrls	pc, [pc, r3, lsl #2]
   1776c:	b	17790 <__assert_fail@plt+0x51cc>
   17770:	andeq	r7, r1, r0, lsr #9
   17774:	andeq	r7, r1, r0, lsr #9
   17778:	andeq	r7, r1, r4, lsr #14
   1777c:	andeq	r7, r1, r0, lsl #15
   17780:	add	r0, r4, #160	; 0xa0
   17784:	bl	17334 <__assert_fail@plt+0x4d70>
   17788:	strb	r0, [r5, #16]
   1778c:	b	17730 <__assert_fail@plt+0x516c>
   17790:	mov	r2, #5
   17794:	movw	r1, #21536	; 0x5420
   17798:	movt	r1, #4
   1779c:	mov	r0, #0
   177a0:	bl	12084 <dcgettext@plt>
   177a4:	mov	r2, r0
   177a8:	mov	r1, #0
   177ac:	mov	r0, #1
   177b0:	bl	121bc <error@plt>
   177b4:	str	r6, [sp]
   177b8:	add	r3, sp, #104	; 0x68
   177bc:	add	r2, sp, #96	; 0x60
   177c0:	mov	r1, #11
   177c4:	add	r0, sp, #8
   177c8:	bl	1729c <__assert_fail@plt+0x4cd8>
   177cc:	mov	r8, #1
   177d0:	b	17740 <__assert_fail@plt+0x517c>
   177d4:	mov	r8, #0
   177d8:	str	r6, [sp]
   177dc:	add	r3, sp, #104	; 0x68
   177e0:	add	r2, sp, #96	; 0x60
   177e4:	mov	r1, #11
   177e8:	add	r0, sp, #8
   177ec:	bl	1729c <__assert_fail@plt+0x4cd8>
   177f0:	mov	r0, r8
   177f4:	add	sp, sp, #116	; 0x74
   177f8:	ldrd	r4, [sp]
   177fc:	ldrd	r6, [sp, #8]
   17800:	ldrd	r8, [sp, #16]
   17804:	ldrd	sl, [sp, #24]
   17808:	add	sp, sp, #32
   1780c:	pop	{pc}		; (ldr pc, [sp], #4)
   17810:	mov	r8, #0
   17814:	b	177f0 <__assert_fail@plt+0x522c>
   17818:	mov	r8, #0
   1781c:	b	177f0 <__assert_fail@plt+0x522c>
   17820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17824:	strd	r6, [sp, #8]
   17828:	strd	r8, [sp, #16]
   1782c:	strd	sl, [sp, #24]
   17830:	str	lr, [sp, #32]
   17834:	vpush	{d8}
   17838:	sub	sp, sp, #12
   1783c:	subs	r4, r0, #0
   17840:	beq	17a60 <__assert_fail@plt+0x549c>
   17844:	movw	r5, #48748	; 0xbe6c
   17848:	movt	r5, #5
   1784c:	movw	r8, #14616	; 0x3918
   17850:	movt	r8, #1
   17854:	movw	r6, #22692	; 0x58a4
   17858:	movt	r6, #4
   1785c:	b	17944 <__assert_fail@plt+0x5380>
   17860:	ldr	r3, [r4, #156]	; 0x9c
   17864:	cmp	r3, #0
   17868:	beq	17a48 <__assert_fail@plt+0x5484>
   1786c:	ldr	r2, [r4, #160]	; 0xa0
   17870:	cmp	r2, #0
   17874:	beq	17a54 <__assert_fail@plt+0x5490>
   17878:	ldr	r2, [r3, #160]	; 0xa0
   1787c:	cmp	r2, #0
   17880:	beq	17a3c <__assert_fail@plt+0x5478>
   17884:	ldr	r9, [r3, #160]	; 0xa0
   17888:	mov	r0, r9
   1788c:	bl	15e00 <__assert_fail@plt+0x383c>
   17890:	cmp	r0, #0
   17894:	movwne	r2, #22628	; 0x5864
   17898:	movtne	r2, #4
   1789c:	bne	17918 <__assert_fail@plt+0x5354>
   178a0:	ldr	sl, [r4, #160]	; 0xa0
   178a4:	mov	r0, sl
   178a8:	bl	15e00 <__assert_fail@plt+0x383c>
   178ac:	cmp	r0, #0
   178b0:	movwne	r2, #22596	; 0x5844
   178b4:	movtne	r2, #4
   178b8:	bne	17918 <__assert_fail@plt+0x5354>
   178bc:	mov	r0, r9
   178c0:	bl	15e54 <__assert_fail@plt+0x3890>
   178c4:	mov	fp, r0
   178c8:	mov	r0, sl
   178cc:	bl	15e54 <__assert_fail@plt+0x3890>
   178d0:	cmp	fp, r0
   178d4:	movwlt	r2, #22580	; 0x5834
   178d8:	movtlt	r2, #4
   178dc:	blt	17918 <__assert_fail@plt+0x5354>
   178e0:	cmp	fp, r0
   178e4:	beq	17950 <__assert_fail@plt+0x538c>
   178e8:	ldr	r3, [r5, #44]	; 0x2c
   178ec:	tst	r3, #8
   178f0:	bne	179dc <__assert_fail@plt+0x5418>
   178f4:	ldr	r3, [r4, #156]	; 0x9c
   178f8:	ldr	r2, [r3, #160]	; 0xa0
   178fc:	ldr	r1, [r4, #160]	; 0xa0
   17900:	str	r1, [r3, #160]	; 0xa0
   17904:	str	r2, [r4, #160]	; 0xa0
   17908:	ldr	r3, [r4, #8]
   1790c:	cmp	r3, #3
   17910:	movne	r2, r6
   17914:	beq	17860 <__assert_fail@plt+0x529c>
   17918:	ldr	r3, [r5, #44]	; 0x2c
   1791c:	tst	r3, #8
   17920:	bne	17a10 <__assert_fail@plt+0x544c>
   17924:	ldr	r0, [r4, #156]	; 0x9c
   17928:	bl	17820 <__assert_fail@plt+0x525c>
   1792c:	cmp	r0, #0
   17930:	bne	17908 <__assert_fail@plt+0x5344>
   17934:	ldr	r0, [r4, #160]	; 0xa0
   17938:	bl	17820 <__assert_fail@plt+0x525c>
   1793c:	cmp	r0, #0
   17940:	beq	17a60 <__assert_fail@plt+0x549c>
   17944:	movw	r7, #14696	; 0x3968
   17948:	movt	r7, #1
   1794c:	b	17908 <__assert_fail@plt+0x5344>
   17950:	vldr	s17, [r9, #28]
   17954:	vldr	s16, [sl, #28]
   17958:	ldr	r3, [r5, #44]	; 0x2c
   1795c:	tst	r3, #8
   17960:	bne	17998 <__assert_fail@plt+0x53d4>
   17964:	ldr	r3, [r4]
   17968:	cmp	r3, r7
   1796c:	beq	179c4 <__assert_fail@plt+0x5400>
   17970:	cmp	r3, r8
   17974:	movwne	r2, #22468	; 0x57c4
   17978:	movtne	r2, #4
   1797c:	bne	17918 <__assert_fail@plt+0x5354>
   17980:	vcmpe.f32	s17, s16
   17984:	vmrs	APSR_nzcv, fpscr
   17988:	movwpl	r2, #22532	; 0x5804
   1798c:	movtpl	r2, #4
   17990:	bpl	17918 <__assert_fail@plt+0x5354>
   17994:	b	178e8 <__assert_fail@plt+0x5324>
   17998:	movw	r0, #46408	; 0xb548
   1799c:	movt	r0, #5
   179a0:	vcvt.f64.f32	d7, s16
   179a4:	vstr	d7, [sp]
   179a8:	vcvt.f64.f32	d7, s17
   179ac:	vmov	r2, r3, d7
   179b0:	movw	r1, #22740	; 0x58d4
   179b4:	movt	r1, #4
   179b8:	ldr	r0, [r0]
   179bc:	bl	1230c <fprintf@plt>
   179c0:	b	17964 <__assert_fail@plt+0x53a0>
   179c4:	vcmpe.f32	s17, s16
   179c8:	vmrs	APSR_nzcv, fpscr
   179cc:	movwle	r2, #22488	; 0x57d8
   179d0:	movtle	r2, #4
   179d4:	ble	17918 <__assert_fail@plt+0x5354>
   179d8:	b	178e8 <__assert_fail@plt+0x5324>
   179dc:	movw	r9, #46408	; 0xb548
   179e0:	movt	r9, #5
   179e4:	ldr	r3, [r9]
   179e8:	mov	r2, #24
   179ec:	mov	r1, #1
   179f0:	movw	r0, #22768	; 0x58f0
   179f4:	movt	r0, #4
   179f8:	bl	12138 <fwrite@plt>
   179fc:	mov	r2, #0
   17a00:	mov	r1, r4
   17a04:	ldr	r0, [r9]
   17a08:	bl	16ce0 <__assert_fail@plt+0x471c>
   17a0c:	b	178f4 <__assert_fail@plt+0x5330>
   17a10:	movw	r9, #46408	; 0xb548
   17a14:	movt	r9, #5
   17a18:	movw	r1, #22796	; 0x590c
   17a1c:	movt	r1, #4
   17a20:	ldr	r0, [r9]
   17a24:	bl	1230c <fprintf@plt>
   17a28:	mov	r2, #0
   17a2c:	mov	r1, r4
   17a30:	ldr	r0, [r9]
   17a34:	bl	16ce0 <__assert_fail@plt+0x471c>
   17a38:	b	17924 <__assert_fail@plt+0x5360>
   17a3c:	movw	r2, #22660	; 0x5884
   17a40:	movt	r2, #4
   17a44:	b	17918 <__assert_fail@plt+0x5354>
   17a48:	movw	r2, #22716	; 0x58bc
   17a4c:	movt	r2, #4
   17a50:	b	17918 <__assert_fail@plt+0x5354>
   17a54:	movw	r2, #22716	; 0x58bc
   17a58:	movt	r2, #4
   17a5c:	b	17918 <__assert_fail@plt+0x5354>
   17a60:	mov	r0, #0
   17a64:	add	sp, sp, #12
   17a68:	vpop	{d8}
   17a6c:	ldrd	r4, [sp]
   17a70:	ldrd	r6, [sp, #8]
   17a74:	ldrd	r8, [sp, #16]
   17a78:	ldrd	sl, [sp, #24]
   17a7c:	add	sp, sp, #32
   17a80:	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a88:	strd	r6, [sp, #8]
   17a8c:	strd	r8, [sp, #16]
   17a90:	strd	sl, [sp, #24]
   17a94:	str	lr, [sp, #32]
   17a98:	sub	sp, sp, #36	; 0x24
   17a9c:	str	r0, [sp, #20]
   17aa0:	mov	r4, r1
   17aa4:	movw	r3, #46448	; 0xb570
   17aa8:	movt	r3, #5
   17aac:	mov	r1, #0
   17ab0:	str	r1, [r3, #16]
   17ab4:	add	r1, r4, r2, lsl #2
   17ab8:	str	r1, [r3, #8]
   17abc:	str	r2, [sp, #24]
   17ac0:	cmp	r2, r0
   17ac4:	bge	17b08 <__assert_fail@plt+0x5544>
   17ac8:	mov	r6, #1
   17acc:	mov	r5, r3
   17ad0:	mov	r1, r6
   17ad4:	ldr	r0, [r4, r2, lsl #2]
   17ad8:	bl	18be0 <__assert_fail@plt+0x661c>
   17adc:	cmp	r0, #0
   17ae0:	bne	17b08 <__assert_fail@plt+0x5544>
   17ae4:	ldr	r3, [r5, #4]
   17ae8:	add	r3, r3, #1
   17aec:	str	r3, [r5, #4]
   17af0:	ldr	r2, [sp, #24]
   17af4:	add	r2, r2, #1
   17af8:	str	r2, [sp, #24]
   17afc:	ldr	r3, [sp, #20]
   17b00:	cmp	r2, r3
   17b04:	blt	17ad0 <__assert_fail@plt+0x550c>
   17b08:	movw	r0, #22832	; 0x5930
   17b0c:	movt	r0, #4
   17b10:	bl	1ff8c <__assert_fail@plt+0xd9c8>
   17b14:	mov	r5, r0
   17b18:	movw	r0, #26892	; 0x690c
   17b1c:	movt	r0, #4
   17b20:	bl	1ff8c <__assert_fail@plt+0xd9c8>
   17b24:	str	r0, [sp, #16]
   17b28:	movw	r0, #22836	; 0x5934
   17b2c:	movt	r0, #4
   17b30:	bl	1ff8c <__assert_fail@plt+0xd9c8>
   17b34:	str	r0, [sp, #12]
   17b38:	cmp	r5, #0
   17b3c:	beq	17bc8 <__assert_fail@plt+0x5604>
   17b40:	ldr	r3, [sp, #16]
   17b44:	cmp	r3, #0
   17b48:	beq	17be4 <__assert_fail@plt+0x5620>
   17b4c:	ldr	r3, [sp, #12]
   17b50:	cmp	r3, #0
   17b54:	beq	17c00 <__assert_fail@plt+0x563c>
   17b58:	add	r2, sp, #20
   17b5c:	mov	r1, r4
   17b60:	mov	r0, r5
   17b64:	bl	1f3f0 <__assert_fail@plt+0xce2c>
   17b68:	movw	r5, #46448	; 0xb570
   17b6c:	movt	r5, #5
   17b70:	ldr	r2, [r5, #20]
   17b74:	movw	r3, #22832	; 0x5930
   17b78:	movt	r3, #4
   17b7c:	str	r3, [r2, #4]
   17b80:	ldr	r3, [r5, #16]
   17b84:	mov	r1, #1
   17b88:	strb	r1, [r3, #33]	; 0x21
   17b8c:	ldr	r1, [sp, #20]
   17b90:	mov	r0, r4
   17b94:	bl	1ff74 <__assert_fail@plt+0xd9b0>
   17b98:	ldr	r0, [r5, #20]
   17b9c:	bl	15384 <__assert_fail@plt+0x2dc0>
   17ba0:	ldr	r3, [sp, #24]
   17ba4:	ldr	r1, [sp, #20]
   17ba8:	cmp	r3, r1
   17bac:	bge	17dfc <__assert_fail@plt+0x5838>
   17bb0:	movw	sl, #48704	; 0xbe40
   17bb4:	movt	sl, #5
   17bb8:	mov	r9, #0
   17bbc:	mov	fp, r9
   17bc0:	mov	r8, r5
   17bc4:	b	17d20 <__assert_fail@plt+0x575c>
   17bc8:	ldr	r3, [pc, #1432]	; 18168 <__assert_fail@plt+0x5ba4>
   17bcc:	movw	r2, #1270	; 0x4f6
   17bd0:	movw	r1, #20920	; 0x51b8
   17bd4:	movt	r1, #4
   17bd8:	movw	r0, #22844	; 0x593c
   17bdc:	movt	r0, #4
   17be0:	bl	125c4 <__assert_fail@plt>
   17be4:	ldr	r3, [pc, #1404]	; 18168 <__assert_fail@plt+0x5ba4>
   17be8:	movw	r2, #1271	; 0x4f7
   17bec:	movw	r1, #20920	; 0x51b8
   17bf0:	movt	r1, #4
   17bf4:	movw	r0, #22864	; 0x5950
   17bf8:	movt	r0, #4
   17bfc:	bl	125c4 <__assert_fail@plt>
   17c00:	ldr	r3, [pc, #1376]	; 18168 <__assert_fail@plt+0x5ba4>
   17c04:	movw	r2, #1272	; 0x4f8
   17c08:	movw	r1, #20920	; 0x51b8
   17c0c:	movt	r1, #4
   17c10:	movw	r0, #22884	; 0x5964
   17c14:	movt	r0, #4
   17c18:	bl	125c4 <__assert_fail@plt>
   17c1c:	mov	r2, #5
   17c20:	movw	r1, #22904	; 0x5978
   17c24:	movt	r1, #4
   17c28:	bl	12084 <dcgettext@plt>
   17c2c:	ldr	r3, [sp, #24]
   17c30:	ldr	r3, [r4, r3, lsl #2]
   17c34:	mov	r2, r0
   17c38:	mov	r1, #0
   17c3c:	mov	r0, r1
   17c40:	bl	121bc <error@plt>
   17c44:	mov	r1, #0
   17c48:	ldr	r3, [sp, #24]
   17c4c:	ldr	r0, [r4, r3, lsl #2]
   17c50:	bl	123c0 <access@plt>
   17c54:	cmp	r0, #0
   17c58:	beq	17c64 <__assert_fail@plt+0x56a0>
   17c5c:	mov	r0, #1
   17c60:	bl	122a0 <exit@plt>
   17c64:	mov	r2, #5
   17c68:	movw	r1, #22940	; 0x599c
   17c6c:	movt	r1, #4
   17c70:	bl	12084 <dcgettext@plt>
   17c74:	movw	r3, #46448	; 0xb570
   17c78:	movt	r3, #5
   17c7c:	ldr	r3, [r3, #20]
   17c80:	ldr	r3, [r3, #4]
   17c84:	mov	r2, r0
   17c88:	mov	r1, #0
   17c8c:	mov	r0, r1
   17c90:	bl	121bc <error@plt>
   17c94:	b	17c5c <__assert_fail@plt+0x5698>
   17c98:	mov	r2, #5
   17c9c:	movw	r1, #22988	; 0x59cc
   17ca0:	movt	r1, #4
   17ca4:	bl	12084 <dcgettext@plt>
   17ca8:	mov	r3, r6
   17cac:	mov	r2, r0
   17cb0:	mov	r1, #0
   17cb4:	mov	r0, #1
   17cb8:	bl	121bc <error@plt>
   17cbc:	ldr	r3, [sp, #24]
   17cc0:	add	r3, r3, #1
   17cc4:	str	r3, [sp, #24]
   17cc8:	ldr	r7, [sp, #24]
   17ccc:	ldr	r3, [r5, #8]
   17cd0:	add	r2, sp, #24
   17cd4:	mov	r1, r4
   17cd8:	mov	r0, r5
   17cdc:	blx	r3
   17ce0:	cmp	r0, #0
   17ce4:	beq	17d60 <__assert_fail@plt+0x579c>
   17ce8:	ldr	r0, [r8, #20]
   17cec:	str	r6, [r0, #4]
   17cf0:	ldr	r3, [sp, #24]
   17cf4:	cmp	r3, r7
   17cf8:	ldrne	r3, [r4, r7, lsl #2]
   17cfc:	moveq	r3, r9
   17d00:	str	r3, [r0, #36]	; 0x24
   17d04:	bl	15384 <__assert_fail@plt+0x2dc0>
   17d08:	ldr	r0, [r8, #16]
   17d0c:	bl	15384 <__assert_fail@plt+0x2dc0>
   17d10:	ldr	r3, [sp, #24]
   17d14:	ldr	r1, [sp, #20]
   17d18:	cmp	r3, r1
   17d1c:	bge	17dfc <__assert_fail@plt+0x5838>
   17d20:	strb	fp, [sl, #40]	; 0x28
   17d24:	mov	r1, r9
   17d28:	ldr	r0, [r4, r3, lsl #2]
   17d2c:	bl	18be0 <__assert_fail@plt+0x661c>
   17d30:	cmp	r0, #0
   17d34:	beq	17c1c <__assert_fail@plt+0x5658>
   17d38:	ldr	r3, [sp, #24]
   17d3c:	ldr	r6, [r4, r3, lsl #2]
   17d40:	mov	r0, r6
   17d44:	bl	1ff8c <__assert_fail@plt+0xd9c8>
   17d48:	subs	r5, r0, #0
   17d4c:	beq	17c98 <__assert_fail@plt+0x56d4>
   17d50:	ldr	r3, [r5]
   17d54:	cmp	r3, #4
   17d58:	bne	17cbc <__assert_fail@plt+0x56f8>
   17d5c:	b	17cc8 <__assert_fail@plt+0x5704>
   17d60:	ldr	r3, [sp, #24]
   17d64:	ldr	r2, [r4, r3, lsl #2]
   17d68:	cmp	r2, #0
   17d6c:	beq	17dd4 <__assert_fail@plt+0x5810>
   17d70:	ldr	r2, [r5]
   17d74:	cmp	r2, #4
   17d78:	cmpeq	r3, r7
   17d7c:	beq	17db0 <__assert_fail@plt+0x57ec>
   17d80:	mov	r2, #5
   17d84:	movw	r1, #23036	; 0x59fc
   17d88:	movt	r1, #4
   17d8c:	mov	r0, #0
   17d90:	bl	12084 <dcgettext@plt>
   17d94:	str	r6, [sp]
   17d98:	ldr	r3, [sp, #24]
   17d9c:	ldr	r3, [r4, r3, lsl #2]
   17da0:	mov	r2, r0
   17da4:	mov	r1, #0
   17da8:	mov	r0, #1
   17dac:	bl	121bc <error@plt>
   17db0:	mov	r2, #5
   17db4:	movw	r1, #23012	; 0x59e4
   17db8:	movt	r1, #4
   17dbc:	bl	12084 <dcgettext@plt>
   17dc0:	mov	r3, r6
   17dc4:	mov	r2, r0
   17dc8:	mov	r1, #0
   17dcc:	mov	r0, #1
   17dd0:	bl	121bc <error@plt>
   17dd4:	mov	r2, #5
   17dd8:	movw	r1, #23068	; 0x5a1c
   17ddc:	movt	r1, #4
   17de0:	mov	r0, #0
   17de4:	bl	12084 <dcgettext@plt>
   17de8:	mov	r3, r6
   17dec:	mov	r2, r0
   17df0:	mov	r1, #0
   17df4:	mov	r0, #1
   17df8:	bl	121bc <error@plt>
   17dfc:	movw	r5, #46448	; 0xb570
   17e00:	movt	r5, #5
   17e04:	ldr	r3, [r5, #16]
   17e08:	ldr	r2, [r5, #20]
   17e0c:	mov	r0, r4
   17e10:	bl	1ff88 <__assert_fail@plt+0xd9c4>
   17e14:	ldr	r3, [r5, #16]
   17e18:	ldr	r0, [r3, #152]	; 0x98
   17e1c:	cmp	r0, #0
   17e20:	beq	17ef8 <__assert_fail@plt+0x5934>
   17e24:	bl	18b98 <__assert_fail@plt+0x65d4>
   17e28:	cmp	r0, #0
   17e2c:	bne	17f48 <__assert_fail@plt+0x5984>
   17e30:	movw	r3, #46448	; 0xb570
   17e34:	movt	r3, #5
   17e38:	ldr	r2, [r3, #16]
   17e3c:	str	r2, [sp, #28]
   17e40:	ldr	r0, [r2, #152]	; 0x98
   17e44:	str	r0, [r3, #16]
   17e48:	bl	15384 <__assert_fail@plt+0x2dc0>
   17e4c:	ldr	r0, [sp, #28]
   17e50:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   17e54:	movw	r3, #48748	; 0xbe6c
   17e58:	movt	r3, #5
   17e5c:	ldr	r3, [r3, #44]	; 0x2c
   17e60:	tst	r3, #9
   17e64:	bne	17fb0 <__assert_fail@plt+0x59ec>
   17e68:	movw	r4, #46448	; 0xb570
   17e6c:	movt	r4, #5
   17e70:	ldr	r0, [r4, #16]
   17e74:	bl	1fde4 <__assert_fail@plt+0xd820>
   17e78:	ldr	r0, [r4, #16]
   17e7c:	bl	15384 <__assert_fail@plt+0x2dc0>
   17e80:	ldr	r3, [r4, #16]
   17e84:	str	r3, [sp, #28]
   17e88:	mov	r2, #0
   17e8c:	mov	r1, r2
   17e90:	add	r0, sp, #28
   17e94:	bl	15f44 <__assert_fail@plt+0x3980>
   17e98:	str	r0, [r4, #12]
   17e9c:	bl	167b4 <__assert_fail@plt+0x41f0>
   17ea0:	ldr	r3, [sp, #28]
   17ea4:	cmp	r3, #0
   17ea8:	beq	18030 <__assert_fail@plt+0x5a6c>
   17eac:	movw	r2, #15604	; 0x3cf4
   17eb0:	movt	r2, #1
   17eb4:	ldr	r1, [r3]
   17eb8:	cmp	r1, r2
   17ebc:	beq	17fe8 <__assert_fail@plt+0x5a24>
   17ec0:	ldr	r3, [r3, #4]
   17ec4:	cmp	r3, #0
   17ec8:	beq	1800c <__assert_fail@plt+0x5a48>
   17ecc:	mov	r2, #5
   17ed0:	movw	r1, #23124	; 0x5a54
   17ed4:	movt	r1, #4
   17ed8:	mov	r0, #0
   17edc:	bl	12084 <dcgettext@plt>
   17ee0:	ldr	r3, [sp, #28]
   17ee4:	ldr	r3, [r3, #4]
   17ee8:	mov	r2, r0
   17eec:	mov	r1, #0
   17ef0:	mov	r0, #1
   17ef4:	bl	121bc <error@plt>
   17ef8:	str	r3, [sp, #28]
   17efc:	movw	r5, #46448	; 0xb570
   17f00:	movt	r5, #5
   17f04:	mov	r2, #0
   17f08:	str	r2, [r5, #20]
   17f0c:	str	r2, [r5, #16]
   17f10:	mov	r0, r3
   17f14:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   17f18:	add	r2, sp, #20
   17f1c:	mov	r1, r4
   17f20:	ldr	r0, [sp, #12]
   17f24:	bl	1f9b4 <__assert_fail@plt+0xd3f0>
   17f28:	ldr	r0, [r5, #20]
   17f2c:	movw	r3, #23096	; 0x5a38
   17f30:	movt	r3, #4
   17f34:	str	r3, [r0, #4]
   17f38:	bl	15384 <__assert_fail@plt+0x2dc0>
   17f3c:	ldr	r0, [r5, #16]
   17f40:	bl	15384 <__assert_fail@plt+0x2dc0>
   17f44:	b	17e54 <__assert_fail@plt+0x5890>
   17f48:	add	r2, sp, #20
   17f4c:	mov	r1, r4
   17f50:	ldr	r0, [sp, #16]
   17f54:	bl	1eea4 <__assert_fail@plt+0xc8e0>
   17f58:	movw	r5, #46448	; 0xb570
   17f5c:	movt	r5, #5
   17f60:	ldr	r0, [r5, #20]
   17f64:	movw	r3, #26892	; 0x690c
   17f68:	movt	r3, #4
   17f6c:	str	r3, [r0, #4]
   17f70:	mov	r6, #1
   17f74:	strb	r6, [r0, #33]	; 0x21
   17f78:	bl	15384 <__assert_fail@plt+0x2dc0>
   17f7c:	add	r2, sp, #20
   17f80:	mov	r1, r4
   17f84:	ldr	r0, [sp, #12]
   17f88:	bl	1f9b4 <__assert_fail@plt+0xd3f0>
   17f8c:	ldr	r0, [r5, #20]
   17f90:	movw	r3, #23096	; 0x5a38
   17f94:	movt	r3, #4
   17f98:	str	r3, [r0, #4]
   17f9c:	strb	r6, [r0, #33]	; 0x21
   17fa0:	bl	15384 <__assert_fail@plt+0x2dc0>
   17fa4:	ldr	r0, [r5, #16]
   17fa8:	bl	15384 <__assert_fail@plt+0x2dc0>
   17fac:	b	17e54 <__assert_fail@plt+0x5890>
   17fb0:	movw	r4, #46408	; 0xb548
   17fb4:	movt	r4, #5
   17fb8:	ldr	r3, [r4]
   17fbc:	mov	r2, #16
   17fc0:	mov	r1, #1
   17fc4:	movw	r0, #23104	; 0x5a40
   17fc8:	movt	r0, #4
   17fcc:	bl	12138 <fwrite@plt>
   17fd0:	movw	r3, #46448	; 0xb570
   17fd4:	movt	r3, #5
   17fd8:	ldr	r1, [r3, #16]
   17fdc:	ldr	r0, [r4]
   17fe0:	bl	15038 <__assert_fail@plt+0x2a74>
   17fe4:	b	17e68 <__assert_fail@plt+0x58a4>
   17fe8:	mov	r2, #5
   17fec:	movw	r1, #21260	; 0x530c
   17ff0:	movt	r1, #4
   17ff4:	mov	r0, #0
   17ff8:	bl	12084 <dcgettext@plt>
   17ffc:	mov	r2, r0
   18000:	mov	r1, #0
   18004:	mov	r0, #1
   18008:	bl	121bc <error@plt>
   1800c:	mov	r2, #5
   18010:	movw	r1, #23156	; 0x5a74
   18014:	movt	r1, #4
   18018:	mov	r0, #0
   1801c:	bl	12084 <dcgettext@plt>
   18020:	mov	r2, r0
   18024:	mov	r1, #0
   18028:	mov	r0, #1
   1802c:	bl	121bc <error@plt>
   18030:	movw	r3, #48748	; 0xbe6c
   18034:	movt	r3, #5
   18038:	ldr	r3, [r3, #44]	; 0x2c
   1803c:	tst	r3, #9
   18040:	bne	180c0 <__assert_fail@plt+0x5afc>
   18044:	movw	r4, #46448	; 0xb570
   18048:	movt	r4, #5
   1804c:	mov	r5, r4
   18050:	ldr	r0, [r5, #12]!
   18054:	bl	1636c <__assert_fail@plt+0x3da8>
   18058:	mov	r0, r5
   1805c:	bl	17334 <__assert_fail@plt+0x4d70>
   18060:	ldr	r5, [r4, #12]
   18064:	mov	r1, #1
   18068:	mov	r0, r5
   1806c:	bl	15ea4 <__assert_fail@plt+0x38e0>
   18070:	mov	r0, r5
   18074:	bl	17820 <__assert_fail@plt+0x525c>
   18078:	mov	r1, #1
   1807c:	ldr	r0, [r4, #12]
   18080:	bl	15ea4 <__assert_fail@plt+0x38e0>
   18084:	movw	r3, #48748	; 0xbe6c
   18088:	movt	r3, #5
   1808c:	ldr	r3, [r3, #44]	; 0x2c
   18090:	tst	r3, #9
   18094:	bne	180fc <__assert_fail@plt+0x5b38>
   18098:	movw	r3, #46448	; 0xb570
   1809c:	movt	r3, #5
   180a0:	ldr	r0, [r3, #12]
   180a4:	add	sp, sp, #36	; 0x24
   180a8:	ldrd	r4, [sp]
   180ac:	ldrd	r6, [sp, #8]
   180b0:	ldrd	r8, [sp, #16]
   180b4:	ldrd	sl, [sp, #24]
   180b8:	add	sp, sp, #32
   180bc:	pop	{pc}		; (ldr pc, [sp], #4)
   180c0:	movw	r4, #46408	; 0xb548
   180c4:	movt	r4, #5
   180c8:	ldr	r3, [r4]
   180cc:	mov	r2, #11
   180d0:	mov	r1, #1
   180d4:	movw	r0, #23184	; 0x5a90
   180d8:	movt	r0, #4
   180dc:	bl	12138 <fwrite@plt>
   180e0:	movw	r3, #46448	; 0xb570
   180e4:	movt	r3, #5
   180e8:	mov	r2, #0
   180ec:	ldr	r1, [r3, #12]
   180f0:	ldr	r0, [r4]
   180f4:	bl	16ce0 <__assert_fail@plt+0x471c>
   180f8:	b	18044 <__assert_fail@plt+0x5a80>
   180fc:	movw	r4, #46408	; 0xb548
   18100:	movt	r4, #5
   18104:	ldr	r3, [r4]
   18108:	mov	r2, #21
   1810c:	mov	r1, #1
   18110:	movw	r0, #23196	; 0x5a9c
   18114:	movt	r0, #4
   18118:	bl	12138 <fwrite@plt>
   1811c:	movw	r5, #46448	; 0xb570
   18120:	movt	r5, #5
   18124:	mov	r2, #0
   18128:	ldr	r1, [r5, #12]
   1812c:	ldr	r0, [r4]
   18130:	bl	16ce0 <__assert_fail@plt+0x471c>
   18134:	ldr	r3, [r4]
   18138:	mov	r2, #24
   1813c:	mov	r1, #1
   18140:	movw	r0, #23220	; 0x5ab4
   18144:	movt	r0, #4
   18148:	bl	12138 <fwrite@plt>
   1814c:	ldr	r1, [r5, #12]
   18150:	ldr	r0, [r4]
   18154:	bl	1510c <__assert_fail@plt+0x2b48>
   18158:	ldr	r1, [r4]
   1815c:	mov	r0, #10
   18160:	bl	1245c <fputc@plt>
   18164:	b	18098 <__assert_fail@plt+0x5ad4>
   18168:	andeq	r5, r4, r0, lsr #3
   1816c:	strd	r4, [sp, #-16]!
   18170:	str	r6, [sp, #8]
   18174:	str	lr, [sp, #12]
   18178:	mov	r4, r0
   1817c:	mov	r5, r1
   18180:	ldr	r0, [r0, #156]	; 0x9c
   18184:	cmp	r0, #0
   18188:	beq	18190 <__assert_fail@plt+0x5bcc>
   1818c:	bl	1816c <__assert_fail@plt+0x5ba8>
   18190:	mov	r0, r4
   18194:	blx	r5
   18198:	ldr	r0, [r4, #160]	; 0xa0
   1819c:	cmp	r0, #0
   181a0:	beq	181ac <__assert_fail@plt+0x5be8>
   181a4:	mov	r1, r5
   181a8:	bl	1816c <__assert_fail@plt+0x5ba8>
   181ac:	ldrd	r4, [sp]
   181b0:	ldr	r6, [sp, #8]
   181b4:	add	sp, sp, #12
   181b8:	pop	{pc}		; (ldr pc, [sp], #4)
   181bc:	ldr	r2, [r0]
   181c0:	movw	r3, #45040	; 0xaff0
   181c4:	movt	r3, #1
   181c8:	movw	r1, #16956	; 0x423c
   181cc:	movt	r1, #1
   181d0:	cmp	r2, r1
   181d4:	cmpne	r2, r3
   181d8:	moveq	r3, #1
   181dc:	movne	r3, #0
   181e0:	movw	r1, #16872	; 0x41e8
   181e4:	movt	r1, #1
   181e8:	cmp	r2, r1
   181ec:	orreq	r3, r3, #1
   181f0:	movw	r1, #17008	; 0x4270
   181f4:	movt	r1, #1
   181f8:	cmp	r2, r1
   181fc:	orreq	r3, r3, #1
   18200:	cmp	r3, #0
   18204:	movne	r3, #0
   18208:	strne	r3, [r0, #44]	; 0x2c
   1820c:	bx	lr
   18210:	str	r4, [sp, #-8]!
   18214:	str	lr, [sp, #4]
   18218:	subs	r4, r0, #0
   1821c:	beq	1827c <__assert_fail@plt+0x5cb8>
   18220:	movw	r3, #48704	; 0xbe40
   18224:	movt	r3, #5
   18228:	ldrb	r3, [r3, #32]
   1822c:	cmp	r3, #0
   18230:	beq	18288 <__assert_fail@plt+0x5cc4>
   18234:	ldr	r0, [r4, #156]	; 0x9c
   18238:	bl	18210 <__assert_fail@plt+0x5c4c>
   1823c:	ldr	r1, [r4]
   18240:	movw	r2, #16828	; 0x41bc
   18244:	movt	r2, #1
   18248:	movw	r3, #18496	; 0x4840
   1824c:	movt	r3, #1
   18250:	cmp	r1, r3
   18254:	cmpne	r1, r2
   18258:	bne	18274 <__assert_fail@plt+0x5cb0>
   1825c:	ldrb	r3, [r4, #40]	; 0x28
   18260:	cmp	r3, #0
   18264:	beq	18274 <__assert_fail@plt+0x5cb0>
   18268:	ldr	r3, [r4, #116]	; 0x74
   1826c:	cmp	r3, #0
   18270:	bne	182a8 <__assert_fail@plt+0x5ce4>
   18274:	ldr	r0, [r4, #160]	; 0xa0
   18278:	bl	18210 <__assert_fail@plt+0x5c4c>
   1827c:	ldr	r4, [sp]
   18280:	add	sp, sp, #4
   18284:	pop	{pc}		; (ldr pc, [sp], #4)
   18288:	movw	r3, #23472	; 0x5bb0
   1828c:	movt	r3, #4
   18290:	mov	r2, #396	; 0x18c
   18294:	movw	r1, #23692	; 0x5c8c
   18298:	movt	r1, #4
   1829c:	movw	r0, #23700	; 0x5c94
   182a0:	movt	r0, #4
   182a4:	bl	125c4 <__assert_fail@plt>
   182a8:	add	r2, r4, #40	; 0x28
   182ac:	movw	r1, #33516	; 0x82ec
   182b0:	movt	r1, #1
   182b4:	ldr	r0, [r4, #144]	; 0x90
   182b8:	bl	20da4 <__assert_fail@plt+0xe7e0>
   182bc:	ldr	r0, [r4, #144]	; 0x90
   182c0:	movw	r3, #46444	; 0xb56c
   182c4:	movt	r3, #5
   182c8:	ldr	r3, [r3]
   182cc:	cmp	r0, r3
   182d0:	beq	18274 <__assert_fail@plt+0x5cb0>
   182d4:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   182d8:	ldr	r0, [r4, #144]	; 0x90
   182dc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   182e0:	mov	r3, #0
   182e4:	str	r3, [r4, #144]	; 0x90
   182e8:	b	18274 <__assert_fail@plt+0x5cb0>
   182ec:	str	r4, [sp, #-8]!
   182f0:	str	lr, [sp, #4]
   182f4:	add	r1, r0, #48	; 0x30
   182f8:	add	r0, r0, #4
   182fc:	bl	207e4 <__assert_fail@plt+0xe220>
   18300:	mov	r0, #0
   18304:	ldr	r4, [sp]
   18308:	add	sp, sp, #4
   1830c:	pop	{pc}		; (ldr pc, [sp], #4)
   18310:	str	r4, [sp, #-8]!
   18314:	str	lr, [sp, #4]
   18318:	subs	r4, r0, #0
   1831c:	beq	18344 <__assert_fail@plt+0x5d80>
   18320:	ldr	r0, [r4, #156]	; 0x9c
   18324:	bl	18310 <__assert_fail@plt+0x5d4c>
   18328:	movw	r3, #16804	; 0x41a4
   1832c:	movt	r3, #1
   18330:	ldr	r2, [r4]
   18334:	cmp	r2, r3
   18338:	beq	18350 <__assert_fail@plt+0x5d8c>
   1833c:	ldr	r0, [r4, #160]	; 0xa0
   18340:	bl	18310 <__assert_fail@plt+0x5d4c>
   18344:	ldr	r4, [sp]
   18348:	add	sp, sp, #4
   1834c:	pop	{pc}		; (ldr pc, [sp], #4)
   18350:	ldrb	r3, [r4, #40]	; 0x28
   18354:	cmp	r3, #0
   18358:	beq	1833c <__assert_fail@plt+0x5d78>
   1835c:	ldr	r3, [r4, #116]	; 0x74
   18360:	cmp	r3, #0
   18364:	beq	1833c <__assert_fail@plt+0x5d78>
   18368:	add	r1, r4, #88	; 0x58
   1836c:	add	r0, r4, #44	; 0x2c
   18370:	bl	207e4 <__assert_fail@plt+0xe220>
   18374:	b	1833c <__assert_fail@plt+0x5d78>
   18378:	strd	r4, [sp, #-16]!
   1837c:	str	r6, [sp, #8]
   18380:	str	lr, [sp, #12]
   18384:	sub	sp, sp, #8
   18388:	mov	r5, r0
   1838c:	mov	r6, r1
   18390:	mov	r4, r2
   18394:	bl	12318 <__errno_location@plt>
   18398:	ldr	r3, [r0]
   1839c:	cmp	r3, #2
   183a0:	beq	183c4 <__assert_fail@plt+0x5e00>
   183a4:	cmp	r3, #20
   183a8:	beq	183c4 <__assert_fail@plt+0x5e00>
   183ac:	mov	r0, r4
   183b0:	add	sp, sp, #8
   183b4:	ldrd	r4, [sp]
   183b8:	ldr	r6, [sp, #8]
   183bc:	add	sp, sp, #12
   183c0:	pop	{pc}		; (ldr pc, [sp], #4)
   183c4:	movw	r3, #48748	; 0xbe6c
   183c8:	movt	r3, #5
   183cc:	ldr	r3, [r3, #44]	; 0x2c
   183d0:	tst	r3, #2
   183d4:	bne	18404 <__assert_fail@plt+0x5e40>
   183d8:	movw	r1, #48704	; 0xbe40
   183dc:	movt	r1, #5
   183e0:	mov	r3, #256	; 0x100
   183e4:	str	r3, [sp]
   183e8:	mov	r3, r6
   183ec:	mov	r2, r5
   183f0:	ldr	r1, [r1, #16]
   183f4:	mov	r0, #3
   183f8:	bl	120fc <__fxstatat64@plt>
   183fc:	mov	r4, r0
   18400:	b	183ac <__assert_fail@plt+0x5de8>
   18404:	movw	r3, #46408	; 0xb548
   18408:	movt	r3, #5
   1840c:	mov	r2, r5
   18410:	movw	r1, #23728	; 0x5cb0
   18414:	movt	r1, #4
   18418:	ldr	r0, [r3]
   1841c:	bl	1230c <fprintf@plt>
   18420:	b	183d8 <__assert_fail@plt+0x5e14>
   18424:	strd	r4, [sp, #-16]!
   18428:	str	r6, [sp, #8]
   1842c:	str	lr, [sp, #12]
   18430:	mov	r4, r0
   18434:	mov	r5, r1
   18438:	mov	r1, r2
   1843c:	bl	16bb8 <__assert_fail@plt+0x45f4>
   18440:	str	r5, [r0]
   18444:	ldr	r2, [r4, #4]
   18448:	str	r2, [r0, #4]
   1844c:	mov	r2, #0
   18450:	str	r2, [r0, #40]	; 0x28
   18454:	mov	r1, #1
   18458:	str	r1, [r0, #8]
   1845c:	str	r2, [r0, #12]
   18460:	ldrd	r4, [sp]
   18464:	ldr	r6, [sp, #8]
   18468:	add	sp, sp, #12
   1846c:	pop	{pc}		; (ldr pc, [sp], #4)
   18470:	str	r4, [sp, #-8]!
   18474:	str	lr, [sp, #4]
   18478:	ldr	r3, [r0, #12]
   1847c:	cmp	r3, #0
   18480:	beq	1849c <__assert_fail@plt+0x5ed8>
   18484:	mov	r2, r1
   18488:	mov	r1, r3
   1848c:	bl	18424 <__assert_fail@plt+0x5e60>
   18490:	ldr	r4, [sp]
   18494:	add	sp, sp, #4
   18498:	pop	{pc}		; (ldr pc, [sp], #4)
   1849c:	ldr	r3, [pc, #20]	; 184b8 <__assert_fail@plt+0x5ef4>
   184a0:	mov	r2, #123	; 0x7b
   184a4:	movw	r1, #23692	; 0x5c8c
   184a8:	movt	r1, #4
   184ac:	movw	r0, #23788	; 0x5cec
   184b0:	movt	r0, #4
   184b4:	bl	125c4 <__assert_fail@plt>
   184b8:	ldrdeq	r5, [r4], -r0
   184bc:	str	r4, [sp, #-8]!
   184c0:	str	lr, [sp, #4]
   184c4:	mov	r1, #0
   184c8:	bl	18470 <__assert_fail@plt+0x5eac>
   184cc:	ldr	r4, [sp]
   184d0:	add	sp, sp, #4
   184d4:	pop	{pc}		; (ldr pc, [sp], #4)
   184d8:	str	r7, [sp, #-8]!
   184dc:	str	lr, [sp, #4]
   184e0:	subs	r4, r0, #0
   184e4:	beq	18528 <__assert_fail@plt+0x5f64>
   184e8:	movw	r3, #46408	; 0xb548
   184ec:	movt	r3, #5
   184f0:	ldr	r5, [r3]
   184f4:	mov	r2, #5
   184f8:	movw	r1, #23816	; 0x5d08
   184fc:	movt	r1, #4
   18500:	mov	r0, #0
   18504:	bl	12084 <dcgettext@plt>
   18508:	movw	r3, #48388	; 0xbd04
   1850c:	movt	r3, #5
   18510:	ldr	r2, [r3]
   18514:	mov	r1, r0
   18518:	mov	r0, r5
   1851c:	bl	1230c <fprintf@plt>
   18520:	mov	r0, r4
   18524:	bl	122a0 <exit@plt>
   18528:	movw	r4, #46420	; 0xb554
   1852c:	movt	r4, #5
   18530:	ldr	r5, [r4]
   18534:	mov	r2, #5
   18538:	movw	r1, #23856	; 0x5d30
   1853c:	movt	r1, #4
   18540:	mov	r0, #0
   18544:	bl	12084 <dcgettext@plt>
   18548:	movw	r3, #48388	; 0xbd04
   1854c:	movt	r3, #5
   18550:	ldr	r2, [r3]
   18554:	mov	r1, r0
   18558:	mov	r0, r5
   1855c:	bl	1230c <fprintf@plt>
   18560:	mov	r2, #5
   18564:	movw	r1, #23932	; 0x5d7c
   18568:	movt	r1, #4
   1856c:	mov	r0, #0
   18570:	bl	12084 <dcgettext@plt>
   18574:	ldr	r1, [r4]
   18578:	bl	12558 <fputs@plt>
   1857c:	mov	r2, #5
   18580:	movw	r1, #24072	; 0x5e08
   18584:	movt	r1, #4
   18588:	mov	r0, #0
   1858c:	bl	12084 <dcgettext@plt>
   18590:	ldr	r1, [r4]
   18594:	bl	12558 <fputs@plt>
   18598:	mov	r2, #5
   1859c:	movw	r1, #24280	; 0x5ed8
   185a0:	movt	r1, #4
   185a4:	mov	r0, #0
   185a8:	bl	12084 <dcgettext@plt>
   185ac:	ldr	r1, [r4]
   185b0:	bl	12558 <fputs@plt>
   185b4:	mov	r2, #5
   185b8:	movw	r1, #24368	; 0x5f30
   185bc:	movt	r1, #4
   185c0:	mov	r0, #0
   185c4:	bl	12084 <dcgettext@plt>
   185c8:	ldr	r1, [r4]
   185cc:	bl	12558 <fputs@plt>
   185d0:	mov	r2, #5
   185d4:	movw	r1, #24576	; 0x6000
   185d8:	movt	r1, #4
   185dc:	mov	r0, #0
   185e0:	bl	12084 <dcgettext@plt>
   185e4:	ldr	r1, [r4]
   185e8:	bl	12558 <fputs@plt>
   185ec:	mov	r2, #5
   185f0:	movw	r1, #25120	; 0x6220
   185f4:	movt	r1, #4
   185f8:	mov	r0, #0
   185fc:	bl	12084 <dcgettext@plt>
   18600:	ldr	r1, [r4]
   18604:	bl	12558 <fputs@plt>
   18608:	mov	r2, #5
   1860c:	movw	r1, #25376	; 0x6320
   18610:	movt	r1, #4
   18614:	mov	r0, #0
   18618:	bl	12084 <dcgettext@plt>
   1861c:	ldr	r1, [r4]
   18620:	bl	12558 <fputs@plt>
   18624:	mov	r2, #5
   18628:	movw	r1, #25400	; 0x6338
   1862c:	movt	r1, #4
   18630:	mov	r0, #0
   18634:	bl	12084 <dcgettext@plt>
   18638:	ldr	r1, [r4]
   1863c:	bl	12558 <fputs@plt>
   18640:	mov	r2, #5
   18644:	movw	r1, #25460	; 0x6374
   18648:	movt	r1, #4
   1864c:	mov	r0, #0
   18650:	bl	12084 <dcgettext@plt>
   18654:	ldr	r1, [r4]
   18658:	bl	12558 <fputs@plt>
   1865c:	mov	r2, #5
   18660:	movw	r1, #25532	; 0x63bc
   18664:	movt	r1, #4
   18668:	mov	r0, #0
   1866c:	bl	12084 <dcgettext@plt>
   18670:	ldr	r1, [r4]
   18674:	bl	12558 <fputs@plt>
   18678:	ldr	r5, [pc, #156]	; 1871c <__assert_fail@plt+0x6158>
   1867c:	mov	r4, #1
   18680:	movw	r8, #46420	; 0xb554
   18684:	movt	r8, #5
   18688:	movw	r7, #25528	; 0x63b8
   1868c:	movt	r7, #4
   18690:	movw	r6, #25688	; 0x6458
   18694:	movt	r6, #4
   18698:	b	186b4 <__assert_fail@plt+0x60f0>
   1869c:	ldr	r3, [r5]
   186a0:	mov	r2, r7
   186a4:	mov	r1, r6
   186a8:	bl	1230c <fprintf@plt>
   186ac:	add	r4, r4, #1
   186b0:	add	r5, r5, #12
   186b4:	ldr	r0, [r8]
   186b8:	cmp	r4, #1
   186bc:	beq	1869c <__assert_fail@plt+0x60d8>
   186c0:	ldr	r3, [r5]
   186c4:	movw	r2, #25560	; 0x63d8
   186c8:	movt	r2, #4
   186cc:	mov	r1, r6
   186d0:	bl	1230c <fprintf@plt>
   186d4:	cmp	r4, #8
   186d8:	bls	186ac <__assert_fail@plt+0x60e8>
   186dc:	mov	r2, #5
   186e0:	movw	r1, #25564	; 0x63dc
   186e4:	movt	r1, #4
   186e8:	mov	r0, #0
   186ec:	bl	12084 <dcgettext@plt>
   186f0:	movw	r4, #46420	; 0xb554
   186f4:	movt	r4, #5
   186f8:	ldr	r1, [r4]
   186fc:	bl	12558 <fputs@plt>
   18700:	movw	r3, #48388	; 0xbd04
   18704:	movt	r3, #5
   18708:	ldr	r1, [r3]
   1870c:	ldr	r0, [r4]
   18710:	bl	2280c <__assert_fail@plt+0x10248>
   18714:	mov	r0, #0
   18718:	bl	122a0 <exit@plt>
   1871c:	andeq	r5, r4, r0, ror #23
   18720:	bx	lr
   18724:	push	{lr}		; (str lr, [sp, #-4]!)
   18728:	vpush	{d8}
   1872c:	sub	sp, sp, #396	; 0x18c
   18730:	mov	r0, sp
   18734:	bl	1206c <uname@plt>
   18738:	cmp	r0, #0
   1873c:	movne	r0, #1
   18740:	bne	18788 <__assert_fail@plt+0x61c4>
   18744:	mov	r1, #0
   18748:	add	r0, sp, #130	; 0x82
   1874c:	bl	12384 <strtod@plt>
   18750:	vcvt.f32.f64	s16, d0
   18754:	mov	r1, sp
   18758:	movw	r0, #25632	; 0x6420
   1875c:	movt	r0, #4
   18760:	bl	11f1c <strcmp@plt>
   18764:	cmp	r0, #0
   18768:	beq	18794 <__assert_fail@plt+0x61d0>
   1876c:	mov	r1, sp
   18770:	movw	r0, #25640	; 0x6428
   18774:	movt	r0, #4
   18778:	bl	11f1c <strcmp@plt>
   1877c:	cmp	r0, #0
   18780:	movne	r0, #1
   18784:	beq	187ac <__assert_fail@plt+0x61e8>
   18788:	add	sp, sp, #396	; 0x18c
   1878c:	vpop	{d8}
   18790:	pop	{pc}		; (ldr pc, [sp], #4)
   18794:	vldr	s15, [pc, #40]	; 187c4 <__assert_fail@plt+0x6200>
   18798:	vcmpe.f32	s16, s15
   1879c:	vmrs	APSR_nzcv, fpscr
   187a0:	movge	r0, #1
   187a4:	movlt	r0, #0
   187a8:	b	18788 <__assert_fail@plt+0x61c4>
   187ac:	vldr	s15, [pc, #20]	; 187c8 <__assert_fail@plt+0x6204>
   187b0:	vcmpe.f32	s16, s15
   187b4:	vmrs	APSR_nzcv, fpscr
   187b8:	movge	r0, #1
   187bc:	movlt	r0, #0
   187c0:	b	18788 <__assert_fail@plt+0x61c4>
   187c4:	andmi	ip, ip, sp, asr #25
   187c8:	submi	r6, r6, r6, ror #12
   187cc:	movw	r3, #48704	; 0xbe40
   187d0:	movt	r3, #5
   187d4:	ldrb	r3, [r3, #32]
   187d8:	cmp	r3, #0
   187dc:	bxeq	lr
   187e0:	str	r4, [sp, #-8]!
   187e4:	str	lr, [sp, #4]
   187e8:	bl	167a4 <__assert_fail@plt+0x41e0>
   187ec:	bl	18210 <__assert_fail@plt+0x5c4c>
   187f0:	movw	r3, #48704	; 0xbe40
   187f4:	movt	r3, #5
   187f8:	mov	r2, #0
   187fc:	strb	r2, [r3, #32]
   18800:	ldr	r4, [sp]
   18804:	add	sp, sp, #4
   18808:	pop	{pc}		; (ldr pc, [sp], #4)
   1880c:	str	r4, [sp, #-8]!
   18810:	str	lr, [sp, #4]
   18814:	sub	sp, sp, #8
   18818:	mov	r0, #8
   1881c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   18820:	movw	r3, #46444	; 0xb56c
   18824:	movt	r3, #5
   18828:	str	r0, [r3]
   1882c:	bl	2d560 <__assert_fail@plt+0x1af9c>
   18830:	cmp	r0, #0
   18834:	bne	18848 <__assert_fail@plt+0x6284>
   18838:	add	sp, sp, #8
   1883c:	ldr	r4, [sp]
   18840:	add	sp, sp, #4
   18844:	pop	{pc}		; (ldr pc, [sp], #4)
   18848:	bl	12318 <__errno_location@plt>
   1884c:	ldr	r4, [r0]
   18850:	mov	r2, #5
   18854:	movw	r1, #25648	; 0x6430
   18858:	movt	r1, #4
   1885c:	mov	r0, #0
   18860:	bl	12084 <dcgettext@plt>
   18864:	mov	r2, r0
   18868:	movw	r3, #46444	; 0xb56c
   1886c:	movt	r3, #5
   18870:	ldr	r3, [r3]
   18874:	ldr	r1, [r3]
   18878:	cmp	r1, #0
   1887c:	blt	1889c <__assert_fail@plt+0x62d8>
   18880:	movw	r3, #25528	; 0x63b8
   18884:	movt	r3, #4
   18888:	mov	r1, r3
   1888c:	str	r1, [sp]
   18890:	mov	r1, r4
   18894:	mov	r0, #1
   18898:	bl	121bc <error@plt>
   1889c:	ldr	r1, [r3, #4]
   188a0:	cmp	r1, #0
   188a4:	beq	188b8 <__assert_fail@plt+0x62f4>
   188a8:	ldr	r1, [r3, #4]
   188ac:	movw	r3, #29764	; 0x7444
   188b0:	movt	r3, #4
   188b4:	b	1888c <__assert_fail@plt+0x62c8>
   188b8:	movwne	r3, #25528	; 0x63b8
   188bc:	movtne	r3, #4
   188c0:	bne	1888c <__assert_fail@plt+0x62c8>
   188c4:	movw	r3, #25528	; 0x63b8
   188c8:	movt	r3, #4
   188cc:	mov	r1, r3
   188d0:	b	1888c <__assert_fail@plt+0x62c8>
   188d4:	strd	r4, [sp, #-12]!
   188d8:	str	lr, [sp, #8]
   188dc:	sub	sp, sp, #12
   188e0:	mov	r5, r1
   188e4:	movw	r3, #48704	; 0xbe40
   188e8:	movt	r3, #5
   188ec:	ldr	r1, [r3, #16]
   188f0:	cmn	r1, #100	; 0x64
   188f4:	cmpne	r1, #0
   188f8:	blt	18940 <__assert_fail@plt+0x637c>
   188fc:	mov	r4, r0
   18900:	movw	r3, #48704	; 0xbe40
   18904:	movt	r3, #5
   18908:	ldr	r3, [r3]
   1890c:	cmp	r3, #0
   18910:	bne	18970 <__assert_fail@plt+0x63ac>
   18914:	str	r3, [sp]
   18918:	mov	r3, r5
   1891c:	mov	r2, r0
   18920:	mov	r0, #3
   18924:	bl	120fc <__fxstatat64@plt>
   18928:	cmp	r0, #0
   1892c:	bne	1895c <__assert_fail@plt+0x6398>
   18930:	add	sp, sp, #12
   18934:	ldrd	r4, [sp]
   18938:	add	sp, sp, #8
   1893c:	pop	{pc}		; (ldr pc, [sp], #4)
   18940:	ldr	r3, [pc, #68]	; 1898c <__assert_fail@plt+0x63c8>
   18944:	movw	r2, #605	; 0x25d
   18948:	movw	r1, #23692	; 0x5c8c
   1894c:	movt	r1, #4
   18950:	movw	r0, #25696	; 0x6460
   18954:	movt	r0, #4
   18958:	bl	125c4 <__assert_fail@plt>
   1895c:	mov	r2, r0
   18960:	mov	r1, r5
   18964:	mov	r0, r4
   18968:	bl	18378 <__assert_fail@plt+0x5db4>
   1896c:	b	18930 <__assert_fail@plt+0x636c>
   18970:	mov	r3, #256	; 0x100
   18974:	str	r3, [sp]
   18978:	mov	r3, r5
   1897c:	mov	r2, r0
   18980:	mov	r0, #3
   18984:	bl	120fc <__fxstatat64@plt>
   18988:	b	18930 <__assert_fail@plt+0x636c>
   1898c:	andeq	r5, r4, ip, asr #24
   18990:	strd	r4, [sp, #-12]!
   18994:	str	lr, [sp, #8]
   18998:	sub	sp, sp, #12
   1899c:	mov	r5, r1
   189a0:	movw	r3, #48704	; 0xbe40
   189a4:	movt	r3, #5
   189a8:	ldr	r1, [r3, #16]
   189ac:	cmn	r1, #100	; 0x64
   189b0:	cmpne	r1, #0
   189b4:	blt	189ec <__assert_fail@plt+0x6428>
   189b8:	mov	r4, r0
   189bc:	mov	r3, #0
   189c0:	str	r3, [sp]
   189c4:	mov	r3, r5
   189c8:	mov	r2, r0
   189cc:	mov	r0, #3
   189d0:	bl	120fc <__fxstatat64@plt>
   189d4:	cmp	r0, #0
   189d8:	bne	18a08 <__assert_fail@plt+0x6444>
   189dc:	add	sp, sp, #12
   189e0:	ldrd	r4, [sp]
   189e4:	add	sp, sp, #8
   189e8:	pop	{pc}		; (ldr pc, [sp], #4)
   189ec:	ldr	r3, [pc, #40]	; 18a1c <__assert_fail@plt+0x6458>
   189f0:	mov	r2, #636	; 0x27c
   189f4:	movw	r1, #23692	; 0x5c8c
   189f8:	movt	r1, #4
   189fc:	movw	r0, #25696	; 0x6460
   18a00:	movt	r0, #4
   18a04:	bl	125c4 <__assert_fail@plt>
   18a08:	mov	r2, r0
   18a0c:	mov	r1, r5
   18a10:	mov	r0, r4
   18a14:	bl	18378 <__assert_fail@plt+0x5db4>
   18a18:	b	189dc <__assert_fail@plt+0x6418>
   18a1c:	andeq	r5, r4, ip, asr ip
   18a20:	push	{lr}		; (str lr, [sp, #-4]!)
   18a24:	sub	sp, sp, #12
   18a28:	movw	ip, #48704	; 0xbe40
   18a2c:	movt	ip, #5
   18a30:	ldr	ip, [ip, #16]
   18a34:	cmn	ip, #100	; 0x64
   18a38:	cmpne	ip, #0
   18a3c:	blt	18a64 <__assert_fail@plt+0x64a0>
   18a40:	mov	r3, #256	; 0x100
   18a44:	str	r3, [sp]
   18a48:	mov	r3, r1
   18a4c:	mov	r2, r0
   18a50:	mov	r1, ip
   18a54:	mov	r0, #3
   18a58:	bl	120fc <__fxstatat64@plt>
   18a5c:	add	sp, sp, #12
   18a60:	pop	{pc}		; (ldr pc, [sp], #4)
   18a64:	ldr	r3, [pc, #20]	; 18a80 <__assert_fail@plt+0x64bc>
   18a68:	movw	r2, #653	; 0x28d
   18a6c:	movw	r1, #23692	; 0x5c8c
   18a70:	movt	r1, #4
   18a74:	movw	r0, #25720	; 0x6478
   18a78:	movt	r0, #4
   18a7c:	bl	125c4 <__assert_fail@plt>
   18a80:	andeq	r5, r4, ip, ror #24
   18a84:	strd	r4, [sp, #-16]!
   18a88:	str	r6, [sp, #8]
   18a8c:	str	lr, [sp, #12]
   18a90:	mov	r4, r0
   18a94:	mov	r5, r1
   18a98:	movw	r3, #46480	; 0xb590
   18a9c:	movt	r3, #5
   18aa0:	ldr	r2, [r3]
   18aa4:	ldr	r1, [r3, #4]
   18aa8:	adds	r2, r2, #1
   18aac:	adc	r1, r1, #0
   18ab0:	str	r2, [r3]
   18ab4:	str	r1, [r3, #4]
   18ab8:	movw	r3, #46408	; 0xb548
   18abc:	movt	r3, #5
   18ac0:	mov	r2, r0
   18ac4:	movw	r1, #25776	; 0x64b0
   18ac8:	movt	r1, #4
   18acc:	ldr	r0, [r3]
   18ad0:	bl	1230c <fprintf@plt>
   18ad4:	movw	r3, #48748	; 0xbe6c
   18ad8:	movt	r3, #5
   18adc:	ldr	r3, [r3, #48]	; 0x30
   18ae0:	cmp	r3, #1
   18ae4:	beq	18b08 <__assert_fail@plt+0x6544>
   18ae8:	cmp	r3, #0
   18aec:	beq	18b24 <__assert_fail@plt+0x6560>
   18af0:	cmp	r3, #2
   18af4:	bne	18b34 <__assert_fail@plt+0x6570>
   18af8:	mov	r1, r5
   18afc:	mov	r0, r4
   18b00:	bl	188d4 <__assert_fail@plt+0x6310>
   18b04:	b	18b14 <__assert_fail@plt+0x6550>
   18b08:	mov	r1, r5
   18b0c:	mov	r0, r4
   18b10:	bl	18990 <__assert_fail@plt+0x63cc>
   18b14:	ldrd	r4, [sp]
   18b18:	ldr	r6, [sp, #8]
   18b1c:	add	sp, sp, #12
   18b20:	pop	{pc}		; (ldr pc, [sp], #4)
   18b24:	mov	r1, r5
   18b28:	mov	r0, r4
   18b2c:	bl	18a20 <__assert_fail@plt+0x645c>
   18b30:	b	18b14 <__assert_fail@plt+0x6550>
   18b34:	ldr	r3, [pc, #20]	; 18b50 <__assert_fail@plt+0x658c>
   18b38:	movw	r2, #677	; 0x2a5
   18b3c:	movw	r1, #23692	; 0x5c8c
   18b40:	movt	r1, #4
   18b44:	movw	r0, #36300	; 0x8dcc
   18b48:	movt	r0, #4
   18b4c:	bl	125c4 <__assert_fail@plt>
   18b50:	andeq	r5, r4, ip, ror ip
   18b54:	movw	r3, #48748	; 0xbe6c
   18b58:	movt	r3, #5
   18b5c:	ldr	r3, [r3, #48]	; 0x30
   18b60:	cmp	r3, #1
   18b64:	beq	18b88 <__assert_fail@plt+0x65c4>
   18b68:	cmp	r3, #2
   18b6c:	bne	18b90 <__assert_fail@plt+0x65cc>
   18b70:	movw	r3, #48704	; 0xbe40
   18b74:	movt	r3, #5
   18b78:	ldr	r0, [r3]
   18b7c:	clz	r0, r0
   18b80:	lsr	r0, r0, #5
   18b84:	bx	lr
   18b88:	mov	r0, #1
   18b8c:	bx	lr
   18b90:	mov	r0, #0
   18b94:	bx	lr
   18b98:	subs	r3, r0, #0
   18b9c:	beq	18bd0 <__assert_fail@plt+0x660c>
   18ba0:	ldrb	r0, [r3, #17]
   18ba4:	cmp	r0, #0
   18ba8:	bne	18bd8 <__assert_fail@plt+0x6614>
   18bac:	ldr	r3, [r3, #152]	; 0x98
   18bb0:	cmp	r3, #0
   18bb4:	beq	18bc8 <__assert_fail@plt+0x6604>
   18bb8:	ldrb	r2, [r3, #17]
   18bbc:	cmp	r2, #0
   18bc0:	beq	18bac <__assert_fail@plt+0x65e8>
   18bc4:	bx	lr
   18bc8:	mov	r0, #1
   18bcc:	bx	lr
   18bd0:	mov	r0, #1
   18bd4:	bx	lr
   18bd8:	mov	r0, #0
   18bdc:	b	18bc4 <__assert_fail@plt+0x6600>
   18be0:	ldrb	r3, [r0]
   18be4:	sub	r3, r3, #33	; 0x21
   18be8:	cmp	r3, #12
   18bec:	ldrls	pc, [pc, r3, lsl #2]
   18bf0:	b	18c5c <__assert_fail@plt+0x6698>
   18bf4:	andeq	r8, r1, ip, asr #24
   18bf8:	andeq	r8, r1, ip, asr ip
   18bfc:	andeq	r8, r1, ip, asr ip
   18c00:	andeq	r8, r1, ip, asr ip
   18c04:	andeq	r8, r1, ip, asr ip
   18c08:	andeq	r8, r1, ip, asr ip
   18c0c:	andeq	r8, r1, ip, asr ip
   18c10:	andeq	r8, r1, ip, asr #24
   18c14:	andeq	r8, r1, r8, lsr ip
   18c18:	andeq	r8, r1, ip, asr ip
   18c1c:	andeq	r8, r1, ip, asr ip
   18c20:	andeq	r8, r1, r8, lsr ip
   18c24:	andeq	r8, r1, r8, lsr #24
   18c28:	ldrb	r0, [r0, #1]
   18c2c:	adds	r0, r0, #0
   18c30:	movne	r0, #1
   18c34:	bx	lr
   18c38:	ldrb	r3, [r0, #1]
   18c3c:	cmp	r3, #0
   18c40:	bne	18c64 <__assert_fail@plt+0x66a0>
   18c44:	eor	r0, r1, #1
   18c48:	bx	lr
   18c4c:	ldrb	r0, [r0, #1]
   18c50:	clz	r0, r0
   18c54:	lsr	r0, r0, #5
   18c58:	bx	lr
   18c5c:	mov	r0, #0
   18c60:	bx	lr
   18c64:	mov	r0, #0
   18c68:	bx	lr
   18c6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c70:	strd	r6, [sp, #8]
   18c74:	strd	r8, [sp, #16]
   18c78:	strd	sl, [sp, #24]
   18c7c:	str	lr, [sp, #32]
   18c80:	sub	sp, sp, #28
   18c84:	cmp	r0, #1
   18c88:	ble	19084 <__assert_fail@plt+0x6ac0>
   18c8c:	mov	fp, r1
   18c90:	mov	r9, r0
   18c94:	mov	r6, #1
   18c98:	movw	r3, #25796	; 0x64c4
   18c9c:	movt	r3, #4
   18ca0:	str	r3, [sp]
   18ca4:	movw	r3, #25800	; 0x64c8
   18ca8:	movt	r3, #4
   18cac:	str	r3, [sp, #4]
   18cb0:	movw	sl, #23472	; 0x5bb0
   18cb4:	movt	sl, #4
   18cb8:	movw	r3, #25856	; 0x6500
   18cbc:	movt	r3, #4
   18cc0:	str	r3, [sp, #12]
   18cc4:	b	18cdc <__assert_fail@plt+0x6718>
   18cc8:	mov	r0, #2
   18ccc:	bl	1fe70 <__assert_fail@plt+0xd8ac>
   18cd0:	add	r6, r6, #1
   18cd4:	cmp	r9, r6
   18cd8:	ble	18dd4 <__assert_fail@plt+0x6810>
   18cdc:	lsl	r5, r6, #2
   18ce0:	ldr	r4, [fp, r6, lsl #2]
   18ce4:	mov	r1, r4
   18ce8:	ldr	r0, [sp]
   18cec:	bl	11f1c <strcmp@plt>
   18cf0:	cmp	r0, #0
   18cf4:	beq	18cc8 <__assert_fail@plt+0x6704>
   18cf8:	mov	r1, r4
   18cfc:	ldr	r0, [sp, #4]
   18d00:	bl	11f1c <strcmp@plt>
   18d04:	cmp	r0, #0
   18d08:	beq	18dbc <__assert_fail@plt+0x67f8>
   18d0c:	mov	r1, r4
   18d10:	movw	r0, #25804	; 0x64cc
   18d14:	movt	r0, #4
   18d18:	bl	11f1c <strcmp@plt>
   18d1c:	cmp	r0, #0
   18d20:	beq	18dc8 <__assert_fail@plt+0x6804>
   18d24:	mov	r1, r4
   18d28:	movw	r0, #25808	; 0x64d0
   18d2c:	movt	r0, #4
   18d30:	bl	11f1c <strcmp@plt>
   18d34:	cmp	r0, #0
   18d38:	beq	18dd0 <__assert_fail@plt+0x680c>
   18d3c:	mov	r1, r4
   18d40:	movw	r0, #25812	; 0x64d4
   18d44:	movt	r0, #4
   18d48:	bl	11f1c <strcmp@plt>
   18d4c:	cmp	r0, #0
   18d50:	bne	18ed0 <__assert_fail@plt+0x690c>
   18d54:	add	r6, r6, #1
   18d58:	cmp	r6, r9
   18d5c:	bge	18df4 <__assert_fail@plt+0x6830>
   18d60:	add	r5, fp, r5
   18d64:	ldr	r0, [r5, #4]
   18d68:	str	r0, [sp, #8]
   18d6c:	mov	r3, #0
   18d70:	str	r3, [sp, #20]
   18d74:	mov	r3, #44	; 0x2c
   18d78:	strh	r3, [sp, #16]
   18d7c:	add	r2, sp, #20
   18d80:	add	r1, sp, #16
   18d84:	bl	121b0 <strtok_r@plt>
   18d88:	subs	r8, r0, #0
   18d8c:	bne	18e5c <__assert_fail@plt+0x6898>
   18d90:	mov	r2, #5
   18d94:	movw	r1, #26164	; 0x6634
   18d98:	movt	r1, #4
   18d9c:	mov	r0, #0
   18da0:	bl	12084 <dcgettext@plt>
   18da4:	mov	r2, r0
   18da8:	mov	r1, #0
   18dac:	mov	r0, r1
   18db0:	bl	121bc <error@plt>
   18db4:	mov	r0, #1
   18db8:	bl	184d8 <__assert_fail@plt+0x5f14>
   18dbc:	mov	r0, #1
   18dc0:	bl	1fe70 <__assert_fail@plt+0xd8ac>
   18dc4:	b	18cd0 <__assert_fail@plt+0x670c>
   18dc8:	bl	1fe70 <__assert_fail@plt+0xd8ac>
   18dcc:	b	18cd0 <__assert_fail@plt+0x670c>
   18dd0:	add	r6, r6, #1
   18dd4:	mov	r0, r6
   18dd8:	add	sp, sp, #28
   18ddc:	ldrd	r4, [sp]
   18de0:	ldrd	r6, [sp, #8]
   18de4:	ldrd	r8, [sp, #16]
   18de8:	ldrd	sl, [sp, #24]
   18dec:	add	sp, sp, #32
   18df0:	pop	{pc}		; (ldr pc, [sp], #4)
   18df4:	mov	r2, #5
   18df8:	movw	r1, #25816	; 0x64d8
   18dfc:	movt	r1, #4
   18e00:	bl	12084 <dcgettext@plt>
   18e04:	mov	r2, r0
   18e08:	mov	r1, #0
   18e0c:	mov	r0, r1
   18e10:	bl	121bc <error@plt>
   18e14:	mov	r0, #1
   18e18:	bl	184d8 <__assert_fail@plt+0x5f14>
   18e1c:	movw	r3, #48748	; 0xbe6c
   18e20:	movt	r3, #5
   18e24:	add	r1, r4, r4, lsl #1
   18e28:	add	r1, sl, r1, lsl #2
   18e2c:	ldr	r2, [r3, #44]	; 0x2c
   18e30:	ldr	r1, [r1, #52]	; 0x34
   18e34:	orr	r2, r2, r1
   18e38:	str	r2, [r3, #44]	; 0x2c
   18e3c:	cmp	r4, #8
   18e40:	bhi	18e8c <__assert_fail@plt+0x68c8>
   18e44:	add	r2, sp, #20
   18e48:	add	r1, sp, #16
   18e4c:	mov	r0, #0
   18e50:	bl	121b0 <strtok_r@plt>
   18e54:	subs	r8, r0, #0
   18e58:	beq	1908c <__assert_fail@plt+0x6ac8>
   18e5c:	add	r7, sl, #48	; 0x30
   18e60:	mov	r5, r7
   18e64:	mov	r4, #0
   18e68:	mov	r1, r8
   18e6c:	ldr	r0, [r5]
   18e70:	bl	11f1c <strcmp@plt>
   18e74:	cmp	r0, #0
   18e78:	beq	18e1c <__assert_fail@plt+0x6858>
   18e7c:	add	r4, r4, #1
   18e80:	add	r5, r5, #12
   18e84:	cmp	r4, #9
   18e88:	bne	18e68 <__assert_fail@plt+0x68a4>
   18e8c:	mov	r2, #5
   18e90:	ldr	r1, [sp, #12]
   18e94:	mov	r0, #0
   18e98:	bl	12084 <dcgettext@plt>
   18e9c:	mov	r4, r0
   18ea0:	movw	r3, #48748	; 0xbe6c
   18ea4:	movt	r3, #5
   18ea8:	ldr	r2, [sp, #8]
   18eac:	ldr	r1, [r3, #72]	; 0x48
   18eb0:	mov	r0, #0
   18eb4:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   18eb8:	mov	r3, r0
   18ebc:	mov	r2, r4
   18ec0:	mov	r1, #0
   18ec4:	mov	r0, r1
   18ec8:	bl	121bc <error@plt>
   18ecc:	b	18e44 <__assert_fail@plt+0x6880>
   18ed0:	mov	r2, #2
   18ed4:	mov	r1, r4
   18ed8:	movw	r0, #25904	; 0x6530
   18edc:	movt	r0, #4
   18ee0:	bl	12564 <strncmp@plt>
   18ee4:	cmp	r0, #0
   18ee8:	bne	18dd4 <__assert_fail@plt+0x6810>
   18eec:	add	r7, r4, #2
   18ef0:	ldrb	r4, [r4, #2]
   18ef4:	cmp	r4, #0
   18ef8:	beq	18f6c <__assert_fail@plt+0x69a8>
   18efc:	bl	12288 <__ctype_b_loc@plt>
   18f00:	ldr	r3, [r0]
   18f04:	lsl	r4, r4, #1
   18f08:	ldrh	r3, [r3, r4]
   18f0c:	tst	r3, #2048	; 0x800
   18f10:	beq	18f8c <__assert_fail@plt+0x69c8>
   18f14:	bl	12318 <__errno_location@plt>
   18f18:	mov	r4, r0
   18f1c:	ldr	r8, [r0]
   18f20:	mov	r3, #0
   18f24:	str	r3, [r0]
   18f28:	mov	r2, #10
   18f2c:	add	r1, sp, #20
   18f30:	mov	r0, r7
   18f34:	bl	122c4 <strtoul@plt>
   18f38:	cmp	r0, #0
   18f3c:	bne	18fd4 <__assert_fail@plt+0x6a10>
   18f40:	ldr	r3, [sp, #20]
   18f44:	cmp	r7, r3
   18f48:	beq	18fb0 <__assert_fail@plt+0x69ec>
   18f4c:	ldrb	r3, [r3]
   18f50:	cmp	r3, #0
   18f54:	bne	19024 <__assert_fail@plt+0x6a60>
   18f58:	movw	r3, #48748	; 0xbe6c
   18f5c:	movt	r3, #5
   18f60:	strh	r0, [r3, #68]	; 0x44
   18f64:	str	r8, [r4]
   18f68:	b	18cd0 <__assert_fail@plt+0x670c>
   18f6c:	mov	r2, #5
   18f70:	movw	r1, #25908	; 0x6534
   18f74:	movt	r1, #4
   18f78:	bl	12084 <dcgettext@plt>
   18f7c:	mov	r2, r0
   18f80:	mov	r1, #0
   18f84:	mov	r0, #1
   18f88:	bl	121bc <error@plt>
   18f8c:	mov	r2, #5
   18f90:	movw	r1, #25972	; 0x6574
   18f94:	movt	r1, #4
   18f98:	mov	r0, #0
   18f9c:	bl	12084 <dcgettext@plt>
   18fa0:	mov	r2, r0
   18fa4:	mov	r1, #0
   18fa8:	mov	r0, #1
   18fac:	bl	121bc <error@plt>
   18fb0:	mov	r2, #5
   18fb4:	movw	r1, #25972	; 0x6574
   18fb8:	movt	r1, #4
   18fbc:	mov	r0, #0
   18fc0:	bl	12084 <dcgettext@plt>
   18fc4:	mov	r2, r0
   18fc8:	mov	r1, #0
   18fcc:	mov	r0, #1
   18fd0:	bl	121bc <error@plt>
   18fd4:	ldr	r3, [sp, #20]
   18fd8:	ldrb	r3, [r3]
   18fdc:	cmp	r3, #0
   18fe0:	bne	19024 <__assert_fail@plt+0x6a60>
   18fe4:	cmn	r0, #1
   18fe8:	bne	19074 <__assert_fail@plt+0x6ab0>
   18fec:	mov	r5, r0
   18ff0:	ldr	r4, [r4]
   18ff4:	cmp	r4, #0
   18ff8:	bne	1904c <__assert_fail@plt+0x6a88>
   18ffc:	mov	r2, #5
   19000:	movw	r1, #26060	; 0x65cc
   19004:	movt	r1, #4
   19008:	mov	r0, #0
   1900c:	bl	12084 <dcgettext@plt>
   19010:	mov	r3, r5
   19014:	mov	r2, r0
   19018:	mov	r1, #0
   1901c:	mov	r0, #1
   19020:	bl	121bc <error@plt>
   19024:	mov	r2, #5
   19028:	movw	r1, #26028	; 0x65ac
   1902c:	movt	r1, #4
   19030:	mov	r0, #0
   19034:	bl	12084 <dcgettext@plt>
   19038:	mov	r3, r7
   1903c:	mov	r2, r0
   19040:	mov	r1, #0
   19044:	mov	r0, #1
   19048:	bl	121bc <error@plt>
   1904c:	mov	r2, #5
   19050:	movw	r1, #26028	; 0x65ac
   19054:	movt	r1, #4
   19058:	mov	r0, #0
   1905c:	bl	12084 <dcgettext@plt>
   19060:	mov	r3, r7
   19064:	mov	r2, r0
   19068:	mov	r1, r4
   1906c:	mov	r0, #1
   19070:	bl	121bc <error@plt>
   19074:	cmp	r0, #65536	; 0x10000
   19078:	bcc	18f58 <__assert_fail@plt+0x6994>
   1907c:	mov	r5, r0
   19080:	b	18ffc <__assert_fail@plt+0x6a38>
   19084:	mov	r6, #1
   19088:	b	18dd4 <__assert_fail@plt+0x6810>
   1908c:	movw	r3, #48748	; 0xbe6c
   19090:	movt	r3, #5
   19094:	ldr	r3, [r3, #44]	; 0x2c
   19098:	tst	r3, #16
   1909c:	beq	18cd0 <__assert_fail@plt+0x670c>
   190a0:	mov	r2, #5
   190a4:	movw	r1, #25532	; 0x63bc
   190a8:	movt	r1, #4
   190ac:	mov	r0, #0
   190b0:	bl	12084 <dcgettext@plt>
   190b4:	movw	r3, #46420	; 0xb554
   190b8:	movt	r3, #5
   190bc:	ldr	r1, [r3]
   190c0:	bl	12558 <fputs@plt>
   190c4:	add	r6, r7, #108	; 0x6c
   190c8:	movw	r5, #25892	; 0x6524
   190cc:	movt	r5, #4
   190d0:	movw	r4, #46420	; 0xb554
   190d4:	movt	r4, #5
   190d8:	ldr	r3, [r7, #8]
   190dc:	ldr	r2, [r7], #12
   190e0:	mov	r1, r5
   190e4:	ldr	r0, [r4]
   190e8:	bl	1230c <fprintf@plt>
   190ec:	cmp	r7, r6
   190f0:	bne	190d8 <__assert_fail@plt+0x6b14>
   190f4:	mov	r0, #0
   190f8:	bl	122a0 <exit@plt>
   190fc:	strd	r4, [sp, #-12]!
   19100:	str	lr, [sp, #8]
   19104:	sub	sp, sp, #12
   19108:	mov	r4, r0
   1910c:	movw	r0, #26200	; 0x6658
   19110:	movt	r0, #4
   19114:	bl	121f8 <getenv@plt>
   19118:	adds	r0, r0, #0
   1911c:	movne	r0, #1
   19120:	strb	r0, [r4, #17]
   19124:	bl	18724 <__assert_fail@plt+0x6160>
   19128:	strb	r0, [r4, #56]	; 0x38
   1912c:	mov	r0, #0
   19130:	str	r0, [r4, #60]	; 0x3c
   19134:	bl	12534 <isatty@plt>
   19138:	cmp	r0, #0
   1913c:	beq	1922c <__assert_fail@plt+0x6c68>
   19140:	mov	r3, #1
   19144:	strb	r3, [r4, #16]
   19148:	mov	r3, #0
   1914c:	strb	r3, [r4, #15]
   19150:	ldrb	r3, [r4, #17]
   19154:	cmp	r3, #0
   19158:	movne	r3, #0
   1915c:	strbne	r3, [r4, #16]
   19160:	mov	r3, #1
   19164:	strb	r3, [r4]
   19168:	mov	r1, #0
   1916c:	strb	r1, [r4, #1]
   19170:	mvn	r3, #0
   19174:	str	r3, [r4, #8]
   19178:	str	r3, [r4, #4]
   1917c:	mov	r0, sp
   19180:	bl	1218c <gettimeofday@plt>
   19184:	cmp	r0, #0
   19188:	bne	1923c <__assert_fail@plt+0x6c78>
   1918c:	ldr	r0, [sp]
   19190:	ldr	r2, [sp, #4]
   19194:	mov	r3, #1000	; 0x3e8
   19198:	mul	r3, r3, r2
   1919c:	str	r0, [r4, #20]
   191a0:	str	r3, [r4, #24]
   191a4:	sub	r0, r0, #86016	; 0x15000
   191a8:	sub	r0, r0, #384	; 0x180
   191ac:	str	r0, [r4, #28]
   191b0:	str	r3, [r4, #32]
   191b4:	mov	r3, #0
   191b8:	strb	r3, [r4, #36]	; 0x24
   191bc:	strb	r3, [r4, #13]
   191c0:	strb	r3, [r4, #14]
   191c4:	ldrb	r3, [r4, #17]
   191c8:	cmp	r3, #0
   191cc:	movne	r3, #512	; 0x200
   191d0:	moveq	r3, #1024	; 0x400
   191d4:	str	r3, [r4, #40]	; 0x28
   191d8:	mov	r3, #0
   191dc:	str	r3, [r4, #44]	; 0x2c
   191e0:	mov	r3, #2
   191e4:	strh	r3, [r4, #68]	; 0x44
   191e8:	movw	r0, #26232	; 0x6678
   191ec:	movt	r0, #4
   191f0:	bl	121f8 <getenv@plt>
   191f4:	cmp	r0, #0
   191f8:	bne	1926c <__assert_fail@plt+0x6ca8>
   191fc:	mov	r5, #0
   19200:	strb	r5, [r4, #12]
   19204:	mov	r0, r5
   19208:	bl	1fe70 <__assert_fail@plt+0xd8ac>
   1920c:	mov	r3, #8
   19210:	str	r3, [r4, #72]	; 0x48
   19214:	str	r5, [r4, #76]	; 0x4c
   19218:	strb	r5, [r4, #80]	; 0x50
   1921c:	add	sp, sp, #12
   19220:	ldrd	r4, [sp]
   19224:	add	sp, sp, #8
   19228:	pop	{pc}		; (ldr pc, [sp], #4)
   1922c:	mov	r3, #0
   19230:	strb	r3, [r4, #16]
   19234:	strb	r3, [r4, #15]
   19238:	b	19150 <__assert_fail@plt+0x6b8c>
   1923c:	mov	r0, #0
   19240:	bl	12054 <time@plt>
   19244:	cmn	r0, #1
   19248:	movne	r3, #0
   1924c:	bne	1919c <__assert_fail@plt+0x6bd8>
   19250:	ldr	r3, [pc, #56]	; 19290 <__assert_fail@plt+0x6ccc>
   19254:	movw	r2, #978	; 0x3d2
   19258:	movw	r1, #23692	; 0x5c8c
   1925c:	movt	r1, #4
   19260:	movw	r0, #26216	; 0x6668
   19264:	movt	r0, #4
   19268:	bl	125c4 <__assert_fail@plt>
   1926c:	mov	r2, #5
   19270:	movw	r1, #26248	; 0x6688
   19274:	movt	r1, #4
   19278:	mov	r0, #0
   1927c:	bl	12084 <dcgettext@plt>
   19280:	mov	r2, r0
   19284:	mov	r1, #0
   19288:	mov	r0, #1
   1928c:	bl	121bc <error@plt>
   19290:	andeq	r5, r4, r8, lsl #25
   19294:	movw	r2, #18496	; 0x4840
   19298:	movt	r2, #1
   1929c:	movw	r3, #16828	; 0x41bc
   192a0:	movt	r3, #1
   192a4:	cmp	r3, r0
   192a8:	cmpne	r2, r0
   192ac:	moveq	r0, #1
   192b0:	movne	r0, #0
   192b4:	bx	lr
   192b8:	str	r4, [sp, #-8]!
   192bc:	str	lr, [sp, #4]
   192c0:	movw	r3, #48748	; 0xbe6c
   192c4:	movt	r3, #5
   192c8:	mov	r2, r1
   192cc:	ldr	r1, [r3, #72]	; 0x48
   192d0:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   192d4:	ldr	r4, [sp]
   192d8:	add	sp, sp, #4
   192dc:	pop	{pc}		; (ldr pc, [sp], #4)
   192e0:	strd	r4, [sp, #-16]!
   192e4:	str	r6, [sp, #8]
   192e8:	str	lr, [sp, #12]
   192ec:	mov	r4, r0
   192f0:	mov	r5, r1
   192f4:	cmp	r2, #0
   192f8:	beq	19368 <__assert_fail@plt+0x6da4>
   192fc:	movw	r2, #48704	; 0xbe40
   19300:	movt	r2, #5
   19304:	ldrb	r2, [r2, #40]	; 0x28
   19308:	cmp	r2, #0
   1930c:	beq	19330 <__assert_fail@plt+0x6d6c>
   19310:	movw	r3, #48704	; 0xbe40
   19314:	movt	r3, #5
   19318:	mov	r2, #1
   1931c:	strb	r2, [r3, #40]	; 0x28
   19320:	ldrd	r4, [sp]
   19324:	ldr	r6, [sp, #8]
   19328:	add	sp, sp, #12
   1932c:	pop	{pc}		; (ldr pc, [sp], #4)
   19330:	mov	r1, r3
   19334:	mov	r0, #0
   19338:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1933c:	mov	r3, r0
   19340:	movw	r2, #35960	; 0x8c78
   19344:	movt	r2, #4
   19348:	mov	r1, r5
   1934c:	mov	r0, r4
   19350:	bl	121bc <error@plt>
   19354:	movw	r3, #48704	; 0xbe40
   19358:	movt	r3, #5
   1935c:	mov	r2, #1
   19360:	str	r2, [r3, #28]
   19364:	b	19310 <__assert_fail@plt+0x6d4c>
   19368:	mov	r1, r3
   1936c:	mov	r0, #0
   19370:	bl	192b8 <__assert_fail@plt+0x6cf4>
   19374:	mov	r3, r0
   19378:	movw	r2, #35960	; 0x8c78
   1937c:	movt	r2, #4
   19380:	mov	r1, r5
   19384:	mov	r0, r4
   19388:	bl	121bc <error@plt>
   1938c:	movw	r3, #48704	; 0xbe40
   19390:	movt	r3, #5
   19394:	mov	r2, #1
   19398:	str	r2, [r3, #28]
   1939c:	b	19320 <__assert_fail@plt+0x6d5c>
   193a0:	str	r4, [sp, #-8]!
   193a4:	str	lr, [sp, #4]
   193a8:	mov	r3, r1
   193ac:	mov	r2, #1
   193b0:	mov	r1, r0
   193b4:	mov	r0, #0
   193b8:	bl	192e0 <__assert_fail@plt+0x6d1c>
   193bc:	ldr	r4, [sp]
   193c0:	add	sp, sp, #4
   193c4:	pop	{pc}		; (ldr pc, [sp], #4)
   193c8:	strd	r4, [sp, #-16]!
   193cc:	str	r6, [sp, #8]
   193d0:	str	lr, [sp, #12]
   193d4:	mov	r4, r2
   193d8:	movw	r3, #48704	; 0xbe40
   193dc:	movt	r3, #5
   193e0:	ldrb	r3, [r3, #4]
   193e4:	cmp	r3, #0
   193e8:	bne	19420 <__assert_fail@plt+0x6e5c>
   193ec:	mov	r6, r0
   193f0:	mov	r5, r1
   193f4:	movw	r3, #48748	; 0xbe6c
   193f8:	movt	r3, #5
   193fc:	ldr	r3, [r3, #52]	; 0x34
   19400:	mov	r1, r2
   19404:	mov	r0, r5
   19408:	blx	r3
   1940c:	cmp	r0, #0
   19410:	bne	194a4 <__assert_fail@plt+0x6ee0>
   19414:	ldr	r3, [r4, #16]
   19418:	cmp	r3, #0
   1941c:	beq	19450 <__assert_fail@plt+0x6e8c>
   19420:	movw	r3, #48704	; 0xbe40
   19424:	movt	r3, #5
   19428:	mov	r2, #1
   1942c:	strb	r2, [r3, #4]
   19430:	strb	r2, [r3, #5]
   19434:	ldr	r2, [r4, #16]
   19438:	str	r2, [r3, #8]
   1943c:	mov	r0, #0
   19440:	ldrd	r4, [sp]
   19444:	ldr	r6, [sp, #8]
   19448:	add	sp, sp, #12
   1944c:	pop	{pc}		; (ldr pc, [sp], #4)
   19450:	mov	r2, #5
   19454:	movw	r1, #18600	; 0x48a8
   19458:	movt	r1, #4
   1945c:	bl	12084 <dcgettext@plt>
   19460:	mov	r6, r0
   19464:	movw	r3, #48748	; 0xbe6c
   19468:	movt	r3, #5
   1946c:	mov	r2, r5
   19470:	ldr	r1, [r3, #72]	; 0x48
   19474:	mov	r0, #0
   19478:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1947c:	mov	r3, r0
   19480:	mov	r2, r6
   19484:	mov	r1, #0
   19488:	mov	r0, r1
   1948c:	bl	121bc <error@plt>
   19490:	movw	r3, #48704	; 0xbe40
   19494:	movt	r3, #5
   19498:	mov	r2, #1
   1949c:	str	r2, [r3, #28]
   194a0:	b	19420 <__assert_fail@plt+0x6e5c>
   194a4:	movw	r3, #48748	; 0xbe6c
   194a8:	movt	r3, #5
   194ac:	ldrb	r3, [r3, #14]
   194b0:	cmp	r3, #0
   194b4:	beq	194cc <__assert_fail@plt+0x6f08>
   194b8:	bl	12318 <__errno_location@plt>
   194bc:	ldr	r3, [r0]
   194c0:	cmp	r3, #2
   194c4:	mvneq	r0, #0
   194c8:	beq	19440 <__assert_fail@plt+0x6e7c>
   194cc:	bl	12318 <__errno_location@plt>
   194d0:	mov	r1, r6
   194d4:	ldr	r0, [r0]
   194d8:	bl	193a0 <__assert_fail@plt+0x6ddc>
   194dc:	mvn	r0, #0
   194e0:	b	19440 <__assert_fail@plt+0x6e7c>
   194e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   194e8:	strd	r6, [sp, #8]
   194ec:	str	r8, [sp, #16]
   194f0:	str	lr, [sp, #20]
   194f4:	mov	r5, r0
   194f8:	mov	r7, r1
   194fc:	mov	r8, r2
   19500:	mov	r6, r3
   19504:	ldrb	r4, [sp, #24]
   19508:	ldr	r3, [r0]
   1950c:	cmp	r3, #0
   19510:	beq	1959c <__assert_fail@plt+0x6fd8>
   19514:	and	r3, r3, #61440	; 0xf000
   19518:	cmp	r3, #40960	; 0xa000
   1951c:	beq	19554 <__assert_fail@plt+0x6f90>
   19520:	movw	r3, #48704	; 0xbe40
   19524:	movt	r3, #5
   19528:	mov	r4, #1
   1952c:	strb	r4, [r3, #5]
   19530:	ldr	r2, [r5]
   19534:	str	r2, [r3, #8]
   19538:	str	r2, [r6, #16]
   1953c:	mov	r0, r4
   19540:	ldrd	r4, [sp]
   19544:	ldrd	r6, [sp, #8]
   19548:	ldr	r8, [sp, #16]
   1954c:	add	sp, sp, #20
   19550:	pop	{pc}		; (ldr pc, [sp], #4)
   19554:	bl	18b54 <__assert_fail@plt+0x6590>
   19558:	subs	r4, r0, #0
   1955c:	beq	19520 <__assert_fail@plt+0x6f5c>
   19560:	mov	r2, r6
   19564:	mov	r1, r8
   19568:	mov	r0, r7
   1956c:	bl	193c8 <__assert_fail@plt+0x6e04>
   19570:	cmp	r0, #0
   19574:	movne	r4, #0
   19578:	bne	1953c <__assert_fail@plt+0x6f78>
   1957c:	ldr	r2, [r6, #16]
   19580:	movw	r3, #48704	; 0xbe40
   19584:	movt	r3, #5
   19588:	str	r2, [r3, #8]
   1958c:	str	r2, [r5]
   19590:	mov	r2, #1
   19594:	strb	r2, [r3, #5]
   19598:	b	1953c <__assert_fail@plt+0x6f78>
   1959c:	cmp	r4, #0
   195a0:	beq	195c0 <__assert_fail@plt+0x6ffc>
   195a4:	movw	r3, #48704	; 0xbe40
   195a8:	movt	r3, #5
   195ac:	mov	r2, #0
   195b0:	strb	r2, [r3, #4]
   195b4:	strb	r2, [r3, #5]
   195b8:	str	r2, [r3, #8]
   195bc:	b	1953c <__assert_fail@plt+0x6f78>
   195c0:	mov	r2, r6
   195c4:	mov	r1, r8
   195c8:	mov	r0, r7
   195cc:	bl	193c8 <__assert_fail@plt+0x6e04>
   195d0:	cmp	r0, #0
   195d4:	bne	1953c <__assert_fail@plt+0x6f78>
   195d8:	ldr	r2, [r6, #16]
   195dc:	str	r2, [r5]
   195e0:	movw	r3, #48704	; 0xbe40
   195e4:	movt	r3, #5
   195e8:	str	r2, [r3, #8]
   195ec:	mov	r4, #1
   195f0:	strb	r4, [r3, #5]
   195f4:	b	1953c <__assert_fail@plt+0x6f78>
   195f8:	strd	r4, [sp, #-16]!
   195fc:	str	r6, [sp, #8]
   19600:	str	lr, [sp, #12]
   19604:	mov	r6, r0
   19608:	mov	r5, r1
   1960c:	mov	r4, r2
   19610:	ldr	r3, [r2, #164]	; 0xa4
   19614:	add	r3, r3, #1
   19618:	str	r3, [r2, #164]	; 0xa4
   1961c:	ldrh	r3, [r2, #18]
   19620:	cmp	r3, #0
   19624:	bne	19634 <__assert_fail@plt+0x7070>
   19628:	ldrb	r3, [r2, #20]
   1962c:	cmp	r3, #0
   19630:	beq	196d4 <__assert_fail@plt+0x7110>
   19634:	ldrb	r3, [r4, #18]
   19638:	cmp	r3, #0
   1963c:	beq	19654 <__assert_fail@plt+0x7090>
   19640:	movw	r3, #48704	; 0xbe40
   19644:	movt	r3, #5
   19648:	ldrb	r3, [r3, #4]
   1964c:	cmp	r3, #0
   19650:	beq	196b0 <__assert_fail@plt+0x70ec>
   19654:	ldrb	r3, [r4, #19]
   19658:	cmp	r3, #0
   1965c:	beq	19674 <__assert_fail@plt+0x70b0>
   19660:	movw	r3, #48704	; 0xbe40
   19664:	movt	r3, #5
   19668:	ldrb	r3, [r3, #5]
   1966c:	cmp	r3, #0
   19670:	beq	196b0 <__assert_fail@plt+0x70ec>
   19674:	ldrb	r3, [r4, #20]
   19678:	cmp	r3, #0
   1967c:	beq	196d4 <__assert_fail@plt+0x7110>
   19680:	ldrd	r2, [r5, #96]	; 0x60
   19684:	orrs	r3, r2, r3
   19688:	beq	196b0 <__assert_fail@plt+0x70ec>
   1968c:	movw	r3, #48704	; 0xbe40
   19690:	movt	r3, #5
   19694:	ldrb	r3, [r3, #5]
   19698:	cmp	r3, #0
   1969c:	beq	196b0 <__assert_fail@plt+0x70ec>
   196a0:	ldr	r3, [r5, #16]
   196a4:	and	r3, r3, #61440	; 0xf000
   196a8:	cmp	r3, #16384	; 0x4000
   196ac:	bne	196d4 <__assert_fail@plt+0x7110>
   196b0:	movw	r3, #48704	; 0xbe40
   196b4:	movt	r3, #5
   196b8:	mov	r2, r5
   196bc:	ldr	r1, [r3, #12]
   196c0:	mov	r0, r6
   196c4:	bl	193c8 <__assert_fail@plt+0x6e04>
   196c8:	cmp	r0, #0
   196cc:	movne	r0, #0
   196d0:	bne	196fc <__assert_fail@plt+0x7138>
   196d4:	ldr	r3, [r4]
   196d8:	mov	r2, r4
   196dc:	mov	r1, r5
   196e0:	mov	r0, r6
   196e4:	blx	r3
   196e8:	cmp	r0, #0
   196ec:	beq	196fc <__assert_fail@plt+0x7138>
   196f0:	ldr	r3, [r4, #168]	; 0xa8
   196f4:	add	r3, r3, #1
   196f8:	str	r3, [r4, #168]	; 0xa8
   196fc:	ldrd	r4, [sp]
   19700:	ldr	r6, [sp, #8]
   19704:	add	sp, sp, #12
   19708:	pop	{pc}		; (ldr pc, [sp], #4)
   1970c:	str	r4, [sp, #-8]!
   19710:	str	lr, [sp, #4]
   19714:	mov	r3, r1
   19718:	mov	r2, #1
   1971c:	mov	r1, r0
   19720:	mov	r0, r2
   19724:	bl	192e0 <__assert_fail@plt+0x6d1c>
   19728:	bl	12570 <abort@plt>
   1972c:	str	r4, [sp, #-8]!
   19730:	str	lr, [sp, #4]
   19734:	mov	r3, r1
   19738:	mov	r2, #0
   1973c:	mov	r1, r0
   19740:	mov	r0, r2
   19744:	bl	192e0 <__assert_fail@plt+0x6d1c>
   19748:	ldr	r4, [sp]
   1974c:	add	sp, sp, #4
   19750:	pop	{pc}		; (ldr pc, [sp], #4)
   19754:	str	r4, [sp, #-8]!
   19758:	str	lr, [sp, #4]
   1975c:	sub	sp, sp, #8
   19760:	bl	167a4 <__assert_fail@plt+0x41e0>
   19764:	subs	r4, r0, #0
   19768:	beq	198c4 <__assert_fail@plt+0x7300>
   1976c:	movw	r1, #33552	; 0x8310
   19770:	movt	r1, #1
   19774:	mov	r0, r4
   19778:	bl	1816c <__assert_fail@plt+0x5ba8>
   1977c:	bl	187cc <__assert_fail@plt+0x6208>
   19780:	movw	r3, #48704	; 0xbe40
   19784:	movt	r3, #5
   19788:	ldr	r0, [r3, #36]	; 0x24
   1978c:	bl	19a88 <__assert_fail@plt+0x74c4>
   19790:	movw	r1, #33212	; 0x81bc
   19794:	movt	r1, #1
   19798:	mov	r0, r4
   1979c:	bl	1816c <__assert_fail@plt+0x5ba8>
   197a0:	movw	r3, #46444	; 0xb56c
   197a4:	movt	r3, #5
   197a8:	ldr	r0, [r3]
   197ac:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   197b0:	cmp	r0, #0
   197b4:	bne	1980c <__assert_fail@plt+0x7248>
   197b8:	movw	r4, #46444	; 0xb56c
   197bc:	movt	r4, #5
   197c0:	ldr	r0, [r4]
   197c4:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   197c8:	ldr	r0, [r4]
   197cc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   197d0:	mov	r3, #0
   197d4:	str	r3, [r4]
   197d8:	bl	215c8 <__assert_fail@plt+0xf004>
   197dc:	cmp	r0, #0
   197e0:	bne	198a0 <__assert_fail@plt+0x72dc>
   197e4:	movw	r3, #46420	; 0xb554
   197e8:	movt	r3, #5
   197ec:	ldr	r0, [r3]
   197f0:	bl	2fb38 <__assert_fail@plt+0x1d574>
   197f4:	cmn	r0, #1
   197f8:	beq	198ac <__assert_fail@plt+0x72e8>
   197fc:	add	sp, sp, #8
   19800:	ldr	r4, [sp]
   19804:	add	sp, sp, #4
   19808:	pop	{pc}		; (ldr pc, [sp], #4)
   1980c:	bl	12318 <__errno_location@plt>
   19810:	ldr	r4, [r0]
   19814:	mov	r2, #5
   19818:	movw	r1, #26396	; 0x671c
   1981c:	movt	r1, #4
   19820:	mov	r0, #0
   19824:	bl	12084 <dcgettext@plt>
   19828:	mov	r2, r0
   1982c:	movw	r3, #46444	; 0xb56c
   19830:	movt	r3, #5
   19834:	ldr	r3, [r3]
   19838:	ldr	r1, [r3]
   1983c:	cmp	r1, #0
   19840:	blt	19868 <__assert_fail@plt+0x72a4>
   19844:	movw	r3, #25528	; 0x63b8
   19848:	movt	r3, #4
   1984c:	mov	r1, r3
   19850:	str	r1, [sp]
   19854:	mov	r1, r4
   19858:	mov	r0, #0
   1985c:	bl	121bc <error@plt>
   19860:	mov	r0, #1
   19864:	bl	11ff4 <_exit@plt>
   19868:	ldr	r1, [r3, #4]
   1986c:	cmp	r1, #0
   19870:	beq	19884 <__assert_fail@plt+0x72c0>
   19874:	ldr	r1, [r3, #4]
   19878:	movw	r3, #29764	; 0x7444
   1987c:	movt	r3, #4
   19880:	b	19850 <__assert_fail@plt+0x728c>
   19884:	movwne	r3, #25528	; 0x63b8
   19888:	movtne	r3, #4
   1988c:	bne	19850 <__assert_fail@plt+0x728c>
   19890:	movw	r3, #25528	; 0x63b8
   19894:	movt	r3, #4
   19898:	mov	r1, r3
   1989c:	b	19850 <__assert_fail@plt+0x728c>
   198a0:	bl	215f0 <__assert_fail@plt+0xf02c>
   198a4:	bl	21598 <__assert_fail@plt+0xefd4>
   198a8:	b	197e4 <__assert_fail@plt+0x7220>
   198ac:	bl	12318 <__errno_location@plt>
   198b0:	movw	r1, #26444	; 0x674c
   198b4:	movt	r1, #4
   198b8:	ldr	r0, [r0]
   198bc:	bl	1972c <__assert_fail@plt+0x7168>
   198c0:	b	197fc <__assert_fail@plt+0x7238>
   198c4:	movw	r3, #48704	; 0xbe40
   198c8:	movt	r3, #5
   198cc:	ldr	r0, [r3, #36]	; 0x24
   198d0:	bl	19a88 <__assert_fail@plt+0x74c4>
   198d4:	b	197a0 <__assert_fail@plt+0x71dc>
   198d8:	str	r4, [sp, #-8]!
   198dc:	str	lr, [sp, #4]
   198e0:	movw	r3, #48704	; 0xbe40
   198e4:	movt	r3, #5
   198e8:	mov	r2, #0
   198ec:	strb	r2, [r3, #40]	; 0x28
   198f0:	mov	r3, r1
   198f4:	mov	r1, r0
   198f8:	mov	r0, #1
   198fc:	bl	192e0 <__assert_fail@plt+0x6d1c>
   19900:	bl	12570 <abort@plt>
   19904:	strd	r4, [sp, #-8]!
   19908:	ldrd	r4, [r0, #8]
   1990c:	ldrd	r2, [r1, #8]
   19910:	cmp	r5, r3
   19914:	cmpeq	r4, r2
   19918:	movne	r0, #0
   1991c:	beq	1992c <__assert_fail@plt+0x7368>
   19920:	ldrd	r4, [sp]
   19924:	add	sp, sp, #8
   19928:	bx	lr
   1992c:	ldrd	r4, [r0]
   19930:	ldrd	r2, [r1]
   19934:	cmp	r5, r3
   19938:	cmpeq	r4, r2
   1993c:	moveq	r0, #1
   19940:	movne	r0, #0
   19944:	b	19920 <__assert_fail@plt+0x735c>
   19948:	strd	r4, [sp, #-16]!
   1994c:	str	r6, [sp, #8]
   19950:	str	lr, [sp, #12]
   19954:	ldr	r5, [r0]
   19958:	ldr	lr, [r0, #4]
   1995c:	ldr	r4, [r0, #8]
   19960:	ldr	ip, [r0, #12]
   19964:	mov	r2, r1
   19968:	mov	r3, #0
   1996c:	eor	r0, r5, r4
   19970:	eor	r1, lr, ip
   19974:	bl	443f0 <__assert_fail@plt+0x31e2c>
   19978:	mov	r0, r2
   1997c:	ldrd	r4, [sp]
   19980:	ldr	r6, [sp, #8]
   19984:	add	sp, sp, #12
   19988:	pop	{pc}		; (ldr pc, [sp], #4)
   1998c:	str	r4, [sp, #-8]!
   19990:	str	lr, [sp, #4]
   19994:	mov	r4, r0
   19998:	ldr	r0, [r0, #20]
   1999c:	cmp	r0, #0
   199a0:	beq	199b0 <__assert_fail@plt+0x73ec>
   199a4:	bl	123cc <fclose@plt>
   199a8:	cmp	r0, #0
   199ac:	bne	199cc <__assert_fail@plt+0x7408>
   199b0:	ldr	r0, [r4, #16]
   199b4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   199b8:	mov	r0, r4
   199bc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   199c0:	ldr	r4, [sp]
   199c4:	add	sp, sp, #4
   199c8:	pop	{pc}		; (ldr pc, [sp], #4)
   199cc:	bl	12318 <__errno_location@plt>
   199d0:	ldr	r1, [r4, #16]
   199d4:	ldr	r0, [r0]
   199d8:	bl	198d8 <__assert_fail@plt+0x7314>
   199dc:	strd	r4, [sp, #-12]!
   199e0:	str	lr, [sp, #8]
   199e4:	sub	sp, sp, #12
   199e8:	mov	r5, r0
   199ec:	mov	r0, #8
   199f0:	bl	32148 <__assert_fail@plt+0x1fb84>
   199f4:	subs	r4, r0, #0
   199f8:	beq	19a4c <__assert_fail@plt+0x7488>
   199fc:	mov	r0, r5
   19a00:	bl	12090 <strdup@plt>
   19a04:	mov	r5, r0
   19a08:	str	r0, [r4]
   19a0c:	cmp	r0, #0
   19a10:	beq	19a78 <__assert_fail@plt+0x74b4>
   19a14:	movw	r3, #39308	; 0x998c
   19a18:	movt	r3, #1
   19a1c:	str	r3, [sp]
   19a20:	movw	r3, #39172	; 0x9904
   19a24:	movt	r3, #1
   19a28:	movw	r2, #39240	; 0x9948
   19a2c:	movt	r2, #1
   19a30:	mov	r1, #0
   19a34:	mov	r0, #11
   19a38:	bl	23c5c <__assert_fail@plt+0x11698>
   19a3c:	mov	r5, r0
   19a40:	str	r0, [r4, #4]
   19a44:	cmp	r0, #0
   19a48:	beq	19a60 <__assert_fail@plt+0x749c>
   19a4c:	mov	r0, r4
   19a50:	add	sp, sp, #12
   19a54:	ldrd	r4, [sp]
   19a58:	add	sp, sp, #8
   19a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a60:	ldr	r0, [r4]
   19a64:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   19a68:	mov	r0, r4
   19a6c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   19a70:	mov	r4, r5
   19a74:	b	19a4c <__assert_fail@plt+0x7488>
   19a78:	mov	r0, r4
   19a7c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   19a80:	mov	r4, r5
   19a84:	b	19a4c <__assert_fail@plt+0x7488>
   19a88:	str	r4, [sp, #-8]!
   19a8c:	str	lr, [sp, #4]
   19a90:	mov	r4, r0
   19a94:	ldr	r0, [r0]
   19a98:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   19a9c:	ldr	r0, [r4, #4]
   19aa0:	bl	23e28 <__assert_fail@plt+0x11864>
   19aa4:	ldr	r4, [sp]
   19aa8:	add	sp, sp, #4
   19aac:	pop	{pc}		; (ldr pc, [sp], #4)
   19ab0:	strd	r4, [sp, #-20]!	; 0xffffffec
   19ab4:	strd	r6, [sp, #8]
   19ab8:	str	lr, [sp, #16]
   19abc:	sub	sp, sp, #108	; 0x6c
   19ac0:	mov	r7, r0
   19ac4:	mov	r5, r1
   19ac8:	mov	r0, #24
   19acc:	bl	32148 <__assert_fail@plt+0x1fb84>
   19ad0:	subs	r4, r0, #0
   19ad4:	beq	19b6c <__assert_fail@plt+0x75a8>
   19ad8:	mov	r0, r5
   19adc:	bl	12090 <strdup@plt>
   19ae0:	mov	r6, r0
   19ae4:	str	r0, [r4, #16]
   19ae8:	cmp	r0, #0
   19aec:	beq	19b84 <__assert_fail@plt+0x75c0>
   19af0:	ldr	r1, [r7]
   19af4:	mov	r0, r5
   19af8:	bl	231dc <__assert_fail@plt+0x10c18>
   19afc:	mov	r5, r0
   19b00:	str	r0, [r4, #20]
   19b04:	cmp	r0, #0
   19b08:	beq	19b94 <__assert_fail@plt+0x75d0>
   19b0c:	bl	12390 <fileno@plt>
   19b10:	subs	r5, r0, #0
   19b14:	blt	19ba4 <__assert_fail@plt+0x75e0>
   19b18:	mov	r1, #1
   19b1c:	mov	r0, r5
   19b20:	bl	22bf0 <__assert_fail@plt+0x1062c>
   19b24:	mov	r2, sp
   19b28:	mov	r1, r5
   19b2c:	mov	r0, #3
   19b30:	bl	1212c <__fxstat64@plt>
   19b34:	cmp	r0, #0
   19b38:	blt	19bc4 <__assert_fail@plt+0x7600>
   19b3c:	ldrd	r2, [sp]
   19b40:	strd	r2, [r4]
   19b44:	ldrd	r2, [sp, #96]	; 0x60
   19b48:	strd	r2, [r4, #8]
   19b4c:	mov	r1, r4
   19b50:	ldr	r0, [r7, #4]
   19b54:	bl	23968 <__assert_fail@plt+0x113a4>
   19b58:	subs	r5, r0, #0
   19b5c:	beq	19bd4 <__assert_fail@plt+0x7610>
   19b60:	mov	r0, r4
   19b64:	bl	1998c <__assert_fail@plt+0x73c8>
   19b68:	ldr	r4, [r5, #20]
   19b6c:	mov	r0, r4
   19b70:	add	sp, sp, #108	; 0x6c
   19b74:	ldrd	r4, [sp]
   19b78:	ldrd	r6, [sp, #8]
   19b7c:	add	sp, sp, #16
   19b80:	pop	{pc}		; (ldr pc, [sp], #4)
   19b84:	mov	r0, r4
   19b88:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   19b8c:	mov	r4, r6
   19b90:	b	19b6c <__assert_fail@plt+0x75a8>
   19b94:	mov	r0, r4
   19b98:	bl	1998c <__assert_fail@plt+0x73c8>
   19b9c:	mov	r4, r5
   19ba0:	b	19b6c <__assert_fail@plt+0x75a8>
   19ba4:	movw	r3, #26936	; 0x6938
   19ba8:	movt	r3, #4
   19bac:	mov	r2, #166	; 0xa6
   19bb0:	movw	r1, #26952	; 0x6948
   19bb4:	movt	r1, #4
   19bb8:	movw	r0, #19196	; 0x4afc
   19bbc:	movt	r0, #4
   19bc0:	bl	125c4 <__assert_fail@plt>
   19bc4:	mov	r0, r4
   19bc8:	bl	1998c <__assert_fail@plt+0x73c8>
   19bcc:	mov	r4, #0
   19bd0:	b	19b6c <__assert_fail@plt+0x75a8>
   19bd4:	mov	r1, r4
   19bd8:	ldr	r0, [r7, #4]
   19bdc:	bl	24210 <__assert_fail@plt+0x11c4c>
   19be0:	subs	r5, r0, #0
   19be4:	beq	19bf0 <__assert_fail@plt+0x762c>
   19be8:	ldr	r4, [r4, #20]
   19bec:	b	19b6c <__assert_fail@plt+0x75a8>
   19bf0:	bl	12318 <__errno_location@plt>
   19bf4:	mov	r6, r0
   19bf8:	ldr	r7, [r0]
   19bfc:	mov	r0, r4
   19c00:	bl	1998c <__assert_fail@plt+0x73c8>
   19c04:	str	r7, [r6]
   19c08:	mov	r4, r5
   19c0c:	b	19b6c <__assert_fail@plt+0x75a8>
   19c10:	cmp	r0, #32768	; 0x8000
   19c14:	beq	19c60 <__assert_fail@plt+0x769c>
   19c18:	cmp	r0, #16384	; 0x4000
   19c1c:	beq	19c6c <__assert_fail@plt+0x76a8>
   19c20:	cmp	r0, #40960	; 0xa000
   19c24:	beq	19c78 <__assert_fail@plt+0x76b4>
   19c28:	cmp	r0, #49152	; 0xc000
   19c2c:	beq	19c84 <__assert_fail@plt+0x76c0>
   19c30:	cmp	r0, #24576	; 0x6000
   19c34:	beq	19c90 <__assert_fail@plt+0x76cc>
   19c38:	cmp	r0, #8192	; 0x2000
   19c3c:	beq	19c9c <__assert_fail@plt+0x76d8>
   19c40:	movw	r3, #27116	; 0x69ec
   19c44:	movt	r3, #4
   19c48:	movw	r2, #21800	; 0x5528
   19c4c:	movt	r2, #4
   19c50:	cmp	r0, #4096	; 0x1000
   19c54:	movne	r0, r3
   19c58:	moveq	r0, r2
   19c5c:	bx	lr
   19c60:	movw	r0, #36128	; 0x8d20
   19c64:	movt	r0, #4
   19c68:	bx	lr
   19c6c:	movw	r0, #39300	; 0x9984
   19c70:	movt	r0, #4
   19c74:	bx	lr
   19c78:	movw	r0, #20412	; 0x4fbc
   19c7c:	movt	r0, #4
   19c80:	bx	lr
   19c84:	movw	r0, #31068	; 0x795c
   19c88:	movt	r0, #4
   19c8c:	bx	lr
   19c90:	movw	r0, #41768	; 0xa328
   19c94:	movt	r0, #4
   19c98:	bx	lr
   19c9c:	movw	r0, #18032	; 0x4670
   19ca0:	movt	r0, #4
   19ca4:	bx	lr
   19ca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19cac:	strd	r6, [sp, #8]
   19cb0:	strd	r8, [sp, #16]
   19cb4:	strd	sl, [sp, #24]
   19cb8:	str	lr, [sp, #32]
   19cbc:	sub	sp, sp, #148	; 0x94
   19cc0:	add	r3, sp, #48	; 0x30
   19cc4:	stm	r3, {r0, r1}
   19cc8:	cmp	r2, #43	; 0x2b
   19ccc:	beq	19d5c <__assert_fail@plt+0x7798>
   19cd0:	mov	r4, r2
   19cd4:	mov	r3, #37	; 0x25
   19cd8:	strb	r3, [sp, #100]	; 0x64
   19cdc:	strb	r2, [sp, #101]	; 0x65
   19ce0:	mov	r3, #0
   19ce4:	strb	r3, [sp, #102]	; 0x66
   19ce8:	sub	r3, r2, #64	; 0x40
   19cec:	cmp	r3, #24
   19cf0:	ldrls	pc, [pc, r3, lsl #2]
   19cf4:	b	19e54 <__assert_fail@plt+0x7890>
   19cf8:	andeq	r9, r1, r8, ror #28
   19cfc:	andeq	r9, r1, r4, asr lr
   19d00:	andeq	r9, r1, r4, asr lr
   19d04:	andeq	r9, r1, r4, asr lr
   19d08:	andeq	r9, r1, r4, asr lr
   19d0c:	andeq	r9, r1, r4, asr lr
   19d10:	andeq	r9, r1, r4, asr lr
   19d14:	andeq	r9, r1, r4, asr lr
   19d18:	andeq	r9, r1, r4, asr lr
   19d1c:	andeq	r9, r1, r4, asr lr
   19d20:	andeq	r9, r1, r4, asr lr
   19d24:	andeq	r9, r1, r4, asr lr
   19d28:	andeq	r9, r1, r4, asr lr
   19d2c:	andeq	r9, r1, r4, asr lr
   19d30:	andeq	r9, r1, r4, asr lr
   19d34:	andeq	r9, r1, r4, asr lr
   19d38:	andeq	r9, r1, r4, asr lr
   19d3c:	andeq	r9, r1, r4, asr lr
   19d40:	andeq	r9, r1, r4, asr lr
   19d44:	andeq	r9, r1, r8, ror #28
   19d48:	andeq	r9, r1, r8, ror #28
   19d4c:	andeq	r9, r1, r4, asr lr
   19d50:	andeq	r9, r1, r4, asr lr
   19d54:	andeq	r9, r1, r4, asr lr
   19d58:	andeq	r9, r1, r8, ror #28
   19d5c:	movw	r3, #27320	; 0x6ab8
   19d60:	movt	r3, #4
   19d64:	ldrd	r0, [r3]
   19d68:	strd	r0, [sp, #100]	; 0x64
   19d6c:	ldr	r3, [r3, #8]
   19d70:	str	r3, [sp, #108]	; 0x6c
   19d74:	ldr	r3, [sp, #52]	; 0x34
   19d78:	movw	r2, #27120	; 0x69f0
   19d7c:	movt	r2, #4
   19d80:	mov	r1, #32
   19d84:	add	r0, sp, #112	; 0x70
   19d88:	bl	12330 <snprintf@plt>
   19d8c:	str	r0, [sp, #24]
   19d90:	mov	r3, #1
   19d94:	str	r3, [sp, #16]
   19d98:	add	r0, sp, #48	; 0x30
   19d9c:	bl	1224c <localtime@plt>
   19da0:	subs	r6, r0, #0
   19da4:	beq	19e94 <__assert_fail@plt+0x78d0>
   19da8:	ldr	r3, [sp, #24]
   19dac:	str	r3, [sp, #28]
   19db0:	add	r0, sp, #100	; 0x64
   19db4:	bl	122d0 <strlen@plt>
   19db8:	add	r0, r0, #2
   19dbc:	bl	2e348 <__assert_fail@plt+0x1bd84>
   19dc0:	str	r0, [sp, #20]
   19dc4:	mov	r4, r0
   19dc8:	mov	r3, #95	; 0x5f
   19dcc:	strb	r3, [r4], #1
   19dd0:	add	r0, sp, #100	; 0x64
   19dd4:	bl	122d0 <strlen@plt>
   19dd8:	add	r2, r0, #1
   19ddc:	add	r1, sp, #100	; 0x64
   19de0:	mov	r0, r4
   19de4:	bl	12000 <memcpy@plt>
   19de8:	ldrd	r2, [r6]
   19dec:	strd	r2, [sp, #56]	; 0x38
   19df0:	ldrd	r2, [r6, #8]
   19df4:	strd	r2, [sp, #64]	; 0x40
   19df8:	ldrd	r2, [r6, #16]
   19dfc:	strd	r2, [sp, #72]	; 0x48
   19e00:	ldrd	r2, [r6, #24]
   19e04:	strd	r2, [sp, #80]	; 0x50
   19e08:	ldrd	r2, [r6, #32]
   19e0c:	strd	r2, [sp, #88]	; 0x58
   19e10:	ldr	r3, [r6, #40]	; 0x28
   19e14:	str	r3, [sp, #96]	; 0x60
   19e18:	ldr	r3, [sp, #56]	; 0x38
   19e1c:	cmp	r3, #10
   19e20:	subgt	r3, r3, #11
   19e24:	addle	r3, r3, #11
   19e28:	str	r3, [sp, #56]	; 0x38
   19e2c:	movw	r3, #46488	; 0xb598
   19e30:	movt	r3, #5
   19e34:	ldr	r3, [r3]
   19e38:	cmp	r3, #0
   19e3c:	beq	19f64 <__assert_fail@plt+0x79a0>
   19e40:	movw	r4, #46488	; 0xb598
   19e44:	movt	r4, #5
   19e48:	add	r8, r4, #4
   19e4c:	mov	r7, #1
   19e50:	b	1a028 <__assert_fail@plt+0x7a64>
   19e54:	mov	r3, #0
   19e58:	strb	r3, [sp, #112]	; 0x70
   19e5c:	str	r3, [sp, #16]
   19e60:	str	r3, [sp, #24]
   19e64:	b	19e8c <__assert_fail@plt+0x78c8>
   19e68:	ldr	r3, [sp, #52]	; 0x34
   19e6c:	movw	r2, #27120	; 0x69f0
   19e70:	movt	r2, #4
   19e74:	mov	r1, #32
   19e78:	add	r0, sp, #112	; 0x70
   19e7c:	bl	12330 <snprintf@plt>
   19e80:	str	r0, [sp, #24]
   19e84:	mov	r3, #1
   19e88:	str	r3, [sp, #16]
   19e8c:	cmp	r4, #64	; 0x40
   19e90:	bne	19d98 <__assert_fail@plt+0x77d4>
   19e94:	ldr	r3, [sp, #48]	; 0x30
   19e98:	mov	r0, r3
   19e9c:	asr	r1, r3, #31
   19ea0:	cmp	r3, #0
   19ea4:	blt	1a0dc <__assert_fail@plt+0x7b18>
   19ea8:	movw	r2, #46488	; 0xb598
   19eac:	movt	r2, #5
   19eb0:	add	r5, r2, #8
   19eb4:	mov	r6, #1
   19eb8:	mov	r7, #0
   19ebc:	strd	r6, [sp, #8]
   19ec0:	strd	r6, [sp]
   19ec4:	mov	r3, #0
   19ec8:	add	r2, r2, #9
   19ecc:	bl	24428 <__assert_fail@plt+0x11e64>
   19ed0:	mov	r4, r0
   19ed4:	cmp	r0, r5
   19ed8:	bls	1a0e8 <__assert_fail@plt+0x7b24>
   19edc:	ldr	r3, [pc, #868]	; 1a248 <__assert_fail@plt+0x7c84>
   19ee0:	cmp	r0, r3
   19ee4:	bcs	1a104 <__assert_fail@plt+0x7b40>
   19ee8:	ldr	r3, [sp, #48]	; 0x30
   19eec:	cmp	r3, #0
   19ef0:	blt	1a120 <__assert_fail@plt+0x7b5c>
   19ef4:	ldr	r3, [sp, #16]
   19ef8:	cmp	r3, #0
   19efc:	beq	19f44 <__assert_fail@plt+0x7980>
   19f00:	mov	r0, r4
   19f04:	bl	122d0 <strlen@plt>
   19f08:	ldr	r5, [pc, #828]	; 1a24c <__assert_fail@plt+0x7c88>
   19f0c:	sub	r5, r4, r5
   19f10:	add	r5, r5, r0
   19f14:	movw	r3, #790	; 0x316
   19f18:	cmp	r5, r3
   19f1c:	bhi	1a130 <__assert_fail@plt+0x7b6c>
   19f20:	rsb	r5, r5, #788	; 0x314
   19f24:	add	r5, r5, #2
   19f28:	add	r0, sp, #112	; 0x70
   19f2c:	bl	122d0 <strlen@plt>
   19f30:	cmp	r0, r5
   19f34:	bcs	1a14c <__assert_fail@plt+0x7b88>
   19f38:	add	r1, sp, #112	; 0x70
   19f3c:	mov	r0, r4
   19f40:	bl	12144 <strcat@plt>
   19f44:	mov	r0, r4
   19f48:	add	sp, sp, #148	; 0x94
   19f4c:	ldrd	r4, [sp]
   19f50:	ldrd	r6, [sp, #8]
   19f54:	ldrd	r8, [sp, #16]
   19f58:	ldrd	sl, [sp, #24]
   19f5c:	add	sp, sp, #32
   19f60:	pop	{pc}		; (ldr pc, [sp], #4)
   19f64:	movw	r4, #46488	; 0xb598
   19f68:	movt	r4, #5
   19f6c:	mov	r0, #1
   19f70:	str	r0, [r4, #4]
   19f74:	bl	2e348 <__assert_fail@plt+0x1bd84>
   19f78:	str	r0, [r4]
   19f7c:	b	19e40 <__assert_fail@plt+0x787c>
   19f80:	mov	r8, r7
   19f84:	mov	r6, #1
   19f88:	mov	r9, r6
   19f8c:	add	r7, r7, #1
   19f90:	ldrb	r4, [sl, #1]!
   19f94:	cmp	r4, #0
   19f98:	beq	1a19c <__assert_fail@plt+0x7bd8>
   19f9c:	ldrb	r5, [fp, #1]!
   19fa0:	cmp	r5, #0
   19fa4:	beq	1a220 <__assert_fail@plt+0x7c5c>
   19fa8:	cmp	r4, r5
   19fac:	beq	19f8c <__assert_fail@plt+0x79c8>
   19fb0:	bl	12288 <__ctype_b_loc@plt>
   19fb4:	ldr	r3, [r0]
   19fb8:	lsl	r4, r4, #1
   19fbc:	ldrh	r2, [r3, r4]
   19fc0:	tst	r2, #2048	; 0x800
   19fc4:	beq	1a220 <__assert_fail@plt+0x7c5c>
   19fc8:	lsl	r5, r5, #1
   19fcc:	ldrh	r3, [r3, r5]
   19fd0:	tst	r3, #2048	; 0x800
   19fd4:	beq	1a220 <__assert_fail@plt+0x7c5c>
   19fd8:	cmp	r9, #0
   19fdc:	beq	19f80 <__assert_fail@plt+0x79bc>
   19fe0:	sub	r3, r7, r8
   19fe4:	cmp	r3, r6
   19fe8:	bne	1a220 <__assert_fail@plt+0x7c5c>
   19fec:	add	r6, r6, #1
   19ff0:	b	19f8c <__assert_fail@plt+0x79c8>
   19ff4:	movw	r3, #26964	; 0x6954
   19ff8:	movt	r3, #4
   19ffc:	movw	r2, #549	; 0x225
   1a000:	movw	r1, #27128	; 0x69f8
   1a004:	movt	r1, #4
   1a008:	movw	r0, #27136	; 0x6a00
   1a00c:	movt	r0, #4
   1a010:	bl	125c4 <__assert_fail@plt>
   1a014:	mov	r2, r7
   1a018:	mov	r1, r8
   1a01c:	mov	r0, r5
   1a020:	bl	2e510 <__assert_fail@plt+0x1bf4c>
   1a024:	str	r0, [r4]
   1a028:	ldr	r5, [r4]
   1a02c:	mov	r3, r6
   1a030:	ldr	r2, [sp, #20]
   1a034:	ldr	r1, [r4, #4]
   1a038:	mov	r0, r5
   1a03c:	bl	12234 <strftime@plt>
   1a040:	cmp	r0, #0
   1a044:	beq	1a014 <__assert_fail@plt+0x7a50>
   1a048:	ldr	r3, [r4, #4]
   1a04c:	cmp	r0, r3
   1a050:	bcs	1a014 <__assert_fail@plt+0x7a50>
   1a054:	mov	r9, r0
   1a058:	ldr	r3, [sp, #28]
   1a05c:	add	r3, r3, #1
   1a060:	add	r6, r3, r0
   1a064:	str	r6, [sp, #44]	; 0x2c
   1a068:	mov	r1, r6
   1a06c:	mov	r0, r5
   1a070:	bl	2e3a8 <__assert_fail@plt+0x1bde4>
   1a074:	movw	r4, #46488	; 0xb598
   1a078:	movt	r4, #5
   1a07c:	str	r0, [r4]
   1a080:	str	r6, [r4, #4]
   1a084:	mov	r0, r6
   1a088:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1a08c:	mov	fp, r0
   1a090:	str	r0, [sp, #32]
   1a094:	add	r3, sp, #56	; 0x38
   1a098:	ldr	r2, [sp, #20]
   1a09c:	ldr	r1, [r4, #4]
   1a0a0:	bl	12234 <strftime@plt>
   1a0a4:	ldr	sl, [r4]
   1a0a8:	str	sl, [sp, #36]	; 0x24
   1a0ac:	ldrb	r4, [sl]
   1a0b0:	cmp	r4, #0
   1a0b4:	beq	1a220 <__assert_fail@plt+0x7c5c>
   1a0b8:	ldrb	r5, [fp]
   1a0bc:	cmp	r5, #0
   1a0c0:	beq	1a220 <__assert_fail@plt+0x7c5c>
   1a0c4:	mov	r6, #0
   1a0c8:	mov	r8, r6
   1a0cc:	mov	r7, r6
   1a0d0:	str	r9, [sp, #40]	; 0x28
   1a0d4:	mov	r9, r6
   1a0d8:	b	19fa8 <__assert_fail@plt+0x79e4>
   1a0dc:	rsbs	r0, r3, #0
   1a0e0:	rsc	r1, r1, #0
   1a0e4:	b	19ea8 <__assert_fail@plt+0x78e4>
   1a0e8:	ldr	r3, [pc, #352]	; 1a250 <__assert_fail@plt+0x7c8c>
   1a0ec:	movw	r2, #697	; 0x2b9
   1a0f0:	movw	r1, #27128	; 0x69f8
   1a0f4:	movt	r1, #4
   1a0f8:	movw	r0, #27188	; 0x6a34
   1a0fc:	movt	r0, #4
   1a100:	bl	125c4 <__assert_fail@plt>
   1a104:	ldr	r3, [pc, #324]	; 1a250 <__assert_fail@plt+0x7c8c>
   1a108:	movw	r2, #698	; 0x2ba
   1a10c:	movw	r1, #27128	; 0x69f8
   1a110:	movt	r1, #4
   1a114:	movw	r0, #27196	; 0x6a3c
   1a118:	movt	r0, #4
   1a11c:	bl	125c4 <__assert_fail@plt>
   1a120:	mov	r3, #45	; 0x2d
   1a124:	strb	r3, [r0, #-1]
   1a128:	sub	r4, r0, #1
   1a12c:	b	19ef4 <__assert_fail@plt+0x7930>
   1a130:	ldr	r3, [pc, #280]	; 1a250 <__assert_fail@plt+0x7c8c>
   1a134:	movw	r2, #711	; 0x2c7
   1a138:	movw	r1, #27128	; 0x69f8
   1a13c:	movt	r1, #4
   1a140:	movw	r0, #27224	; 0x6a58
   1a144:	movt	r0, #4
   1a148:	bl	125c4 <__assert_fail@plt>
   1a14c:	add	r6, sp, #112	; 0x70
   1a150:	str	r6, [sp, #4]
   1a154:	str	r5, [sp]
   1a158:	ldr	r3, [sp, #24]
   1a15c:	movw	r2, #27244	; 0x6a6c
   1a160:	movt	r2, #4
   1a164:	mov	r1, #0
   1a168:	mov	r0, r1
   1a16c:	bl	121bc <error@plt>
   1a170:	mov	r0, r6
   1a174:	bl	122d0 <strlen@plt>
   1a178:	cmp	r0, r5
   1a17c:	bcc	19f38 <__assert_fail@plt+0x7974>
   1a180:	ldr	r3, [pc, #200]	; 1a250 <__assert_fail@plt+0x7c8c>
   1a184:	mov	r2, #720	; 0x2d0
   1a188:	movw	r1, #27128	; 0x69f8
   1a18c:	movt	r1, #4
   1a190:	movw	r0, #27292	; 0x6a9c
   1a194:	movt	r0, #4
   1a198:	bl	125c4 <__assert_fail@plt>
   1a19c:	ldr	r9, [sp, #40]	; 0x28
   1a1a0:	ldr	r3, [sp, #32]
   1a1a4:	ldrb	r3, [r3, r7]
   1a1a8:	cmp	r3, #0
   1a1ac:	bne	1a220 <__assert_fail@plt+0x7c5c>
   1a1b0:	cmp	r6, #2
   1a1b4:	bne	1a220 <__assert_fail@plt+0x7c5c>
   1a1b8:	bl	12288 <__ctype_b_loc@plt>
   1a1bc:	add	r8, r8, #2
   1a1c0:	ldr	r3, [sp, #36]	; 0x24
   1a1c4:	add	r4, r3, r8
   1a1c8:	ldrb	r3, [r3, r8]
   1a1cc:	ldr	r2, [r0]
   1a1d0:	lsl	r3, r3, #1
   1a1d4:	ldrh	r3, [r2, r3]
   1a1d8:	tst	r3, #2048	; 0x800
   1a1dc:	bne	1a220 <__assert_fail@plt+0x7c5c>
   1a1e0:	add	r9, r9, #1
   1a1e4:	sub	r2, r9, r8
   1a1e8:	ldr	r3, [sp, #28]
   1a1ec:	add	r8, r3, r8
   1a1f0:	add	r9, r3, r9
   1a1f4:	ldr	r3, [sp, #44]	; 0x2c
   1a1f8:	cmp	r3, r9
   1a1fc:	bne	19ff4 <__assert_fail@plt+0x7a30>
   1a200:	mov	r1, r4
   1a204:	ldr	r3, [sp, #36]	; 0x24
   1a208:	add	r0, r3, r8
   1a20c:	bl	11f94 <memmove@plt>
   1a210:	ldr	r2, [sp, #28]
   1a214:	add	r1, sp, #112	; 0x70
   1a218:	mov	r0, r4
   1a21c:	bl	12000 <memcpy@plt>
   1a220:	ldr	r0, [sp, #20]
   1a224:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1a228:	ldr	r0, [sp, #32]
   1a22c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1a230:	movw	r3, #46488	; 0xb598
   1a234:	movt	r3, #5
   1a238:	ldr	r4, [r3]
   1a23c:	adds	r4, r4, #1
   1a240:	bne	19f44 <__assert_fail@plt+0x7980>
   1a244:	b	19e94 <__assert_fail@plt+0x78d0>
   1a248:			; <UNDEFINED> instruction: 0x0005b8b7
   1a24c:	andeq	fp, r5, r0, lsr #11
   1a250:	andeq	r6, r4, r4, ror #18
   1a254:	strd	r4, [sp, #-12]!
   1a258:	str	lr, [sp, #8]
   1a25c:	sub	sp, sp, #44	; 0x2c
   1a260:	add	r3, sp, #32
   1a264:	stm	r3, {r0, r1}
   1a268:	mov	r0, r3
   1a26c:	bl	1224c <localtime@plt>
   1a270:	cmp	r0, #0
   1a274:	beq	1a440 <__assert_fail@plt+0x7e7c>
   1a278:	ldr	r2, [r0, #24]
   1a27c:	cmp	r2, #0
   1a280:	blt	1a344 <__assert_fail@plt+0x7d80>
   1a284:	cmp	r2, #6
   1a288:	bgt	1a360 <__assert_fail@plt+0x7d9c>
   1a28c:	ldr	ip, [r0, #16]
   1a290:	cmp	ip, #0
   1a294:	blt	1a37c <__assert_fail@plt+0x7db8>
   1a298:	cmp	ip, #11
   1a29c:	bgt	1a398 <__assert_fail@plt+0x7dd4>
   1a2a0:	ldr	lr, [r0, #8]
   1a2a4:	cmp	lr, #0
   1a2a8:	blt	1a3b4 <__assert_fail@plt+0x7df0>
   1a2ac:	cmp	lr, #23
   1a2b0:	bgt	1a3d0 <__assert_fail@plt+0x7e0c>
   1a2b4:	ldr	r4, [r0, #4]
   1a2b8:	cmp	r4, #59	; 0x3b
   1a2bc:	bgt	1a3ec <__assert_fail@plt+0x7e28>
   1a2c0:	ldr	r5, [r0]
   1a2c4:	cmp	r5, #61	; 0x3d
   1a2c8:	bgt	1a408 <__assert_fail@plt+0x7e44>
   1a2cc:	movw	r3, #26964	; 0x6954
   1a2d0:	movt	r3, #4
   1a2d4:	add	r2, r3, r2, lsl #2
   1a2d8:	ldr	r1, [r0, #20]
   1a2dc:	add	r1, r1, #1888	; 0x760
   1a2e0:	add	r1, r1, #12
   1a2e4:	str	r1, [sp, #24]
   1a2e8:	ldr	r1, [sp, #36]	; 0x24
   1a2ec:	str	r1, [sp, #20]
   1a2f0:	str	r5, [sp, #16]
   1a2f4:	str	r4, [sp, #12]
   1a2f8:	str	lr, [sp, #8]
   1a2fc:	ldr	r1, [r0, #12]
   1a300:	str	r1, [sp, #4]
   1a304:	add	r3, r3, ip, lsl #2
   1a308:	ldr	r3, [r3, #72]	; 0x48
   1a30c:	str	r3, [sp]
   1a310:	ldr	r3, [r2, #44]	; 0x2c
   1a314:	movw	r2, #27492	; 0x6b64
   1a318:	movt	r2, #4
   1a31c:	mov	r1, #1024	; 0x400
   1a320:	ldr	r0, [pc, #300]	; 1a454 <__assert_fail@plt+0x7e90>
   1a324:	bl	12330 <snprintf@plt>
   1a328:	cmp	r0, #1024	; 0x400
   1a32c:	ldrlt	r0, [pc, #288]	; 1a454 <__assert_fail@plt+0x7e90>
   1a330:	bge	1a424 <__assert_fail@plt+0x7e60>
   1a334:	add	sp, sp, #44	; 0x2c
   1a338:	ldrd	r4, [sp]
   1a33c:	add	sp, sp, #8
   1a340:	pop	{pc}		; (ldr pc, [sp], #4)
   1a344:	ldr	r3, [pc, #268]	; 1a458 <__assert_fail@plt+0x7e94>
   1a348:	movw	r2, #749	; 0x2ed
   1a34c:	movw	r1, #27128	; 0x69f8
   1a350:	movt	r1, #4
   1a354:	movw	r0, #27332	; 0x6ac4
   1a358:	movt	r0, #4
   1a35c:	bl	125c4 <__assert_fail@plt>
   1a360:	ldr	r3, [pc, #240]	; 1a458 <__assert_fail@plt+0x7e94>
   1a364:	movw	r2, #750	; 0x2ee
   1a368:	movw	r1, #27128	; 0x69f8
   1a36c:	movt	r1, #4
   1a370:	movw	r0, #27352	; 0x6ad8
   1a374:	movt	r0, #4
   1a378:	bl	125c4 <__assert_fail@plt>
   1a37c:	ldr	r3, [pc, #212]	; 1a458 <__assert_fail@plt+0x7e94>
   1a380:	movw	r2, #751	; 0x2ef
   1a384:	movw	r1, #27128	; 0x69f8
   1a388:	movt	r1, #4
   1a38c:	movw	r0, #27372	; 0x6aec
   1a390:	movt	r0, #4
   1a394:	bl	125c4 <__assert_fail@plt>
   1a398:	ldr	r3, [pc, #184]	; 1a458 <__assert_fail@plt+0x7e94>
   1a39c:	mov	r2, #752	; 0x2f0
   1a3a0:	movw	r1, #27128	; 0x69f8
   1a3a4:	movt	r1, #4
   1a3a8:	movw	r0, #27392	; 0x6b00
   1a3ac:	movt	r0, #4
   1a3b0:	bl	125c4 <__assert_fail@plt>
   1a3b4:	ldr	r3, [pc, #156]	; 1a458 <__assert_fail@plt+0x7e94>
   1a3b8:	movw	r2, #753	; 0x2f1
   1a3bc:	movw	r1, #27128	; 0x69f8
   1a3c0:	movt	r1, #4
   1a3c4:	movw	r0, #27412	; 0x6b14
   1a3c8:	movt	r0, #4
   1a3cc:	bl	125c4 <__assert_fail@plt>
   1a3d0:	ldr	r3, [pc, #128]	; 1a458 <__assert_fail@plt+0x7e94>
   1a3d4:	movw	r2, #754	; 0x2f2
   1a3d8:	movw	r1, #27128	; 0x69f8
   1a3dc:	movt	r1, #4
   1a3e0:	movw	r0, #27432	; 0x6b28
   1a3e4:	movt	r0, #4
   1a3e8:	bl	125c4 <__assert_fail@plt>
   1a3ec:	ldr	r3, [pc, #100]	; 1a458 <__assert_fail@plt+0x7e94>
   1a3f0:	movw	r2, #755	; 0x2f3
   1a3f4:	movw	r1, #27128	; 0x69f8
   1a3f8:	movt	r1, #4
   1a3fc:	movw	r0, #27452	; 0x6b3c
   1a400:	movt	r0, #4
   1a404:	bl	125c4 <__assert_fail@plt>
   1a408:	ldr	r3, [pc, #72]	; 1a458 <__assert_fail@plt+0x7e94>
   1a40c:	mov	r2, #756	; 0x2f4
   1a410:	movw	r1, #27128	; 0x69f8
   1a414:	movt	r1, #4
   1a418:	movw	r0, #27472	; 0x6b50
   1a41c:	movt	r0, #4
   1a420:	bl	125c4 <__assert_fail@plt>
   1a424:	ldr	r3, [pc, #44]	; 1a458 <__assert_fail@plt+0x7e94>
   1a428:	movw	r2, #770	; 0x302
   1a42c:	movw	r1, #27128	; 0x69f8
   1a430:	movt	r1, #4
   1a434:	movw	r0, #27532	; 0x6b8c
   1a438:	movt	r0, #4
   1a43c:	bl	125c4 <__assert_fail@plt>
   1a440:	mov	r2, #64	; 0x40
   1a444:	add	r3, sp, #40	; 0x28
   1a448:	ldmdb	r3, {r0, r1}
   1a44c:	bl	19ca8 <__assert_fail@plt+0x76e4>
   1a450:	b	1a334 <__assert_fail@plt+0x7d70>
   1a454:			; <UNDEFINED> instruction: 0x0005b8b8
   1a458:	andeq	r6, r4, r0, ror r9
   1a45c:	push	{r1, r2, r3}
   1a460:	str	r4, [sp, #-8]!
   1a464:	str	lr, [sp, #4]
   1a468:	sub	sp, sp, #12
   1a46c:	mov	r4, r0
   1a470:	add	r2, sp, #24
   1a474:	str	r2, [sp, #4]
   1a478:	ldr	r1, [sp, #20]
   1a47c:	ldr	r0, [r0, #4]
   1a480:	bl	12444 <vfprintf@plt>
   1a484:	cmp	r0, #0
   1a488:	blt	1a4a4 <__assert_fail@plt+0x7ee0>
   1a48c:	add	sp, sp, #12
   1a490:	ldr	r4, [sp]
   1a494:	ldr	lr, [sp, #4]
   1a498:	add	sp, sp, #8
   1a49c:	add	sp, sp, #12
   1a4a0:	bx	lr
   1a4a4:	bl	12318 <__errno_location@plt>
   1a4a8:	ldr	r1, [r4, #8]
   1a4ac:	ldr	r0, [r0]
   1a4b0:	bl	1972c <__assert_fail@plt+0x7168>
   1a4b4:	b	1a48c <__assert_fail@plt+0x7ec8>
   1a4b8:	str	r4, [sp, #-8]!
   1a4bc:	str	lr, [sp, #4]
   1a4c0:	sub	sp, sp, #8
   1a4c4:	mov	r4, r0
   1a4c8:	str	r2, [sp]
   1a4cc:	mov	r3, r1
   1a4d0:	ldrb	r2, [r0, #12]
   1a4d4:	ldr	r1, [r0, #16]
   1a4d8:	ldr	r0, [r0, #4]
   1a4dc:	bl	22104 <__assert_fail@plt+0xfb40>
   1a4e0:	cmp	r0, #0
   1a4e4:	blt	1a4f8 <__assert_fail@plt+0x7f34>
   1a4e8:	add	sp, sp, #8
   1a4ec:	ldr	r4, [sp]
   1a4f0:	add	sp, sp, #4
   1a4f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4f8:	bl	12318 <__errno_location@plt>
   1a4fc:	ldr	r1, [r4, #8]
   1a500:	ldr	r0, [r0]
   1a504:	bl	1972c <__assert_fail@plt+0x7168>
   1a508:	b	1a4e8 <__assert_fail@plt+0x7f24>
   1a50c:	strd	r4, [sp, #-16]!
   1a510:	str	r6, [sp, #8]
   1a514:	str	lr, [sp, #12]
   1a518:	mov	r5, r2
   1a51c:	mov	r4, r3
   1a520:	ldr	r3, [r3, #4]
   1a524:	bl	12138 <fwrite@plt>
   1a528:	cmp	r5, r0
   1a52c:	bhi	1a540 <__assert_fail@plt+0x7f7c>
   1a530:	ldrd	r4, [sp]
   1a534:	ldr	r6, [sp, #8]
   1a538:	add	sp, sp, #12
   1a53c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a540:	bl	12318 <__errno_location@plt>
   1a544:	ldr	r1, [r4, #8]
   1a548:	ldr	r0, [r0]
   1a54c:	bl	1972c <__assert_fail@plt+0x7168>
   1a550:	b	1a530 <__assert_fail@plt+0x7f6c>
   1a554:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a558:	strd	r6, [sp, #8]
   1a55c:	strd	r8, [sp, #16]
   1a560:	str	lr, [sp, #24]
   1a564:	vpush	{d8}
   1a568:	sub	sp, sp, #804	; 0x324
   1a56c:	mov	r5, r0
   1a570:	mov	r4, r1
   1a574:	mov	r6, r3
   1a578:	ldr	r3, [r1]
   1a57c:	cmp	r3, #1
   1a580:	beq	1a5cc <__assert_fail@plt+0x8008>
   1a584:	mov	r7, r2
   1a588:	cmp	r3, #0
   1a58c:	beq	1a5b4 <__assert_fail@plt+0x7ff0>
   1a590:	cmp	r3, #2
   1a594:	beq	1a604 <__assert_fail@plt+0x8040>
   1a598:	add	sp, sp, #804	; 0x324
   1a59c:	vpop	{d8}
   1a5a0:	ldrd	r4, [sp]
   1a5a4:	ldrd	r6, [sp, #8]
   1a5a8:	ldrd	r8, [sp, #16]
   1a5ac:	add	sp, sp, #24
   1a5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5b4:	mov	r3, r0
   1a5b8:	ldr	r2, [r1, #12]
   1a5bc:	mov	r1, #1
   1a5c0:	ldr	r0, [r4, #8]
   1a5c4:	bl	1a50c <__assert_fail@plt+0x7f48>
   1a5c8:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a5cc:	mov	r3, r0
   1a5d0:	ldr	r2, [r1, #12]
   1a5d4:	mov	r1, #1
   1a5d8:	ldr	r0, [r4, #8]
   1a5dc:	bl	1a50c <__assert_fail@plt+0x7f48>
   1a5e0:	ldr	r0, [r5, #4]
   1a5e4:	bl	2fb38 <__assert_fail@plt+0x1d574>
   1a5e8:	cmp	r0, #0
   1a5ec:	beq	1a598 <__assert_fail@plt+0x7fd4>
   1a5f0:	bl	12318 <__errno_location@plt>
   1a5f4:	ldr	r1, [r5, #8]
   1a5f8:	ldr	r0, [r0]
   1a5fc:	bl	1972c <__assert_fail@plt+0x7168>
   1a600:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a604:	ldrb	r3, [r1, #4]
   1a608:	cmp	r3, #121	; 0x79
   1a60c:	ldrls	pc, [pc, r3, lsl #2]
   1a610:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a614:	andeq	sl, r1, r0, lsr #31
   1a618:	muleq	r1, r8, r5
   1a61c:	muleq	r1, r8, r5
   1a620:	muleq	r1, r8, r5
   1a624:	muleq	r1, r8, r5
   1a628:	muleq	r1, r8, r5
   1a62c:	muleq	r1, r8, r5
   1a630:	muleq	r1, r8, r5
   1a634:	muleq	r1, r8, r5
   1a638:	muleq	r1, r8, r5
   1a63c:	muleq	r1, r8, r5
   1a640:	muleq	r1, r8, r5
   1a644:	muleq	r1, r8, r5
   1a648:	muleq	r1, r8, r5
   1a64c:	muleq	r1, r8, r5
   1a650:	muleq	r1, r8, r5
   1a654:	muleq	r1, r8, r5
   1a658:	muleq	r1, r8, r5
   1a65c:	muleq	r1, r8, r5
   1a660:	muleq	r1, r8, r5
   1a664:	muleq	r1, r8, r5
   1a668:	muleq	r1, r8, r5
   1a66c:	muleq	r1, r8, r5
   1a670:	muleq	r1, r8, r5
   1a674:	muleq	r1, r8, r5
   1a678:	muleq	r1, r8, r5
   1a67c:	muleq	r1, r8, r5
   1a680:	muleq	r1, r8, r5
   1a684:	muleq	r1, r8, r5
   1a688:	muleq	r1, r8, r5
   1a68c:	muleq	r1, r8, r5
   1a690:	muleq	r1, r8, r5
   1a694:	muleq	r1, r8, r5
   1a698:	muleq	r1, r8, r5
   1a69c:	muleq	r1, r8, r5
   1a6a0:	muleq	r1, r8, r5
   1a6a4:	muleq	r1, r8, r5
   1a6a8:	andeq	sl, r1, r8, lsl #31
   1a6ac:	muleq	r1, r8, r5
   1a6b0:	muleq	r1, r8, r5
   1a6b4:	muleq	r1, r8, r5
   1a6b8:	muleq	r1, r8, r5
   1a6bc:	muleq	r1, r8, r5
   1a6c0:	muleq	r1, r8, r5
   1a6c4:	muleq	r1, r8, r5
   1a6c8:	muleq	r1, r8, r5
   1a6cc:	muleq	r1, r8, r5
   1a6d0:	muleq	r1, r8, r5
   1a6d4:	muleq	r1, r8, r5
   1a6d8:	muleq	r1, r8, r5
   1a6dc:	muleq	r1, r8, r5
   1a6e0:	muleq	r1, r8, r5
   1a6e4:	muleq	r1, r8, r5
   1a6e8:	muleq	r1, r8, r5
   1a6ec:	muleq	r1, r8, r5
   1a6f0:	muleq	r1, r8, r5
   1a6f4:	muleq	r1, r8, r5
   1a6f8:	muleq	r1, r8, r5
   1a6fc:	muleq	r1, r8, r5
   1a700:	muleq	r1, r8, r5
   1a704:	muleq	r1, r8, r5
   1a708:	muleq	r1, r8, r5
   1a70c:	muleq	r1, r8, r5
   1a710:	muleq	r1, r8, r5
   1a714:	muleq	r1, r8, r5
   1a718:	muleq	r1, r8, r5
   1a71c:	muleq	r1, r8, r5
   1a720:	muleq	r1, r8, r5
   1a724:	andeq	sl, r1, r4, lsr #17
   1a728:	muleq	r1, r8, r5
   1a72c:	andeq	sl, r1, r4, lsl #18
   1a730:	andeq	sl, r1, ip, asr r9
   1a734:	andeq	sl, r1, ip, asr #20
   1a738:	muleq	r1, r8, r5
   1a73c:	muleq	r1, r8, r5
   1a740:	muleq	r1, r8, r5
   1a744:	muleq	r1, r8, r5
   1a748:	muleq	r1, r8, fp
   1a74c:	muleq	r1, r8, r5
   1a750:	muleq	r1, r8, r5
   1a754:	andeq	sl, r1, ip, lsl ip
   1a758:	muleq	r1, r8, r5
   1a75c:	muleq	r1, r8, r5
   1a760:	muleq	r1, ip, ip
   1a764:	muleq	r1, r8, r5
   1a768:	andeq	sl, r1, r8, ror sp
   1a76c:	muleq	r1, r8, r5
   1a770:	muleq	r1, r8, r5
   1a774:	muleq	r1, r8, r5
   1a778:			; <UNDEFINED> instruction: 0x0001adb4
   1a77c:	ldrdeq	sl, [r1], -r8
   1a780:	muleq	r1, r8, r5
   1a784:	muleq	r1, r8, r5
   1a788:	muleq	r1, r8, r5
   1a78c:	muleq	r1, r8, r5
   1a790:	muleq	r1, r8, r5
   1a794:	muleq	r1, r8, r5
   1a798:	strdeq	sl, [r1], -ip
   1a79c:	andeq	sl, r1, r8, lsr #16
   1a7a0:	andeq	sl, r1, r0, ror #16
   1a7a4:	andeq	sl, r1, ip, lsl #17
   1a7a8:	muleq	r1, r8, r5
   1a7ac:	ldrdeq	sl, [r1], -ip
   1a7b0:	andeq	sl, r1, r8, lsr #18
   1a7b4:	muleq	r1, r8, r9
   1a7b8:	muleq	r1, r8, sl
   1a7bc:	muleq	r1, r8, r5
   1a7c0:	ldrdeq	sl, [r1], -r0
   1a7c4:	andeq	sl, r1, r0, lsl fp
   1a7c8:	andeq	sl, r1, r0, asr #23
   1a7cc:	ldrdeq	sl, [r1], -r4
   1a7d0:	muleq	r1, r8, r5
   1a7d4:	andeq	sl, r1, r0, lsl ip
   1a7d8:	muleq	r1, r8, r5
   1a7dc:	muleq	r1, r8, r5
   1a7e0:	andeq	sl, r1, r4, ror #24
   1a7e4:	andeq	sl, r1, r4, lsl sp
   1a7e8:	andeq	sl, r1, r4, asr #26
   1a7ec:	muleq	r1, r8, r5
   1a7f0:	muleq	r1, r8, r5
   1a7f4:	muleq	r1, r8, r5
   1a7f8:			; <UNDEFINED> instruction: 0x0001aeb8
   1a7fc:	ldr	r4, [r1, #8]
   1a800:	add	r3, sp, #776	; 0x308
   1a804:	ldrd	r0, [r6, #72]	; 0x48
   1a808:	strd	r0, [r3]
   1a80c:	ldm	r3, {r0, r1}
   1a810:	bl	1a254 <__assert_fail@plt+0x7c90>
   1a814:	mov	r2, r0
   1a818:	mov	r1, r4
   1a81c:	mov	r0, r5
   1a820:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a824:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a828:	ldr	r4, [r1, #8]
   1a82c:	mov	r2, #512	; 0x200
   1a830:	mov	r3, #0
   1a834:	strd	r2, [sp, #8]
   1a838:	strd	r2, [sp]
   1a83c:	mov	r3, #0
   1a840:	add	r2, sp, #124	; 0x7c
   1a844:	ldrd	r0, [r6, #64]	; 0x40
   1a848:	bl	24428 <__assert_fail@plt+0x11e64>
   1a84c:	mov	r2, r0
   1a850:	mov	r1, r4
   1a854:	mov	r0, r5
   1a858:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a85c:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a860:	ldr	r4, [r1, #8]
   1a864:	add	r3, sp, #784	; 0x310
   1a868:	ldrd	r0, [r6, #88]	; 0x58
   1a86c:	strd	r0, [r3]
   1a870:	ldm	r3, {r0, r1}
   1a874:	bl	1a254 <__assert_fail@plt+0x7c90>
   1a878:	mov	r2, r0
   1a87c:	mov	r1, r4
   1a880:	mov	r0, r5
   1a884:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a888:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a88c:	movw	r3, #48704	; 0xbe40
   1a890:	movt	r3, #5
   1a894:	ldr	r2, [r3]
   1a898:	ldr	r1, [r1, #8]
   1a89c:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a8a0:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a8a4:	ldr	r4, [r1, #8]
   1a8a8:	mov	r2, #1
   1a8ac:	mov	r3, #0
   1a8b0:	strd	r2, [sp, #8]
   1a8b4:	strd	r2, [sp]
   1a8b8:	mov	r3, #0
   1a8bc:	add	r2, sp, #124	; 0x7c
   1a8c0:	ldrd	r0, [r6]
   1a8c4:	bl	24428 <__assert_fail@plt+0x11e64>
   1a8c8:	mov	r2, r0
   1a8cc:	mov	r1, r4
   1a8d0:	mov	r0, r5
   1a8d4:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a8d8:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a8dc:	mov	r0, r2
   1a8e0:	bl	22e58 <__assert_fail@plt+0x10894>
   1a8e4:	mov	r6, r0
   1a8e8:	mov	r2, r0
   1a8ec:	ldr	r1, [r4, #8]
   1a8f0:	mov	r0, r5
   1a8f4:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1a8f8:	mov	r0, r6
   1a8fc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1a900:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a904:	ldr	r4, [r1, #8]
   1a908:	mov	r1, r2
   1a90c:	mov	r0, r6
   1a910:	bl	1bc38 <__assert_fail@plt+0x9674>
   1a914:	mov	r2, r0
   1a918:	mov	r1, r4
   1a91c:	mov	r0, r5
   1a920:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1a924:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a928:	ldr	r0, [r6, #28]
   1a92c:	bl	125a0 <getgrgid@plt>
   1a930:	cmp	r0, #0
   1a934:	beq	1a95c <__assert_fail@plt+0x8398>
   1a938:	ldr	r2, [r4, #8]
   1a93c:	ldr	r3, [r4, #12]
   1a940:	mov	r1, #115	; 0x73
   1a944:	strb	r1, [r2, r3]
   1a948:	ldr	r2, [r0]
   1a94c:	ldr	r1, [r4, #8]
   1a950:	mov	r0, r5
   1a954:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a958:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a95c:	ldr	r4, [r4, #8]
   1a960:	mov	r1, #0
   1a964:	mov	r2, #1
   1a968:	mov	r3, #0
   1a96c:	strd	r2, [sp, #8]
   1a970:	strd	r2, [sp]
   1a974:	mov	r3, r1
   1a978:	add	r2, sp, #124	; 0x7c
   1a97c:	ldr	r0, [r6, #28]
   1a980:	bl	24428 <__assert_fail@plt+0x11e64>
   1a984:	mov	r2, r0
   1a988:	mov	r1, r4
   1a98c:	mov	r0, r5
   1a990:	bl	1a45c <__assert_fail@plt+0x7e98>
   1a994:	b	1a598 <__assert_fail@plt+0x7fd4>
   1a998:	mov	r0, r2
   1a99c:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   1a9a0:	mov	r6, r0
   1a9a4:	bl	122d0 <strlen@plt>
   1a9a8:	sub	r0, r0, #1
   1a9ac:	adds	r2, r6, r0
   1a9b0:	bcs	1a9e4 <__assert_fail@plt+0x8420>
   1a9b4:	ldrb	r3, [r6, r0]
   1a9b8:	cmp	r3, #47	; 0x2f
   1a9bc:	bne	1a9e4 <__assert_fail@plt+0x8420>
   1a9c0:	sub	r3, r2, #1
   1a9c4:	sub	r0, r6, #1
   1a9c8:	mov	r2, r3
   1a9cc:	cmp	r3, r0
   1a9d0:	beq	1a9e4 <__assert_fail@plt+0x8420>
   1a9d4:	sub	r3, r3, #1
   1a9d8:	ldrb	r1, [r2]
   1a9dc:	cmp	r1, #47	; 0x2f
   1a9e0:	beq	1a9c8 <__assert_fail@plt+0x8404>
   1a9e4:	cmp	r2, r6
   1a9e8:	bls	1a9fc <__assert_fail@plt+0x8438>
   1a9ec:	ldrb	r3, [r2, #1]
   1a9f0:	cmp	r3, #47	; 0x2f
   1a9f4:	moveq	r3, #0
   1a9f8:	strbeq	r3, [r2, #1]
   1a9fc:	mov	r1, #47	; 0x2f
   1aa00:	mov	r0, r6
   1aa04:	bl	12438 <strrchr@plt>
   1aa08:	cmp	r0, #0
   1aa0c:	beq	1aa34 <__assert_fail@plt+0x8470>
   1aa10:	mov	r3, #0
   1aa14:	strb	r3, [r0]
   1aa18:	mov	r2, r6
   1aa1c:	ldr	r1, [r4, #8]
   1aa20:	mov	r0, r5
   1aa24:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1aa28:	mov	r0, r6
   1aa2c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1aa30:	b	1a598 <__assert_fail@plt+0x7fd4>
   1aa34:	movw	r2, #29972	; 0x7514
   1aa38:	movt	r2, #4
   1aa3c:	ldr	r1, [r4, #8]
   1aa40:	mov	r0, r5
   1aa44:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1aa48:	b	1aa28 <__assert_fail@plt+0x8464>
   1aa4c:	movw	r6, #48704	; 0xbe40
   1aa50:	movt	r6, #5
   1aa54:	ldr	r0, [r6, #20]
   1aa58:	add	r0, r0, #1
   1aa5c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1aa60:	mov	r8, r0
   1aa64:	ldr	r6, [r6, #20]
   1aa68:	mov	r2, r6
   1aa6c:	mov	r1, r7
   1aa70:	bl	12000 <memcpy@plt>
   1aa74:	mov	r3, #0
   1aa78:	strb	r3, [r8, r6]
   1aa7c:	mov	r2, r8
   1aa80:	ldr	r1, [r4, #8]
   1aa84:	mov	r0, r5
   1aa88:	bl	1a45c <__assert_fail@plt+0x7e98>
   1aa8c:	mov	r0, r8
   1aa90:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1aa94:	b	1a598 <__assert_fail@plt+0x7fd4>
   1aa98:	ldr	r4, [r1, #8]
   1aa9c:	mov	r2, #1
   1aaa0:	mov	r3, #0
   1aaa4:	strd	r2, [sp, #8]
   1aaa8:	strd	r2, [sp]
   1aaac:	mov	r3, #0
   1aab0:	add	r2, sp, #124	; 0x7c
   1aab4:	ldrd	r0, [r6, #96]	; 0x60
   1aab8:	bl	24428 <__assert_fail@plt+0x11e64>
   1aabc:	mov	r2, r0
   1aac0:	mov	r1, r4
   1aac4:	mov	r0, r5
   1aac8:	bl	1a45c <__assert_fail@plt+0x7e98>
   1aacc:	b	1a598 <__assert_fail@plt+0x7fd4>
   1aad0:	ldr	r4, [r1, #8]
   1aad4:	mov	r2, #1024	; 0x400
   1aad8:	mov	r3, #0
   1aadc:	strd	r2, [sp, #8]
   1aae0:	mov	r2, #512	; 0x200
   1aae4:	mov	r3, #0
   1aae8:	strd	r2, [sp]
   1aaec:	mov	r3, #0
   1aaf0:	add	r2, sp, #124	; 0x7c
   1aaf4:	ldrd	r0, [r6, #64]	; 0x40
   1aaf8:	bl	24428 <__assert_fail@plt+0x11e64>
   1aafc:	mov	r2, r0
   1ab00:	mov	r1, r4
   1ab04:	mov	r0, r5
   1ab08:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ab0c:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ab10:	ldr	r3, [r6, #16]
   1ab14:	and	r3, r3, #61440	; 0xf000
   1ab18:	cmp	r3, #40960	; 0xa000
   1ab1c:	beq	1ab44 <__assert_fail@plt+0x8580>
   1ab20:	movw	r2, #25528	; 0x63b8
   1ab24:	movt	r2, #4
   1ab28:	ldr	r1, [r4, #8]
   1ab2c:	mov	r0, r5
   1ab30:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1ab34:	mov	r6, #0
   1ab38:	mov	r0, r6
   1ab3c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1ab40:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ab44:	movw	r3, #48704	; 0xbe40
   1ab48:	movt	r3, #5
   1ab4c:	ldr	r1, [r3, #12]
   1ab50:	ldr	r0, [r3, #16]
   1ab54:	bl	22880 <__assert_fail@plt+0x102bc>
   1ab58:	subs	r6, r0, #0
   1ab5c:	beq	1ab74 <__assert_fail@plt+0x85b0>
   1ab60:	mov	r2, r6
   1ab64:	ldr	r1, [r4, #8]
   1ab68:	mov	r0, r5
   1ab6c:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1ab70:	b	1ab38 <__assert_fail@plt+0x8574>
   1ab74:	bl	12318 <__errno_location@plt>
   1ab78:	mov	r1, r7
   1ab7c:	ldr	r0, [r0]
   1ab80:	bl	193a0 <__assert_fail@plt+0x6ddc>
   1ab84:	movw	r3, #48704	; 0xbe40
   1ab88:	movt	r3, #5
   1ab8c:	mov	r2, #1
   1ab90:	str	r2, [r3, #28]
   1ab94:	b	1ab20 <__assert_fail@plt+0x855c>
   1ab98:	add	r1, sp, #16
   1ab9c:	mov	r0, r6
   1aba0:	bl	231c0 <__assert_fail@plt+0x10bfc>
   1aba4:	mov	r3, #0
   1aba8:	strb	r3, [sp, #26]
   1abac:	add	r2, sp, #16
   1abb0:	ldr	r1, [r4, #8]
   1abb4:	mov	r0, r5
   1abb8:	bl	1a45c <__assert_fail@plt+0x7e98>
   1abbc:	b	1a598 <__assert_fail@plt+0x7fd4>
   1abc0:	ldr	r2, [r6, #16]
   1abc4:	ubfx	r2, r2, #0, #12
   1abc8:	ldr	r1, [r1, #8]
   1abcc:	bl	1a45c <__assert_fail@plt+0x7e98>
   1abd0:	b	1a598 <__assert_fail@plt+0x7fd4>
   1abd4:	ldr	r4, [r1, #8]
   1abd8:	mov	r1, #0
   1abdc:	mov	r2, #1
   1abe0:	mov	r3, #0
   1abe4:	strd	r2, [sp, #8]
   1abe8:	strd	r2, [sp]
   1abec:	mov	r3, r1
   1abf0:	add	r2, sp, #124	; 0x7c
   1abf4:	ldr	r0, [r6, #20]
   1abf8:	bl	24428 <__assert_fail@plt+0x11e64>
   1abfc:	mov	r2, r0
   1ac00:	mov	r1, r4
   1ac04:	mov	r0, r5
   1ac08:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ac0c:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ac10:	ldr	r1, [r1, #8]
   1ac14:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1ac18:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ac1c:	movw	r3, #48704	; 0xbe40
   1ac20:	movt	r3, #5
   1ac24:	ldr	r3, [r3]
   1ac28:	cmp	r3, #0
   1ac2c:	movwle	r2, #25528	; 0x63b8
   1ac30:	movtle	r2, #4
   1ac34:	ble	1ac54 <__assert_fail@plt+0x8690>
   1ac38:	movw	r3, #48704	; 0xbe40
   1ac3c:	movt	r3, #5
   1ac40:	ldr	r3, [r3, #20]
   1ac44:	add	r2, r7, r3
   1ac48:	ldrb	r3, [r7, r3]
   1ac4c:	cmp	r3, #47	; 0x2f
   1ac50:	addeq	r2, r2, #1
   1ac54:	ldr	r1, [r4, #8]
   1ac58:	mov	r0, r5
   1ac5c:	bl	1a4b8 <__assert_fail@plt+0x7ef4>
   1ac60:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ac64:	ldr	r4, [r1, #8]
   1ac68:	mov	r2, #1
   1ac6c:	mov	r3, #0
   1ac70:	strd	r2, [sp, #8]
   1ac74:	strd	r2, [sp]
   1ac78:	mov	r3, #0
   1ac7c:	add	r2, sp, #124	; 0x7c
   1ac80:	ldrd	r0, [r6, #48]	; 0x30
   1ac84:	bl	24428 <__assert_fail@plt+0x11e64>
   1ac88:	mov	r2, r0
   1ac8c:	mov	r1, r4
   1ac90:	mov	r0, r5
   1ac94:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ac98:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ac9c:	ldr	r4, [r1, #8]
   1aca0:	ldrd	r8, [r6, #48]	; 0x30
   1aca4:	orrs	r3, r8, r9
   1aca8:	bne	1acd0 <__assert_fail@plt+0x870c>
   1acac:	ldrd	r2, [r6, #64]	; 0x40
   1acb0:	orrs	r1, r2, r3
   1acb4:	beq	1ad0c <__assert_fail@plt+0x8748>
   1acb8:	cmp	r2, #0
   1acbc:	sbcs	r3, r3, #0
   1acc0:	vldr	d7, [pc, #776]	; 1afd0 <__assert_fail@plt+0x8a0c>
   1acc4:	vldr	d6, [pc, #780]	; 1afd8 <__assert_fail@plt+0x8a14>
   1acc8:	vmovge.f64	d7, d6
   1accc:	b	1acf8 <__assert_fail@plt+0x8734>
   1acd0:	ldrd	r0, [r6, #64]	; 0x40
   1acd4:	bl	442bc <__assert_fail@plt+0x31cf8>
   1acd8:	vldr	d8, [pc, #768]	; 1afe0 <__assert_fail@plt+0x8a1c>
   1acdc:	vmov	d7, r0, r1
   1ace0:	vmul.f64	d8, d7, d8
   1ace4:	mov	r0, r8
   1ace8:	mov	r1, r9
   1acec:	bl	442bc <__assert_fail@plt+0x31cf8>
   1acf0:	vmov	d7, r0, r1
   1acf4:	vdiv.f64	d7, d8, d7
   1acf8:	vmov	r2, r3, d7
   1acfc:	mov	r1, r4
   1ad00:	mov	r0, r5
   1ad04:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ad08:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ad0c:	vldr	d7, [pc, #724]	; 1afe8 <__assert_fail@plt+0x8a24>
   1ad10:	b	1acf8 <__assert_fail@plt+0x8734>
   1ad14:	ldr	r4, [r1, #8]
   1ad18:	ldrd	r2, [r6, #80]	; 0x50
   1ad1c:	add	r1, sp, #792	; 0x318
   1ad20:	strd	r2, [r1]
   1ad24:	add	r3, sp, #800	; 0x320
   1ad28:	ldmdb	r3, {r0, r1}
   1ad2c:	bl	1a254 <__assert_fail@plt+0x7c90>
   1ad30:	mov	r2, r0
   1ad34:	mov	r1, r4
   1ad38:	mov	r0, r5
   1ad3c:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ad40:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ad44:	ldr	r0, [r6, #24]
   1ad48:	bl	11f34 <getpwuid@plt>
   1ad4c:	cmp	r0, #0
   1ad50:	beq	1ad78 <__assert_fail@plt+0x87b4>
   1ad54:	ldr	r2, [r4, #8]
   1ad58:	ldr	r3, [r4, #12]
   1ad5c:	mov	r1, #115	; 0x73
   1ad60:	strb	r1, [r2, r3]
   1ad64:	ldr	r2, [r0]
   1ad68:	ldr	r1, [r4, #8]
   1ad6c:	mov	r0, r5
   1ad70:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ad74:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ad78:	ldr	r4, [r4, #8]
   1ad7c:	mov	r1, #0
   1ad80:	mov	r2, #1
   1ad84:	mov	r3, #0
   1ad88:	strd	r2, [sp, #8]
   1ad8c:	strd	r2, [sp]
   1ad90:	mov	r3, r1
   1ad94:	add	r2, sp, #124	; 0x7c
   1ad98:	ldr	r0, [r6, #24]
   1ad9c:	bl	24428 <__assert_fail@plt+0x11e64>
   1ada0:	mov	r2, r0
   1ada4:	mov	r1, r4
   1ada8:	mov	r0, r5
   1adac:	bl	1a45c <__assert_fail@plt+0x7e98>
   1adb0:	b	1a598 <__assert_fail@plt+0x7fd4>
   1adb4:	ldr	r0, [r6, #16]
   1adb8:	and	r0, r0, #61440	; 0xf000
   1adbc:	cmp	r0, #40960	; 0xa000
   1adc0:	beq	1addc <__assert_fail@plt+0x8818>
   1adc4:	bl	19c10 <__assert_fail@plt+0x764c>
   1adc8:	mov	r2, r0
   1adcc:	ldr	r1, [r4, #8]
   1add0:	mov	r0, r5
   1add4:	bl	1a45c <__assert_fail@plt+0x7e98>
   1add8:	b	1a598 <__assert_fail@plt+0x7fd4>
   1addc:	movw	r1, #48704	; 0xbe40
   1ade0:	movt	r1, #5
   1ade4:	mov	r3, #0
   1ade8:	str	r3, [sp]
   1adec:	add	r3, sp, #16
   1adf0:	ldr	r2, [r1, #12]
   1adf4:	ldr	r1, [r1, #16]
   1adf8:	mov	r0, #3
   1adfc:	bl	120fc <__fxstatat64@plt>
   1ae00:	cmp	r0, #0
   1ae04:	beq	1ae98 <__assert_fail@plt+0x88d4>
   1ae08:	bl	12318 <__errno_location@plt>
   1ae0c:	mov	r6, r0
   1ae10:	ldr	r3, [r0]
   1ae14:	cmp	r3, #20
   1ae18:	cmpne	r3, #2
   1ae1c:	beq	1ae68 <__assert_fail@plt+0x88a4>
   1ae20:	cmp	r3, #40	; 0x28
   1ae24:	beq	1ae80 <__assert_fail@plt+0x88bc>
   1ae28:	movw	r2, #33044	; 0x8114
   1ae2c:	movt	r2, #4
   1ae30:	ldr	r1, [r4, #8]
   1ae34:	mov	r0, r5
   1ae38:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ae3c:	ldr	r4, [r6]
   1ae40:	mov	r1, r7
   1ae44:	mov	r0, #0
   1ae48:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1ae4c:	mov	r3, r0
   1ae50:	movw	r2, #35960	; 0x8c78
   1ae54:	movt	r2, #4
   1ae58:	mov	r1, r4
   1ae5c:	mov	r0, #0
   1ae60:	bl	121bc <error@plt>
   1ae64:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ae68:	movw	r2, #21956	; 0x55c4
   1ae6c:	movt	r2, #4
   1ae70:	ldr	r1, [r4, #8]
   1ae74:	mov	r0, r5
   1ae78:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ae7c:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ae80:	movw	r2, #40012	; 0x9c4c
   1ae84:	movt	r2, #4
   1ae88:	ldr	r1, [r4, #8]
   1ae8c:	mov	r0, r5
   1ae90:	bl	1a45c <__assert_fail@plt+0x7e98>
   1ae94:	b	1a598 <__assert_fail@plt+0x7fd4>
   1ae98:	ldr	r0, [sp, #32]
   1ae9c:	and	r0, r0, #61440	; 0xf000
   1aea0:	bl	19c10 <__assert_fail@plt+0x764c>
   1aea4:	mov	r2, r0
   1aea8:	ldr	r1, [r4, #8]
   1aeac:	mov	r0, r5
   1aeb0:	bl	1a45c <__assert_fail@plt+0x7e98>
   1aeb4:	b	1a598 <__assert_fail@plt+0x7fd4>
   1aeb8:	ldr	r0, [r6, #16]
   1aebc:	and	r0, r0, #61440	; 0xf000
   1aec0:	bl	19c10 <__assert_fail@plt+0x764c>
   1aec4:	mov	r2, r0
   1aec8:	ldr	r1, [r4, #8]
   1aecc:	mov	r0, r5
   1aed0:	bl	1a45c <__assert_fail@plt+0x7e98>
   1aed4:	b	1a598 <__assert_fail@plt+0x7fd4>
   1aed8:	movw	r3, #48704	; 0xbe40
   1aedc:	movt	r3, #5
   1aee0:	movw	r2, #48748	; 0xbe6c
   1aee4:	movt	r2, #5
   1aee8:	ldr	r6, [r2, #64]	; 0x40
   1aeec:	add	r2, sp, #16
   1aef0:	ldr	r1, [r3, #12]
   1aef4:	ldr	r0, [r3, #16]
   1aef8:	blx	r6
   1aefc:	cmp	r0, #0
   1af00:	blt	1af20 <__assert_fail@plt+0x895c>
   1af04:	ldr	r2, [sp, #16]
   1af08:	ldr	r1, [r4, #8]
   1af0c:	mov	r0, r5
   1af10:	bl	1a45c <__assert_fail@plt+0x7e98>
   1af14:	ldr	r0, [sp, #16]
   1af18:	bl	124ec <freecon@plt>
   1af1c:	b	1a598 <__assert_fail@plt+0x7fd4>
   1af20:	movw	r2, #25528	; 0x63b8
   1af24:	movt	r2, #4
   1af28:	ldr	r1, [r4, #8]
   1af2c:	mov	r0, r5
   1af30:	bl	1a45c <__assert_fail@plt+0x7e98>
   1af34:	bl	12318 <__errno_location@plt>
   1af38:	ldr	r4, [r0]
   1af3c:	mov	r2, #5
   1af40:	movw	r1, #19800	; 0x4d58
   1af44:	movt	r1, #4
   1af48:	mov	r0, #0
   1af4c:	bl	12084 <dcgettext@plt>
   1af50:	mov	r5, r0
   1af54:	mov	r1, r7
   1af58:	mov	r0, #0
   1af5c:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1af60:	mov	r3, r0
   1af64:	mov	r2, r5
   1af68:	mov	r1, r4
   1af6c:	mov	r0, #0
   1af70:	bl	121bc <error@plt>
   1af74:	movw	r3, #48704	; 0xbe40
   1af78:	movt	r3, #5
   1af7c:	mov	r2, #1
   1af80:	str	r2, [r3, #28]
   1af84:	b	1a598 <__assert_fail@plt+0x7fd4>
   1af88:	mov	r3, r0
   1af8c:	ldr	r2, [r1, #12]
   1af90:	mov	r1, #1
   1af94:	ldr	r0, [r4, #8]
   1af98:	bl	1a50c <__assert_fail@plt+0x7f48>
   1af9c:	b	1a598 <__assert_fail@plt+0x7fd4>
   1afa0:	mov	r2, #5
   1afa4:	movw	r1, #27552	; 0x6ba0
   1afa8:	movt	r1, #4
   1afac:	mov	r0, #0
   1afb0:	bl	12084 <dcgettext@plt>
   1afb4:	movw	r3, #27588	; 0x6bc4
   1afb8:	movt	r3, #4
   1afbc:	mov	r2, r0
   1afc0:	mov	r1, #0
   1afc4:	mov	r0, #1
   1afc8:	bl	121bc <error@plt>
   1afcc:	nop	{0}
   1afd0:	andeq	r0, r0, r0
   1afd4:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1afd8:	andeq	r0, r0, r0
   1afdc:	svcvc	0x00f00000	; IMB
   1afe0:	andeq	r0, r0, r0
   1afe4:	addmi	r0, r0, r0
   1afe8:	andeq	r0, r0, r0
   1afec:	svccc	0x00f00000	; IMB
   1aff0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aff4:	strd	r6, [sp, #8]
   1aff8:	strd	r8, [sp, #16]
   1affc:	strd	sl, [sp, #24]
   1b000:	str	lr, [sp, #32]
   1b004:	sub	sp, sp, #12
   1b008:	ldr	r4, [r2, #40]	; 0x28
   1b00c:	cmp	r4, #0
   1b010:	beq	1b168 <__assert_fail@plt+0x8ba4>
   1b014:	add	r6, r2, #40	; 0x28
   1b018:	mov	r5, r1
   1b01c:	mov	r7, r0
   1b020:	mov	r8, sp
   1b024:	mvn	r9, #0
   1b028:	movw	sl, #25528	; 0x63b8
   1b02c:	movt	sl, #4
   1b030:	b	1b0ec <__assert_fail@plt+0x8b28>
   1b034:	ldrd	r2, [r5, #72]	; 0x48
   1b038:	strd	r2, [r8]
   1b03c:	ldr	r3, [r5, #76]	; 0x4c
   1b040:	ldr	fp, [r4, #8]
   1b044:	str	r3, [sp, #4]
   1b048:	ldrb	r2, [r4, #5]
   1b04c:	ldm	r8, {r0, r1}
   1b050:	bl	19ca8 <__assert_fail@plt+0x76e4>
   1b054:	mov	r2, r0
   1b058:	mov	r1, fp
   1b05c:	mov	r0, r6
   1b060:	bl	1a45c <__assert_fail@plt+0x7e98>
   1b064:	b	1b0e0 <__assert_fail@plt+0x8b1c>
   1b068:	str	r9, [sp]
   1b06c:	str	r9, [sp, #4]
   1b070:	cmp	r2, #64	; 0x40
   1b074:	moveq	r3, r9
   1b078:	beq	1b040 <__assert_fail@plt+0x8a7c>
   1b07c:	mov	r2, sl
   1b080:	ldr	r1, [r4, #8]
   1b084:	mov	r0, r6
   1b088:	bl	1a45c <__assert_fail@plt+0x7e98>
   1b08c:	b	1b0e0 <__assert_fail@plt+0x8b1c>
   1b090:	ldr	r3, [r5, #92]	; 0x5c
   1b094:	ldr	r2, [r5, #88]	; 0x58
   1b098:	str	r2, [sp]
   1b09c:	b	1b040 <__assert_fail@plt+0x8a7c>
   1b0a0:	ldr	r3, [r5, #84]	; 0x54
   1b0a4:	ldr	r2, [r5, #80]	; 0x50
   1b0a8:	str	r2, [sp]
   1b0ac:	b	1b040 <__assert_fail@plt+0x8a7c>
   1b0b0:	ldr	r3, [pc, #208]	; 1b188 <__assert_fail@plt+0x8bc4>
   1b0b4:	movw	r2, #1304	; 0x518
   1b0b8:	movw	r1, #27128	; 0x69f8
   1b0bc:	movt	r1, #4
   1b0c0:	movw	r0, #36300	; 0x8dcc
   1b0c4:	movt	r0, #4
   1b0c8:	bl	125c4 <__assert_fail@plt>
   1b0cc:	mov	r3, r5
   1b0d0:	mov	r2, r7
   1b0d4:	mov	r1, r4
   1b0d8:	mov	r0, r6
   1b0dc:	bl	1a554 <__assert_fail@plt+0x7f90>
   1b0e0:	ldr	r4, [r4, #16]
   1b0e4:	cmp	r4, #0
   1b0e8:	beq	1b168 <__assert_fail@plt+0x8ba4>
   1b0ec:	ldr	r3, [r4]
   1b0f0:	cmp	r3, #2
   1b0f4:	bne	1b0cc <__assert_fail@plt+0x8b08>
   1b0f8:	ldrb	r2, [r4, #5]
   1b0fc:	cmp	r2, #0
   1b100:	beq	1b0cc <__assert_fail@plt+0x8b08>
   1b104:	ldrb	r3, [r4, #4]
   1b108:	sub	r3, r3, #65	; 0x41
   1b10c:	cmp	r3, #19
   1b110:	ldrls	pc, [pc, r3, lsl #2]
   1b114:	b	1b0b0 <__assert_fail@plt+0x8aec>
   1b118:	andeq	fp, r1, r4, lsr r0
   1b11c:	andeq	fp, r1, r8, rrx
   1b120:	muleq	r1, r0, r0
   1b124:	strheq	fp, [r1], -r0
   1b128:	strheq	fp, [r1], -r0
   1b12c:	strheq	fp, [r1], -r0
   1b130:	strheq	fp, [r1], -r0
   1b134:	strheq	fp, [r1], -r0
   1b138:	strheq	fp, [r1], -r0
   1b13c:	strheq	fp, [r1], -r0
   1b140:	strheq	fp, [r1], -r0
   1b144:	strheq	fp, [r1], -r0
   1b148:	strheq	fp, [r1], -r0
   1b14c:	strheq	fp, [r1], -r0
   1b150:	strheq	fp, [r1], -r0
   1b154:	strheq	fp, [r1], -r0
   1b158:	strheq	fp, [r1], -r0
   1b15c:	strheq	fp, [r1], -r0
   1b160:	strheq	fp, [r1], -r0
   1b164:	andeq	fp, r1, r0, lsr #1
   1b168:	mov	r0, #1
   1b16c:	add	sp, sp, #12
   1b170:	ldrd	r4, [sp]
   1b174:	ldrd	r6, [sp, #8]
   1b178:	ldrd	r8, [sp, #16]
   1b17c:	ldrd	sl, [sp, #24]
   1b180:	add	sp, sp, #32
   1b184:	pop	{pc}		; (ldr pc, [sp], #4)
   1b188:	andeq	r6, r4, ip, asr #19
   1b18c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b190:	strd	r6, [sp, #8]
   1b194:	strd	r8, [sp, #16]
   1b198:	strd	sl, [sp, #24]
   1b19c:	str	lr, [sp, #32]
   1b1a0:	sub	sp, sp, #12
   1b1a4:	str	r1, [sp, #4]
   1b1a8:	ldrb	r5, [sp, #48]	; 0x30
   1b1ac:	ldrb	sl, [sp, #52]	; 0x34
   1b1b0:	ldr	fp, [sp, #56]	; 0x38
   1b1b4:	cmp	r5, #123	; 0x7b
   1b1b8:	beq	1b394 <__assert_fail@plt+0x8dd0>
   1b1bc:	mov	r9, r0
   1b1c0:	mov	r6, r2
   1b1c4:	mov	r8, r3
   1b1c8:	cmp	r5, #91	; 0x5b
   1b1cc:	beq	1b3b0 <__assert_fail@plt+0x8dec>
   1b1d0:	cmp	r5, #40	; 0x28
   1b1d4:	beq	1b3cc <__assert_fail@plt+0x8e08>
   1b1d8:	mov	r0, #20
   1b1dc:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1b1e0:	mov	r4, r0
   1b1e4:	str	r0, [r9]
   1b1e8:	str	r8, [r0]
   1b1ec:	strb	r5, [r0, #4]
   1b1f0:	strb	sl, [r0, #5]
   1b1f4:	mov	r3, #0
   1b1f8:	str	r3, [r0, #16]
   1b1fc:	str	r6, [r0, #12]
   1b200:	add	r0, r6, #2
   1b204:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1b208:	mov	r7, r0
   1b20c:	str	r0, [r4, #8]
   1b210:	mov	r2, r6
   1b214:	ldr	r1, [sp, #4]
   1b218:	bl	12360 <strncpy@plt>
   1b21c:	add	r3, r7, r6
   1b220:	cmp	r8, #1
   1b224:	bls	1b3e8 <__assert_fail@plt+0x8e24>
   1b228:	cmp	r8, #2
   1b22c:	bne	1b444 <__assert_fail@plt+0x8e80>
   1b230:	sub	r5, r5, #37	; 0x25
   1b234:	cmp	r5, #84	; 0x54
   1b238:	ldrls	pc, [pc, r5, lsl #2]
   1b23c:	b	1b5cc <__assert_fail@plt+0x9008>
   1b240:	andeq	fp, r1, r0, ror #8
   1b244:	andeq	fp, r1, ip, asr #11
   1b248:	andeq	fp, r1, ip, asr #11
   1b24c:	andeq	fp, r1, ip, asr #11
   1b250:	andeq	fp, r1, ip, asr #11
   1b254:	andeq	fp, r1, ip, asr #11
   1b258:	andeq	fp, r1, ip, asr #11
   1b25c:	andeq	fp, r1, ip, asr #11
   1b260:	andeq	fp, r1, ip, asr #11
   1b264:	andeq	fp, r1, ip, asr #11
   1b268:	andeq	fp, r1, ip, asr #11
   1b26c:	andeq	fp, r1, ip, asr #11
   1b270:	andeq	fp, r1, ip, asr #11
   1b274:	andeq	fp, r1, ip, asr #11
   1b278:	andeq	fp, r1, ip, asr #11
   1b27c:	andeq	fp, r1, ip, asr #11
   1b280:	andeq	fp, r1, ip, asr #11
   1b284:	andeq	fp, r1, ip, asr #11
   1b288:	andeq	fp, r1, ip, asr #11
   1b28c:	andeq	fp, r1, ip, asr #11
   1b290:	andeq	fp, r1, ip, asr #11
   1b294:	andeq	fp, r1, ip, asr #11
   1b298:	andeq	fp, r1, ip, asr #11
   1b29c:	andeq	fp, r1, ip, asr #11
   1b2a0:	andeq	fp, r1, ip, asr #11
   1b2a4:	andeq	fp, r1, ip, asr #11
   1b2a8:	andeq	fp, r1, ip, asr #11
   1b2ac:	andeq	fp, r1, ip, asr #11
   1b2b0:	strdeq	fp, [r1], -ip
   1b2b4:	strdeq	fp, [r1], -ip
   1b2b8:	strdeq	fp, [r1], -ip
   1b2bc:	andeq	fp, r1, r4, lsl #11
   1b2c0:	andeq	fp, r1, ip, asr #11
   1b2c4:	strdeq	fp, [r1], -ip
   1b2c8:	andeq	fp, r1, r4, lsl #11
   1b2cc:	andeq	fp, r1, r4, ror r5
   1b2d0:	andeq	fp, r1, ip, asr #11
   1b2d4:	andeq	fp, r1, ip, asr #11
   1b2d8:	andeq	fp, r1, ip, asr #11
   1b2dc:	andeq	fp, r1, ip, asr #11
   1b2e0:	strdeq	fp, [r1], -ip
   1b2e4:	andeq	fp, r1, ip, asr #11
   1b2e8:	andeq	fp, r1, ip, asr #11
   1b2ec:	andeq	fp, r1, r0, asr r5
   1b2f0:	andeq	fp, r1, ip, asr #11
   1b2f4:	andeq	fp, r1, ip, asr #11
   1b2f8:	andeq	fp, r1, r8, lsl r5
   1b2fc:	strdeq	fp, [r1], -ip
   1b300:	andeq	fp, r1, r4, lsl #11
   1b304:	andeq	fp, r1, ip, asr #11
   1b308:	andeq	fp, r1, ip, asr #11
   1b30c:	andeq	fp, r1, ip, asr #11
   1b310:	andeq	fp, r1, r4, lsr r5
   1b314:	andeq	fp, r1, r0, ror #10
   1b318:	andeq	fp, r1, ip, asr #11
   1b31c:	andeq	fp, r1, ip, asr #11
   1b320:	andeq	fp, r1, ip, asr #11
   1b324:	andeq	fp, r1, ip, asr #11
   1b328:	andeq	fp, r1, ip, asr #11
   1b32c:	andeq	fp, r1, ip, asr #11
   1b330:	strdeq	fp, [r1], -ip
   1b334:	andeq	fp, r1, r4, lsl #11
   1b338:	strdeq	fp, [r1], -ip
   1b33c:	andeq	fp, r1, r0, lsr #11
   1b340:	andeq	fp, r1, ip, asr #11
   1b344:	andeq	fp, r1, r0, asr r5
   1b348:	strdeq	fp, [r1], -ip
   1b34c:	andeq	fp, r1, r0, asr r5
   1b350:	andeq	fp, r1, r4, ror #9
   1b354:	andeq	fp, r1, ip, asr #11
   1b358:	andeq	fp, r1, r4, lsl #11
   1b35c:	andeq	fp, r1, r8, ror r4
   1b360:			; <UNDEFINED> instruction: 0x0001b5b0
   1b364:	andeq	fp, r1, r4, lsl #11
   1b368:	andeq	fp, r1, ip, asr #11
   1b36c:	andeq	fp, r1, r0, asr r5
   1b370:	andeq	fp, r1, ip, asr #11
   1b374:	andeq	fp, r1, ip, asr #11
   1b378:	strdeq	fp, [r1], -ip
   1b37c:	strdeq	fp, [r1], -ip
   1b380:	strdeq	fp, [r1], -ip
   1b384:	andeq	fp, r1, ip, asr #11
   1b388:	andeq	fp, r1, ip, asr #11
   1b38c:	andeq	fp, r1, ip, asr #11
   1b390:	andeq	fp, r1, r8, asr #9
   1b394:	ldr	r3, [pc, #568]	; 1b5d4 <__assert_fail@plt+0x9010>
   1b398:	mov	r2, #78	; 0x4e
   1b39c:	movw	r1, #27128	; 0x69f8
   1b3a0:	movt	r1, #4
   1b3a4:	movw	r0, #27592	; 0x6bc8
   1b3a8:	movt	r0, #4
   1b3ac:	bl	125c4 <__assert_fail@plt>
   1b3b0:	ldr	r3, [pc, #540]	; 1b5d4 <__assert_fail@plt+0x9010>
   1b3b4:	mov	r2, #79	; 0x4f
   1b3b8:	movw	r1, #27128	; 0x69f8
   1b3bc:	movt	r1, #4
   1b3c0:	movw	r0, #27612	; 0x6bdc
   1b3c4:	movt	r0, #4
   1b3c8:	bl	125c4 <__assert_fail@plt>
   1b3cc:	ldr	r3, [pc, #512]	; 1b5d4 <__assert_fail@plt+0x9010>
   1b3d0:	mov	r2, #80	; 0x50
   1b3d4:	movw	r1, #27128	; 0x69f8
   1b3d8:	movt	r1, #4
   1b3dc:	movw	r0, #27632	; 0x6bf0
   1b3e0:	movt	r0, #4
   1b3e4:	bl	125c4 <__assert_fail@plt>
   1b3e8:	cmp	r5, #0
   1b3ec:	bne	1b40c <__assert_fail@plt+0x8e48>
   1b3f0:	cmp	sl, #0
   1b3f4:	bne	1b428 <__assert_fail@plt+0x8e64>
   1b3f8:	mov	r3, #0
   1b3fc:	strb	r3, [r7, r6]
   1b400:	ldr	r0, [r9]
   1b404:	add	r0, r0, #16
   1b408:	b	1b4ac <__assert_fail@plt+0x8ee8>
   1b40c:	ldr	r3, [pc, #448]	; 1b5d4 <__assert_fail@plt+0x9010>
   1b410:	mov	r2, #97	; 0x61
   1b414:	movw	r1, #27128	; 0x69f8
   1b418:	movt	r1, #4
   1b41c:	movw	r0, #27652	; 0x6c04
   1b420:	movt	r0, #4
   1b424:	bl	125c4 <__assert_fail@plt>
   1b428:	ldr	r3, [pc, #420]	; 1b5d4 <__assert_fail@plt+0x9010>
   1b42c:	mov	r2, #98	; 0x62
   1b430:	movw	r1, #27128	; 0x69f8
   1b434:	movt	r1, #4
   1b438:	movw	r0, #27672	; 0x6c18
   1b43c:	movt	r0, #4
   1b440:	bl	125c4 <__assert_fail@plt>
   1b444:	ldr	r3, [pc, #392]	; 1b5d4 <__assert_fail@plt+0x9010>
   1b448:	mov	r2, #105	; 0x69
   1b44c:	movw	r1, #27128	; 0x69f8
   1b450:	movt	r1, #4
   1b454:	movw	r0, #27696	; 0x6c30
   1b458:	movt	r0, #4
   1b45c:	bl	125c4 <__assert_fail@plt>
   1b460:	add	r3, r3, #1
   1b464:	mov	r2, #37	; 0x25
   1b468:	strb	r2, [r7, r6]
   1b46c:	mov	r2, #0
   1b470:	strb	r2, [r3]
   1b474:	b	1b4a4 <__assert_fail@plt+0x8ee0>
   1b478:	mov	r2, #1
   1b47c:	strb	r2, [fp, #18]
   1b480:	mov	r2, #115	; 0x73
   1b484:	strb	r2, [r7, r6]
   1b488:	add	r3, r3, #1
   1b48c:	mov	r2, #4
   1b490:	mov	r1, #0
   1b494:	strb	r1, [r3]
   1b498:	ldr	r3, [fp, #24]
   1b49c:	cmp	r3, r2
   1b4a0:	strcc	r2, [fp, #24]
   1b4a4:	ldr	r0, [r9]
   1b4a8:	add	r0, r0, #16
   1b4ac:	add	sp, sp, #12
   1b4b0:	ldrd	r4, [sp]
   1b4b4:	ldrd	r6, [sp, #8]
   1b4b8:	ldrd	r8, [sp, #16]
   1b4bc:	ldrd	sl, [sp, #24]
   1b4c0:	add	sp, sp, #32
   1b4c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4c8:	mov	r2, #1
   1b4cc:	strb	r2, [fp, #19]
   1b4d0:	mov	r2, #115	; 0x73
   1b4d4:	strb	r2, [r7, r6]
   1b4d8:	add	r3, r3, #1
   1b4dc:	mov	r2, #2
   1b4e0:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b4e4:	mov	r2, #1
   1b4e8:	strb	r2, [fp, #20]
   1b4ec:	mov	r1, #115	; 0x73
   1b4f0:	strb	r1, [r7, r6]
   1b4f4:	add	r3, r3, r2
   1b4f8:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b4fc:	mov	r2, #1
   1b500:	strb	r2, [fp, #18]
   1b504:	mov	r2, #115	; 0x73
   1b508:	strb	r2, [r7, r6]
   1b50c:	add	r3, r3, #1
   1b510:	mov	r2, #3
   1b514:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b518:	mov	r2, #1
   1b51c:	strb	r2, [fp, #18]
   1b520:	mov	r2, #103	; 0x67
   1b524:	strb	r2, [r7, r6]
   1b528:	add	r3, r3, #1
   1b52c:	mov	r2, #3
   1b530:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b534:	mov	r2, #1
   1b538:	strb	r2, [fp, #18]
   1b53c:	mov	r2, #115	; 0x73
   1b540:	strb	r2, [r7, r6]
   1b544:	add	r3, r3, #1
   1b548:	mov	r2, #2
   1b54c:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b550:	add	r3, r3, #1
   1b554:	mov	r2, #115	; 0x73
   1b558:	strb	r2, [r7, r6]
   1b55c:	b	1b46c <__assert_fail@plt+0x8ea8>
   1b560:	mov	r2, #115	; 0x73
   1b564:	strb	r2, [r7, r6]
   1b568:	add	r3, r3, #1
   1b56c:	mov	r2, #5
   1b570:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b574:	add	r3, r3, #1
   1b578:	mov	r2, #115	; 0x73
   1b57c:	strb	r2, [r7, r6]
   1b580:	b	1b46c <__assert_fail@plt+0x8ea8>
   1b584:	mov	r2, #1
   1b588:	strb	r2, [fp, #18]
   1b58c:	mov	r2, #115	; 0x73
   1b590:	strb	r2, [r7, r6]
   1b594:	add	r3, r3, #1
   1b598:	mov	r2, #3
   1b59c:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b5a0:	add	r3, r3, #1
   1b5a4:	mov	r2, #100	; 0x64
   1b5a8:	strb	r2, [r7, r6]
   1b5ac:	b	1b46c <__assert_fail@plt+0x8ea8>
   1b5b0:	mov	r2, #111	; 0x6f
   1b5b4:	strb	r2, [r7, r6]
   1b5b8:	mov	r2, #1
   1b5bc:	strb	r2, [fp, #18]
   1b5c0:	add	r3, r3, r2
   1b5c4:	mov	r2, #3
   1b5c8:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b5cc:	mov	r2, #0
   1b5d0:	b	1b490 <__assert_fail@plt+0x8ecc>
   1b5d4:	ldrdeq	r6, [r4], -ip
   1b5d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b5dc:	strd	r6, [sp, #8]
   1b5e0:	strd	r8, [sp, #16]
   1b5e4:	strd	sl, [sp, #24]
   1b5e8:	str	lr, [sp, #32]
   1b5ec:	sub	sp, sp, #28
   1b5f0:	mov	r4, r0
   1b5f4:	mov	r0, r1
   1b5f8:	mov	r7, r2
   1b5fc:	movw	r1, #45040	; 0xaff0
   1b600:	movt	r1, #1
   1b604:	bl	18424 <__assert_fail@plt+0x5e60>
   1b608:	mov	r3, #1
   1b60c:	strb	r3, [r0, #17]
   1b610:	strb	r3, [r0, #16]
   1b614:	add	r8, r0, #40	; 0x28
   1b618:	ldrd	r2, [r4]
   1b61c:	strd	r2, [r0, #40]	; 0x28
   1b620:	ldrd	r2, [r4, #8]
   1b624:	strd	r2, [r8, #8]
   1b628:	ldr	r3, [r4, #16]
   1b62c:	str	r3, [r8, #16]
   1b630:	mov	r3, #0
   1b634:	strb	r3, [r0, #19]
   1b638:	strb	r3, [r0, #18]
   1b63c:	str	r3, [r0, #24]
   1b640:	str	r3, [r0, #40]	; 0x28
   1b644:	ldrb	r3, [r7]
   1b648:	cmp	r3, #0
   1b64c:	beq	1b920 <__assert_fail@plt+0x935c>
   1b650:	mov	sl, r0
   1b654:	mov	r5, r7
   1b658:	movw	r2, #27808	; 0x6ca0
   1b65c:	movt	r2, #4
   1b660:	str	r2, [sp, #20]
   1b664:	movw	r9, #27800	; 0x6c98
   1b668:	movt	r9, #4
   1b66c:	b	1b9b8 <__assert_fail@plt+0x93f4>
   1b670:	ldrb	r3, [r5, #1]
   1b674:	cmp	r3, #99	; 0x63
   1b678:	beq	1b710 <__assert_fail@plt+0x914c>
   1b67c:	cmp	r3, #0
   1b680:	beq	1b754 <__assert_fail@plt+0x9190>
   1b684:	sub	r2, r3, #48	; 0x30
   1b688:	uxtb	r2, r2
   1b68c:	cmp	r2, #7
   1b690:	bls	1b780 <__assert_fail@plt+0x91bc>
   1b694:	sub	r2, r3, #92	; 0x5c
   1b698:	cmp	r2, #26
   1b69c:	ldrls	pc, [pc, r2, lsl #2]
   1b6a0:	b	1b7f8 <__assert_fail@plt+0x9234>
   1b6a4:	andeq	fp, r1, ip, ror #18
   1b6a8:	strdeq	fp, [r1], -r8
   1b6ac:	strdeq	fp, [r1], -r8
   1b6b0:	strdeq	fp, [r1], -r8
   1b6b4:	strdeq	fp, [r1], -r8
   1b6b8:	andeq	fp, r1, r0, ror #18
   1b6bc:	ldrdeq	fp, [r1], -r0
   1b6c0:	strdeq	fp, [r1], -r8
   1b6c4:	strdeq	fp, [r1], -r8
   1b6c8:	strdeq	fp, [r1], -r8
   1b6cc:	andeq	fp, r1, r8, ror #18
   1b6d0:	strdeq	fp, [r1], -r8
   1b6d4:	strdeq	fp, [r1], -r8
   1b6d8:	strdeq	fp, [r1], -r8
   1b6dc:	strdeq	fp, [r1], -r8
   1b6e0:	strdeq	fp, [r1], -r8
   1b6e4:	strdeq	fp, [r1], -r8
   1b6e8:	strdeq	fp, [r1], -r8
   1b6ec:	ldrdeq	fp, [r1], -r8
   1b6f0:	strdeq	fp, [r1], -r8
   1b6f4:	strdeq	fp, [r1], -r8
   1b6f8:	strdeq	fp, [r1], -r8
   1b6fc:	andeq	fp, r1, r0, ror #15
   1b700:	strdeq	fp, [r1], -r8
   1b704:	andeq	fp, r1, r8, ror #15
   1b708:	strdeq	fp, [r1], -r8
   1b70c:	strdeq	fp, [r1], -r0
   1b710:	str	sl, [sp, #8]
   1b714:	mov	r3, #0
   1b718:	str	r3, [sp, #4]
   1b71c:	str	r3, [sp]
   1b720:	mov	r3, #1
   1b724:	sub	r2, r5, r7
   1b728:	mov	r1, r7
   1b72c:	mov	r0, r8
   1b730:	bl	1b18c <__assert_fail@plt+0x8bc8>
   1b734:	ldrb	r3, [sl, #18]
   1b738:	cmp	r3, #0
   1b73c:	beq	1b920 <__assert_fail@plt+0x935c>
   1b740:	ldr	r3, [sl, #24]
   1b744:	cmp	r3, #2
   1b748:	movls	r3, #3
   1b74c:	strls	r3, [sl, #24]
   1b750:	b	1b920 <__assert_fail@plt+0x935c>
   1b754:	mov	r2, #5
   1b758:	movw	r1, #27716	; 0x6c44
   1b75c:	movt	r1, #4
   1b760:	mov	r0, #0
   1b764:	bl	12084 <dcgettext@plt>
   1b768:	mov	r2, r0
   1b76c:	mov	r1, #0
   1b770:	mov	r0, r1
   1b774:	bl	121bc <error@plt>
   1b778:	mov	r4, #0
   1b77c:	b	1b974 <__assert_fail@plt+0x93b0>
   1b780:	sub	r3, r3, #48	; 0x30
   1b784:	ldrb	r1, [r5, #2]
   1b788:	sub	r2, r1, #48	; 0x30
   1b78c:	uxtb	r2, r2
   1b790:	cmp	r2, #7
   1b794:	movhi	r4, #1
   1b798:	bhi	1b7c8 <__assert_fail@plt+0x9204>
   1b79c:	add	r3, r1, r3, lsl #3
   1b7a0:	sub	r3, r3, #48	; 0x30
   1b7a4:	ldrb	r1, [r5, #3]
   1b7a8:	sub	r2, r1, #48	; 0x30
   1b7ac:	uxtb	r2, r2
   1b7b0:	cmp	r2, #7
   1b7b4:	movhi	r4, #2
   1b7b8:	bhi	1b7c8 <__assert_fail@plt+0x9204>
   1b7bc:	add	r3, r1, r3, lsl #3
   1b7c0:	sub	r3, r3, #48	; 0x30
   1b7c4:	mov	r4, #3
   1b7c8:	strb	r3, [r5]
   1b7cc:	b	1b974 <__assert_fail@plt+0x93b0>
   1b7d0:	mov	r3, #8
   1b7d4:	b	1b96c <__assert_fail@plt+0x93a8>
   1b7d8:	mov	r3, #10
   1b7dc:	b	1b96c <__assert_fail@plt+0x93a8>
   1b7e0:	mov	r3, #13
   1b7e4:	b	1b96c <__assert_fail@plt+0x93a8>
   1b7e8:	mov	r3, #9
   1b7ec:	b	1b96c <__assert_fail@plt+0x93a8>
   1b7f0:	mov	r3, #11
   1b7f4:	b	1b96c <__assert_fail@plt+0x93a8>
   1b7f8:	mov	r2, #5
   1b7fc:	movw	r1, #27764	; 0x6c74
   1b800:	movt	r1, #4
   1b804:	mov	r0, #0
   1b808:	bl	12084 <dcgettext@plt>
   1b80c:	mov	r4, r5
   1b810:	ldrb	r3, [r4, #1]!
   1b814:	mov	r2, r0
   1b818:	mov	r1, #0
   1b81c:	mov	r0, r1
   1b820:	bl	121bc <error@plt>
   1b824:	b	1b9a8 <__assert_fail@plt+0x93e4>
   1b828:	mov	r2, #5
   1b82c:	movw	r1, #27552	; 0x6ba0
   1b830:	movt	r1, #4
   1b834:	mov	r0, #0
   1b838:	bl	12084 <dcgettext@plt>
   1b83c:	mov	r3, r5
   1b840:	mov	r2, r0
   1b844:	mov	r1, #0
   1b848:	mov	r0, #1
   1b84c:	bl	121bc <error@plt>
   1b850:	add	r6, r6, #1
   1b854:	add	r2, r5, r6
   1b858:	ldrb	r3, [r5, r6]
   1b85c:	lsl	r3, r3, #1
   1b860:	ldrh	r3, [r1, r3]
   1b864:	tst	r3, #2048	; 0x800
   1b868:	beq	1ba3c <__assert_fail@plt+0x9478>
   1b86c:	add	r6, fp, r2
   1b870:	ldrb	r3, [r2, #1]!
   1b874:	lsl	r3, r3, #1
   1b878:	ldrh	r3, [r1, r3]
   1b87c:	tst	r3, #2048	; 0x800
   1b880:	bne	1b86c <__assert_fail@plt+0x92a8>
   1b884:	b	1ba3c <__assert_fail@plt+0x9478>
   1b888:	mov	r1, fp
   1b88c:	movw	r0, #27840	; 0x6cc0
   1b890:	movt	r0, #4
   1b894:	bl	122dc <strchr@plt>
   1b898:	cmp	r0, #0
   1b89c:	beq	1bac0 <__assert_fail@plt+0x94fc>
   1b8a0:	add	r5, r4, #1
   1b8a4:	ldrb	r3, [r4, #1]
   1b8a8:	cmp	r3, #0
   1b8ac:	moveq	r5, #2
   1b8b0:	beq	1ba68 <__assert_fail@plt+0x94a4>
   1b8b4:	ldrb	r3, [r4, #1]
   1b8b8:	b	1b8c4 <__assert_fail@plt+0x9300>
   1b8bc:	mov	r5, r4
   1b8c0:	mov	r3, #0
   1b8c4:	str	sl, [sp, #8]
   1b8c8:	str	r3, [sp, #4]
   1b8cc:	str	fp, [sp]
   1b8d0:	mov	r3, #2
   1b8d4:	sub	r2, r4, r7
   1b8d8:	mov	r1, r7
   1b8dc:	mov	r0, r8
   1b8e0:	bl	1b18c <__assert_fail@plt+0x8bc8>
   1b8e4:	mov	r8, r0
   1b8e8:	mov	r4, r5
   1b8ec:	b	1bb28 <__assert_fail@plt+0x9564>
   1b8f0:	mov	r2, #5
   1b8f4:	movw	r1, #27852	; 0x6ccc
   1b8f8:	movt	r1, #4
   1b8fc:	mov	r0, #0
   1b900:	bl	12084 <dcgettext@plt>
   1b904:	ldrb	r3, [r4]
   1b908:	mov	r2, r0
   1b90c:	mov	r1, #0
   1b910:	mov	r0, #1
   1b914:	bl	121bc <error@plt>
   1b918:	cmp	r7, r5
   1b91c:	bcc	1b940 <__assert_fail@plt+0x937c>
   1b920:	mov	r0, #1
   1b924:	add	sp, sp, #28
   1b928:	ldrd	r4, [sp]
   1b92c:	ldrd	r6, [sp, #8]
   1b930:	ldrd	r8, [sp, #16]
   1b934:	ldrd	sl, [sp, #24]
   1b938:	add	sp, sp, #32
   1b93c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b940:	str	sl, [sp, #8]
   1b944:	str	r3, [sp, #4]
   1b948:	str	r3, [sp]
   1b94c:	sub	r2, r5, r7
   1b950:	mov	r1, r7
   1b954:	mov	r0, r8
   1b958:	bl	1b18c <__assert_fail@plt+0x8bc8>
   1b95c:	b	1b920 <__assert_fail@plt+0x935c>
   1b960:	mov	r3, #7
   1b964:	b	1b96c <__assert_fail@plt+0x93a8>
   1b968:	mov	r3, #12
   1b96c:	strb	r3, [r5]
   1b970:	mov	r4, #1
   1b974:	sub	r2, r5, r7
   1b978:	str	sl, [sp, #8]
   1b97c:	mov	r3, #0
   1b980:	str	r3, [sp, #4]
   1b984:	str	r3, [sp]
   1b988:	add	r2, r2, #1
   1b98c:	mov	r1, r7
   1b990:	mov	r0, r8
   1b994:	bl	1b18c <__assert_fail@plt+0x8bc8>
   1b998:	mov	r8, r0
   1b99c:	add	r7, r4, #1
   1b9a0:	add	r7, r5, r7
   1b9a4:	add	r4, r5, r4
   1b9a8:	add	r5, r4, #1
   1b9ac:	ldrb	r3, [r4, #1]
   1b9b0:	cmp	r3, #0
   1b9b4:	beq	1b918 <__assert_fail@plt+0x9354>
   1b9b8:	cmp	r3, #92	; 0x5c
   1b9bc:	beq	1b670 <__assert_fail@plt+0x90ac>
   1b9c0:	cmp	r3, #37	; 0x25
   1b9c4:	movne	r4, r5
   1b9c8:	bne	1b9a8 <__assert_fail@plt+0x93e4>
   1b9cc:	ldrb	r3, [r5, #1]
   1b9d0:	cmp	r3, #0
   1b9d4:	beq	1b828 <__assert_fail@plt+0x9264>
   1b9d8:	cmp	r3, #37	; 0x25
   1b9dc:	moveq	r6, #1
   1b9e0:	beq	1ba3c <__assert_fail@plt+0x9478>
   1b9e4:	mov	r6, r5
   1b9e8:	rsb	fp, r5, #1
   1b9ec:	add	r4, fp, r6
   1b9f0:	ldrb	r1, [r6, #1]!
   1b9f4:	cmp	r1, #0
   1b9f8:	beq	1ba0c <__assert_fail@plt+0x9448>
   1b9fc:	mov	r0, r9
   1ba00:	bl	122dc <strchr@plt>
   1ba04:	cmp	r0, #0
   1ba08:	bne	1b9ec <__assert_fail@plt+0x9428>
   1ba0c:	bl	12288 <__ctype_b_loc@plt>
   1ba10:	ldr	r1, [r0]
   1ba14:	sub	r4, r4, #1
   1ba18:	add	r4, r5, r4
   1ba1c:	add	r6, r4, fp
   1ba20:	ldrb	r3, [r4, #1]!
   1ba24:	lsl	r2, r3, #1
   1ba28:	ldrh	r2, [r1, r2]
   1ba2c:	tst	r2, #2048	; 0x800
   1ba30:	bne	1ba1c <__assert_fail@plt+0x9458>
   1ba34:	cmp	r3, #46	; 0x2e
   1ba38:	beq	1b850 <__assert_fail@plt+0x928c>
   1ba3c:	add	r4, r5, r6
   1ba40:	ldrb	fp, [r5, r6]
   1ba44:	mov	r1, fp
   1ba48:	ldr	r0, [sp, #20]
   1ba4c:	bl	122dc <strchr@plt>
   1ba50:	cmp	r0, #0
   1ba54:	beq	1b888 <__assert_fail@plt+0x92c4>
   1ba58:	ldrb	r3, [r5, r6]
   1ba5c:	cmp	r3, #0
   1ba60:	moveq	r5, #1
   1ba64:	bne	1b8bc <__assert_fail@plt+0x92f8>
   1ba68:	mov	r1, fp
   1ba6c:	movw	r0, #27848	; 0x6cc8
   1ba70:	movt	r0, #4
   1ba74:	bl	122dc <strchr@plt>
   1ba78:	cmp	r0, #0
   1ba7c:	bne	1b8f0 <__assert_fail@plt+0x932c>
   1ba80:	cmp	r5, #2
   1ba84:	bne	1bad8 <__assert_fail@plt+0x9514>
   1ba88:	ldrb	r3, [r4, #1]
   1ba8c:	cmp	r3, #0
   1ba90:	bne	1bad8 <__assert_fail@plt+0x9514>
   1ba94:	mov	r2, #5
   1ba98:	movw	r1, #27916	; 0x6d0c
   1ba9c:	movt	r1, #4
   1baa0:	mov	r0, #0
   1baa4:	bl	12084 <dcgettext@plt>
   1baa8:	ldrb	r3, [r4]
   1baac:	mov	r2, r0
   1bab0:	mov	r1, #0
   1bab4:	mov	r0, r1
   1bab8:	bl	121bc <error@plt>
   1babc:	b	1bb00 <__assert_fail@plt+0x953c>
   1bac0:	mov	r1, fp
   1bac4:	movw	r0, #27848	; 0x6cc8
   1bac8:	movt	r0, #4
   1bacc:	bl	122dc <strchr@plt>
   1bad0:	cmp	r0, #0
   1bad4:	bne	1b8f0 <__assert_fail@plt+0x932c>
   1bad8:	mov	r2, #5
   1badc:	movw	r1, #27992	; 0x6d58
   1bae0:	movt	r1, #4
   1bae4:	mov	r0, #0
   1bae8:	bl	12084 <dcgettext@plt>
   1baec:	ldrb	r3, [r4]
   1baf0:	mov	r2, r0
   1baf4:	mov	r1, #0
   1baf8:	mov	r0, r1
   1bafc:	bl	121bc <error@plt>
   1bb00:	add	r2, r4, #1
   1bb04:	str	sl, [sp, #8]
   1bb08:	mov	r3, #0
   1bb0c:	str	r3, [sp, #4]
   1bb10:	str	r3, [sp]
   1bb14:	sub	r2, r2, r7
   1bb18:	mov	r1, r7
   1bb1c:	mov	r0, r8
   1bb20:	bl	1b18c <__assert_fail@plt+0x8bc8>
   1bb24:	mov	r8, r0
   1bb28:	add	r7, r4, #1
   1bb2c:	b	1b9a8 <__assert_fail@plt+0x93e4>
   1bb30:	strd	r4, [sp, #-16]!
   1bb34:	str	r6, [sp, #8]
   1bb38:	str	lr, [sp, #12]
   1bb3c:	mov	r5, r0
   1bb40:	movw	r3, #48312	; 0xbcb8
   1bb44:	movt	r3, #5
   1bb48:	ldr	r0, [r3]
   1bb4c:	cmp	r0, #0
   1bb50:	beq	1bbac <__assert_fail@plt+0x95e8>
   1bb54:	movw	r3, #48312	; 0xbcb8
   1bb58:	movt	r3, #5
   1bb5c:	ldrb	r3, [r3, #4]
   1bb60:	eor	r3, r3, #1
   1bb64:	tst	r5, r3
   1bb68:	bne	1bb88 <__assert_fail@plt+0x95c4>
   1bb6c:	movw	r3, #48312	; 0xbcb8
   1bb70:	movt	r3, #5
   1bb74:	ldr	r0, [r3]
   1bb78:	ldrd	r4, [sp]
   1bb7c:	ldr	r6, [sp, #8]
   1bb80:	add	sp, sp, #12
   1bb84:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb88:	ldr	r4, [r0, #28]
   1bb8c:	bl	322dc <__assert_fail@plt+0x1fd18>
   1bb90:	mov	r0, r4
   1bb94:	cmp	r4, #0
   1bb98:	bne	1bb88 <__assert_fail@plt+0x95c4>
   1bb9c:	movw	r3, #48312	; 0xbcb8
   1bba0:	movt	r3, #5
   1bba4:	mov	r2, #0
   1bba8:	str	r2, [r3]
   1bbac:	mov	r0, r5
   1bbb0:	bl	3232c <__assert_fail@plt+0x1fd68>
   1bbb4:	movw	r3, #48312	; 0xbcb8
   1bbb8:	movt	r3, #5
   1bbbc:	str	r0, [r3]
   1bbc0:	strb	r5, [r3, #4]
   1bbc4:	b	1bb6c <__assert_fail@plt+0x95a8>
   1bbc8:	strd	r4, [sp, #-12]!
   1bbcc:	str	lr, [sp, #8]
   1bbd0:	sub	sp, sp, #108	; 0x6c
   1bbd4:	ldrd	r4, [r0, #16]
   1bbd8:	mvn	r2, #0
   1bbdc:	mvn	r3, #0
   1bbe0:	cmp	r5, r3
   1bbe4:	cmpeq	r4, r2
   1bbe8:	movne	r0, #0
   1bbec:	beq	1bc00 <__assert_fail@plt+0x963c>
   1bbf0:	add	sp, sp, #108	; 0x6c
   1bbf4:	ldrd	r4, [sp]
   1bbf8:	add	sp, sp, #8
   1bbfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc00:	mov	r4, r0
   1bc04:	mov	r0, sp
   1bc08:	bl	18720 <__assert_fail@plt+0x615c>
   1bc0c:	movw	r3, #48748	; 0xbe6c
   1bc10:	movt	r3, #5
   1bc14:	ldr	r3, [r3, #52]	; 0x34
   1bc18:	mov	r1, sp
   1bc1c:	ldr	r0, [r4, #4]
   1bc20:	blx	r3
   1bc24:	cmp	r0, #0
   1bc28:	ldrdeq	r2, [sp]
   1bc2c:	strdeq	r2, [r4, #16]
   1bc30:	mvnne	r0, #0
   1bc34:	b	1bbf0 <__assert_fail@plt+0x962c>
   1bc38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bc3c:	strd	r6, [sp, #8]
   1bc40:	str	r8, [sp, #16]
   1bc44:	str	lr, [sp, #20]
   1bc48:	mov	r6, r0
   1bc4c:	movw	r3, #48312	; 0xbcb8
   1bc50:	movt	r3, #5
   1bc54:	ldr	r3, [r3, #8]
   1bc58:	cmp	r3, #0
   1bc5c:	beq	1bc98 <__assert_fail@plt+0x96d4>
   1bc60:	movw	r2, #48312	; 0xbcb8
   1bc64:	movt	r2, #5
   1bc68:	ldrb	r2, [r2, #12]
   1bc6c:	cmp	r2, #0
   1bc70:	beq	1bc90 <__assert_fail@plt+0x96cc>
   1bc74:	movw	r2, #48312	; 0xbcb8
   1bc78:	movt	r2, #5
   1bc7c:	ldrd	r0, [r0]
   1bc80:	ldrd	r4, [r2, #16]
   1bc84:	cmp	r1, r5
   1bc88:	cmpeq	r0, r4
   1bc8c:	beq	1bd60 <__assert_fail@plt+0x979c>
   1bc90:	mov	r0, r3
   1bc94:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1bc98:	movw	r3, #48312	; 0xbcb8
   1bc9c:	movt	r3, #5
   1bca0:	ldrd	r0, [r6]
   1bca4:	strd	r0, [r3, #16]
   1bca8:	mov	r0, #1
   1bcac:	bl	1bb30 <__assert_fail@plt+0x956c>
   1bcb0:	subs	r4, r0, #0
   1bcb4:	movne	r5, #0
   1bcb8:	movwne	r7, #28156	; 0x6dfc
   1bcbc:	movtne	r7, #4
   1bcc0:	bne	1bcf0 <__assert_fail@plt+0x972c>
   1bcc4:	mov	r2, #5
   1bcc8:	movw	r1, #28116	; 0x6dd4
   1bccc:	movt	r1, #4
   1bcd0:	bl	12084 <dcgettext@plt>
   1bcd4:	mov	r2, r0
   1bcd8:	mov	r1, #0
   1bcdc:	mov	r0, #1
   1bce0:	bl	121bc <error@plt>
   1bce4:	ldr	r4, [r4, #28]
   1bce8:	cmp	r4, #0
   1bcec:	beq	1bd2c <__assert_fail@plt+0x9768>
   1bcf0:	mov	r1, r7
   1bcf4:	ldr	r0, [r4, #12]
   1bcf8:	bl	11f1c <strcmp@plt>
   1bcfc:	cmp	r0, #0
   1bd00:	beq	1bce4 <__assert_fail@plt+0x9720>
   1bd04:	mov	r0, r4
   1bd08:	bl	1bbc8 <__assert_fail@plt+0x9604>
   1bd0c:	cmp	r0, #0
   1bd10:	bne	1bce4 <__assert_fail@plt+0x9720>
   1bd14:	ldrd	r0, [r4, #16]
   1bd18:	ldrd	r2, [r6]
   1bd1c:	cmp	r1, r3
   1bd20:	cmpeq	r0, r2
   1bd24:	moveq	r5, r4
   1bd28:	b	1bce4 <__assert_fail@plt+0x9720>
   1bd2c:	cmp	r5, #0
   1bd30:	beq	1bd78 <__assert_fail@plt+0x97b4>
   1bd34:	ldr	r0, [r5, #12]
   1bd38:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   1bd3c:	movw	r2, #48312	; 0xbcb8
   1bd40:	movt	r2, #5
   1bd44:	mov	r3, r0
   1bd48:	adds	r0, r0, #0
   1bd4c:	movne	r0, #1
   1bd50:	strb	r0, [r2, #12]
   1bd54:	movw	r2, #48312	; 0xbcb8
   1bd58:	movt	r2, #5
   1bd5c:	str	r3, [r2, #8]
   1bd60:	mov	r0, r3
   1bd64:	ldrd	r4, [sp]
   1bd68:	ldrd	r6, [sp, #8]
   1bd6c:	ldr	r8, [sp, #16]
   1bd70:	add	sp, sp, #20
   1bd74:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd78:	movw	r3, #48312	; 0xbcb8
   1bd7c:	movt	r3, #5
   1bd80:	mov	r0, #0
   1bd84:	strb	r0, [r3, #12]
   1bd88:	mov	r2, #5
   1bd8c:	movw	r1, #22100	; 0x5654
   1bd90:	movt	r1, #4
   1bd94:	bl	12084 <dcgettext@plt>
   1bd98:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   1bd9c:	mov	r3, r0
   1bda0:	b	1bd54 <__assert_fail@plt+0x9790>
   1bda4:	strd	r4, [sp, #-16]!
   1bda8:	str	r6, [sp, #8]
   1bdac:	str	lr, [sp, #12]
   1bdb0:	mov	r5, r0
   1bdb4:	mov	r1, r0
   1bdb8:	movw	r0, #28164	; 0x6e04
   1bdbc:	movt	r0, #4
   1bdc0:	bl	11f1c <strcmp@plt>
   1bdc4:	cmp	r0, #0
   1bdc8:	moveq	r0, #1
   1bdcc:	bne	1bde0 <__assert_fail@plt+0x981c>
   1bdd0:	ldrd	r4, [sp]
   1bdd4:	ldr	r6, [sp, #8]
   1bdd8:	add	sp, sp, #12
   1bddc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bde0:	mov	r0, #0
   1bde4:	bl	1bb30 <__assert_fail@plt+0x956c>
   1bde8:	subs	r4, r0, #0
   1bdec:	moveq	r0, #1
   1bdf0:	beq	1bdd0 <__assert_fail@plt+0x980c>
   1bdf4:	ldr	r1, [r4, #12]
   1bdf8:	mov	r0, r5
   1bdfc:	bl	11f1c <strcmp@plt>
   1be00:	cmp	r0, #0
   1be04:	beq	1be1c <__assert_fail@plt+0x9858>
   1be08:	ldr	r4, [r4, #28]
   1be0c:	cmp	r4, #0
   1be10:	bne	1bdf4 <__assert_fail@plt+0x9830>
   1be14:	mov	r0, #0
   1be18:	b	1bdd0 <__assert_fail@plt+0x980c>
   1be1c:	mov	r0, #1
   1be20:	b	1bdd0 <__assert_fail@plt+0x980c>
   1be24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be28:	strd	r6, [sp, #8]
   1be2c:	strd	r8, [sp, #16]
   1be30:	strd	sl, [sp, #24]
   1be34:	str	lr, [sp, #32]
   1be38:	sub	sp, sp, #12
   1be3c:	mov	r9, r0
   1be40:	mov	r0, #0
   1be44:	str	r0, [sp, #4]
   1be48:	bl	3232c <__assert_fail@plt+0x1fd68>
   1be4c:	subs	r5, r0, #0
   1be50:	beq	1bf08 <__assert_fail@plt+0x9944>
   1be54:	mov	r4, r5
   1be58:	mov	sl, #0
   1be5c:	mov	fp, sl
   1be60:	b	1be7c <__assert_fail@plt+0x98b8>
   1be64:	mov	r0, sl
   1be68:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1be6c:	mov	sl, r8
   1be70:	ldr	r4, [r4, #28]
   1be74:	cmp	r4, #0
   1be78:	beq	1bec8 <__assert_fail@plt+0x9904>
   1be7c:	add	r7, fp, #1
   1be80:	lsl	r6, r7, #3
   1be84:	add	r2, sp, #4
   1be88:	mov	r1, r6
   1be8c:	mov	r0, sl
   1be90:	bl	20f70 <__assert_fail@plt+0xe9ac>
   1be94:	subs	r8, r0, #0
   1be98:	beq	1be64 <__assert_fail@plt+0x98a0>
   1be9c:	mov	r0, r4
   1bea0:	bl	1bbc8 <__assert_fail@plt+0x9604>
   1bea4:	cmp	r0, #0
   1bea8:	movne	sl, r8
   1beac:	bne	1be70 <__assert_fail@plt+0x98ac>
   1beb0:	ldrd	r2, [r4, #16]
   1beb4:	add	r6, r8, r6
   1beb8:	strd	r2, [r6, #-8]
   1bebc:	mov	sl, r8
   1bec0:	mov	fp, r7
   1bec4:	b	1be70 <__assert_fail@plt+0x98ac>
   1bec8:	ldr	r4, [r5, #28]
   1becc:	mov	r0, r5
   1bed0:	bl	322dc <__assert_fail@plt+0x1fd18>
   1bed4:	mov	r5, r4
   1bed8:	cmp	r4, #0
   1bedc:	bne	1bec8 <__assert_fail@plt+0x9904>
   1bee0:	cmp	sl, #0
   1bee4:	strne	fp, [r9]
   1bee8:	mov	r0, sl
   1beec:	add	sp, sp, #12
   1bef0:	ldrd	r4, [sp]
   1bef4:	ldrd	r6, [sp, #8]
   1bef8:	ldrd	r8, [sp, #16]
   1befc:	ldrd	sl, [sp, #24]
   1bf00:	add	sp, sp, #32
   1bf04:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf08:	mov	sl, r5
   1bf0c:	b	1bee8 <__assert_fail@plt+0x9924>
   1bf10:	movw	r3, #48748	; 0xbe6c
   1bf14:	movt	r3, #5
   1bf18:	ldr	r3, [r3, #28]
   1bf1c:	sub	r0, r3, r0
   1bf20:	movw	r3, #17671	; 0x4507
   1bf24:	movt	r3, #49710	; 0xc22e
   1bf28:	smull	r2, r3, r3, r0
   1bf2c:	add	r3, r3, r0
   1bf30:	asr	r0, r0, #31
   1bf34:	rsb	r0, r0, r3, asr #16
   1bf38:	vmov	s15, r0
   1bf3c:	vcvt.f32.s32	s15, s15
   1bf40:	vldr	s14, [pc, #68]	; 1bf8c <__assert_fail@plt+0x99c8>
   1bf44:	vcmpe.f32	s15, s14
   1bf48:	vmrs	APSR_nzcv, fpscr
   1bf4c:	bmi	1bf7c <__assert_fail@plt+0x99b8>
   1bf50:	vldr	s14, [pc, #56]	; 1bf90 <__assert_fail@plt+0x99cc>
   1bf54:	vcmpe.f32	s15, s14
   1bf58:	vmrs	APSR_nzcv, fpscr
   1bf5c:	bmi	1bf84 <__assert_fail@plt+0x99c0>
   1bf60:	vldr	s14, [pc, #44]	; 1bf94 <__assert_fail@plt+0x99d0>
   1bf64:	vcmpe.f32	s15, s14
   1bf68:	vmrs	APSR_nzcv, fpscr
   1bf6c:	vldr	s0, [pc, #36]	; 1bf98 <__assert_fail@plt+0x99d4>
   1bf70:	vldr	s15, [pc, #36]	; 1bf9c <__assert_fail@plt+0x99d8>
   1bf74:	vmovle.f32	s0, s15
   1bf78:	bx	lr
   1bf7c:	vldr	s0, [pc, #28]	; 1bfa0 <__assert_fail@plt+0x99dc>
   1bf80:	bx	lr
   1bf84:	vldr	s0, [pc, #12]	; 1bf98 <__assert_fail@plt+0x99d4>
   1bf88:	bx	lr
   1bf8c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bf90:	svccc	0x00800000
   1bf94:	sbcmi	r0, r8, #0
   1bf98:			; <UNDEFINED> instruction: 0x3e99999a
   1bf9c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1bfa0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bfa4:	cmp	r0, #0
   1bfa8:	beq	1bfd4 <__assert_fail@plt+0x9a10>
   1bfac:	ldr	r3, [r1]
   1bfb0:	ldr	r3, [r0, r3, lsl #2]
   1bfb4:	cmp	r3, #0
   1bfb8:	beq	1bfd4 <__assert_fail@plt+0x9a10>
   1bfbc:	str	r3, [r2]
   1bfc0:	ldr	r3, [r1]
   1bfc4:	add	r3, r3, #1
   1bfc8:	str	r3, [r1]
   1bfcc:	mov	r0, #1
   1bfd0:	bx	lr
   1bfd4:	mov	r0, #0
   1bfd8:	str	r0, [r2]
   1bfdc:	bx	lr
   1bfe0:	str	r4, [sp, #-8]!
   1bfe4:	str	lr, [sp, #4]
   1bfe8:	sub	sp, sp, #8
   1bfec:	mov	r4, r2
   1bff0:	add	r2, sp, #4
   1bff4:	bl	1bfa4 <__assert_fail@plt+0x99e0>
   1bff8:	ldr	r3, [sp, #4]
   1bffc:	str	r3, [r4]
   1c000:	add	sp, sp, #8
   1c004:	ldr	r4, [sp]
   1c008:	add	sp, sp, #4
   1c00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c010:	push	{lr}		; (str lr, [sp, #-4]!)
   1c014:	sub	sp, sp, #12
   1c018:	mov	r0, r1
   1c01c:	mov	r1, r2
   1c020:	add	r2, sp, #4
   1c024:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1c028:	cmp	r0, #0
   1c02c:	bne	1c038 <__assert_fail@plt+0x9a74>
   1c030:	add	sp, sp, #12
   1c034:	pop	{pc}		; (ldr pc, [sp], #4)
   1c038:	movw	r3, #48748	; 0xbe6c
   1c03c:	movt	r3, #5
   1c040:	ldr	r2, [sp, #4]
   1c044:	str	r2, [r3, #76]	; 0x4c
   1c048:	b	1c030 <__assert_fail@plt+0x9a6c>
   1c04c:	ldr	r3, [r0]
   1c050:	ldrb	r3, [r3]
   1c054:	cmp	r3, #43	; 0x2b
   1c058:	beq	1c070 <__assert_fail@plt+0x9aac>
   1c05c:	cmp	r3, #45	; 0x2d
   1c060:	beq	1c08c <__assert_fail@plt+0x9ac8>
   1c064:	mov	r3, #2
   1c068:	str	r3, [r1]
   1c06c:	b	1c084 <__assert_fail@plt+0x9ac0>
   1c070:	mov	r3, #0
   1c074:	str	r3, [r1]
   1c078:	ldr	r3, [r0]
   1c07c:	add	r3, r3, #1
   1c080:	str	r3, [r0]
   1c084:	mov	r0, #1
   1c088:	bx	lr
   1c08c:	mov	r3, #1
   1c090:	str	r3, [r1]
   1c094:	ldr	r3, [r0]
   1c098:	add	r3, r3, #1
   1c09c:	str	r3, [r0]
   1c0a0:	b	1c084 <__assert_fail@plt+0x9ac0>
   1c0a4:	str	r4, [sp, #-8]!
   1c0a8:	str	lr, [sp, #4]
   1c0ac:	bl	2d7f4 <__assert_fail@plt+0x1b230>
   1c0b0:	ldr	r4, [sp]
   1c0b4:	add	sp, sp, #4
   1c0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c0c0:	strd	r6, [sp, #8]
   1c0c4:	str	r8, [sp, #16]
   1c0c8:	str	lr, [sp, #20]
   1c0cc:	mov	r6, r0
   1c0d0:	mov	r5, r1
   1c0d4:	mov	r7, r2
   1c0d8:	mov	r4, r3
   1c0dc:	bl	12318 <__errno_location@plt>
   1c0e0:	ldr	r3, [r0]
   1c0e4:	cmp	r3, #2
   1c0e8:	beq	1c10c <__assert_fail@plt+0x9b48>
   1c0ec:	cmp	r3, #20
   1c0f0:	beq	1c10c <__assert_fail@plt+0x9b48>
   1c0f4:	mov	r0, r4
   1c0f8:	ldrd	r4, [sp]
   1c0fc:	ldrd	r6, [sp, #8]
   1c100:	ldr	r8, [sp, #16]
   1c104:	add	sp, sp, #20
   1c108:	pop	{pc}		; (ldr pc, [sp], #4)
   1c10c:	movw	r3, #48748	; 0xbe6c
   1c110:	movt	r3, #5
   1c114:	ldr	r3, [r3, #44]	; 0x2c
   1c118:	tst	r3, #2
   1c11c:	bne	1c138 <__assert_fail@plt+0x9b74>
   1c120:	mov	r2, r7
   1c124:	mov	r1, r5
   1c128:	mov	r0, r6
   1c12c:	bl	2d7f4 <__assert_fail@plt+0x1b230>
   1c130:	mov	r4, r0
   1c134:	b	1c0f4 <__assert_fail@plt+0x9b30>
   1c138:	movw	r3, #46408	; 0xb548
   1c13c:	movt	r3, #5
   1c140:	mov	r2, r5
   1c144:	movw	r1, #29648	; 0x73d0
   1c148:	movt	r1, #4
   1c14c:	ldr	r0, [r3]
   1c150:	bl	1230c <fprintf@plt>
   1c154:	b	1c120 <__assert_fail@plt+0x9b5c>
   1c158:	strd	r4, [sp, #-16]!
   1c15c:	str	r6, [sp, #8]
   1c160:	str	lr, [sp, #12]
   1c164:	mov	r4, r0
   1c168:	mov	r5, r1
   1c16c:	mov	r6, r2
   1c170:	movw	r3, #48704	; 0xbe40
   1c174:	movt	r3, #5
   1c178:	ldr	r3, [r3]
   1c17c:	cmp	r3, #0
   1c180:	bne	1c1b8 <__assert_fail@plt+0x9bf4>
   1c184:	bl	2d628 <__assert_fail@plt+0x1b064>
   1c188:	cmp	r0, #0
   1c18c:	bne	1c1a0 <__assert_fail@plt+0x9bdc>
   1c190:	ldrd	r4, [sp]
   1c194:	ldr	r6, [sp, #8]
   1c198:	add	sp, sp, #12
   1c19c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1a0:	mov	r3, r0
   1c1a4:	mov	r2, r6
   1c1a8:	mov	r1, r5
   1c1ac:	mov	r0, r4
   1c1b0:	bl	1c0bc <__assert_fail@plt+0x9af8>
   1c1b4:	b	1c190 <__assert_fail@plt+0x9bcc>
   1c1b8:	bl	2d7f4 <__assert_fail@plt+0x1b230>
   1c1bc:	b	1c190 <__assert_fail@plt+0x9bcc>
   1c1c0:	strd	r4, [sp, #-16]!
   1c1c4:	str	r6, [sp, #8]
   1c1c8:	str	lr, [sp, #12]
   1c1cc:	mov	r4, r0
   1c1d0:	mov	r5, r1
   1c1d4:	mov	r6, r2
   1c1d8:	bl	2d628 <__assert_fail@plt+0x1b064>
   1c1dc:	cmp	r0, #0
   1c1e0:	bne	1c1f4 <__assert_fail@plt+0x9c30>
   1c1e4:	ldrd	r4, [sp]
   1c1e8:	ldr	r6, [sp, #8]
   1c1ec:	add	sp, sp, #12
   1c1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1f4:	mov	r3, r0
   1c1f8:	mov	r2, r6
   1c1fc:	mov	r1, r5
   1c200:	mov	r0, r4
   1c204:	bl	1c0bc <__assert_fail@plt+0x9af8>
   1c208:	b	1c1e4 <__assert_fail@plt+0x9c20>
   1c20c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c210:	sub	sp, sp, #12
   1c214:	movw	r0, #18852	; 0x49a4
   1c218:	movt	r0, #4
   1c21c:	bl	216a8 <__assert_fail@plt+0xf0e4>
   1c220:	mov	r2, #5
   1c224:	movw	r1, #29748	; 0x7434
   1c228:	movt	r1, #4
   1c22c:	mov	r0, #0
   1c230:	bl	12084 <dcgettext@plt>
   1c234:	bl	11f40 <printf@plt>
   1c238:	movw	r0, #29768	; 0x7448
   1c23c:	movt	r0, #4
   1c240:	bl	11f40 <printf@plt>
   1c244:	movw	r3, #48748	; 0xbe6c
   1c248:	movt	r3, #5
   1c24c:	ldrb	r1, [r3, #56]	; 0x38
   1c250:	movw	r2, #29728	; 0x7420
   1c254:	movt	r2, #4
   1c258:	movw	r3, #29736	; 0x7428
   1c25c:	movt	r3, #4
   1c260:	cmp	r1, #0
   1c264:	movne	r1, r2
   1c268:	moveq	r1, r3
   1c26c:	movw	r0, #29776	; 0x7450
   1c270:	movt	r0, #4
   1c274:	bl	11f40 <printf@plt>
   1c278:	movw	r0, #29792	; 0x7460
   1c27c:	movt	r0, #4
   1c280:	bl	11f40 <printf@plt>
   1c284:	bl	11f04 <is_selinux_enabled@plt>
   1c288:	cmp	r0, #0
   1c28c:	bgt	1c2d0 <__assert_fail@plt+0x9d0c>
   1c290:	mov	r3, #0
   1c294:	str	r3, [sp, #4]
   1c298:	add	r0, sp, #4
   1c29c:	bl	137f4 <__assert_fail@plt+0x1230>
   1c2a0:	cmp	r0, #0
   1c2a4:	bne	1c2e0 <__assert_fail@plt+0x9d1c>
   1c2a8:	movw	r3, #48748	; 0xbe6c
   1c2ac:	movt	r3, #5
   1c2b0:	ldrh	r1, [r3, #68]	; 0x44
   1c2b4:	movw	r0, #29844	; 0x7494
   1c2b8:	movt	r0, #4
   1c2bc:	bl	11f40 <printf@plt>
   1c2c0:	mov	r0, #10
   1c2c4:	bl	12354 <putchar@plt>
   1c2c8:	mov	r0, #0
   1c2cc:	bl	122a0 <exit@plt>
   1c2d0:	movw	r0, #29812	; 0x7474
   1c2d4:	movt	r0, #4
   1c2d8:	bl	11f40 <printf@plt>
   1c2dc:	b	1c290 <__assert_fail@plt+0x9ccc>
   1c2e0:	movw	r0, #29824	; 0x7480
   1c2e4:	movt	r0, #4
   1c2e8:	bl	11f40 <printf@plt>
   1c2ec:	ldr	r3, [sp, #4]
   1c2f0:	tst	r3, #512	; 0x200
   1c2f4:	bne	1c308 <__assert_fail@plt+0x9d44>
   1c2f8:	movw	r0, #29856	; 0x74a0
   1c2fc:	movt	r0, #4
   1c300:	bl	11f40 <printf@plt>
   1c304:	b	1c2a8 <__assert_fail@plt+0x9ce4>
   1c308:	movw	r0, #29832	; 0x7488
   1c30c:	movt	r0, #4
   1c310:	bl	11f40 <printf@plt>
   1c314:	b	1c2f8 <__assert_fail@plt+0x9d34>
   1c318:	str	r4, [sp, #-8]!
   1c31c:	str	lr, [sp, #4]
   1c320:	mov	r0, #0
   1c324:	bl	184d8 <__assert_fail@plt+0x5f14>
   1c328:	str	r4, [sp, #-8]!
   1c32c:	str	lr, [sp, #4]
   1c330:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c334:	mov	r3, #0
   1c338:	strb	r3, [r0, #19]
   1c33c:	strb	r3, [r0, #18]
   1c340:	mov	r3, #1065353216	; 0x3f800000
   1c344:	str	r3, [r0, #28]
   1c348:	mov	r0, #1
   1c34c:	ldr	r4, [sp]
   1c350:	add	sp, sp, #4
   1c354:	pop	{pc}		; (ldr pc, [sp], #4)
   1c358:	str	r4, [sp, #-8]!
   1c35c:	str	lr, [sp, #4]
   1c360:	movw	r3, #48336	; 0xbcd0
   1c364:	movt	r3, #5
   1c368:	ldr	r3, [r3]
   1c36c:	cmp	r3, #0
   1c370:	beq	1c390 <__assert_fail@plt+0x9dcc>
   1c374:	movw	r3, #48336	; 0xbcd0
   1c378:	movt	r3, #5
   1c37c:	ldr	r0, [r3]
   1c380:	bl	1c328 <__assert_fail@plt+0x9d64>
   1c384:	ldr	r4, [sp]
   1c388:	add	sp, sp, #4
   1c38c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c390:	movw	r3, #28168	; 0x6e08
   1c394:	movt	r3, #4
   1c398:	mov	r0, #0
   1c39c:	add	r0, r0, #1
   1c3a0:	ldr	ip, [r3, #20]
   1c3a4:	cmp	ip, #0
   1c3a8:	beq	1c374 <__assert_fail@plt+0x9db0>
   1c3ac:	ldr	ip, [r3, #16]!
   1c3b0:	cmp	ip, #1
   1c3b4:	bne	1c39c <__assert_fail@plt+0x9dd8>
   1c3b8:	movw	ip, #48336	; 0xbcd0
   1c3bc:	movt	ip, #5
   1c3c0:	movw	r3, #28168	; 0x6e08
   1c3c4:	movt	r3, #4
   1c3c8:	add	r0, r3, r0, lsl #4
   1c3cc:	str	r0, [ip]
   1c3d0:	b	1c374 <__assert_fail@plt+0x9db0>
   1c3d4:	str	r4, [sp, #-8]!
   1c3d8:	str	lr, [sp, #4]
   1c3dc:	movw	r3, #48748	; 0xbe6c
   1c3e0:	movt	r3, #5
   1c3e4:	mov	ip, #1
   1c3e8:	strb	ip, [r3, #16]
   1c3ec:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c3f0:	ldr	r4, [sp]
   1c3f4:	add	sp, sp, #4
   1c3f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3fc:	str	r4, [sp, #-8]!
   1c400:	str	lr, [sp, #4]
   1c404:	movw	r3, #48748	; 0xbe6c
   1c408:	movt	r3, #5
   1c40c:	mov	ip, #0
   1c410:	strb	ip, [r3, #16]
   1c414:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c418:	ldr	r4, [sp]
   1c41c:	add	sp, sp, #4
   1c420:	pop	{pc}		; (ldr pc, [sp], #4)
   1c424:	str	r4, [sp, #-8]!
   1c428:	str	lr, [sp, #4]
   1c42c:	movw	r3, #48748	; 0xbe6c
   1c430:	movt	r3, #5
   1c434:	mov	ip, #0
   1c438:	strb	ip, [r3, #14]
   1c43c:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c440:	ldr	r4, [sp]
   1c444:	add	sp, sp, #4
   1c448:	pop	{pc}		; (ldr pc, [sp], #4)
   1c44c:	str	r4, [sp, #-8]!
   1c450:	str	lr, [sp, #4]
   1c454:	movw	r3, #48748	; 0xbe6c
   1c458:	movt	r3, #5
   1c45c:	mov	ip, #1
   1c460:	strb	ip, [r3, #12]
   1c464:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c468:	ldr	r4, [sp]
   1c46c:	add	sp, sp, #4
   1c470:	pop	{pc}		; (ldr pc, [sp], #4)
   1c474:	str	r4, [sp, #-8]!
   1c478:	str	lr, [sp, #4]
   1c47c:	movw	r3, #48748	; 0xbe6c
   1c480:	movt	r3, #5
   1c484:	mov	ip, #1
   1c488:	strb	ip, [r3, #13]
   1c48c:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c490:	ldr	r4, [sp]
   1c494:	add	sp, sp, #4
   1c498:	pop	{pc}		; (ldr pc, [sp], #4)
   1c49c:	str	r4, [sp, #-8]!
   1c4a0:	str	lr, [sp, #4]
   1c4a4:	movw	r3, #48748	; 0xbe6c
   1c4a8:	movt	r3, #5
   1c4ac:	mov	ip, #1
   1c4b0:	strb	ip, [r3, #14]
   1c4b4:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c4b8:	ldr	r4, [sp]
   1c4bc:	add	sp, sp, #4
   1c4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4c4:	str	r4, [sp, #-8]!
   1c4c8:	str	lr, [sp, #4]
   1c4cc:	movw	r3, #48748	; 0xbe6c
   1c4d0:	movt	r3, #5
   1c4d4:	mov	ip, #0
   1c4d8:	strb	ip, [r3]
   1c4dc:	mov	ip, #1
   1c4e0:	strb	ip, [r3, #1]
   1c4e4:	bl	1c358 <__assert_fail@plt+0x9d94>
   1c4e8:	ldr	r4, [sp]
   1c4ec:	add	sp, sp, #4
   1c4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4f4:	strd	r4, [sp, #-16]!
   1c4f8:	str	r6, [sp, #8]
   1c4fc:	str	lr, [sp, #12]
   1c500:	mov	r4, r0
   1c504:	mov	r5, r1
   1c508:	mov	r6, r2
   1c50c:	movw	r3, #48748	; 0xbe6c
   1c510:	movt	r3, #5
   1c514:	ldrb	r3, [r3, #17]
   1c518:	cmp	r3, #0
   1c51c:	bne	1c558 <__assert_fail@plt+0x9f94>
   1c520:	movw	r3, #48748	; 0xbe6c
   1c524:	movt	r3, #5
   1c528:	ldrb	r3, [r3, #16]
   1c52c:	cmp	r3, #0
   1c530:	beq	1c558 <__assert_fail@plt+0x9f94>
   1c534:	mov	r2, #5
   1c538:	movw	r1, #29860	; 0x74a4
   1c53c:	movt	r1, #4
   1c540:	mov	r0, #0
   1c544:	bl	12084 <dcgettext@plt>
   1c548:	mov	r2, r0
   1c54c:	mov	r1, #0
   1c550:	mov	r0, r1
   1c554:	bl	121bc <error@plt>
   1c558:	mov	r2, r6
   1c55c:	mov	r1, r5
   1c560:	mov	r0, r4
   1c564:	bl	1c4c4 <__assert_fail@plt+0x9f00>
   1c568:	ldrd	r4, [sp]
   1c56c:	ldr	r6, [sp, #8]
   1c570:	add	sp, sp, #12
   1c574:	pop	{pc}		; (ldr pc, [sp], #4)
   1c578:	str	r4, [sp, #-8]!
   1c57c:	str	lr, [sp, #4]
   1c580:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c584:	mov	r3, r0
   1c588:	mov	r2, #0
   1c58c:	strb	r2, [r0, #19]
   1c590:	strb	r2, [r0, #18]
   1c594:	mov	r0, #1
   1c598:	strb	r0, [r3, #16]
   1c59c:	strb	r2, [r3, #17]
   1c5a0:	mov	r2, #1065353216	; 0x3f800000
   1c5a4:	str	r2, [r3, #28]
   1c5a8:	ldr	r4, [sp]
   1c5ac:	add	sp, sp, #4
   1c5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5b4:	str	r4, [sp, #-8]!
   1c5b8:	str	lr, [sp, #4]
   1c5bc:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c5c0:	mov	r3, r0
   1c5c4:	movw	r2, #48748	; 0xbe6c
   1c5c8:	movt	r2, #5
   1c5cc:	ldrb	r2, [r2]
   1c5d0:	cmp	r2, #0
   1c5d4:	strbeq	r2, [r0, #19]
   1c5d8:	strbeq	r2, [r0, #18]
   1c5dc:	mov	r0, #1
   1c5e0:	strb	r0, [r3, #16]
   1c5e4:	mov	r2, #0
   1c5e8:	strb	r2, [r3, #17]
   1c5ec:	ldr	r4, [sp]
   1c5f0:	add	sp, sp, #4
   1c5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5f8:	str	r4, [sp, #-8]!
   1c5fc:	str	lr, [sp, #4]
   1c600:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c604:	movw	r3, #4719	; 0x126f
   1c608:	movt	r3, #14979	; 0x3a83
   1c60c:	str	r3, [r0, #28]
   1c610:	mov	r0, #1
   1c614:	ldr	r4, [sp]
   1c618:	add	sp, sp, #4
   1c61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c620:	str	r4, [sp, #-8]!
   1c624:	str	lr, [sp, #4]
   1c628:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c62c:	mov	r3, #0
   1c630:	strb	r3, [r0, #19]
   1c634:	strb	r3, [r0, #18]
   1c638:	strb	r3, [r0, #17]
   1c63c:	strb	r3, [r0, #16]
   1c640:	movw	r3, #18776	; 0x4958
   1c644:	movt	r3, #1
   1c648:	ldr	r2, [r0]
   1c64c:	cmp	r2, r3
   1c650:	vldr	s15, [pc, #24]	; 1c670 <__assert_fail@plt+0xa0ac>
   1c654:	vldr	s14, [pc, #24]	; 1c674 <__assert_fail@plt+0xa0b0>
   1c658:	vmovne.f32	s15, s14
   1c65c:	vstr	s15, [r0, #28]
   1c660:	mov	r0, #1
   1c664:	ldr	r4, [sp]
   1c668:	add	sp, sp, #4
   1c66c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c670:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c674:	svccc	0x00666666
   1c678:	str	r4, [sp, #-8]!
   1c67c:	str	lr, [sp, #4]
   1c680:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c684:	movw	r3, #55050	; 0xd70a
   1c688:	movt	r3, #15395	; 0x3c23
   1c68c:	str	r3, [r0, #28]
   1c690:	mov	r0, #1
   1c694:	ldr	r4, [sp]
   1c698:	add	sp, sp, #4
   1c69c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6a0:	str	r4, [sp, #-8]!
   1c6a4:	str	lr, [sp, #4]
   1c6a8:	bl	184bc <__assert_fail@plt+0x5ef8>
   1c6ac:	mov	r3, r0
   1c6b0:	mov	r0, #1
   1c6b4:	strb	r0, [r3, #17]
   1c6b8:	strb	r0, [r3, #16]
   1c6bc:	movw	r1, #48748	; 0xbe6c
   1c6c0:	movt	r1, #5
   1c6c4:	mov	r2, #0
   1c6c8:	strb	r2, [r1]
   1c6cc:	strb	r2, [r3, #19]
   1c6d0:	strb	r2, [r3, #18]
   1c6d4:	mov	r2, #1065353216	; 0x3f800000
   1c6d8:	str	r2, [r3, #28]
   1c6dc:	ldr	r4, [sp]
   1c6e0:	add	sp, sp, #4
   1c6e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c6ec:	strd	r6, [sp, #8]
   1c6f0:	strd	r8, [sp, #16]
   1c6f4:	strd	sl, [sp, #24]
   1c6f8:	str	lr, [sp, #32]
   1c6fc:	sub	sp, sp, #20
   1c700:	mov	r7, r2
   1c704:	mov	r6, r3
   1c708:	movw	r2, #20096	; 0x4e80
   1c70c:	movt	r2, #1
   1c710:	movw	r4, #29976	; 0x7518
   1c714:	movt	r4, #4
   1c718:	movw	r3, #29984	; 0x7520
   1c71c:	movt	r3, #4
   1c720:	cmp	r6, r2
   1c724:	movne	r4, r3
   1c728:	add	r2, sp, #12
   1c72c:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1c730:	subs	r5, r0, #0
   1c734:	beq	1ca68 <__assert_fail@plt+0xa4a4>
   1c738:	ldr	r2, [sp, #12]
   1c73c:	ldrb	r3, [r2]
   1c740:	cmp	r3, #0
   1c744:	beq	1c7bc <__assert_fail@plt+0xa1f8>
   1c748:	mov	r1, r6
   1c74c:	mov	r0, r7
   1c750:	bl	18424 <__assert_fail@plt+0x5e60>
   1c754:	mov	r3, #0
   1c758:	str	r3, [r0, #28]
   1c75c:	movw	r3, #20096	; 0x4e80
   1c760:	movt	r3, #1
   1c764:	cmp	r6, r3
   1c768:	beq	1c7e4 <__assert_fail@plt+0xa220>
   1c76c:	mov	r3, #0
   1c770:	strb	r3, [r0, #18]
   1c774:	mov	r3, #1
   1c778:	strb	r3, [r0, #19]
   1c77c:	vldr	s13, [pc, #772]	; 1ca88 <__assert_fail@plt+0xa4c4>
   1c780:	mov	lr, #2
   1c784:	movw	fp, #51372	; 0xc8ac
   1c788:	movt	fp, #14952	; 0x3a68
   1c78c:	mov	ip, #0
   1c790:	movw	sl, #24829	; 0x60fd
   1c794:	movt	sl, #14213	; 0x3785
   1c798:	movw	r9, #30814	; 0x785e
   1c79c:	movt	r9, #14077	; 0x36fd
   1c7a0:	movw	r8, #50541	; 0xc56d
   1c7a4:	movt	r8, #15614	; 0x3cfe
   1c7a8:	mov	r7, #0
   1c7ac:	movt	r7, #16224	; 0x3f60
   1c7b0:	movw	r6, #17012	; 0x4274
   1c7b4:	movt	r6, #14824	; 0x39e8
   1c7b8:	b	1c8ec <__assert_fail@plt+0xa328>
   1c7bc:	mov	r2, #5
   1c7c0:	movw	r1, #29992	; 0x7528
   1c7c4:	movt	r1, #4
   1c7c8:	mov	r0, #0
   1c7cc:	bl	12084 <dcgettext@plt>
   1c7d0:	mov	r3, r4
   1c7d4:	mov	r2, r0
   1c7d8:	mov	r1, #0
   1c7dc:	mov	r0, #1
   1c7e0:	bl	121bc <error@plt>
   1c7e4:	mov	r3, #1
   1c7e8:	strb	r3, [r0, #18]
   1c7ec:	mov	r3, #0
   1c7f0:	strb	r3, [r0, #19]
   1c7f4:	b	1c77c <__assert_fail@plt+0xa1b8>
   1c7f8:	vmov	s14, r6
   1c7fc:	mov	r3, #1
   1c800:	b	1c8b0 <__assert_fail@plt+0xa2ec>
   1c804:	vmov	s14, r7
   1c808:	mov	r3, #3
   1c80c:	b	1c8b0 <__assert_fail@plt+0xa2ec>
   1c810:	vmov	s14, r8
   1c814:	mov	r3, #4
   1c818:	b	1c8b0 <__assert_fail@plt+0xa2ec>
   1c81c:	vmov	s14, r9
   1c820:	mov	r3, #5
   1c824:	b	1c8b0 <__assert_fail@plt+0xa2ec>
   1c828:	vmov	s14, sl
   1c82c:	mov	r3, #6
   1c830:	b	1c8b0 <__assert_fail@plt+0xa2ec>
   1c834:	mov	r2, #5
   1c838:	movw	r1, #30044	; 0x755c
   1c83c:	movt	r1, #4
   1c840:	mov	r0, #0
   1c844:	bl	12084 <dcgettext@plt>
   1c848:	ldr	r3, [sp, #12]
   1c84c:	ldrb	r3, [r3]
   1c850:	str	r3, [sp]
   1c854:	mov	r3, r4
   1c858:	mov	r2, r0
   1c85c:	mov	r1, #0
   1c860:	mov	r0, #1
   1c864:	bl	121bc <error@plt>
   1c868:	mov	r2, #5
   1c86c:	movw	r1, #30148	; 0x75c4
   1c870:	movt	r1, #4
   1c874:	mov	r0, #0
   1c878:	bl	12084 <dcgettext@plt>
   1c87c:	ldr	r3, [sp, #12]
   1c880:	ldrb	r3, [r3]
   1c884:	str	r3, [sp]
   1c888:	mov	r3, r4
   1c88c:	mov	r2, r0
   1c890:	mov	r1, #0
   1c894:	mov	r0, #1
   1c898:	bl	121bc <error@plt>
   1c89c:	vmov	s14, fp
   1c8a0:	mov	r3, ip
   1c8a4:	b	1c8b0 <__assert_fail@plt+0xa2ec>
   1c8a8:	vmov.f32	s14, s13
   1c8ac:	mov	r3, lr
   1c8b0:	add	r1, r0, r3
   1c8b4:	ldrb	r1, [r1, #40]	; 0x28
   1c8b8:	cmp	r1, #0
   1c8bc:	bne	1c9cc <__assert_fail@plt+0xa408>
   1c8c0:	vldr	s15, [r0, #28]
   1c8c4:	vadd.f32	s15, s15, s14
   1c8c8:	vstr	s15, [r0, #28]
   1c8cc:	add	r3, r0, r3
   1c8d0:	mov	r1, #1
   1c8d4:	strb	r1, [r3, #40]	; 0x28
   1c8d8:	add	r3, r2, r1
   1c8dc:	str	r3, [sp, #12]
   1c8e0:	ldrb	r3, [r2, #1]
   1c8e4:	cmp	r3, #0
   1c8e8:	bne	1c9fc <__assert_fail@plt+0xa438>
   1c8ec:	ldr	r2, [sp, #12]
   1c8f0:	ldrb	r3, [r2]
   1c8f4:	cmp	r3, #0
   1c8f8:	beq	1ca68 <__assert_fail@plt+0xa4a4>
   1c8fc:	sub	r3, r3, #68	; 0x44
   1c900:	cmp	r3, #47	; 0x2f
   1c904:	ldrls	pc, [pc, r3, lsl #2]
   1c908:	b	1c868 <__assert_fail@plt+0xa2a4>
   1c90c:	andeq	ip, r1, r4, lsr r8
   1c910:	andeq	ip, r1, r8, ror #16
   1c914:	andeq	ip, r1, r8, ror #16
   1c918:	andeq	ip, r1, r8, ror #16
   1c91c:	andeq	ip, r1, r8, ror #16
   1c920:	andeq	ip, r1, r8, ror #16
   1c924:	andeq	ip, r1, r8, ror #16
   1c928:	andeq	ip, r1, r8, ror #16
   1c92c:	andeq	ip, r1, r8, ror #16
   1c930:	andeq	ip, r1, r8, ror #16
   1c934:	andeq	ip, r1, r8, ror #16
   1c938:	andeq	ip, r1, r8, ror #16
   1c93c:	andeq	ip, r1, r8, ror #16
   1c940:	andeq	ip, r1, r8, ror #16
   1c944:	andeq	ip, r1, r8, ror #16
   1c948:	andeq	ip, r1, r8, ror #16
   1c94c:	andeq	ip, r1, r8, ror #16
   1c950:	andeq	ip, r1, r8, ror #16
   1c954:	andeq	ip, r1, r8, ror #16
   1c958:	andeq	ip, r1, r8, ror #16
   1c95c:	andeq	ip, r1, r8, ror #16
   1c960:	andeq	ip, r1, r8, ror #16
   1c964:	andeq	ip, r1, r8, ror #16
   1c968:	andeq	ip, r1, r8, ror #16
   1c96c:	andeq	ip, r1, r8, ror #16
   1c970:	andeq	ip, r1, r8, ror #16
   1c974:	andeq	ip, r1, r8, ror #16
   1c978:	andeq	ip, r1, r8, ror #16
   1c97c:	andeq	ip, r1, r8, ror #16
   1c980:	andeq	ip, r1, r8, ror #16
   1c984:	muleq	r1, ip, r8
   1c988:	strdeq	ip, [r1], -r8
   1c98c:	andeq	ip, r1, r8, lsr #17
   1c990:	andeq	ip, r1, r8, ror #16
   1c994:	andeq	ip, r1, r4, lsl #16
   1c998:	andeq	ip, r1, r8, ror #16
   1c99c:	andeq	ip, r1, r8, ror #16
   1c9a0:	andeq	ip, r1, r8, ror #16
   1c9a4:	andeq	ip, r1, r8, ror #16
   1c9a8:	andeq	ip, r1, r8, ror #16
   1c9ac:	andeq	ip, r1, r0, lsl r8
   1c9b0:	andeq	ip, r1, r8, ror #16
   1c9b4:	andeq	ip, r1, r8, ror #16
   1c9b8:	andeq	ip, r1, r8, ror #16
   1c9bc:	andeq	ip, r1, ip, lsl r8
   1c9c0:	andeq	ip, r1, r8, ror #16
   1c9c4:	andeq	ip, r1, r8, ror #16
   1c9c8:	andeq	ip, r1, r8, lsr #16
   1c9cc:	mov	r2, #5
   1c9d0:	movw	r1, #30176	; 0x75e0
   1c9d4:	movt	r1, #4
   1c9d8:	mov	r0, #0
   1c9dc:	bl	12084 <dcgettext@plt>
   1c9e0:	ldr	r3, [sp, #12]
   1c9e4:	ldrb	r3, [r3]
   1c9e8:	str	r4, [sp]
   1c9ec:	mov	r2, r0
   1c9f0:	mov	r1, #0
   1c9f4:	mov	r0, #1
   1c9f8:	bl	121bc <error@plt>
   1c9fc:	cmp	r3, #44	; 0x2c
   1ca00:	bne	1ca40 <__assert_fail@plt+0xa47c>
   1ca04:	add	r3, r2, #2
   1ca08:	str	r3, [sp, #12]
   1ca0c:	ldrb	r3, [r2, #2]
   1ca10:	cmp	r3, #0
   1ca14:	bne	1c8ec <__assert_fail@plt+0xa328>
   1ca18:	mov	r2, #5
   1ca1c:	movw	r1, #30284	; 0x764c
   1ca20:	movt	r1, #4
   1ca24:	mov	r0, #0
   1ca28:	bl	12084 <dcgettext@plt>
   1ca2c:	mov	r3, r4
   1ca30:	mov	r2, r0
   1ca34:	mov	r1, #0
   1ca38:	mov	r0, #1
   1ca3c:	bl	121bc <error@plt>
   1ca40:	mov	r2, #5
   1ca44:	movw	r1, #30232	; 0x7618
   1ca48:	movt	r1, #4
   1ca4c:	mov	r0, #0
   1ca50:	bl	12084 <dcgettext@plt>
   1ca54:	mov	r3, r4
   1ca58:	mov	r2, r0
   1ca5c:	mov	r1, #0
   1ca60:	mov	r0, #1
   1ca64:	bl	121bc <error@plt>
   1ca68:	mov	r0, r5
   1ca6c:	add	sp, sp, #20
   1ca70:	ldrd	r4, [sp]
   1ca74:	ldrd	r6, [sp, #8]
   1ca78:	ldrd	r8, [sp, #16]
   1ca7c:	ldrd	sl, [sp, #24]
   1ca80:	add	sp, sp, #32
   1ca84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca88:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1ca8c:	str	r4, [sp, #-8]!
   1ca90:	str	lr, [sp, #4]
   1ca94:	mov	ip, r1
   1ca98:	mov	r1, r2
   1ca9c:	movw	r3, #20096	; 0x4e80
   1caa0:	movt	r3, #1
   1caa4:	mov	r2, r0
   1caa8:	mov	r0, ip
   1caac:	bl	1c6e8 <__assert_fail@plt+0xa124>
   1cab0:	ldr	r4, [sp]
   1cab4:	add	sp, sp, #4
   1cab8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cabc:	str	r4, [sp, #-8]!
   1cac0:	str	lr, [sp, #4]
   1cac4:	mov	ip, r1
   1cac8:	mov	r1, r2
   1cacc:	movw	r3, #19516	; 0x4c3c
   1cad0:	movt	r3, #1
   1cad4:	mov	r2, r0
   1cad8:	mov	r0, ip
   1cadc:	bl	1c6e8 <__assert_fail@plt+0xa124>
   1cae0:	ldr	r4, [sp]
   1cae4:	add	sp, sp, #4
   1cae8:	pop	{pc}		; (ldr pc, [sp], #4)
   1caec:	movw	r3, #48336	; 0xbcd0
   1caf0:	movt	r3, #5
   1caf4:	ldrb	r3, [r3, #4]
   1caf8:	cmp	r3, #0
   1cafc:	beq	1cb10 <__assert_fail@plt+0xa54c>
   1cb00:	movw	r3, #48336	; 0xbcd0
   1cb04:	movt	r3, #5
   1cb08:	ldrb	r0, [r3, #4]
   1cb0c:	bx	lr
   1cb10:	str	r4, [sp, #-8]!
   1cb14:	str	lr, [sp, #4]
   1cb18:	movw	r0, #30364	; 0x769c
   1cb1c:	movt	r0, #4
   1cb20:	mov	r2, #0
   1cb24:	mov	r1, r0
   1cb28:	bl	121e0 <fnmatch@plt>
   1cb2c:	cmp	r0, #0
   1cb30:	bne	1cb9c <__assert_fail@plt+0xa5d8>
   1cb34:	mov	r2, #0
   1cb38:	movw	r1, #30364	; 0x769c
   1cb3c:	movt	r1, #4
   1cb40:	movw	r0, #30368	; 0x76a0
   1cb44:	movt	r0, #4
   1cb48:	bl	121e0 <fnmatch@plt>
   1cb4c:	cmp	r0, #0
   1cb50:	beq	1cb9c <__assert_fail@plt+0xa5d8>
   1cb54:	mov	r2, #16
   1cb58:	movw	r1, #30364	; 0x769c
   1cb5c:	movt	r1, #4
   1cb60:	movw	r0, #30368	; 0x76a0
   1cb64:	movt	r0, #4
   1cb68:	bl	121e0 <fnmatch@plt>
   1cb6c:	cmp	r0, #0
   1cb70:	bne	1cb9c <__assert_fail@plt+0xa5d8>
   1cb74:	movw	r3, #48336	; 0xbcd0
   1cb78:	movt	r3, #5
   1cb7c:	mov	r2, #1
   1cb80:	strb	r2, [r3, #4]
   1cb84:	movw	r3, #48336	; 0xbcd0
   1cb88:	movt	r3, #5
   1cb8c:	ldrb	r0, [r3, #4]
   1cb90:	ldr	r4, [sp]
   1cb94:	add	sp, sp, #4
   1cb98:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb9c:	mov	r2, #5
   1cba0:	movw	r1, #30372	; 0x76a4
   1cba4:	movt	r1, #4
   1cba8:	mov	r0, #0
   1cbac:	bl	12084 <dcgettext@plt>
   1cbb0:	mov	r2, r0
   1cbb4:	mov	r1, #0
   1cbb8:	mov	r0, #1
   1cbbc:	bl	121bc <error@plt>
   1cbc0:	strd	r4, [sp, #-16]!
   1cbc4:	str	r6, [sp, #8]
   1cbc8:	str	lr, [sp, #12]
   1cbcc:	mov	r5, r0
   1cbd0:	mov	r4, r1
   1cbd4:	movw	r1, #30428	; 0x76dc
   1cbd8:	movt	r1, #4
   1cbdc:	bl	124f8 <strpbrk@plt>
   1cbe0:	cmp	r0, #0
   1cbe4:	beq	1cbfc <__assert_fail@plt+0xa638>
   1cbe8:	vldr	s0, [pc, #60]	; 1cc2c <__assert_fail@plt+0xa668>
   1cbec:	ldrd	r4, [sp]
   1cbf0:	ldr	r6, [sp, #8]
   1cbf4:	add	sp, sp, #12
   1cbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbfc:	cmp	r4, #0
   1cc00:	beq	1cc24 <__assert_fail@plt+0xa660>
   1cc04:	mov	r1, #46	; 0x2e
   1cc08:	mov	r0, r5
   1cc0c:	bl	122dc <strchr@plt>
   1cc10:	cmp	r0, #0
   1cc14:	vldr	s0, [pc, #20]	; 1cc30 <__assert_fail@plt+0xa66c>
   1cc18:	vldr	s15, [pc, #12]	; 1cc2c <__assert_fail@plt+0xa668>
   1cc1c:	vmovne.f32	s0, s15
   1cc20:	b	1cbec <__assert_fail@plt+0xa628>
   1cc24:	vldr	s0, [pc, #4]	; 1cc30 <__assert_fail@plt+0xa66c>
   1cc28:	b	1cbec <__assert_fail@plt+0xa628>
   1cc2c:	svccc	0x004ccccd
   1cc30:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cc34:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cc38:	strd	r6, [sp, #8]
   1cc3c:	str	lr, [sp, #16]
   1cc40:	sub	sp, sp, #20
   1cc44:	mov	r6, r0
   1cc48:	mov	r4, r1
   1cc4c:	mov	r5, r2
   1cc50:	mov	r7, r3
   1cc54:	bl	1caec <__assert_fail@plt+0xa528>
   1cc58:	add	r2, sp, #12
   1cc5c:	mov	r1, r5
   1cc60:	mov	r0, r4
   1cc64:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1cc68:	subs	r4, r0, #0
   1cc6c:	bne	1cc88 <__assert_fail@plt+0xa6c4>
   1cc70:	mov	r0, r4
   1cc74:	add	sp, sp, #20
   1cc78:	ldrd	r4, [sp]
   1cc7c:	ldrd	r6, [sp, #8]
   1cc80:	add	sp, sp, #16
   1cc84:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc88:	ldr	r2, [sp, #12]
   1cc8c:	ldr	r1, [sp, #40]	; 0x28
   1cc90:	mov	r0, r6
   1cc94:	bl	18424 <__assert_fail@plt+0x5e60>
   1cc98:	mov	r5, r0
   1cc9c:	mov	r1, #0
   1cca0:	strb	r1, [r0, #19]
   1cca4:	strb	r1, [r0, #18]
   1cca8:	ldr	r6, [sp, #12]
   1ccac:	str	r6, [r0, #40]	; 0x28
   1ccb0:	mov	r0, r6
   1ccb4:	bl	1cbc0 <__assert_fail@plt+0xa5fc>
   1ccb8:	vstr	s0, [r5, #28]
   1ccbc:	movw	r3, #48748	; 0xbe6c
   1ccc0:	movt	r3, #5
   1ccc4:	ldrb	r3, [r3, #17]
   1ccc8:	cmp	r3, #0
   1cccc:	movne	r4, r3
   1ccd0:	bne	1cc70 <__assert_fail@plt+0xa6ac>
   1ccd4:	mov	r1, #47	; 0x2f
   1ccd8:	mov	r0, r6
   1ccdc:	bl	12438 <strrchr@plt>
   1cce0:	cmp	r0, #0
   1cce4:	beq	1cc70 <__assert_fail@plt+0xa6ac>
   1cce8:	ldrb	r3, [r0, #1]
   1ccec:	cmp	r3, #0
   1ccf0:	bne	1cc70 <__assert_fail@plt+0xa6ac>
   1ccf4:	movw	r1, #17496	; 0x4458
   1ccf8:	movt	r1, #1
   1ccfc:	ldr	r3, [sp, #40]	; 0x28
   1cd00:	cmp	r3, r1
   1cd04:	movne	r1, #0
   1cd08:	moveq	r1, #1
   1cd0c:	mov	r0, r6
   1cd10:	bl	166b8 <__assert_fail@plt+0x40f4>
   1cd14:	cmp	r0, #0
   1cd18:	bne	1cd5c <__assert_fail@plt+0xa798>
   1cd1c:	mov	r2, #5
   1cd20:	movw	r1, #30432	; 0x76e0
   1cd24:	movt	r1, #4
   1cd28:	mov	r0, #0
   1cd2c:	bl	12084 <dcgettext@plt>
   1cd30:	ldr	r3, [sp, #12]
   1cd34:	str	r3, [sp]
   1cd38:	mov	r3, r7
   1cd3c:	mov	r2, r0
   1cd40:	mov	r1, #0
   1cd44:	mov	r0, r1
   1cd48:	bl	121bc <error@plt>
   1cd4c:	movw	r3, #52343	; 0xcc77
   1cd50:	movt	r3, #12843	; 0x322b
   1cd54:	str	r3, [r5, #28]
   1cd58:	b	1cc70 <__assert_fail@plt+0xa6ac>
   1cd5c:	mov	r4, r0
   1cd60:	b	1cc70 <__assert_fail@plt+0xa6ac>
   1cd64:	push	{lr}		; (str lr, [sp, #-4]!)
   1cd68:	sub	sp, sp, #12
   1cd6c:	movw	r3, #18592	; 0x48a0
   1cd70:	movt	r3, #1
   1cd74:	str	r3, [sp]
   1cd78:	movw	r3, #30496	; 0x7720
   1cd7c:	movt	r3, #4
   1cd80:	bl	1cc34 <__assert_fail@plt+0xa670>
   1cd84:	add	sp, sp, #12
   1cd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1cd90:	sub	sp, sp, #12
   1cd94:	movw	r3, #18592	; 0x48a0
   1cd98:	movt	r3, #1
   1cd9c:	str	r3, [sp]
   1cda0:	movw	r3, #30508	; 0x772c
   1cda4:	movt	r3, #4
   1cda8:	bl	1cc34 <__assert_fail@plt+0xa670>
   1cdac:	add	sp, sp, #12
   1cdb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdb4:	push	{lr}		; (str lr, [sp, #-4]!)
   1cdb8:	sub	sp, sp, #12
   1cdbc:	movw	r3, #17496	; 0x4458
   1cdc0:	movt	r3, #1
   1cdc4:	str	r3, [sp]
   1cdc8:	movw	r3, #30516	; 0x7734
   1cdcc:	movt	r3, #4
   1cdd0:	bl	1cc34 <__assert_fail@plt+0xa670>
   1cdd4:	add	sp, sp, #12
   1cdd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cddc:	push	{lr}		; (str lr, [sp, #-4]!)
   1cde0:	sub	sp, sp, #12
   1cde4:	movw	r3, #17496	; 0x4458
   1cde8:	movt	r3, #1
   1cdec:	str	r3, [sp]
   1cdf0:	movw	r3, #30528	; 0x7740
   1cdf4:	movt	r3, #4
   1cdf8:	bl	1cc34 <__assert_fail@plt+0xa670>
   1cdfc:	add	sp, sp, #12
   1ce00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce04:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ce08:	strd	r6, [sp, #8]
   1ce0c:	strd	r8, [sp, #16]
   1ce10:	str	lr, [sp, #24]
   1ce14:	sub	sp, sp, #20
   1ce18:	mov	r7, r0
   1ce1c:	mov	r4, r1
   1ce20:	mov	r5, r2
   1ce24:	mov	r8, r3
   1ce28:	ldr	r3, [r2]
   1ce2c:	sub	r3, r3, #-1073741823	; 0xc0000001
   1ce30:	ldr	r9, [r1, r3, lsl #2]
   1ce34:	add	r2, sp, #12
   1ce38:	mov	r1, r5
   1ce3c:	mov	r0, r4
   1ce40:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1ce44:	cmp	r0, #0
   1ce48:	beq	1cea4 <__assert_fail@plt+0xa8e0>
   1ce4c:	ldr	r6, [sp, #12]
   1ce50:	movw	r1, #30536	; 0x7748
   1ce54:	movt	r1, #4
   1ce58:	mov	r0, r6
   1ce5c:	bl	125b8 <strspn@plt>
   1ce60:	cmp	r0, #0
   1ce64:	ble	1cebc <__assert_fail@plt+0xa8f8>
   1ce68:	ldrb	r3, [r6, r0]
   1ce6c:	cmp	r3, #0
   1ce70:	bne	1cebc <__assert_fail@plt+0xa8f8>
   1ce74:	movw	r3, #48748	; 0xbe6c
   1ce78:	movt	r3, #5
   1ce7c:	ldr	r1, [r3, #72]	; 0x48
   1ce80:	mov	r0, r6
   1ce84:	bl	22630 <__assert_fail@plt+0x1006c>
   1ce88:	str	r0, [r8]
   1ce8c:	cmp	r0, #0
   1ce90:	blt	1cebc <__assert_fail@plt+0xa8f8>
   1ce94:	mov	r2, r5
   1ce98:	mov	r1, r4
   1ce9c:	mov	r0, r7
   1cea0:	bl	1c358 <__assert_fail@plt+0x9d94>
   1cea4:	add	sp, sp, #20
   1cea8:	ldrd	r4, [sp]
   1ceac:	ldrd	r6, [sp, #8]
   1ceb0:	ldrd	r8, [sp, #16]
   1ceb4:	add	sp, sp, #24
   1ceb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cebc:	mov	r2, #5
   1cec0:	movw	r1, #30548	; 0x7754
   1cec4:	movt	r1, #4
   1cec8:	mov	r0, #0
   1cecc:	bl	12084 <dcgettext@plt>
   1ced0:	mov	r4, r0
   1ced4:	movw	r3, #48748	; 0xbe6c
   1ced8:	movt	r3, #5
   1cedc:	ldr	r2, [sp, #12]
   1cee0:	ldr	r1, [r3, #72]	; 0x48
   1cee4:	mov	r0, #0
   1cee8:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1ceec:	str	r0, [sp]
   1cef0:	mov	r3, r9
   1cef4:	mov	r2, r4
   1cef8:	mov	r1, #0
   1cefc:	mov	r0, #1
   1cf00:	bl	121bc <error@plt>
   1cf04:	str	r4, [sp, #-8]!
   1cf08:	str	lr, [sp, #4]
   1cf0c:	ldr	r3, [pc, #12]	; 1cf20 <__assert_fail@plt+0xa95c>
   1cf10:	bl	1ce04 <__assert_fail@plt+0xa840>
   1cf14:	ldr	r4, [sp]
   1cf18:	add	sp, sp, #4
   1cf1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf20:	andeq	fp, r5, r4, ror lr
   1cf24:	str	r4, [sp, #-8]!
   1cf28:	str	lr, [sp, #4]
   1cf2c:	ldr	r3, [pc, #12]	; 1cf40 <__assert_fail@plt+0xa97c>
   1cf30:	bl	1ce04 <__assert_fail@plt+0xa840>
   1cf34:	ldr	r4, [sp]
   1cf38:	add	sp, sp, #4
   1cf3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf40:	andeq	fp, r5, r0, ror lr
   1cf44:	strd	r4, [sp, #-16]!
   1cf48:	str	r6, [sp, #8]
   1cf4c:	str	lr, [sp, #12]
   1cf50:	sub	sp, sp, #8
   1cf54:	mov	r5, r0
   1cf58:	mov	r0, r1
   1cf5c:	mov	r1, r2
   1cf60:	add	r2, sp, #4
   1cf64:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1cf68:	subs	r4, r0, #0
   1cf6c:	bne	1cf88 <__assert_fail@plt+0xa9c4>
   1cf70:	mov	r0, r4
   1cf74:	add	sp, sp, #8
   1cf78:	ldrd	r4, [sp]
   1cf7c:	ldr	r6, [sp, #8]
   1cf80:	add	sp, sp, #12
   1cf84:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf88:	ldr	r0, [sp, #4]
   1cf8c:	bl	11ef8 <getpwnam@plt>
   1cf90:	mov	r6, r0
   1cf94:	bl	1242c <endpwent@plt>
   1cf98:	cmp	r6, #0
   1cf9c:	beq	1cfcc <__assert_fail@plt+0xaa08>
   1cfa0:	ldr	r6, [r6, #8]
   1cfa4:	ldr	r1, [sp, #4]
   1cfa8:	mov	r0, r5
   1cfac:	bl	18470 <__assert_fail@plt+0x5eac>
   1cfb0:	str	r6, [r0, #40]	; 0x28
   1cfb4:	cmp	r6, #100	; 0x64
   1cfb8:	vldr	s15, [pc, #196]	; 1d084 <__assert_fail@plt+0xaac0>
   1cfbc:	vldr	s14, [pc, #196]	; 1d088 <__assert_fail@plt+0xaac4>
   1cfc0:	vmovcs.f32	s15, s14
   1cfc4:	vstr	s15, [r0, #28]
   1cfc8:	b	1cf70 <__assert_fail@plt+0xa9ac>
   1cfcc:	ldr	r6, [sp, #4]
   1cfd0:	movw	r1, #30536	; 0x7748
   1cfd4:	movt	r1, #4
   1cfd8:	mov	r0, r6
   1cfdc:	bl	125b8 <strspn@plt>
   1cfe0:	cmp	r0, #0
   1cfe4:	beq	1cff4 <__assert_fail@plt+0xaa30>
   1cfe8:	ldrb	r3, [r6, r0]
   1cfec:	cmp	r3, #0
   1cff0:	beq	1d044 <__assert_fail@plt+0xaa80>
   1cff4:	ldrb	r3, [r6]
   1cff8:	cmp	r3, #0
   1cffc:	beq	1d060 <__assert_fail@plt+0xaa9c>
   1d000:	mov	r2, #5
   1d004:	movw	r1, #30612	; 0x7794
   1d008:	movt	r1, #4
   1d00c:	mov	r0, #0
   1d010:	bl	12084 <dcgettext@plt>
   1d014:	mov	r4, r0
   1d018:	movw	r3, #48748	; 0xbe6c
   1d01c:	movt	r3, #5
   1d020:	ldr	r2, [sp, #4]
   1d024:	ldr	r1, [r3, #72]	; 0x48
   1d028:	mov	r0, #0
   1d02c:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1d030:	mov	r3, r0
   1d034:	mov	r2, r4
   1d038:	mov	r1, #0
   1d03c:	mov	r0, #1
   1d040:	bl	121bc <error@plt>
   1d044:	movw	r3, #48748	; 0xbe6c
   1d048:	movt	r3, #5
   1d04c:	ldr	r1, [r3, #72]	; 0x48
   1d050:	mov	r0, r6
   1d054:	bl	22630 <__assert_fail@plt+0x1006c>
   1d058:	mov	r6, r0
   1d05c:	b	1cfa4 <__assert_fail@plt+0xa9e0>
   1d060:	mov	r2, #5
   1d064:	movw	r1, #30648	; 0x77b8
   1d068:	movt	r1, #4
   1d06c:	mov	r0, #0
   1d070:	bl	12084 <dcgettext@plt>
   1d074:	mov	r2, r0
   1d078:	mov	r1, #0
   1d07c:	mov	r0, #1
   1d080:	bl	121bc <error@plt>
   1d084:	svccc	0x007d70a4
   1d088:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d08c:	str	r4, [sp, #-8]!
   1d090:	str	lr, [sp, #4]
   1d094:	mov	r1, #0
   1d098:	bl	18470 <__assert_fail@plt+0x5eac>
   1d09c:	movw	r3, #46871	; 0xb717
   1d0a0:	movt	r3, #14545	; 0x38d1
   1d0a4:	str	r3, [r0, #28]
   1d0a8:	mov	r0, #1
   1d0ac:	ldr	r4, [sp]
   1d0b0:	add	sp, sp, #4
   1d0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0b8:	strd	r4, [sp, #-16]!
   1d0bc:	str	r6, [sp, #8]
   1d0c0:	str	lr, [sp, #12]
   1d0c4:	sub	sp, sp, #8
   1d0c8:	mov	r6, r0
   1d0cc:	mov	r4, r1
   1d0d0:	mov	r5, r2
   1d0d4:	bl	1caec <__assert_fail@plt+0xa528>
   1d0d8:	add	r2, sp, #4
   1d0dc:	mov	r1, r5
   1d0e0:	mov	r0, r4
   1d0e4:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1d0e8:	subs	r4, r0, #0
   1d0ec:	bne	1d108 <__assert_fail@plt+0xab44>
   1d0f0:	mov	r0, r4
   1d0f4:	add	sp, sp, #8
   1d0f8:	ldrd	r4, [sp]
   1d0fc:	ldr	r6, [sp, #8]
   1d100:	add	sp, sp, #12
   1d104:	pop	{pc}		; (ldr pc, [sp], #4)
   1d108:	ldr	r1, [sp, #4]
   1d10c:	mov	r0, r6
   1d110:	bl	18470 <__assert_fail@plt+0x5eac>
   1d114:	mov	r5, r0
   1d118:	ldr	r0, [sp, #4]
   1d11c:	str	r0, [r5, #40]	; 0x28
   1d120:	mov	r1, #0
   1d124:	bl	1cbc0 <__assert_fail@plt+0xa5fc>
   1d128:	vldr	s15, [pc, #8]	; 1d138 <__assert_fail@plt+0xab74>
   1d12c:	vmul.f32	s0, s0, s15
   1d130:	vstr	s0, [r5, #28]
   1d134:	b	1d0f0 <__assert_fail@plt+0xab2c>
   1d138:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d13c:	strd	r4, [sp, #-12]!
   1d140:	str	lr, [sp, #8]
   1d144:	sub	sp, sp, #12
   1d148:	mov	r5, r0
   1d14c:	mov	r0, r1
   1d150:	mov	r1, r2
   1d154:	add	r2, sp, #4
   1d158:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1d15c:	subs	r4, r0, #0
   1d160:	bne	1d178 <__assert_fail@plt+0xabb4>
   1d164:	mov	r0, r4
   1d168:	add	sp, sp, #12
   1d16c:	ldrd	r4, [sp]
   1d170:	add	sp, sp, #8
   1d174:	pop	{pc}		; (ldr pc, [sp], #4)
   1d178:	ldr	r1, [sp, #4]
   1d17c:	mov	r0, r5
   1d180:	bl	18470 <__assert_fail@plt+0x5eac>
   1d184:	mov	r5, r0
   1d188:	ldr	r0, [sp, #4]
   1d18c:	str	r0, [r5, #40]	; 0x28
   1d190:	mov	r1, #0
   1d194:	bl	1cbc0 <__assert_fail@plt+0xa5fc>
   1d198:	vldr	s15, [pc, #8]	; 1d1a8 <__assert_fail@plt+0xabe4>
   1d19c:	vmul.f32	s0, s0, s15
   1d1a0:	vstr	s0, [r5, #28]
   1d1a4:	b	1d164 <__assert_fail@plt+0xaba0>
   1d1a8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d1ac:	strd	r4, [sp, #-16]!
   1d1b0:	str	r6, [sp, #8]
   1d1b4:	str	lr, [sp, #12]
   1d1b8:	subs	r6, r1, #0
   1d1bc:	beq	1d254 <__assert_fail@plt+0xac90>
   1d1c0:	ldr	r3, [r2]
   1d1c4:	ldr	r3, [r6, r3, lsl #2]
   1d1c8:	cmp	r3, #0
   1d1cc:	beq	1d25c <__assert_fail@plt+0xac98>
   1d1d0:	mov	r5, r2
   1d1d4:	mov	r4, r0
   1d1d8:	bl	11f04 <is_selinux_enabled@plt>
   1d1dc:	cmp	r0, #0
   1d1e0:	ble	1d230 <__assert_fail@plt+0xac6c>
   1d1e4:	mov	r1, #0
   1d1e8:	mov	r0, r4
   1d1ec:	bl	18470 <__assert_fail@plt+0x5eac>
   1d1f0:	movw	r3, #55050	; 0xd70a
   1d1f4:	movt	r3, #15395	; 0x3c23
   1d1f8:	str	r3, [r0, #28]
   1d1fc:	mov	r3, #0
   1d200:	strb	r3, [r0, #18]
   1d204:	ldr	r3, [r5]
   1d208:	ldr	r3, [r6, r3, lsl #2]
   1d20c:	str	r3, [r0, #40]	; 0x28
   1d210:	ldr	r3, [r5]
   1d214:	add	r3, r3, #1
   1d218:	str	r3, [r5]
   1d21c:	mov	r0, #1
   1d220:	ldrd	r4, [sp]
   1d224:	ldr	r6, [sp, #8]
   1d228:	add	sp, sp, #12
   1d22c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d230:	mov	r2, #5
   1d234:	movw	r1, #30692	; 0x77e4
   1d238:	movt	r1, #4
   1d23c:	mov	r0, #0
   1d240:	bl	12084 <dcgettext@plt>
   1d244:	mov	r2, r0
   1d248:	mov	r1, #0
   1d24c:	mov	r0, #1
   1d250:	bl	121bc <error@plt>
   1d254:	mov	r0, #0
   1d258:	b	1d220 <__assert_fail@plt+0xac5c>
   1d25c:	mov	r0, #0
   1d260:	b	1d220 <__assert_fail@plt+0xac5c>
   1d264:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d268:	strd	r6, [sp, #8]
   1d26c:	str	lr, [sp, #16]
   1d270:	vpush	{d8}
   1d274:	sub	sp, sp, #36	; 0x24
   1d278:	str	r0, [sp, #12]
   1d27c:	mov	r4, r1
   1d280:	add	r1, sp, #4
   1d284:	stm	r1, {r2, r3}
   1d288:	vmov.f64	d8, d0
   1d28c:	mov	r7, r2
   1d290:	ldr	r6, [sp, #8]
   1d294:	add	r1, r4, #4
   1d298:	add	r0, sp, #12
   1d29c:	bl	1c04c <__assert_fail@plt+0x9a88>
   1d2a0:	subs	r5, r0, #0
   1d2a4:	beq	1d2e0 <__assert_fail@plt+0xad1c>
   1d2a8:	ldr	r3, [r4, #4]
   1d2ac:	cmp	r3, #0
   1d2b0:	beq	1d2fc <__assert_fail@plt+0xad38>
   1d2b4:	cmp	r3, #1
   1d2b8:	moveq	r3, #0
   1d2bc:	streq	r3, [r4, #4]
   1d2c0:	movw	r3, #9092	; 0x2384
   1d2c4:	movt	r3, #1
   1d2c8:	add	r2, sp, #24
   1d2cc:	mov	r1, #0
   1d2d0:	ldr	r0, [sp, #12]
   1d2d4:	bl	2e820 <__assert_fail@plt+0x1c25c>
   1d2d8:	subs	r5, r0, #0
   1d2dc:	bne	1d308 <__assert_fail@plt+0xad44>
   1d2e0:	mov	r0, r5
   1d2e4:	add	sp, sp, #36	; 0x24
   1d2e8:	vpop	{d8}
   1d2ec:	ldrd	r4, [sp]
   1d2f0:	ldrd	r6, [sp, #8]
   1d2f4:	add	sp, sp, #16
   1d2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2fc:	mov	r3, #1
   1d300:	str	r3, [r4, #4]
   1d304:	b	1d2c0 <__assert_fail@plt+0xacfc>
   1d308:	add	r0, sp, #16
   1d30c:	vldr	d0, [sp, #24]
   1d310:	vmul.f64	d0, d8, d0
   1d314:	bl	12264 <modf@plt>
   1d318:	vldr	d7, [pc, #192]	; 1d3e0 <__assert_fail@plt+0xae1c>
   1d31c:	vmul.f64	d0, d0, d7
   1d320:	vcmpe.f64	d0, d7
   1d324:	vmrs	APSR_nzcv, fpscr
   1d328:	bpl	1d3ac <__assert_fail@plt+0xade8>
   1d32c:	vldr	d6, [sp, #16]
   1d330:	vmov	s15, r7
   1d334:	vcvt.f64.s32	d7, s15
   1d338:	vsub.f64	d7, d7, d6
   1d33c:	vcvt.s32.f64	s15, d7
   1d340:	vmov	r3, s15
   1d344:	vstr	s15, [r4, #8]
   1d348:	vcmpe.f64	d6, #0.0
   1d34c:	vmrs	APSR_nzcv, fpscr
   1d350:	movmi	r2, #1
   1d354:	movpl	r2, #0
   1d358:	cmp	r3, r7
   1d35c:	movle	r7, #0
   1d360:	movgt	r7, #1
   1d364:	cmp	r7, r2
   1d368:	bne	1d3c8 <__assert_fail@plt+0xae04>
   1d36c:	vmov	s15, r6
   1d370:	vcvt.f64.s32	d7, s15
   1d374:	vsub.f64	d6, d7, d0
   1d378:	vcvt.s32.f64	s12, d6
   1d37c:	vcmpe.f64	d7, d0
   1d380:	vmrs	APSR_nzcv, fpscr
   1d384:	vstrpl	s12, [r4, #12]
   1d388:	bpl	1d2e0 <__assert_fail@plt+0xad1c>
   1d38c:	mov	r2, #51712	; 0xca00
   1d390:	movt	r2, #15258	; 0x3b9a
   1d394:	vmov	r1, s12
   1d398:	add	r2, r1, r2
   1d39c:	str	r2, [r4, #12]
   1d3a0:	sub	r3, r3, #1
   1d3a4:	str	r3, [r4, #8]
   1d3a8:	b	1d2e0 <__assert_fail@plt+0xad1c>
   1d3ac:	ldr	r3, [pc, #52]	; 1d3e8 <__assert_fail@plt+0xae24>
   1d3b0:	movw	r2, #3149	; 0xc4d
   1d3b4:	movw	r1, #30744	; 0x7818
   1d3b8:	movt	r1, #4
   1d3bc:	movw	r0, #30756	; 0x7824
   1d3c0:	movt	r0, #4
   1d3c4:	bl	125c4 <__assert_fail@plt>
   1d3c8:	ldr	r3, [sp, #12]
   1d3cc:	ldr	r2, [sp, #64]	; 0x40
   1d3d0:	mov	r1, #0
   1d3d4:	mov	r0, #1
   1d3d8:	bl	121bc <error@plt>
   1d3dc:	nop	{0}
   1d3e0:	andeq	r0, r0, r0
   1d3e4:	bicmi	ip, sp, r5, ror #26
   1d3e8:	andeq	r7, r4, r8, ror r3
   1d3ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d3f0:	strd	r6, [sp, #8]
   1d3f4:	str	r8, [sp, #16]
   1d3f8:	str	lr, [sp, #20]
   1d3fc:	sub	sp, sp, #40	; 0x28
   1d400:	mov	r8, r0
   1d404:	mov	r0, r1
   1d408:	mov	r4, r2
   1d40c:	mov	r6, r3
   1d410:	ldr	r7, [r2]
   1d414:	add	r2, sp, #36	; 0x24
   1d418:	mov	r1, r4
   1d41c:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1d420:	subs	r5, r0, #0
   1d424:	bne	1d444 <__assert_fail@plt+0xae80>
   1d428:	mov	r0, r5
   1d42c:	add	sp, sp, #40	; 0x28
   1d430:	ldrd	r4, [sp]
   1d434:	ldrd	r6, [sp, #8]
   1d438:	ldr	r8, [sp, #16]
   1d43c:	add	sp, sp, #20
   1d440:	pop	{pc}		; (ldr pc, [sp], #4)
   1d444:	movw	r1, #48748	; 0xbe6c
   1d448:	movt	r1, #5
   1d44c:	add	r0, sp, #12
   1d450:	ldrd	r2, [r1, #28]
   1d454:	strd	r2, [sp, #12]
   1d458:	ldr	r3, [r1, #28]
   1d45c:	str	r6, [sp, #20]
   1d460:	add	r3, r3, #86016	; 0x15000
   1d464:	add	r3, r3, #384	; 0x180
   1d468:	str	r3, [sp, #12]
   1d46c:	movw	r3, #30784	; 0x7840
   1d470:	movt	r3, #4
   1d474:	str	r3, [sp]
   1d478:	vldr	d0, [pc, #72]	; 1d4c8 <__assert_fail@plt+0xaf04>
   1d47c:	ldm	r0, {r2, r3}
   1d480:	add	r1, sp, #20
   1d484:	ldr	r0, [sp, #36]	; 0x24
   1d488:	bl	1d264 <__assert_fail@plt+0xaca0>
   1d48c:	subs	r5, r0, #0
   1d490:	streq	r7, [r4]
   1d494:	beq	1d428 <__assert_fail@plt+0xae64>
   1d498:	ldr	r1, [sp, #36]	; 0x24
   1d49c:	mov	r0, r8
   1d4a0:	bl	18470 <__assert_fail@plt+0x5eac>
   1d4a4:	mov	r4, r0
   1d4a8:	ldrd	r2, [sp, #20]
   1d4ac:	strd	r2, [r0, #40]	; 0x28
   1d4b0:	ldrd	r2, [sp, #28]
   1d4b4:	strd	r2, [r0, #48]	; 0x30
   1d4b8:	ldr	r0, [sp, #28]
   1d4bc:	bl	1bf10 <__assert_fail@plt+0x994c>
   1d4c0:	vstr	s0, [r4, #28]
   1d4c4:	b	1d428 <__assert_fail@plt+0xae64>
   1d4c8:	andeq	r0, r0, r0
   1d4cc:	submi	r0, lr, r0
   1d4d0:	str	r4, [sp, #-8]!
   1d4d4:	str	lr, [sp, #4]
   1d4d8:	mov	r3, #3
   1d4dc:	bl	1d3ec <__assert_fail@plt+0xae28>
   1d4e0:	ldr	r4, [sp]
   1d4e4:	add	sp, sp, #4
   1d4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4ec:	str	r4, [sp, #-8]!
   1d4f0:	str	lr, [sp, #4]
   1d4f4:	mov	r3, #2
   1d4f8:	bl	1d3ec <__assert_fail@plt+0xae28>
   1d4fc:	ldr	r4, [sp]
   1d500:	add	sp, sp, #4
   1d504:	pop	{pc}		; (ldr pc, [sp], #4)
   1d508:	str	r4, [sp, #-8]!
   1d50c:	str	lr, [sp, #4]
   1d510:	mov	r3, #0
   1d514:	bl	1d3ec <__assert_fail@plt+0xae28>
   1d518:	ldr	r4, [sp]
   1d51c:	add	sp, sp, #4
   1d520:	pop	{pc}		; (ldr pc, [sp], #4)
   1d524:	str	r4, [sp, #-8]!
   1d528:	str	lr, [sp, #4]
   1d52c:	sub	sp, sp, #24
   1d530:	str	r0, [sp, #12]
   1d534:	cmp	r0, #0
   1d538:	moveq	r0, #0
   1d53c:	beq	1d588 <__assert_fail@plt+0xafc4>
   1d540:	mov	r4, r1
   1d544:	cmp	r2, #0
   1d548:	beq	1d560 <__assert_fail@plt+0xaf9c>
   1d54c:	mov	r1, r2
   1d550:	add	r0, sp, #12
   1d554:	bl	1c04c <__assert_fail@plt+0x9a88>
   1d558:	cmp	r0, #0
   1d55c:	beq	1d588 <__assert_fail@plt+0xafc4>
   1d560:	movw	r3, #25528	; 0x63b8
   1d564:	movt	r3, #4
   1d568:	str	r3, [sp]
   1d56c:	mov	r3, r4
   1d570:	mov	r2, #10
   1d574:	add	r1, sp, #20
   1d578:	ldr	r0, [sp, #12]
   1d57c:	bl	2ef30 <__assert_fail@plt+0x1c96c>
   1d580:	clz	r0, r0
   1d584:	lsr	r0, r0, #5
   1d588:	add	sp, sp, #24
   1d58c:	ldr	r4, [sp]
   1d590:	add	sp, sp, #4
   1d594:	pop	{pc}		; (ldr pc, [sp], #4)
   1d598:	strd	r4, [sp, #-12]!
   1d59c:	str	lr, [sp, #8]
   1d5a0:	sub	sp, sp, #28
   1d5a4:	mov	r4, r2
   1d5a8:	add	r2, sp, #20
   1d5ac:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1d5b0:	cmp	r0, #0
   1d5b4:	moveq	r4, #0
   1d5b8:	beq	1d5d8 <__assert_fail@plt+0xb014>
   1d5bc:	add	r2, sp, #4
   1d5c0:	add	r1, sp, #8
   1d5c4:	ldr	r0, [sp, #20]
   1d5c8:	bl	1d524 <__assert_fail@plt+0xaf60>
   1d5cc:	cmp	r0, #0
   1d5d0:	moveq	r4, #0
   1d5d4:	bne	1d5ec <__assert_fail@plt+0xb028>
   1d5d8:	mov	r0, r4
   1d5dc:	add	sp, sp, #28
   1d5e0:	ldrd	r4, [sp]
   1d5e4:	add	sp, sp, #8
   1d5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5ec:	ldr	r1, [sp, #20]
   1d5f0:	mov	r0, r4
   1d5f4:	bl	18470 <__assert_fail@plt+0x5eac>
   1d5f8:	mov	r4, r0
   1d5fc:	ldr	r3, [sp, #4]
   1d600:	str	r3, [r0, #40]	; 0x28
   1d604:	ldrd	r2, [sp, #8]
   1d608:	strd	r2, [r0, #48]	; 0x30
   1d60c:	movw	r3, #48748	; 0xbe6c
   1d610:	movt	r3, #5
   1d614:	ldr	r3, [r3, #44]	; 0x2c
   1d618:	tst	r3, #1
   1d61c:	beq	1d5d8 <__assert_fail@plt+0xb014>
   1d620:	movw	r5, #46408	; 0xb548
   1d624:	movt	r5, #5
   1d628:	ldr	r2, [r0, #4]
   1d62c:	movw	r1, #30884	; 0x78a4
   1d630:	movt	r1, #4
   1d634:	ldr	r0, [r5]
   1d638:	bl	1230c <fprintf@plt>
   1d63c:	ldr	r0, [r5]
   1d640:	ldr	r1, [sp, #4]
   1d644:	cmp	r1, #0
   1d648:	beq	1d688 <__assert_fail@plt+0xb0c4>
   1d64c:	cmp	r1, #1
   1d650:	beq	1d6c4 <__assert_fail@plt+0xb100>
   1d654:	movw	r2, #33044	; 0x8114
   1d658:	movt	r2, #4
   1d65c:	movw	r3, #30876	; 0x789c
   1d660:	movt	r3, #4
   1d664:	cmp	r1, #2
   1d668:	moveq	r2, r3
   1d66c:	movw	r3, #30864	; 0x7890
   1d670:	movt	r3, #4
   1d674:	movw	ip, #30880	; 0x78a0
   1d678:	movt	ip, #4
   1d67c:	cmp	r1, #2
   1d680:	moveq	r3, ip
   1d684:	b	1d698 <__assert_fail@plt+0xb0d4>
   1d688:	movw	r2, #30868	; 0x7894
   1d68c:	movt	r2, #4
   1d690:	movw	r3, #30872	; 0x7898
   1d694:	movt	r3, #4
   1d698:	movw	r1, #30900	; 0x78b4
   1d69c:	movt	r1, #4
   1d6a0:	bl	1230c <fprintf@plt>
   1d6a4:	movw	r0, #46408	; 0xb548
   1d6a8:	movt	r0, #5
   1d6ac:	ldrd	r2, [r4, #48]	; 0x30
   1d6b0:	movw	r1, #30924	; 0x78cc
   1d6b4:	movt	r1, #4
   1d6b8:	ldr	r0, [r0]
   1d6bc:	bl	1230c <fprintf@plt>
   1d6c0:	b	1d5d8 <__assert_fail@plt+0xb014>
   1d6c4:	movw	r2, #30856	; 0x7888
   1d6c8:	movt	r2, #4
   1d6cc:	movw	r3, #30860	; 0x788c
   1d6d0:	movt	r3, #4
   1d6d4:	b	1d698 <__assert_fail@plt+0xb0d4>
   1d6d8:	str	r4, [sp, #-8]!
   1d6dc:	str	lr, [sp, #4]
   1d6e0:	mov	r3, r1
   1d6e4:	mov	r4, r2
   1d6e8:	mov	r2, r0
   1d6ec:	mov	r1, r4
   1d6f0:	mov	r0, r3
   1d6f4:	bl	1d598 <__assert_fail@plt+0xafd4>
   1d6f8:	cmp	r0, #0
   1d6fc:	beq	1d72c <__assert_fail@plt+0xb168>
   1d700:	ldrd	r2, [r0, #48]	; 0x30
   1d704:	cmp	r3, #0
   1d708:	cmpeq	r2, #100	; 0x64
   1d70c:	vldr	s15, [pc, #44]	; 1d740 <__assert_fail@plt+0xb17c>
   1d710:	vldr	s14, [pc, #44]	; 1d744 <__assert_fail@plt+0xb180>
   1d714:	vmovcs.f32	s15, s14
   1d718:	vstr	s15, [r0, #28]
   1d71c:	mov	r0, #1
   1d720:	ldr	r4, [sp]
   1d724:	add	sp, sp, #4
   1d728:	pop	{pc}		; (ldr pc, [sp], #4)
   1d72c:	ldr	r3, [r4]
   1d730:	sub	r3, r3, #1
   1d734:	str	r3, [r4]
   1d738:	mov	r0, #0
   1d73c:	b	1d720 <__assert_fail@plt+0xb15c>
   1d740:	svccc	0x007d70a4
   1d744:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d748:	str	r4, [sp, #-8]!
   1d74c:	str	lr, [sp, #4]
   1d750:	mov	r3, r1
   1d754:	mov	r4, r2
   1d758:	mov	r2, r0
   1d75c:	mov	r1, r4
   1d760:	mov	r0, r3
   1d764:	bl	1d598 <__assert_fail@plt+0xafd4>
   1d768:	cmp	r0, #0
   1d76c:	beq	1d7c0 <__assert_fail@plt+0xb1fc>
   1d770:	ldrd	r2, [r0, #48]	; 0x30
   1d774:	cmp	r3, #0
   1d778:	cmpeq	r2, #1
   1d77c:	beq	1d7ac <__assert_fail@plt+0xb1e8>
   1d780:	cmp	r3, #0
   1d784:	cmpeq	r2, #2
   1d788:	movweq	r3, #55050	; 0xd70a
   1d78c:	movteq	r3, #15395	; 0x3c23
   1d790:	movwne	r3, #4719	; 0x126f
   1d794:	movtne	r3, #14979	; 0x3a83
   1d798:	str	r3, [r0, #28]
   1d79c:	mov	r0, #1
   1d7a0:	ldr	r4, [sp]
   1d7a4:	add	sp, sp, #4
   1d7a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7ac:	movw	r3, #28836	; 0x70a4
   1d7b0:	movt	r3, #16253	; 0x3f7d
   1d7b4:	str	r3, [r0, #28]
   1d7b8:	mov	r0, #1
   1d7bc:	b	1d7a0 <__assert_fail@plt+0xb1dc>
   1d7c0:	ldr	r3, [r4]
   1d7c4:	sub	r3, r3, #1
   1d7c8:	str	r3, [r4]
   1d7cc:	mov	r0, #0
   1d7d0:	b	1d7a0 <__assert_fail@plt+0xb1dc>
   1d7d4:	str	r4, [sp, #-8]!
   1d7d8:	str	lr, [sp, #4]
   1d7dc:	mov	r3, r1
   1d7e0:	mov	r4, r2
   1d7e4:	mov	r2, r0
   1d7e8:	mov	r1, r4
   1d7ec:	mov	r0, r3
   1d7f0:	bl	1d598 <__assert_fail@plt+0xafd4>
   1d7f4:	subs	r3, r0, #0
   1d7f8:	beq	1d828 <__assert_fail@plt+0xb264>
   1d7fc:	movw	r2, #14269	; 0x37bd
   1d800:	movt	r2, #13702	; 0x3586
   1d804:	str	r2, [r3, #28]
   1d808:	mov	r0, #1
   1d80c:	strb	r0, [r3, #20]
   1d810:	mov	r2, #0
   1d814:	strb	r2, [r3, #18]
   1d818:	strb	r2, [r3, #19]
   1d81c:	ldr	r4, [sp]
   1d820:	add	sp, sp, #4
   1d824:	pop	{pc}		; (ldr pc, [sp], #4)
   1d828:	ldr	r3, [r4]
   1d82c:	sub	r3, r3, #1
   1d830:	str	r3, [r4]
   1d834:	mov	r0, #0
   1d838:	b	1d81c <__assert_fail@plt+0xb258>
   1d83c:	str	r4, [sp, #-8]!
   1d840:	str	lr, [sp, #4]
   1d844:	mov	r3, r1
   1d848:	mov	r4, r2
   1d84c:	mov	r2, r0
   1d850:	mov	r1, r4
   1d854:	mov	r0, r3
   1d858:	bl	1d598 <__assert_fail@plt+0xafd4>
   1d85c:	cmp	r0, #0
   1d860:	beq	1d890 <__assert_fail@plt+0xb2cc>
   1d864:	ldrd	r2, [r0, #48]	; 0x30
   1d868:	cmp	r3, #0
   1d86c:	cmpeq	r2, #100	; 0x64
   1d870:	vldr	s15, [pc, #44]	; 1d8a4 <__assert_fail@plt+0xb2e0>
   1d874:	vldr	s14, [pc, #44]	; 1d8a8 <__assert_fail@plt+0xb2e4>
   1d878:	vmovcs.f32	s15, s14
   1d87c:	vstr	s15, [r0, #28]
   1d880:	mov	r0, #1
   1d884:	ldr	r4, [sp]
   1d888:	add	sp, sp, #4
   1d88c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d890:	ldr	r3, [r4]
   1d894:	sub	r3, r3, #1
   1d898:	str	r3, [r4]
   1d89c:	mov	r0, #0
   1d8a0:	b	1d884 <__assert_fail@plt+0xb2c0>
   1d8a4:	svccc	0x007d70a4
   1d8a8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d8ac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d8b0:	strd	r6, [sp, #8]
   1d8b4:	strd	r8, [sp, #16]
   1d8b8:	str	lr, [sp, #24]
   1d8bc:	sub	sp, sp, #28
   1d8c0:	subs	r7, r1, #0
   1d8c4:	beq	1dc10 <__assert_fail@plt+0xb64c>
   1d8c8:	ldr	r3, [r2]
   1d8cc:	ldr	r4, [r7, r3, lsl #2]
   1d8d0:	cmp	r4, #0
   1d8d4:	beq	1dc18 <__assert_fail@plt+0xb654>
   1d8d8:	mov	r5, r2
   1d8dc:	mov	r8, r0
   1d8e0:	mov	r0, r4
   1d8e4:	bl	122d0 <strlen@plt>
   1d8e8:	cmp	r0, #0
   1d8ec:	beq	1da28 <__assert_fail@plt+0xb464>
   1d8f0:	sub	r6, r0, #1
   1d8f4:	ldrb	r9, [r4, r6]
   1d8f8:	sub	r3, r9, #48	; 0x30
   1d8fc:	cmp	r3, #71	; 0x47
   1d900:	ldrls	pc, [pc, r3, lsl #2]
   1d904:	b	1daac <__assert_fail@plt+0xb4e8>
   1d908:	ldrdeq	sp, [r1], -ip
   1d90c:	ldrdeq	sp, [r1], -ip
   1d910:	ldrdeq	sp, [r1], -ip
   1d914:	ldrdeq	sp, [r1], -ip
   1d918:	ldrdeq	sp, [r1], -ip
   1d91c:	ldrdeq	sp, [r1], -ip
   1d920:	ldrdeq	sp, [r1], -ip
   1d924:	ldrdeq	sp, [r1], -ip
   1d928:	ldrdeq	sp, [r1], -ip
   1d92c:	ldrdeq	sp, [r1], -ip
   1d930:	andeq	sp, r1, ip, lsr #21
   1d934:	andeq	sp, r1, ip, lsr #21
   1d938:	andeq	sp, r1, ip, lsr #21
   1d93c:	andeq	sp, r1, ip, lsr #21
   1d940:	andeq	sp, r1, ip, lsr #21
   1d944:	andeq	sp, r1, ip, lsr #21
   1d948:	andeq	sp, r1, ip, lsr #21
   1d94c:	andeq	sp, r1, ip, lsr #21
   1d950:	andeq	sp, r1, ip, lsr #21
   1d954:	andeq	sp, r1, ip, lsr #21
   1d958:	andeq	sp, r1, ip, lsr #21
   1d95c:	andeq	sp, r1, ip, lsr #21
   1d960:	andeq	sp, r1, ip, lsr #21
   1d964:	andeq	sp, r1, ip, lsl #21
   1d968:	andeq	sp, r1, ip, lsr #21
   1d96c:	andeq	sp, r1, ip, lsr #21
   1d970:	andeq	sp, r1, ip, lsr #21
   1d974:	andeq	sp, r1, ip, lsr #21
   1d978:	andeq	sp, r1, ip, lsr #21
   1d97c:	andeq	sp, r1, ip, ror sl
   1d980:	andeq	sp, r1, ip, lsr #21
   1d984:	andeq	sp, r1, ip, lsr #21
   1d988:	andeq	sp, r1, ip, lsr #21
   1d98c:	andeq	sp, r1, ip, lsr #21
   1d990:	andeq	sp, r1, ip, lsr #21
   1d994:	andeq	sp, r1, ip, lsr #21
   1d998:	andeq	sp, r1, ip, lsr #21
   1d99c:	andeq	sp, r1, ip, lsr #21
   1d9a0:	andeq	sp, r1, ip, lsr #21
   1d9a4:	andeq	sp, r1, ip, lsr #21
   1d9a8:	andeq	sp, r1, ip, lsr #21
   1d9ac:	andeq	sp, r1, ip, lsr #21
   1d9b0:	andeq	sp, r1, ip, lsr #21
   1d9b4:	andeq	sp, r1, ip, lsr #21
   1d9b8:	andeq	sp, r1, ip, lsr #21
   1d9bc:	andeq	sp, r1, ip, lsr #21
   1d9c0:	andeq	sp, r1, ip, lsr #21
   1d9c4:	andeq	sp, r1, ip, lsr #21
   1d9c8:	andeq	sp, r1, ip, lsr #21
   1d9cc:	andeq	sp, r1, ip, lsr #21
   1d9d0:	andeq	sp, r1, ip, asr #20
   1d9d4:	andeq	sp, r1, ip, asr sl
   1d9d8:	andeq	sp, r1, ip, lsr #21
   1d9dc:	andeq	sp, r1, ip, lsr #21
   1d9e0:	andeq	sp, r1, ip, lsr #21
   1d9e4:	andeq	sp, r1, ip, lsr #21
   1d9e8:	andeq	sp, r1, ip, lsr #21
   1d9ec:	andeq	sp, r1, ip, lsr #21
   1d9f0:	andeq	sp, r1, ip, lsr #21
   1d9f4:	andeq	sp, r1, ip, ror #20
   1d9f8:	andeq	sp, r1, ip, lsr #21
   1d9fc:	andeq	sp, r1, ip, lsr #21
   1da00:	andeq	sp, r1, ip, lsr #21
   1da04:	andeq	sp, r1, ip, lsr #21
   1da08:	andeq	sp, r1, ip, lsr #21
   1da0c:	andeq	sp, r1, ip, lsr #21
   1da10:	andeq	sp, r1, ip, lsr #21
   1da14:	andeq	sp, r1, ip, lsr #21
   1da18:	andeq	sp, r1, ip, lsr #21
   1da1c:	andeq	sp, r1, ip, lsr #21
   1da20:	andeq	sp, r1, ip, lsr #21
   1da24:	muleq	r1, ip, sl
   1da28:	mov	r2, #5
   1da2c:	movw	r1, #30932	; 0x78d4
   1da30:	movt	r1, #4
   1da34:	mov	r0, #0
   1da38:	bl	12084 <dcgettext@plt>
   1da3c:	mov	r2, r0
   1da40:	mov	r1, #0
   1da44:	mov	r0, #1
   1da48:	bl	121bc <error@plt>
   1da4c:	mov	r3, #0
   1da50:	strb	r3, [r4, r6]
   1da54:	mov	r6, #512	; 0x200
   1da58:	b	1dae4 <__assert_fail@plt+0xb520>
   1da5c:	mov	r3, #0
   1da60:	strb	r3, [r4, r6]
   1da64:	mov	r6, #1
   1da68:	b	1dae4 <__assert_fail@plt+0xb520>
   1da6c:	mov	r3, #0
   1da70:	strb	r3, [r4, r6]
   1da74:	mov	r6, #1024	; 0x400
   1da78:	b	1dae4 <__assert_fail@plt+0xb520>
   1da7c:	mov	r3, #0
   1da80:	strb	r3, [r4, r6]
   1da84:	mov	r6, #1048576	; 0x100000
   1da88:	b	1dae4 <__assert_fail@plt+0xb520>
   1da8c:	mov	r3, #0
   1da90:	strb	r3, [r4, r6]
   1da94:	mov	r6, #1073741824	; 0x40000000
   1da98:	b	1dae4 <__assert_fail@plt+0xb520>
   1da9c:	mov	r3, #0
   1daa0:	strb	r3, [r4, r6]
   1daa4:	mov	r6, #2
   1daa8:	b	1dae4 <__assert_fail@plt+0xb520>
   1daac:	mov	r2, #5
   1dab0:	movw	r1, #30964	; 0x78f4
   1dab4:	movt	r1, #4
   1dab8:	mov	r0, #0
   1dabc:	bl	12084 <dcgettext@plt>
   1dac0:	ldr	r3, [r5]
   1dac4:	ldr	r3, [r7, r3, lsl #2]
   1dac8:	ldrb	r3, [r3, r6]
   1dacc:	mov	r2, r0
   1dad0:	mov	r1, #0
   1dad4:	mov	r0, #1
   1dad8:	bl	121bc <error@plt>
   1dadc:	mov	r6, #512	; 0x200
   1dae0:	mov	r9, #0
   1dae4:	add	r2, sp, #12
   1dae8:	add	r1, sp, #16
   1daec:	mov	r0, r4
   1daf0:	bl	1d524 <__assert_fail@plt+0xaf60>
   1daf4:	subs	r7, r0, #0
   1daf8:	beq	1db90 <__assert_fail@plt+0xb5cc>
   1dafc:	mov	r1, r4
   1db00:	mov	r0, r8
   1db04:	bl	18470 <__assert_fail@plt+0x5eac>
   1db08:	ldr	r1, [sp, #12]
   1db0c:	str	r1, [r0, #40]	; 0x28
   1db10:	str	r6, [r0, #44]	; 0x2c
   1db14:	ldr	r2, [sp, #16]
   1db18:	ldr	r3, [sp, #20]
   1db1c:	str	r2, [r0, #48]	; 0x30
   1db20:	str	r3, [r0, #52]	; 0x34
   1db24:	mov	ip, #1
   1db28:	strb	ip, [r0, #18]
   1db2c:	mov	ip, #0
   1db30:	strb	ip, [r0, #19]
   1db34:	cmp	r1, ip
   1db38:	bne	1dbcc <__assert_fail@plt+0xb608>
   1db3c:	asr	r9, r6, #31
   1db40:	mul	r3, r6, r3
   1db44:	mla	r3, r2, r9, r3
   1db48:	umull	r8, r9, r6, r2
   1db4c:	add	r9, r3, r9
   1db50:	cmp	r9, #0
   1db54:	cmpeq	r8, #20480	; 0x5000
   1db58:	vldr	s15, [pc, #192]	; 1dc20 <__assert_fail@plt+0xb65c>
   1db5c:	vldr	s14, [pc, #192]	; 1dc24 <__assert_fail@plt+0xb660>
   1db60:	vmovls.f32	s15, s14
   1db64:	vstr	s15, [r0, #28]
   1db68:	ldr	r3, [r5]
   1db6c:	add	r3, r3, #1
   1db70:	str	r3, [r5]
   1db74:	mov	r0, r7
   1db78:	add	sp, sp, #28
   1db7c:	ldrd	r4, [sp]
   1db80:	ldrd	r6, [sp, #8]
   1db84:	ldrd	r8, [sp, #16]
   1db88:	add	sp, sp, #24
   1db8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1db90:	strb	r9, [sp, #8]
   1db94:	mov	r5, #0
   1db98:	strb	r5, [sp, #9]
   1db9c:	mov	r2, #5
   1dba0:	movw	r1, #30988	; 0x790c
   1dba4:	movt	r1, #4
   1dba8:	mov	r0, r5
   1dbac:	bl	12084 <dcgettext@plt>
   1dbb0:	add	r3, sp, #8
   1dbb4:	str	r3, [sp]
   1dbb8:	mov	r3, r4
   1dbbc:	mov	r2, r0
   1dbc0:	mov	r1, r5
   1dbc4:	mov	r0, #1
   1dbc8:	bl	121bc <error@plt>
   1dbcc:	cmp	r1, #1
   1dbd0:	movwne	r3, #55050	; 0xd70a
   1dbd4:	movtne	r3, #15395	; 0x3c23
   1dbd8:	strne	r3, [r0, #28]
   1dbdc:	bne	1db68 <__assert_fail@plt+0xb5a4>
   1dbe0:	asr	r9, r6, #31
   1dbe4:	mul	r3, r6, r3
   1dbe8:	mla	r3, r2, r9, r3
   1dbec:	umull	r8, r9, r6, r2
   1dbf0:	add	r9, r3, r9
   1dbf4:	cmp	r9, #0
   1dbf8:	cmpeq	r8, #20480	; 0x5000
   1dbfc:	vldr	s15, [pc, #32]	; 1dc24 <__assert_fail@plt+0xb660>
   1dc00:	vldr	s14, [pc, #24]	; 1dc20 <__assert_fail@plt+0xb65c>
   1dc04:	vmovls.f32	s15, s14
   1dc08:	vstr	s15, [r0, #28]
   1dc0c:	b	1db68 <__assert_fail@plt+0xb5a4>
   1dc10:	mov	r7, #0
   1dc14:	b	1db74 <__assert_fail@plt+0xb5b0>
   1dc18:	mov	r7, #0
   1dc1c:	b	1db74 <__assert_fail@plt+0xb5b0>
   1dc20:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dc24:	svccc	0x00666666
   1dc28:	strd	r4, [sp, #-16]!
   1dc2c:	str	r6, [sp, #8]
   1dc30:	str	lr, [sp, #12]
   1dc34:	sub	sp, sp, #8
   1dc38:	mov	r6, r2
   1dc3c:	mov	r4, r3
   1dc40:	add	r2, sp, #4
   1dc44:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1dc48:	subs	r5, r0, #0
   1dc4c:	beq	1dc9c <__assert_fail@plt+0xb6d8>
   1dc50:	ldr	r0, [sp, #4]
   1dc54:	str	r0, [r4]
   1dc58:	movw	r3, #48748	; 0xbe6c
   1dc5c:	movt	r3, #5
   1dc60:	ldr	r3, [r3, #52]	; 0x34
   1dc64:	mov	r1, r6
   1dc68:	blx	r3
   1dc6c:	cmp	r0, #0
   1dc70:	bne	1dc8c <__assert_fail@plt+0xb6c8>
   1dc74:	mov	r0, r5
   1dc78:	add	sp, sp, #8
   1dc7c:	ldrd	r4, [sp]
   1dc80:	ldr	r6, [sp, #8]
   1dc84:	add	sp, sp, #12
   1dc88:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc8c:	bl	12318 <__errno_location@plt>
   1dc90:	ldr	r1, [sp, #4]
   1dc94:	ldr	r0, [r0]
   1dc98:	bl	1970c <__assert_fail@plt+0x7148>
   1dc9c:	mov	r3, #0
   1dca0:	str	r3, [r4]
   1dca4:	b	1dc74 <__assert_fail@plt+0xb6b0>
   1dca8:	strd	r4, [sp, #-16]!
   1dcac:	str	r6, [sp, #8]
   1dcb0:	str	lr, [sp, #12]
   1dcb4:	sub	sp, sp, #112	; 0x70
   1dcb8:	mov	r6, r0
   1dcbc:	mov	r4, r1
   1dcc0:	mov	r5, r2
   1dcc4:	add	r0, sp, #8
   1dcc8:	bl	18720 <__assert_fail@plt+0x615c>
   1dccc:	add	r3, sp, #4
   1dcd0:	add	r2, sp, #8
   1dcd4:	mov	r1, r5
   1dcd8:	mov	r0, r4
   1dcdc:	bl	1dc28 <__assert_fail@plt+0xb664>
   1dce0:	subs	r4, r0, #0
   1dce4:	bne	1dd00 <__assert_fail@plt+0xb73c>
   1dce8:	mov	r0, r4
   1dcec:	add	sp, sp, #112	; 0x70
   1dcf0:	ldrd	r4, [sp]
   1dcf4:	ldr	r6, [sp, #8]
   1dcf8:	add	sp, sp, #12
   1dcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd00:	ldr	r1, [sp, #4]
   1dd04:	mov	r0, r6
   1dd08:	bl	18470 <__assert_fail@plt+0x5eac>
   1dd0c:	mov	r5, r0
   1dd10:	ldr	r3, [sp, #92]	; 0x5c
   1dd14:	ldr	r2, [sp, #88]	; 0x58
   1dd18:	str	r2, [r0, #48]	; 0x30
   1dd1c:	str	r3, [r0, #52]	; 0x34
   1dd20:	mov	r3, #3
   1dd24:	str	r3, [r0, #40]	; 0x28
   1dd28:	mov	r3, #0
   1dd2c:	str	r3, [r0, #44]	; 0x2c
   1dd30:	ldr	r0, [sp, #88]	; 0x58
   1dd34:	bl	1bf10 <__assert_fail@plt+0x994c>
   1dd38:	vstr	s0, [r5, #28]
   1dd3c:	b	1dce8 <__assert_fail@plt+0xb724>
   1dd40:	strd	r4, [sp, #-16]!
   1dd44:	str	r6, [sp, #8]
   1dd48:	str	lr, [sp, #12]
   1dd4c:	sub	sp, sp, #112	; 0x70
   1dd50:	mov	r6, r0
   1dd54:	mov	r4, r1
   1dd58:	mov	r5, r2
   1dd5c:	add	r0, sp, #8
   1dd60:	bl	18720 <__assert_fail@plt+0x615c>
   1dd64:	add	r3, sp, #4
   1dd68:	add	r2, sp, #8
   1dd6c:	mov	r1, r5
   1dd70:	mov	r0, r4
   1dd74:	bl	1dc28 <__assert_fail@plt+0xb664>
   1dd78:	subs	r4, r0, #0
   1dd7c:	bne	1dd98 <__assert_fail@plt+0xb7d4>
   1dd80:	mov	r0, r4
   1dd84:	add	sp, sp, #112	; 0x70
   1dd88:	ldrd	r4, [sp]
   1dd8c:	ldr	r6, [sp, #8]
   1dd90:	add	sp, sp, #12
   1dd94:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd98:	ldr	r1, [sp, #4]
   1dd9c:	mov	r0, r6
   1dda0:	bl	18470 <__assert_fail@plt+0x5eac>
   1dda4:	mov	r5, r0
   1dda8:	mov	r3, #2
   1ddac:	str	r3, [r0, #40]	; 0x28
   1ddb0:	ldr	r3, [sp, #92]	; 0x5c
   1ddb4:	ldr	r2, [sp, #88]	; 0x58
   1ddb8:	str	r2, [r0, #48]	; 0x30
   1ddbc:	str	r3, [r0, #52]	; 0x34
   1ddc0:	mov	r3, #0
   1ddc4:	str	r3, [r0, #44]	; 0x2c
   1ddc8:	ldr	r0, [sp, #88]	; 0x58
   1ddcc:	bl	1bf10 <__assert_fail@plt+0x994c>
   1ddd0:	vstr	s0, [r5, #28]
   1ddd4:	b	1dd80 <__assert_fail@plt+0xb7bc>
   1ddd8:	strd	r4, [sp, #-16]!
   1dddc:	str	r6, [sp, #8]
   1dde0:	str	lr, [sp, #12]
   1dde4:	sub	sp, sp, #112	; 0x70
   1dde8:	mov	r6, r0
   1ddec:	mov	r4, r1
   1ddf0:	mov	r5, r2
   1ddf4:	add	r0, sp, #8
   1ddf8:	bl	18720 <__assert_fail@plt+0x615c>
   1ddfc:	add	r3, sp, #4
   1de00:	add	r2, sp, #8
   1de04:	mov	r1, r5
   1de08:	mov	r0, r4
   1de0c:	bl	1dc28 <__assert_fail@plt+0xb664>
   1de10:	subs	r4, r0, #0
   1de14:	bne	1de30 <__assert_fail@plt+0xb86c>
   1de18:	mov	r0, r4
   1de1c:	add	sp, sp, #112	; 0x70
   1de20:	ldrd	r4, [sp]
   1de24:	ldr	r6, [sp, #8]
   1de28:	add	sp, sp, #12
   1de2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1de30:	ldr	r1, [sp, #4]
   1de34:	mov	r0, r6
   1de38:	bl	18470 <__assert_fail@plt+0x5eac>
   1de3c:	mov	r5, r0
   1de40:	mov	r3, #0
   1de44:	str	r3, [r0, #40]	; 0x28
   1de48:	ldr	r2, [sp, #92]	; 0x5c
   1de4c:	ldr	r1, [sp, #88]	; 0x58
   1de50:	str	r1, [r0, #48]	; 0x30
   1de54:	str	r2, [r0, #52]	; 0x34
   1de58:	str	r3, [r0, #44]	; 0x2c
   1de5c:	ldr	r0, [sp, #88]	; 0x58
   1de60:	bl	1bf10 <__assert_fail@plt+0x994c>
   1de64:	vstr	s0, [r5, #28]
   1de68:	b	1de18 <__assert_fail@plt+0xb854>
   1de6c:	strd	r4, [sp, #-16]!
   1de70:	str	r6, [sp, #8]
   1de74:	str	lr, [sp, #12]
   1de78:	sub	sp, sp, #216	; 0xd8
   1de7c:	mov	r6, r0
   1de80:	mov	r4, r1
   1de84:	mov	r5, r2
   1de88:	add	r0, sp, #112	; 0x70
   1de8c:	bl	18720 <__assert_fail@plt+0x615c>
   1de90:	add	r3, sp, #4
   1de94:	add	r2, sp, #112	; 0x70
   1de98:	mov	r1, r5
   1de9c:	mov	r0, r4
   1dea0:	bl	1dc28 <__assert_fail@plt+0xb664>
   1dea4:	subs	r4, r0, #0
   1dea8:	bne	1dec4 <__assert_fail@plt+0xb900>
   1deac:	mov	r0, r4
   1deb0:	add	sp, sp, #216	; 0xd8
   1deb4:	ldrd	r4, [sp]
   1deb8:	ldr	r6, [sp, #8]
   1debc:	add	sp, sp, #12
   1dec0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dec4:	add	r0, sp, #8
   1dec8:	bl	18720 <__assert_fail@plt+0x615c>
   1decc:	movw	r3, #48748	; 0xbe6c
   1ded0:	movt	r3, #5
   1ded4:	ldr	r3, [r3, #48]	; 0x30
   1ded8:	cmp	r3, #0
   1dedc:	bne	1df10 <__assert_fail@plt+0xb94c>
   1dee0:	movw	r3, #48748	; 0xbe6c
   1dee4:	movt	r3, #5
   1dee8:	ldrb	r3, [r3, #56]	; 0x38
   1deec:	cmp	r3, #0
   1def0:	bne	1df18 <__assert_fail@plt+0xb954>
   1def4:	ldr	r3, [sp, #128]	; 0x80
   1def8:	and	r3, r3, #61440	; 0xf000
   1defc:	cmp	r3, #40960	; 0xa000
   1df00:	movne	r1, #0
   1df04:	bne	1df1c <__assert_fail@plt+0xb958>
   1df08:	mvn	r5, #1
   1df0c:	b	1df2c <__assert_fail@plt+0xb968>
   1df10:	mov	r1, #0
   1df14:	b	1df1c <__assert_fail@plt+0xb958>
   1df18:	mov	r1, #32768	; 0x8000
   1df1c:	ldr	r0, [sp, #4]
   1df20:	bl	214a4 <__assert_fail@plt+0xeee0>
   1df24:	subs	r5, r0, #0
   1df28:	bge	1df6c <__assert_fail@plt+0xb9a8>
   1df2c:	ldr	r1, [sp, #4]
   1df30:	mov	r0, r6
   1df34:	bl	18470 <__assert_fail@plt+0x5eac>
   1df38:	ldrd	r2, [sp, #208]	; 0xd0
   1df3c:	strd	r2, [r0, #40]	; 0x28
   1df40:	ldrd	r2, [sp, #112]	; 0x70
   1df44:	strd	r2, [r0, #48]	; 0x30
   1df48:	str	r5, [r0, #56]	; 0x38
   1df4c:	mov	r3, #0
   1df50:	strb	r3, [r0, #19]
   1df54:	mov	r3, #1
   1df58:	strb	r3, [r0, #18]
   1df5c:	movw	r3, #55050	; 0xd70a
   1df60:	movt	r3, #15395	; 0x3c23
   1df64:	str	r3, [r0, #28]
   1df68:	b	1deac <__assert_fail@plt+0xb8e8>
   1df6c:	add	r2, sp, #8
   1df70:	mov	r1, r5
   1df74:	mov	r0, #3
   1df78:	bl	1212c <__fxstat64@plt>
   1df7c:	cmp	r0, #0
   1df80:	bne	1e014 <__assert_fail@plt+0xba50>
   1df84:	movw	r3, #48748	; 0xbe6c
   1df88:	movt	r3, #5
   1df8c:	ldr	r3, [r3, #52]	; 0x34
   1df90:	add	r1, sp, #112	; 0x70
   1df94:	ldr	r0, [sp, #4]
   1df98:	blx	r3
   1df9c:	cmp	r0, #0
   1dfa0:	bne	1e024 <__assert_fail@plt+0xba60>
   1dfa4:	movw	r3, #48748	; 0xbe6c
   1dfa8:	movt	r3, #5
   1dfac:	ldr	r3, [r3, #48]	; 0x30
   1dfb0:	cmp	r3, #0
   1dfb4:	bne	1e044 <__assert_fail@plt+0xba80>
   1dfb8:	movw	r3, #48748	; 0xbe6c
   1dfbc:	movt	r3, #5
   1dfc0:	ldrb	r3, [r3, #56]	; 0x38
   1dfc4:	cmp	r3, #0
   1dfc8:	bne	1e044 <__assert_fail@plt+0xba80>
   1dfcc:	ldr	r3, [sp, #128]	; 0x80
   1dfd0:	and	r3, r3, #61440	; 0xf000
   1dfd4:	cmp	r3, #40960	; 0xa000
   1dfd8:	beq	1e034 <__assert_fail@plt+0xba70>
   1dfdc:	ldrd	r0, [sp, #112]	; 0x70
   1dfe0:	ldrd	r2, [sp, #8]
   1dfe4:	cmp	r1, r3
   1dfe8:	cmpeq	r0, r2
   1dfec:	bne	1e004 <__assert_fail@plt+0xba40>
   1dff0:	ldrd	r0, [sp, #208]	; 0xd0
   1dff4:	ldrd	r2, [sp, #104]	; 0x68
   1dff8:	cmp	r1, r3
   1dffc:	cmpeq	r0, r2
   1e000:	beq	1df2c <__assert_fail@plt+0xb968>
   1e004:	mov	r0, r5
   1e008:	bl	1257c <close@plt>
   1e00c:	mvn	r5, #0
   1e010:	b	1df2c <__assert_fail@plt+0xb968>
   1e014:	bl	12318 <__errno_location@plt>
   1e018:	ldr	r1, [sp, #4]
   1e01c:	ldr	r0, [r0]
   1e020:	bl	1970c <__assert_fail@plt+0x7148>
   1e024:	bl	12318 <__errno_location@plt>
   1e028:	ldr	r1, [sp, #4]
   1e02c:	ldr	r0, [r0]
   1e030:	bl	1970c <__assert_fail@plt+0x7148>
   1e034:	mov	r0, r5
   1e038:	bl	1257c <close@plt>
   1e03c:	mvn	r5, #0
   1e040:	b	1df2c <__assert_fail@plt+0xb968>
   1e044:	mov	r2, #104	; 0x68
   1e048:	add	r1, sp, #8
   1e04c:	add	r0, sp, #112	; 0x70
   1e050:	bl	12000 <memcpy@plt>
   1e054:	b	1df2c <__assert_fail@plt+0xb968>
   1e058:	strd	r4, [sp, #-16]!
   1e05c:	str	r6, [sp, #8]
   1e060:	str	lr, [sp, #12]
   1e064:	sub	sp, sp, #8
   1e068:	mov	r6, r0
   1e06c:	mov	r4, r1
   1e070:	mov	r5, r2
   1e074:	add	r2, sp, #4
   1e078:	mov	r1, r5
   1e07c:	mov	r0, r4
   1e080:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1e084:	cmp	r0, #0
   1e088:	bne	1e0a0 <__assert_fail@plt+0xbadc>
   1e08c:	add	sp, sp, #8
   1e090:	ldrd	r4, [sp]
   1e094:	ldr	r6, [sp, #8]
   1e098:	add	sp, sp, #12
   1e09c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0a0:	ldr	r0, [sp, #4]
   1e0a4:	bl	223d8 <__assert_fail@plt+0xfe14>
   1e0a8:	movw	r3, #48748	; 0xbe6c
   1e0ac:	movt	r3, #5
   1e0b0:	str	r0, [r3, #60]	; 0x3c
   1e0b4:	mov	r2, r5
   1e0b8:	mov	r1, r4
   1e0bc:	mov	r0, r6
   1e0c0:	bl	1c358 <__assert_fail@plt+0x9d94>
   1e0c4:	b	1e08c <__assert_fail@plt+0xbac8>
   1e0c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e0cc:	strd	r6, [sp, #8]
   1e0d0:	str	r8, [sp, #16]
   1e0d4:	str	lr, [sp, #20]
   1e0d8:	sub	sp, sp, #16
   1e0dc:	mov	r4, r2
   1e0e0:	mov	r6, r3
   1e0e4:	add	r2, sp, #12
   1e0e8:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1e0ec:	subs	r5, r0, #0
   1e0f0:	bne	1e110 <__assert_fail@plt+0xbb4c>
   1e0f4:	mov	r0, r5
   1e0f8:	add	sp, sp, #16
   1e0fc:	ldrd	r4, [sp]
   1e100:	ldrd	r6, [sp, #8]
   1e104:	ldr	r8, [sp, #16]
   1e108:	add	sp, sp, #20
   1e10c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e110:	ldr	r2, [sp, #12]
   1e114:	movw	r1, #19020	; 0x4a4c
   1e118:	movt	r1, #1
   1e11c:	mov	r0, r4
   1e120:	bl	18424 <__assert_fail@plt+0x5e60>
   1e124:	mov	r8, r0
   1e128:	mov	r7, #0
   1e12c:	strb	r7, [r0, #19]
   1e130:	strb	r7, [r0, #18]
   1e134:	mov	r0, #32
   1e138:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1e13c:	mov	r4, r0
   1e140:	str	r0, [r8, #40]	; 0x28
   1e144:	mov	r0, #100	; 0x64
   1e148:	str	r0, [r4, #4]
   1e14c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1e150:	str	r0, [r4]
   1e154:	str	r7, [r4, #16]
   1e158:	mov	r0, r6
   1e15c:	bl	3fd10 <__assert_fail@plt+0x2d74c>
   1e160:	str	r6, [r4, #12]
   1e164:	str	r7, [r4, #20]
   1e168:	ldr	r6, [sp, #12]
   1e16c:	mov	r0, r6
   1e170:	bl	122d0 <strlen@plt>
   1e174:	mov	r2, r4
   1e178:	mov	r1, r0
   1e17c:	mov	r0, r6
   1e180:	bl	3fc94 <__assert_fail@plt+0x2d6d0>
   1e184:	subs	r4, r0, #0
   1e188:	bne	1e1a0 <__assert_fail@plt+0xbbdc>
   1e18c:	mov	r1, #1
   1e190:	ldr	r0, [sp, #12]
   1e194:	bl	1cbc0 <__assert_fail@plt+0xa5fc>
   1e198:	vstr	s0, [r8, #28]
   1e19c:	b	1e0f4 <__assert_fail@plt+0xbb30>
   1e1a0:	mov	r2, #5
   1e1a4:	movw	r1, #31024	; 0x7930
   1e1a8:	movt	r1, #4
   1e1ac:	mov	r0, r7
   1e1b0:	bl	12084 <dcgettext@plt>
   1e1b4:	str	r4, [sp]
   1e1b8:	ldr	r3, [sp, #12]
   1e1bc:	mov	r2, r0
   1e1c0:	mov	r1, r7
   1e1c4:	mov	r0, #1
   1e1c8:	bl	121bc <error@plt>
   1e1cc:	str	r4, [sp, #-8]!
   1e1d0:	str	lr, [sp, #4]
   1e1d4:	mov	ip, r1
   1e1d8:	mov	r1, r2
   1e1dc:	movw	r3, #48748	; 0xbe6c
   1e1e0:	movt	r3, #5
   1e1e4:	ldr	r3, [r3, #60]	; 0x3c
   1e1e8:	mov	r2, r0
   1e1ec:	mov	r0, ip
   1e1f0:	bl	1e0c8 <__assert_fail@plt+0xbb04>
   1e1f4:	ldr	r4, [sp]
   1e1f8:	add	sp, sp, #4
   1e1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e200:	str	r4, [sp, #-8]!
   1e204:	str	lr, [sp, #4]
   1e208:	mov	ip, r1
   1e20c:	mov	r1, r2
   1e210:	movw	r3, #48748	; 0xbe6c
   1e214:	movt	r3, #5
   1e218:	ldr	r3, [r3, #60]	; 0x3c
   1e21c:	orr	r3, r3, #4194304	; 0x400000
   1e220:	mov	r2, r0
   1e224:	mov	r0, ip
   1e228:	bl	1e0c8 <__assert_fail@plt+0xbb04>
   1e22c:	ldr	r4, [sp]
   1e230:	add	sp, sp, #4
   1e234:	pop	{pc}		; (ldr pc, [sp], #4)
   1e238:	strd	r4, [sp, #-16]!
   1e23c:	str	r6, [sp, #8]
   1e240:	str	lr, [sp, #12]
   1e244:	mov	r5, r0
   1e248:	mov	r4, r1
   1e24c:	mov	r0, #0
   1e250:	str	r0, [r1]
   1e254:	bl	2cd98 <__assert_fail@plt+0x1a7d4>
   1e258:	str	r0, [r4, #16]
   1e25c:	movw	r1, #31072	; 0x7960
   1e260:	movt	r1, #4
   1e264:	mov	r0, r5
   1e268:	bl	11f1c <strcmp@plt>
   1e26c:	cmp	r0, #0
   1e270:	beq	1e2d8 <__assert_fail@plt+0xbd14>
   1e274:	movw	r1, #31100	; 0x797c
   1e278:	movt	r1, #4
   1e27c:	mov	r0, r5
   1e280:	bl	11f1c <strcmp@plt>
   1e284:	cmp	r0, #0
   1e288:	bne	1e300 <__assert_fail@plt+0xbd3c>
   1e28c:	movw	r3, #46420	; 0xb554
   1e290:	movt	r3, #5
   1e294:	ldr	r3, [r3]
   1e298:	str	r3, [r4, #4]
   1e29c:	mov	r2, #5
   1e2a0:	movw	r1, #26444	; 0x674c
   1e2a4:	movt	r1, #4
   1e2a8:	bl	12084 <dcgettext@plt>
   1e2ac:	str	r0, [r4, #8]
   1e2b0:	ldr	r0, [r4, #4]
   1e2b4:	bl	12390 <fileno@plt>
   1e2b8:	cmn	r0, #1
   1e2bc:	moveq	r0, #0
   1e2c0:	bne	1e334 <__assert_fail@plt+0xbd70>
   1e2c4:	strb	r0, [r4, #12]
   1e2c8:	ldrd	r4, [sp]
   1e2cc:	ldr	r6, [sp, #8]
   1e2d0:	add	sp, sp, #12
   1e2d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2d8:	movw	r3, #46408	; 0xb548
   1e2dc:	movt	r3, #5
   1e2e0:	ldr	r3, [r3]
   1e2e4:	str	r3, [r4, #4]
   1e2e8:	mov	r2, #5
   1e2ec:	movw	r1, #31084	; 0x796c
   1e2f0:	movt	r1, #4
   1e2f4:	bl	12084 <dcgettext@plt>
   1e2f8:	str	r0, [r4, #8]
   1e2fc:	b	1e2b0 <__assert_fail@plt+0xbcec>
   1e300:	movw	r3, #48704	; 0xbe40
   1e304:	movt	r3, #5
   1e308:	mov	r1, r5
   1e30c:	ldr	r0, [r3, #36]	; 0x24
   1e310:	bl	19ab0 <__assert_fail@plt+0x74ec>
   1e314:	str	r0, [r4, #4]
   1e318:	str	r5, [r4, #8]
   1e31c:	cmp	r0, #0
   1e320:	bne	1e2b0 <__assert_fail@plt+0xbcec>
   1e324:	bl	12318 <__errno_location@plt>
   1e328:	mov	r1, r5
   1e32c:	ldr	r0, [r0]
   1e330:	bl	198d8 <__assert_fail@plt+0x7314>
   1e334:	bl	12534 <isatty@plt>
   1e338:	adds	r0, r0, #0
   1e33c:	movne	r0, #1
   1e340:	b	1e2c4 <__assert_fail@plt+0xbd00>
   1e344:	strd	r4, [sp, #-16]!
   1e348:	str	r6, [sp, #8]
   1e34c:	str	lr, [sp, #12]
   1e350:	sub	sp, sp, #24
   1e354:	mov	r5, r0
   1e358:	mov	r0, r1
   1e35c:	mov	r4, r2
   1e360:	ldr	r6, [r2]
   1e364:	add	r2, sp, #20
   1e368:	mov	r1, r4
   1e36c:	bl	1bfa4 <__assert_fail@plt+0x99e0>
   1e370:	cmp	r0, #0
   1e374:	bne	1e38c <__assert_fail@plt+0xbdc8>
   1e378:	add	sp, sp, #24
   1e37c:	ldrd	r4, [sp]
   1e380:	ldr	r6, [sp, #8]
   1e384:	add	sp, sp, #12
   1e388:	pop	{pc}		; (ldr pc, [sp], #4)
   1e38c:	mov	r1, sp
   1e390:	movw	r0, #31100	; 0x797c
   1e394:	movt	r0, #4
   1e398:	bl	1e238 <__assert_fail@plt+0xbc74>
   1e39c:	ldr	r2, [sp, #20]
   1e3a0:	mov	r1, r5
   1e3a4:	mov	r0, sp
   1e3a8:	bl	1b5d8 <__assert_fail@plt+0x9014>
   1e3ac:	cmp	r0, #0
   1e3b0:	streq	r6, [r4]
   1e3b4:	b	1e378 <__assert_fail@plt+0xbdb4>
   1e3b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e3bc:	strd	r6, [sp, #8]
   1e3c0:	str	lr, [sp, #16]
   1e3c4:	sub	sp, sp, #36	; 0x24
   1e3c8:	mov	r7, r0
   1e3cc:	mov	r5, r1
   1e3d0:	mov	r4, r2
   1e3d4:	ldr	r6, [r2]
   1e3d8:	add	r2, sp, #28
   1e3dc:	mov	r1, r4
   1e3e0:	mov	r0, r5
   1e3e4:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1e3e8:	cmp	r0, #0
   1e3ec:	bne	1e40c <__assert_fail@plt+0xbe48>
   1e3f0:	str	r6, [r4]
   1e3f4:	mov	r0, #0
   1e3f8:	add	sp, sp, #36	; 0x24
   1e3fc:	ldrd	r4, [sp]
   1e400:	ldrd	r6, [sp, #8]
   1e404:	add	sp, sp, #16
   1e408:	pop	{pc}		; (ldr pc, [sp], #4)
   1e40c:	add	r2, sp, #24
   1e410:	mov	r1, r4
   1e414:	mov	r0, r5
   1e418:	bl	1bfa4 <__assert_fail@plt+0x99e0>
   1e41c:	cmp	r0, #0
   1e420:	beq	1e3f0 <__assert_fail@plt+0xbe2c>
   1e424:	add	r1, sp, #4
   1e428:	ldr	r0, [sp, #28]
   1e42c:	bl	1e238 <__assert_fail@plt+0xbc74>
   1e430:	ldr	r6, [r4]
   1e434:	ldr	r2, [sp, #24]
   1e438:	mov	r1, r7
   1e43c:	add	r0, sp, #4
   1e440:	bl	1b5d8 <__assert_fail@plt+0x9014>
   1e444:	cmp	r0, #0
   1e448:	beq	1e3f0 <__assert_fail@plt+0xbe2c>
   1e44c:	b	1e3f8 <__assert_fail@plt+0xbe34>
   1e450:	strd	r4, [sp, #-12]!
   1e454:	str	lr, [sp, #8]
   1e458:	sub	sp, sp, #12
   1e45c:	mov	r4, r0
   1e460:	mov	r0, r1
   1e464:	mov	r1, r2
   1e468:	add	r2, sp, #4
   1e46c:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1e470:	subs	r5, r0, #0
   1e474:	bne	1e48c <__assert_fail@plt+0xbec8>
   1e478:	mov	r0, r5
   1e47c:	add	sp, sp, #12
   1e480:	ldrd	r4, [sp]
   1e484:	add	sp, sp, #8
   1e488:	pop	{pc}		; (ldr pc, [sp], #4)
   1e48c:	ldr	r1, [sp, #4]
   1e490:	mov	r0, r4
   1e494:	bl	18470 <__assert_fail@plt+0x5eac>
   1e498:	mov	r4, r0
   1e49c:	add	r1, r0, #40	; 0x28
   1e4a0:	ldr	r0, [sp, #4]
   1e4a4:	bl	1e238 <__assert_fail@plt+0xbc74>
   1e4a8:	mov	r3, #1
   1e4ac:	strb	r3, [r4, #17]
   1e4b0:	strb	r3, [r4, #16]
   1e4b4:	mov	r3, #0
   1e4b8:	strb	r3, [r4, #19]
   1e4bc:	strb	r3, [r4, #18]
   1e4c0:	mov	r3, #1065353216	; 0x3f800000
   1e4c4:	str	r3, [r4, #28]
   1e4c8:	b	1e478 <__assert_fail@plt+0xbeb4>
   1e4cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1e4d0:	strd	r6, [sp, #8]
   1e4d4:	strd	r8, [sp, #16]
   1e4d8:	str	sl, [sp, #24]
   1e4dc:	str	lr, [sp, #28]
   1e4e0:	sub	sp, sp, #24
   1e4e4:	mov	r9, r0
   1e4e8:	mov	r0, r1
   1e4ec:	mov	r1, r2
   1e4f0:	add	r2, sp, #12
   1e4f4:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1e4f8:	subs	r8, r0, #0
   1e4fc:	beq	1e5e4 <__assert_fail@plt+0xc020>
   1e500:	ldr	r2, [sp, #12]
   1e504:	ldrb	r3, [r2]
   1e508:	cmp	r3, #45	; 0x2d
   1e50c:	beq	1e604 <__assert_fail@plt+0xc040>
   1e510:	cmp	r3, #47	; 0x2f
   1e514:	beq	1e618 <__assert_fail@plt+0xc054>
   1e518:	mov	r7, #2
   1e51c:	mov	r0, #0
   1e520:	movw	sl, #55050	; 0xd70a
   1e524:	movt	sl, #15395	; 0x3c23
   1e528:	add	r0, r2, r0
   1e52c:	bl	26f0c <__assert_fail@plt+0x14948>
   1e530:	subs	r6, r0, #0
   1e534:	beq	1e62c <__assert_fail@plt+0xc068>
   1e538:	ldr	r3, [sp, #12]
   1e53c:	ldrb	r2, [r3]
   1e540:	cmp	r2, #43	; 0x2b
   1e544:	bne	1e55c <__assert_fail@plt+0xbf98>
   1e548:	ldrb	r3, [r3, #1]
   1e54c:	sub	r3, r3, #48	; 0x30
   1e550:	uxtb	r3, r3
   1e554:	cmp	r3, #7
   1e558:	bls	1e62c <__assert_fail@plt+0xc068>
   1e55c:	mov	r4, #0
   1e560:	str	r4, [sp]
   1e564:	mov	r3, r6
   1e568:	mov	r2, r4
   1e56c:	mov	r1, r4
   1e570:	mov	r0, r4
   1e574:	bl	27348 <__assert_fail@plt+0x14d84>
   1e578:	mov	r5, r0
   1e57c:	str	r0, [sp, #16]
   1e580:	str	r4, [sp]
   1e584:	mov	r3, r6
   1e588:	mov	r2, r4
   1e58c:	mov	r1, #1
   1e590:	mov	r0, r4
   1e594:	bl	27348 <__assert_fail@plt+0x14d84>
   1e598:	mov	r4, r0
   1e59c:	str	r0, [sp, #20]
   1e5a0:	mov	r0, r6
   1e5a4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1e5a8:	ldr	r3, [sp, #12]
   1e5ac:	ldrb	r3, [r3]
   1e5b0:	orr	r5, r5, r4
   1e5b4:	cmp	r3, #47	; 0x2f
   1e5b8:	cmpeq	r5, #0
   1e5bc:	beq	1e670 <__assert_fail@plt+0xc0ac>
   1e5c0:	ldr	r1, [sp, #12]
   1e5c4:	mov	r0, r9
   1e5c8:	bl	18470 <__assert_fail@plt+0x5eac>
   1e5cc:	str	sl, [r0, #28]
   1e5d0:	str	r7, [r0, #40]	; 0x28
   1e5d4:	ldr	r3, [sp, #16]
   1e5d8:	str	r3, [r0, #44]	; 0x2c
   1e5dc:	ldr	r3, [sp, #20]
   1e5e0:	str	r3, [r0, #48]	; 0x30
   1e5e4:	mov	r0, r8
   1e5e8:	add	sp, sp, #24
   1e5ec:	ldrd	r4, [sp]
   1e5f0:	ldrd	r6, [sp, #8]
   1e5f4:	ldrd	r8, [sp, #16]
   1e5f8:	ldr	sl, [sp, #24]
   1e5fc:	add	sp, sp, #28
   1e600:	pop	{pc}		; (ldr pc, [sp], #4)
   1e604:	mov	r7, #0
   1e608:	mov	r0, #1
   1e60c:	movw	sl, #52429	; 0xcccd
   1e610:	movt	sl, #15948	; 0x3e4c
   1e614:	b	1e528 <__assert_fail@plt+0xbf64>
   1e618:	mov	r7, #1
   1e61c:	mov	r0, r7
   1e620:	movw	sl, #39322	; 0x999a
   1e624:	movt	sl, #16025	; 0x3e99
   1e628:	b	1e528 <__assert_fail@plt+0xbf64>
   1e62c:	mov	r2, #5
   1e630:	movw	r1, #31112	; 0x7988
   1e634:	movt	r1, #4
   1e638:	mov	r0, #0
   1e63c:	bl	12084 <dcgettext@plt>
   1e640:	mov	r4, r0
   1e644:	movw	r3, #48748	; 0xbe6c
   1e648:	movt	r3, #5
   1e64c:	ldr	r2, [sp, #12]
   1e650:	ldr	r1, [r3, #72]	; 0x48
   1e654:	mov	r0, #0
   1e658:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1e65c:	mov	r3, r0
   1e660:	mov	r2, r4
   1e664:	mov	r1, #0
   1e668:	mov	r0, #1
   1e66c:	bl	121bc <error@plt>
   1e670:	mov	r2, #5
   1e674:	movw	r1, #31128	; 0x7998
   1e678:	movt	r1, #4
   1e67c:	mov	r0, #0
   1e680:	bl	12084 <dcgettext@plt>
   1e684:	ldr	r3, [sp, #12]
   1e688:	mov	r2, r0
   1e68c:	mov	r1, #0
   1e690:	mov	r0, r1
   1e694:	bl	121bc <error@plt>
   1e698:	mov	r7, #0
   1e69c:	movw	sl, #42048	; 0xa440
   1e6a0:	movt	sl, #16255	; 0x3f7f
   1e6a4:	b	1e5c0 <__assert_fail@plt+0xbffc>
   1e6a8:	cmp	r2, #0
   1e6ac:	beq	1ed10 <__assert_fail@plt+0xc74c>
   1e6b0:	ldr	ip, [r3]
   1e6b4:	ldr	ip, [r2, ip, lsl #2]
   1e6b8:	cmp	ip, #0
   1e6bc:	beq	1ed18 <__assert_fail@plt+0xc754>
   1e6c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e6c4:	strd	r6, [sp, #8]
   1e6c8:	strd	r8, [sp, #16]
   1e6cc:	strd	sl, [sp, #24]
   1e6d0:	str	lr, [sp, #32]
   1e6d4:	sub	sp, sp, #84	; 0x54
   1e6d8:	str	r2, [sp, #36]	; 0x24
   1e6dc:	str	r3, [sp, #28]
   1e6e0:	mov	r3, r1
   1e6e4:	mov	r7, r0
   1e6e8:	ldr	r4, [r1, #12]
   1e6ec:	str	r4, [sp, #32]
   1e6f0:	movw	r2, #31356	; 0x7a7c
   1e6f4:	movt	r2, #4
   1e6f8:	mov	r1, r4
   1e6fc:	mov	r0, r3
   1e700:	bl	18424 <__assert_fail@plt+0x5e60>
   1e704:	mov	fp, r0
   1e708:	mov	r3, #1
   1e70c:	strb	r3, [r0, #17]
   1e710:	strb	r3, [r0, #16]
   1e714:	mov	r3, #0
   1e718:	strb	r3, [r0, #18]
   1e71c:	strb	r3, [r0, #19]
   1e720:	str	r3, [r0, #144]	; 0x90
   1e724:	movw	sl, #18496	; 0x4840
   1e728:	movt	sl, #1
   1e72c:	movw	r3, #18412	; 0x47ec
   1e730:	movt	r3, #1
   1e734:	cmp	r4, sl
   1e738:	cmpne	r4, r3
   1e73c:	movne	sl, #1
   1e740:	moveq	sl, #0
   1e744:	movne	r3, #0
   1e748:	strbne	r3, [r0, #140]	; 0x8c
   1e74c:	bne	1e764 <__assert_fail@plt+0xc1a0>
   1e750:	movw	r3, #48748	; 0xbe6c
   1e754:	movt	r3, #5
   1e758:	mov	r2, #1
   1e75c:	strb	r2, [r3, #80]	; 0x50
   1e760:	strb	r2, [r0, #140]	; 0x8c
   1e764:	movw	r2, #18496	; 0x4840
   1e768:	movt	r2, #1
   1e76c:	movw	r3, #16828	; 0x41bc
   1e770:	movt	r3, #1
   1e774:	ldr	r1, [sp, #32]
   1e778:	cmp	r1, r3
   1e77c:	cmpne	r1, r2
   1e780:	moveq	r3, #1
   1e784:	movne	r3, #0
   1e788:	str	r3, [sp, #40]	; 0x28
   1e78c:	beq	1e80c <__assert_fail@plt+0xc248>
   1e790:	movw	r3, #46444	; 0xb56c
   1e794:	movt	r3, #5
   1e798:	ldr	r3, [r3]
   1e79c:	cmp	r3, #0
   1e7a0:	strne	r3, [fp, #144]	; 0x90
   1e7a4:	beq	1e930 <__assert_fail@plt+0xc36c>
   1e7a8:	mov	r3, #0
   1e7ac:	strb	r3, [fp, #40]	; 0x28
   1e7b0:	ldr	r3, [sp, #28]
   1e7b4:	ldr	r5, [r3]
   1e7b8:	str	r5, [sp, #48]	; 0x30
   1e7bc:	lsl	r3, r5, #2
   1e7c0:	ldr	r2, [sp, #36]	; 0x24
   1e7c4:	add	r6, r2, r3
   1e7c8:	ldr	r4, [r2, r5, lsl #2]
   1e7cc:	cmp	r4, #0
   1e7d0:	beq	1eb94 <__assert_fail@plt+0xc5d0>
   1e7d4:	str	r6, [sp, #52]	; 0x34
   1e7d8:	sub	r9, r6, r6
   1e7dc:	mov	r7, r6
   1e7e0:	mov	r3, #0
   1e7e4:	mov	r2, r3
   1e7e8:	str	r3, [sp, #24]
   1e7ec:	mov	r8, r3
   1e7f0:	movw	r3, #31820	; 0x7c4c
   1e7f4:	movt	r3, #4
   1e7f8:	str	r3, [sp, #20]
   1e7fc:	add	r9, r9, #4
   1e800:	str	fp, [sp, #44]	; 0x2c
   1e804:	ldr	fp, [sp, #40]	; 0x28
   1e808:	b	1e9b8 <__assert_fail@plt+0xc3f4>
   1e80c:	movw	r3, #48748	; 0xbe6c
   1e810:	movt	r3, #5
   1e814:	mov	r2, #0
   1e818:	strb	r2, [r3, #14]
   1e81c:	movw	r0, #31792	; 0x7c30
   1e820:	movt	r0, #4
   1e824:	bl	121f8 <getenv@plt>
   1e828:	subs	r4, r0, #0
   1e82c:	beq	1e7a8 <__assert_fail@plt+0xc1e4>
   1e830:	add	r3, sp, #60	; 0x3c
   1e834:	str	r3, [sp]
   1e838:	add	r3, sp, #56	; 0x38
   1e83c:	mov	r2, #1
   1e840:	movw	r1, #20456	; 0x4fe8
   1e844:	movt	r1, #4
   1e848:	mov	r0, r4
   1e84c:	bl	22774 <__assert_fail@plt+0x101b0>
   1e850:	movw	r5, #20456	; 0x4fe8
   1e854:	movt	r5, #4
   1e858:	add	r6, sp, #60	; 0x3c
   1e85c:	b	1e894 <__assert_fail@plt+0xc2d0>
   1e860:	ldr	r3, [sp, #56]	; 0x38
   1e864:	add	r0, r4, r3
   1e868:	ldrb	r3, [r4, r3]
   1e86c:	cmp	r3, #47	; 0x2f
   1e870:	bne	1e8e0 <__assert_fail@plt+0xc31c>
   1e874:	str	r6, [sp]
   1e878:	add	r3, sp, #56	; 0x38
   1e87c:	mov	r2, #0
   1e880:	mov	r1, r5
   1e884:	mov	r0, r4
   1e888:	bl	22774 <__assert_fail@plt+0x101b0>
   1e88c:	cmp	r0, #0
   1e890:	beq	1e7a8 <__assert_fail@plt+0xc1e4>
   1e894:	ldr	r1, [sp, #60]	; 0x3c
   1e898:	cmp	r1, #0
   1e89c:	beq	1e8b8 <__assert_fail@plt+0xc2f4>
   1e8a0:	cmp	r1, #1
   1e8a4:	bne	1e860 <__assert_fail@plt+0xc29c>
   1e8a8:	ldr	r3, [sp, #56]	; 0x38
   1e8ac:	ldrb	r3, [r4, r3]
   1e8b0:	cmp	r3, #46	; 0x2e
   1e8b4:	bne	1e860 <__assert_fail@plt+0xc29c>
   1e8b8:	mov	r2, #5
   1e8bc:	movw	r1, #31380	; 0x7a94
   1e8c0:	movt	r1, #4
   1e8c4:	mov	r0, #0
   1e8c8:	bl	12084 <dcgettext@plt>
   1e8cc:	mov	r3, r7
   1e8d0:	mov	r2, r0
   1e8d4:	mov	r1, #0
   1e8d8:	mov	r0, #1
   1e8dc:	bl	121bc <error@plt>
   1e8e0:	bl	11fdc <strndup@plt>
   1e8e4:	mov	r5, r0
   1e8e8:	mov	r2, #5
   1e8ec:	movw	r1, #31632	; 0x7b90
   1e8f0:	movt	r1, #4
   1e8f4:	mov	r0, #0
   1e8f8:	bl	12084 <dcgettext@plt>
   1e8fc:	mov	r6, r0
   1e900:	cmp	r5, #0
   1e904:	ldreq	r5, [sp, #56]	; 0x38
   1e908:	addeq	r5, r4, r5
   1e90c:	mov	r1, r5
   1e910:	mov	r0, #0
   1e914:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1e918:	str	r7, [sp]
   1e91c:	mov	r3, r0
   1e920:	mov	r2, r6
   1e924:	mov	r1, #0
   1e928:	mov	r0, #1
   1e92c:	bl	121bc <error@plt>
   1e930:	ldr	r3, [pc, #1000]	; 1ed20 <__assert_fail@plt+0xc75c>
   1e934:	movw	r2, #2937	; 0xb79
   1e938:	movw	r1, #30744	; 0x7818
   1e93c:	movt	r1, #4
   1e940:	movw	r0, #31800	; 0x7c38
   1e944:	movt	r0, #4
   1e948:	bl	125c4 <__assert_fail@plt>
   1e94c:	ldrb	r3, [r4, #1]
   1e950:	cmp	r3, #0
   1e954:	movne	r2, #0
   1e958:	cmp	r2, #0
   1e95c:	beq	1e9d8 <__assert_fail@plt+0xc414>
   1e960:	ldr	fp, [sp, #44]	; 0x2c
   1e964:	mov	r3, #1
   1e968:	strb	r3, [fp, #40]	; 0x28
   1e96c:	b	1ea1c <__assert_fail@plt+0xc458>
   1e970:	mov	r2, #5
   1e974:	movw	r1, #31824	; 0x7c50
   1e978:	movt	r1, #4
   1e97c:	mov	r0, #0
   1e980:	bl	12084 <dcgettext@plt>
   1e984:	mov	r2, r0
   1e988:	mov	r1, #0
   1e98c:	mov	r0, #1
   1e990:	bl	121bc <error@plt>
   1e994:	mov	r2, #0
   1e998:	b	1e9a4 <__assert_fail@plt+0xc3e0>
   1e99c:	str	r4, [sp, #24]
   1e9a0:	mov	r2, #1
   1e9a4:	add	r5, r5, #1
   1e9a8:	add	r6, r6, r9
   1e9ac:	ldr	r4, [r7, #4]!
   1e9b0:	cmp	r4, #0
   1e9b4:	beq	1eb9c <__assert_fail@plt+0xc5d8>
   1e9b8:	ldrb	r3, [r4]
   1e9bc:	cmp	r3, #59	; 0x3b
   1e9c0:	beq	1ea0c <__assert_fail@plt+0xc448>
   1e9c4:	cmp	r3, #43	; 0x2b
   1e9c8:	movne	r3, #0
   1e9cc:	andeq	r3, sl, #1
   1e9d0:	cmp	r3, #0
   1e9d4:	bne	1e94c <__assert_fail@plt+0xc388>
   1e9d8:	ldr	r1, [sp, #20]
   1e9dc:	mov	r0, r4
   1e9e0:	bl	25d84 <__assert_fail@plt+0x137c0>
   1e9e4:	cmp	r0, #0
   1e9e8:	beq	1e994 <__assert_fail@plt+0xc3d0>
   1e9ec:	add	r8, r8, #1
   1e9f0:	cmp	r5, #0
   1e9f4:	bne	1e99c <__assert_fail@plt+0xc3d8>
   1e9f8:	cmp	fp, #0
   1e9fc:	bne	1e970 <__assert_fail@plt+0xc3ac>
   1ea00:	str	r4, [sp, #24]
   1ea04:	mov	r2, #1
   1ea08:	b	1e9a4 <__assert_fail@plt+0xc3e0>
   1ea0c:	ldrb	r3, [r4, #1]
   1ea10:	cmp	r3, #0
   1ea14:	bne	1e9d8 <__assert_fail@plt+0xc414>
   1ea18:	ldr	fp, [sp, #44]	; 0x2c
   1ea1c:	ldr	r3, [sp, #48]	; 0x30
   1ea20:	cmp	r3, r5
   1ea24:	beq	1eba0 <__assert_fail@plt+0xc5dc>
   1ea28:	ldr	r3, [r6]
   1ea2c:	cmp	r3, #0
   1ea30:	beq	1eba0 <__assert_fail@plt+0xc5dc>
   1ea34:	ldrb	r3, [fp, #40]	; 0x28
   1ea38:	cmp	r3, #0
   1ea3c:	beq	1ea80 <__assert_fail@plt+0xc4bc>
   1ea40:	movw	r2, #16828	; 0x41bc
   1ea44:	movt	r2, #1
   1ea48:	movw	r4, #33672	; 0x8388
   1ea4c:	movt	r4, #4
   1ea50:	movw	r3, #25528	; 0x63b8
   1ea54:	movt	r3, #4
   1ea58:	ldr	r1, [sp, #32]
   1ea5c:	cmp	r1, r2
   1ea60:	movne	r4, r3
   1ea64:	cmp	r8, #1
   1ea68:	bgt	1ebb8 <__assert_fail@plt+0xc5f4>
   1ea6c:	ldr	r8, [sp, #24]
   1ea70:	mov	r0, r8
   1ea74:	bl	122d0 <strlen@plt>
   1ea78:	cmp	r0, #2
   1ea7c:	bne	1ebe0 <__assert_fail@plt+0xc61c>
   1ea80:	add	r9, fp, #44	; 0x2c
   1ea84:	mov	r1, #2048	; 0x800
   1ea88:	mov	r0, r9
   1ea8c:	bl	20b5c <__assert_fail@plt+0xe598>
   1ea90:	sub	r0, r0, #1
   1ea94:	cmp	r0, #1
   1ea98:	bls	1ec70 <__assert_fail@plt+0xc6ac>
   1ea9c:	add	r4, fp, #40	; 0x28
   1eaa0:	mov	r0, r9
   1eaa4:	bl	20c2c <__assert_fail@plt+0xe668>
   1eaa8:	movw	r3, #22788	; 0x5904
   1eaac:	movt	r3, #1
   1eab0:	str	r3, [fp, #76]	; 0x4c
   1eab4:	ldrb	r3, [fp, #40]	; 0x28
   1eab8:	cmp	r3, #0
   1eabc:	beq	1ec94 <__assert_fail@plt+0xc6d0>
   1eac0:	mov	r3, #0
   1eac4:	str	r3, [fp, #132]	; 0x84
   1eac8:	str	r3, [fp, #68]	; 0x44
   1eacc:	str	r3, [fp, #64]	; 0x40
   1ead0:	str	r3, [fp, #80]	; 0x50
   1ead4:	str	r3, [fp, #84]	; 0x54
   1ead8:	ldr	r7, [sp, #48]	; 0x30
   1eadc:	sub	r3, r5, r7
   1eae0:	sub	r3, r3, #1
   1eae4:	str	r3, [fp, #72]	; 0x48
   1eae8:	add	fp, fp, #88	; 0x58
   1eaec:	mov	r2, r4
   1eaf0:	mov	r1, fp
   1eaf4:	mov	r0, r9
   1eaf8:	bl	20c54 <__assert_fail@plt+0xe690>
   1eafc:	sub	r3, r5, #1
   1eb00:	cmp	r7, r3
   1eb04:	bge	1eb60 <__assert_fail@plt+0xc59c>
   1eb08:	ldr	r3, [sp, #36]	; 0x24
   1eb0c:	sub	r4, r3, #4
   1eb10:	add	r4, r4, r5, lsl #2
   1eb14:	mov	sl, #1
   1eb18:	mov	r8, #0
   1eb1c:	str	r5, [sp, #20]
   1eb20:	mov	r5, r9
   1eb24:	ldr	r7, [sp, #52]	; 0x34
   1eb28:	ldr	r9, [r7], #4
   1eb2c:	mov	r0, r9
   1eb30:	bl	122d0 <strlen@plt>
   1eb34:	str	sl, [sp, #8]
   1eb38:	str	r8, [sp, #4]
   1eb3c:	str	r8, [sp]
   1eb40:	add	r3, r0, #1
   1eb44:	mov	r2, r9
   1eb48:	mov	r1, fp
   1eb4c:	mov	r0, r5
   1eb50:	bl	2034c <__assert_fail@plt+0xdd88>
   1eb54:	cmp	r7, r4
   1eb58:	bne	1eb28 <__assert_fail@plt+0xc564>
   1eb5c:	ldr	r5, [sp, #20]
   1eb60:	ldr	r3, [r6]
   1eb64:	cmp	r3, #0
   1eb68:	addne	r5, r5, #1
   1eb6c:	ldr	r3, [sp, #28]
   1eb70:	str	r5, [r3]
   1eb74:	mov	r0, #1
   1eb78:	add	sp, sp, #84	; 0x54
   1eb7c:	ldrd	r4, [sp]
   1eb80:	ldrd	r6, [sp, #8]
   1eb84:	ldrd	r8, [sp, #16]
   1eb88:	ldrd	sl, [sp, #24]
   1eb8c:	add	sp, sp, #32
   1eb90:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb94:	ldr	r5, [sp, #48]	; 0x30
   1eb98:	b	1eba0 <__assert_fail@plt+0xc5dc>
   1eb9c:	ldr	fp, [sp, #44]	; 0x2c
   1eba0:	ldr	r3, [sp, #28]
   1eba4:	str	r5, [r3]
   1eba8:	mov	r0, fp
   1ebac:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   1ebb0:	mov	r0, #0
   1ebb4:	b	1eb78 <__assert_fail@plt+0xc5b4>
   1ebb8:	mov	r2, #5
   1ebbc:	movw	r1, #31940	; 0x7cc4
   1ebc0:	movt	r1, #4
   1ebc4:	mov	r0, #0
   1ebc8:	bl	12084 <dcgettext@plt>
   1ebcc:	mov	r3, r4
   1ebd0:	mov	r2, r0
   1ebd4:	mov	r1, #0
   1ebd8:	mov	r0, #1
   1ebdc:	bl	121bc <error@plt>
   1ebe0:	mov	r3, r4
   1ebe4:	movw	r2, #31996	; 0x7cfc
   1ebe8:	movt	r2, #4
   1ebec:	mov	r1, #19
   1ebf0:	add	r0, sp, #60	; 0x3c
   1ebf4:	bl	12330 <snprintf@plt>
   1ebf8:	mov	r2, #5
   1ebfc:	movw	r1, #32016	; 0x7d10
   1ec00:	movt	r1, #4
   1ec04:	mov	r0, #0
   1ec08:	bl	12084 <dcgettext@plt>
   1ec0c:	mov	r5, r0
   1ec10:	movw	r4, #48748	; 0xbe6c
   1ec14:	movt	r4, #5
   1ec18:	add	r2, sp, #60	; 0x3c
   1ec1c:	ldr	r1, [r4, #72]	; 0x48
   1ec20:	mov	r0, #0
   1ec24:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1ec28:	mov	r6, r0
   1ec2c:	movw	r2, #31820	; 0x7c4c
   1ec30:	movt	r2, #4
   1ec34:	ldr	r1, [r4, #72]	; 0x48
   1ec38:	mov	r0, #1
   1ec3c:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1ec40:	mov	r7, r0
   1ec44:	mov	r2, r8
   1ec48:	ldr	r1, [r4, #72]	; 0x48
   1ec4c:	mov	r0, #2
   1ec50:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1ec54:	str	r0, [sp, #4]
   1ec58:	str	r7, [sp]
   1ec5c:	mov	r3, r6
   1ec60:	mov	r2, r5
   1ec64:	mov	r1, #0
   1ec68:	mov	r0, #1
   1ec6c:	bl	121bc <error@plt>
   1ec70:	mov	r2, #5
   1ec74:	movw	r1, #32076	; 0x7d4c
   1ec78:	movt	r1, #4
   1ec7c:	mov	r0, #0
   1ec80:	bl	12084 <dcgettext@plt>
   1ec84:	mov	r2, r0
   1ec88:	mov	r1, #0
   1ec8c:	mov	r0, #1
   1ec90:	bl	121bc <error@plt>
   1ec94:	ldr	r3, [sp, #48]	; 0x30
   1ec98:	sub	r0, r5, r3
   1ec9c:	str	r0, [fp, #136]	; 0x88
   1eca0:	movw	r3, #31820	; 0x7c4c
   1eca4:	movt	r3, #4
   1eca8:	str	r3, [fp, #68]	; 0x44
   1ecac:	mov	r3, #2
   1ecb0:	str	r3, [fp, #64]	; 0x40
   1ecb4:	mov	r3, #0
   1ecb8:	str	r3, [fp, #80]	; 0x50
   1ecbc:	str	r3, [fp, #84]	; 0x54
   1ecc0:	lsl	r0, r0, #2
   1ecc4:	bl	2e348 <__assert_fail@plt+0x1bd84>
   1ecc8:	str	r0, [fp, #132]	; 0x84
   1eccc:	mov	r2, r4
   1ecd0:	add	r1, fp, #88	; 0x58
   1ecd4:	mov	r0, r9
   1ecd8:	bl	20c54 <__assert_fail@plt+0xe690>
   1ecdc:	ldr	r3, [fp, #136]	; 0x88
   1ece0:	cmp	r3, #0
   1ece4:	ble	1eb60 <__assert_fail@plt+0xc59c>
   1ece8:	mov	r3, #0
   1ecec:	ldr	r2, [sp, #52]	; 0x34
   1ecf0:	ldr	r0, [r2], #4
   1ecf4:	ldr	r1, [fp, #132]	; 0x84
   1ecf8:	str	r0, [r1, r3, lsl #2]
   1ecfc:	add	r3, r3, #1
   1ed00:	ldr	r1, [fp, #136]	; 0x88
   1ed04:	cmp	r1, r3
   1ed08:	bgt	1ecf0 <__assert_fail@plt+0xc72c>
   1ed0c:	b	1eb60 <__assert_fail@plt+0xc59c>
   1ed10:	mov	r0, #0
   1ed14:	bx	lr
   1ed18:	mov	r0, #0
   1ed1c:	bx	lr
   1ed20:	muleq	r4, r0, r3
   1ed24:	str	r4, [sp, #-8]!
   1ed28:	str	lr, [sp, #4]
   1ed2c:	mov	r3, r2
   1ed30:	mov	r2, r1
   1ed34:	mov	r1, r0
   1ed38:	movw	r0, #19296	; 0x4b60
   1ed3c:	movt	r0, #4
   1ed40:	bl	1e6a8 <__assert_fail@plt+0xc0e4>
   1ed44:	ldr	r4, [sp]
   1ed48:	add	sp, sp, #4
   1ed4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed50:	str	r4, [sp, #-8]!
   1ed54:	str	lr, [sp, #4]
   1ed58:	mov	r3, r2
   1ed5c:	mov	r2, r1
   1ed60:	mov	r1, r0
   1ed64:	movw	r0, #32120	; 0x7d78
   1ed68:	movt	r0, #4
   1ed6c:	bl	1e6a8 <__assert_fail@plt+0xc0e4>
   1ed70:	ldr	r4, [sp]
   1ed74:	add	sp, sp, #4
   1ed78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed7c:	str	r4, [sp, #-8]!
   1ed80:	str	lr, [sp, #4]
   1ed84:	mov	r3, r2
   1ed88:	mov	r2, r1
   1ed8c:	mov	r1, r0
   1ed90:	movw	r0, #32124	; 0x7d7c
   1ed94:	movt	r0, #4
   1ed98:	bl	1e6a8 <__assert_fail@plt+0xc0e4>
   1ed9c:	ldr	r4, [sp]
   1eda0:	add	sp, sp, #4
   1eda4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eda8:	str	r4, [sp, #-8]!
   1edac:	str	lr, [sp, #4]
   1edb0:	mov	r3, r2
   1edb4:	mov	r2, r1
   1edb8:	mov	r1, r0
   1edbc:	movw	r0, #32136	; 0x7d88
   1edc0:	movt	r0, #4
   1edc4:	bl	1e6a8 <__assert_fail@plt+0xc0e4>
   1edc8:	ldr	r4, [sp]
   1edcc:	add	sp, sp, #4
   1edd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1edd4:	str	r4, [sp, #-8]!
   1edd8:	str	lr, [sp, #4]
   1eddc:	bl	16b94 <__assert_fail@plt+0x45d0>
   1ede0:	movw	r3, #14696	; 0x3968
   1ede4:	movt	r3, #1
   1ede8:	str	r3, [r0]
   1edec:	mov	r3, #3
   1edf0:	str	r3, [r0, #8]
   1edf4:	mov	r3, #2
   1edf8:	str	r3, [r0, #12]
   1edfc:	mov	r3, #0
   1ee00:	strb	r3, [r0, #19]
   1ee04:	strb	r3, [r0, #18]
   1ee08:	mov	r0, #1
   1ee0c:	ldr	r4, [sp]
   1ee10:	add	sp, sp, #4
   1ee14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee18:	str	r4, [sp, #-8]!
   1ee1c:	str	lr, [sp, #4]
   1ee20:	bl	16b94 <__assert_fail@plt+0x45d0>
   1ee24:	movw	r3, #14616	; 0x3918
   1ee28:	movt	r3, #1
   1ee2c:	str	r3, [r0]
   1ee30:	mov	r3, #3
   1ee34:	str	r3, [r0, #8]
   1ee38:	str	r3, [r0, #12]
   1ee3c:	mov	r3, #0
   1ee40:	strb	r3, [r0, #19]
   1ee44:	strb	r3, [r0, #18]
   1ee48:	mov	r0, #1
   1ee4c:	ldr	r4, [sp]
   1ee50:	add	sp, sp, #4
   1ee54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee58:	str	r4, [sp, #-8]!
   1ee5c:	str	lr, [sp, #4]
   1ee60:	bl	16b94 <__assert_fail@plt+0x45d0>
   1ee64:	mov	r3, r0
   1ee68:	movw	r2, #15752	; 0x3d88
   1ee6c:	movt	r2, #1
   1ee70:	str	r2, [r0]
   1ee74:	mov	r2, #3
   1ee78:	str	r2, [r0, #8]
   1ee7c:	mov	r0, #1
   1ee80:	str	r0, [r3, #12]
   1ee84:	mov	r2, #0
   1ee88:	strb	r2, [r3, #19]
   1ee8c:	strb	r2, [r3, #18]
   1ee90:	mov	r2, #1065353216	; 0x3f800000
   1ee94:	str	r2, [r3, #28]
   1ee98:	ldr	r4, [sp]
   1ee9c:	add	sp, sp, #4
   1eea0:	pop	{pc}		; (ldr pc, [sp], #4)
   1eea4:	str	r4, [sp, #-8]!
   1eea8:	str	lr, [sp, #4]
   1eeac:	bl	16b94 <__assert_fail@plt+0x45d0>
   1eeb0:	movw	r3, #15604	; 0x3cf4
   1eeb4:	movt	r3, #1
   1eeb8:	str	r3, [r0]
   1eebc:	mov	r3, #5
   1eec0:	str	r3, [r0, #8]
   1eec4:	mov	r3, #0
   1eec8:	str	r3, [r0, #12]
   1eecc:	strb	r3, [r0, #19]
   1eed0:	strb	r3, [r0, #18]
   1eed4:	mov	r0, #1
   1eed8:	ldr	r4, [sp]
   1eedc:	add	sp, sp, #4
   1eee0:	pop	{pc}		; (ldr pc, [sp], #4)
   1eee4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1eee8:	strd	r6, [sp, #8]
   1eeec:	str	lr, [sp, #16]
   1eef0:	sub	sp, sp, #20
   1eef4:	mov	r5, r0
   1eef8:	mov	r0, r1
   1eefc:	mov	r1, r2
   1ef00:	add	r2, sp, #12
   1ef04:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1ef08:	subs	r4, r0, #0
   1ef0c:	bne	1ef28 <__assert_fail@plt+0xc964>
   1ef10:	mov	r0, r4
   1ef14:	add	sp, sp, #20
   1ef18:	ldrd	r4, [sp]
   1ef1c:	ldrd	r6, [sp, #8]
   1ef20:	add	sp, sp, #16
   1ef24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef28:	ldr	r0, [sp, #12]
   1ef2c:	bl	125ac <getgrnam@plt>
   1ef30:	mov	r6, r0
   1ef34:	bl	11eb0 <endgrent@plt>
   1ef38:	cmp	r6, #0
   1ef3c:	beq	1ef74 <__assert_fail@plt+0xc9b0>
   1ef40:	ldr	r6, [r6, #8]
   1ef44:	ldr	r1, [sp, #12]
   1ef48:	mov	r0, r5
   1ef4c:	bl	18470 <__assert_fail@plt+0x5eac>
   1ef50:	str	r6, [r0, #40]	; 0x28
   1ef54:	ldrd	r2, [r0, #48]	; 0x30
   1ef58:	cmp	r3, #0
   1ef5c:	cmpeq	r2, #100	; 0x64
   1ef60:	vldr	s15, [pc, #292]	; 1f08c <__assert_fail@plt+0xcac8>
   1ef64:	vldr	s14, [pc, #292]	; 1f090 <__assert_fail@plt+0xcacc>
   1ef68:	vmovcs.f32	s15, s14
   1ef6c:	vstr	s15, [r0, #28]
   1ef70:	b	1ef10 <__assert_fail@plt+0xc94c>
   1ef74:	ldr	r6, [sp, #12]
   1ef78:	movw	r1, #30536	; 0x7748
   1ef7c:	movt	r1, #4
   1ef80:	mov	r0, r6
   1ef84:	bl	125b8 <strspn@plt>
   1ef88:	subs	r7, r0, #0
   1ef8c:	beq	1f018 <__assert_fail@plt+0xca54>
   1ef90:	ldrb	r3, [r6, r7]
   1ef94:	cmp	r3, #0
   1ef98:	bne	1efb8 <__assert_fail@plt+0xc9f4>
   1ef9c:	movw	r3, #48748	; 0xbe6c
   1efa0:	movt	r3, #5
   1efa4:	ldr	r1, [r3, #72]	; 0x48
   1efa8:	mov	r0, r6
   1efac:	bl	22630 <__assert_fail@plt+0x1006c>
   1efb0:	mov	r6, r0
   1efb4:	b	1ef44 <__assert_fail@plt+0xc980>
   1efb8:	mov	r2, #5
   1efbc:	movw	r1, #32144	; 0x7d90
   1efc0:	movt	r1, #4
   1efc4:	mov	r0, #0
   1efc8:	bl	12084 <dcgettext@plt>
   1efcc:	mov	r5, r0
   1efd0:	movw	r4, #48748	; 0xbe6c
   1efd4:	movt	r4, #5
   1efd8:	ldr	r2, [sp, #12]
   1efdc:	ldr	r1, [r4, #72]	; 0x48
   1efe0:	mov	r0, #0
   1efe4:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1efe8:	mov	r6, r0
   1efec:	ldr	r2, [sp, #12]
   1eff0:	add	r2, r2, r7
   1eff4:	ldr	r1, [r4, #72]	; 0x48
   1eff8:	mov	r0, #1
   1effc:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1f000:	str	r0, [sp]
   1f004:	mov	r3, r6
   1f008:	mov	r2, r5
   1f00c:	mov	r1, #0
   1f010:	mov	r0, #1
   1f014:	bl	121bc <error@plt>
   1f018:	ldrb	r3, [r6]
   1f01c:	cmp	r3, #0
   1f020:	beq	1f068 <__assert_fail@plt+0xcaa4>
   1f024:	mov	r2, #5
   1f028:	movw	r1, #32272	; 0x7e10
   1f02c:	movt	r1, #4
   1f030:	mov	r0, #0
   1f034:	bl	12084 <dcgettext@plt>
   1f038:	mov	r4, r0
   1f03c:	movw	r3, #48748	; 0xbe6c
   1f040:	movt	r3, #5
   1f044:	ldr	r2, [sp, #12]
   1f048:	ldr	r1, [r3, #72]	; 0x48
   1f04c:	mov	r0, #0
   1f050:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1f054:	mov	r3, r0
   1f058:	mov	r2, r4
   1f05c:	mov	r1, #0
   1f060:	mov	r0, #1
   1f064:	bl	121bc <error@plt>
   1f068:	mov	r2, #5
   1f06c:	movw	r1, #32312	; 0x7e38
   1f070:	movt	r1, #4
   1f074:	mov	r0, #0
   1f078:	bl	12084 <dcgettext@plt>
   1f07c:	mov	r2, r0
   1f080:	mov	r1, #0
   1f084:	mov	r0, #1
   1f088:	bl	121bc <error@plt>
   1f08c:	svccc	0x007d70a4
   1f090:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1f094:	movw	r3, #48748	; 0xbe6c
   1f098:	movt	r3, #5
   1f09c:	ldrb	r3, [r3, #36]	; 0x24
   1f0a0:	cmp	r3, #0
   1f0a4:	beq	1f0b0 <__assert_fail@plt+0xcaec>
   1f0a8:	mov	r0, #1
   1f0ac:	bx	lr
   1f0b0:	str	r4, [sp, #-8]!
   1f0b4:	str	lr, [sp, #4]
   1f0b8:	movw	r4, #48748	; 0xbe6c
   1f0bc:	movt	r4, #5
   1f0c0:	ldr	r3, [r4, #28]
   1f0c4:	add	r3, r3, #86016	; 0x15000
   1f0c8:	add	r3, r3, #384	; 0x180
   1f0cc:	str	r3, [r4, #28]
   1f0d0:	mov	r3, #0
   1f0d4:	str	r3, [r4, #32]
   1f0d8:	add	r0, r4, #28
   1f0dc:	bl	1224c <localtime@plt>
   1f0e0:	ldr	r3, [r4, #28]
   1f0e4:	cmp	r0, #0
   1f0e8:	beq	1f130 <__assert_fail@plt+0xcb6c>
   1f0ec:	ldr	r1, [r0, #4]
   1f0f0:	rsb	r1, r1, r1, lsl #4
   1f0f4:	ldr	r2, [r0]
   1f0f8:	add	r2, r2, r1, lsl #2
   1f0fc:	ldr	r1, [r0, #8]
   1f100:	mov	r0, #3600	; 0xe10
   1f104:	mla	r1, r0, r1, r2
   1f108:	movw	r2, #48748	; 0xbe6c
   1f10c:	movt	r2, #5
   1f110:	sub	r3, r3, r1
   1f114:	str	r3, [r2, #28]
   1f118:	mov	r3, #1
   1f11c:	strb	r3, [r2, #36]	; 0x24
   1f120:	mov	r0, #1
   1f124:	ldr	r4, [sp]
   1f128:	add	sp, sp, #4
   1f12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f130:	movw	r1, #17671	; 0x4507
   1f134:	movt	r1, #49710	; 0xc22e
   1f138:	smull	r2, r1, r1, r3
   1f13c:	add	r2, r1, r3
   1f140:	asr	r1, r3, #31
   1f144:	rsb	r1, r1, r2, asr #16
   1f148:	movw	r2, #20864	; 0x5180
   1f14c:	movt	r2, #1
   1f150:	mls	r1, r2, r1, r3
   1f154:	b	1f108 <__assert_fail@plt+0xcb44>
   1f158:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f15c:	strd	r6, [sp, #8]
   1f160:	strd	r8, [sp, #16]
   1f164:	str	lr, [sp, #24]
   1f168:	sub	sp, sp, #52	; 0x34
   1f16c:	mov	r9, r0
   1f170:	mov	r5, r1
   1f174:	mov	r4, r2
   1f178:	mov	r2, #5
   1f17c:	movw	r1, #32372	; 0x7e74
   1f180:	movt	r1, #4
   1f184:	mov	r0, #0
   1f188:	bl	12084 <dcgettext@plt>
   1f18c:	mov	r7, r0
   1f190:	ldr	r8, [r4]
   1f194:	add	r2, sp, #24
   1f198:	mov	r1, r4
   1f19c:	mov	r0, r5
   1f1a0:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1f1a4:	subs	r5, r0, #0
   1f1a8:	bne	1f1c8 <__assert_fail@plt+0xcc04>
   1f1ac:	mov	r0, r5
   1f1b0:	add	sp, sp, #52	; 0x34
   1f1b4:	ldrd	r4, [sp]
   1f1b8:	ldrd	r6, [sp, #8]
   1f1bc:	ldrd	r8, [sp, #16]
   1f1c0:	add	sp, sp, #24
   1f1c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1c8:	ldr	r6, [sp, #24]
   1f1cc:	movw	r1, #48748	; 0xbe6c
   1f1d0:	movt	r1, #5
   1f1d4:	ldrd	r2, [r1, #28]
   1f1d8:	strd	r2, [sp, #16]
   1f1dc:	ldr	r5, [r1, #28]
   1f1e0:	add	r1, sp, #28
   1f1e4:	add	r0, sp, #24
   1f1e8:	bl	1c04c <__assert_fail@plt+0x9a88>
   1f1ec:	cmp	r0, #0
   1f1f0:	beq	1f200 <__assert_fail@plt+0xcc3c>
   1f1f4:	ldr	r3, [sp, #28]
   1f1f8:	cmp	r3, #1
   1f1fc:	beq	1f2d8 <__assert_fail@plt+0xcd14>
   1f200:	str	r6, [sp, #24]
   1f204:	str	r5, [sp, #16]
   1f208:	str	r7, [sp]
   1f20c:	vldr	d0, [pc, #396]	; 1f3a0 <__assert_fail@plt+0xcddc>
   1f210:	add	r3, sp, #16
   1f214:	ldm	r3, {r2, r3}
   1f218:	add	r1, sp, #32
   1f21c:	mov	r0, r6
   1f220:	bl	1d264 <__assert_fail@plt+0xaca0>
   1f224:	subs	r5, r0, #0
   1f228:	streq	r8, [r4]
   1f22c:	beq	1f1ac <__assert_fail@plt+0xcbe8>
   1f230:	mov	r1, r6
   1f234:	mov	r0, r9
   1f238:	bl	18470 <__assert_fail@plt+0x5eac>
   1f23c:	mov	r4, r0
   1f240:	ldrd	r2, [sp, #32]
   1f244:	strd	r2, [r0, #40]	; 0x28
   1f248:	ldrd	r2, [sp, #40]	; 0x28
   1f24c:	strd	r2, [r0, #48]	; 0x30
   1f250:	ldr	r0, [sp, #40]	; 0x28
   1f254:	bl	1bf10 <__assert_fail@plt+0x994c>
   1f258:	vstr	s0, [r4, #28]
   1f25c:	movw	r3, #48748	; 0xbe6c
   1f260:	movt	r3, #5
   1f264:	ldr	r3, [r3, #44]	; 0x2c
   1f268:	tst	r3, #1
   1f26c:	beq	1f1ac <__assert_fail@plt+0xcbe8>
   1f270:	movw	r6, #46408	; 0xb548
   1f274:	movt	r6, #5
   1f278:	ldr	r2, [r4, #4]
   1f27c:	movw	r1, #30884	; 0x78a4
   1f280:	movt	r1, #4
   1f284:	ldr	r0, [r6]
   1f288:	bl	1230c <fprintf@plt>
   1f28c:	ldr	r0, [r6]
   1f290:	ldr	r1, [sp, #36]	; 0x24
   1f294:	cmp	r1, #0
   1f298:	beq	1f2e8 <__assert_fail@plt+0xcd24>
   1f29c:	cmp	r1, #1
   1f2a0:	beq	1f38c <__assert_fail@plt+0xcdc8>
   1f2a4:	movw	r2, #33044	; 0x8114
   1f2a8:	movt	r2, #4
   1f2ac:	movw	r3, #30876	; 0x789c
   1f2b0:	movt	r3, #4
   1f2b4:	cmp	r1, #2
   1f2b8:	moveq	r2, r3
   1f2bc:	movw	r3, #30864	; 0x7890
   1f2c0:	movt	r3, #4
   1f2c4:	movw	ip, #32368	; 0x7e70
   1f2c8:	movt	ip, #4
   1f2cc:	cmp	r1, #2
   1f2d0:	moveq	r3, ip
   1f2d4:	b	1f2f8 <__assert_fail@plt+0xcd34>
   1f2d8:	add	r5, r5, #86016	; 0x15000
   1f2dc:	add	r5, r5, #380	; 0x17c
   1f2e0:	add	r5, r5, #3
   1f2e4:	b	1f200 <__assert_fail@plt+0xcc3c>
   1f2e8:	movw	r2, #30868	; 0x7894
   1f2ec:	movt	r2, #4
   1f2f0:	movw	r3, #30872	; 0x7898
   1f2f4:	movt	r3, #4
   1f2f8:	movw	r1, #30900	; 0x78b4
   1f2fc:	movt	r1, #4
   1f300:	bl	1230c <fprintf@plt>
   1f304:	ldr	r6, [r4, #48]	; 0x30
   1f308:	str	r6, [sp, #12]
   1f30c:	movw	r3, #46408	; 0xb548
   1f310:	movt	r3, #5
   1f314:	ldr	r7, [r3]
   1f318:	add	r0, sp, #12
   1f31c:	bl	12078 <ctime@plt>
   1f320:	str	r0, [sp]
   1f324:	mov	r2, r6
   1f328:	asr	r3, r6, #31
   1f32c:	movw	r1, #32460	; 0x7ecc
   1f330:	movt	r1, #4
   1f334:	mov	r0, r7
   1f338:	bl	1230c <fprintf@plt>
   1f33c:	ldr	r3, [sp, #36]	; 0x24
   1f340:	cmp	r3, #2
   1f344:	bne	1f1ac <__assert_fail@plt+0xcbe8>
   1f348:	ldr	r4, [r4, #48]	; 0x30
   1f34c:	add	r4, r4, #86016	; 0x15000
   1f350:	add	r4, r4, #384	; 0x180
   1f354:	str	r4, [sp, #12]
   1f358:	movw	r3, #46408	; 0xb548
   1f35c:	movt	r3, #5
   1f360:	ldr	r6, [r3]
   1f364:	add	r0, sp, #12
   1f368:	bl	12078 <ctime@plt>
   1f36c:	str	r0, [sp]
   1f370:	mov	r2, r4
   1f374:	asr	r3, r4, #31
   1f378:	movw	r1, #32440	; 0x7eb8
   1f37c:	movt	r1, #4
   1f380:	mov	r0, r6
   1f384:	bl	1230c <fprintf@plt>
   1f388:	b	1f1ac <__assert_fail@plt+0xcbe8>
   1f38c:	movw	r2, #30856	; 0x7888
   1f390:	movt	r2, #4
   1f394:	movw	r3, #30860	; 0x788c
   1f398:	movt	r3, #4
   1f39c:	b	1f2f8 <__assert_fail@plt+0xcd34>
   1f3a0:	andeq	r0, r0, r0
   1f3a4:	rscsmi	r1, r5, r0, lsl #16
   1f3a8:	str	r4, [sp, #-8]!
   1f3ac:	str	lr, [sp, #4]
   1f3b0:	mov	r1, #0
   1f3b4:	bl	16bb8 <__assert_fail@plt+0x45f4>
   1f3b8:	movw	r3, #17892	; 0x45e4
   1f3bc:	movt	r3, #1
   1f3c0:	str	r3, [r0]
   1f3c4:	mov	r3, #2
   1f3c8:	str	r3, [r0, #8]
   1f3cc:	mov	r3, #4
   1f3d0:	str	r3, [r0, #12]
   1f3d4:	mov	r3, #0
   1f3d8:	strb	r3, [r0, #19]
   1f3dc:	strb	r3, [r0, #18]
   1f3e0:	mov	r0, #1
   1f3e4:	ldr	r4, [sp]
   1f3e8:	add	sp, sp, #4
   1f3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3f0:	str	r4, [sp, #-8]!
   1f3f4:	str	lr, [sp, #4]
   1f3f8:	mov	r1, #0
   1f3fc:	bl	16bb8 <__assert_fail@plt+0x45f4>
   1f400:	movw	r3, #18584	; 0x4898
   1f404:	movt	r3, #1
   1f408:	str	r3, [r0]
   1f40c:	mov	r3, #4
   1f410:	str	r3, [r0, #8]
   1f414:	mov	r3, #0
   1f418:	str	r3, [r0, #12]
   1f41c:	strb	r3, [r0, #19]
   1f420:	strb	r3, [r0, #18]
   1f424:	mov	r0, #1
   1f428:	ldr	r4, [sp]
   1f42c:	add	sp, sp, #4
   1f430:	pop	{pc}		; (ldr pc, [sp], #4)
   1f434:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f438:	strd	r6, [sp, #8]
   1f43c:	strd	r8, [sp, #16]
   1f440:	strd	sl, [sp, #24]
   1f444:	str	lr, [sp, #32]
   1f448:	sub	sp, sp, #116	; 0x74
   1f44c:	subs	r5, r1, #0
   1f450:	beq	1f858 <__assert_fail@plt+0xd294>
   1f454:	ldr	r7, [r2]
   1f458:	lsl	r8, r7, #2
   1f45c:	ldr	r6, [r5, r7, lsl #2]
   1f460:	cmp	r6, #0
   1f464:	beq	1f860 <__assert_fail@plt+0xd29c>
   1f468:	mov	r4, r2
   1f46c:	mov	r9, r0
   1f470:	mov	r0, r6
   1f474:	bl	122d0 <strlen@plt>
   1f478:	cmp	r0, #8
   1f47c:	bne	1f868 <__assert_fail@plt+0xd2a4>
   1f480:	movw	r3, #32828	; 0x803c
   1f484:	movt	r3, #4
   1f488:	ldr	r2, [r3]
   1f48c:	str	r2, [sp]
   1f490:	ldrh	r3, [r3, #4]
   1f494:	strh	r3, [sp, #4]
   1f498:	mov	r2, #6
   1f49c:	mov	r1, r6
   1f4a0:	movw	r0, #32468	; 0x7ed4
   1f4a4:	movt	r0, #4
   1f4a8:	bl	12564 <strncmp@plt>
   1f4ac:	cmp	r0, #0
   1f4b0:	bne	1f57c <__assert_fail@plt+0xcfb8>
   1f4b4:	ldrb	sl, [r6, #6]
   1f4b8:	ldrb	r6, [r6, #7]
   1f4bc:	cmp	r6, #66	; 0x42
   1f4c0:	cmpne	sl, #66	; 0x42
   1f4c4:	moveq	fp, #1
   1f4c8:	movne	fp, #0
   1f4cc:	beq	1f598 <__assert_fail@plt+0xcfd4>
   1f4d0:	cmp	sl, #116	; 0x74
   1f4d4:	beq	1f86c <__assert_fail@plt+0xd2a8>
   1f4d8:	mov	r1, sl
   1f4dc:	mov	r0, sp
   1f4e0:	bl	122dc <strchr@plt>
   1f4e4:	cmp	r0, #0
   1f4e8:	beq	1f86c <__assert_fail@plt+0xd2a8>
   1f4ec:	mov	r1, r6
   1f4f0:	mov	r0, sp
   1f4f4:	bl	122dc <strchr@plt>
   1f4f8:	cmp	r0, #0
   1f4fc:	beq	1f86c <__assert_fail@plt+0xd2a8>
   1f500:	add	r3, r7, #1
   1f504:	add	r8, r8, #4
   1f508:	ldr	r2, [r5, r8]
   1f50c:	cmp	r2, #0
   1f510:	beq	1f5c4 <__assert_fail@plt+0xd000>
   1f514:	str	r3, [r4]
   1f518:	ldr	r1, [r5, r8]
   1f51c:	mov	r0, r9
   1f520:	bl	18470 <__assert_fail@plt+0x5eac>
   1f524:	mov	r7, r0
   1f528:	cmp	sl, #97	; 0x61
   1f52c:	beq	1f680 <__assert_fail@plt+0xd0bc>
   1f530:	bls	1f60c <__assert_fail@plt+0xd048>
   1f534:	cmp	sl, #99	; 0x63
   1f538:	beq	1f68c <__assert_fail@plt+0xd0c8>
   1f53c:	cmp	sl, #109	; 0x6d
   1f540:	moveq	r3, #3
   1f544:	streq	r3, [r0, #40]	; 0x28
   1f548:	beq	1f61c <__assert_fail@plt+0xd058>
   1f54c:	mov	r1, sl
   1f550:	mov	r0, sp
   1f554:	bl	122dc <strchr@plt>
   1f558:	cmp	r0, #0
   1f55c:	beq	1f698 <__assert_fail@plt+0xd0d4>
   1f560:	ldr	r3, [pc, #804]	; 1f88c <__assert_fail@plt+0xd2c8>
   1f564:	movw	r2, #1612	; 0x64c
   1f568:	movw	r1, #30744	; 0x7818
   1f56c:	movt	r1, #4
   1f570:	movw	r0, #36300	; 0x8dcc
   1f574:	movt	r0, #4
   1f578:	bl	125c4 <__assert_fail@plt>
   1f57c:	ldr	r3, [pc, #776]	; 1f88c <__assert_fail@plt+0xd2c8>
   1f580:	movw	r2, #1555	; 0x613
   1f584:	movw	r1, #30744	; 0x7818
   1f588:	movt	r1, #4
   1f58c:	movw	r0, #32476	; 0x7edc
   1f590:	movt	r0, #4
   1f594:	bl	125c4 <__assert_fail@plt>
   1f598:	mov	r2, #5
   1f59c:	movw	r1, #32520	; 0x7f08
   1f5a0:	movt	r1, #4
   1f5a4:	mov	r0, #0
   1f5a8:	bl	12084 <dcgettext@plt>
   1f5ac:	mov	r2, r0
   1f5b0:	mov	r1, #0
   1f5b4:	mov	r0, r1
   1f5b8:	bl	121bc <error@plt>
   1f5bc:	mov	fp, #0
   1f5c0:	b	1f86c <__assert_fail@plt+0xd2a8>
   1f5c4:	mov	r2, #5
   1f5c8:	movw	r1, #32592	; 0x7f50
   1f5cc:	movt	r1, #4
   1f5d0:	mov	r0, #0
   1f5d4:	bl	12084 <dcgettext@plt>
   1f5d8:	mov	r6, r0
   1f5dc:	ldr	r2, [r4]
   1f5e0:	movw	r3, #48748	; 0xbe6c
   1f5e4:	movt	r3, #5
   1f5e8:	ldr	r2, [r5, r2, lsl #2]
   1f5ec:	ldr	r1, [r3, #72]	; 0x48
   1f5f0:	mov	r0, #0
   1f5f4:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1f5f8:	mov	r3, r0
   1f5fc:	mov	r2, r6
   1f600:	mov	r1, #0
   1f604:	mov	r0, #1
   1f608:	bl	121bc <error@plt>
   1f60c:	cmp	sl, #66	; 0x42
   1f610:	moveq	r3, #1
   1f614:	streq	r3, [r0, #40]	; 0x28
   1f618:	bne	1f54c <__assert_fail@plt+0xcf88>
   1f61c:	cmp	r6, #116	; 0x74
   1f620:	beq	1f6b4 <__assert_fail@plt+0xd0f0>
   1f624:	add	r0, sp, #8
   1f628:	bl	18720 <__assert_fail@plt+0x615c>
   1f62c:	ldr	r2, [r4]
   1f630:	movw	r3, #48748	; 0xbe6c
   1f634:	movt	r3, #5
   1f638:	ldr	r3, [r3, #52]	; 0x34
   1f63c:	add	r1, sp, #8
   1f640:	ldr	r0, [r5, r2, lsl #2]
   1f644:	blx	r3
   1f648:	cmp	r0, #0
   1f64c:	bne	1f778 <__assert_fail@plt+0xd1b4>
   1f650:	cmp	r6, #97	; 0x61
   1f654:	beq	1f7dc <__assert_fail@plt+0xd218>
   1f658:	bls	1f78c <__assert_fail@plt+0xd1c8>
   1f65c:	cmp	r6, #99	; 0x63
   1f660:	beq	1f7f0 <__assert_fail@plt+0xd22c>
   1f664:	cmp	r6, #109	; 0x6d
   1f668:	bne	1f804 <__assert_fail@plt+0xd240>
   1f66c:	ldr	r3, [sp, #92]	; 0x5c
   1f670:	ldr	r2, [sp, #88]	; 0x58
   1f674:	str	r2, [r7, #48]	; 0x30
   1f678:	str	r3, [r7, #52]	; 0x34
   1f67c:	b	1f6d0 <__assert_fail@plt+0xd10c>
   1f680:	mov	r3, #0
   1f684:	str	r3, [r0, #40]	; 0x28
   1f688:	b	1f61c <__assert_fail@plt+0xd058>
   1f68c:	mov	r3, #2
   1f690:	str	r3, [r0, #40]	; 0x28
   1f694:	b	1f61c <__assert_fail@plt+0xd058>
   1f698:	ldr	r3, [pc, #492]	; 1f88c <__assert_fail@plt+0xd2c8>
   1f69c:	movw	r2, #1611	; 0x64b
   1f6a0:	movw	r1, #30744	; 0x7818
   1f6a4:	movt	r1, #4
   1f6a8:	movw	r0, #32624	; 0x7f70
   1f6ac:	movt	r0, #4
   1f6b0:	bl	125c4 <__assert_fail@plt>
   1f6b4:	ldr	r3, [r4]
   1f6b8:	ldr	r2, [pc, #464]	; 1f890 <__assert_fail@plt+0xd2cc>
   1f6bc:	ldr	r1, [r5, r3, lsl #2]
   1f6c0:	add	r0, r7, #48	; 0x30
   1f6c4:	bl	2b1c0 <__assert_fail@plt+0x18bfc>
   1f6c8:	cmp	r0, #0
   1f6cc:	beq	1f734 <__assert_fail@plt+0xd170>
   1f6d0:	mov	r3, #0
   1f6d4:	str	r3, [r7, #44]	; 0x2c
   1f6d8:	ldr	r0, [r7, #48]	; 0x30
   1f6dc:	bl	1bf10 <__assert_fail@plt+0x994c>
   1f6e0:	vstr	s0, [r7, #28]
   1f6e4:	ldr	r3, [r4]
   1f6e8:	add	r3, r3, #1
   1f6ec:	str	r3, [r4]
   1f6f0:	ldr	r2, [r7]
   1f6f4:	cmp	r2, #0
   1f6f8:	beq	1f820 <__assert_fail@plt+0xd25c>
   1f6fc:	movw	r3, #18028	; 0x466c
   1f700:	movt	r3, #1
   1f704:	cmp	r2, r3
   1f708:	bne	1f83c <__assert_fail@plt+0xd278>
   1f70c:	ldrb	fp, [r7, #18]
   1f710:	cmp	fp, #0
   1f714:	bne	1f86c <__assert_fail@plt+0xd2a8>
   1f718:	ldr	r3, [pc, #364]	; 1f88c <__assert_fail@plt+0xd2c8>
   1f71c:	movw	r2, #1649	; 0x671
   1f720:	movw	r1, #30744	; 0x7818
   1f724:	movt	r1, #4
   1f728:	movw	r0, #32808	; 0x8028
   1f72c:	movt	r0, #4
   1f730:	bl	125c4 <__assert_fail@plt>
   1f734:	mov	r2, #5
   1f738:	movw	r1, #32648	; 0x7f88
   1f73c:	movt	r1, #4
   1f740:	bl	12084 <dcgettext@plt>
   1f744:	mov	r6, r0
   1f748:	ldr	r2, [r4]
   1f74c:	movw	r3, #48748	; 0xbe6c
   1f750:	movt	r3, #5
   1f754:	ldr	r2, [r5, r2, lsl #2]
   1f758:	ldr	r1, [r3, #72]	; 0x48
   1f75c:	mov	r0, #0
   1f760:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   1f764:	mov	r3, r0
   1f768:	mov	r2, r6
   1f76c:	mov	r1, #0
   1f770:	mov	r0, #1
   1f774:	bl	121bc <error@plt>
   1f778:	bl	12318 <__errno_location@plt>
   1f77c:	ldr	r3, [r4]
   1f780:	ldr	r1, [r5, r3, lsl #2]
   1f784:	ldr	r0, [r0]
   1f788:	bl	1970c <__assert_fail@plt+0x7148>
   1f78c:	cmp	r6, #66	; 0x42
   1f790:	bne	1f804 <__assert_fail@plt+0xd240>
   1f794:	mvn	r3, #0
   1f798:	str	r3, [r7, #48]	; 0x30
   1f79c:	str	r3, [r7, #52]	; 0x34
   1f7a0:	mov	r2, #5
   1f7a4:	movw	r1, #32708	; 0x7fc4
   1f7a8:	movt	r1, #4
   1f7ac:	mov	r0, #0
   1f7b0:	bl	12084 <dcgettext@plt>
   1f7b4:	mov	r6, r0
   1f7b8:	ldr	r3, [r4]
   1f7bc:	ldr	r1, [r5, r3, lsl #2]
   1f7c0:	mov	r0, #0
   1f7c4:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1f7c8:	mov	r3, r0
   1f7cc:	mov	r2, r6
   1f7d0:	mov	r1, #0
   1f7d4:	mov	r0, #1
   1f7d8:	bl	121bc <error@plt>
   1f7dc:	ldr	r3, [sp, #84]	; 0x54
   1f7e0:	ldr	r2, [sp, #80]	; 0x50
   1f7e4:	str	r2, [r7, #48]	; 0x30
   1f7e8:	str	r3, [r7, #52]	; 0x34
   1f7ec:	b	1f6d0 <__assert_fail@plt+0xd10c>
   1f7f0:	ldr	r3, [sp, #100]	; 0x64
   1f7f4:	ldr	r2, [sp, #96]	; 0x60
   1f7f8:	str	r2, [r7, #48]	; 0x30
   1f7fc:	str	r3, [r7, #52]	; 0x34
   1f800:	b	1f6d0 <__assert_fail@plt+0xd10c>
   1f804:	ldr	r3, [pc, #136]	; 1f894 <__assert_fail@plt+0xd2d0>
   1f808:	movw	r2, #498	; 0x1f2
   1f80c:	movw	r1, #30744	; 0x7818
   1f810:	movt	r1, #4
   1f814:	movw	r0, #36300	; 0x8dcc
   1f818:	movt	r0, #4
   1f81c:	bl	125c4 <__assert_fail@plt>
   1f820:	ldr	r3, [pc, #100]	; 1f88c <__assert_fail@plt+0xd2c8>
   1f824:	movw	r2, #1647	; 0x66f
   1f828:	movw	r1, #30744	; 0x7818
   1f82c:	movt	r1, #4
   1f830:	movw	r0, #32744	; 0x7fe8
   1f834:	movt	r0, #4
   1f838:	bl	125c4 <__assert_fail@plt>
   1f83c:	ldr	r3, [pc, #72]	; 1f88c <__assert_fail@plt+0xd2c8>
   1f840:	mov	r2, #1648	; 0x670
   1f844:	movw	r1, #30744	; 0x7818
   1f848:	movt	r1, #4
   1f84c:	movw	r0, #32772	; 0x8004
   1f850:	movt	r0, #4
   1f854:	bl	125c4 <__assert_fail@plt>
   1f858:	mov	fp, #0
   1f85c:	b	1f86c <__assert_fail@plt+0xd2a8>
   1f860:	mov	fp, #0
   1f864:	b	1f86c <__assert_fail@plt+0xd2a8>
   1f868:	mov	fp, #0
   1f86c:	mov	r0, fp
   1f870:	add	sp, sp, #116	; 0x74
   1f874:	ldrd	r4, [sp]
   1f878:	ldrd	r6, [sp, #8]
   1f87c:	ldrd	r8, [sp, #16]
   1f880:	ldrd	sl, [sp, #24]
   1f884:	add	sp, sp, #32
   1f888:	pop	{pc}		; (ldr pc, [sp], #4)
   1f88c:	andeq	r7, r4, r0, lsr #7
   1f890:	andeq	fp, r5, r0, lsl #29
   1f894:			; <UNDEFINED> instruction: 0x000473b0
   1f898:	str	r4, [sp, #-8]!
   1f89c:	str	lr, [sp, #4]
   1f8a0:	bl	184bc <__assert_fail@plt+0x5ef8>
   1f8a4:	mov	r4, r0
   1f8a8:	add	r1, r0, #40	; 0x28
   1f8ac:	movw	r0, #31100	; 0x797c
   1f8b0:	movt	r0, #4
   1f8b4:	bl	1e238 <__assert_fail@plt+0xbc74>
   1f8b8:	mov	r0, #1
   1f8bc:	strb	r0, [r4, #17]
   1f8c0:	strb	r0, [r4, #16]
   1f8c4:	mov	r3, #1065353216	; 0x3f800000
   1f8c8:	str	r3, [r4, #28]
   1f8cc:	ldr	r4, [sp]
   1f8d0:	add	sp, sp, #4
   1f8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8d8:	strd	r4, [sp, #-16]!
   1f8dc:	str	r6, [sp, #8]
   1f8e0:	str	lr, [sp, #12]
   1f8e4:	mov	r5, r1
   1f8e8:	bl	18470 <__assert_fail@plt+0x5eac>
   1f8ec:	mov	r4, r0
   1f8f0:	cmp	r5, #0
   1f8f4:	add	r1, r0, #40	; 0x28
   1f8f8:	movne	r0, r5
   1f8fc:	movweq	r0, #31100	; 0x797c
   1f900:	movteq	r0, #4
   1f904:	bl	1e238 <__assert_fail@plt+0xbc74>
   1f908:	mov	r0, #1
   1f90c:	strb	r0, [r4, #17]
   1f910:	strb	r0, [r4, #16]
   1f914:	mov	r3, #0
   1f918:	strb	r3, [r4, #19]
   1f91c:	strb	r3, [r4, #18]
   1f920:	mov	r3, #1065353216	; 0x3f800000
   1f924:	str	r3, [r4, #28]
   1f928:	ldrd	r4, [sp]
   1f92c:	ldr	r6, [sp, #8]
   1f930:	add	sp, sp, #12
   1f934:	pop	{pc}		; (ldr pc, [sp], #4)
   1f938:	str	r4, [sp, #-8]!
   1f93c:	str	lr, [sp, #4]
   1f940:	mov	r1, #0
   1f944:	bl	1f8d8 <__assert_fail@plt+0xd314>
   1f948:	ldr	r4, [sp]
   1f94c:	add	sp, sp, #4
   1f950:	pop	{pc}		; (ldr pc, [sp], #4)
   1f954:	strd	r4, [sp, #-12]!
   1f958:	str	lr, [sp, #8]
   1f95c:	sub	sp, sp, #12
   1f960:	mov	r5, r0
   1f964:	mov	r0, r1
   1f968:	mov	r4, r2
   1f96c:	add	r2, sp, #4
   1f970:	mov	r1, r4
   1f974:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1f978:	cmp	r0, #0
   1f97c:	bne	1f990 <__assert_fail@plt+0xd3cc>
   1f980:	add	sp, sp, #12
   1f984:	ldrd	r4, [sp]
   1f988:	add	sp, sp, #8
   1f98c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f990:	ldr	r1, [sp, #4]
   1f994:	mov	r0, r5
   1f998:	bl	1f8d8 <__assert_fail@plt+0xd314>
   1f99c:	cmp	r0, #0
   1f9a0:	bne	1f980 <__assert_fail@plt+0xd3bc>
   1f9a4:	ldr	r3, [r4]
   1f9a8:	sub	r3, r3, #1
   1f9ac:	str	r3, [r4]
   1f9b0:	b	1f980 <__assert_fail@plt+0xd3bc>
   1f9b4:	str	r4, [sp, #-8]!
   1f9b8:	str	lr, [sp, #4]
   1f9bc:	bl	184bc <__assert_fail@plt+0x5ef8>
   1f9c0:	mov	r4, #1
   1f9c4:	strb	r4, [r0, #17]
   1f9c8:	strb	r4, [r0, #16]
   1f9cc:	mov	r3, #0
   1f9d0:	strb	r3, [r0, #19]
   1f9d4:	strb	r3, [r0, #18]
   1f9d8:	add	r1, r0, #40	; 0x28
   1f9dc:	movw	r0, #31100	; 0x797c
   1f9e0:	movt	r0, #4
   1f9e4:	bl	1e238 <__assert_fail@plt+0xbc74>
   1f9e8:	mov	r0, r4
   1f9ec:	ldr	r4, [sp]
   1f9f0:	add	sp, sp, #4
   1f9f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f9f8:	strd	r4, [sp, #-16]!
   1f9fc:	str	r6, [sp, #8]
   1fa00:	str	lr, [sp, #12]
   1fa04:	sub	sp, sp, #8
   1fa08:	mov	r5, r0
   1fa0c:	mov	r0, r1
   1fa10:	mov	r1, r2
   1fa14:	add	r2, sp, #4
   1fa18:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1fa1c:	subs	r4, r0, #0
   1fa20:	bne	1fa3c <__assert_fail@plt+0xd478>
   1fa24:	mov	r0, r4
   1fa28:	add	sp, sp, #8
   1fa2c:	ldrd	r4, [sp]
   1fa30:	ldr	r6, [sp, #8]
   1fa34:	add	sp, sp, #12
   1fa38:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa3c:	ldr	r6, [sp, #4]
   1fa40:	mov	r0, r5
   1fa44:	bl	184bc <__assert_fail@plt+0x5ef8>
   1fa48:	mov	r5, r0
   1fa4c:	cmp	r6, #0
   1fa50:	add	r1, r0, #40	; 0x28
   1fa54:	movne	r0, r6
   1fa58:	movweq	r0, #31100	; 0x797c
   1fa5c:	movteq	r0, #4
   1fa60:	bl	1e238 <__assert_fail@plt+0xbc74>
   1fa64:	mov	r3, #1
   1fa68:	strb	r3, [r5, #17]
   1fa6c:	strb	r3, [r5, #16]
   1fa70:	mov	r3, #1065353216	; 0x3f800000
   1fa74:	str	r3, [r5, #28]
   1fa78:	b	1fa24 <__assert_fail@plt+0xd460>
   1fa7c:	strd	r4, [sp, #-12]!
   1fa80:	str	lr, [sp, #8]
   1fa84:	sub	sp, sp, #44	; 0x2c
   1fa88:	mov	r5, r0
   1fa8c:	mov	r0, r1
   1fa90:	mov	r1, r2
   1fa94:	add	r2, sp, #20
   1fa98:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1fa9c:	subs	r4, r0, #0
   1faa0:	bne	1fab8 <__assert_fail@plt+0xd4f4>
   1faa4:	mov	r0, r4
   1faa8:	add	sp, sp, #44	; 0x2c
   1faac:	ldrd	r4, [sp]
   1fab0:	add	sp, sp, #8
   1fab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fab8:	mov	r3, #0
   1fabc:	str	r3, [sp, #12]
   1fac0:	str	r3, [sp, #16]
   1fac4:	movw	r3, #32372	; 0x7e74
   1fac8:	movt	r3, #4
   1facc:	str	r3, [sp]
   1fad0:	vldr	d0, [pc, #208]	; 1fba8 <__assert_fail@plt+0xd5e4>
   1fad4:	add	r3, sp, #12
   1fad8:	ldm	r3, {r2, r3}
   1fadc:	add	r1, sp, #24
   1fae0:	ldr	r0, [sp, #20]
   1fae4:	bl	1d264 <__assert_fail@plt+0xaca0>
   1fae8:	subs	r4, r0, #0
   1faec:	beq	1fb80 <__assert_fail@plt+0xd5bc>
   1faf0:	ldr	r1, [sp, #20]
   1faf4:	mov	r0, r5
   1faf8:	bl	18470 <__assert_fail@plt+0x5eac>
   1fafc:	ldrd	r2, [sp, #24]
   1fb00:	strd	r2, [r0, #40]	; 0x28
   1fb04:	ldrd	r2, [sp, #32]
   1fb08:	strd	r2, [r0, #48]	; 0x30
   1fb0c:	ldr	r3, [sp, #32]
   1fb10:	movw	r2, #17671	; 0x4507
   1fb14:	movt	r2, #49710	; 0xc22e
   1fb18:	smull	r1, r2, r2, r3
   1fb1c:	add	r2, r2, r3
   1fb20:	asr	r3, r3, #31
   1fb24:	rsb	r3, r3, r2, asr #16
   1fb28:	vmov	s15, r3
   1fb2c:	vcvt.f32.s32	s15, s15
   1fb30:	vldr	s14, [pc, #120]	; 1fbb0 <__assert_fail@plt+0xd5ec>
   1fb34:	vcmpe.f32	s15, s14
   1fb38:	vmrs	APSR_nzcv, fpscr
   1fb3c:	bmi	1fb70 <__assert_fail@plt+0xd5ac>
   1fb40:	vldr	s14, [pc, #108]	; 1fbb4 <__assert_fail@plt+0xd5f0>
   1fb44:	vcmpe.f32	s15, s14
   1fb48:	vmrs	APSR_nzcv, fpscr
   1fb4c:	bmi	1fb78 <__assert_fail@plt+0xd5b4>
   1fb50:	vldr	s14, [pc, #96]	; 1fbb8 <__assert_fail@plt+0xd5f4>
   1fb54:	vcmpe.f32	s15, s14
   1fb58:	vmrs	APSR_nzcv, fpscr
   1fb5c:	vldr	s15, [pc, #88]	; 1fbbc <__assert_fail@plt+0xd5f8>
   1fb60:	vldr	s14, [pc, #88]	; 1fbc0 <__assert_fail@plt+0xd5fc>
   1fb64:	vmovle.f32	s15, s14
   1fb68:	vstr	s15, [r0, #28]
   1fb6c:	b	1faa4 <__assert_fail@plt+0xd4e0>
   1fb70:	vldr	s15, [pc, #76]	; 1fbc4 <__assert_fail@plt+0xd600>
   1fb74:	b	1fb68 <__assert_fail@plt+0xd5a4>
   1fb78:	vldr	s15, [pc, #60]	; 1fbbc <__assert_fail@plt+0xd5f8>
   1fb7c:	b	1fb68 <__assert_fail@plt+0xd5a4>
   1fb80:	mov	r2, #5
   1fb84:	movw	r1, #32836	; 0x8044
   1fb88:	movt	r1, #4
   1fb8c:	mov	r0, #0
   1fb90:	bl	12084 <dcgettext@plt>
   1fb94:	ldr	r3, [sp, #20]
   1fb98:	mov	r2, r0
   1fb9c:	mov	r1, #0
   1fba0:	mov	r0, #1
   1fba4:	bl	121bc <error@plt>
   1fba8:	andeq	r0, r0, r0
   1fbac:	rscsmi	r1, r5, r0, lsl #16
   1fbb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1fbb4:	svccc	0x00800000
   1fbb8:	sbcmi	r0, r8, #0
   1fbbc:			; <UNDEFINED> instruction: 0x3e99999a
   1fbc0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1fbc4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1fbc8:	movw	r3, #48748	; 0xbe6c
   1fbcc:	movt	r3, #5
   1fbd0:	ldrb	r3, [r3, #17]
   1fbd4:	cmp	r3, #0
   1fbd8:	bne	1fc98 <__assert_fail@plt+0xd6d4>
   1fbdc:	movw	r3, #48748	; 0xbe6c
   1fbe0:	movt	r3, #5
   1fbe4:	ldrb	r3, [r3, #16]
   1fbe8:	cmp	r3, #0
   1fbec:	beq	1fc98 <__assert_fail@plt+0xd6d4>
   1fbf0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1fbf4:	strd	r6, [sp, #8]
   1fbf8:	str	lr, [sp, #16]
   1fbfc:	sub	sp, sp, #12
   1fc00:	mov	r4, r1
   1fc04:	mov	r5, r0
   1fc08:	mov	r1, #47	; 0x2f
   1fc0c:	mov	r0, r2
   1fc10:	bl	122dc <strchr@plt>
   1fc14:	cmp	r0, #0
   1fc18:	beq	1fc80 <__assert_fail@plt+0xd6bc>
   1fc1c:	mov	r2, #5
   1fc20:	movw	r1, #32868	; 0x8064
   1fc24:	movt	r1, #4
   1fc28:	mov	r0, #0
   1fc2c:	bl	12084 <dcgettext@plt>
   1fc30:	mov	r6, r0
   1fc34:	mov	r1, r5
   1fc38:	mov	r0, #0
   1fc3c:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1fc40:	mov	r5, r0
   1fc44:	movw	r1, #42516	; 0xa614
   1fc48:	movt	r1, #4
   1fc4c:	mov	r0, #1
   1fc50:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1fc54:	mov	r7, r0
   1fc58:	mov	r1, r4
   1fc5c:	mov	r0, #2
   1fc60:	bl	192b8 <__assert_fail@plt+0x6cf4>
   1fc64:	str	r0, [sp, #4]
   1fc68:	str	r7, [sp]
   1fc6c:	mov	r3, r5
   1fc70:	mov	r2, r6
   1fc74:	mov	r1, #0
   1fc78:	mov	r0, r1
   1fc7c:	bl	121bc <error@plt>
   1fc80:	mov	r0, #1
   1fc84:	add	sp, sp, #12
   1fc88:	ldrd	r4, [sp]
   1fc8c:	ldrd	r6, [sp, #8]
   1fc90:	add	sp, sp, #16
   1fc94:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc98:	mov	r0, #1
   1fc9c:	bx	lr
   1fca0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1fca4:	strd	r6, [sp, #8]
   1fca8:	str	lr, [sp, #16]
   1fcac:	sub	sp, sp, #12
   1fcb0:	mov	r7, r0
   1fcb4:	mov	r0, r1
   1fcb8:	mov	r4, r2
   1fcbc:	ldr	r6, [r2]
   1fcc0:	add	r2, sp, #4
   1fcc4:	mov	r1, r4
   1fcc8:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1fccc:	subs	r5, r0, #0
   1fcd0:	bne	1fcec <__assert_fail@plt+0xd728>
   1fcd4:	mov	r0, r5
   1fcd8:	add	sp, sp, #12
   1fcdc:	ldrd	r4, [sp]
   1fce0:	ldrd	r6, [sp, #8]
   1fce4:	add	sp, sp, #16
   1fce8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fcec:	bl	1caec <__assert_fail@plt+0xa528>
   1fcf0:	ldr	r2, [sp, #4]
   1fcf4:	movw	r1, #33048	; 0x8118
   1fcf8:	movt	r1, #4
   1fcfc:	movw	r0, #33060	; 0x8124
   1fd00:	movt	r0, #4
   1fd04:	bl	1fbc8 <__assert_fail@plt+0xd604>
   1fd08:	subs	r5, r0, #0
   1fd0c:	streq	r6, [r4]
   1fd10:	beq	1fcd4 <__assert_fail@plt+0xd710>
   1fd14:	ldr	r1, [sp, #4]
   1fd18:	mov	r0, r7
   1fd1c:	bl	18470 <__assert_fail@plt+0x5eac>
   1fd20:	mov	r4, r0
   1fd24:	mov	r1, #0
   1fd28:	strb	r1, [r0, #19]
   1fd2c:	strb	r1, [r0, #18]
   1fd30:	ldr	r0, [sp, #4]
   1fd34:	str	r0, [r4, #40]	; 0x28
   1fd38:	bl	1cbc0 <__assert_fail@plt+0xa5fc>
   1fd3c:	vstr	s0, [r4, #28]
   1fd40:	b	1fcd4 <__assert_fail@plt+0xd710>
   1fd44:	strd	r4, [sp, #-16]!
   1fd48:	str	r6, [sp, #8]
   1fd4c:	str	lr, [sp, #12]
   1fd50:	sub	sp, sp, #8
   1fd54:	mov	r6, r0
   1fd58:	mov	r4, r1
   1fd5c:	mov	r5, r2
   1fd60:	bl	1caec <__assert_fail@plt+0xa528>
   1fd64:	add	r2, sp, #4
   1fd68:	mov	r1, r5
   1fd6c:	mov	r0, r4
   1fd70:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   1fd74:	subs	r4, r0, #0
   1fd78:	bne	1fd94 <__assert_fail@plt+0xd7d0>
   1fd7c:	mov	r0, r4
   1fd80:	add	sp, sp, #8
   1fd84:	ldrd	r4, [sp]
   1fd88:	ldr	r6, [sp, #8]
   1fd8c:	add	sp, sp, #12
   1fd90:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd94:	ldr	r2, [sp, #4]
   1fd98:	movw	r1, #33068	; 0x812c
   1fd9c:	movt	r1, #4
   1fda0:	movw	r0, #33080	; 0x8138
   1fda4:	movt	r0, #4
   1fda8:	bl	1fbc8 <__assert_fail@plt+0xd604>
   1fdac:	subs	r4, r0, #0
   1fdb0:	beq	1fd7c <__assert_fail@plt+0xd7b8>
   1fdb4:	ldr	r1, [sp, #4]
   1fdb8:	mov	r0, r6
   1fdbc:	bl	18470 <__assert_fail@plt+0x5eac>
   1fdc0:	mov	r5, r0
   1fdc4:	mov	r1, #0
   1fdc8:	strb	r1, [r0, #19]
   1fdcc:	strb	r1, [r0, #18]
   1fdd0:	ldr	r0, [sp, #4]
   1fdd4:	str	r0, [r5, #40]	; 0x28
   1fdd8:	bl	1cbc0 <__assert_fail@plt+0xa5fc>
   1fddc:	vstr	s0, [r5, #28]
   1fde0:	b	1fd7c <__assert_fail@plt+0xd7b8>
   1fde4:	cmp	r0, #0
   1fde8:	bxeq	lr
   1fdec:	mov	r1, #0
   1fdf0:	movw	r2, #15868	; 0x3dfc
   1fdf4:	movt	r2, #1
   1fdf8:	movw	ip, #14352	; 0x3810
   1fdfc:	movt	ip, #1
   1fe00:	b	1fe10 <__assert_fail@plt+0xd84c>
   1fe04:	ldr	r0, [r0, #152]	; 0x98
   1fe08:	cmp	r0, #0
   1fe0c:	beq	1fe2c <__assert_fail@plt+0xd868>
   1fe10:	ldr	r3, [r0]
   1fe14:	cmp	r3, r2
   1fe18:	orreq	r1, r1, #1
   1fe1c:	beq	1fe04 <__assert_fail@plt+0xd840>
   1fe20:	cmp	r3, ip
   1fe24:	orreq	r1, r1, #2
   1fe28:	b	1fe04 <__assert_fail@plt+0xd840>
   1fe2c:	cmp	r1, #3
   1fe30:	bxne	lr
   1fe34:	movw	r3, #48748	; 0xbe6c
   1fe38:	movt	r3, #5
   1fe3c:	ldrb	r3, [r3, #1]
   1fe40:	cmp	r3, #0
   1fe44:	bxne	lr
   1fe48:	str	r4, [sp, #-8]!
   1fe4c:	str	lr, [sp, #4]
   1fe50:	mov	r2, #5
   1fe54:	movw	r1, #33088	; 0x8140
   1fe58:	movt	r1, #4
   1fe5c:	bl	12084 <dcgettext@plt>
   1fe60:	mov	r2, r0
   1fe64:	mov	r1, #0
   1fe68:	mov	r0, #1
   1fe6c:	bl	121bc <error@plt>
   1fe70:	cmp	r0, #1
   1fe74:	beq	1feb8 <__assert_fail@plt+0xd8f4>
   1fe78:	cmp	r0, #0
   1fe7c:	beq	1fee4 <__assert_fail@plt+0xd920>
   1fe80:	cmp	r0, #2
   1fe84:	beq	1ff08 <__assert_fail@plt+0xd944>
   1fe88:	movw	r3, #48748	; 0xbe6c
   1fe8c:	movt	r3, #5
   1fe90:	str	r0, [r3, #48]	; 0x30
   1fe94:	ldr	r3, [r3, #44]	; 0x2c
   1fe98:	tst	r3, #2
   1fe9c:	beq	1feb4 <__assert_fail@plt+0xd8f0>
   1fea0:	movw	r3, #48748	; 0xbe6c
   1fea4:	movt	r3, #5
   1fea8:	movw	r2, #35460	; 0x8a84
   1feac:	movt	r2, #1
   1feb0:	str	r2, [r3, #52]	; 0x34
   1feb4:	bx	lr
   1feb8:	movw	r3, #48748	; 0xbe6c
   1febc:	movt	r3, #5
   1fec0:	movw	r2, #35216	; 0x8990
   1fec4:	movt	r2, #1
   1fec8:	str	r2, [r3, #52]	; 0x34
   1fecc:	movw	r2, #49600	; 0xc1c0
   1fed0:	movt	r2, #1
   1fed4:	str	r2, [r3, #64]	; 0x40
   1fed8:	mov	r2, #1
   1fedc:	strb	r2, [r3, #12]
   1fee0:	b	1fe88 <__assert_fail@plt+0xd8c4>
   1fee4:	movw	r3, #48748	; 0xbe6c
   1fee8:	movt	r3, #5
   1feec:	movw	r2, #35360	; 0x8a20
   1fef0:	movt	r2, #1
   1fef4:	str	r2, [r3, #52]	; 0x34
   1fef8:	movw	r2, #49316	; 0xc0a4
   1fefc:	movt	r2, #1
   1ff00:	str	r2, [r3, #64]	; 0x40
   1ff04:	b	1fe88 <__assert_fail@plt+0xd8c4>
   1ff08:	movw	r3, #48748	; 0xbe6c
   1ff0c:	movt	r3, #5
   1ff10:	movw	r2, #35028	; 0x88d4
   1ff14:	movt	r2, #1
   1ff18:	str	r2, [r3, #52]	; 0x34
   1ff1c:	movw	r2, #49496	; 0xc158
   1ff20:	movt	r2, #1
   1ff24:	str	r2, [r3, #64]	; 0x40
   1ff28:	mov	r2, #1
   1ff2c:	strb	r2, [r3, #12]
   1ff30:	b	1fe88 <__assert_fail@plt+0xd8c4>
   1ff34:	strd	r4, [sp, #-16]!
   1ff38:	str	r6, [sp, #8]
   1ff3c:	str	lr, [sp, #12]
   1ff40:	mov	r4, r0
   1ff44:	mov	r5, r1
   1ff48:	mov	r6, r2
   1ff4c:	mov	r0, #1
   1ff50:	bl	1fe70 <__assert_fail@plt+0xd8ac>
   1ff54:	mov	r2, r6
   1ff58:	mov	r1, r5
   1ff5c:	mov	r0, r4
   1ff60:	bl	1c358 <__assert_fail@plt+0x9d94>
   1ff64:	ldrd	r4, [sp]
   1ff68:	ldr	r6, [sp, #8]
   1ff6c:	add	sp, sp, #12
   1ff70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff74:	movw	r3, #48336	; 0xbcd0
   1ff78:	movt	r3, #5
   1ff7c:	mov	r2, #0
   1ff80:	str	r2, [r3, #8]
   1ff84:	bx	lr
   1ff88:	bx	lr
   1ff8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ff90:	strd	r6, [sp, #8]
   1ff94:	str	r8, [sp, #16]
   1ff98:	str	lr, [sp, #20]
   1ff9c:	sub	sp, sp, #8
   1ffa0:	mov	r8, r0
   1ffa4:	mov	r2, #6
   1ffa8:	mov	r1, r0
   1ffac:	movw	r0, #32468	; 0x7ed4
   1ffb0:	movt	r0, #4
   1ffb4:	bl	12564 <strncmp@plt>
   1ffb8:	cmp	r0, #0
   1ffbc:	bne	1ffd0 <__assert_fail@plt+0xda0c>
   1ffc0:	mov	r0, r8
   1ffc4:	bl	122d0 <strlen@plt>
   1ffc8:	cmp	r0, #8
   1ffcc:	beq	20038 <__assert_fail@plt+0xda74>
   1ffd0:	ldrb	r3, [r8]
   1ffd4:	cmp	r3, #45	; 0x2d
   1ffd8:	addeq	r7, r8, #1
   1ffdc:	movne	r7, r8
   1ffe0:	mov	r5, #0
   1ffe4:	movw	r4, #21608	; 0x5468
   1ffe8:	movt	r4, #4
   1ffec:	movw	r6, #28168	; 0x6e08
   1fff0:	movt	r6, #4
   1fff4:	mov	r1, r7
   1fff8:	mov	r0, r4
   1fffc:	bl	11f1c <strcmp@plt>
   20000:	cmp	r0, #0
   20004:	beq	20064 <__assert_fail@plt+0xdaa0>
   20008:	add	r5, r5, #1
   2000c:	add	r3, r6, r5, lsl #4
   20010:	ldr	r4, [r3, #4]
   20014:	cmp	r4, #0
   20018:	bne	1fff4 <__assert_fail@plt+0xda30>
   2001c:	mov	r0, r4
   20020:	add	sp, sp, #8
   20024:	ldrd	r4, [sp]
   20028:	ldrd	r6, [sp, #8]
   2002c:	ldr	r8, [sp, #16]
   20030:	add	sp, sp, #20
   20034:	pop	{pc}		; (ldr pc, [sp], #4)
   20038:	movw	r3, #48336	; 0xbcd0
   2003c:	movt	r3, #5
   20040:	ldr	r3, [r3, #8]
   20044:	cmp	r3, #0
   20048:	ldrne	r4, [pc, #220]	; 2012c <__assert_fail@plt+0xdb68>
   2004c:	bne	2001c <__assert_fail@plt+0xda58>
   20050:	movw	r3, #48336	; 0xbcd0
   20054:	movt	r3, #5
   20058:	str	r8, [r3, #8]
   2005c:	ldr	r4, [pc, #200]	; 2012c <__assert_fail@plt+0xdb68>
   20060:	b	2001c <__assert_fail@plt+0xda58>
   20064:	movw	r3, #28168	; 0x6e08
   20068:	movt	r3, #4
   2006c:	add	r4, r3, r5, lsl #4
   20070:	ldr	r3, [r3, r5, lsl #4]
   20074:	cmp	r3, #2
   20078:	beq	2001c <__assert_fail@plt+0xda58>
   2007c:	cmp	r3, #1
   20080:	beq	20124 <__assert_fail@plt+0xdb60>
   20084:	cmp	r3, #0
   20088:	bne	20104 <__assert_fail@plt+0xdb40>
   2008c:	movw	r3, #48336	; 0xbcd0
   20090:	movt	r3, #5
   20094:	ldr	r3, [r3, #8]
   20098:	cmp	r3, #0
   2009c:	beq	2001c <__assert_fail@plt+0xda58>
   200a0:	movw	r3, #48748	; 0xbe6c
   200a4:	movt	r3, #5
   200a8:	ldrb	r3, [r3, #17]
   200ac:	cmp	r3, #0
   200b0:	bne	2001c <__assert_fail@plt+0xda58>
   200b4:	movw	r3, #48748	; 0xbe6c
   200b8:	movt	r3, #5
   200bc:	ldrb	r3, [r3, #16]
   200c0:	cmp	r3, #0
   200c4:	beq	2001c <__assert_fail@plt+0xda58>
   200c8:	mov	r2, #5
   200cc:	movw	r1, #33260	; 0x81ec
   200d0:	movt	r1, #4
   200d4:	bl	12084 <dcgettext@plt>
   200d8:	str	r8, [sp, #4]
   200dc:	movw	r3, #48336	; 0xbcd0
   200e0:	movt	r3, #5
   200e4:	ldr	r3, [r3, #8]
   200e8:	str	r3, [sp]
   200ec:	mov	r3, r8
   200f0:	mov	r2, r0
   200f4:	mov	r1, #0
   200f8:	mov	r0, r1
   200fc:	bl	121bc <error@plt>
   20100:	b	2001c <__assert_fail@plt+0xda58>
   20104:	movw	r3, #48336	; 0xbcd0
   20108:	movt	r3, #5
   2010c:	ldr	r3, [r3, #8]
   20110:	cmp	r3, #0
   20114:	movweq	r3, #48336	; 0xbcd0
   20118:	movteq	r3, #5
   2011c:	streq	r8, [r3, #8]
   20120:	b	2001c <__assert_fail@plt+0xda58>
   20124:	mov	r4, #0
   20128:	b	2001c <__assert_fail@plt+0xda58>
   2012c:	andeq	r7, r4, r0, asr #7
   20130:	str	r4, [sp, #-8]!
   20134:	str	lr, [sp, #4]
   20138:	movw	r0, #33508	; 0x82e4
   2013c:	movt	r0, #4
   20140:	bl	1ff8c <__assert_fail@plt+0xd9c8>
   20144:	bl	184bc <__assert_fail@plt+0x5ef8>
   20148:	mov	r3, #0
   2014c:	strb	r3, [r0, #19]
   20150:	strb	r3, [r0, #18]
   20154:	strb	r3, [r0, #17]
   20158:	strb	r3, [r0, #16]
   2015c:	mov	r3, #0
   20160:	str	r3, [r0, #28]
   20164:	mov	r0, #1
   20168:	ldr	r4, [sp]
   2016c:	add	sp, sp, #4
   20170:	pop	{pc}		; (ldr pc, [sp], #4)
   20174:	str	r4, [sp, #-8]!
   20178:	str	lr, [sp, #4]
   2017c:	bl	20130 <__assert_fail@plt+0xdb6c>
   20180:	ldr	r4, [sp]
   20184:	add	sp, sp, #4
   20188:	pop	{pc}		; (ldr pc, [sp], #4)
   2018c:	strd	r4, [sp, #-16]!
   20190:	str	r6, [sp, #8]
   20194:	str	lr, [sp, #12]
   20198:	sub	sp, sp, #112	; 0x70
   2019c:	mov	r5, r0
   201a0:	mov	r0, r1
   201a4:	mov	r1, r2
   201a8:	add	r2, sp, #108	; 0x6c
   201ac:	bl	1bfe0 <__assert_fail@plt+0x9a1c>
   201b0:	subs	r4, r0, #0
   201b4:	beq	20218 <__assert_fail@plt+0xdc54>
   201b8:	movw	r3, #48748	; 0xbe6c
   201bc:	movt	r3, #5
   201c0:	ldrh	r3, [r3, #68]	; 0x44
   201c4:	cmp	r3, #1
   201c8:	bls	201dc <__assert_fail@plt+0xdc18>
   201cc:	ldr	r0, [sp, #108]	; 0x6c
   201d0:	bl	1bda4 <__assert_fail@plt+0x97e0>
   201d4:	cmp	r0, #0
   201d8:	beq	20260 <__assert_fail@plt+0xdc9c>
   201dc:	ldr	r1, [sp, #108]	; 0x6c
   201e0:	mov	r0, r5
   201e4:	bl	18470 <__assert_fail@plt+0x5eac>
   201e8:	mov	r5, r0
   201ec:	ldr	r6, [sp, #108]	; 0x6c
   201f0:	str	r6, [r0, #40]	; 0x28
   201f4:	mov	r2, sp
   201f8:	movw	r1, #42516	; 0xa614
   201fc:	movt	r1, #4
   20200:	mov	r0, #3
   20204:	bl	12528 <__xstat64@plt>
   20208:	cmp	r0, #0
   2020c:	beq	20230 <__assert_fail@plt+0xdc6c>
   20210:	vldr	s15, [pc, #136]	; 202a0 <__assert_fail@plt+0xdcdc>
   20214:	vstr	s15, [r5, #28]
   20218:	mov	r0, r4
   2021c:	add	sp, sp, #112	; 0x70
   20220:	ldrd	r4, [sp]
   20224:	ldr	r6, [sp, #8]
   20228:	add	sp, sp, #12
   2022c:	pop	{pc}		; (ldr pc, [sp], #4)
   20230:	movw	r1, #42516	; 0xa614
   20234:	movt	r1, #4
   20238:	mov	r0, sp
   2023c:	bl	1bc38 <__assert_fail@plt+0x9674>
   20240:	mov	r1, r0
   20244:	mov	r0, r6
   20248:	bl	11f1c <strcmp@plt>
   2024c:	cmp	r0, #0
   20250:	vldr	s15, [pc, #76]	; 202a4 <__assert_fail@plt+0xdce0>
   20254:	vldr	s14, [pc, #76]	; 202a8 <__assert_fail@plt+0xdce4>
   20258:	vmovne.f32	s15, s14
   2025c:	b	20214 <__assert_fail@plt+0xdc50>
   20260:	movw	r3, #48748	; 0xbe6c
   20264:	movt	r3, #5
   20268:	ldr	r3, [r3, #44]	; 0x2c
   2026c:	tst	r3, #8
   20270:	bne	20280 <__assert_fail@plt+0xdcbc>
   20274:	bl	20130 <__assert_fail@plt+0xdb6c>
   20278:	mov	r4, r0
   2027c:	b	20218 <__assert_fail@plt+0xdc54>
   20280:	movw	r3, #46408	; 0xb548
   20284:	movt	r3, #5
   20288:	ldr	r2, [sp, #108]	; 0x6c
   2028c:	movw	r1, #33516	; 0x82ec
   20290:	movt	r1, #4
   20294:	ldr	r0, [r3]
   20298:	bl	1230c <fprintf@plt>
   2029c:	b	20274 <__assert_fail@plt+0xdcb0>
   202a0:	svccc	0x00800000
   202a4:	svccc	0x00333333
   202a8:			; <UNDEFINED> instruction: 0x3e99999a
   202ac:	mov	r0, #0
   202b0:	bx	lr
   202b4:	strd	r4, [sp, #-12]!
   202b8:	str	lr, [sp, #8]
   202bc:	sub	sp, sp, #20
   202c0:	mov	r5, r0
   202c4:	mov	r4, r1
   202c8:	bl	121f8 <getenv@plt>
   202cc:	cmp	r0, #0
   202d0:	beq	20344 <__assert_fail@plt+0xdd80>
   202d4:	mov	r3, #0
   202d8:	str	r3, [sp]
   202dc:	add	r3, sp, #12
   202e0:	mov	r2, #10
   202e4:	add	r1, sp, #8
   202e8:	bl	2e948 <__assert_fail@plt+0x1c384>
   202ec:	cmp	r0, #0
   202f0:	bne	20314 <__assert_fail@plt+0xdd50>
   202f4:	ldr	r0, [sp, #12]
   202f8:	cmp	r0, r4
   202fc:	movcs	r0, #0
   20300:	movcc	r0, #1
   20304:	add	sp, sp, #20
   20308:	ldrd	r4, [sp]
   2030c:	add	sp, sp, #8
   20310:	pop	{pc}		; (ldr pc, [sp], #4)
   20314:	bl	12318 <__errno_location@plt>
   20318:	ldr	r4, [r0]
   2031c:	mov	r2, #5
   20320:	movw	r1, #34188	; 0x858c
   20324:	movt	r1, #4
   20328:	mov	r0, #0
   2032c:	bl	12084 <dcgettext@plt>
   20330:	mov	r3, r5
   20334:	mov	r2, r0
   20338:	mov	r1, r4
   2033c:	mov	r0, #1
   20340:	bl	121bc <error@plt>
   20344:	mov	r0, #0
   20348:	b	20304 <__assert_fail@plt+0xdd40>
   2034c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20350:	strd	r6, [sp, #8]
   20354:	strd	r8, [sp, #16]
   20358:	str	sl, [sp, #24]
   2035c:	str	lr, [sp, #28]
   20360:	ldr	r9, [sp, #36]	; 0x24
   20364:	ldr	r7, [sp, #40]	; 0x28
   20368:	subs	r6, r2, #0
   2036c:	beq	2042c <__assert_fail@plt+0xde68>
   20370:	mov	r5, r0
   20374:	mov	r4, r1
   20378:	mov	r8, r3
   2037c:	movw	r3, #34276	; 0x85e4
   20380:	movt	r3, #4
   20384:	cmp	r6, r3
   20388:	beq	204b8 <__assert_fail@plt+0xdef4>
   2038c:	add	r3, r8, r9
   20390:	ldr	r2, [r1, #16]
   20394:	add	r3, r3, r2
   20398:	ldr	r2, [r0, #12]
   2039c:	cmp	r3, r2
   203a0:	bls	20494 <__assert_fail@plt+0xded0>
   203a4:	cmp	r7, #0
   203a8:	bne	2044c <__assert_fail@plt+0xde88>
   203ac:	ldr	r2, [r1]
   203b0:	ldr	r3, [r0, #28]
   203b4:	cmp	r2, r3
   203b8:	beq	2044c <__assert_fail@plt+0xde88>
   203bc:	ldr	r3, [r0, #24]
   203c0:	cmp	r3, #0
   203c4:	bne	20470 <__assert_fail@plt+0xdeac>
   203c8:	ldr	r3, [r0]
   203cc:	cmp	r3, #0
   203d0:	beq	203ec <__assert_fail@plt+0xde28>
   203d4:	ldr	r3, [r0, #36]	; 0x24
   203d8:	cmp	r3, #0
   203dc:	bne	20470 <__assert_fail@plt+0xdeac>
   203e0:	ldr	r3, [r0, #40]	; 0x28
   203e4:	cmp	r3, #0
   203e8:	bne	20470 <__assert_fail@plt+0xdeac>
   203ec:	mov	r1, r4
   203f0:	mov	r0, r5
   203f4:	bl	207e4 <__assert_fail@plt+0xe220>
   203f8:	ldr	r3, [r5, #40]	; 0x28
   203fc:	cmp	r3, #0
   20400:	beq	20418 <__assert_fail@plt+0xde54>
   20404:	ldr	r2, [r4]
   20408:	ldr	r1, [r5, #28]
   2040c:	sub	r2, r2, r1
   20410:	cmp	r3, r2
   20414:	beq	204ac <__assert_fail@plt+0xdee8>
   20418:	ldr	r2, [r4]
   2041c:	ldr	r3, [r5, #16]
   20420:	cmp	r2, r3
   20424:	bne	204b8 <__assert_fail@plt+0xdef4>
   20428:	b	204ac <__assert_fail@plt+0xdee8>
   2042c:	movw	r3, #34116	; 0x8544
   20430:	movt	r3, #4
   20434:	movw	r2, #341	; 0x155
   20438:	movw	r1, #34252	; 0x85cc
   2043c:	movt	r1, #4
   20440:	movw	r0, #34264	; 0x85d8
   20444:	movt	r0, #4
   20448:	bl	125c4 <__assert_fail@plt>
   2044c:	mov	r2, #5
   20450:	movw	r1, #34288	; 0x85f0
   20454:	movt	r1, #4
   20458:	mov	r0, #0
   2045c:	bl	12084 <dcgettext@plt>
   20460:	mov	r2, r0
   20464:	mov	r1, #0
   20468:	mov	r0, #1
   2046c:	bl	121bc <error@plt>
   20470:	mov	r2, #5
   20474:	movw	r1, #34348	; 0x862c
   20478:	movt	r1, #4
   2047c:	mov	r0, #0
   20480:	bl	12084 <dcgettext@plt>
   20484:	mov	r2, r0
   20488:	mov	r1, #0
   2048c:	mov	r0, #1
   20490:	bl	121bc <error@plt>
   20494:	cmp	r7, #0
   20498:	beq	203f8 <__assert_fail@plt+0xde34>
   2049c:	ldr	r2, [r1]
   204a0:	ldr	r3, [r0, #16]
   204a4:	cmp	r2, r3
   204a8:	bne	204c4 <__assert_fail@plt+0xdf00>
   204ac:	mov	r1, r4
   204b0:	mov	r0, r5
   204b4:	bl	207e4 <__assert_fail@plt+0xe220>
   204b8:	cmp	r7, #0
   204bc:	moveq	r3, #1
   204c0:	streq	r3, [r4, #28]
   204c4:	ldr	r1, [r4, #8]
   204c8:	ldr	r3, [r4]
   204cc:	cmp	r3, r1
   204d0:	bcc	204f4 <__assert_fail@plt+0xdf30>
   204d4:	ldr	r0, [r4, #4]
   204d8:	cmp	r0, #0
   204dc:	beq	205ac <__assert_fail@plt+0xdfe8>
   204e0:	lsl	r3, r1, #1
   204e4:	str	r3, [r4, #8]
   204e8:	lsl	r1, r1, #3
   204ec:	bl	2e3a8 <__assert_fail@plt+0x1bde4>
   204f0:	str	r0, [r4, #4]
   204f4:	movw	r3, #34276	; 0x85e4
   204f8:	movt	r3, #4
   204fc:	cmp	r6, r3
   20500:	beq	205c4 <__assert_fail@plt+0xe000>
   20504:	ldr	r3, [r4, #12]
   20508:	ldr	r0, [r4, #16]
   2050c:	ldr	r1, [r4, #4]
   20510:	ldr	r2, [r4]
   20514:	add	ip, r2, #1
   20518:	str	ip, [r4]
   2051c:	add	r3, r3, r0
   20520:	str	r3, [r1, r2, lsl #2]
   20524:	ldr	r3, [sp, #32]
   20528:	cmp	r3, #0
   2052c:	beq	20550 <__assert_fail@plt+0xdf8c>
   20530:	ldr	r0, [r4, #12]
   20534:	ldr	r3, [r4, #16]
   20538:	ldr	r1, [sp, #32]
   2053c:	add	r0, r0, r3
   20540:	bl	12180 <strcpy@plt>
   20544:	ldr	r3, [r4, #16]
   20548:	add	r9, r3, r9
   2054c:	str	r9, [r4, #16]
   20550:	ldr	r0, [r4, #12]
   20554:	ldr	r3, [r4, #16]
   20558:	mov	r1, r6
   2055c:	add	r0, r0, r3
   20560:	bl	12180 <strcpy@plt>
   20564:	ldr	r3, [r4, #16]
   20568:	add	r3, r3, r8
   2056c:	str	r3, [r4, #16]
   20570:	cmp	r7, #0
   20574:	bne	20604 <__assert_fail@plt+0xe040>
   20578:	ldr	r3, [r5, #40]	; 0x28
   2057c:	cmp	r3, #0
   20580:	beq	20598 <__assert_fail@plt+0xdfd4>
   20584:	ldr	r2, [r4]
   20588:	ldr	r1, [r5, #28]
   2058c:	sub	r2, r2, r1
   20590:	cmp	r3, r2
   20594:	beq	20614 <__assert_fail@plt+0xe050>
   20598:	ldr	r2, [r4]
   2059c:	ldr	r3, [r5, #16]
   205a0:	cmp	r2, r3
   205a4:	bne	205ec <__assert_fail@plt+0xe028>
   205a8:	b	20614 <__assert_fail@plt+0xe050>
   205ac:	mov	r3, #64	; 0x40
   205b0:	str	r3, [r4, #8]
   205b4:	mov	r0, #256	; 0x100
   205b8:	bl	2e348 <__assert_fail@plt+0x1bd84>
   205bc:	str	r0, [r4, #4]
   205c0:	b	204f4 <__assert_fail@plt+0xdf30>
   205c4:	ldr	r2, [r4, #4]
   205c8:	ldr	r3, [r4]
   205cc:	add	r1, r3, #1
   205d0:	str	r1, [r4]
   205d4:	mov	r1, #0
   205d8:	str	r1, [r2, r3, lsl #2]
   205dc:	cmp	r7, #0
   205e0:	beq	205ec <__assert_fail@plt+0xe028>
   205e4:	ldr	r3, [r4, #16]
   205e8:	str	r3, [r4, #20]
   205ec:	ldrd	r4, [sp]
   205f0:	ldrd	r6, [sp, #8]
   205f4:	ldrd	r8, [sp, #16]
   205f8:	ldr	sl, [sp, #24]
   205fc:	add	sp, sp, #28
   20600:	pop	{pc}		; (ldr pc, [sp], #4)
   20604:	ldr	r2, [r4]
   20608:	ldr	r3, [r5, #16]
   2060c:	cmp	r2, r3
   20610:	bne	205e4 <__assert_fail@plt+0xe020>
   20614:	mov	r1, r4
   20618:	mov	r0, r5
   2061c:	bl	207e4 <__assert_fail@plt+0xe220>
   20620:	b	205dc <__assert_fail@plt+0xe018>
   20624:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20628:	strd	r6, [sp, #8]
   2062c:	strd	r8, [sp, #16]
   20630:	strd	sl, [sp, #24]
   20634:	str	lr, [sp, #32]
   20638:	sub	sp, sp, #28
   2063c:	mov	sl, r0
   20640:	str	r1, [sp, #20]
   20644:	mov	r6, r2
   20648:	mov	r5, r3
   2064c:	ldr	r0, [r0, #12]
   20650:	sub	r7, r0, #1
   20654:	movw	r3, #48348	; 0xbcdc
   20658:	movt	r3, #5
   2065c:	ldr	r3, [r3]
   20660:	cmp	r3, #0
   20664:	beq	2068c <__assert_fail@plt+0xe0c8>
   20668:	movw	r3, #48348	; 0xbcdc
   2066c:	movt	r3, #5
   20670:	ldr	r3, [r3]
   20674:	str	r3, [sp, #16]
   20678:	mov	r4, r3
   2067c:	ldr	r3, [sp, #76]	; 0x4c
   20680:	ldr	r2, [sp, #68]	; 0x44
   20684:	add	fp, r3, r2
   20688:	b	206d4 <__assert_fail@plt+0xe110>
   2068c:	add	r0, r0, #1
   20690:	bl	2e348 <__assert_fail@plt+0x1bd84>
   20694:	movw	r3, #48348	; 0xbcdc
   20698:	movt	r3, #5
   2069c:	str	r0, [r3]
   206a0:	b	20668 <__assert_fail@plt+0xe0a4>
   206a4:	ldr	r1, [sp, #72]	; 0x48
   206a8:	mov	r0, r4
   206ac:	bl	12180 <strcpy@plt>
   206b0:	ldr	r3, [sp, #76]	; 0x4c
   206b4:	add	r4, r4, r3
   206b8:	ldr	r3, [sl, #20]
   206bc:	add	r6, r9, r3
   206c0:	sub	r5, r5, r3
   206c4:	sub	r5, r5, r8
   206c8:	ldrb	r3, [r6]
   206cc:	cmp	r3, #0
   206d0:	beq	2074c <__assert_fail@plt+0xe188>
   206d4:	ldr	r1, [sl, #24]
   206d8:	mov	r0, r6
   206dc:	bl	25d84 <__assert_fail@plt+0x137c0>
   206e0:	subs	r9, r0, #0
   206e4:	beq	207b8 <__assert_fail@plt+0xe1f4>
   206e8:	sub	r8, r9, r6
   206ec:	cmp	r7, r8
   206f0:	bls	20740 <__assert_fail@plt+0xe17c>
   206f4:	sub	r7, r7, r8
   206f8:	mov	r2, r8
   206fc:	mov	r1, r6
   20700:	mov	r0, r4
   20704:	bl	12360 <strncpy@plt>
   20708:	add	r4, r4, r8
   2070c:	cmp	fp, r7
   20710:	bcs	2073c <__assert_fail@plt+0xe178>
   20714:	sub	r7, r7, fp
   20718:	ldr	r3, [sp, #64]	; 0x40
   2071c:	cmp	r3, #0
   20720:	beq	206a4 <__assert_fail@plt+0xe0e0>
   20724:	mov	r1, r3
   20728:	mov	r0, r4
   2072c:	bl	12180 <strcpy@plt>
   20730:	ldr	r3, [sp, #68]	; 0x44
   20734:	add	r4, r4, r3
   20738:	b	206a4 <__assert_fail@plt+0xe0e0>
   2073c:	mov	r6, r9
   20740:	ldrb	r3, [r6]
   20744:	cmp	r3, #0
   20748:	bne	20794 <__assert_fail@plt+0xe1d0>
   2074c:	mov	r3, #0
   20750:	strb	r3, [r4], #1
   20754:	ldr	r2, [sp, #80]	; 0x50
   20758:	str	r2, [sp, #8]
   2075c:	str	r3, [sp, #4]
   20760:	str	r3, [sp]
   20764:	ldr	r2, [sp, #16]
   20768:	sub	r3, r4, r2
   2076c:	ldr	r1, [sp, #20]
   20770:	mov	r0, sl
   20774:	bl	2034c <__assert_fail@plt+0xdd88>
   20778:	add	sp, sp, #28
   2077c:	ldrd	r4, [sp]
   20780:	ldrd	r6, [sp, #8]
   20784:	ldrd	r8, [sp, #16]
   20788:	ldrd	sl, [sp, #24]
   2078c:	add	sp, sp, #32
   20790:	pop	{pc}		; (ldr pc, [sp], #4)
   20794:	mov	r2, #5
   20798:	movw	r1, #34372	; 0x8644
   2079c:	movt	r1, #4
   207a0:	mov	r0, #0
   207a4:	bl	12084 <dcgettext@plt>
   207a8:	mov	r2, r0
   207ac:	mov	r1, #0
   207b0:	mov	r0, #1
   207b4:	bl	121bc <error@plt>
   207b8:	cmp	r5, r7
   207bc:	bcs	20740 <__assert_fail@plt+0xe17c>
   207c0:	sub	r7, r7, r5
   207c4:	mov	r2, r5
   207c8:	mov	r1, r6
   207cc:	mov	r0, r4
   207d0:	bl	12360 <strncpy@plt>
   207d4:	add	r4, r4, r5
   207d8:	add	r6, r6, r5
   207dc:	mov	r5, #0
   207e0:	b	206c8 <__assert_fail@plt+0xe104>
   207e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   207e8:	strd	r6, [sp, #8]
   207ec:	strd	r8, [sp, #16]
   207f0:	strd	sl, [sp, #24]
   207f4:	str	lr, [sp, #32]
   207f8:	sub	sp, sp, #20
   207fc:	mov	r7, r0
   20800:	mov	r6, r1
   20804:	mov	r3, #0
   20808:	str	r3, [sp, #8]
   2080c:	str	r3, [sp, #4]
   20810:	str	r3, [sp]
   20814:	movw	r2, #34276	; 0x85e4
   20818:	movt	r2, #4
   2081c:	bl	2034c <__assert_fail@plt+0xdd88>
   20820:	ldr	r3, [r6]
   20824:	cmp	r3, #0
   20828:	beq	20860 <__assert_fail@plt+0xe29c>
   2082c:	sub	r3, r3, #-1073741823	; 0xc0000001
   20830:	lsl	r0, r3, #2
   20834:	ldr	r2, [r6, #4]
   20838:	ldr	r3, [r2, r3, lsl #2]
   2083c:	cmp	r3, #0
   20840:	bne	2087c <__assert_fail@plt+0xe2b8>
   20844:	add	r0, r0, #8
   20848:	bl	2e348 <__assert_fail@plt+0x1bd84>
   2084c:	mov	r8, r0
   20850:	ldr	r4, [r6]
   20854:	mov	r9, #0
   20858:	mov	sl, r9
   2085c:	b	20994 <__assert_fail@plt+0xe3d0>
   20860:	ldr	r3, [pc, #620]	; 20ad4 <__assert_fail@plt+0xe510>
   20864:	movw	r2, #261	; 0x105
   20868:	movw	r1, #34252	; 0x85cc
   2086c:	movt	r1, #4
   20870:	movw	r0, #34392	; 0x8658
   20874:	movt	r0, #4
   20878:	bl	125c4 <__assert_fail@plt>
   2087c:	ldr	r3, [pc, #592]	; 20ad4 <__assert_fail@plt+0xe510>
   20880:	movw	r2, #262	; 0x106
   20884:	movw	r1, #34252	; 0x85cc
   20888:	movt	r1, #4
   2088c:	movw	r0, #34412	; 0x866c
   20890:	movt	r0, #4
   20894:	bl	125c4 <__assert_fail@plt>
   20898:	ldr	r3, [pc, #568]	; 20ad8 <__assert_fail@plt+0xe514>
   2089c:	mov	r2, #242	; 0xf2
   208a0:	movw	r1, #34252	; 0x85cc
   208a4:	movt	r1, #4
   208a8:	movw	r0, #34456	; 0x8698
   208ac:	movt	r0, #4
   208b0:	bl	125c4 <__assert_fail@plt>
   208b4:	mov	r5, r3
   208b8:	b	20a14 <__assert_fail@plt+0xe450>
   208bc:	ldr	r3, [r6, #36]	; 0x24
   208c0:	cmp	r4, r3
   208c4:	strhi	r4, [r6, #36]	; 0x24
   208c8:	ldr	r3, [r6, #36]	; 0x24
   208cc:	cmp	r3, #0
   208d0:	beq	208e0 <__assert_fail@plt+0xe31c>
   208d4:	ldr	r2, [r6, #40]	; 0x28
   208d8:	cmp	r3, r2
   208dc:	bcc	20914 <__assert_fail@plt+0xe350>
   208e0:	cmn	r4, #1
   208e4:	addne	r4, r4, #1
   208e8:	ldr	r3, [r7, #28]
   208ec:	cmp	r3, #0
   208f0:	beq	20908 <__assert_fail@plt+0xe344>
   208f4:	add	r2, r3, #1
   208f8:	cmp	r4, r2
   208fc:	movcc	r4, r2
   20900:	cmp	r4, #0
   20904:	moveq	r4, #1
   20908:	add	r9, r9, r5
   2090c:	sub	r9, r9, r3
   20910:	b	2097c <__assert_fail@plt+0xe3b8>
   20914:	sub	r3, r2, r3
   20918:	cmp	r3, #1
   2091c:	addhi	r4, r4, r3, lsr #1
   20920:	addls	r4, r4, #1
   20924:	ldr	r3, [r7, #28]
   20928:	cmp	r3, #0
   2092c:	beq	20900 <__assert_fail@plt+0xe33c>
   20930:	b	208f4 <__assert_fail@plt+0xe330>
   20934:	mov	r2, #5
   20938:	movw	r1, #34488	; 0x86b8
   2093c:	movt	r1, #4
   20940:	mov	r0, #0
   20944:	bl	12084 <dcgettext@plt>
   20948:	mov	r2, r0
   2094c:	mov	r1, #0
   20950:	mov	r0, #1
   20954:	bl	121bc <error@plt>
   20958:	lsr	r4, r4, #1
   2095c:	ldr	r3, [r7, #28]
   20960:	cmp	r3, #0
   20964:	beq	20974 <__assert_fail@plt+0xe3b0>
   20968:	add	r3, r3, #1
   2096c:	cmp	r4, r3
   20970:	movcc	r4, r3
   20974:	cmp	r4, #0
   20978:	moveq	r4, #1
   2097c:	add	r2, r9, #1
   20980:	ldr	r3, [r6]
   20984:	ldr	r1, [r7, #28]
   20988:	sub	r3, r3, r1
   2098c:	cmp	r2, r3
   20990:	bcs	20a90 <__assert_fail@plt+0xe4cc>
   20994:	ldr	r3, [r7, #28]
   20998:	cmp	r3, #0
   2099c:	beq	209bc <__assert_fail@plt+0xe3f8>
   209a0:	ldr	r2, [r6, #4]
   209a4:	sub	r1, r8, #4
   209a8:	add	ip, r2, r3, lsl #2
   209ac:	ldr	r0, [r2], #4
   209b0:	str	r0, [r1, #4]!
   209b4:	cmp	r2, ip
   209b8:	bne	209ac <__assert_fail@plt+0xe3e8>
   209bc:	add	r0, r9, r3
   209c0:	ldr	r1, [r6]
   209c4:	cmp	r0, r1
   209c8:	movcs	r2, #0
   209cc:	movcc	r2, #1
   209d0:	cmp	r4, r3
   209d4:	movls	r2, #0
   209d8:	cmp	r2, #0
   209dc:	beq	208b4 <__assert_fail@plt+0xe2f0>
   209e0:	ldr	r2, [r6, #4]
   209e4:	add	r2, r2, r0, lsl #2
   209e8:	add	r0, r8, r3, lsl #2
   209ec:	mov	r5, r3
   209f0:	add	r5, r5, #1
   209f4:	ldr	ip, [r2], #4
   209f8:	str	ip, [r0], #4
   209fc:	add	ip, r9, r5
   20a00:	cmp	r1, ip
   20a04:	cmphi	r4, r5
   20a08:	bhi	209f0 <__assert_fail@plt+0xe42c>
   20a0c:	cmp	r3, r5
   20a10:	bhi	20898 <__assert_fail@plt+0xe2d4>
   20a14:	str	sl, [r8, r5, lsl #2]
   20a18:	ldr	fp, [r7, #32]
   20a1c:	mov	r3, r8
   20a20:	mov	r2, r5
   20a24:	ldr	r1, [r6, #24]
   20a28:	mov	r0, r7
   20a2c:	blx	fp
   20a30:	cmp	r0, #0
   20a34:	bne	208bc <__assert_fail@plt+0xe2f8>
   20a38:	ldr	r3, [r7, #28]
   20a3c:	add	r3, r3, #1
   20a40:	cmp	r3, r4
   20a44:	bcs	20934 <__assert_fail@plt+0xe370>
   20a48:	ldr	r2, [r6, #40]	; 0x28
   20a4c:	clz	r3, r2
   20a50:	lsr	r3, r3, #5
   20a54:	cmp	r4, r2
   20a58:	orrcc	r3, r3, #1
   20a5c:	cmp	r3, #0
   20a60:	strne	r4, [r6, #40]	; 0x28
   20a64:	ldr	r3, [r6, #36]	; 0x24
   20a68:	cmp	r3, #0
   20a6c:	beq	20958 <__assert_fail@plt+0xe394>
   20a70:	ldr	r2, [r6, #40]	; 0x28
   20a74:	cmp	r3, r2
   20a78:	bcs	20958 <__assert_fail@plt+0xe394>
   20a7c:	sub	r3, r2, r3
   20a80:	cmp	r3, #1
   20a84:	subhi	r4, r4, r3, lsr #1
   20a88:	subls	r4, r4, #1
   20a8c:	b	2095c <__assert_fail@plt+0xe398>
   20a90:	mov	r0, r8
   20a94:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   20a98:	ldr	r3, [r7, #28]
   20a9c:	str	r3, [r6]
   20aa0:	ldr	r3, [r6, #20]
   20aa4:	str	r3, [r6, #16]
   20aa8:	mov	r3, #0
   20aac:	str	r3, [r6, #28]
   20ab0:	mvn	r3, #0
   20ab4:	str	r3, [r6, #32]
   20ab8:	add	sp, sp, #20
   20abc:	ldrd	r4, [sp]
   20ac0:	ldrd	r6, [sp, #8]
   20ac4:	ldrd	r8, [sp, #16]
   20ac8:	ldrd	sl, [sp, #24]
   20acc:	add	sp, sp, #32
   20ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   20ad4:	andeq	r8, r4, r0, asr r5
   20ad8:	andeq	r8, r4, ip, asr r5
   20adc:	str	r4, [sp, #-8]!
   20ae0:	str	lr, [sp, #4]
   20ae4:	mov	r0, #0
   20ae8:	bl	1209c <sysconf@plt>
   20aec:	cmp	r0, #0
   20af0:	mvnle	r0, #-2147483648	; 0x80000000
   20af4:	ldr	r4, [sp]
   20af8:	add	sp, sp, #4
   20afc:	pop	{pc}		; (ldr pc, [sp], #4)
   20b00:	strd	r4, [sp, #-16]!
   20b04:	str	r6, [sp, #8]
   20b08:	str	lr, [sp, #12]
   20b0c:	movw	r3, #46396	; 0xb53c
   20b10:	movt	r3, #5
   20b14:	ldr	r4, [r3]
   20b18:	ldr	r0, [r4]
   20b1c:	cmp	r0, #0
   20b20:	beq	20b54 <__assert_fail@plt+0xe590>
   20b24:	mov	r5, #0
   20b28:	bl	122d0 <strlen@plt>
   20b2c:	add	r0, r0, #1
   20b30:	add	r5, r5, r0
   20b34:	ldr	r0, [r4, #4]!
   20b38:	cmp	r0, #0
   20b3c:	bne	20b28 <__assert_fail@plt+0xe564>
   20b40:	mov	r0, r5
   20b44:	ldrd	r4, [sp]
   20b48:	ldr	r6, [sp, #8]
   20b4c:	add	sp, sp, #12
   20b50:	pop	{pc}		; (ldr pc, [sp], #4)
   20b54:	mov	r5, #0
   20b58:	b	20b40 <__assert_fail@plt+0xe57c>
   20b5c:	strd	r4, [sp, #-16]!
   20b60:	str	r6, [sp, #8]
   20b64:	str	lr, [sp, #12]
   20b68:	mov	r4, r0
   20b6c:	mov	r6, r1
   20b70:	bl	20b00 <__assert_fail@plt+0xe53c>
   20b74:	mov	r5, r0
   20b78:	mov	r3, #4096	; 0x1000
   20b7c:	str	r3, [r4, #8]
   20b80:	bl	20adc <__assert_fail@plt+0xe518>
   20b84:	str	r0, [r4, #4]
   20b88:	mov	r3, #0
   20b8c:	str	r3, [r4]
   20b90:	cmp	r0, r5
   20b94:	bcc	20c18 <__assert_fail@plt+0xe654>
   20b98:	add	r3, r5, r6
   20b9c:	cmp	r0, r3
   20ba0:	bls	20c20 <__assert_fail@plt+0xe65c>
   20ba4:	sub	r0, r0, r6
   20ba8:	sub	r1, r0, r5
   20bac:	str	r1, [r4, #4]
   20bb0:	lsr	r3, r1, #2
   20bb4:	sub	r3, r3, #2
   20bb8:	str	r3, [r4, #16]
   20bbc:	cmp	r3, #0
   20bc0:	beq	20bfc <__assert_fail@plt+0xe638>
   20bc4:	mov	r0, #0
   20bc8:	str	r0, [r4, #20]
   20bcc:	str	r0, [r4, #24]
   20bd0:	str	r0, [r4, #28]
   20bd4:	movw	r3, #684	; 0x2ac
   20bd8:	movt	r3, #2
   20bdc:	str	r3, [r4, #32]
   20be0:	str	r0, [r4, #36]	; 0x24
   20be4:	str	r0, [r4, #40]	; 0x28
   20be8:	str	r1, [r4, #12]
   20bec:	ldrd	r4, [sp]
   20bf0:	ldr	r6, [sp, #8]
   20bf4:	add	sp, sp, #12
   20bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   20bfc:	ldr	r3, [pc, #36]	; 20c28 <__assert_fail@plt+0xe664>
   20c00:	movw	r2, #518	; 0x206
   20c04:	movw	r1, #34252	; 0x85cc
   20c08:	movt	r1, #4
   20c0c:	movw	r0, #34540	; 0x86ec
   20c10:	movt	r0, #4
   20c14:	bl	125c4 <__assert_fail@plt>
   20c18:	mov	r0, #1
   20c1c:	b	20bec <__assert_fail@plt+0xe628>
   20c20:	mov	r0, #2
   20c24:	b	20bec <__assert_fail@plt+0xe628>
   20c28:	andeq	r8, r4, r8, ror #10
   20c2c:	ldr	r3, [r0, #4]
   20c30:	cmp	r3, #131072	; 0x20000
   20c34:	bcs	20c40 <__assert_fail@plt+0xe67c>
   20c38:	str	r3, [r0, #12]
   20c3c:	bx	lr
   20c40:	ldr	r3, [r0, #8]
   20c44:	cmp	r3, #131072	; 0x20000
   20c48:	movls	r3, #131072	; 0x20000
   20c4c:	str	r3, [r0, #12]
   20c50:	bx	lr
   20c54:	strd	r4, [sp, #-16]!
   20c58:	str	r6, [sp, #8]
   20c5c:	str	lr, [sp, #12]
   20c60:	mov	r3, #0
   20c64:	str	r3, [r1]
   20c68:	str	r3, [r1, #16]
   20c6c:	str	r3, [r1, #4]
   20c70:	str	r3, [r1, #8]
   20c74:	str	r3, [r1, #36]	; 0x24
   20c78:	str	r3, [r1, #40]	; 0x28
   20c7c:	ldr	r0, [r0, #12]
   20c80:	movw	r3, #63487	; 0xf7ff
   20c84:	movt	r3, #32767	; 0x7fff
   20c88:	cmp	r0, r3
   20c8c:	bhi	20cd0 <__assert_fail@plt+0xe70c>
   20c90:	mov	r4, r1
   20c94:	mov	r5, r2
   20c98:	add	r0, r0, #1
   20c9c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   20ca0:	str	r0, [r4, #12]
   20ca4:	mov	r3, #0
   20ca8:	str	r3, [r4, #20]
   20cac:	str	r3, [r4, #16]
   20cb0:	str	r3, [r4, #28]
   20cb4:	mvn	r3, #0
   20cb8:	str	r3, [r4, #32]
   20cbc:	str	r5, [r4, #24]
   20cc0:	ldrd	r4, [sp]
   20cc4:	ldr	r6, [sp, #8]
   20cc8:	add	sp, sp, #12
   20ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   20cd0:	ldr	r3, [pc, #20]	; 20cec <__assert_fail@plt+0xe728>
   20cd4:	mov	r2, #572	; 0x23c
   20cd8:	movw	r1, #34252	; 0x85cc
   20cdc:	movt	r1, #4
   20ce0:	movw	r0, #34564	; 0x8704
   20ce4:	movt	r0, #4
   20ce8:	bl	125c4 <__assert_fail@plt>
   20cec:	andeq	r8, r4, ip, ror r5
   20cf0:	ldr	r3, [r0, #28]
   20cf4:	str	r3, [r1]
   20cf8:	ldr	r3, [r1, #20]
   20cfc:	str	r3, [r1, #16]
   20d00:	mov	r3, #0
   20d04:	str	r3, [r1, #28]
   20d08:	mvn	r3, #0
   20d0c:	str	r3, [r1, #32]
   20d10:	bx	lr
   20d14:	strd	r4, [sp, #-16]!
   20d18:	str	r6, [sp, #8]
   20d1c:	str	lr, [sp, #12]
   20d20:	mov	r5, r0
   20d24:	ldr	r0, [r0]
   20d28:	cmp	r0, #0
   20d2c:	beq	20d7c <__assert_fail@plt+0xe7b8>
   20d30:	mov	r4, #0
   20d34:	mov	r6, r4
   20d38:	add	r4, r4, #1
   20d3c:	bl	122d0 <strlen@plt>
   20d40:	add	r6, r6, r0
   20d44:	ldr	r0, [r5, #4]!
   20d48:	cmp	r0, #0
   20d4c:	bne	20d38 <__assert_fail@plt+0xe774>
   20d50:	mov	r1, r4
   20d54:	movw	r0, #34600	; 0x8728
   20d58:	movt	r0, #4
   20d5c:	bl	202b4 <__assert_fail@plt+0xdcf0>
   20d60:	cmp	r0, #0
   20d64:	movne	r0, #1
   20d68:	beq	20d88 <__assert_fail@plt+0xe7c4>
   20d6c:	ldrd	r4, [sp]
   20d70:	ldr	r6, [sp, #8]
   20d74:	add	sp, sp, #12
   20d78:	pop	{pc}		; (ldr pc, [sp], #4)
   20d7c:	mov	r4, #0
   20d80:	mov	r6, r4
   20d84:	b	20d50 <__assert_fail@plt+0xe78c>
   20d88:	mov	r1, r6
   20d8c:	movw	r0, #34640	; 0x8750
   20d90:	movt	r0, #4
   20d94:	bl	202b4 <__assert_fail@plt+0xdcf0>
   20d98:	adds	r0, r0, #0
   20d9c:	movne	r0, #1
   20da0:	b	20d6c <__assert_fail@plt+0xe7a8>
   20da4:	strd	r4, [sp, #-16]!
   20da8:	str	r6, [sp, #8]
   20dac:	str	lr, [sp, #12]
   20db0:	sub	sp, sp, #8
   20db4:	mov	r6, r0
   20db8:	mov	r4, r1
   20dbc:	mov	r5, r2
   20dc0:	mov	r0, sp
   20dc4:	bl	2d560 <__assert_fail@plt+0x1af9c>
   20dc8:	cmp	r0, #0
   20dcc:	bne	20e68 <__assert_fail@plt+0xe8a4>
   20dd0:	mov	r0, r6
   20dd4:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   20dd8:	cmp	r0, #0
   20ddc:	bne	20e50 <__assert_fail@plt+0xe88c>
   20de0:	mov	r0, r5
   20de4:	blx	r4
   20de8:	subs	r4, r0, #0
   20dec:	blt	20e0c <__assert_fail@plt+0xe848>
   20df0:	mov	r0, sp
   20df4:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   20df8:	cmp	r0, #0
   20dfc:	bne	20e5c <__assert_fail@plt+0xe898>
   20e00:	mov	r0, sp
   20e04:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   20e08:	b	20e38 <__assert_fail@plt+0xe874>
   20e0c:	bl	12318 <__errno_location@plt>
   20e10:	mov	r6, r0
   20e14:	ldr	r5, [r0]
   20e18:	mov	r0, sp
   20e1c:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   20e20:	cmp	r0, #0
   20e24:	bne	20e5c <__assert_fail@plt+0xe898>
   20e28:	mov	r0, sp
   20e2c:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   20e30:	cmp	r5, #0
   20e34:	strne	r5, [r6]
   20e38:	mov	r0, r4
   20e3c:	add	sp, sp, #8
   20e40:	ldrd	r4, [sp]
   20e44:	ldr	r6, [sp, #8]
   20e48:	add	sp, sp, #12
   20e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   20e50:	bl	12318 <__errno_location@plt>
   20e54:	ldr	r0, [r0]
   20e58:	bl	274e0 <__assert_fail@plt+0x14f1c>
   20e5c:	bl	12318 <__errno_location@plt>
   20e60:	ldr	r0, [r0]
   20e64:	bl	274e0 <__assert_fail@plt+0x14f1c>
   20e68:	bl	12318 <__errno_location@plt>
   20e6c:	ldr	r0, [r0]
   20e70:	bl	274a0 <__assert_fail@plt+0x14edc>
   20e74:	strd	r4, [sp, #-16]!
   20e78:	str	r6, [sp, #8]
   20e7c:	str	lr, [sp, #12]
   20e80:	sub	sp, sp, #8
   20e84:	mov	r5, r1
   20e88:	mov	r6, r2
   20e8c:	cmn	r0, #100	; 0x64
   20e90:	beq	20ee4 <__assert_fail@plt+0xe920>
   20e94:	mov	r4, r0
   20e98:	mov	r0, sp
   20e9c:	bl	2d560 <__assert_fail@plt+0x1af9c>
   20ea0:	cmp	r0, #0
   20ea4:	bne	20f08 <__assert_fail@plt+0xe944>
   20ea8:	mov	r0, r4
   20eac:	bl	124c8 <fchdir@plt>
   20eb0:	cmp	r0, #0
   20eb4:	bne	20f14 <__assert_fail@plt+0xe950>
   20eb8:	mov	r0, r6
   20ebc:	blx	r5
   20ec0:	subs	r4, r0, #0
   20ec4:	blt	20f34 <__assert_fail@plt+0xe970>
   20ec8:	mov	r0, sp
   20ecc:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   20ed0:	cmp	r0, #0
   20ed4:	bne	20f64 <__assert_fail@plt+0xe9a0>
   20ed8:	mov	r0, sp
   20edc:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   20ee0:	b	20ef0 <__assert_fail@plt+0xe92c>
   20ee4:	mov	r0, r2
   20ee8:	blx	r1
   20eec:	mov	r4, r0
   20ef0:	mov	r0, r4
   20ef4:	add	sp, sp, #8
   20ef8:	ldrd	r4, [sp]
   20efc:	ldr	r6, [sp, #8]
   20f00:	add	sp, sp, #12
   20f04:	pop	{pc}		; (ldr pc, [sp], #4)
   20f08:	bl	12318 <__errno_location@plt>
   20f0c:	ldr	r0, [r0]
   20f10:	bl	274a0 <__assert_fail@plt+0x14edc>
   20f14:	bl	12318 <__errno_location@plt>
   20f18:	mov	r4, r0
   20f1c:	ldr	r5, [r0]
   20f20:	mov	r0, sp
   20f24:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   20f28:	str	r5, [r4]
   20f2c:	mvn	r4, #0
   20f30:	b	20ef0 <__assert_fail@plt+0xe92c>
   20f34:	bl	12318 <__errno_location@plt>
   20f38:	mov	r6, r0
   20f3c:	ldr	r5, [r0]
   20f40:	mov	r0, sp
   20f44:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   20f48:	cmp	r0, #0
   20f4c:	bne	20f64 <__assert_fail@plt+0xe9a0>
   20f50:	mov	r0, sp
   20f54:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   20f58:	cmp	r5, #0
   20f5c:	strne	r5, [r6]
   20f60:	b	20ef0 <__assert_fail@plt+0xe92c>
   20f64:	bl	12318 <__errno_location@plt>
   20f68:	ldr	r0, [r0]
   20f6c:	bl	274e0 <__assert_fail@plt+0x14f1c>
   20f70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20f74:	strd	r6, [sp, #8]
   20f78:	str	r8, [sp, #16]
   20f7c:	str	lr, [sp, #20]
   20f80:	mov	r4, r0
   20f84:	mov	r5, r1
   20f88:	mov	r8, r2
   20f8c:	bl	12318 <__errno_location@plt>
   20f90:	ldr	r7, [r0]
   20f94:	cmp	r5, #0
   20f98:	beq	20fcc <__assert_fail@plt+0xea08>
   20f9c:	mov	r6, r0
   20fa0:	ldr	r3, [r8]
   20fa4:	cmp	r3, #0
   20fa8:	beq	21070 <__assert_fail@plt+0xeaac>
   20fac:	cmp	r3, r5
   20fb0:	movcs	r0, r4
   20fb4:	bcs	21008 <__assert_fail@plt+0xea44>
   20fb8:	lsl	r0, r3, #1
   20fbc:	cmp	r3, r0
   20fc0:	bls	21080 <__assert_fail@plt+0xeabc>
   20fc4:	mov	r0, r5
   20fc8:	b	21054 <__assert_fail@plt+0xea90>
   20fcc:	movw	r3, #34680	; 0x8778
   20fd0:	movt	r3, #4
   20fd4:	mov	r2, #71	; 0x47
   20fd8:	movw	r1, #34692	; 0x8784
   20fdc:	movt	r1, #4
   20fe0:	movw	r0, #34704	; 0x8790
   20fe4:	movt	r0, #4
   20fe8:	bl	125c4 <__assert_fail@plt>
   20fec:	mov	r0, r5
   20ff0:	cmp	r3, #0
   20ff4:	bne	21048 <__assert_fail@plt+0xea84>
   20ff8:	cmp	r4, #0
   20ffc:	bne	21028 <__assert_fail@plt+0xea64>
   21000:	str	r0, [r8]
   21004:	bl	32148 <__assert_fail@plt+0x1fb84>
   21008:	cmp	r0, #0
   2100c:	beq	21014 <__assert_fail@plt+0xea50>
   21010:	str	r7, [r6]
   21014:	ldrd	r4, [sp]
   21018:	ldrd	r6, [sp, #8]
   2101c:	ldr	r8, [sp, #16]
   21020:	add	sp, sp, #20
   21024:	pop	{pc}		; (ldr pc, [sp], #4)
   21028:	movw	r3, #34680	; 0x8778
   2102c:	movt	r3, #4
   21030:	mov	r2, #79	; 0x4f
   21034:	movw	r1, #34692	; 0x8784
   21038:	movt	r1, #4
   2103c:	movw	r0, #34716	; 0x879c
   21040:	movt	r0, #4
   21044:	bl	125c4 <__assert_fail@plt>
   21048:	cmp	r3, r0
   2104c:	moveq	r0, r4
   21050:	beq	21008 <__assert_fail@plt+0xea44>
   21054:	str	r0, [r8]
   21058:	mov	r1, r0
   2105c:	mov	r0, r4
   21060:	bl	32ce0 <__assert_fail@plt+0x2071c>
   21064:	cmp	r0, #0
   21068:	bne	21010 <__assert_fail@plt+0xea4c>
   2106c:	b	21014 <__assert_fail@plt+0xea50>
   21070:	cmp	r5, #16
   21074:	movls	r0, #16
   21078:	bls	20ff8 <__assert_fail@plt+0xea34>
   2107c:	mov	r0, #32
   21080:	cmp	r5, r0
   21084:	bls	20ff0 <__assert_fail@plt+0xea2c>
   21088:	lsl	r2, r0, #1
   2108c:	cmp	r2, r0
   21090:	bcc	20fec <__assert_fail@plt+0xea28>
   21094:	mov	r0, r2
   21098:	b	21080 <__assert_fail@plt+0xeabc>
   2109c:	str	r4, [sp, #-8]!
   210a0:	str	lr, [sp, #4]
   210a4:	mov	r4, r0
   210a8:	bl	20f70 <__assert_fail@plt+0xe9ac>
   210ac:	cmp	r0, #0
   210b0:	beq	210c0 <__assert_fail@plt+0xeafc>
   210b4:	ldr	r4, [sp]
   210b8:	add	sp, sp, #4
   210bc:	pop	{pc}		; (ldr pc, [sp], #4)
   210c0:	mov	r0, r4
   210c4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   210c8:	bl	2e7dc <__assert_fail@plt+0x1c218>
   210cc:	strd	r4, [sp, #-16]!
   210d0:	str	r6, [sp, #8]
   210d4:	str	lr, [sp, #12]
   210d8:	mov	r6, r0
   210dc:	mov	r4, r1
   210e0:	mov	r1, #1
   210e4:	bl	2f8cc <__assert_fail@plt+0x1d308>
   210e8:	ands	r5, r0, #1
   210ec:	movne	r5, #0
   210f0:	beq	21108 <__assert_fail@plt+0xeb44>
   210f4:	mov	r0, r5
   210f8:	ldrd	r4, [sp]
   210fc:	ldr	r6, [sp, #8]
   21100:	add	sp, sp, #12
   21104:	pop	{pc}		; (ldr pc, [sp], #4)
   21108:	ldr	r1, [r4, #4]
   2110c:	add	r1, r1, #1
   21110:	add	r2, r4, #8
   21114:	lsl	r1, r1, #2
   21118:	ldr	r0, [r4]
   2111c:	bl	20f70 <__assert_fail@plt+0xe9ac>
   21120:	cmp	r0, #0
   21124:	beq	21144 <__assert_fail@plt+0xeb80>
   21128:	str	r0, [r4]
   2112c:	ldr	r3, [r4, #4]
   21130:	str	r6, [r0, r3, lsl #2]
   21134:	ldr	r3, [r4, #4]
   21138:	add	r3, r3, #1
   2113c:	str	r3, [r4, #4]
   21140:	b	210f4 <__assert_fail@plt+0xeb30>
   21144:	mvn	r5, #0
   21148:	b	210f4 <__assert_fail@plt+0xeb30>
   2114c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21150:	strd	r6, [sp, #8]
   21154:	strd	r8, [sp, #16]
   21158:	str	lr, [sp, #24]
   2115c:	sub	sp, sp, #20
   21160:	movw	r0, #34764	; 0x87cc
   21164:	movt	r0, #4
   21168:	bl	22db4 <__assert_fail@plt+0x107f0>
   2116c:	subs	r5, r0, #0
   21170:	beq	21204 <__assert_fail@plt+0xec40>
   21174:	bl	12318 <__errno_location@plt>
   21178:	mov	r7, r0
   2117c:	mov	r8, #0
   21180:	mvn	r4, #0
   21184:	mov	r6, r8
   21188:	mov	r9, #1
   2118c:	b	21264 <__assert_fail@plt+0xeca0>
   21190:	ldr	r6, [r7]
   21194:	cmp	r6, #0
   21198:	bne	211d0 <__assert_fail@plt+0xec0c>
   2119c:	mov	r0, r5
   211a0:	bl	12594 <closedir@plt>
   211a4:	cmp	r8, #0
   211a8:	beq	21204 <__assert_fail@plt+0xec40>
   211ac:	cmp	r4, #0
   211b0:	blt	21204 <__assert_fail@plt+0xec40>
   211b4:	mov	r0, r4
   211b8:	add	sp, sp, #20
   211bc:	ldrd	r4, [sp]
   211c0:	ldrd	r6, [sp, #8]
   211c4:	ldrd	r8, [sp, #16]
   211c8:	add	sp, sp, #24
   211cc:	pop	{pc}		; (ldr pc, [sp], #4)
   211d0:	movw	r2, #34764	; 0x87cc
   211d4:	movt	r2, #4
   211d8:	mov	r1, #8
   211dc:	mov	r0, #0
   211e0:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   211e4:	mov	r3, r0
   211e8:	movw	r2, #35960	; 0x8c78
   211ec:	movt	r2, #4
   211f0:	mov	r1, r6
   211f4:	mov	r0, #0
   211f8:	bl	121bc <error@plt>
   211fc:	mov	r0, r5
   21200:	bl	12594 <closedir@plt>
   21204:	mov	r0, #4
   21208:	bl	1209c <sysconf@plt>
   2120c:	mov	r4, r0
   21210:	cmn	r0, #1
   21214:	movne	r4, r0
   21218:	moveq	r4, #20
   2121c:	mov	r1, sp
   21220:	mov	r0, #7
   21224:	bl	120a8 <getrlimit64@plt>
   21228:	cmp	r0, #0
   2122c:	bne	211b4 <__assert_fail@plt+0xebf0>
   21230:	ldrd	r2, [sp]
   21234:	mvn	r0, #0
   21238:	mvn	r1, #0
   2123c:	cmp	r3, r1
   21240:	cmpeq	r2, r0
   21244:	movne	r4, r2
   21248:	b	211b4 <__assert_fail@plt+0xebf0>
   2124c:	mov	r1, r6
   21250:	add	r0, r0, #19
   21254:	bl	22630 <__assert_fail@plt+0x1006c>
   21258:	cmp	r4, r0
   2125c:	movlt	r4, r0
   21260:	mov	r8, r9
   21264:	str	r6, [r7]
   21268:	mov	r0, r5
   2126c:	bl	1248c <readdir64@plt>
   21270:	cmp	r0, #0
   21274:	beq	21190 <__assert_fail@plt+0xebcc>
   21278:	ldrb	r3, [r0, #19]
   2127c:	cmp	r3, #46	; 0x2e
   21280:	bne	2124c <__assert_fail@plt+0xec88>
   21284:	ldrb	r3, [r0, #20]
   21288:	cmp	r3, #0
   2128c:	beq	21264 <__assert_fail@plt+0xeca0>
   21290:	ldrh	r3, [r0, #20]
   21294:	cmp	r3, #46	; 0x2e
   21298:	bne	2124c <__assert_fail@plt+0xec88>
   2129c:	b	21264 <__assert_fail@plt+0xeca0>
   212a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   212a4:	strd	r6, [sp, #8]
   212a8:	strd	r8, [sp, #16]
   212ac:	strd	sl, [sp, #24]
   212b0:	str	lr, [sp, #32]
   212b4:	sub	sp, sp, #524	; 0x20c
   212b8:	str	r3, [sp, #4]
   212bc:	cmp	r0, r1
   212c0:	bge	21330 <__assert_fail@plt+0xed6c>
   212c4:	mov	r7, r0
   212c8:	mov	fp, r1
   212cc:	mov	sl, r2
   212d0:	mov	r8, #0
   212d4:	mov	r9, #5
   212d8:	b	2135c <__assert_fail@plt+0xed98>
   212dc:	add	r5, r5, #1
   212e0:	add	r4, r4, #8
   212e4:	cmp	r5, r6
   212e8:	bge	21350 <__assert_fail@plt+0xed8c>
   212ec:	ldrsh	r3, [r4, #6]
   212f0:	cmp	r3, #32
   212f4:	beq	212dc <__assert_fail@plt+0xed18>
   212f8:	ldr	r1, [sp, #4]
   212fc:	ldr	r0, [r4]
   21300:	blx	sl
   21304:	cmp	r0, #0
   21308:	beq	212dc <__assert_fail@plt+0xed18>
   2130c:	add	sp, sp, #524	; 0x20c
   21310:	ldrd	r4, [sp]
   21314:	ldrd	r6, [sp, #8]
   21318:	ldrd	r8, [sp, #16]
   2131c:	ldrd	sl, [sp, #24]
   21320:	add	sp, sp, #32
   21324:	pop	{pc}		; (ldr pc, [sp], #4)
   21328:	mov	r0, #0
   2132c:	b	2130c <__assert_fail@plt+0xed48>
   21330:	mov	r0, #0
   21334:	b	2130c <__assert_fail@plt+0xed48>
   21338:	mov	r2, r8
   2133c:	mov	r1, r6
   21340:	add	r0, sp, #8
   21344:	bl	12120 <poll@plt>
   21348:	cmn	r0, #1
   2134c:	beq	2130c <__assert_fail@plt+0xed48>
   21350:	add	r7, r7, r6
   21354:	cmp	fp, r7
   21358:	ble	21328 <__assert_fail@plt+0xed64>
   2135c:	sub	r3, fp, r7
   21360:	cmp	r3, #64	; 0x40
   21364:	movlt	r6, r3
   21368:	movge	r6, #64	; 0x40
   2136c:	cmp	r3, #0
   21370:	ble	21338 <__assert_fail@plt+0xed74>
   21374:	add	r4, sp, #8
   21378:	mov	r2, r4
   2137c:	mov	r3, #0
   21380:	strh	r9, [r2, #4]
   21384:	strh	r8, [r2, #6]
   21388:	add	r1, r7, r3
   2138c:	str	r1, [r2], #8
   21390:	add	r3, r3, #1
   21394:	cmp	r3, r6
   21398:	blt	21380 <__assert_fail@plt+0xedbc>
   2139c:	mov	r2, r8
   213a0:	mov	r1, r6
   213a4:	add	r0, sp, #8
   213a8:	bl	12120 <poll@plt>
   213ac:	cmn	r0, #1
   213b0:	beq	2130c <__assert_fail@plt+0xed48>
   213b4:	mov	r5, #0
   213b8:	b	212ec <__assert_fail@plt+0xed28>
   213bc:	strd	r4, [sp, #-16]!
   213c0:	str	r6, [sp, #8]
   213c4:	str	lr, [sp, #12]
   213c8:	mov	r5, r0
   213cc:	mov	r4, r1
   213d0:	mov	r1, #1
   213d4:	bl	2f8cc <__assert_fail@plt+0x1d308>
   213d8:	ands	r0, r0, #1
   213dc:	movne	r0, #0
   213e0:	bne	21438 <__assert_fail@plt+0xee74>
   213e4:	ldr	r3, [r4, #8]
   213e8:	ldr	ip, [r4, #4]
   213ec:	cmp	r3, ip
   213f0:	bcs	21430 <__assert_fail@plt+0xee6c>
   213f4:	ldr	r1, [r4]
   213f8:	add	r2, r1, r3, lsl #2
   213fc:	ldr	r1, [r1, r3, lsl #2]
   21400:	cmp	r5, r1
   21404:	ble	21428 <__assert_fail@plt+0xee64>
   21408:	add	r3, r3, #1
   2140c:	str	r3, [r4, #8]
   21410:	cmp	r3, ip
   21414:	beq	21430 <__assert_fail@plt+0xee6c>
   21418:	ldr	r1, [r2, #4]!
   2141c:	add	r3, r3, #1
   21420:	cmp	r1, r5
   21424:	blt	2140c <__assert_fail@plt+0xee48>
   21428:	cmp	r5, r1
   2142c:	beq	21438 <__assert_fail@plt+0xee74>
   21430:	str	r5, [r4, #12]
   21434:	mvn	r0, #0
   21438:	ldrd	r4, [sp]
   2143c:	ldr	r6, [sp, #8]
   21440:	add	sp, sp, #12
   21444:	pop	{pc}		; (ldr pc, [sp], #4)
   21448:	push	{lr}		; (str lr, [sp, #-4]!)
   2144c:	sub	sp, sp, #20
   21450:	bl	2114c <__assert_fail@plt+0xeb88>
   21454:	mov	r1, r0
   21458:	mov	r3, #0
   2145c:	str	r3, [sp, #4]
   21460:	str	r3, [sp, #12]
   21464:	str	r3, [sp, #8]
   21468:	cmn	r0, #-2147483647	; 0x80000001
   2146c:	addne	r1, r0, #1
   21470:	add	r3, sp, #4
   21474:	movw	r2, #4300	; 0x10cc
   21478:	movt	r2, #2
   2147c:	mov	r0, #0
   21480:	bl	212a0 <__assert_fail@plt+0xecdc>
   21484:	movw	r3, #48352	; 0xbce0
   21488:	movt	r3, #5
   2148c:	ldr	r2, [sp, #4]
   21490:	str	r2, [r3]
   21494:	ldr	r2, [sp, #8]
   21498:	str	r2, [r3, #4]
   2149c:	add	sp, sp, #20
   214a0:	pop	{pc}		; (ldr pc, [sp], #4)
   214a4:	push	{r1, r2, r3}
   214a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   214ac:	strd	r6, [sp, #8]
   214b0:	str	r8, [sp, #16]
   214b4:	str	lr, [sp, #20]
   214b8:	sub	sp, sp, #12
   214bc:	mov	r6, r0
   214c0:	ldr	r4, [sp, #36]	; 0x24
   214c4:	tst	r4, #64	; 0x40
   214c8:	addne	r3, sp, #44	; 0x2c
   214cc:	strne	r3, [sp, #4]
   214d0:	ldrne	r7, [sp, #40]	; 0x28
   214d4:	moveq	r7, #0
   214d8:	movw	r3, #48352	; 0xbce0
   214dc:	movt	r3, #5
   214e0:	ldrb	r5, [r3, #8]
   214e4:	cmp	r5, #0
   214e8:	beq	2153c <__assert_fail@plt+0xef78>
   214ec:	mov	r2, r7
   214f0:	orr	r1, r4, #524288	; 0x80000
   214f4:	mov	r0, r6
   214f8:	bl	2300c <__assert_fail@plt+0x10a48>
   214fc:	subs	r4, r0, #0
   21500:	blt	21518 <__assert_fail@plt+0xef54>
   21504:	movw	r3, #48352	; 0xbce0
   21508:	movt	r3, #5
   2150c:	ldrb	r3, [r3, #9]
   21510:	cmp	r3, #0
   21514:	beq	21588 <__assert_fail@plt+0xefc4>
   21518:	mov	r0, r4
   2151c:	add	sp, sp, #12
   21520:	ldrd	r4, [sp]
   21524:	ldrd	r6, [sp, #8]
   21528:	ldr	r8, [sp, #16]
   2152c:	ldr	lr, [sp, #20]
   21530:	add	sp, sp, #24
   21534:	add	sp, sp, #12
   21538:	bx	lr
   2153c:	mov	r1, #524288	; 0x80000
   21540:	movw	r0, #42516	; 0xa614
   21544:	movt	r0, #4
   21548:	bl	2300c <__assert_fail@plt+0x10a48>
   2154c:	subs	r8, r0, #0
   21550:	bge	2156c <__assert_fail@plt+0xefa8>
   21554:	movw	r3, #48352	; 0xbce0
   21558:	movt	r3, #5
   2155c:	strb	r5, [r3, #9]
   21560:	mov	r2, #1
   21564:	strb	r2, [r3, #8]
   21568:	b	214ec <__assert_fail@plt+0xef28>
   2156c:	mov	r1, #1
   21570:	mov	r0, r8
   21574:	bl	2f8cc <__assert_fail@plt+0x1d308>
   21578:	and	r5, r0, #1
   2157c:	mov	r0, r8
   21580:	bl	1257c <close@plt>
   21584:	b	21554 <__assert_fail@plt+0xef90>
   21588:	mov	r1, #1
   2158c:	mov	r0, r4
   21590:	bl	22bf0 <__assert_fail@plt+0x1062c>
   21594:	b	21518 <__assert_fail@plt+0xef54>
   21598:	str	r4, [sp, #-8]!
   2159c:	str	lr, [sp, #4]
   215a0:	movw	r4, #48352	; 0xbce0
   215a4:	movt	r4, #5
   215a8:	ldr	r0, [r4]
   215ac:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   215b0:	mov	r3, #0
   215b4:	str	r3, [r4]
   215b8:	str	r3, [r4, #4]
   215bc:	ldr	r4, [sp]
   215c0:	add	sp, sp, #4
   215c4:	pop	{pc}		; (ldr pc, [sp], #4)
   215c8:	str	r4, [sp, #-8]!
   215cc:	str	lr, [sp, #4]
   215d0:	movw	r0, #34780	; 0x87dc
   215d4:	movt	r0, #4
   215d8:	bl	121f8 <getenv@plt>
   215dc:	adds	r0, r0, #0
   215e0:	movne	r0, #1
   215e4:	ldr	r4, [sp]
   215e8:	add	sp, sp, #4
   215ec:	pop	{pc}		; (ldr pc, [sp], #4)
   215f0:	strd	r4, [sp, #-12]!
   215f4:	str	lr, [sp, #8]
   215f8:	sub	sp, sp, #20
   215fc:	movw	r3, #48352	; 0xbce0
   21600:	movt	r3, #5
   21604:	ldr	r5, [r3]
   21608:	ldr	r4, [r3, #4]
   2160c:	bl	2114c <__assert_fail@plt+0xeb88>
   21610:	mov	r1, r0
   21614:	cmn	r0, #-2147483647	; 0x80000001
   21618:	addne	r1, r0, #1
   2161c:	str	r5, [sp]
   21620:	str	r4, [sp, #4]
   21624:	mov	r0, #0
   21628:	str	r0, [sp, #8]
   2162c:	mvn	r3, #0
   21630:	str	r3, [sp, #12]
   21634:	mov	r3, sp
   21638:	movw	r2, #5052	; 0x13bc
   2163c:	movt	r2, #2
   21640:	bl	212a0 <__assert_fail@plt+0xecdc>
   21644:	ldr	r4, [sp, #12]
   21648:	cmp	r4, #0
   2164c:	bge	21660 <__assert_fail@plt+0xf09c>
   21650:	add	sp, sp, #20
   21654:	ldrd	r4, [sp]
   21658:	add	sp, sp, #8
   2165c:	pop	{pc}		; (ldr pc, [sp], #4)
   21660:	mov	r2, #5
   21664:	movw	r1, #34808	; 0x87f8
   21668:	movt	r1, #4
   2166c:	mov	r0, #0
   21670:	bl	12084 <dcgettext@plt>
   21674:	mov	r3, r4
   21678:	mov	r2, r0
   2167c:	mov	r1, #0
   21680:	mov	r0, r1
   21684:	bl	121bc <error@plt>
   21688:	movw	r3, #34736	; 0x87b0
   2168c:	movt	r3, #4
   21690:	mov	r2, #396	; 0x18c
   21694:	movw	r1, #34960	; 0x8890
   21698:	movt	r1, #4
   2169c:	movw	r0, #34972	; 0x889c
   216a0:	movt	r0, #4
   216a4:	bl	125c4 <__assert_fail@plt>
   216a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   216ac:	strd	r6, [sp, #8]
   216b0:	str	r8, [sp, #16]
   216b4:	str	lr, [sp, #20]
   216b8:	sub	sp, sp, #16
   216bc:	mov	r5, r0
   216c0:	movw	r3, #46408	; 0xb548
   216c4:	movt	r3, #5
   216c8:	ldr	r0, [r3]
   216cc:	bl	2fb38 <__assert_fail@plt+0x1d574>
   216d0:	movw	r3, #46420	; 0xb554
   216d4:	movt	r3, #5
   216d8:	ldr	r4, [r3]
   216dc:	movw	r3, #46280	; 0xb4c8
   216e0:	movt	r3, #5
   216e4:	ldr	r6, [r3]
   216e8:	mov	r2, #5
   216ec:	movw	r1, #34984	; 0x88a8
   216f0:	movt	r1, #4
   216f4:	mov	r0, #0
   216f8:	bl	12084 <dcgettext@plt>
   216fc:	mov	r7, r0
   21700:	mov	r2, #5
   21704:	movw	r1, #35000	; 0x88b8
   21708:	movt	r1, #4
   2170c:	mov	r0, #0
   21710:	bl	12084 <dcgettext@plt>
   21714:	mov	r8, r0
   21718:	mov	r2, #5
   2171c:	movw	r1, #35016	; 0x88c8
   21720:	movt	r1, #4
   21724:	mov	r0, #0
   21728:	bl	12084 <dcgettext@plt>
   2172c:	mov	r3, #0
   21730:	str	r3, [sp, #12]
   21734:	str	r0, [sp, #8]
   21738:	str	r8, [sp, #4]
   2173c:	str	r7, [sp]
   21740:	mov	r3, r6
   21744:	movw	r2, #35032	; 0x88d8
   21748:	movt	r2, #4
   2174c:	mov	r1, r5
   21750:	mov	r0, r4
   21754:	bl	2e288 <__assert_fail@plt+0x1bcc4>
   21758:	add	sp, sp, #16
   2175c:	ldrd	r4, [sp]
   21760:	ldrd	r6, [sp, #8]
   21764:	ldr	r8, [sp, #16]
   21768:	add	sp, sp, #20
   2176c:	pop	{pc}		; (ldr pc, [sp], #4)
   21770:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21774:	strd	r6, [sp, #8]
   21778:	str	r8, [sp, #16]
   2177c:	str	lr, [sp, #20]
   21780:	mov	r4, r0
   21784:	mov	r5, r1
   21788:	movw	r7, #35084	; 0x890c
   2178c:	movt	r7, #4
   21790:	movw	r8, #35096	; 0x8918
   21794:	movt	r8, #4
   21798:	movw	r6, #35088	; 0x8910
   2179c:	movt	r6, #4
   217a0:	b	2181c <__assert_fail@plt+0xf258>
   217a4:	cmp	r2, #9
   217a8:	beq	21878 <__assert_fail@plt+0xf2b4>
   217ac:	cmp	r2, #10
   217b0:	beq	21804 <__assert_fail@plt+0xf240>
   217b4:	cmp	r2, #8
   217b8:	beq	21864 <__assert_fail@plt+0xf2a0>
   217bc:	sub	r3, r2, #33	; 0x21
   217c0:	uxtb	r3, r3
   217c4:	cmp	r3, #93	; 0x5d
   217c8:	bhi	218c0 <__assert_fail@plt+0xf2fc>
   217cc:	mov	r1, r5
   217d0:	mov	r0, r2
   217d4:	bl	124b0 <putc@plt>
   217d8:	cmn	r0, #1
   217dc:	bne	2181c <__assert_fail@plt+0xf258>
   217e0:	mov	r0, #0
   217e4:	b	218d4 <__assert_fail@plt+0xf310>
   217e8:	cmp	r2, #13
   217ec:	bne	217bc <__assert_fail@plt+0xf1f8>
   217f0:	movw	r1, #35076	; 0x8904
   217f4:	movt	r1, #4
   217f8:	mov	r0, r5
   217fc:	bl	1230c <fprintf@plt>
   21800:	b	21814 <__assert_fail@plt+0xf250>
   21804:	movw	r1, #35068	; 0x88fc
   21808:	movt	r1, #4
   2180c:	mov	r0, r5
   21810:	bl	1230c <fprintf@plt>
   21814:	cmp	r0, #0
   21818:	blt	218e8 <__assert_fail@plt+0xf324>
   2181c:	ldrb	r2, [r4], #1
   21820:	cmp	r2, #0
   21824:	beq	218d0 <__assert_fail@plt+0xf30c>
   21828:	cmp	r2, #12
   2182c:	beq	2188c <__assert_fail@plt+0xf2c8>
   21830:	bls	217a4 <__assert_fail@plt+0xf1e0>
   21834:	cmp	r2, #32
   21838:	beq	2189c <__assert_fail@plt+0xf2d8>
   2183c:	bls	217e8 <__assert_fail@plt+0xf224>
   21840:	cmp	r2, #34	; 0x22
   21844:	beq	218ac <__assert_fail@plt+0xf2e8>
   21848:	cmp	r2, #92	; 0x5c
   2184c:	bne	217bc <__assert_fail@plt+0xf1f8>
   21850:	movw	r1, #35064	; 0x88f8
   21854:	movt	r1, #4
   21858:	mov	r0, r5
   2185c:	bl	1230c <fprintf@plt>
   21860:	b	21814 <__assert_fail@plt+0xf250>
   21864:	movw	r1, #35072	; 0x8900
   21868:	movt	r1, #4
   2186c:	mov	r0, r5
   21870:	bl	1230c <fprintf@plt>
   21874:	b	21814 <__assert_fail@plt+0xf250>
   21878:	movw	r1, #35080	; 0x8908
   2187c:	movt	r1, #4
   21880:	mov	r0, r5
   21884:	bl	1230c <fprintf@plt>
   21888:	b	21814 <__assert_fail@plt+0xf250>
   2188c:	mov	r1, r7
   21890:	mov	r0, r5
   21894:	bl	1230c <fprintf@plt>
   21898:	b	21814 <__assert_fail@plt+0xf250>
   2189c:	mov	r1, r6
   218a0:	mov	r0, r5
   218a4:	bl	1230c <fprintf@plt>
   218a8:	b	21814 <__assert_fail@plt+0xf250>
   218ac:	movw	r1, #35092	; 0x8914
   218b0:	movt	r1, #4
   218b4:	mov	r0, r5
   218b8:	bl	1230c <fprintf@plt>
   218bc:	b	21814 <__assert_fail@plt+0xf250>
   218c0:	mov	r1, r8
   218c4:	mov	r0, r5
   218c8:	bl	1230c <fprintf@plt>
   218cc:	b	21814 <__assert_fail@plt+0xf250>
   218d0:	mov	r0, #1
   218d4:	ldrd	r4, [sp]
   218d8:	ldrd	r6, [sp, #8]
   218dc:	ldr	r8, [sp, #16]
   218e0:	add	sp, sp, #20
   218e4:	pop	{pc}		; (ldr pc, [sp], #4)
   218e8:	mov	r0, #0
   218ec:	b	218d4 <__assert_fail@plt+0xf310>
   218f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   218f4:	strd	r6, [sp, #8]
   218f8:	strd	r8, [sp, #16]
   218fc:	strd	sl, [sp, #24]
   21900:	str	lr, [sp, #32]
   21904:	add	fp, sp, #32
   21908:	sub	sp, sp, #948	; 0x3b4
   2190c:	mov	r8, r0
   21910:	str	r1, [fp, #-960]	; 0xfffffc40
   21914:	mov	sl, r2
   21918:	mov	r4, r3
   2191c:	ldr	r6, [fp, #8]
   21920:	sub	r1, fp, #48	; 0x30
   21924:	ldr	r0, [r3, #16]
   21928:	bl	23048 <__assert_fail@plt+0x10a84>
   2192c:	movw	r3, #46284	; 0xb4cc
   21930:	movt	r3, #5
   21934:	ldr	r5, [r3]
   21938:	mov	r2, #1
   2193c:	mov	r3, #0
   21940:	strd	r2, [sp, #8]
   21944:	strd	r2, [sp]
   21948:	mov	r3, #0
   2194c:	sub	r2, fp, #700	; 0x2bc
   21950:	ldrd	r0, [r4, #96]	; 0x60
   21954:	bl	24428 <__assert_fail@plt+0x11e64>
   21958:	mov	r3, r0
   2195c:	mov	r2, r5
   21960:	movw	r1, #35128	; 0x8938
   21964:	movt	r1, #4
   21968:	ldr	r0, [fp, #16]
   2196c:	bl	1230c <fprintf@plt>
   21970:	cmp	r0, #0
   21974:	blt	220c8 <__assert_fail@plt+0xfb04>
   21978:	movw	r3, #46284	; 0xb4cc
   2197c:	movt	r3, #5
   21980:	ldr	r3, [r3]
   21984:	cmp	r3, r0
   21988:	bge	21998 <__assert_fail@plt+0xf3d4>
   2198c:	movw	r3, #46284	; 0xb4cc
   21990:	movt	r3, #5
   21994:	str	r0, [r3]
   21998:	ldr	r1, [fp, #16]
   2199c:	mov	r0, #32
   219a0:	bl	124b0 <putc@plt>
   219a4:	cmn	r0, #1
   219a8:	movne	r5, #0
   219ac:	moveq	r5, #150	; 0x96
   219b0:	adds	r7, r0, #1
   219b4:	movne	r7, #1
   219b8:	movw	r3, #46284	; 0xb4cc
   219bc:	movt	r3, #5
   219c0:	ldr	r9, [r3, #4]
   219c4:	mov	r2, r6
   219c8:	asr	r3, r6, #31
   219cc:	strd	r2, [sp, #8]
   219d0:	mov	r2, #512	; 0x200
   219d4:	mov	r3, #0
   219d8:	strd	r2, [sp]
   219dc:	mov	r3, #0
   219e0:	sub	r2, fp, #700	; 0x2bc
   219e4:	ldrd	r0, [r4, #64]	; 0x40
   219e8:	bl	24428 <__assert_fail@plt+0x11e64>
   219ec:	mov	r3, r0
   219f0:	mov	r2, r9
   219f4:	movw	r1, #35128	; 0x8938
   219f8:	movt	r1, #4
   219fc:	ldr	r0, [fp, #16]
   21a00:	bl	1230c <fprintf@plt>
   21a04:	cmp	r0, #0
   21a08:	blt	220fc <__assert_fail@plt+0xfb38>
   21a0c:	movw	r3, #46284	; 0xb4cc
   21a10:	movt	r3, #5
   21a14:	ldr	r3, [r3, #4]
   21a18:	cmp	r3, r0
   21a1c:	bge	21a2c <__assert_fail@plt+0xf468>
   21a20:	movw	r3, #46284	; 0xb4cc
   21a24:	movt	r3, #5
   21a28:	str	r0, [r3, #4]
   21a2c:	cmp	r7, #0
   21a30:	beq	220cc <__assert_fail@plt+0xfb08>
   21a34:	ldr	r1, [fp, #16]
   21a38:	mov	r0, #32
   21a3c:	bl	124b0 <putc@plt>
   21a40:	cmn	r0, #1
   21a44:	beq	220c0 <__assert_fail@plt+0xfafc>
   21a48:	ldr	r1, [fp, #16]
   21a4c:	sub	r0, fp, #48	; 0x30
   21a50:	bl	12558 <fputs@plt>
   21a54:	cmp	r0, #0
   21a58:	blt	220b8 <__assert_fail@plt+0xfaf4>
   21a5c:	movw	r2, #46284	; 0xb4cc
   21a60:	movt	r2, #5
   21a64:	ldr	r3, [r4, #20]
   21a68:	ldr	r2, [r2, #8]
   21a6c:	movw	r1, #35156	; 0x8954
   21a70:	movt	r1, #4
   21a74:	ldr	r0, [fp, #16]
   21a78:	bl	1230c <fprintf@plt>
   21a7c:	cmp	r0, #0
   21a80:	blt	2207c <__assert_fail@plt+0xfab8>
   21a84:	movw	r3, #46284	; 0xb4cc
   21a88:	movt	r3, #5
   21a8c:	ldr	r3, [r3, #8]
   21a90:	cmp	r3, r0
   21a94:	bge	21aa4 <__assert_fail@plt+0xf4e0>
   21a98:	movw	r3, #46284	; 0xb4cc
   21a9c:	movt	r3, #5
   21aa0:	str	r0, [r3, #8]
   21aa4:	ldr	r1, [fp, #16]
   21aa8:	mov	r0, #32
   21aac:	bl	124b0 <putc@plt>
   21ab0:	cmn	r0, #1
   21ab4:	moveq	r5, #250	; 0xfa
   21ab8:	ldr	r0, [r4, #24]
   21abc:	bl	24eb4 <__assert_fail@plt+0x128f0>
   21ac0:	subs	r7, r0, #0
   21ac4:	beq	21cac <__assert_fail@plt+0xf6e8>
   21ac8:	mov	r1, #0
   21acc:	mov	r0, r7
   21ad0:	bl	26ed4 <__assert_fail@plt+0x14910>
   21ad4:	movw	r3, #46284	; 0xb4cc
   21ad8:	movt	r3, #5
   21adc:	ldr	r2, [r3, #12]
   21ae0:	cmp	r2, r0
   21ae4:	bge	22084 <__assert_fail@plt+0xfac0>
   21ae8:	movw	r3, #46284	; 0xb4cc
   21aec:	movt	r3, #5
   21af0:	str	r0, [r3, #12]
   21af4:	mov	r3, r7
   21af8:	mov	r2, r0
   21afc:	movw	r1, #35132	; 0x893c
   21b00:	movt	r1, #4
   21b04:	ldr	r0, [fp, #16]
   21b08:	bl	1230c <fprintf@plt>
   21b0c:	mvn	r3, r0
   21b10:	lsr	r3, r3, #31
   21b14:	cmp	r0, #0
   21b18:	movlt	r5, #400	; 0x190
   21b1c:	cmp	r3, #0
   21b20:	beq	220cc <__assert_fail@plt+0xfb08>
   21b24:	ldr	r0, [r4, #28]
   21b28:	bl	2509c <__assert_fail@plt+0x12ad8>
   21b2c:	subs	r7, r0, #0
   21b30:	beq	21cfc <__assert_fail@plt+0xf738>
   21b34:	mov	r1, #0
   21b38:	mov	r0, r7
   21b3c:	bl	26ed4 <__assert_fail@plt+0x14910>
   21b40:	movw	r3, #46284	; 0xb4cc
   21b44:	movt	r3, #5
   21b48:	ldr	r2, [r3, #16]
   21b4c:	cmp	r2, r0
   21b50:	bge	22058 <__assert_fail@plt+0xfa94>
   21b54:	movw	r3, #46284	; 0xb4cc
   21b58:	movt	r3, #5
   21b5c:	str	r0, [r3, #16]
   21b60:	mov	r3, r7
   21b64:	mov	r2, r0
   21b68:	movw	r1, #35132	; 0x893c
   21b6c:	movt	r1, #4
   21b70:	ldr	r0, [fp, #16]
   21b74:	bl	1230c <fprintf@plt>
   21b78:	cmp	r0, #0
   21b7c:	movlt	r5, #500	; 0x1f4
   21b80:	blt	220cc <__assert_fail@plt+0xfb08>
   21b84:	ldr	r3, [r4, #16]
   21b88:	and	r3, r3, #45056	; 0xb000
   21b8c:	cmp	r3, #8192	; 0x2000
   21b90:	beq	21d50 <__assert_fail@plt+0xf78c>
   21b94:	cmp	r6, #0
   21b98:	movge	r6, #1
   21b9c:	movw	r3, #46284	; 0xb4cc
   21ba0:	movt	r3, #5
   21ba4:	ldr	r5, [r3, #28]
   21ba8:	asr	r7, r6, #31
   21bac:	strd	r6, [sp, #8]
   21bb0:	mov	r2, #1
   21bb4:	mov	r3, #0
   21bb8:	strd	r2, [sp]
   21bbc:	mov	r3, #0
   21bc0:	sub	r2, fp, #700	; 0x2bc
   21bc4:	ldrd	r0, [r4, #48]	; 0x30
   21bc8:	bl	24428 <__assert_fail@plt+0x11e64>
   21bcc:	mov	r3, r0
   21bd0:	mov	r2, r5
   21bd4:	movw	r1, #35128	; 0x8938
   21bd8:	movt	r1, #4
   21bdc:	ldr	r0, [fp, #16]
   21be0:	bl	1230c <fprintf@plt>
   21be4:	cmp	r0, #0
   21be8:	blt	22048 <__assert_fail@plt+0xfa84>
   21bec:	movw	r3, #46284	; 0xb4cc
   21bf0:	movt	r3, #5
   21bf4:	ldr	r3, [r3, #28]
   21bf8:	cmp	r3, r0
   21bfc:	bge	21c0c <__assert_fail@plt+0xf648>
   21c00:	movw	r3, #46284	; 0xb4cc
   21c04:	movt	r3, #5
   21c08:	str	r0, [r3, #28]
   21c0c:	ldr	r1, [fp, #16]
   21c10:	mov	r0, #32
   21c14:	bl	124b0 <putc@plt>
   21c18:	cmn	r0, #1
   21c1c:	beq	22040 <__assert_fail@plt+0xfa7c>
   21c20:	add	r0, r4, #80	; 0x50
   21c24:	bl	1224c <localtime@plt>
   21c28:	subs	r9, r0, #0
   21c2c:	beq	21e6c <__assert_fail@plt+0xf8a8>
   21c30:	ldr	r2, [r4, #80]	; 0x50
   21c34:	ldr	r3, [fp, #4]
   21c38:	sub	r3, r3, #15532032	; 0xed0000
   21c3c:	sub	r3, r3, #19968	; 0x4e00
   21c40:	cmp	r3, r2
   21c44:	movwgt	r7, #35104	; 0x8920
   21c48:	movtgt	r7, #4
   21c4c:	bgt	21c70 <__assert_fail@plt+0xf6ac>
   21c50:	ldr	r3, [fp, #4]
   21c54:	add	r1, r3, #3600	; 0xe10
   21c58:	movw	r7, #35104	; 0x8920
   21c5c:	movt	r7, #4
   21c60:	movw	r3, #35116	; 0x892c
   21c64:	movt	r3, #4
   21c68:	cmp	r2, r1
   21c6c:	movle	r7, r3
   21c70:	mov	r5, #256	; 0x100
   21c74:	sub	r6, fp, #956	; 0x3bc
   21c78:	mov	r3, r9
   21c7c:	mov	r2, r7
   21c80:	mov	r1, r5
   21c84:	mov	r0, r6
   21c88:	bl	12234 <strftime@plt>
   21c8c:	cmp	r0, #0
   21c90:	bne	21e30 <__assert_fail@plt+0xf86c>
   21c94:	lsl	r5, r5, #1
   21c98:	add	r3, r5, #7
   21c9c:	bic	r3, r3, #7
   21ca0:	sub	sp, sp, r3
   21ca4:	add	r6, sp, #16
   21ca8:	b	21c78 <__assert_fail@plt+0xf6b4>
   21cac:	ldr	r2, [r4, #24]
   21cb0:	movw	r1, #35140	; 0x8944
   21cb4:	movt	r1, #4
   21cb8:	ldr	r0, [fp, #16]
   21cbc:	bl	1230c <fprintf@plt>
   21cc0:	movw	r3, #46284	; 0xb4cc
   21cc4:	movt	r3, #5
   21cc8:	ldr	r3, [r3, #12]
   21ccc:	cmp	r3, r0
   21cd0:	bge	220a8 <__assert_fail@plt+0xfae4>
   21cd4:	movw	r3, #46284	; 0xb4cc
   21cd8:	movt	r3, #5
   21cdc:	str	r0, [r3, #12]
   21ce0:	cmp	r0, #0
   21ce4:	movle	r3, #0
   21ce8:	movgt	r3, #1
   21cec:	movw	r2, #450	; 0x1c2
   21cf0:	cmp	r0, #0
   21cf4:	movle	r5, r2
   21cf8:	b	21b1c <__assert_fail@plt+0xf558>
   21cfc:	movw	r5, #46284	; 0xb4cc
   21d00:	movt	r5, #5
   21d04:	ldr	r3, [r4, #28]
   21d08:	ldr	r2, [r5, #16]
   21d0c:	movw	r1, #35148	; 0x894c
   21d10:	movt	r1, #4
   21d14:	ldr	r0, [fp, #16]
   21d18:	bl	1230c <fprintf@plt>
   21d1c:	ldr	r3, [r5, #16]
   21d20:	cmp	r3, r0
   21d24:	strlt	r0, [r5, #16]
   21d28:	cmp	r0, #0
   21d2c:	movwlt	r5, #550	; 0x226
   21d30:	blt	220cc <__assert_fail@plt+0xfb08>
   21d34:	ldr	r1, [fp, #16]
   21d38:	mov	r0, #32
   21d3c:	bl	124b0 <putc@plt>
   21d40:	cmn	r0, #1
   21d44:	bne	21b84 <__assert_fail@plt+0xf5c0>
   21d48:	movw	r5, #525	; 0x20d
   21d4c:	b	220cc <__assert_fail@plt+0xfb08>
   21d50:	ldr	r1, [r4, #32]
   21d54:	ldr	r3, [r4, #36]	; 0x24
   21d58:	ubfx	r1, r1, #8, #12
   21d5c:	bic	r3, r3, #4080	; 0xff0
   21d60:	bic	r3, r3, #15
   21d64:	movw	r2, #46284	; 0xb4cc
   21d68:	movt	r2, #5
   21d6c:	orr	r3, r3, r1
   21d70:	ldr	r2, [r2, #20]
   21d74:	movw	r1, #35156	; 0x8954
   21d78:	movt	r1, #4
   21d7c:	ldr	r0, [fp, #16]
   21d80:	bl	1230c <fprintf@plt>
   21d84:	cmp	r0, #0
   21d88:	movlt	r5, #600	; 0x258
   21d8c:	blt	220cc <__assert_fail@plt+0xfb08>
   21d90:	movw	r3, #46284	; 0xb4cc
   21d94:	movt	r3, #5
   21d98:	ldr	r3, [r3, #20]
   21d9c:	cmp	r0, r3
   21da0:	ble	21db0 <__assert_fail@plt+0xf7ec>
   21da4:	movw	r3, #46284	; 0xb4cc
   21da8:	movt	r3, #5
   21dac:	str	r0, [r3, #20]
   21db0:	movw	r1, #25560	; 0x63d8
   21db4:	movt	r1, #4
   21db8:	ldr	r0, [fp, #16]
   21dbc:	bl	1230c <fprintf@plt>
   21dc0:	cmp	r0, #0
   21dc4:	blt	22050 <__assert_fail@plt+0xfa8c>
   21dc8:	ldr	r2, [r4, #32]
   21dcc:	ldr	r1, [r4, #36]	; 0x24
   21dd0:	uxtb	r3, r2
   21dd4:	lsr	r2, r2, #12
   21dd8:	orr	r2, r2, r1, lsl #20
   21ddc:	bic	r2, r2, #255	; 0xff
   21de0:	movw	r1, #46284	; 0xb4cc
   21de4:	movt	r1, #5
   21de8:	orr	r3, r2, r3
   21dec:	ldr	r2, [r1, #24]
   21df0:	movw	r1, #35156	; 0x8954
   21df4:	movt	r1, #4
   21df8:	ldr	r0, [fp, #16]
   21dfc:	bl	1230c <fprintf@plt>
   21e00:	cmp	r0, #0
   21e04:	movwlt	r5, #650	; 0x28a
   21e08:	blt	220cc <__assert_fail@plt+0xfb08>
   21e0c:	movw	r3, #46284	; 0xb4cc
   21e10:	movt	r3, #5
   21e14:	ldr	r3, [r3, #24]
   21e18:	cmp	r0, r3
   21e1c:	ble	21c0c <__assert_fail@plt+0xf648>
   21e20:	movw	r3, #46284	; 0xb4cc
   21e24:	movt	r3, #5
   21e28:	str	r0, [r3, #24]
   21e2c:	b	21c0c <__assert_fail@plt+0xf648>
   21e30:	mov	r2, r6
   21e34:	movw	r1, #35164	; 0x895c
   21e38:	movt	r1, #4
   21e3c:	ldr	r0, [fp, #16]
   21e40:	bl	1230c <fprintf@plt>
   21e44:	cmp	r0, #0
   21e48:	movlt	r5, #900	; 0x384
   21e4c:	blt	220cc <__assert_fail@plt+0xfb08>
   21e50:	ldr	r3, [fp, #12]
   21e54:	cmp	r3, #0
   21e58:	bne	21f24 <__assert_fail@plt+0xf960>
   21e5c:	ldr	r1, [fp, #16]
   21e60:	mov	r0, r8
   21e64:	bl	21770 <__assert_fail@plt+0xf1ac>
   21e68:	b	21f40 <__assert_fail@plt+0xf97c>
   21e6c:	ldr	r0, [r4, #80]	; 0x50
   21e70:	cmp	r0, #0
   21e74:	blt	21ec0 <__assert_fail@plt+0xf8fc>
   21e78:	mov	r2, #1
   21e7c:	mov	r3, #0
   21e80:	strd	r2, [sp, #8]
   21e84:	strd	r2, [sp]
   21e88:	mov	r3, #0
   21e8c:	sub	r2, fp, #700	; 0x2bc
   21e90:	asr	r1, r0, #31
   21e94:	bl	24428 <__assert_fail@plt+0x11e64>
   21e98:	mov	r3, r0
   21e9c:	mov	r2, #12
   21ea0:	movw	r1, #35176	; 0x8968
   21ea4:	movt	r1, #4
   21ea8:	ldr	r0, [fp, #16]
   21eac:	bl	1230c <fprintf@plt>
   21eb0:	cmp	r0, #0
   21eb4:	bge	21e50 <__assert_fail@plt+0xf88c>
   21eb8:	movw	r5, #1100	; 0x44c
   21ebc:	b	220cc <__assert_fail@plt+0xfb08>
   21ec0:	mov	r2, #1
   21ec4:	mov	r3, #0
   21ec8:	strd	r2, [sp, #8]
   21ecc:	strd	r2, [sp]
   21ed0:	mov	r3, #0
   21ed4:	sub	r2, fp, #700	; 0x2bc
   21ed8:	asr	r1, r0, #31
   21edc:	rsbs	r0, r0, #0
   21ee0:	rsc	r1, r1, #0
   21ee4:	bl	24428 <__assert_fail@plt+0x11e64>
   21ee8:	mov	r5, r0
   21eec:	bl	122d0 <strlen@plt>
   21ef0:	rsb	r2, r0, #12
   21ef4:	str	r5, [sp]
   21ef8:	movw	r3, #19060	; 0x4a74
   21efc:	movt	r3, #4
   21f00:	bic	r2, r2, r2, asr #31
   21f04:	movw	r1, #35168	; 0x8960
   21f08:	movt	r1, #4
   21f0c:	ldr	r0, [fp, #16]
   21f10:	bl	1230c <fprintf@plt>
   21f14:	cmp	r0, #0
   21f18:	bge	21e50 <__assert_fail@plt+0xf88c>
   21f1c:	mov	r5, #1000	; 0x3e8
   21f20:	b	220cc <__assert_fail@plt+0xfb08>
   21f24:	mov	r2, r8
   21f28:	movw	r1, #35960	; 0x8c78
   21f2c:	movt	r1, #4
   21f30:	ldr	r0, [fp, #16]
   21f34:	bl	1230c <fprintf@plt>
   21f38:	mvn	r0, r0
   21f3c:	lsr	r0, r0, #31
   21f40:	cmp	r0, #0
   21f44:	moveq	r5, #1200	; 0x4b0
   21f48:	beq	220cc <__assert_fail@plt+0xfb08>
   21f4c:	ldr	r3, [r4, #16]
   21f50:	and	r3, r3, #61440	; 0xf000
   21f54:	cmp	r3, #40960	; 0xa000
   21f58:	beq	21f8c <__assert_fail@plt+0xf9c8>
   21f5c:	ldr	r1, [fp, #16]
   21f60:	mov	r0, #10
   21f64:	bl	124b0 <putc@plt>
   21f68:	cmn	r0, #1
   21f6c:	beq	22038 <__assert_fail@plt+0xfa74>
   21f70:	sub	sp, fp, #32
   21f74:	ldrd	r4, [sp]
   21f78:	ldrd	r6, [sp, #8]
   21f7c:	ldrd	r8, [sp, #16]
   21f80:	ldrd	sl, [sp, #24]
   21f84:	add	sp, sp, #32
   21f88:	pop	{pc}		; (ldr pc, [sp], #4)
   21f8c:	mov	r1, sl
   21f90:	ldr	r0, [fp, #-960]	; 0xfffffc40
   21f94:	bl	22880 <__assert_fail@plt+0x102bc>
   21f98:	subs	r4, r0, #0
   21f9c:	beq	22010 <__assert_fail@plt+0xfa4c>
   21fa0:	ldr	r1, [fp, #16]
   21fa4:	movw	r0, #35184	; 0x8970
   21fa8:	movt	r0, #4
   21fac:	bl	12558 <fputs@plt>
   21fb0:	cmp	r0, #0
   21fb4:	movwlt	r5, #1300	; 0x514
   21fb8:	bge	21fc8 <__assert_fail@plt+0xfa04>
   21fbc:	mov	r0, r4
   21fc0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   21fc4:	b	220cc <__assert_fail@plt+0xfb08>
   21fc8:	ldr	r3, [fp, #12]
   21fcc:	cmp	r3, #0
   21fd0:	beq	22000 <__assert_fail@plt+0xfa3c>
   21fd4:	mov	r2, r4
   21fd8:	movw	r1, #35960	; 0x8c78
   21fdc:	movt	r1, #4
   21fe0:	ldr	r0, [fp, #16]
   21fe4:	bl	1230c <fprintf@plt>
   21fe8:	mvn	r0, r0
   21fec:	lsr	r0, r0, #31
   21ff0:	cmp	r0, #0
   21ff4:	movweq	r5, #1350	; 0x546
   21ff8:	beq	21fbc <__assert_fail@plt+0xf9f8>
   21ffc:	b	2202c <__assert_fail@plt+0xfa68>
   22000:	ldr	r1, [fp, #16]
   22004:	mov	r0, r4
   22008:	bl	21770 <__assert_fail@plt+0xf1ac>
   2200c:	b	21ff0 <__assert_fail@plt+0xfa2c>
   22010:	bl	12318 <__errno_location@plt>
   22014:	mov	r3, r8
   22018:	movw	r2, #35960	; 0x8c78
   2201c:	movt	r2, #4
   22020:	ldr	r1, [r0]
   22024:	mov	r0, #0
   22028:	bl	121bc <error@plt>
   2202c:	mov	r0, r4
   22030:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   22034:	b	21f5c <__assert_fail@plt+0xf998>
   22038:	movw	r5, #1400	; 0x578
   2203c:	b	220cc <__assert_fail@plt+0xfb08>
   22040:	movw	r5, #850	; 0x352
   22044:	b	220cc <__assert_fail@plt+0xfb08>
   22048:	mov	r5, #800	; 0x320
   2204c:	b	220cc <__assert_fail@plt+0xfb08>
   22050:	movw	r5, #625	; 0x271
   22054:	b	220cc <__assert_fail@plt+0xfb08>
   22058:	mov	r3, r7
   2205c:	movw	r1, #35132	; 0x893c
   22060:	movt	r1, #4
   22064:	ldr	r0, [fp, #16]
   22068:	bl	1230c <fprintf@plt>
   2206c:	cmp	r0, #0
   22070:	bge	21b84 <__assert_fail@plt+0xf5c0>
   22074:	mov	r5, #500	; 0x1f4
   22078:	b	220cc <__assert_fail@plt+0xfb08>
   2207c:	mov	r5, #300	; 0x12c
   22080:	b	220cc <__assert_fail@plt+0xfb08>
   22084:	mov	r3, r7
   22088:	movw	r1, #35132	; 0x893c
   2208c:	movt	r1, #4
   22090:	ldr	r0, [fp, #16]
   22094:	bl	1230c <fprintf@plt>
   22098:	cmp	r0, #0
   2209c:	bge	21b24 <__assert_fail@plt+0xf560>
   220a0:	mov	r5, #400	; 0x190
   220a4:	b	220cc <__assert_fail@plt+0xfb08>
   220a8:	cmp	r0, #0
   220ac:	bgt	21b24 <__assert_fail@plt+0xf560>
   220b0:	movw	r5, #450	; 0x1c2
   220b4:	b	220cc <__assert_fail@plt+0xfb08>
   220b8:	movw	r5, #275	; 0x113
   220bc:	b	220cc <__assert_fail@plt+0xfb08>
   220c0:	mov	r5, #250	; 0xfa
   220c4:	b	220cc <__assert_fail@plt+0xfb08>
   220c8:	mov	r5, #100	; 0x64
   220cc:	bl	12318 <__errno_location@plt>
   220d0:	ldr	r4, [r0]
   220d4:	mov	r2, #5
   220d8:	movw	r1, #35192	; 0x8978
   220dc:	movt	r1, #4
   220e0:	mov	r0, #0
   220e4:	bl	12084 <dcgettext@plt>
   220e8:	mov	r3, r5
   220ec:	mov	r2, r0
   220f0:	mov	r1, r4
   220f4:	mov	r0, #1
   220f8:	bl	121bc <error@plt>
   220fc:	mov	r5, #200	; 0xc8
   22100:	b	220cc <__assert_fail@plt+0xfb08>
   22104:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22108:	strd	r6, [sp, #8]
   2210c:	strd	r8, [sp, #16]
   22110:	str	lr, [sp, #24]
   22114:	sub	sp, sp, #8192	; 0x2000
   22118:	sub	sp, sp, #12
   2211c:	mov	r4, r0
   22120:	mov	r5, r3
   22124:	cmp	r2, #0
   22128:	beq	221ec <__assert_fail@plt+0xfc28>
   2212c:	mov	r6, r1
   22130:	str	r1, [sp]
   22134:	mvn	r3, #0
   22138:	add	r2, sp, #8192	; 0x2000
   2213c:	add	r2, r2, #40	; 0x28
   22140:	ldr	r2, [r2]
   22144:	mov	r1, #8192	; 0x2000
   22148:	add	r0, sp, #8
   2214c:	bl	2ceac <__assert_fail@plt+0x1a8e8>
   22150:	mov	r7, r0
   22154:	cmp	r0, #8192	; 0x2000
   22158:	bcs	2218c <__assert_fail@plt+0xfbc8>
   2215c:	add	r6, sp, #8
   22160:	mov	r1, r0
   22164:	mov	r0, r6
   22168:	bl	22224 <__assert_fail@plt+0xfc60>
   2216c:	mov	r3, #0
   22170:	strb	r3, [r6, r0]
   22174:	mov	r2, r6
   22178:	mov	r1, r5
   2217c:	mov	r0, r4
   22180:	bl	1230c <fprintf@plt>
   22184:	mov	r4, r0
   22188:	b	22204 <__assert_fail@plt+0xfc40>
   2218c:	add	r9, r0, #1
   22190:	mov	r0, r9
   22194:	bl	2e348 <__assert_fail@plt+0x1bd84>
   22198:	mov	r8, r0
   2219c:	str	r6, [sp]
   221a0:	mvn	r3, #0
   221a4:	add	r2, sp, #8192	; 0x2000
   221a8:	add	r2, r2, #40	; 0x28
   221ac:	ldr	r2, [r2]
   221b0:	mov	r1, r9
   221b4:	bl	2ceac <__assert_fail@plt+0x1a8e8>
   221b8:	mov	r1, r7
   221bc:	mov	r0, r8
   221c0:	bl	22224 <__assert_fail@plt+0xfc60>
   221c4:	mov	r3, #0
   221c8:	strb	r3, [r8, r0]
   221cc:	mov	r2, r8
   221d0:	mov	r1, r5
   221d4:	mov	r0, r4
   221d8:	bl	1230c <fprintf@plt>
   221dc:	mov	r4, r0
   221e0:	mov	r0, r8
   221e4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   221e8:	b	22204 <__assert_fail@plt+0xfc40>
   221ec:	add	r3, sp, #8192	; 0x2000
   221f0:	add	r3, r3, #40	; 0x28
   221f4:	ldr	r2, [r3]
   221f8:	mov	r1, r5
   221fc:	bl	1230c <fprintf@plt>
   22200:	mov	r4, r0
   22204:	mov	r0, r4
   22208:	add	sp, sp, #8192	; 0x2000
   2220c:	add	sp, sp, #12
   22210:	ldrd	r4, [sp]
   22214:	ldrd	r6, [sp, #8]
   22218:	ldrd	r8, [sp, #16]
   2221c:	add	sp, sp, #24
   22220:	pop	{pc}		; (ldr pc, [sp], #4)
   22224:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22228:	strd	r6, [sp, #8]
   2222c:	strd	r8, [sp, #16]
   22230:	strd	sl, [sp, #24]
   22234:	str	lr, [sp, #32]
   22238:	sub	sp, sp, #20
   2223c:	mov	sl, r0
   22240:	mov	r7, r1
   22244:	bl	12168 <__ctype_get_mb_cur_max@plt>
   22248:	cmp	r0, #1
   2224c:	bls	22274 <__assert_fail@plt+0xfcb0>
   22250:	add	r7, sl, r7
   22254:	cmp	sl, r7
   22258:	bcs	223ac <__assert_fail@plt+0xfde8>
   2225c:	mov	r5, sl
   22260:	mov	r4, sl
   22264:	mov	r8, #0
   22268:	mov	r9, #0
   2226c:	mov	fp, #63	; 0x3f
   22270:	b	222e8 <__assert_fail@plt+0xfd24>
   22274:	add	r4, sl, r7
   22278:	cmp	sl, r4
   2227c:	bcs	223d0 <__assert_fail@plt+0xfe0c>
   22280:	bl	12288 <__ctype_b_loc@plt>
   22284:	sub	sl, sl, #1
   22288:	sub	r1, r4, #1
   2228c:	mov	ip, #63	; 0x3f
   22290:	ldrb	r3, [sl, #1]!
   22294:	ldr	r2, [r0]
   22298:	lsl	r3, r3, #1
   2229c:	ldrh	r3, [r2, r3]
   222a0:	tst	r3, #16384	; 0x4000
   222a4:	strbeq	ip, [sl]
   222a8:	cmp	sl, r1
   222ac:	bne	22290 <__assert_fail@plt+0xfccc>
   222b0:	mov	r0, r7
   222b4:	b	223b4 <__assert_fail@plt+0xfdf0>
   222b8:	cmp	r3, #65	; 0x41
   222bc:	bcc	2230c <__assert_fail@plt+0xfd48>
   222c0:	cmp	r3, #95	; 0x5f
   222c4:	bls	222d8 <__assert_fail@plt+0xfd14>
   222c8:	sub	r2, r3, #97	; 0x61
   222cc:	uxtb	r2, r2
   222d0:	cmp	r2, #29
   222d4:	bhi	2230c <__assert_fail@plt+0xfd48>
   222d8:	add	r4, r4, #1
   222dc:	strb	r3, [r5], #1
   222e0:	cmp	r4, r7
   222e4:	bcs	223b0 <__assert_fail@plt+0xfdec>
   222e8:	ldrb	r3, [r4]
   222ec:	cmp	r3, #63	; 0x3f
   222f0:	bhi	222b8 <__assert_fail@plt+0xfcf4>
   222f4:	cmp	r3, #37	; 0x25
   222f8:	bcs	222d8 <__assert_fail@plt+0xfd14>
   222fc:	sub	r2, r3, #32
   22300:	uxtb	r2, r2
   22304:	cmp	r2, #3
   22308:	bls	222d8 <__assert_fail@plt+0xfd14>
   2230c:	strd	r8, [sp, #8]
   22310:	b	2233c <__assert_fail@plt+0xfd78>
   22314:	add	r4, r4, #1
   22318:	strb	fp, [r5], #1
   2231c:	b	222e0 <__assert_fail@plt+0xfd1c>
   22320:	strb	fp, [r5], #1
   22324:	mov	r4, r7
   22328:	b	222e0 <__assert_fail@plt+0xfd1c>
   2232c:	add	r0, sp, #8
   22330:	bl	1203c <mbsinit@plt>
   22334:	cmp	r0, #0
   22338:	bne	222e0 <__assert_fail@plt+0xfd1c>
   2233c:	add	r3, sp, #8
   22340:	sub	r2, r7, r4
   22344:	mov	r1, r4
   22348:	add	r0, sp, #4
   2234c:	bl	32184 <__assert_fail@plt+0x1fbc0>
   22350:	mov	r6, r0
   22354:	cmn	r0, #1
   22358:	beq	22314 <__assert_fail@plt+0xfd50>
   2235c:	cmn	r0, #2
   22360:	beq	22320 <__assert_fail@plt+0xfd5c>
   22364:	cmp	r0, #0
   22368:	movne	r6, r0
   2236c:	moveq	r6, #1
   22370:	ldr	r0, [sp, #4]
   22374:	bl	11f7c <wcwidth@plt>
   22378:	cmp	r0, #0
   2237c:	addlt	r4, r4, r6
   22380:	strblt	fp, [r5], #1
   22384:	blt	2232c <__assert_fail@plt+0xfd68>
   22388:	sub	r3, r5, #1
   2238c:	add	r1, r4, r6
   22390:	ldrb	r2, [r4], #1
   22394:	strb	r2, [r3, #1]!
   22398:	cmp	r4, r1
   2239c:	bne	22390 <__assert_fail@plt+0xfdcc>
   223a0:	add	r5, r5, r6
   223a4:	mov	r4, r1
   223a8:	b	2232c <__assert_fail@plt+0xfd68>
   223ac:	mov	r5, sl
   223b0:	sub	r0, r5, sl
   223b4:	add	sp, sp, #20
   223b8:	ldrd	r4, [sp]
   223bc:	ldrd	r6, [sp, #8]
   223c0:	ldrd	r8, [sp, #16]
   223c4:	ldrd	sl, [sp, #24]
   223c8:	add	sp, sp, #32
   223cc:	pop	{pc}		; (ldr pc, [sp], #4)
   223d0:	mov	r0, r7
   223d4:	b	223b4 <__assert_fail@plt+0xfdf0>
   223d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   223dc:	strd	r6, [sp, #8]
   223e0:	strd	r8, [sp, #16]
   223e4:	str	sl, [sp, #24]
   223e8:	str	lr, [sp, #28]
   223ec:	sub	sp, sp, #8
   223f0:	mov	r8, r0
   223f4:	movw	r6, #35232	; 0x89a0
   223f8:	movt	r6, #4
   223fc:	mov	r5, r6
   22400:	mov	r9, #0
   22404:	mov	r4, r9
   22408:	ldr	r7, [r5]
   2240c:	mov	r1, r8
   22410:	mov	r0, r7
   22414:	bl	11f1c <strcmp@plt>
   22418:	cmp	r0, #0
   2241c:	beq	2250c <__assert_fail@plt+0xff48>
   22420:	mov	r0, r7
   22424:	bl	2d540 <__assert_fail@plt+0x1af7c>
   22428:	bl	122d0 <strlen@plt>
   2242c:	add	r0, r0, #2
   22430:	add	r9, r9, r0
   22434:	add	r4, r4, #1
   22438:	add	r5, r5, #12
   2243c:	cmp	r4, #13
   22440:	bne	22408 <__assert_fail@plt+0xfe44>
   22444:	add	r0, r9, #1
   22448:	bl	2e348 <__assert_fail@plt+0x1bd84>
   2244c:	mov	sl, r0
   22450:	mov	r4, r0
   22454:	mov	r5, #0
   22458:	movw	r7, #35960	; 0x8c78
   2245c:	movt	r7, #4
   22460:	movw	r9, #25560	; 0x63d8
   22464:	movt	r9, #4
   22468:	b	224ac <__assert_fail@plt+0xfee8>
   2246c:	ldrh	r3, [r9]
   22470:	strh	r3, [r4]
   22474:	ldrb	r3, [r9, #2]
   22478:	strb	r3, [r4, #2]!
   2247c:	ldr	r0, [r6]
   22480:	bl	2d540 <__assert_fail@plt+0x1af7c>
   22484:	mov	r2, r0
   22488:	mov	r1, r7
   2248c:	mov	r0, r4
   22490:	bl	12480 <sprintf@plt>
   22494:	add	r4, r4, r0
   22498:	add	r3, r5, #1
   2249c:	cmp	r3, #12
   224a0:	bhi	224d4 <__assert_fail@plt+0xff10>
   224a4:	add	r5, r5, #1
   224a8:	add	r6, r6, #12
   224ac:	cmp	r5, #0
   224b0:	bne	2246c <__assert_fail@plt+0xfea8>
   224b4:	ldr	r0, [r6]
   224b8:	bl	2d540 <__assert_fail@plt+0x1af7c>
   224bc:	mov	r2, r0
   224c0:	mov	r1, r7
   224c4:	mov	r0, r4
   224c8:	bl	12480 <sprintf@plt>
   224cc:	add	r4, r4, r0
   224d0:	b	224a4 <__assert_fail@plt+0xfee0>
   224d4:	mov	r2, #5
   224d8:	movw	r1, #35388	; 0x8a3c
   224dc:	movt	r1, #4
   224e0:	mov	r0, #0
   224e4:	bl	12084 <dcgettext@plt>
   224e8:	mov	r4, r0
   224ec:	mov	r0, r8
   224f0:	bl	2d540 <__assert_fail@plt+0x1af7c>
   224f4:	str	sl, [sp]
   224f8:	mov	r3, r0
   224fc:	mov	r2, r4
   22500:	mov	r1, #0
   22504:	mov	r0, #1
   22508:	bl	121bc <error@plt>
   2250c:	movw	r3, #35232	; 0x89a0
   22510:	movt	r3, #4
   22514:	add	r4, r4, r4, lsl #1
   22518:	add	r4, r3, r4, lsl #2
   2251c:	ldr	r0, [r4, #8]
   22520:	add	sp, sp, #8
   22524:	ldrd	r4, [sp]
   22528:	ldrd	r6, [sp, #8]
   2252c:	ldrd	r8, [sp, #16]
   22530:	ldr	sl, [sp, #24]
   22534:	add	sp, sp, #28
   22538:	pop	{pc}		; (ldr pc, [sp], #4)
   2253c:	cmp	r0, #12
   22540:	bhi	22558 <__assert_fail@plt+0xff94>
   22544:	movw	r3, #35232	; 0x89a0
   22548:	movt	r3, #4
   2254c:	add	r0, r0, r0, lsl #1
   22550:	ldr	r0, [r3, r0, lsl #2]
   22554:	bx	lr
   22558:	mov	r0, #0
   2255c:	bx	lr
   22560:	cmp	r0, #12
   22564:	bhi	22580 <__assert_fail@plt+0xffbc>
   22568:	movw	r3, #35232	; 0x89a0
   2256c:	movt	r3, #4
   22570:	add	r0, r0, r0, lsl #1
   22574:	add	r0, r3, r0, lsl #2
   22578:	ldr	r0, [r0, #8]
   2257c:	bx	lr
   22580:	mvn	r0, #0
   22584:	bx	lr
   22588:	cmp	r0, #12
   2258c:	bhi	225a8 <__assert_fail@plt+0xffe4>
   22590:	movw	r3, #35232	; 0x89a0
   22594:	movt	r3, #4
   22598:	add	r0, r0, r0, lsl #1
   2259c:	add	r0, r3, r0, lsl #2
   225a0:	ldr	r0, [r0, #4]
   225a4:	bx	lr
   225a8:	mov	r0, #0
   225ac:	bx	lr
   225b0:	cmp	r0, #12
   225b4:	bhi	22620 <__assert_fail@plt+0x1005c>
   225b8:	push	{lr}		; (str lr, [sp, #-4]!)
   225bc:	movw	r3, #35232	; 0x89a0
   225c0:	movt	r3, #4
   225c4:	add	r2, r0, r0, lsl #1
   225c8:	add	r3, r3, r2, lsl #2
   225cc:	ldr	lr, [r3, #8]
   225d0:	cmp	r0, #0
   225d4:	beq	22628 <__assert_fail@plt+0x10064>
   225d8:	movw	r3, #35232	; 0x89a0
   225dc:	movt	r3, #4
   225e0:	mov	r2, #0
   225e4:	b	225f8 <__assert_fail@plt+0x10034>
   225e8:	add	r2, r2, #1
   225ec:	add	r3, r3, #12
   225f0:	cmp	r0, r2
   225f4:	beq	22618 <__assert_fail@plt+0x10054>
   225f8:	ldr	ip, [r3, #4]
   225fc:	tst	r1, ip
   22600:	beq	225e8 <__assert_fail@plt+0x10024>
   22604:	ldr	ip, [r3, #8]
   22608:	cmp	ip, lr
   2260c:	bne	225e8 <__assert_fail@plt+0x10024>
   22610:	mov	r0, r2
   22614:	b	2261c <__assert_fail@plt+0x10058>
   22618:	mvn	r0, #0
   2261c:	pop	{pc}		; (ldr pc, [sp], #4)
   22620:	mvn	r0, #0
   22624:	bx	lr
   22628:	mvn	r0, #0
   2262c:	b	2261c <__assert_fail@plt+0x10058>
   22630:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22634:	strd	r6, [sp, #8]
   22638:	str	r8, [sp, #16]
   2263c:	str	lr, [sp, #20]
   22640:	sub	sp, sp, #16
   22644:	mov	r4, r0
   22648:	mov	r7, r1
   2264c:	bl	12318 <__errno_location@plt>
   22650:	mov	r5, r0
   22654:	mov	r3, #0
   22658:	str	r3, [r0]
   2265c:	mov	r2, #10
   22660:	add	r1, sp, #12
   22664:	mov	r0, r4
   22668:	bl	11f28 <strtol@plt>
   2266c:	sub	r3, r0, #-2147483647	; 0x80000001
   22670:	cmn	r3, #3
   22674:	bls	226ac <__assert_fail@plt+0x100e8>
   22678:	ldr	r1, [r5]
   2267c:	cmp	r1, #34	; 0x22
   22680:	beq	22698 <__assert_fail@plt+0x100d4>
   22684:	mov	r3, r4
   22688:	movw	r2, #35960	; 0x8c78
   2268c:	movt	r2, #4
   22690:	mov	r0, #1
   22694:	bl	121bc <error@plt>
   22698:	mov	r3, r4
   2269c:	movw	r2, #35960	; 0x8c78
   226a0:	movt	r2, #4
   226a4:	mov	r0, #1
   226a8:	bl	121bc <error@plt>
   226ac:	ldr	r6, [sp, #12]
   226b0:	ldrb	r3, [r6]
   226b4:	cmp	r3, #0
   226b8:	bne	226dc <__assert_fail@plt+0x10118>
   226bc:	cmp	r4, r6
   226c0:	beq	22734 <__assert_fail@plt+0x10170>
   226c4:	add	sp, sp, #16
   226c8:	ldrd	r4, [sp]
   226cc:	ldrd	r6, [sp, #8]
   226d0:	ldr	r8, [sp, #16]
   226d4:	add	sp, sp, #20
   226d8:	pop	{pc}		; (ldr pc, [sp], #4)
   226dc:	ldr	r5, [r5]
   226e0:	mov	r2, #5
   226e4:	movw	r1, #35572	; 0x8af4
   226e8:	movt	r1, #4
   226ec:	mov	r0, #0
   226f0:	bl	12084 <dcgettext@plt>
   226f4:	mov	r6, r0
   226f8:	ldr	r2, [sp, #12]
   226fc:	mov	r1, r7
   22700:	mov	r0, #0
   22704:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   22708:	mov	r8, r0
   2270c:	mov	r2, r4
   22710:	mov	r1, r7
   22714:	mov	r0, #1
   22718:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   2271c:	str	r0, [sp]
   22720:	mov	r3, r8
   22724:	mov	r2, r6
   22728:	mov	r1, r5
   2272c:	mov	r0, #1
   22730:	bl	121bc <error@plt>
   22734:	ldr	r4, [r5]
   22738:	mov	r2, #5
   2273c:	movw	r1, #35600	; 0x8b10
   22740:	movt	r1, #4
   22744:	mov	r0, #0
   22748:	bl	12084 <dcgettext@plt>
   2274c:	mov	r5, r0
   22750:	mov	r2, r6
   22754:	mov	r1, r7
   22758:	mov	r0, #0
   2275c:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   22760:	mov	r3, r0
   22764:	mov	r2, r5
   22768:	mov	r1, r4
   2276c:	mov	r0, #1
   22770:	bl	121bc <error@plt>
   22774:	strd	r4, [sp, #-16]!
   22778:	str	r6, [sp, #8]
   2277c:	str	lr, [sp, #12]
   22780:	ldr	r5, [sp, #16]
   22784:	cmp	r2, #0
   22788:	beq	227e0 <__assert_fail@plt+0x1021c>
   2278c:	mov	r2, #0
   22790:	str	r2, [r3]
   22794:	str	r2, [r5]
   22798:	ldr	r4, [r3]
   2279c:	add	r4, r0, r4
   227a0:	ldrb	r3, [r1]
   227a4:	cmp	r3, #0
   227a8:	beq	227c0 <__assert_fail@plt+0x101fc>
   227ac:	mov	r0, r4
   227b0:	bl	124f8 <strpbrk@plt>
   227b4:	cmp	r0, #0
   227b8:	subne	r0, r0, r4
   227bc:	bne	227c8 <__assert_fail@plt+0x10204>
   227c0:	mov	r0, r4
   227c4:	bl	122d0 <strlen@plt>
   227c8:	str	r0, [r5]
   227cc:	mov	r0, #1
   227d0:	ldrd	r4, [sp]
   227d4:	ldr	r6, [sp, #8]
   227d8:	add	sp, sp, #12
   227dc:	pop	{pc}		; (ldr pc, [sp], #4)
   227e0:	ldr	ip, [r3]
   227e4:	ldr	lr, [r5]
   227e8:	add	ip, ip, lr
   227ec:	str	ip, [r3]
   227f0:	ldrb	lr, [r0, ip]
   227f4:	cmp	lr, #0
   227f8:	moveq	r0, r2
   227fc:	beq	227d0 <__assert_fail@plt+0x1020c>
   22800:	add	ip, ip, #1
   22804:	str	ip, [r3]
   22808:	b	22798 <__assert_fail@plt+0x101d4>
   2280c:	strd	r4, [sp, #-12]!
   22810:	str	lr, [sp, #8]
   22814:	sub	sp, sp, #20
   22818:	mov	r4, r0
   2281c:	mov	r5, r1
   22820:	mov	r2, #5
   22824:	movw	r1, #35624	; 0x8b28
   22828:	movt	r1, #4
   2282c:	mov	r0, #0
   22830:	bl	12084 <dcgettext@plt>
   22834:	movw	r3, #35872	; 0x8c20
   22838:	movt	r3, #4
   2283c:	str	r3, [sp, #8]
   22840:	movw	r3, #35896	; 0x8c38
   22844:	movt	r3, #4
   22848:	str	r3, [sp, #4]
   2284c:	movw	r3, #35032	; 0x88d8
   22850:	movt	r3, #4
   22854:	str	r3, [sp]
   22858:	mov	r3, r5
   2285c:	movw	r2, #35832	; 0x8bf8
   22860:	movt	r2, #4
   22864:	mov	r1, r0
   22868:	mov	r0, r4
   2286c:	bl	1230c <fprintf@plt>
   22870:	add	sp, sp, #20
   22874:	ldrd	r4, [sp]
   22878:	add	sp, sp, #8
   2287c:	pop	{pc}		; (ldr pc, [sp], #4)
   22880:	push	{lr}		; (str lr, [sp, #-4]!)
   22884:	sub	sp, sp, #12
   22888:	movw	r3, #8744	; 0x2228
   2288c:	movt	r3, #1
   22890:	str	r3, [sp, #4]
   22894:	mov	r2, #0
   22898:	str	r2, [sp]
   2289c:	mov	r3, r2
   228a0:	bl	22a3c <__assert_fail@plt+0x10478>
   228a4:	add	sp, sp, #12
   228a8:	pop	{pc}		; (ldr pc, [sp], #4)
   228ac:	str	r4, [sp, #-8]!
   228b0:	str	lr, [sp, #4]
   228b4:	mov	r4, r0
   228b8:	mov	r0, #24
   228bc:	bl	32148 <__assert_fail@plt+0x1fb84>
   228c0:	cmp	r0, #0
   228c4:	beq	228d8 <__assert_fail@plt+0x10314>
   228c8:	mov	r3, #0
   228cc:	str	r3, [r0]
   228d0:	str	r4, [r0, #16]
   228d4:	str	r4, [r0, #20]
   228d8:	ldr	r4, [sp]
   228dc:	add	sp, sp, #4
   228e0:	pop	{pc}		; (ldr pc, [sp], #4)
   228e4:	str	r4, [sp, #-8]!
   228e8:	str	lr, [sp, #4]
   228ec:	mov	r4, r0
   228f0:	mov	r0, #24
   228f4:	bl	32148 <__assert_fail@plt+0x1fb84>
   228f8:	cmp	r0, #0
   228fc:	beq	22918 <__assert_fail@plt+0x10354>
   22900:	str	r4, [r0]
   22904:	mov	r3, #0
   22908:	str	r3, [r0, #8]
   2290c:	str	r3, [r0, #12]
   22910:	str	r3, [r0, #4]
   22914:	str	r3, [r0, #16]
   22918:	ldr	r4, [sp]
   2291c:	add	sp, sp, #4
   22920:	pop	{pc}		; (ldr pc, [sp], #4)
   22924:	ldr	r3, [r0]
   22928:	cmp	r3, #0
   2292c:	beq	229a8 <__assert_fail@plt+0x103e4>
   22930:	strd	r4, [sp, #-16]!
   22934:	str	r6, [sp, #8]
   22938:	str	lr, [sp, #12]
   2293c:	mov	r5, r1
   22940:	mov	r4, r0
   22944:	mov	r2, #0
   22948:	add	r1, r0, #12
   2294c:	add	r0, r0, #8
   22950:	bl	1251c <getdelim@plt>
   22954:	cmp	r0, #0
   22958:	blt	22988 <__assert_fail@plt+0x103c4>
   2295c:	mov	r3, #1
   22960:	str	r3, [r5]
   22964:	ldr	r3, [r4, #4]
   22968:	add	r3, r3, #1
   2296c:	str	r3, [r4, #4]
   22970:	ldr	r3, [r4, #8]
   22974:	mov	r0, r3
   22978:	ldrd	r4, [sp]
   2297c:	ldr	r6, [sp, #8]
   22980:	add	sp, sp, #12
   22984:	pop	{pc}		; (ldr pc, [sp], #4)
   22988:	ldr	r0, [r4]
   2298c:	bl	122ac <feof@plt>
   22990:	cmp	r0, #0
   22994:	movne	r3, #2
   22998:	moveq	r3, #4
   2299c:	str	r3, [r5]
   229a0:	mov	r3, #0
   229a4:	b	22974 <__assert_fail@plt+0x103b0>
   229a8:	ldr	r3, [r0, #20]
   229ac:	ldr	r3, [r3]
   229b0:	cmp	r3, #0
   229b4:	moveq	r2, #2
   229b8:	streq	r2, [r1]
   229bc:	beq	229d8 <__assert_fail@plt+0x10414>
   229c0:	mov	r3, #1
   229c4:	str	r3, [r1]
   229c8:	ldr	r3, [r0, #20]
   229cc:	add	r2, r3, #4
   229d0:	str	r2, [r0, #20]
   229d4:	ldr	r3, [r3]
   229d8:	mov	r0, r3
   229dc:	bx	lr
   229e0:	ldr	r3, [r0]
   229e4:	cmp	r3, #0
   229e8:	beq	229f4 <__assert_fail@plt+0x10430>
   229ec:	ldr	r0, [r0, #4]
   229f0:	bx	lr
   229f4:	ldr	r3, [r0, #20]
   229f8:	ldr	r0, [r0, #16]
   229fc:	sub	r0, r3, r0
   22a00:	asr	r0, r0, #2
   22a04:	bx	lr
   22a08:	str	r4, [sp, #-8]!
   22a0c:	str	lr, [sp, #4]
   22a10:	mov	r4, r0
   22a14:	ldr	r3, [r0]
   22a18:	cmp	r3, #0
   22a1c:	beq	22a28 <__assert_fail@plt+0x10464>
   22a20:	ldr	r0, [r0, #8]
   22a24:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   22a28:	mov	r0, r4
   22a2c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   22a30:	ldr	r4, [sp]
   22a34:	add	sp, sp, #4
   22a38:	pop	{pc}		; (ldr pc, [sp], #4)
   22a3c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22a40:	strd	r6, [sp, #8]
   22a44:	strd	r8, [sp, #16]
   22a48:	str	sl, [sp, #24]
   22a4c:	str	lr, [sp, #28]
   22a50:	sub	sp, sp, #1024	; 0x400
   22a54:	mov	r7, r0
   22a58:	mov	r8, r1
   22a5c:	ldr	r6, [sp, #1056]	; 0x420
   22a60:	ldr	r9, [sp, #1060]	; 0x424
   22a64:	movw	r1, #42360	; 0xa578
   22a68:	movt	r1, #4
   22a6c:	cmp	r6, #0
   22a70:	moveq	r6, r1
   22a74:	subs	sl, r2, #0
   22a78:	moveq	r3, #1024	; 0x400
   22a7c:	moveq	sl, sp
   22a80:	mvn	r4, #-2147483648	; 0x80000000
   22a84:	cmp	r3, r4
   22a88:	movcc	r4, r3
   22a8c:	mov	r5, sl
   22a90:	b	22b58 <__assert_fail@plt+0x10594>
   22a94:	cmp	r5, sl
   22a98:	moveq	r5, #0
   22a9c:	beq	22bd0 <__assert_fail@plt+0x1060c>
   22aa0:	bl	12318 <__errno_location@plt>
   22aa4:	mov	r4, r0
   22aa8:	ldr	r7, [r0]
   22aac:	ldr	r3, [r6, #8]
   22ab0:	mov	r0, r5
   22ab4:	blx	r3
   22ab8:	str	r7, [r4]
   22abc:	mov	r5, #0
   22ac0:	b	22bd0 <__assert_fail@plt+0x1060c>
   22ac4:	add	r7, r0, #1
   22ac8:	mov	r3, #0
   22acc:	strb	r3, [r5, r0]
   22ad0:	mov	r3, sp
   22ad4:	cmp	r5, r3
   22ad8:	beq	22b0c <__assert_fail@plt+0x10548>
   22adc:	cmp	r5, sl
   22ae0:	cmpne	r4, r7
   22ae4:	ble	22bd0 <__assert_fail@plt+0x1060c>
   22ae8:	ldr	r3, [r6, #4]
   22aec:	cmp	r3, #0
   22af0:	beq	22bd0 <__assert_fail@plt+0x1060c>
   22af4:	mov	r1, r7
   22af8:	mov	r0, r5
   22afc:	blx	r3
   22b00:	cmp	r0, #0
   22b04:	movne	r5, r0
   22b08:	b	22bd0 <__assert_fail@plt+0x1060c>
   22b0c:	ldr	r3, [r6]
   22b10:	mov	r0, r7
   22b14:	blx	r3
   22b18:	cmp	r0, #0
   22b1c:	beq	22ba8 <__assert_fail@plt+0x105e4>
   22b20:	mov	r2, r7
   22b24:	mov	r1, r5
   22b28:	bl	12000 <memcpy@plt>
   22b2c:	mov	r5, r0
   22b30:	b	22bd0 <__assert_fail@plt+0x1060c>
   22b34:	cmn	r4, #-1073741822	; 0xc0000002
   22b38:	bgt	22b94 <__assert_fail@plt+0x105d0>
   22b3c:	lsl	r4, r4, #1
   22b40:	add	r4, r4, #1
   22b44:	ldr	r3, [r6]
   22b48:	mov	r0, r4
   22b4c:	blx	r3
   22b50:	subs	r5, r0, #0
   22b54:	beq	22bac <__assert_fail@plt+0x105e8>
   22b58:	mov	r3, r4
   22b5c:	mov	r2, r5
   22b60:	mov	r1, r8
   22b64:	mov	r0, r7
   22b68:	blx	r9
   22b6c:	cmp	r0, #0
   22b70:	blt	22a94 <__assert_fail@plt+0x104d0>
   22b74:	cmp	r4, r0
   22b78:	bgt	22ac4 <__assert_fail@plt+0x10500>
   22b7c:	cmp	r5, sl
   22b80:	beq	22b34 <__assert_fail@plt+0x10570>
   22b84:	ldr	r3, [r6, #8]
   22b88:	mov	r0, r5
   22b8c:	blx	r3
   22b90:	b	22b34 <__assert_fail@plt+0x10570>
   22b94:	bl	12318 <__errno_location@plt>
   22b98:	mov	r3, #36	; 0x24
   22b9c:	str	r3, [r0]
   22ba0:	mov	r5, #0
   22ba4:	b	22bd0 <__assert_fail@plt+0x1060c>
   22ba8:	mov	r4, r7
   22bac:	ldr	r3, [r6, #12]
   22bb0:	cmp	r3, #0
   22bb4:	beq	22bc0 <__assert_fail@plt+0x105fc>
   22bb8:	mov	r0, r4
   22bbc:	blx	r3
   22bc0:	bl	12318 <__errno_location@plt>
   22bc4:	mov	r3, #12
   22bc8:	str	r3, [r0]
   22bcc:	mov	r5, #0
   22bd0:	mov	r0, r5
   22bd4:	add	sp, sp, #1024	; 0x400
   22bd8:	ldrd	r4, [sp]
   22bdc:	ldrd	r6, [sp, #8]
   22be0:	ldrd	r8, [sp, #16]
   22be4:	ldr	sl, [sp, #24]
   22be8:	add	sp, sp, #28
   22bec:	pop	{pc}		; (ldr pc, [sp], #4)
   22bf0:	strd	r4, [sp, #-16]!
   22bf4:	str	r6, [sp, #8]
   22bf8:	str	lr, [sp, #12]
   22bfc:	mov	r5, r0
   22c00:	mov	r4, r1
   22c04:	mov	r2, #0
   22c08:	mov	r1, #1
   22c0c:	bl	2f8cc <__assert_fail@plt+0x1d308>
   22c10:	cmp	r0, #0
   22c14:	blt	22c5c <__assert_fail@plt+0x10698>
   22c18:	cmp	r4, #0
   22c1c:	orrne	r2, r0, #1
   22c20:	biceq	r2, r0, #1
   22c24:	cmp	r2, r0
   22c28:	moveq	r0, #0
   22c2c:	beq	22c4c <__assert_fail@plt+0x10688>
   22c30:	mov	r1, #2
   22c34:	mov	r0, r5
   22c38:	bl	2f8cc <__assert_fail@plt+0x1d308>
   22c3c:	cmn	r0, #1
   22c40:	movne	r0, #0
   22c44:	moveq	r0, #1
   22c48:	rsb	r0, r0, #0
   22c4c:	ldrd	r4, [sp]
   22c50:	ldr	r6, [sp, #8]
   22c54:	add	sp, sp, #12
   22c58:	pop	{pc}		; (ldr pc, [sp], #4)
   22c5c:	mvn	r0, #0
   22c60:	b	22c4c <__assert_fail@plt+0x10688>
   22c64:	str	r4, [sp, #-8]!
   22c68:	str	lr, [sp, #4]
   22c6c:	mov	r2, #0
   22c70:	movw	r1, #1030	; 0x406
   22c74:	bl	2f8cc <__assert_fail@plt+0x1d308>
   22c78:	ldr	r4, [sp]
   22c7c:	add	sp, sp, #4
   22c80:	pop	{pc}		; (ldr pc, [sp], #4)
   22c84:	movw	r3, #48364	; 0xbcec
   22c88:	movt	r3, #5
   22c8c:	str	r0, [r3]
   22c90:	bx	lr
   22c94:	movw	r3, #48364	; 0xbcec
   22c98:	movt	r3, #5
   22c9c:	strb	r0, [r3, #4]
   22ca0:	bx	lr
   22ca4:	strd	r4, [sp, #-16]!
   22ca8:	str	r6, [sp, #8]
   22cac:	str	lr, [sp, #12]
   22cb0:	sub	sp, sp, #8
   22cb4:	movw	r3, #46420	; 0xb554
   22cb8:	movt	r3, #5
   22cbc:	ldr	r0, [r3]
   22cc0:	bl	41bec <__assert_fail@plt+0x2f628>
   22cc4:	cmp	r0, #0
   22cc8:	beq	22cf0 <__assert_fail@plt+0x1072c>
   22ccc:	movw	r3, #48364	; 0xbcec
   22cd0:	movt	r3, #5
   22cd4:	ldrb	r3, [r3, #4]
   22cd8:	cmp	r3, #0
   22cdc:	beq	22d1c <__assert_fail@plt+0x10758>
   22ce0:	bl	12318 <__errno_location@plt>
   22ce4:	ldr	r3, [r0]
   22ce8:	cmp	r3, #32
   22cec:	bne	22d1c <__assert_fail@plt+0x10758>
   22cf0:	movw	r3, #46408	; 0xb548
   22cf4:	movt	r3, #5
   22cf8:	ldr	r0, [r3]
   22cfc:	bl	41bec <__assert_fail@plt+0x2f628>
   22d00:	cmp	r0, #0
   22d04:	bne	22da4 <__assert_fail@plt+0x107e0>
   22d08:	add	sp, sp, #8
   22d0c:	ldrd	r4, [sp]
   22d10:	ldr	r6, [sp, #8]
   22d14:	add	sp, sp, #12
   22d18:	pop	{pc}		; (ldr pc, [sp], #4)
   22d1c:	mov	r2, #5
   22d20:	movw	r1, #35944	; 0x8c68
   22d24:	movt	r1, #4
   22d28:	mov	r0, #0
   22d2c:	bl	12084 <dcgettext@plt>
   22d30:	mov	r4, r0
   22d34:	movw	r3, #48364	; 0xbcec
   22d38:	movt	r3, #5
   22d3c:	ldr	r5, [r3]
   22d40:	cmp	r5, #0
   22d44:	beq	22d84 <__assert_fail@plt+0x107c0>
   22d48:	bl	12318 <__errno_location@plt>
   22d4c:	ldr	r6, [r0]
   22d50:	mov	r0, r5
   22d54:	bl	2d33c <__assert_fail@plt+0x1ad78>
   22d58:	str	r4, [sp]
   22d5c:	mov	r3, r0
   22d60:	movw	r2, #35956	; 0x8c74
   22d64:	movt	r2, #4
   22d68:	mov	r1, r6
   22d6c:	mov	r0, #0
   22d70:	bl	121bc <error@plt>
   22d74:	movw	r3, #46316	; 0xb4ec
   22d78:	movt	r3, #5
   22d7c:	ldr	r0, [r3]
   22d80:	bl	11ff4 <_exit@plt>
   22d84:	bl	12318 <__errno_location@plt>
   22d88:	mov	r3, r4
   22d8c:	movw	r2, #35960	; 0x8c78
   22d90:	movt	r2, #4
   22d94:	ldr	r1, [r0]
   22d98:	mov	r0, #0
   22d9c:	bl	121bc <error@plt>
   22da0:	b	22d74 <__assert_fail@plt+0x107b0>
   22da4:	movw	r3, #46316	; 0xb4ec
   22da8:	movt	r3, #5
   22dac:	ldr	r0, [r3]
   22db0:	bl	11ff4 <_exit@plt>
   22db4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22db8:	strd	r6, [sp, #8]
   22dbc:	str	r8, [sp, #16]
   22dc0:	str	lr, [sp, #20]
   22dc4:	bl	121d4 <opendir@plt>
   22dc8:	subs	r4, r0, #0
   22dcc:	beq	22de0 <__assert_fail@plt+0x1081c>
   22dd0:	mov	r0, r4
   22dd4:	bl	124bc <dirfd@plt>
   22dd8:	cmp	r0, #2
   22ddc:	bls	22df8 <__assert_fail@plt+0x10834>
   22de0:	mov	r0, r4
   22de4:	ldrd	r4, [sp]
   22de8:	ldrd	r6, [sp, #8]
   22dec:	ldr	r8, [sp, #16]
   22df0:	add	sp, sp, #20
   22df4:	pop	{pc}		; (ldr pc, [sp], #4)
   22df8:	mov	r2, #3
   22dfc:	movw	r1, #1030	; 0x406
   22e00:	bl	2f8cc <__assert_fail@plt+0x1d308>
   22e04:	subs	r7, r0, #0
   22e08:	bge	22e30 <__assert_fail@plt+0x1086c>
   22e0c:	bl	12318 <__errno_location@plt>
   22e10:	ldr	r6, [r0]
   22e14:	mov	r5, #0
   22e18:	mov	r0, r4
   22e1c:	bl	12594 <closedir@plt>
   22e20:	bl	12318 <__errno_location@plt>
   22e24:	str	r6, [r0]
   22e28:	mov	r4, r5
   22e2c:	b	22de0 <__assert_fail@plt+0x1081c>
   22e30:	mov	r0, r7
   22e34:	bl	12498 <fdopendir@plt>
   22e38:	mov	r5, r0
   22e3c:	bl	12318 <__errno_location@plt>
   22e40:	ldr	r6, [r0]
   22e44:	cmp	r5, #0
   22e48:	bne	22e18 <__assert_fail@plt+0x10854>
   22e4c:	mov	r0, r7
   22e50:	bl	1257c <close@plt>
   22e54:	b	22e18 <__assert_fail@plt+0x10854>
   22e58:	strd	r4, [sp, #-16]!
   22e5c:	str	r6, [sp, #8]
   22e60:	str	lr, [sp, #12]
   22e64:	mov	r6, r0
   22e68:	bl	41b28 <__assert_fail@plt+0x2f564>
   22e6c:	ldrb	r3, [r0]
   22e70:	cmp	r3, #0
   22e74:	beq	22ec4 <__assert_fail@plt+0x10900>
   22e78:	mov	r5, r0
   22e7c:	bl	41b90 <__assert_fail@plt+0x2f5cc>
   22e80:	ldrb	r4, [r5, r0]
   22e84:	cmp	r4, #47	; 0x2f
   22e88:	movne	r4, r0
   22e8c:	addeq	r4, r0, #1
   22e90:	add	r0, r4, #1
   22e94:	bl	2e36c <__assert_fail@plt+0x1bda8>
   22e98:	mov	r6, r0
   22e9c:	mov	r2, r4
   22ea0:	mov	r1, r5
   22ea4:	bl	12000 <memcpy@plt>
   22ea8:	mov	r3, #0
   22eac:	strb	r3, [r6, r4]
   22eb0:	mov	r0, r6
   22eb4:	ldrd	r4, [sp]
   22eb8:	ldr	r6, [sp, #8]
   22ebc:	add	sp, sp, #12
   22ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   22ec4:	mov	r0, r6
   22ec8:	bl	41b90 <__assert_fail@plt+0x2f5cc>
   22ecc:	mov	r4, r0
   22ed0:	mov	r5, r6
   22ed4:	b	22e90 <__assert_fail@plt+0x108cc>
   22ed8:	strd	r4, [sp, #-16]!
   22edc:	str	r6, [sp, #8]
   22ee0:	str	lr, [sp, #12]
   22ee4:	mov	r4, r0
   22ee8:	ldrb	ip, [r0]
   22eec:	cmp	ip, #47	; 0x2f
   22ef0:	movne	r5, #0
   22ef4:	moveq	r5, #1
   22ef8:	bl	41b28 <__assert_fail@plt+0x2f564>
   22efc:	sub	r0, r0, r4
   22f00:	cmp	r0, r5
   22f04:	bls	22f44 <__assert_fail@plt+0x10980>
   22f08:	add	r3, r4, r0
   22f0c:	ldrb	r3, [r3, #-1]
   22f10:	cmp	r3, #47	; 0x2f
   22f14:	bne	22f44 <__assert_fail@plt+0x10980>
   22f18:	sub	r0, r0, #2
   22f1c:	add	r3, r4, r0
   22f20:	sub	ip, r4, #1
   22f24:	add	ip, ip, r5
   22f28:	rsb	r2, r4, #1
   22f2c:	add	r0, r2, r3
   22f30:	cmp	r3, ip
   22f34:	beq	22f44 <__assert_fail@plt+0x10980>
   22f38:	ldrb	r1, [r3], #-1
   22f3c:	cmp	r1, #47	; 0x2f
   22f40:	beq	22f2c <__assert_fail@plt+0x10968>
   22f44:	ldrd	r4, [sp]
   22f48:	ldr	r6, [sp, #8]
   22f4c:	add	sp, sp, #12
   22f50:	pop	{pc}		; (ldr pc, [sp], #4)
   22f54:	strd	r4, [sp, #-16]!
   22f58:	str	r6, [sp, #8]
   22f5c:	str	lr, [sp, #12]
   22f60:	mov	r6, r0
   22f64:	bl	22ed8 <__assert_fail@plt+0x10914>
   22f68:	mov	r4, r0
   22f6c:	add	r3, r0, #1
   22f70:	cmp	r0, #0
   22f74:	movne	r0, r3
   22f78:	addeq	r0, r3, #1
   22f7c:	bl	32148 <__assert_fail@plt+0x1fb84>
   22f80:	subs	r5, r0, #0
   22f84:	beq	22fb4 <__assert_fail@plt+0x109f0>
   22f88:	mov	r2, r4
   22f8c:	mov	r1, r6
   22f90:	mov	r0, r5
   22f94:	bl	12000 <memcpy@plt>
   22f98:	cmp	r4, #0
   22f9c:	bne	22fac <__assert_fail@plt+0x109e8>
   22fa0:	mov	r3, #46	; 0x2e
   22fa4:	strb	r3, [r5]
   22fa8:	mov	r4, #1
   22fac:	mov	r3, #0
   22fb0:	strb	r3, [r5, r4]
   22fb4:	mov	r0, r5
   22fb8:	ldrd	r4, [sp]
   22fbc:	ldr	r6, [sp, #8]
   22fc0:	add	sp, sp, #12
   22fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   22fc8:	str	r4, [sp, #-8]!
   22fcc:	str	lr, [sp, #4]
   22fd0:	mov	r4, r0
   22fd4:	bl	41b28 <__assert_fail@plt+0x2f564>
   22fd8:	ldrb	r3, [r0]
   22fdc:	cmp	r3, #0
   22fe0:	movne	r4, r0
   22fe4:	mov	r0, r4
   22fe8:	bl	41b90 <__assert_fail@plt+0x2f5cc>
   22fec:	ldrb	r3, [r4, r0]
   22ff0:	mov	r2, #0
   22ff4:	strb	r2, [r4, r0]
   22ff8:	subs	r0, r3, r2
   22ffc:	movne	r0, #1
   23000:	ldr	r4, [sp]
   23004:	add	sp, sp, #4
   23008:	pop	{pc}		; (ldr pc, [sp], #4)
   2300c:	push	{r1, r2, r3}
   23010:	push	{lr}		; (str lr, [sp, #-4]!)
   23014:	sub	sp, sp, #8
   23018:	ldr	r1, [sp, #12]
   2301c:	tst	r1, #64	; 0x40
   23020:	addne	r3, sp, #20
   23024:	strne	r3, [sp, #4]
   23028:	ldrne	r2, [sp, #16]
   2302c:	moveq	r2, #0
   23030:	bl	121ec <open64@plt>
   23034:	bl	2ddb8 <__assert_fail@plt+0x1b7f4>
   23038:	add	sp, sp, #8
   2303c:	pop	{lr}		; (ldr lr, [sp], #4)
   23040:	add	sp, sp, #12
   23044:	bx	lr
   23048:	and	r3, r0, #61440	; 0xf000
   2304c:	cmp	r3, #32768	; 0x8000
   23050:	moveq	r3, #45	; 0x2d
   23054:	beq	230a0 <__assert_fail@plt+0x10adc>
   23058:	cmp	r3, #16384	; 0x4000
   2305c:	moveq	r3, #100	; 0x64
   23060:	beq	230a0 <__assert_fail@plt+0x10adc>
   23064:	cmp	r3, #24576	; 0x6000
   23068:	moveq	r3, #98	; 0x62
   2306c:	beq	230a0 <__assert_fail@plt+0x10adc>
   23070:	cmp	r3, #8192	; 0x2000
   23074:	moveq	r3, #99	; 0x63
   23078:	beq	230a0 <__assert_fail@plt+0x10adc>
   2307c:	cmp	r3, #40960	; 0xa000
   23080:	moveq	r3, #108	; 0x6c
   23084:	beq	230a0 <__assert_fail@plt+0x10adc>
   23088:	cmp	r3, #4096	; 0x1000
   2308c:	moveq	r3, #112	; 0x70
   23090:	beq	230a0 <__assert_fail@plt+0x10adc>
   23094:	cmp	r3, #49152	; 0xc000
   23098:	movne	r3, #63	; 0x3f
   2309c:	moveq	r3, #115	; 0x73
   230a0:	strb	r3, [r1]
   230a4:	and	r3, r0, #256	; 0x100
   230a8:	cmp	r3, #0
   230ac:	movne	r3, #114	; 0x72
   230b0:	moveq	r3, #45	; 0x2d
   230b4:	strb	r3, [r1, #1]
   230b8:	and	r3, r0, #128	; 0x80
   230bc:	cmp	r3, #0
   230c0:	movne	r3, #119	; 0x77
   230c4:	moveq	r3, #45	; 0x2d
   230c8:	strb	r3, [r1, #2]
   230cc:	tst	r0, #2048	; 0x800
   230d0:	beq	23184 <__assert_fail@plt+0x10bc0>
   230d4:	and	r3, r0, #64	; 0x40
   230d8:	cmp	r3, #0
   230dc:	movne	r3, #115	; 0x73
   230e0:	moveq	r3, #83	; 0x53
   230e4:	strb	r3, [r1, #3]
   230e8:	and	r3, r0, #32
   230ec:	cmp	r3, #0
   230f0:	movne	r3, #114	; 0x72
   230f4:	moveq	r3, #45	; 0x2d
   230f8:	strb	r3, [r1, #4]
   230fc:	and	r3, r0, #16
   23100:	cmp	r3, #0
   23104:	movne	r3, #119	; 0x77
   23108:	moveq	r3, #45	; 0x2d
   2310c:	strb	r3, [r1, #5]
   23110:	tst	r0, #1024	; 0x400
   23114:	beq	23198 <__assert_fail@plt+0x10bd4>
   23118:	and	r3, r0, #8
   2311c:	cmp	r3, #0
   23120:	movne	r3, #115	; 0x73
   23124:	moveq	r3, #83	; 0x53
   23128:	strb	r3, [r1, #6]
   2312c:	and	r3, r0, #4
   23130:	cmp	r3, #0
   23134:	movne	r3, #114	; 0x72
   23138:	moveq	r3, #45	; 0x2d
   2313c:	strb	r3, [r1, #7]
   23140:	and	r3, r0, #2
   23144:	cmp	r3, #0
   23148:	movne	r3, #119	; 0x77
   2314c:	moveq	r3, #45	; 0x2d
   23150:	strb	r3, [r1, #8]
   23154:	tst	r0, #512	; 0x200
   23158:	beq	231ac <__assert_fail@plt+0x10be8>
   2315c:	and	r0, r0, #1
   23160:	cmp	r0, #0
   23164:	movne	r3, #116	; 0x74
   23168:	moveq	r3, #84	; 0x54
   2316c:	strb	r3, [r1, #9]
   23170:	mov	r3, #32
   23174:	strb	r3, [r1, #10]
   23178:	mov	r3, #0
   2317c:	strb	r3, [r1, #11]
   23180:	bx	lr
   23184:	and	r3, r0, #64	; 0x40
   23188:	cmp	r3, #0
   2318c:	movne	r3, #120	; 0x78
   23190:	moveq	r3, #45	; 0x2d
   23194:	b	230e4 <__assert_fail@plt+0x10b20>
   23198:	and	r3, r0, #8
   2319c:	cmp	r3, #0
   231a0:	movne	r3, #120	; 0x78
   231a4:	moveq	r3, #45	; 0x2d
   231a8:	b	23128 <__assert_fail@plt+0x10b64>
   231ac:	and	r0, r0, #1
   231b0:	cmp	r0, #0
   231b4:	movne	r3, #120	; 0x78
   231b8:	moveq	r3, #45	; 0x2d
   231bc:	b	2316c <__assert_fail@plt+0x10ba8>
   231c0:	str	r4, [sp, #-8]!
   231c4:	str	lr, [sp, #4]
   231c8:	ldr	r0, [r0, #16]
   231cc:	bl	23048 <__assert_fail@plt+0x10a84>
   231d0:	ldr	r4, [sp]
   231d4:	add	sp, sp, #4
   231d8:	pop	{pc}		; (ldr pc, [sp], #4)
   231dc:	strd	r4, [sp, #-16]!
   231e0:	str	r6, [sp, #8]
   231e4:	str	lr, [sp, #12]
   231e8:	mov	r5, r1
   231ec:	bl	124d4 <fopen64@plt>
   231f0:	subs	r4, r0, #0
   231f4:	beq	23208 <__assert_fail@plt+0x10c44>
   231f8:	mov	r0, r4
   231fc:	bl	12390 <fileno@plt>
   23200:	cmp	r0, #2
   23204:	bls	2321c <__assert_fail@plt+0x10c58>
   23208:	mov	r0, r4
   2320c:	ldrd	r4, [sp]
   23210:	ldr	r6, [sp, #8]
   23214:	add	sp, sp, #12
   23218:	pop	{pc}		; (ldr pc, [sp], #4)
   2321c:	bl	2dd98 <__assert_fail@plt+0x1b7d4>
   23220:	subs	r6, r0, #0
   23224:	blt	2326c <__assert_fail@plt+0x10ca8>
   23228:	mov	r0, r4
   2322c:	bl	123cc <fclose@plt>
   23230:	cmp	r0, #0
   23234:	bne	2324c <__assert_fail@plt+0x10c88>
   23238:	mov	r1, r5
   2323c:	mov	r0, r6
   23240:	bl	11e8c <fdopen@plt>
   23244:	subs	r4, r0, #0
   23248:	bne	23208 <__assert_fail@plt+0x10c44>
   2324c:	bl	12318 <__errno_location@plt>
   23250:	mov	r4, r0
   23254:	ldr	r5, [r0]
   23258:	mov	r0, r6
   2325c:	bl	1257c <close@plt>
   23260:	str	r5, [r4]
   23264:	mov	r4, #0
   23268:	b	23208 <__assert_fail@plt+0x10c44>
   2326c:	bl	12318 <__errno_location@plt>
   23270:	mov	r5, r0
   23274:	ldr	r6, [r0]
   23278:	mov	r0, r4
   2327c:	bl	123cc <fclose@plt>
   23280:	str	r6, [r5]
   23284:	mov	r4, #0
   23288:	b	23208 <__assert_fail@plt+0x10c44>
   2328c:	andeq	r0, r0, r0
   23290:	ror	r0, r0, #3
   23294:	udiv	r3, r0, r1
   23298:	mls	r0, r3, r1, r0
   2329c:	bx	lr
   232a0:	cmp	r1, r0
   232a4:	movne	r0, #0
   232a8:	moveq	r0, #1
   232ac:	bx	lr
   232b0:	ldr	r2, [r0, #20]
   232b4:	movw	r3, #35964	; 0x8c7c
   232b8:	movt	r3, #4
   232bc:	cmp	r2, r3
   232c0:	beq	2335c <__assert_fail@plt+0x10d98>
   232c4:	vldr	s15, [r2, #8]
   232c8:	vldr	s14, [pc, #148]	; 23364 <__assert_fail@plt+0x10da0>
   232cc:	vcmpe.f32	s15, s14
   232d0:	vmrs	APSR_nzcv, fpscr
   232d4:	ble	23334 <__assert_fail@plt+0x10d70>
   232d8:	vldr	s14, [pc, #136]	; 23368 <__assert_fail@plt+0x10da4>
   232dc:	vcmpe.f32	s15, s14
   232e0:	vmrs	APSR_nzcv, fpscr
   232e4:	bpl	23334 <__assert_fail@plt+0x10d70>
   232e8:	vldr	s13, [r2, #12]
   232ec:	vldr	s14, [pc, #120]	; 2336c <__assert_fail@plt+0x10da8>
   232f0:	vcmpe.f32	s13, s14
   232f4:	vmrs	APSR_nzcv, fpscr
   232f8:	ble	23334 <__assert_fail@plt+0x10d70>
   232fc:	vldr	s14, [r2]
   23300:	vcmpe.f32	s14, #0.0
   23304:	vmrs	APSR_nzcv, fpscr
   23308:	blt	23334 <__assert_fail@plt+0x10d70>
   2330c:	vldr	s13, [pc, #80]	; 23364 <__assert_fail@plt+0x10da0>
   23310:	vadd.f32	s14, s14, s13
   23314:	vldr	s13, [r2, #4]
   23318:	vcmpe.f32	s14, s13
   2331c:	vmrs	APSR_nzcv, fpscr
   23320:	bpl	23334 <__assert_fail@plt+0x10d70>
   23324:	vldr	s12, [pc, #68]	; 23370 <__assert_fail@plt+0x10dac>
   23328:	vcmpe.f32	s13, s12
   2332c:	vmrs	APSR_nzcv, fpscr
   23330:	bls	23348 <__assert_fail@plt+0x10d84>
   23334:	movw	r3, #35964	; 0x8c7c
   23338:	movt	r3, #4
   2333c:	str	r3, [r0, #20]
   23340:	mov	r0, #0
   23344:	bx	lr
   23348:	vcmpe.f32	s15, s14
   2334c:	vmrs	APSR_nzcv, fpscr
   23350:	ble	23334 <__assert_fail@plt+0x10d70>
   23354:	mov	r0, #1
   23358:	bx	lr
   2335c:	mov	r0, #1
   23360:	bx	lr
   23364:	stclcc	12, cr12, [ip, #820]	; 0x334
   23368:	svccc	0x00666666
   2336c:	svccc	0x008ccccd
   23370:	svccc	0x00800000
   23374:	ldrb	r3, [r1, #16]
   23378:	cmp	r3, #0
   2337c:	bne	233a8 <__assert_fail@plt+0x10de4>
   23380:	vmov	s15, r0
   23384:	vcvt.f32.u32	s15, s15
   23388:	vldr	s13, [r1, #8]
   2338c:	vdiv.f32	s14, s15, s13
   23390:	vldr	s15, [pc, #224]	; 23478 <__assert_fail@plt+0x10eb4>
   23394:	vcmpe.f32	s14, s15
   23398:	vmrs	APSR_nzcv, fpscr
   2339c:	bge	23468 <__assert_fail@plt+0x10ea4>
   233a0:	vcvt.u32.f32	s15, s14
   233a4:	vmov	r0, s15
   233a8:	cmp	r0, #10
   233ac:	movcc	r0, #10
   233b0:	orr	r0, r0, #1
   233b4:	cmn	r0, #1
   233b8:	beq	233cc <__assert_fail@plt+0x10e08>
   233bc:	push	{lr}		; (str lr, [sp, #-4]!)
   233c0:	movw	lr, #43691	; 0xaaab
   233c4:	movt	lr, #43690	; 0xaaaa
   233c8:	b	233f4 <__assert_fail@plt+0x10e30>
   233cc:	mov	r0, #0
   233d0:	bx	lr
   233d4:	mov	r3, #3
   233d8:	udiv	r2, r0, r3
   233dc:	mls	r3, r3, r2, r0
   233e0:	cmp	r3, #0
   233e4:	bne	23444 <__assert_fail@plt+0x10e80>
   233e8:	add	r0, r0, #2
   233ec:	cmn	r0, #1
   233f0:	beq	23470 <__assert_fail@plt+0x10eac>
   233f4:	cmp	r0, #9
   233f8:	bls	233d4 <__assert_fail@plt+0x10e10>
   233fc:	umull	r2, r3, lr, r0
   23400:	lsr	r3, r3, #1
   23404:	add	r3, r3, r3, lsl #1
   23408:	cmp	r0, r3
   2340c:	beq	233e8 <__assert_fail@plt+0x10e24>
   23410:	mov	r1, #16
   23414:	mov	r2, #9
   23418:	mov	r3, #3
   2341c:	add	r2, r2, r1
   23420:	add	r3, r3, #2
   23424:	cmp	r2, r0
   23428:	bcs	233d8 <__assert_fail@plt+0x10e14>
   2342c:	add	r1, r1, #8
   23430:	udiv	ip, r0, r3
   23434:	mls	ip, r3, ip, r0
   23438:	cmp	ip, #0
   2343c:	bne	2341c <__assert_fail@plt+0x10e58>
   23440:	b	233e8 <__assert_fail@plt+0x10e24>
   23444:	lsl	r2, r0, #2
   23448:	lsr	r3, r0, #30
   2344c:	adds	r3, r3, #0
   23450:	movne	r3, #1
   23454:	cmp	r2, #0
   23458:	movlt	r3, #1
   2345c:	cmp	r3, #0
   23460:	movne	r0, #0
   23464:	pop	{pc}		; (ldr pc, [sp], #4)
   23468:	mov	r0, #0
   2346c:	bx	lr
   23470:	mov	r0, #0
   23474:	b	23464 <__assert_fail@plt+0x10ea0>
   23478:	svcmi	0x00800000
   2347c:	str	r4, [sp, #-8]!
   23480:	str	lr, [sp, #4]
   23484:	mov	r4, r0
   23488:	mov	r0, r1
   2348c:	ldr	r3, [r4, #24]
   23490:	ldr	r1, [r4, #8]
   23494:	blx	r3
   23498:	ldr	r3, [r4, #8]
   2349c:	cmp	r3, r0
   234a0:	bls	234b8 <__assert_fail@plt+0x10ef4>
   234a4:	ldr	r3, [r4]
   234a8:	add	r0, r3, r0, lsl #3
   234ac:	ldr	r4, [sp]
   234b0:	add	sp, sp, #4
   234b4:	pop	{pc}		; (ldr pc, [sp], #4)
   234b8:	bl	12570 <abort@plt>
   234bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   234c0:	strd	r6, [sp, #8]
   234c4:	strd	r8, [sp, #16]
   234c8:	strd	sl, [sp, #24]
   234cc:	str	lr, [sp, #32]
   234d0:	sub	sp, sp, #4
   234d4:	ldr	r7, [r1]
   234d8:	ldr	r3, [r1, #4]
   234dc:	cmp	r7, r3
   234e0:	bcs	23638 <__assert_fail@plt+0x11074>
   234e4:	mov	fp, r2
   234e8:	mov	r9, r1
   234ec:	mov	r6, r0
   234f0:	add	r7, r7, #8
   234f4:	mov	sl, #0
   234f8:	b	235cc <__assert_fail@plt+0x11008>
   234fc:	str	r5, [r0]
   23500:	ldr	r2, [r6, #12]
   23504:	add	r2, r2, #1
   23508:	str	r2, [r6, #12]
   2350c:	str	sl, [r4]
   23510:	ldr	r2, [r6, #36]	; 0x24
   23514:	str	r2, [r4, #4]
   23518:	str	r4, [r6, #36]	; 0x24
   2351c:	mov	r4, r3
   23520:	cmp	r3, #0
   23524:	beq	23558 <__assert_fail@plt+0x10f94>
   23528:	ldr	r5, [r4]
   2352c:	mov	r1, r5
   23530:	mov	r0, r6
   23534:	bl	2347c <__assert_fail@plt+0x10eb8>
   23538:	ldr	r3, [r4, #4]
   2353c:	ldr	r2, [r0]
   23540:	cmp	r2, #0
   23544:	beq	234fc <__assert_fail@plt+0x10f38>
   23548:	ldr	r2, [r0, #4]
   2354c:	str	r2, [r4, #4]
   23550:	str	r4, [r0, #4]
   23554:	b	2351c <__assert_fail@plt+0x10f58>
   23558:	ldr	r4, [r8, #-8]
   2355c:	str	sl, [r8, #-4]
   23560:	cmp	fp, #0
   23564:	bne	235b8 <__assert_fail@plt+0x10ff4>
   23568:	mov	r1, r4
   2356c:	mov	r0, r6
   23570:	bl	2347c <__assert_fail@plt+0x10eb8>
   23574:	mov	r5, r0
   23578:	ldr	r3, [r0]
   2357c:	cmp	r3, #0
   23580:	beq	23604 <__assert_fail@plt+0x11040>
   23584:	ldr	r0, [r6, #36]	; 0x24
   23588:	cmp	r0, #0
   2358c:	beq	235ec <__assert_fail@plt+0x11028>
   23590:	ldr	r3, [r0, #4]
   23594:	str	r3, [r6, #36]	; 0x24
   23598:	str	r4, [r0]
   2359c:	ldr	r3, [r5, #4]
   235a0:	str	r3, [r0, #4]
   235a4:	str	r0, [r5, #4]
   235a8:	str	sl, [r8, #-8]
   235ac:	ldr	r3, [r9, #12]
   235b0:	sub	r3, r3, #1
   235b4:	str	r3, [r9, #12]
   235b8:	add	r2, r7, #8
   235bc:	ldr	r3, [r9, #4]
   235c0:	cmp	r3, r7
   235c4:	bls	23618 <__assert_fail@plt+0x11054>
   235c8:	mov	r7, r2
   235cc:	mov	r8, r7
   235d0:	ldr	r3, [r7, #-8]
   235d4:	cmp	r3, #0
   235d8:	beq	235b8 <__assert_fail@plt+0x10ff4>
   235dc:	ldr	r4, [r7, #-4]
   235e0:	cmp	r4, #0
   235e4:	bne	23528 <__assert_fail@plt+0x10f64>
   235e8:	b	23558 <__assert_fail@plt+0x10f94>
   235ec:	mov	r0, #8
   235f0:	bl	32148 <__assert_fail@plt+0x1fb84>
   235f4:	cmp	r0, #0
   235f8:	bne	23598 <__assert_fail@plt+0x10fd4>
   235fc:	mov	r0, fp
   23600:	b	2361c <__assert_fail@plt+0x11058>
   23604:	str	r4, [r0]
   23608:	ldr	r3, [r6, #12]
   2360c:	add	r3, r3, #1
   23610:	str	r3, [r6, #12]
   23614:	b	235a8 <__assert_fail@plt+0x10fe4>
   23618:	mov	r0, #1
   2361c:	add	sp, sp, #4
   23620:	ldrd	r4, [sp]
   23624:	ldrd	r6, [sp, #8]
   23628:	ldrd	r8, [sp, #16]
   2362c:	ldrd	sl, [sp, #24]
   23630:	add	sp, sp, #32
   23634:	pop	{pc}		; (ldr pc, [sp], #4)
   23638:	mov	r0, #1
   2363c:	b	2361c <__assert_fail@plt+0x11058>
   23640:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23644:	strd	r6, [sp, #8]
   23648:	str	r8, [sp, #16]
   2364c:	str	lr, [sp, #20]
   23650:	mov	r6, r0
   23654:	mov	r5, r1
   23658:	mov	r7, r2
   2365c:	mov	r8, r3
   23660:	bl	2347c <__assert_fail@plt+0x10eb8>
   23664:	mov	r4, r0
   23668:	str	r0, [r7]
   2366c:	ldr	r0, [r0]
   23670:	cmp	r0, #0
   23674:	beq	236f0 <__assert_fail@plt+0x1112c>
   23678:	cmp	r0, r5
   2367c:	beq	23704 <__assert_fail@plt+0x11140>
   23680:	ldr	r3, [r6, #28]
   23684:	mov	r1, r0
   23688:	mov	r0, r5
   2368c:	blx	r3
   23690:	cmp	r0, #0
   23694:	bne	23704 <__assert_fail@plt+0x11140>
   23698:	ldr	r0, [r4, #4]
   2369c:	cmp	r0, #0
   236a0:	beq	236f0 <__assert_fail@plt+0x1112c>
   236a4:	ldr	r1, [r0]
   236a8:	cmp	r5, r1
   236ac:	beq	236e0 <__assert_fail@plt+0x1111c>
   236b0:	ldr	r3, [r6, #28]
   236b4:	mov	r0, r5
   236b8:	blx	r3
   236bc:	cmp	r0, #0
   236c0:	bne	236e0 <__assert_fail@plt+0x1111c>
   236c4:	ldr	r4, [r4, #4]
   236c8:	ldr	r0, [r4, #4]
   236cc:	cmp	r0, #0
   236d0:	beq	236f0 <__assert_fail@plt+0x1112c>
   236d4:	ldr	r1, [r0]
   236d8:	cmp	r1, r5
   236dc:	bne	236b0 <__assert_fail@plt+0x110ec>
   236e0:	ldr	r3, [r4, #4]
   236e4:	ldr	r0, [r3]
   236e8:	cmp	r8, #0
   236ec:	bne	23744 <__assert_fail@plt+0x11180>
   236f0:	ldrd	r4, [sp]
   236f4:	ldrd	r6, [sp, #8]
   236f8:	ldr	r8, [sp, #16]
   236fc:	add	sp, sp, #20
   23700:	pop	{pc}		; (ldr pc, [sp], #4)
   23704:	ldr	r0, [r4]
   23708:	cmp	r8, #0
   2370c:	beq	236f0 <__assert_fail@plt+0x1112c>
   23710:	ldr	r1, [r4, #4]
   23714:	cmp	r1, #0
   23718:	moveq	r3, #0
   2371c:	streq	r3, [r4]
   23720:	beq	236f0 <__assert_fail@plt+0x1112c>
   23724:	ldrd	r2, [r1]
   23728:	strd	r2, [r4]
   2372c:	mov	r3, #0
   23730:	str	r3, [r1]
   23734:	ldr	r3, [r6, #36]	; 0x24
   23738:	str	r3, [r1, #4]
   2373c:	str	r1, [r6, #36]	; 0x24
   23740:	b	236f0 <__assert_fail@plt+0x1112c>
   23744:	ldr	r2, [r3, #4]
   23748:	str	r2, [r4, #4]
   2374c:	mov	r2, #0
   23750:	str	r2, [r3]
   23754:	ldr	r2, [r6, #36]	; 0x24
   23758:	str	r2, [r3, #4]
   2375c:	str	r3, [r6, #36]	; 0x24
   23760:	b	236f0 <__assert_fail@plt+0x1112c>
   23764:	ldr	r0, [r0, #8]
   23768:	bx	lr
   2376c:	ldr	r0, [r0, #12]
   23770:	bx	lr
   23774:	ldr	r0, [r0, #16]
   23778:	bx	lr
   2377c:	ldr	r2, [r0]
   23780:	ldr	r3, [r0, #4]
   23784:	cmp	r2, r3
   23788:	bcs	237f8 <__assert_fail@plt+0x11234>
   2378c:	add	r1, r2, #8
   23790:	sub	ip, r3, #1
   23794:	sub	ip, ip, r2
   23798:	bic	ip, ip, #7
   2379c:	add	r2, r2, #16
   237a0:	add	ip, ip, r2
   237a4:	mov	r0, #0
   237a8:	b	237c4 <__assert_fail@plt+0x11200>
   237ac:	mov	r2, #1
   237b0:	cmp	r0, r2
   237b4:	movcc	r0, r2
   237b8:	add	r1, r1, #8
   237bc:	cmp	r1, ip
   237c0:	beq	237f4 <__assert_fail@plt+0x11230>
   237c4:	ldr	r3, [r1, #-8]
   237c8:	cmp	r3, #0
   237cc:	beq	237b8 <__assert_fail@plt+0x111f4>
   237d0:	ldr	r3, [r1, #-4]
   237d4:	cmp	r3, #0
   237d8:	beq	237ac <__assert_fail@plt+0x111e8>
   237dc:	mov	r2, #1
   237e0:	add	r2, r2, #1
   237e4:	ldr	r3, [r3, #4]
   237e8:	cmp	r3, #0
   237ec:	bne	237e0 <__assert_fail@plt+0x1121c>
   237f0:	b	237b0 <__assert_fail@plt+0x111ec>
   237f4:	bx	lr
   237f8:	mov	r0, #0
   237fc:	bx	lr
   23800:	push	{lr}		; (str lr, [sp, #-4]!)
   23804:	ldr	r2, [r0]
   23808:	ldr	r3, [r0, #4]
   2380c:	cmp	r2, r3
   23810:	bcs	23878 <__assert_fail@plt+0x112b4>
   23814:	add	r1, r2, #8
   23818:	sub	ip, r3, #1
   2381c:	sub	ip, ip, r2
   23820:	bic	ip, ip, #7
   23824:	add	r2, r2, #16
   23828:	add	ip, ip, r2
   2382c:	mov	r2, #0
   23830:	mov	lr, r2
   23834:	b	23844 <__assert_fail@plt+0x11280>
   23838:	add	r1, r1, #8
   2383c:	cmp	r1, ip
   23840:	beq	23880 <__assert_fail@plt+0x112bc>
   23844:	ldr	r3, [r1, #-8]
   23848:	cmp	r3, #0
   2384c:	beq	23838 <__assert_fail@plt+0x11274>
   23850:	add	lr, lr, #1
   23854:	add	r2, r2, #1
   23858:	ldr	r3, [r1, #-4]
   2385c:	cmp	r3, #0
   23860:	beq	23838 <__assert_fail@plt+0x11274>
   23864:	add	r2, r2, #1
   23868:	ldr	r3, [r3, #4]
   2386c:	cmp	r3, #0
   23870:	bne	23864 <__assert_fail@plt+0x112a0>
   23874:	b	23838 <__assert_fail@plt+0x11274>
   23878:	mov	r2, #0
   2387c:	mov	lr, r2
   23880:	ldr	r3, [r0, #12]
   23884:	cmp	r3, lr
   23888:	movne	r0, #0
   2388c:	beq	23894 <__assert_fail@plt+0x112d0>
   23890:	pop	{pc}		; (ldr pc, [sp], #4)
   23894:	ldr	r0, [r0, #16]
   23898:	cmp	r0, r2
   2389c:	movne	r0, #0
   238a0:	moveq	r0, #1
   238a4:	b	23890 <__assert_fail@plt+0x112cc>
   238a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   238ac:	strd	r6, [sp, #8]
   238b0:	str	r8, [sp, #16]
   238b4:	str	lr, [sp, #20]
   238b8:	sub	sp, sp, #8
   238bc:	mov	r6, r0
   238c0:	mov	r4, r1
   238c4:	ldr	r5, [r0, #8]
   238c8:	ldr	r7, [r0, #12]
   238cc:	bl	2377c <__assert_fail@plt+0x111b8>
   238d0:	mov	r8, r0
   238d4:	ldr	r2, [r6, #16]
   238d8:	movw	r1, #35984	; 0x8c90
   238dc:	movt	r1, #4
   238e0:	mov	r0, r4
   238e4:	bl	1230c <fprintf@plt>
   238e8:	mov	r2, r5
   238ec:	movw	r1, #36008	; 0x8ca8
   238f0:	movt	r1, #4
   238f4:	mov	r0, r4
   238f8:	bl	1230c <fprintf@plt>
   238fc:	vmov	s15, r7
   23900:	vcvt.f64.u32	d6, s15
   23904:	vldr	d7, [pc, #84]	; 23960 <__assert_fail@plt+0x1139c>
   23908:	vmul.f64	d6, d6, d7
   2390c:	vmov	s15, r5
   23910:	vcvt.f64.u32	d7, s15
   23914:	vdiv.f64	d5, d6, d7
   23918:	vstr	d5, [sp]
   2391c:	mov	r2, r7
   23920:	movw	r1, #36032	; 0x8cc0
   23924:	movt	r1, #4
   23928:	mov	r0, r4
   2392c:	bl	1230c <fprintf@plt>
   23930:	mov	r2, r8
   23934:	movw	r1, #36068	; 0x8ce4
   23938:	movt	r1, #4
   2393c:	mov	r0, r4
   23940:	bl	1230c <fprintf@plt>
   23944:	add	sp, sp, #8
   23948:	ldrd	r4, [sp]
   2394c:	ldrd	r6, [sp, #8]
   23950:	ldr	r8, [sp, #16]
   23954:	add	sp, sp, #20
   23958:	pop	{pc}		; (ldr pc, [sp], #4)
   2395c:	nop	{0}
   23960:	andeq	r0, r0, r0
   23964:	subsmi	r0, r9, r0
   23968:	strd	r4, [sp, #-16]!
   2396c:	str	r6, [sp, #8]
   23970:	str	lr, [sp, #12]
   23974:	mov	r6, r0
   23978:	mov	r5, r1
   2397c:	bl	2347c <__assert_fail@plt+0x10eb8>
   23980:	ldr	r1, [r0]
   23984:	cmp	r1, #0
   23988:	beq	239dc <__assert_fail@plt+0x11418>
   2398c:	mov	r4, r0
   23990:	cmp	r1, r5
   23994:	beq	239c4 <__assert_fail@plt+0x11400>
   23998:	ldr	r3, [r6, #28]
   2399c:	mov	r0, r5
   239a0:	blx	r3
   239a4:	cmp	r0, #0
   239a8:	bne	239c4 <__assert_fail@plt+0x11400>
   239ac:	ldr	r4, [r4, #4]
   239b0:	cmp	r4, #0
   239b4:	beq	239c8 <__assert_fail@plt+0x11404>
   239b8:	ldr	r1, [r4]
   239bc:	cmp	r1, r5
   239c0:	bne	23998 <__assert_fail@plt+0x113d4>
   239c4:	ldr	r4, [r4]
   239c8:	mov	r0, r4
   239cc:	ldrd	r4, [sp]
   239d0:	ldr	r6, [sp, #8]
   239d4:	add	sp, sp, #12
   239d8:	pop	{pc}		; (ldr pc, [sp], #4)
   239dc:	mov	r4, r1
   239e0:	b	239c8 <__assert_fail@plt+0x11404>
   239e4:	ldr	r3, [r0, #16]
   239e8:	cmp	r3, #0
   239ec:	beq	23a44 <__assert_fail@plt+0x11480>
   239f0:	ldr	r2, [r0]
   239f4:	ldr	r1, [r0, #4]
   239f8:	cmp	r2, r1
   239fc:	bcs	23a38 <__assert_fail@plt+0x11474>
   23a00:	ldr	r0, [r2]
   23a04:	cmp	r0, #0
   23a08:	bxne	lr
   23a0c:	mov	r3, r2
   23a10:	sub	r1, r1, #1
   23a14:	sub	r1, r1, r2
   23a18:	bic	r1, r1, #7
   23a1c:	add	r2, r2, r1
   23a20:	cmp	r3, r2
   23a24:	beq	23a38 <__assert_fail@plt+0x11474>
   23a28:	ldr	r0, [r3, #8]!
   23a2c:	cmp	r0, #0
   23a30:	beq	23a20 <__assert_fail@plt+0x1145c>
   23a34:	bx	lr
   23a38:	str	r4, [sp, #-8]!
   23a3c:	str	lr, [sp, #4]
   23a40:	bl	12570 <abort@plt>
   23a44:	mov	r0, #0
   23a48:	bx	lr
   23a4c:	strd	r4, [sp, #-16]!
   23a50:	str	r6, [sp, #8]
   23a54:	str	lr, [sp, #12]
   23a58:	mov	r5, r0
   23a5c:	mov	r4, r1
   23a60:	bl	2347c <__assert_fail@plt+0x10eb8>
   23a64:	mov	r2, r0
   23a68:	mov	r3, r0
   23a6c:	b	23a7c <__assert_fail@plt+0x114b8>
   23a70:	ldr	r3, [r3, #4]
   23a74:	cmp	r3, #0
   23a78:	beq	23a98 <__assert_fail@plt+0x114d4>
   23a7c:	ldr	r1, [r3]
   23a80:	cmp	r1, r4
   23a84:	bne	23a70 <__assert_fail@plt+0x114ac>
   23a88:	ldr	r3, [r3, #4]
   23a8c:	cmp	r3, #0
   23a90:	ldrne	r0, [r3]
   23a94:	bne	23abc <__assert_fail@plt+0x114f8>
   23a98:	ldr	r3, [r5, #4]
   23a9c:	add	r2, r2, #8
   23aa0:	cmp	r3, r2
   23aa4:	bls	23ab8 <__assert_fail@plt+0x114f4>
   23aa8:	ldr	r0, [r2]
   23aac:	cmp	r0, #0
   23ab0:	beq	23a9c <__assert_fail@plt+0x114d8>
   23ab4:	b	23abc <__assert_fail@plt+0x114f8>
   23ab8:	mov	r0, #0
   23abc:	ldrd	r4, [sp]
   23ac0:	ldr	r6, [sp, #8]
   23ac4:	add	sp, sp, #12
   23ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   23acc:	strd	r4, [sp, #-12]!
   23ad0:	str	lr, [sp, #8]
   23ad4:	ldr	r4, [r0]
   23ad8:	ldr	r3, [r0, #4]
   23adc:	cmp	r4, r3
   23ae0:	bcs	23b48 <__assert_fail@plt+0x11584>
   23ae4:	mov	r5, r0
   23ae8:	mov	r0, #0
   23aec:	b	23b00 <__assert_fail@plt+0x1153c>
   23af0:	add	r4, r4, #8
   23af4:	ldr	r3, [r5, #4]
   23af8:	cmp	r3, r4
   23afc:	bls	23b3c <__assert_fail@plt+0x11578>
   23b00:	ldr	r3, [r4]
   23b04:	cmp	r3, #0
   23b08:	beq	23af0 <__assert_fail@plt+0x1152c>
   23b0c:	cmp	r2, r0
   23b10:	bls	23b3c <__assert_fail@plt+0x11578>
   23b14:	add	ip, r1, r0, lsl #2
   23b18:	mov	r3, r4
   23b1c:	add	r0, r0, #1
   23b20:	ldr	lr, [r3]
   23b24:	str	lr, [ip], #4
   23b28:	ldr	r3, [r3, #4]
   23b2c:	cmp	r3, #0
   23b30:	beq	23af0 <__assert_fail@plt+0x1152c>
   23b34:	cmp	r2, r0
   23b38:	bne	23b1c <__assert_fail@plt+0x11558>
   23b3c:	ldrd	r4, [sp]
   23b40:	add	sp, sp, #8
   23b44:	pop	{pc}		; (ldr pc, [sp], #4)
   23b48:	mov	r0, #0
   23b4c:	b	23b3c <__assert_fail@plt+0x11578>
   23b50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23b54:	strd	r6, [sp, #8]
   23b58:	strd	r8, [sp, #16]
   23b5c:	str	sl, [sp, #24]
   23b60:	str	lr, [sp, #28]
   23b64:	ldr	r8, [r0]
   23b68:	ldr	r3, [r0, #4]
   23b6c:	cmp	r8, r3
   23b70:	bcs	23bd0 <__assert_fail@plt+0x1160c>
   23b74:	mov	r7, r2
   23b78:	mov	r6, r1
   23b7c:	mov	r9, r0
   23b80:	mov	r5, #0
   23b84:	b	23b98 <__assert_fail@plt+0x115d4>
   23b88:	add	r8, r8, #8
   23b8c:	ldr	r3, [r9, #4]
   23b90:	cmp	r3, r8
   23b94:	bls	23bd4 <__assert_fail@plt+0x11610>
   23b98:	ldr	r3, [r8]
   23b9c:	cmp	r3, #0
   23ba0:	beq	23b88 <__assert_fail@plt+0x115c4>
   23ba4:	mov	r4, r8
   23ba8:	mov	r1, r7
   23bac:	ldr	r0, [r4]
   23bb0:	blx	r6
   23bb4:	cmp	r0, #0
   23bb8:	beq	23bd4 <__assert_fail@plt+0x11610>
   23bbc:	add	r5, r5, #1
   23bc0:	ldr	r4, [r4, #4]
   23bc4:	cmp	r4, #0
   23bc8:	bne	23ba8 <__assert_fail@plt+0x115e4>
   23bcc:	b	23b88 <__assert_fail@plt+0x115c4>
   23bd0:	mov	r5, #0
   23bd4:	mov	r0, r5
   23bd8:	ldrd	r4, [sp]
   23bdc:	ldrd	r6, [sp, #8]
   23be0:	ldrd	r8, [sp, #16]
   23be4:	ldr	sl, [sp, #24]
   23be8:	add	sp, sp, #28
   23bec:	pop	{pc}		; (ldr pc, [sp], #4)
   23bf0:	ldrb	r2, [r0]
   23bf4:	cmp	r2, #0
   23bf8:	beq	23c24 <__assert_fail@plt+0x11660>
   23bfc:	mov	r3, #0
   23c00:	rsb	r3, r3, r3, lsl #5
   23c04:	add	r3, r3, r2
   23c08:	udiv	r2, r3, r1
   23c0c:	mls	r3, r1, r2, r3
   23c10:	ldrb	r2, [r0, #1]!
   23c14:	cmp	r2, #0
   23c18:	bne	23c00 <__assert_fail@plt+0x1163c>
   23c1c:	mov	r0, r3
   23c20:	bx	lr
   23c24:	mov	r3, #0
   23c28:	b	23c1c <__assert_fail@plt+0x11658>
   23c2c:	strd	r4, [sp, #-8]!
   23c30:	movw	r3, #35964	; 0x8c7c
   23c34:	movt	r3, #4
   23c38:	ldrd	r4, [r3]
   23c3c:	strd	r4, [r0]
   23c40:	ldrd	r4, [r3, #8]
   23c44:	strd	r4, [r0, #8]
   23c48:	ldr	r3, [r3, #16]
   23c4c:	str	r3, [r0, #16]
   23c50:	ldrd	r4, [sp]
   23c54:	add	sp, sp, #8
   23c58:	bx	lr
   23c5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23c60:	strd	r6, [sp, #8]
   23c64:	str	r8, [sp, #16]
   23c68:	str	lr, [sp, #20]
   23c6c:	mov	r8, r0
   23c70:	mov	r5, r1
   23c74:	subs	r7, r2, #0
   23c78:	movw	r2, #12944	; 0x3290
   23c7c:	movt	r2, #2
   23c80:	cmp	r7, #0
   23c84:	moveq	r7, r2
   23c88:	subs	r6, r3, #0
   23c8c:	movw	r3, #12960	; 0x32a0
   23c90:	movt	r3, #2
   23c94:	cmp	r6, #0
   23c98:	moveq	r6, r3
   23c9c:	mov	r0, #40	; 0x28
   23ca0:	bl	32148 <__assert_fail@plt+0x1fb84>
   23ca4:	subs	r4, r0, #0
   23ca8:	beq	23d28 <__assert_fail@plt+0x11764>
   23cac:	movw	r3, #35964	; 0x8c7c
   23cb0:	movt	r3, #4
   23cb4:	cmp	r5, #0
   23cb8:	moveq	r5, r3
   23cbc:	str	r5, [r4, #20]
   23cc0:	mov	r0, r4
   23cc4:	bl	232b0 <__assert_fail@plt+0x10cec>
   23cc8:	cmp	r0, #0
   23ccc:	beq	23d40 <__assert_fail@plt+0x1177c>
   23cd0:	mov	r1, r5
   23cd4:	mov	r0, r8
   23cd8:	bl	23374 <__assert_fail@plt+0x10db0>
   23cdc:	str	r0, [r4, #8]
   23ce0:	cmp	r0, #0
   23ce4:	beq	23d40 <__assert_fail@plt+0x1177c>
   23ce8:	mov	r1, #8
   23cec:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   23cf0:	str	r0, [r4]
   23cf4:	cmp	r0, #0
   23cf8:	beq	23d40 <__assert_fail@plt+0x1177c>
   23cfc:	ldr	r3, [r4, #8]
   23d00:	add	r0, r0, r3, lsl #3
   23d04:	str	r0, [r4, #4]
   23d08:	mov	r3, #0
   23d0c:	str	r3, [r4, #12]
   23d10:	str	r3, [r4, #16]
   23d14:	str	r7, [r4, #24]
   23d18:	str	r6, [r4, #28]
   23d1c:	ldr	r2, [sp, #24]
   23d20:	str	r2, [r4, #32]
   23d24:	str	r3, [r4, #36]	; 0x24
   23d28:	mov	r0, r4
   23d2c:	ldrd	r4, [sp]
   23d30:	ldrd	r6, [sp, #8]
   23d34:	ldr	r8, [sp, #16]
   23d38:	add	sp, sp, #20
   23d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   23d40:	mov	r0, r4
   23d44:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   23d48:	mov	r4, #0
   23d4c:	b	23d28 <__assert_fail@plt+0x11764>
   23d50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23d54:	strd	r6, [sp, #8]
   23d58:	str	r8, [sp, #16]
   23d5c:	str	lr, [sp, #20]
   23d60:	mov	r5, r0
   23d64:	ldr	r6, [r0]
   23d68:	ldr	r3, [r0, #4]
   23d6c:	cmp	r6, r3
   23d70:	bcs	23e08 <__assert_fail@plt+0x11844>
   23d74:	add	r6, r6, #8
   23d78:	mov	r7, #0
   23d7c:	b	23de8 <__assert_fail@plt+0x11824>
   23d80:	str	r7, [r4]
   23d84:	ldr	r3, [r4, #4]
   23d88:	ldr	r2, [r5, #36]	; 0x24
   23d8c:	str	r2, [r4, #4]
   23d90:	str	r4, [r5, #36]	; 0x24
   23d94:	mov	r4, r3
   23d98:	cmp	r3, #0
   23d9c:	beq	23db8 <__assert_fail@plt+0x117f4>
   23da0:	ldr	r3, [r5, #32]
   23da4:	cmp	r3, #0
   23da8:	beq	23d80 <__assert_fail@plt+0x117bc>
   23dac:	ldr	r0, [r4]
   23db0:	blx	r3
   23db4:	b	23d80 <__assert_fail@plt+0x117bc>
   23db8:	ldr	r3, [r5, #32]
   23dbc:	cmp	r3, #0
   23dc0:	beq	23dcc <__assert_fail@plt+0x11808>
   23dc4:	ldr	r0, [r8, #-8]
   23dc8:	blx	r3
   23dcc:	str	r7, [r8, #-8]
   23dd0:	str	r7, [r8, #-4]
   23dd4:	add	r2, r6, #8
   23dd8:	ldr	r3, [r5, #4]
   23ddc:	cmp	r3, r6
   23de0:	bls	23e08 <__assert_fail@plt+0x11844>
   23de4:	mov	r6, r2
   23de8:	mov	r8, r6
   23dec:	ldr	r3, [r6, #-8]
   23df0:	cmp	r3, #0
   23df4:	beq	23dd4 <__assert_fail@plt+0x11810>
   23df8:	ldr	r4, [r6, #-4]
   23dfc:	cmp	r4, #0
   23e00:	bne	23da0 <__assert_fail@plt+0x117dc>
   23e04:	b	23db8 <__assert_fail@plt+0x117f4>
   23e08:	mov	r3, #0
   23e0c:	str	r3, [r5, #12]
   23e10:	str	r3, [r5, #16]
   23e14:	ldrd	r4, [sp]
   23e18:	ldrd	r6, [sp, #8]
   23e1c:	ldr	r8, [sp, #16]
   23e20:	add	sp, sp, #20
   23e24:	pop	{pc}		; (ldr pc, [sp], #4)
   23e28:	strd	r4, [sp, #-16]!
   23e2c:	str	r6, [sp, #8]
   23e30:	str	lr, [sp, #12]
   23e34:	mov	r6, r0
   23e38:	ldr	r3, [r0, #32]
   23e3c:	cmp	r3, #0
   23e40:	beq	23ea0 <__assert_fail@plt+0x118dc>
   23e44:	ldr	r3, [r0, #16]
   23e48:	cmp	r3, #0
   23e4c:	beq	23ea0 <__assert_fail@plt+0x118dc>
   23e50:	ldr	r5, [r0]
   23e54:	ldr	r3, [r0, #4]
   23e58:	cmp	r5, r3
   23e5c:	bcc	23e74 <__assert_fail@plt+0x118b0>
   23e60:	b	23eb0 <__assert_fail@plt+0x118ec>
   23e64:	add	r5, r5, #8
   23e68:	ldr	r3, [r6, #4]
   23e6c:	cmp	r3, r5
   23e70:	bls	23ea0 <__assert_fail@plt+0x118dc>
   23e74:	ldr	r3, [r5]
   23e78:	cmp	r3, #0
   23e7c:	beq	23e64 <__assert_fail@plt+0x118a0>
   23e80:	mov	r4, r5
   23e84:	ldr	r3, [r6, #32]
   23e88:	ldr	r0, [r4]
   23e8c:	blx	r3
   23e90:	ldr	r4, [r4, #4]
   23e94:	cmp	r4, #0
   23e98:	bne	23e84 <__assert_fail@plt+0x118c0>
   23e9c:	b	23e64 <__assert_fail@plt+0x118a0>
   23ea0:	ldr	r5, [r6]
   23ea4:	ldr	r3, [r6, #4]
   23ea8:	cmp	r5, r3
   23eac:	bcc	23f00 <__assert_fail@plt+0x1193c>
   23eb0:	ldr	r0, [r6, #36]	; 0x24
   23eb4:	cmp	r0, #0
   23eb8:	beq	23ed0 <__assert_fail@plt+0x1190c>
   23ebc:	ldr	r4, [r0, #4]
   23ec0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   23ec4:	mov	r0, r4
   23ec8:	cmp	r4, #0
   23ecc:	bne	23ebc <__assert_fail@plt+0x118f8>
   23ed0:	ldr	r0, [r6]
   23ed4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   23ed8:	mov	r0, r6
   23edc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   23ee0:	ldrd	r4, [sp]
   23ee4:	ldr	r6, [sp, #8]
   23ee8:	add	sp, sp, #12
   23eec:	pop	{pc}		; (ldr pc, [sp], #4)
   23ef0:	add	r5, r5, #8
   23ef4:	ldr	r3, [r6, #4]
   23ef8:	cmp	r3, r5
   23efc:	bls	23eb0 <__assert_fail@plt+0x118ec>
   23f00:	ldr	r0, [r5, #4]
   23f04:	cmp	r0, #0
   23f08:	beq	23ef0 <__assert_fail@plt+0x1192c>
   23f0c:	ldr	r4, [r0, #4]
   23f10:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   23f14:	mov	r0, r4
   23f18:	cmp	r4, #0
   23f1c:	bne	23f0c <__assert_fail@plt+0x11948>
   23f20:	b	23ef0 <__assert_fail@plt+0x1192c>
   23f24:	strd	r4, [sp, #-12]!
   23f28:	str	lr, [sp, #8]
   23f2c:	sub	sp, sp, #44	; 0x2c
   23f30:	mov	r4, r0
   23f34:	mov	r0, r1
   23f38:	ldr	r1, [r4, #20]
   23f3c:	bl	23374 <__assert_fail@plt+0x10db0>
   23f40:	subs	r5, r0, #0
   23f44:	beq	2403c <__assert_fail@plt+0x11a78>
   23f48:	ldr	r3, [r4, #8]
   23f4c:	cmp	r3, r5
   23f50:	beq	24054 <__assert_fail@plt+0x11a90>
   23f54:	mov	r1, #8
   23f58:	mov	r0, r5
   23f5c:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   23f60:	str	r0, [sp]
   23f64:	cmp	r0, #0
   23f68:	beq	2405c <__assert_fail@plt+0x11a98>
   23f6c:	str	r5, [sp, #8]
   23f70:	add	r0, r0, r5, lsl #3
   23f74:	str	r0, [sp, #4]
   23f78:	mov	r2, #0
   23f7c:	str	r2, [sp, #12]
   23f80:	str	r2, [sp, #16]
   23f84:	ldr	r3, [r4, #20]
   23f88:	str	r3, [sp, #20]
   23f8c:	ldr	r3, [r4, #24]
   23f90:	str	r3, [sp, #24]
   23f94:	ldr	r3, [r4, #28]
   23f98:	str	r3, [sp, #28]
   23f9c:	ldr	r3, [r4, #32]
   23fa0:	str	r3, [sp, #32]
   23fa4:	ldr	r3, [r4, #36]	; 0x24
   23fa8:	str	r3, [sp, #36]	; 0x24
   23fac:	mov	r1, r4
   23fb0:	mov	r0, sp
   23fb4:	bl	234bc <__assert_fail@plt+0x10ef8>
   23fb8:	subs	r5, r0, #0
   23fbc:	bne	24004 <__assert_fail@plt+0x11a40>
   23fc0:	ldr	r3, [sp, #36]	; 0x24
   23fc4:	str	r3, [r4, #36]	; 0x24
   23fc8:	mov	r2, #1
   23fcc:	mov	r1, sp
   23fd0:	mov	r0, r4
   23fd4:	bl	234bc <__assert_fail@plt+0x10ef8>
   23fd8:	cmp	r0, #0
   23fdc:	beq	24038 <__assert_fail@plt+0x11a74>
   23fe0:	mov	r2, #0
   23fe4:	mov	r1, sp
   23fe8:	mov	r0, r4
   23fec:	bl	234bc <__assert_fail@plt+0x10ef8>
   23ff0:	cmp	r0, #0
   23ff4:	beq	24038 <__assert_fail@plt+0x11a74>
   23ff8:	ldr	r0, [sp]
   23ffc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   24000:	b	24040 <__assert_fail@plt+0x11a7c>
   24004:	ldr	r0, [r4]
   24008:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2400c:	ldr	r3, [sp]
   24010:	str	r3, [r4]
   24014:	ldr	r3, [sp, #4]
   24018:	str	r3, [r4, #4]
   2401c:	ldr	r3, [sp, #8]
   24020:	str	r3, [r4, #8]
   24024:	ldr	r3, [sp, #12]
   24028:	str	r3, [r4, #12]
   2402c:	ldr	r3, [sp, #36]	; 0x24
   24030:	str	r3, [r4, #36]	; 0x24
   24034:	b	24040 <__assert_fail@plt+0x11a7c>
   24038:	bl	12570 <abort@plt>
   2403c:	mov	r5, #0
   24040:	mov	r0, r5
   24044:	add	sp, sp, #44	; 0x2c
   24048:	ldrd	r4, [sp]
   2404c:	add	sp, sp, #8
   24050:	pop	{pc}		; (ldr pc, [sp], #4)
   24054:	mov	r5, #1
   24058:	b	24040 <__assert_fail@plt+0x11a7c>
   2405c:	mov	r5, #0
   24060:	b	24040 <__assert_fail@plt+0x11a7c>
   24064:	strd	r4, [sp, #-16]!
   24068:	str	r6, [sp, #8]
   2406c:	str	lr, [sp, #12]
   24070:	sub	sp, sp, #8
   24074:	subs	r5, r1, #0
   24078:	beq	240c4 <__assert_fail@plt+0x11b00>
   2407c:	mov	r4, r0
   24080:	mov	r6, r2
   24084:	mov	r3, #0
   24088:	add	r2, sp, #4
   2408c:	mov	r1, r5
   24090:	bl	23640 <__assert_fail@plt+0x1107c>
   24094:	cmp	r0, #0
   24098:	beq	240c8 <__assert_fail@plt+0x11b04>
   2409c:	cmp	r6, #0
   240a0:	moveq	r0, #0
   240a4:	beq	240b0 <__assert_fail@plt+0x11aec>
   240a8:	str	r0, [r6]
   240ac:	mov	r0, #0
   240b0:	add	sp, sp, #8
   240b4:	ldrd	r4, [sp]
   240b8:	ldr	r6, [sp, #8]
   240bc:	add	sp, sp, #12
   240c0:	pop	{pc}		; (ldr pc, [sp], #4)
   240c4:	bl	12570 <abort@plt>
   240c8:	vldr	s15, [r4, #12]
   240cc:	vcvt.f32.u32	s14, s15
   240d0:	ldr	r3, [r4, #20]
   240d4:	vldr	s15, [r4, #8]
   240d8:	vcvt.f32.u32	s15, s15
   240dc:	vldr	s13, [r3, #8]
   240e0:	vmul.f32	s15, s15, s13
   240e4:	vcmpe.f32	s14, s15
   240e8:	vmrs	APSR_nzcv, fpscr
   240ec:	bgt	2413c <__assert_fail@plt+0x11b78>
   240f0:	ldr	r3, [sp, #4]
   240f4:	ldr	r2, [r3]
   240f8:	cmp	r2, #0
   240fc:	beq	241e8 <__assert_fail@plt+0x11c24>
   24100:	ldr	r0, [r4, #36]	; 0x24
   24104:	cmp	r0, #0
   24108:	beq	241d0 <__assert_fail@plt+0x11c0c>
   2410c:	ldr	r3, [r0, #4]
   24110:	str	r3, [r4, #36]	; 0x24
   24114:	str	r5, [r0]
   24118:	ldr	r3, [sp, #4]
   2411c:	ldr	r2, [r3, #4]
   24120:	str	r2, [r0, #4]
   24124:	str	r0, [r3, #4]
   24128:	ldr	r3, [r4, #16]
   2412c:	add	r3, r3, #1
   24130:	str	r3, [r4, #16]
   24134:	mov	r0, #1
   24138:	b	240b0 <__assert_fail@plt+0x11aec>
   2413c:	mov	r0, r4
   24140:	bl	232b0 <__assert_fail@plt+0x10cec>
   24144:	ldr	r3, [r4, #20]
   24148:	vldr	s13, [r3, #8]
   2414c:	vldr	s15, [r4, #8]
   24150:	vcvt.f32.u32	s15, s15
   24154:	vldr	s14, [r4, #12]
   24158:	vcvt.f32.u32	s14, s14
   2415c:	vmul.f32	s12, s13, s15
   24160:	vcmpe.f32	s14, s12
   24164:	vmrs	APSR_nzcv, fpscr
   24168:	ble	240f0 <__assert_fail@plt+0x11b2c>
   2416c:	ldrb	r2, [r3, #16]
   24170:	cmp	r2, #0
   24174:	vldr	s14, [r3, #12]
   24178:	vmul.f32	s15, s15, s14
   2417c:	vmuleq.f32	s15, s15, s13
   24180:	vldr	s14, [pc, #132]	; 2420c <__assert_fail@plt+0x11c48>
   24184:	vcmpe.f32	s15, s14
   24188:	vmrs	APSR_nzcv, fpscr
   2418c:	mvnge	r0, #0
   24190:	bge	240b0 <__assert_fail@plt+0x11aec>
   24194:	vcvt.u32.f32	s15, s15
   24198:	vmov	r1, s15
   2419c:	mov	r0, r4
   241a0:	bl	23f24 <__assert_fail@plt+0x11960>
   241a4:	cmp	r0, #0
   241a8:	mvneq	r0, #0
   241ac:	beq	240b0 <__assert_fail@plt+0x11aec>
   241b0:	mov	r3, #0
   241b4:	add	r2, sp, #4
   241b8:	mov	r1, r5
   241bc:	mov	r0, r4
   241c0:	bl	23640 <__assert_fail@plt+0x1107c>
   241c4:	cmp	r0, #0
   241c8:	beq	240f0 <__assert_fail@plt+0x11b2c>
   241cc:	bl	12570 <abort@plt>
   241d0:	mov	r0, #8
   241d4:	bl	32148 <__assert_fail@plt+0x1fb84>
   241d8:	cmp	r0, #0
   241dc:	mvneq	r0, #0
   241e0:	beq	240b0 <__assert_fail@plt+0x11aec>
   241e4:	b	24114 <__assert_fail@plt+0x11b50>
   241e8:	str	r5, [r3]
   241ec:	ldr	r3, [r4, #16]
   241f0:	add	r3, r3, #1
   241f4:	str	r3, [r4, #16]
   241f8:	ldr	r3, [r4, #12]
   241fc:	add	r3, r3, #1
   24200:	str	r3, [r4, #12]
   24204:	mov	r0, #1
   24208:	b	240b0 <__assert_fail@plt+0x11aec>
   2420c:	svcmi	0x00800000
   24210:	str	r4, [sp, #-8]!
   24214:	str	lr, [sp, #4]
   24218:	sub	sp, sp, #8
   2421c:	mov	r4, r1
   24220:	add	r2, sp, #4
   24224:	bl	24064 <__assert_fail@plt+0x11aa0>
   24228:	cmn	r0, #1
   2422c:	moveq	r0, #0
   24230:	beq	24240 <__assert_fail@plt+0x11c7c>
   24234:	cmp	r0, #0
   24238:	ldreq	r0, [sp, #4]
   2423c:	movne	r0, r4
   24240:	add	sp, sp, #8
   24244:	ldr	r4, [sp]
   24248:	add	sp, sp, #4
   2424c:	pop	{pc}		; (ldr pc, [sp], #4)
   24250:	strd	r4, [sp, #-16]!
   24254:	str	r6, [sp, #8]
   24258:	str	lr, [sp, #12]
   2425c:	sub	sp, sp, #8
   24260:	mov	r4, r0
   24264:	mov	r3, #1
   24268:	add	r2, sp, #4
   2426c:	bl	23640 <__assert_fail@plt+0x1107c>
   24270:	subs	r5, r0, #0
   24274:	beq	24294 <__assert_fail@plt+0x11cd0>
   24278:	ldr	r3, [r4, #16]
   2427c:	sub	r3, r3, #1
   24280:	str	r3, [r4, #16]
   24284:	ldr	r3, [sp, #4]
   24288:	ldr	r3, [r3]
   2428c:	cmp	r3, #0
   24290:	beq	242ac <__assert_fail@plt+0x11ce8>
   24294:	mov	r0, r5
   24298:	add	sp, sp, #8
   2429c:	ldrd	r4, [sp]
   242a0:	ldr	r6, [sp, #8]
   242a4:	add	sp, sp, #12
   242a8:	pop	{pc}		; (ldr pc, [sp], #4)
   242ac:	ldr	r3, [r4, #12]
   242b0:	sub	r3, r3, #1
   242b4:	str	r3, [r4, #12]
   242b8:	vmov	s15, r3
   242bc:	vcvt.f32.u32	s15, s15
   242c0:	ldr	r3, [r4, #20]
   242c4:	vldr	s14, [r4, #8]
   242c8:	vcvt.f32.u32	s14, s14
   242cc:	vldr	s13, [r3]
   242d0:	vmul.f32	s14, s14, s13
   242d4:	vcmpe.f32	s15, s14
   242d8:	vmrs	APSR_nzcv, fpscr
   242dc:	bpl	24294 <__assert_fail@plt+0x11cd0>
   242e0:	mov	r0, r4
   242e4:	bl	232b0 <__assert_fail@plt+0x10cec>
   242e8:	ldr	r3, [r4, #20]
   242ec:	vldr	s15, [r4, #8]
   242f0:	vcvt.f32.u32	s15, s15
   242f4:	vldr	s14, [r4, #12]
   242f8:	vcvt.f32.u32	s13, s14
   242fc:	vldr	s14, [r3]
   24300:	vmul.f32	s14, s15, s14
   24304:	vcmpe.f32	s13, s14
   24308:	vmrs	APSR_nzcv, fpscr
   2430c:	bpl	24294 <__assert_fail@plt+0x11cd0>
   24310:	ldrb	r2, [r3, #16]
   24314:	cmp	r2, #0
   24318:	vldr	s14, [r3, #4]
   2431c:	vmuleq.f32	s15, s15, s14
   24320:	vldreq	s14, [r3, #8]
   24324:	vmul.f32	s15, s15, s14
   24328:	vcvt.u32.f32	s15, s15
   2432c:	vmov	r1, s15
   24330:	mov	r0, r4
   24334:	bl	23f24 <__assert_fail@plt+0x11960>
   24338:	cmp	r0, #0
   2433c:	bne	24294 <__assert_fail@plt+0x11cd0>
   24340:	ldr	r0, [r4, #36]	; 0x24
   24344:	cmp	r0, #0
   24348:	beq	24360 <__assert_fail@plt+0x11d9c>
   2434c:	ldr	r6, [r0, #4]
   24350:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   24354:	mov	r0, r6
   24358:	cmp	r6, #0
   2435c:	bne	2434c <__assert_fail@plt+0x11d88>
   24360:	mov	r3, #0
   24364:	str	r3, [r4, #36]	; 0x24
   24368:	b	24294 <__assert_fail@plt+0x11cd0>
   2436c:	str	r4, [sp, #-8]!
   24370:	str	lr, [sp, #4]
   24374:	bl	24250 <__assert_fail@plt+0x11c8c>
   24378:	ldr	r4, [sp]
   2437c:	add	sp, sp, #4
   24380:	pop	{pc}		; (ldr pc, [sp], #4)
   24384:	andeq	r0, r0, r0
   24388:	str	r4, [sp, #-16]!
   2438c:	strd	r6, [sp, #4]
   24390:	str	lr, [sp, #12]
   24394:	vpush	{d8}
   24398:	vmov.f64	d8, d0
   2439c:	cmp	r0, #1
   243a0:	beq	24408 <__assert_fail@plt+0x11e44>
   243a4:	mov	r4, r0
   243a8:	vldr	d7, [pc, #112]	; 24420 <__assert_fail@plt+0x11e5c>
   243ac:	vcmpe.f64	d0, d7
   243b0:	vmrs	APSR_nzcv, fpscr
   243b4:	bpl	24408 <__assert_fail@plt+0x11e44>
   243b8:	vmov	r0, r1, d0
   243bc:	bl	44440 <__assert_fail@plt+0x31e7c>
   243c0:	mov	r6, r0
   243c4:	mov	r7, r1
   243c8:	cmp	r4, #0
   243cc:	movne	r0, #0
   243d0:	bne	243f0 <__assert_fail@plt+0x11e2c>
   243d4:	mov	r0, r6
   243d8:	bl	442a8 <__assert_fail@plt+0x31ce4>
   243dc:	vmov	d7, r0, r1
   243e0:	vcmp.f64	d7, d8
   243e4:	vmrs	APSR_nzcv, fpscr
   243e8:	movne	r0, #1
   243ec:	moveq	r0, #0
   243f0:	adds	r2, r6, r0
   243f4:	adc	r3, r7, r0, asr #31
   243f8:	mov	r0, r2
   243fc:	mov	r1, r3
   24400:	bl	442a8 <__assert_fail@plt+0x31ce4>
   24404:	vmov	d8, r0, r1
   24408:	vmov.f64	d0, d8
   2440c:	vpop	{d8}
   24410:	ldr	r4, [sp]
   24414:	ldrd	r6, [sp, #4]
   24418:	add	sp, sp, #12
   2441c:	pop	{pc}		; (ldr pc, [sp], #4)
   24420:	andeq	r0, r0, r0
   24424:	mvnsmi	r0, #0
   24428:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2442c:	strd	r6, [sp, #8]
   24430:	strd	r8, [sp, #16]
   24434:	strd	sl, [sp, #24]
   24438:	str	lr, [sp, #32]
   2443c:	vpush	{d8-d9}
   24440:	sub	sp, sp, #116	; 0x74
   24444:	mov	r6, r0
   24448:	mov	r7, r1
   2444c:	mov	r8, r2
   24450:	str	r2, [sp, #28]
   24454:	mov	r9, r3
   24458:	and	r3, r3, #3
   2445c:	str	r3, [sp]
   24460:	ands	r3, r9, #32
   24464:	str	r3, [sp, #36]	; 0x24
   24468:	movne	r3, #1024	; 0x400
   2446c:	moveq	r3, #1000	; 0x3e8
   24470:	str	r3, [sp, #32]
   24474:	bl	12474 <localeconv@plt>
   24478:	mov	r4, r0
   2447c:	ldr	r5, [r0]
   24480:	mov	r0, r5
   24484:	bl	122d0 <strlen@plt>
   24488:	mov	fp, r0
   2448c:	sub	r2, r0, #1
   24490:	cmp	r2, #16
   24494:	movcc	fp, r0
   24498:	movcs	fp, #1
   2449c:	movw	r3, #29972	; 0x7514
   244a0:	movt	r3, #4
   244a4:	cmp	r2, #15
   244a8:	movhi	r5, r3
   244ac:	ldr	sl, [r4, #8]
   244b0:	ldr	r3, [r4, #4]
   244b4:	mov	r4, r3
   244b8:	mov	r0, r3
   244bc:	bl	122d0 <strlen@plt>
   244c0:	movw	r3, #25528	; 0x63b8
   244c4:	movt	r3, #4
   244c8:	mov	r1, r4
   244cc:	cmp	r0, #16
   244d0:	movhi	r1, r3
   244d4:	str	r1, [sp, #12]
   244d8:	add	r3, r8, #644	; 0x284
   244dc:	add	r3, r3, #3
   244e0:	str	r3, [sp, #24]
   244e4:	ldrd	r2, [sp, #176]	; 0xb0
   244e8:	ldrd	r0, [sp, #168]	; 0xa8
   244ec:	cmp	r3, r1
   244f0:	cmpeq	r2, r0
   244f4:	bhi	24668 <__assert_fail@plt+0x120a4>
   244f8:	bl	443f0 <__assert_fail@plt+0x31e2c>
   244fc:	orrs	r3, r2, r3
   24500:	bne	24544 <__assert_fail@plt+0x11f80>
   24504:	ldrd	r2, [sp, #176]	; 0xb0
   24508:	ldrd	r0, [sp, #168]	; 0xa8
   2450c:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24510:	mov	r2, r0
   24514:	mov	r3, r1
   24518:	mul	r0, r0, r7
   2451c:	mla	ip, r6, r1, r0
   24520:	umull	r0, r1, r2, r6
   24524:	strd	r0, [sp, #16]
   24528:	add	r1, ip, r1
   2452c:	str	r1, [sp, #20]
   24530:	ldrd	r0, [sp, #16]
   24534:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24538:	cmp	r1, r7
   2453c:	cmpeq	r0, r6
   24540:	beq	247fc <__assert_fail@plt+0x12238>
   24544:	ldrd	r0, [sp, #168]	; 0xa8
   24548:	bl	442a8 <__assert_fail@plt+0x31ce4>
   2454c:	vmov	d9, r0, r1
   24550:	ldrd	r0, [sp, #176]	; 0xb0
   24554:	bl	442a8 <__assert_fail@plt+0x31ce4>
   24558:	vmov	d7, r0, r1
   2455c:	vdiv.f64	d8, d9, d7
   24560:	mov	r0, r6
   24564:	mov	r1, r7
   24568:	bl	442a8 <__assert_fail@plt+0x31ce4>
   2456c:	vmov	d7, r0, r1
   24570:	vmul.f64	d0, d8, d7
   24574:	tst	r9, #16
   24578:	beq	24754 <__assert_fail@plt+0x12190>
   2457c:	vldr	d7, [pc, #1004]	; 24970 <__assert_fail@plt+0x123ac>
   24580:	mov	r7, #0
   24584:	vldr	s13, [sp, #32]
   24588:	vcvt.f64.u32	d6, s13
   2458c:	vmul.f64	d7, d7, d6
   24590:	add	r7, r7, #1
   24594:	vmul.f64	d5, d6, d7
   24598:	vcmpe.f64	d5, d0
   2459c:	vmrs	APSR_nzcv, fpscr
   245a0:	movls	r3, #1
   245a4:	movhi	r3, #0
   245a8:	cmp	r7, #7
   245ac:	movgt	r3, #0
   245b0:	andle	r3, r3, #1
   245b4:	cmp	r3, #0
   245b8:	bne	2458c <__assert_fail@plt+0x11fc8>
   245bc:	vdiv.f64	d8, d0, d7
   245c0:	vmov.f64	d0, d8
   245c4:	ldr	r0, [sp]
   245c8:	bl	24388 <__assert_fail@plt+0x11dc4>
   245cc:	vmov	r2, r3, d0
   245d0:	movw	r1, #36132	; 0x8d24
   245d4:	movt	r1, #4
   245d8:	ldr	r4, [sp, #28]
   245dc:	mov	r0, r4
   245e0:	bl	12480 <sprintf@plt>
   245e4:	mov	r0, r4
   245e8:	bl	122d0 <strlen@plt>
   245ec:	mov	r8, r0
   245f0:	add	fp, fp, #1
   245f4:	ldr	r3, [sp, #36]	; 0x24
   245f8:	clz	r3, r3
   245fc:	lsr	r3, r3, #5
   24600:	add	r3, r3, #1
   24604:	add	r3, r3, fp
   24608:	cmp	r3, r0
   2460c:	bcc	24628 <__assert_fail@plt+0x12064>
   24610:	tst	r9, #8
   24614:	beq	24788 <__assert_fail@plt+0x121c4>
   24618:	add	r3, r4, r0
   2461c:	ldrb	r3, [r3, #-1]
   24620:	cmp	r3, #48	; 0x30
   24624:	bne	24788 <__assert_fail@plt+0x121c4>
   24628:	vldr	d9, [pc, #840]	; 24978 <__assert_fail@plt+0x123b4>
   2462c:	vmul.f64	d0, d8, d9
   24630:	ldr	r0, [sp]
   24634:	bl	24388 <__assert_fail@plt+0x11dc4>
   24638:	vdiv.f64	d7, d0, d9
   2463c:	vmov	r2, r3, d7
   24640:	movw	r1, #36124	; 0x8d1c
   24644:	movt	r1, #4
   24648:	ldr	r4, [sp, #28]
   2464c:	mov	r0, r4
   24650:	bl	12480 <sprintf@plt>
   24654:	mov	r0, r4
   24658:	bl	122d0 <strlen@plt>
   2465c:	mov	r8, r0
   24660:	mov	fp, #0
   24664:	b	24788 <__assert_fail@plt+0x121c4>
   24668:	ldrd	r2, [sp, #168]	; 0xa8
   2466c:	orrs	r3, r2, r3
   24670:	beq	24544 <__assert_fail@plt+0x11f80>
   24674:	ldrd	r2, [sp, #168]	; 0xa8
   24678:	ldrd	r0, [sp, #176]	; 0xb0
   2467c:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24680:	orrs	r3, r2, r3
   24684:	bne	24544 <__assert_fail@plt+0x11f80>
   24688:	ldrd	r2, [sp, #168]	; 0xa8
   2468c:	ldrd	r0, [sp, #176]	; 0xb0
   24690:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24694:	strd	r0, [sp, #40]	; 0x28
   24698:	mov	r2, r0
   2469c:	mov	r3, r1
   246a0:	mov	r0, r6
   246a4:	mov	r1, r7
   246a8:	bl	443f0 <__assert_fail@plt+0x31e2c>
   246ac:	lsl	r1, r3, #2
   246b0:	lsl	r4, r2, #2
   246b4:	orr	r0, r1, r2, lsr #30
   246b8:	adds	r4, r4, r2
   246bc:	adc	r3, r0, r3
   246c0:	adds	r4, r4, r4
   246c4:	adc	r8, r3, r3
   246c8:	ldrd	r2, [sp, #40]	; 0x28
   246cc:	mov	r0, r4
   246d0:	mov	r1, r8
   246d4:	bl	443f0 <__assert_fail@plt+0x31e2c>
   246d8:	adds	r1, r2, r2
   246dc:	str	r1, [sp, #48]	; 0x30
   246e0:	adc	r3, r3, r3
   246e4:	str	r3, [sp, #52]	; 0x34
   246e8:	ldrd	r2, [sp, #40]	; 0x28
   246ec:	mov	r0, r6
   246f0:	mov	r1, r7
   246f4:	bl	443f0 <__assert_fail@plt+0x31e2c>
   246f8:	strd	r0, [sp, #16]
   246fc:	ldrd	r2, [sp, #40]	; 0x28
   24700:	mov	r0, r4
   24704:	mov	r1, r8
   24708:	bl	443f0 <__assert_fail@plt+0x31e2c>
   2470c:	mov	r6, r0
   24710:	ldrd	r2, [sp, #40]	; 0x28
   24714:	ldrd	r0, [sp, #48]	; 0x30
   24718:	cmp	r3, r1
   2471c:	cmpeq	r2, r0
   24720:	bls	24738 <__assert_fail@plt+0x12174>
   24724:	mov	r3, r0
   24728:	orrs	r3, r3, r1
   2472c:	movne	r4, #1
   24730:	moveq	r4, #0
   24734:	b	24804 <__assert_fail@plt+0x12240>
   24738:	ldrd	r2, [sp, #40]	; 0x28
   2473c:	ldrd	r0, [sp, #48]	; 0x30
   24740:	cmp	r3, r1
   24744:	cmpeq	r2, r0
   24748:	movcc	r4, #3
   2474c:	movcs	r4, #2
   24750:	b	24804 <__assert_fail@plt+0x12240>
   24754:	ldr	r0, [sp]
   24758:	bl	24388 <__assert_fail@plt+0x11dc4>
   2475c:	vmov	r2, r3, d0
   24760:	movw	r1, #36124	; 0x8d1c
   24764:	movt	r1, #4
   24768:	ldr	r4, [sp, #28]
   2476c:	mov	r0, r4
   24770:	bl	12480 <sprintf@plt>
   24774:	mov	r0, r4
   24778:	bl	122d0 <strlen@plt>
   2477c:	mov	r8, r0
   24780:	mov	fp, #0
   24784:	mvn	r7, #0
   24788:	ldr	r3, [sp, #24]
   2478c:	sub	r6, r3, r8
   24790:	mov	r2, r8
   24794:	ldr	r1, [sp, #28]
   24798:	mov	r0, r6
   2479c:	bl	11f94 <memmove@plt>
   247a0:	sub	r8, r8, fp
   247a4:	add	r8, r6, r8
   247a8:	tst	r9, #4
   247ac:	bne	24b4c <__assert_fail@plt+0x12588>
   247b0:	tst	r9, #128	; 0x80
   247b4:	beq	247cc <__assert_fail@plt+0x12208>
   247b8:	cmp	r7, #0
   247bc:	blt	24bd8 <__assert_fail@plt+0x12614>
   247c0:	and	r3, r9, #256	; 0x100
   247c4:	orrs	r2, r3, r7
   247c8:	bne	24c38 <__assert_fail@plt+0x12674>
   247cc:	mov	r3, #0
   247d0:	ldr	r2, [sp, #24]
   247d4:	strb	r3, [r2]
   247d8:	mov	r0, r6
   247dc:	add	sp, sp, #116	; 0x74
   247e0:	vpop	{d8-d9}
   247e4:	ldrd	r4, [sp]
   247e8:	ldrd	r6, [sp, #8]
   247ec:	ldrd	r8, [sp, #16]
   247f0:	ldrd	sl, [sp, #24]
   247f4:	add	sp, sp, #32
   247f8:	pop	{pc}		; (ldr pc, [sp], #4)
   247fc:	mov	r4, #0
   24800:	mov	r6, r4
   24804:	ands	r3, r9, #16
   24808:	str	r3, [sp, #40]	; 0x28
   2480c:	beq	249c4 <__assert_fail@plt+0x12400>
   24810:	ldr	r8, [sp, #32]
   24814:	mov	r3, #0
   24818:	ldrd	r0, [sp, #16]
   2481c:	cmp	r3, r1
   24820:	cmpeq	r8, r0
   24824:	bhi	249fc <__assert_fail@plt+0x12438>
   24828:	mov	r7, #0
   2482c:	str	r5, [sp, #48]	; 0x30
   24830:	str	fp, [sp, #56]	; 0x38
   24834:	str	sl, [sp, #60]	; 0x3c
   24838:	mov	sl, r8
   2483c:	mov	fp, r3
   24840:	b	24880 <__assert_fail@plt+0x122bc>
   24844:	add	r4, r4, r5
   24848:	cmp	r4, r8
   2484c:	movhi	r4, #3
   24850:	movls	r4, #2
   24854:	add	r7, r7, #1
   24858:	ldrd	r2, [sp, #16]
   2485c:	cmp	fp, r3
   24860:	cmpeq	sl, r2
   24864:	movls	r3, #1
   24868:	movhi	r3, #0
   2486c:	cmp	r7, #7
   24870:	movgt	r3, #0
   24874:	andle	r3, r3, #1
   24878:	cmp	r3, #0
   2487c:	beq	248d4 <__assert_fail@plt+0x12310>
   24880:	mov	r2, sl
   24884:	mov	r3, fp
   24888:	ldrd	r0, [sp, #16]
   2488c:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24890:	add	r2, r2, r2, lsl #2
   24894:	add	r2, r6, r2, lsl #1
   24898:	udiv	r6, r2, r8
   2489c:	mls	r2, r8, r6, r2
   248a0:	asr	r5, r4, #1
   248a4:	add	r5, r5, r2, lsl #1
   248a8:	mov	r2, sl
   248ac:	mov	r3, fp
   248b0:	ldrd	r0, [sp, #16]
   248b4:	bl	443f0 <__assert_fail@plt+0x31e2c>
   248b8:	strd	r0, [sp, #16]
   248bc:	cmp	r8, r5
   248c0:	bls	24844 <__assert_fail@plt+0x12280>
   248c4:	cmn	r4, r5
   248c8:	movne	r4, #1
   248cc:	moveq	r4, #0
   248d0:	b	24854 <__assert_fail@plt+0x12290>
   248d4:	ldr	r5, [sp, #48]	; 0x30
   248d8:	ldr	fp, [sp, #56]	; 0x38
   248dc:	ldr	sl, [sp, #60]	; 0x3c
   248e0:	ldrd	r2, [sp, #16]
   248e4:	cmp	r3, #0
   248e8:	cmpeq	r2, #9
   248ec:	bhi	24a08 <__assert_fail@plt+0x12444>
   248f0:	ldr	r3, [sp]
   248f4:	cmp	r3, #1
   248f8:	beq	24958 <__assert_fail@plt+0x12394>
   248fc:	adds	r3, r4, #0
   24900:	movne	r3, #1
   24904:	ldr	r2, [sp]
   24908:	cmp	r2, #0
   2490c:	movne	r3, #0
   24910:	cmp	r3, #0
   24914:	beq	24cc4 <__assert_fail@plt+0x12700>
   24918:	add	r6, r6, #1
   2491c:	cmp	r6, #10
   24920:	beq	24980 <__assert_fail@plt+0x123bc>
   24924:	ldr	r3, [sp, #28]
   24928:	add	r8, r3, #644	; 0x284
   2492c:	add	r8, r8, #2
   24930:	add	r6, r6, #48	; 0x30
   24934:	strb	r6, [r3, #646]	; 0x286
   24938:	sub	r8, r8, fp
   2493c:	mov	r2, fp
   24940:	mov	r1, r5
   24944:	mov	r0, r8
   24948:	bl	12000 <memcpy@plt>
   2494c:	mov	r6, #0
   24950:	mov	r4, r6
   24954:	b	249cc <__assert_fail@plt+0x12408>
   24958:	and	r3, r6, #1
   2495c:	add	r3, r3, r4
   24960:	cmp	r3, #2
   24964:	movle	r3, #0
   24968:	movgt	r3, #1
   2496c:	b	24910 <__assert_fail@plt+0x1234c>
   24970:	andeq	r0, r0, r0
   24974:	svccc	0x00f00000	; IMB
   24978:	andeq	r0, r0, r0
   2497c:	eormi	r0, r4, r0
   24980:	ldr	r3, [sp, #16]
   24984:	adds	r3, r3, #1
   24988:	str	r3, [sp, #16]
   2498c:	ldr	r3, [sp, #20]
   24990:	adc	r3, r3, #0
   24994:	str	r3, [sp, #20]
   24998:	ldrd	r2, [sp, #16]
   2499c:	cmp	r3, #0
   249a0:	cmpeq	r2, #9
   249a4:	bls	249b8 <__assert_fail@plt+0x123f4>
   249a8:	ldr	r8, [sp, #24]
   249ac:	mov	r4, #0
   249b0:	mov	r6, r4
   249b4:	b	249cc <__assert_fail@plt+0x12408>
   249b8:	mov	r4, #0
   249bc:	mov	r6, r4
   249c0:	b	24ccc <__assert_fail@plt+0x12708>
   249c4:	ldr	r8, [sp, #24]
   249c8:	mvn	r7, #0
   249cc:	ldr	r3, [sp]
   249d0:	cmp	r3, #1
   249d4:	beq	24a10 <__assert_fail@plt+0x1244c>
   249d8:	ldr	r3, [sp]
   249dc:	cmp	r3, #0
   249e0:	movne	r6, #0
   249e4:	bne	24a3c <__assert_fail@plt+0x12478>
   249e8:	add	r6, r6, r4
   249ec:	cmp	r6, #0
   249f0:	movle	r6, #0
   249f4:	movgt	r6, #1
   249f8:	b	24a3c <__assert_fail@plt+0x12478>
   249fc:	ldr	r8, [sp, #24]
   24a00:	mov	r7, #0
   24a04:	b	249cc <__assert_fail@plt+0x12408>
   24a08:	ldr	r8, [sp, #24]
   24a0c:	b	249cc <__assert_fail@plt+0x12408>
   24a10:	ldr	r3, [sp, #16]
   24a14:	and	r0, r3, #1
   24a18:	mov	r1, #0
   24a1c:	adds	r2, r0, r4
   24a20:	adc	r3, r1, r4, asr #31
   24a24:	orr	r2, r2, r3
   24a28:	cmp	r2, r1
   24a2c:	addne	r6, r6, #1
   24a30:	cmp	r6, #5
   24a34:	movle	r6, #0
   24a38:	movgt	r6, #1
   24a3c:	cmp	r6, #0
   24a40:	beq	24a98 <__assert_fail@plt+0x124d4>
   24a44:	ldr	r3, [sp, #16]
   24a48:	adds	r3, r3, #1
   24a4c:	str	r3, [sp, #16]
   24a50:	ldr	r3, [sp, #20]
   24a54:	adc	r3, r3, #0
   24a58:	str	r3, [sp, #20]
   24a5c:	ldr	r3, [sp, #40]	; 0x28
   24a60:	cmp	r3, #0
   24a64:	beq	24a98 <__assert_fail@plt+0x124d4>
   24a68:	ldr	r2, [sp, #32]
   24a6c:	mov	r3, #0
   24a70:	ldrd	r0, [sp, #16]
   24a74:	cmp	r3, r1
   24a78:	cmpeq	r2, r0
   24a7c:	moveq	r3, #1
   24a80:	movne	r3, #0
   24a84:	cmp	r7, #7
   24a88:	movgt	r3, #0
   24a8c:	andle	r3, r3, #1
   24a90:	cmp	r3, #0
   24a94:	bne	24abc <__assert_fail@plt+0x124f8>
   24a98:	mov	r4, #10
   24a9c:	mov	r5, #0
   24aa0:	mov	fp, r8
   24aa4:	strd	r4, [sp]
   24aa8:	mov	r5, r9
   24aac:	mov	r9, r8
   24ab0:	mov	r8, r7
   24ab4:	ldrd	r6, [sp, #16]
   24ab8:	b	24b04 <__assert_fail@plt+0x12540>
   24abc:	add	r7, r7, #1
   24ac0:	tst	r9, #8
   24ac4:	beq	24ad8 <__assert_fail@plt+0x12514>
   24ac8:	sub	r6, r8, #1
   24acc:	mov	r3, #49	; 0x31
   24ad0:	strb	r3, [r8, #-1]
   24ad4:	b	247a8 <__assert_fail@plt+0x121e4>
   24ad8:	mov	r3, #48	; 0x30
   24adc:	strb	r3, [r8, #-1]
   24ae0:	mvn	r3, fp
   24ae4:	add	r8, r8, r3
   24ae8:	mov	r2, fp
   24aec:	mov	r1, r5
   24af0:	mov	r0, r8
   24af4:	bl	12000 <memcpy@plt>
   24af8:	b	24ac8 <__assert_fail@plt+0x12504>
   24afc:	mov	r6, r0
   24b00:	mov	r7, r1
   24b04:	ldrd	r2, [sp]
   24b08:	mov	r0, r6
   24b0c:	mov	r1, r7
   24b10:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24b14:	add	r2, r2, #48	; 0x30
   24b18:	strb	r2, [fp, #-1]!
   24b1c:	ldrd	r2, [sp]
   24b20:	mov	r0, r6
   24b24:	mov	r1, r7
   24b28:	bl	443f0 <__assert_fail@plt+0x31e2c>
   24b2c:	cmp	r7, #0
   24b30:	cmpeq	r6, #9
   24b34:	bhi	24afc <__assert_fail@plt+0x12538>
   24b38:	mov	r7, r8
   24b3c:	mov	r8, r9
   24b40:	mov	r6, fp
   24b44:	mov	r9, r5
   24b48:	b	247a8 <__assert_fail@plt+0x121e4>
   24b4c:	sub	r4, r8, r6
   24b50:	ldr	r0, [sp, #12]
   24b54:	bl	122d0 <strlen@plt>
   24b58:	mov	fp, r0
   24b5c:	mov	r2, r4
   24b60:	mov	r1, r6
   24b64:	add	r0, sp, #68	; 0x44
   24b68:	bl	12000 <memcpy@plt>
   24b6c:	mvn	r5, #0
   24b70:	mov	r6, r8
   24b74:	b	24bb8 <__assert_fail@plt+0x125f4>
   24b78:	cmp	r5, r4
   24b7c:	movcs	r5, r4
   24b80:	sub	r6, r6, r5
   24b84:	sub	r4, r4, r5
   24b88:	mov	r2, r5
   24b8c:	add	r3, sp, #68	; 0x44
   24b90:	add	r1, r3, r4
   24b94:	mov	r0, r6
   24b98:	bl	12000 <memcpy@plt>
   24b9c:	cmp	r4, #0
   24ba0:	beq	247b0 <__assert_fail@plt+0x121ec>
   24ba4:	sub	r6, r6, fp
   24ba8:	mov	r2, fp
   24bac:	ldr	r1, [sp, #12]
   24bb0:	mov	r0, r6
   24bb4:	bl	12000 <memcpy@plt>
   24bb8:	ldrb	r3, [sl]
   24bbc:	cmp	r3, #0
   24bc0:	beq	24b78 <__assert_fail@plt+0x125b4>
   24bc4:	cmp	r3, #255	; 0xff
   24bc8:	movne	r5, r3
   24bcc:	moveq	r5, r4
   24bd0:	add	sl, sl, #1
   24bd4:	b	24b78 <__assert_fail@plt+0x125b4>
   24bd8:	ldrd	r2, [sp, #176]	; 0xb0
   24bdc:	cmp	r3, #0
   24be0:	cmpeq	r2, #1
   24be4:	movls	r7, #0
   24be8:	bls	247c0 <__assert_fail@plt+0x121fc>
   24bec:	mov	r7, #1
   24bf0:	mov	r2, #1
   24bf4:	mov	r3, #0
   24bf8:	ldr	r1, [sp, #32]
   24bfc:	ldrd	r4, [sp, #176]	; 0xb0
   24c00:	mul	r0, r1, r3
   24c04:	umull	r2, r3, r2, r1
   24c08:	add	r3, r0, r3
   24c0c:	cmp	r5, r3
   24c10:	cmpeq	r4, r2
   24c14:	bls	247c0 <__assert_fail@plt+0x121fc>
   24c18:	add	r7, r7, #1
   24c1c:	cmp	r7, #8
   24c20:	bne	24c00 <__assert_fail@plt+0x1263c>
   24c24:	and	r3, r9, #256	; 0x100
   24c28:	tst	r9, #64	; 0x40
   24c2c:	bne	24c40 <__assert_fail@plt+0x1267c>
   24c30:	ldr	r2, [sp, #24]
   24c34:	b	24c58 <__assert_fail@plt+0x12694>
   24c38:	tst	r9, #64	; 0x40
   24c3c:	beq	24ca0 <__assert_fail@plt+0x126dc>
   24c40:	ldr	r0, [sp, #28]
   24c44:	add	r2, r0, #648	; 0x288
   24c48:	mov	r1, #32
   24c4c:	strb	r1, [r0, #647]	; 0x287
   24c50:	cmp	r7, #0
   24c54:	beq	24ca8 <__assert_fail@plt+0x126e4>
   24c58:	ldr	ip, [sp, #36]	; 0x24
   24c5c:	cmp	ip, #0
   24c60:	cmpeq	r7, #1
   24c64:	beq	24ce0 <__assert_fail@plt+0x1271c>
   24c68:	mov	r0, r2
   24c6c:	movw	r1, #36092	; 0x8cfc
   24c70:	movt	r1, #4
   24c74:	ldrb	r1, [r1, r7]
   24c78:	strb	r1, [r0], #1
   24c7c:	str	r0, [sp, #24]
   24c80:	cmp	r3, #0
   24c84:	beq	247cc <__assert_fail@plt+0x12208>
   24c88:	cmp	ip, #0
   24c8c:	movne	r3, #105	; 0x69
   24c90:	strbne	r3, [r2, #1]
   24c94:	addne	r2, r2, #2
   24c98:	ldreq	r2, [sp, #24]
   24c9c:	b	24cb4 <__assert_fail@plt+0x126f0>
   24ca0:	ldr	r2, [sp, #24]
   24ca4:	b	24c50 <__assert_fail@plt+0x1268c>
   24ca8:	cmp	r3, #0
   24cac:	streq	r2, [sp, #24]
   24cb0:	beq	247cc <__assert_fail@plt+0x12208>
   24cb4:	mov	r3, #66	; 0x42
   24cb8:	strb	r3, [r2], #1
   24cbc:	str	r2, [sp, #24]
   24cc0:	b	247cc <__assert_fail@plt+0x12208>
   24cc4:	cmp	r6, #0
   24cc8:	bne	24924 <__assert_fail@plt+0x12360>
   24ccc:	tst	r9, #8
   24cd0:	beq	24924 <__assert_fail@plt+0x12360>
   24cd4:	ldr	r8, [sp, #24]
   24cd8:	mov	r6, #0
   24cdc:	b	249cc <__assert_fail@plt+0x12408>
   24ce0:	mov	r1, r2
   24ce4:	mov	r2, #107	; 0x6b
   24ce8:	strb	r2, [r1], #1
   24cec:	str	r1, [sp, #24]
   24cf0:	cmp	r3, #0
   24cf4:	beq	247cc <__assert_fail@plt+0x12208>
   24cf8:	ldr	r2, [sp, #24]
   24cfc:	b	24cb4 <__assert_fail@plt+0x126f0>
   24d00:	strd	r4, [sp, #-20]!	; 0xffffffec
   24d04:	strd	r6, [sp, #8]
   24d08:	str	lr, [sp, #16]
   24d0c:	sub	sp, sp, #20
   24d10:	mov	r7, r1
   24d14:	mov	r6, r2
   24d18:	subs	r4, r0, #0
   24d1c:	beq	24da0 <__assert_fail@plt+0x127dc>
   24d20:	ldrb	r3, [r4]
   24d24:	cmp	r3, #39	; 0x27
   24d28:	addeq	r4, r4, #1
   24d2c:	moveq	r5, #4
   24d30:	movne	r5, #0
   24d34:	movw	r1, #36092	; 0x8cfc
   24d38:	movt	r1, #4
   24d3c:	mov	r3, #4
   24d40:	add	r2, r1, #12
   24d44:	add	r1, r1, #20
   24d48:	mov	r0, r4
   24d4c:	bl	41660 <__assert_fail@plt+0x2f09c>
   24d50:	cmp	r0, #0
   24d54:	blt	24df0 <__assert_fail@plt+0x1282c>
   24d58:	movw	r3, #36092	; 0x8cfc
   24d5c:	movt	r3, #4
   24d60:	add	r3, r3, r0, lsl #2
   24d64:	ldr	r3, [r3, #12]
   24d68:	orr	r5, r5, r3
   24d6c:	mov	r2, #1
   24d70:	mov	r3, #0
   24d74:	strd	r2, [r6]
   24d78:	str	r5, [r7]
   24d7c:	mov	r0, #0
   24d80:	ldrd	r2, [r6]
   24d84:	orrs	r3, r2, r3
   24d88:	beq	24e8c <__assert_fail@plt+0x128c8>
   24d8c:	add	sp, sp, #20
   24d90:	ldrd	r4, [sp]
   24d94:	ldrd	r6, [sp, #8]
   24d98:	add	sp, sp, #16
   24d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   24da0:	movw	r0, #36140	; 0x8d2c
   24da4:	movt	r0, #4
   24da8:	bl	121f8 <getenv@plt>
   24dac:	subs	r4, r0, #0
   24db0:	bne	24d20 <__assert_fail@plt+0x1275c>
   24db4:	movw	r0, #36152	; 0x8d38
   24db8:	movt	r0, #4
   24dbc:	bl	121f8 <getenv@plt>
   24dc0:	subs	r4, r0, #0
   24dc4:	bne	24d20 <__assert_fail@plt+0x1275c>
   24dc8:	movw	r0, #26200	; 0x6658
   24dcc:	movt	r0, #4
   24dd0:	bl	121f8 <getenv@plt>
   24dd4:	cmp	r0, #0
   24dd8:	moveq	r2, #1024	; 0x400
   24ddc:	movne	r2, #512	; 0x200
   24de0:	mov	r3, #0
   24de4:	strd	r2, [r6]
   24de8:	mov	r5, #0
   24dec:	b	24d78 <__assert_fail@plt+0x127b4>
   24df0:	movw	r3, #36164	; 0x8d44
   24df4:	movt	r3, #4
   24df8:	str	r3, [sp]
   24dfc:	mov	r3, r6
   24e00:	mov	r2, #0
   24e04:	add	r1, sp, #12
   24e08:	mov	r0, r4
   24e0c:	bl	2ef30 <__assert_fail@plt+0x1c96c>
   24e10:	cmp	r0, #0
   24e14:	bne	24e6c <__assert_fail@plt+0x128a8>
   24e18:	ldrb	r3, [r4]
   24e1c:	sub	r3, r3, #48	; 0x30
   24e20:	uxtb	r3, r3
   24e24:	cmp	r3, #9
   24e28:	bls	24d78 <__assert_fail@plt+0x127b4>
   24e2c:	ldr	r2, [sp, #12]
   24e30:	cmp	r2, r4
   24e34:	beq	24e54 <__assert_fail@plt+0x12890>
   24e38:	ldrb	r3, [r4, #1]!
   24e3c:	sub	r3, r3, #48	; 0x30
   24e40:	uxtb	r3, r3
   24e44:	cmp	r3, #9
   24e48:	bls	24d78 <__assert_fail@plt+0x127b4>
   24e4c:	cmp	r2, r4
   24e50:	bne	24e38 <__assert_fail@plt+0x12874>
   24e54:	ldrb	r3, [r4, #-1]
   24e58:	cmp	r3, #66	; 0x42
   24e5c:	orrne	r5, r5, #128	; 0x80
   24e60:	beq	24e78 <__assert_fail@plt+0x128b4>
   24e64:	orr	r5, r5, #32
   24e68:	b	24d78 <__assert_fail@plt+0x127b4>
   24e6c:	mov	r3, #0
   24e70:	str	r3, [r7]
   24e74:	b	24d80 <__assert_fail@plt+0x127bc>
   24e78:	orr	r5, r5, #384	; 0x180
   24e7c:	ldrb	r3, [r4, #-2]
   24e80:	cmp	r3, #105	; 0x69
   24e84:	bne	24d78 <__assert_fail@plt+0x127b4>
   24e88:	b	24e64 <__assert_fail@plt+0x128a0>
   24e8c:	movw	r0, #26200	; 0x6658
   24e90:	movt	r0, #4
   24e94:	bl	121f8 <getenv@plt>
   24e98:	cmp	r0, #0
   24e9c:	moveq	r2, #1024	; 0x400
   24ea0:	movne	r2, #512	; 0x200
   24ea4:	mov	r3, #0
   24ea8:	strd	r2, [r6]
   24eac:	mov	r0, #4
   24eb0:	b	24d8c <__assert_fail@plt+0x127c8>
   24eb4:	strd	r4, [sp, #-16]!
   24eb8:	str	r6, [sp, #8]
   24ebc:	str	lr, [sp, #12]
   24ec0:	movw	r3, #48372	; 0xbcf4
   24ec4:	movt	r3, #5
   24ec8:	ldr	r4, [r3]
   24ecc:	cmp	r4, #0
   24ed0:	beq	24f18 <__assert_fail@plt+0x12954>
   24ed4:	ldr	r3, [r4]
   24ed8:	cmp	r0, r3
   24edc:	beq	24ef8 <__assert_fail@plt+0x12934>
   24ee0:	ldr	r4, [r4, #4]
   24ee4:	cmp	r4, #0
   24ee8:	beq	24f18 <__assert_fail@plt+0x12954>
   24eec:	ldr	r3, [r4]
   24ef0:	cmp	r3, r0
   24ef4:	bne	24ee0 <__assert_fail@plt+0x1291c>
   24ef8:	ldrb	r3, [r4, #8]
   24efc:	cmp	r3, #0
   24f00:	addne	r0, r4, #8
   24f04:	moveq	r0, #0
   24f08:	ldrd	r4, [sp]
   24f0c:	ldr	r6, [sp, #8]
   24f10:	add	sp, sp, #12
   24f14:	pop	{pc}		; (ldr pc, [sp], #4)
   24f18:	mov	r5, r0
   24f1c:	bl	11f34 <getpwuid@plt>
   24f20:	cmp	r0, #0
   24f24:	movweq	r6, #25528	; 0x63b8
   24f28:	movteq	r6, #4
   24f2c:	ldrne	r6, [r0]
   24f30:	mov	r0, r6
   24f34:	bl	122d0 <strlen@plt>
   24f38:	add	r0, r0, #12
   24f3c:	bic	r0, r0, #3
   24f40:	bl	2e348 <__assert_fail@plt+0x1bd84>
   24f44:	mov	r4, r0
   24f48:	str	r5, [r0], #8
   24f4c:	mov	r1, r6
   24f50:	bl	12180 <strcpy@plt>
   24f54:	movw	r3, #48372	; 0xbcf4
   24f58:	movt	r3, #5
   24f5c:	ldr	r2, [r3]
   24f60:	str	r2, [r4, #4]
   24f64:	str	r4, [r3]
   24f68:	b	24ef8 <__assert_fail@plt+0x12934>
   24f6c:	strd	r4, [sp, #-16]!
   24f70:	str	r6, [sp, #8]
   24f74:	str	lr, [sp, #12]
   24f78:	mov	r6, r0
   24f7c:	movw	r3, #48372	; 0xbcf4
   24f80:	movt	r3, #5
   24f84:	ldr	r4, [r3]
   24f88:	cmp	r4, #0
   24f8c:	beq	24fc8 <__assert_fail@plt+0x12a04>
   24f90:	ldrb	r5, [r0]
   24f94:	b	24fa4 <__assert_fail@plt+0x129e0>
   24f98:	ldr	r4, [r4, #4]
   24f9c:	cmp	r4, #0
   24fa0:	beq	24fc8 <__assert_fail@plt+0x12a04>
   24fa4:	ldrb	r3, [r4, #8]
   24fa8:	cmp	r3, r5
   24fac:	bne	24f98 <__assert_fail@plt+0x129d4>
   24fb0:	mov	r1, r6
   24fb4:	add	r0, r4, #8
   24fb8:	bl	11f1c <strcmp@plt>
   24fbc:	cmp	r0, #0
   24fc0:	bne	24f98 <__assert_fail@plt+0x129d4>
   24fc4:	b	25070 <__assert_fail@plt+0x12aac>
   24fc8:	movw	r3, #48372	; 0xbcf4
   24fcc:	movt	r3, #5
   24fd0:	ldr	r4, [r3, #4]
   24fd4:	cmp	r4, #0
   24fd8:	beq	25018 <__assert_fail@plt+0x12a54>
   24fdc:	ldrb	r5, [r6]
   24fe0:	b	24ff0 <__assert_fail@plt+0x12a2c>
   24fe4:	ldr	r4, [r4, #4]
   24fe8:	cmp	r4, #0
   24fec:	beq	25018 <__assert_fail@plt+0x12a54>
   24ff0:	ldrb	r3, [r4, #8]
   24ff4:	cmp	r3, r5
   24ff8:	bne	24fe4 <__assert_fail@plt+0x12a20>
   24ffc:	mov	r1, r6
   25000:	add	r0, r4, #8
   25004:	bl	11f1c <strcmp@plt>
   25008:	cmp	r0, #0
   2500c:	bne	24fe4 <__assert_fail@plt+0x12a20>
   25010:	mov	r4, #0
   25014:	b	25070 <__assert_fail@plt+0x12aac>
   25018:	mov	r0, r6
   2501c:	bl	11ef8 <getpwnam@plt>
   25020:	mov	r4, r0
   25024:	mov	r0, r6
   25028:	bl	122d0 <strlen@plt>
   2502c:	add	r0, r0, #12
   25030:	bic	r0, r0, #3
   25034:	bl	2e348 <__assert_fail@plt+0x1bd84>
   25038:	mov	r5, r0
   2503c:	mov	r1, r6
   25040:	add	r0, r0, #8
   25044:	bl	12180 <strcpy@plt>
   25048:	cmp	r4, #0
   2504c:	beq	25084 <__assert_fail@plt+0x12ac0>
   25050:	ldr	r3, [r4, #8]
   25054:	str	r3, [r5]
   25058:	movw	r3, #48372	; 0xbcf4
   2505c:	movt	r3, #5
   25060:	ldr	r2, [r3]
   25064:	str	r2, [r5, #4]
   25068:	str	r5, [r3]
   2506c:	mov	r4, r5
   25070:	mov	r0, r4
   25074:	ldrd	r4, [sp]
   25078:	ldr	r6, [sp, #8]
   2507c:	add	sp, sp, #12
   25080:	pop	{pc}		; (ldr pc, [sp], #4)
   25084:	movw	r3, #48372	; 0xbcf4
   25088:	movt	r3, #5
   2508c:	ldr	r2, [r3, #4]
   25090:	str	r2, [r5, #4]
   25094:	str	r5, [r3, #4]
   25098:	b	25070 <__assert_fail@plt+0x12aac>
   2509c:	strd	r4, [sp, #-16]!
   250a0:	str	r6, [sp, #8]
   250a4:	str	lr, [sp, #12]
   250a8:	movw	r3, #48372	; 0xbcf4
   250ac:	movt	r3, #5
   250b0:	ldr	r4, [r3, #8]
   250b4:	cmp	r4, #0
   250b8:	beq	25100 <__assert_fail@plt+0x12b3c>
   250bc:	ldr	r3, [r4]
   250c0:	cmp	r0, r3
   250c4:	beq	250e0 <__assert_fail@plt+0x12b1c>
   250c8:	ldr	r4, [r4, #4]
   250cc:	cmp	r4, #0
   250d0:	beq	25100 <__assert_fail@plt+0x12b3c>
   250d4:	ldr	r3, [r4]
   250d8:	cmp	r3, r0
   250dc:	bne	250c8 <__assert_fail@plt+0x12b04>
   250e0:	ldrb	r3, [r4, #8]
   250e4:	cmp	r3, #0
   250e8:	addne	r0, r4, #8
   250ec:	moveq	r0, #0
   250f0:	ldrd	r4, [sp]
   250f4:	ldr	r6, [sp, #8]
   250f8:	add	sp, sp, #12
   250fc:	pop	{pc}		; (ldr pc, [sp], #4)
   25100:	mov	r5, r0
   25104:	bl	125a0 <getgrgid@plt>
   25108:	cmp	r0, #0
   2510c:	movweq	r6, #25528	; 0x63b8
   25110:	movteq	r6, #4
   25114:	ldrne	r6, [r0]
   25118:	mov	r0, r6
   2511c:	bl	122d0 <strlen@plt>
   25120:	add	r0, r0, #12
   25124:	bic	r0, r0, #3
   25128:	bl	2e348 <__assert_fail@plt+0x1bd84>
   2512c:	mov	r4, r0
   25130:	str	r5, [r0], #8
   25134:	mov	r1, r6
   25138:	bl	12180 <strcpy@plt>
   2513c:	movw	r3, #48372	; 0xbcf4
   25140:	movt	r3, #5
   25144:	ldr	r2, [r3, #8]
   25148:	str	r2, [r4, #4]
   2514c:	str	r4, [r3, #8]
   25150:	b	250e0 <__assert_fail@plt+0x12b1c>
   25154:	strd	r4, [sp, #-16]!
   25158:	str	r6, [sp, #8]
   2515c:	str	lr, [sp, #12]
   25160:	mov	r6, r0
   25164:	movw	r3, #48372	; 0xbcf4
   25168:	movt	r3, #5
   2516c:	ldr	r4, [r3, #8]
   25170:	cmp	r4, #0
   25174:	beq	251b0 <__assert_fail@plt+0x12bec>
   25178:	ldrb	r5, [r0]
   2517c:	b	2518c <__assert_fail@plt+0x12bc8>
   25180:	ldr	r4, [r4, #4]
   25184:	cmp	r4, #0
   25188:	beq	251b0 <__assert_fail@plt+0x12bec>
   2518c:	ldrb	r3, [r4, #8]
   25190:	cmp	r3, r5
   25194:	bne	25180 <__assert_fail@plt+0x12bbc>
   25198:	mov	r1, r6
   2519c:	add	r0, r4, #8
   251a0:	bl	11f1c <strcmp@plt>
   251a4:	cmp	r0, #0
   251a8:	bne	25180 <__assert_fail@plt+0x12bbc>
   251ac:	b	25258 <__assert_fail@plt+0x12c94>
   251b0:	movw	r3, #48372	; 0xbcf4
   251b4:	movt	r3, #5
   251b8:	ldr	r4, [r3, #12]
   251bc:	cmp	r4, #0
   251c0:	beq	25200 <__assert_fail@plt+0x12c3c>
   251c4:	ldrb	r5, [r6]
   251c8:	b	251d8 <__assert_fail@plt+0x12c14>
   251cc:	ldr	r4, [r4, #4]
   251d0:	cmp	r4, #0
   251d4:	beq	25200 <__assert_fail@plt+0x12c3c>
   251d8:	ldrb	r3, [r4, #8]
   251dc:	cmp	r3, r5
   251e0:	bne	251cc <__assert_fail@plt+0x12c08>
   251e4:	mov	r1, r6
   251e8:	add	r0, r4, #8
   251ec:	bl	11f1c <strcmp@plt>
   251f0:	cmp	r0, #0
   251f4:	bne	251cc <__assert_fail@plt+0x12c08>
   251f8:	mov	r4, #0
   251fc:	b	25258 <__assert_fail@plt+0x12c94>
   25200:	mov	r0, r6
   25204:	bl	125ac <getgrnam@plt>
   25208:	mov	r4, r0
   2520c:	mov	r0, r6
   25210:	bl	122d0 <strlen@plt>
   25214:	add	r0, r0, #12
   25218:	bic	r0, r0, #3
   2521c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   25220:	mov	r5, r0
   25224:	mov	r1, r6
   25228:	add	r0, r0, #8
   2522c:	bl	12180 <strcpy@plt>
   25230:	cmp	r4, #0
   25234:	beq	2526c <__assert_fail@plt+0x12ca8>
   25238:	ldr	r3, [r4, #8]
   2523c:	str	r3, [r5]
   25240:	movw	r3, #48372	; 0xbcf4
   25244:	movt	r3, #5
   25248:	ldr	r2, [r3, #8]
   2524c:	str	r2, [r5, #4]
   25250:	str	r5, [r3, #8]
   25254:	mov	r4, r5
   25258:	mov	r0, r4
   2525c:	ldrd	r4, [sp]
   25260:	ldr	r6, [sp, #8]
   25264:	add	sp, sp, #12
   25268:	pop	{pc}		; (ldr pc, [sp], #4)
   2526c:	movw	r3, #48372	; 0xbcf4
   25270:	movt	r3, #5
   25274:	ldr	r2, [r3, #12]
   25278:	str	r2, [r5, #4]
   2527c:	str	r5, [r3, #12]
   25280:	b	25258 <__assert_fail@plt+0x12c94>
   25284:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25288:	strd	r6, [sp, #8]
   2528c:	strd	r8, [sp, #16]
   25290:	str	fp, [sp, #24]
   25294:	str	lr, [sp, #28]
   25298:	add	fp, sp, #28
   2529c:	mov	r7, r3
   252a0:	lsl	r3, r2, #2
   252a4:	lsr	r8, r2, #30
   252a8:	adds	r8, r8, #0
   252ac:	movne	r8, #1
   252b0:	cmp	r3, #0
   252b4:	movlt	r8, #1
   252b8:	cmp	r8, #0
   252bc:	movne	r8, #0
   252c0:	bne	253dc <__assert_fail@plt+0x12e18>
   252c4:	mov	r6, r0
   252c8:	mov	r4, r1
   252cc:	mov	r5, r2
   252d0:	mov	r0, r3
   252d4:	cmp	r3, #4016	; 0xfb0
   252d8:	bhi	25318 <__assert_fail@plt+0x12d54>
   252dc:	add	r3, r3, #22
   252e0:	bic	r3, r3, #7
   252e4:	sub	sp, sp, r3
   252e8:	add	r0, sp, #15
   252ec:	bic	r0, r0, #15
   252f0:	cmp	r0, #0
   252f4:	beq	253dc <__assert_fail@plt+0x12e18>
   252f8:	mov	r3, #1
   252fc:	str	r3, [r0, #4]
   25300:	cmp	r5, #2
   25304:	bls	25378 <__assert_fail@plt+0x12db4>
   25308:	mov	lr, r4
   2530c:	mov	r3, #0
   25310:	mov	ip, #2
   25314:	b	25338 <__assert_fail@plt+0x12d74>
   25318:	bl	42020 <__assert_fail@plt+0x2fa5c>
   2531c:	b	252f0 <__assert_fail@plt+0x12d2c>
   25320:	add	r3, r3, #1
   25324:	sub	r2, ip, r3
   25328:	str	r2, [r0, ip, lsl #2]
   2532c:	add	ip, ip, #1
   25330:	cmp	r5, ip
   25334:	beq	25378 <__assert_fail@plt+0x12db4>
   25338:	ldrb	r1, [lr, #1]!
   2533c:	ldrb	r2, [r4, r3]
   25340:	cmp	r2, r1
   25344:	beq	25320 <__assert_fail@plt+0x12d5c>
   25348:	cmp	r3, #0
   2534c:	beq	2536c <__assert_fail@plt+0x12da8>
   25350:	ldr	r2, [r0, r3, lsl #2]
   25354:	sub	r3, r3, r2
   25358:	ldrb	r2, [r4, r3]
   2535c:	cmp	r2, r1
   25360:	beq	25320 <__assert_fail@plt+0x12d5c>
   25364:	cmp	r3, #0
   25368:	bne	25350 <__assert_fail@plt+0x12d8c>
   2536c:	str	ip, [r0, ip, lsl #2]
   25370:	mov	r3, #0
   25374:	b	2532c <__assert_fail@plt+0x12d68>
   25378:	mov	r3, #0
   2537c:	str	r3, [r7]
   25380:	mov	r1, r6
   25384:	b	25398 <__assert_fail@plt+0x12dd4>
   25388:	add	r3, r3, #1
   2538c:	add	r1, r1, #1
   25390:	cmp	r5, r3
   25394:	beq	253d0 <__assert_fail@plt+0x12e0c>
   25398:	ldrb	r2, [r1]
   2539c:	cmp	r2, #0
   253a0:	beq	253d4 <__assert_fail@plt+0x12e10>
   253a4:	ldrb	ip, [r4, r3]
   253a8:	cmp	ip, r2
   253ac:	beq	25388 <__assert_fail@plt+0x12dc4>
   253b0:	cmp	r3, #0
   253b4:	addeq	r6, r6, #1
   253b8:	addeq	r1, r1, #1
   253bc:	beq	25398 <__assert_fail@plt+0x12dd4>
   253c0:	ldr	r2, [r0, r3, lsl #2]
   253c4:	add	r6, r6, r2
   253c8:	sub	r3, r3, r2
   253cc:	b	25398 <__assert_fail@plt+0x12dd4>
   253d0:	str	r6, [r7]
   253d4:	bl	42088 <__assert_fail@plt+0x2fac4>
   253d8:	mov	r8, #1
   253dc:	mov	r0, r8
   253e0:	sub	sp, fp, #28
   253e4:	ldrd	r4, [sp]
   253e8:	ldrd	r6, [sp, #8]
   253ec:	ldrd	r8, [sp, #16]
   253f0:	ldr	fp, [sp, #24]
   253f4:	add	sp, sp, #28
   253f8:	pop	{pc}		; (ldr pc, [sp], #4)
   253fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25400:	strd	r6, [sp, #8]
   25404:	strd	r8, [sp, #16]
   25408:	strd	sl, [sp, #24]
   2540c:	str	lr, [sp, #32]
   25410:	add	fp, sp, #32
   25414:	sub	sp, sp, #140	; 0x8c
   25418:	str	r0, [fp, #-164]	; 0xffffff5c
   2541c:	mov	r4, r1
   25420:	str	r2, [fp, #-160]	; 0xffffff60
   25424:	mov	r0, r1
   25428:	bl	42180 <__assert_fail@plt+0x2fbbc>
   2542c:	str	r0, [fp, #-152]	; 0xffffff68
   25430:	mov	r2, #44	; 0x2c
   25434:	umull	r6, r7, r0, r2
   25438:	adds	r3, r7, #0
   2543c:	movne	r3, #1
   25440:	cmp	r6, #0
   25444:	movlt	r3, #1
   25448:	str	r3, [fp, #-156]	; 0xffffff64
   2544c:	cmp	r3, #0
   25450:	bne	25ca0 <__assert_fail@plt+0x136dc>
   25454:	mov	r1, r0
   25458:	mul	r0, r2, r1
   2545c:	cmp	r0, #4016	; 0xfb0
   25460:	bhi	254bc <__assert_fail@plt+0x12ef8>
   25464:	add	r3, r0, #22
   25468:	bic	r3, r3, #7
   2546c:	sub	sp, sp, r3
   25470:	add	r8, sp, #15
   25474:	bic	r8, r8, #15
   25478:	cmp	r8, #0
   2547c:	beq	257fc <__assert_fail@plt+0x13238>
   25480:	ldr	r3, [fp, #-152]	; 0xffffff68
   25484:	add	r9, r3, r3, lsl #2
   25488:	add	r9, r8, r9, lsl #3
   2548c:	str	r4, [fp, #-76]	; 0xffffffb4
   25490:	mov	r3, #0
   25494:	strb	r3, [fp, #-92]	; 0xffffffa4
   25498:	mov	r0, #0
   2549c:	mov	r1, #0
   254a0:	strd	r0, [fp, #-88]	; 0xffffffa8
   254a4:	strb	r3, [fp, #-80]	; 0xffffffb0
   254a8:	add	r4, r8, #16
   254ac:	mov	r5, #1
   254b0:	movw	r7, #42588	; 0xa65c
   254b4:	movt	r7, #4
   254b8:	b	255e0 <__assert_fail@plt+0x1301c>
   254bc:	bl	42020 <__assert_fail@plt+0x2fa5c>
   254c0:	mov	r8, r0
   254c4:	b	25478 <__assert_fail@plt+0x12eb4>
   254c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   254cc:	sub	r1, fp, #60	; 0x3c
   254d0:	mov	r0, r4
   254d4:	bl	12000 <memcpy@plt>
   254d8:	str	r4, [r4, #-16]
   254dc:	b	255ac <__assert_fail@plt+0x12fe8>
   254e0:	sub	r0, fp, #88	; 0x58
   254e4:	bl	1203c <mbsinit@plt>
   254e8:	cmp	r0, #0
   254ec:	beq	2562c <__assert_fail@plt+0x13068>
   254f0:	strb	r5, [fp, #-92]	; 0xffffffa4
   254f4:	ldr	r6, [fp, #-76]	; 0xffffffb4
   254f8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   254fc:	mov	r1, r0
   25500:	mov	r0, r6
   25504:	bl	2dd58 <__assert_fail@plt+0x1b794>
   25508:	sub	r3, fp, #88	; 0x58
   2550c:	mov	r2, r0
   25510:	mov	r1, r6
   25514:	sub	r0, fp, #64	; 0x40
   25518:	bl	32184 <__assert_fail@plt+0x1fbc0>
   2551c:	str	r0, [fp, #-72]	; 0xffffffb8
   25520:	cmn	r0, #1
   25524:	streq	r5, [fp, #-72]	; 0xffffffb8
   25528:	moveq	r3, #0
   2552c:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   25530:	beq	2557c <__assert_fail@plt+0x12fb8>
   25534:	cmn	r0, #2
   25538:	beq	2564c <__assert_fail@plt+0x13088>
   2553c:	cmp	r0, #0
   25540:	bne	25564 <__assert_fail@plt+0x12fa0>
   25544:	str	r5, [fp, #-72]	; 0xffffffb8
   25548:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2554c:	ldrb	r3, [r3]
   25550:	cmp	r3, #0
   25554:	bne	25664 <__assert_fail@plt+0x130a0>
   25558:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2555c:	cmp	r3, #0
   25560:	bne	25684 <__assert_fail@plt+0x130c0>
   25564:	strb	r5, [fp, #-68]	; 0xffffffbc
   25568:	sub	r0, fp, #88	; 0x58
   2556c:	bl	1203c <mbsinit@plt>
   25570:	cmp	r0, #0
   25574:	movne	r3, #0
   25578:	strbne	r3, [fp, #-92]	; 0xffffffa4
   2557c:	strb	r5, [fp, #-80]	; 0xffffffb0
   25580:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   25584:	cmp	r3, #0
   25588:	beq	25598 <__assert_fail@plt+0x12fd4>
   2558c:	ldr	r6, [fp, #-64]	; 0xffffffc0
   25590:	cmp	r6, #0
   25594:	beq	256a4 <__assert_fail@plt+0x130e0>
   25598:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2559c:	sub	r2, fp, #60	; 0x3c
   255a0:	cmp	r3, r2
   255a4:	strne	r3, [r4, #-16]
   255a8:	beq	254c8 <__assert_fail@plt+0x12f04>
   255ac:	ldr	r2, [fp, #-72]	; 0xffffffb8
   255b0:	str	r2, [r4, #-12]
   255b4:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   255b8:	strb	r3, [r4, #-8]
   255bc:	cmp	r3, #0
   255c0:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   255c4:	strne	r3, [r4, #-4]
   255c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   255cc:	add	r3, r3, r2
   255d0:	str	r3, [fp, #-76]	; 0xffffffb4
   255d4:	mov	r3, #0
   255d8:	strb	r3, [fp, #-80]	; 0xffffffb0
   255dc:	add	r4, r4, #40	; 0x28
   255e0:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   255e4:	cmp	r3, #0
   255e8:	bne	25580 <__assert_fail@plt+0x12fbc>
   255ec:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   255f0:	cmp	r3, #0
   255f4:	bne	254f4 <__assert_fail@plt+0x12f30>
   255f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   255fc:	ldrb	r3, [r1]
   25600:	lsr	r2, r3, #5
   25604:	and	r3, r3, #31
   25608:	ldr	r2, [r7, r2, lsl #2]
   2560c:	lsr	r3, r2, r3
   25610:	tst	r3, #1
   25614:	beq	254e0 <__assert_fail@plt+0x12f1c>
   25618:	str	r5, [fp, #-72]	; 0xffffffb8
   2561c:	ldrb	r3, [r1]
   25620:	str	r3, [fp, #-64]	; 0xffffffc0
   25624:	strb	r5, [fp, #-68]	; 0xffffffbc
   25628:	b	2557c <__assert_fail@plt+0x12fb8>
   2562c:	movw	r3, #36204	; 0x8d6c
   25630:	movt	r3, #4
   25634:	mov	r2, #143	; 0x8f
   25638:	movw	r1, #36224	; 0x8d80
   2563c:	movt	r1, #4
   25640:	movw	r0, #36236	; 0x8d8c
   25644:	movt	r0, #4
   25648:	bl	125c4 <__assert_fail@plt>
   2564c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25650:	bl	122d0 <strlen@plt>
   25654:	str	r0, [fp, #-72]	; 0xffffffb8
   25658:	mov	r3, #0
   2565c:	strb	r3, [fp, #-68]	; 0xffffffbc
   25660:	b	2557c <__assert_fail@plt+0x12fb8>
   25664:	movw	r3, #36204	; 0x8d6c
   25668:	movt	r3, #4
   2566c:	mov	r2, #171	; 0xab
   25670:	movw	r1, #36224	; 0x8d80
   25674:	movt	r1, #4
   25678:	movw	r0, #36260	; 0x8da4
   2567c:	movt	r0, #4
   25680:	bl	125c4 <__assert_fail@plt>
   25684:	movw	r3, #36204	; 0x8d6c
   25688:	movt	r3, #4
   2568c:	mov	r2, #172	; 0xac
   25690:	movw	r1, #36224	; 0x8d80
   25694:	movt	r1, #4
   25698:	movw	r0, #36284	; 0x8dbc
   2569c:	movt	r0, #4
   256a0:	bl	125c4 <__assert_fail@plt>
   256a4:	str	r3, [fp, #-156]	; 0xffffff64
   256a8:	mov	r3, #1
   256ac:	str	r3, [r9, #4]
   256b0:	ldr	r3, [fp, #-152]	; 0xffffff68
   256b4:	cmp	r3, #2
   256b8:	bls	25788 <__assert_fail@plt+0x131c4>
   256bc:	mov	r7, r8
   256c0:	mov	r4, r6
   256c4:	mov	sl, #2
   256c8:	str	r6, [fp, #-168]	; 0xffffff58
   256cc:	b	25770 <__assert_fail@plt+0x131ac>
   256d0:	ldr	r2, [r5, #44]	; 0x2c
   256d4:	add	r3, r4, r4, lsl #2
   256d8:	add	r1, r8, r3, lsl #3
   256dc:	ldr	r1, [r1, #4]
   256e0:	cmp	r2, r1
   256e4:	movne	r0, #0
   256e8:	beq	25738 <__assert_fail@plt+0x13174>
   256ec:	cmp	r0, #0
   256f0:	bne	25750 <__assert_fail@plt+0x1318c>
   256f4:	cmp	r4, #0
   256f8:	beq	2577c <__assert_fail@plt+0x131b8>
   256fc:	ldr	r3, [r9, r4, lsl #2]
   25700:	sub	r4, r4, r3
   25704:	cmp	r6, #0
   25708:	beq	256d0 <__assert_fail@plt+0x1310c>
   2570c:	add	r3, r4, r4, lsl #2
   25710:	add	r3, r8, r3, lsl #3
   25714:	ldrb	r2, [r3, #8]
   25718:	cmp	r2, #0
   2571c:	beq	256d0 <__assert_fail@plt+0x1310c>
   25720:	ldr	r0, [r5, #52]	; 0x34
   25724:	ldr	r3, [r3, #12]
   25728:	cmp	r0, r3
   2572c:	movne	r0, #0
   25730:	moveq	r0, #1
   25734:	b	256ec <__assert_fail@plt+0x13128>
   25738:	ldr	r1, [r8, r3, lsl #3]
   2573c:	ldr	r0, [r5, #40]	; 0x28
   25740:	bl	12060 <memcmp@plt>
   25744:	clz	r0, r0
   25748:	lsr	r0, r0, #5
   2574c:	b	256ec <__assert_fail@plt+0x13128>
   25750:	add	r4, r4, #1
   25754:	sub	r3, sl, r4
   25758:	str	r3, [r9, sl, lsl #2]
   2575c:	add	sl, sl, #1
   25760:	add	r7, r7, #40	; 0x28
   25764:	ldr	r3, [fp, #-152]	; 0xffffff68
   25768:	cmp	r3, sl
   2576c:	beq	25784 <__assert_fail@plt+0x131c0>
   25770:	mov	r5, r7
   25774:	ldrb	r6, [r7, #48]	; 0x30
   25778:	b	25704 <__assert_fail@plt+0x13140>
   2577c:	str	sl, [r9, sl, lsl #2]
   25780:	b	2575c <__assert_fail@plt+0x13198>
   25784:	ldr	r6, [fp, #-168]	; 0xffffff58
   25788:	mov	r3, #0
   2578c:	ldr	r2, [fp, #-160]	; 0xffffff60
   25790:	str	r3, [r2]
   25794:	ldr	r2, [fp, #-164]	; 0xffffff5c
   25798:	str	r2, [fp, #-132]	; 0xffffff7c
   2579c:	strb	r3, [fp, #-148]	; 0xffffff6c
   257a0:	mov	r0, #0
   257a4:	mov	r1, #0
   257a8:	strd	r0, [fp, #-144]	; 0xffffff70
   257ac:	strb	r3, [fp, #-136]	; 0xffffff78
   257b0:	str	r2, [fp, #-76]	; 0xffffffb4
   257b4:	strb	r3, [fp, #-92]	; 0xffffffa4
   257b8:	strd	r0, [fp, #-88]	; 0xffffffa8
   257bc:	strb	r3, [fp, #-80]	; 0xffffffb0
   257c0:	mov	r5, #1
   257c4:	movw	sl, #42588	; 0xa65c
   257c8:	movt	sl, #4
   257cc:	b	25cf8 <__assert_fail@plt+0x13734>
   257d0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   257d4:	ldr	r0, [r3]
   257d8:	bl	12060 <memcmp@plt>
   257dc:	clz	r0, r0
   257e0:	lsr	r0, r0, #5
   257e4:	b	25cc8 <__assert_fail@plt+0x13704>
   257e8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   257ec:	ldr	r2, [fp, #-160]	; 0xffffff60
   257f0:	str	r3, [r2]
   257f4:	mov	r0, r8
   257f8:	bl	42088 <__assert_fail@plt+0x2fac4>
   257fc:	ldr	r0, [fp, #-156]	; 0xffffff64
   25800:	sub	sp, fp, #32
   25804:	ldrd	r4, [sp]
   25808:	ldrd	r6, [sp, #8]
   2580c:	ldrd	r8, [sp, #16]
   25810:	ldrd	sl, [sp, #24]
   25814:	add	sp, sp, #32
   25818:	pop	{pc}		; (ldr pc, [sp], #4)
   2581c:	cmp	r6, #0
   25820:	bne	258b8 <__assert_fail@plt+0x132f4>
   25824:	ldrb	r3, [fp, #-136]	; 0xffffff78
   25828:	cmp	r3, #0
   2582c:	bne	25870 <__assert_fail@plt+0x132ac>
   25830:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   25834:	cmp	r3, #0
   25838:	bne	25a80 <__assert_fail@plt+0x134bc>
   2583c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   25840:	ldrb	r3, [r1]
   25844:	lsr	r2, r3, #5
   25848:	and	r3, r3, #31
   2584c:	ldr	r2, [sl, r2, lsl #2]
   25850:	lsr	r3, r2, r3
   25854:	tst	r3, #1
   25858:	beq	25a6c <__assert_fail@plt+0x134a8>
   2585c:	str	r5, [fp, #-128]	; 0xffffff80
   25860:	ldrb	r3, [r1]
   25864:	str	r3, [fp, #-120]	; 0xffffff88
   25868:	strb	r5, [fp, #-124]	; 0xffffff84
   2586c:	strb	r5, [fp, #-136]	; 0xffffff78
   25870:	ldrb	r3, [fp, #-124]	; 0xffffff84
   25874:	cmp	r3, #0
   25878:	beq	25888 <__assert_fail@plt+0x132c4>
   2587c:	ldr	r3, [fp, #-120]	; 0xffffff88
   25880:	cmp	r3, #0
   25884:	beq	25b84 <__assert_fail@plt+0x135c0>
   25888:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2588c:	ldr	r2, [fp, #-128]	; 0xffffff80
   25890:	add	r3, r3, r2
   25894:	str	r3, [fp, #-132]	; 0xffffff7c
   25898:	mov	r2, #0
   2589c:	strb	r2, [fp, #-136]	; 0xffffff78
   258a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   258a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   258a8:	add	r3, r3, r1
   258ac:	str	r3, [fp, #-76]	; 0xffffffb4
   258b0:	strb	r2, [fp, #-80]	; 0xffffffb0
   258b4:	b	25cf8 <__assert_fail@plt+0x13734>
   258b8:	ldr	r4, [r9, r6, lsl #2]
   258bc:	sub	r6, r6, r4
   258c0:	cmp	r4, #0
   258c4:	bne	259a4 <__assert_fail@plt+0x133e0>
   258c8:	b	25cf8 <__assert_fail@plt+0x13734>
   258cc:	sub	r0, fp, #144	; 0x90
   258d0:	bl	1203c <mbsinit@plt>
   258d4:	cmp	r0, #0
   258d8:	beq	259f0 <__assert_fail@plt+0x1342c>
   258dc:	strb	r5, [fp, #-148]	; 0xffffff6c
   258e0:	ldr	r7, [fp, #-132]	; 0xffffff7c
   258e4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   258e8:	mov	r1, r0
   258ec:	mov	r0, r7
   258f0:	bl	2dd58 <__assert_fail@plt+0x1b794>
   258f4:	sub	r3, fp, #144	; 0x90
   258f8:	mov	r2, r0
   258fc:	mov	r1, r7
   25900:	sub	r0, fp, #120	; 0x78
   25904:	bl	32184 <__assert_fail@plt+0x1fbc0>
   25908:	str	r0, [fp, #-128]	; 0xffffff80
   2590c:	cmn	r0, #1
   25910:	streq	r5, [fp, #-128]	; 0xffffff80
   25914:	moveq	r3, #0
   25918:	strbeq	r3, [fp, #-124]	; 0xffffff84
   2591c:	beq	25968 <__assert_fail@plt+0x133a4>
   25920:	cmn	r0, #2
   25924:	beq	25a10 <__assert_fail@plt+0x1344c>
   25928:	cmp	r0, #0
   2592c:	bne	25950 <__assert_fail@plt+0x1338c>
   25930:	str	r5, [fp, #-128]	; 0xffffff80
   25934:	ldr	r3, [fp, #-132]	; 0xffffff7c
   25938:	ldrb	r3, [r3]
   2593c:	cmp	r3, #0
   25940:	bne	25a28 <__assert_fail@plt+0x13464>
   25944:	ldr	r3, [fp, #-120]	; 0xffffff88
   25948:	cmp	r3, #0
   2594c:	bne	25a48 <__assert_fail@plt+0x13484>
   25950:	strb	r5, [fp, #-124]	; 0xffffff84
   25954:	sub	r0, fp, #144	; 0x90
   25958:	bl	1203c <mbsinit@plt>
   2595c:	cmp	r0, #0
   25960:	movne	r3, #0
   25964:	strbne	r3, [fp, #-148]	; 0xffffff6c
   25968:	strb	r5, [fp, #-136]	; 0xffffff78
   2596c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   25970:	cmp	r3, #0
   25974:	beq	25984 <__assert_fail@plt+0x133c0>
   25978:	ldr	r3, [fp, #-120]	; 0xffffff88
   2597c:	cmp	r3, #0
   25980:	beq	25a68 <__assert_fail@plt+0x134a4>
   25984:	ldr	r3, [fp, #-132]	; 0xffffff7c
   25988:	ldr	r2, [fp, #-128]	; 0xffffff80
   2598c:	add	r3, r3, r2
   25990:	str	r3, [fp, #-132]	; 0xffffff7c
   25994:	mov	r3, #0
   25998:	strb	r3, [fp, #-136]	; 0xffffff78
   2599c:	subs	r4, r4, #1
   259a0:	beq	25cf8 <__assert_fail@plt+0x13734>
   259a4:	ldrb	r3, [fp, #-136]	; 0xffffff78
   259a8:	cmp	r3, #0
   259ac:	bne	2596c <__assert_fail@plt+0x133a8>
   259b0:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   259b4:	cmp	r3, #0
   259b8:	bne	258e0 <__assert_fail@plt+0x1331c>
   259bc:	ldr	r1, [fp, #-132]	; 0xffffff7c
   259c0:	ldrb	r3, [r1]
   259c4:	lsr	r2, r3, #5
   259c8:	and	r3, r3, #31
   259cc:	ldr	r2, [sl, r2, lsl #2]
   259d0:	lsr	r3, r2, r3
   259d4:	tst	r3, #1
   259d8:	beq	258cc <__assert_fail@plt+0x13308>
   259dc:	str	r5, [fp, #-128]	; 0xffffff80
   259e0:	ldrb	r3, [r1]
   259e4:	str	r3, [fp, #-120]	; 0xffffff88
   259e8:	strb	r5, [fp, #-124]	; 0xffffff84
   259ec:	b	25968 <__assert_fail@plt+0x133a4>
   259f0:	movw	r3, #36204	; 0x8d6c
   259f4:	movt	r3, #4
   259f8:	mov	r2, #143	; 0x8f
   259fc:	movw	r1, #36224	; 0x8d80
   25a00:	movt	r1, #4
   25a04:	movw	r0, #36236	; 0x8d8c
   25a08:	movt	r0, #4
   25a0c:	bl	125c4 <__assert_fail@plt>
   25a10:	ldr	r0, [fp, #-132]	; 0xffffff7c
   25a14:	bl	122d0 <strlen@plt>
   25a18:	str	r0, [fp, #-128]	; 0xffffff80
   25a1c:	mov	r3, #0
   25a20:	strb	r3, [fp, #-124]	; 0xffffff84
   25a24:	b	25968 <__assert_fail@plt+0x133a4>
   25a28:	movw	r3, #36204	; 0x8d6c
   25a2c:	movt	r3, #4
   25a30:	mov	r2, #171	; 0xab
   25a34:	movw	r1, #36224	; 0x8d80
   25a38:	movt	r1, #4
   25a3c:	movw	r0, #36260	; 0x8da4
   25a40:	movt	r0, #4
   25a44:	bl	125c4 <__assert_fail@plt>
   25a48:	movw	r3, #36204	; 0x8d6c
   25a4c:	movt	r3, #4
   25a50:	mov	r2, #172	; 0xac
   25a54:	movw	r1, #36224	; 0x8d80
   25a58:	movt	r1, #4
   25a5c:	movw	r0, #36284	; 0x8dbc
   25a60:	movt	r0, #4
   25a64:	bl	125c4 <__assert_fail@plt>
   25a68:	bl	12570 <abort@plt>
   25a6c:	sub	r0, fp, #144	; 0x90
   25a70:	bl	1203c <mbsinit@plt>
   25a74:	cmp	r0, #0
   25a78:	beq	25b0c <__assert_fail@plt+0x13548>
   25a7c:	strb	r5, [fp, #-148]	; 0xffffff6c
   25a80:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25a84:	bl	12168 <__ctype_get_mb_cur_max@plt>
   25a88:	mov	r1, r0
   25a8c:	mov	r0, r4
   25a90:	bl	2dd58 <__assert_fail@plt+0x1b794>
   25a94:	sub	r3, fp, #144	; 0x90
   25a98:	mov	r2, r0
   25a9c:	mov	r1, r4
   25aa0:	sub	r0, fp, #120	; 0x78
   25aa4:	bl	32184 <__assert_fail@plt+0x1fbc0>
   25aa8:	str	r0, [fp, #-128]	; 0xffffff80
   25aac:	cmn	r0, #1
   25ab0:	streq	r5, [fp, #-128]	; 0xffffff80
   25ab4:	moveq	r3, #0
   25ab8:	strbeq	r3, [fp, #-124]	; 0xffffff84
   25abc:	beq	2586c <__assert_fail@plt+0x132a8>
   25ac0:	cmn	r0, #2
   25ac4:	beq	25b2c <__assert_fail@plt+0x13568>
   25ac8:	cmp	r0, #0
   25acc:	bne	25af0 <__assert_fail@plt+0x1352c>
   25ad0:	str	r5, [fp, #-128]	; 0xffffff80
   25ad4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   25ad8:	ldrb	r3, [r3]
   25adc:	cmp	r3, #0
   25ae0:	bne	25b44 <__assert_fail@plt+0x13580>
   25ae4:	ldr	r3, [fp, #-120]	; 0xffffff88
   25ae8:	cmp	r3, #0
   25aec:	bne	25b64 <__assert_fail@plt+0x135a0>
   25af0:	strb	r5, [fp, #-124]	; 0xffffff84
   25af4:	sub	r0, fp, #144	; 0x90
   25af8:	bl	1203c <mbsinit@plt>
   25afc:	cmp	r0, #0
   25b00:	movne	r3, #0
   25b04:	strbne	r3, [fp, #-148]	; 0xffffff6c
   25b08:	b	2586c <__assert_fail@plt+0x132a8>
   25b0c:	movw	r3, #36204	; 0x8d6c
   25b10:	movt	r3, #4
   25b14:	mov	r2, #143	; 0x8f
   25b18:	movw	r1, #36224	; 0x8d80
   25b1c:	movt	r1, #4
   25b20:	movw	r0, #36236	; 0x8d8c
   25b24:	movt	r0, #4
   25b28:	bl	125c4 <__assert_fail@plt>
   25b2c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   25b30:	bl	122d0 <strlen@plt>
   25b34:	str	r0, [fp, #-128]	; 0xffffff80
   25b38:	mov	r3, #0
   25b3c:	strb	r3, [fp, #-124]	; 0xffffff84
   25b40:	b	2586c <__assert_fail@plt+0x132a8>
   25b44:	movw	r3, #36204	; 0x8d6c
   25b48:	movt	r3, #4
   25b4c:	mov	r2, #171	; 0xab
   25b50:	movw	r1, #36224	; 0x8d80
   25b54:	movt	r1, #4
   25b58:	movw	r0, #36260	; 0x8da4
   25b5c:	movt	r0, #4
   25b60:	bl	125c4 <__assert_fail@plt>
   25b64:	movw	r3, #36204	; 0x8d6c
   25b68:	movt	r3, #4
   25b6c:	mov	r2, #172	; 0xac
   25b70:	movw	r1, #36224	; 0x8d80
   25b74:	movt	r1, #4
   25b78:	movw	r0, #36284	; 0x8dbc
   25b7c:	movt	r0, #4
   25b80:	bl	125c4 <__assert_fail@plt>
   25b84:	bl	12570 <abort@plt>
   25b88:	sub	r0, fp, #88	; 0x58
   25b8c:	bl	1203c <mbsinit@plt>
   25b90:	cmp	r0, #0
   25b94:	beq	25c28 <__assert_fail@plt+0x13664>
   25b98:	strb	r5, [fp, #-92]	; 0xffffffa4
   25b9c:	ldr	r4, [fp, #-76]	; 0xffffffb4
   25ba0:	bl	12168 <__ctype_get_mb_cur_max@plt>
   25ba4:	mov	r1, r0
   25ba8:	mov	r0, r4
   25bac:	bl	2dd58 <__assert_fail@plt+0x1b794>
   25bb0:	sub	r3, fp, #88	; 0x58
   25bb4:	mov	r2, r0
   25bb8:	mov	r1, r4
   25bbc:	sub	r0, fp, #64	; 0x40
   25bc0:	bl	32184 <__assert_fail@plt+0x1fbc0>
   25bc4:	str	r0, [fp, #-72]	; 0xffffffb8
   25bc8:	cmn	r0, #1
   25bcc:	streq	r5, [fp, #-72]	; 0xffffffb8
   25bd0:	moveq	r3, #0
   25bd4:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   25bd8:	beq	25d40 <__assert_fail@plt+0x1377c>
   25bdc:	cmn	r0, #2
   25be0:	beq	25c48 <__assert_fail@plt+0x13684>
   25be4:	cmp	r0, #0
   25be8:	bne	25c0c <__assert_fail@plt+0x13648>
   25bec:	str	r5, [fp, #-72]	; 0xffffffb8
   25bf0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   25bf4:	ldrb	r3, [r3]
   25bf8:	cmp	r3, #0
   25bfc:	bne	25c60 <__assert_fail@plt+0x1369c>
   25c00:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25c04:	cmp	r3, #0
   25c08:	bne	25c80 <__assert_fail@plt+0x136bc>
   25c0c:	strb	r5, [fp, #-68]	; 0xffffffbc
   25c10:	sub	r0, fp, #88	; 0x58
   25c14:	bl	1203c <mbsinit@plt>
   25c18:	cmp	r0, #0
   25c1c:	movne	r3, #0
   25c20:	strbne	r3, [fp, #-92]	; 0xffffffa4
   25c24:	b	25d40 <__assert_fail@plt+0x1377c>
   25c28:	movw	r3, #36204	; 0x8d6c
   25c2c:	movt	r3, #4
   25c30:	mov	r2, #143	; 0x8f
   25c34:	movw	r1, #36224	; 0x8d80
   25c38:	movt	r1, #4
   25c3c:	movw	r0, #36236	; 0x8d8c
   25c40:	movt	r0, #4
   25c44:	bl	125c4 <__assert_fail@plt>
   25c48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25c4c:	bl	122d0 <strlen@plt>
   25c50:	str	r0, [fp, #-72]	; 0xffffffb8
   25c54:	mov	r3, #0
   25c58:	strb	r3, [fp, #-68]	; 0xffffffbc
   25c5c:	b	25d40 <__assert_fail@plt+0x1377c>
   25c60:	movw	r3, #36204	; 0x8d6c
   25c64:	movt	r3, #4
   25c68:	mov	r2, #171	; 0xab
   25c6c:	movw	r1, #36224	; 0x8d80
   25c70:	movt	r1, #4
   25c74:	movw	r0, #36260	; 0x8da4
   25c78:	movt	r0, #4
   25c7c:	bl	125c4 <__assert_fail@plt>
   25c80:	movw	r3, #36204	; 0x8d6c
   25c84:	movt	r3, #4
   25c88:	mov	r2, #172	; 0xac
   25c8c:	movw	r1, #36224	; 0x8d80
   25c90:	movt	r1, #4
   25c94:	movw	r0, #36284	; 0x8dbc
   25c98:	movt	r0, #4
   25c9c:	bl	125c4 <__assert_fail@plt>
   25ca0:	mov	r3, #0
   25ca4:	str	r3, [fp, #-156]	; 0xffffff64
   25ca8:	b	257fc <__assert_fail@plt+0x13238>
   25cac:	add	r3, r6, r6, lsl #2
   25cb0:	add	r3, r8, r3, lsl #3
   25cb4:	ldr	r2, [r3, #4]
   25cb8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   25cbc:	cmp	r2, r1
   25cc0:	movne	r0, #0
   25cc4:	beq	257d0 <__assert_fail@plt+0x1320c>
   25cc8:	cmp	r0, #0
   25ccc:	beq	2581c <__assert_fail@plt+0x13258>
   25cd0:	add	r6, r6, #1
   25cd4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   25cd8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25cdc:	add	r3, r3, r2
   25ce0:	str	r3, [fp, #-76]	; 0xffffffb4
   25ce4:	mov	r3, #0
   25ce8:	strb	r3, [fp, #-80]	; 0xffffffb0
   25cec:	ldr	r3, [fp, #-152]	; 0xffffff68
   25cf0:	cmp	r3, r6
   25cf4:	beq	257e8 <__assert_fail@plt+0x13224>
   25cf8:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   25cfc:	cmp	r3, #0
   25d00:	bne	25d44 <__assert_fail@plt+0x13780>
   25d04:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   25d08:	cmp	r3, #0
   25d0c:	bne	25b9c <__assert_fail@plt+0x135d8>
   25d10:	ldr	r1, [fp, #-76]	; 0xffffffb4
   25d14:	ldrb	r3, [r1]
   25d18:	lsr	r2, r3, #5
   25d1c:	and	r3, r3, #31
   25d20:	ldr	r2, [sl, r2, lsl #2]
   25d24:	lsr	r3, r2, r3
   25d28:	tst	r3, #1
   25d2c:	beq	25b88 <__assert_fail@plt+0x135c4>
   25d30:	str	r5, [fp, #-72]	; 0xffffffb8
   25d34:	ldrb	r3, [r1]
   25d38:	str	r3, [fp, #-64]	; 0xffffffc0
   25d3c:	strb	r5, [fp, #-68]	; 0xffffffbc
   25d40:	strb	r5, [fp, #-80]	; 0xffffffb0
   25d44:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   25d48:	cmp	r3, #0
   25d4c:	beq	25cac <__assert_fail@plt+0x136e8>
   25d50:	ldr	r2, [fp, #-64]	; 0xffffffc0
   25d54:	cmp	r2, #0
   25d58:	beq	257f4 <__assert_fail@plt+0x13230>
   25d5c:	add	r3, r6, r6, lsl #2
   25d60:	add	r3, r8, r3, lsl #3
   25d64:	ldrb	r1, [r3, #8]
   25d68:	cmp	r1, #0
   25d6c:	beq	25cb4 <__assert_fail@plt+0x136f0>
   25d70:	ldr	r0, [r3, #12]
   25d74:	cmp	r0, r2
   25d78:	movne	r0, #0
   25d7c:	moveq	r0, #1
   25d80:	b	25cc8 <__assert_fail@plt+0x13704>
   25d84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25d88:	strd	r6, [sp, #8]
   25d8c:	strd	r8, [sp, #16]
   25d90:	strd	sl, [sp, #24]
   25d94:	str	lr, [sp, #32]
   25d98:	sub	sp, sp, #292	; 0x124
   25d9c:	mov	r5, r0
   25da0:	mov	r7, r1
   25da4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   25da8:	cmp	r0, #1
   25dac:	bhi	25dec <__assert_fail@plt+0x13828>
   25db0:	ldrb	r8, [r7]
   25db4:	cmp	r8, #0
   25db8:	moveq	r0, r5
   25dbc:	beq	26798 <__assert_fail@plt+0x141d4>
   25dc0:	add	r3, r7, #1
   25dc4:	str	r3, [sp, #4]
   25dc8:	ldrb	r3, [r5]
   25dcc:	cmp	r3, #0
   25dd0:	beq	26b40 <__assert_fail@plt+0x1457c>
   25dd4:	mov	sl, r7
   25dd8:	mov	ip, #0
   25ddc:	mov	r6, ip
   25de0:	mov	r9, ip
   25de4:	mov	lr, #1
   25de8:	b	26a38 <__assert_fail@plt+0x14474>
   25dec:	str	r7, [sp, #24]
   25df0:	mov	r3, #0
   25df4:	strb	r3, [sp, #8]
   25df8:	mov	r0, #0
   25dfc:	mov	r1, #0
   25e00:	strd	r0, [sp, #12]
   25e04:	strb	r3, [sp, #20]
   25e08:	ldrb	r1, [r7]
   25e0c:	movw	r2, #42588	; 0xa65c
   25e10:	movt	r2, #4
   25e14:	lsr	r3, r1, #5
   25e18:	and	r0, r1, #31
   25e1c:	ldr	r3, [r2, r3, lsl #2]
   25e20:	lsr	r3, r3, r0
   25e24:	tst	r3, #1
   25e28:	beq	25ea0 <__assert_fail@plt+0x138dc>
   25e2c:	mov	r3, #1
   25e30:	str	r3, [sp, #28]
   25e34:	str	r1, [sp, #36]	; 0x24
   25e38:	strb	r3, [sp, #32]
   25e3c:	mov	r3, #1
   25e40:	strb	r3, [sp, #20]
   25e44:	ldrb	r3, [sp, #32]
   25e48:	cmp	r3, #0
   25e4c:	beq	25e5c <__assert_fail@plt+0x13898>
   25e50:	ldr	r3, [sp, #36]	; 0x24
   25e54:	cmp	r3, #0
   25e58:	beq	26a20 <__assert_fail@plt+0x1445c>
   25e5c:	str	r7, [sp, #80]	; 0x50
   25e60:	mov	r6, #0
   25e64:	strb	r6, [sp, #64]	; 0x40
   25e68:	mov	r2, #0
   25e6c:	mov	r3, #0
   25e70:	strd	r2, [sp, #68]	; 0x44
   25e74:	strb	r6, [sp, #76]	; 0x4c
   25e78:	str	r5, [sp, #136]	; 0x88
   25e7c:	strb	r6, [sp, #120]	; 0x78
   25e80:	strd	r2, [sp, #124]	; 0x7c
   25e84:	strb	r6, [sp, #132]	; 0x84
   25e88:	mov	sl, r6
   25e8c:	str	r6, [sp]
   25e90:	mov	fp, #1
   25e94:	movw	r8, #42588	; 0xa65c
   25e98:	movt	r8, #4
   25e9c:	b	26bdc <__assert_fail@plt+0x14618>
   25ea0:	add	r0, sp, #12
   25ea4:	bl	1203c <mbsinit@plt>
   25ea8:	cmp	r0, #0
   25eac:	beq	25f3c <__assert_fail@plt+0x13978>
   25eb0:	mov	r3, #1
   25eb4:	strb	r3, [sp, #8]
   25eb8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   25ebc:	mov	r1, r0
   25ec0:	mov	r0, r7
   25ec4:	bl	2dd58 <__assert_fail@plt+0x1b794>
   25ec8:	add	r3, sp, #12
   25ecc:	mov	r2, r0
   25ed0:	mov	r1, r7
   25ed4:	add	r0, sp, #36	; 0x24
   25ed8:	bl	32184 <__assert_fail@plt+0x1fbc0>
   25edc:	str	r0, [sp, #28]
   25ee0:	cmn	r0, #1
   25ee4:	beq	25f5c <__assert_fail@plt+0x13998>
   25ee8:	cmn	r0, #2
   25eec:	beq	25f70 <__assert_fail@plt+0x139ac>
   25ef0:	cmp	r0, #0
   25ef4:	bne	25f1c <__assert_fail@plt+0x13958>
   25ef8:	mov	r3, #1
   25efc:	str	r3, [sp, #28]
   25f00:	ldr	r3, [sp, #24]
   25f04:	ldrb	r3, [r3]
   25f08:	cmp	r3, #0
   25f0c:	bne	25f88 <__assert_fail@plt+0x139c4>
   25f10:	ldr	r3, [sp, #36]	; 0x24
   25f14:	cmp	r3, #0
   25f18:	bne	25fa8 <__assert_fail@plt+0x139e4>
   25f1c:	mov	r3, #1
   25f20:	strb	r3, [sp, #32]
   25f24:	add	r0, sp, #12
   25f28:	bl	1203c <mbsinit@plt>
   25f2c:	cmp	r0, #0
   25f30:	movne	r3, #0
   25f34:	strbne	r3, [sp, #8]
   25f38:	b	25e3c <__assert_fail@plt+0x13878>
   25f3c:	movw	r3, #36204	; 0x8d6c
   25f40:	movt	r3, #4
   25f44:	mov	r2, #143	; 0x8f
   25f48:	movw	r1, #36224	; 0x8d80
   25f4c:	movt	r1, #4
   25f50:	movw	r0, #36236	; 0x8d8c
   25f54:	movt	r0, #4
   25f58:	bl	125c4 <__assert_fail@plt>
   25f5c:	mov	r3, #1
   25f60:	str	r3, [sp, #28]
   25f64:	mov	r3, #0
   25f68:	strb	r3, [sp, #32]
   25f6c:	b	25e3c <__assert_fail@plt+0x13878>
   25f70:	ldr	r0, [sp, #24]
   25f74:	bl	122d0 <strlen@plt>
   25f78:	str	r0, [sp, #28]
   25f7c:	mov	r3, #0
   25f80:	strb	r3, [sp, #32]
   25f84:	b	25e3c <__assert_fail@plt+0x13878>
   25f88:	movw	r3, #36204	; 0x8d6c
   25f8c:	movt	r3, #4
   25f90:	mov	r2, #171	; 0xab
   25f94:	movw	r1, #36224	; 0x8d80
   25f98:	movt	r1, #4
   25f9c:	movw	r0, #36260	; 0x8da4
   25fa0:	movt	r0, #4
   25fa4:	bl	125c4 <__assert_fail@plt>
   25fa8:	movw	r3, #36204	; 0x8d6c
   25fac:	movt	r3, #4
   25fb0:	mov	r2, #172	; 0xac
   25fb4:	movw	r1, #36224	; 0x8d80
   25fb8:	movt	r1, #4
   25fbc:	movw	r0, #36284	; 0x8dbc
   25fc0:	movt	r0, #4
   25fc4:	bl	125c4 <__assert_fail@plt>
   25fc8:	add	r0, sp, #124	; 0x7c
   25fcc:	bl	1203c <mbsinit@plt>
   25fd0:	cmp	r0, #0
   25fd4:	beq	26068 <__assert_fail@plt+0x13aa4>
   25fd8:	mov	r3, #1
   25fdc:	strb	r3, [sp, #120]	; 0x78
   25fe0:	ldr	r4, [sp, #136]	; 0x88
   25fe4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   25fe8:	mov	r1, r0
   25fec:	mov	r0, r4
   25ff0:	bl	2dd58 <__assert_fail@plt+0x1b794>
   25ff4:	add	r3, sp, #124	; 0x7c
   25ff8:	mov	r2, r0
   25ffc:	mov	r1, r4
   26000:	add	r0, sp, #148	; 0x94
   26004:	bl	32184 <__assert_fail@plt+0x1fbc0>
   26008:	str	r0, [sp, #140]	; 0x8c
   2600c:	cmn	r0, #1
   26010:	beq	26088 <__assert_fail@plt+0x13ac4>
   26014:	cmn	r0, #2
   26018:	beq	2609c <__assert_fail@plt+0x13ad8>
   2601c:	cmp	r0, #0
   26020:	bne	26048 <__assert_fail@plt+0x13a84>
   26024:	mov	r3, #1
   26028:	str	r3, [sp, #140]	; 0x8c
   2602c:	ldr	r3, [sp, #136]	; 0x88
   26030:	ldrb	r3, [r3]
   26034:	cmp	r3, #0
   26038:	bne	260b4 <__assert_fail@plt+0x13af0>
   2603c:	ldr	r3, [sp, #148]	; 0x94
   26040:	cmp	r3, #0
   26044:	bne	260d4 <__assert_fail@plt+0x13b10>
   26048:	mov	r3, #1
   2604c:	strb	r3, [sp, #144]	; 0x90
   26050:	add	r0, sp, #124	; 0x7c
   26054:	bl	1203c <mbsinit@plt>
   26058:	cmp	r0, #0
   2605c:	movne	r3, #0
   26060:	strbne	r3, [sp, #120]	; 0x78
   26064:	b	26c28 <__assert_fail@plt+0x14664>
   26068:	movw	r3, #36204	; 0x8d6c
   2606c:	movt	r3, #4
   26070:	mov	r2, #143	; 0x8f
   26074:	movw	r1, #36224	; 0x8d80
   26078:	movt	r1, #4
   2607c:	movw	r0, #36236	; 0x8d8c
   26080:	movt	r0, #4
   26084:	bl	125c4 <__assert_fail@plt>
   26088:	mov	r3, #1
   2608c:	str	r3, [sp, #140]	; 0x8c
   26090:	mov	r3, #0
   26094:	strb	r3, [sp, #144]	; 0x90
   26098:	b	26c28 <__assert_fail@plt+0x14664>
   2609c:	ldr	r0, [sp, #136]	; 0x88
   260a0:	bl	122d0 <strlen@plt>
   260a4:	str	r0, [sp, #140]	; 0x8c
   260a8:	mov	r3, #0
   260ac:	strb	r3, [sp, #144]	; 0x90
   260b0:	b	26c28 <__assert_fail@plt+0x14664>
   260b4:	movw	r3, #36204	; 0x8d6c
   260b8:	movt	r3, #4
   260bc:	mov	r2, #171	; 0xab
   260c0:	movw	r1, #36224	; 0x8d80
   260c4:	movt	r1, #4
   260c8:	movw	r0, #36260	; 0x8da4
   260cc:	movt	r0, #4
   260d0:	bl	125c4 <__assert_fail@plt>
   260d4:	movw	r3, #36204	; 0x8d6c
   260d8:	movt	r3, #4
   260dc:	mov	r2, #172	; 0xac
   260e0:	movw	r1, #36224	; 0x8d80
   260e4:	movt	r1, #4
   260e8:	movw	r0, #36284	; 0x8dbc
   260ec:	movt	r0, #4
   260f0:	bl	125c4 <__assert_fail@plt>
   260f4:	mov	r0, #0
   260f8:	b	26798 <__assert_fail@plt+0x141d4>
   260fc:	add	r0, sp, #68	; 0x44
   26100:	bl	1203c <mbsinit@plt>
   26104:	cmp	r0, #0
   26108:	beq	26220 <__assert_fail@plt+0x13c5c>
   2610c:	strb	r9, [sp, #64]	; 0x40
   26110:	ldr	fp, [sp, #80]	; 0x50
   26114:	bl	12168 <__ctype_get_mb_cur_max@plt>
   26118:	mov	r1, r0
   2611c:	mov	r0, fp
   26120:	bl	2dd58 <__assert_fail@plt+0x1b794>
   26124:	add	r3, sp, #68	; 0x44
   26128:	mov	r2, r0
   2612c:	mov	r1, fp
   26130:	add	r0, sp, #92	; 0x5c
   26134:	bl	32184 <__assert_fail@plt+0x1fbc0>
   26138:	str	r0, [sp, #84]	; 0x54
   2613c:	cmn	r0, #1
   26140:	streq	r9, [sp, #84]	; 0x54
   26144:	moveq	r3, #0
   26148:	strbeq	r3, [sp, #88]	; 0x58
   2614c:	beq	26198 <__assert_fail@plt+0x13bd4>
   26150:	cmn	r0, #2
   26154:	beq	26240 <__assert_fail@plt+0x13c7c>
   26158:	cmp	r0, #0
   2615c:	bne	26180 <__assert_fail@plt+0x13bbc>
   26160:	str	r9, [sp, #84]	; 0x54
   26164:	ldr	r3, [sp, #80]	; 0x50
   26168:	ldrb	r3, [r3]
   2616c:	cmp	r3, #0
   26170:	bne	26258 <__assert_fail@plt+0x13c94>
   26174:	ldr	r3, [sp, #92]	; 0x5c
   26178:	cmp	r3, #0
   2617c:	bne	26278 <__assert_fail@plt+0x13cb4>
   26180:	strb	r9, [sp, #88]	; 0x58
   26184:	add	r0, sp, #68	; 0x44
   26188:	bl	1203c <mbsinit@plt>
   2618c:	cmp	r0, #0
   26190:	movne	r3, #0
   26194:	strbne	r3, [sp, #64]	; 0x40
   26198:	strb	r9, [sp, #76]	; 0x4c
   2619c:	ldrb	r3, [sp, #88]	; 0x58
   261a0:	cmp	r3, #0
   261a4:	beq	261b4 <__assert_fail@plt+0x13bf0>
   261a8:	ldr	r3, [sp, #92]	; 0x5c
   261ac:	cmp	r3, #0
   261b0:	beq	26b60 <__assert_fail@plt+0x1459c>
   261b4:	ldr	r3, [sp, #80]	; 0x50
   261b8:	ldr	r2, [sp, #84]	; 0x54
   261bc:	add	r3, r3, r2
   261c0:	str	r3, [sp, #80]	; 0x50
   261c4:	mov	r3, #0
   261c8:	strb	r3, [sp, #76]	; 0x4c
   261cc:	subs	r4, r4, #1
   261d0:	beq	262a4 <__assert_fail@plt+0x13ce0>
   261d4:	ldrb	r3, [sp, #76]	; 0x4c
   261d8:	cmp	r3, #0
   261dc:	bne	2619c <__assert_fail@plt+0x13bd8>
   261e0:	ldrb	r3, [sp, #64]	; 0x40
   261e4:	cmp	r3, #0
   261e8:	bne	26110 <__assert_fail@plt+0x13b4c>
   261ec:	ldr	r1, [sp, #80]	; 0x50
   261f0:	ldrb	r3, [r1]
   261f4:	lsr	r2, r3, #5
   261f8:	and	r3, r3, #31
   261fc:	ldr	r2, [r8, r2, lsl #2]
   26200:	lsr	r3, r2, r3
   26204:	tst	r3, #1
   26208:	beq	260fc <__assert_fail@plt+0x13b38>
   2620c:	str	r9, [sp, #84]	; 0x54
   26210:	ldrb	r3, [r1]
   26214:	str	r3, [sp, #92]	; 0x5c
   26218:	strb	r9, [sp, #88]	; 0x58
   2621c:	b	26198 <__assert_fail@plt+0x13bd4>
   26220:	movw	r3, #36204	; 0x8d6c
   26224:	movt	r3, #4
   26228:	mov	r2, #143	; 0x8f
   2622c:	movw	r1, #36224	; 0x8d80
   26230:	movt	r1, #4
   26234:	movw	r0, #36236	; 0x8d8c
   26238:	movt	r0, #4
   2623c:	bl	125c4 <__assert_fail@plt>
   26240:	ldr	r0, [sp, #80]	; 0x50
   26244:	bl	122d0 <strlen@plt>
   26248:	str	r0, [sp, #84]	; 0x54
   2624c:	mov	r3, #0
   26250:	strb	r3, [sp, #88]	; 0x58
   26254:	b	26198 <__assert_fail@plt+0x13bd4>
   26258:	movw	r3, #36204	; 0x8d6c
   2625c:	movt	r3, #4
   26260:	mov	r2, #171	; 0xab
   26264:	movw	r1, #36224	; 0x8d80
   26268:	movt	r1, #4
   2626c:	movw	r0, #36260	; 0x8da4
   26270:	movt	r0, #4
   26274:	bl	125c4 <__assert_fail@plt>
   26278:	movw	r3, #36204	; 0x8d6c
   2627c:	movt	r3, #4
   26280:	mov	r2, #172	; 0xac
   26284:	movw	r1, #36224	; 0x8d80
   26288:	movt	r1, #4
   2628c:	movw	r0, #36284	; 0x8dbc
   26290:	movt	r0, #4
   26294:	bl	125c4 <__assert_fail@plt>
   26298:	ldrb	r3, [sp, #76]	; 0x4c
   2629c:	cmp	r3, #0
   262a0:	bne	262ec <__assert_fail@plt+0x13d28>
   262a4:	ldrb	r3, [sp, #64]	; 0x40
   262a8:	cmp	r3, #0
   262ac:	bne	26330 <__assert_fail@plt+0x13d6c>
   262b0:	ldr	r1, [sp, #80]	; 0x50
   262b4:	ldrb	r3, [r1]
   262b8:	lsr	r2, r3, #5
   262bc:	and	r3, r3, #31
   262c0:	ldr	r2, [r8, r2, lsl #2]
   262c4:	lsr	r3, r2, r3
   262c8:	tst	r3, #1
   262cc:	beq	26318 <__assert_fail@plt+0x13d54>
   262d0:	mov	r3, #1
   262d4:	str	r3, [sp, #84]	; 0x54
   262d8:	ldrb	r2, [r1]
   262dc:	str	r2, [sp, #92]	; 0x5c
   262e0:	strb	r3, [sp, #88]	; 0x58
   262e4:	mov	r3, #1
   262e8:	strb	r3, [sp, #76]	; 0x4c
   262ec:	ldrb	fp, [sp, #88]	; 0x58
   262f0:	cmp	fp, #0
   262f4:	moveq	fp, #1
   262f8:	bne	26444 <__assert_fail@plt+0x13e80>
   262fc:	add	r2, r6, #1
   26300:	ldrb	r3, [sp, #144]	; 0x90
   26304:	cmp	r3, #0
   26308:	beq	26454 <__assert_fail@plt+0x13e90>
   2630c:	str	r6, [sp]
   26310:	mov	r6, r2
   26314:	b	26c60 <__assert_fail@plt+0x1469c>
   26318:	add	r0, sp, #68	; 0x44
   2631c:	bl	1203c <mbsinit@plt>
   26320:	cmp	r0, #0
   26324:	beq	263b8 <__assert_fail@plt+0x13df4>
   26328:	mov	r3, #1
   2632c:	strb	r3, [sp, #64]	; 0x40
   26330:	ldr	r4, [sp, #80]	; 0x50
   26334:	bl	12168 <__ctype_get_mb_cur_max@plt>
   26338:	mov	r1, r0
   2633c:	mov	r0, r4
   26340:	bl	2dd58 <__assert_fail@plt+0x1b794>
   26344:	add	r3, sp, #68	; 0x44
   26348:	mov	r2, r0
   2634c:	mov	r1, r4
   26350:	add	r0, sp, #92	; 0x5c
   26354:	bl	32184 <__assert_fail@plt+0x1fbc0>
   26358:	str	r0, [sp, #84]	; 0x54
   2635c:	cmn	r0, #1
   26360:	beq	263d8 <__assert_fail@plt+0x13e14>
   26364:	cmn	r0, #2
   26368:	beq	263ec <__assert_fail@plt+0x13e28>
   2636c:	cmp	r0, #0
   26370:	bne	26398 <__assert_fail@plt+0x13dd4>
   26374:	mov	r3, #1
   26378:	str	r3, [sp, #84]	; 0x54
   2637c:	ldr	r3, [sp, #80]	; 0x50
   26380:	ldrb	r3, [r3]
   26384:	cmp	r3, #0
   26388:	bne	26404 <__assert_fail@plt+0x13e40>
   2638c:	ldr	r3, [sp, #92]	; 0x5c
   26390:	cmp	r3, #0
   26394:	bne	26424 <__assert_fail@plt+0x13e60>
   26398:	mov	r3, #1
   2639c:	strb	r3, [sp, #88]	; 0x58
   263a0:	add	r0, sp, #68	; 0x44
   263a4:	bl	1203c <mbsinit@plt>
   263a8:	cmp	r0, #0
   263ac:	movne	r3, #0
   263b0:	strbne	r3, [sp, #64]	; 0x40
   263b4:	b	262e4 <__assert_fail@plt+0x13d20>
   263b8:	movw	r3, #36204	; 0x8d6c
   263bc:	movt	r3, #4
   263c0:	mov	r2, #143	; 0x8f
   263c4:	movw	r1, #36224	; 0x8d80
   263c8:	movt	r1, #4
   263cc:	movw	r0, #36236	; 0x8d8c
   263d0:	movt	r0, #4
   263d4:	bl	125c4 <__assert_fail@plt>
   263d8:	mov	r3, #1
   263dc:	str	r3, [sp, #84]	; 0x54
   263e0:	mov	r3, #0
   263e4:	strb	r3, [sp, #88]	; 0x58
   263e8:	b	262e4 <__assert_fail@plt+0x13d20>
   263ec:	ldr	r0, [sp, #80]	; 0x50
   263f0:	bl	122d0 <strlen@plt>
   263f4:	str	r0, [sp, #84]	; 0x54
   263f8:	mov	r3, #0
   263fc:	strb	r3, [sp, #88]	; 0x58
   26400:	b	262e4 <__assert_fail@plt+0x13d20>
   26404:	movw	r3, #36204	; 0x8d6c
   26408:	movt	r3, #4
   2640c:	mov	r2, #171	; 0xab
   26410:	movw	r1, #36224	; 0x8d80
   26414:	movt	r1, #4
   26418:	movw	r0, #36260	; 0x8da4
   2641c:	movt	r0, #4
   26420:	bl	125c4 <__assert_fail@plt>
   26424:	movw	r3, #36204	; 0x8d6c
   26428:	movt	r3, #4
   2642c:	mov	r2, #172	; 0xac
   26430:	movw	r1, #36224	; 0x8d80
   26434:	movt	r1, #4
   26438:	movw	r0, #36284	; 0x8dbc
   2643c:	movt	r0, #4
   26440:	bl	125c4 <__assert_fail@plt>
   26444:	ldr	r3, [sp, #92]	; 0x5c
   26448:	cmp	r3, #0
   2644c:	bne	262fc <__assert_fail@plt+0x13d38>
   26450:	b	26b6c <__assert_fail@plt+0x145a8>
   26454:	str	r6, [sp]
   26458:	mov	r6, r2
   2645c:	b	26ba4 <__assert_fail@plt+0x145e0>
   26460:	ldr	r1, [sp, #24]
   26464:	ldr	r0, [sp, #136]	; 0x88
   26468:	bl	12060 <memcmp@plt>
   2646c:	clz	r0, r0
   26470:	lsr	r0, r0, #5
   26474:	b	26bb8 <__assert_fail@plt+0x145f4>
   26478:	ldrd	r2, [sp, #120]	; 0x78
   2647c:	strd	r2, [sp, #176]	; 0xb0
   26480:	ldrd	r2, [sp, #128]	; 0x80
   26484:	strd	r2, [sp, #184]	; 0xb8
   26488:	ldr	r1, [sp, #136]	; 0x88
   2648c:	ldr	r3, [sp, #140]	; 0x8c
   26490:	str	r3, [sp, #196]	; 0xc4
   26494:	ldrd	r2, [sp, #144]	; 0x90
   26498:	strd	r2, [sp, #200]	; 0xc8
   2649c:	ldrd	r2, [sp, #152]	; 0x98
   264a0:	strd	r2, [sp, #208]	; 0xd0
   264a4:	ldrd	r2, [sp, #160]	; 0xa0
   264a8:	strd	r2, [sp, #216]	; 0xd8
   264ac:	ldrd	r2, [sp, #168]	; 0xa8
   264b0:	strd	r2, [sp, #224]	; 0xe0
   264b4:	ldr	r3, [sp, #196]	; 0xc4
   264b8:	add	r1, r3, r1
   264bc:	str	r1, [sp, #192]	; 0xc0
   264c0:	mov	r3, #0
   264c4:	strb	r3, [sp, #188]	; 0xbc
   264c8:	str	r7, [sp, #248]	; 0xf8
   264cc:	strb	r3, [sp, #232]	; 0xe8
   264d0:	mov	r0, #0
   264d4:	mov	r1, #0
   264d8:	strd	r0, [sp, #236]	; 0xec
   264dc:	strb	r3, [sp, #244]	; 0xf4
   264e0:	ldrb	r2, [r7]
   264e4:	lsr	r3, r2, #5
   264e8:	and	r1, r2, #31
   264ec:	ldr	r3, [r8, r3, lsl #2]
   264f0:	lsr	r3, r3, r1
   264f4:	tst	r3, #1
   264f8:	beq	26550 <__assert_fail@plt+0x13f8c>
   264fc:	mov	r3, #1
   26500:	str	r3, [sp, #252]	; 0xfc
   26504:	str	r2, [sp, #260]	; 0x104
   26508:	strb	r3, [sp, #256]	; 0x100
   2650c:	mov	r3, #1
   26510:	strb	r3, [sp, #244]	; 0xf4
   26514:	ldrb	r3, [sp, #256]	; 0x100
   26518:	cmp	r3, #0
   2651c:	beq	2652c <__assert_fail@plt+0x13f68>
   26520:	ldr	r3, [sp, #260]	; 0x104
   26524:	cmp	r3, #0
   26528:	beq	26678 <__assert_fail@plt+0x140b4>
   2652c:	ldr	r3, [sp, #248]	; 0xf8
   26530:	ldr	r2, [sp, #252]	; 0xfc
   26534:	add	r3, r3, r2
   26538:	str	r3, [sp, #248]	; 0xf8
   2653c:	mov	r3, #0
   26540:	strb	r3, [sp, #244]	; 0xf4
   26544:	add	r6, r6, #1
   26548:	mov	r4, #1
   2654c:	b	268c8 <__assert_fail@plt+0x14304>
   26550:	add	r0, sp, #236	; 0xec
   26554:	bl	1203c <mbsinit@plt>
   26558:	cmp	r0, #0
   2655c:	beq	265ec <__assert_fail@plt+0x14028>
   26560:	mov	r3, #1
   26564:	strb	r3, [sp, #232]	; 0xe8
   26568:	bl	12168 <__ctype_get_mb_cur_max@plt>
   2656c:	mov	r1, r0
   26570:	mov	r0, r7
   26574:	bl	2dd58 <__assert_fail@plt+0x1b794>
   26578:	add	r3, sp, #236	; 0xec
   2657c:	mov	r2, r0
   26580:	mov	r1, r7
   26584:	add	r0, sp, #260	; 0x104
   26588:	bl	32184 <__assert_fail@plt+0x1fbc0>
   2658c:	str	r0, [sp, #252]	; 0xfc
   26590:	cmn	r0, #1
   26594:	beq	2660c <__assert_fail@plt+0x14048>
   26598:	cmn	r0, #2
   2659c:	beq	26620 <__assert_fail@plt+0x1405c>
   265a0:	cmp	r0, #0
   265a4:	bne	265cc <__assert_fail@plt+0x14008>
   265a8:	mov	r3, #1
   265ac:	str	r3, [sp, #252]	; 0xfc
   265b0:	ldr	r3, [sp, #248]	; 0xf8
   265b4:	ldrb	r3, [r3]
   265b8:	cmp	r3, #0
   265bc:	bne	26638 <__assert_fail@plt+0x14074>
   265c0:	ldr	r3, [sp, #260]	; 0x104
   265c4:	cmp	r3, #0
   265c8:	bne	26658 <__assert_fail@plt+0x14094>
   265cc:	mov	r3, #1
   265d0:	strb	r3, [sp, #256]	; 0x100
   265d4:	add	r0, sp, #236	; 0xec
   265d8:	bl	1203c <mbsinit@plt>
   265dc:	cmp	r0, #0
   265e0:	movne	r3, #0
   265e4:	strbne	r3, [sp, #232]	; 0xe8
   265e8:	b	2650c <__assert_fail@plt+0x13f48>
   265ec:	movw	r3, #36204	; 0x8d6c
   265f0:	movt	r3, #4
   265f4:	mov	r2, #143	; 0x8f
   265f8:	movw	r1, #36224	; 0x8d80
   265fc:	movt	r1, #4
   26600:	movw	r0, #36236	; 0x8d8c
   26604:	movt	r0, #4
   26608:	bl	125c4 <__assert_fail@plt>
   2660c:	mov	r3, #1
   26610:	str	r3, [sp, #252]	; 0xfc
   26614:	mov	r3, #0
   26618:	strb	r3, [sp, #256]	; 0x100
   2661c:	b	2650c <__assert_fail@plt+0x13f48>
   26620:	ldr	r0, [sp, #248]	; 0xf8
   26624:	bl	122d0 <strlen@plt>
   26628:	str	r0, [sp, #252]	; 0xfc
   2662c:	mov	r3, #0
   26630:	strb	r3, [sp, #256]	; 0x100
   26634:	b	2650c <__assert_fail@plt+0x13f48>
   26638:	movw	r3, #36204	; 0x8d6c
   2663c:	movt	r3, #4
   26640:	mov	r2, #171	; 0xab
   26644:	movw	r1, #36224	; 0x8d80
   26648:	movt	r1, #4
   2664c:	movw	r0, #36260	; 0x8da4
   26650:	movt	r0, #4
   26654:	bl	125c4 <__assert_fail@plt>
   26658:	movw	r3, #36204	; 0x8d6c
   2665c:	movt	r3, #4
   26660:	mov	r2, #172	; 0xac
   26664:	movw	r1, #36224	; 0x8d80
   26668:	movt	r1, #4
   2666c:	movw	r0, #36284	; 0x8dbc
   26670:	movt	r0, #4
   26674:	bl	125c4 <__assert_fail@plt>
   26678:	bl	12570 <abort@plt>
   2667c:	add	r0, sp, #236	; 0xec
   26680:	bl	1203c <mbsinit@plt>
   26684:	cmp	r0, #0
   26688:	beq	2671c <__assert_fail@plt+0x14158>
   2668c:	strb	r4, [sp, #232]	; 0xe8
   26690:	ldr	r9, [sp, #248]	; 0xf8
   26694:	bl	12168 <__ctype_get_mb_cur_max@plt>
   26698:	mov	r1, r0
   2669c:	mov	r0, r9
   266a0:	bl	2dd58 <__assert_fail@plt+0x1b794>
   266a4:	add	r3, sp, #236	; 0xec
   266a8:	mov	r2, r0
   266ac:	mov	r1, r9
   266b0:	add	r0, sp, #260	; 0x104
   266b4:	bl	32184 <__assert_fail@plt+0x1fbc0>
   266b8:	str	r0, [sp, #252]	; 0xfc
   266bc:	cmn	r0, #1
   266c0:	streq	r4, [sp, #252]	; 0xfc
   266c4:	moveq	r3, #0
   266c8:	strbeq	r3, [sp, #256]	; 0x100
   266cc:	beq	26910 <__assert_fail@plt+0x1434c>
   266d0:	cmn	r0, #2
   266d4:	beq	2673c <__assert_fail@plt+0x14178>
   266d8:	cmp	r0, #0
   266dc:	bne	26700 <__assert_fail@plt+0x1413c>
   266e0:	str	r4, [sp, #252]	; 0xfc
   266e4:	ldr	r3, [sp, #248]	; 0xf8
   266e8:	ldrb	r3, [r3]
   266ec:	cmp	r3, #0
   266f0:	bne	26754 <__assert_fail@plt+0x14190>
   266f4:	ldr	r3, [sp, #260]	; 0x104
   266f8:	cmp	r3, #0
   266fc:	bne	26774 <__assert_fail@plt+0x141b0>
   26700:	strb	r4, [sp, #256]	; 0x100
   26704:	add	r0, sp, #236	; 0xec
   26708:	bl	1203c <mbsinit@plt>
   2670c:	cmp	r0, #0
   26710:	movne	r3, #0
   26714:	strbne	r3, [sp, #232]	; 0xe8
   26718:	b	26910 <__assert_fail@plt+0x1434c>
   2671c:	movw	r3, #36204	; 0x8d6c
   26720:	movt	r3, #4
   26724:	mov	r2, #143	; 0x8f
   26728:	movw	r1, #36224	; 0x8d80
   2672c:	movt	r1, #4
   26730:	movw	r0, #36236	; 0x8d8c
   26734:	movt	r0, #4
   26738:	bl	125c4 <__assert_fail@plt>
   2673c:	ldr	r0, [sp, #248]	; 0xf8
   26740:	bl	122d0 <strlen@plt>
   26744:	str	r0, [sp, #252]	; 0xfc
   26748:	mov	r3, #0
   2674c:	strb	r3, [sp, #256]	; 0x100
   26750:	b	26910 <__assert_fail@plt+0x1434c>
   26754:	movw	r3, #36204	; 0x8d6c
   26758:	movt	r3, #4
   2675c:	mov	r2, #171	; 0xab
   26760:	movw	r1, #36224	; 0x8d80
   26764:	movt	r1, #4
   26768:	movw	r0, #36260	; 0x8da4
   2676c:	movt	r0, #4
   26770:	bl	125c4 <__assert_fail@plt>
   26774:	movw	r3, #36204	; 0x8d6c
   26778:	movt	r3, #4
   2677c:	mov	r2, #172	; 0xac
   26780:	movw	r1, #36224	; 0x8d80
   26784:	movt	r1, #4
   26788:	movw	r0, #36284	; 0x8dbc
   2678c:	movt	r0, #4
   26790:	bl	125c4 <__assert_fail@plt>
   26794:	ldr	r0, [sp, #136]	; 0x88
   26798:	add	sp, sp, #292	; 0x124
   2679c:	ldrd	r4, [sp]
   267a0:	ldrd	r6, [sp, #8]
   267a4:	ldrd	r8, [sp, #16]
   267a8:	ldrd	sl, [sp, #24]
   267ac:	add	sp, sp, #32
   267b0:	pop	{pc}		; (ldr pc, [sp], #4)
   267b4:	add	r0, sp, #180	; 0xb4
   267b8:	bl	1203c <mbsinit@plt>
   267bc:	cmp	r0, #0
   267c0:	beq	26978 <__assert_fail@plt+0x143b4>
   267c4:	strb	r4, [sp, #176]	; 0xb0
   267c8:	ldr	r9, [sp, #192]	; 0xc0
   267cc:	bl	12168 <__ctype_get_mb_cur_max@plt>
   267d0:	mov	r1, r0
   267d4:	mov	r0, r9
   267d8:	bl	2dd58 <__assert_fail@plt+0x1b794>
   267dc:	add	r3, sp, #180	; 0xb4
   267e0:	mov	r2, r0
   267e4:	mov	r1, r9
   267e8:	add	r0, sp, #204	; 0xcc
   267ec:	bl	32184 <__assert_fail@plt+0x1fbc0>
   267f0:	str	r0, [sp, #196]	; 0xc4
   267f4:	cmn	r0, #1
   267f8:	streq	r4, [sp, #196]	; 0xc4
   267fc:	moveq	r3, #0
   26800:	strbeq	r3, [sp, #200]	; 0xc8
   26804:	beq	26850 <__assert_fail@plt+0x1428c>
   26808:	cmn	r0, #2
   2680c:	beq	26998 <__assert_fail@plt+0x143d4>
   26810:	cmp	r0, #0
   26814:	bne	26838 <__assert_fail@plt+0x14274>
   26818:	str	r4, [sp, #196]	; 0xc4
   2681c:	ldr	r3, [sp, #192]	; 0xc0
   26820:	ldrb	r3, [r3]
   26824:	cmp	r3, #0
   26828:	bne	269b0 <__assert_fail@plt+0x143ec>
   2682c:	ldr	r3, [sp, #204]	; 0xcc
   26830:	cmp	r3, #0
   26834:	bne	269d0 <__assert_fail@plt+0x1440c>
   26838:	strb	r4, [sp, #200]	; 0xc8
   2683c:	add	r0, sp, #180	; 0xb4
   26840:	bl	1203c <mbsinit@plt>
   26844:	cmp	r0, #0
   26848:	movne	r3, #0
   2684c:	strbne	r3, [sp, #176]	; 0xb0
   26850:	strb	r4, [sp, #188]	; 0xbc
   26854:	ldrb	r3, [sp, #200]	; 0xc8
   26858:	cmp	r3, #0
   2685c:	beq	26878 <__assert_fail@plt+0x142b4>
   26860:	ldr	r3, [sp, #204]	; 0xcc
   26864:	cmp	r3, #0
   26868:	beq	269f0 <__assert_fail@plt+0x1442c>
   2686c:	ldrb	r2, [sp, #256]	; 0x100
   26870:	cmp	r2, #0
   26874:	bne	269f8 <__assert_fail@plt+0x14434>
   26878:	ldr	r2, [sp, #196]	; 0xc4
   2687c:	ldr	r3, [sp, #252]	; 0xfc
   26880:	cmp	r2, r3
   26884:	movne	r0, r4
   26888:	beq	26a08 <__assert_fail@plt+0x14444>
   2688c:	add	r1, r6, #1
   26890:	cmp	r0, #0
   26894:	bne	26bc0 <__assert_fail@plt+0x145fc>
   26898:	ldr	r3, [sp, #192]	; 0xc0
   2689c:	ldr	r2, [sp, #196]	; 0xc4
   268a0:	add	r3, r3, r2
   268a4:	str	r3, [sp, #192]	; 0xc0
   268a8:	mov	r2, #0
   268ac:	strb	r2, [sp, #188]	; 0xbc
   268b0:	ldr	r3, [sp, #248]	; 0xf8
   268b4:	ldr	r0, [sp, #252]	; 0xfc
   268b8:	add	r3, r3, r0
   268bc:	str	r3, [sp, #248]	; 0xf8
   268c0:	strb	r2, [sp, #244]	; 0xf4
   268c4:	mov	r6, r1
   268c8:	ldrb	r3, [sp, #244]	; 0xf4
   268cc:	cmp	r3, #0
   268d0:	bne	26914 <__assert_fail@plt+0x14350>
   268d4:	ldrb	r3, [sp, #232]	; 0xe8
   268d8:	cmp	r3, #0
   268dc:	bne	26690 <__assert_fail@plt+0x140cc>
   268e0:	ldr	r1, [sp, #248]	; 0xf8
   268e4:	ldrb	r3, [r1]
   268e8:	lsr	r2, r3, #5
   268ec:	and	r3, r3, #31
   268f0:	ldr	r2, [r8, r2, lsl #2]
   268f4:	lsr	r3, r2, r3
   268f8:	tst	r3, #1
   268fc:	beq	2667c <__assert_fail@plt+0x140b8>
   26900:	str	r4, [sp, #252]	; 0xfc
   26904:	ldrb	r3, [r1]
   26908:	str	r3, [sp, #260]	; 0x104
   2690c:	strb	r4, [sp, #256]	; 0x100
   26910:	strb	r4, [sp, #244]	; 0xf4
   26914:	ldrb	r3, [sp, #256]	; 0x100
   26918:	cmp	r3, #0
   2691c:	beq	2692c <__assert_fail@plt+0x14368>
   26920:	ldr	r3, [sp, #260]	; 0x104
   26924:	cmp	r3, #0
   26928:	beq	26794 <__assert_fail@plt+0x141d0>
   2692c:	ldrb	r3, [sp, #188]	; 0xbc
   26930:	cmp	r3, #0
   26934:	bne	26854 <__assert_fail@plt+0x14290>
   26938:	ldrb	r3, [sp, #176]	; 0xb0
   2693c:	cmp	r3, #0
   26940:	bne	267c8 <__assert_fail@plt+0x14204>
   26944:	ldr	r1, [sp, #192]	; 0xc0
   26948:	ldrb	r3, [r1]
   2694c:	lsr	r2, r3, #5
   26950:	and	r3, r3, #31
   26954:	ldr	r2, [r8, r2, lsl #2]
   26958:	lsr	r3, r2, r3
   2695c:	tst	r3, #1
   26960:	beq	267b4 <__assert_fail@plt+0x141f0>
   26964:	str	r4, [sp, #196]	; 0xc4
   26968:	ldrb	r3, [r1]
   2696c:	str	r3, [sp, #204]	; 0xcc
   26970:	strb	r4, [sp, #200]	; 0xc8
   26974:	b	26850 <__assert_fail@plt+0x1428c>
   26978:	movw	r3, #36204	; 0x8d6c
   2697c:	movt	r3, #4
   26980:	mov	r2, #143	; 0x8f
   26984:	movw	r1, #36224	; 0x8d80
   26988:	movt	r1, #4
   2698c:	movw	r0, #36236	; 0x8d8c
   26990:	movt	r0, #4
   26994:	bl	125c4 <__assert_fail@plt>
   26998:	ldr	r0, [sp, #192]	; 0xc0
   2699c:	bl	122d0 <strlen@plt>
   269a0:	str	r0, [sp, #196]	; 0xc4
   269a4:	mov	r3, #0
   269a8:	strb	r3, [sp, #200]	; 0xc8
   269ac:	b	26850 <__assert_fail@plt+0x1428c>
   269b0:	movw	r3, #36204	; 0x8d6c
   269b4:	movt	r3, #4
   269b8:	mov	r2, #171	; 0xab
   269bc:	movw	r1, #36224	; 0x8d80
   269c0:	movt	r1, #4
   269c4:	movw	r0, #36260	; 0x8da4
   269c8:	movt	r0, #4
   269cc:	bl	125c4 <__assert_fail@plt>
   269d0:	movw	r3, #36204	; 0x8d6c
   269d4:	movt	r3, #4
   269d8:	mov	r2, #172	; 0xac
   269dc:	movw	r1, #36224	; 0x8d80
   269e0:	movt	r1, #4
   269e4:	movw	r0, #36284	; 0x8dbc
   269e8:	movt	r0, #4
   269ec:	bl	125c4 <__assert_fail@plt>
   269f0:	mov	r0, #0
   269f4:	b	26798 <__assert_fail@plt+0x141d4>
   269f8:	ldr	r0, [sp, #260]	; 0x104
   269fc:	subs	r0, r0, r3
   26a00:	movne	r0, #1
   26a04:	b	2688c <__assert_fail@plt+0x142c8>
   26a08:	ldr	r1, [sp, #248]	; 0xf8
   26a0c:	ldr	r0, [sp, #192]	; 0xc0
   26a10:	bl	12060 <memcmp@plt>
   26a14:	adds	r0, r0, #0
   26a18:	movne	r0, #1
   26a1c:	b	2688c <__assert_fail@plt+0x142c8>
   26a20:	mov	r0, r5
   26a24:	b	26798 <__assert_fail@plt+0x141d4>
   26a28:	ldr	r0, [sp, #232]	; 0xe8
   26a2c:	b	26798 <__assert_fail@plt+0x141d4>
   26a30:	mov	lr, fp
   26a34:	mov	ip, r4
   26a38:	mov	r0, r5
   26a3c:	add	r6, r6, #1
   26a40:	add	r4, ip, #1
   26a44:	add	r5, r5, #1
   26a48:	ldrb	r3, [r0]
   26a4c:	cmp	r3, r8
   26a50:	beq	26ae0 <__assert_fail@plt+0x1451c>
   26a54:	str	r5, [sp]
   26a58:	ldrb	r3, [r5]
   26a5c:	cmp	r3, #0
   26a60:	beq	26b58 <__assert_fail@plt+0x14594>
   26a64:	cmp	r6, #9
   26a68:	movls	fp, #0
   26a6c:	andhi	fp, lr, #1
   26a70:	cmp	fp, #0
   26a74:	beq	26a34 <__assert_fail@plt+0x14470>
   26a78:	add	r3, r6, r6, lsl #2
   26a7c:	cmp	r3, r4
   26a80:	bhi	26a30 <__assert_fail@plt+0x1446c>
   26a84:	cmp	sl, #0
   26a88:	beq	26aa8 <__assert_fail@plt+0x144e4>
   26a8c:	sub	r1, r4, r9
   26a90:	mov	r0, sl
   26a94:	bl	123d8 <strnlen@plt>
   26a98:	ldrb	r3, [sl, r0]!
   26a9c:	cmp	r3, #0
   26aa0:	bne	26ad4 <__assert_fail@plt+0x14510>
   26aa4:	mov	r9, r4
   26aa8:	mov	r0, r7
   26aac:	bl	122d0 <strlen@plt>
   26ab0:	add	r3, sp, #232	; 0xe8
   26ab4:	mov	r2, r0
   26ab8:	mov	r1, r7
   26abc:	ldr	r0, [sp]
   26ac0:	bl	25284 <__assert_fail@plt+0x12cc0>
   26ac4:	subs	lr, r0, #0
   26ac8:	bne	26a28 <__assert_fail@plt+0x14464>
   26acc:	mov	sl, #0
   26ad0:	b	26a34 <__assert_fail@plt+0x14470>
   26ad4:	mov	r9, r4
   26ad8:	mov	lr, fp
   26adc:	b	26a34 <__assert_fail@plt+0x14470>
   26ae0:	ldrb	r3, [r7, #1]
   26ae4:	cmp	r3, #0
   26ae8:	beq	26798 <__assert_fail@plt+0x141d4>
   26aec:	str	r5, [sp]
   26af0:	ldrb	r2, [r5]
   26af4:	cmp	r2, #0
   26af8:	beq	26b48 <__assert_fail@plt+0x14584>
   26afc:	add	r4, ip, #2
   26b00:	cmp	r3, r2
   26b04:	bne	26a64 <__assert_fail@plt+0x144a0>
   26b08:	mov	fp, r5
   26b0c:	ldr	r3, [sp, #4]
   26b10:	ldrb	r2, [r3, #1]!
   26b14:	cmp	r2, #0
   26b18:	beq	26798 <__assert_fail@plt+0x141d4>
   26b1c:	ldrb	r1, [fp, #1]!
   26b20:	cmp	r1, #0
   26b24:	beq	26b50 <__assert_fail@plt+0x1458c>
   26b28:	add	r4, r3, #1
   26b2c:	sub	r4, r4, r7
   26b30:	add	r4, r4, ip
   26b34:	cmp	r2, r1
   26b38:	beq	26b10 <__assert_fail@plt+0x1454c>
   26b3c:	b	26a64 <__assert_fail@plt+0x144a0>
   26b40:	mov	r0, #0
   26b44:	b	26798 <__assert_fail@plt+0x141d4>
   26b48:	mov	r0, #0
   26b4c:	b	26798 <__assert_fail@plt+0x141d4>
   26b50:	mov	r0, #0
   26b54:	b	26798 <__assert_fail@plt+0x141d4>
   26b58:	mov	r0, #0
   26b5c:	b	26798 <__assert_fail@plt+0x141d4>
   26b60:	ldrb	r3, [sp, #76]	; 0x4c
   26b64:	cmp	r3, #0
   26b68:	beq	262a4 <__assert_fail@plt+0x13ce0>
   26b6c:	add	r2, sp, #232	; 0xe8
   26b70:	mov	r1, r7
   26b74:	mov	r0, r5
   26b78:	bl	253fc <__assert_fail@plt+0x12e38>
   26b7c:	subs	fp, r0, #0
   26b80:	beq	262fc <__assert_fail@plt+0x13d38>
   26b84:	ldr	r0, [sp, #232]	; 0xe8
   26b88:	b	26798 <__assert_fail@plt+0x141d4>
   26b8c:	cmp	sl, #9
   26b90:	movls	r3, #0
   26b94:	andhi	r3, fp, #1
   26b98:	cmp	r3, #0
   26b9c:	bne	26c9c <__assert_fail@plt+0x146d8>
   26ba0:	add	r6, r6, #1
   26ba4:	ldr	r2, [sp, #140]	; 0x8c
   26ba8:	ldr	r3, [sp, #28]
   26bac:	cmp	r2, r3
   26bb0:	movne	r0, #0
   26bb4:	beq	26460 <__assert_fail@plt+0x13e9c>
   26bb8:	cmp	r0, #0
   26bbc:	bne	26478 <__assert_fail@plt+0x13eb4>
   26bc0:	ldr	r3, [sp, #136]	; 0x88
   26bc4:	ldr	r2, [sp, #140]	; 0x8c
   26bc8:	add	r3, r3, r2
   26bcc:	str	r3, [sp, #136]	; 0x88
   26bd0:	mov	r3, #0
   26bd4:	strb	r3, [sp, #132]	; 0x84
   26bd8:	add	sl, sl, #1
   26bdc:	ldrb	r3, [sp, #132]	; 0x84
   26be0:	cmp	r3, #0
   26be4:	bne	26c30 <__assert_fail@plt+0x1466c>
   26be8:	ldrb	r3, [sp, #120]	; 0x78
   26bec:	cmp	r3, #0
   26bf0:	bne	25fe0 <__assert_fail@plt+0x13a1c>
   26bf4:	ldr	r1, [sp, #136]	; 0x88
   26bf8:	ldrb	r3, [r1]
   26bfc:	lsr	r2, r3, #5
   26c00:	and	r3, r3, #31
   26c04:	ldr	r2, [r8, r2, lsl #2]
   26c08:	lsr	r3, r2, r3
   26c0c:	tst	r3, #1
   26c10:	beq	25fc8 <__assert_fail@plt+0x13a04>
   26c14:	mov	r3, #1
   26c18:	str	r3, [sp, #140]	; 0x8c
   26c1c:	ldrb	r2, [r1]
   26c20:	str	r2, [sp, #148]	; 0x94
   26c24:	strb	r3, [sp, #144]	; 0x90
   26c28:	mov	r3, #1
   26c2c:	strb	r3, [sp, #132]	; 0x84
   26c30:	ldrb	r3, [sp, #144]	; 0x90
   26c34:	cmp	r3, #0
   26c38:	beq	26b8c <__assert_fail@plt+0x145c8>
   26c3c:	ldr	r3, [sp, #148]	; 0x94
   26c40:	cmp	r3, #0
   26c44:	beq	260f4 <__assert_fail@plt+0x13b30>
   26c48:	cmp	sl, #9
   26c4c:	movls	r3, #0
   26c50:	andhi	r3, fp, #1
   26c54:	cmp	r3, #0
   26c58:	addeq	r6, r6, #1
   26c5c:	bne	26c84 <__assert_fail@plt+0x146c0>
   26c60:	ldrb	r3, [sp, #32]
   26c64:	cmp	r3, #0
   26c68:	beq	26ba4 <__assert_fail@plt+0x145e0>
   26c6c:	ldr	r0, [sp, #148]	; 0x94
   26c70:	ldr	r3, [sp, #36]	; 0x24
   26c74:	cmp	r0, r3
   26c78:	movne	r0, #0
   26c7c:	moveq	r0, #1
   26c80:	b	26bb8 <__assert_fail@plt+0x145f4>
   26c84:	add	r2, sl, sl, lsl #2
   26c88:	cmp	r6, r2
   26c8c:	addcc	r6, r6, #1
   26c90:	movcc	fp, r3
   26c94:	bcc	26c60 <__assert_fail@plt+0x1469c>
   26c98:	b	26cb0 <__assert_fail@plt+0x146ec>
   26c9c:	add	r2, sl, sl, lsl #2
   26ca0:	cmp	r2, r6
   26ca4:	addhi	r6, r6, #1
   26ca8:	movhi	fp, r3
   26cac:	bhi	26ba4 <__assert_fail@plt+0x145e0>
   26cb0:	ldr	r3, [sp]
   26cb4:	subs	r4, r6, r3
   26cb8:	beq	26298 <__assert_fail@plt+0x13cd4>
   26cbc:	mov	r9, #1
   26cc0:	b	261d4 <__assert_fail@plt+0x13c10>
   26cc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26cc8:	strd	r6, [sp, #8]
   26ccc:	strd	r8, [sp, #16]
   26cd0:	strd	sl, [sp, #24]
   26cd4:	str	lr, [sp, #32]
   26cd8:	sub	sp, sp, #20
   26cdc:	mov	r4, r0
   26ce0:	mov	sl, r2
   26ce4:	add	r8, r0, r1
   26ce8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   26cec:	cmp	r0, #1
   26cf0:	bls	26d10 <__assert_fail@plt+0x1474c>
   26cf4:	cmp	r4, r8
   26cf8:	bcs	26ec4 <__assert_fail@plt+0x14900>
   26cfc:	mov	r5, #0
   26d00:	mov	r6, #0
   26d04:	mov	r7, #0
   26d08:	and	r9, sl, #2
   26d0c:	b	26d60 <__assert_fail@plt+0x1479c>
   26d10:	cmp	r4, r8
   26d14:	movcs	r5, #0
   26d18:	bcs	26e28 <__assert_fail@plt+0x14864>
   26d1c:	bl	12288 <__ctype_b_loc@plt>
   26d20:	ldr	r2, [r0]
   26d24:	mov	r5, #0
   26d28:	and	sl, sl, #2
   26d2c:	b	26e84 <__assert_fail@plt+0x148c0>
   26d30:	cmp	r3, #65	; 0x41
   26d34:	bcc	26d84 <__assert_fail@plt+0x147c0>
   26d38:	cmp	r3, #95	; 0x5f
   26d3c:	bls	26d50 <__assert_fail@plt+0x1478c>
   26d40:	sub	r3, r3, #97	; 0x61
   26d44:	uxtb	r3, r3
   26d48:	cmp	r3, #29
   26d4c:	bhi	26d84 <__assert_fail@plt+0x147c0>
   26d50:	add	r4, r4, #1
   26d54:	add	r5, r5, #1
   26d58:	cmp	r4, r8
   26d5c:	bcs	26e28 <__assert_fail@plt+0x14864>
   26d60:	ldrb	r3, [r4]
   26d64:	cmp	r3, #63	; 0x3f
   26d68:	bhi	26d30 <__assert_fail@plt+0x1476c>
   26d6c:	cmp	r3, #37	; 0x25
   26d70:	bcs	26d50 <__assert_fail@plt+0x1478c>
   26d74:	sub	r3, r3, #32
   26d78:	uxtb	r3, r3
   26d7c:	cmp	r3, #3
   26d80:	bls	26d50 <__assert_fail@plt+0x1478c>
   26d84:	strd	r6, [sp, #8]
   26d88:	b	26dcc <__assert_fail@plt+0x14808>
   26d8c:	tst	sl, #1
   26d90:	bne	26e70 <__assert_fail@plt+0x148ac>
   26d94:	add	r4, r4, #1
   26d98:	add	r5, r5, #1
   26d9c:	b	26d58 <__assert_fail@plt+0x14794>
   26da0:	tst	sl, #1
   26da4:	bne	26e70 <__assert_fail@plt+0x148ac>
   26da8:	add	r5, r5, #1
   26dac:	mov	r4, r8
   26db0:	b	26d58 <__assert_fail@plt+0x14794>
   26db4:	add	r5, r5, r0
   26db8:	add	r4, r4, fp
   26dbc:	add	r0, sp, #8
   26dc0:	bl	1203c <mbsinit@plt>
   26dc4:	cmp	r0, #0
   26dc8:	bne	26d58 <__assert_fail@plt+0x14794>
   26dcc:	add	r3, sp, #8
   26dd0:	sub	r2, r8, r4
   26dd4:	mov	r1, r4
   26dd8:	add	r0, sp, #4
   26ddc:	bl	32184 <__assert_fail@plt+0x1fbc0>
   26de0:	mov	fp, r0
   26de4:	cmn	r0, #1
   26de8:	beq	26d8c <__assert_fail@plt+0x147c8>
   26dec:	cmn	r0, #2
   26df0:	beq	26da0 <__assert_fail@plt+0x147dc>
   26df4:	cmp	r0, #0
   26df8:	movne	fp, r0
   26dfc:	moveq	fp, #1
   26e00:	ldr	r0, [sp, #4]
   26e04:	bl	11f7c <wcwidth@plt>
   26e08:	cmp	r0, #0
   26e0c:	blt	26e48 <__assert_fail@plt+0x14884>
   26e10:	movw	r3, #65535	; 0xffff
   26e14:	movt	r3, #32767	; 0x7fff
   26e18:	sub	r3, r3, r5
   26e1c:	cmp	r3, r0
   26e20:	bge	26db4 <__assert_fail@plt+0x147f0>
   26e24:	mvn	r5, #-2147483648	; 0x80000000
   26e28:	mov	r0, r5
   26e2c:	add	sp, sp, #20
   26e30:	ldrd	r4, [sp]
   26e34:	ldrd	r6, [sp, #8]
   26e38:	ldrd	r8, [sp, #16]
   26e3c:	ldrd	sl, [sp, #24]
   26e40:	add	sp, sp, #32
   26e44:	pop	{pc}		; (ldr pc, [sp], #4)
   26e48:	cmp	r9, #0
   26e4c:	bne	26e70 <__assert_fail@plt+0x148ac>
   26e50:	ldr	r0, [sp, #4]
   26e54:	bl	120e4 <iswcntrl@plt>
   26e58:	cmp	r0, #0
   26e5c:	bne	26db8 <__assert_fail@plt+0x147f4>
   26e60:	cmn	r5, #-2147483647	; 0x80000001
   26e64:	beq	26e24 <__assert_fail@plt+0x14860>
   26e68:	add	r5, r5, #1
   26e6c:	b	26db8 <__assert_fail@plt+0x147f4>
   26e70:	mvn	r5, #0
   26e74:	b	26e28 <__assert_fail@plt+0x14864>
   26e78:	add	r5, r5, #1
   26e7c:	cmp	r8, r4
   26e80:	beq	26e28 <__assert_fail@plt+0x14864>
   26e84:	ldrb	r3, [r4], #1
   26e88:	lsl	r3, r3, #1
   26e8c:	ldrh	r3, [r2, r3]
   26e90:	tst	r3, #16384	; 0x4000
   26e94:	beq	26ea4 <__assert_fail@plt+0x148e0>
   26e98:	cmn	r5, #-2147483647	; 0x80000001
   26e9c:	bne	26e78 <__assert_fail@plt+0x148b4>
   26ea0:	b	26e28 <__assert_fail@plt+0x14864>
   26ea4:	cmp	sl, #0
   26ea8:	bne	26ecc <__assert_fail@plt+0x14908>
   26eac:	tst	r3, #2
   26eb0:	bne	26e7c <__assert_fail@plt+0x148b8>
   26eb4:	cmn	r5, #-2147483647	; 0x80000001
   26eb8:	beq	26e28 <__assert_fail@plt+0x14864>
   26ebc:	add	r5, r5, #1
   26ec0:	b	26e7c <__assert_fail@plt+0x148b8>
   26ec4:	mov	r5, #0
   26ec8:	b	26e28 <__assert_fail@plt+0x14864>
   26ecc:	mvn	r5, #0
   26ed0:	b	26e28 <__assert_fail@plt+0x14864>
   26ed4:	strd	r4, [sp, #-16]!
   26ed8:	str	r6, [sp, #8]
   26edc:	str	lr, [sp, #12]
   26ee0:	mov	r4, r0
   26ee4:	mov	r5, r1
   26ee8:	bl	122d0 <strlen@plt>
   26eec:	mov	r2, r5
   26ef0:	mov	r1, r0
   26ef4:	mov	r0, r4
   26ef8:	bl	26cc4 <__assert_fail@plt+0x14700>
   26efc:	ldrd	r4, [sp]
   26f00:	ldr	r6, [sp, #8]
   26f04:	add	sp, sp, #12
   26f08:	pop	{pc}		; (ldr pc, [sp], #4)
   26f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26f10:	strd	r6, [sp, #8]
   26f14:	strd	r8, [sp, #16]
   26f18:	strd	sl, [sp, #24]
   26f1c:	str	lr, [sp, #32]
   26f20:	sub	sp, sp, #4
   26f24:	mov	r4, r0
   26f28:	ldrb	r3, [r0]
   26f2c:	sub	r2, r3, #48	; 0x30
   26f30:	uxtb	r2, r2
   26f34:	cmp	r2, #7
   26f38:	bls	26fc4 <__assert_fail@plt+0x14a00>
   26f3c:	cmp	r3, #0
   26f40:	moveq	r0, #1
   26f44:	beq	26f74 <__assert_fail@plt+0x149b0>
   26f48:	mov	r1, r4
   26f4c:	mov	r0, #1
   26f50:	and	r2, r3, #239	; 0xef
   26f54:	cmp	r3, #43	; 0x2b
   26f58:	cmpne	r2, #45	; 0x2d
   26f5c:	moveq	r3, #1
   26f60:	movne	r3, #0
   26f64:	add	r0, r0, r3
   26f68:	ldrb	r3, [r1, #1]!
   26f6c:	cmp	r3, #0
   26f70:	bne	26f50 <__assert_fail@plt+0x1498c>
   26f74:	mov	r1, #16
   26f78:	bl	2e4c8 <__assert_fail@plt+0x1bf04>
   26f7c:	mov	ip, #0
   26f80:	movw	fp, #519	; 0x207
   26f84:	movw	r7, #1080	; 0x438
   26f88:	mov	r9, #3
   26f8c:	mov	r6, #0
   26f90:	mov	r2, r4
   26f94:	ldrb	r3, [r4], #1
   26f98:	cmp	r3, #97	; 0x61
   26f9c:	beq	2709c <__assert_fail@plt+0x14ad8>
   26fa0:	bls	27050 <__assert_fail@plt+0x14a8c>
   26fa4:	cmp	r3, #111	; 0x6f
   26fa8:	beq	27094 <__assert_fail@plt+0x14ad0>
   26fac:	cmp	r3, #117	; 0x75
   26fb0:	beq	2708c <__assert_fail@plt+0x14ac8>
   26fb4:	cmp	r3, #103	; 0x67
   26fb8:	bne	27068 <__assert_fail@plt+0x14aa4>
   26fbc:	orr	r6, r6, r7
   26fc0:	b	26f90 <__assert_fail@plt+0x149cc>
   26fc4:	mov	r2, r0
   26fc8:	mov	r5, #0
   26fcc:	lsl	r5, r5, #3
   26fd0:	sub	r5, r5, #48	; 0x30
   26fd4:	ldrb	r3, [r2], #1
   26fd8:	add	r5, r3, r5
   26fdc:	cmp	r5, #4096	; 0x1000
   26fe0:	bcs	272d4 <__assert_fail@plt+0x14d10>
   26fe4:	ldrb	r1, [r2]
   26fe8:	sub	r3, r1, #48	; 0x30
   26fec:	uxtb	r3, r3
   26ff0:	cmp	r3, #7
   26ff4:	bls	26fcc <__assert_fail@plt+0x14a08>
   26ff8:	cmp	r1, #0
   26ffc:	movne	r0, #0
   27000:	bne	27070 <__assert_fail@plt+0x14aac>
   27004:	sub	r2, r2, r4
   27008:	cmp	r2, #4
   2700c:	andle	r4, r5, #3072	; 0xc00
   27010:	mvnle	r4, r4, lsr #10
   27014:	mvnle	r4, r4, lsl #10
   27018:	movwgt	r4, #4095	; 0xfff
   2701c:	mov	r0, #32
   27020:	bl	2e348 <__assert_fail@plt+0x1bd84>
   27024:	mov	r3, #61	; 0x3d
   27028:	strb	r3, [r0]
   2702c:	mov	r3, #1
   27030:	strb	r3, [r0, #1]
   27034:	movw	r3, #4095	; 0xfff
   27038:	str	r3, [r0, #4]
   2703c:	str	r5, [r0, #8]
   27040:	str	r4, [r0, #12]
   27044:	mov	r3, #0
   27048:	strb	r3, [r0, #17]
   2704c:	b	27070 <__assert_fail@plt+0x14aac>
   27050:	cmp	r3, #45	; 0x2d
   27054:	beq	270a4 <__assert_fail@plt+0x14ae0>
   27058:	cmp	r3, #61	; 0x3d
   2705c:	beq	270a4 <__assert_fail@plt+0x14ae0>
   27060:	cmp	r3, #43	; 0x2b
   27064:	beq	270a4 <__assert_fail@plt+0x14ae0>
   27068:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2706c:	mov	r0, #0
   27070:	add	sp, sp, #4
   27074:	ldrd	r4, [sp]
   27078:	ldrd	r6, [sp, #8]
   2707c:	ldrd	r8, [sp, #16]
   27080:	ldrd	sl, [sp, #24]
   27084:	add	sp, sp, #32
   27088:	pop	{pc}		; (ldr pc, [sp], #4)
   2708c:	orr	r6, r6, #2496	; 0x9c0
   27090:	b	26f90 <__assert_fail@plt+0x149cc>
   27094:	orr	r6, r6, fp
   27098:	b	26f90 <__assert_fail@plt+0x149cc>
   2709c:	movw	r6, #4095	; 0xfff
   270a0:	b	26f90 <__assert_fail@plt+0x149cc>
   270a4:	add	r5, ip, #1
   270a8:	add	ip, r0, ip, lsl #4
   270ac:	mov	sl, #1
   270b0:	b	27264 <__assert_fail@plt+0x14ca0>
   270b4:	sub	r3, r3, #48	; 0x30
   270b8:	uxtb	r3, r3
   270bc:	cmp	r3, #7
   270c0:	movls	r3, #0
   270c4:	bhi	27130 <__assert_fail@plt+0x14b6c>
   270c8:	lsl	r3, r3, #3
   270cc:	sub	r3, r3, #48	; 0x30
   270d0:	ldrb	r2, [r1], #1
   270d4:	add	r3, r2, r3
   270d8:	cmp	r3, #4096	; 0x1000
   270dc:	bcs	27068 <__assert_fail@plt+0x14aa4>
   270e0:	ldrb	r4, [r1]
   270e4:	sub	r2, r4, #48	; 0x30
   270e8:	uxtb	r2, r2
   270ec:	cmp	r2, #7
   270f0:	bls	270c8 <__assert_fail@plt+0x14b04>
   270f4:	cmp	r6, #0
   270f8:	bne	27068 <__assert_fail@plt+0x14aa4>
   270fc:	cmp	r4, #0
   27100:	cmpne	r4, #44	; 0x2c
   27104:	bne	27068 <__assert_fail@plt+0x14aa4>
   27108:	mov	r8, ip
   2710c:	strb	lr, [ip]
   27110:	strb	sl, [ip, #1]
   27114:	movw	r2, #4095	; 0xfff
   27118:	str	r2, [ip, #4]
   2711c:	str	r3, [ip, #8]
   27120:	mov	r2, r1
   27124:	movw	r6, #4095	; 0xfff
   27128:	mov	r4, r6
   2712c:	b	27240 <__assert_fail@plt+0x14c7c>
   27130:	mov	r8, r1
   27134:	mov	r1, sl
   27138:	mov	r4, #0
   2713c:	b	27184 <__assert_fail@plt+0x14bc0>
   27140:	add	r2, r2, #2
   27144:	mov	r4, #56	; 0x38
   27148:	b	27294 <__assert_fail@plt+0x14cd0>
   2714c:	add	r2, r2, #2
   27150:	mov	r4, #7
   27154:	b	27294 <__assert_fail@plt+0x14cd0>
   27158:	orr	r4, r4, #292	; 0x124
   2715c:	b	27184 <__assert_fail@plt+0x14bc0>
   27160:	orr	r4, r4, #146	; 0x92
   27164:	b	27184 <__assert_fail@plt+0x14bc0>
   27168:	orr	r4, r4, #73	; 0x49
   2716c:	b	27184 <__assert_fail@plt+0x14bc0>
   27170:	orr	r4, r4, #3072	; 0xc00
   27174:	b	27184 <__assert_fail@plt+0x14bc0>
   27178:	orr	r4, r4, #512	; 0x200
   2717c:	b	27184 <__assert_fail@plt+0x14bc0>
   27180:	mov	r1, #2
   27184:	mov	r2, r8
   27188:	add	r8, r8, #1
   2718c:	ldrb	r3, [r2]
   27190:	sub	r3, r3, #88	; 0x58
   27194:	cmp	r3, #32
   27198:	ldrls	pc, [pc, r3, lsl #2]
   2719c:	b	27224 <__assert_fail@plt+0x14c60>
   271a0:	andeq	r7, r2, r0, lsl #3
   271a4:	andeq	r7, r2, r4, lsr #4
   271a8:	andeq	r7, r2, r4, lsr #4
   271ac:	andeq	r7, r2, r4, lsr #4
   271b0:	andeq	r7, r2, r4, lsr #4
   271b4:	andeq	r7, r2, r4, lsr #4
   271b8:	andeq	r7, r2, r4, lsr #4
   271bc:	andeq	r7, r2, r4, lsr #4
   271c0:	andeq	r7, r2, r4, lsr #4
   271c4:	andeq	r7, r2, r4, lsr #4
   271c8:	andeq	r7, r2, r4, lsr #4
   271cc:	andeq	r7, r2, r4, lsr #4
   271d0:	andeq	r7, r2, r4, lsr #4
   271d4:	andeq	r7, r2, r4, lsr #4
   271d8:	andeq	r7, r2, r4, lsr #4
   271dc:	andeq	r7, r2, r4, lsr #4
   271e0:	andeq	r7, r2, r4, lsr #4
   271e4:	andeq	r7, r2, r4, lsr #4
   271e8:	andeq	r7, r2, r4, lsr #4
   271ec:	andeq	r7, r2, r4, lsr #4
   271f0:	andeq	r7, r2, r4, lsr #4
   271f4:	andeq	r7, r2, r4, lsr #4
   271f8:	andeq	r7, r2, r4, lsr #4
   271fc:	andeq	r7, r2, r4, lsr #4
   27200:	andeq	r7, r2, r4, lsr #4
   27204:	andeq	r7, r2, r4, lsr #4
   27208:	andeq	r7, r2, r8, asr r1
   2720c:	andeq	r7, r2, r0, ror r1
   27210:	andeq	r7, r2, r8, ror r1
   27214:	andeq	r7, r2, r4, lsr #4
   27218:	andeq	r7, r2, r4, lsr #4
   2721c:	andeq	r7, r2, r0, ror #2
   27220:	andeq	r7, r2, r8, ror #2
   27224:	mov	r8, ip
   27228:	strb	lr, [ip]
   2722c:	strb	r1, [ip, #1]
   27230:	str	r6, [ip, #4]
   27234:	str	r4, [ip, #8]
   27238:	cmp	r6, #0
   2723c:	andne	r4, r4, r6
   27240:	str	r4, [r8, #12]
   27244:	ldrb	r3, [r2]
   27248:	add	lr, r5, #1
   2724c:	add	ip, ip, #16
   27250:	and	r1, r3, #239	; 0xef
   27254:	cmp	r3, #43	; 0x2b
   27258:	cmpne	r1, #45	; 0x2d
   2725c:	bne	272ac <__assert_fail@plt+0x14ce8>
   27260:	mov	r5, lr
   27264:	mov	r1, r2
   27268:	ldrb	lr, [r1], #1
   2726c:	ldrb	r3, [r2, #1]
   27270:	cmp	r3, #103	; 0x67
   27274:	beq	27140 <__assert_fail@plt+0x14b7c>
   27278:	bls	270b4 <__assert_fail@plt+0x14af0>
   2727c:	cmp	r3, #111	; 0x6f
   27280:	beq	2714c <__assert_fail@plt+0x14b88>
   27284:	cmp	r3, #117	; 0x75
   27288:	addeq	r2, r2, #2
   2728c:	moveq	r4, #448	; 0x1c0
   27290:	bne	27130 <__assert_fail@plt+0x14b6c>
   27294:	mov	r8, ip
   27298:	strb	lr, [ip]
   2729c:	strb	r9, [ip, #1]
   272a0:	str	r6, [ip, #4]
   272a4:	str	r4, [ip, #8]
   272a8:	b	27238 <__assert_fail@plt+0x14c74>
   272ac:	cmp	r3, #44	; 0x2c
   272b0:	bne	272c0 <__assert_fail@plt+0x14cfc>
   272b4:	add	r4, r2, #1
   272b8:	mov	ip, r5
   272bc:	b	26f8c <__assert_fail@plt+0x149c8>
   272c0:	cmp	r3, #0
   272c4:	addeq	r5, r0, r5, lsl #4
   272c8:	strbeq	r3, [r5, #1]
   272cc:	beq	27070 <__assert_fail@plt+0x14aac>
   272d0:	b	27068 <__assert_fail@plt+0x14aa4>
   272d4:	mov	r0, #0
   272d8:	b	27070 <__assert_fail@plt+0x14aac>
   272dc:	str	r4, [sp, #-8]!
   272e0:	str	lr, [sp, #4]
   272e4:	sub	sp, sp, #104	; 0x68
   272e8:	mov	r2, sp
   272ec:	mov	r1, r0
   272f0:	mov	r0, #3
   272f4:	bl	12528 <__xstat64@plt>
   272f8:	cmp	r0, #0
   272fc:	movne	r0, #0
   27300:	bne	27338 <__assert_fail@plt+0x14d74>
   27304:	ldr	r4, [sp, #16]
   27308:	mov	r0, #32
   2730c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   27310:	mov	r3, #61	; 0x3d
   27314:	strb	r3, [r0]
   27318:	mov	r3, #1
   2731c:	strb	r3, [r0, #1]
   27320:	movw	r3, #4095	; 0xfff
   27324:	str	r3, [r0, #4]
   27328:	str	r4, [r0, #8]
   2732c:	str	r3, [r0, #12]
   27330:	mov	r3, #0
   27334:	strb	r3, [r0, #17]
   27338:	add	sp, sp, #104	; 0x68
   2733c:	ldr	r4, [sp]
   27340:	add	sp, sp, #4
   27344:	pop	{pc}		; (ldr pc, [sp], #4)
   27348:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2734c:	strd	r6, [sp, #8]
   27350:	strd	r8, [sp, #16]
   27354:	str	sl, [sp, #24]
   27358:	str	lr, [sp, #28]
   2735c:	ldr	r6, [sp, #32]
   27360:	ubfx	r0, r0, #0, #12
   27364:	ldrb	r9, [r3, #1]
   27368:	cmp	r9, #0
   2736c:	beq	2747c <__assert_fail@plt+0x14eb8>
   27370:	cmp	r1, #0
   27374:	movne	r7, #3072	; 0xc00
   27378:	moveq	r7, #0
   2737c:	add	r3, r3, #16
   27380:	mov	r5, #0
   27384:	mvn	r2, r2
   27388:	b	273d8 <__assert_fail@plt+0x14e14>
   2738c:	and	r9, r0, #73	; 0x49
   27390:	orrs	r9, r9, r1
   27394:	orrne	ip, ip, #73	; 0x49
   27398:	cmp	lr, #0
   2739c:	movne	r9, lr
   273a0:	moveq	r9, r2
   273a4:	bic	ip, ip, r4
   273a8:	and	ip, ip, r9
   273ac:	ldrb	r8, [r8, #-16]
   273b0:	cmp	r8, #45	; 0x2d
   273b4:	beq	27470 <__assert_fail@plt+0x14eac>
   273b8:	cmp	r8, #61	; 0x3d
   273bc:	beq	27440 <__assert_fail@plt+0x14e7c>
   273c0:	cmp	r8, #43	; 0x2b
   273c4:	beq	27464 <__assert_fail@plt+0x14ea0>
   273c8:	add	r3, r3, #16
   273cc:	ldrb	r9, [r3, #-15]
   273d0:	cmp	r9, #0
   273d4:	beq	27480 <__assert_fail@plt+0x14ebc>
   273d8:	mov	r8, r3
   273dc:	ldr	lr, [r3, #-12]
   273e0:	ldr	r4, [r3, #-4]
   273e4:	bic	r4, r7, r4
   273e8:	ldr	ip, [r3, #-8]
   273ec:	cmp	r9, #2
   273f0:	beq	2738c <__assert_fail@plt+0x14dc8>
   273f4:	cmp	r9, #3
   273f8:	bne	27398 <__assert_fail@plt+0x14dd4>
   273fc:	and	ip, ip, r0
   27400:	and	r9, ip, #292	; 0x124
   27404:	cmp	r9, #0
   27408:	movne	r9, #292	; 0x124
   2740c:	moveq	r9, #0
   27410:	and	sl, ip, #146	; 0x92
   27414:	cmp	sl, #0
   27418:	movne	sl, #146	; 0x92
   2741c:	moveq	sl, #0
   27420:	orr	r9, r9, sl
   27424:	and	sl, ip, #73	; 0x49
   27428:	cmp	sl, #0
   2742c:	movne	sl, #73	; 0x49
   27430:	moveq	sl, #0
   27434:	orr	r9, r9, sl
   27438:	orr	ip, r9, ip
   2743c:	b	27398 <__assert_fail@plt+0x14dd4>
   27440:	cmp	lr, #0
   27444:	mvnne	lr, lr
   27448:	orr	lr, lr, r4
   2744c:	mvn	r4, lr
   27450:	ubfx	r4, r4, #0, #12
   27454:	orr	r5, r5, r4
   27458:	and	lr, lr, r0
   2745c:	orr	r0, lr, ip
   27460:	b	273c8 <__assert_fail@plt+0x14e04>
   27464:	orr	r5, r5, ip
   27468:	orr	r0, r0, ip
   2746c:	b	273c8 <__assert_fail@plt+0x14e04>
   27470:	orr	r5, r5, ip
   27474:	bic	r0, r0, ip
   27478:	b	273c8 <__assert_fail@plt+0x14e04>
   2747c:	mov	r5, #0
   27480:	cmp	r6, #0
   27484:	strne	r5, [r6]
   27488:	ldrd	r4, [sp]
   2748c:	ldrd	r6, [sp, #8]
   27490:	ldrd	r8, [sp, #16]
   27494:	ldr	sl, [sp, #24]
   27498:	add	sp, sp, #28
   2749c:	pop	{pc}		; (ldr pc, [sp], #4)
   274a0:	str	r4, [sp, #-8]!
   274a4:	str	lr, [sp, #4]
   274a8:	mov	r5, r0
   274ac:	movw	r3, #46316	; 0xb4ec
   274b0:	movt	r3, #5
   274b4:	ldr	r4, [r3]
   274b8:	mov	r2, #5
   274bc:	movw	r1, #36304	; 0x8dd0
   274c0:	movt	r1, #4
   274c4:	mov	r0, #0
   274c8:	bl	12084 <dcgettext@plt>
   274cc:	mov	r2, r0
   274d0:	mov	r1, r5
   274d4:	mov	r0, r4
   274d8:	bl	121bc <error@plt>
   274dc:	bl	12570 <abort@plt>
   274e0:	str	r4, [sp, #-8]!
   274e4:	str	lr, [sp, #4]
   274e8:	mov	r5, r0
   274ec:	movw	r3, #46316	; 0xb4ec
   274f0:	movt	r3, #5
   274f4:	ldr	r4, [r3]
   274f8:	mov	r2, #5
   274fc:	movw	r1, #36348	; 0x8dfc
   27500:	movt	r1, #4
   27504:	mov	r0, #0
   27508:	bl	12084 <dcgettext@plt>
   2750c:	mov	r2, r0
   27510:	mov	r1, r5
   27514:	mov	r0, r4
   27518:	bl	121bc <error@plt>
   2751c:	bl	12570 <abort@plt>
   27520:	push	{r2, r3}
   27524:	push	{lr}		; (str lr, [sp, #-4]!)
   27528:	sub	sp, sp, #12
   2752c:	ldr	r2, [sp, #16]
   27530:	tst	r2, #64	; 0x40
   27534:	addne	r3, sp, #24
   27538:	strne	r3, [sp, #4]
   2753c:	ldrne	r3, [sp, #20]
   27540:	moveq	r3, #0
   27544:	bl	122f4 <openat64@plt>
   27548:	bl	2ddb8 <__assert_fail@plt+0x1b7f4>
   2754c:	add	sp, sp, #12
   27550:	pop	{lr}		; (ldr lr, [sp], #4)
   27554:	add	sp, sp, #8
   27558:	bx	lr
   2755c:	andeq	r0, r0, r0
   27560:	sub	sp, sp, #8
   27564:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27568:	strd	r6, [sp, #8]
   2756c:	str	r8, [sp, #16]
   27570:	str	lr, [sp, #20]
   27574:	mov	r4, r0
   27578:	add	r1, sp, #20
   2757c:	stmib	r1, {r2, r3}
   27580:	ldrd	r6, [sp, #32]
   27584:	ldr	r5, [sp, #40]	; 0x28
   27588:	ldr	r3, [r0, #156]	; 0x9c
   2758c:	cmp	r3, #0
   27590:	beq	275e4 <__assert_fail@plt+0x15020>
   27594:	ldr	r2, [r0, #48]	; 0x30
   27598:	cmp	r2, #0
   2759c:	bne	275e4 <__assert_fail@plt+0x15020>
   275a0:	ldrb	r2, [r0, #153]	; 0x99
   275a4:	cmp	r2, #0
   275a8:	bne	275e4 <__assert_fail@plt+0x15020>
   275ac:	ldr	r3, [r0, #172]	; 0xac
   275b0:	cmp	r5, #2
   275b4:	cmple	r3, #0
   275b8:	beq	276b4 <__assert_fail@plt+0x150f0>
   275bc:	mov	r3, #1
   275c0:	strb	r3, [r0, #180]	; 0xb4
   275c4:	ldrd	r0, [sp, #24]
   275c8:	strd	r0, [r4, #32]
   275cc:	mov	r0, r6
   275d0:	mov	r1, r7
   275d4:	strd	r0, [r4, #40]	; 0x28
   275d8:	ldrd	r0, [sp, #40]	; 0x28
   275dc:	strd	r0, [r4, #48]	; 0x30
   275e0:	b	27650 <__assert_fail@plt+0x1508c>
   275e4:	cmp	r5, #4
   275e8:	ble	2766c <__assert_fail@plt+0x150a8>
   275ec:	add	r3, r3, #1
   275f0:	str	r3, [r4, #156]	; 0x9c
   275f4:	mov	r2, #100	; 0x64
   275f8:	mov	r3, #0
   275fc:	mov	r0, r6
   27600:	mov	r1, r7
   27604:	bl	4431c <__assert_fail@plt+0x31d58>
   27608:	strd	r2, [r4, #64]	; 0x40
   2760c:	mov	r2, #100	; 0x64
   27610:	mov	r3, #0
   27614:	mov	r0, r6
   27618:	mov	r1, r7
   2761c:	bl	4431c <__assert_fail@plt+0x31d58>
   27620:	mov	r2, #100	; 0x64
   27624:	mov	r3, #0
   27628:	bl	4431c <__assert_fail@plt+0x31d58>
   2762c:	strd	r2, [r4, #56]	; 0x38
   27630:	movw	r2, #10000	; 0x2710
   27634:	mov	r3, #0
   27638:	mov	r0, r6
   2763c:	mov	r1, r7
   27640:	bl	4431c <__assert_fail@plt+0x31d58>
   27644:	strd	r0, [r4, #40]	; 0x28
   27648:	sub	r5, r5, #4
   2764c:	str	r5, [r4, #48]	; 0x30
   27650:	ldrd	r4, [sp]
   27654:	ldrd	r6, [sp, #8]
   27658:	ldr	r8, [sp, #16]
   2765c:	ldr	lr, [sp, #20]
   27660:	add	sp, sp, #24
   27664:	add	sp, sp, #8
   27668:	bx	lr
   2766c:	ldr	r3, [r4, #172]	; 0xac
   27670:	add	r3, r3, #1
   27674:	str	r3, [r4, #172]	; 0xac
   27678:	cmp	r5, #2
   2767c:	ble	276bc <__assert_fail@plt+0x150f8>
   27680:	mov	r2, #100	; 0x64
   27684:	mov	r3, #0
   27688:	mov	r0, r6
   2768c:	mov	r1, r7
   27690:	bl	4431c <__assert_fail@plt+0x31d58>
   27694:	strd	r0, [r4, #72]	; 0x48
   27698:	mov	r2, #100	; 0x64
   2769c:	mov	r3, #0
   276a0:	mov	r0, r6
   276a4:	mov	r1, r7
   276a8:	bl	4431c <__assert_fail@plt+0x31d58>
   276ac:	strd	r2, [r4, #80]	; 0x50
   276b0:	b	276cc <__assert_fail@plt+0x15108>
   276b4:	mov	r3, #1
   276b8:	str	r3, [r0, #172]	; 0xac
   276bc:	strd	r6, [r4, #72]	; 0x48
   276c0:	mov	r2, #0
   276c4:	mov	r3, #0
   276c8:	strd	r2, [r4, #80]	; 0x50
   276cc:	mov	r3, #0
   276d0:	str	r3, [r4, #88]	; 0x58
   276d4:	str	r3, [r4, #92]	; 0x5c
   276d8:	mov	r3, #2
   276dc:	str	r3, [r4, #28]
   276e0:	b	27650 <__assert_fail@plt+0x1508c>
   276e4:	sub	sp, sp, #8
   276e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   276ec:	strd	r6, [sp, #8]
   276f0:	strd	r8, [sp, #16]
   276f4:	strd	sl, [sp, #24]
   276f8:	str	lr, [sp, #32]
   276fc:	sub	sp, sp, #36	; 0x24
   27700:	add	r1, sp, #68	; 0x44
   27704:	stmib	r1, {r2, r3}
   27708:	ldrd	r2, [sp, #72]	; 0x48
   2770c:	strd	r2, [sp]
   27710:	ldrd	r8, [sp, #80]	; 0x50
   27714:	ldrd	r2, [sp, #88]	; 0x58
   27718:	strd	r2, [sp, #16]
   2771c:	ldrd	r2, [sp, #96]	; 0x60
   27720:	strd	r2, [sp, #8]
   27724:	ldrd	sl, [sp, #104]	; 0x68
   27728:	ldrd	r6, [sp, #112]	; 0x70
   2772c:	ldr	r3, [sp, #120]	; 0x78
   27730:	ldr	r2, [sp, #128]	; 0x80
   27734:	cmp	r2, #0
   27738:	blt	2784c <__assert_fail@plt+0x15288>
   2773c:	ldr	r2, [r0, #144]	; 0x90
   27740:	adds	r3, r2, r3
   27744:	movvs	lr, #1
   27748:	movvc	lr, #0
   2774c:	str	r3, [r0, #144]	; 0x90
   27750:	ldrd	r2, [r0, #136]	; 0x88
   27754:	adds	r4, r2, r6
   27758:	adcs	r5, r3, r7
   2775c:	movvs	ip, #1
   27760:	movvc	ip, #0
   27764:	strd	r4, [r0, #136]	; 0x88
   27768:	ldrd	r2, [r0, #128]	; 0x80
   2776c:	adds	r4, r2, sl
   27770:	adcs	r5, r3, fp
   27774:	movvs	r1, #1
   27778:	movvc	r1, #0
   2777c:	strd	r4, [r0, #128]	; 0x80
   27780:	ldrd	r2, [r0, #120]	; 0x78
   27784:	ldrd	r6, [sp, #8]
   27788:	adds	r4, r2, r6
   2778c:	adcs	r5, r3, r7
   27790:	movvs	r2, #1
   27794:	movvc	r2, #0
   27798:	strd	r4, [r0, #120]	; 0x78
   2779c:	ldrd	r4, [r0, #112]	; 0x70
   277a0:	ldrd	sl, [sp, #16]
   277a4:	adds	r6, r4, sl
   277a8:	adcs	r7, r5, fp
   277ac:	movvs	r3, #1
   277b0:	movvc	r3, #0
   277b4:	strd	r6, [r0, #112]	; 0x70
   277b8:	ldrd	r4, [r0, #104]	; 0x68
   277bc:	adds	r6, r4, r8
   277c0:	adcs	r7, r5, r9
   277c4:	movvs	r8, #1
   277c8:	movvc	r8, #0
   277cc:	strd	r6, [r0, #104]	; 0x68
   277d0:	ldrd	r4, [r0, #96]	; 0x60
   277d4:	ldrd	sl, [sp]
   277d8:	adds	r6, r4, sl
   277dc:	adcs	r7, r5, fp
   277e0:	strd	r6, [r0, #96]	; 0x60
   277e4:	and	lr, lr, #1
   277e8:	and	ip, ip, #1
   277ec:	orr	ip, lr, ip
   277f0:	and	r1, r1, #1
   277f4:	orr	r1, ip, r1
   277f8:	and	r2, r2, #1
   277fc:	orr	r2, r1, r2
   27800:	and	r3, r3, #1
   27804:	orr	r3, r2, r3
   27808:	and	r8, r8, #1
   2780c:	orrvc	r8, r3, r8
   27810:	movvs	r8, #1
   27814:	cmp	r8, #0
   27818:	moveq	r3, #1
   2781c:	strbeq	r3, [r0, #153]	; 0x99
   27820:	moveq	r0, r3
   27824:	movne	r0, #0
   27828:	add	sp, sp, #36	; 0x24
   2782c:	ldrd	r4, [sp]
   27830:	ldrd	r6, [sp, #8]
   27834:	ldrd	r8, [sp, #16]
   27838:	ldrd	sl, [sp, #24]
   2783c:	ldr	lr, [sp, #32]
   27840:	add	sp, sp, #36	; 0x24
   27844:	add	sp, sp, #8
   27848:	bx	lr
   2784c:	mov	r2, #0
   27850:	str	r2, [sp, #28]
   27854:	ldr	r2, [r0, #144]	; 0x90
   27858:	subs	r3, r2, r3
   2785c:	movvs	r2, #1
   27860:	strvs	r2, [sp, #28]
   27864:	str	r3, [r0, #144]	; 0x90
   27868:	mov	ip, #0
   2786c:	ldrd	r2, [r0, #136]	; 0x88
   27870:	subs	r4, r2, r6
   27874:	sbcs	r5, r3, r7
   27878:	movvs	ip, #1
   2787c:	strd	r4, [r0, #136]	; 0x88
   27880:	mov	r1, #0
   27884:	ldrd	r2, [r0, #128]	; 0x80
   27888:	subs	r4, r2, sl
   2788c:	sbcs	r5, r3, fp
   27890:	movvs	r1, #1
   27894:	strd	r4, [r0, #128]	; 0x80
   27898:	mov	r2, #0
   2789c:	ldrd	r4, [r0, #120]	; 0x78
   278a0:	ldrd	sl, [sp, #8]
   278a4:	subs	r6, r4, sl
   278a8:	sbcs	r7, r5, fp
   278ac:	movvs	r2, #1
   278b0:	strd	r6, [r0, #120]	; 0x78
   278b4:	mov	r3, #0
   278b8:	ldrd	r4, [r0, #112]	; 0x70
   278bc:	ldrd	sl, [sp, #16]
   278c0:	subs	r6, r4, sl
   278c4:	sbcs	r7, r5, fp
   278c8:	movvs	r3, #1
   278cc:	strd	r6, [r0, #112]	; 0x70
   278d0:	mov	lr, #0
   278d4:	ldrd	r4, [r0, #104]	; 0x68
   278d8:	subs	r6, r4, r8
   278dc:	sbcs	r7, r5, r9
   278e0:	movvs	lr, #1
   278e4:	strd	r6, [r0, #104]	; 0x68
   278e8:	mov	r9, #0
   278ec:	ldrd	r4, [r0, #96]	; 0x60
   278f0:	ldrd	sl, [sp]
   278f4:	subs	r6, r4, sl
   278f8:	sbcs	r7, r5, fp
   278fc:	movvs	r9, #1
   27900:	strd	r6, [r0, #96]	; 0x60
   27904:	ldr	r4, [sp, #28]
   27908:	and	r8, r4, #1
   2790c:	and	ip, ip, #1
   27910:	orr	r8, r8, ip
   27914:	and	r1, r1, #1
   27918:	orr	r8, r8, r1
   2791c:	and	r2, r2, #1
   27920:	orr	r8, r8, r2
   27924:	and	r3, r3, #1
   27928:	orr	r8, r8, r3
   2792c:	and	lr, lr, #1
   27930:	orr	r8, r8, lr
   27934:	and	r9, r9, #1
   27938:	orr	r8, r8, r9
   2793c:	b	27814 <__assert_fail@plt+0x15250>
   27940:	ldr	r3, [r1, #24]
   27944:	cmp	r3, #0
   27948:	blt	279b4 <__assert_fail@plt+0x153f0>
   2794c:	ldr	r3, [r0]
   27950:	ldr	r2, [r1]
   27954:	eor	r3, r3, r2
   27958:	ldr	r2, [r0, #4]
   2795c:	ldr	ip, [r1, #4]
   27960:	eor	r2, r2, ip
   27964:	orr	r3, r3, r2
   27968:	ldr	r2, [r0, #8]
   2796c:	ldr	ip, [r1, #8]
   27970:	eor	r2, r2, ip
   27974:	orr	r3, r3, r2
   27978:	ldr	r2, [r0, #12]
   2797c:	ldr	ip, [r1, #12]
   27980:	eor	r2, r2, ip
   27984:	orr	r3, r3, r2
   27988:	ldr	r2, [r0, #16]
   2798c:	ldr	ip, [r1, #16]
   27990:	eor	r2, r2, ip
   27994:	orr	r3, r3, r2
   27998:	ldr	r2, [r0, #20]
   2799c:	ldr	r1, [r1, #20]
   279a0:	eor	r2, r2, r1
   279a4:	orrs	r3, r3, r2
   279a8:	moveq	r0, #1
   279ac:	movne	r0, #0
   279b0:	bx	lr
   279b4:	mov	r0, #0
   279b8:	bx	lr
   279bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   279c0:	strd	r6, [sp, #8]
   279c4:	str	r8, [sp, #16]
   279c8:	str	lr, [sp, #20]
   279cc:	mov	r7, r0
   279d0:	mov	r6, r1
   279d4:	movw	r4, #36396	; 0x8e2c
   279d8:	movt	r4, #4
   279dc:	movw	r1, #39256	; 0x9958
   279e0:	movt	r1, #4
   279e4:	mov	r5, r4
   279e8:	mov	r0, r6
   279ec:	bl	11f1c <strcmp@plt>
   279f0:	cmp	r0, #0
   279f4:	beq	27a64 <__assert_fail@plt+0x154a0>
   279f8:	ldr	r1, [r4, #12]!
   279fc:	cmp	r1, #0
   27a00:	bne	279e4 <__assert_fail@plt+0x15420>
   27a04:	ldr	r1, [r7, #188]	; 0xbc
   27a08:	cmp	r1, #0
   27a0c:	beq	27a34 <__assert_fail@plt+0x15470>
   27a10:	add	r7, r7, #188	; 0xbc
   27a14:	mov	r5, r7
   27a18:	mov	r0, r6
   27a1c:	bl	11f1c <strcmp@plt>
   27a20:	cmp	r0, #0
   27a24:	beq	27a64 <__assert_fail@plt+0x154a0>
   27a28:	ldr	r1, [r7, #12]!
   27a2c:	cmp	r1, #0
   27a30:	bne	27a14 <__assert_fail@plt+0x15450>
   27a34:	ldr	r4, [pc, #64]	; 27a7c <__assert_fail@plt+0x154b8>
   27a38:	movw	r1, #39260	; 0x995c
   27a3c:	movt	r1, #4
   27a40:	mov	r5, r4
   27a44:	mov	r0, r6
   27a48:	bl	11f1c <strcmp@plt>
   27a4c:	cmp	r0, #0
   27a50:	beq	27a64 <__assert_fail@plt+0x154a0>
   27a54:	ldr	r1, [r4, #12]!
   27a58:	cmp	r1, #0
   27a5c:	bne	27a40 <__assert_fail@plt+0x1547c>
   27a60:	mov	r5, r1
   27a64:	mov	r0, r5
   27a68:	ldrd	r4, [sp]
   27a6c:	ldrd	r6, [sp, #8]
   27a70:	ldr	r8, [sp, #16]
   27a74:	add	sp, sp, #20
   27a78:	pop	{pc}		; (ldr pc, [sp], #4)
   27a7c:	andeq	r8, r4, ip, asr lr
   27a80:	orrs	r1, r2, r3
   27a84:	bxeq	lr
   27a88:	push	{lr}		; (str lr, [sp, #-4]!)
   27a8c:	sub	sp, sp, #12
   27a90:	eor	r0, r0, #1
   27a94:	movw	r1, #39264	; 0x9960
   27a98:	movt	r1, #4
   27a9c:	movw	ip, #46408	; 0xb548
   27aa0:	movt	ip, #5
   27aa4:	ldr	lr, [sp, #16]
   27aa8:	str	lr, [sp]
   27aac:	add	r1, r1, r0
   27ab0:	ldr	r0, [ip]
   27ab4:	bl	1230c <fprintf@plt>
   27ab8:	mov	r0, #1
   27abc:	add	sp, sp, #12
   27ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   27ac4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27ac8:	str	r6, [sp, #8]
   27acc:	strd	r8, [sp, #12]
   27ad0:	str	lr, [sp, #20]
   27ad4:	sub	sp, sp, #8
   27ad8:	mov	r4, r0
   27adc:	mov	r5, r1
   27ae0:	mov	r6, r2
   27ae4:	ldrb	r3, [r0, #187]	; 0xbb
   27ae8:	cmp	r3, #0
   27aec:	moveq	r0, #0
   27af0:	strbeq	r0, [r1]
   27af4:	beq	27b38 <__assert_fail@plt+0x15574>
   27af8:	ldr	r3, [r4, #8]
   27afc:	ldr	r2, [r4, #12]
   27b00:	adds	r8, r3, #1
   27b04:	adc	r9, r2, #0
   27b08:	cmp	r9, #0
   27b0c:	cmpeq	r8, #13
   27b10:	bhi	27b78 <__assert_fail@plt+0x155b4>
   27b14:	mov	r2, #11
   27b18:	mla	r3, r2, r3, r2
   27b1c:	ldr	r2, [pc, #156]	; 27bc0 <__assert_fail@plt+0x155fc>
   27b20:	add	r3, r2, r3
   27b24:	movw	r2, #35960	; 0x8c78
   27b28:	movt	r2, #4
   27b2c:	mov	r1, r6
   27b30:	mov	r0, r5
   27b34:	bl	12330 <snprintf@plt>
   27b38:	ldr	r3, [r4, #16]
   27b3c:	cmp	r3, #6
   27b40:	bhi	27b5c <__assert_fail@plt+0x15598>
   27b44:	mvn	r2, r0
   27b48:	lsr	r2, r2, #31
   27b4c:	cmp	r0, r6
   27b50:	movge	r2, #0
   27b54:	cmp	r2, #0
   27b58:	bne	27b98 <__assert_fail@plt+0x155d4>
   27b5c:	mov	r0, r5
   27b60:	add	sp, sp, #8
   27b64:	ldrd	r4, [sp]
   27b68:	ldr	r6, [sp, #8]
   27b6c:	ldrd	r8, [sp, #12]
   27b70:	add	sp, sp, #20
   27b74:	pop	{pc}		; (ldr pc, [sp], #4)
   27b78:	str	r3, [sp]
   27b7c:	str	r2, [sp, #4]
   27b80:	movw	r2, #39276	; 0x996c
   27b84:	movt	r2, #4
   27b88:	mov	r1, r6
   27b8c:	mov	r0, r5
   27b90:	bl	12330 <snprintf@plt>
   27b94:	b	27b38 <__assert_fail@plt+0x15574>
   27b98:	movw	r2, #42464	; 0xa5e0
   27b9c:	movt	r2, #4
   27ba0:	ldr	r1, [pc, #28]	; 27bc4 <__assert_fail@plt+0x15600>
   27ba4:	add	r3, r1, r3, lsl #2
   27ba8:	cmp	r0, #0
   27bac:	addeq	r2, r2, #1
   27bb0:	sub	r1, r6, r0
   27bb4:	add	r0, r5, r0
   27bb8:	bl	12330 <snprintf@plt>
   27bbc:	b	27b5c <__assert_fail@plt+0x15598>
   27bc0:	muleq	r4, ip, r0
   27bc4:	andeq	r9, r4, r8, lsr r1
   27bc8:	strd	r4, [sp, #-16]!
   27bcc:	str	r6, [sp, #8]
   27bd0:	str	lr, [sp, #12]
   27bd4:	mov	r4, r1
   27bd8:	subs	r6, r0, #0
   27bdc:	movlt	r2, #45	; 0x2d
   27be0:	movge	r2, #43	; 0x2b
   27be4:	movw	r3, #46021	; 0xb3c5
   27be8:	movt	r3, #37282	; 0x91a2
   27bec:	smull	r3, r5, r3, r6
   27bf0:	add	r5, r5, r6
   27bf4:	asr	r3, r6, #31
   27bf8:	rsb	r5, r3, r5, asr #11
   27bfc:	eor	r3, r5, r5, asr #31
   27c00:	sub	r3, r3, r5, asr #31
   27c04:	movw	r1, #39284	; 0x9974
   27c08:	movt	r1, #4
   27c0c:	mov	r0, r4
   27c10:	bl	12480 <sprintf@plt>
   27c14:	mov	r3, #3600	; 0xe10
   27c18:	mls	r5, r3, r5, r6
   27c1c:	cmp	r5, #0
   27c20:	beq	27ce4 <__assert_fail@plt+0x15720>
   27c24:	add	ip, r4, r0
   27c28:	eor	r3, r5, r5, asr #31
   27c2c:	sub	r3, r3, r5, asr #31
   27c30:	movw	r2, #34953	; 0x8889
   27c34:	movt	r2, #34952	; 0x8888
   27c38:	smull	r1, r2, r2, r3
   27c3c:	add	r2, r2, r3
   27c40:	asr	r2, r2, #5
   27c44:	asr	r5, r3, #31
   27c48:	sub	r1, r2, r5
   27c4c:	rsb	lr, r1, r1, lsl #4
   27c50:	mov	r1, #58	; 0x3a
   27c54:	strb	r1, [r4, r0]
   27c58:	movw	r1, #33205	; 0x81b5
   27c5c:	movt	r1, #6990	; 0x1b4e
   27c60:	smull	r0, r1, r1, r3
   27c64:	rsb	r1, r5, r1, asr #6
   27c68:	add	r1, r1, #48	; 0x30
   27c6c:	strb	r1, [ip, #1]
   27c70:	sub	r2, r2, r5
   27c74:	movw	r1, #26215	; 0x6667
   27c78:	movt	r1, #26214	; 0x6666
   27c7c:	smull	r1, r0, r1, r2
   27c80:	asr	r1, r2, #31
   27c84:	rsb	r1, r1, r0, asr #2
   27c88:	add	r1, r1, r1, lsl #2
   27c8c:	sub	r2, r2, r1, lsl #1
   27c90:	add	r2, r2, #48	; 0x30
   27c94:	strb	r2, [ip, #2]
   27c98:	subs	r1, r3, lr, lsl #2
   27c9c:	addeq	r2, ip, #3
   27ca0:	beq	27cdc <__assert_fail@plt+0x15718>
   27ca4:	mov	r3, #58	; 0x3a
   27ca8:	strb	r3, [ip, #3]
   27cac:	movw	r3, #26215	; 0x6667
   27cb0:	movt	r3, #26214	; 0x6666
   27cb4:	smull	r3, r2, r3, r1
   27cb8:	asr	r3, r1, #31
   27cbc:	rsb	r3, r3, r2, asr #2
   27cc0:	add	r2, r3, #48	; 0x30
   27cc4:	strb	r2, [ip, #4]
   27cc8:	add	r2, ip, #6
   27ccc:	add	r3, r3, r3, lsl #2
   27cd0:	sub	r1, r1, r3, lsl #1
   27cd4:	add	r1, r1, #48	; 0x30
   27cd8:	strb	r1, [ip, #5]
   27cdc:	mov	r3, #0
   27ce0:	strb	r3, [r2]
   27ce4:	mov	r0, r4
   27ce8:	ldrd	r4, [sp]
   27cec:	ldr	r6, [sp, #8]
   27cf0:	add	sp, sp, #12
   27cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   27cf8:	str	r4, [sp, #-8]!
   27cfc:	str	lr, [sp, #4]
   27d00:	mov	r4, r1
   27d04:	movw	r2, #34079	; 0x851f
   27d08:	movt	r2, #20971	; 0x51eb
   27d0c:	smull	r2, r3, r2, r0
   27d10:	asr	r2, r0, #31
   27d14:	rsb	r2, r2, r3, asr #5
   27d18:	mov	r3, #100	; 0x64
   27d1c:	mls	r3, r3, r2, r0
   27d20:	add	r2, r2, #19
   27d24:	movw	ip, #63636	; 0xf894
   27d28:	movt	ip, #65535	; 0xffff
   27d2c:	movw	r1, #39292	; 0x997c
   27d30:	movt	r1, #4
   27d34:	cmp	r3, #0
   27d38:	rsblt	r3, r3, #0
   27d3c:	cmp	r2, #0
   27d40:	rsblt	r2, r2, #0
   27d44:	cmp	r0, ip
   27d48:	addge	r1, r1, #1
   27d4c:	mov	r0, r4
   27d50:	bl	12480 <sprintf@plt>
   27d54:	mov	r0, r4
   27d58:	ldr	r4, [sp]
   27d5c:	add	sp, sp, #4
   27d60:	pop	{pc}		; (ldr pc, [sp], #4)
   27d64:	push	{r0, r1, r2, r3}
   27d68:	str	r4, [sp, #-8]!
   27d6c:	str	lr, [sp, #4]
   27d70:	sub	sp, sp, #8
   27d74:	movw	r4, #46408	; 0xb548
   27d78:	movt	r4, #5
   27d7c:	ldr	r3, [r4]
   27d80:	mov	r2, #6
   27d84:	mov	r1, #1
   27d88:	movw	r0, #39304	; 0x9988
   27d8c:	movt	r0, #4
   27d90:	bl	12138 <fwrite@plt>
   27d94:	add	r2, sp, #20
   27d98:	str	r2, [sp, #4]
   27d9c:	ldr	r1, [sp, #16]
   27da0:	ldr	r0, [r4]
   27da4:	bl	12444 <vfprintf@plt>
   27da8:	add	sp, sp, #8
   27dac:	ldr	r4, [sp]
   27db0:	ldr	lr, [sp, #4]
   27db4:	add	sp, sp, #8
   27db8:	add	sp, sp, #16
   27dbc:	bx	lr
   27dc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27dc4:	strd	r6, [sp, #8]
   27dc8:	str	r8, [sp, #16]
   27dcc:	str	lr, [sp, #20]
   27dd0:	sub	sp, sp, #40	; 0x28
   27dd4:	mov	r6, r1
   27dd8:	mov	r4, r2
   27ddc:	mov	r5, r3
   27de0:	mov	r3, #0
   27de4:	str	r3, [sp, #4]
   27de8:	str	r3, [sp]
   27dec:	mov	r3, r0
   27df0:	movw	r2, #39312	; 0x9990
   27df4:	movt	r2, #4
   27df8:	mov	r1, r5
   27dfc:	mov	r0, r4
   27e00:	bl	43de4 <__assert_fail@plt+0x31820>
   27e04:	cmp	r6, #0
   27e08:	cmpne	r5, r0
   27e0c:	ble	27e20 <__assert_fail@plt+0x1585c>
   27e10:	mov	r7, r0
   27e14:	ldr	r3, [r6, #176]	; 0xb0
   27e18:	cmp	r3, #0
   27e1c:	bne	27e3c <__assert_fail@plt+0x15878>
   27e20:	mov	r0, r4
   27e24:	add	sp, sp, #40	; 0x28
   27e28:	ldrd	r4, [sp]
   27e2c:	ldrd	r6, [sp, #8]
   27e30:	ldr	r8, [sp, #16]
   27e34:	add	sp, sp, #20
   27e38:	pop	{pc}		; (ldr pc, [sp], #4)
   27e3c:	add	r8, r4, r0
   27e40:	add	r1, sp, #12
   27e44:	ldr	r0, [r6, #24]
   27e48:	bl	27bc8 <__assert_fail@plt+0x15604>
   27e4c:	mov	r3, r0
   27e50:	movw	r2, #39340	; 0x99ac
   27e54:	movt	r2, #4
   27e58:	sub	r1, r5, r7
   27e5c:	mov	r0, r8
   27e60:	bl	12330 <snprintf@plt>
   27e64:	b	27e20 <__assert_fail@plt+0x1585c>
   27e68:	bx	lr
   27e6c:	bx	lr
   27e70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27e74:	strd	r6, [sp, #8]
   27e78:	strd	r8, [sp, #16]
   27e7c:	strd	sl, [sp, #24]
   27e80:	str	lr, [sp, #32]
   27e84:	sub	sp, sp, #1504	; 0x5e0
   27e88:	sub	sp, sp, #12
   27e8c:	mov	fp, r0
   27e90:	mov	r5, #0
   27e94:	add	r3, sp, #1408	; 0x580
   27e98:	add	r3, r3, #8
   27e9c:	strh	r5, [r3]
   27ea0:	add	r8, sp, #296	; 0x128
   27ea4:	mov	sl, r3
   27ea8:	str	r5, [sp, #104]	; 0x68
   27eac:	mvn	r6, #1
   27eb0:	movw	r7, #36396	; 0x8e2c
   27eb4:	movt	r7, #4
   27eb8:	str	r5, [sp, #116]	; 0x74
   27ebc:	str	r5, [sp, #128]	; 0x80
   27ec0:	mov	r3, #51712	; 0xca00
   27ec4:	movt	r3, #15258	; 0x3b9a
   27ec8:	str	r3, [sp, #132]	; 0x84
   27ecc:	b	28858 <__assert_fail@plt+0x16294>
   27ed0:	ldr	r0, [fp]
   27ed4:	ldrb	r1, [r0]
   27ed8:	cmp	r1, #9
   27edc:	bcc	27efc <__assert_fail@plt+0x15938>
   27ee0:	cmp	r1, #13
   27ee4:	bls	27ef0 <__assert_fail@plt+0x1592c>
   27ee8:	cmp	r1, #32
   27eec:	bne	27efc <__assert_fail@plt+0x15938>
   27ef0:	add	r0, r0, #1
   27ef4:	str	r0, [fp]
   27ef8:	b	27ed0 <__assert_fail@plt+0x1590c>
   27efc:	sub	r3, r1, #48	; 0x30
   27f00:	cmp	r3, #9
   27f04:	bls	27f44 <__assert_fail@plt+0x15980>
   27f08:	sub	r3, r1, #43	; 0x2b
   27f0c:	tst	r3, #253	; 0xfd
   27f10:	beq	2a42c <__assert_fail@plt+0x17e68>
   27f14:	cmp	r1, #65	; 0x41
   27f18:	bcc	27f34 <__assert_fail@plt+0x15970>
   27f1c:	cmp	r1, #90	; 0x5a
   27f20:	bls	2815c <__assert_fail@plt+0x15b98>
   27f24:	sub	r3, r1, #97	; 0x61
   27f28:	uxtb	r3, r3
   27f2c:	cmp	r3, #25
   27f30:	bls	28164 <__assert_fail@plt+0x15ba0>
   27f34:	cmp	r1, #40	; 0x28
   27f38:	bne	2846c <__assert_fail@plt+0x15ea8>
   27f3c:	mov	r2, #0
   27f40:	b	28494 <__assert_fail@plt+0x15ed0>
   27f44:	cmp	r1, #45	; 0x2d
   27f48:	movne	r3, #0
   27f4c:	moveq	r3, #1
   27f50:	sub	r2, r1, #43	; 0x2b
   27f54:	tst	r2, #253	; 0xfd
   27f58:	bne	27ff4 <__assert_fail@plt+0x15a30>
   27f5c:	cmp	r3, #0
   27f60:	mvnne	lr, #0
   27f64:	moveq	lr, #1
   27f68:	add	r0, r0, #1
   27f6c:	str	r0, [fp]
   27f70:	ldrb	r1, [r0]
   27f74:	cmp	r1, #9
   27f78:	bcc	27f8c <__assert_fail@plt+0x159c8>
   27f7c:	cmp	r1, #13
   27f80:	bls	27f68 <__assert_fail@plt+0x159a4>
   27f84:	cmp	r1, #32
   27f88:	beq	27f68 <__assert_fail@plt+0x159a4>
   27f8c:	sub	r3, r1, #48	; 0x30
   27f90:	cmp	r3, #9
   27f94:	bhi	27ed0 <__assert_fail@plt+0x1590c>
   27f98:	mov	r6, #0
   27f9c:	mov	ip, #10
   27fa0:	cmp	lr, #0
   27fa4:	rsblt	r3, r1, #48	; 0x30
   27fa8:	subge	r3, r1, #48	; 0x30
   27fac:	adds	r6, r6, r3
   27fb0:	mov	r9, r6
   27fb4:	bvs	2a424 <__assert_fail@plt+0x17e60>
   27fb8:	ldrb	r1, [r0, #1]!
   27fbc:	sub	r3, r1, #48	; 0x30
   27fc0:	cmp	r3, #9
   27fc4:	bls	27ffc <__assert_fail@plt+0x15a38>
   27fc8:	and	r1, r1, #253	; 0xfd
   27fcc:	cmp	r1, #44	; 0x2c
   27fd0:	bne	28118 <__assert_fail@plt+0x15b54>
   27fd4:	ldrb	r2, [r0, #1]
   27fd8:	sub	r3, r2, #48	; 0x30
   27fdc:	cmp	r3, #9
   27fe0:	bhi	28118 <__assert_fail@plt+0x15b54>
   27fe4:	add	r3, r0, #2
   27fe8:	sub	r2, r2, #48	; 0x30
   27fec:	mov	r0, #8
   27ff0:	b	2801c <__assert_fail@plt+0x15a58>
   27ff4:	mov	lr, #0
   27ff8:	b	27f98 <__assert_fail@plt+0x159d4>
   27ffc:	smull	r2, r3, r6, ip
   28000:	mov	r6, r2
   28004:	cmp	r3, r2, asr #31
   28008:	beq	27fa0 <__assert_fail@plt+0x159dc>
   2800c:	mov	r6, #63	; 0x3f
   28010:	b	28150 <__assert_fail@plt+0x15b8c>
   28014:	subs	r0, r0, #1
   28018:	beq	28044 <__assert_fail@plt+0x15a80>
   2801c:	add	r2, r2, r2, lsl #2
   28020:	lsl	ip, r2, #1
   28024:	mov	r2, ip
   28028:	ldrb	r1, [r3]
   2802c:	sub	r6, r1, #48	; 0x30
   28030:	cmp	r6, #9
   28034:	bhi	28014 <__assert_fail@plt+0x15a50>
   28038:	add	r3, r3, #1
   2803c:	add	r2, ip, r6
   28040:	b	28014 <__assert_fail@plt+0x15a50>
   28044:	cmp	lr, #0
   28048:	blt	280b0 <__assert_fail@plt+0x15aec>
   2804c:	ldrb	r1, [r3]
   28050:	sub	r1, r1, #48	; 0x30
   28054:	cmp	r1, #9
   28058:	bhi	280f8 <__assert_fail@plt+0x15b34>
   2805c:	ldrb	r1, [r3, #1]!
   28060:	sub	r1, r1, #48	; 0x30
   28064:	cmp	r1, #9
   28068:	bls	2805c <__assert_fail@plt+0x15a98>
   2806c:	adds	r1, r2, #0
   28070:	movne	r1, #1
   28074:	ands	r1, r1, lr, lsr #31
   28078:	beq	280f8 <__assert_fail@plt+0x15b34>
   2807c:	mov	r1, #0
   28080:	subs	r9, r9, #1
   28084:	movvs	r1, #1
   28088:	cmp	r1, #0
   2808c:	movne	r6, #63	; 0x3f
   28090:	bne	28150 <__assert_fail@plt+0x15b8c>
   28094:	str	r9, [sp, #1456]	; 0x5b0
   28098:	ldr	r1, [sp, #132]	; 0x84
   2809c:	sub	r2, r1, r2
   280a0:	str	r2, [sp, #1460]	; 0x5b4
   280a4:	str	r3, [fp]
   280a8:	mov	r6, #276	; 0x114
   280ac:	b	28150 <__assert_fail@plt+0x15b8c>
   280b0:	ldrb	r1, [r3]
   280b4:	sub	r0, r1, #48	; 0x30
   280b8:	cmp	r0, #9
   280bc:	bhi	2806c <__assert_fail@plt+0x15aa8>
   280c0:	cmp	r1, #48	; 0x30
   280c4:	bne	280e0 <__assert_fail@plt+0x15b1c>
   280c8:	ldrb	r1, [r3, #1]!
   280cc:	sub	r0, r1, #48	; 0x30
   280d0:	cmp	r0, #9
   280d4:	bhi	2806c <__assert_fail@plt+0x15aa8>
   280d8:	cmp	r1, #48	; 0x30
   280dc:	beq	280c8 <__assert_fail@plt+0x15b04>
   280e0:	add	r2, r2, #1
   280e4:	ldrb	r1, [r3]
   280e8:	sub	r1, r1, #48	; 0x30
   280ec:	cmp	r1, #9
   280f0:	bls	2805c <__assert_fail@plt+0x15a98>
   280f4:	b	2806c <__assert_fail@plt+0x15aa8>
   280f8:	str	r9, [sp, #1456]	; 0x5b0
   280fc:	str	r2, [sp, #1460]	; 0x5b4
   28100:	str	r3, [fp]
   28104:	cmp	lr, #0
   28108:	movw	r3, #277	; 0x115
   2810c:	movne	r6, #276	; 0x114
   28110:	moveq	r6, r3
   28114:	b	28150 <__assert_fail@plt+0x15b8c>
   28118:	lsr	r3, lr, #31
   2811c:	strb	r3, [sp, #1456]	; 0x5b0
   28120:	mov	r2, r9
   28124:	asr	r3, r9, #31
   28128:	strd	r2, [sp, #120]	; 0x78
   2812c:	ldr	r3, [fp]
   28130:	sub	r3, r0, r3
   28134:	str	r3, [sp, #160]	; 0xa0
   28138:	str	r0, [fp]
   2813c:	movw	r2, #274	; 0x112
   28140:	movw	r3, #275	; 0x113
   28144:	cmp	lr, #0
   28148:	movne	r6, r2
   2814c:	moveq	r6, r3
   28150:	add	r3, r7, r6
   28154:	ldrb	r3, [r3, #1992]	; 0x7c8
   28158:	b	28894 <__assert_fail@plt+0x162d0>
   2815c:	add	r3, sp, #220	; 0xdc
   28160:	b	28168 <__assert_fail@plt+0x15ba4>
   28164:	add	r3, sp, #220	; 0xdc
   28168:	add	r0, sp, #239	; 0xef
   2816c:	cmp	r3, r0
   28170:	strbcc	r1, [r3], #1
   28174:	ldr	r2, [fp]
   28178:	add	r1, r2, #1
   2817c:	str	r1, [fp]
   28180:	ldrb	r1, [r2, #1]
   28184:	cmp	r1, #65	; 0x41
   28188:	bcc	281a4 <__assert_fail@plt+0x15be0>
   2818c:	cmp	r1, #90	; 0x5a
   28190:	bls	2816c <__assert_fail@plt+0x15ba8>
   28194:	sub	r2, r1, #97	; 0x61
   28198:	uxtb	r2, r2
   2819c:	cmp	r2, #25
   281a0:	bls	2816c <__assert_fail@plt+0x15ba8>
   281a4:	cmp	r1, #46	; 0x2e
   281a8:	beq	2816c <__assert_fail@plt+0x15ba8>
   281ac:	mov	r2, #0
   281b0:	strb	r2, [r3]
   281b4:	ldrb	r3, [sp, #220]	; 0xdc
   281b8:	cmp	r3, r2
   281bc:	beq	281e4 <__assert_fail@plt+0x15c20>
   281c0:	add	r2, sp, #220	; 0xdc
   281c4:	mov	r1, r3
   281c8:	sub	r0, r3, #97	; 0x61
   281cc:	cmp	r0, #25
   281d0:	subls	r1, r3, #32
   281d4:	strb	r1, [r2]
   281d8:	ldrb	r3, [r2, #1]!
   281dc:	cmp	r3, #0
   281e0:	bne	281c4 <__assert_fail@plt+0x15c00>
   281e4:	add	r6, r7, #1248	; 0x4e0
   281e8:	movw	r1, #39348	; 0x99b4
   281ec:	movt	r1, #4
   281f0:	add	r0, sp, #220	; 0xdc
   281f4:	bl	11f1c <strcmp@plt>
   281f8:	cmp	r0, #0
   281fc:	beq	2843c <__assert_fail@plt+0x15e78>
   28200:	ldr	r1, [r6, #12]!
   28204:	cmp	r1, #0
   28208:	bne	281f0 <__assert_fail@plt+0x15c2c>
   2820c:	add	r0, sp, #220	; 0xdc
   28210:	bl	122d0 <strlen@plt>
   28214:	mov	r3, r0
   28218:	str	r0, [sp, #68]	; 0x44
   2821c:	cmp	r0, #3
   28220:	moveq	r3, #1
   28224:	beq	28234 <__assert_fail@plt+0x15c70>
   28228:	cmp	r3, #4
   2822c:	movne	r3, #0
   28230:	beq	2824c <__assert_fail@plt+0x15c88>
   28234:	add	r9, r7, #1296	; 0x510
   28238:	add	r9, r9, #12
   2823c:	movw	r1, #39352	; 0x99b8
   28240:	movt	r1, #4
   28244:	mov	r6, r3
   28248:	b	28284 <__assert_fail@plt+0x15cc0>
   2824c:	ldrb	r3, [sp, #223]	; 0xdf
   28250:	cmp	r3, #46	; 0x2e
   28254:	movne	r3, #0
   28258:	moveq	r3, #1
   2825c:	b	28234 <__assert_fail@plt+0x15c70>
   28260:	add	r0, sp, #220	; 0xdc
   28264:	bl	11f1c <strcmp@plt>
   28268:	clz	r0, r0
   2826c:	lsr	r0, r0, #5
   28270:	cmp	r0, #0
   28274:	bne	28440 <__assert_fail@plt+0x15e7c>
   28278:	ldr	r1, [r9, #12]!
   2827c:	cmp	r1, #0
   28280:	beq	282a8 <__assert_fail@plt+0x15ce4>
   28284:	str	r9, [sp, #56]	; 0x38
   28288:	cmp	r6, #0
   2828c:	beq	28260 <__assert_fail@plt+0x15c9c>
   28290:	mov	r2, #3
   28294:	add	r0, sp, #220	; 0xdc
   28298:	bl	12564 <strncmp@plt>
   2829c:	clz	r0, r0
   282a0:	lsr	r0, r0, #5
   282a4:	b	28270 <__assert_fail@plt+0x15cac>
   282a8:	mov	r6, r0
   282ac:	add	r1, sp, #220	; 0xdc
   282b0:	mov	r0, fp
   282b4:	bl	279bc <__assert_fail@plt+0x153f8>
   282b8:	subs	r3, r0, #0
   282bc:	str	r3, [sp, #56]	; 0x38
   282c0:	bne	28450 <__assert_fail@plt+0x15e8c>
   282c4:	movw	r1, #39380	; 0x99d4
   282c8:	movt	r1, #4
   282cc:	add	r0, sp, #220	; 0xdc
   282d0:	bl	11f1c <strcmp@plt>
   282d4:	cmp	r0, #0
   282d8:	beq	2a43c <__assert_fail@plt+0x17e78>
   282dc:	add	r3, r7, #1600	; 0x640
   282e0:	add	r3, r3, #8
   282e4:	str	r3, [sp, #72]	; 0x48
   282e8:	mov	r9, r3
   282ec:	movw	r1, #39360	; 0x99c0
   282f0:	movt	r1, #4
   282f4:	str	r9, [sp, #56]	; 0x38
   282f8:	add	r0, sp, #220	; 0xdc
   282fc:	bl	11f1c <strcmp@plt>
   28300:	cmp	r0, #0
   28304:	beq	28440 <__assert_fail@plt+0x15e7c>
   28308:	ldr	r1, [r9, #12]!
   2830c:	cmp	r1, #0
   28310:	bne	282f4 <__assert_fail@plt+0x15d30>
   28314:	add	r9, sp, #220	; 0xdc
   28318:	ldr	r3, [sp, #68]	; 0x44
   2831c:	sub	r3, r3, #1
   28320:	str	r3, [sp, #76]	; 0x4c
   28324:	ldrb	r3, [r9, r3]
   28328:	cmp	r3, #83	; 0x53
   2832c:	beq	283bc <__assert_fail@plt+0x15df8>
   28330:	add	r9, r7, #1728	; 0x6c0
   28334:	add	r9, r9, #12
   28338:	movw	r1, #39368	; 0x99c8
   2833c:	movt	r1, #4
   28340:	str	r9, [sp, #56]	; 0x38
   28344:	add	r0, sp, #220	; 0xdc
   28348:	bl	11f1c <strcmp@plt>
   2834c:	cmp	r0, #0
   28350:	beq	28440 <__assert_fail@plt+0x15e7c>
   28354:	ldr	r1, [r9, #12]!
   28358:	cmp	r1, #0
   2835c:	bne	28340 <__assert_fail@plt+0x15d7c>
   28360:	ldr	r3, [sp, #68]	; 0x44
   28364:	cmp	r3, #1
   28368:	beq	2840c <__assert_fail@plt+0x15e48>
   2836c:	ldrb	r3, [sp, #220]	; 0xdc
   28370:	cmp	r3, #0
   28374:	addne	r1, sp, #220	; 0xdc
   28378:	movne	r2, r1
   2837c:	movne	r0, #1
   28380:	beq	2a454 <__assert_fail@plt+0x17e90>
   28384:	cmp	r3, #46	; 0x2e
   28388:	addne	r2, r2, #1
   2838c:	moveq	r6, r0
   28390:	ldrb	r3, [r1, #1]!
   28394:	strb	r3, [r2]
   28398:	cmp	r3, #0
   2839c:	bne	28384 <__assert_fail@plt+0x15dc0>
   283a0:	cmp	r6, #0
   283a4:	beq	2a454 <__assert_fail@plt+0x17e90>
   283a8:	add	r1, sp, #220	; 0xdc
   283ac:	mov	r0, fp
   283b0:	bl	279bc <__assert_fail@plt+0x153f8>
   283b4:	str	r0, [sp, #56]	; 0x38
   283b8:	b	28440 <__assert_fail@plt+0x15e7c>
   283bc:	mov	r3, #0
   283c0:	ldr	r2, [sp, #76]	; 0x4c
   283c4:	strb	r3, [r9, r2]
   283c8:	movw	r1, #39360	; 0x99c0
   283cc:	movt	r1, #4
   283d0:	ldr	r3, [sp, #72]	; 0x48
   283d4:	str	r3, [sp, #56]	; 0x38
   283d8:	add	r0, sp, #220	; 0xdc
   283dc:	bl	11f1c <strcmp@plt>
   283e0:	cmp	r0, #0
   283e4:	beq	28440 <__assert_fail@plt+0x15e7c>
   283e8:	ldr	r3, [sp, #72]	; 0x48
   283ec:	ldr	r1, [r3, #12]!
   283f0:	str	r3, [sp, #72]	; 0x48
   283f4:	cmp	r1, #0
   283f8:	bne	283d0 <__assert_fail@plt+0x15e0c>
   283fc:	mov	r3, #83	; 0x53
   28400:	ldr	r2, [sp, #76]	; 0x4c
   28404:	strb	r3, [r9, r2]
   28408:	b	28330 <__assert_fail@plt+0x15d6c>
   2840c:	ldrb	r3, [sp, #220]	; 0xdc
   28410:	cmp	r3, #65	; 0x41
   28414:	beq	2a448 <__assert_fail@plt+0x17e84>
   28418:	add	r1, r7, #808	; 0x328
   2841c:	ldr	r2, [r1, #12]!
   28420:	cmp	r2, #0
   28424:	beq	2836c <__assert_fail@plt+0x15da8>
   28428:	ldrb	r2, [r2]
   2842c:	cmp	r2, r3
   28430:	bne	2841c <__assert_fail@plt+0x15e58>
   28434:	str	r1, [sp, #56]	; 0x38
   28438:	b	28450 <__assert_fail@plt+0x15e8c>
   2843c:	str	r6, [sp, #56]	; 0x38
   28440:	ldr	r3, [sp, #56]	; 0x38
   28444:	cmp	r3, #0
   28448:	moveq	r6, #63	; 0x3f
   2844c:	beq	28874 <__assert_fail@plt+0x162b0>
   28450:	ldr	r1, [sp, #56]	; 0x38
   28454:	ldr	r2, [r1, #8]
   28458:	asr	r3, r2, #31
   2845c:	add	r0, sp, #1456	; 0x5b0
   28460:	strd	r2, [r0]
   28464:	ldr	r6, [r1, #4]
   28468:	b	28874 <__assert_fail@plt+0x162b0>
   2846c:	add	r3, r0, #1
   28470:	str	r3, [fp]
   28474:	ldrb	r6, [r0]
   28478:	cmp	r6, #0
   2847c:	bgt	28150 <__assert_fail@plt+0x15b8c>
   28480:	mov	r3, #0
   28484:	mov	r6, r3
   28488:	b	28894 <__assert_fail@plt+0x162d0>
   2848c:	cmp	r2, #0
   28490:	beq	27ed0 <__assert_fail@plt+0x1590c>
   28494:	ldr	r3, [fp]
   28498:	add	r1, r3, #1
   2849c:	str	r1, [fp]
   284a0:	ldrb	r3, [r3]
   284a4:	cmp	r3, #0
   284a8:	beq	284c4 <__assert_fail@plt+0x15f00>
   284ac:	cmp	r3, #40	; 0x28
   284b0:	addeq	r2, r2, #1
   284b4:	beq	2848c <__assert_fail@plt+0x15ec8>
   284b8:	cmp	r3, #41	; 0x29
   284bc:	subeq	r2, r2, #1
   284c0:	b	2848c <__assert_fail@plt+0x15ec8>
   284c4:	mov	r3, #0
   284c8:	mov	r6, r3
   284cc:	b	28894 <__assert_fail@plt+0x162d0>
   284d0:	add	r3, r7, r5
   284d4:	ldrb	r4, [r3, #2504]	; 0x9c8
   284d8:	str	r4, [sp, #76]	; 0x4c
   284dc:	cmp	r4, #0
   284e0:	beq	2a250 <__assert_fail@plt+0x17c8c>
   284e4:	add	r3, r7, r4
   284e8:	ldrb	r3, [r3, #2620]	; 0xa3c
   284ec:	str	r3, [sp, #108]	; 0x6c
   284f0:	str	r3, [sp, #112]	; 0x70
   284f4:	rsb	r0, r3, #1
   284f8:	rsb	r0, r0, r0, lsl #3
   284fc:	lsl	r0, r0, #3
   28500:	add	r3, r8, r0
   28504:	add	r2, sp, #248	; 0xf8
   28508:	ldrd	r0, [r0, r8]
   2850c:	strd	r0, [sp, #240]	; 0xf0
   28510:	ldrd	r0, [r3, #8]
   28514:	strd	r0, [r2], #-8
   28518:	ldr	r1, [r3, #16]
   2851c:	str	r1, [r2, #16]
   28520:	ldr	r1, [r3, #20]
   28524:	str	r1, [r2, #20]
   28528:	ldr	r9, [r3, #24]
   2852c:	str	r9, [r2, #24]
   28530:	ldr	r1, [r3, #28]
   28534:	str	r1, [r2, #28]
   28538:	ldr	r5, [r3, #32]
   2853c:	ldr	lr, [r3, #36]	; 0x24
   28540:	str	r5, [r2, #32]
   28544:	str	lr, [r2, #36]	; 0x24
   28548:	ldr	ip, [r3, #40]	; 0x28
   2854c:	ldr	r1, [r3, #44]	; 0x2c
   28550:	str	ip, [r2, #40]	; 0x28
   28554:	str	r1, [sp, #80]	; 0x50
   28558:	str	r1, [r2, #44]	; 0x2c
   2855c:	ldrd	r0, [r3, #48]	; 0x30
   28560:	strd	r0, [r2, #48]	; 0x30
   28564:	ldr	r2, [r3, #8]
   28568:	str	r2, [sp, #84]	; 0x54
   2856c:	ldr	r2, [r3, #12]
   28570:	str	r2, [sp, #88]	; 0x58
   28574:	ldr	r2, [r3, #16]
   28578:	str	r2, [sp, #96]	; 0x60
   2857c:	ldr	r2, [r3, #20]
   28580:	str	r2, [sp, #100]	; 0x64
   28584:	ldr	r2, [r3, #28]
   28588:	str	r2, [sp, #92]	; 0x5c
   2858c:	str	r5, [sp, #68]	; 0x44
   28590:	str	lr, [sp, #72]	; 0x48
   28594:	str	ip, [sp, #56]	; 0x38
   28598:	ldr	r2, [sp, #80]	; 0x50
   2859c:	str	r2, [sp, #60]	; 0x3c
   285a0:	ldr	r3, [r3, #48]	; 0x30
   285a4:	str	r3, [sp, #80]	; 0x50
   285a8:	sub	r1, r4, #4
   285ac:	cmp	r1, #87	; 0x57
   285b0:	ldrls	pc, [pc, r1, lsl #2]
   285b4:	b	2873c <__assert_fail@plt+0x16178>
   285b8:	andeq	r8, r2, r8, lsl r7
   285bc:	andeq	r8, r2, ip, lsr r7
   285c0:	andeq	r8, r2, ip, lsr r7
   285c4:	andeq	r8, r2, ip, lsr r9
   285c8:	andeq	r8, r2, ip, ror #18
   285cc:	muleq	r2, r0, r9
   285d0:			; <UNDEFINED> instruction: 0x000289b4
   285d4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   285d8:	strdeq	r8, [r2], -ip
   285dc:	andeq	r8, r2, r0, lsr #20
   285e0:	andeq	r8, r2, r8, lsr sl
   285e4:	andeq	r8, r2, r0, asr sl
   285e8:	andeq	r8, r2, ip, lsr r7
   285ec:	andeq	r8, r2, ip, lsr r7
   285f0:	andeq	r8, r2, r8, ror #20
   285f4:	muleq	r2, r0, sl
   285f8:			; <UNDEFINED> instruction: 0x00028ab8
   285fc:	andeq	r8, r2, ip, lsr r7
   28600:	andeq	r8, r2, r8, ror #21
   28604:	andeq	r8, r2, r0, lsl fp
   28608:	andeq	r8, r2, r8, lsr fp
   2860c:	andeq	r8, r2, ip, lsr r7
   28610:	andeq	r8, r2, ip, lsr r7
   28614:	andeq	r8, r2, r8, ror #22
   28618:	andeq	r8, r2, ip, lsl #27
   2861c:	muleq	r2, r8, sp
   28620:			; <UNDEFINED> instruction: 0x00028db0
   28624:			; <UNDEFINED> instruction: 0x00028dbc
   28628:	andeq	r8, r2, ip, asr #27
   2862c:	andeq	r8, r2, r8, lsr lr
   28630:	andeq	r8, r2, r8, lsr #29
   28634:	strdeq	r9, [r2], -r8
   28638:	andeq	r9, r2, r8, lsl #2
   2863c:	andeq	r9, r2, r8, lsl r1
   28640:	andeq	r9, r2, r0, lsr r1
   28644:	andeq	r9, r2, r8, asr #2
   28648:	andeq	r9, r2, r4, ror #2
   2864c:	andeq	r9, r2, r0, lsl #3
   28650:	muleq	r2, r4, r1
   28654:	strdeq	r9, [r2], -r8
   28658:	andeq	r9, r2, r4, lsr r2
   2865c:	andeq	r9, r2, r4, lsl #5
   28660:	muleq	r2, r8, r2
   28664:	andeq	r9, r2, r4, asr #5
   28668:	ldrdeq	r9, [r2], -r8
   2866c:	andeq	r8, r2, ip, lsr r7
   28670:	andeq	r9, r2, r4, lsl #6
   28674:	andeq	r9, r2, r0, ror #6
   28678:			; <UNDEFINED> instruction: 0x000293bc
   2867c:	andeq	r9, r2, r0, lsl r4
   28680:	andeq	r9, r2, r4, ror #8
   28684:	andeq	r9, r2, ip, lsr #9
   28688:	strdeq	r9, [r2], -r4
   2868c:	andeq	r9, r2, r0, asr #10
   28690:	muleq	r2, r4, r5
   28694:	andeq	r9, r2, r8, ror #11
   28698:	andeq	r9, r2, ip, lsr r6
   2869c:	strdeq	r9, [r2], -r0
   286a0:	andeq	r9, r2, r4, lsr #19
   286a4:	strdeq	r9, [r2], -r8
   286a8:	andeq	r9, r2, r8, asr #20
   286ac:	muleq	r2, r8, sl
   286b0:	andeq	r9, r2, r8, ror #21
   286b4:	andeq	r9, r2, ip, lsr fp
   286b8:	muleq	r2, r0, fp
   286bc:	andeq	r9, r2, r4, ror #23
   286c0:	andeq	r9, r2, r0, lsr ip
   286c4:	andeq	r9, r2, ip, ror ip
   286c8:	ldrdeq	r9, [r2], -r4
   286cc:	andeq	r9, r2, ip, lsr #26
   286d0:	andeq	r8, r2, ip, lsr r7
   286d4:	andeq	r9, r2, r0, lsl #27
   286d8:	andeq	r9, r2, r8, asr #27
   286dc:	andeq	r9, r2, ip, lsl lr
   286e0:	ldrdeq	r9, [r2], -r0
   286e4:	andeq	sl, r2, r0, lsr #32
   286e8:	andeq	sl, r2, r4, ror r0
   286ec:	andeq	sl, r2, r0, asr #1
   286f0:	andeq	r8, r2, ip, lsr r7
   286f4:	andeq	r8, r2, ip, lsr r7
   286f8:	andeq	r8, r2, ip, lsr r7
   286fc:	andeq	sl, r2, r4, lsl r1
   28700:	andeq	r8, r2, ip, lsr r7
   28704:	andeq	sl, r2, r4, asr r1
   28708:	muleq	r2, r4, r1
   2870c:			; <UNDEFINED> instruction: 0x0002a1b4
   28710:	andeq	sl, r2, r8, lsr #4
   28714:	andeq	sl, r2, r8, lsr r2
   28718:	ldrd	r2, [r8]
   2871c:	strd	r2, [fp, #88]	; 0x58
   28720:	mov	r3, #1
   28724:	strb	r3, [fp, #152]	; 0x98
   28728:	mov	r2, #5
   2872c:	movw	r1, #39384	; 0x99d8
   28730:	movt	r1, #4
   28734:	mov	r0, #0
   28738:	bl	12084 <dcgettext@plt>
   2873c:	ldr	r3, [sp, #108]	; 0x6c
   28740:	rsb	r1, r3, r3, lsl #3
   28744:	sub	r2, r8, r1, lsl #3
   28748:	str	r2, [sp, #64]	; 0x40
   2874c:	sub	r4, sl, r3, lsl #1
   28750:	add	r8, r2, #56	; 0x38
   28754:	ldr	r0, [sp, #84]	; 0x54
   28758:	str	r0, [sp, #248]	; 0xf8
   2875c:	ldr	ip, [sp, #88]	; 0x58
   28760:	str	ip, [sp, #252]	; 0xfc
   28764:	ldr	lr, [sp, #96]	; 0x60
   28768:	str	lr, [sp, #256]	; 0x100
   2876c:	ldr	r5, [sp, #100]	; 0x64
   28770:	str	r5, [sp, #260]	; 0x104
   28774:	str	r9, [sp, #264]	; 0x108
   28778:	ldr	sl, [sp, #92]	; 0x5c
   2877c:	str	sl, [sp, #268]	; 0x10c
   28780:	ldr	r3, [sp, #68]	; 0x44
   28784:	str	r3, [sp, #272]	; 0x110
   28788:	ldr	r3, [sp, #72]	; 0x48
   2878c:	str	r3, [sp, #276]	; 0x114
   28790:	ldrd	r2, [sp, #56]	; 0x38
   28794:	add	r1, sp, #280	; 0x118
   28798:	strd	r2, [r1]
   2879c:	ldr	r3, [sp, #80]	; 0x50
   287a0:	str	r3, [sp, #288]	; 0x120
   287a4:	ldrd	r2, [sp, #240]	; 0xf0
   287a8:	ldr	r1, [sp, #64]	; 0x40
   287ac:	strd	r2, [r1, #56]	; 0x38
   287b0:	str	r0, [r8, #8]
   287b4:	str	ip, [r8, #12]
   287b8:	str	lr, [r8, #16]
   287bc:	str	r5, [r8, #20]
   287c0:	str	r9, [r8, #24]
   287c4:	str	sl, [r8, #28]
   287c8:	ldr	r3, [sp, #68]	; 0x44
   287cc:	str	r3, [r8, #32]
   287d0:	ldr	r3, [sp, #72]	; 0x48
   287d4:	str	r3, [r8, #36]	; 0x24
   287d8:	ldrd	r2, [sp, #56]	; 0x38
   287dc:	strd	r2, [r8, #40]	; 0x28
   287e0:	add	r3, sp, #288	; 0x120
   287e4:	ldrd	r2, [r3]
   287e8:	strd	r2, [r8, #48]	; 0x30
   287ec:	ldr	r3, [sp, #76]	; 0x4c
   287f0:	add	r3, r7, r3
   287f4:	ldrb	r3, [r3, #2712]	; 0xa98
   287f8:	sub	r3, r3, #28
   287fc:	ldrsh	r0, [r4]
   28800:	add	r1, r7, r3
   28804:	movw	r2, #2804	; 0xaf4
   28808:	ldrsb	r2, [r1, r2]
   2880c:	add	r2, r2, r0
   28810:	cmp	r2, #112	; 0x70
   28814:	bhi	2882c <__assert_fail@plt+0x16268>
   28818:	add	r1, r7, r2
   2881c:	add	r1, r1, #2272	; 0x8e0
   28820:	ldrsb	r1, [r1]
   28824:	cmp	r1, r0
   28828:	beq	2a244 <__assert_fail@plt+0x17c80>
   2882c:	add	r3, r7, r3
   28830:	add	r3, r3, #2832	; 0xb10
   28834:	ldrsb	r5, [r3]
   28838:	add	sl, r4, #2
   2883c:	strh	r5, [r4, #2]
   28840:	add	r3, sp, #1440	; 0x5a0
   28844:	add	r3, r3, #14
   28848:	cmp	sl, r3
   2884c:	bcs	2a338 <__assert_fail@plt+0x17d74>
   28850:	cmp	r5, #12
   28854:	beq	2a378 <__assert_fail@plt+0x17db4>
   28858:	add	r2, r7, r5
   2885c:	movw	r3, #1132	; 0x46c
   28860:	ldrsb	r4, [r2, r3]
   28864:	cmn	r4, #93	; 0x5d
   28868:	beq	284d0 <__assert_fail@plt+0x15f0c>
   2886c:	cmn	r6, #2
   28870:	beq	27ed0 <__assert_fail@plt+0x1590c>
   28874:	cmp	r6, #0
   28878:	movle	r3, #0
   2887c:	movle	r6, r3
   28880:	ble	28894 <__assert_fail@plt+0x162d0>
   28884:	movw	r3, #277	; 0x115
   28888:	cmp	r6, r3
   2888c:	movhi	r3, #2
   28890:	bls	28150 <__assert_fail@plt+0x15b8c>
   28894:	add	r4, r3, r4
   28898:	cmp	r4, #112	; 0x70
   2889c:	bhi	284d0 <__assert_fail@plt+0x15f0c>
   288a0:	add	r2, r7, r4
   288a4:	add	r2, r2, #2272	; 0x8e0
   288a8:	ldrsb	r2, [r2]
   288ac:	cmp	r2, r3
   288b0:	bne	284d0 <__assert_fail@plt+0x15f0c>
   288b4:	add	r4, r7, r4
   288b8:	ldrb	r5, [r4, #2388]	; 0x954
   288bc:	cmp	r5, #0
   288c0:	ble	2a45c <__assert_fail@plt+0x17e98>
   288c4:	ldr	r3, [sp, #104]	; 0x68
   288c8:	cmp	r3, #0
   288cc:	subne	r3, r3, #1
   288d0:	strne	r3, [sp, #104]	; 0x68
   288d4:	add	r1, r8, #56	; 0x38
   288d8:	add	r0, sp, #1456	; 0x5b0
   288dc:	add	r0, r0, #8
   288e0:	ldrd	r2, [sp, #120]	; 0x78
   288e4:	strd	r2, [r0]
   288e8:	ldr	r3, [sp, #160]	; 0xa0
   288ec:	str	r3, [sp, #1472]	; 0x5c0
   288f0:	add	r0, sp, #1456	; 0x5b0
   288f4:	ldrd	r2, [r0]
   288f8:	strd	r2, [r8, #56]	; 0x38
   288fc:	ldrd	r2, [sp, #120]	; 0x78
   28900:	strd	r2, [r8, #64]	; 0x40
   28904:	ldrd	r2, [r0, #16]
   28908:	strd	r2, [r8, #72]	; 0x48
   2890c:	ldrd	r2, [r0, #24]
   28910:	strd	r2, [r8, #80]	; 0x50
   28914:	ldrd	r2, [r0, #32]
   28918:	strd	r2, [r8, #88]	; 0x58
   2891c:	ldrd	r2, [r0, #40]	; 0x28
   28920:	strd	r2, [r8, #96]	; 0x60
   28924:	ldrd	r2, [r0, #48]	; 0x30
   28928:	strd	r2, [r8, #104]	; 0x68
   2892c:	mov	r8, r1
   28930:	mov	r4, sl
   28934:	mvn	r6, #1
   28938:	b	28838 <__assert_fail@plt+0x16274>
   2893c:	ldr	r3, [fp, #172]	; 0xac
   28940:	add	r3, r3, #1
   28944:	str	r3, [fp, #172]	; 0xac
   28948:	ldr	r3, [fp, #156]	; 0x9c
   2894c:	add	r3, r3, #1
   28950:	str	r3, [fp, #156]	; 0x9c
   28954:	mov	r2, #5
   28958:	movw	r1, #39404	; 0x99ec
   2895c:	movt	r1, #4
   28960:	mov	r0, #0
   28964:	bl	12084 <dcgettext@plt>
   28968:	b	2873c <__assert_fail@plt+0x16178>
   2896c:	ldr	r3, [fp, #172]	; 0xac
   28970:	add	r3, r3, #1
   28974:	str	r3, [fp, #172]	; 0xac
   28978:	mov	r2, #5
   2897c:	movw	r1, #39408	; 0x99f0
   28980:	movt	r1, #4
   28984:	mov	r0, #0
   28988:	bl	12084 <dcgettext@plt>
   2898c:	b	2873c <__assert_fail@plt+0x16178>
   28990:	ldr	r3, [fp, #164]	; 0xa4
   28994:	add	r3, r3, #1
   28998:	str	r3, [fp, #164]	; 0xa4
   2899c:	mov	r2, #5
   289a0:	movw	r1, #39416	; 0x99f8
   289a4:	movt	r1, #4
   289a8:	mov	r0, #0
   289ac:	bl	12084 <dcgettext@plt>
   289b0:	b	2873c <__assert_fail@plt+0x16178>
   289b4:	ldr	r3, [fp, #176]	; 0xb0
   289b8:	add	r3, r3, #1
   289bc:	str	r3, [fp, #176]	; 0xb0
   289c0:	mov	r2, #5
   289c4:	movw	r1, #39428	; 0x9a04
   289c8:	movt	r1, #4
   289cc:	mov	r0, #0
   289d0:	bl	12084 <dcgettext@plt>
   289d4:	b	2873c <__assert_fail@plt+0x16178>
   289d8:	ldr	r3, [fp, #156]	; 0x9c
   289dc:	add	r3, r3, #1
   289e0:	str	r3, [fp, #156]	; 0x9c
   289e4:	mov	r2, #5
   289e8:	movw	r1, #39436	; 0x9a0c
   289ec:	movt	r1, #4
   289f0:	mov	r0, #0
   289f4:	bl	12084 <dcgettext@plt>
   289f8:	b	2873c <__assert_fail@plt+0x16178>
   289fc:	ldr	r3, [fp, #160]	; 0xa0
   28a00:	add	r3, r3, #1
   28a04:	str	r3, [fp, #160]	; 0xa0
   28a08:	mov	r2, #5
   28a0c:	movw	r1, #39444	; 0x9a14
   28a10:	movt	r1, #4
   28a14:	mov	r0, #0
   28a18:	bl	12084 <dcgettext@plt>
   28a1c:	b	2873c <__assert_fail@plt+0x16178>
   28a20:	mov	r2, #5
   28a24:	movw	r1, #39448	; 0x9a18
   28a28:	movt	r1, #4
   28a2c:	mov	r0, #0
   28a30:	bl	12084 <dcgettext@plt>
   28a34:	b	2873c <__assert_fail@plt+0x16178>
   28a38:	mov	r2, #5
   28a3c:	movw	r1, #39460	; 0x9a24
   28a40:	movt	r1, #4
   28a44:	mov	r0, #0
   28a48:	bl	12084 <dcgettext@plt>
   28a4c:	b	2873c <__assert_fail@plt+0x16178>
   28a50:	mov	r2, #5
   28a54:	movw	r1, #39468	; 0x9a2c
   28a58:	movt	r1, #4
   28a5c:	mov	r0, #0
   28a60:	bl	12084 <dcgettext@plt>
   28a64:	b	2873c <__assert_fail@plt+0x16178>
   28a68:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   28a6c:	strd	r2, [fp, #72]	; 0x48
   28a70:	mov	r3, #0
   28a74:	str	r3, [fp, #80]	; 0x50
   28a78:	str	r3, [fp, #84]	; 0x54
   28a7c:	str	r3, [fp, #88]	; 0x58
   28a80:	str	r3, [fp, #92]	; 0x5c
   28a84:	ldr	r3, [r8]
   28a88:	str	r3, [fp, #28]
   28a8c:	b	2873c <__assert_fail@plt+0x16178>
   28a90:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   28a94:	ldrd	r2, [r8, #-160]	; 0xffffff60
   28a98:	strd	r2, [fp, #72]	; 0x48
   28a9c:	strd	r0, [fp, #80]	; 0x50
   28aa0:	mov	r3, #0
   28aa4:	str	r3, [fp, #88]	; 0x58
   28aa8:	str	r3, [fp, #92]	; 0x5c
   28aac:	ldr	r3, [r8]
   28ab0:	str	r3, [fp, #28]
   28ab4:	b	2873c <__assert_fail@plt+0x16178>
   28ab8:	ldrd	r0, [r8, #-160]	; 0xffffff60
   28abc:	ldr	lr, [r8, #-56]	; 0xffffffc8
   28ac0:	ldr	ip, [r8, #-52]	; 0xffffffcc
   28ac4:	sub	r3, r8, #272	; 0x110
   28ac8:	ldrd	r2, [r3]
   28acc:	strd	r2, [fp, #72]	; 0x48
   28ad0:	strd	r0, [fp, #80]	; 0x50
   28ad4:	str	lr, [fp, #88]	; 0x58
   28ad8:	str	ip, [fp, #92]	; 0x5c
   28adc:	ldr	r3, [r8]
   28ae0:	str	r3, [fp, #28]
   28ae4:	b	2873c <__assert_fail@plt+0x16178>
   28ae8:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   28aec:	strd	r2, [fp, #72]	; 0x48
   28af0:	mov	r3, #0
   28af4:	str	r3, [fp, #80]	; 0x50
   28af8:	str	r3, [fp, #84]	; 0x54
   28afc:	str	r3, [fp, #88]	; 0x58
   28b00:	str	r3, [fp, #92]	; 0x5c
   28b04:	mov	r3, #2
   28b08:	str	r3, [fp, #28]
   28b0c:	b	2873c <__assert_fail@plt+0x16178>
   28b10:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   28b14:	ldrd	r2, [r8, #-160]	; 0xffffff60
   28b18:	strd	r2, [fp, #72]	; 0x48
   28b1c:	strd	r0, [fp, #80]	; 0x50
   28b20:	mov	r3, #0
   28b24:	str	r3, [fp, #88]	; 0x58
   28b28:	str	r3, [fp, #92]	; 0x5c
   28b2c:	mov	r3, #2
   28b30:	str	r3, [fp, #28]
   28b34:	b	2873c <__assert_fail@plt+0x16178>
   28b38:	ldrd	r0, [r8, #-160]	; 0xffffff60
   28b3c:	ldr	lr, [r8, #-56]	; 0xffffffc8
   28b40:	ldr	ip, [r8, #-52]	; 0xffffffcc
   28b44:	sub	r3, r8, #272	; 0x110
   28b48:	ldrd	r2, [r3]
   28b4c:	strd	r2, [fp, #72]	; 0x48
   28b50:	strd	r0, [fp, #80]	; 0x50
   28b54:	str	lr, [fp, #88]	; 0x58
   28b58:	str	ip, [fp, #92]	; 0x5c
   28b5c:	mov	r3, #2
   28b60:	str	r3, [fp, #28]
   28b64:	b	2873c <__assert_fail@plt+0x16178>
   28b68:	ldr	r3, [fp, #176]	; 0xb0
   28b6c:	add	r3, r3, #1
   28b70:	str	r3, [fp, #176]	; 0xb0
   28b74:	ldrd	r0, [r8]
   28b78:	strd	r0, [sp, #168]	; 0xa8
   28b7c:	ldrb	lr, [r8, #-56]	; 0xffffffc8
   28b80:	ldr	r3, [r8, #-48]	; 0xffffffd0
   28b84:	mov	r4, r3
   28b88:	ldr	r3, [r8, #-44]	; 0xffffffd4
   28b8c:	str	r3, [sp, #164]	; 0xa4
   28b90:	ldr	r2, [r8, #-40]	; 0xffffffd8
   28b94:	lsr	r3, r1, #31
   28b98:	cmp	r2, #2
   28b9c:	movgt	r3, #0
   28ba0:	andle	r3, r3, #1
   28ba4:	cmp	r3, #0
   28ba8:	bne	28c20 <__assert_fail@plt+0x1665c>
   28bac:	ldrd	r2, [sp, #168]	; 0xa8
   28bb0:	cmp	r2, #0
   28bb4:	sbcs	r3, r3, #0
   28bb8:	blt	28c58 <__assert_fail@plt+0x16694>
   28bbc:	mov	r3, #0
   28bc0:	mov	r5, r3
   28bc4:	ldr	r2, [sp, #164]	; 0xa4
   28bc8:	cmp	r2, r4, asr #31
   28bcc:	bne	28cf0 <__assert_fail@plt+0x1672c>
   28bd0:	mov	r2, #60	; 0x3c
   28bd4:	smull	r2, r3, r4, r2
   28bd8:	mov	r0, r2
   28bdc:	mov	r1, r3
   28be0:	mov	r3, r1
   28be4:	str	r5, [sp, #164]	; 0xa4
   28be8:	cmp	lr, #0
   28bec:	beq	28d6c <__assert_fail@plt+0x167a8>
   28bf0:	mov	ip, #0
   28bf4:	ldrd	r4, [sp, #168]	; 0xa8
   28bf8:	subs	r0, r0, r4
   28bfc:	sbcs	r1, r3, r5
   28c00:	movvs	ip, #1
   28c04:	mov	r2, r0
   28c08:	mov	r3, r1
   28c0c:	ldr	r1, [sp, #164]	; 0xa4
   28c10:	orrs	r1, r1, ip
   28c14:	beq	28cc0 <__assert_fail@plt+0x166fc>
   28c18:	mov	r0, #1
   28c1c:	b	2a344 <__assert_fail@plt+0x17d80>
   28c20:	adds	r3, r4, r4
   28c24:	ldr	lr, [sp, #164]	; 0xa4
   28c28:	adc	r2, lr, lr
   28c2c:	adds	r3, r3, r4
   28c30:	adc	r2, r2, lr
   28c34:	lsl	r1, r2, #5
   28c38:	orr	r1, r1, r3, lsr #27
   28c3c:	lsl	r0, r3, #5
   28c40:	adds	r3, r3, r0
   28c44:	adc	r2, r2, r1
   28c48:	adds	r3, r4, r3
   28c4c:	mov	r4, r3
   28c50:	adc	r3, lr, r2
   28c54:	str	r3, [sp, #164]	; 0xa4
   28c58:	mov	r2, #100	; 0x64
   28c5c:	mov	r3, #0
   28c60:	mov	r5, r4
   28c64:	mov	r0, r4
   28c68:	ldr	r4, [sp, #164]	; 0xa4
   28c6c:	mov	r1, r4
   28c70:	bl	4431c <__assert_fail@plt+0x31d58>
   28c74:	lsl	r3, r1, #4
   28c78:	lsl	ip, r0, #4
   28c7c:	orr	r2, r3, r0, lsr #28
   28c80:	subs	ip, ip, r0
   28c84:	sbc	r3, r2, r1
   28c88:	lsl	r3, r3, #2
   28c8c:	orr	r3, r3, ip, lsr #30
   28c90:	lsl	r2, ip, #2
   28c94:	str	r2, [sp, #164]	; 0xa4
   28c98:	str	r3, [sp, #168]	; 0xa8
   28c9c:	mov	r2, #100	; 0x64
   28ca0:	mov	r3, #0
   28ca4:	mov	r0, r5
   28ca8:	mov	r1, r4
   28cac:	bl	4431c <__assert_fail@plt+0x31d58>
   28cb0:	ldr	r1, [sp, #164]	; 0xa4
   28cb4:	adds	r2, r1, r2
   28cb8:	ldr	r1, [sp, #168]	; 0xa8
   28cbc:	adc	r3, r1, r3
   28cc0:	adds	r1, r2, #1440	; 0x5a0
   28cc4:	str	r1, [sp, #184]	; 0xb8
   28cc8:	adc	r3, r3, #0
   28ccc:	str	r3, [sp, #188]	; 0xbc
   28cd0:	ldrd	r0, [sp, #184]	; 0xb8
   28cd4:	cmp	r1, #0
   28cd8:	cmpeq	r0, #2880	; 0xb40
   28cdc:	bhi	28c18 <__assert_fail@plt+0x16654>
   28ce0:	rsb	r2, r2, r2, lsl #4
   28ce4:	lsl	r3, r2, #2
   28ce8:	str	r3, [fp, #24]
   28cec:	b	2873c <__assert_fail@plt+0x16178>
   28cf0:	mov	r0, #60	; 0x3c
   28cf4:	umull	r2, r3, r4, r0
   28cf8:	strd	r2, [sp, #176]	; 0xb0
   28cfc:	ldr	r1, [sp, #164]	; 0xa4
   28d00:	umull	r2, r3, r0, r1
   28d04:	cmp	r1, #0
   28d08:	bge	28d1c <__assert_fail@plt+0x16758>
   28d0c:	mov	ip, r0
   28d10:	mov	r1, #0
   28d14:	subs	r2, r2, r1
   28d18:	sbc	r3, r3, r0
   28d1c:	ldr	r1, [sp, #180]	; 0xb4
   28d20:	mov	r0, #0
   28d24:	adds	r1, r2, r1
   28d28:	adc	r0, r3, r0
   28d2c:	cmp	r0, r1, asr #31
   28d30:	bne	28d3c <__assert_fail@plt+0x16778>
   28d34:	ldr	r0, [sp, #176]	; 0xb0
   28d38:	b	28be0 <__assert_fail@plt+0x1661c>
   28d3c:	ldr	ip, [sp, #164]	; 0xa4
   28d40:	lsl	r1, ip, #4
   28d44:	lsl	r3, r4, #4
   28d48:	orr	r2, r1, r4, lsr #28
   28d4c:	subs	r3, r3, r4
   28d50:	sbc	r2, r2, ip
   28d54:	lsl	r1, r2, #2
   28d58:	orr	r1, r1, r3, lsr #30
   28d5c:	lsl	r0, r3, #2
   28d60:	mov	r3, #1
   28d64:	mov	r5, r3
   28d68:	b	28be0 <__assert_fail@plt+0x1661c>
   28d6c:	ldrd	r4, [sp, #168]	; 0xa8
   28d70:	adds	r0, r0, r4
   28d74:	adcs	r1, r3, r5
   28d78:	mov	r2, r0
   28d7c:	mov	r3, r1
   28d80:	movvs	ip, #1
   28d84:	movvc	ip, #0
   28d88:	b	28c0c <__assert_fail@plt+0x16648>
   28d8c:	ldr	r3, [r8]
   28d90:	str	r3, [fp, #20]
   28d94:	b	2873c <__assert_fail@plt+0x16178>
   28d98:	mov	r3, #1
   28d9c:	str	r3, [fp, #20]
   28da0:	ldr	r3, [fp, #168]	; 0xa8
   28da4:	add	r3, r3, #1
   28da8:	str	r3, [fp, #168]	; 0xa8
   28dac:	b	2873c <__assert_fail@plt+0x16178>
   28db0:	ldr	r3, [r8]
   28db4:	str	r3, [fp, #24]
   28db8:	b	2873c <__assert_fail@plt+0x16178>
   28dbc:	movw	r3, #40336	; 0x9d90
   28dc0:	movt	r3, #65535	; 0xffff
   28dc4:	str	r3, [fp, #24]
   28dc8:	b	2873c <__assert_fail@plt+0x16178>
   28dcc:	ldr	r3, [r8, #-56]	; 0xffffffc8
   28dd0:	str	r3, [fp, #24]
   28dd4:	mov	r3, #1
   28dd8:	str	r3, [sp, #48]	; 0x30
   28ddc:	ldrd	r2, [r8, #8]
   28de0:	strd	r2, [sp]
   28de4:	ldrd	r2, [r8, #16]
   28de8:	strd	r2, [sp, #8]
   28dec:	ldrd	r2, [r8, #24]
   28df0:	strd	r2, [sp, #16]
   28df4:	ldrd	r2, [r8, #32]
   28df8:	strd	r2, [sp, #24]
   28dfc:	ldrd	r2, [r8, #40]	; 0x28
   28e00:	strd	r2, [sp, #32]
   28e04:	ldrd	r2, [r8, #48]	; 0x30
   28e08:	strd	r2, [sp, #40]	; 0x28
   28e0c:	ldm	r8, {r2, r3}
   28e10:	mov	r0, fp
   28e14:	bl	276e4 <__assert_fail@plt+0x15120>
   28e18:	cmp	r0, #0
   28e1c:	beq	2a388 <__assert_fail@plt+0x17dc4>
   28e20:	mov	r2, #5
   28e24:	movw	r1, #39448	; 0x9a18
   28e28:	movt	r1, #4
   28e2c:	mov	r0, #0
   28e30:	bl	12084 <dcgettext@plt>
   28e34:	b	2873c <__assert_fail@plt+0x16178>
   28e38:	movw	r3, #40336	; 0x9d90
   28e3c:	movt	r3, #65535	; 0xffff
   28e40:	str	r3, [fp, #24]
   28e44:	mov	r3, #1
   28e48:	str	r3, [sp, #48]	; 0x30
   28e4c:	ldrd	r2, [r8, #8]
   28e50:	strd	r2, [sp]
   28e54:	ldrd	r2, [r8, #16]
   28e58:	strd	r2, [sp, #8]
   28e5c:	ldrd	r2, [r8, #24]
   28e60:	strd	r2, [sp, #16]
   28e64:	ldrd	r2, [r8, #32]
   28e68:	strd	r2, [sp, #24]
   28e6c:	ldrd	r2, [r8, #40]	; 0x28
   28e70:	strd	r2, [sp, #32]
   28e74:	ldrd	r2, [r8, #48]	; 0x30
   28e78:	strd	r2, [sp, #40]	; 0x28
   28e7c:	ldm	r8, {r2, r3}
   28e80:	mov	r0, fp
   28e84:	bl	276e4 <__assert_fail@plt+0x15120>
   28e88:	cmp	r0, #0
   28e8c:	beq	2a390 <__assert_fail@plt+0x17dcc>
   28e90:	mov	r2, #5
   28e94:	movw	r1, #39448	; 0x9a18
   28e98:	movt	r1, #4
   28e9c:	mov	r0, #0
   28ea0:	bl	12084 <dcgettext@plt>
   28ea4:	b	2873c <__assert_fail@plt+0x16178>
   28ea8:	ldrd	r0, [r8]
   28eac:	strd	r0, [sp, #168]	; 0xa8
   28eb0:	ldrb	lr, [r8, #-56]	; 0xffffffc8
   28eb4:	ldr	r3, [r8, #-48]	; 0xffffffd0
   28eb8:	mov	r4, r3
   28ebc:	ldr	r3, [r8, #-44]	; 0xffffffd4
   28ec0:	str	r3, [sp, #164]	; 0xa4
   28ec4:	ldr	r2, [r8, #-40]	; 0xffffffd8
   28ec8:	lsr	r3, r1, #31
   28ecc:	cmp	r2, #2
   28ed0:	movgt	r3, #0
   28ed4:	andle	r3, r3, #1
   28ed8:	cmp	r3, #0
   28edc:	bne	28f54 <__assert_fail@plt+0x16990>
   28ee0:	ldrd	r2, [sp, #168]	; 0xa8
   28ee4:	cmp	r2, #0
   28ee8:	sbcs	r3, r3, #0
   28eec:	blt	28f8c <__assert_fail@plt+0x169c8>
   28ef0:	mov	r3, #0
   28ef4:	mov	r5, r3
   28ef8:	ldr	r2, [sp, #164]	; 0xa4
   28efc:	cmp	r2, r4, asr #31
   28f00:	bne	2905c <__assert_fail@plt+0x16a98>
   28f04:	mov	r2, #60	; 0x3c
   28f08:	smull	r2, r3, r4, r2
   28f0c:	mov	r0, r2
   28f10:	mov	r1, r3
   28f14:	mov	r3, r1
   28f18:	str	r5, [sp, #164]	; 0xa4
   28f1c:	cmp	lr, #0
   28f20:	beq	290d8 <__assert_fail@plt+0x16b14>
   28f24:	mov	ip, #0
   28f28:	ldrd	r4, [sp, #168]	; 0xa8
   28f2c:	subs	r0, r0, r4
   28f30:	sbcs	r1, r3, r5
   28f34:	movvs	ip, #1
   28f38:	mov	r2, r0
   28f3c:	mov	r3, r1
   28f40:	ldr	r1, [sp, #164]	; 0xa4
   28f44:	orrs	r1, r1, ip
   28f48:	beq	28ff4 <__assert_fail@plt+0x16a30>
   28f4c:	mov	r0, #1
   28f50:	b	2a344 <__assert_fail@plt+0x17d80>
   28f54:	adds	r3, r4, r4
   28f58:	ldr	lr, [sp, #164]	; 0xa4
   28f5c:	adc	r2, lr, lr
   28f60:	adds	r3, r3, r4
   28f64:	adc	r2, r2, lr
   28f68:	lsl	r1, r2, #5
   28f6c:	orr	r1, r1, r3, lsr #27
   28f70:	lsl	r0, r3, #5
   28f74:	adds	r3, r3, r0
   28f78:	adc	r2, r2, r1
   28f7c:	adds	r3, r4, r3
   28f80:	mov	r4, r3
   28f84:	adc	r3, lr, r2
   28f88:	str	r3, [sp, #164]	; 0xa4
   28f8c:	mov	r2, #100	; 0x64
   28f90:	mov	r3, #0
   28f94:	mov	r5, r4
   28f98:	mov	r0, r4
   28f9c:	ldr	r4, [sp, #164]	; 0xa4
   28fa0:	mov	r1, r4
   28fa4:	bl	4431c <__assert_fail@plt+0x31d58>
   28fa8:	lsl	r3, r1, #4
   28fac:	lsl	ip, r0, #4
   28fb0:	orr	r2, r3, r0, lsr #28
   28fb4:	subs	ip, ip, r0
   28fb8:	sbc	r3, r2, r1
   28fbc:	lsl	r3, r3, #2
   28fc0:	orr	r3, r3, ip, lsr #30
   28fc4:	lsl	r2, ip, #2
   28fc8:	str	r2, [sp, #164]	; 0xa4
   28fcc:	str	r3, [sp, #168]	; 0xa8
   28fd0:	mov	r2, #100	; 0x64
   28fd4:	mov	r3, #0
   28fd8:	mov	r0, r5
   28fdc:	mov	r1, r4
   28fe0:	bl	4431c <__assert_fail@plt+0x31d58>
   28fe4:	ldr	r1, [sp, #164]	; 0xa4
   28fe8:	adds	r2, r1, r2
   28fec:	ldr	r1, [sp, #168]	; 0xa8
   28ff0:	adc	r3, r1, r3
   28ff4:	adds	r1, r2, #1440	; 0x5a0
   28ff8:	str	r1, [sp, #192]	; 0xc0
   28ffc:	adc	r3, r3, #0
   29000:	str	r3, [sp, #196]	; 0xc4
   29004:	ldrd	r0, [sp, #192]	; 0xc0
   29008:	cmp	r1, #0
   2900c:	cmpeq	r0, #2880	; 0xb40
   29010:	bhi	28f4c <__assert_fail@plt+0x16988>
   29014:	rsb	r2, r2, r2, lsl #4
   29018:	lsl	r0, r2, #2
   2901c:	asr	r1, r0, #31
   29020:	ldrd	r4, [r8, #-112]	; 0xffffff90
   29024:	adds	r2, r0, r4
   29028:	adcs	r3, r1, r5
   2902c:	movvs	r1, #1
   29030:	movvc	r1, #0
   29034:	asr	r5, r2, #31
   29038:	cmp	r3, r5
   2903c:	cmpeq	r2, r2
   29040:	str	r2, [fp, #24]
   29044:	moveq	r3, r1
   29048:	movne	r3, #1
   2904c:	cmp	r3, #0
   29050:	beq	2873c <__assert_fail@plt+0x16178>
   29054:	mov	r0, #1
   29058:	b	2a344 <__assert_fail@plt+0x17d80>
   2905c:	mov	r0, #60	; 0x3c
   29060:	umull	r2, r3, r4, r0
   29064:	strd	r2, [sp, #176]	; 0xb0
   29068:	ldr	r1, [sp, #164]	; 0xa4
   2906c:	umull	r2, r3, r0, r1
   29070:	cmp	r1, #0
   29074:	bge	29088 <__assert_fail@plt+0x16ac4>
   29078:	mov	ip, r0
   2907c:	mov	r1, #0
   29080:	subs	r2, r2, r1
   29084:	sbc	r3, r3, r0
   29088:	ldr	r1, [sp, #180]	; 0xb4
   2908c:	mov	r0, #0
   29090:	adds	r1, r2, r1
   29094:	adc	r0, r3, r0
   29098:	cmp	r0, r1, asr #31
   2909c:	bne	290a8 <__assert_fail@plt+0x16ae4>
   290a0:	ldr	r0, [sp, #176]	; 0xb0
   290a4:	b	28f14 <__assert_fail@plt+0x16950>
   290a8:	ldr	ip, [sp, #164]	; 0xa4
   290ac:	lsl	r1, ip, #4
   290b0:	lsl	r3, r4, #4
   290b4:	orr	r2, r1, r4, lsr #28
   290b8:	subs	r3, r3, r4
   290bc:	sbc	r2, r2, ip
   290c0:	lsl	r1, r2, #2
   290c4:	orr	r1, r1, r3, lsr #30
   290c8:	lsl	r0, r3, #2
   290cc:	mov	r3, #1
   290d0:	mov	r5, r3
   290d4:	b	28f14 <__assert_fail@plt+0x16950>
   290d8:	ldrd	r4, [sp, #168]	; 0xa8
   290dc:	adds	r0, r0, r4
   290e0:	adcs	r1, r3, r5
   290e4:	mov	r2, r0
   290e8:	mov	r3, r1
   290ec:	movvs	ip, #1
   290f0:	movvc	ip, #0
   290f4:	b	28f40 <__assert_fail@plt+0x1697c>
   290f8:	ldr	r3, [r8]
   290fc:	add	r3, r3, #3600	; 0xe10
   29100:	str	r3, [fp, #24]
   29104:	b	2873c <__assert_fail@plt+0x16178>
   29108:	ldr	r3, [r8, #-56]	; 0xffffffc8
   2910c:	add	r3, r3, #3600	; 0xe10
   29110:	str	r3, [fp, #24]
   29114:	b	2873c <__assert_fail@plt+0x16178>
   29118:	mov	r3, #0
   2911c:	str	r3, [fp, #8]
   29120:	str	r3, [fp, #12]
   29124:	ldr	r3, [r8]
   29128:	str	r3, [fp, #16]
   2912c:	b	2873c <__assert_fail@plt+0x16178>
   29130:	mov	r3, #0
   29134:	str	r3, [fp, #8]
   29138:	str	r3, [fp, #12]
   2913c:	ldr	r3, [r8, #-56]	; 0xffffffc8
   29140:	str	r3, [fp, #16]
   29144:	b	2873c <__assert_fail@plt+0x16178>
   29148:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   2914c:	strd	r2, [fp, #8]
   29150:	ldr	r3, [r8]
   29154:	str	r3, [fp, #16]
   29158:	mov	r3, #1
   2915c:	strb	r3, [fp, #187]	; 0xbb
   29160:	b	2873c <__assert_fail@plt+0x16178>
   29164:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   29168:	strd	r2, [fp, #8]
   2916c:	ldr	r3, [r8]
   29170:	str	r3, [fp, #16]
   29174:	mov	r3, #1
   29178:	strb	r3, [fp, #187]	; 0xbb
   2917c:	b	2873c <__assert_fail@plt+0x16178>
   29180:	ldrd	r2, [r8, #-104]	; 0xffffff98
   29184:	strd	r2, [fp, #56]	; 0x38
   29188:	ldrd	r2, [r8, #8]
   2918c:	strd	r2, [fp, #64]	; 0x40
   29190:	b	2873c <__assert_fail@plt+0x16178>
   29194:	ldr	r3, [r8, #-208]	; 0xffffff30
   29198:	cmp	r3, #3
   2919c:	ble	291cc <__assert_fail@plt+0x16c08>
   291a0:	ldrd	r2, [r8, #-224]	; 0xffffff20
   291a4:	strd	r2, [fp, #32]
   291a8:	ldrd	r2, [r8, #-216]	; 0xffffff28
   291ac:	strd	r2, [fp, #40]	; 0x28
   291b0:	ldrd	r2, [r8, #-208]	; 0xffffff30
   291b4:	strd	r2, [fp, #48]	; 0x30
   291b8:	ldrd	r2, [r8, #-104]	; 0xffffff98
   291bc:	strd	r2, [fp, #56]	; 0x38
   291c0:	ldrd	r2, [r8, #8]
   291c4:	strd	r2, [fp, #64]	; 0x40
   291c8:	b	2873c <__assert_fail@plt+0x16178>
   291cc:	ldrd	r2, [r8, #-216]	; 0xffffff28
   291d0:	strd	r2, [fp, #56]	; 0x38
   291d4:	ldrd	r2, [r8, #-104]	; 0xffffff98
   291d8:	strd	r2, [fp, #64]	; 0x40
   291dc:	ldrd	r2, [r8]
   291e0:	strd	r2, [fp, #32]
   291e4:	ldrd	r2, [r8, #8]
   291e8:	strd	r2, [fp, #40]	; 0x28
   291ec:	ldrd	r2, [r8, #16]
   291f0:	strd	r2, [fp, #48]	; 0x30
   291f4:	b	2873c <__assert_fail@plt+0x16178>
   291f8:	ldrd	r2, [r8, #-104]	; 0xffffff98
   291fc:	strd	r2, [fp, #64]	; 0x40
   29200:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   29204:	strd	r2, [fp, #56]	; 0x38
   29208:	mov	r1, #0
   2920c:	ldrd	r2, [r8, #8]
   29210:	rsbs	r2, r2, #0
   29214:	rscs	r3, r3, #0
   29218:	movvs	r1, #1
   2921c:	strd	r2, [fp, #40]	; 0x28
   29220:	cmp	r1, #0
   29224:	bne	2a398 <__assert_fail@plt+0x17dd4>
   29228:	ldr	r3, [r8, #16]
   2922c:	str	r3, [fp, #48]	; 0x30
   29230:	b	2873c <__assert_fail@plt+0x16178>
   29234:	ldrd	r2, [r8, #-112]	; 0xffffff90
   29238:	strd	r2, [fp, #56]	; 0x38
   2923c:	mov	r1, #0
   29240:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   29244:	rsbs	r2, r2, #0
   29248:	rscs	r3, r3, #0
   2924c:	movvs	r1, #1
   29250:	strd	r2, [fp, #64]	; 0x40
   29254:	cmp	r1, #0
   29258:	bne	2a3a0 <__assert_fail@plt+0x17ddc>
   2925c:	ldrd	r2, [r8, #8]
   29260:	rsbs	r2, r2, #0
   29264:	rscs	r3, r3, #0
   29268:	movvs	r1, #1
   2926c:	strd	r2, [fp, #40]	; 0x28
   29270:	cmp	r1, #0
   29274:	bne	2a3a8 <__assert_fail@plt+0x17de4>
   29278:	ldr	r3, [r8, #16]
   2927c:	str	r3, [fp, #48]	; 0x30
   29280:	b	2873c <__assert_fail@plt+0x16178>
   29284:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   29288:	strd	r2, [fp, #56]	; 0x38
   2928c:	ldrd	r2, [r8, #8]
   29290:	strd	r2, [fp, #64]	; 0x40
   29294:	b	2873c <__assert_fail@plt+0x16178>
   29298:	ldrd	r2, [r8, #-168]	; 0xffffff58
   2929c:	strd	r2, [fp, #56]	; 0x38
   292a0:	ldrd	r2, [r8, #-104]	; 0xffffff98
   292a4:	strd	r2, [fp, #64]	; 0x40
   292a8:	ldrd	r2, [r8]
   292ac:	strd	r2, [fp, #32]
   292b0:	ldrd	r2, [r8, #8]
   292b4:	strd	r2, [fp, #40]	; 0x28
   292b8:	ldrd	r2, [r8, #16]
   292bc:	strd	r2, [fp, #48]	; 0x30
   292c0:	b	2873c <__assert_fail@plt+0x16178>
   292c4:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   292c8:	strd	r2, [fp, #64]	; 0x40
   292cc:	ldrd	r2, [r8]
   292d0:	strd	r2, [fp, #56]	; 0x38
   292d4:	b	2873c <__assert_fail@plt+0x16178>
   292d8:	ldrd	r2, [r8, #-104]	; 0xffffff98
   292dc:	strd	r2, [fp, #64]	; 0x40
   292e0:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   292e4:	strd	r2, [fp, #56]	; 0x38
   292e8:	ldrd	r2, [r8]
   292ec:	strd	r2, [fp, #32]
   292f0:	ldrd	r2, [r8, #8]
   292f4:	strd	r2, [fp, #40]	; 0x28
   292f8:	ldrd	r2, [r8, #16]
   292fc:	strd	r2, [fp, #48]	; 0x30
   29300:	b	2873c <__assert_fail@plt+0x16178>
   29304:	ldrd	r2, [r8, #-112]	; 0xffffff90
   29308:	strd	r2, [fp, #32]
   2930c:	ldrd	r2, [r8, #-104]	; 0xffffff98
   29310:	strd	r2, [fp, #40]	; 0x28
   29314:	ldrd	r2, [r8, #-96]	; 0xffffffa0
   29318:	strd	r2, [fp, #48]	; 0x30
   2931c:	mov	r1, #0
   29320:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   29324:	rsbs	r2, r2, #0
   29328:	rscs	r3, r3, #0
   2932c:	movvs	r1, #1
   29330:	strd	r2, [fp, #56]	; 0x38
   29334:	cmp	r1, #0
   29338:	bne	2a3b0 <__assert_fail@plt+0x17dec>
   2933c:	ldrd	r2, [r8, #8]
   29340:	rsbs	r2, r2, #0
   29344:	rscs	r3, r3, #0
   29348:	movvs	r1, #1
   2934c:	strd	r2, [fp, #64]	; 0x40
   29350:	cmp	r1, #0
   29354:	beq	2873c <__assert_fail@plt+0x16178>
   29358:	mov	r0, #1
   2935c:	b	2a344 <__assert_fail@plt+0x17d80>
   29360:	mov	r1, r8
   29364:	ldr	r3, [r1], #-48	; 0xffffffd0
   29368:	str	r3, [sp, #48]	; 0x30
   2936c:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   29370:	strd	r2, [sp]
   29374:	ldrd	r2, [r1, #8]
   29378:	strd	r2, [sp, #8]
   2937c:	ldrd	r2, [r1, #16]
   29380:	strd	r2, [sp, #16]
   29384:	ldrd	r2, [r1, #24]
   29388:	strd	r2, [sp, #24]
   2938c:	ldrd	r2, [r1, #32]
   29390:	strd	r2, [sp, #32]
   29394:	ldrd	r2, [r1, #40]	; 0x28
   29398:	strd	r2, [sp, #40]	; 0x28
   2939c:	sub	r3, r8, #56	; 0x38
   293a0:	ldm	r3, {r2, r3}
   293a4:	mov	r0, fp
   293a8:	bl	276e4 <__assert_fail@plt+0x15120>
   293ac:	cmp	r0, #0
   293b0:	bne	2873c <__assert_fail@plt+0x16178>
   293b4:	mov	r0, #1
   293b8:	b	2a344 <__assert_fail@plt+0x17d80>
   293bc:	mov	r3, #1
   293c0:	str	r3, [sp, #48]	; 0x30
   293c4:	ldrd	r2, [r8, #8]
   293c8:	strd	r2, [sp]
   293cc:	ldrd	r2, [r8, #16]
   293d0:	strd	r2, [sp, #8]
   293d4:	ldrd	r2, [r8, #24]
   293d8:	strd	r2, [sp, #16]
   293dc:	ldrd	r2, [r8, #32]
   293e0:	strd	r2, [sp, #24]
   293e4:	ldrd	r2, [r8, #40]	; 0x28
   293e8:	strd	r2, [sp, #32]
   293ec:	ldrd	r2, [r8, #48]	; 0x30
   293f0:	strd	r2, [sp, #40]	; 0x28
   293f4:	ldm	r8, {r2, r3}
   293f8:	mov	r0, fp
   293fc:	bl	276e4 <__assert_fail@plt+0x15120>
   29400:	cmp	r0, #0
   29404:	bne	2873c <__assert_fail@plt+0x16178>
   29408:	mov	r0, #1
   2940c:	b	2a344 <__assert_fail@plt+0x17d80>
   29410:	mov	r3, #1
   29414:	str	r3, [sp, #48]	; 0x30
   29418:	ldrd	r2, [r8, #8]
   2941c:	strd	r2, [sp]
   29420:	ldrd	r2, [r8, #16]
   29424:	strd	r2, [sp, #8]
   29428:	ldrd	r2, [r8, #24]
   2942c:	strd	r2, [sp, #16]
   29430:	ldrd	r2, [r8, #32]
   29434:	strd	r2, [sp, #24]
   29438:	ldrd	r2, [r8, #40]	; 0x28
   2943c:	strd	r2, [sp, #32]
   29440:	ldrd	r2, [r8, #48]	; 0x30
   29444:	strd	r2, [sp, #40]	; 0x28
   29448:	ldm	r8, {r2, r3}
   2944c:	mov	r0, fp
   29450:	bl	276e4 <__assert_fail@plt+0x15120>
   29454:	cmp	r0, #0
   29458:	bne	2873c <__assert_fail@plt+0x16178>
   2945c:	mov	r0, #1
   29460:	b	2a344 <__assert_fail@plt+0x17d80>
   29464:	mov	r1, #0
   29468:	str	r1, [sp, #292]	; 0x124
   2946c:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   29470:	strd	r2, [sp, #240]	; 0xf0
   29474:	str	r1, [sp, #80]	; 0x50
   29478:	str	r1, [sp, #56]	; 0x38
   2947c:	str	r1, [sp, #60]	; 0x3c
   29480:	ldr	r2, [sp, #116]	; 0x74
   29484:	str	r2, [sp, #68]	; 0x44
   29488:	ldr	r3, [sp, #128]	; 0x80
   2948c:	str	r3, [sp, #72]	; 0x48
   29490:	mov	r9, r2
   29494:	str	r3, [sp, #92]	; 0x5c
   29498:	str	r2, [sp, #96]	; 0x60
   2949c:	str	r3, [sp, #100]	; 0x64
   294a0:	str	r2, [sp, #84]	; 0x54
   294a4:	str	r3, [sp, #88]	; 0x58
   294a8:	b	2873c <__assert_fail@plt+0x16178>
   294ac:	mov	r1, #0
   294b0:	str	r1, [sp, #292]	; 0x124
   294b4:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   294b8:	strd	r2, [sp, #240]	; 0xf0
   294bc:	str	r1, [sp, #80]	; 0x50
   294c0:	str	r1, [sp, #56]	; 0x38
   294c4:	str	r1, [sp, #60]	; 0x3c
   294c8:	ldr	r2, [sp, #116]	; 0x74
   294cc:	str	r2, [sp, #68]	; 0x44
   294d0:	ldr	r3, [sp, #128]	; 0x80
   294d4:	str	r3, [sp, #72]	; 0x48
   294d8:	mov	r9, r2
   294dc:	str	r3, [sp, #92]	; 0x5c
   294e0:	str	r2, [sp, #96]	; 0x60
   294e4:	str	r3, [sp, #100]	; 0x64
   294e8:	str	r2, [sp, #84]	; 0x54
   294ec:	str	r3, [sp, #88]	; 0x58
   294f0:	b	2873c <__assert_fail@plt+0x16178>
   294f4:	mov	r3, #0
   294f8:	str	r3, [sp, #292]	; 0x124
   294fc:	mov	r0, #1
   29500:	mov	r1, #0
   29504:	strd	r0, [sp, #240]	; 0xf0
   29508:	str	r3, [sp, #80]	; 0x50
   2950c:	str	r3, [sp, #56]	; 0x38
   29510:	str	r3, [sp, #60]	; 0x3c
   29514:	ldr	r2, [sp, #116]	; 0x74
   29518:	str	r2, [sp, #68]	; 0x44
   2951c:	ldr	r3, [sp, #128]	; 0x80
   29520:	str	r3, [sp, #72]	; 0x48
   29524:	mov	r9, r2
   29528:	str	r3, [sp, #92]	; 0x5c
   2952c:	str	r2, [sp, #96]	; 0x60
   29530:	str	r3, [sp, #100]	; 0x64
   29534:	str	r2, [sp, #84]	; 0x54
   29538:	str	r3, [sp, #88]	; 0x58
   2953c:	b	2873c <__assert_fail@plt+0x16178>
   29540:	mov	r2, #56	; 0x38
   29544:	mov	r1, #0
   29548:	add	r0, sp, #240	; 0xf0
   2954c:	bl	12348 <memset@plt>
   29550:	ldr	r3, [r8, #-56]	; 0xffffffc8
   29554:	str	r3, [sp, #84]	; 0x54
   29558:	ldr	r3, [r8, #-52]	; 0xffffffcc
   2955c:	str	r3, [sp, #88]	; 0x58
   29560:	mov	r3, #0
   29564:	str	r3, [sp, #80]	; 0x50
   29568:	str	r3, [sp, #56]	; 0x38
   2956c:	str	r3, [sp, #60]	; 0x3c
   29570:	ldr	r2, [sp, #116]	; 0x74
   29574:	str	r2, [sp, #68]	; 0x44
   29578:	ldr	r3, [sp, #128]	; 0x80
   2957c:	str	r3, [sp, #72]	; 0x48
   29580:	mov	r9, r2
   29584:	str	r3, [sp, #92]	; 0x5c
   29588:	str	r2, [sp, #96]	; 0x60
   2958c:	str	r3, [sp, #100]	; 0x64
   29590:	b	2873c <__assert_fail@plt+0x16178>
   29594:	mov	r2, #56	; 0x38
   29598:	mov	r1, #0
   2959c:	add	r0, sp, #240	; 0xf0
   295a0:	bl	12348 <memset@plt>
   295a4:	ldr	r3, [r8, #-48]	; 0xffffffd0
   295a8:	str	r3, [sp, #84]	; 0x54
   295ac:	ldr	r3, [r8, #-44]	; 0xffffffd4
   295b0:	str	r3, [sp, #88]	; 0x58
   295b4:	mov	r3, #0
   295b8:	str	r3, [sp, #80]	; 0x50
   295bc:	str	r3, [sp, #56]	; 0x38
   295c0:	str	r3, [sp, #60]	; 0x3c
   295c4:	ldr	r2, [sp, #116]	; 0x74
   295c8:	str	r2, [sp, #68]	; 0x44
   295cc:	ldr	r3, [sp, #128]	; 0x80
   295d0:	str	r3, [sp, #72]	; 0x48
   295d4:	mov	r9, r2
   295d8:	str	r3, [sp, #92]	; 0x5c
   295dc:	str	r2, [sp, #96]	; 0x60
   295e0:	str	r3, [sp, #100]	; 0x64
   295e4:	b	2873c <__assert_fail@plt+0x16178>
   295e8:	mov	r2, #56	; 0x38
   295ec:	mov	r1, #0
   295f0:	add	r0, sp, #240	; 0xf0
   295f4:	bl	12348 <memset@plt>
   295f8:	mov	r3, #0
   295fc:	str	r3, [sp, #80]	; 0x50
   29600:	str	r3, [sp, #56]	; 0x38
   29604:	str	r3, [sp, #60]	; 0x3c
   29608:	ldr	r2, [sp, #116]	; 0x74
   2960c:	str	r2, [sp, #68]	; 0x44
   29610:	ldr	r3, [sp, #128]	; 0x80
   29614:	str	r3, [sp, #72]	; 0x48
   29618:	mov	r9, r2
   2961c:	str	r3, [sp, #92]	; 0x5c
   29620:	str	r2, [sp, #96]	; 0x60
   29624:	str	r3, [sp, #100]	; 0x64
   29628:	mov	r3, #1
   2962c:	str	r3, [sp, #84]	; 0x54
   29630:	mov	r3, #0
   29634:	str	r3, [sp, #88]	; 0x58
   29638:	b	2873c <__assert_fail@plt+0x16178>
   2963c:	mov	r2, #56	; 0x38
   29640:	mov	r1, #0
   29644:	add	r0, sp, #240	; 0xf0
   29648:	bl	12348 <memset@plt>
   2964c:	mov	r9, #0
   29650:	ldr	r1, [r8, #-52]	; 0xffffffcc
   29654:	ldr	r2, [r8, #-56]	; 0xffffffc8
   29658:	ldr	ip, [r8, #4]
   2965c:	ldr	r3, [r8]
   29660:	asr	r3, r3, #31
   29664:	cmp	r1, r2, asr #31
   29668:	bne	29734 <__assert_fail@plt+0x17170>
   2966c:	cmp	r3, ip
   29670:	bne	296c8 <__assert_fail@plt+0x17104>
   29674:	ldr	r3, [r8]
   29678:	smull	r2, r3, r2, r3
   2967c:	strd	r2, [sp, #136]	; 0x88
   29680:	ldrd	r2, [sp, #136]	; 0x88
   29684:	str	r2, [sp, #96]	; 0x60
   29688:	str	r3, [sp, #100]	; 0x64
   2968c:	cmp	r9, #0
   29690:	bne	2a3b8 <__assert_fail@plt+0x17df4>
   29694:	mov	r3, #0
   29698:	str	r3, [sp, #80]	; 0x50
   2969c:	str	r3, [sp, #56]	; 0x38
   296a0:	str	r3, [sp, #60]	; 0x3c
   296a4:	ldr	r2, [sp, #116]	; 0x74
   296a8:	str	r2, [sp, #68]	; 0x44
   296ac:	ldr	r3, [sp, #128]	; 0x80
   296b0:	str	r3, [sp, #72]	; 0x48
   296b4:	mov	r9, r2
   296b8:	str	r3, [sp, #92]	; 0x5c
   296bc:	str	r2, [sp, #84]	; 0x54
   296c0:	str	r3, [sp, #88]	; 0x58
   296c4:	b	2873c <__assert_fail@plt+0x16178>
   296c8:	ldr	r0, [r8]
   296cc:	ldr	r5, [r8, #4]
   296d0:	ldr	r1, [r8, #-56]	; 0xffffffc8
   296d4:	ldr	r2, [r8, #-56]	; 0xffffffc8
   296d8:	ldr	r3, [r8]
   296dc:	umull	r2, r3, r2, r3
   296e0:	strd	r2, [sp, #56]	; 0x38
   296e4:	umull	r2, r3, r1, ip
   296e8:	cmp	ip, #0
   296ec:	bge	29700 <__assert_fail@plt+0x1713c>
   296f0:	mov	lr, r1
   296f4:	mov	ip, #0
   296f8:	subs	r2, r2, ip
   296fc:	sbc	r3, r3, r1
   29700:	cmp	r1, #0
   29704:	bge	29710 <__assert_fail@plt+0x1714c>
   29708:	subs	r2, r2, r0
   2970c:	sbc	r3, r3, r5
   29710:	ldrd	r4, [sp, #56]	; 0x38
   29714:	mov	r0, #0
   29718:	adds	r1, r2, r5
   2971c:	adc	r0, r3, r0
   29720:	cmp	r0, r1, asr #31
   29724:	bne	297c4 <__assert_fail@plt+0x17200>
   29728:	str	r4, [sp, #136]	; 0x88
   2972c:	str	r1, [sp, #140]	; 0x8c
   29730:	b	29680 <__assert_fail@plt+0x170bc>
   29734:	cmp	r3, ip
   29738:	bne	29750 <__assert_fail@plt+0x1718c>
   2973c:	ldr	r0, [r8, #-56]	; 0xffffffc8
   29740:	ldr	r5, [r8, #-52]	; 0xffffffcc
   29744:	mov	ip, r1
   29748:	ldr	r1, [r8]
   2974c:	b	296d4 <__assert_fail@plt+0x17110>
   29750:	ldr	lr, [r8, #-52]	; 0xffffffcc
   29754:	ldr	r3, [r8]
   29758:	ldr	r0, [r8, #4]
   2975c:	ldr	r2, [r8, #-56]	; 0xffffffc8
   29760:	mul	r0, r2, r0
   29764:	mla	r0, r3, lr, r0
   29768:	umull	r2, r3, r2, r3
   2976c:	add	r3, r0, r3
   29770:	mov	r4, r2
   29774:	mov	r5, r3
   29778:	strd	r4, [sp, #136]	; 0x88
   2977c:	add	r3, r1, #1
   29780:	cmp	r3, #1
   29784:	bhi	297e8 <__assert_fail@plt+0x17224>
   29788:	add	r3, ip, #1
   2978c:	cmp	r3, #1
   29790:	bhi	297e8 <__assert_fail@plt+0x17224>
   29794:	cmp	r1, ip
   29798:	bne	297b0 <__assert_fail@plt+0x171ec>
   2979c:	mov	r3, r5
   297a0:	cmp	r2, #1
   297a4:	sbcs	r3, r3, #0
   297a8:	bge	29680 <__assert_fail@plt+0x170bc>
   297ac:	b	297e8 <__assert_fail@plt+0x17224>
   297b0:	ldrd	r2, [sp, #136]	; 0x88
   297b4:	cmp	r2, #0
   297b8:	sbcs	r3, r3, #0
   297bc:	blt	29680 <__assert_fail@plt+0x170bc>
   297c0:	b	297e8 <__assert_fail@plt+0x17224>
   297c4:	ldr	r1, [r8, #-52]	; 0xffffffcc
   297c8:	ldr	r0, [r8]
   297cc:	ldr	r3, [r8, #4]
   297d0:	ldr	r2, [r8, #-56]	; 0xffffffc8
   297d4:	mul	r3, r2, r3
   297d8:	mla	r1, r0, r1, r3
   297dc:	umull	r2, r3, r2, r0
   297e0:	add	r3, r1, r3
   297e4:	strd	r2, [sp, #136]	; 0x88
   297e8:	mov	r9, #1
   297ec:	b	29680 <__assert_fail@plt+0x170bc>
   297f0:	mov	r2, #56	; 0x38
   297f4:	mov	r1, #0
   297f8:	add	r0, sp, #240	; 0xf0
   297fc:	bl	12348 <memset@plt>
   29800:	mov	r9, #0
   29804:	ldr	r1, [r8, #-44]	; 0xffffffd4
   29808:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2980c:	ldr	ip, [r8, #4]
   29810:	ldr	r3, [r8]
   29814:	asr	r3, r3, #31
   29818:	cmp	r1, r2, asr #31
   2981c:	bne	298e8 <__assert_fail@plt+0x17324>
   29820:	cmp	r3, ip
   29824:	bne	2987c <__assert_fail@plt+0x172b8>
   29828:	ldr	r3, [r8]
   2982c:	smull	r2, r3, r2, r3
   29830:	strd	r2, [sp, #144]	; 0x90
   29834:	ldrd	r2, [sp, #144]	; 0x90
   29838:	str	r2, [sp, #96]	; 0x60
   2983c:	str	r3, [sp, #100]	; 0x64
   29840:	cmp	r9, #0
   29844:	bne	2a3c0 <__assert_fail@plt+0x17dfc>
   29848:	mov	r3, #0
   2984c:	str	r3, [sp, #80]	; 0x50
   29850:	str	r3, [sp, #56]	; 0x38
   29854:	str	r3, [sp, #60]	; 0x3c
   29858:	ldr	r2, [sp, #116]	; 0x74
   2985c:	str	r2, [sp, #68]	; 0x44
   29860:	ldr	r3, [sp, #128]	; 0x80
   29864:	str	r3, [sp, #72]	; 0x48
   29868:	mov	r9, r2
   2986c:	str	r3, [sp, #92]	; 0x5c
   29870:	str	r2, [sp, #84]	; 0x54
   29874:	str	r3, [sp, #88]	; 0x58
   29878:	b	2873c <__assert_fail@plt+0x16178>
   2987c:	ldr	r0, [r8]
   29880:	ldr	r5, [r8, #4]
   29884:	ldr	r1, [r8, #-48]	; 0xffffffd0
   29888:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2988c:	ldr	r3, [r8]
   29890:	umull	r2, r3, r2, r3
   29894:	strd	r2, [sp, #56]	; 0x38
   29898:	umull	r2, r3, r1, ip
   2989c:	cmp	ip, #0
   298a0:	bge	298b4 <__assert_fail@plt+0x172f0>
   298a4:	mov	lr, r1
   298a8:	mov	ip, #0
   298ac:	subs	r2, r2, ip
   298b0:	sbc	r3, r3, r1
   298b4:	cmp	r1, #0
   298b8:	bge	298c4 <__assert_fail@plt+0x17300>
   298bc:	subs	r2, r2, r0
   298c0:	sbc	r3, r3, r5
   298c4:	ldrd	r4, [sp, #56]	; 0x38
   298c8:	mov	r0, #0
   298cc:	adds	r1, r2, r5
   298d0:	adc	r0, r3, r0
   298d4:	cmp	r0, r1, asr #31
   298d8:	bne	29978 <__assert_fail@plt+0x173b4>
   298dc:	str	r4, [sp, #144]	; 0x90
   298e0:	str	r1, [sp, #148]	; 0x94
   298e4:	b	29834 <__assert_fail@plt+0x17270>
   298e8:	cmp	r3, ip
   298ec:	bne	29904 <__assert_fail@plt+0x17340>
   298f0:	ldr	r0, [r8, #-48]	; 0xffffffd0
   298f4:	ldr	r5, [r8, #-44]	; 0xffffffd4
   298f8:	mov	ip, r1
   298fc:	ldr	r1, [r8]
   29900:	b	29888 <__assert_fail@plt+0x172c4>
   29904:	ldr	lr, [r8, #-44]	; 0xffffffd4
   29908:	ldr	r3, [r8]
   2990c:	ldr	r0, [r8, #4]
   29910:	ldr	r2, [r8, #-48]	; 0xffffffd0
   29914:	mul	r0, r2, r0
   29918:	mla	r0, r3, lr, r0
   2991c:	umull	r2, r3, r2, r3
   29920:	add	r3, r0, r3
   29924:	mov	r4, r2
   29928:	mov	r5, r3
   2992c:	strd	r4, [sp, #144]	; 0x90
   29930:	add	r3, r1, #1
   29934:	cmp	r3, #1
   29938:	bhi	2999c <__assert_fail@plt+0x173d8>
   2993c:	add	r3, ip, #1
   29940:	cmp	r3, #1
   29944:	bhi	2999c <__assert_fail@plt+0x173d8>
   29948:	cmp	r1, ip
   2994c:	bne	29964 <__assert_fail@plt+0x173a0>
   29950:	mov	r3, r5
   29954:	cmp	r2, #1
   29958:	sbcs	r3, r3, #0
   2995c:	bge	29834 <__assert_fail@plt+0x17270>
   29960:	b	2999c <__assert_fail@plt+0x173d8>
   29964:	ldrd	r2, [sp, #144]	; 0x90
   29968:	cmp	r2, #0
   2996c:	sbcs	r3, r3, #0
   29970:	blt	29834 <__assert_fail@plt+0x17270>
   29974:	b	2999c <__assert_fail@plt+0x173d8>
   29978:	ldr	r1, [r8, #-44]	; 0xffffffd4
   2997c:	ldr	r0, [r8]
   29980:	ldr	r3, [r8, #4]
   29984:	ldr	r2, [r8, #-48]	; 0xffffffd0
   29988:	mul	r3, r2, r3
   2998c:	mla	r1, r0, r1, r3
   29990:	umull	r2, r3, r2, r0
   29994:	add	r3, r1, r3
   29998:	strd	r2, [sp, #144]	; 0x90
   2999c:	mov	r9, #1
   299a0:	b	29834 <__assert_fail@plt+0x17270>
   299a4:	mov	r2, #56	; 0x38
   299a8:	mov	r1, #0
   299ac:	add	r0, sp, #240	; 0xf0
   299b0:	bl	12348 <memset@plt>
   299b4:	ldr	r3, [r8]
   299b8:	str	r3, [sp, #96]	; 0x60
   299bc:	ldr	r3, [r8, #4]
   299c0:	str	r3, [sp, #100]	; 0x64
   299c4:	mov	r3, #0
   299c8:	str	r3, [sp, #80]	; 0x50
   299cc:	str	r3, [sp, #56]	; 0x38
   299d0:	str	r3, [sp, #60]	; 0x3c
   299d4:	ldr	r2, [sp, #116]	; 0x74
   299d8:	str	r2, [sp, #68]	; 0x44
   299dc:	ldr	r3, [sp, #128]	; 0x80
   299e0:	str	r3, [sp, #72]	; 0x48
   299e4:	mov	r9, r2
   299e8:	str	r3, [sp, #92]	; 0x5c
   299ec:	str	r2, [sp, #84]	; 0x54
   299f0:	str	r3, [sp, #88]	; 0x58
   299f4:	b	2873c <__assert_fail@plt+0x16178>
   299f8:	mov	r2, #56	; 0x38
   299fc:	mov	r1, #0
   29a00:	add	r0, sp, #240	; 0xf0
   29a04:	bl	12348 <memset@plt>
   29a08:	ldr	r9, [r8, #-56]	; 0xffffffc8
   29a0c:	ldr	r3, [r8, #-52]	; 0xffffffcc
   29a10:	str	r3, [sp, #92]	; 0x5c
   29a14:	mov	r3, #0
   29a18:	str	r3, [sp, #80]	; 0x50
   29a1c:	str	r3, [sp, #56]	; 0x38
   29a20:	str	r3, [sp, #60]	; 0x3c
   29a24:	ldr	r2, [sp, #116]	; 0x74
   29a28:	str	r2, [sp, #68]	; 0x44
   29a2c:	ldr	r3, [sp, #128]	; 0x80
   29a30:	str	r3, [sp, #72]	; 0x48
   29a34:	str	r2, [sp, #96]	; 0x60
   29a38:	str	r3, [sp, #100]	; 0x64
   29a3c:	str	r2, [sp, #84]	; 0x54
   29a40:	str	r3, [sp, #88]	; 0x58
   29a44:	b	2873c <__assert_fail@plt+0x16178>
   29a48:	mov	r2, #56	; 0x38
   29a4c:	mov	r1, #0
   29a50:	add	r0, sp, #240	; 0xf0
   29a54:	bl	12348 <memset@plt>
   29a58:	ldr	r9, [r8, #-48]	; 0xffffffd0
   29a5c:	ldr	r3, [r8, #-44]	; 0xffffffd4
   29a60:	str	r3, [sp, #92]	; 0x5c
   29a64:	mov	r3, #0
   29a68:	str	r3, [sp, #80]	; 0x50
   29a6c:	str	r3, [sp, #56]	; 0x38
   29a70:	str	r3, [sp, #60]	; 0x3c
   29a74:	ldr	r2, [sp, #116]	; 0x74
   29a78:	str	r2, [sp, #68]	; 0x44
   29a7c:	ldr	r3, [sp, #128]	; 0x80
   29a80:	str	r3, [sp, #72]	; 0x48
   29a84:	str	r2, [sp, #96]	; 0x60
   29a88:	str	r3, [sp, #100]	; 0x64
   29a8c:	str	r2, [sp, #84]	; 0x54
   29a90:	str	r3, [sp, #88]	; 0x58
   29a94:	b	2873c <__assert_fail@plt+0x16178>
   29a98:	mov	r2, #56	; 0x38
   29a9c:	mov	r1, #0
   29aa0:	add	r0, sp, #240	; 0xf0
   29aa4:	bl	12348 <memset@plt>
   29aa8:	mov	r3, #0
   29aac:	str	r3, [sp, #80]	; 0x50
   29ab0:	str	r3, [sp, #56]	; 0x38
   29ab4:	str	r3, [sp, #60]	; 0x3c
   29ab8:	ldr	r2, [sp, #116]	; 0x74
   29abc:	str	r2, [sp, #68]	; 0x44
   29ac0:	ldr	r3, [sp, #128]	; 0x80
   29ac4:	str	r3, [sp, #72]	; 0x48
   29ac8:	mov	r9, #1
   29acc:	mov	r1, #0
   29ad0:	str	r1, [sp, #92]	; 0x5c
   29ad4:	str	r2, [sp, #96]	; 0x60
   29ad8:	str	r3, [sp, #100]	; 0x64
   29adc:	str	r2, [sp, #84]	; 0x54
   29ae0:	str	r3, [sp, #88]	; 0x58
   29ae4:	b	2873c <__assert_fail@plt+0x16178>
   29ae8:	mov	r2, #56	; 0x38
   29aec:	mov	r1, #0
   29af0:	add	r0, sp, #240	; 0xf0
   29af4:	bl	12348 <memset@plt>
   29af8:	ldr	r3, [r8, #-56]	; 0xffffffc8
   29afc:	str	r3, [sp, #68]	; 0x44
   29b00:	ldr	r3, [r8, #-52]	; 0xffffffcc
   29b04:	str	r3, [sp, #72]	; 0x48
   29b08:	mov	r3, #0
   29b0c:	str	r3, [sp, #80]	; 0x50
   29b10:	str	r3, [sp, #56]	; 0x38
   29b14:	str	r3, [sp, #60]	; 0x3c
   29b18:	ldr	r2, [sp, #116]	; 0x74
   29b1c:	mov	r9, r2
   29b20:	ldr	r3, [sp, #128]	; 0x80
   29b24:	str	r3, [sp, #92]	; 0x5c
   29b28:	str	r2, [sp, #96]	; 0x60
   29b2c:	str	r3, [sp, #100]	; 0x64
   29b30:	str	r2, [sp, #84]	; 0x54
   29b34:	str	r3, [sp, #88]	; 0x58
   29b38:	b	2873c <__assert_fail@plt+0x16178>
   29b3c:	mov	r2, #56	; 0x38
   29b40:	mov	r1, #0
   29b44:	add	r0, sp, #240	; 0xf0
   29b48:	bl	12348 <memset@plt>
   29b4c:	ldr	r3, [r8, #-48]	; 0xffffffd0
   29b50:	str	r3, [sp, #68]	; 0x44
   29b54:	ldr	r3, [r8, #-44]	; 0xffffffd4
   29b58:	str	r3, [sp, #72]	; 0x48
   29b5c:	mov	r3, #0
   29b60:	str	r3, [sp, #80]	; 0x50
   29b64:	str	r3, [sp, #56]	; 0x38
   29b68:	str	r3, [sp, #60]	; 0x3c
   29b6c:	ldr	r2, [sp, #116]	; 0x74
   29b70:	mov	r9, r2
   29b74:	ldr	r3, [sp, #128]	; 0x80
   29b78:	str	r3, [sp, #92]	; 0x5c
   29b7c:	str	r2, [sp, #96]	; 0x60
   29b80:	str	r3, [sp, #100]	; 0x64
   29b84:	str	r2, [sp, #84]	; 0x54
   29b88:	str	r3, [sp, #88]	; 0x58
   29b8c:	b	2873c <__assert_fail@plt+0x16178>
   29b90:	mov	r2, #56	; 0x38
   29b94:	mov	r1, #0
   29b98:	add	r0, sp, #240	; 0xf0
   29b9c:	bl	12348 <memset@plt>
   29ba0:	mov	r3, #0
   29ba4:	str	r3, [sp, #80]	; 0x50
   29ba8:	str	r3, [sp, #56]	; 0x38
   29bac:	str	r3, [sp, #60]	; 0x3c
   29bb0:	mov	r3, #1
   29bb4:	str	r3, [sp, #68]	; 0x44
   29bb8:	mov	r3, #0
   29bbc:	str	r3, [sp, #72]	; 0x48
   29bc0:	ldr	r2, [sp, #116]	; 0x74
   29bc4:	mov	r9, r2
   29bc8:	ldr	r3, [sp, #128]	; 0x80
   29bcc:	str	r3, [sp, #92]	; 0x5c
   29bd0:	str	r2, [sp, #96]	; 0x60
   29bd4:	str	r3, [sp, #100]	; 0x64
   29bd8:	str	r2, [sp, #84]	; 0x54
   29bdc:	str	r3, [sp, #88]	; 0x58
   29be0:	b	2873c <__assert_fail@plt+0x16178>
   29be4:	mov	r2, #56	; 0x38
   29be8:	mov	r1, #0
   29bec:	add	r0, sp, #240	; 0xf0
   29bf0:	bl	12348 <memset@plt>
   29bf4:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   29bf8:	strd	r2, [sp, #56]	; 0x38
   29bfc:	mov	r3, #0
   29c00:	str	r3, [sp, #80]	; 0x50
   29c04:	str	r3, [sp, #68]	; 0x44
   29c08:	str	r3, [sp, #72]	; 0x48
   29c0c:	ldr	r2, [sp, #116]	; 0x74
   29c10:	mov	r9, r2
   29c14:	ldr	r3, [sp, #128]	; 0x80
   29c18:	str	r3, [sp, #92]	; 0x5c
   29c1c:	str	r2, [sp, #96]	; 0x60
   29c20:	str	r3, [sp, #100]	; 0x64
   29c24:	str	r2, [sp, #84]	; 0x54
   29c28:	str	r3, [sp, #88]	; 0x58
   29c2c:	b	2873c <__assert_fail@plt+0x16178>
   29c30:	mov	r2, #56	; 0x38
   29c34:	mov	r1, #0
   29c38:	add	r0, sp, #240	; 0xf0
   29c3c:	bl	12348 <memset@plt>
   29c40:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   29c44:	strd	r2, [sp, #56]	; 0x38
   29c48:	mov	r3, #0
   29c4c:	str	r3, [sp, #80]	; 0x50
   29c50:	str	r3, [sp, #68]	; 0x44
   29c54:	str	r3, [sp, #72]	; 0x48
   29c58:	ldr	r2, [sp, #116]	; 0x74
   29c5c:	mov	r9, r2
   29c60:	ldr	r3, [sp, #128]	; 0x80
   29c64:	str	r3, [sp, #92]	; 0x5c
   29c68:	str	r2, [sp, #96]	; 0x60
   29c6c:	str	r3, [sp, #100]	; 0x64
   29c70:	str	r2, [sp, #84]	; 0x54
   29c74:	str	r3, [sp, #88]	; 0x58
   29c78:	b	2873c <__assert_fail@plt+0x16178>
   29c7c:	mov	r2, #56	; 0x38
   29c80:	mov	r1, #0
   29c84:	add	r0, sp, #240	; 0xf0
   29c88:	bl	12348 <memset@plt>
   29c8c:	ldr	r3, [r8, #-56]	; 0xffffffc8
   29c90:	mov	r0, r3
   29c94:	asr	r1, r3, #31
   29c98:	strd	r0, [sp, #56]	; 0x38
   29c9c:	ldr	r3, [r8, #-52]	; 0xffffffcc
   29ca0:	str	r3, [sp, #80]	; 0x50
   29ca4:	mov	r3, #0
   29ca8:	str	r3, [sp, #68]	; 0x44
   29cac:	str	r3, [sp, #72]	; 0x48
   29cb0:	ldr	r2, [sp, #116]	; 0x74
   29cb4:	mov	r9, r2
   29cb8:	ldr	r3, [sp, #128]	; 0x80
   29cbc:	str	r3, [sp, #92]	; 0x5c
   29cc0:	str	r2, [sp, #96]	; 0x60
   29cc4:	str	r3, [sp, #100]	; 0x64
   29cc8:	str	r2, [sp, #84]	; 0x54
   29ccc:	str	r3, [sp, #88]	; 0x58
   29cd0:	b	2873c <__assert_fail@plt+0x16178>
   29cd4:	mov	r2, #56	; 0x38
   29cd8:	mov	r1, #0
   29cdc:	add	r0, sp, #240	; 0xf0
   29ce0:	bl	12348 <memset@plt>
   29ce4:	ldr	r3, [r8, #-56]	; 0xffffffc8
   29ce8:	mov	r0, r3
   29cec:	asr	r1, r3, #31
   29cf0:	strd	r0, [sp, #56]	; 0x38
   29cf4:	ldr	r3, [r8, #-52]	; 0xffffffcc
   29cf8:	str	r3, [sp, #80]	; 0x50
   29cfc:	mov	r3, #0
   29d00:	str	r3, [sp, #68]	; 0x44
   29d04:	str	r3, [sp, #72]	; 0x48
   29d08:	ldr	r2, [sp, #116]	; 0x74
   29d0c:	mov	r9, r2
   29d10:	ldr	r3, [sp, #128]	; 0x80
   29d14:	str	r3, [sp, #92]	; 0x5c
   29d18:	str	r2, [sp, #96]	; 0x60
   29d1c:	str	r3, [sp, #100]	; 0x64
   29d20:	str	r2, [sp, #84]	; 0x54
   29d24:	str	r3, [sp, #88]	; 0x58
   29d28:	b	2873c <__assert_fail@plt+0x16178>
   29d2c:	mov	r2, #56	; 0x38
   29d30:	mov	r1, #0
   29d34:	add	r0, sp, #240	; 0xf0
   29d38:	bl	12348 <memset@plt>
   29d3c:	mov	r3, #0
   29d40:	str	r3, [sp, #80]	; 0x50
   29d44:	mov	r2, #1
   29d48:	mov	r3, #0
   29d4c:	strd	r2, [sp, #56]	; 0x38
   29d50:	mov	r3, #0
   29d54:	str	r3, [sp, #68]	; 0x44
   29d58:	str	r3, [sp, #72]	; 0x48
   29d5c:	ldr	r2, [sp, #116]	; 0x74
   29d60:	mov	r9, r2
   29d64:	ldr	r3, [sp, #128]	; 0x80
   29d68:	str	r3, [sp, #92]	; 0x5c
   29d6c:	str	r2, [sp, #96]	; 0x60
   29d70:	str	r3, [sp, #100]	; 0x64
   29d74:	str	r2, [sp, #84]	; 0x54
   29d78:	str	r3, [sp, #88]	; 0x58
   29d7c:	b	2873c <__assert_fail@plt+0x16178>
   29d80:	mov	r1, #0
   29d84:	str	r1, [sp, #292]	; 0x124
   29d88:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   29d8c:	strd	r2, [sp, #240]	; 0xf0
   29d90:	str	r1, [sp, #80]	; 0x50
   29d94:	str	r1, [sp, #56]	; 0x38
   29d98:	str	r1, [sp, #60]	; 0x3c
   29d9c:	ldr	r2, [sp, #116]	; 0x74
   29da0:	str	r2, [sp, #68]	; 0x44
   29da4:	ldr	r3, [sp, #128]	; 0x80
   29da8:	str	r3, [sp, #72]	; 0x48
   29dac:	mov	r9, r2
   29db0:	str	r3, [sp, #92]	; 0x5c
   29db4:	str	r2, [sp, #96]	; 0x60
   29db8:	str	r3, [sp, #100]	; 0x64
   29dbc:	str	r2, [sp, #84]	; 0x54
   29dc0:	str	r3, [sp, #88]	; 0x58
   29dc4:	b	2873c <__assert_fail@plt+0x16178>
   29dc8:	mov	r2, #56	; 0x38
   29dcc:	mov	r1, #0
   29dd0:	add	r0, sp, #240	; 0xf0
   29dd4:	bl	12348 <memset@plt>
   29dd8:	ldr	r3, [r8, #-48]	; 0xffffffd0
   29ddc:	str	r3, [sp, #84]	; 0x54
   29de0:	ldr	r3, [r8, #-44]	; 0xffffffd4
   29de4:	str	r3, [sp, #88]	; 0x58
   29de8:	mov	r3, #0
   29dec:	str	r3, [sp, #80]	; 0x50
   29df0:	str	r3, [sp, #56]	; 0x38
   29df4:	str	r3, [sp, #60]	; 0x3c
   29df8:	ldr	r2, [sp, #116]	; 0x74
   29dfc:	str	r2, [sp, #68]	; 0x44
   29e00:	ldr	r3, [sp, #128]	; 0x80
   29e04:	str	r3, [sp, #72]	; 0x48
   29e08:	mov	r9, r2
   29e0c:	str	r3, [sp, #92]	; 0x5c
   29e10:	str	r2, [sp, #96]	; 0x60
   29e14:	str	r3, [sp, #100]	; 0x64
   29e18:	b	2873c <__assert_fail@plt+0x16178>
   29e1c:	mov	r2, #56	; 0x38
   29e20:	mov	r1, #0
   29e24:	add	r0, sp, #240	; 0xf0
   29e28:	bl	12348 <memset@plt>
   29e2c:	mov	r9, #0
   29e30:	ldr	r1, [r8, #-44]	; 0xffffffd4
   29e34:	ldr	r2, [r8, #-48]	; 0xffffffd0
   29e38:	ldr	ip, [r8, #4]
   29e3c:	ldr	r3, [r8]
   29e40:	asr	r3, r3, #31
   29e44:	cmp	r1, r2, asr #31
   29e48:	bne	29f14 <__assert_fail@plt+0x17950>
   29e4c:	cmp	r3, ip
   29e50:	bne	29ea8 <__assert_fail@plt+0x178e4>
   29e54:	ldr	r3, [r8]
   29e58:	smull	r2, r3, r2, r3
   29e5c:	strd	r2, [sp, #152]	; 0x98
   29e60:	ldrd	r2, [sp, #152]	; 0x98
   29e64:	str	r2, [sp, #96]	; 0x60
   29e68:	str	r3, [sp, #100]	; 0x64
   29e6c:	cmp	r9, #0
   29e70:	bne	2a3c8 <__assert_fail@plt+0x17e04>
   29e74:	mov	r3, #0
   29e78:	str	r3, [sp, #80]	; 0x50
   29e7c:	str	r3, [sp, #56]	; 0x38
   29e80:	str	r3, [sp, #60]	; 0x3c
   29e84:	ldr	r2, [sp, #116]	; 0x74
   29e88:	str	r2, [sp, #68]	; 0x44
   29e8c:	ldr	r3, [sp, #128]	; 0x80
   29e90:	str	r3, [sp, #72]	; 0x48
   29e94:	mov	r9, r2
   29e98:	str	r3, [sp, #92]	; 0x5c
   29e9c:	str	r2, [sp, #84]	; 0x54
   29ea0:	str	r3, [sp, #88]	; 0x58
   29ea4:	b	2873c <__assert_fail@plt+0x16178>
   29ea8:	ldr	r0, [r8]
   29eac:	ldr	r5, [r8, #4]
   29eb0:	ldr	r1, [r8, #-48]	; 0xffffffd0
   29eb4:	ldr	r2, [r8, #-48]	; 0xffffffd0
   29eb8:	ldr	r3, [r8]
   29ebc:	umull	r2, r3, r2, r3
   29ec0:	strd	r2, [sp, #56]	; 0x38
   29ec4:	umull	r2, r3, r1, ip
   29ec8:	cmp	ip, #0
   29ecc:	bge	29ee0 <__assert_fail@plt+0x1791c>
   29ed0:	mov	lr, r1
   29ed4:	mov	ip, #0
   29ed8:	subs	r2, r2, ip
   29edc:	sbc	r3, r3, r1
   29ee0:	cmp	r1, #0
   29ee4:	bge	29ef0 <__assert_fail@plt+0x1792c>
   29ee8:	subs	r2, r2, r0
   29eec:	sbc	r3, r3, r5
   29ef0:	ldrd	r4, [sp, #56]	; 0x38
   29ef4:	mov	r0, #0
   29ef8:	adds	r1, r2, r5
   29efc:	adc	r0, r3, r0
   29f00:	cmp	r0, r1, asr #31
   29f04:	bne	29fa4 <__assert_fail@plt+0x179e0>
   29f08:	str	r4, [sp, #152]	; 0x98
   29f0c:	str	r1, [sp, #156]	; 0x9c
   29f10:	b	29e60 <__assert_fail@plt+0x1789c>
   29f14:	cmp	r3, ip
   29f18:	bne	29f30 <__assert_fail@plt+0x1796c>
   29f1c:	ldr	r0, [r8, #-48]	; 0xffffffd0
   29f20:	ldr	r5, [r8, #-44]	; 0xffffffd4
   29f24:	mov	ip, r1
   29f28:	ldr	r1, [r8]
   29f2c:	b	29eb4 <__assert_fail@plt+0x178f0>
   29f30:	ldr	lr, [r8, #-44]	; 0xffffffd4
   29f34:	ldr	r3, [r8]
   29f38:	ldr	r0, [r8, #4]
   29f3c:	ldr	r2, [r8, #-48]	; 0xffffffd0
   29f40:	mul	r0, r2, r0
   29f44:	mla	r0, r3, lr, r0
   29f48:	umull	r2, r3, r2, r3
   29f4c:	add	r3, r0, r3
   29f50:	mov	r4, r2
   29f54:	mov	r5, r3
   29f58:	strd	r4, [sp, #152]	; 0x98
   29f5c:	add	r3, r1, #1
   29f60:	cmp	r3, #1
   29f64:	bhi	29fc8 <__assert_fail@plt+0x17a04>
   29f68:	add	r3, ip, #1
   29f6c:	cmp	r3, #1
   29f70:	bhi	29fc8 <__assert_fail@plt+0x17a04>
   29f74:	cmp	r1, ip
   29f78:	bne	29f90 <__assert_fail@plt+0x179cc>
   29f7c:	mov	r3, r5
   29f80:	cmp	r2, #1
   29f84:	sbcs	r3, r3, #0
   29f88:	bge	29e60 <__assert_fail@plt+0x1789c>
   29f8c:	b	29fc8 <__assert_fail@plt+0x17a04>
   29f90:	ldrd	r2, [sp, #152]	; 0x98
   29f94:	cmp	r2, #0
   29f98:	sbcs	r3, r3, #0
   29f9c:	blt	29e60 <__assert_fail@plt+0x1789c>
   29fa0:	b	29fc8 <__assert_fail@plt+0x17a04>
   29fa4:	ldr	r1, [r8, #-44]	; 0xffffffd4
   29fa8:	ldr	r0, [r8]
   29fac:	ldr	r3, [r8, #4]
   29fb0:	ldr	r2, [r8, #-48]	; 0xffffffd0
   29fb4:	mul	r3, r2, r3
   29fb8:	mla	r1, r0, r1, r3
   29fbc:	umull	r2, r3, r2, r0
   29fc0:	add	r3, r1, r3
   29fc4:	strd	r2, [sp, #152]	; 0x98
   29fc8:	mov	r9, #1
   29fcc:	b	29e60 <__assert_fail@plt+0x1789c>
   29fd0:	mov	r2, #56	; 0x38
   29fd4:	mov	r1, #0
   29fd8:	add	r0, sp, #240	; 0xf0
   29fdc:	bl	12348 <memset@plt>
   29fe0:	ldr	r9, [r8, #-48]	; 0xffffffd0
   29fe4:	ldr	r3, [r8, #-44]	; 0xffffffd4
   29fe8:	str	r3, [sp, #92]	; 0x5c
   29fec:	mov	r3, #0
   29ff0:	str	r3, [sp, #80]	; 0x50
   29ff4:	str	r3, [sp, #56]	; 0x38
   29ff8:	str	r3, [sp, #60]	; 0x3c
   29ffc:	ldr	r2, [sp, #116]	; 0x74
   2a000:	str	r2, [sp, #68]	; 0x44
   2a004:	ldr	r3, [sp, #128]	; 0x80
   2a008:	str	r3, [sp, #72]	; 0x48
   2a00c:	str	r2, [sp, #96]	; 0x60
   2a010:	str	r3, [sp, #100]	; 0x64
   2a014:	str	r2, [sp, #84]	; 0x54
   2a018:	str	r3, [sp, #88]	; 0x58
   2a01c:	b	2873c <__assert_fail@plt+0x16178>
   2a020:	mov	r2, #56	; 0x38
   2a024:	mov	r1, #0
   2a028:	add	r0, sp, #240	; 0xf0
   2a02c:	bl	12348 <memset@plt>
   2a030:	ldr	r3, [r8, #-48]	; 0xffffffd0
   2a034:	str	r3, [sp, #68]	; 0x44
   2a038:	ldr	r3, [r8, #-44]	; 0xffffffd4
   2a03c:	str	r3, [sp, #72]	; 0x48
   2a040:	mov	r3, #0
   2a044:	str	r3, [sp, #80]	; 0x50
   2a048:	str	r3, [sp, #56]	; 0x38
   2a04c:	str	r3, [sp, #60]	; 0x3c
   2a050:	ldr	r2, [sp, #116]	; 0x74
   2a054:	mov	r9, r2
   2a058:	ldr	r3, [sp, #128]	; 0x80
   2a05c:	str	r3, [sp, #92]	; 0x5c
   2a060:	str	r2, [sp, #96]	; 0x60
   2a064:	str	r3, [sp, #100]	; 0x64
   2a068:	str	r2, [sp, #84]	; 0x54
   2a06c:	str	r3, [sp, #88]	; 0x58
   2a070:	b	2873c <__assert_fail@plt+0x16178>
   2a074:	mov	r2, #56	; 0x38
   2a078:	mov	r1, #0
   2a07c:	add	r0, sp, #240	; 0xf0
   2a080:	bl	12348 <memset@plt>
   2a084:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   2a088:	strd	r2, [sp, #56]	; 0x38
   2a08c:	mov	r3, #0
   2a090:	str	r3, [sp, #80]	; 0x50
   2a094:	str	r3, [sp, #68]	; 0x44
   2a098:	str	r3, [sp, #72]	; 0x48
   2a09c:	ldr	r2, [sp, #116]	; 0x74
   2a0a0:	mov	r9, r2
   2a0a4:	ldr	r3, [sp, #128]	; 0x80
   2a0a8:	str	r3, [sp, #92]	; 0x5c
   2a0ac:	str	r2, [sp, #96]	; 0x60
   2a0b0:	str	r3, [sp, #100]	; 0x64
   2a0b4:	str	r2, [sp, #84]	; 0x54
   2a0b8:	str	r3, [sp, #88]	; 0x58
   2a0bc:	b	2873c <__assert_fail@plt+0x16178>
   2a0c0:	mov	r2, #56	; 0x38
   2a0c4:	mov	r1, #0
   2a0c8:	add	r0, sp, #240	; 0xf0
   2a0cc:	bl	12348 <memset@plt>
   2a0d0:	ldr	r3, [r8]
   2a0d4:	str	r3, [sp, #96]	; 0x60
   2a0d8:	ldr	r3, [r8, #4]
   2a0dc:	str	r3, [sp, #100]	; 0x64
   2a0e0:	mov	r3, #0
   2a0e4:	str	r3, [sp, #80]	; 0x50
   2a0e8:	str	r3, [sp, #56]	; 0x38
   2a0ec:	str	r3, [sp, #60]	; 0x3c
   2a0f0:	ldr	r2, [sp, #116]	; 0x74
   2a0f4:	str	r2, [sp, #68]	; 0x44
   2a0f8:	ldr	r3, [sp, #128]	; 0x80
   2a0fc:	str	r3, [sp, #72]	; 0x48
   2a100:	mov	r9, r2
   2a104:	str	r3, [sp, #92]	; 0x5c
   2a108:	str	r2, [sp, #84]	; 0x54
   2a10c:	str	r3, [sp, #88]	; 0x58
   2a110:	b	2873c <__assert_fail@plt+0x16178>
   2a114:	ldr	r3, [r8, #8]
   2a118:	ldr	r2, [r8, #12]
   2a11c:	adds	r1, r3, #-2147483648	; 0x80000000
   2a120:	str	r1, [sp, #200]	; 0xc8
   2a124:	adc	r2, r2, #0
   2a128:	str	r2, [sp, #204]	; 0xcc
   2a12c:	mvn	r0, #0
   2a130:	mov	r1, #0
   2a134:	ldrd	r4, [sp, #200]	; 0xc8
   2a138:	cmp	r5, r1
   2a13c:	cmpeq	r4, r0
   2a140:	bhi	2a3d0 <__assert_fail@plt+0x17e0c>
   2a144:	str	r3, [sp, #240]	; 0xf0
   2a148:	mov	r3, #0
   2a14c:	str	r3, [sp, #244]	; 0xf4
   2a150:	b	2873c <__assert_fail@plt+0x16178>
   2a154:	ldr	r3, [r8, #8]
   2a158:	ldr	r2, [r8, #12]
   2a15c:	adds	r1, r3, #-2147483648	; 0x80000000
   2a160:	str	r1, [sp, #208]	; 0xd0
   2a164:	adc	r2, r2, #0
   2a168:	str	r2, [sp, #212]	; 0xd4
   2a16c:	mvn	r0, #0
   2a170:	mov	r1, #0
   2a174:	ldrd	r4, [sp, #208]	; 0xd0
   2a178:	cmp	r5, r1
   2a17c:	cmpeq	r4, r0
   2a180:	bhi	2a3d8 <__assert_fail@plt+0x17e14>
   2a184:	str	r3, [sp, #240]	; 0xf0
   2a188:	mov	r3, #0
   2a18c:	str	r3, [sp, #244]	; 0xf4
   2a190:	b	2873c <__assert_fail@plt+0x16178>
   2a194:	ldrd	r2, [r8, #8]
   2a198:	strd	r2, [sp]
   2a19c:	ldrd	r2, [r8, #16]
   2a1a0:	strd	r2, [sp, #8]
   2a1a4:	ldm	r8, {r2, r3}
   2a1a8:	mov	r0, fp
   2a1ac:	bl	27560 <__assert_fail@plt+0x14f9c>
   2a1b0:	b	2873c <__assert_fail@plt+0x16178>
   2a1b4:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   2a1b8:	strd	r2, [sp]
   2a1bc:	ldrd	r2, [r8, #-40]	; 0xffffffd8
   2a1c0:	strd	r2, [sp, #8]
   2a1c4:	sub	r3, r8, #56	; 0x38
   2a1c8:	ldm	r3, {r2, r3}
   2a1cc:	mov	r0, fp
   2a1d0:	bl	27560 <__assert_fail@plt+0x14f9c>
   2a1d4:	mov	r3, #1
   2a1d8:	str	r3, [sp, #48]	; 0x30
   2a1dc:	ldrd	r2, [r8, #8]
   2a1e0:	strd	r2, [sp]
   2a1e4:	ldrd	r2, [r8, #16]
   2a1e8:	strd	r2, [sp, #8]
   2a1ec:	ldrd	r2, [r8, #24]
   2a1f0:	strd	r2, [sp, #16]
   2a1f4:	ldrd	r2, [r8, #32]
   2a1f8:	strd	r2, [sp, #24]
   2a1fc:	ldrd	r2, [r8, #40]	; 0x28
   2a200:	strd	r2, [sp, #32]
   2a204:	ldrd	r2, [r8, #48]	; 0x30
   2a208:	strd	r2, [sp, #40]	; 0x28
   2a20c:	ldm	r8, {r2, r3}
   2a210:	mov	r0, fp
   2a214:	bl	276e4 <__assert_fail@plt+0x15120>
   2a218:	cmp	r0, #0
   2a21c:	bne	2873c <__assert_fail@plt+0x16178>
   2a220:	mov	r0, #1
   2a224:	b	2a344 <__assert_fail@plt+0x17d80>
   2a228:	mvn	r2, #0
   2a22c:	mvn	r3, #0
   2a230:	strd	r2, [sp, #240]	; 0xf0
   2a234:	b	2873c <__assert_fail@plt+0x16178>
   2a238:	ldrd	r2, [r8, #8]
   2a23c:	strd	r2, [sp, #240]	; 0xf0
   2a240:	b	2873c <__assert_fail@plt+0x16178>
   2a244:	add	r2, r7, r2
   2a248:	ldrb	r5, [r2, #2388]	; 0x954
   2a24c:	b	28838 <__assert_fail@plt+0x16274>
   2a250:	ldr	r3, [sp, #104]	; 0x68
   2a254:	cmp	r3, #3
   2a258:	bne	2a268 <__assert_fail@plt+0x17ca4>
   2a25c:	cmp	r6, #0
   2a260:	bgt	2a278 <__assert_fail@plt+0x17cb4>
   2a264:	beq	2a3e0 <__assert_fail@plt+0x17e1c>
   2a268:	movw	r2, #1132	; 0x46c
   2a26c:	add	r1, sp, #1408	; 0x580
   2a270:	add	r1, r1, #8
   2a274:	b	2a290 <__assert_fail@plt+0x17ccc>
   2a278:	mvn	r6, #1
   2a27c:	b	2a268 <__assert_fail@plt+0x17ca4>
   2a280:	cmp	sl, r1
   2a284:	beq	2a41c <__assert_fail@plt+0x17e58>
   2a288:	sub	r8, r8, #56	; 0x38
   2a28c:	ldrsh	r5, [sl, #-2]!
   2a290:	add	r5, r7, r5
   2a294:	ldrsb	r3, [r5, r2]
   2a298:	cmn	r3, #93	; 0x5d
   2a29c:	beq	2a280 <__assert_fail@plt+0x17cbc>
   2a2a0:	add	r3, r3, #1
   2a2a4:	cmp	r3, #112	; 0x70
   2a2a8:	bhi	2a280 <__assert_fail@plt+0x17cbc>
   2a2ac:	add	r0, r7, r3
   2a2b0:	ldrb	r0, [r0, #2272]	; 0x8e0
   2a2b4:	cmp	r0, #1
   2a2b8:	bne	2a280 <__assert_fail@plt+0x17cbc>
   2a2bc:	add	r3, r7, r3
   2a2c0:	ldrb	r5, [r3, #2388]	; 0x954
   2a2c4:	cmp	r5, #0
   2a2c8:	ble	2a280 <__assert_fail@plt+0x17cbc>
   2a2cc:	add	r1, r8, #56	; 0x38
   2a2d0:	add	r0, sp, #1456	; 0x5b0
   2a2d4:	add	r0, r0, #8
   2a2d8:	ldrd	r2, [sp, #120]	; 0x78
   2a2dc:	strd	r2, [r0]
   2a2e0:	ldr	r3, [sp, #160]	; 0xa0
   2a2e4:	str	r3, [sp, #1472]	; 0x5c0
   2a2e8:	add	r0, sp, #1456	; 0x5b0
   2a2ec:	ldrd	r2, [r0]
   2a2f0:	strd	r2, [r8, #56]	; 0x38
   2a2f4:	ldrd	r2, [sp, #120]	; 0x78
   2a2f8:	strd	r2, [r8, #64]	; 0x40
   2a2fc:	ldrd	r2, [r0, #16]
   2a300:	strd	r2, [r8, #72]	; 0x48
   2a304:	ldrd	r2, [r0, #24]
   2a308:	strd	r2, [r8, #80]	; 0x50
   2a30c:	ldrd	r2, [r0, #32]
   2a310:	strd	r2, [r8, #88]	; 0x58
   2a314:	ldrd	r2, [r0, #40]	; 0x28
   2a318:	strd	r2, [r8, #96]	; 0x60
   2a31c:	ldrd	r2, [r0, #48]	; 0x30
   2a320:	strd	r2, [r8, #104]	; 0x68
   2a324:	mov	r8, r1
   2a328:	mov	r4, sl
   2a32c:	mov	r3, #3
   2a330:	str	r3, [sp, #104]	; 0x68
   2a334:	b	28838 <__assert_fail@plt+0x16274>
   2a338:	mov	r3, #0
   2a33c:	str	r3, [sp, #112]	; 0x70
   2a340:	mov	r0, #2
   2a344:	ldr	r3, [sp, #112]	; 0x70
   2a348:	sub	r1, sl, r3, lsl #1
   2a34c:	add	r3, sp, #1408	; 0x580
   2a350:	add	r3, r3, #8
   2a354:	cmp	r1, r3
   2a358:	beq	2a3fc <__assert_fail@plt+0x17e38>
   2a35c:	add	r3, sp, #1504	; 0x5e0
   2a360:	add	r3, r3, #8
   2a364:	rsb	r3, r3, #94	; 0x5e
   2a368:	add	r1, r1, r3
   2a36c:	lsr	r1, r1, #1
   2a370:	mov	r3, #0
   2a374:	b	2a3f0 <__assert_fail@plt+0x17e2c>
   2a378:	mov	r3, #0
   2a37c:	str	r3, [sp, #112]	; 0x70
   2a380:	mov	r0, r3
   2a384:	b	2a344 <__assert_fail@plt+0x17d80>
   2a388:	mov	r0, #1
   2a38c:	b	2a344 <__assert_fail@plt+0x17d80>
   2a390:	mov	r0, #1
   2a394:	b	2a344 <__assert_fail@plt+0x17d80>
   2a398:	mov	r0, #1
   2a39c:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3a0:	mov	r0, #1
   2a3a4:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3a8:	mov	r0, #1
   2a3ac:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3b0:	mov	r0, #1
   2a3b4:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3b8:	mov	r0, #1
   2a3bc:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3c0:	mov	r0, #1
   2a3c4:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3c8:	mov	r0, #1
   2a3cc:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3d0:	mov	r0, #1
   2a3d4:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3d8:	mov	r0, #1
   2a3dc:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3e0:	str	r6, [sp, #112]	; 0x70
   2a3e4:	mov	r0, #1
   2a3e8:	b	2a344 <__assert_fail@plt+0x17d80>
   2a3ec:	mov	r3, r2
   2a3f0:	add	r2, r3, #1
   2a3f4:	cmp	r1, r3
   2a3f8:	bne	2a3ec <__assert_fail@plt+0x17e28>
   2a3fc:	add	sp, sp, #1504	; 0x5e0
   2a400:	add	sp, sp, #12
   2a404:	ldrd	r4, [sp]
   2a408:	ldrd	r6, [sp, #8]
   2a40c:	ldrd	r8, [sp, #16]
   2a410:	ldrd	sl, [sp, #24]
   2a414:	add	sp, sp, #32
   2a418:	pop	{pc}		; (ldr pc, [sp], #4)
   2a41c:	mov	r0, #1
   2a420:	b	2a3fc <__assert_fail@plt+0x17e38>
   2a424:	mov	r6, #63	; 0x3f
   2a428:	b	28150 <__assert_fail@plt+0x15b8c>
   2a42c:	cmp	r1, #45	; 0x2d
   2a430:	movne	r3, #0
   2a434:	moveq	r3, #1
   2a438:	b	27f5c <__assert_fail@plt+0x15998>
   2a43c:	add	r3, r7, #1120	; 0x460
   2a440:	str	r3, [sp, #56]	; 0x38
   2a444:	b	28450 <__assert_fail@plt+0x15e8c>
   2a448:	add	r3, r7, #808	; 0x328
   2a44c:	str	r3, [sp, #56]	; 0x38
   2a450:	b	28450 <__assert_fail@plt+0x15e8c>
   2a454:	mov	r6, #63	; 0x3f
   2a458:	b	28874 <__assert_fail@plt+0x162b0>
   2a45c:	add	r1, sp, #248	; 0xf8
   2a460:	ldrd	r2, [r8, #56]	; 0x38
   2a464:	strd	r2, [sp, #240]	; 0xf0
   2a468:	ldrd	r2, [r8, #64]	; 0x40
   2a46c:	strd	r2, [r1], #-8
   2a470:	ldrd	r2, [r8, #72]	; 0x48
   2a474:	strd	r2, [r1, #16]
   2a478:	ldrd	r2, [r8, #80]	; 0x50
   2a47c:	strd	r2, [r1, #24]
   2a480:	ldrd	r2, [r8, #88]	; 0x58
   2a484:	strd	r2, [r1, #32]
   2a488:	ldrd	r2, [r8, #96]	; 0x60
   2a48c:	strd	r2, [r1, #40]	; 0x28
   2a490:	ldrd	r2, [r8, #104]	; 0x68
   2a494:	strd	r2, [r1, #48]	; 0x30
   2a498:	ldr	r3, [r8, #64]	; 0x40
   2a49c:	str	r3, [sp, #84]	; 0x54
   2a4a0:	ldr	r3, [r8, #68]	; 0x44
   2a4a4:	str	r3, [sp, #88]	; 0x58
   2a4a8:	ldr	r3, [r8, #72]	; 0x48
   2a4ac:	str	r3, [sp, #96]	; 0x60
   2a4b0:	ldr	r3, [r8, #76]	; 0x4c
   2a4b4:	str	r3, [sp, #100]	; 0x64
   2a4b8:	ldr	r9, [r8, #80]	; 0x50
   2a4bc:	ldr	r3, [r8, #84]	; 0x54
   2a4c0:	str	r3, [sp, #92]	; 0x5c
   2a4c4:	ldr	r3, [r8, #88]	; 0x58
   2a4c8:	str	r3, [sp, #68]	; 0x44
   2a4cc:	ldr	r3, [r8, #92]	; 0x5c
   2a4d0:	str	r3, [sp, #72]	; 0x48
   2a4d4:	ldrd	r2, [r8, #96]	; 0x60
   2a4d8:	strd	r2, [sp, #56]	; 0x38
   2a4dc:	ldr	r3, [r8, #104]	; 0x68
   2a4e0:	str	r3, [sp, #80]	; 0x50
   2a4e4:	mov	r3, #0
   2a4e8:	str	r3, [sp, #76]	; 0x4c
   2a4ec:	str	r3, [sp, #108]	; 0x6c
   2a4f0:	b	2873c <__assert_fail@plt+0x16178>
   2a4f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a4f8:	strd	r6, [sp, #8]
   2a4fc:	strd	r8, [sp, #16]
   2a500:	strd	sl, [sp, #24]
   2a504:	str	lr, [sp, #32]
   2a508:	sub	sp, sp, #620	; 0x26c
   2a50c:	mov	r9, r0
   2a510:	mov	r4, r1
   2a514:	subs	sl, r2, #0
   2a518:	beq	2a58c <__assert_fail@plt+0x17fc8>
   2a51c:	ldr	r8, [sl]
   2a520:	ldr	fp, [sl, #4]
   2a524:	mov	r6, r4
   2a528:	ldrb	r3, [r4], #1
   2a52c:	cmp	r3, #9
   2a530:	bcc	2a544 <__assert_fail@plt+0x17f80>
   2a534:	cmp	r3, #13
   2a538:	bls	2a524 <__assert_fail@plt+0x17f60>
   2a53c:	cmp	r3, #32
   2a540:	beq	2a524 <__assert_fail@plt+0x17f60>
   2a544:	mov	r2, #56	; 0x38
   2a548:	mov	r1, #0
   2a54c:	add	r0, sp, #360	; 0x168
   2a550:	bl	12348 <memset@plt>
   2a554:	mov	r2, #4
   2a558:	movw	r1, #39476	; 0x9a34
   2a55c:	movt	r1, #4
   2a560:	mov	r0, r6
   2a564:	bl	12564 <strncmp@plt>
   2a568:	cmp	r0, #0
   2a56c:	bne	2b048 <__assert_fail@plt+0x18a84>
   2a570:	add	r7, r6, #4
   2a574:	ldrb	r3, [r6, #4]
   2a578:	cmp	r3, #0
   2a57c:	beq	2b048 <__assert_fail@plt+0x18a84>
   2a580:	mov	r2, r7
   2a584:	mov	r0, #1
   2a588:	b	2a5c4 <__assert_fail@plt+0x18000>
   2a58c:	add	r0, sp, #420	; 0x1a4
   2a590:	bl	41e5c <__assert_fail@plt+0x2f898>
   2a594:	add	sl, sp, #420	; 0x1a4
   2a598:	b	2a51c <__assert_fail@plt+0x17f58>
   2a59c:	add	r3, r2, #1
   2a5a0:	ldrb	r2, [r2, #1]
   2a5a4:	cmp	r2, #92	; 0x5c
   2a5a8:	cmpne	r2, #34	; 0x22
   2a5ac:	bne	2b048 <__assert_fail@plt+0x18a84>
   2a5b0:	add	r2, r3, #1
   2a5b4:	add	r0, r0, #1
   2a5b8:	ldrb	r3, [r3, #1]
   2a5bc:	cmp	r3, #0
   2a5c0:	beq	2b048 <__assert_fail@plt+0x18a84>
   2a5c4:	cmp	r3, #92	; 0x5c
   2a5c8:	beq	2a59c <__assert_fail@plt+0x17fd8>
   2a5cc:	cmp	r3, #34	; 0x22
   2a5d0:	beq	2a5dc <__assert_fail@plt+0x18018>
   2a5d4:	mov	r3, r2
   2a5d8:	b	2a5b0 <__assert_fail@plt+0x17fec>
   2a5dc:	cmp	r0, #100	; 0x64
   2a5e0:	addle	r0, sp, #428	; 0x1ac
   2a5e4:	movle	r5, #0
   2a5e8:	bgt	2a67c <__assert_fail@plt+0x180b8>
   2a5ec:	ldrb	r3, [r6, #4]
   2a5f0:	cmp	r3, #34	; 0x22
   2a5f4:	beq	2a694 <__assert_fail@plt+0x180d0>
   2a5f8:	mov	r1, r0
   2a5fc:	cmp	r3, #92	; 0x5c
   2a600:	movne	r3, #0
   2a604:	moveq	r3, #1
   2a608:	add	r2, r7, r3
   2a60c:	ldrb	r3, [r7, r3]
   2a610:	strb	r3, [r1], #1
   2a614:	add	r7, r2, #1
   2a618:	ldrb	r3, [r2, #1]
   2a61c:	cmp	r3, #34	; 0x22
   2a620:	bne	2a5fc <__assert_fail@plt+0x18038>
   2a624:	mov	r3, #0
   2a628:	strb	r3, [r1]
   2a62c:	bl	41120 <__assert_fail@plt+0x2eb5c>
   2a630:	subs	r4, r0, #0
   2a634:	beq	2a68c <__assert_fail@plt+0x180c8>
   2a638:	add	r7, r7, #1
   2a63c:	mov	r6, r7
   2a640:	ldrb	r3, [r7], #1
   2a644:	cmp	r3, #9
   2a648:	bcc	2a65c <__assert_fail@plt+0x18098>
   2a64c:	cmp	r3, #13
   2a650:	bls	2a63c <__assert_fail@plt+0x18078>
   2a654:	cmp	r3, #32
   2a658:	beq	2a63c <__assert_fail@plt+0x18078>
   2a65c:	add	r2, sp, #316	; 0x13c
   2a660:	mov	r1, sl
   2a664:	mov	r0, r4
   2a668:	bl	41484 <__assert_fail@plt+0x2eec0>
   2a66c:	cmp	r0, #0
   2a670:	moveq	r8, #0
   2a674:	bne	2b06c <__assert_fail@plt+0x18aa8>
   2a678:	b	2a760 <__assert_fail@plt+0x1819c>
   2a67c:	bl	32148 <__assert_fail@plt+0x1fb84>
   2a680:	subs	r5, r0, #0
   2a684:	movne	r0, r5
   2a688:	bne	2a5ec <__assert_fail@plt+0x18028>
   2a68c:	mov	r8, #0
   2a690:	b	2a774 <__assert_fail@plt+0x181b0>
   2a694:	mov	r1, r0
   2a698:	b	2a624 <__assert_fail@plt+0x18060>
   2a69c:	cmp	r6, r7
   2a6a0:	beq	2a704 <__assert_fail@plt+0x18140>
   2a6a4:	adds	r3, r8, r6
   2a6a8:	str	r3, [sp, #40]	; 0x28
   2a6ac:	add	r6, r6, #7733248	; 0x760000
   2a6b0:	add	r6, r6, #42752	; 0xa700
   2a6b4:	bvs	2a704 <__assert_fail@plt+0x18140>
   2a6b8:	add	r2, sp, #44	; 0x2c
   2a6bc:	add	r1, sp, #40	; 0x28
   2a6c0:	mov	r0, r4
   2a6c4:	bl	41484 <__assert_fail@plt+0x2eec0>
   2a6c8:	cmp	r0, #0
   2a6cc:	beq	2a69c <__assert_fail@plt+0x180d8>
   2a6d0:	ldr	r3, [sp, #84]	; 0x54
   2a6d4:	cmp	r3, #0
   2a6d8:	beq	2a69c <__assert_fail@plt+0x180d8>
   2a6dc:	ldr	r2, [sp, #76]	; 0x4c
   2a6e0:	ldr	r1, [sp, #284]	; 0x11c
   2a6e4:	cmp	r2, r1
   2a6e8:	beq	2a69c <__assert_fail@plt+0x180d8>
   2a6ec:	str	r3, [sp, #288]	; 0x120
   2a6f0:	movw	r3, #269	; 0x10d
   2a6f4:	str	r3, [sp, #292]	; 0x124
   2a6f8:	str	r2, [sp, #296]	; 0x128
   2a6fc:	mov	r3, #0
   2a700:	str	r3, [sp, #300]	; 0x12c
   2a704:	ldr	r0, [sp, #276]	; 0x114
   2a708:	cmp	r0, #0
   2a70c:	beq	2a738 <__assert_fail@plt+0x18174>
   2a710:	ldr	r1, [sp, #288]	; 0x120
   2a714:	cmp	r1, #0
   2a718:	beq	2a738 <__assert_fail@plt+0x18174>
   2a71c:	bl	11f1c <strcmp@plt>
   2a720:	cmp	r0, #0
   2a724:	bne	2a738 <__assert_fail@plt+0x18174>
   2a728:	mvn	r3, #0
   2a72c:	str	r3, [sp, #284]	; 0x11c
   2a730:	mov	r3, #0
   2a734:	str	r3, [sp, #288]	; 0x120
   2a738:	add	r0, sp, #88	; 0x58
   2a73c:	bl	27e70 <__assert_fail@plt+0x158ac>
   2a740:	cmp	r0, #0
   2a744:	movne	r8, #0
   2a748:	bne	2a760 <__assert_fail@plt+0x1819c>
   2a74c:	ldrb	r8, [sp, #240]	; 0xf0
   2a750:	cmp	r8, #0
   2a754:	beq	2a79c <__assert_fail@plt+0x181d8>
   2a758:	ldrd	r2, [sp, #176]	; 0xb0
   2a75c:	strd	r2, [r9]
   2a760:	ldr	r3, [sp, #656]	; 0x290
   2a764:	cmp	r4, r3
   2a768:	beq	2a774 <__assert_fail@plt+0x181b0>
   2a76c:	mov	r0, r4
   2a770:	bl	41300 <__assert_fail@plt+0x2ed3c>
   2a774:	mov	r0, r5
   2a778:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2a77c:	mov	r0, r8
   2a780:	add	sp, sp, #620	; 0x26c
   2a784:	ldrd	r4, [sp]
   2a788:	ldrd	r6, [sp, #8]
   2a78c:	ldrd	r8, [sp, #16]
   2a790:	ldrd	sl, [sp, #24]
   2a794:	add	sp, sp, #32
   2a798:	pop	{pc}		; (ldr pc, [sp], #4)
   2a79c:	ldr	ip, [sp, #260]	; 0x104
   2a7a0:	ldr	lr, [sp, #244]	; 0xf4
   2a7a4:	orr	lr, ip, lr
   2a7a8:	ldr	r3, [sp, #248]	; 0xf8
   2a7ac:	orr	lr, lr, r3
   2a7b0:	ldr	r6, [sp, #252]	; 0xfc
   2a7b4:	ldr	r3, [sp, #264]	; 0x108
   2a7b8:	add	r3, r6, r3
   2a7bc:	ldr	r2, [sp, #256]	; 0x100
   2a7c0:	orr	r3, r3, r2
   2a7c4:	orr	r3, r3, lr
   2a7c8:	cmp	r3, #1
   2a7cc:	bgt	2a760 <__assert_fail@plt+0x1819c>
   2a7d0:	ldrd	sl, [sp, #128]	; 0x80
   2a7d4:	ldr	r3, [sp, #136]	; 0x88
   2a7d8:	cmp	sl, #0
   2a7dc:	sbcs	r2, fp, #0
   2a7e0:	blt	2a928 <__assert_fail@plt+0x18364>
   2a7e4:	cmp	r3, #2
   2a7e8:	beq	2a908 <__assert_fail@plt+0x18344>
   2a7ec:	mov	r1, #0
   2a7f0:	movw	r3, #63636	; 0xf894
   2a7f4:	movt	r3, #65535	; 0xffff
   2a7f8:	adds	r3, sl, r3
   2a7fc:	str	r3, [sp]
   2a800:	sbc	r3, fp, #0
   2a804:	str	r3, [sp, #4]
   2a808:	movw	r2, #1900	; 0x76c
   2a80c:	mov	r3, #0
   2a810:	cmp	fp, r3
   2a814:	cmpeq	sl, r2
   2a818:	bcs	2a960 <__assert_fail@plt+0x1839c>
   2a81c:	ldrd	r2, [sp]
   2a820:	cmp	r2, #0
   2a824:	sbcs	r3, r3, #0
   2a828:	bge	2a970 <__assert_fail@plt+0x183ac>
   2a82c:	ldrd	sl, [sp]
   2a830:	asr	r3, sl, #31
   2a834:	cmp	fp, r3
   2a838:	cmpeq	sl, sl
   2a83c:	movne	r1, #1
   2a840:	str	sl, [sp]
   2a844:	and	r1, r1, #1
   2a848:	ldr	r3, [sp]
   2a84c:	str	r3, [sp, #592]	; 0x250
   2a850:	cmp	r1, #0
   2a854:	bne	2a760 <__assert_fail@plt+0x1819c>
   2a858:	ldrd	r0, [sp, #144]	; 0x90
   2a85c:	mvn	r2, #0
   2a860:	mvn	r3, #0
   2a864:	adds	sl, r0, r2
   2a868:	adcs	fp, r1, r3
   2a86c:	movvs	r1, #1
   2a870:	movvc	r1, #0
   2a874:	asr	r3, sl, #31
   2a878:	cmp	fp, r3
   2a87c:	cmpeq	sl, sl
   2a880:	str	sl, [sp, #588]	; 0x24c
   2a884:	moveq	r3, r1
   2a888:	movne	r3, #1
   2a88c:	cmp	r3, #0
   2a890:	bne	2a760 <__assert_fail@plt+0x1819c>
   2a894:	ldrd	r0, [sp, #152]	; 0x98
   2a898:	strd	r0, [sp, #8]
   2a89c:	asr	r3, r0, #31
   2a8a0:	str	r0, [sp, #584]	; 0x248
   2a8a4:	cmp	r1, r3
   2a8a8:	cmpeq	r0, r0
   2a8ac:	bne	2a760 <__assert_fail@plt+0x1819c>
   2a8b0:	cmp	ip, #0
   2a8b4:	bne	2a8cc <__assert_fail@plt+0x18308>
   2a8b8:	ldrb	r3, [sp, #241]	; 0xf1
   2a8bc:	cmp	r3, #0
   2a8c0:	beq	2a9f4 <__assert_fail@plt+0x18430>
   2a8c4:	cmp	lr, #0
   2a8c8:	bne	2a9f4 <__assert_fail@plt+0x18430>
   2a8cc:	ldrd	r2, [sp, #160]	; 0xa0
   2a8d0:	ldr	r1, [sp, #116]	; 0x74
   2a8d4:	cmp	r1, #0
   2a8d8:	beq	2a978 <__assert_fail@plt+0x183b4>
   2a8dc:	cmp	r1, #1
   2a8e0:	beq	2a9b4 <__assert_fail@plt+0x183f0>
   2a8e4:	cmp	r3, #0
   2a8e8:	cmpeq	r2, #23
   2a8ec:	bhi	2a9e8 <__assert_fail@plt+0x18424>
   2a8f0:	str	r2, [sp, #580]	; 0x244
   2a8f4:	ldr	r3, [sp, #168]	; 0xa8
   2a8f8:	str	r3, [sp, #576]	; 0x240
   2a8fc:	ldr	r3, [sp, #176]	; 0xb0
   2a900:	str	r3, [sp, #572]	; 0x23c
   2a904:	b	2aa08 <__assert_fail@plt+0x18444>
   2a908:	cmp	sl, #69	; 0x45
   2a90c:	sbcs	r3, fp, #0
   2a910:	movwge	r3, #1900	; 0x76c
   2a914:	movlt	r3, #2000	; 0x7d0
   2a918:	mov	r2, #0
   2a91c:	adds	sl, sl, r3
   2a920:	adc	fp, fp, r2
   2a924:	b	2a7ec <__assert_fail@plt+0x18228>
   2a928:	mov	r7, #0
   2a92c:	movw	r0, #63636	; 0xf894
   2a930:	movt	r0, #65535	; 0xffff
   2a934:	mvn	r1, #0
   2a938:	subs	r2, r0, sl
   2a93c:	sbcs	r3, r1, fp
   2a940:	movvs	r7, #1
   2a944:	asr	r1, r2, #31
   2a948:	cmp	r3, r1
   2a94c:	cmpeq	r2, r2
   2a950:	movne	r7, #1
   2a954:	str	r2, [sp]
   2a958:	and	r1, r7, #1
   2a95c:	b	2a848 <__assert_fail@plt+0x18284>
   2a960:	ldrd	r2, [sp]
   2a964:	cmp	r2, #0
   2a968:	sbcs	r3, r3, #0
   2a96c:	bge	2a82c <__assert_fail@plt+0x18268>
   2a970:	mov	r1, #1
   2a974:	b	2a82c <__assert_fail@plt+0x18268>
   2a978:	subs	r1, r2, #1
   2a97c:	str	r1, [sp, #16]
   2a980:	sbc	r1, r3, #0
   2a984:	str	r1, [sp, #20]
   2a988:	ldrd	r0, [sp, #16]
   2a98c:	cmp	r1, #0
   2a990:	cmpeq	r0, #10
   2a994:	bls	2a8f0 <__assert_fail@plt+0x1832c>
   2a998:	cmp	r3, #0
   2a99c:	cmpeq	r2, #12
   2a9a0:	mvnne	r3, #0
   2a9a4:	moveq	r3, #0
   2a9a8:	str	r3, [sp, #580]	; 0x244
   2a9ac:	bne	2a760 <__assert_fail@plt+0x1819c>
   2a9b0:	b	2a8f4 <__assert_fail@plt+0x18330>
   2a9b4:	subs	r1, r2, #1
   2a9b8:	str	r1, [sp, #24]
   2a9bc:	sbc	r1, r3, #0
   2a9c0:	str	r1, [sp, #28]
   2a9c4:	ldrd	r0, [sp, #24]
   2a9c8:	cmp	r1, #0
   2a9cc:	cmpeq	r0, #10
   2a9d0:	addls	r2, r2, #12
   2a9d4:	bls	2a8f0 <__assert_fail@plt+0x1832c>
   2a9d8:	cmp	r3, #0
   2a9dc:	cmpeq	r2, #12
   2a9e0:	moveq	r2, #12
   2a9e4:	beq	2a8f0 <__assert_fail@plt+0x1832c>
   2a9e8:	mvn	r3, #0
   2a9ec:	str	r3, [sp, #580]	; 0x244
   2a9f0:	b	2a760 <__assert_fail@plt+0x1819c>
   2a9f4:	mov	r3, #0
   2a9f8:	str	r3, [sp, #572]	; 0x23c
   2a9fc:	str	r3, [sp, #576]	; 0x240
   2aa00:	str	r3, [sp, #580]	; 0x244
   2aa04:	str	r3, [sp, #180]	; 0xb4
   2aa08:	cmp	lr, #0
   2aa0c:	mvnne	r3, #0
   2aa10:	strne	r3, [sp, #604]	; 0x25c
   2aa14:	cmp	r6, #0
   2aa18:	ldrne	r3, [sp, #108]	; 0x6c
   2aa1c:	strne	r3, [sp, #604]	; 0x25c
   2aa20:	ldr	r3, [sp, #572]	; 0x23c
   2aa24:	str	r3, [sp, #16]
   2aa28:	str	r3, [sp, #528]	; 0x210
   2aa2c:	ldr	r3, [sp, #576]	; 0x240
   2aa30:	str	r3, [sp, #24]
   2aa34:	str	r3, [sp, #532]	; 0x214
   2aa38:	ldr	r3, [sp, #580]	; 0x244
   2aa3c:	str	r3, [sp, #32]
   2aa40:	str	r3, [sp, #536]	; 0x218
   2aa44:	ldr	r3, [sp, #8]
   2aa48:	str	r3, [sp, #540]	; 0x21c
   2aa4c:	str	sl, [sp, #544]	; 0x220
   2aa50:	ldr	r3, [sp]
   2aa54:	str	r3, [sp, #548]	; 0x224
   2aa58:	ldr	r3, [sp, #604]	; 0x25c
   2aa5c:	str	r3, [sp, #36]	; 0x24
   2aa60:	str	r3, [sp, #560]	; 0x230
   2aa64:	mvn	r3, #0
   2aa68:	str	r3, [sp, #596]	; 0x254
   2aa6c:	add	r1, sp, #572	; 0x23c
   2aa70:	mov	r0, r4
   2aa74:	bl	41530 <__assert_fail@plt+0x2ef6c>
   2aa78:	mov	r6, r0
   2aa7c:	add	r1, sp, #572	; 0x23c
   2aa80:	add	r0, sp, #528	; 0x210
   2aa84:	bl	27940 <__assert_fail@plt+0x1537c>
   2aa88:	cmp	r0, #0
   2aa8c:	bne	2ab34 <__assert_fail@plt+0x18570>
   2aa90:	ldr	r3, [sp, #264]	; 0x108
   2aa94:	cmp	r3, #0
   2aa98:	beq	2a760 <__assert_fail@plt+0x1819c>
   2aa9c:	mov	r3, #88	; 0x58
   2aaa0:	strb	r3, [sp, #46]	; 0x2e
   2aaa4:	strb	r3, [sp, #45]	; 0x2d
   2aaa8:	strb	r3, [sp, #44]	; 0x2c
   2aaac:	add	r1, sp, #47	; 0x2f
   2aab0:	ldr	r0, [sp, #112]	; 0x70
   2aab4:	bl	27bc8 <__assert_fail@plt+0x15604>
   2aab8:	add	r0, sp, #44	; 0x2c
   2aabc:	bl	41120 <__assert_fail@plt+0x2eb5c>
   2aac0:	subs	r7, r0, #0
   2aac4:	beq	2a760 <__assert_fail@plt+0x1819c>
   2aac8:	ldr	r3, [sp, #16]
   2aacc:	str	r3, [sp, #572]	; 0x23c
   2aad0:	ldr	r3, [sp, #24]
   2aad4:	str	r3, [sp, #576]	; 0x240
   2aad8:	ldr	r3, [sp, #32]
   2aadc:	str	r3, [sp, #580]	; 0x244
   2aae0:	ldr	r3, [sp, #8]
   2aae4:	str	r3, [sp, #584]	; 0x248
   2aae8:	str	sl, [sp, #588]	; 0x24c
   2aaec:	ldr	r3, [sp]
   2aaf0:	str	r3, [sp, #592]	; 0x250
   2aaf4:	ldr	r3, [sp, #36]	; 0x24
   2aaf8:	str	r3, [sp, #604]	; 0x25c
   2aafc:	mvn	r3, #0
   2ab00:	str	r3, [sp, #596]	; 0x254
   2ab04:	add	r1, sp, #572	; 0x23c
   2ab08:	mov	r0, r7
   2ab0c:	bl	41530 <__assert_fail@plt+0x2ef6c>
   2ab10:	mov	r6, r0
   2ab14:	add	r1, sp, #572	; 0x23c
   2ab18:	add	r0, sp, #528	; 0x210
   2ab1c:	bl	27940 <__assert_fail@plt+0x1537c>
   2ab20:	mov	sl, r0
   2ab24:	mov	r0, r7
   2ab28:	bl	41300 <__assert_fail@plt+0x2ed3c>
   2ab2c:	cmp	sl, #0
   2ab30:	beq	2a760 <__assert_fail@plt+0x1819c>
   2ab34:	ldr	r3, [sp, #248]	; 0xf8
   2ab38:	cmp	r3, #0
   2ab3c:	beq	2ac44 <__assert_fail@plt+0x18680>
   2ab40:	ldr	r1, [sp, #244]	; 0xf4
   2ab44:	cmp	r1, #0
   2ab48:	bne	2ac44 <__assert_fail@plt+0x18680>
   2ab4c:	ldrd	r2, [sp, #96]	; 0x60
   2ab50:	cmp	r2, #1
   2ab54:	sbcs	r0, r3, #0
   2ab58:	blt	2ab6c <__assert_fail@plt+0x185a8>
   2ab5c:	ldr	r1, [sp, #596]	; 0x254
   2ab60:	ldr	r0, [sp, #104]	; 0x68
   2ab64:	subs	r1, r1, r0
   2ab68:	movne	r1, #1
   2ab6c:	subs	r6, r2, r1
   2ab70:	sbc	r7, r3, r1, asr #31
   2ab74:	mov	r2, r6
   2ab78:	mov	r3, r7
   2ab7c:	strd	r2, [sp]
   2ab80:	mov	sl, #0
   2ab84:	cmp	r7, r6, asr #31
   2ab88:	bne	2aee0 <__assert_fail@plt+0x1891c>
   2ab8c:	mov	r0, #7
   2ab90:	smull	r0, r1, r6, r0
   2ab94:	mov	r3, r0
   2ab98:	mov	ip, r1
   2ab9c:	mov	r6, r3
   2aba0:	cmp	sl, #0
   2aba4:	bne	2a760 <__assert_fail@plt+0x1819c>
   2aba8:	ldr	r3, [sp, #104]	; 0x68
   2abac:	ldr	r2, [sp, #596]	; 0x254
   2abb0:	sub	r3, r3, r2
   2abb4:	add	r3, r3, #7
   2abb8:	movw	r2, #9363	; 0x2493
   2abbc:	movt	r2, #37449	; 0x9249
   2abc0:	smull	r1, r2, r2, r3
   2abc4:	add	r1, r2, r3
   2abc8:	asr	r2, r3, #31
   2abcc:	rsb	r2, r2, r1, asr #2
   2abd0:	rsb	r2, r2, r2, lsl #3
   2abd4:	sub	r3, r3, r2
   2abd8:	mov	r2, r3
   2abdc:	asr	r3, r3, #31
   2abe0:	adds	r0, r2, r6
   2abe4:	adcs	r1, r3, ip
   2abe8:	bvs	2a760 <__assert_fail@plt+0x1819c>
   2abec:	ldr	r2, [sp, #584]	; 0x248
   2abf0:	asr	r3, r2, #31
   2abf4:	adds	r6, r0, r2
   2abf8:	adcs	r7, r1, r3
   2abfc:	movvs	r1, #1
   2ac00:	movvc	r1, #0
   2ac04:	asr	r3, r6, #31
   2ac08:	cmp	r7, r3
   2ac0c:	cmpeq	r6, r6
   2ac10:	str	r6, [sp, #584]	; 0x248
   2ac14:	moveq	r3, r1
   2ac18:	movne	r3, #1
   2ac1c:	cmp	r3, #0
   2ac20:	bne	2a760 <__assert_fail@plt+0x1819c>
   2ac24:	mvn	r3, #0
   2ac28:	str	r3, [sp, #604]	; 0x25c
   2ac2c:	add	r1, sp, #572	; 0x23c
   2ac30:	mov	r0, r4
   2ac34:	bl	41530 <__assert_fail@plt+0x2ef6c>
   2ac38:	mov	r6, r0
   2ac3c:	cmn	r0, #1
   2ac40:	beq	2a760 <__assert_fail@plt+0x1819c>
   2ac44:	ldrd	r2, [sp, #184]	; 0xb8
   2ac48:	ldrd	sl, [sp, #192]	; 0xc0
   2ac4c:	ldrd	r0, [sp, #200]	; 0xc8
   2ac50:	strd	r0, [sp]
   2ac54:	orr	lr, r2, sl
   2ac58:	orr	ip, r3, fp
   2ac5c:	ldr	r7, [sp]
   2ac60:	orr	r0, lr, r7
   2ac64:	ldr	lr, [sp, #4]
   2ac68:	orr	r1, ip, lr
   2ac6c:	orrs	r1, r0, r1
   2ac70:	beq	2ad60 <__assert_fail@plt+0x1879c>
   2ac74:	ldr	r0, [sp, #592]	; 0x250
   2ac78:	asr	r1, r0, #31
   2ac7c:	adds	r6, r0, r2
   2ac80:	adcs	r7, r1, r3
   2ac84:	movvs	r1, #1
   2ac88:	movvc	r1, #0
   2ac8c:	asr	r3, r6, #31
   2ac90:	cmp	r7, r3
   2ac94:	cmpeq	r6, r6
   2ac98:	moveq	r3, r1
   2ac9c:	movne	r3, #1
   2aca0:	cmp	r3, #0
   2aca4:	bne	2a760 <__assert_fail@plt+0x1819c>
   2aca8:	ldr	r2, [sp, #588]	; 0x24c
   2acac:	asr	r3, r2, #31
   2acb0:	adds	r0, r2, sl
   2acb4:	adcs	r1, r3, fp
   2acb8:	movvs	ip, #1
   2acbc:	movvc	ip, #0
   2acc0:	asr	r3, r0, #31
   2acc4:	strd	r0, [sp, #8]
   2acc8:	cmp	r1, r3
   2accc:	cmpeq	r0, r0
   2acd0:	moveq	r3, ip
   2acd4:	movne	r3, #1
   2acd8:	cmp	r3, #0
   2acdc:	bne	2a760 <__assert_fail@plt+0x1819c>
   2ace0:	ldr	r2, [sp, #584]	; 0x248
   2ace4:	asr	r3, r2, #31
   2ace8:	ldrd	r0, [sp]
   2acec:	adds	sl, r2, r0
   2acf0:	adcs	fp, r3, r1
   2acf4:	movvs	ip, #1
   2acf8:	movvc	ip, #0
   2acfc:	asr	r3, sl, #31
   2ad00:	cmp	fp, r3
   2ad04:	cmpeq	sl, sl
   2ad08:	moveq	r3, ip
   2ad0c:	movne	r3, #1
   2ad10:	cmp	r3, #0
   2ad14:	bne	2a760 <__assert_fail@plt+0x1819c>
   2ad18:	str	r6, [sp, #592]	; 0x250
   2ad1c:	ldr	r3, [sp, #8]
   2ad20:	str	r3, [sp, #588]	; 0x24c
   2ad24:	str	sl, [sp, #584]	; 0x248
   2ad28:	ldr	r3, [sp, #32]
   2ad2c:	str	r3, [sp, #580]	; 0x244
   2ad30:	ldr	r3, [sp, #24]
   2ad34:	str	r3, [sp, #576]	; 0x240
   2ad38:	ldr	r3, [sp, #16]
   2ad3c:	str	r3, [sp, #572]	; 0x23c
   2ad40:	ldr	r3, [sp, #36]	; 0x24
   2ad44:	str	r3, [sp, #604]	; 0x25c
   2ad48:	add	r1, sp, #572	; 0x23c
   2ad4c:	mov	r0, r4
   2ad50:	bl	41530 <__assert_fail@plt+0x2ef6c>
   2ad54:	mov	r6, r0
   2ad58:	cmn	r0, #1
   2ad5c:	beq	2a760 <__assert_fail@plt+0x1819c>
   2ad60:	ldr	r3, [sp, #264]	; 0x108
   2ad64:	cmp	r3, #0
   2ad68:	beq	2ad9c <__assert_fail@plt+0x187d8>
   2ad6c:	ldr	r2, [sp, #608]	; 0x260
   2ad70:	asr	fp, r2, #31
   2ad74:	ldr	r1, [sp, #112]	; 0x70
   2ad78:	subs	r2, r1, r2
   2ad7c:	rsc	r3, fp, r1, asr #31
   2ad80:	subs	sl, r6, r2
   2ad84:	rsc	fp, r3, r6, asr #31
   2ad88:	asr	r1, sl, #31
   2ad8c:	cmp	fp, r1
   2ad90:	cmpeq	sl, sl
   2ad94:	bne	2a760 <__assert_fail@plt+0x1819c>
   2ad98:	mov	r6, sl
   2ad9c:	mov	ip, #0
   2ada0:	ldr	lr, [sp, #212]	; 0xd4
   2ada4:	ldr	r3, [sp, #208]	; 0xd0
   2ada8:	cmp	lr, r3, asr #31
   2adac:	bne	2af44 <__assert_fail@plt+0x18980>
   2adb0:	mov	r0, r3
   2adb4:	mov	r3, #3600	; 0xe10
   2adb8:	smull	r0, r1, r0, r3
   2adbc:	mov	r3, r0
   2adc0:	mov	r2, r1
   2adc4:	mov	r0, r3
   2adc8:	mov	r1, r2
   2adcc:	cmp	ip, #0
   2add0:	bne	2a760 <__assert_fail@plt+0x1819c>
   2add4:	asr	r3, r6, #31
   2add8:	adds	r6, r6, r0
   2addc:	adcs	r7, r3, r1
   2ade0:	bvs	2a760 <__assert_fail@plt+0x1819c>
   2ade4:	ldr	lr, [sp, #220]	; 0xdc
   2ade8:	ldr	r3, [sp, #216]	; 0xd8
   2adec:	cmp	lr, r3, asr #31
   2adf0:	bne	2afd0 <__assert_fail@plt+0x18a0c>
   2adf4:	mov	r0, r3
   2adf8:	mov	r3, #60	; 0x3c
   2adfc:	smull	r0, r1, r0, r3
   2ae00:	mov	r3, r0
   2ae04:	mov	r2, r1
   2ae08:	mov	r1, r2
   2ae0c:	cmp	ip, #0
   2ae10:	bne	2a760 <__assert_fail@plt+0x1819c>
   2ae14:	adds	r2, r6, r3
   2ae18:	adcs	r3, r7, r1
   2ae1c:	bvs	2a760 <__assert_fail@plt+0x1819c>
   2ae20:	ldrd	r0, [sp, #224]	; 0xe0
   2ae24:	adds	r6, r2, r0
   2ae28:	adcs	r7, r3, r1
   2ae2c:	strd	r6, [sp, #8]
   2ae30:	bvs	2a760 <__assert_fail@plt+0x1819c>
   2ae34:	ldr	r2, [sp, #180]	; 0xb4
   2ae38:	asr	r3, r2, #31
   2ae3c:	ldr	r1, [sp, #232]	; 0xe8
   2ae40:	adds	sl, r2, r1
   2ae44:	adc	fp, r3, r1, asr #31
   2ae48:	mov	r0, sl
   2ae4c:	mov	r1, fp
   2ae50:	add	r3, pc, #864	; 0x360
   2ae54:	ldrd	r2, [r3]
   2ae58:	strd	r0, [sp]
   2ae5c:	bl	4431c <__assert_fail@plt+0x31d58>
   2ae60:	mov	r6, #51712	; 0xca00
   2ae64:	movt	r6, #15258	; 0x3b9a
   2ae68:	mov	r7, #0
   2ae6c:	adds	r0, r2, r6
   2ae70:	adc	r1, r3, r7
   2ae74:	mov	r2, r6
   2ae78:	mov	r3, r7
   2ae7c:	bl	4431c <__assert_fail@plt+0x31d58>
   2ae80:	mov	sl, r2
   2ae84:	mov	r2, r6
   2ae88:	mov	r3, r7
   2ae8c:	ldrd	r0, [sp]
   2ae90:	subs	r0, r0, sl
   2ae94:	sbc	r1, r1, sl, asr #31
   2ae98:	bl	4431c <__assert_fail@plt+0x31d58>
   2ae9c:	asr	r1, r0, #31
   2aea0:	ldrd	r6, [sp, #8]
   2aea4:	adds	r2, r6, r0
   2aea8:	adcs	r3, r7, r1
   2aeac:	movvs	ip, #1
   2aeb0:	movvc	ip, #0
   2aeb4:	asr	r1, r2, #31
   2aeb8:	cmp	r3, r1
   2aebc:	cmpeq	r2, r2
   2aec0:	moveq	r1, ip
   2aec4:	movne	r1, #1
   2aec8:	cmp	r1, #0
   2aecc:	bne	2a760 <__assert_fail@plt+0x1819c>
   2aed0:	str	r2, [r9]
   2aed4:	str	sl, [r9, #4]
   2aed8:	mov	r8, #1
   2aedc:	b	2a760 <__assert_fail@plt+0x1819c>
   2aee0:	mov	lr, #7
   2aee4:	ldrd	r6, [sp]
   2aee8:	umull	r2, r3, r6, lr
   2aeec:	umull	r0, r1, lr, r7
   2aef0:	cmp	r7, #0
   2aef4:	bge	2af04 <__assert_fail@plt+0x18940>
   2aef8:	mov	ip, #0
   2aefc:	subs	r0, r0, ip
   2af00:	sbc	r1, r1, lr
   2af04:	mov	lr, #0
   2af08:	adds	ip, r0, r3
   2af0c:	adc	lr, r1, lr
   2af10:	cmp	lr, ip, asr #31
   2af14:	bne	2af20 <__assert_fail@plt+0x1895c>
   2af18:	mov	r3, r2
   2af1c:	b	2ab9c <__assert_fail@plt+0x185d8>
   2af20:	ldrd	r2, [sp]
   2af24:	lsl	ip, r3, #3
   2af28:	lsl	r0, r2, #3
   2af2c:	orr	r1, ip, r2, lsr #29
   2af30:	subs	r0, r0, r2
   2af34:	sbc	ip, r1, r3
   2af38:	mov	r3, r0
   2af3c:	mov	sl, #1
   2af40:	b	2ab9c <__assert_fail@plt+0x185d8>
   2af44:	mov	r7, #3600	; 0xe10
   2af48:	ldr	r2, [sp, #208]	; 0xd0
   2af4c:	umull	r2, r3, r2, r7
   2af50:	umull	r0, r1, r7, lr
   2af54:	cmp	lr, #0
   2af58:	bge	2af68 <__assert_fail@plt+0x189a4>
   2af5c:	mov	lr, #0
   2af60:	subs	r0, r0, lr
   2af64:	sbc	r1, r1, r7
   2af68:	mov	r7, #0
   2af6c:	adds	lr, r0, r3
   2af70:	adc	r7, r1, r7
   2af74:	cmp	r7, lr, asr #31
   2af78:	bne	2af88 <__assert_fail@plt+0x189c4>
   2af7c:	mov	r3, r2
   2af80:	mov	r2, lr
   2af84:	b	2adc4 <__assert_fail@plt+0x18800>
   2af88:	ldr	r1, [sp, #208]	; 0xd0
   2af8c:	ldr	r0, [sp, #212]	; 0xd4
   2af90:	lsl	ip, r0, #3
   2af94:	lsl	r3, r1, #3
   2af98:	orr	r2, ip, r1, lsr #29
   2af9c:	subs	r3, r3, r1
   2afa0:	sbc	r2, r2, r0
   2afa4:	lsl	ip, r2, #5
   2afa8:	orr	ip, ip, r3, lsr #27
   2afac:	lsl	lr, r3, #5
   2afb0:	adds	r3, lr, r1
   2afb4:	adc	r1, ip, r0
   2afb8:	lsl	r2, r1, #4
   2afbc:	orr	r2, r2, r3, lsr #28
   2afc0:	lsl	r0, r3, #4
   2afc4:	mov	r3, r0
   2afc8:	mov	ip, #1
   2afcc:	b	2adc4 <__assert_fail@plt+0x18800>
   2afd0:	mov	sl, #60	; 0x3c
   2afd4:	ldr	r2, [sp, #216]	; 0xd8
   2afd8:	umull	r2, r3, r2, sl
   2afdc:	umull	r0, r1, sl, lr
   2afe0:	cmp	lr, #0
   2afe4:	bge	2aff4 <__assert_fail@plt+0x18a30>
   2afe8:	mov	lr, #0
   2afec:	subs	r0, r0, lr
   2aff0:	sbc	r1, r1, sl
   2aff4:	mov	sl, #0
   2aff8:	adds	lr, r0, r3
   2affc:	adc	sl, r1, sl
   2b000:	cmp	sl, lr, asr #31
   2b004:	bne	2b014 <__assert_fail@plt+0x18a50>
   2b008:	mov	r3, r2
   2b00c:	mov	r2, lr
   2b010:	b	2ae08 <__assert_fail@plt+0x18844>
   2b014:	ldr	r2, [sp, #216]	; 0xd8
   2b018:	ldr	r0, [sp, #220]	; 0xdc
   2b01c:	lsl	ip, r0, #4
   2b020:	lsl	r3, r2, #4
   2b024:	orr	r1, ip, r2, lsr #28
   2b028:	subs	r3, r3, r2
   2b02c:	sbc	r1, r1, r0
   2b030:	lsl	r2, r1, #2
   2b034:	orr	r2, r2, r3, lsr #30
   2b038:	lsl	r0, r3, #2
   2b03c:	mov	r3, r0
   2b040:	mov	ip, #1
   2b044:	b	2ae08 <__assert_fail@plt+0x18844>
   2b048:	add	r2, sp, #316	; 0x13c
   2b04c:	mov	r1, sl
   2b050:	ldr	r0, [sp, #656]	; 0x290
   2b054:	bl	41484 <__assert_fail@plt+0x2eec0>
   2b058:	subs	r5, r0, #0
   2b05c:	moveq	r8, #0
   2b060:	beq	2a774 <__assert_fail@plt+0x181b0>
   2b064:	ldr	r4, [sp, #656]	; 0x290
   2b068:	mov	r5, #0
   2b06c:	ldrb	r2, [r6]
   2b070:	movw	r3, #36300	; 0x8dcc
   2b074:	movt	r3, #4
   2b078:	cmp	r2, #0
   2b07c:	moveq	r6, r3
   2b080:	str	r6, [sp, #88]	; 0x58
   2b084:	ldr	r1, [sp, #336]	; 0x150
   2b088:	movw	r6, #1900	; 0x76c
   2b08c:	mov	r7, #0
   2b090:	adds	r2, r6, r1
   2b094:	adc	r3, r7, r1, asr #31
   2b098:	strd	r2, [sp, #128]	; 0x80
   2b09c:	mov	r1, #0
   2b0a0:	str	r1, [sp, #136]	; 0x88
   2b0a4:	ldr	r2, [sp, #332]	; 0x14c
   2b0a8:	add	r2, r2, #1
   2b0ac:	asr	r3, r2, #31
   2b0b0:	strd	r2, [sp, #144]	; 0x90
   2b0b4:	ldr	r2, [sp, #328]	; 0x148
   2b0b8:	asr	r3, r2, #31
   2b0bc:	strd	r2, [sp, #152]	; 0x98
   2b0c0:	ldr	r2, [sp, #324]	; 0x144
   2b0c4:	asr	r3, r2, #31
   2b0c8:	strd	r2, [sp, #160]	; 0xa0
   2b0cc:	ldr	r2, [sp, #320]	; 0x140
   2b0d0:	asr	r3, r2, #31
   2b0d4:	strd	r2, [sp, #168]	; 0xa8
   2b0d8:	ldr	r3, [sp, #316]	; 0x13c
   2b0dc:	str	r3, [sp, #176]	; 0xb0
   2b0e0:	str	fp, [sp, #180]	; 0xb4
   2b0e4:	ldr	ip, [sp, #348]	; 0x15c
   2b0e8:	str	ip, [sp, #604]	; 0x25c
   2b0ec:	mov	r3, #2
   2b0f0:	str	r3, [sp, #116]	; 0x74
   2b0f4:	add	r0, sp, #360	; 0x168
   2b0f8:	ldrd	r2, [r0]
   2b0fc:	strd	r2, [sp, #184]	; 0xb8
   2b100:	ldrd	r2, [r0, #8]
   2b104:	strd	r2, [sp, #192]	; 0xc0
   2b108:	ldrd	r2, [r0, #16]
   2b10c:	strd	r2, [sp, #200]	; 0xc8
   2b110:	ldrd	r2, [r0, #24]
   2b114:	strd	r2, [sp, #208]	; 0xd0
   2b118:	ldrd	r2, [r0, #32]
   2b11c:	strd	r2, [sp, #216]	; 0xd8
   2b120:	ldrd	r2, [r0, #40]	; 0x28
   2b124:	strd	r2, [sp, #224]	; 0xe0
   2b128:	ldrd	r2, [r0, #48]	; 0x30
   2b12c:	strd	r2, [sp, #232]	; 0xe8
   2b130:	strb	r1, [sp, #240]	; 0xf0
   2b134:	strb	r1, [sp, #241]	; 0xf1
   2b138:	str	r1, [sp, #244]	; 0xf4
   2b13c:	str	r1, [sp, #248]	; 0xf8
   2b140:	str	r1, [sp, #260]	; 0x104
   2b144:	str	r1, [sp, #252]	; 0xfc
   2b148:	str	r1, [sp, #256]	; 0x100
   2b14c:	str	r1, [sp, #264]	; 0x108
   2b150:	strb	r1, [sp, #268]	; 0x10c
   2b154:	strb	r1, [sp, #269]	; 0x10d
   2b158:	strb	r1, [sp, #270]	; 0x10e
   2b15c:	strb	r1, [sp, #272]	; 0x110
   2b160:	strb	r1, [sp, #271]	; 0x10f
   2b164:	strb	r1, [sp, #273]	; 0x111
   2b168:	strb	r1, [sp, #274]	; 0x112
   2b16c:	strb	r1, [sp, #275]	; 0x113
   2b170:	ldr	r3, [sp, #356]	; 0x164
   2b174:	str	r3, [sp, #276]	; 0x114
   2b178:	movw	r3, #269	; 0x10d
   2b17c:	str	r3, [sp, #280]	; 0x118
   2b180:	str	ip, [sp, #284]	; 0x11c
   2b184:	str	r1, [sp, #288]	; 0x120
   2b188:	mov	r3, #42752	; 0xa700
   2b18c:	movt	r3, #118	; 0x76
   2b190:	adds	r3, r8, r3
   2b194:	movvs	r1, #1
   2b198:	str	r3, [sp, #40]	; 0x28
   2b19c:	cmp	r1, #0
   2b1a0:	bne	2a704 <__assert_fail@plt+0x18140>
   2b1a4:	mov	r6, #19968	; 0x4e00
   2b1a8:	movt	r6, #237	; 0xed
   2b1ac:	mov	r7, #39936	; 0x9c00
   2b1b0:	movt	r7, #474	; 0x1da
   2b1b4:	b	2a6b8 <__assert_fail@plt+0x180f4>
   2b1b8:	blcc	fe6dd9c0 <stdout@@GLIBC_2.4+0xfe68246c>
   2b1bc:	andeq	r0, r0, r0
   2b1c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b1c4:	strd	r6, [sp, #8]
   2b1c8:	str	r8, [sp, #16]
   2b1cc:	str	lr, [sp, #20]
   2b1d0:	sub	sp, sp, #8
   2b1d4:	mov	r5, r0
   2b1d8:	mov	r6, r1
   2b1dc:	mov	r7, r2
   2b1e0:	movw	r0, #39484	; 0x9a3c
   2b1e4:	movt	r0, #4
   2b1e8:	bl	121f8 <getenv@plt>
   2b1ec:	mov	r8, r0
   2b1f0:	bl	41120 <__assert_fail@plt+0x2eb5c>
   2b1f4:	subs	r4, r0, #0
   2b1f8:	moveq	r5, #0
   2b1fc:	beq	2b228 <__assert_fail@plt+0x18c64>
   2b200:	str	r8, [sp, #4]
   2b204:	str	r4, [sp]
   2b208:	mov	r3, #0
   2b20c:	mov	r2, r7
   2b210:	mov	r1, r6
   2b214:	mov	r0, r5
   2b218:	bl	2a4f4 <__assert_fail@plt+0x17f30>
   2b21c:	mov	r5, r0
   2b220:	mov	r0, r4
   2b224:	bl	41300 <__assert_fail@plt+0x2ed3c>
   2b228:	mov	r0, r5
   2b22c:	add	sp, sp, #8
   2b230:	ldrd	r4, [sp]
   2b234:	ldrd	r6, [sp, #8]
   2b238:	ldr	r8, [sp, #16]
   2b23c:	add	sp, sp, #20
   2b240:	pop	{pc}		; (ldr pc, [sp], #4)
   2b244:	strd	r4, [sp, #-16]!
   2b248:	str	r6, [sp, #8]
   2b24c:	str	lr, [sp, #12]
   2b250:	subs	r4, r0, #0
   2b254:	beq	2b2f0 <__assert_fail@plt+0x18d2c>
   2b258:	mov	r1, #47	; 0x2f
   2b25c:	mov	r0, r4
   2b260:	bl	12438 <strrchr@plt>
   2b264:	subs	r5, r0, #0
   2b268:	beq	2b2c8 <__assert_fail@plt+0x18d04>
   2b26c:	add	r6, r5, #1
   2b270:	sub	r3, r6, r4
   2b274:	cmp	r3, #6
   2b278:	ble	2b2c8 <__assert_fail@plt+0x18d04>
   2b27c:	mov	r2, #7
   2b280:	movw	r1, #40272	; 0x9d50
   2b284:	movt	r1, #4
   2b288:	sub	r0, r5, #6
   2b28c:	bl	12564 <strncmp@plt>
   2b290:	cmp	r0, #0
   2b294:	bne	2b2c8 <__assert_fail@plt+0x18d04>
   2b298:	mov	r2, #3
   2b29c:	movw	r1, #40280	; 0x9d58
   2b2a0:	movt	r1, #4
   2b2a4:	mov	r0, r6
   2b2a8:	bl	12564 <strncmp@plt>
   2b2ac:	cmp	r0, #0
   2b2b0:	movne	r4, r6
   2b2b4:	bne	2b2c8 <__assert_fail@plt+0x18d04>
   2b2b8:	add	r4, r5, #4
   2b2bc:	movw	r3, #46392	; 0xb538
   2b2c0:	movt	r3, #5
   2b2c4:	str	r4, [r3]
   2b2c8:	movw	r3, #48388	; 0xbd04
   2b2cc:	movt	r3, #5
   2b2d0:	str	r4, [r3]
   2b2d4:	movw	r3, #46400	; 0xb540
   2b2d8:	movt	r3, #5
   2b2dc:	str	r4, [r3]
   2b2e0:	ldrd	r4, [sp]
   2b2e4:	ldr	r6, [sp, #8]
   2b2e8:	add	sp, sp, #12
   2b2ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2b2f0:	movw	r3, #46408	; 0xb548
   2b2f4:	movt	r3, #5
   2b2f8:	ldr	r3, [r3]
   2b2fc:	mov	r2, #55	; 0x37
   2b300:	mov	r1, #1
   2b304:	movw	r0, #40216	; 0x9d18
   2b308:	movt	r0, #4
   2b30c:	bl	12138 <fwrite@plt>
   2b310:	bl	12570 <abort@plt>
   2b314:	mov	r2, #0
   2b318:	mov	r3, #0
   2b31c:	strd	r2, [r0]
   2b320:	strd	r2, [r0, #8]
   2b324:	strd	r2, [r0, #16]
   2b328:	strd	r2, [r0, #24]
   2b32c:	strd	r2, [r0, #32]
   2b330:	strd	r2, [r0, #40]	; 0x28
   2b334:	cmp	r1, #10
   2b338:	beq	2b344 <__assert_fail@plt+0x18d80>
   2b33c:	str	r1, [r0]
   2b340:	bx	lr
   2b344:	str	r4, [sp, #-8]!
   2b348:	str	lr, [sp, #4]
   2b34c:	bl	12570 <abort@plt>
   2b350:	strd	r4, [sp, #-16]!
   2b354:	str	r6, [sp, #8]
   2b358:	str	lr, [sp, #12]
   2b35c:	mov	r5, r0
   2b360:	mov	r6, r1
   2b364:	mov	r2, #5
   2b368:	mov	r1, r0
   2b36c:	mov	r0, #0
   2b370:	bl	12084 <dcgettext@plt>
   2b374:	mov	r4, r0
   2b378:	cmp	r5, r0
   2b37c:	beq	2b394 <__assert_fail@plt+0x18dd0>
   2b380:	mov	r0, r4
   2b384:	ldrd	r4, [sp]
   2b388:	ldr	r6, [sp, #8]
   2b38c:	add	sp, sp, #12
   2b390:	pop	{pc}		; (ldr pc, [sp], #4)
   2b394:	bl	41fdc <__assert_fail@plt+0x2fa18>
   2b398:	ldrb	r3, [r0]
   2b39c:	bic	r3, r3, #32
   2b3a0:	cmp	r3, #85	; 0x55
   2b3a4:	bne	2b428 <__assert_fail@plt+0x18e64>
   2b3a8:	ldrb	r3, [r0, #1]
   2b3ac:	bic	r3, r3, #32
   2b3b0:	cmp	r3, #84	; 0x54
   2b3b4:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b3b8:	ldrb	r3, [r0, #2]
   2b3bc:	bic	r3, r3, #32
   2b3c0:	cmp	r3, #70	; 0x46
   2b3c4:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b3c8:	ldrb	r3, [r0, #3]
   2b3cc:	cmp	r3, #45	; 0x2d
   2b3d0:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b3d4:	ldrb	r3, [r0, #4]
   2b3d8:	cmp	r3, #56	; 0x38
   2b3dc:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b3e0:	ldrb	r3, [r0, #5]
   2b3e4:	cmp	r3, #0
   2b3e8:	beq	2b408 <__assert_fail@plt+0x18e44>
   2b3ec:	movw	r4, #40368	; 0x9db0
   2b3f0:	movt	r4, #4
   2b3f4:	movw	r3, #21280	; 0x5320
   2b3f8:	movt	r3, #4
   2b3fc:	cmp	r6, #9
   2b400:	movne	r4, r3
   2b404:	b	2b380 <__assert_fail@plt+0x18dbc>
   2b408:	ldrb	r2, [r4]
   2b40c:	movw	r4, #40384	; 0x9dc0
   2b410:	movt	r4, #4
   2b414:	movw	r3, #40372	; 0x9db4
   2b418:	movt	r3, #4
   2b41c:	cmp	r2, #96	; 0x60
   2b420:	movne	r4, r3
   2b424:	b	2b380 <__assert_fail@plt+0x18dbc>
   2b428:	cmp	r3, #71	; 0x47
   2b42c:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b430:	ldrb	r3, [r0, #1]
   2b434:	bic	r3, r3, #32
   2b438:	cmp	r3, #66	; 0x42
   2b43c:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b440:	ldrb	r3, [r0, #2]
   2b444:	cmp	r3, #49	; 0x31
   2b448:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b44c:	ldrb	r3, [r0, #3]
   2b450:	cmp	r3, #56	; 0x38
   2b454:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b458:	ldrb	r3, [r0, #4]
   2b45c:	cmp	r3, #48	; 0x30
   2b460:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b464:	ldrb	r3, [r0, #5]
   2b468:	cmp	r3, #51	; 0x33
   2b46c:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b470:	ldrb	r3, [r0, #6]
   2b474:	cmp	r3, #48	; 0x30
   2b478:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b47c:	ldrb	r3, [r0, #7]
   2b480:	cmp	r3, #0
   2b484:	bne	2b3ec <__assert_fail@plt+0x18e28>
   2b488:	ldrb	r2, [r4]
   2b48c:	movw	r4, #40380	; 0x9dbc
   2b490:	movt	r4, #4
   2b494:	movw	r3, #40376	; 0x9db8
   2b498:	movt	r3, #4
   2b49c:	cmp	r2, #96	; 0x60
   2b4a0:	movne	r4, r3
   2b4a4:	b	2b380 <__assert_fail@plt+0x18dbc>
   2b4a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b4ac:	strd	r6, [sp, #8]
   2b4b0:	strd	r8, [sp, #16]
   2b4b4:	strd	sl, [sp, #24]
   2b4b8:	str	lr, [sp, #32]
   2b4bc:	sub	sp, sp, #116	; 0x74
   2b4c0:	str	r0, [sp, #64]	; 0x40
   2b4c4:	mov	r8, r1
   2b4c8:	str	r2, [sp, #48]	; 0x30
   2b4cc:	str	r3, [sp, #24]
   2b4d0:	ldr	r7, [sp, #152]	; 0x98
   2b4d4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   2b4d8:	str	r0, [sp, #76]	; 0x4c
   2b4dc:	ldr	r3, [sp, #156]	; 0x9c
   2b4e0:	ubfx	r3, r3, #1, #1
   2b4e4:	str	r3, [sp, #32]
   2b4e8:	mov	r3, #1
   2b4ec:	str	r3, [sp, #40]	; 0x28
   2b4f0:	mov	r3, #0
   2b4f4:	str	r3, [sp, #68]	; 0x44
   2b4f8:	str	r3, [sp, #36]	; 0x24
   2b4fc:	str	r3, [sp, #28]
   2b500:	str	r3, [sp, #52]	; 0x34
   2b504:	str	r3, [sp, #60]	; 0x3c
   2b508:	str	r3, [sp, #72]	; 0x48
   2b50c:	movw	r3, #40388	; 0x9dc4
   2b510:	movt	r3, #4
   2b514:	str	r3, [sp, #80]	; 0x50
   2b518:	mov	r9, r8
   2b51c:	mov	sl, r7
   2b520:	cmp	sl, #10
   2b524:	ldrls	pc, [pc, sl, lsl #2]
   2b528:	b	2b6ec <__assert_fail@plt+0x19128>
   2b52c:	andeq	fp, r2, ip, lsl #11
   2b530:	andeq	fp, r2, r0, ror #10
   2b534:	andeq	fp, r2, r4, asr #13
   2b538:	andeq	fp, r2, r8, asr r5
   2b53c:	andeq	fp, r2, r8, ror r6
   2b540:	muleq	r2, ip, r5
   2b544:	andeq	ip, r2, r8, ror #18
   2b548:	strdeq	fp, [r2], -r0
   2b54c:	ldrdeq	fp, [r2], -r8
   2b550:	ldrdeq	fp, [r2], -r8
   2b554:	ldrdeq	fp, [r2], -r8
   2b558:	mov	r3, #1
   2b55c:	str	r3, [sp, #28]
   2b560:	mov	r3, #1
   2b564:	str	r3, [sp, #32]
   2b568:	str	r3, [sp, #52]	; 0x34
   2b56c:	movw	r3, #21280	; 0x5320
   2b570:	movt	r3, #4
   2b574:	str	r3, [sp, #60]	; 0x3c
   2b578:	mov	fp, #0
   2b57c:	mov	sl, #2
   2b580:	mov	r6, #0
   2b584:	ldr	r8, [sp, #64]	; 0x40
   2b588:	b	2be00 <__assert_fail@plt+0x1983c>
   2b58c:	mov	fp, sl
   2b590:	mov	r3, #0
   2b594:	str	r3, [sp, #32]
   2b598:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b59c:	ldr	r3, [sp, #32]
   2b5a0:	cmp	r3, #0
   2b5a4:	bne	2b704 <__assert_fail@plt+0x19140>
   2b5a8:	cmp	r9, #0
   2b5ac:	beq	2b728 <__assert_fail@plt+0x19164>
   2b5b0:	mov	r3, #34	; 0x22
   2b5b4:	ldr	r2, [sp, #64]	; 0x40
   2b5b8:	strb	r3, [r2]
   2b5bc:	mov	fp, #1
   2b5c0:	str	fp, [sp, #28]
   2b5c4:	str	fp, [sp, #52]	; 0x34
   2b5c8:	movw	r3, #40368	; 0x9db0
   2b5cc:	movt	r3, #4
   2b5d0:	str	r3, [sp, #60]	; 0x3c
   2b5d4:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b5d8:	cmp	sl, #10
   2b5dc:	bne	2b610 <__assert_fail@plt+0x1904c>
   2b5e0:	ldr	r3, [sp, #32]
   2b5e4:	cmp	r3, #0
   2b5e8:	movne	fp, #0
   2b5ec:	beq	2b638 <__assert_fail@plt+0x19074>
   2b5f0:	ldr	r0, [sp, #168]	; 0xa8
   2b5f4:	bl	122d0 <strlen@plt>
   2b5f8:	str	r0, [sp, #52]	; 0x34
   2b5fc:	ldr	r3, [sp, #168]	; 0xa8
   2b600:	str	r3, [sp, #60]	; 0x3c
   2b604:	mov	r3, #1
   2b608:	str	r3, [sp, #28]
   2b60c:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b610:	mov	r1, sl
   2b614:	ldr	r0, [sp, #80]	; 0x50
   2b618:	bl	2b350 <__assert_fail@plt+0x18d8c>
   2b61c:	str	r0, [sp, #164]	; 0xa4
   2b620:	mov	r1, sl
   2b624:	movw	r0, #21280	; 0x5320
   2b628:	movt	r0, #4
   2b62c:	bl	2b350 <__assert_fail@plt+0x18d8c>
   2b630:	str	r0, [sp, #168]	; 0xa8
   2b634:	b	2b5e0 <__assert_fail@plt+0x1901c>
   2b638:	ldr	r3, [sp, #164]	; 0xa4
   2b63c:	ldrb	r3, [r3]
   2b640:	cmp	r3, #0
   2b644:	beq	2b670 <__assert_fail@plt+0x190ac>
   2b648:	ldr	r2, [sp, #164]	; 0xa4
   2b64c:	mov	fp, #0
   2b650:	ldr	r1, [sp, #64]	; 0x40
   2b654:	cmp	r9, fp
   2b658:	strbhi	r3, [r1, fp]
   2b65c:	add	fp, fp, #1
   2b660:	ldrb	r3, [r2, #1]!
   2b664:	cmp	r3, #0
   2b668:	bne	2b654 <__assert_fail@plt+0x19090>
   2b66c:	b	2b5f0 <__assert_fail@plt+0x1902c>
   2b670:	mov	fp, #0
   2b674:	b	2b5f0 <__assert_fail@plt+0x1902c>
   2b678:	ldr	r3, [sp, #32]
   2b67c:	cmp	r3, #0
   2b680:	bne	2b560 <__assert_fail@plt+0x18f9c>
   2b684:	mov	r3, #1
   2b688:	str	r3, [sp, #28]
   2b68c:	cmp	r9, #0
   2b690:	beq	2b744 <__assert_fail@plt+0x19180>
   2b694:	mov	r3, #39	; 0x27
   2b698:	ldr	r2, [sp, #64]	; 0x40
   2b69c:	strb	r3, [r2]
   2b6a0:	mov	r3, #0
   2b6a4:	str	r3, [sp, #32]
   2b6a8:	mov	fp, #1
   2b6ac:	str	fp, [sp, #52]	; 0x34
   2b6b0:	movw	r3, #21280	; 0x5320
   2b6b4:	movt	r3, #4
   2b6b8:	str	r3, [sp, #60]	; 0x3c
   2b6bc:	mov	sl, #2
   2b6c0:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b6c4:	ldr	r3, [sp, #32]
   2b6c8:	cmp	r3, #0
   2b6cc:	beq	2b68c <__assert_fail@plt+0x190c8>
   2b6d0:	mov	r3, #1
   2b6d4:	str	r3, [sp, #52]	; 0x34
   2b6d8:	movw	r3, #21280	; 0x5320
   2b6dc:	movt	r3, #4
   2b6e0:	str	r3, [sp, #60]	; 0x3c
   2b6e4:	mov	fp, #0
   2b6e8:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b6ec:	bl	12570 <abort@plt>
   2b6f0:	mov	fp, #0
   2b6f4:	str	fp, [sp, #32]
   2b6f8:	mov	r3, #1
   2b6fc:	str	r3, [sp, #28]
   2b700:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b704:	ldr	r3, [sp, #32]
   2b708:	str	r3, [sp, #28]
   2b70c:	mov	r3, #1
   2b710:	str	r3, [sp, #52]	; 0x34
   2b714:	movw	r3, #40368	; 0x9db0
   2b718:	movt	r3, #4
   2b71c:	str	r3, [sp, #60]	; 0x3c
   2b720:	mov	fp, #0
   2b724:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b728:	mov	fp, #1
   2b72c:	str	fp, [sp, #28]
   2b730:	str	fp, [sp, #52]	; 0x34
   2b734:	movw	r3, #40368	; 0x9db0
   2b738:	movt	r3, #4
   2b73c:	str	r3, [sp, #60]	; 0x3c
   2b740:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b744:	mov	r3, #0
   2b748:	str	r3, [sp, #32]
   2b74c:	mov	fp, #1
   2b750:	str	fp, [sp, #52]	; 0x34
   2b754:	movw	r3, #21280	; 0x5320
   2b758:	movt	r3, #4
   2b75c:	str	r3, [sp, #60]	; 0x3c
   2b760:	mov	sl, #2
   2b764:	b	2b580 <__assert_fail@plt+0x18fbc>
   2b768:	mov	r3, r2
   2b76c:	add	r4, r6, r2
   2b770:	ldr	r2, [sp, #24]
   2b774:	cmp	r3, #1
   2b778:	movls	r3, #0
   2b77c:	movhi	r3, #1
   2b780:	cmn	r2, #1
   2b784:	movne	r3, #0
   2b788:	cmp	r3, #0
   2b78c:	beq	2b79c <__assert_fail@plt+0x191d8>
   2b790:	ldr	r0, [sp, #48]	; 0x30
   2b794:	bl	122d0 <strlen@plt>
   2b798:	str	r0, [sp, #24]
   2b79c:	ldr	r3, [sp, #24]
   2b7a0:	cmp	r4, r3
   2b7a4:	bhi	2c990 <__assert_fail@plt+0x1a3cc>
   2b7a8:	ldr	r3, [sp, #48]	; 0x30
   2b7ac:	add	r4, r3, r6
   2b7b0:	ldr	r2, [sp, #52]	; 0x34
   2b7b4:	ldr	r1, [sp, #60]	; 0x3c
   2b7b8:	mov	r0, r4
   2b7bc:	bl	12060 <memcmp@plt>
   2b7c0:	cmp	r0, #0
   2b7c4:	bne	2c990 <__assert_fail@plt+0x1a3cc>
   2b7c8:	ldr	r3, [sp, #32]
   2b7cc:	cmp	r3, #0
   2b7d0:	bne	2b9e0 <__assert_fail@plt+0x1941c>
   2b7d4:	ldrb	r4, [r4]
   2b7d8:	cmp	r4, #126	; 0x7e
   2b7dc:	ldrls	pc, [pc, r4, lsl #2]
   2b7e0:	b	2c294 <__assert_fail@plt+0x19cd0>
   2b7e4:	andeq	fp, r2, r4, lsr #20
   2b7e8:	muleq	r2, r4, r2
   2b7ec:	muleq	r2, r4, r2
   2b7f0:	muleq	r2, r4, r2
   2b7f4:	muleq	r2, r4, r2
   2b7f8:	muleq	r2, r4, r2
   2b7fc:	muleq	r2, r4, r2
   2b800:	andeq	ip, r2, ip, lsr r1
   2b804:	andeq	fp, r2, r0, asr #25
   2b808:	andeq	ip, r2, r4, rrx
   2b80c:	andeq	ip, r2, r0, lsl r1
   2b810:	andeq	ip, r2, r8, ror r0
   2b814:	ldrdeq	fp, [r2], -r4
   2b818:	andeq	fp, r2, r8, ror #25
   2b81c:	muleq	r2, r4, r2
   2b820:	muleq	r2, r4, r2
   2b824:	muleq	r2, r4, r2
   2b828:	muleq	r2, r4, r2
   2b82c:	muleq	r2, r4, r2
   2b830:	muleq	r2, r4, r2
   2b834:	muleq	r2, r4, r2
   2b838:	muleq	r2, r4, r2
   2b83c:	muleq	r2, r4, r2
   2b840:	muleq	r2, r4, r2
   2b844:	muleq	r2, r4, r2
   2b848:	muleq	r2, r4, r2
   2b84c:	muleq	r2, r4, r2
   2b850:	muleq	r2, r4, r2
   2b854:	muleq	r2, r4, r2
   2b858:	muleq	r2, r4, r2
   2b85c:	muleq	r2, r4, r2
   2b860:	muleq	r2, r4, r2
   2b864:			; <UNDEFINED> instruction: 0x0002c1b0
   2b868:	ldrdeq	ip, [r2], -r4
   2b86c:	ldrdeq	ip, [r2], -r4
   2b870:	andeq	ip, r2, ip, ror #2
   2b874:	ldrdeq	ip, [r2], -r4
   2b878:	strdeq	ip, [r2], -r4
   2b87c:	ldrdeq	ip, [r2], -r4
   2b880:	strdeq	ip, [r2], -r4
   2b884:	ldrdeq	ip, [r2], -r4
   2b888:	ldrdeq	ip, [r2], -r4
   2b88c:	ldrdeq	ip, [r2], -r4
   2b890:	strdeq	ip, [r2], -r4
   2b894:	strdeq	ip, [r2], -r4
   2b898:	strdeq	ip, [r2], -r4
   2b89c:	strdeq	ip, [r2], -r4
   2b8a0:	strdeq	ip, [r2], -r4
   2b8a4:	strdeq	ip, [r2], -r4
   2b8a8:	strdeq	ip, [r2], -r4
   2b8ac:	strdeq	ip, [r2], -r4
   2b8b0:	strdeq	ip, [r2], -r4
   2b8b4:	strdeq	ip, [r2], -r4
   2b8b8:	strdeq	ip, [r2], -r4
   2b8bc:	strdeq	ip, [r2], -r4
   2b8c0:	strdeq	ip, [r2], -r4
   2b8c4:	strdeq	ip, [r2], -r4
   2b8c8:	strdeq	ip, [r2], -r4
   2b8cc:	strdeq	ip, [r2], -r4
   2b8d0:	ldrdeq	ip, [r2], -r4
   2b8d4:	ldrdeq	ip, [r2], -r4
   2b8d8:	ldrdeq	ip, [r2], -r4
   2b8dc:	ldrdeq	ip, [r2], -r4
   2b8e0:	andeq	fp, r2, r4, asr fp
   2b8e4:	muleq	r2, r4, r2
   2b8e8:	strdeq	ip, [r2], -r4
   2b8ec:	strdeq	ip, [r2], -r4
   2b8f0:	strdeq	ip, [r2], -r4
   2b8f4:	strdeq	ip, [r2], -r4
   2b8f8:	strdeq	ip, [r2], -r4
   2b8fc:	strdeq	ip, [r2], -r4
   2b900:	strdeq	ip, [r2], -r4
   2b904:	strdeq	ip, [r2], -r4
   2b908:	strdeq	ip, [r2], -r4
   2b90c:	strdeq	ip, [r2], -r4
   2b910:	strdeq	ip, [r2], -r4
   2b914:	strdeq	ip, [r2], -r4
   2b918:	strdeq	ip, [r2], -r4
   2b91c:	strdeq	ip, [r2], -r4
   2b920:	strdeq	ip, [r2], -r4
   2b924:	strdeq	ip, [r2], -r4
   2b928:	strdeq	ip, [r2], -r4
   2b92c:	strdeq	ip, [r2], -r4
   2b930:	strdeq	ip, [r2], -r4
   2b934:	strdeq	ip, [r2], -r4
   2b938:	strdeq	ip, [r2], -r4
   2b93c:	strdeq	ip, [r2], -r4
   2b940:	strdeq	ip, [r2], -r4
   2b944:	strdeq	ip, [r2], -r4
   2b948:	strdeq	ip, [r2], -r4
   2b94c:	strdeq	ip, [r2], -r4
   2b950:	ldrdeq	ip, [r2], -r4
   2b954:	andeq	ip, r2, ip, lsl #1
   2b958:	strdeq	ip, [r2], -r4
   2b95c:	ldrdeq	ip, [r2], -r4
   2b960:	strdeq	ip, [r2], -r4
   2b964:	ldrdeq	ip, [r2], -r4
   2b968:	strdeq	ip, [r2], -r4
   2b96c:	strdeq	ip, [r2], -r4
   2b970:	strdeq	ip, [r2], -r4
   2b974:	strdeq	ip, [r2], -r4
   2b978:	strdeq	ip, [r2], -r4
   2b97c:	strdeq	ip, [r2], -r4
   2b980:	strdeq	ip, [r2], -r4
   2b984:	strdeq	ip, [r2], -r4
   2b988:	strdeq	ip, [r2], -r4
   2b98c:	strdeq	ip, [r2], -r4
   2b990:	strdeq	ip, [r2], -r4
   2b994:	strdeq	ip, [r2], -r4
   2b998:	strdeq	ip, [r2], -r4
   2b99c:	strdeq	ip, [r2], -r4
   2b9a0:	strdeq	ip, [r2], -r4
   2b9a4:	strdeq	ip, [r2], -r4
   2b9a8:	strdeq	ip, [r2], -r4
   2b9ac:	strdeq	ip, [r2], -r4
   2b9b0:	strdeq	ip, [r2], -r4
   2b9b4:	strdeq	ip, [r2], -r4
   2b9b8:	strdeq	ip, [r2], -r4
   2b9bc:	strdeq	ip, [r2], -r4
   2b9c0:	strdeq	ip, [r2], -r4
   2b9c4:	strdeq	ip, [r2], -r4
   2b9c8:	strdeq	ip, [r2], -r4
   2b9cc:	strdeq	ip, [r2], -r4
   2b9d0:	andeq	ip, r2, ip, asr #2
   2b9d4:	ldrdeq	ip, [r2], -r4
   2b9d8:	andeq	ip, r2, ip, asr #2
   2b9dc:	andeq	ip, r2, ip, ror #2
   2b9e0:	mov	r8, r9
   2b9e4:	mov	r7, sl
   2b9e8:	b	2c8e8 <__assert_fail@plt+0x1a324>
   2b9ec:	ldr	r3, [sp, #28]
   2b9f0:	cmp	r3, #0
   2b9f4:	bne	2ba14 <__assert_fail@plt+0x19450>
   2b9f8:	ldr	r3, [sp, #156]	; 0x9c
   2b9fc:	tst	r3, #1
   2ba00:	bne	2bdfc <__assert_fail@plt+0x19838>
   2ba04:	ldr	r3, [sp, #28]
   2ba08:	str	r3, [sp, #44]	; 0x2c
   2ba0c:	mov	r5, r3
   2ba10:	b	2bd1c <__assert_fail@plt+0x19758>
   2ba14:	ldr	r3, [sp, #32]
   2ba18:	cmp	r3, #0
   2ba1c:	bne	2c898 <__assert_fail@plt+0x1a2d4>
   2ba20:	str	r3, [sp, #44]	; 0x2c
   2ba24:	ldr	r3, [sp, #36]	; 0x24
   2ba28:	eor	r3, r3, #1
   2ba2c:	cmp	sl, #2
   2ba30:	movne	r3, #0
   2ba34:	andeq	r3, r3, #1
   2ba38:	cmp	r3, #0
   2ba3c:	beq	2ba94 <__assert_fail@plt+0x194d0>
   2ba40:	cmp	r9, fp
   2ba44:	movhi	r2, #39	; 0x27
   2ba48:	strbhi	r2, [r8, fp]
   2ba4c:	add	r2, fp, #1
   2ba50:	cmp	r9, r2
   2ba54:	movhi	r1, #36	; 0x24
   2ba58:	strbhi	r1, [r8, r2]
   2ba5c:	add	r2, fp, #2
   2ba60:	cmp	r9, r2
   2ba64:	movhi	r1, #39	; 0x27
   2ba68:	strbhi	r1, [r8, r2]
   2ba6c:	add	r2, fp, #3
   2ba70:	cmp	r9, r2
   2ba74:	bls	2c954 <__assert_fail@plt+0x1a390>
   2ba78:	mov	r1, #92	; 0x5c
   2ba7c:	strb	r1, [r8, r2]
   2ba80:	add	fp, fp, #4
   2ba84:	str	r3, [sp, #36]	; 0x24
   2ba88:	mov	r5, #0
   2ba8c:	mov	r4, #48	; 0x30
   2ba90:	b	2bd68 <__assert_fail@plt+0x197a4>
   2ba94:	cmp	r9, fp
   2ba98:	bhi	2bac0 <__assert_fail@plt+0x194fc>
   2ba9c:	add	r1, fp, #1
   2baa0:	ldr	r2, [sp, #56]	; 0x38
   2baa4:	cmp	r2, #0
   2baa8:	bne	2bae8 <__assert_fail@plt+0x19524>
   2baac:	mov	r3, r5
   2bab0:	ldr	r5, [sp, #56]	; 0x38
   2bab4:	mov	fp, r1
   2bab8:	mov	r4, #48	; 0x30
   2babc:	b	2bd1c <__assert_fail@plt+0x19758>
   2bac0:	mov	r2, #92	; 0x5c
   2bac4:	strb	r2, [r8, fp]
   2bac8:	add	r1, fp, #1
   2bacc:	ldr	r2, [sp, #56]	; 0x38
   2bad0:	cmp	r2, #0
   2bad4:	moveq	r3, r5
   2bad8:	moveq	r5, r2
   2badc:	moveq	fp, r1
   2bae0:	moveq	r4, #48	; 0x30
   2bae4:	beq	2bd68 <__assert_fail@plt+0x197a4>
   2bae8:	add	r2, r6, #1
   2baec:	ldr	r0, [sp, #24]
   2baf0:	cmp	r2, r0
   2baf4:	bcs	2bb10 <__assert_fail@plt+0x1954c>
   2baf8:	ldr	r0, [sp, #48]	; 0x30
   2bafc:	ldrb	r2, [r0, r2]
   2bb00:	sub	r2, r2, #48	; 0x30
   2bb04:	uxtb	r2, r2
   2bb08:	cmp	r2, #9
   2bb0c:	bls	2bb28 <__assert_fail@plt+0x19564>
   2bb10:	mov	r2, r3
   2bb14:	mov	r3, r5
   2bb18:	mov	r5, r2
   2bb1c:	mov	fp, r1
   2bb20:	mov	r4, #48	; 0x30
   2bb24:	b	2bd40 <__assert_fail@plt+0x1977c>
   2bb28:	cmp	r9, r1
   2bb2c:	movhi	r2, #48	; 0x30
   2bb30:	strbhi	r2, [r8, r1]
   2bb34:	add	r2, fp, #2
   2bb38:	cmp	r9, r2
   2bb3c:	movhi	r1, #48	; 0x30
   2bb40:	strbhi	r1, [r8, r2]
   2bb44:	add	r1, fp, #3
   2bb48:	b	2bb10 <__assert_fail@plt+0x1954c>
   2bb4c:	mov	r3, #0
   2bb50:	str	r3, [sp, #44]	; 0x2c
   2bb54:	cmp	sl, #2
   2bb58:	beq	2bb74 <__assert_fail@plt+0x195b0>
   2bb5c:	cmp	sl, #5
   2bb60:	beq	2bb8c <__assert_fail@plt+0x195c8>
   2bb64:	mov	r5, #0
   2bb68:	mov	r3, r5
   2bb6c:	mov	r4, #63	; 0x3f
   2bb70:	b	2bd1c <__assert_fail@plt+0x19758>
   2bb74:	ldr	r3, [sp, #32]
   2bb78:	cmp	r3, #0
   2bb7c:	bne	2c8a4 <__assert_fail@plt+0x1a2e0>
   2bb80:	mov	r5, r3
   2bb84:	mov	r4, #63	; 0x3f
   2bb88:	b	2c284 <__assert_fail@plt+0x19cc0>
   2bb8c:	ldr	r3, [sp, #156]	; 0x9c
   2bb90:	tst	r3, #4
   2bb94:	beq	2c6bc <__assert_fail@plt+0x1a0f8>
   2bb98:	add	r2, r6, #2
   2bb9c:	ldr	r3, [sp, #24]
   2bba0:	cmp	r2, r3
   2bba4:	bcs	2c6cc <__assert_fail@plt+0x1a108>
   2bba8:	ldr	r3, [sp, #48]	; 0x30
   2bbac:	add	r3, r3, r6
   2bbb0:	ldrb	r4, [r3, #1]
   2bbb4:	cmp	r4, #63	; 0x3f
   2bbb8:	movne	r5, #0
   2bbbc:	movne	r3, r5
   2bbc0:	movne	r4, #63	; 0x3f
   2bbc4:	bne	2bd1c <__assert_fail@plt+0x19758>
   2bbc8:	ldr	r3, [sp, #48]	; 0x30
   2bbcc:	ldrb	r1, [r3, r2]
   2bbd0:	sub	r3, r1, #33	; 0x21
   2bbd4:	cmp	r3, #29
   2bbd8:	ldrls	pc, [pc, r3, lsl #2]
   2bbdc:	b	2c6dc <__assert_fail@plt+0x1a118>
   2bbe0:	andeq	fp, r2, r8, asr ip
   2bbe4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bbe8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bbec:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bbf0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bbf4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bbf8:	andeq	fp, r2, r8, asr ip
   2bbfc:	andeq	fp, r2, r8, asr ip
   2bc00:	andeq	fp, r2, r8, asr ip
   2bc04:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc08:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc0c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc10:	andeq	fp, r2, r8, asr ip
   2bc14:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc18:	andeq	fp, r2, r8, asr ip
   2bc1c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc20:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc24:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc28:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc2c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc30:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc34:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc38:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc3c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc40:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc44:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc48:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2bc4c:	andeq	fp, r2, r8, asr ip
   2bc50:	andeq	fp, r2, r8, asr ip
   2bc54:	andeq	fp, r2, r8, asr ip
   2bc58:	ldr	r3, [sp, #32]
   2bc5c:	cmp	r3, #0
   2bc60:	bne	2c948 <__assert_fail@plt+0x1a384>
   2bc64:	cmp	r9, fp
   2bc68:	movhi	r3, #63	; 0x3f
   2bc6c:	strbhi	r3, [r8, fp]
   2bc70:	add	r3, fp, #1
   2bc74:	cmp	r9, r3
   2bc78:	movhi	r0, #34	; 0x22
   2bc7c:	strbhi	r0, [r8, r3]
   2bc80:	add	r3, fp, #2
   2bc84:	cmp	r9, r3
   2bc88:	movhi	r0, #34	; 0x22
   2bc8c:	strbhi	r0, [r8, r3]
   2bc90:	add	r3, fp, #3
   2bc94:	cmp	r9, r3
   2bc98:	movhi	r0, #63	; 0x3f
   2bc9c:	strbhi	r0, [r8, r3]
   2bca0:	add	fp, fp, #4
   2bca4:	ldr	r3, [sp, #32]
   2bca8:	mov	r5, r3
   2bcac:	mov	r4, r1
   2bcb0:	mov	r6, r2
   2bcb4:	b	2bd1c <__assert_fail@plt+0x19758>
   2bcb8:	mov	r3, #0
   2bcbc:	str	r3, [sp, #44]	; 0x2c
   2bcc0:	mov	r4, #8
   2bcc4:	mov	r3, #98	; 0x62
   2bcc8:	b	2bd08 <__assert_fail@plt+0x19744>
   2bccc:	mov	r3, #0
   2bcd0:	str	r3, [sp, #44]	; 0x2c
   2bcd4:	mov	r4, #12
   2bcd8:	mov	r3, #102	; 0x66
   2bcdc:	b	2bd08 <__assert_fail@plt+0x19744>
   2bce0:	mov	r3, #0
   2bce4:	str	r3, [sp, #44]	; 0x2c
   2bce8:	mov	r4, #13
   2bcec:	mov	r3, #114	; 0x72
   2bcf0:	ldr	r2, [sp, #32]
   2bcf4:	cmp	sl, #2
   2bcf8:	movne	r2, #0
   2bcfc:	andeq	r2, r2, #1
   2bd00:	cmp	r2, #0
   2bd04:	bne	2c128 <__assert_fail@plt+0x19b64>
   2bd08:	ldr	r2, [sp, #28]
   2bd0c:	cmp	r2, #0
   2bd10:	bne	2c710 <__assert_fail@plt+0x1a14c>
   2bd14:	mov	r5, r2
   2bd18:	mov	r3, r2
   2bd1c:	ldr	r2, [sp, #28]
   2bd20:	eor	r2, r2, #1
   2bd24:	cmp	sl, #2
   2bd28:	orreq	r2, r2, #1
   2bd2c:	eor	r2, r2, #1
   2bd30:	ldr	r1, [sp, #32]
   2bd34:	orr	r2, r1, r2
   2bd38:	tst	r2, #255	; 0xff
   2bd3c:	beq	2bd68 <__assert_fail@plt+0x197a4>
   2bd40:	ldr	r2, [sp, #160]	; 0xa0
   2bd44:	cmp	r2, #0
   2bd48:	beq	2bd68 <__assert_fail@plt+0x197a4>
   2bd4c:	ubfx	r1, r4, #5, #8
   2bd50:	and	r2, r4, #31
   2bd54:	ldr	r0, [sp, #160]	; 0xa0
   2bd58:	ldr	r1, [r0, r1, lsl #2]
   2bd5c:	lsr	r2, r1, r2
   2bd60:	tst	r2, #1
   2bd64:	bne	2bd74 <__assert_fail@plt+0x197b0>
   2bd68:	ldr	r2, [sp, #44]	; 0x2c
   2bd6c:	cmp	r2, #0
   2bd70:	beq	2c0c8 <__assert_fail@plt+0x19b04>
   2bd74:	ldr	r3, [sp, #32]
   2bd78:	cmp	r3, #0
   2bd7c:	bne	2c8c8 <__assert_fail@plt+0x1a304>
   2bd80:	ldr	r3, [sp, #36]	; 0x24
   2bd84:	eor	r3, r3, #1
   2bd88:	cmp	sl, #2
   2bd8c:	movne	r3, #0
   2bd90:	andeq	r3, r3, #1
   2bd94:	cmp	r3, #0
   2bd98:	beq	2bdd0 <__assert_fail@plt+0x1980c>
   2bd9c:	cmp	r9, fp
   2bda0:	movhi	r2, #39	; 0x27
   2bda4:	strbhi	r2, [r8, fp]
   2bda8:	add	r2, fp, #1
   2bdac:	cmp	r9, r2
   2bdb0:	movhi	r1, #36	; 0x24
   2bdb4:	strbhi	r1, [r8, r2]
   2bdb8:	add	r2, fp, #2
   2bdbc:	cmp	r9, r2
   2bdc0:	movhi	r1, #39	; 0x27
   2bdc4:	strbhi	r1, [r8, r2]
   2bdc8:	add	fp, fp, #3
   2bdcc:	str	r3, [sp, #36]	; 0x24
   2bdd0:	cmp	r9, fp
   2bdd4:	movhi	r3, #92	; 0x5c
   2bdd8:	strbhi	r3, [r8, fp]
   2bddc:	add	fp, fp, #1
   2bde0:	cmp	fp, r9
   2bde4:	strbcc	r4, [r8, fp]
   2bde8:	add	fp, fp, #1
   2bdec:	cmp	r5, #0
   2bdf0:	ldr	r3, [sp, #40]	; 0x28
   2bdf4:	moveq	r3, r5
   2bdf8:	str	r3, [sp, #40]	; 0x28
   2bdfc:	add	r6, r6, #1
   2be00:	ldr	r3, [sp, #24]
   2be04:	cmn	r3, #1
   2be08:	beq	2c738 <__assert_fail@plt+0x1a174>
   2be0c:	ldr	r3, [sp, #24]
   2be10:	subs	r5, r3, r6
   2be14:	movne	r5, #1
   2be18:	cmp	r5, #0
   2be1c:	beq	2c74c <__assert_fail@plt+0x1a188>
   2be20:	ldr	r3, [sp, #28]
   2be24:	cmp	sl, #2
   2be28:	moveq	r3, #0
   2be2c:	andne	r3, r3, #1
   2be30:	str	r3, [sp, #56]	; 0x38
   2be34:	ldr	r2, [sp, #52]	; 0x34
   2be38:	adds	r7, r2, #0
   2be3c:	movne	r7, #1
   2be40:	ands	r3, r3, r7
   2be44:	str	r3, [sp, #44]	; 0x2c
   2be48:	bne	2b768 <__assert_fail@plt+0x191a4>
   2be4c:	ldr	r3, [sp, #48]	; 0x30
   2be50:	ldrb	r4, [r3, r6]
   2be54:	cmp	r4, #126	; 0x7e
   2be58:	ldrls	pc, [pc, r4, lsl #2]
   2be5c:	b	2c294 <__assert_fail@plt+0x19cd0>
   2be60:	andeq	fp, r2, ip, ror #19
   2be64:	muleq	r2, r4, r2
   2be68:	muleq	r2, r4, r2
   2be6c:	muleq	r2, r4, r2
   2be70:	muleq	r2, r4, r2
   2be74:	muleq	r2, r4, r2
   2be78:	muleq	r2, r4, r2
   2be7c:	andeq	ip, r2, r4, lsr r1
   2be80:	andeq	fp, r2, r0, asr #25
   2be84:	andeq	ip, r2, r4, rrx
   2be88:	andeq	ip, r2, r8, lsl #2
   2be8c:	andeq	ip, r2, r8, ror r0
   2be90:	ldrdeq	fp, [r2], -r4
   2be94:	andeq	fp, r2, r8, ror #25
   2be98:	muleq	r2, r4, r2
   2be9c:	muleq	r2, r4, r2
   2bea0:	muleq	r2, r4, r2
   2bea4:	muleq	r2, r4, r2
   2bea8:	muleq	r2, r4, r2
   2beac:	muleq	r2, r4, r2
   2beb0:	muleq	r2, r4, r2
   2beb4:	muleq	r2, r4, r2
   2beb8:	muleq	r2, r4, r2
   2bebc:	muleq	r2, r4, r2
   2bec0:	muleq	r2, r4, r2
   2bec4:	muleq	r2, r4, r2
   2bec8:	muleq	r2, r4, r2
   2becc:	muleq	r2, r4, r2
   2bed0:	muleq	r2, r4, r2
   2bed4:	muleq	r2, r4, r2
   2bed8:	muleq	r2, r4, r2
   2bedc:	muleq	r2, r4, r2
   2bee0:			; <UNDEFINED> instruction: 0x0002c1b0
   2bee4:	andeq	ip, r2, ip, lsr #3
   2bee8:	andeq	ip, r2, ip, lsr #3
   2beec:	andeq	ip, r2, ip, ror #2
   2bef0:	andeq	ip, r2, ip, lsr #3
   2bef4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bef8:	andeq	ip, r2, ip, lsr #3
   2befc:	strdeq	ip, [r2], -r4
   2bf00:	andeq	ip, r2, ip, lsr #3
   2bf04:	andeq	ip, r2, ip, lsr #3
   2bf08:	andeq	ip, r2, ip, lsr #3
   2bf0c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf10:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf14:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf18:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf1c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf20:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf24:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf28:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf2c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf30:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf34:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf38:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf3c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf40:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf44:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf48:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf4c:	andeq	ip, r2, ip, lsr #3
   2bf50:	andeq	ip, r2, ip, lsr #3
   2bf54:	andeq	ip, r2, ip, lsr #3
   2bf58:	andeq	ip, r2, ip, lsr #3
   2bf5c:	andeq	fp, r2, r4, asr fp
   2bf60:	muleq	r2, r4, r2
   2bf64:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf68:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf6c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf70:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf74:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf78:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf7c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf80:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf84:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf88:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf8c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf90:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf94:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf98:			; <UNDEFINED> instruction: 0x0002c6b4
   2bf9c:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfa0:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfa4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfa8:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfac:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfb0:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfb4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfb8:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfbc:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfc0:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfc4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfc8:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfcc:	andeq	ip, r2, ip, lsr #3
   2bfd0:	andeq	ip, r2, ip, lsl #1
   2bfd4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfd8:	andeq	ip, r2, ip, lsr #3
   2bfdc:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfe0:	andeq	ip, r2, ip, lsr #3
   2bfe4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfe8:			; <UNDEFINED> instruction: 0x0002c6b4
   2bfec:			; <UNDEFINED> instruction: 0x0002c6b4
   2bff0:			; <UNDEFINED> instruction: 0x0002c6b4
   2bff4:			; <UNDEFINED> instruction: 0x0002c6b4
   2bff8:			; <UNDEFINED> instruction: 0x0002c6b4
   2bffc:			; <UNDEFINED> instruction: 0x0002c6b4
   2c000:			; <UNDEFINED> instruction: 0x0002c6b4
   2c004:			; <UNDEFINED> instruction: 0x0002c6b4
   2c008:			; <UNDEFINED> instruction: 0x0002c6b4
   2c00c:			; <UNDEFINED> instruction: 0x0002c6b4
   2c010:			; <UNDEFINED> instruction: 0x0002c6b4
   2c014:			; <UNDEFINED> instruction: 0x0002c6b4
   2c018:			; <UNDEFINED> instruction: 0x0002c6b4
   2c01c:			; <UNDEFINED> instruction: 0x0002c6b4
   2c020:			; <UNDEFINED> instruction: 0x0002c6b4
   2c024:			; <UNDEFINED> instruction: 0x0002c6b4
   2c028:			; <UNDEFINED> instruction: 0x0002c6b4
   2c02c:			; <UNDEFINED> instruction: 0x0002c6b4
   2c030:			; <UNDEFINED> instruction: 0x0002c6b4
   2c034:			; <UNDEFINED> instruction: 0x0002c6b4
   2c038:			; <UNDEFINED> instruction: 0x0002c6b4
   2c03c:			; <UNDEFINED> instruction: 0x0002c6b4
   2c040:			; <UNDEFINED> instruction: 0x0002c6b4
   2c044:			; <UNDEFINED> instruction: 0x0002c6b4
   2c048:			; <UNDEFINED> instruction: 0x0002c6b4
   2c04c:	andeq	ip, r2, ip, asr #2
   2c050:	andeq	ip, r2, ip, lsr #3
   2c054:	andeq	ip, r2, ip, asr #2
   2c058:	andeq	ip, r2, ip, ror #2
   2c05c:	mov	r3, #0
   2c060:	str	r3, [sp, #44]	; 0x2c
   2c064:	mov	r4, #9
   2c068:	mov	r3, #116	; 0x74
   2c06c:	b	2bcf0 <__assert_fail@plt+0x1972c>
   2c070:	mov	r3, #0
   2c074:	str	r3, [sp, #44]	; 0x2c
   2c078:	mov	r4, #11
   2c07c:	mov	r3, #118	; 0x76
   2c080:	b	2bd08 <__assert_fail@plt+0x19744>
   2c084:	mov	r3, #0
   2c088:	str	r3, [sp, #44]	; 0x2c
   2c08c:	cmp	sl, #2
   2c090:	beq	2c0b4 <__assert_fail@plt+0x19af0>
   2c094:	ldr	r3, [sp, #28]
   2c098:	ldr	r2, [sp, #32]
   2c09c:	and	r3, r3, r2
   2c0a0:	tst	r7, r3
   2c0a4:	bne	2c728 <__assert_fail@plt+0x1a164>
   2c0a8:	mov	r4, #92	; 0x5c
   2c0ac:	mov	r3, r4
   2c0b0:	b	2bd08 <__assert_fail@plt+0x19744>
   2c0b4:	ldr	r3, [sp, #32]
   2c0b8:	cmp	r3, #0
   2c0bc:	bne	2c8b0 <__assert_fail@plt+0x1a2ec>
   2c0c0:	mov	r5, r3
   2c0c4:	mov	r4, #92	; 0x5c
   2c0c8:	eor	r3, r3, #1
   2c0cc:	ldr	r2, [sp, #36]	; 0x24
   2c0d0:	and	r3, r3, r2
   2c0d4:	tst	r3, #255	; 0xff
   2c0d8:	beq	2bde0 <__assert_fail@plt+0x1981c>
   2c0dc:	cmp	r9, fp
   2c0e0:	movhi	r3, #39	; 0x27
   2c0e4:	strbhi	r3, [r8, fp]
   2c0e8:	add	r3, fp, #1
   2c0ec:	cmp	r9, r3
   2c0f0:	movhi	r2, #39	; 0x27
   2c0f4:	strbhi	r2, [r8, r3]
   2c0f8:	add	fp, fp, #2
   2c0fc:	mov	r3, #0
   2c100:	str	r3, [sp, #36]	; 0x24
   2c104:	b	2bde0 <__assert_fail@plt+0x1981c>
   2c108:	mov	r3, #110	; 0x6e
   2c10c:	b	2bcf0 <__assert_fail@plt+0x1972c>
   2c110:	mov	r3, #110	; 0x6e
   2c114:	b	2bcf0 <__assert_fail@plt+0x1972c>
   2c118:	mov	r3, #0
   2c11c:	str	r3, [sp, #44]	; 0x2c
   2c120:	mov	r3, #110	; 0x6e
   2c124:	b	2bcf0 <__assert_fail@plt+0x1972c>
   2c128:	mov	r8, r9
   2c12c:	mov	r7, #2
   2c130:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c134:	mov	r3, #97	; 0x61
   2c138:	b	2bd08 <__assert_fail@plt+0x19744>
   2c13c:	mov	r3, #97	; 0x61
   2c140:	b	2bd08 <__assert_fail@plt+0x19744>
   2c144:	mov	r3, #0
   2c148:	str	r3, [sp, #44]	; 0x2c
   2c14c:	ldr	r3, [sp, #24]
   2c150:	cmn	r3, #1
   2c154:	beq	2c180 <__assert_fail@plt+0x19bbc>
   2c158:	ldr	r3, [sp, #24]
   2c15c:	subs	r3, r3, #1
   2c160:	movne	r3, #1
   2c164:	cmp	r3, #0
   2c168:	bne	2c6e8 <__assert_fail@plt+0x1a124>
   2c16c:	cmp	r6, #0
   2c170:	beq	2c1b0 <__assert_fail@plt+0x19bec>
   2c174:	mov	r5, #0
   2c178:	mov	r3, r5
   2c17c:	b	2bd1c <__assert_fail@plt+0x19758>
   2c180:	ldr	r3, [sp, #48]	; 0x30
   2c184:	ldrb	r3, [r3, #1]
   2c188:	adds	r3, r3, #0
   2c18c:	movne	r3, #1
   2c190:	b	2c164 <__assert_fail@plt+0x19ba0>
   2c194:	mov	r3, #0
   2c198:	str	r3, [sp, #44]	; 0x2c
   2c19c:	b	2c16c <__assert_fail@plt+0x19ba8>
   2c1a0:	mov	r3, #0
   2c1a4:	str	r3, [sp, #44]	; 0x2c
   2c1a8:	b	2c1b0 <__assert_fail@plt+0x19bec>
   2c1ac:	ldr	r5, [sp, #44]	; 0x2c
   2c1b0:	ldr	r3, [sp, #32]
   2c1b4:	cmp	sl, #2
   2c1b8:	movne	r3, #0
   2c1bc:	andeq	r3, r3, #1
   2c1c0:	cmp	r3, #0
   2c1c4:	beq	2bd1c <__assert_fail@plt+0x19758>
   2c1c8:	mov	r8, r9
   2c1cc:	mov	r7, #2
   2c1d0:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c1d4:	ldr	r5, [sp, #32]
   2c1d8:	b	2c1b0 <__assert_fail@plt+0x19bec>
   2c1dc:	mov	r3, #0
   2c1e0:	str	r3, [sp, #44]	; 0x2c
   2c1e4:	mov	r5, r3
   2c1e8:	b	2c1b0 <__assert_fail@plt+0x19bec>
   2c1ec:	mov	r3, #0
   2c1f0:	str	r3, [sp, #44]	; 0x2c
   2c1f4:	cmp	sl, #2
   2c1f8:	strne	r5, [sp, #68]	; 0x44
   2c1fc:	movne	r3, #0
   2c200:	movne	r4, #39	; 0x27
   2c204:	bne	2bd1c <__assert_fail@plt+0x19758>
   2c208:	ldr	r3, [sp, #32]
   2c20c:	cmp	r3, #0
   2c210:	bne	2c8bc <__assert_fail@plt+0x1a2f8>
   2c214:	ldr	r3, [sp, #72]	; 0x48
   2c218:	clz	r3, r3
   2c21c:	lsr	r3, r3, #5
   2c220:	cmp	r9, #0
   2c224:	moveq	r3, #0
   2c228:	cmp	r3, #0
   2c22c:	movne	r3, #0
   2c230:	bne	2c258 <__assert_fail@plt+0x19c94>
   2c234:	cmp	r9, fp
   2c238:	movhi	r3, #39	; 0x27
   2c23c:	strbhi	r3, [r8, fp]
   2c240:	add	r3, fp, #1
   2c244:	cmp	r9, r3
   2c248:	movhi	r2, #92	; 0x5c
   2c24c:	strbhi	r2, [r8, r3]
   2c250:	mov	r3, r9
   2c254:	ldr	r9, [sp, #72]	; 0x48
   2c258:	add	r2, fp, #2
   2c25c:	cmp	r2, r3
   2c260:	movcc	r1, #39	; 0x27
   2c264:	strbcc	r1, [r8, r2]
   2c268:	add	fp, fp, #3
   2c26c:	str	r5, [sp, #68]	; 0x44
   2c270:	ldr	r2, [sp, #32]
   2c274:	str	r2, [sp, #36]	; 0x24
   2c278:	str	r9, [sp, #72]	; 0x48
   2c27c:	mov	r9, r3
   2c280:	mov	r4, #39	; 0x27
   2c284:	mov	r3, #0
   2c288:	b	2bd68 <__assert_fail@plt+0x197a4>
   2c28c:	mov	r3, #0
   2c290:	str	r3, [sp, #44]	; 0x2c
   2c294:	ldr	r7, [sp, #76]	; 0x4c
   2c298:	cmp	r7, #1
   2c29c:	bne	2c2d4 <__assert_fail@plt+0x19d10>
   2c2a0:	bl	12288 <__ctype_b_loc@plt>
   2c2a4:	ldr	r2, [r0]
   2c2a8:	lsl	r3, r4, #1
   2c2ac:	ldrh	r5, [r2, r3]
   2c2b0:	ubfx	r5, r5, #14, #1
   2c2b4:	mov	ip, r7
   2c2b8:	eor	r3, r5, #1
   2c2bc:	ldr	r2, [sp, #28]
   2c2c0:	and	r3, r3, r2
   2c2c4:	ands	r3, r3, #255	; 0xff
   2c2c8:	beq	2bd1c <__assert_fail@plt+0x19758>
   2c2cc:	mov	r5, #0
   2c2d0:	b	2c530 <__assert_fail@plt+0x19f6c>
   2c2d4:	mov	r2, #0
   2c2d8:	mov	r3, #0
   2c2dc:	strd	r2, [sp, #104]	; 0x68
   2c2e0:	ldr	r3, [sp, #24]
   2c2e4:	cmn	r3, #1
   2c2e8:	beq	2c30c <__assert_fail@plt+0x19d48>
   2c2ec:	mov	r3, #0
   2c2f0:	str	r4, [sp, #88]	; 0x58
   2c2f4:	str	fp, [sp, #92]	; 0x5c
   2c2f8:	str	r8, [sp, #56]	; 0x38
   2c2fc:	mov	r8, r3
   2c300:	str	r9, [sp, #84]	; 0x54
   2c304:	ldr	r9, [sp, #48]	; 0x30
   2c308:	b	2c458 <__assert_fail@plt+0x19e94>
   2c30c:	ldr	r0, [sp, #48]	; 0x30
   2c310:	bl	122d0 <strlen@plt>
   2c314:	str	r0, [sp, #24]
   2c318:	b	2c2ec <__assert_fail@plt+0x19d28>
   2c31c:	mov	r1, fp
   2c320:	ldr	r4, [sp, #88]	; 0x58
   2c324:	mov	r2, r8
   2c328:	mov	ip, r8
   2c32c:	ldr	fp, [sp, #92]	; 0x5c
   2c330:	ldr	r8, [sp, #56]	; 0x38
   2c334:	ldr	r9, [sp, #84]	; 0x54
   2c338:	ldr	r0, [sp, #24]
   2c33c:	cmp	r7, r0
   2c340:	bcs	2c4f8 <__assert_fail@plt+0x19f34>
   2c344:	ldrb	r3, [r1]
   2c348:	cmp	r3, #0
   2c34c:	beq	2c500 <__assert_fail@plt+0x19f3c>
   2c350:	mov	r3, r1
   2c354:	add	r2, r2, #1
   2c358:	add	r1, r6, r2
   2c35c:	cmp	r0, r1
   2c360:	bls	2c508 <__assert_fail@plt+0x19f44>
   2c364:	ldrb	r1, [r3, #1]!
   2c368:	cmp	r1, #0
   2c36c:	bne	2c354 <__assert_fail@plt+0x19d90>
   2c370:	mov	ip, r2
   2c374:	mov	r5, #0
   2c378:	b	2c528 <__assert_fail@plt+0x19f64>
   2c37c:	ldr	r3, [sp, #56]	; 0x38
   2c380:	str	r3, [sp, #64]	; 0x40
   2c384:	ldr	r8, [sp, #84]	; 0x54
   2c388:	mov	r7, #2
   2c38c:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c390:	cmp	r2, r7
   2c394:	beq	2c434 <__assert_fail@plt+0x19e70>
   2c398:	ldrb	r3, [r2], #1
   2c39c:	sub	r3, r3, #91	; 0x5b
   2c3a0:	cmp	r3, #33	; 0x21
   2c3a4:	ldrls	pc, [pc, r3, lsl #2]
   2c3a8:	b	2c390 <__assert_fail@plt+0x19dcc>
   2c3ac:	andeq	ip, r2, ip, ror r3
   2c3b0:	andeq	ip, r2, ip, ror r3
   2c3b4:	muleq	r2, r0, r3
   2c3b8:	andeq	ip, r2, ip, ror r3
   2c3bc:	muleq	r2, r0, r3
   2c3c0:	andeq	ip, r2, ip, ror r3
   2c3c4:	muleq	r2, r0, r3
   2c3c8:	muleq	r2, r0, r3
   2c3cc:	muleq	r2, r0, r3
   2c3d0:	muleq	r2, r0, r3
   2c3d4:	muleq	r2, r0, r3
   2c3d8:	muleq	r2, r0, r3
   2c3dc:	muleq	r2, r0, r3
   2c3e0:	muleq	r2, r0, r3
   2c3e4:	muleq	r2, r0, r3
   2c3e8:	muleq	r2, r0, r3
   2c3ec:	muleq	r2, r0, r3
   2c3f0:	muleq	r2, r0, r3
   2c3f4:	muleq	r2, r0, r3
   2c3f8:	muleq	r2, r0, r3
   2c3fc:	muleq	r2, r0, r3
   2c400:	muleq	r2, r0, r3
   2c404:	muleq	r2, r0, r3
   2c408:	muleq	r2, r0, r3
   2c40c:	muleq	r2, r0, r3
   2c410:	muleq	r2, r0, r3
   2c414:	muleq	r2, r0, r3
   2c418:	muleq	r2, r0, r3
   2c41c:	muleq	r2, r0, r3
   2c420:	muleq	r2, r0, r3
   2c424:	muleq	r2, r0, r3
   2c428:	muleq	r2, r0, r3
   2c42c:	muleq	r2, r0, r3
   2c430:	andeq	ip, r2, ip, ror r3
   2c434:	ldr	r0, [sp, #100]	; 0x64
   2c438:	bl	12108 <iswprint@plt>
   2c43c:	cmp	r0, #0
   2c440:	moveq	r5, #0
   2c444:	add	r8, r8, r4
   2c448:	add	r0, sp, #104	; 0x68
   2c44c:	bl	1203c <mbsinit@plt>
   2c450:	cmp	r0, #0
   2c454:	bne	2c4c4 <__assert_fail@plt+0x19f00>
   2c458:	add	r7, r6, r8
   2c45c:	add	fp, r9, r7
   2c460:	add	r3, sp, #104	; 0x68
   2c464:	ldr	r2, [sp, #24]
   2c468:	sub	r2, r2, r7
   2c46c:	mov	r1, fp
   2c470:	add	r0, sp, #100	; 0x64
   2c474:	bl	32184 <__assert_fail@plt+0x1fbc0>
   2c478:	subs	r4, r0, #0
   2c47c:	beq	2c514 <__assert_fail@plt+0x19f50>
   2c480:	cmn	r4, #1
   2c484:	beq	2c4dc <__assert_fail@plt+0x19f18>
   2c488:	cmn	r4, #2
   2c48c:	beq	2c31c <__assert_fail@plt+0x19d58>
   2c490:	ldr	r3, [sp, #32]
   2c494:	cmp	sl, #2
   2c498:	movne	r3, #0
   2c49c:	andeq	r3, r3, #1
   2c4a0:	cmp	r3, #0
   2c4a4:	beq	2c434 <__assert_fail@plt+0x19e70>
   2c4a8:	cmp	r4, #1
   2c4ac:	bls	2c434 <__assert_fail@plt+0x19e70>
   2c4b0:	add	r2, r7, #1
   2c4b4:	add	r2, r9, r2
   2c4b8:	add	r3, r9, r4
   2c4bc:	add	r7, r3, r7
   2c4c0:	b	2c398 <__assert_fail@plt+0x19dd4>
   2c4c4:	ldr	r4, [sp, #88]	; 0x58
   2c4c8:	mov	ip, r8
   2c4cc:	ldr	fp, [sp, #92]	; 0x5c
   2c4d0:	ldr	r8, [sp, #56]	; 0x38
   2c4d4:	ldr	r9, [sp, #84]	; 0x54
   2c4d8:	b	2c528 <__assert_fail@plt+0x19f64>
   2c4dc:	ldr	r4, [sp, #88]	; 0x58
   2c4e0:	mov	ip, r8
   2c4e4:	ldr	fp, [sp, #92]	; 0x5c
   2c4e8:	ldr	r8, [sp, #56]	; 0x38
   2c4ec:	ldr	r9, [sp, #84]	; 0x54
   2c4f0:	mov	r5, #0
   2c4f4:	b	2c528 <__assert_fail@plt+0x19f64>
   2c4f8:	mov	r5, #0
   2c4fc:	b	2c528 <__assert_fail@plt+0x19f64>
   2c500:	mov	r5, #0
   2c504:	b	2c528 <__assert_fail@plt+0x19f64>
   2c508:	mov	ip, r2
   2c50c:	mov	r5, #0
   2c510:	b	2c528 <__assert_fail@plt+0x19f64>
   2c514:	ldr	r4, [sp, #88]	; 0x58
   2c518:	mov	ip, r8
   2c51c:	ldr	fp, [sp, #92]	; 0x5c
   2c520:	ldr	r8, [sp, #56]	; 0x38
   2c524:	ldr	r9, [sp, #84]	; 0x54
   2c528:	cmp	ip, #1
   2c52c:	bls	2c2b8 <__assert_fail@plt+0x19cf4>
   2c530:	add	lr, r6, ip
   2c534:	ldr	r3, [sp, #48]	; 0x30
   2c538:	add	r1, r3, r6
   2c53c:	mov	r3, #0
   2c540:	eor	r0, r5, #1
   2c544:	ldr	r2, [sp, #28]
   2c548:	and	r0, r0, r2
   2c54c:	uxtb	r0, r0
   2c550:	str	r0, [sp, #56]	; 0x38
   2c554:	mov	r7, #92	; 0x5c
   2c558:	ldr	ip, [sp, #36]	; 0x24
   2c55c:	str	r5, [sp, #84]	; 0x54
   2c560:	ldr	r2, [sp, #44]	; 0x2c
   2c564:	b	2c5d4 <__assert_fail@plt+0x1a010>
   2c568:	cmp	r2, #0
   2c56c:	beq	2c57c <__assert_fail@plt+0x19fb8>
   2c570:	cmp	r9, fp
   2c574:	strbhi	r7, [r8, fp]
   2c578:	add	fp, fp, #1
   2c57c:	add	r5, r6, #1
   2c580:	cmp	r5, lr
   2c584:	bcs	2c690 <__assert_fail@plt+0x1a0cc>
   2c588:	eor	r2, r3, #1
   2c58c:	and	r2, r2, ip
   2c590:	ands	r2, r2, #255	; 0xff
   2c594:	beq	2c6ac <__assert_fail@plt+0x1a0e8>
   2c598:	cmp	r9, fp
   2c59c:	movhi	r2, #39	; 0x27
   2c5a0:	strbhi	r2, [r8, fp]
   2c5a4:	add	r2, fp, #1
   2c5a8:	cmp	r9, r2
   2c5ac:	movhi	ip, #39	; 0x27
   2c5b0:	strbhi	ip, [r8, r2]
   2c5b4:	add	fp, fp, #2
   2c5b8:	ldr	ip, [sp, #56]	; 0x38
   2c5bc:	mov	r2, ip
   2c5c0:	mov	r6, r5
   2c5c4:	cmp	r9, fp
   2c5c8:	strbhi	r4, [r8, fp]
   2c5cc:	add	fp, fp, #1
   2c5d0:	ldrb	r4, [r1, #1]!
   2c5d4:	cmp	r0, #0
   2c5d8:	beq	2c568 <__assert_fail@plt+0x19fa4>
   2c5dc:	ldr	r3, [sp, #32]
   2c5e0:	cmp	r3, #0
   2c5e4:	bne	2c878 <__assert_fail@plt+0x1a2b4>
   2c5e8:	eor	r3, ip, #1
   2c5ec:	cmp	sl, #2
   2c5f0:	movne	r3, #0
   2c5f4:	andeq	r3, r3, #1
   2c5f8:	cmp	r3, #0
   2c5fc:	beq	2c634 <__assert_fail@plt+0x1a070>
   2c600:	cmp	r9, fp
   2c604:	movhi	ip, #39	; 0x27
   2c608:	strbhi	ip, [r8, fp]
   2c60c:	add	ip, fp, #1
   2c610:	cmp	r9, ip
   2c614:	movhi	r5, #36	; 0x24
   2c618:	strbhi	r5, [r8, ip]
   2c61c:	add	ip, fp, #2
   2c620:	cmp	r9, ip
   2c624:	movhi	r5, #39	; 0x27
   2c628:	strbhi	r5, [r8, ip]
   2c62c:	add	fp, fp, #3
   2c630:	mov	ip, r3
   2c634:	cmp	r9, fp
   2c638:	strbhi	r7, [r8, fp]
   2c63c:	add	r3, fp, #1
   2c640:	cmp	r9, r3
   2c644:	bls	2c654 <__assert_fail@plt+0x1a090>
   2c648:	lsr	r5, r4, #6
   2c64c:	add	r5, r5, #48	; 0x30
   2c650:	strb	r5, [r8, r3]
   2c654:	add	r3, fp, #2
   2c658:	cmp	r9, r3
   2c65c:	bls	2c66c <__assert_fail@plt+0x1a0a8>
   2c660:	ubfx	r5, r4, #3, #3
   2c664:	add	r5, r5, #48	; 0x30
   2c668:	strb	r5, [r8, r3]
   2c66c:	add	fp, fp, #3
   2c670:	and	r4, r4, #7
   2c674:	add	r4, r4, #48	; 0x30
   2c678:	add	r5, r6, #1
   2c67c:	cmp	r5, lr
   2c680:	bcs	2c69c <__assert_fail@plt+0x1a0d8>
   2c684:	ldr	r3, [sp, #56]	; 0x38
   2c688:	mov	r6, r5
   2c68c:	b	2c5c4 <__assert_fail@plt+0x1a000>
   2c690:	str	ip, [sp, #36]	; 0x24
   2c694:	ldr	r5, [sp, #84]	; 0x54
   2c698:	b	2c0c8 <__assert_fail@plt+0x19b04>
   2c69c:	str	ip, [sp, #36]	; 0x24
   2c6a0:	ldr	r5, [sp, #84]	; 0x54
   2c6a4:	mov	r3, r0
   2c6a8:	b	2c0c8 <__assert_fail@plt+0x19b04>
   2c6ac:	mov	r6, r5
   2c6b0:	b	2c5c4 <__assert_fail@plt+0x1a000>
   2c6b4:	ldr	r3, [sp, #44]	; 0x2c
   2c6b8:	b	2bd1c <__assert_fail@plt+0x19758>
   2c6bc:	mov	r5, #0
   2c6c0:	mov	r3, r5
   2c6c4:	mov	r4, #63	; 0x3f
   2c6c8:	b	2bd1c <__assert_fail@plt+0x19758>
   2c6cc:	mov	r5, #0
   2c6d0:	mov	r3, r5
   2c6d4:	mov	r4, #63	; 0x3f
   2c6d8:	b	2bd1c <__assert_fail@plt+0x19758>
   2c6dc:	mov	r5, #0
   2c6e0:	mov	r3, r5
   2c6e4:	b	2bd1c <__assert_fail@plt+0x19758>
   2c6e8:	mov	r5, #0
   2c6ec:	mov	r3, r5
   2c6f0:	b	2bd1c <__assert_fail@plt+0x19758>
   2c6f4:	ldr	r5, [sp, #44]	; 0x2c
   2c6f8:	ldr	r3, [sp, #32]
   2c6fc:	b	2bd1c <__assert_fail@plt+0x19758>
   2c700:	ldr	r5, [sp, #44]	; 0x2c
   2c704:	mov	r3, #0
   2c708:	str	r3, [sp, #44]	; 0x2c
   2c70c:	b	2bd1c <__assert_fail@plt+0x19758>
   2c710:	mov	r4, r3
   2c714:	mov	r5, #0
   2c718:	b	2bd74 <__assert_fail@plt+0x197b0>
   2c71c:	mov	r5, #0
   2c720:	mov	r4, #97	; 0x61
   2c724:	b	2bd74 <__assert_fail@plt+0x197b0>
   2c728:	mov	r5, #0
   2c72c:	mov	r3, r5
   2c730:	mov	r4, #92	; 0x5c
   2c734:	b	2c0c8 <__assert_fail@plt+0x19b04>
   2c738:	ldr	r3, [sp, #48]	; 0x30
   2c73c:	ldrb	r5, [r3, r6]
   2c740:	adds	r5, r5, #0
   2c744:	movne	r5, #1
   2c748:	b	2be18 <__assert_fail@plt+0x19854>
   2c74c:	cmp	sl, #2
   2c750:	movne	r3, #0
   2c754:	moveq	r3, #1
   2c758:	ldr	r1, [sp, #32]
   2c75c:	cmp	fp, #0
   2c760:	andeq	r2, r3, r1
   2c764:	movne	r2, #0
   2c768:	cmp	r2, #0
   2c76c:	bne	2c88c <__assert_fail@plt+0x1a2c8>
   2c770:	eor	r2, r1, #1
   2c774:	uxtb	r2, r2
   2c778:	and	r3, r3, r2
   2c77c:	ldr	r1, [sp, #68]	; 0x44
   2c780:	ands	r3, r1, r3
   2c784:	beq	2c818 <__assert_fail@plt+0x1a254>
   2c788:	ldr	r2, [sp, #40]	; 0x28
   2c78c:	cmp	r2, #0
   2c790:	bne	2c7c8 <__assert_fail@plt+0x1a204>
   2c794:	ldr	r2, [sp, #72]	; 0x48
   2c798:	adds	r2, r2, #0
   2c79c:	movne	r2, #1
   2c7a0:	cmp	r9, #0
   2c7a4:	movne	r2, #0
   2c7a8:	str	r2, [sp, #68]	; 0x44
   2c7ac:	mov	sl, #2
   2c7b0:	ldr	r1, [sp, #40]	; 0x28
   2c7b4:	str	r1, [sp, #32]
   2c7b8:	cmp	r2, #0
   2c7bc:	beq	2c80c <__assert_fail@plt+0x1a248>
   2c7c0:	ldr	r9, [sp, #72]	; 0x48
   2c7c4:	b	2b520 <__assert_fail@plt+0x18f5c>
   2c7c8:	ldr	r3, [sp, #168]	; 0xa8
   2c7cc:	str	r3, [sp, #16]
   2c7d0:	ldr	r3, [sp, #164]	; 0xa4
   2c7d4:	str	r3, [sp, #12]
   2c7d8:	ldr	r3, [sp, #160]	; 0xa0
   2c7dc:	str	r3, [sp, #8]
   2c7e0:	ldr	r3, [sp, #156]	; 0x9c
   2c7e4:	str	r3, [sp, #4]
   2c7e8:	mov	r3, #5
   2c7ec:	str	r3, [sp]
   2c7f0:	ldr	r3, [sp, #24]
   2c7f4:	ldr	r2, [sp, #48]	; 0x30
   2c7f8:	ldr	r1, [sp, #72]	; 0x48
   2c7fc:	ldr	r0, [sp, #64]	; 0x40
   2c800:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2c804:	mov	fp, r0
   2c808:	b	2c928 <__assert_fail@plt+0x1a364>
   2c80c:	mov	r8, r9
   2c810:	mov	r2, r3
   2c814:	b	2c81c <__assert_fail@plt+0x1a258>
   2c818:	mov	r8, r9
   2c81c:	ldr	r3, [sp, #60]	; 0x3c
   2c820:	cmp	r3, #0
   2c824:	moveq	r2, #0
   2c828:	andne	r2, r2, #1
   2c82c:	cmp	r2, #0
   2c830:	beq	2c860 <__assert_fail@plt+0x1a29c>
   2c834:	mov	r2, r3
   2c838:	ldrb	r3, [r3]
   2c83c:	cmp	r3, #0
   2c840:	beq	2c860 <__assert_fail@plt+0x1a29c>
   2c844:	ldr	r1, [sp, #64]	; 0x40
   2c848:	cmp	r8, fp
   2c84c:	strbhi	r3, [r1, fp]
   2c850:	add	fp, fp, #1
   2c854:	ldrb	r3, [r2, #1]!
   2c858:	cmp	r3, #0
   2c85c:	bne	2c848 <__assert_fail@plt+0x1a284>
   2c860:	cmp	r8, fp
   2c864:	bls	2c928 <__assert_fail@plt+0x1a364>
   2c868:	mov	r3, #0
   2c86c:	ldr	r2, [sp, #64]	; 0x40
   2c870:	strb	r3, [r2, fp]
   2c874:	b	2c928 <__assert_fail@plt+0x1a364>
   2c878:	mov	r8, r9
   2c87c:	mov	r7, sl
   2c880:	ldr	r3, [sp, #32]
   2c884:	str	r3, [sp, #28]
   2c888:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c88c:	mov	r8, r9
   2c890:	mov	r7, #2
   2c894:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c898:	mov	r8, r9
   2c89c:	mov	r7, sl
   2c8a0:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c8a4:	mov	r8, r9
   2c8a8:	mov	r7, sl
   2c8ac:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c8b0:	mov	r8, r9
   2c8b4:	mov	r7, sl
   2c8b8:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c8bc:	mov	r8, r9
   2c8c0:	mov	r7, sl
   2c8c4:	b	2c8d0 <__assert_fail@plt+0x1a30c>
   2c8c8:	mov	r8, r9
   2c8cc:	mov	r7, sl
   2c8d0:	ldr	r3, [sp, #28]
   2c8d4:	cmp	r7, #2
   2c8d8:	movne	r3, #0
   2c8dc:	andeq	r3, r3, #1
   2c8e0:	cmp	r3, #0
   2c8e4:	movne	r7, #4
   2c8e8:	ldr	r3, [sp, #168]	; 0xa8
   2c8ec:	str	r3, [sp, #16]
   2c8f0:	ldr	r3, [sp, #164]	; 0xa4
   2c8f4:	str	r3, [sp, #12]
   2c8f8:	mov	r3, #0
   2c8fc:	str	r3, [sp, #8]
   2c900:	ldr	r3, [sp, #156]	; 0x9c
   2c904:	bic	r3, r3, #2
   2c908:	str	r3, [sp, #4]
   2c90c:	str	r7, [sp]
   2c910:	ldr	r3, [sp, #24]
   2c914:	ldr	r2, [sp, #48]	; 0x30
   2c918:	mov	r1, r8
   2c91c:	ldr	r0, [sp, #64]	; 0x40
   2c920:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2c924:	mov	fp, r0
   2c928:	mov	r0, fp
   2c92c:	add	sp, sp, #116	; 0x74
   2c930:	ldrd	r4, [sp]
   2c934:	ldrd	r6, [sp, #8]
   2c938:	ldrd	r8, [sp, #16]
   2c93c:	ldrd	sl, [sp, #24]
   2c940:	add	sp, sp, #32
   2c944:	pop	{pc}		; (ldr pc, [sp], #4)
   2c948:	mov	r8, r9
   2c94c:	mov	r7, sl
   2c950:	b	2c8e8 <__assert_fail@plt+0x1a324>
   2c954:	add	fp, fp, #4
   2c958:	str	r3, [sp, #36]	; 0x24
   2c95c:	mov	r5, #0
   2c960:	mov	r4, #48	; 0x30
   2c964:	b	2bd1c <__assert_fail@plt+0x19758>
   2c968:	mov	r3, #1
   2c96c:	str	r3, [sp, #32]
   2c970:	str	r3, [sp, #28]
   2c974:	str	r3, [sp, #52]	; 0x34
   2c978:	movw	r3, #40368	; 0x9db0
   2c97c:	movt	r3, #4
   2c980:	str	r3, [sp, #60]	; 0x3c
   2c984:	mov	fp, #0
   2c988:	mov	sl, #5
   2c98c:	b	2b580 <__assert_fail@plt+0x18fbc>
   2c990:	ldr	r3, [sp, #48]	; 0x30
   2c994:	ldrb	r4, [r3, r6]
   2c998:	cmp	r4, #126	; 0x7e
   2c99c:	ldrls	pc, [pc, r4, lsl #2]
   2c9a0:	b	2c28c <__assert_fail@plt+0x19cc8>
   2c9a4:	andeq	fp, r2, r4, lsl sl
   2c9a8:	andeq	ip, r2, ip, lsl #5
   2c9ac:	andeq	ip, r2, ip, lsl #5
   2c9b0:	andeq	ip, r2, ip, lsl #5
   2c9b4:	andeq	ip, r2, ip, lsl #5
   2c9b8:	andeq	ip, r2, ip, lsl #5
   2c9bc:	andeq	ip, r2, ip, lsl #5
   2c9c0:	andeq	ip, r2, ip, lsl r7
   2c9c4:			; <UNDEFINED> instruction: 0x0002bcb8
   2c9c8:	andeq	ip, r2, ip, asr r0
   2c9cc:	andeq	ip, r2, r8, lsl r1
   2c9d0:	andeq	ip, r2, r0, ror r0
   2c9d4:	andeq	fp, r2, ip, asr #25
   2c9d8:	andeq	fp, r2, r0, ror #25
   2c9dc:	andeq	ip, r2, ip, lsl #5
   2c9e0:	andeq	ip, r2, ip, lsl #5
   2c9e4:	andeq	ip, r2, ip, lsl #5
   2c9e8:	andeq	ip, r2, ip, lsl #5
   2c9ec:	andeq	ip, r2, ip, lsl #5
   2c9f0:	andeq	ip, r2, ip, lsl #5
   2c9f4:	andeq	ip, r2, ip, lsl #5
   2c9f8:	andeq	ip, r2, ip, lsl #5
   2c9fc:	andeq	ip, r2, ip, lsl #5
   2ca00:	andeq	ip, r2, ip, lsl #5
   2ca04:	andeq	ip, r2, ip, lsl #5
   2ca08:	andeq	ip, r2, ip, lsl #5
   2ca0c:	andeq	ip, r2, ip, lsl #5
   2ca10:	andeq	ip, r2, ip, lsl #5
   2ca14:	andeq	ip, r2, ip, lsl #5
   2ca18:	andeq	ip, r2, ip, lsl #5
   2ca1c:	andeq	ip, r2, ip, lsl #5
   2ca20:	andeq	ip, r2, ip, lsl #5
   2ca24:	andeq	ip, r2, r0, lsr #3
   2ca28:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca2c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca30:	muleq	r2, r4, r1
   2ca34:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca38:	andeq	ip, r2, r0, lsl #14
   2ca3c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca40:	andeq	ip, r2, ip, ror #3
   2ca44:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca48:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca4c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca50:	andeq	ip, r2, r0, lsl #14
   2ca54:	andeq	ip, r2, r0, lsl #14
   2ca58:	andeq	ip, r2, r0, lsl #14
   2ca5c:	andeq	ip, r2, r0, lsl #14
   2ca60:	andeq	ip, r2, r0, lsl #14
   2ca64:	andeq	ip, r2, r0, lsl #14
   2ca68:	andeq	ip, r2, r0, lsl #14
   2ca6c:	andeq	ip, r2, r0, lsl #14
   2ca70:	andeq	ip, r2, r0, lsl #14
   2ca74:	andeq	ip, r2, r0, lsl #14
   2ca78:	andeq	ip, r2, r0, lsl #14
   2ca7c:	andeq	ip, r2, r0, lsl #14
   2ca80:	andeq	ip, r2, r0, lsl #14
   2ca84:	andeq	ip, r2, r0, lsl #14
   2ca88:	andeq	ip, r2, r0, lsl #14
   2ca8c:	andeq	ip, r2, r0, lsl #14
   2ca90:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca94:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca98:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca9c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2caa0:	andeq	fp, r2, ip, asr #22
   2caa4:	andeq	ip, r2, ip, lsl #5
   2caa8:	andeq	ip, r2, r0, lsl #14
   2caac:	andeq	ip, r2, r0, lsl #14
   2cab0:	andeq	ip, r2, r0, lsl #14
   2cab4:	andeq	ip, r2, r0, lsl #14
   2cab8:	andeq	ip, r2, r0, lsl #14
   2cabc:	andeq	ip, r2, r0, lsl #14
   2cac0:	andeq	ip, r2, r0, lsl #14
   2cac4:	andeq	ip, r2, r0, lsl #14
   2cac8:	andeq	ip, r2, r0, lsl #14
   2cacc:	andeq	ip, r2, r0, lsl #14
   2cad0:	andeq	ip, r2, r0, lsl #14
   2cad4:	andeq	ip, r2, r0, lsl #14
   2cad8:	andeq	ip, r2, r0, lsl #14
   2cadc:	andeq	ip, r2, r0, lsl #14
   2cae0:	andeq	ip, r2, r0, lsl #14
   2cae4:	andeq	ip, r2, r0, lsl #14
   2cae8:	andeq	ip, r2, r0, lsl #14
   2caec:	andeq	ip, r2, r0, lsl #14
   2caf0:	andeq	ip, r2, r0, lsl #14
   2caf4:	andeq	ip, r2, r0, lsl #14
   2caf8:	andeq	ip, r2, r0, lsl #14
   2cafc:	andeq	ip, r2, r0, lsl #14
   2cb00:	andeq	ip, r2, r0, lsl #14
   2cb04:	andeq	ip, r2, r0, lsl #14
   2cb08:	andeq	ip, r2, r0, lsl #14
   2cb0c:	andeq	ip, r2, r0, lsl #14
   2cb10:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cb14:	andeq	ip, r2, r4, lsl #1
   2cb18:	andeq	ip, r2, r0, lsl #14
   2cb1c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cb20:	andeq	ip, r2, r0, lsl #14
   2cb24:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cb28:	andeq	ip, r2, r0, lsl #14
   2cb2c:	andeq	ip, r2, r0, lsl #14
   2cb30:	andeq	ip, r2, r0, lsl #14
   2cb34:	andeq	ip, r2, r0, lsl #14
   2cb38:	andeq	ip, r2, r0, lsl #14
   2cb3c:	andeq	ip, r2, r0, lsl #14
   2cb40:	andeq	ip, r2, r0, lsl #14
   2cb44:	andeq	ip, r2, r0, lsl #14
   2cb48:	andeq	ip, r2, r0, lsl #14
   2cb4c:	andeq	ip, r2, r0, lsl #14
   2cb50:	andeq	ip, r2, r0, lsl #14
   2cb54:	andeq	ip, r2, r0, lsl #14
   2cb58:	andeq	ip, r2, r0, lsl #14
   2cb5c:	andeq	ip, r2, r0, lsl #14
   2cb60:	andeq	ip, r2, r0, lsl #14
   2cb64:	andeq	ip, r2, r0, lsl #14
   2cb68:	andeq	ip, r2, r0, lsl #14
   2cb6c:	andeq	ip, r2, r0, lsl #14
   2cb70:	andeq	ip, r2, r0, lsl #14
   2cb74:	andeq	ip, r2, r0, lsl #14
   2cb78:	andeq	ip, r2, r0, lsl #14
   2cb7c:	andeq	ip, r2, r0, lsl #14
   2cb80:	andeq	ip, r2, r0, lsl #14
   2cb84:	andeq	ip, r2, r0, lsl #14
   2cb88:	andeq	ip, r2, r0, lsl #14
   2cb8c:	andeq	ip, r2, r0, lsl #14
   2cb90:	andeq	ip, r2, r4, asr #2
   2cb94:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cb98:	andeq	ip, r2, r4, asr #2
   2cb9c:	muleq	r2, r4, r1
   2cba0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cba4:	strd	r6, [sp, #8]
   2cba8:	strd	r8, [sp, #16]
   2cbac:	strd	sl, [sp, #24]
   2cbb0:	str	lr, [sp, #32]
   2cbb4:	sub	sp, sp, #52	; 0x34
   2cbb8:	mov	r5, r0
   2cbbc:	str	r1, [sp, #24]
   2cbc0:	str	r2, [sp, #28]
   2cbc4:	mov	r4, r3
   2cbc8:	bl	12318 <__errno_location@plt>
   2cbcc:	str	r0, [sp, #32]
   2cbd0:	ldr	r3, [r0]
   2cbd4:	str	r3, [sp, #36]	; 0x24
   2cbd8:	movw	r3, #46320	; 0xb4f0
   2cbdc:	movt	r3, #5
   2cbe0:	ldr	r6, [r3]
   2cbe4:	cmn	r5, #-2147483647	; 0x80000001
   2cbe8:	movne	r3, #0
   2cbec:	moveq	r3, #1
   2cbf0:	orrs	r3, r3, r5, lsr #31
   2cbf4:	bne	2cd58 <__assert_fail@plt+0x1a794>
   2cbf8:	movw	r3, #46320	; 0xb4f0
   2cbfc:	movt	r3, #5
   2cc00:	ldr	r2, [r3, #4]
   2cc04:	cmp	r2, r5
   2cc08:	bgt	2cc78 <__assert_fail@plt+0x1a6b4>
   2cc0c:	str	r2, [sp, #44]	; 0x2c
   2cc10:	add	r3, r3, #8
   2cc14:	cmp	r6, r3
   2cc18:	beq	2cd5c <__assert_fail@plt+0x1a798>
   2cc1c:	sub	r2, r5, r2
   2cc20:	mov	r3, #8
   2cc24:	str	r3, [sp]
   2cc28:	mvn	r3, #-2147483648	; 0x80000000
   2cc2c:	add	r2, r2, #1
   2cc30:	add	r1, sp, #44	; 0x2c
   2cc34:	mov	r0, r6
   2cc38:	bl	2e594 <__assert_fail@plt+0x1bfd0>
   2cc3c:	mov	r6, r0
   2cc40:	movw	r3, #46320	; 0xb4f0
   2cc44:	movt	r3, #5
   2cc48:	str	r0, [r3]
   2cc4c:	movw	r7, #46320	; 0xb4f0
   2cc50:	movt	r7, #5
   2cc54:	ldr	r0, [r7, #4]
   2cc58:	ldr	r2, [sp, #44]	; 0x2c
   2cc5c:	sub	r2, r2, r0
   2cc60:	lsl	r2, r2, #3
   2cc64:	mov	r1, #0
   2cc68:	add	r0, r6, r0, lsl #3
   2cc6c:	bl	12348 <memset@plt>
   2cc70:	ldr	r3, [sp, #44]	; 0x2c
   2cc74:	str	r3, [r7, #4]
   2cc78:	add	fp, r6, r5, lsl #3
   2cc7c:	ldr	r8, [r6, r5, lsl #3]
   2cc80:	ldr	r7, [fp, #4]
   2cc84:	ldr	r3, [r4, #4]
   2cc88:	orr	r9, r3, #1
   2cc8c:	add	sl, r4, #8
   2cc90:	ldr	r3, [r4, #44]	; 0x2c
   2cc94:	str	r3, [sp, #16]
   2cc98:	ldr	r3, [r4, #40]	; 0x28
   2cc9c:	str	r3, [sp, #12]
   2cca0:	str	sl, [sp, #8]
   2cca4:	str	r9, [sp, #4]
   2cca8:	ldr	r3, [r4]
   2ccac:	str	r3, [sp]
   2ccb0:	ldr	r3, [sp, #28]
   2ccb4:	ldr	r2, [sp, #24]
   2ccb8:	mov	r1, r8
   2ccbc:	mov	r0, r7
   2ccc0:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2ccc4:	cmp	r8, r0
   2ccc8:	bhi	2cd2c <__assert_fail@plt+0x1a768>
   2cccc:	add	r8, r0, #1
   2ccd0:	str	r8, [r6, r5, lsl #3]
   2ccd4:	movw	r3, #48392	; 0xbd08
   2ccd8:	movt	r3, #5
   2ccdc:	cmp	r7, r3
   2cce0:	beq	2ccec <__assert_fail@plt+0x1a728>
   2cce4:	mov	r0, r7
   2cce8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2ccec:	mov	r0, r8
   2ccf0:	bl	2e390 <__assert_fail@plt+0x1bdcc>
   2ccf4:	mov	r7, r0
   2ccf8:	str	r0, [fp, #4]
   2ccfc:	ldr	r3, [r4, #44]	; 0x2c
   2cd00:	str	r3, [sp, #16]
   2cd04:	ldr	r3, [r4, #40]	; 0x28
   2cd08:	str	r3, [sp, #12]
   2cd0c:	str	sl, [sp, #8]
   2cd10:	str	r9, [sp, #4]
   2cd14:	ldr	r3, [r4]
   2cd18:	str	r3, [sp]
   2cd1c:	ldr	r3, [sp, #28]
   2cd20:	ldr	r2, [sp, #24]
   2cd24:	mov	r1, r8
   2cd28:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2cd2c:	ldr	r3, [sp, #32]
   2cd30:	ldr	r2, [sp, #36]	; 0x24
   2cd34:	str	r2, [r3]
   2cd38:	mov	r0, r7
   2cd3c:	add	sp, sp, #52	; 0x34
   2cd40:	ldrd	r4, [sp]
   2cd44:	ldrd	r6, [sp, #8]
   2cd48:	ldrd	r8, [sp, #16]
   2cd4c:	ldrd	sl, [sp, #24]
   2cd50:	add	sp, sp, #32
   2cd54:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd58:	bl	12570 <abort@plt>
   2cd5c:	sub	r2, r5, r2
   2cd60:	mov	r3, #8
   2cd64:	str	r3, [sp]
   2cd68:	mvn	r3, #-2147483648	; 0x80000000
   2cd6c:	add	r2, r2, #1
   2cd70:	add	r1, sp, #44	; 0x2c
   2cd74:	mov	r0, #0
   2cd78:	bl	2e594 <__assert_fail@plt+0x1bfd0>
   2cd7c:	mov	r6, r0
   2cd80:	movw	r3, #46320	; 0xb4f0
   2cd84:	movt	r3, #5
   2cd88:	str	r0, [r3]
   2cd8c:	ldrd	r2, [r3, #8]
   2cd90:	strd	r2, [r0]
   2cd94:	b	2cc4c <__assert_fail@plt+0x1a688>
   2cd98:	strd	r4, [sp, #-16]!
   2cd9c:	str	r6, [sp, #8]
   2cda0:	str	lr, [sp, #12]
   2cda4:	mov	r4, r0
   2cda8:	bl	12318 <__errno_location@plt>
   2cdac:	mov	r5, r0
   2cdb0:	ldr	r6, [r0]
   2cdb4:	cmp	r4, #0
   2cdb8:	ldr	r3, [pc, #32]	; 2cde0 <__assert_fail@plt+0x1a81c>
   2cdbc:	moveq	r4, r3
   2cdc0:	mov	r1, #48	; 0x30
   2cdc4:	mov	r0, r4
   2cdc8:	bl	2e704 <__assert_fail@plt+0x1c140>
   2cdcc:	str	r6, [r5]
   2cdd0:	ldrd	r4, [sp]
   2cdd4:	ldr	r6, [sp, #8]
   2cdd8:	add	sp, sp, #12
   2cddc:	pop	{pc}		; (ldr pc, [sp], #4)
   2cde0:	andeq	fp, r5, r8, lsl #28
   2cde4:	subs	r3, r0, #0
   2cde8:	ldr	r2, [pc, #8]	; 2cdf8 <__assert_fail@plt+0x1a834>
   2cdec:	moveq	r3, r2
   2cdf0:	ldr	r0, [r3]
   2cdf4:	bx	lr
   2cdf8:	andeq	fp, r5, r8, lsl #28
   2cdfc:	subs	r3, r0, #0
   2ce00:	ldr	r2, [pc, #8]	; 2ce10 <__assert_fail@plt+0x1a84c>
   2ce04:	moveq	r3, r2
   2ce08:	str	r1, [r3]
   2ce0c:	bx	lr
   2ce10:	andeq	fp, r5, r8, lsl #28
   2ce14:	push	{lr}		; (str lr, [sp, #-4]!)
   2ce18:	subs	r3, r0, #0
   2ce1c:	ldr	r0, [pc, #44]	; 2ce50 <__assert_fail@plt+0x1a88c>
   2ce20:	moveq	r3, r0
   2ce24:	add	r3, r3, #8
   2ce28:	lsr	lr, r1, #5
   2ce2c:	and	r1, r1, #31
   2ce30:	ldr	ip, [r3, lr, lsl #2]
   2ce34:	lsr	r0, ip, r1
   2ce38:	eor	r2, r2, r0
   2ce3c:	and	r2, r2, #1
   2ce40:	eor	r1, ip, r2, lsl r1
   2ce44:	str	r1, [r3, lr, lsl #2]
   2ce48:	and	r0, r0, #1
   2ce4c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce50:	andeq	fp, r5, r8, lsl #28
   2ce54:	subs	r3, r0, #0
   2ce58:	ldr	r2, [pc, #12]	; 2ce6c <__assert_fail@plt+0x1a8a8>
   2ce5c:	moveq	r3, r2
   2ce60:	ldr	r0, [r3, #4]
   2ce64:	str	r1, [r3, #4]
   2ce68:	bx	lr
   2ce6c:	andeq	fp, r5, r8, lsl #28
   2ce70:	subs	r3, r0, #0
   2ce74:	ldr	r0, [pc, #44]	; 2cea8 <__assert_fail@plt+0x1a8e4>
   2ce78:	moveq	r3, r0
   2ce7c:	mov	r0, #10
   2ce80:	str	r0, [r3]
   2ce84:	cmp	r2, #0
   2ce88:	cmpne	r1, #0
   2ce8c:	beq	2ce9c <__assert_fail@plt+0x1a8d8>
   2ce90:	str	r1, [r3, #40]	; 0x28
   2ce94:	str	r2, [r3, #44]	; 0x2c
   2ce98:	bx	lr
   2ce9c:	str	r4, [sp, #-8]!
   2cea0:	str	lr, [sp, #4]
   2cea4:	bl	12570 <abort@plt>
   2cea8:	andeq	fp, r5, r8, lsl #28
   2ceac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2ceb0:	strd	r6, [sp, #8]
   2ceb4:	strd	r8, [sp, #16]
   2ceb8:	str	sl, [sp, #24]
   2cebc:	str	lr, [sp, #28]
   2cec0:	sub	sp, sp, #24
   2cec4:	mov	r7, r0
   2cec8:	mov	r8, r1
   2cecc:	mov	r9, r2
   2ced0:	mov	sl, r3
   2ced4:	ldr	r4, [sp, #56]	; 0x38
   2ced8:	cmp	r4, #0
   2cedc:	ldr	r3, [pc, #104]	; 2cf4c <__assert_fail@plt+0x1a988>
   2cee0:	moveq	r4, r3
   2cee4:	bl	12318 <__errno_location@plt>
   2cee8:	mov	r5, r0
   2ceec:	ldr	r6, [r0]
   2cef0:	ldr	r3, [r4, #44]	; 0x2c
   2cef4:	str	r3, [sp, #16]
   2cef8:	ldr	r3, [r4, #40]	; 0x28
   2cefc:	str	r3, [sp, #12]
   2cf00:	add	r3, r4, #8
   2cf04:	str	r3, [sp, #8]
   2cf08:	ldr	r3, [r4, #4]
   2cf0c:	str	r3, [sp, #4]
   2cf10:	ldr	r3, [r4]
   2cf14:	str	r3, [sp]
   2cf18:	mov	r3, sl
   2cf1c:	mov	r2, r9
   2cf20:	mov	r1, r8
   2cf24:	mov	r0, r7
   2cf28:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2cf2c:	str	r6, [r5]
   2cf30:	add	sp, sp, #24
   2cf34:	ldrd	r4, [sp]
   2cf38:	ldrd	r6, [sp, #8]
   2cf3c:	ldrd	r8, [sp, #16]
   2cf40:	ldr	sl, [sp, #24]
   2cf44:	add	sp, sp, #28
   2cf48:	pop	{pc}		; (ldr pc, [sp], #4)
   2cf4c:	andeq	fp, r5, r8, lsl #28
   2cf50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cf54:	strd	r6, [sp, #8]
   2cf58:	strd	r8, [sp, #16]
   2cf5c:	strd	sl, [sp, #24]
   2cf60:	str	lr, [sp, #32]
   2cf64:	sub	sp, sp, #44	; 0x2c
   2cf68:	mov	r8, r0
   2cf6c:	mov	sl, r1
   2cf70:	mov	r6, r2
   2cf74:	subs	r4, r3, #0
   2cf78:	ldr	r3, [pc, #200]	; 2d048 <__assert_fail@plt+0x1aa84>
   2cf7c:	moveq	r4, r3
   2cf80:	bl	12318 <__errno_location@plt>
   2cf84:	mov	r7, r0
   2cf88:	ldr	fp, [r0]
   2cf8c:	ldr	r5, [r4, #4]
   2cf90:	cmp	r6, #0
   2cf94:	orreq	r5, r5, #1
   2cf98:	add	r9, r4, #8
   2cf9c:	ldr	r3, [r4, #44]	; 0x2c
   2cfa0:	str	r3, [sp, #16]
   2cfa4:	ldr	r3, [r4, #40]	; 0x28
   2cfa8:	str	r3, [sp, #12]
   2cfac:	str	r9, [sp, #8]
   2cfb0:	str	r5, [sp, #4]
   2cfb4:	ldr	r3, [r4]
   2cfb8:	str	r3, [sp]
   2cfbc:	str	sl, [sp, #36]	; 0x24
   2cfc0:	mov	r3, sl
   2cfc4:	str	r8, [sp, #32]
   2cfc8:	mov	r2, r8
   2cfcc:	mov	r1, #0
   2cfd0:	mov	r0, r1
   2cfd4:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2cfd8:	mov	sl, r0
   2cfdc:	add	r8, r0, #1
   2cfe0:	mov	r0, r8
   2cfe4:	bl	2e390 <__assert_fail@plt+0x1bdcc>
   2cfe8:	str	r0, [sp, #28]
   2cfec:	ldr	r3, [r4, #44]	; 0x2c
   2cff0:	str	r3, [sp, #16]
   2cff4:	ldr	r3, [r4, #40]	; 0x28
   2cff8:	str	r3, [sp, #12]
   2cffc:	str	r9, [sp, #8]
   2d000:	str	r5, [sp, #4]
   2d004:	ldr	r3, [r4]
   2d008:	str	r3, [sp]
   2d00c:	ldr	r3, [sp, #36]	; 0x24
   2d010:	ldr	r2, [sp, #32]
   2d014:	mov	r1, r8
   2d018:	bl	2b4a8 <__assert_fail@plt+0x18ee4>
   2d01c:	str	fp, [r7]
   2d020:	cmp	r6, #0
   2d024:	strne	sl, [r6]
   2d028:	ldr	r0, [sp, #28]
   2d02c:	add	sp, sp, #44	; 0x2c
   2d030:	ldrd	r4, [sp]
   2d034:	ldrd	r6, [sp, #8]
   2d038:	ldrd	r8, [sp, #16]
   2d03c:	ldrd	sl, [sp, #24]
   2d040:	add	sp, sp, #32
   2d044:	pop	{pc}		; (ldr pc, [sp], #4)
   2d048:	andeq	fp, r5, r8, lsl #28
   2d04c:	str	r4, [sp, #-8]!
   2d050:	str	lr, [sp, #4]
   2d054:	mov	r3, r2
   2d058:	mov	r2, #0
   2d05c:	bl	2cf50 <__assert_fail@plt+0x1a98c>
   2d060:	ldr	r4, [sp]
   2d064:	add	sp, sp, #4
   2d068:	pop	{pc}		; (ldr pc, [sp], #4)
   2d06c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d070:	strd	r6, [sp, #8]
   2d074:	str	r8, [sp, #16]
   2d078:	str	lr, [sp, #20]
   2d07c:	movw	r3, #46320	; 0xb4f0
   2d080:	movt	r3, #5
   2d084:	ldr	r7, [r3]
   2d088:	ldr	r3, [r3, #4]
   2d08c:	cmp	r3, #1
   2d090:	ble	2d0bc <__assert_fail@plt+0x1aaf8>
   2d094:	mov	r4, #1
   2d098:	add	r6, r7, #4
   2d09c:	movw	r5, #46320	; 0xb4f0
   2d0a0:	movt	r5, #5
   2d0a4:	ldr	r0, [r6, r4, lsl #3]
   2d0a8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2d0ac:	add	r4, r4, #1
   2d0b0:	ldr	r3, [r5, #4]
   2d0b4:	cmp	r3, r4
   2d0b8:	bgt	2d0a4 <__assert_fail@plt+0x1aae0>
   2d0bc:	ldr	r0, [r7, #4]
   2d0c0:	movw	r3, #48392	; 0xbd08
   2d0c4:	movt	r3, #5
   2d0c8:	cmp	r0, r3
   2d0cc:	beq	2d0f0 <__assert_fail@plt+0x1ab2c>
   2d0d0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2d0d4:	movw	r3, #46320	; 0xb4f0
   2d0d8:	movt	r3, #5
   2d0dc:	mov	r2, #256	; 0x100
   2d0e0:	str	r2, [r3, #8]
   2d0e4:	movw	r2, #48392	; 0xbd08
   2d0e8:	movt	r2, #5
   2d0ec:	str	r2, [r3, #12]
   2d0f0:	ldr	r3, [pc, #64]	; 2d138 <__assert_fail@plt+0x1ab74>
   2d0f4:	cmp	r7, r3
   2d0f8:	beq	2d114 <__assert_fail@plt+0x1ab50>
   2d0fc:	mov	r0, r7
   2d100:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2d104:	movw	r3, #46320	; 0xb4f0
   2d108:	movt	r3, #5
   2d10c:	add	r2, r3, #8
   2d110:	str	r2, [r3]
   2d114:	movw	r3, #46320	; 0xb4f0
   2d118:	movt	r3, #5
   2d11c:	mov	r2, #1
   2d120:	str	r2, [r3, #4]
   2d124:	ldrd	r4, [sp]
   2d128:	ldrd	r6, [sp, #8]
   2d12c:	ldr	r8, [sp, #16]
   2d130:	add	sp, sp, #20
   2d134:	pop	{pc}		; (ldr pc, [sp], #4)
   2d138:	strdeq	fp, [r5], -r8
   2d13c:	str	r4, [sp, #-8]!
   2d140:	str	lr, [sp, #4]
   2d144:	ldr	r3, [pc, #16]	; 2d15c <__assert_fail@plt+0x1ab98>
   2d148:	mvn	r2, #0
   2d14c:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d150:	ldr	r4, [sp]
   2d154:	add	sp, sp, #4
   2d158:	pop	{pc}		; (ldr pc, [sp], #4)
   2d15c:	andeq	fp, r5, r8, lsl #28
   2d160:	str	r4, [sp, #-8]!
   2d164:	str	lr, [sp, #4]
   2d168:	ldr	r3, [pc, #12]	; 2d17c <__assert_fail@plt+0x1abb8>
   2d16c:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d170:	ldr	r4, [sp]
   2d174:	add	sp, sp, #4
   2d178:	pop	{pc}		; (ldr pc, [sp], #4)
   2d17c:	andeq	fp, r5, r8, lsl #28
   2d180:	str	r4, [sp, #-8]!
   2d184:	str	lr, [sp, #4]
   2d188:	mov	r1, r0
   2d18c:	mov	r0, #0
   2d190:	bl	2d13c <__assert_fail@plt+0x1ab78>
   2d194:	ldr	r4, [sp]
   2d198:	add	sp, sp, #4
   2d19c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1a0:	str	r4, [sp, #-8]!
   2d1a4:	str	lr, [sp, #4]
   2d1a8:	mov	r2, r1
   2d1ac:	mov	r1, r0
   2d1b0:	mov	r0, #0
   2d1b4:	bl	2d160 <__assert_fail@plt+0x1ab9c>
   2d1b8:	ldr	r4, [sp]
   2d1bc:	add	sp, sp, #4
   2d1c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1c4:	strd	r4, [sp, #-12]!
   2d1c8:	str	lr, [sp, #8]
   2d1cc:	sub	sp, sp, #52	; 0x34
   2d1d0:	mov	r4, r0
   2d1d4:	mov	r5, r2
   2d1d8:	mov	r0, sp
   2d1dc:	bl	2b314 <__assert_fail@plt+0x18d50>
   2d1e0:	mov	r3, sp
   2d1e4:	mvn	r2, #0
   2d1e8:	mov	r1, r5
   2d1ec:	mov	r0, r4
   2d1f0:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d1f4:	add	sp, sp, #52	; 0x34
   2d1f8:	ldrd	r4, [sp]
   2d1fc:	add	sp, sp, #8
   2d200:	pop	{pc}		; (ldr pc, [sp], #4)
   2d204:	strd	r4, [sp, #-16]!
   2d208:	str	r6, [sp, #8]
   2d20c:	str	lr, [sp, #12]
   2d210:	sub	sp, sp, #48	; 0x30
   2d214:	mov	r4, r0
   2d218:	mov	r5, r2
   2d21c:	mov	r6, r3
   2d220:	mov	r0, sp
   2d224:	bl	2b314 <__assert_fail@plt+0x18d50>
   2d228:	mov	r3, sp
   2d22c:	mov	r2, r6
   2d230:	mov	r1, r5
   2d234:	mov	r0, r4
   2d238:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d23c:	add	sp, sp, #48	; 0x30
   2d240:	ldrd	r4, [sp]
   2d244:	ldr	r6, [sp, #8]
   2d248:	add	sp, sp, #12
   2d24c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d250:	str	r4, [sp, #-8]!
   2d254:	str	lr, [sp, #4]
   2d258:	mov	r2, r1
   2d25c:	mov	r1, r0
   2d260:	mov	r0, #0
   2d264:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   2d268:	ldr	r4, [sp]
   2d26c:	add	sp, sp, #4
   2d270:	pop	{pc}		; (ldr pc, [sp], #4)
   2d274:	str	r4, [sp, #-8]!
   2d278:	str	lr, [sp, #4]
   2d27c:	mov	r3, r2
   2d280:	mov	r2, r1
   2d284:	mov	r1, r0
   2d288:	mov	r0, #0
   2d28c:	bl	2d204 <__assert_fail@plt+0x1ac40>
   2d290:	ldr	r4, [sp]
   2d294:	add	sp, sp, #4
   2d298:	pop	{pc}		; (ldr pc, [sp], #4)
   2d29c:	strd	r4, [sp, #-12]!
   2d2a0:	str	lr, [sp, #8]
   2d2a4:	sub	sp, sp, #52	; 0x34
   2d2a8:	mov	r4, r0
   2d2ac:	mov	r5, r1
   2d2b0:	mov	r1, r2
   2d2b4:	ldr	r0, [pc, #92]	; 2d318 <__assert_fail@plt+0x1ad54>
   2d2b8:	ldrd	r2, [r0]
   2d2bc:	strd	r2, [sp]
   2d2c0:	ldrd	r2, [r0, #8]
   2d2c4:	strd	r2, [sp, #8]
   2d2c8:	ldrd	r2, [r0, #16]
   2d2cc:	strd	r2, [sp, #16]
   2d2d0:	ldrd	r2, [r0, #24]
   2d2d4:	strd	r2, [sp, #24]
   2d2d8:	ldrd	r2, [r0, #32]
   2d2dc:	strd	r2, [sp, #32]
   2d2e0:	ldrd	r2, [r0, #40]	; 0x28
   2d2e4:	strd	r2, [sp, #40]	; 0x28
   2d2e8:	mov	r2, #1
   2d2ec:	mov	r0, sp
   2d2f0:	bl	2ce14 <__assert_fail@plt+0x1a850>
   2d2f4:	mov	r3, sp
   2d2f8:	mov	r2, r5
   2d2fc:	mov	r1, r4
   2d300:	mov	r0, #0
   2d304:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d308:	add	sp, sp, #52	; 0x34
   2d30c:	ldrd	r4, [sp]
   2d310:	add	sp, sp, #8
   2d314:	pop	{pc}		; (ldr pc, [sp], #4)
   2d318:	andeq	fp, r5, r8, lsl #28
   2d31c:	str	r4, [sp, #-8]!
   2d320:	str	lr, [sp, #4]
   2d324:	mov	r2, r1
   2d328:	mvn	r1, #0
   2d32c:	bl	2d29c <__assert_fail@plt+0x1acd8>
   2d330:	ldr	r4, [sp]
   2d334:	add	sp, sp, #4
   2d338:	pop	{pc}		; (ldr pc, [sp], #4)
   2d33c:	str	r4, [sp, #-8]!
   2d340:	str	lr, [sp, #4]
   2d344:	mov	r1, #58	; 0x3a
   2d348:	bl	2d31c <__assert_fail@plt+0x1ad58>
   2d34c:	ldr	r4, [sp]
   2d350:	add	sp, sp, #4
   2d354:	pop	{pc}		; (ldr pc, [sp], #4)
   2d358:	str	r4, [sp, #-8]!
   2d35c:	str	lr, [sp, #4]
   2d360:	mov	r2, #58	; 0x3a
   2d364:	bl	2d29c <__assert_fail@plt+0x1acd8>
   2d368:	ldr	r4, [sp]
   2d36c:	add	sp, sp, #4
   2d370:	pop	{pc}		; (ldr pc, [sp], #4)
   2d374:	strd	r4, [sp, #-12]!
   2d378:	str	lr, [sp, #8]
   2d37c:	sub	sp, sp, #100	; 0x64
   2d380:	mov	r4, r0
   2d384:	mov	r5, r2
   2d388:	mov	r0, sp
   2d38c:	bl	2b314 <__assert_fail@plt+0x18d50>
   2d390:	ldrd	r2, [sp]
   2d394:	strd	r2, [sp, #48]	; 0x30
   2d398:	ldrd	r2, [sp, #8]
   2d39c:	strd	r2, [sp, #56]	; 0x38
   2d3a0:	ldrd	r2, [sp, #16]
   2d3a4:	strd	r2, [sp, #64]	; 0x40
   2d3a8:	ldrd	r2, [sp, #24]
   2d3ac:	strd	r2, [sp, #72]	; 0x48
   2d3b0:	ldrd	r2, [sp, #32]
   2d3b4:	strd	r2, [sp, #80]	; 0x50
   2d3b8:	ldrd	r2, [sp, #40]	; 0x28
   2d3bc:	strd	r2, [sp, #88]	; 0x58
   2d3c0:	mov	r2, #1
   2d3c4:	mov	r1, #58	; 0x3a
   2d3c8:	add	r0, sp, #48	; 0x30
   2d3cc:	bl	2ce14 <__assert_fail@plt+0x1a850>
   2d3d0:	add	r3, sp, #48	; 0x30
   2d3d4:	mvn	r2, #0
   2d3d8:	mov	r1, r5
   2d3dc:	mov	r0, r4
   2d3e0:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d3e4:	add	sp, sp, #100	; 0x64
   2d3e8:	ldrd	r4, [sp]
   2d3ec:	add	sp, sp, #8
   2d3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d3f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   2d3f8:	strd	r6, [sp, #8]
   2d3fc:	str	lr, [sp, #16]
   2d400:	sub	sp, sp, #52	; 0x34
   2d404:	mov	r4, r0
   2d408:	mov	r5, r3
   2d40c:	ldr	r3, [pc, #92]	; 2d470 <__assert_fail@plt+0x1aeac>
   2d410:	ldrd	r6, [r3]
   2d414:	strd	r6, [sp]
   2d418:	ldrd	r6, [r3, #8]
   2d41c:	strd	r6, [sp, #8]
   2d420:	ldrd	r6, [r3, #16]
   2d424:	strd	r6, [sp, #16]
   2d428:	ldrd	r6, [r3, #24]
   2d42c:	strd	r6, [sp, #24]
   2d430:	ldrd	r6, [r3, #32]
   2d434:	strd	r6, [sp, #32]
   2d438:	ldrd	r6, [r3, #40]	; 0x28
   2d43c:	strd	r6, [sp, #40]	; 0x28
   2d440:	mov	r0, sp
   2d444:	bl	2ce70 <__assert_fail@plt+0x1a8ac>
   2d448:	mov	r3, sp
   2d44c:	ldr	r2, [sp, #72]	; 0x48
   2d450:	mov	r1, r5
   2d454:	mov	r0, r4
   2d458:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d45c:	add	sp, sp, #52	; 0x34
   2d460:	ldrd	r4, [sp]
   2d464:	ldrd	r6, [sp, #8]
   2d468:	add	sp, sp, #16
   2d46c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d470:	andeq	fp, r5, r8, lsl #28
   2d474:	push	{lr}		; (str lr, [sp, #-4]!)
   2d478:	sub	sp, sp, #12
   2d47c:	mvn	ip, #0
   2d480:	str	ip, [sp]
   2d484:	bl	2d3f4 <__assert_fail@plt+0x1ae30>
   2d488:	add	sp, sp, #12
   2d48c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d490:	str	r4, [sp, #-8]!
   2d494:	str	lr, [sp, #4]
   2d498:	mov	r3, r2
   2d49c:	mov	r2, r1
   2d4a0:	mov	r1, r0
   2d4a4:	mov	r0, #0
   2d4a8:	bl	2d474 <__assert_fail@plt+0x1aeb0>
   2d4ac:	ldr	r4, [sp]
   2d4b0:	add	sp, sp, #4
   2d4b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4b8:	push	{lr}		; (str lr, [sp, #-4]!)
   2d4bc:	sub	sp, sp, #12
   2d4c0:	str	r3, [sp]
   2d4c4:	mov	r3, r2
   2d4c8:	mov	r2, r1
   2d4cc:	mov	r1, r0
   2d4d0:	mov	r0, #0
   2d4d4:	bl	2d3f4 <__assert_fail@plt+0x1ae30>
   2d4d8:	add	sp, sp, #12
   2d4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4e0:	str	r4, [sp, #-8]!
   2d4e4:	str	lr, [sp, #4]
   2d4e8:	ldr	r3, [pc, #12]	; 2d4fc <__assert_fail@plt+0x1af38>
   2d4ec:	bl	2cba0 <__assert_fail@plt+0x1a5dc>
   2d4f0:	ldr	r4, [sp]
   2d4f4:	add	sp, sp, #4
   2d4f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4fc:	andeq	fp, r5, r0, lsl #10
   2d500:	str	r4, [sp, #-8]!
   2d504:	str	lr, [sp, #4]
   2d508:	mov	r2, r1
   2d50c:	mov	r1, r0
   2d510:	mov	r0, #0
   2d514:	bl	2d4e0 <__assert_fail@plt+0x1af1c>
   2d518:	ldr	r4, [sp]
   2d51c:	add	sp, sp, #4
   2d520:	pop	{pc}		; (ldr pc, [sp], #4)
   2d524:	str	r4, [sp, #-8]!
   2d528:	str	lr, [sp, #4]
   2d52c:	mvn	r2, #0
   2d530:	bl	2d4e0 <__assert_fail@plt+0x1af1c>
   2d534:	ldr	r4, [sp]
   2d538:	add	sp, sp, #4
   2d53c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d540:	str	r4, [sp, #-8]!
   2d544:	str	lr, [sp, #4]
   2d548:	mov	r1, r0
   2d54c:	mov	r0, #0
   2d550:	bl	2d524 <__assert_fail@plt+0x1af60>
   2d554:	ldr	r4, [sp]
   2d558:	add	sp, sp, #4
   2d55c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d560:	str	r4, [sp, #-8]!
   2d564:	str	lr, [sp, #4]
   2d568:	mov	r4, r0
   2d56c:	mov	r3, #0
   2d570:	str	r3, [r0, #4]
   2d574:	mov	r1, #524288	; 0x80000
   2d578:	movw	r0, #29972	; 0x7514
   2d57c:	movt	r0, #4
   2d580:	bl	2300c <__assert_fail@plt+0x10a48>
   2d584:	str	r0, [r4]
   2d588:	cmp	r0, #0
   2d58c:	movge	r0, #0
   2d590:	blt	2d5a0 <__assert_fail@plt+0x1afdc>
   2d594:	ldr	r4, [sp]
   2d598:	add	sp, sp, #4
   2d59c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d5a0:	mov	r1, #0
   2d5a4:	mov	r0, r1
   2d5a8:	bl	12294 <getcwd@plt>
   2d5ac:	str	r0, [r4, #4]
   2d5b0:	clz	r0, r0
   2d5b4:	lsr	r0, r0, #5
   2d5b8:	rsb	r0, r0, #0
   2d5bc:	b	2d594 <__assert_fail@plt+0x1afd0>
   2d5c0:	str	r4, [sp, #-8]!
   2d5c4:	str	lr, [sp, #4]
   2d5c8:	ldr	r3, [r0]
   2d5cc:	cmp	r3, #0
   2d5d0:	blt	2d5e8 <__assert_fail@plt+0x1b024>
   2d5d4:	mov	r0, r3
   2d5d8:	bl	124c8 <fchdir@plt>
   2d5dc:	ldr	r4, [sp]
   2d5e0:	add	sp, sp, #4
   2d5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d5e8:	ldr	r0, [r0, #4]
   2d5ec:	bl	2f61c <__assert_fail@plt+0x1d058>
   2d5f0:	b	2d5dc <__assert_fail@plt+0x1b018>
   2d5f4:	str	r4, [sp, #-8]!
   2d5f8:	str	lr, [sp, #4]
   2d5fc:	mov	r4, r0
   2d600:	ldr	r0, [r0]
   2d604:	cmp	r0, #0
   2d608:	bge	2d620 <__assert_fail@plt+0x1b05c>
   2d60c:	ldr	r0, [r4, #4]
   2d610:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2d614:	ldr	r4, [sp]
   2d618:	add	sp, sp, #4
   2d61c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d620:	bl	1257c <close@plt>
   2d624:	b	2d60c <__assert_fail@plt+0x1b048>
   2d628:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2d62c:	strd	r6, [sp, #8]
   2d630:	strd	r8, [sp, #16]
   2d634:	str	sl, [sp, #24]
   2d638:	str	lr, [sp, #28]
   2d63c:	sub	sp, sp, #4032	; 0xfc0
   2d640:	mov	r5, r1
   2d644:	mov	r7, r2
   2d648:	cmn	r0, #100	; 0x64
   2d64c:	beq	2d740 <__assert_fail@plt+0x1b17c>
   2d650:	mov	r4, r0
   2d654:	ldrb	r3, [r1]
   2d658:	cmp	r3, #47	; 0x2f
   2d65c:	beq	2d740 <__assert_fail@plt+0x1b17c>
   2d660:	mov	r2, r1
   2d664:	mov	r1, r0
   2d668:	mov	r0, sp
   2d66c:	bl	419f4 <__assert_fail@plt+0x2f430>
   2d670:	subs	r8, r0, #0
   2d674:	beq	2d6d8 <__assert_fail@plt+0x1b114>
   2d678:	mov	r1, r7
   2d67c:	mov	r0, r8
   2d680:	bl	320dc <__assert_fail@plt+0x1fb18>
   2d684:	mov	r6, r0
   2d688:	bl	12318 <__errno_location@plt>
   2d68c:	mov	sl, r0
   2d690:	ldr	r9, [r0]
   2d694:	mov	r3, sp
   2d698:	cmp	r8, r3
   2d69c:	beq	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d6a0:	mov	r0, r8
   2d6a4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2d6a8:	cmn	r6, #1
   2d6ac:	bne	2d750 <__assert_fail@plt+0x1b18c>
   2d6b0:	cmp	r9, #20
   2d6b4:	beq	2d6d8 <__assert_fail@plt+0x1b114>
   2d6b8:	sub	r3, r9, #1
   2d6bc:	cmp	r9, #13
   2d6c0:	cmpne	r3, #1
   2d6c4:	bls	2d6d8 <__assert_fail@plt+0x1b114>
   2d6c8:	cmp	r9, #38	; 0x26
   2d6cc:	cmpne	r9, #95	; 0x5f
   2d6d0:	strne	r9, [sl]
   2d6d4:	bne	2d750 <__assert_fail@plt+0x1b18c>
   2d6d8:	mov	r0, sp
   2d6dc:	bl	2d560 <__assert_fail@plt+0x1af9c>
   2d6e0:	cmp	r0, #0
   2d6e4:	bne	2d770 <__assert_fail@plt+0x1b1ac>
   2d6e8:	cmp	r4, #0
   2d6ec:	blt	2d6fc <__assert_fail@plt+0x1b138>
   2d6f0:	ldr	r3, [sp]
   2d6f4:	cmp	r3, r4
   2d6f8:	beq	2d77c <__assert_fail@plt+0x1b1b8>
   2d6fc:	mov	r0, r4
   2d700:	bl	124c8 <fchdir@plt>
   2d704:	cmp	r0, #0
   2d708:	bne	2d798 <__assert_fail@plt+0x1b1d4>
   2d70c:	mov	r1, r7
   2d710:	mov	r0, r5
   2d714:	bl	320dc <__assert_fail@plt+0x1fb18>
   2d718:	mov	r6, r0
   2d71c:	cmn	r0, #1
   2d720:	beq	2d7b8 <__assert_fail@plt+0x1b1f4>
   2d724:	mov	r0, sp
   2d728:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2d72c:	cmp	r0, #0
   2d730:	bne	2d7e8 <__assert_fail@plt+0x1b224>
   2d734:	mov	r0, sp
   2d738:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d73c:	b	2d750 <__assert_fail@plt+0x1b18c>
   2d740:	mov	r1, r7
   2d744:	mov	r0, r5
   2d748:	bl	320dc <__assert_fail@plt+0x1fb18>
   2d74c:	mov	r6, r0
   2d750:	mov	r0, r6
   2d754:	add	sp, sp, #4032	; 0xfc0
   2d758:	ldrd	r4, [sp]
   2d75c:	ldrd	r6, [sp, #8]
   2d760:	ldrd	r8, [sp, #16]
   2d764:	ldr	sl, [sp, #24]
   2d768:	add	sp, sp, #28
   2d76c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d770:	bl	12318 <__errno_location@plt>
   2d774:	ldr	r0, [r0]
   2d778:	bl	274a0 <__assert_fail@plt+0x14edc>
   2d77c:	mov	r0, sp
   2d780:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d784:	bl	12318 <__errno_location@plt>
   2d788:	mov	r3, #9
   2d78c:	str	r3, [r0]
   2d790:	mvn	r6, #0
   2d794:	b	2d750 <__assert_fail@plt+0x1b18c>
   2d798:	bl	12318 <__errno_location@plt>
   2d79c:	mov	r4, r0
   2d7a0:	ldr	r5, [r0]
   2d7a4:	mov	r0, sp
   2d7a8:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d7ac:	str	r5, [r4]
   2d7b0:	mvn	r6, #0
   2d7b4:	b	2d750 <__assert_fail@plt+0x1b18c>
   2d7b8:	bl	12318 <__errno_location@plt>
   2d7bc:	mov	r5, r0
   2d7c0:	ldr	r4, [r0]
   2d7c4:	mov	r0, sp
   2d7c8:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2d7cc:	cmp	r0, #0
   2d7d0:	bne	2d7e8 <__assert_fail@plt+0x1b224>
   2d7d4:	mov	r0, sp
   2d7d8:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d7dc:	cmp	r4, #0
   2d7e0:	strne	r4, [r5]
   2d7e4:	b	2d750 <__assert_fail@plt+0x1b18c>
   2d7e8:	bl	12318 <__errno_location@plt>
   2d7ec:	ldr	r0, [r0]
   2d7f0:	bl	274e0 <__assert_fail@plt+0x14f1c>
   2d7f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2d7f8:	strd	r6, [sp, #8]
   2d7fc:	strd	r8, [sp, #16]
   2d800:	str	sl, [sp, #24]
   2d804:	str	lr, [sp, #28]
   2d808:	sub	sp, sp, #4032	; 0xfc0
   2d80c:	mov	r5, r1
   2d810:	mov	r7, r2
   2d814:	cmn	r0, #100	; 0x64
   2d818:	beq	2d90c <__assert_fail@plt+0x1b348>
   2d81c:	mov	r4, r0
   2d820:	ldrb	r3, [r1]
   2d824:	cmp	r3, #47	; 0x2f
   2d828:	beq	2d90c <__assert_fail@plt+0x1b348>
   2d82c:	mov	r2, r1
   2d830:	mov	r1, r0
   2d834:	mov	r0, sp
   2d838:	bl	419f4 <__assert_fail@plt+0x2f430>
   2d83c:	subs	r8, r0, #0
   2d840:	beq	2d8a4 <__assert_fail@plt+0x1b2e0>
   2d844:	mov	r1, r7
   2d848:	mov	r0, r8
   2d84c:	bl	32100 <__assert_fail@plt+0x1fb3c>
   2d850:	mov	r6, r0
   2d854:	bl	12318 <__errno_location@plt>
   2d858:	mov	sl, r0
   2d85c:	ldr	r9, [r0]
   2d860:	mov	r3, sp
   2d864:	cmp	r8, r3
   2d868:	beq	2d874 <__assert_fail@plt+0x1b2b0>
   2d86c:	mov	r0, r8
   2d870:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2d874:	cmn	r6, #1
   2d878:	bne	2d91c <__assert_fail@plt+0x1b358>
   2d87c:	cmp	r9, #20
   2d880:	beq	2d8a4 <__assert_fail@plt+0x1b2e0>
   2d884:	sub	r3, r9, #1
   2d888:	cmp	r9, #13
   2d88c:	cmpne	r3, #1
   2d890:	bls	2d8a4 <__assert_fail@plt+0x1b2e0>
   2d894:	cmp	r9, #38	; 0x26
   2d898:	cmpne	r9, #95	; 0x5f
   2d89c:	strne	r9, [sl]
   2d8a0:	bne	2d91c <__assert_fail@plt+0x1b358>
   2d8a4:	mov	r0, sp
   2d8a8:	bl	2d560 <__assert_fail@plt+0x1af9c>
   2d8ac:	cmp	r0, #0
   2d8b0:	bne	2d93c <__assert_fail@plt+0x1b378>
   2d8b4:	cmp	r4, #0
   2d8b8:	blt	2d8c8 <__assert_fail@plt+0x1b304>
   2d8bc:	ldr	r3, [sp]
   2d8c0:	cmp	r3, r4
   2d8c4:	beq	2d948 <__assert_fail@plt+0x1b384>
   2d8c8:	mov	r0, r4
   2d8cc:	bl	124c8 <fchdir@plt>
   2d8d0:	cmp	r0, #0
   2d8d4:	bne	2d964 <__assert_fail@plt+0x1b3a0>
   2d8d8:	mov	r1, r7
   2d8dc:	mov	r0, r5
   2d8e0:	bl	32100 <__assert_fail@plt+0x1fb3c>
   2d8e4:	mov	r6, r0
   2d8e8:	cmn	r0, #1
   2d8ec:	beq	2d984 <__assert_fail@plt+0x1b3c0>
   2d8f0:	mov	r0, sp
   2d8f4:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2d8f8:	cmp	r0, #0
   2d8fc:	bne	2d9b4 <__assert_fail@plt+0x1b3f0>
   2d900:	mov	r0, sp
   2d904:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d908:	b	2d91c <__assert_fail@plt+0x1b358>
   2d90c:	mov	r1, r7
   2d910:	mov	r0, r5
   2d914:	bl	32100 <__assert_fail@plt+0x1fb3c>
   2d918:	mov	r6, r0
   2d91c:	mov	r0, r6
   2d920:	add	sp, sp, #4032	; 0xfc0
   2d924:	ldrd	r4, [sp]
   2d928:	ldrd	r6, [sp, #8]
   2d92c:	ldrd	r8, [sp, #16]
   2d930:	ldr	sl, [sp, #24]
   2d934:	add	sp, sp, #28
   2d938:	pop	{pc}		; (ldr pc, [sp], #4)
   2d93c:	bl	12318 <__errno_location@plt>
   2d940:	ldr	r0, [r0]
   2d944:	bl	274a0 <__assert_fail@plt+0x14edc>
   2d948:	mov	r0, sp
   2d94c:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d950:	bl	12318 <__errno_location@plt>
   2d954:	mov	r3, #9
   2d958:	str	r3, [r0]
   2d95c:	mvn	r6, #0
   2d960:	b	2d91c <__assert_fail@plt+0x1b358>
   2d964:	bl	12318 <__errno_location@plt>
   2d968:	mov	r4, r0
   2d96c:	ldr	r5, [r0]
   2d970:	mov	r0, sp
   2d974:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d978:	str	r5, [r4]
   2d97c:	mvn	r6, #0
   2d980:	b	2d91c <__assert_fail@plt+0x1b358>
   2d984:	bl	12318 <__errno_location@plt>
   2d988:	mov	r5, r0
   2d98c:	ldr	r4, [r0]
   2d990:	mov	r0, sp
   2d994:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2d998:	cmp	r0, #0
   2d99c:	bne	2d9b4 <__assert_fail@plt+0x1b3f0>
   2d9a0:	mov	r0, sp
   2d9a4:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2d9a8:	cmp	r4, #0
   2d9ac:	strne	r4, [r5]
   2d9b0:	b	2d91c <__assert_fail@plt+0x1b358>
   2d9b4:	bl	12318 <__errno_location@plt>
   2d9b8:	ldr	r0, [r0]
   2d9bc:	bl	274e0 <__assert_fail@plt+0x14f1c>
   2d9c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2d9c4:	strd	r6, [sp, #8]
   2d9c8:	strd	r8, [sp, #16]
   2d9cc:	str	sl, [sp, #24]
   2d9d0:	str	lr, [sp, #28]
   2d9d4:	sub	sp, sp, #4032	; 0xfc0
   2d9d8:	mov	r5, r1
   2d9dc:	mov	r7, r2
   2d9e0:	cmn	r0, #100	; 0x64
   2d9e4:	beq	2dad8 <__assert_fail@plt+0x1b514>
   2d9e8:	mov	r4, r0
   2d9ec:	ldrb	r3, [r1]
   2d9f0:	cmp	r3, #47	; 0x2f
   2d9f4:	beq	2dad8 <__assert_fail@plt+0x1b514>
   2d9f8:	mov	r2, r1
   2d9fc:	mov	r1, r0
   2da00:	mov	r0, sp
   2da04:	bl	419f4 <__assert_fail@plt+0x2f430>
   2da08:	subs	r8, r0, #0
   2da0c:	beq	2da70 <__assert_fail@plt+0x1b4ac>
   2da10:	mov	r1, r7
   2da14:	mov	r0, r8
   2da18:	bl	123b4 <setfilecon@plt>
   2da1c:	mov	r6, r0
   2da20:	bl	12318 <__errno_location@plt>
   2da24:	mov	sl, r0
   2da28:	ldr	r9, [r0]
   2da2c:	mov	r3, sp
   2da30:	cmp	r8, r3
   2da34:	beq	2da40 <__assert_fail@plt+0x1b47c>
   2da38:	mov	r0, r8
   2da3c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2da40:	cmn	r6, #1
   2da44:	bne	2dae8 <__assert_fail@plt+0x1b524>
   2da48:	cmp	r9, #20
   2da4c:	beq	2da70 <__assert_fail@plt+0x1b4ac>
   2da50:	sub	r3, r9, #1
   2da54:	cmp	r9, #13
   2da58:	cmpne	r3, #1
   2da5c:	bls	2da70 <__assert_fail@plt+0x1b4ac>
   2da60:	cmp	r9, #38	; 0x26
   2da64:	cmpne	r9, #95	; 0x5f
   2da68:	strne	r9, [sl]
   2da6c:	bne	2dae8 <__assert_fail@plt+0x1b524>
   2da70:	mov	r0, sp
   2da74:	bl	2d560 <__assert_fail@plt+0x1af9c>
   2da78:	cmp	r0, #0
   2da7c:	bne	2db08 <__assert_fail@plt+0x1b544>
   2da80:	cmp	r4, #0
   2da84:	blt	2da94 <__assert_fail@plt+0x1b4d0>
   2da88:	ldr	r3, [sp]
   2da8c:	cmp	r3, r4
   2da90:	beq	2db14 <__assert_fail@plt+0x1b550>
   2da94:	mov	r0, r4
   2da98:	bl	124c8 <fchdir@plt>
   2da9c:	cmp	r0, #0
   2daa0:	bne	2db30 <__assert_fail@plt+0x1b56c>
   2daa4:	mov	r1, r7
   2daa8:	mov	r0, r5
   2daac:	bl	123b4 <setfilecon@plt>
   2dab0:	mov	r6, r0
   2dab4:	cmn	r0, #1
   2dab8:	beq	2db50 <__assert_fail@plt+0x1b58c>
   2dabc:	mov	r0, sp
   2dac0:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2dac4:	cmp	r0, #0
   2dac8:	bne	2db80 <__assert_fail@plt+0x1b5bc>
   2dacc:	mov	r0, sp
   2dad0:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2dad4:	b	2dae8 <__assert_fail@plt+0x1b524>
   2dad8:	mov	r1, r7
   2dadc:	mov	r0, r5
   2dae0:	bl	123b4 <setfilecon@plt>
   2dae4:	mov	r6, r0
   2dae8:	mov	r0, r6
   2daec:	add	sp, sp, #4032	; 0xfc0
   2daf0:	ldrd	r4, [sp]
   2daf4:	ldrd	r6, [sp, #8]
   2daf8:	ldrd	r8, [sp, #16]
   2dafc:	ldr	sl, [sp, #24]
   2db00:	add	sp, sp, #28
   2db04:	pop	{pc}		; (ldr pc, [sp], #4)
   2db08:	bl	12318 <__errno_location@plt>
   2db0c:	ldr	r0, [r0]
   2db10:	bl	274a0 <__assert_fail@plt+0x14edc>
   2db14:	mov	r0, sp
   2db18:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2db1c:	bl	12318 <__errno_location@plt>
   2db20:	mov	r3, #9
   2db24:	str	r3, [r0]
   2db28:	mvn	r6, #0
   2db2c:	b	2dae8 <__assert_fail@plt+0x1b524>
   2db30:	bl	12318 <__errno_location@plt>
   2db34:	mov	r4, r0
   2db38:	ldr	r5, [r0]
   2db3c:	mov	r0, sp
   2db40:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2db44:	str	r5, [r4]
   2db48:	mvn	r6, #0
   2db4c:	b	2dae8 <__assert_fail@plt+0x1b524>
   2db50:	bl	12318 <__errno_location@plt>
   2db54:	mov	r5, r0
   2db58:	ldr	r4, [r0]
   2db5c:	mov	r0, sp
   2db60:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2db64:	cmp	r0, #0
   2db68:	bne	2db80 <__assert_fail@plt+0x1b5bc>
   2db6c:	mov	r0, sp
   2db70:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2db74:	cmp	r4, #0
   2db78:	strne	r4, [r5]
   2db7c:	b	2dae8 <__assert_fail@plt+0x1b524>
   2db80:	bl	12318 <__errno_location@plt>
   2db84:	ldr	r0, [r0]
   2db88:	bl	274e0 <__assert_fail@plt+0x14f1c>
   2db8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2db90:	strd	r6, [sp, #8]
   2db94:	strd	r8, [sp, #16]
   2db98:	str	sl, [sp, #24]
   2db9c:	str	lr, [sp, #28]
   2dba0:	sub	sp, sp, #4032	; 0xfc0
   2dba4:	mov	r5, r1
   2dba8:	mov	r7, r2
   2dbac:	cmn	r0, #100	; 0x64
   2dbb0:	beq	2dca4 <__assert_fail@plt+0x1b6e0>
   2dbb4:	mov	r4, r0
   2dbb8:	ldrb	r3, [r1]
   2dbbc:	cmp	r3, #47	; 0x2f
   2dbc0:	beq	2dca4 <__assert_fail@plt+0x1b6e0>
   2dbc4:	mov	r2, r1
   2dbc8:	mov	r1, r0
   2dbcc:	mov	r0, sp
   2dbd0:	bl	419f4 <__assert_fail@plt+0x2f430>
   2dbd4:	subs	r8, r0, #0
   2dbd8:	beq	2dc3c <__assert_fail@plt+0x1b678>
   2dbdc:	mov	r1, r7
   2dbe0:	mov	r0, r8
   2dbe4:	bl	11f88 <lsetfilecon@plt>
   2dbe8:	mov	r6, r0
   2dbec:	bl	12318 <__errno_location@plt>
   2dbf0:	mov	sl, r0
   2dbf4:	ldr	r9, [r0]
   2dbf8:	mov	r3, sp
   2dbfc:	cmp	r8, r3
   2dc00:	beq	2dc0c <__assert_fail@plt+0x1b648>
   2dc04:	mov	r0, r8
   2dc08:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2dc0c:	cmn	r6, #1
   2dc10:	bne	2dcb4 <__assert_fail@plt+0x1b6f0>
   2dc14:	cmp	r9, #20
   2dc18:	beq	2dc3c <__assert_fail@plt+0x1b678>
   2dc1c:	sub	r3, r9, #1
   2dc20:	cmp	r9, #13
   2dc24:	cmpne	r3, #1
   2dc28:	bls	2dc3c <__assert_fail@plt+0x1b678>
   2dc2c:	cmp	r9, #38	; 0x26
   2dc30:	cmpne	r9, #95	; 0x5f
   2dc34:	strne	r9, [sl]
   2dc38:	bne	2dcb4 <__assert_fail@plt+0x1b6f0>
   2dc3c:	mov	r0, sp
   2dc40:	bl	2d560 <__assert_fail@plt+0x1af9c>
   2dc44:	cmp	r0, #0
   2dc48:	bne	2dcd4 <__assert_fail@plt+0x1b710>
   2dc4c:	cmp	r4, #0
   2dc50:	blt	2dc60 <__assert_fail@plt+0x1b69c>
   2dc54:	ldr	r3, [sp]
   2dc58:	cmp	r3, r4
   2dc5c:	beq	2dce0 <__assert_fail@plt+0x1b71c>
   2dc60:	mov	r0, r4
   2dc64:	bl	124c8 <fchdir@plt>
   2dc68:	cmp	r0, #0
   2dc6c:	bne	2dcfc <__assert_fail@plt+0x1b738>
   2dc70:	mov	r1, r7
   2dc74:	mov	r0, r5
   2dc78:	bl	11f88 <lsetfilecon@plt>
   2dc7c:	mov	r6, r0
   2dc80:	cmn	r0, #1
   2dc84:	beq	2dd1c <__assert_fail@plt+0x1b758>
   2dc88:	mov	r0, sp
   2dc8c:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2dc90:	cmp	r0, #0
   2dc94:	bne	2dd4c <__assert_fail@plt+0x1b788>
   2dc98:	mov	r0, sp
   2dc9c:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2dca0:	b	2dcb4 <__assert_fail@plt+0x1b6f0>
   2dca4:	mov	r1, r7
   2dca8:	mov	r0, r5
   2dcac:	bl	11f88 <lsetfilecon@plt>
   2dcb0:	mov	r6, r0
   2dcb4:	mov	r0, r6
   2dcb8:	add	sp, sp, #4032	; 0xfc0
   2dcbc:	ldrd	r4, [sp]
   2dcc0:	ldrd	r6, [sp, #8]
   2dcc4:	ldrd	r8, [sp, #16]
   2dcc8:	ldr	sl, [sp, #24]
   2dccc:	add	sp, sp, #28
   2dcd0:	pop	{pc}		; (ldr pc, [sp], #4)
   2dcd4:	bl	12318 <__errno_location@plt>
   2dcd8:	ldr	r0, [r0]
   2dcdc:	bl	274a0 <__assert_fail@plt+0x14edc>
   2dce0:	mov	r0, sp
   2dce4:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2dce8:	bl	12318 <__errno_location@plt>
   2dcec:	mov	r3, #9
   2dcf0:	str	r3, [r0]
   2dcf4:	mvn	r6, #0
   2dcf8:	b	2dcb4 <__assert_fail@plt+0x1b6f0>
   2dcfc:	bl	12318 <__errno_location@plt>
   2dd00:	mov	r4, r0
   2dd04:	ldr	r5, [r0]
   2dd08:	mov	r0, sp
   2dd0c:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2dd10:	str	r5, [r4]
   2dd14:	mvn	r6, #0
   2dd18:	b	2dcb4 <__assert_fail@plt+0x1b6f0>
   2dd1c:	bl	12318 <__errno_location@plt>
   2dd20:	mov	r5, r0
   2dd24:	ldr	r4, [r0]
   2dd28:	mov	r0, sp
   2dd2c:	bl	2d5c0 <__assert_fail@plt+0x1affc>
   2dd30:	cmp	r0, #0
   2dd34:	bne	2dd4c <__assert_fail@plt+0x1b788>
   2dd38:	mov	r0, sp
   2dd3c:	bl	2d5f4 <__assert_fail@plt+0x1b030>
   2dd40:	cmp	r4, #0
   2dd44:	strne	r4, [r5]
   2dd48:	b	2dcb4 <__assert_fail@plt+0x1b6f0>
   2dd4c:	bl	12318 <__errno_location@plt>
   2dd50:	ldr	r0, [r0]
   2dd54:	bl	274e0 <__assert_fail@plt+0x14f1c>
   2dd58:	strd	r4, [sp, #-16]!
   2dd5c:	str	r6, [sp, #8]
   2dd60:	str	lr, [sp, #12]
   2dd64:	mov	r5, r0
   2dd68:	mov	r4, r1
   2dd6c:	mov	r2, r1
   2dd70:	mov	r1, #0
   2dd74:	bl	123a8 <memchr@plt>
   2dd78:	cmp	r0, #0
   2dd7c:	subne	r0, r0, r5
   2dd80:	addne	r0, r0, #1
   2dd84:	moveq	r0, r4
   2dd88:	ldrd	r4, [sp]
   2dd8c:	ldr	r6, [sp, #8]
   2dd90:	add	sp, sp, #12
   2dd94:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd98:	str	r4, [sp, #-8]!
   2dd9c:	str	lr, [sp, #4]
   2dda0:	mov	r2, #3
   2dda4:	mov	r1, #0
   2dda8:	bl	2f8cc <__assert_fail@plt+0x1d308>
   2ddac:	ldr	r4, [sp]
   2ddb0:	add	sp, sp, #4
   2ddb4:	pop	{pc}		; (ldr pc, [sp], #4)
   2ddb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ddbc:	strd	r6, [sp, #8]
   2ddc0:	str	r8, [sp, #16]
   2ddc4:	str	lr, [sp, #20]
   2ddc8:	mov	r4, r0
   2ddcc:	cmp	r0, #2
   2ddd0:	bls	2ddec <__assert_fail@plt+0x1b828>
   2ddd4:	mov	r0, r4
   2ddd8:	ldrd	r4, [sp]
   2dddc:	ldrd	r6, [sp, #8]
   2dde0:	ldr	r8, [sp, #16]
   2dde4:	add	sp, sp, #20
   2dde8:	pop	{pc}		; (ldr pc, [sp], #4)
   2ddec:	bl	2dd98 <__assert_fail@plt+0x1b7d4>
   2ddf0:	mov	r6, r0
   2ddf4:	bl	12318 <__errno_location@plt>
   2ddf8:	mov	r5, r0
   2ddfc:	ldr	r7, [r0]
   2de00:	mov	r0, r4
   2de04:	bl	1257c <close@plt>
   2de08:	str	r7, [r5]
   2de0c:	mov	r4, r6
   2de10:	b	2ddd4 <__assert_fail@plt+0x1b810>
   2de14:	strd	r4, [sp, #-16]!
   2de18:	str	r6, [sp, #8]
   2de1c:	str	lr, [sp, #12]
   2de20:	sub	sp, sp, #32
   2de24:	mov	r4, r0
   2de28:	ldr	r5, [sp, #48]	; 0x30
   2de2c:	ldr	r6, [sp, #52]	; 0x34
   2de30:	cmp	r1, #0
   2de34:	beq	2def0 <__assert_fail@plt+0x1b92c>
   2de38:	str	r3, [sp]
   2de3c:	mov	r3, r2
   2de40:	mov	r2, r1
   2de44:	movw	r1, #40492	; 0x9e2c
   2de48:	movt	r1, #4
   2de4c:	bl	1230c <fprintf@plt>
   2de50:	mov	r2, #5
   2de54:	movw	r1, #40512	; 0x9e40
   2de58:	movt	r1, #4
   2de5c:	mov	r0, #0
   2de60:	bl	12084 <dcgettext@plt>
   2de64:	movw	r3, #2022	; 0x7e6
   2de68:	mov	r2, r0
   2de6c:	movw	r1, #41216	; 0xa100
   2de70:	movt	r1, #4
   2de74:	mov	r0, r4
   2de78:	bl	1230c <fprintf@plt>
   2de7c:	mov	r1, r4
   2de80:	mov	r0, #10
   2de84:	bl	1245c <fputc@plt>
   2de88:	mov	r2, #5
   2de8c:	movw	r1, #40516	; 0x9e44
   2de90:	movt	r1, #4
   2de94:	mov	r0, #0
   2de98:	bl	12084 <dcgettext@plt>
   2de9c:	movw	r2, #40688	; 0x9ef0
   2dea0:	movt	r2, #4
   2dea4:	mov	r1, r0
   2dea8:	mov	r0, r4
   2deac:	bl	1230c <fprintf@plt>
   2deb0:	mov	r1, r4
   2deb4:	mov	r0, #10
   2deb8:	bl	1245c <fputc@plt>
   2debc:	cmp	r6, #9
   2dec0:	ldrls	pc, [pc, r6, lsl #2]
   2dec4:	b	2e178 <__assert_fail@plt+0x1bbb4>
   2dec8:	andeq	sp, r2, r4, lsr #30
   2decc:	andeq	sp, r2, r0, lsl #30
   2ded0:	andeq	sp, r2, r8, lsr pc
   2ded4:	andeq	sp, r2, r4, ror #30
   2ded8:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   2dedc:	ldrdeq	sp, [r2], -r4
   2dee0:	andeq	lr, r2, r8, lsl r0
   2dee4:	andeq	lr, r2, r4, rrx
   2dee8:	strheq	lr, [r2], -r8
   2deec:	andeq	lr, r2, r4, lsl r1
   2def0:	movw	r1, #40504	; 0x9e38
   2def4:	movt	r1, #4
   2def8:	bl	1230c <fprintf@plt>
   2defc:	b	2de50 <__assert_fail@plt+0x1b88c>
   2df00:	mov	r2, #5
   2df04:	movw	r1, #40724	; 0x9f14
   2df08:	movt	r1, #4
   2df0c:	mov	r0, #0
   2df10:	bl	12084 <dcgettext@plt>
   2df14:	ldr	r2, [r5]
   2df18:	mov	r1, r0
   2df1c:	mov	r0, r4
   2df20:	bl	1230c <fprintf@plt>
   2df24:	add	sp, sp, #32
   2df28:	ldrd	r4, [sp]
   2df2c:	ldr	r6, [sp, #8]
   2df30:	add	sp, sp, #12
   2df34:	pop	{pc}		; (ldr pc, [sp], #4)
   2df38:	mov	r2, #5
   2df3c:	movw	r1, #40740	; 0x9f24
   2df40:	movt	r1, #4
   2df44:	mov	r0, #0
   2df48:	bl	12084 <dcgettext@plt>
   2df4c:	ldr	r3, [r5, #4]
   2df50:	ldr	r2, [r5]
   2df54:	mov	r1, r0
   2df58:	mov	r0, r4
   2df5c:	bl	1230c <fprintf@plt>
   2df60:	b	2df24 <__assert_fail@plt+0x1b960>
   2df64:	mov	r2, #5
   2df68:	movw	r1, #40764	; 0x9f3c
   2df6c:	movt	r1, #4
   2df70:	mov	r0, #0
   2df74:	bl	12084 <dcgettext@plt>
   2df78:	ldr	r3, [r5, #8]
   2df7c:	str	r3, [sp]
   2df80:	ldr	r3, [r5, #4]
   2df84:	ldr	r2, [r5]
   2df88:	mov	r1, r0
   2df8c:	mov	r0, r4
   2df90:	bl	1230c <fprintf@plt>
   2df94:	b	2df24 <__assert_fail@plt+0x1b960>
   2df98:	mov	r2, #5
   2df9c:	movw	r1, #40792	; 0x9f58
   2dfa0:	movt	r1, #4
   2dfa4:	mov	r0, #0
   2dfa8:	bl	12084 <dcgettext@plt>
   2dfac:	ldr	r3, [r5, #12]
   2dfb0:	str	r3, [sp, #4]
   2dfb4:	ldr	r3, [r5, #8]
   2dfb8:	str	r3, [sp]
   2dfbc:	ldr	r3, [r5, #4]
   2dfc0:	ldr	r2, [r5]
   2dfc4:	mov	r1, r0
   2dfc8:	mov	r0, r4
   2dfcc:	bl	1230c <fprintf@plt>
   2dfd0:	b	2df24 <__assert_fail@plt+0x1b960>
   2dfd4:	mov	r2, #5
   2dfd8:	movw	r1, #40824	; 0x9f78
   2dfdc:	movt	r1, #4
   2dfe0:	mov	r0, #0
   2dfe4:	bl	12084 <dcgettext@plt>
   2dfe8:	ldr	r3, [r5, #16]
   2dfec:	str	r3, [sp, #8]
   2dff0:	ldr	r3, [r5, #12]
   2dff4:	str	r3, [sp, #4]
   2dff8:	ldr	r3, [r5, #8]
   2dffc:	str	r3, [sp]
   2e000:	ldr	r3, [r5, #4]
   2e004:	ldr	r2, [r5]
   2e008:	mov	r1, r0
   2e00c:	mov	r0, r4
   2e010:	bl	1230c <fprintf@plt>
   2e014:	b	2df24 <__assert_fail@plt+0x1b960>
   2e018:	mov	r2, #5
   2e01c:	movw	r1, #40860	; 0x9f9c
   2e020:	movt	r1, #4
   2e024:	mov	r0, #0
   2e028:	bl	12084 <dcgettext@plt>
   2e02c:	ldr	r3, [r5, #20]
   2e030:	str	r3, [sp, #12]
   2e034:	ldr	r3, [r5, #16]
   2e038:	str	r3, [sp, #8]
   2e03c:	ldr	r3, [r5, #12]
   2e040:	str	r3, [sp, #4]
   2e044:	ldr	r3, [r5, #8]
   2e048:	str	r3, [sp]
   2e04c:	ldr	r3, [r5, #4]
   2e050:	ldr	r2, [r5]
   2e054:	mov	r1, r0
   2e058:	mov	r0, r4
   2e05c:	bl	1230c <fprintf@plt>
   2e060:	b	2df24 <__assert_fail@plt+0x1b960>
   2e064:	mov	r2, #5
   2e068:	movw	r1, #40900	; 0x9fc4
   2e06c:	movt	r1, #4
   2e070:	mov	r0, #0
   2e074:	bl	12084 <dcgettext@plt>
   2e078:	ldr	r3, [r5, #24]
   2e07c:	str	r3, [sp, #16]
   2e080:	ldr	r3, [r5, #20]
   2e084:	str	r3, [sp, #12]
   2e088:	ldr	r3, [r5, #16]
   2e08c:	str	r3, [sp, #8]
   2e090:	ldr	r3, [r5, #12]
   2e094:	str	r3, [sp, #4]
   2e098:	ldr	r3, [r5, #8]
   2e09c:	str	r3, [sp]
   2e0a0:	ldr	r3, [r5, #4]
   2e0a4:	ldr	r2, [r5]
   2e0a8:	mov	r1, r0
   2e0ac:	mov	r0, r4
   2e0b0:	bl	1230c <fprintf@plt>
   2e0b4:	b	2df24 <__assert_fail@plt+0x1b960>
   2e0b8:	mov	r2, #5
   2e0bc:	movw	r1, #40944	; 0x9ff0
   2e0c0:	movt	r1, #4
   2e0c4:	mov	r0, #0
   2e0c8:	bl	12084 <dcgettext@plt>
   2e0cc:	ldr	r3, [r5, #28]
   2e0d0:	str	r3, [sp, #20]
   2e0d4:	ldr	r3, [r5, #24]
   2e0d8:	str	r3, [sp, #16]
   2e0dc:	ldr	r3, [r5, #20]
   2e0e0:	str	r3, [sp, #12]
   2e0e4:	ldr	r3, [r5, #16]
   2e0e8:	str	r3, [sp, #8]
   2e0ec:	ldr	r3, [r5, #12]
   2e0f0:	str	r3, [sp, #4]
   2e0f4:	ldr	r3, [r5, #8]
   2e0f8:	str	r3, [sp]
   2e0fc:	ldr	r3, [r5, #4]
   2e100:	ldr	r2, [r5]
   2e104:	mov	r1, r0
   2e108:	mov	r0, r4
   2e10c:	bl	1230c <fprintf@plt>
   2e110:	b	2df24 <__assert_fail@plt+0x1b960>
   2e114:	mov	r2, #5
   2e118:	movw	r1, #40992	; 0xa020
   2e11c:	movt	r1, #4
   2e120:	mov	r0, #0
   2e124:	bl	12084 <dcgettext@plt>
   2e128:	ldr	r3, [r5, #32]
   2e12c:	str	r3, [sp, #24]
   2e130:	ldr	r3, [r5, #28]
   2e134:	str	r3, [sp, #20]
   2e138:	ldr	r3, [r5, #24]
   2e13c:	str	r3, [sp, #16]
   2e140:	ldr	r3, [r5, #20]
   2e144:	str	r3, [sp, #12]
   2e148:	ldr	r3, [r5, #16]
   2e14c:	str	r3, [sp, #8]
   2e150:	ldr	r3, [r5, #12]
   2e154:	str	r3, [sp, #4]
   2e158:	ldr	r3, [r5, #8]
   2e15c:	str	r3, [sp]
   2e160:	ldr	r3, [r5, #4]
   2e164:	ldr	r2, [r5]
   2e168:	mov	r1, r0
   2e16c:	mov	r0, r4
   2e170:	bl	1230c <fprintf@plt>
   2e174:	b	2df24 <__assert_fail@plt+0x1b960>
   2e178:	mov	r2, #5
   2e17c:	movw	r1, #41044	; 0xa054
   2e180:	movt	r1, #4
   2e184:	mov	r0, #0
   2e188:	bl	12084 <dcgettext@plt>
   2e18c:	ldr	r3, [r5, #32]
   2e190:	str	r3, [sp, #24]
   2e194:	ldr	r3, [r5, #28]
   2e198:	str	r3, [sp, #20]
   2e19c:	ldr	r3, [r5, #24]
   2e1a0:	str	r3, [sp, #16]
   2e1a4:	ldr	r3, [r5, #20]
   2e1a8:	str	r3, [sp, #12]
   2e1ac:	ldr	r3, [r5, #16]
   2e1b0:	str	r3, [sp, #8]
   2e1b4:	ldr	r3, [r5, #12]
   2e1b8:	str	r3, [sp, #4]
   2e1bc:	ldr	r3, [r5, #8]
   2e1c0:	str	r3, [sp]
   2e1c4:	ldr	r3, [r5, #4]
   2e1c8:	ldr	r2, [r5]
   2e1cc:	mov	r1, r0
   2e1d0:	mov	r0, r4
   2e1d4:	bl	1230c <fprintf@plt>
   2e1d8:	b	2df24 <__assert_fail@plt+0x1b960>
   2e1dc:	strd	r4, [sp, #-12]!
   2e1e0:	str	lr, [sp, #8]
   2e1e4:	sub	sp, sp, #12
   2e1e8:	ldr	r5, [sp, #24]
   2e1ec:	ldr	ip, [r5]
   2e1f0:	cmp	ip, #0
   2e1f4:	beq	2e22c <__assert_fail@plt+0x1bc68>
   2e1f8:	mov	lr, r5
   2e1fc:	mov	ip, #0
   2e200:	add	ip, ip, #1
   2e204:	ldr	r4, [lr, #4]!
   2e208:	cmp	r4, #0
   2e20c:	bne	2e200 <__assert_fail@plt+0x1bc3c>
   2e210:	str	ip, [sp, #4]
   2e214:	str	r5, [sp]
   2e218:	bl	2de14 <__assert_fail@plt+0x1b850>
   2e21c:	add	sp, sp, #12
   2e220:	ldrd	r4, [sp]
   2e224:	add	sp, sp, #8
   2e228:	pop	{pc}		; (ldr pc, [sp], #4)
   2e22c:	mov	ip, #0
   2e230:	b	2e210 <__assert_fail@plt+0x1bc4c>
   2e234:	strd	r4, [sp, #-12]!
   2e238:	str	lr, [sp, #8]
   2e23c:	sub	sp, sp, #52	; 0x34
   2e240:	ldr	r5, [sp, #64]	; 0x40
   2e244:	add	r4, sp, #8
   2e248:	mov	ip, #0
   2e24c:	ldr	lr, [r5], #4
   2e250:	str	lr, [r4], #4
   2e254:	cmp	lr, #0
   2e258:	beq	2e268 <__assert_fail@plt+0x1bca4>
   2e25c:	add	ip, ip, #1
   2e260:	cmp	ip, #10
   2e264:	bne	2e24c <__assert_fail@plt+0x1bc88>
   2e268:	str	ip, [sp, #4]
   2e26c:	add	ip, sp, #8
   2e270:	str	ip, [sp]
   2e274:	bl	2de14 <__assert_fail@plt+0x1b850>
   2e278:	add	sp, sp, #52	; 0x34
   2e27c:	ldrd	r4, [sp]
   2e280:	add	sp, sp, #8
   2e284:	pop	{pc}		; (ldr pc, [sp], #4)
   2e288:	push	{r3}		; (str r3, [sp, #-4]!)
   2e28c:	push	{lr}		; (str lr, [sp, #-4]!)
   2e290:	sub	sp, sp, #16
   2e294:	add	r3, sp, #24
   2e298:	str	r3, [sp, #12]
   2e29c:	str	r3, [sp]
   2e2a0:	ldr	r3, [sp, #20]
   2e2a4:	bl	2e234 <__assert_fail@plt+0x1bc70>
   2e2a8:	add	sp, sp, #16
   2e2ac:	pop	{lr}		; (ldr lr, [sp], #4)
   2e2b0:	add	sp, sp, #4
   2e2b4:	bx	lr
   2e2b8:	str	r4, [sp, #-8]!
   2e2bc:	str	lr, [sp, #4]
   2e2c0:	movw	r3, #46420	; 0xb554
   2e2c4:	movt	r3, #5
   2e2c8:	ldr	r1, [r3]
   2e2cc:	mov	r0, #10
   2e2d0:	bl	1245c <fputc@plt>
   2e2d4:	mov	r2, #5
   2e2d8:	movw	r1, #41104	; 0xa090
   2e2dc:	movt	r1, #4
   2e2e0:	mov	r0, #0
   2e2e4:	bl	12084 <dcgettext@plt>
   2e2e8:	movw	r1, #35872	; 0x8c20
   2e2ec:	movt	r1, #4
   2e2f0:	bl	11f40 <printf@plt>
   2e2f4:	mov	r2, #5
   2e2f8:	movw	r1, #41124	; 0xa0a4
   2e2fc:	movt	r1, #4
   2e300:	mov	r0, #0
   2e304:	bl	12084 <dcgettext@plt>
   2e308:	movw	r2, #35832	; 0x8bf8
   2e30c:	movt	r2, #4
   2e310:	movw	r1, #35032	; 0x88d8
   2e314:	movt	r1, #4
   2e318:	bl	11f40 <printf@plt>
   2e31c:	mov	r2, #5
   2e320:	movw	r1, #41144	; 0xa0b8
   2e324:	movt	r1, #4
   2e328:	mov	r0, #0
   2e32c:	bl	12084 <dcgettext@plt>
   2e330:	movw	r1, #41184	; 0xa0e0
   2e334:	movt	r1, #4
   2e338:	bl	11f40 <printf@plt>
   2e33c:	ldr	r4, [sp]
   2e340:	add	sp, sp, #4
   2e344:	pop	{pc}		; (ldr pc, [sp], #4)
   2e348:	str	r4, [sp, #-8]!
   2e34c:	str	lr, [sp, #4]
   2e350:	bl	32148 <__assert_fail@plt+0x1fb84>
   2e354:	cmp	r0, #0
   2e358:	beq	2e368 <__assert_fail@plt+0x1bda4>
   2e35c:	ldr	r4, [sp]
   2e360:	add	sp, sp, #4
   2e364:	pop	{pc}		; (ldr pc, [sp], #4)
   2e368:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e36c:	str	r4, [sp, #-8]!
   2e370:	str	lr, [sp, #4]
   2e374:	bl	32148 <__assert_fail@plt+0x1fb84>
   2e378:	cmp	r0, #0
   2e37c:	beq	2e38c <__assert_fail@plt+0x1bdc8>
   2e380:	ldr	r4, [sp]
   2e384:	add	sp, sp, #4
   2e388:	pop	{pc}		; (ldr pc, [sp], #4)
   2e38c:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e390:	str	r4, [sp, #-8]!
   2e394:	str	lr, [sp, #4]
   2e398:	bl	2e348 <__assert_fail@plt+0x1bd84>
   2e39c:	ldr	r4, [sp]
   2e3a0:	add	sp, sp, #4
   2e3a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e3a8:	strd	r4, [sp, #-16]!
   2e3ac:	str	r6, [sp, #8]
   2e3b0:	str	lr, [sp, #12]
   2e3b4:	mov	r5, r0
   2e3b8:	mov	r4, r1
   2e3bc:	bl	32ce0 <__assert_fail@plt+0x2071c>
   2e3c0:	cmp	r0, #0
   2e3c4:	beq	2e3d8 <__assert_fail@plt+0x1be14>
   2e3c8:	ldrd	r4, [sp]
   2e3cc:	ldr	r6, [sp, #8]
   2e3d0:	add	sp, sp, #12
   2e3d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e3d8:	adds	r4, r4, #0
   2e3dc:	movne	r4, #1
   2e3e0:	cmp	r5, #0
   2e3e4:	moveq	r4, #1
   2e3e8:	cmp	r4, #0
   2e3ec:	beq	2e3c8 <__assert_fail@plt+0x1be04>
   2e3f0:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e3f4:	str	r4, [sp, #-8]!
   2e3f8:	str	lr, [sp, #4]
   2e3fc:	cmp	r1, #0
   2e400:	orreq	r1, r1, #1
   2e404:	bl	32ce0 <__assert_fail@plt+0x2071c>
   2e408:	cmp	r0, #0
   2e40c:	beq	2e41c <__assert_fail@plt+0x1be58>
   2e410:	ldr	r4, [sp]
   2e414:	add	sp, sp, #4
   2e418:	pop	{pc}		; (ldr pc, [sp], #4)
   2e41c:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e420:	strd	r4, [sp, #-16]!
   2e424:	str	r6, [sp, #8]
   2e428:	str	lr, [sp, #12]
   2e42c:	mov	r4, r0
   2e430:	mov	r6, r1
   2e434:	mov	r5, r2
   2e438:	bl	32d3c <__assert_fail@plt+0x20778>
   2e43c:	cmp	r0, #0
   2e440:	beq	2e454 <__assert_fail@plt+0x1be90>
   2e444:	ldrd	r4, [sp]
   2e448:	ldr	r6, [sp, #8]
   2e44c:	add	sp, sp, #12
   2e450:	pop	{pc}		; (ldr pc, [sp], #4)
   2e454:	cmp	r4, #0
   2e458:	beq	2e468 <__assert_fail@plt+0x1bea4>
   2e45c:	cmp	r6, #0
   2e460:	cmpne	r5, #0
   2e464:	beq	2e444 <__assert_fail@plt+0x1be80>
   2e468:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e46c:	str	r4, [sp, #-8]!
   2e470:	str	lr, [sp, #4]
   2e474:	bl	2e420 <__assert_fail@plt+0x1be5c>
   2e478:	ldr	r4, [sp]
   2e47c:	add	sp, sp, #4
   2e480:	pop	{pc}		; (ldr pc, [sp], #4)
   2e484:	str	r4, [sp, #-8]!
   2e488:	str	lr, [sp, #4]
   2e48c:	mov	ip, r1
   2e490:	mov	r3, r2
   2e494:	cmp	r2, #0
   2e498:	cmpne	r1, #0
   2e49c:	moveq	r3, #1
   2e4a0:	moveq	ip, r3
   2e4a4:	mov	r2, r3
   2e4a8:	mov	r1, ip
   2e4ac:	bl	32d3c <__assert_fail@plt+0x20778>
   2e4b0:	cmp	r0, #0
   2e4b4:	beq	2e4c4 <__assert_fail@plt+0x1bf00>
   2e4b8:	ldr	r4, [sp]
   2e4bc:	add	sp, sp, #4
   2e4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e4c4:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e4c8:	str	r4, [sp, #-8]!
   2e4cc:	str	lr, [sp, #4]
   2e4d0:	mov	r2, r1
   2e4d4:	mov	r1, r0
   2e4d8:	mov	r0, #0
   2e4dc:	bl	2e420 <__assert_fail@plt+0x1be5c>
   2e4e0:	ldr	r4, [sp]
   2e4e4:	add	sp, sp, #4
   2e4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2e4ec:	str	r4, [sp, #-8]!
   2e4f0:	str	lr, [sp, #4]
   2e4f4:	mov	r2, r1
   2e4f8:	mov	r1, r0
   2e4fc:	mov	r0, #0
   2e500:	bl	2e484 <__assert_fail@plt+0x1bec0>
   2e504:	ldr	r4, [sp]
   2e508:	add	sp, sp, #4
   2e50c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e510:	strd	r4, [sp, #-16]!
   2e514:	str	r6, [sp, #8]
   2e518:	str	lr, [sp, #12]
   2e51c:	mov	r5, r1
   2e520:	ldr	r4, [r1]
   2e524:	cmp	r0, #0
   2e528:	beq	2e558 <__assert_fail@plt+0x1bf94>
   2e52c:	lsr	r3, r4, #1
   2e530:	add	r3, r3, #1
   2e534:	adds	r4, r4, r3
   2e538:	bcs	2e574 <__assert_fail@plt+0x1bfb0>
   2e53c:	mov	r1, r4
   2e540:	bl	2e420 <__assert_fail@plt+0x1be5c>
   2e544:	str	r4, [r5]
   2e548:	ldrd	r4, [sp]
   2e54c:	ldr	r6, [sp, #8]
   2e550:	add	sp, sp, #12
   2e554:	pop	{pc}		; (ldr pc, [sp], #4)
   2e558:	cmp	r4, #0
   2e55c:	bne	2e53c <__assert_fail@plt+0x1bf78>
   2e560:	mov	r4, #64	; 0x40
   2e564:	udiv	r4, r4, r2
   2e568:	cmp	r2, #64	; 0x40
   2e56c:	addhi	r4, r4, #1
   2e570:	b	2e53c <__assert_fail@plt+0x1bf78>
   2e574:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e578:	str	r4, [sp, #-8]!
   2e57c:	str	lr, [sp, #4]
   2e580:	mov	r2, #1
   2e584:	bl	2e510 <__assert_fail@plt+0x1bf4c>
   2e588:	ldr	r4, [sp]
   2e58c:	add	sp, sp, #4
   2e590:	pop	{pc}		; (ldr pc, [sp], #4)
   2e594:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2e598:	strd	r6, [sp, #8]
   2e59c:	str	r8, [sp, #16]
   2e5a0:	str	lr, [sp, #20]
   2e5a4:	mov	r5, r1
   2e5a8:	ldr	lr, [sp, #24]
   2e5ac:	ldr	ip, [r1]
   2e5b0:	asr	r4, ip, #1
   2e5b4:	adds	r4, ip, r4
   2e5b8:	movvs	r1, #1
   2e5bc:	movvc	r1, #0
   2e5c0:	cmp	r1, #0
   2e5c4:	mvnne	r4, #-2147483648	; 0x80000000
   2e5c8:	mvn	r8, r3
   2e5cc:	lsr	r8, r8, #31
   2e5d0:	cmp	r3, r4
   2e5d4:	movge	r1, #0
   2e5d8:	andlt	r1, r8, #1
   2e5dc:	cmp	r1, #0
   2e5e0:	movne	r4, r3
   2e5e4:	smull	r6, r7, r4, lr
   2e5e8:	asr	r1, r6, #31
   2e5ec:	cmp	r1, r7
   2e5f0:	bne	2e608 <__assert_fail@plt+0x1c044>
   2e5f4:	mov	r1, r6
   2e5f8:	cmp	r6, #63	; 0x3f
   2e5fc:	movle	r1, #64	; 0x40
   2e600:	ble	2e60c <__assert_fail@plt+0x1c048>
   2e604:	b	2e618 <__assert_fail@plt+0x1c054>
   2e608:	mvn	r1, #-2147483648	; 0x80000000
   2e60c:	sdiv	r4, r1, lr
   2e610:	mls	r6, lr, r4, r1
   2e614:	sub	r1, r1, r6
   2e618:	cmp	r0, #0
   2e61c:	moveq	r6, #0
   2e620:	streq	r6, [r5]
   2e624:	sub	r6, r4, ip
   2e628:	cmp	r6, r2
   2e62c:	bge	2e664 <__assert_fail@plt+0x1c0a0>
   2e630:	adds	r2, ip, r2
   2e634:	mov	r4, r2
   2e638:	bvs	2e680 <__assert_fail@plt+0x1c0bc>
   2e63c:	cmp	r2, r3
   2e640:	movle	r3, #0
   2e644:	andgt	r3, r8, #1
   2e648:	cmp	r3, #0
   2e64c:	bne	2e680 <__assert_fail@plt+0x1c0bc>
   2e650:	smull	r2, r3, r2, lr
   2e654:	asr	ip, r2, #31
   2e658:	mov	r1, r2
   2e65c:	cmp	ip, r3
   2e660:	bne	2e680 <__assert_fail@plt+0x1c0bc>
   2e664:	bl	2e3a8 <__assert_fail@plt+0x1bde4>
   2e668:	str	r4, [r5]
   2e66c:	ldrd	r4, [sp]
   2e670:	ldrd	r6, [sp, #8]
   2e674:	ldr	r8, [sp, #16]
   2e678:	add	sp, sp, #20
   2e67c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e680:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e684:	str	r4, [sp, #-8]!
   2e688:	str	lr, [sp, #4]
   2e68c:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   2e690:	cmp	r0, #0
   2e694:	beq	2e6a4 <__assert_fail@plt+0x1c0e0>
   2e698:	ldr	r4, [sp]
   2e69c:	add	sp, sp, #4
   2e6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e6a4:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e6a8:	str	r4, [sp, #-8]!
   2e6ac:	str	lr, [sp, #4]
   2e6b0:	mov	r1, #1
   2e6b4:	bl	2e684 <__assert_fail@plt+0x1c0c0>
   2e6b8:	ldr	r4, [sp]
   2e6bc:	add	sp, sp, #4
   2e6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e6c4:	str	r4, [sp, #-8]!
   2e6c8:	str	lr, [sp, #4]
   2e6cc:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   2e6d0:	cmp	r0, #0
   2e6d4:	beq	2e6e4 <__assert_fail@plt+0x1c120>
   2e6d8:	ldr	r4, [sp]
   2e6dc:	add	sp, sp, #4
   2e6e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e6e4:	bl	2e7dc <__assert_fail@plt+0x1c218>
   2e6e8:	str	r4, [sp, #-8]!
   2e6ec:	str	lr, [sp, #4]
   2e6f0:	mov	r1, #1
   2e6f4:	bl	2e6c4 <__assert_fail@plt+0x1c100>
   2e6f8:	ldr	r4, [sp]
   2e6fc:	add	sp, sp, #4
   2e700:	pop	{pc}		; (ldr pc, [sp], #4)
   2e704:	strd	r4, [sp, #-16]!
   2e708:	str	r6, [sp, #8]
   2e70c:	str	lr, [sp, #12]
   2e710:	mov	r5, r0
   2e714:	mov	r4, r1
   2e718:	mov	r0, r1
   2e71c:	bl	2e348 <__assert_fail@plt+0x1bd84>
   2e720:	mov	r2, r4
   2e724:	mov	r1, r5
   2e728:	bl	12000 <memcpy@plt>
   2e72c:	ldrd	r4, [sp]
   2e730:	ldr	r6, [sp, #8]
   2e734:	add	sp, sp, #12
   2e738:	pop	{pc}		; (ldr pc, [sp], #4)
   2e73c:	strd	r4, [sp, #-16]!
   2e740:	str	r6, [sp, #8]
   2e744:	str	lr, [sp, #12]
   2e748:	mov	r5, r0
   2e74c:	mov	r4, r1
   2e750:	mov	r0, r1
   2e754:	bl	2e36c <__assert_fail@plt+0x1bda8>
   2e758:	mov	r2, r4
   2e75c:	mov	r1, r5
   2e760:	bl	12000 <memcpy@plt>
   2e764:	ldrd	r4, [sp]
   2e768:	ldr	r6, [sp, #8]
   2e76c:	add	sp, sp, #12
   2e770:	pop	{pc}		; (ldr pc, [sp], #4)
   2e774:	strd	r4, [sp, #-16]!
   2e778:	str	r6, [sp, #8]
   2e77c:	str	lr, [sp, #12]
   2e780:	mov	r5, r0
   2e784:	mov	r4, r1
   2e788:	add	r0, r1, #1
   2e78c:	bl	2e36c <__assert_fail@plt+0x1bda8>
   2e790:	mov	r2, #0
   2e794:	strb	r2, [r0, r4]
   2e798:	mov	r2, r4
   2e79c:	mov	r1, r5
   2e7a0:	bl	12000 <memcpy@plt>
   2e7a4:	ldrd	r4, [sp]
   2e7a8:	ldr	r6, [sp, #8]
   2e7ac:	add	sp, sp, #12
   2e7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e7b4:	str	r4, [sp, #-8]!
   2e7b8:	str	lr, [sp, #4]
   2e7bc:	mov	r4, r0
   2e7c0:	bl	122d0 <strlen@plt>
   2e7c4:	add	r1, r0, #1
   2e7c8:	mov	r0, r4
   2e7cc:	bl	2e704 <__assert_fail@plt+0x1c140>
   2e7d0:	ldr	r4, [sp]
   2e7d4:	add	sp, sp, #4
   2e7d8:	pop	{pc}		; (ldr pc, [sp], #4)
   2e7dc:	str	r4, [sp, #-8]!
   2e7e0:	str	lr, [sp, #4]
   2e7e4:	movw	r3, #46316	; 0xb4ec
   2e7e8:	movt	r3, #5
   2e7ec:	ldr	r4, [r3]
   2e7f0:	mov	r2, #5
   2e7f4:	movw	r1, #41264	; 0xa130
   2e7f8:	movt	r1, #4
   2e7fc:	mov	r0, #0
   2e800:	bl	12084 <dcgettext@plt>
   2e804:	mov	r3, r0
   2e808:	movw	r2, #35960	; 0x8c78
   2e80c:	movt	r2, #4
   2e810:	mov	r1, #0
   2e814:	mov	r0, r4
   2e818:	bl	121bc <error@plt>
   2e81c:	bl	12570 <abort@plt>
   2e820:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2e824:	strd	r6, [sp, #8]
   2e828:	str	r8, [sp, #16]
   2e82c:	str	lr, [sp, #20]
   2e830:	sub	sp, sp, #8
   2e834:	mov	r4, r0
   2e838:	mov	r5, r1
   2e83c:	mov	r7, r2
   2e840:	mov	r8, r3
   2e844:	bl	12318 <__errno_location@plt>
   2e848:	mov	r6, r0
   2e84c:	mov	r3, #0
   2e850:	str	r3, [r0]
   2e854:	add	r1, sp, #4
   2e858:	mov	r0, r4
   2e85c:	blx	r8
   2e860:	ldr	r3, [sp, #4]
   2e864:	cmp	r3, r4
   2e868:	beq	2e8b8 <__assert_fail@plt+0x1c2f4>
   2e86c:	cmp	r5, #0
   2e870:	beq	2e894 <__assert_fail@plt+0x1c2d0>
   2e874:	vcmp.f64	d0, #0.0
   2e878:	vmrs	APSR_nzcv, fpscr
   2e87c:	moveq	r0, #1
   2e880:	beq	2e8c4 <__assert_fail@plt+0x1c300>
   2e884:	ldr	r0, [r6]
   2e888:	subs	r0, r0, #34	; 0x22
   2e88c:	movne	r0, #1
   2e890:	b	2e8bc <__assert_fail@plt+0x1c2f8>
   2e894:	ldrb	r2, [r3]
   2e898:	cmp	r2, #0
   2e89c:	movne	r0, #0
   2e8a0:	bne	2e8c8 <__assert_fail@plt+0x1c304>
   2e8a4:	vcmp.f64	d0, #0.0
   2e8a8:	vmrs	APSR_nzcv, fpscr
   2e8ac:	bne	2e884 <__assert_fail@plt+0x1c2c0>
   2e8b0:	mov	r0, #1
   2e8b4:	b	2e8c8 <__assert_fail@plt+0x1c304>
   2e8b8:	mov	r0, #0
   2e8bc:	cmp	r5, #0
   2e8c0:	beq	2e8c8 <__assert_fail@plt+0x1c304>
   2e8c4:	str	r3, [r5]
   2e8c8:	vstr	d0, [r7]
   2e8cc:	add	sp, sp, #8
   2e8d0:	ldrd	r4, [sp]
   2e8d4:	ldrd	r6, [sp, #8]
   2e8d8:	ldr	r8, [sp, #16]
   2e8dc:	add	sp, sp, #20
   2e8e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e8e4:	cmp	r2, #0
   2e8e8:	beq	2e940 <__assert_fail@plt+0x1c37c>
   2e8ec:	str	r4, [sp, #-8]!
   2e8f0:	str	lr, [sp, #4]
   2e8f4:	mov	r4, r0
   2e8f8:	sub	ip, r2, #1
   2e8fc:	ldr	r2, [r0]
   2e900:	mov	r0, #0
   2e904:	umull	lr, r3, r1, r2
   2e908:	adds	r3, r3, #0
   2e90c:	movne	r3, #1
   2e910:	mov	lr, r3
   2e914:	cmp	r3, #0
   2e918:	muleq	r2, r1, r2
   2e91c:	mvnne	r2, #0
   2e920:	orr	r0, r0, r3
   2e924:	sub	ip, ip, #1
   2e928:	cmn	ip, #1
   2e92c:	bne	2e904 <__assert_fail@plt+0x1c340>
   2e930:	str	r2, [r4]
   2e934:	ldr	r4, [sp]
   2e938:	add	sp, sp, #4
   2e93c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e940:	mov	r0, #0
   2e944:	bx	lr
   2e948:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2e94c:	strd	r6, [sp, #8]
   2e950:	strd	r8, [sp, #16]
   2e954:	str	lr, [sp, #24]
   2e958:	sub	sp, sp, #12
   2e95c:	cmp	r2, #36	; 0x24
   2e960:	bhi	2e9b4 <__assert_fail@plt+0x1c3f0>
   2e964:	mov	r5, r0
   2e968:	mov	r6, r1
   2e96c:	mov	r7, r2
   2e970:	mov	r9, r3
   2e974:	cmp	r1, #0
   2e978:	addeq	r6, sp, #4
   2e97c:	bl	12318 <__errno_location@plt>
   2e980:	mov	r8, r0
   2e984:	mov	r3, #0
   2e988:	str	r3, [r0]
   2e98c:	ldrb	r4, [r5]
   2e990:	bl	12288 <__ctype_b_loc@plt>
   2e994:	ldr	r1, [r0]
   2e998:	mov	r2, r5
   2e99c:	lsl	r3, r4, #1
   2e9a0:	ldrh	r3, [r1, r3]
   2e9a4:	tst	r3, #8192	; 0x2000
   2e9a8:	beq	2e9d4 <__assert_fail@plt+0x1c410>
   2e9ac:	ldrb	r4, [r2, #1]!
   2e9b0:	b	2e99c <__assert_fail@plt+0x1c3d8>
   2e9b4:	movw	r3, #41284	; 0xa144
   2e9b8:	movt	r3, #4
   2e9bc:	mov	r2, #84	; 0x54
   2e9c0:	movw	r1, #41296	; 0xa150
   2e9c4:	movt	r1, #4
   2e9c8:	movw	r0, #41308	; 0xa15c
   2e9cc:	movt	r0, #4
   2e9d0:	bl	125c4 <__assert_fail@plt>
   2e9d4:	cmp	r4, #45	; 0x2d
   2e9d8:	moveq	r4, #4
   2e9dc:	beq	2eb68 <__assert_fail@plt+0x1c5a4>
   2e9e0:	mov	r2, r7
   2e9e4:	mov	r1, r6
   2e9e8:	mov	r0, r5
   2e9ec:	bl	122c4 <strtoul@plt>
   2e9f0:	str	r0, [sp]
   2e9f4:	ldr	r7, [r6]
   2e9f8:	cmp	r7, r5
   2e9fc:	beq	2ea20 <__assert_fail@plt+0x1c45c>
   2ea00:	ldr	r3, [r8]
   2ea04:	cmp	r3, #0
   2ea08:	beq	2eb40 <__assert_fail@plt+0x1c57c>
   2ea0c:	cmp	r3, #34	; 0x22
   2ea10:	moveq	r4, #1
   2ea14:	beq	2eb44 <__assert_fail@plt+0x1c580>
   2ea18:	mov	r4, #4
   2ea1c:	b	2eb68 <__assert_fail@plt+0x1c5a4>
   2ea20:	ldr	r3, [sp, #40]	; 0x28
   2ea24:	cmp	r3, #0
   2ea28:	beq	2ee18 <__assert_fail@plt+0x1c854>
   2ea2c:	ldrb	r1, [r5]
   2ea30:	cmp	r1, #0
   2ea34:	moveq	r4, #4
   2ea38:	beq	2eb68 <__assert_fail@plt+0x1c5a4>
   2ea3c:	mov	r0, r3
   2ea40:	bl	122dc <strchr@plt>
   2ea44:	cmp	r0, #0
   2ea48:	beq	2ee20 <__assert_fail@plt+0x1c85c>
   2ea4c:	mov	r3, #1
   2ea50:	str	r3, [sp]
   2ea54:	ldrb	r5, [r7]
   2ea58:	mov	r4, #0
   2ea5c:	mov	r1, r5
   2ea60:	ldr	r0, [sp, #40]	; 0x28
   2ea64:	bl	122dc <strchr@plt>
   2ea68:	cmp	r0, #0
   2ea6c:	beq	2eb84 <__assert_fail@plt+0x1c5c0>
   2ea70:	sub	r3, r5, #69	; 0x45
   2ea74:	cmp	r3, #47	; 0x2f
   2ea78:	ldrls	pc, [pc, r3, lsl #2]
   2ea7c:	b	2ecd0 <__assert_fail@plt+0x1c70c>
   2ea80:	muleq	r2, r4, fp
   2ea84:	ldrdeq	lr, [r2], -r0
   2ea88:	muleq	r2, r4, fp
   2ea8c:	ldrdeq	lr, [r2], -r0
   2ea90:	ldrdeq	lr, [r2], -r0
   2ea94:	ldrdeq	lr, [r2], -r0
   2ea98:	muleq	r2, r4, fp
   2ea9c:	ldrdeq	lr, [r2], -r0
   2eaa0:	muleq	r2, r4, fp
   2eaa4:	ldrdeq	lr, [r2], -r0
   2eaa8:	ldrdeq	lr, [r2], -r0
   2eaac:	muleq	r2, r4, fp
   2eab0:	ldrdeq	lr, [r2], -r0
   2eab4:	ldrdeq	lr, [r2], -r0
   2eab8:	ldrdeq	lr, [r2], -r0
   2eabc:	muleq	r2, r4, fp
   2eac0:	ldrdeq	lr, [r2], -r0
   2eac4:	ldrdeq	lr, [r2], -r0
   2eac8:	ldrdeq	lr, [r2], -r0
   2eacc:	ldrdeq	lr, [r2], -r0
   2ead0:	muleq	r2, r4, fp
   2ead4:	muleq	r2, r4, fp
   2ead8:	ldrdeq	lr, [r2], -r0
   2eadc:	ldrdeq	lr, [r2], -r0
   2eae0:	ldrdeq	lr, [r2], -r0
   2eae4:	ldrdeq	lr, [r2], -r0
   2eae8:	ldrdeq	lr, [r2], -r0
   2eaec:	ldrdeq	lr, [r2], -r0
   2eaf0:	ldrdeq	lr, [r2], -r0
   2eaf4:	ldrdeq	lr, [r2], -r0
   2eaf8:	ldrdeq	lr, [r2], -r0
   2eafc:	ldrdeq	lr, [r2], -r0
   2eb00:	ldrdeq	lr, [r2], -r0
   2eb04:	ldrdeq	lr, [r2], -r0
   2eb08:	muleq	r2, r4, fp
   2eb0c:	ldrdeq	lr, [r2], -r0
   2eb10:	ldrdeq	lr, [r2], -r0
   2eb14:	ldrdeq	lr, [r2], -r0
   2eb18:	muleq	r2, r4, fp
   2eb1c:	ldrdeq	lr, [r2], -r0
   2eb20:	muleq	r2, r4, fp
   2eb24:	ldrdeq	lr, [r2], -r0
   2eb28:	ldrdeq	lr, [r2], -r0
   2eb2c:	ldrdeq	lr, [r2], -r0
   2eb30:	ldrdeq	lr, [r2], -r0
   2eb34:	ldrdeq	lr, [r2], -r0
   2eb38:	ldrdeq	lr, [r2], -r0
   2eb3c:	muleq	r2, r4, fp
   2eb40:	mov	r4, #0
   2eb44:	ldr	r3, [sp, #40]	; 0x28
   2eb48:	cmp	r3, #0
   2eb4c:	streq	r0, [r9]
   2eb50:	beq	2eb68 <__assert_fail@plt+0x1c5a4>
   2eb54:	ldrb	r5, [r7]
   2eb58:	cmp	r5, #0
   2eb5c:	bne	2ea5c <__assert_fail@plt+0x1c498>
   2eb60:	ldr	r3, [sp]
   2eb64:	str	r3, [r9]
   2eb68:	mov	r0, r4
   2eb6c:	add	sp, sp, #12
   2eb70:	ldrd	r4, [sp]
   2eb74:	ldrd	r6, [sp, #8]
   2eb78:	ldrd	r8, [sp, #16]
   2eb7c:	add	sp, sp, #24
   2eb80:	pop	{pc}		; (ldr pc, [sp], #4)
   2eb84:	ldr	r3, [sp]
   2eb88:	str	r3, [r9]
   2eb8c:	orr	r4, r4, #2
   2eb90:	b	2eb68 <__assert_fail@plt+0x1c5a4>
   2eb94:	mov	r1, #48	; 0x30
   2eb98:	ldr	r0, [sp, #40]	; 0x28
   2eb9c:	bl	122dc <strchr@plt>
   2eba0:	cmp	r0, #0
   2eba4:	beq	2ecdc <__assert_fail@plt+0x1c718>
   2eba8:	ldrb	r3, [r7, #1]
   2ebac:	cmp	r3, #68	; 0x44
   2ebb0:	beq	2ece8 <__assert_fail@plt+0x1c724>
   2ebb4:	cmp	r3, #105	; 0x69
   2ebb8:	beq	2ecb8 <__assert_fail@plt+0x1c6f4>
   2ebbc:	cmp	r3, #66	; 0x42
   2ebc0:	moveq	r7, #2
   2ebc4:	movne	r7, #1
   2ebc8:	moveq	r1, #1000	; 0x3e8
   2ebcc:	movne	r1, #1024	; 0x400
   2ebd0:	sub	r5, r5, #66	; 0x42
   2ebd4:	cmp	r5, #53	; 0x35
   2ebd8:	ldrls	pc, [pc, r5, lsl #2]
   2ebdc:	b	2ede4 <__assert_fail@plt+0x1c820>
   2ebe0:	andeq	lr, r2, ip, lsl sp
   2ebe4:	andeq	lr, r2, r4, ror #27
   2ebe8:	andeq	lr, r2, r4, ror #27
   2ebec:	andeq	lr, r2, r4, asr #26
   2ebf0:	andeq	lr, r2, r4, ror #27
   2ebf4:	andeq	lr, r2, r4, asr sp
   2ebf8:	andeq	lr, r2, r4, ror #27
   2ebfc:	andeq	lr, r2, r4, ror #27
   2ec00:	andeq	lr, r2, r4, ror #27
   2ec04:	andeq	lr, r2, r4, ror #26
   2ec08:	andeq	lr, r2, r4, ror #27
   2ec0c:	andeq	lr, r2, r4, ror sp
   2ec10:	andeq	lr, r2, r4, ror #27
   2ec14:	andeq	lr, r2, r4, ror #27
   2ec18:	andeq	lr, r2, r4, lsl #27
   2ec1c:	andeq	lr, r2, r4, ror #27
   2ec20:	andeq	lr, r2, r4, ror #27
   2ec24:	andeq	lr, r2, r4, ror #27
   2ec28:	muleq	r2, r4, sp
   2ec2c:	andeq	lr, r2, r4, ror #27
   2ec30:	andeq	lr, r2, r4, ror #27
   2ec34:	andeq	lr, r2, r4, ror #27
   2ec38:	andeq	lr, r2, r4, ror #27
   2ec3c:	andeq	lr, r2, r4, asr #27
   2ec40:	ldrdeq	lr, [r2], -r4
   2ec44:	andeq	lr, r2, r4, ror #27
   2ec48:	andeq	lr, r2, r4, ror #27
   2ec4c:	andeq	lr, r2, r4, ror #27
   2ec50:	andeq	lr, r2, r4, ror #27
   2ec54:	andeq	lr, r2, r4, ror #27
   2ec58:	andeq	lr, r2, r4, ror #27
   2ec5c:	andeq	lr, r2, r4, ror #27
   2ec60:	strdeq	lr, [r2], -r4
   2ec64:	strdeq	lr, [r2], -r4
   2ec68:	andeq	lr, r2, r4, ror #27
   2ec6c:	andeq	lr, r2, r4, ror #27
   2ec70:	andeq	lr, r2, r4, ror #27
   2ec74:	andeq	lr, r2, r4, asr sp
   2ec78:	andeq	lr, r2, r4, ror #27
   2ec7c:	andeq	lr, r2, r4, ror #27
   2ec80:	andeq	lr, r2, r4, ror #27
   2ec84:	andeq	lr, r2, r4, ror #26
   2ec88:	andeq	lr, r2, r4, ror #27
   2ec8c:	andeq	lr, r2, r4, ror sp
   2ec90:	andeq	lr, r2, r4, ror #27
   2ec94:	andeq	lr, r2, r4, ror #27
   2ec98:	andeq	lr, r2, r4, ror #27
   2ec9c:	andeq	lr, r2, r4, ror #27
   2eca0:	andeq	lr, r2, r4, ror #27
   2eca4:	andeq	lr, r2, r4, ror #27
   2eca8:	muleq	r2, r4, sp
   2ecac:	andeq	lr, r2, r4, ror #27
   2ecb0:	andeq	lr, r2, r4, ror #27
   2ecb4:	andeq	lr, r2, r4, lsr #27
   2ecb8:	ldrb	r3, [r7, #2]
   2ecbc:	cmp	r3, #66	; 0x42
   2ecc0:	movne	r7, #1
   2ecc4:	moveq	r7, #3
   2ecc8:	mov	r1, #1024	; 0x400
   2eccc:	b	2ebd0 <__assert_fail@plt+0x1c60c>
   2ecd0:	mov	r7, #1
   2ecd4:	mov	r1, #1024	; 0x400
   2ecd8:	b	2ebd0 <__assert_fail@plt+0x1c60c>
   2ecdc:	mov	r7, #1
   2ece0:	mov	r1, #1024	; 0x400
   2ece4:	b	2ebd0 <__assert_fail@plt+0x1c60c>
   2ece8:	mov	r7, #2
   2ecec:	mov	r1, #1000	; 0x3e8
   2ecf0:	b	2ebd0 <__assert_fail@plt+0x1c60c>
   2ecf4:	ldr	r3, [sp]
   2ecf8:	lsr	r2, r3, #23
   2ecfc:	adds	r2, r2, #0
   2ed00:	movne	r2, #1
   2ed04:	mov	r0, r2
   2ed08:	cmp	r2, #0
   2ed0c:	mvnne	r3, #0
   2ed10:	lsleq	r3, r3, #9
   2ed14:	str	r3, [sp]
   2ed18:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed1c:	ldr	r3, [sp]
   2ed20:	lsr	r2, r3, #22
   2ed24:	adds	r2, r2, #0
   2ed28:	movne	r2, #1
   2ed2c:	mov	r0, r2
   2ed30:	cmp	r2, #0
   2ed34:	mvnne	r3, #0
   2ed38:	lsleq	r3, r3, #10
   2ed3c:	str	r3, [sp]
   2ed40:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed44:	mov	r2, #6
   2ed48:	mov	r0, sp
   2ed4c:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2ed50:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed54:	mov	r2, #3
   2ed58:	mov	r0, sp
   2ed5c:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2ed60:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed64:	mov	r2, #1
   2ed68:	mov	r0, sp
   2ed6c:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2ed70:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed74:	mov	r2, #2
   2ed78:	mov	r0, sp
   2ed7c:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2ed80:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed84:	mov	r2, #5
   2ed88:	mov	r0, sp
   2ed8c:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2ed90:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ed94:	mov	r2, #4
   2ed98:	mov	r0, sp
   2ed9c:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2eda0:	b	2edf8 <__assert_fail@plt+0x1c834>
   2eda4:	ldr	r3, [sp]
   2eda8:	lsr	r2, r3, #31
   2edac:	mov	r0, r2
   2edb0:	cmp	r2, #0
   2edb4:	mvnne	r3, #0
   2edb8:	lsleq	r3, r3, #1
   2edbc:	str	r3, [sp]
   2edc0:	b	2edf8 <__assert_fail@plt+0x1c834>
   2edc4:	mov	r2, #8
   2edc8:	mov	r0, sp
   2edcc:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2edd0:	b	2edf8 <__assert_fail@plt+0x1c834>
   2edd4:	mov	r2, #7
   2edd8:	mov	r0, sp
   2eddc:	bl	2e8e4 <__assert_fail@plt+0x1c320>
   2ede0:	b	2edf8 <__assert_fail@plt+0x1c834>
   2ede4:	ldr	r3, [sp]
   2ede8:	str	r3, [r9]
   2edec:	orr	r4, r4, #2
   2edf0:	b	2eb68 <__assert_fail@plt+0x1c5a4>
   2edf4:	mov	r0, #0
   2edf8:	orr	r4, r4, r0
   2edfc:	ldr	r3, [r6]
   2ee00:	add	r2, r3, r7
   2ee04:	str	r2, [r6]
   2ee08:	ldrb	r3, [r3, r7]
   2ee0c:	cmp	r3, #0
   2ee10:	orrne	r4, r4, #2
   2ee14:	b	2eb60 <__assert_fail@plt+0x1c59c>
   2ee18:	mov	r4, #4
   2ee1c:	b	2eb68 <__assert_fail@plt+0x1c5a4>
   2ee20:	mov	r4, #4
   2ee24:	b	2eb68 <__assert_fail@plt+0x1c5a4>
   2ee28:	cmp	r2, #0
   2ee2c:	beq	2ef28 <__assert_fail@plt+0x1c964>
   2ee30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ee34:	strd	r6, [sp, #8]
   2ee38:	strd	r8, [sp, #16]
   2ee3c:	strd	sl, [sp, #24]
   2ee40:	str	lr, [sp, #32]
   2ee44:	sub	sp, sp, #20
   2ee48:	mov	r9, r0
   2ee4c:	sub	ip, r2, #1
   2ee50:	ldrd	sl, [r0]
   2ee54:	mov	r0, #0
   2ee58:	asr	r7, r1, #31
   2ee5c:	str	r1, [sp, #8]
   2ee60:	str	r9, [sp, #12]
   2ee64:	b	2eec0 <__assert_fail@plt+0x1c8fc>
   2ee68:	cmp	r7, #0
   2ee6c:	bne	2eee8 <__assert_fail@plt+0x1c924>
   2ee70:	ldr	r3, [sp, #8]
   2ee74:	str	r3, [sp, #4]
   2ee78:	umull	r8, r9, sl, r1
   2ee7c:	mov	r2, r9
   2ee80:	mov	r3, #0
   2ee84:	ldr	r8, [sp, #4]
   2ee88:	umlal	r2, r3, lr, r8
   2ee8c:	cmp	r3, #0
   2ee90:	bne	2eee8 <__assert_fail@plt+0x1c924>
   2ee94:	orrs	r3, r4, r5
   2ee98:	bne	2eef4 <__assert_fail@plt+0x1c930>
   2ee9c:	mul	r3, sl, r7
   2eea0:	mla	r3, r1, fp, r3
   2eea4:	umull	sl, fp, sl, r1
   2eea8:	add	fp, r3, fp
   2eeac:	mov	r3, #0
   2eeb0:	orr	r0, r0, r3
   2eeb4:	sub	ip, ip, #1
   2eeb8:	cmn	ip, #1
   2eebc:	beq	2ef04 <__assert_fail@plt+0x1c940>
   2eec0:	mov	r4, #0
   2eec4:	mov	r5, r4
   2eec8:	mov	lr, fp
   2eecc:	cmp	fp, r4
   2eed0:	bne	2ee68 <__assert_fail@plt+0x1c8a4>
   2eed4:	cmp	r7, r4
   2eed8:	movne	lr, r7
   2eedc:	strne	sl, [sp, #4]
   2eee0:	beq	2ee94 <__assert_fail@plt+0x1c8d0>
   2eee4:	b	2ee78 <__assert_fail@plt+0x1c8b4>
   2eee8:	mov	r4, #1
   2eeec:	mov	r5, #0
   2eef0:	b	2ee94 <__assert_fail@plt+0x1c8d0>
   2eef4:	mvn	sl, #0
   2eef8:	mvn	fp, #0
   2eefc:	mov	r3, #1
   2ef00:	b	2eeb0 <__assert_fail@plt+0x1c8ec>
   2ef04:	ldr	r9, [sp, #12]
   2ef08:	strd	sl, [r9]
   2ef0c:	add	sp, sp, #20
   2ef10:	ldrd	r4, [sp]
   2ef14:	ldrd	r6, [sp, #8]
   2ef18:	ldrd	r8, [sp, #16]
   2ef1c:	ldrd	sl, [sp, #24]
   2ef20:	add	sp, sp, #32
   2ef24:	pop	{pc}		; (ldr pc, [sp], #4)
   2ef28:	mov	r0, #0
   2ef2c:	bx	lr
   2ef30:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2ef34:	strd	r6, [sp, #8]
   2ef38:	strd	r8, [sp, #16]
   2ef3c:	str	lr, [sp, #24]
   2ef40:	sub	sp, sp, #20
   2ef44:	cmp	r2, #36	; 0x24
   2ef48:	bhi	2ef9c <__assert_fail@plt+0x1c9d8>
   2ef4c:	mov	r5, r0
   2ef50:	mov	r6, r1
   2ef54:	mov	r7, r2
   2ef58:	mov	r9, r3
   2ef5c:	cmp	r1, #0
   2ef60:	addeq	r6, sp, #12
   2ef64:	bl	12318 <__errno_location@plt>
   2ef68:	mov	r8, r0
   2ef6c:	mov	r3, #0
   2ef70:	str	r3, [r0]
   2ef74:	ldrb	r4, [r5]
   2ef78:	bl	12288 <__ctype_b_loc@plt>
   2ef7c:	ldr	r1, [r0]
   2ef80:	mov	r2, r5
   2ef84:	lsl	r3, r4, #1
   2ef88:	ldrh	r3, [r1, r3]
   2ef8c:	tst	r3, #8192	; 0x2000
   2ef90:	beq	2efbc <__assert_fail@plt+0x1c9f8>
   2ef94:	ldrb	r4, [r2, #1]!
   2ef98:	b	2ef84 <__assert_fail@plt+0x1c9c0>
   2ef9c:	movw	r3, #41348	; 0xa184
   2efa0:	movt	r3, #4
   2efa4:	mov	r2, #84	; 0x54
   2efa8:	movw	r1, #41296	; 0xa150
   2efac:	movt	r1, #4
   2efb0:	movw	r0, #41308	; 0xa15c
   2efb4:	movt	r0, #4
   2efb8:	bl	125c4 <__assert_fail@plt>
   2efbc:	cmp	r4, #45	; 0x2d
   2efc0:	moveq	r4, #4
   2efc4:	beq	2f158 <__assert_fail@plt+0x1cb94>
   2efc8:	mov	r3, #0
   2efcc:	mov	r2, r7
   2efd0:	mov	r1, r6
   2efd4:	mov	r0, r5
   2efd8:	bl	12024 <__strtoull_internal@plt>
   2efdc:	strd	r0, [sp]
   2efe0:	ldr	r7, [r6]
   2efe4:	cmp	r7, r5
   2efe8:	beq	2f00c <__assert_fail@plt+0x1ca48>
   2efec:	ldr	r3, [r8]
   2eff0:	cmp	r3, #0
   2eff4:	beq	2f130 <__assert_fail@plt+0x1cb6c>
   2eff8:	cmp	r3, #34	; 0x22
   2effc:	moveq	r4, #1
   2f000:	beq	2f134 <__assert_fail@plt+0x1cb70>
   2f004:	mov	r4, #4
   2f008:	b	2f158 <__assert_fail@plt+0x1cb94>
   2f00c:	ldr	r3, [sp, #48]	; 0x30
   2f010:	cmp	r3, #0
   2f014:	beq	2f478 <__assert_fail@plt+0x1ceb4>
   2f018:	ldrb	r1, [r5]
   2f01c:	cmp	r1, #0
   2f020:	moveq	r4, #4
   2f024:	beq	2f158 <__assert_fail@plt+0x1cb94>
   2f028:	mov	r0, r3
   2f02c:	bl	122dc <strchr@plt>
   2f030:	cmp	r0, #0
   2f034:	beq	2f480 <__assert_fail@plt+0x1cebc>
   2f038:	mov	r2, #1
   2f03c:	mov	r3, #0
   2f040:	strd	r2, [sp]
   2f044:	ldrb	r5, [r7]
   2f048:	mov	r4, #0
   2f04c:	mov	r1, r5
   2f050:	ldr	r0, [sp, #48]	; 0x30
   2f054:	bl	122dc <strchr@plt>
   2f058:	cmp	r0, #0
   2f05c:	beq	2f174 <__assert_fail@plt+0x1cbb0>
   2f060:	sub	r3, r5, #69	; 0x45
   2f064:	cmp	r3, #47	; 0x2f
   2f068:	ldrls	pc, [pc, r3, lsl #2]
   2f06c:	b	2f2c0 <__assert_fail@plt+0x1ccfc>
   2f070:	andeq	pc, r2, r4, lsl #3
   2f074:	andeq	pc, r2, r0, asr #5
   2f078:	andeq	pc, r2, r4, lsl #3
   2f07c:	andeq	pc, r2, r0, asr #5
   2f080:	andeq	pc, r2, r0, asr #5
   2f084:	andeq	pc, r2, r0, asr #5
   2f088:	andeq	pc, r2, r4, lsl #3
   2f08c:	andeq	pc, r2, r0, asr #5
   2f090:	andeq	pc, r2, r4, lsl #3
   2f094:	andeq	pc, r2, r0, asr #5
   2f098:	andeq	pc, r2, r0, asr #5
   2f09c:	andeq	pc, r2, r4, lsl #3
   2f0a0:	andeq	pc, r2, r0, asr #5
   2f0a4:	andeq	pc, r2, r0, asr #5
   2f0a8:	andeq	pc, r2, r0, asr #5
   2f0ac:	andeq	pc, r2, r4, lsl #3
   2f0b0:	andeq	pc, r2, r0, asr #5
   2f0b4:	andeq	pc, r2, r0, asr #5
   2f0b8:	andeq	pc, r2, r0, asr #5
   2f0bc:	andeq	pc, r2, r0, asr #5
   2f0c0:	andeq	pc, r2, r4, lsl #3
   2f0c4:	andeq	pc, r2, r4, lsl #3
   2f0c8:	andeq	pc, r2, r0, asr #5
   2f0cc:	andeq	pc, r2, r0, asr #5
   2f0d0:	andeq	pc, r2, r0, asr #5
   2f0d4:	andeq	pc, r2, r0, asr #5
   2f0d8:	andeq	pc, r2, r0, asr #5
   2f0dc:	andeq	pc, r2, r0, asr #5
   2f0e0:	andeq	pc, r2, r0, asr #5
   2f0e4:	andeq	pc, r2, r0, asr #5
   2f0e8:	andeq	pc, r2, r0, asr #5
   2f0ec:	andeq	pc, r2, r0, asr #5
   2f0f0:	andeq	pc, r2, r0, asr #5
   2f0f4:	andeq	pc, r2, r0, asr #5
   2f0f8:	andeq	pc, r2, r4, lsl #3
   2f0fc:	andeq	pc, r2, r0, asr #5
   2f100:	andeq	pc, r2, r0, asr #5
   2f104:	andeq	pc, r2, r0, asr #5
   2f108:	andeq	pc, r2, r4, lsl #3
   2f10c:	andeq	pc, r2, r0, asr #5
   2f110:	andeq	pc, r2, r4, lsl #3
   2f114:	andeq	pc, r2, r0, asr #5
   2f118:	andeq	pc, r2, r0, asr #5
   2f11c:	andeq	pc, r2, r0, asr #5
   2f120:	andeq	pc, r2, r0, asr #5
   2f124:	andeq	pc, r2, r0, asr #5
   2f128:	andeq	pc, r2, r0, asr #5
   2f12c:	andeq	pc, r2, r4, lsl #3
   2f130:	mov	r4, #0
   2f134:	ldr	r3, [sp, #48]	; 0x30
   2f138:	cmp	r3, #0
   2f13c:	strdeq	r0, [r9]
   2f140:	beq	2f158 <__assert_fail@plt+0x1cb94>
   2f144:	ldrb	r5, [r7]
   2f148:	cmp	r5, #0
   2f14c:	bne	2f04c <__assert_fail@plt+0x1ca88>
   2f150:	ldrd	r2, [sp]
   2f154:	strd	r2, [r9]
   2f158:	mov	r0, r4
   2f15c:	add	sp, sp, #20
   2f160:	ldrd	r4, [sp]
   2f164:	ldrd	r6, [sp, #8]
   2f168:	ldrd	r8, [sp, #16]
   2f16c:	add	sp, sp, #24
   2f170:	pop	{pc}		; (ldr pc, [sp], #4)
   2f174:	ldrd	r2, [sp]
   2f178:	strd	r2, [r9]
   2f17c:	orr	r4, r4, #2
   2f180:	b	2f158 <__assert_fail@plt+0x1cb94>
   2f184:	mov	r1, #48	; 0x30
   2f188:	ldr	r0, [sp, #48]	; 0x30
   2f18c:	bl	122dc <strchr@plt>
   2f190:	cmp	r0, #0
   2f194:	beq	2f2cc <__assert_fail@plt+0x1cd08>
   2f198:	ldrb	r3, [r7, #1]
   2f19c:	cmp	r3, #68	; 0x44
   2f1a0:	beq	2f2d8 <__assert_fail@plt+0x1cd14>
   2f1a4:	cmp	r3, #105	; 0x69
   2f1a8:	beq	2f2a8 <__assert_fail@plt+0x1cce4>
   2f1ac:	cmp	r3, #66	; 0x42
   2f1b0:	moveq	r7, #2
   2f1b4:	movne	r7, #1
   2f1b8:	moveq	r1, #1000	; 0x3e8
   2f1bc:	movne	r1, #1024	; 0x400
   2f1c0:	sub	r5, r5, #66	; 0x42
   2f1c4:	cmp	r5, #53	; 0x35
   2f1c8:	ldrls	pc, [pc, r5, lsl #2]
   2f1cc:	b	2f444 <__assert_fail@plt+0x1ce80>
   2f1d0:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   2f1d4:	andeq	pc, r2, r4, asr #8
   2f1d8:	andeq	pc, r2, r4, asr #8
   2f1dc:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   2f1e0:	andeq	pc, r2, r4, asr #8
   2f1e4:	andeq	pc, r2, ip, lsl #7
   2f1e8:	andeq	pc, r2, r4, asr #8
   2f1ec:	andeq	pc, r2, r4, asr #8
   2f1f0:	andeq	pc, r2, r4, asr #8
   2f1f4:	muleq	r2, ip, r3
   2f1f8:	andeq	pc, r2, r4, asr #8
   2f1fc:	andeq	pc, r2, ip, lsr #7
   2f200:	andeq	pc, r2, r4, asr #8
   2f204:	andeq	pc, r2, r4, asr #8
   2f208:			; <UNDEFINED> instruction: 0x0002f3bc
   2f20c:	andeq	pc, r2, r4, asr #8
   2f210:	andeq	pc, r2, r4, asr #8
   2f214:	andeq	pc, r2, r4, asr #8
   2f218:	andeq	pc, r2, ip, asr #7
   2f21c:	andeq	pc, r2, r4, asr #8
   2f220:	andeq	pc, r2, r4, asr #8
   2f224:	andeq	pc, r2, r4, asr #8
   2f228:	andeq	pc, r2, r4, asr #8
   2f22c:	andeq	pc, r2, r4, lsr #8
   2f230:	andeq	pc, r2, r4, lsr r4	; <UNPREDICTABLE>
   2f234:	andeq	pc, r2, r4, asr #8
   2f238:	andeq	pc, r2, r4, asr #8
   2f23c:	andeq	pc, r2, r4, asr #8
   2f240:	andeq	pc, r2, r4, asr #8
   2f244:	andeq	pc, r2, r4, asr #8
   2f248:	andeq	pc, r2, r4, asr #8
   2f24c:	andeq	pc, r2, r4, asr #8
   2f250:	andeq	pc, r2, r4, ror #5
   2f254:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>
   2f258:	andeq	pc, r2, r4, asr #8
   2f25c:	andeq	pc, r2, r4, asr #8
   2f260:	andeq	pc, r2, r4, asr #8
   2f264:	andeq	pc, r2, ip, lsl #7
   2f268:	andeq	pc, r2, r4, asr #8
   2f26c:	andeq	pc, r2, r4, asr #8
   2f270:	andeq	pc, r2, r4, asr #8
   2f274:	muleq	r2, ip, r3
   2f278:	andeq	pc, r2, r4, asr #8
   2f27c:	andeq	pc, r2, ip, lsr #7
   2f280:	andeq	pc, r2, r4, asr #8
   2f284:	andeq	pc, r2, r4, asr #8
   2f288:	andeq	pc, r2, r4, asr #8
   2f28c:	andeq	pc, r2, r4, asr #8
   2f290:	andeq	pc, r2, r4, asr #8
   2f294:	andeq	pc, r2, r4, asr #8
   2f298:	andeq	pc, r2, ip, asr #7
   2f29c:	andeq	pc, r2, r4, asr #8
   2f2a0:	andeq	pc, r2, r4, asr #8
   2f2a4:	ldrdeq	pc, [r2], -ip
   2f2a8:	ldrb	r3, [r7, #2]
   2f2ac:	cmp	r3, #66	; 0x42
   2f2b0:	movne	r7, #1
   2f2b4:	moveq	r7, #3
   2f2b8:	mov	r1, #1024	; 0x400
   2f2bc:	b	2f1c0 <__assert_fail@plt+0x1cbfc>
   2f2c0:	mov	r7, #1
   2f2c4:	mov	r1, #1024	; 0x400
   2f2c8:	b	2f1c0 <__assert_fail@plt+0x1cbfc>
   2f2cc:	mov	r7, #1
   2f2d0:	mov	r1, #1024	; 0x400
   2f2d4:	b	2f1c0 <__assert_fail@plt+0x1cbfc>
   2f2d8:	mov	r7, #2
   2f2dc:	mov	r1, #1000	; 0x3e8
   2f2e0:	b	2f1c0 <__assert_fail@plt+0x1cbfc>
   2f2e4:	ldr	r2, [sp]
   2f2e8:	ldr	r3, [sp, #4]
   2f2ec:	mov	r0, #0
   2f2f0:	mov	r1, r0
   2f2f4:	lsr	r0, r3, #23
   2f2f8:	orrs	r1, r0, r1
   2f2fc:	bne	2f31c <__assert_fail@plt+0x1cd58>
   2f300:	lsl	r3, r3, #9
   2f304:	orr	r3, r3, r2, lsr #23
   2f308:	lsl	r2, r2, #9
   2f30c:	str	r2, [sp]
   2f310:	str	r3, [sp, #4]
   2f314:	mov	r0, #0
   2f318:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f31c:	mvn	r2, #0
   2f320:	mvn	r3, #0
   2f324:	strd	r2, [sp]
   2f328:	mov	r0, #1
   2f32c:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f330:	ldr	r2, [sp]
   2f334:	ldr	r3, [sp, #4]
   2f338:	mov	r0, #0
   2f33c:	mov	r1, r0
   2f340:	lsr	r0, r3, #22
   2f344:	orrs	r1, r0, r1
   2f348:	bne	2f368 <__assert_fail@plt+0x1cda4>
   2f34c:	lsl	r3, r3, #10
   2f350:	orr	r3, r3, r2, lsr #22
   2f354:	lsl	r2, r2, #10
   2f358:	str	r2, [sp]
   2f35c:	str	r3, [sp, #4]
   2f360:	mov	r0, #0
   2f364:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f368:	mvn	r2, #0
   2f36c:	mvn	r3, #0
   2f370:	strd	r2, [sp]
   2f374:	mov	r0, #1
   2f378:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f37c:	mov	r2, #6
   2f380:	mov	r0, sp
   2f384:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f388:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f38c:	mov	r2, #3
   2f390:	mov	r0, sp
   2f394:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f398:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f39c:	mov	r2, #1
   2f3a0:	mov	r0, sp
   2f3a4:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f3a8:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f3ac:	mov	r2, #2
   2f3b0:	mov	r0, sp
   2f3b4:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f3b8:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f3bc:	mov	r2, #5
   2f3c0:	mov	r0, sp
   2f3c4:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f3c8:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f3cc:	mov	r2, #4
   2f3d0:	mov	r0, sp
   2f3d4:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f3d8:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f3dc:	ldr	r3, [sp]
   2f3e0:	ldr	r2, [sp, #4]
   2f3e4:	mov	r0, #0
   2f3e8:	mov	r1, r0
   2f3ec:	lsr	r0, r2, #31
   2f3f0:	orrs	r1, r0, r1
   2f3f4:	bne	2f410 <__assert_fail@plt+0x1ce4c>
   2f3f8:	adds	r3, r3, r3
   2f3fc:	adc	r2, r2, r2
   2f400:	str	r3, [sp]
   2f404:	str	r2, [sp, #4]
   2f408:	mov	r0, #0
   2f40c:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f410:	mvn	r2, #0
   2f414:	mvn	r3, #0
   2f418:	strd	r2, [sp]
   2f41c:	mov	r0, #1
   2f420:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f424:	mov	r2, #8
   2f428:	mov	r0, sp
   2f42c:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f430:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f434:	mov	r2, #7
   2f438:	mov	r0, sp
   2f43c:	bl	2ee28 <__assert_fail@plt+0x1c864>
   2f440:	b	2f458 <__assert_fail@plt+0x1ce94>
   2f444:	ldrd	r2, [sp]
   2f448:	strd	r2, [r9]
   2f44c:	orr	r4, r4, #2
   2f450:	b	2f158 <__assert_fail@plt+0x1cb94>
   2f454:	mov	r0, #0
   2f458:	orr	r4, r4, r0
   2f45c:	ldr	r3, [r6]
   2f460:	add	r2, r3, r7
   2f464:	str	r2, [r6]
   2f468:	ldrb	r3, [r3, r7]
   2f46c:	cmp	r3, #0
   2f470:	orrne	r4, r4, #2
   2f474:	b	2f150 <__assert_fail@plt+0x1cb8c>
   2f478:	mov	r4, #4
   2f47c:	b	2f158 <__assert_fail@plt+0x1cb94>
   2f480:	mov	r4, #4
   2f484:	b	2f158 <__assert_fail@plt+0x1cb94>
   2f488:	str	r4, [sp, #-8]!
   2f48c:	str	lr, [sp, #4]
   2f490:	sub	sp, sp, #8
   2f494:	mov	r3, #0
   2f498:	str	r3, [sp, #4]
   2f49c:	str	r3, [sp]
   2f4a0:	movw	r3, #46416	; 0xb550
   2f4a4:	movt	r3, #5
   2f4a8:	ldr	r3, [r3]
   2f4ac:	mov	r2, #10
   2f4b0:	mov	r1, sp
   2f4b4:	add	r0, sp, #4
   2f4b8:	bl	11eec <__getdelim@plt>
   2f4bc:	cmp	r0, #0
   2f4c0:	movle	r4, #0
   2f4c4:	ble	2f4f4 <__assert_fail@plt+0x1cf30>
   2f4c8:	sub	r0, r0, #1
   2f4cc:	ldr	r3, [sp, #4]
   2f4d0:	ldrb	r2, [r3, r0]
   2f4d4:	cmp	r2, #10
   2f4d8:	moveq	r2, #0
   2f4dc:	strbeq	r2, [r3, r0]
   2f4e0:	ldr	r0, [sp, #4]
   2f4e4:	bl	12408 <rpmatch@plt>
   2f4e8:	cmp	r0, #0
   2f4ec:	movle	r4, #0
   2f4f0:	movgt	r4, #1
   2f4f4:	ldr	r0, [sp, #4]
   2f4f8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2f4fc:	mov	r0, r4
   2f500:	add	sp, sp, #8
   2f504:	ldr	r4, [sp]
   2f508:	add	sp, sp, #4
   2f50c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f510:	strd	r4, [sp, #-16]!
   2f514:	str	r6, [sp, #8]
   2f518:	str	lr, [sp, #12]
   2f51c:	cmp	r1, #0
   2f520:	cmpne	r0, #0
   2f524:	beq	2f560 <__assert_fail@plt+0x1cf9c>
   2f528:	mov	r2, r0
   2f52c:	mov	r3, r1
   2f530:	umull	r4, r5, r0, r1
   2f534:	adds	r1, r5, #0
   2f538:	movne	r1, #1
   2f53c:	cmp	r4, #0
   2f540:	movlt	r1, #1
   2f544:	cmp	r1, #0
   2f548:	beq	2f568 <__assert_fail@plt+0x1cfa4>
   2f54c:	bl	12318 <__errno_location@plt>
   2f550:	mov	r3, #12
   2f554:	str	r3, [r0]
   2f558:	mov	r0, #0
   2f55c:	b	2f574 <__assert_fail@plt+0x1cfb0>
   2f560:	mov	r3, #1
   2f564:	mov	r2, r3
   2f568:	mov	r1, r3
   2f56c:	mov	r0, r2
   2f570:	bl	11ea4 <calloc@plt>
   2f574:	ldrd	r4, [sp]
   2f578:	ldr	r6, [sp, #8]
   2f57c:	add	sp, sp, #12
   2f580:	pop	{pc}		; (ldr pc, [sp], #4)
   2f584:	ldr	r0, [r0]
   2f588:	cmp	r0, #0
   2f58c:	bxlt	lr
   2f590:	str	r4, [sp, #-8]!
   2f594:	str	lr, [sp, #4]
   2f598:	bl	1257c <close@plt>
   2f59c:	cmp	r0, #0
   2f5a0:	bne	2f5b0 <__assert_fail@plt+0x1cfec>
   2f5a4:	ldr	r4, [sp]
   2f5a8:	add	sp, sp, #4
   2f5ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2f5b0:	movw	r3, #41360	; 0xa190
   2f5b4:	movt	r3, #4
   2f5b8:	mov	r2, #64	; 0x40
   2f5bc:	movw	r1, #41384	; 0xa1a8
   2f5c0:	movt	r1, #4
   2f5c4:	movw	r0, #41400	; 0xa1b8
   2f5c8:	movt	r0, #4
   2f5cc:	bl	125c4 <__assert_fail@plt>
   2f5d0:	strd	r4, [sp, #-16]!
   2f5d4:	str	r6, [sp, #8]
   2f5d8:	str	lr, [sp, #12]
   2f5dc:	mov	r4, r0
   2f5e0:	mov	r2, #18688	; 0x4900
   2f5e4:	ldr	r0, [r0]
   2f5e8:	bl	122f4 <openat64@plt>
   2f5ec:	subs	r5, r0, #0
   2f5f0:	blt	2f614 <__assert_fail@plt+0x1d050>
   2f5f4:	mov	r0, r4
   2f5f8:	bl	2f584 <__assert_fail@plt+0x1cfc0>
   2f5fc:	str	r5, [r4]
   2f600:	mov	r0, #0
   2f604:	ldrd	r4, [sp]
   2f608:	ldr	r6, [sp, #8]
   2f60c:	add	sp, sp, #12
   2f610:	pop	{pc}		; (ldr pc, [sp], #4)
   2f614:	mvn	r0, #0
   2f618:	b	2f604 <__assert_fail@plt+0x1d040>
   2f61c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2f620:	strd	r6, [sp, #8]
   2f624:	strd	r8, [sp, #16]
   2f628:	str	sl, [sp, #24]
   2f62c:	str	lr, [sp, #28]
   2f630:	sub	sp, sp, #8
   2f634:	mov	r6, r0
   2f638:	bl	120f0 <chdir@plt>
   2f63c:	subs	r4, r0, #0
   2f640:	beq	2f658 <__assert_fail@plt+0x1d094>
   2f644:	bl	12318 <__errno_location@plt>
   2f648:	mov	sl, r0
   2f64c:	ldr	r3, [r0]
   2f650:	cmp	r3, #36	; 0x24
   2f654:	beq	2f678 <__assert_fail@plt+0x1d0b4>
   2f658:	mov	r0, r4
   2f65c:	add	sp, sp, #8
   2f660:	ldrd	r4, [sp]
   2f664:	ldrd	r6, [sp, #8]
   2f668:	ldrd	r8, [sp, #16]
   2f66c:	ldr	sl, [sp, #24]
   2f670:	add	sp, sp, #28
   2f674:	pop	{pc}		; (ldr pc, [sp], #4)
   2f678:	mov	r0, r6
   2f67c:	bl	122d0 <strlen@plt>
   2f680:	mvn	r3, #99	; 0x63
   2f684:	str	r3, [sp, #4]
   2f688:	subs	r7, r0, #0
   2f68c:	beq	2f79c <__assert_fail@plt+0x1d1d8>
   2f690:	cmp	r7, #4096	; 0x1000
   2f694:	bcc	2f7b8 <__assert_fail@plt+0x1d1f4>
   2f698:	movw	r1, #42516	; 0xa614
   2f69c:	movt	r1, #4
   2f6a0:	mov	r0, r6
   2f6a4:	bl	125b8 <strspn@plt>
   2f6a8:	mov	r5, r0
   2f6ac:	cmp	r0, #2
   2f6b0:	beq	2f7d4 <__assert_fail@plt+0x1d210>
   2f6b4:	cmp	r0, #0
   2f6b8:	moveq	r5, r6
   2f6bc:	bne	2f838 <__assert_fail@plt+0x1d274>
   2f6c0:	ldrb	r3, [r5]
   2f6c4:	cmp	r3, #47	; 0x2f
   2f6c8:	beq	2f858 <__assert_fail@plt+0x1d294>
   2f6cc:	add	r6, r6, r7
   2f6d0:	cmp	r5, r6
   2f6d4:	bhi	2f874 <__assert_fail@plt+0x1d2b0>
   2f6d8:	sub	r3, r6, r5
   2f6dc:	cmp	r3, #4096	; 0x1000
   2f6e0:	blt	2f758 <__assert_fail@plt+0x1d194>
   2f6e4:	mov	r9, #4096	; 0x1000
   2f6e8:	mov	r7, #47	; 0x2f
   2f6ec:	movw	r8, #42516	; 0xa614
   2f6f0:	movt	r8, #4
   2f6f4:	mov	r2, r9
   2f6f8:	mov	r1, r7
   2f6fc:	mov	r0, r5
   2f700:	bl	12300 <memrchr@plt>
   2f704:	subs	r4, r0, #0
   2f708:	beq	2f890 <__assert_fail@plt+0x1d2cc>
   2f70c:	mov	r3, #0
   2f710:	strb	r3, [r4]
   2f714:	sub	r3, r4, r5
   2f718:	cmp	r3, #4096	; 0x1000
   2f71c:	bge	2f8a0 <__assert_fail@plt+0x1d2dc>
   2f720:	mov	r1, r5
   2f724:	add	r0, sp, #4
   2f728:	bl	2f5d0 <__assert_fail@plt+0x1d00c>
   2f72c:	strb	r7, [r4]
   2f730:	cmp	r0, #0
   2f734:	bne	2f784 <__assert_fail@plt+0x1d1c0>
   2f738:	add	r4, r4, #1
   2f73c:	mov	r1, r8
   2f740:	mov	r0, r4
   2f744:	bl	125b8 <strspn@plt>
   2f748:	add	r5, r4, r0
   2f74c:	sub	r3, r6, r5
   2f750:	cmp	r3, #4096	; 0x1000
   2f754:	bge	2f6f4 <__assert_fail@plt+0x1d130>
   2f758:	cmp	r6, r5
   2f75c:	bls	2f774 <__assert_fail@plt+0x1d1b0>
   2f760:	mov	r1, r5
   2f764:	add	r0, sp, #4
   2f768:	bl	2f5d0 <__assert_fail@plt+0x1d00c>
   2f76c:	cmp	r0, #0
   2f770:	bne	2f784 <__assert_fail@plt+0x1d1c0>
   2f774:	ldr	r0, [sp, #4]
   2f778:	bl	124c8 <fchdir@plt>
   2f77c:	subs	r4, r0, #0
   2f780:	beq	2f8bc <__assert_fail@plt+0x1d2f8>
   2f784:	ldr	r4, [sl]
   2f788:	add	r0, sp, #4
   2f78c:	bl	2f584 <__assert_fail@plt+0x1cfc0>
   2f790:	str	r4, [sl]
   2f794:	mvn	r4, #0
   2f798:	b	2f658 <__assert_fail@plt+0x1d094>
   2f79c:	ldr	r3, [pc, #292]	; 2f8c8 <__assert_fail@plt+0x1d304>
   2f7a0:	mov	r2, #126	; 0x7e
   2f7a4:	movw	r1, #41384	; 0xa1a8
   2f7a8:	movt	r1, #4
   2f7ac:	movw	r0, #41416	; 0xa1c8
   2f7b0:	movt	r0, #4
   2f7b4:	bl	125c4 <__assert_fail@plt>
   2f7b8:	ldr	r3, [pc, #264]	; 2f8c8 <__assert_fail@plt+0x1d304>
   2f7bc:	mov	r2, #127	; 0x7f
   2f7c0:	movw	r1, #41384	; 0xa1a8
   2f7c4:	movt	r1, #4
   2f7c8:	movw	r0, #41424	; 0xa1d0
   2f7cc:	movt	r0, #4
   2f7d0:	bl	125c4 <__assert_fail@plt>
   2f7d4:	sub	r2, r7, #3
   2f7d8:	mov	r1, #47	; 0x2f
   2f7dc:	add	r0, r6, #3
   2f7e0:	bl	123a8 <memchr@plt>
   2f7e4:	subs	r4, r0, #0
   2f7e8:	moveq	r3, #36	; 0x24
   2f7ec:	streq	r3, [sl]
   2f7f0:	mvneq	r4, #0
   2f7f4:	beq	2f658 <__assert_fail@plt+0x1d094>
   2f7f8:	mov	r3, #0
   2f7fc:	strb	r3, [r4]
   2f800:	mov	r1, r6
   2f804:	add	r0, sp, #4
   2f808:	bl	2f5d0 <__assert_fail@plt+0x1d00c>
   2f80c:	mov	r3, #47	; 0x2f
   2f810:	strb	r3, [r4]
   2f814:	cmp	r0, #0
   2f818:	bne	2f784 <__assert_fail@plt+0x1d1c0>
   2f81c:	add	r4, r4, #1
   2f820:	movw	r1, #42516	; 0xa614
   2f824:	movt	r1, #4
   2f828:	mov	r0, r4
   2f82c:	bl	125b8 <strspn@plt>
   2f830:	add	r5, r4, r0
   2f834:	b	2f6c0 <__assert_fail@plt+0x1d0fc>
   2f838:	movw	r1, #42516	; 0xa614
   2f83c:	movt	r1, #4
   2f840:	add	r0, sp, #4
   2f844:	bl	2f5d0 <__assert_fail@plt+0x1d00c>
   2f848:	cmp	r0, #0
   2f84c:	addeq	r5, r6, r5
   2f850:	beq	2f6c0 <__assert_fail@plt+0x1d0fc>
   2f854:	b	2f784 <__assert_fail@plt+0x1d1c0>
   2f858:	ldr	r3, [pc, #104]	; 2f8c8 <__assert_fail@plt+0x1d304>
   2f85c:	mov	r2, #162	; 0xa2
   2f860:	movw	r1, #41384	; 0xa1a8
   2f864:	movt	r1, #4
   2f868:	movw	r0, #41436	; 0xa1dc
   2f86c:	movt	r0, #4
   2f870:	bl	125c4 <__assert_fail@plt>
   2f874:	ldr	r3, [pc, #76]	; 2f8c8 <__assert_fail@plt+0x1d304>
   2f878:	mov	r2, #163	; 0xa3
   2f87c:	movw	r1, #41384	; 0xa1a8
   2f880:	movt	r1, #4
   2f884:	movw	r0, #41448	; 0xa1e8
   2f888:	movt	r0, #4
   2f88c:	bl	125c4 <__assert_fail@plt>
   2f890:	mov	r3, #36	; 0x24
   2f894:	str	r3, [sl]
   2f898:	mvn	r4, #0
   2f89c:	b	2f658 <__assert_fail@plt+0x1d094>
   2f8a0:	ldr	r3, [pc, #32]	; 2f8c8 <__assert_fail@plt+0x1d304>
   2f8a4:	mov	r2, #179	; 0xb3
   2f8a8:	movw	r1, #41384	; 0xa1a8
   2f8ac:	movt	r1, #4
   2f8b0:	movw	r0, #41464	; 0xa1f8
   2f8b4:	movt	r0, #4
   2f8b8:	bl	125c4 <__assert_fail@plt>
   2f8bc:	add	r0, sp, #4
   2f8c0:	bl	2f584 <__assert_fail@plt+0x1cfc0>
   2f8c4:	b	2f658 <__assert_fail@plt+0x1d094>
   2f8c8:	muleq	r4, ip, r1
   2f8cc:	push	{r1, r2, r3}
   2f8d0:	strd	r4, [sp, #-16]!
   2f8d4:	str	r6, [sp, #8]
   2f8d8:	str	lr, [sp, #12]
   2f8dc:	sub	sp, sp, #12
   2f8e0:	mov	r5, r0
   2f8e4:	ldr	r1, [sp, #28]
   2f8e8:	add	r3, sp, #32
   2f8ec:	str	r3, [sp, #4]
   2f8f0:	cmp	r1, #0
   2f8f4:	beq	2f93c <__assert_fail@plt+0x1d378>
   2f8f8:	movw	r3, #1030	; 0x406
   2f8fc:	cmp	r1, r3
   2f900:	beq	2f978 <__assert_fail@plt+0x1d3b4>
   2f904:	cmp	r1, #11
   2f908:	beq	2fb28 <__assert_fail@plt+0x1d564>
   2f90c:	bgt	2fab4 <__assert_fail@plt+0x1d4f0>
   2f910:	cmp	r1, #3
   2f914:	beq	2fb28 <__assert_fail@plt+0x1d564>
   2f918:	ble	2fa74 <__assert_fail@plt+0x1d4b0>
   2f91c:	cmp	r1, #8
   2f920:	beq	2fa94 <__assert_fail@plt+0x1d4d0>
   2f924:	ble	2fa8c <__assert_fail@plt+0x1d4c8>
   2f928:	cmp	r1, #9
   2f92c:	beq	2fb28 <__assert_fail@plt+0x1d564>
   2f930:	cmp	r1, #10
   2f934:	bne	2faec <__assert_fail@plt+0x1d528>
   2f938:	b	2fa94 <__assert_fail@plt+0x1d4d0>
   2f93c:	ldr	r3, [sp, #4]
   2f940:	add	r2, r3, #4
   2f944:	str	r2, [sp, #4]
   2f948:	ldr	r2, [r3]
   2f94c:	mov	r1, #0
   2f950:	bl	123fc <fcntl64@plt>
   2f954:	mov	r4, r0
   2f958:	mov	r0, r4
   2f95c:	add	sp, sp, #12
   2f960:	ldrd	r4, [sp]
   2f964:	ldr	r6, [sp, #8]
   2f968:	ldr	lr, [sp, #12]
   2f96c:	add	sp, sp, #16
   2f970:	add	sp, sp, #12
   2f974:	bx	lr
   2f978:	ldr	r3, [sp, #4]
   2f97c:	add	r2, r3, #4
   2f980:	str	r2, [sp, #4]
   2f984:	ldr	r6, [r3]
   2f988:	movw	r3, #48696	; 0xbe38
   2f98c:	movt	r3, #5
   2f990:	ldr	r3, [r3]
   2f994:	cmp	r3, #0
   2f998:	blt	2fa00 <__assert_fail@plt+0x1d43c>
   2f99c:	mov	r2, r6
   2f9a0:	movw	r1, #1030	; 0x406
   2f9a4:	bl	123fc <fcntl64@plt>
   2f9a8:	subs	r4, r0, #0
   2f9ac:	blt	2f9c4 <__assert_fail@plt+0x1d400>
   2f9b0:	movw	r3, #48696	; 0xbe38
   2f9b4:	movt	r3, #5
   2f9b8:	mov	r2, #1
   2f9bc:	str	r2, [r3]
   2f9c0:	b	2f958 <__assert_fail@plt+0x1d394>
   2f9c4:	bl	12318 <__errno_location@plt>
   2f9c8:	ldr	r3, [r0]
   2f9cc:	cmp	r3, #22
   2f9d0:	bne	2f9b0 <__assert_fail@plt+0x1d3ec>
   2f9d4:	mov	r2, r6
   2f9d8:	mov	r1, #0
   2f9dc:	mov	r0, r5
   2f9e0:	bl	123fc <fcntl64@plt>
   2f9e4:	subs	r4, r0, #0
   2f9e8:	blt	2f958 <__assert_fail@plt+0x1d394>
   2f9ec:	movw	r3, #48696	; 0xbe38
   2f9f0:	movt	r3, #5
   2f9f4:	mvn	r2, #0
   2f9f8:	str	r2, [r3]
   2f9fc:	b	2fa28 <__assert_fail@plt+0x1d464>
   2fa00:	mov	r2, r6
   2fa04:	mov	r1, #0
   2fa08:	bl	123fc <fcntl64@plt>
   2fa0c:	subs	r4, r0, #0
   2fa10:	blt	2f958 <__assert_fail@plt+0x1d394>
   2fa14:	movw	r3, #48696	; 0xbe38
   2fa18:	movt	r3, #5
   2fa1c:	ldr	r3, [r3]
   2fa20:	cmn	r3, #1
   2fa24:	bne	2f958 <__assert_fail@plt+0x1d394>
   2fa28:	mov	r1, #1
   2fa2c:	mov	r0, r4
   2fa30:	bl	123fc <fcntl64@plt>
   2fa34:	subs	r2, r0, #0
   2fa38:	blt	2fa54 <__assert_fail@plt+0x1d490>
   2fa3c:	orr	r2, r2, #1
   2fa40:	mov	r1, #2
   2fa44:	mov	r0, r4
   2fa48:	bl	123fc <fcntl64@plt>
   2fa4c:	cmn	r0, #1
   2fa50:	bne	2f958 <__assert_fail@plt+0x1d394>
   2fa54:	bl	12318 <__errno_location@plt>
   2fa58:	mov	r5, r0
   2fa5c:	ldr	r6, [r0]
   2fa60:	mov	r0, r4
   2fa64:	bl	1257c <close@plt>
   2fa68:	str	r6, [r5]
   2fa6c:	mvn	r4, #0
   2fa70:	b	2f958 <__assert_fail@plt+0x1d394>
   2fa74:	cmp	r1, #1
   2fa78:	beq	2fb28 <__assert_fail@plt+0x1d564>
   2fa7c:	bgt	2fa94 <__assert_fail@plt+0x1d4d0>
   2fa80:	cmp	r1, #0
   2fa84:	bne	2faec <__assert_fail@plt+0x1d528>
   2fa88:	b	2fa94 <__assert_fail@plt+0x1d4d0>
   2fa8c:	cmp	r1, #4
   2fa90:	bne	2faec <__assert_fail@plt+0x1d528>
   2fa94:	ldr	r3, [sp, #4]
   2fa98:	add	r2, r3, #4
   2fa9c:	str	r2, [sp, #4]
   2faa0:	ldr	r2, [r3]
   2faa4:	mov	r0, r5
   2faa8:	bl	123fc <fcntl64@plt>
   2faac:	mov	r4, r0
   2fab0:	b	2f958 <__assert_fail@plt+0x1d394>
   2fab4:	movw	r3, #1031	; 0x407
   2fab8:	cmp	r1, r3
   2fabc:	bgt	2fb0c <__assert_fail@plt+0x1d548>
   2fac0:	movw	r3, #1030	; 0x406
   2fac4:	cmp	r1, r3
   2fac8:	bge	2fa94 <__assert_fail@plt+0x1d4d0>
   2facc:	movw	r3, #1025	; 0x401
   2fad0:	cmp	r1, r3
   2fad4:	beq	2fb28 <__assert_fail@plt+0x1d564>
   2fad8:	movw	r3, #1026	; 0x402
   2fadc:	cmp	r1, r3
   2fae0:	beq	2fa94 <__assert_fail@plt+0x1d4d0>
   2fae4:	cmp	r1, #1024	; 0x400
   2fae8:	beq	2fa94 <__assert_fail@plt+0x1d4d0>
   2faec:	ldr	r3, [sp, #4]
   2faf0:	add	r2, r3, #4
   2faf4:	str	r2, [sp, #4]
   2faf8:	ldr	r2, [r3]
   2fafc:	mov	r0, r5
   2fb00:	bl	123fc <fcntl64@plt>
   2fb04:	mov	r4, r0
   2fb08:	b	2f958 <__assert_fail@plt+0x1d394>
   2fb0c:	movw	r3, #1033	; 0x409
   2fb10:	cmp	r1, r3
   2fb14:	beq	2fa94 <__assert_fail@plt+0x1d4d0>
   2fb18:	blt	2fb28 <__assert_fail@plt+0x1d564>
   2fb1c:	movw	r3, #1034	; 0x40a
   2fb20:	cmp	r1, r3
   2fb24:	bne	2faec <__assert_fail@plt+0x1d528>
   2fb28:	mov	r0, r5
   2fb2c:	bl	123fc <fcntl64@plt>
   2fb30:	mov	r4, r0
   2fb34:	b	2f958 <__assert_fail@plt+0x1d394>
   2fb38:	str	r4, [sp, #-8]!
   2fb3c:	str	lr, [sp, #4]
   2fb40:	sub	sp, sp, #8
   2fb44:	subs	r4, r0, #0
   2fb48:	beq	2fb5c <__assert_fail@plt+0x1d598>
   2fb4c:	mov	r0, r4
   2fb50:	bl	12240 <__freading@plt>
   2fb54:	cmp	r0, #0
   2fb58:	bne	2fb74 <__assert_fail@plt+0x1d5b0>
   2fb5c:	mov	r0, r4
   2fb60:	bl	11f64 <fflush@plt>
   2fb64:	add	sp, sp, #8
   2fb68:	ldr	r4, [sp]
   2fb6c:	add	sp, sp, #4
   2fb70:	pop	{pc}		; (ldr pc, [sp], #4)
   2fb74:	ldr	r3, [r4]
   2fb78:	tst	r3, #256	; 0x100
   2fb7c:	bne	2fb8c <__assert_fail@plt+0x1d5c8>
   2fb80:	mov	r0, r4
   2fb84:	bl	11f64 <fflush@plt>
   2fb88:	b	2fb64 <__assert_fail@plt+0x1d5a0>
   2fb8c:	mov	r3, #1
   2fb90:	str	r3, [sp]
   2fb94:	mov	r2, #0
   2fb98:	mov	r3, #0
   2fb9c:	mov	r0, r4
   2fba0:	bl	2fc08 <__assert_fail@plt+0x1d644>
   2fba4:	b	2fb80 <__assert_fail@plt+0x1d5bc>
   2fba8:	strd	r4, [sp, #-12]!
   2fbac:	str	lr, [sp, #8]
   2fbb0:	sub	sp, sp, #12
   2fbb4:	mov	r5, r0
   2fbb8:	bl	12318 <__errno_location@plt>
   2fbbc:	mov	r4, r0
   2fbc0:	ldr	r3, [r0]
   2fbc4:	str	r3, [sp]
   2fbc8:	str	r3, [sp, #4]
   2fbcc:	mov	r3, #0
   2fbd0:	str	r3, [r0]
   2fbd4:	mov	r0, r5
   2fbd8:	bl	11fa0 <free@plt>
   2fbdc:	ldr	r3, [r4]
   2fbe0:	clz	r3, r3
   2fbe4:	lsr	r3, r3, #5
   2fbe8:	add	r2, sp, #8
   2fbec:	add	r3, r2, r3, lsl #2
   2fbf0:	ldr	r3, [r3, #-8]
   2fbf4:	str	r3, [r4]
   2fbf8:	add	sp, sp, #12
   2fbfc:	ldrd	r4, [sp]
   2fc00:	add	sp, sp, #8
   2fc04:	pop	{pc}		; (ldr pc, [sp], #4)
   2fc08:	str	r4, [sp, #-16]!
   2fc0c:	strd	r6, [sp, #4]
   2fc10:	str	lr, [sp, #12]
   2fc14:	sub	sp, sp, #8
   2fc18:	mov	r4, r0
   2fc1c:	mov	r6, r2
   2fc20:	mov	r7, r3
   2fc24:	ldr	r2, [r0, #8]
   2fc28:	ldr	r3, [r0, #4]
   2fc2c:	cmp	r2, r3
   2fc30:	beq	2fc60 <__assert_fail@plt+0x1d69c>
   2fc34:	ldr	r3, [sp, #24]
   2fc38:	str	r3, [sp]
   2fc3c:	mov	r2, r6
   2fc40:	mov	r3, r7
   2fc44:	mov	r0, r4
   2fc48:	bl	123e4 <fseeko64@plt>
   2fc4c:	add	sp, sp, #8
   2fc50:	ldr	r4, [sp]
   2fc54:	ldrd	r6, [sp, #4]
   2fc58:	add	sp, sp, #12
   2fc5c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fc60:	ldr	r2, [r0, #20]
   2fc64:	ldr	r3, [r0, #16]
   2fc68:	cmp	r2, r3
   2fc6c:	bne	2fc34 <__assert_fail@plt+0x1d670>
   2fc70:	ldr	r3, [r0, #36]	; 0x24
   2fc74:	cmp	r3, #0
   2fc78:	bne	2fc34 <__assert_fail@plt+0x1d670>
   2fc7c:	bl	12390 <fileno@plt>
   2fc80:	ldr	r3, [sp, #24]
   2fc84:	str	r3, [sp]
   2fc88:	mov	r2, r6
   2fc8c:	mov	r3, r7
   2fc90:	bl	12150 <lseek64@plt>
   2fc94:	mvn	r2, #0
   2fc98:	mvn	r3, #0
   2fc9c:	cmp	r1, r3
   2fca0:	cmpeq	r0, r2
   2fca4:	beq	2fcc0 <__assert_fail@plt+0x1d6fc>
   2fca8:	ldr	r3, [r4]
   2fcac:	bic	r3, r3, #16
   2fcb0:	str	r3, [r4]
   2fcb4:	strd	r0, [r4, #80]	; 0x50
   2fcb8:	mov	r0, #0
   2fcbc:	b	2fc4c <__assert_fail@plt+0x1d688>
   2fcc0:	mvn	r0, #0
   2fcc4:	b	2fc4c <__assert_fail@plt+0x1d688>
   2fcc8:	strd	r4, [sp, #-8]!
   2fccc:	ldrd	r4, [r0, #8]
   2fcd0:	ldrd	r2, [r1, #8]
   2fcd4:	cmp	r5, r3
   2fcd8:	cmpeq	r4, r2
   2fcdc:	movne	r0, #0
   2fce0:	beq	2fcf0 <__assert_fail@plt+0x1d72c>
   2fce4:	ldrd	r4, [sp]
   2fce8:	add	sp, sp, #8
   2fcec:	bx	lr
   2fcf0:	ldrd	r4, [r0]
   2fcf4:	ldrd	r2, [r1]
   2fcf8:	cmp	r5, r3
   2fcfc:	cmpeq	r4, r2
   2fd00:	moveq	r0, #1
   2fd04:	movne	r0, #0
   2fd08:	b	2fce4 <__assert_fail@plt+0x1d720>
   2fd0c:	str	r4, [sp, #-8]!
   2fd10:	str	lr, [sp, #4]
   2fd14:	mov	r2, r1
   2fd18:	mov	r3, #0
   2fd1c:	ldrd	r0, [r0, #8]
   2fd20:	bl	443f0 <__assert_fail@plt+0x31e2c>
   2fd24:	mov	r0, r2
   2fd28:	ldr	r4, [sp]
   2fd2c:	add	sp, sp, #4
   2fd30:	pop	{pc}		; (ldr pc, [sp], #4)
   2fd34:	str	r4, [sp, #-8]!
   2fd38:	str	lr, [sp, #4]
   2fd3c:	mov	r2, r1
   2fd40:	mov	r3, #0
   2fd44:	ldrd	r0, [r0]
   2fd48:	bl	443f0 <__assert_fail@plt+0x31e2c>
   2fd4c:	mov	r0, r2
   2fd50:	ldr	r4, [sp]
   2fd54:	add	sp, sp, #4
   2fd58:	pop	{pc}		; (ldr pc, [sp], #4)
   2fd5c:	strd	r4, [sp, #-8]!
   2fd60:	ldrd	r4, [r0]
   2fd64:	ldrd	r2, [r1]
   2fd68:	cmp	r5, r3
   2fd6c:	cmpeq	r4, r2
   2fd70:	moveq	r0, #1
   2fd74:	movne	r0, #0
   2fd78:	ldrd	r4, [sp]
   2fd7c:	add	sp, sp, #8
   2fd80:	bx	lr
   2fd84:	strd	r4, [sp, #-8]!
   2fd88:	ldr	r3, [r0]
   2fd8c:	ldrd	r4, [r3, #160]	; 0xa0
   2fd90:	ldr	r3, [r1]
   2fd94:	ldrd	r2, [r3, #160]	; 0xa0
   2fd98:	cmp	r5, r3
   2fd9c:	cmpeq	r4, r2
   2fda0:	movhi	r0, #1
   2fda4:	movls	r0, #0
   2fda8:	movcc	r3, #1
   2fdac:	movcs	r3, #0
   2fdb0:	sub	r0, r0, r3
   2fdb4:	ldrd	r4, [sp]
   2fdb8:	add	sp, sp, #8
   2fdbc:	bx	lr
   2fdc0:	strd	r4, [sp, #-16]!
   2fdc4:	str	r6, [sp, #8]
   2fdc8:	str	lr, [sp, #12]
   2fdcc:	mov	r4, r0
   2fdd0:	ldr	r3, [r0, #36]	; 0x24
   2fdd4:	add	r1, r1, #256	; 0x100
   2fdd8:	adds	r1, r1, r3
   2fddc:	bcs	2fe0c <__assert_fail@plt+0x1d848>
   2fde0:	str	r1, [r0, #36]	; 0x24
   2fde4:	ldr	r0, [r0, #24]
   2fde8:	bl	32ce0 <__assert_fail@plt+0x2071c>
   2fdec:	cmp	r0, #0
   2fdf0:	strne	r0, [r4, #24]
   2fdf4:	movne	r0, #1
   2fdf8:	beq	2fe30 <__assert_fail@plt+0x1d86c>
   2fdfc:	ldrd	r4, [sp]
   2fe00:	ldr	r6, [sp, #8]
   2fe04:	add	sp, sp, #12
   2fe08:	pop	{pc}		; (ldr pc, [sp], #4)
   2fe0c:	ldr	r0, [r0, #24]
   2fe10:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2fe14:	mov	r5, #0
   2fe18:	str	r5, [r4, #24]
   2fe1c:	bl	12318 <__errno_location@plt>
   2fe20:	mov	r3, #36	; 0x24
   2fe24:	str	r3, [r0]
   2fe28:	mov	r0, r5
   2fe2c:	b	2fdfc <__assert_fail@plt+0x1d838>
   2fe30:	ldr	r0, [r4, #24]
   2fe34:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   2fe38:	mov	r0, #0
   2fe3c:	str	r0, [r4, #24]
   2fe40:	b	2fdfc <__assert_fail@plt+0x1d838>
   2fe44:	strd	r4, [sp, #-16]!
   2fe48:	str	r6, [sp, #8]
   2fe4c:	str	lr, [sp, #12]
   2fe50:	sub	sp, sp, #8
   2fe54:	mov	r4, r1
   2fe58:	add	r5, r1, #64	; 0x40
   2fe5c:	ldr	r3, [r1, #48]	; 0x30
   2fe60:	cmp	r3, #0
   2fe64:	bne	2fe74 <__assert_fail@plt+0x1d8b0>
   2fe68:	ldr	r3, [r0, #48]	; 0x30
   2fe6c:	tst	r3, #1
   2fe70:	bne	2fe84 <__assert_fail@plt+0x1d8c0>
   2fe74:	ldr	r3, [r0, #48]	; 0x30
   2fe78:	ubfx	r3, r3, #1, #1
   2fe7c:	orrs	r3, r2, r3
   2fe80:	beq	2fef8 <__assert_fail@plt+0x1d934>
   2fe84:	mov	r2, r5
   2fe88:	ldr	r1, [r4, #24]
   2fe8c:	mov	r0, #3
   2fe90:	bl	12528 <__xstat64@plt>
   2fe94:	cmp	r0, #0
   2fe98:	beq	2ff1c <__assert_fail@plt+0x1d958>
   2fe9c:	bl	12318 <__errno_location@plt>
   2fea0:	mov	r6, r0
   2fea4:	ldr	r3, [r0]
   2fea8:	cmp	r3, #2
   2feac:	bne	2fed8 <__assert_fail@plt+0x1d914>
   2feb0:	mov	r2, r5
   2feb4:	ldr	r1, [r4, #24]
   2feb8:	mov	r0, #3
   2febc:	bl	12588 <__lxstat64@plt>
   2fec0:	cmp	r0, #0
   2fec4:	bne	2fed8 <__assert_fail@plt+0x1d914>
   2fec8:	mov	r3, #0
   2fecc:	str	r3, [r6]
   2fed0:	mov	r0, #13
   2fed4:	b	2ff40 <__assert_fail@plt+0x1d97c>
   2fed8:	ldr	r3, [r6]
   2fedc:	str	r3, [r4, #32]
   2fee0:	mov	r2, #104	; 0x68
   2fee4:	mov	r1, #0
   2fee8:	mov	r0, r5
   2feec:	bl	12348 <memset@plt>
   2fef0:	mov	r0, #10
   2fef4:	b	2ff40 <__assert_fail@plt+0x1d97c>
   2fef8:	mov	r3, #256	; 0x100
   2fefc:	str	r3, [sp]
   2ff00:	mov	r3, r5
   2ff04:	ldr	r2, [r4, #24]
   2ff08:	ldr	r1, [r0, #32]
   2ff0c:	mov	r0, #3
   2ff10:	bl	120fc <__fxstatat64@plt>
   2ff14:	cmp	r0, #0
   2ff18:	bne	2ff54 <__assert_fail@plt+0x1d990>
   2ff1c:	ldr	r3, [r4, #80]	; 0x50
   2ff20:	and	r3, r3, #61440	; 0xf000
   2ff24:	cmp	r3, #16384	; 0x4000
   2ff28:	beq	2ff64 <__assert_fail@plt+0x1d9a0>
   2ff2c:	cmp	r3, #40960	; 0xa000
   2ff30:	beq	2ffac <__assert_fail@plt+0x1d9e8>
   2ff34:	cmp	r3, #32768	; 0x8000
   2ff38:	movne	r0, #3
   2ff3c:	moveq	r0, #8
   2ff40:	add	sp, sp, #8
   2ff44:	ldrd	r4, [sp]
   2ff48:	ldr	r6, [sp, #8]
   2ff4c:	add	sp, sp, #12
   2ff50:	pop	{pc}		; (ldr pc, [sp], #4)
   2ff54:	bl	12318 <__errno_location@plt>
   2ff58:	ldr	r3, [r0]
   2ff5c:	str	r3, [r4, #32]
   2ff60:	b	2fee0 <__assert_fail@plt+0x1d91c>
   2ff64:	ldrb	r3, [r4, #168]	; 0xa8
   2ff68:	cmp	r3, #46	; 0x2e
   2ff6c:	movne	r0, #1
   2ff70:	bne	2ff40 <__assert_fail@plt+0x1d97c>
   2ff74:	ldrb	r3, [r4, #169]	; 0xa9
   2ff78:	cmp	r3, #0
   2ff7c:	beq	2ff98 <__assert_fail@plt+0x1d9d4>
   2ff80:	ldr	r3, [r4, #168]	; 0xa8
   2ff84:	bic	r3, r3, #-16777216	; 0xff000000
   2ff88:	bic	r3, r3, #255	; 0xff
   2ff8c:	cmp	r3, #11776	; 0x2e00
   2ff90:	movne	r0, #1
   2ff94:	bne	2ff40 <__assert_fail@plt+0x1d97c>
   2ff98:	ldr	r3, [r4, #48]	; 0x30
   2ff9c:	cmp	r3, #0
   2ffa0:	moveq	r0, #1
   2ffa4:	movne	r0, #5
   2ffa8:	b	2ff40 <__assert_fail@plt+0x1d97c>
   2ffac:	mov	r0, #12
   2ffb0:	b	2ff40 <__assert_fail@plt+0x1d97c>
   2ffb4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ffb8:	strd	r6, [sp, #8]
   2ffbc:	str	r8, [sp, #16]
   2ffc0:	str	lr, [sp, #20]
   2ffc4:	mov	r6, r0
   2ffc8:	mov	r4, r1
   2ffcc:	mov	r5, r2
   2ffd0:	ldr	r7, [r0, #44]	; 0x2c
   2ffd4:	ldr	r3, [r0, #40]	; 0x28
   2ffd8:	cmp	r3, r2
   2ffdc:	bcs	30008 <__assert_fail@plt+0x1da44>
   2ffe0:	add	r1, r2, #40	; 0x28
   2ffe4:	str	r1, [r0, #40]	; 0x28
   2ffe8:	cmn	r1, #-1073741823	; 0xc0000001
   2ffec:	bhi	30088 <__assert_fail@plt+0x1dac4>
   2fff0:	lsl	r1, r1, #2
   2fff4:	ldr	r0, [r0, #8]
   2fff8:	bl	32ce0 <__assert_fail@plt+0x2071c>
   2fffc:	cmp	r0, #0
   30000:	strne	r0, [r6, #8]
   30004:	beq	30088 <__assert_fail@plt+0x1dac4>
   30008:	ldr	r3, [r6, #8]
   3000c:	cmp	r4, #0
   30010:	beq	30024 <__assert_fail@plt+0x1da60>
   30014:	str	r4, [r3], #4
   30018:	ldr	r4, [r4, #8]
   3001c:	cmp	r4, #0
   30020:	bne	30014 <__assert_fail@plt+0x1da50>
   30024:	mov	r3, r7
   30028:	mov	r2, #4
   3002c:	mov	r1, r5
   30030:	ldr	r0, [r6, #8]
   30034:	bl	124e0 <qsort@plt>
   30038:	ldr	lr, [r6, #8]
   3003c:	ldr	r0, [lr]
   30040:	subs	r3, r5, #1
   30044:	beq	30068 <__assert_fail@plt+0x1daa4>
   30048:	mov	r2, lr
   3004c:	ldr	r1, [r2]
   30050:	ldr	ip, [r2, #4]!
   30054:	str	ip, [r1, #8]
   30058:	subs	r3, r3, #1
   3005c:	bne	3004c <__assert_fail@plt+0x1da88>
   30060:	sub	r5, r5, #-1073741823	; 0xc0000001
   30064:	add	lr, lr, r5, lsl #2
   30068:	ldr	r3, [lr]
   3006c:	mov	r2, #0
   30070:	str	r2, [r3, #8]
   30074:	ldrd	r4, [sp]
   30078:	ldrd	r6, [sp, #8]
   3007c:	ldr	r8, [sp, #16]
   30080:	add	sp, sp, #20
   30084:	pop	{pc}		; (ldr pc, [sp], #4)
   30088:	ldr	r0, [r6, #8]
   3008c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30090:	mov	r3, #0
   30094:	str	r3, [r6, #8]
   30098:	str	r3, [r6, #40]	; 0x28
   3009c:	mov	r0, r4
   300a0:	b	30074 <__assert_fail@plt+0x1dab0>
   300a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   300a8:	strd	r6, [sp, #8]
   300ac:	str	r8, [sp, #16]
   300b0:	str	lr, [sp, #20]
   300b4:	mov	r6, r0
   300b8:	mov	r7, r1
   300bc:	mov	r5, r2
   300c0:	add	r0, r2, #176	; 0xb0
   300c4:	bic	r0, r0, #7
   300c8:	bl	32148 <__assert_fail@plt+0x1fb84>
   300cc:	subs	r4, r0, #0
   300d0:	beq	3011c <__assert_fail@plt+0x1db58>
   300d4:	mov	r2, r5
   300d8:	mov	r1, r7
   300dc:	add	r0, r4, #168	; 0xa8
   300e0:	bl	12000 <memcpy@plt>
   300e4:	add	r2, r4, r5
   300e8:	mov	r3, #0
   300ec:	strb	r3, [r2, #168]	; 0xa8
   300f0:	str	r5, [r4, #52]	; 0x34
   300f4:	str	r6, [r4, #44]	; 0x2c
   300f8:	ldr	r2, [r6, #24]
   300fc:	str	r2, [r4, #28]
   30100:	str	r3, [r4, #32]
   30104:	str	r3, [r4, #12]
   30108:	strh	r3, [r4, #58]	; 0x3a
   3010c:	mov	r2, #3
   30110:	strh	r2, [r4, #60]	; 0x3c
   30114:	str	r3, [r4, #16]
   30118:	str	r3, [r4, #20]
   3011c:	mov	r0, r4
   30120:	ldrd	r4, [sp]
   30124:	ldrd	r6, [sp, #8]
   30128:	ldr	r8, [sp, #16]
   3012c:	add	sp, sp, #20
   30130:	pop	{pc}		; (ldr pc, [sp], #4)
   30134:	str	r4, [sp, #-8]!
   30138:	str	lr, [sp, #4]
   3013c:	sub	sp, sp, #8
   30140:	mov	r4, r0
   30144:	ldr	r3, [r0, #48]	; 0x30
   30148:	movw	r2, #258	; 0x102
   3014c:	tst	r2, r3
   30150:	beq	30198 <__assert_fail@plt+0x1dbd4>
   30154:	movw	r3, #64424	; 0xfba8
   30158:	movt	r3, #2
   3015c:	str	r3, [sp]
   30160:	movw	r3, #64712	; 0xfcc8
   30164:	movt	r3, #2
   30168:	movw	r2, #64780	; 0xfd0c
   3016c:	movt	r2, #2
   30170:	mov	r1, #0
   30174:	mov	r0, #31
   30178:	bl	23c5c <__assert_fail@plt+0x11698>
   3017c:	str	r0, [r4, #56]	; 0x38
   30180:	adds	r0, r0, #0
   30184:	movne	r0, #1
   30188:	add	sp, sp, #8
   3018c:	ldr	r4, [sp]
   30190:	add	sp, sp, #4
   30194:	pop	{pc}		; (ldr pc, [sp], #4)
   30198:	mov	r0, #32
   3019c:	bl	32148 <__assert_fail@plt+0x1fb84>
   301a0:	str	r0, [r4, #56]	; 0x38
   301a4:	cmp	r0, #0
   301a8:	moveq	r0, #0
   301ac:	beq	30188 <__assert_fail@plt+0x1dbc4>
   301b0:	bl	41c7c <__assert_fail@plt+0x2f6b8>
   301b4:	mov	r0, #1
   301b8:	b	30188 <__assert_fail@plt+0x1dbc4>
   301bc:	str	r4, [sp, #-8]!
   301c0:	str	lr, [sp, #4]
   301c4:	mov	ip, r1
   301c8:	ldr	r3, [r0, #48]	; 0x30
   301cc:	lsl	r2, r3, #11
   301d0:	and	r2, r2, #32768	; 0x8000
   301d4:	orr	r2, r2, #540672	; 0x84000
   301d8:	orr	r2, r2, #2304	; 0x900
   301dc:	tst	r3, #512	; 0x200
   301e0:	beq	301f8 <__assert_fail@plt+0x1dc34>
   301e4:	ldr	r0, [r0, #32]
   301e8:	bl	27520 <__assert_fail@plt+0x14f5c>
   301ec:	ldr	r4, [sp]
   301f0:	add	sp, sp, #4
   301f4:	pop	{pc}		; (ldr pc, [sp], #4)
   301f8:	mov	r1, r2
   301fc:	mov	r0, ip
   30200:	bl	2300c <__assert_fail@plt+0x10a48>
   30204:	b	301ec <__assert_fail@plt+0x1dc28>
   30208:	strd	r4, [sp, #-16]!
   3020c:	str	r6, [sp, #8]
   30210:	str	lr, [sp, #12]
   30214:	subs	r4, r0, #0
   30218:	bne	30244 <__assert_fail@plt+0x1dc80>
   3021c:	ldrd	r4, [sp]
   30220:	ldr	r6, [sp, #8]
   30224:	add	sp, sp, #12
   30228:	pop	{pc}		; (ldr pc, [sp], #4)
   3022c:	bl	12594 <closedir@plt>
   30230:	mov	r0, r4
   30234:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30238:	mov	r4, r5
   3023c:	cmp	r5, #0
   30240:	beq	3021c <__assert_fail@plt+0x1dc58>
   30244:	ldr	r5, [r4, #8]
   30248:	ldr	r0, [r4, #12]
   3024c:	cmp	r0, #0
   30250:	bne	3022c <__assert_fail@plt+0x1dc68>
   30254:	b	30230 <__assert_fail@plt+0x1dc6c>
   30258:	str	r4, [sp, #-8]!
   3025c:	str	lr, [sp, #4]
   30260:	ldr	r3, [r0, #48]	; 0x30
   30264:	movw	r2, #258	; 0x102
   30268:	tst	r2, r3
   3026c:	beq	3028c <__assert_fail@plt+0x1dcc8>
   30270:	ldr	r0, [r0, #56]	; 0x38
   30274:	cmp	r0, #0
   30278:	beq	30280 <__assert_fail@plt+0x1dcbc>
   3027c:	bl	23e28 <__assert_fail@plt+0x11864>
   30280:	ldr	r4, [sp]
   30284:	add	sp, sp, #4
   30288:	pop	{pc}		; (ldr pc, [sp], #4)
   3028c:	ldr	r0, [r0, #56]	; 0x38
   30290:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30294:	b	30280 <__assert_fail@plt+0x1dcbc>
   30298:	str	r4, [sp, #-8]!
   3029c:	str	lr, [sp, #4]
   302a0:	mov	r4, r0
   302a4:	mov	r0, r4
   302a8:	bl	41f38 <__assert_fail@plt+0x2f974>
   302ac:	cmp	r0, #0
   302b0:	bne	302cc <__assert_fail@plt+0x1dd08>
   302b4:	mov	r0, r4
   302b8:	bl	41f8c <__assert_fail@plt+0x2f9c8>
   302bc:	cmp	r0, #0
   302c0:	blt	302a4 <__assert_fail@plt+0x1dce0>
   302c4:	bl	1257c <close@plt>
   302c8:	b	302a4 <__assert_fail@plt+0x1dce0>
   302cc:	ldr	r4, [sp]
   302d0:	add	sp, sp, #4
   302d4:	pop	{pc}		; (ldr pc, [sp], #4)
   302d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   302dc:	strd	r6, [sp, #8]
   302e0:	str	lr, [sp, #16]
   302e4:	sub	sp, sp, #116	; 0x74
   302e8:	ldr	r7, [r0, #44]	; 0x2c
   302ec:	ldr	r3, [r7, #48]	; 0x30
   302f0:	ands	r3, r3, #512	; 0x200
   302f4:	beq	303e4 <__assert_fail@plt+0x1de20>
   302f8:	mov	r6, r1
   302fc:	mov	r5, r0
   30300:	ldr	r4, [r7, #52]	; 0x34
   30304:	cmp	r4, #0
   30308:	beq	30330 <__assert_fail@plt+0x1dd6c>
   3030c:	ldrd	r2, [r5, #64]	; 0x40
   30310:	strd	r2, [sp, #8]
   30314:	add	r1, sp, #8
   30318:	mov	r0, r4
   3031c:	bl	23968 <__assert_fail@plt+0x113a4>
   30320:	cmp	r0, #0
   30324:	beq	30368 <__assert_fail@plt+0x1dda4>
   30328:	ldr	r3, [r0, #8]
   3032c:	b	303e4 <__assert_fail@plt+0x1de20>
   30330:	movw	r3, #64424	; 0xfba8
   30334:	movt	r3, #2
   30338:	str	r3, [sp]
   3033c:	movw	r3, #64860	; 0xfd5c
   30340:	movt	r3, #2
   30344:	movw	r2, #64820	; 0xfd34
   30348:	movt	r2, #2
   3034c:	mov	r1, #0
   30350:	mov	r0, #13
   30354:	bl	23c5c <__assert_fail@plt+0x11698>
   30358:	mov	r4, r0
   3035c:	str	r0, [r7, #52]	; 0x34
   30360:	cmp	r0, #0
   30364:	bne	3030c <__assert_fail@plt+0x1dd48>
   30368:	cmp	r6, #0
   3036c:	blt	303e0 <__assert_fail@plt+0x1de1c>
   30370:	add	r1, sp, #24
   30374:	mov	r0, r6
   30378:	bl	11e98 <fstatfs64@plt>
   3037c:	cmp	r0, #0
   30380:	bne	303fc <__assert_fail@plt+0x1de38>
   30384:	cmp	r4, #0
   30388:	beq	303c8 <__assert_fail@plt+0x1de04>
   3038c:	mov	r0, #16
   30390:	bl	32148 <__assert_fail@plt+0x1fb84>
   30394:	subs	r6, r0, #0
   30398:	beq	303c8 <__assert_fail@plt+0x1de04>
   3039c:	ldrd	r2, [r5, #64]	; 0x40
   303a0:	strd	r2, [r6]
   303a4:	ldr	r3, [sp, #24]
   303a8:	str	r3, [r6, #8]
   303ac:	mov	r1, r6
   303b0:	mov	r0, r4
   303b4:	bl	24210 <__assert_fail@plt+0x11c4c>
   303b8:	cmp	r0, #0
   303bc:	beq	303d4 <__assert_fail@plt+0x1de10>
   303c0:	cmp	r6, r0
   303c4:	bne	303d0 <__assert_fail@plt+0x1de0c>
   303c8:	ldr	r3, [sp, #24]
   303cc:	b	303e4 <__assert_fail@plt+0x1de20>
   303d0:	bl	12570 <abort@plt>
   303d4:	mov	r0, r6
   303d8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   303dc:	b	303c8 <__assert_fail@plt+0x1de04>
   303e0:	mov	r3, #0
   303e4:	mov	r0, r3
   303e8:	add	sp, sp, #116	; 0x74
   303ec:	ldrd	r4, [sp]
   303f0:	ldrd	r6, [sp, #8]
   303f4:	add	sp, sp, #16
   303f8:	pop	{pc}		; (ldr pc, [sp], #4)
   303fc:	mov	r3, #0
   30400:	b	303e4 <__assert_fail@plt+0x1de20>
   30404:	strd	r4, [sp, #-16]!
   30408:	str	r6, [sp, #8]
   3040c:	str	lr, [sp, #12]
   30410:	mov	r5, r0
   30414:	mov	r4, r1
   30418:	ldr	r3, [r0, #48]	; 0x30
   3041c:	movw	r2, #258	; 0x102
   30420:	tst	r2, r3
   30424:	beq	30498 <__assert_fail@plt+0x1ded4>
   30428:	mov	r0, #24
   3042c:	bl	32148 <__assert_fail@plt+0x1fb84>
   30430:	subs	r6, r0, #0
   30434:	moveq	r0, #0
   30438:	beq	304bc <__assert_fail@plt+0x1def8>
   3043c:	ldrd	r2, [r4, #64]	; 0x40
   30440:	strd	r2, [r6]
   30444:	ldrd	r2, [r4, #160]	; 0xa0
   30448:	strd	r2, [r6, #8]
   3044c:	str	r4, [r6, #16]
   30450:	mov	r1, r6
   30454:	ldr	r0, [r5, #56]	; 0x38
   30458:	bl	24210 <__assert_fail@plt+0x11c4c>
   3045c:	mov	r5, r0
   30460:	cmp	r6, r0
   30464:	moveq	r0, #1
   30468:	beq	304bc <__assert_fail@plt+0x1def8>
   3046c:	mov	r0, r6
   30470:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30474:	cmp	r5, #0
   30478:	moveq	r0, #0
   3047c:	beq	304bc <__assert_fail@plt+0x1def8>
   30480:	ldr	r3, [r5, #16]
   30484:	str	r3, [r4]
   30488:	mov	r3, #2
   3048c:	strh	r3, [r4, #56]	; 0x38
   30490:	mov	r0, #1
   30494:	b	304bc <__assert_fail@plt+0x1def8>
   30498:	add	r1, r1, #64	; 0x40
   3049c:	ldr	r0, [r0, #56]	; 0x38
   304a0:	bl	41c98 <__assert_fail@plt+0x2f6d4>
   304a4:	cmp	r0, #0
   304a8:	moveq	r0, #1
   304ac:	beq	304bc <__assert_fail@plt+0x1def8>
   304b0:	str	r4, [r4]
   304b4:	mov	r3, #2
   304b8:	strh	r3, [r4, #56]	; 0x38
   304bc:	ldrd	r4, [sp]
   304c0:	ldr	r6, [sp, #8]
   304c4:	add	sp, sp, #12
   304c8:	pop	{pc}		; (ldr pc, [sp], #4)
   304cc:	strd	r4, [sp, #-16]!
   304d0:	str	r6, [sp, #8]
   304d4:	str	lr, [sp, #12]
   304d8:	mov	r5, r1
   304dc:	ldr	r1, [r0, #32]
   304e0:	cmp	r1, r5
   304e4:	movne	r3, #0
   304e8:	moveq	r3, #1
   304ec:	cmn	r1, #100	; 0x64
   304f0:	moveq	r3, #0
   304f4:	cmp	r3, #0
   304f8:	bne	3053c <__assert_fail@plt+0x1df78>
   304fc:	mov	r4, r0
   30500:	cmp	r2, #0
   30504:	bne	30540 <__assert_fail@plt+0x1df7c>
   30508:	ldr	r3, [r0, #48]	; 0x30
   3050c:	eor	r3, r3, #4
   30510:	ubfx	r3, r3, #2, #1
   30514:	cmp	r1, #0
   30518:	movlt	r3, #0
   3051c:	andge	r3, r3, #1
   30520:	cmp	r3, #0
   30524:	bne	30558 <__assert_fail@plt+0x1df94>
   30528:	str	r5, [r4, #32]
   3052c:	ldrd	r4, [sp]
   30530:	ldr	r6, [sp, #8]
   30534:	add	sp, sp, #12
   30538:	pop	{pc}		; (ldr pc, [sp], #4)
   3053c:	bl	12570 <abort@plt>
   30540:	add	r0, r0, #60	; 0x3c
   30544:	bl	41f40 <__assert_fail@plt+0x2f97c>
   30548:	cmp	r0, #0
   3054c:	blt	30528 <__assert_fail@plt+0x1df64>
   30550:	bl	1257c <close@plt>
   30554:	b	30528 <__assert_fail@plt+0x1df64>
   30558:	mov	r0, r1
   3055c:	bl	1257c <close@plt>
   30560:	b	30528 <__assert_fail@plt+0x1df64>
   30564:	strd	r4, [sp, #-16]!
   30568:	str	r6, [sp, #8]
   3056c:	str	lr, [sp, #12]
   30570:	mov	r4, r0
   30574:	ldr	r3, [r0, #48]	; 0x30
   30578:	ands	r5, r3, #4
   3057c:	movne	r5, #0
   30580:	bne	30598 <__assert_fail@plt+0x1dfd4>
   30584:	tst	r3, #512	; 0x200
   30588:	beq	305b4 <__assert_fail@plt+0x1dff0>
   3058c:	mov	r2, #1
   30590:	mvn	r1, #99	; 0x63
   30594:	bl	304cc <__assert_fail@plt+0x1df08>
   30598:	add	r0, r4, #60	; 0x3c
   3059c:	bl	30298 <__assert_fail@plt+0x1dcd4>
   305a0:	mov	r0, r5
   305a4:	ldrd	r4, [sp]
   305a8:	ldr	r6, [sp, #8]
   305ac:	add	sp, sp, #12
   305b0:	pop	{pc}		; (ldr pc, [sp], #4)
   305b4:	ldr	r0, [r0, #28]
   305b8:	bl	124c8 <fchdir@plt>
   305bc:	adds	r5, r0, #0
   305c0:	movne	r5, #1
   305c4:	b	30598 <__assert_fail@plt+0x1dfd4>
   305c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   305cc:	strd	r6, [sp, #8]
   305d0:	strd	r8, [sp, #16]
   305d4:	str	lr, [sp, #24]
   305d8:	sub	sp, sp, #108	; 0x6c
   305dc:	mov	r4, r0
   305e0:	mov	r7, r1
   305e4:	mov	r5, r2
   305e8:	subs	r9, r3, #0
   305ec:	beq	30718 <__assert_fail@plt+0x1e154>
   305f0:	movw	r1, #41484	; 0xa20c
   305f4:	movt	r1, #4
   305f8:	mov	r0, r9
   305fc:	bl	11f1c <strcmp@plt>
   30600:	cmp	r0, #0
   30604:	bne	30718 <__assert_fail@plt+0x1e154>
   30608:	ldr	r3, [r4, #48]	; 0x30
   3060c:	tst	r3, #4
   30610:	bne	30658 <__assert_fail@plt+0x1e094>
   30614:	cmp	r5, #0
   30618:	bge	306cc <__assert_fail@plt+0x1e108>
   3061c:	tst	r3, #512	; 0x200
   30620:	beq	30638 <__assert_fail@plt+0x1e074>
   30624:	add	r6, r4, #60	; 0x3c
   30628:	mov	r0, r6
   3062c:	bl	41f38 <__assert_fail@plt+0x2f974>
   30630:	cmp	r0, #0
   30634:	beq	30684 <__assert_fail@plt+0x1e0c0>
   30638:	mov	r8, #1
   3063c:	mov	r1, r9
   30640:	mov	r0, r4
   30644:	bl	301bc <__assert_fail@plt+0x1dbf8>
   30648:	subs	r6, r0, #0
   3064c:	bge	30734 <__assert_fail@plt+0x1e170>
   30650:	mvn	r4, #0
   30654:	b	307b8 <__assert_fail@plt+0x1e1f4>
   30658:	ubfx	r3, r3, #9, #1
   3065c:	cmp	r5, #0
   30660:	movlt	r3, #0
   30664:	andge	r3, r3, #1
   30668:	cmp	r3, #0
   3066c:	moveq	r4, #0
   30670:	beq	307b8 <__assert_fail@plt+0x1e1f4>
   30674:	mov	r0, r5
   30678:	bl	1257c <close@plt>
   3067c:	mov	r4, #0
   30680:	b	307b8 <__assert_fail@plt+0x1e1f4>
   30684:	mov	r0, r6
   30688:	bl	41f8c <__assert_fail@plt+0x2f9c8>
   3068c:	subs	r6, r0, #0
   30690:	blt	30638 <__assert_fail@plt+0x1e074>
   30694:	ldr	r3, [r4, #48]	; 0x30
   30698:	tst	r3, #2
   3069c:	bne	306d8 <__assert_fail@plt+0x1e114>
   306a0:	mov	r5, r6
   306a4:	mov	r8, #1
   306a8:	ldr	r3, [r4, #48]	; 0x30
   306ac:	tst	r3, #512	; 0x200
   306b0:	bne	306e4 <__assert_fail@plt+0x1e120>
   306b4:	mov	r0, r6
   306b8:	bl	124c8 <fchdir@plt>
   306bc:	mov	r4, r0
   306c0:	b	307b0 <__assert_fail@plt+0x1e1ec>
   306c4:	mov	r8, #0
   306c8:	b	3063c <__assert_fail@plt+0x1e078>
   306cc:	mov	r6, r5
   306d0:	mov	r8, #1
   306d4:	b	30734 <__assert_fail@plt+0x1e170>
   306d8:	mov	r5, r6
   306dc:	mov	r8, #1
   306e0:	b	30760 <__assert_fail@plt+0x1e19c>
   306e4:	eor	r2, r8, #1
   306e8:	mov	r1, r6
   306ec:	mov	r0, r4
   306f0:	bl	304cc <__assert_fail@plt+0x1df08>
   306f4:	mov	r4, #0
   306f8:	b	307b8 <__assert_fail@plt+0x1e1f4>
   306fc:	bl	12318 <__errno_location@plt>
   30700:	mov	r5, r0
   30704:	ldr	r7, [r0]
   30708:	mov	r0, r6
   3070c:	bl	1257c <close@plt>
   30710:	str	r7, [r5]
   30714:	b	307b8 <__assert_fail@plt+0x1e1f4>
   30718:	ldr	r3, [r4, #48]	; 0x30
   3071c:	tst	r3, #4
   30720:	bne	30658 <__assert_fail@plt+0x1e094>
   30724:	cmp	r5, #0
   30728:	movge	r6, r5
   3072c:	movge	r8, #0
   30730:	blt	306c4 <__assert_fail@plt+0x1e100>
   30734:	ldr	r3, [r4, #48]	; 0x30
   30738:	tst	r3, #2
   3073c:	bne	30760 <__assert_fail@plt+0x1e19c>
   30740:	cmp	r9, #0
   30744:	beq	306a8 <__assert_fail@plt+0x1e0e4>
   30748:	movw	r1, #41484	; 0xa20c
   3074c:	movt	r1, #4
   30750:	mov	r0, r9
   30754:	bl	11f1c <strcmp@plt>
   30758:	cmp	r0, #0
   3075c:	bne	306a8 <__assert_fail@plt+0x1e0e4>
   30760:	mov	r2, sp
   30764:	mov	r1, r6
   30768:	mov	r0, #3
   3076c:	bl	1212c <__fxstat64@plt>
   30770:	cmp	r0, #0
   30774:	bne	307ac <__assert_fail@plt+0x1e1e8>
   30778:	ldrd	r0, [r7, #64]	; 0x40
   3077c:	ldrd	r2, [sp]
   30780:	cmp	r1, r3
   30784:	cmpeq	r0, r2
   30788:	bne	307a0 <__assert_fail@plt+0x1e1dc>
   3078c:	ldrd	r0, [r7, #160]	; 0xa0
   30790:	ldrd	r2, [sp, #96]	; 0x60
   30794:	cmp	r1, r3
   30798:	cmpeq	r0, r2
   3079c:	beq	306a8 <__assert_fail@plt+0x1e0e4>
   307a0:	bl	12318 <__errno_location@plt>
   307a4:	mov	r3, #2
   307a8:	str	r3, [r0]
   307ac:	mvn	r4, #0
   307b0:	cmp	r5, #0
   307b4:	blt	306fc <__assert_fail@plt+0x1e138>
   307b8:	mov	r0, r4
   307bc:	add	sp, sp, #108	; 0x6c
   307c0:	ldrd	r4, [sp]
   307c4:	ldrd	r6, [sp, #8]
   307c8:	ldrd	r8, [sp, #16]
   307cc:	add	sp, sp, #24
   307d0:	pop	{pc}		; (ldr pc, [sp], #4)
   307d4:	strd	r4, [sp, #-12]!
   307d8:	str	lr, [sp, #8]
   307dc:	sub	sp, sp, #28
   307e0:	ldr	r3, [r0, #48]	; 0x30
   307e4:	movw	r2, #258	; 0x102
   307e8:	tst	r2, r3
   307ec:	bne	30858 <__assert_fail@plt+0x1e294>
   307f0:	ldr	ip, [r1, #4]
   307f4:	cmp	ip, #0
   307f8:	beq	30880 <__assert_fail@plt+0x1e2bc>
   307fc:	ldr	r3, [ip, #48]	; 0x30
   30800:	cmp	r3, #0
   30804:	blt	30880 <__assert_fail@plt+0x1e2bc>
   30808:	ldr	lr, [r0, #56]	; 0x38
   3080c:	ldrd	r2, [lr, #16]
   30810:	orrs	r3, r2, r3
   30814:	beq	30894 <__assert_fail@plt+0x1e2d0>
   30818:	ldrd	r4, [lr]
   3081c:	ldrd	r2, [r1, #160]	; 0xa0
   30820:	cmp	r5, r3
   30824:	cmpeq	r4, r2
   30828:	bne	30880 <__assert_fail@plt+0x1e2bc>
   3082c:	ldrd	r2, [lr, #8]
   30830:	ldrd	r4, [r1, #64]	; 0x40
   30834:	cmp	r3, r5
   30838:	cmpeq	r2, r4
   3083c:	bne	30880 <__assert_fail@plt+0x1e2bc>
   30840:	ldrd	r2, [ip, #64]	; 0x40
   30844:	strd	r2, [lr, #8]
   30848:	ldr	r3, [r0, #56]	; 0x38
   3084c:	ldrd	r0, [ip, #160]	; 0xa0
   30850:	strd	r0, [r3]
   30854:	b	30880 <__assert_fail@plt+0x1e2bc>
   30858:	ldrd	r2, [r1, #64]	; 0x40
   3085c:	strd	r2, [sp]
   30860:	ldrd	r2, [r1, #160]	; 0xa0
   30864:	strd	r2, [sp, #8]
   30868:	mov	r1, sp
   3086c:	ldr	r0, [r0, #56]	; 0x38
   30870:	bl	24250 <__assert_fail@plt+0x11c8c>
   30874:	cmp	r0, #0
   30878:	beq	30890 <__assert_fail@plt+0x1e2cc>
   3087c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30880:	add	sp, sp, #28
   30884:	ldrd	r4, [sp]
   30888:	add	sp, sp, #8
   3088c:	pop	{pc}		; (ldr pc, [sp], #4)
   30890:	bl	12570 <abort@plt>
   30894:	bl	12570 <abort@plt>
   30898:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3089c:	strd	r6, [sp, #8]
   308a0:	strd	r8, [sp, #16]
   308a4:	strd	sl, [sp, #24]
   308a8:	str	lr, [sp, #32]
   308ac:	sub	sp, sp, #68	; 0x44
   308b0:	mov	r5, r0
   308b4:	str	r1, [sp, #32]
   308b8:	ldr	r9, [r0]
   308bc:	ldr	r0, [r9, #12]
   308c0:	str	r0, [sp, #40]	; 0x28
   308c4:	cmp	r0, #0
   308c8:	beq	309d8 <__assert_fail@plt+0x1e414>
   308cc:	bl	124bc <dirfd@plt>
   308d0:	str	r0, [sp, #60]	; 0x3c
   308d4:	cmp	r0, #0
   308d8:	blt	30994 <__assert_fail@plt+0x1e3d0>
   308dc:	ldr	r2, [r5, #44]	; 0x2c
   308e0:	movw	r3, #34464	; 0x86a0
   308e4:	movt	r3, #1
   308e8:	cmp	r2, #0
   308ec:	mvnne	r3, #0
   308f0:	str	r3, [sp, #16]
   308f4:	mov	r3, #1
   308f8:	str	r3, [sp, #52]	; 0x34
   308fc:	ldr	r3, [r9, #40]	; 0x28
   30900:	sub	r1, r3, #1
   30904:	ldr	r2, [r9, #28]
   30908:	ldrb	r2, [r2, r1]
   3090c:	cmp	r2, #47	; 0x2f
   30910:	movne	r1, r3
   30914:	str	r1, [sp, #28]
   30918:	ldr	r3, [r5, #48]	; 0x30
   3091c:	tst	r3, #4
   30920:	moveq	r3, #0
   30924:	streq	r3, [sp, #20]
   30928:	beq	30944 <__assert_fail@plt+0x1e380>
   3092c:	ldr	r3, [r5, #24]
   30930:	add	r2, r3, r1
   30934:	add	r2, r2, #1
   30938:	str	r2, [sp, #20]
   3093c:	mov	r2, #47	; 0x2f
   30940:	strb	r2, [r3, r1]
   30944:	ldr	r3, [sp, #28]
   30948:	add	sl, r3, #1
   3094c:	ldr	fp, [r5, #36]	; 0x24
   30950:	sub	fp, fp, sl
   30954:	ldr	r3, [r9, #48]	; 0x30
   30958:	add	r3, r3, #1
   3095c:	str	r3, [sp, #12]
   30960:	mov	r3, #0
   30964:	str	r3, [sp, #36]	; 0x24
   30968:	str	r3, [sp, #24]
   3096c:	str	r3, [sp]
   30970:	mov	r8, r3
   30974:	str	r3, [sp, #4]
   30978:	movw	r3, #6548	; 0x1994
   3097c:	movt	r3, #258	; 0x102
   30980:	str	r3, [sp, #44]	; 0x2c
   30984:	movw	r3, #19778	; 0x4d42
   30988:	movt	r3, #65363	; 0xff53
   3098c:	str	r3, [sp, #48]	; 0x30
   30990:	b	30f70 <__assert_fail@plt+0x1e9ac>
   30994:	ldr	r0, [r9, #12]
   30998:	bl	12594 <closedir@plt>
   3099c:	mov	r3, #0
   309a0:	str	r3, [r9, #12]
   309a4:	ldr	r3, [sp, #32]
   309a8:	cmp	r3, #3
   309ac:	movne	r3, #0
   309b0:	strne	r3, [sp, #4]
   309b4:	bne	30e20 <__assert_fail@plt+0x1e85c>
   309b8:	mov	r3, #4
   309bc:	strh	r3, [r9, #56]	; 0x38
   309c0:	bl	12318 <__errno_location@plt>
   309c4:	ldr	r3, [r0]
   309c8:	str	r3, [r9, #32]
   309cc:	mov	r3, #0
   309d0:	str	r3, [sp, #4]
   309d4:	b	30e20 <__assert_fail@plt+0x1e85c>
   309d8:	ldr	r3, [r5, #48]	; 0x30
   309dc:	and	r2, r3, #516	; 0x204
   309e0:	cmp	r2, #512	; 0x200
   309e4:	ldreq	r0, [r5, #32]
   309e8:	mvnne	r0, #99	; 0x63
   309ec:	ldr	r1, [r9, #24]
   309f0:	ands	r2, r3, #16
   309f4:	beq	30a10 <__assert_fail@plt+0x1e44c>
   309f8:	tst	r3, #1
   309fc:	moveq	r2, #32768	; 0x8000
   30a00:	beq	30a10 <__assert_fail@plt+0x1e44c>
   30a04:	ldr	r2, [r9, #48]	; 0x30
   30a08:	cmp	r2, #0
   30a0c:	movne	r2, #32768	; 0x8000
   30a10:	add	r3, sp, #60	; 0x3c
   30a14:	bl	43e28 <__assert_fail@plt+0x31864>
   30a18:	str	r0, [sp, #4]
   30a1c:	str	r0, [r9, #12]
   30a20:	cmp	r0, #0
   30a24:	beq	30af8 <__assert_fail@plt+0x1e534>
   30a28:	ldrh	r3, [r9, #56]	; 0x38
   30a2c:	cmp	r3, #11
   30a30:	beq	30b1c <__assert_fail@plt+0x1e558>
   30a34:	ldr	r3, [r5, #48]	; 0x30
   30a38:	tst	r3, #256	; 0x100
   30a3c:	bne	30b34 <__assert_fail@plt+0x1e570>
   30a40:	ldr	r2, [r5, #44]	; 0x2c
   30a44:	movw	r3, #34464	; 0x86a0
   30a48:	movt	r3, #1
   30a4c:	cmp	r2, #0
   30a50:	mvnne	r3, #0
   30a54:	str	r3, [sp, #16]
   30a58:	ldr	r3, [sp, #32]
   30a5c:	cmp	r3, #2
   30a60:	beq	30c58 <__assert_fail@plt+0x1e694>
   30a64:	ldr	r3, [r5, #48]	; 0x30
   30a68:	and	r3, r3, #56	; 0x38
   30a6c:	cmp	r3, #24
   30a70:	beq	30b7c <__assert_fail@plt+0x1e5b8>
   30a74:	ldr	r3, [sp, #32]
   30a78:	cmp	r3, #3
   30a7c:	movne	r4, #0
   30a80:	moveq	r4, #1
   30a84:	mov	r6, #1
   30a88:	ldr	r3, [r5, #48]	; 0x30
   30a8c:	tst	r3, #512	; 0x200
   30a90:	bne	30c14 <__assert_fail@plt+0x1e650>
   30a94:	ldr	r2, [sp, #60]	; 0x3c
   30a98:	cmp	r2, #0
   30a9c:	bge	30c2c <__assert_fail@plt+0x1e668>
   30aa0:	tst	r4, r6
   30aa4:	beq	30ab4 <__assert_fail@plt+0x1e4f0>
   30aa8:	bl	12318 <__errno_location@plt>
   30aac:	ldr	r3, [r0]
   30ab0:	str	r3, [r9, #32]
   30ab4:	ldrh	r3, [r9, #58]	; 0x3a
   30ab8:	orr	r3, r3, #1
   30abc:	strh	r3, [r9, #58]	; 0x3a
   30ac0:	ldr	r0, [r9, #12]
   30ac4:	bl	12594 <closedir@plt>
   30ac8:	mov	r3, #0
   30acc:	str	r3, [r9, #12]
   30ad0:	ldr	r3, [r5, #48]	; 0x30
   30ad4:	tst	r3, #512	; 0x200
   30ad8:	beq	30ae8 <__assert_fail@plt+0x1e524>
   30adc:	ldr	r0, [sp, #60]	; 0x3c
   30ae0:	cmp	r0, #0
   30ae4:	bge	30c50 <__assert_fail@plt+0x1e68c>
   30ae8:	mov	r3, #0
   30aec:	str	r3, [r9, #12]
   30af0:	str	r3, [sp, #52]	; 0x34
   30af4:	b	308fc <__assert_fail@plt+0x1e338>
   30af8:	ldr	r3, [sp, #32]
   30afc:	cmp	r3, #3
   30b00:	bne	30e20 <__assert_fail@plt+0x1e85c>
   30b04:	mov	r3, #4
   30b08:	strh	r3, [r9, #56]	; 0x38
   30b0c:	bl	12318 <__errno_location@plt>
   30b10:	ldr	r3, [r0]
   30b14:	str	r3, [r9, #32]
   30b18:	b	30e20 <__assert_fail@plt+0x1e85c>
   30b1c:	mov	r2, #0
   30b20:	mov	r1, r9
   30b24:	mov	r0, r5
   30b28:	bl	2fe44 <__assert_fail@plt+0x1d880>
   30b2c:	strh	r0, [r9, #56]	; 0x38
   30b30:	b	30a40 <__assert_fail@plt+0x1e47c>
   30b34:	mov	r1, r9
   30b38:	mov	r0, r5
   30b3c:	bl	307d4 <__assert_fail@plt+0x1e210>
   30b40:	mov	r2, #0
   30b44:	mov	r1, r9
   30b48:	mov	r0, r5
   30b4c:	bl	2fe44 <__assert_fail@plt+0x1d880>
   30b50:	mov	r1, r9
   30b54:	mov	r0, r5
   30b58:	bl	30404 <__assert_fail@plt+0x1de40>
   30b5c:	cmp	r0, #0
   30b60:	bne	30a40 <__assert_fail@plt+0x1e47c>
   30b64:	bl	12318 <__errno_location@plt>
   30b68:	mov	r3, #12
   30b6c:	str	r3, [r0]
   30b70:	ldr	r3, [sp, #40]	; 0x28
   30b74:	str	r3, [sp, #4]
   30b78:	b	30e20 <__assert_fail@plt+0x1e85c>
   30b7c:	ldr	r3, [r9, #84]	; 0x54
   30b80:	cmp	r3, #2
   30b84:	bne	30a74 <__assert_fail@plt+0x1e4b0>
   30b88:	ldr	r1, [sp, #60]	; 0x3c
   30b8c:	mov	r0, r9
   30b90:	bl	302d8 <__assert_fail@plt+0x1dd14>
   30b94:	movw	r3, #26985	; 0x6969
   30b98:	cmp	r0, r3
   30b9c:	beq	30bfc <__assert_fail@plt+0x1e638>
   30ba0:	bgt	30be0 <__assert_fail@plt+0x1e61c>
   30ba4:	movw	r3, #19778	; 0x4d42
   30ba8:	movt	r3, #65363	; 0xff53
   30bac:	cmp	r0, r3
   30bb0:	beq	30bfc <__assert_fail@plt+0x1e638>
   30bb4:	cmp	r0, #0
   30bb8:	beq	30bfc <__assert_fail@plt+0x1e638>
   30bbc:	ldr	r3, [sp, #32]
   30bc0:	cmp	r3, #3
   30bc4:	moveq	r4, #1
   30bc8:	movne	r4, #0
   30bcc:	movne	r3, #0
   30bd0:	strne	r3, [sp, #52]	; 0x34
   30bd4:	bne	308fc <__assert_fail@plt+0x1e338>
   30bd8:	mov	r6, #0
   30bdc:	b	30a88 <__assert_fail@plt+0x1e4c4>
   30be0:	movw	r3, #40864	; 0x9fa0
   30be4:	cmp	r0, r3
   30be8:	beq	30bfc <__assert_fail@plt+0x1e638>
   30bec:	movw	r3, #16719	; 0x414f
   30bf0:	movt	r3, #21318	; 0x5346
   30bf4:	cmp	r0, r3
   30bf8:	bne	30bbc <__assert_fail@plt+0x1e5f8>
   30bfc:	ldr	r3, [sp, #32]
   30c00:	cmp	r3, #3
   30c04:	movne	r4, #0
   30c08:	moveq	r4, #1
   30c0c:	mov	r6, #1
   30c10:	b	30a88 <__assert_fail@plt+0x1e4c4>
   30c14:	mov	r2, #3
   30c18:	movw	r1, #1030	; 0x406
   30c1c:	ldr	r0, [sp, #60]	; 0x3c
   30c20:	bl	2f8cc <__assert_fail@plt+0x1d308>
   30c24:	str	r0, [sp, #60]	; 0x3c
   30c28:	b	30a94 <__assert_fail@plt+0x1e4d0>
   30c2c:	mov	r3, #0
   30c30:	mov	r1, r9
   30c34:	mov	r0, r5
   30c38:	bl	305c8 <__assert_fail@plt+0x1e004>
   30c3c:	cmp	r0, #0
   30c40:	moveq	r3, #1
   30c44:	streq	r3, [sp, #52]	; 0x34
   30c48:	beq	308fc <__assert_fail@plt+0x1e338>
   30c4c:	b	30aa0 <__assert_fail@plt+0x1e4dc>
   30c50:	bl	1257c <close@plt>
   30c54:	b	30ae8 <__assert_fail@plt+0x1e524>
   30c58:	mov	r3, #0
   30c5c:	str	r3, [sp, #52]	; 0x34
   30c60:	b	308fc <__assert_fail@plt+0x1e338>
   30c64:	ldr	r3, [sp, #8]
   30c68:	ldr	r3, [r3]
   30c6c:	cmp	r3, #0
   30c70:	beq	30c90 <__assert_fail@plt+0x1e6cc>
   30c74:	str	r3, [r9, #32]
   30c78:	ldr	r3, [sp, #40]	; 0x28
   30c7c:	orr	r3, r3, r8
   30c80:	cmp	r3, #0
   30c84:	movne	r3, #7
   30c88:	moveq	r3, #4
   30c8c:	strh	r3, [r9, #56]	; 0x38
   30c90:	ldr	r0, [r9, #12]
   30c94:	cmp	r0, #0
   30c98:	beq	30ca8 <__assert_fail@plt+0x1e6e4>
   30c9c:	bl	12594 <closedir@plt>
   30ca0:	mov	r3, #0
   30ca4:	str	r3, [r9, #12]
   30ca8:	ldr	r3, [sp, #24]
   30cac:	cmp	r3, #0
   30cb0:	bne	31170 <__assert_fail@plt+0x1ebac>
   30cb4:	ldr	r3, [r5, #48]	; 0x30
   30cb8:	tst	r3, #4
   30cbc:	beq	30ce8 <__assert_fail@plt+0x1e724>
   30cc0:	ldr	r3, [r5, #36]	; 0x24
   30cc4:	cmp	r8, #0
   30cc8:	cmpne	r3, sl
   30ccc:	bne	30cdc <__assert_fail@plt+0x1e718>
   30cd0:	ldr	r3, [sp, #20]
   30cd4:	sub	r3, r3, #1
   30cd8:	str	r3, [sp, #20]
   30cdc:	mov	r3, #0
   30ce0:	ldr	r2, [sp, #20]
   30ce4:	strb	r3, [r2]
   30ce8:	ldr	r3, [sp, #52]	; 0x34
   30cec:	ldr	r2, [sp, #40]	; 0x28
   30cf0:	cmp	r2, #0
   30cf4:	movne	r3, #0
   30cf8:	cmp	r3, #0
   30cfc:	beq	30d34 <__assert_fail@plt+0x1e770>
   30d00:	ldr	r3, [sp, #32]
   30d04:	cmp	r8, #0
   30d08:	cmpne	r3, #1
   30d0c:	bne	30d3c <__assert_fail@plt+0x1e778>
   30d10:	ldr	r3, [r9, #48]	; 0x30
   30d14:	cmp	r3, #0
   30d18:	bne	31200 <__assert_fail@plt+0x1ec3c>
   30d1c:	mov	r0, r5
   30d20:	bl	30564 <__assert_fail@plt+0x1dfa0>
   30d24:	adds	r0, r0, #0
   30d28:	movne	r0, #1
   30d2c:	cmp	r0, #0
   30d30:	bne	31224 <__assert_fail@plt+0x1ec60>
   30d34:	cmp	r8, #0
   30d38:	beq	3124c <__assert_fail@plt+0x1ec88>
   30d3c:	ldr	r3, [sp, #36]	; 0x24
   30d40:	cmp	r3, #0
   30d44:	bne	31284 <__assert_fail@plt+0x1ecc0>
   30d48:	ldr	r3, [r5, #44]	; 0x2c
   30d4c:	cmp	r3, #0
   30d50:	cmpne	r8, #1
   30d54:	bls	30e20 <__assert_fail@plt+0x1e85c>
   30d58:	mov	r2, r8
   30d5c:	ldr	r1, [sp, #4]
   30d60:	mov	r0, r5
   30d64:	bl	2ffb4 <__assert_fail@plt+0x1d9f0>
   30d68:	str	r0, [sp, #4]
   30d6c:	b	30e20 <__assert_fail@plt+0x1e85c>
   30d70:	ldrb	r3, [r7, #20]
   30d74:	cmp	r3, #0
   30d78:	beq	31168 <__assert_fail@plt+0x1eba4>
   30d7c:	ldrh	r3, [r7, #20]
   30d80:	cmp	r3, #46	; 0x2e
   30d84:	bne	30fb4 <__assert_fail@plt+0x1e9f0>
   30d88:	ldr	r4, [sp]
   30d8c:	b	30f6c <__assert_fail@plt+0x1e9a8>
   30d90:	ldr	fp, [r5, #24]
   30d94:	ldr	r3, [sp, #28]
   30d98:	add	r1, r3, #2
   30d9c:	add	r1, r1, r6
   30da0:	mov	r0, r5
   30da4:	bl	2fdc0 <__assert_fail@plt+0x1d7fc>
   30da8:	cmp	r0, #0
   30dac:	beq	30ddc <__assert_fail@plt+0x1e818>
   30db0:	ldr	r3, [r5, #24]
   30db4:	cmp	r3, fp
   30db8:	beq	30e40 <__assert_fail@plt+0x1e87c>
   30dbc:	ldr	r2, [r5, #48]	; 0x30
   30dc0:	tst	r2, #4
   30dc4:	addne	r3, r3, sl
   30dc8:	strne	r3, [sp, #20]
   30dcc:	ldr	fp, [r5, #36]	; 0x24
   30dd0:	sub	fp, fp, sl
   30dd4:	str	r0, [sp, #24]
   30dd8:	b	30fe4 <__assert_fail@plt+0x1ea20>
   30ddc:	ldr	r7, [sp, #8]
   30de0:	ldr	r6, [r7]
   30de4:	mov	r0, r4
   30de8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30dec:	ldr	r0, [sp, #4]
   30df0:	bl	30208 <__assert_fail@plt+0x1dc44>
   30df4:	ldr	r0, [r9, #12]
   30df8:	bl	12594 <closedir@plt>
   30dfc:	mov	r2, #0
   30e00:	str	r2, [r9, #12]
   30e04:	mov	r3, #7
   30e08:	strh	r3, [r9, #56]	; 0x38
   30e0c:	ldr	r3, [r5, #48]	; 0x30
   30e10:	orr	r3, r3, #8192	; 0x2000
   30e14:	str	r3, [r5, #48]	; 0x30
   30e18:	str	r6, [r7]
   30e1c:	str	r2, [sp, #4]
   30e20:	ldr	r0, [sp, #4]
   30e24:	add	sp, sp, #68	; 0x44
   30e28:	ldrd	r4, [sp]
   30e2c:	ldrd	r6, [sp, #8]
   30e30:	ldrd	r8, [sp, #16]
   30e34:	ldrd	sl, [sp, #24]
   30e38:	add	sp, sp, #32
   30e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   30e40:	ldr	r0, [sp, #24]
   30e44:	b	30dcc <__assert_fail@plt+0x1e808>
   30e48:	mov	r0, r4
   30e4c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   30e50:	ldr	r0, [sp, #4]
   30e54:	bl	30208 <__assert_fail@plt+0x1dc44>
   30e58:	ldr	r0, [r9, #12]
   30e5c:	bl	12594 <closedir@plt>
   30e60:	mov	r2, #0
   30e64:	str	r2, [r9, #12]
   30e68:	mov	r3, #7
   30e6c:	strh	r3, [r9, #56]	; 0x38
   30e70:	ldr	r3, [r5, #48]	; 0x30
   30e74:	orr	r3, r3, #8192	; 0x2000
   30e78:	str	r3, [r5, #48]	; 0x30
   30e7c:	mov	r3, #36	; 0x24
   30e80:	ldr	r1, [sp, #8]
   30e84:	str	r3, [r1]
   30e88:	str	r2, [sp, #4]
   30e8c:	b	30e20 <__assert_fail@plt+0x1e85c>
   30e90:	ldr	r3, [r4, #28]
   30e94:	str	r3, [r4, #24]
   30e98:	ldr	r2, [r4, #52]	; 0x34
   30e9c:	add	r2, r2, #1
   30ea0:	add	r1, r4, #168	; 0xa8
   30ea4:	ldr	r0, [sp, #20]
   30ea8:	bl	11f94 <memmove@plt>
   30eac:	b	3101c <__assert_fail@plt+0x1ea58>
   30eb0:	ubfx	r3, r3, #4, #1
   30eb4:	cmp	r2, #10
   30eb8:	orrne	r3, r3, #1
   30ebc:	cmp	r3, #0
   30ec0:	beq	3104c <__assert_fail@plt+0x1ea88>
   30ec4:	mov	r2, #11
   30ec8:	strh	r2, [r4, #56]	; 0x38
   30ecc:	ldrb	r2, [r7, #18]
   30ed0:	sub	r2, r2, #1
   30ed4:	cmp	r2, #11
   30ed8:	ldrls	pc, [pc, r2, lsl #2]
   30edc:	b	310d8 <__assert_fail@plt+0x1eb14>
   30ee0:	andeq	r1, r3, r8, lsr #1
   30ee4:	andeq	r0, r3, r4, lsl pc
   30ee8:	ldrdeq	r1, [r3], -r8
   30eec:	muleq	r3, ip, r0
   30ef0:	ldrdeq	r1, [r3], -r8
   30ef4:			; <UNDEFINED> instruction: 0x000312b0
   30ef8:	ldrdeq	r1, [r3], -r8
   30efc:	andeq	r1, r3, r0, asr #1
   30f00:	ldrdeq	r1, [r3], -r8
   30f04:	strheq	r1, [r3], -r4
   30f08:	ldrdeq	r1, [r3], -r8
   30f0c:	andeq	r1, r3, ip, asr #1
   30f10:	mov	r3, #0
   30f14:	mov	r2, #8192	; 0x2000
   30f18:	str	r2, [r4, #80]	; 0x50
   30f1c:	cmp	r3, #0
   30f20:	movne	r2, #1
   30f24:	moveq	r2, #2
   30f28:	mov	r3, #0
   30f2c:	str	r2, [r4, #112]	; 0x70
   30f30:	str	r3, [r4, #116]	; 0x74
   30f34:	mov	r3, #0
   30f38:	str	r3, [r4, #8]
   30f3c:	ldr	r3, [sp, #4]
   30f40:	cmp	r3, #0
   30f44:	ldrne	r3, [sp]
   30f48:	strne	r4, [r3, #8]
   30f4c:	streq	r4, [sp, #4]
   30f50:	movw	r3, #10000	; 0x2710
   30f54:	cmp	r8, r3
   30f58:	beq	310f8 <__assert_fail@plt+0x1eb34>
   30f5c:	add	r8, r8, #1
   30f60:	ldr	r3, [sp, #16]
   30f64:	cmp	r8, r3
   30f68:	bcs	30ca8 <__assert_fail@plt+0x1e6e4>
   30f6c:	str	r4, [sp]
   30f70:	ldr	r3, [r9, #12]
   30f74:	cmp	r3, #0
   30f78:	beq	30ca8 <__assert_fail@plt+0x1e6e4>
   30f7c:	bl	12318 <__errno_location@plt>
   30f80:	str	r0, [sp, #8]
   30f84:	mov	r3, #0
   30f88:	str	r3, [r0]
   30f8c:	ldr	r0, [r9, #12]
   30f90:	bl	1248c <readdir64@plt>
   30f94:	subs	r7, r0, #0
   30f98:	beq	30c64 <__assert_fail@plt+0x1e6a0>
   30f9c:	ldr	r3, [r5, #48]	; 0x30
   30fa0:	tst	r3, #32
   30fa4:	bne	30fb4 <__assert_fail@plt+0x1e9f0>
   30fa8:	ldrb	r3, [r7, #19]
   30fac:	cmp	r3, #46	; 0x2e
   30fb0:	beq	30d70 <__assert_fail@plt+0x1e7ac>
   30fb4:	add	r4, r7, #19
   30fb8:	mov	r0, r4
   30fbc:	bl	122d0 <strlen@plt>
   30fc0:	mov	r6, r0
   30fc4:	mov	r2, r0
   30fc8:	mov	r1, r4
   30fcc:	mov	r0, r5
   30fd0:	bl	300a4 <__assert_fail@plt+0x1dae0>
   30fd4:	subs	r4, r0, #0
   30fd8:	beq	30ddc <__assert_fail@plt+0x1e818>
   30fdc:	cmp	fp, r6
   30fe0:	bls	30d90 <__assert_fail@plt+0x1e7cc>
   30fe4:	adds	r6, sl, r6
   30fe8:	bcs	30e48 <__assert_fail@plt+0x1e884>
   30fec:	ldr	r3, [sp, #12]
   30ff0:	str	r3, [r4, #48]	; 0x30
   30ff4:	ldr	r3, [r5]
   30ff8:	str	r3, [r4, #4]
   30ffc:	str	r6, [r4, #40]	; 0x28
   31000:	ldrd	r2, [r7]
   31004:	strd	r2, [r4, #160]	; 0xa0
   31008:	ldr	r3, [r5, #48]	; 0x30
   3100c:	tst	r3, #4
   31010:	addeq	r3, r4, #168	; 0xa8
   31014:	streq	r3, [r4, #24]
   31018:	bne	30e90 <__assert_fail@plt+0x1e8cc>
   3101c:	ldr	r3, [r5, #44]	; 0x2c
   31020:	cmp	r3, #0
   31024:	beq	31034 <__assert_fail@plt+0x1ea70>
   31028:	ldr	r3, [r5, #48]	; 0x30
   3102c:	tst	r3, #1024	; 0x400
   31030:	beq	310e0 <__assert_fail@plt+0x1eb1c>
   31034:	ldr	r3, [r5, #48]	; 0x30
   31038:	tst	r3, #8
   3103c:	beq	3104c <__assert_fail@plt+0x1ea88>
   31040:	ldrb	r2, [r7, #18]
   31044:	tst	r2, #251	; 0xfb
   31048:	bne	30eb0 <__assert_fail@plt+0x1e8ec>
   3104c:	mov	r3, #11
   31050:	strh	r3, [r4, #56]	; 0x38
   31054:	ldrb	r3, [r7, #18]
   31058:	sub	r3, r3, #1
   3105c:	cmp	r3, #11
   31060:	ldrls	pc, [pc, r3, lsl #2]
   31064:	b	310d4 <__assert_fail@plt+0x1eb10>
   31068:	andeq	r1, r3, r4, lsr #1
   3106c:	andeq	r0, r3, r0, lsl pc
   31070:	ldrdeq	r1, [r3], -r4
   31074:	muleq	r3, r8, r0
   31078:	ldrdeq	r1, [r3], -r4
   3107c:	andeq	r1, r3, r4, asr #5
   31080:	ldrdeq	r1, [r3], -r4
   31084:	strheq	r1, [r3], -ip
   31088:	ldrdeq	r1, [r3], -r4
   3108c:	strheq	r1, [r3], -r0
   31090:	ldrdeq	r1, [r3], -r4
   31094:	andeq	r1, r3, r8, asr #1
   31098:	mov	r3, #0
   3109c:	mov	r2, #16384	; 0x4000
   310a0:	b	30f18 <__assert_fail@plt+0x1e954>
   310a4:	mov	r3, #0
   310a8:	mov	r2, #4096	; 0x1000
   310ac:	b	30f18 <__assert_fail@plt+0x1e954>
   310b0:	mov	r3, #0
   310b4:	mov	r2, #40960	; 0xa000
   310b8:	b	30f18 <__assert_fail@plt+0x1e954>
   310bc:	mov	r3, #0
   310c0:	mov	r2, #32768	; 0x8000
   310c4:	b	30f18 <__assert_fail@plt+0x1e954>
   310c8:	mov	r3, #0
   310cc:	mov	r2, #49152	; 0xc000
   310d0:	b	30f18 <__assert_fail@plt+0x1e954>
   310d4:	mov	r3, #0
   310d8:	mov	r2, #0
   310dc:	b	30f18 <__assert_fail@plt+0x1e954>
   310e0:	mov	r2, #0
   310e4:	mov	r1, r4
   310e8:	mov	r0, r5
   310ec:	bl	2fe44 <__assert_fail@plt+0x1d880>
   310f0:	strh	r0, [r4, #56]	; 0x38
   310f4:	b	30f34 <__assert_fail@plt+0x1e970>
   310f8:	ldr	r3, [r5, #44]	; 0x2c
   310fc:	cmp	r3, #0
   31100:	beq	3110c <__assert_fail@plt+0x1eb48>
   31104:	movw	r8, #10001	; 0x2711
   31108:	b	30f6c <__assert_fail@plt+0x1e9a8>
   3110c:	ldr	r1, [sp, #60]	; 0x3c
   31110:	mov	r0, r9
   31114:	bl	302d8 <__assert_fail@plt+0x1dd14>
   31118:	movw	r3, #26985	; 0x6969
   3111c:	cmp	r0, r3
   31120:	beq	31150 <__assert_fail@plt+0x1eb8c>
   31124:	ldr	r3, [sp, #44]	; 0x2c
   31128:	cmp	r0, r3
   3112c:	beq	3115c <__assert_fail@plt+0x1eb98>
   31130:	ldr	r3, [sp, #48]	; 0x30
   31134:	cmp	r0, r3
   31138:	moveq	r3, #0
   3113c:	streq	r3, [sp, #36]	; 0x24
   31140:	beq	30f5c <__assert_fail@plt+0x1e998>
   31144:	mov	r3, #1
   31148:	str	r3, [sp, #36]	; 0x24
   3114c:	b	31104 <__assert_fail@plt+0x1eb40>
   31150:	mov	r3, #0
   31154:	str	r3, [sp, #36]	; 0x24
   31158:	b	30f5c <__assert_fail@plt+0x1e998>
   3115c:	mov	r3, #0
   31160:	str	r3, [sp, #36]	; 0x24
   31164:	b	30f5c <__assert_fail@plt+0x1e998>
   31168:	ldr	r4, [sp]
   3116c:	b	30f6c <__assert_fail@plt+0x1e9a8>
   31170:	ldr	r1, [r5, #24]
   31174:	ldr	r3, [r5, #4]
   31178:	cmp	r3, #0
   3117c:	bne	31198 <__assert_fail@plt+0x1ebd4>
   31180:	ldr	r3, [sp, #4]
   31184:	b	311d0 <__assert_fail@plt+0x1ec0c>
   31188:	str	r1, [r3, #28]
   3118c:	ldr	r3, [r3, #8]
   31190:	cmp	r3, #0
   31194:	beq	31180 <__assert_fail@plt+0x1ebbc>
   31198:	ldr	r2, [r3, #24]
   3119c:	add	r0, r3, #168	; 0xa8
   311a0:	cmp	r2, r0
   311a4:	beq	31188 <__assert_fail@plt+0x1ebc4>
   311a8:	ldr	r0, [r3, #28]
   311ac:	sub	r2, r2, r0
   311b0:	add	r2, r1, r2
   311b4:	str	r2, [r3, #24]
   311b8:	b	31188 <__assert_fail@plt+0x1ebc4>
   311bc:	str	r1, [r3, #28]
   311c0:	ldr	r2, [r3, #8]
   311c4:	cmp	r2, #0
   311c8:	ldreq	r2, [r3, #4]
   311cc:	mov	r3, r2
   311d0:	ldr	r2, [r3, #48]	; 0x30
   311d4:	cmp	r2, #0
   311d8:	blt	30cb4 <__assert_fail@plt+0x1e6f0>
   311dc:	ldr	r2, [r3, #24]
   311e0:	add	r0, r3, #168	; 0xa8
   311e4:	cmp	r2, r0
   311e8:	beq	311bc <__assert_fail@plt+0x1ebf8>
   311ec:	ldr	r0, [r3, #28]
   311f0:	sub	r2, r2, r0
   311f4:	add	r2, r1, r2
   311f8:	str	r2, [r3, #24]
   311fc:	b	311bc <__assert_fail@plt+0x1ebf8>
   31200:	movw	r3, #41484	; 0xa20c
   31204:	movt	r3, #4
   31208:	mvn	r2, #0
   3120c:	ldr	r1, [r9, #4]
   31210:	mov	r0, r5
   31214:	bl	305c8 <__assert_fail@plt+0x1e004>
   31218:	adds	r0, r0, #0
   3121c:	movne	r0, #1
   31220:	b	30d2c <__assert_fail@plt+0x1e768>
   31224:	mov	r3, #7
   31228:	strh	r3, [r9, #56]	; 0x38
   3122c:	ldr	r3, [r5, #48]	; 0x30
   31230:	orr	r3, r3, #8192	; 0x2000
   31234:	str	r3, [r5, #48]	; 0x30
   31238:	ldr	r0, [sp, #4]
   3123c:	bl	30208 <__assert_fail@plt+0x1dc44>
   31240:	mov	r3, #0
   31244:	str	r3, [sp, #4]
   31248:	b	30e20 <__assert_fail@plt+0x1e85c>
   3124c:	ldr	r3, [sp, #32]
   31250:	cmp	r3, #3
   31254:	beq	3126c <__assert_fail@plt+0x1eca8>
   31258:	ldr	r0, [sp, #4]
   3125c:	bl	30208 <__assert_fail@plt+0x1dc44>
   31260:	mov	r3, #0
   31264:	str	r3, [sp, #4]
   31268:	b	30e20 <__assert_fail@plt+0x1e85c>
   3126c:	ldrh	r3, [r9, #56]	; 0x38
   31270:	cmp	r3, #4
   31274:	cmpne	r3, #7
   31278:	movne	r3, #6
   3127c:	strhne	r3, [r9, #56]	; 0x38
   31280:	b	31258 <__assert_fail@plt+0x1ec94>
   31284:	movw	r3, #64900	; 0xfd84
   31288:	movt	r3, #2
   3128c:	str	r3, [r5, #44]	; 0x2c
   31290:	mov	r2, r8
   31294:	ldr	r1, [sp, #4]
   31298:	mov	r0, r5
   3129c:	bl	2ffb4 <__assert_fail@plt+0x1d9f0>
   312a0:	str	r0, [sp, #4]
   312a4:	mov	r3, #0
   312a8:	str	r3, [r5, #44]	; 0x2c
   312ac:	b	30e20 <__assert_fail@plt+0x1e85c>
   312b0:	mov	r3, #24576	; 0x6000
   312b4:	str	r3, [r4, #80]	; 0x50
   312b8:	mov	r2, #1
   312bc:	mov	r3, #0
   312c0:	b	30f2c <__assert_fail@plt+0x1e968>
   312c4:	mov	r3, #24576	; 0x6000
   312c8:	str	r3, [r4, #80]	; 0x50
   312cc:	mov	r2, #2
   312d0:	mov	r3, #0
   312d4:	b	30f2c <__assert_fail@plt+0x1e968>
   312d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   312dc:	strd	r6, [sp, #8]
   312e0:	strd	r8, [sp, #16]
   312e4:	strd	sl, [sp, #24]
   312e8:	str	lr, [sp, #32]
   312ec:	sub	sp, sp, #20
   312f0:	bic	r3, r1, #4080	; 0xff0
   312f4:	bic	r3, r3, #15
   312f8:	cmp	r3, #0
   312fc:	bne	313dc <__assert_fail@plt+0x1ee18>
   31300:	mov	r6, r0
   31304:	mov	r9, r1
   31308:	mov	sl, r2
   3130c:	and	r3, r1, #516	; 0x204
   31310:	cmp	r3, #516	; 0x204
   31314:	beq	313f0 <__assert_fail@plt+0x1ee2c>
   31318:	tst	r1, #18
   3131c:	beq	31404 <__assert_fail@plt+0x1ee40>
   31320:	mov	r1, #96	; 0x60
   31324:	mov	r0, #1
   31328:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3132c:	subs	r5, r0, #0
   31330:	beq	3162c <__assert_fail@plt+0x1f068>
   31334:	str	sl, [r5, #44]	; 0x2c
   31338:	tst	r9, #2
   3133c:	streq	r9, [r5, #48]	; 0x30
   31340:	bicne	r3, r9, #512	; 0x200
   31344:	orrne	r3, r3, #4
   31348:	strne	r3, [r5, #48]	; 0x30
   3134c:	mvn	r3, #99	; 0x63
   31350:	str	r3, [r5, #32]
   31354:	ldr	r0, [r6]
   31358:	cmp	r0, #0
   3135c:	beq	31418 <__assert_fail@plt+0x1ee54>
   31360:	mov	r7, r6
   31364:	mov	r4, #0
   31368:	bl	122d0 <strlen@plt>
   3136c:	cmp	r4, r0
   31370:	movcc	r4, r0
   31374:	ldr	r0, [r7, #4]!
   31378:	cmp	r0, #0
   3137c:	bne	31368 <__assert_fail@plt+0x1eda4>
   31380:	add	r1, r4, #1
   31384:	cmp	r1, #4096	; 0x1000
   31388:	movcc	r1, #4096	; 0x1000
   3138c:	mov	r0, r5
   31390:	bl	2fdc0 <__assert_fail@plt+0x1d7fc>
   31394:	cmp	r0, #0
   31398:	beq	31620 <__assert_fail@plt+0x1f05c>
   3139c:	ldr	fp, [r6]
   313a0:	cmp	fp, #0
   313a4:	beq	3164c <__assert_fail@plt+0x1f088>
   313a8:	mov	r2, #0
   313ac:	movw	r1, #25528	; 0x63b8
   313b0:	movt	r1, #4
   313b4:	mov	r0, r5
   313b8:	bl	300a4 <__assert_fail@plt+0x1dae0>
   313bc:	subs	fp, r0, #0
   313c0:	beq	31618 <__assert_fail@plt+0x1f054>
   313c4:	mvn	r3, #0
   313c8:	str	r3, [fp, #48]	; 0x30
   313cc:	cmp	sl, #0
   313d0:	moveq	r3, #1
   313d4:	bne	31654 <__assert_fail@plt+0x1f090>
   313d8:	b	3165c <__assert_fail@plt+0x1f098>
   313dc:	bl	12318 <__errno_location@plt>
   313e0:	mov	r3, #22
   313e4:	str	r3, [r0]
   313e8:	mov	r5, #0
   313ec:	b	3162c <__assert_fail@plt+0x1f068>
   313f0:	bl	12318 <__errno_location@plt>
   313f4:	mov	r3, #22
   313f8:	str	r3, [r0]
   313fc:	mov	r5, #0
   31400:	b	3162c <__assert_fail@plt+0x1f068>
   31404:	bl	12318 <__errno_location@plt>
   31408:	mov	r3, #22
   3140c:	str	r3, [r0]
   31410:	mov	r5, #0
   31414:	b	3162c <__assert_fail@plt+0x1f068>
   31418:	mov	r4, #0
   3141c:	b	31380 <__assert_fail@plt+0x1edbc>
   31420:	sub	r1, r0, #1
   31424:	ldrb	r3, [r4, r1]
   31428:	cmp	r3, #47	; 0x2f
   3142c:	bne	314b8 <__assert_fail@plt+0x1eef4>
   31430:	sub	r0, r0, #2
   31434:	add	r3, r4, r0
   31438:	ldrb	r0, [r4, r0]
   3143c:	cmp	r0, #47	; 0x2f
   31440:	moveq	r2, r1
   31444:	bne	314b8 <__assert_fail@plt+0x1eef4>
   31448:	ldrb	r1, [r3, #-1]!
   3144c:	cmp	r1, #47	; 0x2f
   31450:	bne	314b8 <__assert_fail@plt+0x1eef4>
   31454:	sub	r2, r2, #1
   31458:	cmp	r2, #1
   3145c:	bhi	31448 <__assert_fail@plt+0x1ee84>
   31460:	b	314b8 <__assert_fail@plt+0x1eef4>
   31464:	mov	r2, r9
   31468:	mov	r1, r4
   3146c:	ldr	r0, [sp, #4]
   31470:	bl	2fe44 <__assert_fail@plt+0x1d880>
   31474:	strh	r0, [r4, #56]	; 0x38
   31478:	cmp	sl, #0
   3147c:	beq	31520 <__assert_fail@plt+0x1ef5c>
   31480:	str	r7, [r4, #8]
   31484:	mov	r7, r4
   31488:	add	r8, r8, #1
   3148c:	ldr	r4, [r6, #4]!
   31490:	cmp	r4, #0
   31494:	beq	31538 <__assert_fail@plt+0x1ef74>
   31498:	mov	r0, r4
   3149c:	bl	122d0 <strlen@plt>
   314a0:	mov	r2, r0
   314a4:	cmp	r0, #2
   314a8:	movls	r3, #0
   314ac:	andhi	r3, r5, #1
   314b0:	cmp	r3, #0
   314b4:	bne	31420 <__assert_fail@plt+0x1ee5c>
   314b8:	mov	r1, r4
   314bc:	ldr	r0, [sp, #4]
   314c0:	bl	300a4 <__assert_fail@plt+0x1dae0>
   314c4:	subs	r4, r0, #0
   314c8:	beq	31604 <__assert_fail@plt+0x1f040>
   314cc:	str	r9, [r4, #48]	; 0x30
   314d0:	str	fp, [r4, #4]
   314d4:	add	r3, r4, #168	; 0xa8
   314d8:	str	r3, [r4, #24]
   314dc:	ldr	r3, [sp, #8]
   314e0:	cmp	r7, #0
   314e4:	moveq	r3, #0
   314e8:	cmp	r3, #0
   314ec:	beq	31464 <__assert_fail@plt+0x1eea0>
   314f0:	mov	r3, #11
   314f4:	strh	r3, [r4, #56]	; 0x38
   314f8:	mov	r2, #2
   314fc:	mov	r3, #0
   31500:	strd	r2, [r4, #112]	; 0x70
   31504:	cmp	sl, #0
   31508:	bne	31480 <__assert_fail@plt+0x1eebc>
   3150c:	str	r9, [r4, #8]
   31510:	ldr	r3, [sp, #12]
   31514:	str	r4, [r3, #8]
   31518:	str	r4, [sp, #12]
   3151c:	b	31488 <__assert_fail@plt+0x1eec4>
   31520:	str	r9, [r4, #8]
   31524:	cmp	r7, #0
   31528:	streq	r4, [sp, #12]
   3152c:	moveq	r7, r4
   31530:	beq	31488 <__assert_fail@plt+0x1eec4>
   31534:	b	31510 <__assert_fail@plt+0x1ef4c>
   31538:	ldr	r5, [sp, #4]
   3153c:	cmp	sl, #0
   31540:	cmpne	r8, #1
   31544:	bhi	315b0 <__assert_fail@plt+0x1efec>
   31548:	mov	r2, #0
   3154c:	movw	r1, #25528	; 0x63b8
   31550:	movt	r1, #4
   31554:	mov	r0, r5
   31558:	bl	300a4 <__assert_fail@plt+0x1dae0>
   3155c:	str	r0, [r5]
   31560:	cmp	r0, #0
   31564:	beq	31608 <__assert_fail@plt+0x1f044>
   31568:	str	r7, [r0, #8]
   3156c:	ldr	r3, [r5]
   31570:	mov	r2, #9
   31574:	strh	r2, [r3, #56]	; 0x38
   31578:	ldr	r3, [r5]
   3157c:	mov	r2, #1
   31580:	str	r2, [r3, #48]	; 0x30
   31584:	mov	r0, r5
   31588:	bl	30134 <__assert_fail@plt+0x1db70>
   3158c:	cmp	r0, #0
   31590:	beq	31608 <__assert_fail@plt+0x1f044>
   31594:	ldr	r3, [r5, #48]	; 0x30
   31598:	tst	r3, #516	; 0x204
   3159c:	beq	315d8 <__assert_fail@plt+0x1f014>
   315a0:	mvn	r1, #0
   315a4:	add	r0, r5, #60	; 0x3c
   315a8:	bl	41f0c <__assert_fail@plt+0x2f948>
   315ac:	b	3162c <__assert_fail@plt+0x1f068>
   315b0:	mov	r2, r8
   315b4:	mov	r1, r7
   315b8:	mov	r0, r5
   315bc:	bl	2ffb4 <__assert_fail@plt+0x1d9f0>
   315c0:	mov	r7, r0
   315c4:	b	31548 <__assert_fail@plt+0x1ef84>
   315c8:	mov	r7, r4
   315cc:	b	31548 <__assert_fail@plt+0x1ef84>
   315d0:	mov	r7, fp
   315d4:	b	31548 <__assert_fail@plt+0x1ef84>
   315d8:	movw	r1, #29972	; 0x7514
   315dc:	movt	r1, #4
   315e0:	mov	r0, r5
   315e4:	bl	301bc <__assert_fail@plt+0x1dbf8>
   315e8:	str	r0, [r5, #28]
   315ec:	cmp	r0, #0
   315f0:	bge	315a0 <__assert_fail@plt+0x1efdc>
   315f4:	ldr	r3, [r5, #48]	; 0x30
   315f8:	orr	r3, r3, #4
   315fc:	str	r3, [r5, #48]	; 0x30
   31600:	b	315a0 <__assert_fail@plt+0x1efdc>
   31604:	ldr	r5, [sp, #4]
   31608:	mov	r0, r7
   3160c:	bl	30208 <__assert_fail@plt+0x1dc44>
   31610:	mov	r0, fp
   31614:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31618:	ldr	r0, [r5, #24]
   3161c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31620:	mov	r0, r5
   31624:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31628:	mov	r5, #0
   3162c:	mov	r0, r5
   31630:	add	sp, sp, #20
   31634:	ldrd	r4, [sp]
   31638:	ldrd	r6, [sp, #8]
   3163c:	ldrd	r8, [sp, #16]
   31640:	ldrd	sl, [sp, #24]
   31644:	add	sp, sp, #32
   31648:	pop	{pc}		; (ldr pc, [sp], #4)
   3164c:	cmp	sl, #0
   31650:	beq	315d0 <__assert_fail@plt+0x1f00c>
   31654:	ldr	r3, [r5, #48]	; 0x30
   31658:	ubfx	r3, r3, #10, #1
   3165c:	str	r3, [sp, #8]
   31660:	ldr	r4, [r6]
   31664:	cmp	r4, #0
   31668:	beq	315c8 <__assert_fail@plt+0x1f004>
   3166c:	mov	r3, #0
   31670:	mov	r7, r3
   31674:	str	r3, [sp, #12]
   31678:	mov	r8, r3
   3167c:	eor	r9, r9, #2048	; 0x800
   31680:	ubfx	r3, r9, #11, #1
   31684:	mov	r9, r7
   31688:	str	r5, [sp, #4]
   3168c:	mov	r5, r3
   31690:	b	31498 <__assert_fail@plt+0x1eed4>
   31694:	strd	r4, [sp, #-16]!
   31698:	str	r6, [sp, #8]
   3169c:	str	lr, [sp, #12]
   316a0:	mov	r5, r0
   316a4:	ldr	r0, [r0]
   316a8:	cmp	r0, #0
   316ac:	beq	316e4 <__assert_fail@plt+0x1f120>
   316b0:	ldr	r3, [r0, #48]	; 0x30
   316b4:	cmp	r3, #0
   316b8:	blt	31734 <__assert_fail@plt+0x1f170>
   316bc:	ldr	r4, [r0, #8]
   316c0:	cmp	r4, #0
   316c4:	ldreq	r4, [r0, #4]
   316c8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   316cc:	mov	r0, r4
   316d0:	ldr	r3, [r4, #48]	; 0x30
   316d4:	cmp	r3, #0
   316d8:	bge	316bc <__assert_fail@plt+0x1f0f8>
   316dc:	mov	r0, r4
   316e0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   316e4:	ldr	r0, [r5, #4]
   316e8:	cmp	r0, #0
   316ec:	beq	316f4 <__assert_fail@plt+0x1f130>
   316f0:	bl	30208 <__assert_fail@plt+0x1dc44>
   316f4:	ldr	r0, [r5, #8]
   316f8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   316fc:	ldr	r0, [r5, #24]
   31700:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31704:	ldr	r3, [r5, #48]	; 0x30
   31708:	tst	r3, #512	; 0x200
   3170c:	beq	3173c <__assert_fail@plt+0x1f178>
   31710:	ldr	r0, [r5, #32]
   31714:	cmp	r0, #0
   31718:	blt	31744 <__assert_fail@plt+0x1f180>
   3171c:	bl	1257c <close@plt>
   31720:	cmp	r0, #0
   31724:	beq	31744 <__assert_fail@plt+0x1f180>
   31728:	bl	12318 <__errno_location@plt>
   3172c:	ldr	r4, [r0]
   31730:	b	317c4 <__assert_fail@plt+0x1f200>
   31734:	mov	r4, r0
   31738:	b	316dc <__assert_fail@plt+0x1f118>
   3173c:	tst	r3, #4
   31740:	beq	3178c <__assert_fail@plt+0x1f1c8>
   31744:	add	r0, r5, #60	; 0x3c
   31748:	bl	30298 <__assert_fail@plt+0x1dcd4>
   3174c:	ldr	r0, [r5, #52]	; 0x34
   31750:	cmp	r0, #0
   31754:	movne	r4, #0
   31758:	beq	317f8 <__assert_fail@plt+0x1f234>
   3175c:	bl	23e28 <__assert_fail@plt+0x11864>
   31760:	mov	r0, r5
   31764:	bl	30258 <__assert_fail@plt+0x1dc94>
   31768:	mov	r0, r5
   3176c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31770:	cmp	r4, #0
   31774:	bne	317e8 <__assert_fail@plt+0x1f224>
   31778:	mov	r0, r4
   3177c:	ldrd	r4, [sp]
   31780:	ldr	r6, [sp, #8]
   31784:	add	sp, sp, #12
   31788:	pop	{pc}		; (ldr pc, [sp], #4)
   3178c:	ldr	r0, [r5, #28]
   31790:	bl	124c8 <fchdir@plt>
   31794:	subs	r4, r0, #0
   31798:	beq	317a4 <__assert_fail@plt+0x1f1e0>
   3179c:	bl	12318 <__errno_location@plt>
   317a0:	ldr	r4, [r0]
   317a4:	ldr	r0, [r5, #28]
   317a8:	bl	1257c <close@plt>
   317ac:	adds	r0, r0, #0
   317b0:	movne	r0, #1
   317b4:	cmp	r4, #0
   317b8:	movne	r0, #0
   317bc:	cmp	r0, #0
   317c0:	bne	317dc <__assert_fail@plt+0x1f218>
   317c4:	add	r0, r5, #60	; 0x3c
   317c8:	bl	30298 <__assert_fail@plt+0x1dcd4>
   317cc:	ldr	r0, [r5, #52]	; 0x34
   317d0:	cmp	r0, #0
   317d4:	bne	3175c <__assert_fail@plt+0x1f198>
   317d8:	b	31760 <__assert_fail@plt+0x1f19c>
   317dc:	bl	12318 <__errno_location@plt>
   317e0:	ldr	r4, [r0]
   317e4:	b	317c4 <__assert_fail@plt+0x1f200>
   317e8:	bl	12318 <__errno_location@plt>
   317ec:	str	r4, [r0]
   317f0:	mvn	r4, #0
   317f4:	b	31778 <__assert_fail@plt+0x1f1b4>
   317f8:	mov	r0, r5
   317fc:	bl	30258 <__assert_fail@plt+0x1dc94>
   31800:	mov	r0, r5
   31804:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31808:	mov	r4, #0
   3180c:	b	31778 <__assert_fail@plt+0x1f1b4>
   31810:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31814:	strd	r6, [sp, #8]
   31818:	str	r8, [sp, #16]
   3181c:	str	lr, [sp, #20]
   31820:	ldr	r5, [r0]
   31824:	cmp	r5, #0
   31828:	beq	31e88 <__assert_fail@plt+0x1f8c4>
   3182c:	ldr	r3, [r0, #48]	; 0x30
   31830:	tst	r3, #8192	; 0x2000
   31834:	bne	31e84 <__assert_fail@plt+0x1f8c0>
   31838:	mov	r8, r0
   3183c:	ldrh	r3, [r5, #60]	; 0x3c
   31840:	mov	r2, #3
   31844:	strh	r2, [r5, #60]	; 0x3c
   31848:	cmp	r3, #1
   3184c:	beq	318c8 <__assert_fail@plt+0x1f304>
   31850:	cmp	r3, #2
   31854:	beq	318dc <__assert_fail@plt+0x1f318>
   31858:	ldrh	r2, [r5, #56]	; 0x38
   3185c:	cmp	r2, #1
   31860:	bne	31b5c <__assert_fail@plt+0x1f598>
   31864:	cmp	r3, #4
   31868:	beq	3188c <__assert_fail@plt+0x1f2c8>
   3186c:	ldr	r1, [r8, #48]	; 0x30
   31870:	tst	r1, #64	; 0x40
   31874:	beq	31970 <__assert_fail@plt+0x1f3ac>
   31878:	ldrd	r6, [r5, #64]	; 0x40
   3187c:	ldrd	r2, [r8, #16]
   31880:	cmp	r7, r3
   31884:	cmpeq	r6, r2
   31888:	beq	31970 <__assert_fail@plt+0x1f3ac>
   3188c:	ldrh	r3, [r5, #58]	; 0x3a
   31890:	tst	r3, #2
   31894:	bne	31964 <__assert_fail@plt+0x1f3a0>
   31898:	ldr	r0, [r8, #4]
   3189c:	cmp	r0, #0
   318a0:	beq	318b0 <__assert_fail@plt+0x1f2ec>
   318a4:	bl	30208 <__assert_fail@plt+0x1dc44>
   318a8:	mov	r3, #0
   318ac:	str	r3, [r8, #4]
   318b0:	mov	r3, #6
   318b4:	strh	r3, [r5, #56]	; 0x38
   318b8:	mov	r1, r5
   318bc:	mov	r0, r8
   318c0:	bl	307d4 <__assert_fail@plt+0x1e210>
   318c4:	b	31e88 <__assert_fail@plt+0x1f8c4>
   318c8:	mov	r2, #0
   318cc:	mov	r1, r5
   318d0:	bl	2fe44 <__assert_fail@plt+0x1d880>
   318d4:	strh	r0, [r5, #56]	; 0x38
   318d8:	b	31e88 <__assert_fail@plt+0x1f8c4>
   318dc:	ldrh	r2, [r5, #56]	; 0x38
   318e0:	sub	r3, r2, #12
   318e4:	uxth	r3, r3
   318e8:	cmp	r3, #1
   318ec:	bls	318fc <__assert_fail@plt+0x1f338>
   318f0:	cmp	r2, #1
   318f4:	bne	31b5c <__assert_fail@plt+0x1f598>
   318f8:	b	3186c <__assert_fail@plt+0x1f2a8>
   318fc:	mov	r2, #1
   31900:	mov	r1, r5
   31904:	bl	2fe44 <__assert_fail@plt+0x1d880>
   31908:	strh	r0, [r5, #56]	; 0x38
   3190c:	cmp	r0, #1
   31910:	bne	319ec <__assert_fail@plt+0x1f428>
   31914:	ldr	r3, [r8, #48]	; 0x30
   31918:	tst	r3, #4
   3191c:	bne	319ec <__assert_fail@plt+0x1f428>
   31920:	movw	r1, #29972	; 0x7514
   31924:	movt	r1, #4
   31928:	mov	r0, r8
   3192c:	bl	301bc <__assert_fail@plt+0x1dbf8>
   31930:	str	r0, [r5, #36]	; 0x24
   31934:	cmp	r0, #0
   31938:	blt	3194c <__assert_fail@plt+0x1f388>
   3193c:	ldrh	r3, [r5, #58]	; 0x3a
   31940:	orr	r3, r3, #2
   31944:	strh	r3, [r5, #58]	; 0x3a
   31948:	b	319ec <__assert_fail@plt+0x1f428>
   3194c:	bl	12318 <__errno_location@plt>
   31950:	ldr	r3, [r0]
   31954:	str	r3, [r5, #32]
   31958:	mov	r3, #7
   3195c:	strh	r3, [r5, #56]	; 0x38
   31960:	b	319ec <__assert_fail@plt+0x1f428>
   31964:	ldr	r0, [r5, #36]	; 0x24
   31968:	bl	1257c <close@plt>
   3196c:	b	31898 <__assert_fail@plt+0x1f2d4>
   31970:	ldr	r0, [r8, #4]
   31974:	cmp	r0, #0
   31978:	beq	31a54 <__assert_fail@plt+0x1f490>
   3197c:	tst	r1, #4096	; 0x1000
   31980:	bne	31a40 <__assert_fail@plt+0x1f47c>
   31984:	ldr	r3, [r5, #24]
   31988:	mvn	r2, #0
   3198c:	mov	r1, r5
   31990:	mov	r0, r8
   31994:	bl	305c8 <__assert_fail@plt+0x1e004>
   31998:	cmp	r0, #0
   3199c:	bne	31aa8 <__assert_fail@plt+0x1f4e4>
   319a0:	ldr	r5, [r8, #4]
   319a4:	mov	r3, #0
   319a8:	str	r3, [r8, #4]
   319ac:	ldr	r2, [r8, #24]
   319b0:	ldr	r0, [r5, #4]
   319b4:	ldr	r1, [r0, #40]	; 0x28
   319b8:	sub	r3, r1, #1
   319bc:	ldr	r0, [r0, #28]
   319c0:	ldrb	r0, [r0, r3]
   319c4:	cmp	r0, #47	; 0x2f
   319c8:	movne	r3, r1
   319cc:	add	r0, r2, r3
   319d0:	mov	r1, #47	; 0x2f
   319d4:	strb	r1, [r2, r3]
   319d8:	ldr	r2, [r5, #52]	; 0x34
   319dc:	add	r2, r2, #1
   319e0:	add	r1, r5, #168	; 0xa8
   319e4:	add	r0, r0, #1
   319e8:	bl	11f94 <memmove@plt>
   319ec:	str	r5, [r8]
   319f0:	ldrh	r3, [r5, #56]	; 0x38
   319f4:	cmp	r3, #11
   319f8:	beq	31d7c <__assert_fail@plt+0x1f7b8>
   319fc:	ldrh	r3, [r5, #56]	; 0x38
   31a00:	cmp	r3, #1
   31a04:	bne	31e88 <__assert_fail@plt+0x1f8c4>
   31a08:	ldr	r3, [r5, #48]	; 0x30
   31a0c:	cmp	r3, #0
   31a10:	ldrdeq	r2, [r5, #64]	; 0x40
   31a14:	strdeq	r2, [r8, #16]
   31a18:	mov	r1, r5
   31a1c:	mov	r0, r8
   31a20:	bl	30404 <__assert_fail@plt+0x1de40>
   31a24:	cmp	r0, #0
   31a28:	bne	31e88 <__assert_fail@plt+0x1f8c4>
   31a2c:	bl	12318 <__errno_location@plt>
   31a30:	mov	r3, #12
   31a34:	str	r3, [r0]
   31a38:	mov	r5, #0
   31a3c:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31a40:	bic	r1, r1, #4096	; 0x1000
   31a44:	str	r1, [r8, #48]	; 0x30
   31a48:	bl	30208 <__assert_fail@plt+0x1dc44>
   31a4c:	mov	r3, #0
   31a50:	str	r3, [r8, #4]
   31a54:	mov	r1, #3
   31a58:	mov	r0, r8
   31a5c:	bl	30898 <__assert_fail@plt+0x1e2d4>
   31a60:	str	r0, [r8, #4]
   31a64:	cmp	r0, #0
   31a68:	bne	319a0 <__assert_fail@plt+0x1f3dc>
   31a6c:	ldr	r3, [r8, #48]	; 0x30
   31a70:	tst	r3, #8192	; 0x2000
   31a74:	movne	r5, r0
   31a78:	bne	31e88 <__assert_fail@plt+0x1f8c4>
   31a7c:	ldr	r3, [r5, #32]
   31a80:	cmp	r3, #0
   31a84:	beq	31a98 <__assert_fail@plt+0x1f4d4>
   31a88:	ldrh	r3, [r5, #56]	; 0x38
   31a8c:	cmp	r3, #4
   31a90:	movne	r3, #7
   31a94:	strhne	r3, [r5, #56]	; 0x38
   31a98:	mov	r1, r5
   31a9c:	mov	r0, r8
   31aa0:	bl	307d4 <__assert_fail@plt+0x1e210>
   31aa4:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31aa8:	bl	12318 <__errno_location@plt>
   31aac:	ldr	r3, [r0]
   31ab0:	str	r3, [r5, #32]
   31ab4:	ldrh	r3, [r5, #58]	; 0x3a
   31ab8:	orr	r3, r3, #1
   31abc:	strh	r3, [r5, #58]	; 0x3a
   31ac0:	ldr	r3, [r8, #4]
   31ac4:	cmp	r3, #0
   31ac8:	beq	319a0 <__assert_fail@plt+0x1f3dc>
   31acc:	ldr	r2, [r3, #4]
   31ad0:	ldr	r2, [r2, #24]
   31ad4:	str	r2, [r3, #24]
   31ad8:	ldr	r3, [r3, #8]
   31adc:	cmp	r3, #0
   31ae0:	bne	31acc <__assert_fail@plt+0x1f508>
   31ae4:	b	319a0 <__assert_fail@plt+0x1f3dc>
   31ae8:	str	r3, [r8]
   31aec:	ldr	r2, [r8, #24]
   31af0:	ldr	r3, [r3, #40]	; 0x28
   31af4:	mov	r1, #0
   31af8:	strb	r1, [r2, r3]
   31afc:	mov	r1, #3
   31b00:	mov	r0, r8
   31b04:	bl	30898 <__assert_fail@plt+0x1e2d4>
   31b08:	subs	r6, r0, #0
   31b0c:	bne	31b24 <__assert_fail@plt+0x1f560>
   31b10:	ldr	r3, [r8, #48]	; 0x30
   31b14:	tst	r3, #8192	; 0x2000
   31b18:	beq	31b78 <__assert_fail@plt+0x1f5b4>
   31b1c:	mov	r5, r6
   31b20:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31b24:	mov	r0, r5
   31b28:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31b2c:	mov	r5, r6
   31b30:	b	319ac <__assert_fail@plt+0x1f3e8>
   31b34:	str	r4, [r8]
   31b38:	mov	r0, r5
   31b3c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31b40:	ldr	r3, [r4, #48]	; 0x30
   31b44:	cmp	r3, #0
   31b48:	beq	31c40 <__assert_fail@plt+0x1f67c>
   31b4c:	ldrh	r3, [r4, #60]	; 0x3c
   31b50:	mov	r5, r4
   31b54:	cmp	r3, #4
   31b58:	bne	31cf4 <__assert_fail@plt+0x1f730>
   31b5c:	ldr	r4, [r5, #8]
   31b60:	cmp	r4, #0
   31b64:	bne	31b34 <__assert_fail@plt+0x1f570>
   31b68:	ldr	r3, [r5, #4]
   31b6c:	ldr	r2, [r3, #12]
   31b70:	cmp	r2, #0
   31b74:	bne	31ae8 <__assert_fail@plt+0x1f524>
   31b78:	ldr	r6, [r5, #4]
   31b7c:	str	r6, [r8]
   31b80:	mov	r0, r5
   31b84:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31b88:	ldr	r3, [r6, #48]	; 0x30
   31b8c:	cmn	r3, #1
   31b90:	beq	31db4 <__assert_fail@plt+0x1f7f0>
   31b94:	ldrh	r3, [r6, #56]	; 0x38
   31b98:	cmp	r3, #11
   31b9c:	beq	31dd4 <__assert_fail@plt+0x1f810>
   31ba0:	ldr	r2, [r8, #24]
   31ba4:	ldr	r3, [r6, #40]	; 0x28
   31ba8:	mov	r1, #0
   31bac:	strb	r1, [r2, r3]
   31bb0:	ldr	r3, [r6, #48]	; 0x30
   31bb4:	cmp	r3, r1
   31bb8:	beq	31dd8 <__assert_fail@plt+0x1f814>
   31bbc:	ldrh	r3, [r6, #58]	; 0x3a
   31bc0:	tst	r3, #2
   31bc4:	beq	31e40 <__assert_fail@plt+0x1f87c>
   31bc8:	ldr	r3, [r8, #48]	; 0x30
   31bcc:	tst	r3, #4
   31bd0:	bne	31bec <__assert_fail@plt+0x1f628>
   31bd4:	tst	r3, #512	; 0x200
   31bd8:	beq	31e14 <__assert_fail@plt+0x1f850>
   31bdc:	mov	r2, #1
   31be0:	ldr	r1, [r6, #36]	; 0x24
   31be4:	mov	r0, r8
   31be8:	bl	304cc <__assert_fail@plt+0x1df08>
   31bec:	ldr	r0, [r6, #36]	; 0x24
   31bf0:	bl	1257c <close@plt>
   31bf4:	ldrh	r3, [r6, #56]	; 0x38
   31bf8:	cmp	r3, #2
   31bfc:	beq	31c28 <__assert_fail@plt+0x1f664>
   31c00:	ldr	r3, [r6, #32]
   31c04:	cmp	r3, #0
   31c08:	movne	r3, #7
   31c0c:	strhne	r3, [r6, #56]	; 0x38
   31c10:	bne	31c28 <__assert_fail@plt+0x1f664>
   31c14:	mov	r3, #6
   31c18:	strh	r3, [r6, #56]	; 0x38
   31c1c:	mov	r1, r6
   31c20:	mov	r0, r8
   31c24:	bl	307d4 <__assert_fail@plt+0x1e210>
   31c28:	ldr	r5, [r8, #48]	; 0x30
   31c2c:	and	r5, r5, #8192	; 0x2000
   31c30:	cmp	r5, #0
   31c34:	moveq	r5, r6
   31c38:	movne	r5, r4
   31c3c:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31c40:	mov	r0, r8
   31c44:	bl	30564 <__assert_fail@plt+0x1dfa0>
   31c48:	cmp	r0, #0
   31c4c:	bne	31cd0 <__assert_fail@plt+0x1f70c>
   31c50:	mov	r0, r8
   31c54:	bl	30258 <__assert_fail@plt+0x1dc94>
   31c58:	ldr	r2, [r4, #52]	; 0x34
   31c5c:	str	r2, [r4, #40]	; 0x28
   31c60:	add	r5, r4, #168	; 0xa8
   31c64:	add	r2, r2, #1
   31c68:	mov	r1, r5
   31c6c:	ldr	r0, [r8, #24]
   31c70:	bl	11f94 <memmove@plt>
   31c74:	mov	r1, #47	; 0x2f
   31c78:	mov	r0, r5
   31c7c:	bl	12438 <strrchr@plt>
   31c80:	cmp	r0, #0
   31c84:	beq	31cb4 <__assert_fail@plt+0x1f6f0>
   31c88:	cmp	r5, r0
   31c8c:	beq	31ce4 <__assert_fail@plt+0x1f720>
   31c90:	add	r6, r0, #1
   31c94:	mov	r0, r6
   31c98:	bl	122d0 <strlen@plt>
   31c9c:	mov	r7, r0
   31ca0:	add	r2, r0, #1
   31ca4:	mov	r1, r6
   31ca8:	mov	r0, r5
   31cac:	bl	11f94 <memmove@plt>
   31cb0:	str	r7, [r4, #52]	; 0x34
   31cb4:	ldr	r3, [r8, #24]
   31cb8:	str	r3, [r4, #28]
   31cbc:	str	r3, [r4, #24]
   31cc0:	mov	r0, r8
   31cc4:	bl	30134 <__assert_fail@plt+0x1db70>
   31cc8:	mov	r5, r4
   31ccc:	b	319ec <__assert_fail@plt+0x1f428>
   31cd0:	ldr	r3, [r8, #48]	; 0x30
   31cd4:	orr	r3, r3, #8192	; 0x2000
   31cd8:	str	r3, [r8, #48]	; 0x30
   31cdc:	mov	r5, #0
   31ce0:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31ce4:	ldrb	r3, [r0, #1]
   31ce8:	cmp	r3, #0
   31cec:	beq	31cb4 <__assert_fail@plt+0x1f6f0>
   31cf0:	b	31c90 <__assert_fail@plt+0x1f6cc>
   31cf4:	cmp	r3, #2
   31cf8:	movne	r5, r4
   31cfc:	bne	319ac <__assert_fail@plt+0x1f3e8>
   31d00:	mov	r2, #1
   31d04:	mov	r1, r4
   31d08:	mov	r0, r8
   31d0c:	bl	2fe44 <__assert_fail@plt+0x1d880>
   31d10:	strh	r0, [r4, #56]	; 0x38
   31d14:	cmp	r0, #1
   31d18:	beq	31d2c <__assert_fail@plt+0x1f768>
   31d1c:	mov	r3, #3
   31d20:	strh	r3, [r4, #60]	; 0x3c
   31d24:	mov	r5, r4
   31d28:	b	319ac <__assert_fail@plt+0x1f3e8>
   31d2c:	ldr	r3, [r8, #48]	; 0x30
   31d30:	tst	r3, #4
   31d34:	bne	31d1c <__assert_fail@plt+0x1f758>
   31d38:	movw	r1, #29972	; 0x7514
   31d3c:	movt	r1, #4
   31d40:	mov	r0, r8
   31d44:	bl	301bc <__assert_fail@plt+0x1dbf8>
   31d48:	str	r0, [r4, #36]	; 0x24
   31d4c:	cmp	r0, #0
   31d50:	blt	31d64 <__assert_fail@plt+0x1f7a0>
   31d54:	ldrh	r3, [r4, #58]	; 0x3a
   31d58:	orr	r3, r3, #2
   31d5c:	strh	r3, [r4, #58]	; 0x3a
   31d60:	b	31d1c <__assert_fail@plt+0x1f758>
   31d64:	bl	12318 <__errno_location@plt>
   31d68:	ldr	r3, [r0]
   31d6c:	str	r3, [r4, #32]
   31d70:	mov	r3, #7
   31d74:	strh	r3, [r4, #56]	; 0x38
   31d78:	b	31d1c <__assert_fail@plt+0x1f758>
   31d7c:	ldrd	r2, [r5, #112]	; 0x70
   31d80:	cmp	r3, #0
   31d84:	cmpeq	r2, #2
   31d88:	beq	31d9c <__assert_fail@plt+0x1f7d8>
   31d8c:	cmp	r3, #0
   31d90:	cmpeq	r2, #1
   31d94:	beq	31e88 <__assert_fail@plt+0x1f8c4>
   31d98:	bl	12570 <abort@plt>
   31d9c:	mov	r2, #0
   31da0:	mov	r1, r5
   31da4:	mov	r0, r8
   31da8:	bl	2fe44 <__assert_fail@plt+0x1d880>
   31dac:	strh	r0, [r5, #56]	; 0x38
   31db0:	b	319fc <__assert_fail@plt+0x1f438>
   31db4:	mov	r0, r6
   31db8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   31dbc:	bl	12318 <__errno_location@plt>
   31dc0:	mov	r3, #0
   31dc4:	str	r3, [r0]
   31dc8:	str	r3, [r8]
   31dcc:	mov	r5, r4
   31dd0:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31dd4:	bl	12570 <abort@plt>
   31dd8:	mov	r0, r8
   31ddc:	bl	30564 <__assert_fail@plt+0x1dfa0>
   31de0:	cmp	r0, #0
   31de4:	beq	31bf4 <__assert_fail@plt+0x1f630>
   31de8:	bl	12318 <__errno_location@plt>
   31dec:	ldr	r3, [r0]
   31df0:	str	r3, [r6, #32]
   31df4:	ldr	r3, [r8, #48]	; 0x30
   31df8:	orr	r3, r3, #8192	; 0x2000
   31dfc:	str	r3, [r8, #48]	; 0x30
   31e00:	ldrh	r3, [r6, #56]	; 0x38
   31e04:	cmp	r3, #2
   31e08:	moveq	r5, r4
   31e0c:	bne	31c00 <__assert_fail@plt+0x1f63c>
   31e10:	b	31e88 <__assert_fail@plt+0x1f8c4>
   31e14:	ldr	r0, [r6, #36]	; 0x24
   31e18:	bl	124c8 <fchdir@plt>
   31e1c:	cmp	r0, #0
   31e20:	beq	31bec <__assert_fail@plt+0x1f628>
   31e24:	bl	12318 <__errno_location@plt>
   31e28:	ldr	r3, [r0]
   31e2c:	str	r3, [r6, #32]
   31e30:	ldr	r3, [r8, #48]	; 0x30
   31e34:	orr	r3, r3, #8192	; 0x2000
   31e38:	str	r3, [r8, #48]	; 0x30
   31e3c:	b	31bec <__assert_fail@plt+0x1f628>
   31e40:	tst	r3, #1
   31e44:	bne	31bf4 <__assert_fail@plt+0x1f630>
   31e48:	movw	r3, #41484	; 0xa20c
   31e4c:	movt	r3, #4
   31e50:	mvn	r2, #0
   31e54:	ldr	r1, [r6, #4]
   31e58:	mov	r0, r8
   31e5c:	bl	305c8 <__assert_fail@plt+0x1e004>
   31e60:	cmp	r0, #0
   31e64:	beq	31bf4 <__assert_fail@plt+0x1f630>
   31e68:	bl	12318 <__errno_location@plt>
   31e6c:	ldr	r3, [r0]
   31e70:	str	r3, [r6, #32]
   31e74:	ldr	r3, [r8, #48]	; 0x30
   31e78:	orr	r3, r3, #8192	; 0x2000
   31e7c:	str	r3, [r8, #48]	; 0x30
   31e80:	b	31e00 <__assert_fail@plt+0x1f83c>
   31e84:	mov	r5, #0
   31e88:	mov	r0, r5
   31e8c:	ldrd	r4, [sp]
   31e90:	ldrd	r6, [sp, #8]
   31e94:	ldr	r8, [sp, #16]
   31e98:	add	sp, sp, #20
   31e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   31ea0:	cmp	r2, #4
   31ea4:	bhi	31eb4 <__assert_fail@plt+0x1f8f0>
   31ea8:	strh	r2, [r1, #60]	; 0x3c
   31eac:	mov	r0, #0
   31eb0:	bx	lr
   31eb4:	str	r4, [sp, #-8]!
   31eb8:	str	lr, [sp, #4]
   31ebc:	bl	12318 <__errno_location@plt>
   31ec0:	mov	r3, #22
   31ec4:	str	r3, [r0]
   31ec8:	mov	r0, #1
   31ecc:	ldr	r4, [sp]
   31ed0:	add	sp, sp, #4
   31ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   31ed8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31edc:	strd	r6, [sp, #8]
   31ee0:	str	r8, [sp, #16]
   31ee4:	str	lr, [sp, #20]
   31ee8:	bics	r3, r1, #4096	; 0x1000
   31eec:	bne	31f9c <__assert_fail@plt+0x1f9d8>
   31ef0:	mov	r4, r0
   31ef4:	mov	r5, r1
   31ef8:	ldr	r6, [r0]
   31efc:	bl	12318 <__errno_location@plt>
   31f00:	mov	r7, r0
   31f04:	mov	r3, #0
   31f08:	str	r3, [r0]
   31f0c:	ldr	r3, [r4, #48]	; 0x30
   31f10:	tst	r3, #8192	; 0x2000
   31f14:	movne	r0, #0
   31f18:	bne	31f88 <__assert_fail@plt+0x1f9c4>
   31f1c:	ldrh	r3, [r6, #56]	; 0x38
   31f20:	cmp	r3, #9
   31f24:	beq	31fb0 <__assert_fail@plt+0x1f9ec>
   31f28:	cmp	r3, #1
   31f2c:	movne	r0, #0
   31f30:	bne	31f88 <__assert_fail@plt+0x1f9c4>
   31f34:	ldr	r0, [r4, #4]
   31f38:	cmp	r0, #0
   31f3c:	beq	31f44 <__assert_fail@plt+0x1f980>
   31f40:	bl	30208 <__assert_fail@plt+0x1dc44>
   31f44:	cmp	r5, #4096	; 0x1000
   31f48:	movne	r5, #1
   31f4c:	beq	31fb8 <__assert_fail@plt+0x1f9f4>
   31f50:	ldr	r3, [r6, #48]	; 0x30
   31f54:	cmp	r3, #0
   31f58:	bne	31f78 <__assert_fail@plt+0x1f9b4>
   31f5c:	ldr	r3, [r6, #24]
   31f60:	ldrb	r3, [r3]
   31f64:	cmp	r3, #47	; 0x2f
   31f68:	beq	31f78 <__assert_fail@plt+0x1f9b4>
   31f6c:	ldr	r3, [r4, #48]	; 0x30
   31f70:	tst	r3, #4
   31f74:	beq	31fcc <__assert_fail@plt+0x1fa08>
   31f78:	mov	r1, r5
   31f7c:	mov	r0, r4
   31f80:	bl	30898 <__assert_fail@plt+0x1e2d4>
   31f84:	str	r0, [r4, #4]
   31f88:	ldrd	r4, [sp]
   31f8c:	ldrd	r6, [sp, #8]
   31f90:	ldr	r8, [sp, #16]
   31f94:	add	sp, sp, #20
   31f98:	pop	{pc}		; (ldr pc, [sp], #4)
   31f9c:	bl	12318 <__errno_location@plt>
   31fa0:	mov	r3, #22
   31fa4:	str	r3, [r0]
   31fa8:	mov	r0, #0
   31fac:	b	31f88 <__assert_fail@plt+0x1f9c4>
   31fb0:	ldr	r0, [r6, #8]
   31fb4:	b	31f88 <__assert_fail@plt+0x1f9c4>
   31fb8:	ldr	r3, [r4, #48]	; 0x30
   31fbc:	orr	r3, r3, #4096	; 0x1000
   31fc0:	str	r3, [r4, #48]	; 0x30
   31fc4:	mov	r5, #2
   31fc8:	b	31f50 <__assert_fail@plt+0x1f98c>
   31fcc:	movw	r1, #29972	; 0x7514
   31fd0:	movt	r1, #4
   31fd4:	mov	r0, r4
   31fd8:	bl	301bc <__assert_fail@plt+0x1dbf8>
   31fdc:	subs	r6, r0, #0
   31fe0:	movlt	r0, #0
   31fe4:	strlt	r0, [r4, #4]
   31fe8:	blt	31f88 <__assert_fail@plt+0x1f9c4>
   31fec:	mov	r1, r5
   31ff0:	mov	r0, r4
   31ff4:	bl	30898 <__assert_fail@plt+0x1e2d4>
   31ff8:	str	r0, [r4, #4]
   31ffc:	ldr	r3, [r4, #48]	; 0x30
   32000:	tst	r3, #512	; 0x200
   32004:	beq	32020 <__assert_fail@plt+0x1fa5c>
   32008:	mov	r2, #1
   3200c:	mov	r1, r6
   32010:	mov	r0, r4
   32014:	bl	304cc <__assert_fail@plt+0x1df08>
   32018:	ldr	r0, [r4, #4]
   3201c:	b	31f88 <__assert_fail@plt+0x1f9c4>
   32020:	mov	r0, r6
   32024:	bl	124c8 <fchdir@plt>
   32028:	cmp	r0, #0
   3202c:	bne	3203c <__assert_fail@plt+0x1fa78>
   32030:	mov	r0, r6
   32034:	bl	1257c <close@plt>
   32038:	b	32018 <__assert_fail@plt+0x1fa54>
   3203c:	ldr	r4, [r7]
   32040:	mov	r0, r6
   32044:	bl	1257c <close@plt>
   32048:	str	r4, [r7]
   3204c:	mov	r0, #0
   32050:	b	31f88 <__assert_fail@plt+0x1f9c4>
   32054:	strd	r4, [sp, #-16]!
   32058:	str	r6, [sp, #8]
   3205c:	str	lr, [sp, #12]
   32060:	subs	r4, r0, #0
   32064:	beq	32088 <__assert_fail@plt+0x1fac4>
   32068:	mov	r5, r1
   3206c:	cmp	r4, #10
   32070:	beq	3209c <__assert_fail@plt+0x1fad8>
   32074:	mov	r0, r4
   32078:	ldrd	r4, [sp]
   3207c:	ldr	r6, [sp, #8]
   32080:	add	sp, sp, #12
   32084:	pop	{pc}		; (ldr pc, [sp], #4)
   32088:	bl	12318 <__errno_location@plt>
   3208c:	mov	r3, #95	; 0x5f
   32090:	str	r3, [r0]
   32094:	mvn	r4, #0
   32098:	b	32074 <__assert_fail@plt+0x1fab0>
   3209c:	ldr	r6, [r1]
   320a0:	movw	r1, #41488	; 0xa210
   320a4:	movt	r1, #4
   320a8:	mov	r0, r6
   320ac:	bl	11f1c <strcmp@plt>
   320b0:	cmp	r0, #0
   320b4:	bne	32074 <__assert_fail@plt+0x1fab0>
   320b8:	mov	r0, r6
   320bc:	bl	124ec <freecon@plt>
   320c0:	mov	r3, #0
   320c4:	str	r3, [r5]
   320c8:	bl	12318 <__errno_location@plt>
   320cc:	mov	r3, #61	; 0x3d
   320d0:	str	r3, [r0]
   320d4:	mvn	r4, #0
   320d8:	b	32074 <__assert_fail@plt+0x1fab0>
   320dc:	str	r4, [sp, #-8]!
   320e0:	str	lr, [sp, #4]
   320e4:	mov	r4, r1
   320e8:	bl	122b8 <getfilecon@plt>
   320ec:	mov	r1, r4
   320f0:	bl	32054 <__assert_fail@plt+0x1fa90>
   320f4:	ldr	r4, [sp]
   320f8:	add	sp, sp, #4
   320fc:	pop	{pc}		; (ldr pc, [sp], #4)
   32100:	str	r4, [sp, #-8]!
   32104:	str	lr, [sp, #4]
   32108:	mov	r4, r1
   3210c:	bl	12204 <lgetfilecon@plt>
   32110:	mov	r1, r4
   32114:	bl	32054 <__assert_fail@plt+0x1fa90>
   32118:	ldr	r4, [sp]
   3211c:	add	sp, sp, #4
   32120:	pop	{pc}		; (ldr pc, [sp], #4)
   32124:	str	r4, [sp, #-8]!
   32128:	str	lr, [sp, #4]
   3212c:	mov	r4, r1
   32130:	bl	120c0 <fgetfilecon@plt>
   32134:	mov	r1, r4
   32138:	bl	32054 <__assert_fail@plt+0x1fa90>
   3213c:	ldr	r4, [sp]
   32140:	add	sp, sp, #4
   32144:	pop	{pc}		; (ldr pc, [sp], #4)
   32148:	str	r4, [sp, #-8]!
   3214c:	str	lr, [sp, #4]
   32150:	cmp	r0, #0
   32154:	beq	32170 <__assert_fail@plt+0x1fbac>
   32158:	bge	32174 <__assert_fail@plt+0x1fbb0>
   3215c:	bl	12318 <__errno_location@plt>
   32160:	mov	r3, #12
   32164:	str	r3, [r0]
   32168:	mov	r0, #0
   3216c:	b	32178 <__assert_fail@plt+0x1fbb4>
   32170:	mov	r0, #1
   32174:	bl	12210 <malloc@plt>
   32178:	ldr	r4, [sp]
   3217c:	add	sp, sp, #4
   32180:	pop	{pc}		; (ldr pc, [sp], #4)
   32184:	strd	r4, [sp, #-20]!	; 0xffffffec
   32188:	strd	r6, [sp, #8]
   3218c:	str	lr, [sp, #16]
   32190:	sub	sp, sp, #12
   32194:	mov	r7, r1
   32198:	mov	r5, r2
   3219c:	subs	r6, r0, #0
   321a0:	addeq	r6, sp, #4
   321a4:	mov	r0, r6
   321a8:	bl	121a4 <mbrtowc@plt>
   321ac:	mov	r4, r0
   321b0:	cmp	r5, #0
   321b4:	cmnne	r0, #3
   321b8:	bhi	321d4 <__assert_fail@plt+0x1fc10>
   321bc:	mov	r0, r4
   321c0:	add	sp, sp, #12
   321c4:	ldrd	r4, [sp]
   321c8:	ldrd	r6, [sp, #8]
   321cc:	add	sp, sp, #16
   321d0:	pop	{pc}		; (ldr pc, [sp], #4)
   321d4:	mov	r0, #0
   321d8:	bl	41eb0 <__assert_fail@plt+0x2f8ec>
   321dc:	cmp	r0, #0
   321e0:	bne	321bc <__assert_fail@plt+0x1fbf8>
   321e4:	ldrb	r3, [r7]
   321e8:	str	r3, [r6]
   321ec:	mov	r4, #1
   321f0:	b	321bc <__assert_fail@plt+0x1fbf8>
   321f4:	str	r4, [sp, #-8]!
   321f8:	str	lr, [sp, #4]
   321fc:	mov	r1, #32
   32200:	bl	122dc <strchr@plt>
   32204:	cmp	r0, #0
   32208:	movne	r3, #0
   3220c:	strbne	r3, [r0]
   32210:	ldr	r4, [sp]
   32214:	add	sp, sp, #4
   32218:	pop	{pc}		; (ldr pc, [sp], #4)
   3221c:	strd	r4, [sp, #-16]!
   32220:	str	r6, [sp, #8]
   32224:	str	lr, [sp, #12]
   32228:	mov	r4, r0
   3222c:	bl	122d0 <strlen@plt>
   32230:	add	r0, r0, #1
   32234:	mov	r2, r4
   32238:	mov	r3, #0
   3223c:	b	32254 <__assert_fail@plt+0x1fc90>
   32240:	strb	r1, [r2]
   32244:	add	r3, r3, #1
   32248:	add	r2, r2, #1
   3224c:	cmp	r0, r3
   32250:	bls	322cc <__assert_fail@plt+0x1fd08>
   32254:	ldrb	r1, [r4, r3]
   32258:	cmp	r1, #92	; 0x5c
   3225c:	bne	32240 <__assert_fail@plt+0x1fc7c>
   32260:	add	ip, r3, #4
   32264:	cmp	ip, r0
   32268:	bcs	32240 <__assert_fail@plt+0x1fc7c>
   3226c:	add	ip, r4, r3
   32270:	ldrb	lr, [ip, #1]
   32274:	sub	ip, lr, #48	; 0x30
   32278:	uxtb	ip, ip
   3227c:	cmp	ip, #3
   32280:	bhi	32240 <__assert_fail@plt+0x1fc7c>
   32284:	add	ip, r4, r3
   32288:	ldrb	r5, [ip, #2]
   3228c:	sub	ip, r5, #48	; 0x30
   32290:	uxtb	ip, ip
   32294:	cmp	ip, #7
   32298:	bhi	32240 <__assert_fail@plt+0x1fc7c>
   3229c:	add	r6, r3, #3
   322a0:	ldrb	ip, [r4, r6]
   322a4:	sub	ip, ip, #48	; 0x30
   322a8:	uxtb	ip, ip
   322ac:	cmp	ip, #7
   322b0:	bhi	32240 <__assert_fail@plt+0x1fc7c>
   322b4:	add	r3, r5, lr, lsl #3
   322b8:	sub	r3, r3, #432	; 0x1b0
   322bc:	add	r3, ip, r3, lsl #3
   322c0:	strb	r3, [r2]
   322c4:	mov	r3, r6
   322c8:	b	32244 <__assert_fail@plt+0x1fc80>
   322cc:	ldrd	r4, [sp]
   322d0:	ldr	r6, [sp, #8]
   322d4:	add	sp, sp, #12
   322d8:	pop	{pc}		; (ldr pc, [sp], #4)
   322dc:	str	r4, [sp, #-8]!
   322e0:	str	lr, [sp, #4]
   322e4:	mov	r4, r0
   322e8:	ldr	r0, [r0]
   322ec:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   322f0:	ldr	r0, [r4, #4]
   322f4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   322f8:	ldr	r0, [r4, #8]
   322fc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   32300:	ldrb	r3, [r4, #24]
   32304:	tst	r3, #4
   32308:	bne	32320 <__assert_fail@plt+0x1fd5c>
   3230c:	mov	r0, r4
   32310:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   32314:	ldr	r4, [sp]
   32318:	add	sp, sp, #4
   3231c:	pop	{pc}		; (ldr pc, [sp], #4)
   32320:	ldr	r0, [r4, #12]
   32324:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   32328:	b	3230c <__assert_fail@plt+0x1fd48>
   3232c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32330:	strd	r6, [sp, #8]
   32334:	strd	r8, [sp, #16]
   32338:	strd	sl, [sp, #24]
   3233c:	str	lr, [sp, #32]
   32340:	sub	sp, sp, #44	; 0x2c
   32344:	movw	r1, #28160	; 0x6e00
   32348:	movt	r1, #4
   3234c:	movw	r0, #41500	; 0xa21c
   32350:	movt	r0, #4
   32354:	bl	124d4 <fopen64@plt>
   32358:	subs	r5, r0, #0
   3235c:	beq	328d8 <__assert_fail@plt+0x20314>
   32360:	mov	r3, #0
   32364:	str	r3, [sp, #16]
   32368:	str	r3, [sp, #20]
   3236c:	add	r9, sp, #36	; 0x24
   32370:	movw	r7, #41524	; 0xa234
   32374:	movt	r7, #4
   32378:	movw	sl, #41544	; 0xa248
   3237c:	movt	sl, #4
   32380:	mov	fp, #65280	; 0xff00
   32384:	movt	fp, #15
   32388:	mov	r3, r5
   3238c:	mov	r2, #10
   32390:	add	r1, sp, #20
   32394:	add	r0, sp, #16
   32398:	bl	11eec <__getdelim@plt>
   3239c:	cmn	r0, #1
   323a0:	beq	3282c <__assert_fail@plt+0x20268>
   323a4:	add	r3, sp, #32
   323a8:	str	r3, [sp]
   323ac:	add	r3, sp, #28
   323b0:	add	r2, sp, #24
   323b4:	mov	r1, r7
   323b8:	ldr	r0, [sp, #16]
   323bc:	bl	12468 <sscanf@plt>
   323c0:	sub	r0, r0, #2
   323c4:	cmp	r0, #1
   323c8:	bhi	32388 <__assert_fail@plt+0x1fdc4>
   323cc:	ldr	r4, [sp, #16]
   323d0:	ldr	r3, [sp, #32]
   323d4:	add	r4, r4, r3
   323d8:	mov	r0, r4
   323dc:	bl	321f4 <__assert_fail@plt+0x1fc30>
   323e0:	cmp	r0, #0
   323e4:	beq	32388 <__assert_fail@plt+0x1fdc4>
   323e8:	add	r6, r0, #1
   323ec:	mov	r0, r6
   323f0:	bl	321f4 <__assert_fail@plt+0x1fc30>
   323f4:	cmp	r0, #0
   323f8:	beq	32388 <__assert_fail@plt+0x1fdc4>
   323fc:	mov	r1, sl
   32400:	add	r0, r0, #1
   32404:	bl	40ce0 <__assert_fail@plt+0x2e71c>
   32408:	cmp	r0, #0
   3240c:	beq	32388 <__assert_fail@plt+0x1fdc4>
   32410:	add	r8, r0, #3
   32414:	mov	r0, r8
   32418:	bl	321f4 <__assert_fail@plt+0x1fc30>
   3241c:	cmp	r0, #0
   32420:	beq	32388 <__assert_fail@plt+0x1fdc4>
   32424:	add	r3, r0, #1
   32428:	str	r3, [sp, #8]
   3242c:	mov	r0, r3
   32430:	bl	321f4 <__assert_fail@plt+0x1fc30>
   32434:	cmp	r0, #0
   32438:	beq	32388 <__assert_fail@plt+0x1fdc4>
   3243c:	ldr	r0, [sp, #8]
   32440:	bl	3221c <__assert_fail@plt+0x1fc58>
   32444:	mov	r0, r6
   32448:	bl	3221c <__assert_fail@plt+0x1fc58>
   3244c:	mov	r0, r4
   32450:	bl	3221c <__assert_fail@plt+0x1fc58>
   32454:	str	r8, [sp, #12]
   32458:	mov	r0, r8
   3245c:	bl	3221c <__assert_fail@plt+0x1fc58>
   32460:	mov	r0, #32
   32464:	bl	2e348 <__assert_fail@plt+0x1bd84>
   32468:	mov	r8, r0
   3246c:	ldr	r0, [sp, #8]
   32470:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   32474:	str	r0, [r8]
   32478:	mov	r0, r6
   3247c:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   32480:	str	r0, [r8, #4]
   32484:	mov	r0, r4
   32488:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   3248c:	str	r0, [r8, #8]
   32490:	ldr	r0, [sp, #12]
   32494:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   32498:	mov	r4, r0
   3249c:	str	r0, [r8, #12]
   324a0:	ldrb	r3, [r8, #24]
   324a4:	orr	r3, r3, #4
   324a8:	strb	r3, [r8, #24]
   324ac:	ldr	r1, [sp, #28]
   324b0:	ldr	r3, [sp, #24]
   324b4:	and	ip, fp, r3, lsl #8
   324b8:	bic	r3, r3, #4080	; 0xff0
   324bc:	bic	r3, r3, #15
   324c0:	uxtb	r2, r1
   324c4:	orr	ip, r2, ip
   324c8:	mov	r2, #0
   324cc:	movt	r2, #65520	; 0xfff0
   324d0:	and	r2, r2, r1, lsl #12
   324d4:	orr	r2, r2, ip
   324d8:	orr	r3, r3, r1, lsr #20
   324dc:	str	r2, [r8, #16]
   324e0:	str	r3, [r8, #20]
   324e4:	movw	r1, #41548	; 0xa24c
   324e8:	movt	r1, #4
   324ec:	bl	11f1c <strcmp@plt>
   324f0:	cmp	r0, #0
   324f4:	moveq	r0, #1
   324f8:	beq	32664 <__assert_fail@plt+0x200a0>
   324fc:	movw	r1, #41556	; 0xa254
   32500:	movt	r1, #4
   32504:	mov	r0, r4
   32508:	bl	11f1c <strcmp@plt>
   3250c:	cmp	r0, #0
   32510:	moveq	r0, #1
   32514:	beq	32664 <__assert_fail@plt+0x200a0>
   32518:	movw	r1, #41564	; 0xa25c
   3251c:	movt	r1, #4
   32520:	mov	r0, r4
   32524:	bl	11f1c <strcmp@plt>
   32528:	cmp	r0, #0
   3252c:	moveq	r0, #1
   32530:	beq	32664 <__assert_fail@plt+0x200a0>
   32534:	movw	r1, #41572	; 0xa264
   32538:	movt	r1, #4
   3253c:	mov	r0, r4
   32540:	bl	11f1c <strcmp@plt>
   32544:	cmp	r0, #0
   32548:	moveq	r0, #1
   3254c:	beq	32664 <__assert_fail@plt+0x200a0>
   32550:	movw	r1, #41580	; 0xa26c
   32554:	movt	r1, #4
   32558:	mov	r0, r4
   3255c:	bl	11f1c <strcmp@plt>
   32560:	cmp	r0, #0
   32564:	moveq	r0, #1
   32568:	beq	32664 <__assert_fail@plt+0x200a0>
   3256c:	movw	r1, #41588	; 0xa274
   32570:	movt	r1, #4
   32574:	mov	r0, r4
   32578:	bl	11f1c <strcmp@plt>
   3257c:	cmp	r0, #0
   32580:	moveq	r0, #1
   32584:	beq	32664 <__assert_fail@plt+0x200a0>
   32588:	movw	r1, #41596	; 0xa27c
   3258c:	movt	r1, #4
   32590:	mov	r0, r4
   32594:	bl	11f1c <strcmp@plt>
   32598:	cmp	r0, #0
   3259c:	moveq	r0, #1
   325a0:	beq	32664 <__assert_fail@plt+0x200a0>
   325a4:	movw	r1, #41608	; 0xa288
   325a8:	movt	r1, #4
   325ac:	mov	r0, r4
   325b0:	bl	11f1c <strcmp@plt>
   325b4:	cmp	r0, #0
   325b8:	moveq	r0, #1
   325bc:	beq	32664 <__assert_fail@plt+0x200a0>
   325c0:	movw	r1, #41616	; 0xa290
   325c4:	movt	r1, #4
   325c8:	mov	r0, r4
   325cc:	bl	11f1c <strcmp@plt>
   325d0:	cmp	r0, #0
   325d4:	moveq	r0, #1
   325d8:	beq	32664 <__assert_fail@plt+0x200a0>
   325dc:	movw	r1, #41628	; 0xa29c
   325e0:	movt	r1, #4
   325e4:	mov	r0, r4
   325e8:	bl	11f1c <strcmp@plt>
   325ec:	cmp	r0, #0
   325f0:	moveq	r0, #1
   325f4:	beq	32664 <__assert_fail@plt+0x200a0>
   325f8:	movw	r1, #41636	; 0xa2a4
   325fc:	movt	r1, #4
   32600:	mov	r0, r4
   32604:	bl	11f1c <strcmp@plt>
   32608:	cmp	r0, #0
   3260c:	moveq	r0, #1
   32610:	beq	32664 <__assert_fail@plt+0x200a0>
   32614:	movw	r1, #41644	; 0xa2ac
   32618:	movt	r1, #4
   3261c:	mov	r0, r4
   32620:	bl	11f1c <strcmp@plt>
   32624:	cmp	r0, #0
   32628:	moveq	r0, #1
   3262c:	beq	32664 <__assert_fail@plt+0x200a0>
   32630:	movw	r1, #28156	; 0x6dfc
   32634:	movt	r1, #4
   32638:	mov	r0, r4
   3263c:	bl	11f1c <strcmp@plt>
   32640:	cmp	r0, #0
   32644:	moveq	r0, #1
   32648:	beq	32664 <__assert_fail@plt+0x200a0>
   3264c:	movw	r1, #41652	; 0xa2b4
   32650:	movt	r1, #4
   32654:	mov	r0, r4
   32658:	bl	11f1c <strcmp@plt>
   3265c:	clz	r0, r0
   32660:	lsr	r0, r0, #5
   32664:	ldrb	r3, [r8, #24]
   32668:	bfi	r3, r0, #0, #1
   3266c:	strb	r3, [r8, #24]
   32670:	ldr	r6, [r8]
   32674:	mov	r1, #58	; 0x3a
   32678:	mov	r0, r6
   3267c:	bl	122dc <strchr@plt>
   32680:	cmp	r0, #0
   32684:	movne	r0, #1
   32688:	beq	326a4 <__assert_fail@plt+0x200e0>
   3268c:	ldrb	r3, [r8, #24]
   32690:	bfi	r3, r0, #1, #1
   32694:	strb	r3, [r8, #24]
   32698:	str	r8, [r9]
   3269c:	add	r9, r8, #28
   326a0:	b	32388 <__assert_fail@plt+0x1fdc4>
   326a4:	ldrb	r3, [r6]
   326a8:	cmp	r3, #47	; 0x2f
   326ac:	beq	327c8 <__assert_fail@plt+0x20204>
   326b0:	movw	r1, #41684	; 0xa2d4
   326b4:	movt	r1, #4
   326b8:	mov	r0, r4
   326bc:	bl	11f1c <strcmp@plt>
   326c0:	cmp	r0, #0
   326c4:	moveq	r0, #1
   326c8:	beq	3268c <__assert_fail@plt+0x200c8>
   326cc:	movw	r1, #28164	; 0x6e04
   326d0:	movt	r1, #4
   326d4:	mov	r0, r4
   326d8:	bl	11f1c <strcmp@plt>
   326dc:	cmp	r0, #0
   326e0:	moveq	r0, #1
   326e4:	beq	3268c <__assert_fail@plt+0x200c8>
   326e8:	movw	r1, #41692	; 0xa2dc
   326ec:	movt	r1, #4
   326f0:	mov	r0, r4
   326f4:	bl	11f1c <strcmp@plt>
   326f8:	cmp	r0, #0
   326fc:	moveq	r0, #1
   32700:	beq	3268c <__assert_fail@plt+0x200c8>
   32704:	movw	r1, #41700	; 0xa2e4
   32708:	movt	r1, #4
   3270c:	mov	r0, r4
   32710:	bl	11f1c <strcmp@plt>
   32714:	cmp	r0, #0
   32718:	moveq	r0, #1
   3271c:	beq	3268c <__assert_fail@plt+0x200c8>
   32720:	movw	r1, #41712	; 0xa2f0
   32724:	movt	r1, #4
   32728:	mov	r0, r4
   3272c:	bl	11f1c <strcmp@plt>
   32730:	cmp	r0, #0
   32734:	moveq	r0, #1
   32738:	beq	3268c <__assert_fail@plt+0x200c8>
   3273c:	movw	r1, #41720	; 0xa2f8
   32740:	movt	r1, #4
   32744:	mov	r0, r4
   32748:	bl	11f1c <strcmp@plt>
   3274c:	cmp	r0, #0
   32750:	moveq	r0, #1
   32754:	beq	3268c <__assert_fail@plt+0x200c8>
   32758:	movw	r1, #41728	; 0xa300
   3275c:	movt	r1, #4
   32760:	mov	r0, r4
   32764:	bl	11f1c <strcmp@plt>
   32768:	cmp	r0, #0
   3276c:	moveq	r0, #1
   32770:	beq	3268c <__assert_fail@plt+0x200c8>
   32774:	movw	r1, #41736	; 0xa308
   32778:	movt	r1, #4
   3277c:	mov	r0, r4
   32780:	bl	11f1c <strcmp@plt>
   32784:	cmp	r0, #0
   32788:	moveq	r0, #1
   3278c:	beq	3268c <__assert_fail@plt+0x200c8>
   32790:	movw	r1, #41744	; 0xa310
   32794:	movt	r1, #4
   32798:	mov	r0, r4
   3279c:	bl	11f1c <strcmp@plt>
   327a0:	cmp	r0, #0
   327a4:	moveq	r0, #1
   327a8:	beq	3268c <__assert_fail@plt+0x200c8>
   327ac:	mov	r1, r6
   327b0:	movw	r0, #41752	; 0xa318
   327b4:	movt	r0, #4
   327b8:	bl	11f1c <strcmp@plt>
   327bc:	clz	r0, r0
   327c0:	lsr	r0, r0, #5
   327c4:	b	3268c <__assert_fail@plt+0x200c8>
   327c8:	ldrb	r3, [r6, #1]
   327cc:	cmp	r3, #47	; 0x2f
   327d0:	bne	326b0 <__assert_fail@plt+0x200ec>
   327d4:	movw	r1, #41660	; 0xa2bc
   327d8:	movt	r1, #4
   327dc:	mov	r0, r4
   327e0:	bl	11f1c <strcmp@plt>
   327e4:	cmp	r0, #0
   327e8:	moveq	r0, #1
   327ec:	beq	3268c <__assert_fail@plt+0x200c8>
   327f0:	movw	r1, #41668	; 0xa2c4
   327f4:	movt	r1, #4
   327f8:	mov	r0, r4
   327fc:	bl	11f1c <strcmp@plt>
   32800:	cmp	r0, #0
   32804:	moveq	r0, #1
   32808:	beq	3268c <__assert_fail@plt+0x200c8>
   3280c:	movw	r1, #41676	; 0xa2cc
   32810:	movt	r1, #4
   32814:	mov	r0, r4
   32818:	bl	11f1c <strcmp@plt>
   3281c:	cmp	r0, #0
   32820:	moveq	r0, #1
   32824:	beq	3268c <__assert_fail@plt+0x200c8>
   32828:	b	326b0 <__assert_fail@plt+0x200ec>
   3282c:	ldr	r0, [sp, #16]
   32830:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   32834:	ldr	r3, [r5]
   32838:	tst	r3, #32
   3283c:	bne	3287c <__assert_fail@plt+0x202b8>
   32840:	mov	r0, r5
   32844:	bl	123cc <fclose@plt>
   32848:	cmn	r0, #1
   3284c:	beq	32894 <__assert_fail@plt+0x202d0>
   32850:	mov	r3, #0
   32854:	str	r3, [r9]
   32858:	ldr	r6, [sp, #36]	; 0x24
   3285c:	mov	r0, r6
   32860:	add	sp, sp, #44	; 0x2c
   32864:	ldrd	r4, [sp]
   32868:	ldrd	r6, [sp, #8]
   3286c:	ldrd	r8, [sp, #16]
   32870:	ldrd	sl, [sp, #24]
   32874:	add	sp, sp, #32
   32878:	pop	{pc}		; (ldr pc, [sp], #4)
   3287c:	bl	12318 <__errno_location@plt>
   32880:	mov	r4, r0
   32884:	ldr	r6, [r0]
   32888:	mov	r0, r5
   3288c:	bl	123cc <fclose@plt>
   32890:	str	r6, [r4]
   32894:	bl	12318 <__errno_location@plt>
   32898:	mov	r5, r0
   3289c:	ldr	r6, [r0]
   328a0:	mov	r3, #0
   328a4:	str	r3, [r9]
   328a8:	ldr	r0, [sp, #36]	; 0x24
   328ac:	cmp	r0, r3
   328b0:	beq	328cc <__assert_fail@plt+0x20308>
   328b4:	ldr	r4, [r0, #28]
   328b8:	bl	322dc <__assert_fail@plt+0x1fd18>
   328bc:	str	r4, [sp, #36]	; 0x24
   328c0:	mov	r0, r4
   328c4:	cmp	r4, #0
   328c8:	bne	328b4 <__assert_fail@plt+0x202f0>
   328cc:	str	r6, [r5]
   328d0:	mov	r6, #0
   328d4:	b	3285c <__assert_fail@plt+0x20298>
   328d8:	movw	r1, #42276	; 0xa524
   328dc:	movt	r1, #4
   328e0:	movw	r0, #41760	; 0xa320
   328e4:	movt	r0, #4
   328e8:	bl	12504 <setmntent@plt>
   328ec:	subs	r6, r0, #0
   328f0:	beq	3285c <__assert_fail@plt+0x20298>
   328f4:	add	r9, sp, #36	; 0x24
   328f8:	movw	r8, #41772	; 0xa32c
   328fc:	movt	r8, #4
   32900:	movw	r7, #41548	; 0xa24c
   32904:	movt	r7, #4
   32908:	movw	fp, #41556	; 0xa254
   3290c:	movt	fp, #4
   32910:	b	3295c <__assert_fail@plt+0x20398>
   32914:	ldrb	r3, [r4, #24]
   32918:	bfi	r3, r2, #0, #1
   3291c:	strb	r3, [r4, #24]
   32920:	ldr	sl, [r4]
   32924:	mov	r1, #58	; 0x3a
   32928:	mov	r0, sl
   3292c:	bl	122dc <strchr@plt>
   32930:	cmp	r0, #0
   32934:	movne	r0, #1
   32938:	beq	32b44 <__assert_fail@plt+0x20580>
   3293c:	ldrb	r3, [r4, #24]
   32940:	bfi	r3, r0, #1, #1
   32944:	strb	r3, [r4, #24]
   32948:	mvn	r2, #0
   3294c:	mvn	r3, #0
   32950:	strd	r2, [r4, #16]
   32954:	str	r4, [r9]
   32958:	add	r9, r4, #28
   3295c:	mov	r0, r6
   32960:	bl	121c8 <getmntent@plt>
   32964:	subs	r5, r0, #0
   32968:	beq	32ccc <__assert_fail@plt+0x20708>
   3296c:	mov	r1, r8
   32970:	mov	r0, r5
   32974:	bl	12174 <hasmntopt@plt>
   32978:	mov	sl, r0
   3297c:	mov	r0, #32
   32980:	bl	2e348 <__assert_fail@plt+0x1bd84>
   32984:	mov	r4, r0
   32988:	ldr	r0, [r5]
   3298c:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   32990:	str	r0, [r4]
   32994:	ldr	r0, [r5, #4]
   32998:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   3299c:	str	r0, [r4, #4]
   329a0:	mov	r3, #0
   329a4:	str	r3, [r4, #8]
   329a8:	ldr	r0, [r5, #8]
   329ac:	bl	2e7b4 <__assert_fail@plt+0x1c1f0>
   329b0:	mov	r5, r0
   329b4:	str	r0, [r4, #12]
   329b8:	ldrb	r3, [r4, #24]
   329bc:	orr	r3, r3, #4
   329c0:	strb	r3, [r4, #24]
   329c4:	mov	r1, r7
   329c8:	bl	11f1c <strcmp@plt>
   329cc:	cmp	r0, #0
   329d0:	moveq	r2, #1
   329d4:	beq	32914 <__assert_fail@plt+0x20350>
   329d8:	mov	r1, fp
   329dc:	mov	r0, r5
   329e0:	bl	11f1c <strcmp@plt>
   329e4:	cmp	r0, #0
   329e8:	moveq	r2, #1
   329ec:	beq	32914 <__assert_fail@plt+0x20350>
   329f0:	movw	r1, #41564	; 0xa25c
   329f4:	movt	r1, #4
   329f8:	mov	r0, r5
   329fc:	bl	11f1c <strcmp@plt>
   32a00:	cmp	r0, #0
   32a04:	moveq	r2, #1
   32a08:	beq	32914 <__assert_fail@plt+0x20350>
   32a0c:	movw	r1, #41572	; 0xa264
   32a10:	movt	r1, #4
   32a14:	mov	r0, r5
   32a18:	bl	11f1c <strcmp@plt>
   32a1c:	cmp	r0, #0
   32a20:	moveq	r2, #1
   32a24:	beq	32914 <__assert_fail@plt+0x20350>
   32a28:	movw	r1, #41580	; 0xa26c
   32a2c:	movt	r1, #4
   32a30:	mov	r0, r5
   32a34:	bl	11f1c <strcmp@plt>
   32a38:	cmp	r0, #0
   32a3c:	moveq	r2, #1
   32a40:	beq	32914 <__assert_fail@plt+0x20350>
   32a44:	movw	r1, #41588	; 0xa274
   32a48:	movt	r1, #4
   32a4c:	mov	r0, r5
   32a50:	bl	11f1c <strcmp@plt>
   32a54:	cmp	r0, #0
   32a58:	moveq	r2, #1
   32a5c:	beq	32914 <__assert_fail@plt+0x20350>
   32a60:	movw	r1, #41596	; 0xa27c
   32a64:	movt	r1, #4
   32a68:	mov	r0, r5
   32a6c:	bl	11f1c <strcmp@plt>
   32a70:	cmp	r0, #0
   32a74:	moveq	r2, #1
   32a78:	beq	32914 <__assert_fail@plt+0x20350>
   32a7c:	movw	r1, #41608	; 0xa288
   32a80:	movt	r1, #4
   32a84:	mov	r0, r5
   32a88:	bl	11f1c <strcmp@plt>
   32a8c:	cmp	r0, #0
   32a90:	moveq	r2, #1
   32a94:	beq	32914 <__assert_fail@plt+0x20350>
   32a98:	movw	r1, #41616	; 0xa290
   32a9c:	movt	r1, #4
   32aa0:	mov	r0, r5
   32aa4:	bl	11f1c <strcmp@plt>
   32aa8:	cmp	r0, #0
   32aac:	moveq	r2, #1
   32ab0:	beq	32914 <__assert_fail@plt+0x20350>
   32ab4:	movw	r1, #41628	; 0xa29c
   32ab8:	movt	r1, #4
   32abc:	mov	r0, r5
   32ac0:	bl	11f1c <strcmp@plt>
   32ac4:	cmp	r0, #0
   32ac8:	moveq	r2, #1
   32acc:	beq	32914 <__assert_fail@plt+0x20350>
   32ad0:	movw	r1, #41636	; 0xa2a4
   32ad4:	movt	r1, #4
   32ad8:	mov	r0, r5
   32adc:	bl	11f1c <strcmp@plt>
   32ae0:	cmp	r0, #0
   32ae4:	moveq	r2, #1
   32ae8:	beq	32914 <__assert_fail@plt+0x20350>
   32aec:	movw	r1, #41644	; 0xa2ac
   32af0:	movt	r1, #4
   32af4:	mov	r0, r5
   32af8:	bl	11f1c <strcmp@plt>
   32afc:	cmp	r0, #0
   32b00:	moveq	r2, #1
   32b04:	beq	32914 <__assert_fail@plt+0x20350>
   32b08:	movw	r1, #28156	; 0x6dfc
   32b0c:	movt	r1, #4
   32b10:	mov	r0, r5
   32b14:	bl	11f1c <strcmp@plt>
   32b18:	cmp	r0, #0
   32b1c:	moveq	r2, #1
   32b20:	beq	32914 <__assert_fail@plt+0x20350>
   32b24:	movw	r1, #41652	; 0xa2b4
   32b28:	movt	r1, #4
   32b2c:	mov	r0, r5
   32b30:	bl	11f1c <strcmp@plt>
   32b34:	orrs	r3, sl, r0
   32b38:	moveq	r2, #1
   32b3c:	movne	r2, #0
   32b40:	b	32914 <__assert_fail@plt+0x20350>
   32b44:	ldrb	r3, [sl]
   32b48:	cmp	r3, #47	; 0x2f
   32b4c:	beq	32c68 <__assert_fail@plt+0x206a4>
   32b50:	movw	r1, #41684	; 0xa2d4
   32b54:	movt	r1, #4
   32b58:	mov	r0, r5
   32b5c:	bl	11f1c <strcmp@plt>
   32b60:	cmp	r0, #0
   32b64:	moveq	r0, #1
   32b68:	beq	3293c <__assert_fail@plt+0x20378>
   32b6c:	movw	r1, #28164	; 0x6e04
   32b70:	movt	r1, #4
   32b74:	mov	r0, r5
   32b78:	bl	11f1c <strcmp@plt>
   32b7c:	cmp	r0, #0
   32b80:	moveq	r0, #1
   32b84:	beq	3293c <__assert_fail@plt+0x20378>
   32b88:	movw	r1, #41692	; 0xa2dc
   32b8c:	movt	r1, #4
   32b90:	mov	r0, r5
   32b94:	bl	11f1c <strcmp@plt>
   32b98:	cmp	r0, #0
   32b9c:	moveq	r0, #1
   32ba0:	beq	3293c <__assert_fail@plt+0x20378>
   32ba4:	movw	r1, #41700	; 0xa2e4
   32ba8:	movt	r1, #4
   32bac:	mov	r0, r5
   32bb0:	bl	11f1c <strcmp@plt>
   32bb4:	cmp	r0, #0
   32bb8:	moveq	r0, #1
   32bbc:	beq	3293c <__assert_fail@plt+0x20378>
   32bc0:	movw	r1, #41712	; 0xa2f0
   32bc4:	movt	r1, #4
   32bc8:	mov	r0, r5
   32bcc:	bl	11f1c <strcmp@plt>
   32bd0:	cmp	r0, #0
   32bd4:	moveq	r0, #1
   32bd8:	beq	3293c <__assert_fail@plt+0x20378>
   32bdc:	movw	r1, #41720	; 0xa2f8
   32be0:	movt	r1, #4
   32be4:	mov	r0, r5
   32be8:	bl	11f1c <strcmp@plt>
   32bec:	cmp	r0, #0
   32bf0:	moveq	r0, #1
   32bf4:	beq	3293c <__assert_fail@plt+0x20378>
   32bf8:	movw	r1, #41728	; 0xa300
   32bfc:	movt	r1, #4
   32c00:	mov	r0, r5
   32c04:	bl	11f1c <strcmp@plt>
   32c08:	cmp	r0, #0
   32c0c:	moveq	r0, #1
   32c10:	beq	3293c <__assert_fail@plt+0x20378>
   32c14:	movw	r1, #41736	; 0xa308
   32c18:	movt	r1, #4
   32c1c:	mov	r0, r5
   32c20:	bl	11f1c <strcmp@plt>
   32c24:	cmp	r0, #0
   32c28:	moveq	r0, #1
   32c2c:	beq	3293c <__assert_fail@plt+0x20378>
   32c30:	movw	r1, #41744	; 0xa310
   32c34:	movt	r1, #4
   32c38:	mov	r0, r5
   32c3c:	bl	11f1c <strcmp@plt>
   32c40:	cmp	r0, #0
   32c44:	moveq	r0, #1
   32c48:	beq	3293c <__assert_fail@plt+0x20378>
   32c4c:	mov	r1, sl
   32c50:	movw	r0, #41752	; 0xa318
   32c54:	movt	r0, #4
   32c58:	bl	11f1c <strcmp@plt>
   32c5c:	clz	r0, r0
   32c60:	lsr	r0, r0, #5
   32c64:	b	3293c <__assert_fail@plt+0x20378>
   32c68:	ldrb	r3, [sl, #1]
   32c6c:	cmp	r3, #47	; 0x2f
   32c70:	bne	32b50 <__assert_fail@plt+0x2058c>
   32c74:	movw	r1, #41660	; 0xa2bc
   32c78:	movt	r1, #4
   32c7c:	mov	r0, r5
   32c80:	bl	11f1c <strcmp@plt>
   32c84:	cmp	r0, #0
   32c88:	moveq	r0, #1
   32c8c:	beq	3293c <__assert_fail@plt+0x20378>
   32c90:	movw	r1, #41668	; 0xa2c4
   32c94:	movt	r1, #4
   32c98:	mov	r0, r5
   32c9c:	bl	11f1c <strcmp@plt>
   32ca0:	cmp	r0, #0
   32ca4:	moveq	r0, #1
   32ca8:	beq	3293c <__assert_fail@plt+0x20378>
   32cac:	movw	r1, #41676	; 0xa2cc
   32cb0:	movt	r1, #4
   32cb4:	mov	r0, r5
   32cb8:	bl	11f1c <strcmp@plt>
   32cbc:	cmp	r0, #0
   32cc0:	moveq	r0, #1
   32cc4:	beq	3293c <__assert_fail@plt+0x20378>
   32cc8:	b	32b50 <__assert_fail@plt+0x2058c>
   32ccc:	mov	r0, r6
   32cd0:	bl	123f0 <endmntent@plt>
   32cd4:	cmp	r0, #0
   32cd8:	bne	32850 <__assert_fail@plt+0x2028c>
   32cdc:	b	32894 <__assert_fail@plt+0x202d0>
   32ce0:	str	r4, [sp, #-8]!
   32ce4:	str	lr, [sp, #4]
   32ce8:	cmp	r0, #0
   32cec:	beq	32d10 <__assert_fail@plt+0x2074c>
   32cf0:	cmp	r1, #0
   32cf4:	beq	32d1c <__assert_fail@plt+0x20758>
   32cf8:	cmp	r1, #0
   32cfc:	blt	32d28 <__assert_fail@plt+0x20764>
   32d00:	bl	120b4 <realloc@plt>
   32d04:	ldr	r4, [sp]
   32d08:	add	sp, sp, #4
   32d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   32d10:	mov	r0, r1
   32d14:	bl	32148 <__assert_fail@plt+0x1fb84>
   32d18:	b	32d04 <__assert_fail@plt+0x20740>
   32d1c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   32d20:	mov	r0, #0
   32d24:	b	32d04 <__assert_fail@plt+0x20740>
   32d28:	bl	12318 <__errno_location@plt>
   32d2c:	mov	r3, #12
   32d30:	str	r3, [r0]
   32d34:	mov	r0, #0
   32d38:	b	32d04 <__assert_fail@plt+0x20740>
   32d3c:	str	r4, [sp, #-8]!
   32d40:	str	lr, [sp, #4]
   32d44:	umull	r2, r3, r1, r2
   32d48:	cmp	r3, #0
   32d4c:	bne	32d64 <__assert_fail@plt+0x207a0>
   32d50:	mov	r1, r2
   32d54:	bl	32ce0 <__assert_fail@plt+0x2071c>
   32d58:	ldr	r4, [sp]
   32d5c:	add	sp, sp, #4
   32d60:	pop	{pc}		; (ldr pc, [sp], #4)
   32d64:	bl	12318 <__errno_location@plt>
   32d68:	mov	r3, #12
   32d6c:	str	r3, [r0]
   32d70:	mov	r0, #0
   32d74:	b	32d58 <__assert_fail@plt+0x20794>
   32d78:	mov	r2, r0
   32d7c:	ldr	r0, [r0, #80]	; 0x50
   32d80:	cmp	r0, #1
   32d84:	beq	32dd0 <__assert_fail@plt+0x2080c>
   32d88:	add	r0, r1, #1
   32d8c:	ldr	r3, [r2, #28]
   32d90:	cmp	r0, r3
   32d94:	bge	32dd8 <__assert_fail@plt+0x20814>
   32d98:	ldr	ip, [r2, #8]
   32d9c:	add	r2, ip, r0, lsl #2
   32da0:	ldr	r0, [ip, r0, lsl #2]
   32da4:	cmn	r0, #1
   32da8:	bne	32de0 <__assert_fail@plt+0x2081c>
   32dac:	sub	r0, r3, r1
   32db0:	mov	r3, #1
   32db4:	add	r3, r3, #1
   32db8:	cmp	r3, r0
   32dbc:	beq	32dd4 <__assert_fail@plt+0x20810>
   32dc0:	ldr	r1, [r2, #4]!
   32dc4:	cmn	r1, #1
   32dc8:	beq	32db4 <__assert_fail@plt+0x207f0>
   32dcc:	mov	r0, r3
   32dd0:	bx	lr
   32dd4:	bx	lr
   32dd8:	mov	r0, #1
   32ddc:	bx	lr
   32de0:	mov	r0, #1
   32de4:	bx	lr
   32de8:	ldr	r3, [r0, #80]	; 0x50
   32dec:	cmp	r3, #1
   32df0:	ldreq	r3, [r0, #4]
   32df4:	ldrbeq	r0, [r3, r1]
   32df8:	ldrne	r3, [r0, #8]
   32dfc:	ldrne	r0, [r3, r1, lsl #2]
   32e00:	bx	lr
   32e04:	ldr	ip, [r0, #36]	; 0x24
   32e08:	ldr	r3, [r0, #48]	; 0x30
   32e0c:	cmp	ip, r3
   32e10:	movge	ip, r3
   32e14:	ldr	r3, [r0, #28]
   32e18:	cmp	ip, r3
   32e1c:	ble	32e58 <__assert_fail@plt+0x20894>
   32e20:	ldr	r2, [r0]
   32e24:	ldr	r1, [r0, #24]
   32e28:	add	r2, r2, r3
   32e2c:	ldrb	r2, [r2, r1]
   32e30:	ldr	r1, [r0, #64]	; 0x40
   32e34:	ldrb	r1, [r1, r2]
   32e38:	ldr	r2, [r0, #4]
   32e3c:	strb	r1, [r2, r3]
   32e40:	add	r3, r3, #1
   32e44:	cmp	ip, r3
   32e48:	bne	32e20 <__assert_fail@plt+0x2085c>
   32e4c:	str	ip, [r0, #28]
   32e50:	str	ip, [r0, #32]
   32e54:	bx	lr
   32e58:	mov	ip, r3
   32e5c:	b	32e4c <__assert_fail@plt+0x20888>
   32e60:	push	{lr}		; (str lr, [sp, #-4]!)
   32e64:	mov	ip, r0
   32e68:	mov	lr, r1
   32e6c:	clz	r1, r1
   32e70:	lsr	r1, r1, #5
   32e74:	cmp	r0, #0
   32e78:	movne	r0, r1
   32e7c:	moveq	r0, #1
   32e80:	cmp	r0, #0
   32e84:	movne	r0, #0
   32e88:	bne	32ec4 <__assert_fail@plt+0x20900>
   32e8c:	ldr	r3, [ip, #4]
   32e90:	ldr	r2, [lr, #4]
   32e94:	cmp	r3, r2
   32e98:	bne	32ec4 <__assert_fail@plt+0x20900>
   32e9c:	subs	r3, r3, #1
   32ea0:	bmi	32ec0 <__assert_fail@plt+0x208fc>
   32ea4:	ldr	r1, [ip, #8]
   32ea8:	ldr	r2, [lr, #8]
   32eac:	ldr	r1, [r1, r3, lsl #2]
   32eb0:	ldr	r2, [r2, r3, lsl #2]
   32eb4:	cmp	r1, r2
   32eb8:	beq	32e9c <__assert_fail@plt+0x208d8>
   32ebc:	b	32ec4 <__assert_fail@plt+0x20900>
   32ec0:	mov	r0, #1
   32ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   32ec8:	str	r4, [sp, #-8]!
   32ecc:	str	lr, [sp, #4]
   32ed0:	ldr	lr, [r0, #4]
   32ed4:	cmp	lr, #0
   32ed8:	movle	r0, #0
   32edc:	ble	32f54 <__assert_fail@plt+0x20990>
   32ee0:	sub	lr, lr, #1
   32ee4:	mov	ip, #0
   32ee8:	cmp	lr, ip
   32eec:	bls	32f40 <__assert_fail@plt+0x2097c>
   32ef0:	add	r2, lr, ip
   32ef4:	lsr	r2, r2, #1
   32ef8:	ldr	r4, [r0, #8]
   32efc:	ldr	r3, [r4, r2, lsl #2]
   32f00:	cmp	r1, r3
   32f04:	bgt	32f2c <__assert_fail@plt+0x20968>
   32f08:	cmp	ip, r2
   32f0c:	bcs	32f40 <__assert_fail@plt+0x2097c>
   32f10:	add	r3, ip, r2
   32f14:	lsr	r3, r3, #1
   32f18:	ldr	lr, [r4, r3, lsl #2]
   32f1c:	cmp	lr, r1
   32f20:	blt	32f34 <__assert_fail@plt+0x20970>
   32f24:	mov	r2, r3
   32f28:	b	32f08 <__assert_fail@plt+0x20944>
   32f2c:	mov	r3, r2
   32f30:	mov	r2, lr
   32f34:	add	ip, r3, #1
   32f38:	mov	lr, r2
   32f3c:	b	32ee8 <__assert_fail@plt+0x20924>
   32f40:	ldr	r3, [r0, #8]
   32f44:	ldr	r3, [r3, ip, lsl #2]
   32f48:	cmp	r3, r1
   32f4c:	addeq	r0, ip, #1
   32f50:	movne	r0, #0
   32f54:	ldr	r4, [sp]
   32f58:	add	sp, sp, #4
   32f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   32f60:	cmp	r1, #0
   32f64:	blt	32fac <__assert_fail@plt+0x209e8>
   32f68:	ldr	r3, [r0, #4]
   32f6c:	cmp	r3, r1
   32f70:	ble	32fac <__assert_fail@plt+0x209e8>
   32f74:	sub	r3, r3, #1
   32f78:	str	r3, [r0, #4]
   32f7c:	cmp	r3, r1
   32f80:	ble	32fac <__assert_fail@plt+0x209e8>
   32f84:	add	r3, r1, #1
   32f88:	lsl	r3, r3, #2
   32f8c:	ldr	r2, [r0, #8]
   32f90:	ldr	ip, [r2, r3]
   32f94:	str	ip, [r2, r1, lsl #2]
   32f98:	add	r1, r1, #1
   32f9c:	add	r3, r3, #4
   32fa0:	ldr	r2, [r0, #4]
   32fa4:	cmp	r2, r1
   32fa8:	bgt	32f8c <__assert_fail@plt+0x209c8>
   32fac:	bx	lr
   32fb0:	strd	r4, [sp, #-16]!
   32fb4:	str	r6, [sp, #8]
   32fb8:	str	lr, [sp, #12]
   32fbc:	mov	r4, r0
   32fc0:	mov	r6, r1
   32fc4:	mov	r5, r2
   32fc8:	b	32fd0 <__assert_fail@plt+0x20a0c>
   32fcc:	mov	r4, r3
   32fd0:	ldr	r3, [r4, #4]
   32fd4:	cmp	r3, #0
   32fd8:	bne	32fcc <__assert_fail@plt+0x20a08>
   32fdc:	ldr	r3, [r4, #8]
   32fe0:	cmp	r3, #0
   32fe4:	bne	32fcc <__assert_fail@plt+0x20a08>
   32fe8:	mov	r1, r4
   32fec:	mov	r0, r5
   32ff0:	blx	r6
   32ff4:	cmp	r0, #0
   32ff8:	bne	33034 <__assert_fail@plt+0x20a70>
   32ffc:	ldr	r2, [r4]
   33000:	cmp	r2, #0
   33004:	beq	33034 <__assert_fail@plt+0x20a70>
   33008:	ldr	r3, [r2, #8]
   3300c:	cmp	r3, r4
   33010:	movne	r4, #0
   33014:	moveq	r4, #1
   33018:	cmp	r3, #0
   3301c:	movne	r1, r4
   33020:	moveq	r1, #1
   33024:	mov	r4, r2
   33028:	cmp	r1, #0
   3302c:	bne	32fe8 <__assert_fail@plt+0x20a24>
   33030:	b	32fcc <__assert_fail@plt+0x20a08>
   33034:	ldrd	r4, [sp]
   33038:	ldr	r6, [sp, #8]
   3303c:	add	sp, sp, #12
   33040:	pop	{pc}		; (ldr pc, [sp], #4)
   33044:	strd	r4, [sp, #-16]!
   33048:	str	r6, [sp, #8]
   3304c:	str	lr, [sp, #12]
   33050:	mov	r4, r0
   33054:	mov	r6, r1
   33058:	mov	r5, r2
   3305c:	b	33068 <__assert_fail@plt+0x20aa4>
   33060:	mov	r3, r2
   33064:	mov	r4, r3
   33068:	mov	r1, r4
   3306c:	mov	r0, r5
   33070:	blx	r6
   33074:	cmp	r0, #0
   33078:	bne	330b0 <__assert_fail@plt+0x20aec>
   3307c:	ldr	r3, [r4, #4]
   33080:	cmp	r3, #0
   33084:	bne	33064 <__assert_fail@plt+0x20aa0>
   33088:	ldr	r2, [r4, #8]
   3308c:	cmp	r2, #0
   33090:	cmpne	r2, r3
   33094:	bne	33060 <__assert_fail@plt+0x20a9c>
   33098:	ldr	r2, [r4]
   3309c:	mov	r3, r4
   330a0:	cmp	r2, #0
   330a4:	beq	330b0 <__assert_fail@plt+0x20aec>
   330a8:	mov	r4, r2
   330ac:	b	33088 <__assert_fail@plt+0x20ac4>
   330b0:	ldrd	r4, [sp]
   330b4:	ldr	r6, [sp, #8]
   330b8:	add	sp, sp, #12
   330bc:	pop	{pc}		; (ldr pc, [sp], #4)
   330c0:	ldrb	r3, [r1, #24]
   330c4:	cmp	r3, #4
   330c8:	beq	330dc <__assert_fail@plt+0x20b18>
   330cc:	cmp	r3, #17
   330d0:	beq	33108 <__assert_fail@plt+0x20b44>
   330d4:	mov	r0, #0
   330d8:	bx	lr
   330dc:	ldr	r3, [r0, #132]	; 0x84
   330e0:	cmp	r3, #0
   330e4:	beq	330d4 <__assert_fail@plt+0x20b10>
   330e8:	ldr	r2, [r1, #20]
   330ec:	ldr	r2, [r3, r2, lsl #2]
   330f0:	str	r2, [r1, #20]
   330f4:	ldr	r3, [r0, #80]	; 0x50
   330f8:	mov	r1, #1
   330fc:	orr	r3, r3, r1, lsl r2
   33100:	str	r3, [r0, #80]	; 0x50
   33104:	b	330d4 <__assert_fail@plt+0x20b10>
   33108:	ldr	r3, [r1, #4]
   3310c:	cmp	r3, #0
   33110:	beq	330d4 <__assert_fail@plt+0x20b10>
   33114:	ldrb	r2, [r3, #24]
   33118:	cmp	r2, #17
   3311c:	bne	330d4 <__assert_fail@plt+0x20b10>
   33120:	ldr	r2, [r3, #20]
   33124:	ldr	r3, [r3, #4]
   33128:	str	r3, [r1, #4]
   3312c:	cmp	r3, #0
   33130:	strne	r1, [r3]
   33134:	ldr	r3, [r0, #132]	; 0x84
   33138:	ldr	r1, [r1, #20]
   3313c:	ldr	r1, [r3, r1, lsl #2]
   33140:	str	r1, [r3, r2, lsl #2]
   33144:	cmp	r2, #31
   33148:	bgt	330d4 <__assert_fail@plt+0x20b10>
   3314c:	ldr	r3, [r0, #80]	; 0x50
   33150:	mov	r1, #1
   33154:	bic	r2, r3, r1, lsl r2
   33158:	str	r2, [r0, #80]	; 0x50
   3315c:	b	330d4 <__assert_fail@plt+0x20b10>
   33160:	ldrb	r3, [r1, #24]
   33164:	cmp	r3, #11
   33168:	beq	33198 <__assert_fail@plt+0x20bd4>
   3316c:	cmp	r3, #16
   33170:	beq	331a8 <__assert_fail@plt+0x20be4>
   33174:	ldr	r3, [r1, #4]
   33178:	cmp	r3, #0
   3317c:	ldrne	r2, [r1, #16]
   33180:	strne	r2, [r3, #16]
   33184:	ldr	r3, [r1, #8]
   33188:	cmp	r3, #0
   3318c:	ldrne	r2, [r1, #16]
   33190:	strne	r2, [r3, #16]
   33194:	b	331a0 <__assert_fail@plt+0x20bdc>
   33198:	ldr	r3, [r1, #4]
   3319c:	str	r1, [r3, #16]
   331a0:	mov	r0, #0
   331a4:	bx	lr
   331a8:	ldr	r3, [r1, #4]
   331ac:	ldr	r2, [r1, #8]
   331b0:	ldr	r2, [r2, #12]
   331b4:	str	r2, [r3, #16]
   331b8:	ldr	r3, [r1, #8]
   331bc:	ldr	r2, [r1, #16]
   331c0:	str	r2, [r3, #16]
   331c4:	b	331a0 <__assert_fail@plt+0x20bdc>
   331c8:	ldr	r3, [r1, #40]	; 0x28
   331cc:	ldr	ip, [r1, #56]	; 0x38
   331d0:	cmp	ip, r3
   331d4:	ble	33250 <__assert_fail@plt+0x20c8c>
   331d8:	push	{lr}		; (str lr, [sp, #-4]!)
   331dc:	ldr	ip, [r1, #4]
   331e0:	ldrb	r3, [ip, r3]
   331e4:	strb	r3, [r0]
   331e8:	ldr	ip, [r1, #80]	; 0x50
   331ec:	cmp	ip, #1
   331f0:	ble	33220 <__assert_fail@plt+0x20c5c>
   331f4:	ldr	ip, [r1, #40]	; 0x28
   331f8:	ldr	lr, [r1, #28]
   331fc:	cmp	ip, lr
   33200:	beq	33220 <__assert_fail@plt+0x20c5c>
   33204:	ldr	lr, [r1, #8]
   33208:	ldr	ip, [lr, ip, lsl #2]
   3320c:	cmn	ip, #1
   33210:	moveq	r3, #1
   33214:	strbeq	r3, [r0, #4]
   33218:	moveq	r0, r3
   3321c:	beq	33348 <__assert_fail@plt+0x20d84>
   33220:	cmp	r3, #92	; 0x5c
   33224:	beq	33260 <__assert_fail@plt+0x20c9c>
   33228:	cmp	r3, #91	; 0x5b
   3322c:	beq	332ac <__assert_fail@plt+0x20ce8>
   33230:	cmp	r3, #93	; 0x5d
   33234:	beq	3334c <__assert_fail@plt+0x20d88>
   33238:	cmp	r3, #94	; 0x5e
   3323c:	bne	33334 <__assert_fail@plt+0x20d70>
   33240:	mov	r3, #25
   33244:	strb	r3, [r0, #4]
   33248:	mov	r0, #1
   3324c:	b	33348 <__assert_fail@plt+0x20d84>
   33250:	mov	r3, #2
   33254:	strb	r3, [r0, #4]
   33258:	mov	r0, #0
   3325c:	bx	lr
   33260:	tst	r2, #1
   33264:	beq	3327c <__assert_fail@plt+0x20cb8>
   33268:	ldr	r3, [r1, #40]	; 0x28
   3326c:	add	r3, r3, #1
   33270:	ldr	r2, [r1, #48]	; 0x30
   33274:	cmp	r3, r2
   33278:	blt	3328c <__assert_fail@plt+0x20cc8>
   3327c:	mov	r3, #1
   33280:	strb	r3, [r0, #4]
   33284:	mov	r0, r3
   33288:	b	33348 <__assert_fail@plt+0x20d84>
   3328c:	str	r3, [r1, #40]	; 0x28
   33290:	ldr	r2, [r1, #4]
   33294:	ldrb	r3, [r2, r3]
   33298:	strb	r3, [r0]
   3329c:	mov	r3, #1
   332a0:	strb	r3, [r0, #4]
   332a4:	mov	r0, r3
   332a8:	b	33348 <__assert_fail@plt+0x20d84>
   332ac:	ldr	r3, [r1, #40]	; 0x28
   332b0:	add	lr, r3, #1
   332b4:	ldr	ip, [r1, #48]	; 0x30
   332b8:	cmp	lr, ip
   332bc:	bge	332f4 <__assert_fail@plt+0x20d30>
   332c0:	ldr	r1, [r1, #4]
   332c4:	add	r3, r1, r3
   332c8:	ldrb	r3, [r3, #1]
   332cc:	strb	r3, [r0]
   332d0:	cmp	r3, #58	; 0x3a
   332d4:	beq	3331c <__assert_fail@plt+0x20d58>
   332d8:	cmp	r3, #61	; 0x3d
   332dc:	beq	3330c <__assert_fail@plt+0x20d48>
   332e0:	cmp	r3, #46	; 0x2e
   332e4:	moveq	r3, #26
   332e8:	strbeq	r3, [r0, #4]
   332ec:	moveq	r0, #2
   332f0:	beq	33348 <__assert_fail@plt+0x20d84>
   332f4:	mov	r3, #1
   332f8:	strb	r3, [r0, #4]
   332fc:	mov	r2, #91	; 0x5b
   33300:	strb	r2, [r0]
   33304:	mov	r0, r3
   33308:	b	33348 <__assert_fail@plt+0x20d84>
   3330c:	mov	r3, #28
   33310:	strb	r3, [r0, #4]
   33314:	mov	r0, #2
   33318:	b	33348 <__assert_fail@plt+0x20d84>
   3331c:	tst	r2, #4
   33320:	beq	332f4 <__assert_fail@plt+0x20d30>
   33324:	mov	r3, #30
   33328:	strb	r3, [r0, #4]
   3332c:	mov	r0, #2
   33330:	b	33348 <__assert_fail@plt+0x20d84>
   33334:	cmp	r3, #45	; 0x2d
   33338:	bne	3327c <__assert_fail@plt+0x20cb8>
   3333c:	mov	r3, #22
   33340:	strb	r3, [r0, #4]
   33344:	mov	r0, #1
   33348:	pop	{pc}		; (ldr pc, [sp], #4)
   3334c:	mov	r3, #21
   33350:	strb	r3, [r0, #4]
   33354:	mov	r0, #1
   33358:	b	33348 <__assert_fail@plt+0x20d84>
   3335c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33360:	strd	r6, [sp, #8]
   33364:	strd	r8, [sp, #16]
   33368:	str	sl, [sp, #24]
   3336c:	str	lr, [sp, #28]
   33370:	sub	sp, sp, #8
   33374:	mov	r6, r0
   33378:	mov	r4, r1
   3337c:	mov	r8, r2
   33380:	mov	r9, r3
   33384:	ldr	r5, [r1, #40]	; 0x28
   33388:	mov	r1, r5
   3338c:	mov	r0, r4
   33390:	bl	32d78 <__assert_fail@plt+0x207b4>
   33394:	cmp	r0, #1
   33398:	bgt	333e4 <__assert_fail@plt+0x20e20>
   3339c:	add	r5, r5, r9
   333a0:	str	r5, [r4, #40]	; 0x28
   333a4:	ldrb	r3, [r8, #4]
   333a8:	and	r2, r3, #251	; 0xfb
   333ac:	cmp	r3, #28
   333b0:	cmpne	r2, #26
   333b4:	beq	3342c <__assert_fail@plt+0x20e68>
   333b8:	ldrb	r2, [sp, #48]	; 0x30
   333bc:	cmp	r3, #22
   333c0:	moveq	r3, r2
   333c4:	orrne	r3, r2, #1
   333c8:	cmp	r3, #0
   333cc:	beq	335d4 <__assert_fail@plt+0x21010>
   333d0:	mov	r0, #0
   333d4:	str	r0, [r6]
   333d8:	ldrb	r3, [r8]
   333dc:	strb	r3, [r6, #4]
   333e0:	b	33410 <__assert_fail@plt+0x20e4c>
   333e4:	mov	r7, r0
   333e8:	mov	r3, #1
   333ec:	str	r3, [r6]
   333f0:	ldr	r1, [r4, #40]	; 0x28
   333f4:	mov	r0, r4
   333f8:	bl	32de8 <__assert_fail@plt+0x20824>
   333fc:	str	r0, [r6, #4]
   33400:	ldr	r3, [r4, #40]	; 0x28
   33404:	add	r7, r3, r7
   33408:	str	r7, [r4, #40]	; 0x28
   3340c:	mov	r0, #0
   33410:	add	sp, sp, #8
   33414:	ldrd	r4, [sp]
   33418:	ldrd	r6, [sp, #8]
   3341c:	ldrd	r8, [sp, #16]
   33420:	ldr	sl, [sp, #24]
   33424:	add	sp, sp, #28
   33428:	pop	{pc}		; (ldr pc, [sp], #4)
   3342c:	ldr	r3, [r4, #56]	; 0x38
   33430:	cmp	r5, r3
   33434:	movge	r0, #7
   33438:	bge	33410 <__assert_fail@plt+0x20e4c>
   3343c:	ldrb	r9, [r8]
   33440:	mov	r5, #0
   33444:	b	3352c <__assert_fail@plt+0x20f68>
   33448:	ldrb	r3, [r4, #75]	; 0x4b
   3344c:	cmp	r3, #0
   33450:	bne	3346c <__assert_fail@plt+0x20ea8>
   33454:	ldr	r2, [r4, #4]
   33458:	ldr	r3, [r4, #40]	; 0x28
   3345c:	add	r1, r3, #1
   33460:	str	r1, [r4, #40]	; 0x28
   33464:	ldrb	r7, [r2, r3]
   33468:	b	3354c <__assert_fail@plt+0x20f88>
   3346c:	ldrb	r3, [r4, #76]	; 0x4c
   33470:	cmp	r3, #0
   33474:	beq	334f8 <__assert_fail@plt+0x20f34>
   33478:	ldr	sl, [r4, #40]	; 0x28
   3347c:	ldr	r3, [r4, #28]
   33480:	cmp	sl, r3
   33484:	beq	33498 <__assert_fail@plt+0x20ed4>
   33488:	ldr	r3, [r4, #8]
   3348c:	ldr	r3, [r3, sl, lsl #2]
   33490:	cmn	r3, #1
   33494:	beq	334cc <__assert_fail@plt+0x20f08>
   33498:	ldr	r2, [r4, #12]
   3349c:	ldr	r3, [r4]
   334a0:	ldr	r1, [r2, sl, lsl #2]
   334a4:	ldr	r2, [r4, #24]
   334a8:	add	r3, r3, r1
   334ac:	ldrb	r7, [r3, r2]
   334b0:	bics	r3, r7, #127	; 0x7f
   334b4:	beq	334e0 <__assert_fail@plt+0x20f1c>
   334b8:	ldr	r3, [r4, #4]
   334bc:	add	r2, sl, #1
   334c0:	str	r2, [r4, #40]	; 0x28
   334c4:	ldrb	r7, [r3, sl]
   334c8:	b	3354c <__assert_fail@plt+0x20f88>
   334cc:	ldr	r3, [r4, #4]
   334d0:	add	r2, sl, #1
   334d4:	str	r2, [r4, #40]	; 0x28
   334d8:	ldrb	r7, [r3, sl]
   334dc:	b	3354c <__assert_fail@plt+0x20f88>
   334e0:	mov	r1, sl
   334e4:	mov	r0, r4
   334e8:	bl	32d78 <__assert_fail@plt+0x207b4>
   334ec:	add	r0, sl, r0
   334f0:	str	r0, [r4, #40]	; 0x28
   334f4:	b	3354c <__assert_fail@plt+0x20f88>
   334f8:	ldr	r3, [r4]
   334fc:	ldr	r1, [r4, #24]
   33500:	ldr	r2, [r4, #40]	; 0x28
   33504:	add	r0, r2, #1
   33508:	str	r0, [r4, #40]	; 0x28
   3350c:	add	r3, r3, r1
   33510:	ldrb	r7, [r3, r2]
   33514:	b	3354c <__assert_fail@plt+0x20f88>
   33518:	ldr	r3, [r6, #4]
   3351c:	strb	r7, [r3, r5]
   33520:	add	r5, r5, #1
   33524:	cmp	r5, #32
   33528:	beq	33600 <__assert_fail@plt+0x2103c>
   3352c:	ldrb	r3, [r8, #4]
   33530:	cmp	r3, #30
   33534:	beq	33448 <__assert_fail@plt+0x20e84>
   33538:	ldr	r2, [r4, #4]
   3353c:	ldr	r3, [r4, #40]	; 0x28
   33540:	add	r1, r3, #1
   33544:	str	r1, [r4, #40]	; 0x28
   33548:	ldrb	r7, [r2, r3]
   3354c:	ldr	r3, [r4, #40]	; 0x28
   33550:	ldr	r2, [r4, #56]	; 0x38
   33554:	cmp	r2, r3
   33558:	ble	335f8 <__assert_fail@plt+0x21034>
   3355c:	cmp	r9, r7
   33560:	bne	33518 <__assert_fail@plt+0x20f54>
   33564:	ldr	r2, [r4, #4]
   33568:	ldrb	r2, [r2, r3]
   3356c:	cmp	r2, #93	; 0x5d
   33570:	bne	33518 <__assert_fail@plt+0x20f54>
   33574:	add	r3, r3, #1
   33578:	str	r3, [r4, #40]	; 0x28
   3357c:	ldr	r3, [r6, #4]
   33580:	mov	r2, #0
   33584:	strb	r2, [r3, r5]
   33588:	ldrb	r3, [r8, #4]
   3358c:	cmp	r3, #28
   33590:	beq	335b4 <__assert_fail@plt+0x20ff0>
   33594:	cmp	r3, #30
   33598:	beq	335c4 <__assert_fail@plt+0x21000>
   3359c:	cmp	r3, #26
   335a0:	moveq	r3, #3
   335a4:	streq	r3, [r6]
   335a8:	moveq	r0, r2
   335ac:	movne	r0, #0
   335b0:	b	33410 <__assert_fail@plt+0x20e4c>
   335b4:	mov	r3, #2
   335b8:	str	r3, [r6]
   335bc:	mov	r0, #0
   335c0:	b	33410 <__assert_fail@plt+0x20e4c>
   335c4:	mov	r3, #4
   335c8:	str	r3, [r6]
   335cc:	mov	r0, #0
   335d0:	b	33410 <__assert_fail@plt+0x20e4c>
   335d4:	ldr	r2, [sp, #44]	; 0x2c
   335d8:	mov	r1, r4
   335dc:	mov	r0, sp
   335e0:	bl	331c8 <__assert_fail@plt+0x20c04>
   335e4:	ldrb	r3, [sp, #4]
   335e8:	cmp	r3, #21
   335ec:	movne	r0, #11
   335f0:	beq	333d0 <__assert_fail@plt+0x20e0c>
   335f4:	b	33410 <__assert_fail@plt+0x20e4c>
   335f8:	mov	r0, #7
   335fc:	b	33410 <__assert_fail@plt+0x20e4c>
   33600:	mov	r0, #7
   33604:	b	33410 <__assert_fail@plt+0x20e4c>
   33608:	ldrb	r3, [r1, #24]
   3360c:	cmp	r3, #17
   33610:	beq	3361c <__assert_fail@plt+0x21058>
   33614:	mov	r0, #0
   33618:	bx	lr
   3361c:	ldr	r3, [r1, #20]
   33620:	cmp	r0, r3
   33624:	bne	33614 <__assert_fail@plt+0x21050>
   33628:	ldrb	r3, [r1, #26]
   3362c:	orr	r3, r3, #8
   33630:	strb	r3, [r1, #26]
   33634:	b	33614 <__assert_fail@plt+0x21050>
   33638:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3363c:	strd	r6, [sp, #8]
   33640:	strd	r8, [sp, #16]
   33644:	strd	sl, [sp, #24]
   33648:	str	lr, [sp, #32]
   3364c:	sub	sp, sp, #52	; 0x34
   33650:	str	r0, [sp, #12]
   33654:	mov	fp, r1
   33658:	mov	sl, r2
   3365c:	str	r3, [sp, #32]
   33660:	ldr	r8, [r0, #84]	; 0x54
   33664:	add	r3, r3, r3, lsl #1
   33668:	ldr	r7, [r8, #24]
   3366c:	add	r7, r7, r3, lsl #2
   33670:	ldr	r3, [r7, #4]
   33674:	cmp	r3, #0
   33678:	ble	33814 <__assert_fail@plt+0x21250>
   3367c:	mov	r3, #1
   33680:	lsl	r3, r3, sl
   33684:	str	r3, [sp, #20]
   33688:	mvn	r3, r3
   3368c:	str	r3, [sp, #24]
   33690:	mov	r4, #0
   33694:	ldr	r3, [sp, #88]	; 0x58
   33698:	add	r3, r3, #1
   3369c:	add	r3, r3, r3, lsl #1
   336a0:	str	r3, [sp, #36]	; 0x24
   336a4:	b	33784 <__assert_fail@plt+0x211c0>
   336a8:	ldr	r3, [r8, #20]
   336ac:	add	r3, r3, r4
   336b0:	ldr	r3, [r3, #8]
   336b4:	ldr	r3, [r3]
   336b8:	cmp	r7, r3
   336bc:	beq	33744 <__assert_fail@plt+0x21180>
   336c0:	str	fp, [sp]
   336c4:	mov	r2, sl
   336c8:	ldr	r1, [sp, #16]
   336cc:	ldr	r0, [sp, #12]
   336d0:	bl	33638 <__assert_fail@plt+0x21074>
   336d4:	cmn	r0, #1
   336d8:	beq	33818 <__assert_fail@plt+0x21254>
   336dc:	cmp	r0, #0
   336e0:	bne	336f0 <__assert_fail@plt+0x2112c>
   336e4:	ldr	r3, [sp, #28]
   336e8:	cmp	r3, #0
   336ec:	bne	33818 <__assert_fail@plt+0x21254>
   336f0:	cmp	sl, #31
   336f4:	bgt	33708 <__assert_fail@plt+0x21144>
   336f8:	ldr	r3, [r9, #-8]
   336fc:	ldr	r2, [sp, #24]
   33700:	and	r3, r3, r2
   33704:	str	r3, [r9, #-8]
   33708:	add	r5, r5, #24
   3370c:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   33710:	cmp	r3, #0
   33714:	beq	33750 <__assert_fail@plt+0x2118c>
   33718:	mov	r9, r5
   3371c:	ldr	r3, [r5, #-24]	; 0xffffffe8
   33720:	cmp	r3, r6
   33724:	bne	33708 <__assert_fail@plt+0x21144>
   33728:	cmp	sl, #31
   3372c:	bgt	336a8 <__assert_fail@plt+0x210e4>
   33730:	ldr	r3, [r5, #-8]
   33734:	ldr	r2, [sp, #20]
   33738:	tst	r2, r3
   3373c:	bne	336a8 <__assert_fail@plt+0x210e4>
   33740:	b	33708 <__assert_fail@plt+0x21144>
   33744:	ldr	fp, [sp, #16]
   33748:	sbfx	r0, fp, #0, #1
   3374c:	b	33818 <__assert_fail@plt+0x21254>
   33750:	ldr	r7, [sp, #40]	; 0x28
   33754:	ldr	r4, [sp, #44]	; 0x2c
   33758:	ldr	fp, [sp, #16]
   3375c:	b	33774 <__assert_fail@plt+0x211b0>
   33760:	tst	fp, #1
   33764:	beq	33774 <__assert_fail@plt+0x211b0>
   33768:	ldr	r3, [r2, r6, lsl #3]
   3376c:	cmp	r3, sl
   33770:	beq	33834 <__assert_fail@plt+0x21270>
   33774:	add	r4, r4, #1
   33778:	ldr	r3, [r7, #4]
   3377c:	cmp	r3, r4
   33780:	ble	33814 <__assert_fail@plt+0x21250>
   33784:	ldr	r3, [r7, #8]
   33788:	ldr	r6, [r3, r4, lsl #2]
   3378c:	ldr	r2, [r8]
   33790:	add	r3, r2, r6, lsl #3
   33794:	ldrb	r3, [r3, #4]
   33798:	cmp	r3, #8
   3379c:	beq	33760 <__assert_fail@plt+0x2119c>
   337a0:	cmp	r3, #9
   337a4:	beq	337f8 <__assert_fail@plt+0x21234>
   337a8:	cmp	r3, #4
   337ac:	bne	33774 <__assert_fail@plt+0x211b0>
   337b0:	ldr	r3, [sp, #88]	; 0x58
   337b4:	cmn	r3, #1
   337b8:	beq	33774 <__assert_fail@plt+0x211b0>
   337bc:	add	r3, r6, r6, lsl #1
   337c0:	lsl	r3, r3, #2
   337c4:	ldr	r2, [sp, #12]
   337c8:	ldr	r5, [r2, #116]	; 0x74
   337cc:	ldr	r2, [sp, #36]	; 0x24
   337d0:	add	r5, r5, r2, lsl #3
   337d4:	and	r2, fp, #2
   337d8:	str	r2, [sp, #28]
   337dc:	str	r7, [sp, #40]	; 0x28
   337e0:	str	r4, [sp, #44]	; 0x2c
   337e4:	mov	r4, r3
   337e8:	str	fp, [sp, #16]
   337ec:	ldr	r7, [sp, #32]
   337f0:	ldr	fp, [sp, #88]	; 0x58
   337f4:	b	33718 <__assert_fail@plt+0x21154>
   337f8:	tst	fp, #2
   337fc:	beq	33774 <__assert_fail@plt+0x211b0>
   33800:	ldr	r3, [r2, r6, lsl #3]
   33804:	cmp	r3, sl
   33808:	bne	33774 <__assert_fail@plt+0x211b0>
   3380c:	mov	r0, #0
   33810:	b	33818 <__assert_fail@plt+0x21254>
   33814:	ubfx	r0, fp, #1, #1
   33818:	add	sp, sp, #52	; 0x34
   3381c:	ldrd	r4, [sp]
   33820:	ldrd	r6, [sp, #8]
   33824:	ldrd	r8, [sp, #16]
   33828:	ldrd	sl, [sp, #24]
   3382c:	add	sp, sp, #32
   33830:	pop	{pc}		; (ldr pc, [sp], #4)
   33834:	mvn	r0, #0
   33838:	b	33818 <__assert_fail@plt+0x21254>
   3383c:	str	r4, [sp, #-8]!
   33840:	str	lr, [sp, #4]
   33844:	sub	sp, sp, #8
   33848:	ldr	lr, [sp, #16]
   3384c:	add	r1, r1, r1, lsl #1
   33850:	ldr	ip, [r0, #116]	; 0x74
   33854:	add	r1, ip, r1, lsl #3
   33858:	ldr	ip, [r1, #8]
   3385c:	cmp	ip, lr
   33860:	bgt	338a4 <__assert_fail@plt+0x212e0>
   33864:	ldr	r4, [r1, #12]
   33868:	cmp	r4, lr
   3386c:	movlt	r0, #1
   33870:	blt	33894 <__assert_fail@plt+0x212d0>
   33874:	cmp	ip, lr
   33878:	movne	r1, #0
   3387c:	moveq	r1, #1
   33880:	cmp	r4, lr
   33884:	beq	338ac <__assert_fail@plt+0x212e8>
   33888:	cmp	ip, lr
   3388c:	movne	r0, #0
   33890:	beq	338b0 <__assert_fail@plt+0x212ec>
   33894:	add	sp, sp, #8
   33898:	ldr	r4, [sp]
   3389c:	add	sp, sp, #4
   338a0:	pop	{pc}		; (ldr pc, [sp], #4)
   338a4:	mvn	r0, #0
   338a8:	b	33894 <__assert_fail@plt+0x212d0>
   338ac:	orr	r1, r1, #2
   338b0:	ldr	ip, [sp, #20]
   338b4:	str	ip, [sp]
   338b8:	bl	33638 <__assert_fail@plt+0x21074>
   338bc:	b	33894 <__assert_fail@plt+0x212d0>
   338c0:	strd	r4, [sp, #-12]!
   338c4:	str	lr, [sp, #8]
   338c8:	mov	r4, r0
   338cc:	ldr	r5, [r0, #108]	; 0x6c
   338d0:	mov	ip, r5
   338d4:	mov	r0, #0
   338d8:	cmp	ip, r0
   338dc:	ble	33948 <__assert_fail@plt+0x21384>
   338e0:	add	r2, ip, r0
   338e4:	add	r2, r2, r2, lsr #31
   338e8:	asr	r2, r2, #1
   338ec:	ldr	lr, [r4, #116]	; 0x74
   338f0:	add	r3, r2, r2, lsl #1
   338f4:	add	r3, lr, r3, lsl #3
   338f8:	ldr	r3, [r3, #4]
   338fc:	cmp	r1, r3
   33900:	bgt	33934 <__assert_fail@plt+0x21370>
   33904:	cmp	r0, r2
   33908:	bge	33948 <__assert_fail@plt+0x21384>
   3390c:	add	r3, r0, r2
   33910:	add	r3, r3, r3, lsr #31
   33914:	asr	r3, r3, #1
   33918:	add	ip, r3, r3, lsl #1
   3391c:	add	ip, lr, ip, lsl #3
   33920:	ldr	ip, [ip, #4]
   33924:	cmp	ip, r1
   33928:	blt	3393c <__assert_fail@plt+0x21378>
   3392c:	mov	r2, r3
   33930:	b	33904 <__assert_fail@plt+0x21340>
   33934:	mov	r3, r2
   33938:	mov	r2, ip
   3393c:	add	r0, r3, #1
   33940:	mov	ip, r2
   33944:	b	338d8 <__assert_fail@plt+0x21314>
   33948:	cmp	r5, r0
   3394c:	ble	33974 <__assert_fail@plt+0x213b0>
   33950:	ldr	r3, [r4, #116]	; 0x74
   33954:	add	r2, r0, r0, lsl #1
   33958:	add	r3, r3, r2, lsl #3
   3395c:	ldr	r3, [r3, #4]
   33960:	cmp	r3, r1
   33964:	mvnne	r0, #0
   33968:	ldrd	r4, [sp]
   3396c:	add	sp, sp, #8
   33970:	pop	{pc}		; (ldr pc, [sp], #4)
   33974:	mvn	r0, #0
   33978:	b	33968 <__assert_fail@plt+0x213a4>
   3397c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33980:	strd	r6, [sp, #8]
   33984:	strd	r8, [sp, #16]
   33988:	strd	sl, [sp, #24]
   3398c:	str	lr, [sp, #32]
   33990:	sub	sp, sp, #20
   33994:	mov	r4, r0
   33998:	mov	r5, r1
   3399c:	str	r2, [sp, #12]
   339a0:	mov	r8, r3
   339a4:	ldr	sl, [r0, #84]	; 0x54
   339a8:	mov	r1, r3
   339ac:	bl	338c0 <__assert_fail@plt+0x212fc>
   339b0:	mov	fp, r0
   339b4:	ldr	r1, [sp, #60]	; 0x3c
   339b8:	mov	r0, r4
   339bc:	bl	338c0 <__assert_fail@plt+0x212fc>
   339c0:	str	r0, [sp, #8]
   339c4:	ldr	r3, [r5, #4]
   339c8:	cmp	r3, #0
   339cc:	ble	33a74 <__assert_fail@plt+0x214b0>
   339d0:	mov	r6, #0
   339d4:	ldr	r3, [r5, #8]
   339d8:	ldr	r1, [r3, r6, lsl #2]
   339dc:	ldr	r3, [r4, #116]	; 0x74
   339e0:	add	r2, r1, r1, lsl #1
   339e4:	ldr	r2, [r3, r2, lsl #3]
   339e8:	ldr	r3, [sl]
   339ec:	ldr	r7, [r3, r2, lsl #3]
   339f0:	str	fp, [sp, #4]
   339f4:	str	r8, [sp]
   339f8:	ldr	r3, [sp, #12]
   339fc:	mov	r2, r7
   33a00:	mov	r0, r4
   33a04:	bl	3383c <__assert_fail@plt+0x21278>
   33a08:	mov	r9, r0
   33a0c:	ldr	r3, [r5, #8]
   33a10:	ldr	r1, [r3, r6, lsl #2]
   33a14:	ldr	r3, [sp, #8]
   33a18:	str	r3, [sp, #4]
   33a1c:	ldr	r3, [sp, #60]	; 0x3c
   33a20:	str	r3, [sp]
   33a24:	ldr	r3, [sp, #56]	; 0x38
   33a28:	mov	r2, r7
   33a2c:	mov	r0, r4
   33a30:	bl	3383c <__assert_fail@plt+0x21278>
   33a34:	cmp	r9, r0
   33a38:	beq	33a5c <__assert_fail@plt+0x21498>
   33a3c:	mov	r0, #1
   33a40:	add	sp, sp, #20
   33a44:	ldrd	r4, [sp]
   33a48:	ldrd	r6, [sp, #8]
   33a4c:	ldrd	r8, [sp, #16]
   33a50:	ldrd	sl, [sp, #24]
   33a54:	add	sp, sp, #32
   33a58:	pop	{pc}		; (ldr pc, [sp], #4)
   33a5c:	add	r6, r6, #1
   33a60:	ldr	r3, [r5, #4]
   33a64:	cmp	r3, r6
   33a68:	bgt	339d4 <__assert_fail@plt+0x21410>
   33a6c:	mov	r0, #0
   33a70:	b	33a40 <__assert_fail@plt+0x2147c>
   33a74:	mov	r0, #0
   33a78:	b	33a40 <__assert_fail@plt+0x2147c>
   33a7c:	strd	r4, [sp, #-16]!
   33a80:	str	r6, [sp, #8]
   33a84:	str	lr, [sp, #12]
   33a88:	mov	r4, r0
   33a8c:	mov	r5, r1
   33a90:	ldr	r3, [r0, #80]	; 0x50
   33a94:	cmp	r3, #1
   33a98:	ble	33ae0 <__assert_fail@plt+0x2151c>
   33a9c:	cmn	r1, #-1073741823	; 0xc0000001
   33aa0:	bhi	33b20 <__assert_fail@plt+0x2155c>
   33aa4:	lsl	r6, r1, #2
   33aa8:	mov	r1, r6
   33aac:	ldr	r0, [r0, #8]
   33ab0:	bl	32ce0 <__assert_fail@plt+0x2071c>
   33ab4:	cmp	r0, #0
   33ab8:	beq	33b28 <__assert_fail@plt+0x21564>
   33abc:	str	r0, [r4, #8]
   33ac0:	ldr	r0, [r4, #12]
   33ac4:	cmp	r0, #0
   33ac8:	beq	33ae0 <__assert_fail@plt+0x2151c>
   33acc:	mov	r1, r6
   33ad0:	bl	32ce0 <__assert_fail@plt+0x2071c>
   33ad4:	cmp	r0, #0
   33ad8:	beq	33b30 <__assert_fail@plt+0x2156c>
   33adc:	str	r0, [r4, #12]
   33ae0:	ldrb	r3, [r4, #75]	; 0x4b
   33ae4:	cmp	r3, #0
   33ae8:	bne	33b04 <__assert_fail@plt+0x21540>
   33aec:	str	r5, [r4, #36]	; 0x24
   33af0:	mov	r0, #0
   33af4:	ldrd	r4, [sp]
   33af8:	ldr	r6, [sp, #8]
   33afc:	add	sp, sp, #12
   33b00:	pop	{pc}		; (ldr pc, [sp], #4)
   33b04:	mov	r1, r5
   33b08:	ldr	r0, [r4, #4]
   33b0c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   33b10:	cmp	r0, #0
   33b14:	beq	33b38 <__assert_fail@plt+0x21574>
   33b18:	str	r0, [r4, #4]
   33b1c:	b	33aec <__assert_fail@plt+0x21528>
   33b20:	mov	r0, #12
   33b24:	b	33af4 <__assert_fail@plt+0x21530>
   33b28:	mov	r0, #12
   33b2c:	b	33af4 <__assert_fail@plt+0x21530>
   33b30:	mov	r0, #12
   33b34:	b	33af4 <__assert_fail@plt+0x21530>
   33b38:	mov	r0, #12
   33b3c:	b	33af4 <__assert_fail@plt+0x21530>
   33b40:	strd	r4, [sp, #-16]!
   33b44:	str	r6, [sp, #8]
   33b48:	str	lr, [sp, #12]
   33b4c:	mov	r4, r0
   33b50:	mov	r5, r1
   33b54:	ldr	r1, [r0]
   33b58:	ldr	r3, [r0, #4]
   33b5c:	cmp	r1, r3
   33b60:	beq	33b8c <__assert_fail@plt+0x215c8>
   33b64:	ldr	r2, [r4, #8]
   33b68:	ldr	r3, [r4, #4]
   33b6c:	add	r1, r3, #1
   33b70:	str	r1, [r4, #4]
   33b74:	str	r5, [r2, r3, lsl #2]
   33b78:	mov	r0, #1
   33b7c:	ldrd	r4, [sp]
   33b80:	ldr	r6, [sp, #8]
   33b84:	add	sp, sp, #12
   33b88:	pop	{pc}		; (ldr pc, [sp], #4)
   33b8c:	add	r1, r1, #1
   33b90:	lsl	r3, r1, #1
   33b94:	str	r3, [r0]
   33b98:	lsl	r1, r1, #3
   33b9c:	ldr	r0, [r0, #8]
   33ba0:	bl	32ce0 <__assert_fail@plt+0x2071c>
   33ba4:	cmp	r0, #0
   33ba8:	beq	33bb4 <__assert_fail@plt+0x215f0>
   33bac:	str	r0, [r4, #8]
   33bb0:	b	33b64 <__assert_fail@plt+0x215a0>
   33bb4:	mov	r0, #0
   33bb8:	b	33b7c <__assert_fail@plt+0x215b8>
   33bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33bc0:	strd	r6, [sp, #8]
   33bc4:	str	r8, [sp, #16]
   33bc8:	str	lr, [sp, #20]
   33bcc:	mov	r7, r0
   33bd0:	mov	r5, r1
   33bd4:	mov	r4, r2
   33bd8:	mov	r6, r3
   33bdc:	ldr	r3, [r0, #64]	; 0x40
   33be0:	cmp	r3, #31
   33be4:	beq	33c64 <__assert_fail@plt+0x216a0>
   33be8:	ldr	r3, [r7, #56]	; 0x38
   33bec:	ldr	r2, [r7, #64]	; 0x40
   33bf0:	add	r1, r2, #1
   33bf4:	str	r1, [r7, #64]	; 0x40
   33bf8:	lsl	r2, r2, #5
   33bfc:	add	r0, r2, #4
   33c00:	add	r0, r3, r0
   33c04:	add	r3, r3, r2
   33c08:	mov	r2, #0
   33c0c:	str	r2, [r3, #4]
   33c10:	str	r5, [r3, #8]
   33c14:	str	r4, [r3, #12]
   33c18:	ldrd	r6, [r6]
   33c1c:	strd	r6, [r3, #24]
   33c20:	ldrb	r1, [r3, #30]
   33c24:	and	r1, r1, #251	; 0xfb
   33c28:	bfi	r1, r2, #3, #1
   33c2c:	strb	r1, [r3, #30]
   33c30:	str	r2, [r3, #16]
   33c34:	str	r2, [r3, #20]
   33c38:	mvn	r2, #0
   33c3c:	str	r2, [r3, #32]
   33c40:	cmp	r5, #0
   33c44:	strne	r0, [r5]
   33c48:	cmp	r4, #0
   33c4c:	strne	r0, [r4]
   33c50:	ldrd	r4, [sp]
   33c54:	ldrd	r6, [sp, #8]
   33c58:	ldr	r8, [sp, #16]
   33c5c:	add	sp, sp, #20
   33c60:	pop	{pc}		; (ldr pc, [sp], #4)
   33c64:	mov	r0, #996	; 0x3e4
   33c68:	bl	32148 <__assert_fail@plt+0x1fb84>
   33c6c:	cmp	r0, #0
   33c70:	beq	33c50 <__assert_fail@plt+0x2168c>
   33c74:	ldr	r3, [r7, #56]	; 0x38
   33c78:	str	r3, [r0]
   33c7c:	str	r0, [r7, #56]	; 0x38
   33c80:	mov	r3, #0
   33c84:	str	r3, [r7, #64]	; 0x40
   33c88:	b	33be8 <__assert_fail@plt+0x21624>
   33c8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33c90:	strd	r6, [sp, #8]
   33c94:	str	r8, [sp, #16]
   33c98:	str	lr, [sp, #20]
   33c9c:	sub	sp, sp, #8
   33ca0:	mov	r4, r0
   33ca4:	mov	r7, r1
   33ca8:	ldr	r5, [r0]
   33cac:	add	r8, sp, #4
   33cb0:	mov	r6, #0
   33cb4:	add	r3, r4, #20
   33cb8:	mov	r2, r6
   33cbc:	mov	r1, r6
   33cc0:	mov	r0, r7
   33cc4:	bl	33bbc <__assert_fail@plt+0x215f8>
   33cc8:	str	r0, [r8]
   33ccc:	cmp	r0, #0
   33cd0:	beq	33d08 <__assert_fail@plt+0x21744>
   33cd4:	str	r5, [r0]
   33cd8:	ldr	r2, [r8]
   33cdc:	ldrb	r3, [r2, #26]
   33ce0:	orr	r3, r3, #4
   33ce4:	strb	r3, [r2, #26]
   33ce8:	ldr	r5, [r8]
   33cec:	ldr	r3, [r4, #4]
   33cf0:	cmp	r3, #0
   33cf4:	beq	33d20 <__assert_fail@plt+0x2175c>
   33cf8:	add	r8, r5, #4
   33cfc:	mov	r4, r3
   33d00:	b	33cb4 <__assert_fail@plt+0x216f0>
   33d04:	ldr	r0, [sp, #4]
   33d08:	add	sp, sp, #8
   33d0c:	ldrd	r4, [sp]
   33d10:	ldrd	r6, [sp, #8]
   33d14:	ldr	r8, [sp, #16]
   33d18:	add	sp, sp, #20
   33d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   33d20:	ldr	r2, [r4, #8]
   33d24:	cmp	r2, r3
   33d28:	cmpne	r2, #0
   33d2c:	bne	33d4c <__assert_fail@plt+0x21788>
   33d30:	ldr	r2, [r4]
   33d34:	ldr	r5, [r5]
   33d38:	mov	r3, r4
   33d3c:	cmp	r2, #0
   33d40:	beq	33d04 <__assert_fail@plt+0x21740>
   33d44:	mov	r4, r2
   33d48:	b	33d20 <__assert_fail@plt+0x2175c>
   33d4c:	add	r8, r5, #8
   33d50:	mov	r4, r2
   33d54:	b	33cb4 <__assert_fail@plt+0x216f0>
   33d58:	strd	r4, [sp, #-12]!
   33d5c:	str	lr, [sp, #8]
   33d60:	sub	sp, sp, #12
   33d64:	mov	r4, #0
   33d68:	mov	r5, #0
   33d6c:	strd	r4, [sp]
   33d70:	strb	r3, [sp, #4]
   33d74:	mov	r3, sp
   33d78:	bl	33bbc <__assert_fail@plt+0x215f8>
   33d7c:	add	sp, sp, #12
   33d80:	ldrd	r4, [sp]
   33d84:	add	sp, sp, #8
   33d88:	pop	{pc}		; (ldr pc, [sp], #4)
   33d8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33d90:	strd	r6, [sp, #8]
   33d94:	strd	r8, [sp, #16]
   33d98:	str	sl, [sp, #24]
   33d9c:	str	lr, [sp, #28]
   33da0:	mov	r8, r0
   33da4:	mov	r7, r2
   33da8:	ldr	r6, [r1]
   33dac:	ldr	r4, [r2, #4]
   33db0:	ldrb	r3, [r1, #28]
   33db4:	ubfx	r3, r3, #4, #1
   33db8:	cmp	r4, #0
   33dbc:	moveq	r3, #0
   33dc0:	cmp	r3, #0
   33dc4:	bne	33e0c <__assert_fail@plt+0x21848>
   33dc8:	mov	r3, #8
   33dcc:	mov	r2, #0
   33dd0:	mov	r1, r2
   33dd4:	mov	r0, r6
   33dd8:	bl	33d58 <__assert_fail@plt+0x21794>
   33ddc:	mov	r5, r0
   33de0:	mov	r3, #9
   33de4:	mov	r2, #0
   33de8:	mov	r1, r2
   33dec:	mov	r0, r6
   33df0:	bl	33d58 <__assert_fail@plt+0x21794>
   33df4:	mov	sl, r0
   33df8:	cmp	r4, #0
   33dfc:	moveq	r9, r0
   33e00:	beq	33e70 <__assert_fail@plt+0x218ac>
   33e04:	mov	r9, r0
   33e08:	b	33e58 <__assert_fail@plt+0x21894>
   33e0c:	ldr	r3, [r2, #20]
   33e10:	cmp	r3, #31
   33e14:	bgt	33ecc <__assert_fail@plt+0x21908>
   33e18:	ldr	r2, [r6, #80]	; 0x50
   33e1c:	lsr	r3, r2, r3
   33e20:	tst	r3, #1
   33e24:	beq	33ecc <__assert_fail@plt+0x21908>
   33e28:	mov	r3, #8
   33e2c:	mov	r2, #0
   33e30:	mov	r1, r2
   33e34:	mov	r0, r6
   33e38:	bl	33d58 <__assert_fail@plt+0x21794>
   33e3c:	mov	r5, r0
   33e40:	mov	r3, #9
   33e44:	mov	r2, #0
   33e48:	mov	r1, r2
   33e4c:	mov	r0, r6
   33e50:	bl	33d58 <__assert_fail@plt+0x21794>
   33e54:	mov	r9, r0
   33e58:	mov	r3, #16
   33e5c:	mov	r2, r9
   33e60:	mov	r1, r4
   33e64:	mov	r0, r6
   33e68:	bl	33d58 <__assert_fail@plt+0x21794>
   33e6c:	mov	sl, r0
   33e70:	mov	r3, #16
   33e74:	mov	r2, sl
   33e78:	mov	r1, r5
   33e7c:	mov	r0, r6
   33e80:	bl	33d58 <__assert_fail@plt+0x21794>
   33e84:	mov	r4, r0
   33e88:	cmp	sl, #0
   33e8c:	cmpne	r0, #0
   33e90:	beq	33ee8 <__assert_fail@plt+0x21924>
   33e94:	cmp	r9, #0
   33e98:	cmpne	r5, #0
   33e9c:	beq	33ee8 <__assert_fail@plt+0x21924>
   33ea0:	ldr	r3, [r7, #20]
   33ea4:	str	r3, [r9, #20]
   33ea8:	str	r3, [r5, #20]
   33eac:	ldrb	r3, [r7, #26]
   33eb0:	ubfx	r3, r3, #3, #1
   33eb4:	ldrb	r2, [r9, #26]
   33eb8:	bfi	r2, r3, #3, #1
   33ebc:	strb	r2, [r9, #26]
   33ec0:	ldrb	r2, [r5, #26]
   33ec4:	bfi	r2, r3, #3, #1
   33ec8:	strb	r2, [r5, #26]
   33ecc:	mov	r0, r4
   33ed0:	ldrd	r4, [sp]
   33ed4:	ldrd	r6, [sp, #8]
   33ed8:	ldrd	r8, [sp, #16]
   33edc:	ldr	sl, [sp, #24]
   33ee0:	add	sp, sp, #28
   33ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   33ee8:	mov	r3, #12
   33eec:	str	r3, [r8]
   33ef0:	mov	r4, #0
   33ef4:	b	33ecc <__assert_fail@plt+0x21908>
   33ef8:	strd	r4, [sp, #-12]!
   33efc:	str	lr, [sp, #8]
   33f00:	sub	sp, sp, #12
   33f04:	mov	r5, r0
   33f08:	mov	r4, r1
   33f0c:	mov	r3, #0
   33f10:	str	r3, [sp, #4]
   33f14:	ldr	r2, [r1, #4]
   33f18:	cmp	r2, r3
   33f1c:	beq	33f2c <__assert_fail@plt+0x21968>
   33f20:	ldrb	r3, [r2, #24]
   33f24:	cmp	r3, #17
   33f28:	beq	33f58 <__assert_fail@plt+0x21994>
   33f2c:	ldr	r2, [r4, #8]
   33f30:	cmp	r2, #0
   33f34:	beq	33f44 <__assert_fail@plt+0x21980>
   33f38:	ldrb	r3, [r2, #24]
   33f3c:	cmp	r3, #17
   33f40:	beq	33f74 <__assert_fail@plt+0x219b0>
   33f44:	ldr	r0, [sp, #4]
   33f48:	add	sp, sp, #12
   33f4c:	ldrd	r4, [sp]
   33f50:	add	sp, sp, #8
   33f54:	pop	{pc}		; (ldr pc, [sp], #4)
   33f58:	mov	r1, r0
   33f5c:	add	r0, sp, #4
   33f60:	bl	33d8c <__assert_fail@plt+0x217c8>
   33f64:	str	r0, [r4, #4]
   33f68:	cmp	r0, #0
   33f6c:	strne	r4, [r0]
   33f70:	b	33f2c <__assert_fail@plt+0x21968>
   33f74:	mov	r1, r5
   33f78:	add	r0, sp, #4
   33f7c:	bl	33d8c <__assert_fail@plt+0x217c8>
   33f80:	str	r0, [r4, #8]
   33f84:	cmp	r0, #0
   33f88:	strne	r4, [r0]
   33f8c:	b	33f44 <__assert_fail@plt+0x21980>
   33f90:	strd	r4, [sp, #-16]!
   33f94:	str	r6, [sp, #8]
   33f98:	str	lr, [sp, #12]
   33f9c:	mov	r4, r0
   33fa0:	mov	r5, r1
   33fa4:	mov	r3, #1
   33fa8:	str	r3, [r0]
   33fac:	str	r3, [r0, #4]
   33fb0:	mov	r0, #4
   33fb4:	bl	32148 <__assert_fail@plt+0x1fb84>
   33fb8:	str	r0, [r4, #8]
   33fbc:	cmp	r0, #0
   33fc0:	moveq	r3, #0
   33fc4:	streq	r3, [r4, #4]
   33fc8:	streq	r3, [r4]
   33fcc:	moveq	r0, #12
   33fd0:	strne	r5, [r0]
   33fd4:	movne	r0, #0
   33fd8:	ldrd	r4, [sp]
   33fdc:	ldr	r6, [sp, #8]
   33fe0:	add	sp, sp, #12
   33fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   33fe8:	str	r4, [sp, #-8]!
   33fec:	str	lr, [sp, #4]
   33ff0:	mov	r4, r0
   33ff4:	str	r1, [r0]
   33ff8:	mov	r3, #0
   33ffc:	str	r3, [r0, #4]
   34000:	lsl	r0, r1, #2
   34004:	bl	32148 <__assert_fail@plt+0x1fb84>
   34008:	str	r0, [r4, #8]
   3400c:	cmp	r0, #0
   34010:	movne	r0, #0
   34014:	moveq	r0, #12
   34018:	ldr	r4, [sp]
   3401c:	add	sp, sp, #4
   34020:	pop	{pc}		; (ldr pc, [sp], #4)
   34024:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34028:	strd	r6, [sp, #8]
   3402c:	strd	r8, [sp, #16]
   34030:	str	sl, [sp, #24]
   34034:	str	lr, [sp, #28]
   34038:	mov	r6, r0
   3403c:	mov	r5, r1
   34040:	mov	r7, r2
   34044:	mov	r8, r1
   34048:	str	r2, [r8], #16
   3404c:	ldr	r1, [r1, #8]
   34050:	mov	r0, r8
   34054:	bl	33fe8 <__assert_fail@plt+0x21a24>
   34058:	subs	r9, r0, #0
   3405c:	bne	34138 <__assert_fail@plt+0x21b74>
   34060:	ldr	r3, [r5, #8]
   34064:	cmp	r3, #0
   34068:	ble	340b8 <__assert_fail@plt+0x21af4>
   3406c:	mov	r4, r9
   34070:	b	34084 <__assert_fail@plt+0x21ac0>
   34074:	add	r4, r4, #1
   34078:	ldr	r3, [r5, #8]
   3407c:	cmp	r3, r4
   34080:	ble	340b8 <__assert_fail@plt+0x21af4>
   34084:	ldr	r3, [r5, #12]
   34088:	ldr	r1, [r3, r4, lsl #2]
   3408c:	ldr	r3, [r6]
   34090:	add	r3, r3, r1, lsl #3
   34094:	ldrb	r3, [r3, #4]
   34098:	tst	r3, #8
   3409c:	bne	34074 <__assert_fail@plt+0x21ab0>
   340a0:	mov	r0, r8
   340a4:	bl	33b40 <__assert_fail@plt+0x2157c>
   340a8:	cmp	r0, #0
   340ac:	bne	34074 <__assert_fail@plt+0x21ab0>
   340b0:	mov	r9, #12
   340b4:	b	340f4 <__assert_fail@plt+0x21b30>
   340b8:	ldr	r4, [r6, #68]	; 0x44
   340bc:	and	r7, r7, r4
   340c0:	add	r7, r7, r7, lsl #1
   340c4:	lsl	r4, r7, #2
   340c8:	ldr	r6, [r6, #32]
   340cc:	add	r7, r6, r4
   340d0:	ldr	r3, [r6, r4]
   340d4:	ldr	r2, [r7, #4]
   340d8:	cmp	r2, r3
   340dc:	ble	34110 <__assert_fail@plt+0x21b4c>
   340e0:	ldr	r2, [r7, #8]
   340e4:	ldr	r3, [r6, r4]
   340e8:	add	r1, r3, #1
   340ec:	str	r1, [r6, r4]
   340f0:	str	r5, [r2, r3, lsl #2]
   340f4:	mov	r0, r9
   340f8:	ldrd	r4, [sp]
   340fc:	ldrd	r6, [sp, #8]
   34100:	ldrd	r8, [sp, #16]
   34104:	ldr	sl, [sp, #24]
   34108:	add	sp, sp, #28
   3410c:	pop	{pc}		; (ldr pc, [sp], #4)
   34110:	add	r3, r3, #1
   34114:	lsl	r8, r3, #1
   34118:	lsl	r1, r3, #3
   3411c:	ldr	r0, [r7, #8]
   34120:	bl	32ce0 <__assert_fail@plt+0x2071c>
   34124:	cmp	r0, #0
   34128:	beq	34140 <__assert_fail@plt+0x21b7c>
   3412c:	str	r0, [r7, #8]
   34130:	str	r8, [r7, #4]
   34134:	b	340e0 <__assert_fail@plt+0x21b1c>
   34138:	mov	r9, #12
   3413c:	b	340f4 <__assert_fail@plt+0x21b30>
   34140:	mov	r9, #12
   34144:	b	340f4 <__assert_fail@plt+0x21b30>
   34148:	strd	r4, [sp, #-20]!	; 0xffffffec
   3414c:	strd	r6, [sp, #8]
   34150:	str	lr, [sp, #16]
   34154:	sub	sp, sp, #84	; 0x54
   34158:	mov	r4, r0
   3415c:	ldr	r5, [r0, #36]	; 0x24
   34160:	ldr	r3, [r0, #48]	; 0x30
   34164:	cmp	r5, r3
   34168:	movge	r5, r3
   3416c:	ldr	r7, [r0, #28]
   34170:	cmp	r5, r7
   34174:	ble	342bc <__assert_fail@plt+0x21cf8>
   34178:	mov	r6, #1
   3417c:	b	3425c <__assert_fail@plt+0x21c98>
   34180:	ldr	r3, [r4, #80]	; 0x50
   34184:	cmp	r3, #0
   34188:	cmpgt	r2, #0
   3418c:	ble	341e4 <__assert_fail@plt+0x21c20>
   34190:	add	r0, sp, #16
   34194:	mov	r1, #0
   34198:	ldr	r3, [r4]
   3419c:	ldr	ip, [r4, #24]
   341a0:	add	r3, r3, r7
   341a4:	add	r3, r3, r1
   341a8:	ldrb	r3, [r3, ip]
   341ac:	ldr	ip, [r4, #64]	; 0x40
   341b0:	ldrb	ip, [ip, r3]
   341b4:	ldr	r3, [r4, #4]
   341b8:	add	r3, r3, r7
   341bc:	strb	ip, [r3, r1]
   341c0:	strb	ip, [r0], #1
   341c4:	add	r1, r1, #1
   341c8:	ldr	r3, [r4, #80]	; 0x50
   341cc:	cmp	r2, r3
   341d0:	movlt	r3, r2
   341d4:	cmp	r3, r1
   341d8:	bgt	34198 <__assert_fail@plt+0x21bd4>
   341dc:	add	r1, sp, #16
   341e0:	b	34284 <__assert_fail@plt+0x21cc0>
   341e4:	add	r1, sp, #16
   341e8:	b	34284 <__assert_fail@plt+0x21cc0>
   341ec:	ldr	r3, [r4]
   341f0:	ldr	r2, [r4, #24]
   341f4:	add	r3, r3, r7
   341f8:	ldrb	r3, [r3, r2]
   341fc:	str	r3, [sp, #4]
   34200:	ldr	r2, [r4, #64]	; 0x40
   34204:	cmp	r2, #0
   34208:	ldrbne	r3, [r2, r3]
   3420c:	strne	r3, [sp, #4]
   34210:	ldrd	r2, [sp, #8]
   34214:	strd	r2, [r4, #16]
   34218:	mov	r0, r6
   3421c:	add	r3, r7, #1
   34220:	ldr	r2, [r4, #8]
   34224:	ldr	r1, [sp, #4]
   34228:	str	r1, [r2, r7, lsl #2]
   3422c:	add	r0, r7, r0
   34230:	cmp	r3, r0
   34234:	bge	342d8 <__assert_fail@plt+0x21d14>
   34238:	mvn	r1, #0
   3423c:	ldr	r2, [r4, #8]
   34240:	str	r1, [r2, r3, lsl #2]
   34244:	add	r3, r3, #1
   34248:	cmp	r3, r0
   3424c:	bne	3423c <__assert_fail@plt+0x21c78>
   34250:	mov	r7, r0
   34254:	cmp	r7, r5
   34258:	bge	342bc <__assert_fail@plt+0x21cf8>
   3425c:	sub	r2, r5, r7
   34260:	ldrd	r0, [r4, #16]
   34264:	strd	r0, [sp, #8]
   34268:	ldr	r3, [r4, #64]	; 0x40
   3426c:	cmp	r3, #0
   34270:	bne	34180 <__assert_fail@plt+0x21bbc>
   34274:	ldr	r1, [r4, #24]
   34278:	add	r3, r7, r1
   3427c:	ldr	r1, [r4]
   34280:	add	r1, r1, r3
   34284:	add	r3, r4, #16
   34288:	add	r0, sp, #4
   3428c:	bl	32184 <__assert_fail@plt+0x1fbc0>
   34290:	sub	r3, r0, #1
   34294:	cmn	r3, #3
   34298:	bhi	341ec <__assert_fail@plt+0x21c28>
   3429c:	cmn	r0, #2
   342a0:	bne	3421c <__assert_fail@plt+0x21c58>
   342a4:	ldr	r2, [r4, #36]	; 0x24
   342a8:	ldr	r3, [r4, #48]	; 0x30
   342ac:	cmp	r2, r3
   342b0:	bge	341ec <__assert_fail@plt+0x21c28>
   342b4:	ldrd	r2, [sp, #8]
   342b8:	strd	r2, [r4, #16]
   342bc:	str	r7, [r4, #28]
   342c0:	str	r7, [r4, #32]
   342c4:	add	sp, sp, #84	; 0x54
   342c8:	ldrd	r4, [sp]
   342cc:	ldrd	r6, [sp, #8]
   342d0:	add	sp, sp, #16
   342d4:	pop	{pc}		; (ldr pc, [sp], #4)
   342d8:	mov	r7, r3
   342dc:	b	34254 <__assert_fail@plt+0x21c90>
   342e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   342e4:	strd	r6, [sp, #8]
   342e8:	strd	r8, [sp, #16]
   342ec:	strd	sl, [sp, #24]
   342f0:	str	lr, [sp, #32]
   342f4:	sub	sp, sp, #92	; 0x5c
   342f8:	mov	r5, r0
   342fc:	ldr	r4, [r0, #28]
   34300:	ldr	r6, [r0, #36]	; 0x24
   34304:	ldr	r3, [r0, #48]	; 0x30
   34308:	cmp	r6, r3
   3430c:	movge	r6, r3
   34310:	ldrb	r3, [r0, #74]	; 0x4a
   34314:	cmp	r3, #0
   34318:	bne	34328 <__assert_fail@plt+0x21d64>
   3431c:	ldr	r3, [r0, #64]	; 0x40
   34320:	cmp	r3, #0
   34324:	beq	3435c <__assert_fail@plt+0x21d98>
   34328:	ldr	r7, [r5, #32]
   3432c:	cmp	r4, r6
   34330:	blt	34488 <__assert_fail@plt+0x21ec4>
   34334:	str	r4, [r5, #28]
   34338:	str	r7, [r5, #32]
   3433c:	mov	r0, #0
   34340:	add	sp, sp, #92	; 0x5c
   34344:	ldrd	r4, [sp]
   34348:	ldrd	r6, [sp, #8]
   3434c:	ldrd	r8, [sp, #16]
   34350:	ldrd	sl, [sp, #24]
   34354:	add	sp, sp, #32
   34358:	pop	{pc}		; (ldr pc, [sp], #4)
   3435c:	ldrb	r3, [r0, #76]	; 0x4c
   34360:	cmp	r3, #0
   34364:	bne	34328 <__assert_fail@plt+0x21d64>
   34368:	cmp	r4, r6
   3436c:	bge	345e8 <__assert_fail@plt+0x22024>
   34370:	add	r3, r0, #16
   34374:	str	r3, [sp, #4]
   34378:	mvn	r7, #0
   3437c:	b	34434 <__assert_fail@plt+0x21e70>
   34380:	ldr	r0, [sp, #4]
   34384:	ldrd	r2, [r0]
   34388:	strd	r2, [sp, #80]	; 0x50
   3438c:	mov	r9, r4
   34390:	add	r1, r8, r4
   34394:	mov	r3, r0
   34398:	sub	r2, r6, r4
   3439c:	add	r1, sl, r1
   343a0:	add	r0, sp, #12
   343a4:	bl	32184 <__assert_fail@plt+0x1fbc0>
   343a8:	mov	r8, r0
   343ac:	sub	r3, r0, #1
   343b0:	cmn	r3, #4
   343b4:	bhi	34584 <__assert_fail@plt+0x21fc0>
   343b8:	ldr	sl, [sp, #12]
   343bc:	mov	r0, sl
   343c0:	bl	1254c <towupper@plt>
   343c4:	mov	fp, r0
   343c8:	cmp	sl, r0
   343cc:	beq	34560 <__assert_fail@plt+0x21f9c>
   343d0:	add	r2, sp, #80	; 0x50
   343d4:	mov	r1, r0
   343d8:	add	r0, sp, #16
   343dc:	bl	11ed4 <wcrtomb@plt>
   343e0:	cmp	r8, r0
   343e4:	bne	34484 <__assert_fail@plt+0x21ec0>
   343e8:	ldr	r0, [r5, #4]
   343ec:	mov	r2, r8
   343f0:	add	r1, sp, #16
   343f4:	add	r0, r0, r4
   343f8:	bl	12000 <memcpy@plt>
   343fc:	add	r4, r4, #1
   34400:	ldr	r3, [r5, #8]
   34404:	str	fp, [r3, r9, lsl #2]
   34408:	add	r9, r9, r8
   3440c:	cmp	r4, r9
   34410:	bge	3442c <__assert_fail@plt+0x21e68>
   34414:	ldr	r3, [r5, #8]
   34418:	str	r7, [r3, r4, lsl #2]
   3441c:	add	r4, r4, #1
   34420:	cmp	r9, r4
   34424:	bne	34414 <__assert_fail@plt+0x21e50>
   34428:	mov	r4, r9
   3442c:	cmp	r6, r4
   34430:	ble	345e8 <__assert_fail@plt+0x22024>
   34434:	ldr	sl, [r5]
   34438:	ldr	r8, [r5, #24]
   3443c:	add	r3, sl, r8
   34440:	ldrb	fp, [r3, r4]
   34444:	bics	r3, fp, #127	; 0x7f
   34448:	bne	34380 <__assert_fail@plt+0x21dbc>
   3444c:	ldr	r0, [sp, #4]
   34450:	bl	1203c <mbsinit@plt>
   34454:	cmp	r0, #0
   34458:	beq	34380 <__assert_fail@plt+0x21dbc>
   3445c:	mov	r0, fp
   34460:	bl	1254c <towupper@plt>
   34464:	bics	r3, r0, #127	; 0x7f
   34468:	bne	34380 <__assert_fail@plt+0x21dbc>
   3446c:	ldr	r3, [r5, #4]
   34470:	strb	r0, [r3, r4]
   34474:	ldr	r3, [r5, #8]
   34478:	str	r0, [r3, r4, lsl #2]
   3447c:	add	r4, r4, #1
   34480:	b	3442c <__assert_fail@plt+0x21e68>
   34484:	mov	r7, r4
   34488:	sub	r2, r6, r4
   3448c:	ldrd	r0, [r5, #16]
   34490:	strd	r0, [sp, #80]	; 0x50
   34494:	ldr	r3, [r5, #64]	; 0x40
   34498:	cmp	r3, #0
   3449c:	bne	345f8 <__assert_fail@plt+0x22034>
   344a0:	ldr	r3, [r5, #24]
   344a4:	add	r3, r7, r3
   344a8:	ldr	r1, [r5]
   344ac:	add	r3, r1, r3
   344b0:	str	r3, [sp, #4]
   344b4:	add	r3, r5, #16
   344b8:	ldr	r1, [sp, #4]
   344bc:	add	r0, sp, #12
   344c0:	bl	32184 <__assert_fail@plt+0x1fbc0>
   344c4:	mov	r8, r0
   344c8:	sub	fp, r0, #1
   344cc:	cmn	fp, #4
   344d0:	bhi	347e0 <__assert_fail@plt+0x2221c>
   344d4:	ldr	sl, [sp, #12]
   344d8:	mov	r0, sl
   344dc:	bl	1254c <towupper@plt>
   344e0:	mov	r9, r0
   344e4:	cmp	sl, r0
   344e8:	beq	347a0 <__assert_fail@plt+0x221dc>
   344ec:	add	r2, sp, #80	; 0x50
   344f0:	mov	r1, r0
   344f4:	add	r0, sp, #16
   344f8:	bl	11ed4 <wcrtomb@plt>
   344fc:	mov	sl, r0
   34500:	cmp	r8, r0
   34504:	bne	34658 <__assert_fail@plt+0x22094>
   34508:	ldr	r0, [r5, #4]
   3450c:	mov	r2, sl
   34510:	add	r1, sp, #16
   34514:	add	r0, r0, r4
   34518:	bl	12000 <memcpy@plt>
   3451c:	ldrb	r3, [r5, #76]	; 0x4c
   34520:	cmp	r3, #0
   34524:	bne	347b8 <__assert_fail@plt+0x221f4>
   34528:	add	r7, r7, r8
   3452c:	add	r3, r4, #1
   34530:	ldr	r2, [r5, #8]
   34534:	str	r9, [r2, r4, lsl #2]
   34538:	add	r4, r4, r8
   3453c:	cmp	r3, r4
   34540:	bge	3485c <__assert_fail@plt+0x22298>
   34544:	mvn	r1, #0
   34548:	ldr	r2, [r5, #8]
   3454c:	str	r1, [r2, r3, lsl #2]
   34550:	add	r3, r3, #1
   34554:	cmp	r4, r3
   34558:	bne	34548 <__assert_fail@plt+0x21f84>
   3455c:	b	3432c <__assert_fail@plt+0x21d68>
   34560:	ldr	r0, [r5, #4]
   34564:	ldr	r3, [r5, #24]
   34568:	add	r3, r4, r3
   3456c:	ldr	r1, [r5]
   34570:	mov	r2, r8
   34574:	add	r1, r1, r3
   34578:	add	r0, r0, r4
   3457c:	bl	12000 <memcpy@plt>
   34580:	b	343fc <__assert_fail@plt+0x21e38>
   34584:	cmn	r3, #3
   34588:	bhi	345b4 <__assert_fail@plt+0x21ff0>
   3458c:	ldr	r2, [r5, #36]	; 0x24
   34590:	ldr	r3, [r5, #48]	; 0x30
   34594:	cmp	r2, r3
   34598:	blt	345e0 <__assert_fail@plt+0x2201c>
   3459c:	ldr	r3, [r5, #4]
   345a0:	strb	fp, [r3, r4]
   345a4:	add	r4, r4, #1
   345a8:	ldr	r3, [r5, #8]
   345ac:	str	fp, [r3, r9, lsl #2]
   345b0:	b	3442c <__assert_fail@plt+0x21e68>
   345b4:	ldr	r3, [r5, #4]
   345b8:	strb	fp, [r3, r4]
   345bc:	add	r4, r4, #1
   345c0:	ldr	r3, [r5, #8]
   345c4:	str	fp, [r3, r9, lsl #2]
   345c8:	cmn	r0, #1
   345cc:	bne	3442c <__assert_fail@plt+0x21e68>
   345d0:	ldrd	r2, [sp, #80]	; 0x50
   345d4:	ldr	r1, [sp, #4]
   345d8:	strd	r2, [r1]
   345dc:	b	3442c <__assert_fail@plt+0x21e68>
   345e0:	ldrd	r2, [sp, #80]	; 0x50
   345e4:	strd	r2, [r5, #16]
   345e8:	str	r4, [r5, #28]
   345ec:	str	r4, [r5, #32]
   345f0:	mov	r0, #0
   345f4:	b	34340 <__assert_fail@plt+0x21d7c>
   345f8:	ldr	lr, [r5, #80]	; 0x50
   345fc:	cmp	lr, #0
   34600:	cmpgt	r2, #0
   34604:	ble	3464c <__assert_fail@plt+0x22088>
   34608:	ldr	r8, [r5]
   3460c:	ldr	ip, [r5, #24]
   34610:	add	ip, r7, ip
   34614:	add	r1, r8, ip
   34618:	add	r0, sp, #16
   3461c:	cmp	lr, r2
   34620:	movge	lr, r2
   34624:	mov	r8, r1
   34628:	ldrb	ip, [r1], #1
   3462c:	ldrb	ip, [r3, ip]
   34630:	strb	ip, [r0], #1
   34634:	sub	ip, r1, r8
   34638:	cmp	lr, ip
   3463c:	bgt	34628 <__assert_fail@plt+0x22064>
   34640:	add	r3, sp, #16
   34644:	str	r3, [sp, #4]
   34648:	b	344b4 <__assert_fail@plt+0x21ef0>
   3464c:	add	r3, sp, #16
   34650:	str	r3, [sp, #4]
   34654:	b	344b4 <__assert_fail@plt+0x21ef0>
   34658:	cmn	r0, #1
   3465c:	beq	34788 <__assert_fail@plt+0x221c4>
   34660:	mov	r6, r4
   34664:	add	r3, r4, r0
   34668:	str	r3, [sp, #4]
   3466c:	ldr	r0, [r5, #36]	; 0x24
   34670:	cmp	r3, r0
   34674:	bls	34684 <__assert_fail@plt+0x220c0>
   34678:	ldrd	r2, [sp, #80]	; 0x50
   3467c:	strd	r2, [r5, #16]
   34680:	b	34334 <__assert_fail@plt+0x21d70>
   34684:	ldr	r3, [r5, #12]
   34688:	cmp	r3, #0
   3468c:	beq	3476c <__assert_fail@plt+0x221a8>
   34690:	ldrb	r3, [r5, #76]	; 0x4c
   34694:	cmp	r3, #0
   34698:	bne	346c0 <__assert_fail@plt+0x220fc>
   3469c:	cmp	r6, #0
   346a0:	beq	346b8 <__assert_fail@plt+0x220f4>
   346a4:	ldr	r2, [r5, #12]
   346a8:	str	r3, [r2, r3, lsl #2]
   346ac:	add	r3, r3, #1
   346b0:	cmp	r6, r3
   346b4:	bne	346a4 <__assert_fail@plt+0x220e0>
   346b8:	mov	r3, #1
   346bc:	strb	r3, [r5, #76]	; 0x4c
   346c0:	ldr	r0, [r5, #4]
   346c4:	mov	r2, sl
   346c8:	add	r1, sp, #16
   346cc:	add	r0, r0, r6
   346d0:	bl	12000 <memcpy@plt>
   346d4:	lsl	r3, r6, #2
   346d8:	ldr	r2, [r5, #8]
   346dc:	str	r9, [r2, r6, lsl #2]
   346e0:	ldr	r2, [r5, #12]
   346e4:	str	r7, [r2, r6, lsl #2]
   346e8:	cmp	sl, #1
   346ec:	bls	3472c <__assert_fail@plt+0x22168>
   346f0:	add	r3, r3, #4
   346f4:	mov	r2, #1
   346f8:	mvn	r0, #0
   346fc:	cmp	r2, r8
   34700:	movcc	r1, r2
   34704:	movcs	r1, fp
   34708:	ldr	ip, [r5, #12]
   3470c:	add	r1, r7, r1
   34710:	str	r1, [ip, r3]
   34714:	ldr	r1, [r5, #8]
   34718:	str	r0, [r1, r3]
   3471c:	add	r2, r2, #1
   34720:	add	r3, r3, #4
   34724:	cmp	sl, r2
   34728:	bne	346fc <__assert_fail@plt+0x22138>
   3472c:	sub	sl, sl, r8
   34730:	ldr	r6, [r5, #48]	; 0x30
   34734:	add	r6, sl, r6
   34738:	str	r6, [r5, #48]	; 0x30
   3473c:	ldr	r3, [r5, #52]	; 0x34
   34740:	cmp	r3, r7
   34744:	ble	34754 <__assert_fail@plt+0x22190>
   34748:	ldr	r3, [r5, #56]	; 0x38
   3474c:	add	sl, r3, sl
   34750:	str	sl, [r5, #56]	; 0x38
   34754:	ldr	r3, [r5, #36]	; 0x24
   34758:	cmp	r6, r3
   3475c:	movge	r6, r3
   34760:	ldr	r4, [sp, #4]
   34764:	add	r7, r7, r8
   34768:	b	3432c <__assert_fail@plt+0x21d68>
   3476c:	lsl	r0, r0, #2
   34770:	bl	32148 <__assert_fail@plt+0x1fb84>
   34774:	str	r0, [r5, #12]
   34778:	cmp	r0, #0
   3477c:	moveq	r0, #12
   34780:	bne	34690 <__assert_fail@plt+0x220cc>
   34784:	b	34340 <__assert_fail@plt+0x21d7c>
   34788:	ldr	r0, [r5, #4]
   3478c:	mov	r2, r8
   34790:	ldr	r1, [sp, #4]
   34794:	add	r0, r0, r4
   34798:	bl	12000 <memcpy@plt>
   3479c:	b	3451c <__assert_fail@plt+0x21f58>
   347a0:	ldr	r0, [r5, #4]
   347a4:	mov	r2, r8
   347a8:	ldr	r1, [sp, #4]
   347ac:	add	r0, r0, r4
   347b0:	bl	12000 <memcpy@plt>
   347b4:	b	3451c <__assert_fail@plt+0x21f58>
   347b8:	lsl	r2, r4, #2
   347bc:	mov	r3, r7
   347c0:	add	r0, r8, r7
   347c4:	ldr	r1, [r5, #12]
   347c8:	str	r3, [r1, r2]
   347cc:	add	r2, r2, #4
   347d0:	add	r3, r3, #1
   347d4:	cmp	r3, r0
   347d8:	bne	347c4 <__assert_fail@plt+0x22200>
   347dc:	b	34528 <__assert_fail@plt+0x21f64>
   347e0:	cmn	fp, #3
   347e4:	bhi	347f8 <__assert_fail@plt+0x22234>
   347e8:	ldr	r2, [r5, #36]	; 0x24
   347ec:	ldr	r3, [r5, #48]	; 0x30
   347f0:	cmp	r2, r3
   347f4:	blt	34850 <__assert_fail@plt+0x2228c>
   347f8:	ldr	r3, [r5]
   347fc:	ldr	r2, [r5, #24]
   34800:	add	r3, r3, r7
   34804:	ldrb	r3, [r3, r2]
   34808:	ldr	r2, [r5, #64]	; 0x40
   3480c:	cmp	r2, #0
   34810:	ldrbne	r3, [r2, r3]
   34814:	mov	r1, r4
   34818:	ldr	r2, [r5, #4]
   3481c:	strb	r3, [r2, r4]
   34820:	ldrb	r2, [r5, #76]	; 0x4c
   34824:	cmp	r2, #0
   34828:	ldrne	r2, [r5, #12]
   3482c:	strne	r7, [r2, r4, lsl #2]
   34830:	add	r7, r7, #1
   34834:	add	r4, r4, #1
   34838:	ldr	r2, [r5, #8]
   3483c:	str	r3, [r2, r1, lsl #2]
   34840:	cmn	r8, #1
   34844:	ldrdeq	r2, [sp, #80]	; 0x50
   34848:	strdeq	r2, [r5, #16]
   3484c:	b	3432c <__assert_fail@plt+0x21d68>
   34850:	ldrd	r2, [sp, #80]	; 0x50
   34854:	strd	r2, [r5, #16]
   34858:	b	34334 <__assert_fail@plt+0x21d70>
   3485c:	mov	r4, r3
   34860:	b	3432c <__assert_fail@plt+0x21d68>
   34864:	ldr	r3, [r1, #4]
   34868:	str	r3, [r0, #4]
   3486c:	cmp	r3, #0
   34870:	ble	348d4 <__assert_fail@plt+0x22310>
   34874:	strd	r4, [sp, #-16]!
   34878:	str	r6, [sp, #8]
   3487c:	str	lr, [sp, #12]
   34880:	mov	r5, r1
   34884:	mov	r4, r0
   34888:	str	r3, [r0]
   3488c:	lsl	r0, r3, #2
   34890:	bl	32148 <__assert_fail@plt+0x1fb84>
   34894:	str	r0, [r4, #8]
   34898:	cmp	r0, #0
   3489c:	moveq	r3, #0
   348a0:	streq	r3, [r4, #4]
   348a4:	streq	r3, [r4]
   348a8:	moveq	r0, #12
   348ac:	beq	348c4 <__assert_fail@plt+0x22300>
   348b0:	ldr	r2, [r5, #4]
   348b4:	lsl	r2, r2, #2
   348b8:	ldr	r1, [r5, #8]
   348bc:	bl	12000 <memcpy@plt>
   348c0:	mov	r0, #0
   348c4:	ldrd	r4, [sp]
   348c8:	ldr	r6, [sp, #8]
   348cc:	add	sp, sp, #12
   348d0:	pop	{pc}		; (ldr pc, [sp], #4)
   348d4:	mov	r3, #0
   348d8:	str	r3, [r0]
   348dc:	str	r3, [r0, #4]
   348e0:	str	r3, [r0, #8]
   348e4:	mov	r0, r3
   348e8:	bx	lr
   348ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   348f0:	strd	r6, [sp, #8]
   348f4:	strd	r8, [sp, #16]
   348f8:	str	sl, [sp, #24]
   348fc:	str	lr, [sp, #28]
   34900:	mov	r5, r0
   34904:	mov	r4, r2
   34908:	subs	r6, r1, #0
   3490c:	beq	34928 <__assert_fail@plt+0x22364>
   34910:	ldr	r0, [r6, #4]
   34914:	cmp	r2, #0
   34918:	cmpne	r0, #0
   3491c:	bgt	34964 <__assert_fail@plt+0x223a0>
   34920:	cmp	r0, #0
   34924:	bgt	34970 <__assert_fail@plt+0x223ac>
   34928:	cmp	r4, #0
   3492c:	beq	3493c <__assert_fail@plt+0x22378>
   34930:	ldr	r3, [r4, #4]
   34934:	cmp	r3, #0
   34938:	bgt	349ac <__assert_fail@plt+0x223e8>
   3493c:	mov	r0, #0
   34940:	str	r0, [r5]
   34944:	str	r0, [r5, #4]
   34948:	str	r0, [r5, #8]
   3494c:	ldrd	r4, [sp]
   34950:	ldrd	r6, [sp, #8]
   34954:	ldrd	r8, [sp, #16]
   34958:	ldr	sl, [sp, #24]
   3495c:	add	sp, sp, #28
   34960:	pop	{pc}		; (ldr pc, [sp], #4)
   34964:	ldr	r3, [r2, #4]
   34968:	cmp	r3, #0
   3496c:	bgt	34980 <__assert_fail@plt+0x223bc>
   34970:	mov	r1, r6
   34974:	mov	r0, r5
   34978:	bl	34864 <__assert_fail@plt+0x222a0>
   3497c:	b	3494c <__assert_fail@plt+0x22388>
   34980:	add	r0, r0, r3
   34984:	str	r0, [r5]
   34988:	lsl	r0, r0, #2
   3498c:	bl	32148 <__assert_fail@plt+0x1fb84>
   34990:	str	r0, [r5, #8]
   34994:	cmp	r0, #0
   34998:	beq	34a88 <__assert_fail@plt+0x224c4>
   3499c:	mov	r3, #0
   349a0:	mov	r8, r3
   349a4:	mov	r7, r3
   349a8:	b	349cc <__assert_fail@plt+0x22408>
   349ac:	mov	r1, r4
   349b0:	mov	r0, r5
   349b4:	bl	34864 <__assert_fail@plt+0x222a0>
   349b8:	b	3494c <__assert_fail@plt+0x22388>
   349bc:	add	r8, r8, #1
   349c0:	ldr	r2, [r5, #8]
   349c4:	str	r1, [r2, r3, lsl #2]
   349c8:	add	r3, r3, #1
   349cc:	mov	r9, r3
   349d0:	ldr	r2, [r6, #4]
   349d4:	cmp	r2, r7
   349d8:	ble	34a44 <__assert_fail@plt+0x22480>
   349dc:	ldr	r1, [r4, #4]
   349e0:	cmp	r1, r8
   349e4:	ble	34a18 <__assert_fail@plt+0x22454>
   349e8:	ldr	r2, [r6, #8]
   349ec:	ldr	r2, [r2, r7, lsl #2]
   349f0:	ldr	r1, [r4, #8]
   349f4:	ldr	r1, [r1, r8, lsl #2]
   349f8:	cmp	r2, r1
   349fc:	bgt	349bc <__assert_fail@plt+0x223f8>
   34a00:	cmp	r2, r1
   34a04:	addeq	r8, r8, #1
   34a08:	add	r7, r7, #1
   34a0c:	ldr	r1, [r5, #8]
   34a10:	str	r2, [r1, r3, lsl #2]
   34a14:	b	349c8 <__assert_fail@plt+0x22404>
   34a18:	ldr	r0, [r5, #8]
   34a1c:	sub	r2, r2, r7
   34a20:	ldr	r1, [r6, #8]
   34a24:	lsl	r2, r2, #2
   34a28:	add	r1, r1, r7, lsl #2
   34a2c:	add	r0, r0, r3, lsl #2
   34a30:	bl	12000 <memcpy@plt>
   34a34:	ldr	r3, [r6, #4]
   34a38:	sub	r7, r3, r7
   34a3c:	add	r9, r9, r7
   34a40:	b	34a50 <__assert_fail@plt+0x2248c>
   34a44:	ldr	r2, [r4, #4]
   34a48:	cmp	r2, r8
   34a4c:	bgt	34a5c <__assert_fail@plt+0x22498>
   34a50:	str	r9, [r5, #4]
   34a54:	mov	r0, #0
   34a58:	b	3494c <__assert_fail@plt+0x22388>
   34a5c:	ldr	r0, [r5, #8]
   34a60:	sub	r2, r2, r8
   34a64:	ldr	r1, [r4, #8]
   34a68:	lsl	r2, r2, #2
   34a6c:	add	r1, r1, r8, lsl #2
   34a70:	add	r0, r0, r3, lsl #2
   34a74:	bl	12000 <memcpy@plt>
   34a78:	ldr	r3, [r4, #4]
   34a7c:	sub	r8, r3, r8
   34a80:	add	r9, r9, r8
   34a84:	b	34a50 <__assert_fail@plt+0x2248c>
   34a88:	mov	r0, #12
   34a8c:	b	3494c <__assert_fail@plt+0x22388>
   34a90:	ldr	r3, [r1, #4]
   34a94:	cmp	r3, #0
   34a98:	beq	34c54 <__assert_fail@plt+0x22690>
   34a9c:	ldr	ip, [r2, #4]
   34aa0:	cmp	ip, #0
   34aa4:	beq	34c50 <__assert_fail@plt+0x2268c>
   34aa8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34aac:	strd	r6, [sp, #8]
   34ab0:	str	r8, [sp, #16]
   34ab4:	str	lr, [sp, #20]
   34ab8:	mov	r6, r2
   34abc:	mov	r5, r1
   34ac0:	mov	r7, r0
   34ac4:	add	r3, r3, ip
   34ac8:	ldr	r4, [r0]
   34acc:	ldr	r2, [r0, #4]
   34ad0:	add	r2, r3, r2
   34ad4:	cmp	r2, r4
   34ad8:	bgt	34b00 <__assert_fail@plt+0x2253c>
   34adc:	ldr	r3, [r7, #4]
   34ae0:	ldr	r4, [r5, #4]
   34ae4:	ldr	r2, [r6, #4]
   34ae8:	add	r1, r3, r4
   34aec:	add	r1, r1, r2
   34af0:	sub	r4, r4, #1
   34af4:	sub	r2, r2, #1
   34af8:	sub	r3, r3, #1
   34afc:	b	34b8c <__assert_fail@plt+0x225c8>
   34b00:	add	r4, r3, r4
   34b04:	lsl	r1, r4, #2
   34b08:	ldr	r0, [r0, #8]
   34b0c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   34b10:	cmp	r0, #0
   34b14:	beq	34c5c <__assert_fail@plt+0x22698>
   34b18:	str	r0, [r7, #8]
   34b1c:	str	r4, [r7]
   34b20:	b	34adc <__assert_fail@plt+0x22518>
   34b24:	cmp	r3, #0
   34b28:	blt	34b64 <__assert_fail@plt+0x225a0>
   34b2c:	ldr	r8, [r7, #8]
   34b30:	add	lr, r8, r3, lsl #2
   34b34:	ldr	r0, [r8, r3, lsl #2]
   34b38:	cmp	ip, r0
   34b3c:	bge	34b58 <__assert_fail@plt+0x22594>
   34b40:	sub	r3, r3, #1
   34b44:	cmn	r3, #1
   34b48:	beq	34b64 <__assert_fail@plt+0x225a0>
   34b4c:	ldr	r0, [lr, #-4]!
   34b50:	cmp	ip, r0
   34b54:	blt	34b40 <__assert_fail@plt+0x2257c>
   34b58:	ldr	r0, [r8, r3, lsl #2]
   34b5c:	cmp	ip, r0
   34b60:	beq	34b70 <__assert_fail@plt+0x225ac>
   34b64:	sub	r1, r1, #1
   34b68:	ldr	r0, [r7, #8]
   34b6c:	str	ip, [r0, r1, lsl #2]
   34b70:	subs	r4, r4, #1
   34b74:	bmi	34bb4 <__assert_fail@plt+0x225f0>
   34b78:	subs	r2, r2, #1
   34b7c:	bpl	34b8c <__assert_fail@plt+0x225c8>
   34b80:	b	34bb4 <__assert_fail@plt+0x225f0>
   34b84:	subs	r4, r4, #1
   34b88:	bmi	34bb4 <__assert_fail@plt+0x225f0>
   34b8c:	ldr	r0, [r5, #8]
   34b90:	ldr	ip, [r0, r4, lsl #2]
   34b94:	ldr	r0, [r6, #8]
   34b98:	ldr	r0, [r0, r2, lsl #2]
   34b9c:	cmp	ip, r0
   34ba0:	beq	34b24 <__assert_fail@plt+0x22560>
   34ba4:	cmp	ip, r0
   34ba8:	bge	34b84 <__assert_fail@plt+0x225c0>
   34bac:	subs	r2, r2, #1
   34bb0:	bpl	34b8c <__assert_fail@plt+0x225c8>
   34bb4:	ldr	r3, [r7, #4]
   34bb8:	sub	r0, r3, #1
   34bbc:	ldr	r2, [r5, #4]
   34bc0:	add	r2, r3, r2
   34bc4:	ldr	ip, [r6, #4]
   34bc8:	add	r2, r2, ip
   34bcc:	sub	r4, r2, #1
   34bd0:	sub	r2, r2, r1
   34bd4:	add	r3, r3, r2
   34bd8:	str	r3, [r7, #4]
   34bdc:	cmp	r0, #0
   34be0:	cmpge	r2, #0
   34be4:	bgt	34c24 <__assert_fail@plt+0x22660>
   34be8:	ldr	r0, [r7, #8]
   34bec:	lsl	r2, r2, #2
   34bf0:	add	r1, r0, r1, lsl #2
   34bf4:	bl	12000 <memcpy@plt>
   34bf8:	mov	r3, #0
   34bfc:	mov	r0, r3
   34c00:	ldrd	r4, [sp]
   34c04:	ldrd	r6, [sp, #8]
   34c08:	ldr	r8, [sp, #16]
   34c0c:	add	sp, sp, #20
   34c10:	pop	{pc}		; (ldr pc, [sp], #4)
   34c14:	add	lr, r0, r2
   34c18:	str	ip, [r3, lr, lsl #2]
   34c1c:	subs	r0, r0, #1
   34c20:	bmi	34be8 <__assert_fail@plt+0x22624>
   34c24:	ldr	r3, [r7, #8]
   34c28:	ldr	lr, [r3, r4, lsl #2]
   34c2c:	ldr	ip, [r3, r0, lsl #2]
   34c30:	cmp	lr, ip
   34c34:	ble	34c14 <__assert_fail@plt+0x22650>
   34c38:	sub	r4, r4, #1
   34c3c:	add	ip, r0, r2
   34c40:	str	lr, [r3, ip, lsl #2]
   34c44:	subs	r2, r2, #1
   34c48:	bne	34c24 <__assert_fail@plt+0x22660>
   34c4c:	b	34be8 <__assert_fail@plt+0x22624>
   34c50:	mov	r3, ip
   34c54:	mov	r0, r3
   34c58:	bx	lr
   34c5c:	mov	r3, #12
   34c60:	b	34bfc <__assert_fail@plt+0x22638>
   34c64:	strd	r4, [sp, #-16]!
   34c68:	str	r6, [sp, #8]
   34c6c:	str	lr, [sp, #12]
   34c70:	mov	r5, r0
   34c74:	ldr	r6, [r0, #36]	; 0x24
   34c78:	ldr	r3, [r0, #48]	; 0x30
   34c7c:	cmp	r6, r3
   34c80:	movge	r6, r3
   34c84:	ldr	r4, [r0, #28]
   34c88:	cmp	r6, r4
   34c8c:	ble	34ce4 <__assert_fail@plt+0x22720>
   34c90:	bl	12270 <__ctype_toupper_loc@plt>
   34c94:	ldr	r3, [r5]
   34c98:	ldr	r2, [r5, #24]
   34c9c:	add	r3, r3, r4
   34ca0:	ldrb	r3, [r3, r2]
   34ca4:	ldr	r2, [r5, #64]	; 0x40
   34ca8:	cmp	r2, #0
   34cac:	ldrbne	r3, [r2, r3]
   34cb0:	ldr	r2, [r5, #4]
   34cb4:	ldr	r1, [r0]
   34cb8:	ldr	r3, [r1, r3, lsl #2]
   34cbc:	strb	r3, [r2, r4]
   34cc0:	add	r4, r4, #1
   34cc4:	cmp	r6, r4
   34cc8:	bne	34c94 <__assert_fail@plt+0x226d0>
   34ccc:	str	r6, [r5, #28]
   34cd0:	str	r6, [r5, #32]
   34cd4:	ldrd	r4, [sp]
   34cd8:	ldr	r6, [sp, #8]
   34cdc:	add	sp, sp, #12
   34ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   34ce4:	mov	r6, r4
   34ce8:	b	34ccc <__assert_fail@plt+0x22708>
   34cec:	strd	r4, [sp, #-16]!
   34cf0:	str	r6, [sp, #8]
   34cf4:	str	lr, [sp, #12]
   34cf8:	ldr	r3, [r0, #36]	; 0x24
   34cfc:	cmn	r3, #-536870910	; 0xe0000002
   34d00:	bhi	34dc8 <__assert_fail@plt+0x22804>
   34d04:	mov	r4, r0
   34d08:	lsl	r3, r3, #1
   34d0c:	ldr	r2, [r0, #48]	; 0x30
   34d10:	cmp	r3, r2
   34d14:	movge	r3, r2
   34d18:	cmp	r3, r1
   34d1c:	movge	r1, r3
   34d20:	bl	33a7c <__assert_fail@plt+0x214b8>
   34d24:	subs	r5, r0, #0
   34d28:	bne	34d78 <__assert_fail@plt+0x227b4>
   34d2c:	ldr	r0, [r4, #100]	; 0x64
   34d30:	cmp	r0, #0
   34d34:	beq	34d54 <__assert_fail@plt+0x22790>
   34d38:	ldr	r1, [r4, #36]	; 0x24
   34d3c:	add	r1, r1, #1
   34d40:	lsl	r1, r1, #2
   34d44:	bl	32ce0 <__assert_fail@plt+0x2071c>
   34d48:	cmp	r0, #0
   34d4c:	beq	34dd0 <__assert_fail@plt+0x2280c>
   34d50:	str	r0, [r4, #100]	; 0x64
   34d54:	ldrb	r3, [r4, #72]	; 0x48
   34d58:	cmp	r3, #0
   34d5c:	beq	34d98 <__assert_fail@plt+0x227d4>
   34d60:	ldr	r3, [r4, #80]	; 0x50
   34d64:	cmp	r3, #1
   34d68:	ble	34d8c <__assert_fail@plt+0x227c8>
   34d6c:	mov	r0, r4
   34d70:	bl	342e0 <__assert_fail@plt+0x21d1c>
   34d74:	mov	r5, r0
   34d78:	mov	r0, r5
   34d7c:	ldrd	r4, [sp]
   34d80:	ldr	r6, [sp, #8]
   34d84:	add	sp, sp, #12
   34d88:	pop	{pc}		; (ldr pc, [sp], #4)
   34d8c:	mov	r0, r4
   34d90:	bl	34c64 <__assert_fail@plt+0x226a0>
   34d94:	b	34d78 <__assert_fail@plt+0x227b4>
   34d98:	ldr	r3, [r4, #80]	; 0x50
   34d9c:	cmp	r3, #1
   34da0:	bgt	34dbc <__assert_fail@plt+0x227f8>
   34da4:	ldr	r3, [r4, #64]	; 0x40
   34da8:	cmp	r3, #0
   34dac:	beq	34d78 <__assert_fail@plt+0x227b4>
   34db0:	mov	r0, r4
   34db4:	bl	32e04 <__assert_fail@plt+0x20840>
   34db8:	b	34d78 <__assert_fail@plt+0x227b4>
   34dbc:	mov	r0, r4
   34dc0:	bl	34148 <__assert_fail@plt+0x21b84>
   34dc4:	b	34d78 <__assert_fail@plt+0x227b4>
   34dc8:	mov	r5, #12
   34dcc:	b	34d78 <__assert_fail@plt+0x227b4>
   34dd0:	mov	r5, #12
   34dd4:	b	34d78 <__assert_fail@plt+0x227b4>
   34dd8:	ldr	r3, [r1, #40]	; 0x28
   34ddc:	ldr	ip, [r1, #56]	; 0x38
   34de0:	cmp	ip, r3
   34de4:	ble	3507c <__assert_fail@plt+0x22ab8>
   34de8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34dec:	strd	r6, [sp, #8]
   34df0:	str	r8, [sp, #16]
   34df4:	str	lr, [sp, #20]
   34df8:	sub	sp, sp, #8
   34dfc:	ldr	ip, [r1, #4]
   34e00:	ldrb	r6, [ip, r3]
   34e04:	strb	r6, [r0]
   34e08:	ldrb	r3, [r0, #6]
   34e0c:	and	r3, r3, #191	; 0xbf
   34e10:	bfc	r3, #5, #1
   34e14:	strb	r3, [r0, #6]
   34e18:	ldr	r3, [r1, #80]	; 0x50
   34e1c:	cmp	r3, #1
   34e20:	ble	34e44 <__assert_fail@plt+0x22880>
   34e24:	ldr	ip, [r1, #40]	; 0x28
   34e28:	ldr	lr, [r1, #28]
   34e2c:	cmp	ip, lr
   34e30:	beq	34e44 <__assert_fail@plt+0x22880>
   34e34:	ldr	lr, [r1, #8]
   34e38:	ldr	ip, [lr, ip, lsl #2]
   34e3c:	cmn	ip, #1
   34e40:	beq	3508c <__assert_fail@plt+0x22ac8>
   34e44:	mov	r7, r2
   34e48:	mov	r4, r1
   34e4c:	mov	r5, r0
   34e50:	cmp	r6, #92	; 0x5c
   34e54:	beq	350a8 <__assert_fail@plt+0x22ae4>
   34e58:	mov	r3, #1
   34e5c:	strb	r3, [r0, #4]
   34e60:	ldr	r3, [r1, #80]	; 0x50
   34e64:	cmp	r3, #1
   34e68:	ble	3558c <__assert_fail@plt+0x22fc8>
   34e6c:	ldr	r1, [r1, #40]	; 0x28
   34e70:	mov	r0, r4
   34e74:	bl	32de8 <__assert_fail@plt+0x20824>
   34e78:	mov	r8, r0
   34e7c:	bl	12324 <iswalnum@plt>
   34e80:	adds	r0, r0, #0
   34e84:	movne	r0, #1
   34e88:	cmp	r8, #95	; 0x5f
   34e8c:	orreq	r0, r0, #1
   34e90:	ldrb	r3, [r5, #6]
   34e94:	bfi	r3, r0, #6, #1
   34e98:	strb	r3, [r5, #6]
   34e9c:	sub	r3, r6, #10
   34ea0:	cmp	r3, #115	; 0x73
   34ea4:	ldrls	pc, [pc, r3, lsl #2]
   34ea8:	b	357a4 <__assert_fail@plt+0x231e0>
   34eac:			; <UNDEFINED> instruction: 0x000355b8
   34eb0:	andeq	r5, r3, r4, lsr #15
   34eb4:	andeq	r5, r3, r4, lsr #15
   34eb8:	andeq	r5, r3, r4, lsr #15
   34ebc:	andeq	r5, r3, r4, lsr #15
   34ec0:	andeq	r5, r3, r4, lsr #15
   34ec4:	andeq	r5, r3, r4, lsr #15
   34ec8:	andeq	r5, r3, r4, lsr #15
   34ecc:	andeq	r5, r3, r4, lsr #15
   34ed0:	andeq	r5, r3, r4, lsr #15
   34ed4:	andeq	r5, r3, r4, lsr #15
   34ed8:	andeq	r5, r3, r4, lsr #15
   34edc:	andeq	r5, r3, r4, lsr #15
   34ee0:	andeq	r5, r3, r4, lsr #15
   34ee4:	andeq	r5, r3, r4, lsr #15
   34ee8:	andeq	r5, r3, r4, lsr #15
   34eec:	andeq	r5, r3, r4, lsr #15
   34ef0:	andeq	r5, r3, r4, lsr #15
   34ef4:	andeq	r5, r3, r4, lsr #15
   34ef8:	andeq	r5, r3, r4, lsr #15
   34efc:	andeq	r5, r3, r4, lsr #15
   34f00:	andeq	r5, r3, r4, lsr #15
   34f04:	andeq	r5, r3, r4, lsr #15
   34f08:	andeq	r5, r3, r4, lsr #15
   34f0c:	andeq	r5, r3, r4, lsr #15
   34f10:	andeq	r5, r3, r4, lsr #15
   34f14:	andeq	r5, r3, ip, lsr #14
   34f18:	andeq	r5, r3, r4, lsr #15
   34f1c:	andeq	r5, r3, r4, lsr #15
   34f20:	andeq	r5, r3, r4, lsr #15
   34f24:	andeq	r5, r3, r8, ror r6
   34f28:	muleq	r3, r4, r6
   34f2c:	strdeq	r5, [r3], -r0
   34f30:	andeq	r5, r3, r0, lsl #12
   34f34:	andeq	r5, r3, r4, lsr #15
   34f38:	andeq	r5, r3, r4, lsr #15
   34f3c:	andeq	r5, r3, r0, asr #13
   34f40:	andeq	r5, r3, r4, lsr #15
   34f44:	andeq	r5, r3, r4, lsr #15
   34f48:	andeq	r5, r3, r4, lsr #15
   34f4c:	andeq	r5, r3, r4, lsr #15
   34f50:	andeq	r5, r3, r4, lsr #15
   34f54:	andeq	r5, r3, r4, lsr #15
   34f58:	andeq	r5, r3, r4, lsr #15
   34f5c:	andeq	r5, r3, r4, lsr #15
   34f60:	andeq	r5, r3, r4, lsr #15
   34f64:	andeq	r5, r3, r4, lsr #15
   34f68:	andeq	r5, r3, r4, lsr #15
   34f6c:	andeq	r5, r3, r4, lsr #15
   34f70:	andeq	r5, r3, r4, lsr #15
   34f74:	andeq	r5, r3, r4, lsr #15
   34f78:	andeq	r5, r3, r4, lsr #15
   34f7c:	andeq	r5, r3, r4, lsr #15
   34f80:	andeq	r5, r3, r0, lsr #12
   34f84:	andeq	r5, r3, r4, lsr #15
   34f88:	andeq	r5, r3, r4, lsr #15
   34f8c:	andeq	r5, r3, r4, lsr #15
   34f90:	andeq	r5, r3, r4, lsr #15
   34f94:	andeq	r5, r3, r4, lsr #15
   34f98:	andeq	r5, r3, r4, lsr #15
   34f9c:	andeq	r5, r3, r4, lsr #15
   34fa0:	andeq	r5, r3, r4, lsr #15
   34fa4:	andeq	r5, r3, r4, lsr #15
   34fa8:	andeq	r5, r3, r4, lsr #15
   34fac:	andeq	r5, r3, r4, lsr #15
   34fb0:	andeq	r5, r3, r4, lsr #15
   34fb4:	andeq	r5, r3, r4, lsr #15
   34fb8:	andeq	r5, r3, r4, lsr #15
   34fbc:	andeq	r5, r3, r4, lsr #15
   34fc0:	andeq	r5, r3, r4, lsr #15
   34fc4:	andeq	r5, r3, r4, lsr #15
   34fc8:	andeq	r5, r3, r4, lsr #15
   34fcc:	andeq	r5, r3, r4, lsr #15
   34fd0:	andeq	r5, r3, r4, lsr #15
   34fd4:	andeq	r5, r3, r4, lsr #15
   34fd8:	andeq	r5, r3, r4, lsr #15
   34fdc:	andeq	r5, r3, r4, lsr #15
   34fe0:	andeq	r5, r3, r4, lsr #15
   34fe4:	andeq	r5, r3, r4, lsr #15
   34fe8:	andeq	r5, r3, r4, lsr #15
   34fec:	andeq	r5, r3, r4, lsr #15
   34ff0:			; <UNDEFINED> instruction: 0x000356b0
   34ff4:	andeq	r5, r3, r4, lsr #15
   34ff8:	andeq	r5, r3, r4, lsr #15
   34ffc:	ldrdeq	r5, [r3], -r0
   35000:	andeq	r5, r3, r4, lsr #15
   35004:	andeq	r5, r3, r4, lsr #15
   35008:	andeq	r5, r3, r4, lsr #15
   3500c:	andeq	r5, r3, r4, lsr #15
   35010:	andeq	r5, r3, r4, lsr #15
   35014:	andeq	r5, r3, r4, lsr #15
   35018:	andeq	r5, r3, r4, lsr #15
   3501c:	andeq	r5, r3, r4, lsr #15
   35020:	andeq	r5, r3, r4, lsr #15
   35024:	andeq	r5, r3, r4, lsr #15
   35028:	andeq	r5, r3, r4, lsr #15
   3502c:	andeq	r5, r3, r4, lsr #15
   35030:	andeq	r5, r3, r4, lsr #15
   35034:	andeq	r5, r3, r4, lsr #15
   35038:	andeq	r5, r3, r4, lsr #15
   3503c:	andeq	r5, r3, r4, lsr #15
   35040:	andeq	r5, r3, r4, lsr #15
   35044:	andeq	r5, r3, r4, lsr #15
   35048:	andeq	r5, r3, r4, lsr #15
   3504c:	andeq	r5, r3, r4, lsr #15
   35050:	andeq	r5, r3, r4, lsr #15
   35054:	andeq	r5, r3, r4, lsr #15
   35058:	andeq	r5, r3, r4, lsr #15
   3505c:	andeq	r5, r3, r4, lsr #15
   35060:	andeq	r5, r3, r4, lsr #15
   35064:	andeq	r5, r3, r4, lsr #15
   35068:	andeq	r5, r3, r4, lsr #15
   3506c:	andeq	r5, r3, r4, lsr #15
   35070:	andeq	r5, r3, r0, asr #12
   35074:	ldrdeq	r5, [r3], -r4
   35078:	andeq	r5, r3, ip, asr r6
   3507c:	mov	r3, #2
   35080:	strb	r3, [r0, #4]
   35084:	mov	r0, #0
   35088:	bx	lr
   3508c:	mov	r3, #1
   35090:	strb	r3, [r0, #4]
   35094:	ldrb	r2, [r0, #6]
   35098:	orr	r2, r2, #32
   3509c:	strb	r2, [r0, #6]
   350a0:	mov	r0, r3
   350a4:	b	350c8 <__assert_fail@plt+0x22b04>
   350a8:	ldr	r1, [r1, #40]	; 0x28
   350ac:	add	r2, r1, #1
   350b0:	ldr	r0, [r4, #48]	; 0x30
   350b4:	cmp	r2, r0
   350b8:	blt	350e0 <__assert_fail@plt+0x22b1c>
   350bc:	mov	r3, #36	; 0x24
   350c0:	strb	r3, [r5, #4]
   350c4:	mov	r0, #1
   350c8:	add	sp, sp, #8
   350cc:	ldrd	r4, [sp]
   350d0:	ldrd	r6, [sp, #8]
   350d4:	ldr	r8, [sp, #16]
   350d8:	add	sp, sp, #20
   350dc:	pop	{pc}		; (ldr pc, [sp], #4)
   350e0:	ldrb	r0, [r4, #75]	; 0x4b
   350e4:	cmp	r0, #0
   350e8:	bne	352ac <__assert_fail@plt+0x22ce8>
   350ec:	ldr	r3, [r4, #4]
   350f0:	ldrb	r6, [r3, r2]
   350f4:	strb	r6, [r5]
   350f8:	mov	r3, #1
   350fc:	strb	r3, [r5, #4]
   35100:	ldr	r3, [r4, #80]	; 0x50
   35104:	cmp	r3, #1
   35108:	ble	35328 <__assert_fail@plt+0x22d64>
   3510c:	ldr	r1, [r4, #40]	; 0x28
   35110:	add	r1, r1, #1
   35114:	mov	r0, r4
   35118:	bl	32de8 <__assert_fail@plt+0x20824>
   3511c:	mov	r4, r0
   35120:	bl	12324 <iswalnum@plt>
   35124:	adds	r0, r0, #0
   35128:	movne	r0, #1
   3512c:	cmp	r4, #95	; 0x5f
   35130:	orreq	r0, r0, #1
   35134:	ldrb	r3, [r5, #6]
   35138:	bfi	r3, r0, #6, #1
   3513c:	strb	r3, [r5, #6]
   35140:	sub	r3, r6, #39	; 0x27
   35144:	cmp	r3, #86	; 0x56
   35148:	ldrls	pc, [pc, r3, lsl #2]
   3514c:	b	3579c <__assert_fail@plt+0x231d8>
   35150:			; <UNDEFINED> instruction: 0x000354b8
   35154:	ldrdeq	r5, [r3], -ip
   35158:	strdeq	r5, [r3], -r8
   3515c:	muleq	r3, ip, r7
   35160:	andeq	r5, r3, r4, lsl r5
   35164:	muleq	r3, ip, r7
   35168:	muleq	r3, ip, r7
   3516c:	muleq	r3, ip, r7
   35170:	muleq	r3, ip, r7
   35174:	muleq	r3, ip, r7
   35178:	andeq	r5, r3, r0, ror r3
   3517c:	andeq	r5, r3, r0, ror r3
   35180:	andeq	r5, r3, r0, ror r3
   35184:	andeq	r5, r3, r0, ror r3
   35188:	andeq	r5, r3, r0, ror r3
   3518c:	andeq	r5, r3, r0, ror r3
   35190:	andeq	r5, r3, r0, ror r3
   35194:	andeq	r5, r3, r0, ror r3
   35198:	andeq	r5, r3, r0, ror r3
   3519c:	muleq	r3, ip, r7
   351a0:	muleq	r3, ip, r7
   351a4:	muleq	r3, r4, r3
   351a8:	muleq	r3, ip, r7
   351ac:			; <UNDEFINED> instruction: 0x000353b8
   351b0:	andeq	r5, r3, r4, lsr r5
   351b4:	muleq	r3, ip, r7
   351b8:	muleq	r3, ip, r7
   351bc:	andeq	r5, r3, r0, lsl #8
   351c0:	muleq	r3, ip, r7
   351c4:	muleq	r3, ip, r7
   351c8:	muleq	r3, ip, r7
   351cc:	muleq	r3, ip, r7
   351d0:	muleq	r3, ip, r7
   351d4:	muleq	r3, ip, r7
   351d8:	muleq	r3, ip, r7
   351dc:	muleq	r3, ip, r7
   351e0:	muleq	r3, ip, r7
   351e4:	muleq	r3, ip, r7
   351e8:	muleq	r3, ip, r7
   351ec:	muleq	r3, ip, r7
   351f0:	muleq	r3, ip, r7
   351f4:	muleq	r3, ip, r7
   351f8:	muleq	r3, ip, r7
   351fc:	muleq	r3, ip, r7
   35200:	andeq	r5, r3, r8, ror r4
   35204:	muleq	r3, ip, r7
   35208:	muleq	r3, ip, r7
   3520c:	muleq	r3, ip, r7
   35210:	andeq	r5, r3, r0, asr #8
   35214:	muleq	r3, ip, r7
   35218:	muleq	r3, ip, r7
   3521c:	muleq	r3, ip, r7
   35220:	muleq	r3, ip, r7
   35224:	muleq	r3, ip, r7
   35228:	muleq	r3, ip, r7
   3522c:	muleq	r3, ip, r7
   35230:	muleq	r3, ip, r7
   35234:	muleq	r3, r4, r4
   35238:	muleq	r3, ip, r7
   3523c:	ldrdeq	r5, [r3], -ip
   35240:	muleq	r3, ip, r7
   35244:	muleq	r3, ip, r7
   35248:	muleq	r3, ip, r7
   3524c:	muleq	r3, ip, r7
   35250:	muleq	r3, ip, r7
   35254:	muleq	r3, ip, r7
   35258:	muleq	r3, ip, r7
   3525c:	muleq	r3, ip, r7
   35260:	muleq	r3, ip, r7
   35264:	muleq	r3, ip, r7
   35268:	muleq	r3, ip, r7
   3526c:	muleq	r3, ip, r7
   35270:	muleq	r3, ip, r7
   35274:	muleq	r3, ip, r7
   35278:	muleq	r3, ip, r7
   3527c:	muleq	r3, ip, r7
   35280:	andeq	r5, r3, ip, asr r4
   35284:	muleq	r3, ip, r7
   35288:	muleq	r3, ip, r7
   3528c:	muleq	r3, ip, r7
   35290:	andeq	r5, r3, r4, lsr #8
   35294:	muleq	r3, ip, r7
   35298:	muleq	r3, ip, r7
   3529c:	muleq	r3, ip, r7
   352a0:	andeq	r5, r3, r4, asr r5
   352a4:	andeq	r5, r3, r4, asr r3
   352a8:	andeq	r5, r3, r0, ror r5
   352ac:	cmp	r3, #1
   352b0:	ble	352e8 <__assert_fail@plt+0x22d24>
   352b4:	ldr	r3, [r4, #8]
   352b8:	lsl	ip, r2, #2
   352bc:	ldr	r0, [r3, r2, lsl #2]
   352c0:	cmn	r0, #1
   352c4:	beq	3531c <__assert_fail@plt+0x22d58>
   352c8:	add	r1, r1, #2
   352cc:	ldr	r0, [r4, #28]
   352d0:	cmp	r0, r1
   352d4:	beq	352e8 <__assert_fail@plt+0x22d24>
   352d8:	add	r3, r3, ip
   352dc:	ldr	r3, [r3, #4]
   352e0:	cmn	r3, #1
   352e4:	beq	3531c <__assert_fail@plt+0x22d58>
   352e8:	ldrb	r3, [r4, #76]	; 0x4c
   352ec:	cmp	r3, #0
   352f0:	beq	357ac <__assert_fail@plt+0x231e8>
   352f4:	ldr	r1, [r4, #12]
   352f8:	ldr	r3, [r4]
   352fc:	ldr	r0, [r1, r2, lsl #2]
   35300:	ldr	r1, [r4, #24]
   35304:	add	r3, r3, r0
   35308:	ldrb	r6, [r3, r1]
   3530c:	bics	r3, r6, #127	; 0x7f
   35310:	ldrne	r3, [r4, #4]
   35314:	ldrbne	r6, [r3, r2]
   35318:	b	350f4 <__assert_fail@plt+0x22b30>
   3531c:	ldr	r3, [r4, #4]
   35320:	ldrb	r6, [r3, r2]
   35324:	b	350f4 <__assert_fail@plt+0x22b30>
   35328:	bl	12288 <__ctype_b_loc@plt>
   3532c:	ldr	r2, [r0]
   35330:	lsl	r3, r6, #1
   35334:	ldrh	r3, [r2, r3]
   35338:	ubfx	r3, r3, #3, #1
   3533c:	cmp	r6, #95	; 0x5f
   35340:	orreq	r3, r3, #1
   35344:	ldrb	r2, [r5, #6]
   35348:	bfi	r2, r3, #6, #1
   3534c:	strb	r2, [r5, #6]
   35350:	b	35140 <__assert_fail@plt+0x22b7c>
   35354:	tst	r7, #33792	; 0x8400
   35358:	movne	r0, #2
   3535c:	bne	350c8 <__assert_fail@plt+0x22b04>
   35360:	mov	r3, #10
   35364:	strb	r3, [r5, #4]
   35368:	mov	r0, #2
   3536c:	b	350c8 <__assert_fail@plt+0x22b04>
   35370:	tst	r7, #16384	; 0x4000
   35374:	movne	r0, #2
   35378:	bne	350c8 <__assert_fail@plt+0x22b04>
   3537c:	mov	r3, #4
   35380:	strb	r3, [r5, #4]
   35384:	sub	r6, r6, #49	; 0x31
   35388:	str	r6, [r5]
   3538c:	mov	r0, #2
   35390:	b	350c8 <__assert_fail@plt+0x22b04>
   35394:	tst	r7, #524288	; 0x80000
   35398:	movne	r0, #2
   3539c:	bne	350c8 <__assert_fail@plt+0x22b04>
   353a0:	mov	r3, #12
   353a4:	strb	r3, [r5, #4]
   353a8:	mov	r3, #6
   353ac:	str	r3, [r5]
   353b0:	mov	r0, #2
   353b4:	b	350c8 <__assert_fail@plt+0x22b04>
   353b8:	tst	r7, #524288	; 0x80000
   353bc:	movne	r0, #2
   353c0:	bne	350c8 <__assert_fail@plt+0x22b04>
   353c4:	mov	r3, #12
   353c8:	strb	r3, [r5, #4]
   353cc:	mov	r3, #9
   353d0:	str	r3, [r5]
   353d4:	mov	r0, #2
   353d8:	b	350c8 <__assert_fail@plt+0x22b04>
   353dc:	tst	r7, #524288	; 0x80000
   353e0:	movne	r0, #2
   353e4:	bne	350c8 <__assert_fail@plt+0x22b04>
   353e8:	mov	r3, #12
   353ec:	strb	r3, [r5, #4]
   353f0:	mov	r3, #256	; 0x100
   353f4:	str	r3, [r5]
   353f8:	mov	r0, #2
   353fc:	b	350c8 <__assert_fail@plt+0x22b04>
   35400:	tst	r7, #524288	; 0x80000
   35404:	movne	r0, #2
   35408:	bne	350c8 <__assert_fail@plt+0x22b04>
   3540c:	mov	r3, #12
   35410:	strb	r3, [r5, #4]
   35414:	mov	r3, #512	; 0x200
   35418:	str	r3, [r5]
   3541c:	mov	r0, #2
   35420:	b	350c8 <__assert_fail@plt+0x22b04>
   35424:	tst	r7, #524288	; 0x80000
   35428:	movne	r0, #2
   3542c:	bne	350c8 <__assert_fail@plt+0x22b04>
   35430:	mov	r3, #32
   35434:	strb	r3, [r5, #4]
   35438:	mov	r0, #2
   3543c:	b	350c8 <__assert_fail@plt+0x22b04>
   35440:	tst	r7, #524288	; 0x80000
   35444:	movne	r0, #2
   35448:	bne	350c8 <__assert_fail@plt+0x22b04>
   3544c:	mov	r3, #33	; 0x21
   35450:	strb	r3, [r5, #4]
   35454:	mov	r0, #2
   35458:	b	350c8 <__assert_fail@plt+0x22b04>
   3545c:	tst	r7, #524288	; 0x80000
   35460:	movne	r0, #2
   35464:	bne	350c8 <__assert_fail@plt+0x22b04>
   35468:	mov	r3, #34	; 0x22
   3546c:	strb	r3, [r5, #4]
   35470:	mov	r0, #2
   35474:	b	350c8 <__assert_fail@plt+0x22b04>
   35478:	tst	r7, #524288	; 0x80000
   3547c:	movne	r0, #2
   35480:	bne	350c8 <__assert_fail@plt+0x22b04>
   35484:	mov	r3, #35	; 0x23
   35488:	strb	r3, [r5, #4]
   3548c:	mov	r0, #2
   35490:	b	350c8 <__assert_fail@plt+0x22b04>
   35494:	tst	r7, #524288	; 0x80000
   35498:	movne	r0, #2
   3549c:	bne	350c8 <__assert_fail@plt+0x22b04>
   354a0:	mov	r3, #12
   354a4:	strb	r3, [r5, #4]
   354a8:	mov	r3, #64	; 0x40
   354ac:	str	r3, [r5]
   354b0:	mov	r0, #2
   354b4:	b	350c8 <__assert_fail@plt+0x22b04>
   354b8:	tst	r7, #524288	; 0x80000
   354bc:	movne	r0, #2
   354c0:	bne	350c8 <__assert_fail@plt+0x22b04>
   354c4:	mov	r3, #12
   354c8:	strb	r3, [r5, #4]
   354cc:	mov	r3, #128	; 0x80
   354d0:	str	r3, [r5]
   354d4:	mov	r0, #2
   354d8:	b	350c8 <__assert_fail@plt+0x22b04>
   354dc:	tst	r7, #8192	; 0x2000
   354e0:	movne	r0, #2
   354e4:	bne	350c8 <__assert_fail@plt+0x22b04>
   354e8:	mov	r3, #8
   354ec:	strb	r3, [r5, #4]
   354f0:	mov	r0, #2
   354f4:	b	350c8 <__assert_fail@plt+0x22b04>
   354f8:	tst	r7, #8192	; 0x2000
   354fc:	movne	r0, #2
   35500:	bne	350c8 <__assert_fail@plt+0x22b04>
   35504:	mov	r3, #9
   35508:	strb	r3, [r5, #4]
   3550c:	mov	r0, #2
   35510:	b	350c8 <__assert_fail@plt+0x22b04>
   35514:	movw	r2, #1026	; 0x402
   35518:	and	r2, r7, r2
   3551c:	cmp	r2, #2
   35520:	moveq	r3, #18
   35524:	strbeq	r3, [r5, #4]
   35528:	moveq	r0, #2
   3552c:	movne	r0, #2
   35530:	b	350c8 <__assert_fail@plt+0x22b04>
   35534:	movw	r2, #1026	; 0x402
   35538:	and	r2, r7, r2
   3553c:	cmp	r2, #2
   35540:	moveq	r3, #19
   35544:	strbeq	r3, [r5, #4]
   35548:	moveq	r0, #2
   3554c:	movne	r0, #2
   35550:	b	350c8 <__assert_fail@plt+0x22b04>
   35554:	and	r2, r7, #4608	; 0x1200
   35558:	cmp	r2, #512	; 0x200
   3555c:	moveq	r3, #23
   35560:	strbeq	r3, [r5, #4]
   35564:	moveq	r0, #2
   35568:	movne	r0, #2
   3556c:	b	350c8 <__assert_fail@plt+0x22b04>
   35570:	and	r2, r7, #4608	; 0x1200
   35574:	cmp	r2, #512	; 0x200
   35578:	moveq	r3, #24
   3557c:	strbeq	r3, [r5, #4]
   35580:	moveq	r0, #2
   35584:	movne	r0, #2
   35588:	b	350c8 <__assert_fail@plt+0x22b04>
   3558c:	bl	12288 <__ctype_b_loc@plt>
   35590:	ldr	r2, [r0]
   35594:	lsl	r3, r6, #1
   35598:	ldrh	r3, [r2, r3]
   3559c:	ubfx	r3, r3, #3, #1
   355a0:	cmp	r6, #95	; 0x5f
   355a4:	orreq	r3, r3, #1
   355a8:	ldrb	r2, [r5, #6]
   355ac:	bfi	r2, r3, #6, #1
   355b0:	strb	r2, [r5, #6]
   355b4:	b	34e9c <__assert_fail@plt+0x228d8>
   355b8:	tst	r7, #2048	; 0x800
   355bc:	moveq	r0, #1
   355c0:	beq	350c8 <__assert_fail@plt+0x22b04>
   355c4:	mov	r3, #10
   355c8:	strb	r3, [r5, #4]
   355cc:	mov	r0, #1
   355d0:	b	350c8 <__assert_fail@plt+0x22b04>
   355d4:	and	r2, r7, #33792	; 0x8400
   355d8:	cmp	r2, #32768	; 0x8000
   355dc:	moveq	r3, #10
   355e0:	strbeq	r3, [r5, #4]
   355e4:	moveq	r0, #1
   355e8:	movne	r0, #1
   355ec:	b	350c8 <__assert_fail@plt+0x22b04>
   355f0:	mov	r3, #11
   355f4:	strb	r3, [r5, #4]
   355f8:	mov	r0, #1
   355fc:	b	350c8 <__assert_fail@plt+0x22b04>
   35600:	movw	r3, #1026	; 0x402
   35604:	tst	r7, r3
   35608:	movne	r0, #1
   3560c:	bne	350c8 <__assert_fail@plt+0x22b04>
   35610:	mov	r3, #18
   35614:	strb	r3, [r5, #4]
   35618:	mov	r0, #1
   3561c:	b	350c8 <__assert_fail@plt+0x22b04>
   35620:	movw	r3, #1026	; 0x402
   35624:	tst	r7, r3
   35628:	movne	r0, #1
   3562c:	bne	350c8 <__assert_fail@plt+0x22b04>
   35630:	mov	r3, #19
   35634:	strb	r3, [r5, #4]
   35638:	mov	r0, #1
   3563c:	b	350c8 <__assert_fail@plt+0x22b04>
   35640:	and	r2, r7, #4608	; 0x1200
   35644:	cmp	r2, #4608	; 0x1200
   35648:	moveq	r3, #23
   3564c:	strbeq	r3, [r5, #4]
   35650:	moveq	r0, #1
   35654:	movne	r0, #1
   35658:	b	350c8 <__assert_fail@plt+0x22b04>
   3565c:	and	r2, r7, #4608	; 0x1200
   35660:	cmp	r2, #4608	; 0x1200
   35664:	moveq	r3, #24
   35668:	strbeq	r3, [r5, #4]
   3566c:	moveq	r0, #1
   35670:	movne	r0, #1
   35674:	b	350c8 <__assert_fail@plt+0x22b04>
   35678:	tst	r7, #8192	; 0x2000
   3567c:	moveq	r0, #1
   35680:	beq	350c8 <__assert_fail@plt+0x22b04>
   35684:	mov	r3, #8
   35688:	strb	r3, [r5, #4]
   3568c:	mov	r0, #1
   35690:	b	350c8 <__assert_fail@plt+0x22b04>
   35694:	tst	r7, #8192	; 0x2000
   35698:	moveq	r0, #1
   3569c:	beq	350c8 <__assert_fail@plt+0x22b04>
   356a0:	mov	r3, #9
   356a4:	strb	r3, [r5, #4]
   356a8:	mov	r0, #1
   356ac:	b	350c8 <__assert_fail@plt+0x22b04>
   356b0:	mov	r3, #20
   356b4:	strb	r3, [r5, #4]
   356b8:	mov	r0, #1
   356bc:	b	350c8 <__assert_fail@plt+0x22b04>
   356c0:	mov	r3, #5
   356c4:	strb	r3, [r5, #4]
   356c8:	mov	r0, #1
   356cc:	b	350c8 <__assert_fail@plt+0x22b04>
   356d0:	mov	r3, #8
   356d4:	movt	r3, #128	; 0x80
   356d8:	tst	r7, r3
   356dc:	bne	35714 <__assert_fail@plt+0x23150>
   356e0:	ldr	r3, [r4, #40]	; 0x28
   356e4:	cmp	r3, #0
   356e8:	beq	35714 <__assert_fail@plt+0x23150>
   356ec:	ldr	r2, [r4, #4]
   356f0:	add	r3, r2, r3
   356f4:	ldrb	r2, [r3, #-1]
   356f8:	eor	r3, r7, #2048	; 0x800
   356fc:	ubfx	r3, r3, #11, #1
   35700:	cmp	r2, #10
   35704:	orrne	r3, r3, #1
   35708:	cmp	r3, #0
   3570c:	movne	r0, #1
   35710:	bne	350c8 <__assert_fail@plt+0x22b04>
   35714:	mov	r3, #12
   35718:	strb	r3, [r5, #4]
   3571c:	mov	r3, #16
   35720:	str	r3, [r5]
   35724:	mov	r0, #1
   35728:	b	350c8 <__assert_fail@plt+0x22b04>
   3572c:	tst	r7, #8
   35730:	bne	35748 <__assert_fail@plt+0x23184>
   35734:	ldr	r3, [r4, #40]	; 0x28
   35738:	add	r3, r3, #1
   3573c:	ldr	r2, [r4, #48]	; 0x30
   35740:	cmp	r3, r2
   35744:	bne	35760 <__assert_fail@plt+0x2319c>
   35748:	mov	r3, #12
   3574c:	strb	r3, [r5, #4]
   35750:	mov	r3, #32
   35754:	str	r3, [r5]
   35758:	mov	r0, #1
   3575c:	b	350c8 <__assert_fail@plt+0x22b04>
   35760:	str	r3, [r4, #40]	; 0x28
   35764:	mov	r2, r7
   35768:	mov	r1, r4
   3576c:	mov	r0, sp
   35770:	bl	34dd8 <__assert_fail@plt+0x22814>
   35774:	ldr	r3, [r4, #40]	; 0x28
   35778:	sub	r3, r3, #1
   3577c:	str	r3, [r4, #40]	; 0x28
   35780:	ldrb	r3, [sp, #4]
   35784:	sub	r3, r3, #9
   35788:	uxtb	r3, r3
   3578c:	cmp	r3, #1
   35790:	movhi	r0, #1
   35794:	bhi	350c8 <__assert_fail@plt+0x22b04>
   35798:	b	35748 <__assert_fail@plt+0x23184>
   3579c:	mov	r0, #2
   357a0:	b	350c8 <__assert_fail@plt+0x22b04>
   357a4:	mov	r0, #1
   357a8:	b	350c8 <__assert_fail@plt+0x22b04>
   357ac:	ldr	r3, [r4]
   357b0:	ldr	r1, [r4, #24]
   357b4:	add	r2, r3, r2
   357b8:	ldrb	r6, [r2, r1]
   357bc:	b	350f4 <__assert_fail@plt+0x22b30>
   357c0:	str	r4, [sp, #-8]!
   357c4:	str	lr, [sp, #4]
   357c8:	mov	r4, r1
   357cc:	bl	34dd8 <__assert_fail@plt+0x22814>
   357d0:	ldr	r3, [r4, #40]	; 0x28
   357d4:	add	r0, r3, r0
   357d8:	str	r0, [r4, #40]	; 0x28
   357dc:	ldr	r4, [sp]
   357e0:	add	sp, sp, #4
   357e4:	pop	{pc}		; (ldr pc, [sp], #4)
   357e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   357ec:	strd	r6, [sp, #8]
   357f0:	strd	r8, [sp, #16]
   357f4:	str	sl, [sp, #24]
   357f8:	str	lr, [sp, #28]
   357fc:	mov	r6, r0
   35800:	mov	r4, r1
   35804:	mov	r5, r2
   35808:	mvn	r9, #0
   3580c:	movw	r8, #32816	; 0x8030
   35810:	mvn	r7, #1
   35814:	mov	r2, r5
   35818:	mov	r1, r6
   3581c:	mov	r0, r4
   35820:	bl	357c0 <__assert_fail@plt+0x231fc>
   35824:	ldrb	r2, [r4]
   35828:	ldrb	r3, [r4, #4]
   3582c:	cmp	r3, #2
   35830:	beq	35898 <__assert_fail@plt+0x232d4>
   35834:	cmp	r3, #24
   35838:	cmpne	r2, #44	; 0x2c
   3583c:	beq	3589c <__assert_fail@plt+0x232d8>
   35840:	cmp	r3, #1
   35844:	movne	r9, r7
   35848:	bne	35814 <__assert_fail@plt+0x23250>
   3584c:	sub	r3, r2, #48	; 0x30
   35850:	uxtb	r1, r3
   35854:	cmp	r1, #9
   35858:	movhi	r3, #0
   3585c:	movls	r3, #1
   35860:	cmn	r9, #2
   35864:	moveq	r3, #0
   35868:	cmp	r3, #0
   3586c:	moveq	r9, r7
   35870:	beq	35814 <__assert_fail@plt+0x23250>
   35874:	cmn	r9, #1
   35878:	subeq	r9, r2, #48	; 0x30
   3587c:	beq	35814 <__assert_fail@plt+0x23250>
   35880:	add	r9, r9, r9, lsl #2
   35884:	add	r2, r2, r9, lsl #1
   35888:	cmp	r2, r8
   3588c:	movge	r2, r8
   35890:	sub	r9, r2, #48	; 0x30
   35894:	b	35814 <__assert_fail@plt+0x23250>
   35898:	mvn	r9, #1
   3589c:	mov	r0, r9
   358a0:	ldrd	r4, [sp]
   358a4:	ldrd	r6, [sp, #8]
   358a8:	ldrd	r8, [sp, #16]
   358ac:	ldr	sl, [sp, #24]
   358b0:	add	sp, sp, #28
   358b4:	pop	{pc}		; (ldr pc, [sp], #4)
   358b8:	str	r4, [sp, #-8]!
   358bc:	str	lr, [sp, #4]
   358c0:	mov	r4, r0
   358c4:	ldr	r0, [r0]
   358c8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   358cc:	ldr	r0, [r4, #4]
   358d0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   358d4:	ldr	r0, [r4, #8]
   358d8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   358dc:	ldr	r0, [r4, #12]
   358e0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   358e4:	mov	r0, r4
   358e8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   358ec:	ldr	r4, [sp]
   358f0:	add	sp, sp, #4
   358f4:	pop	{pc}		; (ldr pc, [sp], #4)
   358f8:	str	r4, [sp, #-8]!
   358fc:	str	lr, [sp, #4]
   35900:	ldr	r2, [r0, #4]
   35904:	mov	r3, #255	; 0xff
   35908:	movt	r3, #4
   3590c:	and	r3, r3, r2
   35910:	cmp	r3, #6
   35914:	beq	3592c <__assert_fail@plt+0x23368>
   35918:	cmp	r3, #3
   3591c:	beq	35938 <__assert_fail@plt+0x23374>
   35920:	ldr	r4, [sp]
   35924:	add	sp, sp, #4
   35928:	pop	{pc}		; (ldr pc, [sp], #4)
   3592c:	ldr	r0, [r0]
   35930:	bl	358b8 <__assert_fail@plt+0x232f4>
   35934:	b	35920 <__assert_fail@plt+0x2335c>
   35938:	ldr	r0, [r0]
   3593c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35940:	b	35920 <__assert_fail@plt+0x2335c>
   35944:	str	r4, [sp, #-8]!
   35948:	str	lr, [sp, #4]
   3594c:	add	r0, r1, #20
   35950:	bl	358f8 <__assert_fail@plt+0x23334>
   35954:	mov	r0, #0
   35958:	ldr	r4, [sp]
   3595c:	add	sp, sp, #4
   35960:	pop	{pc}		; (ldr pc, [sp], #4)
   35964:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35968:	strd	r6, [sp, #8]
   3596c:	strd	r8, [sp, #16]
   35970:	str	sl, [sp, #24]
   35974:	str	lr, [sp, #28]
   35978:	sub	sp, sp, #8
   3597c:	mov	r4, r0
   35980:	add	r3, sp, #8
   35984:	stmdb	r3, {r1, r2}
   35988:	ldrb	r5, [sp, #4]
   3598c:	ldr	r6, [r0, #4]
   35990:	ldr	r3, [r0, #8]
   35994:	cmp	r3, r6
   35998:	bcs	35a70 <__assert_fail@plt+0x234ac>
   3599c:	ldr	r1, [r4, #8]
   359a0:	ldr	r0, [r4]
   359a4:	lsl	r1, r1, #3
   359a8:	ldrd	r2, [sp]
   359ac:	strd	r2, [r0, r1]
   359b0:	ldr	r2, [r4, #8]
   359b4:	ldr	r3, [r4]
   359b8:	add	r3, r3, r2, lsl #3
   359bc:	ldr	r2, [r3, #4]
   359c0:	bfc	r2, #8, #10
   359c4:	str	r2, [r3, #4]
   359c8:	cmp	r5, #5
   359cc:	beq	35b40 <__assert_fail@plt+0x2357c>
   359d0:	cmp	r5, #6
   359d4:	movne	r5, #0
   359d8:	moveq	r5, #1
   359dc:	ldr	r2, [r4, #8]
   359e0:	ldr	r3, [r4]
   359e4:	add	r3, r3, r2, lsl #3
   359e8:	ldrb	r2, [r3, #6]
   359ec:	bfi	r2, r5, #4, #1
   359f0:	strb	r2, [r3, #6]
   359f4:	ldr	r2, [r4, #8]
   359f8:	ldr	r3, [r4, #12]
   359fc:	mvn	r1, #0
   35a00:	str	r1, [r3, r2, lsl #2]
   35a04:	ldr	r3, [r4, #8]
   35a08:	add	r3, r3, r3, lsl #1
   35a0c:	lsl	r3, r3, #2
   35a10:	ldr	r0, [r4, #20]
   35a14:	add	r1, r0, r3
   35a18:	mov	r2, #0
   35a1c:	str	r2, [r0, r3]
   35a20:	str	r2, [r1, #4]
   35a24:	str	r2, [r1, #8]
   35a28:	ldr	r3, [r4, #8]
   35a2c:	add	r3, r3, r3, lsl #1
   35a30:	lsl	r3, r3, #2
   35a34:	ldr	r0, [r4, #24]
   35a38:	add	r1, r0, r3
   35a3c:	str	r2, [r0, r3]
   35a40:	str	r2, [r1, #4]
   35a44:	str	r2, [r1, #8]
   35a48:	ldr	r0, [r4, #8]
   35a4c:	add	r3, r0, #1
   35a50:	str	r3, [r4, #8]
   35a54:	add	sp, sp, #8
   35a58:	ldrd	r4, [sp]
   35a5c:	ldrd	r6, [sp, #8]
   35a60:	ldrd	r8, [sp, #16]
   35a64:	ldr	sl, [sp, #24]
   35a68:	add	sp, sp, #28
   35a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   35a70:	lsl	r7, r6, #1
   35a74:	movw	r3, #21845	; 0x5555
   35a78:	movt	r3, #5461	; 0x1555
   35a7c:	cmp	r7, r3
   35a80:	bhi	35b54 <__assert_fail@plt+0x23590>
   35a84:	lsl	r1, r6, #4
   35a88:	ldr	r0, [r0]
   35a8c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   35a90:	cmp	r0, #0
   35a94:	beq	35b5c <__assert_fail@plt+0x23598>
   35a98:	str	r0, [r4]
   35a9c:	lsl	r8, r6, #3
   35aa0:	mov	r1, r8
   35aa4:	ldr	r0, [r4, #12]
   35aa8:	bl	32ce0 <__assert_fail@plt+0x2071c>
   35aac:	mov	r9, r0
   35ab0:	mov	r1, r8
   35ab4:	ldr	r0, [r4, #16]
   35ab8:	bl	32ce0 <__assert_fail@plt+0x2071c>
   35abc:	mov	r8, r0
   35ac0:	add	r6, r6, r6, lsl #1
   35ac4:	lsl	r6, r6, #3
   35ac8:	mov	r1, r6
   35acc:	ldr	r0, [r4, #20]
   35ad0:	bl	32ce0 <__assert_fail@plt+0x2071c>
   35ad4:	mov	sl, r0
   35ad8:	mov	r1, r6
   35adc:	ldr	r0, [r4, #24]
   35ae0:	bl	32ce0 <__assert_fail@plt+0x2071c>
   35ae4:	mov	r6, r0
   35ae8:	cmp	r8, #0
   35aec:	cmpne	r9, #0
   35af0:	beq	35b18 <__assert_fail@plt+0x23554>
   35af4:	cmp	r0, #0
   35af8:	cmpne	sl, #0
   35afc:	beq	35b18 <__assert_fail@plt+0x23554>
   35b00:	str	r9, [r4, #12]
   35b04:	str	r8, [r4, #16]
   35b08:	str	sl, [r4, #20]
   35b0c:	str	r0, [r4, #24]
   35b10:	str	r7, [r4, #4]
   35b14:	b	3599c <__assert_fail@plt+0x233d8>
   35b18:	mov	r0, r9
   35b1c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35b20:	mov	r0, r8
   35b24:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35b28:	mov	r0, sl
   35b2c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35b30:	mov	r0, r6
   35b34:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35b38:	mvn	r0, #0
   35b3c:	b	35a54 <__assert_fail@plt+0x23490>
   35b40:	ldr	r3, [r4, #92]	; 0x5c
   35b44:	cmp	r3, #1
   35b48:	movgt	r5, #1
   35b4c:	bgt	359dc <__assert_fail@plt+0x23418>
   35b50:	b	359d0 <__assert_fail@plt+0x2340c>
   35b54:	mvn	r0, #0
   35b58:	b	35a54 <__assert_fail@plt+0x23490>
   35b5c:	mvn	r0, #0
   35b60:	b	35a54 <__assert_fail@plt+0x23490>
   35b64:	ldrb	r3, [r1, #24]
   35b68:	cmp	r3, #16
   35b6c:	bne	35b8c <__assert_fail@plt+0x235c8>
   35b70:	ldr	r3, [r1, #4]
   35b74:	ldr	r2, [r3, #12]
   35b78:	str	r2, [r1, #12]
   35b7c:	ldr	r3, [r3, #28]
   35b80:	str	r3, [r1, #28]
   35b84:	mov	r0, #0
   35b88:	bx	lr
   35b8c:	strd	r4, [sp, #-16]!
   35b90:	str	r6, [sp, #8]
   35b94:	str	lr, [sp, #12]
   35b98:	mov	r4, r1
   35b9c:	mov	r5, r0
   35ba0:	str	r1, [r4, #12]
   35ba4:	add	r3, r1, #20
   35ba8:	ldm	r3, {r1, r2}
   35bac:	bl	35964 <__assert_fail@plt+0x233a0>
   35bb0:	str	r0, [r4, #28]
   35bb4:	cmn	r0, #1
   35bb8:	beq	35bfc <__assert_fail@plt+0x23638>
   35bbc:	ldrb	r3, [r4, #24]
   35bc0:	cmp	r3, #12
   35bc4:	movne	r0, #0
   35bc8:	beq	35bdc <__assert_fail@plt+0x23618>
   35bcc:	ldrd	r4, [sp]
   35bd0:	ldr	r6, [sp, #8]
   35bd4:	add	sp, sp, #12
   35bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   35bdc:	ldr	r3, [r5]
   35be0:	add	r0, r3, r0, lsl #3
   35be4:	ldr	r3, [r0, #4]
   35be8:	ldr	r2, [r4, #20]
   35bec:	bfi	r3, r2, #8, #10
   35bf0:	str	r3, [r0, #4]
   35bf4:	mov	r0, #0
   35bf8:	b	35bcc <__assert_fail@plt+0x23608>
   35bfc:	mov	r0, #12
   35c00:	b	35bcc <__assert_fail@plt+0x23608>
   35c04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35c08:	strd	r6, [sp, #8]
   35c0c:	str	r8, [sp, #16]
   35c10:	str	lr, [sp, #20]
   35c14:	mov	r4, r0
   35c18:	mov	r5, r1
   35c1c:	mov	r7, r2
   35c20:	lsl	r6, r1, #3
   35c24:	ldr	r3, [r0]
   35c28:	add	r3, r3, r6
   35c2c:	ldm	r3, {r1, r2}
   35c30:	bl	35964 <__assert_fail@plt+0x233a0>
   35c34:	cmn	r0, #1
   35c38:	beq	35c94 <__assert_fail@plt+0x236d0>
   35c3c:	lsl	r3, r0, #3
   35c40:	ldr	r2, [r4]
   35c44:	add	r2, r2, r3
   35c48:	ldr	r1, [r2, #4]
   35c4c:	bfi	r1, r7, #8, #10
   35c50:	str	r1, [r2, #4]
   35c54:	ldr	r2, [r4]
   35c58:	add	ip, r2, r3
   35c5c:	add	r2, r2, r6
   35c60:	ldr	r1, [r2, #4]
   35c64:	ldr	r2, [ip, #4]
   35c68:	orr	r1, r2, r1
   35c6c:	ubfx	r1, r1, #8, #10
   35c70:	bfi	r2, r1, #8, #10
   35c74:	str	r2, [ip, #4]
   35c78:	ldr	r2, [r4]
   35c7c:	add	r3, r2, r3
   35c80:	ldrb	r2, [r3, #6]
   35c84:	orr	r2, r2, #4
   35c88:	strb	r2, [r3, #6]
   35c8c:	ldr	r3, [r4, #16]
   35c90:	str	r5, [r3, r0, lsl #2]
   35c94:	ldrd	r4, [sp]
   35c98:	ldrd	r6, [sp, #8]
   35c9c:	ldr	r8, [sp, #16]
   35ca0:	add	sp, sp, #20
   35ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   35ca8:	str	r4, [sp, #-8]!
   35cac:	str	lr, [sp, #4]
   35cb0:	mov	r4, r0
   35cb4:	ldr	r0, [r0, #24]
   35cb8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35cbc:	ldr	r0, [r4, #36]	; 0x24
   35cc0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35cc4:	ldr	r3, [r4, #40]	; 0x28
   35cc8:	add	r2, r4, #4
   35ccc:	cmp	r3, r2
   35cd0:	beq	35ce4 <__assert_fail@plt+0x23720>
   35cd4:	ldr	r0, [r3, #8]
   35cd8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35cdc:	ldr	r0, [r4, #40]	; 0x28
   35ce0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35ce4:	ldr	r0, [r4, #12]
   35ce8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35cec:	ldr	r0, [r4, #48]	; 0x30
   35cf0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35cf4:	ldr	r0, [r4, #44]	; 0x2c
   35cf8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35cfc:	mov	r0, r4
   35d00:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35d04:	ldr	r4, [sp]
   35d08:	add	sp, sp, #4
   35d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   35d10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35d14:	strd	r6, [sp, #8]
   35d18:	strd	r8, [sp, #16]
   35d1c:	strd	sl, [sp, #24]
   35d20:	str	lr, [sp, #32]
   35d24:	sub	sp, sp, #20
   35d28:	ldr	r5, [r2, #4]
   35d2c:	cmp	r5, #0
   35d30:	streq	r5, [r0]
   35d34:	beq	35fd0 <__assert_fail@plt+0x23a0c>
   35d38:	add	r8, r3, r5
   35d3c:	cmp	r5, #0
   35d40:	ble	35d5c <__assert_fail@plt+0x23798>
   35d44:	ldr	ip, [r2, #8]
   35d48:	add	r5, ip, r5, lsl #2
   35d4c:	ldr	lr, [ip], #4
   35d50:	add	r8, r8, lr
   35d54:	cmp	r5, ip
   35d58:	bne	35d4c <__assert_fail@plt+0x23788>
   35d5c:	mov	r4, r3
   35d60:	mov	r7, r2
   35d64:	mov	r9, r1
   35d68:	str	r0, [sp, #12]
   35d6c:	ldr	r3, [r1, #68]	; 0x44
   35d70:	and	r3, r3, r8
   35d74:	add	r3, r3, r3, lsl #1
   35d78:	lsl	r3, r3, #2
   35d7c:	ldr	r2, [r1, #32]
   35d80:	add	r1, r2, r3
   35d84:	ldr	fp, [r2, r3]
   35d88:	cmp	fp, #0
   35d8c:	ble	35de4 <__assert_fail@plt+0x23820>
   35d90:	ldr	sl, [r1, #8]
   35d94:	sub	sl, sl, #4
   35d98:	mov	r6, #0
   35d9c:	b	35dac <__assert_fail@plt+0x237e8>
   35da0:	add	r6, r6, #1
   35da4:	cmp	r6, fp
   35da8:	beq	35de4 <__assert_fail@plt+0x23820>
   35dac:	ldr	r5, [sl, #4]!
   35db0:	ldr	r3, [r5]
   35db4:	cmp	r3, r8
   35db8:	bne	35da0 <__assert_fail@plt+0x237dc>
   35dbc:	ldrb	r3, [r5, #52]	; 0x34
   35dc0:	and	r3, r3, #15
   35dc4:	cmp	r3, r4
   35dc8:	bne	35da0 <__assert_fail@plt+0x237dc>
   35dcc:	mov	r1, r7
   35dd0:	ldr	r0, [r5, #40]	; 0x28
   35dd4:	bl	32e60 <__assert_fail@plt+0x2089c>
   35dd8:	cmp	r0, #0
   35ddc:	beq	35da0 <__assert_fail@plt+0x237dc>
   35de0:	b	35fd0 <__assert_fail@plt+0x23a0c>
   35de4:	mov	r1, #1
   35de8:	mov	r0, #56	; 0x38
   35dec:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   35df0:	subs	r5, r0, #0
   35df4:	beq	35ea8 <__assert_fail@plt+0x238e4>
   35df8:	add	fp, r5, #4
   35dfc:	mov	r1, r7
   35e00:	mov	r0, fp
   35e04:	bl	34864 <__assert_fail@plt+0x222a0>
   35e08:	subs	r6, r0, #0
   35e0c:	bne	35e50 <__assert_fail@plt+0x2388c>
   35e10:	ldrb	r3, [r5, #52]	; 0x34
   35e14:	bfi	r3, r4, #0, #4
   35e18:	strb	r3, [r5, #52]	; 0x34
   35e1c:	str	fp, [r5, #40]	; 0x28
   35e20:	ldr	r3, [r7, #4]
   35e24:	cmp	r3, #0
   35e28:	ble	35fb8 <__assert_fail@plt+0x239f4>
   35e2c:	mov	sl, r6
   35e30:	and	r3, r4, #4
   35e34:	str	r3, [sp, #4]
   35e38:	and	r3, r4, #2
   35e3c:	str	r3, [sp]
   35e40:	and	r3, r4, #1
   35e44:	str	r8, [sp, #8]
   35e48:	mov	r8, r3
   35e4c:	b	35f20 <__assert_fail@plt+0x2395c>
   35e50:	mov	r0, r5
   35e54:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   35e58:	b	35ea8 <__assert_fail@plt+0x238e4>
   35e5c:	ldrb	r3, [r5, #52]	; 0x34
   35e60:	orr	r3, r3, #64	; 0x40
   35e64:	strb	r3, [r5, #52]	; 0x34
   35e68:	b	35f84 <__assert_fail@plt+0x239c0>
   35e6c:	mov	r0, #12
   35e70:	bl	32148 <__assert_fail@plt+0x1fb84>
   35e74:	cmp	r0, #0
   35e78:	beq	35ea0 <__assert_fail@plt+0x238dc>
   35e7c:	str	r0, [r5, #40]	; 0x28
   35e80:	mov	r1, r7
   35e84:	bl	34864 <__assert_fail@plt+0x222a0>
   35e88:	subs	sl, r0, #0
   35e8c:	bne	35ebc <__assert_fail@plt+0x238f8>
   35e90:	ldrb	r3, [r5, #52]	; 0x34
   35e94:	orr	r3, r3, #128	; 0x80
   35e98:	strb	r3, [r5, #52]	; 0x34
   35e9c:	b	35f98 <__assert_fail@plt+0x239d4>
   35ea0:	mov	r0, r5
   35ea4:	bl	35ca8 <__assert_fail@plt+0x236e4>
   35ea8:	mov	r3, #12
   35eac:	ldr	r2, [sp, #12]
   35eb0:	str	r3, [r2]
   35eb4:	mov	r5, #0
   35eb8:	b	35fd0 <__assert_fail@plt+0x23a0c>
   35ebc:	mov	r0, r5
   35ec0:	bl	35ca8 <__assert_fail@plt+0x236e4>
   35ec4:	b	35ea8 <__assert_fail@plt+0x238e4>
   35ec8:	tst	r4, #2
   35ecc:	beq	35ed8 <__assert_fail@plt+0x23914>
   35ed0:	cmp	r8, #0
   35ed4:	bne	35f00 <__assert_fail@plt+0x2393c>
   35ed8:	tst	r4, #16
   35edc:	beq	35eec <__assert_fail@plt+0x23928>
   35ee0:	ldr	r3, [sp]
   35ee4:	cmp	r3, #0
   35ee8:	beq	35f00 <__assert_fail@plt+0x2393c>
   35eec:	tst	r4, #64	; 0x40
   35ef0:	beq	35f10 <__assert_fail@plt+0x2394c>
   35ef4:	ldr	r3, [sp, #4]
   35ef8:	cmp	r3, #0
   35efc:	bne	35f10 <__assert_fail@plt+0x2394c>
   35f00:	sub	r1, r6, sl
   35f04:	mov	r0, fp
   35f08:	bl	32f60 <__assert_fail@plt+0x2099c>
   35f0c:	add	sl, sl, #1
   35f10:	add	r6, r6, #1
   35f14:	ldr	r3, [r7, #4]
   35f18:	cmp	r6, r3
   35f1c:	bge	35fb4 <__assert_fail@plt+0x239f0>
   35f20:	ldr	r3, [r7, #8]
   35f24:	ldr	r2, [r3, r6, lsl #2]
   35f28:	ldr	r3, [r9]
   35f2c:	add	r3, r3, r2, lsl #3
   35f30:	ldrb	r1, [r3, #4]
   35f34:	ldr	r4, [r3, #4]
   35f38:	ubfx	r4, r4, #8, #10
   35f3c:	cmp	r1, #1
   35f40:	cmpeq	r4, #0
   35f44:	beq	35f10 <__assert_fail@plt+0x2394c>
   35f48:	ldrb	r2, [r5, #52]	; 0x34
   35f4c:	ubfx	r0, r2, #5, #1
   35f50:	ldrb	r3, [r3, #6]
   35f54:	ubfx	r3, r3, #4, #1
   35f58:	orr	r0, r0, r3
   35f5c:	mov	r3, r2
   35f60:	bfi	r3, r0, #5, #1
   35f64:	strb	r3, [r5, #52]	; 0x34
   35f68:	cmp	r1, #2
   35f6c:	uxtbeq	r3, r3
   35f70:	orreq	r3, r3, #16
   35f74:	strbeq	r3, [r5, #52]	; 0x34
   35f78:	beq	35f84 <__assert_fail@plt+0x239c0>
   35f7c:	cmp	r1, #4
   35f80:	beq	35e5c <__assert_fail@plt+0x23898>
   35f84:	cmp	r4, #0
   35f88:	beq	35f10 <__assert_fail@plt+0x2394c>
   35f8c:	ldr	r3, [r5, #40]	; 0x28
   35f90:	cmp	fp, r3
   35f94:	beq	35e6c <__assert_fail@plt+0x238a8>
   35f98:	tst	r4, #1
   35f9c:	beq	35ec8 <__assert_fail@plt+0x23904>
   35fa0:	cmp	r8, #0
   35fa4:	beq	35f00 <__assert_fail@plt+0x2393c>
   35fa8:	tst	r4, #2
   35fac:	bne	35f00 <__assert_fail@plt+0x2393c>
   35fb0:	b	35ed8 <__assert_fail@plt+0x23914>
   35fb4:	ldr	r8, [sp, #8]
   35fb8:	mov	r2, r8
   35fbc:	mov	r1, r5
   35fc0:	mov	r0, r9
   35fc4:	bl	34024 <__assert_fail@plt+0x21a60>
   35fc8:	cmp	r0, #0
   35fcc:	bne	35ff0 <__assert_fail@plt+0x23a2c>
   35fd0:	mov	r0, r5
   35fd4:	add	sp, sp, #20
   35fd8:	ldrd	r4, [sp]
   35fdc:	ldrd	r6, [sp, #8]
   35fe0:	ldrd	r8, [sp, #16]
   35fe4:	ldrd	sl, [sp, #24]
   35fe8:	add	sp, sp, #32
   35fec:	pop	{pc}		; (ldr pc, [sp], #4)
   35ff0:	mov	r0, r5
   35ff4:	bl	35ca8 <__assert_fail@plt+0x236e4>
   35ff8:	b	35ea8 <__assert_fail@plt+0x238e4>
   35ffc:	strd	r4, [sp, #-16]!
   36000:	str	r6, [sp, #8]
   36004:	str	lr, [sp, #12]
   36008:	ldr	r5, [r0]
   3600c:	ldr	r0, [r5, #56]	; 0x38
   36010:	cmp	r0, #0
   36014:	beq	3602c <__assert_fail@plt+0x23a68>
   36018:	ldr	r4, [r0]
   3601c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36020:	mov	r0, r4
   36024:	cmp	r4, #0
   36028:	bne	36018 <__assert_fail@plt+0x23a54>
   3602c:	mov	r4, #0
   36030:	str	r4, [r5, #56]	; 0x38
   36034:	mov	r3, #31
   36038:	str	r3, [r5, #64]	; 0x40
   3603c:	str	r4, [r5, #52]	; 0x34
   36040:	ldr	r0, [r5, #16]
   36044:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36048:	str	r4, [r5, #16]
   3604c:	ldrd	r4, [sp]
   36050:	ldr	r6, [sp, #8]
   36054:	add	sp, sp, #12
   36058:	pop	{pc}		; (ldr pc, [sp], #4)
   3605c:	str	r4, [sp, #-8]!
   36060:	str	lr, [sp, #4]
   36064:	mov	r4, r0
   36068:	ldr	r0, [r0, #8]
   3606c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36070:	ldr	r0, [r4, #12]
   36074:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36078:	ldrb	r3, [r4, #75]	; 0x4b
   3607c:	cmp	r3, #0
   36080:	bne	36090 <__assert_fail@plt+0x23acc>
   36084:	ldr	r4, [sp]
   36088:	add	sp, sp, #4
   3608c:	pop	{pc}		; (ldr pc, [sp], #4)
   36090:	ldr	r0, [r4, #4]
   36094:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36098:	b	36084 <__assert_fail@plt+0x23ac0>
   3609c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   360a0:	strd	r6, [sp, #8]
   360a4:	str	r8, [sp, #16]
   360a8:	str	lr, [sp, #20]
   360ac:	mov	r6, r0
   360b0:	ldr	r3, [r0]
   360b4:	cmp	r3, #0
   360b8:	beq	360e8 <__assert_fail@plt+0x23b24>
   360bc:	ldr	r3, [r0, #8]
   360c0:	cmp	r3, #0
   360c4:	beq	360e8 <__assert_fail@plt+0x23b24>
   360c8:	mov	r4, #0
   360cc:	ldr	r0, [r6]
   360d0:	add	r0, r0, r4, lsl #3
   360d4:	bl	358f8 <__assert_fail@plt+0x23334>
   360d8:	add	r4, r4, #1
   360dc:	ldr	r3, [r6, #8]
   360e0:	cmp	r3, r4
   360e4:	bhi	360cc <__assert_fail@plt+0x23b08>
   360e8:	ldr	r0, [r6, #12]
   360ec:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   360f0:	ldr	r3, [r6, #8]
   360f4:	cmp	r3, #0
   360f8:	beq	36168 <__assert_fail@plt+0x23ba4>
   360fc:	mov	r4, #0
   36100:	mov	r5, r4
   36104:	b	3611c <__assert_fail@plt+0x23b58>
   36108:	add	r5, r5, #1
   3610c:	add	r4, r4, #12
   36110:	ldr	r3, [r6, #8]
   36114:	cmp	r3, r5
   36118:	bls	36168 <__assert_fail@plt+0x23ba4>
   3611c:	ldr	r3, [r6, #24]
   36120:	cmp	r3, #0
   36124:	beq	36134 <__assert_fail@plt+0x23b70>
   36128:	add	r3, r3, r4
   3612c:	ldr	r0, [r3, #8]
   36130:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36134:	ldr	r3, [r6, #28]
   36138:	cmp	r3, #0
   3613c:	beq	3614c <__assert_fail@plt+0x23b88>
   36140:	add	r3, r3, r4
   36144:	ldr	r0, [r3, #8]
   36148:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3614c:	ldr	r3, [r6, #20]
   36150:	cmp	r3, #0
   36154:	beq	36108 <__assert_fail@plt+0x23b44>
   36158:	add	r3, r3, r4
   3615c:	ldr	r0, [r3, #8]
   36160:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36164:	b	36108 <__assert_fail@plt+0x23b44>
   36168:	ldr	r0, [r6, #20]
   3616c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36170:	ldr	r0, [r6, #24]
   36174:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36178:	ldr	r0, [r6, #28]
   3617c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36180:	ldr	r0, [r6]
   36184:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36188:	ldr	r3, [r6, #32]
   3618c:	cmp	r3, #0
   36190:	beq	361f4 <__assert_fail@plt+0x23c30>
   36194:	mov	r7, #0
   36198:	mov	r8, r7
   3619c:	b	361bc <__assert_fail@plt+0x23bf8>
   361a0:	ldr	r0, [r5, #8]
   361a4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   361a8:	add	r8, r8, #1
   361ac:	add	r7, r7, #12
   361b0:	ldr	r3, [r6, #68]	; 0x44
   361b4:	cmp	r3, r8
   361b8:	bcc	361f4 <__assert_fail@plt+0x23c30>
   361bc:	ldr	r3, [r6, #32]
   361c0:	add	r5, r3, r7
   361c4:	ldr	r3, [r3, r7]
   361c8:	cmp	r3, #0
   361cc:	ble	361a0 <__assert_fail@plt+0x23bdc>
   361d0:	mov	r4, #0
   361d4:	ldr	r3, [r5, #8]
   361d8:	ldr	r0, [r3, r4, lsl #2]
   361dc:	bl	35ca8 <__assert_fail@plt+0x236e4>
   361e0:	add	r4, r4, #1
   361e4:	ldr	r3, [r5]
   361e8:	cmp	r3, r4
   361ec:	bgt	361d4 <__assert_fail@plt+0x23c10>
   361f0:	b	361a0 <__assert_fail@plt+0x23bdc>
   361f4:	ldr	r0, [r6, #32]
   361f8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   361fc:	ldr	r0, [r6, #60]	; 0x3c
   36200:	movw	r3, #41780	; 0xa334
   36204:	movt	r3, #4
   36208:	cmp	r0, r3
   3620c:	beq	36214 <__assert_fail@plt+0x23c50>
   36210:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36214:	ldr	r0, [r6, #132]	; 0x84
   36218:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3621c:	mov	r0, r6
   36220:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36224:	ldrd	r4, [sp]
   36228:	ldrd	r6, [sp, #8]
   3622c:	ldr	r8, [sp, #16]
   36230:	add	sp, sp, #20
   36234:	pop	{pc}		; (ldr pc, [sp], #4)
   36238:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3623c:	strd	r6, [sp, #8]
   36240:	strd	r8, [sp, #16]
   36244:	strd	sl, [sp, #24]
   36248:	str	lr, [sp, #32]
   3624c:	sub	sp, sp, #28
   36250:	str	r3, [sp, #4]
   36254:	add	r3, r1, r1, lsl #1
   36258:	ldr	r6, [r0, #28]
   3625c:	add	r6, r6, r3, lsl #2
   36260:	mov	r3, #0
   36264:	str	r3, [sp, #12]
   36268:	str	r3, [sp, #16]
   3626c:	str	r3, [sp, #20]
   36270:	ldr	r3, [r6, #4]
   36274:	cmp	r3, #0
   36278:	ble	362f4 <__assert_fail@plt+0x23d30>
   3627c:	mov	r7, r0
   36280:	mov	r8, r1
   36284:	mov	fp, r2
   36288:	mov	r5, #0
   3628c:	b	36374 <__assert_fail@plt+0x23db0>
   36290:	ldr	r0, [sp, #20]
   36294:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36298:	b	36300 <__assert_fail@plt+0x23d3c>
   3629c:	cmp	r3, #0
   362a0:	ble	362f4 <__assert_fail@plt+0x23d30>
   362a4:	mov	r4, #0
   362a8:	b	362d4 <__assert_fail@plt+0x23d10>
   362ac:	mov	r1, r5
   362b0:	mov	r0, fp
   362b4:	bl	32ec8 <__assert_fail@plt+0x20904>
   362b8:	sub	r1, r0, #1
   362bc:	mov	r0, fp
   362c0:	bl	32f60 <__assert_fail@plt+0x2099c>
   362c4:	add	r4, r4, #1
   362c8:	ldr	r3, [r6, #4]
   362cc:	cmp	r3, r4
   362d0:	ble	362f4 <__assert_fail@plt+0x23d30>
   362d4:	ldr	r3, [r6, #8]
   362d8:	ldr	r5, [r3, r4, lsl #2]
   362dc:	mov	r1, r5
   362e0:	add	r0, sp, #12
   362e4:	bl	32ec8 <__assert_fail@plt+0x20904>
   362e8:	cmp	r0, #0
   362ec:	bne	362c4 <__assert_fail@plt+0x23d00>
   362f0:	b	362ac <__assert_fail@plt+0x23ce8>
   362f4:	ldr	r0, [sp, #20]
   362f8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   362fc:	mov	r4, #0
   36300:	mov	r0, r4
   36304:	add	sp, sp, #28
   36308:	ldrd	r4, [sp]
   3630c:	ldrd	r6, [sp, #8]
   36310:	ldrd	r8, [sp, #16]
   36314:	ldrd	sl, [sp, #24]
   36318:	add	sp, sp, #32
   3631c:	pop	{pc}		; (ldr pc, [sp], #4)
   36320:	mov	r1, r9
   36324:	mov	r0, r6
   36328:	bl	32ec8 <__assert_fail@plt+0x20904>
   3632c:	cmp	r0, #0
   36330:	bne	36364 <__assert_fail@plt+0x23da0>
   36334:	mov	r1, r9
   36338:	mov	r0, fp
   3633c:	bl	32ec8 <__assert_fail@plt+0x20904>
   36340:	cmp	r0, #0
   36344:	beq	36364 <__assert_fail@plt+0x23da0>
   36348:	ldr	r2, [r7, #28]
   3634c:	add	r2, r2, r4
   36350:	ldr	r1, [sp, #4]
   36354:	add	r0, sp, #12
   36358:	bl	34a90 <__assert_fail@plt+0x224cc>
   3635c:	subs	r4, r0, #0
   36360:	bne	36290 <__assert_fail@plt+0x23ccc>
   36364:	add	r5, r5, #1
   36368:	ldr	r3, [r6, #4]
   3636c:	cmp	r3, r5
   36370:	ble	3629c <__assert_fail@plt+0x23cd8>
   36374:	ldr	r3, [r6, #8]
   36378:	ldr	r4, [r3, r5, lsl #2]
   3637c:	cmp	r8, r4
   36380:	beq	36364 <__assert_fail@plt+0x23da0>
   36384:	ldr	r3, [r7]
   36388:	add	r3, r3, r4, lsl #3
   3638c:	ldrb	r3, [r3, #4]
   36390:	tst	r3, #8
   36394:	beq	36364 <__assert_fail@plt+0x23da0>
   36398:	add	r4, r4, r4, lsl #1
   3639c:	lsl	r4, r4, #2
   363a0:	ldr	r3, [r7, #20]
   363a4:	add	r3, r3, r4
   363a8:	ldr	r2, [r3, #8]
   363ac:	ldr	r9, [r2]
   363b0:	ldr	r3, [r3, #4]
   363b4:	cmp	r3, #1
   363b8:	ble	36320 <__assert_fail@plt+0x23d5c>
   363bc:	ldr	sl, [r2, #4]
   363c0:	mov	r1, r9
   363c4:	mov	r0, r6
   363c8:	bl	32ec8 <__assert_fail@plt+0x20904>
   363cc:	cmp	r0, #0
   363d0:	bne	363e8 <__assert_fail@plt+0x23e24>
   363d4:	mov	r1, r9
   363d8:	mov	r0, fp
   363dc:	bl	32ec8 <__assert_fail@plt+0x20904>
   363e0:	cmp	r0, #0
   363e4:	bne	36348 <__assert_fail@plt+0x23d84>
   363e8:	cmp	sl, #0
   363ec:	ble	36364 <__assert_fail@plt+0x23da0>
   363f0:	mov	r1, sl
   363f4:	mov	r0, r6
   363f8:	bl	32ec8 <__assert_fail@plt+0x20904>
   363fc:	cmp	r0, #0
   36400:	bne	36364 <__assert_fail@plt+0x23da0>
   36404:	mov	r1, sl
   36408:	mov	r0, fp
   3640c:	bl	32ec8 <__assert_fail@plt+0x20904>
   36410:	cmp	r0, #0
   36414:	beq	36364 <__assert_fail@plt+0x23da0>
   36418:	b	36348 <__assert_fail@plt+0x23d84>
   3641c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36420:	strd	r6, [sp, #8]
   36424:	str	r8, [sp, #16]
   36428:	str	lr, [sp, #20]
   3642c:	mov	r8, r0
   36430:	ldr	r3, [r0, #124]	; 0x7c
   36434:	cmp	r3, #0
   36438:	ble	364c4 <__assert_fail@plt+0x23f00>
   3643c:	mov	r7, #0
   36440:	b	3645c <__assert_fail@plt+0x23e98>
   36444:	mov	r0, r6
   36448:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3644c:	add	r7, r7, #1
   36450:	ldr	r3, [r8, #124]	; 0x7c
   36454:	cmp	r3, r7
   36458:	ble	364c4 <__assert_fail@plt+0x23f00>
   3645c:	ldr	r3, [r8, #132]	; 0x84
   36460:	ldr	r6, [r3, r7, lsl #2]
   36464:	ldr	r3, [r6, #16]
   36468:	cmp	r3, #0
   3646c:	ble	3649c <__assert_fail@plt+0x23ed8>
   36470:	mov	r4, #0
   36474:	ldr	r3, [r6, #20]
   36478:	ldr	r5, [r3, r4, lsl #2]
   3647c:	ldr	r0, [r5, #16]
   36480:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36484:	mov	r0, r5
   36488:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3648c:	add	r4, r4, #1
   36490:	ldr	r3, [r6, #16]
   36494:	cmp	r3, r4
   36498:	bgt	36474 <__assert_fail@plt+0x23eb0>
   3649c:	ldr	r0, [r6, #20]
   364a0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   364a4:	ldr	r3, [r6, #8]
   364a8:	cmp	r3, #0
   364ac:	beq	36444 <__assert_fail@plt+0x23e80>
   364b0:	ldr	r0, [r3, #8]
   364b4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   364b8:	ldr	r0, [r6, #8]
   364bc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   364c0:	b	36444 <__assert_fail@plt+0x23e80>
   364c4:	mov	r3, #0
   364c8:	str	r3, [r8, #124]	; 0x7c
   364cc:	str	r3, [r8, #108]	; 0x6c
   364d0:	ldrd	r4, [sp]
   364d4:	ldrd	r6, [sp, #8]
   364d8:	ldr	r8, [sp, #16]
   364dc:	add	sp, sp, #20
   364e0:	pop	{pc}		; (ldr pc, [sp], #4)
   364e4:	strd	r4, [sp, #-16]!
   364e8:	str	r6, [sp, #8]
   364ec:	str	lr, [sp, #12]
   364f0:	mov	r4, r0
   364f4:	ldr	r0, [r0, #8]
   364f8:	add	r5, r4, #12
   364fc:	cmp	r0, r5
   36500:	beq	36508 <__assert_fail@plt+0x23f44>
   36504:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36508:	mov	r3, #0
   3650c:	str	r3, [r4]
   36510:	mov	r3, #16
   36514:	str	r3, [r4, #4]
   36518:	str	r5, [r4, #8]
   3651c:	ldrd	r4, [sp]
   36520:	ldr	r6, [sp, #8]
   36524:	add	sp, sp, #12
   36528:	pop	{pc}		; (ldr pc, [sp], #4)
   3652c:	strd	r4, [sp, #-16]!
   36530:	str	r6, [sp, #8]
   36534:	str	lr, [sp, #12]
   36538:	subs	r5, r0, #0
   3653c:	beq	36590 <__assert_fail@plt+0x23fcc>
   36540:	ldr	r3, [r5]
   36544:	cmp	r3, #0
   36548:	ble	36588 <__assert_fail@plt+0x23fc4>
   3654c:	mov	r4, #0
   36550:	mov	r6, r4
   36554:	ldr	r3, [r5, #8]
   36558:	add	r3, r3, r4
   3655c:	ldr	r0, [r3, #20]
   36560:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36564:	ldr	r3, [r5, #8]
   36568:	add	r3, r3, r4
   3656c:	ldr	r0, [r3, #8]
   36570:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36574:	add	r6, r6, #1
   36578:	add	r4, r4, #24
   3657c:	ldr	r3, [r5]
   36580:	cmp	r3, r6
   36584:	bgt	36554 <__assert_fail@plt+0x23f90>
   36588:	ldr	r0, [r5, #8]
   3658c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36590:	mov	r0, #0
   36594:	ldrd	r4, [sp]
   36598:	ldr	r6, [sp, #8]
   3659c:	add	sp, sp, #12
   365a0:	pop	{pc}		; (ldr pc, [sp], #4)
   365a4:	strd	r4, [sp, #-16]!
   365a8:	str	r6, [sp, #8]
   365ac:	str	lr, [sp, #12]
   365b0:	ldr	r2, [r1, #28]
   365b4:	ldrb	r3, [r1, #24]
   365b8:	sub	r3, r3, #2
   365bc:	cmp	r3, #14
   365c0:	ldrls	pc, [pc, r3, lsl #2]
   365c4:	b	366fc <__assert_fail@plt+0x24138>
   365c8:	andeq	r6, r3, r4, lsl r7
   365cc:	strdeq	r6, [r3], -ip
   365d0:	andeq	r6, r3, r0, asr #13
   365d4:	strdeq	r6, [r3], -ip
   365d8:	strdeq	r6, [r3], -ip
   365dc:	strdeq	r6, [r3], -ip
   365e0:	andeq	r6, r3, r4, lsr #13
   365e4:	andeq	r6, r3, r4, lsr #13
   365e8:	andeq	r6, r3, r4, lsl #12
   365ec:	andeq	r6, r3, r4, lsl #12
   365f0:	andeq	r6, r3, r4, lsr #13
   365f4:	strdeq	r6, [r3], -ip
   365f8:	strdeq	r6, [r3], -ip
   365fc:	strdeq	r6, [r3], -ip
   36600:	andeq	r6, r3, r4, lsl r7
   36604:	ldrb	r3, [r0, #88]	; 0x58
   36608:	orr	r3, r3, #1
   3660c:	strb	r3, [r0, #88]	; 0x58
   36610:	ldr	r3, [r1, #4]
   36614:	cmp	r3, #0
   36618:	ldrne	r3, [r3, #12]
   3661c:	ldreq	r3, [r1, #16]
   36620:	ldr	r4, [r3, #28]
   36624:	ldr	r3, [r1, #8]
   36628:	cmp	r3, #0
   3662c:	ldrne	r3, [r3, #12]
   36630:	ldreq	r3, [r1, #16]
   36634:	ldr	r5, [r3, #28]
   36638:	add	r2, r2, r2, lsl #1
   3663c:	lsl	r2, r2, #2
   36640:	ldr	r3, [r0, #20]
   36644:	add	r6, r3, r2
   36648:	mov	r1, #2
   3664c:	str	r1, [r3, r2]
   36650:	mov	r0, #8
   36654:	bl	32148 <__assert_fail@plt+0x1fb84>
   36658:	str	r0, [r6, #8]
   3665c:	cmp	r0, #0
   36660:	beq	36728 <__assert_fail@plt+0x24164>
   36664:	cmp	r4, r5
   36668:	beq	36690 <__assert_fail@plt+0x240cc>
   3666c:	mov	r3, #2
   36670:	str	r3, [r6, #4]
   36674:	cmp	r4, r5
   36678:	strlt	r4, [r0]
   3667c:	strlt	r5, [r0, #4]
   36680:	strge	r5, [r0]
   36684:	strge	r4, [r0, #4]
   36688:	mov	r0, #0
   3668c:	b	36718 <__assert_fail@plt+0x24154>
   36690:	mov	r3, #1
   36694:	str	r3, [r6, #4]
   36698:	str	r4, [r0]
   3669c:	mov	r0, #0
   366a0:	b	36718 <__assert_fail@plt+0x24154>
   366a4:	ldr	r1, [r1, #16]
   366a8:	add	r2, r2, r2, lsl #1
   366ac:	ldr	r0, [r0, #20]
   366b0:	ldr	r1, [r1, #28]
   366b4:	add	r0, r0, r2, lsl #2
   366b8:	bl	33f90 <__assert_fail@plt+0x219cc>
   366bc:	b	36718 <__assert_fail@plt+0x24154>
   366c0:	ldr	r3, [r1, #16]
   366c4:	ldr	ip, [r3, #28]
   366c8:	ldr	r3, [r0, #12]
   366cc:	str	ip, [r3, r2, lsl #2]
   366d0:	ldrb	r3, [r1, #24]
   366d4:	cmp	r3, #4
   366d8:	movne	r0, #0
   366dc:	bne	36718 <__assert_fail@plt+0x24154>
   366e0:	ldr	r1, [r0, #12]
   366e4:	add	ip, r2, r2, lsl #1
   366e8:	ldr	r0, [r0, #20]
   366ec:	ldr	r1, [r1, r2, lsl #2]
   366f0:	add	r0, r0, ip, lsl #2
   366f4:	bl	33f90 <__assert_fail@plt+0x219cc>
   366f8:	b	36718 <__assert_fail@plt+0x24154>
   366fc:	ldr	r3, [r1, #16]
   36700:	ldr	r1, [r3, #28]
   36704:	ldr	r3, [r0, #12]
   36708:	str	r1, [r3, r2, lsl #2]
   3670c:	mov	r0, #0
   36710:	b	36718 <__assert_fail@plt+0x24154>
   36714:	mov	r0, #0
   36718:	ldrd	r4, [sp]
   3671c:	ldr	r6, [sp, #8]
   36720:	add	sp, sp, #12
   36724:	pop	{pc}		; (ldr pc, [sp], #4)
   36728:	mov	r0, #12
   3672c:	b	36718 <__assert_fail@plt+0x24154>
   36730:	strd	r4, [sp, #-16]!
   36734:	str	r6, [sp, #8]
   36738:	str	lr, [sp, #12]
   3673c:	mov	r4, r0
   36740:	mov	r5, r1
   36744:	ldr	r1, [r0]
   36748:	cmp	r1, #0
   3674c:	beq	36784 <__assert_fail@plt+0x241c0>
   36750:	ldr	r3, [r0, #4]
   36754:	cmp	r3, #0
   36758:	bne	36798 <__assert_fail@plt+0x241d4>
   3675c:	ldr	r3, [r0, #8]
   36760:	str	r5, [r3]
   36764:	ldr	r3, [r0, #4]
   36768:	add	r3, r3, #1
   3676c:	str	r3, [r0, #4]
   36770:	mov	r0, #1
   36774:	ldrd	r4, [sp]
   36778:	ldr	r6, [sp, #8]
   3677c:	add	sp, sp, #12
   36780:	pop	{pc}		; (ldr pc, [sp], #4)
   36784:	mov	r1, r5
   36788:	bl	33f90 <__assert_fail@plt+0x219cc>
   3678c:	clz	r0, r0
   36790:	lsr	r0, r0, #5
   36794:	b	36774 <__assert_fail@plt+0x241b0>
   36798:	cmp	r1, r3
   3679c:	beq	367f8 <__assert_fail@plt+0x24234>
   367a0:	ldr	r1, [r4, #8]
   367a4:	ldr	r3, [r1]
   367a8:	cmp	r3, r5
   367ac:	ble	3681c <__assert_fail@plt+0x24258>
   367b0:	ldr	r3, [r4, #4]
   367b4:	cmp	r3, #0
   367b8:	ble	367dc <__assert_fail@plt+0x24218>
   367bc:	sub	r2, r3, #-1073741823	; 0xc0000001
   367c0:	lsl	r2, r2, #2
   367c4:	ldr	r1, [r4, #8]
   367c8:	ldr	r0, [r1, r2]
   367cc:	str	r0, [r1, r3, lsl #2]
   367d0:	sub	r2, r2, #4
   367d4:	subs	r3, r3, #1
   367d8:	bne	367c4 <__assert_fail@plt+0x24200>
   367dc:	ldr	r2, [r4, #8]
   367e0:	str	r5, [r2, r3, lsl #2]
   367e4:	ldr	r3, [r4, #4]
   367e8:	add	r3, r3, #1
   367ec:	str	r3, [r4, #4]
   367f0:	mov	r0, #1
   367f4:	b	36774 <__assert_fail@plt+0x241b0>
   367f8:	lsl	r3, r1, #1
   367fc:	str	r3, [r0]
   36800:	lsl	r1, r1, #3
   36804:	ldr	r0, [r0, #8]
   36808:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3680c:	cmp	r0, #0
   36810:	beq	3685c <__assert_fail@plt+0x24298>
   36814:	str	r0, [r4, #8]
   36818:	b	367a0 <__assert_fail@plt+0x241dc>
   3681c:	ldr	r3, [r4, #4]
   36820:	sub	r0, r3, #-1073741823	; 0xc0000001
   36824:	lsl	r2, r0, #2
   36828:	ldr	r0, [r1, r0, lsl #2]
   3682c:	cmp	r5, r0
   36830:	bge	367dc <__assert_fail@plt+0x24218>
   36834:	add	r2, r2, #4
   36838:	str	r0, [r1, r2]
   3683c:	sub	r3, r3, #1
   36840:	ldr	r1, [r4, #8]
   36844:	add	r0, r1, r2
   36848:	ldr	r0, [r0, #-8]
   3684c:	sub	r2, r2, #4
   36850:	cmp	r0, r5
   36854:	bgt	36838 <__assert_fail@plt+0x24274>
   36858:	b	367dc <__assert_fail@plt+0x24218>
   3685c:	mov	r0, #0
   36860:	b	36774 <__assert_fail@plt+0x241b0>
   36864:	strd	r4, [sp, #-36]!	; 0xffffffdc
   36868:	strd	r6, [sp, #8]
   3686c:	strd	r8, [sp, #16]
   36870:	strd	sl, [sp, #24]
   36874:	str	lr, [sp, #32]
   36878:	sub	sp, sp, #20
   3687c:	mov	r4, r0
   36880:	mov	r5, r1
   36884:	mov	r6, r2
   36888:	mov	r9, r3
   3688c:	ldr	r7, [sp, #56]	; 0x38
   36890:	mov	r8, #0
   36894:	b	36a64 <__assert_fail@plt+0x244a0>
   36898:	lsl	fp, r5, #2
   3689c:	ldr	r3, [r4, #12]
   368a0:	ldr	r5, [r3, r5, lsl #2]
   368a4:	str	r6, [sp, #12]
   368a8:	add	r6, r6, r6, lsl #1
   368ac:	lsl	sl, r6, #2
   368b0:	ldr	r3, [r4, #20]
   368b4:	add	r3, r3, sl
   368b8:	str	r8, [r3, #4]
   368bc:	mov	r2, r7
   368c0:	mov	r1, r5
   368c4:	mov	r0, r4
   368c8:	bl	35c04 <__assert_fail@plt+0x23640>
   368cc:	mov	r6, r0
   368d0:	cmn	r0, #1
   368d4:	beq	36b5c <__assert_fail@plt+0x24598>
   368d8:	ldr	r3, [r4, #12]
   368dc:	ldr	r2, [r3, fp]
   368e0:	ldr	r1, [sp, #12]
   368e4:	str	r2, [r3, r1, lsl #2]
   368e8:	ldr	r0, [r4, #20]
   368ec:	mov	r1, r6
   368f0:	add	r0, r0, sl
   368f4:	bl	36730 <__assert_fail@plt+0x2416c>
   368f8:	cmp	r0, #0
   368fc:	bne	36a64 <__assert_fail@plt+0x244a0>
   36900:	mov	r0, #12
   36904:	b	36b88 <__assert_fail@plt+0x245c4>
   36908:	ldr	r3, [r4, #12]
   3690c:	ldr	r2, [r3, r5, lsl #2]
   36910:	str	r2, [r3, r6, lsl #2]
   36914:	b	36b88 <__assert_fail@plt+0x245c4>
   36918:	ldr	r2, [r2, #8]
   3691c:	ldr	fp, [r2]
   36920:	add	sl, r6, r6, lsl #1
   36924:	lsl	sl, sl, #2
   36928:	add	r3, r3, sl
   3692c:	str	r8, [r3, #4]
   36930:	cmp	r5, r9
   36934:	movne	r3, #0
   36938:	moveq	r3, #1
   3693c:	cmp	r5, r6
   36940:	moveq	r3, #0
   36944:	cmp	r3, #0
   36948:	bne	3699c <__assert_fail@plt+0x243d8>
   3694c:	ldr	r3, [r4]
   36950:	add	r1, r3, r1
   36954:	ldr	r3, [r1, #4]
   36958:	ubfx	r3, r3, #8, #10
   3695c:	orr	r7, r7, r3
   36960:	mov	r2, r7
   36964:	mov	r1, fp
   36968:	mov	r0, r4
   3696c:	bl	35c04 <__assert_fail@plt+0x23640>
   36970:	mov	r6, r0
   36974:	cmn	r0, #1
   36978:	beq	36b64 <__assert_fail@plt+0x245a0>
   3697c:	ldr	r0, [r4, #20]
   36980:	mov	r1, r6
   36984:	add	r0, r0, sl
   36988:	bl	36730 <__assert_fail@plt+0x2416c>
   3698c:	cmp	r0, #0
   36990:	beq	369bc <__assert_fail@plt+0x243f8>
   36994:	mov	r5, fp
   36998:	b	36a64 <__assert_fail@plt+0x244a0>
   3699c:	ldr	r0, [r4, #20]
   369a0:	mov	r1, fp
   369a4:	add	r0, r0, sl
   369a8:	bl	36730 <__assert_fail@plt+0x2416c>
   369ac:	cmp	r0, #0
   369b0:	movne	r0, #0
   369b4:	moveq	r0, #12
   369b8:	b	36b88 <__assert_fail@plt+0x245c4>
   369bc:	mov	r0, #12
   369c0:	b	36b88 <__assert_fail@plt+0x245c4>
   369c4:	sub	r1, r1, #1
   369c8:	add	r2, r2, r0
   369cc:	ldrb	r3, [r2, #6]
   369d0:	ubfx	r3, r3, #2, #1
   369d4:	cmp	r1, #0
   369d8:	movle	r3, #0
   369dc:	andgt	r3, r3, #1
   369e0:	cmp	r3, #0
   369e4:	beq	36afc <__assert_fail@plt+0x24538>
   369e8:	ldr	r3, [ip, #-4]!
   369ec:	cmp	r5, r3
   369f0:	bne	369c4 <__assert_fail@plt+0x24400>
   369f4:	ldr	r3, [r2, #4]
   369f8:	ubfx	r3, r3, #8, #10
   369fc:	cmp	r7, r3
   36a00:	bne	369c4 <__assert_fail@plt+0x24400>
   36a04:	cmn	r1, #1
   36a08:	beq	36afc <__assert_fail@plt+0x24538>
   36a0c:	ldr	r0, [r4, #20]
   36a10:	add	r0, r0, fp
   36a14:	bl	36730 <__assert_fail@plt+0x2416c>
   36a18:	cmp	r0, #0
   36a1c:	beq	36b7c <__assert_fail@plt+0x245b8>
   36a20:	ldr	r3, [r4, #20]
   36a24:	add	sl, r3, sl
   36a28:	ldr	r3, [sl, #8]
   36a2c:	ldr	r5, [r3, #4]
   36a30:	mov	r2, r7
   36a34:	mov	r1, r5
   36a38:	mov	r0, r4
   36a3c:	bl	35c04 <__assert_fail@plt+0x23640>
   36a40:	mov	r6, r0
   36a44:	cmn	r0, #1
   36a48:	beq	36b84 <__assert_fail@plt+0x245c0>
   36a4c:	ldr	r0, [r4, #20]
   36a50:	mov	r1, r6
   36a54:	add	r0, r0, fp
   36a58:	bl	36730 <__assert_fail@plt+0x2416c>
   36a5c:	cmp	r0, #0
   36a60:	beq	36b54 <__assert_fail@plt+0x24590>
   36a64:	lsl	r1, r5, #3
   36a68:	ldr	r3, [r4]
   36a6c:	add	r3, r3, r1
   36a70:	ldrb	r3, [r3, #4]
   36a74:	cmp	r3, #4
   36a78:	beq	36898 <__assert_fail@plt+0x242d4>
   36a7c:	ldr	r3, [r4, #20]
   36a80:	add	sl, r5, r5, lsl #1
   36a84:	lsl	sl, sl, #2
   36a88:	add	r2, r3, sl
   36a8c:	ldr	r0, [r2, #4]
   36a90:	cmp	r0, #0
   36a94:	beq	36908 <__assert_fail@plt+0x24344>
   36a98:	cmp	r0, #1
   36a9c:	beq	36918 <__assert_fail@plt+0x24354>
   36aa0:	ldr	r2, [r2, #8]
   36aa4:	ldr	r5, [r2]
   36aa8:	add	r6, r6, r6, lsl #1
   36aac:	lsl	fp, r6, #2
   36ab0:	add	r3, r3, fp
   36ab4:	str	r8, [r3, #4]
   36ab8:	ldr	lr, [r4, #8]
   36abc:	sub	r1, lr, #1
   36ac0:	ldr	r0, [r4]
   36ac4:	add	r2, r0, r1, lsl #3
   36ac8:	ldrb	r3, [r2, #6]
   36acc:	ubfx	r3, r3, #2, #1
   36ad0:	cmp	r1, #0
   36ad4:	movle	r3, #0
   36ad8:	andgt	r3, r3, #1
   36adc:	cmp	r3, #0
   36ae0:	beq	36afc <__assert_fail@plt+0x24538>
   36ae4:	ldr	ip, [r4, #16]
   36ae8:	add	ip, ip, lr, lsl #2
   36aec:	add	r0, r0, lr, lsl #3
   36af0:	sub	r0, r0, r2
   36af4:	sub	r0, r0, #16
   36af8:	b	369e8 <__assert_fail@plt+0x24424>
   36afc:	mov	r2, r7
   36b00:	mov	r1, r5
   36b04:	mov	r0, r4
   36b08:	bl	35c04 <__assert_fail@plt+0x23640>
   36b0c:	mov	r6, r0
   36b10:	cmn	r0, #1
   36b14:	beq	36b6c <__assert_fail@plt+0x245a8>
   36b18:	ldr	r0, [r4, #20]
   36b1c:	mov	r1, r6
   36b20:	add	r0, r0, fp
   36b24:	bl	36730 <__assert_fail@plt+0x2416c>
   36b28:	cmp	r0, #0
   36b2c:	beq	36b74 <__assert_fail@plt+0x245b0>
   36b30:	str	r7, [sp]
   36b34:	mov	r3, r9
   36b38:	mov	r2, r6
   36b3c:	mov	r1, r5
   36b40:	mov	r0, r4
   36b44:	bl	36864 <__assert_fail@plt+0x242a0>
   36b48:	cmp	r0, #0
   36b4c:	beq	36a20 <__assert_fail@plt+0x2445c>
   36b50:	b	36b88 <__assert_fail@plt+0x245c4>
   36b54:	mov	r0, #12
   36b58:	b	36b88 <__assert_fail@plt+0x245c4>
   36b5c:	mov	r0, #12
   36b60:	b	36b88 <__assert_fail@plt+0x245c4>
   36b64:	mov	r0, #12
   36b68:	b	36b88 <__assert_fail@plt+0x245c4>
   36b6c:	mov	r0, #12
   36b70:	b	36b88 <__assert_fail@plt+0x245c4>
   36b74:	mov	r0, #12
   36b78:	b	36b88 <__assert_fail@plt+0x245c4>
   36b7c:	mov	r0, #12
   36b80:	b	36b88 <__assert_fail@plt+0x245c4>
   36b84:	mov	r0, #12
   36b88:	add	sp, sp, #20
   36b8c:	ldrd	r4, [sp]
   36b90:	ldrd	r6, [sp, #8]
   36b94:	ldrd	r8, [sp, #16]
   36b98:	ldrd	sl, [sp, #24]
   36b9c:	add	sp, sp, #32
   36ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   36ba4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36ba8:	strd	r6, [sp, #8]
   36bac:	strd	r8, [sp, #16]
   36bb0:	str	sl, [sp, #24]
   36bb4:	str	lr, [sp, #28]
   36bb8:	sub	sp, sp, #8
   36bbc:	mov	r6, r0
   36bc0:	mov	r7, r1
   36bc4:	mov	r4, r2
   36bc8:	mov	r9, r3
   36bcc:	ldr	r8, [sp, #40]	; 0x28
   36bd0:	b	36c1c <__assert_fail@plt+0x24658>
   36bd4:	mov	r1, r4
   36bd8:	mov	r0, r7
   36bdc:	bl	36730 <__assert_fail@plt+0x2416c>
   36be0:	cmp	r0, #0
   36be4:	beq	36ca4 <__assert_fail@plt+0x246e0>
   36be8:	add	r5, r5, r5, lsl #1
   36bec:	lsl	r5, r5, #2
   36bf0:	ldr	r3, [r6, #20]
   36bf4:	add	r3, r3, r5
   36bf8:	ldr	sl, [r3, #4]
   36bfc:	cmp	sl, #0
   36c00:	beq	36ca8 <__assert_fail@plt+0x246e4>
   36c04:	cmp	sl, #2
   36c08:	beq	36c74 <__assert_fail@plt+0x246b0>
   36c0c:	ldr	r3, [r6, #20]
   36c10:	add	r5, r3, r5
   36c14:	ldr	r3, [r5, #8]
   36c18:	ldr	r4, [r3]
   36c1c:	mov	r1, r4
   36c20:	mov	r0, r7
   36c24:	bl	32ec8 <__assert_fail@plt+0x20904>
   36c28:	subs	sl, r0, #0
   36c2c:	bne	36c9c <__assert_fail@plt+0x246d8>
   36c30:	mov	r5, r4
   36c34:	ldr	r3, [r6]
   36c38:	add	r2, r3, r4, lsl #3
   36c3c:	ldrb	r2, [r2, #4]
   36c40:	cmp	r2, r8
   36c44:	bne	36bd4 <__assert_fail@plt+0x24610>
   36c48:	ldr	r3, [r3, r4, lsl #3]
   36c4c:	cmp	r3, r9
   36c50:	bne	36bd4 <__assert_fail@plt+0x24610>
   36c54:	cmp	r8, #9
   36c58:	bne	36ca8 <__assert_fail@plt+0x246e4>
   36c5c:	mov	r1, r4
   36c60:	mov	r0, r7
   36c64:	bl	36730 <__assert_fail@plt+0x2416c>
   36c68:	cmp	r0, #0
   36c6c:	moveq	sl, #12
   36c70:	b	36ca8 <__assert_fail@plt+0x246e4>
   36c74:	ldr	r3, [r3, #8]
   36c78:	ldr	r2, [r3, #4]
   36c7c:	str	r8, [sp]
   36c80:	mov	r3, r9
   36c84:	mov	r1, r7
   36c88:	mov	r0, r6
   36c8c:	bl	36ba4 <__assert_fail@plt+0x245e0>
   36c90:	subs	sl, r0, #0
   36c94:	beq	36c0c <__assert_fail@plt+0x24648>
   36c98:	b	36ca8 <__assert_fail@plt+0x246e4>
   36c9c:	mov	sl, #0
   36ca0:	b	36ca8 <__assert_fail@plt+0x246e4>
   36ca4:	mov	sl, #12
   36ca8:	mov	r0, sl
   36cac:	add	sp, sp, #8
   36cb0:	ldrd	r4, [sp]
   36cb4:	ldrd	r6, [sp, #8]
   36cb8:	ldrd	r8, [sp, #16]
   36cbc:	ldr	sl, [sp, #24]
   36cc0:	add	sp, sp, #28
   36cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   36cc8:	strd	r4, [sp, #-16]!
   36ccc:	str	r6, [sp, #8]
   36cd0:	str	lr, [sp, #12]
   36cd4:	subs	r6, r1, #0
   36cd8:	moveq	r2, #0
   36cdc:	beq	36e44 <__assert_fail@plt+0x24880>
   36ce0:	ldr	r2, [r6, #4]
   36ce4:	cmp	r2, #0
   36ce8:	beq	36e44 <__assert_fail@plt+0x24880>
   36cec:	mov	r4, r0
   36cf0:	ldr	r1, [r0]
   36cf4:	ldr	r3, [r0, #4]
   36cf8:	add	r0, r3, r2, lsl #1
   36cfc:	cmp	r1, r0
   36d00:	blt	36d20 <__assert_fail@plt+0x2475c>
   36d04:	cmp	r3, #0
   36d08:	beq	36d54 <__assert_fail@plt+0x24790>
   36d0c:	ldr	r2, [r6, #4]
   36d10:	add	r5, r3, r2, lsl #1
   36d14:	sub	r2, r2, #1
   36d18:	sub	r3, r3, #1
   36d1c:	b	36d8c <__assert_fail@plt+0x247c8>
   36d20:	add	r1, r2, r1
   36d24:	lsl	r5, r1, #1
   36d28:	lsl	r1, r1, #3
   36d2c:	ldr	r0, [r4, #8]
   36d30:	bl	32ce0 <__assert_fail@plt+0x2071c>
   36d34:	cmp	r0, #0
   36d38:	beq	36e70 <__assert_fail@plt+0x248ac>
   36d3c:	str	r0, [r4, #8]
   36d40:	str	r5, [r4]
   36d44:	ldr	r3, [r4, #4]
   36d48:	cmp	r3, #0
   36d4c:	bne	36d0c <__assert_fail@plt+0x24748>
   36d50:	b	36d58 <__assert_fail@plt+0x24794>
   36d54:	ldr	r0, [r4, #8]
   36d58:	ldr	r3, [r6, #4]
   36d5c:	str	r3, [r4, #4]
   36d60:	ldr	r2, [r6, #4]
   36d64:	lsl	r2, r2, #2
   36d68:	ldr	r1, [r6, #8]
   36d6c:	bl	12000 <memcpy@plt>
   36d70:	mov	r2, #0
   36d74:	b	36e44 <__assert_fail@plt+0x24880>
   36d78:	cmp	r0, r1
   36d7c:	sublt	r2, r2, #1
   36d80:	sublt	r5, r5, #1
   36d84:	strlt	r1, [ip, r5, lsl #2]
   36d88:	subge	r3, r3, #1
   36d8c:	cmp	r2, #0
   36d90:	cmpge	r3, #0
   36d94:	blt	36dbc <__assert_fail@plt+0x247f8>
   36d98:	ldr	ip, [r4, #8]
   36d9c:	ldr	r0, [ip, r3, lsl #2]
   36da0:	ldr	r1, [r6, #8]
   36da4:	ldr	r1, [r1, r2, lsl #2]
   36da8:	cmp	r0, r1
   36dac:	subeq	r2, r2, #1
   36db0:	subeq	r3, r3, #1
   36db4:	bne	36d78 <__assert_fail@plt+0x247b4>
   36db8:	b	36d8c <__assert_fail@plt+0x247c8>
   36dbc:	cmp	r2, #0
   36dc0:	bge	36dec <__assert_fail@plt+0x24828>
   36dc4:	ldr	r3, [r4, #4]
   36dc8:	ldr	r2, [r6, #4]
   36dcc:	add	r2, r3, r2, lsl #1
   36dd0:	sub	lr, r2, #1
   36dd4:	subs	r2, r2, r5
   36dd8:	beq	36e44 <__assert_fail@plt+0x24880>
   36ddc:	sub	ip, r3, #1
   36de0:	add	r3, r3, r2
   36de4:	str	r3, [r4, #4]
   36de8:	b	36e1c <__assert_fail@plt+0x24858>
   36dec:	add	r2, r2, #1
   36df0:	sub	r5, r5, r2
   36df4:	ldr	r0, [r4, #8]
   36df8:	lsl	r2, r2, #2
   36dfc:	ldr	r1, [r6, #8]
   36e00:	add	r0, r0, r5, lsl #2
   36e04:	bl	12000 <memcpy@plt>
   36e08:	b	36dc4 <__assert_fail@plt+0x24800>
   36e0c:	add	r0, ip, r2
   36e10:	str	r1, [r3, r0, lsl #2]
   36e14:	subs	ip, ip, #1
   36e18:	bmi	36e58 <__assert_fail@plt+0x24894>
   36e1c:	ldr	r3, [r4, #8]
   36e20:	ldr	r0, [r3, lr, lsl #2]
   36e24:	ldr	r1, [r3, ip, lsl #2]
   36e28:	cmp	r0, r1
   36e2c:	ble	36e0c <__assert_fail@plt+0x24848>
   36e30:	sub	lr, lr, #1
   36e34:	add	r1, ip, r2
   36e38:	str	r0, [r3, r1, lsl #2]
   36e3c:	subs	r2, r2, #1
   36e40:	bne	36e1c <__assert_fail@plt+0x24858>
   36e44:	mov	r0, r2
   36e48:	ldrd	r4, [sp]
   36e4c:	ldr	r6, [sp, #8]
   36e50:	add	sp, sp, #12
   36e54:	pop	{pc}		; (ldr pc, [sp], #4)
   36e58:	ldr	r0, [r4, #8]
   36e5c:	lsl	r2, r2, #2
   36e60:	add	r1, r0, r5, lsl #2
   36e64:	bl	12000 <memcpy@plt>
   36e68:	mov	r2, #0
   36e6c:	b	36e44 <__assert_fail@plt+0x24880>
   36e70:	mov	r2, #12
   36e74:	b	36e44 <__assert_fail@plt+0x24880>
   36e78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   36e7c:	strd	r6, [sp, #8]
   36e80:	strd	r8, [sp, #16]
   36e84:	strd	sl, [sp, #24]
   36e88:	str	lr, [sp, #32]
   36e8c:	sub	sp, sp, #44	; 0x2c
   36e90:	mov	sl, r0
   36e94:	mov	r4, r1
   36e98:	mov	r5, r2
   36e9c:	mov	fp, r3
   36ea0:	add	r7, r2, r2, lsl #1
   36ea4:	lsl	r7, r7, #2
   36ea8:	ldr	r3, [r1, #20]
   36eac:	add	r3, r3, r7
   36eb0:	ldr	r1, [r3, #4]
   36eb4:	add	r1, r1, #1
   36eb8:	add	r0, sp, #28
   36ebc:	bl	33fe8 <__assert_fail@plt+0x21a24>
   36ec0:	subs	r9, r0, #0
   36ec4:	bne	3708c <__assert_fail@plt+0x24ac8>
   36ec8:	mov	r8, r7
   36ecc:	ldr	r3, [sp, #32]
   36ed0:	add	r2, r3, #1
   36ed4:	str	r2, [sp, #32]
   36ed8:	ldr	r2, [sp, #36]	; 0x24
   36edc:	str	r5, [r2, r3, lsl #2]
   36ee0:	ldr	r3, [r4, #24]
   36ee4:	add	r3, r3, r7
   36ee8:	mvn	r2, #0
   36eec:	str	r2, [r3, #4]
   36ef0:	ldr	r2, [r4]
   36ef4:	lsl	r6, r5, #3
   36ef8:	add	r1, r2, r6
   36efc:	ldr	r0, [r1, #4]
   36f00:	mov	r3, #65280	; 0xff00
   36f04:	movt	r3, #3
   36f08:	and	r3, r3, r0
   36f0c:	cmp	r3, #0
   36f10:	beq	36f40 <__assert_fail@plt+0x2497c>
   36f14:	ldr	r3, [r4, #20]
   36f18:	add	r3, r3, r7
   36f1c:	ldr	r0, [r3, #4]
   36f20:	cmp	r0, #0
   36f24:	beq	370ac <__assert_fail@plt+0x24ae8>
   36f28:	ldr	r3, [r3, #8]
   36f2c:	ldr	r3, [r3]
   36f30:	add	r2, r2, r3, lsl #3
   36f34:	ldrb	r3, [r2, #6]
   36f38:	tst	r3, #4
   36f3c:	beq	36f78 <__assert_fail@plt+0x249b4>
   36f40:	ldr	r3, [r4]
   36f44:	add	r6, r3, r6
   36f48:	ldrb	r3, [r6, #4]
   36f4c:	tst	r3, #8
   36f50:	beq	370ac <__assert_fail@plt+0x24ae8>
   36f54:	ldr	r3, [r4, #20]
   36f58:	add	r3, r3, r7
   36f5c:	ldr	r2, [r3, #4]
   36f60:	cmp	r2, #0
   36f64:	ble	370ac <__assert_fail@plt+0x24ae8>
   36f68:	mov	r6, r9
   36f6c:	mov	r2, #0
   36f70:	str	r2, [sp, #12]
   36f74:	b	36fec <__assert_fail@plt+0x24a28>
   36f78:	ldr	r3, [r1, #4]
   36f7c:	ubfx	r3, r3, #8, #10
   36f80:	str	r3, [sp]
   36f84:	mov	r3, r5
   36f88:	mov	r2, r5
   36f8c:	mov	r1, r5
   36f90:	mov	r0, r4
   36f94:	bl	36864 <__assert_fail@plt+0x242a0>
   36f98:	cmp	r0, #0
   36f9c:	beq	36f40 <__assert_fail@plt+0x2497c>
   36fa0:	mov	r9, r0
   36fa4:	b	3708c <__assert_fail@plt+0x24ac8>
   36fa8:	mov	r1, r4
   36fac:	add	r0, sp, #16
   36fb0:	bl	36e78 <__assert_fail@plt+0x248b4>
   36fb4:	cmp	r0, #0
   36fb8:	beq	37030 <__assert_fail@plt+0x24a6c>
   36fbc:	mov	r9, r0
   36fc0:	b	3708c <__assert_fail@plt+0x24ac8>
   36fc4:	ldr	r0, [sp, #24]
   36fc8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   36fcc:	mov	r3, #1
   36fd0:	str	r3, [sp, #12]
   36fd4:	add	r6, r6, #1
   36fd8:	ldr	r3, [r4, #20]
   36fdc:	add	r3, r3, r8
   36fe0:	ldr	r2, [r3, #4]
   36fe4:	cmp	r2, r6
   36fe8:	ble	3705c <__assert_fail@plt+0x24a98>
   36fec:	ldr	r3, [r3, #8]
   36ff0:	ldr	r2, [r3, r6, lsl #2]
   36ff4:	add	r5, r2, r2, lsl #1
   36ff8:	lsl	r5, r5, #2
   36ffc:	ldr	r0, [r4, #24]
   37000:	add	r1, r0, r5
   37004:	ldr	r3, [r1, #4]
   37008:	cmn	r3, #1
   3700c:	moveq	r3, #1
   37010:	streq	r3, [sp, #12]
   37014:	beq	36fd4 <__assert_fail@plt+0x24a10>
   37018:	cmp	r3, #0
   3701c:	beq	36fa8 <__assert_fail@plt+0x249e4>
   37020:	ldrd	r2, [r0, r5]
   37024:	strd	r2, [sp, #16]
   37028:	ldr	r3, [r1, #8]
   3702c:	str	r3, [sp, #24]
   37030:	add	r1, sp, #16
   37034:	add	r0, sp, #28
   37038:	bl	36cc8 <__assert_fail@plt+0x24704>
   3703c:	cmp	r0, #0
   37040:	bne	36fbc <__assert_fail@plt+0x249f8>
   37044:	ldr	r3, [r4, #24]
   37048:	add	r5, r3, r5
   3704c:	ldr	r3, [r5, #4]
   37050:	cmp	r3, #0
   37054:	bne	36fd4 <__assert_fail@plt+0x24a10>
   37058:	b	36fc4 <__assert_fail@plt+0x24a00>
   3705c:	eor	fp, fp, #1
   37060:	ldr	r3, [sp, #12]
   37064:	tst	r3, fp
   37068:	beq	370ac <__assert_fail@plt+0x24ae8>
   3706c:	ldr	r3, [r4, #24]
   37070:	add	r7, r3, r7
   37074:	mov	r3, #0
   37078:	str	r3, [r7, #4]
   3707c:	ldrd	r2, [sp, #28]
   37080:	strd	r2, [sl]
   37084:	ldr	r3, [sp, #36]	; 0x24
   37088:	str	r3, [sl, #8]
   3708c:	mov	r0, r9
   37090:	add	sp, sp, #44	; 0x2c
   37094:	ldrd	r4, [sp]
   37098:	ldrd	r6, [sp, #8]
   3709c:	ldrd	r8, [sp, #16]
   370a0:	ldrd	sl, [sp, #24]
   370a4:	add	sp, sp, #32
   370a8:	pop	{pc}		; (ldr pc, [sp], #4)
   370ac:	ldr	r1, [r4, #24]
   370b0:	add	r0, r1, r7
   370b4:	ldrd	r2, [sp, #28]
   370b8:	strd	r2, [r1, r7]
   370bc:	ldr	r3, [sp, #36]	; 0x24
   370c0:	str	r3, [r0, #8]
   370c4:	b	3707c <__assert_fail@plt+0x24ab8>
   370c8:	strd	r4, [sp, #-16]!
   370cc:	str	r6, [sp, #8]
   370d0:	str	lr, [sp, #12]
   370d4:	mov	r5, r0
   370d8:	cmp	r1, #0
   370dc:	ldrlt	r0, [r0, #60]	; 0x3c
   370e0:	blt	37120 <__assert_fail@plt+0x24b5c>
   370e4:	ldr	r3, [r5, #48]	; 0x30
   370e8:	cmp	r3, r1
   370ec:	beq	37130 <__assert_fail@plt+0x24b6c>
   370f0:	ldr	r3, [r5, #80]	; 0x50
   370f4:	cmp	r3, #1
   370f8:	ble	37198 <__assert_fail@plt+0x24bd4>
   370fc:	ldr	r3, [r5, #8]
   37100:	add	r3, r3, r1, lsl #2
   37104:	ldr	r4, [r3], #-4
   37108:	cmn	r4, #1
   3710c:	bne	37144 <__assert_fail@plt+0x24b80>
   37110:	sub	r1, r1, #1
   37114:	cmn	r1, #1
   37118:	bne	37104 <__assert_fail@plt+0x24b40>
   3711c:	ldr	r0, [r5, #60]	; 0x3c
   37120:	ldrd	r4, [sp]
   37124:	ldr	r6, [sp, #8]
   37128:	add	sp, sp, #12
   3712c:	pop	{pc}		; (ldr pc, [sp], #4)
   37130:	and	r2, r2, #2
   37134:	cmp	r2, #0
   37138:	movne	r0, #8
   3713c:	moveq	r0, #10
   37140:	b	37120 <__assert_fail@plt+0x24b5c>
   37144:	ldrb	r3, [r5, #78]	; 0x4e
   37148:	cmp	r3, #0
   3714c:	bne	37170 <__assert_fail@plt+0x24bac>
   37150:	cmp	r4, #10
   37154:	movne	r0, #0
   37158:	bne	37120 <__assert_fail@plt+0x24b5c>
   3715c:	ldrb	r3, [r5, #77]	; 0x4d
   37160:	cmp	r3, #0
   37164:	moveq	r0, #0
   37168:	movne	r0, #2
   3716c:	b	37120 <__assert_fail@plt+0x24b5c>
   37170:	mov	r0, r4
   37174:	bl	12324 <iswalnum@plt>
   37178:	adds	r3, r0, #0
   3717c:	movne	r3, #1
   37180:	cmp	r4, #95	; 0x5f
   37184:	orreq	r3, r3, #1
   37188:	cmp	r3, #0
   3718c:	movne	r0, #1
   37190:	bne	37120 <__assert_fail@plt+0x24b5c>
   37194:	b	37150 <__assert_fail@plt+0x24b8c>
   37198:	ldr	r3, [r5, #4]
   3719c:	ldrb	r3, [r3, r1]
   371a0:	asr	r0, r3, #5
   371a4:	ldr	r1, [r5, #68]	; 0x44
   371a8:	and	r2, r3, #31
   371ac:	ldr	r0, [r1, r0, lsl #2]
   371b0:	lsr	r0, r0, r2
   371b4:	ands	r0, r0, #1
   371b8:	bne	37120 <__assert_fail@plt+0x24b5c>
   371bc:	cmp	r3, #10
   371c0:	bne	37120 <__assert_fail@plt+0x24b5c>
   371c4:	ldrb	r3, [r5, #77]	; 0x4d
   371c8:	cmp	r3, #0
   371cc:	movne	r0, #2
   371d0:	b	37120 <__assert_fail@plt+0x24b5c>
   371d4:	str	r4, [sp, #-8]!
   371d8:	str	lr, [sp, #4]
   371dc:	ldr	r3, [r0, #4]
   371e0:	ldrb	ip, [r3, r2]
   371e4:	ldrb	r3, [r1, #4]
   371e8:	sub	r3, r3, #1
   371ec:	cmp	r3, #6
   371f0:	ldrls	pc, [pc, r3, lsl #2]
   371f4:	b	3731c <__assert_fail@plt+0x24d58>
   371f8:	andeq	r7, r3, r4, lsl r2
   371fc:	andeq	r7, r3, ip, lsl r3
   37200:	andeq	r7, r3, r8, lsr #4
   37204:	andeq	r7, r3, ip, lsl r3
   37208:	andeq	r7, r3, r8, lsr #5
   3720c:	andeq	r7, r3, ip, lsl r3
   37210:	muleq	r3, ip, r2
   37214:	ldrb	r3, [r1]
   37218:	cmp	r3, ip
   3721c:	movne	r0, #0
   37220:	bne	37320 <__assert_fail@plt+0x24d5c>
   37224:	b	37244 <__assert_fail@plt+0x24c80>
   37228:	lsr	lr, ip, #5
   3722c:	ldr	r3, [r1]
   37230:	and	ip, ip, #31
   37234:	ldr	r3, [r3, lr, lsl #2]
   37238:	lsr	ip, r3, ip
   3723c:	tst	ip, #1
   37240:	beq	3732c <__assert_fail@plt+0x24d68>
   37244:	ldr	ip, [r1, #4]
   37248:	mov	r3, #65280	; 0xff00
   3724c:	movt	r3, #3
   37250:	and	r3, r3, ip
   37254:	cmp	r3, #0
   37258:	moveq	r0, #1
   3725c:	beq	37320 <__assert_fail@plt+0x24d5c>
   37260:	mov	r3, r2
   37264:	mov	r4, r1
   37268:	ldr	r2, [r0, #88]	; 0x58
   3726c:	mov	r1, r3
   37270:	bl	370c8 <__assert_fail@plt+0x24b04>
   37274:	ldr	r3, [r4, #4]
   37278:	ubfx	r3, r3, #8, #10
   3727c:	tst	r3, #4
   37280:	beq	372e8 <__assert_fail@plt+0x24d24>
   37284:	tst	r0, #1
   37288:	beq	37334 <__assert_fail@plt+0x24d70>
   3728c:	tst	r3, #8
   37290:	beq	372f8 <__assert_fail@plt+0x24d34>
   37294:	mov	r0, #0
   37298:	b	37320 <__assert_fail@plt+0x24d5c>
   3729c:	tst	ip, #128	; 0x80
   372a0:	movne	r0, #0
   372a4:	bne	37320 <__assert_fail@plt+0x24d5c>
   372a8:	cmp	ip, #10
   372ac:	beq	372d0 <__assert_fail@plt+0x24d0c>
   372b0:	cmp	ip, #0
   372b4:	bne	37244 <__assert_fail@plt+0x24c80>
   372b8:	ldr	r3, [r0, #84]	; 0x54
   372bc:	ldr	r3, [r3, #128]	; 0x80
   372c0:	tst	r3, #128	; 0x80
   372c4:	movne	r0, #0
   372c8:	beq	37244 <__assert_fail@plt+0x24c80>
   372cc:	b	37320 <__assert_fail@plt+0x24d5c>
   372d0:	ldr	r3, [r0, #84]	; 0x54
   372d4:	ldr	r3, [r3, #128]	; 0x80
   372d8:	tst	r3, #64	; 0x40
   372dc:	bne	37244 <__assert_fail@plt+0x24c80>
   372e0:	mov	r0, #0
   372e4:	b	37320 <__assert_fail@plt+0x24d5c>
   372e8:	tst	r3, #8
   372ec:	beq	372f8 <__assert_fail@plt+0x24d34>
   372f0:	tst	r0, #1
   372f4:	bne	3733c <__assert_fail@plt+0x24d78>
   372f8:	tst	r3, #32
   372fc:	beq	3730c <__assert_fail@plt+0x24d48>
   37300:	tst	r0, #2
   37304:	moveq	r0, #0
   37308:	beq	37320 <__assert_fail@plt+0x24d5c>
   3730c:	tst	r3, #128	; 0x80
   37310:	ubfxne	r0, r0, #3, #1
   37314:	moveq	r0, #1
   37318:	b	37320 <__assert_fail@plt+0x24d5c>
   3731c:	mov	r0, #0
   37320:	ldr	r4, [sp]
   37324:	add	sp, sp, #4
   37328:	pop	{pc}		; (ldr pc, [sp], #4)
   3732c:	mov	r0, #0
   37330:	b	37320 <__assert_fail@plt+0x24d5c>
   37334:	mov	r0, #0
   37338:	b	37320 <__assert_fail@plt+0x24d5c>
   3733c:	mov	r0, #0
   37340:	b	37320 <__assert_fail@plt+0x24d5c>
   37344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37348:	strd	r6, [sp, #8]
   3734c:	strd	r8, [sp, #16]
   37350:	strd	sl, [sp, #24]
   37354:	str	lr, [sp, #32]
   37358:	sub	sp, sp, #4
   3735c:	ldr	r7, [r0, #84]	; 0x54
   37360:	ldr	r3, [r1, #4]
   37364:	cmp	r3, #0
   37368:	ble	37468 <__assert_fail@plt+0x24ea4>
   3736c:	mov	r9, r2
   37370:	mov	r6, r1
   37374:	mov	r8, r0
   37378:	mov	r4, #0
   3737c:	b	373b0 <__assert_fail@plt+0x24dec>
   37380:	lsl	sl, r1, #1
   37384:	lsl	r1, r1, #3
   37388:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3738c:	cmp	r0, #0
   37390:	beq	37470 <__assert_fail@plt+0x24eac>
   37394:	str	r0, [r8, #132]	; 0x84
   37398:	str	sl, [r8, #128]	; 0x80
   3739c:	b	373fc <__assert_fail@plt+0x24e38>
   373a0:	add	r4, r4, #1
   373a4:	ldr	r3, [r6, #4]
   373a8:	cmp	r3, r4
   373ac:	ble	37448 <__assert_fail@plt+0x24e84>
   373b0:	ldr	r3, [r6, #8]
   373b4:	ldr	r5, [r3, r4, lsl #2]
   373b8:	ldr	r3, [r7]
   373bc:	add	r2, r3, r5, lsl #3
   373c0:	ldrb	r2, [r2, #4]
   373c4:	cmp	r2, #8
   373c8:	bne	373a0 <__assert_fail@plt+0x24ddc>
   373cc:	ldr	r3, [r3, r5, lsl #3]
   373d0:	cmp	r3, #31
   373d4:	bgt	373a0 <__assert_fail@plt+0x24ddc>
   373d8:	ldr	r2, [r7, #80]	; 0x50
   373dc:	lsr	r3, r2, r3
   373e0:	tst	r3, #1
   373e4:	beq	373a0 <__assert_fail@plt+0x24ddc>
   373e8:	ldr	r0, [r8, #132]	; 0x84
   373ec:	ldr	r1, [r8, #128]	; 0x80
   373f0:	ldr	r3, [r8, #124]	; 0x7c
   373f4:	cmp	r1, r3
   373f8:	beq	37380 <__assert_fail@plt+0x24dbc>
   373fc:	ldr	fp, [r8, #124]	; 0x7c
   37400:	ldr	sl, [r8, #132]	; 0x84
   37404:	mov	r1, #24
   37408:	mov	r0, #1
   3740c:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   37410:	str	r0, [sl, fp, lsl #2]
   37414:	ldr	r2, [r8, #124]	; 0x7c
   37418:	ldr	r3, [r8, #132]	; 0x84
   3741c:	ldr	r3, [r3, r2, lsl #2]
   37420:	cmp	r3, #0
   37424:	beq	37470 <__assert_fail@plt+0x24eac>
   37428:	str	r5, [r3, #4]
   3742c:	ldr	r2, [r8, #132]	; 0x84
   37430:	ldr	r3, [r8, #124]	; 0x7c
   37434:	add	r1, r3, #1
   37438:	str	r1, [r8, #124]	; 0x7c
   3743c:	ldr	r3, [r2, r3, lsl #2]
   37440:	str	r9, [r3]
   37444:	b	373a0 <__assert_fail@plt+0x24ddc>
   37448:	mov	r0, #0
   3744c:	add	sp, sp, #4
   37450:	ldrd	r4, [sp]
   37454:	ldrd	r6, [sp, #8]
   37458:	ldrd	r8, [sp, #16]
   3745c:	ldrd	sl, [sp, #24]
   37460:	add	sp, sp, #32
   37464:	pop	{pc}		; (ldr pc, [sp], #4)
   37468:	mov	r0, #0
   3746c:	b	3744c <__assert_fail@plt+0x24e88>
   37470:	mov	r0, #12
   37474:	b	3744c <__assert_fail@plt+0x24e88>
   37478:	strd	r4, [sp, #-16]!
   3747c:	str	r6, [sp, #8]
   37480:	str	lr, [sp, #12]
   37484:	mov	r4, r0
   37488:	mov	r5, r1
   3748c:	ldr	r6, [r0, #104]	; 0x68
   37490:	ldr	r3, [r0, #36]	; 0x24
   37494:	cmp	r3, r1
   37498:	bgt	374a8 <__assert_fail@plt+0x24ee4>
   3749c:	ldr	r2, [r0, #48]	; 0x30
   374a0:	cmp	r3, r2
   374a4:	blt	374c0 <__assert_fail@plt+0x24efc>
   374a8:	ldr	r3, [r4, #28]
   374ac:	cmp	r3, r5
   374b0:	bgt	374d4 <__assert_fail@plt+0x24f10>
   374b4:	ldr	r2, [r4, #48]	; 0x30
   374b8:	cmp	r3, r2
   374bc:	bge	374d4 <__assert_fail@plt+0x24f10>
   374c0:	add	r1, r5, #1
   374c4:	mov	r0, r4
   374c8:	bl	34cec <__assert_fail@plt+0x22728>
   374cc:	cmp	r0, #0
   374d0:	bne	37504 <__assert_fail@plt+0x24f40>
   374d4:	cmp	r6, r5
   374d8:	movge	r0, #0
   374dc:	bge	37504 <__assert_fail@plt+0x24f40>
   374e0:	sub	r2, r5, r6
   374e4:	add	r6, r6, #1
   374e8:	ldr	r0, [r4, #100]	; 0x64
   374ec:	lsl	r2, r2, #2
   374f0:	mov	r1, #0
   374f4:	add	r0, r0, r6, lsl #2
   374f8:	bl	12348 <memset@plt>
   374fc:	str	r5, [r4, #104]	; 0x68
   37500:	mov	r0, #0
   37504:	ldrd	r4, [sp]
   37508:	ldr	r6, [sp, #8]
   3750c:	add	sp, sp, #12
   37510:	pop	{pc}		; (ldr pc, [sp], #4)
   37514:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37518:	strd	r6, [sp, #8]
   3751c:	strd	r8, [sp, #16]
   37520:	strd	sl, [sp, #24]
   37524:	str	lr, [sp, #32]
   37528:	sub	sp, sp, #28
   3752c:	mov	r5, r0
   37530:	mov	r6, r1
   37534:	mov	r7, r2
   37538:	mov	r8, r3
   3753c:	ldr	r1, [r1, #4]
   37540:	add	r0, sp, #12
   37544:	bl	33fe8 <__assert_fail@plt+0x21a24>
   37548:	subs	r9, r0, #0
   3754c:	bne	37624 <__assert_fail@plt+0x25060>
   37550:	ldr	r3, [r6, #4]
   37554:	cmp	r3, #0
   37558:	ble	37644 <__assert_fail@plt+0x25080>
   3755c:	mov	r4, r9
   37560:	b	375c4 <__assert_fail@plt+0x25000>
   37564:	add	r0, r0, #1
   37568:	cmp	lr, r0
   3756c:	beq	375f8 <__assert_fail@plt+0x25034>
   37570:	ldr	ip, [r3, #4]!
   37574:	add	fp, sl, ip, lsl #3
   37578:	ldrb	fp, [fp, #4]
   3757c:	cmp	r8, fp
   37580:	bne	37564 <__assert_fail@plt+0x24fa0>
   37584:	ldr	fp, [sl, ip, lsl #3]
   37588:	cmp	r7, fp
   3758c:	bne	37564 <__assert_fail@plt+0x24fa0>
   37590:	cmn	ip, #1
   37594:	beq	375f8 <__assert_fail@plt+0x25034>
   37598:	str	r8, [sp]
   3759c:	mov	r3, r7
   375a0:	add	r1, sp, #12
   375a4:	mov	r0, r5
   375a8:	bl	36ba4 <__assert_fail@plt+0x245e0>
   375ac:	subs	sl, r0, #0
   375b0:	bne	37618 <__assert_fail@plt+0x25054>
   375b4:	add	r4, r4, #1
   375b8:	ldr	r3, [r6, #4]
   375bc:	cmp	r3, r4
   375c0:	ble	37644 <__assert_fail@plt+0x25080>
   375c4:	ldr	r3, [r6, #8]
   375c8:	ldr	r2, [r3, r4, lsl #2]
   375cc:	add	r3, r2, r2, lsl #1
   375d0:	ldr	r1, [r5, #24]
   375d4:	add	r1, r1, r3, lsl #2
   375d8:	ldr	lr, [r1, #4]
   375dc:	cmp	lr, #0
   375e0:	ble	375f8 <__assert_fail@plt+0x25034>
   375e4:	ldr	sl, [r5]
   375e8:	ldr	r3, [r1, #8]
   375ec:	sub	r3, r3, #4
   375f0:	mov	r0, r9
   375f4:	b	37570 <__assert_fail@plt+0x24fac>
   375f8:	add	r0, sp, #12
   375fc:	bl	36cc8 <__assert_fail@plt+0x24704>
   37600:	subs	sl, r0, #0
   37604:	beq	375b4 <__assert_fail@plt+0x24ff0>
   37608:	ldr	r0, [sp, #20]
   3760c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   37610:	mov	r9, sl
   37614:	b	37624 <__assert_fail@plt+0x25060>
   37618:	ldr	r0, [sp, #20]
   3761c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   37620:	mov	r9, sl
   37624:	mov	r0, r9
   37628:	add	sp, sp, #28
   3762c:	ldrd	r4, [sp]
   37630:	ldrd	r6, [sp, #8]
   37634:	ldrd	r8, [sp, #16]
   37638:	ldrd	sl, [sp, #24]
   3763c:	add	sp, sp, #32
   37640:	pop	{pc}		; (ldr pc, [sp], #4)
   37644:	ldr	r0, [r6, #8]
   37648:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3764c:	ldrd	r2, [sp, #12]
   37650:	strd	r2, [r6]
   37654:	ldr	r3, [sp, #20]
   37658:	str	r3, [r6, #8]
   3765c:	b	37624 <__assert_fail@plt+0x25060>
   37660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37664:	strd	r6, [sp, #8]
   37668:	strd	r8, [sp, #16]
   3766c:	strd	sl, [sp, #24]
   37670:	str	lr, [sp, #32]
   37674:	sub	sp, sp, #14464	; 0x3880
   37678:	sub	sp, sp, #44	; 0x2c
   3767c:	str	r1, [sp, #16]
   37680:	mov	r3, #0
   37684:	str	r3, [r1, #44]	; 0x2c
   37688:	str	r3, [r1, #48]	; 0x30
   3768c:	mov	r2, #0
   37690:	mov	r3, #0
   37694:	strd	r2, [sp, #24]
   37698:	strd	r2, [sp, #32]
   3769c:	strd	r2, [sp, #40]	; 0x28
   376a0:	strd	r2, [sp, #48]	; 0x30
   376a4:	ldr	r3, [r1, #8]
   376a8:	cmp	r3, #0
   376ac:	ble	37cfc <__assert_fail@plt+0x25738>
   376b0:	mov	r9, r1
   376b4:	mov	sl, #0
   376b8:	str	sl, [sp, #4]
   376bc:	str	r0, [sp, #8]
   376c0:	b	37b38 <__assert_fail@plt+0x25574>
   376c4:	ldrb	r3, [r3, r1, lsl #3]
   376c8:	asr	r0, r3, #5
   376cc:	and	r3, r3, #31
   376d0:	add	r1, sp, #24
   376d4:	ldr	r1, [r1, r0, lsl #2]
   376d8:	mov	ip, #1
   376dc:	orr	r3, r1, ip, lsl r3
   376e0:	add	r1, sp, #24
   376e4:	str	r3, [r1, r0, lsl #2]
   376e8:	cmp	r2, #0
   376ec:	beq	377cc <__assert_fail@plt+0x25208>
   376f0:	tst	r2, #32
   376f4:	bne	37898 <__assert_fail@plt+0x252d4>
   376f8:	tst	r2, #128	; 0x80
   376fc:	bne	378c8 <__assert_fail@plt+0x25304>
   37700:	tst	r2, #4
   37704:	beq	37768 <__assert_fail@plt+0x251a4>
   37708:	cmp	r7, #1
   3770c:	beq	378e4 <__assert_fail@plt+0x25320>
   37710:	ldr	r1, [sp, #8]
   37714:	ldr	r3, [r1, #92]	; 0x5c
   37718:	cmp	r3, #1
   3771c:	ble	3790c <__assert_fail@plt+0x25348>
   37720:	add	ip, sp, #20
   37724:	add	r0, r1, #96	; 0x60
   37728:	ldr	lr, [r1, #60]	; 0x3c
   3772c:	sub	lr, lr, #4
   37730:	add	r4, r1, #128	; 0x80
   37734:	mov	r1, #0
   37738:	ldr	r5, [r0], #4
   3773c:	ldr	r3, [lr, #4]!
   37740:	mvn	r3, r3
   37744:	orr	r3, r3, r5
   37748:	ldr	r5, [ip, #4]!
   3774c:	and	r3, r3, r5
   37750:	str	r3, [ip]
   37754:	orr	r1, r1, r3
   37758:	cmp	r0, r4
   3775c:	bne	37738 <__assert_fail@plt+0x25174>
   37760:	cmp	r1, #0
   37764:	beq	37b1c <__assert_fail@plt+0x25558>
   37768:	tst	r2, #8
   3776c:	beq	377cc <__assert_fail@plt+0x25208>
   37770:	cmp	r7, #1
   37774:	beq	37940 <__assert_fail@plt+0x2537c>
   37778:	ldr	r2, [sp, #8]
   3777c:	ldr	r3, [r2, #92]	; 0x5c
   37780:	cmp	r3, #1
   37784:	ble	37968 <__assert_fail@plt+0x253a4>
   37788:	add	r0, sp, #20
   3778c:	add	r1, r2, #96	; 0x60
   37790:	ldr	ip, [r2, #60]	; 0x3c
   37794:	sub	ip, ip, #4
   37798:	add	lr, r2, #128	; 0x80
   3779c:	mov	r2, #0
   377a0:	ldr	r3, [r1], #4
   377a4:	ldr	r4, [ip, #4]!
   377a8:	and	r4, r4, r3
   377ac:	ldr	r3, [r0, #4]!
   377b0:	bic	r3, r3, r4
   377b4:	str	r3, [r0]
   377b8:	orr	r2, r2, r3
   377bc:	cmp	r1, lr
   377c0:	bne	377a0 <__assert_fail@plt+0x251dc>
   377c4:	cmp	r2, #0
   377c8:	beq	37b1c <__assert_fail@plt+0x25558>
   377cc:	cmp	sl, #0
   377d0:	addgt	r4, sp, #148	; 0x94
   377d4:	movgt	r5, #0
   377d8:	bgt	379e8 <__assert_fail@plt+0x25424>
   377dc:	mov	r5, #0
   377e0:	b	37b14 <__assert_fail@plt+0x25550>
   377e4:	ldr	lr, [r3, r1, lsl #3]
   377e8:	add	r0, sp, #20
   377ec:	sub	r1, lr, #4
   377f0:	add	lr, lr, #28
   377f4:	ldr	r3, [r0, #4]!
   377f8:	ldr	ip, [r1, #4]!
   377fc:	orr	r3, r3, ip
   37800:	str	r3, [r0]
   37804:	cmp	r1, lr
   37808:	bne	377f4 <__assert_fail@plt+0x25230>
   3780c:	b	376e8 <__assert_fail@plt+0x25124>
   37810:	ldr	r1, [sp, #8]
   37814:	ldr	r3, [r1, #92]	; 0x5c
   37818:	cmp	r3, #1
   3781c:	ble	3784c <__assert_fail@plt+0x25288>
   37820:	ldr	lr, [r1, #60]	; 0x3c
   37824:	add	r0, sp, #20
   37828:	sub	r1, lr, #4
   3782c:	add	lr, lr, #28
   37830:	ldr	r3, [r0, #4]!
   37834:	ldr	ip, [r1, #4]!
   37838:	orr	r3, r3, ip
   3783c:	str	r3, [r0]
   37840:	cmp	r1, lr
   37844:	bne	37830 <__assert_fail@plt+0x2526c>
   37848:	b	37864 <__assert_fail@plt+0x252a0>
   3784c:	mvn	r0, #0
   37850:	mvn	r1, #0
   37854:	strd	r0, [sp, #24]
   37858:	strd	r0, [sp, #32]
   3785c:	strd	r0, [sp, #40]	; 0x28
   37860:	strd	r0, [sp, #48]	; 0x30
   37864:	ldr	r3, [sp, #8]
   37868:	ldr	r3, [r3, #128]	; 0x80
   3786c:	tst	r3, #64	; 0x40
   37870:	bne	37880 <__assert_fail@plt+0x252bc>
   37874:	ldr	r1, [sp, #24]
   37878:	bic	r1, r1, #1024	; 0x400
   3787c:	str	r1, [sp, #24]
   37880:	tst	r3, #128	; 0x80
   37884:	beq	376e8 <__assert_fail@plt+0x25124>
   37888:	ldr	r3, [sp, #24]
   3788c:	bic	r3, r3, #1
   37890:	str	r3, [sp, #24]
   37894:	b	376e8 <__assert_fail@plt+0x25124>
   37898:	ldr	r3, [sp, #24]
   3789c:	mov	r0, #0
   378a0:	mov	r1, #0
   378a4:	strd	r0, [sp, #24]
   378a8:	strd	r0, [sp, #32]
   378ac:	strd	r0, [sp, #40]	; 0x28
   378b0:	strd	r0, [sp, #48]	; 0x30
   378b4:	tst	r3, #1024	; 0x400
   378b8:	beq	37b1c <__assert_fail@plt+0x25558>
   378bc:	mov	r3, #1024	; 0x400
   378c0:	str	r3, [sp, #24]
   378c4:	b	376f8 <__assert_fail@plt+0x25134>
   378c8:	mov	r2, #0
   378cc:	mov	r3, #0
   378d0:	strd	r2, [sp, #24]
   378d4:	strd	r2, [sp, #32]
   378d8:	strd	r2, [sp, #40]	; 0x28
   378dc:	strd	r2, [sp, #48]	; 0x30
   378e0:	b	37b1c <__assert_fail@plt+0x25558>
   378e4:	ldrb	r3, [r8, #6]
   378e8:	tst	r3, #64	; 0x40
   378ec:	bne	37710 <__assert_fail@plt+0x2514c>
   378f0:	mov	r2, #0
   378f4:	mov	r3, #0
   378f8:	strd	r2, [sp, #24]
   378fc:	strd	r2, [sp, #32]
   37900:	strd	r2, [sp, #40]	; 0x28
   37904:	strd	r2, [sp, #48]	; 0x30
   37908:	b	37b1c <__assert_fail@plt+0x25558>
   3790c:	add	ip, sp, #20
   37910:	ldr	r3, [sp, #8]
   37914:	add	r0, r3, #96	; 0x60
   37918:	add	lr, r3, #128	; 0x80
   3791c:	mov	r1, #0
   37920:	ldr	r3, [r0], #4
   37924:	ldr	r4, [ip, #4]!
   37928:	and	r3, r3, r4
   3792c:	str	r3, [ip]
   37930:	orr	r1, r1, r3
   37934:	cmp	r0, lr
   37938:	bne	37920 <__assert_fail@plt+0x2535c>
   3793c:	b	37760 <__assert_fail@plt+0x2519c>
   37940:	ldrb	r3, [r8, #6]
   37944:	tst	r3, #64	; 0x40
   37948:	beq	37778 <__assert_fail@plt+0x251b4>
   3794c:	mov	r2, #0
   37950:	mov	r3, #0
   37954:	strd	r2, [sp, #24]
   37958:	strd	r2, [sp, #32]
   3795c:	strd	r2, [sp, #40]	; 0x28
   37960:	strd	r2, [sp, #48]	; 0x30
   37964:	b	37b1c <__assert_fail@plt+0x25558>
   37968:	add	r0, sp, #20
   3796c:	ldr	r3, [sp, #8]
   37970:	add	r1, r3, #96	; 0x60
   37974:	add	lr, r3, #128	; 0x80
   37978:	mov	r2, #0
   3797c:	ldr	ip, [r1], #4
   37980:	ldr	r3, [r0, #4]!
   37984:	bic	r3, r3, ip
   37988:	str	r3, [r0]
   3798c:	orr	r2, r2, r3
   37990:	cmp	r1, lr
   37994:	bne	3797c <__assert_fail@plt+0x253b8>
   37998:	b	377c4 <__assert_fail@plt+0x25200>
   3799c:	add	r2, sp, #20
   379a0:	sub	r1, r4, #32
   379a4:	add	r6, sp, #52	; 0x34
   379a8:	mov	ip, r1
   379ac:	mov	lr, r2
   379b0:	mov	r0, #0
   379b4:	ldr	r3, [lr, #4]!
   379b8:	ldr	fp, [ip, #4]!
   379bc:	and	r3, r3, fp
   379c0:	str	r3, [r6, #4]!
   379c4:	orr	r0, r0, r3
   379c8:	cmp	ip, r4
   379cc:	bne	379b4 <__assert_fail@plt+0x253f0>
   379d0:	cmp	r0, #0
   379d4:	bne	37a28 <__assert_fail@plt+0x25464>
   379d8:	add	r5, r5, #1
   379dc:	add	r4, r4, #32
   379e0:	cmp	r5, sl
   379e4:	bge	37b14 <__assert_fail@plt+0x25550>
   379e8:	cmp	r7, #1
   379ec:	bne	3799c <__assert_fail@plt+0x253d8>
   379f0:	ldrb	r2, [r8]
   379f4:	asr	r1, r2, #5
   379f8:	lsl	r3, r5, #5
   379fc:	add	r3, r3, r1, lsl #2
   37a00:	add	r1, sp, #14464	; 0x3880
   37a04:	add	r1, r1, #40	; 0x28
   37a08:	add	r3, r1, r3
   37a0c:	sub	r3, r3, #14336	; 0x3800
   37a10:	and	r2, r2, #31
   37a14:	ldr	r3, [r3, #-48]	; 0xffffffd0
   37a18:	lsr	r2, r3, r2
   37a1c:	tst	r2, #1
   37a20:	beq	379d8 <__assert_fail@plt+0x25414>
   37a24:	b	3799c <__assert_fail@plt+0x253d8>
   37a28:	add	fp, sp, #84	; 0x54
   37a2c:	mov	r6, #0
   37a30:	mov	lr, r6
   37a34:	ldr	r3, [r2, #4]!
   37a38:	ldr	r0, [r1, #4]!
   37a3c:	bic	ip, r0, r3
   37a40:	str	ip, [fp, #4]!
   37a44:	orr	lr, lr, ip
   37a48:	bic	r3, r3, r0
   37a4c:	str	r3, [r2]
   37a50:	orr	r6, r6, r3
   37a54:	cmp	r1, r4
   37a58:	bne	37a34 <__assert_fail@plt+0x25470>
   37a5c:	cmp	lr, #0
   37a60:	beq	37ae4 <__assert_fail@plt+0x25520>
   37a64:	add	r3, sp, #14464	; 0x3880
   37a68:	add	r3, r3, #40	; 0x28
   37a6c:	add	ip, r3, sl, lsl #5
   37a70:	sub	ip, ip, #14336	; 0x3800
   37a74:	add	r1, sp, #88	; 0x58
   37a78:	ldrd	r2, [r1]
   37a7c:	strd	r2, [ip, #-48]	; 0xffffffd0
   37a80:	ldrd	r2, [r1, #8]
   37a84:	strd	r2, [ip, #-40]	; 0xffffffd8
   37a88:	ldrd	r2, [r1, #16]
   37a8c:	strd	r2, [ip, #-32]	; 0xffffffe0
   37a90:	ldrd	r2, [r1, #24]
   37a94:	strd	r2, [ip, #-24]	; 0xffffffe8
   37a98:	add	r1, sp, #56	; 0x38
   37a9c:	ldrd	r2, [r1]
   37aa0:	strd	r2, [r4, #-28]	; 0xffffffe4
   37aa4:	ldrd	r2, [r1, #8]
   37aa8:	strd	r2, [r4, #-20]	; 0xffffffec
   37aac:	ldrd	r2, [r1, #16]
   37ab0:	strd	r2, [r4, #-12]
   37ab4:	ldrd	r2, [r1, #24]
   37ab8:	strd	r2, [r4, #-4]
   37abc:	add	r1, r5, r5, lsl #1
   37ac0:	add	r0, sl, sl, lsl #1
   37ac4:	add	r3, sp, #8256	; 0x2040
   37ac8:	add	r3, r3, #56	; 0x38
   37acc:	add	r1, r3, r1, lsl #2
   37ad0:	add	r0, r3, r0, lsl #2
   37ad4:	bl	34864 <__assert_fail@plt+0x222a0>
   37ad8:	cmp	r0, #0
   37adc:	bne	37c40 <__assert_fail@plt+0x2567c>
   37ae0:	add	sl, sl, #1
   37ae4:	ldr	r3, [r9, #12]
   37ae8:	add	r0, r5, r5, lsl #1
   37aec:	ldr	r2, [sp, #12]
   37af0:	ldr	r1, [r3, r2]
   37af4:	add	r3, sp, #8256	; 0x2040
   37af8:	add	r3, r3, #56	; 0x38
   37afc:	add	r0, r3, r0, lsl #2
   37b00:	bl	36730 <__assert_fail@plt+0x2416c>
   37b04:	cmp	r0, #0
   37b08:	beq	37c40 <__assert_fail@plt+0x2567c>
   37b0c:	cmp	r6, #0
   37b10:	bne	379d8 <__assert_fail@plt+0x25414>
   37b14:	cmp	sl, r5
   37b18:	beq	37bc8 <__assert_fail@plt+0x25604>
   37b1c:	ldr	r3, [sp, #4]
   37b20:	add	r3, r3, #1
   37b24:	mov	r2, r3
   37b28:	str	r3, [sp, #4]
   37b2c:	ldr	r3, [r9, #8]
   37b30:	cmp	r2, r3
   37b34:	bge	37c74 <__assert_fail@plt+0x256b0>
   37b38:	ldr	r2, [sp, #4]
   37b3c:	lsl	r3, r2, #2
   37b40:	str	r3, [sp, #12]
   37b44:	ldr	r3, [r9, #12]
   37b48:	ldr	r1, [r3, r2, lsl #2]
   37b4c:	ldr	r3, [sp, #8]
   37b50:	ldr	r3, [r3]
   37b54:	add	r8, r3, r1, lsl #3
   37b58:	ldrb	r7, [r8, #4]
   37b5c:	ldr	r2, [r8, #4]
   37b60:	ubfx	r2, r2, #8, #10
   37b64:	cmp	r7, #1
   37b68:	beq	376c4 <__assert_fail@plt+0x25100>
   37b6c:	cmp	r7, #3
   37b70:	beq	377e4 <__assert_fail@plt+0x25220>
   37b74:	cmp	r7, #5
   37b78:	beq	37810 <__assert_fail@plt+0x2524c>
   37b7c:	cmp	r7, #7
   37b80:	bne	37b1c <__assert_fail@plt+0x25558>
   37b84:	mvn	r0, #0
   37b88:	mvn	r1, #0
   37b8c:	strd	r0, [sp, #24]
   37b90:	strd	r0, [sp, #32]
   37b94:	ldr	r3, [sp, #8]
   37b98:	ldr	r3, [r3, #128]	; 0x80
   37b9c:	tst	r3, #64	; 0x40
   37ba0:	bne	37bb0 <__assert_fail@plt+0x255ec>
   37ba4:	ldr	r1, [sp, #24]
   37ba8:	bic	r1, r1, #1024	; 0x400
   37bac:	str	r1, [sp, #24]
   37bb0:	tst	r3, #128	; 0x80
   37bb4:	beq	376e8 <__assert_fail@plt+0x25124>
   37bb8:	ldr	r3, [sp, #24]
   37bbc:	bic	r3, r3, #1
   37bc0:	str	r3, [sp, #24]
   37bc4:	b	376e8 <__assert_fail@plt+0x25124>
   37bc8:	add	r3, sp, #14464	; 0x3880
   37bcc:	add	r3, r3, #40	; 0x28
   37bd0:	add	r1, r3, sl, lsl #5
   37bd4:	sub	r1, r1, #14336	; 0x3800
   37bd8:	ldrd	r2, [sp, #24]
   37bdc:	strd	r2, [r1, #-48]	; 0xffffffd0
   37be0:	ldrd	r2, [sp, #32]
   37be4:	strd	r2, [r1, #-40]	; 0xffffffd8
   37be8:	ldrd	r2, [sp, #40]	; 0x28
   37bec:	strd	r2, [r1, #-32]	; 0xffffffe0
   37bf0:	ldrd	r2, [sp, #48]	; 0x30
   37bf4:	strd	r2, [r1, #-24]	; 0xffffffe8
   37bf8:	ldr	r3, [r9, #12]
   37bfc:	add	r0, sl, sl, lsl #1
   37c00:	ldr	r2, [sp, #12]
   37c04:	ldr	r1, [r3, r2]
   37c08:	add	r3, sp, #8256	; 0x2040
   37c0c:	add	r3, r3, #56	; 0x38
   37c10:	add	r0, r3, r0, lsl #2
   37c14:	bl	33f90 <__assert_fail@plt+0x219cc>
   37c18:	cmp	r0, #0
   37c1c:	bne	37c40 <__assert_fail@plt+0x2567c>
   37c20:	add	sl, sl, #1
   37c24:	mov	r2, #0
   37c28:	mov	r3, #0
   37c2c:	strd	r2, [sp, #24]
   37c30:	strd	r2, [sp, #32]
   37c34:	strd	r2, [sp, #40]	; 0x28
   37c38:	strd	r2, [sp, #48]	; 0x30
   37c3c:	b	37b1c <__assert_fail@plt+0x25558>
   37c40:	cmp	sl, #0
   37c44:	ble	37c6c <__assert_fail@plt+0x256a8>
   37c48:	add	r4, sp, #8256	; 0x2040
   37c4c:	add	r4, r4, #56	; 0x38
   37c50:	add	r5, sl, sl, lsl #1
   37c54:	add	r5, r4, r5, lsl #2
   37c58:	ldr	r0, [r4, #8]
   37c5c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   37c60:	add	r4, r4, #12
   37c64:	cmp	r4, r5
   37c68:	bne	37c58 <__assert_fail@plt+0x25694>
   37c6c:	mov	r0, #0
   37c70:	b	37da8 <__assert_fail@plt+0x257e4>
   37c74:	ldr	r7, [sp, #8]
   37c78:	cmp	sl, #0
   37c7c:	ble	37cf8 <__assert_fail@plt+0x25734>
   37c80:	add	r1, sl, #1
   37c84:	add	r0, sp, #11392	; 0x2c80
   37c88:	add	r0, r0, #24
   37c8c:	bl	33fe8 <__assert_fail@plt+0x21a24>
   37c90:	str	r0, [sp, #4]
   37c94:	add	r2, sp, #14464	; 0x3880
   37c98:	add	r2, r2, #36	; 0x24
   37c9c:	str	r0, [r2]
   37ca0:	cmp	r0, #0
   37ca4:	bne	37d70 <__assert_fail@plt+0x257ac>
   37ca8:	add	r3, sp, #11328	; 0x2c40
   37cac:	add	r3, r3, #56	; 0x38
   37cb0:	mov	r0, #0
   37cb4:	mov	r1, #0
   37cb8:	strd	r0, [r3]
   37cbc:	strd	r0, [r3, #8]
   37cc0:	strd	r0, [r3, #16]
   37cc4:	strd	r0, [r3, #24]
   37cc8:	add	r8, sp, #8256	; 0x2040
   37ccc:	add	r8, r8, #56	; 0x38
   37cd0:	str	r8, [sp, #20]
   37cd4:	add	r3, sp, #120	; 0x78
   37cd8:	str	r3, [sp, #12]
   37cdc:	add	r6, sp, #148	; 0x94
   37ce0:	add	fp, sp, #13440	; 0x3480
   37ce4:	add	fp, fp, #36	; 0x24
   37ce8:	ldr	r9, [sp, #4]
   37cec:	mov	r3, #0
   37cf0:	str	r3, [sp, #8]
   37cf4:	b	37e54 <__assert_fail@plt+0x25890>
   37cf8:	bne	38168 <__assert_fail@plt+0x25ba4>
   37cfc:	mov	r1, #256	; 0x100
   37d00:	mov	r0, #4
   37d04:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   37d08:	ldr	r3, [sp, #16]
   37d0c:	str	r0, [r3, #44]	; 0x2c
   37d10:	adds	r0, r0, #0
   37d14:	movne	r0, #1
   37d18:	b	37da8 <__assert_fail@plt+0x257e4>
   37d1c:	add	r4, r4, #1
   37d20:	ldr	r3, [r5, #4]
   37d24:	cmp	r3, r4
   37d28:	ble	37dc8 <__assert_fail@plt+0x25804>
   37d2c:	ldr	r3, [r5, #8]
   37d30:	ldr	r2, [r3, r4, lsl #2]
   37d34:	ldr	r3, [r7, #12]
   37d38:	ldr	r1, [r3, r2, lsl #2]
   37d3c:	cmn	r1, #1
   37d40:	beq	37d1c <__assert_fail@plt+0x25758>
   37d44:	add	r1, r1, r1, lsl #1
   37d48:	ldr	r3, [r7, #24]
   37d4c:	add	r1, r3, r1, lsl #2
   37d50:	add	r0, sp, #11392	; 0x2c80
   37d54:	add	r0, r0, #24
   37d58:	bl	36cc8 <__assert_fail@plt+0x24704>
   37d5c:	add	r3, sp, #14464	; 0x3880
   37d60:	add	r3, r3, #36	; 0x24
   37d64:	str	r0, [r3]
   37d68:	cmp	r0, #0
   37d6c:	beq	37d1c <__assert_fail@plt+0x25758>
   37d70:	add	r3, sp, #11392	; 0x2c80
   37d74:	add	r3, r3, #32
   37d78:	ldr	r0, [r3]
   37d7c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   37d80:	add	r4, sp, #8256	; 0x2040
   37d84:	add	r4, r4, #56	; 0x38
   37d88:	add	r5, sl, sl, lsl #1
   37d8c:	add	r5, r4, r5, lsl #2
   37d90:	ldr	r0, [r4, #8]
   37d94:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   37d98:	add	r4, r4, #12
   37d9c:	cmp	r5, r4
   37da0:	bne	37d90 <__assert_fail@plt+0x257cc>
   37da4:	mov	r0, #0
   37da8:	add	sp, sp, #14464	; 0x3880
   37dac:	add	sp, sp, #44	; 0x2c
   37db0:	ldrd	r4, [sp]
   37db4:	ldrd	r6, [sp, #8]
   37db8:	ldrd	r8, [sp, #16]
   37dbc:	ldrd	sl, [sp, #24]
   37dc0:	add	sp, sp, #32
   37dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   37dc8:	mov	r3, #0
   37dcc:	add	r2, sp, #11392	; 0x2c80
   37dd0:	add	r2, r2, #24
   37dd4:	mov	r1, r7
   37dd8:	add	r0, sp, #14464	; 0x3880
   37ddc:	add	r0, r0, #36	; 0x24
   37de0:	bl	35d10 <__assert_fail@plt+0x2374c>
   37de4:	mov	r4, r0
   37de8:	str	r0, [fp], #4
   37dec:	cmp	r0, #0
   37df0:	beq	37e7c <__assert_fail@plt+0x258b8>
   37df4:	ldrsb	r3, [r4, #52]	; 0x34
   37df8:	cmp	r3, #0
   37dfc:	blt	37e94 <__assert_fail@plt+0x258d0>
   37e00:	add	r3, sp, #12416	; 0x3080
   37e04:	add	r3, r3, #36	; 0x24
   37e08:	str	r4, [r3, r9, lsl #2]
   37e0c:	add	r3, sp, #11392	; 0x2c80
   37e10:	add	r3, r3, #36	; 0x24
   37e14:	str	r4, [r3, r9, lsl #2]
   37e18:	add	r4, sp, #11328	; 0x2c40
   37e1c:	add	r4, r4, #52	; 0x34
   37e20:	sub	r1, r6, #32
   37e24:	mov	r2, r4
   37e28:	ldr	r3, [r2, #4]!
   37e2c:	ldr	r0, [r1, #4]!
   37e30:	orr	r3, r3, r0
   37e34:	str	r3, [r2]
   37e38:	cmp	r6, r1
   37e3c:	bne	37e28 <__assert_fail@plt+0x25864>
   37e40:	add	r9, r9, #1
   37e44:	add	r8, r8, #12
   37e48:	add	r6, r6, #32
   37e4c:	cmp	r9, sl
   37e50:	beq	37f44 <__assert_fail@plt+0x25980>
   37e54:	add	r3, sp, #11392	; 0x2c80
   37e58:	add	r3, r3, #28
   37e5c:	mov	r2, #0
   37e60:	str	r2, [r3]
   37e64:	mov	r5, r8
   37e68:	ldr	r3, [r8, #4]
   37e6c:	cmp	r3, r2
   37e70:	ble	37dc8 <__assert_fail@plt+0x25804>
   37e74:	ldr	r4, [sp, #4]
   37e78:	b	37d2c <__assert_fail@plt+0x25768>
   37e7c:	add	r3, sp, #14464	; 0x3880
   37e80:	add	r3, r3, #36	; 0x24
   37e84:	ldr	r3, [r3]
   37e88:	cmp	r3, #0
   37e8c:	beq	37df4 <__assert_fail@plt+0x25830>
   37e90:	b	37d70 <__assert_fail@plt+0x257ac>
   37e94:	mov	r3, #1
   37e98:	add	r2, sp, #11392	; 0x2c80
   37e9c:	add	r2, r2, #24
   37ea0:	mov	r1, r7
   37ea4:	add	r0, sp, #14464	; 0x3880
   37ea8:	add	r0, r0, #36	; 0x24
   37eac:	bl	35d10 <__assert_fail@plt+0x2374c>
   37eb0:	mov	r5, r9
   37eb4:	add	r3, sp, #12416	; 0x3080
   37eb8:	add	r3, r3, #36	; 0x24
   37ebc:	str	r0, [r3, r9, lsl #2]
   37ec0:	cmp	r0, #0
   37ec4:	beq	37f2c <__assert_fail@plt+0x25968>
   37ec8:	cmp	r4, r0
   37ecc:	beq	37ee4 <__assert_fail@plt+0x25920>
   37ed0:	ldr	r3, [r7, #92]	; 0x5c
   37ed4:	cmp	r3, #2
   37ed8:	ldr	r3, [sp, #8]
   37edc:	movge	r3, #1
   37ee0:	str	r3, [sp, #8]
   37ee4:	mov	r3, #2
   37ee8:	add	r2, sp, #11392	; 0x2c80
   37eec:	add	r2, r2, #24
   37ef0:	mov	r1, r7
   37ef4:	add	r0, sp, #14464	; 0x3880
   37ef8:	add	r0, r0, #36	; 0x24
   37efc:	bl	35d10 <__assert_fail@plt+0x2374c>
   37f00:	add	r3, sp, #11392	; 0x2c80
   37f04:	add	r3, r3, #36	; 0x24
   37f08:	str	r0, [r3, r5, lsl #2]
   37f0c:	cmp	r0, #0
   37f10:	bne	37e18 <__assert_fail@plt+0x25854>
   37f14:	add	r3, sp, #14464	; 0x3880
   37f18:	add	r3, r3, #36	; 0x24
   37f1c:	ldr	r3, [r3]
   37f20:	cmp	r3, #0
   37f24:	beq	37e18 <__assert_fail@plt+0x25854>
   37f28:	b	37d70 <__assert_fail@plt+0x257ac>
   37f2c:	add	r3, sp, #14464	; 0x3880
   37f30:	add	r3, r3, #36	; 0x24
   37f34:	ldr	r3, [r3]
   37f38:	cmp	r3, #0
   37f3c:	beq	37ed0 <__assert_fail@plt+0x2590c>
   37f40:	b	37d70 <__assert_fail@plt+0x257ac>
   37f44:	ldr	r3, [sp, #8]
   37f48:	cmp	r3, #0
   37f4c:	bne	380b0 <__assert_fail@plt+0x25aec>
   37f50:	mov	r1, #256	; 0x100
   37f54:	mov	r0, #4
   37f58:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   37f5c:	mov	r9, r0
   37f60:	ldr	r3, [sp, #16]
   37f64:	str	r0, [r3, #44]	; 0x2c
   37f68:	cmp	r0, #0
   37f6c:	beq	37d70 <__assert_fail@plt+0x257ac>
   37f70:	mov	r5, r0
   37f74:	add	r7, r7, #96	; 0x60
   37f78:	add	r8, r0, #1024	; 0x400
   37f7c:	ldr	r6, [sp, #12]
   37f80:	ldr	r3, [r4, #4]!
   37f84:	cmp	r3, #0
   37f88:	beq	37fb0 <__assert_fail@plt+0x259ec>
   37f8c:	mov	r0, r5
   37f90:	mov	r2, #1
   37f94:	mov	ip, r6
   37f98:	tst	r3, #1
   37f9c:	bne	38064 <__assert_fail@plt+0x25aa0>
   37fa0:	lsl	r2, r2, #1
   37fa4:	add	r0, r0, #4
   37fa8:	lsrs	r3, r3, #1
   37fac:	bne	37f98 <__assert_fail@plt+0x259d4>
   37fb0:	add	r5, r5, #128	; 0x80
   37fb4:	add	r7, r7, #4
   37fb8:	add	r6, r6, #4
   37fbc:	cmp	r8, r5
   37fc0:	bne	37f80 <__assert_fail@plt+0x259bc>
   37fc4:	add	r3, sp, #11328	; 0x2c40
   37fc8:	add	r3, r3, #56	; 0x38
   37fcc:	ldr	r3, [r3]
   37fd0:	tst	r3, #1024	; 0x400
   37fd4:	beq	3802c <__assert_fail@plt+0x25a68>
   37fd8:	ldr	r3, [sp, #120]	; 0x78
   37fdc:	tst	r3, #1024	; 0x400
   37fe0:	bne	38008 <__assert_fail@plt+0x25a44>
   37fe4:	ldr	r2, [sp, #12]
   37fe8:	ldr	r3, [sp, #4]
   37fec:	add	r3, r3, #1
   37ff0:	cmp	r3, sl
   37ff4:	beq	3802c <__assert_fail@plt+0x25a68>
   37ff8:	ldr	r1, [r2, #32]!
   37ffc:	tst	r1, #1024	; 0x400
   38000:	beq	37fec <__assert_fail@plt+0x25a28>
   38004:	str	r3, [sp, #4]
   38008:	add	r3, sp, #14464	; 0x3880
   3800c:	add	r3, r3, #40	; 0x28
   38010:	ldr	r2, [sp, #4]
   38014:	add	r3, r3, r2, lsl #2
   38018:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   3801c:	str	r3, [r9, #40]	; 0x28
   38020:	ldr	r2, [sp, #8]
   38024:	cmp	r2, #0
   38028:	strne	r3, [r9, #1064]	; 0x428
   3802c:	add	r3, sp, #11392	; 0x2c80
   38030:	add	r3, r3, #32
   38034:	ldr	r0, [r3]
   38038:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3803c:	add	r4, sl, sl, lsl #1
   38040:	ldr	r5, [sp, #20]
   38044:	add	r4, r5, r4, lsl #2
   38048:	ldr	r0, [r5, #8]
   3804c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   38050:	add	r5, r5, #12
   38054:	cmp	r4, r5
   38058:	bne	38048 <__assert_fail@plt+0x25a84>
   3805c:	mov	r0, #1
   38060:	b	37da8 <__assert_fail@plt+0x257e4>
   38064:	ldr	r1, [r6]
   38068:	tst	r2, r1
   3806c:	bne	380a8 <__assert_fail@plt+0x25ae4>
   38070:	ldr	r1, [sp, #4]
   38074:	add	r1, r1, #1
   38078:	ldr	lr, [ip, r1, lsl #5]
   3807c:	tst	r2, lr
   38080:	beq	38074 <__assert_fail@plt+0x25ab0>
   38084:	ldr	lr, [r7]
   38088:	tst	r2, lr
   3808c:	add	lr, sp, #14464	; 0x3880
   38090:	add	lr, lr, #40	; 0x28
   38094:	add	r1, lr, r1, lsl #2
   38098:	ldrne	r1, [r1, #-2052]	; 0xfffff7fc
   3809c:	ldreq	r1, [r1, #-1028]	; 0xfffffbfc
   380a0:	str	r1, [r0]
   380a4:	b	37fa0 <__assert_fail@plt+0x259dc>
   380a8:	ldr	r1, [sp, #4]
   380ac:	b	38084 <__assert_fail@plt+0x25ac0>
   380b0:	mov	r1, #512	; 0x200
   380b4:	mov	r0, #4
   380b8:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   380bc:	mov	r9, r0
   380c0:	ldr	r3, [sp, #16]
   380c4:	str	r0, [r3, #48]	; 0x30
   380c8:	cmp	r0, #0
   380cc:	beq	37d70 <__assert_fail@plt+0x257ac>
   380d0:	mov	r6, r0
   380d4:	add	r7, r0, #1024	; 0x400
   380d8:	ldr	r5, [sp, #12]
   380dc:	ldr	r3, [r4, #4]!
   380e0:	cmp	r3, #0
   380e4:	beq	3810c <__assert_fail@plt+0x25b48>
   380e8:	mov	r0, r6
   380ec:	mov	r2, #1
   380f0:	mov	lr, r5
   380f4:	tst	r3, #1
   380f8:	bne	38120 <__assert_fail@plt+0x25b5c>
   380fc:	lsl	r2, r2, #1
   38100:	add	r0, r0, #4
   38104:	lsrs	r3, r3, #1
   38108:	bne	380f4 <__assert_fail@plt+0x25b30>
   3810c:	add	r6, r6, #128	; 0x80
   38110:	add	r5, r5, #4
   38114:	cmp	r7, r6
   38118:	bne	380dc <__assert_fail@plt+0x25b18>
   3811c:	b	37fc4 <__assert_fail@plt+0x25a00>
   38120:	ldr	r1, [r5]
   38124:	tst	r2, r1
   38128:	bne	38160 <__assert_fail@plt+0x25b9c>
   3812c:	ldr	r1, [sp, #4]
   38130:	add	r1, r1, #1
   38134:	ldr	ip, [lr, r1, lsl #5]
   38138:	tst	r2, ip
   3813c:	beq	38130 <__assert_fail@plt+0x25b6c>
   38140:	add	ip, sp, #14464	; 0x3880
   38144:	add	ip, ip, #40	; 0x28
   38148:	add	r1, ip, r1, lsl #2
   3814c:	ldr	ip, [r1, #-1028]	; 0xfffffbfc
   38150:	str	ip, [r0]
   38154:	ldr	r1, [r1, #-2052]	; 0xfffff7fc
   38158:	str	r1, [r0, #1024]	; 0x400
   3815c:	b	380fc <__assert_fail@plt+0x25b38>
   38160:	ldr	r1, [sp, #4]
   38164:	b	38140 <__assert_fail@plt+0x25b7c>
   38168:	mov	r0, #0
   3816c:	b	37da8 <__assert_fail@plt+0x257e4>
   38170:	strd	r4, [sp, #-24]!	; 0xffffffe8
   38174:	strd	r6, [sp, #8]
   38178:	str	r8, [sp, #16]
   3817c:	str	lr, [sp, #20]
   38180:	mov	r4, r0
   38184:	mov	r5, r1
   38188:	mov	r1, r2
   3818c:	ldr	r2, [r0, #88]	; 0x58
   38190:	bl	370c8 <__assert_fail@plt+0x24b04>
   38194:	ldr	lr, [r5, #8]
   38198:	cmp	lr, #0
   3819c:	ble	38208 <__assert_fail@plt+0x25c44>
   381a0:	ldr	r3, [r4, #84]	; 0x54
   381a4:	ldr	r4, [r3]
   381a8:	ldr	ip, [r5, #12]
   381ac:	sub	ip, ip, #4
   381b0:	mov	r1, #0
   381b4:	and	r7, r0, #8
   381b8:	and	r6, r0, #2
   381bc:	and	r5, r0, #1
   381c0:	b	3821c <__assert_fail@plt+0x25c58>
   381c4:	tst	r3, #8
   381c8:	beq	381d4 <__assert_fail@plt+0x25c10>
   381cc:	cmp	r5, #0
   381d0:	bne	38210 <__assert_fail@plt+0x25c4c>
   381d4:	tst	r3, #32
   381d8:	beq	381e4 <__assert_fail@plt+0x25c20>
   381dc:	cmp	r6, #0
   381e0:	beq	38210 <__assert_fail@plt+0x25c4c>
   381e4:	tst	r3, #128	; 0x80
   381e8:	beq	381f4 <__assert_fail@plt+0x25c30>
   381ec:	cmp	r7, #0
   381f0:	beq	38210 <__assert_fail@plt+0x25c4c>
   381f4:	ldrd	r4, [sp]
   381f8:	ldrd	r6, [sp, #8]
   381fc:	ldr	r8, [sp, #16]
   38200:	add	sp, sp, #20
   38204:	pop	{pc}		; (ldr pc, [sp], #4)
   38208:	mov	r0, #0
   3820c:	b	381f4 <__assert_fail@plt+0x25c30>
   38210:	add	r1, r1, #1
   38214:	cmp	lr, r1
   38218:	beq	3825c <__assert_fail@plt+0x25c98>
   3821c:	ldr	r0, [ip, #4]!
   38220:	add	r2, r4, r0, lsl #3
   38224:	ldr	r3, [r2, #4]
   38228:	ubfx	r3, r3, #8, #10
   3822c:	ldrb	r2, [r2, #4]
   38230:	cmp	r2, #2
   38234:	bne	38210 <__assert_fail@plt+0x25c4c>
   38238:	cmp	r3, #0
   3823c:	beq	381f4 <__assert_fail@plt+0x25c30>
   38240:	tst	r3, #4
   38244:	beq	381c4 <__assert_fail@plt+0x25c00>
   38248:	cmp	r5, #0
   3824c:	beq	38210 <__assert_fail@plt+0x25c4c>
   38250:	tst	r3, #8
   38254:	beq	381d4 <__assert_fail@plt+0x25c10>
   38258:	b	38210 <__assert_fail@plt+0x25c4c>
   3825c:	mov	r0, #0
   38260:	b	381f4 <__assert_fail@plt+0x25c30>
   38264:	strd	r4, [sp, #-24]!	; 0xffffffe8
   38268:	strd	r6, [sp, #8]
   3826c:	str	r8, [sp, #16]
   38270:	str	lr, [sp, #20]
   38274:	ldr	r7, [sp, #28]
   38278:	subs	r5, r0, #0
   3827c:	beq	38330 <__assert_fail@plt+0x25d6c>
   38280:	ldr	r4, [r5]
   38284:	cmp	r4, #0
   38288:	beq	38338 <__assert_fail@plt+0x25d74>
   3828c:	mov	r0, r3
   38290:	sub	r4, r4, #1
   38294:	str	r4, [r5]
   38298:	add	r4, r4, r4, lsl #1
   3829c:	lsl	r4, r4, #3
   382a0:	ldr	r3, [r5, #8]
   382a4:	ldr	r3, [r3, r4]
   382a8:	str	r3, [r1]
   382ac:	lsl	r6, r2, #3
   382b0:	ldr	r3, [r5, #8]
   382b4:	add	r3, r3, r4
   382b8:	mov	r2, r6
   382bc:	ldr	r1, [r3, #8]
   382c0:	bl	12000 <memcpy@plt>
   382c4:	ldr	r3, [r5, #8]
   382c8:	add	r3, r3, r4
   382cc:	ldr	r1, [r3, #8]
   382d0:	mov	r2, r6
   382d4:	add	r1, r1, r6
   382d8:	ldr	r0, [sp, #24]
   382dc:	bl	12000 <memcpy@plt>
   382e0:	ldr	r0, [r7, #8]
   382e4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   382e8:	ldr	r3, [r5, #8]
   382ec:	add	r3, r3, r4
   382f0:	ldr	r0, [r3, #8]
   382f4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   382f8:	ldr	r1, [r5, #8]
   382fc:	add	r1, r1, r4
   38300:	ldrd	r2, [r1, #12]
   38304:	strd	r2, [r7]
   38308:	ldr	r3, [r1, #20]
   3830c:	str	r3, [r7, #8]
   38310:	ldr	r3, [r5, #8]
   38314:	add	r4, r3, r4
   38318:	ldr	r0, [r4, #4]
   3831c:	ldrd	r4, [sp]
   38320:	ldrd	r6, [sp, #8]
   38324:	ldr	r8, [sp, #16]
   38328:	add	sp, sp, #20
   3832c:	pop	{pc}		; (ldr pc, [sp], #4)
   38330:	mvn	r0, #0
   38334:	b	3831c <__assert_fail@plt+0x25d58>
   38338:	mvn	r0, #0
   3833c:	b	3831c <__assert_fail@plt+0x25d58>
   38340:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38344:	strd	r6, [sp, #8]
   38348:	strd	r8, [sp, #16]
   3834c:	str	sl, [sp, #24]
   38350:	str	lr, [sp, #28]
   38354:	mov	r6, r0
   38358:	mov	r4, r1
   3835c:	mov	r5, r2
   38360:	mov	r9, r3
   38364:	ldr	r7, [sp, #32]
   38368:	ldr	r3, [sp, #36]	; 0x24
   3836c:	tst	r3, #4194304	; 0x400000
   38370:	beq	383b4 <__assert_fail@plt+0x25df0>
   38374:	movw	r1, #42272	; 0xa520
   38378:	movt	r1, #4
   3837c:	mov	r0, r7
   38380:	bl	11f1c <strcmp@plt>
   38384:	cmp	r0, #0
   38388:	movweq	r7, #42264	; 0xa518
   3838c:	movteq	r7, #4
   38390:	beq	383b4 <__assert_fail@plt+0x25df0>
   38394:	movw	r1, #42280	; 0xa528
   38398:	movt	r1, #4
   3839c:	mov	r0, r7
   383a0:	bl	11f1c <strcmp@plt>
   383a4:	movw	r3, #42264	; 0xa518
   383a8:	movt	r3, #4
   383ac:	cmp	r0, #0
   383b0:	moveq	r7, r3
   383b4:	ldr	r3, [r5, #36]	; 0x24
   383b8:	ldr	r2, [r9]
   383bc:	cmp	r2, r3
   383c0:	beq	38410 <__assert_fail@plt+0x25e4c>
   383c4:	ldr	r9, [r5, #12]
   383c8:	ldr	r8, [r5, #36]	; 0x24
   383cc:	add	r3, r8, #1
   383d0:	str	r3, [r5, #36]	; 0x24
   383d4:	mov	r0, r7
   383d8:	bl	11ebc <wctype@plt>
   383dc:	str	r0, [r9, r8, lsl #2]
   383e0:	movw	r1, #42288	; 0xa530
   383e4:	movt	r1, #4
   383e8:	mov	r0, r7
   383ec:	bl	11f1c <strcmp@plt>
   383f0:	subs	r5, r0, #0
   383f4:	bne	384d4 <__assert_fail@plt+0x25f10>
   383f8:	cmp	r6, #0
   383fc:	bne	38438 <__assert_fail@plt+0x25e74>
   38400:	bl	12288 <__ctype_b_loc@plt>
   38404:	mov	r3, r5
   38408:	mov	lr, #1
   3840c:	b	38490 <__assert_fail@plt+0x25ecc>
   38410:	lsl	r3, r3, #1
   38414:	add	r8, r3, #1
   38418:	lsl	r1, r8, #2
   3841c:	ldr	r0, [r5, #12]
   38420:	bl	32ce0 <__assert_fail@plt+0x2071c>
   38424:	cmp	r0, #0
   38428:	beq	38d9c <__assert_fail@plt+0x267d8>
   3842c:	str	r0, [r5, #12]
   38430:	str	r8, [r9]
   38434:	b	383c4 <__assert_fail@plt+0x25e00>
   38438:	bl	12288 <__ctype_b_loc@plt>
   3843c:	mov	r3, r5
   38440:	mov	lr, #1
   38444:	b	38454 <__assert_fail@plt+0x25e90>
   38448:	add	r3, r3, #1
   3844c:	cmp	r3, #256	; 0x100
   38450:	beq	38da0 <__assert_fail@plt+0x267dc>
   38454:	ldr	r1, [r0]
   38458:	lsl	r2, r3, #1
   3845c:	ldrh	r2, [r1, r2]
   38460:	tst	r2, #8
   38464:	beq	38448 <__assert_fail@plt+0x25e84>
   38468:	ldrb	r2, [r6, r3]
   3846c:	asr	ip, r2, #5
   38470:	and	r2, r2, #31
   38474:	ldr	r1, [r4, ip, lsl #2]
   38478:	orr	r2, r1, lr, lsl r2
   3847c:	str	r2, [r4, ip, lsl #2]
   38480:	b	38448 <__assert_fail@plt+0x25e84>
   38484:	add	r3, r3, #1
   38488:	cmp	r3, #256	; 0x100
   3848c:	beq	38da0 <__assert_fail@plt+0x267dc>
   38490:	ldr	r1, [r0]
   38494:	lsl	r2, r3, #1
   38498:	ldrh	r2, [r1, r2]
   3849c:	tst	r2, #8
   384a0:	beq	38484 <__assert_fail@plt+0x25ec0>
   384a4:	add	r2, r3, #31
   384a8:	cmp	r3, #0
   384ac:	movge	r2, r3
   384b0:	asr	r2, r2, #5
   384b4:	rsbs	r1, r3, #0
   384b8:	and	ip, r3, #31
   384bc:	and	r1, r1, #31
   384c0:	rsbpl	ip, r1, #0
   384c4:	ldr	r1, [r4, r2, lsl #2]
   384c8:	orr	r1, r1, lr, lsl ip
   384cc:	str	r1, [r4, r2, lsl #2]
   384d0:	b	38484 <__assert_fail@plt+0x25ec0>
   384d4:	movw	r1, #42296	; 0xa538
   384d8:	movt	r1, #4
   384dc:	mov	r0, r7
   384e0:	bl	11f1c <strcmp@plt>
   384e4:	subs	r5, r0, #0
   384e8:	bne	385a0 <__assert_fail@plt+0x25fdc>
   384ec:	cmp	r6, #0
   384f0:	bne	38504 <__assert_fail@plt+0x25f40>
   384f4:	bl	12288 <__ctype_b_loc@plt>
   384f8:	mov	r3, r5
   384fc:	mov	lr, #1
   38500:	b	3855c <__assert_fail@plt+0x25f98>
   38504:	bl	12288 <__ctype_b_loc@plt>
   38508:	mov	r3, r5
   3850c:	mov	lr, #1
   38510:	b	38520 <__assert_fail@plt+0x25f5c>
   38514:	add	r3, r3, #1
   38518:	cmp	r3, #256	; 0x100
   3851c:	beq	38da0 <__assert_fail@plt+0x267dc>
   38520:	ldr	r1, [r0]
   38524:	lsl	r2, r3, #1
   38528:	ldrh	r2, [r1, r2]
   3852c:	tst	r2, #2
   38530:	beq	38514 <__assert_fail@plt+0x25f50>
   38534:	ldrb	r2, [r6, r3]
   38538:	asr	ip, r2, #5
   3853c:	and	r2, r2, #31
   38540:	ldr	r1, [r4, ip, lsl #2]
   38544:	orr	r2, r1, lr, lsl r2
   38548:	str	r2, [r4, ip, lsl #2]
   3854c:	b	38514 <__assert_fail@plt+0x25f50>
   38550:	add	r3, r3, #1
   38554:	cmp	r3, #256	; 0x100
   38558:	beq	38da0 <__assert_fail@plt+0x267dc>
   3855c:	ldr	r1, [r0]
   38560:	lsl	r2, r3, #1
   38564:	ldrh	r2, [r1, r2]
   38568:	tst	r2, #2
   3856c:	beq	38550 <__assert_fail@plt+0x25f8c>
   38570:	add	r2, r3, #31
   38574:	cmp	r3, #0
   38578:	movge	r2, r3
   3857c:	asr	r2, r2, #5
   38580:	rsbs	r1, r3, #0
   38584:	and	ip, r3, #31
   38588:	and	r1, r1, #31
   3858c:	rsbpl	ip, r1, #0
   38590:	ldr	r1, [r4, r2, lsl #2]
   38594:	orr	r1, r1, lr, lsl ip
   38598:	str	r1, [r4, r2, lsl #2]
   3859c:	b	38550 <__assert_fail@plt+0x25f8c>
   385a0:	movw	r1, #42280	; 0xa528
   385a4:	movt	r1, #4
   385a8:	mov	r0, r7
   385ac:	bl	11f1c <strcmp@plt>
   385b0:	subs	r5, r0, #0
   385b4:	bne	3866c <__assert_fail@plt+0x260a8>
   385b8:	cmp	r6, #0
   385bc:	bne	385d0 <__assert_fail@plt+0x2600c>
   385c0:	bl	12288 <__ctype_b_loc@plt>
   385c4:	mov	r3, r5
   385c8:	mov	lr, #1
   385cc:	b	38628 <__assert_fail@plt+0x26064>
   385d0:	bl	12288 <__ctype_b_loc@plt>
   385d4:	mov	r3, r5
   385d8:	mov	lr, #1
   385dc:	b	385ec <__assert_fail@plt+0x26028>
   385e0:	add	r3, r3, #1
   385e4:	cmp	r3, #256	; 0x100
   385e8:	beq	38da0 <__assert_fail@plt+0x267dc>
   385ec:	ldr	r1, [r0]
   385f0:	lsl	r2, r3, #1
   385f4:	ldrh	r2, [r1, r2]
   385f8:	tst	r2, #512	; 0x200
   385fc:	beq	385e0 <__assert_fail@plt+0x2601c>
   38600:	ldrb	r2, [r6, r3]
   38604:	asr	ip, r2, #5
   38608:	and	r2, r2, #31
   3860c:	ldr	r1, [r4, ip, lsl #2]
   38610:	orr	r2, r1, lr, lsl r2
   38614:	str	r2, [r4, ip, lsl #2]
   38618:	b	385e0 <__assert_fail@plt+0x2601c>
   3861c:	add	r3, r3, #1
   38620:	cmp	r3, #256	; 0x100
   38624:	beq	38da0 <__assert_fail@plt+0x267dc>
   38628:	ldr	r1, [r0]
   3862c:	lsl	r2, r3, #1
   38630:	ldrh	r2, [r1, r2]
   38634:	tst	r2, #512	; 0x200
   38638:	beq	3861c <__assert_fail@plt+0x26058>
   3863c:	add	r2, r3, #31
   38640:	cmp	r3, #0
   38644:	movge	r2, r3
   38648:	asr	r2, r2, #5
   3864c:	rsbs	r1, r3, #0
   38650:	and	ip, r3, #31
   38654:	and	r1, r1, #31
   38658:	rsbpl	ip, r1, #0
   3865c:	ldr	r1, [r4, r2, lsl #2]
   38660:	orr	r1, r1, lr, lsl ip
   38664:	str	r1, [r4, r2, lsl #2]
   38668:	b	3861c <__assert_fail@plt+0x26058>
   3866c:	movw	r1, #42304	; 0xa540
   38670:	movt	r1, #4
   38674:	mov	r0, r7
   38678:	bl	11f1c <strcmp@plt>
   3867c:	subs	r5, r0, #0
   38680:	bne	38738 <__assert_fail@plt+0x26174>
   38684:	cmp	r6, #0
   38688:	bne	3869c <__assert_fail@plt+0x260d8>
   3868c:	bl	12288 <__ctype_b_loc@plt>
   38690:	mov	r3, r5
   38694:	mov	lr, #1
   38698:	b	386f4 <__assert_fail@plt+0x26130>
   3869c:	bl	12288 <__ctype_b_loc@plt>
   386a0:	mov	r3, r5
   386a4:	mov	lr, #1
   386a8:	b	386b8 <__assert_fail@plt+0x260f4>
   386ac:	add	r3, r3, #1
   386b0:	cmp	r3, #256	; 0x100
   386b4:	beq	38da0 <__assert_fail@plt+0x267dc>
   386b8:	ldr	r1, [r0]
   386bc:	lsl	r2, r3, #1
   386c0:	ldrh	r2, [r1, r2]
   386c4:	tst	r2, #8192	; 0x2000
   386c8:	beq	386ac <__assert_fail@plt+0x260e8>
   386cc:	ldrb	r2, [r6, r3]
   386d0:	asr	ip, r2, #5
   386d4:	and	r2, r2, #31
   386d8:	ldr	r1, [r4, ip, lsl #2]
   386dc:	orr	r2, r1, lr, lsl r2
   386e0:	str	r2, [r4, ip, lsl #2]
   386e4:	b	386ac <__assert_fail@plt+0x260e8>
   386e8:	add	r3, r3, #1
   386ec:	cmp	r3, #256	; 0x100
   386f0:	beq	38da0 <__assert_fail@plt+0x267dc>
   386f4:	ldr	r1, [r0]
   386f8:	lsl	r2, r3, #1
   386fc:	ldrh	r2, [r1, r2]
   38700:	tst	r2, #8192	; 0x2000
   38704:	beq	386e8 <__assert_fail@plt+0x26124>
   38708:	add	r2, r3, #31
   3870c:	cmp	r3, #0
   38710:	movge	r2, r3
   38714:	asr	r2, r2, #5
   38718:	rsbs	r1, r3, #0
   3871c:	and	ip, r3, #31
   38720:	and	r1, r1, #31
   38724:	rsbpl	ip, r1, #0
   38728:	ldr	r1, [r4, r2, lsl #2]
   3872c:	orr	r1, r1, lr, lsl ip
   38730:	str	r1, [r4, r2, lsl #2]
   38734:	b	386e8 <__assert_fail@plt+0x26124>
   38738:	movw	r1, #42264	; 0xa518
   3873c:	movt	r1, #4
   38740:	mov	r0, r7
   38744:	bl	11f1c <strcmp@plt>
   38748:	subs	r5, r0, #0
   3874c:	bne	38804 <__assert_fail@plt+0x26240>
   38750:	cmp	r6, #0
   38754:	bne	38768 <__assert_fail@plt+0x261a4>
   38758:	bl	12288 <__ctype_b_loc@plt>
   3875c:	mov	r3, r5
   38760:	mov	lr, #1
   38764:	b	387c0 <__assert_fail@plt+0x261fc>
   38768:	bl	12288 <__ctype_b_loc@plt>
   3876c:	mov	r3, r5
   38770:	mov	lr, #1
   38774:	b	38784 <__assert_fail@plt+0x261c0>
   38778:	add	r3, r3, #1
   3877c:	cmp	r3, #256	; 0x100
   38780:	beq	38da0 <__assert_fail@plt+0x267dc>
   38784:	ldr	r1, [r0]
   38788:	lsl	r2, r3, #1
   3878c:	ldrh	r2, [r1, r2]
   38790:	tst	r2, #1024	; 0x400
   38794:	beq	38778 <__assert_fail@plt+0x261b4>
   38798:	ldrb	r2, [r6, r3]
   3879c:	asr	ip, r2, #5
   387a0:	and	r2, r2, #31
   387a4:	ldr	r1, [r4, ip, lsl #2]
   387a8:	orr	r2, r1, lr, lsl r2
   387ac:	str	r2, [r4, ip, lsl #2]
   387b0:	b	38778 <__assert_fail@plt+0x261b4>
   387b4:	add	r3, r3, #1
   387b8:	cmp	r3, #256	; 0x100
   387bc:	beq	38da0 <__assert_fail@plt+0x267dc>
   387c0:	ldr	r1, [r0]
   387c4:	lsl	r2, r3, #1
   387c8:	ldrh	r2, [r1, r2]
   387cc:	tst	r2, #1024	; 0x400
   387d0:	beq	387b4 <__assert_fail@plt+0x261f0>
   387d4:	add	r2, r3, #31
   387d8:	cmp	r3, #0
   387dc:	movge	r2, r3
   387e0:	asr	r2, r2, #5
   387e4:	rsbs	r1, r3, #0
   387e8:	and	ip, r3, #31
   387ec:	and	r1, r1, #31
   387f0:	rsbpl	ip, r1, #0
   387f4:	ldr	r1, [r4, r2, lsl #2]
   387f8:	orr	r1, r1, lr, lsl ip
   387fc:	str	r1, [r4, r2, lsl #2]
   38800:	b	387b4 <__assert_fail@plt+0x261f0>
   38804:	movw	r1, #42312	; 0xa548
   38808:	movt	r1, #4
   3880c:	mov	r0, r7
   38810:	bl	11f1c <strcmp@plt>
   38814:	subs	r5, r0, #0
   38818:	bne	388d0 <__assert_fail@plt+0x2630c>
   3881c:	cmp	r6, #0
   38820:	bne	38834 <__assert_fail@plt+0x26270>
   38824:	bl	12288 <__ctype_b_loc@plt>
   38828:	mov	r3, r5
   3882c:	mov	lr, #1
   38830:	b	3888c <__assert_fail@plt+0x262c8>
   38834:	bl	12288 <__ctype_b_loc@plt>
   38838:	mov	r3, r5
   3883c:	mov	lr, #1
   38840:	b	38850 <__assert_fail@plt+0x2628c>
   38844:	add	r3, r3, #1
   38848:	cmp	r3, #256	; 0x100
   3884c:	beq	38da0 <__assert_fail@plt+0x267dc>
   38850:	ldr	r1, [r0]
   38854:	lsl	r2, r3, #1
   38858:	ldrh	r2, [r1, r2]
   3885c:	tst	r2, #2048	; 0x800
   38860:	beq	38844 <__assert_fail@plt+0x26280>
   38864:	ldrb	r2, [r6, r3]
   38868:	asr	ip, r2, #5
   3886c:	and	r2, r2, #31
   38870:	ldr	r1, [r4, ip, lsl #2]
   38874:	orr	r2, r1, lr, lsl r2
   38878:	str	r2, [r4, ip, lsl #2]
   3887c:	b	38844 <__assert_fail@plt+0x26280>
   38880:	add	r3, r3, #1
   38884:	cmp	r3, #256	; 0x100
   38888:	beq	38da0 <__assert_fail@plt+0x267dc>
   3888c:	ldr	r1, [r0]
   38890:	lsl	r2, r3, #1
   38894:	ldrh	r2, [r1, r2]
   38898:	tst	r2, #2048	; 0x800
   3889c:	beq	38880 <__assert_fail@plt+0x262bc>
   388a0:	add	r2, r3, #31
   388a4:	cmp	r3, #0
   388a8:	movge	r2, r3
   388ac:	asr	r2, r2, #5
   388b0:	rsbs	r1, r3, #0
   388b4:	and	ip, r3, #31
   388b8:	and	r1, r1, #31
   388bc:	rsbpl	ip, r1, #0
   388c0:	ldr	r1, [r4, r2, lsl #2]
   388c4:	orr	r1, r1, lr, lsl ip
   388c8:	str	r1, [r4, r2, lsl #2]
   388cc:	b	38880 <__assert_fail@plt+0x262bc>
   388d0:	movw	r1, #22836	; 0x5934
   388d4:	movt	r1, #4
   388d8:	mov	r0, r7
   388dc:	bl	11f1c <strcmp@plt>
   388e0:	subs	r5, r0, #0
   388e4:	bne	3899c <__assert_fail@plt+0x263d8>
   388e8:	cmp	r6, #0
   388ec:	bne	38900 <__assert_fail@plt+0x2633c>
   388f0:	bl	12288 <__ctype_b_loc@plt>
   388f4:	mov	r3, r5
   388f8:	mov	lr, #1
   388fc:	b	38958 <__assert_fail@plt+0x26394>
   38900:	bl	12288 <__ctype_b_loc@plt>
   38904:	mov	r3, r5
   38908:	mov	lr, #1
   3890c:	b	3891c <__assert_fail@plt+0x26358>
   38910:	add	r3, r3, #1
   38914:	cmp	r3, #256	; 0x100
   38918:	beq	38da0 <__assert_fail@plt+0x267dc>
   3891c:	ldr	r1, [r0]
   38920:	lsl	r2, r3, #1
   38924:	ldrh	r2, [r1, r2]
   38928:	tst	r2, #16384	; 0x4000
   3892c:	beq	38910 <__assert_fail@plt+0x2634c>
   38930:	ldrb	r2, [r6, r3]
   38934:	asr	ip, r2, #5
   38938:	and	r2, r2, #31
   3893c:	ldr	r1, [r4, ip, lsl #2]
   38940:	orr	r2, r1, lr, lsl r2
   38944:	str	r2, [r4, ip, lsl #2]
   38948:	b	38910 <__assert_fail@plt+0x2634c>
   3894c:	add	r3, r3, #1
   38950:	cmp	r3, #256	; 0x100
   38954:	beq	38da0 <__assert_fail@plt+0x267dc>
   38958:	ldr	r1, [r0]
   3895c:	lsl	r2, r3, #1
   38960:	ldrh	r2, [r1, r2]
   38964:	tst	r2, #16384	; 0x4000
   38968:	beq	3894c <__assert_fail@plt+0x26388>
   3896c:	add	r2, r3, #31
   38970:	cmp	r3, #0
   38974:	movge	r2, r3
   38978:	asr	r2, r2, #5
   3897c:	rsbs	r1, r3, #0
   38980:	and	ip, r3, #31
   38984:	and	r1, r1, #31
   38988:	rsbpl	ip, r1, #0
   3898c:	ldr	r1, [r4, r2, lsl #2]
   38990:	orr	r1, r1, lr, lsl ip
   38994:	str	r1, [r4, r2, lsl #2]
   38998:	b	3894c <__assert_fail@plt+0x26388>
   3899c:	movw	r1, #42272	; 0xa520
   389a0:	movt	r1, #4
   389a4:	mov	r0, r7
   389a8:	bl	11f1c <strcmp@plt>
   389ac:	subs	r5, r0, #0
   389b0:	bne	38a68 <__assert_fail@plt+0x264a4>
   389b4:	cmp	r6, #0
   389b8:	bne	389cc <__assert_fail@plt+0x26408>
   389bc:	bl	12288 <__ctype_b_loc@plt>
   389c0:	mov	r3, r5
   389c4:	mov	lr, #1
   389c8:	b	38a24 <__assert_fail@plt+0x26460>
   389cc:	bl	12288 <__ctype_b_loc@plt>
   389d0:	mov	r3, r5
   389d4:	mov	lr, #1
   389d8:	b	389e8 <__assert_fail@plt+0x26424>
   389dc:	add	r3, r3, #1
   389e0:	cmp	r3, #256	; 0x100
   389e4:	beq	38da0 <__assert_fail@plt+0x267dc>
   389e8:	ldr	r1, [r0]
   389ec:	lsl	r2, r3, #1
   389f0:	ldrh	r2, [r1, r2]
   389f4:	tst	r2, #256	; 0x100
   389f8:	beq	389dc <__assert_fail@plt+0x26418>
   389fc:	ldrb	r2, [r6, r3]
   38a00:	asr	ip, r2, #5
   38a04:	and	r2, r2, #31
   38a08:	ldr	r1, [r4, ip, lsl #2]
   38a0c:	orr	r2, r1, lr, lsl r2
   38a10:	str	r2, [r4, ip, lsl #2]
   38a14:	b	389dc <__assert_fail@plt+0x26418>
   38a18:	add	r3, r3, #1
   38a1c:	cmp	r3, #256	; 0x100
   38a20:	beq	38da0 <__assert_fail@plt+0x267dc>
   38a24:	ldr	r1, [r0]
   38a28:	lsl	r2, r3, #1
   38a2c:	ldrh	r2, [r1, r2]
   38a30:	tst	r2, #256	; 0x100
   38a34:	beq	38a18 <__assert_fail@plt+0x26454>
   38a38:	add	r2, r3, #31
   38a3c:	cmp	r3, #0
   38a40:	movge	r2, r3
   38a44:	asr	r2, r2, #5
   38a48:	rsbs	r1, r3, #0
   38a4c:	and	ip, r3, #31
   38a50:	and	r1, r1, #31
   38a54:	rsbpl	ip, r1, #0
   38a58:	ldr	r1, [r4, r2, lsl #2]
   38a5c:	orr	r1, r1, lr, lsl ip
   38a60:	str	r1, [r4, r2, lsl #2]
   38a64:	b	38a18 <__assert_fail@plt+0x26454>
   38a68:	movw	r1, #42320	; 0xa550
   38a6c:	movt	r1, #4
   38a70:	mov	r0, r7
   38a74:	bl	11f1c <strcmp@plt>
   38a78:	subs	r5, r0, #0
   38a7c:	bne	38b34 <__assert_fail@plt+0x26570>
   38a80:	cmp	r6, #0
   38a84:	bne	38a98 <__assert_fail@plt+0x264d4>
   38a88:	bl	12288 <__ctype_b_loc@plt>
   38a8c:	mov	r3, r5
   38a90:	mov	lr, #1
   38a94:	b	38af0 <__assert_fail@plt+0x2652c>
   38a98:	bl	12288 <__ctype_b_loc@plt>
   38a9c:	mov	r3, r5
   38aa0:	mov	lr, #1
   38aa4:	b	38ab4 <__assert_fail@plt+0x264f0>
   38aa8:	add	r3, r3, #1
   38aac:	cmp	r3, #256	; 0x100
   38ab0:	beq	38da0 <__assert_fail@plt+0x267dc>
   38ab4:	ldr	r1, [r0]
   38ab8:	lsl	r2, r3, #1
   38abc:	ldrh	r2, [r1, r2]
   38ac0:	tst	r2, #1
   38ac4:	beq	38aa8 <__assert_fail@plt+0x264e4>
   38ac8:	ldrb	r2, [r6, r3]
   38acc:	asr	ip, r2, #5
   38ad0:	and	r2, r2, #31
   38ad4:	ldr	r1, [r4, ip, lsl #2]
   38ad8:	orr	r2, r1, lr, lsl r2
   38adc:	str	r2, [r4, ip, lsl #2]
   38ae0:	b	38aa8 <__assert_fail@plt+0x264e4>
   38ae4:	add	r3, r3, #1
   38ae8:	cmp	r3, #256	; 0x100
   38aec:	beq	38da0 <__assert_fail@plt+0x267dc>
   38af0:	ldr	r1, [r0]
   38af4:	lsl	r2, r3, #1
   38af8:	ldrh	r2, [r1, r2]
   38afc:	tst	r2, #1
   38b00:	beq	38ae4 <__assert_fail@plt+0x26520>
   38b04:	add	r2, r3, #31
   38b08:	cmp	r3, #0
   38b0c:	movge	r2, r3
   38b10:	asr	r2, r2, #5
   38b14:	rsbs	r1, r3, #0
   38b18:	and	ip, r3, #31
   38b1c:	and	r1, r1, #31
   38b20:	rsbpl	ip, r1, #0
   38b24:	ldr	r1, [r4, r2, lsl #2]
   38b28:	orr	r1, r1, lr, lsl ip
   38b2c:	str	r1, [r4, r2, lsl #2]
   38b30:	b	38ae4 <__assert_fail@plt+0x26520>
   38b34:	movw	r1, #42328	; 0xa558
   38b38:	movt	r1, #4
   38b3c:	mov	r0, r7
   38b40:	bl	11f1c <strcmp@plt>
   38b44:	subs	r5, r0, #0
   38b48:	bne	38c00 <__assert_fail@plt+0x2663c>
   38b4c:	cmp	r6, #0
   38b50:	bne	38b64 <__assert_fail@plt+0x265a0>
   38b54:	bl	12288 <__ctype_b_loc@plt>
   38b58:	mov	r3, r5
   38b5c:	mov	lr, #1
   38b60:	b	38bbc <__assert_fail@plt+0x265f8>
   38b64:	bl	12288 <__ctype_b_loc@plt>
   38b68:	mov	r3, r5
   38b6c:	mov	lr, #1
   38b70:	b	38b80 <__assert_fail@plt+0x265bc>
   38b74:	add	r3, r3, #1
   38b78:	cmp	r3, #256	; 0x100
   38b7c:	beq	38da0 <__assert_fail@plt+0x267dc>
   38b80:	ldr	r1, [r0]
   38b84:	lsl	r2, r3, #1
   38b88:	ldrsh	r2, [r1, r2]
   38b8c:	cmp	r2, #0
   38b90:	bge	38b74 <__assert_fail@plt+0x265b0>
   38b94:	ldrb	r2, [r6, r3]
   38b98:	asr	ip, r2, #5
   38b9c:	and	r2, r2, #31
   38ba0:	ldr	r1, [r4, ip, lsl #2]
   38ba4:	orr	r2, r1, lr, lsl r2
   38ba8:	str	r2, [r4, ip, lsl #2]
   38bac:	b	38b74 <__assert_fail@plt+0x265b0>
   38bb0:	add	r3, r3, #1
   38bb4:	cmp	r3, #256	; 0x100
   38bb8:	beq	38da0 <__assert_fail@plt+0x267dc>
   38bbc:	ldr	r1, [r0]
   38bc0:	lsl	r2, r3, #1
   38bc4:	ldrsh	r2, [r1, r2]
   38bc8:	cmp	r2, #0
   38bcc:	bge	38bb0 <__assert_fail@plt+0x265ec>
   38bd0:	add	r2, r3, #31
   38bd4:	cmp	r3, #0
   38bd8:	movge	r2, r3
   38bdc:	asr	r2, r2, #5
   38be0:	rsbs	r1, r3, #0
   38be4:	and	ip, r3, #31
   38be8:	and	r1, r1, #31
   38bec:	rsbpl	ip, r1, #0
   38bf0:	ldr	r1, [r4, r2, lsl #2]
   38bf4:	orr	r1, r1, lr, lsl ip
   38bf8:	str	r1, [r4, r2, lsl #2]
   38bfc:	b	38bb0 <__assert_fail@plt+0x265ec>
   38c00:	movw	r1, #42336	; 0xa560
   38c04:	movt	r1, #4
   38c08:	mov	r0, r7
   38c0c:	bl	11f1c <strcmp@plt>
   38c10:	subs	r5, r0, #0
   38c14:	bne	38ccc <__assert_fail@plt+0x26708>
   38c18:	cmp	r6, #0
   38c1c:	bne	38c30 <__assert_fail@plt+0x2666c>
   38c20:	bl	12288 <__ctype_b_loc@plt>
   38c24:	mov	r3, r5
   38c28:	mov	lr, #1
   38c2c:	b	38c88 <__assert_fail@plt+0x266c4>
   38c30:	bl	12288 <__ctype_b_loc@plt>
   38c34:	mov	r3, #0
   38c38:	mov	lr, #1
   38c3c:	b	38c50 <__assert_fail@plt+0x2668c>
   38c40:	add	r3, r3, #2
   38c44:	add	r6, r6, #1
   38c48:	cmp	r3, #512	; 0x200
   38c4c:	beq	38da0 <__assert_fail@plt+0x267dc>
   38c50:	ldr	r2, [r0]
   38c54:	ldrh	r2, [r2, r3]
   38c58:	tst	r2, #4
   38c5c:	beq	38c40 <__assert_fail@plt+0x2667c>
   38c60:	ldrb	r2, [r6]
   38c64:	asr	ip, r2, #5
   38c68:	and	r2, r2, #31
   38c6c:	ldr	r1, [r4, ip, lsl #2]
   38c70:	orr	r2, r1, lr, lsl r2
   38c74:	str	r2, [r4, ip, lsl #2]
   38c78:	b	38c40 <__assert_fail@plt+0x2667c>
   38c7c:	add	r3, r3, #1
   38c80:	cmp	r3, #256	; 0x100
   38c84:	beq	38da0 <__assert_fail@plt+0x267dc>
   38c88:	ldr	r1, [r0]
   38c8c:	lsl	r2, r3, #1
   38c90:	ldrh	r2, [r1, r2]
   38c94:	tst	r2, #4
   38c98:	beq	38c7c <__assert_fail@plt+0x266b8>
   38c9c:	add	r2, r3, #31
   38ca0:	cmp	r3, #0
   38ca4:	movge	r2, r3
   38ca8:	asr	r2, r2, #5
   38cac:	rsbs	r1, r3, #0
   38cb0:	and	ip, r3, #31
   38cb4:	and	r1, r1, #31
   38cb8:	rsbpl	ip, r1, #0
   38cbc:	ldr	r1, [r4, r2, lsl #2]
   38cc0:	orr	r1, r1, lr, lsl ip
   38cc4:	str	r1, [r4, r2, lsl #2]
   38cc8:	b	38c7c <__assert_fail@plt+0x266b8>
   38ccc:	movw	r1, #42344	; 0xa568
   38cd0:	movt	r1, #4
   38cd4:	mov	r0, r7
   38cd8:	bl	11f1c <strcmp@plt>
   38cdc:	subs	r5, r0, #0
   38ce0:	movne	r5, #4
   38ce4:	bne	38da0 <__assert_fail@plt+0x267dc>
   38ce8:	cmp	r6, #0
   38cec:	bne	38d00 <__assert_fail@plt+0x2673c>
   38cf0:	bl	12288 <__ctype_b_loc@plt>
   38cf4:	mov	r3, r5
   38cf8:	mov	lr, #1
   38cfc:	b	38d58 <__assert_fail@plt+0x26794>
   38d00:	bl	12288 <__ctype_b_loc@plt>
   38d04:	mov	r3, r5
   38d08:	mov	lr, #1
   38d0c:	b	38d1c <__assert_fail@plt+0x26758>
   38d10:	add	r3, r3, #1
   38d14:	cmp	r3, #256	; 0x100
   38d18:	beq	38da0 <__assert_fail@plt+0x267dc>
   38d1c:	ldr	r1, [r0]
   38d20:	lsl	r2, r3, #1
   38d24:	ldrh	r2, [r1, r2]
   38d28:	tst	r2, #4096	; 0x1000
   38d2c:	beq	38d10 <__assert_fail@plt+0x2674c>
   38d30:	ldrb	r2, [r6, r3]
   38d34:	asr	ip, r2, #5
   38d38:	and	r2, r2, #31
   38d3c:	ldr	r1, [r4, ip, lsl #2]
   38d40:	orr	r2, r1, lr, lsl r2
   38d44:	str	r2, [r4, ip, lsl #2]
   38d48:	b	38d10 <__assert_fail@plt+0x2674c>
   38d4c:	add	r3, r3, #1
   38d50:	cmp	r3, #256	; 0x100
   38d54:	beq	38da0 <__assert_fail@plt+0x267dc>
   38d58:	ldr	r1, [r0]
   38d5c:	lsl	r2, r3, #1
   38d60:	ldrh	r2, [r1, r2]
   38d64:	tst	r2, #4096	; 0x1000
   38d68:	beq	38d4c <__assert_fail@plt+0x26788>
   38d6c:	add	r2, r3, #31
   38d70:	cmp	r3, #0
   38d74:	movge	r2, r3
   38d78:	asr	r2, r2, #5
   38d7c:	rsbs	r1, r3, #0
   38d80:	and	ip, r3, #31
   38d84:	and	r1, r1, #31
   38d88:	rsbpl	ip, r1, #0
   38d8c:	ldr	r1, [r4, r2, lsl #2]
   38d90:	orr	r1, r1, lr, lsl ip
   38d94:	str	r1, [r4, r2, lsl #2]
   38d98:	b	38d4c <__assert_fail@plt+0x26788>
   38d9c:	mov	r5, #12
   38da0:	mov	r0, r5
   38da4:	ldrd	r4, [sp]
   38da8:	ldrd	r6, [sp, #8]
   38dac:	ldrd	r8, [sp, #16]
   38db0:	ldr	sl, [sp, #24]
   38db4:	add	sp, sp, #28
   38db8:	pop	{pc}		; (ldr pc, [sp], #4)
   38dbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38dc0:	strd	r6, [sp, #8]
   38dc4:	strd	r8, [sp, #16]
   38dc8:	str	sl, [sp, #24]
   38dcc:	str	lr, [sp, #28]
   38dd0:	sub	sp, sp, #24
   38dd4:	mov	r6, r0
   38dd8:	mov	r9, r1
   38ddc:	mov	sl, r2
   38de0:	mov	r5, r3
   38de4:	ldrb	r8, [sp, #56]	; 0x38
   38de8:	mov	r3, #0
   38dec:	str	r3, [sp, #20]
   38df0:	mov	r1, #1
   38df4:	mov	r0, #32
   38df8:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   38dfc:	subs	r4, r0, #0
   38e00:	beq	38f74 <__assert_fail@plt+0x269b0>
   38e04:	mov	r1, #1
   38e08:	mov	r0, #40	; 0x28
   38e0c:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   38e10:	subs	r7, r0, #0
   38e14:	beq	38f88 <__assert_fail@plt+0x269c4>
   38e18:	ldrb	r3, [r7, #16]
   38e1c:	bfi	r3, r8, #0, #1
   38e20:	strb	r3, [r7, #16]
   38e24:	mov	r3, #0
   38e28:	str	r3, [sp, #4]
   38e2c:	str	sl, [sp]
   38e30:	add	r3, sp, #20
   38e34:	mov	r2, r7
   38e38:	mov	r1, r4
   38e3c:	mov	r0, r9
   38e40:	bl	38340 <__assert_fail@plt+0x25d7c>
   38e44:	subs	r9, r0, #0
   38e48:	bne	38fa4 <__assert_fail@plt+0x269e0>
   38e4c:	ldrb	r3, [r5]
   38e50:	cmp	r3, #0
   38e54:	beq	38e7c <__assert_fail@plt+0x268b8>
   38e58:	mov	r0, #1
   38e5c:	lsr	r1, r3, #5
   38e60:	and	r3, r3, #31
   38e64:	ldr	r2, [r4, r1, lsl #2]
   38e68:	orr	r3, r2, r0, lsl r3
   38e6c:	str	r3, [r4, r1, lsl #2]
   38e70:	ldrb	r3, [r5, #1]!
   38e74:	cmp	r3, #0
   38e78:	bne	38e5c <__assert_fail@plt+0x26898>
   38e7c:	cmp	r8, #0
   38e80:	beq	38ea0 <__assert_fail@plt+0x268dc>
   38e84:	sub	r3, r4, #4
   38e88:	add	r1, r4, #28
   38e8c:	ldr	r2, [r3, #4]!
   38e90:	mvn	r2, r2
   38e94:	str	r2, [r3]
   38e98:	cmp	r3, r1
   38e9c:	bne	38e8c <__assert_fail@plt+0x268c8>
   38ea0:	ldr	r3, [r6, #92]	; 0x5c
   38ea4:	cmp	r3, #1
   38ea8:	ble	38ed4 <__assert_fail@plt+0x26910>
   38eac:	sub	r3, r4, #4
   38eb0:	ldr	r1, [r6, #60]	; 0x3c
   38eb4:	sub	r1, r1, #4
   38eb8:	add	ip, r4, #28
   38ebc:	ldr	r2, [r3, #4]!
   38ec0:	ldr	r0, [r1, #4]!
   38ec4:	and	r2, r2, r0
   38ec8:	str	r2, [r3]
   38ecc:	cmp	r3, ip
   38ed0:	bne	38ebc <__assert_fail@plt+0x268f8>
   38ed4:	mov	r1, #0
   38ed8:	str	r1, [sp, #16]
   38edc:	str	r4, [sp, #12]
   38ee0:	mov	r3, #3
   38ee4:	strb	r3, [sp, #16]
   38ee8:	add	r3, sp, #12
   38eec:	mov	r2, r1
   38ef0:	mov	r0, r6
   38ef4:	bl	33bbc <__assert_fail@plt+0x215f8>
   38ef8:	subs	r5, r0, #0
   38efc:	beq	38fd0 <__assert_fail@plt+0x26a0c>
   38f00:	ldr	r3, [r6, #92]	; 0x5c
   38f04:	cmp	r3, #1
   38f08:	ble	38fc4 <__assert_fail@plt+0x26a00>
   38f0c:	mov	r3, #6
   38f10:	strb	r3, [sp, #16]
   38f14:	str	r7, [sp, #12]
   38f18:	ldrb	r3, [r6, #88]	; 0x58
   38f1c:	orr	r3, r3, #2
   38f20:	strb	r3, [r6, #88]	; 0x58
   38f24:	add	r3, sp, #12
   38f28:	mov	r2, #0
   38f2c:	mov	r1, r2
   38f30:	mov	r0, r6
   38f34:	bl	33bbc <__assert_fail@plt+0x215f8>
   38f38:	subs	r2, r0, #0
   38f3c:	beq	38fd0 <__assert_fail@plt+0x26a0c>
   38f40:	mov	r3, #10
   38f44:	mov	r1, r5
   38f48:	mov	r0, r6
   38f4c:	bl	33d58 <__assert_fail@plt+0x21794>
   38f50:	mov	r5, r0
   38f54:	mov	r0, r5
   38f58:	add	sp, sp, #24
   38f5c:	ldrd	r4, [sp]
   38f60:	ldrd	r6, [sp, #8]
   38f64:	ldrd	r8, [sp, #16]
   38f68:	ldr	sl, [sp, #24]
   38f6c:	add	sp, sp, #28
   38f70:	pop	{pc}		; (ldr pc, [sp], #4)
   38f74:	mov	r3, #12
   38f78:	ldr	r2, [sp, #60]	; 0x3c
   38f7c:	str	r3, [r2]
   38f80:	mov	r5, r4
   38f84:	b	38f54 <__assert_fail@plt+0x26990>
   38f88:	mov	r0, r4
   38f8c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   38f90:	mov	r3, #12
   38f94:	ldr	r2, [sp, #60]	; 0x3c
   38f98:	str	r3, [r2]
   38f9c:	mov	r5, r7
   38fa0:	b	38f54 <__assert_fail@plt+0x26990>
   38fa4:	mov	r0, r4
   38fa8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   38fac:	mov	r0, r7
   38fb0:	bl	358b8 <__assert_fail@plt+0x232f4>
   38fb4:	ldr	r3, [sp, #60]	; 0x3c
   38fb8:	str	r9, [r3]
   38fbc:	mov	r5, #0
   38fc0:	b	38f54 <__assert_fail@plt+0x26990>
   38fc4:	mov	r0, r7
   38fc8:	bl	358b8 <__assert_fail@plt+0x232f4>
   38fcc:	b	38f54 <__assert_fail@plt+0x26990>
   38fd0:	mov	r0, r4
   38fd4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   38fd8:	mov	r0, r7
   38fdc:	bl	358b8 <__assert_fail@plt+0x232f4>
   38fe0:	mov	r3, #12
   38fe4:	ldr	r2, [sp, #60]	; 0x3c
   38fe8:	str	r3, [r2]
   38fec:	mov	r5, #0
   38ff0:	b	38f54 <__assert_fail@plt+0x26990>
   38ff4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38ff8:	strd	r6, [sp, #8]
   38ffc:	strd	r8, [sp, #16]
   39000:	strd	sl, [sp, #24]
   39004:	str	lr, [sp, #32]
   39008:	sub	sp, sp, #316	; 0x13c
   3900c:	ldr	fp, [r0]
   39010:	ldr	r3, [fp, #92]	; 0x5c
   39014:	cmp	r3, #1
   39018:	ldreq	r3, [r0, #12]
   3901c:	ubfxeq	r3, r3, #22, #1
   39020:	movne	r3, #0
   39024:	mov	r9, r3
   39028:	ldr	r3, [r1, #8]
   3902c:	cmp	r3, #0
   39030:	ble	39134 <__assert_fail@plt+0x26b70>
   39034:	mov	r7, r2
   39038:	str	r1, [sp, #8]
   3903c:	str	r0, [sp, #28]
   39040:	mov	r3, #0
   39044:	str	r3, [sp, #4]
   39048:	str	r3, [sp, #20]
   3904c:	str	r3, [sp, #24]
   39050:	mov	r3, #255	; 0xff
   39054:	movt	r3, #32
   39058:	str	r3, [sp, #32]
   3905c:	mov	r3, #1
   39060:	movt	r3, #32
   39064:	str	r3, [sp, #36]	; 0x24
   39068:	mov	sl, fp
   3906c:	b	390cc <__assert_fail@plt+0x26b08>
   39070:	ldrb	r5, [r2, r4, lsl #3]
   39074:	strb	r3, [r7, r5]
   39078:	cmp	r9, #0
   3907c:	beq	39094 <__assert_fail@plt+0x26ad0>
   39080:	bl	12258 <__ctype_tolower_loc@plt>
   39084:	ldr	r3, [r0]
   39088:	ldr	r3, [r3, r5, lsl #2]
   3908c:	mov	r2, #1
   39090:	strb	r2, [r7, r3]
   39094:	ldr	r3, [sp, #28]
   39098:	ldr	r3, [r3, #12]
   3909c:	tst	r3, #4194304	; 0x400000
   390a0:	beq	390b0 <__assert_fail@plt+0x26aec>
   390a4:	ldr	r3, [sl, #92]	; 0x5c
   390a8:	cmp	r3, #1
   390ac:	bgt	39150 <__assert_fail@plt+0x26b8c>
   390b0:	ldr	r3, [sp, #4]
   390b4:	add	r2, r3, #1
   390b8:	str	r2, [sp, #4]
   390bc:	ldr	r3, [sp, #8]
   390c0:	ldr	r3, [r3, #8]
   390c4:	cmp	r3, r2
   390c8:	ble	39134 <__assert_fail@plt+0x26b70>
   390cc:	ldr	r3, [sp, #8]
   390d0:	ldr	r3, [r3, #12]
   390d4:	ldr	r2, [sp, #4]
   390d8:	ldr	r4, [r3, r2, lsl #2]
   390dc:	lsl	r3, r4, #3
   390e0:	str	r3, [sp, #12]
   390e4:	ldr	r2, [sl]
   390e8:	add	r3, r2, r3
   390ec:	ldrb	r3, [r3, #4]
   390f0:	mov	r5, r3
   390f4:	cmp	r3, #1
   390f8:	beq	39070 <__assert_fail@plt+0x26aac>
   390fc:	cmp	r3, #3
   39100:	beq	39234 <__assert_fail@plt+0x26c70>
   39104:	cmp	r3, #6
   39108:	beq	392c4 <__assert_fail@plt+0x26d00>
   3910c:	and	r2, r3, #253	; 0xfd
   39110:	cmp	r3, #2
   39114:	cmpne	r2, #5
   39118:	bne	390b0 <__assert_fail@plt+0x26aec>
   3911c:	mov	r2, #256	; 0x100
   39120:	mov	r1, #1
   39124:	mov	r0, r7
   39128:	bl	12348 <memset@plt>
   3912c:	cmp	r5, #2
   39130:	beq	39424 <__assert_fail@plt+0x26e60>
   39134:	add	sp, sp, #316	; 0x13c
   39138:	ldrd	r4, [sp]
   3913c:	ldrd	r6, [sp, #8]
   39140:	ldrd	r8, [sp, #16]
   39144:	ldrd	sl, [sp, #24]
   39148:	add	sp, sp, #32
   3914c:	pop	{pc}		; (ldr pc, [sp], #4)
   39150:	ldr	r3, [sl]
   39154:	ldrb	r3, [r3, r4, lsl #3]
   39158:	strb	r3, [sp, #56]	; 0x38
   3915c:	add	r2, r4, #1
   39160:	ldr	r3, [sl, #8]
   39164:	cmp	r2, r3
   39168:	bcs	39224 <__assert_fail@plt+0x26c60>
   3916c:	ldr	r3, [sp, #12]
   39170:	add	r3, r3, #8
   39174:	ldr	r1, [sl]
   39178:	add	r3, r1, r3
   3917c:	ldr	r1, [r3, #4]
   39180:	ldr	r0, [sp, #32]
   39184:	and	r1, r1, r0
   39188:	ldr	ip, [sp, #36]	; 0x24
   3918c:	cmp	r1, ip
   39190:	bne	3922c <__assert_fail@plt+0x26c68>
   39194:	add	r4, sp, #57	; 0x39
   39198:	ldrb	r3, [r3]
   3919c:	strb	r3, [r4], #1
   391a0:	add	r2, r2, #1
   391a4:	ldr	r3, [sl, #8]
   391a8:	cmp	r3, r2
   391ac:	bls	391c8 <__assert_fail@plt+0x26c04>
   391b0:	ldr	r3, [sl]
   391b4:	add	r3, r3, r2, lsl #3
   391b8:	ldr	r1, [r3, #4]
   391bc:	and	r1, r1, r0
   391c0:	cmp	r1, ip
   391c4:	beq	39198 <__assert_fail@plt+0x26bd4>
   391c8:	mov	r3, #0
   391cc:	str	r3, [sp, #48]	; 0x30
   391d0:	str	r3, [sp, #52]	; 0x34
   391d4:	add	r1, sp, #56	; 0x38
   391d8:	sub	r4, r4, r1
   391dc:	add	r3, sp, #48	; 0x30
   391e0:	mov	r2, r4
   391e4:	add	r0, sp, #44	; 0x2c
   391e8:	bl	32184 <__assert_fail@plt+0x1fbc0>
   391ec:	cmp	r4, r0
   391f0:	bne	390b0 <__assert_fail@plt+0x26aec>
   391f4:	ldr	r0, [sp, #44]	; 0x2c
   391f8:	bl	12030 <towlower@plt>
   391fc:	add	r2, sp, #48	; 0x30
   39200:	mov	r1, r0
   39204:	add	r0, sp, #56	; 0x38
   39208:	bl	11ed4 <wcrtomb@plt>
   3920c:	cmn	r0, #1
   39210:	beq	390b0 <__assert_fail@plt+0x26aec>
   39214:	ldrb	r3, [sp, #56]	; 0x38
   39218:	mov	r2, #1
   3921c:	strb	r2, [r7, r3]
   39220:	b	390b0 <__assert_fail@plt+0x26aec>
   39224:	add	r4, sp, #57	; 0x39
   39228:	b	391c8 <__assert_fail@plt+0x26c04>
   3922c:	add	r4, sp, #57	; 0x39
   39230:	b	391c8 <__assert_fail@plt+0x26c04>
   39234:	mov	fp, #0
   39238:	mov	r8, #1
   3923c:	str	sl, [sp, #16]
   39240:	b	3929c <__assert_fail@plt+0x26cd8>
   39244:	strb	r8, [r7, r3]
   39248:	add	r4, r4, #1
   3924c:	add	r5, r5, #1
   39250:	cmp	r4, #32
   39254:	beq	39290 <__assert_fail@plt+0x26ccc>
   39258:	lsr	r3, r6, r4
   3925c:	tst	r3, #1
   39260:	beq	39248 <__assert_fail@plt+0x26c84>
   39264:	strb	r8, [r7, r5]
   39268:	cmp	r9, #0
   3926c:	beq	39248 <__assert_fail@plt+0x26c84>
   39270:	add	r3, r5, #128	; 0x80
   39274:	cmp	r3, #384	; 0x180
   39278:	movcs	r3, r5
   3927c:	bcs	39244 <__assert_fail@plt+0x26c80>
   39280:	bl	12258 <__ctype_tolower_loc@plt>
   39284:	ldr	r3, [r0]
   39288:	ldr	r3, [r3, r5, lsl #2]
   3928c:	b	39244 <__assert_fail@plt+0x26c80>
   39290:	add	fp, fp, #4
   39294:	cmp	fp, #32
   39298:	beq	392bc <__assert_fail@plt+0x26cf8>
   3929c:	lsl	r5, fp, #3
   392a0:	ldr	r3, [sp, #16]
   392a4:	ldr	r3, [r3]
   392a8:	ldr	r2, [sp, #12]
   392ac:	ldr	r3, [r3, r2]
   392b0:	ldr	r6, [r3, fp]
   392b4:	mov	r4, #0
   392b8:	b	39258 <__assert_fail@plt+0x26c94>
   392bc:	ldr	sl, [sp, #16]
   392c0:	b	390b0 <__assert_fail@plt+0x26aec>
   392c4:	ldr	r5, [r2, r4, lsl #3]
   392c8:	ldr	r3, [sl, #92]	; 0x5c
   392cc:	cmp	r3, #1
   392d0:	ble	3930c <__assert_fail@plt+0x26d48>
   392d4:	ldr	r3, [r5, #36]	; 0x24
   392d8:	cmp	r3, #0
   392dc:	bne	392f8 <__assert_fail@plt+0x26d34>
   392e0:	ldrb	r3, [r5, #16]
   392e4:	tst	r3, #1
   392e8:	bne	392f8 <__assert_fail@plt+0x26d34>
   392ec:	ldr	r3, [r5, #32]
   392f0:	cmp	r3, #0
   392f4:	beq	3930c <__assert_fail@plt+0x26d48>
   392f8:	mov	r3, #0
   392fc:	strb	r3, [sp, #48]	; 0x30
   39300:	ldr	r4, [sp, #20]
   39304:	ldr	r5, [sp, #24]
   39308:	b	3933c <__assert_fail@plt+0x26d78>
   3930c:	ldr	r3, [r5, #20]
   39310:	cmp	r3, #0
   39314:	ble	390b0 <__assert_fail@plt+0x26aec>
   39318:	mov	r4, #0
   3931c:	ldr	fp, [sp, #28]
   39320:	b	39380 <__assert_fail@plt+0x26dbc>
   39324:	ldrb	r3, [sp, #48]	; 0x30
   39328:	add	r3, r3, #1
   3932c:	uxtb	r3, r3
   39330:	strb	r3, [sp, #48]	; 0x30
   39334:	cmp	r3, #0
   39338:	beq	390b0 <__assert_fail@plt+0x26aec>
   3933c:	str	r4, [sp, #56]	; 0x38
   39340:	str	r5, [sp, #60]	; 0x3c
   39344:	add	r3, sp, #56	; 0x38
   39348:	mov	r2, #1
   3934c:	add	r1, sp, #48	; 0x30
   39350:	mov	r0, #0
   39354:	bl	32184 <__assert_fail@plt+0x1fbc0>
   39358:	cmn	r0, #2
   3935c:	bne	39324 <__assert_fail@plt+0x26d60>
   39360:	ldrb	r3, [sp, #48]	; 0x30
   39364:	mov	r2, #1
   39368:	strb	r2, [r7, r3]
   3936c:	b	39324 <__assert_fail@plt+0x26d60>
   39370:	add	r4, r4, #1
   39374:	ldr	r3, [r5, #20]
   39378:	cmp	r3, r4
   3937c:	ble	390b0 <__assert_fail@plt+0x26aec>
   39380:	ldr	r3, [sp, #20]
   39384:	str	r3, [sp, #48]	; 0x30
   39388:	ldr	r3, [sp, #24]
   3938c:	str	r3, [sp, #52]	; 0x34
   39390:	lsl	r8, r4, #2
   39394:	ldr	r3, [r5]
   39398:	add	r2, sp, #48	; 0x30
   3939c:	ldr	r1, [r3, r4, lsl #2]
   393a0:	add	r0, sp, #56	; 0x38
   393a4:	bl	11ed4 <wcrtomb@plt>
   393a8:	cmn	r0, #1
   393ac:	beq	393d8 <__assert_fail@plt+0x26e14>
   393b0:	ldrb	r6, [sp, #56]	; 0x38
   393b4:	mov	r3, #1
   393b8:	strb	r3, [r7, r6]
   393bc:	cmp	r9, #0
   393c0:	beq	393d8 <__assert_fail@plt+0x26e14>
   393c4:	bl	12258 <__ctype_tolower_loc@plt>
   393c8:	ldr	r3, [r0]
   393cc:	ldr	r3, [r3, r6, lsl #2]
   393d0:	mov	r2, #1
   393d4:	strb	r2, [r7, r3]
   393d8:	ldr	r3, [fp, #12]
   393dc:	tst	r3, #4194304	; 0x400000
   393e0:	beq	39370 <__assert_fail@plt+0x26dac>
   393e4:	ldr	r3, [sl, #92]	; 0x5c
   393e8:	cmp	r3, #1
   393ec:	ble	39370 <__assert_fail@plt+0x26dac>
   393f0:	ldr	r3, [r5]
   393f4:	ldr	r0, [r3, r8]
   393f8:	bl	12030 <towlower@plt>
   393fc:	add	r2, sp, #48	; 0x30
   39400:	mov	r1, r0
   39404:	add	r0, sp, #56	; 0x38
   39408:	bl	11ed4 <wcrtomb@plt>
   3940c:	cmn	r0, #1
   39410:	beq	39370 <__assert_fail@plt+0x26dac>
   39414:	ldrb	r3, [sp, #56]	; 0x38
   39418:	mov	r2, #1
   3941c:	strb	r2, [r7, r3]
   39420:	b	39370 <__assert_fail@plt+0x26dac>
   39424:	ldr	r2, [sp, #28]
   39428:	ldrb	r3, [r2, #28]
   3942c:	orr	r3, r3, #1
   39430:	strb	r3, [r2, #28]
   39434:	b	39134 <__assert_fail@plt+0x26b70>
   39438:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3943c:	strd	r6, [sp, #8]
   39440:	strd	r8, [sp, #16]
   39444:	strd	sl, [sp, #24]
   39448:	str	lr, [sp, #32]
   3944c:	sub	sp, sp, #28
   39450:	mov	r4, r0
   39454:	mov	r6, r1
   39458:	mov	r7, r2
   3945c:	ldr	r5, [r0, #24]
   39460:	cmp	r5, r1
   39464:	suble	r5, r1, r5
   39468:	ble	394c4 <__assert_fail@plt+0x26f00>
   3946c:	ldr	r3, [r0, #80]	; 0x50
   39470:	cmp	r3, #1
   39474:	bgt	39588 <__assert_fail@plt+0x26fc4>
   39478:	ldr	r3, [r4, #44]	; 0x2c
   3947c:	str	r3, [r4, #48]	; 0x30
   39480:	ldr	r3, [r4, #52]	; 0x34
   39484:	str	r3, [r4, #56]	; 0x38
   39488:	mov	r3, #0
   3948c:	str	r3, [r4, #28]
   39490:	str	r3, [r4, #24]
   39494:	str	r3, [r4, #32]
   39498:	strb	r3, [r4, #76]	; 0x4c
   3949c:	and	r3, r7, #1
   394a0:	cmp	r3, #0
   394a4:	movne	r3, #4
   394a8:	moveq	r3, #6
   394ac:	str	r3, [r4, #60]	; 0x3c
   394b0:	ldrb	r3, [r4, #75]	; 0x4b
   394b4:	cmp	r3, #0
   394b8:	ldreq	r3, [r4]
   394bc:	streq	r3, [r4, #4]
   394c0:	mov	r5, r6
   394c4:	cmp	r5, #0
   394c8:	beq	39540 <__assert_fail@plt+0x26f7c>
   394cc:	ldr	r3, [r4, #32]
   394d0:	cmp	r3, r5
   394d4:	ble	397bc <__assert_fail@plt+0x271f8>
   394d8:	ldrb	r3, [r4, #76]	; 0x4c
   394dc:	cmp	r3, #0
   394e0:	bne	39598 <__assert_fail@plt+0x26fd4>
   394e4:	mov	r2, r7
   394e8:	sub	r1, r5, #1
   394ec:	mov	r0, r4
   394f0:	bl	370c8 <__assert_fail@plt+0x24b04>
   394f4:	str	r0, [r4, #60]	; 0x3c
   394f8:	ldr	r3, [r4, #80]	; 0x50
   394fc:	cmp	r3, #1
   39500:	bgt	39788 <__assert_fail@plt+0x271c4>
   39504:	ldrb	r3, [r4, #75]	; 0x4b
   39508:	cmp	r3, #0
   3950c:	bne	397a4 <__assert_fail@plt+0x271e0>
   39510:	ldr	r3, [r4, #28]
   39514:	sub	r3, r3, r5
   39518:	str	r3, [r4, #28]
   3951c:	ldr	r3, [r4, #32]
   39520:	sub	r3, r3, r5
   39524:	str	r3, [r4, #32]
   39528:	ldrb	r3, [r4, #75]	; 0x4b
   3952c:	cmp	r3, #0
   39530:	bne	39540 <__assert_fail@plt+0x26f7c>
   39534:	ldr	r3, [r4, #4]
   39538:	add	r3, r3, r5
   3953c:	str	r3, [r4, #4]
   39540:	str	r6, [r4, #24]
   39544:	ldr	r3, [r4, #48]	; 0x30
   39548:	sub	r3, r3, r5
   3954c:	str	r3, [r4, #48]	; 0x30
   39550:	ldr	r2, [r4, #56]	; 0x38
   39554:	sub	r5, r2, r5
   39558:	str	r5, [r4, #56]	; 0x38
   3955c:	ldr	r2, [r4, #80]	; 0x50
   39560:	cmp	r2, #1
   39564:	ble	39b00 <__assert_fail@plt+0x2753c>
   39568:	ldrb	r3, [r4, #72]	; 0x48
   3956c:	cmp	r3, #0
   39570:	beq	39af4 <__assert_fail@plt+0x27530>
   39574:	mov	r0, r4
   39578:	bl	342e0 <__assert_fail@plt+0x21d1c>
   3957c:	cmp	r0, #0
   39580:	beq	39b10 <__assert_fail@plt+0x2754c>
   39584:	b	39b18 <__assert_fail@plt+0x27554>
   39588:	mov	r3, #0
   3958c:	str	r3, [r0, #16]
   39590:	str	r3, [r0, #20]
   39594:	b	39478 <__assert_fail@plt+0x26eb4>
   39598:	ldr	sl, [r4, #28]
   3959c:	ldr	r9, [r4, #12]
   395a0:	mov	r2, sl
   395a4:	mov	r1, #0
   395a8:	b	395b8 <__assert_fail@plt+0x26ff4>
   395ac:	mov	r2, r8
   395b0:	cmp	r1, r2
   395b4:	bge	395dc <__assert_fail@plt+0x27018>
   395b8:	add	r3, r1, r2
   395bc:	add	r3, r3, r3, lsr #31
   395c0:	asr	r8, r3, #1
   395c4:	ldr	r3, [r9, r8, lsl #2]
   395c8:	cmp	r3, r5
   395cc:	bgt	395ac <__assert_fail@plt+0x26fe8>
   395d0:	bge	395e4 <__assert_fail@plt+0x27020>
   395d4:	add	r1, r8, #1
   395d8:	b	395b0 <__assert_fail@plt+0x26fec>
   395dc:	cmp	r3, r5
   395e0:	addlt	r8, r8, #1
   395e4:	mov	r2, r7
   395e8:	sub	r1, r8, #1
   395ec:	mov	r0, r4
   395f0:	bl	370c8 <__assert_fail@plt+0x24b04>
   395f4:	str	r0, [r4, #60]	; 0x3c
   395f8:	cmp	r5, sl
   395fc:	movge	r3, #0
   39600:	movlt	r3, #1
   39604:	cmp	r5, r8
   39608:	movne	r3, #0
   3960c:	cmp	r3, #0
   39610:	bne	396e8 <__assert_fail@plt+0x27124>
   39614:	ldr	r3, [r4, #44]	; 0x2c
   39618:	sub	r3, r3, r6
   3961c:	add	r3, r3, r5
   39620:	str	r3, [r4, #48]	; 0x30
   39624:	ldr	r3, [r4, #52]	; 0x34
   39628:	sub	r3, r3, r6
   3962c:	add	r3, r3, r5
   39630:	str	r3, [r4, #56]	; 0x38
   39634:	mov	r3, #0
   39638:	strb	r3, [r4, #76]	; 0x4c
   3963c:	cmp	r8, r3
   39640:	ble	3966c <__assert_fail@plt+0x270a8>
   39644:	sub	r2, r8, #-1073741823	; 0xc0000001
   39648:	add	r3, r9, r2, lsl #2
   3964c:	ldr	r2, [r9, r2, lsl #2]
   39650:	cmp	r2, r5
   39654:	bne	3966c <__assert_fail@plt+0x270a8>
   39658:	subs	r8, r8, #1
   3965c:	beq	3966c <__assert_fail@plt+0x270a8>
   39660:	ldr	r2, [r3, #-4]!
   39664:	cmp	r2, r5
   39668:	beq	39658 <__assert_fail@plt+0x27094>
   3966c:	cmp	r8, sl
   39670:	bge	3976c <__assert_fail@plt+0x271a8>
   39674:	ldr	r2, [r4, #8]
   39678:	add	r3, r2, r8, lsl #2
   3967c:	ldr	r2, [r2, r8, lsl #2]
   39680:	cmn	r2, #1
   39684:	bne	396a0 <__assert_fail@plt+0x270dc>
   39688:	add	r8, r8, #1
   3968c:	cmp	sl, r8
   39690:	beq	39774 <__assert_fail@plt+0x271b0>
   39694:	ldr	r2, [r3, #4]!
   39698:	cmn	r2, #1
   3969c:	beq	39688 <__assert_fail@plt+0x270c4>
   396a0:	ldr	r2, [r9, r8, lsl #2]
   396a4:	sub	r2, r2, r5
   396a8:	str	r2, [r4, #28]
   396ac:	cmp	r2, #0
   396b0:	beq	3977c <__assert_fail@plt+0x271b8>
   396b4:	ble	396d8 <__assert_fail@plt+0x27114>
   396b8:	mov	r3, #0
   396bc:	mvn	r1, #0
   396c0:	ldr	r2, [r4, #8]
   396c4:	str	r1, [r2, r3, lsl #2]
   396c8:	add	r3, r3, #1
   396cc:	ldr	r2, [r4, #28]
   396d0:	cmp	r2, r3
   396d4:	bgt	396c0 <__assert_fail@plt+0x270fc>
   396d8:	mov	r1, #255	; 0xff
   396dc:	ldr	r0, [r4, #4]
   396e0:	bl	12348 <memset@plt>
   396e4:	b	3977c <__assert_fail@plt+0x271b8>
   396e8:	ldr	r3, [r9, r8, lsl #2]
   396ec:	cmp	r3, r5
   396f0:	bne	39614 <__assert_fail@plt+0x27050>
   396f4:	ldr	r0, [r4, #8]
   396f8:	lsl	r7, r5, #2
   396fc:	sub	r2, sl, r5
   39700:	lsl	r2, r2, #2
   39704:	add	r1, r0, r7
   39708:	bl	11f94 <memmove@plt>
   3970c:	ldr	r0, [r4, #4]
   39710:	ldr	r2, [r4, #28]
   39714:	sub	r2, r2, r5
   39718:	add	r1, r0, r5
   3971c:	bl	11f94 <memmove@plt>
   39720:	ldr	r3, [r4, #28]
   39724:	sub	r3, r3, r5
   39728:	str	r3, [r4, #28]
   3972c:	ldr	r2, [r4, #32]
   39730:	sub	r2, r2, r5
   39734:	str	r2, [r4, #32]
   39738:	cmp	r3, #0
   3973c:	ble	39528 <__assert_fail@plt+0x26f64>
   39740:	mov	r3, #0
   39744:	ldr	r1, [r4, #12]
   39748:	ldr	r2, [r1, r7]
   3974c:	sub	r2, r2, r5
   39750:	str	r2, [r1, r3, lsl #2]
   39754:	add	r3, r3, #1
   39758:	add	r7, r7, #4
   3975c:	ldr	r2, [r4, #28]
   39760:	cmp	r2, r3
   39764:	bgt	39744 <__assert_fail@plt+0x27180>
   39768:	b	39528 <__assert_fail@plt+0x26f64>
   3976c:	cmp	r8, sl
   39770:	bne	396a0 <__assert_fail@plt+0x270dc>
   39774:	mov	r3, #0
   39778:	str	r3, [r4, #28]
   3977c:	ldr	r3, [r4, #28]
   39780:	str	r3, [r4, #32]
   39784:	b	39528 <__assert_fail@plt+0x26f64>
   39788:	ldr	r0, [r4, #8]
   3978c:	ldr	r2, [r4, #28]
   39790:	sub	r2, r2, r5
   39794:	lsl	r2, r2, #2
   39798:	add	r1, r0, r5, lsl #2
   3979c:	bl	11f94 <memmove@plt>
   397a0:	b	39504 <__assert_fail@plt+0x26f40>
   397a4:	ldr	r0, [r4, #4]
   397a8:	ldr	r2, [r4, #28]
   397ac:	sub	r2, r2, r5
   397b0:	add	r1, r0, r5
   397b4:	bl	11f94 <memmove@plt>
   397b8:	b	39510 <__assert_fail@plt+0x26f4c>
   397bc:	ldr	fp, [r4, #28]
   397c0:	ldrb	r3, [r4, #76]	; 0x4c
   397c4:	cmp	r3, #0
   397c8:	bne	39928 <__assert_fail@plt+0x27364>
   397cc:	mov	r3, #0
   397d0:	str	r3, [r4, #28]
   397d4:	ldr	r3, [r4, #80]	; 0x50
   397d8:	cmp	r3, #1
   397dc:	ble	39a90 <__assert_fail@plt+0x274cc>
   397e0:	ldrb	r2, [r4, #73]	; 0x49
   397e4:	cmp	r2, #0
   397e8:	beq	398a0 <__assert_fail@plt+0x272dc>
   397ec:	ldr	r1, [r4]
   397f0:	ldr	r9, [r4, #24]
   397f4:	add	r9, r1, r9
   397f8:	sub	r3, r5, r3
   397fc:	add	r3, r9, r3
   39800:	cmp	r1, r3
   39804:	movcc	r1, r3
   39808:	mov	sl, r5
   3980c:	sub	r3, r5, #1
   39810:	add	r8, r9, r3
   39814:	cmp	r1, r8
   39818:	bhi	398a0 <__assert_fail@plt+0x272dc>
   3981c:	ldrb	r3, [r9, r3]
   39820:	and	r3, r3, #192	; 0xc0
   39824:	cmp	r3, #128	; 0x80
   39828:	subeq	r3, r8, #1
   3982c:	subeq	r1, r1, #1
   39830:	bne	39854 <__assert_fail@plt+0x27290>
   39834:	mov	r8, r3
   39838:	cmp	r3, r1
   3983c:	beq	398a0 <__assert_fail@plt+0x272dc>
   39840:	sub	r3, r3, #1
   39844:	ldrb	r2, [r8]
   39848:	and	r2, r2, #192	; 0xc0
   3984c:	cmp	r2, #128	; 0x80
   39850:	beq	39834 <__assert_fail@plt+0x27270>
   39854:	ldr	r2, [r4, #48]	; 0x30
   39858:	add	r2, r9, r2
   3985c:	sub	r2, r2, r8
   39860:	ldr	r3, [r4, #64]	; 0x40
   39864:	cmp	r3, #0
   39868:	moveq	ip, r8
   3986c:	bne	39954 <__assert_fail@plt+0x27390>
   39870:	mov	r0, #0
   39874:	mov	r1, #0
   39878:	strd	r0, [sp, #16]
   3987c:	add	r3, sp, #16
   39880:	mov	r1, ip
   39884:	add	r0, sp, #4
   39888:	bl	32184 <__assert_fail@plt+0x1fbc0>
   3988c:	add	r9, r9, sl
   39890:	sub	r8, r9, r8
   39894:	cmp	r8, r0
   39898:	cmnls	r0, #3
   3989c:	bls	3999c <__assert_fail@plt+0x273d8>
   398a0:	ldr	r0, [r4, #24]
   398a4:	ldr	r3, [r4, #32]
   398a8:	add	r0, r0, r3
   398ac:	cmp	r6, r0
   398b0:	ble	39b64 <__assert_fail@plt+0x275a0>
   398b4:	add	r9, r4, #16
   398b8:	ldr	r8, [r4, #44]	; 0x2c
   398bc:	sub	r8, r8, r0
   398c0:	ldrd	r2, [r9]
   398c4:	strd	r2, [sp, #16]
   398c8:	mov	sl, r0
   398cc:	ldr	r1, [r4]
   398d0:	mov	r3, r9
   398d4:	mov	r2, r8
   398d8:	add	r1, r1, r0
   398dc:	add	r0, sp, #8
   398e0:	bl	32184 <__assert_fail@plt+0x1fbc0>
   398e4:	sub	r3, r0, #1
   398e8:	cmn	r3, #4
   398ec:	ldrls	r8, [sp, #8]
   398f0:	bhi	399f0 <__assert_fail@plt+0x2742c>
   398f4:	add	r0, sl, r0
   398f8:	cmp	r6, r0
   398fc:	bgt	398b8 <__assert_fail@plt+0x272f4>
   39900:	sub	r0, r0, r6
   39904:	str	r0, [r4, #28]
   39908:	cmn	r8, #1
   3990c:	bne	399bc <__assert_fail@plt+0x273f8>
   39910:	mov	r2, r7
   39914:	sub	r1, fp, #1
   39918:	mov	r0, r4
   3991c:	bl	370c8 <__assert_fail@plt+0x24b04>
   39920:	str	r0, [r4, #60]	; 0x3c
   39924:	b	399d8 <__assert_fail@plt+0x27414>
   39928:	ldr	r3, [r4, #44]	; 0x2c
   3992c:	sub	r3, r3, r6
   39930:	add	r3, r3, r5
   39934:	str	r3, [r4, #48]	; 0x30
   39938:	ldr	r3, [r4, #52]	; 0x34
   3993c:	sub	r3, r3, r6
   39940:	add	r3, r3, r5
   39944:	str	r3, [r4, #56]	; 0x38
   39948:	mov	r3, #0
   3994c:	strb	r3, [r4, #76]	; 0x4c
   39950:	b	397cc <__assert_fail@plt+0x27208>
   39954:	cmp	r2, #6
   39958:	movlt	r0, r2
   3995c:	movge	r0, #6
   39960:	cmp	r2, #0
   39964:	addle	ip, sp, #8
   39968:	ble	39870 <__assert_fail@plt+0x272ac>
   3996c:	add	r1, r8, r0
   39970:	add	ip, sp, #24
   39974:	add	r0, ip, r0
   39978:	sub	r0, r0, #17
   3997c:	mov	lr, r8
   39980:	ldrb	ip, [r1, #-1]!
   39984:	ldrb	ip, [r3, ip]
   39988:	strb	ip, [r0], #-1
   3998c:	cmp	r1, lr
   39990:	bne	39980 <__assert_fail@plt+0x273bc>
   39994:	add	ip, sp, #8
   39998:	b	39870 <__assert_fail@plt+0x272ac>
   3999c:	mov	r3, #0
   399a0:	str	r3, [r4, #16]
   399a4:	str	r3, [r4, #20]
   399a8:	sub	r0, r0, r8
   399ac:	str	r0, [r4, #28]
   399b0:	ldr	r8, [sp, #4]
   399b4:	cmn	r8, #1
   399b8:	beq	398a0 <__assert_fail@plt+0x272dc>
   399bc:	ldrb	r3, [r4, #78]	; 0x4e
   399c0:	cmp	r3, #0
   399c4:	bne	39a14 <__assert_fail@plt+0x27450>
   399c8:	cmp	r8, #10
   399cc:	movne	r3, #0
   399d0:	beq	39a3c <__assert_fail@plt+0x27478>
   399d4:	str	r3, [r4, #60]	; 0x3c
   399d8:	ldr	r2, [r4, #28]
   399dc:	cmp	r2, #0
   399e0:	bne	39a50 <__assert_fail@plt+0x2748c>
   399e4:	ldr	r3, [r4, #28]
   399e8:	str	r3, [r4, #32]
   399ec:	b	39528 <__assert_fail@plt+0x26f64>
   399f0:	cmp	r8, #0
   399f4:	cmpne	r0, #0
   399f8:	ldrne	r3, [r4]
   399fc:	ldrbne	r8, [r3, sl]
   39a00:	moveq	r8, #0
   39a04:	ldrd	r2, [sp, #16]
   39a08:	strd	r2, [r9]
   39a0c:	mov	r0, #1
   39a10:	b	398f4 <__assert_fail@plt+0x27330>
   39a14:	mov	r0, r8
   39a18:	bl	12324 <iswalnum@plt>
   39a1c:	subs	r3, r8, #95	; 0x5f
   39a20:	movne	r3, #1
   39a24:	cmp	r0, #0
   39a28:	movne	r3, #0
   39a2c:	cmp	r3, #0
   39a30:	moveq	r3, #1
   39a34:	beq	399d4 <__assert_fail@plt+0x27410>
   39a38:	b	399c8 <__assert_fail@plt+0x27404>
   39a3c:	ldrb	r3, [r4, #77]	; 0x4d
   39a40:	cmp	r3, #0
   39a44:	moveq	r3, #0
   39a48:	movne	r3, #2
   39a4c:	b	399d4 <__assert_fail@plt+0x27410>
   39a50:	ble	39a74 <__assert_fail@plt+0x274b0>
   39a54:	mov	r3, #0
   39a58:	mvn	r1, #0
   39a5c:	ldr	r2, [r4, #8]
   39a60:	str	r1, [r2, r3, lsl #2]
   39a64:	add	r3, r3, #1
   39a68:	ldr	r2, [r4, #28]
   39a6c:	cmp	r2, r3
   39a70:	bgt	39a5c <__assert_fail@plt+0x27498>
   39a74:	ldrb	r3, [r4, #75]	; 0x4b
   39a78:	cmp	r3, #0
   39a7c:	beq	399e4 <__assert_fail@plt+0x27420>
   39a80:	mov	r1, #255	; 0xff
   39a84:	ldr	r0, [r4, #4]
   39a88:	bl	12348 <memset@plt>
   39a8c:	b	399e4 <__assert_fail@plt+0x27420>
   39a90:	ldr	r3, [r4]
   39a94:	ldr	r2, [r4, #24]
   39a98:	add	r3, r3, r5
   39a9c:	add	r3, r3, r2
   39aa0:	ldrb	r1, [r3, #-1]
   39aa4:	mov	r3, #0
   39aa8:	str	r3, [r4, #32]
   39aac:	ldr	r3, [r4, #64]	; 0x40
   39ab0:	cmp	r3, #0
   39ab4:	ldrbne	r1, [r3, r1]
   39ab8:	lsr	r2, r1, #5
   39abc:	ldr	r0, [r4, #68]	; 0x44
   39ac0:	and	r3, r1, #31
   39ac4:	ldr	r2, [r0, r2, lsl #2]
   39ac8:	lsr	r3, r2, r3
   39acc:	ands	r3, r3, #1
   39ad0:	bne	39adc <__assert_fail@plt+0x27518>
   39ad4:	cmp	r1, #10
   39ad8:	beq	39ae4 <__assert_fail@plt+0x27520>
   39adc:	str	r3, [r4, #60]	; 0x3c
   39ae0:	b	39528 <__assert_fail@plt+0x26f64>
   39ae4:	ldrb	r2, [r4, #77]	; 0x4d
   39ae8:	cmp	r2, #0
   39aec:	movne	r3, #2
   39af0:	b	39adc <__assert_fail@plt+0x27518>
   39af4:	mov	r0, r4
   39af8:	bl	34148 <__assert_fail@plt+0x21b84>
   39afc:	b	39b10 <__assert_fail@plt+0x2754c>
   39b00:	ldrb	r2, [r4, #75]	; 0x4b
   39b04:	cmp	r2, #0
   39b08:	streq	r3, [r4, #28]
   39b0c:	bne	39b34 <__assert_fail@plt+0x27570>
   39b10:	mov	r0, #0
   39b14:	str	r0, [r4, #40]	; 0x28
   39b18:	add	sp, sp, #28
   39b1c:	ldrd	r4, [sp]
   39b20:	ldrd	r6, [sp, #8]
   39b24:	ldrd	r8, [sp, #16]
   39b28:	ldrd	sl, [sp, #24]
   39b2c:	add	sp, sp, #32
   39b30:	pop	{pc}		; (ldr pc, [sp], #4)
   39b34:	ldrb	r3, [r4, #72]	; 0x48
   39b38:	cmp	r3, #0
   39b3c:	bne	39b58 <__assert_fail@plt+0x27594>
   39b40:	ldr	r3, [r4, #64]	; 0x40
   39b44:	cmp	r3, #0
   39b48:	beq	39b10 <__assert_fail@plt+0x2754c>
   39b4c:	mov	r0, r4
   39b50:	bl	32e04 <__assert_fail@plt+0x20840>
   39b54:	b	39b10 <__assert_fail@plt+0x2754c>
   39b58:	mov	r0, r4
   39b5c:	bl	34c64 <__assert_fail@plt+0x226a0>
   39b60:	b	39b10 <__assert_fail@plt+0x2754c>
   39b64:	sub	r0, r0, r6
   39b68:	str	r0, [r4, #28]
   39b6c:	b	39910 <__assert_fail@plt+0x2734c>
   39b70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39b74:	strd	r6, [sp, #8]
   39b78:	strd	r8, [sp, #16]
   39b7c:	strd	sl, [sp, #24]
   39b80:	str	lr, [sp, #32]
   39b84:	sub	sp, sp, #4
   39b88:	ldr	r9, [r0]
   39b8c:	add	ip, r9, r1, lsl #3
   39b90:	ldrb	fp, [ip, #4]
   39b94:	cmp	fp, #7
   39b98:	beq	39c04 <__assert_fail@plt+0x27640>
   39b9c:	mov	r5, r3
   39ba0:	mov	r6, r2
   39ba4:	mov	r8, r1
   39ba8:	mov	r7, r0
   39bac:	mov	r1, r3
   39bb0:	mov	r0, r2
   39bb4:	bl	32d78 <__assert_fail@plt+0x207b4>
   39bb8:	mov	sl, r0
   39bbc:	cmp	fp, #5
   39bc0:	beq	39d18 <__assert_fail@plt+0x27754>
   39bc4:	cmp	fp, #6
   39bc8:	movne	r4, #0
   39bcc:	moveq	r4, #1
   39bd0:	cmp	r0, #1
   39bd4:	movle	r4, #0
   39bd8:	cmp	r4, #0
   39bdc:	moveq	sl, #0
   39be0:	bne	39d60 <__assert_fail@plt+0x2779c>
   39be4:	mov	r0, sl
   39be8:	add	sp, sp, #4
   39bec:	ldrd	r4, [sp]
   39bf0:	ldrd	r6, [sp, #8]
   39bf4:	ldrd	r8, [sp, #16]
   39bf8:	ldrd	sl, [sp, #24]
   39bfc:	add	sp, sp, #32
   39c00:	pop	{pc}		; (ldr pc, [sp], #4)
   39c04:	ldr	r1, [r2, #4]
   39c08:	ldrb	r0, [r1, r3]
   39c0c:	cmp	r0, #193	; 0xc1
   39c10:	movls	sl, #0
   39c14:	bls	39be4 <__assert_fail@plt+0x27620>
   39c18:	add	ip, r3, #1
   39c1c:	ldr	r2, [r2, #48]	; 0x30
   39c20:	cmp	ip, r2
   39c24:	movge	sl, #0
   39c28:	bge	39be4 <__assert_fail@plt+0x27620>
   39c2c:	add	lr, r1, r3
   39c30:	ldrb	lr, [lr, #1]
   39c34:	cmp	r0, #223	; 0xdf
   39c38:	bls	39ca0 <__assert_fail@plt+0x276dc>
   39c3c:	cmp	r0, #239	; 0xef
   39c40:	bhi	39cb4 <__assert_fail@plt+0x276f0>
   39c44:	cmp	lr, #159	; 0x9f
   39c48:	cmpls	r0, #224	; 0xe0
   39c4c:	movne	sl, #3
   39c50:	beq	39e88 <__assert_fail@plt+0x278c4>
   39c54:	add	r0, sl, r3
   39c58:	cmp	r2, r0
   39c5c:	movlt	sl, #0
   39c60:	blt	39be4 <__assert_fail@plt+0x27620>
   39c64:	ldrb	r2, [r1, ip]
   39c68:	eor	r2, r2, #128	; 0x80
   39c6c:	cmp	r2, #63	; 0x3f
   39c70:	bhi	39e90 <__assert_fail@plt+0x278cc>
   39c74:	add	r0, r3, #2
   39c78:	add	r0, r1, r0
   39c7c:	add	r3, r1, r3
   39c80:	add	r3, r3, sl
   39c84:	ldrb	r2, [r0], #1
   39c88:	eor	r2, r2, #128	; 0x80
   39c8c:	cmp	r2, #63	; 0x3f
   39c90:	bhi	39e98 <__assert_fail@plt+0x278d4>
   39c94:	cmp	r3, r0
   39c98:	bne	39c84 <__assert_fail@plt+0x276c0>
   39c9c:	b	39be4 <__assert_fail@plt+0x27620>
   39ca0:	eor	lr, lr, #128	; 0x80
   39ca4:	cmp	lr, #63	; 0x3f
   39ca8:	movhi	sl, #0
   39cac:	movls	sl, #2
   39cb0:	b	39be4 <__assert_fail@plt+0x27620>
   39cb4:	cmp	r0, #247	; 0xf7
   39cb8:	bhi	39cd4 <__assert_fail@plt+0x27710>
   39cbc:	cmp	lr, #143	; 0x8f
   39cc0:	cmpls	r0, #240	; 0xf0
   39cc4:	movne	sl, #4
   39cc8:	bne	39c54 <__assert_fail@plt+0x27690>
   39ccc:	mov	sl, #0
   39cd0:	b	39be4 <__assert_fail@plt+0x27620>
   39cd4:	cmp	r0, #251	; 0xfb
   39cd8:	bhi	39cf4 <__assert_fail@plt+0x27730>
   39cdc:	cmp	lr, #135	; 0x87
   39ce0:	cmpls	r0, #248	; 0xf8
   39ce4:	movne	sl, #5
   39ce8:	bne	39c54 <__assert_fail@plt+0x27690>
   39cec:	mov	sl, #0
   39cf0:	b	39be4 <__assert_fail@plt+0x27620>
   39cf4:	cmp	r0, #253	; 0xfd
   39cf8:	movhi	sl, #0
   39cfc:	bhi	39be4 <__assert_fail@plt+0x27620>
   39d00:	cmp	lr, #131	; 0x83
   39d04:	cmpls	r0, #252	; 0xfc
   39d08:	moveq	sl, #0
   39d0c:	beq	39be4 <__assert_fail@plt+0x27620>
   39d10:	mov	sl, #6
   39d14:	b	39c54 <__assert_fail@plt+0x27690>
   39d18:	cmp	r0, #1
   39d1c:	movle	sl, #0
   39d20:	ble	39be4 <__assert_fail@plt+0x27620>
   39d24:	ldr	r3, [r7, #128]	; 0x80
   39d28:	tst	r3, #64	; 0x40
   39d2c:	bne	39d44 <__assert_fail@plt+0x27780>
   39d30:	ldr	r2, [r6, #4]
   39d34:	ldrb	r2, [r2, r5]
   39d38:	cmp	r2, #10
   39d3c:	moveq	sl, #0
   39d40:	beq	39be4 <__assert_fail@plt+0x27620>
   39d44:	tst	r3, #128	; 0x80
   39d48:	beq	39be4 <__assert_fail@plt+0x27620>
   39d4c:	ldr	r3, [r6, #4]
   39d50:	ldrb	r3, [r3, r5]
   39d54:	cmp	r3, #0
   39d58:	moveq	sl, #0
   39d5c:	b	39be4 <__assert_fail@plt+0x27620>
   39d60:	ldr	r7, [r9, r8, lsl #3]
   39d64:	ldr	r3, [r7, #32]
   39d68:	cmp	r3, #0
   39d6c:	bne	39dac <__assert_fail@plt+0x277e8>
   39d70:	ldr	r3, [r7, #36]	; 0x24
   39d74:	cmp	r3, #0
   39d78:	bne	39dac <__assert_fail@plt+0x277e8>
   39d7c:	ldr	r3, [r7, #20]
   39d80:	cmp	r3, #0
   39d84:	moveq	r4, #0
   39d88:	beq	39e40 <__assert_fail@plt+0x2787c>
   39d8c:	mov	r1, r5
   39d90:	mov	r0, r6
   39d94:	bl	32de8 <__assert_fail@plt+0x20824>
   39d98:	mov	r4, r0
   39d9c:	ldr	r0, [r7, #20]
   39da0:	cmp	r0, #0
   39da4:	bgt	39dc8 <__assert_fail@plt+0x27804>
   39da8:	b	39e40 <__assert_fail@plt+0x2787c>
   39dac:	mov	r1, r5
   39db0:	mov	r0, r6
   39db4:	bl	32de8 <__assert_fail@plt+0x20824>
   39db8:	mov	r4, r0
   39dbc:	ldr	r0, [r7, #20]
   39dc0:	cmp	r0, #0
   39dc4:	ble	39e08 <__assert_fail@plt+0x27844>
   39dc8:	ldr	r2, [r7]
   39dcc:	ldr	r3, [r2]
   39dd0:	cmp	r3, r4
   39dd4:	beq	39df4 <__assert_fail@plt+0x27830>
   39dd8:	mov	r3, #0
   39ddc:	add	r3, r3, #1
   39de0:	cmp	r0, r3
   39de4:	beq	39e08 <__assert_fail@plt+0x27844>
   39de8:	ldr	r1, [r2, #4]!
   39dec:	cmp	r1, r4
   39df0:	bne	39ddc <__assert_fail@plt+0x27818>
   39df4:	ldrb	r3, [r7, #16]
   39df8:	and	r3, r3, #1
   39dfc:	cmp	r3, #0
   39e00:	movne	sl, #0
   39e04:	b	39be4 <__assert_fail@plt+0x27620>
   39e08:	ldr	r3, [r7, #36]	; 0x24
   39e0c:	cmp	r3, #0
   39e10:	ble	39e40 <__assert_fail@plt+0x2787c>
   39e14:	mov	r5, #0
   39e18:	ldr	r3, [r7, #12]
   39e1c:	ldr	r1, [r3, r5, lsl #2]
   39e20:	mov	r0, r4
   39e24:	bl	11f10 <iswctype@plt>
   39e28:	cmp	r0, #0
   39e2c:	bne	39df4 <__assert_fail@plt+0x27830>
   39e30:	add	r5, r5, #1
   39e34:	ldr	r3, [r7, #36]	; 0x24
   39e38:	cmp	r3, r5
   39e3c:	bgt	39e18 <__assert_fail@plt+0x27854>
   39e40:	ldr	r0, [r7, #32]
   39e44:	cmp	r0, #0
   39e48:	ble	39ea8 <__assert_fail@plt+0x278e4>
   39e4c:	ldr	r2, [r7, #4]
   39e50:	sub	r2, r2, #4
   39e54:	mov	r3, #0
   39e58:	b	39e68 <__assert_fail@plt+0x278a4>
   39e5c:	add	r3, r3, #1
   39e60:	cmp	r0, r3
   39e64:	beq	39ea8 <__assert_fail@plt+0x278e4>
   39e68:	ldr	r1, [r2, #4]!
   39e6c:	cmp	r4, r1
   39e70:	bcc	39e5c <__assert_fail@plt+0x27898>
   39e74:	ldr	r1, [r7, #8]
   39e78:	ldr	r1, [r1, r3, lsl #2]
   39e7c:	cmp	r4, r1
   39e80:	bhi	39e5c <__assert_fail@plt+0x27898>
   39e84:	b	39df4 <__assert_fail@plt+0x27830>
   39e88:	mov	sl, #0
   39e8c:	b	39be4 <__assert_fail@plt+0x27620>
   39e90:	mov	sl, #0
   39e94:	b	39be4 <__assert_fail@plt+0x27620>
   39e98:	mov	sl, #0
   39e9c:	b	39be4 <__assert_fail@plt+0x27620>
   39ea0:	mov	sl, #0
   39ea4:	b	39be4 <__assert_fail@plt+0x27620>
   39ea8:	ldrb	r3, [r7, #16]
   39eac:	tst	r3, #1
   39eb0:	beq	39ea0 <__assert_fail@plt+0x278dc>
   39eb4:	cmp	sl, #1
   39eb8:	movlt	sl, #1
   39ebc:	b	39be4 <__assert_fail@plt+0x27620>
   39ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39ec4:	strd	r6, [sp, #8]
   39ec8:	strd	r8, [sp, #16]
   39ecc:	strd	sl, [sp, #24]
   39ed0:	str	lr, [sp, #32]
   39ed4:	sub	sp, sp, #164	; 0xa4
   39ed8:	mov	r9, r0
   39edc:	mov	r4, r1
   39ee0:	mov	r8, r2
   39ee4:	str	r3, [sp, #24]
   39ee8:	ldr	fp, [sp, #204]	; 0xcc
   39eec:	ldr	r3, [r1]
   39ef0:	str	r3, [sp, #20]
   39ef4:	ldrb	r2, [r2, #4]
   39ef8:	sub	r3, r2, #1
   39efc:	cmp	r3, #35	; 0x23
   39f00:	ldrls	pc, [pc, r3, lsl #2]
   39f04:	b	3adc0 <__assert_fail@plt+0x287fc>
   39f08:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   39f0c:	andeq	fp, r3, r4, lsr #4
   39f10:	andeq	sl, r3, r0, asr #27
   39f14:	andeq	sl, r3, r4, asr r9
   39f18:	andeq	sl, r3, ip, asr #25
   39f1c:	andeq	sl, r3, r0, asr #27
   39f20:	andeq	sl, r3, r0, asr #27
   39f24:	andeq	sl, r3, r0, rrx
   39f28:	andeq	sl, r3, r8, lsl #20
   39f2c:	andeq	fp, r3, r4, lsr #4
   39f30:	andeq	sl, r3, r4, ror #19
   39f34:	andeq	sl, r3, r0, asr #21
   39f38:	andeq	sl, r3, r0, asr #27
   39f3c:	andeq	sl, r3, r0, asr #27
   39f40:	andeq	sl, r3, r0, asr #27
   39f44:	andeq	sl, r3, r0, asr #27
   39f48:	andeq	sl, r3, r0, asr #27
   39f4c:	andeq	sl, r3, r4, ror #19
   39f50:	andeq	sl, r3, r4, ror #19
   39f54:	andeq	sl, r3, r0, asr #2
   39f58:	andeq	sl, r3, r0, asr #27
   39f5c:	andeq	sl, r3, r0, asr #27
   39f60:	andeq	sl, r3, ip, asr #19
   39f64:	andeq	sl, r3, r0, lsl sl
   39f68:	andeq	sl, r3, r0, asr #27
   39f6c:	andeq	sl, r3, r0, asr #27
   39f70:	andeq	sl, r3, r0, asr #27
   39f74:	andeq	sl, r3, r0, asr #27
   39f78:	andeq	sl, r3, r0, asr #27
   39f7c:	andeq	sl, r3, r0, asr #27
   39f80:	andeq	sl, r3, r0, asr #27
   39f84:	andeq	sl, r3, r0, lsl sp
   39f88:	andeq	sl, r3, r0, lsl sp
   39f8c:	andeq	sl, r3, r8, ror #26
   39f90:	andeq	sl, r3, r8, ror #26
   39f94:	andeq	sl, r3, r0, asr #27
   39f98:	mov	r3, r8
   39f9c:	mov	r2, #0
   39fa0:	mov	r1, r2
   39fa4:	ldr	r0, [sp, #20]
   39fa8:	bl	33bbc <__assert_fail@plt+0x215f8>
   39fac:	subs	sl, r0, #0
   39fb0:	moveq	r3, #12
   39fb4:	streq	r3, [fp]
   39fb8:	beq	3b048 <__assert_fail@plt+0x28a84>
   39fbc:	ldr	r3, [sp, #20]
   39fc0:	ldr	r3, [r3, #92]	; 0x5c
   39fc4:	cmp	r3, #1
   39fc8:	movgt	r6, #0
   39fcc:	movgt	r5, #16
   39fd0:	ble	3aa3c <__assert_fail@plt+0x28478>
   39fd4:	ldr	r3, [r9, #40]	; 0x28
   39fd8:	ldr	r2, [r9, #56]	; 0x38
   39fdc:	cmp	r2, r3
   39fe0:	ble	3aa3c <__assert_fail@plt+0x28478>
   39fe4:	ldr	r2, [r9, #28]
   39fe8:	cmp	r3, r2
   39fec:	beq	3aa3c <__assert_fail@plt+0x28478>
   39ff0:	ldr	r2, [r9, #8]
   39ff4:	ldr	r3, [r2, r3, lsl #2]
   39ff8:	cmn	r3, #1
   39ffc:	bne	3aa3c <__assert_fail@plt+0x28478>
   3a000:	ldr	r2, [sp, #24]
   3a004:	mov	r1, r9
   3a008:	mov	r0, r8
   3a00c:	bl	357c0 <__assert_fail@plt+0x231fc>
   3a010:	mov	r3, r8
   3a014:	mov	r2, r6
   3a018:	mov	r1, r6
   3a01c:	ldr	r7, [sp, #20]
   3a020:	mov	r0, r7
   3a024:	bl	33bbc <__assert_fail@plt+0x215f8>
   3a028:	mov	r4, r0
   3a02c:	mov	r3, r5
   3a030:	mov	r2, r0
   3a034:	mov	r1, sl
   3a038:	mov	r0, r7
   3a03c:	bl	33d58 <__assert_fail@plt+0x21794>
   3a040:	mov	sl, r0
   3a044:	cmp	r0, #0
   3a048:	cmpne	r4, #0
   3a04c:	bne	39fd4 <__assert_fail@plt+0x27a10>
   3a050:	mov	r3, #12
   3a054:	str	r3, [fp]
   3a058:	mov	sl, #0
   3a05c:	b	3b048 <__assert_fail@plt+0x28a84>
   3a060:	ldr	r5, [r1, #24]
   3a064:	add	r3, r5, #1
   3a068:	str	r3, [r1, #24]
   3a06c:	ldr	r6, [sp, #24]
   3a070:	orr	r2, r6, #8388608	; 0x800000
   3a074:	mov	r1, r0
   3a078:	mov	r0, r8
   3a07c:	bl	357c0 <__assert_fail@plt+0x231fc>
   3a080:	ldrb	r3, [r8, #4]
   3a084:	cmp	r3, #9
   3a088:	moveq	r0, #0
   3a08c:	bne	3a0d8 <__assert_fail@plt+0x27b14>
   3a090:	cmp	r5, #8
   3a094:	bhi	3a0ac <__assert_fail@plt+0x27ae8>
   3a098:	ldr	r1, [sp, #20]
   3a09c:	ldr	r3, [r1, #84]	; 0x54
   3a0a0:	mov	r2, #1
   3a0a4:	orr	r3, r3, r2, lsl r5
   3a0a8:	str	r3, [r1, #84]	; 0x54
   3a0ac:	mov	r3, #17
   3a0b0:	mov	r2, #0
   3a0b4:	mov	r1, r0
   3a0b8:	ldr	r0, [sp, #20]
   3a0bc:	bl	33d58 <__assert_fail@plt+0x21794>
   3a0c0:	subs	sl, r0, #0
   3a0c4:	moveq	r3, #12
   3a0c8:	streq	r3, [fp]
   3a0cc:	beq	3a108 <__assert_fail@plt+0x27b44>
   3a0d0:	str	r5, [sl, #20]
   3a0d4:	b	3aa3c <__assert_fail@plt+0x28478>
   3a0d8:	str	fp, [sp, #4]
   3a0dc:	ldr	r3, [sp, #200]	; 0xc8
   3a0e0:	add	r3, r3, #1
   3a0e4:	str	r3, [sp]
   3a0e8:	mov	r3, r6
   3a0ec:	mov	r2, r8
   3a0f0:	mov	r1, r4
   3a0f4:	mov	r0, r9
   3a0f8:	bl	3b4a8 <__assert_fail@plt+0x28ee4>
   3a0fc:	ldr	r3, [fp]
   3a100:	cmp	r3, #0
   3a104:	beq	3a110 <__assert_fail@plt+0x27b4c>
   3a108:	mov	sl, #0
   3a10c:	b	3b048 <__assert_fail@plt+0x28a84>
   3a110:	ldrb	r3, [r8, #4]
   3a114:	cmp	r3, #9
   3a118:	beq	3a090 <__assert_fail@plt+0x27acc>
   3a11c:	cmp	r0, #0
   3a120:	beq	3a134 <__assert_fail@plt+0x27b70>
   3a124:	mov	r2, #0
   3a128:	movw	r1, #22852	; 0x5944
   3a12c:	movt	r1, #3
   3a130:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3a134:	mov	r3, #8
   3a138:	str	r3, [fp]
   3a13c:	b	3a108 <__assert_fail@plt+0x27b44>
   3a140:	mov	r3, #0
   3a144:	str	r3, [sp, #68]	; 0x44
   3a148:	mov	r1, #1
   3a14c:	mov	r0, #32
   3a150:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3a154:	mov	r4, r0
   3a158:	str	r0, [sp, #32]
   3a15c:	mov	r1, #1
   3a160:	mov	r0, #40	; 0x28
   3a164:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3a168:	str	r0, [sp, #36]	; 0x24
   3a16c:	clz	r0, r0
   3a170:	lsr	r0, r0, #5
   3a174:	cmp	r4, #0
   3a178:	movne	r7, r0
   3a17c:	moveq	r7, #1
   3a180:	cmp	r7, #0
   3a184:	bne	3a1fc <__assert_fail@plt+0x27c38>
   3a188:	ldr	r2, [sp, #24]
   3a18c:	mov	r1, r9
   3a190:	mov	r0, r8
   3a194:	bl	331c8 <__assert_fail@plt+0x20c04>
   3a198:	str	r0, [sp, #28]
   3a19c:	ldrb	r3, [r8, #4]
   3a1a0:	cmp	r3, #2
   3a1a4:	streq	r3, [fp]
   3a1a8:	beq	3a28c <__assert_fail@plt+0x27cc8>
   3a1ac:	cmp	r3, #25
   3a1b0:	strne	r7, [sp, #52]	; 0x34
   3a1b4:	beq	3a218 <__assert_fail@plt+0x27c54>
   3a1b8:	ldrb	r3, [r8, #4]
   3a1bc:	cmp	r3, #21
   3a1c0:	moveq	r3, #1
   3a1c4:	strbeq	r3, [r8, #4]
   3a1c8:	mov	r3, #0
   3a1cc:	str	r3, [sp, #48]	; 0x30
   3a1d0:	mov	r2, #1
   3a1d4:	str	r3, [sp, #44]	; 0x2c
   3a1d8:	add	sl, sp, #96	; 0x60
   3a1dc:	ldr	r3, [sp, #24]
   3a1e0:	ubfx	r3, r3, #16, #1
   3a1e4:	str	r3, [sp, #60]	; 0x3c
   3a1e8:	ldr	r4, [sp, #32]
   3a1ec:	str	r7, [sp, #40]	; 0x28
   3a1f0:	str	fp, [sp, #204]	; 0xcc
   3a1f4:	ldr	fp, [sp, #36]	; 0x24
   3a1f8:	b	3a61c <__assert_fail@plt+0x28058>
   3a1fc:	ldr	r0, [sp, #32]
   3a200:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3a204:	ldr	r0, [sp, #36]	; 0x24
   3a208:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3a20c:	mov	r3, #12
   3a210:	str	r3, [fp]
   3a214:	b	3a29c <__assert_fail@plt+0x27cd8>
   3a218:	ldr	r2, [sp, #36]	; 0x24
   3a21c:	ldrb	r3, [r2, #16]
   3a220:	orr	r3, r3, #1
   3a224:	strb	r3, [r2, #16]
   3a228:	ldr	r3, [sp, #24]
   3a22c:	tst	r3, #256	; 0x100
   3a230:	beq	3a244 <__assert_fail@plt+0x27c80>
   3a234:	ldr	r2, [sp, #32]
   3a238:	ldr	r3, [r2]
   3a23c:	orr	r3, r3, #1024	; 0x400
   3a240:	str	r3, [r2]
   3a244:	ldr	r3, [r9, #40]	; 0x28
   3a248:	ldr	r2, [sp, #28]
   3a24c:	add	r3, r3, r2
   3a250:	str	r3, [r9, #40]	; 0x28
   3a254:	ldr	r2, [sp, #24]
   3a258:	mov	r1, r9
   3a25c:	mov	r0, r8
   3a260:	bl	331c8 <__assert_fail@plt+0x20c04>
   3a264:	str	r0, [sp, #28]
   3a268:	ldrb	r3, [r8, #4]
   3a26c:	cmp	r3, #2
   3a270:	streq	r3, [fp]
   3a274:	beq	3a28c <__assert_fail@plt+0x27cc8>
   3a278:	mov	r3, #1
   3a27c:	str	r3, [sp, #52]	; 0x34
   3a280:	b	3a1b8 <__assert_fail@plt+0x27bf4>
   3a284:	ldr	fp, [sp, #204]	; 0xcc
   3a288:	str	r0, [fp]
   3a28c:	ldr	r0, [sp, #32]
   3a290:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3a294:	ldr	r0, [sp, #36]	; 0x24
   3a298:	bl	358b8 <__assert_fail@plt+0x232f4>
   3a29c:	ldr	r3, [fp]
   3a2a0:	cmp	r3, #0
   3a2a4:	bne	3b22c <__assert_fail@plt+0x28c68>
   3a2a8:	mov	sl, #0
   3a2ac:	b	3aa3c <__assert_fail@plt+0x28478>
   3a2b0:	ldr	fp, [sp, #204]	; 0xcc
   3a2b4:	mov	r3, #7
   3a2b8:	str	r3, [fp]
   3a2bc:	b	3a28c <__assert_fail@plt+0x27cc8>
   3a2c0:	ldr	r3, [r9, #40]	; 0x28
   3a2c4:	ldr	r2, [sp, #28]
   3a2c8:	add	r3, r3, r2
   3a2cc:	str	r3, [r9, #40]	; 0x28
   3a2d0:	ldr	r2, [sp, #24]
   3a2d4:	mov	r1, r9
   3a2d8:	add	r0, sp, #88	; 0x58
   3a2dc:	bl	331c8 <__assert_fail@plt+0x20c04>
   3a2e0:	mov	r3, r0
   3a2e4:	ldrb	r2, [sp, #92]	; 0x5c
   3a2e8:	cmp	r2, #2
   3a2ec:	beq	3a314 <__assert_fail@plt+0x27d50>
   3a2f0:	cmp	r2, #21
   3a2f4:	bne	3a324 <__assert_fail@plt+0x27d60>
   3a2f8:	ldr	r3, [r9, #40]	; 0x28
   3a2fc:	ldr	r2, [sp, #28]
   3a300:	sub	r3, r3, r2
   3a304:	str	r3, [r9, #40]	; 0x28
   3a308:	mov	r3, #1
   3a30c:	strb	r3, [r8, #4]
   3a310:	b	3a690 <__assert_fail@plt+0x280cc>
   3a314:	ldr	fp, [sp, #204]	; 0xcc
   3a318:	mov	r3, #7
   3a31c:	str	r3, [fp]
   3a320:	b	3a28c <__assert_fail@plt+0x27cc8>
   3a324:	add	r2, sp, #128	; 0x80
   3a328:	str	r2, [sp, #84]	; 0x54
   3a32c:	mov	r2, #3
   3a330:	str	r2, [sp, #80]	; 0x50
   3a334:	mov	r2, #1
   3a338:	str	r2, [sp, #8]
   3a33c:	ldr	r2, [sp, #24]
   3a340:	str	r2, [sp, #4]
   3a344:	ldr	r2, [sp, #20]
   3a348:	str	r2, [sp]
   3a34c:	add	r2, sp, #88	; 0x58
   3a350:	mov	r1, r9
   3a354:	add	r0, sp, #80	; 0x50
   3a358:	bl	3335c <__assert_fail@plt+0x20d98>
   3a35c:	cmp	r0, #0
   3a360:	bne	3a46c <__assert_fail@plt+0x27ea8>
   3a364:	ldr	r2, [sp, #24]
   3a368:	mov	r1, r9
   3a36c:	mov	r0, r8
   3a370:	bl	331c8 <__assert_fail@plt+0x20c04>
   3a374:	str	r0, [sp, #28]
   3a378:	ldr	r6, [sp, #72]	; 0x48
   3a37c:	sub	r3, r6, #2
   3a380:	bics	r3, r3, #2
   3a384:	beq	3b2ac <__assert_fail@plt+0x28ce8>
   3a388:	ldr	r7, [sp, #80]	; 0x50
   3a38c:	sub	r3, r7, #2
   3a390:	bics	r3, r3, #2
   3a394:	beq	3b2b8 <__assert_fail@plt+0x28cf4>
   3a398:	cmp	r6, #3
   3a39c:	moveq	r3, #1
   3a3a0:	movne	r3, #0
   3a3a4:	str	r3, [sp, #56]	; 0x38
   3a3a8:	beq	3a478 <__assert_fail@plt+0x27eb4>
   3a3ac:	cmp	r7, #3
   3a3b0:	beq	3a4a8 <__assert_fail@plt+0x27ee4>
   3a3b4:	cmp	r6, #0
   3a3b8:	movne	r5, #0
   3a3bc:	bne	3a3c4 <__assert_fail@plt+0x27e00>
   3a3c0:	ldrb	r5, [sp, #76]	; 0x4c
   3a3c4:	cmp	r7, #0
   3a3c8:	bne	3a4d0 <__assert_fail@plt+0x27f0c>
   3a3cc:	ldrb	r7, [sp, #84]	; 0x54
   3a3d0:	ldr	r3, [sp, #56]	; 0x38
   3a3d4:	cmp	r6, #0
   3a3d8:	moveq	r3, #1
   3a3dc:	cmp	r3, #0
   3a3e0:	bne	3a4e4 <__assert_fail@plt+0x27f20>
   3a3e4:	ldr	r5, [sp, #76]	; 0x4c
   3a3e8:	ldr	r3, [sp, #80]	; 0x50
   3a3ec:	cmp	r3, #3
   3a3f0:	cmpne	r3, #0
   3a3f4:	beq	3a504 <__assert_fail@plt+0x27f40>
   3a3f8:	ldr	r7, [sp, #84]	; 0x54
   3a3fc:	cmn	r5, #1
   3a400:	cmnne	r7, #1
   3a404:	beq	3b2d4 <__assert_fail@plt+0x28d10>
   3a408:	ldr	r3, [sp, #60]	; 0x3c
   3a40c:	cmp	r7, r5
   3a410:	movcs	r3, #0
   3a414:	andcc	r3, r3, #1
   3a418:	cmp	r3, #0
   3a41c:	bne	3b2e0 <__assert_fail@plt+0x28d1c>
   3a420:	ldr	r3, [sp, #20]
   3a424:	ldr	r3, [r3, #92]	; 0x5c
   3a428:	cmp	r3, #1
   3a42c:	ble	3a460 <__assert_fail@plt+0x27e9c>
   3a430:	ldr	r3, [fp, #32]
   3a434:	ldr	r2, [sp, #48]	; 0x30
   3a438:	cmp	r3, r2
   3a43c:	beq	3a524 <__assert_fail@plt+0x27f60>
   3a440:	ldr	r2, [fp, #32]
   3a444:	ldr	r3, [fp, #4]
   3a448:	str	r5, [r3, r2, lsl #2]
   3a44c:	ldr	r2, [fp, #8]
   3a450:	ldr	r3, [fp, #32]
   3a454:	add	r1, r3, #1
   3a458:	str	r1, [fp, #32]
   3a45c:	str	r7, [r2, r3, lsl #2]
   3a460:	mov	r3, #0
   3a464:	mov	ip, #1
   3a468:	b	3a59c <__assert_fail@plt+0x27fd8>
   3a46c:	ldr	fp, [sp, #204]	; 0xcc
   3a470:	str	r0, [fp]
   3a474:	b	3a28c <__assert_fail@plt+0x27cc8>
   3a478:	ldr	r0, [sp, #76]	; 0x4c
   3a47c:	bl	122d0 <strlen@plt>
   3a480:	cmp	r0, #1
   3a484:	bhi	3a49c <__assert_fail@plt+0x27ed8>
   3a488:	cmp	r7, #3
   3a48c:	beq	3b308 <__assert_fail@plt+0x28d44>
   3a490:	ldr	r3, [sp, #76]	; 0x4c
   3a494:	ldrb	r5, [r3]
   3a498:	b	3a3c4 <__assert_fail@plt+0x27e00>
   3a49c:	ldr	fp, [sp, #204]	; 0xcc
   3a4a0:	mov	r3, #3
   3a4a4:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3a4a8:	ldr	r0, [sp, #84]	; 0x54
   3a4ac:	bl	122d0 <strlen@plt>
   3a4b0:	cmp	r0, #1
   3a4b4:	bhi	3b2c8 <__assert_fail@plt+0x28d04>
   3a4b8:	cmp	r6, #0
   3a4bc:	beq	3a3c0 <__assert_fail@plt+0x27dfc>
   3a4c0:	cmp	r6, #3
   3a4c4:	beq	3a490 <__assert_fail@plt+0x27ecc>
   3a4c8:	mov	r5, #0
   3a4cc:	b	3a3c4 <__assert_fail@plt+0x27e00>
   3a4d0:	cmp	r7, #3
   3a4d4:	ldreq	r3, [sp, #84]	; 0x54
   3a4d8:	ldrbeq	r7, [r3]
   3a4dc:	movne	r7, #0
   3a4e0:	b	3a3d0 <__assert_fail@plt+0x27e0c>
   3a4e4:	ldr	r3, [sp, #20]
   3a4e8:	ldr	r3, [r3, #92]	; 0x5c
   3a4ec:	cmp	r3, #1
   3a4f0:	ble	3b2f4 <__assert_fail@plt+0x28d30>
   3a4f4:	mov	r0, r5
   3a4f8:	bl	12378 <btowc@plt>
   3a4fc:	mov	r5, r0
   3a500:	b	3a3e8 <__assert_fail@plt+0x27e24>
   3a504:	ldr	r3, [sp, #20]
   3a508:	ldr	r3, [r3, #92]	; 0x5c
   3a50c:	cmp	r3, #1
   3a510:	ble	3a3fc <__assert_fail@plt+0x27e38>
   3a514:	mov	r0, r7
   3a518:	bl	12378 <btowc@plt>
   3a51c:	mov	r7, r0
   3a520:	b	3a3fc <__assert_fail@plt+0x27e38>
   3a524:	lsl	r3, r2, #1
   3a528:	add	r3, r3, #1
   3a52c:	str	r3, [sp, #48]	; 0x30
   3a530:	lsl	r6, r3, #2
   3a534:	mov	r1, r6
   3a538:	ldr	r0, [fp, #4]
   3a53c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3a540:	str	r0, [sp, #56]	; 0x38
   3a544:	mov	r1, r6
   3a548:	ldr	r0, [fp, #8]
   3a54c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3a550:	mov	r6, r0
   3a554:	ldr	r3, [sp, #56]	; 0x38
   3a558:	cmp	r0, #0
   3a55c:	cmpne	r3, #0
   3a560:	beq	3a574 <__assert_fail@plt+0x27fb0>
   3a564:	ldr	r3, [sp, #56]	; 0x38
   3a568:	str	r3, [fp, #4]
   3a56c:	str	r0, [fp, #8]
   3a570:	b	3a440 <__assert_fail@plt+0x27e7c>
   3a574:	ldr	fp, [sp, #204]	; 0xcc
   3a578:	mov	r0, r3
   3a57c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3a580:	mov	r0, r6
   3a584:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3a588:	mov	r3, #12
   3a58c:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3a590:	add	r3, r3, #1
   3a594:	cmp	r3, #256	; 0x100
   3a598:	beq	3b29c <__assert_fail@plt+0x28cd8>
   3a59c:	cmp	r3, r5
   3a5a0:	movcc	r2, #0
   3a5a4:	movcs	r2, #1
   3a5a8:	cmp	r3, r7
   3a5ac:	movhi	r2, #0
   3a5b0:	cmp	r2, #0
   3a5b4:	beq	3a590 <__assert_fail@plt+0x27fcc>
   3a5b8:	add	r2, r3, #31
   3a5bc:	cmp	r3, #0
   3a5c0:	movge	r2, r3
   3a5c4:	asr	r2, r2, #5
   3a5c8:	rsbs	r1, r3, #0
   3a5cc:	and	r0, r3, #31
   3a5d0:	and	r1, r1, #31
   3a5d4:	rsbpl	r0, r1, #0
   3a5d8:	ldr	r1, [r4, r2, lsl #2]
   3a5dc:	orr	r1, r1, ip, lsl r0
   3a5e0:	str	r1, [r4, r2, lsl #2]
   3a5e4:	b	3a590 <__assert_fail@plt+0x27fcc>
   3a5e8:	ldrb	r3, [sp, #76]	; 0x4c
   3a5ec:	asr	r1, r3, #5
   3a5f0:	and	r3, r3, #31
   3a5f4:	ldr	r2, [r4, r1, lsl #2]
   3a5f8:	mov	r0, #1
   3a5fc:	orr	r3, r2, r0, lsl r3
   3a600:	str	r3, [r4, r1, lsl #2]
   3a604:	ldrb	r3, [r8, #4]
   3a608:	cmp	r3, #2
   3a60c:	beq	3a7bc <__assert_fail@plt+0x281f8>
   3a610:	cmp	r3, #21
   3a614:	beq	3a7cc <__assert_fail@plt+0x28208>
   3a618:	ldr	r2, [sp, #40]	; 0x28
   3a61c:	str	sl, [sp, #76]	; 0x4c
   3a620:	mov	r3, #3
   3a624:	str	r3, [sp, #72]	; 0x48
   3a628:	str	r2, [sp, #8]
   3a62c:	ldr	r3, [sp, #24]
   3a630:	str	r3, [sp, #4]
   3a634:	ldr	r3, [sp, #20]
   3a638:	str	r3, [sp]
   3a63c:	ldr	r3, [sp, #28]
   3a640:	mov	r2, r8
   3a644:	mov	r1, r9
   3a648:	add	r0, sp, #72	; 0x48
   3a64c:	bl	3335c <__assert_fail@plt+0x20d98>
   3a650:	cmp	r0, #0
   3a654:	bne	3a284 <__assert_fail@plt+0x27cc0>
   3a658:	ldr	r2, [sp, #24]
   3a65c:	mov	r1, r9
   3a660:	mov	r0, r8
   3a664:	bl	331c8 <__assert_fail@plt+0x20c04>
   3a668:	str	r0, [sp, #28]
   3a66c:	ldr	r3, [sp, #72]	; 0x48
   3a670:	sub	r3, r3, #2
   3a674:	bics	r3, r3, #2
   3a678:	beq	3a690 <__assert_fail@plt+0x280cc>
   3a67c:	ldrb	r3, [r8, #4]
   3a680:	cmp	r3, #2
   3a684:	beq	3a2b0 <__assert_fail@plt+0x27cec>
   3a688:	cmp	r3, #22
   3a68c:	beq	3a2c0 <__assert_fail@plt+0x27cfc>
   3a690:	ldr	r3, [sp, #72]	; 0x48
   3a694:	cmp	r3, #4
   3a698:	ldrls	pc, [pc, r3, lsl #2]
   3a69c:	b	3a780 <__assert_fail@plt+0x281bc>
   3a6a0:	andeq	sl, r3, r8, ror #11
   3a6a4:			; <UNDEFINED> instruction: 0x0003a6b4
   3a6a8:	andeq	sl, r3, r8, lsl #14
   3a6ac:	andeq	sl, r3, r4, asr #14
   3a6b0:	andeq	sl, r3, r0, lsl #15
   3a6b4:	ldr	r3, [fp, #20]
   3a6b8:	ldr	r2, [sp, #44]	; 0x2c
   3a6bc:	cmp	r3, r2
   3a6c0:	beq	3a6e0 <__assert_fail@plt+0x2811c>
   3a6c4:	ldr	r2, [fp]
   3a6c8:	ldr	r3, [fp, #20]
   3a6cc:	add	r1, r3, #1
   3a6d0:	str	r1, [fp, #20]
   3a6d4:	ldr	r1, [sp, #76]	; 0x4c
   3a6d8:	str	r1, [r2, r3, lsl #2]
   3a6dc:	b	3a604 <__assert_fail@plt+0x28040>
   3a6e0:	lsl	r3, r2, #1
   3a6e4:	add	r3, r3, #1
   3a6e8:	str	r3, [sp, #44]	; 0x2c
   3a6ec:	lsl	r1, r3, #2
   3a6f0:	ldr	r0, [fp]
   3a6f4:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3a6f8:	cmp	r0, #0
   3a6fc:	beq	3a944 <__assert_fail@plt+0x28380>
   3a700:	str	r0, [fp]
   3a704:	b	3a6c4 <__assert_fail@plt+0x28100>
   3a708:	ldr	r5, [sp, #76]	; 0x4c
   3a70c:	mov	r0, r5
   3a710:	bl	122d0 <strlen@plt>
   3a714:	cmp	r0, #1
   3a718:	bne	3b27c <__assert_fail@plt+0x28cb8>
   3a71c:	ldrb	r3, [r5]
   3a720:	asr	r1, r3, #5
   3a724:	and	r3, r3, #31
   3a728:	ldr	r2, [r4, r1, lsl #2]
   3a72c:	orr	r3, r2, r0, lsl r3
   3a730:	str	r3, [r4, r1, lsl #2]
   3a734:	mov	r3, #0
   3a738:	ldr	r2, [sp, #204]	; 0xcc
   3a73c:	str	r3, [r2]
   3a740:	b	3a604 <__assert_fail@plt+0x28040>
   3a744:	ldr	r5, [sp, #76]	; 0x4c
   3a748:	mov	r0, r5
   3a74c:	bl	122d0 <strlen@plt>
   3a750:	cmp	r0, #1
   3a754:	bne	3b28c <__assert_fail@plt+0x28cc8>
   3a758:	ldrb	r3, [r5]
   3a75c:	asr	r1, r3, #5
   3a760:	and	r3, r3, #31
   3a764:	ldr	r2, [r4, r1, lsl #2]
   3a768:	orr	r3, r2, r0, lsl r3
   3a76c:	str	r3, [r4, r1, lsl #2]
   3a770:	mov	r3, #0
   3a774:	ldr	r2, [sp, #204]	; 0xcc
   3a778:	str	r3, [r2]
   3a77c:	b	3a604 <__assert_fail@plt+0x28040>
   3a780:	ldr	r3, [sp, #24]
   3a784:	str	r3, [sp, #4]
   3a788:	ldr	r3, [sp, #76]	; 0x4c
   3a78c:	str	r3, [sp]
   3a790:	add	r3, sp, #68	; 0x44
   3a794:	mov	r2, fp
   3a798:	mov	r1, r4
   3a79c:	ldr	r0, [r9, #64]	; 0x40
   3a7a0:	bl	38340 <__assert_fail@plt+0x25d7c>
   3a7a4:	ldr	r3, [sp, #204]	; 0xcc
   3a7a8:	str	r0, [r3]
   3a7ac:	cmp	r0, #0
   3a7b0:	beq	3a604 <__assert_fail@plt+0x28040>
   3a7b4:	ldr	fp, [sp, #204]	; 0xcc
   3a7b8:	b	3a28c <__assert_fail@plt+0x27cc8>
   3a7bc:	ldr	fp, [sp, #204]	; 0xcc
   3a7c0:	mov	r3, #7
   3a7c4:	str	r3, [fp]
   3a7c8:	b	3a28c <__assert_fail@plt+0x27cc8>
   3a7cc:	ldr	fp, [sp, #204]	; 0xcc
   3a7d0:	ldr	r3, [r9, #40]	; 0x28
   3a7d4:	ldr	r2, [sp, #28]
   3a7d8:	add	r3, r3, r2
   3a7dc:	str	r3, [r9, #40]	; 0x28
   3a7e0:	ldr	r3, [sp, #52]	; 0x34
   3a7e4:	cmp	r3, #0
   3a7e8:	beq	3a80c <__assert_fail@plt+0x28248>
   3a7ec:	ldr	r2, [sp, #32]
   3a7f0:	sub	r3, r2, #4
   3a7f4:	add	r1, r2, #28
   3a7f8:	ldr	r2, [r3, #4]!
   3a7fc:	mvn	r2, r2
   3a800:	str	r2, [r3]
   3a804:	cmp	r3, r1
   3a808:	bne	3a7f8 <__assert_fail@plt+0x28234>
   3a80c:	ldr	r3, [sp, #20]
   3a810:	ldr	r0, [r3, #92]	; 0x5c
   3a814:	cmp	r0, #1
   3a818:	ble	3a848 <__assert_fail@plt+0x28284>
   3a81c:	ldr	r1, [sp, #32]
   3a820:	sub	r2, r1, #4
   3a824:	ldr	r3, [r3, #60]	; 0x3c
   3a828:	sub	r3, r3, #4
   3a82c:	add	ip, r1, #28
   3a830:	ldr	r1, [r2, #4]!
   3a834:	ldr	lr, [r3, #4]!
   3a838:	and	r1, r1, lr
   3a83c:	str	r1, [r2]
   3a840:	cmp	ip, r2
   3a844:	bne	3a830 <__assert_fail@plt+0x2826c>
   3a848:	ldr	r2, [sp, #36]	; 0x24
   3a84c:	ldr	r3, [r2, #20]
   3a850:	cmp	r3, #0
   3a854:	bne	3a89c <__assert_fail@plt+0x282d8>
   3a858:	ldr	r3, [r2, #24]
   3a85c:	cmp	r3, #0
   3a860:	bne	3a89c <__assert_fail@plt+0x282d8>
   3a864:	ldr	r3, [r2, #28]
   3a868:	cmp	r3, #0
   3a86c:	bne	3a89c <__assert_fail@plt+0x282d8>
   3a870:	ldr	r3, [r2, #32]
   3a874:	cmp	r3, #0
   3a878:	bne	3a89c <__assert_fail@plt+0x282d8>
   3a87c:	cmp	r0, #1
   3a880:	ble	3a90c <__assert_fail@plt+0x28348>
   3a884:	ldr	r3, [r2, #36]	; 0x24
   3a888:	cmp	r3, #0
   3a88c:	bne	3a89c <__assert_fail@plt+0x282d8>
   3a890:	ldrb	r3, [r2, #16]
   3a894:	tst	r3, #1
   3a898:	beq	3a90c <__assert_fail@plt+0x28348>
   3a89c:	ldr	r0, [sp, #20]
   3a8a0:	ldrb	r3, [r0, #88]	; 0x58
   3a8a4:	orr	r3, r3, #2
   3a8a8:	strb	r3, [r0, #88]	; 0x58
   3a8ac:	mov	r3, #6
   3a8b0:	strb	r3, [sp, #132]	; 0x84
   3a8b4:	ldr	r3, [sp, #36]	; 0x24
   3a8b8:	str	r3, [sp, #128]	; 0x80
   3a8bc:	add	r3, sp, #128	; 0x80
   3a8c0:	mov	r2, #0
   3a8c4:	mov	r1, r2
   3a8c8:	bl	33bbc <__assert_fail@plt+0x215f8>
   3a8cc:	subs	sl, r0, #0
   3a8d0:	beq	3a948 <__assert_fail@plt+0x28384>
   3a8d4:	ldr	r2, [sp, #32]
   3a8d8:	ldr	r3, [r2]
   3a8dc:	cmp	r3, #0
   3a8e0:	bne	3b234 <__assert_fail@plt+0x28c70>
   3a8e4:	mov	r3, r2
   3a8e8:	add	r2, r2, #28
   3a8ec:	ldr	r1, [r3, #4]!
   3a8f0:	cmp	r1, #0
   3a8f4:	bne	3b234 <__assert_fail@plt+0x28c70>
   3a8f8:	cmp	r2, r3
   3a8fc:	bne	3a8ec <__assert_fail@plt+0x28328>
   3a900:	ldr	r0, [sp, #32]
   3a904:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3a908:	b	3aa3c <__assert_fail@plt+0x28478>
   3a90c:	ldr	r0, [sp, #36]	; 0x24
   3a910:	bl	358b8 <__assert_fail@plt+0x232f4>
   3a914:	mov	r3, #3
   3a918:	strb	r3, [sp, #132]	; 0x84
   3a91c:	ldr	r3, [sp, #32]
   3a920:	str	r3, [sp, #128]	; 0x80
   3a924:	add	r3, sp, #128	; 0x80
   3a928:	mov	r2, #0
   3a92c:	mov	r1, r2
   3a930:	ldr	r0, [sp, #20]
   3a934:	bl	33bbc <__assert_fail@plt+0x215f8>
   3a938:	subs	sl, r0, #0
   3a93c:	bne	3aa3c <__assert_fail@plt+0x28478>
   3a940:	b	3a948 <__assert_fail@plt+0x28384>
   3a944:	ldr	fp, [sp, #204]	; 0xcc
   3a948:	mov	r3, #12
   3a94c:	str	r3, [fp]
   3a950:	b	3a28c <__assert_fail@plt+0x27cc8>
   3a954:	ldr	r2, [r8]
   3a958:	mov	r3, #1
   3a95c:	lsl	r3, r3, r2
   3a960:	ldr	r2, [sp, #20]
   3a964:	ldr	r2, [r2, #84]	; 0x54
   3a968:	tst	r3, r2
   3a96c:	moveq	r3, #6
   3a970:	streq	r3, [fp]
   3a974:	moveq	sl, #0
   3a978:	beq	3b048 <__assert_fail@plt+0x28a84>
   3a97c:	ldr	r0, [sp, #20]
   3a980:	ldr	r2, [r0, #80]	; 0x50
   3a984:	orr	r3, r2, r3
   3a988:	str	r3, [r0, #80]	; 0x50
   3a98c:	mov	r3, r8
   3a990:	mov	r2, #0
   3a994:	mov	r1, r2
   3a998:	bl	33bbc <__assert_fail@plt+0x215f8>
   3a99c:	subs	sl, r0, #0
   3a9a0:	moveq	r3, #12
   3a9a4:	streq	r3, [fp]
   3a9a8:	beq	3b048 <__assert_fail@plt+0x28a84>
   3a9ac:	ldr	r2, [sp, #20]
   3a9b0:	ldr	r3, [r2, #76]	; 0x4c
   3a9b4:	add	r3, r3, #1
   3a9b8:	str	r3, [r2, #76]	; 0x4c
   3a9bc:	ldrb	r3, [r2, #88]	; 0x58
   3a9c0:	orr	r3, r3, #2
   3a9c4:	strb	r3, [r2, #88]	; 0x58
   3a9c8:	b	3aa3c <__assert_fail@plt+0x28478>
   3a9cc:	ldr	r3, [sp, #24]
   3a9d0:	tst	r3, #16777216	; 0x1000000
   3a9d4:	movne	r3, #13
   3a9d8:	strne	r3, [fp]
   3a9dc:	movne	sl, #0
   3a9e0:	bne	3b048 <__assert_fail@plt+0x28a84>
   3a9e4:	ldr	r3, [sp, #24]
   3a9e8:	tst	r3, #32
   3a9ec:	movne	r3, #13
   3a9f0:	strne	r3, [fp]
   3a9f4:	movne	sl, #0
   3a9f8:	bne	3b048 <__assert_fail@plt+0x28a84>
   3a9fc:	ldr	r3, [sp, #24]
   3aa00:	tst	r3, #16
   3aa04:	bne	3aa68 <__assert_fail@plt+0x284a4>
   3aa08:	cmp	r2, #9
   3aa0c:	beq	3aaa4 <__assert_fail@plt+0x284e0>
   3aa10:	mov	r3, #1
   3aa14:	strb	r3, [r8, #4]
   3aa18:	mov	r3, r8
   3aa1c:	mov	r2, #0
   3aa20:	mov	r1, r2
   3aa24:	ldr	r0, [sp, #20]
   3aa28:	bl	33bbc <__assert_fail@plt+0x215f8>
   3aa2c:	subs	sl, r0, #0
   3aa30:	moveq	r3, #12
   3aa34:	streq	r3, [fp]
   3aa38:	beq	3b048 <__assert_fail@plt+0x28a84>
   3aa3c:	ldr	r2, [sp, #24]
   3aa40:	mov	r1, r9
   3aa44:	mov	r0, r8
   3aa48:	bl	357c0 <__assert_fail@plt+0x231fc>
   3aa4c:	movw	r3, #13832	; 0x3608
   3aa50:	movt	r3, #3
   3aa54:	str	r3, [sp, #32]
   3aa58:	movw	r3, #22852	; 0x5944
   3aa5c:	movt	r3, #3
   3aa60:	str	r3, [sp, #36]	; 0x24
   3aa64:	b	3b0e0 <__assert_fail@plt+0x28b1c>
   3aa68:	mov	r5, r3
   3aa6c:	mov	r2, r3
   3aa70:	mov	r1, r9
   3aa74:	mov	r0, r8
   3aa78:	bl	357c0 <__assert_fail@plt+0x231fc>
   3aa7c:	str	fp, [sp, #4]
   3aa80:	ldr	r3, [sp, #200]	; 0xc8
   3aa84:	str	r3, [sp]
   3aa88:	mov	r3, r5
   3aa8c:	mov	r2, r8
   3aa90:	mov	r1, r4
   3aa94:	mov	r0, r9
   3aa98:	bl	39ec0 <__assert_fail@plt+0x278fc>
   3aa9c:	mov	sl, r0
   3aaa0:	b	3b048 <__assert_fail@plt+0x28a84>
   3aaa4:	ldr	r3, [sp, #24]
   3aaa8:	tst	r3, #131072	; 0x20000
   3aaac:	moveq	r3, #16
   3aab0:	streq	r3, [fp]
   3aab4:	moveq	sl, #0
   3aab8:	bne	3aa10 <__assert_fail@plt+0x2844c>
   3aabc:	b	3b048 <__assert_fail@plt+0x28a84>
   3aac0:	ldr	r3, [r8]
   3aac4:	movw	r2, #783	; 0x30f
   3aac8:	tst	r2, r3
   3aacc:	beq	3aae0 <__assert_fail@plt+0x2851c>
   3aad0:	ldr	r3, [sp, #20]
   3aad4:	ldrb	r3, [r3, #88]	; 0x58
   3aad8:	tst	r3, #16
   3aadc:	beq	3ab94 <__assert_fail@plt+0x285d0>
   3aae0:	ldr	r3, [r8]
   3aae4:	sub	r2, r3, #256	; 0x100
   3aae8:	bics	r2, r2, #256	; 0x100
   3aaec:	bne	3aca4 <__assert_fail@plt+0x286e0>
   3aaf0:	cmp	r3, #256	; 0x100
   3aaf4:	beq	3ac78 <__assert_fail@plt+0x286b4>
   3aaf8:	mov	r3, #5
   3aafc:	str	r3, [r8]
   3ab00:	mov	r3, r8
   3ab04:	mov	r2, #0
   3ab08:	mov	r1, r2
   3ab0c:	ldr	r0, [sp, #20]
   3ab10:	bl	33bbc <__assert_fail@plt+0x215f8>
   3ab14:	mov	r5, r0
   3ab18:	mov	r3, #10
   3ab1c:	str	r3, [r8]
   3ab20:	mov	r3, r8
   3ab24:	mov	r2, #0
   3ab28:	mov	r1, r2
   3ab2c:	ldr	r6, [sp, #20]
   3ab30:	mov	r0, r6
   3ab34:	bl	33bbc <__assert_fail@plt+0x215f8>
   3ab38:	mov	r4, r0
   3ab3c:	mov	r3, #10
   3ab40:	mov	r2, r0
   3ab44:	mov	r1, r5
   3ab48:	mov	r0, r6
   3ab4c:	bl	33d58 <__assert_fail@plt+0x21794>
   3ab50:	clz	r3, r4
   3ab54:	lsr	r3, r3, #5
   3ab58:	cmp	r5, #0
   3ab5c:	moveq	r3, #1
   3ab60:	mov	sl, r0
   3ab64:	cmp	r0, #0
   3ab68:	moveq	r3, #1
   3ab6c:	cmp	r3, #0
   3ab70:	movne	r3, #12
   3ab74:	strne	r3, [fp]
   3ab78:	movne	sl, #0
   3ab7c:	bne	3b048 <__assert_fail@plt+0x28a84>
   3ab80:	ldr	r2, [sp, #24]
   3ab84:	mov	r1, r9
   3ab88:	mov	r0, r8
   3ab8c:	bl	357c0 <__assert_fail@plt+0x231fc>
   3ab90:	b	3b048 <__assert_fail@plt+0x28a84>
   3ab94:	ldr	r2, [sp, #20]
   3ab98:	orr	r3, r3, #16
   3ab9c:	strb	r3, [r2, #88]	; 0x58
   3aba0:	tst	r3, #8
   3aba4:	bne	3abf8 <__assert_fail@plt+0x28634>
   3aba8:	mov	r3, #0
   3abac:	str	r3, [r2, #96]	; 0x60
   3abb0:	movt	r3, #1023	; 0x3ff
   3abb4:	str	r3, [r2, #100]	; 0x64
   3abb8:	mvn	r3, #2013265921	; 0x78000001
   3abbc:	str	r3, [r2, #104]	; 0x68
   3abc0:	mvn	r3, #-134217727	; 0xf8000001
   3abc4:	str	r3, [r2, #108]	; 0x6c
   3abc8:	ldrb	r3, [r2, #88]	; 0x58
   3abcc:	tst	r3, #4
   3abd0:	moveq	r5, #128	; 0x80
   3abd4:	moveq	r3, #4
   3abd8:	beq	3ac00 <__assert_fail@plt+0x2863c>
   3abdc:	ldr	r1, [sp, #20]
   3abe0:	mov	r2, #0
   3abe4:	str	r2, [r1, #112]	; 0x70
   3abe8:	str	r2, [r1, #116]	; 0x74
   3abec:	str	r2, [r1, #120]	; 0x78
   3abf0:	str	r2, [r1, #124]	; 0x7c
   3abf4:	b	3aae0 <__assert_fail@plt+0x2851c>
   3abf8:	mov	r5, #0
   3abfc:	mov	r3, r5
   3ac00:	add	r3, r3, #24
   3ac04:	ldr	r2, [sp, #20]
   3ac08:	add	r4, r2, r3, lsl #2
   3ac0c:	add	r6, r2, #128	; 0x80
   3ac10:	bl	12288 <__ctype_b_loc@plt>
   3ac14:	mov	ip, #1
   3ac18:	b	3ac6c <__assert_fail@plt+0x286a8>
   3ac1c:	ldr	r3, [r4]
   3ac20:	orr	r3, r3, ip, lsl r1
   3ac24:	str	r3, [r4]
   3ac28:	add	r1, r1, #1
   3ac2c:	add	r2, r2, #1
   3ac30:	cmp	r1, #32
   3ac34:	beq	3ac5c <__assert_fail@plt+0x28698>
   3ac38:	ldr	lr, [r0]
   3ac3c:	lsl	r3, r2, #1
   3ac40:	ldrh	r3, [lr, r3]
   3ac44:	ubfx	r3, r3, #3, #1
   3ac48:	cmp	r2, #95	; 0x5f
   3ac4c:	orreq	r3, r3, #1
   3ac50:	cmp	r3, #0
   3ac54:	bne	3ac1c <__assert_fail@plt+0x28658>
   3ac58:	b	3ac28 <__assert_fail@plt+0x28664>
   3ac5c:	add	r5, r5, #32
   3ac60:	add	r4, r4, #4
   3ac64:	cmp	r6, r4
   3ac68:	beq	3aae0 <__assert_fail@plt+0x2851c>
   3ac6c:	mov	r2, r5
   3ac70:	mov	r1, #0
   3ac74:	b	3ac38 <__assert_fail@plt+0x28674>
   3ac78:	mov	r3, #6
   3ac7c:	str	r3, [r8]
   3ac80:	mov	r3, r8
   3ac84:	mov	r2, #0
   3ac88:	mov	r1, r2
   3ac8c:	ldr	r0, [sp, #20]
   3ac90:	bl	33bbc <__assert_fail@plt+0x215f8>
   3ac94:	mov	r5, r0
   3ac98:	mov	r3, #9
   3ac9c:	str	r3, [r8]
   3aca0:	b	3ab20 <__assert_fail@plt+0x2855c>
   3aca4:	mov	r3, r8
   3aca8:	mov	r2, #0
   3acac:	mov	r1, r2
   3acb0:	ldr	r0, [sp, #20]
   3acb4:	bl	33bbc <__assert_fail@plt+0x215f8>
   3acb8:	subs	sl, r0, #0
   3acbc:	moveq	r3, #12
   3acc0:	streq	r3, [fp]
   3acc4:	bne	3ab80 <__assert_fail@plt+0x285bc>
   3acc8:	b	3b048 <__assert_fail@plt+0x28a84>
   3accc:	mov	r3, r8
   3acd0:	mov	r2, #0
   3acd4:	mov	r1, r2
   3acd8:	ldr	r0, [sp, #20]
   3acdc:	bl	33bbc <__assert_fail@plt+0x215f8>
   3ace0:	subs	sl, r0, #0
   3ace4:	moveq	r3, #12
   3ace8:	streq	r3, [fp]
   3acec:	beq	3b048 <__assert_fail@plt+0x28a84>
   3acf0:	ldr	r2, [sp, #20]
   3acf4:	ldr	r3, [r2, #92]	; 0x5c
   3acf8:	cmp	r3, #1
   3acfc:	ble	3aa3c <__assert_fail@plt+0x28478>
   3ad00:	ldrb	r3, [r2, #88]	; 0x58
   3ad04:	orr	r3, r3, #2
   3ad08:	strb	r3, [r2, #88]	; 0x58
   3ad0c:	b	3aa3c <__assert_fail@plt+0x28478>
   3ad10:	str	fp, [sp, #4]
   3ad14:	cmp	r2, #33	; 0x21
   3ad18:	movne	r2, #0
   3ad1c:	moveq	r2, #1
   3ad20:	str	r2, [sp]
   3ad24:	movw	r3, #42352	; 0xa570
   3ad28:	movt	r3, #4
   3ad2c:	movw	r2, #42288	; 0xa530
   3ad30:	movt	r2, #4
   3ad34:	ldr	r1, [r0, #64]	; 0x40
   3ad38:	ldr	r0, [sp, #20]
   3ad3c:	bl	38dbc <__assert_fail@plt+0x267f8>
   3ad40:	ldr	r3, [fp]
   3ad44:	mov	sl, r0
   3ad48:	clz	r0, r0
   3ad4c:	lsr	r0, r0, #5
   3ad50:	cmp	r3, #0
   3ad54:	moveq	r0, #0
   3ad58:	cmp	r0, #0
   3ad5c:	beq	3aa3c <__assert_fail@plt+0x28478>
   3ad60:	mov	sl, #0
   3ad64:	b	3b048 <__assert_fail@plt+0x28a84>
   3ad68:	str	fp, [sp, #4]
   3ad6c:	cmp	r2, #35	; 0x23
   3ad70:	movne	r2, #0
   3ad74:	moveq	r2, #1
   3ad78:	str	r2, [sp]
   3ad7c:	movw	r3, #25528	; 0x63b8
   3ad80:	movt	r3, #4
   3ad84:	movw	r2, #42304	; 0xa540
   3ad88:	movt	r2, #4
   3ad8c:	ldr	r1, [r0, #64]	; 0x40
   3ad90:	ldr	r0, [sp, #20]
   3ad94:	bl	38dbc <__assert_fail@plt+0x267f8>
   3ad98:	ldr	r3, [fp]
   3ad9c:	mov	sl, r0
   3ada0:	clz	r0, r0
   3ada4:	lsr	r0, r0, #5
   3ada8:	cmp	r3, #0
   3adac:	moveq	r0, #0
   3adb0:	cmp	r0, #0
   3adb4:	beq	3aa3c <__assert_fail@plt+0x28478>
   3adb8:	mov	sl, #0
   3adbc:	b	3b048 <__assert_fail@plt+0x28a84>
   3adc0:	mov	r3, #5
   3adc4:	str	r3, [fp]
   3adc8:	mov	sl, #0
   3adcc:	b	3b048 <__assert_fail@plt+0x28a84>
   3add0:	ldr	r2, [sp, #24]
   3add4:	mov	r1, r8
   3add8:	mov	r0, r9
   3addc:	bl	357e8 <__assert_fail@plt+0x23224>
   3ade0:	mov	r4, r0
   3ade4:	cmn	r0, #1
   3ade8:	beq	3ae30 <__assert_fail@plt+0x2886c>
   3adec:	cmn	r0, #2
   3adf0:	beq	3ae08 <__assert_fail@plt+0x28844>
   3adf4:	ldrb	r3, [r8, #4]
   3adf8:	cmp	r3, #24
   3adfc:	beq	3af38 <__assert_fail@plt+0x28974>
   3ae00:	cmp	r3, #1
   3ae04:	beq	3ae4c <__assert_fail@plt+0x28888>
   3ae08:	ldr	r3, [sp, #24]
   3ae0c:	tst	r3, #2097152	; 0x200000
   3ae10:	bne	3ae64 <__assert_fail@plt+0x288a0>
   3ae14:	ldrb	r3, [r8, #4]
   3ae18:	cmp	r3, #2
   3ae1c:	bne	3af28 <__assert_fail@plt+0x28964>
   3ae20:	mov	r3, #9
   3ae24:	str	r3, [fp]
   3ae28:	mov	r6, #0
   3ae2c:	b	3afe4 <__assert_fail@plt+0x28a20>
   3ae30:	ldrb	r3, [r8, #4]
   3ae34:	cmp	r3, #1
   3ae38:	bne	3ae80 <__assert_fail@plt+0x288bc>
   3ae3c:	ldrb	r3, [r8]
   3ae40:	cmp	r3, #44	; 0x2c
   3ae44:	moveq	r4, #0
   3ae48:	bne	3ae80 <__assert_fail@plt+0x288bc>
   3ae4c:	ldrb	r3, [r8]
   3ae50:	cmp	r3, #44	; 0x2c
   3ae54:	beq	3ae90 <__assert_fail@plt+0x288cc>
   3ae58:	ldr	r3, [sp, #24]
   3ae5c:	tst	r3, #2097152	; 0x200000
   3ae60:	beq	3af28 <__assert_fail@plt+0x28964>
   3ae64:	str	r6, [r9, #40]	; 0x28
   3ae68:	ldrd	r2, [sp, #128]	; 0x80
   3ae6c:	strd	r2, [r8]
   3ae70:	mov	r3, #1
   3ae74:	strb	r3, [r8, #4]
   3ae78:	mov	r6, sl
   3ae7c:	b	3afe4 <__assert_fail@plt+0x28a20>
   3ae80:	mov	r3, #10
   3ae84:	str	r3, [fp]
   3ae88:	mov	r6, #0
   3ae8c:	b	3afe4 <__assert_fail@plt+0x28a20>
   3ae90:	ldr	r2, [sp, #24]
   3ae94:	mov	r1, r8
   3ae98:	mov	r0, r9
   3ae9c:	bl	357e8 <__assert_fail@plt+0x23224>
   3aea0:	mov	r7, r0
   3aea4:	cmn	r4, #2
   3aea8:	cmnne	r0, #2
   3aeac:	beq	3ae08 <__assert_fail@plt+0x28844>
   3aeb0:	cmn	r0, #1
   3aeb4:	cmpne	r4, r0
   3aeb8:	bgt	3af40 <__assert_fail@plt+0x2897c>
   3aebc:	ldrb	r3, [r8, #4]
   3aec0:	cmp	r3, #24
   3aec4:	bne	3af40 <__assert_fail@plt+0x2897c>
   3aec8:	cmn	r7, #1
   3aecc:	beq	3af50 <__assert_fail@plt+0x2898c>
   3aed0:	cmp	r7, #32768	; 0x8000
   3aed4:	movlt	r3, #0
   3aed8:	movge	r3, #1
   3aedc:	cmp	r3, #0
   3aee0:	movne	r3, #15
   3aee4:	strne	r3, [fp]
   3aee8:	movne	r6, #0
   3aeec:	bne	3afe4 <__assert_fail@plt+0x28a20>
   3aef0:	ldr	r2, [sp, #24]
   3aef4:	mov	r1, r9
   3aef8:	mov	r0, r8
   3aefc:	bl	357c0 <__assert_fail@plt+0x231fc>
   3af00:	cmp	sl, #0
   3af04:	beq	3b0a0 <__assert_fail@plt+0x28adc>
   3af08:	orrs	r3, r7, r4
   3af0c:	bne	3af60 <__assert_fail@plt+0x2899c>
   3af10:	mov	r2, #0
   3af14:	ldr	r1, [sp, #36]	; 0x24
   3af18:	mov	r0, sl
   3af1c:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3af20:	mov	r6, #0
   3af24:	b	3afe4 <__assert_fail@plt+0x28a20>
   3af28:	mov	r3, #10
   3af2c:	str	r3, [fp]
   3af30:	mov	r6, #0
   3af34:	b	3afe4 <__assert_fail@plt+0x28a20>
   3af38:	mov	r7, r0
   3af3c:	b	3aebc <__assert_fail@plt+0x288f8>
   3af40:	mov	r3, #10
   3af44:	str	r3, [fp]
   3af48:	mov	r6, #0
   3af4c:	b	3afe4 <__assert_fail@plt+0x28a20>
   3af50:	cmp	r4, #32768	; 0x8000
   3af54:	movlt	r3, #0
   3af58:	movge	r3, #1
   3af5c:	b	3aedc <__assert_fail@plt+0x28918>
   3af60:	cmp	r4, #0
   3af64:	ble	3b07c <__assert_fail@plt+0x28ab8>
   3af68:	cmp	r4, #1
   3af6c:	ble	3b068 <__assert_fail@plt+0x28aa4>
   3af70:	str	sl, [sp, #28]
   3af74:	mov	r5, sl
   3af78:	mov	r6, #2
   3af7c:	ldr	r1, [sp, #20]
   3af80:	mov	r0, r5
   3af84:	bl	33c8c <__assert_fail@plt+0x216c8>
   3af88:	mov	r5, r0
   3af8c:	mov	r3, #16
   3af90:	mov	r2, r0
   3af94:	ldr	r1, [sp, #28]
   3af98:	ldr	r0, [sp, #20]
   3af9c:	bl	33d58 <__assert_fail@plt+0x21794>
   3afa0:	str	r0, [sp, #28]
   3afa4:	cmp	r0, #0
   3afa8:	cmpne	r5, #0
   3afac:	beq	3afd8 <__assert_fail@plt+0x28a14>
   3afb0:	add	r6, r6, #1
   3afb4:	cmp	r4, r6
   3afb8:	bge	3af7c <__assert_fail@plt+0x289b8>
   3afbc:	cmp	r7, r4
   3afc0:	beq	3b2ec <__assert_fail@plt+0x28d28>
   3afc4:	ldr	r1, [sp, #20]
   3afc8:	mov	r0, r5
   3afcc:	bl	33c8c <__assert_fail@plt+0x216c8>
   3afd0:	subs	r5, r0, #0
   3afd4:	bne	3b164 <__assert_fail@plt+0x28ba0>
   3afd8:	mov	r3, #12
   3afdc:	str	r3, [fp]
   3afe0:	mov	r6, #0
   3afe4:	ldr	r2, [fp]
   3afe8:	clz	r3, r6
   3afec:	lsr	r3, r3, #5
   3aff0:	cmp	r2, #0
   3aff4:	moveq	r3, #0
   3aff8:	cmp	r3, #0
   3affc:	bne	3b0b8 <__assert_fail@plt+0x28af4>
   3b000:	ldr	r3, [sp, #24]
   3b004:	tst	r3, #16777216	; 0x1000000
   3b008:	beq	3b0dc <__assert_fail@plt+0x28b18>
   3b00c:	ldrb	r3, [r8, #4]
   3b010:	mov	sl, r6
   3b014:	cmp	r3, #23
   3b018:	cmpne	r3, #11
   3b01c:	bne	3b0e0 <__assert_fail@plt+0x28b1c>
   3b020:	cmp	r6, #0
   3b024:	beq	3b03c <__assert_fail@plt+0x28a78>
   3b028:	mov	r2, #0
   3b02c:	movw	r1, #22852	; 0x5944
   3b030:	movt	r1, #3
   3b034:	mov	r0, r6
   3b038:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b03c:	mov	r3, #13
   3b040:	str	r3, [fp]
   3b044:	mov	sl, #0
   3b048:	mov	r0, sl
   3b04c:	add	sp, sp, #164	; 0xa4
   3b050:	ldrd	r4, [sp]
   3b054:	ldrd	r6, [sp, #8]
   3b058:	ldrd	r8, [sp, #16]
   3b05c:	ldrd	sl, [sp, #24]
   3b060:	add	sp, sp, #32
   3b064:	pop	{pc}		; (ldr pc, [sp], #4)
   3b068:	cmp	r4, r7
   3b06c:	beq	3b0a8 <__assert_fail@plt+0x28ae4>
   3b070:	mov	r5, sl
   3b074:	str	sl, [sp, #28]
   3b078:	b	3afc4 <__assert_fail@plt+0x28a00>
   3b07c:	mov	r5, sl
   3b080:	mov	r3, #0
   3b084:	str	r3, [sp, #28]
   3b088:	b	3b164 <__assert_fail@plt+0x28ba0>
   3b08c:	ldr	r2, [r5, #20]
   3b090:	ldr	r1, [sp, #32]
   3b094:	mov	r0, r5
   3b098:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b09c:	b	3b170 <__assert_fail@plt+0x28bac>
   3b0a0:	mov	r6, sl
   3b0a4:	b	3afe4 <__assert_fail@plt+0x28a20>
   3b0a8:	mov	r6, sl
   3b0ac:	b	3afe4 <__assert_fail@plt+0x28a20>
   3b0b0:	mov	r6, sl
   3b0b4:	b	3afe4 <__assert_fail@plt+0x28a20>
   3b0b8:	cmp	sl, #0
   3b0bc:	beq	3b048 <__assert_fail@plt+0x28a84>
   3b0c0:	mov	r2, #0
   3b0c4:	movw	r1, #22852	; 0x5944
   3b0c8:	movt	r1, #3
   3b0cc:	mov	r0, sl
   3b0d0:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b0d4:	mov	sl, #0
   3b0d8:	b	3b048 <__assert_fail@plt+0x28a84>
   3b0dc:	mov	sl, r6
   3b0e0:	ldrb	r5, [r8, #4]
   3b0e4:	cmp	r5, #18
   3b0e8:	movne	r4, #0
   3b0ec:	moveq	r4, #1
   3b0f0:	cmp	r5, #11
   3b0f4:	cmpne	r5, #23
   3b0f8:	moveq	r3, #1
   3b0fc:	movne	r3, #0
   3b100:	sub	r2, r5, #18
   3b104:	uxtb	r2, r2
   3b108:	cmp	r2, #1
   3b10c:	orrls	r3, r3, #1
   3b110:	cmp	r3, #0
   3b114:	beq	3b048 <__assert_fail@plt+0x28a84>
   3b118:	ldr	r6, [r9, #40]	; 0x28
   3b11c:	ldrd	r2, [r8]
   3b120:	strd	r2, [sp, #128]	; 0x80
   3b124:	cmp	r5, #23
   3b128:	beq	3add0 <__assert_fail@plt+0x2880c>
   3b12c:	cmp	r5, #19
   3b130:	moveq	r7, #1
   3b134:	mvnne	r7, #0
   3b138:	ldr	r2, [sp, #24]
   3b13c:	mov	r1, r9
   3b140:	mov	r0, r8
   3b144:	bl	357c0 <__assert_fail@plt+0x231fc>
   3b148:	cmp	sl, #0
   3b14c:	beq	3b0b0 <__assert_fail@plt+0x28aec>
   3b150:	cmp	r5, #18
   3b154:	beq	3b068 <__assert_fail@plt+0x28aa4>
   3b158:	mov	r5, sl
   3b15c:	mov	r3, #0
   3b160:	str	r3, [sp, #28]
   3b164:	ldrb	r3, [r5, #24]
   3b168:	cmp	r3, #17
   3b16c:	beq	3b08c <__assert_fail@plt+0x28ac8>
   3b170:	cmn	r7, #1
   3b174:	moveq	r3, #11
   3b178:	movne	r3, #10
   3b17c:	mov	r2, #0
   3b180:	mov	r1, r5
   3b184:	ldr	r0, [sp, #20]
   3b188:	bl	33d58 <__assert_fail@plt+0x21794>
   3b18c:	subs	r6, r0, #0
   3b190:	beq	3afd8 <__assert_fail@plt+0x28a14>
   3b194:	add	r4, r4, #2
   3b198:	cmp	r7, r4
   3b19c:	blt	3b1fc <__assert_fail@plt+0x28c38>
   3b1a0:	ldr	r1, [sp, #20]
   3b1a4:	mov	r0, r5
   3b1a8:	bl	33c8c <__assert_fail@plt+0x216c8>
   3b1ac:	mov	r5, r0
   3b1b0:	mov	r3, #16
   3b1b4:	mov	r2, r0
   3b1b8:	mov	r1, r6
   3b1bc:	ldr	r6, [sp, #20]
   3b1c0:	mov	r0, r6
   3b1c4:	bl	33d58 <__assert_fail@plt+0x21794>
   3b1c8:	mov	r1, r0
   3b1cc:	cmp	r0, #0
   3b1d0:	cmpne	r5, #0
   3b1d4:	beq	3afd8 <__assert_fail@plt+0x28a14>
   3b1d8:	mov	r3, #10
   3b1dc:	mov	r2, #0
   3b1e0:	mov	r0, r6
   3b1e4:	bl	33d58 <__assert_fail@plt+0x21794>
   3b1e8:	subs	r6, r0, #0
   3b1ec:	beq	3afd8 <__assert_fail@plt+0x28a14>
   3b1f0:	add	r4, r4, #1
   3b1f4:	cmp	r7, r4
   3b1f8:	bge	3b1a0 <__assert_fail@plt+0x28bdc>
   3b1fc:	ldr	r3, [sp, #28]
   3b200:	cmp	r3, #0
   3b204:	beq	3b000 <__assert_fail@plt+0x28a3c>
   3b208:	mov	r3, #16
   3b20c:	mov	r2, r6
   3b210:	ldr	r1, [sp, #28]
   3b214:	ldr	r0, [sp, #20]
   3b218:	bl	33d58 <__assert_fail@plt+0x21794>
   3b21c:	mov	r6, r0
   3b220:	b	3afe4 <__assert_fail@plt+0x28a20>
   3b224:	mov	sl, #0
   3b228:	b	3b048 <__assert_fail@plt+0x28a84>
   3b22c:	mov	sl, #0
   3b230:	b	3b048 <__assert_fail@plt+0x28a84>
   3b234:	mov	r3, #3
   3b238:	strb	r3, [sp, #132]	; 0x84
   3b23c:	ldr	r3, [sp, #32]
   3b240:	str	r3, [sp, #128]	; 0x80
   3b244:	add	r3, sp, #128	; 0x80
   3b248:	mov	r2, #0
   3b24c:	mov	r1, r2
   3b250:	ldr	r0, [sp, #20]
   3b254:	bl	33bbc <__assert_fail@plt+0x215f8>
   3b258:	subs	r1, r0, #0
   3b25c:	beq	3a948 <__assert_fail@plt+0x28384>
   3b260:	mov	r3, #10
   3b264:	mov	r2, sl
   3b268:	ldr	r0, [sp, #20]
   3b26c:	bl	33d58 <__assert_fail@plt+0x21794>
   3b270:	subs	sl, r0, #0
   3b274:	bne	3aa3c <__assert_fail@plt+0x28478>
   3b278:	b	3a948 <__assert_fail@plt+0x28384>
   3b27c:	ldr	fp, [sp, #204]	; 0xcc
   3b280:	mov	r3, #3
   3b284:	str	r3, [fp]
   3b288:	b	3a28c <__assert_fail@plt+0x27cc8>
   3b28c:	ldr	fp, [sp, #204]	; 0xcc
   3b290:	mov	r3, #3
   3b294:	str	r3, [fp]
   3b298:	b	3a28c <__assert_fail@plt+0x27cc8>
   3b29c:	mov	r3, #0
   3b2a0:	ldr	r2, [sp, #204]	; 0xcc
   3b2a4:	str	r3, [r2]
   3b2a8:	b	3a604 <__assert_fail@plt+0x28040>
   3b2ac:	ldr	fp, [sp, #204]	; 0xcc
   3b2b0:	mov	r3, #11
   3b2b4:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3b2b8:	ldr	fp, [sp, #204]	; 0xcc
   3b2bc:	mov	r3, #11
   3b2c0:	str	r3, [fp]
   3b2c4:	b	3a28c <__assert_fail@plt+0x27cc8>
   3b2c8:	ldr	fp, [sp, #204]	; 0xcc
   3b2cc:	mov	r3, #3
   3b2d0:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3b2d4:	ldr	fp, [sp, #204]	; 0xcc
   3b2d8:	mov	r3, #3
   3b2dc:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3b2e0:	ldr	fp, [sp, #204]	; 0xcc
   3b2e4:	mov	r3, #11
   3b2e8:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3b2ec:	ldr	r6, [sp, #28]
   3b2f0:	b	3b000 <__assert_fail@plt+0x28a3c>
   3b2f4:	ldr	r3, [sp, #80]	; 0x50
   3b2f8:	cmp	r3, #3
   3b2fc:	cmpne	r3, #0
   3b300:	bne	3a3f8 <__assert_fail@plt+0x27e34>
   3b304:	b	3a3fc <__assert_fail@plt+0x27e38>
   3b308:	ldr	r0, [sp, #84]	; 0x54
   3b30c:	bl	122d0 <strlen@plt>
   3b310:	cmp	r0, #1
   3b314:	bls	3a490 <__assert_fail@plt+0x27ecc>
   3b318:	ldr	fp, [sp, #204]	; 0xcc
   3b31c:	mov	r3, #3
   3b320:	b	3b2c0 <__assert_fail@plt+0x28cfc>
   3b324:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b328:	strd	r6, [sp, #8]
   3b32c:	strd	r8, [sp, #16]
   3b330:	strd	sl, [sp, #24]
   3b334:	str	lr, [sp, #32]
   3b338:	sub	sp, sp, #20
   3b33c:	mov	fp, r0
   3b340:	mov	r9, r1
   3b344:	mov	r8, r2
   3b348:	mov	sl, r3
   3b34c:	ldr	r7, [sp, #56]	; 0x38
   3b350:	ldr	r6, [sp, #60]	; 0x3c
   3b354:	ldr	ip, [r1]
   3b358:	str	ip, [sp, #12]
   3b35c:	str	r6, [sp, #4]
   3b360:	str	r7, [sp]
   3b364:	bl	39ec0 <__assert_fail@plt+0x278fc>
   3b368:	ldr	r3, [r6]
   3b36c:	mov	r4, r0
   3b370:	clz	r0, r0
   3b374:	lsr	r0, r0, #5
   3b378:	cmp	r3, #0
   3b37c:	moveq	r0, #0
   3b380:	cmp	r0, #0
   3b384:	beq	3b3d4 <__assert_fail@plt+0x28e10>
   3b388:	mov	r4, #0
   3b38c:	b	3b488 <__assert_fail@plt+0x28ec4>
   3b390:	cmp	r4, #0
   3b394:	beq	3b488 <__assert_fail@plt+0x28ec4>
   3b398:	mov	r2, #0
   3b39c:	movw	r1, #22852	; 0x5944
   3b3a0:	movt	r1, #3
   3b3a4:	mov	r0, r4
   3b3a8:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b3ac:	mov	r4, #0
   3b3b0:	b	3b488 <__assert_fail@plt+0x28ec4>
   3b3b4:	mov	r3, #16
   3b3b8:	mov	r2, r5
   3b3bc:	mov	r1, r4
   3b3c0:	ldr	r0, [sp, #12]
   3b3c4:	bl	33d58 <__assert_fail@plt+0x21794>
   3b3c8:	cmp	r0, #0
   3b3cc:	beq	3b450 <__assert_fail@plt+0x28e8c>
   3b3d0:	mov	r4, r0
   3b3d4:	ldrb	r2, [r8, #4]
   3b3d8:	and	r3, r2, #247	; 0xf7
   3b3dc:	cmp	r3, #2
   3b3e0:	beq	3b488 <__assert_fail@plt+0x28ec4>
   3b3e4:	clz	r3, r7
   3b3e8:	lsr	r3, r3, #5
   3b3ec:	cmp	r2, #9
   3b3f0:	orrne	r3, r3, #1
   3b3f4:	cmp	r3, #0
   3b3f8:	beq	3b488 <__assert_fail@plt+0x28ec4>
   3b3fc:	str	r6, [sp, #4]
   3b400:	str	r7, [sp]
   3b404:	mov	r3, sl
   3b408:	mov	r2, r8
   3b40c:	mov	r1, r9
   3b410:	mov	r0, fp
   3b414:	bl	39ec0 <__assert_fail@plt+0x278fc>
   3b418:	ldr	r3, [r6]
   3b41c:	mov	r5, r0
   3b420:	clz	r0, r0
   3b424:	lsr	r0, r0, #5
   3b428:	cmp	r3, #0
   3b42c:	moveq	r0, #0
   3b430:	cmp	r0, #0
   3b434:	bne	3b390 <__assert_fail@plt+0x28dcc>
   3b438:	cmp	r4, #0
   3b43c:	cmpne	r5, #0
   3b440:	bne	3b3b4 <__assert_fail@plt+0x28df0>
   3b444:	cmp	r4, #0
   3b448:	moveq	r4, r5
   3b44c:	b	3b3d4 <__assert_fail@plt+0x28e10>
   3b450:	mov	fp, r0
   3b454:	movw	r7, #22852	; 0x5944
   3b458:	movt	r7, #3
   3b45c:	mov	r2, #0
   3b460:	mov	r1, r7
   3b464:	mov	r0, r5
   3b468:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b46c:	mov	r2, #0
   3b470:	mov	r1, r7
   3b474:	mov	r0, r4
   3b478:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b47c:	mov	r3, #12
   3b480:	str	r3, [r6]
   3b484:	mov	r4, fp
   3b488:	mov	r0, r4
   3b48c:	add	sp, sp, #20
   3b490:	ldrd	r4, [sp]
   3b494:	ldrd	r6, [sp, #8]
   3b498:	ldrd	r8, [sp, #16]
   3b49c:	ldrd	sl, [sp, #24]
   3b4a0:	add	sp, sp, #32
   3b4a4:	pop	{pc}		; (ldr pc, [sp], #4)
   3b4a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b4ac:	strd	r6, [sp, #8]
   3b4b0:	strd	r8, [sp, #16]
   3b4b4:	strd	sl, [sp, #24]
   3b4b8:	str	lr, [sp, #32]
   3b4bc:	sub	sp, sp, #28
   3b4c0:	str	r0, [sp, #12]
   3b4c4:	str	r1, [sp, #16]
   3b4c8:	mov	r4, r2
   3b4cc:	mov	r9, r3
   3b4d0:	str	r3, [sp, #20]
   3b4d4:	ldr	r8, [sp, #64]	; 0x40
   3b4d8:	ldr	r7, [sp, #68]	; 0x44
   3b4dc:	ldr	r5, [r1]
   3b4e0:	ldr	fp, [r5, #84]	; 0x54
   3b4e4:	str	r7, [sp, #4]
   3b4e8:	str	r8, [sp]
   3b4ec:	bl	3b324 <__assert_fail@plt+0x28d60>
   3b4f0:	ldr	r3, [r7]
   3b4f4:	mov	r6, r0
   3b4f8:	clz	r0, r0
   3b4fc:	lsr	r0, r0, #5
   3b500:	cmp	r3, #0
   3b504:	moveq	r0, #0
   3b508:	cmp	r0, #0
   3b50c:	bne	3b620 <__assert_fail@plt+0x2905c>
   3b510:	orr	r9, r9, #8388608	; 0x800000
   3b514:	b	3b558 <__assert_fail@plt+0x28f94>
   3b518:	cmp	r6, #0
   3b51c:	beq	3b600 <__assert_fail@plt+0x2903c>
   3b520:	mov	r2, #0
   3b524:	movw	r1, #22852	; 0x5944
   3b528:	movt	r1, #3
   3b52c:	mov	r0, r6
   3b530:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3b534:	mov	r6, #0
   3b538:	b	3b600 <__assert_fail@plt+0x2903c>
   3b53c:	mov	r2, #0
   3b540:	mov	r3, #10
   3b544:	mov	r1, r6
   3b548:	mov	r0, r5
   3b54c:	bl	33d58 <__assert_fail@plt+0x21794>
   3b550:	subs	r6, r0, #0
   3b554:	beq	3b5f8 <__assert_fail@plt+0x29034>
   3b558:	ldrb	r3, [r4, #4]
   3b55c:	cmp	r3, #10
   3b560:	bne	3b600 <__assert_fail@plt+0x2903c>
   3b564:	mov	r2, r9
   3b568:	ldr	r1, [sp, #12]
   3b56c:	mov	r0, r4
   3b570:	bl	357c0 <__assert_fail@plt+0x231fc>
   3b574:	ldrb	r2, [r4, #4]
   3b578:	and	r3, r2, #247	; 0xf7
   3b57c:	cmp	r3, #2
   3b580:	beq	3b53c <__assert_fail@plt+0x28f78>
   3b584:	clz	r3, r8
   3b588:	lsr	r3, r3, #5
   3b58c:	cmp	r2, #9
   3b590:	orrne	r3, r3, #1
   3b594:	cmp	r3, #0
   3b598:	beq	3b5f0 <__assert_fail@plt+0x2902c>
   3b59c:	ldr	sl, [r5, #84]	; 0x54
   3b5a0:	str	fp, [r5, #84]	; 0x54
   3b5a4:	str	r7, [sp, #4]
   3b5a8:	str	r8, [sp]
   3b5ac:	ldr	r3, [sp, #20]
   3b5b0:	mov	r2, r4
   3b5b4:	ldr	r1, [sp, #16]
   3b5b8:	ldr	r0, [sp, #12]
   3b5bc:	bl	3b324 <__assert_fail@plt+0x28d60>
   3b5c0:	ldr	r3, [r7]
   3b5c4:	mov	r2, r0
   3b5c8:	clz	r0, r0
   3b5cc:	lsr	r0, r0, #5
   3b5d0:	cmp	r3, #0
   3b5d4:	moveq	r0, #0
   3b5d8:	cmp	r0, #0
   3b5dc:	bne	3b518 <__assert_fail@plt+0x28f54>
   3b5e0:	ldr	r3, [r5, #84]	; 0x54
   3b5e4:	orr	sl, r3, sl
   3b5e8:	str	sl, [r5, #84]	; 0x54
   3b5ec:	b	3b540 <__assert_fail@plt+0x28f7c>
   3b5f0:	mov	r2, #0
   3b5f4:	b	3b540 <__assert_fail@plt+0x28f7c>
   3b5f8:	mov	r3, #12
   3b5fc:	str	r3, [r7]
   3b600:	mov	r0, r6
   3b604:	add	sp, sp, #28
   3b608:	ldrd	r4, [sp]
   3b60c:	ldrd	r6, [sp, #8]
   3b610:	ldrd	r8, [sp, #16]
   3b614:	ldrd	sl, [sp, #24]
   3b618:	add	sp, sp, #32
   3b61c:	pop	{pc}		; (ldr pc, [sp], #4)
   3b620:	mov	r6, #0
   3b624:	b	3b600 <__assert_fail@plt+0x2903c>
   3b628:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b62c:	strd	r6, [sp, #8]
   3b630:	strd	r8, [sp, #16]
   3b634:	strd	sl, [sp, #24]
   3b638:	str	lr, [sp, #32]
   3b63c:	sub	sp, sp, #4
   3b640:	ldr	lr, [r2, #4]
   3b644:	cmp	lr, #0
   3b648:	moveq	r4, #0
   3b64c:	streq	r4, [r0]
   3b650:	beq	3b824 <__assert_fail@plt+0x29260>
   3b654:	mov	r6, lr
   3b658:	cmp	lr, #0
   3b65c:	ble	3b678 <__assert_fail@plt+0x290b4>
   3b660:	ldr	r3, [r2, #8]
   3b664:	add	lr, r3, lr, lsl #2
   3b668:	ldr	ip, [r3], #4
   3b66c:	add	r6, r6, ip
   3b670:	cmp	r3, lr
   3b674:	bne	3b668 <__assert_fail@plt+0x290a4>
   3b678:	mov	fp, r2
   3b67c:	mov	r9, r1
   3b680:	mov	sl, r0
   3b684:	ldr	r3, [r1, #68]	; 0x44
   3b688:	and	r3, r3, r6
   3b68c:	add	r3, r3, r3, lsl #1
   3b690:	lsl	r3, r3, #2
   3b694:	ldr	r2, [r1, #32]
   3b698:	add	r1, r2, r3
   3b69c:	ldr	r8, [r2, r3]
   3b6a0:	cmp	r8, #0
   3b6a4:	ble	3b6ec <__assert_fail@plt+0x29128>
   3b6a8:	ldr	r7, [r1, #8]
   3b6ac:	sub	r7, r7, #4
   3b6b0:	mov	r5, #0
   3b6b4:	b	3b6c4 <__assert_fail@plt+0x29100>
   3b6b8:	add	r5, r5, #1
   3b6bc:	cmp	r8, r5
   3b6c0:	beq	3b6ec <__assert_fail@plt+0x29128>
   3b6c4:	ldr	r4, [r7, #4]!
   3b6c8:	ldr	r3, [r4]
   3b6cc:	cmp	r6, r3
   3b6d0:	bne	3b6b8 <__assert_fail@plt+0x290f4>
   3b6d4:	mov	r1, fp
   3b6d8:	add	r0, r4, #4
   3b6dc:	bl	32e60 <__assert_fail@plt+0x2089c>
   3b6e0:	cmp	r0, #0
   3b6e4:	beq	3b6b8 <__assert_fail@plt+0x290f4>
   3b6e8:	b	3b824 <__assert_fail@plt+0x29260>
   3b6ec:	mov	r1, #1
   3b6f0:	mov	r0, #56	; 0x38
   3b6f4:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3b6f8:	subs	r4, r0, #0
   3b6fc:	beq	3b748 <__assert_fail@plt+0x29184>
   3b700:	add	r5, r4, #4
   3b704:	mov	r1, fp
   3b708:	mov	r0, r5
   3b70c:	bl	34864 <__assert_fail@plt+0x222a0>
   3b710:	cmp	r0, #0
   3b714:	bne	3b740 <__assert_fail@plt+0x2917c>
   3b718:	str	r5, [r4, #40]	; 0x28
   3b71c:	ldr	lr, [fp, #4]
   3b720:	cmp	lr, #0
   3b724:	ble	3b80c <__assert_fail@plt+0x29248>
   3b728:	ldr	r5, [r9]
   3b72c:	ldr	r1, [fp, #8]
   3b730:	add	lr, r1, lr, lsl #2
   3b734:	mov	r7, #65280	; 0xff00
   3b738:	movt	r7, #3
   3b73c:	b	3b7a4 <__assert_fail@plt+0x291e0>
   3b740:	mov	r0, r4
   3b744:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3b748:	mov	r3, #12
   3b74c:	str	r3, [sl]
   3b750:	mov	r4, #0
   3b754:	b	3b824 <__assert_fail@plt+0x29260>
   3b758:	ldr	r2, [r3, #4]
   3b75c:	tst	r7, r2
   3b760:	beq	3b79c <__assert_fail@plt+0x291d8>
   3b764:	ldrb	r2, [r4, #52]	; 0x34
   3b768:	ubfx	r0, r2, #5, #1
   3b76c:	ldrb	ip, [r3, #6]
   3b770:	ubfx	ip, ip, #4, #1
   3b774:	orr	r0, r0, ip
   3b778:	bfi	r2, r0, #5, #1
   3b77c:	strb	r2, [r4, #52]	; 0x34
   3b780:	ldr	r3, [r3, #4]
   3b784:	tst	r7, r3
   3b788:	beq	3b79c <__assert_fail@plt+0x291d8>
   3b78c:	b	3b7fc <__assert_fail@plt+0x29238>
   3b790:	uxtb	r3, r2
   3b794:	orr	r3, r3, #16
   3b798:	strb	r3, [r4, #52]	; 0x34
   3b79c:	cmp	lr, r1
   3b7a0:	beq	3b80c <__assert_fail@plt+0x29248>
   3b7a4:	ldr	r3, [r1], #4
   3b7a8:	add	r3, r5, r3, lsl #3
   3b7ac:	ldrb	r0, [r3, #4]
   3b7b0:	cmp	r0, #1
   3b7b4:	beq	3b758 <__assert_fail@plt+0x29194>
   3b7b8:	ldrb	r2, [r4, #52]	; 0x34
   3b7bc:	ubfx	ip, r2, #5, #1
   3b7c0:	ldrb	r8, [r3, #6]
   3b7c4:	ubfx	r8, r8, #4, #1
   3b7c8:	orr	ip, ip, r8
   3b7cc:	bfi	r2, ip, #5, #1
   3b7d0:	strb	r2, [r4, #52]	; 0x34
   3b7d4:	cmp	r0, #2
   3b7d8:	beq	3b790 <__assert_fail@plt+0x291cc>
   3b7dc:	cmp	r0, #4
   3b7e0:	bne	3b7f4 <__assert_fail@plt+0x29230>
   3b7e4:	ldrb	r3, [r4, #52]	; 0x34
   3b7e8:	orr	r3, r3, #64	; 0x40
   3b7ec:	strb	r3, [r4, #52]	; 0x34
   3b7f0:	b	3b79c <__assert_fail@plt+0x291d8>
   3b7f4:	cmp	r0, #12
   3b7f8:	bne	3b780 <__assert_fail@plt+0x291bc>
   3b7fc:	ldrb	r3, [r4, #52]	; 0x34
   3b800:	orr	r3, r3, #128	; 0x80
   3b804:	strb	r3, [r4, #52]	; 0x34
   3b808:	b	3b79c <__assert_fail@plt+0x291d8>
   3b80c:	mov	r2, r6
   3b810:	mov	r1, r4
   3b814:	mov	r0, r9
   3b818:	bl	34024 <__assert_fail@plt+0x21a60>
   3b81c:	cmp	r0, #0
   3b820:	bne	3b844 <__assert_fail@plt+0x29280>
   3b824:	mov	r0, r4
   3b828:	add	sp, sp, #4
   3b82c:	ldrd	r4, [sp]
   3b830:	ldrd	r6, [sp, #8]
   3b834:	ldrd	r8, [sp, #16]
   3b838:	ldrd	sl, [sp, #24]
   3b83c:	add	sp, sp, #32
   3b840:	pop	{pc}		; (ldr pc, [sp], #4)
   3b844:	mov	r0, r4
   3b848:	bl	35ca8 <__assert_fail@plt+0x236e4>
   3b84c:	b	3b748 <__assert_fail@plt+0x29184>
   3b850:	strd	r4, [sp, #-28]!	; 0xffffffe4
   3b854:	strd	r6, [sp, #8]
   3b858:	strd	r8, [sp, #16]
   3b85c:	str	lr, [sp, #24]
   3b860:	sub	sp, sp, #20
   3b864:	subs	r8, r3, #0
   3b868:	ble	3b914 <__assert_fail@plt+0x29350>
   3b86c:	mov	r7, r2
   3b870:	mov	r9, r0
   3b874:	sub	r4, r1, #4
   3b878:	mov	r5, #0
   3b87c:	b	3b894 <__assert_fail@plt+0x292d0>
   3b880:	ldr	r3, [r7, r5, lsl #2]
   3b884:	str	r3, [r4]
   3b888:	add	r5, r5, #1
   3b88c:	cmp	r8, r5
   3b890:	beq	3b8f8 <__assert_fail@plt+0x29334>
   3b894:	add	r4, r4, #4
   3b898:	ldr	r1, [r4]
   3b89c:	cmp	r1, #0
   3b8a0:	beq	3b880 <__assert_fail@plt+0x292bc>
   3b8a4:	ldr	r2, [r7, r5, lsl #2]
   3b8a8:	cmp	r2, #0
   3b8ac:	beq	3b888 <__assert_fail@plt+0x292c4>
   3b8b0:	add	r2, r2, #4
   3b8b4:	add	r1, r1, #4
   3b8b8:	mov	r0, sp
   3b8bc:	bl	348ec <__assert_fail@plt+0x22328>
   3b8c0:	str	r0, [sp, #12]
   3b8c4:	cmp	r0, #0
   3b8c8:	bne	3b8fc <__assert_fail@plt+0x29338>
   3b8cc:	mov	r2, sp
   3b8d0:	mov	r1, r9
   3b8d4:	add	r0, sp, #12
   3b8d8:	bl	3b628 <__assert_fail@plt+0x29064>
   3b8dc:	str	r0, [r4]
   3b8e0:	ldr	r0, [sp, #8]
   3b8e4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3b8e8:	ldr	r0, [sp, #12]
   3b8ec:	cmp	r0, #0
   3b8f0:	beq	3b888 <__assert_fail@plt+0x292c4>
   3b8f4:	b	3b8fc <__assert_fail@plt+0x29338>
   3b8f8:	mov	r0, #0
   3b8fc:	add	sp, sp, #20
   3b900:	ldrd	r4, [sp]
   3b904:	ldrd	r6, [sp, #8]
   3b908:	ldrd	r8, [sp, #16]
   3b90c:	add	sp, sp, #24
   3b910:	pop	{pc}		; (ldr pc, [sp], #4)
   3b914:	mov	r0, #0
   3b918:	b	3b8fc <__assert_fail@plt+0x29338>
   3b91c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b920:	strd	r6, [sp, #8]
   3b924:	strd	r8, [sp, #16]
   3b928:	strd	sl, [sp, #24]
   3b92c:	str	lr, [sp, #32]
   3b930:	sub	sp, sp, #28
   3b934:	mov	r8, r0
   3b938:	str	r1, [sp]
   3b93c:	mov	r7, r2
   3b940:	str	r3, [sp, #4]
   3b944:	mov	r1, r2
   3b948:	bl	338c0 <__assert_fail@plt+0x212fc>
   3b94c:	cmn	r0, #1
   3b950:	moveq	r0, #0
   3b954:	beq	3bb24 <__assert_fail@plt+0x29560>
   3b958:	ldr	r9, [r8, #84]	; 0x54
   3b95c:	add	r0, r0, #1
   3b960:	add	r0, r0, r0, lsl #1
   3b964:	lsl	fp, r0, #3
   3b968:	b	3b9e8 <__assert_fail@plt+0x29424>
   3b96c:	ldr	r3, [r9, #20]
   3b970:	add	r6, r6, r6, lsl #1
   3b974:	add	r6, r3, r6, lsl #2
   3b978:	ldr	r3, [r6, #8]
   3b97c:	ldr	r5, [r3]
   3b980:	mov	r1, r5
   3b984:	ldr	r6, [sp]
   3b988:	mov	r0, r6
   3b98c:	bl	32ec8 <__assert_fail@plt+0x20904>
   3b990:	cmp	r0, #0
   3b994:	bne	3ba54 <__assert_fail@plt+0x29490>
   3b998:	mov	r1, r5
   3b99c:	add	r0, sp, #8
   3b9a0:	bl	33f90 <__assert_fail@plt+0x219cc>
   3b9a4:	str	r0, [sp, #20]
   3b9a8:	ldr	r3, [sp, #64]	; 0x40
   3b9ac:	ldr	r2, [sp, #4]
   3b9b0:	add	r1, sp, #8
   3b9b4:	mov	r0, r9
   3b9b8:	bl	37514 <__assert_fail@plt+0x24f50>
   3b9bc:	mov	r4, r0
   3b9c0:	add	r1, sp, #8
   3b9c4:	mov	r0, r6
   3b9c8:	bl	36cc8 <__assert_fail@plt+0x24704>
   3b9cc:	mov	r5, r0
   3b9d0:	ldr	r0, [sp, #16]
   3b9d4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3b9d8:	ldr	r0, [sp, #20]
   3b9dc:	orr	r3, r4, r5
   3b9e0:	orrs	r3, r3, r0
   3b9e4:	bne	3b9f4 <__assert_fail@plt+0x29430>
   3b9e8:	ldr	r4, [r8, #116]	; 0x74
   3b9ec:	add	r4, r4, fp
   3b9f0:	b	3ba64 <__assert_fail@plt+0x294a0>
   3b9f4:	cmp	r0, #0
   3b9f8:	bne	3bb24 <__assert_fail@plt+0x29560>
   3b9fc:	cmp	r4, #0
   3ba00:	movne	r0, r4
   3ba04:	moveq	r0, r5
   3ba08:	b	3bb24 <__assert_fail@plt+0x29560>
   3ba0c:	mov	r1, sl
   3ba10:	add	r0, sp, #8
   3ba14:	bl	33f90 <__assert_fail@plt+0x219cc>
   3ba18:	str	r0, [sp, #20]
   3ba1c:	cmp	r0, #0
   3ba20:	bne	3bb24 <__assert_fail@plt+0x29560>
   3ba24:	ldr	r6, [r8, #100]	; 0x64
   3ba28:	add	r2, sp, #8
   3ba2c:	mov	r1, r9
   3ba30:	add	r0, sp, #20
   3ba34:	bl	3b628 <__assert_fail@plt+0x29064>
   3ba38:	str	r0, [r6, r5, lsl #2]
   3ba3c:	ldr	r0, [sp, #16]
   3ba40:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3ba44:	ldr	r3, [r8, #100]	; 0x64
   3ba48:	ldr	r3, [r3, r5, lsl #2]
   3ba4c:	cmp	r3, #0
   3ba50:	beq	3bb10 <__assert_fail@plt+0x2954c>
   3ba54:	add	r4, r4, #24
   3ba58:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3ba5c:	cmp	r3, #0
   3ba60:	beq	3bb20 <__assert_fail@plt+0x2955c>
   3ba64:	ldr	r6, [r4, #-24]	; 0xffffffe8
   3ba68:	mov	r1, r6
   3ba6c:	ldr	r0, [sp]
   3ba70:	bl	32ec8 <__assert_fail@plt+0x20904>
   3ba74:	cmp	r0, #0
   3ba78:	beq	3ba54 <__assert_fail@plt+0x29490>
   3ba7c:	ldr	r5, [r4, #-12]
   3ba80:	add	r5, r7, r5
   3ba84:	ldr	r3, [r4, #-16]
   3ba88:	sub	r5, r5, r3
   3ba8c:	cmp	r7, r5
   3ba90:	beq	3b96c <__assert_fail@plt+0x293a8>
   3ba94:	ldr	r3, [r9, #12]
   3ba98:	ldr	sl, [r3, r6, lsl #2]
   3ba9c:	ldr	r3, [r8, #100]	; 0x64
   3baa0:	ldr	r6, [r3, r5, lsl #2]
   3baa4:	cmp	r6, #0
   3baa8:	beq	3ba0c <__assert_fail@plt+0x29448>
   3baac:	add	r6, r6, #4
   3bab0:	mov	r1, sl
   3bab4:	mov	r0, r6
   3bab8:	bl	32ec8 <__assert_fail@plt+0x20904>
   3babc:	cmp	r0, #0
   3bac0:	bne	3ba54 <__assert_fail@plt+0x29490>
   3bac4:	mov	r1, r6
   3bac8:	add	r0, sp, #8
   3bacc:	bl	34864 <__assert_fail@plt+0x222a0>
   3bad0:	str	r0, [sp, #20]
   3bad4:	mov	r1, sl
   3bad8:	add	r0, sp, #8
   3badc:	bl	36730 <__assert_fail@plt+0x2416c>
   3bae0:	eor	r0, r0, #1
   3bae4:	ldr	r3, [sp, #20]
   3bae8:	cmp	r3, #0
   3baec:	orrne	r0, r0, #1
   3baf0:	tst	r0, #255	; 0xff
   3baf4:	beq	3ba24 <__assert_fail@plt+0x29460>
   3baf8:	ldr	r0, [sp, #16]
   3bafc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3bb00:	ldr	r0, [sp, #20]
   3bb04:	cmp	r0, #0
   3bb08:	moveq	r0, #12
   3bb0c:	b	3bb24 <__assert_fail@plt+0x29560>
   3bb10:	ldr	r0, [sp, #20]
   3bb14:	cmp	r0, #0
   3bb18:	beq	3ba54 <__assert_fail@plt+0x29490>
   3bb1c:	b	3bb24 <__assert_fail@plt+0x29560>
   3bb20:	mov	r0, #0
   3bb24:	add	sp, sp, #28
   3bb28:	ldrd	r4, [sp]
   3bb2c:	ldrd	r6, [sp, #8]
   3bb30:	ldrd	r8, [sp, #16]
   3bb34:	ldrd	sl, [sp, #24]
   3bb38:	add	sp, sp, #32
   3bb3c:	pop	{pc}		; (ldr pc, [sp], #4)
   3bb40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3bb44:	strd	r6, [sp, #8]
   3bb48:	strd	r8, [sp, #16]
   3bb4c:	strd	sl, [sp, #24]
   3bb50:	str	lr, [sp, #32]
   3bb54:	sub	sp, sp, #84	; 0x54
   3bb58:	mov	r4, r0
   3bb5c:	str	r1, [sp, #32]
   3bb60:	mov	r7, r2
   3bb64:	mov	r6, r3
   3bb68:	ldr	r3, [r0, #84]	; 0x54
   3bb6c:	mov	r2, r3
   3bb70:	str	r3, [sp, #24]
   3bb74:	mov	r3, #0
   3bb78:	str	r3, [sp, #76]	; 0x4c
   3bb7c:	ldr	r3, [r2]
   3bb80:	ldr	r3, [r3, r7, lsl #3]
   3bb84:	str	r3, [sp, #28]
   3bb88:	ldr	r5, [r0, #120]	; 0x78
   3bb8c:	ldr	r3, [sp, #124]	; 0x7c
   3bb90:	add	r5, r3, r5
   3bb94:	ldr	r8, [r1, #4]
   3bb98:	cmp	r5, r8
   3bb9c:	bge	3bcec <__assert_fail@plt+0x29728>
   3bba0:	ldr	r3, [sp, #32]
   3bba4:	ldr	r5, [r3]
   3bba8:	cmp	r5, #0
   3bbac:	beq	3c118 <__assert_fail@plt+0x29b54>
   3bbb0:	ldr	r2, [r4, #100]	; 0x64
   3bbb4:	str	r2, [sp, #40]	; 0x28
   3bbb8:	ldr	r2, [r4, #40]	; 0x28
   3bbbc:	str	r2, [sp, #44]	; 0x2c
   3bbc0:	ldr	r9, [r3, #8]
   3bbc4:	str	r9, [r4, #100]	; 0x64
   3bbc8:	str	r5, [r4, #40]	; 0x28
   3bbcc:	str	r4, [sp, #12]
   3bbd0:	ldr	r2, [r4, #88]	; 0x58
   3bbd4:	sub	r1, r5, #1
   3bbd8:	mov	r0, r4
   3bbdc:	bl	370c8 <__assert_fail@plt+0x24b04>
   3bbe0:	mov	r8, r0
   3bbe4:	cmp	r5, r6
   3bbe8:	beq	3c150 <__assert_fail@plt+0x29b8c>
   3bbec:	ldr	sl, [r9, r5, lsl #2]
   3bbf0:	cmp	sl, #0
   3bbf4:	beq	3c19c <__assert_fail@plt+0x29bd8>
   3bbf8:	ldrb	r3, [sl, #52]	; 0x34
   3bbfc:	tst	r3, #64	; 0x40
   3bc00:	bne	3bd44 <__assert_fail@plt+0x29780>
   3bc04:	mov	r3, #0
   3bc08:	str	r3, [sp, #64]	; 0x40
   3bc0c:	str	r3, [sp, #68]	; 0x44
   3bc10:	str	r3, [sp, #72]	; 0x48
   3bc14:	ldrb	r3, [sl, #52]	; 0x34
   3bc18:	tst	r3, #64	; 0x40
   3bc1c:	beq	3bc78 <__assert_fail@plt+0x296b4>
   3bc20:	ldr	r3, [sp, #68]	; 0x44
   3bc24:	cmp	r3, #0
   3bc28:	beq	3bc54 <__assert_fail@plt+0x29690>
   3bc2c:	ldr	r3, [sp, #128]	; 0x80
   3bc30:	str	r3, [sp]
   3bc34:	ldr	r3, [sp, #28]
   3bc38:	mov	r2, r5
   3bc3c:	add	r1, sp, #64	; 0x40
   3bc40:	mov	r0, r4
   3bc44:	bl	3b91c <__assert_fail@plt+0x29358>
   3bc48:	str	r0, [sp, #76]	; 0x4c
   3bc4c:	cmp	r0, #0
   3bc50:	bne	3bd60 <__assert_fail@plt+0x2979c>
   3bc54:	mov	r3, r8
   3bc58:	add	r2, sp, #64	; 0x40
   3bc5c:	ldr	r1, [sp, #24]
   3bc60:	add	r0, sp, #76	; 0x4c
   3bc64:	bl	35d10 <__assert_fail@plt+0x2374c>
   3bc68:	subs	sl, r0, #0
   3bc6c:	beq	3bd70 <__assert_fail@plt+0x297ac>
   3bc70:	ldr	r3, [r4, #100]	; 0x64
   3bc74:	str	sl, [r3, r5, lsl #2]
   3bc78:	ldr	r3, [sp, #124]	; 0x7c
   3bc7c:	cmp	r3, r5
   3bc80:	ble	3bca0 <__assert_fail@plt+0x296dc>
   3bc84:	ldr	r3, [r4, #120]	; 0x78
   3bc88:	cmp	r3, #0
   3bc8c:	addge	r7, r5, #1
   3bc90:	movge	r3, #0
   3bc94:	strge	r3, [sp, #16]
   3bc98:	movge	r9, r3
   3bc9c:	bge	3bf84 <__assert_fail@plt+0x299c0>
   3bca0:	ldr	r0, [sp, #72]	; 0x48
   3bca4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3bca8:	ldr	r3, [r4, #100]	; 0x64
   3bcac:	ldr	r2, [sp, #124]	; 0x7c
   3bcb0:	ldr	r0, [r3, r2, lsl #2]
   3bcb4:	cmp	r0, #0
   3bcb8:	beq	3c0e8 <__assert_fail@plt+0x29b24>
   3bcbc:	ldr	r3, [sp, #32]
   3bcc0:	str	r5, [r3]
   3bcc4:	ldr	r3, [sp, #40]	; 0x28
   3bcc8:	str	r3, [r4, #100]	; 0x64
   3bccc:	ldr	r3, [sp, #44]	; 0x2c
   3bcd0:	str	r3, [r4, #40]	; 0x28
   3bcd4:	ldr	r1, [sp, #120]	; 0x78
   3bcd8:	add	r0, r0, #4
   3bcdc:	bl	32ec8 <__assert_fail@plt+0x20904>
   3bce0:	clz	r0, r0
   3bce4:	lsr	r0, r0, #5
   3bce8:	b	3bd98 <__assert_fail@plt+0x297d4>
   3bcec:	add	r5, r5, #1
   3bcf0:	movw	r3, #65535	; 0xffff
   3bcf4:	movt	r3, #32767	; 0x7fff
   3bcf8:	sub	r3, r3, r8
   3bcfc:	cmp	r3, r5
   3bd00:	blt	3c0d0 <__assert_fail@plt+0x29b0c>
   3bd04:	add	r9, r8, r5
   3bd08:	cmn	r9, #-1073741823	; 0xc0000001
   3bd0c:	bhi	3c0d8 <__assert_fail@plt+0x29b14>
   3bd10:	lsl	r1, r9, #2
   3bd14:	ldr	sl, [sp, #32]
   3bd18:	ldr	r0, [sl, #8]
   3bd1c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3bd20:	cmp	r0, #0
   3bd24:	beq	3c0e0 <__assert_fail@plt+0x29b1c>
   3bd28:	str	r0, [sl, #8]
   3bd2c:	str	r9, [sl, #4]
   3bd30:	lsl	r2, r5, #2
   3bd34:	mov	r1, #0
   3bd38:	add	r0, r0, r8, lsl #2
   3bd3c:	bl	12348 <memset@plt>
   3bd40:	b	3bba0 <__assert_fail@plt+0x295dc>
   3bd44:	add	r1, sl, #4
   3bd48:	add	r0, sp, #64	; 0x40
   3bd4c:	bl	34864 <__assert_fail@plt+0x222a0>
   3bd50:	str	r0, [sp, #76]	; 0x4c
   3bd54:	cmp	r0, #0
   3bd58:	beq	3bc14 <__assert_fail@plt+0x29650>
   3bd5c:	b	3bd98 <__assert_fail@plt+0x297d4>
   3bd60:	ldr	r0, [sp, #72]	; 0x48
   3bd64:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3bd68:	ldr	r0, [sp, #76]	; 0x4c
   3bd6c:	b	3bd98 <__assert_fail@plt+0x297d4>
   3bd70:	ldr	r3, [sp, #76]	; 0x4c
   3bd74:	cmp	r3, #0
   3bd78:	beq	3bc70 <__assert_fail@plt+0x296ac>
   3bd7c:	ldr	r0, [sp, #72]	; 0x48
   3bd80:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3bd84:	ldr	r0, [sp, #76]	; 0x4c
   3bd88:	b	3bd98 <__assert_fail@plt+0x297d4>
   3bd8c:	ldr	r0, [sp, #72]	; 0x48
   3bd90:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3bd94:	ldr	r0, [sp, #76]	; 0x4c
   3bd98:	add	sp, sp, #84	; 0x54
   3bd9c:	ldrd	r4, [sp]
   3bda0:	ldrd	r6, [sp, #8]
   3bda4:	ldrd	r8, [sp, #16]
   3bda8:	ldrd	sl, [sp, #24]
   3bdac:	add	sp, sp, #32
   3bdb0:	pop	{pc}		; (ldr pc, [sp], #4)
   3bdb4:	ldr	r5, [sp, #8]
   3bdb8:	mov	r3, r5
   3bdbc:	ldr	r2, [sp, #12]
   3bdc0:	mov	r0, r6
   3bdc4:	bl	39b70 <__assert_fail@plt+0x275ac>
   3bdc8:	cmp	r0, #1
   3bdcc:	ble	3c038 <__assert_fail@plt+0x29a74>
   3bdd0:	ldr	r3, [r6, #12]
   3bdd4:	ldr	fp, [r3, r7, lsl #2]
   3bdd8:	add	r5, r5, r0
   3bddc:	ldr	r3, [r4, #100]	; 0x64
   3bde0:	ldr	r1, [r3, r5, lsl #2]
   3bde4:	str	r9, [sp, #56]	; 0x38
   3bde8:	cmp	r1, #0
   3bdec:	beq	3be08 <__assert_fail@plt+0x29844>
   3bdf0:	add	r1, r1, #4
   3bdf4:	add	r0, sp, #52	; 0x34
   3bdf8:	bl	36cc8 <__assert_fail@plt+0x24704>
   3bdfc:	str	r0, [sp, #48]	; 0x30
   3be00:	cmp	r0, #0
   3be04:	bne	3beb0 <__assert_fail@plt+0x298ec>
   3be08:	mov	r1, fp
   3be0c:	add	r0, sp, #52	; 0x34
   3be10:	bl	36730 <__assert_fail@plt+0x2416c>
   3be14:	cmp	r0, #0
   3be18:	beq	3c00c <__assert_fail@plt+0x29a48>
   3be1c:	ldr	fp, [r4, #100]	; 0x64
   3be20:	add	r2, sp, #52	; 0x34
   3be24:	mov	r1, r6
   3be28:	add	r0, sp, #48	; 0x30
   3be2c:	bl	3b628 <__assert_fail@plt+0x29064>
   3be30:	str	r0, [fp, r5, lsl #2]
   3be34:	ldr	r3, [r4, #100]	; 0x64
   3be38:	ldr	r3, [r3, r5, lsl #2]
   3be3c:	cmp	r3, #0
   3be40:	beq	3c018 <__assert_fail@plt+0x29a54>
   3be44:	ldr	r3, [r6, #12]
   3be48:	ldr	r1, [r3, r7, lsl #2]
   3be4c:	add	r0, sp, #64	; 0x40
   3be50:	bl	36730 <__assert_fail@plt+0x2416c>
   3be54:	cmp	r0, #0
   3be58:	beq	3c044 <__assert_fail@plt+0x29a80>
   3be5c:	add	r8, r8, #1
   3be60:	ldr	r3, [sl, #20]
   3be64:	cmp	r8, r3
   3be68:	bge	3c064 <__assert_fail@plt+0x29aa0>
   3be6c:	ldr	r3, [sl, #24]
   3be70:	ldr	r1, [r3, r8, lsl #2]
   3be74:	mov	r7, r1
   3be78:	lsl	fp, r1, #3
   3be7c:	ldr	r3, [r6]
   3be80:	add	r3, r3, fp
   3be84:	ldrb	r3, [r3, #6]
   3be88:	tst	r3, #16
   3be8c:	bne	3bdb4 <__assert_fail@plt+0x297f0>
   3be90:	ldr	r1, [r6]
   3be94:	ldr	r2, [sp, #8]
   3be98:	add	r1, r1, fp
   3be9c:	mov	r0, r4
   3bea0:	bl	371d4 <__assert_fail@plt+0x24c10>
   3bea4:	cmp	r0, #0
   3bea8:	beq	3be5c <__assert_fail@plt+0x29898>
   3beac:	b	3be44 <__assert_fail@plt+0x29880>
   3beb0:	ldr	r7, [sp, #36]	; 0x24
   3beb4:	ldr	r0, [sp, #60]	; 0x3c
   3beb8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3bebc:	ldr	r3, [sp, #48]	; 0x30
   3bec0:	str	r3, [sp, #76]	; 0x4c
   3bec4:	cmp	r3, #0
   3bec8:	bne	3c054 <__assert_fail@plt+0x29a90>
   3becc:	mov	r5, r7
   3bed0:	ldr	r3, [sp, #68]	; 0x44
   3bed4:	cmp	r3, #0
   3bed8:	beq	3bf24 <__assert_fail@plt+0x29960>
   3bedc:	ldr	r3, [sp, #128]	; 0x80
   3bee0:	ldr	r2, [sp, #28]
   3bee4:	add	r1, sp, #64	; 0x40
   3bee8:	ldr	r0, [sp, #24]
   3beec:	bl	37514 <__assert_fail@plt+0x24f50>
   3bef0:	str	r0, [sp, #76]	; 0x4c
   3bef4:	cmp	r0, #0
   3bef8:	bne	3c078 <__assert_fail@plt+0x29ab4>
   3befc:	ldr	r3, [sp, #128]	; 0x80
   3bf00:	str	r3, [sp]
   3bf04:	ldr	r3, [sp, #28]
   3bf08:	mov	r2, r7
   3bf0c:	add	r1, sp, #64	; 0x40
   3bf10:	mov	r0, r4
   3bf14:	bl	3b91c <__assert_fail@plt+0x29358>
   3bf18:	str	r0, [sp, #76]	; 0x4c
   3bf1c:	cmp	r0, #0
   3bf20:	bne	3c088 <__assert_fail@plt+0x29ac4>
   3bf24:	ldr	r2, [r4, #88]	; 0x58
   3bf28:	ldr	r1, [sp, #8]
   3bf2c:	ldr	r0, [sp, #12]
   3bf30:	bl	370c8 <__assert_fail@plt+0x24b04>
   3bf34:	mov	r3, r0
   3bf38:	add	r2, sp, #64	; 0x40
   3bf3c:	ldr	r1, [sp, #24]
   3bf40:	add	r0, sp, #76	; 0x4c
   3bf44:	bl	35d10 <__assert_fail@plt+0x2374c>
   3bf48:	subs	sl, r0, #0
   3bf4c:	beq	3c098 <__assert_fail@plt+0x29ad4>
   3bf50:	ldr	r3, [r4, #100]	; 0x64
   3bf54:	ldr	r2, [sp, #20]
   3bf58:	str	sl, [r3, r2]
   3bf5c:	mov	r3, #0
   3bf60:	str	r3, [sp, #16]
   3bf64:	ldr	r3, [sp, #124]	; 0x7c
   3bf68:	cmp	r3, r5
   3bf6c:	ble	3bca0 <__assert_fail@plt+0x296dc>
   3bf70:	add	r7, r7, #1
   3bf74:	ldr	r3, [r4, #120]	; 0x78
   3bf78:	ldr	r2, [sp, #16]
   3bf7c:	cmp	r2, r3
   3bf80:	bgt	3bca0 <__assert_fail@plt+0x296dc>
   3bf84:	sub	r3, r7, #1
   3bf88:	str	r3, [sp, #8]
   3bf8c:	str	r9, [sp, #68]	; 0x44
   3bf90:	lsl	r3, r7, #2
   3bf94:	str	r3, [sp, #20]
   3bf98:	ldr	r3, [r4, #100]	; 0x64
   3bf9c:	ldr	r1, [r3, r7, lsl #2]
   3bfa0:	cmp	r1, #0
   3bfa4:	beq	3c108 <__assert_fail@plt+0x29b44>
   3bfa8:	add	r1, r1, #4
   3bfac:	add	r0, sp, #64	; 0x40
   3bfb0:	bl	36cc8 <__assert_fail@plt+0x24704>
   3bfb4:	str	r0, [sp, #76]	; 0x4c
   3bfb8:	cmp	r0, #0
   3bfbc:	bne	3bd8c <__assert_fail@plt+0x297c8>
   3bfc0:	cmp	sl, #0
   3bfc4:	beq	3becc <__assert_fail@plt+0x29908>
   3bfc8:	ldr	r6, [r4, #84]	; 0x54
   3bfcc:	str	r9, [sp, #48]	; 0x30
   3bfd0:	str	r9, [sp, #52]	; 0x34
   3bfd4:	str	r9, [sp, #56]	; 0x38
   3bfd8:	str	r9, [sp, #60]	; 0x3c
   3bfdc:	ldr	r3, [sl, #20]
   3bfe0:	cmp	r3, #0
   3bfe4:	ble	3c068 <__assert_fail@plt+0x29aa4>
   3bfe8:	ldr	r3, [sl, #24]
   3bfec:	ldr	r1, [r3]
   3bff0:	lsl	fp, r1, #3
   3bff4:	ldr	r3, [r6]
   3bff8:	add	r3, r3, fp
   3bffc:	mov	r8, #0
   3c000:	str	r7, [sp, #36]	; 0x24
   3c004:	mov	r7, r1
   3c008:	b	3be84 <__assert_fail@plt+0x298c0>
   3c00c:	ldr	r0, [sp, #60]	; 0x3c
   3c010:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c014:	b	3c04c <__assert_fail@plt+0x29a88>
   3c018:	ldr	r3, [sp, #48]	; 0x30
   3c01c:	cmp	r3, #0
   3c020:	beq	3be44 <__assert_fail@plt+0x29880>
   3c024:	ldr	r7, [sp, #36]	; 0x24
   3c028:	ldr	r0, [sp, #60]	; 0x3c
   3c02c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c030:	ldr	r3, [sp, #48]	; 0x30
   3c034:	b	3bec0 <__assert_fail@plt+0x298fc>
   3c038:	cmp	r0, #0
   3c03c:	beq	3be90 <__assert_fail@plt+0x298cc>
   3c040:	b	3be44 <__assert_fail@plt+0x29880>
   3c044:	ldr	r0, [sp, #60]	; 0x3c
   3c048:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c04c:	mov	r3, #12
   3c050:	str	r3, [sp, #76]	; 0x4c
   3c054:	ldr	r0, [sp, #72]	; 0x48
   3c058:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c05c:	ldr	r0, [sp, #76]	; 0x4c
   3c060:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c064:	ldr	r7, [sp, #36]	; 0x24
   3c068:	ldr	r0, [sp, #60]	; 0x3c
   3c06c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c070:	str	r9, [sp, #76]	; 0x4c
   3c074:	b	3becc <__assert_fail@plt+0x29908>
   3c078:	ldr	r0, [sp, #72]	; 0x48
   3c07c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c080:	ldr	r0, [sp, #76]	; 0x4c
   3c084:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c088:	ldr	r0, [sp, #72]	; 0x48
   3c08c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c090:	ldr	r0, [sp, #76]	; 0x4c
   3c094:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c098:	ldr	r3, [sp, #76]	; 0x4c
   3c09c:	cmp	r3, #0
   3c0a0:	bne	3c0c0 <__assert_fail@plt+0x29afc>
   3c0a4:	ldr	r3, [r4, #100]	; 0x64
   3c0a8:	ldr	r2, [sp, #20]
   3c0ac:	str	r9, [r3, r2]
   3c0b0:	ldr	r3, [sp, #16]
   3c0b4:	add	r3, r3, #1
   3c0b8:	str	r3, [sp, #16]
   3c0bc:	b	3bf64 <__assert_fail@plt+0x299a0>
   3c0c0:	ldr	r0, [sp, #72]	; 0x48
   3c0c4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c0c8:	ldr	r0, [sp, #76]	; 0x4c
   3c0cc:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c0d0:	mov	r0, #12
   3c0d4:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c0d8:	mov	r0, #12
   3c0dc:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c0e0:	mov	r0, #12
   3c0e4:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c0e8:	ldr	r3, [sp, #32]
   3c0ec:	str	r5, [r3]
   3c0f0:	ldr	r3, [sp, #40]	; 0x28
   3c0f4:	str	r3, [r4, #100]	; 0x64
   3c0f8:	ldr	r3, [sp, #44]	; 0x2c
   3c0fc:	str	r3, [r4, #40]	; 0x28
   3c100:	mov	r0, #1
   3c104:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c108:	cmp	sl, #0
   3c10c:	bne	3bfc8 <__assert_fail@plt+0x29a04>
   3c110:	mov	r5, r7
   3c114:	b	3bf24 <__assert_fail@plt+0x29960>
   3c118:	ldr	r3, [r4, #100]	; 0x64
   3c11c:	str	r3, [sp, #40]	; 0x28
   3c120:	ldr	r3, [r4, #40]	; 0x28
   3c124:	str	r3, [sp, #44]	; 0x2c
   3c128:	ldr	r3, [sp, #32]
   3c12c:	ldr	r3, [r3, #8]
   3c130:	str	r3, [r4, #100]	; 0x64
   3c134:	str	r6, [r4, #40]	; 0x28
   3c138:	str	r4, [sp, #12]
   3c13c:	ldr	r2, [r4, #88]	; 0x58
   3c140:	sub	r1, r6, #1
   3c144:	mov	r0, r4
   3c148:	bl	370c8 <__assert_fail@plt+0x24b04>
   3c14c:	mov	r8, r0
   3c150:	mov	r1, r7
   3c154:	add	r0, sp, #64	; 0x40
   3c158:	bl	33f90 <__assert_fail@plt+0x219cc>
   3c15c:	str	r0, [sp, #76]	; 0x4c
   3c160:	cmp	r0, #0
   3c164:	bne	3bd98 <__assert_fail@plt+0x297d4>
   3c168:	ldr	r3, [sp, #128]	; 0x80
   3c16c:	ldr	r2, [sp, #28]
   3c170:	add	r1, sp, #64	; 0x40
   3c174:	ldr	r0, [sp, #24]
   3c178:	bl	37514 <__assert_fail@plt+0x24f50>
   3c17c:	str	r0, [sp, #76]	; 0x4c
   3c180:	cmp	r0, #0
   3c184:	moveq	r5, r6
   3c188:	beq	3bc20 <__assert_fail@plt+0x2965c>
   3c18c:	ldr	r0, [sp, #72]	; 0x48
   3c190:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c194:	ldr	r0, [sp, #76]	; 0x4c
   3c198:	b	3bd98 <__assert_fail@plt+0x297d4>
   3c19c:	mov	r3, #0
   3c1a0:	str	r3, [sp, #64]	; 0x40
   3c1a4:	str	r3, [sp, #68]	; 0x44
   3c1a8:	str	r3, [sp, #72]	; 0x48
   3c1ac:	b	3bc78 <__assert_fail@plt+0x296b4>
   3c1b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c1b4:	strd	r6, [sp, #8]
   3c1b8:	strd	r8, [sp, #16]
   3c1bc:	str	sl, [sp, #24]
   3c1c0:	str	lr, [sp, #28]
   3c1c4:	sub	sp, sp, #16
   3c1c8:	mov	r4, r0
   3c1cc:	mov	r8, r1
   3c1d0:	mov	r6, r2
   3c1d4:	mov	r9, r3
   3c1d8:	ldr	r5, [sp, #48]	; 0x30
   3c1dc:	mov	r1, r2
   3c1e0:	mov	r3, #8
   3c1e4:	str	r3, [sp, #8]
   3c1e8:	str	r5, [sp, #4]
   3c1ec:	str	r9, [sp]
   3c1f0:	ldr	r3, [r2, #4]
   3c1f4:	ldr	r2, [r1], #8
   3c1f8:	bl	3bb40 <__assert_fail@plt+0x2957c>
   3c1fc:	cmp	r0, #0
   3c200:	beq	3c220 <__assert_fail@plt+0x29c5c>
   3c204:	add	sp, sp, #16
   3c208:	ldrd	r4, [sp]
   3c20c:	ldrd	r6, [sp, #8]
   3c210:	ldrd	r8, [sp, #16]
   3c214:	ldr	sl, [sp, #24]
   3c218:	add	sp, sp, #28
   3c21c:	pop	{pc}		; (ldr pc, [sp], #4)
   3c220:	ldr	sl, [r8]
   3c224:	ldr	r7, [r6, #4]
   3c228:	ldr	r1, [r4, #112]	; 0x70
   3c22c:	ldr	r3, [r4, #108]	; 0x6c
   3c230:	cmp	r3, r1
   3c234:	bge	3c320 <__assert_fail@plt+0x29d5c>
   3c238:	ldr	r3, [r4, #108]	; 0x6c
   3c23c:	cmp	r3, #0
   3c240:	ble	3c268 <__assert_fail@plt+0x29ca4>
   3c244:	add	r3, r3, r3, lsl #1
   3c248:	lsl	r3, r3, #3
   3c24c:	sub	r3, r3, #24
   3c250:	ldr	r2, [r4, #116]	; 0x74
   3c254:	add	r3, r2, r3
   3c258:	ldr	r2, [r3, #4]
   3c25c:	cmp	r5, r2
   3c260:	moveq	r2, #1
   3c264:	strbeq	r2, [r3, #20]
   3c268:	ldr	r3, [r4, #108]	; 0x6c
   3c26c:	ldr	r2, [r4, #116]	; 0x74
   3c270:	add	r3, r3, r3, lsl #1
   3c274:	str	r9, [r2, r3, lsl #3]
   3c278:	ldr	r3, [r4, #108]	; 0x6c
   3c27c:	ldr	r2, [r4, #116]	; 0x74
   3c280:	add	r3, r3, r3, lsl #1
   3c284:	add	r3, r2, r3, lsl #3
   3c288:	str	r5, [r3, #4]
   3c28c:	ldr	r3, [r4, #108]	; 0x6c
   3c290:	ldr	r2, [r4, #116]	; 0x74
   3c294:	add	r3, r3, r3, lsl #1
   3c298:	add	r3, r2, r3, lsl #3
   3c29c:	str	sl, [r3, #8]
   3c2a0:	ldr	r3, [r4, #108]	; 0x6c
   3c2a4:	ldr	r2, [r4, #116]	; 0x74
   3c2a8:	add	r3, r3, r3, lsl #1
   3c2ac:	add	r3, r2, r3, lsl #3
   3c2b0:	str	r7, [r3, #12]
   3c2b4:	ldr	r3, [r4, #108]	; 0x6c
   3c2b8:	ldr	r2, [r4, #116]	; 0x74
   3c2bc:	add	r3, r3, r3, lsl #1
   3c2c0:	add	r3, r2, r3, lsl #3
   3c2c4:	cmp	sl, r7
   3c2c8:	movne	r2, #0
   3c2cc:	mvneq	r2, #0
   3c2d0:	str	r2, [r3, #16]
   3c2d4:	ldr	r2, [r4, #116]	; 0x74
   3c2d8:	ldr	r3, [r4, #108]	; 0x6c
   3c2dc:	add	r1, r3, #1
   3c2e0:	str	r1, [r4, #108]	; 0x6c
   3c2e4:	add	r3, r3, r3, lsl #1
   3c2e8:	add	r3, r2, r3, lsl #3
   3c2ec:	mov	r2, #0
   3c2f0:	strb	r2, [r3, #20]
   3c2f4:	sub	r7, r7, sl
   3c2f8:	ldr	r3, [r4, #120]	; 0x78
   3c2fc:	cmp	r3, r7
   3c300:	strlt	r7, [r4, #120]	; 0x78
   3c304:	ldr	r1, [r6, #4]
   3c308:	add	r5, r5, r1
   3c30c:	ldr	r1, [r8]
   3c310:	sub	r1, r5, r1
   3c314:	mov	r0, r4
   3c318:	bl	37478 <__assert_fail@plt+0x24eb4>
   3c31c:	b	3c204 <__assert_fail@plt+0x29c40>
   3c320:	add	r1, r1, r1, lsl #1
   3c324:	lsl	r1, r1, #4
   3c328:	ldr	r0, [r4, #116]	; 0x74
   3c32c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3c330:	cmp	r0, #0
   3c334:	beq	3c36c <__assert_fail@plt+0x29da8>
   3c338:	str	r0, [r4, #116]	; 0x74
   3c33c:	ldr	r2, [r4, #112]	; 0x70
   3c340:	add	r2, r2, r2, lsl #1
   3c344:	ldr	r3, [r4, #108]	; 0x6c
   3c348:	add	r3, r3, r3, lsl #1
   3c34c:	lsl	r2, r2, #3
   3c350:	mov	r1, #0
   3c354:	add	r0, r0, r3, lsl #3
   3c358:	bl	12348 <memset@plt>
   3c35c:	ldr	r3, [r4, #112]	; 0x70
   3c360:	lsl	r3, r3, #1
   3c364:	str	r3, [r4, #112]	; 0x70
   3c368:	b	3c238 <__assert_fail@plt+0x29c74>
   3c36c:	ldr	r0, [r4, #116]	; 0x74
   3c370:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c374:	mov	r0, #12
   3c378:	b	3c204 <__assert_fail@plt+0x29c40>
   3c37c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c380:	strd	r6, [sp, #8]
   3c384:	strd	r8, [sp, #16]
   3c388:	strd	sl, [sp, #24]
   3c38c:	str	lr, [sp, #32]
   3c390:	sub	sp, sp, #84	; 0x54
   3c394:	ldr	fp, [r0, #84]	; 0x54
   3c398:	ldr	r2, [r0, #40]	; 0x28
   3c39c:	str	r2, [sp, #28]
   3c3a0:	ldr	r3, [r1, #4]
   3c3a4:	cmp	r3, #0
   3c3a8:	ble	3ca64 <__assert_fail@plt+0x2a4a0>
   3c3ac:	mov	sl, r0
   3c3b0:	lsl	r3, r2, #2
   3c3b4:	str	r3, [sp, #40]	; 0x28
   3c3b8:	mov	r3, #0
   3c3bc:	str	r3, [sp, #20]
   3c3c0:	mov	r7, r1
   3c3c4:	b	3c414 <__assert_fail@plt+0x29e50>
   3c3c8:	tst	r3, #8
   3c3cc:	beq	3c3d8 <__assert_fail@plt+0x29e14>
   3c3d0:	tst	r0, #1
   3c3d4:	bne	3c3f8 <__assert_fail@plt+0x29e34>
   3c3d8:	tst	r3, #32
   3c3dc:	beq	3c3e8 <__assert_fail@plt+0x29e24>
   3c3e0:	tst	r0, #2
   3c3e4:	beq	3c3f8 <__assert_fail@plt+0x29e34>
   3c3e8:	tst	r3, #128	; 0x80
   3c3ec:	beq	3c480 <__assert_fail@plt+0x29ebc>
   3c3f0:	tst	r0, #8
   3c3f4:	bne	3c480 <__assert_fail@plt+0x29ebc>
   3c3f8:	ldr	r3, [sp, #20]
   3c3fc:	add	r3, r3, #1
   3c400:	mov	r2, r3
   3c404:	str	r3, [sp, #20]
   3c408:	ldr	r3, [r7, #4]
   3c40c:	cmp	r3, r2
   3c410:	ble	3ca64 <__assert_fail@plt+0x2a4a0>
   3c414:	ldr	r3, [r7, #8]
   3c418:	ldr	r2, [sp, #20]
   3c41c:	ldr	r8, [r3, r2, lsl #2]
   3c420:	ldr	r4, [fp]
   3c424:	add	r4, r4, r8, lsl #3
   3c428:	ldrb	r3, [r4, #4]
   3c42c:	cmp	r3, #4
   3c430:	bne	3c3f8 <__assert_fail@plt+0x29e34>
   3c434:	ldr	r2, [r4, #4]
   3c438:	mov	r3, #65280	; 0xff00
   3c43c:	movt	r3, #3
   3c440:	and	r3, r3, r2
   3c444:	cmp	r3, #0
   3c448:	beq	3c480 <__assert_fail@plt+0x29ebc>
   3c44c:	ldr	r2, [sl, #88]	; 0x58
   3c450:	ldr	r1, [sp, #28]
   3c454:	mov	r0, sl
   3c458:	bl	370c8 <__assert_fail@plt+0x24b04>
   3c45c:	ldr	r3, [r4, #4]
   3c460:	ubfx	r3, r3, #8, #10
   3c464:	tst	r3, #4
   3c468:	beq	3c3c8 <__assert_fail@plt+0x29e04>
   3c46c:	tst	r0, #1
   3c470:	beq	3c3f8 <__assert_fail@plt+0x29e34>
   3c474:	tst	r3, #8
   3c478:	beq	3c3d8 <__assert_fail@plt+0x29e14>
   3c47c:	b	3c3f8 <__assert_fail@plt+0x29e34>
   3c480:	ldr	r9, [sl, #108]	; 0x6c
   3c484:	ldr	r1, [sp, #28]
   3c488:	mov	r0, sl
   3c48c:	bl	338c0 <__assert_fail@plt+0x212fc>
   3c490:	cmn	r0, #1
   3c494:	beq	3c4c4 <__assert_fail@plt+0x29f00>
   3c498:	add	r0, r0, #1
   3c49c:	add	r0, r0, r0, lsl #1
   3c4a0:	ldr	r3, [sl, #116]	; 0x74
   3c4a4:	add	r3, r3, r0, lsl #3
   3c4a8:	ldr	r2, [r3, #-24]	; 0xffffffe8
   3c4ac:	cmp	r8, r2
   3c4b0:	beq	3c834 <__assert_fail@plt+0x2a270>
   3c4b4:	add	r3, r3, #24
   3c4b8:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   3c4bc:	cmp	r2, #0
   3c4c0:	bne	3c4a8 <__assert_fail@plt+0x29ee4>
   3c4c4:	ldr	r3, [sl, #84]	; 0x54
   3c4c8:	str	r3, [sp, #44]	; 0x2c
   3c4cc:	ldr	r3, [r3]
   3c4d0:	ldr	r3, [r3, r8, lsl #3]
   3c4d4:	str	r3, [sp, #48]	; 0x30
   3c4d8:	ldr	r3, [sl, #124]	; 0x7c
   3c4dc:	cmp	r3, #0
   3c4e0:	ble	3c834 <__assert_fail@plt+0x2a270>
   3c4e4:	ldr	r3, [sl, #4]
   3c4e8:	mov	r2, #0
   3c4ec:	str	r2, [sp, #32]
   3c4f0:	str	fp, [sp, #52]	; 0x34
   3c4f4:	str	r8, [sp, #36]	; 0x24
   3c4f8:	str	r9, [sp, #56]	; 0x38
   3c4fc:	mov	fp, r3
   3c500:	str	r7, [sp, #60]	; 0x3c
   3c504:	b	3c5dc <__assert_fail@plt+0x2a018>
   3c508:	mov	r2, r5
   3c50c:	ldr	r3, [sp, #24]
   3c510:	add	r1, fp, r3
   3c514:	add	r0, fp, r7
   3c518:	bl	12060 <memcmp@plt>
   3c51c:	cmp	r0, #0
   3c520:	bne	3c5b4 <__assert_fail@plt+0x29ff0>
   3c524:	add	r7, r7, r5
   3c528:	ldr	r3, [sp, #28]
   3c52c:	str	r3, [sp]
   3c530:	ldr	r3, [sp, #36]	; 0x24
   3c534:	mov	r2, r8
   3c538:	mov	r1, r4
   3c53c:	mov	r0, sl
   3c540:	bl	3c1b0 <__assert_fail@plt+0x29bec>
   3c544:	ldr	fp, [sl, #4]
   3c548:	cmp	r0, #1
   3c54c:	bhi	3c868 <__assert_fail@plt+0x2a2a4>
   3c550:	add	r6, r6, #1
   3c554:	str	r9, [sp, #24]
   3c558:	ldr	r3, [r4, #16]
   3c55c:	cmp	r6, r3
   3c560:	bge	3c628 <__assert_fail@plt+0x2a064>
   3c564:	ldr	r3, [r4, #20]
   3c568:	ldr	r8, [r3, r6, lsl #2]
   3c56c:	ldr	r9, [r8, #4]
   3c570:	ldr	r3, [sp, #24]
   3c574:	sub	r5, r9, r3
   3c578:	cmp	r5, #0
   3c57c:	ble	3c524 <__assert_fail@plt+0x29f60>
   3c580:	add	r1, r5, r7
   3c584:	ldr	r3, [sl, #28]
   3c588:	cmp	r1, r3
   3c58c:	ble	3c508 <__assert_fail@plt+0x29f44>
   3c590:	ldr	r3, [sl, #48]	; 0x30
   3c594:	cmp	r1, r3
   3c598:	bgt	3c5b4 <__assert_fail@plt+0x29ff0>
   3c59c:	mov	r0, sl
   3c5a0:	bl	37478 <__assert_fail@plt+0x24eb4>
   3c5a4:	cmp	r0, #0
   3c5a8:	bne	3ca74 <__assert_fail@plt+0x2a4b0>
   3c5ac:	ldr	fp, [sl, #4]
   3c5b0:	b	3c508 <__assert_fail@plt+0x29f44>
   3c5b4:	ldr	r3, [r4, #16]
   3c5b8:	cmp	r3, r6
   3c5bc:	ble	3c624 <__assert_fail@plt+0x2a060>
   3c5c0:	ldr	r3, [sp, #32]
   3c5c4:	add	r3, r3, #1
   3c5c8:	mov	r2, r3
   3c5cc:	str	r3, [sp, #32]
   3c5d0:	ldr	r3, [sl, #124]	; 0x7c
   3c5d4:	cmp	r2, r3
   3c5d8:	bge	3c824 <__assert_fail@plt+0x2a260>
   3c5dc:	ldr	r3, [sl, #132]	; 0x84
   3c5e0:	ldr	r2, [sp, #32]
   3c5e4:	ldr	r4, [r3, r2, lsl #2]
   3c5e8:	ldr	r2, [r4, #4]
   3c5ec:	ldr	r3, [sp, #44]	; 0x2c
   3c5f0:	ldr	r3, [r3]
   3c5f4:	ldr	r3, [r3, r2, lsl #3]
   3c5f8:	ldr	r2, [sp, #48]	; 0x30
   3c5fc:	cmp	r2, r3
   3c600:	bne	3c5c0 <__assert_fail@plt+0x29ffc>
   3c604:	ldr	r3, [r4]
   3c608:	str	r3, [sp, #24]
   3c60c:	ldr	r3, [r4, #16]
   3c610:	cmp	r3, #0
   3c614:	ble	3c648 <__assert_fail@plt+0x2a084>
   3c618:	ldr	r7, [sp, #28]
   3c61c:	mov	r6, #0
   3c620:	b	3c564 <__assert_fail@plt+0x29fa0>
   3c624:	ldr	r9, [sp, #24]
   3c628:	cmp	r6, #0
   3c62c:	addgt	r9, r9, #1
   3c630:	ldr	r3, [sp, #28]
   3c634:	cmp	r3, r9
   3c638:	blt	3c5c0 <__assert_fail@plt+0x29ffc>
   3c63c:	mov	r8, #1
   3c640:	ldr	r6, [sp, #48]	; 0x30
   3c644:	b	3c768 <__assert_fail@plt+0x2a1a4>
   3c648:	ldr	r7, [sp, #28]
   3c64c:	ldr	r9, [sp, #24]
   3c650:	b	3c630 <__assert_fail@plt+0x2a06c>
   3c654:	ldr	r3, [sl, #48]	; 0x30
   3c658:	cmp	r3, r7
   3c65c:	ble	3c5c0 <__assert_fail@plt+0x29ffc>
   3c660:	add	r1, r7, #1
   3c664:	mov	r0, sl
   3c668:	bl	34cec <__assert_fail@plt+0x22728>
   3c66c:	cmp	r0, #0
   3c670:	bne	3ca74 <__assert_fail@plt+0x2a4b0>
   3c674:	ldr	fp, [sl, #4]
   3c678:	b	3c784 <__assert_fail@plt+0x2a1c0>
   3c67c:	add	r3, r3, #1
   3c680:	cmp	ip, r3
   3c684:	beq	3c758 <__assert_fail@plt+0x2a194>
   3c688:	ldr	r5, [r2, #4]!
   3c68c:	add	r1, r0, r5, lsl #3
   3c690:	ldrb	r1, [r1, #4]
   3c694:	cmp	r1, #9
   3c698:	bne	3c67c <__assert_fail@plt+0x2a0b8>
   3c69c:	ldr	r1, [r0, r5, lsl #3]
   3c6a0:	cmp	r6, r1
   3c6a4:	bne	3c67c <__assert_fail@plt+0x2a0b8>
   3c6a8:	cmn	r5, #1
   3c6ac:	beq	3c758 <__assert_fail@plt+0x2a194>
   3c6b0:	ldr	r3, [r4, #8]
   3c6b4:	cmp	r3, #0
   3c6b8:	beq	3c7d4 <__assert_fail@plt+0x2a210>
   3c6bc:	ldr	r3, [r4]
   3c6c0:	ldr	r2, [r4, #4]
   3c6c4:	ldr	r1, [r4, #8]
   3c6c8:	mov	r0, #9
   3c6cc:	str	r0, [sp, #8]
   3c6d0:	str	r9, [sp, #4]
   3c6d4:	str	r5, [sp]
   3c6d8:	mov	r0, sl
   3c6dc:	bl	3bb40 <__assert_fail@plt+0x2957c>
   3c6e0:	cmp	r0, #1
   3c6e4:	beq	3c758 <__assert_fail@plt+0x2a194>
   3c6e8:	cmp	r0, #0
   3c6ec:	bne	3ca74 <__assert_fail@plt+0x2a4b0>
   3c6f0:	ldr	r3, [r4, #12]
   3c6f4:	ldr	r2, [r4, #16]
   3c6f8:	cmp	r2, r3
   3c6fc:	beq	3c7fc <__assert_fail@plt+0x2a238>
   3c700:	mov	r1, #20
   3c704:	mov	r0, r8
   3c708:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3c70c:	subs	r2, r0, #0
   3c710:	beq	3ca70 <__assert_fail@plt+0x2a4ac>
   3c714:	ldr	r1, [r4, #16]
   3c718:	ldr	r3, [r4, #20]
   3c71c:	str	r2, [r3, r1, lsl #2]
   3c720:	str	r5, [r2]
   3c724:	str	r9, [r2, #4]
   3c728:	ldr	r3, [r4, #16]
   3c72c:	add	r3, r3, #1
   3c730:	str	r3, [r4, #16]
   3c734:	ldr	r3, [sp, #28]
   3c738:	str	r3, [sp]
   3c73c:	ldr	r3, [sp, #36]	; 0x24
   3c740:	mov	r1, r4
   3c744:	mov	r0, sl
   3c748:	bl	3c1b0 <__assert_fail@plt+0x29bec>
   3c74c:	ldr	fp, [sl, #4]
   3c750:	cmp	r0, #1
   3c754:	bhi	3c868 <__assert_fail@plt+0x2a2a4>
   3c758:	add	r9, r9, #1
   3c75c:	ldr	r3, [sp, #28]
   3c760:	cmp	r3, r9
   3c764:	blt	3c5c0 <__assert_fail@plt+0x29ffc>
   3c768:	ldr	r3, [r4]
   3c76c:	sub	r3, r9, r3
   3c770:	cmp	r3, #0
   3c774:	ble	3c7a0 <__assert_fail@plt+0x2a1dc>
   3c778:	ldr	r3, [sl, #28]
   3c77c:	cmp	r3, r7
   3c780:	ble	3c654 <__assert_fail@plt+0x2a090>
   3c784:	add	r1, r7, #1
   3c788:	add	r3, fp, r9
   3c78c:	ldrb	r2, [fp, r7]
   3c790:	ldrb	r3, [r3, #-1]
   3c794:	cmp	r2, r3
   3c798:	bne	3c5c0 <__assert_fail@plt+0x29ffc>
   3c79c:	mov	r7, r1
   3c7a0:	ldr	r3, [sl, #100]	; 0x64
   3c7a4:	ldr	r3, [r3, r9, lsl #2]
   3c7a8:	cmp	r3, #0
   3c7ac:	beq	3c758 <__assert_fail@plt+0x2a194>
   3c7b0:	ldr	ip, [r3, #8]
   3c7b4:	cmp	ip, #0
   3c7b8:	ble	3c758 <__assert_fail@plt+0x2a194>
   3c7bc:	ldr	r2, [sp, #44]	; 0x2c
   3c7c0:	ldr	r0, [r2]
   3c7c4:	ldr	r2, [r3, #12]
   3c7c8:	sub	r2, r2, #4
   3c7cc:	mov	r3, #0
   3c7d0:	b	3c688 <__assert_fail@plt+0x2a0c4>
   3c7d4:	ldr	r1, [r4]
   3c7d8:	sub	r1, r9, r1
   3c7dc:	add	r1, r1, #1
   3c7e0:	mov	r0, #12
   3c7e4:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3c7e8:	str	r0, [r4, #8]
   3c7ec:	cmp	r0, #0
   3c7f0:	bne	3c6bc <__assert_fail@plt+0x2a0f8>
   3c7f4:	mov	r0, #12
   3c7f8:	b	3ca74 <__assert_fail@plt+0x2a4b0>
   3c7fc:	lsl	r3, r3, #1
   3c800:	add	fp, r3, #1
   3c804:	lsl	r1, fp, #2
   3c808:	ldr	r0, [r4, #20]
   3c80c:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3c810:	cmp	r0, #0
   3c814:	beq	3ca70 <__assert_fail@plt+0x2a4ac>
   3c818:	str	r0, [r4, #20]
   3c81c:	str	fp, [r4, #12]
   3c820:	b	3c700 <__assert_fail@plt+0x2a13c>
   3c824:	ldr	fp, [sp, #52]	; 0x34
   3c828:	ldr	r8, [sp, #36]	; 0x24
   3c82c:	ldr	r9, [sp, #56]	; 0x38
   3c830:	ldr	r7, [sp, #60]	; 0x3c
   3c834:	mov	r3, #0
   3c838:	str	r3, [sp, #76]	; 0x4c
   3c83c:	lsl	r3, r8, #2
   3c840:	str	r3, [sp, #44]	; 0x2c
   3c844:	ldr	r3, [sl, #108]	; 0x6c
   3c848:	cmp	r3, r9
   3c84c:	ble	3c3f8 <__assert_fail@plt+0x29e34>
   3c850:	add	r3, r8, r8, lsl #1
   3c854:	lsl	r3, r3, #2
   3c858:	str	r3, [sp, #48]	; 0x30
   3c85c:	ldr	r6, [sp, #28]
   3c860:	str	r7, [sp, #52]	; 0x34
   3c864:	b	3c910 <__assert_fail@plt+0x2a34c>
   3c868:	str	r0, [sp, #76]	; 0x4c
   3c86c:	ldr	r0, [sp, #76]	; 0x4c
   3c870:	add	sp, sp, #84	; 0x54
   3c874:	ldrd	r4, [sp]
   3c878:	ldrd	r6, [sp, #8]
   3c87c:	ldrd	r8, [sp, #16]
   3c880:	ldrd	sl, [sp, #24]
   3c884:	add	sp, sp, #32
   3c888:	pop	{pc}		; (ldr pc, [sp], #4)
   3c88c:	ldr	r2, [fp, #12]
   3c890:	ldr	r1, [sp, #44]	; 0x2c
   3c894:	ldr	r2, [r2, r1]
   3c898:	add	r2, r2, r2, lsl #1
   3c89c:	ldr	r1, [fp, #24]
   3c8a0:	add	r2, r1, r2, lsl #2
   3c8a4:	str	r2, [sp, #24]
   3c8a8:	b	3c968 <__assert_fail@plt+0x2a3a4>
   3c8ac:	ldr	r3, [sp, #32]
   3c8b0:	ldr	r2, [sp, #24]
   3c8b4:	mov	r1, fp
   3c8b8:	add	r0, sp, #76	; 0x4c
   3c8bc:	bl	35d10 <__assert_fail@plt+0x2374c>
   3c8c0:	str	r0, [r5, r4, lsl #2]
   3c8c4:	ldr	r3, [sl, #100]	; 0x64
   3c8c8:	ldr	r3, [r3, r4, lsl #2]
   3c8cc:	cmp	r3, #0
   3c8d0:	bne	3c9fc <__assert_fail@plt+0x2a438>
   3c8d4:	ldr	r3, [sp, #76]	; 0x4c
   3c8d8:	cmp	r3, #0
   3c8dc:	beq	3c9fc <__assert_fail@plt+0x2a438>
   3c8e0:	b	3c86c <__assert_fail@plt+0x2a2a8>
   3c8e4:	ldr	r0, [sp, #72]	; 0x48
   3c8e8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c8ec:	b	3c86c <__assert_fail@plt+0x2a2a8>
   3c8f0:	ldr	r3, [sp, #76]	; 0x4c
   3c8f4:	cmp	r3, #0
   3c8f8:	beq	3c9fc <__assert_fail@plt+0x2a438>
   3c8fc:	b	3c86c <__assert_fail@plt+0x2a2a8>
   3c900:	add	r9, r9, #1
   3c904:	ldr	r3, [sl, #108]	; 0x6c
   3c908:	cmp	r3, r9
   3c90c:	ble	3ca5c <__assert_fail@plt+0x2a498>
   3c910:	add	r3, r9, r9, lsl #1
   3c914:	ldr	r2, [sl, #116]	; 0x74
   3c918:	add	r1, r2, r3, lsl #3
   3c91c:	ldr	r3, [r2, r3, lsl #3]
   3c920:	cmp	r3, r8
   3c924:	bne	3c900 <__assert_fail@plt+0x2a33c>
   3c928:	ldr	r3, [r1, #4]
   3c92c:	cmp	r3, r6
   3c930:	bne	3c900 <__assert_fail@plt+0x2a33c>
   3c934:	ldr	r3, [r1, #12]
   3c938:	ldr	r4, [r1, #8]
   3c93c:	subs	r7, r3, r4
   3c940:	bne	3c88c <__assert_fail@plt+0x2a2c8>
   3c944:	ldr	r2, [fp, #20]
   3c948:	ldr	r1, [sp, #48]	; 0x30
   3c94c:	add	r2, r2, r1
   3c950:	ldr	r2, [r2, #8]
   3c954:	ldr	r2, [r2]
   3c958:	add	r2, r2, r2, lsl #1
   3c95c:	ldr	r1, [fp, #24]
   3c960:	add	r2, r1, r2, lsl #2
   3c964:	str	r2, [sp, #24]
   3c968:	add	r3, r3, r6
   3c96c:	sub	r4, r3, r4
   3c970:	ldr	r2, [sl, #88]	; 0x58
   3c974:	sub	r1, r4, #1
   3c978:	mov	r0, sl
   3c97c:	bl	370c8 <__assert_fail@plt+0x24b04>
   3c980:	str	r0, [sp, #32]
   3c984:	ldr	r5, [sl, #100]	; 0x64
   3c988:	ldr	r3, [r5, r4, lsl #2]
   3c98c:	ldr	r2, [sp, #40]	; 0x28
   3c990:	ldr	r2, [r5, r2]
   3c994:	cmp	r2, #0
   3c998:	ldrne	r2, [r2, #8]
   3c99c:	moveq	r2, #0
   3c9a0:	str	r2, [sp, #36]	; 0x24
   3c9a4:	cmp	r3, #0
   3c9a8:	beq	3c8ac <__assert_fail@plt+0x2a2e8>
   3c9ac:	ldr	r2, [sp, #24]
   3c9b0:	ldr	r1, [r3, #40]	; 0x28
   3c9b4:	add	r0, sp, #64	; 0x40
   3c9b8:	bl	348ec <__assert_fail@plt+0x22328>
   3c9bc:	str	r0, [sp, #76]	; 0x4c
   3c9c0:	cmp	r0, #0
   3c9c4:	bne	3c8e4 <__assert_fail@plt+0x2a320>
   3c9c8:	ldr	r5, [sl, #100]	; 0x64
   3c9cc:	ldr	r3, [sp, #32]
   3c9d0:	add	r2, sp, #64	; 0x40
   3c9d4:	mov	r1, fp
   3c9d8:	add	r0, sp, #76	; 0x4c
   3c9dc:	bl	35d10 <__assert_fail@plt+0x2374c>
   3c9e0:	str	r0, [r5, r4, lsl #2]
   3c9e4:	ldr	r0, [sp, #72]	; 0x48
   3c9e8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3c9ec:	ldr	r3, [sl, #100]	; 0x64
   3c9f0:	ldr	r3, [r3, r4, lsl #2]
   3c9f4:	cmp	r3, #0
   3c9f8:	beq	3c8f0 <__assert_fail@plt+0x2a32c>
   3c9fc:	cmp	r7, #0
   3ca00:	bne	3c900 <__assert_fail@plt+0x2a33c>
   3ca04:	ldr	r3, [sl, #100]	; 0x64
   3ca08:	ldr	r2, [sp, #40]	; 0x28
   3ca0c:	ldr	r3, [r3, r2]
   3ca10:	ldr	r3, [r3, #8]
   3ca14:	ldr	r2, [sp, #36]	; 0x24
   3ca18:	cmp	r3, r2
   3ca1c:	ble	3c900 <__assert_fail@plt+0x2a33c>
   3ca20:	mov	r2, r6
   3ca24:	ldr	r4, [sp, #24]
   3ca28:	mov	r1, r4
   3ca2c:	mov	r0, sl
   3ca30:	bl	37344 <__assert_fail@plt+0x24d80>
   3ca34:	str	r0, [sp, #76]	; 0x4c
   3ca38:	cmp	r0, #0
   3ca3c:	bne	3c86c <__assert_fail@plt+0x2a2a8>
   3ca40:	mov	r1, r4
   3ca44:	mov	r0, sl
   3ca48:	bl	3c37c <__assert_fail@plt+0x29db8>
   3ca4c:	str	r0, [sp, #76]	; 0x4c
   3ca50:	cmp	r0, #0
   3ca54:	beq	3c900 <__assert_fail@plt+0x2a33c>
   3ca58:	b	3c86c <__assert_fail@plt+0x2a2a8>
   3ca5c:	ldr	r7, [sp, #52]	; 0x34
   3ca60:	b	3c3f8 <__assert_fail@plt+0x29e34>
   3ca64:	mov	r3, #0
   3ca68:	str	r3, [sp, #76]	; 0x4c
   3ca6c:	b	3c86c <__assert_fail@plt+0x2a2a8>
   3ca70:	mov	r0, #12
   3ca74:	str	r0, [sp, #76]	; 0x4c
   3ca78:	b	3c86c <__assert_fail@plt+0x2a2a8>
   3ca7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ca80:	strd	r6, [sp, #8]
   3ca84:	strd	r8, [sp, #16]
   3ca88:	str	sl, [sp, #24]
   3ca8c:	str	lr, [sp, #28]
   3ca90:	sub	sp, sp, #16
   3ca94:	mov	r8, r0
   3ca98:	mov	r4, r1
   3ca9c:	ldr	r7, [r1, #84]	; 0x54
   3caa0:	ldr	r6, [r1, #40]	; 0x28
   3caa4:	ldr	r3, [r1, #104]	; 0x68
   3caa8:	cmp	r3, r6
   3caac:	bge	3caf0 <__assert_fail@plt+0x2a52c>
   3cab0:	ldr	r3, [r1, #100]	; 0x64
   3cab4:	str	r2, [r3, r6, lsl #2]
   3cab8:	str	r6, [r1, #104]	; 0x68
   3cabc:	mov	r5, r2
   3cac0:	ldr	r3, [r7, #76]	; 0x4c
   3cac4:	cmp	r3, #0
   3cac8:	cmpne	r5, #0
   3cacc:	bne	3cbc0 <__assert_fail@plt+0x2a5fc>
   3cad0:	mov	r0, r5
   3cad4:	add	sp, sp, #16
   3cad8:	ldrd	r4, [sp]
   3cadc:	ldrd	r6, [sp, #8]
   3cae0:	ldrd	r8, [sp, #16]
   3cae4:	ldr	sl, [sp, #24]
   3cae8:	add	sp, sp, #28
   3caec:	pop	{pc}		; (ldr pc, [sp], #4)
   3caf0:	ldr	r9, [r1, #100]	; 0x64
   3caf4:	ldr	r3, [r9, r6, lsl #2]
   3caf8:	cmp	r3, #0
   3cafc:	streq	r2, [r9, r6, lsl #2]
   3cb00:	moveq	r5, r2
   3cb04:	beq	3cac0 <__assert_fail@plt+0x2a4fc>
   3cb08:	ldr	r3, [r3, #40]	; 0x28
   3cb0c:	cmp	r2, #0
   3cb10:	beq	3cb80 <__assert_fail@plt+0x2a5bc>
   3cb14:	ldr	r9, [r2, #40]	; 0x28
   3cb18:	mov	r2, r3
   3cb1c:	mov	r1, r9
   3cb20:	add	r0, sp, #4
   3cb24:	bl	348ec <__assert_fail@plt+0x22328>
   3cb28:	str	r0, [r8]
   3cb2c:	cmp	r0, #0
   3cb30:	movne	r5, #0
   3cb34:	bne	3cad0 <__assert_fail@plt+0x2a50c>
   3cb38:	ldr	r1, [r4, #40]	; 0x28
   3cb3c:	ldr	r2, [r4, #88]	; 0x58
   3cb40:	sub	r1, r1, #1
   3cb44:	mov	r0, r4
   3cb48:	bl	370c8 <__assert_fail@plt+0x24b04>
   3cb4c:	ldr	sl, [r4, #100]	; 0x64
   3cb50:	mov	r3, r0
   3cb54:	add	r2, sp, #4
   3cb58:	mov	r1, r7
   3cb5c:	mov	r0, r8
   3cb60:	bl	35d10 <__assert_fail@plt+0x2374c>
   3cb64:	mov	r5, r0
   3cb68:	str	r0, [sl, r6, lsl #2]
   3cb6c:	cmp	r9, #0
   3cb70:	beq	3cac0 <__assert_fail@plt+0x2a4fc>
   3cb74:	ldr	r0, [sp, #12]
   3cb78:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3cb7c:	b	3cac0 <__assert_fail@plt+0x2a4fc>
   3cb80:	ldrd	r0, [r3]
   3cb84:	strd	r0, [sp, #4]
   3cb88:	ldr	r3, [r3, #8]
   3cb8c:	str	r3, [sp, #12]
   3cb90:	ldr	r2, [r4, #88]	; 0x58
   3cb94:	sub	r1, r6, #1
   3cb98:	mov	r0, r4
   3cb9c:	bl	370c8 <__assert_fail@plt+0x24b04>
   3cba0:	mov	r3, r0
   3cba4:	add	r2, sp, #4
   3cba8:	mov	r1, r7
   3cbac:	mov	r0, r8
   3cbb0:	bl	35d10 <__assert_fail@plt+0x2374c>
   3cbb4:	mov	r5, r0
   3cbb8:	str	r0, [r9, r6, lsl #2]
   3cbbc:	b	3cac0 <__assert_fail@plt+0x2a4fc>
   3cbc0:	add	r7, r5, #4
   3cbc4:	mov	r2, r6
   3cbc8:	mov	r1, r7
   3cbcc:	mov	r0, r4
   3cbd0:	bl	37344 <__assert_fail@plt+0x24d80>
   3cbd4:	str	r0, [r8]
   3cbd8:	cmp	r0, #0
   3cbdc:	bne	3cc10 <__assert_fail@plt+0x2a64c>
   3cbe0:	ldrb	r3, [r5, #52]	; 0x34
   3cbe4:	tst	r3, #64	; 0x40
   3cbe8:	beq	3cad0 <__assert_fail@plt+0x2a50c>
   3cbec:	mov	r1, r7
   3cbf0:	mov	r0, r4
   3cbf4:	bl	3c37c <__assert_fail@plt+0x29db8>
   3cbf8:	str	r0, [r8]
   3cbfc:	cmp	r0, #0
   3cc00:	bne	3cc18 <__assert_fail@plt+0x2a654>
   3cc04:	ldr	r3, [r4, #100]	; 0x64
   3cc08:	ldr	r5, [r3, r6, lsl #2]
   3cc0c:	b	3cad0 <__assert_fail@plt+0x2a50c>
   3cc10:	mov	r5, #0
   3cc14:	b	3cad0 <__assert_fail@plt+0x2a50c>
   3cc18:	mov	r5, #0
   3cc1c:	b	3cad0 <__assert_fail@plt+0x2a50c>
   3cc20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3cc24:	strd	r6, [sp, #8]
   3cc28:	strd	r8, [sp, #16]
   3cc2c:	strd	sl, [sp, #24]
   3cc30:	str	lr, [sp, #32]
   3cc34:	sub	sp, sp, #84	; 0x54
   3cc38:	str	r0, [sp, #8]
   3cc3c:	mov	r4, r1
   3cc40:	mov	sl, r2
   3cc44:	mov	r5, r3
   3cc48:	ldr	r6, [r0, #84]	; 0x54
   3cc4c:	mov	r3, #0
   3cc50:	str	r3, [sp, #76]	; 0x4c
   3cc54:	lsl	r3, sl, #2
   3cc58:	str	r3, [sp, #12]
   3cc5c:	ldr	r3, [r0, #100]	; 0x64
   3cc60:	ldr	fp, [r3, sl, lsl #2]
   3cc64:	cmp	fp, #0
   3cc68:	beq	3cd68 <__assert_fail@plt+0x2a7a4>
   3cc6c:	add	fp, fp, #4
   3cc70:	ldr	r3, [r5, #4]
   3cc74:	cmp	r3, #0
   3cc78:	beq	3cd74 <__assert_fail@plt+0x2a7b0>
   3cc7c:	mov	r3, #0
   3cc80:	str	r3, [sp, #48]	; 0x30
   3cc84:	mov	r2, r5
   3cc88:	mov	r1, r6
   3cc8c:	add	r0, sp, #48	; 0x30
   3cc90:	bl	3b628 <__assert_fail@plt+0x29064>
   3cc94:	mov	r9, r0
   3cc98:	ldr	r8, [sp, #48]	; 0x30
   3cc9c:	cmp	r8, #0
   3cca0:	bne	3cda8 <__assert_fail@plt+0x2a7e4>
   3cca4:	ldr	r3, [r0, #28]
   3cca8:	cmp	r3, #0
   3ccac:	bne	3cd14 <__assert_fail@plt+0x2a750>
   3ccb0:	add	r8, r0, #28
   3ccb4:	ldr	r1, [r5, #4]
   3ccb8:	mov	r0, r8
   3ccbc:	bl	33fe8 <__assert_fail@plt+0x21a24>
   3ccc0:	mov	r7, r0
   3ccc4:	str	r0, [sp, #48]	; 0x30
   3ccc8:	cmp	r0, #0
   3cccc:	bne	3d2bc <__assert_fail@plt+0x2acf8>
   3ccd0:	ldr	r3, [r5, #4]
   3ccd4:	cmp	r3, #0
   3ccd8:	ble	3cd14 <__assert_fail@plt+0x2a750>
   3ccdc:	ldr	r3, [r5, #8]
   3cce0:	ldr	r1, [r3, r7, lsl #2]
   3cce4:	add	r1, r1, r1, lsl #1
   3cce8:	ldr	r3, [r6, #28]
   3ccec:	add	r1, r3, r1, lsl #2
   3ccf0:	mov	r0, r8
   3ccf4:	bl	36cc8 <__assert_fail@plt+0x24704>
   3ccf8:	str	r0, [sp, #48]	; 0x30
   3ccfc:	cmp	r0, #0
   3cd00:	bne	3d2c4 <__assert_fail@plt+0x2ad00>
   3cd04:	add	r7, r7, #1
   3cd08:	ldr	r3, [r5, #4]
   3cd0c:	cmp	r7, r3
   3cd10:	blt	3ccdc <__assert_fail@plt+0x2a718>
   3cd14:	add	r2, r9, #28
   3cd18:	mov	r1, fp
   3cd1c:	mov	r0, r5
   3cd20:	bl	34a90 <__assert_fail@plt+0x224cc>
   3cd24:	str	r0, [sp, #28]
   3cd28:	str	r0, [sp, #76]	; 0x4c
   3cd2c:	cmp	r0, #0
   3cd30:	bne	3d2b4 <__assert_fail@plt+0x2acf0>
   3cd34:	ldr	r3, [r4, #20]
   3cd38:	cmp	r3, #0
   3cd3c:	bne	3cdc8 <__assert_fail@plt+0x2a804>
   3cd40:	ldr	r7, [r4]
   3cd44:	mov	r2, r5
   3cd48:	mov	r1, r6
   3cd4c:	add	r0, sp, #76	; 0x4c
   3cd50:	bl	3b628 <__assert_fail@plt+0x29064>
   3cd54:	str	r0, [r7, sl, lsl #2]
   3cd58:	ldr	r8, [sp, #76]	; 0x4c
   3cd5c:	cmp	r8, #0
   3cd60:	beq	3cd8c <__assert_fail@plt+0x2a7c8>
   3cd64:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3cd68:	ldr	r3, [r5, #4]
   3cd6c:	cmp	r3, #0
   3cd70:	bne	3cfd8 <__assert_fail@plt+0x2aa14>
   3cd74:	ldr	r3, [r4]
   3cd78:	mov	r2, #0
   3cd7c:	str	r2, [r3, sl, lsl #2]
   3cd80:	cmp	fp, r2
   3cd84:	moveq	r8, r2
   3cd88:	beq	3cda8 <__assert_fail@plt+0x2a7e4>
   3cd8c:	ldr	r3, [sp, #8]
   3cd90:	ldr	r3, [r3, #100]	; 0x64
   3cd94:	ldr	r3, [r3, sl, lsl #2]
   3cd98:	ldrb	r3, [r3, #52]	; 0x34
   3cd9c:	tst	r3, #64	; 0x40
   3cda0:	moveq	r8, #0
   3cda4:	bne	3cff8 <__assert_fail@plt+0x2aa34>
   3cda8:	mov	r0, r8
   3cdac:	add	sp, sp, #84	; 0x54
   3cdb0:	ldrd	r4, [sp]
   3cdb4:	ldrd	r6, [sp, #8]
   3cdb8:	ldrd	r8, [sp, #16]
   3cdbc:	ldrd	sl, [sp, #24]
   3cdc0:	add	sp, sp, #32
   3cdc4:	pop	{pc}		; (ldr pc, [sp], #4)
   3cdc8:	ldr	r3, [sp, #8]
   3cdcc:	ldr	r3, [r3, #116]	; 0x74
   3cdd0:	str	r3, [sp, #20]
   3cdd4:	ble	3cfcc <__assert_fail@plt+0x2aa08>
   3cdd8:	mov	r7, r0
   3cddc:	str	fp, [sp, #24]
   3cde0:	b	3ce6c <__assert_fail@plt+0x2a8a8>
   3cde4:	ldr	lr, [r5, #4]
   3cde8:	cmp	lr, #0
   3cdec:	ble	3ce5c <__assert_fail@plt+0x2a898>
   3cdf0:	ldr	r2, [r5, #8]
   3cdf4:	add	lr, r2, lr, lsl #2
   3cdf8:	mvn	r8, #0
   3cdfc:	mov	r1, r8
   3ce00:	b	3ce18 <__assert_fail@plt+0x2a854>
   3ce04:	ldr	ip, [r0, r3, lsl #3]
   3ce08:	cmp	r9, ip
   3ce0c:	moveq	r1, r3
   3ce10:	cmp	r2, lr
   3ce14:	beq	3ce44 <__assert_fail@plt+0x2a880>
   3ce18:	ldr	r3, [r2], #4
   3ce1c:	add	ip, r0, r3, lsl #3
   3ce20:	ldrb	ip, [ip, #4]
   3ce24:	cmp	ip, #8
   3ce28:	beq	3ce04 <__assert_fail@plt+0x2a840>
   3ce2c:	cmp	ip, #9
   3ce30:	bne	3ce10 <__assert_fail@plt+0x2a84c>
   3ce34:	ldr	ip, [r0, r3, lsl #3]
   3ce38:	cmp	r9, ip
   3ce3c:	moveq	r8, r3
   3ce40:	b	3ce10 <__assert_fail@plt+0x2a84c>
   3ce44:	str	r8, [sp, #16]
   3ce48:	cmp	r1, #0
   3ce4c:	bge	3cec4 <__assert_fail@plt+0x2a900>
   3ce50:	ldr	r3, [sp, #16]
   3ce54:	cmp	r3, #0
   3ce58:	bge	3cef0 <__assert_fail@plt+0x2a92c>
   3ce5c:	add	r7, r7, #1
   3ce60:	ldr	r3, [r4, #20]
   3ce64:	cmp	r7, r3
   3ce68:	bge	3cfc8 <__assert_fail@plt+0x2aa04>
   3ce6c:	ldr	r3, [r4, #24]
   3ce70:	ldr	r3, [r3, r7, lsl #2]
   3ce74:	add	r3, r3, r3, lsl #1
   3ce78:	ldr	ip, [sp, #20]
   3ce7c:	add	r2, ip, r3, lsl #3
   3ce80:	ldr	r1, [r2, #8]
   3ce84:	cmp	sl, r1
   3ce88:	ble	3ce5c <__assert_fail@plt+0x2a898>
   3ce8c:	ldr	r1, [r2, #4]
   3ce90:	cmp	sl, r1
   3ce94:	bgt	3ce5c <__assert_fail@plt+0x2a898>
   3ce98:	ldr	r0, [r6]
   3ce9c:	ldr	r3, [ip, r3, lsl #3]
   3cea0:	ldr	r9, [r0, r3, lsl #3]
   3cea4:	ldr	r3, [r2, #12]
   3cea8:	cmp	sl, r3
   3ceac:	beq	3cde4 <__assert_fail@plt+0x2a820>
   3ceb0:	ldr	r3, [r5, #4]
   3ceb4:	cmp	r3, #0
   3ceb8:	ldrgt	fp, [sp, #28]
   3cebc:	bgt	3cf7c <__assert_fail@plt+0x2a9b8>
   3cec0:	b	3ce5c <__assert_fail@plt+0x2a898>
   3cec4:	ldr	r3, [sp, #24]
   3cec8:	mov	r2, r5
   3cecc:	mov	r0, r6
   3ced0:	bl	36238 <__assert_fail@plt+0x23c74>
   3ced4:	cmp	r0, #0
   3ced8:	bne	3d2cc <__assert_fail@plt+0x2ad08>
   3cedc:	cmp	r8, #0
   3cee0:	blt	3ce5c <__assert_fail@plt+0x2a898>
   3cee4:	ldr	r3, [r5, #4]
   3cee8:	cmp	r3, #0
   3ceec:	ble	3ce5c <__assert_fail@plt+0x2a898>
   3cef0:	ldr	r9, [sp, #28]
   3cef4:	b	3cf08 <__assert_fail@plt+0x2a944>
   3cef8:	add	r9, r9, #1
   3cefc:	ldr	r3, [r5, #4]
   3cf00:	cmp	r9, r3
   3cf04:	bge	3ce5c <__assert_fail@plt+0x2a898>
   3cf08:	ldr	r3, [r5, #8]
   3cf0c:	ldr	fp, [r3, r9, lsl #2]
   3cf10:	add	r8, fp, fp, lsl #1
   3cf14:	lsl	r8, r8, #2
   3cf18:	ldr	r0, [r6, #28]
   3cf1c:	ldr	r1, [sp, #16]
   3cf20:	add	r0, r0, r8
   3cf24:	bl	32ec8 <__assert_fail@plt+0x20904>
   3cf28:	cmp	r0, #0
   3cf2c:	bne	3cef8 <__assert_fail@plt+0x2a934>
   3cf30:	ldr	r0, [r6, #24]
   3cf34:	ldr	r1, [sp, #16]
   3cf38:	add	r0, r0, r8
   3cf3c:	bl	32ec8 <__assert_fail@plt+0x20904>
   3cf40:	cmp	r0, #0
   3cf44:	bne	3cef8 <__assert_fail@plt+0x2a934>
   3cf48:	ldr	r3, [sp, #24]
   3cf4c:	mov	r2, r5
   3cf50:	mov	r1, fp
   3cf54:	mov	r0, r6
   3cf58:	bl	36238 <__assert_fail@plt+0x23c74>
   3cf5c:	cmp	r0, #0
   3cf60:	bne	3d2d4 <__assert_fail@plt+0x2ad10>
   3cf64:	sub	r9, r9, #1
   3cf68:	b	3cef8 <__assert_fail@plt+0x2a934>
   3cf6c:	add	fp, fp, #1
   3cf70:	ldr	r3, [r5, #4]
   3cf74:	cmp	fp, r3
   3cf78:	bge	3ce5c <__assert_fail@plt+0x2a898>
   3cf7c:	ldr	r3, [r5, #8]
   3cf80:	ldr	r1, [r3, fp, lsl #2]
   3cf84:	ldr	r2, [r6]
   3cf88:	add	r3, r2, r1, lsl #3
   3cf8c:	ldrb	r3, [r3, #4]
   3cf90:	sub	r3, r3, #8
   3cf94:	cmp	r3, #1
   3cf98:	bhi	3cf6c <__assert_fail@plt+0x2a9a8>
   3cf9c:	ldr	r3, [r2, r1, lsl #3]
   3cfa0:	cmp	r9, r3
   3cfa4:	bne	3cf6c <__assert_fail@plt+0x2a9a8>
   3cfa8:	ldr	r3, [sp, #24]
   3cfac:	mov	r2, r5
   3cfb0:	mov	r0, r6
   3cfb4:	bl	36238 <__assert_fail@plt+0x23c74>
   3cfb8:	cmp	r0, #0
   3cfbc:	beq	3cf6c <__assert_fail@plt+0x2a9a8>
   3cfc0:	mov	r8, r0
   3cfc4:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3cfc8:	ldr	fp, [sp, #24]
   3cfcc:	mov	r3, #0
   3cfd0:	str	r3, [sp, #76]	; 0x4c
   3cfd4:	b	3cd40 <__assert_fail@plt+0x2a77c>
   3cfd8:	ldr	r4, [r1]
   3cfdc:	mov	r2, r5
   3cfe0:	mov	r1, r6
   3cfe4:	add	r0, sp, #76	; 0x4c
   3cfe8:	bl	3b628 <__assert_fail@plt+0x29064>
   3cfec:	str	r0, [r4, sl, lsl #2]
   3cff0:	ldr	r8, [sp, #76]	; 0x4c
   3cff4:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3cff8:	mov	r1, sl
   3cffc:	ldr	r5, [sp, #8]
   3d000:	mov	r0, r5
   3d004:	bl	338c0 <__assert_fail@plt+0x212fc>
   3d008:	str	r0, [sp, #32]
   3d00c:	cmn	r0, #1
   3d010:	moveq	r8, #0
   3d014:	beq	3cda8 <__assert_fail@plt+0x2a7e4>
   3d018:	ldr	r7, [r5, #84]	; 0x54
   3d01c:	mov	r3, #0
   3d020:	str	r3, [sp, #48]	; 0x30
   3d024:	ldr	r3, [fp, #4]
   3d028:	cmp	r3, #0
   3d02c:	ble	3d2ac <__assert_fail@plt+0x2ace8>
   3d030:	add	r3, r0, r0, lsl #1
   3d034:	lsl	r3, r3, #3
   3d038:	str	r3, [sp, #36]	; 0x24
   3d03c:	mov	r3, #0
   3d040:	add	r2, r4, #16
   3d044:	str	r2, [sp, #24]
   3d048:	str	sl, [sp, #28]
   3d04c:	mov	sl, r3
   3d050:	b	3d06c <__assert_fail@plt+0x2aaa8>
   3d054:	cmp	r2, #4
   3d058:	beq	3d0a0 <__assert_fail@plt+0x2aadc>
   3d05c:	add	sl, sl, #1
   3d060:	ldr	r3, [fp, #4]
   3d064:	cmp	sl, r3
   3d068:	bge	3d280 <__assert_fail@plt+0x2acbc>
   3d06c:	ldr	r3, [fp, #8]
   3d070:	ldr	r6, [r3, sl, lsl #2]
   3d074:	ldr	r3, [r7]
   3d078:	add	r3, r3, r6, lsl #3
   3d07c:	ldrb	r2, [r3, #4]
   3d080:	ldr	r3, [r4, #8]
   3d084:	cmp	r6, r3
   3d088:	bne	3d054 <__assert_fail@plt+0x2aa90>
   3d08c:	ldr	r3, [r4, #12]
   3d090:	ldr	r1, [sp, #28]
   3d094:	cmp	r1, r3
   3d098:	bne	3d054 <__assert_fail@plt+0x2aa90>
   3d09c:	b	3d05c <__assert_fail@plt+0x2aa98>
   3d0a0:	ldr	r3, [sp, #8]
   3d0a4:	ldr	r5, [r3, #116]	; 0x74
   3d0a8:	ldr	r3, [sp, #36]	; 0x24
   3d0ac:	add	r5, r5, r3
   3d0b0:	add	r3, r6, r6, lsl #1
   3d0b4:	lsl	r3, r3, #2
   3d0b8:	str	r3, [sp, #20]
   3d0bc:	lsl	r3, r6, #2
   3d0c0:	str	r3, [sp, #16]
   3d0c4:	ldr	r3, [sp, #32]
   3d0c8:	str	fp, [sp, #40]	; 0x28
   3d0cc:	str	sl, [sp, #44]	; 0x2c
   3d0d0:	mov	sl, r3
   3d0d4:	ldr	fp, [sp, #28]
   3d0d8:	b	3d17c <__assert_fail@plt+0x2abb8>
   3d0dc:	ldr	r3, [r7, #20]
   3d0e0:	ldr	r2, [sp, #20]
   3d0e4:	add	r3, r3, r2
   3d0e8:	ldr	r3, [r3, #8]
   3d0ec:	ldr	r8, [r3]
   3d0f0:	b	3d1ac <__assert_fail@plt+0x2abe8>
   3d0f4:	ldrd	r2, [r4]
   3d0f8:	strd	r2, [sp, #48]	; 0x30
   3d0fc:	ldrd	r2, [r4, #8]
   3d100:	strd	r2, [sp, #56]	; 0x38
   3d104:	ldrd	r2, [r4, #16]
   3d108:	strd	r2, [sp, #64]	; 0x40
   3d10c:	ldr	r3, [r4, #24]
   3d110:	str	r3, [sp, #72]	; 0x48
   3d114:	ldr	r1, [sp, #24]
   3d118:	add	r0, sp, #64	; 0x40
   3d11c:	bl	34864 <__assert_fail@plt+0x222a0>
   3d120:	cmp	r0, #0
   3d124:	beq	3d20c <__assert_fail@plt+0x2ac48>
   3d128:	mov	r8, r0
   3d12c:	b	3d28c <__assert_fail@plt+0x2acc8>
   3d130:	ldr	r3, [sp, #48]	; 0x30
   3d134:	ldr	r2, [sp, #12]
   3d138:	str	r5, [r3, r2]
   3d13c:	mov	r1, sl
   3d140:	add	r0, sp, #64	; 0x40
   3d144:	bl	32ec8 <__assert_fail@plt+0x20904>
   3d148:	sub	r1, r0, #1
   3d14c:	add	r0, sp, #64	; 0x40
   3d150:	bl	32f60 <__assert_fail@plt+0x2099c>
   3d154:	add	r5, sl, sl, lsl #1
   3d158:	ldr	r3, [sp, #8]
   3d15c:	ldr	r3, [r3, #116]	; 0x74
   3d160:	add	r5, r3, r5, lsl #3
   3d164:	add	sl, sl, #1
   3d168:	add	r2, r5, #24
   3d16c:	ldrb	r3, [r5, #20]
   3d170:	cmp	r3, #0
   3d174:	beq	3d274 <__assert_fail@plt+0x2acb0>
   3d178:	mov	r5, r2
   3d17c:	ldr	r3, [r5]
   3d180:	cmp	r6, r3
   3d184:	bne	3d164 <__assert_fail@plt+0x2aba0>
   3d188:	ldr	r3, [r5, #12]
   3d18c:	ldr	r2, [r5, #8]
   3d190:	sub	r3, r3, r2
   3d194:	add	r9, fp, r3
   3d198:	cmp	r3, #0
   3d19c:	beq	3d0dc <__assert_fail@plt+0x2ab18>
   3d1a0:	ldr	r3, [r7, #12]
   3d1a4:	ldr	r2, [sp, #16]
   3d1a8:	ldr	r8, [r3, r2]
   3d1ac:	ldr	r3, [r4, #12]
   3d1b0:	cmp	r9, r3
   3d1b4:	bgt	3d164 <__assert_fail@plt+0x2aba0>
   3d1b8:	ldr	r3, [r4]
   3d1bc:	ldr	r0, [r3, r9, lsl #2]
   3d1c0:	cmp	r0, #0
   3d1c4:	beq	3d164 <__assert_fail@plt+0x2aba0>
   3d1c8:	mov	r1, r8
   3d1cc:	add	r0, r0, #4
   3d1d0:	bl	32ec8 <__assert_fail@plt+0x20904>
   3d1d4:	cmp	r0, #0
   3d1d8:	beq	3d164 <__assert_fail@plt+0x2aba0>
   3d1dc:	str	r9, [sp, #4]
   3d1e0:	str	r8, [sp]
   3d1e4:	mov	r3, fp
   3d1e8:	mov	r2, r6
   3d1ec:	ldr	r1, [sp, #24]
   3d1f0:	ldr	r0, [sp, #8]
   3d1f4:	bl	3397c <__assert_fail@plt+0x213b8>
   3d1f8:	cmp	r0, #0
   3d1fc:	bne	3d164 <__assert_fail@plt+0x2aba0>
   3d200:	ldr	r3, [sp, #48]	; 0x30
   3d204:	cmp	r3, #0
   3d208:	beq	3d0f4 <__assert_fail@plt+0x2ab30>
   3d20c:	str	r6, [sp, #56]	; 0x38
   3d210:	str	fp, [sp, #60]	; 0x3c
   3d214:	mov	r1, sl
   3d218:	add	r0, sp, #64	; 0x40
   3d21c:	bl	36730 <__assert_fail@plt+0x2416c>
   3d220:	cmp	r0, #0
   3d224:	beq	3d288 <__assert_fail@plt+0x2acc4>
   3d228:	ldr	r3, [sp, #48]	; 0x30
   3d22c:	ldr	r2, [sp, #12]
   3d230:	ldr	r5, [r3, r2]
   3d234:	add	r1, sp, #48	; 0x30
   3d238:	ldr	r0, [sp, #8]
   3d23c:	bl	3d2dc <__assert_fail@plt+0x2ad18>
   3d240:	cmp	r0, #0
   3d244:	bne	3d2a4 <__assert_fail@plt+0x2ace0>
   3d248:	ldr	r1, [r4, #4]
   3d24c:	cmp	r1, #0
   3d250:	beq	3d130 <__assert_fail@plt+0x2ab6c>
   3d254:	add	r3, fp, #1
   3d258:	ldr	r2, [sp, #48]	; 0x30
   3d25c:	mov	r0, r7
   3d260:	bl	3b850 <__assert_fail@plt+0x2928c>
   3d264:	cmp	r0, #0
   3d268:	beq	3d130 <__assert_fail@plt+0x2ab6c>
   3d26c:	mov	r8, r0
   3d270:	b	3d28c <__assert_fail@plt+0x2acc8>
   3d274:	ldr	fp, [sp, #40]	; 0x28
   3d278:	ldr	sl, [sp, #44]	; 0x2c
   3d27c:	b	3d05c <__assert_fail@plt+0x2aa98>
   3d280:	mov	r8, #0
   3d284:	b	3d28c <__assert_fail@plt+0x2acc8>
   3d288:	mov	r8, #12
   3d28c:	ldr	r3, [sp, #48]	; 0x30
   3d290:	cmp	r3, #0
   3d294:	beq	3cda8 <__assert_fail@plt+0x2a7e4>
   3d298:	ldr	r0, [sp, #72]	; 0x48
   3d29c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3d2a0:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2a4:	mov	r8, r0
   3d2a8:	b	3d28c <__assert_fail@plt+0x2acc8>
   3d2ac:	mov	r8, #0
   3d2b0:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2b4:	ldr	r8, [sp, #28]
   3d2b8:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2bc:	mov	r8, #12
   3d2c0:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2c4:	mov	r8, #12
   3d2c8:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2cc:	mov	r8, r0
   3d2d0:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2d4:	mov	r8, r0
   3d2d8:	b	3cda8 <__assert_fail@plt+0x2a7e4>
   3d2dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3d2e0:	strd	r6, [sp, #8]
   3d2e4:	strd	r8, [sp, #16]
   3d2e8:	strd	sl, [sp, #24]
   3d2ec:	str	lr, [sp, #32]
   3d2f0:	sub	sp, sp, #60	; 0x3c
   3d2f4:	mov	sl, r0
   3d2f8:	mov	r7, r1
   3d2fc:	ldr	fp, [r1, #12]
   3d300:	ldr	r1, [r1, #8]
   3d304:	add	r0, sp, #44	; 0x2c
   3d308:	bl	33f90 <__assert_fail@plt+0x219cc>
   3d30c:	subs	r4, r0, #0
   3d310:	bne	3d59c <__assert_fail@plt+0x2afd8>
   3d314:	add	r3, sp, #44	; 0x2c
   3d318:	mov	r2, fp
   3d31c:	mov	r1, r7
   3d320:	mov	r0, sl
   3d324:	bl	3cc20 <__assert_fail@plt+0x2a65c>
   3d328:	subs	r3, r0, #0
   3d32c:	str	r3, [sp, #32]
   3d330:	bne	3d580 <__assert_fail@plt+0x2afbc>
   3d334:	cmp	fp, #0
   3d338:	ble	3d588 <__assert_fail@plt+0x2afc4>
   3d33c:	str	r3, [sp, #20]
   3d340:	mov	r9, sl
   3d344:	b	3d4dc <__assert_fail@plt+0x2af18>
   3d348:	ldr	r2, [sp, #16]
   3d34c:	mov	r1, #0
   3d350:	bl	12348 <memset@plt>
   3d354:	ldr	r0, [sp, #52]	; 0x34
   3d358:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3d35c:	ldr	r4, [sp, #32]
   3d360:	b	3d59c <__assert_fail@plt+0x2afd8>
   3d364:	ldr	r3, [r7, #12]
   3d368:	str	r3, [sp, #24]
   3d36c:	ldr	r2, [sp, #12]
   3d370:	ldr	r3, [r2, #84]	; 0x54
   3d374:	mov	r0, r3
   3d378:	mov	r3, r9
   3d37c:	mov	r1, fp
   3d380:	str	r0, [sp, #36]	; 0x24
   3d384:	bl	39b70 <__assert_fail@plt+0x275ac>
   3d388:	subs	r6, r0, #0
   3d38c:	ble	3d4a4 <__assert_fail@plt+0x2aee0>
   3d390:	add	r3, r9, r6
   3d394:	ldr	r2, [sp, #24]
   3d398:	cmp	r2, r3
   3d39c:	blt	3d3d0 <__assert_fail@plt+0x2ae0c>
   3d3a0:	ldr	r2, [r7]
   3d3a4:	ldr	r0, [r2, r3, lsl #2]
   3d3a8:	cmp	r0, #0
   3d3ac:	beq	3d450 <__assert_fail@plt+0x2ae8c>
   3d3b0:	ldr	r3, [sp, #36]	; 0x24
   3d3b4:	ldr	r3, [r3, #12]
   3d3b8:	ldr	r2, [sp, #8]
   3d3bc:	ldr	r1, [r3, r2, lsl #2]
   3d3c0:	add	r0, r0, #4
   3d3c4:	bl	32ec8 <__assert_fail@plt+0x20904>
   3d3c8:	cmp	r0, #0
   3d3cc:	beq	3d450 <__assert_fail@plt+0x2ae8c>
   3d3d0:	ldr	r3, [r7, #20]
   3d3d4:	cmp	r3, #0
   3d3d8:	beq	3d408 <__assert_fail@plt+0x2ae44>
   3d3dc:	ldr	r3, [r4, #12]
   3d3e0:	ldr	r2, [sp, #8]
   3d3e4:	ldr	r2, [r3, r2, lsl #2]
   3d3e8:	str	r9, [sp, #4]
   3d3ec:	str	fp, [sp]
   3d3f0:	add	r3, r9, r6
   3d3f4:	ldr	r1, [sp, #28]
   3d3f8:	ldr	r0, [sp, #12]
   3d3fc:	bl	3397c <__assert_fail@plt+0x213b8>
   3d400:	cmp	r0, #0
   3d404:	bne	3d41c <__assert_fail@plt+0x2ae58>
   3d408:	mov	r1, fp
   3d40c:	add	r0, sp, #44	; 0x2c
   3d410:	bl	36730 <__assert_fail@plt+0x2416c>
   3d414:	cmp	r0, #0
   3d418:	beq	3d590 <__assert_fail@plt+0x2afcc>
   3d41c:	add	sl, sl, #1
   3d420:	ldr	r3, [r5, #20]
   3d424:	cmp	sl, r3
   3d428:	bge	3d4b0 <__assert_fail@plt+0x2aeec>
   3d42c:	ldr	r3, [r5, #24]
   3d430:	ldr	fp, [r3, sl, lsl #2]
   3d434:	str	fp, [sp, #8]
   3d438:	lsl	r8, fp, #3
   3d43c:	ldr	r3, [r4]
   3d440:	add	r3, r3, r8
   3d444:	ldrb	r3, [r3, #6]
   3d448:	tst	r3, #16
   3d44c:	bne	3d364 <__assert_fail@plt+0x2ada0>
   3d450:	ldr	r1, [r4]
   3d454:	mov	r2, r9
   3d458:	add	r1, r1, r8
   3d45c:	ldr	r0, [sp, #12]
   3d460:	bl	371d4 <__assert_fail@plt+0x24c10>
   3d464:	cmp	r0, #0
   3d468:	beq	3d41c <__assert_fail@plt+0x2ae58>
   3d46c:	ldr	r3, [r7]
   3d470:	ldr	r2, [sp, #16]
   3d474:	ldr	r0, [r3, r2]
   3d478:	cmp	r0, #0
   3d47c:	beq	3d41c <__assert_fail@plt+0x2ae58>
   3d480:	ldr	r3, [r4, #12]
   3d484:	ldr	r2, [sp, #8]
   3d488:	ldr	r1, [r3, r2, lsl #2]
   3d48c:	add	r0, r0, #4
   3d490:	bl	32ec8 <__assert_fail@plt+0x20904>
   3d494:	cmp	r0, #0
   3d498:	beq	3d41c <__assert_fail@plt+0x2ae58>
   3d49c:	mov	r6, #1
   3d4a0:	b	3d3d0 <__assert_fail@plt+0x2ae0c>
   3d4a4:	cmp	r6, #0
   3d4a8:	beq	3d450 <__assert_fail@plt+0x2ae8c>
   3d4ac:	b	3d3d0 <__assert_fail@plt+0x2ae0c>
   3d4b0:	mov	fp, r9
   3d4b4:	ldr	r9, [sp, #12]
   3d4b8:	add	r3, sp, #44	; 0x2c
   3d4bc:	mov	r2, fp
   3d4c0:	mov	r1, r7
   3d4c4:	mov	r0, r9
   3d4c8:	bl	3cc20 <__assert_fail@plt+0x2a65c>
   3d4cc:	cmp	r0, #0
   3d4d0:	bne	3d5bc <__assert_fail@plt+0x2aff8>
   3d4d4:	cmp	fp, #0
   3d4d8:	beq	3d578 <__assert_fail@plt+0x2afb4>
   3d4dc:	ldr	r0, [r7]
   3d4e0:	lsl	r3, fp, #2
   3d4e4:	str	r3, [sp, #16]
   3d4e8:	ldr	r3, [r0, fp, lsl #2]
   3d4ec:	cmp	r3, #0
   3d4f0:	ldreq	r3, [sp, #20]
   3d4f4:	addeq	r3, r3, #1
   3d4f8:	ldrne	r3, [sp, #32]
   3d4fc:	str	r3, [sp, #20]
   3d500:	ldr	r3, [r9, #120]	; 0x78
   3d504:	ldr	r2, [sp, #20]
   3d508:	cmp	r3, r2
   3d50c:	blt	3d348 <__assert_fail@plt+0x2ad84>
   3d510:	mov	r3, #0
   3d514:	str	r3, [sp, #48]	; 0x30
   3d518:	sub	fp, fp, #1
   3d51c:	ldr	r3, [r9, #100]	; 0x64
   3d520:	ldr	r2, [sp, #16]
   3d524:	add	r3, r3, r2
   3d528:	ldr	r5, [r3, #-4]
   3d52c:	cmp	r5, #0
   3d530:	beq	3d4b8 <__assert_fail@plt+0x2aef4>
   3d534:	ldr	r4, [r9, #84]	; 0x54
   3d538:	ldr	r3, [r5, #20]
   3d53c:	cmp	r3, #0
   3d540:	ble	3d4b8 <__assert_fail@plt+0x2aef4>
   3d544:	ldr	r3, [r5, #24]
   3d548:	ldr	r6, [r3]
   3d54c:	str	r6, [sp, #8]
   3d550:	lsl	r8, r6, #3
   3d554:	ldr	r3, [r4]
   3d558:	add	r3, r3, r8
   3d55c:	ldr	sl, [sp, #32]
   3d560:	add	r2, r7, #16
   3d564:	str	r2, [sp, #28]
   3d568:	str	r9, [sp, #12]
   3d56c:	mov	r9, fp
   3d570:	mov	fp, r6
   3d574:	b	3d444 <__assert_fail@plt+0x2ae80>
   3d578:	mov	r4, fp
   3d57c:	b	3d594 <__assert_fail@plt+0x2afd0>
   3d580:	ldr	r4, [sp, #32]
   3d584:	b	3d594 <__assert_fail@plt+0x2afd0>
   3d588:	ldr	r4, [sp, #32]
   3d58c:	b	3d594 <__assert_fail@plt+0x2afd0>
   3d590:	mov	r4, #12
   3d594:	ldr	r0, [sp, #52]	; 0x34
   3d598:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3d59c:	mov	r0, r4
   3d5a0:	add	sp, sp, #60	; 0x3c
   3d5a4:	ldrd	r4, [sp]
   3d5a8:	ldrd	r6, [sp, #8]
   3d5ac:	ldrd	r8, [sp, #16]
   3d5b0:	ldrd	sl, [sp, #24]
   3d5b4:	add	sp, sp, #32
   3d5b8:	pop	{pc}		; (ldr pc, [sp], #4)
   3d5bc:	mov	r4, r0
   3d5c0:	b	3d594 <__assert_fail@plt+0x2afd0>
   3d5c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3d5c8:	strd	r6, [sp, #8]
   3d5cc:	strd	r8, [sp, #16]
   3d5d0:	strd	sl, [sp, #24]
   3d5d4:	str	lr, [sp, #32]
   3d5d8:	sub	sp, sp, #420	; 0x1a4
   3d5dc:	mov	r5, r0
   3d5e0:	str	r0, [sp, #20]
   3d5e4:	str	r1, [sp, #44]	; 0x2c
   3d5e8:	str	r2, [sp, #60]	; 0x3c
   3d5ec:	mov	r4, r3
   3d5f0:	ldr	r6, [sp, #456]	; 0x1c8
   3d5f4:	ldr	sl, [r0]
   3d5f8:	mov	r2, #136	; 0x88
   3d5fc:	mov	r1, #0
   3d600:	add	r0, sp, #276	; 0x114
   3d604:	bl	12348 <memset@plt>
   3d608:	str	sl, [sp, #360]	; 0x168
   3d60c:	ldr	r2, [r5, #16]
   3d610:	str	r2, [sp, #32]
   3d614:	cmp	r2, #0
   3d618:	beq	3d640 <__assert_fail@plt+0x2b07c>
   3d61c:	ldrb	r2, [r5, #28]
   3d620:	ubfx	r3, r2, #3, #1
   3d624:	cmp	r4, r6
   3d628:	moveq	r3, #0
   3d62c:	andne	r3, r3, #1
   3d630:	cmp	r3, #0
   3d634:	moveq	r3, #0
   3d638:	streq	r3, [sp, #32]
   3d63c:	bne	3d98c <__assert_fail@plt+0x2b3c8>
   3d640:	ldr	r3, [sp, #20]
   3d644:	ldr	r3, [r3, #24]
   3d648:	ldr	r2, [sp, #464]	; 0x1d0
   3d64c:	cmp	r3, r2
   3d650:	subcc	r2, r2, #1
   3d654:	subcc	r3, r2, r3
   3d658:	movcs	r3, #0
   3d65c:	str	r3, [sp, #72]	; 0x48
   3d660:	ldr	ip, [sp, #20]
   3d664:	ldr	r3, [ip, #8]
   3d668:	cmp	r3, #0
   3d66c:	beq	3eb88 <__assert_fail@plt+0x2c5c4>
   3d670:	ldr	r3, [sl, #36]	; 0x24
   3d674:	cmp	r3, #0
   3d678:	beq	3eb94 <__assert_fail@plt+0x2c5d0>
   3d67c:	ldr	r2, [sl, #40]	; 0x28
   3d680:	cmp	r2, #0
   3d684:	beq	3eba0 <__assert_fail@plt+0x2c5dc>
   3d688:	ldr	r1, [sl, #44]	; 0x2c
   3d68c:	cmp	r1, #0
   3d690:	beq	3ebac <__assert_fail@plt+0x2c5e8>
   3d694:	ldr	r0, [sl, #48]	; 0x30
   3d698:	cmp	r0, #0
   3d69c:	beq	3ebb8 <__assert_fail@plt+0x2c5f4>
   3d6a0:	ldr	r3, [r3, #8]
   3d6a4:	cmp	r3, #0
   3d6a8:	bne	3d6e4 <__assert_fail@plt+0x2b120>
   3d6ac:	ldr	r3, [r2, #8]
   3d6b0:	cmp	r3, #0
   3d6b4:	bne	3d6e4 <__assert_fail@plt+0x2b120>
   3d6b8:	ldr	r2, [r1, #8]
   3d6bc:	cmp	r2, #0
   3d6c0:	beq	3d6d0 <__assert_fail@plt+0x2b10c>
   3d6c4:	ldrsb	r2, [ip, #28]
   3d6c8:	cmp	r2, #0
   3d6cc:	blt	3d6e4 <__assert_fail@plt+0x2b120>
   3d6d0:	cmp	r4, #0
   3d6d4:	cmpne	r6, #0
   3d6d8:	bne	3ebc4 <__assert_fail@plt+0x2c600>
   3d6dc:	mov	r6, r3
   3d6e0:	mov	r4, r3
   3d6e4:	ldr	r3, [sp, #464]	; 0x1d0
   3d6e8:	ldr	r2, [sp, #72]	; 0x48
   3d6ec:	subs	r3, r3, r2
   3d6f0:	str	r3, [sp, #64]	; 0x40
   3d6f4:	movne	r5, #1
   3d6f8:	bne	3d708 <__assert_fail@plt+0x2b144>
   3d6fc:	ldr	r5, [sl, #76]	; 0x4c
   3d700:	adds	r5, r5, #0
   3d704:	movne	r5, #1
   3d708:	ldr	r3, [sp, #20]
   3d70c:	ldr	ip, [r3, #20]
   3d710:	str	ip, [sp, #68]	; 0x44
   3d714:	ldr	r2, [r3, #12]
   3d718:	ldr	r0, [sl, #92]	; 0x5c
   3d71c:	ldr	r3, [sl, #8]
   3d720:	add	r3, r3, #1
   3d724:	cmp	r3, r0
   3d728:	movlt	r3, r0
   3d72c:	ldr	lr, [sp, #60]	; 0x3c
   3d730:	add	r1, lr, #1
   3d734:	ldr	r7, [sp, #44]	; 0x2c
   3d738:	str	r7, [sp, #276]	; 0x114
   3d73c:	str	lr, [sp, #324]	; 0x144
   3d740:	str	lr, [sp, #320]	; 0x140
   3d744:	mov	r7, ip
   3d748:	str	ip, [sp, #340]	; 0x154
   3d74c:	and	ip, r2, #4194304	; 0x400000
   3d750:	ubfx	r2, r2, #22, #1
   3d754:	strb	r2, [sp, #348]	; 0x15c
   3d758:	orrs	r2, r7, ip
   3d75c:	movne	r2, #1
   3d760:	moveq	r2, #0
   3d764:	strb	r2, [sp, #351]	; 0x15f
   3d768:	str	r0, [sp, #356]	; 0x164
   3d76c:	ldrb	r2, [sl, #88]	; 0x58
   3d770:	ubfx	r0, r2, #2, #1
   3d774:	strb	r0, [sp, #349]	; 0x15d
   3d778:	ubfx	r2, r2, #3, #1
   3d77c:	strb	r2, [sp, #350]	; 0x15e
   3d780:	str	lr, [sp, #332]	; 0x14c
   3d784:	str	lr, [sp, #328]	; 0x148
   3d788:	cmp	r3, r1
   3d78c:	movlt	r1, r3
   3d790:	add	r0, sp, #276	; 0x114
   3d794:	bl	33a7c <__assert_fail@plt+0x214b8>
   3d798:	subs	r2, r0, #0
   3d79c:	str	r2, [sp, #76]	; 0x4c
   3d7a0:	bne	3eb1c <__assert_fail@plt+0x2c558>
   3d7a4:	add	r3, sl, #96	; 0x60
   3d7a8:	str	r3, [sp, #344]	; 0x158
   3d7ac:	ldrb	r3, [sl, #88]	; 0x58
   3d7b0:	ubfx	r3, r3, #4, #1
   3d7b4:	strb	r3, [sp, #354]	; 0x162
   3d7b8:	ldrb	r3, [sp, #351]	; 0x15f
   3d7bc:	cmp	r3, #0
   3d7c0:	beq	3eccc <__assert_fail@plt+0x2c708>
   3d7c4:	mov	r3, r2
   3d7c8:	str	r3, [sp, #304]	; 0x130
   3d7cc:	str	r3, [sp, #308]	; 0x134
   3d7d0:	ldr	r3, [sp, #460]	; 0x1cc
   3d7d4:	str	r3, [sp, #332]	; 0x14c
   3d7d8:	str	r3, [sp, #328]	; 0x148
   3d7dc:	ldr	r3, [sp, #20]
   3d7e0:	ldrb	r3, [r3, #28]
   3d7e4:	ubfx	r3, r3, #7, #1
   3d7e8:	strb	r3, [sp, #353]	; 0x161
   3d7ec:	ldr	r7, [sl, #76]	; 0x4c
   3d7f0:	lsl	r7, r7, #1
   3d7f4:	ldr	r3, [sp, #472]	; 0x1d8
   3d7f8:	str	r3, [sp, #364]	; 0x16c
   3d7fc:	mvn	r3, #0
   3d800:	str	r3, [sp, #368]	; 0x170
   3d804:	cmp	r7, #0
   3d808:	ble	3d848 <__assert_fail@plt+0x2b284>
   3d80c:	movw	r3, #43690	; 0xaaaa
   3d810:	movt	r3, #2730	; 0xaaa
   3d814:	cmp	r7, r3
   3d818:	bhi	3ecc0 <__assert_fail@plt+0x2c6fc>
   3d81c:	add	r0, r7, r7, lsl #1
   3d820:	lsl	r0, r0, #3
   3d824:	bl	32148 <__assert_fail@plt+0x1fb84>
   3d828:	str	r0, [sp, #392]	; 0x188
   3d82c:	lsl	r0, r7, #2
   3d830:	bl	32148 <__assert_fail@plt+0x1fb84>
   3d834:	str	r0, [sp, #408]	; 0x198
   3d838:	ldr	r3, [sp, #392]	; 0x188
   3d83c:	cmp	r0, #0
   3d840:	cmpne	r3, #0
   3d844:	beq	3ecc0 <__assert_fail@plt+0x2c6fc>
   3d848:	str	r7, [sp, #388]	; 0x184
   3d84c:	mov	r3, #1
   3d850:	str	r3, [sp, #396]	; 0x18c
   3d854:	str	r7, [sp, #404]	; 0x194
   3d858:	ldr	r3, [sp, #64]	; 0x40
   3d85c:	cmp	r3, #1
   3d860:	bls	3d9a4 <__assert_fail@plt+0x2b3e0>
   3d864:	ldr	r0, [sp, #312]	; 0x138
   3d868:	cmn	r0, #-1073741822	; 0xc0000002
   3d86c:	bhi	3eb28 <__assert_fail@plt+0x2c564>
   3d870:	add	r0, r0, #1
   3d874:	lsl	r0, r0, #2
   3d878:	bl	32148 <__assert_fail@plt+0x1fb84>
   3d87c:	str	r0, [sp, #376]	; 0x178
   3d880:	cmp	r0, #0
   3d884:	beq	3eb34 <__assert_fail@plt+0x2c570>
   3d888:	str	r4, [sp, #412]	; 0x19c
   3d88c:	ldr	r3, [sp, #472]	; 0x1d8
   3d890:	and	r3, r3, #1
   3d894:	cmp	r3, #0
   3d898:	movne	r3, #4
   3d89c:	moveq	r3, #6
   3d8a0:	str	r3, [sp, #336]	; 0x150
   3d8a4:	cmp	r4, r6
   3d8a8:	mvngt	r3, #0
   3d8ac:	movle	r3, #1
   3d8b0:	str	r3, [sp, #92]	; 0x5c
   3d8b4:	movlt	r3, r4
   3d8b8:	movge	r3, r6
   3d8bc:	str	r3, [sp, #56]	; 0x38
   3d8c0:	movge	r3, r4
   3d8c4:	movlt	r3, r6
   3d8c8:	str	r3, [sp, #48]	; 0x30
   3d8cc:	ldr	r3, [sl, #92]	; 0x5c
   3d8d0:	str	r3, [sp, #88]	; 0x58
   3d8d4:	ldr	r2, [sp, #32]
   3d8d8:	cmp	r2, #0
   3d8dc:	beq	3d9b4 <__assert_fail@plt+0x2b3f0>
   3d8e0:	cmp	r3, #1
   3d8e4:	moveq	r3, #4
   3d8e8:	beq	3d90c <__assert_fail@plt+0x2b348>
   3d8ec:	ldr	r3, [sp, #20]
   3d8f0:	ldr	r3, [r3, #12]
   3d8f4:	and	r3, r3, #4194304	; 0x400000
   3d8f8:	ldr	r2, [sp, #68]	; 0x44
   3d8fc:	orr	r3, r2, r3
   3d900:	cmp	r3, #0
   3d904:	ldr	r3, [sp, #76]	; 0x4c
   3d908:	moveq	r3, #4
   3d90c:	ldr	r2, [sp, #76]	; 0x4c
   3d910:	cmp	r4, r6
   3d914:	movle	r2, #2
   3d918:	ldr	r1, [sp, #68]	; 0x44
   3d91c:	cmp	r1, #0
   3d920:	orrne	r3, r3, #1
   3d924:	orr	r3, r3, r2
   3d928:	str	r3, [sp, #80]	; 0x50
   3d92c:	ldr	r3, [sp, #48]	; 0x30
   3d930:	cmp	r4, r3
   3d934:	movle	r3, #0
   3d938:	movgt	r3, #1
   3d93c:	ldr	r2, [sp, #56]	; 0x38
   3d940:	cmp	r4, r2
   3d944:	orrlt	r3, r3, #1
   3d948:	str	r3, [sp, #84]	; 0x54
   3d94c:	cmp	r3, #0
   3d950:	bne	3eb40 <__assert_fail@plt+0x2c57c>
   3d954:	str	r5, [sp, #16]
   3d958:	add	r3, sp, #416	; 0x1a0
   3d95c:	cmp	r4, r6
   3d960:	suble	r3, r3, #4
   3d964:	movgt	r3, #0
   3d968:	str	r3, [sp, #96]	; 0x60
   3d96c:	adds	r3, r3, #0
   3d970:	movne	r3, #1
   3d974:	str	r3, [sp, #100]	; 0x64
   3d978:	mov	r3, #65280	; 0xff00
   3d97c:	movt	r3, #3
   3d980:	str	r3, [sp, #40]	; 0x28
   3d984:	str	sl, [sp, #52]	; 0x34
   3d988:	b	3ed60 <__assert_fail@plt+0x2c79c>
   3d98c:	and	r2, r2, #1
   3d990:	cmp	r2, #0
   3d994:	ldr	r3, [sp, #32]
   3d998:	movne	r3, #0
   3d99c:	str	r3, [sp, #32]
   3d9a0:	b	3d640 <__assert_fail@plt+0x2b07c>
   3d9a4:	ldrb	r3, [sl, #88]	; 0x58
   3d9a8:	tst	r3, #2
   3d9ac:	beq	3d888 <__assert_fail@plt+0x2b2c4>
   3d9b0:	b	3d864 <__assert_fail@plt+0x2b2a0>
   3d9b4:	mov	r3, #8
   3d9b8:	str	r3, [sp, #80]	; 0x50
   3d9bc:	b	3d92c <__assert_fail@plt+0x2b368>
   3d9c0:	ldr	r5, [sp, #76]	; 0x4c
   3d9c4:	ldr	r4, [sp, #412]	; 0x19c
   3d9c8:	ldr	r3, [sp, #300]	; 0x12c
   3d9cc:	sub	r3, r4, r3
   3d9d0:	ldr	r2, [sp, #308]	; 0x134
   3d9d4:	cmp	r2, r3
   3d9d8:	bhi	3da00 <__assert_fail@plt+0x2b43c>
   3d9dc:	ldr	r2, [sp, #472]	; 0x1d8
   3d9e0:	mov	r1, r4
   3d9e4:	add	r0, sp, #276	; 0x114
   3d9e8:	bl	39438 <__assert_fail@plt+0x26e74>
   3d9ec:	subs	r3, r0, #0
   3d9f0:	str	r3, [sp, #24]
   3d9f4:	bne	3eb5c <__assert_fail@plt+0x2c598>
   3d9f8:	ldr	r3, [sp, #300]	; 0x12c
   3d9fc:	sub	r3, r4, r3
   3da00:	ldr	r2, [sp, #304]	; 0x130
   3da04:	cmp	r2, r3
   3da08:	ldrhi	r2, [sp, #280]	; 0x118
   3da0c:	ldrbhi	r3, [r2, r3]
   3da10:	movls	r3, r5
   3da14:	ldr	r2, [sp, #32]
   3da18:	ldrb	r3, [r2, r3]
   3da1c:	cmp	r3, #0
   3da20:	bne	3dc18 <__assert_fail@plt+0x2b654>
   3da24:	ldr	r3, [sp, #92]	; 0x5c
   3da28:	add	r4, r4, r3
   3da2c:	str	r4, [sp, #412]	; 0x19c
   3da30:	ldr	r3, [sp, #48]	; 0x30
   3da34:	cmp	r4, r3
   3da38:	movle	r3, #0
   3da3c:	movgt	r3, #1
   3da40:	ldr	r2, [sp, #56]	; 0x38
   3da44:	cmp	r4, r2
   3da48:	movge	r4, r3
   3da4c:	orrlt	r4, r3, #1
   3da50:	cmp	r4, #0
   3da54:	beq	3d9c4 <__assert_fail@plt+0x2b400>
   3da58:	ldr	sl, [sp, #52]	; 0x34
   3da5c:	mov	r3, #1
   3da60:	str	r3, [sp, #24]
   3da64:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3da68:	ldr	r2, [sp, #412]	; 0x19c
   3da6c:	ldr	r3, [sp, #48]	; 0x30
   3da70:	cmp	r3, r2
   3da74:	ble	3dc08 <__assert_fail@plt+0x2b644>
   3da78:	ldr	r1, [sp, #44]	; 0x2c
   3da7c:	add	r3, r1, r2
   3da80:	ldrb	r2, [r1, r2]
   3da84:	ldr	r1, [sp, #68]	; 0x44
   3da88:	ldrb	r2, [r1, r2]
   3da8c:	ldr	r1, [sp, #32]
   3da90:	ldrb	r2, [r1, r2]
   3da94:	cmp	r2, #0
   3da98:	bne	3dc18 <__assert_fail@plt+0x2b654>
   3da9c:	ldr	r2, [sp, #44]	; 0x2c
   3daa0:	sub	r1, r2, #1
   3daa4:	ldr	r0, [sp, #48]	; 0x30
   3daa8:	add	r1, r1, r0
   3daac:	rsb	ip, r2, #1
   3dab0:	ldr	lr, [sp, #32]
   3dab4:	ldr	r4, [sp, #68]	; 0x44
   3dab8:	add	r0, ip, r3
   3dabc:	cmp	r3, r1
   3dac0:	beq	3dcec <__assert_fail@plt+0x2b728>
   3dac4:	ldrb	r2, [r3, #1]!
   3dac8:	ldrb	r2, [r4, r2]
   3dacc:	ldrb	r2, [lr, r2]
   3dad0:	cmp	r2, #0
   3dad4:	beq	3dab8 <__assert_fail@plt+0x2b4f4>
   3dad8:	str	r0, [sp, #412]	; 0x19c
   3dadc:	b	3dc18 <__assert_fail@plt+0x2b654>
   3dae0:	ldr	r2, [sp, #412]	; 0x19c
   3dae4:	ldr	r3, [sp, #48]	; 0x30
   3dae8:	cmp	r3, r2
   3daec:	ble	3dc08 <__assert_fail@plt+0x2b644>
   3daf0:	ldr	r1, [sp, #44]	; 0x2c
   3daf4:	add	r3, r1, r2
   3daf8:	ldrb	r2, [r1, r2]
   3dafc:	ldr	r1, [sp, #32]
   3db00:	ldrb	r2, [r1, r2]
   3db04:	cmp	r2, #0
   3db08:	bne	3dc18 <__assert_fail@plt+0x2b654>
   3db0c:	ldr	r2, [sp, #44]	; 0x2c
   3db10:	sub	r1, r2, #1
   3db14:	ldr	r0, [sp, #48]	; 0x30
   3db18:	add	r1, r1, r0
   3db1c:	rsb	ip, r2, #1
   3db20:	ldr	lr, [sp, #32]
   3db24:	add	r0, ip, r3
   3db28:	cmp	r1, r3
   3db2c:	beq	3dc04 <__assert_fail@plt+0x2b640>
   3db30:	ldrb	r2, [r3, #1]!
   3db34:	ldrb	r2, [lr, r2]
   3db38:	cmp	r2, #0
   3db3c:	beq	3db24 <__assert_fail@plt+0x2b560>
   3db40:	str	r0, [sp, #412]	; 0x19c
   3db44:	b	3dc18 <__assert_fail@plt+0x2b654>
   3db48:	ldr	r3, [sp, #412]	; 0x19c
   3db4c:	ldr	r2, [sp, #56]	; 0x38
   3db50:	cmp	r2, r3
   3db54:	bgt	3dbf4 <__assert_fail@plt+0x2b630>
   3db58:	ldr	r1, [sp, #84]	; 0x54
   3db5c:	ldr	ip, [sp, #76]	; 0x4c
   3db60:	mov	r0, #1
   3db64:	ldr	r4, [sp, #32]
   3db68:	ldr	lr, [sp, #68]	; 0x44
   3db6c:	ldr	r6, [sp, #56]	; 0x38
   3db70:	ldr	r7, [sp, #44]	; 0x2c
   3db74:	ldr	r5, [sp, #60]	; 0x3c
   3db78:	cmp	r3, r5
   3db7c:	ldrblt	r2, [r7, r3]
   3db80:	movge	r2, ip
   3db84:	cmp	lr, #0
   3db88:	ldrbne	r2, [lr, r2]
   3db8c:	ldrb	r2, [r4, r2]
   3db90:	cmp	r2, #0
   3db94:	bne	3dd34 <__assert_fail@plt+0x2b770>
   3db98:	sub	r3, r3, #1
   3db9c:	mov	r1, r0
   3dba0:	cmp	r3, r6
   3dba4:	bge	3db78 <__assert_fail@plt+0x2b5b4>
   3dba8:	ldr	sl, [sp, #52]	; 0x34
   3dbac:	str	r3, [sp, #412]	; 0x19c
   3dbb0:	mov	r3, #1
   3dbb4:	str	r3, [sp, #24]
   3dbb8:	ldr	r0, [sp, #376]	; 0x178
   3dbbc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3dbc0:	ldr	r3, [sl, #76]	; 0x4c
   3dbc4:	cmp	r3, #0
   3dbc8:	bne	3eb6c <__assert_fail@plt+0x2c5a8>
   3dbcc:	add	r0, sp, #276	; 0x114
   3dbd0:	bl	3605c <__assert_fail@plt+0x23a98>
   3dbd4:	ldr	r0, [sp, #24]
   3dbd8:	add	sp, sp, #420	; 0x1a4
   3dbdc:	ldrd	r4, [sp]
   3dbe0:	ldrd	r6, [sp, #8]
   3dbe4:	ldrd	r8, [sp, #16]
   3dbe8:	ldrd	sl, [sp, #24]
   3dbec:	add	sp, sp, #32
   3dbf0:	pop	{pc}		; (ldr pc, [sp], #4)
   3dbf4:	ldr	sl, [sp, #52]	; 0x34
   3dbf8:	mov	r3, #1
   3dbfc:	str	r3, [sp, #24]
   3dc00:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3dc04:	str	r0, [sp, #412]	; 0x19c
   3dc08:	ldr	r3, [sp, #412]	; 0x19c
   3dc0c:	ldr	r2, [sp, #48]	; 0x30
   3dc10:	cmp	r3, r2
   3dc14:	beq	3dcf4 <__assert_fail@plt+0x2b730>
   3dc18:	ldr	r2, [sp, #472]	; 0x1d8
   3dc1c:	ldr	r1, [sp, #412]	; 0x19c
   3dc20:	add	r0, sp, #276	; 0x114
   3dc24:	bl	39438 <__assert_fail@plt+0x26e74>
   3dc28:	subs	r3, r0, #0
   3dc2c:	str	r3, [sp, #24]
   3dc30:	bne	3eb64 <__assert_fail@plt+0x2c5a0>
   3dc34:	ldr	r3, [sp, #88]	; 0x58
   3dc38:	cmp	r3, #1
   3dc3c:	beq	3dc5c <__assert_fail@plt+0x2b698>
   3dc40:	ldr	r3, [sp, #304]	; 0x130
   3dc44:	cmp	r3, #0
   3dc48:	beq	3dc5c <__assert_fail@plt+0x2b698>
   3dc4c:	ldr	r3, [sp, #284]	; 0x11c
   3dc50:	ldr	r3, [r3]
   3dc54:	cmn	r3, #1
   3dc58:	beq	3ed28 <__assert_fail@plt+0x2c764>
   3dc5c:	mov	r3, #0
   3dc60:	str	r3, [sp, #396]	; 0x18c
   3dc64:	str	r3, [sp, #384]	; 0x180
   3dc68:	str	r3, [sp, #380]	; 0x17c
   3dc6c:	ldr	r4, [sp, #360]	; 0x168
   3dc70:	ldr	r1, [sp, #316]	; 0x13c
   3dc74:	str	r1, [sp, #36]	; 0x24
   3dc78:	str	r3, [sp, #112]	; 0x70
   3dc7c:	ldr	r5, [r4, #36]	; 0x24
   3dc80:	ldrsb	r3, [r5, #52]	; 0x34
   3dc84:	cmp	r3, #0
   3dc88:	bge	3dd5c <__assert_fail@plt+0x2b798>
   3dc8c:	ldr	r2, [sp, #364]	; 0x16c
   3dc90:	sub	r1, r1, #1
   3dc94:	add	r0, sp, #276	; 0x114
   3dc98:	bl	370c8 <__assert_fail@plt+0x24b04>
   3dc9c:	tst	r0, #1
   3dca0:	bne	3dd58 <__assert_fail@plt+0x2b794>
   3dca4:	cmp	r0, #0
   3dca8:	beq	3dd5c <__assert_fail@plt+0x2b798>
   3dcac:	and	r3, r0, #6
   3dcb0:	cmp	r3, #6
   3dcb4:	beq	3dda4 <__assert_fail@plt+0x2b7e0>
   3dcb8:	tst	r0, #2
   3dcbc:	bne	3ddac <__assert_fail@plt+0x2b7e8>
   3dcc0:	tst	r0, #4
   3dcc4:	beq	3dd5c <__assert_fail@plt+0x2b798>
   3dcc8:	mov	r3, r0
   3dccc:	ldr	r2, [r5, #40]	; 0x28
   3dcd0:	mov	r1, r4
   3dcd4:	add	r0, sp, #112	; 0x70
   3dcd8:	bl	35d10 <__assert_fail@plt+0x2374c>
   3dcdc:	subs	r5, r0, #0
   3dce0:	bne	3dd5c <__assert_fail@plt+0x2b798>
   3dce4:	ldr	sl, [sp, #52]	; 0x34
   3dce8:	b	3eca8 <__assert_fail@plt+0x2c6e4>
   3dcec:	str	r0, [sp, #412]	; 0x19c
   3dcf0:	b	3dc08 <__assert_fail@plt+0x2b644>
   3dcf4:	ldr	r2, [sp, #60]	; 0x3c
   3dcf8:	cmp	r3, r2
   3dcfc:	ldrlt	r2, [sp, #44]	; 0x2c
   3dd00:	ldrblt	r3, [r2, r3]
   3dd04:	ldrge	r3, [sp, #76]	; 0x4c
   3dd08:	ldr	r2, [sp, #68]	; 0x44
   3dd0c:	cmp	r2, #0
   3dd10:	ldrbne	r3, [r2, r3]
   3dd14:	ldr	r2, [sp, #32]
   3dd18:	ldrb	r3, [r2, r3]
   3dd1c:	cmp	r3, #0
   3dd20:	bne	3dc18 <__assert_fail@plt+0x2b654>
   3dd24:	ldr	sl, [sp, #52]	; 0x34
   3dd28:	mov	r3, #1
   3dd2c:	str	r3, [sp, #24]
   3dd30:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3dd34:	cmp	r1, #0
   3dd38:	strne	r3, [sp, #412]	; 0x19c
   3dd3c:	ldr	r2, [sp, #56]	; 0x38
   3dd40:	cmp	r3, r2
   3dd44:	bge	3dc18 <__assert_fail@plt+0x2b654>
   3dd48:	ldr	sl, [sp, #52]	; 0x34
   3dd4c:	mov	r3, #1
   3dd50:	str	r3, [sp, #24]
   3dd54:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3dd58:	ldr	r5, [r4, #40]	; 0x28
   3dd5c:	ldr	r3, [sp, #376]	; 0x178
   3dd60:	cmp	r3, #0
   3dd64:	beq	3de10 <__assert_fail@plt+0x2b84c>
   3dd68:	ldr	r2, [sp, #36]	; 0x24
   3dd6c:	str	r5, [r3, r2, lsl #2]
   3dd70:	ldr	r3, [r4, #76]	; 0x4c
   3dd74:	cmp	r3, #0
   3dd78:	ldreq	sl, [sp, #100]	; 0x64
   3dd7c:	bne	3ddb4 <__assert_fail@plt+0x2b7f0>
   3dd80:	ldrb	r3, [r5, #52]	; 0x34
   3dd84:	tst	r3, #16
   3dd88:	bne	3de18 <__assert_fail@plt+0x2b854>
   3dd8c:	ldr	r3, [sp, #24]
   3dd90:	str	r3, [sp, #12]
   3dd94:	mvn	fp, #0
   3dd98:	ldr	r3, [sp, #96]	; 0x60
   3dd9c:	str	r3, [sp, #28]
   3dda0:	b	3e1bc <__assert_fail@plt+0x2bbf8>
   3dda4:	ldr	r5, [r4, #48]	; 0x30
   3dda8:	b	3dd5c <__assert_fail@plt+0x2b798>
   3ddac:	ldr	r5, [r4, #44]	; 0x2c
   3ddb0:	b	3dd5c <__assert_fail@plt+0x2b798>
   3ddb4:	add	r4, r5, #4
   3ddb8:	mov	r2, #0
   3ddbc:	mov	r1, r4
   3ddc0:	add	r0, sp, #276	; 0x114
   3ddc4:	bl	37344 <__assert_fail@plt+0x24d80>
   3ddc8:	mov	fp, r0
   3ddcc:	str	r0, [sp, #112]	; 0x70
   3ddd0:	cmp	r0, #0
   3ddd4:	bne	3ef2c <__assert_fail@plt+0x2c968>
   3ddd8:	ldrb	r3, [r5, #52]	; 0x34
   3dddc:	tst	r3, #64	; 0x40
   3dde0:	bne	3ddec <__assert_fail@plt+0x2b828>
   3dde4:	ldr	sl, [sp, #84]	; 0x54
   3dde8:	b	3dd80 <__assert_fail@plt+0x2b7bc>
   3ddec:	mov	r1, r4
   3ddf0:	add	r0, sp, #276	; 0x114
   3ddf4:	bl	3c37c <__assert_fail@plt+0x29db8>
   3ddf8:	mov	fp, r0
   3ddfc:	str	r0, [sp, #112]	; 0x70
   3de00:	cmp	r0, #0
   3de04:	bne	3ef2c <__assert_fail@plt+0x2c968>
   3de08:	ldr	sl, [sp, #84]	; 0x54
   3de0c:	b	3dd80 <__assert_fail@plt+0x2b7bc>
   3de10:	ldr	sl, [sp, #100]	; 0x64
   3de14:	b	3dd80 <__assert_fail@plt+0x2b7bc>
   3de18:	ldrsb	r3, [r5, #52]	; 0x34
   3de1c:	cmp	r3, #0
   3de20:	blt	3de40 <__assert_fail@plt+0x2b87c>
   3de24:	ldr	r3, [sp, #16]
   3de28:	cmp	r3, #0
   3de2c:	beq	3de64 <__assert_fail@plt+0x2b8a0>
   3de30:	ldr	fp, [sp, #36]	; 0x24
   3de34:	mov	r3, #1
   3de38:	str	r3, [sp, #12]
   3de3c:	b	3dd98 <__assert_fail@plt+0x2b7d4>
   3de40:	ldr	r2, [sp, #36]	; 0x24
   3de44:	mov	r1, r5
   3de48:	add	r0, sp, #276	; 0x114
   3de4c:	bl	38170 <__assert_fail@plt+0x25bac>
   3de50:	subs	r3, r0, #0
   3de54:	str	r3, [sp, #12]
   3de58:	bne	3de24 <__assert_fail@plt+0x2b860>
   3de5c:	mvn	fp, #0
   3de60:	b	3dd98 <__assert_fail@plt+0x2b7d4>
   3de64:	ldr	fp, [sp, #36]	; 0x24
   3de68:	b	3ef2c <__assert_fail@plt+0x2c968>
   3de6c:	ldr	r2, [sp, #324]	; 0x144
   3de70:	cmp	r3, r2
   3de74:	bge	3e1dc <__assert_fail@plt+0x2bc18>
   3de78:	add	r1, r1, #2
   3de7c:	add	r0, sp, #276	; 0x114
   3de80:	bl	34cec <__assert_fail@plt+0x22728>
   3de84:	str	r0, [sp, #112]	; 0x70
   3de88:	cmp	r0, #0
   3de8c:	beq	3e1e8 <__assert_fail@plt+0x2bc24>
   3de90:	ldr	sl, [sp, #52]	; 0x34
   3de94:	b	3eca8 <__assert_fail@plt+0x2c6e4>
   3de98:	ldr	r2, [sp, #324]	; 0x144
   3de9c:	cmp	r3, r2
   3dea0:	bge	3e1e8 <__assert_fail@plt+0x2bc24>
   3dea4:	b	3de78 <__assert_fail@plt+0x2b8b4>
   3dea8:	ldr	r6, [sp, #360]	; 0x168
   3deac:	ldr	r3, [r5, #8]
   3deb0:	cmp	r3, #0
   3deb4:	ble	3ecb4 <__assert_fail@plt+0x2c6f0>
   3deb8:	ldr	r7, [sp, #24]
   3debc:	b	3dfd0 <__assert_fail@plt+0x2ba0c>
   3dec0:	tst	r3, #8
   3dec4:	beq	3ded0 <__assert_fail@plt+0x2b90c>
   3dec8:	tst	r0, #1
   3decc:	bne	3dfc0 <__assert_fail@plt+0x2b9fc>
   3ded0:	tst	r3, #32
   3ded4:	beq	3dee0 <__assert_fail@plt+0x2b91c>
   3ded8:	tst	r0, #2
   3dedc:	beq	3dfc0 <__assert_fail@plt+0x2b9fc>
   3dee0:	tst	r3, #128	; 0x80
   3dee4:	beq	3def0 <__assert_fail@plt+0x2b92c>
   3dee8:	tst	r0, #8
   3deec:	beq	3dfc0 <__assert_fail@plt+0x2b9fc>
   3def0:	ldr	r3, [sp, #316]	; 0x13c
   3def4:	add	r2, sp, #276	; 0x114
   3def8:	mov	r1, r8
   3defc:	mov	r0, r6
   3df00:	bl	39b70 <__assert_fail@plt+0x275ac>
   3df04:	cmp	r0, #0
   3df08:	beq	3dfc0 <__assert_fail@plt+0x2b9fc>
   3df0c:	ldr	r4, [sp, #316]	; 0x13c
   3df10:	add	r4, r0, r4
   3df14:	ldr	r3, [sp, #396]	; 0x18c
   3df18:	cmp	r3, r0
   3df1c:	movlt	r3, r0
   3df20:	str	r3, [sp, #396]	; 0x18c
   3df24:	mov	r1, r4
   3df28:	add	r0, sp, #276	; 0x114
   3df2c:	bl	37478 <__assert_fail@plt+0x24eb4>
   3df30:	str	r0, [sp, #124]	; 0x7c
   3df34:	cmp	r0, #0
   3df38:	bne	3e078 <__assert_fail@plt+0x2bab4>
   3df3c:	ldr	r3, [r6, #12]
   3df40:	ldr	r3, [r3, r8, lsl #2]
   3df44:	add	r3, r3, r3, lsl #1
   3df48:	lsl	r3, r3, #2
   3df4c:	ldr	r0, [r6, #24]
   3df50:	add	r2, r0, r3
   3df54:	ldr	r8, [sp, #376]	; 0x178
   3df58:	ldr	r1, [r8, r4, lsl #2]
   3df5c:	cmp	r1, #0
   3df60:	beq	3e030 <__assert_fail@plt+0x2ba6c>
   3df64:	ldr	r1, [r1, #40]	; 0x28
   3df68:	add	r0, sp, #136	; 0x88
   3df6c:	bl	348ec <__assert_fail@plt+0x22328>
   3df70:	str	r0, [sp, #124]	; 0x7c
   3df74:	cmp	r0, #0
   3df78:	bne	3e078 <__assert_fail@plt+0x2bab4>
   3df7c:	ldr	r2, [sp, #364]	; 0x16c
   3df80:	sub	r1, r4, #1
   3df84:	add	r0, sp, #276	; 0x114
   3df88:	bl	370c8 <__assert_fail@plt+0x24b04>
   3df8c:	ldr	r8, [sp, #376]	; 0x178
   3df90:	mov	r3, r0
   3df94:	add	r2, sp, #136	; 0x88
   3df98:	mov	r1, r6
   3df9c:	add	r0, sp, #124	; 0x7c
   3dfa0:	bl	35d10 <__assert_fail@plt+0x2374c>
   3dfa4:	str	r0, [r8, r4, lsl #2]
   3dfa8:	ldr	r0, [sp, #144]	; 0x90
   3dfac:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3dfb0:	ldr	r3, [sp, #376]	; 0x178
   3dfb4:	ldr	r3, [r3, r4, lsl #2]
   3dfb8:	cmp	r3, #0
   3dfbc:	beq	3e06c <__assert_fail@plt+0x2baa8>
   3dfc0:	add	r7, r7, #1
   3dfc4:	ldr	r3, [r5, #8]
   3dfc8:	cmp	r7, r3
   3dfcc:	bge	3ecb4 <__assert_fail@plt+0x2c6f0>
   3dfd0:	ldr	r3, [r5, #12]
   3dfd4:	ldr	r8, [r3, r7, lsl #2]
   3dfd8:	ldr	r4, [r6]
   3dfdc:	add	r4, r4, r8, lsl #3
   3dfe0:	ldrb	r3, [r4, #6]
   3dfe4:	tst	r3, #16
   3dfe8:	beq	3dfc0 <__assert_fail@plt+0x2b9fc>
   3dfec:	ldr	r3, [r4, #4]
   3dff0:	ldr	r2, [sp, #40]	; 0x28
   3dff4:	tst	r2, r3
   3dff8:	beq	3def0 <__assert_fail@plt+0x2b92c>
   3dffc:	ldr	r2, [sp, #364]	; 0x16c
   3e000:	ldr	r1, [sp, #316]	; 0x13c
   3e004:	add	r0, sp, #276	; 0x114
   3e008:	bl	370c8 <__assert_fail@plt+0x24b04>
   3e00c:	ldr	r3, [r4, #4]
   3e010:	ubfx	r3, r3, #8, #10
   3e014:	tst	r3, #4
   3e018:	beq	3dec0 <__assert_fail@plt+0x2b8fc>
   3e01c:	tst	r0, #1
   3e020:	beq	3dfc0 <__assert_fail@plt+0x2b9fc>
   3e024:	tst	r3, #8
   3e028:	beq	3ded0 <__assert_fail@plt+0x2b90c>
   3e02c:	b	3dfc0 <__assert_fail@plt+0x2b9fc>
   3e030:	ldrd	r0, [r0, r3]
   3e034:	strd	r0, [sp, #136]	; 0x88
   3e038:	ldr	r3, [r2, #8]
   3e03c:	str	r3, [sp, #144]	; 0x90
   3e040:	ldr	r2, [sp, #364]	; 0x16c
   3e044:	sub	r1, r4, #1
   3e048:	add	r0, sp, #276	; 0x114
   3e04c:	bl	370c8 <__assert_fail@plt+0x24b04>
   3e050:	mov	r3, r0
   3e054:	add	r2, sp, #136	; 0x88
   3e058:	mov	r1, r6
   3e05c:	add	r0, sp, #124	; 0x7c
   3e060:	bl	35d10 <__assert_fail@plt+0x2374c>
   3e064:	str	r0, [r8, r4, lsl #2]
   3e068:	b	3dfb0 <__assert_fail@plt+0x2b9ec>
   3e06c:	ldr	r0, [sp, #124]	; 0x7c
   3e070:	cmp	r0, #0
   3e074:	beq	3dfc0 <__assert_fail@plt+0x2b9fc>
   3e078:	str	r0, [sp, #112]	; 0x70
   3e07c:	ldr	r3, [sp, #376]	; 0x178
   3e080:	cmp	r3, #0
   3e084:	beq	3ef04 <__assert_fail@plt+0x2c940>
   3e088:	mov	r4, #0
   3e08c:	b	3e224 <__assert_fail@plt+0x2bc60>
   3e090:	ldr	r6, [r5, #48]	; 0x30
   3e094:	cmp	r6, #0
   3e098:	beq	3e0c0 <__assert_fail@plt+0x2bafc>
   3e09c:	ldr	r2, [sp, #364]	; 0x16c
   3e0a0:	ldr	r1, [sp, #316]	; 0x13c
   3e0a4:	sub	r1, r1, #1
   3e0a8:	add	r0, sp, #276	; 0x114
   3e0ac:	bl	370c8 <__assert_fail@plt+0x24b04>
   3e0b0:	tst	r0, #1
   3e0b4:	addne	r4, r4, #256	; 0x100
   3e0b8:	ldr	r4, [r6, r4, lsl #2]
   3e0bc:	b	3e218 <__assert_fail@plt+0x2bc54>
   3e0c0:	mov	r1, r5
   3e0c4:	ldr	r0, [sp, #360]	; 0x168
   3e0c8:	bl	37660 <__assert_fail@plt+0x2509c>
   3e0cc:	cmp	r0, #0
   3e0d0:	bne	3e208 <__assert_fail@plt+0x2bc44>
   3e0d4:	mov	r3, #12
   3e0d8:	str	r3, [sp, #112]	; 0x70
   3e0dc:	b	3e07c <__assert_fail@plt+0x2bab8>
   3e0e0:	ldr	r3, [sp, #112]	; 0x70
   3e0e4:	cmp	r3, #0
   3e0e8:	bne	3eca4 <__assert_fail@plt+0x2c6e0>
   3e0ec:	ldr	r3, [sp, #376]	; 0x178
   3e0f0:	cmp	r3, #0
   3e0f4:	beq	3ef10 <__assert_fail@plt+0x2c94c>
   3e0f8:	ldr	r3, [sp, #12]
   3e0fc:	ldr	r2, [sp, #16]
   3e100:	cmp	r3, #0
   3e104:	eorne	r3, r2, #1
   3e108:	moveq	r3, #0
   3e10c:	cmp	r3, #0
   3e110:	bne	3ef10 <__assert_fail@plt+0x2c94c>
   3e114:	mov	r6, #0
   3e118:	ldr	r0, [sp, #380]	; 0x17c
   3e11c:	ldr	r2, [sp, #316]	; 0x13c
   3e120:	ldr	r3, [sp, #376]	; 0x178
   3e124:	add	r3, r3, r2, lsl #2
   3e128:	add	r2, r2, #1
   3e12c:	cmp	r0, r2
   3e130:	blt	3ef10 <__assert_fail@plt+0x2c94c>
   3e134:	ldr	r1, [sp, #316]	; 0x13c
   3e138:	add	r1, r1, #1
   3e13c:	str	r1, [sp, #316]	; 0x13c
   3e140:	ldr	r1, [r3, #4]!
   3e144:	cmp	r1, #0
   3e148:	beq	3e128 <__assert_fail@plt+0x2bb64>
   3e14c:	mov	r2, r6
   3e150:	add	r1, sp, #276	; 0x114
   3e154:	add	r0, sp, #112	; 0x70
   3e158:	bl	3ca7c <__assert_fail@plt+0x2a4b8>
   3e15c:	ldr	r3, [sp, #112]	; 0x70
   3e160:	orrs	r3, r0, r3
   3e164:	beq	3e118 <__assert_fail@plt+0x2bb54>
   3e168:	mov	r4, r0
   3e16c:	cmp	r0, #0
   3e170:	bne	3e240 <__assert_fail@plt+0x2bc7c>
   3e174:	b	3ef10 <__assert_fail@plt+0x2c94c>
   3e178:	ldr	r3, [sp, #84]	; 0x54
   3e17c:	cmp	r5, r4
   3e180:	movne	sl, r3
   3e184:	ldr	r3, [sp, #36]	; 0x24
   3e188:	cmp	r5, r4
   3e18c:	moveq	r3, r9
   3e190:	str	r3, [sp, #36]	; 0x24
   3e194:	b	3e248 <__assert_fail@plt+0x2bc84>
   3e198:	ldr	fp, [sp, #316]	; 0x13c
   3e19c:	ldr	r3, [sp, #16]
   3e1a0:	cmp	r3, #0
   3e1a4:	beq	3ef2c <__assert_fail@plt+0x2c968>
   3e1a8:	mov	r3, #1
   3e1ac:	str	r3, [sp, #12]
   3e1b0:	mov	r3, #0
   3e1b4:	str	r3, [sp, #28]
   3e1b8:	mov	r5, r4
   3e1bc:	ldr	r1, [sp, #316]	; 0x13c
   3e1c0:	ldr	r3, [sp, #332]	; 0x14c
   3e1c4:	cmp	r1, r3
   3e1c8:	bge	3ef10 <__assert_fail@plt+0x2c94c>
   3e1cc:	add	r9, r1, #1
   3e1d0:	ldr	r3, [sp, #312]	; 0x138
   3e1d4:	cmp	r9, r3
   3e1d8:	bge	3de6c <__assert_fail@plt+0x2b8a8>
   3e1dc:	ldr	r3, [sp, #304]	; 0x130
   3e1e0:	cmp	r9, r3
   3e1e4:	bge	3de98 <__assert_fail@plt+0x2b8d4>
   3e1e8:	ldrb	r3, [r5, #52]	; 0x34
   3e1ec:	tst	r3, #32
   3e1f0:	bne	3dea8 <__assert_fail@plt+0x2b8e4>
   3e1f4:	ldr	r3, [sp, #316]	; 0x13c
   3e1f8:	add	r2, r3, #1
   3e1fc:	str	r2, [sp, #316]	; 0x13c
   3e200:	ldr	r2, [sp, #280]	; 0x118
   3e204:	ldrb	r4, [r2, r3]
   3e208:	ldr	r3, [r5, #44]	; 0x2c
   3e20c:	cmp	r3, #0
   3e210:	beq	3e090 <__assert_fail@plt+0x2bacc>
   3e214:	ldr	r4, [r3, r4, lsl #2]
   3e218:	ldr	r3, [sp, #376]	; 0x178
   3e21c:	cmp	r3, #0
   3e220:	beq	3e238 <__assert_fail@plt+0x2bc74>
   3e224:	mov	r2, r4
   3e228:	add	r1, sp, #276	; 0x114
   3e22c:	add	r0, sp, #112	; 0x70
   3e230:	bl	3ca7c <__assert_fail@plt+0x2a4b8>
   3e234:	mov	r4, r0
   3e238:	cmp	r4, #0
   3e23c:	beq	3e0e0 <__assert_fail@plt+0x2bb1c>
   3e240:	cmp	sl, #0
   3e244:	bne	3e178 <__assert_fail@plt+0x2bbb4>
   3e248:	ldrb	r3, [r4, #52]	; 0x34
   3e24c:	tst	r3, #16
   3e250:	beq	3e1b8 <__assert_fail@plt+0x2bbf4>
   3e254:	tst	r3, #128	; 0x80
   3e258:	beq	3e198 <__assert_fail@plt+0x2bbd4>
   3e25c:	ldr	r2, [sp, #316]	; 0x13c
   3e260:	mov	r1, r4
   3e264:	add	r0, sp, #276	; 0x114
   3e268:	bl	38170 <__assert_fail@plt+0x25bac>
   3e26c:	cmp	r0, #0
   3e270:	beq	3e1b8 <__assert_fail@plt+0x2bbf4>
   3e274:	b	3e198 <__assert_fail@plt+0x2bbd4>
   3e278:	ldr	r9, [sp, #28]
   3e27c:	mov	r3, sl
   3e280:	ldr	sl, [sp, #12]
   3e284:	mov	r2, r5
   3e288:	mov	r1, r4
   3e28c:	mov	r0, r9
   3e290:	bl	3b850 <__assert_fail@plt+0x2928c>
   3e294:	mov	r8, r0
   3e298:	mov	r0, r5
   3e29c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e2a0:	cmp	r8, #0
   3e2a4:	beq	3e2fc <__assert_fail@plt+0x2bd38>
   3e2a8:	mov	r5, #0
   3e2ac:	b	3ed08 <__assert_fail@plt+0x2c744>
   3e2b0:	str	r4, [sp, #136]	; 0x88
   3e2b4:	mov	r3, #0
   3e2b8:	str	r3, [sp, #140]	; 0x8c
   3e2bc:	str	r7, [sp, #144]	; 0x90
   3e2c0:	str	fp, [sp, #148]	; 0x94
   3e2c4:	str	r3, [sp, #152]	; 0x98
   3e2c8:	str	r3, [sp, #156]	; 0x9c
   3e2cc:	str	r3, [sp, #160]	; 0xa0
   3e2d0:	add	r1, sp, #136	; 0x88
   3e2d4:	add	r0, sp, #276	; 0x114
   3e2d8:	bl	3d2dc <__assert_fail@plt+0x2ad18>
   3e2dc:	mov	r8, r0
   3e2e0:	ldr	r0, [sp, #160]	; 0xa0
   3e2e4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e2e8:	cmp	r8, #0
   3e2ec:	bne	3ed04 <__assert_fail@plt+0x2c740>
   3e2f0:	ldr	r5, [r4]
   3e2f4:	cmp	r5, #0
   3e2f8:	beq	3ecf0 <__assert_fail@plt+0x2c72c>
   3e2fc:	mov	r8, sl
   3e300:	ldr	sl, [sp, #52]	; 0x34
   3e304:	ldr	r0, [sp, #376]	; 0x178
   3e308:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e30c:	str	r4, [sp, #376]	; 0x178
   3e310:	str	r7, [sp, #372]	; 0x174
   3e314:	str	fp, [sp, #368]	; 0x170
   3e318:	mov	r0, #0
   3e31c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e320:	mov	r0, #0
   3e324:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e328:	b	3ef80 <__assert_fail@plt+0x2c9bc>
   3e32c:	ldr	sl, [sp, #52]	; 0x34
   3e330:	mov	r3, #1
   3e334:	str	r3, [sp, #24]
   3e338:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3e33c:	mov	r8, sl
   3e340:	ldr	sl, [sp, #52]	; 0x34
   3e344:	b	3ef80 <__assert_fail@plt+0x2c9bc>
   3e348:	ldrb	r3, [sl, #88]	; 0x58
   3e34c:	tst	r3, #1
   3e350:	beq	3ebdc <__assert_fail@plt+0x2c618>
   3e354:	ldr	r3, [sl, #76]	; 0x4c
   3e358:	cmp	r3, #0
   3e35c:	ble	3ebdc <__assert_fail@plt+0x2c618>
   3e360:	ldr	r3, [sp, #20]
   3e364:	ldr	r3, [r3]
   3e368:	str	r3, [sp, #16]
   3e36c:	mov	r3, #0
   3e370:	str	r3, [sp, #124]	; 0x7c
   3e374:	mov	r2, #2
   3e378:	str	r2, [sp, #128]	; 0x80
   3e37c:	str	r3, [sp, #132]	; 0x84
   3e380:	str	r3, [sp, #136]	; 0x88
   3e384:	mov	r3, #16
   3e388:	str	r3, [sp, #140]	; 0x8c
   3e38c:	add	r3, sp, #148	; 0x94
   3e390:	str	r3, [sp, #144]	; 0x90
   3e394:	mov	r0, #48	; 0x30
   3e398:	bl	32148 <__assert_fail@plt+0x1fb84>
   3e39c:	str	r0, [sp, #132]	; 0x84
   3e3a0:	cmp	r0, #0
   3e3a4:	beq	3ebd0 <__assert_fail@plt+0x2c60c>
   3e3a8:	add	fp, sp, #124	; 0x7c
   3e3ac:	b	3ec10 <__assert_fail@plt+0x2c64c>
   3e3b0:	mov	r3, #8
   3e3b4:	add	r2, sp, #148	; 0x94
   3e3b8:	ldr	r1, [sp, #64]	; 0x40
   3e3bc:	add	r0, sp, #136	; 0x88
   3e3c0:	bl	41d88 <__assert_fail@plt+0x2f7c4>
   3e3c4:	cmp	r0, #0
   3e3c8:	bne	3ec40 <__assert_fail@plt+0x2c67c>
   3e3cc:	ldr	r0, [sp, #144]	; 0x90
   3e3d0:	add	r3, sp, #148	; 0x94
   3e3d4:	cmp	r0, r3
   3e3d8:	beq	3e3e0 <__assert_fail@plt+0x2be1c>
   3e3dc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e3e0:	add	r3, sp, #148	; 0x94
   3e3e4:	str	r3, [sp, #144]	; 0x90
   3e3e8:	mov	r3, #0
   3e3ec:	str	r3, [sp, #136]	; 0x88
   3e3f0:	mvn	r3, #0
   3e3f4:	str	r3, [sp, #140]	; 0x8c
   3e3f8:	add	r0, sp, #136	; 0x88
   3e3fc:	bl	364e4 <__assert_fail@plt+0x23f20>
   3e400:	mov	r0, fp
   3e404:	bl	3652c <__assert_fail@plt+0x23f68>
   3e408:	mov	r3, #12
   3e40c:	str	r3, [sp, #24]
   3e410:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3e414:	ldr	r3, [r2, r7, lsl #3]
   3e418:	add	r3, r3, #1
   3e41c:	ldr	r2, [sp, #64]	; 0x40
   3e420:	cmp	r2, r3
   3e424:	ble	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e428:	ldr	r2, [sp, #468]	; 0x1d4
   3e42c:	add	r2, r2, r3, lsl #3
   3e430:	ldr	r0, [sp, #468]	; 0x1d4
   3e434:	str	r1, [r0, r3, lsl #3]
   3e438:	mvn	r3, #0
   3e43c:	str	r3, [r2, #4]
   3e440:	b	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e444:	ldr	r3, [r2, r0]
   3e448:	add	r3, r3, #1
   3e44c:	ldr	r2, [sp, #64]	; 0x40
   3e450:	cmp	r2, r3
   3e454:	ble	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e458:	ldr	r2, [sp, #468]	; 0x1d4
   3e45c:	add	r2, r2, r3, lsl #3
   3e460:	ldr	r0, [sp, #468]	; 0x1d4
   3e464:	ldr	r0, [r0, r3, lsl #3]
   3e468:	cmp	r1, r0
   3e46c:	bgt	3e494 <__assert_fail@plt+0x2bed0>
   3e470:	ldrb	r0, [ip, #6]
   3e474:	tst	r0, #8
   3e478:	beq	3e48c <__assert_fail@plt+0x2bec8>
   3e47c:	ldr	r0, [sp, #32]
   3e480:	ldr	r3, [r0, r3, lsl #3]
   3e484:	cmn	r3, #1
   3e488:	bne	3e4ac <__assert_fail@plt+0x2bee8>
   3e48c:	str	r1, [r2, #4]
   3e490:	b	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e494:	str	r1, [r2, #4]
   3e498:	ldr	r2, [sp, #36]	; 0x24
   3e49c:	ldr	r1, [sp, #468]	; 0x1d4
   3e4a0:	ldr	r0, [sp, #32]
   3e4a4:	bl	12000 <memcpy@plt>
   3e4a8:	b	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e4ac:	ldr	r2, [sp, #36]	; 0x24
   3e4b0:	mov	r1, r0
   3e4b4:	ldr	r0, [sp, #468]	; 0x1d4
   3e4b8:	bl	12000 <memcpy@plt>
   3e4bc:	b	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e4c0:	ldr	r3, [sp, #372]	; 0x174
   3e4c4:	cmp	r7, r3
   3e4c8:	bne	3e7b4 <__assert_fail@plt+0x2c1f0>
   3e4cc:	cmp	fp, #0
   3e4d0:	beq	3e564 <__assert_fail@plt+0x2bfa0>
   3e4d4:	ldr	r3, [sp, #24]
   3e4d8:	b	3e4e0 <__assert_fail@plt+0x2bf1c>
   3e4dc:	ldr	r3, [sp, #24]
   3e4e0:	ldr	r1, [sp, #12]
   3e4e4:	b	3e4f4 <__assert_fail@plt+0x2bf30>
   3e4e8:	add	r3, r3, #1
   3e4ec:	cmp	r1, r3
   3e4f0:	beq	3e544 <__assert_fail@plt+0x2bf80>
   3e4f4:	ldr	r2, [sp, #468]	; 0x1d4
   3e4f8:	ldr	r2, [r2, r3, lsl #3]
   3e4fc:	cmp	r2, #0
   3e500:	blt	3e4e8 <__assert_fail@plt+0x2bf24>
   3e504:	ldr	r2, [r9, r3, lsl #3]
   3e508:	cmn	r2, #1
   3e50c:	bne	3e4e8 <__assert_fail@plt+0x2bf24>
   3e510:	add	r3, sp, #112	; 0x70
   3e514:	str	r3, [sp, #4]
   3e518:	ldr	r3, [sp, #32]
   3e51c:	str	r3, [sp]
   3e520:	ldr	r3, [sp, #468]	; 0x1d4
   3e524:	ldr	r2, [sp, #12]
   3e528:	add	r1, sp, #108	; 0x6c
   3e52c:	mov	r0, fp
   3e530:	bl	38264 <__assert_fail@plt+0x25ca0>
   3e534:	subs	r7, r0, #0
   3e538:	bge	3e7d0 <__assert_fail@plt+0x2c20c>
   3e53c:	ldr	sl, [sp, #28]
   3e540:	b	3e548 <__assert_fail@plt+0x2bf84>
   3e544:	ldr	sl, [sp, #28]
   3e548:	ldr	r0, [sp, #120]	; 0x78
   3e54c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e550:	add	r0, sp, #136	; 0x88
   3e554:	bl	364e4 <__assert_fail@plt+0x23f20>
   3e558:	mov	r0, fp
   3e55c:	bl	3652c <__assert_fail@plt+0x23f68>
   3e560:	b	3ea08 <__assert_fail@plt+0x2c444>
   3e564:	ldr	sl, [sp, #28]
   3e568:	b	3e548 <__assert_fail@plt+0x2bf84>
   3e56c:	mov	r1, r7
   3e570:	add	r0, sp, #112	; 0x70
   3e574:	bl	36730 <__assert_fail@plt+0x2416c>
   3e578:	cmp	r0, #0
   3e57c:	bne	3e820 <__assert_fail@plt+0x2c25c>
   3e580:	ldr	sl, [sp, #28]
   3e584:	ldr	r0, [sp, #120]	; 0x78
   3e588:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e58c:	add	r0, sp, #136	; 0x88
   3e590:	bl	364e4 <__assert_fail@plt+0x23f20>
   3e594:	mov	r0, fp
   3e598:	bl	3652c <__assert_fail@plt+0x23f68>
   3e59c:	mov	r3, #12
   3e5a0:	str	r3, [sp, #24]
   3e5a4:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3e5a8:	mov	r1, r7
   3e5ac:	add	r0, sp, #112	; 0x70
   3e5b0:	bl	32ec8 <__assert_fail@plt+0x20904>
   3e5b4:	cmp	r0, #0
   3e5b8:	bne	3e9c4 <__assert_fail@plt+0x2c400>
   3e5bc:	cmp	fp, #0
   3e5c0:	beq	3e758 <__assert_fail@plt+0x2c194>
   3e5c4:	ldr	r8, [sp, #108]	; 0x6c
   3e5c8:	ldr	r4, [fp]
   3e5cc:	add	r3, r4, #1
   3e5d0:	str	r3, [fp]
   3e5d4:	ldr	r1, [fp, #4]
   3e5d8:	cmp	r3, r1
   3e5dc:	beq	3e674 <__assert_fail@plt+0x2c0b0>
   3e5e0:	add	r4, r4, r4, lsl #1
   3e5e4:	lsl	r6, r4, #3
   3e5e8:	ldr	r3, [fp, #8]
   3e5ec:	str	r8, [r3, r4, lsl #3]
   3e5f0:	ldr	r3, [fp, #8]
   3e5f4:	add	r3, r3, r6
   3e5f8:	str	r5, [r3, #4]
   3e5fc:	ldr	r4, [fp, #8]
   3e600:	add	r4, r4, r6
   3e604:	ldr	r0, [sp, #40]	; 0x28
   3e608:	bl	32148 <__assert_fail@plt+0x1fb84>
   3e60c:	str	r0, [r4, #8]
   3e610:	ldr	r3, [fp, #8]
   3e614:	add	r3, r3, r6
   3e618:	ldr	r0, [r3, #8]
   3e61c:	cmp	r0, #0
   3e620:	beq	3e9dc <__assert_fail@plt+0x2c418>
   3e624:	ldr	r4, [sp, #36]	; 0x24
   3e628:	mov	r2, r4
   3e62c:	ldr	r1, [sp, #468]	; 0x1d4
   3e630:	bl	12000 <memcpy@plt>
   3e634:	ldr	r3, [fp, #8]
   3e638:	add	r3, r3, r6
   3e63c:	ldr	r0, [r3, #8]
   3e640:	mov	r2, r4
   3e644:	ldr	r1, [sp, #32]
   3e648:	add	r0, r0, r4
   3e64c:	bl	12000 <memcpy@plt>
   3e650:	ldr	r0, [fp, #8]
   3e654:	add	r0, r0, r6
   3e658:	add	r1, sp, #112	; 0x70
   3e65c:	add	r0, r0, #12
   3e660:	bl	34864 <__assert_fail@plt+0x222a0>
   3e664:	cmp	r0, #0
   3e668:	beq	3e758 <__assert_fail@plt+0x2c194>
   3e66c:	ldr	sl, [sp, #28]
   3e670:	b	3e584 <__assert_fail@plt+0x2bfc0>
   3e674:	add	r1, r1, r1, lsl #1
   3e678:	lsl	r1, r1, #4
   3e67c:	ldr	r0, [fp, #8]
   3e680:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3e684:	cmp	r0, #0
   3e688:	beq	3e9d4 <__assert_fail@plt+0x2c410>
   3e68c:	ldr	r3, [fp, #4]
   3e690:	lsl	r3, r3, #1
   3e694:	str	r3, [fp, #4]
   3e698:	str	r0, [fp, #8]
   3e69c:	b	3e5e0 <__assert_fail@plt+0x2c01c>
   3e6a0:	add	r4, r4, #1
   3e6a4:	cmp	sl, r4
   3e6a8:	beq	3e758 <__assert_fail@plt+0x2c194>
   3e6ac:	ldr	r5, [r6, #4]!
   3e6b0:	mov	r1, r5
   3e6b4:	mov	r0, r8
   3e6b8:	bl	32ec8 <__assert_fail@plt+0x20904>
   3e6bc:	cmp	r0, #0
   3e6c0:	beq	3e6a0 <__assert_fail@plt+0x2c0dc>
   3e6c4:	cmn	r7, #1
   3e6c8:	bne	3e5a8 <__assert_fail@plt+0x2bfe4>
   3e6cc:	mov	r7, r5
   3e6d0:	b	3e6a0 <__assert_fail@plt+0x2c0dc>
   3e6d4:	ldrb	r3, [r3, #6]
   3e6d8:	tst	r3, #16
   3e6dc:	bne	3e840 <__assert_fail@plt+0x2c27c>
   3e6e0:	cmp	r2, #4
   3e6e4:	beq	3e870 <__assert_fail@plt+0x2c2ac>
   3e6e8:	ldr	r5, [sp, #108]	; 0x6c
   3e6ec:	ldr	r1, [r4]
   3e6f0:	mov	r2, r5
   3e6f4:	add	r1, r1, r6
   3e6f8:	add	r0, sp, #276	; 0x114
   3e6fc:	bl	371d4 <__assert_fail@plt+0x24c10>
   3e700:	cmp	r0, #0
   3e704:	beq	3e900 <__assert_fail@plt+0x2c33c>
   3e708:	ldr	r3, [r4, #12]
   3e70c:	ldr	r7, [r3, r8, lsl #2]
   3e710:	add	r5, r5, #1
   3e714:	str	r5, [sp, #108]	; 0x6c
   3e718:	cmp	fp, #0
   3e71c:	beq	3e750 <__assert_fail@plt+0x2c18c>
   3e720:	ldr	r3, [sp, #368]	; 0x170
   3e724:	cmp	r5, r3
   3e728:	bgt	3e900 <__assert_fail@plt+0x2c33c>
   3e72c:	ldr	r3, [sp, #376]	; 0x178
   3e730:	ldr	r0, [r3, r5, lsl #2]
   3e734:	cmp	r0, #0
   3e738:	beq	3e900 <__assert_fail@plt+0x2c33c>
   3e73c:	mov	r1, r7
   3e740:	add	r0, r0, #4
   3e744:	bl	32ec8 <__assert_fail@plt+0x20904>
   3e748:	cmp	r0, #0
   3e74c:	beq	3e900 <__assert_fail@plt+0x2c33c>
   3e750:	mov	r3, #0
   3e754:	str	r3, [sp, #116]	; 0x74
   3e758:	cmp	r7, #0
   3e75c:	blt	3e904 <__assert_fail@plt+0x2c340>
   3e760:	ldr	r1, [sp, #108]	; 0x6c
   3e764:	ldr	r3, [sp, #468]	; 0x1d4
   3e768:	ldr	r3, [r3, #4]
   3e76c:	cmp	r1, r3
   3e770:	bgt	3e9ec <__assert_fail@plt+0x2c428>
   3e774:	ldr	r3, [sp, #12]
   3e778:	str	r3, [sp, #20]
   3e77c:	lsl	r0, r7, #3
   3e780:	ldr	r3, [sp, #16]
   3e784:	ldr	r2, [r3]
   3e788:	add	ip, r2, r0
   3e78c:	ldrb	r3, [ip, #4]
   3e790:	cmp	r3, #8
   3e794:	beq	3e414 <__assert_fail@plt+0x2be50>
   3e798:	cmp	r3, #9
   3e79c:	beq	3e444 <__assert_fail@plt+0x2be80>
   3e7a0:	ldr	r3, [sp, #468]	; 0x1d4
   3e7a4:	ldr	r2, [r3, #4]
   3e7a8:	ldr	r3, [sp, #108]	; 0x6c
   3e7ac:	cmp	r2, r3
   3e7b0:	beq	3e4c0 <__assert_fail@plt+0x2befc>
   3e7b4:	cmp	fp, #0
   3e7b8:	beq	3e7d0 <__assert_fail@plt+0x2c20c>
   3e7bc:	mov	r1, r7
   3e7c0:	add	r0, sp, #112	; 0x70
   3e7c4:	bl	32ec8 <__assert_fail@plt+0x20904>
   3e7c8:	cmp	r0, #0
   3e7cc:	bne	3e4dc <__assert_fail@plt+0x2bf18>
   3e7d0:	ldr	r4, [sp, #360]	; 0x168
   3e7d4:	mov	r8, r7
   3e7d8:	lsl	r6, r7, #3
   3e7dc:	ldr	r1, [r4]
   3e7e0:	add	r3, r1, r6
   3e7e4:	ldrb	r2, [r3, #4]
   3e7e8:	tst	r2, #8
   3e7ec:	beq	3e6d4 <__assert_fail@plt+0x2c110>
   3e7f0:	ldr	r2, [sp, #108]	; 0x6c
   3e7f4:	ldr	r3, [sp, #376]	; 0x178
   3e7f8:	ldr	r8, [r3, r2, lsl #2]
   3e7fc:	add	r8, r8, #4
   3e800:	add	r3, r7, r7, lsl #1
   3e804:	ldr	r4, [r4, #20]
   3e808:	add	r4, r4, r3, lsl #2
   3e80c:	mov	r1, r7
   3e810:	add	r0, sp, #112	; 0x70
   3e814:	bl	32ec8 <__assert_fail@plt+0x20904>
   3e818:	cmp	r0, #0
   3e81c:	beq	3e56c <__assert_fail@plt+0x2bfa8>
   3e820:	ldr	sl, [r4, #4]
   3e824:	cmp	sl, #0
   3e828:	ble	3e900 <__assert_fail@plt+0x2c33c>
   3e82c:	ldr	r6, [r4, #8]
   3e830:	sub	r6, r6, #4
   3e834:	ldr	r4, [sp, #24]
   3e838:	mvn	r7, #0
   3e83c:	b	3e6ac <__assert_fail@plt+0x2c0e8>
   3e840:	ldr	r3, [sp, #108]	; 0x6c
   3e844:	add	r2, sp, #276	; 0x114
   3e848:	mov	r1, r7
   3e84c:	mov	r0, r4
   3e850:	bl	39b70 <__assert_fail@plt+0x275ac>
   3e854:	subs	r5, r0, #0
   3e858:	beq	3e6e8 <__assert_fail@plt+0x2c124>
   3e85c:	ldr	r3, [r4, #12]
   3e860:	ldr	r7, [r3, r8, lsl #2]
   3e864:	ldr	r3, [sp, #108]	; 0x6c
   3e868:	add	r5, r5, r3
   3e86c:	b	3e714 <__assert_fail@plt+0x2c150>
   3e870:	ldr	r3, [r1, r6]
   3e874:	add	r3, r3, #1
   3e878:	ldr	r2, [sp, #64]	; 0x40
   3e87c:	cmp	r2, r3
   3e880:	ble	3e960 <__assert_fail@plt+0x2c39c>
   3e884:	ldr	r2, [sp, #468]	; 0x1d4
   3e888:	add	r2, r2, r3, lsl #3
   3e88c:	ldr	r5, [r2, #4]
   3e890:	ldr	r2, [sp, #468]	; 0x1d4
   3e894:	ldr	r2, [r2, r3, lsl #3]
   3e898:	sub	r5, r5, r2
   3e89c:	cmp	fp, #0
   3e8a0:	beq	3e9b8 <__assert_fail@plt+0x2c3f4>
   3e8a4:	ldr	r2, [sp, #468]	; 0x1d4
   3e8a8:	add	r2, r2, r3, lsl #3
   3e8ac:	ldr	r1, [sp, #468]	; 0x1d4
   3e8b0:	ldr	r0, [r1, r3, lsl #3]
   3e8b4:	cmn	r0, #1
   3e8b8:	beq	3e900 <__assert_fail@plt+0x2c33c>
   3e8bc:	ldr	r3, [r2, #4]
   3e8c0:	cmn	r3, #1
   3e8c4:	beq	3e900 <__assert_fail@plt+0x2c33c>
   3e8c8:	cmp	r5, #0
   3e8cc:	beq	3e96c <__assert_fail@plt+0x2c3a8>
   3e8d0:	ldr	ip, [sp, #280]	; 0x118
   3e8d4:	ldr	r1, [sp, #108]	; 0x6c
   3e8d8:	ldr	r3, [sp, #304]	; 0x130
   3e8dc:	sub	r3, r3, r1
   3e8e0:	cmp	r5, r3
   3e8e4:	bgt	3e900 <__assert_fail@plt+0x2c33c>
   3e8e8:	mov	r2, r5
   3e8ec:	add	r1, ip, r1
   3e8f0:	add	r0, ip, r0
   3e8f4:	bl	12060 <memcmp@plt>
   3e8f8:	cmp	r0, #0
   3e8fc:	beq	3e85c <__assert_fail@plt+0x2c298>
   3e900:	mvn	r7, #0
   3e904:	cmn	r7, #2
   3e908:	beq	3e9cc <__assert_fail@plt+0x2c408>
   3e90c:	add	r3, sp, #112	; 0x70
   3e910:	str	r3, [sp, #4]
   3e914:	ldr	r3, [sp, #32]
   3e918:	str	r3, [sp]
   3e91c:	ldr	r3, [sp, #468]	; 0x1d4
   3e920:	ldr	r2, [sp, #20]
   3e924:	add	r1, sp, #108	; 0x6c
   3e928:	mov	r0, fp
   3e92c:	bl	38264 <__assert_fail@plt+0x25ca0>
   3e930:	subs	r7, r0, #0
   3e934:	bge	3e760 <__assert_fail@plt+0x2c19c>
   3e938:	ldr	sl, [sp, #28]
   3e93c:	ldr	r0, [sp, #120]	; 0x78
   3e940:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e944:	add	r0, sp, #136	; 0x88
   3e948:	bl	364e4 <__assert_fail@plt+0x23f20>
   3e94c:	mov	r0, fp
   3e950:	bl	3652c <__assert_fail@plt+0x23f68>
   3e954:	mov	r3, #1
   3e958:	str	r3, [sp, #24]
   3e95c:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3e960:	cmp	fp, #0
   3e964:	mvnne	r7, #0
   3e968:	bne	3e758 <__assert_fail@plt+0x2c194>
   3e96c:	mov	r1, r7
   3e970:	add	r0, sp, #112	; 0x70
   3e974:	bl	36730 <__assert_fail@plt+0x2416c>
   3e978:	cmp	r0, #0
   3e97c:	beq	3e9e4 <__assert_fail@plt+0x2c420>
   3e980:	ldr	r3, [r4, #20]
   3e984:	add	r2, r8, r8, lsl #1
   3e988:	add	r3, r3, r2, lsl #2
   3e98c:	ldr	r3, [r3, #8]
   3e990:	ldr	r7, [r3]
   3e994:	ldr	r2, [sp, #108]	; 0x6c
   3e998:	ldr	r3, [sp, #376]	; 0x178
   3e99c:	ldr	r0, [r3, r2, lsl #2]
   3e9a0:	mov	r1, r7
   3e9a4:	add	r0, r0, #4
   3e9a8:	bl	32ec8 <__assert_fail@plt+0x20904>
   3e9ac:	cmp	r0, #0
   3e9b0:	beq	3e6e8 <__assert_fail@plt+0x2c124>
   3e9b4:	b	3e758 <__assert_fail@plt+0x2c194>
   3e9b8:	cmp	r5, #0
   3e9bc:	bne	3e85c <__assert_fail@plt+0x2c298>
   3e9c0:	b	3e96c <__assert_fail@plt+0x2c3a8>
   3e9c4:	mov	r7, r5
   3e9c8:	b	3e758 <__assert_fail@plt+0x2c194>
   3e9cc:	ldr	sl, [sp, #28]
   3e9d0:	b	3e584 <__assert_fail@plt+0x2bfc0>
   3e9d4:	ldr	sl, [sp, #28]
   3e9d8:	b	3e584 <__assert_fail@plt+0x2bfc0>
   3e9dc:	ldr	sl, [sp, #28]
   3e9e0:	b	3e584 <__assert_fail@plt+0x2bfc0>
   3e9e4:	ldr	sl, [sp, #28]
   3e9e8:	b	3e584 <__assert_fail@plt+0x2bfc0>
   3e9ec:	ldr	sl, [sp, #28]
   3e9f0:	ldr	r0, [sp, #120]	; 0x78
   3e9f4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3e9f8:	add	r0, sp, #136	; 0x88
   3e9fc:	bl	364e4 <__assert_fail@plt+0x23f20>
   3ea00:	mov	r0, fp
   3ea04:	bl	3652c <__assert_fail@plt+0x23f68>
   3ea08:	cmp	r0, #0
   3ea0c:	beq	3efe8 <__assert_fail@plt+0x2ca24>
   3ea10:	str	r0, [sp, #24]
   3ea14:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3ea18:	ldr	r0, [r1, #-4]
   3ea1c:	add	r0, r0, ip
   3ea20:	str	r0, [r1, #-4]
   3ea24:	ldr	r0, [r1]
   3ea28:	add	r0, r0, ip
   3ea2c:	str	r0, [r1]
   3ea30:	add	r2, r2, #8
   3ea34:	cmp	r2, lr
   3ea38:	beq	3ea7c <__assert_fail@plt+0x2c4b8>
   3ea3c:	mov	r1, r2
   3ea40:	ldr	r0, [r2, #-4]
   3ea44:	cmn	r0, #1
   3ea48:	beq	3ea30 <__assert_fail@plt+0x2c46c>
   3ea4c:	cmp	r4, #0
   3ea50:	beq	3ea18 <__assert_fail@plt+0x2c454>
   3ea54:	cmp	r0, r5
   3ea58:	ldrne	r0, [r6, r0, lsl #2]
   3ea5c:	moveq	r0, r7
   3ea60:	str	r0, [r2, #-4]
   3ea64:	ldr	r0, [r2]
   3ea68:	cmp	r5, r0
   3ea6c:	ldrne	r0, [r6, r0, lsl #2]
   3ea70:	moveq	r0, r7
   3ea74:	str	r0, [r2]
   3ea78:	b	3ea18 <__assert_fail@plt+0x2c454>
   3ea7c:	ldr	r2, [sp, #72]	; 0x48
   3ea80:	cmp	r2, #0
   3ea84:	ble	3eab0 <__assert_fail@plt+0x2c4ec>
   3ea88:	ldr	r2, [sp, #468]	; 0x1d4
   3ea8c:	add	r3, r2, r3
   3ea90:	ldr	r1, [sp, #464]	; 0x1d0
   3ea94:	add	r1, r2, r1, lsl #3
   3ea98:	mvn	r2, #0
   3ea9c:	str	r2, [r3]
   3eaa0:	str	r2, [r3, #4]
   3eaa4:	add	r3, r3, #8
   3eaa8:	cmp	r3, r1
   3eaac:	bne	3ea9c <__assert_fail@plt+0x2c4d8>
   3eab0:	ldr	r3, [sl, #132]	; 0x84
   3eab4:	cmp	r3, #0
   3eab8:	beq	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eabc:	ldr	r3, [sp, #64]	; 0x40
   3eac0:	sub	r1, r3, #1
   3eac4:	mov	r3, #0
   3eac8:	ldr	r2, [sp, #468]	; 0x1d4
   3eacc:	add	ip, r2, #8
   3ead0:	add	r0, r2, #12
   3ead4:	b	3eb00 <__assert_fail@plt+0x2c53c>
   3ead8:	add	r2, r2, #1
   3eadc:	ldr	lr, [sp, #468]	; 0x1d4
   3eae0:	ldr	r2, [lr, r2, lsl #3]
   3eae4:	str	r2, [ip, r3, lsl #3]
   3eae8:	ldr	r2, [sl, #132]	; 0x84
   3eaec:	ldr	r2, [r2, r3, lsl #2]
   3eaf0:	add	r2, lr, r2, lsl #3
   3eaf4:	ldr	r2, [r2, #12]
   3eaf8:	str	r2, [r0, r3, lsl #3]
   3eafc:	add	r3, r3, #1
   3eb00:	cmp	r3, r1
   3eb04:	beq	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb08:	ldr	r2, [sl, #132]	; 0x84
   3eb0c:	ldr	r2, [r2, r3, lsl #2]
   3eb10:	cmp	r3, r2
   3eb14:	bne	3ead8 <__assert_fail@plt+0x2c514>
   3eb18:	b	3eafc <__assert_fail@plt+0x2c538>
   3eb1c:	ldr	r3, [sp, #76]	; 0x4c
   3eb20:	str	r3, [sp, #24]
   3eb24:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb28:	mov	r3, #12
   3eb2c:	str	r3, [sp, #24]
   3eb30:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb34:	mov	r3, #12
   3eb38:	str	r3, [sp, #24]
   3eb3c:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb40:	mov	r3, #1
   3eb44:	str	r3, [sp, #24]
   3eb48:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb4c:	ldr	sl, [sp, #52]	; 0x34
   3eb50:	mov	r3, #12
   3eb54:	str	r3, [sp, #24]
   3eb58:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb5c:	ldr	sl, [sp, #52]	; 0x34
   3eb60:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb64:	ldr	sl, [sp, #52]	; 0x34
   3eb68:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eb6c:	add	r0, sp, #276	; 0x114
   3eb70:	bl	3641c <__assert_fail@plt+0x23e58>
   3eb74:	ldr	r0, [sp, #408]	; 0x198
   3eb78:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3eb7c:	ldr	r0, [sp, #392]	; 0x188
   3eb80:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3eb84:	b	3dbcc <__assert_fail@plt+0x2b608>
   3eb88:	mov	r3, #1
   3eb8c:	str	r3, [sp, #24]
   3eb90:	b	3dbd4 <__assert_fail@plt+0x2b610>
   3eb94:	mov	r3, #1
   3eb98:	str	r3, [sp, #24]
   3eb9c:	b	3dbd4 <__assert_fail@plt+0x2b610>
   3eba0:	mov	r3, #1
   3eba4:	str	r3, [sp, #24]
   3eba8:	b	3dbd4 <__assert_fail@plt+0x2b610>
   3ebac:	mov	r3, #1
   3ebb0:	str	r3, [sp, #24]
   3ebb4:	b	3dbd4 <__assert_fail@plt+0x2b610>
   3ebb8:	mov	r3, #1
   3ebbc:	str	r3, [sp, #24]
   3ebc0:	b	3dbd4 <__assert_fail@plt+0x2b610>
   3ebc4:	mov	r3, #1
   3ebc8:	str	r3, [sp, #24]
   3ebcc:	b	3dbd4 <__assert_fail@plt+0x2b610>
   3ebd0:	mov	r3, #12
   3ebd4:	str	r3, [sp, #24]
   3ebd8:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3ebdc:	ldr	r3, [sp, #20]
   3ebe0:	ldr	r3, [r3]
   3ebe4:	str	r3, [sp, #16]
   3ebe8:	mov	fp, #0
   3ebec:	str	fp, [sp, #124]	; 0x7c
   3ebf0:	mov	r3, #2
   3ebf4:	str	r3, [sp, #128]	; 0x80
   3ebf8:	str	fp, [sp, #132]	; 0x84
   3ebfc:	str	fp, [sp, #136]	; 0x88
   3ec00:	mov	r3, #16
   3ec04:	str	r3, [sp, #140]	; 0x8c
   3ec08:	add	r3, sp, #148	; 0x94
   3ec0c:	str	r3, [sp, #144]	; 0x90
   3ec10:	ldr	r3, [sp, #16]
   3ec14:	ldr	r7, [r3, #72]	; 0x48
   3ec18:	mov	r3, #0
   3ec1c:	str	r3, [sp, #112]	; 0x70
   3ec20:	str	r3, [sp, #116]	; 0x74
   3ec24:	str	r3, [sp, #120]	; 0x78
   3ec28:	ldr	r3, [sp, #136]	; 0x88
   3ec2c:	ldr	r2, [sp, #64]	; 0x40
   3ec30:	cmp	r2, r3
   3ec34:	bhi	3e3b0 <__assert_fail@plt+0x2bdec>
   3ec38:	ldr	r3, [sp, #64]	; 0x40
   3ec3c:	str	r3, [sp, #136]	; 0x88
   3ec40:	ldr	r3, [sp, #144]	; 0x90
   3ec44:	str	r3, [sp, #32]
   3ec48:	ldr	r2, [sp, #36]	; 0x24
   3ec4c:	ldr	r1, [sp, #468]	; 0x1d4
   3ec50:	mov	r0, r3
   3ec54:	bl	12000 <memcpy@plt>
   3ec58:	ldr	r9, [sp, #468]	; 0x1d4
   3ec5c:	ldr	r3, [r9], #4
   3ec60:	str	r3, [sp, #108]	; 0x6c
   3ec64:	ldr	r3, [sp, #64]	; 0x40
   3ec68:	lsl	r2, r3, #4
   3ec6c:	str	r2, [sp, #40]	; 0x28
   3ec70:	str	r3, [sp, #12]
   3ec74:	str	sl, [sp, #28]
   3ec78:	b	3e760 <__assert_fail@plt+0x2c19c>
   3ec7c:	mov	r3, #0
   3ec80:	ldr	r2, [sp, #468]	; 0x1d4
   3ec84:	str	r3, [r2]
   3ec88:	ldr	r3, [sp, #368]	; 0x170
   3ec8c:	str	r3, [r2, #4]
   3ec90:	b	3efe8 <__assert_fail@plt+0x2ca24>
   3ec94:	ldr	sl, [sp, #52]	; 0x34
   3ec98:	mov	r3, #12
   3ec9c:	str	r3, [sp, #24]
   3eca0:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eca4:	ldr	sl, [sp, #52]	; 0x34
   3eca8:	mov	r3, #12
   3ecac:	str	r3, [sp, #24]
   3ecb0:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3ecb4:	mov	r3, #0
   3ecb8:	str	r3, [sp, #112]	; 0x70
   3ecbc:	b	3e1f4 <__assert_fail@plt+0x2bc30>
   3ecc0:	mov	r3, #12
   3ecc4:	str	r3, [sp, #24]
   3ecc8:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3eccc:	ldr	r3, [sp, #44]	; 0x2c
   3ecd0:	str	r3, [sp, #280]	; 0x118
   3ecd4:	ldr	r3, [sl, #92]	; 0x5c
   3ecd8:	ldr	r2, [sp, #60]	; 0x3c
   3ecdc:	ldr	r1, [sp, #76]	; 0x4c
   3ece0:	cmp	r3, #1
   3ece4:	movgt	r2, r1
   3ece8:	mov	r3, r2
   3ecec:	b	3d7c8 <__assert_fail@plt+0x2b204>
   3ecf0:	mov	r0, r4
   3ecf4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3ecf8:	mov	r0, r5
   3ecfc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3ed00:	b	3ed20 <__assert_fail@plt+0x2c75c>
   3ed04:	mov	r5, #0
   3ed08:	mov	r0, r4
   3ed0c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3ed10:	mov	r0, r5
   3ed14:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3ed18:	cmp	r8, #1
   3ed1c:	bne	3ed88 <__assert_fail@plt+0x2c7c4>
   3ed20:	add	r0, sp, #276	; 0x114
   3ed24:	bl	3641c <__assert_fail@plt+0x23e58>
   3ed28:	ldr	r3, [sp, #412]	; 0x19c
   3ed2c:	ldr	r2, [sp, #92]	; 0x5c
   3ed30:	add	r3, r2, r3
   3ed34:	str	r3, [sp, #412]	; 0x19c
   3ed38:	ldr	r2, [sp, #48]	; 0x30
   3ed3c:	cmp	r3, r2
   3ed40:	movle	r2, #0
   3ed44:	movgt	r2, #1
   3ed48:	ldr	r1, [sp, #56]	; 0x38
   3ed4c:	cmp	r3, r1
   3ed50:	movge	r3, r2
   3ed54:	orrlt	r3, r2, #1
   3ed58:	cmp	r3, #0
   3ed5c:	bne	3e32c <__assert_fail@plt+0x2bd68>
   3ed60:	ldr	r3, [sp, #80]	; 0x50
   3ed64:	sub	r3, r3, #4
   3ed68:	cmp	r3, #4
   3ed6c:	ldrls	pc, [pc, r3, lsl #2]
   3ed70:	b	3d9c0 <__assert_fail@plt+0x2b3fc>
   3ed74:	andeq	sp, r3, r8, asr #22
   3ed78:	andeq	sp, r3, r8, asr #22
   3ed7c:	andeq	sp, r3, r0, ror #21
   3ed80:	andeq	sp, r3, r8, ror #20
   3ed84:	andeq	sp, r3, r8, lsl ip
   3ed88:	mov	r3, r8
   3ed8c:	ldr	sl, [sp, #52]	; 0x34
   3ed90:	str	r3, [sp, #24]
   3ed94:	b	3dbb8 <__assert_fail@plt+0x2b5f4>
   3ed98:	ldr	sl, [sp, #52]	; 0x34
   3ed9c:	mov	r0, r4
   3eda0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3eda4:	mov	r0, #0
   3eda8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3edac:	mov	r3, #12
   3edb0:	b	3ed90 <__assert_fail@plt+0x2c7cc>
   3edb4:	mov	r2, fp
   3edb8:	ldr	r3, [sp, #376]	; 0x178
   3edbc:	ldr	r1, [r3, fp, lsl #2]
   3edc0:	add	r0, sp, #276	; 0x114
   3edc4:	bl	38170 <__assert_fail@plt+0x25bac>
   3edc8:	str	r0, [sp, #372]	; 0x174
   3edcc:	ldr	r3, [sp, #52]	; 0x34
   3edd0:	ldrb	r3, [r3, #88]	; 0x58
   3edd4:	tst	r3, #1
   3edd8:	bne	3ee08 <__assert_fail@plt+0x2c844>
   3eddc:	b	3edf8 <__assert_fail@plt+0x2c834>
   3ede0:	mov	r2, fp
   3ede4:	ldr	r3, [sp, #376]	; 0x178
   3ede8:	ldr	r1, [r3, fp, lsl #2]
   3edec:	add	r0, sp, #276	; 0x114
   3edf0:	bl	38170 <__assert_fail@plt+0x25bac>
   3edf4:	str	r0, [sp, #372]	; 0x174
   3edf8:	ldr	r3, [sp, #52]	; 0x34
   3edfc:	ldr	r3, [r3, #76]	; 0x4c
   3ee00:	cmp	r3, #0
   3ee04:	beq	3e33c <__assert_fail@plt+0x2bd78>
   3ee08:	ldr	r9, [sp, #360]	; 0x168
   3ee0c:	ldr	r7, [sp, #372]	; 0x174
   3ee10:	cmn	fp, #-1073741822	; 0xc0000002
   3ee14:	bhi	3ec94 <__assert_fail@plt+0x2c6d0>
   3ee18:	add	r5, fp, #1
   3ee1c:	lsl	r5, r5, #2
   3ee20:	mov	r0, r5
   3ee24:	bl	32148 <__assert_fail@plt+0x1fb84>
   3ee28:	subs	r4, r0, #0
   3ee2c:	beq	3ed98 <__assert_fail@plt+0x2c7d4>
   3ee30:	ldr	r3, [r9, #76]	; 0x4c
   3ee34:	cmp	r3, #0
   3ee38:	beq	3e2b0 <__assert_fail@plt+0x2bcec>
   3ee3c:	mov	r0, r5
   3ee40:	bl	32148 <__assert_fail@plt+0x1fb84>
   3ee44:	subs	r5, r0, #0
   3ee48:	beq	3ed98 <__assert_fail@plt+0x2c7d4>
   3ee4c:	mov	r6, #0
   3ee50:	str	sl, [sp, #12]
   3ee54:	str	r9, [sp, #28]
   3ee58:	add	sl, fp, #1
   3ee5c:	lsl	r9, sl, #2
   3ee60:	mov	r2, r9
   3ee64:	mov	r1, r6
   3ee68:	mov	r0, r5
   3ee6c:	bl	12348 <memset@plt>
   3ee70:	str	r4, [sp, #136]	; 0x88
   3ee74:	str	r5, [sp, #140]	; 0x8c
   3ee78:	str	r7, [sp, #144]	; 0x90
   3ee7c:	str	fp, [sp, #148]	; 0x94
   3ee80:	str	r6, [sp, #152]	; 0x98
   3ee84:	str	r6, [sp, #156]	; 0x9c
   3ee88:	str	r6, [sp, #160]	; 0xa0
   3ee8c:	add	r1, sp, #136	; 0x88
   3ee90:	add	r0, sp, #276	; 0x114
   3ee94:	bl	3d2dc <__assert_fail@plt+0x2ad18>
   3ee98:	mov	r8, r0
   3ee9c:	ldr	r0, [sp, #160]	; 0xa0
   3eea0:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3eea4:	cmp	r8, #0
   3eea8:	bne	3ed08 <__assert_fail@plt+0x2c744>
   3eeac:	ldr	r3, [r4]
   3eeb0:	cmp	r3, #0
   3eeb4:	bne	3e278 <__assert_fail@plt+0x2bcb4>
   3eeb8:	ldr	r3, [r5]
   3eebc:	cmp	r3, #0
   3eec0:	bne	3e278 <__assert_fail@plt+0x2bcb4>
   3eec4:	sub	r9, r9, #4
   3eec8:	ldr	r3, [sp, #376]	; 0x178
   3eecc:	add	r9, r3, r9
   3eed0:	subs	fp, fp, #1
   3eed4:	bmi	3ecf0 <__assert_fail@plt+0x2c72c>
   3eed8:	ldr	r1, [r9, #-4]!
   3eedc:	cmp	r1, #0
   3eee0:	beq	3eed0 <__assert_fail@plt+0x2c90c>
   3eee4:	ldrb	r3, [r1, #52]	; 0x34
   3eee8:	tst	r3, #16
   3eeec:	beq	3eed0 <__assert_fail@plt+0x2c90c>
   3eef0:	mov	r2, fp
   3eef4:	add	r0, sp, #276	; 0x114
   3eef8:	bl	38170 <__assert_fail@plt+0x25bac>
   3eefc:	mov	r7, r0
   3ef00:	b	3ee58 <__assert_fail@plt+0x2c894>
   3ef04:	ldr	r3, [sp, #112]	; 0x70
   3ef08:	cmp	r3, #0
   3ef0c:	bne	3f014 <__assert_fail@plt+0x2ca50>
   3ef10:	ldr	r2, [sp, #28]
   3ef14:	cmp	r2, #0
   3ef18:	beq	3ef2c <__assert_fail@plt+0x2c968>
   3ef1c:	ldr	r3, [r2]
   3ef20:	ldr	r1, [sp, #36]	; 0x24
   3ef24:	add	r3, r3, r1
   3ef28:	str	r3, [r2]
   3ef2c:	cmn	fp, #1
   3ef30:	beq	3ed20 <__assert_fail@plt+0x2c75c>
   3ef34:	cmn	fp, #2
   3ef38:	beq	3eb4c <__assert_fail@plt+0x2c588>
   3ef3c:	str	fp, [sp, #368]	; 0x170
   3ef40:	ldr	r3, [sp, #64]	; 0x40
   3ef44:	cmp	r3, #1
   3ef48:	movls	sl, #0
   3ef4c:	movhi	sl, #1
   3ef50:	ldr	r3, [sp, #20]
   3ef54:	ldrb	r3, [r3, #28]
   3ef58:	eor	r3, r3, #16
   3ef5c:	ubfx	r3, r3, #4, #1
   3ef60:	tst	sl, r3
   3ef64:	bne	3edb4 <__assert_fail@plt+0x2c7f0>
   3ef68:	ldr	r2, [sp, #52]	; 0x34
   3ef6c:	ldr	r3, [r2, #76]	; 0x4c
   3ef70:	cmp	r3, #0
   3ef74:	bne	3ede0 <__assert_fail@plt+0x2c81c>
   3ef78:	mov	r8, sl
   3ef7c:	mov	sl, r2
   3ef80:	ldr	r2, [sp, #64]	; 0x40
   3ef84:	cmp	r2, #0
   3ef88:	beq	3dbb8 <__assert_fail@plt+0x2b5f4>
   3ef8c:	cmp	r2, #1
   3ef90:	bls	3ec7c <__assert_fail@plt+0x2c6b8>
   3ef94:	ldr	r3, [sp, #468]	; 0x1d4
   3ef98:	lsl	r2, r2, #3
   3ef9c:	str	r2, [sp, #36]	; 0x24
   3efa0:	sub	r1, r3, #8
   3efa4:	add	r1, r1, r2
   3efa8:	mvn	r2, #0
   3efac:	str	r2, [r3, #12]
   3efb0:	str	r2, [r3, #8]!
   3efb4:	cmp	r3, r1
   3efb8:	bne	3efac <__assert_fail@plt+0x2c9e8>
   3efbc:	mov	r3, #0
   3efc0:	ldr	r2, [sp, #468]	; 0x1d4
   3efc4:	str	r3, [r2]
   3efc8:	ldr	r3, [sp, #368]	; 0x170
   3efcc:	str	r3, [r2, #4]
   3efd0:	ldr	r3, [sp, #20]
   3efd4:	ldrb	r3, [r3, #28]
   3efd8:	eor	r3, r3, #16
   3efdc:	ubfx	r3, r3, #4, #1
   3efe0:	tst	r8, r3
   3efe4:	bne	3e348 <__assert_fail@plt+0x2bd84>
   3efe8:	ldrb	r4, [sp, #352]	; 0x160
   3efec:	ldr	r5, [sp, #304]	; 0x130
   3eff0:	ldr	r6, [sp, #288]	; 0x120
   3eff4:	ldr	ip, [sp, #412]	; 0x19c
   3eff8:	ldr	r3, [sp, #468]	; 0x1d4
   3effc:	add	r2, r3, #4
   3f000:	ldr	r3, [sp, #64]	; 0x40
   3f004:	lsl	r3, r3, #3
   3f008:	add	lr, r2, r3
   3f00c:	ldr	r7, [sp, #308]	; 0x134
   3f010:	b	3ea3c <__assert_fail@plt+0x2c478>
   3f014:	ldr	sl, [sp, #52]	; 0x34
   3f018:	b	3eca8 <__assert_fail@plt+0x2c6e4>
   3f01c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3f020:	strd	r6, [sp, #8]
   3f024:	strd	r8, [sp, #16]
   3f028:	strd	sl, [sp, #24]
   3f02c:	str	lr, [sp, #32]
   3f030:	sub	sp, sp, #132	; 0x84
   3f034:	mov	r5, r0
   3f038:	mov	fp, r1
   3f03c:	mov	r6, r2
   3f040:	mov	r9, r3
   3f044:	mov	r2, #0
   3f048:	str	r2, [sp, #124]	; 0x7c
   3f04c:	ldrb	r3, [r0, #28]
   3f050:	str	r9, [r0, #12]
   3f054:	str	r2, [r0, #8]
   3f058:	str	r2, [r0, #24]
   3f05c:	and	r3, r3, #150	; 0x96
   3f060:	bfi	r3, r2, #1, #2
   3f064:	strb	r3, [r0, #28]
   3f068:	ldr	r4, [r0]
   3f06c:	ldr	r3, [r0, #4]
   3f070:	cmp	r3, #159	; 0x9f
   3f074:	bls	3f338 <__assert_fail@plt+0x2cd74>
   3f078:	mov	r2, #160	; 0xa0
   3f07c:	str	r2, [r5, #8]
   3f080:	mov	r1, #0
   3f084:	mov	r0, r4
   3f088:	bl	12348 <memset@plt>
   3f08c:	mov	r3, #31
   3f090:	str	r3, [r4, #64]	; 0x40
   3f094:	movw	r3, #43689	; 0xaaa9
   3f098:	movt	r3, #2730	; 0xaaa
   3f09c:	cmp	r6, r3
   3f0a0:	bhi	3fc70 <__assert_fail@plt+0x2d6ac>
   3f0a4:	add	r0, r6, #1
   3f0a8:	str	r0, [r4, #4]
   3f0ac:	lsl	r0, r0, #3
   3f0b0:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f0b4:	str	r0, [r4]
   3f0b8:	cmp	r6, #0
   3f0bc:	beq	3f35c <__assert_fail@plt+0x2cd98>
   3f0c0:	mov	r7, #1
   3f0c4:	lsl	r7, r7, #1
   3f0c8:	cmp	r6, r7
   3f0cc:	bcs	3f0c4 <__assert_fail@plt+0x2cb00>
   3f0d0:	mov	r1, r7
   3f0d4:	mov	r0, #12
   3f0d8:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3f0dc:	str	r0, [r4, #32]
   3f0e0:	sub	r7, r7, #1
   3f0e4:	str	r7, [r4, #68]	; 0x44
   3f0e8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   3f0ec:	str	r0, [r4, #92]	; 0x5c
   3f0f0:	mov	r0, #14
   3f0f4:	bl	12450 <nl_langinfo@plt>
   3f0f8:	ldrb	r3, [r0]
   3f0fc:	and	r3, r3, #223	; 0xdf
   3f100:	cmp	r3, #85	; 0x55
   3f104:	bne	3f15c <__assert_fail@plt+0x2cb98>
   3f108:	ldrb	r3, [r0, #1]
   3f10c:	and	r3, r3, #223	; 0xdf
   3f110:	cmp	r3, #84	; 0x54
   3f114:	bne	3f15c <__assert_fail@plt+0x2cb98>
   3f118:	ldrb	r3, [r0, #2]
   3f11c:	and	r3, r3, #223	; 0xdf
   3f120:	cmp	r3, #70	; 0x46
   3f124:	bne	3f15c <__assert_fail@plt+0x2cb98>
   3f128:	ldrb	r3, [r0, #3]
   3f12c:	cmp	r3, #45	; 0x2d
   3f130:	moveq	r3, #4
   3f134:	movne	r3, #3
   3f138:	movw	r1, #42356	; 0xa574
   3f13c:	movt	r1, #4
   3f140:	add	r0, r0, r3
   3f144:	bl	11f1c <strcmp@plt>
   3f148:	cmp	r0, #0
   3f14c:	bne	3f15c <__assert_fail@plt+0x2cb98>
   3f150:	ldrb	r3, [r4, #88]	; 0x58
   3f154:	orr	r3, r3, #4
   3f158:	strb	r3, [r4, #88]	; 0x58
   3f15c:	ldrb	r3, [r4, #88]	; 0x58
   3f160:	bfc	r3, #3, #1
   3f164:	strb	r3, [r4, #88]	; 0x58
   3f168:	ldr	r3, [r4, #92]	; 0x5c
   3f16c:	cmp	r3, #1
   3f170:	ble	3f18c <__assert_fail@plt+0x2cbc8>
   3f174:	ldrb	r3, [r4, #88]	; 0x58
   3f178:	tst	r3, #4
   3f17c:	beq	3f364 <__assert_fail@plt+0x2cda0>
   3f180:	movw	r3, #41780	; 0xa334
   3f184:	movt	r3, #4
   3f188:	str	r3, [r4, #60]	; 0x3c
   3f18c:	ldr	r3, [r4]
   3f190:	cmp	r3, #0
   3f194:	beq	3fc70 <__assert_fail@plt+0x2d6ac>
   3f198:	ldr	r3, [r4, #32]
   3f19c:	cmp	r3, #0
   3f1a0:	beq	3fc70 <__assert_fail@plt+0x2d6ac>
   3f1a4:	mov	r3, #0
   3f1a8:	str	r3, [sp, #124]	; 0x7c
   3f1ac:	movw	r3, #8144	; 0x1fd0
   3f1b0:	movt	r3, #1
   3f1b4:	cmp	r3, #0
   3f1b8:	movne	r3, #1
   3f1bc:	moveq	r3, #0
   3f1c0:	mov	r2, r3
   3f1c4:	movw	r3, #9068	; 0x236c
   3f1c8:	movt	r3, #1
   3f1cc:	cmp	r3, #0
   3f1d0:	movne	r3, #1
   3f1d4:	moveq	r3, #0
   3f1d8:	orr	r3, r2, r3
   3f1dc:	ands	r3, r3, #255	; 0xff
   3f1e0:	str	r3, [sp, #16]
   3f1e4:	beq	3f210 <__assert_fail@plt+0x2cc4c>
   3f1e8:	mov	r1, #0
   3f1ec:	add	r0, r4, #136	; 0x88
   3f1f0:	bl	12018 <pthread_mutex_init@plt>
   3f1f4:	cmp	r0, #0
   3f1f8:	movne	r3, #12
   3f1fc:	strne	r3, [sp, #124]	; 0x7c
   3f200:	bne	3fc78 <__assert_fail@plt+0x2d6b4>
   3f204:	ldr	r3, [sp, #124]	; 0x7c
   3f208:	cmp	r3, #0
   3f20c:	bne	3fc78 <__assert_fail@plt+0x2d6b4>
   3f210:	str	r6, [sp, #12]
   3f214:	ldr	r8, [r5, #20]
   3f218:	and	r7, r9, #4194304	; 0x400000
   3f21c:	orr	sl, r8, r7
   3f220:	mov	r2, #76	; 0x4c
   3f224:	mov	r1, #0
   3f228:	add	r0, sp, #44	; 0x2c
   3f22c:	bl	12348 <memset@plt>
   3f230:	str	fp, [sp, #40]	; 0x28
   3f234:	str	r6, [sp, #88]	; 0x58
   3f238:	str	r6, [sp, #84]	; 0x54
   3f23c:	str	r8, [sp, #104]	; 0x68
   3f240:	adds	r3, r7, #0
   3f244:	movne	r3, #1
   3f248:	strb	r3, [sp, #112]	; 0x70
   3f24c:	adds	r3, sl, #0
   3f250:	movne	r3, #1
   3f254:	strb	r3, [sp, #115]	; 0x73
   3f258:	ldr	r3, [r4, #92]	; 0x5c
   3f25c:	str	r3, [sp, #120]	; 0x78
   3f260:	ldrb	r3, [r4, #88]	; 0x58
   3f264:	ubfx	r2, r3, #2, #1
   3f268:	strb	r2, [sp, #113]	; 0x71
   3f26c:	ubfx	r3, r3, #3, #1
   3f270:	strb	r3, [sp, #114]	; 0x72
   3f274:	str	r6, [sp, #96]	; 0x60
   3f278:	str	r6, [sp, #92]	; 0x5c
   3f27c:	cmp	r6, #0
   3f280:	bgt	3f3f0 <__assert_fail@plt+0x2ce2c>
   3f284:	ldrb	r3, [sp, #115]	; 0x73
   3f288:	cmp	r3, #0
   3f28c:	ldrne	fp, [sp, #44]	; 0x2c
   3f290:	str	fp, [sp, #44]	; 0x2c
   3f294:	cmp	r7, #0
   3f298:	beq	3f414 <__assert_fail@plt+0x2ce50>
   3f29c:	ldr	r3, [r4, #92]	; 0x5c
   3f2a0:	cmp	r3, #1
   3f2a4:	ble	3f408 <__assert_fail@plt+0x2ce44>
   3f2a8:	ldr	r6, [sp, #12]
   3f2ac:	add	r0, sp, #40	; 0x28
   3f2b0:	bl	342e0 <__assert_fail@plt+0x21d1c>
   3f2b4:	cmp	r0, #0
   3f2b8:	bne	3f2f4 <__assert_fail@plt+0x2cd30>
   3f2bc:	ldr	r3, [sp, #72]	; 0x48
   3f2c0:	cmp	r6, r3
   3f2c4:	ble	3f43c <__assert_fail@plt+0x2ce78>
   3f2c8:	ldr	r1, [sp, #76]	; 0x4c
   3f2cc:	ldr	r2, [r4, #92]	; 0x5c
   3f2d0:	ldr	r3, [sp, #68]	; 0x44
   3f2d4:	add	r3, r3, r2
   3f2d8:	cmp	r1, r3
   3f2dc:	bgt	3f43c <__assert_fail@plt+0x2ce78>
   3f2e0:	lsl	r1, r1, #1
   3f2e4:	add	r0, sp, #40	; 0x28
   3f2e8:	bl	33a7c <__assert_fail@plt+0x214b8>
   3f2ec:	cmp	r0, #0
   3f2f0:	beq	3f2ac <__assert_fail@plt+0x2cce8>
   3f2f4:	str	r0, [sp, #124]	; 0x7c
   3f2f8:	mov	r0, r5
   3f2fc:	bl	35ffc <__assert_fail@plt+0x23a38>
   3f300:	add	r0, sp, #40	; 0x28
   3f304:	bl	3605c <__assert_fail@plt+0x23a98>
   3f308:	ldr	r3, [sp, #16]
   3f30c:	cmp	r3, #0
   3f310:	beq	3f31c <__assert_fail@plt+0x2cd58>
   3f314:	add	r0, r4, #136	; 0x88
   3f318:	bl	11f4c <pthread_mutex_destroy@plt>
   3f31c:	mov	r0, r4
   3f320:	bl	3609c <__assert_fail@plt+0x23ad8>
   3f324:	mov	r3, #0
   3f328:	str	r3, [r5]
   3f32c:	str	r3, [r5, #4]
   3f330:	ldr	r0, [sp, #124]	; 0x7c
   3f334:	b	3fb74 <__assert_fail@plt+0x2d5b0>
   3f338:	mov	r1, #160	; 0xa0
   3f33c:	mov	r0, r4
   3f340:	bl	32ce0 <__assert_fail@plt+0x2071c>
   3f344:	subs	r4, r0, #0
   3f348:	beq	3fc28 <__assert_fail@plt+0x2d664>
   3f34c:	mov	r3, #160	; 0xa0
   3f350:	str	r3, [r5, #4]
   3f354:	str	r4, [r5]
   3f358:	b	3f078 <__assert_fail@plt+0x2cab4>
   3f35c:	mov	r7, #1
   3f360:	b	3f0d0 <__assert_fail@plt+0x2cb0c>
   3f364:	mov	r1, #1
   3f368:	mov	r0, #32
   3f36c:	bl	2f510 <__assert_fail@plt+0x1cf4c>
   3f370:	str	r0, [r4, #60]	; 0x3c
   3f374:	cmp	r0, #0
   3f378:	beq	3fc70 <__assert_fail@plt+0x2d6ac>
   3f37c:	mov	r7, #0
   3f380:	b	3f3e4 <__assert_fail@plt+0x2ce20>
   3f384:	ldrb	r3, [r4, #88]	; 0x58
   3f388:	orr	r3, r3, #8
   3f38c:	strb	r3, [r4, #88]	; 0x58
   3f390:	add	sl, sl, #1
   3f394:	add	r8, r8, #1
   3f398:	cmp	sl, #32
   3f39c:	beq	3f3d8 <__assert_fail@plt+0x2ce14>
   3f3a0:	mov	r0, r8
   3f3a4:	bl	12378 <btowc@plt>
   3f3a8:	cmn	r0, #1
   3f3ac:	beq	3f3c4 <__assert_fail@plt+0x2ce00>
   3f3b0:	ldr	r2, [r4, #60]	; 0x3c
   3f3b4:	ldr	r3, [r2, r7]
   3f3b8:	mov	r1, #1
   3f3bc:	orr	r3, r3, r1, lsl sl
   3f3c0:	str	r3, [r2, r7]
   3f3c4:	bics	r3, r8, #127	; 0x7f
   3f3c8:	bne	3f390 <__assert_fail@plt+0x2cdcc>
   3f3cc:	cmp	r0, r8
   3f3d0:	bne	3f384 <__assert_fail@plt+0x2cdc0>
   3f3d4:	b	3f390 <__assert_fail@plt+0x2cdcc>
   3f3d8:	add	r7, r7, #4
   3f3dc:	cmp	r7, #32
   3f3e0:	beq	3f18c <__assert_fail@plt+0x2cbc8>
   3f3e4:	lsl	r8, r7, #3
   3f3e8:	mov	sl, #0
   3f3ec:	b	3f3a0 <__assert_fail@plt+0x2cddc>
   3f3f0:	add	r1, r6, #1
   3f3f4:	add	r0, sp, #40	; 0x28
   3f3f8:	bl	33a7c <__assert_fail@plt+0x214b8>
   3f3fc:	cmp	r0, #0
   3f400:	beq	3f284 <__assert_fail@plt+0x2ccc0>
   3f404:	b	3f2f4 <__assert_fail@plt+0x2cd30>
   3f408:	add	r0, sp, #40	; 0x28
   3f40c:	bl	34c64 <__assert_fail@plt+0x226a0>
   3f410:	b	3f43c <__assert_fail@plt+0x2ce78>
   3f414:	ldr	r3, [r4, #92]	; 0x5c
   3f418:	cmp	r3, #1
   3f41c:	bgt	3f434 <__assert_fail@plt+0x2ce70>
   3f420:	cmp	sl, #0
   3f424:	beq	3f670 <__assert_fail@plt+0x2d0ac>
   3f428:	add	r0, sp, #40	; 0x28
   3f42c:	bl	32e04 <__assert_fail@plt+0x20840>
   3f430:	b	3f43c <__assert_fail@plt+0x2ce78>
   3f434:	add	r0, sp, #40	; 0x28
   3f438:	bl	34148 <__assert_fail@plt+0x21b84>
   3f43c:	mov	r8, #0
   3f440:	str	r8, [sp, #124]	; 0x7c
   3f444:	str	r8, [r5, #24]
   3f448:	ldr	r6, [r5]
   3f44c:	str	r9, [r6, #128]	; 0x80
   3f450:	orr	r2, r9, #8388608	; 0x800000
   3f454:	add	r1, sp, #40	; 0x28
   3f458:	add	r0, sp, #28
   3f45c:	bl	357c0 <__assert_fail@plt+0x231fc>
   3f460:	add	r3, sp, #124	; 0x7c
   3f464:	str	r3, [sp, #4]
   3f468:	str	r8, [sp]
   3f46c:	mov	r3, r9
   3f470:	add	r2, sp, #28
   3f474:	mov	r1, r5
   3f478:	add	r0, sp, #40	; 0x28
   3f47c:	bl	3b4a8 <__assert_fail@plt+0x28ee4>
   3f480:	mov	r8, r0
   3f484:	clz	r0, r0
   3f488:	lsr	r0, r0, #5
   3f48c:	ldr	r3, [sp, #124]	; 0x7c
   3f490:	cmp	r3, #0
   3f494:	moveq	r0, #0
   3f498:	cmp	r0, #0
   3f49c:	bne	3fc64 <__assert_fail@plt+0x2d6a0>
   3f4a0:	mov	r3, #2
   3f4a4:	mov	r2, #0
   3f4a8:	mov	r1, r2
   3f4ac:	mov	r0, r6
   3f4b0:	bl	33d58 <__assert_fail@plt+0x21794>
   3f4b4:	mov	r9, r0
   3f4b8:	cmp	r8, #0
   3f4bc:	beq	3f4d4 <__assert_fail@plt+0x2cf10>
   3f4c0:	mov	r3, #16
   3f4c4:	mov	r2, r9
   3f4c8:	mov	r1, r8
   3f4cc:	mov	r0, r6
   3f4d0:	bl	33d58 <__assert_fail@plt+0x21794>
   3f4d4:	cmp	r0, #0
   3f4d8:	cmpne	r9, #0
   3f4dc:	moveq	r3, #12
   3f4e0:	streq	r3, [sp, #124]	; 0x7c
   3f4e4:	beq	3fc64 <__assert_fail@plt+0x2d6a0>
   3f4e8:	str	r0, [r4, #52]	; 0x34
   3f4ec:	ldr	r6, [r5]
   3f4f0:	ldr	r0, [r6, #4]
   3f4f4:	lsl	r0, r0, #2
   3f4f8:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f4fc:	str	r0, [r6, #12]
   3f500:	ldr	r0, [r6, #4]
   3f504:	lsl	r0, r0, #2
   3f508:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f50c:	str	r0, [r6, #16]
   3f510:	ldr	r0, [r6, #4]
   3f514:	add	r0, r0, r0, lsl #1
   3f518:	lsl	r0, r0, #2
   3f51c:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f520:	str	r0, [r6, #20]
   3f524:	ldr	r0, [r6, #4]
   3f528:	add	r0, r0, r0, lsl #1
   3f52c:	lsl	r0, r0, #2
   3f530:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f534:	str	r0, [r6, #24]
   3f538:	ldr	r3, [r6, #12]
   3f53c:	cmp	r3, #0
   3f540:	beq	3fc5c <__assert_fail@plt+0x2d698>
   3f544:	ldr	r3, [r6, #16]
   3f548:	cmp	r3, #0
   3f54c:	beq	3fc30 <__assert_fail@plt+0x2d66c>
   3f550:	ldr	r3, [r6, #20]
   3f554:	clz	sl, r0
   3f558:	lsr	sl, sl, #5
   3f55c:	cmp	r3, #0
   3f560:	moveq	sl, #1
   3f564:	cmp	sl, #0
   3f568:	bne	3fc38 <__assert_fail@plt+0x2d674>
   3f56c:	ldr	r0, [r5, #24]
   3f570:	lsl	r0, r0, #2
   3f574:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f578:	str	r0, [r6, #132]	; 0x84
   3f57c:	cmp	r0, #0
   3f580:	beq	3f5f8 <__assert_fail@plt+0x2d034>
   3f584:	ldr	r3, [r5, #24]
   3f588:	cmp	r3, #0
   3f58c:	beq	3f5ac <__assert_fail@plt+0x2cfe8>
   3f590:	mov	r3, #0
   3f594:	ldr	r2, [r6, #132]	; 0x84
   3f598:	str	r3, [r2, r3, lsl #2]
   3f59c:	add	r3, r3, #1
   3f5a0:	ldr	r2, [r5, #24]
   3f5a4:	cmp	r2, r3
   3f5a8:	bhi	3f594 <__assert_fail@plt+0x2cfd0>
   3f5ac:	mov	r2, r6
   3f5b0:	movw	r1, #12480	; 0x30c0
   3f5b4:	movt	r1, #3
   3f5b8:	ldr	r0, [r6, #52]	; 0x34
   3f5bc:	bl	33044 <__assert_fail@plt+0x20a80>
   3f5c0:	ldr	ip, [r5, #24]
   3f5c4:	cmp	ip, #0
   3f5c8:	beq	3f688 <__assert_fail@plt+0x2d0c4>
   3f5cc:	ldr	r2, [r6, #132]	; 0x84
   3f5d0:	ldr	r3, [r2]
   3f5d4:	cmp	r3, #0
   3f5d8:	bne	3f5f8 <__assert_fail@plt+0x2d034>
   3f5dc:	mov	r0, ip
   3f5e0:	add	r3, r3, #1
   3f5e4:	cmp	r0, r3
   3f5e8:	beq	3f680 <__assert_fail@plt+0x2d0bc>
   3f5ec:	ldr	r1, [r2, #4]!
   3f5f0:	cmp	r1, r3
   3f5f4:	beq	3f5e0 <__assert_fail@plt+0x2d01c>
   3f5f8:	mov	r2, r5
   3f5fc:	movw	r1, #16120	; 0x3ef8
   3f600:	movt	r1, #3
   3f604:	ldr	r0, [r6, #52]	; 0x34
   3f608:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3f60c:	cmp	r0, #0
   3f610:	bne	3fc54 <__assert_fail@plt+0x2d690>
   3f614:	mov	r2, r6
   3f618:	movw	r1, #23396	; 0x5b64
   3f61c:	movt	r1, #3
   3f620:	ldr	r0, [r6, #52]	; 0x34
   3f624:	bl	32fb0 <__assert_fail@plt+0x209ec>
   3f628:	cmp	r0, #0
   3f62c:	bne	3fc54 <__assert_fail@plt+0x2d690>
   3f630:	mov	r2, r6
   3f634:	movw	r1, #12640	; 0x3160
   3f638:	movt	r1, #3
   3f63c:	ldr	r0, [r6, #52]	; 0x34
   3f640:	bl	33044 <__assert_fail@plt+0x20a80>
   3f644:	mov	r2, r6
   3f648:	movw	r1, #26020	; 0x65a4
   3f64c:	movt	r1, #3
   3f650:	ldr	r0, [r6, #52]	; 0x34
   3f654:	bl	33044 <__assert_fail@plt+0x20a80>
   3f658:	subs	r3, r0, #0
   3f65c:	str	r3, [sp, #12]
   3f660:	bne	3fc40 <__assert_fail@plt+0x2d67c>
   3f664:	mov	r8, sl
   3f668:	mov	r9, r3
   3f66c:	b	3f6cc <__assert_fail@plt+0x2d108>
   3f670:	ldr	r3, [sp, #76]	; 0x4c
   3f674:	str	r3, [sp, #68]	; 0x44
   3f678:	str	r3, [sp, #72]	; 0x48
   3f67c:	b	3f43c <__assert_fail@plt+0x2ce78>
   3f680:	cmp	r3, ip
   3f684:	bne	3f5f8 <__assert_fail@plt+0x2d034>
   3f688:	ldr	r0, [r6, #132]	; 0x84
   3f68c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3f690:	mov	r3, #0
   3f694:	str	r3, [r6, #132]	; 0x84
   3f698:	b	3f5f8 <__assert_fail@plt+0x2d034>
   3f69c:	cmp	r8, #0
   3f6a0:	beq	3f71c <__assert_fail@plt+0x2d158>
   3f6a4:	mov	r8, sl
   3f6a8:	ldr	r9, [sp, #12]
   3f6ac:	b	3f6cc <__assert_fail@plt+0x2d108>
   3f6b0:	ldr	r0, [sp, #36]	; 0x24
   3f6b4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3f6b8:	mov	r8, #1
   3f6bc:	add	r9, r9, #1
   3f6c0:	ldr	r3, [r6, #8]
   3f6c4:	cmp	r3, r9
   3f6c8:	beq	3f69c <__assert_fail@plt+0x2d0d8>
   3f6cc:	add	fp, r9, r9, lsl #1
   3f6d0:	lsl	fp, fp, #2
   3f6d4:	ldr	r3, [r6, #24]
   3f6d8:	add	r3, r3, fp
   3f6dc:	ldr	r3, [r3, #4]
   3f6e0:	cmp	r3, #0
   3f6e4:	bne	3f6bc <__assert_fail@plt+0x2d0f8>
   3f6e8:	mov	r3, #1
   3f6ec:	mov	r2, r9
   3f6f0:	mov	r1, r6
   3f6f4:	add	r0, sp, #28
   3f6f8:	bl	36e78 <__assert_fail@plt+0x248b4>
   3f6fc:	cmp	r0, #0
   3f700:	bne	3fc54 <__assert_fail@plt+0x2d690>
   3f704:	ldr	r3, [r6, #24]
   3f708:	add	fp, r3, fp
   3f70c:	ldr	r3, [fp, #4]
   3f710:	cmp	r3, #0
   3f714:	bne	3f6bc <__assert_fail@plt+0x2d0f8>
   3f718:	b	3f6b0 <__assert_fail@plt+0x2d0ec>
   3f71c:	ldrb	r3, [r5, #28]
   3f720:	tst	r3, #16
   3f724:	beq	3f890 <__assert_fail@plt+0x2d2cc>
   3f728:	ldr	r3, [r6, #76]	; 0x4c
   3f72c:	cmp	r3, #0
   3f730:	beq	3f818 <__assert_fail@plt+0x2d254>
   3f734:	ldr	r0, [r6, #8]
   3f738:	add	r0, r0, r0, lsl #1
   3f73c:	lsl	r0, r0, #2
   3f740:	bl	32148 <__assert_fail@plt+0x1fb84>
   3f744:	str	r0, [r6, #28]
   3f748:	cmp	r0, #0
   3f74c:	beq	3fc48 <__assert_fail@plt+0x2d684>
   3f750:	ldr	r3, [r6, #8]
   3f754:	cmp	r3, #0
   3f758:	beq	3f818 <__assert_fail@plt+0x2d254>
   3f75c:	ldr	r1, [sp, #12]
   3f760:	mov	r3, #0
   3f764:	mov	r2, r3
   3f768:	ldr	ip, [r6, #28]
   3f76c:	add	r0, ip, r3
   3f770:	str	r2, [ip, r3]
   3f774:	str	r2, [r0, #4]
   3f778:	str	r2, [r0, #8]
   3f77c:	add	r1, r1, #1
   3f780:	ldr	r0, [r6, #8]
   3f784:	add	r3, r3, #12
   3f788:	cmp	r0, r1
   3f78c:	bhi	3f768 <__assert_fail@plt+0x2d1a4>
   3f790:	cmp	r0, #0
   3f794:	beq	3f818 <__assert_fail@plt+0x2d254>
   3f798:	ldr	r3, [sp, #12]
   3f79c:	mov	fp, #0
   3f7a0:	str	r7, [sp, #20]
   3f7a4:	mov	r7, r3
   3f7a8:	ldr	r3, [r6, #24]
   3f7ac:	add	r3, r3, fp
   3f7b0:	ldr	sl, [r3, #8]
   3f7b4:	ldr	r3, [r3, #4]
   3f7b8:	cmp	r3, #0
   3f7bc:	ble	3f800 <__assert_fail@plt+0x2d23c>
   3f7c0:	sub	sl, sl, #4
   3f7c4:	ldr	r9, [sp, #12]
   3f7c8:	ldr	r0, [sl, #4]!
   3f7cc:	add	r0, r0, r0, lsl #1
   3f7d0:	ldr	r3, [r6, #28]
   3f7d4:	mov	r1, r7
   3f7d8:	add	r0, r3, r0, lsl #2
   3f7dc:	bl	33b40 <__assert_fail@plt+0x2157c>
   3f7e0:	cmp	r0, #0
   3f7e4:	beq	3fc50 <__assert_fail@plt+0x2d68c>
   3f7e8:	add	r9, r9, #1
   3f7ec:	ldr	r3, [r6, #24]
   3f7f0:	add	r3, r3, fp
   3f7f4:	ldr	r3, [r3, #4]
   3f7f8:	cmp	r9, r3
   3f7fc:	blt	3f7c8 <__assert_fail@plt+0x2d204>
   3f800:	add	r7, r7, #1
   3f804:	add	fp, fp, #12
   3f808:	ldr	r3, [r6, #8]
   3f80c:	cmp	r7, r3
   3f810:	bcc	3f7a8 <__assert_fail@plt+0x2d1e4>
   3f814:	ldr	r7, [sp, #20]
   3f818:	mov	r3, #0
   3f81c:	str	r3, [sp, #124]	; 0x7c
   3f820:	ldrb	r3, [r4, #88]	; 0x58
   3f824:	ubfx	r3, r3, #2, #1
   3f828:	cmp	r7, #0
   3f82c:	moveq	r7, r3
   3f830:	movne	r7, #0
   3f834:	cmp	r7, #0
   3f838:	bne	3f8ac <__assert_fail@plt+0x2d2e8>
   3f83c:	ldr	r3, [r4, #52]	; 0x34
   3f840:	ldr	r3, [r3, #12]
   3f844:	ldr	r1, [r3, #28]
   3f848:	str	r1, [r4, #72]	; 0x48
   3f84c:	add	r1, r1, r1, lsl #1
   3f850:	ldr	r3, [r4, #24]
   3f854:	add	r1, r3, r1, lsl #2
   3f858:	add	r0, sp, #28
   3f85c:	bl	34864 <__assert_fail@plt+0x222a0>
   3f860:	mov	r7, r0
   3f864:	str	r0, [sp, #24]
   3f868:	cmp	r0, #0
   3f86c:	bne	3fb50 <__assert_fail@plt+0x2d58c>
   3f870:	ldr	r3, [r4, #76]	; 0x4c
   3f874:	cmp	r3, #0
   3f878:	ble	3fb0c <__assert_fail@plt+0x2d548>
   3f87c:	ldr	r0, [sp, #32]
   3f880:	cmp	r0, #0
   3f884:	ble	3fb0c <__assert_fail@plt+0x2d548>
   3f888:	mov	r6, r7
   3f88c:	b	3fab0 <__assert_fail@plt+0x2d4ec>
   3f890:	ldr	r3, [r5, #24]
   3f894:	cmp	r3, #0
   3f898:	beq	3f728 <__assert_fail@plt+0x2d164>
   3f89c:	ldrb	r3, [r6, #88]	; 0x58
   3f8a0:	tst	r3, #1
   3f8a4:	bne	3f734 <__assert_fail@plt+0x2d170>
   3f8a8:	b	3f728 <__assert_fail@plt+0x2d164>
   3f8ac:	ldr	r3, [r5, #20]
   3f8b0:	cmp	r3, #0
   3f8b4:	bne	3f83c <__assert_fail@plt+0x2d278>
   3f8b8:	ldr	r0, [r4, #8]
   3f8bc:	cmp	r0, #0
   3f8c0:	beq	3fa14 <__assert_fail@plt+0x2d450>
   3f8c4:	ldr	r2, [r4]
   3f8c8:	mov	ip, r8
   3f8cc:	ldr	r1, [sp, #12]
   3f8d0:	mov	lr, r7
   3f8d4:	b	3f934 <__assert_fail@plt+0x2d370>
   3f8d8:	mov	ip, lr
   3f8dc:	b	3f924 <__assert_fail@plt+0x2d360>
   3f8e0:	ldr	r3, [r2]
   3f8e4:	ldr	r6, [r3, #16]
   3f8e8:	cmp	r6, #0
   3f8ec:	bne	3f83c <__assert_fail@plt+0x2d278>
   3f8f0:	ldr	r6, [r3, #20]
   3f8f4:	cmp	r6, #0
   3f8f8:	bne	3f83c <__assert_fail@plt+0x2d278>
   3f8fc:	ldr	r6, [r3, #24]
   3f900:	cmp	r6, #0
   3f904:	bne	3f83c <__assert_fail@plt+0x2d278>
   3f908:	ldr	r3, [r3, #28]
   3f90c:	cmp	r3, #0
   3f910:	beq	3f924 <__assert_fail@plt+0x2d360>
   3f914:	b	3f83c <__assert_fail@plt+0x2d278>
   3f918:	ldrsb	r3, [r2]
   3f91c:	cmp	r3, #0
   3f920:	movlt	r8, r7
   3f924:	add	r1, r1, #1
   3f928:	add	r2, r2, #8
   3f92c:	cmp	r0, r1
   3f930:	beq	3f9ac <__assert_fail@plt+0x2d3e8>
   3f934:	ldrb	r3, [r2, #4]
   3f938:	sub	r3, r3, #1
   3f93c:	cmp	r3, #11
   3f940:	ldrls	pc, [pc, r3, lsl #2]
   3f944:	b	3f9a8 <__assert_fail@plt+0x2d3e4>
   3f948:	andeq	pc, r3, r8, lsl r9	; <UNPREDICTABLE>
   3f94c:	andeq	pc, r3, r4, lsr #18
   3f950:	andeq	pc, r3, r0, ror #17
   3f954:	andeq	pc, r3, r4, lsr #18
   3f958:	ldrdeq	pc, [r3], -r8
   3f95c:	andeq	pc, r3, ip, lsr r8	; <UNPREDICTABLE>
   3f960:	andeq	pc, r3, r8, lsr #19
   3f964:	andeq	pc, r3, r4, lsr #18
   3f968:	andeq	pc, r3, r4, lsr #18
   3f96c:	andeq	pc, r3, r4, lsr #18
   3f970:	andeq	pc, r3, r4, lsr #18
   3f974:	andeq	pc, r3, r8, ror r9	; <UNPREDICTABLE>
   3f978:	ldr	r3, [r2]
   3f97c:	cmp	r3, #32
   3f980:	beq	3f924 <__assert_fail@plt+0x2d360>
   3f984:	bls	3f99c <__assert_fail@plt+0x2d3d8>
   3f988:	cmp	r3, #64	; 0x40
   3f98c:	beq	3f924 <__assert_fail@plt+0x2d360>
   3f990:	cmp	r3, #128	; 0x80
   3f994:	beq	3f924 <__assert_fail@plt+0x2d360>
   3f998:	b	3f83c <__assert_fail@plt+0x2d278>
   3f99c:	cmp	r3, #16
   3f9a0:	beq	3f924 <__assert_fail@plt+0x2d360>
   3f9a4:	b	3f83c <__assert_fail@plt+0x2d278>
   3f9a8:	bl	12570 <abort@plt>
   3f9ac:	orr	r8, r8, ip
   3f9b0:	tst	r8, #255	; 0xff
   3f9b4:	beq	3fa18 <__assert_fail@plt+0x2d454>
   3f9b8:	mov	lr, #7
   3f9bc:	ldr	r3, [sp, #12]
   3f9c0:	b	3f9e0 <__assert_fail@plt+0x2d41c>
   3f9c4:	ldrsb	r2, [r6, r0]
   3f9c8:	cmp	r2, #0
   3f9cc:	blt	3fa04 <__assert_fail@plt+0x2d440>
   3f9d0:	add	r3, r3, #1
   3f9d4:	ldr	r2, [r4, #8]
   3f9d8:	cmp	r3, r2
   3f9dc:	bcs	3fa18 <__assert_fail@plt+0x2d454>
   3f9e0:	lsl	r0, r3, #3
   3f9e4:	ldr	r6, [r4]
   3f9e8:	add	r1, r6, r0
   3f9ec:	ldrb	r2, [r1, #4]
   3f9f0:	cmp	r2, #1
   3f9f4:	beq	3f9c4 <__assert_fail@plt+0x2d400>
   3f9f8:	cmp	r2, #5
   3f9fc:	strbeq	lr, [r1, #4]
   3fa00:	b	3f9d0 <__assert_fail@plt+0x2d40c>
   3fa04:	ldrb	r2, [r1, #6]
   3fa08:	bfc	r2, #5, #1
   3fa0c:	strb	r2, [r1, #6]
   3fa10:	b	3f9d0 <__assert_fail@plt+0x2d40c>
   3fa14:	mov	ip, r8
   3fa18:	mov	r3, #1
   3fa1c:	str	r3, [r4, #92]	; 0x5c
   3fa20:	ldrb	r3, [r4, #88]	; 0x58
   3fa24:	ldr	r2, [r4, #76]	; 0x4c
   3fa28:	cmp	r2, #0
   3fa2c:	orrgt	ip, ip, #1
   3fa30:	and	r3, r3, #251	; 0xfb
   3fa34:	bfi	r3, ip, #1, #1
   3fa38:	strb	r3, [r4, #88]	; 0x58
   3fa3c:	b	3f83c <__assert_fail@plt+0x2d278>
   3fa40:	add	r1, r1, #1
   3fa44:	cmp	r0, r1
   3fa48:	beq	3faa0 <__assert_fail@plt+0x2d4dc>
   3fa4c:	ldr	r8, [r2, #4]!
   3fa50:	add	r9, ip, r8, lsl #3
   3fa54:	ldrb	r9, [r9, #4]
   3fa58:	cmp	r9, #9
   3fa5c:	bne	3fa40 <__assert_fail@plt+0x2d47c>
   3fa60:	ldr	r9, [ip, r8, lsl #3]
   3fa64:	ldr	r8, [lr]
   3fa68:	cmp	r9, r8
   3fa6c:	bne	3fa40 <__assert_fail@plt+0x2d47c>
   3fa70:	cmp	r0, r1
   3fa74:	beq	3faa0 <__assert_fail@plt+0x2d4dc>
   3fa78:	ldr	r2, [r4, #20]
   3fa7c:	add	r3, r3, r3, lsl #1
   3fa80:	add	r3, r2, r3, lsl #2
   3fa84:	ldr	r3, [r3, #8]
   3fa88:	ldr	r8, [r3]
   3fa8c:	mov	r1, r8
   3fa90:	add	r0, sp, #28
   3fa94:	bl	32ec8 <__assert_fail@plt+0x20904>
   3fa98:	cmp	r0, #0
   3fa9c:	beq	3fae8 <__assert_fail@plt+0x2d524>
   3faa0:	add	r6, r6, #1
   3faa4:	ldr	r0, [sp, #32]
   3faa8:	cmp	r0, r6
   3faac:	ble	3fb0c <__assert_fail@plt+0x2d548>
   3fab0:	ldr	r2, [sp, #36]	; 0x24
   3fab4:	ldr	ip, [r4]
   3fab8:	ldr	r3, [r2, r6, lsl #2]
   3fabc:	add	lr, ip, r3, lsl #3
   3fac0:	ldrb	r1, [lr, #4]
   3fac4:	cmp	r1, #4
   3fac8:	bne	3faa0 <__assert_fail@plt+0x2d4dc>
   3facc:	cmp	r0, #0
   3fad0:	ble	3fae0 <__assert_fail@plt+0x2d51c>
   3fad4:	sub	r2, r2, #4
   3fad8:	mov	r1, r7
   3fadc:	b	3fa4c <__assert_fail@plt+0x2d488>
   3fae0:	mov	r1, r7
   3fae4:	b	3fa70 <__assert_fail@plt+0x2d4ac>
   3fae8:	add	r8, r8, r8, lsl #1
   3faec:	ldr	r1, [r4, #24]
   3faf0:	add	r1, r1, r8, lsl #2
   3faf4:	add	r0, sp, #28
   3faf8:	bl	36cc8 <__assert_fail@plt+0x24704>
   3fafc:	subs	r6, r0, #0
   3fb00:	beq	3faa0 <__assert_fail@plt+0x2d4dc>
   3fb04:	mov	r7, r6
   3fb08:	b	3fb50 <__assert_fail@plt+0x2d58c>
   3fb0c:	mov	r3, #0
   3fb10:	add	r2, sp, #28
   3fb14:	mov	r1, r4
   3fb18:	add	r0, sp, #24
   3fb1c:	bl	35d10 <__assert_fail@plt+0x2374c>
   3fb20:	str	r0, [r4, #36]	; 0x24
   3fb24:	cmp	r0, #0
   3fb28:	ldreq	r7, [sp, #24]
   3fb2c:	beq	3fb50 <__assert_fail@plt+0x2d58c>
   3fb30:	ldrsb	r3, [r0, #52]	; 0x34
   3fb34:	cmp	r3, #0
   3fb38:	strge	r0, [r4, #48]	; 0x30
   3fb3c:	strge	r0, [r4, #44]	; 0x2c
   3fb40:	strge	r0, [r4, #40]	; 0x28
   3fb44:	blt	3fb90 <__assert_fail@plt+0x2d5cc>
   3fb48:	ldr	r0, [sp, #36]	; 0x24
   3fb4c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3fb50:	str	r7, [sp, #124]	; 0x7c
   3fb54:	mov	r0, r5
   3fb58:	bl	35ffc <__assert_fail@plt+0x23a38>
   3fb5c:	add	r0, sp, #40	; 0x28
   3fb60:	bl	3605c <__assert_fail@plt+0x23a98>
   3fb64:	ldr	r3, [sp, #124]	; 0x7c
   3fb68:	cmp	r3, #0
   3fb6c:	bne	3fbfc <__assert_fail@plt+0x2d638>
   3fb70:	ldr	r0, [sp, #124]	; 0x7c
   3fb74:	add	sp, sp, #132	; 0x84
   3fb78:	ldrd	r4, [sp]
   3fb7c:	ldrd	r6, [sp, #8]
   3fb80:	ldrd	r8, [sp, #16]
   3fb84:	ldrd	sl, [sp, #24]
   3fb88:	add	sp, sp, #32
   3fb8c:	pop	{pc}		; (ldr pc, [sp], #4)
   3fb90:	mov	r3, #1
   3fb94:	add	r2, sp, #28
   3fb98:	mov	r1, r4
   3fb9c:	add	r0, sp, #24
   3fba0:	bl	35d10 <__assert_fail@plt+0x2374c>
   3fba4:	str	r0, [r4, #40]	; 0x28
   3fba8:	mov	r3, #2
   3fbac:	add	r2, sp, #28
   3fbb0:	mov	r1, r4
   3fbb4:	add	r0, sp, #24
   3fbb8:	bl	35d10 <__assert_fail@plt+0x2374c>
   3fbbc:	str	r0, [r4, #44]	; 0x2c
   3fbc0:	mov	r3, #6
   3fbc4:	add	r2, sp, #28
   3fbc8:	mov	r1, r4
   3fbcc:	add	r0, sp, #24
   3fbd0:	bl	35d10 <__assert_fail@plt+0x2374c>
   3fbd4:	str	r0, [r4, #48]	; 0x30
   3fbd8:	ldr	r3, [r4, #40]	; 0x28
   3fbdc:	cmp	r3, #0
   3fbe0:	beq	3fbf4 <__assert_fail@plt+0x2d630>
   3fbe4:	ldr	r3, [r4, #44]	; 0x2c
   3fbe8:	cmp	r0, #0
   3fbec:	cmpne	r3, #0
   3fbf0:	bne	3fb48 <__assert_fail@plt+0x2d584>
   3fbf4:	ldr	r7, [sp, #24]
   3fbf8:	b	3fb50 <__assert_fail@plt+0x2d58c>
   3fbfc:	ldr	r3, [sp, #16]
   3fc00:	cmp	r3, #0
   3fc04:	beq	3fc10 <__assert_fail@plt+0x2d64c>
   3fc08:	add	r0, r4, #136	; 0x88
   3fc0c:	bl	11f4c <pthread_mutex_destroy@plt>
   3fc10:	mov	r0, r4
   3fc14:	bl	3609c <__assert_fail@plt+0x23ad8>
   3fc18:	mov	r3, #0
   3fc1c:	str	r3, [r5]
   3fc20:	str	r3, [r5, #4]
   3fc24:	b	3fb70 <__assert_fail@plt+0x2d5ac>
   3fc28:	mov	r0, #12
   3fc2c:	b	3fb74 <__assert_fail@plt+0x2d5b0>
   3fc30:	mov	r0, #12
   3fc34:	b	3fc54 <__assert_fail@plt+0x2d690>
   3fc38:	mov	r0, #12
   3fc3c:	b	3fc54 <__assert_fail@plt+0x2d690>
   3fc40:	ldr	r0, [sp, #12]
   3fc44:	b	3fc54 <__assert_fail@plt+0x2d690>
   3fc48:	mov	r0, #12
   3fc4c:	b	3fc54 <__assert_fail@plt+0x2d690>
   3fc50:	mov	r0, #12
   3fc54:	str	r0, [sp, #124]	; 0x7c
   3fc58:	b	3f2f8 <__assert_fail@plt+0x2cd34>
   3fc5c:	mov	r0, #12
   3fc60:	b	3fc54 <__assert_fail@plt+0x2d690>
   3fc64:	mov	r3, #0
   3fc68:	str	r3, [r4, #52]	; 0x34
   3fc6c:	b	3f2f8 <__assert_fail@plt+0x2cd34>
   3fc70:	mov	r3, #12
   3fc74:	str	r3, [sp, #124]	; 0x7c
   3fc78:	mov	r0, r4
   3fc7c:	bl	3609c <__assert_fail@plt+0x23ad8>
   3fc80:	mov	r3, #0
   3fc84:	str	r3, [r5]
   3fc88:	str	r3, [r5, #4]
   3fc8c:	ldr	r0, [sp, #124]	; 0x7c
   3fc90:	b	3fb74 <__assert_fail@plt+0x2d5b0>
   3fc94:	str	r4, [sp, #-8]!
   3fc98:	str	lr, [sp, #4]
   3fc9c:	mov	ip, r2
   3fca0:	movw	r3, #48832	; 0xbec0
   3fca4:	movt	r3, #5
   3fca8:	ldr	r3, [r3]
   3fcac:	ubfx	lr, r3, #25, #1
   3fcb0:	ldrb	r2, [r2, #28]
   3fcb4:	bfi	r2, lr, #4, #1
   3fcb8:	mvn	r2, r2, lsl #25
   3fcbc:	mvn	r2, r2, lsr #25
   3fcc0:	strb	r2, [ip, #28]
   3fcc4:	mov	r2, r1
   3fcc8:	mov	r1, r0
   3fccc:	mov	r0, ip
   3fcd0:	bl	3f01c <__assert_fail@plt+0x2ca58>
   3fcd4:	cmp	r0, #0
   3fcd8:	moveq	r0, #0
   3fcdc:	beq	3fd04 <__assert_fail@plt+0x2d740>
   3fce0:	movw	r3, #41780	; 0xa334
   3fce4:	movt	r3, #4
   3fce8:	add	r1, r3, #32
   3fcec:	add	r3, r3, r0, lsl #2
   3fcf0:	ldr	r3, [r3, #416]	; 0x1a0
   3fcf4:	mov	r2, #5
   3fcf8:	add	r1, r1, r3
   3fcfc:	mov	r0, #0
   3fd00:	bl	12084 <dcgettext@plt>
   3fd04:	ldr	r4, [sp]
   3fd08:	add	sp, sp, #4
   3fd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   3fd10:	movw	r3, #48832	; 0xbec0
   3fd14:	movt	r3, #5
   3fd18:	ldr	r2, [r3]
   3fd1c:	str	r0, [r3]
   3fd20:	mov	r0, r2
   3fd24:	bx	lr
   3fd28:	strd	r4, [sp, #-16]!
   3fd2c:	str	r6, [sp, #8]
   3fd30:	str	lr, [sp, #12]
   3fd34:	mov	r5, r0
   3fd38:	ldr	r4, [r0]
   3fd3c:	ldr	r6, [r0, #16]
   3fd40:	mov	r2, #256	; 0x100
   3fd44:	mov	r1, #0
   3fd48:	mov	r0, r6
   3fd4c:	bl	12348 <memset@plt>
   3fd50:	mov	r2, r6
   3fd54:	ldr	r1, [r4, #36]	; 0x24
   3fd58:	mov	r0, r5
   3fd5c:	bl	38ff4 <__assert_fail@plt+0x26a30>
   3fd60:	ldr	r1, [r4, #40]	; 0x28
   3fd64:	ldr	r3, [r4, #36]	; 0x24
   3fd68:	cmp	r3, r1
   3fd6c:	beq	3fd7c <__assert_fail@plt+0x2d7b8>
   3fd70:	mov	r2, r6
   3fd74:	mov	r0, r5
   3fd78:	bl	38ff4 <__assert_fail@plt+0x26a30>
   3fd7c:	ldr	r1, [r4, #44]	; 0x2c
   3fd80:	ldr	r3, [r4, #36]	; 0x24
   3fd84:	cmp	r3, r1
   3fd88:	beq	3fd98 <__assert_fail@plt+0x2d7d4>
   3fd8c:	mov	r2, r6
   3fd90:	mov	r0, r5
   3fd94:	bl	38ff4 <__assert_fail@plt+0x26a30>
   3fd98:	ldr	r1, [r4, #48]	; 0x30
   3fd9c:	ldr	r3, [r4, #36]	; 0x24
   3fda0:	cmp	r3, r1
   3fda4:	beq	3fdb4 <__assert_fail@plt+0x2d7f0>
   3fda8:	mov	r2, r6
   3fdac:	mov	r0, r5
   3fdb0:	bl	38ff4 <__assert_fail@plt+0x26a30>
   3fdb4:	ldrb	r3, [r5, #28]
   3fdb8:	orr	r3, r3, #8
   3fdbc:	strb	r3, [r5, #28]
   3fdc0:	mov	r0, #0
   3fdc4:	ldrd	r4, [sp]
   3fdc8:	ldr	r6, [sp, #8]
   3fdcc:	add	sp, sp, #12
   3fdd0:	pop	{pc}		; (ldr pc, [sp], #4)
   3fdd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3fdd8:	strd	r6, [sp, #8]
   3fddc:	strd	r8, [sp, #16]
   3fde0:	strd	sl, [sp, #24]
   3fde4:	str	lr, [sp, #32]
   3fde8:	sub	sp, sp, #52	; 0x34
   3fdec:	ldr	ip, [sp, #88]	; 0x58
   3fdf0:	ldr	r7, [sp, #96]	; 0x60
   3fdf4:	ldr	r9, [r0]
   3fdf8:	add	r8, r3, ip
   3fdfc:	cmp	r3, r2
   3fe00:	movle	lr, #0
   3fe04:	movgt	lr, #1
   3fe08:	orrs	lr, lr, r3, lsr #31
   3fe0c:	bne	40170 <__assert_fail@plt+0x2dbac>
   3fe10:	mov	r5, r3
   3fe14:	str	r2, [sp, #32]
   3fe18:	str	r1, [sp, #36]	; 0x24
   3fe1c:	mov	r6, r0
   3fe20:	cmp	r8, r2
   3fe24:	bgt	3ff7c <__assert_fail@plt+0x2d9b8>
   3fe28:	cmp	ip, #0
   3fe2c:	cmpge	r3, r8
   3fe30:	bgt	3ff84 <__assert_fail@plt+0x2d9c0>
   3fe34:	cmp	r8, #0
   3fe38:	blt	40180 <__assert_fail@plt+0x2dbbc>
   3fe3c:	cmp	r3, r8
   3fe40:	movgt	r3, #0
   3fe44:	movle	r3, #1
   3fe48:	ands	r3, r3, ip, lsr #31
   3fe4c:	bne	40180 <__assert_fail@plt+0x2dbbc>
   3fe50:	movw	r3, #8144	; 0x1fd0
   3fe54:	movt	r3, #1
   3fe58:	cmp	r3, #0
   3fe5c:	movne	r3, #1
   3fe60:	moveq	r3, #0
   3fe64:	mov	r2, r3
   3fe68:	movw	r3, #9068	; 0x236c
   3fe6c:	movt	r3, #1
   3fe70:	cmp	r3, #0
   3fe74:	movne	r3, #1
   3fe78:	moveq	r3, #0
   3fe7c:	orr	r3, r2, r3
   3fe80:	ands	r3, r3, #255	; 0xff
   3fe84:	str	r3, [sp, #28]
   3fe88:	beq	3fe9c <__assert_fail@plt+0x2d8d8>
   3fe8c:	add	r0, r9, #136	; 0x88
   3fe90:	bl	11fac <pthread_mutex_lock@plt>
   3fe94:	mov	r3, #1
   3fe98:	str	r3, [sp, #28]
   3fe9c:	ldrb	r3, [r6, #28]
   3fea0:	ubfx	fp, r3, #5, #2
   3fea4:	cmp	r8, r5
   3fea8:	ble	3fec0 <__assert_fail@plt+0x2d8fc>
   3feac:	ldr	r2, [r6, #16]
   3feb0:	cmp	r2, #0
   3feb4:	beq	3fec0 <__assert_fail@plt+0x2d8fc>
   3feb8:	tst	r3, #8
   3febc:	beq	3ff8c <__assert_fail@plt+0x2d9c8>
   3fec0:	ldrb	r3, [r6, #28]
   3fec4:	tst	r3, #16
   3fec8:	bne	3ffbc <__assert_fail@plt+0x2d9f8>
   3fecc:	cmp	r7, #0
   3fed0:	moveq	r4, #1
   3fed4:	beq	3feec <__assert_fail@plt+0x2d928>
   3fed8:	and	r3, r3, #6
   3fedc:	cmp	r3, #4
   3fee0:	beq	3ff98 <__assert_fail@plt+0x2d9d4>
   3fee4:	ldr	r4, [r6, #24]
   3fee8:	add	r4, r4, #1
   3feec:	str	r4, [sp, #40]	; 0x28
   3fef0:	lsl	r0, r4, #3
   3fef4:	bl	32148 <__assert_fail@plt+0x1fb84>
   3fef8:	subs	sl, r0, #0
   3fefc:	beq	40168 <__assert_fail@plt+0x2dba4>
   3ff00:	str	fp, [sp, #16]
   3ff04:	str	sl, [sp, #12]
   3ff08:	str	r4, [sp, #8]
   3ff0c:	ldr	r3, [sp, #92]	; 0x5c
   3ff10:	str	r3, [sp, #4]
   3ff14:	str	r8, [sp]
   3ff18:	mov	r3, r5
   3ff1c:	ldr	r2, [sp, #32]
   3ff20:	ldr	r1, [sp, #36]	; 0x24
   3ff24:	mov	r0, r6
   3ff28:	bl	3d5c4 <__assert_fail@plt+0x2b000>
   3ff2c:	subs	r8, r0, #0
   3ff30:	beq	3ffc8 <__assert_fail@plt+0x2da04>
   3ff34:	cmp	r8, #1
   3ff38:	mvneq	r5, #0
   3ff3c:	mvnne	r5, #1
   3ff40:	mov	r0, sl
   3ff44:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   3ff48:	ldr	r3, [sp, #28]
   3ff4c:	cmp	r3, #0
   3ff50:	beq	3ff5c <__assert_fail@plt+0x2d998>
   3ff54:	add	r0, r9, #136	; 0x88
   3ff58:	bl	11e80 <pthread_mutex_unlock@plt>
   3ff5c:	mov	r0, r5
   3ff60:	add	sp, sp, #52	; 0x34
   3ff64:	ldrd	r4, [sp]
   3ff68:	ldrd	r6, [sp, #8]
   3ff6c:	ldrd	r8, [sp, #16]
   3ff70:	ldrd	sl, [sp, #24]
   3ff74:	add	sp, sp, #32
   3ff78:	pop	{pc}		; (ldr pc, [sp], #4)
   3ff7c:	ldr	r8, [sp, #32]
   3ff80:	b	3fe50 <__assert_fail@plt+0x2d88c>
   3ff84:	ldr	r8, [sp, #32]
   3ff88:	b	3fe50 <__assert_fail@plt+0x2d88c>
   3ff8c:	mov	r0, r6
   3ff90:	bl	3fd28 <__assert_fail@plt+0x2d764>
   3ff94:	b	3fec0 <__assert_fail@plt+0x2d8fc>
   3ff98:	ldr	r3, [r7]
   3ff9c:	ldr	r2, [r6, #24]
   3ffa0:	cmp	r3, r2
   3ffa4:	bhi	3fee4 <__assert_fail@plt+0x2d920>
   3ffa8:	cmp	r3, #0
   3ffac:	movgt	r4, r3
   3ffb0:	movle	r4, #1
   3ffb4:	movle	r7, #0
   3ffb8:	b	3feec <__assert_fail@plt+0x2d928>
   3ffbc:	mov	r4, #1
   3ffc0:	mov	r7, #0
   3ffc4:	b	3feec <__assert_fail@plt+0x2d928>
   3ffc8:	cmp	r7, #0
   3ffcc:	beq	40078 <__assert_fail@plt+0x2dab4>
   3ffd0:	ldrb	fp, [r6, #28]
   3ffd4:	ubfx	fp, fp, #1, #2
   3ffd8:	add	r3, r4, #1
   3ffdc:	str	r3, [sp, #32]
   3ffe0:	cmp	fp, #0
   3ffe4:	beq	4008c <__assert_fail@plt+0x2dac8>
   3ffe8:	cmp	fp, #1
   3ffec:	movne	fp, #2
   3fff0:	beq	400d8 <__assert_fail@plt+0x2db14>
   3fff4:	cmp	r4, #0
   3fff8:	ble	40144 <__assert_fail@plt+0x2db80>
   3fffc:	ldr	r3, [sp, #40]	; 0x28
   40000:	lsl	ip, r3, #2
   40004:	mov	r3, #0
   40008:	add	r0, sl, #4
   4000c:	ldr	r1, [sl, r3, lsl #1]
   40010:	ldr	r2, [r7, #4]
   40014:	str	r1, [r2, r3]
   40018:	ldr	r1, [r0, r3, lsl #1]
   4001c:	ldr	r2, [r7, #8]
   40020:	str	r1, [r2, r3]
   40024:	add	r3, r3, #4
   40028:	cmp	ip, r3
   4002c:	bne	4000c <__assert_fail@plt+0x2da48>
   40030:	ldr	r3, [r7]
   40034:	cmp	r4, r3
   40038:	bcs	40060 <__assert_fail@plt+0x2da9c>
   4003c:	mvn	r3, #0
   40040:	ldr	r2, [r7, #8]
   40044:	str	r3, [r2, r4, lsl #2]
   40048:	ldr	r2, [r7, #4]
   4004c:	str	r3, [r2, r4, lsl #2]
   40050:	add	r4, r4, #1
   40054:	ldr	r2, [r7]
   40058:	cmp	r4, r2
   4005c:	bcc	40040 <__assert_fail@plt+0x2da7c>
   40060:	ldrb	r3, [r6, #28]
   40064:	bfi	r3, fp, #1, #2
   40068:	strb	r3, [r6, #28]
   4006c:	and	r3, r3, #6
   40070:	cmp	r3, #0
   40074:	beq	40178 <__assert_fail@plt+0x2dbb4>
   40078:	ldrb	r3, [sp, #100]	; 0x64
   4007c:	cmp	r3, #0
   40080:	bne	4015c <__assert_fail@plt+0x2db98>
   40084:	ldr	r5, [sl]
   40088:	b	3ff40 <__assert_fail@plt+0x2d97c>
   4008c:	lsl	fp, r3, #2
   40090:	mov	r0, fp
   40094:	bl	32148 <__assert_fail@plt+0x1fb84>
   40098:	str	r0, [r7, #4]
   4009c:	cmp	r0, #0
   400a0:	beq	4014c <__assert_fail@plt+0x2db88>
   400a4:	mov	r0, fp
   400a8:	bl	32148 <__assert_fail@plt+0x1fb84>
   400ac:	str	r0, [r7, #8]
   400b0:	cmp	r0, #0
   400b4:	beq	400c8 <__assert_fail@plt+0x2db04>
   400b8:	ldr	r3, [sp, #32]
   400bc:	str	r3, [r7]
   400c0:	mov	fp, #1
   400c4:	b	3fff4 <__assert_fail@plt+0x2da30>
   400c8:	ldr	r0, [r7, #4]
   400cc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   400d0:	mov	fp, #0
   400d4:	b	40060 <__assert_fail@plt+0x2da9c>
   400d8:	ldr	r3, [r7]
   400dc:	ldr	r2, [sp, #32]
   400e0:	cmp	r3, r2
   400e4:	bcs	3fff4 <__assert_fail@plt+0x2da30>
   400e8:	lsl	r3, r2, #2
   400ec:	str	r3, [sp, #44]	; 0x2c
   400f0:	mov	r1, r3
   400f4:	ldr	r0, [r7, #4]
   400f8:	bl	32ce0 <__assert_fail@plt+0x2071c>
   400fc:	subs	r2, r0, #0
   40100:	str	r2, [sp, #36]	; 0x24
   40104:	beq	40154 <__assert_fail@plt+0x2db90>
   40108:	ldr	r1, [sp, #44]	; 0x2c
   4010c:	ldr	r0, [r7, #8]
   40110:	bl	32ce0 <__assert_fail@plt+0x2071c>
   40114:	cmp	r0, #0
   40118:	beq	40134 <__assert_fail@plt+0x2db70>
   4011c:	ldr	r3, [sp, #36]	; 0x24
   40120:	str	r3, [r7, #4]
   40124:	str	r0, [r7, #8]
   40128:	ldr	r3, [sp, #32]
   4012c:	str	r3, [r7]
   40130:	b	3fff4 <__assert_fail@plt+0x2da30>
   40134:	ldr	r0, [sp, #36]	; 0x24
   40138:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   4013c:	mov	fp, #0
   40140:	b	40060 <__assert_fail@plt+0x2da9c>
   40144:	mov	r4, r8
   40148:	b	40030 <__assert_fail@plt+0x2da6c>
   4014c:	mov	fp, #0
   40150:	b	40060 <__assert_fail@plt+0x2da9c>
   40154:	mov	fp, #0
   40158:	b	40060 <__assert_fail@plt+0x2da9c>
   4015c:	ldr	r3, [sl, #4]
   40160:	sub	r5, r3, r5
   40164:	b	3ff40 <__assert_fail@plt+0x2d97c>
   40168:	mvn	r5, #1
   4016c:	b	3ff48 <__assert_fail@plt+0x2d984>
   40170:	mvn	r5, #0
   40174:	b	3ff5c <__assert_fail@plt+0x2d998>
   40178:	mvn	r5, #1
   4017c:	b	3ff40 <__assert_fail@plt+0x2d97c>
   40180:	movw	r3, #8144	; 0x1fd0
   40184:	movt	r3, #1
   40188:	cmp	r3, #0
   4018c:	movne	r3, #1
   40190:	moveq	r3, #0
   40194:	mov	r2, r3
   40198:	movw	r3, #9068	; 0x236c
   4019c:	movt	r3, #1
   401a0:	cmp	r3, #0
   401a4:	movne	r3, #1
   401a8:	moveq	r3, #0
   401ac:	orr	r3, r2, r3
   401b0:	ands	r3, r3, #255	; 0xff
   401b4:	str	r3, [sp, #28]
   401b8:	movne	r8, #0
   401bc:	bne	3fe8c <__assert_fail@plt+0x2d8c8>
   401c0:	ldrb	fp, [r6, #28]
   401c4:	ubfx	fp, fp, #5, #2
   401c8:	mov	r8, #0
   401cc:	b	3fec0 <__assert_fail@plt+0x2d8fc>
   401d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   401d4:	strd	r6, [sp, #8]
   401d8:	strd	r8, [sp, #16]
   401dc:	strd	sl, [sp, #24]
   401e0:	str	lr, [sp, #32]
   401e4:	sub	sp, sp, #20
   401e8:	mov	r7, r3
   401ec:	ldr	r5, [sp, #56]	; 0x38
   401f0:	ldr	r6, [sp, #72]	; 0x48
   401f4:	orr	r3, r5, r2
   401f8:	orrs	r3, r3, r6
   401fc:	mvnmi	r4, #1
   40200:	bmi	40268 <__assert_fail@plt+0x2dca4>
   40204:	mov	r9, r0
   40208:	mov	sl, r1
   4020c:	mov	r4, r2
   40210:	adds	fp, r2, r5
   40214:	bvs	402cc <__assert_fail@plt+0x2dd08>
   40218:	cmp	r5, #0
   4021c:	ble	402c0 <__assert_fail@plt+0x2dcfc>
   40220:	cmp	r2, #0
   40224:	movle	r8, #0
   40228:	bgt	40288 <__assert_fail@plt+0x2dcc4>
   4022c:	ldrb	r3, [sp, #76]	; 0x4c
   40230:	str	r3, [sp, #12]
   40234:	ldr	r3, [sp, #68]	; 0x44
   40238:	str	r3, [sp, #8]
   4023c:	str	r6, [sp, #4]
   40240:	ldr	r3, [sp, #64]	; 0x40
   40244:	str	r3, [sp]
   40248:	ldr	r3, [sp, #60]	; 0x3c
   4024c:	mov	r2, fp
   40250:	mov	r1, r7
   40254:	mov	r0, r9
   40258:	bl	3fdd4 <__assert_fail@plt+0x2d810>
   4025c:	mov	r4, r0
   40260:	mov	r0, r8
   40264:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   40268:	mov	r0, r4
   4026c:	add	sp, sp, #20
   40270:	ldrd	r4, [sp]
   40274:	ldrd	r6, [sp, #8]
   40278:	ldrd	r8, [sp, #16]
   4027c:	ldrd	sl, [sp, #24]
   40280:	add	sp, sp, #32
   40284:	pop	{pc}		; (ldr pc, [sp], #4)
   40288:	mov	r0, fp
   4028c:	bl	32148 <__assert_fail@plt+0x1fb84>
   40290:	subs	r8, r0, #0
   40294:	beq	402d4 <__assert_fail@plt+0x2dd10>
   40298:	mov	r2, r4
   4029c:	mov	r1, sl
   402a0:	mov	r0, r8
   402a4:	bl	12000 <memcpy@plt>
   402a8:	mov	r2, r5
   402ac:	mov	r1, r7
   402b0:	add	r0, r8, r4
   402b4:	bl	12000 <memcpy@plt>
   402b8:	mov	r7, r8
   402bc:	b	4022c <__assert_fail@plt+0x2dc68>
   402c0:	mov	r7, r1
   402c4:	mov	r8, #0
   402c8:	b	4022c <__assert_fail@plt+0x2dc68>
   402cc:	mvn	r4, #1
   402d0:	b	40268 <__assert_fail@plt+0x2dca4>
   402d4:	mvn	r4, #1
   402d8:	b	40268 <__assert_fail@plt+0x2dca4>
   402dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   402e0:	strd	r6, [sp, #8]
   402e4:	str	r8, [sp, #16]
   402e8:	str	lr, [sp, #20]
   402ec:	mov	r4, r0
   402f0:	mov	r7, r1
   402f4:	mov	r6, r2
   402f8:	and	r2, r2, #1
   402fc:	movw	r5, #45820	; 0xb2fc
   40300:	movt	r5, #3
   40304:	movw	r3, #710	; 0x2c6
   40308:	movt	r3, #257	; 0x101
   4030c:	cmp	r2, #0
   40310:	moveq	r5, r3
   40314:	mov	r3, #0
   40318:	str	r3, [r0]
   4031c:	str	r3, [r0, #4]
   40320:	str	r3, [r0, #8]
   40324:	mov	r0, #256	; 0x100
   40328:	bl	32148 <__assert_fail@plt+0x1fb84>
   4032c:	str	r0, [r4, #16]
   40330:	cmp	r0, #0
   40334:	beq	403dc <__assert_fail@plt+0x2de18>
   40338:	lsl	r3, r6, #21
   4033c:	and	r3, r3, #4194304	; 0x400000
   40340:	orr	r5, r3, r5
   40344:	tst	r6, #4
   40348:	bicne	r5, r5, #64	; 0x40
   4034c:	orrne	r5, r5, #256	; 0x100
   40350:	movne	r2, #1
   40354:	moveq	r2, #0
   40358:	ldrb	r3, [r4, #28]
   4035c:	bfi	r3, r2, #7, #1
   40360:	ubfx	r6, r6, #3, #1
   40364:	bfi	r3, r6, #4, #1
   40368:	strb	r3, [r4, #28]
   4036c:	mov	r3, #0
   40370:	str	r3, [r4, #20]
   40374:	mov	r0, r7
   40378:	bl	122d0 <strlen@plt>
   4037c:	mov	r3, r5
   40380:	mov	r2, r0
   40384:	mov	r1, r7
   40388:	mov	r0, r4
   4038c:	bl	3f01c <__assert_fail@plt+0x2ca58>
   40390:	mov	r5, r0
   40394:	cmp	r0, #16
   40398:	beq	403c4 <__assert_fail@plt+0x2de00>
   4039c:	cmp	r0, #0
   403a0:	bne	403c8 <__assert_fail@plt+0x2de04>
   403a4:	mov	r0, r4
   403a8:	bl	3fd28 <__assert_fail@plt+0x2d764>
   403ac:	mov	r0, r5
   403b0:	ldrd	r4, [sp]
   403b4:	ldrd	r6, [sp, #8]
   403b8:	ldr	r8, [sp, #16]
   403bc:	add	sp, sp, #20
   403c0:	pop	{pc}		; (ldr pc, [sp], #4)
   403c4:	mov	r5, #8
   403c8:	ldr	r0, [r4, #16]
   403cc:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   403d0:	mov	r3, #0
   403d4:	str	r3, [r4, #16]
   403d8:	b	403ac <__assert_fail@plt+0x2dde8>
   403dc:	mov	r5, #12
   403e0:	b	403ac <__assert_fail@plt+0x2dde8>
   403e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   403e8:	strd	r6, [sp, #8]
   403ec:	str	r8, [sp, #16]
   403f0:	str	lr, [sp, #20]
   403f4:	cmp	r0, #16
   403f8:	bhi	40474 <__assert_fail@plt+0x2deb0>
   403fc:	mov	r6, r2
   40400:	mov	r4, r3
   40404:	movw	r3, #41780	; 0xa334
   40408:	movt	r3, #4
   4040c:	add	r1, r3, #32
   40410:	add	r3, r3, r0, lsl #2
   40414:	ldr	r3, [r3, #416]	; 0x1a0
   40418:	mov	r2, #5
   4041c:	add	r1, r1, r3
   40420:	mov	r0, #0
   40424:	bl	12084 <dcgettext@plt>
   40428:	mov	r7, r0
   4042c:	bl	122d0 <strlen@plt>
   40430:	add	r5, r0, #1
   40434:	cmp	r4, #0
   40438:	beq	4045c <__assert_fail@plt+0x2de98>
   4043c:	cmp	r5, r4
   40440:	subhi	r2, r4, #1
   40444:	movhi	r3, #0
   40448:	strbhi	r3, [r6, r2]
   4044c:	movls	r2, r5
   40450:	mov	r1, r7
   40454:	mov	r0, r6
   40458:	bl	12000 <memcpy@plt>
   4045c:	mov	r0, r5
   40460:	ldrd	r4, [sp]
   40464:	ldrd	r6, [sp, #8]
   40468:	ldr	r8, [sp, #16]
   4046c:	add	sp, sp, #20
   40470:	pop	{pc}		; (ldr pc, [sp], #4)
   40474:	bl	12570 <abort@plt>
   40478:	strd	r4, [sp, #-16]!
   4047c:	str	r6, [sp, #8]
   40480:	str	lr, [sp, #12]
   40484:	mov	r4, r0
   40488:	ldr	r5, [r0]
   4048c:	cmp	r5, #0
   40490:	beq	404d8 <__assert_fail@plt+0x2df14>
   40494:	movw	r3, #8144	; 0x1fd0
   40498:	movt	r3, #1
   4049c:	cmp	r3, #0
   404a0:	movne	r3, #1
   404a4:	moveq	r3, #0
   404a8:	movw	r2, #9068	; 0x236c
   404ac:	movt	r2, #1
   404b0:	cmp	r2, #0
   404b4:	movne	r2, #1
   404b8:	moveq	r2, #0
   404bc:	orr	r3, r3, r2
   404c0:	tst	r3, #255	; 0xff
   404c4:	beq	404d0 <__assert_fail@plt+0x2df0c>
   404c8:	add	r0, r5, #136	; 0x88
   404cc:	bl	11f4c <pthread_mutex_destroy@plt>
   404d0:	mov	r0, r5
   404d4:	bl	3609c <__assert_fail@plt+0x23ad8>
   404d8:	mov	r5, #0
   404dc:	str	r5, [r4]
   404e0:	str	r5, [r4, #4]
   404e4:	ldr	r0, [r4, #16]
   404e8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   404ec:	str	r5, [r4, #16]
   404f0:	ldr	r0, [r4, #20]
   404f4:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   404f8:	str	r5, [r4, #20]
   404fc:	ldrd	r4, [sp]
   40500:	ldr	r6, [sp, #8]
   40504:	add	sp, sp, #12
   40508:	pop	{pc}		; (ldr pc, [sp], #4)
   4050c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   40510:	strd	r6, [sp, #8]
   40514:	strd	r8, [sp, #16]
   40518:	strd	sl, [sp, #24]
   4051c:	str	lr, [sp, #32]
   40520:	sub	sp, sp, #36	; 0x24
   40524:	ldr	r6, [sp, #72]	; 0x48
   40528:	bics	ip, r6, #7
   4052c:	movne	r0, #2
   40530:	bne	405f0 <__assert_fail@plt+0x2e02c>
   40534:	mov	r7, r3
   40538:	mov	r9, r2
   4053c:	str	r1, [sp, #28]
   40540:	mov	r5, r0
   40544:	ands	fp, r6, #4
   40548:	beq	4060c <__assert_fail@plt+0x2e048>
   4054c:	ldr	fp, [r3]
   40550:	ldr	r8, [r3, #4]
   40554:	ldr	sl, [r5]
   40558:	movw	r3, #8144	; 0x1fd0
   4055c:	movt	r3, #1
   40560:	cmp	r3, #0
   40564:	movne	r4, #1
   40568:	moveq	r4, #0
   4056c:	mov	r3, r4
   40570:	mov	r4, #1
   40574:	movw	r2, #9068	; 0x236c
   40578:	movt	r2, #1
   4057c:	cmp	r2, #0
   40580:	movne	r4, #1
   40584:	moveq	r4, #0
   40588:	orr	r4, r3, r4
   4058c:	ands	r4, r4, #255	; 0xff
   40590:	beq	4059c <__assert_fail@plt+0x2dfd8>
   40594:	add	r0, sl, #136	; 0x88
   40598:	bl	11fac <pthread_mutex_lock@plt>
   4059c:	ldrb	r3, [r5, #28]
   405a0:	tst	r3, #16
   405a4:	beq	4061c <__assert_fail@plt+0x2e058>
   405a8:	str	r6, [sp, #16]
   405ac:	mov	r3, #0
   405b0:	str	r3, [sp, #12]
   405b4:	str	r3, [sp, #8]
   405b8:	str	r8, [sp, #4]
   405bc:	str	r8, [sp]
   405c0:	mov	r3, fp
   405c4:	mov	r2, r8
   405c8:	ldr	r1, [sp, #28]
   405cc:	mov	r0, r5
   405d0:	bl	3d5c4 <__assert_fail@plt+0x2b000>
   405d4:	mov	r5, r0
   405d8:	cmp	r4, #0
   405dc:	beq	405e8 <__assert_fail@plt+0x2e024>
   405e0:	add	r0, sl, #136	; 0x88
   405e4:	bl	11e80 <pthread_mutex_unlock@plt>
   405e8:	adds	r0, r5, #0
   405ec:	movne	r0, #1
   405f0:	add	sp, sp, #36	; 0x24
   405f4:	ldrd	r4, [sp]
   405f8:	ldrd	r6, [sp, #8]
   405fc:	ldrd	r8, [sp, #16]
   40600:	ldrd	sl, [sp, #24]
   40604:	add	sp, sp, #32
   40608:	pop	{pc}		; (ldr pc, [sp], #4)
   4060c:	ldr	r0, [sp, #28]
   40610:	bl	122d0 <strlen@plt>
   40614:	mov	r8, r0
   40618:	b	40554 <__assert_fail@plt+0x2df90>
   4061c:	str	r6, [sp, #16]
   40620:	str	r7, [sp, #12]
   40624:	str	r9, [sp, #8]
   40628:	str	r8, [sp, #4]
   4062c:	str	r8, [sp]
   40630:	mov	r3, fp
   40634:	mov	r2, r8
   40638:	ldr	r1, [sp, #28]
   4063c:	mov	r0, r5
   40640:	bl	3d5c4 <__assert_fail@plt+0x2b000>
   40644:	mov	r5, r0
   40648:	b	405d8 <__assert_fail@plt+0x2e014>
   4064c:	push	{lr}		; (str lr, [sp, #-4]!)
   40650:	sub	sp, sp, #20
   40654:	mov	ip, #1
   40658:	str	ip, [sp, #12]
   4065c:	ldr	ip, [sp, #24]
   40660:	str	ip, [sp, #8]
   40664:	str	r2, [sp, #4]
   40668:	mov	ip, #0
   4066c:	str	ip, [sp]
   40670:	bl	3fdd4 <__assert_fail@plt+0x2d810>
   40674:	add	sp, sp, #20
   40678:	pop	{pc}		; (ldr pc, [sp], #4)
   4067c:	push	{lr}		; (str lr, [sp, #-4]!)
   40680:	sub	sp, sp, #20
   40684:	mov	ip, #0
   40688:	str	ip, [sp, #12]
   4068c:	ldr	ip, [sp, #28]
   40690:	str	ip, [sp, #8]
   40694:	str	r2, [sp, #4]
   40698:	ldr	ip, [sp, #24]
   4069c:	str	ip, [sp]
   406a0:	bl	3fdd4 <__assert_fail@plt+0x2d810>
   406a4:	add	sp, sp, #20
   406a8:	pop	{pc}		; (ldr pc, [sp], #4)
   406ac:	push	{lr}		; (str lr, [sp, #-4]!)
   406b0:	sub	sp, sp, #28
   406b4:	mov	ip, #1
   406b8:	str	ip, [sp, #20]
   406bc:	ldr	ip, [sp, #44]	; 0x2c
   406c0:	str	ip, [sp, #16]
   406c4:	ldr	ip, [sp, #40]	; 0x28
   406c8:	str	ip, [sp, #12]
   406cc:	mov	ip, #0
   406d0:	str	ip, [sp, #8]
   406d4:	ldr	ip, [sp, #36]	; 0x24
   406d8:	str	ip, [sp, #4]
   406dc:	ldr	ip, [sp, #32]
   406e0:	str	ip, [sp]
   406e4:	bl	401d0 <__assert_fail@plt+0x2dc0c>
   406e8:	add	sp, sp, #28
   406ec:	pop	{pc}		; (ldr pc, [sp], #4)
   406f0:	push	{lr}		; (str lr, [sp, #-4]!)
   406f4:	sub	sp, sp, #28
   406f8:	mov	ip, #0
   406fc:	str	ip, [sp, #20]
   40700:	ldr	ip, [sp, #48]	; 0x30
   40704:	str	ip, [sp, #16]
   40708:	ldr	ip, [sp, #44]	; 0x2c
   4070c:	str	ip, [sp, #12]
   40710:	ldr	ip, [sp, #40]	; 0x28
   40714:	str	ip, [sp, #8]
   40718:	ldr	ip, [sp, #36]	; 0x24
   4071c:	str	ip, [sp, #4]
   40720:	ldr	ip, [sp, #32]
   40724:	str	ip, [sp]
   40728:	bl	401d0 <__assert_fail@plt+0x2dc0c>
   4072c:	add	sp, sp, #28
   40730:	pop	{pc}		; (ldr pc, [sp], #4)
   40734:	cmp	r2, #0
   40738:	beq	40764 <__assert_fail@plt+0x2e1a0>
   4073c:	push	{lr}		; (str lr, [sp, #-4]!)
   40740:	ldrb	ip, [r0, #28]
   40744:	mov	lr, #1
   40748:	bfi	ip, lr, #1, #2
   4074c:	strb	ip, [r0, #28]
   40750:	str	r2, [r1]
   40754:	str	r3, [r1, #4]
   40758:	ldr	r3, [sp, #4]
   4075c:	str	r3, [r1, #8]
   40760:	pop	{pc}		; (ldr pc, [sp], #4)
   40764:	ldrb	r3, [r0, #28]
   40768:	bfc	r3, #1, #2
   4076c:	strb	r3, [r0, #28]
   40770:	mov	r3, #0
   40774:	str	r3, [r1]
   40778:	str	r3, [r1, #8]
   4077c:	str	r3, [r1, #4]
   40780:	bx	lr
   40784:	cmp	r1, #2
   40788:	bls	407b8 <__assert_fail@plt+0x2e1f4>
   4078c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   40790:	strd	r6, [sp, #8]
   40794:	strd	r8, [sp, #16]
   40798:	str	lr, [sp, #24]
   4079c:	mov	r7, #1
   407a0:	mov	ip, r7
   407a4:	mov	lr, #0
   407a8:	mvn	r4, #0
   407ac:	mov	r3, r7
   407b0:	mov	r8, r7
   407b4:	b	407ec <__assert_fail@plt+0x2e228>
   407b8:	mov	r3, #1
   407bc:	str	r3, [r2]
   407c0:	sub	r0, r1, #1
   407c4:	bx	lr
   407c8:	cmp	r6, r5
   407cc:	beq	40810 <__assert_fail@plt+0x2e24c>
   407d0:	mov	r4, lr
   407d4:	add	lr, lr, #1
   407d8:	mov	r7, r8
   407dc:	mov	ip, r8
   407e0:	add	r3, ip, lr
   407e4:	cmp	r3, r1
   407e8:	bcs	40824 <__assert_fail@plt+0x2e260>
   407ec:	ldrb	r6, [r0, r3]
   407f0:	add	r5, r0, ip
   407f4:	ldrb	r5, [r5, r4]
   407f8:	cmp	r6, r5
   407fc:	bcs	407c8 <__assert_fail@plt+0x2e204>
   40800:	sub	r7, r3, r4
   40804:	mov	lr, r3
   40808:	mov	ip, #1
   4080c:	b	407e0 <__assert_fail@plt+0x2e21c>
   40810:	cmp	ip, r7
   40814:	addne	ip, ip, #1
   40818:	addeq	lr, lr, r7
   4081c:	moveq	ip, #1
   40820:	b	407e0 <__assert_fail@plt+0x2e21c>
   40824:	str	r7, [r2]
   40828:	mov	r8, #1
   4082c:	mov	ip, r8
   40830:	mov	lr, #0
   40834:	mvn	r7, #0
   40838:	mov	r3, r8
   4083c:	mov	r9, r8
   40840:	b	40868 <__assert_fail@plt+0x2e2a4>
   40844:	cmp	r6, r5
   40848:	beq	4088c <__assert_fail@plt+0x2e2c8>
   4084c:	mov	r7, lr
   40850:	add	lr, lr, #1
   40854:	mov	r8, r9
   40858:	mov	ip, r9
   4085c:	add	r3, ip, lr
   40860:	cmp	r3, r1
   40864:	bcs	408a0 <__assert_fail@plt+0x2e2dc>
   40868:	ldrb	r6, [r0, r3]
   4086c:	add	r5, r0, ip
   40870:	ldrb	r5, [r5, r7]
   40874:	cmp	r6, r5
   40878:	bls	40844 <__assert_fail@plt+0x2e280>
   4087c:	sub	r8, r3, r7
   40880:	mov	lr, r3
   40884:	mov	ip, #1
   40888:	b	4085c <__assert_fail@plt+0x2e298>
   4088c:	cmp	ip, r8
   40890:	addne	ip, ip, #1
   40894:	addeq	lr, lr, r8
   40898:	moveq	ip, #1
   4089c:	b	4085c <__assert_fail@plt+0x2e298>
   408a0:	add	r7, r7, #1
   408a4:	add	r0, r4, #1
   408a8:	cmp	r7, r0
   408ac:	strcs	r8, [r2]
   408b0:	movcs	r0, r7
   408b4:	ldrd	r4, [sp]
   408b8:	ldrd	r6, [sp, #8]
   408bc:	ldrd	r8, [sp, #16]
   408c0:	add	sp, sp, #24
   408c4:	pop	{pc}		; (ldr pc, [sp], #4)
   408c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   408cc:	strd	r6, [sp, #8]
   408d0:	strd	r8, [sp, #16]
   408d4:	strd	sl, [sp, #24]
   408d8:	str	lr, [sp, #32]
   408dc:	sub	sp, sp, #1072	; 0x430
   408e0:	sub	sp, sp, #4
   408e4:	mov	r5, r0
   408e8:	mov	r6, r1
   408ec:	mov	r0, r2
   408f0:	str	r2, [sp]
   408f4:	mov	r4, r3
   408f8:	add	r2, sp, #1056	; 0x420
   408fc:	add	r2, r2, #12
   40900:	mov	r1, r3
   40904:	bl	40784 <__assert_fail@plt+0x2e1c0>
   40908:	mov	r7, r0
   4090c:	add	r3, sp, #40	; 0x28
   40910:	add	r2, sp, #48	; 0x30
   40914:	add	r2, r2, #1016	; 0x3f8
   40918:	str	r4, [r3, #4]!
   4091c:	cmp	r3, r2
   40920:	bne	40918 <__assert_fail@plt+0x2e354>
   40924:	cmp	r4, #0
   40928:	beq	40c9c <__assert_fail@plt+0x2e6d8>
   4092c:	ldr	r3, [sp]
   40930:	sub	r2, r3, #1
   40934:	mov	fp, r3
   40938:	sub	r1, r4, #1
   4093c:	str	r1, [sp, #8]
   40940:	add	r0, r1, r3
   40944:	ldrb	r1, [r2, #1]!
   40948:	add	r3, sp, #1072	; 0x430
   4094c:	add	r1, r3, r1, lsl #2
   40950:	mvn	r3, r2
   40954:	add	r3, r3, r4
   40958:	add	r3, r3, fp
   4095c:	str	r3, [r1, #-1028]	; 0xfffffbfc
   40960:	cmp	r2, r0
   40964:	bne	40944 <__assert_fail@plt+0x2e380>
   40968:	ldr	r3, [sp, #1068]	; 0x42c
   4096c:	str	r3, [sp, #4]
   40970:	mov	r2, r7
   40974:	ldr	r0, [sp]
   40978:	add	r1, r0, r3
   4097c:	bl	12060 <memcmp@plt>
   40980:	cmp	r0, #0
   40984:	beq	40acc <__assert_fail@plt+0x2e508>
   40988:	sub	r3, r4, r7
   4098c:	cmp	r3, r7
   40990:	movcc	r3, r7
   40994:	add	r3, r3, #1
   40998:	str	r3, [sp, #12]
   4099c:	mov	r8, #0
   409a0:	sub	r3, r4, #1
   409a4:	str	r3, [sp, #4]
   409a8:	sub	r1, r7, #1
   409ac:	str	r1, [sp, #8]
   409b0:	ldr	r2, [sp]
   409b4:	add	r1, r2, r1
   409b8:	str	r1, [sp, #16]
   409bc:	mov	fp, r2
   409c0:	add	r1, r2, r7
   409c4:	str	r1, [sp]
   409c8:	sub	r9, r4, #2
   409cc:	add	r9, r9, r2
   409d0:	rsb	sl, r2, #1
   409d4:	mov	r0, r6
   409d8:	mov	r6, r4
   409dc:	mov	r4, r7
   409e0:	b	40bac <__assert_fail@plt+0x2e5e8>
   409e4:	cmp	sl, fp
   409e8:	movcs	ip, sl
   409ec:	movcc	ip, fp
   409f0:	ldr	r3, [sp, #8]
   409f4:	cmp	ip, r3
   409f8:	bcs	40b1c <__assert_fail@plt+0x2e558>
   409fc:	ldr	r0, [sp]
   40a00:	add	r3, r0, ip
   40a04:	add	r1, r8, ip
   40a08:	add	r2, r5, r1
   40a0c:	ldrb	r0, [r0, ip]
   40a10:	ldrb	r1, [r5, r1]
   40a14:	cmp	r0, r1
   40a18:	bne	40a40 <__assert_fail@plt+0x2e47c>
   40a1c:	ldr	r1, [sp, #12]
   40a20:	rsb	lr, r1, #1
   40a24:	add	ip, lr, r3
   40a28:	cmp	r3, r9
   40a2c:	beq	40b1c <__assert_fail@plt+0x2e558>
   40a30:	ldrb	r0, [r3, #1]!
   40a34:	ldrb	r1, [r2, #1]!
   40a38:	cmp	r0, r1
   40a3c:	beq	40a24 <__assert_fail@plt+0x2e460>
   40a40:	ldr	r3, [sp, #16]
   40a44:	add	r8, r3, r8
   40a48:	add	r8, ip, r8
   40a4c:	mov	sl, r6
   40a50:	mov	r0, r7
   40a54:	add	r7, r8, r4
   40a58:	sub	r2, r7, r0
   40a5c:	mov	r1, #0
   40a60:	add	r0, r5, r0
   40a64:	bl	123a8 <memchr@plt>
   40a68:	adds	r3, r7, #0
   40a6c:	movne	r3, #1
   40a70:	cmp	r0, #0
   40a74:	moveq	r0, r3
   40a78:	movne	r0, #0
   40a7c:	cmp	r0, #0
   40a80:	beq	40cc0 <__assert_fail@plt+0x2e6fc>
   40a84:	add	r3, r5, r7
   40a88:	ldrb	r3, [r3, #-1]
   40a8c:	add	r2, sp, #1072	; 0x430
   40a90:	add	r3, r2, r3, lsl #2
   40a94:	ldr	r6, [r3, #-1028]	; 0xfffffbfc
   40a98:	cmp	r6, #0
   40a9c:	beq	409e4 <__assert_fail@plt+0x2e420>
   40aa0:	ldr	r3, [sp, #4]
   40aa4:	cmp	sl, #0
   40aa8:	cmpne	r3, r6
   40aac:	ldrhi	r6, [sp, #20]
   40ab0:	add	r8, r8, r6
   40ab4:	mov	sl, #0
   40ab8:	b	40a50 <__assert_fail@plt+0x2e48c>
   40abc:	ldr	lr, [sp, #36]	; 0x24
   40ac0:	b	40b78 <__assert_fail@plt+0x2e5b4>
   40ac4:	add	r0, r5, r8
   40ac8:	b	40cc0 <__assert_fail@plt+0x2e6fc>
   40acc:	mov	sl, #0
   40ad0:	mov	r8, sl
   40ad4:	sub	r2, r7, #1
   40ad8:	str	r2, [sp, #24]
   40adc:	str	r7, [sp, #36]	; 0x24
   40ae0:	ldr	r1, [sp, #4]
   40ae4:	sub	r1, r4, r1
   40ae8:	str	r1, [sp, #20]
   40aec:	ldr	r1, [sp]
   40af0:	add	r2, r1, r2
   40af4:	str	r2, [sp, #28]
   40af8:	str	r5, [sp, #32]
   40afc:	rsb	r2, r7, #1
   40b00:	str	r2, [sp, #16]
   40b04:	sub	r9, r4, #2
   40b08:	add	r9, r9, fp
   40b0c:	str	fp, [sp, #12]
   40b10:	mov	fp, r7
   40b14:	mov	r0, r6
   40b18:	b	40a54 <__assert_fail@plt+0x2e490>
   40b1c:	cmp	sl, fp
   40b20:	ldrcs	lr, [sp, #36]	; 0x24
   40b24:	bcs	40b78 <__assert_fail@plt+0x2e5b4>
   40b28:	ldr	r3, [sp, #24]
   40b2c:	add	r2, r8, r3
   40b30:	add	r3, r5, r2
   40b34:	ldr	r0, [sp, #28]
   40b38:	ldrb	r1, [r0]
   40b3c:	ldrb	r2, [r5, r2]
   40b40:	cmp	r1, r2
   40b44:	bne	40abc <__assert_fail@plt+0x2e4f8>
   40b48:	mov	r2, r0
   40b4c:	add	ip, r8, sl
   40b50:	add	ip, ip, r5
   40b54:	ldr	r1, [sp, #32]
   40b58:	add	r6, r1, r8
   40b5c:	sub	lr, r3, r6
   40b60:	cmp	r3, ip
   40b64:	beq	40b78 <__assert_fail@plt+0x2e5b4>
   40b68:	ldrb	r0, [r2, #-1]!
   40b6c:	ldrb	r1, [r3, #-1]!
   40b70:	cmp	r0, r1
   40b74:	beq	40b5c <__assert_fail@plt+0x2e598>
   40b78:	add	sl, sl, #1
   40b7c:	cmp	sl, lr
   40b80:	bhi	40ac4 <__assert_fail@plt+0x2e500>
   40b84:	ldr	r3, [sp, #4]
   40b88:	add	r8, r8, r3
   40b8c:	ldr	sl, [sp, #20]
   40b90:	b	40a50 <__assert_fail@plt+0x2e48c>
   40b94:	add	r0, r5, r8
   40b98:	b	40cc0 <__assert_fail@plt+0x2e6fc>
   40b9c:	rsb	r3, r4, #1
   40ba0:	add	r8, r3, r8
   40ba4:	add	r8, ip, r8
   40ba8:	mov	r0, r7
   40bac:	add	r7, r8, r6
   40bb0:	sub	r2, r7, r0
   40bb4:	mov	r1, #0
   40bb8:	add	r0, r5, r0
   40bbc:	bl	123a8 <memchr@plt>
   40bc0:	clz	r0, r0
   40bc4:	lsr	r0, r0, #5
   40bc8:	cmp	r7, #0
   40bcc:	moveq	r0, #0
   40bd0:	cmp	r0, #0
   40bd4:	beq	40cc0 <__assert_fail@plt+0x2e6fc>
   40bd8:	add	r3, r5, r7
   40bdc:	ldrb	r3, [r3, #-1]
   40be0:	add	r2, sp, #1072	; 0x430
   40be4:	add	r3, r2, r3, lsl #2
   40be8:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   40bec:	cmp	r3, #0
   40bf0:	addne	r8, r8, r3
   40bf4:	bne	40ba8 <__assert_fail@plt+0x2e5e4>
   40bf8:	ldr	r3, [sp, #4]
   40bfc:	cmp	r4, r3
   40c00:	bcs	40c48 <__assert_fail@plt+0x2e684>
   40c04:	add	r3, r8, r4
   40c08:	add	r2, r5, r3
   40c0c:	ldr	r1, [sp]
   40c10:	ldrb	r1, [r1]
   40c14:	ldrb	r3, [r5, r3]
   40c18:	cmp	r1, r3
   40c1c:	movne	ip, r4
   40c20:	bne	40b9c <__assert_fail@plt+0x2e5d8>
   40c24:	ldr	r3, [sp]
   40c28:	add	ip, sl, r3
   40c2c:	cmp	r3, r9
   40c30:	beq	40c48 <__assert_fail@plt+0x2e684>
   40c34:	ldrb	r0, [r3, #1]!
   40c38:	ldrb	r1, [r2, #1]!
   40c3c:	cmp	r0, r1
   40c40:	beq	40c28 <__assert_fail@plt+0x2e664>
   40c44:	b	40b9c <__assert_fail@plt+0x2e5d8>
   40c48:	ldr	r3, [sp, #8]
   40c4c:	cmn	r3, #1
   40c50:	beq	40b94 <__assert_fail@plt+0x2e5d0>
   40c54:	ldr	r3, [sp, #8]
   40c58:	add	r3, r8, r3
   40c5c:	add	r2, r5, r3
   40c60:	ldr	r0, [sp, #16]
   40c64:	ldrb	r1, [r0]
   40c68:	ldrb	r3, [r5, r3]
   40c6c:	cmp	r1, r3
   40c70:	bne	40c90 <__assert_fail@plt+0x2e6cc>
   40c74:	mov	r3, r0
   40c78:	cmp	r3, fp
   40c7c:	beq	40b94 <__assert_fail@plt+0x2e5d0>
   40c80:	ldrb	r0, [r3, #-1]!
   40c84:	ldrb	r1, [r2, #-1]!
   40c88:	cmp	r0, r1
   40c8c:	beq	40c78 <__assert_fail@plt+0x2e6b4>
   40c90:	ldr	r3, [sp, #12]
   40c94:	add	r8, r8, r3
   40c98:	b	40ba8 <__assert_fail@plt+0x2e5e4>
   40c9c:	mov	r2, r7
   40ca0:	ldr	r1, [sp, #1068]	; 0x42c
   40ca4:	ldr	r3, [sp]
   40ca8:	add	r1, r3, r1
   40cac:	mov	r0, r3
   40cb0:	bl	12060 <memcmp@plt>
   40cb4:	cmp	r0, #0
   40cb8:	moveq	r0, #0
   40cbc:	bne	40988 <__assert_fail@plt+0x2e3c4>
   40cc0:	add	sp, sp, #1072	; 0x430
   40cc4:	add	sp, sp, #4
   40cc8:	ldrd	r4, [sp]
   40ccc:	ldrd	r6, [sp, #8]
   40cd0:	ldrd	r8, [sp, #16]
   40cd4:	ldrd	sl, [sp, #24]
   40cd8:	add	sp, sp, #32
   40cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   40ce0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   40ce4:	strd	r6, [sp, #8]
   40ce8:	strd	r8, [sp, #16]
   40cec:	strd	sl, [sp, #24]
   40cf0:	str	lr, [sp, #32]
   40cf4:	sub	sp, sp, #44	; 0x2c
   40cf8:	ldrb	r3, [r0]
   40cfc:	cmp	r3, #0
   40d00:	beq	40dc8 <__assert_fail@plt+0x2e804>
   40d04:	ldrb	r2, [r1]
   40d08:	cmp	r2, #0
   40d0c:	beq	40ee0 <__assert_fail@plt+0x2e91c>
   40d10:	mov	r7, r0
   40d14:	add	ip, r1, #1
   40d18:	mov	lr, #1
   40d1c:	mov	r6, ip
   40d20:	cmp	r3, r2
   40d24:	movne	lr, #0
   40d28:	andeq	lr, lr, #1
   40d2c:	ldrb	r3, [r7, #1]!
   40d30:	cmp	r3, #0
   40d34:	beq	40dd0 <__assert_fail@plt+0x2e80c>
   40d38:	ldrb	r2, [ip], #1
   40d3c:	cmp	r2, #0
   40d40:	bne	40d1c <__assert_fail@plt+0x2e758>
   40d44:	cmp	lr, #0
   40d48:	movne	r5, r0
   40d4c:	bne	40da8 <__assert_fail@plt+0x2e7e4>
   40d50:	mov	r4, r0
   40d54:	sub	r8, r6, r1
   40d58:	ldrb	r1, [r1]
   40d5c:	add	r0, r0, #1
   40d60:	bl	122dc <strchr@plt>
   40d64:	mov	r5, r0
   40d68:	cmp	r8, #1
   40d6c:	cmpne	r0, #0
   40d70:	beq	40da8 <__assert_fail@plt+0x2e7e4>
   40d74:	sub	r3, r6, r8
   40d78:	str	r3, [sp, #8]
   40d7c:	add	r4, r4, r8
   40d80:	cmp	r4, r0
   40d84:	subcs	r4, r4, r0
   40d88:	movcc	r4, #1
   40d8c:	cmp	r8, #31
   40d90:	bls	40de4 <__assert_fail@plt+0x2e820>
   40d94:	mov	r3, r8
   40d98:	ldr	r2, [sp, #8]
   40d9c:	mov	r1, r4
   40da0:	bl	408c8 <__assert_fail@plt+0x2e304>
   40da4:	mov	r5, r0
   40da8:	mov	r0, r5
   40dac:	add	sp, sp, #44	; 0x2c
   40db0:	ldrd	r4, [sp]
   40db4:	ldrd	r6, [sp, #8]
   40db8:	ldrd	r8, [sp, #16]
   40dbc:	ldrd	sl, [sp, #24]
   40dc0:	add	sp, sp, #32
   40dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   40dc8:	mov	r6, r1
   40dcc:	mov	lr, #1
   40dd0:	ldrb	r3, [r6]
   40dd4:	cmp	r3, #0
   40dd8:	movne	r5, #0
   40ddc:	beq	40d44 <__assert_fail@plt+0x2e780>
   40de0:	b	40da8 <__assert_fail@plt+0x2e7e4>
   40de4:	add	r2, sp, #36	; 0x24
   40de8:	mov	r1, r8
   40dec:	ldr	r6, [sp, #8]
   40df0:	mov	r0, r6
   40df4:	bl	40784 <__assert_fail@plt+0x2e1c0>
   40df8:	mov	r2, r0
   40dfc:	mov	r7, r0
   40e00:	ldr	r1, [sp, #36]	; 0x24
   40e04:	str	r1, [sp, #12]
   40e08:	add	r1, r6, r1
   40e0c:	mov	r0, r6
   40e10:	bl	12060 <memcmp@plt>
   40e14:	cmp	r0, #0
   40e18:	beq	40e88 <__assert_fail@plt+0x2e8c4>
   40e1c:	sub	r3, r8, r7
   40e20:	cmp	r3, r7
   40e24:	movcc	r3, r7
   40e28:	add	r3, r3, #1
   40e2c:	str	r3, [sp, #16]
   40e30:	mov	r9, #0
   40e34:	mov	r3, r7
   40e38:	sub	r1, r7, #1
   40e3c:	str	r1, [sp, #12]
   40e40:	ldr	r2, [sp, #8]
   40e44:	add	r1, r2, r1
   40e48:	str	r1, [sp, #20]
   40e4c:	mov	fp, r2
   40e50:	add	r1, r2, r7
   40e54:	str	r1, [sp, #4]
   40e58:	rsb	r1, r7, #1
   40e5c:	str	r1, [sp, #8]
   40e60:	sub	r6, r8, #1
   40e64:	add	r6, r6, r2
   40e68:	rsb	r7, r2, #1
   40e6c:	mov	r0, r4
   40e70:	mov	r4, r3
   40e74:	b	41014 <__assert_fail@plt+0x2ea50>
   40e78:	ldr	lr, [sp, #28]
   40e7c:	b	40f40 <__assert_fail@plt+0x2e97c>
   40e80:	add	r5, r5, r9
   40e84:	b	40da8 <__assert_fail@plt+0x2e7e4>
   40e88:	mov	fp, #0
   40e8c:	mov	r9, fp
   40e90:	mov	sl, r7
   40e94:	sub	r2, r7, #1
   40e98:	str	r2, [sp, #16]
   40e9c:	str	r7, [sp, #28]
   40ea0:	ldr	r3, [sp, #12]
   40ea4:	sub	r3, r8, r3
   40ea8:	str	r3, [sp, #20]
   40eac:	ldr	r3, [sp, #8]
   40eb0:	add	r2, r3, r2
   40eb4:	str	r2, [sp, #24]
   40eb8:	sub	r6, r8, #1
   40ebc:	add	r6, r6, r3
   40ec0:	rsb	r7, r3, #1
   40ec4:	mov	r0, r4
   40ec8:	str	r8, [sp, #4]
   40ecc:	b	40f70 <__assert_fail@plt+0x2e9ac>
   40ed0:	mov	r5, #0
   40ed4:	b	40da8 <__assert_fail@plt+0x2e7e4>
   40ed8:	mov	r5, #0
   40edc:	b	40da8 <__assert_fail@plt+0x2e7e4>
   40ee0:	mov	r5, r0
   40ee4:	b	40da8 <__assert_fail@plt+0x2e7e4>
   40ee8:	cmp	sl, fp
   40eec:	ldrls	lr, [sp, #28]
   40ef0:	bls	40f40 <__assert_fail@plt+0x2e97c>
   40ef4:	ldr	r3, [sp, #16]
   40ef8:	add	r2, r9, r3
   40efc:	add	r3, r5, r2
   40f00:	ldr	r0, [sp, #24]
   40f04:	ldrb	r1, [r0]
   40f08:	ldrb	r2, [r5, r2]
   40f0c:	cmp	r1, r2
   40f10:	bne	40e78 <__assert_fail@plt+0x2e8b4>
   40f14:	mov	r2, r0
   40f18:	add	ip, fp, r9
   40f1c:	add	ip, ip, r5
   40f20:	add	r4, r5, r9
   40f24:	sub	lr, r3, r4
   40f28:	cmp	r3, ip
   40f2c:	beq	40f40 <__assert_fail@plt+0x2e97c>
   40f30:	ldrb	r0, [r2, #-1]!
   40f34:	ldrb	r1, [r3, #-1]!
   40f38:	cmp	r0, r1
   40f3c:	beq	40f24 <__assert_fail@plt+0x2e960>
   40f40:	add	fp, fp, #1
   40f44:	cmp	fp, lr
   40f48:	bhi	40e80 <__assert_fail@plt+0x2e8bc>
   40f4c:	ldr	r3, [sp, #12]
   40f50:	add	r9, r9, r3
   40f54:	ldr	fp, [sp, #20]
   40f58:	b	40f6c <__assert_fail@plt+0x2e9a8>
   40f5c:	rsb	r3, sl, #1
   40f60:	add	r9, r3, r9
   40f64:	add	r9, r9, r0
   40f68:	mov	fp, #0
   40f6c:	mov	r0, r8
   40f70:	ldr	r3, [sp, #4]
   40f74:	add	r8, r3, r9
   40f78:	sub	r2, r8, r0
   40f7c:	mov	r1, #0
   40f80:	add	r0, r5, r0
   40f84:	bl	123a8 <memchr@plt>
   40f88:	adds	r3, r8, #0
   40f8c:	movne	r3, #1
   40f90:	cmp	r0, #0
   40f94:	moveq	r0, r3
   40f98:	movne	r0, #0
   40f9c:	cmp	r0, #0
   40fa0:	beq	40ed0 <__assert_fail@plt+0x2e90c>
   40fa4:	cmp	sl, fp
   40fa8:	movcs	r0, sl
   40fac:	movcc	r0, fp
   40fb0:	ldr	r3, [sp, #4]
   40fb4:	cmp	r3, r0
   40fb8:	bls	40ee8 <__assert_fail@plt+0x2e924>
   40fbc:	ldr	ip, [sp, #8]
   40fc0:	add	r3, ip, r0
   40fc4:	add	r1, r0, r9
   40fc8:	add	r2, r5, r1
   40fcc:	ldrb	ip, [ip, r0]
   40fd0:	ldrb	r1, [r5, r1]
   40fd4:	cmp	ip, r1
   40fd8:	bne	40f5c <__assert_fail@plt+0x2e998>
   40fdc:	add	r0, r7, r3
   40fe0:	cmp	r3, r6
   40fe4:	beq	40ee8 <__assert_fail@plt+0x2e924>
   40fe8:	ldrb	ip, [r3, #1]!
   40fec:	ldrb	r1, [r2, #1]!
   40ff0:	cmp	ip, r1
   40ff4:	beq	40fdc <__assert_fail@plt+0x2ea18>
   40ff8:	b	40f5c <__assert_fail@plt+0x2e998>
   40ffc:	add	r5, r5, r9
   41000:	b	40da8 <__assert_fail@plt+0x2e7e4>
   41004:	ldr	r3, [sp, #8]
   41008:	add	r9, r3, r9
   4100c:	add	r9, ip, r9
   41010:	mov	r0, sl
   41014:	add	sl, r8, r9
   41018:	sub	r2, sl, r0
   4101c:	mov	r1, #0
   41020:	add	r0, r5, r0
   41024:	bl	123a8 <memchr@plt>
   41028:	adds	r3, sl, #0
   4102c:	movne	r3, #1
   41030:	cmp	r0, #0
   41034:	moveq	r0, r3
   41038:	movne	r0, #0
   4103c:	cmp	r0, #0
   41040:	beq	40ed8 <__assert_fail@plt+0x2e914>
   41044:	cmp	r8, r4
   41048:	bls	41090 <__assert_fail@plt+0x2eacc>
   4104c:	add	r3, r4, r9
   41050:	add	r2, r5, r3
   41054:	ldr	r1, [sp, #4]
   41058:	ldrb	r1, [r1]
   4105c:	ldrb	r3, [r5, r3]
   41060:	cmp	r1, r3
   41064:	movne	ip, r4
   41068:	bne	41004 <__assert_fail@plt+0x2ea40>
   4106c:	ldr	r3, [sp, #4]
   41070:	add	ip, r7, r3
   41074:	cmp	r3, r6
   41078:	beq	41090 <__assert_fail@plt+0x2eacc>
   4107c:	ldrb	r0, [r3, #1]!
   41080:	ldrb	r1, [r2, #1]!
   41084:	cmp	r0, r1
   41088:	beq	41070 <__assert_fail@plt+0x2eaac>
   4108c:	b	41004 <__assert_fail@plt+0x2ea40>
   41090:	ldr	r3, [sp, #12]
   41094:	cmn	r3, #1
   41098:	beq	40ffc <__assert_fail@plt+0x2ea38>
   4109c:	ldr	r3, [sp, #12]
   410a0:	add	r3, r9, r3
   410a4:	add	r2, r5, r3
   410a8:	ldr	r0, [sp, #20]
   410ac:	ldrb	r1, [r0]
   410b0:	ldrb	r3, [r5, r3]
   410b4:	cmp	r1, r3
   410b8:	bne	410d8 <__assert_fail@plt+0x2eb14>
   410bc:	mov	r3, r0
   410c0:	cmp	r3, fp
   410c4:	beq	40ffc <__assert_fail@plt+0x2ea38>
   410c8:	ldrb	r0, [r3, #-1]!
   410cc:	ldrb	r1, [r2, #-1]!
   410d0:	cmp	r0, r1
   410d4:	beq	410c0 <__assert_fail@plt+0x2eafc>
   410d8:	ldr	r3, [sp, #16]
   410dc:	add	r9, r9, r3
   410e0:	b	41010 <__assert_fail@plt+0x2ea4c>
   410e4:	str	r4, [sp, #-8]!
   410e8:	str	lr, [sp, #4]
   410ec:	subs	r1, r0, #0
   410f0:	beq	41110 <__assert_fail@plt+0x2eb4c>
   410f4:	mov	r2, #1
   410f8:	movw	r0, #39484	; 0x9a3c
   410fc:	movt	r0, #4
   41100:	bl	122e8 <setenv@plt>
   41104:	ldr	r4, [sp]
   41108:	add	sp, sp, #4
   4110c:	pop	{pc}		; (ldr pc, [sp], #4)
   41110:	movw	r0, #39484	; 0x9a3c
   41114:	movt	r0, #4
   41118:	bl	12540 <unsetenv@plt>
   4111c:	b	41104 <__assert_fail@plt+0x2eb40>
   41120:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41124:	strd	r6, [sp, #8]
   41128:	str	r8, [sp, #16]
   4112c:	str	lr, [sp, #20]
   41130:	subs	r6, r0, #0
   41134:	beq	411a8 <__assert_fail@plt+0x2ebe4>
   41138:	mov	r0, r6
   4113c:	bl	122d0 <strlen@plt>
   41140:	add	r5, r0, #1
   41144:	cmp	r5, #58	; 0x3a
   41148:	movcs	r0, r5
   4114c:	movcc	r0, #58	; 0x3a
   41150:	add	r0, r0, #9
   41154:	bic	r0, r0, #3
   41158:	bl	32148 <__assert_fail@plt+0x1fb84>
   4115c:	subs	r4, r0, #0
   41160:	beq	41190 <__assert_fail@plt+0x2ebcc>
   41164:	mov	r8, #0
   41168:	str	r8, [r4]
   4116c:	mov	r3, #1
   41170:	strb	r3, [r4, #4]
   41174:	mov	r7, r4
   41178:	strb	r8, [r7, #5]!
   4117c:	mov	r2, r5
   41180:	mov	r1, r6
   41184:	mov	r0, r7
   41188:	bl	12000 <memcpy@plt>
   4118c:	strb	r8, [r7, r5]
   41190:	mov	r0, r4
   41194:	ldrd	r4, [sp]
   41198:	ldrd	r6, [sp, #8]
   4119c:	ldr	r8, [sp, #16]
   411a0:	add	sp, sp, #20
   411a4:	pop	{pc}		; (ldr pc, [sp], #4)
   411a8:	mov	r0, #64	; 0x40
   411ac:	bl	32148 <__assert_fail@plt+0x1fb84>
   411b0:	subs	r4, r0, #0
   411b4:	beq	41190 <__assert_fail@plt+0x2ebcc>
   411b8:	mov	r3, #0
   411bc:	str	r3, [r4]
   411c0:	strb	r3, [r4, #4]
   411c4:	strb	r3, [r4, #5]
   411c8:	b	41190 <__assert_fail@plt+0x2ebcc>
   411cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   411d0:	strd	r6, [sp, #8]
   411d4:	str	r8, [sp, #16]
   411d8:	str	lr, [sp, #20]
   411dc:	ldr	r6, [r1, #40]	; 0x28
   411e0:	cmp	r6, #0
   411e4:	moveq	r0, #1
   411e8:	beq	4122c <__assert_fail@plt+0x2ec68>
   411ec:	mov	r5, r0
   411f0:	mov	r7, r1
   411f4:	cmp	r1, r6
   411f8:	bhi	4120c <__assert_fail@plt+0x2ec48>
   411fc:	add	r3, r1, #44	; 0x2c
   41200:	cmp	r6, r3
   41204:	movcc	r0, #1
   41208:	bcc	4122c <__assert_fail@plt+0x2ec68>
   4120c:	ldrb	r3, [r6]
   41210:	cmp	r3, #0
   41214:	addne	r4, r5, #5
   41218:	bne	41290 <__assert_fail@plt+0x2eccc>
   4121c:	movw	r4, #25528	; 0x63b8
   41220:	movt	r4, #4
   41224:	str	r4, [r7, #40]	; 0x28
   41228:	mov	r0, #1
   4122c:	ldrd	r4, [sp]
   41230:	ldrd	r6, [sp, #8]
   41234:	ldr	r8, [sp, #16]
   41238:	add	sp, sp, #20
   4123c:	pop	{pc}		; (ldr pc, [sp], #4)
   41240:	mov	r0, r6
   41244:	bl	41120 <__assert_fail@plt+0x2eb5c>
   41248:	str	r0, [r5]
   4124c:	cmp	r0, #0
   41250:	moveq	r0, #0
   41254:	beq	4122c <__assert_fail@plt+0x2ec68>
   41258:	mov	r3, #0
   4125c:	strb	r3, [r0, #4]
   41260:	add	r4, r0, #5
   41264:	b	41224 <__assert_fail@plt+0x2ec60>
   41268:	mov	r0, r4
   4126c:	bl	122d0 <strlen@plt>
   41270:	add	r0, r0, #1
   41274:	ldrb	r3, [r4, r0]!
   41278:	cmp	r3, #0
   4127c:	bne	41290 <__assert_fail@plt+0x2eccc>
   41280:	ldr	r3, [r5]
   41284:	cmp	r3, #0
   41288:	addne	r4, r3, #5
   4128c:	movne	r5, r3
   41290:	mov	r1, r6
   41294:	mov	r0, r4
   41298:	bl	11f1c <strcmp@plt>
   4129c:	cmp	r0, #0
   412a0:	beq	41224 <__assert_fail@plt+0x2ec60>
   412a4:	ldrb	r3, [r4]
   412a8:	cmp	r3, #0
   412ac:	bne	41268 <__assert_fail@plt+0x2eca4>
   412b0:	add	r3, r5, #5
   412b4:	cmp	r4, r3
   412b8:	bne	412c8 <__assert_fail@plt+0x2ed04>
   412bc:	ldrb	r3, [r5, #4]
   412c0:	cmp	r3, #0
   412c4:	bne	41268 <__assert_fail@plt+0x2eca4>
   412c8:	mov	r0, r6
   412cc:	bl	122d0 <strlen@plt>
   412d0:	add	r8, r0, #1
   412d4:	add	r3, r5, #64	; 0x40
   412d8:	sub	r3, r3, r4
   412dc:	cmp	r3, r8
   412e0:	ble	41240 <__assert_fail@plt+0x2ec7c>
   412e4:	mov	r2, r8
   412e8:	mov	r1, r6
   412ec:	mov	r0, r4
   412f0:	bl	12000 <memcpy@plt>
   412f4:	mov	r3, #0
   412f8:	strb	r3, [r4, r8]
   412fc:	b	41224 <__assert_fail@plt+0x2ec60>
   41300:	cmp	r0, #1
   41304:	bxeq	lr
   41308:	cmp	r0, #0
   4130c:	bxeq	lr
   41310:	str	r4, [sp, #-8]!
   41314:	str	lr, [sp, #4]
   41318:	ldr	r4, [r0]
   4131c:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   41320:	mov	r0, r4
   41324:	cmp	r4, #0
   41328:	bne	41318 <__assert_fail@plt+0x2ed54>
   4132c:	ldr	r4, [sp]
   41330:	add	sp, sp, #4
   41334:	pop	{pc}		; (ldr pc, [sp], #4)
   41338:	strd	r4, [sp, #-16]!
   4133c:	str	r6, [sp, #8]
   41340:	str	lr, [sp, #12]
   41344:	mov	r4, r0
   41348:	movw	r0, #39484	; 0x9a3c
   4134c:	movt	r0, #4
   41350:	bl	121f8 <getenv@plt>
   41354:	subs	r5, r0, #0
   41358:	beq	413a0 <__assert_fail@plt+0x2eddc>
   4135c:	ldrb	r3, [r4, #4]
   41360:	cmp	r3, #0
   41364:	moveq	r0, #0
   41368:	beq	41380 <__assert_fail@plt+0x2edbc>
   4136c:	mov	r1, r5
   41370:	add	r0, r4, #5
   41374:	bl	11f1c <strcmp@plt>
   41378:	clz	r0, r0
   4137c:	lsr	r0, r0, #5
   41380:	cmp	r0, #0
   41384:	movne	r5, #1
   41388:	beq	413b0 <__assert_fail@plt+0x2edec>
   4138c:	mov	r0, r5
   41390:	ldrd	r4, [sp]
   41394:	ldr	r6, [sp, #8]
   41398:	add	sp, sp, #12
   4139c:	pop	{pc}		; (ldr pc, [sp], #4)
   413a0:	ldrb	r0, [r4, #4]
   413a4:	clz	r0, r0
   413a8:	lsr	r0, r0, #5
   413ac:	b	41380 <__assert_fail@plt+0x2edbc>
   413b0:	mov	r0, r5
   413b4:	bl	41120 <__assert_fail@plt+0x2eb5c>
   413b8:	subs	r5, r0, #0
   413bc:	beq	4138c <__assert_fail@plt+0x2edc8>
   413c0:	ldrb	r3, [r4, #4]
   413c4:	cmp	r3, #0
   413c8:	addne	r0, r4, #5
   413cc:	moveq	r0, #0
   413d0:	bl	410e4 <__assert_fail@plt+0x2eb20>
   413d4:	cmp	r0, #0
   413d8:	beq	413fc <__assert_fail@plt+0x2ee38>
   413dc:	bl	12318 <__errno_location@plt>
   413e0:	mov	r4, r0
   413e4:	ldr	r6, [r0]
   413e8:	mov	r0, r5
   413ec:	bl	41300 <__assert_fail@plt+0x2ed3c>
   413f0:	str	r6, [r4]
   413f4:	mov	r5, #0
   413f8:	b	4138c <__assert_fail@plt+0x2edc8>
   413fc:	bl	12114 <tzset@plt>
   41400:	b	4138c <__assert_fail@plt+0x2edc8>
   41404:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41408:	strd	r6, [sp, #8]
   4140c:	str	r8, [sp, #16]
   41410:	str	lr, [sp, #20]
   41414:	cmp	r0, #1
   41418:	moveq	r5, #1
   4141c:	beq	41460 <__assert_fail@plt+0x2ee9c>
   41420:	mov	r4, r0
   41424:	bl	12318 <__errno_location@plt>
   41428:	mov	r6, r0
   4142c:	ldr	r7, [r0]
   41430:	ldrb	r3, [r4, #4]
   41434:	cmp	r3, #0
   41438:	addne	r0, r4, #5
   4143c:	moveq	r0, #0
   41440:	bl	410e4 <__assert_fail@plt+0x2eb20>
   41444:	cmp	r0, #0
   41448:	beq	41478 <__assert_fail@plt+0x2eeb4>
   4144c:	ldr	r7, [r6]
   41450:	mov	r5, #0
   41454:	mov	r0, r4
   41458:	bl	41300 <__assert_fail@plt+0x2ed3c>
   4145c:	str	r7, [r6]
   41460:	mov	r0, r5
   41464:	ldrd	r4, [sp]
   41468:	ldrd	r6, [sp, #8]
   4146c:	ldr	r8, [sp, #16]
   41470:	add	sp, sp, #20
   41474:	pop	{pc}		; (ldr pc, [sp], #4)
   41478:	bl	12114 <tzset@plt>
   4147c:	mov	r5, #1
   41480:	b	41454 <__assert_fail@plt+0x2ee90>
   41484:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41488:	strd	r6, [sp, #8]
   4148c:	str	r8, [sp, #16]
   41490:	str	lr, [sp, #20]
   41494:	mov	r6, r1
   41498:	mov	r4, r2
   4149c:	subs	r5, r0, #0
   414a0:	beq	4150c <__assert_fail@plt+0x2ef48>
   414a4:	mov	r0, r5
   414a8:	bl	41338 <__assert_fail@plt+0x2ed74>
   414ac:	subs	r7, r0, #0
   414b0:	moveq	r4, r7
   414b4:	beq	414f4 <__assert_fail@plt+0x2ef30>
   414b8:	mov	r1, r4
   414bc:	mov	r0, r6
   414c0:	bl	120cc <localtime_r@plt>
   414c4:	subs	r6, r0, #0
   414c8:	beq	41520 <__assert_fail@plt+0x2ef5c>
   414cc:	mov	r1, r4
   414d0:	mov	r0, r5
   414d4:	bl	411cc <__assert_fail@plt+0x2ec08>
   414d8:	mov	r5, r0
   414dc:	mov	r0, r7
   414e0:	bl	41404 <__assert_fail@plt+0x2ee40>
   414e4:	and	r0, r0, r5
   414e8:	uxtb	r0, r0
   414ec:	cmp	r0, #0
   414f0:	moveq	r4, #0
   414f4:	mov	r0, r4
   414f8:	ldrd	r4, [sp]
   414fc:	ldrd	r6, [sp, #8]
   41500:	ldr	r8, [sp, #16]
   41504:	add	sp, sp, #20
   41508:	pop	{pc}		; (ldr pc, [sp], #4)
   4150c:	mov	r1, r2
   41510:	mov	r0, r6
   41514:	bl	11ee0 <gmtime_r@plt>
   41518:	mov	r4, r0
   4151c:	b	414f4 <__assert_fail@plt+0x2ef30>
   41520:	mov	r0, r7
   41524:	bl	41404 <__assert_fail@plt+0x2ee40>
   41528:	mov	r4, r6
   4152c:	b	414f4 <__assert_fail@plt+0x2ef30>
   41530:	strd	r4, [sp, #-20]!	; 0xffffffec
   41534:	strd	r6, [sp, #8]
   41538:	str	lr, [sp, #16]
   4153c:	sub	sp, sp, #52	; 0x34
   41540:	mov	r4, r1
   41544:	subs	r5, r0, #0
   41548:	beq	415c4 <__assert_fail@plt+0x2f000>
   4154c:	mov	r0, r5
   41550:	bl	41338 <__assert_fail@plt+0x2ed74>
   41554:	subs	r7, r0, #0
   41558:	beq	41640 <__assert_fail@plt+0x2f07c>
   4155c:	ldr	r3, [r4]
   41560:	str	r3, [sp, #4]
   41564:	ldr	r3, [r4, #4]
   41568:	str	r3, [sp, #8]
   4156c:	ldr	r3, [r4, #8]
   41570:	str	r3, [sp, #12]
   41574:	ldr	r3, [r4, #12]
   41578:	str	r3, [sp, #16]
   4157c:	ldr	r3, [r4, #16]
   41580:	str	r3, [sp, #20]
   41584:	ldr	r3, [r4, #20]
   41588:	str	r3, [sp, #24]
   4158c:	mvn	r3, #0
   41590:	str	r3, [sp, #32]
   41594:	ldr	r3, [r4, #32]
   41598:	str	r3, [sp, #36]	; 0x24
   4159c:	add	r0, sp, #4
   415a0:	bl	11f58 <mktime@plt>
   415a4:	mov	r6, r0
   415a8:	ldr	r3, [sp, #32]
   415ac:	cmp	r3, #0
   415b0:	bge	415d4 <__assert_fail@plt+0x2f010>
   415b4:	mov	r0, r7
   415b8:	bl	41404 <__assert_fail@plt+0x2ee40>
   415bc:	mvn	r6, #0
   415c0:	b	41628 <__assert_fail@plt+0x2f064>
   415c4:	mov	r0, r1
   415c8:	bl	124a4 <timegm@plt>
   415cc:	mov	r6, r0
   415d0:	b	41628 <__assert_fail@plt+0x2f064>
   415d4:	add	r1, sp, #4
   415d8:	mov	r0, r5
   415dc:	bl	411cc <__assert_fail@plt+0x2ec08>
   415e0:	mov	r5, r0
   415e4:	mov	r0, r7
   415e8:	bl	41404 <__assert_fail@plt+0x2ee40>
   415ec:	and	r0, r0, r5
   415f0:	tst	r0, #255	; 0xff
   415f4:	beq	415bc <__assert_fail@plt+0x2eff8>
   415f8:	ldrd	r2, [sp, #4]
   415fc:	strd	r2, [r4]
   41600:	ldrd	r2, [sp, #12]
   41604:	strd	r2, [r4, #8]
   41608:	ldrd	r2, [sp, #20]
   4160c:	strd	r2, [r4, #16]
   41610:	ldrd	r2, [sp, #28]
   41614:	strd	r2, [r4, #24]
   41618:	ldrd	r2, [sp, #36]	; 0x24
   4161c:	strd	r2, [r4, #32]
   41620:	ldr	r3, [sp, #44]	; 0x2c
   41624:	str	r3, [r4, #40]	; 0x28
   41628:	mov	r0, r6
   4162c:	add	sp, sp, #52	; 0x34
   41630:	ldrd	r4, [sp]
   41634:	ldrd	r6, [sp, #8]
   41638:	add	sp, sp, #16
   4163c:	pop	{pc}		; (ldr pc, [sp], #4)
   41640:	mvn	r6, #0
   41644:	b	41628 <__assert_fail@plt+0x2f064>
   41648:	str	r4, [sp, #-8]!
   4164c:	str	lr, [sp, #4]
   41650:	movw	r3, #46316	; 0xb4ec
   41654:	movt	r3, #5
   41658:	ldr	r0, [r3]
   4165c:	bl	122a0 <exit@plt>
   41660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   41664:	strd	r6, [sp, #8]
   41668:	strd	r8, [sp, #16]
   4166c:	strd	sl, [sp, #24]
   41670:	str	lr, [sp, #32]
   41674:	sub	sp, sp, #12
   41678:	str	r0, [sp]
   4167c:	mov	r5, r1
   41680:	mov	r6, r2
   41684:	str	r2, [sp, #4]
   41688:	mov	r9, r3
   4168c:	bl	122d0 <strlen@plt>
   41690:	ldr	r4, [r5]
   41694:	cmp	r4, #0
   41698:	beq	41754 <__assert_fail@plt+0x2f190>
   4169c:	mov	r8, r0
   416a0:	mov	fp, #0
   416a4:	mvn	sl, #0
   416a8:	mov	r7, fp
   416ac:	b	416cc <__assert_fail@plt+0x2f108>
   416b0:	mov	sl, r7
   416b4:	b	41734 <__assert_fail@plt+0x2f170>
   416b8:	add	r7, r7, #1
   416bc:	ldr	r4, [r5, #4]!
   416c0:	add	r6, r6, r9
   416c4:	cmp	r4, #0
   416c8:	beq	4172c <__assert_fail@plt+0x2f168>
   416cc:	mov	r2, r8
   416d0:	ldr	r1, [sp]
   416d4:	mov	r0, r4
   416d8:	bl	12564 <strncmp@plt>
   416dc:	cmp	r0, #0
   416e0:	bne	416b8 <__assert_fail@plt+0x2f0f4>
   416e4:	mov	r0, r4
   416e8:	bl	122d0 <strlen@plt>
   416ec:	cmp	r0, r8
   416f0:	beq	416b0 <__assert_fail@plt+0x2f0ec>
   416f4:	cmn	sl, #1
   416f8:	moveq	sl, r7
   416fc:	beq	416b8 <__assert_fail@plt+0x2f0f4>
   41700:	ldr	r3, [sp, #4]
   41704:	cmp	r3, #0
   41708:	moveq	fp, #1
   4170c:	beq	416b8 <__assert_fail@plt+0x2f0f4>
   41710:	mov	r2, r9
   41714:	mov	r1, r6
   41718:	mla	r0, r9, sl, r3
   4171c:	bl	12060 <memcmp@plt>
   41720:	cmp	r0, #0
   41724:	movne	fp, #1
   41728:	b	416b8 <__assert_fail@plt+0x2f0f4>
   4172c:	cmp	fp, #0
   41730:	mvnne	sl, #1
   41734:	mov	r0, sl
   41738:	add	sp, sp, #12
   4173c:	ldrd	r4, [sp]
   41740:	ldrd	r6, [sp, #8]
   41744:	ldrd	r8, [sp, #16]
   41748:	ldrd	sl, [sp, #24]
   4174c:	add	sp, sp, #32
   41750:	pop	{pc}		; (ldr pc, [sp], #4)
   41754:	mvn	sl, #0
   41758:	b	41734 <__assert_fail@plt+0x2f170>
   4175c:	strd	r4, [sp, #-16]!
   41760:	str	r6, [sp, #8]
   41764:	str	lr, [sp, #12]
   41768:	sub	sp, sp, #8
   4176c:	mov	r6, r0
   41770:	mov	r5, r1
   41774:	cmn	r2, #1
   41778:	mov	r2, #5
   4177c:	movweq	r1, #42376	; 0xa588
   41780:	movteq	r1, #4
   41784:	movwne	r1, #42404	; 0xa5a4
   41788:	movtne	r1, #4
   4178c:	mov	r0, #0
   41790:	bl	12084 <dcgettext@plt>
   41794:	mov	r4, r0
   41798:	mov	r2, r5
   4179c:	mov	r1, #8
   417a0:	mov	r0, #0
   417a4:	bl	2d1c4 <__assert_fail@plt+0x1ac00>
   417a8:	mov	r5, r0
   417ac:	mov	r1, r6
   417b0:	mov	r0, #1
   417b4:	bl	2d524 <__assert_fail@plt+0x1af60>
   417b8:	str	r0, [sp]
   417bc:	mov	r3, r5
   417c0:	mov	r2, r4
   417c4:	mov	r1, #0
   417c8:	mov	r0, r1
   417cc:	bl	121bc <error@plt>
   417d0:	add	sp, sp, #8
   417d4:	ldrd	r4, [sp]
   417d8:	ldr	r6, [sp, #8]
   417dc:	add	sp, sp, #12
   417e0:	pop	{pc}		; (ldr pc, [sp], #4)
   417e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   417e8:	strd	r6, [sp, #8]
   417ec:	strd	r8, [sp, #16]
   417f0:	strd	sl, [sp, #24]
   417f4:	str	lr, [sp, #32]
   417f8:	sub	sp, sp, #12
   417fc:	mov	r7, r0
   41800:	mov	r4, r1
   41804:	mov	r8, r2
   41808:	mov	r2, #5
   4180c:	movw	r1, #42436	; 0xa5c4
   41810:	movt	r1, #4
   41814:	mov	r0, #0
   41818:	bl	12084 <dcgettext@plt>
   4181c:	movw	r3, #46408	; 0xb548
   41820:	movt	r3, #5
   41824:	ldr	r1, [r3]
   41828:	bl	12558 <fputs@plt>
   4182c:	ldr	r5, [r7]
   41830:	cmp	r5, #0
   41834:	beq	418d8 <__assert_fail@plt+0x2f314>
   41838:	mov	r3, #0
   4183c:	str	r3, [sp]
   41840:	mov	r6, r3
   41844:	movw	sl, #46408	; 0xb548
   41848:	movt	sl, #5
   4184c:	movw	fp, #42460	; 0xa5dc
   41850:	movt	fp, #4
   41854:	movw	r3, #42468	; 0xa5e4
   41858:	movt	r3, #4
   4185c:	str	r3, [sp, #4]
   41860:	b	41898 <__assert_fail@plt+0x2f2d4>
   41864:	ldr	r9, [sl]
   41868:	mov	r0, r5
   4186c:	bl	2d540 <__assert_fail@plt+0x1af7c>
   41870:	mov	r2, r0
   41874:	mov	r1, fp
   41878:	mov	r0, r9
   4187c:	bl	1230c <fprintf@plt>
   41880:	str	r4, [sp]
   41884:	add	r6, r6, #1
   41888:	ldr	r5, [r7, #4]!
   4188c:	add	r4, r4, r8
   41890:	cmp	r5, #0
   41894:	beq	418d8 <__assert_fail@plt+0x2f314>
   41898:	cmp	r6, #0
   4189c:	beq	41864 <__assert_fail@plt+0x2f2a0>
   418a0:	mov	r2, r8
   418a4:	mov	r1, r4
   418a8:	ldr	r0, [sp]
   418ac:	bl	12060 <memcmp@plt>
   418b0:	cmp	r0, #0
   418b4:	bne	41864 <__assert_fail@plt+0x2f2a0>
   418b8:	ldr	r9, [sl]
   418bc:	mov	r0, r5
   418c0:	bl	2d540 <__assert_fail@plt+0x1af7c>
   418c4:	mov	r2, r0
   418c8:	ldr	r1, [sp, #4]
   418cc:	mov	r0, r9
   418d0:	bl	1230c <fprintf@plt>
   418d4:	b	41884 <__assert_fail@plt+0x2f2c0>
   418d8:	movw	r3, #46408	; 0xb548
   418dc:	movt	r3, #5
   418e0:	ldr	r1, [r3]
   418e4:	mov	r0, #10
   418e8:	bl	124b0 <putc@plt>
   418ec:	add	sp, sp, #12
   418f0:	ldrd	r4, [sp]
   418f4:	ldrd	r6, [sp, #8]
   418f8:	ldrd	r8, [sp, #16]
   418fc:	ldrd	sl, [sp, #24]
   41900:	add	sp, sp, #32
   41904:	pop	{pc}		; (ldr pc, [sp], #4)
   41908:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4190c:	strd	r6, [sp, #8]
   41910:	str	r8, [sp, #16]
   41914:	str	lr, [sp, #20]
   41918:	mov	r7, r0
   4191c:	mov	r6, r1
   41920:	mov	r4, r2
   41924:	mov	r5, r3
   41928:	ldr	r3, [sp, #24]
   4192c:	mov	r2, r5
   41930:	mov	r1, r4
   41934:	mov	r0, r6
   41938:	bl	41660 <__assert_fail@plt+0x2f09c>
   4193c:	cmp	r0, #0
   41940:	blt	41958 <__assert_fail@plt+0x2f394>
   41944:	ldrd	r4, [sp]
   41948:	ldrd	r6, [sp, #8]
   4194c:	ldr	r8, [sp, #16]
   41950:	add	sp, sp, #20
   41954:	pop	{pc}		; (ldr pc, [sp], #4)
   41958:	mov	r2, r0
   4195c:	mov	r1, r6
   41960:	mov	r0, r7
   41964:	bl	4175c <__assert_fail@plt+0x2f198>
   41968:	ldr	r2, [sp, #24]
   4196c:	mov	r1, r5
   41970:	mov	r0, r4
   41974:	bl	417e4 <__assert_fail@plt+0x2f220>
   41978:	ldr	r3, [sp, #28]
   4197c:	blx	r3
   41980:	mvn	r0, #0
   41984:	b	41944 <__assert_fail@plt+0x2f380>
   41988:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4198c:	strd	r6, [sp, #8]
   41990:	str	r8, [sp, #16]
   41994:	str	lr, [sp, #20]
   41998:	ldr	r7, [r1]
   4199c:	cmp	r7, #0
   419a0:	beq	419dc <__assert_fail@plt+0x2f418>
   419a4:	mov	r6, r3
   419a8:	mov	r8, r0
   419ac:	mov	r4, r2
   419b0:	mov	r5, r1
   419b4:	mov	r2, r6
   419b8:	mov	r1, r4
   419bc:	mov	r0, r8
   419c0:	bl	12060 <memcmp@plt>
   419c4:	cmp	r0, #0
   419c8:	beq	419dc <__assert_fail@plt+0x2f418>
   419cc:	ldr	r7, [r5, #4]!
   419d0:	add	r4, r4, r6
   419d4:	cmp	r7, #0
   419d8:	bne	419b4 <__assert_fail@plt+0x2f3f0>
   419dc:	mov	r0, r7
   419e0:	ldrd	r4, [sp]
   419e4:	ldrd	r6, [sp, #8]
   419e8:	ldr	r8, [sp, #16]
   419ec:	add	sp, sp, #20
   419f0:	pop	{pc}		; (ldr pc, [sp], #4)
   419f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   419f8:	strd	r6, [sp, #8]
   419fc:	str	lr, [sp, #16]
   41a00:	sub	sp, sp, #36	; 0x24
   41a04:	mov	r4, r0
   41a08:	ldrb	r3, [r2]
   41a0c:	cmp	r3, #0
   41a10:	strbeq	r3, [r0]
   41a14:	beq	41a8c <__assert_fail@plt+0x2f4c8>
   41a18:	mov	r6, r1
   41a1c:	mov	r5, r2
   41a20:	movw	r3, #48700	; 0xbe3c
   41a24:	movt	r3, #5
   41a28:	ldr	r3, [r3]
   41a2c:	cmp	r3, #0
   41a30:	beq	41aa0 <__assert_fail@plt+0x2f4dc>
   41a34:	movw	r3, #48700	; 0xbe3c
   41a38:	movt	r3, #5
   41a3c:	ldr	r3, [r3]
   41a40:	cmp	r3, #0
   41a44:	blt	41b18 <__assert_fail@plt+0x2f554>
   41a48:	mov	r0, r5
   41a4c:	bl	122d0 <strlen@plt>
   41a50:	add	r0, r0, #27
   41a54:	cmp	r0, #4032	; 0xfc0
   41a58:	bls	41a68 <__assert_fail@plt+0x2f4a4>
   41a5c:	bl	32148 <__assert_fail@plt+0x1fb84>
   41a60:	subs	r4, r0, #0
   41a64:	beq	41b20 <__assert_fail@plt+0x2f55c>
   41a68:	mov	r2, r6
   41a6c:	movw	r1, #42500	; 0xa604
   41a70:	movt	r1, #4
   41a74:	mov	r0, r4
   41a78:	bl	12480 <sprintf@plt>
   41a7c:	mov	r1, r5
   41a80:	add	r0, r4, r0
   41a84:	bl	12180 <strcpy@plt>
   41a88:	mov	r0, r4
   41a8c:	add	sp, sp, #36	; 0x24
   41a90:	ldrd	r4, [sp]
   41a94:	ldrd	r6, [sp, #8]
   41a98:	add	sp, sp, #16
   41a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   41aa0:	mov	r1, #18688	; 0x4900
   41aa4:	movt	r1, #8
   41aa8:	movw	r0, #34764	; 0x87cc
   41aac:	movt	r0, #4
   41ab0:	bl	121ec <open64@plt>
   41ab4:	subs	r7, r0, #0
   41ab8:	bge	41ad4 <__assert_fail@plt+0x2f510>
   41abc:	movw	r3, #48700	; 0xbe3c
   41ac0:	movt	r3, #5
   41ac4:	mvn	r2, #0
   41ac8:	str	r2, [r3]
   41acc:	mov	r0, #0
   41ad0:	b	41a8c <__assert_fail@plt+0x2f4c8>
   41ad4:	mov	r2, r7
   41ad8:	movw	r1, #42476	; 0xa5ec
   41adc:	movt	r1, #4
   41ae0:	mov	r0, sp
   41ae4:	bl	12480 <sprintf@plt>
   41ae8:	mov	r1, #0
   41aec:	mov	r0, sp
   41af0:	bl	123c0 <access@plt>
   41af4:	cmp	r0, #0
   41af8:	mvnne	r2, #0
   41afc:	moveq	r2, #1
   41b00:	movw	r3, #48700	; 0xbe3c
   41b04:	movt	r3, #5
   41b08:	str	r2, [r3]
   41b0c:	mov	r0, r7
   41b10:	bl	1257c <close@plt>
   41b14:	b	41a34 <__assert_fail@plt+0x2f470>
   41b18:	mov	r0, #0
   41b1c:	b	41a8c <__assert_fail@plt+0x2f4c8>
   41b20:	mov	r0, r4
   41b24:	b	41a8c <__assert_fail@plt+0x2f4c8>
   41b28:	ldrb	r3, [r0]
   41b2c:	cmp	r3, #47	; 0x2f
   41b30:	bne	41b40 <__assert_fail@plt+0x2f57c>
   41b34:	ldrb	r3, [r0, #1]!
   41b38:	cmp	r3, #47	; 0x2f
   41b3c:	beq	41b34 <__assert_fail@plt+0x2f570>
   41b40:	ldrb	r2, [r0]
   41b44:	cmp	r2, #0
   41b48:	bxeq	lr
   41b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   41b50:	mov	r1, r0
   41b54:	mov	r3, #0
   41b58:	mov	lr, #1
   41b5c:	mov	ip, r3
   41b60:	b	41b7c <__assert_fail@plt+0x2f5b8>
   41b64:	cmp	r3, #0
   41b68:	movne	r0, r1
   41b6c:	movne	r3, ip
   41b70:	ldrb	r2, [r1, #1]!
   41b74:	cmp	r2, #0
   41b78:	beq	41b8c <__assert_fail@plt+0x2f5c8>
   41b7c:	cmp	r2, #47	; 0x2f
   41b80:	moveq	r3, lr
   41b84:	bne	41b64 <__assert_fail@plt+0x2f5a0>
   41b88:	b	41b70 <__assert_fail@plt+0x2f5ac>
   41b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   41b90:	str	r4, [sp, #-8]!
   41b94:	str	lr, [sp, #4]
   41b98:	mov	r4, r0
   41b9c:	bl	122d0 <strlen@plt>
   41ba0:	cmp	r0, #1
   41ba4:	bls	41bc4 <__assert_fail@plt+0x2f600>
   41ba8:	add	r3, r4, r0
   41bac:	ldrb	r3, [r3, #-1]
   41bb0:	cmp	r3, #47	; 0x2f
   41bb4:	subeq	r0, r0, #2
   41bb8:	addeq	r3, r4, r0
   41bbc:	rsbeq	r1, r4, #1
   41bc0:	beq	41bd0 <__assert_fail@plt+0x2f60c>
   41bc4:	ldr	r4, [sp]
   41bc8:	add	sp, sp, #4
   41bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   41bd0:	add	r0, r1, r3
   41bd4:	cmp	r3, r4
   41bd8:	beq	41bc4 <__assert_fail@plt+0x2f600>
   41bdc:	ldrb	r2, [r3], #-1
   41be0:	cmp	r2, #47	; 0x2f
   41be4:	bne	41bc4 <__assert_fail@plt+0x2f600>
   41be8:	b	41bd0 <__assert_fail@plt+0x2f60c>
   41bec:	strd	r4, [sp, #-16]!
   41bf0:	str	r6, [sp, #8]
   41bf4:	str	lr, [sp, #12]
   41bf8:	mov	r4, r0
   41bfc:	bl	12198 <__fpending@plt>
   41c00:	mov	r6, r0
   41c04:	mov	r0, r4
   41c08:	bl	11fc4 <ferror@plt>
   41c0c:	mov	r5, r0
   41c10:	mov	r0, r4
   41c14:	bl	123cc <fclose@plt>
   41c18:	cmp	r5, #0
   41c1c:	bne	41c50 <__assert_fail@plt+0x2f68c>
   41c20:	cmp	r0, #0
   41c24:	beq	41c40 <__assert_fail@plt+0x2f67c>
   41c28:	cmp	r6, #0
   41c2c:	bne	41c6c <__assert_fail@plt+0x2f6a8>
   41c30:	bl	12318 <__errno_location@plt>
   41c34:	ldr	r0, [r0]
   41c38:	subs	r0, r0, #9
   41c3c:	mvnne	r0, #0
   41c40:	ldrd	r4, [sp]
   41c44:	ldr	r6, [sp, #8]
   41c48:	add	sp, sp, #12
   41c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   41c50:	cmp	r0, #0
   41c54:	bne	41c74 <__assert_fail@plt+0x2f6b0>
   41c58:	bl	12318 <__errno_location@plt>
   41c5c:	mov	r3, #0
   41c60:	str	r3, [r0]
   41c64:	mvn	r0, #0
   41c68:	b	41c40 <__assert_fail@plt+0x2f67c>
   41c6c:	mvn	r0, #0
   41c70:	b	41c40 <__assert_fail@plt+0x2f67c>
   41c74:	mvn	r0, #0
   41c78:	b	41c40 <__assert_fail@plt+0x2f67c>
   41c7c:	mov	r2, #0
   41c80:	mov	r3, #0
   41c84:	strd	r2, [r0, #16]
   41c88:	movw	r3, #62998	; 0xf616
   41c8c:	movt	r3, #149	; 0x95
   41c90:	str	r3, [r0, #24]
   41c94:	bx	lr
   41c98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   41c9c:	strd	r6, [sp, #8]
   41ca0:	strd	r8, [sp, #16]
   41ca4:	str	sl, [sp, #24]
   41ca8:	str	lr, [sp, #28]
   41cac:	movw	r3, #62998	; 0xf616
   41cb0:	movt	r3, #149	; 0x95
   41cb4:	ldr	r2, [r0, #24]
   41cb8:	cmp	r2, r3
   41cbc:	bne	41d18 <__assert_fail@plt+0x2f754>
   41cc0:	ldrd	r6, [r0, #16]
   41cc4:	orrs	r3, r6, r7
   41cc8:	beq	41d64 <__assert_fail@plt+0x2f7a0>
   41ccc:	ldrd	r4, [r1, #96]	; 0x60
   41cd0:	ldrd	r2, [r0]
   41cd4:	cmp	r5, r3
   41cd8:	cmpeq	r4, r2
   41cdc:	beq	41d38 <__assert_fail@plt+0x2f774>
   41ce0:	adds	r8, r6, #1
   41ce4:	adc	r9, r7, #0
   41ce8:	strd	r8, [r0, #16]
   41cec:	and	r2, r6, r8
   41cf0:	and	r3, r7, r9
   41cf4:	orrs	r3, r2, r3
   41cf8:	movne	r0, #0
   41cfc:	beq	41d54 <__assert_fail@plt+0x2f790>
   41d00:	ldrd	r4, [sp]
   41d04:	ldrd	r6, [sp, #8]
   41d08:	ldrd	r8, [sp, #16]
   41d0c:	ldr	sl, [sp, #24]
   41d10:	add	sp, sp, #28
   41d14:	pop	{pc}		; (ldr pc, [sp], #4)
   41d18:	movw	r3, #42520	; 0xa618
   41d1c:	movt	r3, #4
   41d20:	mov	r2, #60	; 0x3c
   41d24:	movw	r1, #42532	; 0xa624
   41d28:	movt	r1, #4
   41d2c:	movw	r0, #42548	; 0xa634
   41d30:	movt	r0, #4
   41d34:	bl	125c4 <__assert_fail@plt>
   41d38:	ldrd	r4, [r1]
   41d3c:	ldrd	r2, [r0, #8]
   41d40:	cmp	r5, r3
   41d44:	cmpeq	r4, r2
   41d48:	moveq	r0, #1
   41d4c:	bne	41ce0 <__assert_fail@plt+0x2f71c>
   41d50:	b	41d00 <__assert_fail@plt+0x2f73c>
   41d54:	orrs	r3, r8, r9
   41d58:	moveq	r0, #1
   41d5c:	beq	41d00 <__assert_fail@plt+0x2f73c>
   41d60:	b	41d70 <__assert_fail@plt+0x2f7ac>
   41d64:	mov	r2, #1
   41d68:	mov	r3, #0
   41d6c:	strd	r2, [r0, #16]
   41d70:	ldrd	r2, [r1]
   41d74:	strd	r2, [r0, #8]
   41d78:	ldrd	r2, [r1, #96]	; 0x60
   41d7c:	strd	r2, [r0]
   41d80:	mov	r0, #0
   41d84:	b	41d00 <__assert_fail@plt+0x2f73c>
   41d88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   41d8c:	strd	r6, [sp, #8]
   41d90:	strd	r8, [sp, #16]
   41d94:	str	sl, [sp, #24]
   41d98:	str	lr, [sp, #28]
   41d9c:	ldr	ip, [r0, #4]
   41da0:	cmp	ip, r1
   41da4:	strcs	r1, [r0]
   41da8:	movcs	r4, #1
   41dac:	bcs	41dfc <__assert_fail@plt+0x2f838>
   41db0:	mov	r7, r3
   41db4:	mov	r6, r1
   41db8:	mov	r5, r0
   41dbc:	umull	r8, r9, r1, r3
   41dc0:	adds	r4, r9, #0
   41dc4:	movne	r4, #1
   41dc8:	cmp	r4, #0
   41dcc:	bne	41e18 <__assert_fail@plt+0x2f854>
   41dd0:	ldr	r0, [r0, #8]
   41dd4:	cmp	r0, r2
   41dd8:	beq	41e2c <__assert_fail@plt+0x2f868>
   41ddc:	mov	r1, r8
   41de0:	bl	32ce0 <__assert_fail@plt+0x2071c>
   41de4:	subs	r8, r0, #0
   41de8:	beq	41dfc <__assert_fail@plt+0x2f838>
   41dec:	str	r8, [r5, #8]
   41df0:	str	r6, [r5, #4]
   41df4:	str	r6, [r5]
   41df8:	mov	r4, #1
   41dfc:	mov	r0, r4
   41e00:	ldrd	r4, [sp]
   41e04:	ldrd	r6, [sp, #8]
   41e08:	ldrd	r8, [sp, #16]
   41e0c:	ldr	sl, [sp, #24]
   41e10:	add	sp, sp, #28
   41e14:	pop	{pc}		; (ldr pc, [sp], #4)
   41e18:	bl	12318 <__errno_location@plt>
   41e1c:	mov	r3, #12
   41e20:	str	r3, [r0]
   41e24:	mov	r4, #0
   41e28:	b	41dfc <__assert_fail@plt+0x2f838>
   41e2c:	mov	r0, r8
   41e30:	bl	32148 <__assert_fail@plt+0x1fb84>
   41e34:	subs	r8, r0, #0
   41e38:	beq	41dfc <__assert_fail@plt+0x2f838>
   41e3c:	ldr	r1, [r5, #8]
   41e40:	cmp	r1, #0
   41e44:	beq	41dec <__assert_fail@plt+0x2f828>
   41e48:	ldr	r2, [r5]
   41e4c:	mul	r2, r2, r7
   41e50:	mov	r0, r8
   41e54:	bl	12000 <memcpy@plt>
   41e58:	b	41dec <__assert_fail@plt+0x2f828>
   41e5c:	str	r4, [sp, #-8]!
   41e60:	str	lr, [sp, #4]
   41e64:	mov	r1, r0
   41e68:	mov	r0, #0
   41e6c:	bl	11fe8 <clock_gettime@plt>
   41e70:	ldr	r4, [sp]
   41e74:	add	sp, sp, #4
   41e78:	pop	{pc}		; (ldr pc, [sp], #4)
   41e7c:	str	r4, [sp, #-8]!
   41e80:	str	lr, [sp, #4]
   41e84:	sub	sp, sp, #8
   41e88:	mov	r4, r0
   41e8c:	mov	r0, sp
   41e90:	bl	41e5c <__assert_fail@plt+0x2f898>
   41e94:	ldrd	r2, [sp]
   41e98:	strd	r2, [r4]
   41e9c:	mov	r0, r4
   41ea0:	add	sp, sp, #8
   41ea4:	ldr	r4, [sp]
   41ea8:	add	sp, sp, #4
   41eac:	pop	{pc}		; (ldr pc, [sp], #4)
   41eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   41eb4:	sub	sp, sp, #268	; 0x10c
   41eb8:	movw	r2, #257	; 0x101
   41ebc:	add	r1, sp, #4
   41ec0:	bl	43e9c <__assert_fail@plt+0x318d8>
   41ec4:	cmp	r0, #0
   41ec8:	movne	r0, #0
   41ecc:	bne	41f04 <__assert_fail@plt+0x2f940>
   41ed0:	movw	r1, #39496	; 0x9a48
   41ed4:	movt	r1, #4
   41ed8:	add	r0, sp, #4
   41edc:	bl	11f1c <strcmp@plt>
   41ee0:	cmp	r0, #0
   41ee4:	beq	41f00 <__assert_fail@plt+0x2f93c>
   41ee8:	movw	r1, #42572	; 0xa64c
   41eec:	movt	r1, #4
   41ef0:	add	r0, sp, #4
   41ef4:	bl	11f1c <strcmp@plt>
   41ef8:	adds	r0, r0, #0
   41efc:	movne	r0, #1
   41f00:	and	r0, r0, #1
   41f04:	add	sp, sp, #268	; 0x10c
   41f08:	pop	{pc}		; (ldr pc, [sp], #4)
   41f0c:	mov	r3, #1
   41f10:	strb	r3, [r0, #28]
   41f14:	mov	r3, #0
   41f18:	str	r3, [r0, #20]
   41f1c:	str	r3, [r0, #24]
   41f20:	str	r1, [r0]
   41f24:	str	r1, [r0, #4]
   41f28:	str	r1, [r0, #8]
   41f2c:	str	r1, [r0, #12]
   41f30:	str	r1, [r0, #16]
   41f34:	bx	lr
   41f38:	ldrb	r0, [r0, #28]
   41f3c:	bx	lr
   41f40:	mov	r2, r0
   41f44:	ldrb	ip, [r0, #28]
   41f48:	eor	ip, ip, #1
   41f4c:	ldr	r3, [r0, #20]
   41f50:	add	r3, ip, r3
   41f54:	and	r3, r3, #3
   41f58:	ldr	r0, [r0, r3, lsl #2]
   41f5c:	str	r1, [r2, r3, lsl #2]
   41f60:	str	r3, [r2, #20]
   41f64:	ldr	r1, [r2, #24]
   41f68:	cmp	r1, r3
   41f6c:	beq	41f7c <__assert_fail@plt+0x2f9b8>
   41f70:	mov	r3, #0
   41f74:	strb	r3, [r2, #28]
   41f78:	bx	lr
   41f7c:	add	ip, ip, r1
   41f80:	and	ip, ip, #3
   41f84:	str	ip, [r2, #24]
   41f88:	b	41f70 <__assert_fail@plt+0x2f9ac>
   41f8c:	ldrb	r3, [r0, #28]
   41f90:	cmp	r3, #0
   41f94:	bne	41fd0 <__assert_fail@plt+0x2fa0c>
   41f98:	ldr	r3, [r0, #20]
   41f9c:	ldr	r2, [r0, r3, lsl #2]
   41fa0:	ldr	r1, [r0, #16]
   41fa4:	str	r1, [r0, r3, lsl #2]
   41fa8:	ldr	r1, [r0, #24]
   41fac:	cmp	r3, r1
   41fb0:	moveq	r3, #1
   41fb4:	strbeq	r3, [r0, #28]
   41fb8:	beq	41fc8 <__assert_fail@plt+0x2fa04>
   41fbc:	add	r3, r3, #3
   41fc0:	and	r3, r3, #3
   41fc4:	str	r3, [r0, #20]
   41fc8:	mov	r0, r2
   41fcc:	bx	lr
   41fd0:	str	r4, [sp, #-8]!
   41fd4:	str	lr, [sp, #4]
   41fd8:	bl	12570 <abort@plt>
   41fdc:	str	r4, [sp, #-8]!
   41fe0:	str	lr, [sp, #4]
   41fe4:	mov	r0, #14
   41fe8:	bl	12450 <nl_langinfo@plt>
   41fec:	cmp	r0, #0
   41ff0:	beq	42014 <__assert_fail@plt+0x2fa50>
   41ff4:	ldrb	r2, [r0]
   41ff8:	movw	r3, #42580	; 0xa654
   41ffc:	movt	r3, #4
   42000:	cmp	r2, #0
   42004:	moveq	r0, r3
   42008:	ldr	r4, [sp]
   4200c:	add	sp, sp, #4
   42010:	pop	{pc}		; (ldr pc, [sp], #4)
   42014:	movw	r0, #42580	; 0xa654
   42018:	movt	r0, #4
   4201c:	b	42008 <__assert_fail@plt+0x2fa44>
   42020:	adds	r3, r0, #16
   42024:	bmi	42078 <__assert_fail@plt+0x2fab4>
   42028:	mov	r2, #0
   4202c:	cmp	r3, r0
   42030:	bcc	42078 <__assert_fail@plt+0x2fab4>
   42034:	cmp	r2, #0
   42038:	bne	42080 <__assert_fail@plt+0x2fabc>
   4203c:	str	r4, [sp, #-8]!
   42040:	str	lr, [sp, #4]
   42044:	mov	r0, r3
   42048:	bl	12210 <malloc@plt>
   4204c:	cmp	r0, #0
   42050:	beq	4206c <__assert_fail@plt+0x2faa8>
   42054:	add	r3, r0, #8
   42058:	bic	r3, r3, #15
   4205c:	rsb	r2, r0, #8
   42060:	add	r3, r3, r2
   42064:	add	r0, r0, r3
   42068:	strb	r3, [r0, #-1]
   4206c:	ldr	r4, [sp]
   42070:	add	sp, sp, #4
   42074:	pop	{pc}		; (ldr pc, [sp], #4)
   42078:	mov	r2, #1
   4207c:	b	42034 <__assert_fail@plt+0x2fa70>
   42080:	mov	r0, #0
   42084:	bx	lr
   42088:	str	r4, [sp, #-8]!
   4208c:	str	lr, [sp, #4]
   42090:	tst	r0, #7
   42094:	bne	420ac <__assert_fail@plt+0x2fae8>
   42098:	tst	r0, #8
   4209c:	bne	420b0 <__assert_fail@plt+0x2faec>
   420a0:	ldr	r4, [sp]
   420a4:	add	sp, sp, #4
   420a8:	pop	{pc}		; (ldr pc, [sp], #4)
   420ac:	bl	12570 <abort@plt>
   420b0:	ldrb	r3, [r0, #-1]
   420b4:	sub	r0, r0, r3
   420b8:	bl	2fba8 <__assert_fail@plt+0x1d5e4>
   420bc:	b	420a0 <__assert_fail@plt+0x2fadc>
   420c0:	str	r4, [sp, #-8]!
   420c4:	str	lr, [sp, #4]
   420c8:	mov	r4, r0
   420cc:	bl	11f7c <wcwidth@plt>
   420d0:	cmp	r0, #0
   420d4:	blt	420e4 <__assert_fail@plt+0x2fb20>
   420d8:	ldr	r4, [sp]
   420dc:	add	sp, sp, #4
   420e0:	pop	{pc}		; (ldr pc, [sp], #4)
   420e4:	mov	r0, r4
   420e8:	bl	120e4 <iswcntrl@plt>
   420ec:	clz	r0, r0
   420f0:	lsr	r0, r0, #5
   420f4:	b	420d8 <__assert_fail@plt+0x2fb14>
   420f8:	strd	r4, [sp, #-16]!
   420fc:	str	r6, [sp, #8]
   42100:	str	lr, [sp, #12]
   42104:	mov	r5, r0
   42108:	mov	r4, r1
   4210c:	ldr	r3, [r1], #16
   42110:	cmp	r3, r1
   42114:	strne	r3, [r0]
   42118:	beq	42148 <__assert_fail@plt+0x2fb84>
   4211c:	ldr	r3, [r4, #4]
   42120:	str	r3, [r5, #4]
   42124:	ldrb	r3, [r4, #8]
   42128:	strb	r3, [r5, #8]
   4212c:	cmp	r3, #0
   42130:	ldrne	r3, [r4, #12]
   42134:	strne	r3, [r5, #12]
   42138:	ldrd	r4, [sp]
   4213c:	ldr	r6, [sp, #8]
   42140:	add	sp, sp, #12
   42144:	pop	{pc}		; (ldr pc, [sp], #4)
   42148:	add	r6, r0, #16
   4214c:	ldr	r2, [r4, #4]
   42150:	mov	r0, r6
   42154:	bl	12000 <memcpy@plt>
   42158:	str	r6, [r5]
   4215c:	b	4211c <__assert_fail@plt+0x2fb58>
   42160:	movw	r3, #42588	; 0xa65c
   42164:	movt	r3, #4
   42168:	lsr	r2, r0, #5
   4216c:	and	r0, r0, #31
   42170:	ldr	r3, [r3, r2, lsl #2]
   42174:	lsr	r0, r3, r0
   42178:	and	r0, r0, #1
   4217c:	bx	lr
   42180:	strd	r4, [sp, #-20]!	; 0xffffffec
   42184:	strd	r6, [sp, #8]
   42188:	str	lr, [sp, #16]
   4218c:	sub	sp, sp, #60	; 0x3c
   42190:	mov	r4, r0
   42194:	bl	12168 <__ctype_get_mb_cur_max@plt>
   42198:	cmp	r0, #1
   4219c:	bhi	421c4 <__assert_fail@plt+0x2fc00>
   421a0:	mov	r0, r4
   421a4:	bl	122d0 <strlen@plt>
   421a8:	mov	r4, r0
   421ac:	mov	r0, r4
   421b0:	add	sp, sp, #60	; 0x3c
   421b4:	ldrd	r4, [sp]
   421b8:	ldrd	r6, [sp, #8]
   421bc:	add	sp, sp, #16
   421c0:	pop	{pc}		; (ldr pc, [sp], #4)
   421c4:	str	r4, [sp, #16]
   421c8:	mov	r4, #0
   421cc:	strb	r4, [sp]
   421d0:	mov	r2, #0
   421d4:	mov	r3, #0
   421d8:	strd	r2, [sp, #4]
   421dc:	strb	r4, [sp, #12]
   421e0:	mov	r5, #1
   421e4:	movw	r6, #42588	; 0xa65c
   421e8:	movt	r6, #4
   421ec:	b	422c0 <__assert_fail@plt+0x2fcfc>
   421f0:	add	r0, sp, #4
   421f4:	bl	1203c <mbsinit@plt>
   421f8:	cmp	r0, #0
   421fc:	beq	4230c <__assert_fail@plt+0x2fd48>
   42200:	strb	r5, [sp]
   42204:	ldr	r7, [sp, #16]
   42208:	bl	12168 <__ctype_get_mb_cur_max@plt>
   4220c:	mov	r1, r0
   42210:	mov	r0, r7
   42214:	bl	2dd58 <__assert_fail@plt+0x1b794>
   42218:	add	r3, sp, #4
   4221c:	mov	r2, r0
   42220:	mov	r1, r7
   42224:	add	r0, sp, #28
   42228:	bl	32184 <__assert_fail@plt+0x1fbc0>
   4222c:	str	r0, [sp, #20]
   42230:	cmn	r0, #1
   42234:	streq	r5, [sp, #20]
   42238:	moveq	r3, #0
   4223c:	strbeq	r3, [sp, #24]
   42240:	beq	4228c <__assert_fail@plt+0x2fcc8>
   42244:	cmn	r0, #2
   42248:	beq	4232c <__assert_fail@plt+0x2fd68>
   4224c:	cmp	r0, #0
   42250:	bne	42274 <__assert_fail@plt+0x2fcb0>
   42254:	str	r5, [sp, #20]
   42258:	ldr	r3, [sp, #16]
   4225c:	ldrb	r3, [r3]
   42260:	cmp	r3, #0
   42264:	bne	42344 <__assert_fail@plt+0x2fd80>
   42268:	ldr	r3, [sp, #28]
   4226c:	cmp	r3, #0
   42270:	bne	42364 <__assert_fail@plt+0x2fda0>
   42274:	strb	r5, [sp, #24]
   42278:	add	r0, sp, #4
   4227c:	bl	1203c <mbsinit@plt>
   42280:	cmp	r0, #0
   42284:	movne	r3, #0
   42288:	strbne	r3, [sp]
   4228c:	ldrb	r3, [sp, #24]
   42290:	cmp	r3, #0
   42294:	beq	422a4 <__assert_fail@plt+0x2fce0>
   42298:	ldr	r3, [sp, #28]
   4229c:	cmp	r3, #0
   422a0:	beq	421ac <__assert_fail@plt+0x2fbe8>
   422a4:	add	r4, r4, #1
   422a8:	ldr	r3, [sp, #16]
   422ac:	ldr	r2, [sp, #20]
   422b0:	add	r3, r3, r2
   422b4:	str	r3, [sp, #16]
   422b8:	mov	r3, #0
   422bc:	strb	r3, [sp, #12]
   422c0:	ldrb	r3, [sp, #12]
   422c4:	cmp	r3, #0
   422c8:	bne	4228c <__assert_fail@plt+0x2fcc8>
   422cc:	ldrb	r3, [sp]
   422d0:	cmp	r3, #0
   422d4:	bne	42204 <__assert_fail@plt+0x2fc40>
   422d8:	ldr	r1, [sp, #16]
   422dc:	ldrb	r3, [r1]
   422e0:	lsr	r2, r3, #5
   422e4:	and	r3, r3, #31
   422e8:	ldr	r2, [r6, r2, lsl #2]
   422ec:	lsr	r3, r2, r3
   422f0:	tst	r3, #1
   422f4:	beq	421f0 <__assert_fail@plt+0x2fc2c>
   422f8:	str	r5, [sp, #20]
   422fc:	ldrb	r3, [r1]
   42300:	str	r3, [sp, #28]
   42304:	strb	r5, [sp, #24]
   42308:	b	4228c <__assert_fail@plt+0x2fcc8>
   4230c:	movw	r3, #42620	; 0xa67c
   42310:	movt	r3, #4
   42314:	mov	r2, #143	; 0x8f
   42318:	movw	r1, #36224	; 0x8d80
   4231c:	movt	r1, #4
   42320:	movw	r0, #36236	; 0x8d8c
   42324:	movt	r0, #4
   42328:	bl	125c4 <__assert_fail@plt>
   4232c:	ldr	r0, [sp, #16]
   42330:	bl	122d0 <strlen@plt>
   42334:	str	r0, [sp, #20]
   42338:	mov	r3, #0
   4233c:	strb	r3, [sp, #24]
   42340:	b	4228c <__assert_fail@plt+0x2fcc8>
   42344:	movw	r3, #42620	; 0xa67c
   42348:	movt	r3, #4
   4234c:	mov	r2, #171	; 0xab
   42350:	movw	r1, #36224	; 0x8d80
   42354:	movt	r1, #4
   42358:	movw	r0, #36260	; 0x8da4
   4235c:	movt	r0, #4
   42360:	bl	125c4 <__assert_fail@plt>
   42364:	movw	r3, #42620	; 0xa67c
   42368:	movt	r3, #4
   4236c:	mov	r2, #172	; 0xac
   42370:	movw	r1, #36224	; 0x8d80
   42374:	movt	r1, #4
   42378:	movw	r0, #36284	; 0x8dbc
   4237c:	movt	r0, #4
   42380:	bl	125c4 <__assert_fail@plt>
   42384:	strd	r4, [sp, #-16]!
   42388:	str	r6, [sp, #8]
   4238c:	str	lr, [sp, #12]
   42390:	mov	r5, r0
   42394:	subs	r4, r2, #0
   42398:	beq	423c8 <__assert_fail@plt+0x2fe04>
   4239c:	mov	r6, r1
   423a0:	bl	12258 <__ctype_tolower_loc@plt>
   423a4:	add	r3, r6, r4
   423a8:	add	r2, r5, r4
   423ac:	mov	r1, r6
   423b0:	ldrb	lr, [r3, #-1]!
   423b4:	ldr	ip, [r0]
   423b8:	ldr	ip, [ip, lr, lsl #2]
   423bc:	strb	ip, [r2, #-1]!
   423c0:	cmp	r3, r1
   423c4:	bne	423b0 <__assert_fail@plt+0x2fdec>
   423c8:	mov	r0, r5
   423cc:	ldrd	r4, [sp]
   423d0:	ldr	r6, [sp, #8]
   423d4:	add	sp, sp, #12
   423d8:	pop	{pc}		; (ldr pc, [sp], #4)
   423dc:	strd	r4, [sp, #-16]!
   423e0:	str	r6, [sp, #8]
   423e4:	str	lr, [sp, #12]
   423e8:	mov	r5, r0
   423ec:	subs	r4, r2, #0
   423f0:	beq	42420 <__assert_fail@plt+0x2fe5c>
   423f4:	mov	r6, r1
   423f8:	bl	12270 <__ctype_toupper_loc@plt>
   423fc:	add	r3, r6, r4
   42400:	add	r2, r5, r4
   42404:	mov	r1, r6
   42408:	ldrb	lr, [r3, #-1]!
   4240c:	ldr	ip, [r0]
   42410:	ldr	ip, [ip, lr, lsl #2]
   42414:	strb	ip, [r2, #-1]!
   42418:	cmp	r3, r1
   4241c:	bne	42408 <__assert_fail@plt+0x2fe44>
   42420:	mov	r0, r5
   42424:	ldrd	r4, [sp]
   42428:	ldr	r6, [sp, #8]
   4242c:	add	sp, sp, #12
   42430:	pop	{pc}		; (ldr pc, [sp], #4)
   42434:	strd	r4, [sp, #-36]!	; 0xffffffdc
   42438:	strd	r6, [sp, #8]
   4243c:	strd	r8, [sp, #16]
   42440:	strd	sl, [sp, #24]
   42444:	str	lr, [sp, #32]
   42448:	sub	sp, sp, #1120	; 0x460
   4244c:	sub	sp, sp, #12
   42450:	str	r0, [sp, #28]
   42454:	str	r1, [sp, #24]
   42458:	mov	r7, r2
   4245c:	mov	r4, r3
   42460:	str	r3, [sp, #40]	; 0x28
   42464:	ldrb	r3, [sp, #1168]	; 0x490
   42468:	str	r3, [sp, #36]	; 0x24
   4246c:	ldr	r9, [sp, #1176]	; 0x498
   42470:	bl	12318 <__errno_location@plt>
   42474:	str	r0, [sp, #32]
   42478:	ldr	r3, [r0]
   4247c:	str	r3, [sp, #44]	; 0x2c
   42480:	ldr	r5, [r4, #8]
   42484:	ldr	r2, [r4, #40]	; 0x28
   42488:	movw	r3, #25528	; 0x63b8
   4248c:	movt	r3, #4
   42490:	cmp	r2, #0
   42494:	moveq	r2, r3
   42498:	str	r2, [sp, #48]	; 0x30
   4249c:	cmp	r5, #12
   424a0:	subgt	r5, r5, #12
   424a4:	bgt	424b0 <__assert_fail@plt+0x2feec>
   424a8:	cmp	r5, #0
   424ac:	moveq	r5, #12
   424b0:	ldrb	r3, [r7]
   424b4:	cmp	r3, #0
   424b8:	beq	43bf8 <__assert_fail@plt+0x31634>
   424bc:	mov	fp, #0
   424c0:	movw	r2, #46021	; 0xb3c5
   424c4:	movt	r2, #37282	; 0x91a2
   424c8:	str	r2, [sp, #68]	; 0x44
   424cc:	movw	r2, #34953	; 0x8889
   424d0:	movt	r2, #34952	; 0x8888
   424d4:	str	r2, [sp, #72]	; 0x48
   424d8:	movw	sl, #34079	; 0x851f
   424dc:	movt	sl, #20971	; 0x51eb
   424e0:	movw	r8, #9363	; 0x2493
   424e4:	movt	r8, #37449	; 0x9249
   424e8:	movw	r6, #26215	; 0x6667
   424ec:	movt	r6, #26214	; 0x6666
   424f0:	str	r5, [sp, #64]	; 0x40
   424f4:	str	sl, [sp, #56]	; 0x38
   424f8:	str	r8, [sp, #52]	; 0x34
   424fc:	str	r6, [sp, #60]	; 0x3c
   42500:	ldr	r6, [sp, #28]
   42504:	b	4253c <__assert_fail@plt+0x2ff78>
   42508:	cmp	r6, #0
   4250c:	beq	42520 <__assert_fail@plt+0x2ff5c>
   42510:	cmp	r9, #1
   42514:	bhi	42598 <__assert_fail@plt+0x2ffd4>
   42518:	ldrb	r3, [r7]
   4251c:	strb	r3, [r6], #1
   42520:	add	fp, fp, r4
   42524:	mov	r4, r7
   42528:	add	r7, r4, #1
   4252c:	ldrb	r3, [r4, #1]
   42530:	mvn	r9, #0
   42534:	cmp	r3, #0
   42538:	beq	43bcc <__assert_fail@plt+0x31608>
   4253c:	cmp	r3, #37	; 0x25
   42540:	beq	426c8 <__assert_fail@plt+0x30104>
   42544:	bic	r9, r9, r9, asr #31
   42548:	cmp	r9, #1
   4254c:	movcs	r4, r9
   42550:	movcc	r4, #1
   42554:	ldr	r3, [sp, #24]
   42558:	sub	r3, r3, fp
   4255c:	cmp	r3, r4
   42560:	bhi	42508 <__assert_fail@plt+0x2ff44>
   42564:	mov	r3, #34	; 0x22
   42568:	ldr	r2, [sp, #32]
   4256c:	str	r3, [r2]
   42570:	mov	fp, #0
   42574:	mov	r0, fp
   42578:	add	sp, sp, #1120	; 0x460
   4257c:	add	sp, sp, #12
   42580:	ldrd	r4, [sp]
   42584:	ldrd	r6, [sp, #8]
   42588:	ldrd	r8, [sp, #16]
   4258c:	ldrd	sl, [sp, #24]
   42590:	add	sp, sp, #32
   42594:	pop	{pc}		; (ldr pc, [sp], #4)
   42598:	sub	r9, r9, #1
   4259c:	mov	r2, r9
   425a0:	mov	r1, #32
   425a4:	mov	r0, r6
   425a8:	bl	12348 <memset@plt>
   425ac:	add	r6, r6, r9
   425b0:	b	42518 <__assert_fail@plt+0x2ff54>
   425b4:	str	r2, [sp, #28]
   425b8:	b	425c0 <__assert_fail@plt+0x2fffc>
   425bc:	mov	r5, r1
   425c0:	ldrb	r2, [r4, #1]!
   425c4:	sub	r3, r2, #35	; 0x23
   425c8:	cmp	r3, #60	; 0x3c
   425cc:	ldrls	pc, [pc, r3, lsl #2]
   425d0:	b	426f0 <__assert_fail@plt+0x3012c>
   425d4:			; <UNDEFINED> instruction: 0x000425bc
   425d8:	strdeq	r2, [r4], -r0
   425dc:	strdeq	r2, [r4], -r0
   425e0:	strdeq	r2, [r4], -r0
   425e4:	strdeq	r2, [r4], -r0
   425e8:	strdeq	r2, [r4], -r0
   425ec:	strdeq	r2, [r4], -r0
   425f0:	strdeq	r2, [r4], -r0
   425f4:			; <UNDEFINED> instruction: 0x000425b4
   425f8:	strdeq	r2, [r4], -r0
   425fc:			; <UNDEFINED> instruction: 0x000425b4
   42600:	strdeq	r2, [r4], -r0
   42604:	strdeq	r2, [r4], -r0
   42608:			; <UNDEFINED> instruction: 0x000425b4
   4260c:	strdeq	r2, [r4], -r0
   42610:	strdeq	r2, [r4], -r0
   42614:	strdeq	r2, [r4], -r0
   42618:	strdeq	r2, [r4], -r0
   4261c:	strdeq	r2, [r4], -r0
   42620:	strdeq	r2, [r4], -r0
   42624:	strdeq	r2, [r4], -r0
   42628:	strdeq	r2, [r4], -r0
   4262c:	strdeq	r2, [r4], -r0
   42630:	strdeq	r2, [r4], -r0
   42634:	strdeq	r2, [r4], -r0
   42638:	strdeq	r2, [r4], -r0
   4263c:	strdeq	r2, [r4], -r0
   42640:	strdeq	r2, [r4], -r0
   42644:	strdeq	r2, [r4], -r0
   42648:	strdeq	r2, [r4], -r0
   4264c:	strdeq	r2, [r4], -r0
   42650:	strdeq	r2, [r4], -r0
   42654:	strdeq	r2, [r4], -r0
   42658:	strdeq	r2, [r4], -r0
   4265c:	strdeq	r2, [r4], -r0
   42660:	strdeq	r2, [r4], -r0
   42664:	strdeq	r2, [r4], -r0
   42668:	strdeq	r2, [r4], -r0
   4266c:	strdeq	r2, [r4], -r0
   42670:	strdeq	r2, [r4], -r0
   42674:	strdeq	r2, [r4], -r0
   42678:	strdeq	r2, [r4], -r0
   4267c:	strdeq	r2, [r4], -r0
   42680:	strdeq	r2, [r4], -r0
   42684:	strdeq	r2, [r4], -r0
   42688:	strdeq	r2, [r4], -r0
   4268c:	strdeq	r2, [r4], -r0
   42690:	strdeq	r2, [r4], -r0
   42694:	strdeq	r2, [r4], -r0
   42698:	strdeq	r2, [r4], -r0
   4269c:	strdeq	r2, [r4], -r0
   426a0:	strdeq	r2, [r4], -r0
   426a4:	strdeq	r2, [r4], -r0
   426a8:	strdeq	r2, [r4], -r0
   426ac:	strdeq	r2, [r4], -r0
   426b0:	strdeq	r2, [r4], -r0
   426b4:	strdeq	r2, [r4], -r0
   426b8:	strdeq	r2, [r4], -r0
   426bc:	strdeq	r2, [r4], -r0
   426c0:	andeq	r2, r4, r4, ror #13
   426c4:			; <UNDEFINED> instruction: 0x000425b4
   426c8:	ldr	r3, [sp, #36]	; 0x24
   426cc:	str	r3, [sp, #76]	; 0x4c
   426d0:	mov	r4, r7
   426d4:	mov	r5, #0
   426d8:	str	r5, [sp, #28]
   426dc:	mov	r1, #1
   426e0:	b	425c0 <__assert_fail@plt+0x2fffc>
   426e4:	mov	r3, #1
   426e8:	str	r3, [sp, #76]	; 0x4c
   426ec:	b	425c0 <__assert_fail@plt+0x2fffc>
   426f0:	sub	r2, r2, #48	; 0x30
   426f4:	cmp	r2, #9
   426f8:	bls	42914 <__assert_fail@plt+0x30350>
   426fc:	ldrb	sl, [r4]
   42700:	cmp	sl, #69	; 0x45
   42704:	beq	4296c <__assert_fail@plt+0x303a8>
   42708:	cmp	sl, #79	; 0x4f
   4270c:	movne	sl, #0
   42710:	beq	4296c <__assert_fail@plt+0x303a8>
   42714:	ldrb	r3, [r4]
   42718:	mov	r1, r3
   4271c:	cmp	r3, #122	; 0x7a
   42720:	ldrls	pc, [pc, r3, lsl #2]
   42724:	b	429b8 <__assert_fail@plt+0x303f4>
   42728:			; <UNDEFINED> instruction: 0x000429b4
   4272c:			; <UNDEFINED> instruction: 0x000429b8
   42730:			; <UNDEFINED> instruction: 0x000429b8
   42734:			; <UNDEFINED> instruction: 0x000429b8
   42738:			; <UNDEFINED> instruction: 0x000429b8
   4273c:			; <UNDEFINED> instruction: 0x000429b8
   42740:			; <UNDEFINED> instruction: 0x000429b8
   42744:			; <UNDEFINED> instruction: 0x000429b8
   42748:			; <UNDEFINED> instruction: 0x000429b8
   4274c:			; <UNDEFINED> instruction: 0x000429b8
   42750:			; <UNDEFINED> instruction: 0x000429b8
   42754:			; <UNDEFINED> instruction: 0x000429b8
   42758:			; <UNDEFINED> instruction: 0x000429b8
   4275c:			; <UNDEFINED> instruction: 0x000429b8
   42760:			; <UNDEFINED> instruction: 0x000429b8
   42764:			; <UNDEFINED> instruction: 0x000429b8
   42768:			; <UNDEFINED> instruction: 0x000429b8
   4276c:			; <UNDEFINED> instruction: 0x000429b8
   42770:			; <UNDEFINED> instruction: 0x000429b8
   42774:			; <UNDEFINED> instruction: 0x000429b8
   42778:			; <UNDEFINED> instruction: 0x000429b8
   4277c:			; <UNDEFINED> instruction: 0x000429b8
   42780:			; <UNDEFINED> instruction: 0x000429b8
   42784:			; <UNDEFINED> instruction: 0x000429b8
   42788:			; <UNDEFINED> instruction: 0x000429b8
   4278c:			; <UNDEFINED> instruction: 0x000429b8
   42790:			; <UNDEFINED> instruction: 0x000429b8
   42794:			; <UNDEFINED> instruction: 0x000429b8
   42798:			; <UNDEFINED> instruction: 0x000429b8
   4279c:			; <UNDEFINED> instruction: 0x000429b8
   427a0:			; <UNDEFINED> instruction: 0x000429b8
   427a4:			; <UNDEFINED> instruction: 0x000429b8
   427a8:			; <UNDEFINED> instruction: 0x000429b8
   427ac:			; <UNDEFINED> instruction: 0x000429b8
   427b0:			; <UNDEFINED> instruction: 0x000429b8
   427b4:			; <UNDEFINED> instruction: 0x000429b8
   427b8:			; <UNDEFINED> instruction: 0x000429b8
   427bc:	andeq	r2, r4, r8, lsr #19
   427c0:			; <UNDEFINED> instruction: 0x000429b8
   427c4:			; <UNDEFINED> instruction: 0x000429b8
   427c8:			; <UNDEFINED> instruction: 0x000429b8
   427cc:			; <UNDEFINED> instruction: 0x000429b8
   427d0:			; <UNDEFINED> instruction: 0x000429b8
   427d4:			; <UNDEFINED> instruction: 0x000429b8
   427d8:			; <UNDEFINED> instruction: 0x000429b8
   427dc:			; <UNDEFINED> instruction: 0x000429b8
   427e0:			; <UNDEFINED> instruction: 0x000429b8
   427e4:			; <UNDEFINED> instruction: 0x000429b8
   427e8:			; <UNDEFINED> instruction: 0x000429b8
   427ec:			; <UNDEFINED> instruction: 0x000429b8
   427f0:			; <UNDEFINED> instruction: 0x000429b8
   427f4:			; <UNDEFINED> instruction: 0x000429b8
   427f8:			; <UNDEFINED> instruction: 0x000429b8
   427fc:			; <UNDEFINED> instruction: 0x000429b8
   42800:			; <UNDEFINED> instruction: 0x000429b8
   42804:			; <UNDEFINED> instruction: 0x000429b8
   42808:			; <UNDEFINED> instruction: 0x000429b8
   4280c:			; <UNDEFINED> instruction: 0x000429b8
   42810:	andeq	r2, r4, r4, lsl #19
   42814:			; <UNDEFINED> instruction: 0x000429b8
   42818:			; <UNDEFINED> instruction: 0x000429b8
   4281c:			; <UNDEFINED> instruction: 0x000429b8
   42820:			; <UNDEFINED> instruction: 0x000429b8
   42824:			; <UNDEFINED> instruction: 0x000429b8
   42828:			; <UNDEFINED> instruction: 0x000429b8
   4282c:	andeq	r2, r4, r0, lsr #22
   42830:	andeq	r2, r4, r0, ror #22
   42834:	strdeq	r2, [r4], -ip
   42838:	muleq	r4, ip, sp
   4283c:			; <UNDEFINED> instruction: 0x000429b8
   42840:	andeq	r3, r4, r4, asr r0
   42844:	strdeq	r3, [r4], -r8
   42848:	andeq	r3, r4, r8, lsl #1
   4284c:	andeq	r3, r4, r4, lsr #1
   42850:			; <UNDEFINED> instruction: 0x000429b8
   42854:			; <UNDEFINED> instruction: 0x000429b8
   42858:			; <UNDEFINED> instruction: 0x000429b8
   4285c:	andeq	r3, r4, r4, lsl r1
   42860:	andeq	r3, r4, r4, ror #2
   42864:			; <UNDEFINED> instruction: 0x000429b8
   42868:	andeq	r3, r4, r0, lsl #7
   4286c:			; <UNDEFINED> instruction: 0x000429b8
   42870:	muleq	r4, r8, fp
   42874:	andeq	r3, r4, r4, lsl #8
   42878:	andeq	r2, r4, r4, ror r9
   4287c:			; <UNDEFINED> instruction: 0x000435bc
   42880:	strdeq	r3, [r4], -r8
   42884:	andeq	r3, r4, ip, asr #16
   42888:	andeq	r3, r4, r0, ror #9
   4288c:	andeq	r3, r4, r0, asr #17
   42890:	andeq	r3, r4, r8, asr r9
   42894:			; <UNDEFINED> instruction: 0x000429b8
   42898:			; <UNDEFINED> instruction: 0x000429b8
   4289c:			; <UNDEFINED> instruction: 0x000429b8
   428a0:			; <UNDEFINED> instruction: 0x000429b8
   428a4:			; <UNDEFINED> instruction: 0x000429b8
   428a8:			; <UNDEFINED> instruction: 0x000429b8
   428ac:	andeq	r2, r4, r8, ror #21
   428b0:	andeq	r2, r4, r0, asr #22
   428b4:	andeq	r2, r4, r4, lsl #23
   428b8:			; <UNDEFINED> instruction: 0x00042db4
   428bc:	ldrdeq	r2, [r4], -r0
   428c0:			; <UNDEFINED> instruction: 0x000429b8
   428c4:	strdeq	r3, [r4], -r8
   428c8:	andeq	r2, r4, r0, asr #22
   428cc:			; <UNDEFINED> instruction: 0x000429b8
   428d0:	andeq	r3, r4, r0, ror #1
   428d4:	strheq	r3, [r4], -ip
   428d8:	ldrdeq	r3, [r4], -r0
   428dc:	andeq	r3, r4, r0, lsr r1
   428e0:	strdeq	r3, [r4], -r0
   428e4:			; <UNDEFINED> instruction: 0x000429b8
   428e8:	andeq	r3, r4, r8, lsl #7
   428ec:	andeq	r3, r4, r8, asr #7
   428f0:			; <UNDEFINED> instruction: 0x00042cbc
   428f4:	andeq	r3, r4, r0, lsr #8
   428f8:	strdeq	r3, [r4], -r4
   428fc:	andeq	r3, r4, r4, lsl #11
   42900:			; <UNDEFINED> instruction: 0x000429b8
   42904:	andeq	r3, r4, r4, lsr #17
   42908:	andeq	r2, r4, r8, lsl #27
   4290c:	andeq	r3, r4, r0, lsl #18
   42910:	andeq	r3, r4, ip, ror #20
   42914:	mov	r9, #0
   42918:	mov	r1, #10
   4291c:	b	42930 <__assert_fail@plt+0x3036c>
   42920:	ldrb	r3, [r4, #1]!
   42924:	sub	r3, r3, #48	; 0x30
   42928:	cmp	r3, #9
   4292c:	bhi	426fc <__assert_fail@plt+0x30138>
   42930:	smull	r8, r9, r9, r1
   42934:	asr	r0, r8, #31
   42938:	mov	r2, r8
   4293c:	cmp	r0, r9
   42940:	mvnne	r9, #-2147483648	; 0x80000000
   42944:	bne	42920 <__assert_fail@plt+0x3035c>
   42948:	ldrb	r9, [r4]
   4294c:	sub	r9, r9, #48	; 0x30
   42950:	adds	r2, r2, r9
   42954:	movvs	r3, #1
   42958:	movvc	r3, #0
   4295c:	cmp	r3, #0
   42960:	moveq	r9, r2
   42964:	mvnne	r9, #-2147483648	; 0x80000000
   42968:	b	42920 <__assert_fail@plt+0x3035c>
   4296c:	add	r4, r4, #1
   42970:	b	42714 <__assert_fail@plt+0x30150>
   42974:	mvn	r7, #0
   42978:	movw	sl, #42640	; 0xa690
   4297c:	movt	sl, #4
   42980:	b	42ba4 <__assert_fail@plt+0x305e0>
   42984:	add	r2, r4, #1
   42988:	ldrb	r3, [r4, #1]
   4298c:	cmp	r3, #58	; 0x3a
   42990:	movne	lr, #1
   42994:	beq	43a4c <__assert_fail@plt+0x31488>
   42998:	cmp	r3, #122	; 0x7a
   4299c:	moveq	r4, r2
   429a0:	bne	429b8 <__assert_fail@plt+0x303f4>
   429a4:	b	43a70 <__assert_fail@plt+0x314ac>
   429a8:	sub	r3, r4, #1
   429ac:	cmp	r7, r3
   429b0:	beq	42a58 <__assert_fail@plt+0x30494>
   429b4:	sub	r4, r4, #1
   429b8:	sub	r5, r4, r7
   429bc:	add	r5, r5, #1
   429c0:	ldr	r2, [sp, #28]
   429c4:	mvn	r3, r9
   429c8:	lsr	r3, r3, #31
   429cc:	cmp	r2, #45	; 0x2d
   429d0:	moveq	r3, #0
   429d4:	cmp	r3, #0
   429d8:	moveq	r9, #0
   429dc:	mov	r8, r9
   429e0:	cmp	r9, r5
   429e4:	movcc	r9, r5
   429e8:	ldr	r3, [sp, #24]
   429ec:	sub	r3, r3, fp
   429f0:	cmp	r3, r9
   429f4:	bls	43ba8 <__assert_fail@plt+0x315e4>
   429f8:	cmp	r6, #0
   429fc:	beq	42a50 <__assert_fail@plt+0x3048c>
   42a00:	cmp	r8, r5
   42a04:	bls	42a30 <__assert_fail@plt+0x3046c>
   42a08:	sub	r8, r8, r5
   42a0c:	ldr	r3, [sp, #28]
   42a10:	cmp	r3, #43	; 0x2b
   42a14:	cmpne	r3, #48	; 0x30
   42a18:	mov	r2, r8
   42a1c:	moveq	r1, #48	; 0x30
   42a20:	movne	r1, #32
   42a24:	mov	r0, r6
   42a28:	bl	12348 <memset@plt>
   42a2c:	add	r6, r6, r8
   42a30:	ldr	r3, [sp, #76]	; 0x4c
   42a34:	cmp	r3, #0
   42a38:	beq	43bb8 <__assert_fail@plt+0x315f4>
   42a3c:	mov	r2, r5
   42a40:	mov	r1, r7
   42a44:	mov	r0, r6
   42a48:	bl	423dc <__assert_fail@plt+0x2fe18>
   42a4c:	add	r6, r6, r5
   42a50:	add	fp, fp, r9
   42a54:	b	42528 <__assert_fail@plt+0x2ff64>
   42a58:	ldr	r2, [sp, #28]
   42a5c:	mvn	r3, r9
   42a60:	lsr	r3, r3, #31
   42a64:	cmp	r2, #45	; 0x2d
   42a68:	moveq	r3, #0
   42a6c:	cmp	r3, #0
   42a70:	moveq	r9, #0
   42a74:	mov	r5, r9
   42a78:	cmp	r9, #1
   42a7c:	movcc	r9, #1
   42a80:	ldr	r3, [sp, #24]
   42a84:	sub	r3, r3, fp
   42a88:	cmp	r3, r9
   42a8c:	bls	42ad8 <__assert_fail@plt+0x30514>
   42a90:	cmp	r6, #0
   42a94:	beq	42ad0 <__assert_fail@plt+0x3050c>
   42a98:	cmp	r5, #1
   42a9c:	bls	42ac8 <__assert_fail@plt+0x30504>
   42aa0:	sub	r5, r5, #1
   42aa4:	ldr	r3, [sp, #28]
   42aa8:	cmp	r3, #43	; 0x2b
   42aac:	cmpne	r3, #48	; 0x30
   42ab0:	mov	r2, r5
   42ab4:	moveq	r1, #48	; 0x30
   42ab8:	movne	r1, #32
   42abc:	mov	r0, r6
   42ac0:	bl	12348 <memset@plt>
   42ac4:	add	r6, r6, r5
   42ac8:	ldrb	r3, [r4]
   42acc:	strb	r3, [r6], #1
   42ad0:	add	fp, fp, r9
   42ad4:	b	42528 <__assert_fail@plt+0x2ff64>
   42ad8:	mov	r3, #34	; 0x22
   42adc:	ldr	r2, [sp, #32]
   42ae0:	str	r3, [r2]
   42ae4:	b	42570 <__assert_fail@plt+0x2ffac>
   42ae8:	cmp	sl, #0
   42aec:	bne	429b8 <__assert_fail@plt+0x303f4>
   42af0:	ldr	r3, [sp, #76]	; 0x4c
   42af4:	cmp	r5, #0
   42af8:	movne	r3, r5
   42afc:	str	r3, [sp, #76]	; 0x4c
   42b00:	mov	r1, #97	; 0x61
   42b04:	mov	r3, #32
   42b08:	strb	r3, [sp, #88]	; 0x58
   42b0c:	mov	r3, #37	; 0x25
   42b10:	strb	r3, [sp, #89]	; 0x59
   42b14:	mov	r8, #0
   42b18:	add	r3, sp, #90	; 0x5a
   42b1c:	b	42e38 <__assert_fail@plt+0x30874>
   42b20:	cmp	sl, #0
   42b24:	bne	429b8 <__assert_fail@plt+0x303f4>
   42b28:	ldr	r3, [sp, #76]	; 0x4c
   42b2c:	cmp	r5, #0
   42b30:	movne	r3, r5
   42b34:	str	r3, [sp, #76]	; 0x4c
   42b38:	mov	r1, #65	; 0x41
   42b3c:	b	42b04 <__assert_fail@plt+0x30540>
   42b40:	ldr	r3, [sp, #76]	; 0x4c
   42b44:	cmp	r5, #0
   42b48:	movne	r3, r5
   42b4c:	str	r3, [sp, #76]	; 0x4c
   42b50:	cmp	sl, #69	; 0x45
   42b54:	movne	r8, #0
   42b58:	bne	433a8 <__assert_fail@plt+0x30de4>
   42b5c:	b	429b8 <__assert_fail@plt+0x303f4>
   42b60:	cmp	sl, #69	; 0x45
   42b64:	beq	429b8 <__assert_fail@plt+0x303f4>
   42b68:	ldr	r3, [sp, #76]	; 0x4c
   42b6c:	cmp	r5, #0
   42b70:	movne	r3, r5
   42b74:	str	r3, [sp, #76]	; 0x4c
   42b78:	mov	r1, #66	; 0x42
   42b7c:	mov	r8, #0
   42b80:	b	433a8 <__assert_fail@plt+0x30de4>
   42b84:	cmp	sl, #79	; 0x4f
   42b88:	beq	429b8 <__assert_fail@plt+0x303f4>
   42b8c:	mov	r1, #99	; 0x63
   42b90:	mov	r8, #0
   42b94:	b	433a8 <__assert_fail@plt+0x30de4>
   42b98:	mvn	r7, #0
   42b9c:	movw	sl, #42664	; 0xa6a8
   42ba0:	movt	sl, #4
   42ba4:	ldr	r3, [sp, #1188]	; 0x4a4
   42ba8:	str	r3, [sp, #20]
   42bac:	ldr	r3, [sp, #1184]	; 0x4a0
   42bb0:	str	r3, [sp, #16]
   42bb4:	ldr	r3, [sp, #1180]	; 0x49c
   42bb8:	str	r3, [sp, #12]
   42bbc:	str	r7, [sp, #8]
   42bc0:	ldr	r8, [sp, #28]
   42bc4:	str	r8, [sp, #4]
   42bc8:	ldr	r3, [sp, #76]	; 0x4c
   42bcc:	str	r3, [sp]
   42bd0:	ldr	r3, [sp, #40]	; 0x28
   42bd4:	mov	r2, sl
   42bd8:	mvn	r1, #0
   42bdc:	mov	r0, #0
   42be0:	bl	42434 <__assert_fail@plt+0x2fe70>
   42be4:	mov	r5, r0
   42be8:	mvn	r3, r9
   42bec:	lsr	r3, r3, #31
   42bf0:	cmp	r8, #45	; 0x2d
   42bf4:	moveq	r3, #0
   42bf8:	cmp	r3, #0
   42bfc:	moveq	r9, #0
   42c00:	mov	r3, r9
   42c04:	cmp	r9, r5
   42c08:	movcc	r9, r5
   42c0c:	ldr	r2, [sp, #24]
   42c10:	sub	r8, r2, fp
   42c14:	cmp	r8, r9
   42c18:	bls	42cac <__assert_fail@plt+0x306e8>
   42c1c:	cmp	r6, #0
   42c20:	beq	42ca4 <__assert_fail@plt+0x306e0>
   42c24:	cmp	r3, r5
   42c28:	bls	42c60 <__assert_fail@plt+0x3069c>
   42c2c:	sub	r3, r3, r5
   42c30:	str	r3, [sp, #80]	; 0x50
   42c34:	ldr	r2, [sp, #28]
   42c38:	cmp	r2, #43	; 0x2b
   42c3c:	cmpne	r2, #48	; 0x30
   42c40:	moveq	r2, r3
   42c44:	moveq	r1, #48	; 0x30
   42c48:	ldrne	r2, [sp, #80]	; 0x50
   42c4c:	movne	r1, #32
   42c50:	mov	r0, r6
   42c54:	bl	12348 <memset@plt>
   42c58:	ldr	r3, [sp, #80]	; 0x50
   42c5c:	add	r6, r6, r3
   42c60:	ldr	r3, [sp, #1188]	; 0x4a4
   42c64:	str	r3, [sp, #20]
   42c68:	ldr	r3, [sp, #1184]	; 0x4a0
   42c6c:	str	r3, [sp, #16]
   42c70:	ldr	r3, [sp, #1180]	; 0x49c
   42c74:	str	r3, [sp, #12]
   42c78:	str	r7, [sp, #8]
   42c7c:	ldr	r3, [sp, #28]
   42c80:	str	r3, [sp, #4]
   42c84:	ldr	r3, [sp, #76]	; 0x4c
   42c88:	str	r3, [sp]
   42c8c:	ldr	r3, [sp, #40]	; 0x28
   42c90:	mov	r2, sl
   42c94:	mov	r1, r8
   42c98:	mov	r0, r6
   42c9c:	bl	42434 <__assert_fail@plt+0x2fe70>
   42ca0:	add	r6, r6, r5
   42ca4:	add	fp, fp, r9
   42ca8:	b	42528 <__assert_fail@plt+0x2ff64>
   42cac:	mov	r3, #34	; 0x22
   42cb0:	ldr	r2, [sp, #32]
   42cb4:	str	r3, [r2]
   42cb8:	b	42570 <__assert_fail@plt+0x2ffac>
   42cbc:	mov	r8, #0
   42cc0:	b	433a8 <__assert_fail@plt+0x30de4>
   42cc4:	mov	r3, #34	; 0x22
   42cc8:	ldr	r2, [sp, #32]
   42ccc:	str	r3, [r2]
   42cd0:	b	42570 <__assert_fail@plt+0x2ffac>
   42cd4:	mov	r2, r5
   42cd8:	add	r1, sp, #105	; 0x69
   42cdc:	mov	r0, r6
   42ce0:	bl	42384 <__assert_fail@plt+0x2fdc0>
   42ce4:	b	42ef8 <__assert_fail@plt+0x30934>
   42ce8:	mov	r2, r5
   42cec:	add	r1, sp, #105	; 0x69
   42cf0:	mov	r0, r6
   42cf4:	bl	12000 <memcpy@plt>
   42cf8:	b	42ef8 <__assert_fail@plt+0x30934>
   42cfc:	cmp	sl, #69	; 0x45
   42d00:	beq	43c00 <__assert_fail@plt+0x3163c>
   42d04:	ldr	r3, [sp, #40]	; 0x28
   42d08:	ldr	r2, [r3, #20]
   42d0c:	movw	r8, #63636	; 0xf894
   42d10:	movt	r8, #65535	; 0xffff
   42d14:	cmp	r2, r8
   42d18:	movge	r8, #0
   42d1c:	movlt	r8, #1
   42d20:	add	r3, r2, #1888	; 0x760
   42d24:	add	r3, r3, #12
   42d28:	movw	r0, #1899	; 0x76b
   42d2c:	cmp	r3, r0
   42d30:	mvnls	r3, #98	; 0x62
   42d34:	movhi	r3, #0
   42d38:	add	r3, r3, r2
   42d3c:	ldr	r2, [sp, #56]	; 0x38
   42d40:	smull	r0, r2, r2, r3
   42d44:	asr	r3, r3, #31
   42d48:	rsb	r3, r3, r2, asr #5
   42d4c:	add	r3, r3, #19
   42d50:	mov	r2, #2
   42d54:	str	r2, [sp, #80]	; 0x50
   42d58:	ldr	r0, [sp, #28]
   42d5c:	mov	r2, r0
   42d60:	ldr	ip, [sp, #1172]	; 0x494
   42d64:	cmp	r0, #0
   42d68:	moveq	r2, ip
   42d6c:	str	r2, [sp, #28]
   42d70:	cmp	r2, #43	; 0x2b
   42d74:	movne	r2, #0
   42d78:	beq	42f04 <__assert_fail@plt+0x30940>
   42d7c:	str	r2, [sp, #84]	; 0x54
   42d80:	mov	r0, #0
   42d84:	b	42e04 <__assert_fail@plt+0x30840>
   42d88:	cmp	sl, #79	; 0x4f
   42d8c:	beq	429b8 <__assert_fail@plt+0x303f4>
   42d90:	mov	r1, #120	; 0x78
   42d94:	mov	r8, #0
   42d98:	b	433a8 <__assert_fail@plt+0x30de4>
   42d9c:	cmp	sl, #0
   42da0:	bne	429b8 <__assert_fail@plt+0x303f4>
   42da4:	mvn	r7, #0
   42da8:	movw	sl, #42672	; 0xa6b0
   42dac:	movt	sl, #4
   42db0:	b	42ba4 <__assert_fail@plt+0x305e0>
   42db4:	cmp	sl, #69	; 0x45
   42db8:	beq	429b8 <__assert_fail@plt+0x303f4>
   42dbc:	ldr	r3, [sp, #40]	; 0x28
   42dc0:	ldr	r3, [r3, #12]
   42dc4:	mov	r2, #2
   42dc8:	str	r2, [sp, #80]	; 0x50
   42dcc:	b	42df8 <__assert_fail@plt+0x30834>
   42dd0:	cmp	sl, #69	; 0x45
   42dd4:	beq	429b8 <__assert_fail@plt+0x303f4>
   42dd8:	ldr	r3, [sp, #40]	; 0x28
   42ddc:	ldr	r3, [r3, #12]
   42de0:	ldr	r2, [sp, #28]
   42de4:	cmp	r2, #0
   42de8:	mov	r2, #2
   42dec:	str	r2, [sp, #80]	; 0x50
   42df0:	moveq	r2, #95	; 0x5f
   42df4:	streq	r2, [sp, #28]
   42df8:	lsr	r8, r3, #31
   42dfc:	mov	r0, #0
   42e00:	str	r0, [sp, #84]	; 0x54
   42e04:	eor	r2, r8, #1
   42e08:	cmp	sl, #79	; 0x4f
   42e0c:	movne	r2, #0
   42e10:	andeq	r2, r2, #1
   42e14:	cmp	r2, #0
   42e18:	beq	42f2c <__assert_fail@plt+0x30968>
   42e1c:	mov	r3, #32
   42e20:	strb	r3, [sp, #88]	; 0x58
   42e24:	mov	r3, #37	; 0x25
   42e28:	strb	r3, [sp, #89]	; 0x59
   42e2c:	mov	r8, #0
   42e30:	strb	sl, [sp, #90]	; 0x5a
   42e34:	add	r3, sp, #91	; 0x5b
   42e38:	strb	r1, [r3]
   42e3c:	mov	r2, #0
   42e40:	strb	r2, [r3, #1]
   42e44:	ldr	r3, [sp, #40]	; 0x28
   42e48:	add	r2, sp, #88	; 0x58
   42e4c:	mov	r1, #1024	; 0x400
   42e50:	add	r0, sp, #104	; 0x68
   42e54:	bl	12234 <strftime@plt>
   42e58:	cmp	r0, #0
   42e5c:	beq	42528 <__assert_fail@plt+0x2ff64>
   42e60:	sub	r5, r0, #1
   42e64:	ldr	r2, [sp, #28]
   42e68:	mvn	r3, r9
   42e6c:	lsr	r3, r3, #31
   42e70:	cmp	r2, #45	; 0x2d
   42e74:	moveq	r3, #0
   42e78:	cmp	r3, #0
   42e7c:	moveq	r9, #0
   42e80:	mov	r7, r9
   42e84:	cmp	r9, r5
   42e88:	movcc	r9, r5
   42e8c:	ldr	r3, [sp, #24]
   42e90:	sub	r3, r3, fp
   42e94:	cmp	r3, r9
   42e98:	bls	42cc4 <__assert_fail@plt+0x30700>
   42e9c:	cmp	r6, #0
   42ea0:	beq	42efc <__assert_fail@plt+0x30938>
   42ea4:	cmp	r7, r5
   42ea8:	bls	42ed4 <__assert_fail@plt+0x30910>
   42eac:	sub	r7, r7, r5
   42eb0:	ldr	r3, [sp, #28]
   42eb4:	cmp	r3, #43	; 0x2b
   42eb8:	cmpne	r3, #48	; 0x30
   42ebc:	mov	r2, r7
   42ec0:	moveq	r1, #48	; 0x30
   42ec4:	movne	r1, #32
   42ec8:	mov	r0, r6
   42ecc:	bl	12348 <memset@plt>
   42ed0:	add	r6, r6, r7
   42ed4:	cmp	r8, #0
   42ed8:	bne	42cd4 <__assert_fail@plt+0x30710>
   42edc:	ldr	r3, [sp, #76]	; 0x4c
   42ee0:	cmp	r3, #0
   42ee4:	beq	42ce8 <__assert_fail@plt+0x30724>
   42ee8:	mov	r2, r5
   42eec:	add	r1, sp, #105	; 0x69
   42ef0:	mov	r0, r6
   42ef4:	bl	423dc <__assert_fail@plt+0x2fe18>
   42ef8:	add	r6, r6, r5
   42efc:	add	fp, fp, r9
   42f00:	b	42528 <__assert_fail@plt+0x2ff64>
   42f04:	ldr	r0, [sp, #80]	; 0x50
   42f08:	cmp	r0, #2
   42f0c:	movw	r2, #9999	; 0x270f
   42f10:	moveq	r2, #99	; 0x63
   42f14:	cmp	r3, r2
   42f18:	movls	r2, #0
   42f1c:	movhi	r2, #1
   42f20:	cmp	r0, r9
   42f24:	orrlt	r2, r2, #1
   42f28:	b	42d7c <__assert_fail@plt+0x307b8>
   42f2c:	cmp	r8, #0
   42f30:	rsbne	r3, r3, #0
   42f34:	add	r5, sp, #102	; 0x66
   42f38:	mov	r7, #58	; 0x3a
   42f3c:	movw	lr, #52429	; 0xcccd
   42f40:	movt	lr, #52428	; 0xcccc
   42f44:	b	42f4c <__assert_fail@plt+0x30988>
   42f48:	mov	r3, r1
   42f4c:	tst	r0, #1
   42f50:	subne	ip, r5, #1
   42f54:	strbne	r7, [r5, #-1]
   42f58:	moveq	ip, r5
   42f5c:	sub	r5, ip, #1
   42f60:	umull	r2, r1, lr, r3
   42f64:	lsr	r1, r1, #3
   42f68:	add	r2, r1, r1, lsl #2
   42f6c:	sub	r2, r3, r2, lsl #1
   42f70:	add	r2, r2, #48	; 0x30
   42f74:	strb	r2, [ip, #-1]
   42f78:	asrs	r0, r0, #1
   42f7c:	movne	r2, #1
   42f80:	moveq	r2, #0
   42f84:	cmp	r3, #9
   42f88:	movls	r3, r2
   42f8c:	orrhi	r3, r2, #1
   42f90:	cmp	r3, #0
   42f94:	bne	42f48 <__assert_fail@plt+0x30984>
   42f98:	ldr	r3, [sp, #28]
   42f9c:	cmp	r3, #0
   42fa0:	moveq	r3, #48	; 0x30
   42fa4:	str	r3, [sp, #28]
   42fa8:	ldr	r3, [sp, #80]	; 0x50
   42fac:	cmp	r9, #0
   42fb0:	movlt	r9, r3
   42fb4:	cmp	r8, #0
   42fb8:	bne	43c18 <__assert_fail@plt+0x31654>
   42fbc:	ldr	r3, [sp, #84]	; 0x54
   42fc0:	cmp	r3, #0
   42fc4:	bne	43d14 <__assert_fail@plt+0x31750>
   42fc8:	add	r7, sp, #102	; 0x66
   42fcc:	sub	r7, r7, r5
   42fd0:	ldr	r3, [sp, #28]
   42fd4:	subs	r3, r3, #45	; 0x2d
   42fd8:	movne	r3, #1
   42fdc:	sub	r8, r9, r7
   42fe0:	cmp	r8, #0
   42fe4:	movle	r8, #0
   42fe8:	andgt	r8, r3, #1
   42fec:	cmp	r8, #0
   42ff0:	moveq	r8, r3
   42ff4:	b	43c84 <__assert_fail@plt+0x316c0>
   42ff8:	cmp	r6, #0
   42ffc:	beq	43014 <__assert_fail@plt+0x30a50>
   43000:	mov	r2, sl
   43004:	mov	r1, #32
   43008:	mov	r0, r6
   4300c:	bl	12348 <memset@plt>
   43010:	add	r6, r6, sl
   43014:	add	fp, fp, sl
   43018:	sub	r9, r9, sl
   4301c:	b	43c60 <__assert_fail@plt+0x3169c>
   43020:	mov	r3, #34	; 0x22
   43024:	ldr	r2, [sp, #32]
   43028:	str	r3, [r2]
   4302c:	b	42570 <__assert_fail@plt+0x2ffac>
   43030:	mov	r3, #34	; 0x22
   43034:	ldr	r2, [sp, #32]
   43038:	str	r3, [r2]
   4303c:	b	42570 <__assert_fail@plt+0x2ffac>
   43040:	mov	r2, r7
   43044:	mov	r1, r5
   43048:	mov	r0, r6
   4304c:	bl	12000 <memcpy@plt>
   43050:	b	43d08 <__assert_fail@plt+0x31744>
   43054:	cmp	sl, #0
   43058:	bne	429b8 <__assert_fail@plt+0x303f4>
   4305c:	ldr	r3, [sp, #28]
   43060:	cmp	r3, #0
   43064:	lsreq	r3, r9, #31
   43068:	movne	r3, #0
   4306c:	cmp	r3, #0
   43070:	bne	43d5c <__assert_fail@plt+0x31798>
   43074:	sub	r7, r9, #6
   43078:	bic	r7, r7, r7, asr #31
   4307c:	movw	sl, #42652	; 0xa69c
   43080:	movt	sl, #4
   43084:	b	42ba4 <__assert_fail@plt+0x305e0>
   43088:	cmp	sl, #69	; 0x45
   4308c:	beq	429b8 <__assert_fail@plt+0x303f4>
   43090:	ldr	r3, [sp, #40]	; 0x28
   43094:	ldr	r3, [r3, #8]
   43098:	mov	r2, #2
   4309c:	str	r2, [sp, #80]	; 0x50
   430a0:	b	42df8 <__assert_fail@plt+0x30834>
   430a4:	cmp	sl, #69	; 0x45
   430a8:	beq	429b8 <__assert_fail@plt+0x303f4>
   430ac:	ldr	r3, [sp, #64]	; 0x40
   430b0:	mov	r2, #2
   430b4:	str	r2, [sp, #80]	; 0x50
   430b8:	b	42df8 <__assert_fail@plt+0x30834>
   430bc:	cmp	sl, #69	; 0x45
   430c0:	beq	429b8 <__assert_fail@plt+0x303f4>
   430c4:	ldr	r3, [sp, #40]	; 0x28
   430c8:	ldr	r3, [r3, #8]
   430cc:	b	42de0 <__assert_fail@plt+0x3081c>
   430d0:	cmp	sl, #69	; 0x45
   430d4:	beq	429b8 <__assert_fail@plt+0x303f4>
   430d8:	ldr	r3, [sp, #64]	; 0x40
   430dc:	b	42de0 <__assert_fail@plt+0x3081c>
   430e0:	cmp	sl, #69	; 0x45
   430e4:	beq	429b8 <__assert_fail@plt+0x303f4>
   430e8:	ldr	r3, [sp, #40]	; 0x28
   430ec:	ldr	r3, [r3, #28]
   430f0:	cmn	r3, #1
   430f4:	movge	r8, #0
   430f8:	movlt	r8, #1
   430fc:	add	r3, r3, #1
   43100:	mov	r0, #0
   43104:	str	r0, [sp, #84]	; 0x54
   43108:	mov	r2, #3
   4310c:	str	r2, [sp, #80]	; 0x50
   43110:	b	42e04 <__assert_fail@plt+0x30840>
   43114:	cmp	sl, #69	; 0x45
   43118:	beq	429b8 <__assert_fail@plt+0x303f4>
   4311c:	ldr	r3, [sp, #40]	; 0x28
   43120:	ldr	r3, [r3, #4]
   43124:	mov	r2, #2
   43128:	str	r2, [sp, #80]	; 0x50
   4312c:	b	42df8 <__assert_fail@plt+0x30834>
   43130:	cmp	sl, #69	; 0x45
   43134:	beq	429b8 <__assert_fail@plt+0x303f4>
   43138:	ldr	r3, [sp, #40]	; 0x28
   4313c:	ldr	r3, [r3, #16]
   43140:	cmn	r3, #1
   43144:	movge	r8, #0
   43148:	movlt	r8, #1
   4314c:	add	r3, r3, #1
   43150:	mov	r0, #0
   43154:	str	r0, [sp, #84]	; 0x54
   43158:	mov	r2, #2
   4315c:	str	r2, [sp, #80]	; 0x50
   43160:	b	42e04 <__assert_fail@plt+0x30840>
   43164:	cmp	sl, #69	; 0x45
   43168:	beq	429b8 <__assert_fail@plt+0x303f4>
   4316c:	cmp	r9, #0
   43170:	movle	r9, #9
   43174:	ldr	r3, [sp, #1188]	; 0x4a4
   43178:	mov	r5, #9
   4317c:	ldr	r0, [sp, #60]	; 0x3c
   43180:	b	43194 <__assert_fail@plt+0x30bd0>
   43184:	sub	r5, r5, #1
   43188:	smull	r1, r2, r0, r3
   4318c:	asr	r3, r3, #31
   43190:	rsb	r3, r3, r2, asr #2
   43194:	cmp	r5, r9
   43198:	bgt	43184 <__assert_fail@plt+0x30bc0>
   4319c:	cmp	r5, #1
   431a0:	ble	431c0 <__assert_fail@plt+0x30bfc>
   431a4:	smull	r1, r2, r0, r3
   431a8:	asr	r1, r3, #31
   431ac:	rsb	r2, r1, r2, asr #2
   431b0:	add	r2, r2, r2, lsl #2
   431b4:	cmp	r3, r2, lsl #1
   431b8:	beq	43184 <__assert_fail@plt+0x30bc0>
   431bc:	b	431c8 <__assert_fail@plt+0x30c04>
   431c0:	cmp	r5, #1
   431c4:	bne	43214 <__assert_fail@plt+0x30c50>
   431c8:	add	r2, sp, #1120	; 0x460
   431cc:	add	r2, r2, #8
   431d0:	add	r1, r2, r5
   431d4:	sub	r1, r1, #1040	; 0x410
   431d8:	sub	r1, r1, #1
   431dc:	rsb	r0, r2, #1040	; 0x410
   431e0:	add	r0, r0, #1
   431e4:	ldr	ip, [sp, #60]	; 0x3c
   431e8:	smull	r2, lr, ip, r3
   431ec:	asr	r2, r3, #31
   431f0:	rsb	r2, r2, lr, asr #2
   431f4:	add	lr, r2, r2, lsl #2
   431f8:	sub	r3, r3, lr, lsl #1
   431fc:	add	r3, r3, #48	; 0x30
   43200:	strb	r3, [r1], #-1
   43204:	mov	r3, r2
   43208:	add	r2, r0, r1
   4320c:	cmp	r2, #0
   43210:	bgt	431e8 <__assert_fail@plt+0x30c24>
   43214:	ldr	r3, [sp, #28]
   43218:	cmp	r3, #0
   4321c:	moveq	r3, #48	; 0x30
   43220:	str	r3, [sp, #28]
   43224:	mov	r7, r5
   43228:	ldr	r3, [sp, #24]
   4322c:	sub	r3, r3, fp
   43230:	cmp	r3, r5
   43234:	bls	432bc <__assert_fail@plt+0x30cf8>
   43238:	cmp	r6, #0
   4323c:	beq	43260 <__assert_fail@plt+0x30c9c>
   43240:	ldr	r3, [sp, #76]	; 0x4c
   43244:	cmp	r3, #0
   43248:	beq	432cc <__assert_fail@plt+0x30d08>
   4324c:	mov	r2, r5
   43250:	add	r1, sp, #88	; 0x58
   43254:	mov	r0, r6
   43258:	bl	423dc <__assert_fail@plt+0x2fe18>
   4325c:	add	r6, r6, r7
   43260:	add	fp, r7, fp
   43264:	ldr	r3, [sp, #28]
   43268:	cmp	r3, #45	; 0x2d
   4326c:	beq	43dc0 <__assert_fail@plt+0x317fc>
   43270:	sub	r5, r9, r5
   43274:	ldr	r3, [sp, #24]
   43278:	sub	r3, r3, fp
   4327c:	cmp	r3, r5
   43280:	bls	432e0 <__assert_fail@plt+0x30d1c>
   43284:	cmp	r5, #0
   43288:	cmpne	r6, #0
   4328c:	beq	432b4 <__assert_fail@plt+0x30cf0>
   43290:	ldr	r3, [sp, #28]
   43294:	cmp	r3, #43	; 0x2b
   43298:	cmpne	r3, #48	; 0x30
   4329c:	mov	r2, r5
   432a0:	moveq	r1, #48	; 0x30
   432a4:	movne	r1, #32
   432a8:	mov	r0, r6
   432ac:	bl	12348 <memset@plt>
   432b0:	add	r6, r6, r5
   432b4:	add	fp, fp, r5
   432b8:	b	42528 <__assert_fail@plt+0x2ff64>
   432bc:	mov	r3, #34	; 0x22
   432c0:	ldr	r2, [sp, #32]
   432c4:	str	r3, [r2]
   432c8:	b	42570 <__assert_fail@plt+0x2ffac>
   432cc:	mov	r2, r5
   432d0:	add	r1, sp, #88	; 0x58
   432d4:	mov	r0, r6
   432d8:	bl	12000 <memcpy@plt>
   432dc:	b	4325c <__assert_fail@plt+0x30c98>
   432e0:	mov	r3, #34	; 0x22
   432e4:	ldr	r2, [sp, #32]
   432e8:	str	r3, [r2]
   432ec:	b	42570 <__assert_fail@plt+0x2ffac>
   432f0:	ldr	r2, [sp, #28]
   432f4:	mvn	r3, r9
   432f8:	lsr	r3, r3, #31
   432fc:	cmp	r2, #45	; 0x2d
   43300:	moveq	r3, #0
   43304:	cmp	r3, #0
   43308:	moveq	r9, #0
   4330c:	mov	r5, r9
   43310:	cmp	r9, #1
   43314:	movcc	r9, #1
   43318:	ldr	r3, [sp, #24]
   4331c:	sub	r3, r3, fp
   43320:	cmp	r3, r9
   43324:	bls	43370 <__assert_fail@plt+0x30dac>
   43328:	cmp	r6, #0
   4332c:	beq	43368 <__assert_fail@plt+0x30da4>
   43330:	cmp	r5, #1
   43334:	bls	43360 <__assert_fail@plt+0x30d9c>
   43338:	sub	r5, r5, #1
   4333c:	ldr	r3, [sp, #28]
   43340:	cmp	r3, #43	; 0x2b
   43344:	cmpne	r3, #48	; 0x30
   43348:	mov	r2, r5
   4334c:	moveq	r1, #48	; 0x30
   43350:	movne	r1, #32
   43354:	mov	r0, r6
   43358:	bl	12348 <memset@plt>
   4335c:	add	r6, r6, r5
   43360:	mov	r3, #10
   43364:	strb	r3, [r6], #1
   43368:	add	fp, fp, r9
   4336c:	b	42528 <__assert_fail@plt+0x2ff64>
   43370:	mov	r3, #34	; 0x22
   43374:	ldr	r2, [sp, #32]
   43378:	str	r3, [r2]
   4337c:	b	42570 <__assert_fail@plt+0x2ffac>
   43380:	mov	r8, #1
   43384:	b	4338c <__assert_fail@plt+0x30dc8>
   43388:	mov	r8, #0
   4338c:	cmp	r5, #0
   43390:	movne	r8, r5
   43394:	mov	r1, #112	; 0x70
   43398:	cmp	r5, #0
   4339c:	ldr	r3, [sp, #76]	; 0x4c
   433a0:	movne	r3, #0
   433a4:	str	r3, [sp, #76]	; 0x4c
   433a8:	mov	r3, #32
   433ac:	strb	r3, [sp, #88]	; 0x58
   433b0:	mov	r3, #37	; 0x25
   433b4:	strb	r3, [sp, #89]	; 0x59
   433b8:	cmp	sl, #0
   433bc:	addeq	r3, sp, #90	; 0x5a
   433c0:	beq	42e38 <__assert_fail@plt+0x30874>
   433c4:	b	42e30 <__assert_fail@plt+0x3086c>
   433c8:	ldr	r3, [sp, #40]	; 0x28
   433cc:	ldr	r2, [r3, #16]
   433d0:	cmp	sl, #79	; 0x4f
   433d4:	moveq	r1, #113	; 0x71
   433d8:	beq	42e1c <__assert_fail@plt+0x30858>
   433dc:	mov	r3, #11
   433e0:	mul	r3, r3, r2
   433e4:	asr	r3, r3, #5
   433e8:	add	r3, r3, #1
   433ec:	mov	r0, #0
   433f0:	str	r0, [sp, #84]	; 0x54
   433f4:	mov	r8, r0
   433f8:	mov	r2, #1
   433fc:	str	r2, [sp, #80]	; 0x50
   43400:	b	42f34 <__assert_fail@plt+0x30970>
   43404:	cmp	sl, #69	; 0x45
   43408:	beq	429b8 <__assert_fail@plt+0x303f4>
   4340c:	ldr	r3, [sp, #40]	; 0x28
   43410:	ldr	r3, [r3]
   43414:	mov	r2, #2
   43418:	str	r2, [sp, #80]	; 0x50
   4341c:	b	42df8 <__assert_fail@plt+0x30834>
   43420:	ldr	r1, [sp, #40]	; 0x28
   43424:	ldrd	r2, [r1]
   43428:	strd	r2, [sp, #104]	; 0x68
   4342c:	ldrd	r2, [r1, #8]
   43430:	strd	r2, [sp, #112]	; 0x70
   43434:	ldrd	r2, [r1, #16]
   43438:	strd	r2, [sp, #120]	; 0x78
   4343c:	ldrd	r2, [r1, #24]
   43440:	strd	r2, [sp, #128]	; 0x80
   43444:	ldrd	r2, [r1, #32]
   43448:	strd	r2, [sp, #136]	; 0x88
   4344c:	ldr	r3, [r1, #40]	; 0x28
   43450:	str	r3, [sp, #144]	; 0x90
   43454:	mvn	r3, #0
   43458:	str	r3, [sp, #132]	; 0x84
   4345c:	add	r1, sp, #104	; 0x68
   43460:	ldr	r0, [sp, #1184]	; 0x4a0
   43464:	bl	41530 <__assert_fail@plt+0x2ef6c>
   43468:	ldr	r3, [sp, #132]	; 0x84
   4346c:	cmp	r3, #0
   43470:	blt	434d0 <__assert_fail@plt+0x30f0c>
   43474:	lsr	r8, r0, #31
   43478:	mov	r2, r0
   4347c:	add	r5, sp, #102	; 0x66
   43480:	ldr	r1, [sp, #60]	; 0x3c
   43484:	smull	r3, ip, r1, r2
   43488:	asr	ip, ip, #2
   4348c:	asr	lr, r2, #31
   43490:	sub	r3, ip, lr
   43494:	add	r3, r3, r3, lsl #2
   43498:	sub	r3, r2, r3, lsl #1
   4349c:	sub	r2, ip, lr
   434a0:	cmp	r0, #0
   434a4:	rsblt	r3, r3, #48	; 0x30
   434a8:	addge	r3, r3, #48	; 0x30
   434ac:	uxtb	r3, r3
   434b0:	strb	r3, [r5, #-1]!
   434b4:	cmp	r2, #0
   434b8:	bne	43484 <__assert_fail@plt+0x30ec0>
   434bc:	mov	r3, #0
   434c0:	str	r3, [sp, #84]	; 0x54
   434c4:	mov	r3, #1
   434c8:	str	r3, [sp, #80]	; 0x50
   434cc:	b	42f98 <__assert_fail@plt+0x309d4>
   434d0:	mov	r3, #75	; 0x4b
   434d4:	ldr	r2, [sp, #32]
   434d8:	str	r3, [r2]
   434dc:	b	42570 <__assert_fail@plt+0x2ffac>
   434e0:	cmp	sl, #79	; 0x4f
   434e4:	beq	429b8 <__assert_fail@plt+0x303f4>
   434e8:	mov	r1, #88	; 0x58
   434ec:	mov	r8, #0
   434f0:	b	433a8 <__assert_fail@plt+0x30de4>
   434f4:	ldr	r2, [sp, #28]
   434f8:	mvn	r3, r9
   434fc:	lsr	r3, r3, #31
   43500:	cmp	r2, #45	; 0x2d
   43504:	moveq	r3, #0
   43508:	cmp	r3, #0
   4350c:	moveq	r9, #0
   43510:	mov	r5, r9
   43514:	cmp	r9, #1
   43518:	movcc	r9, #1
   4351c:	ldr	r3, [sp, #24]
   43520:	sub	r3, r3, fp
   43524:	cmp	r3, r9
   43528:	bls	43574 <__assert_fail@plt+0x30fb0>
   4352c:	cmp	r6, #0
   43530:	beq	4356c <__assert_fail@plt+0x30fa8>
   43534:	cmp	r5, #1
   43538:	bls	43564 <__assert_fail@plt+0x30fa0>
   4353c:	sub	r5, r5, #1
   43540:	ldr	r3, [sp, #28]
   43544:	cmp	r3, #43	; 0x2b
   43548:	cmpne	r3, #48	; 0x30
   4354c:	mov	r2, r5
   43550:	moveq	r1, #48	; 0x30
   43554:	movne	r1, #32
   43558:	mov	r0, r6
   4355c:	bl	12348 <memset@plt>
   43560:	add	r6, r6, r5
   43564:	mov	r3, #9
   43568:	strb	r3, [r6], #1
   4356c:	add	fp, fp, r9
   43570:	b	42528 <__assert_fail@plt+0x2ff64>
   43574:	mov	r3, #34	; 0x22
   43578:	ldr	r2, [sp, #32]
   4357c:	str	r3, [r2]
   43580:	b	42570 <__assert_fail@plt+0x2ffac>
   43584:	ldr	r3, [sp, #40]	; 0x28
   43588:	ldr	r3, [r3, #24]
   4358c:	add	r3, r3, #6
   43590:	ldr	r2, [sp, #52]	; 0x34
   43594:	smull	r0, r2, r2, r3
   43598:	add	r0, r2, r3
   4359c:	asr	r2, r3, #31
   435a0:	rsb	r2, r2, r0, asr #2
   435a4:	rsb	r2, r2, r2, lsl #3
   435a8:	sub	r3, r3, r2
   435ac:	add	r3, r3, #1
   435b0:	mov	r2, #1
   435b4:	str	r2, [sp, #80]	; 0x50
   435b8:	b	42df8 <__assert_fail@plt+0x30834>
   435bc:	cmp	sl, #69	; 0x45
   435c0:	beq	429b8 <__assert_fail@plt+0x303f4>
   435c4:	ldr	r2, [sp, #40]	; 0x28
   435c8:	ldr	r3, [r2, #28]
   435cc:	ldr	r2, [r2, #24]
   435d0:	sub	r3, r3, r2
   435d4:	add	r3, r3, #7
   435d8:	ldr	r2, [sp, #52]	; 0x34
   435dc:	smull	r0, r2, r2, r3
   435e0:	add	r2, r2, r3
   435e4:	asr	r3, r3, #31
   435e8:	rsb	r3, r3, r2, asr #2
   435ec:	mov	r2, #2
   435f0:	str	r2, [sp, #80]	; 0x50
   435f4:	b	42df8 <__assert_fail@plt+0x30834>
   435f8:	cmp	sl, #69	; 0x45
   435fc:	beq	429b8 <__assert_fail@plt+0x303f4>
   43600:	ldr	r2, [sp, #40]	; 0x28
   43604:	ldr	r5, [r2, #20]
   43608:	cmp	r5, #0
   4360c:	movlt	r0, #300	; 0x12c
   43610:	mvnge	r0, #99	; 0x63
   43614:	add	r0, r5, r0
   43618:	ldr	r7, [r2, #28]
   4361c:	ldr	r2, [r2, #24]
   43620:	str	r2, [sp, #80]	; 0x50
   43624:	sub	r2, r7, r2
   43628:	add	r2, r2, #380	; 0x17c
   4362c:	add	r2, r2, #2
   43630:	ldr	ip, [sp, #52]	; 0x34
   43634:	smull	ip, lr, ip, r2
   43638:	add	lr, lr, r2
   4363c:	asr	ip, r2, #31
   43640:	rsb	ip, ip, lr, asr #2
   43644:	rsb	ip, ip, ip, lsl #3
   43648:	sub	ip, r2, ip
   4364c:	sub	r8, r7, ip
   43650:	adds	r8, r8, #3
   43654:	bmi	43740 <__assert_fail@plt+0x3117c>
   43658:	tst	r0, #3
   4365c:	movne	r2, #0
   43660:	bne	4369c <__assert_fail@plt+0x310d8>
   43664:	ldr	r2, [sp, #56]	; 0x38
   43668:	smull	ip, r2, r2, r0
   4366c:	asr	ip, r0, #31
   43670:	rsb	r2, ip, r2, asr #5
   43674:	mov	ip, #100	; 0x64
   43678:	mls	r2, ip, r2, r0
   4367c:	cmp	r2, #0
   43680:	movne	r2, #1
   43684:	bne	4369c <__assert_fail@plt+0x310d8>
   43688:	mov	ip, #400	; 0x190
   4368c:	sdiv	r2, r0, ip
   43690:	mls	r2, ip, r2, r0
   43694:	clz	r2, r2
   43698:	lsr	r2, r2, #5
   4369c:	add	r2, r2, #364	; 0x16c
   436a0:	add	r2, r2, #1
   436a4:	sub	r2, r7, r2
   436a8:	ldr	r0, [sp, #80]	; 0x50
   436ac:	sub	r0, r2, r0
   436b0:	add	r0, r0, #380	; 0x17c
   436b4:	add	r0, r0, #2
   436b8:	ldr	ip, [sp, #52]	; 0x34
   436bc:	smull	ip, lr, ip, r0
   436c0:	add	lr, lr, r0
   436c4:	asr	ip, r0, #31
   436c8:	rsb	ip, ip, lr, asr #2
   436cc:	rsb	ip, ip, ip, lsl #3
   436d0:	sub	ip, r0, ip
   436d4:	sub	lr, r2, ip
   436d8:	add	lr, lr, #3
   436dc:	cmp	lr, #0
   436e0:	movge	r8, lr
   436e4:	mvn	lr, lr
   436e8:	lsr	lr, lr, #31
   436ec:	cmp	r3, #71	; 0x47
   436f0:	beq	437f8 <__assert_fail@plt+0x31234>
   436f4:	cmp	r3, #103	; 0x67
   436f8:	bne	43828 <__assert_fail@plt+0x31264>
   436fc:	ldr	ip, [sp, #56]	; 0x38
   43700:	smull	r2, r3, ip, r5
   43704:	asr	r2, r5, #31
   43708:	rsb	r2, r2, r3, asr #5
   4370c:	mov	r0, #100	; 0x64
   43710:	mls	r2, r0, r2, r5
   43714:	add	r2, r2, lr
   43718:	smull	r3, ip, ip, r2
   4371c:	asr	r3, r2, #31
   43720:	rsb	r3, r3, ip, asr #5
   43724:	mls	r3, r0, r3, r2
   43728:	cmp	r3, #0
   4372c:	blt	437d0 <__assert_fail@plt+0x3120c>
   43730:	mov	r8, #0
   43734:	mov	r2, #2
   43738:	str	r2, [sp, #80]	; 0x50
   4373c:	b	42d58 <__assert_fail@plt+0x30794>
   43740:	sub	r0, r0, #1
   43744:	tst	r0, #3
   43748:	movne	r2, #0
   4374c:	bne	43788 <__assert_fail@plt+0x311c4>
   43750:	ldr	r2, [sp, #56]	; 0x38
   43754:	smull	ip, r2, r2, r0
   43758:	asr	ip, r0, #31
   4375c:	rsb	r2, ip, r2, asr #5
   43760:	mov	ip, #100	; 0x64
   43764:	mls	r2, ip, r2, r0
   43768:	cmp	r2, #0
   4376c:	movne	r2, #1
   43770:	bne	43788 <__assert_fail@plt+0x311c4>
   43774:	mov	ip, #400	; 0x190
   43778:	sdiv	r2, r0, ip
   4377c:	mls	r2, ip, r2, r0
   43780:	clz	r2, r2
   43784:	lsr	r2, r2, #5
   43788:	add	r2, r2, #364	; 0x16c
   4378c:	add	r2, r2, #1
   43790:	add	r2, r2, r7
   43794:	ldr	r0, [sp, #80]	; 0x50
   43798:	sub	r0, r2, r0
   4379c:	add	r0, r0, #380	; 0x17c
   437a0:	add	r0, r0, #2
   437a4:	ldr	ip, [sp, #52]	; 0x34
   437a8:	smull	ip, lr, ip, r0
   437ac:	add	lr, lr, r0
   437b0:	asr	ip, r0, #31
   437b4:	rsb	ip, ip, lr, asr #2
   437b8:	rsb	ip, ip, ip, lsl #3
   437bc:	sub	r0, r0, ip
   437c0:	sub	r0, r2, r0
   437c4:	add	r8, r0, #3
   437c8:	mvn	lr, #0
   437cc:	b	436ec <__assert_fail@plt+0x31128>
   437d0:	movw	r2, #63636	; 0xf894
   437d4:	movt	r2, #65535	; 0xffff
   437d8:	sub	r2, r2, lr
   437dc:	cmp	r2, r5
   437e0:	rsbgt	r3, r3, #0
   437e4:	addle	r3, r3, #100	; 0x64
   437e8:	mov	r8, #0
   437ec:	mov	r2, #2
   437f0:	str	r2, [sp, #80]	; 0x50
   437f4:	b	42d58 <__assert_fail@plt+0x30794>
   437f8:	movw	r3, #63636	; 0xf894
   437fc:	movt	r3, #65535	; 0xffff
   43800:	sub	r3, r3, lr
   43804:	cmp	r5, r3
   43808:	movge	r8, #0
   4380c:	movlt	r8, #1
   43810:	add	r3, r5, #1888	; 0x760
   43814:	add	r3, r3, #12
   43818:	add	r3, r3, lr
   4381c:	mov	r2, #4
   43820:	str	r2, [sp, #80]	; 0x50
   43824:	b	42d58 <__assert_fail@plt+0x30794>
   43828:	ldr	r3, [sp, #52]	; 0x34
   4382c:	smull	r2, r3, r3, r8
   43830:	add	r2, r3, r8
   43834:	asr	r3, r8, #31
   43838:	rsb	r3, r3, r2, asr #2
   4383c:	add	r3, r3, #1
   43840:	mov	r2, #2
   43844:	str	r2, [sp, #80]	; 0x50
   43848:	b	42df8 <__assert_fail@plt+0x30834>
   4384c:	cmp	sl, #69	; 0x45
   43850:	beq	429b8 <__assert_fail@plt+0x303f4>
   43854:	ldr	ip, [sp, #40]	; 0x28
   43858:	ldr	r3, [ip, #24]
   4385c:	add	r3, r3, #6
   43860:	ldr	lr, [sp, #52]	; 0x34
   43864:	smull	r0, r2, lr, r3
   43868:	add	r0, r2, r3
   4386c:	asr	r2, r3, #31
   43870:	rsb	r2, r2, r0, asr #2
   43874:	rsb	r2, r2, r2, lsl #3
   43878:	sub	r2, r3, r2
   4387c:	ldr	r3, [ip, #28]
   43880:	sub	r3, r3, r2
   43884:	add	r3, r3, #7
   43888:	smull	r0, r2, lr, r3
   4388c:	add	r2, r2, r3
   43890:	asr	r3, r3, #31
   43894:	rsb	r3, r3, r2, asr #2
   43898:	mov	r2, #2
   4389c:	str	r2, [sp, #80]	; 0x50
   438a0:	b	42df8 <__assert_fail@plt+0x30834>
   438a4:	cmp	sl, #69	; 0x45
   438a8:	beq	429b8 <__assert_fail@plt+0x303f4>
   438ac:	ldr	r3, [sp, #40]	; 0x28
   438b0:	ldr	r3, [r3, #24]
   438b4:	mov	r2, #1
   438b8:	str	r2, [sp, #80]	; 0x50
   438bc:	b	42df8 <__assert_fail@plt+0x30834>
   438c0:	cmp	sl, #69	; 0x45
   438c4:	beq	43c08 <__assert_fail@plt+0x31644>
   438c8:	cmp	sl, #79	; 0x4f
   438cc:	beq	429b8 <__assert_fail@plt+0x303f4>
   438d0:	ldr	r3, [sp, #40]	; 0x28
   438d4:	ldr	r3, [r3, #20]
   438d8:	movw	r8, #63636	; 0xf894
   438dc:	movt	r8, #65535	; 0xffff
   438e0:	cmp	r3, r8
   438e4:	movge	r8, #0
   438e8:	movlt	r8, #1
   438ec:	add	r3, r3, #1888	; 0x760
   438f0:	add	r3, r3, #12
   438f4:	mov	r2, #4
   438f8:	str	r2, [sp, #80]	; 0x50
   438fc:	b	42d58 <__assert_fail@plt+0x30794>
   43900:	cmp	sl, #69	; 0x45
   43904:	beq	43c10 <__assert_fail@plt+0x3164c>
   43908:	ldr	r3, [sp, #40]	; 0x28
   4390c:	ldr	r2, [r3, #20]
   43910:	ldr	r3, [sp, #56]	; 0x38
   43914:	smull	r3, r0, r3, r2
   43918:	asr	r3, r2, #31
   4391c:	rsb	r3, r3, r0, asr #5
   43920:	mov	r0, #100	; 0x64
   43924:	mls	r3, r0, r3, r2
   43928:	cmp	r3, #0
   4392c:	blt	43940 <__assert_fail@plt+0x3137c>
   43930:	mov	r8, #0
   43934:	mov	r2, #2
   43938:	str	r2, [sp, #80]	; 0x50
   4393c:	b	42d58 <__assert_fail@plt+0x30794>
   43940:	movw	r0, #63636	; 0xf894
   43944:	movt	r0, #65535	; 0xffff
   43948:	cmp	r2, r0
   4394c:	rsblt	r3, r3, #0
   43950:	addge	r3, r3, #100	; 0x64
   43954:	b	43930 <__assert_fail@plt+0x3136c>
   43958:	cmp	r5, #0
   4395c:	ldr	r3, [sp, #76]	; 0x4c
   43960:	movne	r3, #0
   43964:	str	r3, [sp, #76]	; 0x4c
   43968:	ldr	r0, [sp, #48]	; 0x30
   4396c:	bl	122d0 <strlen@plt>
   43970:	mov	r8, r0
   43974:	ldr	r2, [sp, #28]
   43978:	mvn	r3, r9
   4397c:	lsr	r3, r3, #31
   43980:	cmp	r2, #45	; 0x2d
   43984:	moveq	r3, #0
   43988:	cmp	r3, #0
   4398c:	moveq	r9, #0
   43990:	mov	r7, r9
   43994:	cmp	r9, r0
   43998:	movcc	r9, r0
   4399c:	ldr	r3, [sp, #24]
   439a0:	sub	r3, r3, fp
   439a4:	cmp	r3, r9
   439a8:	bls	43a14 <__assert_fail@plt+0x31450>
   439ac:	cmp	r6, #0
   439b0:	beq	43a0c <__assert_fail@plt+0x31448>
   439b4:	cmp	r7, r0
   439b8:	bls	439e4 <__assert_fail@plt+0x31420>
   439bc:	sub	r7, r7, r0
   439c0:	ldr	r3, [sp, #28]
   439c4:	cmp	r3, #43	; 0x2b
   439c8:	cmpne	r3, #48	; 0x30
   439cc:	mov	r2, r7
   439d0:	moveq	r1, #48	; 0x30
   439d4:	movne	r1, #32
   439d8:	mov	r0, r6
   439dc:	bl	12348 <memset@plt>
   439e0:	add	r6, r6, r7
   439e4:	cmp	r5, #0
   439e8:	bne	43a24 <__assert_fail@plt+0x31460>
   439ec:	ldr	r3, [sp, #76]	; 0x4c
   439f0:	cmp	r3, #0
   439f4:	beq	43a38 <__assert_fail@plt+0x31474>
   439f8:	mov	r2, r8
   439fc:	ldr	r1, [sp, #48]	; 0x30
   43a00:	mov	r0, r6
   43a04:	bl	423dc <__assert_fail@plt+0x2fe18>
   43a08:	add	r6, r6, r8
   43a0c:	add	fp, fp, r9
   43a10:	b	42528 <__assert_fail@plt+0x2ff64>
   43a14:	mov	r3, #34	; 0x22
   43a18:	ldr	r2, [sp, #32]
   43a1c:	str	r3, [r2]
   43a20:	b	42570 <__assert_fail@plt+0x2ffac>
   43a24:	mov	r2, r8
   43a28:	ldr	r1, [sp, #48]	; 0x30
   43a2c:	mov	r0, r6
   43a30:	bl	42384 <__assert_fail@plt+0x2fdc0>
   43a34:	b	43a08 <__assert_fail@plt+0x31444>
   43a38:	mov	r2, r8
   43a3c:	ldr	r1, [sp, #48]	; 0x30
   43a40:	mov	r0, r6
   43a44:	bl	12000 <memcpy@plt>
   43a48:	b	43a08 <__assert_fail@plt+0x31444>
   43a4c:	add	r0, r4, #2
   43a50:	mov	lr, #1
   43a54:	add	lr, lr, #1
   43a58:	mov	r2, r0
   43a5c:	ldrb	r3, [r0], #1
   43a60:	cmp	r3, #58	; 0x3a
   43a64:	bne	42998 <__assert_fail@plt+0x303d4>
   43a68:	b	43a54 <__assert_fail@plt+0x31490>
   43a6c:	mov	lr, #0
   43a70:	ldr	r2, [sp, #40]	; 0x28
   43a74:	ldr	r3, [r2, #32]
   43a78:	cmp	r3, #0
   43a7c:	blt	42528 <__assert_fail@plt+0x2ff64>
   43a80:	ldr	r2, [r2, #36]	; 0x24
   43a84:	cmp	r2, #0
   43a88:	movlt	r8, #1
   43a8c:	blt	43aac <__assert_fail@plt+0x314e8>
   43a90:	movne	r8, #0
   43a94:	bne	43aac <__assert_fail@plt+0x314e8>
   43a98:	ldr	r3, [sp, #48]	; 0x30
   43a9c:	ldrb	r8, [r3]
   43aa0:	cmp	r8, #45	; 0x2d
   43aa4:	movne	r8, #0
   43aa8:	moveq	r8, #1
   43aac:	ldr	r3, [sp, #68]	; 0x44
   43ab0:	smull	r0, r3, r3, r2
   43ab4:	add	r3, r3, r2
   43ab8:	asr	r0, r2, #31
   43abc:	str	r0, [sp, #80]	; 0x50
   43ac0:	rsb	r5, r0, r3, asr #11
   43ac4:	ldr	ip, [sp, #72]	; 0x48
   43ac8:	smull	r0, r3, ip, r2
   43acc:	add	r3, r3, r2
   43ad0:	ldr	r0, [sp, #80]	; 0x50
   43ad4:	rsb	r3, r0, r3, asr #5
   43ad8:	smull	ip, r0, ip, r3
   43adc:	add	r0, r0, r3
   43ae0:	asr	ip, r3, #31
   43ae4:	rsb	r0, ip, r0, asr #5
   43ae8:	rsb	r0, r0, r0, lsl #4
   43aec:	sub	r0, r3, r0, lsl #2
   43af0:	rsb	r3, r3, r3, lsl #4
   43af4:	sub	r3, r2, r3, lsl #2
   43af8:	cmp	lr, #3
   43afc:	ldrls	pc, [pc, lr, lsl #2]
   43b00:	b	429b8 <__assert_fail@plt+0x303f4>
   43b04:	andeq	r3, r4, r4, lsl fp
   43b08:	andeq	r3, r4, r4, lsr fp
   43b0c:	andeq	r3, r4, r4, asr fp
   43b10:	andeq	r3, r4, r0, lsl #23
   43b14:	mov	r3, #100	; 0x64
   43b18:	mla	r3, r3, r5, r0
   43b1c:	mov	r0, #0
   43b20:	mov	r2, #1
   43b24:	str	r2, [sp, #84]	; 0x54
   43b28:	mov	r2, #5
   43b2c:	str	r2, [sp, #80]	; 0x50
   43b30:	b	42e04 <__assert_fail@plt+0x30840>
   43b34:	mov	r3, #100	; 0x64
   43b38:	mla	r3, r3, r5, r0
   43b3c:	mov	r0, #4
   43b40:	mov	r2, #1
   43b44:	str	r2, [sp, #84]	; 0x54
   43b48:	mov	r2, #6
   43b4c:	str	r2, [sp, #80]	; 0x50
   43b50:	b	42e04 <__assert_fail@plt+0x30840>
   43b54:	mov	r2, #100	; 0x64
   43b58:	mul	r0, r2, r0
   43b5c:	movw	r2, #10000	; 0x2710
   43b60:	mla	r5, r2, r5, r0
   43b64:	add	r3, r5, r3
   43b68:	mov	r0, #20
   43b6c:	mov	r2, #1
   43b70:	str	r2, [sp, #84]	; 0x54
   43b74:	mov	r2, #9
   43b78:	str	r2, [sp, #80]	; 0x50
   43b7c:	b	42e04 <__assert_fail@plt+0x30840>
   43b80:	cmp	r3, #0
   43b84:	bne	43b54 <__assert_fail@plt+0x31590>
   43b88:	cmp	r0, #0
   43b8c:	bne	43b34 <__assert_fail@plt+0x31570>
   43b90:	mov	r3, r5
   43b94:	mov	r2, #1
   43b98:	str	r2, [sp, #84]	; 0x54
   43b9c:	mov	r2, #3
   43ba0:	str	r2, [sp, #80]	; 0x50
   43ba4:	b	42e04 <__assert_fail@plt+0x30840>
   43ba8:	mov	r3, #34	; 0x22
   43bac:	ldr	r2, [sp, #32]
   43bb0:	str	r3, [r2]
   43bb4:	b	42570 <__assert_fail@plt+0x2ffac>
   43bb8:	mov	r2, r5
   43bbc:	mov	r1, r7
   43bc0:	mov	r0, r6
   43bc4:	bl	12000 <memcpy@plt>
   43bc8:	b	42a4c <__assert_fail@plt+0x30488>
   43bcc:	str	r6, [sp, #28]
   43bd0:	ldr	r2, [sp, #28]
   43bd4:	ldr	r3, [sp, #24]
   43bd8:	cmp	r2, #0
   43bdc:	cmpne	r3, #0
   43be0:	movne	r3, #0
   43be4:	strbne	r3, [r2]
   43be8:	ldr	r3, [sp, #32]
   43bec:	ldr	r2, [sp, #44]	; 0x2c
   43bf0:	str	r2, [r3]
   43bf4:	b	42574 <__assert_fail@plt+0x2ffb0>
   43bf8:	mov	fp, #0
   43bfc:	b	43bd0 <__assert_fail@plt+0x3160c>
   43c00:	mov	r1, #67	; 0x43
   43c04:	b	42e1c <__assert_fail@plt+0x30858>
   43c08:	mov	r1, #89	; 0x59
   43c0c:	b	42e1c <__assert_fail@plt+0x30858>
   43c10:	mov	r1, #121	; 0x79
   43c14:	b	42e1c <__assert_fail@plt+0x30858>
   43c18:	add	r7, sp, #102	; 0x66
   43c1c:	sub	r7, r7, r5
   43c20:	sub	sl, r9, #1
   43c24:	sub	sl, sl, r7
   43c28:	ldr	r3, [sp, #28]
   43c2c:	subs	r8, r3, #45	; 0x2d
   43c30:	movne	r8, #1
   43c34:	cmp	sl, #0
   43c38:	movle	r3, #0
   43c3c:	andgt	r3, r8, #1
   43c40:	cmp	r3, #0
   43c44:	bne	43dd4 <__assert_fail@plt+0x31810>
   43c48:	mov	sl, #0
   43c4c:	mov	r3, #45	; 0x2d
   43c50:	str	r3, [sp, #80]	; 0x50
   43c54:	ldr	r3, [sp, #28]
   43c58:	cmp	r3, #95	; 0x5f
   43c5c:	beq	42ff8 <__assert_fail@plt+0x30a34>
   43c60:	ldr	r3, [sp, #24]
   43c64:	sub	r3, r3, fp
   43c68:	cmp	r3, #1
   43c6c:	bls	43020 <__assert_fail@plt+0x30a5c>
   43c70:	cmp	r6, #0
   43c74:	ldrne	r3, [sp, #80]	; 0x50
   43c78:	strbne	r3, [r6], #1
   43c7c:	add	fp, fp, #1
   43c80:	sub	r9, r9, #1
   43c84:	cmp	r9, #0
   43c88:	movlt	r8, #0
   43c8c:	andge	r8, r8, #1
   43c90:	cmp	r8, #0
   43c94:	moveq	r9, #0
   43c98:	mov	r8, r9
   43c9c:	cmp	r9, r7
   43ca0:	movcc	r9, r7
   43ca4:	ldr	r3, [sp, #24]
   43ca8:	sub	r3, r3, fp
   43cac:	cmp	r3, r9
   43cb0:	bls	43030 <__assert_fail@plt+0x30a6c>
   43cb4:	cmp	r6, #0
   43cb8:	beq	43d0c <__assert_fail@plt+0x31748>
   43cbc:	cmp	r8, r7
   43cc0:	bls	43cec <__assert_fail@plt+0x31728>
   43cc4:	sub	r8, r8, r7
   43cc8:	ldr	r3, [sp, #28]
   43ccc:	cmp	r3, #43	; 0x2b
   43cd0:	cmpne	r3, #48	; 0x30
   43cd4:	mov	r2, r8
   43cd8:	moveq	r1, #48	; 0x30
   43cdc:	movne	r1, #32
   43ce0:	mov	r0, r6
   43ce4:	bl	12348 <memset@plt>
   43ce8:	add	r6, r6, r8
   43cec:	ldr	r3, [sp, #76]	; 0x4c
   43cf0:	cmp	r3, #0
   43cf4:	beq	43040 <__assert_fail@plt+0x30a7c>
   43cf8:	mov	r2, r7
   43cfc:	mov	r1, r5
   43d00:	mov	r0, r6
   43d04:	bl	423dc <__assert_fail@plt+0x2fe18>
   43d08:	add	r6, r6, r7
   43d0c:	add	fp, fp, r9
   43d10:	b	42528 <__assert_fail@plt+0x2ff64>
   43d14:	add	r7, sp, #102	; 0x66
   43d18:	sub	r7, r7, r5
   43d1c:	sub	sl, r9, #1
   43d20:	sub	sl, sl, r7
   43d24:	ldr	r3, [sp, #28]
   43d28:	subs	r3, r3, #45	; 0x2d
   43d2c:	movne	r3, #1
   43d30:	cmp	sl, #0
   43d34:	movle	r8, #0
   43d38:	andgt	r8, r3, #1
   43d3c:	cmp	r8, #0
   43d40:	movne	r3, #43	; 0x2b
   43d44:	strne	r3, [sp, #80]	; 0x50
   43d48:	bne	43c54 <__assert_fail@plt+0x31690>
   43d4c:	mov	r2, #43	; 0x2b
   43d50:	str	r2, [sp, #80]	; 0x50
   43d54:	mov	sl, #0
   43d58:	b	43ddc <__assert_fail@plt+0x31818>
   43d5c:	movw	r8, #42652	; 0xa69c
   43d60:	movt	r8, #4
   43d64:	ldr	r3, [sp, #1188]	; 0x4a4
   43d68:	str	r3, [sp, #20]
   43d6c:	ldr	r3, [sp, #1184]	; 0x4a0
   43d70:	str	r3, [sp, #16]
   43d74:	ldr	r3, [sp, #1180]	; 0x49c
   43d78:	str	r3, [sp, #12]
   43d7c:	mov	r7, #4
   43d80:	str	r7, [sp, #8]
   43d84:	mov	r3, #43	; 0x2b
   43d88:	str	r3, [sp, #4]
   43d8c:	ldr	r3, [sp, #76]	; 0x4c
   43d90:	str	r3, [sp]
   43d94:	ldr	r3, [sp, #40]	; 0x28
   43d98:	mov	r2, r8
   43d9c:	mvn	r1, #0
   43da0:	mov	r0, #0
   43da4:	bl	42434 <__assert_fail@plt+0x2fe70>
   43da8:	mov	r5, r0
   43dac:	mov	r9, sl
   43db0:	mov	sl, r8
   43db4:	mov	r3, #43	; 0x2b
   43db8:	str	r3, [sp, #28]
   43dbc:	b	42c00 <__assert_fail@plt+0x3063c>
   43dc0:	ldr	r3, [sp, #24]
   43dc4:	cmp	r3, fp
   43dc8:	beq	432e0 <__assert_fail@plt+0x30d1c>
   43dcc:	mov	r5, #0
   43dd0:	b	432b4 <__assert_fail@plt+0x30cf0>
   43dd4:	mov	r2, #45	; 0x2d
   43dd8:	str	r2, [sp, #80]	; 0x50
   43ddc:	mov	r8, r3
   43de0:	b	43c54 <__assert_fail@plt+0x31690>
   43de4:	push	{lr}		; (str lr, [sp, #-4]!)
   43de8:	sub	sp, sp, #36	; 0x24
   43dec:	mov	ip, #0
   43df0:	strb	ip, [sp, #31]
   43df4:	ldr	lr, [sp, #44]	; 0x2c
   43df8:	str	lr, [sp, #20]
   43dfc:	ldr	lr, [sp, #40]	; 0x28
   43e00:	str	lr, [sp, #16]
   43e04:	add	lr, sp, #31
   43e08:	str	lr, [sp, #12]
   43e0c:	mvn	lr, #0
   43e10:	str	lr, [sp, #8]
   43e14:	str	ip, [sp, #4]
   43e18:	str	ip, [sp]
   43e1c:	bl	42434 <__assert_fail@plt+0x2fe70>
   43e20:	add	sp, sp, #36	; 0x24
   43e24:	pop	{pc}		; (ldr pc, [sp], #4)
   43e28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   43e2c:	strd	r6, [sp, #8]
   43e30:	str	r8, [sp, #16]
   43e34:	str	lr, [sp, #20]
   43e38:	mov	r6, r3
   43e3c:	orr	r2, r2, #540672	; 0x84000
   43e40:	orr	r2, r2, #2304	; 0x900
   43e44:	bl	27520 <__assert_fail@plt+0x14f5c>
   43e48:	subs	r4, r0, #0
   43e4c:	movlt	r5, #0
   43e50:	blt	43e68 <__assert_fail@plt+0x318a4>
   43e54:	mov	r0, r4
   43e58:	bl	12498 <fdopendir@plt>
   43e5c:	subs	r5, r0, #0
   43e60:	strne	r4, [r6]
   43e64:	beq	43e80 <__assert_fail@plt+0x318bc>
   43e68:	mov	r0, r5
   43e6c:	ldrd	r4, [sp]
   43e70:	ldrd	r6, [sp, #8]
   43e74:	ldr	r8, [sp, #16]
   43e78:	add	sp, sp, #20
   43e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   43e80:	bl	12318 <__errno_location@plt>
   43e84:	mov	r6, r0
   43e88:	ldr	r7, [r0]
   43e8c:	mov	r0, r4
   43e90:	bl	1257c <close@plt>
   43e94:	str	r7, [r6]
   43e98:	b	43e68 <__assert_fail@plt+0x318a4>
   43e9c:	strd	r4, [sp, #-16]!
   43ea0:	str	r6, [sp, #8]
   43ea4:	str	lr, [sp, #12]
   43ea8:	mov	r6, r1
   43eac:	mov	r4, r2
   43eb0:	mov	r1, #0
   43eb4:	bl	12414 <setlocale@plt>
   43eb8:	subs	r5, r0, #0
   43ebc:	beq	43f00 <__assert_fail@plt+0x3193c>
   43ec0:	mov	r0, r5
   43ec4:	bl	122d0 <strlen@plt>
   43ec8:	cmp	r4, r0
   43ecc:	bhi	43f1c <__assert_fail@plt+0x31958>
   43ed0:	cmp	r4, #0
   43ed4:	moveq	r0, #34	; 0x22
   43ed8:	beq	43f30 <__assert_fail@plt+0x3196c>
   43edc:	sub	r4, r4, #1
   43ee0:	mov	r2, r4
   43ee4:	mov	r1, r5
   43ee8:	mov	r0, r6
   43eec:	bl	12000 <memcpy@plt>
   43ef0:	mov	r3, #0
   43ef4:	strb	r3, [r6, r4]
   43ef8:	mov	r0, #34	; 0x22
   43efc:	b	43f30 <__assert_fail@plt+0x3196c>
   43f00:	cmp	r4, #0
   43f04:	moveq	r0, #22
   43f08:	beq	43f30 <__assert_fail@plt+0x3196c>
   43f0c:	mov	r3, #0
   43f10:	strb	r3, [r6]
   43f14:	mov	r0, #22
   43f18:	b	43f30 <__assert_fail@plt+0x3196c>
   43f1c:	add	r2, r0, #1
   43f20:	mov	r1, r5
   43f24:	mov	r0, r6
   43f28:	bl	12000 <memcpy@plt>
   43f2c:	mov	r0, #0
   43f30:	ldrd	r4, [sp]
   43f34:	ldr	r6, [sp, #8]
   43f38:	add	sp, sp, #12
   43f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   43f40:	str	r4, [sp, #-8]!
   43f44:	str	lr, [sp, #4]
   43f48:	mov	r1, #0
   43f4c:	bl	12414 <setlocale@plt>
   43f50:	ldr	r4, [sp]
   43f54:	add	sp, sp, #4
   43f58:	pop	{pc}		; (ldr pc, [sp], #4)
   43f5c:	eor	r1, r1, #-2147483648	; 0x80000000
   43f60:	b	43f68 <__assert_fail@plt+0x319a4>
   43f64:	eor	r3, r3, #-2147483648	; 0x80000000
   43f68:	push	{r4, r5, lr}
   43f6c:	lsl	r4, r1, #1
   43f70:	lsl	r5, r3, #1
   43f74:	teq	r4, r5
   43f78:	teqeq	r0, r2
   43f7c:	orrsne	ip, r4, r0
   43f80:	orrsne	ip, r5, r2
   43f84:	mvnsne	ip, r4, asr #21
   43f88:	mvnsne	ip, r5, asr #21
   43f8c:	beq	44178 <__assert_fail@plt+0x31bb4>
   43f90:	lsr	r4, r4, #21
   43f94:	rsbs	r5, r4, r5, lsr #21
   43f98:	rsblt	r5, r5, #0
   43f9c:	ble	43fbc <__assert_fail@plt+0x319f8>
   43fa0:	add	r4, r4, r5
   43fa4:	eor	r2, r0, r2
   43fa8:	eor	r3, r1, r3
   43fac:	eor	r0, r2, r0
   43fb0:	eor	r1, r3, r1
   43fb4:	eor	r2, r0, r2
   43fb8:	eor	r3, r1, r3
   43fbc:	cmp	r5, #54	; 0x36
   43fc0:	pophi	{r4, r5, pc}
   43fc4:	tst	r1, #-2147483648	; 0x80000000
   43fc8:	lsl	r1, r1, #12
   43fcc:	mov	ip, #1048576	; 0x100000
   43fd0:	orr	r1, ip, r1, lsr #12
   43fd4:	beq	43fe0 <__assert_fail@plt+0x31a1c>
   43fd8:	rsbs	r0, r0, #0
   43fdc:	rsc	r1, r1, #0
   43fe0:	tst	r3, #-2147483648	; 0x80000000
   43fe4:	lsl	r3, r3, #12
   43fe8:	orr	r3, ip, r3, lsr #12
   43fec:	beq	43ff8 <__assert_fail@plt+0x31a34>
   43ff0:	rsbs	r2, r2, #0
   43ff4:	rsc	r3, r3, #0
   43ff8:	teq	r4, r5
   43ffc:	beq	44160 <__assert_fail@plt+0x31b9c>
   44000:	sub	r4, r4, #1
   44004:	rsbs	lr, r5, #32
   44008:	blt	44024 <__assert_fail@plt+0x31a60>
   4400c:	lsl	ip, r2, lr
   44010:	adds	r0, r0, r2, lsr r5
   44014:	adc	r1, r1, #0
   44018:	adds	r0, r0, r3, lsl lr
   4401c:	adcs	r1, r1, r3, asr r5
   44020:	b	44040 <__assert_fail@plt+0x31a7c>
   44024:	sub	r5, r5, #32
   44028:	add	lr, lr, #32
   4402c:	cmp	r2, #1
   44030:	lsl	ip, r3, lr
   44034:	orrcs	ip, ip, #2
   44038:	adds	r0, r0, r3, asr r5
   4403c:	adcs	r1, r1, r3, asr #31
   44040:	and	r5, r1, #-2147483648	; 0x80000000
   44044:	bpl	44054 <__assert_fail@plt+0x31a90>
   44048:	rsbs	ip, ip, #0
   4404c:	rscs	r0, r0, #0
   44050:	rsc	r1, r1, #0
   44054:	cmp	r1, #1048576	; 0x100000
   44058:	bcc	44098 <__assert_fail@plt+0x31ad4>
   4405c:	cmp	r1, #2097152	; 0x200000
   44060:	bcc	44080 <__assert_fail@plt+0x31abc>
   44064:	lsrs	r1, r1, #1
   44068:	rrxs	r0, r0
   4406c:	rrx	ip, ip
   44070:	add	r4, r4, #1
   44074:	lsl	r2, r4, #21
   44078:	cmn	r2, #4194304	; 0x400000
   4407c:	bcs	441d8 <__assert_fail@plt+0x31c14>
   44080:	cmp	ip, #-2147483648	; 0x80000000
   44084:	lsrseq	ip, r0, #1
   44088:	adcs	r0, r0, #0
   4408c:	adc	r1, r1, r4, lsl #20
   44090:	orr	r1, r1, r5
   44094:	pop	{r4, r5, pc}
   44098:	lsls	ip, ip, #1
   4409c:	adcs	r0, r0, r0
   440a0:	adc	r1, r1, r1
   440a4:	tst	r1, #1048576	; 0x100000
   440a8:	sub	r4, r4, #1
   440ac:	bne	44080 <__assert_fail@plt+0x31abc>
   440b0:	teq	r1, #0
   440b4:	moveq	r1, r0
   440b8:	moveq	r0, #0
   440bc:	clz	r3, r1
   440c0:	addeq	r3, r3, #32
   440c4:	sub	r3, r3, #11
   440c8:	subs	r2, r3, #32
   440cc:	bge	440f0 <__assert_fail@plt+0x31b2c>
   440d0:	adds	r2, r2, #12
   440d4:	ble	440ec <__assert_fail@plt+0x31b28>
   440d8:	add	ip, r2, #20
   440dc:	rsb	r2, r2, #12
   440e0:	lsl	r0, r1, ip
   440e4:	lsr	r1, r1, r2
   440e8:	b	44100 <__assert_fail@plt+0x31b3c>
   440ec:	add	r2, r2, #20
   440f0:	rsble	ip, r2, #32
   440f4:	lsl	r1, r1, r2
   440f8:	orrle	r1, r1, r0, lsr ip
   440fc:	lslle	r0, r0, r2
   44100:	subs	r4, r4, r3
   44104:	addge	r1, r1, r4, lsl #20
   44108:	orrge	r1, r1, r5
   4410c:	popge	{r4, r5, pc}
   44110:	mvn	r4, r4
   44114:	subs	r4, r4, #31
   44118:	bge	44154 <__assert_fail@plt+0x31b90>
   4411c:	adds	r4, r4, #12
   44120:	bgt	4413c <__assert_fail@plt+0x31b78>
   44124:	add	r4, r4, #20
   44128:	rsb	r2, r4, #32
   4412c:	lsr	r0, r0, r4
   44130:	orr	r0, r0, r1, lsl r2
   44134:	orr	r1, r5, r1, lsr r4
   44138:	pop	{r4, r5, pc}
   4413c:	rsb	r4, r4, #12
   44140:	rsb	r2, r4, #32
   44144:	lsr	r0, r0, r2
   44148:	orr	r0, r0, r1, lsl r4
   4414c:	mov	r1, r5
   44150:	pop	{r4, r5, pc}
   44154:	lsr	r0, r1, r4
   44158:	mov	r1, r5
   4415c:	pop	{r4, r5, pc}
   44160:	teq	r4, #0
   44164:	eor	r3, r3, #1048576	; 0x100000
   44168:	eoreq	r1, r1, #1048576	; 0x100000
   4416c:	addeq	r4, r4, #1
   44170:	subne	r5, r5, #1
   44174:	b	44000 <__assert_fail@plt+0x31a3c>
   44178:	mvns	ip, r4, asr #21
   4417c:	mvnsne	ip, r5, asr #21
   44180:	beq	441e8 <__assert_fail@plt+0x31c24>
   44184:	teq	r4, r5
   44188:	teqeq	r0, r2
   4418c:	beq	441a0 <__assert_fail@plt+0x31bdc>
   44190:	orrs	ip, r4, r0
   44194:	moveq	r1, r3
   44198:	moveq	r0, r2
   4419c:	pop	{r4, r5, pc}
   441a0:	teq	r1, r3
   441a4:	movne	r1, #0
   441a8:	movne	r0, #0
   441ac:	popne	{r4, r5, pc}
   441b0:	lsrs	ip, r4, #21
   441b4:	bne	441c8 <__assert_fail@plt+0x31c04>
   441b8:	lsls	r0, r0, #1
   441bc:	adcs	r1, r1, r1
   441c0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   441c4:	pop	{r4, r5, pc}
   441c8:	adds	r4, r4, #4194304	; 0x400000
   441cc:	addcc	r1, r1, #1048576	; 0x100000
   441d0:	popcc	{r4, r5, pc}
   441d4:	and	r5, r1, #-2147483648	; 0x80000000
   441d8:	orr	r1, r5, #2130706432	; 0x7f000000
   441dc:	orr	r1, r1, #15728640	; 0xf00000
   441e0:	mov	r0, #0
   441e4:	pop	{r4, r5, pc}
   441e8:	mvns	ip, r4, asr #21
   441ec:	movne	r1, r3
   441f0:	movne	r0, r2
   441f4:	mvnseq	ip, r5, asr #21
   441f8:	movne	r3, r1
   441fc:	movne	r2, r0
   44200:	orrs	r4, r0, r1, lsl #12
   44204:	orrseq	r5, r2, r3, lsl #12
   44208:	teqeq	r1, r3
   4420c:	orrne	r1, r1, #524288	; 0x80000
   44210:	pop	{r4, r5, pc}
   44214:	teq	r0, #0
   44218:	moveq	r1, #0
   4421c:	bxeq	lr
   44220:	push	{r4, r5, lr}
   44224:	mov	r4, #1024	; 0x400
   44228:	add	r4, r4, #50	; 0x32
   4422c:	mov	r5, #0
   44230:	mov	r1, #0
   44234:	b	440b0 <__assert_fail@plt+0x31aec>
   44238:	teq	r0, #0
   4423c:	moveq	r1, #0
   44240:	bxeq	lr
   44244:	push	{r4, r5, lr}
   44248:	mov	r4, #1024	; 0x400
   4424c:	add	r4, r4, #50	; 0x32
   44250:	ands	r5, r0, #-2147483648	; 0x80000000
   44254:	rsbmi	r0, r0, #0
   44258:	mov	r1, #0
   4425c:	b	440b0 <__assert_fail@plt+0x31aec>
   44260:	lsls	r2, r0, #1
   44264:	asr	r1, r2, #3
   44268:	rrx	r1, r1
   4426c:	lsl	r0, r2, #28
   44270:	andsne	r3, r2, #-16777216	; 0xff000000
   44274:	teqne	r3, #-16777216	; 0xff000000
   44278:	eorne	r1, r1, #939524096	; 0x38000000
   4427c:	bxne	lr
   44280:	bics	r2, r2, #-16777216	; 0xff000000
   44284:	bxeq	lr
   44288:	teq	r3, #-16777216	; 0xff000000
   4428c:	orreq	r1, r1, #524288	; 0x80000
   44290:	bxeq	lr
   44294:	push	{r4, r5, lr}
   44298:	mov	r4, #896	; 0x380
   4429c:	and	r5, r1, #-2147483648	; 0x80000000
   442a0:	bic	r1, r1, #-2147483648	; 0x80000000
   442a4:	b	440b0 <__assert_fail@plt+0x31aec>
   442a8:	orrs	r2, r0, r1
   442ac:	bxeq	lr
   442b0:	push	{r4, r5, lr}
   442b4:	mov	r5, #0
   442b8:	b	442d8 <__assert_fail@plt+0x31d14>
   442bc:	orrs	r2, r0, r1
   442c0:	bxeq	lr
   442c4:	push	{r4, r5, lr}
   442c8:	ands	r5, r1, #-2147483648	; 0x80000000
   442cc:	bpl	442d8 <__assert_fail@plt+0x31d14>
   442d0:	rsbs	r0, r0, #0
   442d4:	rsc	r1, r1, #0
   442d8:	mov	r4, #1024	; 0x400
   442dc:	add	r4, r4, #50	; 0x32
   442e0:	lsrs	ip, r1, #22
   442e4:	beq	44054 <__assert_fail@plt+0x31a90>
   442e8:	mov	r2, #3
   442ec:	lsrs	ip, ip, #3
   442f0:	addne	r2, r2, #3
   442f4:	lsrs	ip, ip, #3
   442f8:	addne	r2, r2, #3
   442fc:	add	r2, r2, ip, lsr #3
   44300:	rsb	r3, r2, #32
   44304:	lsl	ip, r0, r3
   44308:	lsr	r0, r0, r2
   4430c:	orr	r0, r0, r1, lsl r3
   44310:	lsr	r1, r1, r2
   44314:	add	r4, r4, r2
   44318:	b	44054 <__assert_fail@plt+0x31a90>
   4431c:	cmp	r3, #0
   44320:	cmpeq	r2, #0
   44324:	bne	44348 <__assert_fail@plt+0x31d84>
   44328:	cmp	r1, #0
   4432c:	movlt	r1, #-2147483648	; 0x80000000
   44330:	movlt	r0, #0
   44334:	blt	44344 <__assert_fail@plt+0x31d80>
   44338:	cmpeq	r0, #0
   4433c:	mvnne	r1, #-2147483648	; 0x80000000
   44340:	mvnne	r0, #0
   44344:	b	4442c <__assert_fail@plt+0x31e68>
   44348:	sub	sp, sp, #8
   4434c:	push	{sp, lr}
   44350:	cmp	r1, #0
   44354:	blt	44374 <__assert_fail@plt+0x31db0>
   44358:	cmp	r3, #0
   4435c:	blt	443a8 <__assert_fail@plt+0x31de4>
   44360:	bl	44480 <__assert_fail@plt+0x31ebc>
   44364:	ldr	lr, [sp, #4]
   44368:	add	sp, sp, #8
   4436c:	pop	{r2, r3}
   44370:	bx	lr
   44374:	rsbs	r0, r0, #0
   44378:	sbc	r1, r1, r1, lsl #1
   4437c:	cmp	r3, #0
   44380:	blt	443cc <__assert_fail@plt+0x31e08>
   44384:	bl	44480 <__assert_fail@plt+0x31ebc>
   44388:	ldr	lr, [sp, #4]
   4438c:	add	sp, sp, #8
   44390:	pop	{r2, r3}
   44394:	rsbs	r0, r0, #0
   44398:	sbc	r1, r1, r1, lsl #1
   4439c:	rsbs	r2, r2, #0
   443a0:	sbc	r3, r3, r3, lsl #1
   443a4:	bx	lr
   443a8:	rsbs	r2, r2, #0
   443ac:	sbc	r3, r3, r3, lsl #1
   443b0:	bl	44480 <__assert_fail@plt+0x31ebc>
   443b4:	ldr	lr, [sp, #4]
   443b8:	add	sp, sp, #8
   443bc:	pop	{r2, r3}
   443c0:	rsbs	r0, r0, #0
   443c4:	sbc	r1, r1, r1, lsl #1
   443c8:	bx	lr
   443cc:	rsbs	r2, r2, #0
   443d0:	sbc	r3, r3, r3, lsl #1
   443d4:	bl	44480 <__assert_fail@plt+0x31ebc>
   443d8:	ldr	lr, [sp, #4]
   443dc:	add	sp, sp, #8
   443e0:	pop	{r2, r3}
   443e4:	rsbs	r2, r2, #0
   443e8:	sbc	r3, r3, r3, lsl #1
   443ec:	bx	lr
   443f0:	cmp	r3, #0
   443f4:	cmpeq	r2, #0
   443f8:	bne	44410 <__assert_fail@plt+0x31e4c>
   443fc:	cmp	r1, #0
   44400:	cmpeq	r0, #0
   44404:	mvnne	r1, #0
   44408:	mvnne	r0, #0
   4440c:	b	4442c <__assert_fail@plt+0x31e68>
   44410:	sub	sp, sp, #8
   44414:	push	{sp, lr}
   44418:	bl	44480 <__assert_fail@plt+0x31ebc>
   4441c:	ldr	lr, [sp, #4]
   44420:	add	sp, sp, #8
   44424:	pop	{r2, r3}
   44428:	bx	lr
   4442c:	push	{r1, lr}
   44430:	mov	r0, #8
   44434:	bl	11ec8 <raise@plt>
   44438:	pop	{r1, pc}
   4443c:	andeq	r0, r0, r0
   44440:	vmov	d6, r0, r1
   44444:	vldr	d7, [pc, #36]	; 44470 <__assert_fail@plt+0x31eac>
   44448:	vldr	d5, [pc, #40]	; 44478 <__assert_fail@plt+0x31eb4>
   4444c:	vmul.f64	d7, d6, d7
   44450:	vcvt.u32.f64	s14, d7
   44454:	vcvt.f64.u32	d4, s14
   44458:	vmov	r1, s14
   4445c:	vmls.f64	d6, d4, d5
   44460:	vcvt.u32.f64	s15, d6
   44464:	vmov	r0, s15
   44468:	bx	lr
   4446c:	nop			; (mov r0, r0)
   44470:	andeq	r0, r0, r0
   44474:	ldclcc	0, cr0, [r0]
   44478:	andeq	r0, r0, r0
   4447c:	mvnsmi	r0, r0
   44480:	cmp	r1, r3
   44484:	cmpeq	r0, r2
   44488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4448c:	mov	r4, r0
   44490:	movcc	r0, #0
   44494:	mov	r5, r1
   44498:	ldr	lr, [sp, #36]	; 0x24
   4449c:	movcc	r1, r0
   444a0:	bcc	4459c <__assert_fail@plt+0x31fd8>
   444a4:	cmp	r3, #0
   444a8:	clzeq	ip, r2
   444ac:	clzne	ip, r3
   444b0:	addeq	ip, ip, #32
   444b4:	cmp	r5, #0
   444b8:	clzeq	r1, r4
   444bc:	addeq	r1, r1, #32
   444c0:	clzne	r1, r5
   444c4:	sub	ip, ip, r1
   444c8:	sub	sl, ip, #32
   444cc:	lsl	r9, r3, ip
   444d0:	rsb	fp, ip, #32
   444d4:	orr	r9, r9, r2, lsl sl
   444d8:	orr	r9, r9, r2, lsr fp
   444dc:	lsl	r8, r2, ip
   444e0:	cmp	r5, r9
   444e4:	cmpeq	r4, r8
   444e8:	movcc	r0, #0
   444ec:	movcc	r1, r0
   444f0:	bcc	4450c <__assert_fail@plt+0x31f48>
   444f4:	mov	r0, #1
   444f8:	subs	r4, r4, r8
   444fc:	lsl	r1, r0, sl
   44500:	orr	r1, r1, r0, lsr fp
   44504:	lsl	r0, r0, ip
   44508:	sbc	r5, r5, r9
   4450c:	cmp	ip, #0
   44510:	beq	4459c <__assert_fail@plt+0x31fd8>
   44514:	lsr	r6, r8, #1
   44518:	orr	r6, r6, r9, lsl #31
   4451c:	lsr	r7, r9, #1
   44520:	mov	r2, ip
   44524:	b	44548 <__assert_fail@plt+0x31f84>
   44528:	subs	r3, r4, r6
   4452c:	sbc	r8, r5, r7
   44530:	adds	r3, r3, r3
   44534:	adc	r8, r8, r8
   44538:	adds	r4, r3, #1
   4453c:	adc	r5, r8, #0
   44540:	subs	r2, r2, #1
   44544:	beq	44564 <__assert_fail@plt+0x31fa0>
   44548:	cmp	r5, r7
   4454c:	cmpeq	r4, r6
   44550:	bcs	44528 <__assert_fail@plt+0x31f64>
   44554:	adds	r4, r4, r4
   44558:	adc	r5, r5, r5
   4455c:	subs	r2, r2, #1
   44560:	bne	44548 <__assert_fail@plt+0x31f84>
   44564:	lsr	r3, r4, ip
   44568:	orr	r3, r3, r5, lsl fp
   4456c:	lsr	r2, r5, ip
   44570:	orr	r3, r3, r5, lsr sl
   44574:	adds	r0, r0, r4
   44578:	mov	r4, r3
   4457c:	lsl	r3, r2, ip
   44580:	orr	r3, r3, r4, lsl sl
   44584:	lsl	ip, r4, ip
   44588:	orr	r3, r3, r4, lsr fp
   4458c:	adc	r1, r1, r5
   44590:	subs	r0, r0, ip
   44594:	mov	r5, r2
   44598:	sbc	r1, r1, r3
   4459c:	cmp	lr, #0
   445a0:	strdne	r4, [lr]
   445a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   445a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   445ac:	mov	r7, r0
   445b0:	ldr	r6, [pc, #72]	; 44600 <__assert_fail@plt+0x3203c>
   445b4:	ldr	r5, [pc, #72]	; 44604 <__assert_fail@plt+0x32040>
   445b8:	add	r6, pc, r6
   445bc:	add	r5, pc, r5
   445c0:	sub	r6, r6, r5
   445c4:	mov	r8, r1
   445c8:	mov	r9, r2
   445cc:	bl	11e60 <pthread_mutex_unlock@plt-0x20>
   445d0:	asrs	r6, r6, #2
   445d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   445d8:	mov	r4, #0
   445dc:	add	r4, r4, #1
   445e0:	ldr	r3, [r5], #4
   445e4:	mov	r2, r9
   445e8:	mov	r1, r8
   445ec:	mov	r0, r7
   445f0:	blx	r3
   445f4:	cmp	r6, r4
   445f8:	bne	445dc <__assert_fail@plt+0x32018>
   445fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   44600:	andeq	r6, r1, r4, asr #18
   44604:	andeq	r6, r1, ip, lsr r9
   44608:	bx	lr
   4460c:	ldr	r3, [pc, #12]	; 44620 <__assert_fail@plt+0x3205c>
   44610:	mov	r1, #0
   44614:	add	r3, pc, r3
   44618:	ldr	r2, [r3]
   4461c:	b	1233c <__cxa_atexit@plt>
   44620:	andeq	r6, r1, r8, ror #24

Disassembly of section .fini:

00044624 <.fini>:
   44624:	push	{r3, lr}
   44628:	pop	{r3, pc}
