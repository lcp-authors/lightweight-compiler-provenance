
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010db4 <.init>:
   10db4:	push	{r3, lr}
   10db8:	bl	11068 <__assert_fail@plt+0x48>
   10dbc:	pop	{r3, pc}

Disassembly of section .plt:

00010dc0 <calloc@plt-0x14>:
   10dc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc4:	ldr	lr, [pc, #4]	; 10dd0 <calloc@plt-0x4>
   10dc8:	add	lr, pc, lr
   10dcc:	ldr	pc, [lr, #8]!
   10dd0:	andeq	r5, r1, r0, lsr r2

00010dd4 <calloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #560]!	; 0x230

00010de0 <fputs_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #552]!	; 0x228

00010dec <raise@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #544]!	; 0x220

00010df8 <strcmp@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #536]!	; 0x218

00010e04 <posix_fadvise64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #528]!	; 0x210

00010e10 <fflush@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #520]!	; 0x208

00010e1c <free@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #512]!	; 0x200

00010e28 <_exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #504]!	; 0x1f8

00010e34 <memcpy@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e40 <mbsinit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #488]!	; 0x1e8

00010e4c <getc_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #480]!	; 0x1e0

00010e58 <dcgettext@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #472]!	; 0x1d8

00010e64 <realloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e70 <textdomain@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #456]!	; 0x1c8

00010e7c <iswprint@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #448]!	; 0x1c0

00010e88 <lseek64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #440]!	; 0x1b8

00010e94 <__ctype_get_mb_cur_max@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea0 <__fpending@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #424]!	; 0x1a8

00010eac <ferror_unlocked@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb8 <mbrtowc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #408]!	; 0x198

00010ec4 <error@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #400]!	; 0x190

00010ed0 <malloc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #392]!	; 0x188

00010edc <__libc_start_main@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #384]!	; 0x180

00010ee8 <__freading@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #376]!	; 0x178

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #368]!	; 0x170

00010f00 <getopt_long@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #360]!	; 0x168

00010f0c <__ctype_b_loc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #352]!	; 0x160

00010f18 <exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #344]!	; 0x158

00010f24 <bcmp@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #336]!	; 0x150

00010f30 <strlen@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #328]!	; 0x148

00010f3c <__errno_location@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #320]!	; 0x140

00010f48 <__cxa_atexit@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #312]!	; 0x138

00010f54 <memset@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #304]!	; 0x130

00010f60 <__printf_chk@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #296]!	; 0x128

00010f6c <fileno@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #288]!	; 0x120

00010f78 <__fprintf_chk@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #280]!	; 0x118

00010f84 <fclose@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #272]!	; 0x110

00010f90 <fseeko64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #264]!	; 0x108

00010f9c <setlocale@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #256]!	; 0x100

00010fa8 <strrchr@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #248]!	; 0xf8

00010fb4 <nl_langinfo@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #240]!	; 0xf0

00010fc0 <clearerr_unlocked@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #232]!	; 0xe8

00010fcc <fopen64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #224]!	; 0xe0

00010fd8 <bindtextdomain@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #216]!	; 0xd8

00010fe4 <fputs@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #208]!	; 0xd0

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #200]!	; 0xc8

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #192]!	; 0xc0

00011008 <putchar_unlocked@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #184]!	; 0xb8

00011014 <strspn@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #176]!	; 0xb0

00011020 <__assert_fail@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #168]!	; 0xa8

Disassembly of section .text:

0001102c <.text>:
   1102c:	mov	fp, #0
   11030:	mov	lr, #0
   11034:	pop	{r1}		; (ldr r1, [sp], #4)
   11038:	mov	r2, sp
   1103c:	push	{r2}		; (str r2, [sp, #-4]!)
   11040:	push	{r0}		; (str r0, [sp, #-4]!)
   11044:	ldr	ip, [pc, #16]	; 1105c <__assert_fail@plt+0x3c>
   11048:	push	{ip}		; (str ip, [sp, #-4]!)
   1104c:	ldr	r0, [pc, #12]	; 11060 <__assert_fail@plt+0x40>
   11050:	ldr	r3, [pc, #12]	; 11064 <__assert_fail@plt+0x44>
   11054:	bl	10edc <__libc_start_main@plt>
   11058:	bl	10ffc <abort@plt>
   1105c:	andeq	r4, r1, r4, lsr sp
   11060:	muleq	r1, r8, r3
   11064:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11068:	ldr	r3, [pc, #20]	; 11084 <__assert_fail@plt+0x64>
   1106c:	ldr	r2, [pc, #20]	; 11088 <__assert_fail@plt+0x68>
   11070:	add	r3, pc, r3
   11074:	ldr	r2, [r3, r2]
   11078:	cmp	r2, #0
   1107c:	bxeq	lr
   11080:	b	10ef4 <__gmon_start__@plt>
   11084:	andeq	r4, r1, r8, lsl #31
   11088:	ldrdeq	r0, [r0], -r4
   1108c:	ldr	r0, [pc, #24]	; 110ac <__assert_fail@plt+0x8c>
   11090:	ldr	r3, [pc, #24]	; 110b0 <__assert_fail@plt+0x90>
   11094:	cmp	r3, r0
   11098:	bxeq	lr
   1109c:	ldr	r3, [pc, #16]	; 110b4 <__assert_fail@plt+0x94>
   110a0:	cmp	r3, #0
   110a4:	bxeq	lr
   110a8:	bx	r3
   110ac:	andeq	r6, r2, r0, lsr r1
   110b0:	andeq	r6, r2, r0, lsr r1
   110b4:	andeq	r0, r0, r0
   110b8:	ldr	r0, [pc, #36]	; 110e4 <__assert_fail@plt+0xc4>
   110bc:	ldr	r1, [pc, #36]	; 110e8 <__assert_fail@plt+0xc8>
   110c0:	sub	r1, r1, r0
   110c4:	asr	r1, r1, #2
   110c8:	add	r1, r1, r1, lsr #31
   110cc:	asrs	r1, r1, #1
   110d0:	bxeq	lr
   110d4:	ldr	r3, [pc, #16]	; 110ec <__assert_fail@plt+0xcc>
   110d8:	cmp	r3, #0
   110dc:	bxeq	lr
   110e0:	bx	r3
   110e4:	andeq	r6, r2, r0, lsr r1
   110e8:	andeq	r6, r2, r0, lsr r1
   110ec:	andeq	r0, r0, r0
   110f0:	push	{r4, lr}
   110f4:	ldr	r4, [pc, #24]	; 11114 <__assert_fail@plt+0xf4>
   110f8:	ldrb	r3, [r4]
   110fc:	cmp	r3, #0
   11100:	popne	{r4, pc}
   11104:	bl	1108c <__assert_fail@plt+0x6c>
   11108:	mov	r3, #1
   1110c:	strb	r3, [r4]
   11110:	pop	{r4, pc}
   11114:	andeq	r6, r2, r4, asr r1
   11118:	b	110b8 <__assert_fail@plt+0x98>
   1111c:	push	{fp, lr}
   11120:	mov	fp, sp
   11124:	sub	sp, sp, #56	; 0x38
   11128:	mov	r8, r0
   1112c:	cmp	r0, #0
   11130:	bne	11358 <__assert_fail@plt+0x338>
   11134:	movw	r1, #19843	; 0x4d83
   11138:	mov	r0, #0
   1113c:	mov	r2, #5
   11140:	movt	r1, #1
   11144:	bl	10e58 <dcgettext@plt>
   11148:	mov	r1, r0
   1114c:	movw	r0, #24988	; 0x619c
   11150:	movt	r0, #2
   11154:	ldr	r2, [r0]
   11158:	mov	r0, #1
   1115c:	bl	10f60 <__printf_chk@plt>
   11160:	movw	r1, #19876	; 0x4da4
   11164:	mov	r0, #0
   11168:	mov	r2, #5
   1116c:	movt	r1, #1
   11170:	bl	10e58 <dcgettext@plt>
   11174:	movw	r9, #24908	; 0x614c
   11178:	movt	r9, #2
   1117c:	ldr	r1, [r9]
   11180:	bl	10de0 <fputs_unlocked@plt>
   11184:	movw	r1, #20214	; 0x4ef6
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	movt	r1, #1
   11194:	bl	10e58 <dcgettext@plt>
   11198:	ldr	r1, [r9]
   1119c:	bl	10de0 <fputs_unlocked@plt>
   111a0:	movw	r1, #20270	; 0x4f2e
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10e58 <dcgettext@plt>
   111b4:	ldr	r1, [r9]
   111b8:	bl	10de0 <fputs_unlocked@plt>
   111bc:	movw	r1, #19942	; 0x4de6
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	movt	r1, #1
   111cc:	bl	10e58 <dcgettext@plt>
   111d0:	ldr	r1, [r9]
   111d4:	bl	10de0 <fputs_unlocked@plt>
   111d8:	bl	12074 <__assert_fail@plt+0x1054>
   111dc:	movw	r1, #20054	; 0x4e56
   111e0:	mov	r0, #0
   111e4:	mov	r2, #5
   111e8:	movt	r1, #1
   111ec:	bl	10e58 <dcgettext@plt>
   111f0:	ldr	r1, [r9]
   111f4:	bl	10de0 <fputs_unlocked@plt>
   111f8:	movw	r1, #20099	; 0x4e83
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10e58 <dcgettext@plt>
   1120c:	ldr	r1, [r9]
   11210:	bl	10de0 <fputs_unlocked@plt>
   11214:	movw	r0, #20840	; 0x5168
   11218:	mov	r6, sp
   1121c:	movt	r0, #1
   11220:	mov	r1, r6
   11224:	ldm	r0!, {r2, r3, r4, r5}
   11228:	stmia	r1!, {r2, r3, r4, r5}
   1122c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11230:	stmia	r1!, {r2, r3, r4, r5, r7}
   11234:	ldm	r0, {r2, r3, r4, r5, r7}
   11238:	stm	r1, {r2, r3, r4, r5, r7}
   1123c:	movw	r1, #20345	; 0x4f79
   11240:	movw	r5, #20153	; 0x4eb9
   11244:	movt	r1, #1
   11248:	movt	r5, #1
   1124c:	mov	r0, r5
   11250:	bl	10df8 <strcmp@plt>
   11254:	cmp	r0, #0
   11258:	ldrne	r1, [r6, #8]!
   1125c:	cmpne	r1, #0
   11260:	bne	1124c <__assert_fail@plt+0x22c>
   11264:	movw	r1, #20440	; 0x4fd8
   11268:	ldr	r6, [r6, #4]
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10e58 <dcgettext@plt>
   1127c:	movw	r2, #20184	; 0x4ed8
   11280:	movw	r3, #20463	; 0x4fef
   11284:	mov	r1, r0
   11288:	mov	r0, #1
   1128c:	movt	r2, #1
   11290:	movt	r3, #1
   11294:	bl	10f60 <__printf_chk@plt>
   11298:	cmp	r6, #0
   1129c:	mov	r0, #5
   112a0:	mov	r1, #0
   112a4:	moveq	r6, r5
   112a8:	bl	10f9c <setlocale@plt>
   112ac:	cmp	r0, #0
   112b0:	beq	112e8 <__assert_fail@plt+0x2c8>
   112b4:	movw	r1, #20503	; 0x5017
   112b8:	mov	r2, #3
   112bc:	movt	r1, #1
   112c0:	bl	10ff0 <strncmp@plt>
   112c4:	cmp	r0, #0
   112c8:	beq	112e8 <__assert_fail@plt+0x2c8>
   112cc:	movw	r1, #20507	; 0x501b
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10e58 <dcgettext@plt>
   112e0:	ldr	r1, [r9]
   112e4:	bl	10de0 <fputs_unlocked@plt>
   112e8:	movw	r1, #20578	; 0x5062
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e58 <dcgettext@plt>
   112fc:	movw	r2, #20463	; 0x4fef
   11300:	mov	r1, r0
   11304:	mov	r0, #1
   11308:	mov	r3, r5
   1130c:	movt	r2, #1
   11310:	bl	10f60 <__printf_chk@plt>
   11314:	movw	r1, #20605	; 0x507d
   11318:	mov	r0, #0
   1131c:	mov	r2, #5
   11320:	movt	r1, #1
   11324:	bl	10e58 <dcgettext@plt>
   11328:	mov	r1, r0
   1132c:	movw	r0, #20373	; 0x4f95
   11330:	movw	r3, #20655	; 0x50af
   11334:	cmp	r6, r5
   11338:	mov	r2, r6
   1133c:	movt	r0, #1
   11340:	movt	r3, #1
   11344:	moveq	r3, r0
   11348:	mov	r0, #1
   1134c:	bl	10f60 <__printf_chk@plt>
   11350:	mov	r0, r8
   11354:	bl	10f18 <exit@plt>
   11358:	movw	r0, #24896	; 0x6140
   1135c:	movw	r1, #19804	; 0x4d5c
   11360:	mov	r2, #5
   11364:	movt	r0, #2
   11368:	movt	r1, #1
   1136c:	ldr	r5, [r0]
   11370:	mov	r0, #0
   11374:	bl	10e58 <dcgettext@plt>
   11378:	mov	r2, r0
   1137c:	movw	r0, #24988	; 0x619c
   11380:	mov	r1, #1
   11384:	movt	r0, #2
   11388:	ldr	r3, [r0]
   1138c:	mov	r0, r5
   11390:	bl	10f78 <__fprintf_chk@plt>
   11394:	b	11350 <__assert_fail@plt+0x330>
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	add	fp, sp, #28
   113a0:	sub	sp, sp, #20
   113a4:	mov	r5, r0
   113a8:	ldr	r0, [r1]
   113ac:	mov	r4, r1
   113b0:	bl	123cc <__assert_fail@plt+0x13ac>
   113b4:	movw	r1, #20655	; 0x50af
   113b8:	mov	r0, #6
   113bc:	movt	r1, #1
   113c0:	bl	10f9c <setlocale@plt>
   113c4:	movw	r6, #20188	; 0x4edc
   113c8:	movw	r1, #20160	; 0x4ec0
   113cc:	movt	r6, #1
   113d0:	movt	r1, #1
   113d4:	mov	r0, r6
   113d8:	bl	10fd8 <bindtextdomain@plt>
   113dc:	mov	r0, r6
   113e0:	bl	10e70 <textdomain@plt>
   113e4:	movw	r0, #8416	; 0x20e0
   113e8:	movt	r0, #1
   113ec:	bl	14d38 <__assert_fail@plt+0x3d18>
   113f0:	movw	r1, #24920	; 0x6158
   113f4:	movw	r9, #20720	; 0x50f0
   113f8:	movw	r7, #20756	; 0x5114
   113fc:	movw	sl, #24912	; 0x6150
   11400:	mov	r0, #1
   11404:	mov	r6, #0
   11408:	add	r8, sp, #13
   1140c:	movt	r1, #2
   11410:	movt	r9, #1
   11414:	movt	r7, #1
   11418:	movt	sl, #2
   1141c:	strb	r0, [r1]
   11420:	mov	r0, r5
   11424:	mov	r1, r4
   11428:	mov	r2, r9
   1142c:	mov	r3, r7
   11430:	str	r6, [sp]
   11434:	bl	10f00 <getopt_long@plt>
   11438:	sub	r1, r0, #48	; 0x30
   1143c:	cmp	r1, #10
   11440:	bcs	11464 <__assert_fail@plt+0x444>
   11444:	ldr	r1, [sl]
   11448:	cmp	r1, #0
   1144c:	subne	r0, r1, #1
   11450:	strbeq	r6, [sp, #14]
   11454:	strbeq	r0, [sp, #13]
   11458:	moveq	r0, r8
   1145c:	bl	117f4 <__assert_fail@plt+0x7d4>
   11460:	b	11420 <__assert_fail@plt+0x400>
   11464:	cmp	r0, #104	; 0x68
   11468:	ble	11498 <__assert_fail@plt+0x478>
   1146c:	cmp	r0, #116	; 0x74
   11470:	beq	1148c <__assert_fail@plt+0x46c>
   11474:	cmp	r0, #105	; 0x69
   11478:	bne	116d4 <__assert_fail@plt+0x6b4>
   1147c:	movw	r0, #24920	; 0x6158
   11480:	movt	r0, #2
   11484:	strb	r6, [r0]
   11488:	b	11420 <__assert_fail@plt+0x400>
   1148c:	ldr	r0, [sl]
   11490:	bl	117f4 <__assert_fail@plt+0x7d4>
   11494:	b	11420 <__assert_fail@plt+0x400>
   11498:	cmn	r0, #1
   1149c:	bne	11674 <__assert_fail@plt+0x654>
   114a0:	bl	11be0 <__assert_fail@plt+0xbc0>
   114a4:	movw	r0, #24888	; 0x6138
   114a8:	movt	r0, #2
   114ac:	ldr	r1, [r0]
   114b0:	mov	r0, #0
   114b4:	cmp	r1, r5
   114b8:	addlt	r0, r4, r1, lsl #2
   114bc:	bl	11e14 <__assert_fail@plt+0xdf4>
   114c0:	mov	r0, #0
   114c4:	bl	11e44 <__assert_fail@plt+0xe24>
   114c8:	movw	sl, #24920	; 0x6158
   114cc:	cmp	r0, #0
   114d0:	movt	sl, #2
   114d4:	beq	11630 <__assert_fail@plt+0x610>
   114d8:	mov	r4, r0
   114dc:	add	r9, sp, #15
   114e0:	mov	r7, #0
   114e4:	mov	r8, #1
   114e8:	mov	r5, #0
   114ec:	str	r7, [sp, #16]
   114f0:	mov	r0, r4
   114f4:	bl	10e4c <getc_unlocked@plt>
   114f8:	mov	r6, r0
   114fc:	cmn	r0, #1
   11500:	bgt	1151c <__assert_fail@plt+0x4fc>
   11504:	mov	r0, r4
   11508:	bl	11e44 <__assert_fail@plt+0xe24>
   1150c:	mov	r4, r0
   11510:	cmp	r0, #0
   11514:	bne	114f0 <__assert_fail@plt+0x4d0>
   11518:	mov	r4, #0
   1151c:	tst	r8, #1
   11520:	beq	11594 <__assert_fail@plt+0x574>
   11524:	cmp	r6, #8
   11528:	beq	1159c <__assert_fail@plt+0x57c>
   1152c:	cmp	r6, #9
   11530:	bne	115cc <__assert_fail@plt+0x5ac>
   11534:	mov	r0, r7
   11538:	mov	r1, r5
   1153c:	add	r2, sp, #16
   11540:	mov	r3, r9
   11544:	bl	11d10 <__assert_fail@plt+0xcf0>
   11548:	ldrb	r2, [sp, #15]
   1154c:	adds	r8, r7, #1
   11550:	adc	r6, r5, #0
   11554:	cmp	r2, #0
   11558:	moveq	r8, r0
   1155c:	moveq	r6, r1
   11560:	subs	r0, r8, r7
   11564:	sbcs	r0, r6, r5
   11568:	bcc	116dc <__assert_fail@plt+0x6bc>
   1156c:	adds	r7, r7, #1
   11570:	adc	r5, r5, #0
   11574:	subs	r0, r7, r8
   11578:	sbcs	r0, r5, r6
   1157c:	bcs	115e8 <__assert_fail@plt+0x5c8>
   11580:	mov	r0, #32
   11584:	bl	11008 <putchar_unlocked@plt>
   11588:	cmn	r0, #1
   1158c:	bgt	1156c <__assert_fail@plt+0x54c>
   11590:	b	11648 <__assert_fail@plt+0x628>
   11594:	mov	r8, #0
   11598:	b	1160c <__assert_fail@plt+0x5ec>
   1159c:	ldr	r0, [sp, #16]
   115a0:	mov	r6, #8
   115a4:	cmp	r0, #0
   115a8:	subne	r0, r0, #1
   115ac:	subs	r1, r7, #1
   115b0:	str	r0, [sp, #16]
   115b4:	orr	r0, r7, r5
   115b8:	sbc	r2, r5, #0
   115bc:	cmp	r0, #0
   115c0:	movne	r5, r2
   115c4:	movne	r7, r1
   115c8:	b	115ec <__assert_fail@plt+0x5cc>
   115cc:	adds	r7, r7, #1
   115d0:	mov	r0, #0
   115d4:	adcs	r5, r5, #0
   115d8:	adc	r0, r0, #0
   115dc:	cmp	r0, #1
   115e0:	bne	115ec <__assert_fail@plt+0x5cc>
   115e4:	b	116dc <__assert_fail@plt+0x6bc>
   115e8:	mov	r6, #32
   115ec:	ldrb	r0, [sl]
   115f0:	mov	r8, #1
   115f4:	cmp	r0, #0
   115f8:	bne	1160c <__assert_fail@plt+0x5ec>
   115fc:	bl	10f0c <__ctype_b_loc@plt>
   11600:	ldr	r0, [r0]
   11604:	ldrb	r0, [r0, r6, lsl #1]
   11608:	and	r8, r0, #1
   1160c:	cmp	r6, #0
   11610:	bmi	11630 <__assert_fail@plt+0x610>
   11614:	mov	r0, r6
   11618:	bl	11008 <putchar_unlocked@plt>
   1161c:	cmn	r0, #1
   11620:	ble	11648 <__assert_fail@plt+0x628>
   11624:	cmp	r6, #10
   11628:	bne	114f0 <__assert_fail@plt+0x4d0>
   1162c:	b	114e0 <__assert_fail@plt+0x4c0>
   11630:	bl	12024 <__assert_fail@plt+0x1004>
   11634:	movw	r0, #24924	; 0x615c
   11638:	movt	r0, #2
   1163c:	ldr	r0, [r0]
   11640:	sub	sp, fp, #28
   11644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11648:	bl	10f3c <__errno_location@plt>
   1164c:	movw	r1, #20705	; 0x50e1
   11650:	ldr	r4, [r0]
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #1
   11660:	bl	10e58 <dcgettext@plt>
   11664:	mov	r2, r0
   11668:	mov	r0, #1
   1166c:	mov	r1, r4
   11670:	bl	10ec4 <error@plt>
   11674:	cmn	r0, #3
   11678:	beq	1168c <__assert_fail@plt+0x66c>
   1167c:	cmn	r0, #2
   11680:	bne	116d4 <__assert_fail@plt+0x6b4>
   11684:	mov	r0, #0
   11688:	bl	1111c <__assert_fail@plt+0xfc>
   1168c:	movw	r0, #24808	; 0x60e8
   11690:	movw	r2, #20198	; 0x4ee6
   11694:	mov	r1, #0
   11698:	movt	r0, #2
   1169c:	movt	r2, #1
   116a0:	str	r1, [sp, #4]
   116a4:	movw	r1, #20153	; 0x4eb9
   116a8:	movt	r1, #1
   116ac:	ldr	r3, [r0]
   116b0:	movw	r0, #24908	; 0x614c
   116b4:	str	r2, [sp]
   116b8:	movw	r2, #20184	; 0x4ed8
   116bc:	movt	r0, #2
   116c0:	movt	r2, #1
   116c4:	ldr	r0, [r0]
   116c8:	bl	142bc <__assert_fail@plt+0x329c>
   116cc:	mov	r0, #0
   116d0:	bl	10f18 <exit@plt>
   116d4:	mov	r0, #1
   116d8:	bl	1111c <__assert_fail@plt+0xfc>
   116dc:	movw	r1, #20682	; 0x50ca
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #1
   116ec:	bl	10e58 <dcgettext@plt>
   116f0:	mov	r2, r0
   116f4:	mov	r0, #1
   116f8:	mov	r1, #0
   116fc:	bl	10ec4 <error@plt>
   11700:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11704:	add	fp, sp, #24
   11708:	movw	r8, #24928	; 0x6160
   1170c:	mov	r4, r1
   11710:	movw	r9, #24932	; 0x6164
   11714:	mov	r5, r0
   11718:	mov	r0, #0
   1171c:	movt	r8, #2
   11720:	movt	r9, #2
   11724:	ldr	r1, [r8]
   11728:	cmp	r1, #0
   1172c:	beq	11740 <__assert_fail@plt+0x720>
   11730:	ldr	r2, [r9]
   11734:	add	r2, r2, r1, lsl #3
   11738:	ldrd	r2, [r2, #-8]
   1173c:	b	11748 <__assert_fail@plt+0x728>
   11740:	mov	r2, #0
   11744:	mov	r3, #0
   11748:	subs	r7, r5, r2
   1174c:	sbcs	r6, r4, r3
   11750:	adc	r0, r0, #0
   11754:	rsbs	r0, r0, #1
   11758:	movw	r0, #24936	; 0x6168
   1175c:	movt	r0, #2
   11760:	movwne	r6, #0
   11764:	movwne	r7, #0
   11768:	ldr	r0, [r0]
   1176c:	cmp	r1, r0
   11770:	bne	11794 <__assert_fail@plt+0x774>
   11774:	ldr	r0, [r9]
   11778:	movw	r1, #24936	; 0x6168
   1177c:	mov	r2, #8
   11780:	movt	r1, #2
   11784:	bl	144d0 <__assert_fail@plt+0x34b0>
   11788:	ldr	r1, [r8]
   1178c:	str	r0, [r9]
   11790:	b	11798 <__assert_fail@plt+0x778>
   11794:	ldr	r0, [r9]
   11798:	add	r2, r1, #1
   1179c:	str	r2, [r8]
   117a0:	str	r5, [r0, r1, lsl #3]!
   117a4:	str	r4, [r0, #4]
   117a8:	movw	r0, #25296	; 0x62d0
   117ac:	movt	r0, #2
   117b0:	ldr	r1, [r0]
   117b4:	subs	r1, r1, r7
   117b8:	rscs	r1, r6, #0
   117bc:	bcs	117cc <__assert_fail@plt+0x7ac>
   117c0:	cmp	r6, #0
   117c4:	bne	117d0 <__assert_fail@plt+0x7b0>
   117c8:	str	r7, [r0]
   117cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   117d0:	movw	r1, #20896	; 0x51a0
   117d4:	mov	r0, #0
   117d8:	mov	r2, #5
   117dc:	movt	r1, #1
   117e0:	bl	10e58 <dcgettext@plt>
   117e4:	mov	r2, r0
   117e8:	mov	r0, #1
   117ec:	mov	r1, #0
   117f0:	bl	10ec4 <error@plt>
   117f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117f8:	add	fp, sp, #28
   117fc:	sub	sp, sp, #12
   11800:	mov	r8, r0
   11804:	mov	r0, #0
   11808:	mov	r7, #0
   1180c:	mov	sl, #1
   11810:	mov	r9, #0
   11814:	mov	r5, #0
   11818:	mov	r4, #0
   1181c:	str	r0, [sp, #8]
   11820:	mov	r0, #0
   11824:	str	r0, [sp, #4]
   11828:	ldrb	r6, [r8]
   1182c:	cmp	r6, #44	; 0x2c
   11830:	beq	118a8 <__assert_fail@plt+0x888>
   11834:	cmp	r6, #0
   11838:	beq	11a7c <__assert_fail@plt+0xa5c>
   1183c:	bl	10f0c <__ctype_b_loc@plt>
   11840:	ldr	r0, [r0]
   11844:	ldrb	r0, [r0, r6, lsl #1]
   11848:	tst	r0, #1
   1184c:	bne	118a8 <__assert_fail@plt+0x888>
   11850:	cmp	r6, #43	; 0x2b
   11854:	beq	11908 <__assert_fail@plt+0x8e8>
   11858:	cmp	r6, #47	; 0x2f
   1185c:	bne	11968 <__assert_fail@plt+0x948>
   11860:	mov	r5, #0
   11864:	tst	r4, #1
   11868:	beq	11a60 <__assert_fail@plt+0xa40>
   1186c:	movw	r1, #20919	; 0x51b7
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	movt	r1, #1
   1187c:	bl	10e58 <dcgettext@plt>
   11880:	mov	r9, r0
   11884:	mov	r0, r8
   11888:	bl	13db8 <__assert_fail@plt+0x2d98>
   1188c:	mov	r3, r0
   11890:	mov	r0, #0
   11894:	mov	r1, #0
   11898:	mov	r2, r9
   1189c:	bl	10ec4 <error@plt>
   118a0:	mov	r9, #1
   118a4:	b	11954 <__assert_fail@plt+0x934>
   118a8:	tst	r4, #1
   118ac:	beq	11a64 <__assert_fail@plt+0xa44>
   118b0:	mov	r0, r7
   118b4:	tst	r9, #1
   118b8:	beq	118d8 <__assert_fail@plt+0x8b8>
   118bc:	ldr	r1, [sp, #8]
   118c0:	bl	11b18 <__assert_fail@plt+0xaf8>
   118c4:	mov	r9, #1
   118c8:	cmp	r0, #0
   118cc:	mov	r4, #0
   118d0:	bne	11a68 <__assert_fail@plt+0xa48>
   118d4:	b	11b10 <__assert_fail@plt+0xaf0>
   118d8:	tst	r5, #1
   118dc:	beq	118f4 <__assert_fail@plt+0x8d4>
   118e0:	ldr	r1, [sp, #8]
   118e4:	bl	11b7c <__assert_fail@plt+0xb5c>
   118e8:	cmp	r0, #0
   118ec:	bne	1195c <__assert_fail@plt+0x93c>
   118f0:	b	11b10 <__assert_fail@plt+0xaf0>
   118f4:	ldr	r1, [sp, #8]
   118f8:	bl	11700 <__assert_fail@plt+0x6e0>
   118fc:	mov	r9, #0
   11900:	mov	r5, #0
   11904:	b	11a64 <__assert_fail@plt+0xa44>
   11908:	tst	r4, #1
   1190c:	beq	1195c <__assert_fail@plt+0x93c>
   11910:	movw	r1, #20960	; 0x51e0
   11914:	mov	r0, #0
   11918:	mov	r2, #5
   1191c:	mov	r9, #0
   11920:	movt	r1, #1
   11924:	bl	10e58 <dcgettext@plt>
   11928:	mov	r4, r7
   1192c:	mov	r7, r0
   11930:	mov	r0, r8
   11934:	bl	13db8 <__assert_fail@plt+0x2d98>
   11938:	mov	r3, r0
   1193c:	mov	r2, r7
   11940:	mov	r0, #0
   11944:	mov	r1, #0
   11948:	mov	r7, r4
   1194c:	bl	10ec4 <error@plt>
   11950:	mov	r5, #1
   11954:	mov	sl, #0
   11958:	b	11a58 <__assert_fail@plt+0xa38>
   1195c:	mov	r5, #1
   11960:	mov	r9, #0
   11964:	b	11a64 <__assert_fail@plt+0xa44>
   11968:	sub	r0, r6, #48	; 0x30
   1196c:	cmp	r0, #9
   11970:	bhi	11adc <__assert_fail@plt+0xabc>
   11974:	ands	r1, r4, #1
   11978:	ldr	r2, [sp, #4]
   1197c:	moveq	r2, r8
   11980:	str	r2, [sp, #4]
   11984:	mov	r2, r1
   11988:	movne	r1, r7
   1198c:	ldr	r3, [sp, #8]
   11990:	movne	r2, r3
   11994:	movw	r3, #39321	; 0x9999
   11998:	movt	r3, #39321	; 0x9999
   1199c:	subs	r3, r3, r1
   119a0:	movw	r3, #39321	; 0x9999
   119a4:	movt	r3, #6553	; 0x1999
   119a8:	sbcs	r3, r3, r2
   119ac:	bcc	119e0 <__assert_fail@plt+0x9c0>
   119b0:	mov	r3, #10
   119b4:	add	r6, r2, r2, lsl #2
   119b8:	mov	r4, #1
   119bc:	str	r2, [sp, #8]
   119c0:	umull	r3, r7, r1, r3
   119c4:	add	r7, r7, r6, lsl #1
   119c8:	adds	r3, r3, r0
   119cc:	adc	r0, r7, r0, asr #31
   119d0:	subs	r7, r3, r1
   119d4:	sbcs	r7, r0, r2
   119d8:	mov	r7, r1
   119dc:	bcs	11a70 <__assert_fail@plt+0xa50>
   119e0:	ldr	sl, [sp, #4]
   119e4:	movw	r1, #21001	; 0x5209
   119e8:	movt	r1, #1
   119ec:	mov	r0, sl
   119f0:	bl	11014 <strspn@plt>
   119f4:	mov	r8, r7
   119f8:	mov	r7, r0
   119fc:	mov	r0, sl
   11a00:	mov	r1, r7
   11a04:	bl	1477c <__assert_fail@plt+0x375c>
   11a08:	movw	r1, #21012	; 0x5214
   11a0c:	mov	r6, r0
   11a10:	mov	r0, #0
   11a14:	mov	r2, #5
   11a18:	movt	r1, #1
   11a1c:	bl	10e58 <dcgettext@plt>
   11a20:	mov	r4, r0
   11a24:	mov	r0, r6
   11a28:	bl	13db8 <__assert_fail@plt+0x2d98>
   11a2c:	mov	r3, r0
   11a30:	mov	r0, #0
   11a34:	mov	r1, #0
   11a38:	mov	r2, r4
   11a3c:	bl	10ec4 <error@plt>
   11a40:	mov	r0, r6
   11a44:	bl	12300 <__assert_fail@plt+0x12e0>
   11a48:	add	r0, sl, r7
   11a4c:	mov	r7, r8
   11a50:	mov	sl, #0
   11a54:	sub	r8, r0, #1
   11a58:	mov	r4, #1
   11a5c:	b	11a68 <__assert_fail@plt+0xa48>
   11a60:	mov	r9, #1
   11a64:	mov	r4, #0
   11a68:	add	r8, r8, #1
   11a6c:	b	11828 <__assert_fail@plt+0x808>
   11a70:	mov	r7, r3
   11a74:	str	r0, [sp, #8]
   11a78:	b	11a68 <__assert_fail@plt+0xa48>
   11a7c:	and	r0, sl, r4
   11a80:	tst	r0, #1
   11a84:	beq	11aa0 <__assert_fail@plt+0xa80>
   11a88:	mov	r0, r7
   11a8c:	tst	r9, #1
   11a90:	beq	11aac <__assert_fail@plt+0xa8c>
   11a94:	ldr	r1, [sp, #8]
   11a98:	bl	11b18 <__assert_fail@plt+0xaf8>
   11a9c:	b	11abc <__assert_fail@plt+0xa9c>
   11aa0:	tst	sl, #1
   11aa4:	bne	11ac4 <__assert_fail@plt+0xaa4>
   11aa8:	b	11b10 <__assert_fail@plt+0xaf0>
   11aac:	tst	r5, #1
   11ab0:	beq	11acc <__assert_fail@plt+0xaac>
   11ab4:	ldr	r1, [sp, #8]
   11ab8:	bl	11b7c <__assert_fail@plt+0xb5c>
   11abc:	cmp	r0, #0
   11ac0:	beq	11b10 <__assert_fail@plt+0xaf0>
   11ac4:	sub	sp, fp, #28
   11ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11acc:	ldr	r1, [sp, #8]
   11ad0:	sub	sp, fp, #28
   11ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	b	11700 <__assert_fail@plt+0x6e0>
   11adc:	movw	r1, #21037	; 0x522d
   11ae0:	mov	r0, #0
   11ae4:	mov	r2, #5
   11ae8:	movt	r1, #1
   11aec:	bl	10e58 <dcgettext@plt>
   11af0:	mov	r4, r0
   11af4:	mov	r0, r8
   11af8:	bl	13db8 <__assert_fail@plt+0x2d98>
   11afc:	mov	r3, r0
   11b00:	mov	r0, #0
   11b04:	mov	r1, #0
   11b08:	mov	r2, r4
   11b0c:	bl	10ec4 <error@plt>
   11b10:	mov	r0, #1
   11b14:	bl	10f18 <exit@plt>
   11b18:	push	{r4, r5, r6, r7, fp, lr}
   11b1c:	add	fp, sp, #16
   11b20:	movw	r7, #24944	; 0x6170
   11b24:	mov	r5, r1
   11b28:	mov	r6, r0
   11b2c:	movt	r7, #2
   11b30:	ldrd	r0, [r7]
   11b34:	orrs	r0, r0, r1
   11b38:	beq	11b68 <__assert_fail@plt+0xb48>
   11b3c:	movw	r1, #21562	; 0x543a
   11b40:	mov	r0, #0
   11b44:	mov	r2, #5
   11b48:	mov	r4, #0
   11b4c:	movt	r1, #1
   11b50:	bl	10e58 <dcgettext@plt>
   11b54:	mov	r2, r0
   11b58:	mov	r0, #0
   11b5c:	mov	r1, #0
   11b60:	bl	10ec4 <error@plt>
   11b64:	b	11b6c <__assert_fail@plt+0xb4c>
   11b68:	mov	r4, #1
   11b6c:	mov	r0, r4
   11b70:	str	r6, [r7]
   11b74:	str	r5, [r7, #4]
   11b78:	pop	{r4, r5, r6, r7, fp, pc}
   11b7c:	push	{r4, r5, r6, r7, fp, lr}
   11b80:	add	fp, sp, #16
   11b84:	movw	r7, #24952	; 0x6178
   11b88:	mov	r5, r1
   11b8c:	mov	r6, r0
   11b90:	movt	r7, #2
   11b94:	ldrd	r0, [r7]
   11b98:	orrs	r0, r0, r1
   11b9c:	beq	11bcc <__assert_fail@plt+0xbac>
   11ba0:	movw	r1, #21609	; 0x5469
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	mov	r4, #0
   11bb0:	movt	r1, #1
   11bb4:	bl	10e58 <dcgettext@plt>
   11bb8:	mov	r2, r0
   11bbc:	mov	r0, #0
   11bc0:	mov	r1, #0
   11bc4:	bl	10ec4 <error@plt>
   11bc8:	b	11bd0 <__assert_fail@plt+0xbb0>
   11bcc:	mov	r4, #1
   11bd0:	mov	r0, r4
   11bd4:	str	r6, [r7]
   11bd8:	str	r5, [r7, #4]
   11bdc:	pop	{r4, r5, r6, r7, fp, pc}
   11be0:	push	{r4, r5, r6, r7, fp, lr}
   11be4:	add	fp, sp, #16
   11be8:	movw	r0, #24928	; 0x6160
   11bec:	movt	r0, #2
   11bf0:	ldr	r1, [r0]
   11bf4:	movw	r0, #24932	; 0x6164
   11bf8:	movt	r0, #2
   11bfc:	ldr	ip, [r0]
   11c00:	cmp	r1, #0
   11c04:	beq	11c44 <__assert_fail@plt+0xc24>
   11c08:	mov	r6, #0
   11c0c:	mov	r2, ip
   11c10:	mov	r3, r1
   11c14:	mov	r5, #0
   11c18:	ldm	r2, {r4, r7}
   11c1c:	orrs	r0, r4, r7
   11c20:	beq	11cd4 <__assert_fail@plt+0xcb4>
   11c24:	subs	r0, r6, r4
   11c28:	sbcs	r0, r5, r7
   11c2c:	bcs	11ce0 <__assert_fail@plt+0xcc0>
   11c30:	add	r2, r2, #8
   11c34:	subs	r3, r3, #1
   11c38:	mov	r6, r4
   11c3c:	mov	r5, r7
   11c40:	bne	11c18 <__assert_fail@plt+0xbf8>
   11c44:	movw	r2, #24944	; 0x6170
   11c48:	movt	r2, #2
   11c4c:	ldrd	r4, [r2]
   11c50:	movw	r2, #24952	; 0x6178
   11c54:	movt	r2, #2
   11c58:	ldrd	r2, [r2]
   11c5c:	orrs	r7, r2, r3
   11c60:	orrsne	r6, r4, r5
   11c64:	bne	11d04 <__assert_fail@plt+0xce4>
   11c68:	cmp	r1, #0
   11c6c:	beq	11c94 <__assert_fail@plt+0xc74>
   11c70:	mov	r6, #0
   11c74:	cmp	r1, #1
   11c78:	bne	11cc0 <__assert_fail@plt+0xca0>
   11c7c:	orr	r0, r4, r2
   11c80:	orr	r1, r5, r3
   11c84:	mov	r7, #0
   11c88:	orrs	r0, r0, r1
   11c8c:	ldrdeq	r6, [ip]
   11c90:	b	11cc4 <__assert_fail@plt+0xca4>
   11c94:	cmp	r7, #0
   11c98:	orr	r0, r4, r5
   11c9c:	mov	r7, #0
   11ca0:	movweq	r2, #8
   11ca4:	cmp	r0, #0
   11ca8:	movw	r0, #25296	; 0x62d0
   11cac:	movt	r0, #2
   11cb0:	movne	r2, r4
   11cb4:	mov	r6, r2
   11cb8:	str	r2, [r0]
   11cbc:	b	11cc4 <__assert_fail@plt+0xca4>
   11cc0:	mov	r7, #0
   11cc4:	movw	r0, #24960	; 0x6180
   11cc8:	movt	r0, #2
   11ccc:	strd	r6, [r0]
   11cd0:	pop	{r4, r5, r6, r7, fp, pc}
   11cd4:	movw	r1, #21656	; 0x5498
   11cd8:	movt	r1, #1
   11cdc:	b	11ce8 <__assert_fail@plt+0xcc8>
   11ce0:	movw	r1, #21677	; 0x54ad
   11ce4:	movt	r1, #1
   11ce8:	mov	r0, #0
   11cec:	mov	r2, #5
   11cf0:	bl	10e58 <dcgettext@plt>
   11cf4:	mov	r2, r0
   11cf8:	mov	r0, #1
   11cfc:	mov	r1, #0
   11d00:	bl	10ec4 <error@plt>
   11d04:	movw	r1, #21705	; 0x54c9
   11d08:	movt	r1, #1
   11d0c:	b	11ce8 <__assert_fail@plt+0xcc8>
   11d10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d14:	add	fp, sp, #24
   11d18:	mov	r9, r0
   11d1c:	mov	r0, #0
   11d20:	mov	r8, r1
   11d24:	strb	r0, [r3]
   11d28:	movw	r0, #24960	; 0x6180
   11d2c:	movt	r0, #2
   11d30:	ldrd	r6, [r0]
   11d34:	orrs	r0, r6, r7
   11d38:	bne	11d9c <__assert_fail@plt+0xd7c>
   11d3c:	movw	r0, #24928	; 0x6160
   11d40:	ldr	r1, [r2]
   11d44:	movt	r0, #2
   11d48:	ldr	r0, [r0]
   11d4c:	cmp	r1, r0
   11d50:	bcs	11d88 <__assert_fail@plt+0xd68>
   11d54:	movw	r7, #24932	; 0x6164
   11d58:	movt	r7, #2
   11d5c:	ldr	r7, [r7]
   11d60:	add	r4, r7, r1, lsl #3
   11d64:	ldrd	r6, [r4]
   11d68:	subs	r5, r9, r6
   11d6c:	sbcs	r5, r8, r7
   11d70:	bcc	11dc0 <__assert_fail@plt+0xda0>
   11d74:	add	r1, r1, #1
   11d78:	add	r4, r4, #8
   11d7c:	cmp	r1, r0
   11d80:	str	r1, [r2]
   11d84:	bcc	11d64 <__assert_fail@plt+0xd44>
   11d88:	movw	r1, #24944	; 0x6170
   11d8c:	movt	r1, #2
   11d90:	ldrd	r6, [r1]
   11d94:	orrs	r1, r6, r7
   11d98:	beq	11dcc <__assert_fail@plt+0xdac>
   11d9c:	mov	r0, r9
   11da0:	mov	r1, r8
   11da4:	mov	r2, r6
   11da8:	mov	r3, r7
   11dac:	bl	14b60 <__assert_fail@plt+0x3b40>
   11db0:	adds	r0, r6, r9
   11db4:	adc	r1, r7, r8
   11db8:	subs	r6, r0, r2
   11dbc:	sbc	r7, r1, r3
   11dc0:	mov	r0, r6
   11dc4:	mov	r1, r7
   11dc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11dcc:	movw	r1, #24952	; 0x6178
   11dd0:	movt	r1, #2
   11dd4:	ldrd	r6, [r1]
   11dd8:	orrs	r1, r6, r7
   11ddc:	beq	11e00 <__assert_fail@plt+0xde0>
   11de0:	movw	r1, #24932	; 0x6164
   11de4:	movt	r1, #2
   11de8:	ldr	r1, [r1]
   11dec:	add	r0, r1, r0, lsl #3
   11df0:	ldrd	r0, [r0, #-8]
   11df4:	subs	r0, r9, r0
   11df8:	sbc	r1, r8, r1
   11dfc:	b	11da4 <__assert_fail@plt+0xd84>
   11e00:	mov	r0, #1
   11e04:	mov	r6, #0
   11e08:	mov	r7, #0
   11e0c:	strb	r0, [r3]
   11e10:	b	11dc0 <__assert_fail@plt+0xda0>
   11e14:	movw	r1, #24968	; 0x6188
   11e18:	mov	r2, #0
   11e1c:	cmp	r0, #0
   11e20:	movt	r1, #2
   11e24:	strb	r2, [r1]
   11e28:	movw	r1, #24800	; 0x60e0
   11e2c:	movt	r1, #2
   11e30:	movne	r1, r0
   11e34:	movw	r0, #24972	; 0x618c
   11e38:	movt	r0, #2
   11e3c:	str	r1, [r0]
   11e40:	bx	lr
   11e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e48:	add	fp, sp, #28
   11e4c:	sub	sp, sp, #4
   11e50:	cmp	r0, #0
   11e54:	beq	11f00 <__assert_fail@plt+0xee0>
   11e58:	movw	r7, #24976	; 0x6190
   11e5c:	mov	r5, r0
   11e60:	movt	r7, #2
   11e64:	ldr	r0, [r7]
   11e68:	cmp	r0, #0
   11e6c:	beq	12004 <__assert_fail@plt+0xfe4>
   11e70:	bl	10f3c <__errno_location@plt>
   11e74:	ldr	r4, [r0]
   11e78:	mov	r6, r0
   11e7c:	mov	r0, r5
   11e80:	bl	10eac <ferror_unlocked@plt>
   11e84:	cmp	r0, #0
   11e88:	movw	r1, #21838	; 0x554e
   11e8c:	moveq	r4, r0
   11e90:	ldr	r0, [r7]
   11e94:	movt	r1, #1
   11e98:	bl	10df8 <strcmp@plt>
   11e9c:	cmp	r0, #0
   11ea0:	beq	11eb8 <__assert_fail@plt+0xe98>
   11ea4:	mov	r0, r5
   11ea8:	bl	12208 <__assert_fail@plt+0x11e8>
   11eac:	cmp	r0, #0
   11eb0:	ldrne	r4, [r6]
   11eb4:	b	11ec0 <__assert_fail@plt+0xea0>
   11eb8:	mov	r0, r5
   11ebc:	bl	10fc0 <clearerr_unlocked@plt>
   11ec0:	cmp	r4, #0
   11ec4:	beq	11f00 <__assert_fail@plt+0xee0>
   11ec8:	ldr	r2, [r7]
   11ecc:	mov	r0, #0
   11ed0:	mov	r1, #3
   11ed4:	bl	13c24 <__assert_fail@plt+0x2c04>
   11ed8:	movw	r2, #21077	; 0x5255
   11edc:	mov	r3, r0
   11ee0:	mov	r0, #0
   11ee4:	mov	r1, r4
   11ee8:	movt	r2, #1
   11eec:	bl	10ec4 <error@plt>
   11ef0:	movw	r1, #24924	; 0x615c
   11ef4:	mov	r0, #1
   11ef8:	movt	r1, #2
   11efc:	str	r0, [r1]
   11f00:	movw	sl, #24972	; 0x618c
   11f04:	movt	sl, #2
   11f08:	ldr	r0, [sl]
   11f0c:	add	r1, r0, #4
   11f10:	str	r1, [sl]
   11f14:	ldr	r7, [r0]
   11f18:	cmp	r7, #0
   11f1c:	beq	11fd8 <__assert_fail@plt+0xfb8>
   11f20:	movw	r9, #21838	; 0x554e
   11f24:	movw	r5, #21077	; 0x5255
   11f28:	mov	r8, #1
   11f2c:	movt	r9, #1
   11f30:	movt	r5, #1
   11f34:	mov	r0, r7
   11f38:	mov	r1, r9
   11f3c:	bl	10df8 <strcmp@plt>
   11f40:	cmp	r0, #0
   11f44:	beq	11f60 <__assert_fail@plt+0xf40>
   11f48:	movw	r1, #20715	; 0x50eb
   11f4c:	mov	r0, r7
   11f50:	movt	r1, #1
   11f54:	bl	10fcc <fopen64@plt>
   11f58:	mov	r6, r0
   11f5c:	b	11f78 <__assert_fail@plt+0xf58>
   11f60:	movw	r0, #24968	; 0x6188
   11f64:	movt	r0, #2
   11f68:	strb	r8, [r0]
   11f6c:	movw	r0, #24904	; 0x6148
   11f70:	movt	r0, #2
   11f74:	ldr	r6, [r0]
   11f78:	cmp	r6, #0
   11f7c:	bne	11fe0 <__assert_fail@plt+0xfc0>
   11f80:	bl	10f3c <__errno_location@plt>
   11f84:	ldr	r4, [r0]
   11f88:	mov	r0, #0
   11f8c:	mov	r1, #3
   11f90:	mov	r2, r7
   11f94:	mov	r6, #0
   11f98:	bl	13c24 <__assert_fail@plt+0x2c04>
   11f9c:	mov	r3, r0
   11fa0:	mov	r0, #0
   11fa4:	mov	r1, r4
   11fa8:	mov	r2, r5
   11fac:	bl	10ec4 <error@plt>
   11fb0:	movw	r0, #24924	; 0x615c
   11fb4:	movt	r0, #2
   11fb8:	str	r8, [r0]
   11fbc:	ldr	r0, [sl]
   11fc0:	add	r1, r0, #4
   11fc4:	str	r1, [sl]
   11fc8:	ldr	r7, [r0]
   11fcc:	cmp	r7, #0
   11fd0:	bne	11f34 <__assert_fail@plt+0xf14>
   11fd4:	b	11ff8 <__assert_fail@plt+0xfd8>
   11fd8:	mov	r6, #0
   11fdc:	b	11ff8 <__assert_fail@plt+0xfd8>
   11fe0:	movw	r0, #24976	; 0x6190
   11fe4:	mov	r1, #2
   11fe8:	movt	r0, #2
   11fec:	str	r7, [r0]
   11ff0:	mov	r0, r6
   11ff4:	bl	121cc <__assert_fail@plt+0x11ac>
   11ff8:	mov	r0, r6
   11ffc:	sub	sp, fp, #28
   12000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12004:	movw	r0, #21080	; 0x5258
   12008:	movw	r1, #21090	; 0x5262
   1200c:	movw	r3, #21110	; 0x5276
   12010:	mov	r2, #340	; 0x154
   12014:	movt	r0, #1
   12018:	movt	r1, #1
   1201c:	movt	r3, #1
   12020:	bl	11020 <__assert_fail@plt>
   12024:	push	{fp, lr}
   12028:	mov	fp, sp
   1202c:	movw	r0, #24968	; 0x6188
   12030:	movt	r0, #2
   12034:	ldrb	r0, [r0]
   12038:	cmp	r0, #1
   1203c:	popne	{fp, pc}
   12040:	movw	r0, #24904	; 0x6148
   12044:	movt	r0, #2
   12048:	ldr	r0, [r0]
   1204c:	bl	12208 <__assert_fail@plt+0x11e8>
   12050:	cmp	r0, #0
   12054:	bne	1205c <__assert_fail@plt+0x103c>
   12058:	pop	{fp, pc}
   1205c:	bl	10f3c <__errno_location@plt>
   12060:	ldr	r1, [r0]
   12064:	movw	r2, #21838	; 0x554e
   12068:	mov	r0, #1
   1206c:	movt	r2, #1
   12070:	bl	10ec4 <error@plt>
   12074:	push	{r4, sl, fp, lr}
   12078:	add	fp, sp, #8
   1207c:	movw	r1, #21134	; 0x528e
   12080:	mov	r0, #0
   12084:	mov	r2, #5
   12088:	movt	r1, #1
   1208c:	bl	10e58 <dcgettext@plt>
   12090:	movw	r4, #24908	; 0x614c
   12094:	movt	r4, #2
   12098:	ldr	r1, [r4]
   1209c:	bl	10de0 <fputs_unlocked@plt>
   120a0:	movw	r1, #21197	; 0x52cd
   120a4:	mov	r0, #0
   120a8:	mov	r2, #5
   120ac:	movt	r1, #1
   120b0:	bl	10e58 <dcgettext@plt>
   120b4:	ldr	r1, [r4]
   120b8:	pop	{r4, sl, fp, lr}
   120bc:	b	10de0 <fputs_unlocked@plt>
   120c0:	movw	r1, #24980	; 0x6194
   120c4:	movt	r1, #2
   120c8:	str	r0, [r1]
   120cc:	bx	lr
   120d0:	movw	r1, #24984	; 0x6198
   120d4:	movt	r1, #2
   120d8:	strb	r0, [r1]
   120dc:	bx	lr
   120e0:	push	{r4, r5, r6, sl, fp, lr}
   120e4:	add	fp, sp, #16
   120e8:	sub	sp, sp, #8
   120ec:	movw	r0, #24908	; 0x614c
   120f0:	movt	r0, #2
   120f4:	ldr	r0, [r0]
   120f8:	bl	14908 <__assert_fail@plt+0x38e8>
   120fc:	cmp	r0, #0
   12100:	beq	12128 <__assert_fail@plt+0x1108>
   12104:	movw	r0, #24984	; 0x6198
   12108:	movt	r0, #2
   1210c:	ldrb	r0, [r0]
   12110:	cmp	r0, #0
   12114:	beq	12148 <__assert_fail@plt+0x1128>
   12118:	bl	10f3c <__errno_location@plt>
   1211c:	ldr	r0, [r0]
   12120:	cmp	r0, #32
   12124:	bne	12148 <__assert_fail@plt+0x1128>
   12128:	movw	r0, #24896	; 0x6140
   1212c:	movt	r0, #2
   12130:	ldr	r0, [r0]
   12134:	bl	14908 <__assert_fail@plt+0x38e8>
   12138:	cmp	r0, #0
   1213c:	subeq	sp, fp, #16
   12140:	popeq	{r4, r5, r6, sl, fp, pc}
   12144:	b	121b8 <__assert_fail@plt+0x1198>
   12148:	movw	r1, #20705	; 0x50e1
   1214c:	mov	r0, #0
   12150:	mov	r2, #5
   12154:	movt	r1, #1
   12158:	bl	10e58 <dcgettext@plt>
   1215c:	mov	r4, r0
   12160:	movw	r0, #24980	; 0x6194
   12164:	movt	r0, #2
   12168:	ldr	r6, [r0]
   1216c:	bl	10f3c <__errno_location@plt>
   12170:	ldr	r5, [r0]
   12174:	cmp	r6, #0
   12178:	bne	12194 <__assert_fail@plt+0x1174>
   1217c:	movw	r2, #21077	; 0x5255
   12180:	mov	r0, #0
   12184:	mov	r1, r5
   12188:	mov	r3, r4
   1218c:	movt	r2, #1
   12190:	b	121b4 <__assert_fail@plt+0x1194>
   12194:	mov	r0, r6
   12198:	bl	13b78 <__assert_fail@plt+0x2b58>
   1219c:	movw	r2, #21765	; 0x5505
   121a0:	mov	r3, r0
   121a4:	str	r4, [sp]
   121a8:	mov	r0, #0
   121ac:	mov	r1, r5
   121b0:	movt	r2, #1
   121b4:	bl	10ec4 <error@plt>
   121b8:	movw	r0, #24812	; 0x60ec
   121bc:	movt	r0, #2
   121c0:	ldr	r0, [r0]
   121c4:	bl	10e28 <_exit@plt>
   121c8:	b	10e04 <posix_fadvise64@plt>
   121cc:	cmp	r0, #0
   121d0:	bxeq	lr
   121d4:	push	{r4, sl, fp, lr}
   121d8:	add	fp, sp, #8
   121dc:	sub	sp, sp, #16
   121e0:	mov	r4, r1
   121e4:	bl	10f6c <fileno@plt>
   121e8:	mov	r1, #0
   121ec:	mov	r2, #0
   121f0:	mov	r3, #0
   121f4:	str	r1, [sp]
   121f8:	stmib	sp, {r1, r4}
   121fc:	bl	10e04 <posix_fadvise64@plt>
   12200:	sub	sp, fp, #8
   12204:	pop	{r4, sl, fp, pc}
   12208:	push	{r4, r5, r6, sl, fp, lr}
   1220c:	add	fp, sp, #16
   12210:	sub	sp, sp, #8
   12214:	mov	r4, r0
   12218:	bl	10f6c <fileno@plt>
   1221c:	cmn	r0, #1
   12220:	ble	12294 <__assert_fail@plt+0x1274>
   12224:	mov	r0, r4
   12228:	bl	10ee8 <__freading@plt>
   1222c:	cmp	r0, #0
   12230:	beq	1225c <__assert_fail@plt+0x123c>
   12234:	mov	r0, r4
   12238:	bl	10f6c <fileno@plt>
   1223c:	mov	r1, #1
   12240:	mov	r2, #0
   12244:	mov	r3, #0
   12248:	str	r1, [sp]
   1224c:	bl	10e88 <lseek64@plt>
   12250:	and	r0, r0, r1
   12254:	cmn	r0, #1
   12258:	beq	12294 <__assert_fail@plt+0x1274>
   1225c:	mov	r0, r4
   12260:	bl	122a4 <__assert_fail@plt+0x1284>
   12264:	cmp	r0, #0
   12268:	beq	12294 <__assert_fail@plt+0x1274>
   1226c:	bl	10f3c <__errno_location@plt>
   12270:	ldr	r6, [r0]
   12274:	mov	r5, r0
   12278:	mov	r0, r4
   1227c:	bl	10f84 <fclose@plt>
   12280:	cmp	r6, #0
   12284:	strne	r6, [r5]
   12288:	mvnne	r0, #0
   1228c:	sub	sp, fp, #16
   12290:	pop	{r4, r5, r6, sl, fp, pc}
   12294:	mov	r0, r4
   12298:	sub	sp, fp, #16
   1229c:	pop	{r4, r5, r6, sl, fp, lr}
   122a0:	b	10f84 <fclose@plt>
   122a4:	push	{r4, sl, fp, lr}
   122a8:	add	fp, sp, #8
   122ac:	sub	sp, sp, #8
   122b0:	mov	r4, r0
   122b4:	cmp	r0, #0
   122b8:	beq	122f0 <__assert_fail@plt+0x12d0>
   122bc:	mov	r0, r4
   122c0:	bl	10ee8 <__freading@plt>
   122c4:	cmp	r0, #0
   122c8:	beq	122f0 <__assert_fail@plt+0x12d0>
   122cc:	ldrb	r0, [r4, #1]
   122d0:	tst	r0, #1
   122d4:	beq	122f0 <__assert_fail@plt+0x12d0>
   122d8:	mov	r0, #1
   122dc:	mov	r2, #0
   122e0:	mov	r3, #0
   122e4:	str	r0, [sp]
   122e8:	mov	r0, r4
   122ec:	bl	12328 <__assert_fail@plt+0x1308>
   122f0:	mov	r0, r4
   122f4:	sub	sp, fp, #8
   122f8:	pop	{r4, sl, fp, lr}
   122fc:	b	10e10 <fflush@plt>
   12300:	push	{r4, r5, r6, sl, fp, lr}
   12304:	add	fp, sp, #16
   12308:	mov	r4, r0
   1230c:	bl	10f3c <__errno_location@plt>
   12310:	ldr	r6, [r0]
   12314:	mov	r5, r0
   12318:	mov	r0, r4
   1231c:	bl	10e1c <free@plt>
   12320:	str	r6, [r5]
   12324:	pop	{r4, r5, r6, sl, fp, pc}
   12328:	push	{r4, r5, r6, r7, fp, lr}
   1232c:	add	fp, sp, #16
   12330:	sub	sp, sp, #8
   12334:	mov	r4, r0
   12338:	ldr	r0, [r0, #4]
   1233c:	mov	r5, r3
   12340:	mov	r6, r2
   12344:	ldr	r1, [r4, #8]
   12348:	cmp	r1, r0
   1234c:	bne	12368 <__assert_fail@plt+0x1348>
   12350:	ldrd	r0, [r4, #16]
   12354:	cmp	r1, r0
   12358:	bne	12368 <__assert_fail@plt+0x1348>
   1235c:	ldr	r0, [r4, #36]	; 0x24
   12360:	cmp	r0, #0
   12364:	beq	12380 <__assert_fail@plt+0x1360>
   12368:	mov	r0, r4
   1236c:	mov	r2, r6
   12370:	mov	r3, r5
   12374:	sub	sp, fp, #16
   12378:	pop	{r4, r5, r6, r7, fp, lr}
   1237c:	b	10f90 <fseeko64@plt>
   12380:	ldr	r7, [fp, #8]
   12384:	mov	r0, r4
   12388:	bl	10f6c <fileno@plt>
   1238c:	mov	r2, r6
   12390:	mov	r3, r5
   12394:	str	r7, [sp]
   12398:	bl	10e88 <lseek64@plt>
   1239c:	and	r2, r0, r1
   123a0:	cmn	r2, #1
   123a4:	beq	123c0 <__assert_fail@plt+0x13a0>
   123a8:	strd	r0, [r4, #80]	; 0x50
   123ac:	ldr	r0, [r4]
   123b0:	bic	r0, r0, #16
   123b4:	str	r0, [r4]
   123b8:	mov	r0, #0
   123bc:	b	123c4 <__assert_fail@plt+0x13a4>
   123c0:	mvn	r0, #0
   123c4:	sub	sp, fp, #16
   123c8:	pop	{r4, r5, r6, r7, fp, pc}
   123cc:	push	{r4, r5, fp, lr}
   123d0:	add	fp, sp, #8
   123d4:	cmp	r0, #0
   123d8:	beq	1246c <__assert_fail@plt+0x144c>
   123dc:	mov	r1, #47	; 0x2f
   123e0:	mov	r4, r0
   123e4:	bl	10fa8 <strrchr@plt>
   123e8:	cmp	r0, #0
   123ec:	mov	r5, r4
   123f0:	addne	r5, r0, #1
   123f4:	sub	r0, r5, r4
   123f8:	cmp	r0, #7
   123fc:	blt	12450 <__assert_fail@plt+0x1430>
   12400:	movw	r1, #21828	; 0x5544
   12404:	sub	r0, r5, #7
   12408:	mov	r2, #7
   1240c:	movt	r1, #1
   12410:	bl	10ff0 <strncmp@plt>
   12414:	cmp	r0, #0
   12418:	bne	12450 <__assert_fail@plt+0x1430>
   1241c:	movw	r1, #21836	; 0x554c
   12420:	mov	r0, r5
   12424:	mov	r2, #3
   12428:	movt	r1, #1
   1242c:	bl	10ff0 <strncmp@plt>
   12430:	cmp	r0, #0
   12434:	beq	12440 <__assert_fail@plt+0x1420>
   12438:	mov	r4, r5
   1243c:	b	12450 <__assert_fail@plt+0x1430>
   12440:	movw	r0, #24880	; 0x6130
   12444:	add	r4, r5, #3
   12448:	movt	r0, #2
   1244c:	str	r4, [r0]
   12450:	movw	r0, #24884	; 0x6134
   12454:	movt	r0, #2
   12458:	str	r4, [r0]
   1245c:	movw	r0, #24988	; 0x619c
   12460:	movt	r0, #2
   12464:	str	r4, [r0]
   12468:	pop	{r4, r5, fp, pc}
   1246c:	movw	r0, #24896	; 0x6140
   12470:	movt	r0, #2
   12474:	ldr	r1, [r0]
   12478:	movw	r0, #21772	; 0x550c
   1247c:	movt	r0, #1
   12480:	bl	10fe4 <fputs@plt>
   12484:	bl	10ffc <abort@plt>
   12488:	push	{r4, r5, r6, sl, fp, lr}
   1248c:	add	fp, sp, #16
   12490:	mov	r4, r0
   12494:	movw	r0, #24992	; 0x61a0
   12498:	movt	r0, #2
   1249c:	cmp	r4, #0
   124a0:	moveq	r4, r0
   124a4:	bl	10f3c <__errno_location@plt>
   124a8:	ldr	r6, [r0]
   124ac:	mov	r5, r0
   124b0:	mov	r0, r4
   124b4:	mov	r1, #48	; 0x30
   124b8:	bl	14714 <__assert_fail@plt+0x36f4>
   124bc:	str	r6, [r5]
   124c0:	pop	{r4, r5, r6, sl, fp, pc}
   124c4:	movw	r1, #24992	; 0x61a0
   124c8:	cmp	r0, #0
   124cc:	movt	r1, #2
   124d0:	movne	r1, r0
   124d4:	ldr	r0, [r1]
   124d8:	bx	lr
   124dc:	movw	r2, #24992	; 0x61a0
   124e0:	cmp	r0, #0
   124e4:	movt	r2, #2
   124e8:	movne	r2, r0
   124ec:	str	r1, [r2]
   124f0:	bx	lr
   124f4:	movw	r3, #24992	; 0x61a0
   124f8:	cmp	r0, #0
   124fc:	and	r2, r2, #1
   12500:	movt	r3, #2
   12504:	movne	r3, r0
   12508:	ubfx	r0, r1, #5, #3
   1250c:	and	r1, r1, #31
   12510:	add	ip, r3, r0, lsl #2
   12514:	mov	r0, #1
   12518:	ldr	r3, [ip, #8]
   1251c:	and	r0, r0, r3, lsr r1
   12520:	eor	r2, r0, r2
   12524:	eor	r1, r3, r2, lsl r1
   12528:	str	r1, [ip, #8]
   1252c:	bx	lr
   12530:	movw	r2, #24992	; 0x61a0
   12534:	cmp	r0, #0
   12538:	movt	r2, #2
   1253c:	movne	r2, r0
   12540:	ldr	r0, [r2, #4]
   12544:	str	r1, [r2, #4]
   12548:	bx	lr
   1254c:	push	{fp, lr}
   12550:	mov	fp, sp
   12554:	movw	r3, #24992	; 0x61a0
   12558:	cmp	r0, #0
   1255c:	movt	r3, #2
   12560:	movne	r3, r0
   12564:	cmp	r1, #0
   12568:	mov	r0, #10
   1256c:	cmpne	r2, #0
   12570:	str	r0, [r3]
   12574:	bne	1257c <__assert_fail@plt+0x155c>
   12578:	bl	10ffc <abort@plt>
   1257c:	str	r1, [r3, #40]	; 0x28
   12580:	str	r2, [r3, #44]	; 0x2c
   12584:	pop	{fp, pc}
   12588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1258c:	add	fp, sp, #28
   12590:	sub	sp, sp, #20
   12594:	mov	r7, r0
   12598:	ldr	r0, [fp, #8]
   1259c:	movw	r5, #24992	; 0x61a0
   125a0:	mov	r8, r3
   125a4:	mov	r9, r2
   125a8:	mov	sl, r1
   125ac:	movt	r5, #2
   125b0:	cmp	r0, #0
   125b4:	movne	r5, r0
   125b8:	bl	10f3c <__errno_location@plt>
   125bc:	ldr	r2, [r5, #40]	; 0x28
   125c0:	ldr	r3, [r5, #44]	; 0x2c
   125c4:	mov	r4, r0
   125c8:	ldm	r5, {r0, r1}
   125cc:	add	r5, r5, #8
   125d0:	ldr	r6, [r4]
   125d4:	stm	sp, {r0, r1, r5}
   125d8:	mov	r0, r7
   125dc:	mov	r1, sl
   125e0:	str	r2, [sp, #12]
   125e4:	str	r3, [sp, #16]
   125e8:	mov	r2, r9
   125ec:	mov	r3, r8
   125f0:	bl	12600 <__assert_fail@plt+0x15e0>
   125f4:	str	r6, [r4]
   125f8:	sub	sp, fp, #28
   125fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12604:	add	fp, sp, #28
   12608:	sub	sp, sp, #156	; 0x9c
   1260c:	mov	r5, r0
   12610:	add	r0, r2, #1
   12614:	mov	r6, r1
   12618:	mov	sl, r3
   1261c:	str	r2, [fp, #-80]	; 0xffffffb0
   12620:	str	r0, [sp, #72]	; 0x48
   12624:	ldr	r0, [fp, #12]
   12628:	and	r1, r0, #1
   1262c:	str	r1, [sp, #32]
   12630:	and	r1, r0, #4
   12634:	str	r1, [sp, #28]
   12638:	ubfx	r9, r0, #1, #1
   1263c:	bl	10e94 <__ctype_get_mb_cur_max@plt>
   12640:	str	r0, [sp, #40]	; 0x28
   12644:	ldr	r0, [fp, #24]
   12648:	ldr	r7, [fp, #8]
   1264c:	mov	r1, #0
   12650:	mov	lr, #0
   12654:	str	r5, [fp, #-84]	; 0xffffffac
   12658:	str	r1, [sp, #60]	; 0x3c
   1265c:	mov	r1, #1
   12660:	str	r1, [fp, #-48]	; 0xffffffd0
   12664:	str	r0, [sp, #80]	; 0x50
   12668:	ldr	r0, [fp, #20]
   1266c:	str	r0, [sp, #76]	; 0x4c
   12670:	mov	r0, #0
   12674:	str	r0, [sp, #56]	; 0x38
   12678:	mov	r0, #0
   1267c:	str	r0, [fp, #-88]	; 0xffffffa8
   12680:	mov	r0, #0
   12684:	str	r0, [fp, #-72]	; 0xffffffb8
   12688:	mov	r0, #0
   1268c:	cmp	r7, #10
   12690:	bhi	1366c <__assert_fail@plt+0x264c>
   12694:	add	r1, pc, #24
   12698:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1269c:	mov	ip, r6
   126a0:	mov	r8, #0
   126a4:	mov	r2, #1
   126a8:	mov	r6, #0
   126ac:	mov	r3, sl
   126b0:	ldr	pc, [r1, r7, lsl #2]
   126b4:	andeq	r2, r1, r0, lsr #15
   126b8:	strdeq	r2, [r1], -r4
   126bc:			; <UNDEFINED> instruction: 0x000127b4
   126c0:	muleq	r1, r8, r7
   126c4:	andeq	r2, r1, r8, ror #15
   126c8:	andeq	r2, r1, ip, lsl r8
   126cc:	andeq	r2, r1, r4, asr #15
   126d0:	andeq	r2, r1, r0, lsr #17
   126d4:	andeq	r2, r1, r0, ror #13
   126d8:	andeq	r2, r1, r0, ror #13
   126dc:	andeq	r2, r1, r0, lsr #14
   126e0:	movw	r0, #21918	; 0x559e
   126e4:	mov	r1, r7
   126e8:	mov	r6, r5
   126ec:	mov	r4, ip
   126f0:	mov	r5, lr
   126f4:	movt	r0, #1
   126f8:	bl	13dd0 <__assert_fail@plt+0x2db0>
   126fc:	str	r0, [sp, #76]	; 0x4c
   12700:	movw	r0, #21748	; 0x54f4
   12704:	mov	r1, r7
   12708:	movt	r0, #1
   1270c:	bl	13dd0 <__assert_fail@plt+0x2db0>
   12710:	mov	lr, r5
   12714:	mov	r5, r6
   12718:	mov	ip, r4
   1271c:	str	r0, [sp, #80]	; 0x50
   12720:	mov	r8, #0
   12724:	tst	r9, #1
   12728:	str	lr, [sp, #44]	; 0x2c
   1272c:	bne	12764 <__assert_fail@plt+0x1744>
   12730:	ldr	r0, [sp, #76]	; 0x4c
   12734:	ldrb	r0, [r0]
   12738:	cmp	r0, #0
   1273c:	beq	12764 <__assert_fail@plt+0x1744>
   12740:	ldr	r1, [sp, #76]	; 0x4c
   12744:	mov	r8, #0
   12748:	add	r1, r1, #1
   1274c:	cmp	r8, ip
   12750:	strbcc	r0, [r5, r8]
   12754:	ldrb	r0, [r1, r8]
   12758:	add	r8, r8, #1
   1275c:	cmp	r0, #0
   12760:	bne	1274c <__assert_fail@plt+0x172c>
   12764:	ldr	r6, [sp, #80]	; 0x50
   12768:	mov	r4, ip
   1276c:	mov	r0, r6
   12770:	bl	10f30 <strlen@plt>
   12774:	mov	ip, r4
   12778:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1277c:	ldr	lr, [sp, #44]	; 0x2c
   12780:	str	r6, [fp, #-88]	; 0xffffffa8
   12784:	str	r0, [fp, #-72]	; 0xffffffb8
   12788:	mov	r2, #1
   1278c:	mov	r6, r9
   12790:	mov	r3, sl
   12794:	b	128a0 <__assert_fail@plt+0x1880>
   12798:	mov	r0, #1
   1279c:	b	127f4 <__assert_fail@plt+0x17d4>
   127a0:	mov	r7, #0
   127a4:	mov	r8, #0
   127a8:	mov	r2, r0
   127ac:	mov	r6, #0
   127b0:	b	128a0 <__assert_fail@plt+0x1880>
   127b4:	tst	r9, #1
   127b8:	bne	127f4 <__assert_fail@plt+0x17d4>
   127bc:	mov	r2, r0
   127c0:	b	1284c <__assert_fail@plt+0x182c>
   127c4:	mov	r0, #1
   127c8:	mov	r8, #0
   127cc:	mov	r7, #5
   127d0:	mov	r2, #1
   127d4:	str	r0, [fp, #-72]	; 0xffffffb8
   127d8:	movw	r0, #21916	; 0x559c
   127dc:	movt	r0, #1
   127e0:	str	r0, [fp, #-88]	; 0xffffffa8
   127e4:	b	12814 <__assert_fail@plt+0x17f4>
   127e8:	mov	r2, #1
   127ec:	tst	r9, #1
   127f0:	beq	1284c <__assert_fail@plt+0x182c>
   127f4:	mov	r1, #1
   127f8:	mov	r8, #0
   127fc:	mov	r7, #2
   12800:	mov	r2, r0
   12804:	str	r1, [fp, #-72]	; 0xffffffb8
   12808:	movw	r1, #21748	; 0x54f4
   1280c:	movt	r1, #1
   12810:	str	r1, [fp, #-88]	; 0xffffffa8
   12814:	mov	r6, #1
   12818:	b	128a0 <__assert_fail@plt+0x1880>
   1281c:	tst	r9, #1
   12820:	beq	12870 <__assert_fail@plt+0x1850>
   12824:	mov	r0, #1
   12828:	mov	r8, #0
   1282c:	mov	r2, #1
   12830:	mov	r6, #1
   12834:	mov	r7, #5
   12838:	str	r0, [fp, #-72]	; 0xffffffb8
   1283c:	movw	r0, #21916	; 0x559c
   12840:	movt	r0, #1
   12844:	str	r0, [fp, #-88]	; 0xffffffa8
   12848:	b	128a0 <__assert_fail@plt+0x1880>
   1284c:	cmp	ip, #0
   12850:	mov	r8, #1
   12854:	mov	r6, #0
   12858:	mov	r7, #2
   1285c:	movne	r0, #39	; 0x27
   12860:	strbne	r0, [r5]
   12864:	movw	r0, #21748	; 0x54f4
   12868:	movt	r0, #1
   1286c:	b	12894 <__assert_fail@plt+0x1874>
   12870:	cmp	ip, #0
   12874:	mov	r8, #1
   12878:	mov	r2, #1
   1287c:	mov	r7, #5
   12880:	mov	r6, #0
   12884:	movne	r0, #34	; 0x22
   12888:	strbne	r0, [r5]
   1288c:	movw	r0, #21916	; 0x559c
   12890:	movt	r0, #1
   12894:	str	r0, [fp, #-88]	; 0xffffffa8
   12898:	mov	r0, #1
   1289c:	str	r0, [fp, #-72]	; 0xffffffb8
   128a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128a4:	str	r7, [fp, #-68]	; 0xffffffbc
   128a8:	str	r6, [fp, #-76]	; 0xffffffb4
   128ac:	str	r2, [sp, #84]	; 0x54
   128b0:	cmp	r0, #0
   128b4:	movwne	r0, #1
   128b8:	and	r1, r0, r6
   128bc:	and	r1, r2, r1
   128c0:	str	r1, [sp, #48]	; 0x30
   128c4:	sub	r1, r7, #2
   128c8:	clz	r1, r1
   128cc:	lsr	r1, r1, #5
   128d0:	and	r1, r1, r6
   128d4:	str	r1, [sp, #64]	; 0x40
   128d8:	subs	r1, r7, #2
   128dc:	eor	r7, r6, #1
   128e0:	movwne	r1, #1
   128e4:	str	r7, [sp, #92]	; 0x5c
   128e8:	orr	r7, r1, r7
   128ec:	and	r1, r1, r2
   128f0:	and	r0, r0, r1
   128f4:	str	r7, [sp, #68]	; 0x44
   128f8:	mov	r7, #0
   128fc:	str	r0, [fp, #-60]	; 0xffffffc4
   12900:	orr	r0, r1, r6
   12904:	ldr	r1, [fp, #16]
   12908:	eor	r0, r0, #1
   1290c:	clz	r1, r1
   12910:	lsr	r1, r1, #5
   12914:	orr	r0, r1, r0
   12918:	str	r0, [fp, #-64]	; 0xffffffc0
   1291c:	eor	r0, r2, #1
   12920:	str	r0, [sp, #52]	; 0x34
   12924:	cmn	r3, #1
   12928:	beq	12938 <__assert_fail@plt+0x1918>
   1292c:	cmp	r7, r3
   12930:	bne	12944 <__assert_fail@plt+0x1924>
   12934:	b	134a0 <__assert_fail@plt+0x2480>
   12938:	ldrb	r0, [r4, r7]
   1293c:	cmp	r0, #0
   12940:	beq	134a8 <__assert_fail@plt+0x2488>
   12944:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12948:	cmp	r0, #0
   1294c:	beq	12994 <__assert_fail@plt+0x1974>
   12950:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12954:	add	r5, r7, r0
   12958:	cmp	r0, #2
   1295c:	bcc	129a8 <__assert_fail@plt+0x1988>
   12960:	mov	r0, #0
   12964:	cmn	r3, #1
   12968:	str	r0, [fp, #-56]	; 0xffffffc8
   1296c:	bne	129b0 <__assert_fail@plt+0x1990>
   12970:	mov	r0, r4
   12974:	mov	r4, ip
   12978:	mov	r6, lr
   1297c:	bl	10f30 <strlen@plt>
   12980:	mov	ip, r4
   12984:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12988:	mov	lr, r6
   1298c:	mov	r3, r0
   12990:	b	129b0 <__assert_fail@plt+0x1990>
   12994:	mov	r0, #0
   12998:	mov	sl, r3
   1299c:	str	r0, [fp, #-56]	; 0xffffffc8
   129a0:	mov	r0, #0
   129a4:	b	12a1c <__assert_fail@plt+0x19fc>
   129a8:	mov	r0, #0
   129ac:	str	r0, [fp, #-56]	; 0xffffffc8
   129b0:	cmp	r5, r3
   129b4:	bls	129c8 <__assert_fail@plt+0x19a8>
   129b8:	ldr	r5, [fp, #-84]	; 0xffffffac
   129bc:	mov	r0, #0
   129c0:	mov	sl, r3
   129c4:	b	12a1c <__assert_fail@plt+0x19fc>
   129c8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   129cc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   129d0:	add	r0, r4, r7
   129d4:	mov	r5, lr
   129d8:	mov	r6, ip
   129dc:	mov	sl, r3
   129e0:	bl	10f24 <bcmp@plt>
   129e4:	ldr	r2, [sp, #92]	; 0x5c
   129e8:	cmp	r0, #0
   129ec:	ldr	r3, [fp, #-84]	; 0xffffffac
   129f0:	mov	r1, r0
   129f4:	movwne	r1, #1
   129f8:	orr	r1, r1, r2
   129fc:	tst	r1, #1
   12a00:	beq	1352c <__assert_fail@plt+0x250c>
   12a04:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12a08:	clz	r0, r0
   12a0c:	mov	lr, r5
   12a10:	mov	ip, r6
   12a14:	mov	r5, r3
   12a18:	lsr	r0, r0, #5
   12a1c:	str	r0, [fp, #-52]	; 0xffffffcc
   12a20:	ldrb	r6, [r4, r7]
   12a24:	cmp	r6, #126	; 0x7e
   12a28:	bhi	12f50 <__assert_fail@plt+0x1f30>
   12a2c:	add	r3, pc, #16
   12a30:	mov	r9, #1
   12a34:	mov	r2, #110	; 0x6e
   12a38:	mov	r0, #97	; 0x61
   12a3c:	mov	r1, #0
   12a40:	ldr	pc, [r3, r6, lsl #2]
   12a44:			; <UNDEFINED> instruction: 0x00012db4
   12a48:	andeq	r2, r1, r0, asr pc
   12a4c:	andeq	r2, r1, r0, asr pc
   12a50:	andeq	r2, r1, r0, asr pc
   12a54:	andeq	r2, r1, r0, asr pc
   12a58:	andeq	r2, r1, r0, asr pc
   12a5c:	andeq	r2, r1, r0, asr pc
   12a60:	ldrdeq	r2, [r1], -r0
   12a64:	muleq	r1, r4, sp
   12a68:	andeq	r2, r1, ip, lsl #27
   12a6c:	andeq	r2, r1, r0, lsr #27
   12a70:			; <UNDEFINED> instruction: 0x00012eb8
   12a74:	andeq	r2, r1, r4, lsl #27
   12a78:	muleq	r1, ip, sp
   12a7c:	andeq	r2, r1, r0, asr pc
   12a80:	andeq	r2, r1, r0, asr pc
   12a84:	andeq	r2, r1, r0, asr pc
   12a88:	andeq	r2, r1, r0, asr pc
   12a8c:	andeq	r2, r1, r0, asr pc
   12a90:	andeq	r2, r1, r0, asr pc
   12a94:	andeq	r2, r1, r0, asr pc
   12a98:	andeq	r2, r1, r0, asr pc
   12a9c:	andeq	r2, r1, r0, asr pc
   12aa0:	andeq	r2, r1, r0, asr pc
   12aa4:	andeq	r2, r1, r0, asr pc
   12aa8:	andeq	r2, r1, r0, asr pc
   12aac:	andeq	r2, r1, r0, asr pc
   12ab0:	andeq	r2, r1, r0, asr pc
   12ab4:	andeq	r2, r1, r0, asr pc
   12ab8:	andeq	r2, r1, r0, asr pc
   12abc:	andeq	r2, r1, r0, asr pc
   12ac0:	andeq	r2, r1, r0, asr pc
   12ac4:	andeq	r2, r1, r4, lsr sp
   12ac8:	andeq	r2, r1, r8, lsr sp
   12acc:	andeq	r2, r1, r8, lsr sp
   12ad0:	andeq	r2, r1, ip, lsl sp
   12ad4:	andeq	r2, r1, r8, lsr sp
   12ad8:	andeq	r2, r1, r0, asr #24
   12adc:	andeq	r2, r1, r8, lsr sp
   12ae0:	andeq	r2, r1, r0, asr #29
   12ae4:	andeq	r2, r1, r8, lsr sp
   12ae8:	andeq	r2, r1, r8, lsr sp
   12aec:	andeq	r2, r1, r8, lsr sp
   12af0:	andeq	r2, r1, r0, asr #24
   12af4:	andeq	r2, r1, r0, asr #24
   12af8:	andeq	r2, r1, r0, asr #24
   12afc:	andeq	r2, r1, r0, asr #24
   12b00:	andeq	r2, r1, r0, asr #24
   12b04:	andeq	r2, r1, r0, asr #24
   12b08:	andeq	r2, r1, r0, asr #24
   12b0c:	andeq	r2, r1, r0, asr #24
   12b10:	andeq	r2, r1, r0, asr #24
   12b14:	andeq	r2, r1, r0, asr #24
   12b18:	andeq	r2, r1, r0, asr #24
   12b1c:	andeq	r2, r1, r0, asr #24
   12b20:	andeq	r2, r1, r0, asr #24
   12b24:	andeq	r2, r1, r0, asr #24
   12b28:	andeq	r2, r1, r0, asr #24
   12b2c:	andeq	r2, r1, r0, asr #24
   12b30:	andeq	r2, r1, r8, lsr sp
   12b34:	andeq	r2, r1, r8, lsr sp
   12b38:	andeq	r2, r1, r8, lsr sp
   12b3c:	andeq	r2, r1, r8, lsr sp
   12b40:	andeq	r2, r1, ip, lsl #29
   12b44:	andeq	r2, r1, r0, asr pc
   12b48:	andeq	r2, r1, r0, asr #24
   12b4c:	andeq	r2, r1, r0, asr #24
   12b50:	andeq	r2, r1, r0, asr #24
   12b54:	andeq	r2, r1, r0, asr #24
   12b58:	andeq	r2, r1, r0, asr #24
   12b5c:	andeq	r2, r1, r0, asr #24
   12b60:	andeq	r2, r1, r0, asr #24
   12b64:	andeq	r2, r1, r0, asr #24
   12b68:	andeq	r2, r1, r0, asr #24
   12b6c:	andeq	r2, r1, r0, asr #24
   12b70:	andeq	r2, r1, r0, asr #24
   12b74:	andeq	r2, r1, r0, asr #24
   12b78:	andeq	r2, r1, r0, asr #24
   12b7c:	andeq	r2, r1, r0, asr #24
   12b80:	andeq	r2, r1, r0, asr #24
   12b84:	andeq	r2, r1, r0, asr #24
   12b88:	andeq	r2, r1, r0, asr #24
   12b8c:	andeq	r2, r1, r0, asr #24
   12b90:	andeq	r2, r1, r0, asr #24
   12b94:	andeq	r2, r1, r0, asr #24
   12b98:	andeq	r2, r1, r0, asr #24
   12b9c:	andeq	r2, r1, r0, asr #24
   12ba0:	andeq	r2, r1, r0, asr #24
   12ba4:	andeq	r2, r1, r0, asr #24
   12ba8:	andeq	r2, r1, r0, asr #24
   12bac:	andeq	r2, r1, r0, asr #24
   12bb0:	andeq	r2, r1, r8, lsr sp
   12bb4:	andeq	r2, r1, r0, ror #26
   12bb8:	andeq	r2, r1, r0, asr #24
   12bbc:	andeq	r2, r1, r8, lsr sp
   12bc0:	andeq	r2, r1, r0, asr #24
   12bc4:	andeq	r2, r1, r8, lsr sp
   12bc8:	andeq	r2, r1, r0, asr #24
   12bcc:	andeq	r2, r1, r0, asr #24
   12bd0:	andeq	r2, r1, r0, asr #24
   12bd4:	andeq	r2, r1, r0, asr #24
   12bd8:	andeq	r2, r1, r0, asr #24
   12bdc:	andeq	r2, r1, r0, asr #24
   12be0:	andeq	r2, r1, r0, asr #24
   12be4:	andeq	r2, r1, r0, asr #24
   12be8:	andeq	r2, r1, r0, asr #24
   12bec:	andeq	r2, r1, r0, asr #24
   12bf0:	andeq	r2, r1, r0, asr #24
   12bf4:	andeq	r2, r1, r0, asr #24
   12bf8:	andeq	r2, r1, r0, asr #24
   12bfc:	andeq	r2, r1, r0, asr #24
   12c00:	andeq	r2, r1, r0, asr #24
   12c04:	andeq	r2, r1, r0, asr #24
   12c08:	andeq	r2, r1, r0, asr #24
   12c0c:	andeq	r2, r1, r0, asr #24
   12c10:	andeq	r2, r1, r0, asr #24
   12c14:	andeq	r2, r1, r0, asr #24
   12c18:	andeq	r2, r1, r0, asr #24
   12c1c:	andeq	r2, r1, r0, asr #24
   12c20:	andeq	r2, r1, r0, asr #24
   12c24:	andeq	r2, r1, r0, asr #24
   12c28:	andeq	r2, r1, r0, asr #24
   12c2c:	andeq	r2, r1, r0, asr #24
   12c30:	strdeq	r2, [r1], -r4
   12c34:	andeq	r2, r1, r8, lsr sp
   12c38:	strdeq	r2, [r1], -r4
   12c3c:	andeq	r2, r1, ip, lsl sp
   12c40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c44:	tst	r0, #1
   12c48:	bne	12c74 <__assert_fail@plt+0x1c54>
   12c4c:	ldr	r1, [fp, #16]
   12c50:	ubfx	r0, r6, #5, #3
   12c54:	mov	r2, #1
   12c58:	ldr	r0, [r1, r0, lsl #2]
   12c5c:	and	r1, r6, #31
   12c60:	tst	r0, r2, lsl r1
   12c64:	beq	12c74 <__assert_fail@plt+0x1c54>
   12c68:	mov	r0, r6
   12c6c:	mov	r1, r9
   12c70:	b	12c88 <__assert_fail@plt+0x1c68>
   12c74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12c78:	mov	r1, r9
   12c7c:	cmp	r0, #0
   12c80:	mov	r0, r6
   12c84:	beq	133d4 <__assert_fail@plt+0x23b4>
   12c88:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c8c:	tst	r2, #1
   12c90:	bne	13570 <__assert_fail@plt+0x2550>
   12c94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12c98:	subs	r2, r2, #2
   12c9c:	movwne	r2, #1
   12ca0:	orr	r2, r2, lr
   12ca4:	tst	r2, #1
   12ca8:	bne	12ce0 <__assert_fail@plt+0x1cc0>
   12cac:	cmp	r8, ip
   12cb0:	mov	lr, #1
   12cb4:	movcc	r2, #39	; 0x27
   12cb8:	strbcc	r2, [r5, r8]
   12cbc:	add	r2, r8, #1
   12cc0:	cmp	r2, ip
   12cc4:	movcc	r3, #36	; 0x24
   12cc8:	strbcc	r3, [r5, r2]
   12ccc:	add	r2, r8, #2
   12cd0:	add	r8, r8, #3
   12cd4:	cmp	r2, ip
   12cd8:	movcc	r3, #39	; 0x27
   12cdc:	strbcc	r3, [r5, r2]
   12ce0:	cmp	r8, ip
   12ce4:	movcc	r2, #92	; 0x5c
   12ce8:	strbcc	r2, [r5, r8]
   12cec:	add	r8, r8, #1
   12cf0:	b	13414 <__assert_fail@plt+0x23f4>
   12cf4:	cmp	sl, #1
   12cf8:	beq	12d1c <__assert_fail@plt+0x1cfc>
   12cfc:	mov	r9, #0
   12d00:	cmn	sl, #1
   12d04:	bne	12d28 <__assert_fail@plt+0x1d08>
   12d08:	ldrb	r0, [r4, #1]
   12d0c:	cmp	r0, #0
   12d10:	beq	12d1c <__assert_fail@plt+0x1cfc>
   12d14:	mvn	sl, #0
   12d18:	b	12d28 <__assert_fail@plt+0x1d08>
   12d1c:	mov	r9, #0
   12d20:	cmp	r7, #0
   12d24:	beq	12d34 <__assert_fail@plt+0x1d14>
   12d28:	mov	r0, #0
   12d2c:	str	r0, [fp, #-56]	; 0xffffffc8
   12d30:	b	12c40 <__assert_fail@plt+0x1c20>
   12d34:	mov	r1, #1
   12d38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d3c:	cmp	r0, #2
   12d40:	bne	12d58 <__assert_fail@plt+0x1d38>
   12d44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d48:	mov	r9, r1
   12d4c:	tst	r0, #1
   12d50:	beq	12c40 <__assert_fail@plt+0x1c20>
   12d54:	b	13570 <__assert_fail@plt+0x2550>
   12d58:	mov	r9, r1
   12d5c:	b	12c40 <__assert_fail@plt+0x1c20>
   12d60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d64:	cmp	r0, #2
   12d68:	bne	12fac <__assert_fail@plt+0x1f8c>
   12d6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d70:	tst	r0, #1
   12d74:	bne	13570 <__assert_fail@plt+0x2550>
   12d78:	mov	r0, #0
   12d7c:	str	r0, [fp, #-56]	; 0xffffffc8
   12d80:	b	12fc4 <__assert_fail@plt+0x1fa4>
   12d84:	mov	r0, #102	; 0x66
   12d88:	b	12fd0 <__assert_fail@plt+0x1fb0>
   12d8c:	mov	r2, #116	; 0x74
   12d90:	b	12da0 <__assert_fail@plt+0x1d80>
   12d94:	mov	r0, #98	; 0x62
   12d98:	b	12fd0 <__assert_fail@plt+0x1fb0>
   12d9c:	mov	r2, #114	; 0x72
   12da0:	ldr	r0, [sp, #68]	; 0x44
   12da4:	tst	r0, #1
   12da8:	mov	r0, r2
   12dac:	bne	12fd0 <__assert_fail@plt+0x1fb0>
   12db0:	b	13570 <__assert_fail@plt+0x2550>
   12db4:	ldr	r0, [sp, #84]	; 0x54
   12db8:	tst	r0, #1
   12dbc:	beq	12ff0 <__assert_fail@plt+0x1fd0>
   12dc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12dc4:	tst	r0, #1
   12dc8:	bne	1365c <__assert_fail@plt+0x263c>
   12dcc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12dd0:	mov	r2, sl
   12dd4:	subs	r0, r0, #2
   12dd8:	movwne	r0, #1
   12ddc:	orr	r0, r0, lr
   12de0:	tst	r0, #1
   12de4:	bne	12e1c <__assert_fail@plt+0x1dfc>
   12de8:	cmp	r8, ip
   12dec:	mov	lr, #1
   12df0:	movcc	r0, #39	; 0x27
   12df4:	strbcc	r0, [r5, r8]
   12df8:	add	r0, r8, #1
   12dfc:	cmp	r0, ip
   12e00:	movcc	r1, #36	; 0x24
   12e04:	strbcc	r1, [r5, r0]
   12e08:	add	r0, r8, #2
   12e0c:	add	r8, r8, #3
   12e10:	cmp	r0, ip
   12e14:	movcc	r1, #39	; 0x27
   12e18:	strbcc	r1, [r5, r0]
   12e1c:	mov	r1, #1
   12e20:	cmp	r8, ip
   12e24:	mov	r9, #0
   12e28:	mov	r6, #48	; 0x30
   12e2c:	str	r1, [fp, #-56]	; 0xffffffc8
   12e30:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12e34:	movcc	r0, #92	; 0x5c
   12e38:	strbcc	r0, [r5, r8]
   12e3c:	add	r0, r8, #1
   12e40:	cmp	r1, #2
   12e44:	beq	1314c <__assert_fail@plt+0x212c>
   12e48:	add	r1, r7, #1
   12e4c:	cmp	r1, r2
   12e50:	bcs	1314c <__assert_fail@plt+0x212c>
   12e54:	ldrb	r1, [r4, r1]
   12e58:	sub	r1, r1, #48	; 0x30
   12e5c:	uxtb	r1, r1
   12e60:	cmp	r1, #9
   12e64:	bhi	1314c <__assert_fail@plt+0x212c>
   12e68:	cmp	r0, ip
   12e6c:	movcc	r1, #48	; 0x30
   12e70:	strbcc	r1, [r5, r0]
   12e74:	add	r0, r8, #2
   12e78:	add	r8, r8, #3
   12e7c:	cmp	r0, ip
   12e80:	movcc	r1, #48	; 0x30
   12e84:	strbcc	r1, [r5, r0]
   12e88:	b	12c40 <__assert_fail@plt+0x1c20>
   12e8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e90:	mov	r6, #63	; 0x3f
   12e94:	cmp	r0, #5
   12e98:	beq	13154 <__assert_fail@plt+0x2134>
   12e9c:	mov	r1, #0
   12ea0:	cmp	r0, #2
   12ea4:	str	r1, [fp, #-56]	; 0xffffffc8
   12ea8:	bne	13208 <__assert_fail@plt+0x21e8>
   12eac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12eb0:	mov	r9, #0
   12eb4:	b	12d4c <__assert_fail@plt+0x1d2c>
   12eb8:	mov	r0, #118	; 0x76
   12ebc:	b	12fd0 <__assert_fail@plt+0x1fb0>
   12ec0:	mov	r0, #1
   12ec4:	mov	r6, #39	; 0x27
   12ec8:	str	r0, [sp, #60]	; 0x3c
   12ecc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ed0:	cmp	r0, #2
   12ed4:	bne	12f48 <__assert_fail@plt+0x1f28>
   12ed8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12edc:	tst	r0, #1
   12ee0:	bne	13570 <__assert_fail@plt+0x2550>
   12ee4:	ldr	r2, [sp, #56]	; 0x38
   12ee8:	clz	r1, ip
   12eec:	mov	lr, #0
   12ef0:	lsr	r1, r1, #5
   12ef4:	cmp	r2, #0
   12ef8:	mov	r0, r2
   12efc:	movwne	r0, #1
   12f00:	orrs	r0, r0, r1
   12f04:	moveq	r2, ip
   12f08:	moveq	ip, r0
   12f0c:	cmp	r8, ip
   12f10:	str	r2, [sp, #56]	; 0x38
   12f14:	movcc	r0, #39	; 0x27
   12f18:	strbcc	r0, [r5, r8]
   12f1c:	add	r0, r8, #1
   12f20:	cmp	r0, ip
   12f24:	movcc	r1, #92	; 0x5c
   12f28:	strbcc	r1, [r5, r0]
   12f2c:	add	r0, r8, #2
   12f30:	add	r8, r8, #3
   12f34:	cmp	r0, ip
   12f38:	movcc	r1, #39	; 0x27
   12f3c:	strbcc	r1, [r5, r0]
   12f40:	mov	r0, #0
   12f44:	str	r0, [fp, #-56]	; 0xffffffc8
   12f48:	mov	r9, #1
   12f4c:	b	12c40 <__assert_fail@plt+0x1c20>
   12f50:	ldr	r0, [sp, #40]	; 0x28
   12f54:	str	lr, [sp, #44]	; 0x2c
   12f58:	str	ip, [sp, #88]	; 0x58
   12f5c:	cmp	r0, #1
   12f60:	bne	13010 <__assert_fail@plt+0x1ff0>
   12f64:	str	sl, [sp, #36]	; 0x24
   12f68:	bl	10f0c <__ctype_b_loc@plt>
   12f6c:	ldr	r0, [r0]
   12f70:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12f74:	mov	r1, #1
   12f78:	add	r0, r0, r6, lsl #1
   12f7c:	ldrb	r0, [r0, #1]
   12f80:	ubfx	r9, r0, #6, #1
   12f84:	ldr	r0, [sp, #52]	; 0x34
   12f88:	ldr	lr, [sp, #44]	; 0x2c
   12f8c:	cmp	r1, #1
   12f90:	orr	r3, r9, r0
   12f94:	bhi	13210 <__assert_fail@plt+0x21f0>
   12f98:	tst	r3, #1
   12f9c:	beq	13210 <__assert_fail@plt+0x21f0>
   12fa0:	ldr	sl, [sp, #36]	; 0x24
   12fa4:	ldr	ip, [sp, #88]	; 0x58
   12fa8:	b	12c40 <__assert_fail@plt+0x1c20>
   12fac:	ldr	r1, [sp, #48]	; 0x30
   12fb0:	mov	r0, #0
   12fb4:	str	r0, [fp, #-56]	; 0xffffffc8
   12fb8:	mov	r0, #92	; 0x5c
   12fbc:	cmp	r1, #0
   12fc0:	beq	12fd0 <__assert_fail@plt+0x1fb0>
   12fc4:	mov	r6, #92	; 0x5c
   12fc8:	mov	r9, #0
   12fcc:	b	133d4 <__assert_fail@plt+0x23b4>
   12fd0:	mov	r1, #0
   12fd4:	mov	r9, #0
   12fd8:	str	r1, [fp, #-56]	; 0xffffffc8
   12fdc:	ldr	r1, [sp, #84]	; 0x54
   12fe0:	tst	r1, #1
   12fe4:	mov	r1, #0
   12fe8:	beq	12c40 <__assert_fail@plt+0x1c20>
   12fec:	b	12c88 <__assert_fail@plt+0x1c68>
   12ff0:	ldr	r0, [sp, #32]
   12ff4:	mov	r6, #0
   12ff8:	mov	r9, #0
   12ffc:	cmp	r0, #0
   13000:	mov	r0, #0
   13004:	str	r0, [fp, #-56]	; 0xffffffc8
   13008:	beq	12c40 <__assert_fail@plt+0x1c20>
   1300c:	b	1342c <__assert_fail@plt+0x240c>
   13010:	mov	r0, #0
   13014:	cmn	sl, #1
   13018:	sub	r3, fp, #40	; 0x28
   1301c:	str	r0, [fp, #-36]	; 0xffffffdc
   13020:	str	r0, [fp, #-40]	; 0xffffffd8
   13024:	bne	1303c <__assert_fail@plt+0x201c>
   13028:	mov	r0, r4
   1302c:	bl	10f30 <strlen@plt>
   13030:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13034:	sub	r3, fp, #40	; 0x28
   13038:	mov	sl, r0
   1303c:	ldr	r0, [sp, #72]	; 0x48
   13040:	mov	r9, #1
   13044:	mov	r1, #0
   13048:	str	sl, [sp, #36]	; 0x24
   1304c:	add	r0, r0, r7
   13050:	str	r0, [sp, #20]
   13054:	add	r0, r1, r7
   13058:	str	r1, [sp, #24]
   1305c:	add	r1, r4, r0
   13060:	mov	r4, r0
   13064:	sub	r2, sl, r0
   13068:	sub	r0, fp, #44	; 0x2c
   1306c:	bl	149c0 <__assert_fail@plt+0x39a0>
   13070:	cmp	r0, #0
   13074:	beq	13480 <__assert_fail@plt+0x2460>
   13078:	cmn	r0, #1
   1307c:	beq	13438 <__assert_fail@plt+0x2418>
   13080:	ldr	r2, [sp, #36]	; 0x24
   13084:	cmn	r0, #2
   13088:	beq	13440 <__assert_fail@plt+0x2420>
   1308c:	ldr	r2, [sp, #64]	; 0x40
   13090:	ldr	ip, [sp, #88]	; 0x58
   13094:	ldr	r4, [sp, #84]	; 0x54
   13098:	ldr	lr, [fp, #-48]	; 0xffffffd0
   1309c:	cmp	r0, #2
   130a0:	mov	r1, #0
   130a4:	movwcc	r1, #1
   130a8:	eor	r2, r2, #1
   130ac:	orrs	r1, r2, r1
   130b0:	bne	13100 <__assert_fail@plt+0x20e0>
   130b4:	ldr	r1, [sp, #24]
   130b8:	ldr	r2, [sp, #20]
   130bc:	add	r1, r2, r1
   130c0:	sub	r2, r0, #1
   130c4:	ldrb	r3, [r1]
   130c8:	sub	r5, r3, #94	; 0x5e
   130cc:	cmp	r5, #30
   130d0:	bhi	130e8 <__assert_fail@plt+0x20c8>
   130d4:	mov	r4, #1
   130d8:	mov	sl, #1073741829	; 0x40000005
   130dc:	tst	sl, r4, lsl r5
   130e0:	ldr	r4, [sp, #84]	; 0x54
   130e4:	bne	13548 <__assert_fail@plt+0x2528>
   130e8:	sub	r3, r3, #91	; 0x5b
   130ec:	cmp	r3, #2
   130f0:	bcc	13548 <__assert_fail@plt+0x2528>
   130f4:	add	r1, r1, #1
   130f8:	subs	r2, r2, #1
   130fc:	bne	130c4 <__assert_fail@plt+0x20a4>
   13100:	ldr	r5, [sp, #24]
   13104:	str	lr, [fp, #-48]	; 0xffffffd0
   13108:	add	r5, r0, r5
   1310c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13110:	bl	10e7c <iswprint@plt>
   13114:	cmp	r0, #0
   13118:	sub	r4, fp, #40	; 0x28
   1311c:	movwne	r0, #1
   13120:	and	r9, r9, r0
   13124:	mov	r0, r4
   13128:	bl	10e40 <mbsinit@plt>
   1312c:	mov	r1, r5
   13130:	mov	r3, r4
   13134:	ldr	sl, [sp, #36]	; 0x24
   13138:	ldr	r5, [fp, #-84]	; 0xffffffac
   1313c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13140:	cmp	r0, #0
   13144:	beq	13054 <__assert_fail@plt+0x2034>
   13148:	b	12f84 <__assert_fail@plt+0x1f64>
   1314c:	mov	r8, r0
   13150:	b	12c40 <__assert_fail@plt+0x1c20>
   13154:	mov	r0, #0
   13158:	str	r0, [fp, #-56]	; 0xffffffc8
   1315c:	ldr	r0, [sp, #28]
   13160:	cmp	r0, #0
   13164:	beq	13208 <__assert_fail@plt+0x21e8>
   13168:	add	r0, r7, #2
   1316c:	mov	r1, sl
   13170:	cmp	r0, sl
   13174:	bcs	13208 <__assert_fail@plt+0x21e8>
   13178:	add	r1, r7, r4
   1317c:	ldrb	r1, [r1, #1]
   13180:	cmp	r1, #63	; 0x3f
   13184:	bne	13208 <__assert_fail@plt+0x21e8>
   13188:	ldrb	r9, [r4, r0]
   1318c:	sub	r2, r9, #33	; 0x21
   13190:	cmp	r2, #29
   13194:	bhi	13208 <__assert_fail@plt+0x21e8>
   13198:	mov	r1, r4
   1319c:	movw	r4, #20929	; 0x51c1
   131a0:	mov	r3, #1
   131a4:	movt	r4, #14336	; 0x3800
   131a8:	tst	r4, r3, lsl r2
   131ac:	beq	13494 <__assert_fail@plt+0x2474>
   131b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   131b4:	tst	r2, #1
   131b8:	bne	13664 <__assert_fail@plt+0x2644>
   131bc:	cmp	r8, ip
   131c0:	mov	r4, r1
   131c4:	mov	r7, r0
   131c8:	mov	r6, r9
   131cc:	movcc	r2, #63	; 0x3f
   131d0:	strbcc	r2, [r5, r8]
   131d4:	add	r2, r8, #1
   131d8:	cmp	r2, ip
   131dc:	movcc	r3, #34	; 0x22
   131e0:	strbcc	r3, [r5, r2]
   131e4:	add	r2, r8, #2
   131e8:	cmp	r2, ip
   131ec:	movcc	r3, #34	; 0x22
   131f0:	strbcc	r3, [r5, r2]
   131f4:	add	r2, r8, #3
   131f8:	add	r8, r8, #4
   131fc:	cmp	r2, ip
   13200:	movcc	r3, #63	; 0x3f
   13204:	strbcc	r3, [r5, r2]
   13208:	mov	r9, #0
   1320c:	b	12c40 <__assert_fail@plt+0x1c20>
   13210:	ldr	sl, [sp, #36]	; 0x24
   13214:	add	r0, r1, r7
   13218:	mov	r2, #0
   1321c:	str	r3, [sp, #24]
   13220:	str	r0, [fp, #-56]	; 0xffffffc8
   13224:	tst	r3, #1
   13228:	beq	13254 <__assert_fail@plt+0x2234>
   1322c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13230:	tst	r0, #1
   13234:	beq	1331c <__assert_fail@plt+0x22fc>
   13238:	ldr	r1, [sp, #88]	; 0x58
   1323c:	mov	r0, r3
   13240:	cmp	r8, r1
   13244:	movcc	r1, #92	; 0x5c
   13248:	strbcc	r1, [r5, r8]
   1324c:	add	r8, r8, #1
   13250:	b	13320 <__assert_fail@plt+0x2300>
   13254:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13258:	tst	r1, #1
   1325c:	bne	1356c <__assert_fail@plt+0x254c>
   13260:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13264:	subs	r2, r1, #2
   13268:	movwne	r2, #1
   1326c:	orr	r2, r2, lr
   13270:	tst	r2, #1
   13274:	bne	132b8 <__assert_fail@plt+0x2298>
   13278:	ldr	r1, [sp, #88]	; 0x58
   1327c:	add	r2, r8, #1
   13280:	mov	lr, #1
   13284:	cmp	r8, r1
   13288:	movcc	r1, #39	; 0x27
   1328c:	strbcc	r1, [r5, r8]
   13290:	ldr	r1, [sp, #88]	; 0x58
   13294:	cmp	r2, r1
   13298:	movcc	r1, #36	; 0x24
   1329c:	strbcc	r1, [r5, r2]
   132a0:	ldr	r1, [sp, #88]	; 0x58
   132a4:	add	r2, r8, #2
   132a8:	add	r8, r8, #3
   132ac:	cmp	r2, r1
   132b0:	movcc	r1, #39	; 0x27
   132b4:	strbcc	r1, [r5, r2]
   132b8:	ldr	r1, [sp, #88]	; 0x58
   132bc:	add	r2, r8, #1
   132c0:	mov	r0, r3
   132c4:	cmp	r8, r1
   132c8:	movcc	r1, #92	; 0x5c
   132cc:	strbcc	r1, [r5, r8]
   132d0:	ldr	r1, [sp, #88]	; 0x58
   132d4:	cmp	r2, r1
   132d8:	bcs	132ec <__assert_fail@plt+0x22cc>
   132dc:	uxtb	r3, r6
   132e0:	mov	r1, #48	; 0x30
   132e4:	orr	r3, r1, r3, lsr #6
   132e8:	strb	r3, [r5, r2]
   132ec:	ldr	r1, [sp, #88]	; 0x58
   132f0:	add	r2, r8, #2
   132f4:	add	r8, r8, #3
   132f8:	cmp	r2, r1
   132fc:	lsrcc	r3, r6, #3
   13300:	movcc	r1, #6
   13304:	bficc	r3, r1, #3, #29
   13308:	mov	r1, #6
   1330c:	bfi	r6, r1, #3, #29
   13310:	strbcc	r3, [r5, r2]
   13314:	mov	r2, #1
   13318:	b	13328 <__assert_fail@plt+0x2308>
   1331c:	mov	r0, r3
   13320:	mov	r1, #0
   13324:	str	r1, [fp, #-52]	; 0xffffffcc
   13328:	mov	ip, r2
   1332c:	and	r1, r2, #1
   13330:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13334:	add	r3, r7, #1
   13338:	cmp	r2, r3
   1333c:	bls	133c4 <__assert_fail@plt+0x23a4>
   13340:	cmp	r1, #0
   13344:	mvn	r5, lr
   13348:	movwne	r1, #1
   1334c:	orr	r5, r5, r1
   13350:	tst	r5, #1
   13354:	bne	13398 <__assert_fail@plt+0x2378>
   13358:	ldr	r1, [sp, #88]	; 0x58
   1335c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13360:	mov	r2, r4
   13364:	ldr	r4, [sp, #88]	; 0x58
   13368:	ldr	r0, [sp, #24]
   1336c:	mov	lr, #0
   13370:	cmp	r8, r1
   13374:	movcc	r1, #39	; 0x27
   13378:	strbcc	r1, [r5, r8]
   1337c:	add	r1, r8, #1
   13380:	add	r8, r8, #2
   13384:	cmp	r1, r4
   13388:	movcc	r4, #39	; 0x27
   1338c:	strbcc	r4, [r5, r1]
   13390:	mov	r4, r2
   13394:	b	1339c <__assert_fail@plt+0x237c>
   13398:	ldr	r5, [fp, #-84]	; 0xffffffac
   1339c:	ldr	r1, [sp, #88]	; 0x58
   133a0:	mov	r2, ip
   133a4:	cmp	r8, r1
   133a8:	ldr	r1, [sp, #72]	; 0x48
   133ac:	strbcc	r6, [r5, r8]
   133b0:	add	r8, r8, #1
   133b4:	ldrb	r6, [r1, r7]
   133b8:	mov	r7, r3
   133bc:	mov	r3, r0
   133c0:	b	13224 <__assert_fail@plt+0x2204>
   133c4:	ldr	ip, [sp, #88]	; 0x58
   133c8:	cmp	r1, #0
   133cc:	movwne	r1, #1
   133d0:	str	r1, [fp, #-56]	; 0xffffffc8
   133d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   133d8:	cmp	r0, #0
   133dc:	bne	1340c <__assert_fail@plt+0x23ec>
   133e0:	tst	lr, #1
   133e4:	beq	1340c <__assert_fail@plt+0x23ec>
   133e8:	cmp	r8, ip
   133ec:	mov	lr, #0
   133f0:	movcc	r0, #39	; 0x27
   133f4:	strbcc	r0, [r5, r8]
   133f8:	add	r0, r8, #1
   133fc:	add	r8, r8, #2
   13400:	cmp	r0, ip
   13404:	movcc	r1, #39	; 0x27
   13408:	strbcc	r1, [r5, r0]
   1340c:	mov	r1, r9
   13410:	mov	r0, r6
   13414:	cmp	r8, ip
   13418:	strbcc	r0, [r5, r8]
   1341c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13420:	add	r8, r8, #1
   13424:	and	r0, r0, r1
   13428:	str	r0, [fp, #-48]	; 0xffffffd0
   1342c:	mov	r3, sl
   13430:	add	r7, r7, #1
   13434:	b	12924 <__assert_fail@plt+0x1904>
   13438:	mov	r9, #0
   1343c:	b	13480 <__assert_fail@plt+0x2460>
   13440:	mov	r9, #0
   13444:	cmp	r2, r4
   13448:	bls	13480 <__assert_fail@plt+0x2460>
   1344c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13450:	ldr	r1, [sp, #24]
   13454:	add	r0, r4, r7
   13458:	mov	r3, r1
   1345c:	ldrb	r1, [r0, r1]
   13460:	cmp	r1, #0
   13464:	beq	1348c <__assert_fail@plt+0x246c>
   13468:	add	r3, r3, #1
   1346c:	add	r1, r7, r3
   13470:	cmp	r1, r2
   13474:	mov	r1, r3
   13478:	bcc	13458 <__assert_fail@plt+0x2438>
   1347c:	b	12f84 <__assert_fail@plt+0x1f64>
   13480:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13484:	ldr	r1, [sp, #24]
   13488:	b	12f84 <__assert_fail@plt+0x1f64>
   1348c:	mov	r1, r3
   13490:	b	12f84 <__assert_fail@plt+0x1f64>
   13494:	mov	r9, #0
   13498:	mov	r4, r1
   1349c:	b	12c40 <__assert_fail@plt+0x1c20>
   134a0:	mov	sl, r7
   134a4:	b	134ac <__assert_fail@plt+0x248c>
   134a8:	mvn	sl, #0
   134ac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   134b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   134b4:	eor	r0, r1, #2
   134b8:	orr	r0, r0, r8
   134bc:	clz	r0, r0
   134c0:	lsr	r0, r0, #5
   134c4:	tst	r2, r0
   134c8:	bne	13570 <__assert_fail@plt+0x2550>
   134cc:	subs	r0, r1, #2
   134d0:	movwne	r0, #1
   134d4:	orr	r0, r2, r0
   134d8:	tst	r0, #1
   134dc:	ldreq	r0, [sp, #60]	; 0x3c
   134e0:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   134e4:	eoreq	r0, r0, #1
   134e8:	tsteq	r0, #1
   134ec:	bne	13604 <__assert_fail@plt+0x25e4>
   134f0:	tst	r1, #1
   134f4:	bne	135d0 <__assert_fail@plt+0x25b0>
   134f8:	ldr	r6, [sp, #56]	; 0x38
   134fc:	mov	r9, #0
   13500:	cmp	r6, #0
   13504:	beq	135fc <__assert_fail@plt+0x25dc>
   13508:	ldr	r0, [sp, #84]	; 0x54
   1350c:	mov	r1, #0
   13510:	mov	r7, #2
   13514:	cmp	ip, #0
   13518:	str	r1, [fp, #-48]	; 0xffffffd0
   1351c:	mov	r1, #0
   13520:	str	r1, [fp, #-76]	; 0xffffffb4
   13524:	beq	1268c <__assert_fail@plt+0x166c>
   13528:	b	13604 <__assert_fail@plt+0x25e4>
   1352c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13530:	ldr	r1, [fp, #12]
   13534:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13538:	mov	r5, r3
   1353c:	mov	ip, r6
   13540:	mov	r3, sl
   13544:	b	13594 <__assert_fail@plt+0x2574>
   13548:	tst	r4, #1
   1354c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13550:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13554:	ldr	r1, [fp, #12]
   13558:	ldr	r3, [sp, #36]	; 0x24
   1355c:	mov	r0, #2
   13560:	movwne	r0, #4
   13564:	mov	r2, r0
   13568:	b	13594 <__assert_fail@plt+0x2574>
   1356c:	ldr	ip, [sp, #88]	; 0x58
   13570:	ldr	r1, [sp, #84]	; 0x54
   13574:	mov	r0, #2
   13578:	tst	r1, #1
   1357c:	movwne	r0, #4
   13580:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13584:	ldr	r1, [fp, #12]
   13588:	mov	r3, sl
   1358c:	cmp	r2, #2
   13590:	moveq	r2, r0
   13594:	mov	r0, #0
   13598:	bic	r1, r1, #2
   1359c:	str	r2, [sp]
   135a0:	mov	r2, r4
   135a4:	str	r0, [sp, #8]
   135a8:	ldr	r0, [sp, #76]	; 0x4c
   135ac:	str	r1, [sp, #4]
   135b0:	mov	r1, ip
   135b4:	str	r0, [sp, #12]
   135b8:	ldr	r0, [sp, #80]	; 0x50
   135bc:	str	r0, [sp, #16]
   135c0:	mov	r0, r5
   135c4:	bl	12600 <__assert_fail@plt+0x15e0>
   135c8:	mov	r8, r0
   135cc:	b	13650 <__assert_fail@plt+0x2630>
   135d0:	mov	r0, #5
   135d4:	ldr	r1, [sp, #56]	; 0x38
   135d8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   135dc:	mov	r3, sl
   135e0:	str	r0, [sp]
   135e4:	ldr	r0, [fp, #12]
   135e8:	str	r0, [sp, #4]
   135ec:	ldr	r0, [fp, #16]
   135f0:	str	r0, [sp, #8]
   135f4:	ldr	r0, [sp, #76]	; 0x4c
   135f8:	b	135b4 <__assert_fail@plt+0x2594>
   135fc:	mov	r0, #0
   13600:	str	r0, [fp, #-76]	; 0xffffffb4
   13604:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13608:	cmp	r1, #0
   1360c:	beq	13644 <__assert_fail@plt+0x2624>
   13610:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13614:	tst	r0, #1
   13618:	bne	13644 <__assert_fail@plt+0x2624>
   1361c:	ldrb	r0, [r1]
   13620:	cmp	r0, #0
   13624:	beq	13644 <__assert_fail@plt+0x2624>
   13628:	add	r1, r1, #1
   1362c:	cmp	r8, ip
   13630:	strbcc	r0, [r5, r8]
   13634:	add	r8, r8, #1
   13638:	ldrb	r0, [r1], #1
   1363c:	cmp	r0, #0
   13640:	bne	1362c <__assert_fail@plt+0x260c>
   13644:	cmp	r8, ip
   13648:	movcc	r0, #0
   1364c:	strbcc	r0, [r5, r8]
   13650:	mov	r0, r8
   13654:	sub	sp, fp, #28
   13658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1365c:	mov	r0, #4
   13660:	b	13580 <__assert_fail@plt+0x2560>
   13664:	mov	r4, r1
   13668:	b	13570 <__assert_fail@plt+0x2550>
   1366c:	bl	10ffc <abort@plt>
   13670:	mov	r3, r2
   13674:	mov	r2, #0
   13678:	b	1367c <__assert_fail@plt+0x265c>
   1367c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13680:	add	fp, sp, #28
   13684:	sub	sp, sp, #36	; 0x24
   13688:	movw	r8, #24992	; 0x61a0
   1368c:	cmp	r3, #0
   13690:	mov	r4, r2
   13694:	str	r2, [sp, #24]
   13698:	mov	r5, r1
   1369c:	mov	r6, r0
   136a0:	str	r0, [sp, #20]
   136a4:	movt	r8, #2
   136a8:	movne	r8, r3
   136ac:	bl	10f3c <__errno_location@plt>
   136b0:	str	r0, [sp, #28]
   136b4:	ldr	r1, [r8, #40]	; 0x28
   136b8:	ldr	r2, [r8, #44]	; 0x2c
   136bc:	ldr	r7, [r0]
   136c0:	cmp	r4, #0
   136c4:	add	sl, r8, #8
   136c8:	mov	r0, #0
   136cc:	ldm	r8, {r3, r9}
   136d0:	orreq	r9, r9, #1
   136d4:	stm	sp, {r3, r9, sl}
   136d8:	str	r1, [sp, #12]
   136dc:	str	r2, [sp, #16]
   136e0:	mov	r1, #0
   136e4:	mov	r2, r6
   136e8:	mov	r3, r5
   136ec:	str	r7, [sp, #32]
   136f0:	mov	r7, r5
   136f4:	bl	12600 <__assert_fail@plt+0x15e0>
   136f8:	add	r4, r0, #1
   136fc:	mov	r5, r0
   13700:	mov	r0, r4
   13704:	bl	143f4 <__assert_fail@plt+0x33d4>
   13708:	mov	r6, r0
   1370c:	ldr	r0, [r8]
   13710:	ldr	r2, [r8, #44]	; 0x2c
   13714:	ldr	r1, [r8, #40]	; 0x28
   13718:	mov	r3, r7
   1371c:	stm	sp, {r0, r9, sl}
   13720:	str	r2, [sp, #16]
   13724:	ldr	r2, [sp, #20]
   13728:	str	r1, [sp, #12]
   1372c:	mov	r0, r6
   13730:	mov	r1, r4
   13734:	bl	12600 <__assert_fail@plt+0x15e0>
   13738:	ldr	r0, [sp, #24]
   1373c:	ldr	r1, [sp, #32]
   13740:	ldr	r2, [sp, #28]
   13744:	cmp	r0, #0
   13748:	str	r1, [r2]
   1374c:	strne	r5, [r0]
   13750:	mov	r0, r6
   13754:	sub	sp, fp, #28
   13758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1375c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13760:	add	fp, sp, #24
   13764:	movw	r5, #24820	; 0x60f4
   13768:	movw	r8, #24816	; 0x60f0
   1376c:	movt	r5, #2
   13770:	movt	r8, #2
   13774:	ldr	r0, [r5]
   13778:	ldr	r4, [r8]
   1377c:	cmp	r0, #2
   13780:	blt	137ac <__assert_fail@plt+0x278c>
   13784:	add	r7, r4, #12
   13788:	mov	r6, #0
   1378c:	ldr	r0, [r7, r6, lsl #3]
   13790:	bl	12300 <__assert_fail@plt+0x12e0>
   13794:	ldr	r1, [r5]
   13798:	add	r2, r6, #2
   1379c:	add	r0, r6, #1
   137a0:	mov	r6, r0
   137a4:	cmp	r2, r1
   137a8:	blt	1378c <__assert_fail@plt+0x276c>
   137ac:	ldr	r0, [r4, #4]
   137b0:	movw	r9, #25040	; 0x61d0
   137b4:	movw	r7, #24824	; 0x60f8
   137b8:	movt	r9, #2
   137bc:	movt	r7, #2
   137c0:	cmp	r0, r9
   137c4:	beq	137d4 <__assert_fail@plt+0x27b4>
   137c8:	bl	12300 <__assert_fail@plt+0x12e0>
   137cc:	mov	r0, #256	; 0x100
   137d0:	stm	r7, {r0, r9}
   137d4:	cmp	r4, r7
   137d8:	beq	137e8 <__assert_fail@plt+0x27c8>
   137dc:	mov	r0, r4
   137e0:	bl	12300 <__assert_fail@plt+0x12e0>
   137e4:	str	r7, [r8]
   137e8:	mov	r0, #1
   137ec:	str	r0, [r5]
   137f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137f4:	movw	r3, #24992	; 0x61a0
   137f8:	mvn	r2, #0
   137fc:	movt	r3, #2
   13800:	b	13804 <__assert_fail@plt+0x27e4>
   13804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13808:	add	fp, sp, #28
   1380c:	sub	sp, sp, #44	; 0x2c
   13810:	mov	r7, r3
   13814:	str	r2, [sp, #36]	; 0x24
   13818:	str	r1, [sp, #32]
   1381c:	mov	r5, r0
   13820:	bl	10f3c <__errno_location@plt>
   13824:	cmp	r5, #0
   13828:	bmi	13998 <__assert_fail@plt+0x2978>
   1382c:	cmn	r5, #-2147483647	; 0x80000001
   13830:	beq	13998 <__assert_fail@plt+0x2978>
   13834:	movw	r8, #24820	; 0x60f4
   13838:	movw	r4, #24816	; 0x60f0
   1383c:	str	r0, [sp, #28]
   13840:	ldr	r0, [r0]
   13844:	movt	r8, #2
   13848:	movt	r4, #2
   1384c:	ldr	r1, [r8]
   13850:	ldr	r6, [r4]
   13854:	str	r0, [sp, #24]
   13858:	cmp	r1, r5
   1385c:	ble	13868 <__assert_fail@plt+0x2848>
   13860:	mov	sl, r6
   13864:	b	138d4 <__assert_fail@plt+0x28b4>
   13868:	movw	r9, #24824	; 0x60f8
   1386c:	mov	r0, #8
   13870:	str	r1, [fp, #-32]	; 0xffffffe0
   13874:	sub	r1, r5, r1
   13878:	mvn	r3, #-2147483648	; 0x80000000
   1387c:	movt	r9, #2
   13880:	str	r0, [sp]
   13884:	add	r2, r1, #1
   13888:	sub	r1, fp, #32
   1388c:	subs	r0, r6, r9
   13890:	movne	r0, r6
   13894:	bl	14524 <__assert_fail@plt+0x3504>
   13898:	mov	sl, r0
   1389c:	cmp	r6, r9
   138a0:	str	r0, [r4]
   138a4:	bne	138b0 <__assert_fail@plt+0x2890>
   138a8:	ldrd	r0, [r9]
   138ac:	stm	sl, {r0, r1}
   138b0:	ldr	r1, [r8]
   138b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138b8:	add	r0, sl, r1, lsl #3
   138bc:	sub	r1, r2, r1
   138c0:	lsl	r2, r1, #3
   138c4:	mov	r1, #0
   138c8:	bl	10f54 <memset@plt>
   138cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   138d0:	str	r0, [r8]
   138d4:	mov	r9, sl
   138d8:	ldm	r7, {r0, r1}
   138dc:	orr	r8, r1, #1
   138e0:	add	r1, r7, #8
   138e4:	ldr	r2, [r7, #40]	; 0x28
   138e8:	ldr	r3, [r7, #44]	; 0x2c
   138ec:	ldr	r6, [r9, r5, lsl #3]!
   138f0:	str	r1, [sp, #20]
   138f4:	ldr	r4, [r9, #4]!
   138f8:	stm	sp, {r0, r8}
   138fc:	add	r0, sp, #8
   13900:	stm	r0, {r1, r2, r3}
   13904:	ldr	r2, [sp, #32]
   13908:	ldr	r3, [sp, #36]	; 0x24
   1390c:	mov	r1, r6
   13910:	mov	r0, r4
   13914:	bl	12600 <__assert_fail@plt+0x15e0>
   13918:	cmp	r6, r0
   1391c:	bhi	13980 <__assert_fail@plt+0x2960>
   13920:	add	r6, r0, #1
   13924:	movw	r0, #25040	; 0x61d0
   13928:	movt	r0, #2
   1392c:	str	r6, [sl, r5, lsl #3]
   13930:	cmp	r4, r0
   13934:	beq	13940 <__assert_fail@plt+0x2920>
   13938:	mov	r0, r4
   1393c:	bl	12300 <__assert_fail@plt+0x12e0>
   13940:	mov	r0, r6
   13944:	bl	143f4 <__assert_fail@plt+0x33d4>
   13948:	str	r0, [r9]
   1394c:	mov	r4, r0
   13950:	add	r3, sp, #8
   13954:	ldr	r0, [r7]
   13958:	ldr	r1, [r7, #40]	; 0x28
   1395c:	ldr	r2, [r7, #44]	; 0x2c
   13960:	stm	sp, {r0, r8}
   13964:	ldr	r0, [sp, #20]
   13968:	stm	r3, {r0, r1, r2}
   1396c:	ldr	r2, [sp, #32]
   13970:	ldr	r3, [sp, #36]	; 0x24
   13974:	mov	r0, r4
   13978:	mov	r1, r6
   1397c:	bl	12600 <__assert_fail@plt+0x15e0>
   13980:	ldr	r0, [sp, #28]
   13984:	ldr	r1, [sp, #24]
   13988:	str	r1, [r0]
   1398c:	mov	r0, r4
   13990:	sub	sp, fp, #28
   13994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13998:	bl	10ffc <abort@plt>
   1399c:	movw	r3, #24992	; 0x61a0
   139a0:	movt	r3, #2
   139a4:	b	13804 <__assert_fail@plt+0x27e4>
   139a8:	movw	r3, #24992	; 0x61a0
   139ac:	mov	r1, r0
   139b0:	mov	r0, #0
   139b4:	mvn	r2, #0
   139b8:	movt	r3, #2
   139bc:	b	13804 <__assert_fail@plt+0x27e4>
   139c0:	movw	r3, #24992	; 0x61a0
   139c4:	mov	r2, r1
   139c8:	mov	r1, r0
   139cc:	mov	r0, #0
   139d0:	movt	r3, #2
   139d4:	b	13804 <__assert_fail@plt+0x27e4>
   139d8:	push	{fp, lr}
   139dc:	mov	fp, sp
   139e0:	sub	sp, sp, #48	; 0x30
   139e4:	vmov.i32	q8, #0	; 0x00000000
   139e8:	mov	ip, #32
   139ec:	mov	r3, sp
   139f0:	mov	lr, r2
   139f4:	cmp	r1, #10
   139f8:	add	r2, r3, #16
   139fc:	vst1.64	{d16-d17}, [r3], ip
   13a00:	vst1.64	{d16-d17}, [r2]
   13a04:	vst1.64	{d16-d17}, [r3]
   13a08:	beq	13a28 <__assert_fail@plt+0x2a08>
   13a0c:	str	r1, [sp]
   13a10:	mov	r3, sp
   13a14:	mov	r1, lr
   13a18:	mvn	r2, #0
   13a1c:	bl	13804 <__assert_fail@plt+0x27e4>
   13a20:	mov	sp, fp
   13a24:	pop	{fp, pc}
   13a28:	bl	10ffc <abort@plt>
   13a2c:	push	{r4, sl, fp, lr}
   13a30:	add	fp, sp, #8
   13a34:	sub	sp, sp, #48	; 0x30
   13a38:	vmov.i32	q8, #0	; 0x00000000
   13a3c:	mov	ip, r3
   13a40:	mov	r3, sp
   13a44:	mov	lr, #32
   13a48:	cmp	r1, #10
   13a4c:	add	r4, r3, #16
   13a50:	vst1.64	{d16-d17}, [r3], lr
   13a54:	vst1.64	{d16-d17}, [r4]
   13a58:	vst1.64	{d16-d17}, [r3]
   13a5c:	beq	13a7c <__assert_fail@plt+0x2a5c>
   13a60:	str	r1, [sp]
   13a64:	mov	r1, r2
   13a68:	mov	r3, sp
   13a6c:	mov	r2, ip
   13a70:	bl	13804 <__assert_fail@plt+0x27e4>
   13a74:	sub	sp, fp, #8
   13a78:	pop	{r4, sl, fp, pc}
   13a7c:	bl	10ffc <abort@plt>
   13a80:	mov	r2, r1
   13a84:	mov	r1, r0
   13a88:	mov	r0, #0
   13a8c:	b	139d8 <__assert_fail@plt+0x29b8>
   13a90:	mov	r3, r2
   13a94:	mov	r2, r1
   13a98:	mov	r1, r0
   13a9c:	mov	r0, #0
   13aa0:	b	13a2c <__assert_fail@plt+0x2a0c>
   13aa4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13aa8:	add	fp, sp, #24
   13aac:	sub	sp, sp, #48	; 0x30
   13ab0:	movw	r8, #24992	; 0x61a0
   13ab4:	mov	lr, r0
   13ab8:	mov	r3, sp
   13abc:	mov	ip, r1
   13ac0:	movt	r8, #2
   13ac4:	mov	r1, r3
   13ac8:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13acc:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13ad0:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13ad4:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13ad8:	ubfx	r0, r2, #5, #3
   13adc:	and	r2, r2, #31
   13ae0:	mov	r4, #1
   13ae4:	add	r0, r3, r0, lsl #2
   13ae8:	ldr	r1, [r0, #8]
   13aec:	bic	r4, r4, r1, lsr r2
   13af0:	eor	r1, r1, r4, lsl r2
   13af4:	mov	r2, ip
   13af8:	str	r1, [r0, #8]
   13afc:	mov	r0, #0
   13b00:	mov	r1, lr
   13b04:	bl	13804 <__assert_fail@plt+0x27e4>
   13b08:	sub	sp, fp, #24
   13b0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b14:	add	fp, sp, #24
   13b18:	sub	sp, sp, #48	; 0x30
   13b1c:	movw	lr, #24992	; 0x61a0
   13b20:	mov	ip, r0
   13b24:	mov	r3, sp
   13b28:	movt	lr, #2
   13b2c:	mov	r2, r3
   13b30:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13b34:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13b38:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13b3c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13b40:	ubfx	r0, r1, #5, #3
   13b44:	and	r1, r1, #31
   13b48:	mov	r7, #1
   13b4c:	add	r0, r3, r0, lsl #2
   13b50:	ldr	r2, [r0, #8]
   13b54:	bic	r7, r7, r2, lsr r1
   13b58:	eor	r1, r2, r7, lsl r1
   13b5c:	mvn	r2, #0
   13b60:	str	r1, [r0, #8]
   13b64:	mov	r0, #0
   13b68:	mov	r1, ip
   13b6c:	bl	13804 <__assert_fail@plt+0x27e4>
   13b70:	sub	sp, fp, #24
   13b74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b78:	push	{r4, r5, r6, r7, fp, lr}
   13b7c:	add	fp, sp, #16
   13b80:	sub	sp, sp, #48	; 0x30
   13b84:	movw	lr, #24992	; 0x61a0
   13b88:	mov	ip, r0
   13b8c:	mov	r3, sp
   13b90:	movt	lr, #2
   13b94:	mov	r2, r3
   13b98:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13b9c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13ba0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13ba4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13ba8:	mov	r1, ip
   13bac:	mvn	r2, #0
   13bb0:	ldr	r0, [sp, #12]
   13bb4:	orr	r0, r0, #67108864	; 0x4000000
   13bb8:	str	r0, [sp, #12]
   13bbc:	mov	r0, #0
   13bc0:	bl	13804 <__assert_fail@plt+0x27e4>
   13bc4:	sub	sp, fp, #16
   13bc8:	pop	{r4, r5, r6, r7, fp, pc}
   13bcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bd0:	add	fp, sp, #24
   13bd4:	sub	sp, sp, #48	; 0x30
   13bd8:	movw	r8, #24992	; 0x61a0
   13bdc:	mov	ip, r1
   13be0:	mov	lr, r0
   13be4:	mov	r3, sp
   13be8:	movt	r8, #2
   13bec:	mov	r2, r3
   13bf0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13bf4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13bf8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13bfc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13c00:	mov	r1, lr
   13c04:	mov	r2, ip
   13c08:	ldr	r0, [sp, #12]
   13c0c:	orr	r0, r0, #67108864	; 0x4000000
   13c10:	str	r0, [sp, #12]
   13c14:	mov	r0, #0
   13c18:	bl	13804 <__assert_fail@plt+0x27e4>
   13c1c:	sub	sp, fp, #24
   13c20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c28:	add	fp, sp, #24
   13c2c:	sub	sp, sp, #96	; 0x60
   13c30:	vmov.i32	q8, #0	; 0x00000000
   13c34:	mov	lr, sp
   13c38:	mov	ip, r2
   13c3c:	cmp	r1, #10
   13c40:	add	r3, lr, #16
   13c44:	mov	r2, lr
   13c48:	vst1.64	{d16-d17}, [r3]
   13c4c:	mov	r3, #28
   13c50:	vst1.64	{d16-d17}, [r2], r3
   13c54:	vst1.32	{d16-d17}, [r2]
   13c58:	beq	13c98 <__assert_fail@plt+0x2c78>
   13c5c:	str	r1, [sp, #48]	; 0x30
   13c60:	add	r3, sp, #48	; 0x30
   13c64:	ldm	lr!, {r2, r4, r5, r6, r7}
   13c68:	add	r1, r3, #4
   13c6c:	stmia	r1!, {r2, r4, r5, r6, r7}
   13c70:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13c74:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13c78:	mvn	r2, #0
   13c7c:	ldr	r1, [sp, #60]	; 0x3c
   13c80:	orr	r1, r1, #67108864	; 0x4000000
   13c84:	str	r1, [sp, #60]	; 0x3c
   13c88:	mov	r1, ip
   13c8c:	bl	13804 <__assert_fail@plt+0x27e4>
   13c90:	sub	sp, fp, #24
   13c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c98:	bl	10ffc <abort@plt>
   13c9c:	push	{fp, lr}
   13ca0:	mov	fp, sp
   13ca4:	sub	sp, sp, #8
   13ca8:	mvn	ip, #0
   13cac:	str	ip, [sp]
   13cb0:	bl	13cbc <__assert_fail@plt+0x2c9c>
   13cb4:	mov	sp, fp
   13cb8:	pop	{fp, pc}
   13cbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13cc0:	add	fp, sp, #24
   13cc4:	sub	sp, sp, #48	; 0x30
   13cc8:	movw	ip, #24992	; 0x61a0
   13ccc:	mov	lr, r3
   13cd0:	mov	r3, sp
   13cd4:	cmp	r1, #0
   13cd8:	movt	ip, #2
   13cdc:	cmpne	r2, #0
   13ce0:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13ce4:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13ce8:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13cec:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13cf0:	mov	r3, #10
   13cf4:	str	r3, [sp]
   13cf8:	bne	13d00 <__assert_fail@plt+0x2ce0>
   13cfc:	bl	10ffc <abort@plt>
   13d00:	ldr	ip, [fp, #8]
   13d04:	str	r2, [sp, #44]	; 0x2c
   13d08:	str	r1, [sp, #40]	; 0x28
   13d0c:	mov	r3, sp
   13d10:	mov	r1, lr
   13d14:	mov	r2, ip
   13d18:	bl	13804 <__assert_fail@plt+0x27e4>
   13d1c:	sub	sp, fp, #24
   13d20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d24:	push	{fp, lr}
   13d28:	mov	fp, sp
   13d2c:	sub	sp, sp, #8
   13d30:	mov	r3, r2
   13d34:	mov	r2, r1
   13d38:	mov	r1, r0
   13d3c:	mvn	r0, #0
   13d40:	str	r0, [sp]
   13d44:	mov	r0, #0
   13d48:	bl	13cbc <__assert_fail@plt+0x2c9c>
   13d4c:	mov	sp, fp
   13d50:	pop	{fp, pc}
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	sub	sp, sp, #8
   13d60:	mov	ip, r2
   13d64:	mov	r2, r1
   13d68:	mov	r1, r0
   13d6c:	str	r3, [sp]
   13d70:	mov	r0, #0
   13d74:	mov	r3, ip
   13d78:	bl	13cbc <__assert_fail@plt+0x2c9c>
   13d7c:	mov	sp, fp
   13d80:	pop	{fp, pc}
   13d84:	movw	r3, #24832	; 0x6100
   13d88:	movt	r3, #2
   13d8c:	b	13804 <__assert_fail@plt+0x27e4>
   13d90:	movw	r3, #24832	; 0x6100
   13d94:	mov	r2, r1
   13d98:	mov	r1, r0
   13d9c:	mov	r0, #0
   13da0:	movt	r3, #2
   13da4:	b	13804 <__assert_fail@plt+0x27e4>
   13da8:	movw	r3, #24832	; 0x6100
   13dac:	mvn	r2, #0
   13db0:	movt	r3, #2
   13db4:	b	13804 <__assert_fail@plt+0x27e4>
   13db8:	movw	r3, #24832	; 0x6100
   13dbc:	mov	r1, r0
   13dc0:	mov	r0, #0
   13dc4:	mvn	r2, #0
   13dc8:	movt	r3, #2
   13dcc:	b	13804 <__assert_fail@plt+0x27e4>
   13dd0:	push	{r4, r5, fp, lr}
   13dd4:	add	fp, sp, #8
   13dd8:	mov	r5, r0
   13ddc:	mov	r4, r1
   13de0:	mov	r0, #0
   13de4:	mov	r2, #5
   13de8:	mov	r1, r5
   13dec:	bl	10e58 <dcgettext@plt>
   13df0:	cmp	r0, r5
   13df4:	popne	{r4, r5, fp, pc}
   13df8:	bl	14988 <__assert_fail@plt+0x3968>
   13dfc:	ldrb	r1, [r0]
   13e00:	and	r1, r1, #223	; 0xdf
   13e04:	cmp	r1, #71	; 0x47
   13e08:	beq	13e70 <__assert_fail@plt+0x2e50>
   13e0c:	cmp	r1, #85	; 0x55
   13e10:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e14:	ldrb	r1, [r0, #1]
   13e18:	and	r1, r1, #223	; 0xdf
   13e1c:	cmp	r1, #84	; 0x54
   13e20:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e24:	ldrb	r1, [r0, #2]
   13e28:	and	r1, r1, #223	; 0xdf
   13e2c:	cmp	r1, #70	; 0x46
   13e30:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e34:	ldrb	r1, [r0, #3]
   13e38:	cmp	r1, #45	; 0x2d
   13e3c:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e40:	ldrb	r1, [r0, #4]
   13e44:	cmp	r1, #56	; 0x38
   13e48:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e4c:	ldrb	r0, [r0, #5]
   13e50:	cmp	r0, #0
   13e54:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e58:	ldrb	r1, [r5]
   13e5c:	movw	r2, #21920	; 0x55a0
   13e60:	movw	r0, #21924	; 0x55a4
   13e64:	movt	r2, #1
   13e68:	movt	r0, #1
   13e6c:	b	13ef8 <__assert_fail@plt+0x2ed8>
   13e70:	ldrb	r1, [r0, #1]
   13e74:	and	r1, r1, #223	; 0xdf
   13e78:	cmp	r1, #66	; 0x42
   13e7c:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e80:	ldrb	r1, [r0, #2]
   13e84:	cmp	r1, #49	; 0x31
   13e88:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e8c:	ldrb	r1, [r0, #3]
   13e90:	cmp	r1, #56	; 0x38
   13e94:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13e98:	ldrb	r1, [r0, #4]
   13e9c:	cmp	r1, #48	; 0x30
   13ea0:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13ea4:	ldrb	r1, [r0, #5]
   13ea8:	cmp	r1, #51	; 0x33
   13eac:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13eb0:	ldrb	r1, [r0, #6]
   13eb4:	cmp	r1, #48	; 0x30
   13eb8:	bne	13ec8 <__assert_fail@plt+0x2ea8>
   13ebc:	ldrb	r0, [r0, #7]
   13ec0:	cmp	r0, #0
   13ec4:	beq	13ee4 <__assert_fail@plt+0x2ec4>
   13ec8:	movw	r1, #21916	; 0x559c
   13ecc:	movw	r0, #21748	; 0x54f4
   13ed0:	cmp	r4, #9
   13ed4:	movt	r1, #1
   13ed8:	movt	r0, #1
   13edc:	moveq	r0, r1
   13ee0:	pop	{r4, r5, fp, pc}
   13ee4:	ldrb	r1, [r5]
   13ee8:	movw	r2, #21928	; 0x55a8
   13eec:	movw	r0, #21932	; 0x55ac
   13ef0:	movt	r2, #1
   13ef4:	movt	r0, #1
   13ef8:	cmp	r1, #96	; 0x60
   13efc:	moveq	r0, r2
   13f00:	pop	{r4, r5, fp, pc}
   13f04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f08:	add	fp, sp, #24
   13f0c:	sub	sp, sp, #32
   13f10:	ldr	r6, [fp, #12]
   13f14:	ldr	r7, [fp, #8]
   13f18:	mov	r4, r2
   13f1c:	mov	r8, r0
   13f20:	cmp	r1, #0
   13f24:	beq	13f4c <__assert_fail@plt+0x2f2c>
   13f28:	movw	r2, #22020	; 0x5604
   13f2c:	mov	r5, r1
   13f30:	str	r3, [sp, #4]
   13f34:	str	r4, [sp]
   13f38:	mov	r0, r8
   13f3c:	mov	r1, #1
   13f40:	movt	r2, #1
   13f44:	mov	r3, r5
   13f48:	b	13f64 <__assert_fail@plt+0x2f44>
   13f4c:	movw	r2, #22032	; 0x5610
   13f50:	str	r3, [sp]
   13f54:	mov	r0, r8
   13f58:	mov	r1, #1
   13f5c:	mov	r3, r4
   13f60:	movt	r2, #1
   13f64:	bl	10f78 <__fprintf_chk@plt>
   13f68:	movw	r1, #22039	; 0x5617
   13f6c:	mov	r0, #0
   13f70:	mov	r2, #5
   13f74:	movt	r1, #1
   13f78:	bl	10e58 <dcgettext@plt>
   13f7c:	movw	r2, #22757	; 0x58e5
   13f80:	mov	r3, r0
   13f84:	movw	r0, #2022	; 0x7e6
   13f88:	mov	r1, #1
   13f8c:	movt	r2, #1
   13f90:	str	r0, [sp]
   13f94:	mov	r0, r8
   13f98:	bl	10f78 <__fprintf_chk@plt>
   13f9c:	movw	r4, #20654	; 0x50ae
   13fa0:	mov	r1, r8
   13fa4:	movt	r4, #1
   13fa8:	mov	r0, r4
   13fac:	bl	10de0 <fputs_unlocked@plt>
   13fb0:	movw	r1, #22043	; 0x561b
   13fb4:	mov	r0, #0
   13fb8:	mov	r2, #5
   13fbc:	movt	r1, #1
   13fc0:	bl	10e58 <dcgettext@plt>
   13fc4:	movw	r3, #22214	; 0x56c6
   13fc8:	mov	r2, r0
   13fcc:	mov	r0, r8
   13fd0:	mov	r1, #1
   13fd4:	movt	r3, #1
   13fd8:	bl	10f78 <__fprintf_chk@plt>
   13fdc:	mov	r0, r4
   13fe0:	mov	r1, r8
   13fe4:	bl	10de0 <fputs_unlocked@plt>
   13fe8:	cmp	r6, #9
   13fec:	bhi	14050 <__assert_fail@plt+0x3030>
   13ff0:	add	r0, pc, #0
   13ff4:	ldr	pc, [r0, r6, lsl #2]
   13ff8:	andeq	r4, r1, r8, lsr #4
   13ffc:	andeq	r4, r1, r0, lsr #32
   14000:	andeq	r4, r1, ip, asr r0
   14004:	andeq	r4, r1, r4, lsl #1
   14008:	andeq	r4, r1, ip, lsr #1
   1400c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14010:	strdeq	r4, [r1], -ip
   14014:	andeq	r4, r1, r4, lsr r1
   14018:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1401c:	andeq	r4, r1, ip, ror r1
   14020:	movw	r1, #22248	; 0x56e8
   14024:	mov	r0, #0
   14028:	mov	r2, #5
   1402c:	movt	r1, #1
   14030:	bl	10e58 <dcgettext@plt>
   14034:	ldr	r3, [r7]
   14038:	mov	r2, r0
   1403c:	mov	r0, r8
   14040:	mov	r1, #1
   14044:	sub	sp, fp, #24
   14048:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1404c:	b	10f78 <__fprintf_chk@plt>
   14050:	movw	r1, #22567	; 0x5827
   14054:	movt	r1, #1
   14058:	b	14184 <__assert_fail@plt+0x3164>
   1405c:	movw	r1, #22264	; 0x56f8
   14060:	mov	r0, #0
   14064:	mov	r2, #5
   14068:	movt	r1, #1
   1406c:	bl	10e58 <dcgettext@plt>
   14070:	mov	r2, r0
   14074:	ldr	r3, [r7]
   14078:	ldr	r0, [r7, #4]
   1407c:	str	r0, [sp]
   14080:	b	14170 <__assert_fail@plt+0x3150>
   14084:	movw	r1, #22287	; 0x570f
   14088:	mov	r0, #0
   1408c:	mov	r2, #5
   14090:	movt	r1, #1
   14094:	bl	10e58 <dcgettext@plt>
   14098:	mov	r2, r0
   1409c:	ldr	r3, [r7]
   140a0:	ldmib	r7, {r0, r1}
   140a4:	stm	sp, {r0, r1}
   140a8:	b	14170 <__assert_fail@plt+0x3150>
   140ac:	movw	r1, #22315	; 0x572b
   140b0:	mov	r0, #0
   140b4:	mov	r2, #5
   140b8:	movt	r1, #1
   140bc:	bl	10e58 <dcgettext@plt>
   140c0:	ldr	r3, [r7]
   140c4:	mov	r2, r0
   140c8:	ldmib	r7, {r0, r1, r7}
   140cc:	stm	sp, {r0, r1, r7}
   140d0:	b	14170 <__assert_fail@plt+0x3150>
   140d4:	movw	r1, #22347	; 0x574b
   140d8:	mov	r0, #0
   140dc:	mov	r2, #5
   140e0:	movt	r1, #1
   140e4:	bl	10e58 <dcgettext@plt>
   140e8:	ldr	r3, [r7]
   140ec:	mov	r2, r0
   140f0:	ldmib	r7, {r0, r1, r6, r7}
   140f4:	stm	sp, {r0, r1, r6, r7}
   140f8:	b	14170 <__assert_fail@plt+0x3150>
   140fc:	movw	r1, #22383	; 0x576f
   14100:	mov	r0, #0
   14104:	mov	r2, #5
   14108:	movt	r1, #1
   1410c:	bl	10e58 <dcgettext@plt>
   14110:	mov	r2, r0
   14114:	ldr	r3, [r7]
   14118:	ldmib	r7, {r0, r1, r6}
   1411c:	ldr	r5, [r7, #16]
   14120:	ldr	r7, [r7, #20]
   14124:	stm	sp, {r0, r1, r6}
   14128:	str	r5, [sp, #12]
   1412c:	str	r7, [sp, #16]
   14130:	b	14170 <__assert_fail@plt+0x3150>
   14134:	movw	r1, #22423	; 0x5797
   14138:	mov	r0, #0
   1413c:	mov	r2, #5
   14140:	movt	r1, #1
   14144:	bl	10e58 <dcgettext@plt>
   14148:	mov	r2, r0
   1414c:	ldr	r3, [r7]
   14150:	ldmib	r7, {r0, r1, r6}
   14154:	ldr	r5, [r7, #16]
   14158:	ldr	r4, [r7, #20]
   1415c:	ldr	r7, [r7, #24]
   14160:	stm	sp, {r0, r1, r6}
   14164:	str	r5, [sp, #12]
   14168:	str	r4, [sp, #16]
   1416c:	str	r7, [sp, #20]
   14170:	mov	r0, r8
   14174:	mov	r1, #1
   14178:	b	14224 <__assert_fail@plt+0x3204>
   1417c:	movw	r1, #22515	; 0x57f3
   14180:	movt	r1, #1
   14184:	mov	r0, #0
   14188:	mov	r2, #5
   1418c:	bl	10e58 <dcgettext@plt>
   14190:	mov	ip, r0
   14194:	ldr	r3, [r7]
   14198:	ldr	r0, [r7, #4]
   1419c:	ldr	r1, [r7, #8]
   141a0:	ldr	r6, [r7, #12]
   141a4:	ldr	r5, [r7, #16]
   141a8:	ldr	r4, [r7, #20]
   141ac:	ldr	r2, [r7, #24]
   141b0:	ldr	lr, [r7, #28]
   141b4:	ldr	r7, [r7, #32]
   141b8:	stm	sp, {r0, r1, r6}
   141bc:	str	r5, [sp, #12]
   141c0:	str	r4, [sp, #16]
   141c4:	str	r2, [sp, #20]
   141c8:	str	lr, [sp, #24]
   141cc:	str	r7, [sp, #28]
   141d0:	b	14218 <__assert_fail@plt+0x31f8>
   141d4:	movw	r1, #22467	; 0x57c3
   141d8:	mov	r0, #0
   141dc:	mov	r2, #5
   141e0:	movt	r1, #1
   141e4:	bl	10e58 <dcgettext@plt>
   141e8:	mov	ip, r0
   141ec:	ldr	r3, [r7]
   141f0:	ldmib	r7, {r0, r1, r6}
   141f4:	ldr	r5, [r7, #16]
   141f8:	ldr	r4, [r7, #20]
   141fc:	ldr	r2, [r7, #24]
   14200:	ldr	r7, [r7, #28]
   14204:	stm	sp, {r0, r1, r6}
   14208:	str	r5, [sp, #12]
   1420c:	str	r4, [sp, #16]
   14210:	str	r2, [sp, #20]
   14214:	str	r7, [sp, #24]
   14218:	mov	r0, r8
   1421c:	mov	r1, #1
   14220:	mov	r2, ip
   14224:	bl	10f78 <__fprintf_chk@plt>
   14228:	sub	sp, fp, #24
   1422c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14230:	push	{r4, sl, fp, lr}
   14234:	add	fp, sp, #8
   14238:	sub	sp, sp, #8
   1423c:	ldr	ip, [fp, #8]
   14240:	mov	lr, #0
   14244:	ldr	r4, [ip, lr, lsl #2]
   14248:	add	lr, lr, #1
   1424c:	cmp	r4, #0
   14250:	bne	14244 <__assert_fail@plt+0x3224>
   14254:	sub	r4, lr, #1
   14258:	str	ip, [sp]
   1425c:	str	r4, [sp, #4]
   14260:	bl	13f04 <__assert_fail@plt+0x2ee4>
   14264:	sub	sp, fp, #8
   14268:	pop	{r4, sl, fp, pc}
   1426c:	push	{r4, r5, fp, lr}
   14270:	add	fp, sp, #8
   14274:	sub	sp, sp, #48	; 0x30
   14278:	ldr	r4, [fp, #8]
   1427c:	mov	ip, #0
   14280:	add	lr, sp, #8
   14284:	ldr	r5, [r4]
   14288:	cmp	r5, #0
   1428c:	str	r5, [lr, ip, lsl #2]
   14290:	beq	142a8 <__assert_fail@plt+0x3288>
   14294:	add	ip, ip, #1
   14298:	add	r4, r4, #4
   1429c:	cmp	ip, #10
   142a0:	bne	14284 <__assert_fail@plt+0x3264>
   142a4:	mov	ip, #10
   142a8:	str	lr, [sp]
   142ac:	str	ip, [sp, #4]
   142b0:	bl	13f04 <__assert_fail@plt+0x2ee4>
   142b4:	sub	sp, fp, #8
   142b8:	pop	{r4, r5, fp, pc}
   142bc:	push	{fp, lr}
   142c0:	mov	fp, sp
   142c4:	sub	sp, sp, #8
   142c8:	add	ip, fp, #8
   142cc:	str	ip, [sp, #4]
   142d0:	str	ip, [sp]
   142d4:	bl	1426c <__assert_fail@plt+0x324c>
   142d8:	mov	sp, fp
   142dc:	pop	{fp, pc}
   142e0:	push	{fp, lr}
   142e4:	mov	fp, sp
   142e8:	movw	r0, #24908	; 0x614c
   142ec:	movt	r0, #2
   142f0:	ldr	r1, [r0]
   142f4:	movw	r0, #20654	; 0x50ae
   142f8:	movt	r0, #1
   142fc:	bl	10de0 <fputs_unlocked@plt>
   14300:	movw	r1, #22627	; 0x5863
   14304:	mov	r0, #0
   14308:	mov	r2, #5
   1430c:	movt	r1, #1
   14310:	bl	10e58 <dcgettext@plt>
   14314:	movw	r2, #22647	; 0x5877
   14318:	mov	r1, r0
   1431c:	mov	r0, #1
   14320:	movt	r2, #1
   14324:	bl	10f60 <__printf_chk@plt>
   14328:	movw	r1, #22669	; 0x588d
   1432c:	mov	r0, #0
   14330:	mov	r2, #5
   14334:	movt	r1, #1
   14338:	bl	10e58 <dcgettext@plt>
   1433c:	movw	r2, #20184	; 0x4ed8
   14340:	movw	r3, #20463	; 0x4fef
   14344:	mov	r1, r0
   14348:	mov	r0, #1
   1434c:	movt	r2, #1
   14350:	movt	r3, #1
   14354:	bl	10f60 <__printf_chk@plt>
   14358:	movw	r1, #22689	; 0x58a1
   1435c:	mov	r0, #0
   14360:	mov	r2, #5
   14364:	movt	r1, #1
   14368:	bl	10e58 <dcgettext@plt>
   1436c:	movw	r2, #22728	; 0x58c8
   14370:	mov	r1, r0
   14374:	mov	r0, #1
   14378:	movt	r2, #1
   1437c:	pop	{fp, lr}
   14380:	b	10f60 <__printf_chk@plt>
   14384:	b	14388 <__assert_fail@plt+0x3368>
   14388:	push	{r4, r5, r6, sl, fp, lr}
   1438c:	add	fp, sp, #16
   14390:	mov	r4, r2
   14394:	mov	r5, r1
   14398:	mov	r6, r0
   1439c:	bl	14a24 <__assert_fail@plt+0x3a04>
   143a0:	cmp	r0, #0
   143a4:	popne	{r4, r5, r6, sl, fp, pc}
   143a8:	cmp	r6, #0
   143ac:	beq	143c0 <__assert_fail@plt+0x33a0>
   143b0:	cmp	r5, #0
   143b4:	cmpne	r4, #0
   143b8:	bne	143c0 <__assert_fail@plt+0x33a0>
   143bc:	pop	{r4, r5, r6, sl, fp, pc}
   143c0:	bl	147f0 <__assert_fail@plt+0x37d0>
   143c4:	push	{fp, lr}
   143c8:	mov	fp, sp
   143cc:	bl	14888 <__assert_fail@plt+0x3868>
   143d0:	cmp	r0, #0
   143d4:	popne	{fp, pc}
   143d8:	bl	147f0 <__assert_fail@plt+0x37d0>
   143dc:	push	{fp, lr}
   143e0:	mov	fp, sp
   143e4:	bl	14888 <__assert_fail@plt+0x3868>
   143e8:	cmp	r0, #0
   143ec:	popne	{fp, pc}
   143f0:	bl	147f0 <__assert_fail@plt+0x37d0>
   143f4:	push	{fp, lr}
   143f8:	mov	fp, sp
   143fc:	bl	14888 <__assert_fail@plt+0x3868>
   14400:	cmp	r0, #0
   14404:	popne	{fp, pc}
   14408:	bl	147f0 <__assert_fail@plt+0x37d0>
   1440c:	push	{r4, r5, fp, lr}
   14410:	add	fp, sp, #8
   14414:	mov	r4, r1
   14418:	mov	r5, r0
   1441c:	bl	148b8 <__assert_fail@plt+0x3898>
   14420:	cmp	r0, #0
   14424:	popne	{r4, r5, fp, pc}
   14428:	cmp	r5, #0
   1442c:	beq	1443c <__assert_fail@plt+0x341c>
   14430:	cmp	r4, #0
   14434:	bne	1443c <__assert_fail@plt+0x341c>
   14438:	pop	{r4, r5, fp, pc}
   1443c:	bl	147f0 <__assert_fail@plt+0x37d0>
   14440:	push	{fp, lr}
   14444:	mov	fp, sp
   14448:	cmp	r1, #0
   1444c:	orreq	r1, r1, #1
   14450:	bl	148b8 <__assert_fail@plt+0x3898>
   14454:	cmp	r0, #0
   14458:	popne	{fp, pc}
   1445c:	bl	147f0 <__assert_fail@plt+0x37d0>
   14460:	push	{fp, lr}
   14464:	mov	fp, sp
   14468:	clz	r3, r2
   1446c:	lsr	ip, r3, #5
   14470:	clz	r3, r1
   14474:	lsr	r3, r3, #5
   14478:	orrs	r3, r3, ip
   1447c:	movwne	r1, #1
   14480:	movwne	r2, #1
   14484:	bl	14a24 <__assert_fail@plt+0x3a04>
   14488:	cmp	r0, #0
   1448c:	popne	{fp, pc}
   14490:	bl	147f0 <__assert_fail@plt+0x37d0>
   14494:	push	{fp, lr}
   14498:	mov	fp, sp
   1449c:	mov	r2, r1
   144a0:	mov	r1, r0
   144a4:	mov	r0, #0
   144a8:	bl	14a24 <__assert_fail@plt+0x3a04>
   144ac:	cmp	r0, #0
   144b0:	popne	{fp, pc}
   144b4:	bl	147f0 <__assert_fail@plt+0x37d0>
   144b8:	mov	r2, r1
   144bc:	mov	r1, r0
   144c0:	mov	r0, #0
   144c4:	b	14460 <__assert_fail@plt+0x3440>
   144c8:	mov	r2, #1
   144cc:	b	144d0 <__assert_fail@plt+0x34b0>
   144d0:	push	{r4, r5, fp, lr}
   144d4:	add	fp, sp, #8
   144d8:	ldr	r5, [r1]
   144dc:	mov	r4, r1
   144e0:	cmp	r0, #0
   144e4:	beq	144fc <__assert_fail@plt+0x34dc>
   144e8:	mov	r1, #1
   144ec:	add	r1, r1, r5, lsr #1
   144f0:	adds	r5, r5, r1
   144f4:	bcc	14514 <__assert_fail@plt+0x34f4>
   144f8:	bl	147f0 <__assert_fail@plt+0x37d0>
   144fc:	cmp	r5, #0
   14500:	bne	14514 <__assert_fail@plt+0x34f4>
   14504:	mov	r1, #64	; 0x40
   14508:	cmp	r2, #64	; 0x40
   1450c:	udiv	r5, r1, r2
   14510:	addhi	r5, r5, #1
   14514:	mov	r1, r5
   14518:	bl	14388 <__assert_fail@plt+0x3368>
   1451c:	str	r5, [r4]
   14520:	pop	{r4, r5, fp, pc}
   14524:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14528:	add	fp, sp, #24
   1452c:	ldr	r6, [r1]
   14530:	mov	r8, r1
   14534:	ldr	r4, [fp, #8]
   14538:	add	r1, r6, r6, asr #1
   1453c:	cmp	r1, r6
   14540:	mvnvs	r1, #-2147483648	; 0x80000000
   14544:	cmp	r1, r3
   14548:	mov	r5, r1
   1454c:	movgt	r5, r3
   14550:	cmn	r3, #1
   14554:	movle	r5, r1
   14558:	cmn	r4, #1
   1455c:	ble	1457c <__assert_fail@plt+0x355c>
   14560:	cmp	r4, #0
   14564:	beq	145d0 <__assert_fail@plt+0x35b0>
   14568:	cmn	r5, #1
   1456c:	ble	145a4 <__assert_fail@plt+0x3584>
   14570:	mvn	r7, #-2147483648	; 0x80000000
   14574:	udiv	r1, r7, r4
   14578:	b	14598 <__assert_fail@plt+0x3578>
   1457c:	cmn	r5, #1
   14580:	ble	145c0 <__assert_fail@plt+0x35a0>
   14584:	cmn	r4, #1
   14588:	beq	145d0 <__assert_fail@plt+0x35b0>
   1458c:	mov	r1, #-2147483648	; 0x80000000
   14590:	mvn	r7, #-2147483648	; 0x80000000
   14594:	sdiv	r1, r1, r4
   14598:	cmp	r1, r5
   1459c:	bge	145d0 <__assert_fail@plt+0x35b0>
   145a0:	b	145e0 <__assert_fail@plt+0x35c0>
   145a4:	beq	145d0 <__assert_fail@plt+0x35b0>
   145a8:	mov	r1, #-2147483648	; 0x80000000
   145ac:	mvn	r7, #-2147483648	; 0x80000000
   145b0:	sdiv	r1, r1, r5
   145b4:	cmp	r1, r4
   145b8:	bge	145d0 <__assert_fail@plt+0x35b0>
   145bc:	b	145e0 <__assert_fail@plt+0x35c0>
   145c0:	mvn	r7, #-2147483648	; 0x80000000
   145c4:	sdiv	r1, r7, r4
   145c8:	cmp	r5, r1
   145cc:	blt	145e0 <__assert_fail@plt+0x35c0>
   145d0:	mul	r1, r5, r4
   145d4:	mov	r7, #64	; 0x40
   145d8:	cmp	r1, #63	; 0x3f
   145dc:	bgt	145e8 <__assert_fail@plt+0x35c8>
   145e0:	sdiv	r5, r7, r4
   145e4:	mul	r1, r5, r4
   145e8:	cmp	r0, #0
   145ec:	moveq	r7, #0
   145f0:	streq	r7, [r8]
   145f4:	sub	r7, r5, r6
   145f8:	cmp	r7, r2
   145fc:	bge	146a0 <__assert_fail@plt+0x3680>
   14600:	add	r5, r6, r2
   14604:	mov	r2, #0
   14608:	mov	r1, #0
   1460c:	cmp	r5, r3
   14610:	movwgt	r2, #1
   14614:	cmn	r3, #1
   14618:	movwgt	r1, #1
   1461c:	cmp	r5, r6
   14620:	bvs	14688 <__assert_fail@plt+0x3668>
   14624:	ands	r1, r1, r2
   14628:	bne	14688 <__assert_fail@plt+0x3668>
   1462c:	cmn	r4, #1
   14630:	ble	14650 <__assert_fail@plt+0x3630>
   14634:	cmp	r4, #0
   14638:	beq	1469c <__assert_fail@plt+0x367c>
   1463c:	cmn	r5, #1
   14640:	ble	14674 <__assert_fail@plt+0x3654>
   14644:	mvn	r1, #-2147483648	; 0x80000000
   14648:	udiv	r1, r1, r4
   1464c:	b	14668 <__assert_fail@plt+0x3648>
   14650:	cmn	r5, #1
   14654:	ble	1468c <__assert_fail@plt+0x366c>
   14658:	cmn	r4, #1
   1465c:	beq	1469c <__assert_fail@plt+0x367c>
   14660:	mov	r1, #-2147483648	; 0x80000000
   14664:	sdiv	r1, r1, r4
   14668:	cmp	r1, r5
   1466c:	bge	1469c <__assert_fail@plt+0x367c>
   14670:	b	14688 <__assert_fail@plt+0x3668>
   14674:	beq	1469c <__assert_fail@plt+0x367c>
   14678:	mov	r1, #-2147483648	; 0x80000000
   1467c:	sdiv	r1, r1, r5
   14680:	cmp	r1, r4
   14684:	bge	1469c <__assert_fail@plt+0x367c>
   14688:	bl	147f0 <__assert_fail@plt+0x37d0>
   1468c:	mvn	r1, #-2147483648	; 0x80000000
   14690:	sdiv	r1, r1, r4
   14694:	cmp	r5, r1
   14698:	blt	14688 <__assert_fail@plt+0x3668>
   1469c:	mul	r1, r5, r4
   146a0:	bl	1440c <__assert_fail@plt+0x33ec>
   146a4:	str	r5, [r8]
   146a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146ac:	push	{fp, lr}
   146b0:	mov	fp, sp
   146b4:	mov	r1, #1
   146b8:	bl	14834 <__assert_fail@plt+0x3814>
   146bc:	cmp	r0, #0
   146c0:	popne	{fp, pc}
   146c4:	bl	147f0 <__assert_fail@plt+0x37d0>
   146c8:	push	{fp, lr}
   146cc:	mov	fp, sp
   146d0:	bl	14834 <__assert_fail@plt+0x3814>
   146d4:	cmp	r0, #0
   146d8:	popne	{fp, pc}
   146dc:	bl	147f0 <__assert_fail@plt+0x37d0>
   146e0:	push	{fp, lr}
   146e4:	mov	fp, sp
   146e8:	mov	r1, #1
   146ec:	bl	14834 <__assert_fail@plt+0x3814>
   146f0:	cmp	r0, #0
   146f4:	popne	{fp, pc}
   146f8:	bl	147f0 <__assert_fail@plt+0x37d0>
   146fc:	push	{fp, lr}
   14700:	mov	fp, sp
   14704:	bl	14834 <__assert_fail@plt+0x3814>
   14708:	cmp	r0, #0
   1470c:	popne	{fp, pc}
   14710:	bl	147f0 <__assert_fail@plt+0x37d0>
   14714:	push	{r4, r5, fp, lr}
   14718:	add	fp, sp, #8
   1471c:	mov	r5, r0
   14720:	mov	r0, r1
   14724:	mov	r4, r1
   14728:	bl	14888 <__assert_fail@plt+0x3868>
   1472c:	cmp	r0, #0
   14730:	beq	14744 <__assert_fail@plt+0x3724>
   14734:	mov	r1, r5
   14738:	mov	r2, r4
   1473c:	pop	{r4, r5, fp, lr}
   14740:	b	10e34 <memcpy@plt>
   14744:	bl	147f0 <__assert_fail@plt+0x37d0>
   14748:	push	{r4, r5, fp, lr}
   1474c:	add	fp, sp, #8
   14750:	mov	r5, r0
   14754:	mov	r0, r1
   14758:	mov	r4, r1
   1475c:	bl	14888 <__assert_fail@plt+0x3868>
   14760:	cmp	r0, #0
   14764:	beq	14778 <__assert_fail@plt+0x3758>
   14768:	mov	r1, r5
   1476c:	mov	r2, r4
   14770:	pop	{r4, r5, fp, lr}
   14774:	b	10e34 <memcpy@plt>
   14778:	bl	147f0 <__assert_fail@plt+0x37d0>
   1477c:	push	{r4, r5, fp, lr}
   14780:	add	fp, sp, #8
   14784:	mov	r5, r0
   14788:	add	r0, r1, #1
   1478c:	mov	r4, r1
   14790:	bl	14888 <__assert_fail@plt+0x3868>
   14794:	cmp	r0, #0
   14798:	beq	147b4 <__assert_fail@plt+0x3794>
   1479c:	mov	r1, #0
   147a0:	mov	r2, r4
   147a4:	strb	r1, [r0, r4]
   147a8:	mov	r1, r5
   147ac:	pop	{r4, r5, fp, lr}
   147b0:	b	10e34 <memcpy@plt>
   147b4:	bl	147f0 <__assert_fail@plt+0x37d0>
   147b8:	push	{r4, r5, fp, lr}
   147bc:	add	fp, sp, #8
   147c0:	mov	r4, r0
   147c4:	bl	10f30 <strlen@plt>
   147c8:	add	r5, r0, #1
   147cc:	mov	r0, r5
   147d0:	bl	14888 <__assert_fail@plt+0x3868>
   147d4:	cmp	r0, #0
   147d8:	beq	147ec <__assert_fail@plt+0x37cc>
   147dc:	mov	r1, r4
   147e0:	mov	r2, r5
   147e4:	pop	{r4, r5, fp, lr}
   147e8:	b	10e34 <memcpy@plt>
   147ec:	bl	147f0 <__assert_fail@plt+0x37d0>
   147f0:	push	{fp, lr}
   147f4:	mov	fp, sp
   147f8:	movw	r0, #24812	; 0x60ec
   147fc:	movw	r1, #22804	; 0x5914
   14800:	mov	r2, #5
   14804:	movt	r0, #2
   14808:	movt	r1, #1
   1480c:	ldr	r4, [r0]
   14810:	mov	r0, #0
   14814:	bl	10e58 <dcgettext@plt>
   14818:	movw	r2, #21077	; 0x5255
   1481c:	mov	r3, r0
   14820:	mov	r0, r4
   14824:	mov	r1, #0
   14828:	movt	r2, #1
   1482c:	bl	10ec4 <error@plt>
   14830:	bl	10ffc <abort@plt>
   14834:	clz	r2, r1
   14838:	clz	r3, r0
   1483c:	lsr	r2, r2, #5
   14840:	lsr	r3, r3, #5
   14844:	orrs	r2, r3, r2
   14848:	movwne	r1, #1
   1484c:	movwne	r0, #1
   14850:	cmp	r1, #0
   14854:	beq	14884 <__assert_fail@plt+0x3864>
   14858:	mvn	r2, #-2147483648	; 0x80000000
   1485c:	udiv	r2, r2, r1
   14860:	cmp	r2, r0
   14864:	bcs	14884 <__assert_fail@plt+0x3864>
   14868:	push	{fp, lr}
   1486c:	mov	fp, sp
   14870:	bl	10f3c <__errno_location@plt>
   14874:	mov	r1, #12
   14878:	str	r1, [r0]
   1487c:	mov	r0, #0
   14880:	pop	{fp, pc}
   14884:	b	10dd4 <calloc@plt>
   14888:	cmp	r0, #0
   1488c:	movweq	r0, #1
   14890:	cmn	r0, #1
   14894:	ble	1489c <__assert_fail@plt+0x387c>
   14898:	b	10ed0 <malloc@plt>
   1489c:	push	{fp, lr}
   148a0:	mov	fp, sp
   148a4:	bl	10f3c <__errno_location@plt>
   148a8:	mov	r1, #12
   148ac:	str	r1, [r0]
   148b0:	mov	r0, #0
   148b4:	pop	{fp, pc}
   148b8:	push	{fp, lr}
   148bc:	mov	fp, sp
   148c0:	cmp	r0, #0
   148c4:	beq	148e0 <__assert_fail@plt+0x38c0>
   148c8:	cmp	r1, #0
   148cc:	beq	148ec <__assert_fail@plt+0x38cc>
   148d0:	cmn	r1, #1
   148d4:	ble	148f4 <__assert_fail@plt+0x38d4>
   148d8:	pop	{fp, lr}
   148dc:	b	10e64 <realloc@plt>
   148e0:	mov	r0, r1
   148e4:	pop	{fp, lr}
   148e8:	b	14888 <__assert_fail@plt+0x3868>
   148ec:	bl	12300 <__assert_fail@plt+0x12e0>
   148f0:	b	14900 <__assert_fail@plt+0x38e0>
   148f4:	bl	10f3c <__errno_location@plt>
   148f8:	mov	r1, #12
   148fc:	str	r1, [r0]
   14900:	mov	r0, #0
   14904:	pop	{fp, pc}
   14908:	push	{r4, r5, r6, sl, fp, lr}
   1490c:	add	fp, sp, #16
   14910:	mov	r4, r0
   14914:	bl	10ea0 <__fpending@plt>
   14918:	mov	r5, r0
   1491c:	mov	r0, r4
   14920:	bl	10eac <ferror_unlocked@plt>
   14924:	mov	r6, r0
   14928:	mov	r0, r4
   1492c:	bl	12208 <__assert_fail@plt+0x11e8>
   14930:	cmp	r6, #0
   14934:	beq	14954 <__assert_fail@plt+0x3934>
   14938:	mvn	r4, #0
   1493c:	cmp	r0, #0
   14940:	bne	14980 <__assert_fail@plt+0x3960>
   14944:	bl	10f3c <__errno_location@plt>
   14948:	mov	r1, #0
   1494c:	str	r1, [r0]
   14950:	b	14980 <__assert_fail@plt+0x3960>
   14954:	cmp	r0, #0
   14958:	mov	r4, r0
   1495c:	mvnne	r4, #0
   14960:	cmp	r5, #0
   14964:	bne	14980 <__assert_fail@plt+0x3960>
   14968:	cmp	r0, #0
   1496c:	beq	14980 <__assert_fail@plt+0x3960>
   14970:	bl	10f3c <__errno_location@plt>
   14974:	ldr	r0, [r0]
   14978:	subs	r4, r0, #9
   1497c:	mvnne	r4, #0
   14980:	mov	r0, r4
   14984:	pop	{r4, r5, r6, sl, fp, pc}
   14988:	push	{fp, lr}
   1498c:	mov	fp, sp
   14990:	mov	r0, #14
   14994:	bl	10fb4 <nl_langinfo@plt>
   14998:	movw	r1, #20655	; 0x50af
   1499c:	cmp	r0, #0
   149a0:	movt	r1, #1
   149a4:	movne	r1, r0
   149a8:	movw	r0, #22821	; 0x5925
   149ac:	ldrb	r2, [r1]
   149b0:	movt	r0, #1
   149b4:	cmp	r2, #0
   149b8:	movne	r0, r1
   149bc:	pop	{fp, pc}
   149c0:	push	{r4, r5, r6, r7, fp, lr}
   149c4:	add	fp, sp, #16
   149c8:	sub	sp, sp, #8
   149cc:	cmp	r0, #0
   149d0:	add	r5, sp, #4
   149d4:	mov	r7, r2
   149d8:	mov	r4, r1
   149dc:	movne	r5, r0
   149e0:	mov	r0, r5
   149e4:	bl	10eb8 <mbrtowc@plt>
   149e8:	mov	r6, r0
   149ec:	cmp	r7, #0
   149f0:	beq	14a18 <__assert_fail@plt+0x39f8>
   149f4:	cmn	r6, #2
   149f8:	bcc	14a18 <__assert_fail@plt+0x39f8>
   149fc:	mov	r0, #0
   14a00:	bl	14a60 <__assert_fail@plt+0x3a40>
   14a04:	cmp	r0, #0
   14a08:	bne	14a18 <__assert_fail@plt+0x39f8>
   14a0c:	ldrb	r0, [r4]
   14a10:	mov	r6, #1
   14a14:	str	r0, [r5]
   14a18:	mov	r0, r6
   14a1c:	sub	sp, fp, #16
   14a20:	pop	{r4, r5, r6, r7, fp, pc}
   14a24:	cmp	r2, #0
   14a28:	beq	14a58 <__assert_fail@plt+0x3a38>
   14a2c:	mvn	r3, #0
   14a30:	udiv	r3, r3, r2
   14a34:	cmp	r3, r1
   14a38:	bcs	14a58 <__assert_fail@plt+0x3a38>
   14a3c:	push	{fp, lr}
   14a40:	mov	fp, sp
   14a44:	bl	10f3c <__errno_location@plt>
   14a48:	mov	r1, #12
   14a4c:	str	r1, [r0]
   14a50:	mov	r0, #0
   14a54:	pop	{fp, pc}
   14a58:	mul	r1, r2, r1
   14a5c:	b	148b8 <__assert_fail@plt+0x3898>
   14a60:	push	{r4, sl, fp, lr}
   14a64:	add	fp, sp, #8
   14a68:	sub	sp, sp, #264	; 0x108
   14a6c:	add	r1, sp, #7
   14a70:	movw	r2, #257	; 0x101
   14a74:	bl	14acc <__assert_fail@plt+0x3aac>
   14a78:	mov	r4, #0
   14a7c:	cmp	r0, #0
   14a80:	bne	14ac0 <__assert_fail@plt+0x3aa0>
   14a84:	movw	r1, #22827	; 0x592b
   14a88:	add	r0, sp, #7
   14a8c:	mov	r2, #2
   14a90:	movt	r1, #1
   14a94:	bl	10f24 <bcmp@plt>
   14a98:	cmp	r0, #0
   14a9c:	beq	14ac0 <__assert_fail@plt+0x3aa0>
   14aa0:	movw	r1, #22829	; 0x592d
   14aa4:	add	r0, sp, #7
   14aa8:	mov	r2, #6
   14aac:	movt	r1, #1
   14ab0:	bl	10f24 <bcmp@plt>
   14ab4:	cmp	r0, #0
   14ab8:	mov	r4, r0
   14abc:	movwne	r4, #1
   14ac0:	mov	r0, r4
   14ac4:	sub	sp, fp, #8
   14ac8:	pop	{r4, sl, fp, pc}
   14acc:	push	{r4, r5, r6, r7, fp, lr}
   14ad0:	add	fp, sp, #16
   14ad4:	mov	r4, r1
   14ad8:	mov	r1, #0
   14adc:	mov	r6, r2
   14ae0:	bl	10f9c <setlocale@plt>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b14 <__assert_fail@plt+0x3af4>
   14aec:	mov	r7, r0
   14af0:	bl	10f30 <strlen@plt>
   14af4:	cmp	r0, r6
   14af8:	bcs	14b28 <__assert_fail@plt+0x3b08>
   14afc:	add	r2, r0, #1
   14b00:	mov	r0, r4
   14b04:	mov	r1, r7
   14b08:	bl	10e34 <memcpy@plt>
   14b0c:	mov	r5, #0
   14b10:	b	14b50 <__assert_fail@plt+0x3b30>
   14b14:	cmp	r6, #0
   14b18:	mov	r5, #22
   14b1c:	movne	r0, #0
   14b20:	strbne	r0, [r4]
   14b24:	b	14b50 <__assert_fail@plt+0x3b30>
   14b28:	mov	r5, #34	; 0x22
   14b2c:	cmp	r6, #0
   14b30:	beq	14b50 <__assert_fail@plt+0x3b30>
   14b34:	sub	r6, r6, #1
   14b38:	mov	r0, r4
   14b3c:	mov	r1, r7
   14b40:	mov	r2, r6
   14b44:	bl	10e34 <memcpy@plt>
   14b48:	mov	r0, #0
   14b4c:	strb	r0, [r4, r6]
   14b50:	mov	r0, r5
   14b54:	pop	{r4, r5, r6, r7, fp, pc}
   14b58:	mov	r1, #0
   14b5c:	b	10f9c <setlocale@plt>
   14b60:	cmp	r3, #0
   14b64:	cmpeq	r2, #0
   14b68:	bne	14b80 <__assert_fail@plt+0x3b60>
   14b6c:	cmp	r1, #0
   14b70:	cmpeq	r0, #0
   14b74:	mvnne	r1, #0
   14b78:	mvnne	r0, #0
   14b7c:	b	14b9c <__assert_fail@plt+0x3b7c>
   14b80:	sub	sp, sp, #8
   14b84:	push	{sp, lr}
   14b88:	bl	14bac <__assert_fail@plt+0x3b8c>
   14b8c:	ldr	lr, [sp, #4]
   14b90:	add	sp, sp, #8
   14b94:	pop	{r2, r3}
   14b98:	bx	lr
   14b9c:	push	{r1, lr}
   14ba0:	mov	r0, #8
   14ba4:	bl	10dec <raise@plt>
   14ba8:	pop	{r1, pc}
   14bac:	cmp	r1, r3
   14bb0:	cmpeq	r0, r2
   14bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb8:	mov	r4, r0
   14bbc:	movcc	r0, #0
   14bc0:	mov	r5, r1
   14bc4:	ldr	lr, [sp, #36]	; 0x24
   14bc8:	movcc	r1, r0
   14bcc:	bcc	14cc8 <__assert_fail@plt+0x3ca8>
   14bd0:	cmp	r3, #0
   14bd4:	clzeq	ip, r2
   14bd8:	clzne	ip, r3
   14bdc:	addeq	ip, ip, #32
   14be0:	cmp	r5, #0
   14be4:	clzeq	r1, r4
   14be8:	addeq	r1, r1, #32
   14bec:	clzne	r1, r5
   14bf0:	sub	ip, ip, r1
   14bf4:	sub	sl, ip, #32
   14bf8:	lsl	r9, r3, ip
   14bfc:	rsb	fp, ip, #32
   14c00:	orr	r9, r9, r2, lsl sl
   14c04:	orr	r9, r9, r2, lsr fp
   14c08:	lsl	r8, r2, ip
   14c0c:	cmp	r5, r9
   14c10:	cmpeq	r4, r8
   14c14:	movcc	r0, #0
   14c18:	movcc	r1, r0
   14c1c:	bcc	14c38 <__assert_fail@plt+0x3c18>
   14c20:	mov	r0, #1
   14c24:	subs	r4, r4, r8
   14c28:	lsl	r1, r0, sl
   14c2c:	orr	r1, r1, r0, lsr fp
   14c30:	lsl	r0, r0, ip
   14c34:	sbc	r5, r5, r9
   14c38:	cmp	ip, #0
   14c3c:	beq	14cc8 <__assert_fail@plt+0x3ca8>
   14c40:	lsr	r6, r8, #1
   14c44:	orr	r6, r6, r9, lsl #31
   14c48:	lsr	r7, r9, #1
   14c4c:	mov	r2, ip
   14c50:	b	14c74 <__assert_fail@plt+0x3c54>
   14c54:	subs	r3, r4, r6
   14c58:	sbc	r8, r5, r7
   14c5c:	adds	r3, r3, r3
   14c60:	adc	r8, r8, r8
   14c64:	adds	r4, r3, #1
   14c68:	adc	r5, r8, #0
   14c6c:	subs	r2, r2, #1
   14c70:	beq	14c90 <__assert_fail@plt+0x3c70>
   14c74:	cmp	r5, r7
   14c78:	cmpeq	r4, r6
   14c7c:	bcs	14c54 <__assert_fail@plt+0x3c34>
   14c80:	adds	r4, r4, r4
   14c84:	adc	r5, r5, r5
   14c88:	subs	r2, r2, #1
   14c8c:	bne	14c74 <__assert_fail@plt+0x3c54>
   14c90:	lsr	r3, r4, ip
   14c94:	orr	r3, r3, r5, lsl fp
   14c98:	lsr	r2, r5, ip
   14c9c:	orr	r3, r3, r5, lsr sl
   14ca0:	adds	r0, r0, r4
   14ca4:	mov	r4, r3
   14ca8:	lsl	r3, r2, ip
   14cac:	orr	r3, r3, r4, lsl sl
   14cb0:	lsl	ip, r4, ip
   14cb4:	orr	r3, r3, r4, lsr fp
   14cb8:	adc	r1, r1, r5
   14cbc:	subs	r0, r0, ip
   14cc0:	mov	r5, r2
   14cc4:	sbc	r1, r1, r3
   14cc8:	cmp	lr, #0
   14ccc:	strdne	r4, [lr]
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cd8:	mov	r7, r0
   14cdc:	ldr	r6, [pc, #72]	; 14d2c <__assert_fail@plt+0x3d0c>
   14ce0:	ldr	r5, [pc, #72]	; 14d30 <__assert_fail@plt+0x3d10>
   14ce4:	add	r6, pc, r6
   14ce8:	add	r5, pc, r5
   14cec:	sub	r6, r6, r5
   14cf0:	mov	r8, r1
   14cf4:	mov	r9, r2
   14cf8:	bl	10db4 <calloc@plt-0x20>
   14cfc:	asrs	r6, r6, #2
   14d00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d04:	mov	r4, #0
   14d08:	add	r4, r4, #1
   14d0c:	ldr	r3, [r5], #4
   14d10:	mov	r2, r9
   14d14:	mov	r1, r8
   14d18:	mov	r0, r7
   14d1c:	blx	r3
   14d20:	cmp	r6, r4
   14d24:	bne	14d08 <__assert_fail@plt+0x3ce8>
   14d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d2c:	andeq	r1, r1, r0, lsr #4
   14d30:	andeq	r1, r1, r8, lsl r2
   14d34:	bx	lr
   14d38:	ldr	r3, [pc, #12]	; 14d4c <__assert_fail@plt+0x3d2c>
   14d3c:	mov	r1, #0
   14d40:	add	r3, pc, r3
   14d44:	ldr	r2, [r3]
   14d48:	b	10f48 <__cxa_atexit@plt>
   14d4c:	muleq	r1, r4, r3

Disassembly of section .fini:

00014d50 <.fini>:
   14d50:	push	{r3, lr}
   14d54:	pop	{r3, pc}
