
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

000113ec <.init>:
   113ec:	push	{r3, lr}
   113f0:	bl	117f0 <__assert_fail@plt+0x48>
   113f4:	pop	{r3, pc}

Disassembly of section .plt:

000113f8 <pthread_mutex_unlock@plt-0x14>:
   113f8:	push	{lr}		; (str lr, [sp, #-4]!)
   113fc:	ldr	lr, [pc, #4]	; 11408 <pthread_mutex_unlock@plt-0x4>
   11400:	add	lr, pc, lr
   11404:	ldr	pc, [lr, #8]!
   11408:	strdeq	r3, [r2], -r8

0001140c <pthread_mutex_unlock@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #143360	; 0x23000
   11414:	ldr	pc, [ip, #3064]!	; 0xbf8

00011418 <calloc@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #143360	; 0x23000
   11420:	ldr	pc, [ip, #3056]!	; 0xbf0

00011424 <fputs_unlocked@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #143360	; 0x23000
   1142c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011430 <wctype@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #143360	; 0x23000
   11438:	ldr	pc, [ip, #3040]!	; 0xbe0

0001143c <wcrtomb@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #143360	; 0x23000
   11444:	ldr	pc, [ip, #3032]!	; 0xbd8

00011448 <iswctype@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #143360	; 0x23000
   11450:	ldr	pc, [ip, #3024]!	; 0xbd0

00011454 <strcmp@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #143360	; 0x23000
   1145c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011460 <__gmpz_tdiv_q@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #143360	; 0x23000
   11468:	ldr	pc, [ip, #3008]!	; 0xbc0

0001146c <strcspn@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #143360	; 0x23000
   11474:	ldr	pc, [ip, #3000]!	; 0xbb8

00011478 <pthread_mutex_destroy@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #143360	; 0x23000
   11480:	ldr	pc, [ip, #2992]!	; 0xbb0

00011484 <fflush@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #143360	; 0x23000
   1148c:	ldr	pc, [ip, #2984]!	; 0xba8

00011490 <wcwidth@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #143360	; 0x23000
   11498:	ldr	pc, [ip, #2976]!	; 0xba0

0001149c <memmove@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #143360	; 0x23000
   114a4:	ldr	pc, [ip, #2968]!	; 0xb98

000114a8 <free@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #143360	; 0x23000
   114b0:	ldr	pc, [ip, #2960]!	; 0xb90

000114b4 <pthread_mutex_lock@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #143360	; 0x23000
   114bc:	ldr	pc, [ip, #2952]!	; 0xb88

000114c0 <_exit@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #143360	; 0x23000
   114c8:	ldr	pc, [ip, #2944]!	; 0xb80

000114cc <memcpy@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #143360	; 0x23000
   114d4:	ldr	pc, [ip, #2936]!	; 0xb78

000114d8 <__gmpz_sub@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #143360	; 0x23000
   114e0:	ldr	pc, [ip, #2928]!	; 0xb70

000114e4 <tolower@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #143360	; 0x23000
   114ec:	ldr	pc, [ip, #2920]!	; 0xb68

000114f0 <pthread_mutex_init@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #143360	; 0x23000
   114f8:	ldr	pc, [ip, #2912]!	; 0xb60

000114fc <towlower@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #143360	; 0x23000
   11504:	ldr	pc, [ip, #2904]!	; 0xb58

00011508 <mbsinit@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #143360	; 0x23000
   11510:	ldr	pc, [ip, #2896]!	; 0xb50

00011514 <dcgettext@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #143360	; 0x23000
   1151c:	ldr	pc, [ip, #2888]!	; 0xb48

00011520 <__gmpz_get_str@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #143360	; 0x23000
   11528:	ldr	pc, [ip, #2880]!	; 0xb40

0001152c <realloc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #143360	; 0x23000
   11534:	ldr	pc, [ip, #2872]!	; 0xb38

00011538 <__gmpz_mul@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #143360	; 0x23000
   11540:	ldr	pc, [ip, #2864]!	; 0xb30

00011544 <textdomain@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #143360	; 0x23000
   1154c:	ldr	pc, [ip, #2856]!	; 0xb28

00011550 <iswcntrl@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #143360	; 0x23000
   11558:	ldr	pc, [ip, #2848]!	; 0xb20

0001155c <__gmpz_out_str@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #143360	; 0x23000
   11564:	ldr	pc, [ip, #2840]!	; 0xb18

00011568 <iswprint@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #143360	; 0x23000
   11570:	ldr	pc, [ip, #2832]!	; 0xb10

00011574 <fwrite@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #143360	; 0x23000
   1157c:	ldr	pc, [ip, #2824]!	; 0xb08

00011580 <lseek64@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #143360	; 0x23000
   11588:	ldr	pc, [ip, #2816]!	; 0xb00

0001158c <__ctype_get_mb_cur_max@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #143360	; 0x23000
   11594:	ldr	pc, [ip, #2808]!	; 0xaf8

00011598 <__gmpz_fits_ulong_p@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #143360	; 0x23000
   115a0:	ldr	pc, [ip, #2800]!	; 0xaf0

000115a4 <__fpending@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #143360	; 0x23000
   115ac:	ldr	pc, [ip, #2792]!	; 0xae8

000115b0 <ferror_unlocked@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #143360	; 0x23000
   115b8:	ldr	pc, [ip, #2784]!	; 0xae0

000115bc <mbrtowc@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #143360	; 0x23000
   115c4:	ldr	pc, [ip, #2776]!	; 0xad8

000115c8 <error@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #143360	; 0x23000
   115d0:	ldr	pc, [ip, #2768]!	; 0xad0

000115d4 <__gmpz_get_ui@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #143360	; 0x23000
   115dc:	ldr	pc, [ip, #2760]!	; 0xac8

000115e0 <strcoll@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #143360	; 0x23000
   115e8:	ldr	pc, [ip, #2752]!	; 0xac0

000115ec <puts@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #143360	; 0x23000
   115f4:	ldr	pc, [ip, #2744]!	; 0xab8

000115f8 <malloc@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #143360	; 0x23000
   11600:	ldr	pc, [ip, #2736]!	; 0xab0

00011604 <__libc_start_main@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #143360	; 0x23000
   1160c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011610 <__freading@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #143360	; 0x23000
   11618:	ldr	pc, [ip, #2720]!	; 0xaa0

0001161c <__gmon_start__@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #143360	; 0x23000
   11624:	ldr	pc, [ip, #2712]!	; 0xa98

00011628 <getopt_long@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #143360	; 0x23000
   11630:	ldr	pc, [ip, #2704]!	; 0xa90

00011634 <__ctype_b_loc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #143360	; 0x23000
   1163c:	ldr	pc, [ip, #2696]!	; 0xa88

00011640 <exit@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #143360	; 0x23000
   11648:	ldr	pc, [ip, #2688]!	; 0xa80

0001164c <bcmp@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #143360	; 0x23000
   11654:	ldr	pc, [ip, #2680]!	; 0xa78

00011658 <strlen@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #143360	; 0x23000
   11660:	ldr	pc, [ip, #2672]!	; 0xa70

00011664 <strchr@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #143360	; 0x23000
   1166c:	ldr	pc, [ip, #2664]!	; 0xa68

00011670 <__gmpz_tdiv_r@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #143360	; 0x23000
   11678:	ldr	pc, [ip, #2656]!	; 0xa60

0001167c <__gmpz_clear@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #143360	; 0x23000
   11684:	ldr	pc, [ip, #2648]!	; 0xa58

00011688 <__errno_location@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #143360	; 0x23000
   11690:	ldr	pc, [ip, #2640]!	; 0xa50

00011694 <iswalnum@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #143360	; 0x23000
   1169c:	ldr	pc, [ip, #2632]!	; 0xa48

000116a0 <__cxa_atexit@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #143360	; 0x23000
   116a8:	ldr	pc, [ip, #2624]!	; 0xa40

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #143360	; 0x23000
   116b4:	ldr	pc, [ip, #2616]!	; 0xa38

000116b8 <btowc@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #143360	; 0x23000
   116c0:	ldr	pc, [ip, #2608]!	; 0xa30

000116c4 <__printf_chk@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #143360	; 0x23000
   116cc:	ldr	pc, [ip, #2600]!	; 0xa28

000116d0 <fileno@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #143360	; 0x23000
   116d8:	ldr	pc, [ip, #2592]!	; 0xa20

000116dc <__fprintf_chk@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #143360	; 0x23000
   116e4:	ldr	pc, [ip, #2584]!	; 0xa18

000116e8 <memchr@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #143360	; 0x23000
   116f0:	ldr	pc, [ip, #2576]!	; 0xa10

000116f4 <fclose@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #143360	; 0x23000
   116fc:	ldr	pc, [ip, #2568]!	; 0xa08

00011700 <fseeko64@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #143360	; 0x23000
   11708:	ldr	pc, [ip, #2560]!	; 0xa00

0001170c <__gmpz_init_set_ui@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #143360	; 0x23000
   11714:	ldr	pc, [ip, #2552]!	; 0x9f8

00011718 <setlocale@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #143360	; 0x23000
   11720:	ldr	pc, [ip, #2544]!	; 0x9f0

00011724 <toupper@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #143360	; 0x23000
   1172c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011730 <strrchr@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #143360	; 0x23000
   11738:	ldr	pc, [ip, #2528]!	; 0x9e0

0001173c <nl_langinfo@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #143360	; 0x23000
   11744:	ldr	pc, [ip, #2520]!	; 0x9d8

00011748 <__gmpz_add@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #143360	; 0x23000
   11750:	ldr	pc, [ip, #2512]!	; 0x9d0

00011754 <__gmpz_init_set_str@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #143360	; 0x23000
   1175c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011760 <bindtextdomain@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #143360	; 0x23000
   11768:	ldr	pc, [ip, #2496]!	; 0x9c0

0001176c <towupper@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #143360	; 0x23000
   11774:	ldr	pc, [ip, #2488]!	; 0x9b8

00011778 <strncmp@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #143360	; 0x23000
   11780:	ldr	pc, [ip, #2480]!	; 0x9b0

00011784 <abort@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #143360	; 0x23000
   1178c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011790 <putchar_unlocked@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #143360	; 0x23000
   11798:	ldr	pc, [ip, #2464]!	; 0x9a0

0001179c <__mempcpy_chk@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #143360	; 0x23000
   117a4:	ldr	pc, [ip, #2456]!	; 0x998

000117a8 <__assert_fail@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #143360	; 0x23000
   117b0:	ldr	pc, [ip, #2448]!	; 0x990

Disassembly of section .text:

000117b4 <.text>:
   117b4:	mov	fp, #0
   117b8:	mov	lr, #0
   117bc:	pop	{r1}		; (ldr r1, [sp], #4)
   117c0:	mov	r2, sp
   117c4:	push	{r2}		; (str r2, [sp, #-4]!)
   117c8:	push	{r0}		; (str r0, [sp, #-4]!)
   117cc:	ldr	ip, [pc, #16]	; 117e4 <__assert_fail@plt+0x3c>
   117d0:	push	{ip}		; (str ip, [sp, #-4]!)
   117d4:	ldr	r0, [pc, #12]	; 117e8 <__assert_fail@plt+0x40>
   117d8:	ldr	r3, [pc, #12]	; 117ec <__assert_fail@plt+0x44>
   117dc:	bl	11604 <__libc_start_main@plt>
   117e0:	bl	11784 <abort@plt>
   117e4:	muleq	r2, r4, r4
   117e8:	andeq	r1, r1, r8, ror #23
   117ec:	andeq	r3, r2, r4, lsr r4
   117f0:	ldr	r3, [pc, #20]	; 1180c <__assert_fail@plt+0x64>
   117f4:	ldr	r2, [pc, #20]	; 11810 <__assert_fail@plt+0x68>
   117f8:	add	r3, pc, r3
   117fc:	ldr	r2, [r3, r2]
   11800:	cmp	r2, #0
   11804:	bxeq	lr
   11808:	b	1161c <__gmon_start__@plt>
   1180c:	andeq	r3, r2, r0, lsl #16
   11810:	andeq	r0, r0, r4, asr #2
   11814:	ldr	r0, [pc, #24]	; 11834 <__assert_fail@plt+0x8c>
   11818:	ldr	r3, [pc, #24]	; 11838 <__assert_fail@plt+0x90>
   1181c:	cmp	r3, r0
   11820:	bxeq	lr
   11824:	ldr	r3, [pc, #16]	; 1183c <__assert_fail@plt+0x94>
   11828:	cmp	r3, #0
   1182c:	bxeq	lr
   11830:	bx	r3
   11834:	muleq	r3, r8, r1
   11838:	muleq	r3, r8, r1
   1183c:	andeq	r0, r0, r0
   11840:	ldr	r0, [pc, #36]	; 1186c <__assert_fail@plt+0xc4>
   11844:	ldr	r1, [pc, #36]	; 11870 <__assert_fail@plt+0xc8>
   11848:	sub	r1, r1, r0
   1184c:	asr	r1, r1, #2
   11850:	add	r1, r1, r1, lsr #31
   11854:	asrs	r1, r1, #1
   11858:	bxeq	lr
   1185c:	ldr	r3, [pc, #16]	; 11874 <__assert_fail@plt+0xcc>
   11860:	cmp	r3, #0
   11864:	bxeq	lr
   11868:	bx	r3
   1186c:	muleq	r3, r8, r1
   11870:	muleq	r3, r8, r1
   11874:	andeq	r0, r0, r0
   11878:	push	{r4, lr}
   1187c:	ldr	r4, [pc, #24]	; 1189c <__assert_fail@plt+0xf4>
   11880:	ldrb	r3, [r4]
   11884:	cmp	r3, #0
   11888:	popne	{r4, pc}
   1188c:	bl	11814 <__assert_fail@plt+0x6c>
   11890:	mov	r3, #1
   11894:	strb	r3, [r4]
   11898:	pop	{r4, pc}
   1189c:			; <UNDEFINED> instruction: 0x000351b4
   118a0:	b	11840 <__assert_fail@plt+0x98>
   118a4:	push	{fp, lr}
   118a8:	mov	fp, sp
   118ac:	mov	r4, r0
   118b0:	cmp	r0, #0
   118b4:	bne	11a1c <__assert_fail@plt+0x274>
   118b8:	movw	r1, #13539	; 0x34e3
   118bc:	movt	r1, #2
   118c0:	mov	r0, #0
   118c4:	mov	r2, #5
   118c8:	bl	11514 <dcgettext@plt>
   118cc:	mov	r1, r0
   118d0:	movw	r0, #20932	; 0x51c4
   118d4:	movt	r0, #3
   118d8:	ldr	r2, [r0]
   118dc:	mov	r0, #1
   118e0:	mov	r3, r2
   118e4:	bl	116c4 <__printf_chk@plt>
   118e8:	mov	r0, #10
   118ec:	bl	11790 <putchar_unlocked@plt>
   118f0:	movw	r1, #13578	; 0x350a
   118f4:	movt	r1, #2
   118f8:	mov	r0, #0
   118fc:	mov	r2, #5
   11900:	bl	11514 <dcgettext@plt>
   11904:	movw	r5, #20908	; 0x51ac
   11908:	movt	r5, #3
   1190c:	ldr	r1, [r5]
   11910:	bl	11424 <fputs_unlocked@plt>
   11914:	movw	r1, #13623	; 0x3537
   11918:	movt	r1, #2
   1191c:	mov	r0, #0
   11920:	mov	r2, #5
   11924:	bl	11514 <dcgettext@plt>
   11928:	ldr	r1, [r5]
   1192c:	bl	11424 <fputs_unlocked@plt>
   11930:	movw	r1, #13677	; 0x356d
   11934:	movt	r1, #2
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	bl	11514 <dcgettext@plt>
   11944:	ldr	r1, [r5]
   11948:	bl	11424 <fputs_unlocked@plt>
   1194c:	movw	r1, #13951	; 0x367f
   11950:	movt	r1, #2
   11954:	mov	r0, #0
   11958:	mov	r2, #5
   1195c:	bl	11514 <dcgettext@plt>
   11960:	ldr	r1, [r5]
   11964:	bl	11424 <fputs_unlocked@plt>
   11968:	movw	r1, #14241	; 0x37a1
   1196c:	movt	r1, #2
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	bl	11514 <dcgettext@plt>
   1197c:	ldr	r1, [r5]
   11980:	bl	11424 <fputs_unlocked@plt>
   11984:	movw	r1, #14354	; 0x3812
   11988:	movt	r1, #2
   1198c:	mov	r0, #0
   11990:	mov	r2, #5
   11994:	bl	11514 <dcgettext@plt>
   11998:	ldr	r1, [r5]
   1199c:	bl	11424 <fputs_unlocked@plt>
   119a0:	movw	r1, #14541	; 0x38cd
   119a4:	movt	r1, #2
   119a8:	mov	r0, #0
   119ac:	mov	r2, #5
   119b0:	bl	11514 <dcgettext@plt>
   119b4:	ldr	r1, [r5]
   119b8:	bl	11424 <fputs_unlocked@plt>
   119bc:	movw	r1, #14851	; 0x3a03
   119c0:	movt	r1, #2
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	bl	11514 <dcgettext@plt>
   119d0:	ldr	r1, [r5]
   119d4:	bl	11424 <fputs_unlocked@plt>
   119d8:	movw	r1, #15052	; 0x3acc
   119dc:	movt	r1, #2
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	bl	11514 <dcgettext@plt>
   119ec:	ldr	r1, [r5]
   119f0:	bl	11424 <fputs_unlocked@plt>
   119f4:	movw	r1, #15344	; 0x3bf0
   119f8:	movt	r1, #2
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	bl	11514 <dcgettext@plt>
   11a08:	ldr	r1, [r5]
   11a0c:	bl	11424 <fputs_unlocked@plt>
   11a10:	bl	11a60 <__assert_fail@plt+0x2b8>
   11a14:	mov	r0, r4
   11a18:	bl	11640 <exit@plt>
   11a1c:	movw	r0, #20904	; 0x51a8
   11a20:	movt	r0, #3
   11a24:	ldr	r5, [r0]
   11a28:	movw	r1, #13500	; 0x34bc
   11a2c:	movt	r1, #2
   11a30:	mov	r0, #0
   11a34:	mov	r2, #5
   11a38:	bl	11514 <dcgettext@plt>
   11a3c:	mov	r2, r0
   11a40:	movw	r0, #20932	; 0x51c4
   11a44:	movt	r0, #3
   11a48:	ldr	r3, [r0]
   11a4c:	mov	r0, r5
   11a50:	mov	r1, #1
   11a54:	bl	116dc <__fprintf_chk@plt>
   11a58:	mov	r0, r4
   11a5c:	bl	11640 <exit@plt>
   11a60:	push	{r4, r5, r6, sl, fp, lr}
   11a64:	add	fp, sp, #16
   11a68:	sub	sp, sp, #56	; 0x38
   11a6c:	movw	r0, #16376	; 0x3ff8
   11a70:	movt	r0, #2
   11a74:	add	r1, r0, #32
   11a78:	mov	r2, #48	; 0x30
   11a7c:	vld1.64	{d16-d17}, [r1]
   11a80:	mov	r6, sp
   11a84:	add	r1, r6, #32
   11a88:	add	r3, r0, #16
   11a8c:	vld1.64	{d18-d19}, [r0], r2
   11a90:	vld1.64	{d20-d21}, [r3]
   11a94:	vldr	d22, [r0]
   11a98:	vst1.64	{d16-d17}, [r1]
   11a9c:	add	r0, r6, #16
   11aa0:	vst1.64	{d20-d21}, [r0]
   11aa4:	mov	r0, r6
   11aa8:	vst1.64	{d18-d19}, [r0], r2
   11aac:	vstr	d22, [r0]
   11ab0:	ldr	r1, [sp]
   11ab4:	cmp	r1, #0
   11ab8:	movw	r4, #15500	; 0x3c8c
   11abc:	movt	r4, #2
   11ac0:	beq	11ae8 <__assert_fail@plt+0x340>
   11ac4:	mov	r6, sp
   11ac8:	movw	r5, #15500	; 0x3c8c
   11acc:	movt	r5, #2
   11ad0:	mov	r0, r5
   11ad4:	bl	11454 <strcmp@plt>
   11ad8:	cmp	r0, #0
   11adc:	ldrne	r1, [r6, #8]!
   11ae0:	cmpne	r1, #0
   11ae4:	bne	11ad0 <__assert_fail@plt+0x328>
   11ae8:	ldr	r5, [r6, #4]
   11aec:	movw	r1, #15748	; 0x3d84
   11af0:	movt	r1, #2
   11af4:	mov	r0, #0
   11af8:	mov	r2, #5
   11afc:	bl	11514 <dcgettext@plt>
   11b00:	mov	r1, r0
   11b04:	movw	r2, #15529	; 0x3ca9
   11b08:	movt	r2, #2
   11b0c:	movw	r3, #15771	; 0x3d9b
   11b10:	movt	r3, #2
   11b14:	mov	r0, #1
   11b18:	bl	116c4 <__printf_chk@plt>
   11b1c:	cmp	r5, #0
   11b20:	moveq	r5, r4
   11b24:	mov	r0, #5
   11b28:	mov	r1, #0
   11b2c:	bl	11718 <setlocale@plt>
   11b30:	cmp	r0, #0
   11b34:	beq	11b74 <__assert_fail@plt+0x3cc>
   11b38:	movw	r1, #15811	; 0x3dc3
   11b3c:	movt	r1, #2
   11b40:	mov	r2, #3
   11b44:	bl	11778 <strncmp@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b74 <__assert_fail@plt+0x3cc>
   11b50:	movw	r1, #15815	; 0x3dc7
   11b54:	movt	r1, #2
   11b58:	mov	r0, #0
   11b5c:	mov	r2, #5
   11b60:	bl	11514 <dcgettext@plt>
   11b64:	movw	r1, #20908	; 0x51ac
   11b68:	movt	r1, #3
   11b6c:	ldr	r1, [r1]
   11b70:	bl	11424 <fputs_unlocked@plt>
   11b74:	movw	r1, #15886	; 0x3e0e
   11b78:	movt	r1, #2
   11b7c:	mov	r0, #0
   11b80:	mov	r2, #5
   11b84:	bl	11514 <dcgettext@plt>
   11b88:	mov	r1, r0
   11b8c:	movw	r2, #15771	; 0x3d9b
   11b90:	movt	r2, #2
   11b94:	mov	r0, #1
   11b98:	mov	r3, r4
   11b9c:	bl	116c4 <__printf_chk@plt>
   11ba0:	movw	r0, #15681	; 0x3d41
   11ba4:	movt	r0, #2
   11ba8:	movw	r6, #15963	; 0x3e5b
   11bac:	movt	r6, #2
   11bb0:	cmp	r5, r4
   11bb4:	moveq	r6, r0
   11bb8:	movw	r1, #15913	; 0x3e29
   11bbc:	movt	r1, #2
   11bc0:	mov	r0, #0
   11bc4:	mov	r2, #5
   11bc8:	bl	11514 <dcgettext@plt>
   11bcc:	mov	r1, r0
   11bd0:	mov	r0, #1
   11bd4:	mov	r2, r5
   11bd8:	mov	r3, r6
   11bdc:	sub	sp, fp, #16
   11be0:	pop	{r4, r5, r6, sl, fp, lr}
   11be4:	b	116c4 <__printf_chk@plt>
   11be8:	push	{r4, r5, r6, sl, fp, lr}
   11bec:	add	fp, sp, #16
   11bf0:	sub	sp, sp, #24
   11bf4:	mov	r4, r1
   11bf8:	mov	r5, r0
   11bfc:	ldr	r0, [r1]
   11c00:	bl	13644 <__assert_fail@plt+0x1e9c>
   11c04:	movw	r1, #15963	; 0x3e5b
   11c08:	movt	r1, #2
   11c0c:	mov	r0, #6
   11c10:	bl	11718 <setlocale@plt>
   11c14:	movw	r6, #15533	; 0x3cad
   11c18:	movt	r6, #2
   11c1c:	movw	r1, #15505	; 0x3c91
   11c20:	movt	r1, #2
   11c24:	mov	r0, r6
   11c28:	bl	11760 <bindtextdomain@plt>
   11c2c:	mov	r0, r6
   11c30:	bl	11544 <textdomain@plt>
   11c34:	bl	11d80 <__assert_fail@plt+0x5d8>
   11c38:	movw	r0, #12376	; 0x3058
   11c3c:	movt	r0, #1
   11c40:	bl	23498 <__assert_fail@plt+0x11cf0>
   11c44:	mov	ip, #0
   11c48:	movw	r1, #15585	; 0x3ce1
   11c4c:	movt	r1, #2
   11c50:	movw	r2, #15570	; 0x3cd2
   11c54:	movt	r2, #2
   11c58:	movw	r3, #15558	; 0x3cc6
   11c5c:	movt	r3, #2
   11c60:	movw	r6, #6308	; 0x18a4
   11c64:	movt	r6, #1
   11c68:	movw	r0, #15543	; 0x3cb7
   11c6c:	movt	r0, #2
   11c70:	stm	sp, {r0, r6}
   11c74:	str	r3, [sp, #8]
   11c78:	str	r2, [sp, #12]
   11c7c:	str	r1, [sp, #16]
   11c80:	str	ip, [sp, #20]
   11c84:	movw	r2, #15500	; 0x3c8c
   11c88:	movt	r2, #2
   11c8c:	movw	r3, #15529	; 0x3ca9
   11c90:	movt	r3, #2
   11c94:	mov	r0, r5
   11c98:	mov	r1, r4
   11c9c:	bl	13168 <__assert_fail@plt+0x19c0>
   11ca0:	cmp	r5, #2
   11ca4:	bcc	11d14 <__assert_fail@plt+0x56c>
   11ca8:	mov	r6, r4
   11cac:	ldr	r0, [r6, #4]!
   11cb0:	movw	r1, #15597	; 0x3ced
   11cb4:	movt	r1, #2
   11cb8:	bl	11454 <strcmp@plt>
   11cbc:	cmp	r0, #0
   11cc0:	bne	11cd4 <__assert_fail@plt+0x52c>
   11cc4:	sub	r0, r5, #1
   11cc8:	cmp	r0, #1
   11ccc:	mov	r4, r6
   11cd0:	bls	11d14 <__assert_fail@plt+0x56c>
   11cd4:	add	r0, r4, #4
   11cd8:	movw	r5, #20920	; 0x51b8
   11cdc:	movt	r5, #3
   11ce0:	str	r0, [r5]
   11ce4:	mov	r0, #1
   11ce8:	bl	11d94 <__assert_fail@plt+0x5ec>
   11cec:	mov	r4, r0
   11cf0:	bl	11e48 <__assert_fail@plt+0x6a0>
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d40 <__assert_fail@plt+0x598>
   11cfc:	mov	r0, r4
   11d00:	bl	11e64 <__assert_fail@plt+0x6bc>
   11d04:	mov	r0, r4
   11d08:	bl	11eb8 <__assert_fail@plt+0x710>
   11d0c:	sub	sp, fp, #16
   11d10:	pop	{r4, r5, r6, sl, fp, pc}
   11d14:	movw	r1, #15600	; 0x3cf0
   11d18:	movt	r1, #2
   11d1c:	mov	r0, #0
   11d20:	mov	r2, #5
   11d24:	bl	11514 <dcgettext@plt>
   11d28:	mov	r2, r0
   11d2c:	mov	r0, #0
   11d30:	mov	r1, #0
   11d34:	bl	115c8 <error@plt>
   11d38:	mov	r0, #2
   11d3c:	bl	118a4 <__assert_fail@plt+0xfc>
   11d40:	movw	r1, #15616	; 0x3d00
   11d44:	movt	r1, #2
   11d48:	mov	r0, #0
   11d4c:	mov	r2, #5
   11d50:	bl	11514 <dcgettext@plt>
   11d54:	mov	r4, r0
   11d58:	ldr	r0, [r5]
   11d5c:	ldr	r2, [r0]
   11d60:	mov	r0, #0
   11d64:	mov	r1, #8
   11d68:	bl	14b94 <__assert_fail@plt+0x33ec>
   11d6c:	mov	r3, r0
   11d70:	mov	r0, #2
   11d74:	mov	r1, #0
   11d78:	mov	r2, r4
   11d7c:	bl	115c8 <error@plt>
   11d80:	movw	r0, #20816	; 0x5150
   11d84:	movt	r0, #3
   11d88:	mov	r1, #3
   11d8c:	str	r1, [r0]
   11d90:	bx	lr
   11d94:	push	{r4, r5, r6, r7, fp, lr}
   11d98:	add	fp, sp, #16
   11d9c:	mov	r4, r0
   11da0:	bl	11f28 <__assert_fail@plt+0x780>
   11da4:	mov	r6, r0
   11da8:	movw	r0, #15964	; 0x3e5c
   11dac:	movt	r0, #2
   11db0:	bl	11fdc <__assert_fail@plt+0x834>
   11db4:	cmp	r0, #0
   11db8:	beq	11e40 <__assert_fail@plt+0x698>
   11dbc:	movw	r5, #15964	; 0x3e5c
   11dc0:	movt	r5, #2
   11dc4:	b	11de0 <__assert_fail@plt+0x638>
   11dc8:	mov	r0, r7
   11dcc:	bl	12020 <__assert_fail@plt+0x878>
   11dd0:	mov	r0, r5
   11dd4:	bl	11fdc <__assert_fail@plt+0x834>
   11dd8:	cmp	r0, #0
   11ddc:	beq	11e40 <__assert_fail@plt+0x698>
   11de0:	cmp	r4, #0
   11de4:	mov	r0, #0
   11de8:	movne	r0, r6
   11dec:	blne	11eb8 <__assert_fail@plt+0x710>
   11df0:	bl	11f28 <__assert_fail@plt+0x780>
   11df4:	mov	r7, r0
   11df8:	mov	r0, r6
   11dfc:	bl	11eb8 <__assert_fail@plt+0x710>
   11e00:	cmp	r0, #0
   11e04:	beq	11dc8 <__assert_fail@plt+0x620>
   11e08:	mov	r0, r6
   11e0c:	bl	12020 <__assert_fail@plt+0x878>
   11e10:	mov	r0, r7
   11e14:	bl	11eb8 <__assert_fail@plt+0x710>
   11e18:	cmp	r0, #0
   11e1c:	beq	11e38 <__assert_fail@plt+0x690>
   11e20:	mov	r0, r7
   11e24:	bl	12020 <__assert_fail@plt+0x878>
   11e28:	mov	r0, #0
   11e2c:	bl	12054 <__assert_fail@plt+0x8ac>
   11e30:	mov	r6, r0
   11e34:	b	11dd0 <__assert_fail@plt+0x628>
   11e38:	mov	r6, r7
   11e3c:	b	11dd0 <__assert_fail@plt+0x628>
   11e40:	mov	r0, r6
   11e44:	pop	{r4, r5, r6, r7, fp, pc}
   11e48:	movw	r0, #20920	; 0x51b8
   11e4c:	movt	r0, #3
   11e50:	ldr	r0, [r0]
   11e54:	ldr	r0, [r0]
   11e58:	clz	r0, r0
   11e5c:	lsr	r0, r0, #5
   11e60:	bx	lr
   11e64:	push	{fp, lr}
   11e68:	mov	fp, sp
   11e6c:	ldr	r1, [r0]
   11e70:	cmp	r1, #1
   11e74:	beq	11ea8 <__assert_fail@plt+0x700>
   11e78:	cmp	r1, #0
   11e7c:	bne	11eb4 <__assert_fail@plt+0x70c>
   11e80:	movw	r1, #20908	; 0x51ac
   11e84:	movt	r1, #3
   11e88:	ldr	r1, [r1]
   11e8c:	add	r2, r0, #4
   11e90:	mov	r0, r1
   11e94:	mov	r1, #10
   11e98:	bl	1155c <__gmpz_out_str@plt>
   11e9c:	mov	r0, #10
   11ea0:	pop	{fp, lr}
   11ea4:	b	11790 <putchar_unlocked@plt>
   11ea8:	ldr	r0, [r0, #4]
   11eac:	pop	{fp, lr}
   11eb0:	b	115ec <puts@plt>
   11eb4:	bl	11784 <abort@plt>
   11eb8:	push	{fp, lr}
   11ebc:	mov	fp, sp
   11ec0:	ldr	r1, [r0]
   11ec4:	cmp	r1, #1
   11ec8:	beq	11ee4 <__assert_fail@plt+0x73c>
   11ecc:	cmp	r1, #0
   11ed0:	ldreq	r0, [r0, #8]
   11ed4:	clzeq	r0, r0
   11ed8:	lsreq	r0, r0, #5
   11edc:	popeq	{fp, pc}
   11ee0:	bl	11784 <abort@plt>
   11ee4:	ldr	r1, [r0, #4]
   11ee8:	ldrb	r2, [r1]
   11eec:	mov	r0, #1
   11ef0:	cmp	r2, #0
   11ef4:	popeq	{fp, pc}
   11ef8:	cmp	r2, #45	; 0x2d
   11efc:	addeq	r1, r1, #1
   11f00:	ldrb	r2, [r1], #1
   11f04:	uxtb	r2, r2
   11f08:	cmp	r2, #48	; 0x30
   11f0c:	bne	11f20 <__assert_fail@plt+0x778>
   11f10:	ldrb	r2, [r1], #1
   11f14:	cmp	r2, #0
   11f18:	bne	11f04 <__assert_fail@plt+0x75c>
   11f1c:	pop	{fp, pc}
   11f20:	mov	r0, #0
   11f24:	pop	{fp, pc}
   11f28:	push	{r4, r5, r6, r7, fp, lr}
   11f2c:	add	fp, sp, #16
   11f30:	mov	r4, r0
   11f34:	bl	12084 <__assert_fail@plt+0x8dc>
   11f38:	mov	r5, r0
   11f3c:	movw	r0, #15966	; 0x3e5e
   11f40:	movt	r0, #2
   11f44:	bl	11fdc <__assert_fail@plt+0x834>
   11f48:	cmp	r0, #0
   11f4c:	beq	11fd4 <__assert_fail@plt+0x82c>
   11f50:	movw	r6, #15966	; 0x3e5e
   11f54:	movt	r6, #2
   11f58:	b	11f88 <__assert_fail@plt+0x7e0>
   11f5c:	mov	r0, r5
   11f60:	bl	12020 <__assert_fail@plt+0x878>
   11f64:	mov	r0, r7
   11f68:	bl	12020 <__assert_fail@plt+0x878>
   11f6c:	mov	r0, #0
   11f70:	bl	12054 <__assert_fail@plt+0x8ac>
   11f74:	mov	r5, r0
   11f78:	mov	r0, r6
   11f7c:	bl	11fdc <__assert_fail@plt+0x834>
   11f80:	cmp	r0, #0
   11f84:	beq	11fd4 <__assert_fail@plt+0x82c>
   11f88:	cmp	r4, #0
   11f8c:	mov	r0, #0
   11f90:	beq	11fa0 <__assert_fail@plt+0x7f8>
   11f94:	mov	r0, r5
   11f98:	bl	11eb8 <__assert_fail@plt+0x710>
   11f9c:	eor	r0, r0, #1
   11fa0:	bl	12084 <__assert_fail@plt+0x8dc>
   11fa4:	mov	r7, r0
   11fa8:	mov	r0, r5
   11fac:	bl	11eb8 <__assert_fail@plt+0x710>
   11fb0:	cmp	r0, #0
   11fb4:	bne	11f5c <__assert_fail@plt+0x7b4>
   11fb8:	mov	r0, r7
   11fbc:	bl	11eb8 <__assert_fail@plt+0x710>
   11fc0:	cmp	r0, #0
   11fc4:	bne	11f5c <__assert_fail@plt+0x7b4>
   11fc8:	mov	r0, r7
   11fcc:	bl	12020 <__assert_fail@plt+0x878>
   11fd0:	b	11f78 <__assert_fail@plt+0x7d0>
   11fd4:	mov	r0, r5
   11fd8:	pop	{r4, r5, r6, r7, fp, pc}
   11fdc:	push	{r4, r5, fp, lr}
   11fe0:	add	fp, sp, #8
   11fe4:	mov	r1, r0
   11fe8:	movw	r4, #20920	; 0x51b8
   11fec:	movt	r4, #3
   11ff0:	ldr	r5, [r4]
   11ff4:	ldr	r0, [r5]
   11ff8:	cmp	r0, #0
   11ffc:	beq	12018 <__assert_fail@plt+0x870>
   12000:	bl	11454 <strcmp@plt>
   12004:	clz	r0, r0
   12008:	lsr	r0, r0, #5
   1200c:	add	r1, r5, r0, lsl #2
   12010:	str	r1, [r4]
   12014:	pop	{r4, r5, fp, pc}
   12018:	mov	r0, #0
   1201c:	pop	{r4, r5, fp, pc}
   12020:	push	{r4, sl, fp, lr}
   12024:	add	fp, sp, #8
   12028:	mov	r4, r0
   1202c:	ldr	r1, [r0], #4
   12030:	cmp	r1, #1
   12034:	bne	12044 <__assert_fail@plt+0x89c>
   12038:	ldr	r0, [r0]
   1203c:	bl	13140 <__assert_fail@plt+0x1998>
   12040:	b	12048 <__assert_fail@plt+0x8a0>
   12044:	bl	1167c <__gmpz_clear@plt>
   12048:	mov	r0, r4
   1204c:	pop	{r4, sl, fp, lr}
   12050:	b	13140 <__assert_fail@plt+0x1998>
   12054:	push	{r4, r5, fp, lr}
   12058:	add	fp, sp, #8
   1205c:	mov	r4, r0
   12060:	mov	r0, #16
   12064:	bl	22698 <__assert_fail@plt+0x10ef0>
   12068:	mov	r5, r0
   1206c:	mov	r1, #0
   12070:	str	r1, [r0], #4
   12074:	mov	r1, r4
   12078:	bl	1170c <__gmpz_init_set_ui@plt>
   1207c:	mov	r0, r5
   12080:	pop	{r4, r5, fp, pc}
   12084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12088:	add	fp, sp, #28
   1208c:	sub	sp, sp, #4
   12090:	mov	r4, r0
   12094:	bl	1226c <__assert_fail@plt+0xac4>
   12098:	mov	sl, r0
   1209c:	movw	r6, #15968	; 0x3e60
   120a0:	movt	r6, #2
   120a4:	str	r4, [sp]
   120a8:	b	120d4 <__assert_fail@plt+0x92c>
   120ac:	clz	r0, r8
   120b0:	lsr	r8, r0, #5
   120b4:	ldr	r4, [sp]
   120b8:	mov	r0, sl
   120bc:	bl	12020 <__assert_fail@plt+0x878>
   120c0:	mov	r0, r9
   120c4:	bl	12020 <__assert_fail@plt+0x878>
   120c8:	mov	r0, r8
   120cc:	bl	12054 <__assert_fail@plt+0x8ac>
   120d0:	mov	sl, r0
   120d4:	mov	r0, r6
   120d8:	bl	11fdc <__assert_fail@plt+0x834>
   120dc:	cmp	r0, #0
   120e0:	mov	r5, #0
   120e4:	bne	12174 <__assert_fail@plt+0x9cc>
   120e8:	movw	r0, #15970	; 0x3e62
   120ec:	movt	r0, #2
   120f0:	bl	11fdc <__assert_fail@plt+0x834>
   120f4:	mov	r5, #1
   120f8:	cmp	r0, #0
   120fc:	bne	12174 <__assert_fail@plt+0x9cc>
   12100:	movw	r0, #15977	; 0x3e69
   12104:	movt	r0, #2
   12108:	bl	11fdc <__assert_fail@plt+0x834>
   1210c:	mov	r5, #2
   12110:	cmp	r0, #0
   12114:	bne	12174 <__assert_fail@plt+0x9cc>
   12118:	movw	r0, #15973	; 0x3e65
   1211c:	movt	r0, #2
   12120:	bl	11fdc <__assert_fail@plt+0x834>
   12124:	cmp	r0, #0
   12128:	bne	12174 <__assert_fail@plt+0x9cc>
   1212c:	movw	r0, #15976	; 0x3e68
   12130:	movt	r0, #2
   12134:	bl	11fdc <__assert_fail@plt+0x834>
   12138:	mov	r5, #3
   1213c:	cmp	r0, #0
   12140:	bne	12174 <__assert_fail@plt+0x9cc>
   12144:	movw	r0, #15979	; 0x3e6b
   12148:	movt	r0, #2
   1214c:	bl	11fdc <__assert_fail@plt+0x834>
   12150:	mov	r5, #4
   12154:	cmp	r0, #0
   12158:	bne	12174 <__assert_fail@plt+0x9cc>
   1215c:	movw	r0, #15982	; 0x3e6e
   12160:	movt	r0, #2
   12164:	bl	11fdc <__assert_fail@plt+0x834>
   12168:	mov	r5, #5
   1216c:	cmp	r0, #0
   12170:	beq	1225c <__assert_fail@plt+0xab4>
   12174:	mov	r0, r4
   12178:	bl	1226c <__assert_fail@plt+0xac4>
   1217c:	mov	r9, r0
   12180:	mov	r8, #0
   12184:	cmp	r4, #0
   12188:	beq	120b8 <__assert_fail@plt+0x910>
   1218c:	mov	r4, r6
   12190:	mov	r0, sl
   12194:	bl	12358 <__assert_fail@plt+0xbb0>
   12198:	mov	r0, r9
   1219c:	bl	12358 <__assert_fail@plt+0xbb0>
   121a0:	ldr	r7, [sl, #4]
   121a4:	mov	r0, r7
   121a8:	bl	123a8 <__assert_fail@plt+0xc00>
   121ac:	cmp	r0, #0
   121b0:	beq	121d8 <__assert_fail@plt+0xa30>
   121b4:	ldr	r6, [r9, #4]
   121b8:	mov	r0, r6
   121bc:	bl	123a8 <__assert_fail@plt+0xc00>
   121c0:	cmp	r0, #0
   121c4:	beq	121d8 <__assert_fail@plt+0xa30>
   121c8:	mov	r0, r7
   121cc:	mov	r1, r6
   121d0:	bl	21f70 <__assert_fail@plt+0x107c8>
   121d4:	b	121f0 <__assert_fail@plt+0xa48>
   121d8:	bl	11688 <__errno_location@plt>
   121dc:	mov	r1, #0
   121e0:	str	r1, [r0]
   121e4:	ldr	r0, [sl, #4]
   121e8:	ldr	r1, [r9, #4]
   121ec:	bl	115e0 <strcoll@plt>
   121f0:	mov	r8, r0
   121f4:	cmp	r5, #5
   121f8:	bhi	12268 <__assert_fail@plt+0xac0>
   121fc:	add	r0, pc, #4
   12200:	mov	r6, r4
   12204:	ldr	pc, [r0, r5, lsl #2]
   12208:	andeq	r2, r1, r0, lsr #4
   1220c:	andeq	r2, r1, r0, lsr r2
   12210:	andeq	r2, r1, ip, lsr #1
   12214:	andeq	r2, r1, r0, asr #4
   12218:	andeq	r2, r1, r8, lsr #4
   1221c:	andeq	r2, r1, ip, asr #4
   12220:	lsr	r8, r8, #31
   12224:	b	120b4 <__assert_fail@plt+0x90c>
   12228:	cmn	r8, #1
   1222c:	b	12250 <__assert_fail@plt+0xaa8>
   12230:	cmp	r8, #1
   12234:	mov	r8, #0
   12238:	movwlt	r8, #1
   1223c:	b	120b4 <__assert_fail@plt+0x90c>
   12240:	cmp	r8, #0
   12244:	movwne	r8, #1
   12248:	b	120b4 <__assert_fail@plt+0x90c>
   1224c:	cmp	r8, #0
   12250:	mov	r8, #0
   12254:	movwgt	r8, #1
   12258:	b	120b4 <__assert_fail@plt+0x90c>
   1225c:	mov	r0, sl
   12260:	sub	sp, fp, #28
   12264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12268:	bl	11784 <abort@plt>
   1226c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12270:	add	fp, sp, #28
   12274:	sub	sp, sp, #4
   12278:	mov	r4, r0
   1227c:	bl	123e4 <__assert_fail@plt+0xc3c>
   12280:	mov	r5, r0
   12284:	add	r6, r0, #4
   12288:	movw	r9, #15984	; 0x3e70
   1228c:	movt	r9, #2
   12290:	movw	r8, #15598	; 0x3cee
   12294:	movt	r8, #2
   12298:	b	122cc <__assert_fail@plt+0xb24>
   1229c:	cmp	sl, #0
   122a0:	movw	r3, #5336	; 0x14d8
   122a4:	movt	r3, #1
   122a8:	movw	r0, #5960	; 0x1748
   122ac:	movt	r0, #1
   122b0:	moveq	r3, r0
   122b4:	add	r2, r7, #4
   122b8:	mov	r0, r6
   122bc:	mov	r1, r6
   122c0:	blx	r3
   122c4:	mov	r0, r7
   122c8:	bl	12020 <__assert_fail@plt+0x878>
   122cc:	mov	r0, r9
   122d0:	bl	11fdc <__assert_fail@plt+0x834>
   122d4:	mov	sl, #0
   122d8:	cmp	r0, #0
   122dc:	bne	122f4 <__assert_fail@plt+0xb4c>
   122e0:	mov	r0, r8
   122e4:	bl	11fdc <__assert_fail@plt+0x834>
   122e8:	mov	sl, #1
   122ec:	cmp	r0, #0
   122f0:	beq	1234c <__assert_fail@plt+0xba4>
   122f4:	mov	r0, r4
   122f8:	bl	123e4 <__assert_fail@plt+0xc3c>
   122fc:	mov	r7, r0
   12300:	cmp	r4, #0
   12304:	beq	122c4 <__assert_fail@plt+0xb1c>
   12308:	mov	r0, r5
   1230c:	bl	12514 <__assert_fail@plt+0xd6c>
   12310:	cmp	r0, #0
   12314:	beq	12328 <__assert_fail@plt+0xb80>
   12318:	mov	r0, r7
   1231c:	bl	12514 <__assert_fail@plt+0xd6c>
   12320:	cmp	r0, #0
   12324:	bne	1229c <__assert_fail@plt+0xaf4>
   12328:	movw	r1, #15986	; 0x3e72
   1232c:	movt	r1, #2
   12330:	mov	r0, #0
   12334:	mov	r2, #5
   12338:	bl	11514 <dcgettext@plt>
   1233c:	mov	r2, r0
   12340:	mov	r0, #2
   12344:	mov	r1, #0
   12348:	bl	115c8 <error@plt>
   1234c:	mov	r0, r5
   12350:	sub	sp, fp, #28
   12354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12358:	push	{r4, r5, r6, sl, fp, lr}
   1235c:	add	fp, sp, #16
   12360:	mov	r4, r0
   12364:	ldr	r0, [r0]
   12368:	cmp	r0, #1
   1236c:	popeq	{r4, r5, r6, sl, fp, pc}
   12370:	cmp	r0, #0
   12374:	bne	123a4 <__assert_fail@plt+0xbfc>
   12378:	add	r5, r4, #4
   1237c:	mov	r0, #0
   12380:	mov	r1, #10
   12384:	mov	r2, r5
   12388:	bl	11520 <__gmpz_get_str@plt>
   1238c:	mov	r6, r0
   12390:	mov	r0, r5
   12394:	bl	1167c <__gmpz_clear@plt>
   12398:	mov	r0, #1
   1239c:	stm	r4, {r0, r6}
   123a0:	pop	{r4, r5, r6, sl, fp, pc}
   123a4:	bl	11784 <abort@plt>
   123a8:	mov	r1, r0
   123ac:	ldrb	r2, [r1], #1
   123b0:	cmp	r2, #45	; 0x2d
   123b4:	movne	r1, r0
   123b8:	add	r0, r1, #1
   123bc:	ldrb	r1, [r0, #-1]
   123c0:	sub	r1, r1, #48	; 0x30
   123c4:	cmp	r1, #9
   123c8:	movhi	r0, #0
   123cc:	bxhi	lr
   123d0:	ldrb	r1, [r0], #1
   123d4:	cmp	r1, #0
   123d8:	moveq	r0, #1
   123dc:	bxeq	lr
   123e0:	b	123bc <__assert_fail@plt+0xc14>
   123e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e8:	add	fp, sp, #28
   123ec:	sub	sp, sp, #4
   123f0:	mov	r4, r0
   123f4:	bl	125a4 <__assert_fail@plt+0xdfc>
   123f8:	mov	sl, r0
   123fc:	add	r6, r0, #4
   12400:	movw	r7, #16007	; 0x3e87
   12404:	movt	r7, #2
   12408:	movw	r8, #18072	; 0x4698
   1240c:	movt	r8, #2
   12410:	b	1242c <__assert_fail@plt+0xc84>
   12414:	add	r2, r5, #4
   12418:	mov	r0, r6
   1241c:	mov	r1, r6
   12420:	blx	r3
   12424:	mov	r0, r5
   12428:	bl	12020 <__assert_fail@plt+0x878>
   1242c:	mov	r0, r7
   12430:	bl	11fdc <__assert_fail@plt+0x834>
   12434:	mov	r9, #0
   12438:	cmp	r0, #0
   1243c:	bne	1246c <__assert_fail@plt+0xcc4>
   12440:	mov	r0, r8
   12444:	bl	11fdc <__assert_fail@plt+0x834>
   12448:	mov	r9, #1
   1244c:	cmp	r0, #0
   12450:	bne	1246c <__assert_fail@plt+0xcc4>
   12454:	movw	r0, #16009	; 0x3e89
   12458:	movt	r0, #2
   1245c:	bl	11fdc <__assert_fail@plt+0x834>
   12460:	mov	r9, #2
   12464:	cmp	r0, #0
   12468:	beq	124d8 <__assert_fail@plt+0xd30>
   1246c:	mov	r0, r4
   12470:	bl	125a4 <__assert_fail@plt+0xdfc>
   12474:	mov	r5, r0
   12478:	cmp	r4, #0
   1247c:	beq	12424 <__assert_fail@plt+0xc7c>
   12480:	mov	r0, sl
   12484:	bl	12514 <__assert_fail@plt+0xd6c>
   12488:	cmp	r0, #0
   1248c:	beq	124e4 <__assert_fail@plt+0xd3c>
   12490:	mov	r0, r5
   12494:	bl	12514 <__assert_fail@plt+0xd6c>
   12498:	cmp	r0, #0
   1249c:	beq	124e4 <__assert_fail@plt+0xd3c>
   124a0:	cmp	r9, #0
   124a4:	movw	r3, #5432	; 0x1538
   124a8:	movt	r3, #1
   124ac:	beq	12414 <__assert_fail@plt+0xc6c>
   124b0:	ldr	r0, [r5, #8]
   124b4:	cmp	r0, #0
   124b8:	beq	124f0 <__assert_fail@plt+0xd48>
   124bc:	cmp	r9, #1
   124c0:	movw	r3, #5744	; 0x1670
   124c4:	movt	r3, #1
   124c8:	movw	r0, #5216	; 0x1460
   124cc:	movt	r0, #1
   124d0:	moveq	r3, r0
   124d4:	b	12414 <__assert_fail@plt+0xc6c>
   124d8:	mov	r0, sl
   124dc:	sub	sp, fp, #28
   124e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124e4:	movw	r1, #15986	; 0x3e72
   124e8:	movt	r1, #2
   124ec:	b	124f8 <__assert_fail@plt+0xd50>
   124f0:	movw	r1, #16011	; 0x3e8b
   124f4:	movt	r1, #2
   124f8:	mov	r0, #0
   124fc:	mov	r2, #5
   12500:	bl	11514 <dcgettext@plt>
   12504:	mov	r2, r0
   12508:	mov	r0, #2
   1250c:	mov	r1, #0
   12510:	bl	115c8 <error@plt>
   12514:	push	{r4, r5, r6, sl, fp, lr}
   12518:	add	fp, sp, #16
   1251c:	mov	r4, r0
   12520:	ldr	r1, [r0]
   12524:	mov	r0, #1
   12528:	cmp	r1, #0
   1252c:	beq	12584 <__assert_fail@plt+0xddc>
   12530:	cmp	r1, #1
   12534:	bne	12588 <__assert_fail@plt+0xde0>
   12538:	mov	r6, r4
   1253c:	ldr	r5, [r6, #4]!
   12540:	mov	r0, r5
   12544:	bl	123a8 <__assert_fail@plt+0xc00>
   12548:	mov	r1, r0
   1254c:	mov	r0, #0
   12550:	cmp	r1, #0
   12554:	beq	12584 <__assert_fail@plt+0xddc>
   12558:	mov	r0, r6
   1255c:	mov	r1, r5
   12560:	mov	r2, #10
   12564:	bl	11754 <__gmpz_init_set_str@plt>
   12568:	cmp	r0, #0
   1256c:	bne	1258c <__assert_fail@plt+0xde4>
   12570:	mov	r0, r5
   12574:	bl	13140 <__assert_fail@plt+0x1998>
   12578:	mov	r0, #0
   1257c:	str	r0, [r4]
   12580:	mov	r0, #1
   12584:	pop	{r4, r5, r6, sl, fp, pc}
   12588:	bl	11784 <abort@plt>
   1258c:	movw	r2, #16448	; 0x4040
   12590:	movt	r2, #2
   12594:	mov	r0, #3
   12598:	mov	r1, #34	; 0x22
   1259c:	mov	r3, r5
   125a0:	bl	115c8 <error@plt>
   125a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125a8:	add	fp, sp, #24
   125ac:	mov	r4, r0
   125b0:	bl	1262c <__assert_fail@plt+0xe84>
   125b4:	mov	r6, r0
   125b8:	movw	r0, #16028	; 0x3e9c
   125bc:	movt	r0, #2
   125c0:	bl	11fdc <__assert_fail@plt+0x834>
   125c4:	cmp	r0, #0
   125c8:	beq	12624 <__assert_fail@plt+0xe7c>
   125cc:	movw	r8, #16028	; 0x3e9c
   125d0:	movt	r8, #2
   125d4:	b	125f0 <__assert_fail@plt+0xe48>
   125d8:	mov	r0, r7
   125dc:	bl	12020 <__assert_fail@plt+0x878>
   125e0:	mov	r0, r8
   125e4:	bl	11fdc <__assert_fail@plt+0x834>
   125e8:	cmp	r0, #0
   125ec:	beq	12624 <__assert_fail@plt+0xe7c>
   125f0:	mov	r0, r4
   125f4:	bl	1262c <__assert_fail@plt+0xe84>
   125f8:	mov	r7, r0
   125fc:	cmp	r4, #0
   12600:	beq	125d8 <__assert_fail@plt+0xe30>
   12604:	mov	r0, r6
   12608:	mov	r1, r7
   1260c:	bl	12854 <__assert_fail@plt+0x10ac>
   12610:	mov	r5, r0
   12614:	mov	r0, r6
   12618:	bl	12020 <__assert_fail@plt+0x878>
   1261c:	mov	r6, r5
   12620:	b	125d8 <__assert_fail@plt+0xe30>
   12624:	mov	r0, r6
   12628:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1262c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12630:	add	fp, sp, #24
   12634:	mov	r4, r0
   12638:	movw	r0, #15984	; 0x3e70
   1263c:	movt	r0, #2
   12640:	bl	11fdc <__assert_fail@plt+0x834>
   12644:	cmp	r0, #0
   12648:	beq	12670 <__assert_fail@plt+0xec8>
   1264c:	bl	12a28 <__assert_fail@plt+0x1280>
   12650:	movw	r0, #20920	; 0x51b8
   12654:	movt	r0, #3
   12658:	ldr	r1, [r0]
   1265c:	add	r2, r1, #4
   12660:	str	r2, [r0]
   12664:	ldr	r0, [r1]
   12668:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1266c:	b	12a84 <__assert_fail@plt+0x12dc>
   12670:	movw	r0, #16030	; 0x3e9e
   12674:	movt	r0, #2
   12678:	bl	11fdc <__assert_fail@plt+0x834>
   1267c:	cmp	r0, #0
   12680:	beq	126b4 <__assert_fail@plt+0xf0c>
   12684:	mov	r0, r4
   12688:	bl	1262c <__assert_fail@plt+0xe84>
   1268c:	mov	r4, r0
   12690:	bl	12358 <__assert_fail@plt+0xbb0>
   12694:	ldr	r0, [r4, #4]
   12698:	bl	133b4 <__assert_fail@plt+0x1c0c>
   1269c:	bl	12054 <__assert_fail@plt+0x8ac>
   126a0:	mov	r5, r0
   126a4:	mov	r0, r4
   126a8:	bl	12020 <__assert_fail@plt+0x878>
   126ac:	mov	r0, r5
   126b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   126b4:	movw	r0, #16037	; 0x3ea5
   126b8:	movt	r0, #2
   126bc:	bl	11fdc <__assert_fail@plt+0x834>
   126c0:	cmp	r0, #0
   126c4:	beq	12708 <__assert_fail@plt+0xf60>
   126c8:	mov	r0, r4
   126cc:	bl	1262c <__assert_fail@plt+0xe84>
   126d0:	mov	r6, r0
   126d4:	mov	r0, r4
   126d8:	bl	1262c <__assert_fail@plt+0xe84>
   126dc:	mov	r5, r0
   126e0:	cmp	r4, #0
   126e4:	beq	12770 <__assert_fail@plt+0xfc8>
   126e8:	mov	r0, r6
   126ec:	mov	r1, r5
   126f0:	bl	12854 <__assert_fail@plt+0x10ac>
   126f4:	mov	r7, r0
   126f8:	mov	r0, r6
   126fc:	bl	12020 <__assert_fail@plt+0x878>
   12700:	mov	r0, r5
   12704:	b	12848 <__assert_fail@plt+0x10a0>
   12708:	movw	r0, #16043	; 0x3eab
   1270c:	movt	r0, #2
   12710:	bl	11fdc <__assert_fail@plt+0x834>
   12714:	cmp	r0, #0
   12718:	beq	1277c <__assert_fail@plt+0xfd4>
   1271c:	mov	r0, r4
   12720:	bl	1262c <__assert_fail@plt+0xe84>
   12724:	mov	r5, r0
   12728:	mov	r0, r4
   1272c:	bl	1262c <__assert_fail@plt+0xe84>
   12730:	mov	r4, r0
   12734:	mov	r0, r5
   12738:	bl	12358 <__assert_fail@plt+0xbb0>
   1273c:	mov	r0, r4
   12740:	bl	12358 <__assert_fail@plt+0xbb0>
   12744:	ldr	r1, [r4, #4]
   12748:	ldr	r0, [r5, #4]
   1274c:	bl	12ab8 <__assert_fail@plt+0x1310>
   12750:	bl	12054 <__assert_fail@plt+0x8ac>
   12754:	mov	r6, r0
   12758:	mov	r0, r5
   1275c:	bl	12020 <__assert_fail@plt+0x878>
   12760:	mov	r0, r4
   12764:	bl	12020 <__assert_fail@plt+0x878>
   12768:	mov	r0, r6
   1276c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12770:	mov	r7, r6
   12774:	mov	r0, r5
   12778:	b	12848 <__assert_fail@plt+0x10a0>
   1277c:	movw	r0, #16049	; 0x3eb1
   12780:	movt	r0, #2
   12784:	bl	11fdc <__assert_fail@plt+0x834>
   12788:	cmp	r0, #0
   1278c:	beq	12818 <__assert_fail@plt+0x1070>
   12790:	mov	r0, r4
   12794:	bl	1262c <__assert_fail@plt+0xe84>
   12798:	mov	r5, r0
   1279c:	mov	r0, r4
   127a0:	bl	1262c <__assert_fail@plt+0xe84>
   127a4:	mov	r6, r0
   127a8:	mov	r0, r4
   127ac:	bl	1262c <__assert_fail@plt+0xe84>
   127b0:	mov	r4, r0
   127b4:	mov	r0, r5
   127b8:	bl	12358 <__assert_fail@plt+0xbb0>
   127bc:	mov	r0, r6
   127c0:	bl	12514 <__assert_fail@plt+0xd6c>
   127c4:	cmp	r0, #0
   127c8:	beq	12824 <__assert_fail@plt+0x107c>
   127cc:	mov	r0, r4
   127d0:	bl	12514 <__assert_fail@plt+0xd6c>
   127d4:	cmp	r0, #0
   127d8:	beq	12824 <__assert_fail@plt+0x107c>
   127dc:	add	r0, r6, #4
   127e0:	bl	12c8c <__assert_fail@plt+0x14e4>
   127e4:	mov	r7, r0
   127e8:	add	r0, r4, #4
   127ec:	bl	12c8c <__assert_fail@plt+0x14e4>
   127f0:	mov	r2, r0
   127f4:	ldr	r0, [r5, #4]
   127f8:	mov	r1, r7
   127fc:	bl	12cd8 <__assert_fail@plt+0x1530>
   12800:	mov	r8, r0
   12804:	bl	12a84 <__assert_fail@plt+0x12dc>
   12808:	mov	r7, r0
   1280c:	mov	r0, r8
   12810:	bl	13140 <__assert_fail@plt+0x1998>
   12814:	b	12834 <__assert_fail@plt+0x108c>
   12818:	mov	r0, r4
   1281c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12820:	b	12e6c <__assert_fail@plt+0x16c4>
   12824:	movw	r0, #15963	; 0x3e5b
   12828:	movt	r0, #2
   1282c:	bl	12a84 <__assert_fail@plt+0x12dc>
   12830:	mov	r7, r0
   12834:	mov	r0, r5
   12838:	bl	12020 <__assert_fail@plt+0x878>
   1283c:	mov	r0, r6
   12840:	bl	12020 <__assert_fail@plt+0x878>
   12844:	mov	r0, r4
   12848:	bl	12020 <__assert_fail@plt+0x878>
   1284c:	mov	r0, r7
   12850:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12854:	push	{r4, r5, r6, r7, fp, lr}
   12858:	add	fp, sp, #16
   1285c:	sub	sp, sp, #304	; 0x130
   12860:	mov	r5, r1
   12864:	mov	r4, r0
   12868:	bl	12358 <__assert_fail@plt+0xbb0>
   1286c:	mov	r0, r5
   12870:	bl	12358 <__assert_fail@plt+0xbb0>
   12874:	movw	r0, #21240	; 0x52f8
   12878:	movt	r0, #3
   1287c:	movw	r1, #710	; 0x2c6
   12880:	str	r1, [r0]
   12884:	mov	r0, #0
   12888:	str	r0, [sp, #12]
   1288c:	str	r0, [sp, #8]
   12890:	str	r0, [sp, #4]
   12894:	str	r0, [fp, #-28]	; 0xffffffe4
   12898:	add	r1, sp, #16
   1289c:	str	r1, [fp, #-32]	; 0xffffffe0
   128a0:	str	r0, [fp, #-44]	; 0xffffffd4
   128a4:	str	r0, [fp, #-48]	; 0xffffffd0
   128a8:	ldr	r5, [r5, #4]
   128ac:	mov	r0, r5
   128b0:	bl	11658 <strlen@plt>
   128b4:	mov	r1, r0
   128b8:	sub	r2, fp, #48	; 0x30
   128bc:	mov	r0, r5
   128c0:	bl	15250 <__assert_fail@plt+0x3aa8>
   128c4:	cmp	r0, #0
   128c8:	bne	129d8 <__assert_fail@plt+0x1230>
   128cc:	ldrb	r0, [fp, #-20]	; 0xffffffec
   128d0:	and	r0, r0, #127	; 0x7f
   128d4:	strb	r0, [fp, #-20]	; 0xffffffec
   128d8:	ldr	r5, [r4, #4]
   128dc:	mov	r0, r5
   128e0:	bl	11658 <strlen@plt>
   128e4:	mov	r2, r0
   128e8:	add	r0, sp, #4
   128ec:	str	r0, [sp]
   128f0:	sub	r0, fp, #48	; 0x30
   128f4:	mov	r1, r5
   128f8:	mov	r3, #0
   128fc:	bl	164f4 <__assert_fail@plt+0x4d4c>
   12900:	mov	r5, r0
   12904:	cmp	r0, #0
   12908:	bmi	1294c <__assert_fail@plt+0x11a4>
   1290c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12910:	cmp	r0, #0
   12914:	beq	12970 <__assert_fail@plt+0x11c8>
   12918:	ldr	r0, [sp, #12]
   1291c:	ldr	r0, [r0, #4]
   12920:	cmn	r0, #1
   12924:	ble	12960 <__assert_fail@plt+0x11b8>
   12928:	ldr	r1, [r4, #4]
   1292c:	mov	r2, #0
   12930:	strb	r2, [r1, r0]
   12934:	ldr	r0, [r4, #4]
   12938:	ldr	r1, [sp, #8]
   1293c:	ldr	r1, [r1, #4]
   12940:	add	r0, r0, r1
   12944:	bl	12a84 <__assert_fail@plt+0x12dc>
   12948:	b	1299c <__assert_fail@plt+0x11f4>
   1294c:	cmn	r5, #1
   12950:	bne	129f0 <__assert_fail@plt+0x1248>
   12954:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12958:	cmp	r0, #0
   1295c:	beq	12994 <__assert_fail@plt+0x11ec>
   12960:	movw	r0, #15963	; 0x3e5b
   12964:	movt	r0, #2
   12968:	bl	12a84 <__assert_fail@plt+0x12dc>
   1296c:	b	1299c <__assert_fail@plt+0x11f4>
   12970:	bl	1158c <__ctype_get_mb_cur_max@plt>
   12974:	cmp	r0, #1
   12978:	beq	1298c <__assert_fail@plt+0x11e4>
   1297c:	ldr	r0, [r4, #4]
   12980:	mov	r1, r5
   12984:	bl	12f8c <__assert_fail@plt+0x17e4>
   12988:	mov	r5, r0
   1298c:	mov	r0, r5
   12990:	b	12998 <__assert_fail@plt+0x11f0>
   12994:	mov	r0, #0
   12998:	bl	12054 <__assert_fail@plt+0x8ac>
   1299c:	mov	r4, r0
   129a0:	ldr	r0, [sp, #4]
   129a4:	cmp	r0, #0
   129a8:	beq	129bc <__assert_fail@plt+0x1214>
   129ac:	ldr	r0, [sp, #8]
   129b0:	bl	13140 <__assert_fail@plt+0x1998>
   129b4:	ldr	r0, [sp, #12]
   129b8:	bl	13140 <__assert_fail@plt+0x1998>
   129bc:	mov	r0, #0
   129c0:	str	r0, [fp, #-32]	; 0xffffffe0
   129c4:	sub	r0, fp, #48	; 0x30
   129c8:	bl	15a6c <__assert_fail@plt+0x42c4>
   129cc:	mov	r0, r4
   129d0:	sub	sp, fp, #16
   129d4:	pop	{r4, r5, r6, r7, fp, pc}
   129d8:	mov	r3, r0
   129dc:	movw	r2, #16448	; 0x4040
   129e0:	movt	r2, #2
   129e4:	mov	r0, #2
   129e8:	mov	r1, #0
   129ec:	bl	115c8 <error@plt>
   129f0:	mov	r4, #75	; 0x4b
   129f4:	cmn	r5, #2
   129f8:	bne	12a04 <__assert_fail@plt+0x125c>
   129fc:	bl	11688 <__errno_location@plt>
   12a00:	ldr	r4, [r0]
   12a04:	movw	r1, #16334	; 0x3fce
   12a08:	movt	r1, #2
   12a0c:	mov	r0, #0
   12a10:	mov	r2, #5
   12a14:	bl	11514 <dcgettext@plt>
   12a18:	mov	r2, r0
   12a1c:	mov	r0, #3
   12a20:	mov	r1, r4
   12a24:	bl	115c8 <error@plt>
   12a28:	push	{r4, sl, fp, lr}
   12a2c:	add	fp, sp, #8
   12a30:	bl	11e48 <__assert_fail@plt+0x6a0>
   12a34:	cmp	r0, #0
   12a38:	popeq	{r4, sl, fp, pc}
   12a3c:	movw	r1, #16056	; 0x3eb8
   12a40:	movt	r1, #2
   12a44:	mov	r0, #0
   12a48:	mov	r2, #5
   12a4c:	bl	11514 <dcgettext@plt>
   12a50:	mov	r4, r0
   12a54:	movw	r0, #20920	; 0x51b8
   12a58:	movt	r0, #3
   12a5c:	ldr	r0, [r0]
   12a60:	ldr	r2, [r0, #-4]
   12a64:	mov	r0, #0
   12a68:	mov	r1, #8
   12a6c:	bl	14b94 <__assert_fail@plt+0x33ec>
   12a70:	mov	r3, r0
   12a74:	mov	r0, #2
   12a78:	mov	r1, #0
   12a7c:	mov	r2, r4
   12a80:	bl	115c8 <error@plt>
   12a84:	push	{r4, r5, fp, lr}
   12a88:	add	fp, sp, #8
   12a8c:	mov	r4, r0
   12a90:	mov	r0, #16
   12a94:	bl	22698 <__assert_fail@plt+0x10ef0>
   12a98:	mov	r5, r0
   12a9c:	mov	r0, #1
   12aa0:	str	r0, [r5]
   12aa4:	mov	r0, r4
   12aa8:	bl	22a00 <__assert_fail@plt+0x11258>
   12aac:	str	r0, [r5, #4]
   12ab0:	mov	r0, r5
   12ab4:	pop	{r4, r5, fp, pc}
   12ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12abc:	add	fp, sp, #28
   12ac0:	sub	sp, sp, #116	; 0x74
   12ac4:	mov	r5, r0
   12ac8:	ldrb	r0, [r1]
   12acc:	cmp	r0, #0
   12ad0:	beq	12c58 <__assert_fail@plt+0x14b0>
   12ad4:	mov	r4, r1
   12ad8:	bl	1158c <__ctype_get_mb_cur_max@plt>
   12adc:	cmp	r0, #2
   12ae0:	bcc	12c60 <__assert_fail@plt+0x14b8>
   12ae4:	mov	r7, #0
   12ae8:	str	r7, [sp, #68]	; 0x44
   12aec:	str	r7, [sp, #64]	; 0x40
   12af0:	strb	r7, [sp, #72]	; 0x48
   12af4:	strb	r7, [sp, #60]	; 0x3c
   12af8:	str	r5, [sp, #76]	; 0x4c
   12afc:	add	r0, sp, #60	; 0x3c
   12b00:	bl	13468 <__assert_fail@plt+0x1cc0>
   12b04:	ldrb	r0, [sp, #84]	; 0x54
   12b08:	cmp	r0, #0
   12b0c:	beq	12b1c <__assert_fail@plt+0x1374>
   12b10:	ldr	r0, [sp, #88]	; 0x58
   12b14:	cmp	r0, #0
   12b18:	beq	12c80 <__assert_fail@plt+0x14d8>
   12b1c:	add	r5, sp, #4
   12b20:	add	r9, r5, #4
   12b24:	mov	r6, #0
   12b28:	add	r8, sp, #60	; 0x3c
   12b2c:	mov	sl, #0
   12b30:	mov	r7, #0
   12b34:	add	sl, sl, #1
   12b38:	ldr	r0, [sp, #80]	; 0x50
   12b3c:	cmp	r0, #1
   12b40:	bne	12b60 <__assert_fail@plt+0x13b8>
   12b44:	ldr	r0, [sp, #76]	; 0x4c
   12b48:	ldrb	r1, [r0]
   12b4c:	mov	r0, r4
   12b50:	bl	132dc <__assert_fail@plt+0x1b34>
   12b54:	cmp	r0, #0
   12b58:	beq	12c20 <__assert_fail@plt+0x1478>
   12b5c:	b	12c7c <__assert_fail@plt+0x14d4>
   12b60:	strb	r6, [sp, #4]
   12b64:	str	r4, [sp, #20]
   12b68:	str	r6, [r9]
   12b6c:	str	r6, [r9, #4]
   12b70:	strb	r6, [sp, #16]
   12b74:	mov	r0, r5
   12b78:	bl	13468 <__assert_fail@plt+0x1cc0>
   12b7c:	ldrb	r1, [sp, #28]
   12b80:	ldr	r0, [sp, #32]
   12b84:	cmp	r0, #0
   12b88:	bne	12b94 <__assert_fail@plt+0x13ec>
   12b8c:	cmp	r1, #0
   12b90:	bne	12c20 <__assert_fail@plt+0x1478>
   12b94:	clz	r1, r1
   12b98:	lsr	r1, r1, #5
   12b9c:	tst	r1, #1
   12ba0:	bne	12bc0 <__assert_fail@plt+0x1418>
   12ba4:	ldrb	r1, [sp, #84]	; 0x54
   12ba8:	cmp	r1, #0
   12bac:	beq	12bc0 <__assert_fail@plt+0x1418>
   12bb0:	ldr	r1, [sp, #88]	; 0x58
   12bb4:	cmp	r0, r1
   12bb8:	bne	12be4 <__assert_fail@plt+0x143c>
   12bbc:	b	12c7c <__assert_fail@plt+0x14d4>
   12bc0:	ldr	r2, [sp, #24]
   12bc4:	ldr	r0, [sp, #80]	; 0x50
   12bc8:	cmp	r2, r0
   12bcc:	bne	12be4 <__assert_fail@plt+0x143c>
   12bd0:	ldr	r1, [sp, #76]	; 0x4c
   12bd4:	ldr	r0, [sp, #20]
   12bd8:	bl	1164c <bcmp@plt>
   12bdc:	cmp	r0, #0
   12be0:	beq	12c7c <__assert_fail@plt+0x14d4>
   12be4:	strb	r6, [sp, #16]
   12be8:	ldr	r0, [sp, #20]
   12bec:	ldr	r1, [sp, #24]
   12bf0:	add	r0, r0, r1
   12bf4:	str	r0, [sp, #20]
   12bf8:	mov	r0, r5
   12bfc:	bl	13468 <__assert_fail@plt+0x1cc0>
   12c00:	ldrb	r2, [sp, #28]
   12c04:	clz	r0, r2
   12c08:	lsr	r1, r0, #5
   12c0c:	ldr	r0, [sp, #32]
   12c10:	cmp	r0, #0
   12c14:	bne	12b9c <__assert_fail@plt+0x13f4>
   12c18:	cmp	r2, #0
   12c1c:	beq	12b9c <__assert_fail@plt+0x13f4>
   12c20:	strb	r7, [sp, #72]	; 0x48
   12c24:	ldr	r0, [sp, #76]	; 0x4c
   12c28:	ldr	r1, [sp, #80]	; 0x50
   12c2c:	add	r0, r0, r1
   12c30:	str	r0, [sp, #76]	; 0x4c
   12c34:	mov	r0, r8
   12c38:	bl	13468 <__assert_fail@plt+0x1cc0>
   12c3c:	ldrb	r0, [sp, #84]	; 0x54
   12c40:	cmp	r0, #0
   12c44:	beq	12b34 <__assert_fail@plt+0x138c>
   12c48:	ldr	r0, [sp, #88]	; 0x58
   12c4c:	cmp	r0, #0
   12c50:	bne	12b34 <__assert_fail@plt+0x138c>
   12c54:	b	12c80 <__assert_fail@plt+0x14d8>
   12c58:	mov	r7, #0
   12c5c:	b	12c80 <__assert_fail@plt+0x14d8>
   12c60:	mov	r0, r5
   12c64:	mov	r1, r4
   12c68:	bl	1146c <strcspn@plt>
   12c6c:	ldrb	r7, [r5, r0]
   12c70:	cmp	r7, #0
   12c74:	addne	r7, r0, #1
   12c78:	b	12c80 <__assert_fail@plt+0x14d8>
   12c7c:	mov	r7, sl
   12c80:	mov	r0, r7
   12c84:	sub	sp, fp, #28
   12c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c8c:	push	{r4, sl, fp, lr}
   12c90:	add	fp, sp, #8
   12c94:	mov	r4, r0
   12c98:	ldr	r0, [r0, #4]
   12c9c:	cmp	r0, #0
   12ca0:	bmi	12cc8 <__assert_fail@plt+0x1520>
   12ca4:	mov	r0, r4
   12ca8:	bl	11598 <__gmpz_fits_ulong_p@plt>
   12cac:	cmp	r0, #0
   12cb0:	beq	12cd0 <__assert_fail@plt+0x1528>
   12cb4:	mov	r0, r4
   12cb8:	bl	115d4 <__gmpz_get_ui@plt>
   12cbc:	cmn	r0, #1
   12cc0:	mvneq	r0, #1
   12cc4:	pop	{r4, sl, fp, pc}
   12cc8:	mvn	r0, #0
   12ccc:	pop	{r4, sl, fp, pc}
   12cd0:	mvn	r0, #1
   12cd4:	pop	{r4, sl, fp, pc}
   12cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cdc:	add	fp, sp, #28
   12ce0:	sub	sp, sp, #60	; 0x3c
   12ce4:	mov	r6, r2
   12ce8:	mov	r4, r1
   12cec:	mov	r7, r0
   12cf0:	bl	11658 <strlen@plt>
   12cf4:	mov	r8, r0
   12cf8:	bl	1158c <__ctype_get_mb_cur_max@plt>
   12cfc:	cmp	r0, #2
   12d00:	mov	r0, r8
   12d04:	bcc	12d10 <__assert_fail@plt+0x1568>
   12d08:	mov	r0, r7
   12d0c:	bl	133b4 <__assert_fail@plt+0x1c0c>
   12d10:	add	r1, r6, #1
   12d14:	cmp	r1, #2
   12d18:	bcc	12d6c <__assert_fail@plt+0x15c4>
   12d1c:	sub	r1, r4, #1
   12d20:	cmp	r1, r0
   12d24:	bcs	12d6c <__assert_fail@plt+0x15c4>
   12d28:	sub	r0, r0, r4
   12d2c:	add	r5, r0, #1
   12d30:	cmp	r5, r6
   12d34:	movhi	r5, r6
   12d38:	bl	1158c <__ctype_get_mb_cur_max@plt>
   12d3c:	cmp	r0, #1
   12d40:	bne	12d80 <__assert_fail@plt+0x15d8>
   12d44:	add	r4, r7, r4
   12d48:	add	r0, r5, #1
   12d4c:	bl	22698 <__assert_fail@plt+0x10ef0>
   12d50:	mov	r8, r0
   12d54:	sub	r1, r4, #1
   12d58:	mov	r2, r5
   12d5c:	mvn	r3, #0
   12d60:	bl	1179c <__mempcpy_chk@plt>
   12d64:	mov	r7, r0
   12d68:	b	12e58 <__assert_fail@plt+0x16b0>
   12d6c:	movw	r0, #15963	; 0x3e5b
   12d70:	movt	r0, #2
   12d74:	sub	sp, fp, #28
   12d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d7c:	b	22a00 <__assert_fail@plt+0x11258>
   12d80:	add	r0, r8, #1
   12d84:	bl	22698 <__assert_fail@plt+0x10ef0>
   12d88:	mov	r8, r0
   12d8c:	mov	r0, #0
   12d90:	str	r0, [sp, #12]
   12d94:	str	r0, [sp, #8]
   12d98:	strb	r0, [sp, #16]
   12d9c:	strb	r0, [sp, #4]
   12da0:	str	r7, [sp, #20]
   12da4:	add	r0, sp, #4
   12da8:	bl	13468 <__assert_fail@plt+0x1cc0>
   12dac:	ldr	r0, [sp, #32]
   12db0:	cmp	r0, #0
   12db4:	movwne	r0, #1
   12db8:	cmp	r5, #0
   12dbc:	mov	r7, r8
   12dc0:	beq	12e58 <__assert_fail@plt+0x16b0>
   12dc4:	ldrb	r1, [sp, #28]
   12dc8:	clz	r1, r1
   12dcc:	lsr	r1, r1, #5
   12dd0:	orrs	r0, r1, r0
   12dd4:	mov	r7, r8
   12dd8:	beq	12e58 <__assert_fail@plt+0x16b0>
   12ddc:	mov	r6, #1
   12de0:	mov	sl, #0
   12de4:	add	r9, sp, #4
   12de8:	mov	r7, r8
   12dec:	cmp	r6, r4
   12df0:	bcc	12e10 <__assert_fail@plt+0x1668>
   12df4:	ldr	r1, [sp, #20]
   12df8:	ldr	r2, [sp, #24]
   12dfc:	mov	r0, r7
   12e00:	mvn	r3, #0
   12e04:	bl	1179c <__mempcpy_chk@plt>
   12e08:	mov	r7, r0
   12e0c:	sub	r5, r5, #1
   12e10:	strb	sl, [sp, #16]
   12e14:	ldr	r0, [sp, #20]
   12e18:	ldr	r1, [sp, #24]
   12e1c:	add	r0, r0, r1
   12e20:	str	r0, [sp, #20]
   12e24:	mov	r0, r9
   12e28:	bl	13468 <__assert_fail@plt+0x1cc0>
   12e2c:	ldr	r0, [sp, #32]
   12e30:	cmp	r0, #0
   12e34:	movwne	r0, #1
   12e38:	cmp	r5, #0
   12e3c:	beq	12e58 <__assert_fail@plt+0x16b0>
   12e40:	ldrb	r1, [sp, #28]
   12e44:	clz	r1, r1
   12e48:	lsr	r1, r1, #5
   12e4c:	orrs	r0, r1, r0
   12e50:	add	r6, r6, #1
   12e54:	bne	12dec <__assert_fail@plt+0x1644>
   12e58:	mov	r0, #0
   12e5c:	strb	r0, [r7]
   12e60:	mov	r0, r8
   12e64:	sub	sp, fp, #28
   12e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e6c:	push	{r4, sl, fp, lr}
   12e70:	add	fp, sp, #8
   12e74:	mov	r4, r0
   12e78:	bl	12a28 <__assert_fail@plt+0x1280>
   12e7c:	movw	r0, #16224	; 0x3f60
   12e80:	movt	r0, #2
   12e84:	bl	11fdc <__assert_fail@plt+0x834>
   12e88:	cmp	r0, #0
   12e8c:	beq	12f08 <__assert_fail@plt+0x1760>
   12e90:	mov	r0, r4
   12e94:	bl	11d94 <__assert_fail@plt+0x5ec>
   12e98:	mov	r4, r0
   12e9c:	bl	11e48 <__assert_fail@plt+0x6a0>
   12ea0:	cmp	r0, #0
   12ea4:	bne	12f3c <__assert_fail@plt+0x1794>
   12ea8:	movw	r0, #16181	; 0x3f35
   12eac:	movt	r0, #2
   12eb0:	bl	11fdc <__assert_fail@plt+0x834>
   12eb4:	cmp	r0, #0
   12eb8:	movne	r0, r4
   12ebc:	popne	{r4, sl, fp, pc}
   12ec0:	movw	r1, #16263	; 0x3f87
   12ec4:	movt	r1, #2
   12ec8:	mov	r0, #0
   12ecc:	mov	r2, #5
   12ed0:	bl	11514 <dcgettext@plt>
   12ed4:	mov	r4, r0
   12ed8:	movw	r0, #20920	; 0x51b8
   12edc:	movt	r0, #3
   12ee0:	ldr	r0, [r0]
   12ee4:	ldr	r2, [r0]
   12ee8:	mov	r0, #0
   12eec:	mov	r1, #8
   12ef0:	bl	14b94 <__assert_fail@plt+0x33ec>
   12ef4:	mov	r3, r0
   12ef8:	mov	r0, #2
   12efc:	mov	r1, #0
   12f00:	mov	r2, r4
   12f04:	bl	115c8 <error@plt>
   12f08:	movw	r0, #16181	; 0x3f35
   12f0c:	movt	r0, #2
   12f10:	bl	11fdc <__assert_fail@plt+0x834>
   12f14:	cmp	r0, #0
   12f18:	bne	12f68 <__assert_fail@plt+0x17c0>
   12f1c:	movw	r0, #20920	; 0x51b8
   12f20:	movt	r0, #3
   12f24:	ldr	r1, [r0]
   12f28:	add	r2, r1, #4
   12f2c:	str	r2, [r0]
   12f30:	ldr	r0, [r1]
   12f34:	pop	{r4, sl, fp, lr}
   12f38:	b	12a84 <__assert_fail@plt+0x12dc>
   12f3c:	movw	r1, #16226	; 0x3f62
   12f40:	movt	r1, #2
   12f44:	mov	r0, #0
   12f48:	mov	r2, #5
   12f4c:	bl	11514 <dcgettext@plt>
   12f50:	mov	r4, r0
   12f54:	movw	r0, #20920	; 0x51b8
   12f58:	movt	r0, #3
   12f5c:	ldr	r0, [r0]
   12f60:	ldr	r2, [r0, #-4]
   12f64:	b	12ee8 <__assert_fail@plt+0x1740>
   12f68:	movw	r1, #16305	; 0x3fb1
   12f6c:	movt	r1, #2
   12f70:	mov	r0, #0
   12f74:	mov	r2, #5
   12f78:	bl	11514 <dcgettext@plt>
   12f7c:	mov	r2, r0
   12f80:	mov	r0, #2
   12f84:	mov	r1, #0
   12f88:	bl	115c8 <error@plt>
   12f8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f90:	add	fp, sp, #24
   12f94:	sub	sp, sp, #56	; 0x38
   12f98:	mov	r4, r1
   12f9c:	mov	r6, r0
   12fa0:	mov	r5, #0
   12fa4:	str	r5, [sp, #8]
   12fa8:	str	r5, [sp, #4]
   12fac:	strb	r5, [sp, #12]
   12fb0:	strb	r5, [sp]
   12fb4:	str	r0, [sp, #16]
   12fb8:	mov	r0, sp
   12fbc:	bl	13468 <__assert_fail@plt+0x1cc0>
   12fc0:	ldrb	r0, [sp, #24]
   12fc4:	cmp	r0, #0
   12fc8:	beq	12fd8 <__assert_fail@plt+0x1830>
   12fcc:	ldr	r0, [sp, #28]
   12fd0:	cmp	r0, #0
   12fd4:	beq	1302c <__assert_fail@plt+0x1884>
   12fd8:	mov	r8, #0
   12fdc:	mov	r7, sp
   12fe0:	mov	r5, #0
   12fe4:	ldr	r0, [sp, #16]
   12fe8:	sub	r0, r0, r6
   12fec:	cmp	r0, r4
   12ff0:	addcc	r5, r5, #1
   12ff4:	bcs	1302c <__assert_fail@plt+0x1884>
   12ff8:	strb	r8, [sp, #12]
   12ffc:	ldr	r0, [sp, #16]
   13000:	ldr	r1, [sp, #20]
   13004:	add	r0, r0, r1
   13008:	str	r0, [sp, #16]
   1300c:	mov	r0, r7
   13010:	bl	13468 <__assert_fail@plt+0x1cc0>
   13014:	ldrb	r0, [sp, #24]
   13018:	cmp	r0, #0
   1301c:	beq	12fe4 <__assert_fail@plt+0x183c>
   13020:	ldr	r0, [sp, #28]
   13024:	cmp	r0, #0
   13028:	bne	12fe4 <__assert_fail@plt+0x183c>
   1302c:	mov	r0, r5
   13030:	sub	sp, fp, #24
   13034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13038:	movw	r1, #20924	; 0x51bc
   1303c:	movt	r1, #3
   13040:	str	r0, [r1]
   13044:	bx	lr
   13048:	movw	r1, #20928	; 0x51c0
   1304c:	movt	r1, #3
   13050:	strb	r0, [r1]
   13054:	bx	lr
   13058:	push	{r4, r5, r6, sl, fp, lr}
   1305c:	add	fp, sp, #16
   13060:	sub	sp, sp, #8
   13064:	movw	r0, #20908	; 0x51ac
   13068:	movt	r0, #3
   1306c:	ldr	r0, [r0]
   13070:	bl	22e60 <__assert_fail@plt+0x116b8>
   13074:	cmp	r0, #0
   13078:	beq	130a0 <__assert_fail@plt+0x18f8>
   1307c:	movw	r0, #20928	; 0x51c0
   13080:	movt	r0, #3
   13084:	ldrb	r0, [r0]
   13088:	cmp	r0, #0
   1308c:	beq	130c0 <__assert_fail@plt+0x1918>
   13090:	bl	11688 <__errno_location@plt>
   13094:	ldr	r0, [r0]
   13098:	cmp	r0, #32
   1309c:	bne	130c0 <__assert_fail@plt+0x1918>
   130a0:	movw	r0, #20904	; 0x51a8
   130a4:	movt	r0, #3
   130a8:	ldr	r0, [r0]
   130ac:	bl	22e60 <__assert_fail@plt+0x116b8>
   130b0:	cmp	r0, #0
   130b4:	subeq	sp, fp, #16
   130b8:	popeq	{r4, r5, r6, sl, fp, pc}
   130bc:	b	13130 <__assert_fail@plt+0x1988>
   130c0:	movw	r1, #16432	; 0x4030
   130c4:	movt	r1, #2
   130c8:	mov	r0, #0
   130cc:	mov	r2, #5
   130d0:	bl	11514 <dcgettext@plt>
   130d4:	mov	r4, r0
   130d8:	movw	r0, #20924	; 0x51bc
   130dc:	movt	r0, #3
   130e0:	ldr	r6, [r0]
   130e4:	bl	11688 <__errno_location@plt>
   130e8:	ldr	r5, [r0]
   130ec:	cmp	r6, #0
   130f0:	bne	1310c <__assert_fail@plt+0x1964>
   130f4:	movw	r2, #16448	; 0x4040
   130f8:	movt	r2, #2
   130fc:	mov	r0, #0
   13100:	mov	r1, r5
   13104:	mov	r3, r4
   13108:	b	1312c <__assert_fail@plt+0x1984>
   1310c:	mov	r0, r6
   13110:	bl	14ce8 <__assert_fail@plt+0x3540>
   13114:	mov	r3, r0
   13118:	str	r4, [sp]
   1311c:	movw	r2, #16444	; 0x403c
   13120:	movt	r2, #2
   13124:	mov	r0, #0
   13128:	mov	r1, r5
   1312c:	bl	115c8 <error@plt>
   13130:	movw	r0, #20816	; 0x5150
   13134:	movt	r0, #3
   13138:	ldr	r0, [r0]
   1313c:	bl	114c0 <_exit@plt>
   13140:	push	{r4, r5, r6, sl, fp, lr}
   13144:	add	fp, sp, #16
   13148:	mov	r4, r0
   1314c:	bl	11688 <__errno_location@plt>
   13150:	mov	r5, r0
   13154:	ldr	r6, [r0]
   13158:	mov	r0, r4
   1315c:	bl	114a8 <free@plt>
   13160:	str	r6, [r5]
   13164:	pop	{r4, r5, r6, sl, fp, pc}
   13168:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1316c:	add	fp, sp, #24
   13170:	sub	sp, sp, #8
   13174:	movw	r6, #20912	; 0x51b0
   13178:	movt	r6, #3
   1317c:	ldr	r7, [r6]
   13180:	mov	r4, #0
   13184:	str	r4, [r6]
   13188:	cmp	r0, #2
   1318c:	bne	13200 <__assert_fail@plt+0x1a58>
   13190:	mov	r8, r3
   13194:	mov	r5, r2
   13198:	str	r4, [sp]
   1319c:	movw	r2, #15984	; 0x3e70
   131a0:	movt	r2, #2
   131a4:	movw	r3, #16464	; 0x4050
   131a8:	movt	r3, #2
   131ac:	mov	r0, #2
   131b0:	bl	11628 <getopt_long@plt>
   131b4:	cmp	r0, #104	; 0x68
   131b8:	beq	131f4 <__assert_fail@plt+0x1a4c>
   131bc:	cmp	r0, #118	; 0x76
   131c0:	bne	13200 <__assert_fail@plt+0x1a58>
   131c4:	ldr	r3, [fp, #8]
   131c8:	add	r1, fp, #16
   131cc:	str	r1, [sp, #4]
   131d0:	movw	r0, #20908	; 0x51ac
   131d4:	movt	r0, #3
   131d8:	ldr	r0, [r0]
   131dc:	str	r1, [sp]
   131e0:	mov	r1, r5
   131e4:	mov	r2, r8
   131e8:	bl	22540 <__assert_fail@plt+0x10d98>
   131ec:	mov	r0, #0
   131f0:	bl	11640 <exit@plt>
   131f4:	ldr	r1, [fp, #12]
   131f8:	mov	r0, #0
   131fc:	blx	r1
   13200:	movw	r0, #20896	; 0x51a0
   13204:	movt	r0, #3
   13208:	str	r4, [r0]
   1320c:	str	r7, [r6]
   13210:	sub	sp, fp, #24
   13214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13218:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1321c:	add	fp, sp, #24
   13220:	sub	sp, sp, #8
   13224:	mov	r8, r3
   13228:	mov	r9, r2
   1322c:	movw	r7, #20912	; 0x51b0
   13230:	movt	r7, #3
   13234:	ldr	r4, [r7]
   13238:	mov	r2, #1
   1323c:	str	r2, [r7]
   13240:	mov	r6, #0
   13244:	str	r6, [sp]
   13248:	ldr	r3, [fp, #12]
   1324c:	movw	r5, #15963	; 0x3e5b
   13250:	movt	r5, #2
   13254:	movw	r2, #15984	; 0x3e70
   13258:	movt	r2, #2
   1325c:	cmp	r3, #0
   13260:	movne	r2, r5
   13264:	movw	r3, #16464	; 0x4050
   13268:	movt	r3, #2
   1326c:	bl	11628 <getopt_long@plt>
   13270:	cmn	r0, #1
   13274:	beq	132a0 <__assert_fail@plt+0x1af8>
   13278:	cmp	r0, #104	; 0x68
   1327c:	beq	13294 <__assert_fail@plt+0x1aec>
   13280:	cmp	r0, #118	; 0x76
   13284:	beq	132ac <__assert_fail@plt+0x1b04>
   13288:	movw	r0, #20816	; 0x5150
   1328c:	movt	r0, #3
   13290:	ldr	r6, [r0]
   13294:	ldr	r1, [fp, #16]
   13298:	mov	r0, r6
   1329c:	blx	r1
   132a0:	str	r4, [r7]
   132a4:	sub	sp, fp, #24
   132a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   132ac:	ldr	r3, [fp, #8]
   132b0:	add	r1, fp, #20
   132b4:	str	r1, [sp, #4]
   132b8:	movw	r0, #20908	; 0x51ac
   132bc:	movt	r0, #3
   132c0:	ldr	r0, [r0]
   132c4:	str	r1, [sp]
   132c8:	mov	r1, r9
   132cc:	mov	r2, r8
   132d0:	bl	22540 <__assert_fail@plt+0x10d98>
   132d4:	mov	r0, #0
   132d8:	bl	11640 <exit@plt>
   132dc:	push	{r4, r5, r6, sl, fp, lr}
   132e0:	add	fp, sp, #16
   132e4:	sub	sp, sp, #56	; 0x38
   132e8:	mov	r5, r1
   132ec:	mov	r6, r0
   132f0:	and	r4, r1, #240	; 0xf0
   132f4:	bl	1158c <__ctype_get_mb_cur_max@plt>
   132f8:	cmp	r4, #48	; 0x30
   132fc:	cmpcs	r0, #2
   13300:	bcs	13318 <__assert_fail@plt+0x1b70>
   13304:	mov	r0, r6
   13308:	mov	r1, r5
   1330c:	sub	sp, fp, #16
   13310:	pop	{r4, r5, r6, sl, fp, lr}
   13314:	b	11664 <strchr@plt>
   13318:	mov	r4, #0
   1331c:	str	r4, [sp, #8]
   13320:	str	r4, [sp, #4]
   13324:	strb	r4, [sp, #12]
   13328:	strb	r4, [sp]
   1332c:	str	r6, [sp, #16]
   13330:	mov	r0, sp
   13334:	bl	13468 <__assert_fail@plt+0x1cc0>
   13338:	ldrb	r0, [sp, #24]
   1333c:	cmp	r0, #0
   13340:	beq	13350 <__assert_fail@plt+0x1ba8>
   13344:	ldr	r0, [sp, #28]
   13348:	cmp	r0, #0
   1334c:	beq	133a8 <__assert_fail@plt+0x1c00>
   13350:	uxtb	r6, r5
   13354:	mov	r5, sp
   13358:	ldr	r0, [sp, #20]
   1335c:	cmp	r0, #1
   13360:	bne	13374 <__assert_fail@plt+0x1bcc>
   13364:	ldr	r4, [sp, #16]
   13368:	ldrb	r1, [r4]
   1336c:	cmp	r1, r6
   13370:	beq	133a8 <__assert_fail@plt+0x1c00>
   13374:	mov	r4, #0
   13378:	strb	r4, [sp, #12]
   1337c:	ldr	r1, [sp, #16]
   13380:	add	r0, r1, r0
   13384:	str	r0, [sp, #16]
   13388:	mov	r0, r5
   1338c:	bl	13468 <__assert_fail@plt+0x1cc0>
   13390:	ldrb	r0, [sp, #24]
   13394:	cmp	r0, #0
   13398:	beq	13358 <__assert_fail@plt+0x1bb0>
   1339c:	ldr	r0, [sp, #28]
   133a0:	cmp	r0, #0
   133a4:	bne	13358 <__assert_fail@plt+0x1bb0>
   133a8:	mov	r0, r4
   133ac:	sub	sp, fp, #16
   133b0:	pop	{r4, r5, r6, sl, fp, pc}
   133b4:	push	{r4, r5, r6, sl, fp, lr}
   133b8:	add	fp, sp, #16
   133bc:	sub	sp, sp, #56	; 0x38
   133c0:	mov	r5, r0
   133c4:	bl	1158c <__ctype_get_mb_cur_max@plt>
   133c8:	cmp	r0, #2
   133cc:	bcc	13458 <__assert_fail@plt+0x1cb0>
   133d0:	mov	r4, #0
   133d4:	str	r4, [sp, #8]
   133d8:	str	r4, [sp, #4]
   133dc:	strb	r4, [sp, #12]
   133e0:	strb	r4, [sp]
   133e4:	str	r5, [sp, #16]
   133e8:	mov	r0, sp
   133ec:	bl	13468 <__assert_fail@plt+0x1cc0>
   133f0:	ldrb	r0, [sp, #24]
   133f4:	cmp	r0, #0
   133f8:	beq	13408 <__assert_fail@plt+0x1c60>
   133fc:	ldr	r0, [sp, #28]
   13400:	cmp	r0, #0
   13404:	beq	1344c <__assert_fail@plt+0x1ca4>
   13408:	mov	r6, #0
   1340c:	mov	r5, sp
   13410:	mov	r4, #0
   13414:	strb	r6, [sp, #12]
   13418:	ldr	r0, [sp, #16]
   1341c:	ldr	r1, [sp, #20]
   13420:	add	r0, r0, r1
   13424:	str	r0, [sp, #16]
   13428:	mov	r0, r5
   1342c:	bl	13468 <__assert_fail@plt+0x1cc0>
   13430:	add	r4, r4, #1
   13434:	ldr	r0, [sp, #28]
   13438:	ldrb	r1, [sp, #24]
   1343c:	cmp	r1, #0
   13440:	beq	13414 <__assert_fail@plt+0x1c6c>
   13444:	cmp	r0, #0
   13448:	bne	13414 <__assert_fail@plt+0x1c6c>
   1344c:	mov	r0, r4
   13450:	sub	sp, fp, #16
   13454:	pop	{r4, r5, r6, sl, fp, pc}
   13458:	mov	r0, r5
   1345c:	sub	sp, fp, #16
   13460:	pop	{r4, r5, r6, sl, fp, lr}
   13464:	b	11658 <strlen@plt>
   13468:	push	{r4, r5, r6, r7, fp, lr}
   1346c:	add	fp, sp, #16
   13470:	mov	r4, r0
   13474:	ldrb	r0, [r0, #12]
   13478:	cmp	r0, #0
   1347c:	popne	{r4, r5, r6, r7, fp, pc}
   13480:	ldrb	r0, [r4]
   13484:	cmp	r0, #0
   13488:	bne	134d4 <__assert_fail@plt+0x1d2c>
   1348c:	ldr	r0, [r4, #16]
   13490:	ldrb	r0, [r0]
   13494:	bl	2325c <__assert_fail@plt+0x11ab4>
   13498:	cmp	r0, #0
   1349c:	beq	134bc <__assert_fail@plt+0x1d14>
   134a0:	mov	r0, #1
   134a4:	str	r0, [r4, #20]
   134a8:	ldr	r1, [r4, #16]
   134ac:	ldrb	r1, [r1]
   134b0:	strb	r0, [r4, #24]
   134b4:	str	r1, [r4, #28]
   134b8:	b	13588 <__assert_fail@plt+0x1de0>
   134bc:	add	r0, r4, #4
   134c0:	bl	11508 <mbsinit@plt>
   134c4:	cmp	r0, #0
   134c8:	beq	13594 <__assert_fail@plt+0x1dec>
   134cc:	mov	r0, #1
   134d0:	strb	r0, [r4]
   134d4:	ldr	r7, [r4, #16]
   134d8:	bl	1158c <__ctype_get_mb_cur_max@plt>
   134dc:	mov	r1, r0
   134e0:	mov	r0, r7
   134e4:	bl	21f40 <__assert_fail@plt+0x10798>
   134e8:	mov	r2, r0
   134ec:	add	r6, r4, #28
   134f0:	add	r5, r4, #4
   134f4:	mov	r0, r6
   134f8:	mov	r1, r7
   134fc:	mov	r3, r5
   13500:	bl	23284 <__assert_fail@plt+0x11adc>
   13504:	str	r0, [r4, #20]
   13508:	cmn	r0, #2
   1350c:	beq	13574 <__assert_fail@plt+0x1dcc>
   13510:	cmp	r0, #0
   13514:	beq	13530 <__assert_fail@plt+0x1d88>
   13518:	cmn	r0, #1
   1351c:	bne	13554 <__assert_fail@plt+0x1dac>
   13520:	mov	r0, #0
   13524:	strb	r0, [r4, #24]
   13528:	mov	r0, #1
   1352c:	b	13584 <__assert_fail@plt+0x1ddc>
   13530:	mov	r0, #1
   13534:	str	r0, [r4, #20]
   13538:	ldr	r0, [r4, #16]
   1353c:	ldrb	r0, [r0]
   13540:	cmp	r0, #0
   13544:	bne	135b4 <__assert_fail@plt+0x1e0c>
   13548:	ldr	r0, [r6]
   1354c:	cmp	r0, #0
   13550:	bne	135d4 <__assert_fail@plt+0x1e2c>
   13554:	mov	r0, #1
   13558:	strb	r0, [r4, #24]
   1355c:	mov	r0, r5
   13560:	bl	11508 <mbsinit@plt>
   13564:	cmp	r0, #0
   13568:	movne	r0, #0
   1356c:	strbne	r0, [r4]
   13570:	b	13588 <__assert_fail@plt+0x1de0>
   13574:	ldr	r0, [r4, #16]
   13578:	bl	11658 <strlen@plt>
   1357c:	mov	r1, #0
   13580:	strb	r1, [r4, #24]
   13584:	str	r0, [r4, #20]
   13588:	mov	r0, #1
   1358c:	strb	r0, [r4, #12]
   13590:	pop	{r4, r5, r6, r7, fp, pc}
   13594:	movw	r0, #16096	; 0x3ee0
   13598:	movt	r0, #2
   1359c:	movw	r1, #16119	; 0x3ef7
   135a0:	movt	r1, #2
   135a4:	movw	r3, #16135	; 0x3f07
   135a8:	movt	r3, #2
   135ac:	mov	r2, #143	; 0x8f
   135b0:	bl	117a8 <__assert_fail@plt>
   135b4:	movw	r0, #16183	; 0x3f37
   135b8:	movt	r0, #2
   135bc:	movw	r1, #16119	; 0x3ef7
   135c0:	movt	r1, #2
   135c4:	movw	r3, #16135	; 0x3f07
   135c8:	movt	r3, #2
   135cc:	mov	r2, #171	; 0xab
   135d0:	bl	117a8 <__assert_fail@plt>
   135d4:	movw	r0, #16206	; 0x3f4e
   135d8:	movt	r0, #2
   135dc:	movw	r1, #16119	; 0x3ef7
   135e0:	movt	r1, #2
   135e4:	movw	r3, #16135	; 0x3f07
   135e8:	movt	r3, #2
   135ec:	mov	r2, #172	; 0xac
   135f0:	bl	117a8 <__assert_fail@plt>
   135f4:	ldr	r2, [r0, #16]
   135f8:	add	r1, r2, r1
   135fc:	str	r1, [r0, #16]
   13600:	bx	lr
   13604:	ldrb	r3, [r1]
   13608:	mov	r2, r0
   1360c:	strb	r3, [r2], #4
   13610:	cmp	r3, #0
   13614:	beq	13624 <__assert_fail@plt+0x1e7c>
   13618:	ldmib	r1, {r3, ip}
   1361c:	stm	r2, {r3, ip}
   13620:	b	13630 <__assert_fail@plt+0x1e88>
   13624:	mov	r3, #0
   13628:	str	r3, [r2]
   1362c:	str	r3, [r2, #4]
   13630:	ldrb	r2, [r1, #12]
   13634:	strb	r2, [r0, #12]
   13638:	add	r0, r0, #16
   1363c:	add	r1, r1, #16
   13640:	b	2320c <__assert_fail@plt+0x11a64>
   13644:	push	{r4, r5, fp, lr}
   13648:	add	fp, sp, #8
   1364c:	cmp	r0, #0
   13650:	beq	136e4 <__assert_fail@plt+0x1f3c>
   13654:	mov	r4, r0
   13658:	mov	r1, #47	; 0x2f
   1365c:	bl	11730 <strrchr@plt>
   13660:	cmp	r0, #0
   13664:	mov	r5, r4
   13668:	addne	r5, r0, #1
   1366c:	sub	r0, r5, r4
   13670:	cmp	r0, #7
   13674:	blt	136c8 <__assert_fail@plt+0x1f20>
   13678:	sub	r0, r5, #7
   1367c:	movw	r1, #16568	; 0x40b8
   13680:	movt	r1, #2
   13684:	mov	r2, #7
   13688:	bl	11778 <strncmp@plt>
   1368c:	cmp	r0, #0
   13690:	bne	136c8 <__assert_fail@plt+0x1f20>
   13694:	movw	r1, #16576	; 0x40c0
   13698:	movt	r1, #2
   1369c:	mov	r0, r5
   136a0:	mov	r2, #3
   136a4:	bl	11778 <strncmp@plt>
   136a8:	cmp	r0, #0
   136ac:	beq	136b8 <__assert_fail@plt+0x1f10>
   136b0:	mov	r4, r5
   136b4:	b	136c8 <__assert_fail@plt+0x1f20>
   136b8:	add	r4, r5, #3
   136bc:	movw	r0, #20888	; 0x5198
   136c0:	movt	r0, #3
   136c4:	str	r4, [r0]
   136c8:	movw	r0, #20892	; 0x519c
   136cc:	movt	r0, #3
   136d0:	str	r4, [r0]
   136d4:	movw	r0, #20932	; 0x51c4
   136d8:	movt	r0, #3
   136dc:	str	r4, [r0]
   136e0:	pop	{r4, r5, fp, pc}
   136e4:	movw	r0, #20904	; 0x51a8
   136e8:	movt	r0, #3
   136ec:	ldr	r3, [r0]
   136f0:	movw	r0, #16512	; 0x4080
   136f4:	movt	r0, #2
   136f8:	mov	r1, #55	; 0x37
   136fc:	mov	r2, #1
   13700:	bl	11574 <fwrite@plt>
   13704:	bl	11784 <abort@plt>
   13708:	push	{r4, r5, r6, sl, fp, lr}
   1370c:	add	fp, sp, #16
   13710:	mov	r4, r0
   13714:	movw	r0, #20936	; 0x51c8
   13718:	movt	r0, #3
   1371c:	cmp	r4, #0
   13720:	moveq	r4, r0
   13724:	bl	11688 <__errno_location@plt>
   13728:	mov	r5, r0
   1372c:	ldr	r6, [r0]
   13730:	mov	r0, r4
   13734:	mov	r1, #48	; 0x30
   13738:	bl	22980 <__assert_fail@plt+0x111d8>
   1373c:	str	r6, [r5]
   13740:	pop	{r4, r5, r6, sl, fp, pc}
   13744:	movw	r1, #20936	; 0x51c8
   13748:	movt	r1, #3
   1374c:	cmp	r0, #0
   13750:	movne	r1, r0
   13754:	ldr	r0, [r1]
   13758:	bx	lr
   1375c:	movw	r2, #20936	; 0x51c8
   13760:	movt	r2, #3
   13764:	cmp	r0, #0
   13768:	movne	r2, r0
   1376c:	str	r1, [r2]
   13770:	bx	lr
   13774:	movw	r3, #20936	; 0x51c8
   13778:	movt	r3, #3
   1377c:	cmp	r0, #0
   13780:	movne	r3, r0
   13784:	ubfx	r0, r1, #5, #3
   13788:	add	ip, r3, r0, lsl #2
   1378c:	ldr	r3, [ip, #8]
   13790:	and	r1, r1, #31
   13794:	mov	r0, #1
   13798:	and	r0, r0, r3, lsr r1
   1379c:	and	r2, r2, #1
   137a0:	eor	r2, r0, r2
   137a4:	eor	r1, r3, r2, lsl r1
   137a8:	str	r1, [ip, #8]
   137ac:	bx	lr
   137b0:	movw	r2, #20936	; 0x51c8
   137b4:	movt	r2, #3
   137b8:	cmp	r0, #0
   137bc:	movne	r2, r0
   137c0:	ldr	r0, [r2, #4]
   137c4:	str	r1, [r2, #4]
   137c8:	bx	lr
   137cc:	push	{fp, lr}
   137d0:	mov	fp, sp
   137d4:	movw	r3, #20936	; 0x51c8
   137d8:	movt	r3, #3
   137dc:	cmp	r0, #0
   137e0:	movne	r3, r0
   137e4:	mov	r0, #10
   137e8:	str	r0, [r3]
   137ec:	cmp	r1, #0
   137f0:	cmpne	r2, #0
   137f4:	bne	137fc <__assert_fail@plt+0x2054>
   137f8:	bl	11784 <abort@plt>
   137fc:	str	r1, [r3, #40]	; 0x28
   13800:	str	r2, [r3, #44]	; 0x2c
   13804:	pop	{fp, pc}
   13808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1380c:	add	fp, sp, #28
   13810:	sub	sp, sp, #20
   13814:	mov	r8, r3
   13818:	mov	r9, r2
   1381c:	mov	sl, r1
   13820:	mov	r7, r0
   13824:	ldr	r0, [fp, #8]
   13828:	movw	r5, #20936	; 0x51c8
   1382c:	movt	r5, #3
   13830:	cmp	r0, #0
   13834:	movne	r5, r0
   13838:	bl	11688 <__errno_location@plt>
   1383c:	mov	r4, r0
   13840:	ldm	r5, {r0, r1}
   13844:	ldr	r2, [r5, #40]	; 0x28
   13848:	ldr	r3, [r5, #44]	; 0x2c
   1384c:	ldr	r6, [r4]
   13850:	add	r5, r5, #8
   13854:	stm	sp, {r0, r1, r5}
   13858:	str	r2, [sp, #12]
   1385c:	str	r3, [sp, #16]
   13860:	mov	r0, r7
   13864:	mov	r1, sl
   13868:	mov	r2, r9
   1386c:	mov	r3, r8
   13870:	bl	13880 <__assert_fail@plt+0x20d8>
   13874:	str	r6, [r4]
   13878:	sub	sp, fp, #28
   1387c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13884:	add	fp, sp, #28
   13888:	sub	sp, sp, #156	; 0x9c
   1388c:	mov	r9, r3
   13890:	mov	r7, r1
   13894:	mov	r6, r0
   13898:	str	r2, [fp, #-80]	; 0xffffffb0
   1389c:	add	r0, r2, #1
   138a0:	str	r0, [sp, #76]	; 0x4c
   138a4:	ldr	r0, [fp, #12]
   138a8:	and	r1, r0, #1
   138ac:	str	r1, [sp, #40]	; 0x28
   138b0:	and	r1, r0, #4
   138b4:	str	r1, [sp, #36]	; 0x24
   138b8:	ubfx	r4, r0, #1, #1
   138bc:	bl	1158c <__ctype_get_mb_cur_max@plt>
   138c0:	str	r0, [sp, #44]	; 0x2c
   138c4:	ldr	r0, [fp, #24]
   138c8:	str	r0, [sp, #88]	; 0x58
   138cc:	ldr	r0, [fp, #20]
   138d0:	str	r0, [sp, #80]	; 0x50
   138d4:	ldr	r1, [fp, #8]
   138d8:	mov	r0, #0
   138dc:	str	r0, [sp, #84]	; 0x54
   138e0:	mov	r0, #0
   138e4:	str	r0, [fp, #-84]	; 0xffffffac
   138e8:	mov	r0, #0
   138ec:	str	r0, [fp, #-72]	; 0xffffffb8
   138f0:	mov	r0, #0
   138f4:	mov	r2, #0
   138f8:	str	r2, [fp, #-56]	; 0xffffffc8
   138fc:	mov	r2, #0
   13900:	str	r2, [sp, #64]	; 0x40
   13904:	mov	r2, #1
   13908:	str	r2, [fp, #-48]	; 0xffffffd0
   1390c:	cmp	r1, #10
   13910:	bhi	1483c <__assert_fail@plt+0x3094>
   13914:	mov	sl, r7
   13918:	mov	r7, r1
   1391c:	add	r1, pc, #24
   13920:	mov	r8, #0
   13924:	mov	r2, #1
   13928:	mov	r3, #0
   1392c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13930:	mov	lr, r9
   13934:	mov	r5, r6
   13938:	ldr	pc, [r1, r7, lsl #2]
   1393c:	andeq	r3, r1, r0, lsl sl
   13940:	andeq	r3, r1, r0, asr sl
   13944:	andeq	r3, r1, r0, lsr #20
   13948:	andeq	r3, r1, r8, lsl #20
   1394c:	andeq	r3, r1, r4, asr #20
   13950:	andeq	r3, r1, r4, lsr #21
   13954:	andeq	r3, r1, r0, lsr sl
   13958:	andeq	r3, r1, r0, lsl #22
   1395c:	andeq	r3, r1, r8, ror #18
   13960:	andeq	r3, r1, r8, ror #18
   13964:	muleq	r1, r4, r9
   13968:	movw	r0, #16660	; 0x4114
   1396c:	movt	r0, #2
   13970:	mov	r1, r7
   13974:	bl	14e44 <__assert_fail@plt+0x369c>
   13978:	str	r0, [sp, #80]	; 0x50
   1397c:	movw	r0, #16332	; 0x3fcc
   13980:	movt	r0, #2
   13984:	mov	r1, r7
   13988:	bl	14e44 <__assert_fail@plt+0x369c>
   1398c:	mov	r5, r6
   13990:	str	r0, [sp, #88]	; 0x58
   13994:	mov	r8, #0
   13998:	tst	r4, #1
   1399c:	str	r7, [fp, #-64]	; 0xffffffc0
   139a0:	bne	139d8 <__assert_fail@plt+0x2230>
   139a4:	ldr	r0, [sp, #80]	; 0x50
   139a8:	ldrb	r0, [r0]
   139ac:	cmp	r0, #0
   139b0:	beq	139d8 <__assert_fail@plt+0x2230>
   139b4:	ldr	r1, [sp, #80]	; 0x50
   139b8:	add	r1, r1, #1
   139bc:	mov	r8, #0
   139c0:	cmp	r8, sl
   139c4:	strbcc	r0, [r5, r8]
   139c8:	ldrb	r0, [r1, r8]
   139cc:	add	r8, r8, #1
   139d0:	cmp	r0, #0
   139d4:	bne	139c0 <__assert_fail@plt+0x2218>
   139d8:	ldr	r7, [sp, #88]	; 0x58
   139dc:	mov	r0, r7
   139e0:	bl	11658 <strlen@plt>
   139e4:	mov	r5, r6
   139e8:	str	r0, [fp, #-72]	; 0xffffffb8
   139ec:	str	r7, [fp, #-84]	; 0xffffffac
   139f0:	mov	r2, #1
   139f4:	mov	r3, r4
   139f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   139fc:	mov	lr, r9
   13a00:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a04:	b	13b00 <__assert_fail@plt+0x2358>
   13a08:	mov	r0, #1
   13a0c:	b	13a50 <__assert_fail@plt+0x22a8>
   13a10:	mov	r7, #0
   13a14:	mov	r8, #0
   13a18:	mov	r2, r0
   13a1c:	b	13afc <__assert_fail@plt+0x2354>
   13a20:	tst	r4, #1
   13a24:	bne	13a50 <__assert_fail@plt+0x22a8>
   13a28:	mov	r2, r0
   13a2c:	b	13a78 <__assert_fail@plt+0x22d0>
   13a30:	mov	r0, #1
   13a34:	str	r0, [fp, #-72]	; 0xffffffb8
   13a38:	mov	r8, #0
   13a3c:	mov	r7, #5
   13a40:	b	13abc <__assert_fail@plt+0x2314>
   13a44:	mov	r2, #1
   13a48:	tst	r4, #1
   13a4c:	beq	13a78 <__assert_fail@plt+0x22d0>
   13a50:	mov	r1, #1
   13a54:	str	r1, [fp, #-72]	; 0xffffffb8
   13a58:	mov	r8, #0
   13a5c:	mov	r7, #2
   13a60:	movw	r1, #16332	; 0x3fcc
   13a64:	movt	r1, #2
   13a68:	str	r1, [fp, #-84]	; 0xffffffac
   13a6c:	mov	r2, r0
   13a70:	mov	r3, #1
   13a74:	b	13b00 <__assert_fail@plt+0x2358>
   13a78:	mov	r8, #1
   13a7c:	mov	r7, #2
   13a80:	cmp	sl, #0
   13a84:	movne	r0, #39	; 0x27
   13a88:	strbne	r0, [r5]
   13a8c:	movw	r0, #16332	; 0x3fcc
   13a90:	movt	r0, #2
   13a94:	str	r0, [fp, #-84]	; 0xffffffac
   13a98:	mov	r0, #1
   13a9c:	str	r0, [fp, #-72]	; 0xffffffb8
   13aa0:	b	13afc <__assert_fail@plt+0x2354>
   13aa4:	mov	r7, #5
   13aa8:	tst	r4, #1
   13aac:	beq	13ad4 <__assert_fail@plt+0x232c>
   13ab0:	mov	r0, #1
   13ab4:	str	r0, [fp, #-72]	; 0xffffffb8
   13ab8:	mov	r8, #0
   13abc:	movw	r0, #16658	; 0x4112
   13ac0:	movt	r0, #2
   13ac4:	str	r0, [fp, #-84]	; 0xffffffac
   13ac8:	mov	r2, #1
   13acc:	mov	r3, #1
   13ad0:	b	13b00 <__assert_fail@plt+0x2358>
   13ad4:	cmp	sl, #0
   13ad8:	movne	r0, #34	; 0x22
   13adc:	strbne	r0, [r5]
   13ae0:	mov	r8, #1
   13ae4:	movw	r0, #16658	; 0x4112
   13ae8:	movt	r0, #2
   13aec:	str	r0, [fp, #-84]	; 0xffffffac
   13af0:	mov	r0, #1
   13af4:	str	r0, [fp, #-72]	; 0xffffffb8
   13af8:	mov	r2, #1
   13afc:	mov	r3, #0
   13b00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b04:	cmp	r0, #0
   13b08:	movwne	r0, #1
   13b0c:	and	r1, r0, r3
   13b10:	and	r1, r2, r1
   13b14:	str	r1, [sp, #56]	; 0x38
   13b18:	sub	r1, r7, #2
   13b1c:	clz	r1, r1
   13b20:	lsr	r1, r1, #5
   13b24:	and	r1, r1, r3
   13b28:	str	r1, [sp, #68]	; 0x44
   13b2c:	str	r7, [fp, #-64]	; 0xffffffc0
   13b30:	subs	r1, r7, #2
   13b34:	movwne	r1, #1
   13b38:	eor	r4, r3, #1
   13b3c:	str	r4, [fp, #-88]	; 0xffffffa8
   13b40:	orr	r4, r1, r4
   13b44:	str	r4, [sp, #72]	; 0x48
   13b48:	and	r1, r1, r2
   13b4c:	and	r0, r0, r1
   13b50:	str	r0, [fp, #-60]	; 0xffffffc4
   13b54:	str	r3, [fp, #-76]	; 0xffffffb4
   13b58:	orr	r0, r1, r3
   13b5c:	eor	r0, r0, #1
   13b60:	ldr	r1, [fp, #16]
   13b64:	clz	r1, r1
   13b68:	lsr	r1, r1, #5
   13b6c:	orr	r0, r1, r0
   13b70:	str	r0, [fp, #-68]	; 0xffffffbc
   13b74:	str	r2, [sp, #92]	; 0x5c
   13b78:	eor	r0, r2, #1
   13b7c:	str	r0, [sp, #60]	; 0x3c
   13b80:	mov	r7, #0
   13b84:	cmn	lr, #1
   13b88:	beq	13b98 <__assert_fail@plt+0x23f0>
   13b8c:	cmp	r7, lr
   13b90:	bne	13ba4 <__assert_fail@plt+0x23fc>
   13b94:	b	146b0 <__assert_fail@plt+0x2f08>
   13b98:	ldrb	r0, [ip, r7]
   13b9c:	cmp	r0, #0
   13ba0:	beq	146b0 <__assert_fail@plt+0x2f08>
   13ba4:	mov	r9, #0
   13ba8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13bac:	cmp	r0, #0
   13bb0:	beq	13be4 <__assert_fail@plt+0x243c>
   13bb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13bb8:	add	r4, r7, r0
   13bbc:	cmp	r0, #2
   13bc0:	bcc	13bdc <__assert_fail@plt+0x2434>
   13bc4:	cmn	lr, #1
   13bc8:	bne	13bdc <__assert_fail@plt+0x2434>
   13bcc:	mov	r0, ip
   13bd0:	bl	11658 <strlen@plt>
   13bd4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13bd8:	mov	lr, r0
   13bdc:	cmp	r4, lr
   13be0:	bls	13bf0 <__assert_fail@plt+0x2448>
   13be4:	mov	r0, #0
   13be8:	str	r0, [fp, #-52]	; 0xffffffcc
   13bec:	b	13c34 <__assert_fail@plt+0x248c>
   13bf0:	mov	r4, lr
   13bf4:	add	r0, ip, r7
   13bf8:	ldr	r1, [fp, #-84]	; 0xffffffac
   13bfc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13c00:	bl	1164c <bcmp@plt>
   13c04:	cmp	r0, #0
   13c08:	mov	r1, r0
   13c0c:	movwne	r1, #1
   13c10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c14:	orr	r1, r1, r2
   13c18:	tst	r1, #1
   13c1c:	beq	14784 <__assert_fail@plt+0x2fdc>
   13c20:	clz	r0, r0
   13c24:	lsr	r0, r0, #5
   13c28:	str	r0, [fp, #-52]	; 0xffffffcc
   13c2c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13c30:	mov	lr, r4
   13c34:	ldrb	r4, [ip, r7]
   13c38:	cmp	r4, #126	; 0x7e
   13c3c:	bhi	1416c <__assert_fail@plt+0x29c4>
   13c40:	mov	r6, #1
   13c44:	mov	r2, #110	; 0x6e
   13c48:	mov	r0, #97	; 0x61
   13c4c:	add	r3, pc, #4
   13c50:	mov	r1, #0
   13c54:	ldr	pc, [r3, r4, lsl #2]
   13c58:	andeq	r3, r1, ip, asr #31
   13c5c:	andeq	r4, r1, ip, ror #2
   13c60:	andeq	r4, r1, ip, ror #2
   13c64:	andeq	r4, r1, ip, ror #2
   13c68:	andeq	r4, r1, ip, ror #2
   13c6c:	andeq	r4, r1, ip, ror #2
   13c70:	andeq	r4, r1, ip, ror #2
   13c74:	andeq	r4, r1, r0, asr #4
   13c78:	andeq	r3, r1, ip, lsr #31
   13c7c:	andeq	r3, r1, r4, lsr #31
   13c80:			; <UNDEFINED> instruction: 0x00013fb8
   13c84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c88:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13c8c:			; <UNDEFINED> instruction: 0x00013fb4
   13c90:	andeq	r4, r1, ip, ror #2
   13c94:	andeq	r4, r1, ip, ror #2
   13c98:	andeq	r4, r1, ip, ror #2
   13c9c:	andeq	r4, r1, ip, ror #2
   13ca0:	andeq	r4, r1, ip, ror #2
   13ca4:	andeq	r4, r1, ip, ror #2
   13ca8:	andeq	r4, r1, ip, ror #2
   13cac:	andeq	r4, r1, ip, ror #2
   13cb0:	andeq	r4, r1, ip, ror #2
   13cb4:	andeq	r4, r1, ip, ror #2
   13cb8:	andeq	r4, r1, ip, ror #2
   13cbc:	andeq	r4, r1, ip, ror #2
   13cc0:	andeq	r4, r1, ip, ror #2
   13cc4:	andeq	r4, r1, ip, ror #2
   13cc8:	andeq	r4, r1, ip, ror #2
   13ccc:	andeq	r4, r1, ip, ror #2
   13cd0:	andeq	r4, r1, ip, ror #2
   13cd4:	andeq	r4, r1, ip, ror #2
   13cd8:	andeq	r3, r1, r0, asr pc
   13cdc:	andeq	r3, r1, r4, asr pc
   13ce0:	andeq	r3, r1, r4, asr pc
   13ce4:	andeq	r3, r1, ip, lsr pc
   13ce8:	andeq	r3, r1, r4, asr pc
   13cec:	andeq	r3, r1, r4, asr lr
   13cf0:	andeq	r3, r1, r4, asr pc
   13cf4:	ldrdeq	r4, [r1], -ip
   13cf8:	andeq	r3, r1, r4, asr pc
   13cfc:	andeq	r3, r1, r4, asr pc
   13d00:	andeq	r3, r1, r4, asr pc
   13d04:	andeq	r3, r1, r4, asr lr
   13d08:	andeq	r3, r1, r4, asr lr
   13d0c:	andeq	r3, r1, r4, asr lr
   13d10:	andeq	r3, r1, r4, asr lr
   13d14:	andeq	r3, r1, r4, asr lr
   13d18:	andeq	r3, r1, r4, asr lr
   13d1c:	andeq	r3, r1, r4, asr lr
   13d20:	andeq	r3, r1, r4, asr lr
   13d24:	andeq	r3, r1, r4, asr lr
   13d28:	andeq	r3, r1, r4, asr lr
   13d2c:	andeq	r3, r1, r4, asr lr
   13d30:	andeq	r3, r1, r4, asr lr
   13d34:	andeq	r3, r1, r4, asr lr
   13d38:	andeq	r3, r1, r4, asr lr
   13d3c:	andeq	r3, r1, r4, asr lr
   13d40:	andeq	r3, r1, r4, asr lr
   13d44:	andeq	r3, r1, r4, asr pc
   13d48:	andeq	r3, r1, r4, asr pc
   13d4c:	andeq	r3, r1, r4, asr pc
   13d50:	andeq	r3, r1, r4, asr pc
   13d54:	andeq	r4, r1, r4, lsr #1
   13d58:	andeq	r4, r1, ip, ror #2
   13d5c:	andeq	r3, r1, r4, asr lr
   13d60:	andeq	r3, r1, r4, asr lr
   13d64:	andeq	r3, r1, r4, asr lr
   13d68:	andeq	r3, r1, r4, asr lr
   13d6c:	andeq	r3, r1, r4, asr lr
   13d70:	andeq	r3, r1, r4, asr lr
   13d74:	andeq	r3, r1, r4, asr lr
   13d78:	andeq	r3, r1, r4, asr lr
   13d7c:	andeq	r3, r1, r4, asr lr
   13d80:	andeq	r3, r1, r4, asr lr
   13d84:	andeq	r3, r1, r4, asr lr
   13d88:	andeq	r3, r1, r4, asr lr
   13d8c:	andeq	r3, r1, r4, asr lr
   13d90:	andeq	r3, r1, r4, asr lr
   13d94:	andeq	r3, r1, r4, asr lr
   13d98:	andeq	r3, r1, r4, asr lr
   13d9c:	andeq	r3, r1, r4, asr lr
   13da0:	andeq	r3, r1, r4, asr lr
   13da4:	andeq	r3, r1, r4, asr lr
   13da8:	andeq	r3, r1, r4, asr lr
   13dac:	andeq	r3, r1, r4, asr lr
   13db0:	andeq	r3, r1, r4, asr lr
   13db4:	andeq	r3, r1, r4, asr lr
   13db8:	andeq	r3, r1, r4, asr lr
   13dbc:	andeq	r3, r1, r4, asr lr
   13dc0:	andeq	r3, r1, r4, asr lr
   13dc4:	andeq	r3, r1, r4, asr pc
   13dc8:	andeq	r3, r1, ip, ror pc
   13dcc:	andeq	r3, r1, r4, asr lr
   13dd0:	andeq	r3, r1, r4, asr pc
   13dd4:	andeq	r3, r1, r4, asr lr
   13dd8:	andeq	r3, r1, r4, asr pc
   13ddc:	andeq	r3, r1, r4, asr lr
   13de0:	andeq	r3, r1, r4, asr lr
   13de4:	andeq	r3, r1, r4, asr lr
   13de8:	andeq	r3, r1, r4, asr lr
   13dec:	andeq	r3, r1, r4, asr lr
   13df0:	andeq	r3, r1, r4, asr lr
   13df4:	andeq	r3, r1, r4, asr lr
   13df8:	andeq	r3, r1, r4, asr lr
   13dfc:	andeq	r3, r1, r4, asr lr
   13e00:	andeq	r3, r1, r4, asr lr
   13e04:	andeq	r3, r1, r4, asr lr
   13e08:	andeq	r3, r1, r4, asr lr
   13e0c:	andeq	r3, r1, r4, asr lr
   13e10:	andeq	r3, r1, r4, asr lr
   13e14:	andeq	r3, r1, r4, asr lr
   13e18:	andeq	r3, r1, r4, asr lr
   13e1c:	andeq	r3, r1, r4, asr lr
   13e20:	andeq	r3, r1, r4, asr lr
   13e24:	andeq	r3, r1, r4, asr lr
   13e28:	andeq	r3, r1, r4, asr lr
   13e2c:	andeq	r3, r1, r4, asr lr
   13e30:	andeq	r3, r1, r4, asr lr
   13e34:	andeq	r3, r1, r4, asr lr
   13e38:	andeq	r3, r1, r4, asr lr
   13e3c:	andeq	r3, r1, r4, asr lr
   13e40:	andeq	r3, r1, r4, asr lr
   13e44:	andeq	r3, r1, r0, lsl pc
   13e48:	andeq	r3, r1, r4, asr pc
   13e4c:	andeq	r3, r1, r0, lsl pc
   13e50:	andeq	r3, r1, ip, lsr pc
   13e54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e58:	tst	r0, #1
   13e5c:	bne	13e88 <__assert_fail@plt+0x26e0>
   13e60:	ubfx	r0, r4, #5, #3
   13e64:	ldr	r1, [fp, #16]
   13e68:	ldr	r0, [r1, r0, lsl #2]
   13e6c:	and	r1, r4, #31
   13e70:	mov	r2, #1
   13e74:	tst	r0, r2, lsl r1
   13e78:	beq	13e88 <__assert_fail@plt+0x26e0>
   13e7c:	mov	r0, r4
   13e80:	mov	r1, r6
   13e84:	b	13e9c <__assert_fail@plt+0x26f4>
   13e88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13e8c:	cmp	r0, #0
   13e90:	mov	r0, r4
   13e94:	mov	r1, r6
   13e98:	beq	141d4 <__assert_fail@plt+0x2a2c>
   13e9c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ea0:	tst	r2, #1
   13ea4:	bne	14798 <__assert_fail@plt+0x2ff0>
   13ea8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13eac:	subs	r2, r2, #2
   13eb0:	movwne	r2, #1
   13eb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13eb8:	orr	r2, r2, r3
   13ebc:	tst	r2, #1
   13ec0:	bne	13efc <__assert_fail@plt+0x2754>
   13ec4:	cmp	r8, sl
   13ec8:	movcc	r2, #39	; 0x27
   13ecc:	strbcc	r2, [r5, r8]
   13ed0:	add	r2, r8, #1
   13ed4:	cmp	r2, sl
   13ed8:	movcc	r3, #36	; 0x24
   13edc:	strbcc	r3, [r5, r2]
   13ee0:	add	r2, r8, #2
   13ee4:	cmp	r2, sl
   13ee8:	movcc	r3, #39	; 0x27
   13eec:	strbcc	r3, [r5, r2]
   13ef0:	add	r8, r8, #3
   13ef4:	mov	r2, #1
   13ef8:	str	r2, [fp, #-56]	; 0xffffffc8
   13efc:	cmp	r8, sl
   13f00:	movcc	r2, #92	; 0x5c
   13f04:	strbcc	r2, [r5, r8]
   13f08:	add	r8, r8, #1
   13f0c:	b	14218 <__assert_fail@plt+0x2a70>
   13f10:	cmp	lr, #1
   13f14:	beq	13f3c <__assert_fail@plt+0x2794>
   13f18:	mov	r6, #0
   13f1c:	cmn	lr, #1
   13f20:	bne	13f48 <__assert_fail@plt+0x27a0>
   13f24:	ldrb	r0, [ip, #1]
   13f28:	cmp	r0, #0
   13f2c:	beq	13f3c <__assert_fail@plt+0x2794>
   13f30:	mvn	lr, #0
   13f34:	mov	r9, #0
   13f38:	b	13e54 <__assert_fail@plt+0x26ac>
   13f3c:	mov	r6, #0
   13f40:	cmp	r7, #0
   13f44:	beq	13f50 <__assert_fail@plt+0x27a8>
   13f48:	mov	r9, #0
   13f4c:	b	13e54 <__assert_fail@plt+0x26ac>
   13f50:	mov	r1, #1
   13f54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f58:	cmp	r0, #2
   13f5c:	bne	13f74 <__assert_fail@plt+0x27cc>
   13f60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f64:	tst	r0, #1
   13f68:	mov	r6, r1
   13f6c:	beq	13e54 <__assert_fail@plt+0x26ac>
   13f70:	b	14798 <__assert_fail@plt+0x2ff0>
   13f74:	mov	r6, r1
   13f78:	b	13e54 <__assert_fail@plt+0x26ac>
   13f7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f80:	cmp	r0, #2
   13f84:	bne	141b8 <__assert_fail@plt+0x2a10>
   13f88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f8c:	tst	r0, #1
   13f90:	bne	14798 <__assert_fail@plt+0x2ff0>
   13f94:	mov	r9, #0
   13f98:	b	141cc <__assert_fail@plt+0x2a24>
   13f9c:	mov	r0, #102	; 0x66
   13fa0:	b	14240 <__assert_fail@plt+0x2a98>
   13fa4:	mov	r2, #116	; 0x74
   13fa8:	b	13fb8 <__assert_fail@plt+0x2810>
   13fac:	mov	r0, #98	; 0x62
   13fb0:	b	14240 <__assert_fail@plt+0x2a98>
   13fb4:	mov	r2, #114	; 0x72
   13fb8:	ldr	r0, [sp, #72]	; 0x48
   13fbc:	tst	r0, #1
   13fc0:	mov	r0, r2
   13fc4:	bne	14240 <__assert_fail@plt+0x2a98>
   13fc8:	b	14798 <__assert_fail@plt+0x2ff0>
   13fcc:	ldr	r0, [sp, #92]	; 0x5c
   13fd0:	tst	r0, #1
   13fd4:	beq	1425c <__assert_fail@plt+0x2ab4>
   13fd8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13fdc:	tst	r0, #1
   13fe0:	bne	14798 <__assert_fail@plt+0x2ff0>
   13fe4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fe8:	subs	r0, r0, #2
   13fec:	movwne	r0, #1
   13ff0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13ff4:	orr	r0, r0, r1
   13ff8:	tst	r0, #1
   13ffc:	bne	14038 <__assert_fail@plt+0x2890>
   14000:	cmp	r8, sl
   14004:	movcc	r0, #39	; 0x27
   14008:	strbcc	r0, [r5, r8]
   1400c:	add	r0, r8, #1
   14010:	cmp	r0, sl
   14014:	movcc	r1, #36	; 0x24
   14018:	strbcc	r1, [r5, r0]
   1401c:	add	r0, r8, #2
   14020:	cmp	r0, sl
   14024:	movcc	r1, #39	; 0x27
   14028:	strbcc	r1, [r5, r0]
   1402c:	add	r8, r8, #3
   14030:	mov	r0, #1
   14034:	str	r0, [fp, #-56]	; 0xffffffc8
   14038:	cmp	r8, sl
   1403c:	movcc	r0, #92	; 0x5c
   14040:	strbcc	r0, [r5, r8]
   14044:	add	r0, r8, #1
   14048:	mov	r6, #0
   1404c:	mov	r9, #1
   14050:	mov	r4, #48	; 0x30
   14054:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14058:	cmp	r1, #2
   1405c:	beq	14420 <__assert_fail@plt+0x2c78>
   14060:	add	r1, r7, #1
   14064:	cmp	r1, lr
   14068:	bcs	14420 <__assert_fail@plt+0x2c78>
   1406c:	ldrb	r1, [ip, r1]
   14070:	sub	r1, r1, #48	; 0x30
   14074:	uxtb	r1, r1
   14078:	cmp	r1, #9
   1407c:	bhi	14420 <__assert_fail@plt+0x2c78>
   14080:	cmp	r0, sl
   14084:	movcc	r1, #48	; 0x30
   14088:	strbcc	r1, [r5, r0]
   1408c:	add	r0, r8, #2
   14090:	cmp	r0, sl
   14094:	movcc	r1, #48	; 0x30
   14098:	strbcc	r1, [r5, r0]
   1409c:	add	r8, r8, #3
   140a0:	b	13e54 <__assert_fail@plt+0x26ac>
   140a4:	mov	r9, #0
   140a8:	mov	r4, #63	; 0x3f
   140ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140b0:	cmp	r0, #5
   140b4:	beq	14428 <__assert_fail@plt+0x2c80>
   140b8:	cmp	r0, #2
   140bc:	bne	144d0 <__assert_fail@plt+0x2d28>
   140c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   140c4:	tst	r0, #1
   140c8:	mov	r6, #0
   140cc:	beq	13e54 <__assert_fail@plt+0x26ac>
   140d0:	b	14798 <__assert_fail@plt+0x2ff0>
   140d4:	mov	r0, #118	; 0x76
   140d8:	b	14240 <__assert_fail@plt+0x2a98>
   140dc:	mov	r4, #39	; 0x27
   140e0:	mov	r0, #1
   140e4:	str	r0, [sp, #64]	; 0x40
   140e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140ec:	cmp	r0, #2
   140f0:	bne	14278 <__assert_fail@plt+0x2ad0>
   140f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   140f8:	tst	r0, #1
   140fc:	bne	14798 <__assert_fail@plt+0x2ff0>
   14100:	ldr	r2, [sp, #84]	; 0x54
   14104:	cmp	r2, #0
   14108:	mov	r0, r2
   1410c:	movwne	r0, #1
   14110:	clz	r1, sl
   14114:	lsr	r1, r1, #5
   14118:	orrs	r0, r0, r1
   1411c:	moveq	r2, sl
   14120:	str	r2, [sp, #84]	; 0x54
   14124:	moveq	sl, r0
   14128:	cmp	r8, sl
   1412c:	movcc	r0, #39	; 0x27
   14130:	strbcc	r0, [r5, r8]
   14134:	add	r0, r8, #1
   14138:	cmp	r0, sl
   1413c:	movcc	r1, #92	; 0x5c
   14140:	strbcc	r1, [r5, r0]
   14144:	add	r0, r8, #2
   14148:	cmp	r0, sl
   1414c:	movcc	r1, #39	; 0x27
   14150:	strbcc	r1, [r5, r0]
   14154:	add	r8, r8, #3
   14158:	mov	r0, #0
   1415c:	str	r0, [fp, #-56]	; 0xffffffc8
   14160:	mov	r9, #0
   14164:	mov	r6, #1
   14168:	b	13e54 <__assert_fail@plt+0x26ac>
   1416c:	ldr	r0, [sp, #44]	; 0x2c
   14170:	cmp	r0, #1
   14174:	bne	14280 <__assert_fail@plt+0x2ad8>
   14178:	str	lr, [sp, #32]
   1417c:	bl	11634 <__ctype_b_loc@plt>
   14180:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14184:	ldr	r0, [r0]
   14188:	add	r0, r0, r4, lsl #1
   1418c:	ldrb	r0, [r0, #1]
   14190:	ubfx	r6, r0, #6, #1
   14194:	mov	r2, #1
   14198:	ldr	r0, [sp, #60]	; 0x3c
   1419c:	orr	r1, r6, r0
   141a0:	cmp	r2, #1
   141a4:	bhi	144d8 <__assert_fail@plt+0x2d30>
   141a8:	tst	r1, #1
   141ac:	beq	144d8 <__assert_fail@plt+0x2d30>
   141b0:	ldr	lr, [sp, #32]
   141b4:	b	13e54 <__assert_fail@plt+0x26ac>
   141b8:	mov	r9, #0
   141bc:	mov	r0, #92	; 0x5c
   141c0:	ldr	r1, [sp, #56]	; 0x38
   141c4:	cmp	r1, #0
   141c8:	beq	14240 <__assert_fail@plt+0x2a98>
   141cc:	mov	r4, #92	; 0x5c
   141d0:	mov	r6, #0
   141d4:	cmp	r9, #0
   141d8:	bne	14210 <__assert_fail@plt+0x2a68>
   141dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   141e0:	tst	r0, #1
   141e4:	beq	14210 <__assert_fail@plt+0x2a68>
   141e8:	cmp	r8, sl
   141ec:	movcc	r0, #39	; 0x27
   141f0:	strbcc	r0, [r5, r8]
   141f4:	add	r0, r8, #1
   141f8:	cmp	r0, sl
   141fc:	movcc	r1, #39	; 0x27
   14200:	strbcc	r1, [r5, r0]
   14204:	add	r8, r8, #2
   14208:	mov	r0, #0
   1420c:	str	r0, [fp, #-56]	; 0xffffffc8
   14210:	mov	r1, r6
   14214:	mov	r0, r4
   14218:	cmp	r8, sl
   1421c:	strbcc	r0, [r5, r8]
   14220:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14224:	and	r0, r0, r1
   14228:	str	r0, [fp, #-48]	; 0xffffffd0
   1422c:	add	r8, r8, #1
   14230:	add	r7, r7, #1
   14234:	cmn	lr, #1
   14238:	bne	13b8c <__assert_fail@plt+0x23e4>
   1423c:	b	13b98 <__assert_fail@plt+0x23f0>
   14240:	mov	r9, #0
   14244:	ldr	r1, [sp, #92]	; 0x5c
   14248:	tst	r1, #1
   1424c:	mov	r6, #0
   14250:	mov	r1, #0
   14254:	beq	13e54 <__assert_fail@plt+0x26ac>
   14258:	b	13e9c <__assert_fail@plt+0x26f4>
   1425c:	mov	r4, #0
   14260:	ldr	r0, [sp, #40]	; 0x28
   14264:	cmp	r0, #0
   14268:	mov	r9, #0
   1426c:	mov	r6, #0
   14270:	beq	13e54 <__assert_fail@plt+0x26ac>
   14274:	b	14230 <__assert_fail@plt+0x2a88>
   14278:	mov	r6, #1
   1427c:	b	13e54 <__assert_fail@plt+0x26ac>
   14280:	mov	r0, #0
   14284:	str	r0, [fp, #-36]	; 0xffffffdc
   14288:	str	r0, [fp, #-40]	; 0xffffffd8
   1428c:	cmn	lr, #1
   14290:	bne	142a4 <__assert_fail@plt+0x2afc>
   14294:	mov	r0, ip
   14298:	bl	11658 <strlen@plt>
   1429c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   142a0:	mov	lr, r0
   142a4:	ldr	r0, [sp, #76]	; 0x4c
   142a8:	add	r0, r0, r7
   142ac:	str	r0, [sp, #24]
   142b0:	mov	r6, #1
   142b4:	mov	r2, #0
   142b8:	sub	r0, fp, #40	; 0x28
   142bc:	mov	r3, r0
   142c0:	str	r5, [sp, #28]
   142c4:	str	lr, [sp, #32]
   142c8:	b	1430c <__assert_fail@plt+0x2b64>
   142cc:	ldr	r5, [sp, #52]	; 0x34
   142d0:	add	r5, r0, r5
   142d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   142d8:	bl	11568 <iswprint@plt>
   142dc:	cmp	r0, #0
   142e0:	movwne	r0, #1
   142e4:	and	r6, r6, r0
   142e8:	sub	r0, fp, #40	; 0x28
   142ec:	bl	11508 <mbsinit@plt>
   142f0:	sub	r3, fp, #40	; 0x28
   142f4:	mov	r2, r5
   142f8:	ldr	lr, [sp, #32]
   142fc:	cmp	r0, #0
   14300:	ldr	r5, [sp, #28]
   14304:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14308:	bne	14198 <__assert_fail@plt+0x29f0>
   1430c:	str	r2, [sp, #52]	; 0x34
   14310:	add	r0, r2, r7
   14314:	add	r1, ip, r0
   14318:	str	r0, [sp, #48]	; 0x30
   1431c:	sub	r2, lr, r0
   14320:	sub	r0, fp, #44	; 0x2c
   14324:	bl	23284 <__assert_fail@plt+0x11adc>
   14328:	cmp	r0, #0
   1432c:	beq	146a4 <__assert_fail@plt+0x2efc>
   14330:	cmn	r0, #1
   14334:	beq	14660 <__assert_fail@plt+0x2eb8>
   14338:	cmn	r0, #2
   1433c:	ldr	lr, [sp, #32]
   14340:	beq	14668 <__assert_fail@plt+0x2ec0>
   14344:	cmp	r0, #2
   14348:	mov	r1, #0
   1434c:	movwcc	r1, #1
   14350:	ldr	r2, [sp, #68]	; 0x44
   14354:	eor	r2, r2, #1
   14358:	orrs	r1, r2, r1
   1435c:	bne	142cc <__assert_fail@plt+0x2b24>
   14360:	ldr	r1, [sp, #52]	; 0x34
   14364:	ldr	r2, [sp, #24]
   14368:	add	r1, r2, r1
   1436c:	sub	r2, r0, #1
   14370:	b	14380 <__assert_fail@plt+0x2bd8>
   14374:	add	r1, r1, #1
   14378:	subs	r2, r2, #1
   1437c:	beq	142cc <__assert_fail@plt+0x2b24>
   14380:	ldrb	r3, [r1]
   14384:	sub	r3, r3, #91	; 0x5b
   14388:	cmp	r3, #33	; 0x21
   1438c:	bhi	14374 <__assert_fail@plt+0x2bcc>
   14390:	add	r5, pc, #0
   14394:	ldr	pc, [r5, r3, lsl #2]
   14398:	muleq	r1, r0, r7
   1439c:	muleq	r1, r0, r7
   143a0:	andeq	r4, r1, r4, ror r3
   143a4:	muleq	r1, r0, r7
   143a8:	andeq	r4, r1, r4, ror r3
   143ac:	muleq	r1, r0, r7
   143b0:	andeq	r4, r1, r4, ror r3
   143b4:	andeq	r4, r1, r4, ror r3
   143b8:	andeq	r4, r1, r4, ror r3
   143bc:	andeq	r4, r1, r4, ror r3
   143c0:	andeq	r4, r1, r4, ror r3
   143c4:	andeq	r4, r1, r4, ror r3
   143c8:	andeq	r4, r1, r4, ror r3
   143cc:	andeq	r4, r1, r4, ror r3
   143d0:	andeq	r4, r1, r4, ror r3
   143d4:	andeq	r4, r1, r4, ror r3
   143d8:	andeq	r4, r1, r4, ror r3
   143dc:	andeq	r4, r1, r4, ror r3
   143e0:	andeq	r4, r1, r4, ror r3
   143e4:	andeq	r4, r1, r4, ror r3
   143e8:	andeq	r4, r1, r4, ror r3
   143ec:	andeq	r4, r1, r4, ror r3
   143f0:	andeq	r4, r1, r4, ror r3
   143f4:	andeq	r4, r1, r4, ror r3
   143f8:	andeq	r4, r1, r4, ror r3
   143fc:	andeq	r4, r1, r4, ror r3
   14400:	andeq	r4, r1, r4, ror r3
   14404:	andeq	r4, r1, r4, ror r3
   14408:	andeq	r4, r1, r4, ror r3
   1440c:	andeq	r4, r1, r4, ror r3
   14410:	andeq	r4, r1, r4, ror r3
   14414:	andeq	r4, r1, r4, ror r3
   14418:	andeq	r4, r1, r4, ror r3
   1441c:	muleq	r1, r0, r7
   14420:	mov	r8, r0
   14424:	b	13e54 <__assert_fail@plt+0x26ac>
   14428:	ldr	r0, [sp, #36]	; 0x24
   1442c:	cmp	r0, #0
   14430:	beq	144d0 <__assert_fail@plt+0x2d28>
   14434:	add	r0, r7, #2
   14438:	cmp	r0, lr
   1443c:	bcs	144d0 <__assert_fail@plt+0x2d28>
   14440:	add	r1, r7, ip
   14444:	ldrb	r1, [r1, #1]
   14448:	cmp	r1, #63	; 0x3f
   1444c:	bne	144d0 <__assert_fail@plt+0x2d28>
   14450:	ldrb	r1, [ip, r0]
   14454:	sub	r2, r1, #33	; 0x21
   14458:	cmp	r2, #29
   1445c:	bhi	144d0 <__assert_fail@plt+0x2d28>
   14460:	mov	r3, #1
   14464:	movw	r6, #20929	; 0x51c1
   14468:	movt	r6, #14336	; 0x3800
   1446c:	tst	r6, r3, lsl r2
   14470:	beq	144d0 <__assert_fail@plt+0x2d28>
   14474:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14478:	tst	r2, #1
   1447c:	bne	14798 <__assert_fail@plt+0x2ff0>
   14480:	cmp	r8, sl
   14484:	movcc	r2, #63	; 0x3f
   14488:	strbcc	r2, [r5, r8]
   1448c:	add	r2, r8, #1
   14490:	cmp	r2, sl
   14494:	movcc	r3, #34	; 0x22
   14498:	strbcc	r3, [r5, r2]
   1449c:	add	r2, r8, #2
   144a0:	cmp	r2, sl
   144a4:	movcc	r3, #34	; 0x22
   144a8:	strbcc	r3, [r5, r2]
   144ac:	add	r2, r8, #3
   144b0:	cmp	r2, sl
   144b4:	movcc	r3, #63	; 0x3f
   144b8:	strbcc	r3, [r5, r2]
   144bc:	add	r8, r8, #4
   144c0:	mov	r7, r0
   144c4:	mov	r4, r1
   144c8:	mov	r6, #0
   144cc:	b	13e54 <__assert_fail@plt+0x26ac>
   144d0:	mov	r6, #0
   144d4:	b	13e54 <__assert_fail@plt+0x26ac>
   144d8:	add	r0, r2, r7
   144dc:	str	r0, [sp, #52]	; 0x34
   144e0:	mov	r2, #0
   144e4:	ldr	lr, [sp, #32]
   144e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   144ec:	str	r1, [sp, #48]	; 0x30
   144f0:	tst	r1, #1
   144f4:	bne	145d0 <__assert_fail@plt+0x2e28>
   144f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   144fc:	tst	r1, #1
   14500:	bne	14798 <__assert_fail@plt+0x2ff0>
   14504:	mov	r3, r0
   14508:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1450c:	subs	r1, r0, #2
   14510:	movwne	r1, #1
   14514:	orr	r1, r1, r3
   14518:	tst	r1, #1
   1451c:	bne	14554 <__assert_fail@plt+0x2dac>
   14520:	cmp	r8, sl
   14524:	movcc	r0, #39	; 0x27
   14528:	strbcc	r0, [r5, r8]
   1452c:	add	r2, r8, #1
   14530:	cmp	r2, sl
   14534:	movcc	r0, #36	; 0x24
   14538:	strbcc	r0, [r5, r2]
   1453c:	add	r2, r8, #2
   14540:	cmp	r2, sl
   14544:	movcc	r0, #39	; 0x27
   14548:	strbcc	r0, [r5, r2]
   1454c:	add	r8, r8, #3
   14550:	mov	r3, #1
   14554:	cmp	r8, sl
   14558:	movcc	r1, #92	; 0x5c
   1455c:	strbcc	r1, [r5, r8]
   14560:	add	r2, r8, #1
   14564:	cmp	r2, sl
   14568:	bcs	1457c <__assert_fail@plt+0x2dd4>
   1456c:	uxtb	r1, r4
   14570:	mov	r0, #48	; 0x30
   14574:	orr	r1, r0, r1, lsr #6
   14578:	strb	r1, [r5, r2]
   1457c:	add	r2, r8, #2
   14580:	cmp	r2, sl
   14584:	lsrcc	r1, r4, #3
   14588:	movcc	r0, #6
   1458c:	bficc	r1, r0, #3, #29
   14590:	strbcc	r1, [r5, r2]
   14594:	mov	r0, #6
   14598:	bfi	r4, r0, #3, #29
   1459c:	add	r8, r8, #3
   145a0:	mov	r2, #1
   145a4:	mov	r0, r3
   145a8:	b	145f4 <__assert_fail@plt+0x2e4c>
   145ac:	cmp	r8, sl
   145b0:	strbcc	r4, [r5, r8]
   145b4:	ldr	r1, [sp, #76]	; 0x4c
   145b8:	ldrb	r4, [r1, r7]
   145bc:	add	r8, r8, #1
   145c0:	mov	r7, r3
   145c4:	ldr	r1, [sp, #48]	; 0x30
   145c8:	tst	r1, #1
   145cc:	beq	144f8 <__assert_fail@plt+0x2d50>
   145d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   145d4:	tst	r1, #1
   145d8:	beq	145ec <__assert_fail@plt+0x2e44>
   145dc:	cmp	r8, sl
   145e0:	movcc	r1, #92	; 0x5c
   145e4:	strbcc	r1, [r5, r8]
   145e8:	add	r8, r8, #1
   145ec:	mov	r1, #0
   145f0:	str	r1, [fp, #-52]	; 0xffffffcc
   145f4:	and	r9, r2, #1
   145f8:	add	r3, r7, #1
   145fc:	ldr	r1, [sp, #52]	; 0x34
   14600:	cmp	r1, r3
   14604:	bls	14648 <__assert_fail@plt+0x2ea0>
   14608:	cmp	r9, #0
   1460c:	movwne	r9, #1
   14610:	mvn	r1, r0
   14614:	orr	r1, r1, r9
   14618:	tst	r1, #1
   1461c:	bne	145ac <__assert_fail@plt+0x2e04>
   14620:	cmp	r8, sl
   14624:	movcc	r1, #39	; 0x27
   14628:	strbcc	r1, [r5, r8]
   1462c:	add	r1, r8, #1
   14630:	cmp	r1, sl
   14634:	movcc	r0, #39	; 0x27
   14638:	strbcc	r0, [r5, r1]
   1463c:	add	r8, r8, #2
   14640:	mov	r0, #0
   14644:	b	145ac <__assert_fail@plt+0x2e04>
   14648:	str	r0, [fp, #-56]	; 0xffffffc8
   1464c:	cmp	r9, #0
   14650:	movwne	r9, #1
   14654:	cmp	r9, #0
   14658:	beq	141dc <__assert_fail@plt+0x2a34>
   1465c:	b	14210 <__assert_fail@plt+0x2a68>
   14660:	mov	r6, #0
   14664:	b	146a4 <__assert_fail@plt+0x2efc>
   14668:	mov	r6, #0
   1466c:	ldr	r0, [sp, #48]	; 0x30
   14670:	cmp	r0, lr
   14674:	bcs	146a4 <__assert_fail@plt+0x2efc>
   14678:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1467c:	add	r0, ip, r7
   14680:	ldr	r2, [sp, #52]	; 0x34
   14684:	ldrb	r1, [r0, r2]
   14688:	cmp	r1, #0
   1468c:	beq	14198 <__assert_fail@plt+0x29f0>
   14690:	add	r2, r2, #1
   14694:	add	r1, r7, r2
   14698:	cmp	r1, lr
   1469c:	bcc	14684 <__assert_fail@plt+0x2edc>
   146a0:	b	14198 <__assert_fail@plt+0x29f0>
   146a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   146a8:	ldr	r2, [sp, #52]	; 0x34
   146ac:	b	14198 <__assert_fail@plt+0x29f0>
   146b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   146b4:	eor	r0, r1, #2
   146b8:	orr	r0, r0, r8
   146bc:	clz	r0, r0
   146c0:	lsr	r0, r0, #5
   146c4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   146c8:	tst	r3, r0
   146cc:	bne	14798 <__assert_fail@plt+0x2ff0>
   146d0:	mov	r6, r5
   146d4:	subs	r0, r1, #2
   146d8:	movwne	r0, #1
   146dc:	orr	r0, r3, r0
   146e0:	tst	r0, #1
   146e4:	ldr	r2, [sp, #92]	; 0x5c
   146e8:	ldreq	r0, [sp, #64]	; 0x40
   146ec:	eoreq	r0, r0, #1
   146f0:	tsteq	r0, #1
   146f4:	bne	14734 <__assert_fail@plt+0x2f8c>
   146f8:	mov	r9, lr
   146fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14700:	tst	r0, #1
   14704:	bne	14800 <__assert_fail@plt+0x3058>
   14708:	ldr	r0, [sp, #84]	; 0x54
   1470c:	cmp	r0, #0
   14710:	beq	14734 <__assert_fail@plt+0x2f8c>
   14714:	mov	r0, #0
   14718:	str	r0, [fp, #-48]	; 0xffffffd0
   1471c:	mov	r1, #2
   14720:	cmp	sl, #0
   14724:	mov	r0, r2
   14728:	mov	r4, r3
   1472c:	ldr	r7, [sp, #84]	; 0x54
   14730:	beq	1390c <__assert_fail@plt+0x2164>
   14734:	ldr	r1, [fp, #-84]	; 0xffffffac
   14738:	clz	r0, r1
   1473c:	lsr	r0, r0, #5
   14740:	orr	r0, r0, r3
   14744:	tst	r0, #1
   14748:	bne	14774 <__assert_fail@plt+0x2fcc>
   1474c:	ldrb	r0, [r1]
   14750:	cmp	r0, #0
   14754:	beq	14774 <__assert_fail@plt+0x2fcc>
   14758:	add	r1, r1, #1
   1475c:	cmp	r8, sl
   14760:	strbcc	r0, [r6, r8]
   14764:	add	r8, r8, #1
   14768:	ldrb	r0, [r1], #1
   1476c:	cmp	r0, #0
   14770:	bne	1475c <__assert_fail@plt+0x2fb4>
   14774:	cmp	r8, sl
   14778:	movcc	r0, #0
   1477c:	strbcc	r0, [r6, r8]
   14780:	b	147f4 <__assert_fail@plt+0x304c>
   14784:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14788:	mov	lr, r4
   1478c:	b	14798 <__assert_fail@plt+0x2ff0>
   14790:	ldr	r5, [sp, #28]
   14794:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14798:	mov	r0, #0
   1479c:	ldr	r1, [fp, #12]
   147a0:	bic	r1, r1, #2
   147a4:	mov	r2, #2
   147a8:	ldr	r3, [sp, #92]	; 0x5c
   147ac:	tst	r3, #1
   147b0:	movwne	r2, #4
   147b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   147b8:	cmp	r3, #2
   147bc:	movne	r2, r3
   147c0:	str	r2, [sp]
   147c4:	str	r1, [sp, #4]
   147c8:	str	r0, [sp, #8]
   147cc:	ldr	r0, [sp, #80]	; 0x50
   147d0:	str	r0, [sp, #12]
   147d4:	ldr	r0, [sp, #88]	; 0x58
   147d8:	str	r0, [sp, #16]
   147dc:	mov	r0, r5
   147e0:	mov	r1, sl
   147e4:	mov	r2, ip
   147e8:	mov	r3, lr
   147ec:	bl	13880 <__assert_fail@plt+0x20d8>
   147f0:	mov	r8, r0
   147f4:	mov	r0, r8
   147f8:	sub	sp, fp, #28
   147fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14800:	mov	r0, #5
   14804:	str	r0, [sp]
   14808:	ldr	r0, [fp, #12]
   1480c:	str	r0, [sp, #4]
   14810:	ldr	r0, [fp, #16]
   14814:	str	r0, [sp, #8]
   14818:	ldr	r0, [sp, #80]	; 0x50
   1481c:	str	r0, [sp, #12]
   14820:	ldr	r0, [sp, #88]	; 0x58
   14824:	str	r0, [sp, #16]
   14828:	mov	r0, r6
   1482c:	ldr	r1, [sp, #84]	; 0x54
   14830:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14834:	mov	r3, r9
   14838:	b	147ec <__assert_fail@plt+0x3044>
   1483c:	bl	11784 <abort@plt>
   14840:	mov	r3, r2
   14844:	mov	r2, #0
   14848:	b	1484c <__assert_fail@plt+0x30a4>
   1484c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14850:	add	fp, sp, #28
   14854:	sub	sp, sp, #36	; 0x24
   14858:	mov	r4, r2
   1485c:	str	r2, [sp, #24]
   14860:	mov	r5, r1
   14864:	mov	r6, r0
   14868:	str	r0, [sp, #20]
   1486c:	movw	r8, #20936	; 0x51c8
   14870:	movt	r8, #3
   14874:	cmp	r3, #0
   14878:	movne	r8, r3
   1487c:	bl	11688 <__errno_location@plt>
   14880:	str	r0, [sp, #28]
   14884:	ldm	r8, {r3, r9}
   14888:	ldr	r1, [r8, #40]	; 0x28
   1488c:	ldr	r2, [r8, #44]	; 0x2c
   14890:	ldr	r7, [r0]
   14894:	str	r7, [sp, #32]
   14898:	add	sl, r8, #8
   1489c:	cmp	r4, #0
   148a0:	orreq	r9, r9, #1
   148a4:	stm	sp, {r3, r9, sl}
   148a8:	str	r1, [sp, #12]
   148ac:	str	r2, [sp, #16]
   148b0:	mov	r0, #0
   148b4:	mov	r1, #0
   148b8:	mov	r2, r6
   148bc:	mov	r3, r5
   148c0:	mov	r7, r5
   148c4:	bl	13880 <__assert_fail@plt+0x20d8>
   148c8:	mov	r5, r0
   148cc:	add	r4, r0, #1
   148d0:	mov	r0, r4
   148d4:	bl	226d4 <__assert_fail@plt+0x10f2c>
   148d8:	mov	r6, r0
   148dc:	ldr	r0, [r8]
   148e0:	ldr	r1, [r8, #40]	; 0x28
   148e4:	ldr	r2, [r8, #44]	; 0x2c
   148e8:	stm	sp, {r0, r9, sl}
   148ec:	str	r1, [sp, #12]
   148f0:	str	r2, [sp, #16]
   148f4:	mov	r0, r6
   148f8:	mov	r1, r4
   148fc:	ldr	r2, [sp, #20]
   14900:	mov	r3, r7
   14904:	bl	13880 <__assert_fail@plt+0x20d8>
   14908:	ldr	r0, [sp, #24]
   1490c:	ldr	r1, [sp, #32]
   14910:	ldr	r2, [sp, #28]
   14914:	str	r1, [r2]
   14918:	cmp	r0, #0
   1491c:	strne	r5, [r0]
   14920:	mov	r0, r6
   14924:	sub	sp, fp, #28
   14928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1492c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14930:	add	fp, sp, #24
   14934:	movw	r8, #20824	; 0x5158
   14938:	movt	r8, #3
   1493c:	ldr	r4, [r8]
   14940:	movw	r5, #20828	; 0x515c
   14944:	movt	r5, #3
   14948:	ldr	r0, [r5]
   1494c:	cmp	r0, #2
   14950:	blt	1497c <__assert_fail@plt+0x31d4>
   14954:	add	r7, r4, #12
   14958:	mov	r6, #0
   1495c:	ldr	r0, [r7, r6, lsl #3]
   14960:	bl	13140 <__assert_fail@plt+0x1998>
   14964:	add	r0, r6, #1
   14968:	ldr	r1, [r5]
   1496c:	add	r2, r6, #2
   14970:	cmp	r2, r1
   14974:	mov	r6, r0
   14978:	blt	1495c <__assert_fail@plt+0x31b4>
   1497c:	ldr	r0, [r4, #4]
   14980:	movw	r9, #20984	; 0x51f8
   14984:	movt	r9, #3
   14988:	cmp	r0, r9
   1498c:	movw	r7, #20832	; 0x5160
   14990:	movt	r7, #3
   14994:	beq	149a4 <__assert_fail@plt+0x31fc>
   14998:	bl	13140 <__assert_fail@plt+0x1998>
   1499c:	mov	r0, #256	; 0x100
   149a0:	stm	r7, {r0, r9}
   149a4:	cmp	r4, r7
   149a8:	beq	149b8 <__assert_fail@plt+0x3210>
   149ac:	mov	r0, r4
   149b0:	bl	13140 <__assert_fail@plt+0x1998>
   149b4:	str	r7, [r8]
   149b8:	mov	r0, #1
   149bc:	str	r0, [r5]
   149c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149c4:	movw	r3, #20936	; 0x51c8
   149c8:	movt	r3, #3
   149cc:	mvn	r2, #0
   149d0:	b	149d4 <__assert_fail@plt+0x322c>
   149d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d8:	add	fp, sp, #28
   149dc:	sub	sp, sp, #44	; 0x2c
   149e0:	mov	r7, r3
   149e4:	str	r2, [sp, #36]	; 0x24
   149e8:	str	r1, [sp, #32]
   149ec:	mov	r5, r0
   149f0:	bl	11688 <__errno_location@plt>
   149f4:	cmp	r5, #0
   149f8:	bmi	14b68 <__assert_fail@plt+0x33c0>
   149fc:	cmn	r5, #-2147483647	; 0x80000001
   14a00:	beq	14b68 <__assert_fail@plt+0x33c0>
   14a04:	movw	r4, #20824	; 0x5158
   14a08:	movt	r4, #3
   14a0c:	ldr	r6, [r4]
   14a10:	str	r0, [sp, #28]
   14a14:	ldr	r0, [r0]
   14a18:	str	r0, [sp, #24]
   14a1c:	movw	r8, #20828	; 0x515c
   14a20:	movt	r8, #3
   14a24:	ldr	r1, [r8]
   14a28:	cmp	r1, r5
   14a2c:	ble	14a38 <__assert_fail@plt+0x3290>
   14a30:	mov	sl, r6
   14a34:	b	14aa4 <__assert_fail@plt+0x32fc>
   14a38:	str	r1, [fp, #-32]	; 0xffffffe0
   14a3c:	mov	r0, #8
   14a40:	str	r0, [sp]
   14a44:	movw	r9, #20832	; 0x5160
   14a48:	movt	r9, #3
   14a4c:	subs	r0, r6, r9
   14a50:	movne	r0, r6
   14a54:	sub	r1, r5, r1
   14a58:	add	r2, r1, #1
   14a5c:	sub	r1, fp, #32
   14a60:	mvn	r3, #-2147483648	; 0x80000000
   14a64:	bl	227b0 <__assert_fail@plt+0x11008>
   14a68:	mov	sl, r0
   14a6c:	str	r0, [r4]
   14a70:	cmp	r6, r9
   14a74:	bne	14a80 <__assert_fail@plt+0x32d8>
   14a78:	ldrd	r0, [r9]
   14a7c:	stm	sl, {r0, r1}
   14a80:	ldr	r1, [r8]
   14a84:	add	r0, sl, r1, lsl #3
   14a88:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a8c:	sub	r1, r2, r1
   14a90:	lsl	r2, r1, #3
   14a94:	mov	r1, #0
   14a98:	bl	116ac <memset@plt>
   14a9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14aa0:	str	r0, [r8]
   14aa4:	mov	r9, sl
   14aa8:	ldr	r6, [r9, r5, lsl #3]!
   14aac:	ldr	r4, [r9, #4]!
   14ab0:	ldm	r7, {r0, r1}
   14ab4:	ldr	r2, [r7, #40]	; 0x28
   14ab8:	ldr	r3, [r7, #44]	; 0x2c
   14abc:	orr	r8, r1, #1
   14ac0:	add	r1, r7, #8
   14ac4:	stm	sp, {r0, r8}
   14ac8:	str	r1, [sp, #20]
   14acc:	add	r0, sp, #8
   14ad0:	stm	r0, {r1, r2, r3}
   14ad4:	mov	r0, r4
   14ad8:	mov	r1, r6
   14adc:	ldr	r2, [sp, #32]
   14ae0:	ldr	r3, [sp, #36]	; 0x24
   14ae4:	bl	13880 <__assert_fail@plt+0x20d8>
   14ae8:	cmp	r6, r0
   14aec:	bhi	14b50 <__assert_fail@plt+0x33a8>
   14af0:	add	r6, r0, #1
   14af4:	str	r6, [sl, r5, lsl #3]
   14af8:	movw	r0, #20984	; 0x51f8
   14afc:	movt	r0, #3
   14b00:	cmp	r4, r0
   14b04:	beq	14b10 <__assert_fail@plt+0x3368>
   14b08:	mov	r0, r4
   14b0c:	bl	13140 <__assert_fail@plt+0x1998>
   14b10:	mov	r0, r6
   14b14:	bl	226d4 <__assert_fail@plt+0x10f2c>
   14b18:	mov	r4, r0
   14b1c:	str	r0, [r9]
   14b20:	ldr	r0, [r7]
   14b24:	ldr	r1, [r7, #40]	; 0x28
   14b28:	ldr	r2, [r7, #44]	; 0x2c
   14b2c:	stm	sp, {r0, r8}
   14b30:	ldr	r0, [sp, #20]
   14b34:	add	r3, sp, #8
   14b38:	stm	r3, {r0, r1, r2}
   14b3c:	mov	r0, r4
   14b40:	mov	r1, r6
   14b44:	ldr	r2, [sp, #32]
   14b48:	ldr	r3, [sp, #36]	; 0x24
   14b4c:	bl	13880 <__assert_fail@plt+0x20d8>
   14b50:	ldr	r0, [sp, #28]
   14b54:	ldr	r1, [sp, #24]
   14b58:	str	r1, [r0]
   14b5c:	mov	r0, r4
   14b60:	sub	sp, fp, #28
   14b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b68:	bl	11784 <abort@plt>
   14b6c:	movw	r3, #20936	; 0x51c8
   14b70:	movt	r3, #3
   14b74:	b	149d4 <__assert_fail@plt+0x322c>
   14b78:	mov	r1, r0
   14b7c:	mov	r0, #0
   14b80:	b	149c4 <__assert_fail@plt+0x321c>
   14b84:	mov	r2, r1
   14b88:	mov	r1, r0
   14b8c:	mov	r0, #0
   14b90:	b	14b6c <__assert_fail@plt+0x33c4>
   14b94:	push	{r4, r5, r6, sl, fp, lr}
   14b98:	add	fp, sp, #16
   14b9c:	sub	sp, sp, #48	; 0x30
   14ba0:	mov	r4, r2
   14ba4:	mov	r5, r0
   14ba8:	mov	r6, sp
   14bac:	mov	r0, r6
   14bb0:	bl	14bd0 <__assert_fail@plt+0x3428>
   14bb4:	mov	r0, r5
   14bb8:	mov	r1, r4
   14bbc:	mvn	r2, #0
   14bc0:	mov	r3, r6
   14bc4:	bl	149d4 <__assert_fail@plt+0x322c>
   14bc8:	sub	sp, fp, #16
   14bcc:	pop	{r4, r5, r6, sl, fp, pc}
   14bd0:	push	{fp, lr}
   14bd4:	mov	fp, sp
   14bd8:	vmov.i32	q8, #0	; 0x00000000
   14bdc:	mov	r2, #32
   14be0:	mov	r3, r0
   14be4:	vst1.32	{d16-d17}, [r3], r2
   14be8:	vst1.32	{d16-d17}, [r3]
   14bec:	add	r2, r0, #16
   14bf0:	vst1.32	{d16-d17}, [r2]
   14bf4:	cmp	r1, #10
   14bf8:	strne	r1, [r0]
   14bfc:	popne	{fp, pc}
   14c00:	bl	11784 <abort@plt>
   14c04:	push	{r4, r5, r6, r7, fp, lr}
   14c08:	add	fp, sp, #16
   14c0c:	sub	sp, sp, #48	; 0x30
   14c10:	mov	r4, r3
   14c14:	mov	r5, r2
   14c18:	mov	r6, r0
   14c1c:	mov	r7, sp
   14c20:	mov	r0, r7
   14c24:	bl	14bd0 <__assert_fail@plt+0x3428>
   14c28:	mov	r0, r6
   14c2c:	mov	r1, r5
   14c30:	mov	r2, r4
   14c34:	mov	r3, r7
   14c38:	bl	149d4 <__assert_fail@plt+0x322c>
   14c3c:	sub	sp, fp, #16
   14c40:	pop	{r4, r5, r6, r7, fp, pc}
   14c44:	mov	r2, r1
   14c48:	mov	r1, r0
   14c4c:	mov	r0, #0
   14c50:	b	14b94 <__assert_fail@plt+0x33ec>
   14c54:	mov	r3, r2
   14c58:	mov	r2, r1
   14c5c:	mov	r1, r0
   14c60:	mov	r0, #0
   14c64:	b	14c04 <__assert_fail@plt+0x345c>
   14c68:	push	{r4, r5, r6, sl, fp, lr}
   14c6c:	add	fp, sp, #16
   14c70:	sub	sp, sp, #48	; 0x30
   14c74:	mov	r4, r1
   14c78:	mov	r5, r0
   14c7c:	movw	r0, #20936	; 0x51c8
   14c80:	movt	r0, #3
   14c84:	add	r1, r0, #16
   14c88:	mov	r3, #32
   14c8c:	vld1.64	{d16-d17}, [r0], r3
   14c90:	vld1.64	{d18-d19}, [r1]
   14c94:	mov	r6, sp
   14c98:	add	r1, r6, #16
   14c9c:	vld1.64	{d20-d21}, [r0]
   14ca0:	vst1.64	{d18-d19}, [r1]
   14ca4:	mov	r0, r6
   14ca8:	vst1.64	{d16-d17}, [r0], r3
   14cac:	vst1.64	{d20-d21}, [r0]
   14cb0:	mov	r0, r6
   14cb4:	mov	r1, r2
   14cb8:	mov	r2, #1
   14cbc:	bl	13774 <__assert_fail@plt+0x1fcc>
   14cc0:	mov	r0, #0
   14cc4:	mov	r1, r5
   14cc8:	mov	r2, r4
   14ccc:	mov	r3, r6
   14cd0:	bl	149d4 <__assert_fail@plt+0x322c>
   14cd4:	sub	sp, fp, #16
   14cd8:	pop	{r4, r5, r6, sl, fp, pc}
   14cdc:	mov	r2, r1
   14ce0:	mvn	r1, #0
   14ce4:	b	14c68 <__assert_fail@plt+0x34c0>
   14ce8:	mov	r1, #58	; 0x3a
   14cec:	b	14cdc <__assert_fail@plt+0x3534>
   14cf0:	mov	r2, #58	; 0x3a
   14cf4:	b	14c68 <__assert_fail@plt+0x34c0>
   14cf8:	push	{r4, r5, r6, sl, fp, lr}
   14cfc:	add	fp, sp, #16
   14d00:	sub	sp, sp, #48	; 0x30
   14d04:	mov	r4, r2
   14d08:	mov	r5, r0
   14d0c:	mov	r6, sp
   14d10:	mov	r0, r6
   14d14:	bl	14bd0 <__assert_fail@plt+0x3428>
   14d18:	mov	r0, r6
   14d1c:	mov	r1, #58	; 0x3a
   14d20:	mov	r2, #1
   14d24:	bl	13774 <__assert_fail@plt+0x1fcc>
   14d28:	mov	r0, r5
   14d2c:	mov	r1, r4
   14d30:	mvn	r2, #0
   14d34:	mov	r3, r6
   14d38:	bl	149d4 <__assert_fail@plt+0x322c>
   14d3c:	sub	sp, fp, #16
   14d40:	pop	{r4, r5, r6, sl, fp, pc}
   14d44:	push	{fp, lr}
   14d48:	mov	fp, sp
   14d4c:	sub	sp, sp, #8
   14d50:	mvn	ip, #0
   14d54:	str	ip, [sp]
   14d58:	bl	14d64 <__assert_fail@plt+0x35bc>
   14d5c:	mov	sp, fp
   14d60:	pop	{fp, pc}
   14d64:	push	{r4, r5, r6, r7, fp, lr}
   14d68:	add	fp, sp, #16
   14d6c:	sub	sp, sp, #48	; 0x30
   14d70:	mov	r7, r3
   14d74:	mov	r5, r0
   14d78:	movw	r0, #20936	; 0x51c8
   14d7c:	movt	r0, #3
   14d80:	add	r3, r0, #16
   14d84:	mov	r4, #32
   14d88:	vld1.64	{d16-d17}, [r0], r4
   14d8c:	vld1.64	{d18-d19}, [r3]
   14d90:	mov	r6, sp
   14d94:	add	r3, r6, #16
   14d98:	vld1.64	{d20-d21}, [r0]
   14d9c:	vst1.64	{d18-d19}, [r3]
   14da0:	mov	r0, r6
   14da4:	vst1.64	{d16-d17}, [r0], r4
   14da8:	vst1.64	{d20-d21}, [r0]
   14dac:	mov	r0, r6
   14db0:	bl	137cc <__assert_fail@plt+0x2024>
   14db4:	ldr	r2, [fp, #8]
   14db8:	mov	r0, r5
   14dbc:	mov	r1, r7
   14dc0:	mov	r3, r6
   14dc4:	bl	149d4 <__assert_fail@plt+0x322c>
   14dc8:	sub	sp, fp, #16
   14dcc:	pop	{r4, r5, r6, r7, fp, pc}
   14dd0:	mov	r3, r2
   14dd4:	mov	r2, r1
   14dd8:	mov	r1, r0
   14ddc:	mov	r0, #0
   14de0:	b	14d44 <__assert_fail@plt+0x359c>
   14de4:	push	{fp, lr}
   14de8:	mov	fp, sp
   14dec:	sub	sp, sp, #8
   14df0:	mov	ip, r2
   14df4:	mov	r2, r1
   14df8:	mov	r1, r0
   14dfc:	str	r3, [sp]
   14e00:	mov	r0, #0
   14e04:	mov	r3, ip
   14e08:	bl	14d64 <__assert_fail@plt+0x35bc>
   14e0c:	mov	sp, fp
   14e10:	pop	{fp, pc}
   14e14:	movw	r3, #20840	; 0x5168
   14e18:	movt	r3, #3
   14e1c:	b	149d4 <__assert_fail@plt+0x322c>
   14e20:	mov	r2, r1
   14e24:	mov	r1, r0
   14e28:	mov	r0, #0
   14e2c:	b	14e14 <__assert_fail@plt+0x366c>
   14e30:	mvn	r2, #0
   14e34:	b	14e14 <__assert_fail@plt+0x366c>
   14e38:	mov	r1, r0
   14e3c:	mov	r0, #0
   14e40:	b	14e30 <__assert_fail@plt+0x3688>
   14e44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e48:	add	fp, sp, #24
   14e4c:	sub	sp, sp, #16
   14e50:	mov	r4, r1
   14e54:	mov	r5, r0
   14e58:	mov	r7, #0
   14e5c:	mov	r0, #0
   14e60:	mov	r1, r5
   14e64:	mov	r2, #5
   14e68:	bl	11514 <dcgettext@plt>
   14e6c:	cmp	r0, r5
   14e70:	beq	14e7c <__assert_fail@plt+0x36d4>
   14e74:	sub	sp, fp, #24
   14e78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e7c:	bl	231a8 <__assert_fail@plt+0x11a00>
   14e80:	mov	r6, r0
   14e84:	mov	r8, #56	; 0x38
   14e88:	mov	r0, #45	; 0x2d
   14e8c:	stm	sp, {r0, r8}
   14e90:	str	r7, [sp, #8]
   14e94:	str	r7, [sp, #12]
   14e98:	mov	r0, r6
   14e9c:	mov	r1, #85	; 0x55
   14ea0:	mov	r2, #84	; 0x54
   14ea4:	mov	r3, #70	; 0x46
   14ea8:	bl	14f40 <__assert_fail@plt+0x3798>
   14eac:	cmp	r0, #0
   14eb0:	beq	14ecc <__assert_fail@plt+0x3724>
   14eb4:	ldrb	r1, [r5]
   14eb8:	movw	r2, #16662	; 0x4116
   14ebc:	movt	r2, #2
   14ec0:	movw	r0, #16666	; 0x411a
   14ec4:	movt	r0, #2
   14ec8:	b	14f10 <__assert_fail@plt+0x3768>
   14ecc:	mov	r0, #48	; 0x30
   14ed0:	mov	r1, #51	; 0x33
   14ed4:	str	r8, [sp]
   14ed8:	stmib	sp, {r0, r1}
   14edc:	str	r0, [sp, #12]
   14ee0:	mov	r0, r6
   14ee4:	mov	r1, #71	; 0x47
   14ee8:	mov	r2, #66	; 0x42
   14eec:	mov	r3, #49	; 0x31
   14ef0:	bl	14f40 <__assert_fail@plt+0x3798>
   14ef4:	cmp	r0, #0
   14ef8:	beq	14f20 <__assert_fail@plt+0x3778>
   14efc:	ldrb	r1, [r5]
   14f00:	movw	r2, #16670	; 0x411e
   14f04:	movt	r2, #2
   14f08:	movw	r0, #16674	; 0x4122
   14f0c:	movt	r0, #2
   14f10:	cmp	r1, #96	; 0x60
   14f14:	moveq	r0, r2
   14f18:	sub	sp, fp, #24
   14f1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f20:	movw	r1, #16658	; 0x4112
   14f24:	movt	r1, #2
   14f28:	movw	r0, #16332	; 0x3fcc
   14f2c:	movt	r0, #2
   14f30:	cmp	r4, #9
   14f34:	moveq	r0, r1
   14f38:	sub	sp, fp, #24
   14f3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f40:	push	{r4, r5, r6, r7, fp, lr}
   14f44:	add	fp, sp, #16
   14f48:	sub	sp, sp, #16
   14f4c:	mov	r4, r3
   14f50:	mov	r5, r2
   14f54:	mov	r7, r1
   14f58:	mov	r6, r0
   14f5c:	mov	r0, r1
   14f60:	bl	22df0 <__assert_fail@plt+0x11648>
   14f64:	ldrb	r1, [r6]
   14f68:	cmp	r0, #0
   14f6c:	andne	r1, r1, #223	; 0xdf
   14f70:	mov	r0, #0
   14f74:	cmp	r1, r7
   14f78:	bne	14fb0 <__assert_fail@plt+0x3808>
   14f7c:	cmp	r7, #0
   14f80:	beq	14fb8 <__assert_fail@plt+0x3810>
   14f84:	ldr	r0, [fp, #20]
   14f88:	ldr	r1, [fp, #16]
   14f8c:	ldr	r2, [fp, #12]
   14f90:	ldr	r3, [fp, #8]
   14f94:	str	r2, [sp]
   14f98:	str	r1, [sp, #4]
   14f9c:	str	r0, [sp, #8]
   14fa0:	mov	r0, r6
   14fa4:	mov	r1, r5
   14fa8:	mov	r2, r4
   14fac:	bl	14fc4 <__assert_fail@plt+0x381c>
   14fb0:	sub	sp, fp, #16
   14fb4:	pop	{r4, r5, r6, r7, fp, pc}
   14fb8:	mov	r0, #1
   14fbc:	sub	sp, fp, #16
   14fc0:	pop	{r4, r5, r6, r7, fp, pc}
   14fc4:	push	{r4, r5, r6, r7, fp, lr}
   14fc8:	add	fp, sp, #16
   14fcc:	sub	sp, sp, #8
   14fd0:	mov	r4, r3
   14fd4:	mov	r5, r2
   14fd8:	mov	r7, r1
   14fdc:	mov	r6, r0
   14fe0:	mov	r0, r1
   14fe4:	bl	22df0 <__assert_fail@plt+0x11648>
   14fe8:	ldrb	r1, [r6, #1]
   14fec:	cmp	r0, #0
   14ff0:	andne	r1, r1, #223	; 0xdf
   14ff4:	mov	r0, #0
   14ff8:	cmp	r1, r7
   14ffc:	bne	1502c <__assert_fail@plt+0x3884>
   15000:	cmp	r7, #0
   15004:	beq	15034 <__assert_fail@plt+0x388c>
   15008:	ldr	r0, [fp, #16]
   1500c:	ldr	r1, [fp, #12]
   15010:	ldr	r3, [fp, #8]
   15014:	str	r1, [sp]
   15018:	str	r0, [sp, #4]
   1501c:	mov	r0, r6
   15020:	mov	r1, r5
   15024:	mov	r2, r4
   15028:	bl	15040 <__assert_fail@plt+0x3898>
   1502c:	sub	sp, fp, #16
   15030:	pop	{r4, r5, r6, r7, fp, pc}
   15034:	mov	r0, #1
   15038:	sub	sp, fp, #16
   1503c:	pop	{r4, r5, r6, r7, fp, pc}
   15040:	push	{r4, r5, r6, r7, fp, lr}
   15044:	add	fp, sp, #16
   15048:	sub	sp, sp, #8
   1504c:	mov	r4, r3
   15050:	mov	r5, r2
   15054:	mov	r7, r1
   15058:	mov	r6, r0
   1505c:	mov	r0, r1
   15060:	bl	22df0 <__assert_fail@plt+0x11648>
   15064:	ldrb	r1, [r6, #2]
   15068:	cmp	r0, #0
   1506c:	andne	r1, r1, #223	; 0xdf
   15070:	mov	r0, #0
   15074:	cmp	r1, r7
   15078:	bne	150a0 <__assert_fail@plt+0x38f8>
   1507c:	cmp	r7, #0
   15080:	beq	150a8 <__assert_fail@plt+0x3900>
   15084:	ldr	r0, [fp, #12]
   15088:	ldr	r3, [fp, #8]
   1508c:	str	r0, [sp]
   15090:	mov	r0, r6
   15094:	mov	r1, r5
   15098:	mov	r2, r4
   1509c:	bl	150b4 <__assert_fail@plt+0x390c>
   150a0:	sub	sp, fp, #16
   150a4:	pop	{r4, r5, r6, r7, fp, pc}
   150a8:	mov	r0, #1
   150ac:	sub	sp, fp, #16
   150b0:	pop	{r4, r5, r6, r7, fp, pc}
   150b4:	push	{r4, r5, r6, r7, fp, lr}
   150b8:	add	fp, sp, #16
   150bc:	mov	r4, r3
   150c0:	mov	r5, r2
   150c4:	mov	r7, r1
   150c8:	mov	r6, r0
   150cc:	mov	r0, r1
   150d0:	bl	22df0 <__assert_fail@plt+0x11648>
   150d4:	ldrb	r1, [r6, #3]
   150d8:	ldr	r3, [fp, #8]
   150dc:	cmp	r0, #0
   150e0:	andne	r1, r1, #223	; 0xdf
   150e4:	mov	r0, #0
   150e8:	cmp	r1, r7
   150ec:	bne	15110 <__assert_fail@plt+0x3968>
   150f0:	cmp	r7, #0
   150f4:	beq	1510c <__assert_fail@plt+0x3964>
   150f8:	mov	r0, r6
   150fc:	mov	r1, r5
   15100:	mov	r2, r4
   15104:	pop	{r4, r5, r6, r7, fp, lr}
   15108:	b	15114 <__assert_fail@plt+0x396c>
   1510c:	mov	r0, #1
   15110:	pop	{r4, r5, r6, r7, fp, pc}
   15114:	push	{r4, r5, r6, r7, fp, lr}
   15118:	add	fp, sp, #16
   1511c:	mov	r4, r3
   15120:	mov	r5, r2
   15124:	mov	r7, r1
   15128:	mov	r6, r0
   1512c:	mov	r0, r1
   15130:	bl	22df0 <__assert_fail@plt+0x11648>
   15134:	ldrb	r1, [r6, #4]
   15138:	cmp	r0, #0
   1513c:	andne	r1, r1, #223	; 0xdf
   15140:	mov	r0, #0
   15144:	cmp	r1, r7
   15148:	bne	1516c <__assert_fail@plt+0x39c4>
   1514c:	cmp	r7, #0
   15150:	beq	15168 <__assert_fail@plt+0x39c0>
   15154:	mov	r0, r6
   15158:	mov	r1, r5
   1515c:	mov	r2, r4
   15160:	pop	{r4, r5, r6, r7, fp, lr}
   15164:	b	15170 <__assert_fail@plt+0x39c8>
   15168:	mov	r0, #1
   1516c:	pop	{r4, r5, r6, r7, fp, pc}
   15170:	push	{r4, r5, r6, sl, fp, lr}
   15174:	add	fp, sp, #16
   15178:	mov	r4, r2
   1517c:	mov	r6, r1
   15180:	mov	r5, r0
   15184:	mov	r0, r1
   15188:	bl	22df0 <__assert_fail@plt+0x11648>
   1518c:	ldrb	r1, [r5, #5]
   15190:	cmp	r0, #0
   15194:	andne	r1, r1, #223	; 0xdf
   15198:	mov	r0, #0
   1519c:	cmp	r1, r6
   151a0:	bne	151c0 <__assert_fail@plt+0x3a18>
   151a4:	cmp	r6, #0
   151a8:	beq	151bc <__assert_fail@plt+0x3a14>
   151ac:	mov	r0, r5
   151b0:	mov	r1, r4
   151b4:	pop	{r4, r5, r6, sl, fp, lr}
   151b8:	b	151c4 <__assert_fail@plt+0x3a1c>
   151bc:	mov	r0, #1
   151c0:	pop	{r4, r5, r6, sl, fp, pc}
   151c4:	push	{r4, r5, fp, lr}
   151c8:	add	fp, sp, #8
   151cc:	mov	r5, r1
   151d0:	mov	r4, r0
   151d4:	mov	r0, r1
   151d8:	bl	22df0 <__assert_fail@plt+0x11648>
   151dc:	ldrb	r1, [r4, #6]
   151e0:	cmp	r0, #0
   151e4:	andne	r1, r1, #223	; 0xdf
   151e8:	mov	r0, #0
   151ec:	cmp	r1, r5
   151f0:	popne	{r4, r5, fp, pc}
   151f4:	cmp	r5, #0
   151f8:	beq	15208 <__assert_fail@plt+0x3a60>
   151fc:	mov	r0, r4
   15200:	pop	{r4, r5, fp, lr}
   15204:	b	15210 <__assert_fail@plt+0x3a68>
   15208:	mov	r0, #1
   1520c:	pop	{r4, r5, fp, pc}
   15210:	push	{r4, sl, fp, lr}
   15214:	add	fp, sp, #8
   15218:	mov	r4, r0
   1521c:	mov	r0, #0
   15220:	bl	22df0 <__assert_fail@plt+0x11648>
   15224:	ldrb	r1, [r4, #7]
   15228:	cmp	r0, #0
   1522c:	beq	15240 <__assert_fail@plt+0x3a98>
   15230:	tst	r1, #223	; 0xdf
   15234:	bne	15248 <__assert_fail@plt+0x3aa0>
   15238:	mov	r0, #1
   1523c:	pop	{r4, sl, fp, pc}
   15240:	cmp	r1, #0
   15244:	beq	15238 <__assert_fail@plt+0x3a90>
   15248:	mov	r0, #0
   1524c:	pop	{r4, sl, fp, pc}
   15250:	push	{fp, lr}
   15254:	mov	fp, sp
   15258:	mov	ip, r1
   1525c:	mov	lr, r0
   15260:	movw	r0, #21240	; 0x52f8
   15264:	movt	r0, #3
   15268:	ldr	r3, [r0]
   1526c:	mov	r0, #16
   15270:	and	r0, r0, r3, lsr #21
   15274:	ldrb	r1, [r2, #28]
   15278:	and	r1, r1, #111	; 0x6f
   1527c:	orr	r0, r1, r0
   15280:	orr	r0, r0, #128	; 0x80
   15284:	strb	r0, [r2, #28]
   15288:	mov	r0, r2
   1528c:	mov	r1, lr
   15290:	mov	r2, ip
   15294:	bl	152d0 <__assert_fail@plt+0x3b28>
   15298:	cmp	r0, #0
   1529c:	beq	152c8 <__assert_fail@plt+0x3b20>
   152a0:	movw	r1, #17152	; 0x4300
   152a4:	movt	r1, #2
   152a8:	ldr	r0, [r1, r0, lsl #2]
   152ac:	movw	r1, #16768	; 0x4180
   152b0:	movt	r1, #2
   152b4:	add	r1, r1, r0
   152b8:	mov	r0, #0
   152bc:	mov	r2, #5
   152c0:	pop	{fp, lr}
   152c4:	b	11514 <dcgettext@plt>
   152c8:	mov	r0, #0
   152cc:	pop	{fp, pc}
   152d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   152d4:	add	fp, sp, #24
   152d8:	sub	sp, sp, #96	; 0x60
   152dc:	mov	r6, r3
   152e0:	mov	r7, r2
   152e4:	mov	r8, r1
   152e8:	mov	r4, r0
   152ec:	mov	r0, #0
   152f0:	str	r0, [fp, #-28]	; 0xffffffe4
   152f4:	str	r0, [r4, #24]
   152f8:	str	r0, [r4, #8]
   152fc:	str	r3, [r4, #12]
   15300:	ldrb	r0, [r4, #28]
   15304:	and	r0, r0, #144	; 0x90
   15308:	strb	r0, [r4, #28]
   1530c:	ldr	r5, [r4]
   15310:	ldr	r0, [r4, #4]
   15314:	cmp	r0, #159	; 0x9f
   15318:	bls	1547c <__assert_fail@plt+0x3cd4>
   1531c:	mov	r0, #160	; 0xa0
   15320:	str	r0, [r4, #8]
   15324:	mov	r0, r5
   15328:	mov	r1, r7
   1532c:	bl	169c0 <__assert_fail@plt+0x5218>
   15330:	str	r0, [fp, #-28]	; 0xffffffe4
   15334:	cmp	r0, #0
   15338:	bne	1536c <__assert_fail@plt+0x3bc4>
   1533c:	movw	r1, #0
   15340:	movt	r1, #0
   15344:	movw	r2, #0
   15348:	movt	r2, #0
   1534c:	orrs	r1, r2, r1
   15350:	beq	1536c <__assert_fail@plt+0x3bc4>
   15354:	add	r0, r5, #136	; 0x88
   15358:	mov	r1, #0
   1535c:	bl	114f0 <pthread_mutex_init@plt>
   15360:	cmp	r0, #0
   15364:	bne	154a0 <__assert_fail@plt+0x3cf8>
   15368:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1536c:	cmp	r0, #0
   15370:	bne	15464 <__assert_fail@plt+0x3cbc>
   15374:	ldr	r3, [r4, #20]
   15378:	str	r5, [sp, #4]
   1537c:	ubfx	r0, r6, #22, #1
   15380:	str	r0, [sp]
   15384:	add	r0, sp, #8
   15388:	mov	r1, r8
   1538c:	mov	r2, r7
   15390:	bl	16b7c <__assert_fail@plt+0x53d4>
   15394:	str	r0, [fp, #-28]	; 0xffffffe4
   15398:	cmp	r0, #0
   1539c:	bne	15434 <__assert_fail@plt+0x3c8c>
   153a0:	mov	r0, #0
   153a4:	str	r0, [r4, #24]
   153a8:	add	r0, sp, #8
   153ac:	sub	r3, fp, #28
   153b0:	mov	r1, r4
   153b4:	mov	r2, r6
   153b8:	bl	16d50 <__assert_fail@plt+0x55a8>
   153bc:	str	r0, [r5, #52]	; 0x34
   153c0:	cmp	r0, #0
   153c4:	beq	15434 <__assert_fail@plt+0x3c8c>
   153c8:	mov	r0, r4
   153cc:	bl	16e24 <__assert_fail@plt+0x567c>
   153d0:	str	r0, [fp, #-28]	; 0xffffffe4
   153d4:	cmp	r0, #0
   153d8:	bne	15434 <__assert_fail@plt+0x3c8c>
   153dc:	ands	r0, r6, #4194304	; 0x400000
   153e0:	bne	15400 <__assert_fail@plt+0x3c58>
   153e4:	ldrb	r0, [r5, #88]	; 0x58
   153e8:	ands	r0, r0, #4
   153ec:	beq	15400 <__assert_fail@plt+0x3c58>
   153f0:	ldr	r0, [r4, #20]
   153f4:	cmp	r0, #0
   153f8:	moveq	r0, r5
   153fc:	bleq	17040 <__assert_fail@plt+0x5898>
   15400:	mov	r0, r5
   15404:	bl	171e4 <__assert_fail@plt+0x5a3c>
   15408:	str	r0, [fp, #-28]	; 0xffffffe4
   1540c:	mov	r0, r4
   15410:	bl	16ccc <__assert_fail@plt+0x5524>
   15414:	add	r0, sp, #8
   15418:	bl	16d1c <__assert_fail@plt+0x5574>
   1541c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15420:	cmp	r0, #0
   15424:	bne	15444 <__assert_fail@plt+0x3c9c>
   15428:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1542c:	sub	sp, fp, #24
   15430:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15434:	mov	r0, r4
   15438:	bl	16ccc <__assert_fail@plt+0x5524>
   1543c:	add	r0, sp, #8
   15440:	bl	16d1c <__assert_fail@plt+0x5574>
   15444:	movw	r0, #0
   15448:	movt	r0, #0
   1544c:	movw	r1, #0
   15450:	movt	r1, #0
   15454:	orrs	r0, r1, r0
   15458:	beq	15464 <__assert_fail@plt+0x3cbc>
   1545c:	add	r0, r5, #136	; 0x88
   15460:	bl	11478 <pthread_mutex_destroy@plt>
   15464:	mov	r0, r5
   15468:	bl	15ad4 <__assert_fail@plt+0x432c>
   1546c:	mov	r0, #0
   15470:	str	r0, [r4]
   15474:	str	r0, [r4, #4]
   15478:	b	15428 <__assert_fail@plt+0x3c80>
   1547c:	mov	r9, #160	; 0xa0
   15480:	mov	r0, r5
   15484:	mov	r1, #160	; 0xa0
   15488:	bl	22ae8 <__assert_fail@plt+0x11340>
   1548c:	cmp	r0, #0
   15490:	beq	154ac <__assert_fail@plt+0x3d04>
   15494:	mov	r5, r0
   15498:	stm	r4, {r0, r9}
   1549c:	b	1531c <__assert_fail@plt+0x3b74>
   154a0:	mov	r0, #12
   154a4:	str	r0, [fp, #-28]	; 0xffffffe4
   154a8:	b	15464 <__assert_fail@plt+0x3cbc>
   154ac:	mov	r0, #12
   154b0:	sub	sp, fp, #24
   154b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154b8:	movw	r2, #21240	; 0x52f8
   154bc:	movt	r2, #3
   154c0:	ldr	r1, [r2]
   154c4:	str	r0, [r2]
   154c8:	mov	r0, r1
   154cc:	bx	lr
   154d0:	push	{r4, r5, r6, sl, fp, lr}
   154d4:	add	fp, sp, #16
   154d8:	mov	r4, r0
   154dc:	ldr	r6, [r0]
   154e0:	ldr	r5, [r0, #16]
   154e4:	mov	r0, r5
   154e8:	mov	r1, #0
   154ec:	mov	r2, #256	; 0x100
   154f0:	bl	116ac <memset@plt>
   154f4:	ldr	r1, [r6, #36]	; 0x24
   154f8:	mov	r0, r4
   154fc:	mov	r2, r5
   15500:	bl	15560 <__assert_fail@plt+0x3db8>
   15504:	ldr	r0, [r6, #36]	; 0x24
   15508:	ldr	r1, [r6, #40]	; 0x28
   1550c:	cmp	r0, r1
   15510:	movne	r0, r4
   15514:	movne	r2, r5
   15518:	blne	15560 <__assert_fail@plt+0x3db8>
   1551c:	ldr	r0, [r6, #36]	; 0x24
   15520:	ldr	r1, [r6, #44]	; 0x2c
   15524:	cmp	r0, r1
   15528:	movne	r0, r4
   1552c:	movne	r2, r5
   15530:	blne	15560 <__assert_fail@plt+0x3db8>
   15534:	ldr	r0, [r6, #36]	; 0x24
   15538:	ldr	r1, [r6, #48]	; 0x30
   1553c:	cmp	r0, r1
   15540:	movne	r0, r4
   15544:	movne	r2, r5
   15548:	blne	15560 <__assert_fail@plt+0x3db8>
   1554c:	ldrb	r0, [r4, #28]
   15550:	orr	r0, r0, #8
   15554:	strb	r0, [r4, #28]
   15558:	mov	r0, #0
   1555c:	pop	{r4, r5, r6, sl, fp, pc}
   15560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15564:	add	fp, sp, #28
   15568:	sub	sp, sp, #308	; 0x134
   1556c:	mov	r5, r2
   15570:	str	r0, [sp, #20]
   15574:	ldr	r8, [r0]
   15578:	ldr	r0, [r8, #92]	; 0x5c
   1557c:	mov	r9, #0
   15580:	cmp	r0, #1
   15584:	bne	15594 <__assert_fail@plt+0x3dec>
   15588:	ldr	r0, [sp, #20]
   1558c:	ldrb	r0, [r0, #14]
   15590:	ubfx	r9, r0, #6, #1
   15594:	ldr	r0, [r1, #8]
   15598:	cmp	r0, #1
   1559c:	blt	158dc <__assert_fail@plt+0x4134>
   155a0:	add	r0, sp, #32
   155a4:	add	r0, r0, #1
   155a8:	str	r0, [sp, #4]
   155ac:	mov	r7, #1
   155b0:	movw	r0, #1
   155b4:	movt	r0, #32
   155b8:	add	r0, r0, #254	; 0xfe
   155bc:	str	r0, [sp, #8]
   155c0:	mov	r2, #0
   155c4:	str	r1, [sp, #12]
   155c8:	str	r8, [sp, #24]
   155cc:	b	155e8 <__assert_fail@plt+0x3e40>
   155d0:	ldr	r1, [sp, #12]
   155d4:	ldr	r0, [r1, #8]
   155d8:	ldr	r2, [sp, #16]
   155dc:	add	r2, r2, #1
   155e0:	cmp	r2, r0
   155e4:	bge	158dc <__assert_fail@plt+0x4134>
   155e8:	ldr	r0, [r1, #12]
   155ec:	str	r2, [sp, #16]
   155f0:	ldr	sl, [r0, r2, lsl #2]
   155f4:	ldr	r0, [r8]
   155f8:	add	r1, r0, sl, lsl #3
   155fc:	ldrb	r4, [r1, #4]
   15600:	cmp	r4, #1
   15604:	beq	15680 <__assert_fail@plt+0x3ed8>
   15608:	cmp	r4, #6
   1560c:	beq	15770 <__assert_fail@plt+0x3fc8>
   15610:	cmp	r4, #3
   15614:	bne	157f0 <__assert_fail@plt+0x4048>
   15618:	mov	r4, #0
   1561c:	mov	r6, #0
   15620:	str	sl, [sp, #28]
   15624:	b	1563c <__assert_fail@plt+0x3e94>
   15628:	add	r6, r6, #1
   1562c:	cmp	r6, #8
   15630:	ldr	r8, [sp, #24]
   15634:	ldr	sl, [sp, #28]
   15638:	beq	155d0 <__assert_fail@plt+0x3e28>
   1563c:	ldr	r0, [r8]
   15640:	ldr	r0, [r0, sl, lsl #3]
   15644:	ldr	r8, [r0, r6, lsl #2]
   15648:	mov	sl, #0
   1564c:	b	15660 <__assert_fail@plt+0x3eb8>
   15650:	add	r4, r4, #1
   15654:	add	sl, sl, #1
   15658:	cmp	sl, #32
   1565c:	beq	15628 <__assert_fail@plt+0x3e80>
   15660:	tst	r8, r7, lsl sl
   15664:	strbne	r7, [r5, r4]
   15668:	cmpne	r9, #0
   1566c:	beq	15650 <__assert_fail@plt+0x3ea8>
   15670:	mov	r0, r4
   15674:	bl	114e4 <tolower@plt>
   15678:	strb	r7, [r5, r0]
   1567c:	b	15650 <__assert_fail@plt+0x3ea8>
   15680:	ldrb	r0, [r0, sl, lsl #3]
   15684:	strb	r7, [r5, r0]
   15688:	cmp	r9, #0
   1568c:	beq	15698 <__assert_fail@plt+0x3ef0>
   15690:	bl	114e4 <tolower@plt>
   15694:	strb	r7, [r5, r0]
   15698:	ldr	r0, [sp, #20]
   1569c:	ldrb	r0, [r0, #14]
   156a0:	tst	r0, #64	; 0x40
   156a4:	beq	155d0 <__assert_fail@plt+0x3e28>
   156a8:	ldr	r0, [r8, #92]	; 0x5c
   156ac:	cmp	r0, #2
   156b0:	blt	155d0 <__assert_fail@plt+0x3e28>
   156b4:	ldr	r0, [r8]
   156b8:	ldrb	r0, [r0, sl, lsl #3]
   156bc:	strb	r0, [sp, #32]
   156c0:	ldr	r0, [r8, #8]
   156c4:	add	r1, sl, #1
   156c8:	cmp	r1, r0
   156cc:	ldr	r0, [sp, #4]
   156d0:	mov	r6, #0
   156d4:	movw	r4, #1
   156d8:	movt	r4, #32
   156dc:	bcs	15720 <__assert_fail@plt+0x3f78>
   156e0:	ldr	r0, [sp, #4]
   156e4:	ldr	r1, [r8]
   156e8:	add	r1, r1, sl, lsl #3
   156ec:	ldr	r2, [r1, #12]
   156f0:	ldr	r3, [sp, #8]
   156f4:	and	r2, r2, r3
   156f8:	cmp	r2, r4
   156fc:	bne	15720 <__assert_fail@plt+0x3f78>
   15700:	ldrb	r1, [r1, #8]
   15704:	strb	r1, [r0], #1
   15708:	add	r1, sl, #1
   1570c:	ldr	r2, [r8, #8]
   15710:	add	r3, sl, #2
   15714:	cmp	r3, r2
   15718:	mov	sl, r1
   1571c:	bcc	156e4 <__assert_fail@plt+0x3f3c>
   15720:	str	r6, [fp, #-44]	; 0xffffffd4
   15724:	str	r6, [fp, #-48]	; 0xffffffd0
   15728:	add	r1, sp, #32
   1572c:	sub	r4, r0, r1
   15730:	sub	r0, fp, #36	; 0x24
   15734:	mov	r2, r4
   15738:	sub	r3, fp, #48	; 0x30
   1573c:	bl	23284 <__assert_fail@plt+0x11adc>
   15740:	cmp	r0, r4
   15744:	bne	155d0 <__assert_fail@plt+0x3e28>
   15748:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1574c:	bl	114fc <towlower@plt>
   15750:	mov	r1, r0
   15754:	add	r0, sp, #32
   15758:	sub	r2, fp, #48	; 0x30
   1575c:	bl	1143c <wcrtomb@plt>
   15760:	cmn	r0, #1
   15764:	ldrbne	r0, [sp, #32]
   15768:	strbne	r7, [r5, r0]
   1576c:	b	155d0 <__assert_fail@plt+0x3e28>
   15770:	ldr	r4, [r0, sl, lsl #3]
   15774:	ldr	r0, [r8, #92]	; 0x5c
   15778:	cmp	r0, #2
   1577c:	blt	15808 <__assert_fail@plt+0x4060>
   15780:	ldr	r0, [r4, #36]	; 0x24
   15784:	cmp	r0, #0
   15788:	bne	157a4 <__assert_fail@plt+0x3ffc>
   1578c:	ldrb	r0, [r4, #16]
   15790:	tst	r0, #1
   15794:	bne	157a4 <__assert_fail@plt+0x3ffc>
   15798:	ldr	r0, [r4, #32]
   1579c:	cmp	r0, #0
   157a0:	beq	15808 <__assert_fail@plt+0x4060>
   157a4:	mov	r4, #0
   157a8:	strb	r4, [fp, #-48]	; 0xffffffd0
   157ac:	str	r4, [sp, #36]	; 0x24
   157b0:	str	r4, [sp, #32]
   157b4:	mov	r0, #0
   157b8:	sub	r1, fp, #48	; 0x30
   157bc:	mov	r2, #1
   157c0:	add	r3, sp, #32
   157c4:	bl	23284 <__assert_fail@plt+0x11adc>
   157c8:	cmn	r0, #2
   157cc:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   157d0:	strbeq	r7, [r5, r0]
   157d4:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   157d8:	add	r0, r0, #1
   157dc:	strb	r0, [fp, #-48]	; 0xffffffd0
   157e0:	uxtb	r1, r0
   157e4:	cmp	r1, r0
   157e8:	beq	157ac <__assert_fail@plt+0x4004>
   157ec:	b	155d0 <__assert_fail@plt+0x3e28>
   157f0:	cmp	r4, #7
   157f4:	bhi	155d0 <__assert_fail@plt+0x3e28>
   157f8:	mov	r0, #164	; 0xa4
   157fc:	tst	r0, r7, lsl r4
   15800:	beq	155d0 <__assert_fail@plt+0x3e28>
   15804:	b	158b4 <__assert_fail@plt+0x410c>
   15808:	ldr	r0, [r4, #20]
   1580c:	cmp	r0, #1
   15810:	blt	155d0 <__assert_fail@plt+0x3e28>
   15814:	mov	r6, #0
   15818:	b	1582c <__assert_fail@plt+0x4084>
   1581c:	add	r6, r6, #1
   15820:	ldr	r0, [r4, #20]
   15824:	cmp	r6, r0
   15828:	bge	155d0 <__assert_fail@plt+0x3e28>
   1582c:	mov	r0, #0
   15830:	str	r0, [fp, #-44]	; 0xffffffd4
   15834:	str	r0, [fp, #-48]	; 0xffffffd0
   15838:	ldr	r0, [r4]
   1583c:	ldr	r1, [r0, r6, lsl #2]
   15840:	add	r0, sp, #32
   15844:	sub	r2, fp, #48	; 0x30
   15848:	bl	1143c <wcrtomb@plt>
   1584c:	cmn	r0, #1
   15850:	beq	1586c <__assert_fail@plt+0x40c4>
   15854:	ldrb	r0, [sp, #32]
   15858:	strb	r7, [r5, r0]
   1585c:	cmp	r9, #0
   15860:	beq	1586c <__assert_fail@plt+0x40c4>
   15864:	bl	114e4 <tolower@plt>
   15868:	strb	r7, [r5, r0]
   1586c:	ldr	r0, [sp, #20]
   15870:	ldrb	r0, [r0, #14]
   15874:	tst	r0, #64	; 0x40
   15878:	beq	1581c <__assert_fail@plt+0x4074>
   1587c:	ldr	r0, [r8, #92]	; 0x5c
   15880:	cmp	r0, #2
   15884:	blt	1581c <__assert_fail@plt+0x4074>
   15888:	ldr	r0, [r4]
   1588c:	ldr	r0, [r0, r6, lsl #2]
   15890:	bl	114fc <towlower@plt>
   15894:	mov	r1, r0
   15898:	add	r0, sp, #32
   1589c:	sub	r2, fp, #48	; 0x30
   158a0:	bl	1143c <wcrtomb@plt>
   158a4:	cmn	r0, #1
   158a8:	ldrbne	r0, [sp, #32]
   158ac:	strbne	r7, [r5, r0]
   158b0:	b	1581c <__assert_fail@plt+0x4074>
   158b4:	mov	r0, r5
   158b8:	mov	r1, #1
   158bc:	mov	r2, #256	; 0x100
   158c0:	bl	116ac <memset@plt>
   158c4:	cmp	r4, #2
   158c8:	bne	158dc <__assert_fail@plt+0x4134>
   158cc:	ldr	r1, [sp, #20]
   158d0:	ldrb	r0, [r1, #28]
   158d4:	orr	r0, r0, #1
   158d8:	strb	r0, [r1, #28]
   158dc:	sub	sp, fp, #28
   158e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158e8:	add	fp, sp, #24
   158ec:	mov	r7, r2
   158f0:	mov	r8, r1
   158f4:	mov	r4, r0
   158f8:	mov	r0, #0
   158fc:	str	r0, [r4]
   15900:	str	r0, [r4, #4]
   15904:	str	r0, [r4, #8]
   15908:	mov	r0, #256	; 0x100
   1590c:	bl	22ab8 <__assert_fail@plt+0x11310>
   15910:	str	r0, [r4, #16]
   15914:	cmp	r0, #0
   15918:	beq	159c8 <__assert_fail@plt+0x4220>
   1591c:	movw	r0, #45820	; 0xb2fc
   15920:	movt	r0, #3
   15924:	tst	r7, #1
   15928:	movweq	r0, #710	; 0x2c6
   1592c:	movteq	r0, #257	; 0x101
   15930:	and	r1, r7, #2
   15934:	orr	r5, r0, r1, lsl #21
   15938:	tst	r7, #4
   1593c:	bne	15950 <__assert_fail@plt+0x41a8>
   15940:	ldrb	r0, [r4, #28]
   15944:	and	r0, r0, #127	; 0x7f
   15948:	strb	r0, [r4, #28]
   1594c:	b	1596c <__assert_fail@plt+0x41c4>
   15950:	ldrb	r0, [r4, #28]
   15954:	orr	r0, r0, #128	; 0x80
   15958:	strb	r0, [r4, #28]
   1595c:	movw	r0, #45758	; 0xb2be
   15960:	movt	r0, #323	; 0x143
   15964:	and	r0, r5, r0
   15968:	orr	r5, r0, #256	; 0x100
   1596c:	mov	r6, #0
   15970:	str	r6, [r4, #20]
   15974:	and	r0, r7, #8
   15978:	ldrb	r1, [r4, #28]
   1597c:	and	r1, r1, #239	; 0xef
   15980:	orr	r0, r1, r0, lsl #1
   15984:	strb	r0, [r4, #28]
   15988:	mov	r0, r8
   1598c:	bl	11658 <strlen@plt>
   15990:	mov	r2, r0
   15994:	mov	r0, r4
   15998:	mov	r1, r8
   1599c:	mov	r3, r5
   159a0:	bl	152d0 <__assert_fail@plt+0x3b28>
   159a4:	mov	r5, r0
   159a8:	cmp	r0, #16
   159ac:	movweq	r5, #8
   159b0:	cmp	r5, #0
   159b4:	bne	159d4 <__assert_fail@plt+0x422c>
   159b8:	mov	r0, r4
   159bc:	bl	154d0 <__assert_fail@plt+0x3d28>
   159c0:	mov	r0, r6
   159c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159c8:	mov	r6, #12
   159cc:	mov	r0, r6
   159d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159d4:	ldr	r0, [r4, #16]
   159d8:	bl	13140 <__assert_fail@plt+0x1998>
   159dc:	str	r6, [r4, #16]
   159e0:	mov	r0, r5
   159e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159e8:	push	{r4, r5, r6, r7, fp, lr}
   159ec:	add	fp, sp, #16
   159f0:	cmp	r0, #17
   159f4:	bcs	15a68 <__assert_fail@plt+0x42c0>
   159f8:	mov	r5, r3
   159fc:	mov	r4, r2
   15a00:	movw	r1, #17152	; 0x4300
   15a04:	movt	r1, #2
   15a08:	ldr	r0, [r1, r0, lsl #2]
   15a0c:	movw	r1, #16768	; 0x4180
   15a10:	movt	r1, #2
   15a14:	add	r1, r1, r0
   15a18:	mov	r0, #0
   15a1c:	mov	r2, #5
   15a20:	bl	11514 <dcgettext@plt>
   15a24:	mov	r6, r0
   15a28:	bl	11658 <strlen@plt>
   15a2c:	add	r7, r0, #1
   15a30:	cmp	r5, #0
   15a34:	beq	15a50 <__assert_fail@plt+0x42a8>
   15a38:	cmp	r7, r5
   15a3c:	mov	r2, r7
   15a40:	bhi	15a58 <__assert_fail@plt+0x42b0>
   15a44:	mov	r0, r4
   15a48:	mov	r1, r6
   15a4c:	bl	114cc <memcpy@plt>
   15a50:	mov	r0, r7
   15a54:	pop	{r4, r5, r6, r7, fp, pc}
   15a58:	sub	r2, r5, #1
   15a5c:	mov	r0, #0
   15a60:	strb	r0, [r4, r2]
   15a64:	b	15a44 <__assert_fail@plt+0x429c>
   15a68:	bl	11784 <abort@plt>
   15a6c:	push	{r4, r5, fp, lr}
   15a70:	add	fp, sp, #8
   15a74:	mov	r4, r0
   15a78:	ldr	r5, [r0]
   15a7c:	cmp	r5, #0
   15a80:	beq	15aac <__assert_fail@plt+0x4304>
   15a84:	movw	r0, #0
   15a88:	movt	r0, #0
   15a8c:	movw	r1, #0
   15a90:	movt	r1, #0
   15a94:	orrs	r0, r1, r0
   15a98:	beq	15aa4 <__assert_fail@plt+0x42fc>
   15a9c:	add	r0, r5, #136	; 0x88
   15aa0:	bl	11478 <pthread_mutex_destroy@plt>
   15aa4:	mov	r0, r5
   15aa8:	bl	15ad4 <__assert_fail@plt+0x432c>
   15aac:	mov	r5, #0
   15ab0:	str	r5, [r4]
   15ab4:	str	r5, [r4, #4]
   15ab8:	ldr	r0, [r4, #16]
   15abc:	bl	13140 <__assert_fail@plt+0x1998>
   15ac0:	str	r5, [r4, #16]
   15ac4:	ldr	r0, [r4, #20]
   15ac8:	bl	13140 <__assert_fail@plt+0x1998>
   15acc:	str	r5, [r4, #20]
   15ad0:	pop	{r4, r5, fp, pc}
   15ad4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ad8:	add	fp, sp, #24
   15adc:	mov	r8, r0
   15ae0:	ldr	r0, [r0]
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b20 <__assert_fail@plt+0x4378>
   15aec:	ldr	r0, [r8, #8]
   15af0:	cmp	r0, #0
   15af4:	beq	15b20 <__assert_fail@plt+0x4378>
   15af8:	mov	r5, #0
   15afc:	mov	r6, #0
   15b00:	ldr	r0, [r8]
   15b04:	add	r0, r0, r5
   15b08:	bl	168f8 <__assert_fail@plt+0x5150>
   15b0c:	add	r5, r5, #8
   15b10:	add	r6, r6, #1
   15b14:	ldr	r0, [r8, #8]
   15b18:	cmp	r6, r0
   15b1c:	bcc	15b00 <__assert_fail@plt+0x4358>
   15b20:	ldr	r0, [r8, #12]
   15b24:	bl	13140 <__assert_fail@plt+0x1998>
   15b28:	ldr	r0, [r8, #8]
   15b2c:	cmp	r0, #0
   15b30:	beq	15b94 <__assert_fail@plt+0x43ec>
   15b34:	mov	r5, #0
   15b38:	mov	r6, #8
   15b3c:	b	15b54 <__assert_fail@plt+0x43ac>
   15b40:	add	r6, r6, #12
   15b44:	add	r5, r5, #1
   15b48:	ldr	r0, [r8, #8]
   15b4c:	cmp	r5, r0
   15b50:	bcs	15b94 <__assert_fail@plt+0x43ec>
   15b54:	ldr	r0, [r8, #24]
   15b58:	cmp	r0, #0
   15b5c:	beq	15b68 <__assert_fail@plt+0x43c0>
   15b60:	ldr	r0, [r0, r6]
   15b64:	bl	13140 <__assert_fail@plt+0x1998>
   15b68:	ldr	r0, [r8, #28]
   15b6c:	cmp	r0, #0
   15b70:	beq	15b7c <__assert_fail@plt+0x43d4>
   15b74:	ldr	r0, [r0, r6]
   15b78:	bl	13140 <__assert_fail@plt+0x1998>
   15b7c:	ldr	r0, [r8, #20]
   15b80:	cmp	r0, #0
   15b84:	beq	15b40 <__assert_fail@plt+0x4398>
   15b88:	ldr	r0, [r0, r6]
   15b8c:	bl	13140 <__assert_fail@plt+0x1998>
   15b90:	b	15b40 <__assert_fail@plt+0x4398>
   15b94:	ldr	r0, [r8, #20]
   15b98:	bl	13140 <__assert_fail@plt+0x1998>
   15b9c:	ldr	r0, [r8, #24]
   15ba0:	bl	13140 <__assert_fail@plt+0x1998>
   15ba4:	ldr	r0, [r8, #28]
   15ba8:	bl	13140 <__assert_fail@plt+0x1998>
   15bac:	ldr	r0, [r8]
   15bb0:	bl	13140 <__assert_fail@plt+0x1998>
   15bb4:	ldr	r0, [r8, #32]
   15bb8:	cmp	r0, #0
   15bbc:	beq	15c20 <__assert_fail@plt+0x4478>
   15bc0:	mov	r5, #0
   15bc4:	b	15be4 <__assert_fail@plt+0x443c>
   15bc8:	ldr	r0, [r7]
   15bcc:	bl	13140 <__assert_fail@plt+0x1998>
   15bd0:	add	r0, r5, #1
   15bd4:	ldr	r1, [r8, #68]	; 0x44
   15bd8:	cmp	r5, r1
   15bdc:	mov	r5, r0
   15be0:	bcs	15c20 <__assert_fail@plt+0x4478>
   15be4:	ldr	r6, [r8, #32]
   15be8:	add	r0, r5, r5, lsl #1
   15bec:	ldr	r0, [r6, r0, lsl #2]!
   15bf0:	add	r7, r6, #8
   15bf4:	cmp	r0, #1
   15bf8:	blt	15bc8 <__assert_fail@plt+0x4420>
   15bfc:	mov	r4, #0
   15c00:	ldr	r0, [r7]
   15c04:	ldr	r0, [r0, r4, lsl #2]
   15c08:	bl	16928 <__assert_fail@plt+0x5180>
   15c0c:	add	r4, r4, #1
   15c10:	ldr	r0, [r6]
   15c14:	cmp	r4, r0
   15c18:	blt	15c00 <__assert_fail@plt+0x4458>
   15c1c:	b	15bc8 <__assert_fail@plt+0x4420>
   15c20:	ldr	r0, [r8, #32]
   15c24:	bl	13140 <__assert_fail@plt+0x1998>
   15c28:	ldr	r0, [r8, #60]	; 0x3c
   15c2c:	movw	r1, #17220	; 0x4344
   15c30:	movt	r1, #2
   15c34:	cmp	r0, r1
   15c38:	beq	15c40 <__assert_fail@plt+0x4498>
   15c3c:	bl	13140 <__assert_fail@plt+0x1998>
   15c40:	ldr	r0, [r8, #132]	; 0x84
   15c44:	bl	13140 <__assert_fail@plt+0x1998>
   15c48:	mov	r0, r8
   15c4c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c50:	b	13140 <__assert_fail@plt+0x1998>
   15c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c58:	add	fp, sp, #28
   15c5c:	sub	sp, sp, #28
   15c60:	mov	r7, #2
   15c64:	ldr	sl, [fp, #8]
   15c68:	cmp	sl, #7
   15c6c:	bhi	15d40 <__assert_fail@plt+0x4598>
   15c70:	mov	r6, r3
   15c74:	mov	r9, r2
   15c78:	mov	r4, r1
   15c7c:	mov	r5, r0
   15c80:	ldr	r0, [r0]
   15c84:	str	r0, [sp, #24]
   15c88:	tst	sl, #4
   15c8c:	bne	15ca4 <__assert_fail@plt+0x44fc>
   15c90:	mov	r0, r4
   15c94:	bl	11658 <strlen@plt>
   15c98:	mov	r7, r0
   15c9c:	mov	r8, #0
   15ca0:	b	15cac <__assert_fail@plt+0x4504>
   15ca4:	ldr	r8, [r6]
   15ca8:	ldr	r7, [r6, #4]
   15cac:	movw	r0, #0
   15cb0:	movt	r0, #0
   15cb4:	movw	r1, #0
   15cb8:	movt	r1, #0
   15cbc:	orrs	r0, r1, r0
   15cc0:	str	r0, [sp, #20]
   15cc4:	beq	15cd4 <__assert_fail@plt+0x452c>
   15cc8:	ldr	r0, [sp, #24]
   15ccc:	add	r0, r0, #136	; 0x88
   15cd0:	bl	114b4 <pthread_mutex_lock@plt>
   15cd4:	ldrb	r0, [r5, #28]
   15cd8:	tst	r0, #16
   15cdc:	bne	15cf0 <__assert_fail@plt+0x4548>
   15ce0:	str	r7, [sp]
   15ce4:	stmib	sp, {r7, r9}
   15ce8:	str	r6, [sp, #12]
   15cec:	b	15d04 <__assert_fail@plt+0x455c>
   15cf0:	mov	r0, #0
   15cf4:	str	r7, [sp]
   15cf8:	str	r7, [sp, #4]
   15cfc:	str	r0, [sp, #8]
   15d00:	str	r0, [sp, #12]
   15d04:	str	sl, [sp, #16]
   15d08:	mov	r0, r5
   15d0c:	mov	r1, r4
   15d10:	mov	r2, r7
   15d14:	mov	r3, r8
   15d18:	bl	15d4c <__assert_fail@plt+0x45a4>
   15d1c:	mov	r7, r0
   15d20:	ldr	r0, [sp, #20]
   15d24:	cmp	r0, #0
   15d28:	beq	15d38 <__assert_fail@plt+0x4590>
   15d2c:	ldr	r0, [sp, #24]
   15d30:	add	r0, r0, #136	; 0x88
   15d34:	bl	1140c <pthread_mutex_unlock@plt>
   15d38:	cmp	r7, #0
   15d3c:	movwne	r7, #1
   15d40:	mov	r0, r7
   15d44:	sub	sp, fp, #28
   15d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d50:	add	fp, sp, #28
   15d54:	sub	sp, sp, #196	; 0xc4
   15d58:	mov	r6, r3
   15d5c:	str	r2, [sp, #52]	; 0x34
   15d60:	str	r1, [sp, #40]	; 0x28
   15d64:	mov	r4, r0
   15d68:	ldr	sl, [r0]
   15d6c:	add	r0, sp, #56	; 0x38
   15d70:	mov	r7, #0
   15d74:	mov	r1, #0
   15d78:	mov	r2, #136	; 0x88
   15d7c:	bl	116ac <memset@plt>
   15d80:	str	sl, [sp, #140]	; 0x8c
   15d84:	ldr	r1, [r4, #16]
   15d88:	ldr	r0, [fp, #16]
   15d8c:	ldr	ip, [fp, #8]
   15d90:	cmp	r1, #0
   15d94:	mov	r5, #0
   15d98:	beq	15db4 <__assert_fail@plt+0x460c>
   15d9c:	ldrb	r2, [r4, #28]
   15da0:	and	r2, r2, #9
   15da4:	cmp	r2, #8
   15da8:	movne	r1, #0
   15dac:	subs	r5, r6, ip
   15db0:	movne	r5, r1
   15db4:	str	r6, [sp, #36]	; 0x24
   15db8:	ldr	r1, [r4, #8]
   15dbc:	ldr	r2, [r4, #24]
   15dc0:	mvn	r3, r2
   15dc4:	cmp	r2, r0
   15dc8:	addcc	r7, r3, r0
   15dcc:	mov	r8, #1
   15dd0:	cmp	r1, #0
   15dd4:	beq	162bc <__assert_fail@plt+0x4b14>
   15dd8:	ldr	r1, [sl, #36]	; 0x24
   15ddc:	cmp	r1, #0
   15de0:	ldrne	r2, [sl, #40]	; 0x28
   15de4:	cmpne	r2, #0
   15de8:	beq	162bc <__assert_fail@plt+0x4b14>
   15dec:	ldr	r3, [sl, #44]	; 0x2c
   15df0:	cmp	r3, #0
   15df4:	ldrne	r6, [sl, #48]	; 0x30
   15df8:	cmpne	r6, #0
   15dfc:	beq	162bc <__assert_fail@plt+0x4b14>
   15e00:	ldr	r6, [r4, #20]
   15e04:	ldr	r1, [r1, #8]
   15e08:	cmp	r1, #0
   15e0c:	bne	15e1c <__assert_fail@plt+0x4674>
   15e10:	ldr	r1, [r2, #8]
   15e14:	cmp	r1, #0
   15e18:	beq	163f8 <__assert_fail@plt+0x4c50>
   15e1c:	mov	r9, ip
   15e20:	ldr	r0, [fp, #16]
   15e24:	subs	r0, r0, r7
   15e28:	str	r0, [sp, #48]	; 0x30
   15e2c:	mov	r0, #1
   15e30:	str	r0, [sp, #32]
   15e34:	bne	15e48 <__assert_fail@plt+0x46a0>
   15e38:	ldr	r0, [sl, #76]	; 0x4c
   15e3c:	cmp	r0, #0
   15e40:	movwne	r0, #1
   15e44:	str	r0, [sp, #32]
   15e48:	ldr	r0, [sl, #8]
   15e4c:	ldr	r1, [r4, #12]
   15e50:	str	sl, [sp, #8]
   15e54:	str	r6, [sp]
   15e58:	ubfx	r1, r1, #22, #1
   15e5c:	str	r1, [sp, #4]
   15e60:	add	r3, r0, #1
   15e64:	add	r0, sp, #56	; 0x38
   15e68:	ldr	r1, [sp, #40]	; 0x28
   15e6c:	ldr	r2, [sp, #52]	; 0x34
   15e70:	bl	1c674 <__assert_fail@plt+0xaecc>
   15e74:	cmp	r0, #0
   15e78:	bne	164dc <__assert_fail@plt+0x4d34>
   15e7c:	ldr	r1, [fp, #24]
   15e80:	ldr	r0, [fp, #12]
   15e84:	str	r0, [sp, #108]	; 0x6c
   15e88:	str	r0, [sp, #112]	; 0x70
   15e8c:	str	r4, [sp, #28]
   15e90:	ldrb	r0, [r4, #28]
   15e94:	lsr	r0, r0, #7
   15e98:	strb	r0, [sp, #133]	; 0x85
   15e9c:	ldr	r0, [sl, #76]	; 0x4c
   15ea0:	lsl	r2, r0, #1
   15ea4:	add	r0, sp, #56	; 0x38
   15ea8:	bl	1c724 <__assert_fail@plt+0xaf7c>
   15eac:	cmp	r0, #0
   15eb0:	bne	164dc <__assert_fail@plt+0x4d34>
   15eb4:	ldr	r0, [sp, #48]	; 0x30
   15eb8:	cmp	r0, #1
   15ebc:	bhi	15ecc <__assert_fail@plt+0x4724>
   15ec0:	ldrb	r0, [sl, #88]	; 0x58
   15ec4:	tst	r0, #2
   15ec8:	beq	15ef4 <__assert_fail@plt+0x474c>
   15ecc:	mov	r8, #12
   15ed0:	ldr	r0, [sp, #92]	; 0x5c
   15ed4:	cmn	r0, #-1073741822	; 0xc0000002
   15ed8:	bhi	1629c <__assert_fail@plt+0x4af4>
   15edc:	mov	r1, #4
   15ee0:	add	r0, r1, r0, lsl #2
   15ee4:	bl	22ab8 <__assert_fail@plt+0x11310>
   15ee8:	str	r0, [sp, #156]	; 0x9c
   15eec:	cmp	r0, #0
   15ef0:	beq	1629c <__assert_fail@plt+0x4af4>
   15ef4:	str	r7, [sp, #12]
   15ef8:	ldr	r7, [sp, #36]	; 0x24
   15efc:	str	r7, [fp, #-32]	; 0xffffffe0
   15f00:	mov	r0, #4
   15f04:	ldr	r1, [fp, #24]
   15f08:	tst	r1, #1
   15f0c:	mov	r1, #4
   15f10:	movweq	r1, #6
   15f14:	str	r1, [sp, #116]	; 0x74
   15f18:	cmp	r9, r7
   15f1c:	mov	r3, #1
   15f20:	mvnlt	r3, #0
   15f24:	mov	r4, r9
   15f28:	movlt	r4, r7
   15f2c:	mov	r1, sl
   15f30:	mov	sl, r7
   15f34:	movlt	sl, r9
   15f38:	str	r1, [sp, #44]	; 0x2c
   15f3c:	ldr	ip, [r1, #92]	; 0x5c
   15f40:	cmp	r5, #0
   15f44:	beq	15f8c <__assert_fail@plt+0x47e4>
   15f48:	cmp	ip, #1
   15f4c:	ldr	r2, [sp, #52]	; 0x34
   15f50:	beq	15f70 <__assert_fail@plt+0x47c8>
   15f54:	ldr	r0, [sp, #28]
   15f58:	ldr	r0, [r0, #12]
   15f5c:	and	r0, r0, #4194304	; 0x400000
   15f60:	orr	r0, r6, r0
   15f64:	clz	r0, r0
   15f68:	lsr	r0, r0, #5
   15f6c:	lsl	r0, r0, #2
   15f70:	cmp	r6, #0
   15f74:	mov	r1, r6
   15f78:	movwne	r1, #1
   15f7c:	cmp	r9, r7
   15f80:	orrge	r1, r1, #2
   15f84:	orr	r0, r1, r0
   15f88:	b	15f94 <__assert_fail@plt+0x47ec>
   15f8c:	mov	r0, #8
   15f90:	ldr	r2, [sp, #52]	; 0x34
   15f94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15f98:	cmp	r1, sl
   15f9c:	cmpge	r4, r1
   15fa0:	blt	16294 <__assert_fail@plt+0x4aec>
   15fa4:	sub	r1, fp, #32
   15fa8:	cmp	r9, r7
   15fac:	movwlt	r1, #0
   15fb0:	str	r1, [sp, #24]
   15fb4:	sub	lr, r0, #4
   15fb8:	add	r9, sp, #56	; 0x38
   15fbc:	str	ip, [sp, #36]	; 0x24
   15fc0:	ldr	r7, [sp, #40]	; 0x28
   15fc4:	str	r3, [sp, #20]
   15fc8:	str	lr, [sp, #16]
   15fcc:	cmp	lr, #4
   15fd0:	bhi	16080 <__assert_fail@plt+0x48d8>
   15fd4:	add	r0, pc, #0
   15fd8:	ldr	pc, [r0, lr, lsl #2]
   15fdc:	strdeq	r5, [r1], -r0
   15fe0:	strdeq	r5, [r1], -r0
   15fe4:	andeq	r6, r1, r0, asr #1
   15fe8:	strdeq	r6, [r1], -r0
   15fec:	andeq	r6, r1, ip, lsr #2
   15ff0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15ff4:	cmp	r0, sl
   15ff8:	blt	16294 <__assert_fail@plt+0x4aec>
   15ffc:	mov	r1, #0
   16000:	cmp	r0, r2
   16004:	ldrblt	r1, [r7, r0]
   16008:	cmp	r6, #0
   1600c:	ldrbne	r1, [r6, r1]
   16010:	ldrb	r1, [r5, r1]
   16014:	cmp	r1, #0
   16018:	bne	1612c <__assert_fail@plt+0x4984>
   1601c:	sub	r1, r0, #1
   16020:	str	r1, [fp, #-32]	; 0xffffffe0
   16024:	cmp	r0, sl
   16028:	mov	r0, r1
   1602c:	bgt	15ffc <__assert_fail@plt+0x4854>
   16030:	b	16294 <__assert_fail@plt+0x4aec>
   16034:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16038:	add	r0, r0, r3
   1603c:	str	r0, [fp, #-32]	; 0xffffffe0
   16040:	cmp	r0, sl
   16044:	blt	16294 <__assert_fail@plt+0x4aec>
   16048:	cmp	r0, r4
   1604c:	ble	16080 <__assert_fail@plt+0x48d8>
   16050:	b	16294 <__assert_fail@plt+0x4aec>
   16054:	mov	r0, r9
   16058:	ldr	r2, [fp, #24]
   1605c:	bl	1c7ac <__assert_fail@plt+0xb004>
   16060:	cmp	r0, #0
   16064:	bne	164e4 <__assert_fail@plt+0x4d3c>
   16068:	ldr	r0, [sp, #80]	; 0x50
   1606c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16070:	sub	r0, r1, r0
   16074:	add	r9, sp, #56	; 0x38
   16078:	ldr	r3, [sp, #20]
   1607c:	b	16098 <__assert_fail@plt+0x48f0>
   16080:	ldr	r0, [sp, #80]	; 0x50
   16084:	ldr	r2, [sp, #88]	; 0x58
   16088:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1608c:	sub	r0, r1, r0
   16090:	cmp	r0, r2
   16094:	bcs	16054 <__assert_fail@plt+0x48ac>
   16098:	mov	r1, #0
   1609c:	ldr	r2, [sp, #84]	; 0x54
   160a0:	cmp	r0, r2
   160a4:	bcs	160b0 <__assert_fail@plt+0x4908>
   160a8:	ldr	r1, [sp, #60]	; 0x3c
   160ac:	ldrb	r1, [r1, r0]
   160b0:	ldrb	r0, [r5, r1]
   160b4:	cmp	r0, #0
   160b8:	beq	16034 <__assert_fail@plt+0x488c>
   160bc:	b	1612c <__assert_fail@plt+0x4984>
   160c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   160c4:	cmp	r0, r4
   160c8:	bge	16120 <__assert_fail@plt+0x4978>
   160cc:	ldrb	r1, [r7, r0]
   160d0:	ldrb	r1, [r5, r1]
   160d4:	cmp	r1, #0
   160d8:	bne	16120 <__assert_fail@plt+0x4978>
   160dc:	add	r0, r0, #1
   160e0:	str	r0, [fp, #-32]	; 0xffffffe0
   160e4:	cmp	r0, r4
   160e8:	blt	160cc <__assert_fail@plt+0x4924>
   160ec:	b	16120 <__assert_fail@plt+0x4978>
   160f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   160f4:	cmp	r0, r4
   160f8:	bge	16120 <__assert_fail@plt+0x4978>
   160fc:	ldrb	r1, [r7, r0]
   16100:	ldrb	r1, [r6, r1]
   16104:	ldrb	r1, [r5, r1]
   16108:	cmp	r1, #0
   1610c:	bne	16120 <__assert_fail@plt+0x4978>
   16110:	add	r0, r0, #1
   16114:	str	r0, [fp, #-32]	; 0xffffffe0
   16118:	cmp	r0, r4
   1611c:	blt	160fc <__assert_fail@plt+0x4954>
   16120:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16124:	cmp	r1, r4
   16128:	beq	16274 <__assert_fail@plt+0x4acc>
   1612c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16130:	mov	r0, r9
   16134:	ldr	r2, [fp, #24]
   16138:	bl	1c7ac <__assert_fail@plt+0xb004>
   1613c:	cmp	r0, #0
   16140:	bne	164e4 <__assert_fail@plt+0x4d3c>
   16144:	ldr	r0, [sp, #36]	; 0x24
   16148:	cmp	r0, #1
   1614c:	add	r9, sp, #56	; 0x38
   16150:	ldrne	r0, [sp, #84]	; 0x54
   16154:	cmpne	r0, #0
   16158:	bne	16260 <__assert_fail@plt+0x4ab8>
   1615c:	mov	r0, #0
   16160:	str	r0, [sp, #164]	; 0xa4
   16164:	str	r0, [sp, #176]	; 0xb0
   16168:	str	r0, [sp, #160]	; 0xa0
   1616c:	mov	r0, r9
   16170:	ldr	r1, [sp, #32]
   16174:	ldr	r2, [sp, #24]
   16178:	bl	1cde4 <__assert_fail@plt+0xb63c>
   1617c:	cmn	r0, #1
   16180:	beq	1622c <__assert_fail@plt+0x4a84>
   16184:	mov	r2, r0
   16188:	cmn	r0, #2
   1618c:	beq	164ec <__assert_fail@plt+0x4d44>
   16190:	str	r2, [sp, #148]	; 0x94
   16194:	ldr	r9, [sp, #48]	; 0x30
   16198:	cmp	r9, #2
   1619c:	bcc	161b0 <__assert_fail@plt+0x4a08>
   161a0:	ldr	r0, [sp, #28]
   161a4:	ldrb	r0, [r0, #28]
   161a8:	ands	r0, r0, #16
   161ac:	beq	161c0 <__assert_fail@plt+0x4a18>
   161b0:	ldr	r0, [sp, #44]	; 0x2c
   161b4:	ldr	r0, [r0, #76]	; 0x4c
   161b8:	cmp	r0, #0
   161bc:	beq	161d4 <__assert_fail@plt+0x4a2c>
   161c0:	ldr	r0, [sp, #156]	; 0x9c
   161c4:	ldr	r1, [r0, r2, lsl #2]
   161c8:	add	r0, sp, #56	; 0x38
   161cc:	bl	1d180 <__assert_fail@plt+0xb9d8>
   161d0:	str	r0, [sp, #152]	; 0x98
   161d4:	cmp	r9, #2
   161d8:	bcc	161fc <__assert_fail@plt+0x4a54>
   161dc:	ldr	r0, [sp, #28]
   161e0:	ldrb	r0, [r0, #28]
   161e4:	ands	r0, r0, #16
   161e8:	bne	161fc <__assert_fail@plt+0x4a54>
   161ec:	ldr	r0, [sp, #44]	; 0x2c
   161f0:	ldrb	r0, [r0, #88]	; 0x58
   161f4:	tst	r0, #1
   161f8:	bne	1620c <__assert_fail@plt+0x4a64>
   161fc:	ldr	r0, [sp, #44]	; 0x2c
   16200:	ldr	r0, [r0, #76]	; 0x4c
   16204:	cmp	r0, #0
   16208:	beq	162c8 <__assert_fail@plt+0x4b20>
   1620c:	add	r0, sp, #56	; 0x38
   16210:	bl	1d1f4 <__assert_fail@plt+0xba4c>
   16214:	cmp	r0, #0
   16218:	beq	162c8 <__assert_fail@plt+0x4b20>
   1621c:	mov	r8, r0
   16220:	cmp	r0, #1
   16224:	add	r9, sp, #56	; 0x38
   16228:	bne	16298 <__assert_fail@plt+0x4af0>
   1622c:	mov	r0, r9
   16230:	bl	1d418 <__assert_fail@plt+0xbc70>
   16234:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16238:	ldr	r3, [sp, #20]
   1623c:	add	r0, r0, r3
   16240:	str	r0, [fp, #-32]	; 0xffffffe0
   16244:	cmp	r0, sl
   16248:	blt	16294 <__assert_fail@plt+0x4aec>
   1624c:	cmp	r4, r0
   16250:	ldr	r2, [sp, #52]	; 0x34
   16254:	ldr	lr, [sp, #16]
   16258:	bge	15fcc <__assert_fail@plt+0x4824>
   1625c:	b	16294 <__assert_fail@plt+0x4aec>
   16260:	ldr	r0, [sp, #64]	; 0x40
   16264:	ldr	r0, [r0]
   16268:	cmn	r0, #1
   1626c:	bne	1615c <__assert_fail@plt+0x49b4>
   16270:	b	16234 <__assert_fail@plt+0x4a8c>
   16274:	mov	r0, #0
   16278:	cmp	r1, r2
   1627c:	ldrblt	r0, [r7, r1]
   16280:	cmp	r6, #0
   16284:	ldrbne	r0, [r6, r0]
   16288:	ldrb	r0, [r5, r0]
   1628c:	cmp	r0, #0
   16290:	bne	1612c <__assert_fail@plt+0x4984>
   16294:	mov	r8, #1
   16298:	ldr	sl, [sp, #44]	; 0x2c
   1629c:	ldr	r0, [sp, #156]	; 0x9c
   162a0:	bl	13140 <__assert_fail@plt+0x1998>
   162a4:	ldr	r0, [sl, #76]	; 0x4c
   162a8:	cmp	r0, #0
   162ac:	addne	r0, sp, #56	; 0x38
   162b0:	blne	1d70c <__assert_fail@plt+0xbf64>
   162b4:	add	r0, sp, #56	; 0x38
   162b8:	bl	16d1c <__assert_fail@plt+0x5574>
   162bc:	mov	r0, r8
   162c0:	sub	sp, fp, #28
   162c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162c8:	ldr	r5, [sp, #48]	; 0x30
   162cc:	cmp	r5, #0
   162d0:	beq	164c0 <__assert_fail@plt+0x4d18>
   162d4:	cmp	r5, #1
   162d8:	ldr	sl, [sp, #44]	; 0x2c
   162dc:	ldr	r4, [sp, #12]
   162e0:	ldr	r6, [fp, #16]
   162e4:	mov	r9, r6
   162e8:	ldr	r6, [fp, #20]
   162ec:	beq	16308 <__assert_fail@plt+0x4b60>
   162f0:	mvn	r0, r4
   162f4:	add	r0, r0, r9
   162f8:	lsl	r2, r0, #3
   162fc:	add	r0, r6, #8
   16300:	mov	r1, #255	; 0xff
   16304:	bl	116ac <memset@plt>
   16308:	mov	r0, #0
   1630c:	ldr	r1, [sp, #148]	; 0x94
   16310:	stm	r6, {r0, r1}
   16314:	cmp	r5, #2
   16318:	ldr	r0, [sp, #28]
   1631c:	bcc	16368 <__assert_fail@plt+0x4bc0>
   16320:	ldrb	r1, [r0, #28]
   16324:	ands	r1, r1, #16
   16328:	bne	16368 <__assert_fail@plt+0x4bc0>
   1632c:	ldrb	r1, [sl, #88]	; 0x58
   16330:	mov	r2, #0
   16334:	tst	r1, #1
   16338:	beq	1634c <__assert_fail@plt+0x4ba4>
   1633c:	ldr	r1, [sl, #76]	; 0x4c
   16340:	mov	r2, #0
   16344:	cmp	r1, #0
   16348:	movwgt	r2, #1
   1634c:	str	r2, [sp]
   16350:	add	r1, sp, #56	; 0x38
   16354:	ldr	r2, [sp, #48]	; 0x30
   16358:	mov	r3, r6
   1635c:	bl	1d4c8 <__assert_fail@plt+0xbd20>
   16360:	cmp	r0, #0
   16364:	bne	164dc <__assert_fail@plt+0x4d34>
   16368:	add	r0, r6, #4
   1636c:	add	r1, sp, #56	; 0x38
   16370:	add	lr, r1, #32
   16374:	ldrb	r2, [sp, #132]	; 0x84
   16378:	mov	r3, r9
   1637c:	ldr	r6, [sp, #48]	; 0x30
   16380:	b	163a8 <__assert_fail@plt+0x4c00>
   16384:	ldmda	r0, {r1, r7}
   16388:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1638c:	add	r1, r1, r5
   16390:	add	r7, r7, r5
   16394:	stmda	r0, {r1, r7}
   16398:	add	r0, r0, #8
   1639c:	sub	r3, r3, #1
   163a0:	cmp	r4, r3
   163a4:	beq	16434 <__assert_fail@plt+0x4c8c>
   163a8:	ldr	r7, [r0, #-4]
   163ac:	cmn	r7, #1
   163b0:	beq	16398 <__assert_fail@plt+0x4bf0>
   163b4:	cmp	r2, #0
   163b8:	beq	16384 <__assert_fail@plt+0x4bdc>
   163bc:	ldr	ip, [sp, #68]	; 0x44
   163c0:	ldr	r5, [sp, #84]	; 0x54
   163c4:	cmp	r7, r5
   163c8:	mov	r1, lr
   163cc:	addne	r1, ip, r7, lsl #2
   163d0:	ldr	r1, [r1]
   163d4:	str	r1, [r0, #-4]
   163d8:	ldr	r1, [r0]
   163dc:	cmp	r1, r5
   163e0:	mov	r4, lr
   163e4:	addne	r4, ip, r1, lsl #2
   163e8:	ldr	r1, [r4]
   163ec:	ldr	r4, [sp, #12]
   163f0:	str	r1, [r0]
   163f4:	b	16384 <__assert_fail@plt+0x4bdc>
   163f8:	ldr	r1, [r3, #8]
   163fc:	cmp	r1, #0
   16400:	beq	16410 <__assert_fail@plt+0x4c68>
   16404:	ldrsb	r1, [r4, #28]
   16408:	cmp	r1, #0
   1640c:	bmi	15e1c <__assert_fail@plt+0x4674>
   16410:	mov	r9, #0
   16414:	ldr	r0, [sp, #36]	; 0x24
   16418:	cmp	r0, #0
   1641c:	beq	164d0 <__assert_fail@plt+0x4d28>
   16420:	cmp	ip, #0
   16424:	mov	r0, #0
   16428:	str	r0, [sp, #36]	; 0x24
   1642c:	bne	162bc <__assert_fail@plt+0x4b14>
   16430:	b	15e20 <__assert_fail@plt+0x4678>
   16434:	cmp	r4, #0
   16438:	ble	16450 <__assert_fail@plt+0x4ca8>
   1643c:	ldr	r0, [fp, #20]
   16440:	add	r0, r0, r6, lsl #3
   16444:	lsl	r2, r4, #3
   16448:	mov	r1, #255	; 0xff
   1644c:	bl	116ac <memset@plt>
   16450:	ldr	r0, [sl, #132]	; 0x84
   16454:	mov	r8, #0
   16458:	cmp	r0, #0
   1645c:	beq	1629c <__assert_fail@plt+0x4af4>
   16460:	ldr	r1, [sp, #48]	; 0x30
   16464:	cmp	r1, #2
   16468:	bcc	1629c <__assert_fail@plt+0x4af4>
   1646c:	mov	r6, r9
   16470:	mvn	r1, r4
   16474:	add	r1, r1, r9
   16478:	mov	r2, #0
   1647c:	ldr	r6, [fp, #20]
   16480:	b	16490 <__assert_fail@plt+0x4ce8>
   16484:	add	r2, r2, #1
   16488:	cmp	r1, r2
   1648c:	beq	164c8 <__assert_fail@plt+0x4d20>
   16490:	ldr	r3, [r0, r2, lsl #2]
   16494:	cmp	r2, r3
   16498:	beq	16484 <__assert_fail@plt+0x4cdc>
   1649c:	add	r7, r6, r2, lsl #3
   164a0:	add	r3, r6, r3, lsl #3
   164a4:	ldr	r3, [r3, #8]
   164a8:	str	r3, [r7, #8]
   164ac:	ldr	r3, [r0, r2, lsl #2]
   164b0:	add	r3, r6, r3, lsl #3
   164b4:	ldr	r3, [r3, #12]
   164b8:	str	r3, [r7, #12]
   164bc:	b	16484 <__assert_fail@plt+0x4cdc>
   164c0:	mov	r8, #0
   164c4:	b	16298 <__assert_fail@plt+0x4af0>
   164c8:	mov	r8, #0
   164cc:	b	1629c <__assert_fail@plt+0x4af4>
   164d0:	mov	r0, #0
   164d4:	str	r0, [sp, #36]	; 0x24
   164d8:	b	15e20 <__assert_fail@plt+0x4678>
   164dc:	mov	r8, r0
   164e0:	b	1629c <__assert_fail@plt+0x4af4>
   164e4:	mov	r8, r0
   164e8:	b	16298 <__assert_fail@plt+0x4af0>
   164ec:	mov	r8, #12
   164f0:	b	16298 <__assert_fail@plt+0x4af0>
   164f4:	push	{fp, lr}
   164f8:	mov	fp, sp
   164fc:	sub	sp, sp, #16
   16500:	mov	ip, #1
   16504:	str	ip, [sp, #12]
   16508:	str	r2, [sp, #4]
   1650c:	mov	ip, #0
   16510:	str	ip, [sp]
   16514:	ldr	ip, [fp, #8]
   16518:	str	ip, [sp, #8]
   1651c:	bl	16528 <__assert_fail@plt+0x4d80>
   16520:	mov	sp, fp
   16524:	pop	{fp, pc}
   16528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1652c:	add	fp, sp, #28
   16530:	sub	sp, sp, #36	; 0x24
   16534:	mvn	r7, #0
   16538:	cmp	r3, #0
   1653c:	bmi	16680 <__assert_fail@plt+0x4ed8>
   16540:	mov	r9, r3
   16544:	mov	r6, r2
   16548:	cmp	r3, r2
   1654c:	bgt	16680 <__assert_fail@plt+0x4ed8>
   16550:	mov	r5, r0
   16554:	str	r1, [sp, #28]
   16558:	ldr	r0, [fp, #8]
   1655c:	add	r0, r0, r9
   16560:	ldr	r4, [r5]
   16564:	cmp	r0, r6
   16568:	mov	r8, r6
   1656c:	bicle	r8, r0, r0, asr #31
   16570:	movw	r0, #0
   16574:	movt	r0, #0
   16578:	movw	r1, #0
   1657c:	movt	r1, #0
   16580:	orrs	r0, r1, r0
   16584:	str	r0, [sp, #32]
   16588:	beq	16594 <__assert_fail@plt+0x4dec>
   1658c:	add	r0, r4, #136	; 0x88
   16590:	bl	114b4 <pthread_mutex_lock@plt>
   16594:	str	r4, [sp, #20]
   16598:	ldr	r4, [fp, #16]
   1659c:	ldrb	r0, [r5, #28]
   165a0:	ubfx	r1, r0, #5, #2
   165a4:	str	r1, [sp, #24]
   165a8:	cmp	r8, r9
   165ac:	ble	165c8 <__assert_fail@plt+0x4e20>
   165b0:	tst	r0, #8
   165b4:	bne	165c8 <__assert_fail@plt+0x4e20>
   165b8:	ldr	r0, [r5, #16]
   165bc:	cmp	r0, #0
   165c0:	movne	r0, r5
   165c4:	blne	154d0 <__assert_fail@plt+0x3d28>
   165c8:	mov	r7, #1
   165cc:	mov	sl, #0
   165d0:	cmp	r4, #0
   165d4:	beq	1660c <__assert_fail@plt+0x4e64>
   165d8:	ldrb	r0, [r5, #28]
   165dc:	ands	r1, r0, #16
   165e0:	bne	1660c <__assert_fail@plt+0x4e64>
   165e4:	and	r0, r0, #6
   165e8:	cmp	r0, #4
   165ec:	bne	16600 <__assert_fail@plt+0x4e58>
   165f0:	ldr	r7, [r4]
   165f4:	ldr	r0, [r5, #24]
   165f8:	cmp	r7, r0
   165fc:	bls	166f4 <__assert_fail@plt+0x4f4c>
   16600:	ldr	r0, [r5, #24]
   16604:	add	r7, r0, #1
   16608:	mov	sl, r4
   1660c:	lsl	r0, r7, #3
   16610:	bl	22ab8 <__assert_fail@plt+0x11310>
   16614:	cmp	r0, #0
   16618:	beq	166ec <__assert_fail@plt+0x4f44>
   1661c:	mov	r4, r0
   16620:	ldr	r0, [fp, #12]
   16624:	str	r8, [sp]
   16628:	stmib	sp, {r0, r7}
   1662c:	str	r4, [sp, #12]
   16630:	ldr	r0, [sp, #24]
   16634:	str	r0, [sp, #16]
   16638:	mov	r0, r5
   1663c:	ldr	r1, [sp, #28]
   16640:	mov	r2, r6
   16644:	mov	r3, r9
   16648:	bl	15d4c <__assert_fail@plt+0x45a4>
   1664c:	cmp	r0, #0
   16650:	beq	1668c <__assert_fail@plt+0x4ee4>
   16654:	mvn	r7, #1
   16658:	cmp	r0, #1
   1665c:	mvneq	r7, #0
   16660:	mov	r0, r4
   16664:	bl	13140 <__assert_fail@plt+0x1998>
   16668:	ldr	r0, [sp, #32]
   1666c:	cmp	r0, #0
   16670:	beq	16680 <__assert_fail@plt+0x4ed8>
   16674:	ldr	r0, [sp, #20]
   16678:	add	r0, r0, #136	; 0x88
   1667c:	bl	1140c <pthread_mutex_unlock@plt>
   16680:	mov	r0, r7
   16684:	sub	sp, fp, #28
   16688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1668c:	cmp	sl, #0
   16690:	beq	166c4 <__assert_fail@plt+0x4f1c>
   16694:	ldrb	r0, [r5, #28]
   16698:	ubfx	r3, r0, #1, #2
   1669c:	mov	r0, sl
   166a0:	mov	r1, r4
   166a4:	mov	r2, r7
   166a8:	bl	1c510 <__assert_fail@plt+0xad68>
   166ac:	ldrb	r1, [r5, #28]
   166b0:	and	r1, r1, #249	; 0xf9
   166b4:	bfi	r1, r0, #1, #2
   166b8:	strb	r1, [r5, #28]
   166bc:	tst	r0, #3
   166c0:	beq	166e4 <__assert_fail@plt+0x4f3c>
   166c4:	ldr	r0, [fp, #20]
   166c8:	cmp	r0, #0
   166cc:	beq	166dc <__assert_fail@plt+0x4f34>
   166d0:	ldr	r0, [r4, #4]
   166d4:	sub	r7, r0, r9
   166d8:	b	16660 <__assert_fail@plt+0x4eb8>
   166dc:	ldr	r7, [r4]
   166e0:	b	16660 <__assert_fail@plt+0x4eb8>
   166e4:	mvn	r7, #1
   166e8:	b	16660 <__assert_fail@plt+0x4eb8>
   166ec:	mvn	r7, #1
   166f0:	b	16668 <__assert_fail@plt+0x4ec0>
   166f4:	cmp	r7, #1
   166f8:	bge	16608 <__assert_fail@plt+0x4e60>
   166fc:	mov	r7, #1
   16700:	mov	sl, #0
   16704:	b	1660c <__assert_fail@plt+0x4e64>
   16708:	push	{fp, lr}
   1670c:	mov	fp, sp
   16710:	sub	sp, sp, #16
   16714:	mov	ip, #0
   16718:	str	ip, [sp, #12]
   1671c:	str	r2, [sp, #4]
   16720:	ldr	ip, [fp, #12]
   16724:	str	ip, [sp, #8]
   16728:	ldr	ip, [fp, #8]
   1672c:	str	ip, [sp]
   16730:	bl	16528 <__assert_fail@plt+0x4d80>
   16734:	mov	sp, fp
   16738:	pop	{fp, pc}
   1673c:	push	{fp, lr}
   16740:	mov	fp, sp
   16744:	sub	sp, sp, #24
   16748:	mov	ip, #1
   1674c:	str	ip, [sp, #20]
   16750:	mov	ip, #0
   16754:	str	ip, [sp, #8]
   16758:	ldr	ip, [fp, #20]
   1675c:	str	ip, [sp, #16]
   16760:	ldr	ip, [fp, #16]
   16764:	str	ip, [sp, #12]
   16768:	ldr	ip, [fp, #12]
   1676c:	str	ip, [sp, #4]
   16770:	ldr	ip, [fp, #8]
   16774:	str	ip, [sp]
   16778:	bl	16784 <__assert_fail@plt+0x4fdc>
   1677c:	mov	sp, fp
   16780:	pop	{fp, pc}
   16784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16788:	add	fp, sp, #28
   1678c:	sub	sp, sp, #20
   16790:	mov	r6, r2
   16794:	mov	r8, r1
   16798:	mov	r1, r0
   1679c:	ldr	r4, [fp, #8]
   167a0:	orr	r0, r4, r2
   167a4:	ldr	r2, [fp, #24]
   167a8:	orrs	r0, r0, r2
   167ac:	bmi	16860 <__assert_fail@plt+0x50b8>
   167b0:	adds	sl, r6, r4
   167b4:	bvs	16860 <__assert_fail@plt+0x50b8>
   167b8:	mov	r5, #0
   167bc:	cmp	r4, #1
   167c0:	blt	16814 <__assert_fail@plt+0x506c>
   167c4:	mov	r9, r3
   167c8:	cmp	r6, #1
   167cc:	blt	1681c <__assert_fail@plt+0x5074>
   167d0:	mov	r0, sl
   167d4:	mov	r5, r1
   167d8:	bl	22ab8 <__assert_fail@plt+0x11310>
   167dc:	cmp	r0, #0
   167e0:	beq	16860 <__assert_fail@plt+0x50b8>
   167e4:	mov	r7, r0
   167e8:	mov	r1, r8
   167ec:	mov	r2, r6
   167f0:	bl	114cc <memcpy@plt>
   167f4:	add	r0, r7, r6
   167f8:	mov	r1, r9
   167fc:	mov	r2, r4
   16800:	bl	114cc <memcpy@plt>
   16804:	ldr	r2, [fp, #24]
   16808:	mov	r1, r5
   1680c:	mov	r5, r7
   16810:	b	16820 <__assert_fail@plt+0x5078>
   16814:	mov	r7, r8
   16818:	b	16820 <__assert_fail@plt+0x5078>
   1681c:	mov	r7, r9
   16820:	ldr	r0, [fp, #28]
   16824:	add	r6, fp, #12
   16828:	ldm	r6, {r3, r4, r6}
   1682c:	str	r4, [sp]
   16830:	stmib	sp, {r2, r6}
   16834:	str	r0, [sp, #12]
   16838:	mov	r0, r1
   1683c:	mov	r1, r7
   16840:	mov	r2, sl
   16844:	bl	16528 <__assert_fail@plt+0x4d80>
   16848:	mov	r4, r0
   1684c:	mov	r0, r5
   16850:	bl	13140 <__assert_fail@plt+0x1998>
   16854:	mov	r0, r4
   16858:	sub	sp, fp, #28
   1685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16860:	mvn	r0, #1
   16864:	sub	sp, fp, #28
   16868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1686c:	push	{fp, lr}
   16870:	mov	fp, sp
   16874:	sub	sp, sp, #24
   16878:	mov	ip, #0
   1687c:	str	ip, [sp, #20]
   16880:	ldr	ip, [fp, #24]
   16884:	str	ip, [sp, #16]
   16888:	ldr	ip, [fp, #20]
   1688c:	str	ip, [sp, #12]
   16890:	ldr	ip, [fp, #16]
   16894:	str	ip, [sp, #8]
   16898:	ldr	ip, [fp, #12]
   1689c:	str	ip, [sp, #4]
   168a0:	ldr	ip, [fp, #8]
   168a4:	str	ip, [sp]
   168a8:	bl	16784 <__assert_fail@plt+0x4fdc>
   168ac:	mov	sp, fp
   168b0:	pop	{fp, pc}
   168b4:	push	{fp, lr}
   168b8:	mov	fp, sp
   168bc:	ldrb	ip, [r0, #28]
   168c0:	bic	ip, ip, #6
   168c4:	cmp	r2, #0
   168c8:	beq	168e0 <__assert_fail@plt+0x5138>
   168cc:	ldr	lr, [fp, #8]
   168d0:	orr	ip, ip, #2
   168d4:	strb	ip, [r0, #28]
   168d8:	stm	r1, {r2, r3, lr}
   168dc:	pop	{fp, pc}
   168e0:	strb	ip, [r0, #28]
   168e4:	mov	r0, #0
   168e8:	str	r0, [r1]
   168ec:	str	r0, [r1, #4]
   168f0:	str	r0, [r1, #8]
   168f4:	pop	{fp, pc}
   168f8:	ldr	r1, [r0, #4]
   168fc:	movw	r2, #255	; 0xff
   16900:	movt	r2, #4
   16904:	and	r1, r1, r2
   16908:	cmp	r1, #6
   1690c:	bne	16918 <__assert_fail@plt+0x5170>
   16910:	ldr	r0, [r0]
   16914:	b	16988 <__assert_fail@plt+0x51e0>
   16918:	cmp	r1, #3
   1691c:	bxne	lr
   16920:	ldr	r0, [r0]
   16924:	b	13140 <__assert_fail@plt+0x1998>
   16928:	push	{r4, sl, fp, lr}
   1692c:	add	fp, sp, #8
   16930:	mov	r4, r0
   16934:	ldr	r0, [r0, #24]
   16938:	bl	13140 <__assert_fail@plt+0x1998>
   1693c:	ldr	r0, [r4, #36]	; 0x24
   16940:	bl	13140 <__assert_fail@plt+0x1998>
   16944:	ldr	r0, [r4, #40]	; 0x28
   16948:	add	r1, r4, #4
   1694c:	cmp	r0, r1
   16950:	beq	16964 <__assert_fail@plt+0x51bc>
   16954:	ldr	r0, [r0, #8]
   16958:	bl	13140 <__assert_fail@plt+0x1998>
   1695c:	ldr	r0, [r4, #40]	; 0x28
   16960:	bl	13140 <__assert_fail@plt+0x1998>
   16964:	ldr	r0, [r4, #12]
   16968:	bl	13140 <__assert_fail@plt+0x1998>
   1696c:	ldr	r0, [r4, #48]	; 0x30
   16970:	bl	13140 <__assert_fail@plt+0x1998>
   16974:	ldr	r0, [r4, #44]	; 0x2c
   16978:	bl	13140 <__assert_fail@plt+0x1998>
   1697c:	mov	r0, r4
   16980:	pop	{r4, sl, fp, lr}
   16984:	b	13140 <__assert_fail@plt+0x1998>
   16988:	push	{r4, sl, fp, lr}
   1698c:	add	fp, sp, #8
   16990:	mov	r4, r0
   16994:	ldr	r0, [r0]
   16998:	bl	13140 <__assert_fail@plt+0x1998>
   1699c:	ldr	r0, [r4, #4]
   169a0:	bl	13140 <__assert_fail@plt+0x1998>
   169a4:	ldr	r0, [r4, #8]
   169a8:	bl	13140 <__assert_fail@plt+0x1998>
   169ac:	ldr	r0, [r4, #12]
   169b0:	bl	13140 <__assert_fail@plt+0x1998>
   169b4:	mov	r0, r4
   169b8:	pop	{r4, sl, fp, lr}
   169bc:	b	13140 <__assert_fail@plt+0x1998>
   169c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   169c4:	add	fp, sp, #24
   169c8:	mov	r5, r1
   169cc:	mov	r9, r0
   169d0:	mov	r1, #0
   169d4:	mov	r2, #160	; 0xa0
   169d8:	bl	116ac <memset@plt>
   169dc:	mov	r0, #31
   169e0:	str	r0, [r9, #64]	; 0x40
   169e4:	movw	r0, #43689	; 0xaaa9
   169e8:	movt	r0, #2730	; 0xaaa
   169ec:	cmp	r5, r0
   169f0:	bhi	16b74 <__assert_fail@plt+0x53cc>
   169f4:	add	r0, r5, #1
   169f8:	str	r0, [r9, #4]
   169fc:	lsl	r0, r0, #3
   16a00:	bl	22ab8 <__assert_fail@plt+0x11310>
   16a04:	str	r0, [r9]
   16a08:	mov	r0, #1
   16a0c:	mov	r6, r0
   16a10:	lsl	r0, r0, #1
   16a14:	cmp	r6, r5
   16a18:	bls	16a0c <__assert_fail@plt+0x5264>
   16a1c:	mov	r0, #12
   16a20:	mov	r1, r6
   16a24:	bl	22a64 <__assert_fail@plt+0x112bc>
   16a28:	sub	r1, r6, #1
   16a2c:	str	r1, [r9, #68]	; 0x44
   16a30:	str	r0, [r9, #32]
   16a34:	bl	1158c <__ctype_get_mb_cur_max@plt>
   16a38:	str	r0, [r9, #92]	; 0x5c
   16a3c:	mov	r0, #14
   16a40:	bl	1173c <nl_langinfo@plt>
   16a44:	ldrb	r1, [r0]
   16a48:	orr	r1, r1, #32
   16a4c:	cmp	r1, #117	; 0x75
   16a50:	bne	16aa0 <__assert_fail@plt+0x52f8>
   16a54:	ldrb	r1, [r0, #1]
   16a58:	orr	r1, r1, #32
   16a5c:	cmp	r1, #116	; 0x74
   16a60:	bne	16aa0 <__assert_fail@plt+0x52f8>
   16a64:	ldrb	r1, [r0, #2]
   16a68:	orr	r1, r1, #32
   16a6c:	cmp	r1, #102	; 0x66
   16a70:	bne	16aa0 <__assert_fail@plt+0x52f8>
   16a74:	ldrb	r1, [r0, #3]!
   16a78:	cmp	r1, #45	; 0x2d
   16a7c:	addeq	r0, r0, #1
   16a80:	movw	r1, #17268	; 0x4374
   16a84:	movt	r1, #2
   16a88:	bl	11454 <strcmp@plt>
   16a8c:	cmp	r0, #0
   16a90:	bne	16aa0 <__assert_fail@plt+0x52f8>
   16a94:	ldrb	r0, [r9, #88]	; 0x58
   16a98:	orr	r0, r0, #4
   16a9c:	strb	r0, [r9, #88]	; 0x58
   16aa0:	ldrb	r0, [r9, #88]	; 0x58
   16aa4:	and	r1, r0, #247	; 0xf7
   16aa8:	strb	r1, [r9, #88]	; 0x58
   16aac:	ldr	r1, [r9, #92]	; 0x5c
   16ab0:	cmp	r1, #2
   16ab4:	blt	16b58 <__assert_fail@plt+0x53b0>
   16ab8:	tst	r0, #4
   16abc:	bne	16b4c <__assert_fail@plt+0x53a4>
   16ac0:	mov	r8, #1
   16ac4:	mov	r0, #32
   16ac8:	mov	r1, #1
   16acc:	bl	22a64 <__assert_fail@plt+0x112bc>
   16ad0:	str	r0, [r9, #60]	; 0x3c
   16ad4:	cmp	r0, #0
   16ad8:	beq	16b74 <__assert_fail@plt+0x53cc>
   16adc:	mov	r7, #0
   16ae0:	mov	r6, #0
   16ae4:	b	16af8 <__assert_fail@plt+0x5350>
   16ae8:	add	r7, r7, r4
   16aec:	add	r6, r6, #1
   16af0:	cmp	r6, #8
   16af4:	beq	16b58 <__assert_fail@plt+0x53b0>
   16af8:	mov	r4, #0
   16afc:	b	16b0c <__assert_fail@plt+0x5364>
   16b00:	add	r4, r4, #1
   16b04:	cmp	r4, #32
   16b08:	beq	16ae8 <__assert_fail@plt+0x5340>
   16b0c:	add	r5, r7, r4
   16b10:	mov	r0, r5
   16b14:	bl	116b8 <btowc@plt>
   16b18:	cmn	r0, #1
   16b1c:	beq	16b30 <__assert_fail@plt+0x5388>
   16b20:	ldr	r1, [r9, #60]	; 0x3c
   16b24:	ldr	r2, [r1, r6, lsl #2]
   16b28:	orr	r2, r2, r8, lsl r4
   16b2c:	str	r2, [r1, r6, lsl #2]
   16b30:	cmp	r5, #127	; 0x7f
   16b34:	bhi	16b00 <__assert_fail@plt+0x5358>
   16b38:	cmp	r5, r0
   16b3c:	ldrbne	r0, [r9, #88]	; 0x58
   16b40:	orrne	r0, r0, #8
   16b44:	strbne	r0, [r9, #88]	; 0x58
   16b48:	b	16b00 <__assert_fail@plt+0x5358>
   16b4c:	movw	r0, #17220	; 0x4344
   16b50:	movt	r0, #2
   16b54:	str	r0, [r9, #60]	; 0x3c
   16b58:	ldr	r0, [r9]
   16b5c:	cmp	r0, #0
   16b60:	ldrne	r1, [r9, #32]
   16b64:	movne	r0, #0
   16b68:	cmpne	r1, #0
   16b6c:	moveq	r0, #12
   16b70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b74:	mov	r0, #12
   16b78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16b80:	add	fp, sp, #24
   16b84:	sub	sp, sp, #8
   16b88:	mov	r8, r3
   16b8c:	mov	r5, r2
   16b90:	mov	r7, r1
   16b94:	mov	r4, r0
   16b98:	vmov.i32	q8, #0	; 0x00000000
   16b9c:	mov	r0, #80	; 0x50
   16ba0:	mov	r1, r4
   16ba4:	vst1.32	{d16-d17}, [r1], r0
   16ba8:	mov	r0, #0
   16bac:	str	r0, [r1]
   16bb0:	add	r0, r4, #64	; 0x40
   16bb4:	vst1.32	{d16-d17}, [r0]
   16bb8:	add	r0, r4, #48	; 0x30
   16bbc:	vst1.32	{d16-d17}, [r0]
   16bc0:	add	r0, r4, #32
   16bc4:	vst1.32	{d16-d17}, [r0]
   16bc8:	add	r0, r4, #16
   16bcc:	vst1.32	{d16-d17}, [r0]
   16bd0:	ldr	r6, [fp, #12]
   16bd4:	str	r6, [sp, #4]
   16bd8:	ldr	r9, [fp, #8]
   16bdc:	str	r9, [sp]
   16be0:	mov	r0, r7
   16be4:	mov	r1, r2
   16be8:	mov	r2, r4
   16bec:	bl	173d4 <__assert_fail@plt+0x5c2c>
   16bf0:	cmp	r5, #1
   16bf4:	blt	16c0c <__assert_fail@plt+0x5464>
   16bf8:	add	r1, r5, #1
   16bfc:	mov	r0, r4
   16c00:	bl	1742c <__assert_fail@plt+0x5c84>
   16c04:	cmp	r0, #0
   16c08:	bne	16cc4 <__assert_fail@plt+0x551c>
   16c0c:	ldrb	r0, [r4, #75]	; 0x4b
   16c10:	cmp	r0, #0
   16c14:	ldrne	r7, [r4, #4]
   16c18:	str	r7, [r4, #4]
   16c1c:	ldr	r0, [r6, #92]	; 0x5c
   16c20:	cmp	r9, #0
   16c24:	beq	16c80 <__assert_fail@plt+0x54d8>
   16c28:	cmp	r0, #2
   16c2c:	blt	16c94 <__assert_fail@plt+0x54ec>
   16c30:	mov	r0, r4
   16c34:	bl	174d0 <__assert_fail@plt+0x5d28>
   16c38:	cmp	r0, #0
   16c3c:	bne	16cc4 <__assert_fail@plt+0x551c>
   16c40:	ldr	r1, [r4, #32]
   16c44:	mov	r0, #0
   16c48:	cmp	r1, r5
   16c4c:	bge	16cc4 <__assert_fail@plt+0x551c>
   16c50:	ldr	r2, [r4, #28]
   16c54:	ldr	r1, [r4, #36]	; 0x24
   16c58:	ldr	r3, [r6, #92]	; 0x5c
   16c5c:	add	r2, r3, r2
   16c60:	cmp	r1, r2
   16c64:	bgt	16cc4 <__assert_fail@plt+0x551c>
   16c68:	lsl	r1, r1, #1
   16c6c:	mov	r0, r4
   16c70:	bl	1742c <__assert_fail@plt+0x5c84>
   16c74:	cmp	r0, #0
   16c78:	beq	16c30 <__assert_fail@plt+0x5488>
   16c7c:	b	16cc4 <__assert_fail@plt+0x551c>
   16c80:	cmp	r0, #2
   16c84:	blt	16ca0 <__assert_fail@plt+0x54f8>
   16c88:	mov	r0, r4
   16c8c:	bl	17ae0 <__assert_fail@plt+0x6338>
   16c90:	b	16cc0 <__assert_fail@plt+0x5518>
   16c94:	mov	r0, r4
   16c98:	bl	17a6c <__assert_fail@plt+0x62c4>
   16c9c:	b	16cc0 <__assert_fail@plt+0x5518>
   16ca0:	cmp	r8, #0
   16ca4:	beq	16cb4 <__assert_fail@plt+0x550c>
   16ca8:	mov	r0, r4
   16cac:	bl	17c9c <__assert_fail@plt+0x64f4>
   16cb0:	b	16cc0 <__assert_fail@plt+0x5518>
   16cb4:	ldr	r0, [r4, #36]	; 0x24
   16cb8:	str	r0, [r4, #28]
   16cbc:	str	r0, [r4, #32]
   16cc0:	mov	r0, #0
   16cc4:	sub	sp, fp, #24
   16cc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ccc:	push	{r4, r5, fp, lr}
   16cd0:	add	fp, sp, #8
   16cd4:	ldr	r4, [r0]
   16cd8:	ldr	r0, [r4, #56]	; 0x38
   16cdc:	cmp	r0, #0
   16ce0:	beq	16cf8 <__assert_fail@plt+0x5550>
   16ce4:	ldr	r5, [r0]
   16ce8:	bl	13140 <__assert_fail@plt+0x1998>
   16cec:	cmp	r5, #0
   16cf0:	mov	r0, r5
   16cf4:	bne	16ce4 <__assert_fail@plt+0x553c>
   16cf8:	mov	r0, #31
   16cfc:	str	r0, [r4, #64]	; 0x40
   16d00:	mov	r5, #0
   16d04:	str	r5, [r4, #52]	; 0x34
   16d08:	str	r5, [r4, #56]	; 0x38
   16d0c:	ldr	r0, [r4, #16]
   16d10:	bl	13140 <__assert_fail@plt+0x1998>
   16d14:	str	r5, [r4, #16]
   16d18:	pop	{r4, r5, fp, pc}
   16d1c:	push	{r4, sl, fp, lr}
   16d20:	add	fp, sp, #8
   16d24:	mov	r4, r0
   16d28:	ldr	r0, [r0, #8]
   16d2c:	bl	13140 <__assert_fail@plt+0x1998>
   16d30:	ldr	r0, [r4, #12]
   16d34:	bl	13140 <__assert_fail@plt+0x1998>
   16d38:	ldrb	r0, [r4, #75]	; 0x4b
   16d3c:	cmp	r0, #0
   16d40:	popeq	{r4, sl, fp, pc}
   16d44:	ldr	r0, [r4, #4]
   16d48:	pop	{r4, sl, fp, lr}
   16d4c:	b	13140 <__assert_fail@plt+0x1998>
   16d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d54:	add	fp, sp, #28
   16d58:	sub	sp, sp, #20
   16d5c:	mov	r8, r3
   16d60:	mov	r4, r2
   16d64:	mov	r7, r1
   16d68:	mov	r5, r0
   16d6c:	ldr	r9, [r1]
   16d70:	str	r2, [r9, #128]	; 0x80
   16d74:	orr	r2, r2, #8388608	; 0x800000
   16d78:	add	sl, sp, #12
   16d7c:	mov	r0, sl
   16d80:	mov	r1, r5
   16d84:	bl	17cf4 <__assert_fail@plt+0x654c>
   16d88:	mov	r6, #0
   16d8c:	stm	sp, {r6, r8}
   16d90:	mov	r0, r5
   16d94:	mov	r1, r7
   16d98:	mov	r2, sl
   16d9c:	mov	r3, r4
   16da0:	bl	17d14 <__assert_fail@plt+0x656c>
   16da4:	mov	r7, r0
   16da8:	cmp	r0, #0
   16dac:	bne	16dbc <__assert_fail@plt+0x5614>
   16db0:	ldr	r0, [r8]
   16db4:	cmp	r0, #0
   16db8:	bne	16e08 <__assert_fail@plt+0x5660>
   16dbc:	mov	r0, r9
   16dc0:	mov	r1, #0
   16dc4:	mov	r2, #0
   16dc8:	mov	r3, #2
   16dcc:	bl	17e7c <__assert_fail@plt+0x66d4>
   16dd0:	mov	r4, r0
   16dd4:	cmp	r7, #0
   16dd8:	beq	16df8 <__assert_fail@plt+0x5650>
   16ddc:	mov	r0, r9
   16de0:	mov	r1, r7
   16de4:	mov	r2, r4
   16de8:	mov	r3, #16
   16dec:	bl	17e7c <__assert_fail@plt+0x66d4>
   16df0:	mov	r6, r0
   16df4:	b	16dfc <__assert_fail@plt+0x5654>
   16df8:	mov	r6, r4
   16dfc:	cmp	r4, #0
   16e00:	cmpne	r6, #0
   16e04:	beq	16e14 <__assert_fail@plt+0x566c>
   16e08:	mov	r0, r6
   16e0c:	sub	sp, fp, #28
   16e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e14:	mov	r0, #12
   16e18:	str	r0, [r8]
   16e1c:	mov	r6, #0
   16e20:	b	16e08 <__assert_fail@plt+0x5660>
   16e24:	push	{r4, r5, r6, r7, fp, lr}
   16e28:	add	fp, sp, #16
   16e2c:	mov	r6, r0
   16e30:	ldr	r4, [r0]
   16e34:	ldr	r0, [r4, #4]
   16e38:	lsl	r0, r0, #2
   16e3c:	bl	22ab8 <__assert_fail@plt+0x11310>
   16e40:	str	r0, [r4, #12]
   16e44:	ldr	r0, [r4, #4]
   16e48:	lsl	r0, r0, #2
   16e4c:	bl	22ab8 <__assert_fail@plt+0x11310>
   16e50:	str	r0, [r4, #16]
   16e54:	ldr	r0, [r4, #4]
   16e58:	add	r0, r0, r0, lsl #1
   16e5c:	lsl	r0, r0, #2
   16e60:	bl	22ab8 <__assert_fail@plt+0x11310>
   16e64:	str	r0, [r4, #20]
   16e68:	ldr	r0, [r4, #4]
   16e6c:	add	r0, r0, r0, lsl #1
   16e70:	lsl	r0, r0, #2
   16e74:	bl	22ab8 <__assert_fail@plt+0x11310>
   16e78:	str	r0, [r4, #24]
   16e7c:	ldr	r1, [r4, #12]
   16e80:	mov	r7, #12
   16e84:	cmp	r1, #0
   16e88:	ldrne	r1, [r4, #16]
   16e8c:	cmpne	r1, #0
   16e90:	beq	16ea4 <__assert_fail@plt+0x56fc>
   16e94:	cmp	r0, #0
   16e98:	ldrne	r0, [r4, #20]
   16e9c:	cmpne	r0, #0
   16ea0:	bne	16eac <__assert_fail@plt+0x5704>
   16ea4:	mov	r0, r7
   16ea8:	pop	{r4, r5, r6, r7, fp, pc}
   16eac:	ldr	r0, [r6, #24]
   16eb0:	lsl	r0, r0, #2
   16eb4:	bl	22ab8 <__assert_fail@plt+0x11310>
   16eb8:	str	r0, [r4, #132]	; 0x84
   16ebc:	cmp	r0, #0
   16ec0:	beq	16f64 <__assert_fail@plt+0x57bc>
   16ec4:	ldr	r0, [r6, #24]
   16ec8:	cmp	r0, #0
   16ecc:	beq	16eec <__assert_fail@plt+0x5744>
   16ed0:	ldr	r0, [r4, #132]	; 0x84
   16ed4:	mov	r1, #0
   16ed8:	str	r1, [r0, r1, lsl #2]
   16edc:	add	r1, r1, #1
   16ee0:	ldr	r2, [r6, #24]
   16ee4:	cmp	r1, r2
   16ee8:	bcc	16ed8 <__assert_fail@plt+0x5730>
   16eec:	ldr	r0, [r4, #52]	; 0x34
   16ef0:	movw	r1, #44564	; 0xae14
   16ef4:	movt	r1, #1
   16ef8:	mov	r2, r4
   16efc:	bl	1ad94 <__assert_fail@plt+0x95ec>
   16f00:	ldr	r1, [r6, #24]
   16f04:	mov	r0, #0
   16f08:	cmp	r1, #0
   16f0c:	beq	16f48 <__assert_fail@plt+0x57a0>
   16f10:	ldr	r2, [r4, #132]	; 0x84
   16f14:	ldr	r3, [r2]
   16f18:	cmp	r3, #0
   16f1c:	bne	16f4c <__assert_fail@plt+0x57a4>
   16f20:	mov	r3, #1
   16f24:	mov	r0, r3
   16f28:	ldr	r1, [r6, #24]
   16f2c:	cmp	r3, r1
   16f30:	bcs	16f4c <__assert_fail@plt+0x57a4>
   16f34:	ldr	r5, [r2, r0, lsl #2]
   16f38:	add	r3, r0, #1
   16f3c:	cmp	r0, r5
   16f40:	beq	16f24 <__assert_fail@plt+0x577c>
   16f44:	b	16f4c <__assert_fail@plt+0x57a4>
   16f48:	mov	r1, #0
   16f4c:	cmp	r0, r1
   16f50:	bne	16f64 <__assert_fail@plt+0x57bc>
   16f54:	ldr	r0, [r4, #132]	; 0x84
   16f58:	bl	13140 <__assert_fail@plt+0x1998>
   16f5c:	mov	r0, #0
   16f60:	str	r0, [r4, #132]	; 0x84
   16f64:	ldr	r0, [r4, #52]	; 0x34
   16f68:	movw	r1, #44716	; 0xaeac
   16f6c:	movt	r1, #1
   16f70:	mov	r2, r6
   16f74:	bl	188c0 <__assert_fail@plt+0x7118>
   16f78:	cmp	r0, #0
   16f7c:	bne	1703c <__assert_fail@plt+0x5894>
   16f80:	ldr	r0, [r4, #52]	; 0x34
   16f84:	movw	r1, #44852	; 0xaf34
   16f88:	movt	r1, #1
   16f8c:	mov	r2, r4
   16f90:	bl	188c0 <__assert_fail@plt+0x7118>
   16f94:	cmp	r0, #0
   16f98:	bne	1703c <__assert_fail@plt+0x5894>
   16f9c:	ldr	r0, [r4, #52]	; 0x34
   16fa0:	movw	r1, #44996	; 0xafc4
   16fa4:	movt	r1, #1
   16fa8:	mov	r2, r4
   16fac:	bl	1ad94 <__assert_fail@plt+0x95ec>
   16fb0:	ldr	r0, [r4, #52]	; 0x34
   16fb4:	movw	r1, #45096	; 0xb028
   16fb8:	movt	r1, #1
   16fbc:	mov	r2, r4
   16fc0:	bl	1ad94 <__assert_fail@plt+0x95ec>
   16fc4:	cmp	r0, #0
   16fc8:	bne	1703c <__assert_fail@plt+0x5894>
   16fcc:	mov	r0, r4
   16fd0:	bl	1b148 <__assert_fail@plt+0x99a0>
   16fd4:	cmp	r0, #0
   16fd8:	bne	1703c <__assert_fail@plt+0x5894>
   16fdc:	ldrb	r0, [r6, #28]
   16fe0:	tst	r0, #16
   16fe4:	bne	17000 <__assert_fail@plt+0x5858>
   16fe8:	ldr	r0, [r6, #24]
   16fec:	cmp	r0, #0
   16ff0:	beq	17000 <__assert_fail@plt+0x5858>
   16ff4:	ldrb	r0, [r4, #88]	; 0x58
   16ff8:	tst	r0, #1
   16ffc:	bne	1700c <__assert_fail@plt+0x5864>
   17000:	ldr	r0, [r4, #76]	; 0x4c
   17004:	cmp	r0, #0
   17008:	beq	17034 <__assert_fail@plt+0x588c>
   1700c:	ldr	r0, [r4, #8]
   17010:	add	r0, r0, r0, lsl #1
   17014:	lsl	r0, r0, #2
   17018:	bl	22ab8 <__assert_fail@plt+0x11310>
   1701c:	str	r0, [r4, #28]
   17020:	cmp	r0, #0
   17024:	beq	16ea4 <__assert_fail@plt+0x56fc>
   17028:	mov	r0, r4
   1702c:	pop	{r4, r5, r6, r7, fp, lr}
   17030:	b	1b1fc <__assert_fail@plt+0x9a54>
   17034:	mov	r7, #0
   17038:	mov	r0, r7
   1703c:	pop	{r4, r5, r6, r7, fp, pc}
   17040:	push	{r4, r5, r6, r7, fp, lr}
   17044:	add	fp, sp, #16
   17048:	ldr	r1, [r0, #8]
   1704c:	cmp	r1, #0
   17050:	beq	17070 <__assert_fail@plt+0x58c8>
   17054:	ldr	r3, [r0]
   17058:	mov	r5, #0
   1705c:	mov	ip, #1
   17060:	mov	lr, #139	; 0x8b
   17064:	mov	r2, #0
   17068:	mov	r4, #0
   1706c:	b	170a0 <__assert_fail@plt+0x58f8>
   17070:	mov	r2, #0
   17074:	mov	r5, #0
   17078:	b	1713c <__assert_fail@plt+0x5994>
   1707c:	ldrsb	r1, [r1]
   17080:	cmp	r1, #0
   17084:	mov	r1, #0
   17088:	movwmi	r1, #1
   1708c:	orr	r2, r2, r1
   17090:	ldr	r1, [r0, #8]
   17094:	add	r4, r4, #1
   17098:	cmp	r4, r1
   1709c:	bcs	1713c <__assert_fail@plt+0x5994>
   170a0:	add	r1, r3, r4, lsl #3
   170a4:	ldrb	r6, [r1, #4]
   170a8:	sub	r6, r6, #1
   170ac:	cmp	r6, #11
   170b0:	bhi	171e0 <__assert_fail@plt+0x5a38>
   170b4:	add	r7, pc, #0
   170b8:	ldr	pc, [r7, r6, lsl #2]
   170bc:	andeq	r7, r1, ip, ror r0
   170c0:	muleq	r1, r0, r0
   170c4:	andeq	r7, r1, ip, ror #1
   170c8:	muleq	r1, r0, r0
   170cc:	andeq	r7, r1, r4, lsr r1
   170d0:	ldrdeq	r7, [r1], -ip
   170d4:	andeq	r7, r1, r0, ror #3
   170d8:	muleq	r1, r0, r0
   170dc:	muleq	r1, r0, r0
   170e0:	muleq	r1, r0, r0
   170e4:	muleq	r1, r0, r0
   170e8:	andeq	r7, r1, r4, lsl r1
   170ec:	ldr	r1, [r3, r4, lsl #3]
   170f0:	add	r1, r1, #16
   170f4:	mov	r6, #0
   170f8:	ldr	r7, [r1, r6, lsl #2]
   170fc:	cmp	r7, #0
   17100:	bne	171dc <__assert_fail@plt+0x5a34>
   17104:	add	r6, r6, #1
   17108:	cmp	r6, #4
   1710c:	bne	170f8 <__assert_fail@plt+0x5950>
   17110:	b	17090 <__assert_fail@plt+0x58e8>
   17114:	ldr	r1, [r3, r4, lsl #3]
   17118:	sub	r1, r1, #16
   1711c:	ror	r1, r1, #4
   17120:	cmp	r1, #7
   17124:	bhi	171dc <__assert_fail@plt+0x5a34>
   17128:	tst	lr, ip, lsl r1
   1712c:	bne	17090 <__assert_fail@plt+0x58e8>
   17130:	b	171dc <__assert_fail@plt+0x5a34>
   17134:	mov	r5, #1
   17138:	b	17090 <__assert_fail@plt+0x58e8>
   1713c:	tst	r2, #1
   17140:	tsteq	r5, #1
   17144:	beq	171ac <__assert_fail@plt+0x5a04>
   17148:	ldr	r1, [r0, #8]
   1714c:	cmp	r1, #0
   17150:	beq	171ac <__assert_fail@plt+0x5a04>
   17154:	mov	r2, #0
   17158:	mov	r3, #7
   1715c:	b	17178 <__assert_fail@plt+0x59d0>
   17160:	bfi	r1, r3, #0, #8
   17164:	str	r1, [r4, #4]
   17168:	ldr	r1, [r0, #8]
   1716c:	add	r2, r2, #1
   17170:	cmp	r2, r1
   17174:	bcs	171ac <__assert_fail@plt+0x5a04>
   17178:	ldr	r1, [r0]
   1717c:	add	r4, r1, r2, lsl #3
   17180:	ldr	r1, [r4, #4]
   17184:	uxtb	r6, r1
   17188:	cmp	r6, #5
   1718c:	beq	17160 <__assert_fail@plt+0x59b8>
   17190:	cmp	r6, #1
   17194:	bne	17168 <__assert_fail@plt+0x59c0>
   17198:	ldrsb	r7, [r4]
   1719c:	cmn	r7, #1
   171a0:	bgt	17168 <__assert_fail@plt+0x59c0>
   171a4:	bic	r1, r1, #2097152	; 0x200000
   171a8:	b	17164 <__assert_fail@plt+0x59bc>
   171ac:	mov	r1, #1
   171b0:	str	r1, [r0, #92]	; 0x5c
   171b4:	ldr	r1, [r0, #76]	; 0x4c
   171b8:	mov	r2, #0
   171bc:	cmp	r1, #0
   171c0:	movwgt	r2, #1
   171c4:	orr	r1, r5, r2
   171c8:	and	r1, r1, #1
   171cc:	ldrb	r2, [r0, #88]	; 0x58
   171d0:	and	r2, r2, #249	; 0xf9
   171d4:	orr	r1, r2, r1, lsl #1
   171d8:	strb	r1, [r0, #88]	; 0x58
   171dc:	pop	{r4, r5, r6, r7, fp, pc}
   171e0:	bl	11784 <abort@plt>
   171e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   171e8:	add	fp, sp, #24
   171ec:	sub	sp, sp, #16
   171f0:	mov	r9, r0
   171f4:	ldr	r0, [r0, #24]
   171f8:	ldr	r1, [r9, #52]	; 0x34
   171fc:	ldr	r1, [r1, #12]
   17200:	ldr	r1, [r1, #28]
   17204:	str	r1, [r9, #72]	; 0x48
   17208:	add	r1, r1, r1, lsl #1
   1720c:	add	r1, r0, r1, lsl #2
   17210:	mov	r0, sp
   17214:	bl	1bf28 <__assert_fail@plt+0xa780>
   17218:	str	r0, [sp, #12]
   1721c:	cmp	r0, #0
   17220:	bne	17304 <__assert_fail@plt+0x5b5c>
   17224:	ldr	r0, [r9, #76]	; 0x4c
   17228:	cmp	r0, #1
   1722c:	blt	1730c <__assert_fail@plt+0x5b64>
   17230:	ldr	r0, [sp, #4]
   17234:	cmp	r0, #1
   17238:	blt	1730c <__assert_fail@plt+0x5b64>
   1723c:	mov	r7, #0
   17240:	mov	r8, sp
   17244:	b	17258 <__assert_fail@plt+0x5ab0>
   17248:	add	r7, r7, #1
   1724c:	ldr	r0, [sp, #4]
   17250:	cmp	r7, r0
   17254:	bge	1730c <__assert_fail@plt+0x5b64>
   17258:	ldr	r2, [sp, #8]
   1725c:	ldr	r1, [r2, r7, lsl #2]
   17260:	ldr	r3, [r9]
   17264:	add	r6, r3, r1, lsl #3
   17268:	ldrb	r6, [r6, #4]
   1726c:	cmp	r6, #4
   17270:	bne	17248 <__assert_fail@plt+0x5aa0>
   17274:	mov	r6, #0
   17278:	cmp	r0, #1
   1727c:	bge	17290 <__assert_fail@plt+0x5ae8>
   17280:	b	172b4 <__assert_fail@plt+0x5b0c>
   17284:	add	r6, r6, #1
   17288:	cmp	r0, r6
   1728c:	beq	172b4 <__assert_fail@plt+0x5b0c>
   17290:	ldr	r5, [r2, r6, lsl #2]
   17294:	add	r4, r3, r5, lsl #3
   17298:	ldrb	r4, [r4, #4]
   1729c:	cmp	r4, #9
   172a0:	bne	17284 <__assert_fail@plt+0x5adc>
   172a4:	ldr	r4, [r3, r1, lsl #3]
   172a8:	ldr	r5, [r3, r5, lsl #3]
   172ac:	cmp	r5, r4
   172b0:	bne	17284 <__assert_fail@plt+0x5adc>
   172b4:	cmp	r6, r0
   172b8:	beq	17248 <__assert_fail@plt+0x5aa0>
   172bc:	ldr	r0, [r9, #20]
   172c0:	add	r1, r1, r1, lsl #1
   172c4:	add	r0, r0, r1, lsl #2
   172c8:	ldr	r0, [r0, #8]
   172cc:	ldr	r6, [r0]
   172d0:	mov	r0, r8
   172d4:	mov	r1, r6
   172d8:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   172dc:	cmp	r0, #0
   172e0:	bne	17248 <__assert_fail@plt+0x5aa0>
   172e4:	ldr	r0, [r9, #24]
   172e8:	add	r1, r6, r6, lsl #1
   172ec:	add	r1, r0, r1, lsl #2
   172f0:	mov	r0, r8
   172f4:	bl	1bb24 <__assert_fail@plt+0xa37c>
   172f8:	mov	r7, #0
   172fc:	cmp	r0, #0
   17300:	beq	17248 <__assert_fail@plt+0x5aa0>
   17304:	sub	sp, fp, #24
   17308:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1730c:	add	r0, sp, #12
   17310:	mov	r2, sp
   17314:	mov	r1, r9
   17318:	mov	r3, #0
   1731c:	bl	1c014 <__assert_fail@plt+0xa86c>
   17320:	str	r0, [r9, #36]	; 0x24
   17324:	cmp	r0, #0
   17328:	beq	173a8 <__assert_fail@plt+0x5c00>
   1732c:	ldrsb	r1, [r0, #52]	; 0x34
   17330:	cmn	r1, #1
   17334:	ble	17348 <__assert_fail@plt+0x5ba0>
   17338:	str	r0, [r9, #40]	; 0x28
   1733c:	str	r0, [r9, #44]	; 0x2c
   17340:	str	r0, [r9, #48]	; 0x30
   17344:	b	173c0 <__assert_fail@plt+0x5c18>
   17348:	add	r5, sp, #12
   1734c:	mov	r6, sp
   17350:	mov	r0, r5
   17354:	mov	r1, r9
   17358:	mov	r2, r6
   1735c:	mov	r3, #1
   17360:	bl	1c014 <__assert_fail@plt+0xa86c>
   17364:	str	r0, [r9, #40]	; 0x28
   17368:	mov	r0, r5
   1736c:	mov	r1, r9
   17370:	mov	r2, r6
   17374:	mov	r3, #2
   17378:	bl	1c014 <__assert_fail@plt+0xa86c>
   1737c:	str	r0, [r9, #44]	; 0x2c
   17380:	mov	r0, r5
   17384:	mov	r1, r9
   17388:	mov	r2, r6
   1738c:	mov	r3, #6
   17390:	bl	1c014 <__assert_fail@plt+0xa86c>
   17394:	str	r0, [r9, #48]	; 0x30
   17398:	ldr	r1, [r9, #40]	; 0x28
   1739c:	cmp	r1, #0
   173a0:	cmpne	r0, #0
   173a4:	bne	173b4 <__assert_fail@plt+0x5c0c>
   173a8:	ldr	r0, [sp, #12]
   173ac:	sub	sp, fp, #24
   173b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   173b4:	ldr	r0, [r9, #44]	; 0x2c
   173b8:	cmp	r0, #0
   173bc:	beq	173a8 <__assert_fail@plt+0x5c00>
   173c0:	ldr	r0, [sp, #8]
   173c4:	bl	13140 <__assert_fail@plt+0x1998>
   173c8:	mov	r0, #0
   173cc:	sub	sp, fp, #24
   173d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   173d4:	str	r1, [r2, #48]	; 0x30
   173d8:	str	r0, [r2]
   173dc:	str	r3, [r2, #64]	; 0x40
   173e0:	str	r1, [r2, #44]	; 0x2c
   173e4:	ldr	r0, [sp]
   173e8:	strb	r0, [r2, #72]	; 0x48
   173ec:	cmp	r3, #0
   173f0:	movwne	r3, #1
   173f4:	orr	r0, r3, r0
   173f8:	strb	r0, [r2, #75]	; 0x4b
   173fc:	ldr	r0, [sp, #4]
   17400:	ldr	r3, [r0, #92]	; 0x5c
   17404:	str	r3, [r2, #80]	; 0x50
   17408:	ldrb	r3, [r0, #88]	; 0x58
   1740c:	ubfx	r3, r3, #2, #1
   17410:	strb	r3, [r2, #73]	; 0x49
   17414:	ldrb	r0, [r0, #88]	; 0x58
   17418:	str	r1, [r2, #56]	; 0x38
   1741c:	str	r1, [r2, #52]	; 0x34
   17420:	ubfx	r0, r0, #3, #1
   17424:	strb	r0, [r2, #74]	; 0x4a
   17428:	bx	lr
   1742c:	push	{r4, r5, r6, r7, fp, lr}
   17430:	add	fp, sp, #16
   17434:	mov	r4, r1
   17438:	mov	r5, r0
   1743c:	ldr	r0, [r0, #80]	; 0x50
   17440:	cmp	r0, #2
   17444:	blt	17490 <__assert_fail@plt+0x5ce8>
   17448:	mov	r6, #12
   1744c:	cmn	r4, #-1073741823	; 0xc0000001
   17450:	bhi	174bc <__assert_fail@plt+0x5d14>
   17454:	ldr	r0, [r5, #8]
   17458:	lsl	r7, r4, #2
   1745c:	mov	r1, r7
   17460:	bl	22ae8 <__assert_fail@plt+0x11340>
   17464:	cmp	r0, #0
   17468:	beq	174bc <__assert_fail@plt+0x5d14>
   1746c:	str	r0, [r5, #8]
   17470:	ldr	r0, [r5, #12]
   17474:	cmp	r0, #0
   17478:	beq	17490 <__assert_fail@plt+0x5ce8>
   1747c:	mov	r1, r7
   17480:	bl	22ae8 <__assert_fail@plt+0x11340>
   17484:	cmp	r0, #0
   17488:	beq	174bc <__assert_fail@plt+0x5d14>
   1748c:	str	r0, [r5, #12]
   17490:	ldrb	r0, [r5, #75]	; 0x4b
   17494:	cmp	r0, #0
   17498:	beq	174b4 <__assert_fail@plt+0x5d0c>
   1749c:	ldr	r0, [r5, #4]
   174a0:	mov	r1, r4
   174a4:	bl	22ae8 <__assert_fail@plt+0x11340>
   174a8:	cmp	r0, #0
   174ac:	beq	174c4 <__assert_fail@plt+0x5d1c>
   174b0:	str	r0, [r5, #4]
   174b4:	str	r4, [r5, #36]	; 0x24
   174b8:	mov	r6, #0
   174bc:	mov	r0, r6
   174c0:	pop	{r4, r5, r6, r7, fp, pc}
   174c4:	mov	r6, #12
   174c8:	mov	r0, r6
   174cc:	pop	{r4, r5, r6, r7, fp, pc}
   174d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174d4:	add	fp, sp, #28
   174d8:	sub	sp, sp, #92	; 0x5c
   174dc:	mov	r9, r0
   174e0:	ldrb	r0, [r0, #74]	; 0x4a
   174e4:	ldr	sl, [r9, #28]
   174e8:	ldr	r4, [r9, #36]	; 0x24
   174ec:	ldr	r1, [r9, #48]	; 0x30
   174f0:	cmp	r4, r1
   174f4:	movgt	r4, r1
   174f8:	cmp	r0, #0
   174fc:	bne	17518 <__assert_fail@plt+0x5d70>
   17500:	ldr	r0, [r9, #64]	; 0x40
   17504:	cmp	r0, #0
   17508:	bne	17518 <__assert_fail@plt+0x5d70>
   1750c:	ldrb	r0, [r9, #76]	; 0x4c
   17510:	cmp	r0, #0
   17514:	beq	17520 <__assert_fail@plt+0x5d78>
   17518:	ldr	r7, [r9, #32]
   1751c:	b	176f4 <__assert_fail@plt+0x5f4c>
   17520:	cmp	r4, sl
   17524:	ble	176c8 <__assert_fail@plt+0x5f20>
   17528:	add	r5, r9, #16
   1752c:	str	r4, [sp, #4]
   17530:	b	17554 <__assert_fail@plt+0x5dac>
   17534:	ldr	r1, [r9, #4]
   17538:	strb	r0, [r1, sl]
   1753c:	ldr	r1, [r9, #8]
   17540:	str	r0, [r1, sl, lsl #2]
   17544:	add	sl, sl, #1
   17548:	cmp	r4, sl
   1754c:	mov	r7, sl
   17550:	ble	17a38 <__assert_fail@plt+0x6290>
   17554:	ldr	r0, [r9]
   17558:	ldr	r1, [r9, #24]
   1755c:	add	r1, r1, sl
   17560:	ldrb	r6, [r0, r1]
   17564:	tst	r6, #128	; 0x80
   17568:	bne	1758c <__assert_fail@plt+0x5de4>
   1756c:	mov	r0, r5
   17570:	bl	11508 <mbsinit@plt>
   17574:	cmp	r0, #0
   17578:	beq	1758c <__assert_fail@plt+0x5de4>
   1757c:	mov	r0, r6
   17580:	bl	1176c <towupper@plt>
   17584:	cmp	r0, #127	; 0x7f
   17588:	bls	17534 <__assert_fail@plt+0x5d8c>
   1758c:	ldm	r5, {r0, r1}
   17590:	str	r1, [fp, #-36]	; 0xffffffdc
   17594:	str	r0, [fp, #-40]	; 0xffffffd8
   17598:	sub	r2, r4, sl
   1759c:	ldr	r0, [r9]
   175a0:	ldr	r1, [r9, #24]
   175a4:	add	r0, r0, r1
   175a8:	add	r1, r0, sl
   175ac:	add	r0, sp, #12
   175b0:	mov	r3, r5
   175b4:	bl	23284 <__assert_fail@plt+0x11adc>
   175b8:	mov	r4, r0
   175bc:	sub	r8, r0, #1
   175c0:	cmn	r8, #4
   175c4:	bhi	17680 <__assert_fail@plt+0x5ed8>
   175c8:	ldr	r0, [sp, #12]
   175cc:	bl	1176c <towupper@plt>
   175d0:	mov	r6, r0
   175d4:	ldr	r0, [sp, #12]
   175d8:	cmp	r6, r0
   175dc:	bne	175fc <__assert_fail@plt+0x5e54>
   175e0:	ldr	r1, [r9]
   175e4:	ldr	r0, [r9, #4]
   175e8:	ldr	r2, [r9, #24]
   175ec:	add	r0, r0, sl
   175f0:	add	r1, r1, r2
   175f4:	add	r1, r1, sl
   175f8:	b	17624 <__assert_fail@plt+0x5e7c>
   175fc:	add	r7, sp, #16
   17600:	mov	r0, r7
   17604:	mov	r1, r6
   17608:	sub	r2, fp, #40	; 0x28
   1760c:	bl	1143c <wcrtomb@plt>
   17610:	cmp	r4, r0
   17614:	bne	176d0 <__assert_fail@plt+0x5f28>
   17618:	ldr	r0, [r9, #4]
   1761c:	add	r0, r0, sl
   17620:	mov	r1, r7
   17624:	mov	r2, r4
   17628:	bl	114cc <memcpy@plt>
   1762c:	ldr	r0, [r9, #8]
   17630:	str	r6, [r0, sl, lsl #2]
   17634:	add	r1, r4, sl
   17638:	add	r6, sl, #1
   1763c:	cmp	r6, r1
   17640:	bge	17674 <__assert_fail@plt+0x5ecc>
   17644:	mvn	r1, #3
   17648:	add	r2, r1, r4, lsl #2
   1764c:	add	r0, r0, sl, lsl #2
   17650:	add	r0, r0, #4
   17654:	mov	r1, #255	; 0xff
   17658:	bl	116ac <memset@plt>
   1765c:	mov	sl, r6
   17660:	ldr	r4, [sp, #4]
   17664:	subs	r8, r8, #1
   17668:	add	sl, sl, #1
   1766c:	bne	17664 <__assert_fail@plt+0x5ebc>
   17670:	b	17548 <__assert_fail@plt+0x5da0>
   17674:	mov	sl, r6
   17678:	ldr	r4, [sp, #4]
   1767c:	b	17548 <__assert_fail@plt+0x5da0>
   17680:	add	r0, r4, #1
   17684:	cmp	r0, #2
   17688:	bcc	1769c <__assert_fail@plt+0x5ef4>
   1768c:	ldr	r0, [r9, #36]	; 0x24
   17690:	ldr	r1, [r9, #48]	; 0x30
   17694:	cmp	r0, r1
   17698:	blt	176e0 <__assert_fail@plt+0x5f38>
   1769c:	ldr	r0, [r9, #4]
   176a0:	strb	r6, [r0, sl]
   176a4:	ldr	r0, [r9, #8]
   176a8:	str	r6, [r0, sl, lsl #2]
   176ac:	add	sl, sl, #1
   176b0:	cmn	r4, #1
   176b4:	bne	17678 <__assert_fail@plt+0x5ed0>
   176b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   176bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   176c0:	stm	r5, {r0, r1}
   176c4:	b	17678 <__assert_fail@plt+0x5ed0>
   176c8:	mov	r7, sl
   176cc:	b	17a38 <__assert_fail@plt+0x6290>
   176d0:	mov	r0, sl
   176d4:	ldr	r4, [sp, #4]
   176d8:	mov	r7, sl
   176dc:	b	176fc <__assert_fail@plt+0x5f54>
   176e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   176e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   176e8:	stm	r5, {r0, r1}
   176ec:	mov	r7, sl
   176f0:	b	17a38 <__assert_fail@plt+0x6290>
   176f4:	cmp	sl, r4
   176f8:	bge	17a38 <__assert_fail@plt+0x6290>
   176fc:	mov	r6, r9
   17700:	ldr	r0, [r6, #16]!
   17704:	ldr	r1, [r6, #4]
   17708:	str	r0, [fp, #-40]	; 0xffffffd8
   1770c:	str	r1, [fp, #-36]	; 0xffffffdc
   17710:	str	r4, [sp, #4]
   17714:	sub	r2, r4, sl
   17718:	ldr	r0, [r6, #48]	; 0x30
   1771c:	cmp	r0, #0
   17720:	str	r7, [sp]
   17724:	bne	17808 <__assert_fail@plt+0x6060>
   17728:	ldr	r0, [r9]
   1772c:	ldr	r1, [r9, #24]
   17730:	add	r0, r0, r1
   17734:	add	r4, r0, r7
   17738:	add	r0, sp, #8
   1773c:	mov	r1, r4
   17740:	mov	r3, r6
   17744:	bl	23284 <__assert_fail@plt+0x11adc>
   17748:	mov	r5, r0
   1774c:	sub	r8, r0, #1
   17750:	cmn	r8, #4
   17754:	bhi	17860 <__assert_fail@plt+0x60b8>
   17758:	ldr	r0, [sp, #8]
   1775c:	bl	1176c <towupper@plt>
   17760:	mov	r7, r0
   17764:	ldr	r0, [sp, #8]
   17768:	cmp	r7, r0
   1776c:	bne	17780 <__assert_fail@plt+0x5fd8>
   17770:	ldr	r0, [r9, #4]
   17774:	add	r0, r0, sl
   17778:	mov	r1, r4
   1777c:	b	177a4 <__assert_fail@plt+0x5ffc>
   17780:	add	r0, sp, #16
   17784:	sub	r2, fp, #40	; 0x28
   17788:	mov	r1, r7
   1778c:	bl	1143c <wcrtomb@plt>
   17790:	cmp	r0, r5
   17794:	bne	178dc <__assert_fail@plt+0x6134>
   17798:	ldr	r0, [r9, #4]
   1779c:	add	r0, r0, sl
   177a0:	add	r1, sp, #16
   177a4:	mov	r2, r5
   177a8:	bl	114cc <memcpy@plt>
   177ac:	ldrb	r0, [r9, #76]	; 0x4c
   177b0:	cmp	r0, #0
   177b4:	bne	17a04 <__assert_fail@plt+0x625c>
   177b8:	ldr	r0, [r9, #8]
   177bc:	str	r7, [r0, sl, lsl #2]
   177c0:	ldr	r7, [sp]
   177c4:	add	r7, r5, r7
   177c8:	add	r1, r5, sl
   177cc:	add	r4, sl, #1
   177d0:	cmp	r4, r1
   177d4:	bge	177fc <__assert_fail@plt+0x6054>
   177d8:	mvn	r1, #3
   177dc:	add	r2, r1, r5, lsl #2
   177e0:	add	r0, r0, sl, lsl #2
   177e4:	add	r0, r0, #4
   177e8:	mov	r1, #255	; 0xff
   177ec:	bl	116ac <memset@plt>
   177f0:	subs	r8, r8, #1
   177f4:	add	r4, r4, #1
   177f8:	bne	177f0 <__assert_fail@plt+0x6048>
   177fc:	mov	sl, r4
   17800:	ldr	r4, [sp, #4]
   17804:	b	176f4 <__assert_fail@plt+0x5f4c>
   17808:	add	r4, sp, #16
   1780c:	cmp	r2, #1
   17810:	ldrge	r1, [r9, #80]	; 0x50
   17814:	cmpge	r1, #1
   17818:	blt	17738 <__assert_fail@plt+0x5f90>
   1781c:	mov	r1, #0
   17820:	add	r4, sp, #16
   17824:	ldr	r3, [r9]
   17828:	ldr	r7, [r9, #24]
   1782c:	add	r3, r3, r7
   17830:	ldr	r7, [sp]
   17834:	add	r3, r3, r7
   17838:	ldrb	r3, [r3, r1]
   1783c:	ldrb	r3, [r0, r3]
   17840:	strb	r3, [r4, r1]
   17844:	add	r1, r1, #1
   17848:	cmp	r1, r2
   1784c:	bge	17738 <__assert_fail@plt+0x5f90>
   17850:	ldr	r3, [r9, #80]	; 0x50
   17854:	cmp	r1, r3
   17858:	blt	17824 <__assert_fail@plt+0x607c>
   1785c:	b	17738 <__assert_fail@plt+0x5f90>
   17860:	add	r0, r5, #1
   17864:	cmp	r0, #2
   17868:	bcc	1787c <__assert_fail@plt+0x60d4>
   1786c:	ldr	r0, [r9, #36]	; 0x24
   17870:	ldr	r1, [r9, #48]	; 0x30
   17874:	cmp	r0, r1
   17878:	blt	17a28 <__assert_fail@plt+0x6280>
   1787c:	ldr	r0, [r9]
   17880:	ldr	r2, [r9, #24]
   17884:	ldr	r1, [r9, #64]	; 0x40
   17888:	ldr	r7, [sp]
   1788c:	add	r2, r2, r7
   17890:	ldrb	r0, [r0, r2]
   17894:	cmp	r1, #0
   17898:	bne	17a58 <__assert_fail@plt+0x62b0>
   1789c:	ldr	r4, [sp, #4]
   178a0:	ldr	r1, [r9, #4]
   178a4:	strb	r0, [r1, sl]
   178a8:	ldrb	r1, [r9, #76]	; 0x4c
   178ac:	cmp	r1, #0
   178b0:	bne	17a60 <__assert_fail@plt+0x62b8>
   178b4:	ldr	r1, [r9, #8]
   178b8:	str	r0, [r1, sl, lsl #2]
   178bc:	add	sl, sl, #1
   178c0:	add	r7, r7, #1
   178c4:	cmn	r5, #1
   178c8:	bne	176f4 <__assert_fail@plt+0x5f4c>
   178cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   178d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   178d4:	stm	r6, {r0, r1}
   178d8:	b	176f4 <__assert_fail@plt+0x5f4c>
   178dc:	mov	r2, r0
   178e0:	cmn	r0, #1
   178e4:	beq	17770 <__assert_fail@plt+0x5fc8>
   178e8:	add	r1, r2, sl
   178ec:	ldr	r0, [r9, #36]	; 0x24
   178f0:	cmp	r1, r0
   178f4:	bhi	17a28 <__assert_fail@plt+0x6280>
   178f8:	str	r1, [sp, #4]
   178fc:	ldr	r1, [r9, #12]
   17900:	cmp	r1, #0
   17904:	bne	17924 <__assert_fail@plt+0x617c>
   17908:	lsl	r0, r0, #2
   1790c:	mov	r4, r2
   17910:	bl	22ab8 <__assert_fail@plt+0x11310>
   17914:	mov	r2, r4
   17918:	str	r0, [r9, #12]
   1791c:	cmp	r0, #0
   17920:	beq	17a4c <__assert_fail@plt+0x62a4>
   17924:	ldrb	r0, [r9, #76]	; 0x4c
   17928:	cmp	r0, #0
   1792c:	bne	17958 <__assert_fail@plt+0x61b0>
   17930:	cmp	sl, #0
   17934:	beq	17950 <__assert_fail@plt+0x61a8>
   17938:	ldr	r0, [r9, #12]
   1793c:	mov	r1, #0
   17940:	str	r1, [r0, r1, lsl #2]
   17944:	add	r1, r1, #1
   17948:	cmp	sl, r1
   1794c:	bne	17940 <__assert_fail@plt+0x6198>
   17950:	mov	r0, #1
   17954:	strb	r0, [r9, #76]	; 0x4c
   17958:	ldr	r0, [r9, #4]
   1795c:	add	r0, r0, sl
   17960:	add	r1, sp, #16
   17964:	mov	r4, r2
   17968:	bl	114cc <memcpy@plt>
   1796c:	ldr	r1, [r9, #8]
   17970:	str	r7, [r1, sl, lsl #2]
   17974:	ldr	r0, [r9, #12]
   17978:	ldr	r6, [sp]
   1797c:	str	r6, [r0, sl, lsl #2]
   17980:	cmp	r4, #2
   17984:	bcc	179bc <__assert_fail@plt+0x6214>
   17988:	add	r0, r0, sl, lsl #2
   1798c:	add	r1, r1, sl, lsl #2
   17990:	mov	r2, #1
   17994:	mvn	r3, #0
   17998:	cmp	r2, r5
   1799c:	mov	r7, r8
   179a0:	movcc	r7, r2
   179a4:	add	r7, r7, r6
   179a8:	str	r7, [r0, r2, lsl #2]
   179ac:	str	r3, [r1, r2, lsl #2]
   179b0:	add	r2, r2, #1
   179b4:	cmp	r4, r2
   179b8:	bne	17998 <__assert_fail@plt+0x61f0>
   179bc:	sub	r1, r4, r5
   179c0:	ldr	r0, [r9, #48]	; 0x30
   179c4:	ldr	r2, [r9, #52]	; 0x34
   179c8:	add	r0, r0, r1
   179cc:	str	r0, [r9, #48]	; 0x30
   179d0:	cmp	r2, r6
   179d4:	mov	r7, r6
   179d8:	ble	179e8 <__assert_fail@plt+0x6240>
   179dc:	ldr	r2, [r9, #56]	; 0x38
   179e0:	add	r1, r2, r1
   179e4:	str	r1, [r9, #56]	; 0x38
   179e8:	add	r7, r5, r7
   179ec:	ldr	r1, [r9, #36]	; 0x24
   179f0:	cmp	r1, r0
   179f4:	movgt	r1, r0
   179f8:	ldr	sl, [sp, #4]
   179fc:	mov	r4, r1
   17a00:	b	176f4 <__assert_fail@plt+0x5f4c>
   17a04:	ldr	r0, [r9, #12]
   17a08:	add	r0, r0, sl, lsl #2
   17a0c:	ldr	r1, [sp]
   17a10:	mov	r2, r5
   17a14:	str	r1, [r0], #4
   17a18:	add	r1, r1, #1
   17a1c:	subs	r2, r2, #1
   17a20:	bne	17a14 <__assert_fail@plt+0x626c>
   17a24:	b	177b8 <__assert_fail@plt+0x6010>
   17a28:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17a2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17a30:	stm	r6, {r0, r1}
   17a34:	ldr	r7, [sp]
   17a38:	str	sl, [r9, #28]
   17a3c:	str	r7, [r9, #32]
   17a40:	mov	r0, #0
   17a44:	sub	sp, fp, #28
   17a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a4c:	mov	r0, #12
   17a50:	sub	sp, fp, #28
   17a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a58:	ldrb	r0, [r1, r0]
   17a5c:	b	1789c <__assert_fail@plt+0x60f4>
   17a60:	ldr	r1, [r9, #12]
   17a64:	str	r7, [r1, sl, lsl #2]
   17a68:	b	178b4 <__assert_fail@plt+0x610c>
   17a6c:	push	{r4, r5, r6, sl, fp, lr}
   17a70:	add	fp, sp, #16
   17a74:	mov	r4, r0
   17a78:	ldr	r5, [r0, #28]
   17a7c:	ldr	r6, [r0, #36]	; 0x24
   17a80:	ldr	r0, [r0, #48]	; 0x30
   17a84:	cmp	r6, r0
   17a88:	movgt	r6, r0
   17a8c:	cmp	r5, r6
   17a90:	bge	17ad4 <__assert_fail@plt+0x632c>
   17a94:	ldr	r0, [r4]
   17a98:	ldr	r2, [r4, #24]
   17a9c:	ldr	r1, [r4, #64]	; 0x40
   17aa0:	add	r0, r0, r2
   17aa4:	ldrb	r0, [r0, r5]
   17aa8:	cmp	r1, #0
   17aac:	bne	17acc <__assert_fail@plt+0x6324>
   17ab0:	bl	11724 <toupper@plt>
   17ab4:	ldr	r1, [r4, #4]
   17ab8:	strb	r0, [r1, r5]
   17abc:	add	r5, r5, #1
   17ac0:	cmp	r5, r6
   17ac4:	blt	17a94 <__assert_fail@plt+0x62ec>
   17ac8:	b	17ad4 <__assert_fail@plt+0x632c>
   17acc:	ldrb	r0, [r1, r0]
   17ad0:	b	17ab0 <__assert_fail@plt+0x6308>
   17ad4:	str	r5, [r4, #28]
   17ad8:	str	r5, [r4, #32]
   17adc:	pop	{r4, r5, r6, sl, fp, pc}
   17ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ae4:	add	fp, sp, #28
   17ae8:	sub	sp, sp, #76	; 0x4c
   17aec:	mov	r4, r0
   17af0:	ldr	r6, [r0, #28]
   17af4:	ldr	sl, [r0, #36]	; 0x24
   17af8:	ldr	r0, [r0, #48]	; 0x30
   17afc:	cmp	sl, r0
   17b00:	movgt	sl, r0
   17b04:	cmp	sl, r6
   17b08:	ble	17c8c <__assert_fail@plt+0x64e4>
   17b0c:	add	r9, r4, #16
   17b10:	add	r0, sp, #8
   17b14:	sub	r2, sl, r6
   17b18:	ldm	r9, {r3, r5}
   17b1c:	ldr	r1, [r4, #64]	; 0x40
   17b20:	cmp	r1, #0
   17b24:	str	r3, [sp, #4]
   17b28:	bne	17c08 <__assert_fail@plt+0x6460>
   17b2c:	ldr	r3, [r4]
   17b30:	ldr	r1, [r4, #24]
   17b34:	add	r1, r3, r1
   17b38:	add	r1, r1, r6
   17b3c:	mov	r8, r0
   17b40:	mov	r3, r9
   17b44:	bl	23284 <__assert_fail@plt+0x11adc>
   17b48:	mov	r7, r0
   17b4c:	add	r0, r0, #1
   17b50:	cmp	r0, #2
   17b54:	bcc	17b70 <__assert_fail@plt+0x63c8>
   17b58:	cmn	r7, #2
   17b5c:	bne	17b9c <__assert_fail@plt+0x63f4>
   17b60:	ldr	r0, [r4, #36]	; 0x24
   17b64:	ldr	r1, [r4, #48]	; 0x30
   17b68:	cmp	r0, r1
   17b6c:	blt	17c84 <__assert_fail@plt+0x64dc>
   17b70:	ldr	r0, [r4]
   17b74:	ldr	r1, [r4, #24]
   17b78:	add	r1, r1, r6
   17b7c:	ldrb	r0, [r0, r1]
   17b80:	str	r0, [sp, #8]
   17b84:	ldr	r1, [r4, #64]	; 0x40
   17b88:	cmp	r1, #0
   17b8c:	bne	17c78 <__assert_fail@plt+0x64d0>
   17b90:	ldr	r0, [sp, #4]
   17b94:	stm	r9, {r0, r5}
   17b98:	mov	r7, #1
   17b9c:	ldr	r0, [r4, #8]
   17ba0:	ldr	r1, [sp, #8]
   17ba4:	str	r1, [r0, r6, lsl #2]
   17ba8:	add	r1, r7, r6
   17bac:	add	r5, r6, #1
   17bb0:	cmp	r5, r1
   17bb4:	bge	17bf4 <__assert_fail@plt+0x644c>
   17bb8:	mvn	r1, #3
   17bbc:	add	r2, r1, r7, lsl #2
   17bc0:	add	r0, r0, r6, lsl #2
   17bc4:	add	r0, r0, #4
   17bc8:	mov	r1, #255	; 0xff
   17bcc:	bl	116ac <memset@plt>
   17bd0:	sub	r1, r7, #1
   17bd4:	mov	r6, r5
   17bd8:	mov	r0, r8
   17bdc:	subs	r1, r1, #1
   17be0:	add	r6, r6, #1
   17be4:	bne	17bdc <__assert_fail@plt+0x6434>
   17be8:	cmp	sl, r6
   17bec:	bgt	17b14 <__assert_fail@plt+0x636c>
   17bf0:	b	17c8c <__assert_fail@plt+0x64e4>
   17bf4:	mov	r6, r5
   17bf8:	mov	r0, r8
   17bfc:	cmp	sl, r6
   17c00:	bgt	17b14 <__assert_fail@plt+0x636c>
   17c04:	b	17c8c <__assert_fail@plt+0x64e4>
   17c08:	cmp	r2, #1
   17c0c:	add	r1, sp, #12
   17c10:	blt	17b3c <__assert_fail@plt+0x6394>
   17c14:	ldr	r1, [r4, #80]	; 0x50
   17c18:	cmp	r1, #1
   17c1c:	add	r1, sp, #12
   17c20:	blt	17b3c <__assert_fail@plt+0x6394>
   17c24:	mov	r7, #0
   17c28:	ldr	lr, [r4]
   17c2c:	ldr	ip, [r4, #4]
   17c30:	ldr	r1, [r4, #24]
   17c34:	ldr	r3, [r4, #64]	; 0x40
   17c38:	add	r1, lr, r1
   17c3c:	add	r1, r1, r6
   17c40:	ldrb	r1, [r1, r7]
   17c44:	ldrb	r1, [r3, r1]
   17c48:	add	r3, ip, r6
   17c4c:	strb	r1, [r3, r7]
   17c50:	add	r3, sp, #12
   17c54:	strb	r1, [r3, r7]
   17c58:	add	r7, r7, #1
   17c5c:	cmp	r7, r2
   17c60:	bge	17c70 <__assert_fail@plt+0x64c8>
   17c64:	ldr	r1, [r4, #80]	; 0x50
   17c68:	cmp	r7, r1
   17c6c:	blt	17c28 <__assert_fail@plt+0x6480>
   17c70:	add	r1, sp, #12
   17c74:	b	17b3c <__assert_fail@plt+0x6394>
   17c78:	ldrb	r0, [r1, r0]
   17c7c:	str	r0, [sp, #8]
   17c80:	b	17b90 <__assert_fail@plt+0x63e8>
   17c84:	ldr	r0, [sp, #4]
   17c88:	stm	r9, {r0, r5}
   17c8c:	str	r6, [r4, #28]
   17c90:	str	r6, [r4, #32]
   17c94:	sub	sp, fp, #28
   17c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c9c:	push	{r4, sl, fp, lr}
   17ca0:	add	fp, sp, #8
   17ca4:	ldr	r1, [r0, #28]
   17ca8:	ldr	ip, [r0, #36]	; 0x24
   17cac:	ldr	r3, [r0, #48]	; 0x30
   17cb0:	cmp	ip, r3
   17cb4:	movgt	ip, r3
   17cb8:	cmp	r1, ip
   17cbc:	bge	17ce8 <__assert_fail@plt+0x6540>
   17cc0:	ldm	r0, {r3, lr}
   17cc4:	ldr	r2, [r0, #24]
   17cc8:	ldr	r4, [r0, #64]	; 0x40
   17ccc:	add	r2, r3, r2
   17cd0:	ldrb	r2, [r2, r1]
   17cd4:	ldrb	r2, [r4, r2]
   17cd8:	strb	r2, [lr, r1]
   17cdc:	add	r1, r1, #1
   17ce0:	cmp	r1, ip
   17ce4:	blt	17cc0 <__assert_fail@plt+0x6518>
   17ce8:	str	r1, [r0, #28]
   17cec:	str	r1, [r0, #32]
   17cf0:	pop	{r4, sl, fp, pc}
   17cf4:	push	{r4, sl, fp, lr}
   17cf8:	add	fp, sp, #8
   17cfc:	mov	r4, r1
   17d00:	bl	17eb4 <__assert_fail@plt+0x670c>
   17d04:	ldr	r1, [r4, #40]	; 0x28
   17d08:	add	r0, r1, r0
   17d0c:	str	r0, [r4, #40]	; 0x28
   17d10:	pop	{r4, sl, fp, pc}
   17d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d18:	add	fp, sp, #28
   17d1c:	sub	sp, sp, #28
   17d20:	mov	r5, r2
   17d24:	mov	sl, r0
   17d28:	ldr	r4, [r1]
   17d2c:	ldr	r0, [r4, #84]	; 0x54
   17d30:	str	r0, [sp, #12]
   17d34:	ldr	r7, [fp, #12]
   17d38:	str	r7, [sp, #4]
   17d3c:	ldr	r8, [fp, #8]
   17d40:	str	r8, [sp]
   17d44:	mov	r0, sl
   17d48:	str	r1, [sp, #16]
   17d4c:	str	r3, [sp, #20]
   17d50:	bl	1874c <__assert_fail@plt+0x6fa4>
   17d54:	mov	r6, r0
   17d58:	cmp	r0, #0
   17d5c:	bne	17d6c <__assert_fail@plt+0x65c4>
   17d60:	ldr	r0, [r7]
   17d64:	cmp	r0, #0
   17d68:	bne	17e74 <__assert_fail@plt+0x66cc>
   17d6c:	ldr	r0, [sp, #20]
   17d70:	orr	r7, r0, #8388608	; 0x800000
   17d74:	b	17da8 <__assert_fail@plt+0x6600>
   17d78:	ldr	r0, [r4, #84]	; 0x54
   17d7c:	ldr	r1, [sp, #24]
   17d80:	orr	r0, r0, r1
   17d84:	str	r0, [r4, #84]	; 0x54
   17d88:	mov	r8, r9
   17d8c:	mov	r0, r4
   17d90:	mov	r1, r6
   17d94:	mov	r3, #10
   17d98:	bl	17e7c <__assert_fail@plt+0x66d4>
   17d9c:	mov	r6, r0
   17da0:	cmp	r0, #0
   17da4:	beq	17e68 <__assert_fail@plt+0x66c0>
   17da8:	ldrb	r0, [r5, #4]
   17dac:	cmp	r0, #10
   17db0:	bne	17e58 <__assert_fail@plt+0x66b0>
   17db4:	mov	r0, r5
   17db8:	mov	r1, sl
   17dbc:	mov	r2, r7
   17dc0:	bl	17cf4 <__assert_fail@plt+0x654c>
   17dc4:	ldrb	r0, [r5, #4]
   17dc8:	orr	r1, r0, #8
   17dcc:	mov	r2, #0
   17dd0:	cmp	r1, #10
   17dd4:	beq	17d8c <__assert_fail@plt+0x65e4>
   17dd8:	cmp	r8, #0
   17ddc:	beq	17de8 <__assert_fail@plt+0x6640>
   17de0:	cmp	r0, #9
   17de4:	beq	17d8c <__assert_fail@plt+0x65e4>
   17de8:	ldr	r0, [r4, #84]	; 0x54
   17dec:	str	r0, [sp, #24]
   17df0:	ldr	r0, [sp, #12]
   17df4:	str	r0, [r4, #84]	; 0x54
   17df8:	mov	r9, r8
   17dfc:	str	r8, [sp]
   17e00:	ldr	r8, [fp, #12]
   17e04:	str	r8, [sp, #4]
   17e08:	mov	r0, sl
   17e0c:	ldr	r1, [sp, #16]
   17e10:	mov	r2, r5
   17e14:	ldr	r3, [sp, #20]
   17e18:	bl	1874c <__assert_fail@plt+0x6fa4>
   17e1c:	mov	r2, r0
   17e20:	cmp	r0, #0
   17e24:	bne	17d78 <__assert_fail@plt+0x65d0>
   17e28:	ldr	r0, [r8]
   17e2c:	cmp	r0, #0
   17e30:	beq	17d78 <__assert_fail@plt+0x65d0>
   17e34:	cmp	r6, #0
   17e38:	beq	17e74 <__assert_fail@plt+0x66cc>
   17e3c:	movw	r1, #35128	; 0x8938
   17e40:	movt	r1, #1
   17e44:	mov	r4, #0
   17e48:	mov	r0, r6
   17e4c:	mov	r2, #0
   17e50:	bl	188c0 <__assert_fail@plt+0x7118>
   17e54:	b	17e5c <__assert_fail@plt+0x66b4>
   17e58:	mov	r4, r6
   17e5c:	mov	r0, r4
   17e60:	sub	sp, fp, #28
   17e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e68:	mov	r0, #12
   17e6c:	ldr	r1, [fp, #12]
   17e70:	str	r0, [r1]
   17e74:	mov	r4, #0
   17e78:	b	17e5c <__assert_fail@plt+0x66b4>
   17e7c:	push	{fp, lr}
   17e80:	mov	fp, sp
   17e84:	sub	sp, sp, #8
   17e88:	mov	ip, #0
   17e8c:	str	ip, [sp]
   17e90:	uxtb	ip, r3
   17e94:	ldr	r3, [sp, #4]
   17e98:	bfc	r3, #0, #23
   17e9c:	orr	r3, r3, ip
   17ea0:	str	r3, [sp, #4]
   17ea4:	mov	r3, sp
   17ea8:	bl	18ef8 <__assert_fail@plt+0x7750>
   17eac:	mov	sp, fp
   17eb0:	pop	{fp, pc}
   17eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb8:	add	fp, sp, #28
   17ebc:	sub	sp, sp, #12
   17ec0:	mov	r7, r1
   17ec4:	mov	sl, r0
   17ec8:	ldr	r0, [r1, #40]	; 0x28
   17ecc:	ldr	r1, [r1, #56]	; 0x38
   17ed0:	cmp	r1, r0
   17ed4:	ble	17fb0 <__assert_fail@plt+0x6808>
   17ed8:	mov	r9, r2
   17edc:	ldr	r1, [r7, #4]
   17ee0:	ldrb	r6, [r1, r0]
   17ee4:	mov	r5, sl
   17ee8:	strb	r6, [r5], #4
   17eec:	ldr	r4, [r5]
   17ef0:	bic	r0, r4, #6291456	; 0x600000
   17ef4:	str	r0, [r5]
   17ef8:	ldr	r0, [r7, #80]	; 0x50
   17efc:	movw	r8, #65280	; 0xff00
   17f00:	movt	r8, #65439	; 0xff9f
   17f04:	cmp	r0, #2
   17f08:	blt	17f2c <__assert_fail@plt+0x6784>
   17f0c:	ldr	r1, [r7, #28]
   17f10:	ldr	r0, [r7, #40]	; 0x28
   17f14:	cmp	r0, r1
   17f18:	beq	17f2c <__assert_fail@plt+0x6784>
   17f1c:	ldr	r1, [r7, #8]
   17f20:	ldr	r0, [r1, r0, lsl #2]
   17f24:	cmn	r0, #1
   17f28:	beq	183e4 <__assert_fail@plt+0x6c3c>
   17f2c:	cmp	r6, #92	; 0x5c
   17f30:	bne	17fc0 <__assert_fail@plt+0x6818>
   17f34:	ldr	r0, [r7, #40]	; 0x28
   17f38:	ldr	r1, [r7, #48]	; 0x30
   17f3c:	add	r0, r0, #1
   17f40:	cmp	r0, r1
   17f44:	bge	18014 <__assert_fail@plt+0x686c>
   17f48:	mov	r0, r7
   17f4c:	bl	18668 <__assert_fail@plt+0x6ec0>
   17f50:	mov	r6, r0
   17f54:	strb	r0, [sl]
   17f58:	and	r0, r4, r8
   17f5c:	orr	r4, r0, #1
   17f60:	str	r4, [sl, #4]
   17f64:	ldr	r0, [r7, #80]	; 0x50
   17f68:	cmp	r0, #2
   17f6c:	blt	18238 <__assert_fail@plt+0x6a90>
   17f70:	ldr	r0, [r7, #40]	; 0x28
   17f74:	add	r1, r0, #1
   17f78:	mov	r0, r7
   17f7c:	bl	18728 <__assert_fail@plt+0x6f80>
   17f80:	mov	r7, r0
   17f84:	bl	11694 <iswalnum@plt>
   17f88:	cmp	r0, #0
   17f8c:	movwne	r0, #1
   17f90:	sub	r1, r7, #95	; 0x5f
   17f94:	clz	r1, r1
   17f98:	lsr	r1, r1, #5
   17f9c:	orr	r0, r1, r0
   17fa0:	ldr	r1, [r5]
   17fa4:	bic	r1, r1, #4194304	; 0x400000
   17fa8:	orr	r0, r1, r0, lsl #22
   17fac:	b	18258 <__assert_fail@plt+0x6ab0>
   17fb0:	mov	r0, #2
   17fb4:	strb	r0, [sl, #4]
   17fb8:	mov	r8, #0
   17fbc:	b	1865c <__assert_fail@plt+0x6eb4>
   17fc0:	and	r0, r4, r8
   17fc4:	orr	r4, r0, #1
   17fc8:	str	r4, [r5]
   17fcc:	ldr	r0, [r7, #80]	; 0x50
   17fd0:	cmp	r0, #2
   17fd4:	blt	18020 <__assert_fail@plt+0x6878>
   17fd8:	ldr	r1, [r7, #40]	; 0x28
   17fdc:	mov	r0, r7
   17fe0:	bl	18728 <__assert_fail@plt+0x6f80>
   17fe4:	mov	r4, r0
   17fe8:	bl	11694 <iswalnum@plt>
   17fec:	cmp	r0, #0
   17ff0:	movwne	r0, #1
   17ff4:	sub	r1, r4, #95	; 0x5f
   17ff8:	clz	r1, r1
   17ffc:	lsr	r1, r1, #5
   18000:	orr	r0, r1, r0
   18004:	ldr	r1, [r5]
   18008:	bic	r1, r1, #4194304	; 0x400000
   1800c:	orr	r0, r1, r0, lsl #22
   18010:	b	18040 <__assert_fail@plt+0x6898>
   18014:	and	r0, r4, r8
   18018:	orr	r0, r0, #36	; 0x24
   1801c:	b	183f0 <__assert_fail@plt+0x6c48>
   18020:	bl	11634 <__ctype_b_loc@plt>
   18024:	ldr	r0, [r0]
   18028:	add	r0, r0, r6, lsl #1
   1802c:	ldrh	r0, [r0]
   18030:	ubfx	r0, r0, #3, #1
   18034:	cmp	r6, #95	; 0x5f
   18038:	movweq	r0, #1
   1803c:	orr	r0, r4, r0, lsl #22
   18040:	str	r0, [r5]
   18044:	sub	r1, r6, #10
   18048:	mov	r8, #1
   1804c:	cmp	r1, #115	; 0x73
   18050:	bhi	1865c <__assert_fail@plt+0x6eb4>
   18054:	add	r2, pc, #0
   18058:	ldr	pc, [r2, r1, lsl #2]
   1805c:	andeq	r8, r1, ip, lsr #4
   18060:	andeq	r8, r1, ip, asr r6
   18064:	andeq	r8, r1, ip, asr r6
   18068:	andeq	r8, r1, ip, asr r6
   1806c:	andeq	r8, r1, ip, asr r6
   18070:	andeq	r8, r1, ip, asr r6
   18074:	andeq	r8, r1, ip, asr r6
   18078:	andeq	r8, r1, ip, asr r6
   1807c:	andeq	r8, r1, ip, asr r6
   18080:	andeq	r8, r1, ip, asr r6
   18084:	andeq	r8, r1, ip, asr r6
   18088:	andeq	r8, r1, ip, asr r6
   1808c:	andeq	r8, r1, ip, asr r6
   18090:	andeq	r8, r1, ip, asr r6
   18094:	andeq	r8, r1, ip, asr r6
   18098:	andeq	r8, r1, ip, asr r6
   1809c:	andeq	r8, r1, ip, asr r6
   180a0:	andeq	r8, r1, ip, asr r6
   180a4:	andeq	r8, r1, ip, asr r6
   180a8:	andeq	r8, r1, ip, asr r6
   180ac:	andeq	r8, r1, ip, asr r6
   180b0:	andeq	r8, r1, ip, asr r6
   180b4:	andeq	r8, r1, ip, asr r6
   180b8:	andeq	r8, r1, ip, asr r6
   180bc:	andeq	r8, r1, ip, asr r6
   180c0:	andeq	r8, r1, ip, asr r6
   180c4:	strdeq	r8, [r1], -ip
   180c8:	andeq	r8, r1, ip, asr r6
   180cc:	andeq	r8, r1, ip, asr r6
   180d0:	andeq	r8, r1, ip, asr r6
   180d4:	andeq	r8, r1, ip, asr r4
   180d8:	andeq	r8, r1, r8, ror #8
   180dc:	andeq	r8, r1, r4, ror r4
   180e0:	andeq	r8, r1, ip, ror r4
   180e4:	andeq	r8, r1, ip, asr r6
   180e8:	andeq	r8, r1, ip, asr r6
   180ec:	andeq	r8, r1, ip, lsl #9
   180f0:	andeq	r8, r1, ip, asr r6
   180f4:	andeq	r8, r1, ip, asr r6
   180f8:	andeq	r8, r1, ip, asr r6
   180fc:	andeq	r8, r1, ip, asr r6
   18100:	andeq	r8, r1, ip, asr r6
   18104:	andeq	r8, r1, ip, asr r6
   18108:	andeq	r8, r1, ip, asr r6
   1810c:	andeq	r8, r1, ip, asr r6
   18110:	andeq	r8, r1, ip, asr r6
   18114:	andeq	r8, r1, ip, asr r6
   18118:	andeq	r8, r1, ip, asr r6
   1811c:	andeq	r8, r1, ip, asr r6
   18120:	andeq	r8, r1, ip, asr r6
   18124:	andeq	r8, r1, ip, asr r6
   18128:	andeq	r8, r1, ip, asr r6
   1812c:	andeq	r8, r1, ip, asr r6
   18130:	muleq	r1, r4, r4
   18134:	andeq	r8, r1, ip, asr r6
   18138:	andeq	r8, r1, ip, asr r6
   1813c:	andeq	r8, r1, ip, asr r6
   18140:	andeq	r8, r1, ip, asr r6
   18144:	andeq	r8, r1, ip, asr r6
   18148:	andeq	r8, r1, ip, asr r6
   1814c:	andeq	r8, r1, ip, asr r6
   18150:	andeq	r8, r1, ip, asr r6
   18154:	andeq	r8, r1, ip, asr r6
   18158:	andeq	r8, r1, ip, asr r6
   1815c:	andeq	r8, r1, ip, asr r6
   18160:	andeq	r8, r1, ip, asr r6
   18164:	andeq	r8, r1, ip, asr r6
   18168:	andeq	r8, r1, ip, asr r6
   1816c:	andeq	r8, r1, ip, asr r6
   18170:	andeq	r8, r1, ip, asr r6
   18174:	andeq	r8, r1, ip, asr r6
   18178:	andeq	r8, r1, ip, asr r6
   1817c:	andeq	r8, r1, ip, asr r6
   18180:	andeq	r8, r1, ip, asr r6
   18184:	andeq	r8, r1, ip, asr r6
   18188:	andeq	r8, r1, ip, asr r6
   1818c:	andeq	r8, r1, ip, asr r6
   18190:	andeq	r8, r1, ip, asr r6
   18194:	andeq	r8, r1, ip, asr r6
   18198:	andeq	r8, r1, ip, asr r6
   1819c:	andeq	r8, r1, ip, asr r6
   181a0:	andeq	r8, r1, r4, lsr #9
   181a4:	andeq	r8, r1, ip, asr r6
   181a8:	andeq	r8, r1, ip, asr r6
   181ac:	andeq	r8, r1, ip, lsr #9
   181b0:	andeq	r8, r1, ip, asr r6
   181b4:	andeq	r8, r1, ip, asr r6
   181b8:	andeq	r8, r1, ip, asr r6
   181bc:	andeq	r8, r1, ip, asr r6
   181c0:	andeq	r8, r1, ip, asr r6
   181c4:	andeq	r8, r1, ip, asr r6
   181c8:	andeq	r8, r1, ip, asr r6
   181cc:	andeq	r8, r1, ip, asr r6
   181d0:	andeq	r8, r1, ip, asr r6
   181d4:	andeq	r8, r1, ip, asr r6
   181d8:	andeq	r8, r1, ip, asr r6
   181dc:	andeq	r8, r1, ip, asr r6
   181e0:	andeq	r8, r1, ip, asr r6
   181e4:	andeq	r8, r1, ip, asr r6
   181e8:	andeq	r8, r1, ip, asr r6
   181ec:	andeq	r8, r1, ip, asr r6
   181f0:	andeq	r8, r1, ip, asr r6
   181f4:	andeq	r8, r1, ip, asr r6
   181f8:	andeq	r8, r1, ip, asr r6
   181fc:	andeq	r8, r1, ip, asr r6
   18200:	andeq	r8, r1, ip, asr r6
   18204:	andeq	r8, r1, ip, asr r6
   18208:	andeq	r8, r1, ip, asr r6
   1820c:	andeq	r8, r1, ip, asr r6
   18210:	andeq	r8, r1, ip, asr r6
   18214:	andeq	r8, r1, ip, asr r6
   18218:	andeq	r8, r1, ip, asr r6
   1821c:	andeq	r8, r1, ip, asr r6
   18220:	ldrdeq	r8, [r1], -r4
   18224:	andeq	r8, r1, r4, ror #9
   18228:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1822c:	tst	r9, #2048	; 0x800
   18230:	bne	184f0 <__assert_fail@plt+0x6d48>
   18234:	b	1865c <__assert_fail@plt+0x6eb4>
   18238:	bl	11634 <__ctype_b_loc@plt>
   1823c:	ldr	r0, [r0]
   18240:	add	r0, r0, r6, lsl #1
   18244:	ldrh	r0, [r0]
   18248:	ubfx	r0, r0, #3, #1
   1824c:	cmp	r6, #95	; 0x5f
   18250:	movweq	r0, #1
   18254:	orr	r0, r4, r0, lsl #22
   18258:	str	r0, [r5]
   1825c:	sub	r1, r6, #39	; 0x27
   18260:	mov	r8, #2
   18264:	cmp	r1, #86	; 0x56
   18268:	bhi	1865c <__assert_fail@plt+0x6eb4>
   1826c:	add	r2, pc, #0
   18270:	ldr	pc, [r2, r1, lsl #2]
   18274:	andeq	r8, r1, r4, lsr r5
   18278:	andeq	r8, r1, r4, asr #10
   1827c:	andeq	r8, r1, r4, asr r5
   18280:	andeq	r8, r1, ip, asr r6
   18284:	andeq	r8, r1, r4, ror #10
   18288:	andeq	r8, r1, ip, asr r6
   1828c:	andeq	r8, r1, ip, asr r6
   18290:	andeq	r8, r1, ip, asr r6
   18294:	andeq	r8, r1, ip, asr r6
   18298:	andeq	r8, r1, ip, asr r6
   1829c:	ldrdeq	r8, [r1], -r0
   182a0:	ldrdeq	r8, [r1], -r0
   182a4:	ldrdeq	r8, [r1], -r0
   182a8:	ldrdeq	r8, [r1], -r0
   182ac:	ldrdeq	r8, [r1], -r0
   182b0:	ldrdeq	r8, [r1], -r0
   182b4:	ldrdeq	r8, [r1], -r0
   182b8:	ldrdeq	r8, [r1], -r0
   182bc:	ldrdeq	r8, [r1], -r0
   182c0:	andeq	r8, r1, ip, asr r6
   182c4:	andeq	r8, r1, ip, asr r6
   182c8:	andeq	r8, r1, ip, ror r5
   182cc:	andeq	r8, r1, ip, asr r6
   182d0:	andeq	r8, r1, ip, lsl #11
   182d4:	muleq	r1, ip, r5
   182d8:	andeq	r8, r1, ip, asr r6
   182dc:	andeq	r8, r1, ip, asr r6
   182e0:			; <UNDEFINED> instruction: 0x000185b4
   182e4:	andeq	r8, r1, ip, asr r6
   182e8:	andeq	r8, r1, ip, asr r6
   182ec:	andeq	r8, r1, ip, asr r6
   182f0:	andeq	r8, r1, ip, asr r6
   182f4:	andeq	r8, r1, ip, asr r6
   182f8:	andeq	r8, r1, ip, asr r6
   182fc:	andeq	r8, r1, ip, asr r6
   18300:	andeq	r8, r1, ip, asr r6
   18304:	andeq	r8, r1, ip, asr r6
   18308:	andeq	r8, r1, ip, asr r6
   1830c:	andeq	r8, r1, ip, asr r6
   18310:	andeq	r8, r1, ip, asr r6
   18314:	andeq	r8, r1, ip, asr r6
   18318:	andeq	r8, r1, ip, asr r6
   1831c:	andeq	r8, r1, ip, asr r6
   18320:	andeq	r8, r1, ip, asr r6
   18324:	andeq	r8, r1, r4, asr #11
   18328:	andeq	r8, r1, ip, asr r6
   1832c:	andeq	r8, r1, ip, asr r6
   18330:	andeq	r8, r1, ip, asr r6
   18334:	ldrdeq	r8, [r1], -r4
   18338:	andeq	r8, r1, ip, asr r6
   1833c:	andeq	r8, r1, ip, asr r6
   18340:	andeq	r8, r1, ip, asr r6
   18344:	andeq	r8, r1, ip, asr r6
   18348:	andeq	r8, r1, ip, asr r6
   1834c:	andeq	r8, r1, ip, asr r6
   18350:	andeq	r8, r1, ip, asr r6
   18354:	andeq	r8, r1, ip, asr r6
   18358:	andeq	r8, r1, r4, ror #11
   1835c:	andeq	r8, r1, ip, asr r6
   18360:	strdeq	r8, [r1], -r4
   18364:	andeq	r8, r1, ip, asr r6
   18368:	andeq	r8, r1, ip, asr r6
   1836c:	andeq	r8, r1, ip, asr r6
   18370:	andeq	r8, r1, ip, asr r6
   18374:	andeq	r8, r1, ip, asr r6
   18378:	andeq	r8, r1, ip, asr r6
   1837c:	andeq	r8, r1, ip, asr r6
   18380:	andeq	r8, r1, ip, asr r6
   18384:	andeq	r8, r1, ip, asr r6
   18388:	andeq	r8, r1, ip, asr r6
   1838c:	andeq	r8, r1, ip, asr r6
   18390:	andeq	r8, r1, ip, asr r6
   18394:	andeq	r8, r1, ip, asr r6
   18398:	andeq	r8, r1, ip, asr r6
   1839c:	andeq	r8, r1, ip, asr r6
   183a0:	andeq	r8, r1, ip, asr r6
   183a4:	andeq	r8, r1, r4, lsl #12
   183a8:	andeq	r8, r1, ip, asr r6
   183ac:	andeq	r8, r1, ip, asr r6
   183b0:	andeq	r8, r1, ip, asr r6
   183b4:	andeq	r8, r1, r4, lsl r6
   183b8:	andeq	r8, r1, ip, asr r6
   183bc:	andeq	r8, r1, ip, asr r6
   183c0:	andeq	r8, r1, ip, asr r6
   183c4:	andeq	r8, r1, r4, lsr #12
   183c8:	andeq	r8, r1, r8, lsr r6
   183cc:	andeq	r8, r1, r4, asr #12
   183d0:	tst	r9, #16384	; 0x4000
   183d4:	bne	1865c <__assert_fail@plt+0x6eb4>
   183d8:	sub	r1, r6, #49	; 0x31
   183dc:	mov	r2, #4
   183e0:	b	184c4 <__assert_fail@plt+0x6d1c>
   183e4:	and	r0, r4, r8
   183e8:	orr	r0, r0, #1
   183ec:	orr	r0, r0, #2097152	; 0x200000
   183f0:	str	r0, [r5]
   183f4:	mov	r8, #1
   183f8:	b	1865c <__assert_fail@plt+0x6eb4>
   183fc:	tst	r9, #8
   18400:	bne	18448 <__assert_fail@plt+0x6ca0>
   18404:	ldr	r0, [r7, #40]	; 0x28
   18408:	ldr	r1, [r7, #48]	; 0x30
   1840c:	add	r0, r0, #1
   18410:	cmp	r0, r1
   18414:	beq	18448 <__assert_fail@plt+0x6ca0>
   18418:	str	r0, [r7, #40]	; 0x28
   1841c:	add	r0, sp, #4
   18420:	mov	r1, r7
   18424:	mov	r2, r9
   18428:	bl	17eb4 <__assert_fail@plt+0x670c>
   1842c:	ldr	r0, [r7, #40]	; 0x28
   18430:	sub	r0, r0, #1
   18434:	str	r0, [r7, #40]	; 0x28
   18438:	ldrb	r0, [sp, #8]
   1843c:	sub	r0, r0, #9
   18440:	cmp	r0, #1
   18444:	bhi	1865c <__assert_fail@plt+0x6eb4>
   18448:	mov	r0, #32
   1844c:	str	r0, [sl]
   18450:	mov	r0, #12
   18454:	strb	r0, [sl, #4]
   18458:	b	1865c <__assert_fail@plt+0x6eb4>
   1845c:	tst	r9, #8192	; 0x2000
   18460:	bne	1854c <__assert_fail@plt+0x6da4>
   18464:	b	1865c <__assert_fail@plt+0x6eb4>
   18468:	tst	r9, #8192	; 0x2000
   1846c:	bne	1855c <__assert_fail@plt+0x6db4>
   18470:	b	1865c <__assert_fail@plt+0x6eb4>
   18474:	mov	r1, #11
   18478:	b	18654 <__assert_fail@plt+0x6eac>
   1847c:	movw	r1, #1026	; 0x402
   18480:	tst	r9, r1
   18484:	bne	1865c <__assert_fail@plt+0x6eb4>
   18488:	b	18574 <__assert_fail@plt+0x6dcc>
   1848c:	mov	r1, #5
   18490:	b	18654 <__assert_fail@plt+0x6eac>
   18494:	movw	r1, #1026	; 0x402
   18498:	tst	r9, r1
   1849c:	bne	1865c <__assert_fail@plt+0x6eb4>
   184a0:	b	185ac <__assert_fail@plt+0x6e04>
   184a4:	mov	r1, #20
   184a8:	b	18654 <__assert_fail@plt+0x6eac>
   184ac:	movw	r1, #8
   184b0:	movt	r1, #128	; 0x80
   184b4:	tst	r9, r1
   184b8:	beq	18508 <__assert_fail@plt+0x6d60>
   184bc:	mov	r1, #16
   184c0:	mov	r2, #12
   184c4:	bfi	r0, r2, #0, #8
   184c8:	str	r1, [sl]
   184cc:	str	r0, [sl, #4]
   184d0:	b	1865c <__assert_fail@plt+0x6eb4>
   184d4:	and	r1, r9, #4608	; 0x1200
   184d8:	cmp	r1, #4608	; 0x1200
   184dc:	beq	18630 <__assert_fail@plt+0x6e88>
   184e0:	b	1865c <__assert_fail@plt+0x6eb4>
   184e4:	and	r1, r9, #33792	; 0x8400
   184e8:	cmp	r1, #32768	; 0x8000
   184ec:	bne	1865c <__assert_fail@plt+0x6eb4>
   184f0:	mov	r1, #10
   184f4:	b	18654 <__assert_fail@plt+0x6eac>
   184f8:	and	r1, r9, #4608	; 0x1200
   184fc:	cmp	r1, #4608	; 0x1200
   18500:	beq	18650 <__assert_fail@plt+0x6ea8>
   18504:	b	1865c <__assert_fail@plt+0x6eb4>
   18508:	ldr	r1, [r7, #40]	; 0x28
   1850c:	cmp	r1, #0
   18510:	beq	184bc <__assert_fail@plt+0x6d14>
   18514:	tst	r9, #2048	; 0x800
   18518:	beq	1865c <__assert_fail@plt+0x6eb4>
   1851c:	ldr	r2, [r7, #4]
   18520:	add	r1, r1, r2
   18524:	ldrb	r1, [r1, #-1]
   18528:	cmp	r1, #10
   1852c:	beq	184bc <__assert_fail@plt+0x6d14>
   18530:	b	1865c <__assert_fail@plt+0x6eb4>
   18534:	tst	r9, #524288	; 0x80000
   18538:	bne	1865c <__assert_fail@plt+0x6eb4>
   1853c:	mov	r1, #128	; 0x80
   18540:	b	184c0 <__assert_fail@plt+0x6d18>
   18544:	tst	r9, #8192	; 0x2000
   18548:	bne	1865c <__assert_fail@plt+0x6eb4>
   1854c:	mov	r1, #8
   18550:	b	18654 <__assert_fail@plt+0x6eac>
   18554:	tst	r9, #8192	; 0x2000
   18558:	bne	1865c <__assert_fail@plt+0x6eb4>
   1855c:	mov	r1, #9
   18560:	b	18654 <__assert_fail@plt+0x6eac>
   18564:	movw	r1, #1026	; 0x402
   18568:	and	r1, r9, r1
   1856c:	cmp	r1, #2
   18570:	bne	1865c <__assert_fail@plt+0x6eb4>
   18574:	mov	r1, #18
   18578:	b	18654 <__assert_fail@plt+0x6eac>
   1857c:	tst	r9, #524288	; 0x80000
   18580:	bne	1865c <__assert_fail@plt+0x6eb4>
   18584:	mov	r1, #6
   18588:	b	184c0 <__assert_fail@plt+0x6d18>
   1858c:	tst	r9, #524288	; 0x80000
   18590:	bne	1865c <__assert_fail@plt+0x6eb4>
   18594:	mov	r1, #9
   18598:	b	184c0 <__assert_fail@plt+0x6d18>
   1859c:	movw	r1, #1026	; 0x402
   185a0:	and	r1, r9, r1
   185a4:	cmp	r1, #2
   185a8:	bne	1865c <__assert_fail@plt+0x6eb4>
   185ac:	mov	r1, #19
   185b0:	b	18654 <__assert_fail@plt+0x6eac>
   185b4:	tst	r9, #524288	; 0x80000
   185b8:	bne	1865c <__assert_fail@plt+0x6eb4>
   185bc:	mov	r1, #512	; 0x200
   185c0:	b	184c0 <__assert_fail@plt+0x6d18>
   185c4:	tst	r9, #524288	; 0x80000
   185c8:	bne	1865c <__assert_fail@plt+0x6eb4>
   185cc:	mov	r1, #35	; 0x23
   185d0:	b	18654 <__assert_fail@plt+0x6eac>
   185d4:	tst	r9, #524288	; 0x80000
   185d8:	bne	1865c <__assert_fail@plt+0x6eb4>
   185dc:	mov	r1, #33	; 0x21
   185e0:	b	18654 <__assert_fail@plt+0x6eac>
   185e4:	tst	r9, #524288	; 0x80000
   185e8:	bne	1865c <__assert_fail@plt+0x6eb4>
   185ec:	mov	r1, #64	; 0x40
   185f0:	b	184c0 <__assert_fail@plt+0x6d18>
   185f4:	tst	r9, #524288	; 0x80000
   185f8:	bne	1865c <__assert_fail@plt+0x6eb4>
   185fc:	mov	r1, #256	; 0x100
   18600:	b	184c0 <__assert_fail@plt+0x6d18>
   18604:	tst	r9, #524288	; 0x80000
   18608:	bne	1865c <__assert_fail@plt+0x6eb4>
   1860c:	mov	r1, #34	; 0x22
   18610:	b	18654 <__assert_fail@plt+0x6eac>
   18614:	tst	r9, #524288	; 0x80000
   18618:	bne	1865c <__assert_fail@plt+0x6eb4>
   1861c:	mov	r1, #32
   18620:	b	18654 <__assert_fail@plt+0x6eac>
   18624:	and	r1, r9, #4608	; 0x1200
   18628:	cmp	r1, #512	; 0x200
   1862c:	bne	1865c <__assert_fail@plt+0x6eb4>
   18630:	mov	r1, #23
   18634:	b	18654 <__assert_fail@plt+0x6eac>
   18638:	tst	r9, #33792	; 0x8400
   1863c:	bne	1865c <__assert_fail@plt+0x6eb4>
   18640:	b	184f0 <__assert_fail@plt+0x6d48>
   18644:	and	r1, r9, #4608	; 0x1200
   18648:	cmp	r1, #512	; 0x200
   1864c:	bne	1865c <__assert_fail@plt+0x6eb4>
   18650:	mov	r1, #24
   18654:	bfi	r0, r1, #0, #8
   18658:	str	r0, [r5]
   1865c:	mov	r0, r8
   18660:	sub	sp, fp, #28
   18664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18668:	push	{fp, lr}
   1866c:	mov	fp, sp
   18670:	ldrb	r1, [r0, #75]	; 0x4b
   18674:	cmp	r1, #0
   18678:	bne	18698 <__assert_fail@plt+0x6ef0>
   1867c:	ldr	r1, [r0, #4]
   18680:	ldr	r0, [r0, #40]	; 0x28
   18684:	add	r0, r0, r1
   18688:	add	r0, r0, #1
   1868c:	ldrb	r3, [r0]
   18690:	uxtb	r0, r3
   18694:	pop	{fp, pc}
   18698:	ldr	r1, [r0, #80]	; 0x50
   1869c:	cmp	r1, #2
   186a0:	blt	186d8 <__assert_fail@plt+0x6f30>
   186a4:	ldr	r2, [r0, #8]
   186a8:	ldr	r3, [r0, #40]	; 0x28
   186ac:	add	ip, r3, #1
   186b0:	ldr	r1, [r2, ip, lsl #2]
   186b4:	cmn	r1, #1
   186b8:	beq	1871c <__assert_fail@plt+0x6f74>
   186bc:	ldr	r1, [r0, #28]
   186c0:	add	r3, r3, #2
   186c4:	cmp	r1, r3
   186c8:	beq	186d8 <__assert_fail@plt+0x6f30>
   186cc:	ldr	r1, [r2, r3, lsl #2]
   186d0:	cmn	r1, #1
   186d4:	beq	1871c <__assert_fail@plt+0x6f74>
   186d8:	ldrb	lr, [r0, #76]	; 0x4c
   186dc:	ldr	r1, [r0, #40]	; 0x28
   186e0:	add	ip, r1, #1
   186e4:	cmp	lr, #0
   186e8:	mov	r3, ip
   186ec:	beq	186f8 <__assert_fail@plt+0x6f50>
   186f0:	ldr	r3, [r0, #12]
   186f4:	ldr	r3, [r3, ip, lsl #2]
   186f8:	ldr	r1, [r0]
   186fc:	ldr	r2, [r0, #24]
   18700:	add	r2, r2, r3
   18704:	add	r1, r1, r2
   18708:	ldrsb	r3, [r1]
   1870c:	cmp	lr, #0
   18710:	beq	18690 <__assert_fail@plt+0x6ee8>
   18714:	cmn	r3, #1
   18718:	bgt	18690 <__assert_fail@plt+0x6ee8>
   1871c:	ldr	r0, [r0, #4]
   18720:	add	r0, r0, ip
   18724:	b	1868c <__assert_fail@plt+0x6ee4>
   18728:	ldr	r2, [r0, #80]	; 0x50
   1872c:	cmp	r2, #1
   18730:	bne	18740 <__assert_fail@plt+0x6f98>
   18734:	ldr	r0, [r0, #4]
   18738:	ldrb	r0, [r0, r1]
   1873c:	bx	lr
   18740:	ldr	r0, [r0, #8]
   18744:	ldr	r0, [r0, r1, lsl #2]
   18748:	bx	lr
   1874c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18750:	add	fp, sp, #28
   18754:	sub	sp, sp, #20
   18758:	mov	r6, r2
   1875c:	mov	r7, r1
   18760:	mov	r1, r0
   18764:	ldr	r0, [r7]
   18768:	str	r0, [sp, #8]
   1876c:	ldr	r5, [fp, #12]
   18770:	str	r5, [sp, #4]
   18774:	ldr	r4, [fp, #8]
   18778:	str	r4, [sp]
   1877c:	str	r1, [sp, #12]
   18780:	mov	r0, r1
   18784:	mov	r1, r7
   18788:	str	r3, [sp, #16]
   1878c:	bl	18950 <__assert_fail@plt+0x71a8>
   18790:	cmp	r0, #0
   18794:	bne	187cc <__assert_fail@plt+0x7024>
   18798:	ldr	r1, [r5]
   1879c:	cmp	r1, #0
   187a0:	beq	187cc <__assert_fail@plt+0x7024>
   187a4:	mov	r6, #0
   187a8:	b	18850 <__assert_fail@plt+0x70a8>
   187ac:	ldr	r0, [sp, #8]
   187b0:	mov	r1, r5
   187b4:	mov	r2, r8
   187b8:	mov	r3, #16
   187bc:	bl	17e7c <__assert_fail@plt+0x66d4>
   187c0:	cmp	r0, #0
   187c4:	mov	r4, r9
   187c8:	beq	1885c <__assert_fail@plt+0x70b4>
   187cc:	mov	r5, r0
   187d0:	ldrb	r0, [r6, #4]
   187d4:	orr	r1, r0, #8
   187d8:	cmp	r1, #10
   187dc:	beq	1884c <__assert_fail@plt+0x70a4>
   187e0:	cmp	r4, #0
   187e4:	beq	187f0 <__assert_fail@plt+0x7048>
   187e8:	cmp	r0, #9
   187ec:	beq	1884c <__assert_fail@plt+0x70a4>
   187f0:	mov	r9, r4
   187f4:	str	r4, [sp]
   187f8:	ldr	sl, [fp, #12]
   187fc:	str	sl, [sp, #4]
   18800:	ldr	r0, [sp, #12]
   18804:	mov	r1, r7
   18808:	mov	r2, r6
   1880c:	ldr	r3, [sp, #16]
   18810:	bl	18950 <__assert_fail@plt+0x71a8>
   18814:	mov	r8, r0
   18818:	cmp	r0, #0
   1881c:	bne	1882c <__assert_fail@plt+0x7084>
   18820:	ldr	r0, [sl]
   18824:	cmp	r0, #0
   18828:	bne	18898 <__assert_fail@plt+0x70f0>
   1882c:	cmp	r5, #0
   18830:	cmpne	r8, #0
   18834:	bne	187ac <__assert_fail@plt+0x7004>
   18838:	cmp	r5, #0
   1883c:	movne	r8, r5
   18840:	mov	r0, r8
   18844:	mov	r4, r9
   18848:	b	187cc <__assert_fail@plt+0x7024>
   1884c:	mov	r6, r5
   18850:	mov	r0, r6
   18854:	sub	sp, fp, #28
   18858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1885c:	movw	r4, #35128	; 0x8938
   18860:	movt	r4, #1
   18864:	mov	r6, #0
   18868:	mov	r0, r8
   1886c:	mov	r1, r4
   18870:	mov	r2, #0
   18874:	bl	188c0 <__assert_fail@plt+0x7118>
   18878:	mov	r0, r5
   1887c:	mov	r1, r4
   18880:	mov	r2, #0
   18884:	bl	188c0 <__assert_fail@plt+0x7118>
   18888:	mov	r0, #12
   1888c:	ldr	r1, [fp, #12]
   18890:	str	r0, [r1]
   18894:	b	18850 <__assert_fail@plt+0x70a8>
   18898:	cmp	r5, #0
   1889c:	mov	r6, #0
   188a0:	beq	18850 <__assert_fail@plt+0x70a8>
   188a4:	movw	r1, #35128	; 0x8938
   188a8:	movt	r1, #1
   188ac:	mov	r6, #0
   188b0:	mov	r0, r5
   188b4:	mov	r2, #0
   188b8:	bl	188c0 <__assert_fail@plt+0x7118>
   188bc:	b	18850 <__assert_fail@plt+0x70a8>
   188c0:	push	{r4, r5, r6, sl, fp, lr}
   188c4:	add	fp, sp, #16
   188c8:	mov	r4, r2
   188cc:	mov	r5, r1
   188d0:	b	188d8 <__assert_fail@plt+0x7130>
   188d4:	ldr	r0, [r6, #8]
   188d8:	mov	r6, r0
   188dc:	ldr	r0, [r0, #4]
   188e0:	cmp	r0, #0
   188e4:	bne	188d8 <__assert_fail@plt+0x7130>
   188e8:	ldr	r0, [r6, #8]
   188ec:	cmp	r0, #0
   188f0:	bne	188d4 <__assert_fail@plt+0x712c>
   188f4:	mov	r0, r4
   188f8:	mov	r1, r6
   188fc:	blx	r5
   18900:	cmp	r0, #0
   18904:	bne	18934 <__assert_fail@plt+0x718c>
   18908:	ldr	r1, [r6]
   1890c:	cmp	r1, #0
   18910:	beq	18934 <__assert_fail@plt+0x718c>
   18914:	ldr	r0, [r1, #8]
   18918:	cmp	r0, r6
   1891c:	mov	r6, r1
   18920:	beq	188f4 <__assert_fail@plt+0x714c>
   18924:	cmp	r0, #0
   18928:	mov	r6, r1
   1892c:	beq	188f4 <__assert_fail@plt+0x714c>
   18930:	b	188d8 <__assert_fail@plt+0x7130>
   18934:	pop	{r4, r5, r6, sl, fp, pc}
   18938:	push	{fp, lr}
   1893c:	mov	fp, sp
   18940:	add	r0, r1, #20
   18944:	bl	168f8 <__assert_fail@plt+0x5150>
   18948:	mov	r0, #0
   1894c:	pop	{fp, pc}
   18950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18954:	add	fp, sp, #28
   18958:	sub	sp, sp, #12
   1895c:	mov	r9, r3
   18960:	mov	r5, r2
   18964:	mov	r6, r1
   18968:	mov	sl, r0
   1896c:	and	ip, r3, #16
   18970:	and	r8, r3, #32
   18974:	and	r0, r3, #16777216	; 0x1000000
   18978:	str	r0, [sp, #8]
   1897c:	ldr	r3, [fp, #12]
   18980:	ldr	r4, [fp, #8]
   18984:	mvn	r1, #0
   18988:	ldr	r0, [r5, #4]
   1898c:	uxtab	r1, r1, r0
   18990:	ldr	r7, [r6]
   18994:	add	r2, pc, #0
   18998:	ldr	pc, [r2, r1, lsl #2]
   1899c:	andeq	r8, r1, r4, lsr #22
   189a0:	ldrdeq	r8, [r1], -ip
   189a4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189a8:	andeq	r8, r1, r0, ror #23
   189ac:	andeq	r8, r1, ip, lsr ip
   189b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189b4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189b8:	andeq	r8, r1, r0, lsl #25
   189bc:	ldrdeq	r8, [r1], -ip
   189c0:	ldrdeq	r8, [r1], -ip
   189c4:	andeq	r8, r1, r8, lsr sl
   189c8:	andeq	r8, r1, r8, lsr #25
   189cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189d4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189e0:	andeq	r8, r1, r8, lsr sl
   189e4:	andeq	r8, r1, r8, lsr sl
   189e8:	andeq	r8, r1, r8, ror #25
   189ec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189f0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189f4:	andeq	r8, r1, ip, lsr #20
   189f8:	andeq	r8, r1, ip, ror #21
   189fc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a00:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a08:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a0c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a10:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a14:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a18:	andeq	r8, r1, ip, ror #20
   18a1c:	andeq	r8, r1, ip, ror #20
   18a20:	andeq	r8, r1, r0, lsr #21
   18a24:	andeq	r8, r1, r0, lsr #21
   18a28:	andeq	r8, r1, r0, ror #27
   18a2c:	ldr	r1, [sp, #8]
   18a30:	cmp	r1, #0
   18a34:	bne	18eac <__assert_fail@plt+0x7704>
   18a38:	cmp	r8, #0
   18a3c:	bne	18eac <__assert_fail@plt+0x7704>
   18a40:	cmp	ip, #0
   18a44:	beq	18adc <__assert_fail@plt+0x7334>
   18a48:	mov	r0, r5
   18a4c:	mov	r1, sl
   18a50:	mov	r2, r9
   18a54:	mov	r7, ip
   18a58:	bl	17cf4 <__assert_fail@plt+0x654c>
   18a5c:	mvn	r1, #0
   18a60:	mov	ip, r7
   18a64:	ldr	r3, [fp, #12]
   18a68:	b	18988 <__assert_fail@plt+0x71e0>
   18a6c:	mov	r8, sl
   18a70:	ldr	r1, [sl, #64]	; 0x40
   18a74:	mvn	r2, #32
   18a78:	uxtab	r0, r2, r0
   18a7c:	clz	r0, r0
   18a80:	lsr	r0, r0, #5
   18a84:	stm	sp, {r0, r3}
   18a88:	movw	r2, #17270	; 0x4376
   18a8c:	movt	r2, #2
   18a90:	mov	r4, r3
   18a94:	movw	r3, #15813	; 0x3dc5
   18a98:	movt	r3, #2
   18a9c:	b	18ad0 <__assert_fail@plt+0x7328>
   18aa0:	mov	r8, sl
   18aa4:	ldr	r1, [sl, #64]	; 0x40
   18aa8:	mvn	r2, #34	; 0x22
   18aac:	uxtab	r0, r2, r0
   18ab0:	clz	r0, r0
   18ab4:	lsr	r0, r0, #5
   18ab8:	stm	sp, {r0, r3}
   18abc:	movw	r2, #17276	; 0x437c
   18ac0:	movt	r2, #2
   18ac4:	mov	r4, r3
   18ac8:	movw	r3, #15963	; 0x3e5b
   18acc:	movt	r3, #2
   18ad0:	mov	r0, r7
   18ad4:	bl	196c0 <__assert_fail@plt+0x7f18>
   18ad8:	b	18d08 <__assert_fail@plt+0x7560>
   18adc:	tst	r9, #131072	; 0x20000
   18ae0:	uxtbeq	r1, r0
   18ae4:	cmpeq	r1, #9
   18ae8:	beq	18dec <__assert_fail@plt+0x7644>
   18aec:	mov	r1, #1
   18af0:	bfi	r0, r1, #0, #8
   18af4:	str	r0, [r5, #4]
   18af8:	mov	r4, #0
   18afc:	mov	r0, r7
   18b00:	mov	r1, #0
   18b04:	mov	r2, #0
   18b08:	mov	r3, r5
   18b0c:	bl	18ef8 <__assert_fail@plt+0x7750>
   18b10:	mov	r6, r0
   18b14:	cmp	r0, #0
   18b18:	mov	r8, sl
   18b1c:	bne	18d20 <__assert_fail@plt+0x7578>
   18b20:	b	18e60 <__assert_fail@plt+0x76b8>
   18b24:	mov	r4, #0
   18b28:	mov	r0, r7
   18b2c:	mov	r1, #0
   18b30:	mov	r2, #0
   18b34:	mov	r3, r5
   18b38:	bl	18ef8 <__assert_fail@plt+0x7750>
   18b3c:	cmp	r0, #0
   18b40:	beq	18e60 <__assert_fail@plt+0x76b8>
   18b44:	mov	r6, r0
   18b48:	ldr	r0, [r7, #92]	; 0x5c
   18b4c:	cmp	r0, #2
   18b50:	mov	r8, sl
   18b54:	blt	18d20 <__assert_fail@plt+0x7578>
   18b58:	ldr	r0, [r8, #40]	; 0x28
   18b5c:	ldr	r1, [r8, #56]	; 0x38
   18b60:	cmp	r1, r0
   18b64:	ble	18d20 <__assert_fail@plt+0x7578>
   18b68:	ldr	r1, [r8, #28]
   18b6c:	cmp	r0, r1
   18b70:	beq	18d20 <__assert_fail@plt+0x7578>
   18b74:	ldr	r1, [r8, #8]
   18b78:	ldr	r0, [r1, r0, lsl #2]
   18b7c:	cmn	r0, #1
   18b80:	bne	18d20 <__assert_fail@plt+0x7578>
   18b84:	mov	r0, r5
   18b88:	mov	r1, r8
   18b8c:	mov	r2, r9
   18b90:	bl	17cf4 <__assert_fail@plt+0x654c>
   18b94:	mov	r0, r7
   18b98:	mov	r1, #0
   18b9c:	mov	r2, #0
   18ba0:	mov	r3, r5
   18ba4:	bl	18ef8 <__assert_fail@plt+0x7750>
   18ba8:	mov	r4, r0
   18bac:	mov	r0, r7
   18bb0:	mov	r1, r6
   18bb4:	mov	r2, r4
   18bb8:	mov	r3, #16
   18bbc:	bl	17e7c <__assert_fail@plt+0x66d4>
   18bc0:	cmp	r4, #0
   18bc4:	ldr	r1, [fp, #12]
   18bc8:	movne	r6, r0
   18bcc:	cmpne	r0, #0
   18bd0:	bne	18b58 <__assert_fail@plt+0x73b0>
   18bd4:	mov	r0, #12
   18bd8:	str	r0, [r1]
   18bdc:	b	18edc <__assert_fail@plt+0x7734>
   18be0:	ldr	r0, [r5]
   18be4:	mov	r1, #1
   18be8:	ldr	r2, [r7, #84]	; 0x54
   18bec:	tst	r2, r1, lsl r0
   18bf0:	beq	18eec <__assert_fail@plt+0x7744>
   18bf4:	lsl	r0, r1, r0
   18bf8:	ldr	r1, [r7, #80]	; 0x50
   18bfc:	orr	r0, r1, r0
   18c00:	str	r0, [r7, #80]	; 0x50
   18c04:	mov	r4, #0
   18c08:	mov	r0, r7
   18c0c:	mov	r1, #0
   18c10:	mov	r2, #0
   18c14:	mov	r3, r5
   18c18:	bl	18ef8 <__assert_fail@plt+0x7750>
   18c1c:	cmp	r0, #0
   18c20:	beq	18e60 <__assert_fail@plt+0x76b8>
   18c24:	mov	r6, r0
   18c28:	mov	r8, sl
   18c2c:	ldr	r0, [r7, #76]	; 0x4c
   18c30:	add	r0, r0, #1
   18c34:	str	r0, [r7, #76]	; 0x4c
   18c38:	b	18c70 <__assert_fail@plt+0x74c8>
   18c3c:	mov	r4, #0
   18c40:	mov	r0, r7
   18c44:	mov	r1, #0
   18c48:	mov	r2, #0
   18c4c:	mov	r3, r5
   18c50:	bl	18ef8 <__assert_fail@plt+0x7750>
   18c54:	cmp	r0, #0
   18c58:	beq	18e60 <__assert_fail@plt+0x76b8>
   18c5c:	mov	r6, r0
   18c60:	ldr	r0, [r7, #92]	; 0x5c
   18c64:	cmp	r0, #2
   18c68:	mov	r8, sl
   18c6c:	blt	18d20 <__assert_fail@plt+0x7578>
   18c70:	ldrb	r0, [r7, #88]	; 0x58
   18c74:	orr	r0, r0, #2
   18c78:	strb	r0, [r7, #88]	; 0x58
   18c7c:	b	18d20 <__assert_fail@plt+0x7578>
   18c80:	add	r0, r4, #1
   18c84:	stm	sp, {r0, r3}
   18c88:	mov	r8, sl
   18c8c:	mov	r0, sl
   18c90:	mov	r1, r6
   18c94:	mov	r2, r5
   18c98:	mov	r4, r3
   18c9c:	mov	r3, r9
   18ca0:	bl	18fa4 <__assert_fail@plt+0x77fc>
   18ca4:	b	18d08 <__assert_fail@plt+0x7560>
   18ca8:	ldr	r0, [r5]
   18cac:	movw	r1, #783	; 0x30f
   18cb0:	tst	r0, r1
   18cb4:	beq	18ccc <__assert_fail@plt+0x7524>
   18cb8:	ldrb	r0, [r7, #88]	; 0x58
   18cbc:	tst	r0, #16
   18cc0:	moveq	r0, r7
   18cc4:	bleq	195d8 <__assert_fail@plt+0x7e30>
   18cc8:	ldr	r0, [r5]
   18ccc:	cmp	r0, #256	; 0x100
   18cd0:	beq	18df8 <__assert_fail@plt+0x7650>
   18cd4:	cmp	r0, #512	; 0x200
   18cd8:	bne	18e70 <__assert_fail@plt+0x76c8>
   18cdc:	mov	r6, #10
   18ce0:	mov	r0, #5
   18ce4:	b	18e00 <__assert_fail@plt+0x7658>
   18ce8:	str	r3, [sp]
   18cec:	mov	r8, sl
   18cf0:	mov	r0, sl
   18cf4:	mov	r1, r7
   18cf8:	mov	r2, r5
   18cfc:	mov	r4, r3
   18d00:	mov	r3, r9
   18d04:	bl	190bc <__assert_fail@plt+0x7914>
   18d08:	mov	r6, r0
   18d0c:	cmp	r0, #0
   18d10:	bne	18d20 <__assert_fail@plt+0x7578>
   18d14:	ldr	r0, [r4]
   18d18:	cmp	r0, #0
   18d1c:	bne	18edc <__assert_fail@plt+0x7734>
   18d20:	mov	r0, r5
   18d24:	mov	r1, r8
   18d28:	mov	r2, r9
   18d2c:	bl	17cf4 <__assert_fail@plt+0x654c>
   18d30:	mov	r4, #1
   18d34:	movw	r8, #2048	; 0x800
   18d38:	movt	r8, #140	; 0x8c
   18d3c:	ldr	r2, [fp, #12]
   18d40:	ldrb	r0, [r5, #4]
   18d44:	cmp	r0, #23
   18d48:	bhi	18dd8 <__assert_fail@plt+0x7630>
   18d4c:	tst	r8, r4, lsl r0
   18d50:	beq	18dd8 <__assert_fail@plt+0x7630>
   18d54:	str	r9, [sp]
   18d58:	str	r2, [sp, #4]
   18d5c:	mov	r0, r6
   18d60:	mov	r1, sl
   18d64:	mov	r2, r7
   18d68:	mov	r3, r5
   18d6c:	bl	198b0 <__assert_fail@plt+0x8108>
   18d70:	ldr	r2, [fp, #12]
   18d74:	cmp	r0, #0
   18d78:	bne	18d88 <__assert_fail@plt+0x75e0>
   18d7c:	ldr	r1, [r2]
   18d80:	cmp	r1, #0
   18d84:	bne	18eb8 <__assert_fail@plt+0x7710>
   18d88:	ldr	r1, [sp, #8]
   18d8c:	cmp	r1, #0
   18d90:	mov	r6, r0
   18d94:	beq	18d40 <__assert_fail@plt+0x7598>
   18d98:	ldrb	r1, [r5, #4]
   18d9c:	cmp	r1, #23
   18da0:	beq	18db0 <__assert_fail@plt+0x7608>
   18da4:	cmp	r1, #11
   18da8:	mov	r6, r0
   18dac:	bne	18d40 <__assert_fail@plt+0x7598>
   18db0:	cmp	r0, #0
   18db4:	beq	18dcc <__assert_fail@plt+0x7624>
   18db8:	movw	r1, #35128	; 0x8938
   18dbc:	movt	r1, #1
   18dc0:	mov	r2, #0
   18dc4:	bl	188c0 <__assert_fail@plt+0x7118>
   18dc8:	ldr	r2, [fp, #12]
   18dcc:	mov	r0, #13
   18dd0:	str	r0, [r2]
   18dd4:	b	18edc <__assert_fail@plt+0x7734>
   18dd8:	mov	r4, r6
   18ddc:	b	18ee0 <__assert_fail@plt+0x7738>
   18de0:	mov	r0, #5
   18de4:	str	r0, [r3]
   18de8:	b	18edc <__assert_fail@plt+0x7734>
   18dec:	mov	r0, #16
   18df0:	str	r0, [r3]
   18df4:	b	18edc <__assert_fail@plt+0x7734>
   18df8:	mov	r6, #9
   18dfc:	mov	r0, #6
   18e00:	str	r0, [r5]
   18e04:	mov	r4, #0
   18e08:	mov	r0, r7
   18e0c:	mov	r1, #0
   18e10:	mov	r2, #0
   18e14:	mov	r3, r5
   18e18:	bl	18ef8 <__assert_fail@plt+0x7750>
   18e1c:	mov	r8, r0
   18e20:	str	r6, [r5]
   18e24:	mov	r0, r7
   18e28:	mov	r1, #0
   18e2c:	mov	r2, #0
   18e30:	mov	r3, r5
   18e34:	bl	18ef8 <__assert_fail@plt+0x7750>
   18e38:	mov	r1, r0
   18e3c:	mov	r0, r7
   18e40:	mov	r7, r1
   18e44:	mov	r1, r8
   18e48:	mov	r2, r7
   18e4c:	mov	r3, #10
   18e50:	bl	17e7c <__assert_fail@plt+0x66d4>
   18e54:	cmp	r8, #0
   18e58:	cmpne	r7, #0
   18e5c:	bne	18e88 <__assert_fail@plt+0x76e0>
   18e60:	mov	r0, #12
   18e64:	ldr	r1, [fp, #12]
   18e68:	str	r0, [r1]
   18e6c:	b	18ee0 <__assert_fail@plt+0x7738>
   18e70:	mov	r4, #0
   18e74:	mov	r0, r7
   18e78:	mov	r1, #0
   18e7c:	mov	r2, #0
   18e80:	mov	r3, r5
   18e84:	bl	18ef8 <__assert_fail@plt+0x7750>
   18e88:	mov	r6, r0
   18e8c:	cmp	r0, #0
   18e90:	beq	18e60 <__assert_fail@plt+0x76b8>
   18e94:	mov	r0, r5
   18e98:	mov	r1, sl
   18e9c:	mov	r2, r9
   18ea0:	bl	17cf4 <__assert_fail@plt+0x654c>
   18ea4:	mov	r4, r6
   18ea8:	b	18ee0 <__assert_fail@plt+0x7738>
   18eac:	mov	r0, #13
   18eb0:	str	r0, [r3]
   18eb4:	b	18edc <__assert_fail@plt+0x7734>
   18eb8:	cmp	r6, #0
   18ebc:	beq	18edc <__assert_fail@plt+0x7734>
   18ec0:	movw	r1, #35128	; 0x8938
   18ec4:	movt	r1, #1
   18ec8:	mov	r4, #0
   18ecc:	mov	r0, r6
   18ed0:	mov	r2, #0
   18ed4:	bl	188c0 <__assert_fail@plt+0x7118>
   18ed8:	b	18ee0 <__assert_fail@plt+0x7738>
   18edc:	mov	r4, #0
   18ee0:	mov	r0, r4
   18ee4:	sub	sp, fp, #28
   18ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eec:	mov	r0, #6
   18ef0:	ldr	r1, [fp, #12]
   18ef4:	b	18bd8 <__assert_fail@plt+0x7430>
   18ef8:	push	{r4, r5, r6, r7, fp, lr}
   18efc:	add	fp, sp, #16
   18f00:	mov	r6, r3
   18f04:	mov	r4, r2
   18f08:	mov	r5, r1
   18f0c:	mov	r7, r0
   18f10:	ldr	r0, [r0, #64]	; 0x40
   18f14:	cmp	r0, #31
   18f18:	beq	18f74 <__assert_fail@plt+0x77cc>
   18f1c:	ldr	r0, [r7, #56]	; 0x38
   18f20:	ldr	r1, [r7, #64]	; 0x40
   18f24:	add	r2, r1, #1
   18f28:	str	r2, [r7, #64]	; 0x40
   18f2c:	add	r0, r0, r1, lsl #5
   18f30:	mov	r1, #0
   18f34:	str	r1, [r0, #4]!
   18f38:	str	r4, [r0, #8]
   18f3c:	str	r5, [r0, #4]
   18f40:	ldm	r6, {r2, r3}
   18f44:	mvn	r7, #0
   18f48:	str	r7, [r0, #28]
   18f4c:	str	r1, [r0, #16]
   18f50:	str	r1, [r0, #12]
   18f54:	str	r2, [r0, #20]
   18f58:	bic	r1, r3, #786432	; 0xc0000
   18f5c:	str	r1, [r0, #24]
   18f60:	cmp	r5, #0
   18f64:	strne	r0, [r5]
   18f68:	cmp	r4, #0
   18f6c:	strne	r0, [r4]
   18f70:	pop	{r4, r5, r6, r7, fp, pc}
   18f74:	mov	r0, #996	; 0x3e4
   18f78:	bl	22ab8 <__assert_fail@plt+0x11310>
   18f7c:	cmp	r0, #0
   18f80:	beq	18f9c <__assert_fail@plt+0x77f4>
   18f84:	ldr	r1, [r7, #56]	; 0x38
   18f88:	str	r1, [r0]
   18f8c:	mov	r1, #0
   18f90:	str	r1, [r7, #64]	; 0x40
   18f94:	str	r0, [r7, #56]	; 0x38
   18f98:	b	18f1c <__assert_fail@plt+0x7774>
   18f9c:	mov	r0, #0
   18fa0:	pop	{r4, r5, r6, r7, fp, pc}
   18fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fa8:	add	fp, sp, #28
   18fac:	sub	sp, sp, #12
   18fb0:	mov	r5, r3
   18fb4:	mov	r6, r2
   18fb8:	mov	r7, r1
   18fbc:	mov	r4, r0
   18fc0:	ldr	r8, [r1]
   18fc4:	ldr	sl, [r1, #24]
   18fc8:	add	r0, sl, #1
   18fcc:	str	r0, [r1, #24]
   18fd0:	orr	r2, r3, #8388608	; 0x800000
   18fd4:	mov	r0, r6
   18fd8:	mov	r1, r4
   18fdc:	bl	17cf4 <__assert_fail@plt+0x654c>
   18fe0:	ldrb	r0, [r6, #4]
   18fe4:	mov	r1, #0
   18fe8:	ldr	r9, [fp, #12]
   18fec:	cmp	r0, #9
   18ff0:	beq	1903c <__assert_fail@plt+0x7894>
   18ff4:	ldr	r0, [fp, #8]
   18ff8:	stm	sp, {r0, r9}
   18ffc:	mov	r0, r4
   19000:	mov	r1, r7
   19004:	mov	r2, r6
   19008:	mov	r3, r5
   1900c:	bl	17d14 <__assert_fail@plt+0x656c>
   19010:	mov	r1, r0
   19014:	ldr	r0, [r9]
   19018:	mov	r5, #0
   1901c:	cmp	r0, #0
   19020:	bne	19078 <__assert_fail@plt+0x78d0>
   19024:	ldrb	r0, [r6, #4]
   19028:	cmp	r0, #9
   1902c:	bne	19090 <__assert_fail@plt+0x78e8>
   19030:	ldr	r0, [r9]
   19034:	cmp	r0, #0
   19038:	bne	19078 <__assert_fail@plt+0x78d0>
   1903c:	cmp	sl, #8
   19040:	bhi	19054 <__assert_fail@plt+0x78ac>
   19044:	ldr	r0, [r8, #84]	; 0x54
   19048:	mov	r2, #1
   1904c:	orr	r0, r0, r2, lsl sl
   19050:	str	r0, [r8, #84]	; 0x54
   19054:	mov	r5, #0
   19058:	mov	r0, r8
   1905c:	mov	r2, #0
   19060:	mov	r3, #17
   19064:	bl	17e7c <__assert_fail@plt+0x66d4>
   19068:	cmp	r0, #0
   1906c:	beq	19084 <__assert_fail@plt+0x78dc>
   19070:	str	sl, [r0, #20]
   19074:	mov	r5, r0
   19078:	mov	r0, r5
   1907c:	sub	sp, fp, #28
   19080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19084:	mov	r0, #12
   19088:	str	r0, [r9]
   1908c:	b	19078 <__assert_fail@plt+0x78d0>
   19090:	cmp	r1, #0
   19094:	beq	190b0 <__assert_fail@plt+0x7908>
   19098:	movw	r2, #35128	; 0x8938
   1909c:	movt	r2, #1
   190a0:	mov	r0, r1
   190a4:	mov	r1, r2
   190a8:	mov	r2, #0
   190ac:	bl	188c0 <__assert_fail@plt+0x7118>
   190b0:	mov	r0, #8
   190b4:	str	r0, [r9]
   190b8:	b	19078 <__assert_fail@plt+0x78d0>
   190bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190c0:	add	fp, sp, #28
   190c4:	sub	sp, sp, #124	; 0x7c
   190c8:	mov	r8, r3
   190cc:	mov	r6, r2
   190d0:	mov	r9, r1
   190d4:	mov	r7, r0
   190d8:	mov	r5, #0
   190dc:	str	r5, [fp, #-32]	; 0xffffffe0
   190e0:	str	r5, [fp, #-36]	; 0xffffffdc
   190e4:	mov	r0, #32
   190e8:	mov	r1, #1
   190ec:	bl	22a64 <__assert_fail@plt+0x112bc>
   190f0:	mov	r4, r0
   190f4:	mov	r0, #40	; 0x28
   190f8:	mov	r1, #1
   190fc:	bl	22a64 <__assert_fail@plt+0x112bc>
   19100:	mov	sl, r0
   19104:	cmp	r4, #0
   19108:	cmpne	sl, #0
   1910c:	beq	19590 <__assert_fail@plt+0x7de8>
   19110:	mov	r0, r6
   19114:	mov	r1, r7
   19118:	mov	r2, r8
   1911c:	bl	19be4 <__assert_fail@plt+0x843c>
   19120:	mov	r5, r0
   19124:	ldrb	r0, [r6, #4]
   19128:	cmp	r0, #25
   1912c:	beq	19140 <__assert_fail@plt+0x7998>
   19130:	cmp	r0, #2
   19134:	beq	19588 <__assert_fail@plt+0x7de0>
   19138:	mov	r0, #0
   1913c:	b	1918c <__assert_fail@plt+0x79e4>
   19140:	ldrb	r0, [sl, #16]
   19144:	orr	r0, r0, #1
   19148:	strb	r0, [sl, #16]
   1914c:	tst	r8, #256	; 0x100
   19150:	movne	r0, r4
   19154:	movne	r1, #10
   19158:	blne	19d58 <__assert_fail@plt+0x85b0>
   1915c:	ldr	r0, [r7, #40]	; 0x28
   19160:	add	r0, r0, r5
   19164:	str	r0, [r7, #40]	; 0x28
   19168:	mov	r0, r6
   1916c:	mov	r1, r7
   19170:	mov	r2, r8
   19174:	bl	19be4 <__assert_fail@plt+0x843c>
   19178:	mov	r5, r0
   1917c:	ldrb	r0, [r6, #4]
   19180:	cmp	r0, #2
   19184:	beq	19588 <__assert_fail@plt+0x7de0>
   19188:	mov	r0, #1
   1918c:	str	r0, [sp, #20]
   19190:	ldr	r0, [r6, #4]
   19194:	uxtb	r1, r0
   19198:	cmp	r1, #21
   1919c:	moveq	r1, #1
   191a0:	bfieq	r0, r1, #0, #8
   191a4:	streq	r0, [r6, #4]
   191a8:	str	sl, [sp, #24]
   191ac:	add	r0, sp, #68	; 0x44
   191b0:	str	r0, [fp, #-40]	; 0xffffffd8
   191b4:	mov	r0, #3
   191b8:	str	r0, [fp, #-44]	; 0xffffffd4
   191bc:	mov	r0, #1
   191c0:	str	r8, [sp]
   191c4:	str	r0, [sp, #4]
   191c8:	sub	r0, fp, #44	; 0x2c
   191cc:	mov	r1, r7
   191d0:	mov	r2, r6
   191d4:	mov	r3, r5
   191d8:	bl	19d7c <__assert_fail@plt+0x85d4>
   191dc:	cmp	r0, #0
   191e0:	bne	19578 <__assert_fail@plt+0x7dd0>
   191e4:	mov	r0, #0
   191e8:	str	r0, [sp, #16]
   191ec:	mov	r0, r6
   191f0:	mov	r1, r7
   191f4:	mov	r2, r8
   191f8:	bl	19be4 <__assert_fail@plt+0x843c>
   191fc:	mov	sl, r0
   19200:	ldr	r5, [fp, #-44]	; 0xffffffd4
   19204:	cmp	r5, #2
   19208:	beq	1932c <__assert_fail@plt+0x7b84>
   1920c:	cmp	r5, #4
   19210:	bne	19234 <__assert_fail@plt+0x7a8c>
   19214:	ldr	r0, [r7, #64]	; 0x40
   19218:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1921c:	stm	sp, {r1, r8}
   19220:	mov	r1, r4
   19224:	ldr	r2, [sp, #24]
   19228:	sub	r3, fp, #36	; 0x24
   1922c:	bl	1a11c <__assert_fail@plt+0x8974>
   19230:	b	19338 <__assert_fail@plt+0x7b90>
   19234:	ldrb	r0, [r6, #4]
   19238:	cmp	r0, #22
   1923c:	beq	1924c <__assert_fail@plt+0x7aa4>
   19240:	cmp	r0, #2
   19244:	bne	19304 <__assert_fail@plt+0x7b5c>
   19248:	b	19574 <__assert_fail@plt+0x7dcc>
   1924c:	ldr	r0, [r7, #40]	; 0x28
   19250:	add	r0, r0, sl
   19254:	str	r0, [r7, #40]	; 0x28
   19258:	add	r0, sp, #28
   1925c:	mov	r1, r7
   19260:	mov	r2, r8
   19264:	bl	19be4 <__assert_fail@plt+0x843c>
   19268:	mov	r3, r0
   1926c:	ldrb	r0, [sp, #32]
   19270:	cmp	r0, #21
   19274:	beq	192f0 <__assert_fail@plt+0x7b48>
   19278:	cmp	r0, #2
   1927c:	sub	r1, fp, #52	; 0x34
   19280:	beq	19574 <__assert_fail@plt+0x7dcc>
   19284:	mov	r0, #3
   19288:	str	r0, [fp, #-52]	; 0xffffffcc
   1928c:	add	r0, sp, #36	; 0x24
   19290:	str	r0, [fp, #-48]	; 0xffffffd0
   19294:	str	r8, [sp]
   19298:	mov	r0, #1
   1929c:	str	r0, [sp, #4]
   192a0:	mov	r0, r1
   192a4:	mov	r5, r1
   192a8:	mov	r1, r7
   192ac:	add	r2, sp, #28
   192b0:	bl	19d7c <__assert_fail@plt+0x85d4>
   192b4:	cmp	r0, #0
   192b8:	bne	19578 <__assert_fail@plt+0x7dd0>
   192bc:	mov	r0, r6
   192c0:	mov	r1, r7
   192c4:	mov	r2, r8
   192c8:	bl	19be4 <__assert_fail@plt+0x843c>
   192cc:	mov	sl, r0
   192d0:	stm	sp, {r5, r9}
   192d4:	str	r8, [sp, #8]
   192d8:	mov	r0, r4
   192dc:	ldr	r1, [sp, #24]
   192e0:	sub	r2, fp, #32
   192e4:	sub	r3, fp, #44	; 0x2c
   192e8:	bl	19e84 <__assert_fail@plt+0x86dc>
   192ec:	b	19338 <__assert_fail@plt+0x7b90>
   192f0:	ldr	r0, [r7, #40]	; 0x28
   192f4:	sub	r0, r0, sl
   192f8:	str	r0, [r7, #40]	; 0x28
   192fc:	mov	r0, #1
   19300:	strb	r0, [r6, #4]
   19304:	add	r0, pc, #0
   19308:	ldr	pc, [r0, r5, lsl #2]
   1930c:	andeq	r9, r1, ip, lsl r3
   19310:	muleq	r1, r8, r3
   19314:	andeq	r9, r1, ip, lsr #6
   19318:	andeq	r9, r1, r8, asr #7
   1931c:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   19320:	mov	r0, r4
   19324:	bl	19d58 <__assert_fail@plt+0x85b0>
   19328:	b	19348 <__assert_fail@plt+0x7ba0>
   1932c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19330:	mov	r0, r4
   19334:	bl	1a0a4 <__assert_fail@plt+0x88fc>
   19338:	ldr	r1, [fp, #8]
   1933c:	str	r0, [r1]
   19340:	cmp	r0, #0
   19344:	bne	19580 <__assert_fail@plt+0x7dd8>
   19348:	ldrb	r0, [r6, #4]
   1934c:	cmp	r0, #21
   19350:	beq	19400 <__assert_fail@plt+0x7c58>
   19354:	cmp	r0, #2
   19358:	beq	19574 <__assert_fail@plt+0x7dcc>
   1935c:	add	r0, sp, #68	; 0x44
   19360:	str	r0, [fp, #-40]	; 0xffffffd8
   19364:	mov	r0, #3
   19368:	str	r0, [fp, #-44]	; 0xffffffd4
   1936c:	str	r8, [sp]
   19370:	mov	r0, #0
   19374:	str	r0, [sp, #4]
   19378:	sub	r0, fp, #44	; 0x2c
   1937c:	mov	r1, r7
   19380:	mov	r2, r6
   19384:	mov	r3, sl
   19388:	bl	19d7c <__assert_fail@plt+0x85d4>
   1938c:	cmp	r0, #0
   19390:	beq	191ec <__assert_fail@plt+0x7a44>
   19394:	b	19578 <__assert_fail@plt+0x7dd0>
   19398:	ldr	r5, [sp, #24]
   1939c:	ldr	r0, [r5, #20]
   193a0:	ldr	r1, [sp, #16]
   193a4:	cmp	r1, r0
   193a8:	beq	193d8 <__assert_fail@plt+0x7c30>
   193ac:	ldr	r0, [r5]
   193b0:	ldr	r1, [r5, #20]
   193b4:	add	r2, r1, #1
   193b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   193bc:	str	r2, [r5, #20]
   193c0:	str	r3, [r0, r1, lsl #2]
   193c4:	b	19348 <__assert_fail@plt+0x7ba0>
   193c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   193cc:	mov	r0, r4
   193d0:	bl	1a0e0 <__assert_fail@plt+0x8938>
   193d4:	b	19338 <__assert_fail@plt+0x7b90>
   193d8:	mov	r1, #1
   193dc:	orr	r0, r1, r0, lsl #1
   193e0:	str	r0, [sp, #16]
   193e4:	lsl	r1, r0, #2
   193e8:	ldr	r0, [r5]
   193ec:	bl	22ae8 <__assert_fail@plt+0x11340>
   193f0:	cmp	r0, #0
   193f4:	beq	195b0 <__assert_fail@plt+0x7e08>
   193f8:	str	r0, [r5]
   193fc:	b	193ac <__assert_fail@plt+0x7c04>
   19400:	ldr	r0, [r7, #40]	; 0x28
   19404:	add	r0, r0, sl
   19408:	str	r0, [r7, #40]	; 0x28
   1940c:	ldr	r0, [sp, #20]
   19410:	cmp	r0, #0
   19414:	movne	r0, r4
   19418:	blne	1a978 <__assert_fail@plt+0x91d0>
   1941c:	ldr	r0, [r9, #92]	; 0x5c
   19420:	cmp	r0, #2
   19424:	ldr	sl, [sp, #24]
   19428:	blt	19438 <__assert_fail@plt+0x7c90>
   1942c:	ldr	r1, [r9, #60]	; 0x3c
   19430:	mov	r0, r4
   19434:	bl	1a998 <__assert_fail@plt+0x91f0>
   19438:	ldr	r0, [sl, #20]
   1943c:	cmp	r0, #0
   19440:	bne	19468 <__assert_fail@plt+0x7cc0>
   19444:	ldr	r0, [sl, #24]
   19448:	cmp	r0, #0
   1944c:	bne	19468 <__assert_fail@plt+0x7cc0>
   19450:	ldr	r0, [sl, #28]
   19454:	cmp	r0, #0
   19458:	bne	19468 <__assert_fail@plt+0x7cc0>
   1945c:	ldr	r0, [sl, #32]
   19460:	cmp	r0, #0
   19464:	beq	19524 <__assert_fail@plt+0x7d7c>
   19468:	ldrb	r0, [r9, #88]	; 0x58
   1946c:	orr	r0, r0, #2
   19470:	strb	r0, [r9, #88]	; 0x58
   19474:	str	sl, [sp, #68]	; 0x44
   19478:	ldr	r7, [sp, #72]	; 0x48
   1947c:	mov	r0, #6
   19480:	strb	r0, [sp, #72]	; 0x48
   19484:	mov	r6, #0
   19488:	add	r3, sp, #68	; 0x44
   1948c:	mov	r0, r9
   19490:	mov	r1, #0
   19494:	mov	r2, #0
   19498:	bl	18ef8 <__assert_fail@plt+0x7750>
   1949c:	cmp	r0, #0
   194a0:	beq	195b4 <__assert_fail@plt+0x7e0c>
   194a4:	mov	r5, r0
   194a8:	bic	r0, r7, #255	; 0xff
   194ac:	ldr	r1, [r4, r6, lsl #2]
   194b0:	cmp	r1, #0
   194b4:	bne	194d0 <__assert_fail@plt+0x7d28>
   194b8:	add	r6, r6, #1
   194bc:	cmp	r6, #8
   194c0:	bne	194ac <__assert_fail@plt+0x7d04>
   194c4:	mov	r0, r4
   194c8:	bl	13140 <__assert_fail@plt+0x1998>
   194cc:	b	19518 <__assert_fail@plt+0x7d70>
   194d0:	str	r4, [sp, #68]	; 0x44
   194d4:	orr	r0, r0, #3
   194d8:	str	r0, [sp, #72]	; 0x48
   194dc:	add	r3, sp, #68	; 0x44
   194e0:	mov	r0, r9
   194e4:	mov	r1, #0
   194e8:	mov	r2, #0
   194ec:	bl	18ef8 <__assert_fail@plt+0x7750>
   194f0:	cmp	r0, #0
   194f4:	beq	195b4 <__assert_fail@plt+0x7e0c>
   194f8:	mov	r1, r0
   194fc:	mov	r0, r9
   19500:	mov	r2, r5
   19504:	mov	r3, #10
   19508:	bl	17e7c <__assert_fail@plt+0x66d4>
   1950c:	mov	r5, r0
   19510:	cmp	r0, #0
   19514:	beq	195b4 <__assert_fail@plt+0x7e0c>
   19518:	mov	r0, r5
   1951c:	sub	sp, fp, #28
   19520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19524:	ldr	r0, [r9, #92]	; 0x5c
   19528:	cmp	r0, #2
   1952c:	blt	19548 <__assert_fail@plt+0x7da0>
   19530:	ldr	r0, [sl, #36]	; 0x24
   19534:	cmp	r0, #0
   19538:	bne	19468 <__assert_fail@plt+0x7cc0>
   1953c:	ldrb	r0, [sl, #16]
   19540:	tst	r0, #1
   19544:	bne	19468 <__assert_fail@plt+0x7cc0>
   19548:	mov	r0, sl
   1954c:	bl	16988 <__assert_fail@plt+0x51e0>
   19550:	str	r4, [sp, #68]	; 0x44
   19554:	mov	r0, #3
   19558:	strb	r0, [sp, #72]	; 0x48
   1955c:	add	r3, sp, #68	; 0x44
   19560:	mov	r0, r9
   19564:	mov	r1, #0
   19568:	mov	r2, #0
   1956c:	bl	18ef8 <__assert_fail@plt+0x7750>
   19570:	b	1950c <__assert_fail@plt+0x7d64>
   19574:	mov	r0, #7
   19578:	ldr	r1, [fp, #8]
   1957c:	str	r0, [r1]
   19580:	ldr	sl, [sp, #24]
   19584:	b	195c0 <__assert_fail@plt+0x7e18>
   19588:	mov	r0, #2
   1958c:	b	195b8 <__assert_fail@plt+0x7e10>
   19590:	mov	r0, r4
   19594:	bl	13140 <__assert_fail@plt+0x1998>
   19598:	mov	r0, sl
   1959c:	bl	13140 <__assert_fail@plt+0x1998>
   195a0:	mov	r0, #12
   195a4:	ldr	r1, [fp, #8]
   195a8:	str	r0, [r1]
   195ac:	b	19518 <__assert_fail@plt+0x7d70>
   195b0:	mov	sl, r5
   195b4:	mov	r0, #12
   195b8:	ldr	r1, [fp, #8]
   195bc:	str	r0, [r1]
   195c0:	mov	r0, r4
   195c4:	bl	13140 <__assert_fail@plt+0x1998>
   195c8:	mov	r0, sl
   195cc:	bl	16988 <__assert_fail@plt+0x51e0>
   195d0:	mov	r5, #0
   195d4:	b	19518 <__assert_fail@plt+0x7d70>
   195d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   195dc:	add	fp, sp, #24
   195e0:	mov	r4, r0
   195e4:	ldrb	r0, [r0, #88]	; 0x58
   195e8:	orr	r1, r0, #16
   195ec:	strb	r1, [r4, #88]	; 0x58
   195f0:	tst	r0, #8
   195f4:	bne	19634 <__assert_fail@plt+0x7e8c>
   195f8:	mvn	r1, #-134217727	; 0xf8000001
   195fc:	mvn	r2, #2013265921	; 0x78000001
   19600:	movw	r3, #0
   19604:	movt	r3, #1023	; 0x3ff
   19608:	mov	r7, #0
   1960c:	str	r7, [r4, #96]	; 0x60
   19610:	str	r3, [r4, #100]	; 0x64
   19614:	str	r2, [r4, #104]	; 0x68
   19618:	str	r1, [r4, #108]	; 0x6c
   1961c:	tst	r0, #4
   19620:	beq	19640 <__assert_fail@plt+0x7e98>
   19624:	vmov.i32	q8, #0	; 0x00000000
   19628:	add	r0, r4, #112	; 0x70
   1962c:	vst1.32	{d16-d17}, [r0]
   19630:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19634:	mov	r5, #0
   19638:	mov	r8, #0
   1963c:	b	19648 <__assert_fail@plt+0x7ea0>
   19640:	mov	r8, #4
   19644:	mov	r5, #128	; 0x80
   19648:	bl	11634 <__ctype_b_loc@plt>
   1964c:	ldr	r0, [r0]
   19650:	add	r6, r0, r5, lsl #1
   19654:	mov	r1, #1
   19658:	b	19670 <__assert_fail@plt+0x7ec8>
   1965c:	add	r6, r6, #64	; 0x40
   19660:	add	r8, r8, #1
   19664:	add	r5, r5, #32
   19668:	cmp	r8, #8
   1966c:	beq	196bc <__assert_fail@plt+0x7f14>
   19670:	add	r0, r4, r8, lsl #2
   19674:	add	r2, r0, #96	; 0x60
   19678:	mov	r3, #0
   1967c:	mov	r0, r6
   19680:	b	196a0 <__assert_fail@plt+0x7ef8>
   19684:	ldr	r7, [r2]
   19688:	orr	r7, r7, r1, lsl r3
   1968c:	str	r7, [r2]
   19690:	add	r0, r0, #2
   19694:	add	r3, r3, #1
   19698:	cmp	r3, #32
   1969c:	beq	1965c <__assert_fail@plt+0x7eb4>
   196a0:	add	r7, r5, r3
   196a4:	cmp	r7, #95	; 0x5f
   196a8:	beq	19684 <__assert_fail@plt+0x7edc>
   196ac:	ldrh	r7, [r0]
   196b0:	ands	r7, r7, #8
   196b4:	beq	19690 <__assert_fail@plt+0x7ee8>
   196b8:	b	19684 <__assert_fail@plt+0x7edc>
   196bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   196c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196c4:	add	fp, sp, #28
   196c8:	sub	sp, sp, #20
   196cc:	mov	r8, r3
   196d0:	mov	r6, r2
   196d4:	mov	r4, r1
   196d8:	mov	r9, r0
   196dc:	mov	r7, #0
   196e0:	str	r7, [sp, #16]
   196e4:	mov	r0, #32
   196e8:	mov	r1, #1
   196ec:	bl	22a64 <__assert_fail@plt+0x112bc>
   196f0:	ldr	r1, [fp, #12]
   196f4:	cmp	r0, #0
   196f8:	beq	19868 <__assert_fail@plt+0x80c0>
   196fc:	mov	r5, r0
   19700:	mov	r0, #40	; 0x28
   19704:	mov	r1, #1
   19708:	bl	22a64 <__assert_fail@plt+0x112bc>
   1970c:	cmp	r0, #0
   19710:	beq	19874 <__assert_fail@plt+0x80cc>
   19714:	mov	sl, r0
   19718:	ldr	r1, [fp, #8]
   1971c:	ldrb	r0, [r0, #16]
   19720:	and	r0, r0, #254	; 0xfe
   19724:	orr	r0, r0, r1
   19728:	strb	r0, [sl, #16]
   1972c:	mov	r7, #0
   19730:	stm	sp, {r6, r7}
   19734:	add	r3, sp, #16
   19738:	mov	r0, r4
   1973c:	mov	r1, r5
   19740:	mov	r2, sl
   19744:	bl	1a11c <__assert_fail@plt+0x8974>
   19748:	cmp	r0, #0
   1974c:	bne	19890 <__assert_fail@plt+0x80e8>
   19750:	ldrb	r0, [r8]
   19754:	cmp	r0, #0
   19758:	beq	19778 <__assert_fail@plt+0x7fd0>
   1975c:	add	r4, r8, #1
   19760:	uxtb	r1, r0
   19764:	mov	r0, r5
   19768:	bl	19d58 <__assert_fail@plt+0x85b0>
   1976c:	ldrb	r0, [r4], #1
   19770:	cmp	r0, #0
   19774:	bne	19760 <__assert_fail@plt+0x7fb8>
   19778:	ldr	r0, [fp, #8]
   1977c:	cmp	r0, #0
   19780:	movne	r0, r5
   19784:	blne	1a978 <__assert_fail@plt+0x91d0>
   19788:	ldr	r0, [r9, #92]	; 0x5c
   1978c:	cmp	r0, #2
   19790:	blt	197a0 <__assert_fail@plt+0x7ff8>
   19794:	ldr	r1, [r9, #60]	; 0x3c
   19798:	mov	r0, r5
   1979c:	bl	1a998 <__assert_fail@plt+0x91f0>
   197a0:	str	r5, [sp, #8]
   197a4:	ldr	r4, [sp, #12]
   197a8:	bfc	r4, #0, #23
   197ac:	orr	r0, r4, #3
   197b0:	str	r0, [sp, #12]
   197b4:	mov	r7, #0
   197b8:	add	r3, sp, #8
   197bc:	mov	r0, r9
   197c0:	mov	r1, #0
   197c4:	mov	r2, #0
   197c8:	bl	18ef8 <__assert_fail@plt+0x7750>
   197cc:	cmp	r0, #0
   197d0:	beq	1984c <__assert_fail@plt+0x80a4>
   197d4:	mov	r6, r0
   197d8:	ldr	r0, [r9, #92]	; 0x5c
   197dc:	cmp	r0, #2
   197e0:	blt	19834 <__assert_fail@plt+0x808c>
   197e4:	str	sl, [sp, #8]
   197e8:	orr	r0, r4, #6
   197ec:	str	r0, [sp, #12]
   197f0:	ldrb	r0, [r9, #88]	; 0x58
   197f4:	orr	r0, r0, #2
   197f8:	strb	r0, [r9, #88]	; 0x58
   197fc:	add	r3, sp, #8
   19800:	mov	r0, r9
   19804:	mov	r1, #0
   19808:	mov	r2, #0
   1980c:	bl	18ef8 <__assert_fail@plt+0x7750>
   19810:	cmp	r0, #0
   19814:	beq	1984c <__assert_fail@plt+0x80a4>
   19818:	mov	r2, r0
   1981c:	mov	r0, r9
   19820:	mov	r1, r6
   19824:	mov	r3, #10
   19828:	bl	17e7c <__assert_fail@plt+0x66d4>
   1982c:	mov	r7, r0
   19830:	b	19840 <__assert_fail@plt+0x8098>
   19834:	mov	r0, sl
   19838:	bl	16988 <__assert_fail@plt+0x51e0>
   1983c:	mov	r7, r6
   19840:	mov	r0, r7
   19844:	sub	sp, fp, #28
   19848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1984c:	mov	r0, r5
   19850:	bl	13140 <__assert_fail@plt+0x1998>
   19854:	mov	r0, sl
   19858:	bl	16988 <__assert_fail@plt+0x51e0>
   1985c:	mov	r0, #12
   19860:	ldr	r1, [fp, #12]
   19864:	b	1986c <__assert_fail@plt+0x80c4>
   19868:	mov	r0, #12
   1986c:	str	r0, [r1]
   19870:	b	19840 <__assert_fail@plt+0x8098>
   19874:	mov	r0, r5
   19878:	bl	13140 <__assert_fail@plt+0x1998>
   1987c:	mov	r0, #12
   19880:	ldr	r1, [fp, #12]
   19884:	str	r0, [r1]
   19888:	mov	r7, #0
   1988c:	b	19840 <__assert_fail@plt+0x8098>
   19890:	mov	r6, r0
   19894:	mov	r0, r5
   19898:	bl	13140 <__assert_fail@plt+0x1998>
   1989c:	mov	r0, sl
   198a0:	bl	16988 <__assert_fail@plt+0x51e0>
   198a4:	ldr	r0, [fp, #12]
   198a8:	str	r6, [r0]
   198ac:	b	19840 <__assert_fail@plt+0x8098>
   198b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198b4:	add	fp, sp, #28
   198b8:	sub	sp, sp, #20
   198bc:	mov	r7, r3
   198c0:	mov	r5, r2
   198c4:	mov	r8, r1
   198c8:	mov	r4, r0
   198cc:	ldrb	r0, [r3, #4]
   198d0:	ldr	r1, [fp, #12]
   198d4:	str	r1, [sp, #16]
   198d8:	ldr	sl, [fp, #8]
   198dc:	cmp	r0, #23
   198e0:	bne	19938 <__assert_fail@plt+0x8190>
   198e4:	ldr	r0, [r7]
   198e8:	str	r0, [sp, #12]
   198ec:	ldr	r0, [r7, #4]
   198f0:	str	r0, [sp, #8]
   198f4:	ldr	r0, [r8, #40]	; 0x28
   198f8:	str	r0, [sp, #4]
   198fc:	mov	r0, r8
   19900:	mov	r1, r7
   19904:	mov	r2, sl
   19908:	bl	1abe8 <__assert_fail@plt+0x9440>
   1990c:	cmn	r0, #1
   19910:	bne	19954 <__assert_fail@plt+0x81ac>
   19914:	ldrb	r0, [r7, #4]
   19918:	cmp	r0, #1
   1991c:	bne	19930 <__assert_fail@plt+0x8188>
   19920:	ldrb	r0, [r7]
   19924:	mov	r6, #0
   19928:	cmp	r0, #44	; 0x2c
   1992c:	beq	19960 <__assert_fail@plt+0x81b8>
   19930:	mov	r0, #10
   19934:	b	19ba8 <__assert_fail@plt+0x8400>
   19938:	mvn	r9, #0
   1993c:	cmp	r0, #19
   19940:	movweq	r9, #1
   19944:	sub	r0, r0, #18
   19948:	clz	r0, r0
   1994c:	lsr	r6, r0, #5
   19950:	b	199d0 <__assert_fail@plt+0x8228>
   19954:	mov	r6, r0
   19958:	cmn	r0, #2
   1995c:	beq	19ad8 <__assert_fail@plt+0x8330>
   19960:	ldrb	r0, [r7, #4]
   19964:	cmp	r0, #24
   19968:	mov	r9, r6
   1996c:	beq	199a0 <__assert_fail@plt+0x81f8>
   19970:	cmp	r0, #1
   19974:	bne	19ad8 <__assert_fail@plt+0x8330>
   19978:	ldrb	r0, [r7]
   1997c:	cmp	r0, #44	; 0x2c
   19980:	bne	19ad8 <__assert_fail@plt+0x8330>
   19984:	mov	r0, r8
   19988:	mov	r1, r7
   1998c:	mov	r2, sl
   19990:	bl	1abe8 <__assert_fail@plt+0x9440>
   19994:	mov	r9, r0
   19998:	cmn	r0, #2
   1999c:	beq	19ad8 <__assert_fail@plt+0x8330>
   199a0:	cmn	r9, #1
   199a4:	beq	199b0 <__assert_fail@plt+0x8208>
   199a8:	cmp	r6, r9
   199ac:	bgt	19930 <__assert_fail@plt+0x8188>
   199b0:	ldrb	r0, [r7, #4]
   199b4:	cmp	r0, #24
   199b8:	bne	19930 <__assert_fail@plt+0x8188>
   199bc:	cmn	r9, #1
   199c0:	mov	r0, r9
   199c4:	moveq	r0, r6
   199c8:	cmp	r0, #32768	; 0x8000
   199cc:	bge	19bc0 <__assert_fail@plt+0x8418>
   199d0:	mov	r0, r7
   199d4:	mov	r1, r8
   199d8:	mov	r2, sl
   199dc:	bl	17cf4 <__assert_fail@plt+0x654c>
   199e0:	cmp	r4, #0
   199e4:	beq	19bb0 <__assert_fail@plt+0x8408>
   199e8:	orrs	r0, r9, r6
   199ec:	beq	19b0c <__assert_fail@plt+0x8364>
   199f0:	mov	r8, #0
   199f4:	cmp	r6, #1
   199f8:	bge	19b24 <__assert_fail@plt+0x837c>
   199fc:	ldrb	r0, [r4, #24]
   19a00:	cmp	r0, #17
   19a04:	bne	19a1c <__assert_fail@plt+0x8274>
   19a08:	ldr	r2, [r4, #20]
   19a0c:	movw	r1, #44396	; 0xad6c
   19a10:	movt	r1, #1
   19a14:	mov	r0, r4
   19a18:	bl	188c0 <__assert_fail@plt+0x7118>
   19a1c:	mov	r3, #10
   19a20:	cmn	r9, #1
   19a24:	movweq	r3, #11
   19a28:	mov	r0, r5
   19a2c:	mov	r1, r4
   19a30:	mov	r2, #0
   19a34:	bl	17e7c <__assert_fail@plt+0x66d4>
   19a38:	cmp	r0, #0
   19a3c:	beq	19ba4 <__assert_fail@plt+0x83fc>
   19a40:	mov	r7, r0
   19a44:	add	r0, r6, #2
   19a48:	cmp	r0, r9
   19a4c:	ble	19a74 <__assert_fail@plt+0x82cc>
   19a50:	cmp	r8, #0
   19a54:	beq	19b04 <__assert_fail@plt+0x835c>
   19a58:	mov	r0, r5
   19a5c:	mov	r1, r8
   19a60:	mov	r2, r7
   19a64:	mov	r3, #16
   19a68:	sub	sp, fp, #28
   19a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a70:	b	17e7c <__assert_fail@plt+0x66d4>
   19a74:	add	r6, r6, #1
   19a78:	mov	r0, r4
   19a7c:	mov	r1, r5
   19a80:	bl	1ac90 <__assert_fail@plt+0x94e8>
   19a84:	mov	r4, r0
   19a88:	mov	r0, r5
   19a8c:	mov	r1, r7
   19a90:	mov	r2, r4
   19a94:	mov	r3, #16
   19a98:	bl	17e7c <__assert_fail@plt+0x66d4>
   19a9c:	cmp	r4, #0
   19aa0:	movne	r1, r0
   19aa4:	cmpne	r0, #0
   19aa8:	beq	19ba4 <__assert_fail@plt+0x83fc>
   19aac:	mov	r0, r5
   19ab0:	mov	r2, #0
   19ab4:	mov	r3, #10
   19ab8:	bl	17e7c <__assert_fail@plt+0x66d4>
   19abc:	cmp	r0, #0
   19ac0:	beq	19ba4 <__assert_fail@plt+0x83fc>
   19ac4:	mov	r7, r0
   19ac8:	add	r6, r6, #1
   19acc:	cmp	r6, r9
   19ad0:	blt	19a78 <__assert_fail@plt+0x82d0>
   19ad4:	b	19a50 <__assert_fail@plt+0x82a8>
   19ad8:	tst	sl, #2097152	; 0x200000
   19adc:	beq	19bc8 <__assert_fail@plt+0x8420>
   19ae0:	ldr	r0, [sp, #4]
   19ae4:	str	r0, [r8, #40]	; 0x28
   19ae8:	ldr	r0, [sp, #12]
   19aec:	str	r0, [r7]
   19af0:	ldr	r0, [sp, #8]
   19af4:	str	r0, [r7, #4]
   19af8:	mov	r0, #1
   19afc:	strb	r0, [r7, #4]
   19b00:	b	19bb4 <__assert_fail@plt+0x840c>
   19b04:	mov	r4, r7
   19b08:	b	19bb4 <__assert_fail@plt+0x840c>
   19b0c:	movw	r1, #35128	; 0x8938
   19b10:	movt	r1, #1
   19b14:	mov	r0, r4
   19b18:	mov	r2, #0
   19b1c:	bl	188c0 <__assert_fail@plt+0x7118>
   19b20:	b	19bb0 <__assert_fail@plt+0x8408>
   19b24:	bne	19b50 <__assert_fail@plt+0x83a8>
   19b28:	mov	r8, r4
   19b2c:	cmp	r6, r9
   19b30:	beq	19b9c <__assert_fail@plt+0x83f4>
   19b34:	mov	r0, r4
   19b38:	mov	r1, r5
   19b3c:	bl	1ac90 <__assert_fail@plt+0x94e8>
   19b40:	mov	r4, r0
   19b44:	cmp	r0, #0
   19b48:	bne	199fc <__assert_fail@plt+0x8254>
   19b4c:	b	19ba4 <__assert_fail@plt+0x83fc>
   19b50:	sub	r7, r6, #1
   19b54:	mov	r8, r4
   19b58:	mov	r0, r4
   19b5c:	mov	r1, r5
   19b60:	bl	1ac90 <__assert_fail@plt+0x94e8>
   19b64:	mov	r4, r0
   19b68:	mov	r0, r5
   19b6c:	mov	r1, r8
   19b70:	mov	r2, r4
   19b74:	mov	r3, #16
   19b78:	bl	17e7c <__assert_fail@plt+0x66d4>
   19b7c:	cmp	r4, #0
   19b80:	movne	r8, r0
   19b84:	cmpne	r0, #0
   19b88:	beq	19ba4 <__assert_fail@plt+0x83fc>
   19b8c:	subs	r7, r7, #1
   19b90:	bne	19b58 <__assert_fail@plt+0x83b0>
   19b94:	cmp	r6, r9
   19b98:	bne	19b34 <__assert_fail@plt+0x838c>
   19b9c:	mov	r4, r8
   19ba0:	b	19bb4 <__assert_fail@plt+0x840c>
   19ba4:	mov	r0, #12
   19ba8:	ldr	r1, [sp, #16]
   19bac:	str	r0, [r1]
   19bb0:	mov	r4, #0
   19bb4:	mov	r0, r4
   19bb8:	sub	sp, fp, #28
   19bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bc0:	mov	r0, #15
   19bc4:	b	19ba8 <__assert_fail@plt+0x8400>
   19bc8:	ldrb	r0, [r7, #4]
   19bcc:	mov	r1, #10
   19bd0:	cmp	r0, #2
   19bd4:	movweq	r1, #9
   19bd8:	ldr	r0, [sp, #16]
   19bdc:	str	r1, [r0]
   19be0:	b	19bb0 <__assert_fail@plt+0x8408>
   19be4:	push	{r4, sl, fp, lr}
   19be8:	add	fp, sp, #8
   19bec:	ldr	ip, [r1, #40]	; 0x28
   19bf0:	ldr	r3, [r1, #56]	; 0x38
   19bf4:	cmp	r3, ip
   19bf8:	ble	19c78 <__assert_fail@plt+0x84d0>
   19bfc:	ldr	r3, [r1, #4]
   19c00:	ldrb	ip, [r3, ip]
   19c04:	strb	ip, [r0]
   19c08:	ldr	r3, [r1, #80]	; 0x50
   19c0c:	cmp	r3, #2
   19c10:	blt	19c34 <__assert_fail@plt+0x848c>
   19c14:	ldr	lr, [r1, #28]
   19c18:	ldr	r4, [r1, #40]	; 0x28
   19c1c:	cmp	r4, lr
   19c20:	beq	19c34 <__assert_fail@plt+0x848c>
   19c24:	ldr	r3, [r1, #8]
   19c28:	ldr	r3, [r3, r4, lsl #2]
   19c2c:	cmn	r3, #1
   19c30:	beq	19d24 <__assert_fail@plt+0x857c>
   19c34:	tst	r2, #1
   19c38:	beq	19c8c <__assert_fail@plt+0x84e4>
   19c3c:	cmp	ip, #92	; 0x5c
   19c40:	bne	19c8c <__assert_fail@plt+0x84e4>
   19c44:	ldr	r2, [r1, #40]	; 0x28
   19c48:	ldr	r3, [r1, #48]	; 0x30
   19c4c:	add	r2, r2, #1
   19c50:	cmp	r2, r3
   19c54:	bge	19d24 <__assert_fail@plt+0x857c>
   19c58:	str	r2, [r1, #40]	; 0x28
   19c5c:	ldr	r1, [r1, #4]
   19c60:	ldrb	r2, [r1, r2]
   19c64:	mov	r1, #1
   19c68:	strb	r1, [r0, #4]
   19c6c:	strb	r2, [r0]
   19c70:	mov	r0, r1
   19c74:	pop	{r4, sl, fp, pc}
   19c78:	mov	r1, #2
   19c7c:	strb	r1, [r0, #4]
   19c80:	mov	r1, #0
   19c84:	mov	r0, r1
   19c88:	pop	{r4, sl, fp, pc}
   19c8c:	cmp	ip, #92	; 0x5c
   19c90:	bgt	19ce4 <__assert_fail@plt+0x853c>
   19c94:	cmp	ip, #45	; 0x2d
   19c98:	beq	19cfc <__assert_fail@plt+0x8554>
   19c9c:	cmp	ip, #91	; 0x5b
   19ca0:	bne	19d24 <__assert_fail@plt+0x857c>
   19ca4:	ldr	r3, [r1, #40]	; 0x28
   19ca8:	ldr	r4, [r1, #48]	; 0x30
   19cac:	add	r3, r3, #1
   19cb0:	cmp	r3, r4
   19cb4:	bge	19d18 <__assert_fail@plt+0x8570>
   19cb8:	ldr	r1, [r1, #4]
   19cbc:	ldrb	r1, [r1, r3]
   19cc0:	strb	r1, [r0]
   19cc4:	cmp	r1, #61	; 0x3d
   19cc8:	beq	19d34 <__assert_fail@plt+0x858c>
   19ccc:	cmp	r1, #58	; 0x3a
   19cd0:	beq	19d3c <__assert_fail@plt+0x8594>
   19cd4:	cmp	r1, #46	; 0x2e
   19cd8:	bne	19d20 <__assert_fail@plt+0x8578>
   19cdc:	mov	r1, #26
   19ce0:	b	19d48 <__assert_fail@plt+0x85a0>
   19ce4:	cmp	ip, #93	; 0x5d
   19ce8:	beq	19d04 <__assert_fail@plt+0x855c>
   19cec:	cmp	ip, #94	; 0x5e
   19cf0:	bne	19d24 <__assert_fail@plt+0x857c>
   19cf4:	mov	r1, #25
   19cf8:	b	19d08 <__assert_fail@plt+0x8560>
   19cfc:	mov	r1, #22
   19d00:	b	19d08 <__assert_fail@plt+0x8560>
   19d04:	mov	r1, #21
   19d08:	strb	r1, [r0, #4]
   19d0c:	mov	r1, #1
   19d10:	mov	r0, r1
   19d14:	pop	{r4, sl, fp, pc}
   19d18:	mov	r1, #0
   19d1c:	strb	r1, [r0]
   19d20:	strb	ip, [r0]
   19d24:	mov	r1, #1
   19d28:	strb	r1, [r0, #4]
   19d2c:	mov	r0, r1
   19d30:	pop	{r4, sl, fp, pc}
   19d34:	mov	r1, #28
   19d38:	b	19d48 <__assert_fail@plt+0x85a0>
   19d3c:	tst	r2, #4
   19d40:	beq	19d20 <__assert_fail@plt+0x8578>
   19d44:	mov	r1, #30
   19d48:	strb	r1, [r0, #4]
   19d4c:	mov	r1, #2
   19d50:	mov	r0, r1
   19d54:	pop	{r4, sl, fp, pc}
   19d58:	asr	r2, r1, #31
   19d5c:	add	r2, r1, r2, lsr #27
   19d60:	asr	r2, r2, #5
   19d64:	ldr	ip, [r0, r2, lsl #2]
   19d68:	and	r1, r1, #31
   19d6c:	mov	r3, #1
   19d70:	orr	r1, ip, r3, lsl r1
   19d74:	str	r1, [r0, r2, lsl #2]
   19d78:	bx	lr
   19d7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19d80:	add	fp, sp, #24
   19d84:	sub	sp, sp, #8
   19d88:	mov	r5, r3
   19d8c:	mov	r8, r2
   19d90:	mov	r6, r1
   19d94:	mov	r9, r0
   19d98:	ldr	r7, [r1, #40]	; 0x28
   19d9c:	mov	r0, r1
   19da0:	mov	r1, r7
   19da4:	bl	1a9bc <__assert_fail@plt+0x9214>
   19da8:	cmp	r0, #2
   19dac:	blt	19de4 <__assert_fail@plt+0x863c>
   19db0:	mov	r4, r0
   19db4:	mov	r0, #1
   19db8:	str	r0, [r9]
   19dbc:	mov	r0, r6
   19dc0:	mov	r1, r7
   19dc4:	bl	18728 <__assert_fail@plt+0x6f80>
   19dc8:	str	r0, [r9, #4]
   19dcc:	ldr	r0, [r6, #40]	; 0x28
   19dd0:	add	r0, r0, r4
   19dd4:	str	r0, [r6, #40]	; 0x28
   19dd8:	mov	r0, #0
   19ddc:	sub	sp, fp, #24
   19de0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19de4:	ldr	r0, [fp, #12]
   19de8:	ldr	r2, [fp, #8]
   19dec:	add	r1, r7, r5
   19df0:	str	r1, [r6, #40]	; 0x28
   19df4:	ldrb	r1, [r8, #4]
   19df8:	sub	r1, r1, #22
   19dfc:	cmp	r1, #8
   19e00:	bhi	19e6c <__assert_fail@plt+0x86c4>
   19e04:	add	r3, pc, #0
   19e08:	ldr	pc, [r3, r1, lsl #2]
   19e0c:	andeq	r9, r1, r8, asr #28
   19e10:	andeq	r9, r1, ip, ror #28
   19e14:	andeq	r9, r1, ip, ror #28
   19e18:	andeq	r9, r1, ip, ror #28
   19e1c:	andeq	r9, r1, r0, lsr lr
   19e20:	andeq	r9, r1, ip, ror #28
   19e24:	andeq	r9, r1, r0, lsr lr
   19e28:	andeq	r9, r1, ip, ror #28
   19e2c:	andeq	r9, r1, r0, lsr lr
   19e30:	mov	r0, r9
   19e34:	mov	r1, r6
   19e38:	mov	r2, r8
   19e3c:	sub	sp, fp, #24
   19e40:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19e44:	b	1aa18 <__assert_fail@plt+0x9270>
   19e48:	cmp	r0, #0
   19e4c:	bne	19e6c <__assert_fail@plt+0x86c4>
   19e50:	mov	r0, sp
   19e54:	mov	r1, r6
   19e58:	bl	19be4 <__assert_fail@plt+0x843c>
   19e5c:	ldrb	r1, [sp, #4]
   19e60:	mov	r0, #11
   19e64:	cmp	r1, #21
   19e68:	bne	19e7c <__assert_fail@plt+0x86d4>
   19e6c:	mov	r0, #0
   19e70:	str	r0, [r9]
   19e74:	ldrb	r1, [r8]
   19e78:	strb	r1, [r9, #4]
   19e7c:	sub	sp, fp, #24
   19e80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e88:	add	fp, sp, #28
   19e8c:	sub	sp, sp, #12
   19e90:	mov	sl, r0
   19e94:	ldr	r7, [r3]
   19e98:	mov	r0, #11
   19e9c:	cmp	r7, #2
   19ea0:	cmpne	r7, #4
   19ea4:	beq	19ebc <__assert_fail@plt+0x8714>
   19ea8:	ldr	r8, [fp, #8]
   19eac:	ldr	r5, [r8]
   19eb0:	cmp	r5, #2
   19eb4:	cmpne	r5, #4
   19eb8:	bne	19ec4 <__assert_fail@plt+0x871c>
   19ebc:	sub	sp, fp, #28
   19ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ec4:	mov	r6, r3
   19ec8:	mov	r9, r2
   19ecc:	mov	r4, r1
   19ed0:	cmp	r7, #3
   19ed4:	bne	19ee8 <__assert_fail@plt+0x8740>
   19ed8:	ldr	r0, [r6, #4]
   19edc:	bl	11658 <strlen@plt>
   19ee0:	cmp	r0, #1
   19ee4:	bhi	1a02c <__assert_fail@plt+0x8884>
   19ee8:	cmp	r5, #3
   19eec:	bne	19f00 <__assert_fail@plt+0x8758>
   19ef0:	ldr	r0, [r8, #4]
   19ef4:	bl	11658 <strlen@plt>
   19ef8:	cmp	r0, #1
   19efc:	bhi	1a02c <__assert_fail@plt+0x8884>
   19f00:	cmp	r7, #3
   19f04:	beq	19f18 <__assert_fail@plt+0x8770>
   19f08:	mov	r0, #0
   19f0c:	cmp	r7, #0
   19f10:	ldrbeq	r0, [r6, #4]
   19f14:	b	19f20 <__assert_fail@plt+0x8778>
   19f18:	ldr	r0, [r6, #4]
   19f1c:	ldrb	r0, [r0]
   19f20:	stmib	sp, {r4, r9}
   19f24:	cmp	r5, #3
   19f28:	beq	19f3c <__assert_fail@plt+0x8794>
   19f2c:	mov	r9, #0
   19f30:	cmp	r5, #0
   19f34:	ldrbeq	r9, [r8, #4]
   19f38:	b	19f44 <__assert_fail@plt+0x879c>
   19f3c:	ldr	r1, [r8, #4]
   19f40:	ldrb	r9, [r1]
   19f44:	ldr	r4, [fp, #12]
   19f48:	cmp	r7, #3
   19f4c:	cmpne	r7, #0
   19f50:	bne	19f64 <__assert_fail@plt+0x87bc>
   19f54:	mov	r1, r4
   19f58:	bl	1abd8 <__assert_fail@plt+0x9430>
   19f5c:	mov	r7, r0
   19f60:	b	19f68 <__assert_fail@plt+0x87c0>
   19f64:	ldr	r7, [r6, #4]
   19f68:	ldr	r0, [r8]
   19f6c:	cmp	r0, #3
   19f70:	cmpne	r0, #0
   19f74:	bne	19f8c <__assert_fail@plt+0x87e4>
   19f78:	mov	r0, r9
   19f7c:	mov	r1, r4
   19f80:	bl	1abd8 <__assert_fail@plt+0x9430>
   19f84:	mov	r6, r0
   19f88:	b	19f90 <__assert_fail@plt+0x87e8>
   19f8c:	ldr	r6, [r8, #4]
   19f90:	ldr	r1, [sp, #8]
   19f94:	ldr	r5, [sp, #4]
   19f98:	mov	r0, #3
   19f9c:	cmn	r7, #1
   19fa0:	cmnne	r6, #1
   19fa4:	beq	19ebc <__assert_fail@plt+0x8714>
   19fa8:	ldr	r0, [fp, #16]
   19fac:	tst	r0, #65536	; 0x10000
   19fb0:	beq	19fc0 <__assert_fail@plt+0x8818>
   19fb4:	cmp	r7, r6
   19fb8:	mov	r0, #11
   19fbc:	bhi	19ebc <__assert_fail@plt+0x8714>
   19fc0:	ldr	r0, [r4, #92]	; 0x5c
   19fc4:	cmp	r0, #2
   19fc8:	blt	19ffc <__assert_fail@plt+0x8854>
   19fcc:	ldr	r0, [r5, #32]
   19fd0:	ldr	r1, [r1]
   19fd4:	cmp	r1, r0
   19fd8:	beq	1a038 <__assert_fail@plt+0x8890>
   19fdc:	ldr	r0, [r5, #4]
   19fe0:	ldr	r1, [r5, #32]
   19fe4:	str	r7, [r0, r1, lsl #2]
   19fe8:	ldr	r0, [r5, #8]
   19fec:	ldr	r1, [r5, #32]
   19ff0:	add	r2, r1, #1
   19ff4:	str	r2, [r5, #32]
   19ff8:	str	r6, [r0, r1, lsl #2]
   19ffc:	mov	r5, #0
   1a000:	cmp	r7, r5
   1a004:	cmpls	r5, r6
   1a008:	movls	r0, sl
   1a00c:	movls	r1, r5
   1a010:	blls	19d58 <__assert_fail@plt+0x85b0>
   1a014:	add	r5, r5, #1
   1a018:	cmp	r5, #256	; 0x100
   1a01c:	bne	1a000 <__assert_fail@plt+0x8858>
   1a020:	mov	r0, #0
   1a024:	sub	sp, fp, #28
   1a028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a02c:	mov	r0, #3
   1a030:	sub	sp, fp, #28
   1a034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a038:	mov	r1, #1
   1a03c:	orr	r8, r1, r0, lsl #1
   1a040:	lsl	r4, r8, #2
   1a044:	ldr	r0, [r5, #4]
   1a048:	mov	r1, r4
   1a04c:	bl	22ae8 <__assert_fail@plt+0x11340>
   1a050:	mov	r9, r0
   1a054:	ldr	r0, [r5, #8]
   1a058:	mov	r1, r4
   1a05c:	bl	22ae8 <__assert_fail@plt+0x11340>
   1a060:	mov	r4, r0
   1a064:	cmp	r9, #0
   1a068:	cmpne	r4, #0
   1a06c:	bne	1a08c <__assert_fail@plt+0x88e4>
   1a070:	mov	r0, r9
   1a074:	bl	13140 <__assert_fail@plt+0x1998>
   1a078:	mov	r0, r4
   1a07c:	bl	13140 <__assert_fail@plt+0x1998>
   1a080:	mov	r0, #12
   1a084:	sub	sp, fp, #28
   1a088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a08c:	ldr	r5, [sp, #4]
   1a090:	str	r9, [r5, #4]
   1a094:	str	r4, [r5, #8]
   1a098:	ldr	r0, [sp, #8]
   1a09c:	str	r8, [r0]
   1a0a0:	b	19fdc <__assert_fail@plt+0x8834>
   1a0a4:	push	{r4, r5, fp, lr}
   1a0a8:	add	fp, sp, #8
   1a0ac:	mov	r5, r1
   1a0b0:	mov	r4, r0
   1a0b4:	mov	r0, r1
   1a0b8:	bl	11658 <strlen@plt>
   1a0bc:	cmp	r0, #1
   1a0c0:	bne	1a0d8 <__assert_fail@plt+0x8930>
   1a0c4:	ldrb	r1, [r5]
   1a0c8:	mov	r0, r4
   1a0cc:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a0d0:	mov	r0, #0
   1a0d4:	pop	{r4, r5, fp, pc}
   1a0d8:	mov	r0, #3
   1a0dc:	pop	{r4, r5, fp, pc}
   1a0e0:	push	{r4, r5, fp, lr}
   1a0e4:	add	fp, sp, #8
   1a0e8:	mov	r5, r1
   1a0ec:	mov	r4, r0
   1a0f0:	mov	r0, r1
   1a0f4:	bl	11658 <strlen@plt>
   1a0f8:	cmp	r0, #1
   1a0fc:	bne	1a114 <__assert_fail@plt+0x896c>
   1a100:	ldrb	r1, [r5]
   1a104:	mov	r0, r4
   1a108:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a10c:	mov	r0, #0
   1a110:	pop	{r4, r5, fp, pc}
   1a114:	mov	r0, #3
   1a118:	pop	{r4, r5, fp, pc}
   1a11c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a120:	add	fp, sp, #24
   1a124:	mov	r5, r3
   1a128:	mov	r7, r2
   1a12c:	mov	r4, r1
   1a130:	mov	r8, r0
   1a134:	ldr	r6, [fp, #8]
   1a138:	ldrb	r0, [fp, #14]
   1a13c:	tst	r0, #64	; 0x40
   1a140:	beq	1a17c <__assert_fail@plt+0x89d4>
   1a144:	movw	r1, #17282	; 0x4382
   1a148:	movt	r1, #2
   1a14c:	mov	r0, r6
   1a150:	bl	11454 <strcmp@plt>
   1a154:	cmp	r0, #0
   1a158:	beq	1a174 <__assert_fail@plt+0x89cc>
   1a15c:	movw	r1, #17288	; 0x4388
   1a160:	movt	r1, #2
   1a164:	mov	r0, r6
   1a168:	bl	11454 <strcmp@plt>
   1a16c:	cmp	r0, #0
   1a170:	bne	1a17c <__assert_fail@plt+0x89d4>
   1a174:	movw	r6, #17294	; 0x438e
   1a178:	movt	r6, #2
   1a17c:	ldr	r0, [r7, #36]	; 0x24
   1a180:	ldr	r1, [r5]
   1a184:	cmp	r1, r0
   1a188:	beq	1a658 <__assert_fail@plt+0x8eb0>
   1a18c:	mov	r0, r6
   1a190:	bl	11430 <wctype@plt>
   1a194:	ldr	r1, [r7, #12]
   1a198:	ldr	r2, [r7, #36]	; 0x24
   1a19c:	add	r3, r2, #1
   1a1a0:	str	r3, [r7, #36]	; 0x24
   1a1a4:	str	r0, [r1, r2, lsl #2]
   1a1a8:	movw	r1, #17270	; 0x4376
   1a1ac:	movt	r1, #2
   1a1b0:	mov	r0, r6
   1a1b4:	bl	11454 <strcmp@plt>
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a31c <__assert_fail@plt+0x8b74>
   1a1c0:	movw	r1, #17300	; 0x4394
   1a1c4:	movt	r1, #2
   1a1c8:	mov	r0, r6
   1a1cc:	bl	11454 <strcmp@plt>
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a364 <__assert_fail@plt+0x8bbc>
   1a1d8:	movw	r1, #17288	; 0x4388
   1a1dc:	movt	r1, #2
   1a1e0:	mov	r0, r6
   1a1e4:	bl	11454 <strcmp@plt>
   1a1e8:	cmp	r0, #0
   1a1ec:	beq	1a3ac <__assert_fail@plt+0x8c04>
   1a1f0:	movw	r1, #17276	; 0x437c
   1a1f4:	movt	r1, #2
   1a1f8:	mov	r0, r6
   1a1fc:	bl	11454 <strcmp@plt>
   1a200:	cmp	r0, #0
   1a204:	beq	1a3f8 <__assert_fail@plt+0x8c50>
   1a208:	movw	r1, #17294	; 0x438e
   1a20c:	movt	r1, #2
   1a210:	mov	r0, r6
   1a214:	bl	11454 <strcmp@plt>
   1a218:	cmp	r0, #0
   1a21c:	beq	1a444 <__assert_fail@plt+0x8c9c>
   1a220:	movw	r1, #17331	; 0x43b3
   1a224:	movt	r1, #2
   1a228:	mov	r0, r6
   1a22c:	bl	11454 <strcmp@plt>
   1a230:	cmp	r0, #0
   1a234:	beq	1a490 <__assert_fail@plt+0x8ce8>
   1a238:	movw	r1, #17306	; 0x439a
   1a23c:	movt	r1, #2
   1a240:	mov	r0, r6
   1a244:	bl	11454 <strcmp@plt>
   1a248:	cmp	r0, #0
   1a24c:	beq	1a4dc <__assert_fail@plt+0x8d34>
   1a250:	movw	r1, #17282	; 0x4382
   1a254:	movt	r1, #2
   1a258:	mov	r0, r6
   1a25c:	bl	11454 <strcmp@plt>
   1a260:	cmp	r0, #0
   1a264:	beq	1a528 <__assert_fail@plt+0x8d80>
   1a268:	movw	r1, #17312	; 0x43a0
   1a26c:	movt	r1, #2
   1a270:	mov	r0, r6
   1a274:	bl	11454 <strcmp@plt>
   1a278:	cmp	r0, #0
   1a27c:	beq	1a574 <__assert_fail@plt+0x8dcc>
   1a280:	movw	r1, #17318	; 0x43a6
   1a284:	movt	r1, #2
   1a288:	mov	r0, r6
   1a28c:	bl	11454 <strcmp@plt>
   1a290:	cmp	r0, #0
   1a294:	beq	1a5bc <__assert_fail@plt+0x8e14>
   1a298:	movw	r1, #17324	; 0x43ac
   1a29c:	movt	r1, #2
   1a2a0:	mov	r0, r6
   1a2a4:	bl	11454 <strcmp@plt>
   1a2a8:	cmp	r0, #0
   1a2ac:	beq	1a610 <__assert_fail@plt+0x8e68>
   1a2b0:	movw	r1, #17330	; 0x43b2
   1a2b4:	movt	r1, #2
   1a2b8:	mov	r0, r6
   1a2bc:	bl	11454 <strcmp@plt>
   1a2c0:	mov	r1, r0
   1a2c4:	mov	r0, #4
   1a2c8:	cmp	r1, #0
   1a2cc:	bne	1a654 <__assert_fail@plt+0x8eac>
   1a2d0:	bl	11634 <__ctype_b_loc@plt>
   1a2d4:	mov	r6, r0
   1a2d8:	cmp	r8, #0
   1a2dc:	bne	1a930 <__assert_fail@plt+0x9188>
   1a2e0:	mov	r7, #0
   1a2e4:	mov	r5, #0
   1a2e8:	ldr	r0, [r6]
   1a2ec:	add	r0, r0, r7
   1a2f0:	ldrb	r0, [r0, #1]
   1a2f4:	tst	r0, #16
   1a2f8:	movne	r0, r4
   1a2fc:	movne	r1, r5
   1a300:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a304:	add	r7, r7, #2
   1a308:	add	r5, r5, #1
   1a30c:	mov	r0, #0
   1a310:	cmp	r5, #256	; 0x100
   1a314:	bne	1a2e8 <__assert_fail@plt+0x8b40>
   1a318:	b	1a654 <__assert_fail@plt+0x8eac>
   1a31c:	bl	11634 <__ctype_b_loc@plt>
   1a320:	mov	r6, r0
   1a324:	cmp	r8, #0
   1a328:	bne	1a680 <__assert_fail@plt+0x8ed8>
   1a32c:	mov	r7, #0
   1a330:	mov	r5, #0
   1a334:	ldr	r0, [r6]
   1a338:	ldrb	r0, [r0, r7]
   1a33c:	tst	r0, #8
   1a340:	movne	r0, r4
   1a344:	movne	r1, r5
   1a348:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a34c:	add	r7, r7, #2
   1a350:	add	r5, r5, #1
   1a354:	cmp	r5, #256	; 0x100
   1a358:	bne	1a334 <__assert_fail@plt+0x8b8c>
   1a35c:	mov	r0, #0
   1a360:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a364:	bl	11634 <__ctype_b_loc@plt>
   1a368:	mov	r6, r0
   1a36c:	cmp	r8, #0
   1a370:	bne	1a6bc <__assert_fail@plt+0x8f14>
   1a374:	mov	r7, #0
   1a378:	mov	r5, #0
   1a37c:	ldr	r0, [r6]
   1a380:	ldrb	r0, [r0, r7]
   1a384:	tst	r0, #2
   1a388:	movne	r0, r4
   1a38c:	movne	r1, r5
   1a390:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a394:	add	r7, r7, #2
   1a398:	add	r5, r5, #1
   1a39c:	cmp	r5, #256	; 0x100
   1a3a0:	bne	1a37c <__assert_fail@plt+0x8bd4>
   1a3a4:	mov	r0, #0
   1a3a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a3ac:	bl	11634 <__ctype_b_loc@plt>
   1a3b0:	mov	r6, r0
   1a3b4:	cmp	r8, #0
   1a3b8:	bne	1a6f8 <__assert_fail@plt+0x8f50>
   1a3bc:	mov	r7, #0
   1a3c0:	mov	r5, #0
   1a3c4:	ldr	r0, [r6]
   1a3c8:	add	r0, r0, r7
   1a3cc:	ldrb	r0, [r0, #1]
   1a3d0:	tst	r0, #2
   1a3d4:	movne	r0, r4
   1a3d8:	movne	r1, r5
   1a3dc:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a3e0:	add	r7, r7, #2
   1a3e4:	add	r5, r5, #1
   1a3e8:	cmp	r5, #256	; 0x100
   1a3ec:	bne	1a3c4 <__assert_fail@plt+0x8c1c>
   1a3f0:	mov	r0, #0
   1a3f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a3f8:	bl	11634 <__ctype_b_loc@plt>
   1a3fc:	mov	r6, r0
   1a400:	cmp	r8, #0
   1a404:	bne	1a738 <__assert_fail@plt+0x8f90>
   1a408:	mov	r7, #0
   1a40c:	mov	r5, #0
   1a410:	ldr	r0, [r6]
   1a414:	add	r0, r0, r7
   1a418:	ldrb	r0, [r0, #1]
   1a41c:	tst	r0, #32
   1a420:	movne	r0, r4
   1a424:	movne	r1, r5
   1a428:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a42c:	add	r7, r7, #2
   1a430:	add	r5, r5, #1
   1a434:	cmp	r5, #256	; 0x100
   1a438:	bne	1a410 <__assert_fail@plt+0x8c68>
   1a43c:	mov	r0, #0
   1a440:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a444:	bl	11634 <__ctype_b_loc@plt>
   1a448:	mov	r6, r0
   1a44c:	cmp	r8, #0
   1a450:	bne	1a778 <__assert_fail@plt+0x8fd0>
   1a454:	mov	r7, #0
   1a458:	mov	r5, #0
   1a45c:	ldr	r0, [r6]
   1a460:	add	r0, r0, r7
   1a464:	ldrb	r0, [r0, #1]
   1a468:	tst	r0, #4
   1a46c:	movne	r0, r4
   1a470:	movne	r1, r5
   1a474:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a478:	add	r7, r7, #2
   1a47c:	add	r5, r5, #1
   1a480:	cmp	r5, #256	; 0x100
   1a484:	bne	1a45c <__assert_fail@plt+0x8cb4>
   1a488:	mov	r0, #0
   1a48c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a490:	bl	11634 <__ctype_b_loc@plt>
   1a494:	mov	r6, r0
   1a498:	cmp	r8, #0
   1a49c:	bne	1a7b8 <__assert_fail@plt+0x9010>
   1a4a0:	mov	r7, #0
   1a4a4:	mov	r5, #0
   1a4a8:	ldr	r0, [r6]
   1a4ac:	add	r0, r0, r7
   1a4b0:	ldrb	r0, [r0, #1]
   1a4b4:	tst	r0, #8
   1a4b8:	movne	r0, r4
   1a4bc:	movne	r1, r5
   1a4c0:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a4c4:	add	r7, r7, #2
   1a4c8:	add	r5, r5, #1
   1a4cc:	cmp	r5, #256	; 0x100
   1a4d0:	bne	1a4a8 <__assert_fail@plt+0x8d00>
   1a4d4:	mov	r0, #0
   1a4d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a4dc:	bl	11634 <__ctype_b_loc@plt>
   1a4e0:	mov	r6, r0
   1a4e4:	cmp	r8, #0
   1a4e8:	bne	1a7f8 <__assert_fail@plt+0x9050>
   1a4ec:	mov	r7, #0
   1a4f0:	mov	r5, #0
   1a4f4:	ldr	r0, [r6]
   1a4f8:	add	r0, r0, r7
   1a4fc:	ldrb	r0, [r0, #1]
   1a500:	tst	r0, #64	; 0x40
   1a504:	movne	r0, r4
   1a508:	movne	r1, r5
   1a50c:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a510:	add	r7, r7, #2
   1a514:	add	r5, r5, #1
   1a518:	mov	r0, #0
   1a51c:	cmp	r5, #256	; 0x100
   1a520:	bne	1a4f4 <__assert_fail@plt+0x8d4c>
   1a524:	b	1a654 <__assert_fail@plt+0x8eac>
   1a528:	bl	11634 <__ctype_b_loc@plt>
   1a52c:	mov	r6, r0
   1a530:	cmp	r8, #0
   1a534:	bne	1a838 <__assert_fail@plt+0x9090>
   1a538:	mov	r7, #0
   1a53c:	mov	r5, #0
   1a540:	ldr	r0, [r6]
   1a544:	add	r0, r0, r7
   1a548:	ldrb	r0, [r0, #1]
   1a54c:	tst	r0, #1
   1a550:	movne	r0, r4
   1a554:	movne	r1, r5
   1a558:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a55c:	add	r7, r7, #2
   1a560:	add	r5, r5, #1
   1a564:	mov	r0, #0
   1a568:	cmp	r5, #256	; 0x100
   1a56c:	bne	1a540 <__assert_fail@plt+0x8d98>
   1a570:	b	1a654 <__assert_fail@plt+0x8eac>
   1a574:	bl	11634 <__ctype_b_loc@plt>
   1a578:	mov	r6, r0
   1a57c:	cmp	r8, #0
   1a580:	bne	1a878 <__assert_fail@plt+0x90d0>
   1a584:	mov	r7, #0
   1a588:	mov	r5, #0
   1a58c:	ldr	r0, [r6]
   1a590:	ldrb	r0, [r0, r7]
   1a594:	tst	r0, #1
   1a598:	movne	r0, r4
   1a59c:	movne	r1, r5
   1a5a0:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a5a4:	add	r7, r7, #2
   1a5a8:	add	r5, r5, #1
   1a5ac:	mov	r0, #0
   1a5b0:	cmp	r5, #256	; 0x100
   1a5b4:	bne	1a58c <__assert_fail@plt+0x8de4>
   1a5b8:	b	1a654 <__assert_fail@plt+0x8eac>
   1a5bc:	bl	11634 <__ctype_b_loc@plt>
   1a5c0:	mov	r6, r0
   1a5c4:	cmp	r8, #0
   1a5c8:	bne	1a8b4 <__assert_fail@plt+0x910c>
   1a5cc:	mov	r7, #0
   1a5d0:	mov	r5, #0
   1a5d4:	b	1a5ec <__assert_fail@plt+0x8e44>
   1a5d8:	add	r7, r7, #2
   1a5dc:	add	r5, r5, #1
   1a5e0:	mov	r0, #0
   1a5e4:	cmp	r5, #256	; 0x100
   1a5e8:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a5ec:	ldr	r0, [r6]
   1a5f0:	add	r0, r0, r7
   1a5f4:	ldrsh	r0, [r0]
   1a5f8:	cmn	r0, #1
   1a5fc:	bgt	1a5d8 <__assert_fail@plt+0x8e30>
   1a600:	mov	r0, r4
   1a604:	mov	r1, r5
   1a608:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a60c:	b	1a5d8 <__assert_fail@plt+0x8e30>
   1a610:	bl	11634 <__ctype_b_loc@plt>
   1a614:	mov	r6, r0
   1a618:	cmp	r8, #0
   1a61c:	bne	1a8f4 <__assert_fail@plt+0x914c>
   1a620:	mov	r7, #0
   1a624:	mov	r5, #0
   1a628:	ldr	r0, [r6]
   1a62c:	ldrb	r0, [r0, r7]
   1a630:	tst	r0, #4
   1a634:	movne	r0, r4
   1a638:	movne	r1, r5
   1a63c:	blne	19d58 <__assert_fail@plt+0x85b0>
   1a640:	add	r7, r7, #2
   1a644:	add	r5, r5, #1
   1a648:	mov	r0, #0
   1a64c:	cmp	r5, #256	; 0x100
   1a650:	bne	1a628 <__assert_fail@plt+0x8e80>
   1a654:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a658:	mov	r1, #1
   1a65c:	orr	r9, r1, r0, lsl #1
   1a660:	lsl	r1, r9, #2
   1a664:	ldr	r0, [r7, #12]
   1a668:	bl	22ae8 <__assert_fail@plt+0x11340>
   1a66c:	cmp	r0, #0
   1a670:	beq	1a970 <__assert_fail@plt+0x91c8>
   1a674:	str	r0, [r7, #12]
   1a678:	str	r9, [r5]
   1a67c:	b	1a18c <__assert_fail@plt+0x89e4>
   1a680:	mov	r5, #0
   1a684:	b	1a69c <__assert_fail@plt+0x8ef4>
   1a688:	add	r8, r8, #1
   1a68c:	add	r5, r5, #2
   1a690:	mov	r0, #0
   1a694:	cmp	r5, #512	; 0x200
   1a698:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a69c:	ldr	r0, [r6]
   1a6a0:	ldrb	r0, [r0, r5]
   1a6a4:	tst	r0, #8
   1a6a8:	beq	1a688 <__assert_fail@plt+0x8ee0>
   1a6ac:	ldrb	r1, [r8]
   1a6b0:	mov	r0, r4
   1a6b4:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a6b8:	b	1a688 <__assert_fail@plt+0x8ee0>
   1a6bc:	mov	r5, #0
   1a6c0:	b	1a6d8 <__assert_fail@plt+0x8f30>
   1a6c4:	add	r8, r8, #1
   1a6c8:	add	r5, r5, #2
   1a6cc:	mov	r0, #0
   1a6d0:	cmp	r5, #512	; 0x200
   1a6d4:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a6d8:	ldr	r0, [r6]
   1a6dc:	ldrb	r0, [r0, r5]
   1a6e0:	tst	r0, #2
   1a6e4:	beq	1a6c4 <__assert_fail@plt+0x8f1c>
   1a6e8:	ldrb	r1, [r8]
   1a6ec:	mov	r0, r4
   1a6f0:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a6f4:	b	1a6c4 <__assert_fail@plt+0x8f1c>
   1a6f8:	mov	r5, #0
   1a6fc:	b	1a714 <__assert_fail@plt+0x8f6c>
   1a700:	add	r8, r8, #1
   1a704:	add	r5, r5, #2
   1a708:	mov	r0, #0
   1a70c:	cmp	r5, #512	; 0x200
   1a710:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a714:	ldr	r0, [r6]
   1a718:	add	r0, r0, r5
   1a71c:	ldrb	r0, [r0, #1]
   1a720:	tst	r0, #2
   1a724:	beq	1a700 <__assert_fail@plt+0x8f58>
   1a728:	ldrb	r1, [r8]
   1a72c:	mov	r0, r4
   1a730:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a734:	b	1a700 <__assert_fail@plt+0x8f58>
   1a738:	mov	r5, #0
   1a73c:	b	1a754 <__assert_fail@plt+0x8fac>
   1a740:	add	r8, r8, #1
   1a744:	add	r5, r5, #2
   1a748:	mov	r0, #0
   1a74c:	cmp	r5, #512	; 0x200
   1a750:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a754:	ldr	r0, [r6]
   1a758:	add	r0, r0, r5
   1a75c:	ldrb	r0, [r0, #1]
   1a760:	tst	r0, #32
   1a764:	beq	1a740 <__assert_fail@plt+0x8f98>
   1a768:	ldrb	r1, [r8]
   1a76c:	mov	r0, r4
   1a770:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a774:	b	1a740 <__assert_fail@plt+0x8f98>
   1a778:	mov	r5, #0
   1a77c:	b	1a794 <__assert_fail@plt+0x8fec>
   1a780:	add	r8, r8, #1
   1a784:	add	r5, r5, #2
   1a788:	mov	r0, #0
   1a78c:	cmp	r5, #512	; 0x200
   1a790:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a794:	ldr	r0, [r6]
   1a798:	add	r0, r0, r5
   1a79c:	ldrb	r0, [r0, #1]
   1a7a0:	tst	r0, #4
   1a7a4:	beq	1a780 <__assert_fail@plt+0x8fd8>
   1a7a8:	ldrb	r1, [r8]
   1a7ac:	mov	r0, r4
   1a7b0:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a7b4:	b	1a780 <__assert_fail@plt+0x8fd8>
   1a7b8:	mov	r5, #0
   1a7bc:	b	1a7d4 <__assert_fail@plt+0x902c>
   1a7c0:	add	r8, r8, #1
   1a7c4:	add	r5, r5, #2
   1a7c8:	mov	r0, #0
   1a7cc:	cmp	r5, #512	; 0x200
   1a7d0:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a7d4:	ldr	r0, [r6]
   1a7d8:	add	r0, r0, r5
   1a7dc:	ldrb	r0, [r0, #1]
   1a7e0:	tst	r0, #8
   1a7e4:	beq	1a7c0 <__assert_fail@plt+0x9018>
   1a7e8:	ldrb	r1, [r8]
   1a7ec:	mov	r0, r4
   1a7f0:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a7f4:	b	1a7c0 <__assert_fail@plt+0x9018>
   1a7f8:	mov	r5, #0
   1a7fc:	b	1a814 <__assert_fail@plt+0x906c>
   1a800:	add	r8, r8, #1
   1a804:	add	r5, r5, #2
   1a808:	mov	r0, #0
   1a80c:	cmp	r5, #512	; 0x200
   1a810:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a814:	ldr	r0, [r6]
   1a818:	add	r0, r0, r5
   1a81c:	ldrb	r0, [r0, #1]
   1a820:	tst	r0, #64	; 0x40
   1a824:	beq	1a800 <__assert_fail@plt+0x9058>
   1a828:	ldrb	r1, [r8]
   1a82c:	mov	r0, r4
   1a830:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a834:	b	1a800 <__assert_fail@plt+0x9058>
   1a838:	mov	r5, #0
   1a83c:	b	1a854 <__assert_fail@plt+0x90ac>
   1a840:	add	r8, r8, #1
   1a844:	add	r5, r5, #2
   1a848:	mov	r0, #0
   1a84c:	cmp	r5, #512	; 0x200
   1a850:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a854:	ldr	r0, [r6]
   1a858:	add	r0, r0, r5
   1a85c:	ldrb	r0, [r0, #1]
   1a860:	tst	r0, #1
   1a864:	beq	1a840 <__assert_fail@plt+0x9098>
   1a868:	ldrb	r1, [r8]
   1a86c:	mov	r0, r4
   1a870:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a874:	b	1a840 <__assert_fail@plt+0x9098>
   1a878:	mov	r5, #0
   1a87c:	b	1a894 <__assert_fail@plt+0x90ec>
   1a880:	add	r8, r8, #1
   1a884:	add	r5, r5, #2
   1a888:	mov	r0, #0
   1a88c:	cmp	r5, #512	; 0x200
   1a890:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a894:	ldr	r0, [r6]
   1a898:	ldrb	r0, [r0, r5]
   1a89c:	tst	r0, #1
   1a8a0:	beq	1a880 <__assert_fail@plt+0x90d8>
   1a8a4:	ldrb	r1, [r8]
   1a8a8:	mov	r0, r4
   1a8ac:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a8b0:	b	1a880 <__assert_fail@plt+0x90d8>
   1a8b4:	mov	r5, #0
   1a8b8:	b	1a8d0 <__assert_fail@plt+0x9128>
   1a8bc:	add	r8, r8, #1
   1a8c0:	add	r5, r5, #2
   1a8c4:	mov	r0, #0
   1a8c8:	cmp	r5, #512	; 0x200
   1a8cc:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a8d0:	ldr	r0, [r6]
   1a8d4:	add	r0, r0, r5
   1a8d8:	ldrsh	r0, [r0]
   1a8dc:	cmn	r0, #1
   1a8e0:	bgt	1a8bc <__assert_fail@plt+0x9114>
   1a8e4:	ldrb	r1, [r8]
   1a8e8:	mov	r0, r4
   1a8ec:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a8f0:	b	1a8bc <__assert_fail@plt+0x9114>
   1a8f4:	mov	r5, #0
   1a8f8:	b	1a910 <__assert_fail@plt+0x9168>
   1a8fc:	add	r8, r8, #1
   1a900:	add	r5, r5, #2
   1a904:	mov	r0, #0
   1a908:	cmp	r5, #512	; 0x200
   1a90c:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a910:	ldr	r0, [r6]
   1a914:	ldrb	r0, [r0, r5]
   1a918:	tst	r0, #4
   1a91c:	beq	1a8fc <__assert_fail@plt+0x9154>
   1a920:	ldrb	r1, [r8]
   1a924:	mov	r0, r4
   1a928:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a92c:	b	1a8fc <__assert_fail@plt+0x9154>
   1a930:	mov	r5, #0
   1a934:	b	1a94c <__assert_fail@plt+0x91a4>
   1a938:	add	r8, r8, #1
   1a93c:	add	r5, r5, #2
   1a940:	mov	r0, #0
   1a944:	cmp	r5, #512	; 0x200
   1a948:	beq	1a654 <__assert_fail@plt+0x8eac>
   1a94c:	ldr	r0, [r6]
   1a950:	add	r0, r0, r5
   1a954:	ldrb	r0, [r0, #1]
   1a958:	tst	r0, #16
   1a95c:	beq	1a938 <__assert_fail@plt+0x9190>
   1a960:	ldrb	r1, [r8]
   1a964:	mov	r0, r4
   1a968:	bl	19d58 <__assert_fail@plt+0x85b0>
   1a96c:	b	1a938 <__assert_fail@plt+0x9190>
   1a970:	mov	r0, #12
   1a974:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a978:	mov	r1, #0
   1a97c:	ldr	r2, [r0, r1, lsl #2]
   1a980:	mvn	r2, r2
   1a984:	str	r2, [r0, r1, lsl #2]
   1a988:	add	r1, r1, #1
   1a98c:	cmp	r1, #8
   1a990:	bne	1a97c <__assert_fail@plt+0x91d4>
   1a994:	bx	lr
   1a998:	mov	r2, #0
   1a99c:	ldr	ip, [r1, r2, lsl #2]
   1a9a0:	ldr	r3, [r0, r2, lsl #2]
   1a9a4:	and	r3, r3, ip
   1a9a8:	str	r3, [r0, r2, lsl #2]
   1a9ac:	add	r2, r2, #1
   1a9b0:	cmp	r2, #8
   1a9b4:	bne	1a99c <__assert_fail@plt+0x91f4>
   1a9b8:	bx	lr
   1a9bc:	push	{fp, lr}
   1a9c0:	mov	fp, sp
   1a9c4:	mov	lr, r0
   1a9c8:	ldr	r3, [r0, #80]	; 0x50
   1a9cc:	mov	r0, #1
   1a9d0:	cmp	r3, #1
   1a9d4:	beq	1aa14 <__assert_fail@plt+0x926c>
   1a9d8:	ldr	ip, [lr, #28]
   1a9dc:	add	r3, r1, #1
   1a9e0:	cmp	r3, ip
   1a9e4:	popge	{fp, pc}
   1a9e8:	ldr	r0, [lr, #8]
   1a9ec:	add	ip, r0, r1, lsl #2
   1a9f0:	mov	r0, #1
   1a9f4:	ldr	r3, [ip, r0, lsl #2]
   1a9f8:	cmn	r3, #1
   1a9fc:	bne	1aa14 <__assert_fail@plt+0x926c>
   1aa00:	add	r0, r0, #1
   1aa04:	add	r3, r1, r0
   1aa08:	ldr	r2, [lr, #28]
   1aa0c:	cmp	r3, r2
   1aa10:	blt	1a9f4 <__assert_fail@plt+0x924c>
   1aa14:	pop	{fp, pc}
   1aa18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1aa1c:	add	fp, sp, #24
   1aa20:	mov	r7, r1
   1aa24:	mov	r9, r0
   1aa28:	ldr	r0, [r1, #40]	; 0x28
   1aa2c:	ldr	r1, [r1, #56]	; 0x38
   1aa30:	mov	r8, #7
   1aa34:	cmp	r1, r0
   1aa38:	ble	1aafc <__assert_fail@plt+0x9354>
   1aa3c:	mov	r6, r2
   1aa40:	ldrb	r5, [r2]
   1aa44:	mov	r4, #0
   1aa48:	b	1aa60 <__assert_fail@plt+0x92b8>
   1aa4c:	ldr	r1, [r9, #4]
   1aa50:	strb	r0, [r1, r4]
   1aa54:	add	r4, r4, #1
   1aa58:	cmp	r4, #32
   1aa5c:	beq	1aafc <__assert_fail@plt+0x9354>
   1aa60:	ldrb	r0, [r6, #4]
   1aa64:	cmp	r0, #30
   1aa68:	bne	1aa78 <__assert_fail@plt+0x92d0>
   1aa6c:	mov	r0, r7
   1aa70:	bl	1ab04 <__assert_fail@plt+0x935c>
   1aa74:	b	1aa8c <__assert_fail@plt+0x92e4>
   1aa78:	ldr	r0, [r7, #4]
   1aa7c:	ldr	r1, [r7, #40]	; 0x28
   1aa80:	add	r2, r1, #1
   1aa84:	str	r2, [r7, #40]	; 0x28
   1aa88:	ldrb	r0, [r0, r1]
   1aa8c:	ldr	r1, [r7, #40]	; 0x28
   1aa90:	ldr	r2, [r7, #56]	; 0x38
   1aa94:	cmp	r2, r1
   1aa98:	ble	1aafc <__assert_fail@plt+0x9354>
   1aa9c:	cmp	r0, r5
   1aaa0:	bne	1aa4c <__assert_fail@plt+0x92a4>
   1aaa4:	ldr	r2, [r7, #4]
   1aaa8:	ldrb	r2, [r2, r1]
   1aaac:	cmp	r2, #93	; 0x5d
   1aab0:	bne	1aa4c <__assert_fail@plt+0x92a4>
   1aab4:	add	r0, r1, #1
   1aab8:	str	r0, [r7, #40]	; 0x28
   1aabc:	ldr	r0, [r9, #4]
   1aac0:	mov	r8, #0
   1aac4:	strb	r8, [r0, r4]
   1aac8:	ldrb	r0, [r6, #4]
   1aacc:	cmp	r0, #30
   1aad0:	beq	1aaec <__assert_fail@plt+0x9344>
   1aad4:	cmp	r0, #28
   1aad8:	beq	1aaf4 <__assert_fail@plt+0x934c>
   1aadc:	cmp	r0, #26
   1aae0:	bne	1aafc <__assert_fail@plt+0x9354>
   1aae4:	mov	r0, #3
   1aae8:	b	1aaf8 <__assert_fail@plt+0x9350>
   1aaec:	mov	r0, #4
   1aaf0:	b	1aaf8 <__assert_fail@plt+0x9350>
   1aaf4:	mov	r0, #2
   1aaf8:	str	r0, [r9]
   1aafc:	mov	r0, r8
   1ab00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ab04:	push	{r4, r5, r6, sl, fp, lr}
   1ab08:	add	fp, sp, #16
   1ab0c:	mov	r4, r0
   1ab10:	ldrb	r0, [r0, #75]	; 0x4b
   1ab14:	cmp	r0, #0
   1ab18:	bne	1ab38 <__assert_fail@plt+0x9390>
   1ab1c:	ldr	r0, [r4, #4]
   1ab20:	ldr	r1, [r4, #40]	; 0x28
   1ab24:	add	r2, r1, #1
   1ab28:	str	r2, [r4, #40]	; 0x28
   1ab2c:	ldrb	r6, [r0, r1]
   1ab30:	uxtb	r0, r6
   1ab34:	pop	{r4, r5, r6, sl, fp, pc}
   1ab38:	ldrb	r0, [r4, #76]	; 0x4c
   1ab3c:	cmp	r0, #0
   1ab40:	beq	1aba4 <__assert_fail@plt+0x93fc>
   1ab44:	ldr	r0, [r4, #28]
   1ab48:	ldr	r5, [r4, #40]	; 0x28
   1ab4c:	cmp	r5, r0
   1ab50:	beq	1ab64 <__assert_fail@plt+0x93bc>
   1ab54:	ldr	r0, [r4, #8]
   1ab58:	ldr	r0, [r0, r5, lsl #2]
   1ab5c:	cmn	r0, #1
   1ab60:	beq	1abc0 <__assert_fail@plt+0x9418>
   1ab64:	ldr	r0, [r4]
   1ab68:	ldr	r1, [r4, #12]
   1ab6c:	ldr	r2, [r4, #24]
   1ab70:	ldr	r1, [r1, r5, lsl #2]
   1ab74:	add	r1, r2, r1
   1ab78:	add	r0, r0, r1
   1ab7c:	ldrsb	r6, [r0]
   1ab80:	cmn	r6, #1
   1ab84:	ble	1abc0 <__assert_fail@plt+0x9418>
   1ab88:	mov	r0, r4
   1ab8c:	mov	r1, r5
   1ab90:	bl	1a9bc <__assert_fail@plt+0x9214>
   1ab94:	add	r0, r0, r5
   1ab98:	str	r0, [r4, #40]	; 0x28
   1ab9c:	uxtb	r0, r6
   1aba0:	pop	{r4, r5, r6, sl, fp, pc}
   1aba4:	ldr	r0, [r4]
   1aba8:	ldr	r1, [r4, #24]
   1abac:	ldr	r2, [r4, #40]	; 0x28
   1abb0:	add	r3, r2, #1
   1abb4:	str	r3, [r4, #40]	; 0x28
   1abb8:	add	r1, r2, r1
   1abbc:	b	1ab2c <__assert_fail@plt+0x9384>
   1abc0:	add	r0, r5, #1
   1abc4:	str	r0, [r4, #40]	; 0x28
   1abc8:	ldr	r0, [r4, #4]
   1abcc:	ldrb	r6, [r0, r5]
   1abd0:	uxtb	r0, r6
   1abd4:	pop	{r4, r5, r6, sl, fp, pc}
   1abd8:	ldr	r1, [r1, #92]	; 0x5c
   1abdc:	cmp	r1, #2
   1abe0:	bxlt	lr
   1abe4:	b	116b8 <btowc@plt>
   1abe8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1abec:	add	fp, sp, #24
   1abf0:	mov	r4, r2
   1abf4:	mov	r5, r1
   1abf8:	mov	r6, r0
   1abfc:	mvn	r1, #0
   1ac00:	movw	r8, #32816	; 0x8030
   1ac04:	mov	r7, r1
   1ac08:	mov	r0, r5
   1ac0c:	mov	r1, r6
   1ac10:	mov	r2, r4
   1ac14:	bl	17cf4 <__assert_fail@plt+0x654c>
   1ac18:	ldrb	r2, [r5, #4]
   1ac1c:	cmp	r2, #24
   1ac20:	beq	1ac88 <__assert_fail@plt+0x94e0>
   1ac24:	cmp	r2, #2
   1ac28:	beq	1ac84 <__assert_fail@plt+0x94dc>
   1ac2c:	ldrb	r0, [r5]
   1ac30:	cmp	r0, #44	; 0x2c
   1ac34:	beq	1ac88 <__assert_fail@plt+0x94e0>
   1ac38:	mvn	r1, #1
   1ac3c:	cmp	r0, #48	; 0x30
   1ac40:	bcc	1ac04 <__assert_fail@plt+0x945c>
   1ac44:	cmp	r2, #1
   1ac48:	bne	1ac04 <__assert_fail@plt+0x945c>
   1ac4c:	cmn	r7, #2
   1ac50:	beq	1ac04 <__assert_fail@plt+0x945c>
   1ac54:	cmp	r0, #57	; 0x39
   1ac58:	bhi	1ac04 <__assert_fail@plt+0x945c>
   1ac5c:	cmn	r7, #1
   1ac60:	beq	1ac7c <__assert_fail@plt+0x94d4>
   1ac64:	add	r1, r7, r7, lsl #2
   1ac68:	add	r0, r0, r1, lsl #1
   1ac6c:	cmp	r0, r8
   1ac70:	movge	r0, r8
   1ac74:	sub	r1, r0, #48	; 0x30
   1ac78:	b	1ac04 <__assert_fail@plt+0x945c>
   1ac7c:	sub	r1, r0, #48	; 0x30
   1ac80:	b	1ac04 <__assert_fail@plt+0x945c>
   1ac84:	mvn	r7, #1
   1ac88:	mov	r0, r7
   1ac8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ac94:	add	fp, sp, #24
   1ac98:	sub	sp, sp, #8
   1ac9c:	mov	r8, r1
   1aca0:	mov	r5, r0
   1aca4:	mov	r3, r0
   1aca8:	ldr	r7, [r3], #20
   1acac:	mov	r6, #0
   1acb0:	mov	r0, r1
   1acb4:	mov	r1, #0
   1acb8:	mov	r2, #0
   1acbc:	bl	18ef8 <__assert_fail@plt+0x7750>
   1acc0:	str	r0, [sp, #4]
   1acc4:	cmp	r0, #0
   1acc8:	beq	1ad60 <__assert_fail@plt+0x95b8>
   1accc:	add	r4, sp, #4
   1acd0:	mov	r6, #0
   1acd4:	str	r7, [r0]
   1acd8:	ldr	r0, [r4]
   1acdc:	ldr	r1, [r0, #24]
   1ace0:	orr	r1, r1, #262144	; 0x40000
   1ace4:	str	r1, [r0, #24]
   1ace8:	ldr	r0, [r5, #4]
   1acec:	ldr	r7, [r4]
   1acf0:	cmp	r0, #0
   1acf4:	beq	1ad04 <__assert_fail@plt+0x955c>
   1acf8:	add	r4, r7, #4
   1acfc:	mov	r5, r0
   1ad00:	b	1ad38 <__assert_fail@plt+0x9590>
   1ad04:	mov	r1, #0
   1ad08:	mov	r0, r5
   1ad0c:	ldr	r5, [r5, #8]
   1ad10:	cmp	r5, r1
   1ad14:	cmpne	r5, #0
   1ad18:	bne	1ad34 <__assert_fail@plt+0x958c>
   1ad1c:	ldr	r7, [r7]
   1ad20:	ldr	r5, [r0]
   1ad24:	cmp	r5, #0
   1ad28:	mov	r1, r0
   1ad2c:	bne	1ad08 <__assert_fail@plt+0x9560>
   1ad30:	b	1ad5c <__assert_fail@plt+0x95b4>
   1ad34:	add	r4, r7, #8
   1ad38:	add	r3, r5, #20
   1ad3c:	mov	r0, r8
   1ad40:	mov	r1, #0
   1ad44:	mov	r2, #0
   1ad48:	bl	18ef8 <__assert_fail@plt+0x7750>
   1ad4c:	str	r0, [r4]
   1ad50:	cmp	r0, #0
   1ad54:	bne	1acd4 <__assert_fail@plt+0x952c>
   1ad58:	b	1ad60 <__assert_fail@plt+0x95b8>
   1ad5c:	ldr	r6, [sp, #4]
   1ad60:	mov	r0, r6
   1ad64:	sub	sp, fp, #24
   1ad68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad6c:	ldr	r2, [r1, #24]
   1ad70:	uxtb	r3, r2
   1ad74:	cmp	r3, #17
   1ad78:	bne	1ad8c <__assert_fail@plt+0x95e4>
   1ad7c:	ldr	r3, [r1, #20]
   1ad80:	cmp	r3, r0
   1ad84:	orreq	r0, r2, #524288	; 0x80000
   1ad88:	streq	r0, [r1, #24]
   1ad8c:	mov	r0, #0
   1ad90:	bx	lr
   1ad94:	push	{r4, r5, r6, r7, fp, lr}
   1ad98:	add	fp, sp, #16
   1ad9c:	mov	r4, r2
   1ada0:	mov	r5, r1
   1ada4:	mov	r6, r0
   1ada8:	mov	r0, r2
   1adac:	mov	r1, r6
   1adb0:	blx	r5
   1adb4:	cmp	r0, #0
   1adb8:	beq	1add8 <__assert_fail@plt+0x9630>
   1adbc:	b	1ae10 <__assert_fail@plt+0x9668>
   1adc0:	mov	r0, r4
   1adc4:	mov	r1, r7
   1adc8:	blx	r5
   1adcc:	cmp	r0, #0
   1add0:	mov	r6, r7
   1add4:	bne	1ae10 <__assert_fail@plt+0x9668>
   1add8:	ldr	r7, [r6, #4]
   1addc:	cmp	r7, #0
   1ade0:	bne	1adc0 <__assert_fail@plt+0x9618>
   1ade4:	mov	r1, #0
   1ade8:	mov	r0, r6
   1adec:	ldr	r7, [r6, #8]
   1adf0:	cmp	r7, r1
   1adf4:	cmpne	r7, #0
   1adf8:	bne	1adc0 <__assert_fail@plt+0x9618>
   1adfc:	ldr	r6, [r0]
   1ae00:	cmp	r6, #0
   1ae04:	mov	r1, r0
   1ae08:	bne	1ade8 <__assert_fail@plt+0x9640>
   1ae0c:	mov	r0, #0
   1ae10:	pop	{r4, r5, r6, r7, fp, pc}
   1ae14:	ldrb	r2, [r1, #24]
   1ae18:	cmp	r2, #17
   1ae1c:	beq	1ae50 <__assert_fail@plt+0x96a8>
   1ae20:	cmp	r2, #4
   1ae24:	bne	1aea4 <__assert_fail@plt+0x96fc>
   1ae28:	ldr	r2, [r0, #132]	; 0x84
   1ae2c:	cmp	r2, #0
   1ae30:	beq	1aea4 <__assert_fail@plt+0x96fc>
   1ae34:	ldr	r3, [r1, #20]
   1ae38:	ldr	r2, [r2, r3, lsl #2]
   1ae3c:	str	r2, [r1, #20]
   1ae40:	ldr	r1, [r0, #80]	; 0x50
   1ae44:	mov	r3, #1
   1ae48:	orr	r1, r1, r3, lsl r2
   1ae4c:	b	1aea0 <__assert_fail@plt+0x96f8>
   1ae50:	ldr	r2, [r1, #4]
   1ae54:	cmp	r2, #0
   1ae58:	beq	1aea4 <__assert_fail@plt+0x96fc>
   1ae5c:	ldrb	r3, [r2, #24]
   1ae60:	cmp	r3, #17
   1ae64:	bne	1aea4 <__assert_fail@plt+0x96fc>
   1ae68:	ldr	r3, [r2, #4]
   1ae6c:	ldr	r2, [r2, #20]
   1ae70:	str	r3, [r1, #4]
   1ae74:	cmp	r3, #0
   1ae78:	strne	r1, [r3]
   1ae7c:	ldr	r1, [r1, #20]
   1ae80:	ldr	r3, [r0, #132]	; 0x84
   1ae84:	ldr	r1, [r3, r1, lsl #2]
   1ae88:	str	r1, [r3, r2, lsl #2]
   1ae8c:	cmp	r2, #31
   1ae90:	bgt	1aea4 <__assert_fail@plt+0x96fc>
   1ae94:	ldr	r1, [r0, #80]	; 0x50
   1ae98:	mov	r3, #1
   1ae9c:	bic	r1, r1, r3, lsl r2
   1aea0:	str	r1, [r0, #80]	; 0x50
   1aea4:	mov	r0, #0
   1aea8:	bx	lr
   1aeac:	push	{r4, r5, fp, lr}
   1aeb0:	add	fp, sp, #8
   1aeb4:	sub	sp, sp, #8
   1aeb8:	mov	r4, r1
   1aebc:	mov	r5, r0
   1aec0:	mov	r0, #0
   1aec4:	str	r0, [sp, #4]
   1aec8:	ldr	r2, [r1, #4]
   1aecc:	cmp	r2, #0
   1aed0:	beq	1aef8 <__assert_fail@plt+0x9750>
   1aed4:	ldrb	r0, [r2, #24]
   1aed8:	cmp	r0, #17
   1aedc:	bne	1aef8 <__assert_fail@plt+0x9750>
   1aee0:	add	r0, sp, #4
   1aee4:	mov	r1, r5
   1aee8:	bl	1b2d0 <__assert_fail@plt+0x9b28>
   1aeec:	str	r0, [r4, #4]
   1aef0:	cmp	r0, #0
   1aef4:	strne	r4, [r0]
   1aef8:	ldr	r2, [r4, #8]
   1aefc:	cmp	r2, #0
   1af00:	beq	1af28 <__assert_fail@plt+0x9780>
   1af04:	ldrb	r0, [r2, #24]
   1af08:	cmp	r0, #17
   1af0c:	bne	1af28 <__assert_fail@plt+0x9780>
   1af10:	add	r0, sp, #4
   1af14:	mov	r1, r5
   1af18:	bl	1b2d0 <__assert_fail@plt+0x9b28>
   1af1c:	str	r0, [r4, #8]
   1af20:	cmp	r0, #0
   1af24:	strne	r4, [r0]
   1af28:	ldr	r0, [sp, #4]
   1af2c:	sub	sp, fp, #8
   1af30:	pop	{r4, r5, fp, pc}
   1af34:	push	{r4, r5, fp, lr}
   1af38:	add	fp, sp, #8
   1af3c:	mov	r4, r1
   1af40:	mov	r5, r0
   1af44:	ldr	r2, [r1, #24]
   1af48:	uxtb	r0, r2
   1af4c:	cmp	r0, #16
   1af50:	bne	1af70 <__assert_fail@plt+0x97c8>
   1af54:	ldr	r0, [r4, #4]
   1af58:	ldr	r1, [r0, #12]
   1af5c:	str	r1, [r4, #12]
   1af60:	ldr	r0, [r0, #28]
   1af64:	str	r0, [r4, #28]
   1af68:	mov	r0, #0
   1af6c:	pop	{r4, r5, fp, pc}
   1af70:	str	r4, [r4, #12]
   1af74:	ldr	r1, [r4, #20]
   1af78:	mov	r0, r5
   1af7c:	bl	1b3ec <__assert_fail@plt+0x9c44>
   1af80:	str	r0, [r4, #28]
   1af84:	cmn	r0, #1
   1af88:	beq	1afbc <__assert_fail@plt+0x9814>
   1af8c:	mov	r1, r0
   1af90:	ldrb	r2, [r4, #24]
   1af94:	mov	r0, #0
   1af98:	cmp	r2, #12
   1af9c:	popne	{r4, r5, fp, pc}
   1afa0:	ldr	r2, [r5]
   1afa4:	add	r1, r2, r1, lsl #3
   1afa8:	ldr	r2, [r1, #4]
   1afac:	ldr	r3, [r4, #20]
   1afb0:	bfi	r2, r3, #8, #10
   1afb4:	str	r2, [r1, #4]
   1afb8:	pop	{r4, r5, fp, pc}
   1afbc:	mov	r0, #12
   1afc0:	pop	{r4, r5, fp, pc}
   1afc4:	ldrb	r0, [r1, #24]
   1afc8:	cmp	r0, #16
   1afcc:	beq	1afe0 <__assert_fail@plt+0x9838>
   1afd0:	cmp	r0, #11
   1afd4:	bne	1affc <__assert_fail@plt+0x9854>
   1afd8:	ldr	r0, [r1, #4]
   1afdc:	b	1b01c <__assert_fail@plt+0x9874>
   1afe0:	ldmib	r1, {r0, r2}
   1afe4:	ldr	r3, [r2, #12]
   1afe8:	str	r3, [r0, #16]
   1afec:	ldr	r0, [r1, #16]
   1aff0:	str	r0, [r2, #16]
   1aff4:	mov	r0, #0
   1aff8:	bx	lr
   1affc:	ldr	r0, [r1, #4]
   1b000:	cmp	r0, #0
   1b004:	ldrne	r2, [r1, #16]
   1b008:	strne	r2, [r0, #16]
   1b00c:	ldr	r0, [r1, #8]
   1b010:	cmp	r0, #0
   1b014:	beq	1b020 <__assert_fail@plt+0x9878>
   1b018:	ldr	r1, [r1, #16]
   1b01c:	str	r1, [r0, #16]
   1b020:	mov	r0, #0
   1b024:	bx	lr
   1b028:	push	{fp, lr}
   1b02c:	mov	fp, sp
   1b030:	ldr	r2, [r1, #24]
   1b034:	ldr	ip, [r1, #28]
   1b038:	mvn	r3, #1
   1b03c:	uxtab	r2, r3, r2
   1b040:	cmp	r2, #14
   1b044:	bhi	1b0f8 <__assert_fail@plt+0x9950>
   1b048:	add	r3, pc, #0
   1b04c:	ldr	pc, [r3, r2, lsl #2]
   1b050:	andeq	fp, r1, r0, asr #2
   1b054:	strdeq	fp, [r1], -r8
   1b058:	andeq	fp, r1, ip, lsl #2
   1b05c:	strdeq	fp, [r1], -r8
   1b060:	strdeq	fp, [r1], -r8
   1b064:	strdeq	fp, [r1], -r8
   1b068:	andeq	fp, r1, ip, lsl #1
   1b06c:	andeq	fp, r1, ip, lsl #1
   1b070:	andeq	fp, r1, r8, lsr #1
   1b074:	andeq	fp, r1, r8, lsr #1
   1b078:	andeq	fp, r1, ip, lsl #1
   1b07c:	strdeq	fp, [r1], -r8
   1b080:	strdeq	fp, [r1], -r8
   1b084:	strdeq	fp, [r1], -r8
   1b088:	andeq	fp, r1, r0, asr #2
   1b08c:	ldr	r0, [r0, #20]
   1b090:	add	r2, ip, ip, lsl #1
   1b094:	add	r0, r0, r2, lsl #2
   1b098:	ldr	r1, [r1, #16]
   1b09c:	ldr	r1, [r1, #28]
   1b0a0:	pop	{fp, lr}
   1b0a4:	b	1b638 <__assert_fail@plt+0x9e90>
   1b0a8:	ldrb	r2, [r0, #88]	; 0x58
   1b0ac:	orr	r2, r2, #1
   1b0b0:	strb	r2, [r0, #88]	; 0x58
   1b0b4:	add	r3, r1, #16
   1b0b8:	ldr	lr, [r1, #4]
   1b0bc:	ldr	r1, [r1, #8]
   1b0c0:	cmp	r1, #0
   1b0c4:	mov	r2, r3
   1b0c8:	addne	r2, r1, #12
   1b0cc:	ldr	r1, [r2]
   1b0d0:	ldr	r2, [r1, #28]
   1b0d4:	cmp	lr, #0
   1b0d8:	addne	r3, lr, #12
   1b0dc:	ldr	r1, [r3]
   1b0e0:	ldr	r1, [r1, #28]
   1b0e4:	ldr	r0, [r0, #20]
   1b0e8:	add	r3, ip, ip, lsl #1
   1b0ec:	add	r0, r0, r3, lsl #2
   1b0f0:	pop	{fp, lr}
   1b0f4:	b	1b5bc <__assert_fail@plt+0x9e14>
   1b0f8:	ldr	r0, [r0, #12]
   1b0fc:	ldr	r1, [r1, #16]
   1b100:	ldr	r1, [r1, #28]
   1b104:	str	r1, [r0, ip, lsl #2]
   1b108:	b	1b140 <__assert_fail@plt+0x9998>
   1b10c:	ldr	r3, [r0, #12]
   1b110:	ldr	r2, [r1, #16]
   1b114:	ldr	r2, [r2, #28]
   1b118:	str	r2, [r3, ip, lsl #2]
   1b11c:	ldrb	r1, [r1, #24]
   1b120:	cmp	r1, #4
   1b124:	bne	1b140 <__assert_fail@plt+0x9998>
   1b128:	ldr	r0, [r0, #20]
   1b12c:	add	r1, ip, ip, lsl #1
   1b130:	add	r0, r0, r1, lsl #2
   1b134:	mov	r1, r2
   1b138:	pop	{fp, lr}
   1b13c:	b	1b638 <__assert_fail@plt+0x9e90>
   1b140:	mov	r0, #0
   1b144:	pop	{fp, pc}
   1b148:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b14c:	add	fp, sp, #24
   1b150:	sub	sp, sp, #16
   1b154:	mov	r4, r0
   1b158:	mov	r7, #0
   1b15c:	add	r8, sp, #4
   1b160:	mov	r6, #0
   1b164:	b	1b194 <__assert_fail@plt+0x99ec>
   1b168:	mov	r0, r7
   1b16c:	ldr	r1, [r4, #8]
   1b170:	add	r2, r6, #1
   1b174:	subs	r3, r2, r1
   1b178:	mov	r6, r3
   1b17c:	movne	r6, r2
   1b180:	movwne	r3, #1
   1b184:	and	r7, r0, r3
   1b188:	tst	r0, #1
   1b18c:	cmpeq	r2, r1
   1b190:	beq	1b1f0 <__assert_fail@plt+0x9a48>
   1b194:	ldr	r0, [r4, #24]
   1b198:	add	r5, r6, r6, lsl #1
   1b19c:	add	r0, r0, r5, lsl #2
   1b1a0:	ldr	r0, [r0, #4]
   1b1a4:	cmp	r0, #0
   1b1a8:	bne	1b168 <__assert_fail@plt+0x99c0>
   1b1ac:	mov	r0, r8
   1b1b0:	mov	r1, r4
   1b1b4:	mov	r2, r6
   1b1b8:	mov	r3, #1
   1b1bc:	bl	1b684 <__assert_fail@plt+0x9edc>
   1b1c0:	cmp	r0, #0
   1b1c4:	bne	1b1f4 <__assert_fail@plt+0x9a4c>
   1b1c8:	ldr	r0, [r4, #24]
   1b1cc:	add	r0, r0, r5, lsl #2
   1b1d0:	ldr	r0, [r0, #4]
   1b1d4:	cmp	r0, #0
   1b1d8:	mov	r0, r7
   1b1dc:	bne	1b16c <__assert_fail@plt+0x99c4>
   1b1e0:	ldr	r0, [sp, #12]
   1b1e4:	bl	13140 <__assert_fail@plt+0x1998>
   1b1e8:	mov	r0, #1
   1b1ec:	b	1b16c <__assert_fail@plt+0x99c4>
   1b1f0:	mov	r0, #0
   1b1f4:	sub	sp, fp, #24
   1b1f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b1fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b200:	add	fp, sp, #24
   1b204:	mov	r4, r0
   1b208:	ldr	r0, [r0, #8]
   1b20c:	cmp	r0, #0
   1b210:	beq	1b2c0 <__assert_fail@plt+0x9b18>
   1b214:	mov	r0, #0
   1b218:	mov	r1, #0
   1b21c:	mov	r2, #0
   1b220:	ldr	r3, [r4, #28]
   1b224:	str	r0, [r3, r1]!
   1b228:	str	r0, [r3, #4]
   1b22c:	str	r0, [r3, #8]
   1b230:	add	r1, r1, #12
   1b234:	add	r2, r2, #1
   1b238:	ldr	r3, [r4, #8]
   1b23c:	cmp	r2, r3
   1b240:	bcc	1b220 <__assert_fail@plt+0x9a78>
   1b244:	cmp	r3, #0
   1b248:	beq	1b2c0 <__assert_fail@plt+0x9b18>
   1b24c:	mov	r5, #0
   1b250:	b	1b264 <__assert_fail@plt+0x9abc>
   1b254:	add	r5, r5, #1
   1b258:	ldr	r0, [r4, #8]
   1b25c:	cmp	r5, r0
   1b260:	bcs	1b2c0 <__assert_fail@plt+0x9b18>
   1b264:	ldr	r0, [r4, #24]
   1b268:	add	r8, r5, r5, lsl #1
   1b26c:	add	r0, r0, r8, lsl #2
   1b270:	ldr	r1, [r0, #4]
   1b274:	cmp	r1, #1
   1b278:	blt	1b254 <__assert_fail@plt+0x9aac>
   1b27c:	ldr	r7, [r0, #8]
   1b280:	mov	r6, #0
   1b284:	ldr	r0, [r7, r6, lsl #2]
   1b288:	add	r0, r0, r0, lsl #1
   1b28c:	ldr	r1, [r4, #28]
   1b290:	add	r0, r1, r0, lsl #2
   1b294:	mov	r1, r5
   1b298:	bl	1bec4 <__assert_fail@plt+0xa71c>
   1b29c:	cmp	r0, #0
   1b2a0:	beq	1b2c8 <__assert_fail@plt+0x9b20>
   1b2a4:	add	r6, r6, #1
   1b2a8:	ldr	r0, [r4, #24]
   1b2ac:	add	r0, r0, r8, lsl #2
   1b2b0:	ldr	r0, [r0, #4]
   1b2b4:	cmp	r6, r0
   1b2b8:	blt	1b284 <__assert_fail@plt+0x9adc>
   1b2bc:	b	1b254 <__assert_fail@plt+0x9aac>
   1b2c0:	mov	r0, #0
   1b2c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2c8:	mov	r0, #12
   1b2cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2d4:	add	fp, sp, #28
   1b2d8:	sub	sp, sp, #4
   1b2dc:	mov	r9, r2
   1b2e0:	mov	r8, r0
   1b2e4:	ldr	r5, [r2, #4]
   1b2e8:	ldr	r6, [r1]
   1b2ec:	cmp	r5, #0
   1b2f0:	ldrbne	r0, [r1, #28]
   1b2f4:	andsne	r0, r0, #16
   1b2f8:	bne	1b3c4 <__assert_fail@plt+0x9c1c>
   1b2fc:	mov	r0, r6
   1b300:	mov	r1, #0
   1b304:	mov	r2, #0
   1b308:	mov	r3, #8
   1b30c:	bl	17e7c <__assert_fail@plt+0x66d4>
   1b310:	mov	sl, r0
   1b314:	mov	r0, r6
   1b318:	mov	r1, #0
   1b31c:	mov	r2, #0
   1b320:	mov	r3, #9
   1b324:	bl	17e7c <__assert_fail@plt+0x66d4>
   1b328:	mov	r4, r0
   1b32c:	cmp	r5, #0
   1b330:	mov	r7, r0
   1b334:	beq	1b350 <__assert_fail@plt+0x9ba8>
   1b338:	mov	r0, r6
   1b33c:	mov	r1, r5
   1b340:	mov	r2, r4
   1b344:	mov	r3, #16
   1b348:	bl	17e7c <__assert_fail@plt+0x66d4>
   1b34c:	mov	r7, r0
   1b350:	mov	r0, r6
   1b354:	mov	r1, sl
   1b358:	mov	r2, r7
   1b35c:	mov	r3, #16
   1b360:	bl	17e7c <__assert_fail@plt+0x66d4>
   1b364:	cmp	r4, #0
   1b368:	beq	1b378 <__assert_fail@plt+0x9bd0>
   1b36c:	cmp	sl, #0
   1b370:	cmpne	r7, #0
   1b374:	bne	1b388 <__assert_fail@plt+0x9be0>
   1b378:	mov	r0, #12
   1b37c:	str	r0, [r8]
   1b380:	mov	r5, #0
   1b384:	b	1b3e0 <__assert_fail@plt+0x9c38>
   1b388:	mov	r5, r0
   1b38c:	cmp	r0, #0
   1b390:	beq	1b378 <__assert_fail@plt+0x9bd0>
   1b394:	ldr	r0, [r9, #20]
   1b398:	str	r0, [r4, #20]
   1b39c:	str	r0, [sl, #20]
   1b3a0:	ldr	r0, [r4, #24]
   1b3a4:	ldr	r1, [r9, #24]
   1b3a8:	lsr	r1, r1, #19
   1b3ac:	bfi	r0, r1, #19, #1
   1b3b0:	str	r0, [r4, #24]
   1b3b4:	ldr	r0, [sl, #24]
   1b3b8:	bfi	r0, r1, #19, #1
   1b3bc:	str	r0, [sl, #24]
   1b3c0:	b	1b3e0 <__assert_fail@plt+0x9c38>
   1b3c4:	ldr	r0, [r9, #20]
   1b3c8:	cmp	r0, #31
   1b3cc:	bgt	1b3e0 <__assert_fail@plt+0x9c38>
   1b3d0:	ldr	r1, [r6, #80]	; 0x50
   1b3d4:	mov	r2, #1
   1b3d8:	tst	r1, r2, lsl r0
   1b3dc:	bne	1b2fc <__assert_fail@plt+0x9b54>
   1b3e0:	mov	r0, r5
   1b3e4:	sub	sp, fp, #28
   1b3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3f0:	add	fp, sp, #28
   1b3f4:	sub	sp, sp, #12
   1b3f8:	mov	r5, r2
   1b3fc:	mov	r9, r1
   1b400:	mov	r4, r0
   1b404:	ldr	r7, [r0, #4]
   1b408:	ldr	r0, [r0, #8]
   1b40c:	cmp	r0, r7
   1b410:	bcs	1b4e0 <__assert_fail@plt+0x9d38>
   1b414:	ldr	r0, [r4]
   1b418:	ldr	r1, [r4, #8]
   1b41c:	str	r9, [r0, r1, lsl #3]!
   1b420:	str	r5, [r0, #4]
   1b424:	ldr	r0, [r4]
   1b428:	ldr	r1, [r4, #8]
   1b42c:	add	r0, r0, r1, lsl #3
   1b430:	ldr	r1, [r0, #4]
   1b434:	bfc	r1, #8, #10
   1b438:	str	r1, [r0, #4]
   1b43c:	uxtb	r1, r5
   1b440:	cmp	r1, #5
   1b444:	bne	1b458 <__assert_fail@plt+0x9cb0>
   1b448:	ldr	r2, [r4, #92]	; 0x5c
   1b44c:	mov	r0, #1048576	; 0x100000
   1b450:	cmp	r2, #1
   1b454:	bgt	1b468 <__assert_fail@plt+0x9cc0>
   1b458:	sub	r0, r1, #6
   1b45c:	clz	r0, r0
   1b460:	lsr	r0, r0, #5
   1b464:	lsl	r0, r0, #20
   1b468:	ldr	r1, [r4]
   1b46c:	ldr	r2, [r4, #8]
   1b470:	add	r1, r1, r2, lsl #3
   1b474:	ldr	r2, [r1, #4]
   1b478:	bic	r2, r2, #1048576	; 0x100000
   1b47c:	orr	r0, r2, r0
   1b480:	str	r0, [r1, #4]
   1b484:	ldr	r0, [r4, #8]
   1b488:	ldr	r1, [r4, #12]
   1b48c:	mvn	r2, #0
   1b490:	str	r2, [r1, r0, lsl #2]
   1b494:	ldr	r0, [r4, #8]
   1b498:	ldr	r1, [r4, #20]
   1b49c:	add	r0, r0, r0, lsl #1
   1b4a0:	mov	r2, #0
   1b4a4:	str	r2, [r1, r0, lsl #2]!
   1b4a8:	str	r2, [r1, #4]
   1b4ac:	str	r2, [r1, #8]
   1b4b0:	ldr	r0, [r4, #8]
   1b4b4:	ldr	r1, [r4, #24]
   1b4b8:	add	r0, r0, r0, lsl #1
   1b4bc:	str	r2, [r1, r0, lsl #2]!
   1b4c0:	str	r2, [r1, #4]
   1b4c4:	str	r2, [r1, #8]
   1b4c8:	ldr	r6, [r4, #8]
   1b4cc:	add	r0, r6, #1
   1b4d0:	str	r0, [r4, #8]
   1b4d4:	mov	r0, r6
   1b4d8:	sub	sp, fp, #28
   1b4dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4e0:	lsl	r1, r7, #1
   1b4e4:	mvn	r6, #0
   1b4e8:	movw	r0, #21845	; 0x5555
   1b4ec:	movt	r0, #5461	; 0x1555
   1b4f0:	cmp	r1, r0
   1b4f4:	bhi	1b4d4 <__assert_fail@plt+0x9d2c>
   1b4f8:	str	r1, [sp, #8]
   1b4fc:	ldr	r0, [r4]
   1b500:	lsl	r1, r7, #4
   1b504:	bl	22ae8 <__assert_fail@plt+0x11340>
   1b508:	cmp	r0, #0
   1b50c:	beq	1b4d4 <__assert_fail@plt+0x9d2c>
   1b510:	str	r0, [r4]
   1b514:	ldr	r0, [r4, #12]
   1b518:	lsl	r8, r7, #3
   1b51c:	mov	r1, r8
   1b520:	bl	22ae8 <__assert_fail@plt+0x11340>
   1b524:	str	r0, [sp, #4]
   1b528:	ldr	r0, [r4, #16]
   1b52c:	mov	r1, r8
   1b530:	bl	22ae8 <__assert_fail@plt+0x11340>
   1b534:	mov	r2, r0
   1b538:	ldr	r0, [r4, #20]
   1b53c:	add	r1, r7, r7, lsl #1
   1b540:	mov	r7, r2
   1b544:	lsl	r8, r1, #3
   1b548:	mov	r1, r8
   1b54c:	bl	22ae8 <__assert_fail@plt+0x11340>
   1b550:	mov	sl, r0
   1b554:	ldr	r0, [r4, #24]
   1b558:	mov	r1, r8
   1b55c:	bl	22ae8 <__assert_fail@plt+0x11340>
   1b560:	mov	r8, r0
   1b564:	ldr	r0, [sp, #4]
   1b568:	cmp	r0, #0
   1b56c:	beq	1b57c <__assert_fail@plt+0x9dd4>
   1b570:	cmp	r7, #0
   1b574:	cmpne	sl, #0
   1b578:	bne	1b59c <__assert_fail@plt+0x9df4>
   1b57c:	bl	13140 <__assert_fail@plt+0x1998>
   1b580:	mov	r0, r7
   1b584:	bl	13140 <__assert_fail@plt+0x1998>
   1b588:	mov	r0, sl
   1b58c:	bl	13140 <__assert_fail@plt+0x1998>
   1b590:	mov	r0, r8
   1b594:	bl	13140 <__assert_fail@plt+0x1998>
   1b598:	b	1b4d4 <__assert_fail@plt+0x9d2c>
   1b59c:	cmp	r8, #0
   1b5a0:	beq	1b57c <__assert_fail@plt+0x9dd4>
   1b5a4:	add	r1, r4, #12
   1b5a8:	stm	r1, {r0, r7, sl}
   1b5ac:	str	r8, [r4, #24]
   1b5b0:	ldr	r0, [sp, #8]
   1b5b4:	str	r0, [r4, #4]
   1b5b8:	b	1b414 <__assert_fail@plt+0x9c6c>
   1b5bc:	push	{r4, r5, r6, sl, fp, lr}
   1b5c0:	add	fp, sp, #16
   1b5c4:	mov	r5, r2
   1b5c8:	mov	r4, r1
   1b5cc:	mov	r6, r0
   1b5d0:	mov	r0, #2
   1b5d4:	str	r0, [r6]
   1b5d8:	mov	r0, #8
   1b5dc:	bl	22ab8 <__assert_fail@plt+0x11310>
   1b5e0:	str	r0, [r6, #8]
   1b5e4:	cmp	r0, #0
   1b5e8:	beq	1b630 <__assert_fail@plt+0x9e88>
   1b5ec:	cmp	r4, r5
   1b5f0:	bne	1b60c <__assert_fail@plt+0x9e64>
   1b5f4:	mov	r0, #1
   1b5f8:	str	r0, [r6, #4]
   1b5fc:	ldr	r0, [r6, #8]
   1b600:	str	r4, [r0]
   1b604:	mov	r0, #0
   1b608:	pop	{r4, r5, r6, sl, fp, pc}
   1b60c:	mov	r0, #2
   1b610:	str	r0, [r6, #4]
   1b614:	ldr	r0, [r6, #8]
   1b618:	cmp	r4, r5
   1b61c:	stmlt	r0, {r4, r5}
   1b620:	strge	r5, [r0]
   1b624:	strge	r4, [r0, #4]
   1b628:	mov	r0, #0
   1b62c:	pop	{r4, r5, r6, sl, fp, pc}
   1b630:	mov	r0, #12
   1b634:	pop	{r4, r5, r6, sl, fp, pc}
   1b638:	push	{r4, r5, fp, lr}
   1b63c:	add	fp, sp, #8
   1b640:	mov	r5, r1
   1b644:	mov	r4, r0
   1b648:	mov	r0, #1
   1b64c:	str	r0, [r4]
   1b650:	str	r0, [r4, #4]
   1b654:	mov	r0, #4
   1b658:	bl	22ab8 <__assert_fail@plt+0x11310>
   1b65c:	str	r0, [r4, #8]
   1b660:	cmp	r0, #0
   1b664:	strne	r5, [r0]
   1b668:	movne	r0, #0
   1b66c:	popne	{r4, r5, fp, pc}
   1b670:	mov	r0, #0
   1b674:	str	r0, [r4]
   1b678:	str	r0, [r4, #4]
   1b67c:	mov	r0, #12
   1b680:	pop	{r4, r5, fp, pc}
   1b684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b688:	add	fp, sp, #28
   1b68c:	sub	sp, sp, #44	; 0x2c
   1b690:	mov	r8, r3
   1b694:	mov	r6, r2
   1b698:	mov	r5, r1
   1b69c:	mov	r7, r0
   1b6a0:	ldr	r0, [r1, #20]
   1b6a4:	add	r4, r2, r2, lsl #1
   1b6a8:	add	r0, r0, r4, lsl #2
   1b6ac:	ldr	r0, [r0, #4]
   1b6b0:	add	r1, r0, #1
   1b6b4:	add	r0, sp, #32
   1b6b8:	bl	1b898 <__assert_fail@plt+0xa0f0>
   1b6bc:	cmp	r0, #0
   1b6c0:	bne	1b890 <__assert_fail@plt+0xa0e8>
   1b6c4:	ldr	r0, [sp, #36]	; 0x24
   1b6c8:	ldr	r1, [sp, #40]	; 0x28
   1b6cc:	add	r2, r0, #1
   1b6d0:	str	r2, [sp, #36]	; 0x24
   1b6d4:	str	r6, [r1, r0, lsl #2]
   1b6d8:	ldr	r0, [r5, #24]
   1b6dc:	add	r0, r0, r4, lsl #2
   1b6e0:	mvn	r1, #0
   1b6e4:	str	r1, [r0, #4]
   1b6e8:	ldr	r1, [r5]
   1b6ec:	add	r0, r1, r6, lsl #3
   1b6f0:	ldr	r0, [r0, #4]
   1b6f4:	ubfx	r0, r0, #8, #10
   1b6f8:	cmp	r0, #0
   1b6fc:	beq	1b74c <__assert_fail@plt+0x9fa4>
   1b700:	ldr	r2, [r5, #20]
   1b704:	add	r2, r2, r4, lsl #2
   1b708:	ldr	r3, [r2, #4]
   1b70c:	cmp	r3, #0
   1b710:	beq	1b74c <__assert_fail@plt+0x9fa4>
   1b714:	ldr	r2, [r2, #8]
   1b718:	ldr	r2, [r2]
   1b71c:	add	r1, r1, r2, lsl #3
   1b720:	ldrb	r1, [r1, #6]
   1b724:	tst	r1, #4
   1b728:	bne	1b74c <__assert_fail@plt+0x9fa4>
   1b72c:	str	r0, [sp]
   1b730:	mov	r0, r5
   1b734:	mov	r1, r6
   1b738:	mov	r2, r6
   1b73c:	mov	r3, r6
   1b740:	bl	1b8c8 <__assert_fail@plt+0xa120>
   1b744:	cmp	r0, #0
   1b748:	bne	1b890 <__assert_fail@plt+0xa0e8>
   1b74c:	ldr	r0, [r5]
   1b750:	add	r0, r0, r6, lsl #3
   1b754:	ldrb	r0, [r0, #4]
   1b758:	tst	r0, #8
   1b75c:	beq	1b864 <__assert_fail@plt+0xa0bc>
   1b760:	ldr	r0, [r5, #20]
   1b764:	add	r1, r0, r4, lsl #2
   1b768:	ldr	r1, [r1, #4]
   1b76c:	cmp	r1, #1
   1b770:	blt	1b864 <__assert_fail@plt+0xa0bc>
   1b774:	str	r8, [sp, #8]
   1b778:	str	r7, [sp, #12]
   1b77c:	mov	r8, #0
   1b780:	add	r7, sp, #16
   1b784:	add	sl, sp, #32
   1b788:	mov	r6, #0
   1b78c:	b	1b7ac <__assert_fail@plt+0xa004>
   1b790:	mov	r8, #1
   1b794:	ldr	r0, [r5, #20]
   1b798:	add	r1, r0, r4, lsl #2
   1b79c:	ldr	r1, [r1, #4]
   1b7a0:	add	r6, r6, #1
   1b7a4:	cmp	r6, r1
   1b7a8:	bge	1b838 <__assert_fail@plt+0xa090>
   1b7ac:	add	r0, r0, r4, lsl #2
   1b7b0:	ldr	r0, [r0, #8]
   1b7b4:	ldr	r2, [r0, r6, lsl #2]
   1b7b8:	add	r9, r2, r2, lsl #1
   1b7bc:	ldr	r0, [r5, #24]
   1b7c0:	add	r0, r0, r9, lsl #2
   1b7c4:	ldr	r1, [r0, #4]
   1b7c8:	cmn	r1, #1
   1b7cc:	beq	1b790 <__assert_fail@plt+0x9fe8>
   1b7d0:	cmp	r1, #0
   1b7d4:	bne	1b7f4 <__assert_fail@plt+0xa04c>
   1b7d8:	mov	r0, r7
   1b7dc:	mov	r1, r5
   1b7e0:	mov	r3, #0
   1b7e4:	bl	1b684 <__assert_fail@plt+0x9edc>
   1b7e8:	cmp	r0, #0
   1b7ec:	beq	1b804 <__assert_fail@plt+0xa05c>
   1b7f0:	b	1b890 <__assert_fail@plt+0xa0e8>
   1b7f4:	vldr	d16, [r0]
   1b7f8:	ldr	r0, [r0, #8]
   1b7fc:	str	r0, [sp, #24]
   1b800:	vstr	d16, [sp, #16]
   1b804:	mov	r0, sl
   1b808:	mov	r1, r7
   1b80c:	bl	1bb24 <__assert_fail@plt+0xa37c>
   1b810:	cmp	r0, #0
   1b814:	bne	1b890 <__assert_fail@plt+0xa0e8>
   1b818:	ldr	r0, [r5, #24]
   1b81c:	add	r0, r0, r9, lsl #2
   1b820:	ldr	r0, [r0, #4]
   1b824:	cmp	r0, #0
   1b828:	bne	1b794 <__assert_fail@plt+0x9fec>
   1b82c:	ldr	r0, [sp, #24]
   1b830:	bl	13140 <__assert_fail@plt+0x1998>
   1b834:	b	1b790 <__assert_fail@plt+0x9fe8>
   1b838:	tst	r8, #1
   1b83c:	ldr	r7, [sp, #12]
   1b840:	ldr	r0, [sp, #8]
   1b844:	beq	1b864 <__assert_fail@plt+0xa0bc>
   1b848:	cmp	r0, #0
   1b84c:	bne	1b864 <__assert_fail@plt+0xa0bc>
   1b850:	ldr	r0, [r5, #24]
   1b854:	add	r0, r0, r4, lsl #2
   1b858:	mov	r1, #0
   1b85c:	str	r1, [r0, #4]
   1b860:	b	1b87c <__assert_fail@plt+0xa0d4>
   1b864:	ldr	r0, [r5, #24]
   1b868:	vldr	d16, [sp, #32]
   1b86c:	add	r0, r0, r4, lsl #2
   1b870:	ldr	r1, [sp, #40]	; 0x28
   1b874:	str	r1, [r0, #8]
   1b878:	vstr	d16, [r0]
   1b87c:	ldr	r0, [sp, #40]	; 0x28
   1b880:	vldr	d16, [sp, #32]
   1b884:	str	r0, [r7, #8]
   1b888:	vstr	d16, [r7]
   1b88c:	mov	r0, #0
   1b890:	sub	sp, fp, #28
   1b894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b898:	push	{r4, r5, fp, lr}
   1b89c:	add	fp, sp, #8
   1b8a0:	mov	r5, r0
   1b8a4:	mov	r4, #0
   1b8a8:	stm	r0, {r1, r4}
   1b8ac:	lsl	r0, r1, #2
   1b8b0:	bl	22ab8 <__assert_fail@plt+0x11310>
   1b8b4:	str	r0, [r5, #8]
   1b8b8:	cmp	r0, #0
   1b8bc:	moveq	r4, #12
   1b8c0:	mov	r0, r4
   1b8c4:	pop	{r4, r5, fp, pc}
   1b8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8cc:	add	fp, sp, #28
   1b8d0:	sub	sp, sp, #20
   1b8d4:	str	r3, [sp, #8]
   1b8d8:	mov	r8, r2
   1b8dc:	mov	r9, r1
   1b8e0:	mov	r5, r0
   1b8e4:	ldr	r0, [fp, #8]
   1b8e8:	str	r0, [sp, #16]
   1b8ec:	ldr	r0, [r5]
   1b8f0:	add	r0, r0, r9, lsl #3
   1b8f4:	ldrb	r1, [r0, #4]!
   1b8f8:	cmp	r1, #4
   1b8fc:	bne	1b96c <__assert_fail@plt+0xa1c4>
   1b900:	ldr	r0, [r5, #12]
   1b904:	ldr	r1, [r5, #20]
   1b908:	ldr	r6, [r0, r9, lsl #2]
   1b90c:	add	r4, r8, r8, lsl #1
   1b910:	add	r0, r1, r4, lsl #2
   1b914:	mov	r1, #0
   1b918:	str	r1, [r0, #4]
   1b91c:	mov	r0, r5
   1b920:	mov	r1, r6
   1b924:	ldr	r2, [sp, #16]
   1b928:	bl	1bcb4 <__assert_fail@plt+0xa50c>
   1b92c:	mov	sl, #12
   1b930:	cmn	r0, #1
   1b934:	beq	1bae8 <__assert_fail@plt+0xa340>
   1b938:	mov	r7, r0
   1b93c:	ldr	r0, [r5, #12]
   1b940:	ldr	r1, [r0, r9, lsl #2]
   1b944:	str	r1, [r0, r8, lsl #2]
   1b948:	ldr	r0, [r5, #20]
   1b94c:	add	r0, r0, r4, lsl #2
   1b950:	mov	r1, r7
   1b954:	bl	1bd3c <__assert_fail@plt+0xa594>
   1b958:	cmp	r0, #0
   1b95c:	mov	r9, r6
   1b960:	mov	r8, r7
   1b964:	bne	1b8ec <__assert_fail@plt+0xa144>
   1b968:	b	1bae8 <__assert_fail@plt+0xa340>
   1b96c:	ldr	r1, [r5, #20]
   1b970:	add	r6, r9, r9, lsl #1
   1b974:	add	r3, r1, r6, lsl #2
   1b978:	ldr	r2, [r3, #4]
   1b97c:	cmp	r2, #0
   1b980:	beq	1bacc <__assert_fail@plt+0xa324>
   1b984:	ldr	r3, [r3, #8]
   1b988:	ldr	sl, [r3]
   1b98c:	add	r7, r8, r8, lsl #1
   1b990:	add	r4, r1, r7, lsl #2
   1b994:	mov	r1, #0
   1b998:	str	r1, [r4, #4]
   1b99c:	cmp	r2, #1
   1b9a0:	beq	1ba94 <__assert_fail@plt+0xa2ec>
   1b9a4:	str	r6, [sp, #12]
   1b9a8:	mov	r0, r5
   1b9ac:	mov	r1, sl
   1b9b0:	ldr	r6, [sp, #16]
   1b9b4:	mov	r2, r6
   1b9b8:	bl	1be44 <__assert_fail@plt+0xa69c>
   1b9bc:	cmn	r0, #1
   1b9c0:	beq	1b9dc <__assert_fail@plt+0xa234>
   1b9c4:	mov	r1, r0
   1b9c8:	mov	r0, r4
   1b9cc:	bl	1bd3c <__assert_fail@plt+0xa594>
   1b9d0:	cmp	r0, #0
   1b9d4:	bne	1ba44 <__assert_fail@plt+0xa29c>
   1b9d8:	b	1bb1c <__assert_fail@plt+0xa374>
   1b9dc:	mov	r9, sl
   1b9e0:	mov	r8, r7
   1b9e4:	mov	r0, r5
   1b9e8:	mov	r1, sl
   1b9ec:	mov	r2, r6
   1b9f0:	bl	1bcb4 <__assert_fail@plt+0xa50c>
   1b9f4:	mov	sl, #12
   1b9f8:	cmn	r0, #1
   1b9fc:	beq	1bae8 <__assert_fail@plt+0xa340>
   1ba00:	mov	r7, r0
   1ba04:	ldr	r0, [r5, #20]
   1ba08:	add	r0, r0, r8, lsl #2
   1ba0c:	mov	r1, r7
   1ba10:	bl	1bd3c <__assert_fail@plt+0xa594>
   1ba14:	cmp	r0, #0
   1ba18:	beq	1bae8 <__assert_fail@plt+0xa340>
   1ba1c:	ldr	r6, [sp, #16]
   1ba20:	str	r6, [sp]
   1ba24:	mov	r0, r5
   1ba28:	mov	r1, r9
   1ba2c:	mov	r2, r7
   1ba30:	ldr	r3, [sp, #8]
   1ba34:	bl	1b8c8 <__assert_fail@plt+0xa120>
   1ba38:	cmp	r0, #0
   1ba3c:	mov	r7, r8
   1ba40:	bne	1bae4 <__assert_fail@plt+0xa33c>
   1ba44:	ldr	r0, [r5, #20]
   1ba48:	ldr	r1, [sp, #12]
   1ba4c:	add	r0, r0, r1, lsl #2
   1ba50:	ldr	r0, [r0, #8]
   1ba54:	ldr	r9, [r0, #4]
   1ba58:	mov	r0, r5
   1ba5c:	mov	r1, r9
   1ba60:	mov	r2, r6
   1ba64:	bl	1bcb4 <__assert_fail@plt+0xa50c>
   1ba68:	mov	sl, #12
   1ba6c:	cmn	r0, #1
   1ba70:	beq	1bae8 <__assert_fail@plt+0xa340>
   1ba74:	mov	r8, r0
   1ba78:	ldr	r0, [r5, #20]
   1ba7c:	add	r0, r0, r7, lsl #2
   1ba80:	mov	r1, r8
   1ba84:	bl	1bd3c <__assert_fail@plt+0xa594>
   1ba88:	cmp	r0, #0
   1ba8c:	bne	1b8ec <__assert_fail@plt+0xa144>
   1ba90:	b	1bae8 <__assert_fail@plt+0xa340>
   1ba94:	ldr	r1, [sp, #8]
   1ba98:	cmp	r9, r1
   1ba9c:	bne	1baa8 <__assert_fail@plt+0xa300>
   1baa0:	cmp	r8, r9
   1baa4:	bne	1baf4 <__assert_fail@plt+0xa34c>
   1baa8:	ldr	r0, [r0]
   1baac:	ubfx	r0, r0, #8, #10
   1bab0:	ldr	r2, [sp, #16]
   1bab4:	orr	r2, r0, r2
   1bab8:	mov	r0, r5
   1babc:	mov	r9, sl
   1bac0:	mov	r1, sl
   1bac4:	str	r2, [sp, #16]
   1bac8:	b	1ba64 <__assert_fail@plt+0xa2bc>
   1bacc:	ldr	r0, [r5, #12]
   1bad0:	ldr	r1, [r0, r9, lsl #2]
   1bad4:	str	r1, [r0, r8, lsl #2]
   1bad8:	mov	r0, #0
   1badc:	sub	sp, fp, #28
   1bae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bae4:	mov	sl, r0
   1bae8:	mov	r0, sl
   1baec:	sub	sp, fp, #28
   1baf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1baf4:	mov	r0, r4
   1baf8:	mov	r1, sl
   1bafc:	bl	1bd3c <__assert_fail@plt+0xa594>
   1bb00:	mov	r1, r0
   1bb04:	mov	sl, #12
   1bb08:	mov	r0, #0
   1bb0c:	cmp	r1, #0
   1bb10:	moveq	r0, sl
   1bb14:	sub	sp, fp, #28
   1bb18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb1c:	mov	sl, #12
   1bb20:	b	1bae8 <__assert_fail@plt+0xa340>
   1bb24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bb28:	add	fp, sp, #24
   1bb2c:	mov	r8, #0
   1bb30:	cmp	r1, #0
   1bb34:	beq	1bc88 <__assert_fail@plt+0xa4e0>
   1bb38:	mov	r6, r1
   1bb3c:	ldr	r1, [r1, #4]
   1bb40:	cmp	r1, #0
   1bb44:	beq	1bc88 <__assert_fail@plt+0xa4e0>
   1bb48:	mov	r9, r0
   1bb4c:	ldr	r2, [r0]
   1bb50:	ldr	r0, [r0, #4]
   1bb54:	add	r3, r0, r1, lsl #1
   1bb58:	cmp	r2, r3
   1bb5c:	bge	1bb88 <__assert_fail@plt+0xa3e0>
   1bb60:	add	r7, r2, r1
   1bb64:	lsl	r1, r7, #3
   1bb68:	ldr	r0, [r9, #8]
   1bb6c:	bl	22ae8 <__assert_fail@plt+0x11340>
   1bb70:	cmp	r0, #0
   1bb74:	beq	1bca8 <__assert_fail@plt+0xa500>
   1bb78:	str	r0, [r9, #8]
   1bb7c:	lsl	r0, r7, #1
   1bb80:	str	r0, [r9]
   1bb84:	ldr	r0, [r9, #4]
   1bb88:	cmp	r0, #0
   1bb8c:	beq	1bc90 <__assert_fail@plt+0xa4e8>
   1bb90:	ldr	r2, [r6, #4]
   1bb94:	add	r7, r0, r2, lsl #1
   1bb98:	sub	r1, r0, #1
   1bb9c:	sub	r0, r2, #1
   1bba0:	orrs	r2, r0, r1
   1bba4:	bmi	1bbec <__assert_fail@plt+0xa444>
   1bba8:	ldr	r2, [r6, #8]
   1bbac:	ldr	r3, [r9, #8]
   1bbb0:	b	1bbd0 <__assert_fail@plt+0xa428>
   1bbb4:	subge	r1, r1, #1
   1bbb8:	sublt	r7, r7, #1
   1bbbc:	strlt	r4, [r3, r7, lsl #2]
   1bbc0:	sublt	r0, r0, #1
   1bbc4:	orr	r5, r0, r1
   1bbc8:	cmn	r5, #1
   1bbcc:	ble	1bbec <__assert_fail@plt+0xa444>
   1bbd0:	ldr	r4, [r2, r0, lsl #2]
   1bbd4:	ldr	r5, [r3, r1, lsl #2]
   1bbd8:	cmp	r5, r4
   1bbdc:	bne	1bbb4 <__assert_fail@plt+0xa40c>
   1bbe0:	sub	r1, r1, #1
   1bbe4:	sub	r0, r0, #1
   1bbe8:	b	1bbc4 <__assert_fail@plt+0xa41c>
   1bbec:	cmp	r0, #0
   1bbf0:	bmi	1bc10 <__assert_fail@plt+0xa468>
   1bbf4:	add	r2, r0, #1
   1bbf8:	sub	r7, r7, r2
   1bbfc:	ldr	r0, [r9, #8]
   1bc00:	add	r0, r0, r7, lsl #2
   1bc04:	ldr	r1, [r6, #8]
   1bc08:	lsl	r2, r2, #2
   1bc0c:	bl	114cc <memcpy@plt>
   1bc10:	ldr	r1, [r6, #4]
   1bc14:	ldr	r0, [r9, #4]
   1bc18:	add	r1, r0, r1, lsl #1
   1bc1c:	sub	r1, r1, #1
   1bc20:	sub	r2, r1, r7
   1bc24:	adds	r2, r2, #1
   1bc28:	bcs	1bc88 <__assert_fail@plt+0xa4e0>
   1bc2c:	add	r3, r2, r0
   1bc30:	str	r3, [r9, #4]
   1bc34:	sub	r3, r0, #1
   1bc38:	ldr	r0, [r9, #8]
   1bc3c:	ldr	r6, [r0, r3, lsl #2]
   1bc40:	ldr	r5, [r0, r1, lsl #2]
   1bc44:	cmp	r5, r6
   1bc48:	ble	1bc64 <__assert_fail@plt+0xa4bc>
   1bc4c:	add	r6, r2, r3
   1bc50:	str	r5, [r0, r6, lsl #2]
   1bc54:	subs	r2, r2, #1
   1bc58:	sub	r1, r1, #1
   1bc5c:	bne	1bc3c <__assert_fail@plt+0xa494>
   1bc60:	b	1bc88 <__assert_fail@plt+0xa4e0>
   1bc64:	add	r5, r2, r3
   1bc68:	str	r6, [r0, r5, lsl #2]
   1bc6c:	sub	r6, r3, #1
   1bc70:	cmp	r3, #0
   1bc74:	mov	r3, r6
   1bc78:	bgt	1bc3c <__assert_fail@plt+0xa494>
   1bc7c:	add	r1, r0, r7, lsl #2
   1bc80:	lsl	r2, r2, #2
   1bc84:	bl	114cc <memcpy@plt>
   1bc88:	mov	r0, r8
   1bc8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bc90:	ldr	r0, [r6, #4]
   1bc94:	str	r0, [r9, #4]
   1bc98:	ldr	r0, [r9, #8]
   1bc9c:	ldr	r2, [r6, #4]
   1bca0:	ldr	r1, [r6, #8]
   1bca4:	b	1bc80 <__assert_fail@plt+0xa4d8>
   1bca8:	mov	r8, #12
   1bcac:	mov	r0, r8
   1bcb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bcb4:	push	{r4, r5, r6, sl, fp, lr}
   1bcb8:	add	fp, sp, #16
   1bcbc:	mov	r6, r2
   1bcc0:	mov	r4, r1
   1bcc4:	mov	r5, r0
   1bcc8:	ldr	r0, [r0]
   1bccc:	ldr	r1, [r0, r1, lsl #3]!
   1bcd0:	ldr	r2, [r0, #4]
   1bcd4:	mov	r0, r5
   1bcd8:	bl	1b3ec <__assert_fail@plt+0x9c44>
   1bcdc:	cmn	r0, #1
   1bce0:	ldrne	r1, [r5]
   1bce4:	addne	r1, r1, r0, lsl #3
   1bce8:	ldrne	r2, [r1, #4]
   1bcec:	bfine	r2, r6, #8, #10
   1bcf0:	strne	r2, [r1, #4]
   1bcf4:	ldrne	r1, [r5]
   1bcf8:	addne	r2, r1, r4, lsl #3
   1bcfc:	ldrne	r2, [r2, #4]
   1bd00:	movwne	r3, #65280	; 0xff00
   1bd04:	movtne	r3, #3
   1bd08:	andne	r2, r2, r3
   1bd0c:	addne	r1, r1, r0, lsl #3
   1bd10:	ldrne	r3, [r1, #4]
   1bd14:	orrne	r2, r2, r3
   1bd18:	strne	r2, [r1, #4]
   1bd1c:	ldrne	r1, [r5]
   1bd20:	addne	r1, r1, r0, lsl #3
   1bd24:	ldrne	r2, [r1, #4]
   1bd28:	orrne	r2, r2, #262144	; 0x40000
   1bd2c:	strne	r2, [r1, #4]
   1bd30:	ldrne	r1, [r5, #16]
   1bd34:	strne	r4, [r1, r0, lsl #2]
   1bd38:	pop	{r4, r5, r6, sl, fp, pc}
   1bd3c:	push	{r4, r5, fp, lr}
   1bd40:	add	fp, sp, #8
   1bd44:	mov	r5, r1
   1bd48:	mov	r4, r0
   1bd4c:	ldr	r2, [r0]
   1bd50:	cmp	r2, #0
   1bd54:	beq	1bd80 <__assert_fail@plt+0xa5d8>
   1bd58:	ldr	r1, [r4, #4]
   1bd5c:	cmp	r1, #0
   1bd60:	bne	1bd98 <__assert_fail@plt+0xa5f0>
   1bd64:	ldr	r0, [r4, #8]
   1bd68:	str	r5, [r0]
   1bd6c:	ldr	r0, [r4, #4]
   1bd70:	add	r0, r0, #1
   1bd74:	str	r0, [r4, #4]
   1bd78:	mov	r0, #1
   1bd7c:	pop	{r4, r5, fp, pc}
   1bd80:	mov	r0, r4
   1bd84:	mov	r1, r5
   1bd88:	bl	1b638 <__assert_fail@plt+0x9e90>
   1bd8c:	clz	r0, r0
   1bd90:	lsr	r0, r0, #5
   1bd94:	pop	{r4, r5, fp, pc}
   1bd98:	cmp	r2, r1
   1bd9c:	bne	1bdc4 <__assert_fail@plt+0xa61c>
   1bda0:	lsl	r0, r2, #1
   1bda4:	str	r0, [r4]
   1bda8:	ldr	r0, [r4, #8]
   1bdac:	lsl	r1, r2, #3
   1bdb0:	bl	22ae8 <__assert_fail@plt+0x11340>
   1bdb4:	cmp	r0, #0
   1bdb8:	beq	1be3c <__assert_fail@plt+0xa694>
   1bdbc:	str	r0, [r4, #8]
   1bdc0:	ldr	r1, [r4, #4]
   1bdc4:	ldr	ip, [r4, #8]
   1bdc8:	ldr	r2, [ip]
   1bdcc:	cmp	r2, r5
   1bdd0:	ble	1be04 <__assert_fail@plt+0xa65c>
   1bdd4:	cmp	r1, #1
   1bdd8:	blt	1be34 <__assert_fail@plt+0xa68c>
   1bddc:	add	r3, ip, r1, lsl #2
   1bde0:	mov	r2, r3
   1bde4:	ldr	r0, [r2, #-4]!
   1bde8:	str	r0, [r3]
   1bdec:	sub	r1, r1, #1
   1bdf0:	cmp	r1, #0
   1bdf4:	mov	r3, r2
   1bdf8:	bgt	1bde4 <__assert_fail@plt+0xa63c>
   1bdfc:	mov	r1, #0
   1be00:	b	1be34 <__assert_fail@plt+0xa68c>
   1be04:	add	r2, ip, r1, lsl #2
   1be08:	ldr	r3, [r2, #-4]
   1be0c:	cmp	r3, r5
   1be10:	ble	1be34 <__assert_fail@plt+0xa68c>
   1be14:	sub	r1, r1, #2
   1be18:	str	r3, [r2]
   1be1c:	ldr	r3, [r2, #-8]
   1be20:	sub	r2, r2, #4
   1be24:	sub	r1, r1, #1
   1be28:	cmp	r3, r5
   1be2c:	bgt	1be18 <__assert_fail@plt+0xa670>
   1be30:	add	r1, r1, #2
   1be34:	str	r5, [ip, r1, lsl #2]
   1be38:	b	1bd6c <__assert_fail@plt+0xa5c4>
   1be3c:	mov	r0, #0
   1be40:	pop	{r4, r5, fp, pc}
   1be44:	push	{r4, r5, fp, lr}
   1be48:	add	fp, sp, #8
   1be4c:	mov	ip, r0
   1be50:	ldr	r3, [r0, #8]
   1be54:	sub	lr, r3, #1
   1be58:	mvn	r0, #0
   1be5c:	cmp	lr, #1
   1be60:	blt	1beb8 <__assert_fail@plt+0xa710>
   1be64:	ldr	r4, [ip]
   1be68:	add	r4, r4, lr, lsl #3
   1be6c:	ldr	r5, [r4, #4]
   1be70:	ands	r4, r5, #262144	; 0x40000
   1be74:	beq	1beb8 <__assert_fail@plt+0xa710>
   1be78:	ldr	r4, [ip, #16]
   1be7c:	sub	lr, r4, #4
   1be80:	ldr	r4, [lr, r3, lsl #2]
   1be84:	cmp	r4, r1
   1be88:	ubfxeq	r4, r5, #8, #10
   1be8c:	cmpeq	r4, r2
   1be90:	beq	1bebc <__assert_fail@plt+0xa714>
   1be94:	sub	r4, r3, #2
   1be98:	cmp	r4, #1
   1be9c:	blt	1beb8 <__assert_fail@plt+0xa710>
   1bea0:	ldr	r4, [ip]
   1bea4:	add	r4, r4, r3, lsl #3
   1bea8:	ldr	r5, [r4, #-12]
   1beac:	ands	r4, r5, #262144	; 0x40000
   1beb0:	sub	r3, r3, #1
   1beb4:	bne	1be80 <__assert_fail@plt+0xa6d8>
   1beb8:	pop	{r4, r5, fp, pc}
   1bebc:	sub	r0, r3, #1
   1bec0:	pop	{r4, r5, fp, pc}
   1bec4:	push	{r4, r5, fp, lr}
   1bec8:	add	fp, sp, #8
   1becc:	mov	r4, r1
   1bed0:	mov	r5, r0
   1bed4:	ldr	r0, [r0]
   1bed8:	ldr	r1, [r5, #4]
   1bedc:	cmp	r0, r1
   1bee0:	bne	1bf08 <__assert_fail@plt+0xa760>
   1bee4:	mov	r1, #2
   1bee8:	add	r0, r1, r0, lsl #1
   1beec:	str	r0, [r5]
   1bef0:	lsl	r1, r0, #2
   1bef4:	ldr	r0, [r5, #8]
   1bef8:	bl	22ae8 <__assert_fail@plt+0x11340>
   1befc:	cmp	r0, #0
   1bf00:	beq	1bf20 <__assert_fail@plt+0xa778>
   1bf04:	str	r0, [r5, #8]
   1bf08:	ldmib	r5, {r0, r1}
   1bf0c:	add	r2, r0, #1
   1bf10:	str	r2, [r5, #4]
   1bf14:	str	r4, [r1, r0, lsl #2]
   1bf18:	mov	r0, #1
   1bf1c:	pop	{r4, r5, fp, pc}
   1bf20:	mov	r0, #0
   1bf24:	pop	{r4, r5, fp, pc}
   1bf28:	push	{r4, r5, fp, lr}
   1bf2c:	add	fp, sp, #8
   1bf30:	mov	r5, r1
   1bf34:	mov	r4, r0
   1bf38:	ldr	r0, [r1, #4]
   1bf3c:	str	r0, [r4, #4]
   1bf40:	ldr	r1, [r1, #4]
   1bf44:	cmp	r1, #1
   1bf48:	blt	1bf7c <__assert_fail@plt+0xa7d4>
   1bf4c:	str	r0, [r4]
   1bf50:	lsl	r0, r0, #2
   1bf54:	bl	22ab8 <__assert_fail@plt+0x11310>
   1bf58:	str	r0, [r4, #8]
   1bf5c:	cmp	r0, #0
   1bf60:	beq	1bf90 <__assert_fail@plt+0xa7e8>
   1bf64:	ldr	r2, [r5, #4]
   1bf68:	ldr	r1, [r5, #8]
   1bf6c:	lsl	r2, r2, #2
   1bf70:	bl	114cc <memcpy@plt>
   1bf74:	mov	r0, #0
   1bf78:	pop	{r4, r5, fp, pc}
   1bf7c:	mov	r0, #0
   1bf80:	str	r0, [r4]
   1bf84:	str	r0, [r4, #4]
   1bf88:	str	r0, [r4, #8]
   1bf8c:	pop	{r4, r5, fp, pc}
   1bf90:	mov	r0, #0
   1bf94:	str	r0, [r4]
   1bf98:	str	r0, [r4, #4]
   1bf9c:	mov	r0, #12
   1bfa0:	pop	{r4, r5, fp, pc}
   1bfa4:	push	{r4, r5, r6, r7, fp, lr}
   1bfa8:	add	fp, sp, #16
   1bfac:	mov	ip, r0
   1bfb0:	ldr	r0, [r0, #4]
   1bfb4:	cmp	r0, #1
   1bfb8:	blt	1c00c <__assert_fail@plt+0xa864>
   1bfbc:	subs	r2, r0, #1
   1bfc0:	mov	r0, #0
   1bfc4:	mov	r3, #0
   1bfc8:	beq	1bff8 <__assert_fail@plt+0xa850>
   1bfcc:	ldr	lr, [ip, #8]
   1bfd0:	mov	r3, #0
   1bfd4:	mov	r4, #1
   1bfd8:	add	r5, r2, r3
   1bfdc:	lsr	r6, r5, #1
   1bfe0:	ldr	r7, [lr, r6, lsl #2]
   1bfe4:	cmp	r7, r1
   1bfe8:	movge	r2, r6
   1bfec:	addlt	r3, r4, r5, lsr #1
   1bff0:	cmp	r3, r2
   1bff4:	bcc	1bfd8 <__assert_fail@plt+0xa830>
   1bff8:	ldr	r2, [ip, #8]
   1bffc:	ldr	r2, [r2, r3, lsl #2]
   1c000:	cmp	r2, r1
   1c004:	addeq	r0, r3, #1
   1c008:	pop	{r4, r5, r6, r7, fp, pc}
   1c00c:	mov	r0, #0
   1c010:	pop	{r4, r5, r6, r7, fp, pc}
   1c014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c018:	add	fp, sp, #28
   1c01c:	sub	sp, sp, #12
   1c020:	mov	r6, r1
   1c024:	ldr	r1, [r2, #4]
   1c028:	cmp	r1, #0
   1c02c:	beq	1c0fc <__assert_fail@plt+0xa954>
   1c030:	mov	r5, r3
   1c034:	mov	sl, r2
   1c038:	str	r0, [sp, #4]
   1c03c:	mov	r0, r2
   1c040:	mov	r1, r3
   1c044:	bl	1c110 <__assert_fail@plt+0xa968>
   1c048:	mov	r4, r0
   1c04c:	ldr	r0, [r6, #32]
   1c050:	str	r6, [sp, #8]
   1c054:	ldr	r1, [r6, #68]	; 0x44
   1c058:	and	r1, r1, r4
   1c05c:	add	r1, r1, r1, lsl #1
   1c060:	mov	r6, r0
   1c064:	ldr	r2, [r6, r1, lsl #2]!
   1c068:	cmp	r2, #1
   1c06c:	blt	1c0c8 <__assert_fail@plt+0xa920>
   1c070:	add	r0, r0, r1, lsl #2
   1c074:	ldr	r8, [r0, #8]
   1c078:	mov	r9, #0
   1c07c:	b	1c090 <__assert_fail@plt+0xa8e8>
   1c080:	ldr	r0, [r6]
   1c084:	add	r9, r9, #1
   1c088:	cmp	r9, r0
   1c08c:	bge	1c0c8 <__assert_fail@plt+0xa920>
   1c090:	ldr	r7, [r8, r9, lsl #2]
   1c094:	ldr	r0, [r7]
   1c098:	cmp	r0, r4
   1c09c:	bne	1c080 <__assert_fail@plt+0xa8d8>
   1c0a0:	ldrb	r0, [r7, #52]	; 0x34
   1c0a4:	and	r0, r0, #15
   1c0a8:	cmp	r0, r5
   1c0ac:	bne	1c080 <__assert_fail@plt+0xa8d8>
   1c0b0:	ldr	r0, [r7, #40]	; 0x28
   1c0b4:	mov	r1, sl
   1c0b8:	bl	1c13c <__assert_fail@plt+0xa994>
   1c0bc:	cmp	r0, #0
   1c0c0:	beq	1c080 <__assert_fail@plt+0xa8d8>
   1c0c4:	b	1c104 <__assert_fail@plt+0xa95c>
   1c0c8:	ldr	r0, [sp, #8]
   1c0cc:	mov	r1, sl
   1c0d0:	mov	r2, r5
   1c0d4:	mov	r3, r4
   1c0d8:	bl	1c1a4 <__assert_fail@plt+0xa9fc>
   1c0dc:	mov	r7, r0
   1c0e0:	cmp	r0, #0
   1c0e4:	bne	1c104 <__assert_fail@plt+0xa95c>
   1c0e8:	mov	r0, #12
   1c0ec:	ldr	r1, [sp, #4]
   1c0f0:	str	r0, [r1]
   1c0f4:	mov	r7, #0
   1c0f8:	b	1c104 <__assert_fail@plt+0xa95c>
   1c0fc:	mov	r7, #0
   1c100:	str	r7, [r0]
   1c104:	mov	r0, r7
   1c108:	sub	sp, fp, #28
   1c10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c110:	mov	r2, r0
   1c114:	ldr	r3, [r0, #4]
   1c118:	add	r0, r3, r1
   1c11c:	cmp	r3, #1
   1c120:	bxlt	lr
   1c124:	ldr	r1, [r2, #8]
   1c128:	ldr	r2, [r1], #4
   1c12c:	add	r0, r2, r0
   1c130:	subs	r3, r3, #1
   1c134:	bne	1c128 <__assert_fail@plt+0xa980>
   1c138:	bx	lr
   1c13c:	push	{fp, lr}
   1c140:	mov	fp, sp
   1c144:	mov	lr, r0
   1c148:	mov	r0, #0
   1c14c:	cmp	lr, #0
   1c150:	cmpne	r1, #0
   1c154:	bne	1c15c <__assert_fail@plt+0xa9b4>
   1c158:	pop	{fp, pc}
   1c15c:	ldr	ip, [lr, #4]
   1c160:	ldr	r3, [r1, #4]
   1c164:	cmp	ip, r3
   1c168:	popne	{fp, pc}
   1c16c:	sub	r3, ip, #1
   1c170:	add	r2, r3, #1
   1c174:	cmp	r2, #1
   1c178:	blt	1c19c <__assert_fail@plt+0xa9f4>
   1c17c:	ldr	r2, [r1, #8]
   1c180:	ldr	ip, [r2, r3, lsl #2]
   1c184:	ldr	r2, [lr, #8]
   1c188:	ldr	r2, [r2, r3, lsl #2]
   1c18c:	sub	r3, r3, #1
   1c190:	cmp	r2, ip
   1c194:	beq	1c170 <__assert_fail@plt+0xa9c8>
   1c198:	b	1c158 <__assert_fail@plt+0xa9b0>
   1c19c:	mov	r0, #1
   1c1a0:	pop	{fp, pc}
   1c1a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1a8:	add	fp, sp, #28
   1c1ac:	sub	sp, sp, #20
   1c1b0:	mov	r8, r3
   1c1b4:	mov	r9, r2
   1c1b8:	mov	r7, r1
   1c1bc:	mov	r6, r0
   1c1c0:	mov	r0, #56	; 0x38
   1c1c4:	mov	r1, #1
   1c1c8:	bl	22a64 <__assert_fail@plt+0x112bc>
   1c1cc:	cmp	r0, #0
   1c1d0:	beq	1c3a4 <__assert_fail@plt+0xabfc>
   1c1d4:	mov	r4, r0
   1c1d8:	add	r5, r0, #4
   1c1dc:	mov	r0, r5
   1c1e0:	mov	r1, r7
   1c1e4:	bl	1bf28 <__assert_fail@plt+0xa780>
   1c1e8:	cmp	r0, #0
   1c1ec:	bne	1c3ac <__assert_fail@plt+0xac04>
   1c1f0:	str	r8, [sp, #4]
   1c1f4:	str	r5, [r4, #40]	; 0x28
   1c1f8:	and	r0, r9, #15
   1c1fc:	ldrb	r1, [r4, #52]	; 0x34
   1c200:	and	r1, r1, #240	; 0xf0
   1c204:	orr	r0, r1, r0
   1c208:	strb	r0, [r4, #52]	; 0x34
   1c20c:	ldr	r0, [r7, #4]
   1c210:	cmp	r0, #1
   1c214:	blt	1c378 <__assert_fail@plt+0xabd0>
   1c218:	mov	r3, r5
   1c21c:	and	r0, r9, #4
   1c220:	str	r0, [sp]
   1c224:	and	r0, r9, #2
   1c228:	str	r0, [sp, #8]
   1c22c:	and	r0, r9, #1
   1c230:	str	r0, [sp, #16]
   1c234:	mov	r8, #0
   1c238:	movw	r0, #65280	; 0xff00
   1c23c:	movt	r0, #3
   1c240:	add	sl, r0, #255	; 0xff
   1c244:	mov	r9, #0
   1c248:	str	r5, [sp, #12]
   1c24c:	b	1c274 <__assert_fail@plt+0xaacc>
   1c250:	sub	r1, r8, r9
   1c254:	mov	r0, r3
   1c258:	bl	1c3b8 <__assert_fail@plt+0xac10>
   1c25c:	ldr	r3, [sp, #12]
   1c260:	add	r9, r9, #1
   1c264:	ldr	r0, [r7, #4]
   1c268:	add	r8, r8, #1
   1c26c:	cmp	r8, r0
   1c270:	bge	1c378 <__assert_fail@plt+0xabd0>
   1c274:	ldr	r0, [r7, #8]
   1c278:	ldr	r0, [r0, r8, lsl #2]
   1c27c:	ldr	r1, [r6]
   1c280:	add	r0, r1, r0, lsl #3
   1c284:	ldr	r5, [r0, #4]
   1c288:	and	r0, r5, sl
   1c28c:	cmp	r0, #1
   1c290:	beq	1c264 <__assert_fail@plt+0xaabc>
   1c294:	movw	r0, #65280	; 0xff00
   1c298:	movt	r0, #3
   1c29c:	and	r0, r5, r0
   1c2a0:	mov	r1, #32
   1c2a4:	and	r1, r1, r5, lsr #15
   1c2a8:	ldrb	r2, [r4, #52]	; 0x34
   1c2ac:	orr	r1, r2, r1
   1c2b0:	strb	r1, [r4, #52]	; 0x34
   1c2b4:	uxtb	r2, r5
   1c2b8:	cmp	r2, #2
   1c2bc:	beq	1c2d0 <__assert_fail@plt+0xab28>
   1c2c0:	cmp	r2, #4
   1c2c4:	bne	1c2dc <__assert_fail@plt+0xab34>
   1c2c8:	mov	r2, #64	; 0x40
   1c2cc:	b	1c2d4 <__assert_fail@plt+0xab2c>
   1c2d0:	mov	r2, #16
   1c2d4:	orr	r1, r1, r2
   1c2d8:	strb	r1, [r4, #52]	; 0x34
   1c2dc:	cmp	r0, #0
   1c2e0:	beq	1c264 <__assert_fail@plt+0xaabc>
   1c2e4:	ldr	r0, [r4, #40]	; 0x28
   1c2e8:	cmp	r0, r3
   1c2ec:	bne	1c328 <__assert_fail@plt+0xab80>
   1c2f0:	mov	r0, #12
   1c2f4:	bl	22ab8 <__assert_fail@plt+0x11310>
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c39c <__assert_fail@plt+0xabf4>
   1c300:	str	r0, [r4, #40]	; 0x28
   1c304:	mov	r1, r7
   1c308:	bl	1bf28 <__assert_fail@plt+0xa780>
   1c30c:	cmp	r0, #0
   1c310:	bne	1c39c <__assert_fail@plt+0xabf4>
   1c314:	ldrb	r0, [r4, #52]	; 0x34
   1c318:	orr	r0, r0, #128	; 0x80
   1c31c:	strb	r0, [r4, #52]	; 0x34
   1c320:	mov	r9, #0
   1c324:	ldr	r3, [sp, #12]
   1c328:	ldr	r0, [sp, #16]
   1c32c:	cmp	r0, #0
   1c330:	bne	1c33c <__assert_fail@plt+0xab94>
   1c334:	ands	r0, r5, #256	; 0x100
   1c338:	bne	1c250 <__assert_fail@plt+0xaaa8>
   1c33c:	ldr	r0, [sp, #16]
   1c340:	cmp	r0, #0
   1c344:	andsne	r0, r5, #512	; 0x200
   1c348:	bne	1c250 <__assert_fail@plt+0xaaa8>
   1c34c:	ldr	r0, [sp, #8]
   1c350:	cmp	r0, #0
   1c354:	bne	1c360 <__assert_fail@plt+0xabb8>
   1c358:	ands	r0, r5, #4096	; 0x1000
   1c35c:	bne	1c250 <__assert_fail@plt+0xaaa8>
   1c360:	ldr	r0, [sp]
   1c364:	cmp	r0, #0
   1c368:	bne	1c264 <__assert_fail@plt+0xaabc>
   1c36c:	ands	r0, r5, #16384	; 0x4000
   1c370:	bne	1c250 <__assert_fail@plt+0xaaa8>
   1c374:	b	1c264 <__assert_fail@plt+0xaabc>
   1c378:	mov	r0, r6
   1c37c:	mov	r1, r4
   1c380:	ldr	r2, [sp, #4]
   1c384:	bl	1c400 <__assert_fail@plt+0xac58>
   1c388:	cmp	r0, #0
   1c38c:	bne	1c39c <__assert_fail@plt+0xabf4>
   1c390:	mov	r0, r4
   1c394:	sub	sp, fp, #28
   1c398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c39c:	mov	r0, r4
   1c3a0:	bl	16928 <__assert_fail@plt+0x5180>
   1c3a4:	mov	r4, #0
   1c3a8:	b	1c390 <__assert_fail@plt+0xabe8>
   1c3ac:	mov	r0, r4
   1c3b0:	bl	13140 <__assert_fail@plt+0x1998>
   1c3b4:	b	1c3a4 <__assert_fail@plt+0xabfc>
   1c3b8:	cmp	r1, #0
   1c3bc:	bxmi	lr
   1c3c0:	ldr	r2, [r0, #4]
   1c3c4:	cmp	r2, r1
   1c3c8:	subgt	r2, r2, #1
   1c3cc:	strgt	r2, [r0, #4]
   1c3d0:	cmpgt	r2, r1
   1c3d4:	bgt	1c3dc <__assert_fail@plt+0xac34>
   1c3d8:	bx	lr
   1c3dc:	ldr	r2, [r0, #8]
   1c3e0:	add	r3, r2, r1, lsl #2
   1c3e4:	ldr	r3, [r3, #4]
   1c3e8:	str	r3, [r2, r1, lsl #2]
   1c3ec:	add	r1, r1, #1
   1c3f0:	ldr	r3, [r0, #4]
   1c3f4:	cmp	r1, r3
   1c3f8:	blt	1c3e0 <__assert_fail@plt+0xac38>
   1c3fc:	b	1c3d8 <__assert_fail@plt+0xac30>
   1c400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c404:	add	fp, sp, #28
   1c408:	sub	sp, sp, #4
   1c40c:	mov	r9, r2
   1c410:	mov	r4, r1
   1c414:	mov	r7, r0
   1c418:	str	r2, [r1]
   1c41c:	ldr	r1, [r1, #8]
   1c420:	add	r5, r4, #16
   1c424:	mov	r0, r5
   1c428:	bl	1b898 <__assert_fail@plt+0xa0f0>
   1c42c:	mov	r8, #12
   1c430:	cmp	r0, #0
   1c434:	bne	1c4d0 <__assert_fail@plt+0xad28>
   1c438:	ldr	r0, [r4, #8]
   1c43c:	cmp	r0, #1
   1c440:	blt	1c48c <__assert_fail@plt+0xace4>
   1c444:	mov	r6, #0
   1c448:	b	1c45c <__assert_fail@plt+0xacb4>
   1c44c:	ldr	r0, [r4, #8]
   1c450:	add	r6, r6, #1
   1c454:	cmp	r6, r0
   1c458:	bge	1c48c <__assert_fail@plt+0xace4>
   1c45c:	ldr	r0, [r4, #12]
   1c460:	ldr	r1, [r0, r6, lsl #2]
   1c464:	ldr	r0, [r7]
   1c468:	add	r0, r0, r1, lsl #3
   1c46c:	ldrb	r0, [r0, #4]
   1c470:	tst	r0, #8
   1c474:	bne	1c44c <__assert_fail@plt+0xaca4>
   1c478:	mov	r0, r5
   1c47c:	bl	1bec4 <__assert_fail@plt+0xa71c>
   1c480:	cmp	r0, #0
   1c484:	bne	1c44c <__assert_fail@plt+0xaca4>
   1c488:	b	1c4d0 <__assert_fail@plt+0xad28>
   1c48c:	ldr	sl, [r7, #32]
   1c490:	ldr	r0, [r7, #68]	; 0x44
   1c494:	and	r0, r0, r9
   1c498:	add	r7, r0, r0, lsl #1
   1c49c:	mov	r6, sl
   1c4a0:	ldr	r1, [r6, r7, lsl #2]!
   1c4a4:	mov	r5, r6
   1c4a8:	ldr	r0, [r5, #4]!
   1c4ac:	cmp	r0, r1
   1c4b0:	ble	1c4dc <__assert_fail@plt+0xad34>
   1c4b4:	add	r0, sl, r7, lsl #2
   1c4b8:	ldr	r0, [r0, #8]
   1c4bc:	ldr	r1, [r6]
   1c4c0:	add	r2, r1, #1
   1c4c4:	str	r2, [r6]
   1c4c8:	str	r4, [r0, r1, lsl #2]
   1c4cc:	mov	r8, #0
   1c4d0:	mov	r0, r8
   1c4d4:	sub	sp, fp, #28
   1c4d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4dc:	add	r9, sl, r7, lsl #2
   1c4e0:	ldr	r0, [r9, #8]!
   1c4e4:	mov	r2, #2
   1c4e8:	add	r1, r2, r1, lsl #1
   1c4ec:	str	r1, [sp]
   1c4f0:	lsl	r1, r1, #2
   1c4f4:	bl	22ae8 <__assert_fail@plt+0x11340>
   1c4f8:	cmp	r0, #0
   1c4fc:	beq	1c4d0 <__assert_fail@plt+0xad28>
   1c500:	str	r0, [r9]
   1c504:	ldr	r0, [sp]
   1c508:	str	r0, [r5]
   1c50c:	b	1c4b4 <__assert_fail@plt+0xad0c>
   1c510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c514:	add	fp, sp, #28
   1c518:	sub	sp, sp, #4
   1c51c:	mov	r5, r2
   1c520:	mov	sl, r1
   1c524:	mov	r4, r0
   1c528:	add	r8, r2, #1
   1c52c:	cmp	r3, #1
   1c530:	beq	1c580 <__assert_fail@plt+0xadd8>
   1c534:	cmp	r3, #0
   1c538:	bne	1c5c4 <__assert_fail@plt+0xae1c>
   1c53c:	lsl	r6, r8, #2
   1c540:	mov	r0, r6
   1c544:	bl	22ab8 <__assert_fail@plt+0x11310>
   1c548:	str	r0, [r4, #4]
   1c54c:	mov	r7, #0
   1c550:	cmp	r0, #0
   1c554:	beq	1c604 <__assert_fail@plt+0xae5c>
   1c558:	mov	r0, r6
   1c55c:	bl	22ab8 <__assert_fail@plt+0x11310>
   1c560:	str	r0, [r4, #8]
   1c564:	cmp	r0, #0
   1c568:	beq	1c660 <__assert_fail@plt+0xaeb8>
   1c56c:	str	r8, [r4]
   1c570:	mov	r6, #1
   1c574:	cmp	r5, #1
   1c578:	bge	1c598 <__assert_fail@plt+0xadf0>
   1c57c:	b	1c5d0 <__assert_fail@plt+0xae28>
   1c580:	ldr	r0, [r4]
   1c584:	mov	r6, #1
   1c588:	cmp	r8, r0
   1c58c:	bhi	1c610 <__assert_fail@plt+0xae68>
   1c590:	cmp	r5, #1
   1c594:	blt	1c5d0 <__assert_fail@plt+0xae28>
   1c598:	add	r0, sl, #4
   1c59c:	ldmib	r4, {r1, r2}
   1c5a0:	mov	r3, r5
   1c5a4:	ldr	r7, [r0, #-4]
   1c5a8:	str	r7, [r1], #4
   1c5ac:	ldr	r7, [r0]
   1c5b0:	str	r7, [r2], #4
   1c5b4:	add	r0, r0, #8
   1c5b8:	subs	r3, r3, #1
   1c5bc:	bne	1c5a4 <__assert_fail@plt+0xadfc>
   1c5c0:	b	1c5d4 <__assert_fail@plt+0xae2c>
   1c5c4:	mov	r6, #2
   1c5c8:	cmp	r5, #1
   1c5cc:	bge	1c598 <__assert_fail@plt+0xadf0>
   1c5d0:	mov	r5, #0
   1c5d4:	ldr	r0, [r4]
   1c5d8:	cmp	r5, r0
   1c5dc:	bcs	1c600 <__assert_fail@plt+0xae58>
   1c5e0:	ldmib	r4, {r0, r1}
   1c5e4:	mvn	r2, #0
   1c5e8:	str	r2, [r1, r5, lsl #2]
   1c5ec:	str	r2, [r0, r5, lsl #2]
   1c5f0:	add	r5, r5, #1
   1c5f4:	ldr	r3, [r4]
   1c5f8:	cmp	r5, r3
   1c5fc:	bcc	1c5e8 <__assert_fail@plt+0xae40>
   1c600:	mov	r7, r6
   1c604:	mov	r0, r7
   1c608:	sub	sp, fp, #28
   1c60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c610:	ldr	r0, [r4, #4]
   1c614:	lsl	r9, r8, #2
   1c618:	mov	r1, r9
   1c61c:	bl	22ae8 <__assert_fail@plt+0x11340>
   1c620:	mov	r7, #0
   1c624:	str	r0, [sp]
   1c628:	cmp	r0, #0
   1c62c:	beq	1c604 <__assert_fail@plt+0xae5c>
   1c630:	ldr	r0, [r4, #8]
   1c634:	mov	r1, r9
   1c638:	bl	22ae8 <__assert_fail@plt+0x11340>
   1c63c:	cmp	r0, #0
   1c640:	beq	1c66c <__assert_fail@plt+0xaec4>
   1c644:	str	r8, [r4]
   1c648:	ldr	r1, [sp]
   1c64c:	str	r1, [r4, #4]
   1c650:	str	r0, [r4, #8]
   1c654:	cmp	r5, #1
   1c658:	bge	1c598 <__assert_fail@plt+0xadf0>
   1c65c:	b	1c5d0 <__assert_fail@plt+0xae28>
   1c660:	ldr	r0, [r4, #4]
   1c664:	bl	13140 <__assert_fail@plt+0x1998>
   1c668:	b	1c604 <__assert_fail@plt+0xae5c>
   1c66c:	ldr	r0, [sp]
   1c670:	b	1c664 <__assert_fail@plt+0xaebc>
   1c674:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c678:	add	fp, sp, #24
   1c67c:	sub	sp, sp, #8
   1c680:	mov	r7, r3
   1c684:	mov	r4, r2
   1c688:	mov	r8, r1
   1c68c:	mov	r5, r0
   1c690:	ldr	r9, [fp, #16]
   1c694:	ldr	r6, [r9, #92]	; 0x5c
   1c698:	str	r9, [sp, #4]
   1c69c:	ldr	r0, [fp, #12]
   1c6a0:	str	r0, [sp]
   1c6a4:	ldr	r3, [fp, #8]
   1c6a8:	mov	r0, r1
   1c6ac:	mov	r1, r2
   1c6b0:	mov	r2, r5
   1c6b4:	bl	173d4 <__assert_fail@plt+0x5c2c>
   1c6b8:	cmp	r6, r7
   1c6bc:	movgt	r7, r6
   1c6c0:	add	r1, r4, #1
   1c6c4:	cmp	r1, r7
   1c6c8:	movge	r1, r7
   1c6cc:	mov	r0, r5
   1c6d0:	bl	1742c <__assert_fail@plt+0x5c84>
   1c6d4:	cmp	r0, #0
   1c6d8:	bne	1c71c <__assert_fail@plt+0xaf74>
   1c6dc:	add	r1, r9, #96	; 0x60
   1c6e0:	str	r1, [r5, #68]	; 0x44
   1c6e4:	ldrb	r1, [r9, #88]	; 0x58
   1c6e8:	ubfx	r1, r1, #4, #1
   1c6ec:	strb	r1, [r5, #78]	; 0x4e
   1c6f0:	ldrb	r1, [r5, #75]	; 0x4b
   1c6f4:	cmp	r1, #0
   1c6f8:	beq	1c704 <__assert_fail@plt+0xaf5c>
   1c6fc:	mov	r4, #0
   1c700:	b	1c714 <__assert_fail@plt+0xaf6c>
   1c704:	str	r8, [r5, #4]
   1c708:	ldr	r1, [r9, #92]	; 0x5c
   1c70c:	cmp	r1, #1
   1c710:	movwgt	r4, #0
   1c714:	str	r4, [r5, #28]
   1c718:	str	r4, [r5, #32]
   1c71c:	sub	sp, fp, #24
   1c720:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c724:	push	{r4, r5, r6, sl, fp, lr}
   1c728:	add	fp, sp, #16
   1c72c:	mov	r4, r2
   1c730:	mov	r5, r0
   1c734:	mvn	r0, #0
   1c738:	str	r1, [r5, #88]	; 0x58
   1c73c:	str	r0, [r5, #92]	; 0x5c
   1c740:	cmp	r2, #1
   1c744:	blt	1c790 <__assert_fail@plt+0xafe8>
   1c748:	mov	r6, #12
   1c74c:	movw	r0, #43690	; 0xaaaa
   1c750:	movt	r0, #2730	; 0xaaa
   1c754:	cmp	r4, r0
   1c758:	bhi	1c788 <__assert_fail@plt+0xafe0>
   1c75c:	add	r0, r4, r4, lsl #1
   1c760:	lsl	r0, r0, #3
   1c764:	bl	22ab8 <__assert_fail@plt+0x11310>
   1c768:	str	r0, [r5, #116]	; 0x74
   1c76c:	lsl	r0, r4, #2
   1c770:	bl	22ab8 <__assert_fail@plt+0x11310>
   1c774:	str	r0, [r5, #132]	; 0x84
   1c778:	cmp	r0, #0
   1c77c:	ldrne	r0, [r5, #116]	; 0x74
   1c780:	cmpne	r0, #0
   1c784:	bne	1c790 <__assert_fail@plt+0xafe8>
   1c788:	mov	r0, r6
   1c78c:	pop	{r4, r5, r6, sl, fp, pc}
   1c790:	str	r4, [r5, #128]	; 0x80
   1c794:	mov	r0, #1
   1c798:	str	r0, [r5, #120]	; 0x78
   1c79c:	str	r4, [r5, #112]	; 0x70
   1c7a0:	mov	r6, #0
   1c7a4:	mov	r0, r6
   1c7a8:	pop	{r4, r5, r6, sl, fp, pc}
   1c7ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7b0:	add	fp, sp, #28
   1c7b4:	sub	sp, sp, #28
   1c7b8:	mov	r6, r2
   1c7bc:	mov	r7, r1
   1c7c0:	mov	r4, r0
   1c7c4:	ldr	r0, [r0, #24]
   1c7c8:	cmp	r0, r1
   1c7cc:	ble	1c93c <__assert_fail@plt+0xb194>
   1c7d0:	ldr	r0, [r4, #80]	; 0x50
   1c7d4:	cmp	r0, #2
   1c7d8:	movge	r0, #0
   1c7dc:	strge	r0, [r4, #16]
   1c7e0:	strge	r0, [r4, #20]
   1c7e4:	mov	r0, #0
   1c7e8:	strb	r0, [r4, #76]	; 0x4c
   1c7ec:	str	r0, [r4, #24]
   1c7f0:	str	r0, [r4, #28]
   1c7f4:	str	r0, [r4, #32]
   1c7f8:	mov	r0, #4
   1c7fc:	tst	r6, #1
   1c800:	movweq	r0, #6
   1c804:	ldr	r1, [r4, #44]	; 0x2c
   1c808:	ldr	r2, [r4, #52]	; 0x34
   1c80c:	str	r1, [r4, #48]	; 0x30
   1c810:	str	r2, [r4, #56]	; 0x38
   1c814:	str	r0, [r4, #60]	; 0x3c
   1c818:	ldrb	r0, [r4, #75]	; 0x4b
   1c81c:	cmp	r0, #0
   1c820:	mov	r5, r7
   1c824:	bne	1c834 <__assert_fail@plt+0xb08c>
   1c828:	ldr	r0, [r4]
   1c82c:	str	r0, [r4, #4]
   1c830:	mov	r5, r7
   1c834:	cmp	r5, #0
   1c838:	beq	1c8c4 <__assert_fail@plt+0xb11c>
   1c83c:	ldr	r0, [r4, #32]
   1c840:	cmp	r5, r0
   1c844:	bge	1c94c <__assert_fail@plt+0xb1a4>
   1c848:	ldrb	r0, [r4, #76]	; 0x4c
   1c84c:	cmp	r0, #0
   1c850:	bne	1ca84 <__assert_fail@plt+0xb2dc>
   1c854:	sub	r1, r5, #1
   1c858:	mov	r0, r4
   1c85c:	mov	r2, r6
   1c860:	bl	1d730 <__assert_fail@plt+0xbf88>
   1c864:	str	r0, [r4, #60]	; 0x3c
   1c868:	ldr	r0, [r4, #80]	; 0x50
   1c86c:	cmp	r0, #2
   1c870:	blt	1c88c <__assert_fail@plt+0xb0e4>
   1c874:	ldr	r0, [r4, #8]
   1c878:	ldr	r2, [r4, #28]
   1c87c:	add	r1, r0, r5, lsl #2
   1c880:	sub	r2, r2, r5
   1c884:	lsl	r2, r2, #2
   1c888:	bl	1149c <memmove@plt>
   1c88c:	ldrb	r0, [r4, #75]	; 0x4b
   1c890:	cmp	r0, #0
   1c894:	bne	1cb7c <__assert_fail@plt+0xb3d4>
   1c898:	ldr	r0, [r4, #28]
   1c89c:	ldr	r1, [r4, #32]
   1c8a0:	sub	r0, r0, r5
   1c8a4:	sub	r1, r1, r5
   1c8a8:	str	r0, [r4, #28]
   1c8ac:	str	r1, [r4, #32]
   1c8b0:	ldrb	r0, [r4, #75]	; 0x4b
   1c8b4:	cmp	r0, #0
   1c8b8:	ldreq	r0, [r4, #4]
   1c8bc:	addeq	r0, r0, r5
   1c8c0:	streq	r0, [r4, #4]
   1c8c4:	str	r7, [r4, #24]
   1c8c8:	ldr	r0, [r4, #48]	; 0x30
   1c8cc:	ldr	r1, [r4, #56]	; 0x38
   1c8d0:	ldr	r2, [r4, #80]	; 0x50
   1c8d4:	sub	r0, r0, r5
   1c8d8:	str	r0, [r4, #48]	; 0x30
   1c8dc:	sub	r1, r1, r5
   1c8e0:	str	r1, [r4, #56]	; 0x38
   1c8e4:	cmp	r2, #2
   1c8e8:	blt	1c910 <__assert_fail@plt+0xb168>
   1c8ec:	ldrb	r0, [r4, #72]	; 0x48
   1c8f0:	cmp	r0, #0
   1c8f4:	beq	1c924 <__assert_fail@plt+0xb17c>
   1c8f8:	mov	r0, r4
   1c8fc:	bl	174d0 <__assert_fail@plt+0x5d28>
   1c900:	cmp	r0, #0
   1c904:	beq	1c92c <__assert_fail@plt+0xb184>
   1c908:	sub	sp, fp, #28
   1c90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c910:	ldrb	r1, [r4, #75]	; 0x4b
   1c914:	cmp	r1, #0
   1c918:	bne	1cc10 <__assert_fail@plt+0xb468>
   1c91c:	str	r0, [r4, #28]
   1c920:	b	1c92c <__assert_fail@plt+0xb184>
   1c924:	mov	r0, r4
   1c928:	bl	17ae0 <__assert_fail@plt+0x6338>
   1c92c:	mov	r0, #0
   1c930:	str	r0, [r4, #40]	; 0x28
   1c934:	sub	sp, fp, #28
   1c938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c93c:	sub	r5, r7, r0
   1c940:	cmp	r5, #0
   1c944:	bne	1c83c <__assert_fail@plt+0xb094>
   1c948:	b	1c8c4 <__assert_fail@plt+0xb11c>
   1c94c:	ldr	r9, [r4, #28]
   1c950:	ldrb	r0, [r4, #76]	; 0x4c
   1c954:	cmp	r0, #0
   1c958:	bne	1cd18 <__assert_fail@plt+0xb570>
   1c95c:	mov	r0, #0
   1c960:	str	r0, [r4, #28]
   1c964:	ldr	r1, [r4, #80]	; 0x50
   1c968:	cmp	r1, #2
   1c96c:	blt	1cc28 <__assert_fail@plt+0xb480>
   1c970:	mvn	r0, #0
   1c974:	str	r0, [sp, #24]
   1c978:	ldrb	r0, [r4, #73]	; 0x49
   1c97c:	cmp	r0, #0
   1c980:	beq	1ca34 <__assert_fail@plt+0xb28c>
   1c984:	ldr	r2, [r4]
   1c988:	ldr	r0, [r4, #24]
   1c98c:	add	r0, r2, r0
   1c990:	add	r8, r0, r5
   1c994:	sub	r1, r5, r1
   1c998:	add	r1, r0, r1
   1c99c:	cmp	r1, r2
   1c9a0:	movcc	r1, r2
   1c9a4:	mov	sl, r8
   1c9a8:	sub	sl, sl, #1
   1c9ac:	cmp	sl, r1
   1c9b0:	bcc	1ca28 <__assert_fail@plt+0xb280>
   1c9b4:	ldrb	r2, [sl]
   1c9b8:	and	r2, r2, #192	; 0xc0
   1c9bc:	cmp	r2, #128	; 0x80
   1c9c0:	beq	1c9a8 <__assert_fail@plt+0xb200>
   1c9c4:	ldr	r1, [r4, #48]	; 0x30
   1c9c8:	add	r0, r0, r1
   1c9cc:	sub	r2, r0, sl
   1c9d0:	ldr	r0, [r4, #64]	; 0x40
   1c9d4:	cmp	r0, #0
   1c9d8:	mov	r1, sl
   1c9dc:	bne	1cda0 <__assert_fail@plt+0xb5f8>
   1c9e0:	mov	r0, #0
   1c9e4:	str	r0, [sp, #20]
   1c9e8:	str	r0, [sp, #16]
   1c9ec:	add	r0, sp, #12
   1c9f0:	add	r3, sp, #16
   1c9f4:	bl	23284 <__assert_fail@plt+0x11adc>
   1c9f8:	sub	r1, r8, sl
   1c9fc:	cmp	r0, r1
   1ca00:	bcc	1ca28 <__assert_fail@plt+0xb280>
   1ca04:	cmn	r0, #3
   1ca08:	bhi	1ca28 <__assert_fail@plt+0xb280>
   1ca0c:	mov	r2, #0
   1ca10:	str	r2, [r4, #16]
   1ca14:	str	r2, [r4, #20]
   1ca18:	sub	r0, r0, r1
   1ca1c:	str	r0, [r4, #28]
   1ca20:	ldr	r0, [sp, #12]
   1ca24:	str	r0, [sp, #24]
   1ca28:	ldr	r8, [sp, #24]
   1ca2c:	cmn	r8, #1
   1ca30:	bne	1ca58 <__assert_fail@plt+0xb2b0>
   1ca34:	add	r2, sp, #24
   1ca38:	mov	r0, r4
   1ca3c:	mov	r1, r7
   1ca40:	bl	1d7fc <__assert_fail@plt+0xc054>
   1ca44:	sub	r0, r0, r7
   1ca48:	str	r0, [r4, #28]
   1ca4c:	ldr	r8, [sp, #24]
   1ca50:	cmn	r8, #1
   1ca54:	beq	1ccd8 <__assert_fail@plt+0xb530>
   1ca58:	ldrb	r0, [r4, #78]	; 0x4e
   1ca5c:	cmp	r0, #0
   1ca60:	bne	1cd7c <__assert_fail@plt+0xb5d4>
   1ca64:	mov	r0, #0
   1ca68:	cmp	r8, #10
   1ca6c:	bne	1cce8 <__assert_fail@plt+0xb540>
   1ca70:	ldrb	r0, [r4, #77]	; 0x4d
   1ca74:	cmp	r0, #0
   1ca78:	movwne	r0, #1
   1ca7c:	lsl	r0, r0, #1
   1ca80:	b	1cce8 <__assert_fail@plt+0xb540>
   1ca84:	ldr	r8, [r4, #12]
   1ca88:	ldr	r9, [r4, #28]
   1ca8c:	mov	r0, #0
   1ca90:	mov	r1, r9
   1ca94:	b	1caa4 <__assert_fail@plt+0xb2fc>
   1ca98:	cmp	r0, r3
   1ca9c:	mov	r1, r3
   1caa0:	bge	1cad0 <__assert_fail@plt+0xb328>
   1caa4:	add	r2, r0, r1
   1caa8:	add	r2, r2, r2, lsr #31
   1caac:	asr	sl, r2, #1
   1cab0:	ldr	r2, [r8, sl, lsl #2]
   1cab4:	cmp	r2, r5
   1cab8:	mov	r3, sl
   1cabc:	bgt	1ca98 <__assert_fail@plt+0xb2f0>
   1cac0:	bge	1cad0 <__assert_fail@plt+0xb328>
   1cac4:	add	r0, sl, #1
   1cac8:	mov	r3, r1
   1cacc:	b	1ca98 <__assert_fail@plt+0xb2f0>
   1cad0:	cmp	r2, r5
   1cad4:	addlt	sl, sl, #1
   1cad8:	sub	r1, sl, #1
   1cadc:	mov	r0, r4
   1cae0:	mov	r2, r6
   1cae4:	bl	1d730 <__assert_fail@plt+0xbf88>
   1cae8:	str	r0, [r4, #60]	; 0x3c
   1caec:	cmp	r9, r5
   1caf0:	ble	1cb94 <__assert_fail@plt+0xb3ec>
   1caf4:	cmp	sl, r5
   1caf8:	bne	1cb94 <__assert_fail@plt+0xb3ec>
   1cafc:	ldr	r0, [r8, sl, lsl #2]
   1cb00:	cmp	r0, r5
   1cb04:	bne	1cb94 <__assert_fail@plt+0xb3ec>
   1cb08:	ldr	r0, [r4, #8]
   1cb0c:	add	r1, r0, r5, lsl #2
   1cb10:	sub	r2, r9, r5
   1cb14:	lsl	r2, r2, #2
   1cb18:	bl	1149c <memmove@plt>
   1cb1c:	ldr	r0, [r4, #4]
   1cb20:	ldr	r2, [r4, #28]
   1cb24:	add	r1, r0, r5
   1cb28:	sub	r2, r2, r5
   1cb2c:	bl	1149c <memmove@plt>
   1cb30:	ldr	r0, [r4, #28]
   1cb34:	ldr	r1, [r4, #32]
   1cb38:	sub	r0, r0, r5
   1cb3c:	sub	r1, r1, r5
   1cb40:	str	r0, [r4, #28]
   1cb44:	str	r1, [r4, #32]
   1cb48:	cmp	r0, #1
   1cb4c:	blt	1c8b0 <__assert_fail@plt+0xb108>
   1cb50:	ldr	r0, [r4, #12]
   1cb54:	add	r1, r0, r5, lsl #2
   1cb58:	mov	r2, #0
   1cb5c:	ldr	r3, [r1, r2, lsl #2]
   1cb60:	sub	r3, r3, r5
   1cb64:	str	r3, [r0, r2, lsl #2]
   1cb68:	add	r2, r2, #1
   1cb6c:	ldr	r3, [r4, #28]
   1cb70:	cmp	r2, r3
   1cb74:	blt	1cb5c <__assert_fail@plt+0xb3b4>
   1cb78:	b	1c8b0 <__assert_fail@plt+0xb108>
   1cb7c:	ldr	r0, [r4, #4]
   1cb80:	ldr	r2, [r4, #28]
   1cb84:	add	r1, r0, r5
   1cb88:	sub	r2, r2, r5
   1cb8c:	bl	1149c <memmove@plt>
   1cb90:	b	1c898 <__assert_fail@plt+0xb0f0>
   1cb94:	mov	r0, #0
   1cb98:	strb	r0, [r4, #76]	; 0x4c
   1cb9c:	sub	r0, r5, r7
   1cba0:	ldr	r1, [r4, #44]	; 0x2c
   1cba4:	ldr	r2, [r4, #52]	; 0x34
   1cba8:	add	r1, r0, r1
   1cbac:	str	r1, [r4, #48]	; 0x30
   1cbb0:	add	r0, r0, r2
   1cbb4:	str	r0, [r4, #56]	; 0x38
   1cbb8:	sub	r1, r8, #4
   1cbbc:	mov	r0, sl
   1cbc0:	cmp	sl, #1
   1cbc4:	blt	1cbd8 <__assert_fail@plt+0xb430>
   1cbc8:	ldr	r2, [r1, r0, lsl #2]
   1cbcc:	sub	sl, r0, #1
   1cbd0:	cmp	r2, r5
   1cbd4:	beq	1cbbc <__assert_fail@plt+0xb414>
   1cbd8:	cmp	r0, r9
   1cbdc:	bge	1cbfc <__assert_fail@plt+0xb454>
   1cbe0:	ldr	r1, [r4, #8]
   1cbe4:	ldr	r2, [r1, r0, lsl #2]
   1cbe8:	cmn	r2, #1
   1cbec:	bne	1cbfc <__assert_fail@plt+0xb454>
   1cbf0:	add	r0, r0, #1
   1cbf4:	cmp	r9, r0
   1cbf8:	bne	1cbe4 <__assert_fail@plt+0xb43c>
   1cbfc:	cmp	r0, r9
   1cc00:	bne	1cc74 <__assert_fail@plt+0xb4cc>
   1cc04:	mov	r0, #0
   1cc08:	str	r0, [r4, #28]
   1cc0c:	b	1ccf8 <__assert_fail@plt+0xb550>
   1cc10:	ldrb	r0, [r4, #72]	; 0x48
   1cc14:	cmp	r0, #0
   1cc18:	beq	1ccc0 <__assert_fail@plt+0xb518>
   1cc1c:	mov	r0, r4
   1cc20:	bl	17a6c <__assert_fail@plt+0x62c4>
   1cc24:	b	1c92c <__assert_fail@plt+0xb184>
   1cc28:	ldr	r2, [r4]
   1cc2c:	ldr	r3, [r4, #24]
   1cc30:	ldr	r1, [r4, #64]	; 0x40
   1cc34:	add	r3, r5, r3
   1cc38:	add	r2, r3, r2
   1cc3c:	ldrb	r6, [r2, #-1]
   1cc40:	str	r0, [r4, #32]
   1cc44:	cmp	r1, #0
   1cc48:	ldrbne	r6, [r1, r6]
   1cc4c:	ldr	r0, [r4, #68]	; 0x44
   1cc50:	mov	r1, r6
   1cc54:	bl	1d8ac <__assert_fail@plt+0xc104>
   1cc58:	mov	r1, #1
   1cc5c:	cmp	r0, #0
   1cc60:	moveq	r1, #0
   1cc64:	cmpeq	r6, #10
   1cc68:	beq	1cd04 <__assert_fail@plt+0xb55c>
   1cc6c:	str	r1, [r4, #60]	; 0x3c
   1cc70:	b	1c8b0 <__assert_fail@plt+0xb108>
   1cc74:	ldr	r0, [r8, r0, lsl #2]
   1cc78:	subs	r0, r0, r5
   1cc7c:	str	r0, [r4, #28]
   1cc80:	beq	1ccf8 <__assert_fail@plt+0xb550>
   1cc84:	ldr	r2, [r4, #28]
   1cc88:	cmp	r2, #1
   1cc8c:	blt	1ccb0 <__assert_fail@plt+0xb508>
   1cc90:	ldr	r0, [r4, #8]
   1cc94:	mov	r1, #0
   1cc98:	mvn	r3, #0
   1cc9c:	str	r3, [r0, r1, lsl #2]
   1cca0:	add	r1, r1, #1
   1cca4:	ldr	r2, [r4, #28]
   1cca8:	cmp	r1, r2
   1ccac:	blt	1cc9c <__assert_fail@plt+0xb4f4>
   1ccb0:	ldr	r0, [r4, #4]
   1ccb4:	mov	r1, #255	; 0xff
   1ccb8:	bl	116ac <memset@plt>
   1ccbc:	b	1ccf8 <__assert_fail@plt+0xb550>
   1ccc0:	ldr	r0, [r4, #64]	; 0x40
   1ccc4:	cmp	r0, #0
   1ccc8:	beq	1c92c <__assert_fail@plt+0xb184>
   1cccc:	mov	r0, r4
   1ccd0:	bl	17c9c <__assert_fail@plt+0x64f4>
   1ccd4:	b	1c92c <__assert_fail@plt+0xb184>
   1ccd8:	sub	r1, r9, #1
   1ccdc:	mov	r0, r4
   1cce0:	mov	r2, r6
   1cce4:	bl	1d730 <__assert_fail@plt+0xbf88>
   1cce8:	str	r0, [r4, #60]	; 0x3c
   1ccec:	ldr	r0, [r4, #28]
   1ccf0:	cmp	r0, #0
   1ccf4:	bne	1cd40 <__assert_fail@plt+0xb598>
   1ccf8:	ldr	r0, [r4, #28]
   1ccfc:	str	r0, [r4, #32]
   1cd00:	b	1c8b0 <__assert_fail@plt+0xb108>
   1cd04:	ldrb	r0, [r4, #77]	; 0x4d
   1cd08:	cmp	r0, #0
   1cd0c:	movwne	r0, #1
   1cd10:	lsl	r1, r0, #1
   1cd14:	b	1cc6c <__assert_fail@plt+0xb4c4>
   1cd18:	mov	r0, #0
   1cd1c:	strb	r0, [r4, #76]	; 0x4c
   1cd20:	sub	r0, r5, r7
   1cd24:	ldr	r1, [r4, #44]	; 0x2c
   1cd28:	ldr	r2, [r4, #52]	; 0x34
   1cd2c:	add	r1, r0, r1
   1cd30:	str	r1, [r4, #48]	; 0x30
   1cd34:	add	r0, r0, r2
   1cd38:	str	r0, [r4, #56]	; 0x38
   1cd3c:	b	1c95c <__assert_fail@plt+0xb1b4>
   1cd40:	ldr	r2, [r4, #28]
   1cd44:	cmp	r2, #1
   1cd48:	blt	1cd6c <__assert_fail@plt+0xb5c4>
   1cd4c:	ldr	r0, [r4, #8]
   1cd50:	mov	r1, #0
   1cd54:	mvn	r3, #0
   1cd58:	str	r3, [r0, r1, lsl #2]
   1cd5c:	add	r1, r1, #1
   1cd60:	ldr	r2, [r4, #28]
   1cd64:	cmp	r1, r2
   1cd68:	blt	1cd58 <__assert_fail@plt+0xb5b0>
   1cd6c:	ldrb	r0, [r4, #75]	; 0x4b
   1cd70:	cmp	r0, #0
   1cd74:	bne	1ccb0 <__assert_fail@plt+0xb508>
   1cd78:	b	1ccf8 <__assert_fail@plt+0xb550>
   1cd7c:	mov	r0, r8
   1cd80:	bl	11694 <iswalnum@plt>
   1cd84:	mov	r1, r0
   1cd88:	mov	r0, #1
   1cd8c:	cmp	r8, #95	; 0x5f
   1cd90:	beq	1cce8 <__assert_fail@plt+0xb540>
   1cd94:	cmp	r1, #0
   1cd98:	beq	1ca64 <__assert_fail@plt+0xb2bc>
   1cd9c:	b	1cce8 <__assert_fail@plt+0xb540>
   1cda0:	cmp	r2, #1
   1cda4:	blt	1cddc <__assert_fail@plt+0xb634>
   1cda8:	cmp	r2, #6
   1cdac:	mov	r1, r2
   1cdb0:	movge	r1, #6
   1cdb4:	sub	ip, r1, #1
   1cdb8:	add	r1, sp, #6
   1cdbc:	ldrb	r3, [sl, ip]
   1cdc0:	ldrb	r3, [r0, r3]
   1cdc4:	strb	r3, [r1, ip]
   1cdc8:	sub	r3, ip, #1
   1cdcc:	cmp	ip, #0
   1cdd0:	mov	ip, r3
   1cdd4:	bgt	1cdbc <__assert_fail@plt+0xb614>
   1cdd8:	b	1c9e0 <__assert_fail@plt+0xb238>
   1cddc:	add	r1, sp, #6
   1cde0:	b	1c9e0 <__assert_fail@plt+0xb238>
   1cde4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cde8:	add	fp, sp, #28
   1cdec:	sub	sp, sp, #20
   1cdf0:	mov	sl, r2
   1cdf4:	str	r1, [sp, #12]
   1cdf8:	mov	r7, r0
   1cdfc:	ldr	r4, [r0, #84]	; 0x54
   1ce00:	ldr	r5, [r0, #40]	; 0x28
   1ce04:	mov	r0, #0
   1ce08:	str	r0, [sp, #16]
   1ce0c:	cmp	r2, #0
   1ce10:	str	r2, [sp, #8]
   1ce14:	movwne	sl, #1
   1ce18:	ldr	r6, [r4, #36]	; 0x24
   1ce1c:	ldrsb	r0, [r6, #52]	; 0x34
   1ce20:	cmn	r0, #1
   1ce24:	bgt	1ce90 <__assert_fail@plt+0xb6e8>
   1ce28:	ldr	r2, [r7, #88]	; 0x58
   1ce2c:	sub	r1, r5, #1
   1ce30:	mov	r0, r7
   1ce34:	bl	1d730 <__assert_fail@plt+0xbf88>
   1ce38:	tst	r0, #1
   1ce3c:	bne	1ce8c <__assert_fail@plt+0xb6e4>
   1ce40:	mov	r3, r0
   1ce44:	cmp	r0, #0
   1ce48:	beq	1ce90 <__assert_fail@plt+0xb6e8>
   1ce4c:	ands	r1, r3, #2
   1ce50:	and	r0, r3, #4
   1ce54:	cmpne	r0, #0
   1ce58:	bne	1d098 <__assert_fail@plt+0xb8f0>
   1ce5c:	cmp	r1, #0
   1ce60:	bne	1d0a8 <__assert_fail@plt+0xb900>
   1ce64:	cmp	r0, #0
   1ce68:	beq	1ce90 <__assert_fail@plt+0xb6e8>
   1ce6c:	ldr	r2, [r6, #40]	; 0x28
   1ce70:	add	r0, sp, #16
   1ce74:	mov	r1, r4
   1ce78:	bl	1c014 <__assert_fail@plt+0xa86c>
   1ce7c:	mov	r6, r0
   1ce80:	cmp	r6, #0
   1ce84:	bne	1ce98 <__assert_fail@plt+0xb6f0>
   1ce88:	b	1d0b4 <__assert_fail@plt+0xb90c>
   1ce8c:	ldr	r6, [r4, #40]	; 0x28
   1ce90:	cmp	r6, #0
   1ce94:	beq	1d0b4 <__assert_fail@plt+0xb90c>
   1ce98:	ldr	r0, [r7, #100]	; 0x64
   1ce9c:	cmp	r0, #0
   1cea0:	str	r5, [sp]
   1cea4:	beq	1ceb8 <__assert_fail@plt+0xb710>
   1cea8:	str	r6, [r0, r5, lsl #2]
   1ceac:	ldr	r0, [r4, #76]	; 0x4c
   1ceb0:	cmp	r0, #0
   1ceb4:	bne	1d0e4 <__assert_fail@plt+0xb93c>
   1ceb8:	ldrb	r0, [r6, #52]	; 0x34
   1cebc:	tst	r0, #16
   1cec0:	bne	1d0bc <__assert_fail@plt+0xb914>
   1cec4:	mov	r5, #0
   1cec8:	mvn	r0, #0
   1cecc:	str	r0, [sp, #4]
   1ced0:	ldr	r0, [r7, #40]	; 0x28
   1ced4:	ldr	r1, [r7, #56]	; 0x38
   1ced8:	cmp	r1, r0
   1cedc:	ble	1d06c <__assert_fail@plt+0xb8c4>
   1cee0:	add	r3, sp, #16
   1cee4:	b	1cf18 <__assert_fail@plt+0xb770>
   1cee8:	ldr	r1, [r7, #40]	; 0x28
   1ceec:	ldr	r0, [sp, #12]
   1cef0:	cmp	r0, #0
   1cef4:	beq	1d08c <__assert_fail@plt+0xb8e4>
   1cef8:	str	r1, [sp, #4]
   1cefc:	mov	r0, #0
   1cf00:	str	r0, [sp, #8]
   1cf04:	mov	r5, #1
   1cf08:	ldr	r0, [r7, #40]	; 0x28
   1cf0c:	ldr	r1, [r7, #56]	; 0x38
   1cf10:	cmp	r1, r0
   1cf14:	ble	1d06c <__assert_fail@plt+0xb8c4>
   1cf18:	mov	r9, r6
   1cf1c:	add	r8, r0, #1
   1cf20:	ldr	r1, [r7, #36]	; 0x24
   1cf24:	cmp	r8, r1
   1cf28:	bge	1d00c <__assert_fail@plt+0xb864>
   1cf2c:	ldr	r1, [r7, #28]
   1cf30:	cmp	r8, r1
   1cf34:	bge	1d01c <__assert_fail@plt+0xb874>
   1cf38:	mov	r0, r3
   1cf3c:	mov	r1, r7
   1cf40:	mov	r2, r9
   1cf44:	mov	r4, r3
   1cf48:	bl	1dd48 <__assert_fail@plt+0xc5a0>
   1cf4c:	mov	r6, r0
   1cf50:	ldr	r0, [r7, #100]	; 0x64
   1cf54:	cmp	r0, #0
   1cf58:	beq	1cf70 <__assert_fail@plt+0xb7c8>
   1cf5c:	mov	r0, r4
   1cf60:	mov	r1, r7
   1cf64:	mov	r2, r6
   1cf68:	bl	1ddf8 <__assert_fail@plt+0xc650>
   1cf6c:	mov	r6, r0
   1cf70:	cmp	r6, #0
   1cf74:	bne	1cfc4 <__assert_fail@plt+0xb81c>
   1cf78:	ldr	r0, [sp, #16]
   1cf7c:	cmp	r0, #0
   1cf80:	bne	1d0b4 <__assert_fail@plt+0xb90c>
   1cf84:	ldr	r0, [sp, #12]
   1cf88:	eor	r0, r0, #1
   1cf8c:	cmp	r5, #0
   1cf90:	mov	r1, r5
   1cf94:	movwne	r1, #1
   1cf98:	tst	r1, r0
   1cf9c:	bne	1d06c <__assert_fail@plt+0xb8c4>
   1cfa0:	ldr	r0, [r7, #100]	; 0x64
   1cfa4:	cmp	r0, #0
   1cfa8:	beq	1d06c <__assert_fail@plt+0xb8c4>
   1cfac:	add	r0, sp, #16
   1cfb0:	mov	r1, r7
   1cfb4:	bl	1df44 <__assert_fail@plt+0xc79c>
   1cfb8:	mov	r6, r0
   1cfbc:	cmp	r0, #0
   1cfc0:	beq	1d06c <__assert_fail@plt+0xb8c4>
   1cfc4:	tst	sl, #1
   1cfc8:	bne	1d048 <__assert_fail@plt+0xb8a0>
   1cfcc:	mov	sl, #0
   1cfd0:	add	r3, sp, #16
   1cfd4:	ldrb	r0, [r6, #52]	; 0x34
   1cfd8:	tst	r0, #16
   1cfdc:	beq	1cf08 <__assert_fail@plt+0xb760>
   1cfe0:	sxtb	r0, r0
   1cfe4:	cmn	r0, #1
   1cfe8:	bgt	1cee8 <__assert_fail@plt+0xb740>
   1cfec:	ldr	r2, [r7, #40]	; 0x28
   1cff0:	mov	r0, r7
   1cff4:	mov	r1, r6
   1cff8:	bl	1d180 <__assert_fail@plt+0xb9d8>
   1cffc:	add	r3, sp, #16
   1d000:	cmp	r0, #0
   1d004:	bne	1cee8 <__assert_fail@plt+0xb740>
   1d008:	b	1cf08 <__assert_fail@plt+0xb760>
   1d00c:	ldr	r2, [r7, #48]	; 0x30
   1d010:	cmp	r1, r2
   1d014:	bge	1cf2c <__assert_fail@plt+0xb784>
   1d018:	b	1d028 <__assert_fail@plt+0xb880>
   1d01c:	ldr	r2, [r7, #48]	; 0x30
   1d020:	cmp	r1, r2
   1d024:	bge	1cf38 <__assert_fail@plt+0xb790>
   1d028:	add	r1, r0, #2
   1d02c:	mov	r0, r7
   1d030:	bl	1dc74 <__assert_fail@plt+0xc4cc>
   1d034:	add	r3, sp, #16
   1d038:	str	r0, [sp, #16]
   1d03c:	cmp	r0, #0
   1d040:	beq	1cf38 <__assert_fail@plt+0xb790>
   1d044:	b	1d0b4 <__assert_fail@plt+0xb90c>
   1d048:	cmp	r9, r6
   1d04c:	ldr	r0, [sp]
   1d050:	moveq	r0, r8
   1d054:	str	r0, [sp]
   1d058:	sub	r0, r9, r6
   1d05c:	clz	r0, r0
   1d060:	lsr	r0, r0, #5
   1d064:	and	sl, sl, r0
   1d068:	b	1cfd0 <__assert_fail@plt+0xb828>
   1d06c:	ldr	r2, [sp, #8]
   1d070:	cmp	r2, #0
   1d074:	beq	1d088 <__assert_fail@plt+0xb8e0>
   1d078:	ldr	r0, [r2]
   1d07c:	ldr	r1, [sp]
   1d080:	add	r0, r0, r1
   1d084:	str	r0, [r2]
   1d088:	ldr	r1, [sp, #4]
   1d08c:	mov	r0, r1
   1d090:	sub	sp, fp, #28
   1d094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d098:	ldr	r6, [r4, #48]	; 0x30
   1d09c:	cmp	r6, #0
   1d0a0:	bne	1ce98 <__assert_fail@plt+0xb6f0>
   1d0a4:	b	1d0b4 <__assert_fail@plt+0xb90c>
   1d0a8:	ldr	r6, [r4, #44]	; 0x2c
   1d0ac:	cmp	r6, #0
   1d0b0:	bne	1ce98 <__assert_fail@plt+0xb6f0>
   1d0b4:	mvn	r1, #1
   1d0b8:	b	1d08c <__assert_fail@plt+0xb8e4>
   1d0bc:	sxtb	r0, r0
   1d0c0:	cmn	r0, #1
   1d0c4:	ble	1d11c <__assert_fail@plt+0xb974>
   1d0c8:	mov	r4, r5
   1d0cc:	mov	r5, #1
   1d0d0:	ldr	r0, [sp, #12]
   1d0d4:	cmp	r0, #0
   1d0d8:	str	r4, [sp, #4]
   1d0dc:	bne	1ced0 <__assert_fail@plt+0xb728>
   1d0e0:	b	1d154 <__assert_fail@plt+0xb9ac>
   1d0e4:	add	r5, r6, #4
   1d0e8:	mov	sl, #0
   1d0ec:	mov	r0, r7
   1d0f0:	mov	r1, r5
   1d0f4:	mov	r2, #0
   1d0f8:	bl	1d8d4 <__assert_fail@plt+0xc12c>
   1d0fc:	str	r0, [sp, #16]
   1d100:	cmp	r0, #0
   1d104:	bne	1d178 <__assert_fail@plt+0xb9d0>
   1d108:	ldrb	r0, [r6, #52]	; 0x34
   1d10c:	tst	r0, #64	; 0x40
   1d110:	bne	1d15c <__assert_fail@plt+0xb9b4>
   1d114:	ldr	r5, [sp]
   1d118:	b	1ceb8 <__assert_fail@plt+0xb710>
   1d11c:	mov	r0, r7
   1d120:	mov	r1, r6
   1d124:	mov	r2, r5
   1d128:	bl	1d180 <__assert_fail@plt+0xb9d8>
   1d12c:	mov	r4, r5
   1d130:	mov	r5, r0
   1d134:	cmp	r0, #0
   1d138:	mvneq	r4, #0
   1d13c:	str	r4, [sp, #4]
   1d140:	movwne	r5, #1
   1d144:	beq	1ced0 <__assert_fail@plt+0xb728>
   1d148:	ldr	r0, [sp, #12]
   1d14c:	cmp	r0, #0
   1d150:	bne	1ced0 <__assert_fail@plt+0xb728>
   1d154:	ldr	r1, [sp]
   1d158:	b	1d08c <__assert_fail@plt+0xb8e4>
   1d15c:	mov	r0, r7
   1d160:	mov	r1, r5
   1d164:	bl	1d968 <__assert_fail@plt+0xc1c0>
   1d168:	str	r0, [sp, #16]
   1d16c:	cmp	r0, #0
   1d170:	ldr	r5, [sp]
   1d174:	beq	1ceb8 <__assert_fail@plt+0xb710>
   1d178:	mov	r1, r0
   1d17c:	b	1d08c <__assert_fail@plt+0xb8e4>
   1d180:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d184:	add	fp, sp, #24
   1d188:	mov	r3, r2
   1d18c:	mov	r8, r1
   1d190:	mov	r6, r0
   1d194:	ldr	r2, [r0, #88]	; 0x58
   1d198:	mov	r1, r3
   1d19c:	bl	1d730 <__assert_fail@plt+0xbf88>
   1d1a0:	mov	r9, r0
   1d1a4:	ldr	r0, [r8, #8]
   1d1a8:	cmp	r0, #1
   1d1ac:	blt	1d1e8 <__assert_fail@plt+0xba40>
   1d1b0:	ldr	r4, [r8, #12]
   1d1b4:	ldr	r6, [r6, #84]	; 0x54
   1d1b8:	mov	r5, #0
   1d1bc:	ldr	r7, [r4, r5, lsl #2]
   1d1c0:	mov	r0, r6
   1d1c4:	mov	r1, r7
   1d1c8:	mov	r2, r9
   1d1cc:	bl	20630 <__assert_fail@plt+0xee88>
   1d1d0:	cmp	r0, #0
   1d1d4:	bne	1d1ec <__assert_fail@plt+0xba44>
   1d1d8:	add	r5, r5, #1
   1d1dc:	ldr	r0, [r8, #8]
   1d1e0:	cmp	r5, r0
   1d1e4:	blt	1d1bc <__assert_fail@plt+0xba14>
   1d1e8:	mov	r7, #0
   1d1ec:	mov	r0, r7
   1d1f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d1f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1f8:	add	fp, sp, #28
   1d1fc:	sub	sp, sp, #44	; 0x2c
   1d200:	ldr	r7, [r0, #92]	; 0x5c
   1d204:	cmn	r7, #-1073741822	; 0xc0000002
   1d208:	bhi	1d408 <__assert_fail@plt+0xbc60>
   1d20c:	ldr	r5, [r0, #84]	; 0x54
   1d210:	str	r0, [sp, #12]
   1d214:	ldr	sl, [r0, #96]	; 0x60
   1d218:	mov	r0, #4
   1d21c:	add	r6, r0, r7, lsl #2
   1d220:	mov	r0, r6
   1d224:	bl	22ab8 <__assert_fail@plt+0x11310>
   1d228:	mov	r4, #12
   1d22c:	cmp	r0, #0
   1d230:	beq	1d3d8 <__assert_fail@plt+0xbc30>
   1d234:	mov	r9, r0
   1d238:	ldr	r0, [r5, #76]	; 0x4c
   1d23c:	cmp	r0, #0
   1d240:	beq	1d268 <__assert_fail@plt+0xbac0>
   1d244:	mov	r0, r6
   1d248:	bl	22ab8 <__assert_fail@plt+0x11310>
   1d24c:	cmp	r0, #0
   1d250:	beq	1d3dc <__assert_fail@plt+0xbc34>
   1d254:	mov	r8, r0
   1d258:	str	r5, [sp, #8]
   1d25c:	add	r4, sp, #16
   1d260:	mov	r5, sl
   1d264:	b	1d320 <__assert_fail@plt+0xbb78>
   1d268:	str	r7, [sp]
   1d26c:	add	r4, sp, #16
   1d270:	mov	r8, #0
   1d274:	mov	r0, r4
   1d278:	mov	r1, r9
   1d27c:	mov	r2, #0
   1d280:	mov	r3, sl
   1d284:	bl	206a4 <__assert_fail@plt+0xeefc>
   1d288:	ldr	r0, [sp, #12]
   1d28c:	mov	r1, r4
   1d290:	bl	206c4 <__assert_fail@plt+0xef1c>
   1d294:	mov	r4, r0
   1d298:	ldr	r0, [sp, #40]	; 0x28
   1d29c:	bl	13140 <__assert_fail@plt+0x1998>
   1d2a0:	cmp	r4, #0
   1d2a4:	bne	1d3e0 <__assert_fail@plt+0xbc38>
   1d2a8:	ldr	r0, [r9]
   1d2ac:	cmp	r0, #0
   1d2b0:	bne	1d3bc <__assert_fail@plt+0xbc14>
   1d2b4:	mov	r4, #1
   1d2b8:	b	1d3e0 <__assert_fail@plt+0xbc38>
   1d2bc:	mov	r4, #1
   1d2c0:	cmp	r7, #1
   1d2c4:	blt	1d3fc <__assert_fail@plt+0xbc54>
   1d2c8:	sub	r7, r7, #1
   1d2cc:	ldr	sl, [sp, #12]
   1d2d0:	ldr	r0, [sl, #100]	; 0x64
   1d2d4:	mov	r9, r1
   1d2d8:	mov	r8, r6
   1d2dc:	b	1d2f4 <__assert_fail@plt+0xbb4c>
   1d2e0:	sub	r1, r7, #1
   1d2e4:	add	r2, r7, #1
   1d2e8:	cmp	r2, #2
   1d2ec:	mov	r7, r1
   1d2f0:	blt	1d3e0 <__assert_fail@plt+0xbc38>
   1d2f4:	ldr	r1, [r0, r7, lsl #2]
   1d2f8:	cmp	r1, #0
   1d2fc:	beq	1d2e0 <__assert_fail@plt+0xbb38>
   1d300:	ldrb	r2, [r1, #52]	; 0x34
   1d304:	tst	r2, #16
   1d308:	beq	1d2e0 <__assert_fail@plt+0xbb38>
   1d30c:	mov	r0, sl
   1d310:	mov	r2, r7
   1d314:	bl	1d180 <__assert_fail@plt+0xb9d8>
   1d318:	mov	r4, r5
   1d31c:	mov	r5, r0
   1d320:	add	sl, r7, #1
   1d324:	lsl	r2, sl, #2
   1d328:	mov	r0, r8
   1d32c:	mov	r1, #0
   1d330:	bl	116ac <memset@plt>
   1d334:	str	r7, [sp]
   1d338:	mov	r0, r4
   1d33c:	mov	r1, r9
   1d340:	mov	r6, r8
   1d344:	mov	r2, r8
   1d348:	mov	r8, r5
   1d34c:	mov	r3, r5
   1d350:	bl	206a4 <__assert_fail@plt+0xeefc>
   1d354:	ldr	r0, [sp, #12]
   1d358:	mov	r5, r4
   1d35c:	mov	r1, r4
   1d360:	bl	206c4 <__assert_fail@plt+0xef1c>
   1d364:	mov	r4, r0
   1d368:	ldr	r0, [sp, #40]	; 0x28
   1d36c:	bl	13140 <__assert_fail@plt+0x1998>
   1d370:	cmp	r4, #0
   1d374:	bne	1d410 <__assert_fail@plt+0xbc68>
   1d378:	mov	r1, r9
   1d37c:	ldr	r0, [r9]
   1d380:	cmp	r0, #0
   1d384:	ldreq	r0, [r6]
   1d388:	cmpeq	r0, #0
   1d38c:	beq	1d2bc <__assert_fail@plt+0xbb14>
   1d390:	ldr	r0, [sp, #8]
   1d394:	mov	r9, r1
   1d398:	mov	r2, r6
   1d39c:	mov	r3, sl
   1d3a0:	bl	207dc <__assert_fail@plt+0xf034>
   1d3a4:	mov	r4, r0
   1d3a8:	mov	r0, r6
   1d3ac:	bl	13140 <__assert_fail@plt+0x1998>
   1d3b0:	cmp	r4, #0
   1d3b4:	mov	sl, r8
   1d3b8:	bne	1d3dc <__assert_fail@plt+0xbc34>
   1d3bc:	ldr	r4, [sp, #12]
   1d3c0:	ldr	r0, [r4, #100]	; 0x64
   1d3c4:	bl	13140 <__assert_fail@plt+0x1998>
   1d3c8:	str	r7, [r4, #92]	; 0x5c
   1d3cc:	str	sl, [r4, #96]	; 0x60
   1d3d0:	str	r9, [r4, #100]	; 0x64
   1d3d4:	mov	r4, #0
   1d3d8:	mov	r9, #0
   1d3dc:	mov	r8, #0
   1d3e0:	mov	r0, r9
   1d3e4:	bl	13140 <__assert_fail@plt+0x1998>
   1d3e8:	mov	r0, r8
   1d3ec:	bl	13140 <__assert_fail@plt+0x1998>
   1d3f0:	mov	r0, r4
   1d3f4:	sub	sp, fp, #28
   1d3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3fc:	mov	r9, r1
   1d400:	mov	r8, r6
   1d404:	b	1d3e0 <__assert_fail@plt+0xbc38>
   1d408:	mov	r4, #12
   1d40c:	b	1d3f0 <__assert_fail@plt+0xbc48>
   1d410:	mov	r8, r6
   1d414:	b	1d3e0 <__assert_fail@plt+0xbc38>
   1d418:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d41c:	add	fp, sp, #24
   1d420:	mov	r8, r0
   1d424:	ldr	r0, [r0, #124]	; 0x7c
   1d428:	cmp	r0, #1
   1d42c:	blt	1d4b8 <__assert_fail@plt+0xbd10>
   1d430:	mov	r7, #0
   1d434:	b	1d450 <__assert_fail@plt+0xbca8>
   1d438:	mov	r0, r5
   1d43c:	bl	13140 <__assert_fail@plt+0x1998>
   1d440:	add	r7, r7, #1
   1d444:	ldr	r0, [r8, #124]	; 0x7c
   1d448:	cmp	r7, r0
   1d44c:	bge	1d4b8 <__assert_fail@plt+0xbd10>
   1d450:	ldr	r0, [r8, #132]	; 0x84
   1d454:	ldr	r5, [r0, r7, lsl #2]
   1d458:	ldr	r0, [r5, #16]
   1d45c:	cmp	r0, #1
   1d460:	blt	1d490 <__assert_fail@plt+0xbce8>
   1d464:	mov	r4, #0
   1d468:	ldr	r0, [r5, #20]
   1d46c:	ldr	r6, [r0, r4, lsl #2]
   1d470:	ldr	r0, [r6, #16]
   1d474:	bl	13140 <__assert_fail@plt+0x1998>
   1d478:	mov	r0, r6
   1d47c:	bl	13140 <__assert_fail@plt+0x1998>
   1d480:	add	r4, r4, #1
   1d484:	ldr	r0, [r5, #16]
   1d488:	cmp	r4, r0
   1d48c:	blt	1d468 <__assert_fail@plt+0xbcc0>
   1d490:	ldr	r0, [r5, #20]
   1d494:	bl	13140 <__assert_fail@plt+0x1998>
   1d498:	ldr	r0, [r5, #8]
   1d49c:	cmp	r0, #0
   1d4a0:	beq	1d438 <__assert_fail@plt+0xbc90>
   1d4a4:	ldr	r0, [r0, #8]
   1d4a8:	bl	13140 <__assert_fail@plt+0x1998>
   1d4ac:	ldr	r0, [r5, #8]
   1d4b0:	bl	13140 <__assert_fail@plt+0x1998>
   1d4b4:	b	1d438 <__assert_fail@plt+0xbc90>
   1d4b8:	mov	r0, #0
   1d4bc:	str	r0, [r8, #108]	; 0x6c
   1d4c0:	str	r0, [r8, #124]	; 0x7c
   1d4c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d4c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4cc:	add	fp, sp, #28
   1d4d0:	sub	sp, sp, #204	; 0xcc
   1d4d4:	mov	r5, r3
   1d4d8:	mov	r6, r2
   1d4dc:	mov	r9, r1
   1d4e0:	ldr	r4, [r0]
   1d4e4:	movw	r0, #17256	; 0x4368
   1d4e8:	movt	r0, #2
   1d4ec:	vldr	d16, [r0]
   1d4f0:	ldr	r0, [r0, #8]
   1d4f4:	str	r0, [fp, #-56]	; 0xffffffc8
   1d4f8:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1d4fc:	add	r0, sp, #28
   1d500:	bl	218a0 <__assert_fail@plt+0x100f8>
   1d504:	mov	r7, #0
   1d508:	ldr	r0, [fp, #8]
   1d50c:	cmp	r0, #0
   1d510:	mov	sl, #0
   1d514:	beq	1d538 <__assert_fail@plt+0xbd90>
   1d518:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d51c:	add	r0, r0, r0, lsl #1
   1d520:	lsl	r0, r0, #3
   1d524:	bl	22ab8 <__assert_fail@plt+0x11310>
   1d528:	str	r0, [fp, #-56]	; 0xffffffc8
   1d52c:	cmp	r0, #0
   1d530:	beq	1d6d4 <__assert_fail@plt+0xbf2c>
   1d534:	sub	sl, fp, #64	; 0x40
   1d538:	ldr	r8, [r4, #72]	; 0x48
   1d53c:	str	r7, [fp, #-44]	; 0xffffffd4
   1d540:	str	r7, [fp, #-48]	; 0xffffffd0
   1d544:	str	r7, [fp, #-40]	; 0xffffffd8
   1d548:	add	r0, sp, #28
   1d54c:	mov	r1, r6
   1d550:	bl	218b8 <__assert_fail@plt+0x10110>
   1d554:	mov	r7, #12
   1d558:	cmp	r0, #0
   1d55c:	beq	1d6e8 <__assert_fail@plt+0xbf40>
   1d560:	str	r4, [sp, #20]
   1d564:	str	r9, [sp, #24]
   1d568:	add	r0, sp, #28
   1d56c:	bl	21990 <__assert_fail@plt+0x101e8>
   1d570:	mov	r4, r0
   1d574:	lsl	r2, r6, #3
   1d578:	mov	r1, r5
   1d57c:	bl	114cc <memcpy@plt>
   1d580:	ldr	r9, [r5]
   1d584:	ldr	r0, [r5, #4]
   1d588:	str	r9, [fp, #-32]	; 0xffffffe0
   1d58c:	mov	r7, #0
   1d590:	cmp	r9, r0
   1d594:	bgt	1d6e0 <__assert_fail@plt+0xbf38>
   1d598:	str	r9, [sp]
   1d59c:	str	r6, [sp, #4]
   1d5a0:	ldr	r0, [sp, #20]
   1d5a4:	mov	r1, r5
   1d5a8:	mov	r2, r4
   1d5ac:	mov	r3, r8
   1d5b0:	bl	21998 <__assert_fail@plt+0x101f0>
   1d5b4:	ldr	r0, [r5, #4]
   1d5b8:	cmp	r9, r0
   1d5bc:	ldr	r9, [sp, #24]
   1d5c0:	bne	1d5d0 <__assert_fail@plt+0xbe28>
   1d5c4:	ldr	r0, [r9, #96]	; 0x60
   1d5c8:	cmp	r8, r0
   1d5cc:	beq	1d5ec <__assert_fail@plt+0xbe44>
   1d5d0:	cmp	sl, #0
   1d5d4:	beq	1d650 <__assert_fail@plt+0xbea8>
   1d5d8:	sub	r0, fp, #48	; 0x30
   1d5dc:	mov	r1, r8
   1d5e0:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1d5e4:	cmp	r0, #0
   1d5e8:	beq	1d650 <__assert_fail@plt+0xbea8>
   1d5ec:	cmp	sl, #0
   1d5f0:	beq	1d6e0 <__assert_fail@plt+0xbf38>
   1d5f4:	mov	r0, #0
   1d5f8:	b	1d608 <__assert_fail@plt+0xbe60>
   1d5fc:	add	r0, r0, #1
   1d600:	cmp	r6, r0
   1d604:	beq	1d6dc <__assert_fail@plt+0xbf34>
   1d608:	ldr	r1, [r5, r0, lsl #3]
   1d60c:	cmp	r1, #0
   1d610:	bmi	1d5fc <__assert_fail@plt+0xbe54>
   1d614:	add	r1, r5, r0, lsl #3
   1d618:	ldr	r1, [r1, #4]
   1d61c:	cmn	r1, #1
   1d620:	bne	1d5fc <__assert_fail@plt+0xbe54>
   1d624:	str	r4, [sp]
   1d628:	sub	r0, fp, #48	; 0x30
   1d62c:	str	r0, [sp, #4]
   1d630:	mov	r0, sl
   1d634:	sub	r1, fp, #32
   1d638:	mov	r2, r6
   1d63c:	mov	r3, r5
   1d640:	bl	21a50 <__assert_fail@plt+0x102a8>
   1d644:	mov	r8, r0
   1d648:	cmp	r0, #0
   1d64c:	bmi	1d6dc <__assert_fail@plt+0xbf34>
   1d650:	sub	r0, fp, #32
   1d654:	stm	sp, {r0, r8}
   1d658:	sub	r0, fp, #48	; 0x30
   1d65c:	str	r0, [sp, #8]
   1d660:	str	sl, [sp, #12]
   1d664:	mov	r0, r9
   1d668:	mov	r1, r6
   1d66c:	mov	r2, r5
   1d670:	mov	r3, r4
   1d674:	bl	21b08 <__assert_fail@plt+0x10360>
   1d678:	mov	r8, r0
   1d67c:	cmn	r0, #1
   1d680:	ble	1d698 <__assert_fail@plt+0xbef0>
   1d684:	ldr	r0, [r5, #4]
   1d688:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1d68c:	cmp	r9, r0
   1d690:	ble	1d598 <__assert_fail@plt+0xbdf0>
   1d694:	b	1d6e0 <__assert_fail@plt+0xbf38>
   1d698:	cmn	r8, #2
   1d69c:	beq	1d704 <__assert_fail@plt+0xbf5c>
   1d6a0:	str	r4, [sp]
   1d6a4:	sub	r0, fp, #48	; 0x30
   1d6a8:	str	r0, [sp, #4]
   1d6ac:	mov	r0, sl
   1d6b0:	sub	r1, fp, #32
   1d6b4:	mov	r2, r6
   1d6b8:	mov	r3, r5
   1d6bc:	bl	21a50 <__assert_fail@plt+0x102a8>
   1d6c0:	mov	r8, r0
   1d6c4:	cmp	r0, #0
   1d6c8:	bpl	1d684 <__assert_fail@plt+0xbedc>
   1d6cc:	mov	r7, #1
   1d6d0:	b	1d6e0 <__assert_fail@plt+0xbf38>
   1d6d4:	mov	r7, #12
   1d6d8:	b	1d6f8 <__assert_fail@plt+0xbf50>
   1d6dc:	mov	r7, #0
   1d6e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d6e4:	bl	13140 <__assert_fail@plt+0x1998>
   1d6e8:	add	r0, sp, #28
   1d6ec:	bl	2190c <__assert_fail@plt+0x10164>
   1d6f0:	mov	r0, sl
   1d6f4:	bl	21928 <__assert_fail@plt+0x10180>
   1d6f8:	mov	r0, r7
   1d6fc:	sub	sp, fp, #28
   1d700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d704:	mov	r7, #12
   1d708:	b	1d6e0 <__assert_fail@plt+0xbf38>
   1d70c:	push	{r4, sl, fp, lr}
   1d710:	add	fp, sp, #8
   1d714:	mov	r4, r0
   1d718:	bl	1d418 <__assert_fail@plt+0xbc70>
   1d71c:	ldr	r0, [r4, #132]	; 0x84
   1d720:	bl	13140 <__assert_fail@plt+0x1998>
   1d724:	ldr	r0, [r4, #116]	; 0x74
   1d728:	pop	{r4, sl, fp, lr}
   1d72c:	b	13140 <__assert_fail@plt+0x1998>
   1d730:	push	{r4, r5, fp, lr}
   1d734:	add	fp, sp, #8
   1d738:	mov	r4, r0
   1d73c:	cmn	r1, #1
   1d740:	ble	1d778 <__assert_fail@plt+0xbfd0>
   1d744:	ldr	r0, [r4, #48]	; 0x30
   1d748:	cmp	r0, r1
   1d74c:	beq	1d7d4 <__assert_fail@plt+0xc02c>
   1d750:	ldr	r0, [r4, #80]	; 0x50
   1d754:	cmp	r0, #2
   1d758:	blt	1d780 <__assert_fail@plt+0xbfd8>
   1d75c:	ldr	r0, [r4, #8]
   1d760:	ldr	r5, [r0, r1, lsl #2]
   1d764:	cmn	r5, #1
   1d768:	bne	1d7a8 <__assert_fail@plt+0xc000>
   1d76c:	sub	r1, r1, #1
   1d770:	cmn	r1, #1
   1d774:	bne	1d760 <__assert_fail@plt+0xbfb8>
   1d778:	ldr	r0, [r4, #60]	; 0x3c
   1d77c:	pop	{r4, r5, fp, pc}
   1d780:	ldr	r2, [r4, #4]
   1d784:	ldr	r0, [r4, #68]	; 0x44
   1d788:	ldrb	r5, [r2, r1]
   1d78c:	mov	r1, r5
   1d790:	bl	1d8ac <__assert_fail@plt+0xc104>
   1d794:	mov	r1, r0
   1d798:	mov	r0, #1
   1d79c:	cmp	r1, #0
   1d7a0:	beq	1d7b4 <__assert_fail@plt+0xc00c>
   1d7a4:	b	1d7d0 <__assert_fail@plt+0xc028>
   1d7a8:	ldrb	r0, [r4, #78]	; 0x4e
   1d7ac:	cmp	r0, #0
   1d7b0:	bne	1d7e0 <__assert_fail@plt+0xc038>
   1d7b4:	mov	r0, #0
   1d7b8:	cmp	r5, #10
   1d7bc:	popne	{r4, r5, fp, pc}
   1d7c0:	ldrb	r0, [r4, #77]	; 0x4d
   1d7c4:	cmp	r0, #0
   1d7c8:	movwne	r0, #1
   1d7cc:	lsl	r0, r0, #1
   1d7d0:	pop	{r4, r5, fp, pc}
   1d7d4:	and	r0, r2, #2
   1d7d8:	eor	r0, r0, #10
   1d7dc:	pop	{r4, r5, fp, pc}
   1d7e0:	mov	r0, r5
   1d7e4:	bl	11694 <iswalnum@plt>
   1d7e8:	mov	r1, r0
   1d7ec:	mov	r0, #1
   1d7f0:	cmp	r5, #95	; 0x5f
   1d7f4:	bne	1d79c <__assert_fail@plt+0xbff4>
   1d7f8:	b	1d7d0 <__assert_fail@plt+0xc028>
   1d7fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d800:	add	fp, sp, #28
   1d804:	sub	sp, sp, #12
   1d808:	str	r2, [sp, #4]
   1d80c:	mov	sl, r1
   1d810:	mov	r7, r0
   1d814:	ldr	r0, [r0, #24]
   1d818:	ldr	r1, [r7, #32]
   1d81c:	add	r5, r1, r0
   1d820:	mvn	r1, #0
   1d824:	cmp	r5, sl
   1d828:	bge	1d898 <__assert_fail@plt+0xc0f0>
   1d82c:	add	r4, r7, #16
   1d830:	ldr	r0, [r7]
   1d834:	ldr	r2, [r7, #44]	; 0x2c
   1d838:	add	r1, r0, r5
   1d83c:	sub	r6, r2, r5
   1d840:	ldm	r4, {r8, r9}
   1d844:	add	r0, sp, #8
   1d848:	mov	r2, r6
   1d84c:	mov	r3, r4
   1d850:	bl	23284 <__assert_fail@plt+0x11adc>
   1d854:	sub	r1, r0, #1
   1d858:	cmn	r1, #3
   1d85c:	bcs	1d874 <__assert_fail@plt+0xc0cc>
   1d860:	ldr	r1, [sp, #8]
   1d864:	add	r5, r0, r5
   1d868:	cmp	r5, sl
   1d86c:	blt	1d830 <__assert_fail@plt+0xc088>
   1d870:	b	1d898 <__assert_fail@plt+0xc0f0>
   1d874:	mov	r1, #0
   1d878:	cmp	r6, #0
   1d87c:	cmpne	r0, #0
   1d880:	beq	1d88c <__assert_fail@plt+0xc0e4>
   1d884:	ldr	r0, [r7]
   1d888:	ldrb	r1, [r0, r5]
   1d88c:	stm	r4, {r8, r9}
   1d890:	mov	r0, #1
   1d894:	b	1d864 <__assert_fail@plt+0xc0bc>
   1d898:	ldr	r0, [sp, #4]
   1d89c:	str	r1, [r0]
   1d8a0:	mov	r0, r5
   1d8a4:	sub	sp, fp, #28
   1d8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8ac:	asr	r2, r1, #31
   1d8b0:	add	r2, r1, r2, lsr #27
   1d8b4:	asr	r2, r2, #5
   1d8b8:	ldr	r0, [r0, r2, lsl #2]
   1d8bc:	and	r1, r1, #31
   1d8c0:	mov	r2, #1
   1d8c4:	and	r0, r0, r2, lsl r1
   1d8c8:	cmp	r0, #0
   1d8cc:	movwne	r0, #1
   1d8d0:	bx	lr
   1d8d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d8d8:	add	fp, sp, #24
   1d8dc:	mov	r6, r0
   1d8e0:	ldr	r0, [r1, #4]
   1d8e4:	cmp	r0, #1
   1d8e8:	blt	1d960 <__assert_fail@plt+0xc1b8>
   1d8ec:	mov	r8, r2
   1d8f0:	mov	r5, r1
   1d8f4:	ldr	r7, [r6, #84]	; 0x54
   1d8f8:	mov	r4, #0
   1d8fc:	mov	r9, #1
   1d900:	b	1d914 <__assert_fail@plt+0xc16c>
   1d904:	add	r4, r4, #1
   1d908:	ldr	r0, [r5, #4]
   1d90c:	cmp	r4, r0
   1d910:	bge	1d960 <__assert_fail@plt+0xc1b8>
   1d914:	ldr	r0, [r5, #8]
   1d918:	ldr	r1, [r0, r4, lsl #2]
   1d91c:	ldr	r0, [r7]
   1d920:	add	r2, r0, r1, lsl #3
   1d924:	ldrb	r2, [r2, #4]
   1d928:	cmp	r2, #8
   1d92c:	bne	1d904 <__assert_fail@plt+0xc15c>
   1d930:	ldr	r0, [r0, r1, lsl #3]
   1d934:	cmp	r0, #31
   1d938:	bgt	1d904 <__assert_fail@plt+0xc15c>
   1d93c:	ldr	r2, [r7, #80]	; 0x50
   1d940:	tst	r2, r9, lsl r0
   1d944:	beq	1d904 <__assert_fail@plt+0xc15c>
   1d948:	mov	r0, r6
   1d94c:	mov	r2, r8
   1d950:	bl	1dfb8 <__assert_fail@plt+0xc810>
   1d954:	cmp	r0, #0
   1d958:	beq	1d904 <__assert_fail@plt+0xc15c>
   1d95c:	b	1d964 <__assert_fail@plt+0xc1bc>
   1d960:	mov	r0, #0
   1d964:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d96c:	add	fp, sp, #28
   1d970:	sub	sp, sp, #52	; 0x34
   1d974:	mov	r5, r0
   1d978:	ldr	r0, [r1, #4]
   1d97c:	cmp	r0, #1
   1d980:	blt	1dc54 <__assert_fail@plt+0xc4ac>
   1d984:	mov	r8, r1
   1d988:	ldr	r9, [r5, #84]	; 0x54
   1d98c:	ldr	r0, [r5, #40]	; 0x28
   1d990:	str	r0, [sp, #32]
   1d994:	mov	sl, #0
   1d998:	str	r1, [sp, #4]
   1d99c:	str	r9, [sp, #16]
   1d9a0:	b	1d9b4 <__assert_fail@plt+0xc20c>
   1d9a4:	ldr	r0, [r8, #4]
   1d9a8:	add	sl, sl, #1
   1d9ac:	cmp	sl, r0
   1d9b0:	bge	1dc54 <__assert_fail@plt+0xc4ac>
   1d9b4:	ldr	r0, [r8, #8]
   1d9b8:	ldr	r4, [r0, sl, lsl #2]
   1d9bc:	ldr	r0, [r9]
   1d9c0:	add	r0, r0, r4, lsl #3
   1d9c4:	ldr	r6, [r0, #4]
   1d9c8:	uxtb	r0, r6
   1d9cc:	cmp	r0, #4
   1d9d0:	bne	1d9a4 <__assert_fail@plt+0xc1fc>
   1d9d4:	movw	r0, #65280	; 0xff00
   1d9d8:	movt	r0, #3
   1d9dc:	tst	r6, r0
   1d9e0:	beq	1da34 <__assert_fail@plt+0xc28c>
   1d9e4:	ldr	r2, [r5, #88]	; 0x58
   1d9e8:	mov	r0, r5
   1d9ec:	ldr	r1, [sp, #32]
   1d9f0:	bl	1d730 <__assert_fail@plt+0xbf88>
   1d9f4:	and	r1, r0, #1
   1d9f8:	tst	r6, #1024	; 0x400
   1d9fc:	beq	1da08 <__assert_fail@plt+0xc260>
   1da00:	cmp	r1, #0
   1da04:	beq	1d9a4 <__assert_fail@plt+0xc1fc>
   1da08:	tst	r6, #2048	; 0x800
   1da0c:	cmpne	r1, #0
   1da10:	bne	1d9a4 <__assert_fail@plt+0xc1fc>
   1da14:	tst	r6, #8192	; 0x2000
   1da18:	beq	1da24 <__assert_fail@plt+0xc27c>
   1da1c:	ands	r1, r0, #2
   1da20:	beq	1d9a4 <__assert_fail@plt+0xc1fc>
   1da24:	tst	r6, #32768	; 0x8000
   1da28:	beq	1da34 <__assert_fail@plt+0xc28c>
   1da2c:	ands	r0, r0, #8
   1da30:	beq	1d9a4 <__assert_fail@plt+0xc1fc>
   1da34:	ldr	r6, [r5, #108]	; 0x6c
   1da38:	mov	r0, r5
   1da3c:	mov	r1, r4
   1da40:	ldr	r2, [sp, #32]
   1da44:	bl	1e044 <__assert_fail@plt+0xc89c>
   1da48:	str	r0, [fp, #-32]	; 0xffffffe0
   1da4c:	cmp	r0, #0
   1da50:	bne	1dc5c <__assert_fail@plt+0xc4b4>
   1da54:	ldr	r0, [r5, #108]	; 0x6c
   1da58:	cmp	r6, r0
   1da5c:	bge	1d9a4 <__assert_fail@plt+0xc1fc>
   1da60:	add	r0, r6, r6, lsl #1
   1da64:	lsl	r7, r0, #3
   1da68:	str	r4, [sp, #8]
   1da6c:	b	1da84 <__assert_fail@plt+0xc2dc>
   1da70:	add	r7, r7, #24
   1da74:	add	r6, r6, #1
   1da78:	ldr	r0, [r5, #108]	; 0x6c
   1da7c:	cmp	r6, r0
   1da80:	bge	1d9a4 <__assert_fail@plt+0xc1fc>
   1da84:	ldr	r0, [r5, #116]	; 0x74
   1da88:	ldr	r1, [r0, r7]
   1da8c:	cmp	r1, r4
   1da90:	bne	1da70 <__assert_fail@plt+0xc2c8>
   1da94:	add	r0, r0, r7
   1da98:	ldr	r1, [r0, #4]
   1da9c:	ldr	r2, [sp, #32]
   1daa0:	cmp	r1, r2
   1daa4:	bne	1da70 <__assert_fail@plt+0xc2c8>
   1daa8:	ldr	r2, [r0, #8]
   1daac:	ldr	r3, [r0, #12]
   1dab0:	ldr	r0, [r9, #24]
   1dab4:	str	r0, [sp, #28]
   1dab8:	cmp	r3, r2
   1dabc:	bne	1dad4 <__assert_fail@plt+0xc32c>
   1dac0:	ldr	r0, [r9, #20]
   1dac4:	add	r1, r4, r4, lsl #1
   1dac8:	add	r0, r0, r1, lsl #2
   1dacc:	ldr	r0, [r0, #8]
   1dad0:	b	1dadc <__assert_fail@plt+0xc334>
   1dad4:	ldr	r0, [r9, #12]
   1dad8:	add	r0, r0, r4, lsl #2
   1dadc:	ldr	r0, [r0]
   1dae0:	add	r9, r0, r0, lsl #1
   1dae4:	ldr	r4, [sp, #32]
   1dae8:	str	r3, [sp, #20]
   1daec:	add	r0, r3, r4
   1daf0:	str	r2, [sp, #24]
   1daf4:	sub	r8, r0, r2
   1daf8:	sub	r1, r8, #1
   1dafc:	ldr	r2, [r5, #88]	; 0x58
   1db00:	mov	r0, r5
   1db04:	bl	1d730 <__assert_fail@plt+0xbf88>
   1db08:	mov	r3, r0
   1db0c:	ldr	r0, [r5, #100]	; 0x64
   1db10:	ldr	r1, [r0, r4, lsl #2]
   1db14:	ldr	r0, [r0, r8, lsl #2]
   1db18:	cmp	r1, #0
   1db1c:	beq	1db28 <__assert_fail@plt+0xc380>
   1db20:	ldr	r1, [r1, #8]
   1db24:	b	1db2c <__assert_fail@plt+0xc384>
   1db28:	mov	r1, #0
   1db2c:	str	r1, [sp, #12]
   1db30:	add	r4, sp, #36	; 0x24
   1db34:	ldr	r1, [sp, #28]
   1db38:	add	r2, r1, r9, lsl #2
   1db3c:	cmp	r0, #0
   1db40:	str	r2, [sp, #28]
   1db44:	beq	1dbb4 <__assert_fail@plt+0xc40c>
   1db48:	mov	r9, r3
   1db4c:	ldr	r1, [r0, #40]	; 0x28
   1db50:	mov	r0, r4
   1db54:	bl	1e3ec <__assert_fail@plt+0xcc44>
   1db58:	str	r0, [fp, #-32]	; 0xffffffe0
   1db5c:	cmp	r0, #0
   1db60:	ldr	r1, [sp, #16]
   1db64:	bne	1dc68 <__assert_fail@plt+0xc4c0>
   1db68:	sub	r0, fp, #32
   1db6c:	mov	r2, r4
   1db70:	mov	r3, r9
   1db74:	bl	1c014 <__assert_fail@plt+0xa86c>
   1db78:	ldr	r1, [r5, #100]	; 0x64
   1db7c:	str	r0, [r1, r8, lsl #2]
   1db80:	ldr	r0, [sp, #44]	; 0x2c
   1db84:	bl	13140 <__assert_fail@plt+0x1998>
   1db88:	ldr	r0, [r5, #100]	; 0x64
   1db8c:	ldr	r0, [r0, r8, lsl #2]
   1db90:	cmp	r0, #0
   1db94:	bne	1dba4 <__assert_fail@plt+0xc3fc>
   1db98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1db9c:	cmp	r0, #0
   1dba0:	bne	1dc5c <__assert_fail@plt+0xc4b4>
   1dba4:	ldr	r8, [sp, #4]
   1dba8:	ldr	r4, [sp, #8]
   1dbac:	ldr	r9, [sp, #16]
   1dbb0:	b	1dbf0 <__assert_fail@plt+0xc448>
   1dbb4:	sub	r0, fp, #32
   1dbb8:	ldr	r9, [sp, #16]
   1dbbc:	mov	r1, r9
   1dbc0:	bl	1c014 <__assert_fail@plt+0xa86c>
   1dbc4:	ldr	r1, [r5, #100]	; 0x64
   1dbc8:	str	r0, [r1, r8, lsl #2]
   1dbcc:	ldr	r0, [r5, #100]	; 0x64
   1dbd0:	ldr	r0, [r0, r8, lsl #2]
   1dbd4:	cmp	r0, #0
   1dbd8:	ldr	r8, [sp, #4]
   1dbdc:	ldr	r4, [sp, #8]
   1dbe0:	bne	1dbf0 <__assert_fail@plt+0xc448>
   1dbe4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1dbe8:	cmp	r0, #0
   1dbec:	bne	1dc5c <__assert_fail@plt+0xc4b4>
   1dbf0:	ldr	r0, [sp, #24]
   1dbf4:	ldr	r1, [sp, #20]
   1dbf8:	cmp	r1, r0
   1dbfc:	bne	1da70 <__assert_fail@plt+0xc2c8>
   1dc00:	ldr	r0, [r5, #100]	; 0x64
   1dc04:	ldr	r1, [sp, #32]
   1dc08:	ldr	r0, [r0, r1, lsl #2]
   1dc0c:	ldr	r0, [r0, #8]
   1dc10:	ldr	r1, [sp, #12]
   1dc14:	cmp	r0, r1
   1dc18:	ble	1da70 <__assert_fail@plt+0xc2c8>
   1dc1c:	mov	r0, r5
   1dc20:	ldr	r1, [sp, #28]
   1dc24:	ldr	r2, [sp, #32]
   1dc28:	bl	1d8d4 <__assert_fail@plt+0xc12c>
   1dc2c:	str	r0, [fp, #-32]	; 0xffffffe0
   1dc30:	cmp	r0, #0
   1dc34:	bne	1dc5c <__assert_fail@plt+0xc4b4>
   1dc38:	mov	r0, r5
   1dc3c:	ldr	r1, [sp, #28]
   1dc40:	bl	1d968 <__assert_fail@plt+0xc1c0>
   1dc44:	str	r0, [fp, #-32]	; 0xffffffe0
   1dc48:	cmp	r0, #0
   1dc4c:	beq	1da70 <__assert_fail@plt+0xc2c8>
   1dc50:	b	1dc5c <__assert_fail@plt+0xc4b4>
   1dc54:	mov	r0, #0
   1dc58:	str	r0, [fp, #-32]	; 0xffffffe0
   1dc5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1dc60:	sub	sp, fp, #28
   1dc64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc68:	ldr	r0, [sp, #44]	; 0x2c
   1dc6c:	bl	13140 <__assert_fail@plt+0x1998>
   1dc70:	b	1dc5c <__assert_fail@plt+0xc4b4>
   1dc74:	push	{r4, r5, fp, lr}
   1dc78:	add	fp, sp, #8
   1dc7c:	mov	r4, r0
   1dc80:	ldr	r0, [r0, #36]	; 0x24
   1dc84:	mov	r5, #12
   1dc88:	cmn	r0, #-536870910	; 0xe0000002
   1dc8c:	bhi	1dd40 <__assert_fail@plt+0xc598>
   1dc90:	ldr	r2, [r4, #48]	; 0x30
   1dc94:	cmp	r2, r0, lsl #1
   1dc98:	lslge	r2, r0, #1
   1dc9c:	cmp	r2, r1
   1dca0:	movle	r2, r1
   1dca4:	mov	r0, r4
   1dca8:	mov	r1, r2
   1dcac:	bl	1742c <__assert_fail@plt+0x5c84>
   1dcb0:	cmp	r0, #0
   1dcb4:	bne	1dd44 <__assert_fail@plt+0xc59c>
   1dcb8:	ldr	r0, [r4, #100]	; 0x64
   1dcbc:	cmp	r0, #0
   1dcc0:	beq	1dce0 <__assert_fail@plt+0xc538>
   1dcc4:	ldr	r1, [r4, #36]	; 0x24
   1dcc8:	mov	r2, #4
   1dccc:	add	r1, r2, r1, lsl #2
   1dcd0:	bl	22ae8 <__assert_fail@plt+0x11340>
   1dcd4:	cmp	r0, #0
   1dcd8:	beq	1dd40 <__assert_fail@plt+0xc598>
   1dcdc:	str	r0, [r4, #100]	; 0x64
   1dce0:	ldr	r0, [r4, #80]	; 0x50
   1dce4:	ldrb	r1, [r4, #72]	; 0x48
   1dce8:	cmp	r1, #0
   1dcec:	beq	1dd0c <__assert_fail@plt+0xc564>
   1dcf0:	cmp	r0, #2
   1dcf4:	blt	1dd20 <__assert_fail@plt+0xc578>
   1dcf8:	mov	r0, r4
   1dcfc:	bl	174d0 <__assert_fail@plt+0x5d28>
   1dd00:	cmp	r0, #0
   1dd04:	beq	1dd3c <__assert_fail@plt+0xc594>
   1dd08:	pop	{r4, r5, fp, pc}
   1dd0c:	cmp	r0, #2
   1dd10:	blt	1dd2c <__assert_fail@plt+0xc584>
   1dd14:	mov	r0, r4
   1dd18:	bl	17ae0 <__assert_fail@plt+0x6338>
   1dd1c:	b	1dd3c <__assert_fail@plt+0xc594>
   1dd20:	mov	r0, r4
   1dd24:	bl	17a6c <__assert_fail@plt+0x62c4>
   1dd28:	b	1dd3c <__assert_fail@plt+0xc594>
   1dd2c:	ldr	r0, [r4, #64]	; 0x40
   1dd30:	cmp	r0, #0
   1dd34:	movne	r0, r4
   1dd38:	blne	17c9c <__assert_fail@plt+0x64f4>
   1dd3c:	mov	r5, #0
   1dd40:	mov	r0, r5
   1dd44:	pop	{r4, r5, fp, pc}
   1dd48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dd4c:	add	fp, sp, #24
   1dd50:	mov	r6, r2
   1dd54:	mov	r4, r1
   1dd58:	mov	r5, r0
   1dd5c:	ldrb	r0, [r2, #52]	; 0x34
   1dd60:	tst	r0, #32
   1dd64:	bne	1dddc <__assert_fail@plt+0xc634>
   1dd68:	ldr	r0, [r4, #4]
   1dd6c:	ldr	r1, [r4, #40]	; 0x28
   1dd70:	add	r2, r1, #1
   1dd74:	str	r2, [r4, #40]	; 0x28
   1dd78:	ldrb	r7, [r0, r1]
   1dd7c:	ldr	r0, [r6, #44]	; 0x2c
   1dd80:	cmp	r0, #0
   1dd84:	ldrne	r0, [r0, r7, lsl #2]
   1dd88:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dd8c:	ldr	r8, [r6, #48]	; 0x30
   1dd90:	cmp	r8, #0
   1dd94:	bne	1ddbc <__assert_fail@plt+0xc614>
   1dd98:	ldr	r0, [r4, #84]	; 0x54
   1dd9c:	mov	r1, r6
   1dda0:	bl	1fbe0 <__assert_fail@plt+0xe438>
   1dda4:	cmp	r0, #0
   1dda8:	bne	1dd7c <__assert_fail@plt+0xc5d4>
   1ddac:	mov	r0, #12
   1ddb0:	str	r0, [r5]
   1ddb4:	mov	r0, #0
   1ddb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ddbc:	ldr	r0, [r4, #40]	; 0x28
   1ddc0:	ldr	r2, [r4, #88]	; 0x58
   1ddc4:	sub	r1, r0, #1
   1ddc8:	mov	r0, r4
   1ddcc:	bl	1d730 <__assert_fail@plt+0xbf88>
   1ddd0:	bfi	r7, r0, #8, #1
   1ddd4:	ldr	r0, [r8, r7, lsl #2]
   1ddd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dddc:	mov	r0, r4
   1dde0:	mov	r1, r6
   1dde4:	bl	1fa10 <__assert_fail@plt+0xe268>
   1dde8:	str	r0, [r5]
   1ddec:	cmp	r0, #0
   1ddf0:	beq	1dd68 <__assert_fail@plt+0xc5c0>
   1ddf4:	b	1ddb4 <__assert_fail@plt+0xc60c>
   1ddf8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ddfc:	add	fp, sp, #24
   1de00:	sub	sp, sp, #16
   1de04:	mov	r7, r2
   1de08:	mov	r4, r1
   1de0c:	mov	r8, r0
   1de10:	ldr	r5, [r1, #40]	; 0x28
   1de14:	ldr	r6, [r1, #84]	; 0x54
   1de18:	ldr	r0, [r1, #100]	; 0x64
   1de1c:	ldr	r1, [r1, #104]	; 0x68
   1de20:	cmp	r5, r1
   1de24:	ble	1de34 <__assert_fail@plt+0xc68c>
   1de28:	str	r7, [r0, r5, lsl #2]
   1de2c:	str	r5, [r4, #104]	; 0x68
   1de30:	b	1ded0 <__assert_fail@plt+0xc728>
   1de34:	ldr	r1, [r0, r5, lsl #2]
   1de38:	cmp	r1, #0
   1de3c:	beq	1de70 <__assert_fail@plt+0xc6c8>
   1de40:	ldr	r0, [r0, r5, lsl #2]
   1de44:	ldr	r2, [r0, #40]	; 0x28
   1de48:	cmp	r7, #0
   1de4c:	beq	1de78 <__assert_fail@plt+0xc6d0>
   1de50:	ldr	r9, [r7, #40]	; 0x28
   1de54:	mov	r0, sp
   1de58:	mov	r1, r9
   1de5c:	bl	1e3ec <__assert_fail@plt+0xcc44>
   1de60:	str	r0, [r8]
   1de64:	cmp	r0, #0
   1de68:	beq	1de8c <__assert_fail@plt+0xc6e4>
   1de6c:	b	1df3c <__assert_fail@plt+0xc794>
   1de70:	str	r7, [r0, r5, lsl #2]
   1de74:	b	1ded0 <__assert_fail@plt+0xc728>
   1de78:	vldr	d16, [r2]
   1de7c:	ldr	r0, [r2, #8]
   1de80:	str	r0, [sp, #8]
   1de84:	vstr	d16, [sp]
   1de88:	mov	r9, #0
   1de8c:	ldr	r0, [r4, #40]	; 0x28
   1de90:	ldr	r2, [r4, #88]	; 0x58
   1de94:	sub	r1, r0, #1
   1de98:	mov	r0, r4
   1de9c:	bl	1d730 <__assert_fail@plt+0xbf88>
   1dea0:	mov	r3, r0
   1dea4:	mov	r2, sp
   1dea8:	mov	r0, r8
   1deac:	mov	r1, r6
   1deb0:	bl	1c014 <__assert_fail@plt+0xa86c>
   1deb4:	mov	r7, r0
   1deb8:	ldr	r0, [r4, #100]	; 0x64
   1debc:	str	r7, [r0, r5, lsl #2]
   1dec0:	cmp	r9, #0
   1dec4:	beq	1ded0 <__assert_fail@plt+0xc728>
   1dec8:	ldr	r0, [sp, #8]
   1decc:	bl	13140 <__assert_fail@plt+0x1998>
   1ded0:	cmp	r7, #0
   1ded4:	ldrne	r0, [r6, #76]	; 0x4c
   1ded8:	cmpne	r0, #0
   1dedc:	bne	1deec <__assert_fail@plt+0xc744>
   1dee0:	mov	r0, r7
   1dee4:	sub	sp, fp, #24
   1dee8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1deec:	add	r6, r7, #4
   1def0:	mov	r0, r4
   1def4:	mov	r1, r6
   1def8:	mov	r2, r5
   1defc:	bl	1d8d4 <__assert_fail@plt+0xc12c>
   1df00:	str	r0, [r8]
   1df04:	cmp	r0, #0
   1df08:	bne	1df3c <__assert_fail@plt+0xc794>
   1df0c:	ldrb	r0, [r7, #52]	; 0x34
   1df10:	tst	r0, #64	; 0x40
   1df14:	beq	1dee0 <__assert_fail@plt+0xc738>
   1df18:	mov	r0, r4
   1df1c:	mov	r1, r6
   1df20:	bl	1d968 <__assert_fail@plt+0xc1c0>
   1df24:	str	r0, [r8]
   1df28:	cmp	r0, #0
   1df2c:	mov	r7, #0
   1df30:	ldreq	r0, [r4, #100]	; 0x64
   1df34:	ldreq	r7, [r0, r5, lsl #2]
   1df38:	b	1dee0 <__assert_fail@plt+0xc738>
   1df3c:	mov	r7, #0
   1df40:	b	1dee0 <__assert_fail@plt+0xc738>
   1df44:	push	{r4, r5, r6, sl, fp, lr}
   1df48:	add	fp, sp, #16
   1df4c:	mov	r4, r1
   1df50:	mov	r6, r0
   1df54:	ldr	r1, [r4, #40]	; 0x28
   1df58:	ldr	r0, [r4, #104]	; 0x68
   1df5c:	cmp	r1, r0
   1df60:	bge	1dfb0 <__assert_fail@plt+0xc808>
   1df64:	add	r2, r1, #1
   1df68:	ldr	r3, [r4, #40]	; 0x28
   1df6c:	ldr	r5, [r4, #100]	; 0x64
   1df70:	add	r3, r3, #1
   1df74:	str	r3, [r4, #40]	; 0x28
   1df78:	add	r1, r5, r1, lsl #2
   1df7c:	ldr	r1, [r1, #4]
   1df80:	cmp	r1, #0
   1df84:	mov	r1, r2
   1df88:	beq	1df5c <__assert_fail@plt+0xc7b4>
   1df8c:	mov	r0, r6
   1df90:	mov	r1, r4
   1df94:	mov	r2, #0
   1df98:	bl	1ddf8 <__assert_fail@plt+0xc650>
   1df9c:	cmp	r0, #0
   1dfa0:	ldreq	r1, [r6]
   1dfa4:	cmpeq	r1, #0
   1dfa8:	beq	1df54 <__assert_fail@plt+0xc7ac>
   1dfac:	pop	{r4, r5, r6, sl, fp, pc}
   1dfb0:	mov	r0, #0
   1dfb4:	pop	{r4, r5, r6, sl, fp, pc}
   1dfb8:	push	{r4, r5, r6, r7, fp, lr}
   1dfbc:	add	fp, sp, #16
   1dfc0:	mov	r4, r2
   1dfc4:	mov	r6, r1
   1dfc8:	mov	r5, r0
   1dfcc:	ldr	r0, [r0, #124]	; 0x7c
   1dfd0:	ldr	r7, [r5, #128]	; 0x80
   1dfd4:	cmp	r0, r7
   1dfd8:	beq	1e020 <__assert_fail@plt+0xc878>
   1dfdc:	mov	r0, #1
   1dfe0:	mov	r1, #24
   1dfe4:	bl	22a64 <__assert_fail@plt+0x112bc>
   1dfe8:	ldr	r1, [r5, #124]	; 0x7c
   1dfec:	ldr	r2, [r5, #132]	; 0x84
   1dff0:	str	r0, [r2, r1, lsl #2]
   1dff4:	ldr	r0, [r5, #132]	; 0x84
   1dff8:	ldr	r0, [r0, r1, lsl #2]
   1dffc:	cmp	r0, #0
   1e000:	strne	r6, [r0, #4]
   1e004:	addne	r1, r1, #1
   1e008:	strne	r1, [r5, #124]	; 0x7c
   1e00c:	strne	r4, [r0]
   1e010:	movne	r0, #0
   1e014:	popne	{r4, r5, r6, r7, fp, pc}
   1e018:	mov	r0, #12
   1e01c:	pop	{r4, r5, r6, r7, fp, pc}
   1e020:	ldr	r0, [r5, #132]	; 0x84
   1e024:	lsl	r1, r7, #3
   1e028:	bl	22ae8 <__assert_fail@plt+0x11340>
   1e02c:	cmp	r0, #0
   1e030:	beq	1e018 <__assert_fail@plt+0xc870>
   1e034:	lsl	r1, r7, #1
   1e038:	str	r1, [r5, #128]	; 0x80
   1e03c:	str	r0, [r5, #132]	; 0x84
   1e040:	b	1dfdc <__assert_fail@plt+0xc834>
   1e044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e048:	add	fp, sp, #28
   1e04c:	sub	sp, sp, #52	; 0x34
   1e050:	str	r1, [sp, #36]	; 0x24
   1e054:	mov	r4, r0
   1e058:	ldr	r5, [r0, #4]
   1e05c:	ldr	r6, [r0, #84]	; 0x54
   1e060:	str	r2, [fp, #-36]	; 0xffffffdc
   1e064:	mov	r1, r2
   1e068:	bl	1e620 <__assert_fail@plt+0xce78>
   1e06c:	cmn	r0, #1
   1e070:	beq	1e0a0 <__assert_fail@plt+0xc8f8>
   1e074:	ldr	r1, [r4, #116]	; 0x74
   1e078:	add	r0, r0, r0, lsl #1
   1e07c:	add	r0, r1, r0, lsl #3
   1e080:	ldr	r2, [sp, #36]	; 0x24
   1e084:	ldr	r1, [r0]
   1e088:	cmp	r1, r2
   1e08c:	beq	1e3cc <__assert_fail@plt+0xcc24>
   1e090:	ldrb	r1, [r0, #20]
   1e094:	add	r0, r0, #24
   1e098:	cmp	r1, #0
   1e09c:	bne	1e084 <__assert_fail@plt+0xc8dc>
   1e0a0:	ldr	r0, [r4, #124]	; 0x7c
   1e0a4:	cmp	r0, #1
   1e0a8:	blt	1e3cc <__assert_fail@plt+0xcc24>
   1e0ac:	mov	ip, r6
   1e0b0:	ldr	r0, [r6]
   1e0b4:	ldr	r1, [sp, #36]	; 0x24
   1e0b8:	ldr	r2, [r0, r1, lsl #3]
   1e0bc:	mov	r6, #0
   1e0c0:	str	r4, [sp, #28]
   1e0c4:	mov	r3, r5
   1e0c8:	str	ip, [sp, #24]
   1e0cc:	str	r2, [sp, #20]
   1e0d0:	b	1e0f0 <__assert_fail@plt+0xc948>
   1e0d4:	ldr	ip, [sp, #24]
   1e0d8:	ldr	r2, [sp, #20]
   1e0dc:	ldr	r6, [sp, #16]
   1e0e0:	add	r6, r6, #1
   1e0e4:	ldr	r0, [r4, #124]	; 0x7c
   1e0e8:	cmp	r6, r0
   1e0ec:	bge	1e3cc <__assert_fail@plt+0xcc24>
   1e0f0:	ldr	r0, [r4, #132]	; 0x84
   1e0f4:	ldr	r7, [r0, r6, lsl #2]
   1e0f8:	ldr	r0, [r7, #4]
   1e0fc:	ldr	r1, [ip]
   1e100:	ldr	r0, [r1, r0, lsl #3]
   1e104:	cmp	r0, r2
   1e108:	str	r6, [sp, #16]
   1e10c:	bne	1e0dc <__assert_fail@plt+0xc934>
   1e110:	ldr	r5, [r7]
   1e114:	ldr	r0, [r7, #16]
   1e118:	cmp	r0, #1
   1e11c:	str	r7, [sp, #32]
   1e120:	mov	sl, #0
   1e124:	blt	1e1fc <__assert_fail@plt+0xca54>
   1e128:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1e12c:	mov	r9, r5
   1e130:	ldr	r0, [r7, #20]
   1e134:	ldr	r2, [r0, sl, lsl #2]
   1e138:	ldr	r0, [r2, #4]
   1e13c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e140:	sub	r5, r0, r9
   1e144:	cmp	r5, #1
   1e148:	blt	1e18c <__assert_fail@plt+0xc9e4>
   1e14c:	add	r1, r5, r6
   1e150:	ldr	r0, [r4, #28]
   1e154:	cmp	r1, r0
   1e158:	str	r2, [sp, #40]	; 0x28
   1e15c:	bgt	1e1d0 <__assert_fail@plt+0xca28>
   1e160:	add	r0, r3, r6
   1e164:	add	r1, r3, r9
   1e168:	mov	r8, r6
   1e16c:	mov	r2, r5
   1e170:	mov	r7, r3
   1e174:	bl	1164c <bcmp@plt>
   1e178:	mov	r3, r7
   1e17c:	cmp	r0, #0
   1e180:	ldr	r7, [sp, #32]
   1e184:	ldr	r2, [sp, #40]	; 0x28
   1e188:	bne	1e204 <__assert_fail@plt+0xca5c>
   1e18c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e190:	str	r0, [sp]
   1e194:	mov	r0, r4
   1e198:	mov	r1, r7
   1e19c:	ldr	r3, [sp, #36]	; 0x24
   1e1a0:	bl	1e740 <__assert_fail@plt+0xcf98>
   1e1a4:	cmp	r0, #1
   1e1a8:	bhi	1e3dc <__assert_fail@plt+0xcc34>
   1e1ac:	add	r6, r5, r6
   1e1b0:	add	sl, sl, #1
   1e1b4:	ldr	r3, [r4, #4]
   1e1b8:	ldr	r0, [r7, #16]
   1e1bc:	cmp	sl, r0
   1e1c0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1e1c4:	mov	r9, r5
   1e1c8:	blt	1e130 <__assert_fail@plt+0xc988>
   1e1cc:	b	1e208 <__assert_fail@plt+0xca60>
   1e1d0:	ldr	r0, [r4, #48]	; 0x30
   1e1d4:	cmp	r1, r0
   1e1d8:	bgt	1e204 <__assert_fail@plt+0xca5c>
   1e1dc:	mov	r7, r6
   1e1e0:	mov	r0, r4
   1e1e4:	bl	1e6ac <__assert_fail@plt+0xcf04>
   1e1e8:	cmp	r0, #0
   1e1ec:	bne	1e3dc <__assert_fail@plt+0xcc34>
   1e1f0:	ldr	r3, [r4, #4]
   1e1f4:	mov	r6, r7
   1e1f8:	b	1e160 <__assert_fail@plt+0xc9b8>
   1e1fc:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1e200:	b	1e208 <__assert_fail@plt+0xca60>
   1e204:	mov	r5, r9
   1e208:	ldr	r0, [r7, #16]
   1e20c:	cmp	sl, r0
   1e210:	blt	1e0d4 <__assert_fail@plt+0xc92c>
   1e214:	cmp	sl, #0
   1e218:	addne	r5, r5, #1
   1e21c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e220:	cmp	r5, r0
   1e224:	bgt	1e0d4 <__assert_fail@plt+0xc92c>
   1e228:	ldr	ip, [sp, #24]
   1e22c:	ldr	r2, [sp, #20]
   1e230:	b	1e260 <__assert_fail@plt+0xcab8>
   1e234:	ldr	r7, [sp, #32]
   1e238:	mov	r3, sl
   1e23c:	mov	r6, r9
   1e240:	ldr	ip, [sp, #24]
   1e244:	ldr	r2, [sp, #20]
   1e248:	add	r1, r5, #1
   1e24c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e250:	cmp	r5, r0
   1e254:	mov	r5, r1
   1e258:	ldr	r4, [sp, #28]
   1e25c:	bge	1e0dc <__assert_fail@plt+0xc934>
   1e260:	ldr	r0, [r7]
   1e264:	cmp	r5, r0
   1e268:	ble	1e290 <__assert_fail@plt+0xcae8>
   1e26c:	ldr	r0, [r4, #28]
   1e270:	cmp	r6, r0
   1e274:	bge	1e390 <__assert_fail@plt+0xcbe8>
   1e278:	ldrb	r0, [r3, r6]
   1e27c:	add	r1, r3, r5
   1e280:	ldrb	r1, [r1, #-1]
   1e284:	cmp	r0, r1
   1e288:	bne	1e0dc <__assert_fail@plt+0xc934>
   1e28c:	add	r6, r6, #1
   1e290:	ldr	r0, [r4, #100]	; 0x64
   1e294:	ldr	r0, [r0, r5, lsl #2]
   1e298:	cmp	r0, #0
   1e29c:	beq	1e248 <__assert_fail@plt+0xcaa0>
   1e2a0:	mov	r9, r6
   1e2a4:	mov	sl, r3
   1e2a8:	add	r1, r0, #4
   1e2ac:	mov	r0, ip
   1e2b0:	mov	r3, #9
   1e2b4:	bl	1e7d8 <__assert_fail@plt+0xd030>
   1e2b8:	cmn	r0, #1
   1e2bc:	beq	1e234 <__assert_fail@plt+0xca8c>
   1e2c0:	mov	r4, r0
   1e2c4:	ldr	r1, [sp, #32]
   1e2c8:	ldr	r0, [r1, #8]
   1e2cc:	cmp	r0, #0
   1e2d0:	bne	1e2fc <__assert_fail@plt+0xcb54>
   1e2d4:	ldr	r0, [r1]
   1e2d8:	sub	r0, r5, r0
   1e2dc:	add	r1, r0, #1
   1e2e0:	mov	r8, #12
   1e2e4:	mov	r0, #12
   1e2e8:	bl	22a64 <__assert_fail@plt+0x112bc>
   1e2ec:	ldr	r1, [sp, #32]
   1e2f0:	str	r0, [r1, #8]
   1e2f4:	cmp	r0, #0
   1e2f8:	beq	1e3d0 <__assert_fail@plt+0xcc28>
   1e2fc:	ldr	r3, [r1]
   1e300:	ldr	r2, [r1, #4]
   1e304:	ldr	r1, [r1, #8]
   1e308:	stm	sp, {r4, r5}
   1e30c:	mov	r0, #9
   1e310:	str	r0, [sp, #8]
   1e314:	ldr	r0, [sp, #28]
   1e318:	bl	1e838 <__assert_fail@plt+0xd090>
   1e31c:	ldr	r7, [sp, #32]
   1e320:	cmp	r0, #1
   1e324:	mov	r3, sl
   1e328:	mov	r6, r9
   1e32c:	ldr	ip, [sp, #24]
   1e330:	ldr	r2, [sp, #20]
   1e334:	beq	1e248 <__assert_fail@plt+0xcaa0>
   1e338:	mov	r8, r0
   1e33c:	cmp	r0, #0
   1e340:	bne	1e3d0 <__assert_fail@plt+0xcc28>
   1e344:	mov	r0, r7
   1e348:	mov	r1, r4
   1e34c:	mov	r2, r5
   1e350:	bl	1ec1c <__assert_fail@plt+0xd474>
   1e354:	cmp	r0, #0
   1e358:	beq	1e3e4 <__assert_fail@plt+0xcc3c>
   1e35c:	mov	r2, r0
   1e360:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e364:	str	r0, [sp]
   1e368:	ldr	r4, [sp, #28]
   1e36c:	mov	r0, r4
   1e370:	mov	r1, r7
   1e374:	ldr	r3, [sp, #36]	; 0x24
   1e378:	bl	1e740 <__assert_fail@plt+0xcf98>
   1e37c:	cmp	r0, #1
   1e380:	bhi	1e3dc <__assert_fail@plt+0xcc34>
   1e384:	ldr	r3, [r4, #4]
   1e388:	ldr	r7, [sp, #32]
   1e38c:	b	1e23c <__assert_fail@plt+0xca94>
   1e390:	ldr	r0, [r4, #48]	; 0x30
   1e394:	cmp	r6, r0
   1e398:	bge	1e0dc <__assert_fail@plt+0xc934>
   1e39c:	mov	r9, r6
   1e3a0:	add	r1, r6, #1
   1e3a4:	mov	r0, r4
   1e3a8:	bl	1dc74 <__assert_fail@plt+0xc4cc>
   1e3ac:	cmp	r0, #0
   1e3b0:	bne	1e3dc <__assert_fail@plt+0xcc34>
   1e3b4:	ldr	r3, [r4, #4]
   1e3b8:	ldr	r7, [sp, #32]
   1e3bc:	mov	r6, r9
   1e3c0:	ldr	ip, [sp, #24]
   1e3c4:	ldr	r2, [sp, #20]
   1e3c8:	b	1e278 <__assert_fail@plt+0xcad0>
   1e3cc:	mov	r8, #0
   1e3d0:	mov	r0, r8
   1e3d4:	sub	sp, fp, #28
   1e3d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3dc:	mov	r8, r0
   1e3e0:	b	1e3d0 <__assert_fail@plt+0xcc28>
   1e3e4:	mov	r8, #12
   1e3e8:	b	1e3d0 <__assert_fail@plt+0xcc28>
   1e3ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3f0:	add	fp, sp, #28
   1e3f4:	sub	sp, sp, #4
   1e3f8:	mov	sl, r2
   1e3fc:	mov	r8, r0
   1e400:	cmp	r1, #0
   1e404:	beq	1e538 <__assert_fail@plt+0xcd90>
   1e408:	mov	r6, r1
   1e40c:	ldr	r0, [r1, #4]
   1e410:	cmp	sl, #0
   1e414:	beq	1e524 <__assert_fail@plt+0xcd7c>
   1e418:	cmp	r0, #1
   1e41c:	blt	1e524 <__assert_fail@plt+0xcd7c>
   1e420:	ldr	r1, [sl, #4]
   1e424:	cmp	r1, #1
   1e428:	blt	1e524 <__assert_fail@plt+0xcd7c>
   1e42c:	add	r0, r1, r0
   1e430:	str	r0, [r8]
   1e434:	lsl	r0, r0, #2
   1e438:	bl	22ab8 <__assert_fail@plt+0x11310>
   1e43c:	str	r0, [r8, #8]
   1e440:	cmp	r0, #0
   1e444:	beq	1e614 <__assert_fail@plt+0xce6c>
   1e448:	ldr	r2, [sl, #4]
   1e44c:	mov	r4, #0
   1e450:	cmp	r2, #0
   1e454:	mov	r0, #0
   1e458:	movwgt	r0, #1
   1e45c:	ldr	r3, [r6, #4]
   1e460:	cmp	r3, #1
   1e464:	blt	1e578 <__assert_fail@plt+0xcdd0>
   1e468:	mov	r9, #0
   1e46c:	cmp	r2, #1
   1e470:	blt	1e588 <__assert_fail@plt+0xcde0>
   1e474:	mov	ip, #0
   1e478:	mov	r0, #0
   1e47c:	mov	r4, ip
   1e480:	mov	r7, r0
   1e484:	ldr	r0, [sl, #8]
   1e488:	ldr	r1, [r0, r4, lsl #2]
   1e48c:	ldr	r0, [r6, #8]
   1e490:	ldr	r5, [r0, r9, lsl #2]
   1e494:	cmp	r5, r1
   1e498:	ble	1e4d8 <__assert_fail@plt+0xcd30>
   1e49c:	ldr	r0, [r8, #8]
   1e4a0:	str	r1, [r0, r7, lsl #2]
   1e4a4:	ldr	r2, [sl, #4]
   1e4a8:	add	r1, r4, #1
   1e4ac:	cmp	r2, r1
   1e4b0:	mov	r0, #0
   1e4b4:	movwgt	r0, #1
   1e4b8:	ldr	r3, [r6, #4]
   1e4bc:	cmp	r3, r9
   1e4c0:	ble	1e5b4 <__assert_fail@plt+0xce0c>
   1e4c4:	add	r7, r7, #1
   1e4c8:	cmp	r2, r1
   1e4cc:	mov	r4, r1
   1e4d0:	bgt	1e484 <__assert_fail@plt+0xccdc>
   1e4d4:	b	1e58c <__assert_fail@plt+0xcde4>
   1e4d8:	ldr	r0, [r8, #8]
   1e4dc:	str	r5, [r0, r7, lsl #2]
   1e4e0:	add	lr, r4, #1
   1e4e4:	cmp	r5, r1
   1e4e8:	mov	ip, r4
   1e4ec:	moveq	ip, lr
   1e4f0:	ldr	r2, [sl, #4]
   1e4f4:	cmp	r2, ip
   1e4f8:	mov	r0, #0
   1e4fc:	movwgt	r0, #1
   1e500:	add	r9, r9, #1
   1e504:	ldr	r3, [r6, #4]
   1e508:	cmp	r3, r9
   1e50c:	ble	1e5fc <__assert_fail@plt+0xce54>
   1e510:	add	r0, r7, #1
   1e514:	cmp	r2, ip
   1e518:	bgt	1e47c <__assert_fail@plt+0xccd4>
   1e51c:	add	r7, r7, #1
   1e520:	b	1e58c <__assert_fail@plt+0xcde4>
   1e524:	cmp	r0, #1
   1e528:	blt	1e538 <__assert_fail@plt+0xcd90>
   1e52c:	mov	r0, r8
   1e530:	mov	r1, r6
   1e534:	b	1e554 <__assert_fail@plt+0xcdac>
   1e538:	cmp	sl, #0
   1e53c:	beq	1e560 <__assert_fail@plt+0xcdb8>
   1e540:	ldr	r0, [sl, #4]
   1e544:	cmp	r0, #1
   1e548:	blt	1e560 <__assert_fail@plt+0xcdb8>
   1e54c:	mov	r0, r8
   1e550:	mov	r1, sl
   1e554:	sub	sp, fp, #28
   1e558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e55c:	b	1bf28 <__assert_fail@plt+0xa780>
   1e560:	mov	r0, #0
   1e564:	str	r0, [r8]
   1e568:	str	r0, [r8, #4]
   1e56c:	str	r0, [r8, #8]
   1e570:	sub	sp, fp, #28
   1e574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e578:	mov	r6, #0
   1e57c:	cmp	r0, #0
   1e580:	bne	1e5c4 <__assert_fail@plt+0xce1c>
   1e584:	b	1e5ec <__assert_fail@plt+0xce44>
   1e588:	mov	r7, #0
   1e58c:	ldr	r0, [r8, #8]
   1e590:	add	r0, r0, r7, lsl #2
   1e594:	ldr	r1, [r6, #8]
   1e598:	add	r1, r1, r9, lsl #2
   1e59c:	sub	r2, r3, r9
   1e5a0:	lsl	r2, r2, #2
   1e5a4:	bl	114cc <memcpy@plt>
   1e5a8:	sub	r0, r7, r9
   1e5ac:	ldr	r1, [r6, #4]
   1e5b0:	b	1e5e8 <__assert_fail@plt+0xce40>
   1e5b4:	add	r6, r7, #1
   1e5b8:	add	r4, r4, #1
   1e5bc:	cmp	r0, #0
   1e5c0:	beq	1e5ec <__assert_fail@plt+0xce44>
   1e5c4:	ldr	r0, [r8, #8]
   1e5c8:	add	r0, r0, r6, lsl #2
   1e5cc:	ldr	r1, [sl, #8]
   1e5d0:	add	r1, r1, r4, lsl #2
   1e5d4:	sub	r2, r2, r4
   1e5d8:	lsl	r2, r2, #2
   1e5dc:	bl	114cc <memcpy@plt>
   1e5e0:	sub	r0, r6, r4
   1e5e4:	ldr	r1, [sl, #4]
   1e5e8:	add	r6, r0, r1
   1e5ec:	str	r6, [r8, #4]
   1e5f0:	mov	r0, #0
   1e5f4:	sub	sp, fp, #28
   1e5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5fc:	cmp	r5, r1
   1e600:	moveq	r4, lr
   1e604:	add	r6, r7, #1
   1e608:	cmp	r0, #0
   1e60c:	bne	1e5c4 <__assert_fail@plt+0xce1c>
   1e610:	b	1e5ec <__assert_fail@plt+0xce44>
   1e614:	mov	r0, #12
   1e618:	sub	sp, fp, #28
   1e61c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e620:	push	{r4, r5, r6, r7, fp, lr}
   1e624:	add	fp, sp, #16
   1e628:	mov	ip, r0
   1e62c:	ldr	lr, [r0, #108]	; 0x6c
   1e630:	cmp	lr, #1
   1e634:	blt	1e698 <__assert_fail@plt+0xcef0>
   1e638:	ldr	r2, [ip, #116]	; 0x74
   1e63c:	mov	r0, #0
   1e640:	mov	r3, #1
   1e644:	mov	r4, lr
   1e648:	add	r5, r0, r4
   1e64c:	add	r5, r5, r5, lsr #31
   1e650:	asr	r6, r5, #1
   1e654:	add	r7, r6, r6, lsl #1
   1e658:	add	r7, r2, r7, lsl #3
   1e65c:	ldr	r7, [r7, #4]
   1e660:	cmp	r7, r1
   1e664:	addlt	r0, r3, r5, asr #1
   1e668:	movge	r4, r6
   1e66c:	cmp	r0, r4
   1e670:	blt	1e648 <__assert_fail@plt+0xcea0>
   1e674:	cmp	r0, lr
   1e678:	bge	1e6a4 <__assert_fail@plt+0xcefc>
   1e67c:	ldr	r2, [ip, #116]	; 0x74
   1e680:	add	r3, r0, r0, lsl #1
   1e684:	add	r2, r2, r3, lsl #3
   1e688:	ldr	r2, [r2, #4]
   1e68c:	cmp	r2, r1
   1e690:	mvnne	r0, #0
   1e694:	pop	{r4, r5, r6, r7, fp, pc}
   1e698:	mov	r0, #0
   1e69c:	cmp	r0, lr
   1e6a0:	blt	1e67c <__assert_fail@plt+0xced4>
   1e6a4:	mvn	r0, #0
   1e6a8:	pop	{r4, r5, r6, r7, fp, pc}
   1e6ac:	push	{r4, r5, r6, r7, fp, lr}
   1e6b0:	add	fp, sp, #16
   1e6b4:	mov	r4, r1
   1e6b8:	mov	r5, r0
   1e6bc:	ldr	r0, [r0, #36]	; 0x24
   1e6c0:	ldr	r7, [r5, #104]	; 0x68
   1e6c4:	cmp	r0, r1
   1e6c8:	bgt	1e6d8 <__assert_fail@plt+0xcf30>
   1e6cc:	ldr	r1, [r5, #48]	; 0x30
   1e6d0:	cmp	r0, r1
   1e6d4:	blt	1e6f0 <__assert_fail@plt+0xcf48>
   1e6d8:	ldr	r0, [r5, #28]
   1e6dc:	cmp	r0, r4
   1e6e0:	bgt	1e708 <__assert_fail@plt+0xcf60>
   1e6e4:	ldr	r1, [r5, #48]	; 0x30
   1e6e8:	cmp	r0, r1
   1e6ec:	bge	1e708 <__assert_fail@plt+0xcf60>
   1e6f0:	add	r1, r4, #1
   1e6f4:	mov	r0, r5
   1e6f8:	bl	1dc74 <__assert_fail@plt+0xc4cc>
   1e6fc:	mov	r6, r0
   1e700:	cmp	r0, #0
   1e704:	bne	1e738 <__assert_fail@plt+0xcf90>
   1e708:	mov	r6, #0
   1e70c:	cmp	r7, r4
   1e710:	bge	1e738 <__assert_fail@plt+0xcf90>
   1e714:	sub	r0, r4, r7
   1e718:	lsl	r2, r0, #2
   1e71c:	ldr	r0, [r5, #100]	; 0x64
   1e720:	add	r0, r0, r7, lsl #2
   1e724:	add	r0, r0, #4
   1e728:	mov	r6, #0
   1e72c:	mov	r1, #0
   1e730:	bl	116ac <memset@plt>
   1e734:	str	r4, [r5, #104]	; 0x68
   1e738:	mov	r0, r6
   1e73c:	pop	{r4, r5, r6, r7, fp, pc}
   1e740:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e744:	add	fp, sp, #24
   1e748:	sub	sp, sp, #16
   1e74c:	mov	r7, r3
   1e750:	mov	r6, r2
   1e754:	mov	r8, r1
   1e758:	mov	r4, r0
   1e75c:	ldr	r2, [r2]
   1e760:	ldr	r3, [r6, #4]
   1e764:	mov	r0, #8
   1e768:	str	r0, [sp, #8]
   1e76c:	ldr	r5, [fp, #8]
   1e770:	str	r5, [sp, #4]
   1e774:	str	r7, [sp]
   1e778:	add	r1, r6, #8
   1e77c:	mov	r0, r4
   1e780:	bl	1e838 <__assert_fail@plt+0xd090>
   1e784:	cmp	r0, #0
   1e788:	beq	1e794 <__assert_fail@plt+0xcfec>
   1e78c:	sub	sp, fp, #24
   1e790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e794:	ldr	r3, [r8]
   1e798:	ldr	r0, [r6, #4]
   1e79c:	str	r0, [sp]
   1e7a0:	mov	r0, r4
   1e7a4:	mov	r1, r7
   1e7a8:	mov	r2, r5
   1e7ac:	bl	1eca0 <__assert_fail@plt+0xd4f8>
   1e7b0:	cmp	r0, #0
   1e7b4:	bne	1e78c <__assert_fail@plt+0xcfe4>
   1e7b8:	ldr	r0, [r6, #4]
   1e7bc:	add	r0, r0, r5
   1e7c0:	ldr	r1, [r8]
   1e7c4:	sub	r1, r0, r1
   1e7c8:	mov	r0, r4
   1e7cc:	sub	sp, fp, #24
   1e7d0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e7d4:	b	1e6ac <__assert_fail@plt+0xcf04>
   1e7d8:	push	{r4, r5, fp, lr}
   1e7dc:	add	fp, sp, #8
   1e7e0:	ldr	r4, [r1, #4]
   1e7e4:	cmp	r4, #1
   1e7e8:	blt	1e830 <__assert_fail@plt+0xd088>
   1e7ec:	ldr	ip, [r0]
   1e7f0:	ldr	lr, [r1, #8]
   1e7f4:	mov	r4, #0
   1e7f8:	b	1e80c <__assert_fail@plt+0xd064>
   1e7fc:	add	r4, r4, #1
   1e800:	ldr	r0, [r1, #4]
   1e804:	cmp	r4, r0
   1e808:	bge	1e830 <__assert_fail@plt+0xd088>
   1e80c:	ldr	r0, [lr, r4, lsl #2]
   1e810:	add	r5, ip, r0, lsl #3
   1e814:	ldrb	r5, [r5, #4]
   1e818:	cmp	r5, r3
   1e81c:	bne	1e7fc <__assert_fail@plt+0xd054>
   1e820:	ldr	r5, [ip, r0, lsl #3]
   1e824:	cmp	r5, r2
   1e828:	bne	1e7fc <__assert_fail@plt+0xd054>
   1e82c:	pop	{r4, r5, fp, pc}
   1e830:	mvn	r0, #0
   1e834:	pop	{r4, r5, fp, pc}
   1e838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e83c:	add	fp, sp, #28
   1e840:	sub	sp, sp, #52	; 0x34
   1e844:	mov	r7, r3
   1e848:	mov	r8, r2
   1e84c:	mov	r6, r1
   1e850:	mov	r4, r0
   1e854:	ldr	r1, [r0, #84]	; 0x54
   1e858:	mov	r0, #0
   1e85c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e860:	str	r1, [sp, #28]
   1e864:	ldr	r0, [r1]
   1e868:	ldr	r0, [r0, r2, lsl #3]
   1e86c:	str	r0, [sp, #20]
   1e870:	ldr	r0, [r4, #120]	; 0x78
   1e874:	ldr	sl, [fp, #12]
   1e878:	add	r0, r0, sl
   1e87c:	ldr	r5, [r6, #4]
   1e880:	cmp	r5, r0
   1e884:	ble	1ebb0 <__assert_fail@plt+0xd408>
   1e888:	ldr	r0, [r4, #40]	; 0x28
   1e88c:	str	r0, [sp, #16]
   1e890:	ldr	r2, [r4, #88]	; 0x58
   1e894:	ldr	r0, [r4, #100]	; 0x64
   1e898:	str	r0, [sp, #12]
   1e89c:	ldr	r9, [r6]
   1e8a0:	ldr	r0, [r6, #8]
   1e8a4:	str	r0, [r4, #100]	; 0x64
   1e8a8:	cmp	r9, #0
   1e8ac:	moveq	r9, r7
   1e8b0:	str	r9, [r4, #40]	; 0x28
   1e8b4:	sub	r1, r9, #1
   1e8b8:	mov	r0, r4
   1e8bc:	bl	1d730 <__assert_fail@plt+0xbf88>
   1e8c0:	cmp	r9, r7
   1e8c4:	mov	r5, r4
   1e8c8:	bne	1e90c <__assert_fail@plt+0xd164>
   1e8cc:	mov	r7, r0
   1e8d0:	add	r0, sp, #32
   1e8d4:	mov	r1, r8
   1e8d8:	bl	1b638 <__assert_fail@plt+0x9e90>
   1e8dc:	str	r0, [fp, #-32]	; 0xffffffe0
   1e8e0:	cmp	r0, #0
   1e8e4:	bne	1ec14 <__assert_fail@plt+0xd46c>
   1e8e8:	add	r1, sp, #32
   1e8ec:	ldr	r0, [sp, #28]
   1e8f0:	ldr	r2, [sp, #20]
   1e8f4:	ldr	r3, [fp, #16]
   1e8f8:	bl	1ed9c <__assert_fail@plt+0xd5f4>
   1e8fc:	str	r0, [fp, #-32]	; 0xffffffe0
   1e900:	cmp	r0, #0
   1e904:	beq	1e980 <__assert_fail@plt+0xd1d8>
   1e908:	b	1eb3c <__assert_fail@plt+0xd394>
   1e90c:	ldr	r1, [r5, #100]	; 0x64
   1e910:	ldr	r8, [r1, r9, lsl #2]
   1e914:	cmp	r8, #0
   1e918:	beq	1e940 <__assert_fail@plt+0xd198>
   1e91c:	ldrb	r1, [r8, #52]	; 0x34
   1e920:	mov	r7, r0
   1e924:	tst	r1, #64	; 0x40
   1e928:	bne	1e95c <__assert_fail@plt+0xd1b4>
   1e92c:	mov	r0, #0
   1e930:	str	r0, [sp, #36]	; 0x24
   1e934:	str	r0, [sp, #32]
   1e938:	str	r0, [sp, #40]	; 0x28
   1e93c:	b	1e974 <__assert_fail@plt+0xd1cc>
   1e940:	mov	r8, #0
   1e944:	str	r8, [sp, #36]	; 0x24
   1e948:	str	r8, [sp, #32]
   1e94c:	str	r8, [sp, #40]	; 0x28
   1e950:	cmp	r9, sl
   1e954:	blt	1e9f0 <__assert_fail@plt+0xd248>
   1e958:	b	1eb58 <__assert_fail@plt+0xd3b0>
   1e95c:	add	r1, r8, #4
   1e960:	add	r0, sp, #32
   1e964:	bl	1bf28 <__assert_fail@plt+0xa780>
   1e968:	str	r0, [fp, #-32]	; 0xffffffe0
   1e96c:	cmp	r0, #0
   1e970:	bne	1ec14 <__assert_fail@plt+0xd46c>
   1e974:	ldrb	r0, [r8, #52]	; 0x34
   1e978:	tst	r0, #64	; 0x40
   1e97c:	beq	1e9e8 <__assert_fail@plt+0xd240>
   1e980:	ldr	r0, [sp, #36]	; 0x24
   1e984:	cmp	r0, #0
   1e988:	beq	1e9b4 <__assert_fail@plt+0xd20c>
   1e98c:	ldr	r0, [fp, #16]
   1e990:	str	r0, [sp]
   1e994:	add	r1, sp, #32
   1e998:	mov	r0, r5
   1e99c:	mov	r2, r9
   1e9a0:	ldr	r3, [sp, #20]
   1e9a4:	bl	1ee94 <__assert_fail@plt+0xd6ec>
   1e9a8:	str	r0, [fp, #-32]	; 0xffffffe0
   1e9ac:	cmp	r0, #0
   1e9b0:	bne	1eb3c <__assert_fail@plt+0xd394>
   1e9b4:	sub	r0, fp, #32
   1e9b8:	add	r2, sp, #32
   1e9bc:	ldr	r1, [sp, #28]
   1e9c0:	mov	r3, r7
   1e9c4:	bl	1c014 <__assert_fail@plt+0xa86c>
   1e9c8:	mov	r8, r0
   1e9cc:	cmp	r0, #0
   1e9d0:	bne	1e9e0 <__assert_fail@plt+0xd238>
   1e9d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e9d8:	cmp	r0, #0
   1e9dc:	bne	1eb3c <__assert_fail@plt+0xd394>
   1e9e0:	ldr	r0, [r5, #100]	; 0x64
   1e9e4:	str	r8, [r0, r9, lsl #2]
   1e9e8:	cmp	r9, sl
   1e9ec:	bge	1eb58 <__assert_fail@plt+0xd3b0>
   1e9f0:	str	r6, [sp, #8]
   1e9f4:	rsb	r0, sl, #0
   1e9f8:	str	r0, [sp, #24]
   1e9fc:	add	r7, r9, #1
   1ea00:	add	r6, sp, #32
   1ea04:	mov	sl, #0
   1ea08:	ldr	r4, [sp, #20]
   1ea0c:	b	1ea3c <__assert_fail@plt+0xd294>
   1ea10:	ldr	r0, [r5, #100]	; 0x64
   1ea14:	str	r8, [r0, r7, lsl #2]
   1ea18:	cmp	r8, #0
   1ea1c:	mov	r0, #0
   1ea20:	addeq	r0, sl, #1
   1ea24:	add	r7, r7, #1
   1ea28:	ldr	r1, [sp, #24]
   1ea2c:	add	r1, r1, r7
   1ea30:	cmp	r1, #1
   1ea34:	mov	sl, r0
   1ea38:	beq	1eb4c <__assert_fail@plt+0xd3a4>
   1ea3c:	sub	r9, r7, #1
   1ea40:	ldr	r0, [r5, #120]	; 0x78
   1ea44:	cmp	sl, r0
   1ea48:	bgt	1eb50 <__assert_fail@plt+0xd3a8>
   1ea4c:	mov	r0, #0
   1ea50:	str	r0, [sp, #36]	; 0x24
   1ea54:	ldr	r0, [r5, #100]	; 0x64
   1ea58:	ldr	r0, [r0, r7, lsl #2]
   1ea5c:	cmp	r0, #0
   1ea60:	beq	1ea7c <__assert_fail@plt+0xd2d4>
   1ea64:	add	r1, r0, #4
   1ea68:	mov	r0, r6
   1ea6c:	bl	1bb24 <__assert_fail@plt+0xa37c>
   1ea70:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea74:	cmp	r0, #0
   1ea78:	bne	1eb3c <__assert_fail@plt+0xd394>
   1ea7c:	cmp	r8, #0
   1ea80:	beq	1eaa4 <__assert_fail@plt+0xd2fc>
   1ea84:	add	r2, r8, #16
   1ea88:	mov	r0, r5
   1ea8c:	mov	r1, r9
   1ea90:	mov	r3, r6
   1ea94:	bl	1f12c <__assert_fail@plt+0xd984>
   1ea98:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea9c:	cmp	r0, #0
   1eaa0:	bne	1eb3c <__assert_fail@plt+0xd394>
   1eaa4:	ldr	r0, [sp, #36]	; 0x24
   1eaa8:	cmp	r0, #0
   1eaac:	beq	1eb00 <__assert_fail@plt+0xd358>
   1eab0:	mov	r8, r5
   1eab4:	ldr	r0, [sp, #28]
   1eab8:	mov	r1, r6
   1eabc:	mov	r2, r4
   1eac0:	ldr	r5, [fp, #16]
   1eac4:	mov	r3, r5
   1eac8:	bl	1ed9c <__assert_fail@plt+0xd5f4>
   1eacc:	str	r0, [fp, #-32]	; 0xffffffe0
   1ead0:	cmp	r0, #0
   1ead4:	bne	1eb3c <__assert_fail@plt+0xd394>
   1ead8:	str	r5, [sp]
   1eadc:	mov	r5, r8
   1eae0:	mov	r0, r8
   1eae4:	mov	r1, r6
   1eae8:	mov	r2, r7
   1eaec:	mov	r3, r4
   1eaf0:	bl	1ee94 <__assert_fail@plt+0xd6ec>
   1eaf4:	str	r0, [fp, #-32]	; 0xffffffe0
   1eaf8:	cmp	r0, #0
   1eafc:	bne	1eb3c <__assert_fail@plt+0xd394>
   1eb00:	ldr	r2, [r5, #88]	; 0x58
   1eb04:	mov	r0, r5
   1eb08:	mov	r1, r9
   1eb0c:	bl	1d730 <__assert_fail@plt+0xbf88>
   1eb10:	mov	r3, r0
   1eb14:	sub	r0, fp, #32
   1eb18:	ldr	r1, [sp, #28]
   1eb1c:	mov	r2, r6
   1eb20:	bl	1c014 <__assert_fail@plt+0xa86c>
   1eb24:	mov	r8, r0
   1eb28:	cmp	r0, #0
   1eb2c:	bne	1ea10 <__assert_fail@plt+0xd268>
   1eb30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1eb34:	cmp	r0, #0
   1eb38:	beq	1ea10 <__assert_fail@plt+0xd268>
   1eb3c:	ldr	r0, [sp, #40]	; 0x28
   1eb40:	bl	13140 <__assert_fail@plt+0x1998>
   1eb44:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1eb48:	b	1eba4 <__assert_fail@plt+0xd3fc>
   1eb4c:	sub	r9, r7, #1
   1eb50:	ldr	r6, [sp, #8]
   1eb54:	ldr	sl, [fp, #12]
   1eb58:	ldr	r0, [sp, #40]	; 0x28
   1eb5c:	bl	13140 <__assert_fail@plt+0x1998>
   1eb60:	ldr	r0, [r5, #100]	; 0x64
   1eb64:	ldr	r0, [r0, sl, lsl #2]
   1eb68:	str	r9, [r6]
   1eb6c:	ldr	r1, [sp, #16]
   1eb70:	str	r1, [r5, #40]	; 0x28
   1eb74:	ldr	r1, [sp, #12]
   1eb78:	str	r1, [r5, #100]	; 0x64
   1eb7c:	cmp	r0, #0
   1eb80:	beq	1eba0 <__assert_fail@plt+0xd3f8>
   1eb84:	ldr	r1, [fp, #8]
   1eb88:	add	r0, r0, #4
   1eb8c:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1eb90:	mov	r4, #0
   1eb94:	cmp	r0, #0
   1eb98:	moveq	r4, #1
   1eb9c:	b	1eba4 <__assert_fail@plt+0xd3fc>
   1eba0:	mov	r4, #1
   1eba4:	mov	r0, r4
   1eba8:	sub	sp, fp, #28
   1ebac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebb0:	str	r4, [sp, #24]
   1ebb4:	mvn	r1, #-2147483648	; 0x80000000
   1ebb8:	sub	r1, r1, r5
   1ebbc:	mov	r4, #12
   1ebc0:	cmp	r1, r0
   1ebc4:	ble	1eba4 <__assert_fail@plt+0xd3fc>
   1ebc8:	add	r0, r0, #1
   1ebcc:	add	sl, r0, r5
   1ebd0:	cmn	sl, #-1073741823	; 0xc0000001
   1ebd4:	bhi	1eba4 <__assert_fail@plt+0xd3fc>
   1ebd8:	mov	r9, r0
   1ebdc:	ldr	r0, [r6, #8]
   1ebe0:	lsl	r1, sl, #2
   1ebe4:	bl	22ae8 <__assert_fail@plt+0x11340>
   1ebe8:	cmp	r0, #0
   1ebec:	beq	1eba4 <__assert_fail@plt+0xd3fc>
   1ebf0:	str	sl, [r6, #4]
   1ebf4:	str	r0, [r6, #8]
   1ebf8:	add	r0, r0, r5, lsl #2
   1ebfc:	lsl	r2, r9, #2
   1ec00:	mov	r1, #0
   1ec04:	bl	116ac <memset@plt>
   1ec08:	ldr	sl, [fp, #12]
   1ec0c:	ldr	r4, [sp, #24]
   1ec10:	b	1e888 <__assert_fail@plt+0xd0e0>
   1ec14:	mov	r4, r0
   1ec18:	b	1eba4 <__assert_fail@plt+0xd3fc>
   1ec1c:	push	{r4, r5, r6, r7, fp, lr}
   1ec20:	add	fp, sp, #16
   1ec24:	mov	r5, r2
   1ec28:	mov	r6, r1
   1ec2c:	mov	r4, r0
   1ec30:	ldr	r0, [r0, #12]
   1ec34:	ldr	r1, [r4, #16]
   1ec38:	cmp	r1, r0
   1ec3c:	beq	1ec70 <__assert_fail@plt+0xd4c8>
   1ec40:	mov	r0, #1
   1ec44:	mov	r1, #20
   1ec48:	bl	22a64 <__assert_fail@plt+0x112bc>
   1ec4c:	cmp	r0, #0
   1ec50:	ldrne	r1, [r4, #16]
   1ec54:	ldrne	r2, [r4, #20]
   1ec58:	strne	r0, [r2, r1, lsl #2]
   1ec5c:	strne	r6, [r0]
   1ec60:	strne	r5, [r0, #4]
   1ec64:	addne	r1, r1, #1
   1ec68:	strne	r1, [r4, #16]
   1ec6c:	pop	{r4, r5, r6, r7, fp, pc}
   1ec70:	mov	r1, #1
   1ec74:	orr	r7, r1, r0, lsl #1
   1ec78:	lsl	r1, r7, #2
   1ec7c:	ldr	r0, [r4, #20]
   1ec80:	bl	22ae8 <__assert_fail@plt+0x11340>
   1ec84:	cmp	r0, #0
   1ec88:	beq	1ec98 <__assert_fail@plt+0xd4f0>
   1ec8c:	str	r7, [r4, #12]
   1ec90:	str	r0, [r4, #20]
   1ec94:	b	1ec40 <__assert_fail@plt+0xd498>
   1ec98:	mov	r0, #0
   1ec9c:	pop	{r4, r5, r6, r7, fp, pc}
   1eca0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1eca4:	add	fp, sp, #24
   1eca8:	mov	r5, r3
   1ecac:	mov	r9, r2
   1ecb0:	mov	r8, r1
   1ecb4:	mov	r4, r0
   1ecb8:	ldr	r1, [r0, #108]	; 0x6c
   1ecbc:	ldr	r2, [r0, #112]	; 0x70
   1ecc0:	cmp	r1, r2
   1ecc4:	blt	1ed14 <__assert_fail@plt+0xd56c>
   1ecc8:	ldr	r0, [r4, #116]	; 0x74
   1eccc:	add	r1, r2, r2, lsl #1
   1ecd0:	lsl	r1, r1, #4
   1ecd4:	bl	22ae8 <__assert_fail@plt+0x11340>
   1ecd8:	cmp	r0, #0
   1ecdc:	beq	1ed8c <__assert_fail@plt+0xd5e4>
   1ece0:	str	r0, [r4, #116]	; 0x74
   1ece4:	ldr	r1, [r4, #108]	; 0x6c
   1ece8:	ldr	r2, [r4, #112]	; 0x70
   1ecec:	add	r1, r1, r1, lsl #1
   1ecf0:	add	r0, r0, r1, lsl #3
   1ecf4:	add	r1, r2, r2, lsl #1
   1ecf8:	lsl	r2, r1, #3
   1ecfc:	mov	r1, #0
   1ed00:	bl	116ac <memset@plt>
   1ed04:	ldr	r1, [r4, #108]	; 0x6c
   1ed08:	ldr	r0, [r4, #112]	; 0x70
   1ed0c:	lsl	r0, r0, #1
   1ed10:	str	r0, [r4, #112]	; 0x70
   1ed14:	ldr	r2, [fp, #8]
   1ed18:	cmp	r1, #1
   1ed1c:	blt	1ed40 <__assert_fail@plt+0xd598>
   1ed20:	ldr	r0, [r4, #116]	; 0x74
   1ed24:	sub	r3, r1, #1
   1ed28:	add	r3, r3, r3, lsl #1
   1ed2c:	add	r0, r0, r3, lsl #3
   1ed30:	ldr	r3, [r0, #4]
   1ed34:	cmp	r3, r9
   1ed38:	moveq	r3, #1
   1ed3c:	strbeq	r3, [r0, #20]
   1ed40:	mov	r0, #0
   1ed44:	cmp	r2, r5
   1ed48:	mov	r3, #0
   1ed4c:	mvneq	r3, #0
   1ed50:	ldr	r7, [r4, #116]	; 0x74
   1ed54:	add	r6, r1, r1, lsl #1
   1ed58:	str	r8, [r7, r6, lsl #3]!
   1ed5c:	str	r9, [r7, #4]
   1ed60:	str	r5, [r7, #8]
   1ed64:	str	r2, [r7, #12]
   1ed68:	str	r3, [r7, #16]
   1ed6c:	add	r1, r1, #1
   1ed70:	str	r1, [r4, #108]	; 0x6c
   1ed74:	strb	r0, [r7, #20]
   1ed78:	sub	r1, r2, r5
   1ed7c:	ldr	r2, [r4, #120]	; 0x78
   1ed80:	cmp	r2, r1
   1ed84:	strlt	r1, [r4, #120]	; 0x78
   1ed88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed8c:	ldr	r0, [r4, #116]	; 0x74
   1ed90:	bl	13140 <__assert_fail@plt+0x1998>
   1ed94:	mov	r0, #12
   1ed98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eda0:	add	fp, sp, #28
   1eda4:	sub	sp, sp, #20
   1eda8:	mov	r9, r3
   1edac:	mov	sl, r2
   1edb0:	mov	r4, r1
   1edb4:	mov	r7, r0
   1edb8:	ldr	r1, [r1, #4]
   1edbc:	add	r0, sp, #8
   1edc0:	bl	1b898 <__assert_fail@plt+0xa0f0>
   1edc4:	cmp	r0, #0
   1edc8:	bne	1ee8c <__assert_fail@plt+0xd6e4>
   1edcc:	ldr	r0, [r4, #4]
   1edd0:	cmp	r0, #1
   1edd4:	blt	1ee54 <__assert_fail@plt+0xd6ac>
   1edd8:	mov	r8, #0
   1eddc:	ldr	r0, [r4, #8]
   1ede0:	ldr	r5, [r0, r8, lsl #2]
   1ede4:	add	r0, r5, r5, lsl #1
   1ede8:	ldr	r1, [r7, #24]
   1edec:	add	r6, r1, r0, lsl #2
   1edf0:	mov	r0, r7
   1edf4:	mov	r1, r6
   1edf8:	mov	r2, sl
   1edfc:	mov	r3, r9
   1ee00:	bl	1e7d8 <__assert_fail@plt+0xd030>
   1ee04:	cmn	r0, #1
   1ee08:	beq	1ee30 <__assert_fail@plt+0xd688>
   1ee0c:	str	r9, [sp]
   1ee10:	mov	r0, r7
   1ee14:	add	r1, sp, #8
   1ee18:	mov	r2, r5
   1ee1c:	mov	r3, sl
   1ee20:	bl	1f2e4 <__assert_fail@plt+0xdb3c>
   1ee24:	cmp	r0, #0
   1ee28:	beq	1ee44 <__assert_fail@plt+0xd69c>
   1ee2c:	b	1ee7c <__assert_fail@plt+0xd6d4>
   1ee30:	add	r0, sp, #8
   1ee34:	mov	r1, r6
   1ee38:	bl	1bb24 <__assert_fail@plt+0xa37c>
   1ee3c:	cmp	r0, #0
   1ee40:	bne	1ee7c <__assert_fail@plt+0xd6d4>
   1ee44:	ldr	r0, [r4, #4]
   1ee48:	add	r8, r8, #1
   1ee4c:	cmp	r8, r0
   1ee50:	blt	1eddc <__assert_fail@plt+0xd634>
   1ee54:	ldr	r0, [r4, #8]
   1ee58:	bl	13140 <__assert_fail@plt+0x1998>
   1ee5c:	vldr	d16, [sp, #8]
   1ee60:	ldr	r0, [sp, #16]
   1ee64:	str	r0, [r4, #8]
   1ee68:	vstr	d16, [r4]
   1ee6c:	mov	r5, #0
   1ee70:	mov	r0, r5
   1ee74:	sub	sp, fp, #28
   1ee78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee7c:	mov	r5, r0
   1ee80:	ldr	r0, [sp, #16]
   1ee84:	bl	13140 <__assert_fail@plt+0x1998>
   1ee88:	b	1ee70 <__assert_fail@plt+0xd6c8>
   1ee8c:	mov	r5, r0
   1ee90:	b	1ee70 <__assert_fail@plt+0xd6c8>
   1ee94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee98:	add	fp, sp, #28
   1ee9c:	sub	sp, sp, #44	; 0x2c
   1eea0:	str	r3, [sp, #8]
   1eea4:	mov	sl, r1
   1eea8:	ldr	r6, [r0, #84]	; 0x54
   1eeac:	str	r0, [sp, #16]
   1eeb0:	str	r2, [sp, #24]
   1eeb4:	mov	r1, r2
   1eeb8:	bl	1e620 <__assert_fail@plt+0xce78>
   1eebc:	mov	r1, #0
   1eec0:	cmn	r0, #1
   1eec4:	beq	1f120 <__assert_fail@plt+0xd978>
   1eec8:	add	r1, r0, r0, lsl #1
   1eecc:	add	r7, sp, #28
   1eed0:	str	r6, [sp, #20]
   1eed4:	str	r1, [sp, #4]
   1eed8:	ldr	r0, [sp, #16]
   1eedc:	ldr	r0, [r0, #116]	; 0x74
   1eee0:	add	r0, r0, r1, lsl #3
   1eee4:	add	r0, r0, #12
   1eee8:	b	1ef04 <__assert_fail@plt+0xd75c>
   1eeec:	ldr	r6, [sp, #20]
   1eef0:	add	r7, sp, #28
   1eef4:	add	r0, r9, #24
   1eef8:	ldrb	r1, [r9, #8]
   1eefc:	cmp	r1, #0
   1ef00:	beq	1f114 <__assert_fail@plt+0xd96c>
   1ef04:	mov	r9, r0
   1ef08:	ldr	r1, [r0, #-12]
   1ef0c:	mov	r0, sl
   1ef10:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1ef14:	cmp	r0, #0
   1ef18:	beq	1eef4 <__assert_fail@plt+0xd74c>
   1ef1c:	ldmda	r9, {r0, r1}
   1ef20:	ldr	r2, [sp, #24]
   1ef24:	add	r1, r1, r2
   1ef28:	sub	r5, r1, r0
   1ef2c:	cmp	r5, r2
   1ef30:	bne	1efe4 <__assert_fail@plt+0xd83c>
   1ef34:	ldr	r0, [r6, #20]
   1ef38:	ldr	r1, [r9, #-12]
   1ef3c:	add	r1, r1, r1, lsl #1
   1ef40:	add	r0, r0, r1, lsl #2
   1ef44:	ldr	r0, [r0, #8]
   1ef48:	ldr	r4, [r0]
   1ef4c:	mov	r0, sl
   1ef50:	mov	r1, r4
   1ef54:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1ef58:	mov	r1, #4
   1ef5c:	cmp	r0, #0
   1ef60:	bne	1f0e0 <__assert_fail@plt+0xd938>
   1ef64:	mov	r0, r7
   1ef68:	mov	r1, r4
   1ef6c:	bl	1b638 <__assert_fail@plt+0x9e90>
   1ef70:	mov	r4, r7
   1ef74:	mov	r8, r0
   1ef78:	str	r0, [fp, #-32]	; 0xffffffe0
   1ef7c:	mov	r0, r6
   1ef80:	mov	r1, r7
   1ef84:	ldr	r2, [sp, #8]
   1ef88:	ldr	r3, [fp, #8]
   1ef8c:	bl	1ed9c <__assert_fail@plt+0xd5f4>
   1ef90:	mov	r7, r0
   1ef94:	mov	r0, sl
   1ef98:	mov	r1, r4
   1ef9c:	bl	1bb24 <__assert_fail@plt+0xa37c>
   1efa0:	mov	r4, r0
   1efa4:	ldr	r0, [sp, #36]	; 0x24
   1efa8:	bl	13140 <__assert_fail@plt+0x1998>
   1efac:	orr	r0, r7, r8
   1efb0:	orrs	r0, r0, r4
   1efb4:	mov	r1, #2
   1efb8:	beq	1f0e0 <__assert_fail@plt+0xd938>
   1efbc:	cmp	r7, #0
   1efc0:	movne	r4, r7
   1efc4:	cmp	r8, #0
   1efc8:	movne	r4, r8
   1efcc:	str	r4, [fp, #-32]	; 0xffffffe0
   1efd0:	mov	r1, #1
   1efd4:	str	r4, [sp, #12]
   1efd8:	cmp	r1, #0
   1efdc:	bne	1f0e8 <__assert_fail@plt+0xd940>
   1efe0:	b	1eeec <__assert_fail@plt+0xd744>
   1efe4:	ldr	r0, [sp, #16]
   1efe8:	ldr	r0, [r0, #100]	; 0x64
   1efec:	ldr	r0, [r0, r5, lsl #2]
   1eff0:	ldr	r1, [r9, #-12]
   1eff4:	ldr	r2, [r6, #12]
   1eff8:	ldr	r4, [r2, r1, lsl #2]
   1effc:	cmp	r0, #0
   1f000:	beq	1f078 <__assert_fail@plt+0xd8d0>
   1f004:	add	r8, r0, #4
   1f008:	mov	r0, r8
   1f00c:	mov	r1, r4
   1f010:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1f014:	mov	r1, #4
   1f018:	cmp	r0, #0
   1f01c:	bne	1f0e0 <__assert_fail@plt+0xd938>
   1f020:	mov	r0, r7
   1f024:	mov	r1, r8
   1f028:	bl	1bf28 <__assert_fail@plt+0xa780>
   1f02c:	mov	r8, r0
   1f030:	str	r0, [fp, #-32]	; 0xffffffe0
   1f034:	mov	r0, r7
   1f038:	mov	r1, r4
   1f03c:	bl	1bd3c <__assert_fail@plt+0xa594>
   1f040:	cmp	r8, #0
   1f044:	bne	1f050 <__assert_fail@plt+0xd8a8>
   1f048:	cmp	r0, #0
   1f04c:	bne	1f090 <__assert_fail@plt+0xd8e8>
   1f050:	ldr	r0, [sp, #36]	; 0x24
   1f054:	bl	13140 <__assert_fail@plt+0x1998>
   1f058:	cmp	r8, #0
   1f05c:	movweq	r8, #12
   1f060:	str	r8, [fp, #-32]	; 0xffffffe0
   1f064:	mov	r1, #1
   1f068:	str	r8, [sp, #12]
   1f06c:	cmp	r1, #0
   1f070:	bne	1f0e8 <__assert_fail@plt+0xd940>
   1f074:	b	1eeec <__assert_fail@plt+0xd744>
   1f078:	mov	r0, r7
   1f07c:	mov	r1, r4
   1f080:	bl	1b638 <__assert_fail@plt+0x9e90>
   1f084:	str	r0, [fp, #-32]	; 0xffffffe0
   1f088:	cmp	r0, #0
   1f08c:	bne	1f0fc <__assert_fail@plt+0xd954>
   1f090:	sub	r0, fp, #32
   1f094:	mov	r1, r6
   1f098:	mov	r2, r7
   1f09c:	bl	1f3f0 <__assert_fail@plt+0xdc48>
   1f0a0:	ldr	r4, [sp, #16]
   1f0a4:	ldr	r1, [r4, #100]	; 0x64
   1f0a8:	str	r0, [r1, r5, lsl #2]
   1f0ac:	ldr	r0, [sp, #36]	; 0x24
   1f0b0:	bl	13140 <__assert_fail@plt+0x1998>
   1f0b4:	ldr	r0, [r4, #100]	; 0x64
   1f0b8:	ldr	r0, [r0, r5, lsl #2]
   1f0bc:	clz	r0, r0
   1f0c0:	lsr	r1, r0, #5
   1f0c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f0c8:	cmp	r0, #0
   1f0cc:	mov	r2, r0
   1f0d0:	movwne	r2, #1
   1f0d4:	ands	r1, r1, r2
   1f0d8:	ldreq	r0, [sp, #12]
   1f0dc:	str	r0, [sp, #12]
   1f0e0:	cmp	r1, #0
   1f0e4:	beq	1eeec <__assert_fail@plt+0xd744>
   1f0e8:	cmp	r1, #4
   1f0ec:	ldr	r6, [sp, #20]
   1f0f0:	add	r7, sp, #28
   1f0f4:	beq	1eef4 <__assert_fail@plt+0xd74c>
   1f0f8:	b	1f104 <__assert_fail@plt+0xd95c>
   1f0fc:	mov	r1, #1
   1f100:	b	1f0dc <__assert_fail@plt+0xd934>
   1f104:	cmp	r1, #2
   1f108:	bne	1f11c <__assert_fail@plt+0xd974>
   1f10c:	ldr	r1, [sp, #4]
   1f110:	b	1eed8 <__assert_fail@plt+0xd730>
   1f114:	mov	r1, #0
   1f118:	b	1f120 <__assert_fail@plt+0xd978>
   1f11c:	ldr	r1, [sp, #12]
   1f120:	mov	r0, r1
   1f124:	sub	sp, fp, #28
   1f128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f12c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f130:	add	fp, sp, #28
   1f134:	sub	sp, sp, #36	; 0x24
   1f138:	str	r1, [sp, #12]
   1f13c:	mov	r7, r0
   1f140:	ldr	r4, [r0, #84]	; 0x54
   1f144:	mov	r9, #0
   1f148:	str	r9, [sp, #32]
   1f14c:	str	r9, [sp, #20]
   1f150:	str	r9, [sp, #16]
   1f154:	str	r9, [sp, #24]
   1f158:	ldr	r0, [r2, #4]
   1f15c:	cmp	r0, #1
   1f160:	blt	1f2c0 <__assert_fail@plt+0xdb18>
   1f164:	mov	r8, r3
   1f168:	mov	r5, r2
   1f16c:	mov	r6, #0
   1f170:	str	r3, [sp, #4]
   1f174:	str	r2, [sp, #8]
   1f178:	b	1f1b4 <__assert_fail@plt+0xda0c>
   1f17c:	cmp	r0, #0
   1f180:	mov	r7, r5
   1f184:	ldr	r5, [sp, #8]
   1f188:	beq	1f1d0 <__assert_fail@plt+0xda28>
   1f18c:	ldr	r0, [r4, #12]
   1f190:	ldr	r1, [r0, sl, lsl #2]
   1f194:	mov	r0, r8
   1f198:	bl	1bd3c <__assert_fail@plt+0xa594>
   1f19c:	cmp	r0, #0
   1f1a0:	beq	1f2d4 <__assert_fail@plt+0xdb2c>
   1f1a4:	add	r6, r6, #1
   1f1a8:	ldr	r0, [r5, #4]
   1f1ac:	cmp	r6, r0
   1f1b0:	bge	1f2bc <__assert_fail@plt+0xdb14>
   1f1b4:	ldr	r0, [r5, #8]
   1f1b8:	ldr	sl, [r0, r6, lsl #2]
   1f1bc:	ldr	r0, [r4]
   1f1c0:	add	r0, r0, sl, lsl #3
   1f1c4:	ldrb	r0, [r0, #6]
   1f1c8:	tst	r0, #16
   1f1cc:	bne	1f1f0 <__assert_fail@plt+0xda48>
   1f1d0:	ldr	r0, [r4]
   1f1d4:	add	r1, r0, sl, lsl #3
   1f1d8:	mov	r0, r7
   1f1dc:	ldr	r2, [sp, #12]
   1f1e0:	bl	1f8dc <__assert_fail@plt+0xe134>
   1f1e4:	cmp	r0, #0
   1f1e8:	bne	1f18c <__assert_fail@plt+0xd9e4>
   1f1ec:	b	1f1a4 <__assert_fail@plt+0xd9fc>
   1f1f0:	mov	r0, r4
   1f1f4:	mov	r1, sl
   1f1f8:	mov	r2, r7
   1f1fc:	mov	r5, r7
   1f200:	ldr	r7, [sp, #12]
   1f204:	mov	r3, r7
   1f208:	bl	1f600 <__assert_fail@plt+0xde58>
   1f20c:	cmp	r0, #2
   1f210:	blt	1f17c <__assert_fail@plt+0xd9d4>
   1f214:	add	r8, r0, r7
   1f218:	ldr	r0, [r5, #100]	; 0x64
   1f21c:	ldr	r0, [r0, r8, lsl #2]
   1f220:	ldr	r1, [r4, #12]
   1f224:	ldr	r2, [r1, sl, lsl #2]
   1f228:	mov	r1, #0
   1f22c:	str	r1, [sp, #20]
   1f230:	cmp	r0, #0
   1f234:	mov	r7, r5
   1f238:	add	r5, sp, #16
   1f23c:	beq	1f268 <__assert_fail@plt+0xdac0>
   1f240:	add	r1, r0, #4
   1f244:	mov	r0, r5
   1f248:	mov	r9, r5
   1f24c:	mov	r5, r2
   1f250:	bl	1bb24 <__assert_fail@plt+0xa37c>
   1f254:	mov	r2, r5
   1f258:	mov	r5, r9
   1f25c:	str	r0, [sp, #32]
   1f260:	cmp	r0, #0
   1f264:	bne	1f2dc <__assert_fail@plt+0xdb34>
   1f268:	mov	r0, r5
   1f26c:	mov	r1, r2
   1f270:	bl	1bd3c <__assert_fail@plt+0xa594>
   1f274:	cmp	r0, #0
   1f278:	beq	1f2d4 <__assert_fail@plt+0xdb2c>
   1f27c:	add	r0, sp, #32
   1f280:	mov	r1, r4
   1f284:	mov	r2, r5
   1f288:	bl	1f3f0 <__assert_fail@plt+0xdc48>
   1f28c:	ldr	r1, [r7, #100]	; 0x64
   1f290:	str	r0, [r1, r8, lsl #2]
   1f294:	ldr	r0, [r7, #100]	; 0x64
   1f298:	ldr	r0, [r0, r8, lsl #2]
   1f29c:	cmp	r0, #0
   1f2a0:	ldr	r8, [sp, #4]
   1f2a4:	ldr	r5, [sp, #8]
   1f2a8:	bne	1f18c <__assert_fail@plt+0xd9e4>
   1f2ac:	ldr	r9, [sp, #32]
   1f2b0:	cmp	r9, #0
   1f2b4:	beq	1f18c <__assert_fail@plt+0xd9e4>
   1f2b8:	b	1f2c0 <__assert_fail@plt+0xdb18>
   1f2bc:	mov	r9, #0
   1f2c0:	ldr	r0, [sp, #24]
   1f2c4:	bl	13140 <__assert_fail@plt+0x1998>
   1f2c8:	mov	r0, r9
   1f2cc:	sub	sp, fp, #28
   1f2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2d4:	mov	r9, #12
   1f2d8:	b	1f2c0 <__assert_fail@plt+0xdb18>
   1f2dc:	mov	r9, r0
   1f2e0:	b	1f2c0 <__assert_fail@plt+0xdb18>
   1f2e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f2e8:	add	fp, sp, #24
   1f2ec:	sub	sp, sp, #8
   1f2f0:	mov	r5, r3
   1f2f4:	mov	r7, r2
   1f2f8:	mov	r4, r1
   1f2fc:	mov	r6, r0
   1f300:	mov	r0, r1
   1f304:	mov	r1, r2
   1f308:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1f30c:	cmp	r0, #0
   1f310:	beq	1f320 <__assert_fail@plt+0xdb78>
   1f314:	mov	r0, #0
   1f318:	sub	sp, fp, #24
   1f31c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f320:	ldr	r8, [fp, #8]
   1f324:	b	1f370 <__assert_fail@plt+0xdbc8>
   1f328:	ldr	r0, [r0, #8]
   1f32c:	ldr	r2, [r0, #4]
   1f330:	str	r8, [sp]
   1f334:	mov	r0, r6
   1f338:	mov	r1, r4
   1f33c:	mov	r3, r5
   1f340:	bl	1f2e4 <__assert_fail@plt+0xdb3c>
   1f344:	cmp	r0, #0
   1f348:	bne	1f318 <__assert_fail@plt+0xdb70>
   1f34c:	ldr	r0, [r6, #20]
   1f350:	add	r0, r0, r7, lsl #2
   1f354:	ldr	r0, [r0, #8]
   1f358:	ldr	r7, [r0]
   1f35c:	mov	r0, r4
   1f360:	mov	r1, r7
   1f364:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   1f368:	cmp	r0, #0
   1f36c:	bne	1f314 <__assert_fail@plt+0xdb6c>
   1f370:	ldr	r0, [r6]
   1f374:	add	r1, r0, r7, lsl #3
   1f378:	ldrb	r1, [r1, #4]
   1f37c:	cmp	r1, r8
   1f380:	bne	1f390 <__assert_fail@plt+0xdbe8>
   1f384:	ldr	r0, [r0, r7, lsl #3]
   1f388:	cmp	r0, r5
   1f38c:	beq	1f3c8 <__assert_fail@plt+0xdc20>
   1f390:	mov	r0, r4
   1f394:	mov	r1, r7
   1f398:	bl	1bd3c <__assert_fail@plt+0xa594>
   1f39c:	cmp	r0, #0
   1f3a0:	beq	1f3e4 <__assert_fail@plt+0xdc3c>
   1f3a4:	ldr	r0, [r6, #20]
   1f3a8:	add	r7, r7, r7, lsl #1
   1f3ac:	add	r0, r0, r7, lsl #2
   1f3b0:	ldr	r1, [r0, #4]
   1f3b4:	cmp	r1, #2
   1f3b8:	beq	1f328 <__assert_fail@plt+0xdb80>
   1f3bc:	cmp	r1, #0
   1f3c0:	bne	1f34c <__assert_fail@plt+0xdba4>
   1f3c4:	b	1f314 <__assert_fail@plt+0xdb6c>
   1f3c8:	cmp	r8, #9
   1f3cc:	bne	1f314 <__assert_fail@plt+0xdb6c>
   1f3d0:	mov	r0, r4
   1f3d4:	mov	r1, r7
   1f3d8:	bl	1bd3c <__assert_fail@plt+0xa594>
   1f3dc:	cmp	r0, #0
   1f3e0:	bne	1f314 <__assert_fail@plt+0xdb6c>
   1f3e4:	mov	r0, #12
   1f3e8:	sub	sp, fp, #24
   1f3ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f3f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3f4:	add	fp, sp, #28
   1f3f8:	sub	sp, sp, #4
   1f3fc:	mov	r9, r1
   1f400:	ldr	r1, [r2, #4]
   1f404:	cmp	r1, #0
   1f408:	beq	1f4b4 <__assert_fail@plt+0xdd0c>
   1f40c:	mov	sl, r2
   1f410:	str	r0, [sp]
   1f414:	mov	r6, #0
   1f418:	mov	r0, r2
   1f41c:	mov	r1, #0
   1f420:	bl	1c110 <__assert_fail@plt+0xa968>
   1f424:	mov	r7, r0
   1f428:	ldr	r0, [r9, #32]
   1f42c:	ldr	r1, [r9, #68]	; 0x44
   1f430:	and	r1, r1, r7
   1f434:	add	r1, r1, r1, lsl #1
   1f438:	mov	r5, r0
   1f43c:	ldr	r2, [r5, r1, lsl #2]!
   1f440:	cmp	r2, #1
   1f444:	blt	1f48c <__assert_fail@plt+0xdce4>
   1f448:	add	r0, r0, r1, lsl #2
   1f44c:	ldr	r8, [r0, #8]
   1f450:	b	1f464 <__assert_fail@plt+0xdcbc>
   1f454:	ldr	r0, [r5]
   1f458:	add	r6, r6, #1
   1f45c:	cmp	r6, r0
   1f460:	bge	1f48c <__assert_fail@plt+0xdce4>
   1f464:	ldr	r4, [r8, r6, lsl #2]
   1f468:	ldr	r0, [r4]
   1f46c:	cmp	r7, r0
   1f470:	bne	1f454 <__assert_fail@plt+0xdcac>
   1f474:	add	r0, r4, #4
   1f478:	mov	r1, sl
   1f47c:	bl	1c13c <__assert_fail@plt+0xa994>
   1f480:	cmp	r0, #0
   1f484:	beq	1f454 <__assert_fail@plt+0xdcac>
   1f488:	b	1f4a8 <__assert_fail@plt+0xdd00>
   1f48c:	mov	r0, r9
   1f490:	mov	r1, sl
   1f494:	mov	r2, r7
   1f498:	bl	1f4d4 <__assert_fail@plt+0xdd2c>
   1f49c:	mov	r4, r0
   1f4a0:	cmp	r0, #0
   1f4a4:	beq	1f4c0 <__assert_fail@plt+0xdd18>
   1f4a8:	mov	r0, r4
   1f4ac:	sub	sp, fp, #28
   1f4b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4b4:	mov	r4, #0
   1f4b8:	str	r4, [r0]
   1f4bc:	b	1f4a8 <__assert_fail@plt+0xdd00>
   1f4c0:	mov	r0, #12
   1f4c4:	ldr	r1, [sp]
   1f4c8:	str	r0, [r1]
   1f4cc:	mov	r4, #0
   1f4d0:	b	1f4a8 <__assert_fail@plt+0xdd00>
   1f4d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f4d8:	add	fp, sp, #24
   1f4dc:	mov	r8, r2
   1f4e0:	mov	r7, r1
   1f4e4:	mov	r9, r0
   1f4e8:	mov	r0, #56	; 0x38
   1f4ec:	mov	r1, #1
   1f4f0:	bl	22a64 <__assert_fail@plt+0x112bc>
   1f4f4:	cmp	r0, #0
   1f4f8:	beq	1f5f4 <__assert_fail@plt+0xde4c>
   1f4fc:	mov	r4, r0
   1f500:	add	r5, r0, #4
   1f504:	mov	r0, r5
   1f508:	mov	r1, r7
   1f50c:	bl	1bf28 <__assert_fail@plt+0xa780>
   1f510:	cmp	r0, #0
   1f514:	bne	1f5e0 <__assert_fail@plt+0xde38>
   1f518:	str	r5, [r4, #40]	; 0x28
   1f51c:	ldr	r0, [r7, #4]
   1f520:	cmp	r0, #1
   1f524:	blt	1f5c0 <__assert_fail@plt+0xde18>
   1f528:	mov	r0, #0
   1f52c:	movw	ip, #65280	; 0xff00
   1f530:	movt	ip, #3
   1f534:	add	r2, ip, #255	; 0xff
   1f538:	mov	lr, #32
   1f53c:	b	1f564 <__assert_fail@plt+0xddbc>
   1f540:	ldr	r3, [r5]
   1f544:	tst	r3, ip
   1f548:	beq	1f554 <__assert_fail@plt+0xddac>
   1f54c:	orr	r1, r1, #128	; 0x80
   1f550:	strb	r1, [r4, #52]	; 0x34
   1f554:	ldr	r1, [r7, #4]
   1f558:	add	r0, r0, #1
   1f55c:	cmp	r0, r1
   1f560:	bge	1f5c0 <__assert_fail@plt+0xde18>
   1f564:	ldr	r1, [r7, #8]
   1f568:	ldr	r1, [r1, r0, lsl #2]
   1f56c:	ldr	r3, [r9]
   1f570:	add	r5, r3, r1, lsl #3
   1f574:	ldr	r3, [r5, #4]!
   1f578:	and	r1, r3, r2
   1f57c:	cmp	r1, #1
   1f580:	beq	1f554 <__assert_fail@plt+0xddac>
   1f584:	and	r1, lr, r3, lsr #15
   1f588:	ldrb	r6, [r4, #52]	; 0x34
   1f58c:	orr	r1, r6, r1
   1f590:	strb	r1, [r4, #52]	; 0x34
   1f594:	uxtb	r3, r3
   1f598:	cmp	r3, #12
   1f59c:	beq	1f54c <__assert_fail@plt+0xdda4>
   1f5a0:	cmp	r3, #4
   1f5a4:	beq	1f5b8 <__assert_fail@plt+0xde10>
   1f5a8:	cmp	r3, #2
   1f5ac:	bne	1f540 <__assert_fail@plt+0xdd98>
   1f5b0:	orr	r1, r1, #16
   1f5b4:	b	1f550 <__assert_fail@plt+0xdda8>
   1f5b8:	orr	r1, r1, #64	; 0x40
   1f5bc:	b	1f550 <__assert_fail@plt+0xdda8>
   1f5c0:	mov	r0, r9
   1f5c4:	mov	r1, r4
   1f5c8:	mov	r2, r8
   1f5cc:	bl	1c400 <__assert_fail@plt+0xac58>
   1f5d0:	cmp	r0, #0
   1f5d4:	bne	1f5ec <__assert_fail@plt+0xde44>
   1f5d8:	mov	r0, r4
   1f5dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f5e0:	mov	r0, r4
   1f5e4:	bl	13140 <__assert_fail@plt+0x1998>
   1f5e8:	b	1f5f4 <__assert_fail@plt+0xde4c>
   1f5ec:	mov	r0, r4
   1f5f0:	bl	16928 <__assert_fail@plt+0x5180>
   1f5f4:	mov	r4, #0
   1f5f8:	mov	r0, r4
   1f5fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f604:	add	fp, sp, #28
   1f608:	sub	sp, sp, #4
   1f60c:	mov	sl, r3
   1f610:	mov	r7, r2
   1f614:	mov	r5, r0
   1f618:	ldr	r6, [r0]
   1f61c:	add	r0, r6, r1, lsl #3
   1f620:	ldrb	r8, [r0, #4]
   1f624:	cmp	r8, #7
   1f628:	beq	1f7cc <__assert_fail@plt+0xe024>
   1f62c:	mov	r4, r1
   1f630:	mov	r0, r7
   1f634:	mov	r1, sl
   1f638:	bl	1a9bc <__assert_fail@plt+0x9214>
   1f63c:	mov	r9, r0
   1f640:	mov	r2, #0
   1f644:	cmp	r8, #5
   1f648:	bne	1f68c <__assert_fail@plt+0xdee4>
   1f64c:	cmp	r9, #2
   1f650:	blt	1f7b8 <__assert_fail@plt+0xe010>
   1f654:	ldr	r0, [r5, #128]	; 0x80
   1f658:	tst	r0, #64	; 0x40
   1f65c:	bne	1f670 <__assert_fail@plt+0xdec8>
   1f660:	ldr	r1, [r7, #4]
   1f664:	ldrb	r1, [r1, sl]
   1f668:	cmp	r1, #10
   1f66c:	beq	1f7b8 <__assert_fail@plt+0xe010>
   1f670:	tst	r0, #128	; 0x80
   1f674:	beq	1f7b4 <__assert_fail@plt+0xe00c>
   1f678:	ldr	r0, [r7, #4]
   1f67c:	ldrb	r0, [r0, sl]
   1f680:	cmp	r0, #0
   1f684:	movne	r2, r9
   1f688:	b	1f7b8 <__assert_fail@plt+0xe010>
   1f68c:	cmp	r8, #6
   1f690:	bne	1f7b8 <__assert_fail@plt+0xe010>
   1f694:	cmp	r9, #2
   1f698:	blt	1f7b8 <__assert_fail@plt+0xe010>
   1f69c:	ldr	r4, [r6, r4, lsl #3]
   1f6a0:	ldr	r0, [r4, #32]
   1f6a4:	cmp	r0, #0
   1f6a8:	bne	1f6c4 <__assert_fail@plt+0xdf1c>
   1f6ac:	ldr	r0, [r4, #36]	; 0x24
   1f6b0:	cmp	r0, #0
   1f6b4:	bne	1f6c4 <__assert_fail@plt+0xdf1c>
   1f6b8:	ldr	r0, [r4, #20]
   1f6bc:	cmp	r0, #0
   1f6c0:	beq	1f7c4 <__assert_fail@plt+0xe01c>
   1f6c4:	mov	r0, r7
   1f6c8:	mov	r1, sl
   1f6cc:	bl	18728 <__assert_fail@plt+0x6f80>
   1f6d0:	mov	r6, r0
   1f6d4:	ldr	r0, [r4, #20]
   1f6d8:	cmp	r0, #1
   1f6dc:	blt	1f704 <__assert_fail@plt+0xdf5c>
   1f6e0:	ldr	r0, [r4]
   1f6e4:	mov	r1, #0
   1f6e8:	ldr	r2, [r0, r1, lsl #2]
   1f6ec:	cmp	r6, r2
   1f6f0:	beq	1f780 <__assert_fail@plt+0xdfd8>
   1f6f4:	add	r1, r1, #1
   1f6f8:	ldr	r2, [r4, #20]
   1f6fc:	cmp	r1, r2
   1f700:	blt	1f6e8 <__assert_fail@plt+0xdf40>
   1f704:	ldr	r0, [r4, #36]	; 0x24
   1f708:	cmp	r0, #1
   1f70c:	blt	1f73c <__assert_fail@plt+0xdf94>
   1f710:	mov	r5, #0
   1f714:	ldr	r0, [r4, #12]
   1f718:	ldr	r1, [r0, r5, lsl #2]
   1f71c:	mov	r0, r6
   1f720:	bl	11448 <iswctype@plt>
   1f724:	cmp	r0, #0
   1f728:	bne	1f780 <__assert_fail@plt+0xdfd8>
   1f72c:	add	r5, r5, #1
   1f730:	ldr	r0, [r4, #36]	; 0x24
   1f734:	cmp	r5, r0
   1f738:	blt	1f714 <__assert_fail@plt+0xdf6c>
   1f73c:	ldr	r0, [r4, #32]
   1f740:	cmp	r0, #1
   1f744:	blt	1f788 <__assert_fail@plt+0xdfe0>
   1f748:	ldr	r0, [r4, #4]
   1f74c:	mov	r1, #0
   1f750:	b	1f764 <__assert_fail@plt+0xdfbc>
   1f754:	add	r1, r1, #1
   1f758:	ldr	r2, [r4, #32]
   1f75c:	cmp	r1, r2
   1f760:	bge	1f788 <__assert_fail@plt+0xdfe0>
   1f764:	ldr	r2, [r0, r1, lsl #2]
   1f768:	cmp	r2, r6
   1f76c:	bhi	1f754 <__assert_fail@plt+0xdfac>
   1f770:	ldr	r2, [r4, #8]
   1f774:	ldr	r2, [r2, r1, lsl #2]
   1f778:	cmp	r6, r2
   1f77c:	bhi	1f754 <__assert_fail@plt+0xdfac>
   1f780:	mov	r0, r9
   1f784:	b	1f78c <__assert_fail@plt+0xdfe4>
   1f788:	mov	r0, #0
   1f78c:	ldrb	r1, [r4, #16]
   1f790:	tst	r1, #1
   1f794:	mov	r2, #0
   1f798:	bne	1f7a4 <__assert_fail@plt+0xdffc>
   1f79c:	mov	r2, r0
   1f7a0:	b	1f7b8 <__assert_fail@plt+0xe010>
   1f7a4:	cmp	r0, #0
   1f7a8:	bgt	1f7b8 <__assert_fail@plt+0xe010>
   1f7ac:	cmp	r9, #1
   1f7b0:	movle	r9, #1
   1f7b4:	mov	r2, r9
   1f7b8:	mov	r0, r2
   1f7bc:	sub	sp, fp, #28
   1f7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7c4:	mov	r6, #0
   1f7c8:	b	1f6d4 <__assert_fail@plt+0xdf2c>
   1f7cc:	ldr	r0, [r7, #4]
   1f7d0:	ldrb	r5, [r0, sl]
   1f7d4:	mov	r2, #0
   1f7d8:	cmp	r5, #194	; 0xc2
   1f7dc:	bcc	1f7b8 <__assert_fail@plt+0xe010>
   1f7e0:	ldr	r1, [r7, #48]	; 0x30
   1f7e4:	add	r2, sl, #2
   1f7e8:	cmp	r2, r1
   1f7ec:	ble	1f7f8 <__assert_fail@plt+0xe050>
   1f7f0:	mov	r2, #0
   1f7f4:	b	1f7b8 <__assert_fail@plt+0xe010>
   1f7f8:	add	r0, sl, r0
   1f7fc:	ldrb	r3, [r0, #1]
   1f800:	cmp	r5, #223	; 0xdf
   1f804:	bhi	1f828 <__assert_fail@plt+0xe080>
   1f808:	mov	r0, #0
   1f80c:	cmp	r3, #192	; 0xc0
   1f810:	movwcc	r0, #1
   1f814:	lsl	r2, r0, #1
   1f818:	sxtb	r0, r3
   1f81c:	cmn	r0, #1
   1f820:	movwgt	r2, #0
   1f824:	b	1f7b8 <__assert_fail@plt+0xe010>
   1f828:	cmp	r5, #239	; 0xef
   1f82c:	bhi	1f848 <__assert_fail@plt+0xe0a0>
   1f830:	mov	r2, #3
   1f834:	cmp	r5, #224	; 0xe0
   1f838:	bne	1f8a4 <__assert_fail@plt+0xe0fc>
   1f83c:	cmp	r3, #160	; 0xa0
   1f840:	bcc	1f7f0 <__assert_fail@plt+0xe048>
   1f844:	b	1f8a4 <__assert_fail@plt+0xe0fc>
   1f848:	cmp	r5, #247	; 0xf7
   1f84c:	bhi	1f868 <__assert_fail@plt+0xe0c0>
   1f850:	mov	r2, #4
   1f854:	cmp	r5, #240	; 0xf0
   1f858:	bne	1f8a4 <__assert_fail@plt+0xe0fc>
   1f85c:	cmp	r3, #144	; 0x90
   1f860:	bcc	1f7f0 <__assert_fail@plt+0xe048>
   1f864:	b	1f8a4 <__assert_fail@plt+0xe0fc>
   1f868:	cmp	r5, #251	; 0xfb
   1f86c:	bhi	1f888 <__assert_fail@plt+0xe0e0>
   1f870:	mov	r2, #5
   1f874:	cmp	r5, #248	; 0xf8
   1f878:	bne	1f8a4 <__assert_fail@plt+0xe0fc>
   1f87c:	cmp	r3, #136	; 0x88
   1f880:	bcc	1f7f0 <__assert_fail@plt+0xe048>
   1f884:	b	1f8a4 <__assert_fail@plt+0xe0fc>
   1f888:	cmp	r5, #253	; 0xfd
   1f88c:	bhi	1f7f0 <__assert_fail@plt+0xe048>
   1f890:	mov	r2, #6
   1f894:	cmp	r5, #252	; 0xfc
   1f898:	bne	1f8a4 <__assert_fail@plt+0xe0fc>
   1f89c:	cmp	r3, #132	; 0x84
   1f8a0:	bcc	1f7f0 <__assert_fail@plt+0xe048>
   1f8a4:	add	r3, r2, sl
   1f8a8:	cmp	r3, r1
   1f8ac:	bgt	1f7f0 <__assert_fail@plt+0xe048>
   1f8b0:	mov	r1, #1
   1f8b4:	ldrb	r3, [r0, r1]
   1f8b8:	sxtb	r7, r3
   1f8bc:	cmn	r7, #1
   1f8c0:	bgt	1f7f0 <__assert_fail@plt+0xe048>
   1f8c4:	cmp	r3, #191	; 0xbf
   1f8c8:	bhi	1f7f0 <__assert_fail@plt+0xe048>
   1f8cc:	add	r1, r1, #1
   1f8d0:	cmp	r2, r1
   1f8d4:	bne	1f8b4 <__assert_fail@plt+0xe10c>
   1f8d8:	b	1f7b8 <__assert_fail@plt+0xe010>
   1f8dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f8e0:	add	fp, sp, #24
   1f8e4:	mov	r6, r0
   1f8e8:	ldr	r7, [r1, #4]
   1f8ec:	mvn	r0, #0
   1f8f0:	uxtab	r0, r0, r7
   1f8f4:	mov	r8, #0
   1f8f8:	cmp	r0, #6
   1f8fc:	bhi	1fa08 <__assert_fail@plt+0xe260>
   1f900:	mov	r5, r2
   1f904:	ldr	r2, [r6, #4]
   1f908:	ldrb	r2, [r2, r5]
   1f90c:	sxtb	r3, r2
   1f910:	add	r4, pc, #0
   1f914:	ldr	pc, [r4, r0, lsl #2]
   1f918:	andeq	pc, r1, r4, lsr r9	; <UNPREDICTABLE>
   1f91c:	andeq	pc, r1, r8, lsl #20
   1f920:	andeq	pc, r1, r8, asr #18
   1f924:	andeq	pc, r1, r8, lsl #20
   1f928:	andeq	pc, r1, r8, ror #18
   1f92c:	andeq	pc, r1, r8, lsl #20
   1f930:	andeq	pc, r1, r0, ror #18
   1f934:	ldrb	r0, [r1]
   1f938:	uxtb	r1, r3
   1f93c:	cmp	r0, r1
   1f940:	beq	1f99c <__assert_fail@plt+0xe1f4>
   1f944:	b	1fa08 <__assert_fail@plt+0xe260>
   1f948:	ldr	r0, [r1]
   1f94c:	mov	r1, r2
   1f950:	bl	1d8ac <__assert_fail@plt+0xc104>
   1f954:	cmp	r0, #0
   1f958:	bne	1f99c <__assert_fail@plt+0xe1f4>
   1f95c:	b	1fa08 <__assert_fail@plt+0xe260>
   1f960:	cmp	r3, #0
   1f964:	bmi	1fa08 <__assert_fail@plt+0xe260>
   1f968:	cmp	r2, #0
   1f96c:	beq	1f98c <__assert_fail@plt+0xe1e4>
   1f970:	cmp	r2, #10
   1f974:	bne	1f99c <__assert_fail@plt+0xe1f4>
   1f978:	ldr	r0, [r6, #84]	; 0x54
   1f97c:	ldrb	r0, [r0, #128]	; 0x80
   1f980:	tst	r0, #64	; 0x40
   1f984:	bne	1f99c <__assert_fail@plt+0xe1f4>
   1f988:	b	1fa08 <__assert_fail@plt+0xe260>
   1f98c:	ldr	r0, [r6, #84]	; 0x54
   1f990:	ldrb	r0, [r0, #128]	; 0x80
   1f994:	tst	r0, #128	; 0x80
   1f998:	bne	1fa08 <__assert_fail@plt+0xe260>
   1f99c:	movw	r0, #65280	; 0xff00
   1f9a0:	movt	r0, #3
   1f9a4:	tst	r7, r0
   1f9a8:	beq	1fa04 <__assert_fail@plt+0xe25c>
   1f9ac:	ldr	r2, [r6, #88]	; 0x58
   1f9b0:	mov	r0, r6
   1f9b4:	mov	r1, r5
   1f9b8:	bl	1d730 <__assert_fail@plt+0xbf88>
   1f9bc:	and	r1, r0, #1
   1f9c0:	tst	r7, #1024	; 0x400
   1f9c4:	beq	1f9d0 <__assert_fail@plt+0xe228>
   1f9c8:	cmp	r1, #0
   1f9cc:	beq	1fa08 <__assert_fail@plt+0xe260>
   1f9d0:	tst	r7, #2048	; 0x800
   1f9d4:	cmpne	r1, #0
   1f9d8:	bne	1fa08 <__assert_fail@plt+0xe260>
   1f9dc:	tst	r7, #8192	; 0x2000
   1f9e0:	beq	1f9ec <__assert_fail@plt+0xe244>
   1f9e4:	ands	r1, r0, #2
   1f9e8:	beq	1fa08 <__assert_fail@plt+0xe260>
   1f9ec:	uxth	r1, r7
   1f9f0:	mov	r2, #1
   1f9f4:	eor	r1, r2, r1, lsr #15
   1f9f8:	and	r0, r0, #8
   1f9fc:	orr	r0, r1, r0, lsr #3
   1fa00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fa04:	mov	r8, #1
   1fa08:	mov	r0, r8
   1fa0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fa10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa14:	add	fp, sp, #28
   1fa18:	sub	sp, sp, #20
   1fa1c:	mov	r5, r0
   1fa20:	ldr	r0, [r1, #8]
   1fa24:	cmp	r0, #1
   1fa28:	blt	1fbd4 <__assert_fail@plt+0xe42c>
   1fa2c:	mov	r4, r1
   1fa30:	ldr	sl, [r5, #84]	; 0x54
   1fa34:	mov	r8, #0
   1fa38:	movw	r9, #65280	; 0xff00
   1fa3c:	movt	r9, #3
   1fa40:	b	1fa54 <__assert_fail@plt+0xe2ac>
   1fa44:	add	r8, r8, #1
   1fa48:	ldr	r0, [r4, #8]
   1fa4c:	cmp	r8, r0
   1fa50:	bge	1fbd4 <__assert_fail@plt+0xe42c>
   1fa54:	ldr	r0, [r4, #12]
   1fa58:	ldr	r7, [r0, r8, lsl #2]
   1fa5c:	ldr	r0, [sl]
   1fa60:	add	r0, r0, r7, lsl #3
   1fa64:	ldr	r6, [r0, #4]
   1fa68:	tst	r6, #1048576	; 0x100000
   1fa6c:	beq	1fa44 <__assert_fail@plt+0xe29c>
   1fa70:	tst	r6, r9
   1fa74:	beq	1fac8 <__assert_fail@plt+0xe320>
   1fa78:	ldr	r1, [r5, #40]	; 0x28
   1fa7c:	ldr	r2, [r5, #88]	; 0x58
   1fa80:	mov	r0, r5
   1fa84:	bl	1d730 <__assert_fail@plt+0xbf88>
   1fa88:	and	r1, r0, #1
   1fa8c:	tst	r6, #1024	; 0x400
   1fa90:	beq	1fa9c <__assert_fail@plt+0xe2f4>
   1fa94:	cmp	r1, #0
   1fa98:	beq	1fa44 <__assert_fail@plt+0xe29c>
   1fa9c:	tst	r6, #2048	; 0x800
   1faa0:	cmpne	r1, #0
   1faa4:	bne	1fa44 <__assert_fail@plt+0xe29c>
   1faa8:	tst	r6, #8192	; 0x2000
   1faac:	beq	1fab8 <__assert_fail@plt+0xe310>
   1fab0:	ands	r1, r0, #2
   1fab4:	beq	1fa44 <__assert_fail@plt+0xe29c>
   1fab8:	tst	r6, #32768	; 0x8000
   1fabc:	beq	1fac8 <__assert_fail@plt+0xe320>
   1fac0:	ands	r0, r0, #8
   1fac4:	beq	1fa44 <__assert_fail@plt+0xe29c>
   1fac8:	ldr	r3, [r5, #40]	; 0x28
   1facc:	mov	r0, sl
   1fad0:	mov	r1, r7
   1fad4:	mov	r2, r5
   1fad8:	bl	1f600 <__assert_fail@plt+0xde58>
   1fadc:	cmp	r0, #0
   1fae0:	beq	1fa44 <__assert_fail@plt+0xe29c>
   1fae4:	ldr	r1, [r5, #40]	; 0x28
   1fae8:	ldr	r2, [r5, #120]	; 0x78
   1faec:	cmp	r2, r0
   1faf0:	movlt	r2, r0
   1faf4:	str	r2, [r5, #120]	; 0x78
   1faf8:	add	r6, r1, r0
   1fafc:	mov	r0, r5
   1fb00:	mov	r1, r6
   1fb04:	bl	1e6ac <__assert_fail@plt+0xcf04>
   1fb08:	str	r0, [sp, #16]
   1fb0c:	cmp	r0, #0
   1fb10:	bne	1fbcc <__assert_fail@plt+0xe424>
   1fb14:	ldr	r0, [r5, #100]	; 0x64
   1fb18:	ldr	r9, [r0, r6, lsl #2]
   1fb1c:	ldr	r0, [sl, #12]
   1fb20:	ldr	r1, [sl, #24]
   1fb24:	ldr	r0, [r0, r7, lsl #2]
   1fb28:	add	r0, r0, r0, lsl #1
   1fb2c:	add	r2, r1, r0, lsl #2
   1fb30:	cmp	r9, #0
   1fb34:	beq	1fb58 <__assert_fail@plt+0xe3b0>
   1fb38:	ldr	r1, [r9, #40]	; 0x28
   1fb3c:	mov	r7, sp
   1fb40:	mov	r0, r7
   1fb44:	bl	1e3ec <__assert_fail@plt+0xcc44>
   1fb48:	str	r0, [sp, #16]
   1fb4c:	cmp	r0, #0
   1fb50:	beq	1fb6c <__assert_fail@plt+0xe3c4>
   1fb54:	b	1fbcc <__assert_fail@plt+0xe424>
   1fb58:	vldr	d16, [r2]
   1fb5c:	ldr	r0, [r2, #8]
   1fb60:	str	r0, [sp, #8]
   1fb64:	vstr	d16, [sp]
   1fb68:	mov	r7, sp
   1fb6c:	ldr	r2, [r5, #88]	; 0x58
   1fb70:	sub	r1, r6, #1
   1fb74:	mov	r0, r5
   1fb78:	bl	1d730 <__assert_fail@plt+0xbf88>
   1fb7c:	mov	r3, r0
   1fb80:	add	r0, sp, #16
   1fb84:	mov	r1, sl
   1fb88:	mov	r2, r7
   1fb8c:	bl	1c014 <__assert_fail@plt+0xa86c>
   1fb90:	ldr	r1, [r5, #100]	; 0x64
   1fb94:	str	r0, [r1, r6, lsl #2]
   1fb98:	cmp	r9, #0
   1fb9c:	beq	1fba8 <__assert_fail@plt+0xe400>
   1fba0:	ldr	r0, [sp, #8]
   1fba4:	bl	13140 <__assert_fail@plt+0x1998>
   1fba8:	ldr	r0, [r5, #100]	; 0x64
   1fbac:	ldr	r0, [r0, r6, lsl #2]
   1fbb0:	cmp	r0, #0
   1fbb4:	movw	r9, #65280	; 0xff00
   1fbb8:	movt	r9, #3
   1fbbc:	bne	1fa44 <__assert_fail@plt+0xe29c>
   1fbc0:	ldr	r0, [sp, #16]
   1fbc4:	cmp	r0, #0
   1fbc8:	beq	1fa44 <__assert_fail@plt+0xe29c>
   1fbcc:	sub	sp, fp, #28
   1fbd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbd4:	mov	r0, #0
   1fbd8:	sub	sp, fp, #28
   1fbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbe4:	add	fp, sp, #28
   1fbe8:	sub	sp, sp, #68	; 0x44
   1fbec:	sub	sp, sp, #14336	; 0x3800
   1fbf0:	mov	r4, r1
   1fbf4:	mov	r7, r0
   1fbf8:	mov	r6, #0
   1fbfc:	str	r6, [r1, #44]	; 0x2c
   1fc00:	str	r6, [r1, #48]	; 0x30
   1fc04:	sub	lr, fp, #4096	; 0x1000
   1fc08:	sub	r2, lr, #2128	; 0x850
   1fc0c:	add	r3, sp, #16
   1fc10:	bl	200b0 <__assert_fail@plt+0xe908>
   1fc14:	cmp	r0, #0
   1fc18:	ble	1ffb8 <__assert_fail@plt+0xe810>
   1fc1c:	mov	r5, r0
   1fc20:	str	r4, [sp, #4]
   1fc24:	add	r1, r0, #1
   1fc28:	sub	r0, fp, #3120	; 0xc30
   1fc2c:	bl	1b898 <__assert_fail@plt+0xa0f0>
   1fc30:	str	r0, [fp, #-36]	; 0xffffffdc
   1fc34:	cmp	r0, #0
   1fc38:	bne	1ff84 <__assert_fail@plt+0xe7dc>
   1fc3c:	sub	r0, fp, #3152	; 0xc50
   1fc40:	bl	2059c <__assert_fail@plt+0xedf4>
   1fc44:	sub	sl, fp, #3120	; 0xc30
   1fc48:	sub	lr, fp, #3072	; 0xc00
   1fc4c:	sub	r6, lr, #36	; 0x24
   1fc50:	mov	r9, #0
   1fc54:	mov	r0, #0
   1fc58:	str	r0, [sp, #8]
   1fc5c:	str	r5, [sp, #12]
   1fc60:	b	1fca8 <__assert_fail@plt+0xe500>
   1fc64:	ldrsb	r0, [r8, #52]	; 0x34
   1fc68:	cmn	r0, #1
   1fc6c:	ble	1fd74 <__assert_fail@plt+0xe5cc>
   1fc70:	sub	lr, fp, #2048	; 0x800
   1fc74:	sub	r0, lr, #36	; 0x24
   1fc78:	str	r8, [r0, r9, lsl #2]
   1fc7c:	sub	lr, fp, #1024	; 0x400
   1fc80:	sub	r0, lr, #36	; 0x24
   1fc84:	ldr	r0, [r0, r9, lsl #2]
   1fc88:	str	r0, [r6, r9, lsl #2]
   1fc8c:	add	r0, sp, #16
   1fc90:	add	r1, r0, r9, lsl #5
   1fc94:	sub	r0, fp, #3152	; 0xc50
   1fc98:	bl	205ac <__assert_fail@plt+0xee04>
   1fc9c:	add	r9, r9, #1
   1fca0:	cmp	r9, r5
   1fca4:	beq	1fdfc <__assert_fail@plt+0xe654>
   1fca8:	mov	r0, #0
   1fcac:	str	r0, [fp, #-3116]	; 0xfffff3d4
   1fcb0:	add	r0, r9, r9, lsl #1
   1fcb4:	sub	lr, fp, #4096	; 0x1000
   1fcb8:	sub	r1, lr, #2128	; 0x850
   1fcbc:	add	r0, r1, r0, lsl #2
   1fcc0:	mov	r4, r0
   1fcc4:	ldr	r1, [r4, #4]!
   1fcc8:	cmp	r1, #1
   1fccc:	blt	1fd38 <__assert_fail@plt+0xe590>
   1fcd0:	ldr	r5, [r0, #8]
   1fcd4:	mov	r6, #0
   1fcd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1fcdc:	b	1fcf0 <__assert_fail@plt+0xe548>
   1fce0:	ldr	r0, [r4]
   1fce4:	add	r6, r6, #1
   1fce8:	cmp	r6, r0
   1fcec:	bge	1fd28 <__assert_fail@plt+0xe580>
   1fcf0:	ldr	r0, [r5, r6, lsl #2]
   1fcf4:	ldr	r2, [r7, #12]
   1fcf8:	ldr	r0, [r2, r0, lsl #2]
   1fcfc:	cmn	r0, #1
   1fd00:	beq	1fce0 <__assert_fail@plt+0xe538>
   1fd04:	ldr	r1, [r7, #24]
   1fd08:	add	r0, r0, r0, lsl #1
   1fd0c:	add	r1, r1, r0, lsl #2
   1fd10:	mov	r0, sl
   1fd14:	bl	1bb24 <__assert_fail@plt+0xa37c>
   1fd18:	mov	r1, #0
   1fd1c:	cmp	r0, #0
   1fd20:	beq	1fce0 <__assert_fail@plt+0xe538>
   1fd24:	b	1ff7c <__assert_fail@plt+0xe7d4>
   1fd28:	str	r1, [fp, #-36]	; 0xffffffdc
   1fd2c:	ldr	r5, [sp, #12]
   1fd30:	sub	lr, fp, #3072	; 0xc00
   1fd34:	sub	r6, lr, #36	; 0x24
   1fd38:	sub	r0, fp, #36	; 0x24
   1fd3c:	mov	r1, r7
   1fd40:	mov	r2, sl
   1fd44:	mov	r3, #0
   1fd48:	bl	1c014 <__assert_fail@plt+0xa86c>
   1fd4c:	mov	r8, r0
   1fd50:	sub	lr, fp, #1024	; 0x400
   1fd54:	sub	r0, lr, #36	; 0x24
   1fd58:	str	r8, [r0, r9, lsl #2]
   1fd5c:	cmp	r8, #0
   1fd60:	bne	1fc64 <__assert_fail@plt+0xe4bc>
   1fd64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fd68:	cmp	r0, #0
   1fd6c:	beq	1fc64 <__assert_fail@plt+0xe4bc>
   1fd70:	b	1ff84 <__assert_fail@plt+0xe7dc>
   1fd74:	sub	r0, fp, #36	; 0x24
   1fd78:	mov	r1, r7
   1fd7c:	mov	r2, sl
   1fd80:	mov	r3, #1
   1fd84:	bl	1c014 <__assert_fail@plt+0xa86c>
   1fd88:	sub	lr, fp, #2048	; 0x800
   1fd8c:	sub	r1, lr, #36	; 0x24
   1fd90:	str	r0, [r1, r9, lsl #2]
   1fd94:	cmp	r0, #0
   1fd98:	bne	1fda8 <__assert_fail@plt+0xe600>
   1fd9c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1fda0:	cmp	r1, #0
   1fda4:	bne	1ff84 <__assert_fail@plt+0xe7dc>
   1fda8:	cmp	r8, r0
   1fdac:	beq	1fdcc <__assert_fail@plt+0xe624>
   1fdb0:	ldr	r0, [r7, #92]	; 0x5c
   1fdb4:	cmp	r0, #1
   1fdb8:	mov	r0, #0
   1fdbc:	movwgt	r0, #1
   1fdc0:	ldr	r1, [sp, #8]
   1fdc4:	orr	r1, r1, r0
   1fdc8:	str	r1, [sp, #8]
   1fdcc:	sub	r0, fp, #36	; 0x24
   1fdd0:	mov	r1, r7
   1fdd4:	mov	r2, sl
   1fdd8:	mov	r3, #2
   1fddc:	bl	1c014 <__assert_fail@plt+0xa86c>
   1fde0:	str	r0, [r6, r9, lsl #2]
   1fde4:	cmp	r0, #0
   1fde8:	bne	1fc8c <__assert_fail@plt+0xe4e4>
   1fdec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fdf0:	cmp	r0, #0
   1fdf4:	beq	1fc8c <__assert_fail@plt+0xe4e4>
   1fdf8:	b	1ff84 <__assert_fail@plt+0xe7dc>
   1fdfc:	ldr	r0, [sp, #8]
   1fe00:	tst	r0, #1
   1fe04:	bne	1ffdc <__assert_fail@plt+0xe834>
   1fe08:	mov	r0, #4
   1fe0c:	mov	r1, #256	; 0x100
   1fe10:	bl	22a64 <__assert_fail@plt+0x112bc>
   1fe14:	mov	r8, r0
   1fe18:	ldr	r0, [sp, #4]
   1fe1c:	str	r8, [r0, #44]	; 0x2c
   1fe20:	cmp	r8, #0
   1fe24:	beq	1ff84 <__assert_fail@plt+0xe7dc>
   1fe28:	mov	r0, #0
   1fe2c:	mov	r1, #0
   1fe30:	add	r5, sp, #16
   1fe34:	mov	r9, r5
   1fe38:	b	1fe4c <__assert_fail@plt+0xe6a4>
   1fe3c:	add	r9, r9, #4
   1fe40:	add	r1, r1, #1
   1fe44:	cmp	r1, #8
   1fe48:	beq	1fed0 <__assert_fail@plt+0xe728>
   1fe4c:	sub	r2, fp, #3152	; 0xc50
   1fe50:	ldr	r2, [r2, r1, lsl #2]
   1fe54:	cmp	r2, #0
   1fe58:	beq	1fe3c <__assert_fail@plt+0xe694>
   1fe5c:	add	r3, r7, r1, lsl #2
   1fe60:	add	ip, r3, #96	; 0x60
   1fe64:	lsl	r4, r1, #5
   1fe68:	mov	r6, #1
   1fe6c:	tst	r2, #1
   1fe70:	bne	1fe90 <__assert_fail@plt+0xe6e8>
   1fe74:	add	r4, r4, #1
   1fe78:	lsr	r3, r2, #1
   1fe7c:	lsl	r6, r6, #1
   1fe80:	cmp	r0, r2, lsr #1
   1fe84:	mov	r2, r3
   1fe88:	bne	1fe6c <__assert_fail@plt+0xe6c4>
   1fe8c:	b	1fe3c <__assert_fail@plt+0xe694>
   1fe90:	mov	lr, #0
   1fe94:	ldr	r3, [r9, lr, lsl #3]
   1fe98:	add	lr, lr, #4
   1fe9c:	tst	r3, r6
   1fea0:	beq	1fe94 <__assert_fail@plt+0xe6ec>
   1fea4:	ldr	r3, [ip]
   1fea8:	tst	r3, r6
   1feac:	sub	r3, fp, #2048	; 0x800
   1feb0:	sub	r3, r3, #36	; 0x24
   1feb4:	sub	r5, fp, #1024	; 0x400
   1feb8:	sub	r5, r5, #36	; 0x24
   1febc:	moveq	r3, r5
   1fec0:	add	r3, r3, lr
   1fec4:	ldr	r3, [r3, #-4]
   1fec8:	str	r3, [r8, r4, lsl #2]
   1fecc:	b	1fe74 <__assert_fail@plt+0xe6cc>
   1fed0:	sub	lr, fp, #3072	; 0xc00
   1fed4:	sub	r6, lr, #36	; 0x24
   1fed8:	sub	r0, fp, #3152	; 0xc50
   1fedc:	mov	r1, #10
   1fee0:	bl	1d8ac <__assert_fail@plt+0xc104>
   1fee4:	cmp	r0, #0
   1fee8:	beq	1ff3c <__assert_fail@plt+0xe794>
   1feec:	ldr	r0, [sp, #12]
   1fef0:	cmp	r0, #1
   1fef4:	blt	1ff3c <__assert_fail@plt+0xe794>
   1fef8:	add	r5, sp, #16
   1fefc:	ldr	r4, [sp, #12]
   1ff00:	mov	r0, r5
   1ff04:	mov	r1, #10
   1ff08:	bl	1d8ac <__assert_fail@plt+0xc104>
   1ff0c:	cmp	r0, #0
   1ff10:	bne	1ff28 <__assert_fail@plt+0xe780>
   1ff14:	add	r5, r5, #32
   1ff18:	subs	r4, r4, #1
   1ff1c:	add	r6, r6, #4
   1ff20:	bne	1ff00 <__assert_fail@plt+0xe758>
   1ff24:	b	1ff3c <__assert_fail@plt+0xe794>
   1ff28:	ldr	r0, [r6]
   1ff2c:	str	r0, [r8, #40]	; 0x28
   1ff30:	ldr	r1, [sp, #8]
   1ff34:	tst	r1, #1
   1ff38:	strne	r0, [r8, #1064]	; 0x428
   1ff3c:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1ff40:	bl	13140 <__assert_fail@plt+0x1998>
   1ff44:	mov	r6, #1
   1ff48:	ldr	r5, [sp, #12]
   1ff4c:	cmp	r5, #1
   1ff50:	blt	1ff70 <__assert_fail@plt+0xe7c8>
   1ff54:	sub	lr, fp, #4096	; 0x1000
   1ff58:	sub	r0, lr, #2128	; 0x850
   1ff5c:	add	r4, r0, #8
   1ff60:	ldr	r0, [r4], #12
   1ff64:	bl	13140 <__assert_fail@plt+0x1998>
   1ff68:	subs	r5, r5, #1
   1ff6c:	bne	1ff60 <__assert_fail@plt+0xe7b8>
   1ff70:	mov	r0, r6
   1ff74:	sub	sp, fp, #28
   1ff78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff7c:	str	r0, [fp, #-36]	; 0xffffffdc
   1ff80:	ldr	r5, [sp, #12]
   1ff84:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1ff88:	bl	13140 <__assert_fail@plt+0x1998>
   1ff8c:	mov	r6, #0
   1ff90:	cmp	r5, #1
   1ff94:	blt	1ff70 <__assert_fail@plt+0xe7c8>
   1ff98:	sub	lr, fp, #4096	; 0x1000
   1ff9c:	sub	r0, lr, #2128	; 0x850
   1ffa0:	add	r4, r0, #8
   1ffa4:	ldr	r0, [r4], #12
   1ffa8:	bl	13140 <__assert_fail@plt+0x1998>
   1ffac:	subs	r5, r5, #1
   1ffb0:	bne	1ffa4 <__assert_fail@plt+0xe7fc>
   1ffb4:	b	1ff70 <__assert_fail@plt+0xe7c8>
   1ffb8:	bne	1ff70 <__assert_fail@plt+0xe7c8>
   1ffbc:	mov	r0, #4
   1ffc0:	mov	r1, #256	; 0x100
   1ffc4:	bl	22a64 <__assert_fail@plt+0x112bc>
   1ffc8:	mov	r6, r0
   1ffcc:	str	r0, [r4, #44]	; 0x2c
   1ffd0:	cmp	r0, #0
   1ffd4:	movwne	r6, #1
   1ffd8:	b	1ff70 <__assert_fail@plt+0xe7c8>
   1ffdc:	mov	r0, #4
   1ffe0:	mov	r1, #512	; 0x200
   1ffe4:	bl	22a64 <__assert_fail@plt+0x112bc>
   1ffe8:	mov	r8, r0
   1ffec:	ldr	r0, [sp, #4]
   1fff0:	str	r8, [r0, #48]	; 0x30
   1fff4:	cmp	r8, #0
   1fff8:	beq	1ff84 <__assert_fail@plt+0xe7dc>
   1fffc:	sub	lr, fp, #1024	; 0x400
   20000:	sub	r0, lr, #36	; 0x24
   20004:	sub	ip, r0, #4
   20008:	sub	lr, fp, #2048	; 0x800
   2000c:	sub	r0, lr, #36	; 0x24
   20010:	sub	lr, r0, #4
   20014:	mov	r2, #0
   20018:	add	r3, sp, #16
   2001c:	mov	r7, #0
   20020:	b	20034 <__assert_fail@plt+0xe88c>
   20024:	add	r3, r3, #4
   20028:	add	r7, r7, #1
   2002c:	cmp	r7, #8
   20030:	beq	1fed8 <__assert_fail@plt+0xe730>
   20034:	sub	r0, fp, #3152	; 0xc50
   20038:	ldr	r5, [r0, r7, lsl #2]
   2003c:	cmp	r5, #0
   20040:	beq	20024 <__assert_fail@plt+0xe87c>
   20044:	lsl	r0, r7, #5
   20048:	mov	r1, #1
   2004c:	tst	r5, #1
   20050:	bne	20070 <__assert_fail@plt+0xe8c8>
   20054:	add	r0, r0, #1
   20058:	lsr	r4, r5, #1
   2005c:	lsl	r1, r1, #1
   20060:	cmp	r2, r5, lsr #1
   20064:	mov	r5, r4
   20068:	bne	2004c <__assert_fail@plt+0xe8a4>
   2006c:	b	20024 <__assert_fail@plt+0xe87c>
   20070:	mov	r4, r3
   20074:	mov	sl, ip
   20078:	mov	r9, lr
   2007c:	add	sl, sl, #4
   20080:	add	r9, r9, #4
   20084:	ldr	r6, [r4], #32
   20088:	tst	r6, r1
   2008c:	beq	2007c <__assert_fail@plt+0xe8d4>
   20090:	ldr	r4, [sl]
   20094:	mov	r6, r8
   20098:	str	r4, [r6, r0, lsl #2]!
   2009c:	ldr	r4, [r9]
   200a0:	str	r4, [r6, #1024]	; 0x400
   200a4:	sub	r4, fp, #3072	; 0xc00
   200a8:	sub	r6, r4, #36	; 0x24
   200ac:	b	20054 <__assert_fail@plt+0xe8ac>
   200b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200b4:	add	fp, sp, #28
   200b8:	sub	sp, sp, #140	; 0x8c
   200bc:	str	r3, [sp, #32]
   200c0:	str	r2, [sp, #28]
   200c4:	mov	r9, r1
   200c8:	mov	sl, r0
   200cc:	sub	r7, fp, #64	; 0x40
   200d0:	mov	r0, r7
   200d4:	bl	2059c <__assert_fail@plt+0xedf4>
   200d8:	ldr	r0, [r9, #8]
   200dc:	cmp	r0, #1
   200e0:	blt	20564 <__assert_fail@plt+0xedbc>
   200e4:	add	r6, sl, #96	; 0x60
   200e8:	mov	r0, #0
   200ec:	add	r5, sp, #72	; 0x48
   200f0:	mov	r4, #0
   200f4:	str	sl, [sp]
   200f8:	str	r6, [sp, #8]
   200fc:	str	r9, [sp, #16]
   20100:	b	20128 <__assert_fail@plt+0xe980>
   20104:	mov	r0, r7
   20108:	bl	2059c <__assert_fail@plt+0xedf4>
   2010c:	ldr	r9, [sp, #16]
   20110:	ldr	r0, [r9, #8]
   20114:	ldr	r1, [sp, #36]	; 0x24
   20118:	add	r1, r1, #1
   2011c:	cmp	r1, r0
   20120:	mov	r0, r1
   20124:	bge	20568 <__assert_fail@plt+0xedc0>
   20128:	str	r0, [sp, #36]	; 0x24
   2012c:	ldr	r0, [r9, #12]
   20130:	ldr	r1, [sp, #36]	; 0x24
   20134:	ldr	r8, [r0, r1, lsl #2]
   20138:	ldr	r1, [sl]
   2013c:	add	r0, r1, r8, lsl #3
   20140:	ldr	r9, [r0, #4]!
   20144:	str	r0, [sp, #12]
   20148:	uxtb	r0, r9
   2014c:	cmp	r0, #1
   20150:	str	r0, [sp, #24]
   20154:	bne	2016c <__assert_fail@plt+0xe9c4>
   20158:	str	r1, [sp, #20]
   2015c:	ldrb	r1, [r1, r8, lsl #3]
   20160:	mov	r0, r7
   20164:	bl	19d58 <__assert_fail@plt+0x85b0>
   20168:	b	20204 <__assert_fail@plt+0xea5c>
   2016c:	cmp	r0, #7
   20170:	beq	20198 <__assert_fail@plt+0xe9f0>
   20174:	cmp	r0, #5
   20178:	beq	201b4 <__assert_fail@plt+0xea0c>
   2017c:	cmp	r0, #3
   20180:	bne	2010c <__assert_fail@plt+0xe964>
   20184:	str	r1, [sp, #20]
   20188:	ldr	r1, [r1, r8, lsl #3]
   2018c:	mov	r0, r7
   20190:	bl	205ac <__assert_fail@plt+0xee04>
   20194:	b	20204 <__assert_fail@plt+0xea5c>
   20198:	str	r1, [sp, #20]
   2019c:	mvn	r0, #0
   201a0:	str	r0, [fp, #-52]	; 0xffffffcc
   201a4:	str	r0, [fp, #-56]	; 0xffffffc8
   201a8:	str	r0, [fp, #-60]	; 0xffffffc4
   201ac:	str	r0, [fp, #-64]	; 0xffffffc0
   201b0:	b	201dc <__assert_fail@plt+0xea34>
   201b4:	ldr	r0, [sl, #92]	; 0x5c
   201b8:	cmp	r0, #2
   201bc:	str	r1, [sp, #20]
   201c0:	blt	201d4 <__assert_fail@plt+0xea2c>
   201c4:	ldr	r1, [sl, #60]	; 0x3c
   201c8:	mov	r0, r7
   201cc:	bl	205ac <__assert_fail@plt+0xee04>
   201d0:	b	201dc <__assert_fail@plt+0xea34>
   201d4:	mov	r0, r7
   201d8:	bl	205d0 <__assert_fail@plt+0xee28>
   201dc:	ldrb	r0, [sl, #128]	; 0x80
   201e0:	tst	r0, #64	; 0x40
   201e4:	moveq	r0, r7
   201e8:	moveq	r1, #10
   201ec:	bleq	205f8 <__assert_fail@plt+0xee50>
   201f0:	ldrb	r0, [sl, #128]	; 0x80
   201f4:	tst	r0, #128	; 0x80
   201f8:	movne	r0, r7
   201fc:	movne	r1, #0
   20200:	blne	205f8 <__assert_fail@plt+0xee50>
   20204:	movw	r0, #65280	; 0xff00
   20208:	movt	r0, #3
   2020c:	ands	r0, r9, r0
   20210:	beq	20390 <__assert_fail@plt+0xebe8>
   20214:	tst	r9, #8192	; 0x2000
   20218:	beq	2024c <__assert_fail@plt+0xeaa4>
   2021c:	mov	r0, r7
   20220:	mov	r1, #10
   20224:	bl	1d8ac <__assert_fail@plt+0xc104>
   20228:	str	r0, [sp, #4]
   2022c:	mov	r0, r7
   20230:	bl	2059c <__assert_fail@plt+0xedf4>
   20234:	ldr	r0, [sp, #4]
   20238:	cmp	r0, #0
   2023c:	beq	2010c <__assert_fail@plt+0xe964>
   20240:	mov	r0, r7
   20244:	mov	r1, #10
   20248:	bl	19d58 <__assert_fail@plt+0x85b0>
   2024c:	tst	r9, #32768	; 0x8000
   20250:	bne	20104 <__assert_fail@plt+0xe95c>
   20254:	tst	r9, #1024	; 0x400
   20258:	beq	202f4 <__assert_fail@plt+0xeb4c>
   2025c:	ldr	r0, [sp, #24]
   20260:	cmp	r0, #1
   20264:	bne	20278 <__assert_fail@plt+0xead0>
   20268:	ldr	r0, [sp, #12]
   2026c:	ldrb	r0, [r0, #2]
   20270:	tst	r0, #64	; 0x40
   20274:	beq	20104 <__assert_fail@plt+0xe95c>
   20278:	ldr	r0, [sl, #92]	; 0x5c
   2027c:	cmp	r0, #1
   20280:	ble	202c4 <__assert_fail@plt+0xeb1c>
   20284:	ldr	r1, [sl, #60]	; 0x3c
   20288:	mov	r0, #0
   2028c:	mov	r2, #0
   20290:	ldr	r3, [r6, r2, lsl #2]
   20294:	ldr	r6, [r1, r2, lsl #2]
   20298:	mvn	r6, r6
   2029c:	orr	r3, r3, r6
   202a0:	ldr	r6, [r7, r2, lsl #2]
   202a4:	and	r3, r6, r3
   202a8:	ldr	r6, [sp, #8]
   202ac:	str	r3, [r7, r2, lsl #2]
   202b0:	orr	r0, r3, r0
   202b4:	add	r2, r2, #1
   202b8:	cmp	r2, #8
   202bc:	bne	20290 <__assert_fail@plt+0xeae8>
   202c0:	b	202ec <__assert_fail@plt+0xeb44>
   202c4:	mov	r0, #0
   202c8:	mov	r1, #0
   202cc:	ldr	r2, [r6, r1, lsl #2]
   202d0:	ldr	r3, [r7, r1, lsl #2]
   202d4:	and	r2, r3, r2
   202d8:	str	r2, [r7, r1, lsl #2]
   202dc:	orr	r0, r2, r0
   202e0:	add	r1, r1, #1
   202e4:	cmp	r1, #8
   202e8:	bne	202cc <__assert_fail@plt+0xeb24>
   202ec:	cmp	r0, #0
   202f0:	beq	2010c <__assert_fail@plt+0xe964>
   202f4:	tst	r9, #2048	; 0x800
   202f8:	beq	20390 <__assert_fail@plt+0xebe8>
   202fc:	ldr	r0, [sp, #24]
   20300:	cmp	r0, #1
   20304:	bne	20318 <__assert_fail@plt+0xeb70>
   20308:	ldr	r0, [sp, #12]
   2030c:	ldrb	r0, [r0, #2]
   20310:	tst	r0, #64	; 0x40
   20314:	bne	20104 <__assert_fail@plt+0xe95c>
   20318:	ldr	r0, [sl, #92]	; 0x5c
   2031c:	cmp	r0, #1
   20320:	ble	20360 <__assert_fail@plt+0xebb8>
   20324:	ldr	r1, [sl, #60]	; 0x3c
   20328:	mov	r0, #0
   2032c:	mov	r2, #0
   20330:	ldr	r3, [r6, r2, lsl #2]
   20334:	ldr	r6, [r1, r2, lsl #2]
   20338:	and	r3, r6, r3
   2033c:	ldr	r6, [r7, r2, lsl #2]
   20340:	bic	r3, r6, r3
   20344:	ldr	r6, [sp, #8]
   20348:	str	r3, [r7, r2, lsl #2]
   2034c:	orr	r0, r3, r0
   20350:	add	r2, r2, #1
   20354:	cmp	r2, #8
   20358:	bne	20330 <__assert_fail@plt+0xeb88>
   2035c:	b	20388 <__assert_fail@plt+0xebe0>
   20360:	mov	r0, #0
   20364:	mov	r1, #0
   20368:	ldr	r2, [r6, r1, lsl #2]
   2036c:	ldr	r3, [r7, r1, lsl #2]
   20370:	bic	r2, r3, r2
   20374:	str	r2, [r7, r1, lsl #2]
   20378:	orr	r0, r2, r0
   2037c:	add	r1, r1, #1
   20380:	cmp	r1, #8
   20384:	bne	20368 <__assert_fail@plt+0xebc0>
   20388:	cmp	r0, #0
   2038c:	beq	2010c <__assert_fail@plt+0xe964>
   20390:	cmp	r4, #1
   20394:	blt	204f8 <__assert_fail@plt+0xed50>
   20398:	str	r8, [sp, #12]
   2039c:	mov	r8, #0
   203a0:	ldr	sl, [sp, #32]
   203a4:	ldr	r9, [sp, #16]
   203a8:	ldr	r6, [sp, #24]
   203ac:	cmp	r6, #1
   203b0:	bne	203f4 <__assert_fail@plt+0xec4c>
   203b4:	b	203d4 <__assert_fail@plt+0xec2c>
   203b8:	mov	r4, ip
   203bc:	add	sl, sl, #32
   203c0:	add	r8, r8, #1
   203c4:	cmp	r8, r4
   203c8:	bge	20508 <__assert_fail@plt+0xed60>
   203cc:	cmp	r6, #1
   203d0:	bne	203f4 <__assert_fail@plt+0xec4c>
   203d4:	ldr	r0, [sp, #12]
   203d8:	ldr	r1, [sp, #20]
   203dc:	ldrb	r1, [r1, r0, lsl #3]
   203e0:	ldr	r0, [sp, #32]
   203e4:	add	r0, r0, r8, lsl #5
   203e8:	bl	1d8ac <__assert_fail@plt+0xc104>
   203ec:	cmp	r0, #0
   203f0:	beq	203bc <__assert_fail@plt+0xec14>
   203f4:	mov	ip, r4
   203f8:	mov	r0, #0
   203fc:	mov	r1, #0
   20400:	ldr	r2, [r7, r1, lsl #2]
   20404:	ldr	r3, [sl, r1, lsl #2]
   20408:	and	r2, r3, r2
   2040c:	str	r2, [r5, r1, lsl #2]
   20410:	orr	r0, r2, r0
   20414:	add	r1, r1, #1
   20418:	cmp	r1, #8
   2041c:	bne	20400 <__assert_fail@plt+0xec58>
   20420:	cmp	r0, #0
   20424:	beq	203b8 <__assert_fail@plt+0xec10>
   20428:	mov	r9, #0
   2042c:	mov	r0, #0
   20430:	mov	r1, #0
   20434:	ldr	r2, [r7, r1, lsl #2]
   20438:	ldr	r3, [sl, r1, lsl #2]
   2043c:	bic	r4, r3, r2
   20440:	add	r6, sp, #40	; 0x28
   20444:	str	r4, [r6, r1, lsl #2]
   20448:	bic	r2, r2, r3
   2044c:	str	r2, [r7, r1, lsl #2]
   20450:	orr	r9, r2, r9
   20454:	orr	r0, r4, r0
   20458:	add	r1, r1, #1
   2045c:	cmp	r1, #8
   20460:	bne	20434 <__assert_fail@plt+0xec8c>
   20464:	cmp	r0, #0
   20468:	beq	204b4 <__assert_fail@plt+0xed0c>
   2046c:	mov	r4, ip
   20470:	ldr	r6, [sp, #32]
   20474:	add	r0, r6, ip, lsl #5
   20478:	add	r1, sp, #40	; 0x28
   2047c:	bl	2061c <__assert_fail@plt+0xee74>
   20480:	add	r0, r6, r8, lsl #5
   20484:	mov	r1, r5
   20488:	bl	2061c <__assert_fail@plt+0xee74>
   2048c:	add	r0, r4, r4, lsl #1
   20490:	ldr	r2, [sp, #28]
   20494:	add	r0, r2, r0, lsl #2
   20498:	add	r1, r8, r8, lsl #1
   2049c:	add	r1, r2, r1, lsl #2
   204a0:	bl	1bf28 <__assert_fail@plt+0xa780>
   204a4:	cmp	r0, #0
   204a8:	bne	20574 <__assert_fail@plt+0xedcc>
   204ac:	add	r4, r4, #1
   204b0:	b	204b8 <__assert_fail@plt+0xed10>
   204b4:	mov	r4, ip
   204b8:	ldr	r0, [sp, #16]
   204bc:	mov	r6, r0
   204c0:	ldr	r0, [r0, #12]
   204c4:	ldr	r1, [sp, #36]	; 0x24
   204c8:	ldr	r1, [r0, r1, lsl #2]
   204cc:	add	r0, r8, r8, lsl #1
   204d0:	ldr	r2, [sp, #28]
   204d4:	add	r0, r2, r0, lsl #2
   204d8:	bl	1bd3c <__assert_fail@plt+0xa594>
   204dc:	cmp	r0, #0
   204e0:	beq	20574 <__assert_fail@plt+0xedcc>
   204e4:	cmp	r9, #0
   204e8:	beq	20504 <__assert_fail@plt+0xed5c>
   204ec:	mov	r9, r6
   204f0:	ldr	r6, [sp, #24]
   204f4:	b	203bc <__assert_fail@plt+0xec14>
   204f8:	mov	r8, #0
   204fc:	ldr	r9, [sp, #16]
   20500:	b	20508 <__assert_fail@plt+0xed60>
   20504:	mov	r9, r6
   20508:	cmp	r8, r4
   2050c:	ldr	sl, [sp]
   20510:	bne	2055c <__assert_fail@plt+0xedb4>
   20514:	ldr	r0, [sp, #32]
   20518:	add	r0, r0, r4, lsl #5
   2051c:	mov	r1, r7
   20520:	bl	2061c <__assert_fail@plt+0xee74>
   20524:	ldr	r0, [r9, #12]
   20528:	ldr	r1, [sp, #36]	; 0x24
   2052c:	ldr	r1, [r0, r1, lsl #2]
   20530:	add	r0, r4, r4, lsl #1
   20534:	ldr	r2, [sp, #28]
   20538:	add	r0, r2, r0, lsl #2
   2053c:	bl	1b638 <__assert_fail@plt+0x9e90>
   20540:	cmp	r0, #0
   20544:	ldr	r6, [sp, #8]
   20548:	bne	20574 <__assert_fail@plt+0xedcc>
   2054c:	mov	r0, r7
   20550:	bl	2059c <__assert_fail@plt+0xedf4>
   20554:	add	r4, r4, #1
   20558:	b	20110 <__assert_fail@plt+0xe968>
   2055c:	ldr	r6, [sp, #8]
   20560:	b	20110 <__assert_fail@plt+0xe968>
   20564:	mov	r4, #0
   20568:	mov	r0, r4
   2056c:	sub	sp, fp, #28
   20570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20574:	cmp	r4, #1
   20578:	blt	20594 <__assert_fail@plt+0xedec>
   2057c:	ldr	r0, [sp, #28]
   20580:	add	r5, r0, #8
   20584:	ldr	r0, [r5], #12
   20588:	bl	13140 <__assert_fail@plt+0x1998>
   2058c:	subs	r4, r4, #1
   20590:	bne	20584 <__assert_fail@plt+0xeddc>
   20594:	mvn	r4, #0
   20598:	b	20568 <__assert_fail@plt+0xedc0>
   2059c:	vmov.i32	q8, #0	; 0x00000000
   205a0:	vst1.32	{d16-d17}, [r0]!
   205a4:	vst1.32	{d16-d17}, [r0]
   205a8:	bx	lr
   205ac:	mov	r2, #0
   205b0:	ldr	ip, [r1, r2, lsl #2]
   205b4:	ldr	r3, [r0, r2, lsl #2]
   205b8:	orr	r3, r3, ip
   205bc:	str	r3, [r0, r2, lsl #2]
   205c0:	add	r2, r2, #1
   205c4:	cmp	r2, #8
   205c8:	bne	205b0 <__assert_fail@plt+0xee08>
   205cc:	bx	lr
   205d0:	mvn	r1, #0
   205d4:	str	r1, [r0]
   205d8:	str	r1, [r0, #4]
   205dc:	str	r1, [r0, #8]
   205e0:	str	r1, [r0, #12]
   205e4:	str	r1, [r0, #16]
   205e8:	str	r1, [r0, #20]
   205ec:	str	r1, [r0, #24]
   205f0:	str	r1, [r0, #28]
   205f4:	bx	lr
   205f8:	asr	r2, r1, #31
   205fc:	add	r2, r1, r2, lsr #27
   20600:	asr	r2, r2, #5
   20604:	ldr	ip, [r0, r2, lsl #2]
   20608:	and	r1, r1, #31
   2060c:	mov	r3, #1
   20610:	bic	r1, ip, r3, lsl r1
   20614:	str	r1, [r0, r2, lsl #2]
   20618:	bx	lr
   2061c:	vld1.32	{d16-d17}, [r1]!
   20620:	vld1.32	{d18-d19}, [r1]
   20624:	vst1.32	{d16-d17}, [r0]!
   20628:	vst1.32	{d18-d19}, [r0]
   2062c:	bx	lr
   20630:	ldr	r0, [r0]
   20634:	add	r0, r0, r1, lsl #3
   20638:	ldr	r1, [r0, #4]
   2063c:	uxtb	r3, r1
   20640:	mov	r0, #0
   20644:	cmp	r3, #2
   20648:	bne	206a0 <__assert_fail@plt+0xeef8>
   2064c:	movw	r3, #65280	; 0xff00
   20650:	movt	r3, #3
   20654:	tst	r1, r3
   20658:	moveq	r0, #1
   2065c:	bxeq	lr
   20660:	ands	ip, r2, #1
   20664:	bne	20670 <__assert_fail@plt+0xeec8>
   20668:	ands	r3, r1, #1024	; 0x400
   2066c:	bne	206a0 <__assert_fail@plt+0xeef8>
   20670:	cmp	ip, #0
   20674:	andsne	r3, r1, #2048	; 0x800
   20678:	bne	206a0 <__assert_fail@plt+0xeef8>
   2067c:	tst	r2, #2
   20680:	bne	2068c <__assert_fail@plt+0xeee4>
   20684:	ands	r3, r1, #8192	; 0x2000
   20688:	bxne	lr
   2068c:	uxth	r0, r1
   20690:	mov	r1, #1
   20694:	eor	r0, r1, r0, lsr #15
   20698:	and	r1, r2, #8
   2069c:	orr	r0, r0, r1, lsr #3
   206a0:	bx	lr
   206a4:	mov	ip, #0
   206a8:	str	ip, [r0, #20]
   206ac:	str	ip, [r0, #16]
   206b0:	stm	r0, {r1, r2, r3}
   206b4:	str	ip, [r0, #24]
   206b8:	ldr	r1, [sp]
   206bc:	str	r1, [r0, #12]
   206c0:	bx	lr
   206c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206c8:	add	fp, sp, #28
   206cc:	sub	sp, sp, #12
   206d0:	mov	sl, r1
   206d4:	mov	r6, r0
   206d8:	ldr	r1, [r1, #8]
   206dc:	ldr	r5, [sl, #12]
   206e0:	mov	r0, sp
   206e4:	bl	1b638 <__assert_fail@plt+0x9e90>
   206e8:	cmp	r0, #0
   206ec:	bne	207d4 <__assert_fail@plt+0xf02c>
   206f0:	mov	r3, sp
   206f4:	mov	r0, r6
   206f8:	mov	r1, sl
   206fc:	mov	r2, r5
   20700:	bl	20890 <__assert_fail@plt+0xf0e8>
   20704:	cmp	r0, #0
   20708:	bne	207a0 <__assert_fail@plt+0xeff8>
   2070c:	mov	r9, #0
   20710:	mov	r8, sp
   20714:	mov	r1, #0
   20718:	cmp	r5, #1
   2071c:	bge	2074c <__assert_fail@plt+0xefa4>
   20720:	b	207a8 <__assert_fail@plt+0xf000>
   20724:	mov	r0, r6
   20728:	mov	r1, sl
   2072c:	mov	r2, r5
   20730:	mov	r3, r8
   20734:	bl	20890 <__assert_fail@plt+0xf0e8>
   20738:	cmp	r0, #0
   2073c:	mov	r1, r4
   20740:	bne	207a0 <__assert_fail@plt+0xeff8>
   20744:	cmp	r5, #1
   20748:	blt	207a8 <__assert_fail@plt+0xf000>
   2074c:	ldr	r0, [sl]
   20750:	ldr	r2, [r0, r5, lsl #2]
   20754:	cmp	r2, #0
   20758:	mov	r4, #0
   2075c:	addeq	r4, r1, #1
   20760:	ldr	r1, [r6, #120]	; 0x78
   20764:	cmp	r4, r1
   20768:	bgt	207b0 <__assert_fail@plt+0xf008>
   2076c:	str	r9, [sp, #4]
   20770:	ldr	r0, [r6, #100]	; 0x64
   20774:	sub	r5, r5, #1
   20778:	ldr	r0, [r0, r5, lsl #2]
   2077c:	cmp	r0, #0
   20780:	beq	20724 <__assert_fail@plt+0xef7c>
   20784:	mov	r0, r6
   20788:	mov	r1, sl
   2078c:	mov	r2, r5
   20790:	mov	r3, r8
   20794:	bl	209b8 <__assert_fail@plt+0xf210>
   20798:	cmp	r0, #0
   2079c:	beq	20724 <__assert_fail@plt+0xef7c>
   207a0:	mov	r7, r0
   207a4:	b	207c0 <__assert_fail@plt+0xf018>
   207a8:	mov	r7, #0
   207ac:	b	207c0 <__assert_fail@plt+0xf018>
   207b0:	lsl	r2, r5, #2
   207b4:	mov	r7, #0
   207b8:	mov	r1, #0
   207bc:	bl	116ac <memset@plt>
   207c0:	ldr	r0, [sp, #8]
   207c4:	bl	13140 <__assert_fail@plt+0x1998>
   207c8:	mov	r0, r7
   207cc:	sub	sp, fp, #28
   207d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207d4:	mov	r7, r0
   207d8:	b	207c8 <__assert_fail@plt+0xf020>
   207dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   207e0:	add	fp, sp, #24
   207e4:	sub	sp, sp, #16
   207e8:	cmp	r3, #1
   207ec:	blt	20884 <__assert_fail@plt+0xf0dc>
   207f0:	mov	r4, r3
   207f4:	mov	r5, r2
   207f8:	mov	r6, r1
   207fc:	mov	r7, r0
   20800:	mov	r8, sp
   20804:	add	r9, sp, #12
   20808:	b	20820 <__assert_fail@plt+0xf078>
   2080c:	str	r0, [r6]
   20810:	add	r6, r6, #4
   20814:	add	r5, r5, #4
   20818:	subs	r4, r4, #1
   2081c:	beq	20884 <__assert_fail@plt+0xf0dc>
   20820:	ldr	r0, [r5]
   20824:	ldr	r1, [r6]
   20828:	cmp	r1, #0
   2082c:	beq	2080c <__assert_fail@plt+0xf064>
   20830:	cmp	r0, #0
   20834:	beq	20810 <__assert_fail@plt+0xf068>
   20838:	add	r1, r1, #4
   2083c:	add	r2, r0, #4
   20840:	mov	r0, r8
   20844:	bl	1e3ec <__assert_fail@plt+0xcc44>
   20848:	str	r0, [sp, #12]
   2084c:	cmp	r0, #0
   20850:	bne	2087c <__assert_fail@plt+0xf0d4>
   20854:	mov	r0, r9
   20858:	mov	r1, r7
   2085c:	mov	r2, r8
   20860:	bl	1f3f0 <__assert_fail@plt+0xdc48>
   20864:	str	r0, [r6]
   20868:	ldr	r0, [sp, #8]
   2086c:	bl	13140 <__assert_fail@plt+0x1998>
   20870:	ldr	r0, [sp, #12]
   20874:	cmp	r0, #0
   20878:	beq	20810 <__assert_fail@plt+0xf068>
   2087c:	sub	sp, fp, #24
   20880:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20884:	mov	r0, #0
   20888:	sub	sp, fp, #24
   2088c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20894:	add	fp, sp, #28
   20898:	sub	sp, sp, #12
   2089c:	mov	sl, r2
   208a0:	mov	r8, r1
   208a4:	mov	r6, r0
   208a8:	ldr	r9, [r0, #84]	; 0x54
   208ac:	mov	r0, #0
   208b0:	str	r0, [sp, #8]
   208b4:	ldr	r1, [r6, #100]	; 0x64
   208b8:	ldr	r7, [r1, r2, lsl #2]
   208bc:	cmp	r7, #0
   208c0:	mov	r4, r7
   208c4:	addne	r4, r4, #4
   208c8:	ldr	r1, [r3, #4]
   208cc:	cmp	r1, #0
   208d0:	beq	20960 <__assert_fail@plt+0xf1b8>
   208d4:	mov	r5, r3
   208d8:	cmp	r7, #0
   208dc:	beq	20930 <__assert_fail@plt+0xf188>
   208e0:	mov	r0, r9
   208e4:	mov	r1, r5
   208e8:	mov	r2, r4
   208ec:	bl	20b04 <__assert_fail@plt+0xf35c>
   208f0:	str	r0, [sp, #8]
   208f4:	cmp	r0, #0
   208f8:	bne	20988 <__assert_fail@plt+0xf1e0>
   208fc:	ldr	r0, [r8, #20]
   20900:	cmp	r0, #0
   20904:	beq	20930 <__assert_fail@plt+0xf188>
   20908:	ldr	r0, [r6, #116]	; 0x74
   2090c:	stm	sp, {r0, sl}
   20910:	add	r3, r8, #16
   20914:	mov	r0, r9
   20918:	mov	r1, r5
   2091c:	mov	r2, r4
   20920:	bl	20bdc <__assert_fail@plt+0xf434>
   20924:	str	r0, [sp, #8]
   20928:	cmp	r0, #0
   2092c:	bne	20988 <__assert_fail@plt+0xf1e0>
   20930:	add	r0, sp, #8
   20934:	mov	r1, r9
   20938:	mov	r2, r5
   2093c:	bl	1f3f0 <__assert_fail@plt+0xdc48>
   20940:	ldr	r1, [r8]
   20944:	str	r0, [r1, sl, lsl #2]
   20948:	ldr	r0, [sp, #8]
   2094c:	cmp	r0, #0
   20950:	bne	20988 <__assert_fail@plt+0xf1e0>
   20954:	cmp	r7, #0
   20958:	bne	20970 <__assert_fail@plt+0xf1c8>
   2095c:	b	20984 <__assert_fail@plt+0xf1dc>
   20960:	ldr	r1, [r8]
   20964:	str	r0, [r1, sl, lsl #2]
   20968:	cmp	r7, #0
   2096c:	beq	20984 <__assert_fail@plt+0xf1dc>
   20970:	ldr	r0, [r6, #100]	; 0x64
   20974:	ldr	r0, [r0, sl, lsl #2]
   20978:	ldrb	r0, [r0, #52]	; 0x34
   2097c:	tst	r0, #64	; 0x40
   20980:	bne	20990 <__assert_fail@plt+0xf1e8>
   20984:	mov	r0, #0
   20988:	sub	sp, fp, #28
   2098c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20990:	mov	r0, r6
   20994:	mov	r1, r8
   20998:	mov	r2, sl
   2099c:	mov	r3, r4
   209a0:	bl	20e20 <__assert_fail@plt+0xf678>
   209a4:	str	r0, [sp, #8]
   209a8:	cmp	r0, #0
   209ac:	moveq	r0, #0
   209b0:	sub	sp, fp, #28
   209b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209bc:	add	fp, sp, #28
   209c0:	sub	sp, sp, #20
   209c4:	str	r3, [sp, #12]
   209c8:	mov	sl, r0
   209cc:	ldr	r0, [r0, #100]	; 0x64
   209d0:	ldr	r7, [r0, r2, lsl #2]
   209d4:	ldr	r0, [r7, #20]
   209d8:	cmp	r0, #1
   209dc:	blt	20aec <__assert_fail@plt+0xf344>
   209e0:	mov	r5, r2
   209e4:	mov	r6, r1
   209e8:	ldr	r8, [sl, #84]	; 0x54
   209ec:	add	r0, r1, #16
   209f0:	str	r0, [sp, #8]
   209f4:	add	r0, r2, #1
   209f8:	str	r0, [sp, #16]
   209fc:	mov	r9, #0
   20a00:	b	20a28 <__assert_fail@plt+0xf280>
   20a04:	ldr	r0, [sp, #12]
   20a08:	mov	r1, r4
   20a0c:	bl	1bd3c <__assert_fail@plt+0xa594>
   20a10:	cmp	r0, #0
   20a14:	beq	20af8 <__assert_fail@plt+0xf350>
   20a18:	add	r9, r9, #1
   20a1c:	ldr	r0, [r7, #20]
   20a20:	cmp	r9, r0
   20a24:	bge	20aec <__assert_fail@plt+0xf344>
   20a28:	ldr	r0, [r7, #24]
   20a2c:	ldr	r4, [r0, r9, lsl #2]
   20a30:	ldr	r0, [r8]
   20a34:	add	r0, r0, r4, lsl #3
   20a38:	ldrb	r0, [r0, #6]
   20a3c:	tst	r0, #16
   20a40:	beq	20a68 <__assert_fail@plt+0xf2c0>
   20a44:	ldr	r0, [r6, #12]
   20a48:	str	r0, [sp]
   20a4c:	mov	r0, sl
   20a50:	mov	r1, r6
   20a54:	mov	r2, r4
   20a58:	mov	r3, r5
   20a5c:	bl	21820 <__assert_fail@plt+0x10078>
   20a60:	cmp	r0, #0
   20a64:	bne	20ab8 <__assert_fail@plt+0xf310>
   20a68:	ldr	r0, [r8]
   20a6c:	add	r1, r0, r4, lsl #3
   20a70:	mov	r0, sl
   20a74:	mov	r2, r5
   20a78:	bl	1f8dc <__assert_fail@plt+0xe134>
   20a7c:	cmp	r0, #0
   20a80:	beq	20a18 <__assert_fail@plt+0xf270>
   20a84:	ldr	r0, [r6]
   20a88:	ldr	r1, [sp, #16]
   20a8c:	ldr	r0, [r0, r1, lsl #2]
   20a90:	cmp	r0, #0
   20a94:	beq	20a18 <__assert_fail@plt+0xf270>
   20a98:	ldr	r1, [r8, #12]
   20a9c:	ldr	r1, [r1, r4, lsl #2]
   20aa0:	add	r0, r0, #4
   20aa4:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   20aa8:	mov	r1, r0
   20aac:	mov	r0, #1
   20ab0:	cmp	r1, #0
   20ab4:	beq	20a18 <__assert_fail@plt+0xf270>
   20ab8:	ldr	r1, [r6, #20]
   20abc:	cmp	r1, #0
   20ac0:	beq	20a04 <__assert_fail@plt+0xf25c>
   20ac4:	ldr	r1, [r8, #12]
   20ac8:	ldr	r2, [r1, r4, lsl #2]
   20acc:	stm	sp, {r4, r5}
   20ad0:	add	r3, r0, r5
   20ad4:	mov	r0, sl
   20ad8:	ldr	r1, [sp, #8]
   20adc:	bl	214b4 <__assert_fail@plt+0xfd0c>
   20ae0:	cmp	r0, #0
   20ae4:	beq	20a04 <__assert_fail@plt+0xf25c>
   20ae8:	b	20a18 <__assert_fail@plt+0xf270>
   20aec:	mov	r0, #0
   20af0:	sub	sp, fp, #28
   20af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20af8:	mov	r0, #12
   20afc:	sub	sp, fp, #28
   20b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20b08:	add	fp, sp, #24
   20b0c:	sub	sp, sp, #8
   20b10:	mov	r8, r2
   20b14:	mov	r5, r1
   20b18:	mov	r6, r0
   20b1c:	mov	r0, #0
   20b20:	str	r0, [sp, #4]
   20b24:	add	r0, sp, #4
   20b28:	mov	r1, r6
   20b2c:	mov	r2, r5
   20b30:	bl	1f3f0 <__assert_fail@plt+0xdc48>
   20b34:	ldr	r9, [sp, #4]
   20b38:	cmp	r9, #0
   20b3c:	bne	20bc8 <__assert_fail@plt+0xf420>
   20b40:	mov	r7, r0
   20b44:	ldr	r0, [r7, #28]!
   20b48:	cmp	r0, #0
   20b4c:	bne	20bb4 <__assert_fail@plt+0xf40c>
   20b50:	ldr	r1, [r5, #4]
   20b54:	mov	r0, r7
   20b58:	bl	1b898 <__assert_fail@plt+0xa0f0>
   20b5c:	str	r0, [sp, #4]
   20b60:	mov	r9, #12
   20b64:	cmp	r0, #0
   20b68:	bne	20bc8 <__assert_fail@plt+0xf420>
   20b6c:	ldr	r0, [r5, #4]
   20b70:	cmp	r0, #1
   20b74:	blt	20bb4 <__assert_fail@plt+0xf40c>
   20b78:	mov	r4, #0
   20b7c:	ldr	r0, [r5, #8]
   20b80:	ldr	r0, [r0, r4, lsl #2]
   20b84:	add	r0, r0, r0, lsl #1
   20b88:	ldr	r1, [r6, #28]
   20b8c:	add	r1, r1, r0, lsl #2
   20b90:	mov	r0, r7
   20b94:	bl	1bb24 <__assert_fail@plt+0xa37c>
   20b98:	cmp	r0, #0
   20b9c:	bne	20bd4 <__assert_fail@plt+0xf42c>
   20ba0:	add	r4, r4, #1
   20ba4:	ldr	r1, [r5, #4]
   20ba8:	cmp	r4, r1
   20bac:	blt	20b7c <__assert_fail@plt+0xf3d4>
   20bb0:	str	r0, [sp, #4]
   20bb4:	mov	r0, r5
   20bb8:	mov	r1, r8
   20bbc:	mov	r2, r7
   20bc0:	bl	21110 <__assert_fail@plt+0xf968>
   20bc4:	mov	r9, r0
   20bc8:	mov	r0, r9
   20bcc:	sub	sp, fp, #24
   20bd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20bd4:	str	r0, [sp, #4]
   20bd8:	b	20bc8 <__assert_fail@plt+0xf420>
   20bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20be0:	add	fp, sp, #28
   20be4:	sub	sp, sp, #12
   20be8:	str	r2, [sp, #4]
   20bec:	mov	ip, r0
   20bf0:	ldr	r0, [r3, #4]
   20bf4:	cmp	r0, #1
   20bf8:	blt	20e14 <__assert_fail@plt+0xf66c>
   20bfc:	mov	r9, r1
   20c00:	mov	r8, #0
   20c04:	str	ip, [sp]
   20c08:	str	r3, [sp, #8]
   20c0c:	b	20c24 <__assert_fail@plt+0xf47c>
   20c10:	add	r8, r8, #1
   20c14:	ldr	r3, [sp, #8]
   20c18:	ldr	r0, [r3, #4]
   20c1c:	cmp	r8, r0
   20c20:	bge	20e14 <__assert_fail@plt+0xf66c>
   20c24:	ldr	r0, [r3, #8]
   20c28:	ldr	r0, [r0, r8, lsl #2]
   20c2c:	add	r0, r0, r0, lsl #1
   20c30:	ldr	r1, [fp, #8]
   20c34:	add	r1, r1, r0, lsl #3
   20c38:	ldr	r2, [r1, #8]
   20c3c:	ldr	r3, [fp, #12]
   20c40:	cmp	r2, r3
   20c44:	bge	20c10 <__assert_fail@plt+0xf468>
   20c48:	ldr	r1, [r1, #4]
   20c4c:	ldr	r2, [fp, #12]
   20c50:	cmp	r1, r2
   20c54:	blt	20c10 <__assert_fail@plt+0xf468>
   20c58:	ldr	r1, [fp, #8]
   20c5c:	ldr	r2, [r1, r0, lsl #3]!
   20c60:	ldr	r0, [ip]
   20c64:	ldr	sl, [r0, r2, lsl #3]
   20c68:	ldr	r1, [r1, #12]
   20c6c:	ldr	r2, [fp, #12]
   20c70:	cmp	r1, r2
   20c74:	bne	20cdc <__assert_fail@plt+0xf534>
   20c78:	ldr	r1, [r9, #4]
   20c7c:	cmp	r1, #1
   20c80:	blt	20c10 <__assert_fail@plt+0xf468>
   20c84:	ldmib	r9, {r2, r3}
   20c88:	mvn	r6, #0
   20c8c:	mov	r5, #0
   20c90:	mvn	r1, #0
   20c94:	b	20cb0 <__assert_fail@plt+0xf508>
   20c98:	ldr	r4, [r0, r7, lsl #3]
   20c9c:	cmp	sl, r4
   20ca0:	moveq	r6, r7
   20ca4:	add	r5, r5, #1
   20ca8:	cmp	r5, r2
   20cac:	bge	20d4c <__assert_fail@plt+0xf5a4>
   20cb0:	ldr	r7, [r3, r5, lsl #2]
   20cb4:	add	r4, r0, r7, lsl #3
   20cb8:	ldrb	r4, [r4, #4]
   20cbc:	cmp	r4, #9
   20cc0:	beq	20c98 <__assert_fail@plt+0xf4f0>
   20cc4:	cmp	r4, #8
   20cc8:	bne	20ca4 <__assert_fail@plt+0xf4fc>
   20ccc:	ldr	r4, [r0, r7, lsl #3]
   20cd0:	cmp	sl, r4
   20cd4:	moveq	r1, r7
   20cd8:	b	20ca4 <__assert_fail@plt+0xf4fc>
   20cdc:	ldr	r0, [r9, #4]
   20ce0:	cmp	r0, #1
   20ce4:	blt	20c10 <__assert_fail@plt+0xf468>
   20ce8:	mov	r5, #0
   20cec:	b	20d00 <__assert_fail@plt+0xf558>
   20cf0:	ldr	r0, [r9, #4]
   20cf4:	add	r5, r5, #1
   20cf8:	cmp	r5, r0
   20cfc:	bge	20c10 <__assert_fail@plt+0xf468>
   20d00:	ldr	r0, [r9, #8]
   20d04:	ldr	r1, [r0, r5, lsl #2]
   20d08:	ldr	r0, [ip]
   20d0c:	add	r2, r0, r1, lsl #3
   20d10:	ldrb	r2, [r2, #4]
   20d14:	orr	r2, r2, #1
   20d18:	cmp	r2, #9
   20d1c:	bne	20cf0 <__assert_fail@plt+0xf548>
   20d20:	ldr	r0, [r0, r1, lsl #3]
   20d24:	cmp	sl, r0
   20d28:	bne	20cf0 <__assert_fail@plt+0xf548>
   20d2c:	mov	r0, ip
   20d30:	mov	r2, r9
   20d34:	ldr	r3, [sp, #4]
   20d38:	bl	21300 <__assert_fail@plt+0xfb58>
   20d3c:	ldr	ip, [sp]
   20d40:	cmp	r0, #0
   20d44:	beq	20cf0 <__assert_fail@plt+0xf548>
   20d48:	b	20e18 <__assert_fail@plt+0xf670>
   20d4c:	cmp	r1, #0
   20d50:	bmi	20d70 <__assert_fail@plt+0xf5c8>
   20d54:	mov	r0, ip
   20d58:	mov	r2, r9
   20d5c:	ldr	r3, [sp, #4]
   20d60:	bl	21300 <__assert_fail@plt+0xfb58>
   20d64:	ldr	ip, [sp]
   20d68:	cmp	r0, #0
   20d6c:	bne	20e18 <__assert_fail@plt+0xf670>
   20d70:	cmp	r6, #0
   20d74:	bmi	20c10 <__assert_fail@plt+0xf468>
   20d78:	ldr	r0, [r9, #4]
   20d7c:	cmp	r0, #1
   20d80:	blt	20c10 <__assert_fail@plt+0xf468>
   20d84:	mov	sl, #0
   20d88:	b	20da4 <__assert_fail@plt+0xf5fc>
   20d8c:	mov	r6, r5
   20d90:	mov	ip, r7
   20d94:	ldr	r0, [r9, #4]
   20d98:	add	sl, sl, #1
   20d9c:	cmp	sl, r0
   20da0:	bge	20c10 <__assert_fail@plt+0xf468>
   20da4:	ldr	r0, [r9, #8]
   20da8:	ldr	r4, [r0, sl, lsl #2]
   20dac:	add	r5, r4, r4, lsl #1
   20db0:	ldr	r0, [ip, #28]
   20db4:	add	r0, r0, r5, lsl #2
   20db8:	mov	r1, r6
   20dbc:	mov	r7, ip
   20dc0:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   20dc4:	cmp	r0, #0
   20dc8:	bne	20d90 <__assert_fail@plt+0xf5e8>
   20dcc:	ldr	r0, [r7, #24]
   20dd0:	add	r0, r0, r5, lsl #2
   20dd4:	mov	r5, r6
   20dd8:	mov	r1, r6
   20ddc:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   20de0:	cmp	r0, #0
   20de4:	bne	20d8c <__assert_fail@plt+0xf5e4>
   20de8:	mov	r0, r7
   20dec:	mov	r1, r4
   20df0:	mov	r2, r9
   20df4:	ldr	r3, [sp, #4]
   20df8:	bl	21300 <__assert_fail@plt+0xfb58>
   20dfc:	cmp	r0, #0
   20e00:	bne	20e18 <__assert_fail@plt+0xf670>
   20e04:	sub	sl, sl, #1
   20e08:	mov	r6, r5
   20e0c:	ldr	ip, [sp]
   20e10:	b	20d94 <__assert_fail@plt+0xf5ec>
   20e14:	mov	r0, #0
   20e18:	sub	sp, fp, #28
   20e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e24:	add	fp, sp, #28
   20e28:	sub	sp, sp, #84	; 0x54
   20e2c:	mov	r4, r3
   20e30:	mov	r7, r2
   20e34:	str	r1, [sp, #52]	; 0x34
   20e38:	ldr	r1, [r0, #84]	; 0x54
   20e3c:	str	r1, [sp, #48]	; 0x30
   20e40:	str	r0, [sp, #44]	; 0x2c
   20e44:	mov	r1, r2
   20e48:	bl	1e620 <__assert_fail@plt+0xce78>
   20e4c:	str	r0, [sp, #20]
   20e50:	mov	sl, #0
   20e54:	cmn	r0, #1
   20e58:	beq	210f4 <__assert_fail@plt+0xf94c>
   20e5c:	str	sl, [sp, #56]	; 0x38
   20e60:	str	r4, [sp, #24]
   20e64:	ldr	r0, [r4, #4]
   20e68:	cmp	r0, #1
   20e6c:	blt	210f4 <__assert_fail@plt+0xf94c>
   20e70:	add	r0, r7, #1
   20e74:	str	r0, [sp, #8]
   20e78:	add	r0, sp, #56	; 0x38
   20e7c:	add	r0, r0, #16
   20e80:	str	r0, [sp, #28]
   20e84:	ldr	r2, [sp, #52]	; 0x34
   20e88:	add	r0, r2, #16
   20e8c:	str	r0, [sp, #32]
   20e90:	ldr	r0, [sp, #20]
   20e94:	add	r0, r0, r0, lsl #1
   20e98:	str	r0, [sp, #16]
   20e9c:	lsl	r0, r0, #3
   20ea0:	str	r0, [sp, #12]
   20ea4:	mov	r1, #0
   20ea8:	ldr	sl, [sp, #24]
   20eac:	ldr	r3, [sp, #48]	; 0x30
   20eb0:	str	r7, [sp, #40]	; 0x28
   20eb4:	b	20ecc <__assert_fail@plt+0xf724>
   20eb8:	ldr	r1, [sp, #36]	; 0x24
   20ebc:	add	r1, r1, #1
   20ec0:	ldr	r0, [sl, #4]
   20ec4:	cmp	r1, r0
   20ec8:	bge	210dc <__assert_fail@plt+0xf934>
   20ecc:	ldr	r0, [sl, #8]
   20ed0:	str	r1, [sp, #36]	; 0x24
   20ed4:	ldr	r9, [r0, r1, lsl #2]
   20ed8:	ldr	r0, [r3]
   20edc:	add	r0, r0, r9, lsl #3
   20ee0:	ldrb	r0, [r0, #4]
   20ee4:	ldr	r1, [r2, #8]
   20ee8:	cmp	r9, r1
   20eec:	bne	20f08 <__assert_fail@plt+0xf760>
   20ef0:	cmp	r0, #4
   20ef4:	bne	20eb8 <__assert_fail@plt+0xf710>
   20ef8:	ldr	r0, [r2, #12]
   20efc:	cmp	r0, r7
   20f00:	bne	20f10 <__assert_fail@plt+0xf768>
   20f04:	b	20eb8 <__assert_fail@plt+0xf710>
   20f08:	cmp	r0, #4
   20f0c:	bne	20eb8 <__assert_fail@plt+0xf710>
   20f10:	ldr	r0, [sp, #44]	; 0x2c
   20f14:	ldr	r0, [r0, #116]	; 0x74
   20f18:	ldr	r1, [sp, #16]
   20f1c:	add	r5, r0, r1, lsl #3
   20f20:	ldr	r4, [sp, #12]
   20f24:	ldr	r8, [sp, #20]
   20f28:	b	20f48 <__assert_fail@plt+0xf7a0>
   20f2c:	mov	r0, r5
   20f30:	add	r4, r4, #24
   20f34:	add	r5, r0, #24
   20f38:	add	r8, r8, #1
   20f3c:	ldrb	r0, [r0, #20]
   20f40:	cmp	r0, #0
   20f44:	beq	20eb8 <__assert_fail@plt+0xf710>
   20f48:	ldr	r0, [r5]
   20f4c:	cmp	r0, r9
   20f50:	bne	20f2c <__assert_fail@plt+0xf784>
   20f54:	ldr	r0, [r5, #8]
   20f58:	ldr	r1, [r5, #12]
   20f5c:	subs	r0, r1, r0
   20f60:	add	r6, r0, r7
   20f64:	beq	20f74 <__assert_fail@plt+0xf7cc>
   20f68:	ldr	r0, [r3, #12]
   20f6c:	add	r0, r0, r9, lsl #2
   20f70:	b	20f84 <__assert_fail@plt+0xf7dc>
   20f74:	ldr	r0, [r3, #20]
   20f78:	add	r1, r9, r9, lsl #1
   20f7c:	add	r0, r0, r1, lsl #2
   20f80:	ldr	r0, [r0, #8]
   20f84:	ldr	r1, [r2, #12]
   20f88:	cmp	r6, r1
   20f8c:	bgt	20f2c <__assert_fail@plt+0xf784>
   20f90:	ldr	r1, [r2]
   20f94:	ldr	r1, [r1, r6, lsl #2]
   20f98:	cmp	r1, #0
   20f9c:	beq	20f2c <__assert_fail@plt+0xf784>
   20fa0:	ldr	r7, [r0]
   20fa4:	add	r0, r1, #4
   20fa8:	mov	r1, r7
   20fac:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   20fb0:	cmp	r0, #0
   20fb4:	beq	210c8 <__assert_fail@plt+0xf920>
   20fb8:	str	r7, [sp]
   20fbc:	str	r6, [sp, #4]
   20fc0:	ldr	r0, [sp, #44]	; 0x2c
   20fc4:	ldr	r1, [sp, #32]
   20fc8:	mov	r2, r9
   20fcc:	ldr	r7, [sp, #40]	; 0x28
   20fd0:	mov	r3, r7
   20fd4:	bl	214b4 <__assert_fail@plt+0xfd0c>
   20fd8:	cmp	r0, #0
   20fdc:	mov	r0, r5
   20fe0:	ldr	r2, [sp, #52]	; 0x34
   20fe4:	ldr	r3, [sp, #48]	; 0x30
   20fe8:	bne	20f30 <__assert_fail@plt+0xf788>
   20fec:	ldr	r0, [sp, #56]	; 0x38
   20ff0:	cmp	r0, #0
   20ff4:	bne	21028 <__assert_fail@plt+0xf880>
   20ff8:	mov	r0, r2
   20ffc:	mov	r1, #12
   21000:	vld1.32	{d16-d17}, [r0], r1
   21004:	vld1.32	{d18-d19}, [r0]
   21008:	add	r0, sp, #56	; 0x38
   2100c:	vst1.64	{d16-d17}, [r0], r1
   21010:	vst1.32	{d18-d19}, [r0]
   21014:	ldr	r0, [sp, #28]
   21018:	ldr	r1, [sp, #32]
   2101c:	bl	1bf28 <__assert_fail@plt+0xa780>
   21020:	cmp	r0, #0
   21024:	bne	21100 <__assert_fail@plt+0xf958>
   21028:	str	r7, [sp, #68]	; 0x44
   2102c:	str	r9, [sp, #64]	; 0x40
   21030:	ldr	r0, [sp, #28]
   21034:	mov	r1, r8
   21038:	bl	1bd3c <__assert_fail@plt+0xa594>
   2103c:	cmp	r0, #0
   21040:	beq	21108 <__assert_fail@plt+0xf960>
   21044:	mov	r0, r7
   21048:	ldr	r7, [sp, #56]	; 0x38
   2104c:	ldr	r5, [r7, r0, lsl #2]
   21050:	ldr	r0, [sp, #44]	; 0x2c
   21054:	add	r1, sp, #56	; 0x38
   21058:	bl	206c4 <__assert_fail@plt+0xef1c>
   2105c:	cmp	r0, #0
   21060:	bne	21100 <__assert_fail@plt+0xf958>
   21064:	ldr	r0, [sp, #52]	; 0x34
   21068:	ldr	r1, [r0, #4]
   2106c:	cmp	r1, #0
   21070:	beq	2108c <__assert_fail@plt+0xf8e4>
   21074:	ldr	r0, [sp, #48]	; 0x30
   21078:	mov	r2, r7
   2107c:	ldr	r3, [sp, #8]
   21080:	bl	207dc <__assert_fail@plt+0xf034>
   21084:	cmp	r0, #0
   21088:	bne	21100 <__assert_fail@plt+0xf958>
   2108c:	ldr	r0, [sp, #40]	; 0x28
   21090:	str	r5, [r7, r0, lsl #2]
   21094:	mov	r7, r0
   21098:	ldr	r5, [sp, #28]
   2109c:	mov	r0, r5
   210a0:	mov	r1, r8
   210a4:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   210a8:	sub	r1, r0, #1
   210ac:	mov	r0, r5
   210b0:	bl	1c3b8 <__assert_fail@plt+0xac10>
   210b4:	ldr	r0, [sp, #44]	; 0x2c
   210b8:	ldr	r0, [r0, #116]	; 0x74
   210bc:	add	r0, r0, r4
   210c0:	ldr	sl, [sp, #24]
   210c4:	b	210d0 <__assert_fail@plt+0xf928>
   210c8:	mov	r0, r5
   210cc:	ldr	r7, [sp, #40]	; 0x28
   210d0:	ldr	r2, [sp, #52]	; 0x34
   210d4:	ldr	r3, [sp, #48]	; 0x30
   210d8:	b	20f30 <__assert_fail@plt+0xf788>
   210dc:	mov	sl, #0
   210e0:	ldr	r0, [sp, #56]	; 0x38
   210e4:	cmp	r0, #0
   210e8:	beq	210f4 <__assert_fail@plt+0xf94c>
   210ec:	ldr	r0, [sp, #80]	; 0x50
   210f0:	bl	13140 <__assert_fail@plt+0x1998>
   210f4:	mov	r0, sl
   210f8:	sub	sp, fp, #28
   210fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21100:	mov	sl, r0
   21104:	b	210e0 <__assert_fail@plt+0xf938>
   21108:	mov	sl, #12
   2110c:	b	210e0 <__assert_fail@plt+0xf938>
   21110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21114:	add	fp, sp, #28
   21118:	sub	sp, sp, #4
   2111c:	mov	r9, r2
   21120:	mov	r8, r0
   21124:	ldr	r2, [r1, #4]
   21128:	mov	r0, #0
   2112c:	cmp	r2, #0
   21130:	beq	212ec <__assert_fail@plt+0xfb44>
   21134:	mov	sl, r1
   21138:	ldr	r1, [r9, #4]
   2113c:	cmp	r1, #0
   21140:	beq	212ec <__assert_fail@plt+0xfb44>
   21144:	add	r0, r1, r2
   21148:	ldm	r8, {r1, r2}
   2114c:	add	r2, r2, r0
   21150:	cmp	r2, r1
   21154:	ble	21178 <__assert_fail@plt+0xf9d0>
   21158:	add	r4, r1, r0
   2115c:	lsl	r1, r4, #2
   21160:	ldr	r0, [r8, #8]
   21164:	bl	22ae8 <__assert_fail@plt+0x11340>
   21168:	cmp	r0, #0
   2116c:	beq	212f4 <__assert_fail@plt+0xfb4c>
   21170:	str	r4, [r8]
   21174:	str	r0, [r8, #8]
   21178:	ldr	r1, [r8, #4]
   2117c:	ldr	r6, [sl, #4]
   21180:	ldr	r0, [sl, #8]
   21184:	add	r3, r6, r1
   21188:	ldr	r5, [r9, #4]
   2118c:	ldr	r2, [r9, #8]
   21190:	add	ip, r3, r5
   21194:	sub	r7, r1, #1
   21198:	sub	r3, r5, #1
   2119c:	sub	r4, r6, #1
   211a0:	ldr	r1, [r2, r3, lsl #2]
   211a4:	ldr	r6, [r0, r4, lsl #2]
   211a8:	cmp	r6, r1
   211ac:	beq	211c8 <__assert_fail@plt+0xfa20>
   211b0:	blt	211f8 <__assert_fail@plt+0xfa50>
   211b4:	sub	r1, r4, #1
   211b8:	cmp	r4, #0
   211bc:	mov	r4, r1
   211c0:	bgt	211a0 <__assert_fail@plt+0xf9f8>
   211c4:	b	21248 <__assert_fail@plt+0xfaa0>
   211c8:	cmp	r7, #0
   211cc:	bmi	21228 <__assert_fail@plt+0xfa80>
   211d0:	ldr	r5, [r8, #8]
   211d4:	mov	r1, r7
   211d8:	ldr	r7, [r5, r1, lsl #2]
   211dc:	cmp	r7, r6
   211e0:	ble	21204 <__assert_fail@plt+0xfa5c>
   211e4:	sub	r7, r1, #1
   211e8:	cmp	r1, #0
   211ec:	mov	r1, r7
   211f0:	bgt	211d8 <__assert_fail@plt+0xfa30>
   211f4:	b	21228 <__assert_fail@plt+0xfa80>
   211f8:	subs	r3, r3, #1
   211fc:	bge	211a0 <__assert_fail@plt+0xf9f8>
   21200:	b	21248 <__assert_fail@plt+0xfaa0>
   21204:	ldr	r7, [r8, #8]
   21208:	ldr	r7, [r7, r1, lsl #2]
   2120c:	cmp	r7, r6
   21210:	mov	r7, r1
   21214:	bne	21228 <__assert_fail@plt+0xfa80>
   21218:	mov	r7, r1
   2121c:	cmp	r4, #1
   21220:	bge	2123c <__assert_fail@plt+0xfa94>
   21224:	b	21248 <__assert_fail@plt+0xfaa0>
   21228:	ldr	r1, [r8, #8]
   2122c:	sub	ip, ip, #1
   21230:	str	r6, [r1, ip, lsl #2]
   21234:	cmp	r4, #1
   21238:	blt	21248 <__assert_fail@plt+0xfaa0>
   2123c:	subs	r3, r3, #1
   21240:	sub	r4, r4, #1
   21244:	bge	211a0 <__assert_fail@plt+0xf9f8>
   21248:	ldr	r1, [sl, #4]
   2124c:	ldr	r7, [r8, #4]
   21250:	add	r0, r7, r1
   21254:	ldr	r3, [r9, #4]
   21258:	add	r0, r0, r3
   2125c:	sub	r0, r0, #1
   21260:	sub	r6, r0, ip
   21264:	add	r2, r6, #1
   21268:	add	r5, r2, r7
   2126c:	str	r5, [r8, #4]
   21270:	cmp	r7, #1
   21274:	blt	212d8 <__assert_fail@plt+0xfb30>
   21278:	cmp	r6, #0
   2127c:	bmi	212d8 <__assert_fail@plt+0xfb30>
   21280:	add	r3, r7, r3
   21284:	add	r1, r3, r1
   21288:	sub	r3, r1, ip
   2128c:	ldr	r1, [r8, #8]
   21290:	add	r3, r1, r3, lsl #2
   21294:	sub	r7, r7, #1
   21298:	ldr	r6, [r1, r7, lsl #2]
   2129c:	ldr	r5, [r1, r0, lsl #2]
   212a0:	cmp	r5, r6
   212a4:	bgt	212c0 <__assert_fail@plt+0xfb18>
   212a8:	str	r6, [r3, r7, lsl #2]
   212ac:	sub	r6, r7, #1
   212b0:	cmp	r7, #0
   212b4:	mov	r7, r6
   212b8:	bgt	21298 <__assert_fail@plt+0xfaf0>
   212bc:	b	212d8 <__assert_fail@plt+0xfb30>
   212c0:	str	r5, [r3, r7, lsl #2]
   212c4:	sub	r3, r3, #4
   212c8:	subs	r2, r2, #1
   212cc:	sub	r0, r0, #1
   212d0:	bne	21298 <__assert_fail@plt+0xfaf0>
   212d4:	mov	r2, #0
   212d8:	ldr	r0, [r8, #8]
   212dc:	add	r1, r0, ip, lsl #2
   212e0:	lsl	r2, r2, #2
   212e4:	bl	114cc <memcpy@plt>
   212e8:	mov	r0, #0
   212ec:	sub	sp, fp, #28
   212f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212f4:	mov	r0, #12
   212f8:	sub	sp, fp, #28
   212fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21304:	add	fp, sp, #28
   21308:	sub	sp, sp, #28
   2130c:	str	r3, [sp]
   21310:	mov	r6, r1
   21314:	str	r0, [sp, #12]
   21318:	ldr	r0, [r0, #28]
   2131c:	mov	r4, #0
   21320:	str	r4, [sp, #20]
   21324:	str	r4, [sp, #16]
   21328:	str	r4, [sp, #24]
   2132c:	add	r1, r1, r1, lsl #1
   21330:	add	r1, r0, r1, lsl #2
   21334:	mov	r8, r1
   21338:	ldr	r0, [r8, #4]!
   2133c:	cmp	r0, #1
   21340:	blt	21498 <__assert_fail@plt+0xfcf0>
   21344:	str	r2, [sp, #4]
   21348:	str	r1, [sp, #8]
   2134c:	add	sl, r1, #8
   21350:	mov	r5, #0
   21354:	b	2139c <__assert_fail@plt+0xfbf4>
   21358:	ldr	r0, [sp, #4]
   2135c:	mov	r1, r9
   21360:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21364:	cmp	r0, #0
   21368:	beq	21400 <__assert_fail@plt+0xfc58>
   2136c:	ldr	r0, [sp, #12]
   21370:	ldr	r0, [r0, #28]
   21374:	add	r2, r0, r7, lsl #2
   21378:	add	r0, sp, #16
   2137c:	ldr	r1, [sp]
   21380:	bl	21110 <__assert_fail@plt+0xf968>
   21384:	cmp	r0, #0
   21388:	bne	214ac <__assert_fail@plt+0xfd04>
   2138c:	add	r5, r5, #1
   21390:	ldr	r0, [r8]
   21394:	cmp	r5, r0
   21398:	bge	21434 <__assert_fail@plt+0xfc8c>
   2139c:	ldr	r0, [sl]
   213a0:	ldr	r0, [r0, r5, lsl #2]
   213a4:	cmp	r0, r6
   213a8:	beq	2138c <__assert_fail@plt+0xfbe4>
   213ac:	ldr	r1, [sp, #12]
   213b0:	ldr	r1, [r1]
   213b4:	add	r1, r1, r0, lsl #3
   213b8:	ldrb	r1, [r1, #4]
   213bc:	tst	r1, #8
   213c0:	beq	2138c <__assert_fail@plt+0xfbe4>
   213c4:	ldr	r1, [sp, #12]
   213c8:	ldr	r1, [r1, #20]
   213cc:	add	r7, r0, r0, lsl #1
   213d0:	add	r0, r1, r7, lsl #2
   213d4:	ldr	r1, [r0, #4]
   213d8:	ldr	r0, [r0, #8]
   213dc:	ldr	r9, [r0]
   213e0:	mvn	r4, #0
   213e4:	cmp	r1, #2
   213e8:	ldrge	r4, [r0, #4]
   213ec:	ldr	r0, [sp, #8]
   213f0:	mov	r1, r9
   213f4:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   213f8:	cmp	r0, #0
   213fc:	beq	21358 <__assert_fail@plt+0xfbb0>
   21400:	cmp	r4, #1
   21404:	blt	2138c <__assert_fail@plt+0xfbe4>
   21408:	ldr	r0, [sp, #8]
   2140c:	mov	r1, r4
   21410:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21414:	cmp	r0, #0
   21418:	bne	2138c <__assert_fail@plt+0xfbe4>
   2141c:	ldr	r0, [sp, #4]
   21420:	mov	r1, r4
   21424:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21428:	cmp	r0, #0
   2142c:	bne	2136c <__assert_fail@plt+0xfbc4>
   21430:	b	2138c <__assert_fail@plt+0xfbe4>
   21434:	cmp	r0, #1
   21438:	blt	21494 <__assert_fail@plt+0xfcec>
   2143c:	mov	r6, #0
   21440:	add	r4, sp, #16
   21444:	ldr	r7, [sp, #4]
   21448:	b	2145c <__assert_fail@plt+0xfcb4>
   2144c:	add	r6, r6, #1
   21450:	ldr	r0, [r8]
   21454:	cmp	r6, r0
   21458:	bge	21494 <__assert_fail@plt+0xfcec>
   2145c:	ldr	r0, [sl]
   21460:	ldr	r5, [r0, r6, lsl #2]
   21464:	mov	r0, r4
   21468:	mov	r1, r5
   2146c:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21470:	cmp	r0, #0
   21474:	bne	2144c <__assert_fail@plt+0xfca4>
   21478:	mov	r0, r7
   2147c:	mov	r1, r5
   21480:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21484:	sub	r1, r0, #1
   21488:	mov	r0, r7
   2148c:	bl	1c3b8 <__assert_fail@plt+0xac10>
   21490:	b	2144c <__assert_fail@plt+0xfca4>
   21494:	mov	r4, #0
   21498:	ldr	r0, [sp, #24]
   2149c:	bl	13140 <__assert_fail@plt+0x1998>
   214a0:	mov	r0, r4
   214a4:	sub	sp, fp, #28
   214a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214ac:	mov	r4, r0
   214b0:	b	21498 <__assert_fail@plt+0xfcf0>
   214b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214b8:	add	fp, sp, #28
   214bc:	sub	sp, sp, #20
   214c0:	str	r2, [sp, #12]
   214c4:	mov	r6, r1
   214c8:	mov	r7, r0
   214cc:	str	r3, [sp, #16]
   214d0:	mov	r1, r3
   214d4:	bl	1e620 <__assert_fail@plt+0xce78>
   214d8:	str	r0, [sp, #8]
   214dc:	ldr	r1, [fp, #12]
   214e0:	mov	r0, r7
   214e4:	bl	1e620 <__assert_fail@plt+0xce78>
   214e8:	mov	r4, r0
   214ec:	ldr	r0, [r6, #4]
   214f0:	cmp	r0, #1
   214f4:	blt	21578 <__assert_fail@plt+0xfdd0>
   214f8:	ldr	sl, [r7, #84]	; 0x54
   214fc:	mov	r5, #0
   21500:	ldr	r0, [r6, #8]
   21504:	ldr	r1, [r0, r5, lsl #2]
   21508:	add	r0, r1, r1, lsl #1
   2150c:	ldr	r2, [r7, #116]	; 0x74
   21510:	ldr	r0, [r2, r0, lsl #3]
   21514:	ldr	r2, [sl]
   21518:	ldr	r9, [r2, r0, lsl #3]
   2151c:	ldr	r0, [sp, #16]
   21520:	str	r0, [sp]
   21524:	ldr	r0, [sp, #8]
   21528:	str	r0, [sp, #4]
   2152c:	mov	r0, r7
   21530:	mov	r2, r9
   21534:	ldr	r3, [sp, #12]
   21538:	bl	21590 <__assert_fail@plt+0xfde8>
   2153c:	mov	r8, r0
   21540:	ldr	r0, [r6, #8]
   21544:	ldr	r1, [r0, r5, lsl #2]
   21548:	ldr	r0, [fp, #12]
   2154c:	stm	sp, {r0, r4}
   21550:	mov	r0, r7
   21554:	mov	r2, r9
   21558:	ldr	r3, [fp, #8]
   2155c:	bl	21590 <__assert_fail@plt+0xfde8>
   21560:	cmp	r0, r8
   21564:	bne	21584 <__assert_fail@plt+0xfddc>
   21568:	add	r5, r5, #1
   2156c:	ldr	r0, [r6, #4]
   21570:	cmp	r5, r0
   21574:	blt	21500 <__assert_fail@plt+0xfd58>
   21578:	mov	r0, #0
   2157c:	sub	sp, fp, #28
   21580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21584:	mov	r0, #1
   21588:	sub	sp, fp, #28
   2158c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21590:	push	{r4, r5, fp, lr}
   21594:	add	fp, sp, #8
   21598:	sub	sp, sp, #8
   2159c:	ldr	r4, [r0, #116]	; 0x74
   215a0:	add	r1, r1, r1, lsl #1
   215a4:	add	r4, r4, r1, lsl #3
   215a8:	ldr	ip, [r4, #8]
   215ac:	mvn	r1, #0
   215b0:	ldr	lr, [fp, #8]
   215b4:	cmp	ip, lr
   215b8:	bgt	21608 <__assert_fail@plt+0xfe60>
   215bc:	ldr	r4, [r4, #12]
   215c0:	mov	r1, #1
   215c4:	cmp	r4, lr
   215c8:	blt	21608 <__assert_fail@plt+0xfe60>
   215cc:	sub	r1, r4, lr
   215d0:	clz	r1, r1
   215d4:	lsr	r4, r1, #5
   215d8:	mov	r5, #1
   215dc:	lsl	r1, r4, #1
   215e0:	cmp	ip, lr
   215e4:	orreq	r1, r5, r4, lsl #1
   215e8:	cmp	r1, #0
   215ec:	beq	21604 <__assert_fail@plt+0xfe5c>
   215f0:	ldr	r5, [fp, #12]
   215f4:	str	r5, [sp]
   215f8:	bl	21614 <__assert_fail@plt+0xfe6c>
   215fc:	sub	sp, fp, #8
   21600:	pop	{r4, r5, fp, pc}
   21604:	mov	r1, #0
   21608:	mov	r0, r1
   2160c:	sub	sp, fp, #8
   21610:	pop	{r4, r5, fp, pc}
   21614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21618:	add	fp, sp, #28
   2161c:	sub	sp, sp, #36	; 0x24
   21620:	mov	r6, r2
   21624:	mov	r5, r1
   21628:	mov	r7, r0
   2162c:	ldr	r4, [r0, #84]	; 0x54
   21630:	ldr	r0, [r4, #24]
   21634:	str	r3, [sp, #32]
   21638:	add	r1, r3, r3, lsl #1
   2163c:	add	r0, r0, r1, lsl #2
   21640:	mov	r2, r0
   21644:	ldr	r1, [r2, #4]!
   21648:	str	r2, [sp, #24]
   2164c:	cmp	r1, #1
   21650:	blt	217f8 <__assert_fail@plt+0x10050>
   21654:	mov	r1, #1
   21658:	mvn	r2, r1, lsl r6
   2165c:	str	r2, [sp, #16]
   21660:	lsl	r1, r1, r6
   21664:	str	r1, [sp, #20]
   21668:	mov	sl, #0
   2166c:	cmp	r6, #31
   21670:	mov	r1, #0
   21674:	movwgt	r1, #1
   21678:	and	r2, r5, #2
   2167c:	str	r2, [sp, #8]
   21680:	orr	r1, r1, r2, lsr #1
   21684:	str	r1, [sp, #12]
   21688:	add	r0, r0, #8
   2168c:	str	r0, [sp, #28]
   21690:	and	r0, r5, #1
   21694:	str	r0, [sp, #4]
   21698:	b	216b0 <__assert_fail@plt+0xff08>
   2169c:	ldr	r0, [sp, #24]
   216a0:	ldr	r0, [r0]
   216a4:	add	sl, sl, #1
   216a8:	cmp	sl, r0
   216ac:	bge	217f8 <__assert_fail@plt+0x10050>
   216b0:	ldr	r0, [sp, #28]
   216b4:	ldr	r0, [r0]
   216b8:	ldr	r8, [r0, sl, lsl #2]
   216bc:	ldr	r0, [r4]
   216c0:	add	r1, r0, r8, lsl #3
   216c4:	ldrb	r1, [r1, #4]
   216c8:	cmp	r1, #9
   216cc:	beq	217b8 <__assert_fail@plt+0x10010>
   216d0:	cmp	r1, #8
   216d4:	beq	217d4 <__assert_fail@plt+0x1002c>
   216d8:	cmp	r1, #4
   216dc:	bne	2169c <__assert_fail@plt+0xfef4>
   216e0:	ldr	r0, [fp, #8]
   216e4:	cmn	r0, #1
   216e8:	beq	2169c <__assert_fail@plt+0xfef4>
   216ec:	ldr	r0, [r7, #116]	; 0x74
   216f0:	ldr	r1, [fp, #8]
   216f4:	add	r1, r1, r1, lsl #1
   216f8:	add	r0, r0, r1, lsl #3
   216fc:	add	r9, r0, #16
   21700:	b	21724 <__assert_fail@plt+0xff7c>
   21704:	ldr	r0, [r9]
   21708:	ldr	r1, [sp, #16]
   2170c:	and	r0, r0, r1
   21710:	str	r0, [r9]
   21714:	ldrb	r0, [r9, #4]
   21718:	add	r9, r9, #24
   2171c:	cmp	r0, #0
   21720:	beq	2169c <__assert_fail@plt+0xfef4>
   21724:	ldr	r0, [r9, #-16]
   21728:	cmp	r0, r8
   2172c:	bne	21714 <__assert_fail@plt+0xff6c>
   21730:	cmp	r6, #31
   21734:	bgt	21748 <__assert_fail@plt+0xffa0>
   21738:	ldr	r0, [r9]
   2173c:	ldr	r1, [sp, #20]
   21740:	tst	r0, r1
   21744:	beq	21714 <__assert_fail@plt+0xff6c>
   21748:	ldr	r0, [r4, #20]
   2174c:	add	r1, r8, r8, lsl #1
   21750:	add	r0, r0, r1, lsl #2
   21754:	ldr	r0, [r0, #8]
   21758:	ldr	r3, [r0]
   2175c:	ldr	r0, [sp, #32]
   21760:	cmp	r3, r0
   21764:	beq	21804 <__assert_fail@plt+0x1005c>
   21768:	ldr	r0, [fp, #8]
   2176c:	str	r0, [sp]
   21770:	mov	r0, r7
   21774:	mov	r1, r5
   21778:	mov	r2, r6
   2177c:	bl	21614 <__assert_fail@plt+0xfe6c>
   21780:	cmp	r0, #0
   21784:	beq	2179c <__assert_fail@plt+0xfff4>
   21788:	cmn	r0, #1
   2178c:	beq	21818 <__assert_fail@plt+0x10070>
   21790:	cmp	r6, #31
   21794:	ble	21704 <__assert_fail@plt+0xff5c>
   21798:	b	21714 <__assert_fail@plt+0xff6c>
   2179c:	ldr	r0, [sp, #12]
   217a0:	cmp	r0, #0
   217a4:	beq	21704 <__assert_fail@plt+0xff5c>
   217a8:	ldr	r0, [sp, #8]
   217ac:	cmp	r0, #0
   217b0:	beq	21714 <__assert_fail@plt+0xff6c>
   217b4:	b	21814 <__assert_fail@plt+0x1006c>
   217b8:	ldr	r1, [sp, #8]
   217bc:	cmp	r1, #0
   217c0:	beq	2169c <__assert_fail@plt+0xfef4>
   217c4:	ldr	r0, [r0, r8, lsl #3]
   217c8:	cmp	r0, r6
   217cc:	bne	2169c <__assert_fail@plt+0xfef4>
   217d0:	b	21814 <__assert_fail@plt+0x1006c>
   217d4:	ldr	r1, [sp, #4]
   217d8:	cmp	r1, #0
   217dc:	beq	2169c <__assert_fail@plt+0xfef4>
   217e0:	ldr	r0, [r0, r8, lsl #3]
   217e4:	cmp	r0, r6
   217e8:	bne	2169c <__assert_fail@plt+0xfef4>
   217ec:	mvn	r0, #0
   217f0:	sub	sp, fp, #28
   217f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217f8:	ubfx	r0, r5, #1, #1
   217fc:	sub	sp, fp, #28
   21800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21804:	ldr	r0, [sp, #4]
   21808:	rsb	r0, r0, #0
   2180c:	sub	sp, fp, #28
   21810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21814:	mov	r0, #0
   21818:	sub	sp, fp, #28
   2181c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21820:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21824:	add	fp, sp, #24
   21828:	mov	r7, r3
   2182c:	mov	r5, r2
   21830:	mov	r8, r1
   21834:	mov	r2, r0
   21838:	ldr	r6, [r0, #84]	; 0x54
   2183c:	mov	r0, r6
   21840:	mov	r1, r5
   21844:	bl	1f600 <__assert_fail@plt+0xde58>
   21848:	mov	r4, r0
   2184c:	cmp	r0, #1
   21850:	blt	2188c <__assert_fail@plt+0x100e4>
   21854:	ldr	r1, [fp, #8]
   21858:	add	r0, r4, r7
   2185c:	cmp	r0, r1
   21860:	bgt	2188c <__assert_fail@plt+0x100e4>
   21864:	ldr	r1, [r8]
   21868:	ldr	r0, [r1, r0, lsl #2]
   2186c:	cmp	r0, #0
   21870:	beq	21894 <__assert_fail@plt+0x100ec>
   21874:	ldr	r1, [r6, #12]
   21878:	ldr	r1, [r1, r5, lsl #2]
   2187c:	add	r0, r0, #4
   21880:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21884:	cmp	r0, #0
   21888:	moveq	r4, #0
   2188c:	mov	r0, r4
   21890:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21894:	mov	r4, #0
   21898:	mov	r0, r4
   2189c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   218a0:	mov	r1, #16
   218a4:	mov	r2, #0
   218a8:	add	r3, r0, #12
   218ac:	str	r2, [r0]
   218b0:	stmib	r0, {r1, r3}
   218b4:	bx	lr
   218b8:	push	{r4, sl, fp, lr}
   218bc:	add	fp, sp, #8
   218c0:	mov	r4, r0
   218c4:	ldr	r0, [r0]
   218c8:	cmp	r0, r1
   218cc:	bcs	21900 <__assert_fail@plt+0x10158>
   218d0:	add	r2, r4, #12
   218d4:	mov	r0, r4
   218d8:	mov	r3, #8
   218dc:	bl	22ee4 <__assert_fail@plt+0x1173c>
   218e0:	mov	r1, r0
   218e4:	mov	r0, #1
   218e8:	cmp	r1, #0
   218ec:	popne	{r4, sl, fp, pc}
   218f0:	mov	r0, r4
   218f4:	bl	21e10 <__assert_fail@plt+0x10668>
   218f8:	mov	r0, #0
   218fc:	pop	{r4, sl, fp, pc}
   21900:	str	r1, [r4]
   21904:	mov	r0, #1
   21908:	pop	{r4, sl, fp, pc}
   2190c:	push	{r4, sl, fp, lr}
   21910:	add	fp, sp, #8
   21914:	mov	r4, r0
   21918:	bl	21e38 <__assert_fail@plt+0x10690>
   2191c:	mov	r0, r4
   21920:	pop	{r4, sl, fp, lr}
   21924:	b	218a0 <__assert_fail@plt+0x100f8>
   21928:	cmp	r0, #0
   2192c:	bxeq	lr
   21930:	push	{r4, r5, r6, sl, fp, lr}
   21934:	add	fp, sp, #16
   21938:	mov	r4, r0
   2193c:	ldr	r1, [r0]
   21940:	ldr	r0, [r0, #8]
   21944:	cmp	r1, #1
   21948:	blt	21988 <__assert_fail@plt+0x101e0>
   2194c:	mov	r5, #0
   21950:	mov	r6, #0
   21954:	add	r0, r0, r5
   21958:	ldr	r0, [r0, #20]
   2195c:	bl	13140 <__assert_fail@plt+0x1998>
   21960:	ldr	r0, [r4, #8]
   21964:	add	r0, r0, r5
   21968:	ldr	r0, [r0, #8]
   2196c:	bl	13140 <__assert_fail@plt+0x1998>
   21970:	add	r5, r5, #24
   21974:	add	r6, r6, #1
   21978:	ldr	r1, [r4]
   2197c:	ldr	r0, [r4, #8]
   21980:	cmp	r6, r1
   21984:	blt	21954 <__assert_fail@plt+0x101ac>
   21988:	pop	{r4, r5, r6, sl, fp, lr}
   2198c:	b	13140 <__assert_fail@plt+0x1998>
   21990:	ldr	r0, [r0, #8]
   21994:	bx	lr
   21998:	push	{r4, r5, fp, lr}
   2199c:	add	fp, sp, #8
   219a0:	ldr	r4, [r0]
   219a4:	add	r0, r4, r3, lsl #3
   219a8:	ldr	r0, [r0, #4]
   219ac:	uxtb	r5, r0
   219b0:	ldr	lr, [fp, #12]
   219b4:	ldr	ip, [fp, #8]
   219b8:	cmp	r5, #9
   219bc:	beq	219e8 <__assert_fail@plt+0x10240>
   219c0:	cmp	r5, #8
   219c4:	bne	21a4c <__assert_fail@plt+0x102a4>
   219c8:	ldr	r0, [r4, r3, lsl #3]
   219cc:	add	r0, r0, #1
   219d0:	cmp	r0, lr
   219d4:	bge	21a4c <__assert_fail@plt+0x102a4>
   219d8:	str	ip, [r1, r0, lsl #3]!
   219dc:	mvn	r0, #0
   219e0:	str	r0, [r1, #4]
   219e4:	pop	{r4, r5, fp, pc}
   219e8:	ldr	r3, [r4, r3, lsl #3]
   219ec:	add	r3, r3, #1
   219f0:	cmp	r3, lr
   219f4:	popge	{r4, r5, fp, pc}
   219f8:	ldr	r4, [r1, r3, lsl #3]
   219fc:	cmp	r4, ip
   21a00:	bge	21a18 <__assert_fail@plt+0x10270>
   21a04:	add	r0, r1, r3, lsl #3
   21a08:	str	ip, [r0, #4]
   21a0c:	lsl	r3, lr, #3
   21a10:	mov	r0, r2
   21a14:	b	21a38 <__assert_fail@plt+0x10290>
   21a18:	tst	r0, #524288	; 0x80000
   21a1c:	beq	21a44 <__assert_fail@plt+0x1029c>
   21a20:	ldr	r0, [r2, r3, lsl #3]
   21a24:	cmn	r0, #1
   21a28:	beq	21a44 <__assert_fail@plt+0x1029c>
   21a2c:	lsl	r3, lr, #3
   21a30:	mov	r0, r1
   21a34:	mov	r1, r2
   21a38:	mov	r2, r3
   21a3c:	pop	{r4, r5, fp, lr}
   21a40:	b	114cc <memcpy@plt>
   21a44:	add	r0, r1, r3, lsl #3
   21a48:	str	ip, [r0, #4]
   21a4c:	pop	{r4, r5, fp, pc}
   21a50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21a54:	add	fp, sp, #24
   21a58:	mov	r4, r0
   21a5c:	mvn	r0, #0
   21a60:	cmp	r4, #0
   21a64:	beq	21b04 <__assert_fail@plt+0x1035c>
   21a68:	mov	r5, r2
   21a6c:	ldr	r2, [r4]
   21a70:	cmp	r2, #0
   21a74:	beq	21b04 <__assert_fail@plt+0x1035c>
   21a78:	ldr	r9, [fp, #12]
   21a7c:	ldr	r8, [fp, #8]
   21a80:	sub	r0, r2, #1
   21a84:	str	r0, [r4]
   21a88:	ldr	r2, [r4, #8]
   21a8c:	add	r6, r0, r0, lsl #1
   21a90:	ldr	r0, [r2, r6, lsl #3]!
   21a94:	str	r0, [r1]
   21a98:	ldr	r1, [r2, #8]
   21a9c:	lsl	r7, r5, #3
   21aa0:	mov	r0, r3
   21aa4:	mov	r2, r7
   21aa8:	bl	114cc <memcpy@plt>
   21aac:	ldr	r0, [r4, #8]
   21ab0:	add	r0, r0, r6, lsl #3
   21ab4:	ldr	r0, [r0, #8]
   21ab8:	add	r1, r0, r5, lsl #3
   21abc:	mov	r0, r8
   21ac0:	mov	r2, r7
   21ac4:	bl	114cc <memcpy@plt>
   21ac8:	ldr	r0, [r9, #8]
   21acc:	bl	13140 <__assert_fail@plt+0x1998>
   21ad0:	ldr	r0, [r4, #8]
   21ad4:	add	r0, r0, r6, lsl #3
   21ad8:	ldr	r0, [r0, #8]
   21adc:	bl	13140 <__assert_fail@plt+0x1998>
   21ae0:	ldr	r0, [r4, #8]
   21ae4:	add	r0, r0, r6, lsl #3
   21ae8:	vldr	d16, [r0, #12]
   21aec:	ldr	r0, [r0, #20]
   21af0:	str	r0, [r9, #8]
   21af4:	vstr	d16, [r9]
   21af8:	ldr	r0, [r4, #8]
   21afc:	add	r0, r0, r6, lsl #3
   21b00:	ldr	r0, [r0, #4]
   21b04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b0c:	add	fp, sp, #28
   21b10:	sub	sp, sp, #20
   21b14:	mov	r9, r3
   21b18:	mov	r5, r0
   21b1c:	ldr	r4, [r0, #84]	; 0x54
   21b20:	ldr	r3, [r4]
   21b24:	ldr	sl, [fp, #12]
   21b28:	add	r0, r3, sl, lsl #3
   21b2c:	ldr	r7, [r0, #4]
   21b30:	ldr	r0, [fp, #16]
   21b34:	ldr	r6, [fp, #8]
   21b38:	tst	r7, #8
   21b3c:	bne	21bfc <__assert_fail@plt+0x10454>
   21b40:	tst	r7, #1048576	; 0x100000
   21b44:	bne	21cf0 <__assert_fail@plt+0x10548>
   21b48:	mov	ip, r1
   21b4c:	mov	r9, r6
   21b50:	uxtb	r1, r7
   21b54:	cmp	r1, #4
   21b58:	bne	21d14 <__assert_fail@plt+0x1056c>
   21b5c:	ldr	r0, [r3, sl, lsl #3]
   21b60:	add	r0, r0, #1
   21b64:	mov	r7, #0
   21b68:	mov	r6, ip
   21b6c:	cmp	r0, ip
   21b70:	mov	r3, r2
   21b74:	bge	21b88 <__assert_fail@plt+0x103e0>
   21b78:	mov	r1, r3
   21b7c:	ldr	r2, [r1, r0, lsl #3]!
   21b80:	ldr	r1, [r1, #4]
   21b84:	sub	r7, r1, r2
   21b88:	ldr	r1, [fp, #20]
   21b8c:	cmp	r1, #0
   21b90:	beq	21d44 <__assert_fail@plt+0x1059c>
   21b94:	mvn	r8, #0
   21b98:	cmp	r0, r6
   21b9c:	bge	21db0 <__assert_fail@plt+0x10608>
   21ba0:	ldr	r1, [r3, r0, lsl #3]
   21ba4:	cmn	r1, #1
   21ba8:	beq	21db0 <__assert_fail@plt+0x10608>
   21bac:	add	r0, r3, r0, lsl #3
   21bb0:	ldr	r0, [r0, #4]
   21bb4:	cmn	r0, #1
   21bb8:	beq	21db0 <__assert_fail@plt+0x10608>
   21bbc:	cmp	r7, #0
   21bc0:	beq	21dbc <__assert_fail@plt+0x10614>
   21bc4:	mov	r0, r9
   21bc8:	ldr	r2, [r9]
   21bcc:	ldr	r0, [r5, #28]
   21bd0:	sub	r0, r0, r2
   21bd4:	cmp	r0, r7
   21bd8:	blt	21db0 <__assert_fail@plt+0x10608>
   21bdc:	ldr	r3, [r5, #4]
   21be0:	add	r0, r3, r1
   21be4:	add	r1, r3, r2
   21be8:	mov	r2, r7
   21bec:	bl	1164c <bcmp@plt>
   21bf0:	cmp	r0, #0
   21bf4:	bne	21db0 <__assert_fail@plt+0x10608>
   21bf8:	b	21d4c <__assert_fail@plt+0x105a4>
   21bfc:	str	r1, [sp, #12]
   21c00:	str	r2, [sp, #16]
   21c04:	ldr	r2, [r6]
   21c08:	ldr	r1, [r5, #100]	; 0x64
   21c0c:	ldr	r5, [r1, r2, lsl #2]
   21c10:	ldr	r4, [r4, #20]
   21c14:	mov	r1, sl
   21c18:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21c1c:	cmp	r0, #0
   21c20:	bne	21c3c <__assert_fail@plt+0x10494>
   21c24:	ldr	r0, [fp, #16]
   21c28:	mov	r1, sl
   21c2c:	bl	1bd3c <__assert_fail@plt+0xa594>
   21c30:	mvn	r8, #1
   21c34:	cmp	r0, #0
   21c38:	beq	21db0 <__assert_fail@plt+0x10608>
   21c3c:	add	r0, sl, sl, lsl #1
   21c40:	add	r1, r4, r0, lsl #2
   21c44:	mov	r0, r1
   21c48:	ldr	r2, [r0, #4]!
   21c4c:	cmp	r2, #1
   21c50:	blt	21d3c <__assert_fail@plt+0x10594>
   21c54:	add	sl, r5, #4
   21c58:	ldr	r7, [r1, #8]
   21c5c:	ldr	r6, [r0]
   21c60:	mov	r5, #0
   21c64:	mvn	r8, #0
   21c68:	b	21c7c <__assert_fail@plt+0x104d4>
   21c6c:	mov	r8, r4
   21c70:	add	r5, r5, #1
   21c74:	cmp	r5, r6
   21c78:	bge	21db0 <__assert_fail@plt+0x10608>
   21c7c:	ldr	r4, [r7, r5, lsl #2]
   21c80:	mov	r0, sl
   21c84:	mov	r1, r4
   21c88:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21c8c:	cmp	r0, #0
   21c90:	beq	21c70 <__assert_fail@plt+0x104c8>
   21c94:	cmn	r8, #1
   21c98:	beq	21c6c <__assert_fail@plt+0x104c4>
   21c9c:	ldr	r5, [fp, #16]
   21ca0:	mov	r0, r5
   21ca4:	mov	r1, r8
   21ca8:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21cac:	cmp	r0, #0
   21cb0:	bne	21dac <__assert_fail@plt+0x10604>
   21cb4:	ldr	r0, [fp, #20]
   21cb8:	cmp	r0, #0
   21cbc:	beq	21db0 <__assert_fail@plt+0x10608>
   21cc0:	ldr	r1, [fp, #8]
   21cc4:	ldr	r1, [r1]
   21cc8:	ldr	r2, [sp, #16]
   21ccc:	stm	sp, {r2, r9}
   21cd0:	str	r5, [sp, #8]
   21cd4:	mov	r2, r4
   21cd8:	ldr	r3, [sp, #12]
   21cdc:	bl	21e50 <__assert_fail@plt+0x106a8>
   21ce0:	mvn	r4, #1
   21ce4:	cmp	r0, #0
   21ce8:	movne	r8, r4
   21cec:	b	21db0 <__assert_fail@plt+0x10608>
   21cf0:	mov	r9, r6
   21cf4:	ldr	r3, [r6]
   21cf8:	mov	r0, r4
   21cfc:	mov	r1, sl
   21d00:	mov	r2, r5
   21d04:	bl	1f600 <__assert_fail@plt+0xde58>
   21d08:	mov	r7, r0
   21d0c:	cmp	r0, #0
   21d10:	bne	21d4c <__assert_fail@plt+0x105a4>
   21d14:	ldr	r0, [r4]
   21d18:	add	r1, r0, sl, lsl #3
   21d1c:	ldr	r2, [r9]
   21d20:	mov	r0, r5
   21d24:	bl	1f8dc <__assert_fail@plt+0xe134>
   21d28:	mvn	r8, #0
   21d2c:	mov	r7, #1
   21d30:	cmp	r0, #0
   21d34:	bne	21d4c <__assert_fail@plt+0x105a4>
   21d38:	b	21db0 <__assert_fail@plt+0x10608>
   21d3c:	mvn	r8, #0
   21d40:	b	21db0 <__assert_fail@plt+0x10608>
   21d44:	cmp	r7, #0
   21d48:	beq	21dbc <__assert_fail@plt+0x10614>
   21d4c:	ldr	r0, [r4, #12]
   21d50:	ldr	r4, [r0, sl, lsl #2]
   21d54:	ldr	r0, [r9]
   21d58:	add	r0, r0, r7
   21d5c:	str	r0, [r9]
   21d60:	ldr	r1, [fp, #20]
   21d64:	cmp	r1, #0
   21d68:	beq	21da0 <__assert_fail@plt+0x105f8>
   21d6c:	ldr	r1, [r5, #92]	; 0x5c
   21d70:	mvn	r8, #0
   21d74:	cmp	r0, r1
   21d78:	bgt	21db0 <__assert_fail@plt+0x10608>
   21d7c:	ldr	r1, [r5, #100]	; 0x64
   21d80:	ldr	r0, [r1, r0, lsl #2]
   21d84:	cmp	r0, #0
   21d88:	beq	21db0 <__assert_fail@plt+0x10608>
   21d8c:	add	r0, r0, #4
   21d90:	mov	r1, r4
   21d94:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21d98:	cmp	r0, #0
   21d9c:	beq	21db0 <__assert_fail@plt+0x10608>
   21da0:	mov	r0, #0
   21da4:	ldr	r1, [fp, #16]
   21da8:	str	r0, [r1, #4]
   21dac:	mov	r8, r4
   21db0:	mov	r0, r8
   21db4:	sub	sp, fp, #28
   21db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dbc:	ldr	r0, [fp, #16]
   21dc0:	mov	r1, sl
   21dc4:	bl	1bd3c <__assert_fail@plt+0xa594>
   21dc8:	cmp	r0, #0
   21dcc:	beq	21e08 <__assert_fail@plt+0x10660>
   21dd0:	ldr	r0, [r4, #20]
   21dd4:	add	r1, sl, sl, lsl #1
   21dd8:	add	r0, r0, r1, lsl #2
   21ddc:	ldr	r0, [r0, #8]
   21de0:	ldr	r8, [r0]
   21de4:	ldr	r0, [r9]
   21de8:	ldr	r1, [r5, #100]	; 0x64
   21dec:	ldr	r0, [r1, r0, lsl #2]
   21df0:	add	r0, r0, #4
   21df4:	mov	r1, r8
   21df8:	bl	1bfa4 <__assert_fail@plt+0xa7fc>
   21dfc:	cmp	r0, #0
   21e00:	bne	21db0 <__assert_fail@plt+0x10608>
   21e04:	b	21d14 <__assert_fail@plt+0x1056c>
   21e08:	mvn	r8, #1
   21e0c:	b	21db0 <__assert_fail@plt+0x10608>
   21e10:	push	{r4, sl, fp, lr}
   21e14:	add	fp, sp, #8
   21e18:	mov	r4, r0
   21e1c:	bl	21e38 <__assert_fail@plt+0x10690>
   21e20:	mvn	r0, #0
   21e24:	mov	r1, #0
   21e28:	add	r2, r4, #12
   21e2c:	str	r1, [r4]
   21e30:	stmib	r4, {r0, r2}
   21e34:	pop	{r4, sl, fp, pc}
   21e38:	mov	r1, r0
   21e3c:	ldr	r0, [r0, #8]
   21e40:	add	r1, r1, #12
   21e44:	cmp	r0, r1
   21e48:	bxeq	lr
   21e4c:	b	13140 <__assert_fail@plt+0x1998>
   21e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e54:	add	fp, sp, #28
   21e58:	sub	sp, sp, #12
   21e5c:	mov	r6, r3
   21e60:	mov	r9, r2
   21e64:	mov	r5, r1
   21e68:	mov	r4, r0
   21e6c:	ldr	r7, [r0]
   21e70:	ldr	r1, [r0, #4]
   21e74:	add	r0, r7, #1
   21e78:	str	r0, [r4]
   21e7c:	ldr	r2, [fp, #16]
   21e80:	str	r2, [sp, #8]
   21e84:	ldr	r2, [fp, #12]
   21e88:	str	r2, [sp, #4]
   21e8c:	ldr	sl, [fp, #8]
   21e90:	cmp	r0, r1
   21e94:	bne	21ec0 <__assert_fail@plt+0x10718>
   21e98:	ldr	r0, [r4, #8]
   21e9c:	add	r1, r1, r1, lsl #1
   21ea0:	lsl	r1, r1, #4
   21ea4:	bl	22ae8 <__assert_fail@plt+0x11340>
   21ea8:	cmp	r0, #0
   21eac:	beq	21f34 <__assert_fail@plt+0x1078c>
   21eb0:	str	r0, [r4, #8]
   21eb4:	ldr	r0, [r4, #4]
   21eb8:	lsl	r0, r0, #1
   21ebc:	str	r0, [r4, #4]
   21ec0:	ldr	r0, [r4, #8]
   21ec4:	add	r8, r7, r7, lsl #1
   21ec8:	str	r5, [r0, r8, lsl #3]!
   21ecc:	str	r9, [r0, #4]
   21ed0:	lsl	r0, r6, #4
   21ed4:	bl	22ab8 <__assert_fail@plt+0x11310>
   21ed8:	ldr	r1, [r4, #8]
   21edc:	add	r1, r1, r8, lsl #3
   21ee0:	str	r0, [r1, #8]
   21ee4:	cmp	r0, #0
   21ee8:	beq	21f34 <__assert_fail@plt+0x1078c>
   21eec:	lsl	r5, r6, #3
   21ef0:	mov	r1, sl
   21ef4:	mov	r2, r5
   21ef8:	bl	114cc <memcpy@plt>
   21efc:	ldr	r0, [r4, #8]
   21f00:	add	r0, r0, r8, lsl #3
   21f04:	ldr	r0, [r0, #8]
   21f08:	add	r0, r0, r6, lsl #3
   21f0c:	ldr	r1, [sp, #4]
   21f10:	mov	r2, r5
   21f14:	bl	114cc <memcpy@plt>
   21f18:	ldr	r0, [r4, #8]
   21f1c:	add	r0, r0, r8, lsl #3
   21f20:	add	r0, r0, #12
   21f24:	ldr	r1, [sp, #8]
   21f28:	sub	sp, fp, #28
   21f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f30:	b	1bf28 <__assert_fail@plt+0xa780>
   21f34:	mov	r0, #12
   21f38:	sub	sp, fp, #28
   21f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f40:	push	{r4, r5, fp, lr}
   21f44:	add	fp, sp, #8
   21f48:	mov	r4, r1
   21f4c:	mov	r5, r0
   21f50:	mov	r1, #0
   21f54:	mov	r2, r4
   21f58:	bl	116e8 <memchr@plt>
   21f5c:	sub	r1, r0, r5
   21f60:	cmp	r0, #0
   21f64:	addne	r4, r1, #1
   21f68:	mov	r0, r4
   21f6c:	pop	{r4, r5, fp, pc}
   21f70:	b	21f74 <__assert_fail@plt+0x107cc>
   21f74:	push	{r4, sl, fp, lr}
   21f78:	add	fp, sp, #8
   21f7c:	ldrb	ip, [r1]
   21f80:	ldrb	r3, [r0]
   21f84:	cmp	r3, #45	; 0x2d
   21f88:	bne	22064 <__assert_fail@plt+0x108bc>
   21f8c:	ldrb	r4, [r0, #1]!
   21f90:	cmp	r4, #48	; 0x30
   21f94:	beq	21f8c <__assert_fail@plt+0x107e4>
   21f98:	cmp	ip, #45	; 0x2d
   21f9c:	bne	22170 <__assert_fail@plt+0x109c8>
   21fa0:	ldrb	ip, [r1, #1]!
   21fa4:	cmp	ip, #48	; 0x30
   21fa8:	beq	21fa0 <__assert_fail@plt+0x107f8>
   21fac:	cmp	ip, r4
   21fb0:	bne	21ff4 <__assert_fail@plt+0x1084c>
   21fb4:	sub	r2, r4, #48	; 0x30
   21fb8:	cmp	r2, #9
   21fbc:	bhi	21ff4 <__assert_fail@plt+0x1084c>
   21fc0:	mov	r2, #0
   21fc4:	add	r3, r1, r2
   21fc8:	ldrb	ip, [r3, #1]
   21fcc:	add	r3, r0, r2
   21fd0:	ldrb	r4, [r3, #1]
   21fd4:	add	r2, r2, #1
   21fd8:	cmp	ip, r4
   21fdc:	bne	21fec <__assert_fail@plt+0x10844>
   21fe0:	sub	r3, r4, #48	; 0x30
   21fe4:	cmp	r3, #10
   21fe8:	bcc	21fc4 <__assert_fail@plt+0x1081c>
   21fec:	add	r1, r1, r2
   21ff0:	add	r0, r0, r2
   21ff4:	sub	r3, r4, #48	; 0x30
   21ff8:	mov	r2, #0
   21ffc:	cmp	r3, #9
   22000:	mov	lr, #0
   22004:	bhi	22024 <__assert_fail@plt+0x1087c>
   22008:	add	r0, r0, #1
   2200c:	mov	lr, #0
   22010:	ldrb	r3, [r0, lr]
   22014:	sub	r3, r3, #48	; 0x30
   22018:	add	lr, lr, #1
   2201c:	cmp	r3, #10
   22020:	bcc	22010 <__assert_fail@plt+0x10868>
   22024:	sub	r0, ip, #48	; 0x30
   22028:	cmp	r0, #9
   2202c:	bhi	2204c <__assert_fail@plt+0x108a4>
   22030:	add	r0, r1, #1
   22034:	mov	r2, #0
   22038:	ldrb	r1, [r0, r2]
   2203c:	sub	r1, r1, #48	; 0x30
   22040:	add	r2, r2, #1
   22044:	cmp	r1, #10
   22048:	bcc	22038 <__assert_fail@plt+0x10890>
   2204c:	cmp	lr, r2
   22050:	bne	22188 <__assert_fail@plt+0x109e0>
   22054:	cmp	lr, #0
   22058:	subne	lr, ip, r4
   2205c:	mov	r0, lr
   22060:	pop	{r4, sl, fp, pc}
   22064:	cmp	ip, #45	; 0x2d
   22068:	bne	220b4 <__assert_fail@plt+0x1090c>
   2206c:	add	r1, r1, #1
   22070:	ldrb	r2, [r1], #1
   22074:	cmp	r2, #48	; 0x30
   22078:	beq	22070 <__assert_fail@plt+0x108c8>
   2207c:	sub	r1, r2, #48	; 0x30
   22080:	mov	lr, #1
   22084:	cmp	r1, #10
   22088:	bcc	22180 <__assert_fail@plt+0x109d8>
   2208c:	cmp	r3, #48	; 0x30
   22090:	bne	220a4 <__assert_fail@plt+0x108fc>
   22094:	add	r0, r0, #1
   22098:	ldrb	r3, [r0], #1
   2209c:	cmp	r3, #48	; 0x30
   220a0:	beq	22098 <__assert_fail@plt+0x108f0>
   220a4:	sub	r0, r3, #48	; 0x30
   220a8:	mov	lr, #0
   220ac:	cmp	r0, #10
   220b0:	b	2218c <__assert_fail@plt+0x109e4>
   220b4:	cmp	r3, #48	; 0x30
   220b8:	bne	220c8 <__assert_fail@plt+0x10920>
   220bc:	ldrb	r3, [r0, #1]!
   220c0:	b	220b4 <__assert_fail@plt+0x1090c>
   220c4:	ldrb	ip, [r1, #1]!
   220c8:	cmp	ip, #48	; 0x30
   220cc:	beq	220c4 <__assert_fail@plt+0x1091c>
   220d0:	cmp	r3, ip
   220d4:	bne	22100 <__assert_fail@plt+0x10958>
   220d8:	sub	r2, r3, #48	; 0x30
   220dc:	cmp	r2, #9
   220e0:	bhi	22100 <__assert_fail@plt+0x10958>
   220e4:	ldrb	ip, [r1, #1]!
   220e8:	ldrb	r3, [r0, #1]!
   220ec:	cmp	r3, ip
   220f0:	bne	22100 <__assert_fail@plt+0x10958>
   220f4:	sub	r2, r3, #48	; 0x30
   220f8:	cmp	r2, #10
   220fc:	bcc	220e4 <__assert_fail@plt+0x1093c>
   22100:	sub	r4, r3, #48	; 0x30
   22104:	mov	r2, #0
   22108:	cmp	r4, #9
   2210c:	mov	lr, #0
   22110:	bhi	22130 <__assert_fail@plt+0x10988>
   22114:	add	r0, r0, #1
   22118:	mov	lr, #0
   2211c:	ldrb	r4, [r0, lr]
   22120:	sub	r4, r4, #48	; 0x30
   22124:	add	lr, lr, #1
   22128:	cmp	r4, #10
   2212c:	bcc	2211c <__assert_fail@plt+0x10974>
   22130:	sub	r0, ip, #48	; 0x30
   22134:	cmp	r0, #9
   22138:	bhi	22158 <__assert_fail@plt+0x109b0>
   2213c:	add	r0, r1, #1
   22140:	mov	r2, #0
   22144:	ldrb	r1, [r0, r2]
   22148:	sub	r1, r1, #48	; 0x30
   2214c:	add	r2, r2, #1
   22150:	cmp	r1, #10
   22154:	bcc	22144 <__assert_fail@plt+0x1099c>
   22158:	cmp	lr, r2
   2215c:	bne	22198 <__assert_fail@plt+0x109f0>
   22160:	cmp	lr, #0
   22164:	subne	lr, r3, ip
   22168:	mov	r0, lr
   2216c:	pop	{r4, sl, fp, pc}
   22170:	sub	r0, r4, #48	; 0x30
   22174:	mvn	lr, #0
   22178:	cmp	r0, #10
   2217c:	bcs	221a0 <__assert_fail@plt+0x109f8>
   22180:	mov	r0, lr
   22184:	pop	{r4, sl, fp, pc}
   22188:	mvn	lr, #0
   2218c:	movwcc	lr, #1
   22190:	mov	r0, lr
   22194:	pop	{r4, sl, fp, pc}
   22198:	mov	lr, #1
   2219c:	b	221c4 <__assert_fail@plt+0x10a1c>
   221a0:	cmp	ip, #48	; 0x30
   221a4:	bne	221b8 <__assert_fail@plt+0x10a10>
   221a8:	add	r0, r1, #1
   221ac:	ldrb	ip, [r0], #1
   221b0:	cmp	ip, #48	; 0x30
   221b4:	beq	221ac <__assert_fail@plt+0x10a04>
   221b8:	sub	r0, ip, #48	; 0x30
   221bc:	mov	lr, #0
   221c0:	cmp	r0, #10
   221c4:	mvncc	lr, #0
   221c8:	mov	r0, lr
   221cc:	pop	{r4, sl, fp, pc}
   221d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   221d4:	add	fp, sp, #24
   221d8:	sub	sp, sp, #32
   221dc:	mov	r4, r2
   221e0:	mov	r8, r0
   221e4:	ldr	r6, [fp, #12]
   221e8:	ldr	r7, [fp, #8]
   221ec:	cmp	r1, #0
   221f0:	beq	22218 <__assert_fail@plt+0x10a70>
   221f4:	mov	r5, r1
   221f8:	str	r4, [sp]
   221fc:	str	r3, [sp, #4]
   22200:	movw	r2, #17337	; 0x43b9
   22204:	movt	r2, #2
   22208:	mov	r0, r8
   2220c:	mov	r1, #1
   22210:	mov	r3, r5
   22214:	b	22230 <__assert_fail@plt+0x10a88>
   22218:	str	r3, [sp]
   2221c:	movw	r2, #17349	; 0x43c5
   22220:	movt	r2, #2
   22224:	mov	r0, r8
   22228:	mov	r1, #1
   2222c:	mov	r3, r4
   22230:	bl	116dc <__fprintf_chk@plt>
   22234:	movw	r1, #17356	; 0x43cc
   22238:	movt	r1, #2
   2223c:	mov	r0, #0
   22240:	mov	r2, #5
   22244:	bl	11514 <dcgettext@plt>
   22248:	mov	r3, r0
   2224c:	movw	r0, #2022	; 0x7e6
   22250:	str	r0, [sp]
   22254:	movw	r2, #18074	; 0x469a
   22258:	movt	r2, #2
   2225c:	mov	r0, r8
   22260:	mov	r1, #1
   22264:	bl	116dc <__fprintf_chk@plt>
   22268:	movw	r4, #15962	; 0x3e5a
   2226c:	movt	r4, #2
   22270:	mov	r0, r4
   22274:	mov	r1, r8
   22278:	bl	11424 <fputs_unlocked@plt>
   2227c:	movw	r1, #17360	; 0x43d0
   22280:	movt	r1, #2
   22284:	mov	r0, #0
   22288:	mov	r2, #5
   2228c:	bl	11514 <dcgettext@plt>
   22290:	mov	r2, r0
   22294:	movw	r3, #17531	; 0x447b
   22298:	movt	r3, #2
   2229c:	mov	r0, r8
   222a0:	mov	r1, #1
   222a4:	bl	116dc <__fprintf_chk@plt>
   222a8:	mov	r0, r4
   222ac:	mov	r1, r8
   222b0:	bl	11424 <fputs_unlocked@plt>
   222b4:	cmp	r6, #9
   222b8:	bhi	222f4 <__assert_fail@plt+0x10b4c>
   222bc:	add	r0, pc, #0
   222c0:	ldr	pc, [r0, r6, lsl #2]
   222c4:	andeq	r2, r2, ip, ror #5
   222c8:	andeq	r2, r2, r0, lsl #6
   222cc:	andeq	r2, r2, r0, lsr r3
   222d0:	andeq	r2, r2, r8, asr r3
   222d4:	andeq	r2, r2, r0, lsl #7
   222d8:	andeq	r2, r2, r8, lsr #7
   222dc:	ldrdeq	r2, [r2], -r0
   222e0:	andeq	r2, r2, r8, lsl #8
   222e4:	andeq	r2, r2, r8, lsr #9
   222e8:	andeq	r2, r2, r0, asr r4
   222ec:	sub	sp, fp, #24
   222f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   222f4:	movw	r1, #17884	; 0x45dc
   222f8:	movt	r1, #2
   222fc:	b	22458 <__assert_fail@plt+0x10cb0>
   22300:	movw	r1, #17565	; 0x449d
   22304:	movt	r1, #2
   22308:	mov	r0, #0
   2230c:	mov	r2, #5
   22310:	bl	11514 <dcgettext@plt>
   22314:	mov	r2, r0
   22318:	ldr	r3, [r7]
   2231c:	mov	r0, r8
   22320:	mov	r1, #1
   22324:	sub	sp, fp, #24
   22328:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2232c:	b	116dc <__fprintf_chk@plt>
   22330:	movw	r1, #17581	; 0x44ad
   22334:	movt	r1, #2
   22338:	mov	r0, #0
   2233c:	mov	r2, #5
   22340:	bl	11514 <dcgettext@plt>
   22344:	mov	r2, r0
   22348:	ldr	r3, [r7]
   2234c:	ldr	r0, [r7, #4]
   22350:	str	r0, [sp]
   22354:	b	22444 <__assert_fail@plt+0x10c9c>
   22358:	movw	r1, #17604	; 0x44c4
   2235c:	movt	r1, #2
   22360:	mov	r0, #0
   22364:	mov	r2, #5
   22368:	bl	11514 <dcgettext@plt>
   2236c:	mov	r2, r0
   22370:	ldr	r3, [r7]
   22374:	ldmib	r7, {r0, r1}
   22378:	stm	sp, {r0, r1}
   2237c:	b	22444 <__assert_fail@plt+0x10c9c>
   22380:	movw	r1, #17632	; 0x44e0
   22384:	movt	r1, #2
   22388:	mov	r0, #0
   2238c:	mov	r2, #5
   22390:	bl	11514 <dcgettext@plt>
   22394:	mov	r2, r0
   22398:	ldr	r3, [r7]
   2239c:	ldmib	r7, {r0, r1, r7}
   223a0:	stm	sp, {r0, r1, r7}
   223a4:	b	22444 <__assert_fail@plt+0x10c9c>
   223a8:	movw	r1, #17664	; 0x4500
   223ac:	movt	r1, #2
   223b0:	mov	r0, #0
   223b4:	mov	r2, #5
   223b8:	bl	11514 <dcgettext@plt>
   223bc:	mov	r2, r0
   223c0:	ldr	r3, [r7]
   223c4:	ldmib	r7, {r0, r1, r6, r7}
   223c8:	stm	sp, {r0, r1, r6, r7}
   223cc:	b	22444 <__assert_fail@plt+0x10c9c>
   223d0:	movw	r1, #17700	; 0x4524
   223d4:	movt	r1, #2
   223d8:	mov	r0, #0
   223dc:	mov	r2, #5
   223e0:	bl	11514 <dcgettext@plt>
   223e4:	mov	r2, r0
   223e8:	ldr	r3, [r7]
   223ec:	ldmib	r7, {r0, r1, r6}
   223f0:	ldr	r5, [r7, #16]
   223f4:	ldr	r7, [r7, #20]
   223f8:	stm	sp, {r0, r1, r6}
   223fc:	str	r5, [sp, #12]
   22400:	str	r7, [sp, #16]
   22404:	b	22444 <__assert_fail@plt+0x10c9c>
   22408:	movw	r1, #17740	; 0x454c
   2240c:	movt	r1, #2
   22410:	mov	r0, #0
   22414:	mov	r2, #5
   22418:	bl	11514 <dcgettext@plt>
   2241c:	mov	r2, r0
   22420:	ldr	r3, [r7]
   22424:	ldmib	r7, {r0, r1, r6}
   22428:	ldr	r5, [r7, #16]
   2242c:	ldr	r4, [r7, #20]
   22430:	ldr	r7, [r7, #24]
   22434:	stm	sp, {r0, r1, r6}
   22438:	str	r5, [sp, #12]
   2243c:	str	r4, [sp, #16]
   22440:	str	r7, [sp, #20]
   22444:	mov	r0, r8
   22448:	mov	r1, #1
   2244c:	b	224f8 <__assert_fail@plt+0x10d50>
   22450:	movw	r1, #17832	; 0x45a8
   22454:	movt	r1, #2
   22458:	mov	r0, #0
   2245c:	mov	r2, #5
   22460:	bl	11514 <dcgettext@plt>
   22464:	mov	ip, r0
   22468:	ldr	r3, [r7]
   2246c:	ldr	r0, [r7, #4]
   22470:	ldr	r1, [r7, #8]
   22474:	ldr	r6, [r7, #12]
   22478:	ldr	r5, [r7, #16]
   2247c:	ldr	r4, [r7, #20]
   22480:	ldr	r2, [r7, #24]
   22484:	ldr	lr, [r7, #28]
   22488:	ldr	r7, [r7, #32]
   2248c:	stm	sp, {r0, r1, r6}
   22490:	str	r5, [sp, #12]
   22494:	str	r4, [sp, #16]
   22498:	str	r2, [sp, #20]
   2249c:	str	lr, [sp, #24]
   224a0:	str	r7, [sp, #28]
   224a4:	b	224ec <__assert_fail@plt+0x10d44>
   224a8:	movw	r1, #17784	; 0x4578
   224ac:	movt	r1, #2
   224b0:	mov	r0, #0
   224b4:	mov	r2, #5
   224b8:	bl	11514 <dcgettext@plt>
   224bc:	mov	ip, r0
   224c0:	ldr	r3, [r7]
   224c4:	ldmib	r7, {r0, r1, r6}
   224c8:	ldr	r5, [r7, #16]
   224cc:	ldr	r4, [r7, #20]
   224d0:	ldr	r2, [r7, #24]
   224d4:	ldr	r7, [r7, #28]
   224d8:	stm	sp, {r0, r1, r6}
   224dc:	str	r5, [sp, #12]
   224e0:	str	r4, [sp, #16]
   224e4:	str	r2, [sp, #20]
   224e8:	str	r7, [sp, #24]
   224ec:	mov	r0, r8
   224f0:	mov	r1, #1
   224f4:	mov	r2, ip
   224f8:	bl	116dc <__fprintf_chk@plt>
   224fc:	sub	sp, fp, #24
   22500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22504:	push	{r4, sl, fp, lr}
   22508:	add	fp, sp, #8
   2250c:	sub	sp, sp, #8
   22510:	mov	lr, #0
   22514:	ldr	ip, [fp, #8]
   22518:	ldr	r4, [ip, lr, lsl #2]
   2251c:	add	lr, lr, #1
   22520:	cmp	r4, #0
   22524:	bne	22518 <__assert_fail@plt+0x10d70>
   22528:	sub	r4, lr, #1
   2252c:	str	ip, [sp]
   22530:	str	r4, [sp, #4]
   22534:	bl	221d0 <__assert_fail@plt+0x10a28>
   22538:	sub	sp, fp, #8
   2253c:	pop	{r4, sl, fp, pc}
   22540:	push	{r4, r5, fp, lr}
   22544:	add	fp, sp, #8
   22548:	sub	sp, sp, #48	; 0x30
   2254c:	mov	ip, #0
   22550:	ldr	r4, [fp, #8]
   22554:	add	lr, sp, #8
   22558:	ldr	r5, [r4]
   2255c:	str	r5, [lr, ip, lsl #2]
   22560:	cmp	r5, #0
   22564:	beq	2257c <__assert_fail@plt+0x10dd4>
   22568:	add	ip, ip, #1
   2256c:	add	r4, r4, #4
   22570:	cmp	ip, #10
   22574:	bne	22558 <__assert_fail@plt+0x10db0>
   22578:	mov	ip, #10
   2257c:	str	lr, [sp]
   22580:	str	ip, [sp, #4]
   22584:	bl	221d0 <__assert_fail@plt+0x10a28>
   22588:	sub	sp, fp, #8
   2258c:	pop	{r4, r5, fp, pc}
   22590:	push	{fp, lr}
   22594:	mov	fp, sp
   22598:	sub	sp, sp, #8
   2259c:	add	ip, fp, #8
   225a0:	str	ip, [sp, #4]
   225a4:	str	ip, [sp]
   225a8:	bl	22540 <__assert_fail@plt+0x10d98>
   225ac:	mov	sp, fp
   225b0:	pop	{fp, pc}
   225b4:	push	{fp, lr}
   225b8:	mov	fp, sp
   225bc:	movw	r0, #20908	; 0x51ac
   225c0:	movt	r0, #3
   225c4:	ldr	r1, [r0]
   225c8:	movw	r0, #15962	; 0x3e5a
   225cc:	movt	r0, #2
   225d0:	bl	11424 <fputs_unlocked@plt>
   225d4:	movw	r1, #17944	; 0x4618
   225d8:	movt	r1, #2
   225dc:	mov	r0, #0
   225e0:	mov	r2, #5
   225e4:	bl	11514 <dcgettext@plt>
   225e8:	mov	r1, r0
   225ec:	movw	r2, #17964	; 0x462c
   225f0:	movt	r2, #2
   225f4:	mov	r0, #1
   225f8:	bl	116c4 <__printf_chk@plt>
   225fc:	movw	r1, #17986	; 0x4642
   22600:	movt	r1, #2
   22604:	mov	r0, #0
   22608:	mov	r2, #5
   2260c:	bl	11514 <dcgettext@plt>
   22610:	mov	r1, r0
   22614:	movw	r2, #15529	; 0x3ca9
   22618:	movt	r2, #2
   2261c:	movw	r3, #15771	; 0x3d9b
   22620:	movt	r3, #2
   22624:	mov	r0, #1
   22628:	bl	116c4 <__printf_chk@plt>
   2262c:	movw	r1, #18006	; 0x4656
   22630:	movt	r1, #2
   22634:	mov	r0, #0
   22638:	mov	r2, #5
   2263c:	bl	11514 <dcgettext@plt>
   22640:	mov	r1, r0
   22644:	movw	r2, #18045	; 0x467d
   22648:	movt	r2, #2
   2264c:	mov	r0, #1
   22650:	pop	{fp, lr}
   22654:	b	116c4 <__printf_chk@plt>
   22658:	b	2265c <__assert_fail@plt+0x10eb4>
   2265c:	push	{r4, r5, r6, sl, fp, lr}
   22660:	add	fp, sp, #16
   22664:	mov	r4, r2
   22668:	mov	r5, r1
   2266c:	mov	r6, r0
   22670:	bl	232e8 <__assert_fail@plt+0x11b40>
   22674:	cmp	r0, #0
   22678:	popne	{r4, r5, r6, sl, fp, pc}
   2267c:	cmp	r6, #0
   22680:	beq	22694 <__assert_fail@plt+0x10eec>
   22684:	cmp	r5, #0
   22688:	cmpne	r4, #0
   2268c:	bne	22694 <__assert_fail@plt+0x10eec>
   22690:	pop	{r4, r5, r6, sl, fp, pc}
   22694:	bl	22a20 <__assert_fail@plt+0x11278>
   22698:	push	{fp, lr}
   2269c:	mov	fp, sp
   226a0:	bl	22ab8 <__assert_fail@plt+0x11310>
   226a4:	pop	{fp, lr}
   226a8:	b	226ac <__assert_fail@plt+0x10f04>
   226ac:	cmp	r0, #0
   226b0:	bxne	lr
   226b4:	push	{fp, lr}
   226b8:	mov	fp, sp
   226bc:	bl	22a20 <__assert_fail@plt+0x11278>
   226c0:	push	{fp, lr}
   226c4:	mov	fp, sp
   226c8:	bl	23174 <__assert_fail@plt+0x119cc>
   226cc:	pop	{fp, lr}
   226d0:	b	226ac <__assert_fail@plt+0x10f04>
   226d4:	b	22698 <__assert_fail@plt+0x10ef0>
   226d8:	push	{r4, r5, fp, lr}
   226dc:	add	fp, sp, #8
   226e0:	mov	r4, r1
   226e4:	mov	r5, r0
   226e8:	bl	22ae8 <__assert_fail@plt+0x11340>
   226ec:	cmp	r0, #0
   226f0:	popne	{r4, r5, fp, pc}
   226f4:	cmp	r5, #0
   226f8:	beq	22708 <__assert_fail@plt+0x10f60>
   226fc:	cmp	r4, #0
   22700:	bne	22708 <__assert_fail@plt+0x10f60>
   22704:	pop	{r4, r5, fp, pc}
   22708:	bl	22a20 <__assert_fail@plt+0x11278>
   2270c:	push	{fp, lr}
   22710:	mov	fp, sp
   22714:	bl	23178 <__assert_fail@plt+0x119d0>
   22718:	pop	{fp, lr}
   2271c:	b	226ac <__assert_fail@plt+0x10f04>
   22720:	push	{fp, lr}
   22724:	mov	fp, sp
   22728:	bl	23188 <__assert_fail@plt+0x119e0>
   2272c:	pop	{fp, lr}
   22730:	b	226ac <__assert_fail@plt+0x10f04>
   22734:	mov	r2, r1
   22738:	mov	r1, r0
   2273c:	mov	r0, #0
   22740:	b	2265c <__assert_fail@plt+0x10eb4>
   22744:	mov	r2, r1
   22748:	mov	r1, r0
   2274c:	mov	r0, #0
   22750:	b	22720 <__assert_fail@plt+0x10f78>
   22754:	mov	r2, #1
   22758:	b	2275c <__assert_fail@plt+0x10fb4>
   2275c:	push	{r4, r5, fp, lr}
   22760:	add	fp, sp, #8
   22764:	mov	r4, r1
   22768:	ldr	r5, [r1]
   2276c:	cmp	r0, #0
   22770:	beq	22788 <__assert_fail@plt+0x10fe0>
   22774:	mov	r1, #1
   22778:	add	r1, r1, r5, lsr #1
   2277c:	adds	r5, r5, r1
   22780:	bcc	227a0 <__assert_fail@plt+0x10ff8>
   22784:	bl	22a20 <__assert_fail@plt+0x11278>
   22788:	cmp	r5, #0
   2278c:	bne	227a0 <__assert_fail@plt+0x10ff8>
   22790:	mov	r1, #64	; 0x40
   22794:	udiv	r5, r1, r2
   22798:	cmp	r2, #64	; 0x40
   2279c:	addhi	r5, r5, #1
   227a0:	mov	r1, r5
   227a4:	bl	2265c <__assert_fail@plt+0x10eb4>
   227a8:	str	r5, [r4]
   227ac:	pop	{r4, r5, fp, pc}
   227b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   227b4:	add	fp, sp, #24
   227b8:	mov	r8, r1
   227bc:	ldr	r6, [r1]
   227c0:	add	r1, r6, r6, asr #1
   227c4:	cmp	r1, r6
   227c8:	mvnvs	r1, #-2147483648	; 0x80000000
   227cc:	cmp	r1, r3
   227d0:	mov	r5, r1
   227d4:	movgt	r5, r3
   227d8:	cmn	r3, #1
   227dc:	movle	r5, r1
   227e0:	ldr	r4, [fp, #8]
   227e4:	cmn	r4, #1
   227e8:	ble	22810 <__assert_fail@plt+0x11068>
   227ec:	cmp	r4, #0
   227f0:	beq	22864 <__assert_fail@plt+0x110bc>
   227f4:	cmn	r5, #1
   227f8:	ble	22838 <__assert_fail@plt+0x11090>
   227fc:	mvn	r7, #-2147483648	; 0x80000000
   22800:	udiv	r1, r7, r4
   22804:	cmp	r1, r5
   22808:	bge	22864 <__assert_fail@plt+0x110bc>
   2280c:	b	22874 <__assert_fail@plt+0x110cc>
   22810:	cmn	r5, #1
   22814:	ble	22854 <__assert_fail@plt+0x110ac>
   22818:	cmn	r4, #1
   2281c:	beq	22864 <__assert_fail@plt+0x110bc>
   22820:	mov	r1, #-2147483648	; 0x80000000
   22824:	sdiv	r1, r1, r4
   22828:	mvn	r7, #-2147483648	; 0x80000000
   2282c:	cmp	r1, r5
   22830:	bge	22864 <__assert_fail@plt+0x110bc>
   22834:	b	22874 <__assert_fail@plt+0x110cc>
   22838:	beq	22864 <__assert_fail@plt+0x110bc>
   2283c:	mov	r1, #-2147483648	; 0x80000000
   22840:	sdiv	r1, r1, r5
   22844:	mvn	r7, #-2147483648	; 0x80000000
   22848:	cmp	r1, r4
   2284c:	bge	22864 <__assert_fail@plt+0x110bc>
   22850:	b	22874 <__assert_fail@plt+0x110cc>
   22854:	mvn	r7, #-2147483648	; 0x80000000
   22858:	sdiv	r1, r7, r4
   2285c:	cmp	r5, r1
   22860:	blt	22874 <__assert_fail@plt+0x110cc>
   22864:	mul	r1, r5, r4
   22868:	mov	r7, #64	; 0x40
   2286c:	cmp	r1, #63	; 0x3f
   22870:	bgt	2287c <__assert_fail@plt+0x110d4>
   22874:	sdiv	r5, r7, r4
   22878:	mul	r1, r5, r4
   2287c:	cmp	r0, #0
   22880:	moveq	r7, #0
   22884:	streq	r7, [r8]
   22888:	sub	r7, r5, r6
   2288c:	cmp	r7, r2
   22890:	bge	2293c <__assert_fail@plt+0x11194>
   22894:	add	r5, r6, r2
   22898:	mov	r1, #0
   2289c:	cmp	r5, r3
   228a0:	mov	r2, #0
   228a4:	movwgt	r2, #1
   228a8:	cmn	r3, #1
   228ac:	movwgt	r1, #1
   228b0:	cmp	r5, r6
   228b4:	bvs	22924 <__assert_fail@plt+0x1117c>
   228b8:	ands	r1, r1, r2
   228bc:	bne	22924 <__assert_fail@plt+0x1117c>
   228c0:	cmn	r4, #1
   228c4:	ble	228ec <__assert_fail@plt+0x11144>
   228c8:	cmp	r4, #0
   228cc:	beq	22938 <__assert_fail@plt+0x11190>
   228d0:	cmn	r5, #1
   228d4:	ble	22910 <__assert_fail@plt+0x11168>
   228d8:	mvn	r1, #-2147483648	; 0x80000000
   228dc:	udiv	r1, r1, r4
   228e0:	cmp	r1, r5
   228e4:	bge	22938 <__assert_fail@plt+0x11190>
   228e8:	b	22924 <__assert_fail@plt+0x1117c>
   228ec:	cmn	r5, #1
   228f0:	ble	22928 <__assert_fail@plt+0x11180>
   228f4:	cmn	r4, #1
   228f8:	beq	22938 <__assert_fail@plt+0x11190>
   228fc:	mov	r1, #-2147483648	; 0x80000000
   22900:	sdiv	r1, r1, r4
   22904:	cmp	r1, r5
   22908:	bge	22938 <__assert_fail@plt+0x11190>
   2290c:	b	22924 <__assert_fail@plt+0x1117c>
   22910:	beq	22938 <__assert_fail@plt+0x11190>
   22914:	mov	r1, #-2147483648	; 0x80000000
   22918:	sdiv	r1, r1, r5
   2291c:	cmp	r1, r4
   22920:	bge	22938 <__assert_fail@plt+0x11190>
   22924:	bl	22a20 <__assert_fail@plt+0x11278>
   22928:	mvn	r1, #-2147483648	; 0x80000000
   2292c:	sdiv	r1, r1, r4
   22930:	cmp	r5, r1
   22934:	blt	22924 <__assert_fail@plt+0x1117c>
   22938:	mul	r1, r5, r4
   2293c:	bl	226d8 <__assert_fail@plt+0x10f30>
   22940:	str	r5, [r8]
   22944:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22948:	mov	r1, #1
   2294c:	b	22950 <__assert_fail@plt+0x111a8>
   22950:	push	{fp, lr}
   22954:	mov	fp, sp
   22958:	bl	22a64 <__assert_fail@plt+0x112bc>
   2295c:	pop	{fp, lr}
   22960:	b	226ac <__assert_fail@plt+0x10f04>
   22964:	mov	r1, #1
   22968:	b	2296c <__assert_fail@plt+0x111c4>
   2296c:	push	{fp, lr}
   22970:	mov	fp, sp
   22974:	bl	23184 <__assert_fail@plt+0x119dc>
   22978:	pop	{fp, lr}
   2297c:	b	226ac <__assert_fail@plt+0x10f04>
   22980:	push	{r4, r5, fp, lr}
   22984:	add	fp, sp, #8
   22988:	mov	r4, r1
   2298c:	mov	r5, r0
   22990:	mov	r0, r1
   22994:	bl	22698 <__assert_fail@plt+0x10ef0>
   22998:	mov	r1, r5
   2299c:	mov	r2, r4
   229a0:	pop	{r4, r5, fp, lr}
   229a4:	b	114cc <memcpy@plt>
   229a8:	push	{r4, r5, fp, lr}
   229ac:	add	fp, sp, #8
   229b0:	mov	r4, r1
   229b4:	mov	r5, r0
   229b8:	mov	r0, r1
   229bc:	bl	226c0 <__assert_fail@plt+0x10f18>
   229c0:	mov	r1, r5
   229c4:	mov	r2, r4
   229c8:	pop	{r4, r5, fp, lr}
   229cc:	b	114cc <memcpy@plt>
   229d0:	push	{r4, r5, fp, lr}
   229d4:	add	fp, sp, #8
   229d8:	mov	r4, r1
   229dc:	mov	r5, r0
   229e0:	add	r0, r1, #1
   229e4:	bl	226c0 <__assert_fail@plt+0x10f18>
   229e8:	mov	r1, #0
   229ec:	strb	r1, [r0, r4]
   229f0:	mov	r1, r5
   229f4:	mov	r2, r4
   229f8:	pop	{r4, r5, fp, lr}
   229fc:	b	114cc <memcpy@plt>
   22a00:	push	{r4, sl, fp, lr}
   22a04:	add	fp, sp, #8
   22a08:	mov	r4, r0
   22a0c:	bl	11658 <strlen@plt>
   22a10:	add	r1, r0, #1
   22a14:	mov	r0, r4
   22a18:	pop	{r4, sl, fp, lr}
   22a1c:	b	22980 <__assert_fail@plt+0x111d8>
   22a20:	push	{fp, lr}
   22a24:	mov	fp, sp
   22a28:	movw	r0, #20816	; 0x5150
   22a2c:	movt	r0, #3
   22a30:	ldr	r4, [r0]
   22a34:	movw	r1, #18121	; 0x46c9
   22a38:	movt	r1, #2
   22a3c:	mov	r0, #0
   22a40:	mov	r2, #5
   22a44:	bl	11514 <dcgettext@plt>
   22a48:	mov	r3, r0
   22a4c:	movw	r2, #16448	; 0x4040
   22a50:	movt	r2, #2
   22a54:	mov	r0, r4
   22a58:	mov	r1, #0
   22a5c:	bl	115c8 <error@plt>
   22a60:	bl	11784 <abort@plt>
   22a64:	clz	r2, r1
   22a68:	lsr	r2, r2, #5
   22a6c:	clz	r3, r0
   22a70:	lsr	r3, r3, #5
   22a74:	orrs	r2, r3, r2
   22a78:	movwne	r1, #1
   22a7c:	movwne	r0, #1
   22a80:	cmp	r1, #0
   22a84:	beq	22ab4 <__assert_fail@plt+0x1130c>
   22a88:	mvn	r2, #-2147483648	; 0x80000000
   22a8c:	udiv	r2, r2, r1
   22a90:	cmp	r2, r0
   22a94:	bcs	22ab4 <__assert_fail@plt+0x1130c>
   22a98:	push	{fp, lr}
   22a9c:	mov	fp, sp
   22aa0:	bl	11688 <__errno_location@plt>
   22aa4:	mov	r1, #12
   22aa8:	str	r1, [r0]
   22aac:	mov	r0, #0
   22ab0:	pop	{fp, pc}
   22ab4:	b	11418 <calloc@plt>
   22ab8:	cmp	r0, #0
   22abc:	movweq	r0, #1
   22ac0:	cmn	r0, #1
   22ac4:	ble	22acc <__assert_fail@plt+0x11324>
   22ac8:	b	115f8 <malloc@plt>
   22acc:	push	{fp, lr}
   22ad0:	mov	fp, sp
   22ad4:	bl	11688 <__errno_location@plt>
   22ad8:	mov	r1, #12
   22adc:	str	r1, [r0]
   22ae0:	mov	r0, #0
   22ae4:	pop	{fp, pc}
   22ae8:	push	{fp, lr}
   22aec:	mov	fp, sp
   22af0:	cmp	r0, #0
   22af4:	beq	22b10 <__assert_fail@plt+0x11368>
   22af8:	cmp	r1, #0
   22afc:	beq	22b1c <__assert_fail@plt+0x11374>
   22b00:	cmn	r1, #1
   22b04:	ble	22b28 <__assert_fail@plt+0x11380>
   22b08:	pop	{fp, lr}
   22b0c:	b	1152c <realloc@plt>
   22b10:	mov	r0, r1
   22b14:	pop	{fp, lr}
   22b18:	b	22ab8 <__assert_fail@plt+0x11310>
   22b1c:	bl	13140 <__assert_fail@plt+0x1998>
   22b20:	mov	r0, #0
   22b24:	pop	{fp, pc}
   22b28:	bl	11688 <__errno_location@plt>
   22b2c:	mov	r1, #12
   22b30:	str	r1, [r0]
   22b34:	mov	r0, #0
   22b38:	pop	{fp, pc}
   22b3c:	mov	r1, r0
   22b40:	sub	r2, r0, #65	; 0x41
   22b44:	mov	r0, #1
   22b48:	cmp	r2, #26
   22b4c:	subcs	r2, r1, #97	; 0x61
   22b50:	cmpcs	r2, #26
   22b54:	bcs	22b5c <__assert_fail@plt+0x113b4>
   22b58:	bx	lr
   22b5c:	sub	r1, r1, #48	; 0x30
   22b60:	cmp	r1, #10
   22b64:	movcs	r0, #0
   22b68:	bx	lr
   22b6c:	mov	r1, r0
   22b70:	sub	r2, r0, #65	; 0x41
   22b74:	mov	r0, #1
   22b78:	cmp	r2, #26
   22b7c:	subcs	r1, r1, #97	; 0x61
   22b80:	cmpcs	r1, #26
   22b84:	movcs	r0, #0
   22b88:	bx	lr
   22b8c:	mov	r1, #0
   22b90:	cmp	r0, #128	; 0x80
   22b94:	movwcc	r1, #1
   22b98:	mov	r0, r1
   22b9c:	bx	lr
   22ba0:	sub	r1, r0, #9
   22ba4:	clz	r1, r1
   22ba8:	lsr	r1, r1, #5
   22bac:	sub	r0, r0, #32
   22bb0:	clz	r0, r0
   22bb4:	lsr	r0, r0, #5
   22bb8:	orr	r0, r0, r1
   22bbc:	bx	lr
   22bc0:	mov	r1, r0
   22bc4:	mov	r0, #1
   22bc8:	cmp	r1, #32
   22bcc:	bxcc	lr
   22bd0:	cmp	r1, #127	; 0x7f
   22bd4:	movne	r0, #0
   22bd8:	bx	lr
   22bdc:	sub	r1, r0, #48	; 0x30
   22be0:	mov	r0, #0
   22be4:	cmp	r1, #10
   22be8:	movwcc	r0, #1
   22bec:	bx	lr
   22bf0:	sub	r1, r0, #33	; 0x21
   22bf4:	mov	r0, #0
   22bf8:	cmp	r1, #94	; 0x5e
   22bfc:	movwcc	r0, #1
   22c00:	bx	lr
   22c04:	sub	r1, r0, #97	; 0x61
   22c08:	mov	r0, #0
   22c0c:	cmp	r1, #26
   22c10:	movwcc	r0, #1
   22c14:	bx	lr
   22c18:	sub	r1, r0, #32
   22c1c:	mov	r0, #0
   22c20:	cmp	r1, #95	; 0x5f
   22c24:	movwcc	r0, #1
   22c28:	bx	lr
   22c2c:	sub	r1, r0, #33	; 0x21
   22c30:	cmp	r1, #93	; 0x5d
   22c34:	bhi	22dc0 <__assert_fail@plt+0x11618>
   22c38:	mov	r0, #1
   22c3c:	add	r2, pc, #0
   22c40:	ldr	pc, [r2, r1, lsl #2]
   22c44:			; <UNDEFINED> instruction: 0x00022dbc
   22c48:			; <UNDEFINED> instruction: 0x00022dbc
   22c4c:			; <UNDEFINED> instruction: 0x00022dbc
   22c50:			; <UNDEFINED> instruction: 0x00022dbc
   22c54:			; <UNDEFINED> instruction: 0x00022dbc
   22c58:			; <UNDEFINED> instruction: 0x00022dbc
   22c5c:			; <UNDEFINED> instruction: 0x00022dbc
   22c60:			; <UNDEFINED> instruction: 0x00022dbc
   22c64:			; <UNDEFINED> instruction: 0x00022dbc
   22c68:			; <UNDEFINED> instruction: 0x00022dbc
   22c6c:			; <UNDEFINED> instruction: 0x00022dbc
   22c70:			; <UNDEFINED> instruction: 0x00022dbc
   22c74:			; <UNDEFINED> instruction: 0x00022dbc
   22c78:			; <UNDEFINED> instruction: 0x00022dbc
   22c7c:			; <UNDEFINED> instruction: 0x00022dbc
   22c80:	andeq	r2, r2, r0, asr #27
   22c84:	andeq	r2, r2, r0, asr #27
   22c88:	andeq	r2, r2, r0, asr #27
   22c8c:	andeq	r2, r2, r0, asr #27
   22c90:	andeq	r2, r2, r0, asr #27
   22c94:	andeq	r2, r2, r0, asr #27
   22c98:	andeq	r2, r2, r0, asr #27
   22c9c:	andeq	r2, r2, r0, asr #27
   22ca0:	andeq	r2, r2, r0, asr #27
   22ca4:	andeq	r2, r2, r0, asr #27
   22ca8:			; <UNDEFINED> instruction: 0x00022dbc
   22cac:			; <UNDEFINED> instruction: 0x00022dbc
   22cb0:			; <UNDEFINED> instruction: 0x00022dbc
   22cb4:			; <UNDEFINED> instruction: 0x00022dbc
   22cb8:			; <UNDEFINED> instruction: 0x00022dbc
   22cbc:			; <UNDEFINED> instruction: 0x00022dbc
   22cc0:			; <UNDEFINED> instruction: 0x00022dbc
   22cc4:	andeq	r2, r2, r0, asr #27
   22cc8:	andeq	r2, r2, r0, asr #27
   22ccc:	andeq	r2, r2, r0, asr #27
   22cd0:	andeq	r2, r2, r0, asr #27
   22cd4:	andeq	r2, r2, r0, asr #27
   22cd8:	andeq	r2, r2, r0, asr #27
   22cdc:	andeq	r2, r2, r0, asr #27
   22ce0:	andeq	r2, r2, r0, asr #27
   22ce4:	andeq	r2, r2, r0, asr #27
   22ce8:	andeq	r2, r2, r0, asr #27
   22cec:	andeq	r2, r2, r0, asr #27
   22cf0:	andeq	r2, r2, r0, asr #27
   22cf4:	andeq	r2, r2, r0, asr #27
   22cf8:	andeq	r2, r2, r0, asr #27
   22cfc:	andeq	r2, r2, r0, asr #27
   22d00:	andeq	r2, r2, r0, asr #27
   22d04:	andeq	r2, r2, r0, asr #27
   22d08:	andeq	r2, r2, r0, asr #27
   22d0c:	andeq	r2, r2, r0, asr #27
   22d10:	andeq	r2, r2, r0, asr #27
   22d14:	andeq	r2, r2, r0, asr #27
   22d18:	andeq	r2, r2, r0, asr #27
   22d1c:	andeq	r2, r2, r0, asr #27
   22d20:	andeq	r2, r2, r0, asr #27
   22d24:	andeq	r2, r2, r0, asr #27
   22d28:	andeq	r2, r2, r0, asr #27
   22d2c:			; <UNDEFINED> instruction: 0x00022dbc
   22d30:			; <UNDEFINED> instruction: 0x00022dbc
   22d34:			; <UNDEFINED> instruction: 0x00022dbc
   22d38:			; <UNDEFINED> instruction: 0x00022dbc
   22d3c:			; <UNDEFINED> instruction: 0x00022dbc
   22d40:			; <UNDEFINED> instruction: 0x00022dbc
   22d44:	andeq	r2, r2, r0, asr #27
   22d48:	andeq	r2, r2, r0, asr #27
   22d4c:	andeq	r2, r2, r0, asr #27
   22d50:	andeq	r2, r2, r0, asr #27
   22d54:	andeq	r2, r2, r0, asr #27
   22d58:	andeq	r2, r2, r0, asr #27
   22d5c:	andeq	r2, r2, r0, asr #27
   22d60:	andeq	r2, r2, r0, asr #27
   22d64:	andeq	r2, r2, r0, asr #27
   22d68:	andeq	r2, r2, r0, asr #27
   22d6c:	andeq	r2, r2, r0, asr #27
   22d70:	andeq	r2, r2, r0, asr #27
   22d74:	andeq	r2, r2, r0, asr #27
   22d78:	andeq	r2, r2, r0, asr #27
   22d7c:	andeq	r2, r2, r0, asr #27
   22d80:	andeq	r2, r2, r0, asr #27
   22d84:	andeq	r2, r2, r0, asr #27
   22d88:	andeq	r2, r2, r0, asr #27
   22d8c:	andeq	r2, r2, r0, asr #27
   22d90:	andeq	r2, r2, r0, asr #27
   22d94:	andeq	r2, r2, r0, asr #27
   22d98:	andeq	r2, r2, r0, asr #27
   22d9c:	andeq	r2, r2, r0, asr #27
   22da0:	andeq	r2, r2, r0, asr #27
   22da4:	andeq	r2, r2, r0, asr #27
   22da8:	andeq	r2, r2, r0, asr #27
   22dac:			; <UNDEFINED> instruction: 0x00022dbc
   22db0:			; <UNDEFINED> instruction: 0x00022dbc
   22db4:			; <UNDEFINED> instruction: 0x00022dbc
   22db8:			; <UNDEFINED> instruction: 0x00022dbc
   22dbc:	bx	lr
   22dc0:	mov	r0, #0
   22dc4:	bx	lr
   22dc8:	sub	r0, r0, #9
   22dcc:	cmp	r0, #23
   22dd0:	movhi	r0, #0
   22dd4:	bxhi	lr
   22dd8:	bic	r0, r0, #-16777216	; 0xff000000
   22ddc:	movw	r1, #31
   22de0:	movt	r1, #128	; 0x80
   22de4:	mov	r2, #1
   22de8:	and	r0, r2, r1, lsr r0
   22dec:	bx	lr
   22df0:	sub	r1, r0, #65	; 0x41
   22df4:	mov	r0, #0
   22df8:	cmp	r1, #26
   22dfc:	movwcc	r0, #1
   22e00:	bx	lr
   22e04:	mov	r1, r0
   22e08:	sub	r2, r0, #48	; 0x30
   22e0c:	mov	r0, #1
   22e10:	cmp	r2, #22
   22e14:	bhi	22e2c <__assert_fail@plt+0x11684>
   22e18:	mov	ip, #1
   22e1c:	movw	r3, #1023	; 0x3ff
   22e20:	movt	r3, #126	; 0x7e
   22e24:	tst	r3, ip, lsl r2
   22e28:	bxne	lr
   22e2c:	sub	r1, r1, #97	; 0x61
   22e30:	cmp	r1, #6
   22e34:	movcs	r0, #0
   22e38:	bxcs	lr
   22e3c:	bx	lr
   22e40:	sub	r1, r0, #65	; 0x41
   22e44:	cmp	r1, #26
   22e48:	addcc	r0, r0, #32
   22e4c:	bx	lr
   22e50:	sub	r1, r0, #97	; 0x61
   22e54:	cmp	r1, #26
   22e58:	subcc	r0, r0, #32
   22e5c:	bx	lr
   22e60:	push	{r4, r5, r6, sl, fp, lr}
   22e64:	add	fp, sp, #16
   22e68:	mov	r4, r0
   22e6c:	bl	115a4 <__fpending@plt>
   22e70:	mov	r5, r0
   22e74:	mov	r0, r4
   22e78:	bl	115b0 <ferror_unlocked@plt>
   22e7c:	mov	r6, r0
   22e80:	mov	r0, r4
   22e84:	bl	22fa8 <__assert_fail@plt+0x11800>
   22e88:	cmp	r6, #0
   22e8c:	beq	22eb0 <__assert_fail@plt+0x11708>
   22e90:	mvn	r4, #0
   22e94:	cmp	r0, #0
   22e98:	bne	22edc <__assert_fail@plt+0x11734>
   22e9c:	bl	11688 <__errno_location@plt>
   22ea0:	mov	r1, #0
   22ea4:	str	r1, [r0]
   22ea8:	mov	r0, r4
   22eac:	pop	{r4, r5, r6, sl, fp, pc}
   22eb0:	cmp	r0, #0
   22eb4:	mov	r4, r0
   22eb8:	mvnne	r4, #0
   22ebc:	cmp	r5, #0
   22ec0:	bne	22edc <__assert_fail@plt+0x11734>
   22ec4:	cmp	r0, #0
   22ec8:	beq	22edc <__assert_fail@plt+0x11734>
   22ecc:	bl	11688 <__errno_location@plt>
   22ed0:	ldr	r0, [r0]
   22ed4:	subs	r4, r0, #9
   22ed8:	mvnne	r4, #0
   22edc:	mov	r0, r4
   22ee0:	pop	{r4, r5, r6, sl, fp, pc}
   22ee4:	push	{r4, r5, r6, r7, fp, lr}
   22ee8:	add	fp, sp, #16
   22eec:	mov	r5, r1
   22ef0:	mov	r4, r0
   22ef4:	ldr	r0, [r0, #4]
   22ef8:	cmp	r0, r1
   22efc:	bcs	22f30 <__assert_fail@plt+0x11788>
   22f00:	mov	r6, r3
   22f04:	cmp	r3, #0
   22f08:	beq	22f3c <__assert_fail@plt+0x11794>
   22f0c:	mvn	r0, #0
   22f10:	udiv	r0, r0, r6
   22f14:	cmp	r0, r5
   22f18:	bcs	22f3c <__assert_fail@plt+0x11794>
   22f1c:	bl	11688 <__errno_location@plt>
   22f20:	mov	r1, #12
   22f24:	str	r1, [r0]
   22f28:	mov	r0, #0
   22f2c:	pop	{r4, r5, r6, r7, fp, pc}
   22f30:	str	r5, [r4]
   22f34:	mov	r0, #1
   22f38:	pop	{r4, r5, r6, r7, fp, pc}
   22f3c:	mul	r1, r6, r5
   22f40:	ldr	r0, [r4, #8]
   22f44:	cmp	r0, r2
   22f48:	beq	22f60 <__assert_fail@plt+0x117b8>
   22f4c:	bl	22ae8 <__assert_fail@plt+0x11340>
   22f50:	mov	r7, r0
   22f54:	cmp	r0, #0
   22f58:	bne	22f90 <__assert_fail@plt+0x117e8>
   22f5c:	b	22fa0 <__assert_fail@plt+0x117f8>
   22f60:	mov	r0, r1
   22f64:	bl	22ab8 <__assert_fail@plt+0x11310>
   22f68:	cmp	r0, #0
   22f6c:	beq	22fa0 <__assert_fail@plt+0x117f8>
   22f70:	mov	r7, r0
   22f74:	ldr	r1, [r4, #8]
   22f78:	cmp	r1, #0
   22f7c:	beq	22f90 <__assert_fail@plt+0x117e8>
   22f80:	ldr	r0, [r4]
   22f84:	mul	r2, r0, r6
   22f88:	mov	r0, r7
   22f8c:	bl	114cc <memcpy@plt>
   22f90:	str	r5, [r4]
   22f94:	stmib	r4, {r5, r7}
   22f98:	mov	r0, #1
   22f9c:	pop	{r4, r5, r6, r7, fp, pc}
   22fa0:	mov	r0, #0
   22fa4:	pop	{r4, r5, r6, r7, fp, pc}
   22fa8:	push	{r4, r5, fp, lr}
   22fac:	add	fp, sp, #8
   22fb0:	sub	sp, sp, #8
   22fb4:	mov	r4, r0
   22fb8:	bl	116d0 <fileno@plt>
   22fbc:	cmn	r0, #1
   22fc0:	ble	23038 <__assert_fail@plt+0x11890>
   22fc4:	mov	r0, r4
   22fc8:	bl	11610 <__freading@plt>
   22fcc:	cmp	r0, #0
   22fd0:	beq	22ffc <__assert_fail@plt+0x11854>
   22fd4:	mov	r0, r4
   22fd8:	bl	116d0 <fileno@plt>
   22fdc:	mov	r1, #1
   22fe0:	str	r1, [sp]
   22fe4:	mov	r2, #0
   22fe8:	mov	r3, #0
   22fec:	bl	11580 <lseek64@plt>
   22ff0:	and	r0, r0, r1
   22ff4:	cmn	r0, #1
   22ff8:	beq	23038 <__assert_fail@plt+0x11890>
   22ffc:	mov	r0, r4
   23000:	bl	23048 <__assert_fail@plt+0x118a0>
   23004:	cmp	r0, #0
   23008:	beq	23038 <__assert_fail@plt+0x11890>
   2300c:	bl	11688 <__errno_location@plt>
   23010:	ldr	r5, [r0]
   23014:	mov	r0, r4
   23018:	bl	116f4 <fclose@plt>
   2301c:	cmp	r5, #0
   23020:	beq	23030 <__assert_fail@plt+0x11888>
   23024:	bl	11688 <__errno_location@plt>
   23028:	str	r5, [r0]
   2302c:	mvn	r0, #0
   23030:	sub	sp, fp, #8
   23034:	pop	{r4, r5, fp, pc}
   23038:	mov	r0, r4
   2303c:	sub	sp, fp, #8
   23040:	pop	{r4, r5, fp, lr}
   23044:	b	116f4 <fclose@plt>
   23048:	push	{r4, sl, fp, lr}
   2304c:	add	fp, sp, #8
   23050:	mov	r4, r0
   23054:	cmp	r0, #0
   23058:	beq	23070 <__assert_fail@plt+0x118c8>
   2305c:	mov	r0, r4
   23060:	bl	11610 <__freading@plt>
   23064:	cmp	r0, #0
   23068:	movne	r0, r4
   2306c:	blne	2307c <__assert_fail@plt+0x118d4>
   23070:	mov	r0, r4
   23074:	pop	{r4, sl, fp, lr}
   23078:	b	11484 <fflush@plt>
   2307c:	push	{fp, lr}
   23080:	mov	fp, sp
   23084:	sub	sp, sp, #8
   23088:	ldrb	r1, [r0, #1]
   2308c:	tst	r1, #1
   23090:	beq	230a8 <__assert_fail@plt+0x11900>
   23094:	mov	r1, #1
   23098:	str	r1, [sp]
   2309c:	mov	r2, #0
   230a0:	mov	r3, #0
   230a4:	bl	230b0 <__assert_fail@plt+0x11908>
   230a8:	mov	sp, fp
   230ac:	pop	{fp, pc}
   230b0:	push	{r4, r5, r6, r7, fp, lr}
   230b4:	add	fp, sp, #16
   230b8:	sub	sp, sp, #8
   230bc:	mov	r5, r3
   230c0:	mov	r6, r2
   230c4:	mov	r4, r0
   230c8:	ldr	r0, [r0, #4]
   230cc:	ldr	r1, [r4, #8]
   230d0:	cmp	r1, r0
   230d4:	bne	230f0 <__assert_fail@plt+0x11948>
   230d8:	ldrd	r0, [r4, #16]
   230dc:	cmp	r1, r0
   230e0:	bne	230f0 <__assert_fail@plt+0x11948>
   230e4:	ldr	r0, [r4, #36]	; 0x24
   230e8:	cmp	r0, #0
   230ec:	beq	23108 <__assert_fail@plt+0x11960>
   230f0:	mov	r0, r4
   230f4:	mov	r2, r6
   230f8:	mov	r3, r5
   230fc:	sub	sp, fp, #16
   23100:	pop	{r4, r5, r6, r7, fp, lr}
   23104:	b	11700 <fseeko64@plt>
   23108:	ldr	r7, [fp, #8]
   2310c:	mov	r0, r4
   23110:	bl	116d0 <fileno@plt>
   23114:	str	r7, [sp]
   23118:	mov	r2, r6
   2311c:	mov	r3, r5
   23120:	bl	11580 <lseek64@plt>
   23124:	and	r2, r0, r1
   23128:	cmn	r2, #1
   2312c:	beq	2314c <__assert_fail@plt+0x119a4>
   23130:	strd	r0, [r4, #80]	; 0x50
   23134:	ldr	r0, [r4]
   23138:	bic	r0, r0, #16
   2313c:	str	r0, [r4]
   23140:	mov	r0, #0
   23144:	sub	sp, fp, #16
   23148:	pop	{r4, r5, r6, r7, fp, pc}
   2314c:	mvn	r0, #0
   23150:	sub	sp, fp, #16
   23154:	pop	{r4, r5, r6, r7, fp, pc}
   23158:	push	{fp, lr}
   2315c:	mov	fp, sp
   23160:	bl	11688 <__errno_location@plt>
   23164:	mov	r1, #12
   23168:	str	r1, [r0]
   2316c:	mov	r0, #0
   23170:	pop	{fp, pc}
   23174:	b	22ab8 <__assert_fail@plt+0x11310>
   23178:	cmp	r1, #0
   2317c:	orreq	r1, r1, #1
   23180:	b	22ae8 <__assert_fail@plt+0x11340>
   23184:	b	22a64 <__assert_fail@plt+0x112bc>
   23188:	clz	r3, r2
   2318c:	lsr	ip, r3, #5
   23190:	clz	r3, r1
   23194:	lsr	r3, r3, #5
   23198:	orrs	r3, r3, ip
   2319c:	movwne	r1, #1
   231a0:	movwne	r2, #1
   231a4:	b	232e8 <__assert_fail@plt+0x11b40>
   231a8:	push	{fp, lr}
   231ac:	mov	fp, sp
   231b0:	mov	r0, #14
   231b4:	bl	1173c <nl_langinfo@plt>
   231b8:	movw	r1, #15963	; 0x3e5b
   231bc:	movt	r1, #2
   231c0:	cmp	r0, #0
   231c4:	movne	r1, r0
   231c8:	ldrb	r2, [r1]
   231cc:	movw	r0, #18138	; 0x46da
   231d0:	movt	r0, #2
   231d4:	cmp	r2, #0
   231d8:	movne	r0, r1
   231dc:	pop	{fp, pc}
   231e0:	push	{r4, sl, fp, lr}
   231e4:	add	fp, sp, #8
   231e8:	mov	r4, r0
   231ec:	bl	11490 <wcwidth@plt>
   231f0:	cmn	r0, #1
   231f4:	popgt	{r4, sl, fp, pc}
   231f8:	mov	r0, r4
   231fc:	bl	11550 <iswcntrl@plt>
   23200:	clz	r0, r0
   23204:	lsr	r0, r0, #5
   23208:	pop	{r4, sl, fp, pc}
   2320c:	push	{r4, r5, r6, sl, fp, lr}
   23210:	add	fp, sp, #16
   23214:	mov	r5, r1
   23218:	mov	r4, r0
   2321c:	ldr	r6, [r1], #16
   23220:	cmp	r6, r1
   23224:	bne	23238 <__assert_fail@plt+0x11a90>
   23228:	ldr	r2, [r5, #4]
   2322c:	add	r6, r4, #16
   23230:	mov	r0, r6
   23234:	bl	114cc <memcpy@plt>
   23238:	str	r6, [r4]
   2323c:	ldr	r0, [r5, #4]
   23240:	str	r0, [r4, #4]
   23244:	ldrb	r0, [r5, #8]
   23248:	strb	r0, [r4, #8]
   2324c:	cmp	r0, #0
   23250:	ldrne	r0, [r5, #12]
   23254:	strne	r0, [r4, #12]
   23258:	pop	{r4, r5, r6, sl, fp, pc}
   2325c:	ubfx	r1, r0, #5, #3
   23260:	movw	r2, #18144	; 0x46e0
   23264:	movt	r2, #2
   23268:	ldr	r1, [r2, r1, lsl #2]
   2326c:	and	r0, r0, #31
   23270:	mov	r2, #1
   23274:	and	r0, r1, r2, lsl r0
   23278:	cmp	r0, #0
   2327c:	movwne	r0, #1
   23280:	bx	lr
   23284:	push	{r4, r5, r6, r7, fp, lr}
   23288:	add	fp, sp, #16
   2328c:	sub	sp, sp, #8
   23290:	mov	r7, r2
   23294:	mov	r4, r1
   23298:	add	r5, sp, #4
   2329c:	cmp	r0, #0
   232a0:	movne	r5, r0
   232a4:	mov	r0, r5
   232a8:	bl	115bc <mbrtowc@plt>
   232ac:	mov	r6, r0
   232b0:	cmp	r7, #0
   232b4:	beq	232dc <__assert_fail@plt+0x11b34>
   232b8:	cmn	r6, #2
   232bc:	bcc	232dc <__assert_fail@plt+0x11b34>
   232c0:	mov	r0, #0
   232c4:	bl	23324 <__assert_fail@plt+0x11b7c>
   232c8:	cmp	r0, #0
   232cc:	bne	232dc <__assert_fail@plt+0x11b34>
   232d0:	ldrb	r0, [r4]
   232d4:	str	r0, [r5]
   232d8:	mov	r6, #1
   232dc:	mov	r0, r6
   232e0:	sub	sp, fp, #16
   232e4:	pop	{r4, r5, r6, r7, fp, pc}
   232e8:	cmp	r2, #0
   232ec:	beq	2331c <__assert_fail@plt+0x11b74>
   232f0:	mvn	r3, #0
   232f4:	udiv	r3, r3, r2
   232f8:	cmp	r3, r1
   232fc:	bcs	2331c <__assert_fail@plt+0x11b74>
   23300:	push	{fp, lr}
   23304:	mov	fp, sp
   23308:	bl	11688 <__errno_location@plt>
   2330c:	mov	r1, #12
   23310:	str	r1, [r0]
   23314:	mov	r0, #0
   23318:	pop	{fp, pc}
   2331c:	mul	r1, r2, r1
   23320:	b	22ae8 <__assert_fail@plt+0x11340>
   23324:	push	{r4, sl, fp, lr}
   23328:	add	fp, sp, #8
   2332c:	sub	sp, sp, #264	; 0x108
   23330:	add	r1, sp, #7
   23334:	movw	r2, #257	; 0x101
   23338:	bl	23390 <__assert_fail@plt+0x11be8>
   2333c:	mov	r4, #0
   23340:	cmp	r0, #0
   23344:	bne	23384 <__assert_fail@plt+0x11bdc>
   23348:	add	r0, sp, #7
   2334c:	movw	r1, #18176	; 0x4700
   23350:	movt	r1, #2
   23354:	mov	r2, #2
   23358:	bl	1164c <bcmp@plt>
   2335c:	cmp	r0, #0
   23360:	beq	23384 <__assert_fail@plt+0x11bdc>
   23364:	add	r0, sp, #7
   23368:	movw	r1, #18178	; 0x4702
   2336c:	movt	r1, #2
   23370:	mov	r2, #6
   23374:	bl	1164c <bcmp@plt>
   23378:	mov	r4, r0
   2337c:	cmp	r0, #0
   23380:	movwne	r4, #1
   23384:	mov	r0, r4
   23388:	sub	sp, fp, #8
   2338c:	pop	{r4, sl, fp, pc}
   23390:	b	23394 <__assert_fail@plt+0x11bec>
   23394:	push	{r4, r5, r6, r7, fp, lr}
   23398:	add	fp, sp, #16
   2339c:	mov	r6, r2
   233a0:	mov	r4, r1
   233a4:	bl	2342c <__assert_fail@plt+0x11c84>
   233a8:	cmp	r0, #0
   233ac:	beq	233dc <__assert_fail@plt+0x11c34>
   233b0:	mov	r7, r0
   233b4:	bl	11658 <strlen@plt>
   233b8:	cmp	r0, r6
   233bc:	bcs	233f8 <__assert_fail@plt+0x11c50>
   233c0:	add	r2, r0, #1
   233c4:	mov	r0, r4
   233c8:	mov	r1, r7
   233cc:	bl	114cc <memcpy@plt>
   233d0:	mov	r5, #0
   233d4:	mov	r0, r5
   233d8:	pop	{r4, r5, r6, r7, fp, pc}
   233dc:	mov	r5, #22
   233e0:	cmp	r6, #0
   233e4:	beq	23420 <__assert_fail@plt+0x11c78>
   233e8:	mov	r0, #0
   233ec:	strb	r0, [r4]
   233f0:	mov	r0, r5
   233f4:	pop	{r4, r5, r6, r7, fp, pc}
   233f8:	mov	r5, #34	; 0x22
   233fc:	cmp	r6, #0
   23400:	beq	23420 <__assert_fail@plt+0x11c78>
   23404:	sub	r6, r6, #1
   23408:	mov	r0, r4
   2340c:	mov	r1, r7
   23410:	mov	r2, r6
   23414:	bl	114cc <memcpy@plt>
   23418:	mov	r0, #0
   2341c:	strb	r0, [r4, r6]
   23420:	mov	r0, r5
   23424:	pop	{r4, r5, r6, r7, fp, pc}
   23428:	b	2342c <__assert_fail@plt+0x11c84>
   2342c:	mov	r1, #0
   23430:	b	11718 <setlocale@plt>
   23434:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23438:	mov	r7, r0
   2343c:	ldr	r6, [pc, #72]	; 2348c <__assert_fail@plt+0x11ce4>
   23440:	ldr	r5, [pc, #72]	; 23490 <__assert_fail@plt+0x11ce8>
   23444:	add	r6, pc, r6
   23448:	add	r5, pc, r5
   2344c:	sub	r6, r6, r5
   23450:	mov	r8, r1
   23454:	mov	r9, r2
   23458:	bl	113ec <pthread_mutex_unlock@plt-0x20>
   2345c:	asrs	r6, r6, #2
   23460:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23464:	mov	r4, #0
   23468:	add	r4, r4, #1
   2346c:	ldr	r3, [r5], #4
   23470:	mov	r2, r9
   23474:	mov	r1, r8
   23478:	mov	r0, r7
   2347c:	blx	r3
   23480:	cmp	r6, r4
   23484:	bne	23468 <__assert_fail@plt+0x11cc0>
   23488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2348c:			; <UNDEFINED> instruction: 0x00011ab8
   23490:			; <UNDEFINED> instruction: 0x00011ab0
   23494:	bx	lr
   23498:	ldr	r3, [pc, #12]	; 234ac <__assert_fail@plt+0x11d04>
   2349c:	mov	r1, #0
   234a0:	add	r3, pc, r3
   234a4:	ldr	r2, [r3]
   234a8:	b	116a0 <__cxa_atexit@plt>
   234ac:	andeq	r1, r1, r4, lsr #25

Disassembly of section .fini:

000234b0 <.fini>:
   234b0:	push	{r3, lr}
   234b4:	pop	{r3, pc}
