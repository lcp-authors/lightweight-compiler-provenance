
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	106fc <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <malloc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <exit@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__isoc99_scanf@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <abort@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

Disassembly of section .text:

000106c0 <_start@@Base>:
   106c0:	mov	fp, #0
   106c4:	mov	lr, #0
   106c8:	pop	{r1}		; (ldr r1, [sp], #4)
   106cc:	mov	r2, sp
   106d0:	push	{r2}		; (str r2, [sp, #-4]!)
   106d4:	push	{r0}		; (str r0, [sp, #-4]!)
   106d8:	ldr	ip, [pc, #16]	; 106f0 <_start@@Base+0x30>
   106dc:	push	{ip}		; (str ip, [sp, #-4]!)
   106e0:	ldr	r0, [pc, #12]	; 106f4 <_start@@Base+0x34>
   106e4:	ldr	r3, [pc, #12]	; 106f8 <_start@@Base+0x38>
   106e8:	bl	10680 <__libc_start_main@plt>
   106ec:	bl	106b0 <abort@plt>
   106f0:	andeq	r0, r1, ip, ror #19
   106f4:			; <UNDEFINED> instruction: 0x000107b0
   106f8:	andeq	r0, r1, ip, lsl #19
   106fc:	ldr	r3, [pc, #20]	; 10718 <_start@@Base+0x58>
   10700:	ldr	r2, [pc, #20]	; 1071c <_start@@Base+0x5c>
   10704:	add	r3, pc, r3
   10708:	ldr	r2, [r3, r2]
   1070c:	cmp	r2, #0
   10710:	bxeq	lr
   10714:	b	1068c <__gmon_start__@plt>
   10718:	strdeq	r0, [r1], -r4
   1071c:	andeq	r0, r0, r8, lsr #32
   10720:	ldr	r0, [pc, #24]	; 10740 <_start@@Base+0x80>
   10724:	ldr	r3, [pc, #24]	; 10744 <_start@@Base+0x84>
   10728:	cmp	r3, r0
   1072c:	bxeq	lr
   10730:	ldr	r3, [pc, #16]	; 10748 <_start@@Base+0x88>
   10734:	cmp	r3, #0
   10738:	bxeq	lr
   1073c:	bx	r3
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r1, r2, r4, lsr r0
   10748:	andeq	r0, r0, r0
   1074c:	ldr	r0, [pc, #36]	; 10778 <_start@@Base+0xb8>
   10750:	ldr	r1, [pc, #36]	; 1077c <_start@@Base+0xbc>
   10754:	sub	r1, r1, r0
   10758:	asr	r1, r1, #2
   1075c:	add	r1, r1, r1, lsr #31
   10760:	asrs	r1, r1, #1
   10764:	bxeq	lr
   10768:	ldr	r3, [pc, #16]	; 10780 <_start@@Base+0xc0>
   1076c:	cmp	r3, #0
   10770:	bxeq	lr
   10774:	bx	r3
   10778:	andeq	r1, r2, r4, lsr r0
   1077c:	andeq	r1, r2, r4, lsr r0
   10780:	andeq	r0, r0, r0
   10784:	push	{r4, lr}
   10788:	ldr	r4, [pc, #24]	; 107a8 <_start@@Base+0xe8>
   1078c:	ldrb	r3, [r4]
   10790:	cmp	r3, #0
   10794:	popne	{r4, pc}
   10798:	bl	10720 <_start@@Base+0x60>
   1079c:	mov	r3, #1
   107a0:	strb	r3, [r4]
   107a4:	pop	{r4, pc}
   107a8:	andeq	r1, r2, r4, lsr r0
   107ac:	b	1074c <_start@@Base+0x8c>

000107b0 <main@@Base>:
   107b0:	push	{fp, lr}
   107b4:	mov	fp, sp
   107b8:	sub	sp, sp, #8
   107bc:	ldr	r0, [pc, #428]	; 10970 <main@@Base+0x1c0>
   107c0:	add	r1, sp, #4
   107c4:	add	r0, pc, r0
   107c8:	bl	106a4 <__isoc99_scanf@plt>
   107cc:	ldr	r9, [sp, #4]
   107d0:	cmp	r9, #0
   107d4:	beq	10954 <main@@Base+0x1a4>
   107d8:	ldr	r5, [pc, #404]	; 10974 <main@@Base+0x1c4>
   107dc:	vmov.i32	q4, #1	; 0x00000001
   107e0:	vmov.i32	q5, #5	; 0x00000005
   107e4:	vmov.i32	q6, #8	; 0x00000008
   107e8:	mov	r8, #32
   107ec:	add	r5, pc, r5
   107f0:	b	10850 <main@@Base+0xa0>
   107f4:	ldr	r0, [pc, #396]	; 10988 <main@@Base+0x1d8>
   107f8:	add	r0, pc, r0
   107fc:	bl	10668 <printf@plt>
   10800:	mov	sl, #0
   10804:	ldr	r1, [r7, sl, lsl #2]
   10808:	ldr	r4, [pc, #364]	; 1097c <main@@Base+0x1cc>
   1080c:	add	r4, pc, r4
   10810:	mov	r0, r4
   10814:	bl	10668 <printf@plt>
   10818:	ldr	r0, [pc, #352]	; 10980 <main@@Base+0x1d0>
   1081c:	add	r0, pc, r0
   10820:	bl	10668 <printf@plt>
   10824:	orr	r0, sl, #1
   10828:	ldr	r1, [r7, r0, lsl #2]
   1082c:	ldr	r0, [pc, #336]	; 10984 <main@@Base+0x1d4>
   10830:	add	r0, pc, r0
   10834:	bl	10668 <printf@plt>
   10838:	mov	r0, r4
   1083c:	add	r1, sp, #4
   10840:	bl	106a4 <__isoc99_scanf@plt>
   10844:	ldr	r9, [sp, #4]
   10848:	cmp	r9, #0
   1084c:	beq	10954 <main@@Base+0x1a4>
   10850:	lsl	r0, r9, #3
   10854:	bl	10674 <malloc@plt>
   10858:	mov	r7, r0
   1085c:	cmp	r9, #1
   10860:	blt	107f4 <main@@Base+0x44>
   10864:	mov	r0, #0
   10868:	cmp	r9, #3
   1086c:	bls	108e0 <main@@Base+0x130>
   10870:	bic	r0, r9, #3
   10874:	mov	r2, #1
   10878:	add	r3, pc, #224	; 0xe0
   1087c:	subs	r1, r0, #4
   10880:	add	r2, r2, r1, lsr #2
   10884:	and	r1, r2, #1
   10888:	beq	10940 <main@@Base+0x190>
   1088c:	add	r4, pc, #204	; 0xcc
   10890:	sub	r3, r2, r1
   10894:	mov	r2, #0
   10898:	vld1.64	{d16-d17}, [r4 :128]
   1089c:	mov	r4, r7
   108a0:	vadd.i32	q9, q8, q4
   108a4:	vadd.i32	q10, q8, q5
   108a8:	vadd.i32	q8, q8, q6
   108ac:	add	r6, r4, #16
   108b0:	subs	r3, r3, #2
   108b4:	add	r2, r2, #8
   108b8:	vst1.32	{d18-d19}, [r4], r8
   108bc:	vst1.32	{d20-d21}, [r6]
   108c0:	bne	108a0 <main@@Base+0xf0>
   108c4:	cmp	r1, #0
   108c8:	beq	108d8 <main@@Base+0x128>
   108cc:	vadd.i32	q8, q8, q4
   108d0:	add	r1, r7, r2, lsl #2
   108d4:	vst1.32	{d16-d17}, [r1]
   108d8:	cmp	r9, r0
   108dc:	beq	108f4 <main@@Base+0x144>
   108e0:	add	r1, r0, #1
   108e4:	str	r1, [r7, r0, lsl #2]
   108e8:	cmp	r9, r1
   108ec:	mov	r0, r1
   108f0:	bne	108e0 <main@@Base+0x130>
   108f4:	ldr	r0, [pc, #124]	; 10978 <main@@Base+0x1c8>
   108f8:	add	r0, pc, r0
   108fc:	bl	10668 <printf@plt>
   10900:	mov	sl, #0
   10904:	cmp	r9, #3
   10908:	blt	10804 <main@@Base+0x54>
   1090c:	add	r4, r7, r9, lsl #2
   10910:	mov	sl, #0
   10914:	mov	r6, r7
   10918:	mov	r0, r5
   1091c:	ldr	r1, [r6, sl, lsl #2]!
   10920:	bl	10668 <printf@plt>
   10924:	ldr	r0, [r6, #4]
   10928:	sub	r9, r9, #1
   1092c:	cmp	r9, #2
   10930:	str	r0, [r4, sl, lsl #1]
   10934:	add	sl, sl, #2
   10938:	bgt	10914 <main@@Base+0x164>
   1093c:	b	10804 <main@@Base+0x54>
   10940:	vld1.64	{d16-d17}, [r3 :128]
   10944:	mov	r2, #0
   10948:	cmp	r1, #0
   1094c:	bne	108cc <main@@Base+0x11c>
   10950:	b	108d8 <main@@Base+0x128>
   10954:	mov	r0, #0
   10958:	bl	10698 <exit@plt>
   1095c:	nop	{0}
   10960:	andeq	r0, r0, r0
   10964:	andeq	r0, r0, r1
   10968:	andeq	r0, r0, r2
   1096c:	andeq	r0, r0, r3
   10970:	andeq	r0, r0, r0, lsr r2
   10974:	andeq	r0, r0, sp, lsl r2
   10978:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1097c:	andeq	r0, r0, r8, ror #3
   10980:	strdeq	r0, [r0], -r2
   10984:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10988:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

0001098c <__libc_csu_init@@Base>:
   1098c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10990:	mov	r7, r0
   10994:	ldr	r6, [pc, #72]	; 109e4 <__libc_csu_init@@Base+0x58>
   10998:	ldr	r5, [pc, #72]	; 109e8 <__libc_csu_init@@Base+0x5c>
   1099c:	add	r6, pc, r6
   109a0:	add	r5, pc, r5
   109a4:	sub	r6, r6, r5
   109a8:	mov	r8, r1
   109ac:	mov	r9, r2
   109b0:	bl	10648 <printf@plt-0x20>
   109b4:	asrs	r6, r6, #2
   109b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109bc:	mov	r4, #0
   109c0:	add	r4, r4, #1
   109c4:	ldr	r3, [r5], #4
   109c8:	mov	r2, r9
   109cc:	mov	r1, r8
   109d0:	mov	r0, r7
   109d4:	blx	r3
   109d8:	cmp	r6, r4
   109dc:	bne	109c0 <__libc_csu_init@@Base+0x34>
   109e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e4:	andeq	r0, r1, r8, ror #10
   109e8:	andeq	r0, r1, r0, ror #10

000109ec <__libc_csu_fini@@Base>:
   109ec:	bx	lr

Disassembly of section .fini:

000109f0 <.fini>:
   109f0:	push	{r3, lr}
   109f4:	pop	{r3, pc}
