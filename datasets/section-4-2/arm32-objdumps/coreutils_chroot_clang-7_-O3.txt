
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	113e8 <__assert_fail@plt+0x48>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <calloc@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <calloc@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	r6, r1, ip, asr #30

000110b8 <calloc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <endgrent@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <getpwnam@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <getpwuid@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <fflush@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <free@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <execvp@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <__strtoull_internal@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <mbsinit@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <memcmp@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <dcgettext@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <realloc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <textdomain@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <chdir@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <iswprint@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <setgroups@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <fwrite@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <lseek64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <__ctype_get_mb_cur_max@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <chroot@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <__fpending@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <mbrtowc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <error@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <getenv@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <setgid@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <malloc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <__libc_start_main@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__freading@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <strtoul@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <strlen@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <strchr@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <__cxa_atexit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <getgrouplist@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <memset@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <strtok@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <endpwent@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <setuid@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <getgroups@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <canonicalize_file_name@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <strncmp@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <abort@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <getgrgid@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <getgrnam@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <__assert_fail@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

Disassembly of section .text:

000113ac <.text>:
   113ac:	mov	fp, #0
   113b0:	mov	lr, #0
   113b4:	pop	{r1}		; (ldr r1, [sp], #4)
   113b8:	mov	r2, sp
   113bc:	push	{r2}		; (str r2, [sp, #-4]!)
   113c0:	push	{r0}		; (str r0, [sp, #-4]!)
   113c4:	ldr	ip, [pc, #16]	; 113dc <__assert_fail@plt+0x3c>
   113c8:	push	{ip}		; (str ip, [sp, #-4]!)
   113cc:	ldr	r0, [pc, #12]	; 113e0 <__assert_fail@plt+0x40>
   113d0:	ldr	r3, [pc, #12]	; 113e4 <__assert_fail@plt+0x44>
   113d4:	bl	1122c <__libc_start_main@plt>
   113d8:	bl	1137c <abort@plt>
   113dc:	muleq	r1, r8, r1
   113e0:	andeq	r1, r1, r0, ror r7
   113e4:	andeq	r7, r1, r8, lsr r1
   113e8:	ldr	r3, [pc, #20]	; 11404 <__assert_fail@plt+0x64>
   113ec:	ldr	r2, [pc, #20]	; 11408 <__assert_fail@plt+0x68>
   113f0:	add	r3, pc, r3
   113f4:	ldr	r2, [r3, r2]
   113f8:	cmp	r2, #0
   113fc:	bxeq	lr
   11400:	b	11244 <__gmon_start__@plt>
   11404:	andeq	r6, r1, r8, lsl #24
   11408:	andeq	r0, r0, r8, lsl #2
   1140c:	ldr	r0, [pc, #24]	; 1142c <__assert_fail@plt+0x8c>
   11410:	ldr	r3, [pc, #24]	; 11430 <__assert_fail@plt+0x90>
   11414:	cmp	r3, r0
   11418:	bxeq	lr
   1141c:	ldr	r3, [pc, #16]	; 11434 <__assert_fail@plt+0x94>
   11420:	cmp	r3, #0
   11424:	bxeq	lr
   11428:	bx	r3
   1142c:	andeq	r8, r2, r0, ror #2
   11430:	andeq	r8, r2, r0, ror #2
   11434:	andeq	r0, r0, r0
   11438:	ldr	r0, [pc, #36]	; 11464 <__assert_fail@plt+0xc4>
   1143c:	ldr	r1, [pc, #36]	; 11468 <__assert_fail@plt+0xc8>
   11440:	sub	r1, r1, r0
   11444:	asr	r1, r1, #2
   11448:	add	r1, r1, r1, lsr #31
   1144c:	asrs	r1, r1, #1
   11450:	bxeq	lr
   11454:	ldr	r3, [pc, #16]	; 1146c <__assert_fail@plt+0xcc>
   11458:	cmp	r3, #0
   1145c:	bxeq	lr
   11460:	bx	r3
   11464:	andeq	r8, r2, r0, ror #2
   11468:	andeq	r8, r2, r0, ror #2
   1146c:	andeq	r0, r0, r0
   11470:	push	{r4, lr}
   11474:	ldr	r4, [pc, #24]	; 11494 <__assert_fail@plt+0xf4>
   11478:	ldrb	r3, [r4]
   1147c:	cmp	r3, #0
   11480:	popne	{r4, pc}
   11484:	bl	1140c <__assert_fail@plt+0x6c>
   11488:	mov	r3, #1
   1148c:	strb	r3, [r4]
   11490:	pop	{r4, pc}
   11494:	andeq	r8, r2, ip, ror r1
   11498:	b	11438 <__assert_fail@plt+0x98>
   1149c:	push	{fp, lr}
   114a0:	mov	fp, sp
   114a4:	sub	sp, sp, #56	; 0x38
   114a8:	mov	r4, r0
   114ac:	cmp	r0, #0
   114b0:	bne	1172c <__assert_fail@plt+0x38c>
   114b4:	movw	r1, #29163	; 0x71eb
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	1116c <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r0, #33160	; 0x8188
   114d0:	movt	r0, #2
   114d4:	ldr	r2, [r0]
   114d8:	mov	r0, #1
   114dc:	mov	r3, r2
   114e0:	bl	112c8 <__printf_chk@plt>
   114e4:	movw	r1, #29227	; 0x722b
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	1116c <dcgettext@plt>
   114f8:	movw	r7, #33140	; 0x8174
   114fc:	movt	r7, #2
   11500:	ldr	r1, [r7]
   11504:	bl	110d0 <fputs_unlocked@plt>
   11508:	movw	r1, #29277	; 0x725d
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r1, #1
   11518:	bl	1116c <dcgettext@plt>
   1151c:	ldr	r1, [r7]
   11520:	bl	110d0 <fputs_unlocked@plt>
   11524:	movw	r1, #29351	; 0x72a7
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	1116c <dcgettext@plt>
   11538:	ldr	r1, [r7]
   1153c:	bl	110d0 <fputs_unlocked@plt>
   11540:	movw	r1, #29424	; 0x72f0
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	movt	r1, #1
   11550:	bl	1116c <dcgettext@plt>
   11554:	movw	r1, #31651	; 0x7ba3
   11558:	mov	r5, r0
   1155c:	mov	r0, #4
   11560:	movt	r1, #1
   11564:	bl	13d20 <__assert_fail@plt+0x2980>
   11568:	mov	r2, r0
   1156c:	mov	r0, #1
   11570:	mov	r1, r5
   11574:	bl	112c8 <__printf_chk@plt>
   11578:	movw	r1, #29492	; 0x7334
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	movt	r1, #1
   11588:	bl	1116c <dcgettext@plt>
   1158c:	ldr	r1, [r7]
   11590:	bl	110d0 <fputs_unlocked@plt>
   11594:	movw	r1, #29537	; 0x7361
   11598:	mov	r0, #0
   1159c:	mov	r2, #5
   115a0:	movt	r1, #1
   115a4:	bl	1116c <dcgettext@plt>
   115a8:	ldr	r1, [r7]
   115ac:	bl	110d0 <fputs_unlocked@plt>
   115b0:	movw	r1, #29591	; 0x7397
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	movt	r1, #1
   115c0:	bl	1116c <dcgettext@plt>
   115c4:	ldr	r1, [r7]
   115c8:	bl	110d0 <fputs_unlocked@plt>
   115cc:	movw	r0, #30536	; 0x7748
   115d0:	mov	r2, #48	; 0x30
   115d4:	mov	r6, sp
   115d8:	movw	r5, #29660	; 0x73dc
   115dc:	movt	r0, #1
   115e0:	movt	r5, #1
   115e4:	add	r1, r0, #32
   115e8:	add	r3, r0, #16
   115ec:	vld1.64	{d18-d19}, [r0], r2
   115f0:	vld1.64	{d16-d17}, [r1]
   115f4:	vld1.64	{d20-d21}, [r3]
   115f8:	add	r1, r6, #32
   115fc:	vldr	d22, [r0]
   11600:	add	r0, r6, #16
   11604:	vst1.64	{d16-d17}, [r1]
   11608:	movw	r1, #30054	; 0x7566
   1160c:	vst1.64	{d20-d21}, [r0]
   11610:	mov	r0, r6
   11614:	vst1.64	{d18-d19}, [r0], r2
   11618:	movt	r1, #1
   1161c:	vstr	d22, [r0]
   11620:	mov	r0, r5
   11624:	bl	110f4 <strcmp@plt>
   11628:	cmp	r0, #0
   1162c:	ldrne	r1, [r6, #8]!
   11630:	cmpne	r1, #0
   11634:	bne	11620 <__assert_fail@plt+0x280>
   11638:	ldr	r6, [r6, #4]
   1163c:	movw	r1, #30149	; 0x75c5
   11640:	mov	r0, #0
   11644:	mov	r2, #5
   11648:	movt	r1, #1
   1164c:	bl	1116c <dcgettext@plt>
   11650:	movw	r2, #29693	; 0x73fd
   11654:	movw	r3, #30172	; 0x75dc
   11658:	mov	r1, r0
   1165c:	mov	r0, #1
   11660:	movt	r2, #1
   11664:	movt	r3, #1
   11668:	bl	112c8 <__printf_chk@plt>
   1166c:	cmp	r6, #0
   11670:	mov	r0, #5
   11674:	mov	r1, #0
   11678:	moveq	r6, r5
   1167c:	bl	11310 <setlocale@plt>
   11680:	cmp	r0, #0
   11684:	beq	116bc <__assert_fail@plt+0x31c>
   11688:	movw	r1, #30212	; 0x7604
   1168c:	mov	r2, #3
   11690:	movt	r1, #1
   11694:	bl	11370 <strncmp@plt>
   11698:	cmp	r0, #0
   1169c:	beq	116bc <__assert_fail@plt+0x31c>
   116a0:	movw	r1, #30216	; 0x7608
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	1116c <dcgettext@plt>
   116b4:	ldr	r1, [r7]
   116b8:	bl	110d0 <fputs_unlocked@plt>
   116bc:	movw	r1, #30287	; 0x764f
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	movt	r1, #1
   116cc:	bl	1116c <dcgettext@plt>
   116d0:	movw	r2, #30172	; 0x75dc
   116d4:	mov	r1, r0
   116d8:	mov	r0, #1
   116dc:	mov	r3, r5
   116e0:	movt	r2, #1
   116e4:	bl	112c8 <__printf_chk@plt>
   116e8:	movw	r1, #30314	; 0x766a
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	1116c <dcgettext@plt>
   116fc:	movw	r3, #29276	; 0x725c
   11700:	mov	r1, r0
   11704:	movw	r0, #30082	; 0x7582
   11708:	cmp	r6, r5
   1170c:	mov	r2, r6
   11710:	movt	r0, #1
   11714:	movt	r3, #1
   11718:	moveq	r3, r0
   1171c:	mov	r0, #1
   11720:	bl	112c8 <__printf_chk@plt>
   11724:	mov	r0, r4
   11728:	bl	11268 <exit@plt>
   1172c:	movw	r0, #33136	; 0x8170
   11730:	movw	r1, #29124	; 0x71c4
   11734:	mov	r2, #5
   11738:	movt	r0, #2
   1173c:	movt	r1, #1
   11740:	ldr	r5, [r0]
   11744:	mov	r0, #0
   11748:	bl	1116c <dcgettext@plt>
   1174c:	mov	r2, r0
   11750:	movw	r0, #33160	; 0x8188
   11754:	mov	r1, #1
   11758:	movt	r0, #2
   1175c:	ldr	r3, [r0]
   11760:	mov	r0, r5
   11764:	bl	112e0 <__fprintf_chk@plt>
   11768:	mov	r0, r4
   1176c:	bl	11268 <exit@plt>
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11774:	add	fp, sp, #28
   11778:	sub	sp, sp, #36	; 0x24
   1177c:	mov	r8, #0
   11780:	mov	r6, r0
   11784:	mvn	r0, #0
   11788:	mov	r4, r1
   1178c:	str	r0, [sp, #32]
   11790:	str	r0, [sp, #28]
   11794:	str	r8, [sp, #24]
   11798:	str	r8, [sp, #20]
   1179c:	ldr	r0, [r1]
   117a0:	bl	122cc <__assert_fail@plt+0xf2c>
   117a4:	movw	r1, #29276	; 0x725c
   117a8:	mov	r0, #6
   117ac:	movt	r1, #1
   117b0:	bl	11310 <setlocale@plt>
   117b4:	movw	r5, #29697	; 0x7401
   117b8:	movw	r1, #29667	; 0x73e3
   117bc:	movt	r5, #1
   117c0:	movt	r1, #1
   117c4:	mov	r0, r5
   117c8:	bl	11364 <bindtextdomain@plt>
   117cc:	mov	r0, r5
   117d0:	bl	11184 <textdomain@plt>
   117d4:	movw	r0, #33052	; 0x811c
   117d8:	mov	r1, #125	; 0x7d
   117dc:	movt	r0, #2
   117e0:	str	r1, [r0]
   117e4:	movw	r0, #8632	; 0x21b8
   117e8:	movt	r0, #1
   117ec:	bl	1719c <__assert_fail@plt+0x5dfc>
   117f0:	movw	r5, #29691	; 0x73fb
   117f4:	movw	r7, #30440	; 0x76e8
   117f8:	mov	r0, #0
   117fc:	mov	r9, #0
   11800:	mov	sl, #0
   11804:	movt	r5, #1
   11808:	movt	r7, #1
   1180c:	str	r0, [sp, #12]
   11810:	b	1182c <__assert_fail@plt+0x48c>
   11814:	movw	r0, #33144	; 0x8178
   11818:	movt	r0, #2
   1181c:	ldr	r9, [r0]
   11820:	b	1182c <__assert_fail@plt+0x48c>
   11824:	mov	r0, #1
   11828:	str	r0, [sp, #12]
   1182c:	mov	r0, r6
   11830:	mov	r1, r4
   11834:	mov	r2, r5
   11838:	mov	r3, r7
   1183c:	str	r8, [sp]
   11840:	bl	11250 <getopt_long@plt>
   11844:	cmp	r0, #255	; 0xff
   11848:	ble	1189c <__assert_fail@plt+0x4fc>
   1184c:	cmp	r0, #256	; 0x100
   11850:	beq	11814 <__assert_fail@plt+0x474>
   11854:	movw	r1, #258	; 0x102
   11858:	cmp	r0, r1
   1185c:	beq	11824 <__assert_fail@plt+0x484>
   11860:	movw	r1, #257	; 0x101
   11864:	cmp	r0, r1
   11868:	bne	11da4 <__assert_fail@plt+0xa04>
   1186c:	movw	r0, #33144	; 0x8178
   11870:	movt	r0, #2
   11874:	ldr	sl, [r0]
   11878:	mov	r0, sl
   1187c:	bl	11280 <strlen@plt>
   11880:	cmp	r0, #0
   11884:	beq	1182c <__assert_fail@plt+0x48c>
   11888:	sub	r0, r0, #1
   1188c:	ldrb	r1, [sl, r0]
   11890:	cmp	r1, #58	; 0x3a
   11894:	strbeq	r8, [sl, r0]
   11898:	b	1182c <__assert_fail@plt+0x48c>
   1189c:	cmn	r0, #1
   118a0:	bne	11d44 <__assert_fail@plt+0x9a4>
   118a4:	movw	r0, #33128	; 0x8168
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	cmp	r0, r6
   118b4:	bge	11dac <__assert_fail@plt+0xa0c>
   118b8:	ldr	r8, [r4, r0, lsl #2]
   118bc:	mov	r0, r8
   118c0:	bl	11358 <canonicalize_file_name@plt>
   118c4:	mov	r7, r0
   118c8:	cmp	r0, #0
   118cc:	beq	1194c <__assert_fail@plt+0x5ac>
   118d0:	movw	r0, #31651	; 0x7ba3
   118d4:	mov	r1, r7
   118d8:	movt	r0, #1
   118dc:	bl	110f4 <strcmp@plt>
   118e0:	clz	r0, r0
   118e4:	lsr	r5, r0, #5
   118e8:	mov	r0, r7
   118ec:	bl	122a4 <__assert_fail@plt+0xf04>
   118f0:	cmp	r5, #0
   118f4:	bne	11960 <__assert_fail@plt+0x5c0>
   118f8:	ldr	r0, [sp, #12]
   118fc:	eor	r0, r0, #1
   11900:	tst	r0, #1
   11904:	bne	11960 <__assert_fail@plt+0x5c0>
   11908:	movw	r1, #29738	; 0x742a
   1190c:	mov	r0, #0
   11910:	mov	r2, #5
   11914:	movt	r1, #1
   11918:	bl	1116c <dcgettext@plt>
   1191c:	movw	r1, #31651	; 0x7ba3
   11920:	mov	r4, r0
   11924:	mov	r0, #4
   11928:	movt	r1, #1
   1192c:	bl	13d20 <__assert_fail@plt+0x2980>
   11930:	mov	r3, r0
   11934:	mov	r0, #0
   11938:	mov	r1, #0
   1193c:	mov	r2, r4
   11940:	bl	111fc <error@plt>
   11944:	mov	r0, #125	; 0x7d
   11948:	bl	1149c <__assert_fail@plt+0xfc>
   1194c:	mov	r5, #0
   11950:	mov	r0, r7
   11954:	bl	122a4 <__assert_fail@plt+0xf04>
   11958:	cmp	r5, #0
   1195c:	beq	118f8 <__assert_fail@plt+0x558>
   11960:	mov	r7, #0
   11964:	cmp	r5, #0
   11968:	bne	11a78 <__assert_fail@plt+0x6d8>
   1196c:	cmp	sl, #0
   11970:	beq	11990 <__assert_fail@plt+0x5f0>
   11974:	mov	r0, #0
   11978:	add	r1, sp, #32
   1197c:	add	r2, sp, #28
   11980:	mov	r3, #0
   11984:	str	r0, [sp]
   11988:	mov	r0, sl
   1198c:	bl	14260 <__assert_fail@plt+0x2ec0>
   11990:	ldr	r0, [sp, #32]
   11994:	cmn	r0, #1
   11998:	beq	11a4c <__assert_fail@plt+0x6ac>
   1199c:	cmp	r9, #0
   119a0:	ldrne	r1, [sp, #28]
   119a4:	movne	r7, #0
   119a8:	cmnne	r1, #1
   119ac:	bne	11a58 <__assert_fail@plt+0x6b8>
   119b0:	bl	11100 <getpwuid@plt>
   119b4:	cmp	r0, #0
   119b8:	beq	11a4c <__assert_fail@plt+0x6ac>
   119bc:	ldr	r1, [sp, #28]
   119c0:	cmn	r1, #1
   119c4:	ldreq	r1, [r0, #12]
   119c8:	streq	r1, [sp, #28]
   119cc:	ldr	r7, [r0]
   119d0:	cmp	r9, #0
   119d4:	bne	11a58 <__assert_fail@plt+0x6b8>
   119d8:	cmp	r7, #0
   119dc:	ldrne	r1, [sp, #28]
   119e0:	cmnne	r1, #1
   119e4:	beq	11a78 <__assert_fail@plt+0x6d8>
   119e8:	add	r2, sp, #24
   119ec:	mov	r0, r7
   119f0:	bl	152b8 <__assert_fail@plt+0x3f18>
   119f4:	cmp	r0, #1
   119f8:	strge	r0, [sp, #20]
   119fc:	mov	r0, r8
   11a00:	bl	111d8 <chroot@plt>
   11a04:	cmp	r0, #0
   11a08:	beq	11a88 <__assert_fail@plt+0x6e8>
   11a0c:	bl	11298 <__errno_location@plt>
   11a10:	ldr	r4, [r0]
   11a14:	movw	r1, #29794	; 0x7462
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	bl	1116c <dcgettext@plt>
   11a28:	mov	r6, r0
   11a2c:	mov	r0, #4
   11a30:	mov	r1, r8
   11a34:	bl	13d20 <__assert_fail@plt+0x2980>
   11a38:	mov	r3, r0
   11a3c:	mov	r0, #125	; 0x7d
   11a40:	mov	r1, r4
   11a44:	mov	r2, r6
   11a48:	bl	111fc <error@plt>
   11a4c:	mov	r7, #0
   11a50:	cmp	r9, #0
   11a54:	beq	119d8 <__assert_fail@plt+0x638>
   11a58:	ldrb	r0, [r9]
   11a5c:	cmp	r0, #0
   11a60:	beq	11a78 <__assert_fail@plt+0x6d8>
   11a64:	add	r1, sp, #24
   11a68:	add	r2, sp, #20
   11a6c:	mov	r0, r9
   11a70:	mov	r3, #0
   11a74:	bl	11e70 <__assert_fail@plt+0xad0>
   11a78:	mov	r0, r8
   11a7c:	bl	111d8 <chroot@plt>
   11a80:	cmp	r0, #0
   11a84:	bne	11a0c <__assert_fail@plt+0x66c>
   11a88:	ldr	r0, [sp, #12]
   11a8c:	tst	r0, #1
   11a90:	bne	11aa8 <__assert_fail@plt+0x708>
   11a94:	movw	r0, #31651	; 0x7ba3
   11a98:	movt	r0, #1
   11a9c:	bl	11190 <chdir@plt>
   11aa0:	cmp	r0, #0
   11aa4:	bne	11e14 <__assert_fail@plt+0xa74>
   11aa8:	movw	r0, #33128	; 0x8168
   11aac:	movt	r0, #2
   11ab0:	ldr	r0, [r0]
   11ab4:	add	r0, r0, #1
   11ab8:	cmp	r0, r6
   11abc:	bne	11afc <__assert_fail@plt+0x75c>
   11ac0:	movw	r0, #29860	; 0x74a4
   11ac4:	movt	r0, #1
   11ac8:	bl	11208 <getenv@plt>
   11acc:	movw	r3, #29866	; 0x74aa
   11ad0:	movw	r1, #29874	; 0x74b2
   11ad4:	cmp	r0, #0
   11ad8:	mov	r2, #0
   11adc:	movt	r3, #1
   11ae0:	movt	r1, #1
   11ae4:	movne	r3, r0
   11ae8:	str	r3, [r4]
   11aec:	stmib	r4, {r1, r2}
   11af0:	cmp	sl, #0
   11af4:	bne	11b08 <__assert_fail@plt+0x768>
   11af8:	b	11b64 <__assert_fail@plt+0x7c4>
   11afc:	add	r4, r4, r0, lsl #2
   11b00:	cmp	sl, #0
   11b04:	beq	11b64 <__assert_fail@plt+0x7c4>
   11b08:	mov	r0, #0
   11b0c:	add	r1, sp, #32
   11b10:	add	r2, sp, #28
   11b14:	mov	r3, #0
   11b18:	str	r0, [sp]
   11b1c:	mov	r0, sl
   11b20:	bl	14260 <__assert_fail@plt+0x2ec0>
   11b24:	cmp	r0, #0
   11b28:	beq	11b64 <__assert_fail@plt+0x7c4>
   11b2c:	mov	r5, r0
   11b30:	ldr	r0, [sp, #32]
   11b34:	cmn	r0, #1
   11b38:	bne	11b70 <__assert_fail@plt+0x7d0>
   11b3c:	ldr	r0, [sp, #28]
   11b40:	cmn	r0, #1
   11b44:	bne	11bc8 <__assert_fail@plt+0x828>
   11b48:	bl	11298 <__errno_location@plt>
   11b4c:	ldr	r1, [r0]
   11b50:	movw	r2, #30623	; 0x779f
   11b54:	mov	r0, #125	; 0x7d
   11b58:	mov	r3, r5
   11b5c:	movt	r2, #1
   11b60:	bl	111fc <error@plt>
   11b64:	ldr	r0, [sp, #32]
   11b68:	cmn	r0, #1
   11b6c:	beq	11bc8 <__assert_fail@plt+0x828>
   11b70:	cmp	r9, #0
   11b74:	ldrne	r1, [sp, #28]
   11b78:	cmnne	r1, #1
   11b7c:	bne	11ba4 <__assert_fail@plt+0x804>
   11b80:	bl	11100 <getpwuid@plt>
   11b84:	ldr	r1, [sp, #28]
   11b88:	cmp	r0, #0
   11b8c:	beq	11bc0 <__assert_fail@plt+0x820>
   11b90:	cmn	r1, #1
   11b94:	ldreq	r1, [r0, #12]
   11b98:	streq	r1, [sp, #28]
   11b9c:	ldr	r7, [r0]
   11ba0:	b	11bc8 <__assert_fail@plt+0x828>
   11ba4:	ldr	r5, [sp, #24]
   11ba8:	mov	r0, #0
   11bac:	str	r0, [sp, #16]
   11bb0:	ldrb	r0, [r9]
   11bb4:	cmp	r0, #0
   11bb8:	bne	11be8 <__assert_fail@plt+0x848>
   11bbc:	b	11c48 <__assert_fail@plt+0x8a8>
   11bc0:	cmn	r1, #1
   11bc4:	beq	11e40 <__assert_fail@plt+0xaa0>
   11bc8:	ldr	r5, [sp, #24]
   11bcc:	mov	r0, #0
   11bd0:	cmp	r9, #0
   11bd4:	str	r0, [sp, #16]
   11bd8:	beq	11c24 <__assert_fail@plt+0x884>
   11bdc:	ldrb	r0, [r9]
   11be0:	cmp	r0, #0
   11be4:	beq	11c48 <__assert_fail@plt+0x8a8>
   11be8:	ldr	r0, [sp, #20]
   11bec:	add	r1, sp, #16
   11bf0:	add	r2, sp, #20
   11bf4:	clz	r0, r0
   11bf8:	lsr	r3, r0, #5
   11bfc:	mov	r0, r9
   11c00:	bl	11e70 <__assert_fail@plt+0xad0>
   11c04:	cmp	r0, #0
   11c08:	beq	11c44 <__assert_fail@plt+0x8a4>
   11c0c:	ldr	r0, [sp, #20]
   11c10:	cmp	r0, #0
   11c14:	moveq	r0, #125	; 0x7d
   11c18:	subeq	sp, fp, #28
   11c1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c20:	b	11c48 <__assert_fail@plt+0x8a8>
   11c24:	cmp	r7, #0
   11c28:	ldrne	r1, [sp, #28]
   11c2c:	cmnne	r1, #1
   11c30:	bne	11cf8 <__assert_fail@plt+0x958>
   11c34:	ldr	r0, [sp, #32]
   11c38:	cmn	r0, #1
   11c3c:	bne	11c48 <__assert_fail@plt+0x8a8>
   11c40:	b	11c5c <__assert_fail@plt+0x8bc>
   11c44:	ldr	r5, [sp, #16]
   11c48:	ldr	r0, [sp, #20]
   11c4c:	mov	r1, r5
   11c50:	bl	111a8 <setgroups@plt>
   11c54:	cmp	r0, #0
   11c58:	bne	11dd8 <__assert_fail@plt+0xa38>
   11c5c:	ldr	r0, [sp, #16]
   11c60:	bl	122a4 <__assert_fail@plt+0xf04>
   11c64:	ldr	r0, [sp, #24]
   11c68:	bl	122a4 <__assert_fail@plt+0xf04>
   11c6c:	ldr	r0, [sp, #28]
   11c70:	cmn	r0, #1
   11c74:	beq	11c84 <__assert_fail@plt+0x8e4>
   11c78:	bl	11214 <setgid@plt>
   11c7c:	cmp	r0, #0
   11c80:	bne	11dec <__assert_fail@plt+0xa4c>
   11c84:	ldr	r0, [sp, #32]
   11c88:	cmn	r0, #1
   11c8c:	beq	11c9c <__assert_fail@plt+0x8fc>
   11c90:	bl	11340 <setuid@plt>
   11c94:	cmp	r0, #0
   11c98:	bne	11e00 <__assert_fail@plt+0xa60>
   11c9c:	ldr	r0, [r4]
   11ca0:	mov	r1, r4
   11ca4:	bl	1113c <execvp@plt>
   11ca8:	bl	11298 <__errno_location@plt>
   11cac:	ldr	r5, [r0]
   11cb0:	movw	r1, #30029	; 0x754d
   11cb4:	mov	r0, #0
   11cb8:	mov	r2, #5
   11cbc:	movt	r1, #1
   11cc0:	bl	1116c <dcgettext@plt>
   11cc4:	mov	r6, r0
   11cc8:	ldr	r0, [r4]
   11ccc:	bl	14248 <__assert_fail@plt+0x2ea8>
   11cd0:	mov	r3, r0
   11cd4:	mov	r0, #0
   11cd8:	mov	r1, r5
   11cdc:	mov	r2, r6
   11ce0:	bl	111fc <error@plt>
   11ce4:	mov	r0, #126	; 0x7e
   11ce8:	cmp	r5, #2
   11cec:	movweq	r0, #127	; 0x7f
   11cf0:	sub	sp, fp, #28
   11cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf8:	add	r2, sp, #16
   11cfc:	mov	r0, r7
   11d00:	bl	152b8 <__assert_fail@plt+0x3f18>
   11d04:	cmp	r0, #0
   11d08:	ble	11d24 <__assert_fail@plt+0x984>
   11d0c:	ldr	r5, [sp, #16]
   11d10:	str	r0, [sp, #20]
   11d14:	ldr	r0, [sp, #32]
   11d18:	cmn	r0, #1
   11d1c:	bne	11c48 <__assert_fail@plt+0x8a8>
   11d20:	b	11c5c <__assert_fail@plt+0x8bc>
   11d24:	ldr	r0, [sp, #20]
   11d28:	cmp	r0, #0
   11d2c:	bne	11c34 <__assert_fail@plt+0x894>
   11d30:	bl	11298 <__errno_location@plt>
   11d34:	ldr	r4, [r0]
   11d38:	movw	r1, #29916	; 0x74dc
   11d3c:	movt	r1, #1
   11d40:	b	11e24 <__assert_fail@plt+0xa84>
   11d44:	cmn	r0, #3
   11d48:	bne	11d94 <__assert_fail@plt+0x9f4>
   11d4c:	movw	r0, #33048	; 0x8118
   11d50:	movw	r2, #29707	; 0x740b
   11d54:	mov	r1, #0
   11d58:	movt	r0, #2
   11d5c:	movt	r2, #1
   11d60:	str	r1, [sp, #4]
   11d64:	movw	r1, #29660	; 0x73dc
   11d68:	ldr	r3, [r0]
   11d6c:	movw	r0, #33140	; 0x8174
   11d70:	str	r2, [sp]
   11d74:	movw	r2, #29693	; 0x73fd
   11d78:	movt	r1, #1
   11d7c:	movt	r0, #2
   11d80:	movt	r2, #1
   11d84:	ldr	r0, [r0]
   11d88:	bl	14ae0 <__assert_fail@plt+0x3740>
   11d8c:	mov	r0, #0
   11d90:	bl	11268 <exit@plt>
   11d94:	cmn	r0, #2
   11d98:	bne	11da4 <__assert_fail@plt+0xa04>
   11d9c:	mov	r0, #0
   11da0:	bl	1149c <__assert_fail@plt+0xfc>
   11da4:	mov	r0, #125	; 0x7d
   11da8:	bl	1149c <__assert_fail@plt+0xfc>
   11dac:	movw	r1, #29722	; 0x741a
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	movt	r1, #1
   11dbc:	bl	1116c <dcgettext@plt>
   11dc0:	mov	r2, r0
   11dc4:	mov	r0, #0
   11dc8:	mov	r1, #0
   11dcc:	bl	111fc <error@plt>
   11dd0:	mov	r0, #125	; 0x7d
   11dd4:	bl	1149c <__assert_fail@plt+0xfc>
   11dd8:	bl	11298 <__errno_location@plt>
   11ddc:	ldr	r4, [r0]
   11de0:	movw	r1, #29950	; 0x74fe
   11de4:	movt	r1, #1
   11de8:	b	11e24 <__assert_fail@plt+0xa84>
   11dec:	bl	11298 <__errno_location@plt>
   11df0:	ldr	r4, [r0]
   11df4:	movw	r1, #29984	; 0x7520
   11df8:	movt	r1, #1
   11dfc:	b	11e24 <__assert_fail@plt+0xa84>
   11e00:	bl	11298 <__errno_location@plt>
   11e04:	ldr	r4, [r0]
   11e08:	movw	r1, #30007	; 0x7537
   11e0c:	movt	r1, #1
   11e10:	b	11e24 <__assert_fail@plt+0xa84>
   11e14:	bl	11298 <__errno_location@plt>
   11e18:	ldr	r4, [r0]
   11e1c:	movw	r1, #29829	; 0x7485
   11e20:	movt	r1, #1
   11e24:	mov	r0, #0
   11e28:	mov	r2, #5
   11e2c:	bl	1116c <dcgettext@plt>
   11e30:	mov	r2, r0
   11e34:	mov	r0, #125	; 0x7d
   11e38:	mov	r1, r4
   11e3c:	bl	111fc <error@plt>
   11e40:	bl	11298 <__errno_location@plt>
   11e44:	ldr	r4, [r0]
   11e48:	movw	r1, #29877	; 0x74b5
   11e4c:	mov	r0, #0
   11e50:	mov	r2, #5
   11e54:	movt	r1, #1
   11e58:	bl	1116c <dcgettext@plt>
   11e5c:	ldr	r3, [sp, #32]
   11e60:	mov	r2, r0
   11e64:	mov	r0, #125	; 0x7d
   11e68:	mov	r1, r4
   11e6c:	bl	111fc <error@plt>
   11e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	add	fp, sp, #28
   11e78:	sub	sp, sp, #36	; 0x24
   11e7c:	mov	r9, #0
   11e80:	mov	r5, r3
   11e84:	mov	r8, r2
   11e88:	mov	sl, r1
   11e8c:	mov	r7, r0
   11e90:	str	r9, [sp, #32]
   11e94:	bl	15234 <__assert_fail@plt+0x3e94>
   11e98:	movw	r1, #30398	; 0x76be
   11e9c:	mov	r4, r0
   11ea0:	movt	r1, #1
   11ea4:	bl	11304 <strtok@plt>
   11ea8:	cmp	r0, #0
   11eac:	str	r4, [sp, #20]
   11eb0:	str	sl, [sp, #16]
   11eb4:	str	r7, [sp, #8]
   11eb8:	str	r8, [sp, #4]
   11ebc:	str	r5, [sp, #12]
   11ec0:	beq	11ffc <__assert_fail@plt+0xc5c>
   11ec4:	mov	r6, r0
   11ec8:	cmp	r5, #0
   11ecc:	beq	12014 <__assert_fail@plt+0xc74>
   11ed0:	movw	sl, #30398	; 0x76be
   11ed4:	add	r8, sp, #24
   11ed8:	mov	r7, #0
   11edc:	mov	r5, #0
   11ee0:	mov	r9, #0
   11ee4:	movt	sl, #1
   11ee8:	movw	r0, #29276	; 0x725c
   11eec:	mov	r1, #0
   11ef0:	mov	r2, #10
   11ef4:	mov	r3, r8
   11ef8:	movt	r0, #1
   11efc:	str	r0, [sp]
   11f00:	mov	r0, r6
   11f04:	bl	15b68 <__assert_fail@plt+0x47c8>
   11f08:	cmp	r0, #0
   11f0c:	ldreq	r0, [sp, #28]
   11f10:	cmpeq	r0, #0
   11f14:	beq	11f6c <__assert_fail@plt+0xbcc>
   11f18:	mov	r0, r6
   11f1c:	bl	11394 <getgrnam@plt>
   11f20:	cmp	r0, #0
   11f24:	bne	11fa4 <__assert_fail@plt+0xc04>
   11f28:	bl	11298 <__errno_location@plt>
   11f2c:	ldr	r4, [r0]
   11f30:	movw	r1, #30400	; 0x76c0
   11f34:	mov	r0, #0
   11f38:	mov	r2, #5
   11f3c:	movt	r1, #1
   11f40:	bl	1116c <dcgettext@plt>
   11f44:	mov	r7, r0
   11f48:	mov	r0, r6
   11f4c:	bl	14248 <__assert_fail@plt+0x2ea8>
   11f50:	mov	r3, r0
   11f54:	mov	r0, #0
   11f58:	mov	r1, r4
   11f5c:	mov	r2, r7
   11f60:	bl	111fc <error@plt>
   11f64:	mvn	r7, #0
   11f68:	b	11fe0 <__assert_fail@plt+0xc40>
   11f6c:	sub	r4, r6, #1
   11f70:	bl	1125c <__ctype_b_loc@plt>
   11f74:	ldr	r0, [r0]
   11f78:	ldrb	r1, [r4, #1]!
   11f7c:	add	r2, r0, r1, lsl #1
   11f80:	ldrb	r2, [r2, #1]
   11f84:	tst	r2, #32
   11f88:	bne	11f78 <__assert_fail@plt+0xbd8>
   11f8c:	cmp	r1, #43	; 0x2b
   11f90:	beq	11fb4 <__assert_fail@plt+0xc14>
   11f94:	mov	r0, r4
   11f98:	bl	11394 <getgrnam@plt>
   11f9c:	cmp	r0, #0
   11fa0:	beq	11fb4 <__assert_fail@plt+0xc14>
   11fa4:	ldr	r0, [r0, #8]
   11fa8:	mov	r1, #0
   11fac:	str	r1, [sp, #28]
   11fb0:	str	r0, [sp, #24]
   11fb4:	ldr	r0, [sp, #32]
   11fb8:	cmp	r9, r0
   11fbc:	bne	11fd4 <__assert_fail@plt+0xc34>
   11fc0:	mov	r0, r5
   11fc4:	add	r1, sp, #32
   11fc8:	mov	r2, #4
   11fcc:	bl	14ec0 <__assert_fail@plt+0x3b20>
   11fd0:	mov	r5, r0
   11fd4:	ldr	r0, [sp, #24]
   11fd8:	str	r0, [r5, r9, lsl #2]
   11fdc:	add	r9, r9, #1
   11fe0:	mov	r0, #0
   11fe4:	mov	r1, sl
   11fe8:	bl	11304 <strtok@plt>
   11fec:	mov	r6, r0
   11ff0:	cmp	r0, #0
   11ff4:	bne	11ee8 <__assert_fail@plt+0xb48>
   11ff8:	b	12100 <__assert_fail@plt+0xd60>
   11ffc:	mov	r5, #0
   12000:	mov	r7, #0
   12004:	orrs	r0, r7, r9
   12008:	mvneq	r7, #0
   1200c:	beq	1210c <__assert_fail@plt+0xd6c>
   12010:	b	1216c <__assert_fail@plt+0xdcc>
   12014:	movw	r8, #29276	; 0x725c
   12018:	movw	r4, #30398	; 0x76be
   1201c:	add	sl, sp, #24
   12020:	mov	r5, #0
   12024:	mov	r9, #0
   12028:	mov	r7, #0
   1202c:	movt	r8, #1
   12030:	movt	r4, #1
   12034:	b	12074 <__assert_fail@plt+0xcd4>
   12038:	sub	r6, r6, #1
   1203c:	bl	1125c <__ctype_b_loc@plt>
   12040:	ldr	r0, [r0]
   12044:	ldrb	r1, [r6, #1]!
   12048:	add	r2, r0, r1, lsl #1
   1204c:	ldrb	r2, [r2, #1]
   12050:	tst	r2, #32
   12054:	bne	12044 <__assert_fail@plt+0xca4>
   12058:	cmp	r1, #43	; 0x2b
   1205c:	beq	120bc <__assert_fail@plt+0xd1c>
   12060:	mov	r0, r6
   12064:	bl	11394 <getgrnam@plt>
   12068:	cmp	r0, #0
   1206c:	bne	120ac <__assert_fail@plt+0xd0c>
   12070:	b	120bc <__assert_fail@plt+0xd1c>
   12074:	mov	r0, r6
   12078:	mov	r1, #0
   1207c:	mov	r2, #10
   12080:	mov	r3, sl
   12084:	str	r8, [sp]
   12088:	bl	15b68 <__assert_fail@plt+0x47c8>
   1208c:	cmp	r0, #0
   12090:	ldreq	r0, [sp, #28]
   12094:	cmpeq	r0, #0
   12098:	beq	12038 <__assert_fail@plt+0xc98>
   1209c:	mov	r0, r6
   120a0:	bl	11394 <getgrnam@plt>
   120a4:	cmp	r0, #0
   120a8:	beq	1214c <__assert_fail@plt+0xdac>
   120ac:	ldr	r0, [r0, #8]
   120b0:	mov	r1, #0
   120b4:	str	r1, [sp, #28]
   120b8:	str	r0, [sp, #24]
   120bc:	ldr	r0, [sp, #32]
   120c0:	cmp	r9, r0
   120c4:	bne	120dc <__assert_fail@plt+0xd3c>
   120c8:	mov	r0, r5
   120cc:	add	r1, sp, #32
   120d0:	mov	r2, #4
   120d4:	bl	14ec0 <__assert_fail@plt+0x3b20>
   120d8:	mov	r5, r0
   120dc:	ldr	r0, [sp, #24]
   120e0:	mov	r1, r4
   120e4:	str	r0, [r5, r9, lsl #2]
   120e8:	mov	r0, #0
   120ec:	bl	11304 <strtok@plt>
   120f0:	mov	r6, r0
   120f4:	add	r9, r9, #1
   120f8:	cmp	r0, #0
   120fc:	bne	12074 <__assert_fail@plt+0xcd4>
   12100:	orrs	r0, r7, r9
   12104:	mvneq	r7, #0
   12108:	bne	1216c <__assert_fail@plt+0xdcc>
   1210c:	ldr	r0, [sp, #12]
   12110:	cmp	r0, #0
   12114:	beq	1216c <__assert_fail@plt+0xdcc>
   12118:	movw	r1, #30417	; 0x76d1
   1211c:	mov	r0, #0
   12120:	mov	r2, #5
   12124:	movt	r1, #1
   12128:	bl	1116c <dcgettext@plt>
   1212c:	mov	r4, r0
   12130:	ldr	r0, [sp, #8]
   12134:	bl	14248 <__assert_fail@plt+0x2ea8>
   12138:	mov	r3, r0
   1213c:	mov	r0, #0
   12140:	mov	r1, #0
   12144:	mov	r2, r4
   12148:	bl	111fc <error@plt>
   1214c:	ldr	r0, [sp, #16]
   12150:	mvn	r7, #0
   12154:	str	r5, [r0]
   12158:	ldr	r0, [sp, #20]
   1215c:	bl	122a4 <__assert_fail@plt+0xf04>
   12160:	mov	r0, r7
   12164:	sub	sp, fp, #28
   12168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1216c:	ldr	r0, [sp, #16]
   12170:	cmp	r7, #0
   12174:	ldreq	r1, [sp, #4]
   12178:	moveq	r7, #0
   1217c:	str	r5, [r0]
   12180:	ldr	r0, [sp, #20]
   12184:	streq	r9, [r1]
   12188:	bl	122a4 <__assert_fail@plt+0xf04>
   1218c:	mov	r0, r7
   12190:	sub	sp, fp, #28
   12194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12198:	movw	r1, #33152	; 0x8180
   1219c:	movt	r1, #2
   121a0:	str	r0, [r1, #4]
   121a4:	bx	lr
   121a8:	movw	r1, #33152	; 0x8180
   121ac:	movt	r1, #2
   121b0:	strb	r0, [r1]
   121b4:	bx	lr
   121b8:	push	{r4, r5, r6, sl, fp, lr}
   121bc:	add	fp, sp, #16
   121c0:	sub	sp, sp, #8
   121c4:	movw	r0, #33140	; 0x8174
   121c8:	movt	r0, #2
   121cc:	ldr	r0, [r0]
   121d0:	bl	168f4 <__assert_fail@plt+0x5554>
   121d4:	cmp	r0, #0
   121d8:	beq	12200 <__assert_fail@plt+0xe60>
   121dc:	movw	r5, #33152	; 0x8180
   121e0:	movt	r5, #2
   121e4:	ldrb	r0, [r5]
   121e8:	cmp	r0, #0
   121ec:	beq	1222c <__assert_fail@plt+0xe8c>
   121f0:	bl	11298 <__errno_location@plt>
   121f4:	ldr	r0, [r0]
   121f8:	cmp	r0, #32
   121fc:	bne	1222c <__assert_fail@plt+0xe8c>
   12200:	movw	r0, #33136	; 0x8170
   12204:	movt	r0, #2
   12208:	ldr	r0, [r0]
   1220c:	bl	168f4 <__assert_fail@plt+0x5554>
   12210:	cmp	r0, #0
   12214:	subeq	sp, fp, #16
   12218:	popeq	{r4, r5, r6, sl, fp, pc}
   1221c:	movw	r0, #33052	; 0x811c
   12220:	movt	r0, #2
   12224:	ldr	r0, [r0]
   12228:	bl	11124 <_exit@plt>
   1222c:	movw	r1, #30607	; 0x778f
   12230:	mov	r0, #0
   12234:	mov	r2, #5
   12238:	movt	r1, #1
   1223c:	bl	1116c <dcgettext@plt>
   12240:	ldr	r6, [r5, #4]
   12244:	mov	r4, r0
   12248:	bl	11298 <__errno_location@plt>
   1224c:	ldr	r5, [r0]
   12250:	cmp	r6, #0
   12254:	bne	12270 <__assert_fail@plt+0xed0>
   12258:	movw	r2, #30623	; 0x779f
   1225c:	mov	r0, #0
   12260:	mov	r1, r5
   12264:	mov	r3, r4
   12268:	movt	r2, #1
   1226c:	b	12290 <__assert_fail@plt+0xef0>
   12270:	mov	r0, r6
   12274:	bl	13ec0 <__assert_fail@plt+0x2b20>
   12278:	movw	r2, #30619	; 0x779b
   1227c:	mov	r3, r0
   12280:	str	r4, [sp]
   12284:	mov	r0, #0
   12288:	mov	r1, r5
   1228c:	movt	r2, #1
   12290:	bl	111fc <error@plt>
   12294:	movw	r0, #33052	; 0x811c
   12298:	movt	r0, #2
   1229c:	ldr	r0, [r0]
   122a0:	bl	11124 <_exit@plt>
   122a4:	push	{r4, r5, r6, sl, fp, lr}
   122a8:	add	fp, sp, #16
   122ac:	mov	r4, r0
   122b0:	bl	11298 <__errno_location@plt>
   122b4:	ldr	r6, [r0]
   122b8:	mov	r5, r0
   122bc:	mov	r0, r4
   122c0:	bl	11118 <free@plt>
   122c4:	str	r6, [r5]
   122c8:	pop	{r4, r5, r6, sl, fp, pc}
   122cc:	push	{r4, r5, fp, lr}
   122d0:	add	fp, sp, #8
   122d4:	cmp	r0, #0
   122d8:	beq	1236c <__assert_fail@plt+0xfcc>
   122dc:	mov	r1, #47	; 0x2f
   122e0:	mov	r4, r0
   122e4:	bl	11328 <strrchr@plt>
   122e8:	cmp	r0, #0
   122ec:	mov	r5, r4
   122f0:	addne	r5, r0, #1
   122f4:	sub	r0, r5, r4
   122f8:	cmp	r0, #7
   122fc:	blt	12350 <__assert_fail@plt+0xfb0>
   12300:	movw	r1, #30682	; 0x77da
   12304:	sub	r0, r5, #7
   12308:	mov	r2, #7
   1230c:	movt	r1, #1
   12310:	bl	11370 <strncmp@plt>
   12314:	cmp	r0, #0
   12318:	bne	12350 <__assert_fail@plt+0xfb0>
   1231c:	movw	r1, #30690	; 0x77e2
   12320:	mov	r0, r5
   12324:	mov	r2, #3
   12328:	movt	r1, #1
   1232c:	bl	11370 <strncmp@plt>
   12330:	cmp	r0, #0
   12334:	beq	12340 <__assert_fail@plt+0xfa0>
   12338:	mov	r4, r5
   1233c:	b	12350 <__assert_fail@plt+0xfb0>
   12340:	movw	r0, #33120	; 0x8160
   12344:	add	r4, r5, #3
   12348:	movt	r0, #2
   1234c:	str	r4, [r0]
   12350:	movw	r0, #33124	; 0x8164
   12354:	movt	r0, #2
   12358:	str	r4, [r0]
   1235c:	movw	r0, #33160	; 0x8188
   12360:	movt	r0, #2
   12364:	str	r4, [r0]
   12368:	pop	{r4, r5, fp, pc}
   1236c:	movw	r0, #33136	; 0x8170
   12370:	mov	r1, #55	; 0x37
   12374:	mov	r2, #1
   12378:	movt	r0, #2
   1237c:	ldr	r3, [r0]
   12380:	movw	r0, #30626	; 0x77a2
   12384:	movt	r0, #1
   12388:	bl	111b4 <fwrite@plt>
   1238c:	bl	1137c <abort@plt>
   12390:	push	{r4, r5, r6, sl, fp, lr}
   12394:	add	fp, sp, #16
   12398:	mov	r4, r0
   1239c:	movw	r0, #33168	; 0x8190
   123a0:	movt	r0, #2
   123a4:	cmp	r4, #0
   123a8:	moveq	r4, r0
   123ac:	bl	11298 <__errno_location@plt>
   123b0:	ldr	r6, [r0]
   123b4:	mov	r5, r0
   123b8:	mov	r0, r4
   123bc:	mov	r1, #48	; 0x30
   123c0:	bl	15174 <__assert_fail@plt+0x3dd4>
   123c4:	str	r6, [r5]
   123c8:	pop	{r4, r5, r6, sl, fp, pc}
   123cc:	movw	r1, #33168	; 0x8190
   123d0:	cmp	r0, #0
   123d4:	movt	r1, #2
   123d8:	movne	r1, r0
   123dc:	ldr	r0, [r1]
   123e0:	bx	lr
   123e4:	movw	r2, #33168	; 0x8190
   123e8:	cmp	r0, #0
   123ec:	movt	r2, #2
   123f0:	movne	r2, r0
   123f4:	str	r1, [r2]
   123f8:	bx	lr
   123fc:	movw	r3, #33168	; 0x8190
   12400:	cmp	r0, #0
   12404:	movt	r3, #2
   12408:	movne	r3, r0
   1240c:	ubfx	r0, r1, #5, #3
   12410:	and	r1, r1, #31
   12414:	add	r0, r3, r0, lsl #2
   12418:	ldr	r3, [r0, #8]
   1241c:	eor	r2, r2, r3, lsr r1
   12420:	and	r2, r2, #1
   12424:	eor	r2, r3, r2, lsl r1
   12428:	str	r2, [r0, #8]
   1242c:	mov	r0, #1
   12430:	and	r0, r0, r3, lsr r1
   12434:	bx	lr
   12438:	movw	r2, #33168	; 0x8190
   1243c:	cmp	r0, #0
   12440:	movt	r2, #2
   12444:	movne	r2, r0
   12448:	ldr	r0, [r2, #4]
   1244c:	str	r1, [r2, #4]
   12450:	bx	lr
   12454:	movw	r3, #33168	; 0x8190
   12458:	cmp	r0, #0
   1245c:	movt	r3, #2
   12460:	movne	r3, r0
   12464:	cmp	r1, #0
   12468:	mov	r0, #10
   1246c:	cmpne	r2, #0
   12470:	str	r0, [r3]
   12474:	bne	12484 <__assert_fail@plt+0x10e4>
   12478:	push	{fp, lr}
   1247c:	mov	fp, sp
   12480:	bl	1137c <abort@plt>
   12484:	str	r1, [r3, #40]	; 0x28
   12488:	str	r2, [r3, #44]	; 0x2c
   1248c:	bx	lr
   12490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12494:	add	fp, sp, #28
   12498:	sub	sp, sp, #20
   1249c:	mov	r7, r0
   124a0:	ldr	r0, [fp, #8]
   124a4:	movw	r5, #33168	; 0x8190
   124a8:	mov	r8, r3
   124ac:	mov	r9, r2
   124b0:	mov	sl, r1
   124b4:	movt	r5, #2
   124b8:	cmp	r0, #0
   124bc:	movne	r5, r0
   124c0:	bl	11298 <__errno_location@plt>
   124c4:	mov	r4, r0
   124c8:	ldm	r5, {r0, r1}
   124cc:	ldr	r2, [r5, #40]	; 0x28
   124d0:	ldr	r3, [r5, #44]	; 0x2c
   124d4:	add	r5, r5, #8
   124d8:	ldr	r6, [r4]
   124dc:	stm	sp, {r0, r1, r5}
   124e0:	str	r2, [sp, #12]
   124e4:	str	r3, [sp, #16]
   124e8:	mov	r0, r7
   124ec:	mov	r1, sl
   124f0:	mov	r2, r9
   124f4:	mov	r3, r8
   124f8:	bl	12508 <__assert_fail@plt+0x1168>
   124fc:	str	r6, [r4]
   12500:	sub	sp, fp, #28
   12504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1250c:	add	fp, sp, #28
   12510:	sub	sp, sp, #156	; 0x9c
   12514:	str	r0, [sp, #76]	; 0x4c
   12518:	ldr	r0, [fp, #12]
   1251c:	mov	r6, r1
   12520:	str	r3, [sp, #84]	; 0x54
   12524:	str	r2, [fp, #-84]	; 0xffffffac
   12528:	and	r1, r0, #4
   1252c:	str	r1, [sp, #24]
   12530:	and	r1, r0, #1
   12534:	str	r1, [sp, #28]
   12538:	ubfx	r8, r0, #1, #1
   1253c:	bl	111cc <__ctype_get_mb_cur_max@plt>
   12540:	str	r0, [sp, #32]
   12544:	ldr	r0, [fp, #24]
   12548:	ldr	r7, [fp, #8]
   1254c:	mov	r1, #0
   12550:	mov	r2, #0
   12554:	mov	r4, #1
   12558:	str	r1, [sp, #52]	; 0x34
   1255c:	str	r0, [sp, #72]	; 0x48
   12560:	ldr	r0, [fp, #20]
   12564:	str	r0, [sp, #68]	; 0x44
   12568:	mov	r0, #0
   1256c:	str	r0, [sp, #48]	; 0x30
   12570:	mov	r0, #0
   12574:	str	r0, [sp, #92]	; 0x5c
   12578:	mov	r0, #0
   1257c:	str	r0, [fp, #-76]	; 0xffffffb4
   12580:	mov	r0, #0
   12584:	cmp	r7, #10
   12588:	bhi	13870 <__assert_fail@plt+0x24d0>
   1258c:	add	r1, pc, #28
   12590:	mov	sl, r6
   12594:	ldr	r6, [sp, #76]	; 0x4c
   12598:	ldr	ip, [fp, #-84]	; 0xffffffac
   1259c:	ldr	lr, [sp, #84]	; 0x54
   125a0:	mov	r9, #0
   125a4:	mov	r3, #1
   125a8:	mov	r5, #0
   125ac:	ldr	pc, [r1, r7, lsl #2]
   125b0:	andeq	r2, r1, r0, lsl #13
   125b4:			; <UNDEFINED> instruction: 0x000126bc
   125b8:	muleq	r1, r0, r6
   125bc:	andeq	r2, r1, r8, ror r6
   125c0:			; <UNDEFINED> instruction: 0x000126b0
   125c4:	andeq	r2, r1, r4, ror #13
   125c8:	andeq	r2, r1, r0, lsr #13
   125cc:	strdeq	r2, [r1], -r0
   125d0:	ldrdeq	r2, [r1], -ip
   125d4:	ldrdeq	r2, [r1], -ip
   125d8:	andeq	r2, r1, r4, lsl #17
   125dc:	mov	r9, r4
   125e0:	movw	r4, #30772	; 0x7834
   125e4:	mov	r5, r8
   125e8:	mov	r8, r2
   125ec:	mov	r0, #0
   125f0:	mov	r2, #5
   125f4:	movt	r4, #1
   125f8:	mov	r1, r4
   125fc:	bl	1116c <dcgettext@plt>
   12600:	cmp	r0, r4
   12604:	str	r0, [sp, #68]	; 0x44
   12608:	bne	12798 <__assert_fail@plt+0x13f8>
   1260c:	bl	16b7c <__assert_fail@plt+0x57dc>
   12610:	ldrb	r1, [r0]
   12614:	and	r1, r1, #223	; 0xdf
   12618:	cmp	r1, #71	; 0x47
   1261c:	beq	12764 <__assert_fail@plt+0x13c4>
   12620:	cmp	r1, #85	; 0x55
   12624:	bne	1277c <__assert_fail@plt+0x13dc>
   12628:	ldrb	r1, [r0, #1]
   1262c:	and	r1, r1, #223	; 0xdf
   12630:	cmp	r1, #84	; 0x54
   12634:	bne	1277c <__assert_fail@plt+0x13dc>
   12638:	ldrb	r1, [r0, #2]
   1263c:	and	r1, r1, #223	; 0xdf
   12640:	cmp	r1, #70	; 0x46
   12644:	bne	1277c <__assert_fail@plt+0x13dc>
   12648:	ldrb	r1, [r0, #3]
   1264c:	cmp	r1, #45	; 0x2d
   12650:	ldrbeq	r1, [r0, #4]
   12654:	cmpeq	r1, #56	; 0x38
   12658:	bne	1277c <__assert_fail@plt+0x13dc>
   1265c:	ldrb	r0, [r0, #5]
   12660:	cmp	r0, #0
   12664:	movw	r0, #30776	; 0x7838
   12668:	movt	r0, #1
   1266c:	str	r0, [sp, #68]	; 0x44
   12670:	bne	1277c <__assert_fail@plt+0x13dc>
   12674:	b	12798 <__assert_fail@plt+0x13f8>
   12678:	mov	r0, #1
   1267c:	b	126bc <__assert_fail@plt+0x131c>
   12680:	mov	r7, #0
   12684:	mov	r9, #0
   12688:	mov	r3, r0
   1268c:	b	1275c <__assert_fail@plt+0x13bc>
   12690:	tst	r8, #1
   12694:	bne	126bc <__assert_fail@plt+0x131c>
   12698:	mov	r3, r0
   1269c:	b	12714 <__assert_fail@plt+0x1374>
   126a0:	mov	r0, #1
   126a4:	mov	r9, #0
   126a8:	mov	r7, #5
   126ac:	b	126f8 <__assert_fail@plt+0x1358>
   126b0:	mov	r3, #1
   126b4:	tst	r8, #1
   126b8:	beq	12714 <__assert_fail@plt+0x1374>
   126bc:	mov	r1, #1
   126c0:	mov	r9, #0
   126c4:	mov	r7, #2
   126c8:	mov	r3, r0
   126cc:	mov	r5, #1
   126d0:	str	r1, [fp, #-76]	; 0xffffffb4
   126d4:	movw	r1, #30774	; 0x7836
   126d8:	movt	r1, #1
   126dc:	str	r1, [sp, #92]	; 0x5c
   126e0:	b	128f0 <__assert_fail@plt+0x1550>
   126e4:	mov	r7, #5
   126e8:	tst	r8, #1
   126ec:	beq	12734 <__assert_fail@plt+0x1394>
   126f0:	mov	r0, #1
   126f4:	mov	r9, #0
   126f8:	str	r0, [fp, #-76]	; 0xffffffb4
   126fc:	movw	r0, #30770	; 0x7832
   12700:	mov	r3, #1
   12704:	mov	r5, #1
   12708:	movt	r0, #1
   1270c:	str	r0, [sp, #92]	; 0x5c
   12710:	b	128f0 <__assert_fail@plt+0x1550>
   12714:	cmp	sl, #0
   12718:	mov	r9, #1
   1271c:	mov	r7, #2
   12720:	movne	r0, #39	; 0x27
   12724:	strbne	r0, [r6]
   12728:	movw	r0, #30774	; 0x7836
   1272c:	movt	r0, #1
   12730:	b	12750 <__assert_fail@plt+0x13b0>
   12734:	cmp	sl, #0
   12738:	mov	r9, #1
   1273c:	mov	r3, #1
   12740:	movne	r0, #34	; 0x22
   12744:	strbne	r0, [r6]
   12748:	movw	r0, #30770	; 0x7832
   1274c:	movt	r0, #1
   12750:	str	r0, [sp, #92]	; 0x5c
   12754:	mov	r0, #1
   12758:	str	r0, [fp, #-76]	; 0xffffffb4
   1275c:	mov	r5, #0
   12760:	b	128f0 <__assert_fail@plt+0x1550>
   12764:	ldrb	r1, [r0, #1]
   12768:	and	r1, r1, #223	; 0xdf
   1276c:	cmp	r1, #66	; 0x42
   12770:	ldrbeq	r1, [r0, #2]
   12774:	cmpeq	r1, #49	; 0x31
   12778:	beq	13698 <__assert_fail@plt+0x22f8>
   1277c:	movw	r0, #30774	; 0x7836
   12780:	movw	r1, #30770	; 0x7832
   12784:	cmp	r7, #9
   12788:	movt	r0, #1
   1278c:	movt	r1, #1
   12790:	moveq	r0, r1
   12794:	str	r0, [sp, #68]	; 0x44
   12798:	movw	r4, #30774	; 0x7836
   1279c:	mov	r0, #0
   127a0:	mov	r2, #5
   127a4:	movt	r4, #1
   127a8:	mov	r1, r4
   127ac:	bl	1116c <dcgettext@plt>
   127b0:	cmp	r0, r4
   127b4:	str	r0, [sp, #72]	; 0x48
   127b8:	beq	127c8 <__assert_fail@plt+0x1428>
   127bc:	mov	r4, r9
   127c0:	mov	r2, r8
   127c4:	b	12880 <__assert_fail@plt+0x14e0>
   127c8:	bl	16b7c <__assert_fail@plt+0x57dc>
   127cc:	ldrb	r1, [r0]
   127d0:	mov	r4, r9
   127d4:	and	r1, r1, #223	; 0xdf
   127d8:	cmp	r1, #71	; 0x47
   127dc:	beq	12838 <__assert_fail@plt+0x1498>
   127e0:	cmp	r1, #85	; 0x55
   127e4:	mov	r2, r8
   127e8:	bne	12860 <__assert_fail@plt+0x14c0>
   127ec:	ldrb	r1, [r0, #1]
   127f0:	and	r1, r1, #223	; 0xdf
   127f4:	cmp	r1, #84	; 0x54
   127f8:	bne	12860 <__assert_fail@plt+0x14c0>
   127fc:	ldrb	r1, [r0, #2]
   12800:	and	r1, r1, #223	; 0xdf
   12804:	cmp	r1, #70	; 0x46
   12808:	ldrbeq	r1, [r0, #3]
   1280c:	cmpeq	r1, #45	; 0x2d
   12810:	bne	12860 <__assert_fail@plt+0x14c0>
   12814:	ldrb	r1, [r0, #4]
   12818:	cmp	r1, #56	; 0x38
   1281c:	ldrbeq	r0, [r0, #5]
   12820:	cmpeq	r0, #0
   12824:	bne	12860 <__assert_fail@plt+0x14c0>
   12828:	movw	r0, #30780	; 0x783c
   1282c:	movt	r0, #1
   12830:	str	r0, [sp, #72]	; 0x48
   12834:	b	12880 <__assert_fail@plt+0x14e0>
   12838:	ldrb	r1, [r0, #1]
   1283c:	mov	r2, r8
   12840:	and	r1, r1, #223	; 0xdf
   12844:	cmp	r1, #66	; 0x42
   12848:	bne	12860 <__assert_fail@plt+0x14c0>
   1284c:	ldrb	r1, [r0, #2]
   12850:	cmp	r1, #49	; 0x31
   12854:	ldrbeq	r1, [r0, #3]
   12858:	cmpeq	r1, #56	; 0x38
   1285c:	beq	136dc <__assert_fail@plt+0x233c>
   12860:	movw	r0, #30774	; 0x7836
   12864:	cmp	r7, #9
   12868:	movt	r0, #1
   1286c:	mov	r1, r0
   12870:	movw	r0, #30770	; 0x7832
   12874:	movt	r0, #1
   12878:	moveq	r1, r0
   1287c:	str	r1, [sp, #72]	; 0x48
   12880:	mov	r8, r5
   12884:	mov	r9, #0
   12888:	tst	r8, #1
   1288c:	mov	r5, r8
   12890:	str	r2, [fp, #-48]	; 0xffffffd0
   12894:	bne	128cc <__assert_fail@plt+0x152c>
   12898:	ldr	r0, [sp, #68]	; 0x44
   1289c:	ldrb	r0, [r0]
   128a0:	cmp	r0, #0
   128a4:	beq	128cc <__assert_fail@plt+0x152c>
   128a8:	ldr	r1, [sp, #68]	; 0x44
   128ac:	mov	r9, #0
   128b0:	add	r1, r1, #1
   128b4:	cmp	r9, sl
   128b8:	strbcc	r0, [r6, r9]
   128bc:	ldrb	r0, [r1, r9]
   128c0:	add	r9, r9, #1
   128c4:	cmp	r0, #0
   128c8:	bne	128b4 <__assert_fail@plt+0x1514>
   128cc:	ldr	r8, [sp, #72]	; 0x48
   128d0:	mov	r0, r8
   128d4:	bl	11280 <strlen@plt>
   128d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   128dc:	ldr	lr, [sp, #84]	; 0x54
   128e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   128e4:	str	r0, [fp, #-76]	; 0xffffffb4
   128e8:	str	r8, [sp, #92]	; 0x5c
   128ec:	mov	r3, #1
   128f0:	ldr	r0, [fp, #16]
   128f4:	str	r7, [fp, #-64]	; 0xffffffc0
   128f8:	str	r5, [fp, #-72]	; 0xffffffb8
   128fc:	str	r3, [sp, #80]	; 0x50
   12900:	cmp	r0, #0
   12904:	movwne	r0, #1
   12908:	and	r0, r0, r5
   1290c:	str	r0, [fp, #-88]	; 0xffffffa8
   12910:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12914:	cmp	r0, #0
   12918:	movwne	r0, #1
   1291c:	subs	r7, r7, #2
   12920:	and	r1, r0, r5
   12924:	str	r7, [fp, #-80]	; 0xffffffb0
   12928:	and	r1, r3, r1
   1292c:	str	r1, [sp, #40]	; 0x28
   12930:	clz	r1, r7
   12934:	lsr	r1, r1, #5
   12938:	and	r1, r1, r5
   1293c:	eor	r5, r5, #1
   12940:	str	r1, [sp, #36]	; 0x24
   12944:	mov	r1, r7
   12948:	str	r5, [sp, #88]	; 0x58
   1294c:	mov	r7, #0
   12950:	movwne	r1, #1
   12954:	orr	r5, r1, r5
   12958:	and	r1, r1, r3
   1295c:	and	r0, r0, r1
   12960:	str	r5, [sp, #60]	; 0x3c
   12964:	str	r1, [fp, #-68]	; 0xffffffbc
   12968:	str	r0, [fp, #-60]	; 0xffffffc4
   1296c:	eor	r0, r3, #1
   12970:	str	r0, [sp, #44]	; 0x2c
   12974:	cmn	lr, #1
   12978:	beq	12988 <__assert_fail@plt+0x15e8>
   1297c:	cmp	r7, lr
   12980:	bne	12994 <__assert_fail@plt+0x15f4>
   12984:	b	1360c <__assert_fail@plt+0x226c>
   12988:	ldrb	r0, [ip, r7]
   1298c:	cmp	r0, #0
   12990:	beq	13614 <__assert_fail@plt+0x2274>
   12994:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12998:	mov	r8, #0
   1299c:	str	r4, [fp, #-52]	; 0xffffffcc
   129a0:	str	r2, [fp, #-48]	; 0xffffffd0
   129a4:	cmp	r0, #0
   129a8:	beq	129dc <__assert_fail@plt+0x163c>
   129ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   129b0:	add	r4, r7, r0
   129b4:	cmp	r0, #2
   129b8:	bcc	129d4 <__assert_fail@plt+0x1634>
   129bc:	cmn	lr, #1
   129c0:	bne	129d4 <__assert_fail@plt+0x1634>
   129c4:	mov	r0, ip
   129c8:	bl	11280 <strlen@plt>
   129cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   129d0:	mov	lr, r0
   129d4:	cmp	r4, lr
   129d8:	bls	129f4 <__assert_fail@plt+0x1654>
   129dc:	mov	r0, #0
   129e0:	str	r0, [fp, #-56]	; 0xffffffc8
   129e4:	ldrb	r5, [ip, r7]
   129e8:	cmp	r5, #126	; 0x7e
   129ec:	bls	12a44 <__assert_fail@plt+0x16a4>
   129f0:	b	12e4c <__assert_fail@plt+0x1aac>
   129f4:	ldr	r1, [sp, #92]	; 0x5c
   129f8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   129fc:	add	r0, ip, r7
   12a00:	mov	r4, lr
   12a04:	bl	11160 <memcmp@plt>
   12a08:	ldr	r2, [sp, #88]	; 0x58
   12a0c:	cmp	r0, #0
   12a10:	mov	r1, r0
   12a14:	movwne	r1, #1
   12a18:	orr	r1, r1, r2
   12a1c:	tst	r1, #1
   12a20:	beq	13720 <__assert_fail@plt+0x2380>
   12a24:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a28:	clz	r0, r0
   12a2c:	mov	lr, r4
   12a30:	lsr	r0, r0, #5
   12a34:	str	r0, [fp, #-56]	; 0xffffffc8
   12a38:	ldrb	r5, [ip, r7]
   12a3c:	cmp	r5, #126	; 0x7e
   12a40:	bhi	12e4c <__assert_fail@plt+0x1aac>
   12a44:	add	r3, pc, #16
   12a48:	mov	r4, #1
   12a4c:	mov	r2, #110	; 0x6e
   12a50:	mov	r0, #97	; 0x61
   12a54:	mov	r1, #0
   12a58:	ldr	pc, [r3, r5, lsl #2]
   12a5c:	andeq	r2, r1, ip, lsr #26
   12a60:	andeq	r2, r1, ip, asr #28
   12a64:	andeq	r2, r1, ip, asr #28
   12a68:	andeq	r2, r1, ip, asr #28
   12a6c:	andeq	r2, r1, ip, asr #28
   12a70:	andeq	r2, r1, ip, asr #28
   12a74:	andeq	r2, r1, ip, asr #28
   12a78:	andeq	r2, r1, r8, lsr #30
   12a7c:	andeq	r2, r1, ip, lsl #26
   12a80:	strdeq	r2, [r1], -r4
   12a84:	andeq	r2, r1, r8, lsl sp
   12a88:	andeq	r2, r1, r8, lsr #27
   12a8c:	andeq	r2, r1, ip, ror #25
   12a90:	andeq	r2, r1, r4, lsl sp
   12a94:	andeq	r2, r1, ip, asr #28
   12a98:	andeq	r2, r1, ip, asr #28
   12a9c:	andeq	r2, r1, ip, asr #28
   12aa0:	andeq	r2, r1, ip, asr #28
   12aa4:	andeq	r2, r1, ip, asr #28
   12aa8:	andeq	r2, r1, ip, asr #28
   12aac:	andeq	r2, r1, ip, asr #28
   12ab0:	andeq	r2, r1, ip, asr #28
   12ab4:	andeq	r2, r1, ip, asr #28
   12ab8:	andeq	r2, r1, ip, asr #28
   12abc:	andeq	r2, r1, ip, asr #28
   12ac0:	andeq	r2, r1, ip, asr #28
   12ac4:	andeq	r2, r1, ip, asr #28
   12ac8:	andeq	r2, r1, ip, asr #28
   12acc:	andeq	r2, r1, ip, asr #28
   12ad0:	andeq	r2, r1, ip, asr #28
   12ad4:	andeq	r2, r1, ip, asr #28
   12ad8:	andeq	r2, r1, ip, asr #28
   12adc:	andeq	r2, r1, r4, lsr #29
   12ae0:	andeq	r2, r1, r8, lsr #29
   12ae4:	andeq	r2, r1, r8, lsr #29
   12ae8:	andeq	r2, r1, r8, ror ip
   12aec:	andeq	r2, r1, r8, lsr #29
   12af0:	andeq	r2, r1, r8, asr ip
   12af4:	andeq	r2, r1, r8, lsr #29
   12af8:			; <UNDEFINED> instruction: 0x00012db0
   12afc:	andeq	r2, r1, r8, lsr #29
   12b00:	andeq	r2, r1, r8, lsr #29
   12b04:	andeq	r2, r1, r8, lsr #29
   12b08:	andeq	r2, r1, r8, asr ip
   12b0c:	andeq	r2, r1, r8, asr ip
   12b10:	andeq	r2, r1, r8, asr ip
   12b14:	andeq	r2, r1, r8, asr ip
   12b18:	andeq	r2, r1, r8, asr ip
   12b1c:	andeq	r2, r1, r8, asr ip
   12b20:	andeq	r2, r1, r8, asr ip
   12b24:	andeq	r2, r1, r8, asr ip
   12b28:	andeq	r2, r1, r8, asr ip
   12b2c:	andeq	r2, r1, r8, asr ip
   12b30:	andeq	r2, r1, r8, asr ip
   12b34:	andeq	r2, r1, r8, asr ip
   12b38:	andeq	r2, r1, r8, asr ip
   12b3c:	andeq	r2, r1, r8, asr ip
   12b40:	andeq	r2, r1, r8, asr ip
   12b44:	andeq	r2, r1, r8, asr ip
   12b48:	andeq	r2, r1, r8, lsr #29
   12b4c:	andeq	r2, r1, r8, lsr #29
   12b50:	andeq	r2, r1, r8, lsr #29
   12b54:	andeq	r2, r1, r8, lsr #29
   12b58:	andeq	r2, r1, ip, ror #26
   12b5c:	andeq	r2, r1, ip, asr #28
   12b60:	andeq	r2, r1, r8, asr ip
   12b64:	andeq	r2, r1, r8, asr ip
   12b68:	andeq	r2, r1, r8, asr ip
   12b6c:	andeq	r2, r1, r8, asr ip
   12b70:	andeq	r2, r1, r8, asr ip
   12b74:	andeq	r2, r1, r8, asr ip
   12b78:	andeq	r2, r1, r8, asr ip
   12b7c:	andeq	r2, r1, r8, asr ip
   12b80:	andeq	r2, r1, r8, asr ip
   12b84:	andeq	r2, r1, r8, asr ip
   12b88:	andeq	r2, r1, r8, asr ip
   12b8c:	andeq	r2, r1, r8, asr ip
   12b90:	andeq	r2, r1, r8, asr ip
   12b94:	andeq	r2, r1, r8, asr ip
   12b98:	andeq	r2, r1, r8, asr ip
   12b9c:	andeq	r2, r1, r8, asr ip
   12ba0:	andeq	r2, r1, r8, asr ip
   12ba4:	andeq	r2, r1, r8, asr ip
   12ba8:	andeq	r2, r1, r8, asr ip
   12bac:	andeq	r2, r1, r8, asr ip
   12bb0:	andeq	r2, r1, r8, asr ip
   12bb4:	andeq	r2, r1, r8, asr ip
   12bb8:	andeq	r2, r1, r8, asr ip
   12bbc:	andeq	r2, r1, r8, asr ip
   12bc0:	andeq	r2, r1, r8, asr ip
   12bc4:	andeq	r2, r1, r8, asr ip
   12bc8:	andeq	r2, r1, r8, lsr #29
   12bcc:			; <UNDEFINED> instruction: 0x00012cb8
   12bd0:	andeq	r2, r1, r8, asr ip
   12bd4:	andeq	r2, r1, r8, lsr #29
   12bd8:	andeq	r2, r1, r8, asr ip
   12bdc:	andeq	r2, r1, r8, lsr #29
   12be0:	andeq	r2, r1, r8, asr ip
   12be4:	andeq	r2, r1, r8, asr ip
   12be8:	andeq	r2, r1, r8, asr ip
   12bec:	andeq	r2, r1, r8, asr ip
   12bf0:	andeq	r2, r1, r8, asr ip
   12bf4:	andeq	r2, r1, r8, asr ip
   12bf8:	andeq	r2, r1, r8, asr ip
   12bfc:	andeq	r2, r1, r8, asr ip
   12c00:	andeq	r2, r1, r8, asr ip
   12c04:	andeq	r2, r1, r8, asr ip
   12c08:	andeq	r2, r1, r8, asr ip
   12c0c:	andeq	r2, r1, r8, asr ip
   12c10:	andeq	r2, r1, r8, asr ip
   12c14:	andeq	r2, r1, r8, asr ip
   12c18:	andeq	r2, r1, r8, asr ip
   12c1c:	andeq	r2, r1, r8, asr ip
   12c20:	andeq	r2, r1, r8, asr ip
   12c24:	andeq	r2, r1, r8, asr ip
   12c28:	andeq	r2, r1, r8, asr ip
   12c2c:	andeq	r2, r1, r8, asr ip
   12c30:	andeq	r2, r1, r8, asr ip
   12c34:	andeq	r2, r1, r8, asr ip
   12c38:	andeq	r2, r1, r8, asr ip
   12c3c:	andeq	r2, r1, r8, asr ip
   12c40:	andeq	r2, r1, r8, asr ip
   12c44:	andeq	r2, r1, r8, asr ip
   12c48:	muleq	r1, r8, ip
   12c4c:	andeq	r2, r1, r8, lsr #29
   12c50:	muleq	r1, r8, ip
   12c54:	andeq	r2, r1, r8, ror ip
   12c58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c5c:	cmp	r0, #0
   12c60:	beq	12f3c <__assert_fail@plt+0x1b9c>
   12c64:	ldr	r0, [fp, #16]
   12c68:	cmp	r0, #0
   12c6c:	mov	r0, r5
   12c70:	bne	12f4c <__assert_fail@plt+0x1bac>
   12c74:	b	12f6c <__assert_fail@plt+0x1bcc>
   12c78:	mov	r4, #0
   12c7c:	cmp	r7, #0
   12c80:	beq	12ea4 <__assert_fail@plt+0x1b04>
   12c84:	mov	r8, #0
   12c88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c8c:	cmp	r0, #0
   12c90:	bne	12c64 <__assert_fail@plt+0x18c4>
   12c94:	b	12f3c <__assert_fail@plt+0x1b9c>
   12c98:	mov	r4, #0
   12c9c:	cmn	lr, #1
   12ca0:	beq	12e7c <__assert_fail@plt+0x1adc>
   12ca4:	cmp	r7, #0
   12ca8:	bne	12c84 <__assert_fail@plt+0x18e4>
   12cac:	cmp	lr, #1
   12cb0:	beq	12ea4 <__assert_fail@plt+0x1b04>
   12cb4:	b	12c84 <__assert_fail@plt+0x18e4>
   12cb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cbc:	cmp	r0, #2
   12cc0:	bne	12ed4 <__assert_fail@plt+0x1b34>
   12cc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cc8:	tst	r0, #1
   12ccc:	bne	13734 <__assert_fail@plt+0x2394>
   12cd0:	mov	r8, #0
   12cd4:	mov	r0, #92	; 0x5c
   12cd8:	mov	r4, #0
   12cdc:	cmp	r8, #0
   12ce0:	beq	12ef4 <__assert_fail@plt+0x1b54>
   12ce4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ce8:	b	12fe8 <__assert_fail@plt+0x1c48>
   12cec:	mov	r0, #102	; 0x66
   12cf0:	b	12f28 <__assert_fail@plt+0x1b88>
   12cf4:	mov	r2, #116	; 0x74
   12cf8:	ldr	r0, [sp, #60]	; 0x3c
   12cfc:	tst	r0, #1
   12d00:	mov	r0, r2
   12d04:	bne	12f28 <__assert_fail@plt+0x1b88>
   12d08:	b	13734 <__assert_fail@plt+0x2394>
   12d0c:	mov	r0, #98	; 0x62
   12d10:	b	12f28 <__assert_fail@plt+0x1b88>
   12d14:	mov	r2, #114	; 0x72
   12d18:	ldr	r0, [sp, #60]	; 0x3c
   12d1c:	tst	r0, #1
   12d20:	mov	r0, r2
   12d24:	bne	12f28 <__assert_fail@plt+0x1b88>
   12d28:	b	13734 <__assert_fail@plt+0x2394>
   12d2c:	ldr	r0, [sp, #80]	; 0x50
   12d30:	tst	r0, #1
   12d34:	beq	13010 <__assert_fail@plt+0x1c70>
   12d38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d3c:	tst	r0, #1
   12d40:	bne	1385c <__assert_fail@plt+0x24bc>
   12d44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d48:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12d4c:	cmp	r0, #2
   12d50:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12d54:	movwne	r0, #1
   12d58:	orr	r0, r0, r2
   12d5c:	tst	r0, #1
   12d60:	beq	13308 <__assert_fail@plt+0x1f68>
   12d64:	mov	r0, r9
   12d68:	b	1333c <__assert_fail@plt+0x1f9c>
   12d6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d70:	mov	r8, #0
   12d74:	mov	r5, #63	; 0x3f
   12d78:	cmp	r0, #5
   12d7c:	beq	131c4 <__assert_fail@plt+0x1e24>
   12d80:	cmp	r0, #2
   12d84:	bne	13274 <__assert_fail@plt+0x1ed4>
   12d88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d8c:	tst	r0, #1
   12d90:	bne	13734 <__assert_fail@plt+0x2394>
   12d94:	mov	r4, #0
   12d98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d9c:	cmp	r0, #0
   12da0:	bne	12c64 <__assert_fail@plt+0x18c4>
   12da4:	b	12f3c <__assert_fail@plt+0x1b9c>
   12da8:	mov	r0, #118	; 0x76
   12dac:	b	12f28 <__assert_fail@plt+0x1b88>
   12db0:	mov	r0, #1
   12db4:	mov	r5, #39	; 0x27
   12db8:	str	r0, [sp, #52]	; 0x34
   12dbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12dc0:	cmp	r0, #2
   12dc4:	bne	12e38 <__assert_fail@plt+0x1a98>
   12dc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12dcc:	tst	r0, #1
   12dd0:	bne	13734 <__assert_fail@plt+0x2394>
   12dd4:	ldr	r2, [sp, #48]	; 0x30
   12dd8:	clz	r1, sl
   12ddc:	mov	r8, #0
   12de0:	lsr	r1, r1, #5
   12de4:	cmp	r2, #0
   12de8:	mov	r0, r2
   12dec:	movwne	r0, #1
   12df0:	orrs	r0, r0, r1
   12df4:	moveq	r2, sl
   12df8:	moveq	sl, r0
   12dfc:	cmp	r9, sl
   12e00:	str	r2, [sp, #48]	; 0x30
   12e04:	movcc	r0, #39	; 0x27
   12e08:	strbcc	r0, [r6, r9]
   12e0c:	add	r0, r9, #1
   12e10:	cmp	r0, sl
   12e14:	movcc	r1, #92	; 0x5c
   12e18:	strbcc	r1, [r6, r0]
   12e1c:	add	r0, r9, #2
   12e20:	add	r9, r9, #3
   12e24:	cmp	r0, sl
   12e28:	movcc	r1, #39	; 0x27
   12e2c:	strbcc	r1, [r6, r0]
   12e30:	mov	r0, #0
   12e34:	str	r0, [fp, #-48]	; 0xffffffd0
   12e38:	mov	r4, #1
   12e3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e40:	cmp	r0, #0
   12e44:	bne	12c64 <__assert_fail@plt+0x18c4>
   12e48:	b	12f3c <__assert_fail@plt+0x1b9c>
   12e4c:	ldr	r0, [sp, #32]
   12e50:	cmp	r0, #1
   12e54:	bne	13040 <__assert_fail@plt+0x1ca0>
   12e58:	str	lr, [sp, #84]	; 0x54
   12e5c:	bl	1125c <__ctype_b_loc@plt>
   12e60:	ldr	r0, [r0]
   12e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e68:	mov	r1, #1
   12e6c:	add	r0, r0, r5, lsl #1
   12e70:	ldrb	r0, [r0, #1]
   12e74:	ubfx	r4, r0, #6, #1
   12e78:	b	13438 <__assert_fail@plt+0x2098>
   12e7c:	cmp	r7, #0
   12e80:	ldrbeq	r0, [ip, #1]
   12e84:	cmpeq	r0, #0
   12e88:	beq	12ea4 <__assert_fail@plt+0x1b04>
   12e8c:	mvn	lr, #0
   12e90:	mov	r8, #0
   12e94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e98:	cmp	r0, #0
   12e9c:	bne	12c64 <__assert_fail@plt+0x18c4>
   12ea0:	b	12f3c <__assert_fail@plt+0x1b9c>
   12ea4:	mov	r1, #1
   12ea8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12eac:	cmp	r0, #2
   12eb0:	bne	12ec0 <__assert_fail@plt+0x1b20>
   12eb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12eb8:	tst	r0, #1
   12ebc:	bne	13734 <__assert_fail@plt+0x2394>
   12ec0:	mov	r4, r1
   12ec4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ec8:	cmp	r0, #0
   12ecc:	bne	12c64 <__assert_fail@plt+0x18c4>
   12ed0:	b	12f3c <__assert_fail@plt+0x1b9c>
   12ed4:	ldr	r1, [sp, #40]	; 0x28
   12ed8:	mov	r8, #0
   12edc:	mov	r0, #92	; 0x5c
   12ee0:	cmp	r1, #0
   12ee4:	beq	12f28 <__assert_fail@plt+0x1b88>
   12ee8:	mov	r4, #0
   12eec:	cmp	r8, #0
   12ef0:	bne	12ce4 <__assert_fail@plt+0x1944>
   12ef4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ef8:	tst	r2, #1
   12efc:	beq	12fe8 <__assert_fail@plt+0x1c48>
   12f00:	cmp	r9, sl
   12f04:	movcc	r1, #39	; 0x27
   12f08:	strbcc	r1, [r6, r9]
   12f0c:	add	r1, r9, #1
   12f10:	add	r9, r9, #2
   12f14:	cmp	r1, sl
   12f18:	movcc	r2, #39	; 0x27
   12f1c:	strbcc	r2, [r6, r1]
   12f20:	mov	r2, #0
   12f24:	b	12fe8 <__assert_fail@plt+0x1c48>
   12f28:	ldr	r1, [sp, #80]	; 0x50
   12f2c:	mov	r4, #0
   12f30:	mov	r8, #0
   12f34:	tst	r1, #1
   12f38:	bne	12f78 <__assert_fail@plt+0x1bd8>
   12f3c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12f40:	cmp	r0, #0
   12f44:	mov	r0, r5
   12f48:	beq	12f6c <__assert_fail@plt+0x1bcc>
   12f4c:	ldr	r1, [fp, #16]
   12f50:	ubfx	r0, r5, #5, #3
   12f54:	mov	r2, #1
   12f58:	ldr	r0, [r1, r0, lsl #2]
   12f5c:	and	r1, r5, #31
   12f60:	tst	r0, r2, lsl r1
   12f64:	mov	r0, r5
   12f68:	bne	12f78 <__assert_fail@plt+0x1bd8>
   12f6c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12f70:	cmp	r1, #0
   12f74:	beq	133d0 <__assert_fail@plt+0x2030>
   12f78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12f7c:	tst	r1, #1
   12f80:	bne	13714 <__assert_fail@plt+0x2374>
   12f84:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12f88:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12f8c:	cmp	r1, #2
   12f90:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12f94:	movwne	r1, #1
   12f98:	orr	r1, r1, r2
   12f9c:	tst	r1, #1
   12fa0:	bne	12fd8 <__assert_fail@plt+0x1c38>
   12fa4:	cmp	r9, sl
   12fa8:	movcc	r1, #39	; 0x27
   12fac:	strbcc	r1, [r6, r9]
   12fb0:	add	r1, r9, #1
   12fb4:	cmp	r1, sl
   12fb8:	movcc	r2, #36	; 0x24
   12fbc:	strbcc	r2, [r6, r1]
   12fc0:	add	r1, r9, #2
   12fc4:	add	r9, r9, #3
   12fc8:	cmp	r1, sl
   12fcc:	movcc	r2, #39	; 0x27
   12fd0:	strbcc	r2, [r6, r1]
   12fd4:	mov	r2, #1
   12fd8:	cmp	r9, sl
   12fdc:	movcc	r1, #92	; 0x5c
   12fe0:	strbcc	r1, [r6, r9]
   12fe4:	add	r9, r9, #1
   12fe8:	cmp	r9, sl
   12fec:	add	r7, r7, #1
   12ff0:	strbcc	r0, [r6, r9]
   12ff4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ff8:	add	r9, r9, #1
   12ffc:	and	r0, r0, r4
   13000:	mov	r4, r0
   13004:	cmn	lr, #1
   13008:	bne	1297c <__assert_fail@plt+0x15dc>
   1300c:	b	12988 <__assert_fail@plt+0x15e8>
   13010:	ldr	r0, [sp, #28]
   13014:	mov	r4, #0
   13018:	mov	r8, #0
   1301c:	mov	r5, #0
   13020:	cmp	r0, #0
   13024:	beq	12f3c <__assert_fail@plt+0x1b9c>
   13028:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1302c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13030:	add	r7, r7, #1
   13034:	cmn	lr, #1
   13038:	bne	1297c <__assert_fail@plt+0x15dc>
   1303c:	b	12988 <__assert_fail@plt+0x15e8>
   13040:	mov	r0, #0
   13044:	cmn	lr, #1
   13048:	str	r0, [fp, #-36]	; 0xffffffdc
   1304c:	str	r0, [fp, #-40]	; 0xffffffd8
   13050:	bne	13064 <__assert_fail@plt+0x1cc4>
   13054:	mov	r0, ip
   13058:	bl	11280 <strlen@plt>
   1305c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13060:	mov	lr, r0
   13064:	ldr	r0, [sp, #36]	; 0x24
   13068:	str	sl, [sp, #56]	; 0x38
   1306c:	str	lr, [sp, #84]	; 0x54
   13070:	cmp	r0, #0
   13074:	beq	1328c <__assert_fail@plt+0x1eec>
   13078:	add	r0, ip, r7
   1307c:	mov	r4, #1
   13080:	mov	r6, #0
   13084:	sub	sl, fp, #40	; 0x28
   13088:	str	r0, [sp, #20]
   1308c:	str	r6, [sp, #64]	; 0x40
   13090:	add	r6, r6, r7
   13094:	sub	r0, fp, #44	; 0x2c
   13098:	mov	r3, sl
   1309c:	add	r1, ip, r6
   130a0:	sub	r2, lr, r6
   130a4:	bl	16bb4 <__assert_fail@plt+0x5814>
   130a8:	cmn	r0, #2
   130ac:	beq	133e8 <__assert_fail@plt+0x2048>
   130b0:	ldr	sl, [sp, #56]	; 0x38
   130b4:	cmn	r0, #1
   130b8:	beq	133dc <__assert_fail@plt+0x203c>
   130bc:	cmp	r0, #0
   130c0:	beq	133e0 <__assert_fail@plt+0x2040>
   130c4:	cmp	r0, #2
   130c8:	bcc	13188 <__assert_fail@plt+0x1de8>
   130cc:	ldr	r1, [sp, #64]	; 0x40
   130d0:	ldr	r2, [sp, #20]
   130d4:	add	r1, r2, r1
   130d8:	mov	r2, #1
   130dc:	ldrb	r3, [r1, r2]
   130e0:	sub	r3, r3, #91	; 0x5b
   130e4:	cmp	r3, #33	; 0x21
   130e8:	bhi	1317c <__assert_fail@plt+0x1ddc>
   130ec:	add	r6, pc, #0
   130f0:	ldr	pc, [r6, r3, lsl #2]
   130f4:	andeq	r3, r1, r0, asr #14
   130f8:	andeq	r3, r1, r0, asr #14
   130fc:	andeq	r3, r1, ip, ror r1
   13100:	andeq	r3, r1, r0, asr #14
   13104:	andeq	r3, r1, ip, ror r1
   13108:	andeq	r3, r1, r0, asr #14
   1310c:	andeq	r3, r1, ip, ror r1
   13110:	andeq	r3, r1, ip, ror r1
   13114:	andeq	r3, r1, ip, ror r1
   13118:	andeq	r3, r1, ip, ror r1
   1311c:	andeq	r3, r1, ip, ror r1
   13120:	andeq	r3, r1, ip, ror r1
   13124:	andeq	r3, r1, ip, ror r1
   13128:	andeq	r3, r1, ip, ror r1
   1312c:	andeq	r3, r1, ip, ror r1
   13130:	andeq	r3, r1, ip, ror r1
   13134:	andeq	r3, r1, ip, ror r1
   13138:	andeq	r3, r1, ip, ror r1
   1313c:	andeq	r3, r1, ip, ror r1
   13140:	andeq	r3, r1, ip, ror r1
   13144:	andeq	r3, r1, ip, ror r1
   13148:	andeq	r3, r1, ip, ror r1
   1314c:	andeq	r3, r1, ip, ror r1
   13150:	andeq	r3, r1, ip, ror r1
   13154:	andeq	r3, r1, ip, ror r1
   13158:	andeq	r3, r1, ip, ror r1
   1315c:	andeq	r3, r1, ip, ror r1
   13160:	andeq	r3, r1, ip, ror r1
   13164:	andeq	r3, r1, ip, ror r1
   13168:	andeq	r3, r1, ip, ror r1
   1316c:	andeq	r3, r1, ip, ror r1
   13170:	andeq	r3, r1, ip, ror r1
   13174:	andeq	r3, r1, ip, ror r1
   13178:	andeq	r3, r1, r0, asr #14
   1317c:	add	r2, r2, #1
   13180:	cmp	r2, r0
   13184:	bcc	130dc <__assert_fail@plt+0x1d3c>
   13188:	ldr	r6, [sp, #64]	; 0x40
   1318c:	add	r6, r0, r6
   13190:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13194:	bl	1119c <iswprint@plt>
   13198:	cmp	r0, #0
   1319c:	sub	sl, fp, #40	; 0x28
   131a0:	movwne	r0, #1
   131a4:	and	r4, r4, r0
   131a8:	mov	r0, sl
   131ac:	bl	11154 <mbsinit@plt>
   131b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   131b4:	ldr	lr, [sp, #84]	; 0x54
   131b8:	cmp	r0, #0
   131bc:	beq	1308c <__assert_fail@plt+0x1cec>
   131c0:	b	1342c <__assert_fail@plt+0x208c>
   131c4:	ldr	r0, [sp, #24]
   131c8:	cmp	r0, #0
   131cc:	beq	13274 <__assert_fail@plt+0x1ed4>
   131d0:	add	r0, r7, #2
   131d4:	cmp	r0, lr
   131d8:	bcs	13274 <__assert_fail@plt+0x1ed4>
   131dc:	add	r1, ip, r7
   131e0:	ldrb	r1, [r1, #1]
   131e4:	cmp	r1, #63	; 0x3f
   131e8:	bne	13274 <__assert_fail@plt+0x1ed4>
   131ec:	ldrb	r5, [ip, r0]
   131f0:	sub	r1, r5, #33	; 0x21
   131f4:	cmp	r1, #29
   131f8:	bhi	13274 <__assert_fail@plt+0x1ed4>
   131fc:	movw	r3, #20929	; 0x51c1
   13200:	mov	r2, #1
   13204:	movt	r3, #14336	; 0x3800
   13208:	tst	r3, r2, lsl r1
   1320c:	beq	13274 <__assert_fail@plt+0x1ed4>
   13210:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13214:	tst	r1, #1
   13218:	bne	13864 <__assert_fail@plt+0x24c4>
   1321c:	cmp	r9, sl
   13220:	mov	r7, r0
   13224:	mov	r4, #0
   13228:	movcc	r1, #63	; 0x3f
   1322c:	strbcc	r1, [r6, r9]
   13230:	add	r1, r9, #1
   13234:	cmp	r1, sl
   13238:	movcc	r2, #34	; 0x22
   1323c:	strbcc	r2, [r6, r1]
   13240:	add	r1, r9, #2
   13244:	cmp	r1, sl
   13248:	movcc	r2, #34	; 0x22
   1324c:	strbcc	r2, [r6, r1]
   13250:	add	r1, r9, #3
   13254:	add	r9, r9, #4
   13258:	cmp	r1, sl
   1325c:	movcc	r2, #63	; 0x3f
   13260:	strbcc	r2, [r6, r1]
   13264:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13268:	cmp	r0, #0
   1326c:	bne	12c64 <__assert_fail@plt+0x18c4>
   13270:	b	12f3c <__assert_fail@plt+0x1b9c>
   13274:	mov	r5, #63	; 0x3f
   13278:	mov	r4, #0
   1327c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13280:	cmp	r0, #0
   13284:	bne	12c64 <__assert_fail@plt+0x18c4>
   13288:	b	12f3c <__assert_fail@plt+0x1b9c>
   1328c:	mov	r4, #1
   13290:	mov	r6, #0
   13294:	sub	sl, fp, #40	; 0x28
   13298:	str	r6, [sp, #64]	; 0x40
   1329c:	add	r6, r6, r7
   132a0:	sub	r0, fp, #44	; 0x2c
   132a4:	mov	r3, sl
   132a8:	add	r1, ip, r6
   132ac:	sub	r2, lr, r6
   132b0:	bl	16bb4 <__assert_fail@plt+0x5814>
   132b4:	cmn	r0, #2
   132b8:	beq	133e8 <__assert_fail@plt+0x2048>
   132bc:	cmn	r0, #1
   132c0:	beq	133dc <__assert_fail@plt+0x203c>
   132c4:	ldr	r6, [sp, #64]	; 0x40
   132c8:	cmp	r0, #0
   132cc:	beq	13428 <__assert_fail@plt+0x2088>
   132d0:	add	r6, r0, r6
   132d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   132d8:	bl	1119c <iswprint@plt>
   132dc:	cmp	r0, #0
   132e0:	sub	sl, fp, #40	; 0x28
   132e4:	movwne	r0, #1
   132e8:	and	r4, r4, r0
   132ec:	mov	r0, sl
   132f0:	bl	11154 <mbsinit@plt>
   132f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   132f8:	ldr	lr, [sp, #84]	; 0x54
   132fc:	cmp	r0, #0
   13300:	beq	13298 <__assert_fail@plt+0x1ef8>
   13304:	b	1342c <__assert_fail@plt+0x208c>
   13308:	cmp	r9, sl
   1330c:	mov	r2, #1
   13310:	movcc	r0, #39	; 0x27
   13314:	strbcc	r0, [r6, r9]
   13318:	add	r0, r9, #1
   1331c:	cmp	r0, sl
   13320:	movcc	r1, #36	; 0x24
   13324:	strbcc	r1, [r6, r0]
   13328:	add	r0, r9, #2
   1332c:	cmp	r0, sl
   13330:	movcc	r1, #39	; 0x27
   13334:	strbcc	r1, [r6, r0]
   13338:	add	r0, r9, #3
   1333c:	cmp	r0, sl
   13340:	add	r9, r0, #1
   13344:	str	r2, [fp, #-48]	; 0xffffffd0
   13348:	movcc	r1, #92	; 0x5c
   1334c:	strbcc	r1, [r6, r0]
   13350:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13354:	cmp	r1, #2
   13358:	beq	133b8 <__assert_fail@plt+0x2018>
   1335c:	add	r1, r7, #1
   13360:	mov	r4, #0
   13364:	mov	r8, #1
   13368:	mov	r5, #48	; 0x30
   1336c:	cmp	r1, lr
   13370:	bcs	12c58 <__assert_fail@plt+0x18b8>
   13374:	ldrb	r1, [ip, r1]
   13378:	sub	r1, r1, #48	; 0x30
   1337c:	uxtb	r1, r1
   13380:	cmp	r1, #9
   13384:	bhi	12c58 <__assert_fail@plt+0x18b8>
   13388:	cmp	r9, sl
   1338c:	movcc	r1, #48	; 0x30
   13390:	strbcc	r1, [r6, r9]
   13394:	add	r1, r0, #2
   13398:	add	r9, r0, #3
   1339c:	cmp	r1, sl
   133a0:	movcc	r2, #48	; 0x30
   133a4:	strbcc	r2, [r6, r1]
   133a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133ac:	cmp	r0, #0
   133b0:	bne	12c64 <__assert_fail@plt+0x18c4>
   133b4:	b	12f3c <__assert_fail@plt+0x1b9c>
   133b8:	mov	r0, #48	; 0x30
   133bc:	mov	r8, #1
   133c0:	mov	r4, #0
   133c4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   133c8:	cmp	r1, #0
   133cc:	bne	12f78 <__assert_fail@plt+0x1bd8>
   133d0:	cmp	r8, #0
   133d4:	beq	12ef4 <__assert_fail@plt+0x1b54>
   133d8:	b	12ce4 <__assert_fail@plt+0x1944>
   133dc:	mov	r4, #0
   133e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   133e4:	b	13420 <__assert_fail@plt+0x2080>
   133e8:	ldr	r1, [sp, #84]	; 0x54
   133ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   133f0:	mov	r4, #0
   133f4:	cmp	r6, r1
   133f8:	bcs	13420 <__assert_fail@plt+0x2080>
   133fc:	ldrb	r0, [ip, r6]
   13400:	cmp	r0, #0
   13404:	beq	13420 <__assert_fail@plt+0x2080>
   13408:	ldr	r0, [sp, #64]	; 0x40
   1340c:	add	r0, r0, #1
   13410:	add	r6, r0, r7
   13414:	str	r0, [sp, #64]	; 0x40
   13418:	cmp	r6, r1
   1341c:	bcc	133fc <__assert_fail@plt+0x205c>
   13420:	ldr	r6, [sp, #64]	; 0x40
   13424:	b	1342c <__assert_fail@plt+0x208c>
   13428:	ldr	ip, [fp, #-84]	; 0xffffffac
   1342c:	mov	r1, r6
   13430:	ldr	r6, [sp, #76]	; 0x4c
   13434:	ldr	sl, [sp, #56]	; 0x38
   13438:	ldr	r0, [sp, #44]	; 0x2c
   1343c:	cmp	r1, #1
   13440:	orr	r2, r4, r0
   13444:	mov	r0, r1
   13448:	bhi	13468 <__assert_fail@plt+0x20c8>
   1344c:	tst	r2, #1
   13450:	beq	13468 <__assert_fail@plt+0x20c8>
   13454:	ldr	lr, [sp, #84]	; 0x54
   13458:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1345c:	cmp	r0, #0
   13460:	bne	12c64 <__assert_fail@plt+0x18c4>
   13464:	b	12f3c <__assert_fail@plt+0x1b9c>
   13468:	str	r2, [sp, #64]	; 0x40
   1346c:	add	r0, r0, r7
   13470:	add	r1, r7, #1
   13474:	ldr	lr, [sp, #84]	; 0x54
   13478:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1347c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13480:	mov	r3, #0
   13484:	str	r0, [sp, #56]	; 0x38
   13488:	ldr	r0, [sp, #64]	; 0x40
   1348c:	tst	r0, #1
   13490:	bne	13578 <__assert_fail@plt+0x21d8>
   13494:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13498:	tst	r0, #1
   1349c:	bne	13718 <__assert_fail@plt+0x2378>
   134a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   134a4:	cmp	r7, #2
   134a8:	movwne	r3, #1
   134ac:	orr	r3, r3, r2
   134b0:	tst	r3, #1
   134b4:	bne	134ec <__assert_fail@plt+0x214c>
   134b8:	cmp	r9, sl
   134bc:	add	r3, r9, #1
   134c0:	movcc	r2, #39	; 0x27
   134c4:	strbcc	r2, [r6, r9]
   134c8:	cmp	r3, sl
   134cc:	movcc	r2, #36	; 0x24
   134d0:	strbcc	r2, [r6, r3]
   134d4:	add	r3, r9, #2
   134d8:	add	r9, r9, #3
   134dc:	cmp	r3, sl
   134e0:	movcc	r2, #39	; 0x27
   134e4:	strbcc	r2, [r6, r3]
   134e8:	mov	r2, #1
   134ec:	cmp	r9, sl
   134f0:	mov	r0, r2
   134f4:	movcc	r3, #92	; 0x5c
   134f8:	strbcc	r3, [r6, r9]
   134fc:	add	r3, r9, #1
   13500:	cmp	r3, sl
   13504:	andcc	r7, r5, #192	; 0xc0
   13508:	movcc	r2, #48	; 0x30
   1350c:	orrcc	r7, r2, r7, lsr #6
   13510:	strbcc	r7, [r6, r3]
   13514:	add	r3, r9, #2
   13518:	add	r9, r9, #3
   1351c:	cmp	r3, sl
   13520:	lsrcc	r7, r5, #3
   13524:	movcc	r2, #6
   13528:	bficc	r7, r2, #3, #29
   1352c:	mov	r2, #6
   13530:	strbcc	r7, [r6, r3]
   13534:	bfi	r5, r2, #3, #29
   13538:	mov	r3, #1
   1353c:	mov	r2, r0
   13540:	ldr	r0, [sp, #56]	; 0x38
   13544:	and	r8, r3, #1
   13548:	cmp	r0, r1
   1354c:	bhi	135ac <__assert_fail@plt+0x220c>
   13550:	b	135ec <__assert_fail@plt+0x224c>
   13554:	cmp	r9, sl
   13558:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1355c:	strbcc	r5, [r6, r9]
   13560:	add	r9, r9, #1
   13564:	ldrb	r5, [ip, r1]
   13568:	add	r1, r1, #1
   1356c:	ldr	r0, [sp, #64]	; 0x40
   13570:	tst	r0, #1
   13574:	beq	13494 <__assert_fail@plt+0x20f4>
   13578:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1357c:	tst	r7, #1
   13580:	beq	13594 <__assert_fail@plt+0x21f4>
   13584:	cmp	r9, sl
   13588:	movcc	r7, #92	; 0x5c
   1358c:	strbcc	r7, [r6, r9]
   13590:	add	r9, r9, #1
   13594:	mov	r7, #0
   13598:	str	r7, [fp, #-56]	; 0xffffffc8
   1359c:	ldr	r0, [sp, #56]	; 0x38
   135a0:	and	r8, r3, #1
   135a4:	cmp	r0, r1
   135a8:	bls	135ec <__assert_fail@plt+0x224c>
   135ac:	cmp	r8, #0
   135b0:	mvn	r7, r2
   135b4:	movwne	r8, #1
   135b8:	orr	r7, r7, r8
   135bc:	tst	r7, #1
   135c0:	bne	13554 <__assert_fail@plt+0x21b4>
   135c4:	cmp	r9, sl
   135c8:	movcc	r7, #39	; 0x27
   135cc:	strbcc	r7, [r6, r9]
   135d0:	add	r7, r9, #1
   135d4:	add	r9, r9, #2
   135d8:	cmp	r7, sl
   135dc:	movcc	r2, #39	; 0x27
   135e0:	strbcc	r2, [r6, r7]
   135e4:	mov	r2, #0
   135e8:	b	13554 <__assert_fail@plt+0x21b4>
   135ec:	cmp	r8, #0
   135f0:	sub	r7, r1, #1
   135f4:	mov	r0, r5
   135f8:	str	r2, [fp, #-48]	; 0xffffffd0
   135fc:	movwne	r8, #1
   13600:	cmp	r8, #0
   13604:	beq	12ef4 <__assert_fail@plt+0x1b54>
   13608:	b	12ce4 <__assert_fail@plt+0x1944>
   1360c:	mov	lr, r7
   13610:	b	13618 <__assert_fail@plt+0x2278>
   13614:	mvn	lr, #0
   13618:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1361c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13620:	eor	r0, r7, #2
   13624:	orr	r0, r0, r9
   13628:	clz	r0, r0
   1362c:	lsr	r0, r0, #5
   13630:	tst	r1, r0
   13634:	bne	13734 <__assert_fail@plt+0x2394>
   13638:	mov	r0, r1
   1363c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13640:	cmp	r7, #2
   13644:	movwne	r1, #1
   13648:	orr	r0, r0, r1
   1364c:	tst	r0, #1
   13650:	ldreq	r0, [sp, #52]	; 0x34
   13654:	streq	lr, [sp, #84]	; 0x54
   13658:	eoreq	r0, r0, #1
   1365c:	tsteq	r0, #1
   13660:	bne	137f8 <__assert_fail@plt+0x2458>
   13664:	tst	r4, #1
   13668:	bne	137b4 <__assert_fail@plt+0x2414>
   1366c:	ldr	r6, [sp, #48]	; 0x30
   13670:	mov	r8, #0
   13674:	cmp	r6, #0
   13678:	beq	137f0 <__assert_fail@plt+0x2450>
   1367c:	ldr	r0, [sp, #80]	; 0x50
   13680:	mov	r1, #0
   13684:	cmp	sl, #0
   13688:	mov	r4, #0
   1368c:	str	r1, [fp, #-72]	; 0xffffffb8
   13690:	beq	12584 <__assert_fail@plt+0x11e4>
   13694:	b	137f8 <__assert_fail@plt+0x2458>
   13698:	ldrb	r1, [r0, #3]
   1369c:	cmp	r1, #56	; 0x38
   136a0:	ldrbeq	r1, [r0, #4]
   136a4:	cmpeq	r1, #48	; 0x30
   136a8:	bne	1277c <__assert_fail@plt+0x13dc>
   136ac:	ldrb	r1, [r0, #5]
   136b0:	cmp	r1, #51	; 0x33
   136b4:	ldrbeq	r1, [r0, #6]
   136b8:	cmpeq	r1, #48	; 0x30
   136bc:	bne	1277c <__assert_fail@plt+0x13dc>
   136c0:	ldrb	r0, [r0, #7]
   136c4:	cmp	r0, #0
   136c8:	movw	r0, #30784	; 0x7840
   136cc:	movt	r0, #1
   136d0:	str	r0, [sp, #68]	; 0x44
   136d4:	bne	1277c <__assert_fail@plt+0x13dc>
   136d8:	b	12798 <__assert_fail@plt+0x13f8>
   136dc:	ldrb	r1, [r0, #4]
   136e0:	cmp	r1, #48	; 0x30
   136e4:	ldrbeq	r1, [r0, #5]
   136e8:	cmpeq	r1, #51	; 0x33
   136ec:	bne	12860 <__assert_fail@plt+0x14c0>
   136f0:	ldrb	r1, [r0, #6]
   136f4:	cmp	r1, #48	; 0x30
   136f8:	ldrbeq	r0, [r0, #7]
   136fc:	cmpeq	r0, #0
   13700:	bne	12860 <__assert_fail@plt+0x14c0>
   13704:	movw	r0, #30788	; 0x7844
   13708:	movt	r0, #1
   1370c:	str	r0, [sp, #72]	; 0x48
   13710:	b	12880 <__assert_fail@plt+0x14e0>
   13714:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13718:	ldr	r2, [sp, #80]	; 0x50
   1371c:	b	13754 <__assert_fail@plt+0x23b4>
   13720:	ldr	ip, [fp, #-84]	; 0xffffffac
   13724:	mov	r2, #1
   13728:	mov	lr, r4
   1372c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13730:	b	13754 <__assert_fail@plt+0x23b4>
   13734:	ldr	r2, [sp, #80]	; 0x50
   13738:	mov	r7, #2
   1373c:	b	13754 <__assert_fail@plt+0x23b4>
   13740:	ldr	r6, [sp, #76]	; 0x4c
   13744:	ldr	ip, [fp, #-84]	; 0xffffffac
   13748:	ldr	lr, [sp, #84]	; 0x54
   1374c:	ldr	r2, [sp, #80]	; 0x50
   13750:	mov	r7, #2
   13754:	mov	r0, #0
   13758:	ldr	r1, [fp, #12]
   1375c:	tst	r2, #1
   13760:	mov	r2, r7
   13764:	mov	r3, lr
   13768:	str	r0, [sp, #8]
   1376c:	ldr	r0, [sp, #68]	; 0x44
   13770:	movwne	r2, #4
   13774:	cmp	r7, #2
   13778:	movne	r2, r7
   1377c:	str	r2, [sp]
   13780:	mov	r2, ip
   13784:	bic	r1, r1, #2
   13788:	str	r0, [sp, #12]
   1378c:	ldr	r0, [sp, #72]	; 0x48
   13790:	str	r1, [sp, #4]
   13794:	mov	r1, sl
   13798:	str	r0, [sp, #16]
   1379c:	mov	r0, r6
   137a0:	bl	12508 <__assert_fail@plt+0x1168>
   137a4:	mov	r9, r0
   137a8:	mov	r0, r9
   137ac:	sub	sp, fp, #28
   137b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b4:	mov	r0, #5
   137b8:	ldr	r1, [sp, #48]	; 0x30
   137bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   137c0:	ldr	r3, [sp, #84]	; 0x54
   137c4:	str	r0, [sp]
   137c8:	ldr	r0, [fp, #12]
   137cc:	str	r0, [sp, #4]
   137d0:	ldr	r0, [fp, #16]
   137d4:	str	r0, [sp, #8]
   137d8:	ldr	r0, [sp, #68]	; 0x44
   137dc:	str	r0, [sp, #12]
   137e0:	ldr	r0, [sp, #72]	; 0x48
   137e4:	str	r0, [sp, #16]
   137e8:	ldr	r0, [sp, #76]	; 0x4c
   137ec:	b	137a0 <__assert_fail@plt+0x2400>
   137f0:	mov	r0, #0
   137f4:	str	r0, [fp, #-72]	; 0xffffffb8
   137f8:	ldr	r1, [sp, #92]	; 0x5c
   137fc:	cmp	r1, #0
   13800:	beq	13840 <__assert_fail@plt+0x24a0>
   13804:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13808:	ldr	r2, [sp, #76]	; 0x4c
   1380c:	tst	r0, #1
   13810:	bne	13844 <__assert_fail@plt+0x24a4>
   13814:	ldrb	r0, [r1]
   13818:	cmp	r0, #0
   1381c:	beq	13844 <__assert_fail@plt+0x24a4>
   13820:	add	r1, r1, #1
   13824:	cmp	r9, sl
   13828:	strbcc	r0, [r2, r9]
   1382c:	add	r9, r9, #1
   13830:	ldrb	r0, [r1], #1
   13834:	cmp	r0, #0
   13838:	bne	13824 <__assert_fail@plt+0x2484>
   1383c:	b	13844 <__assert_fail@plt+0x24a4>
   13840:	ldr	r2, [sp, #76]	; 0x4c
   13844:	cmp	r9, sl
   13848:	movcc	r0, #0
   1384c:	strbcc	r0, [r2, r9]
   13850:	mov	r0, r9
   13854:	sub	sp, fp, #28
   13858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1385c:	mov	r2, #1
   13860:	b	1372c <__assert_fail@plt+0x238c>
   13864:	ldr	r2, [sp, #80]	; 0x50
   13868:	mov	r7, #5
   1386c:	b	13754 <__assert_fail@plt+0x23b4>
   13870:	bl	1137c <abort@plt>
   13874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13878:	add	fp, sp, #28
   1387c:	sub	sp, sp, #28
   13880:	movw	r5, #33168	; 0x8190
   13884:	cmp	r2, #0
   13888:	mov	r4, r1
   1388c:	mov	r7, r0
   13890:	str	r0, [sp, #20]
   13894:	movt	r5, #2
   13898:	movne	r5, r2
   1389c:	bl	11298 <__errno_location@plt>
   138a0:	mov	sl, r0
   138a4:	ldm	r5, {r0, r1}
   138a8:	ldr	r2, [r5, #40]	; 0x28
   138ac:	ldr	r3, [r5, #44]	; 0x2c
   138b0:	add	r9, r5, #8
   138b4:	ldr	r6, [sl]
   138b8:	orr	r8, r1, #1
   138bc:	mov	r1, #0
   138c0:	str	r6, [sp, #24]
   138c4:	stm	sp, {r0, r8, r9}
   138c8:	str	r2, [sp, #12]
   138cc:	str	r3, [sp, #16]
   138d0:	mov	r0, #0
   138d4:	mov	r2, r7
   138d8:	mov	r3, r4
   138dc:	mov	r6, r4
   138e0:	bl	12508 <__assert_fail@plt+0x1168>
   138e4:	add	r7, r0, #1
   138e8:	mov	r0, r7
   138ec:	bl	14d44 <__assert_fail@plt+0x39a4>
   138f0:	mov	r4, r0
   138f4:	ldr	r0, [r5]
   138f8:	ldr	r2, [r5, #44]	; 0x2c
   138fc:	ldr	r1, [r5, #40]	; 0x28
   13900:	mov	r3, r6
   13904:	stm	sp, {r0, r8, r9}
   13908:	str	r2, [sp, #16]
   1390c:	str	r1, [sp, #12]
   13910:	mov	r0, r4
   13914:	mov	r1, r7
   13918:	ldr	r2, [sp, #20]
   1391c:	bl	12508 <__assert_fail@plt+0x1168>
   13920:	ldr	r0, [sp, #24]
   13924:	str	r0, [sl]
   13928:	mov	r0, r4
   1392c:	sub	sp, fp, #28
   13930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13938:	add	fp, sp, #28
   1393c:	sub	sp, sp, #36	; 0x24
   13940:	movw	r8, #33168	; 0x8190
   13944:	cmp	r3, #0
   13948:	mov	r4, r2
   1394c:	str	r2, [sp, #24]
   13950:	mov	r5, r1
   13954:	mov	r6, r0
   13958:	str	r0, [sp, #20]
   1395c:	movt	r8, #2
   13960:	movne	r8, r3
   13964:	bl	11298 <__errno_location@plt>
   13968:	str	r0, [sp, #28]
   1396c:	cmp	r4, #0
   13970:	add	sl, r8, #8
   13974:	ldm	r8, {r3, r9}
   13978:	ldr	r7, [r0]
   1397c:	ldr	r1, [r8, #40]	; 0x28
   13980:	ldr	r2, [r8, #44]	; 0x2c
   13984:	mov	r0, #0
   13988:	orreq	r9, r9, #1
   1398c:	str	r7, [sp, #32]
   13990:	mov	r7, r5
   13994:	stm	sp, {r3, r9, sl}
   13998:	str	r1, [sp, #12]
   1399c:	str	r2, [sp, #16]
   139a0:	mov	r1, #0
   139a4:	mov	r2, r6
   139a8:	mov	r3, r5
   139ac:	bl	12508 <__assert_fail@plt+0x1168>
   139b0:	add	r4, r0, #1
   139b4:	mov	r5, r0
   139b8:	mov	r0, r4
   139bc:	bl	14d44 <__assert_fail@plt+0x39a4>
   139c0:	mov	r6, r0
   139c4:	ldr	r0, [r8]
   139c8:	ldr	r2, [r8, #44]	; 0x2c
   139cc:	ldr	r1, [r8, #40]	; 0x28
   139d0:	mov	r3, r7
   139d4:	stm	sp, {r0, r9, sl}
   139d8:	str	r2, [sp, #16]
   139dc:	str	r1, [sp, #12]
   139e0:	mov	r0, r6
   139e4:	mov	r1, r4
   139e8:	ldr	r2, [sp, #20]
   139ec:	bl	12508 <__assert_fail@plt+0x1168>
   139f0:	ldr	r0, [sp, #24]
   139f4:	ldr	r1, [sp, #32]
   139f8:	ldr	r2, [sp, #28]
   139fc:	cmp	r0, #0
   13a00:	str	r1, [r2]
   13a04:	strne	r5, [r0]
   13a08:	mov	r0, r6
   13a0c:	sub	sp, fp, #28
   13a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a14:	push	{r4, r5, r6, r7, fp, lr}
   13a18:	add	fp, sp, #16
   13a1c:	movw	r4, #33104	; 0x8150
   13a20:	movt	r4, #2
   13a24:	ldrd	r6, [r4]
   13a28:	cmp	r7, #2
   13a2c:	blt	13a58 <__assert_fail@plt+0x26b8>
   13a30:	add	r5, r6, #12
   13a34:	mov	r7, #0
   13a38:	ldr	r0, [r5, r7, lsl #3]
   13a3c:	bl	122a4 <__assert_fail@plt+0xf04>
   13a40:	ldr	r1, [r4, #4]
   13a44:	add	r2, r7, #2
   13a48:	add	r0, r7, #1
   13a4c:	mov	r7, r0
   13a50:	cmp	r2, r1
   13a54:	blt	13a38 <__assert_fail@plt+0x2698>
   13a58:	ldr	r0, [r6, #4]
   13a5c:	movw	r5, #33216	; 0x81c0
   13a60:	movt	r5, #2
   13a64:	cmp	r0, r5
   13a68:	beq	13a7c <__assert_fail@plt+0x26dc>
   13a6c:	bl	122a4 <__assert_fail@plt+0xf04>
   13a70:	mov	r0, #256	; 0x100
   13a74:	str	r0, [r4, #8]
   13a78:	str	r5, [r4, #12]
   13a7c:	add	r5, r4, #8
   13a80:	cmp	r6, r5
   13a84:	beq	13a94 <__assert_fail@plt+0x26f4>
   13a88:	mov	r0, r6
   13a8c:	bl	122a4 <__assert_fail@plt+0xf04>
   13a90:	str	r5, [r4]
   13a94:	mov	r0, #1
   13a98:	str	r0, [r4, #4]
   13a9c:	pop	{r4, r5, r6, r7, fp, pc}
   13aa0:	movw	r3, #33168	; 0x8190
   13aa4:	mvn	r2, #0
   13aa8:	movt	r3, #2
   13aac:	b	13ab0 <__assert_fail@plt+0x2710>
   13ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab4:	add	fp, sp, #28
   13ab8:	sub	sp, sp, #44	; 0x2c
   13abc:	mov	r7, r3
   13ac0:	str	r2, [sp, #36]	; 0x24
   13ac4:	str	r1, [sp, #32]
   13ac8:	mov	r5, r0
   13acc:	bl	11298 <__errno_location@plt>
   13ad0:	cmp	r5, #0
   13ad4:	blt	13c38 <__assert_fail@plt+0x2898>
   13ad8:	cmn	r5, #-2147483647	; 0x80000001
   13adc:	beq	13c38 <__assert_fail@plt+0x2898>
   13ae0:	movw	r8, #33104	; 0x8150
   13ae4:	mov	r4, r0
   13ae8:	movt	r8, #2
   13aec:	ldr	r6, [r8]
   13af0:	ldr	r1, [r8, #4]
   13af4:	ldr	r0, [r0]
   13af8:	str	r4, [sp, #28]
   13afc:	cmp	r1, r5
   13b00:	str	r0, [sp, #24]
   13b04:	ble	13b10 <__assert_fail@plt+0x2770>
   13b08:	mov	sl, r6
   13b0c:	b	13b74 <__assert_fail@plt+0x27d4>
   13b10:	mov	r0, #8
   13b14:	add	r9, r8, #8
   13b18:	add	r2, r5, #1
   13b1c:	str	r1, [fp, #-32]	; 0xffffffe0
   13b20:	mvn	r3, #-2147483648	; 0x80000000
   13b24:	str	r0, [sp]
   13b28:	subs	r0, r6, r9
   13b2c:	sub	r2, r2, r1
   13b30:	sub	r1, fp, #32
   13b34:	movne	r0, r6
   13b38:	bl	14f44 <__assert_fail@plt+0x3ba4>
   13b3c:	str	r0, [r8]
   13b40:	cmp	r6, r9
   13b44:	mov	sl, r0
   13b48:	ldrdeq	r0, [r8, #8]
   13b4c:	stmeq	sl, {r0, r1}
   13b50:	ldr	r1, [r8, #4]
   13b54:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13b58:	add	r0, sl, r1, lsl #3
   13b5c:	sub	r1, r2, r1
   13b60:	lsl	r2, r1, #3
   13b64:	mov	r1, #0
   13b68:	bl	112bc <memset@plt>
   13b6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b70:	str	r0, [r8, #4]
   13b74:	mov	r9, sl
   13b78:	ldr	r6, [r9, r5, lsl #3]!
   13b7c:	ldr	r4, [r9, #4]!
   13b80:	ldm	r7, {r0, r1}
   13b84:	ldr	r2, [r7, #40]	; 0x28
   13b88:	ldr	r3, [r7, #44]	; 0x2c
   13b8c:	orr	r8, r1, #1
   13b90:	add	r1, r7, #8
   13b94:	stm	sp, {r0, r8}
   13b98:	add	r0, sp, #8
   13b9c:	str	r1, [sp, #20]
   13ba0:	stm	r0, {r1, r2, r3}
   13ba4:	mov	r0, r4
   13ba8:	mov	r1, r6
   13bac:	ldr	r2, [sp, #32]
   13bb0:	ldr	r3, [sp, #36]	; 0x24
   13bb4:	bl	12508 <__assert_fail@plt+0x1168>
   13bb8:	cmp	r6, r0
   13bbc:	bhi	13c20 <__assert_fail@plt+0x2880>
   13bc0:	add	r6, r0, #1
   13bc4:	movw	r0, #33216	; 0x81c0
   13bc8:	movt	r0, #2
   13bcc:	str	r6, [sl, r5, lsl #3]
   13bd0:	cmp	r4, r0
   13bd4:	beq	13be0 <__assert_fail@plt+0x2840>
   13bd8:	mov	r0, r4
   13bdc:	bl	122a4 <__assert_fail@plt+0xf04>
   13be0:	mov	r0, r6
   13be4:	bl	14d44 <__assert_fail@plt+0x39a4>
   13be8:	str	r0, [r9]
   13bec:	mov	r4, r0
   13bf0:	add	r3, sp, #8
   13bf4:	ldr	r0, [r7]
   13bf8:	ldr	r1, [r7, #40]	; 0x28
   13bfc:	ldr	r2, [r7, #44]	; 0x2c
   13c00:	stm	sp, {r0, r8}
   13c04:	ldr	r0, [sp, #20]
   13c08:	stm	r3, {r0, r1, r2}
   13c0c:	mov	r0, r4
   13c10:	mov	r1, r6
   13c14:	ldr	r2, [sp, #32]
   13c18:	ldr	r3, [sp, #36]	; 0x24
   13c1c:	bl	12508 <__assert_fail@plt+0x1168>
   13c20:	ldr	r1, [sp, #24]
   13c24:	ldr	r0, [sp, #28]
   13c28:	str	r1, [r0]
   13c2c:	mov	r0, r4
   13c30:	sub	sp, fp, #28
   13c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c38:	bl	1137c <abort@plt>
   13c3c:	movw	r3, #33168	; 0x8190
   13c40:	movt	r3, #2
   13c44:	b	13ab0 <__assert_fail@plt+0x2710>
   13c48:	movw	r3, #33168	; 0x8190
   13c4c:	mov	r1, r0
   13c50:	mov	r0, #0
   13c54:	mvn	r2, #0
   13c58:	movt	r3, #2
   13c5c:	b	13ab0 <__assert_fail@plt+0x2710>
   13c60:	movw	r3, #33168	; 0x8190
   13c64:	mov	r2, r1
   13c68:	mov	r1, r0
   13c6c:	mov	r0, #0
   13c70:	movt	r3, #2
   13c74:	b	13ab0 <__assert_fail@plt+0x2710>
   13c78:	push	{fp, lr}
   13c7c:	mov	fp, sp
   13c80:	sub	sp, sp, #48	; 0x30
   13c84:	vmov.i32	q8, #0	; 0x00000000
   13c88:	mov	ip, #32
   13c8c:	mov	r3, sp
   13c90:	mov	lr, r2
   13c94:	cmp	r1, #10
   13c98:	add	r2, r3, #16
   13c9c:	vst1.64	{d16-d17}, [r3], ip
   13ca0:	vst1.64	{d16-d17}, [r3]
   13ca4:	vst1.64	{d16-d17}, [r2]
   13ca8:	beq	13cc8 <__assert_fail@plt+0x2928>
   13cac:	str	r1, [sp]
   13cb0:	mov	r3, sp
   13cb4:	mov	r1, lr
   13cb8:	mvn	r2, #0
   13cbc:	bl	13ab0 <__assert_fail@plt+0x2710>
   13cc0:	mov	sp, fp
   13cc4:	pop	{fp, pc}
   13cc8:	bl	1137c <abort@plt>
   13ccc:	push	{r4, sl, fp, lr}
   13cd0:	add	fp, sp, #8
   13cd4:	sub	sp, sp, #48	; 0x30
   13cd8:	mov	ip, r3
   13cdc:	mov	r3, sp
   13ce0:	vmov.i32	q8, #0	; 0x00000000
   13ce4:	mov	lr, #32
   13ce8:	cmp	r1, #10
   13cec:	add	r4, r3, #16
   13cf0:	vst1.64	{d16-d17}, [r3], lr
   13cf4:	vst1.64	{d16-d17}, [r3]
   13cf8:	vst1.64	{d16-d17}, [r4]
   13cfc:	beq	13d1c <__assert_fail@plt+0x297c>
   13d00:	str	r1, [sp]
   13d04:	mov	r1, r2
   13d08:	mov	r3, sp
   13d0c:	mov	r2, ip
   13d10:	bl	13ab0 <__assert_fail@plt+0x2710>
   13d14:	sub	sp, fp, #8
   13d18:	pop	{r4, sl, fp, pc}
   13d1c:	bl	1137c <abort@plt>
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	sub	sp, sp, #48	; 0x30
   13d2c:	mov	r3, sp
   13d30:	vmov.i32	q8, #0	; 0x00000000
   13d34:	mov	ip, #32
   13d38:	cmp	r0, #10
   13d3c:	add	r2, r3, #16
   13d40:	vst1.64	{d16-d17}, [r3], ip
   13d44:	vst1.64	{d16-d17}, [r3]
   13d48:	vst1.64	{d16-d17}, [r2]
   13d4c:	beq	13d6c <__assert_fail@plt+0x29cc>
   13d50:	str	r0, [sp]
   13d54:	mov	r3, sp
   13d58:	mov	r0, #0
   13d5c:	mvn	r2, #0
   13d60:	bl	13ab0 <__assert_fail@plt+0x2710>
   13d64:	mov	sp, fp
   13d68:	pop	{fp, pc}
   13d6c:	bl	1137c <abort@plt>
   13d70:	push	{fp, lr}
   13d74:	mov	fp, sp
   13d78:	sub	sp, sp, #48	; 0x30
   13d7c:	mov	r3, sp
   13d80:	vmov.i32	q8, #0	; 0x00000000
   13d84:	mov	ip, #32
   13d88:	cmp	r0, #10
   13d8c:	add	lr, r3, #16
   13d90:	vst1.64	{d16-d17}, [r3], ip
   13d94:	vst1.64	{d16-d17}, [r3]
   13d98:	vst1.64	{d16-d17}, [lr]
   13d9c:	beq	13db8 <__assert_fail@plt+0x2a18>
   13da0:	str	r0, [sp]
   13da4:	mov	r3, sp
   13da8:	mov	r0, #0
   13dac:	bl	13ab0 <__assert_fail@plt+0x2710>
   13db0:	mov	sp, fp
   13db4:	pop	{fp, pc}
   13db8:	bl	1137c <abort@plt>
   13dbc:	push	{r4, sl, fp, lr}
   13dc0:	add	fp, sp, #8
   13dc4:	sub	sp, sp, #48	; 0x30
   13dc8:	mov	lr, r0
   13dcc:	movw	r0, #33168	; 0x8190
   13dd0:	mov	r3, #32
   13dd4:	mov	ip, r1
   13dd8:	mov	r4, #1
   13ddc:	movt	r0, #2
   13de0:	add	r1, r0, #16
   13de4:	vld1.64	{d16-d17}, [r0], r3
   13de8:	mov	r3, sp
   13dec:	vld1.64	{d18-d19}, [r1]
   13df0:	add	r1, r3, #16
   13df4:	vld1.64	{d20-d21}, [r0]
   13df8:	add	r0, r3, #32
   13dfc:	vst1.64	{d18-d19}, [r1]
   13e00:	mov	r1, r3
   13e04:	vst1.64	{d20-d21}, [r0]
   13e08:	mov	r0, #28
   13e0c:	and	r0, r0, r2, lsr #3
   13e10:	and	r2, r2, #31
   13e14:	vst1.64	{d16-d17}, [r1], r0
   13e18:	ldr	r0, [r1, #8]
   13e1c:	bic	r4, r4, r0, lsr r2
   13e20:	eor	r0, r0, r4, lsl r2
   13e24:	mov	r2, ip
   13e28:	str	r0, [r1, #8]
   13e2c:	mov	r0, #0
   13e30:	mov	r1, lr
   13e34:	bl	13ab0 <__assert_fail@plt+0x2710>
   13e38:	sub	sp, fp, #8
   13e3c:	pop	{r4, sl, fp, pc}
   13e40:	push	{fp, lr}
   13e44:	mov	fp, sp
   13e48:	sub	sp, sp, #48	; 0x30
   13e4c:	mov	ip, r0
   13e50:	movw	r0, #33168	; 0x8190
   13e54:	mov	r3, #32
   13e58:	movt	r0, #2
   13e5c:	add	r2, r0, #16
   13e60:	vld1.64	{d16-d17}, [r0], r3
   13e64:	mov	r3, sp
   13e68:	vld1.64	{d18-d19}, [r2]
   13e6c:	add	r2, r3, #16
   13e70:	vld1.64	{d20-d21}, [r0]
   13e74:	add	r0, r3, #32
   13e78:	vst1.64	{d18-d19}, [r2]
   13e7c:	mov	r2, r3
   13e80:	vst1.64	{d20-d21}, [r0]
   13e84:	mov	r0, #28
   13e88:	and	r0, r0, r1, lsr #3
   13e8c:	and	r1, r1, #31
   13e90:	vst1.64	{d16-d17}, [r2], r0
   13e94:	mov	r0, #1
   13e98:	ldr	lr, [r2, #8]
   13e9c:	bic	r0, r0, lr, lsr r1
   13ea0:	eor	r0, lr, r0, lsl r1
   13ea4:	mov	r1, ip
   13ea8:	str	r0, [r2, #8]
   13eac:	mov	r0, #0
   13eb0:	mvn	r2, #0
   13eb4:	bl	13ab0 <__assert_fail@plt+0x2710>
   13eb8:	mov	sp, fp
   13ebc:	pop	{fp, pc}
   13ec0:	push	{fp, lr}
   13ec4:	mov	fp, sp
   13ec8:	sub	sp, sp, #48	; 0x30
   13ecc:	movw	r2, #33168	; 0x8190
   13ed0:	mov	r3, #32
   13ed4:	mov	r1, r0
   13ed8:	movt	r2, #2
   13edc:	add	r0, r2, #16
   13ee0:	vld1.64	{d16-d17}, [r2], r3
   13ee4:	mov	r3, sp
   13ee8:	vld1.64	{d18-d19}, [r0]
   13eec:	add	r0, r3, #16
   13ef0:	vld1.64	{d20-d21}, [r2]
   13ef4:	mov	r2, r3
   13ef8:	vst1.64	{d18-d19}, [r0]
   13efc:	add	r0, r3, #32
   13f00:	vst1.64	{d20-d21}, [r0]
   13f04:	mov	r0, #12
   13f08:	vst1.64	{d16-d17}, [r2], r0
   13f0c:	ldr	r0, [r2]
   13f10:	orr	r0, r0, #67108864	; 0x4000000
   13f14:	str	r0, [r2]
   13f18:	mov	r0, #0
   13f1c:	mvn	r2, #0
   13f20:	bl	13ab0 <__assert_fail@plt+0x2710>
   13f24:	mov	sp, fp
   13f28:	pop	{fp, pc}
   13f2c:	push	{fp, lr}
   13f30:	mov	fp, sp
   13f34:	sub	sp, sp, #48	; 0x30
   13f38:	mov	ip, r1
   13f3c:	mov	r1, r0
   13f40:	movw	r0, #33168	; 0x8190
   13f44:	mov	r3, #32
   13f48:	movt	r0, #2
   13f4c:	add	r2, r0, #16
   13f50:	vld1.64	{d16-d17}, [r0], r3
   13f54:	mov	r3, sp
   13f58:	vld1.64	{d18-d19}, [r2]
   13f5c:	add	r2, r3, #16
   13f60:	vld1.64	{d20-d21}, [r0]
   13f64:	add	r0, r3, #32
   13f68:	vst1.64	{d18-d19}, [r2]
   13f6c:	mov	r2, r3
   13f70:	vst1.64	{d20-d21}, [r0]
   13f74:	mov	r0, #12
   13f78:	vst1.64	{d16-d17}, [r2], r0
   13f7c:	ldr	r0, [r2]
   13f80:	orr	r0, r0, #67108864	; 0x4000000
   13f84:	str	r0, [r2]
   13f88:	mov	r0, #0
   13f8c:	mov	r2, ip
   13f90:	bl	13ab0 <__assert_fail@plt+0x2710>
   13f94:	mov	sp, fp
   13f98:	pop	{fp, pc}
   13f9c:	push	{r4, sl, fp, lr}
   13fa0:	add	fp, sp, #8
   13fa4:	sub	sp, sp, #96	; 0x60
   13fa8:	mov	ip, r2
   13fac:	mov	r2, sp
   13fb0:	vmov.i32	q8, #0	; 0x00000000
   13fb4:	mov	r4, #28
   13fb8:	cmp	r1, #10
   13fbc:	mov	r3, r2
   13fc0:	add	lr, r2, #16
   13fc4:	vst1.64	{d16-d17}, [r3], r4
   13fc8:	vst1.64	{d16-d17}, [lr]
   13fcc:	vst1.32	{d16-d17}, [r3]
   13fd0:	beq	14020 <__assert_fail@plt+0x2c80>
   13fd4:	vld1.64	{d16-d17}, [r2], r4
   13fd8:	vld1.64	{d18-d19}, [lr]
   13fdc:	add	r3, sp, #48	; 0x30
   13fe0:	add	r4, r3, #4
   13fe4:	vld1.32	{d20-d21}, [r2]
   13fe8:	add	r2, r3, #20
   13fec:	vst1.32	{d16-d17}, [r4]
   13ff0:	vst1.32	{d18-d19}, [r2]
   13ff4:	add	r2, r3, #32
   13ff8:	vst1.32	{d20-d21}, [r2]
   13ffc:	str	r1, [sp, #48]	; 0x30
   14000:	mvn	r2, #0
   14004:	ldr	r1, [sp, #60]	; 0x3c
   14008:	orr	r1, r1, #67108864	; 0x4000000
   1400c:	str	r1, [sp, #60]	; 0x3c
   14010:	mov	r1, ip
   14014:	bl	13ab0 <__assert_fail@plt+0x2710>
   14018:	sub	sp, fp, #8
   1401c:	pop	{r4, sl, fp, pc}
   14020:	bl	1137c <abort@plt>
   14024:	push	{r4, r5, fp, lr}
   14028:	add	fp, sp, #8
   1402c:	sub	sp, sp, #48	; 0x30
   14030:	mov	ip, r3
   14034:	movw	r3, #33168	; 0x8190
   14038:	mov	lr, #32
   1403c:	cmp	r1, #0
   14040:	mov	r5, sp
   14044:	movt	r3, #2
   14048:	cmpne	r2, #0
   1404c:	add	r4, r3, #16
   14050:	vld1.64	{d16-d17}, [r3], lr
   14054:	vld1.64	{d18-d19}, [r4]
   14058:	add	r4, r5, #16
   1405c:	vld1.64	{d20-d21}, [r3]
   14060:	vst1.64	{d16-d17}, [r5], lr
   14064:	mov	r3, #10
   14068:	vst1.64	{d18-d19}, [r4]
   1406c:	vst1.64	{d20-d21}, [r5]
   14070:	str	r3, [sp]
   14074:	bne	1407c <__assert_fail@plt+0x2cdc>
   14078:	bl	1137c <abort@plt>
   1407c:	str	r2, [sp, #44]	; 0x2c
   14080:	str	r1, [sp, #40]	; 0x28
   14084:	mov	r3, sp
   14088:	mov	r1, ip
   1408c:	mvn	r2, #0
   14090:	bl	13ab0 <__assert_fail@plt+0x2710>
   14094:	sub	sp, fp, #8
   14098:	pop	{r4, r5, fp, pc}
   1409c:	push	{r4, r5, fp, lr}
   140a0:	add	fp, sp, #8
   140a4:	sub	sp, sp, #48	; 0x30
   140a8:	mov	lr, r3
   140ac:	movw	r3, #33168	; 0x8190
   140b0:	mov	ip, #32
   140b4:	cmp	r1, #0
   140b8:	mov	r5, sp
   140bc:	movt	r3, #2
   140c0:	cmpne	r2, #0
   140c4:	add	r4, r3, #16
   140c8:	vld1.64	{d16-d17}, [r3], ip
   140cc:	vld1.64	{d18-d19}, [r4]
   140d0:	add	r4, r5, #16
   140d4:	vld1.64	{d20-d21}, [r3]
   140d8:	vst1.64	{d16-d17}, [r5], ip
   140dc:	mov	r3, #10
   140e0:	vst1.64	{d18-d19}, [r4]
   140e4:	vst1.64	{d20-d21}, [r5]
   140e8:	str	r3, [sp]
   140ec:	bne	140f4 <__assert_fail@plt+0x2d54>
   140f0:	bl	1137c <abort@plt>
   140f4:	ldr	ip, [fp, #8]
   140f8:	str	r2, [sp, #44]	; 0x2c
   140fc:	str	r1, [sp, #40]	; 0x28
   14100:	mov	r3, sp
   14104:	mov	r1, lr
   14108:	mov	r2, ip
   1410c:	bl	13ab0 <__assert_fail@plt+0x2710>
   14110:	sub	sp, fp, #8
   14114:	pop	{r4, r5, fp, pc}
   14118:	push	{r4, sl, fp, lr}
   1411c:	add	fp, sp, #8
   14120:	sub	sp, sp, #48	; 0x30
   14124:	mov	ip, r2
   14128:	movw	r2, #33168	; 0x8190
   1412c:	mov	lr, #32
   14130:	cmp	r0, #0
   14134:	mov	r4, sp
   14138:	movt	r2, #2
   1413c:	cmpne	r1, #0
   14140:	add	r3, r2, #16
   14144:	vld1.64	{d16-d17}, [r2], lr
   14148:	vld1.64	{d18-d19}, [r3]
   1414c:	add	r3, r4, #16
   14150:	vld1.64	{d20-d21}, [r2]
   14154:	vst1.64	{d16-d17}, [r4], lr
   14158:	mov	r2, #10
   1415c:	vst1.64	{d18-d19}, [r3]
   14160:	vst1.64	{d20-d21}, [r4]
   14164:	str	r2, [sp]
   14168:	bne	14170 <__assert_fail@plt+0x2dd0>
   1416c:	bl	1137c <abort@plt>
   14170:	str	r1, [sp, #44]	; 0x2c
   14174:	str	r0, [sp, #40]	; 0x28
   14178:	mov	r3, sp
   1417c:	mov	r0, #0
   14180:	mov	r1, ip
   14184:	mvn	r2, #0
   14188:	bl	13ab0 <__assert_fail@plt+0x2710>
   1418c:	sub	sp, fp, #8
   14190:	pop	{r4, sl, fp, pc}
   14194:	push	{r4, r5, fp, lr}
   14198:	add	fp, sp, #8
   1419c:	sub	sp, sp, #48	; 0x30
   141a0:	mov	lr, r2
   141a4:	movw	r2, #33168	; 0x8190
   141a8:	mov	ip, r3
   141ac:	mov	r3, #32
   141b0:	cmp	r0, #0
   141b4:	mov	r5, sp
   141b8:	movt	r2, #2
   141bc:	cmpne	r1, #0
   141c0:	add	r4, r2, #16
   141c4:	vld1.64	{d16-d17}, [r2], r3
   141c8:	vld1.64	{d18-d19}, [r4]
   141cc:	add	r4, r5, #16
   141d0:	vld1.64	{d20-d21}, [r2]
   141d4:	vst1.64	{d16-d17}, [r5], r3
   141d8:	mov	r2, #10
   141dc:	vst1.64	{d18-d19}, [r4]
   141e0:	vst1.64	{d20-d21}, [r5]
   141e4:	str	r2, [sp]
   141e8:	bne	141f0 <__assert_fail@plt+0x2e50>
   141ec:	bl	1137c <abort@plt>
   141f0:	str	r1, [sp, #44]	; 0x2c
   141f4:	str	r0, [sp, #40]	; 0x28
   141f8:	mov	r3, sp
   141fc:	mov	r0, #0
   14200:	mov	r1, lr
   14204:	mov	r2, ip
   14208:	bl	13ab0 <__assert_fail@plt+0x2710>
   1420c:	sub	sp, fp, #8
   14210:	pop	{r4, r5, fp, pc}
   14214:	movw	r3, #33056	; 0x8120
   14218:	movt	r3, #2
   1421c:	b	13ab0 <__assert_fail@plt+0x2710>
   14220:	movw	r3, #33056	; 0x8120
   14224:	mov	r2, r1
   14228:	mov	r1, r0
   1422c:	mov	r0, #0
   14230:	movt	r3, #2
   14234:	b	13ab0 <__assert_fail@plt+0x2710>
   14238:	movw	r3, #33056	; 0x8120
   1423c:	mvn	r2, #0
   14240:	movt	r3, #2
   14244:	b	13ab0 <__assert_fail@plt+0x2710>
   14248:	movw	r3, #33056	; 0x8120
   1424c:	mov	r1, r0
   14250:	mov	r0, #0
   14254:	mvn	r2, #0
   14258:	movt	r3, #2
   1425c:	b	13ab0 <__assert_fail@plt+0x2710>
   14260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14264:	add	fp, sp, #28
   14268:	sub	sp, sp, #12
   1426c:	ldr	sl, [fp, #8]
   14270:	mov	r9, r3
   14274:	mov	r8, r1
   14278:	mov	r5, r0
   1427c:	cmp	r2, #0
   14280:	beq	1430c <__assert_fail@plt+0x2f6c>
   14284:	mov	r0, r5
   14288:	mov	r1, #58	; 0x3a
   1428c:	mov	r6, r2
   14290:	bl	1128c <strchr@plt>
   14294:	mov	r7, r0
   14298:	mov	r0, r5
   1429c:	mov	r2, r8
   142a0:	mov	r3, r6
   142a4:	stm	sp, {r9, sl}
   142a8:	mov	r1, r7
   142ac:	bl	1432c <__assert_fail@plt+0x2f8c>
   142b0:	mov	r4, r0
   142b4:	cmp	r0, #0
   142b8:	beq	14300 <__assert_fail@plt+0x2f60>
   142bc:	cmp	r7, #0
   142c0:	bne	14300 <__assert_fail@plt+0x2f60>
   142c4:	mov	r0, r5
   142c8:	mov	r1, #46	; 0x2e
   142cc:	bl	1128c <strchr@plt>
   142d0:	cmp	r0, #0
   142d4:	beq	14300 <__assert_fail@plt+0x2f60>
   142d8:	mov	r1, r0
   142dc:	mov	r0, r5
   142e0:	mov	r2, r8
   142e4:	mov	r3, r6
   142e8:	stm	sp, {r9, sl}
   142ec:	bl	1432c <__assert_fail@plt+0x2f8c>
   142f0:	cmp	r0, #0
   142f4:	movne	r0, r4
   142f8:	sub	sp, fp, #28
   142fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14300:	mov	r0, r4
   14304:	sub	sp, fp, #28
   14308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430c:	mov	r0, r5
   14310:	mov	r1, #0
   14314:	mov	r2, r8
   14318:	mov	r3, #0
   1431c:	stm	sp, {r9, sl}
   14320:	bl	1432c <__assert_fail@plt+0x2f8c>
   14324:	sub	sp, fp, #28
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14330:	add	fp, sp, #28
   14334:	sub	sp, sp, #36	; 0x24
   14338:	mov	sl, r3
   1433c:	ldr	r3, [r2]
   14340:	mov	r9, r2
   14344:	mov	r4, r1
   14348:	ldr	r2, [fp, #8]
   1434c:	ldr	r8, [fp, #12]
   14350:	cmp	sl, #0
   14354:	ldrne	r1, [sl]
   14358:	str	r3, [sp, #4]
   1435c:	mvneq	r1, #0
   14360:	cmp	r2, #0
   14364:	str	r1, [sp, #8]
   14368:	movne	r1, #0
   1436c:	strne	r1, [r2]
   14370:	cmp	r8, #0
   14374:	movne	r1, #0
   14378:	strne	r1, [r8]
   1437c:	cmp	r4, #0
   14380:	beq	14408 <__assert_fail@plt+0x3068>
   14384:	subs	r5, r4, r0
   14388:	beq	144f8 <__assert_fail@plt+0x3158>
   1438c:	add	r1, r5, #1
   14390:	bl	151b0 <__assert_fail@plt+0x3e10>
   14394:	mov	r7, r0
   14398:	mov	r0, #0
   1439c:	mov	r6, r4
   143a0:	strb	r0, [r7, r5]
   143a4:	ldrb	r0, [r6, #1]!
   143a8:	cmp	r0, #0
   143ac:	moveq	r6, r0
   143b0:	ldrb	r0, [r7]
   143b4:	cmp	r0, #43	; 0x2b
   143b8:	beq	1442c <__assert_fail@plt+0x308c>
   143bc:	mov	r0, r7
   143c0:	bl	110e8 <getpwnam@plt>
   143c4:	cmp	r0, #0
   143c8:	beq	1442c <__assert_fail@plt+0x308c>
   143cc:	ldr	r1, [r0, #8]
   143d0:	mov	r5, #0
   143d4:	cmp	r4, #0
   143d8:	str	r1, [sp, #4]
   143dc:	beq	14614 <__assert_fail@plt+0x3274>
   143e0:	cmp	r6, #0
   143e4:	bne	14614 <__assert_fail@plt+0x3274>
   143e8:	ldr	r4, [r0, #12]
   143ec:	mov	r0, r4
   143f0:	bl	11388 <getgrgid@plt>
   143f4:	cmp	r0, #0
   143f8:	str	r4, [sp, #8]
   143fc:	beq	14628 <__assert_fail@plt+0x3288>
   14400:	ldr	r0, [r0]
   14404:	b	14638 <__assert_fail@plt+0x3298>
   14408:	ldrb	r1, [r0]
   1440c:	cmp	r1, #0
   14410:	beq	14594 <__assert_fail@plt+0x31f4>
   14414:	bl	15234 <__assert_fail@plt+0x3e94>
   14418:	mov	r7, r0
   1441c:	mov	r6, #0
   14420:	ldrb	r0, [r7]
   14424:	cmp	r0, #43	; 0x2b
   14428:	bne	143bc <__assert_fail@plt+0x301c>
   1442c:	cmp	r4, #0
   14430:	beq	1452c <__assert_fail@plt+0x318c>
   14434:	cmp	r6, #0
   14438:	bne	1452c <__assert_fail@plt+0x318c>
   1443c:	movw	r5, #30903	; 0x78b7
   14440:	mov	r4, #0
   14444:	movt	r5, #1
   14448:	bl	1131c <endpwent@plt>
   1444c:	cmp	r6, #0
   14450:	beq	1451c <__assert_fail@plt+0x317c>
   14454:	cmp	r5, #0
   14458:	bne	1451c <__assert_fail@plt+0x317c>
   1445c:	ldrb	r0, [r6]
   14460:	cmp	r0, #43	; 0x2b
   14464:	beq	14484 <__assert_fail@plt+0x30e4>
   14468:	mov	r0, r6
   1446c:	bl	11394 <getgrnam@plt>
   14470:	cmp	r0, #0
   14474:	beq	14484 <__assert_fail@plt+0x30e4>
   14478:	ldr	r0, [r0, #8]
   1447c:	mov	r5, #0
   14480:	b	144d4 <__assert_fail@plt+0x3134>
   14484:	movw	r0, #29276	; 0x725c
   14488:	add	r3, sp, #12
   1448c:	mov	r1, #0
   14490:	mov	r2, #10
   14494:	movt	r0, #1
   14498:	str	r0, [sp]
   1449c:	mov	r0, r6
   144a0:	bl	152ec <__assert_fail@plt+0x3f4c>
   144a4:	ldr	r1, [sp, #12]
   144a8:	clz	r0, r0
   144ac:	movw	r5, #30889	; 0x78a9
   144b0:	lsr	r0, r0, #5
   144b4:	movt	r5, #1
   144b8:	add	r2, r1, #1
   144bc:	cmn	r1, #1
   144c0:	movwne	r2, #1
   144c4:	ands	r0, r0, r2
   144c8:	ldr	r0, [sp, #8]
   144cc:	movwne	r5, #0
   144d0:	movne	r0, r1
   144d4:	str	r0, [sp, #8]
   144d8:	bl	110c4 <endgrent@plt>
   144dc:	mov	r0, r6
   144e0:	bl	15234 <__assert_fail@plt+0x3e94>
   144e4:	mov	r4, r0
   144e8:	mov	r6, #0
   144ec:	cmp	r5, #0
   144f0:	bne	145e0 <__assert_fail@plt+0x3240>
   144f4:	b	1459c <__assert_fail@plt+0x31fc>
   144f8:	ldrb	r0, [r4, #1]!
   144fc:	mov	r7, #0
   14500:	mov	r5, #0
   14504:	cmp	r0, #0
   14508:	moveq	r4, r0
   1450c:	mov	r6, r4
   14510:	mov	r4, #0
   14514:	cmp	r6, #0
   14518:	bne	14454 <__assert_fail@plt+0x30b4>
   1451c:	mov	r6, #0
   14520:	cmp	r5, #0
   14524:	bne	145e0 <__assert_fail@plt+0x3240>
   14528:	b	1459c <__assert_fail@plt+0x31fc>
   1452c:	movw	r0, #29276	; 0x725c
   14530:	add	r3, sp, #12
   14534:	mov	r1, #0
   14538:	mov	r2, #10
   1453c:	mov	r4, #0
   14540:	movt	r0, #1
   14544:	str	r0, [sp]
   14548:	mov	r0, r7
   1454c:	bl	152ec <__assert_fail@plt+0x3f4c>
   14550:	ldr	r1, [sp, #12]
   14554:	clz	r0, r0
   14558:	movw	r5, #30876	; 0x789c
   1455c:	lsr	r0, r0, #5
   14560:	movt	r5, #1
   14564:	add	r2, r1, #1
   14568:	cmn	r1, #1
   1456c:	movwne	r2, #1
   14570:	ands	r0, r0, r2
   14574:	ldr	r0, [sp, #4]
   14578:	movwne	r5, #0
   1457c:	movne	r0, r1
   14580:	str	r0, [sp, #4]
   14584:	bl	1131c <endpwent@plt>
   14588:	cmp	r6, #0
   1458c:	bne	14454 <__assert_fail@plt+0x30b4>
   14590:	b	1451c <__assert_fail@plt+0x317c>
   14594:	mov	r4, #0
   14598:	mov	r7, #0
   1459c:	ldr	r0, [sp, #4]
   145a0:	cmp	sl, #0
   145a4:	mov	r6, #1
   145a8:	str	r0, [r9]
   145ac:	ldrne	r0, [sp, #8]
   145b0:	strne	r0, [sl]
   145b4:	ldr	r0, [fp, #8]
   145b8:	cmp	r0, #0
   145bc:	strne	r7, [r0]
   145c0:	movne	r7, #0
   145c4:	cmp	r8, #0
   145c8:	beq	145dc <__assert_fail@plt+0x323c>
   145cc:	str	r4, [r8]
   145d0:	mov	r5, #0
   145d4:	mov	r4, #0
   145d8:	b	145e0 <__assert_fail@plt+0x3240>
   145dc:	mov	r5, #0
   145e0:	mov	r0, r7
   145e4:	bl	122a4 <__assert_fail@plt+0xf04>
   145e8:	mov	r0, r4
   145ec:	bl	122a4 <__assert_fail@plt+0xf04>
   145f0:	mov	r0, #0
   145f4:	cmp	r6, #0
   145f8:	bne	1460c <__assert_fail@plt+0x326c>
   145fc:	mov	r0, #0
   14600:	mov	r1, r5
   14604:	mov	r2, #5
   14608:	bl	1116c <dcgettext@plt>
   1460c:	sub	sp, fp, #28
   14610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14614:	mov	r4, #0
   14618:	bl	1131c <endpwent@plt>
   1461c:	cmp	r6, #0
   14620:	bne	14454 <__assert_fail@plt+0x30b4>
   14624:	b	1451c <__assert_fail@plt+0x317c>
   14628:	add	r2, sp, #12
   1462c:	mov	r0, r4
   14630:	mov	r1, #0
   14634:	bl	16b20 <__assert_fail@plt+0x5780>
   14638:	bl	15234 <__assert_fail@plt+0x3e94>
   1463c:	mov	r4, r0
   14640:	bl	110c4 <endgrent@plt>
   14644:	bl	1131c <endpwent@plt>
   14648:	cmp	r6, #0
   1464c:	bne	14454 <__assert_fail@plt+0x30b4>
   14650:	b	1451c <__assert_fail@plt+0x317c>
   14654:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14658:	add	fp, sp, #24
   1465c:	sub	sp, sp, #32
   14660:	ldr	r6, [fp, #12]
   14664:	ldr	r7, [fp, #8]
   14668:	mov	r4, r2
   1466c:	mov	r8, r0
   14670:	cmp	r1, #0
   14674:	beq	1469c <__assert_fail@plt+0x32fc>
   14678:	movw	r2, #30916	; 0x78c4
   1467c:	mov	r5, r1
   14680:	str	r3, [sp, #4]
   14684:	str	r4, [sp]
   14688:	mov	r0, r8
   1468c:	mov	r1, #1
   14690:	movt	r2, #1
   14694:	mov	r3, r5
   14698:	b	146b4 <__assert_fail@plt+0x3314>
   1469c:	movw	r2, #30928	; 0x78d0
   146a0:	str	r3, [sp]
   146a4:	mov	r0, r8
   146a8:	mov	r1, #1
   146ac:	mov	r3, r4
   146b0:	movt	r2, #1
   146b4:	bl	112e0 <__fprintf_chk@plt>
   146b8:	movw	r1, #30935	; 0x78d7
   146bc:	mov	r0, #0
   146c0:	mov	r2, #5
   146c4:	movt	r1, #1
   146c8:	bl	1116c <dcgettext@plt>
   146cc:	movw	r2, #31653	; 0x7ba5
   146d0:	mov	r3, r0
   146d4:	movw	r0, #2022	; 0x7e6
   146d8:	mov	r1, #1
   146dc:	str	r0, [sp]
   146e0:	movt	r2, #1
   146e4:	mov	r0, r8
   146e8:	bl	112e0 <__fprintf_chk@plt>
   146ec:	movw	r4, #29275	; 0x725b
   146f0:	mov	r1, r8
   146f4:	movt	r4, #1
   146f8:	mov	r0, r4
   146fc:	bl	110d0 <fputs_unlocked@plt>
   14700:	movw	r1, #30939	; 0x78db
   14704:	mov	r0, #0
   14708:	mov	r2, #5
   1470c:	movt	r1, #1
   14710:	bl	1116c <dcgettext@plt>
   14714:	movw	r3, #31110	; 0x7986
   14718:	mov	r2, r0
   1471c:	mov	r0, r8
   14720:	mov	r1, #1
   14724:	movt	r3, #1
   14728:	bl	112e0 <__fprintf_chk@plt>
   1472c:	mov	r0, r4
   14730:	mov	r1, r8
   14734:	bl	110d0 <fputs_unlocked@plt>
   14738:	cmp	r6, #9
   1473c:	bhi	14778 <__assert_fail@plt+0x33d8>
   14740:	add	r0, pc, #0
   14744:	ldr	pc, [r0, r6, lsl #2]
   14748:	andeq	r4, r1, r0, ror r7
   1474c:	andeq	r4, r1, r4, lsl #15
   14750:			; <UNDEFINED> instruction: 0x000147b4
   14754:	ldrdeq	r4, [r1], -ip
   14758:	andeq	r4, r1, r4, lsl #16
   1475c:	andeq	r4, r1, ip, lsr #16
   14760:	andeq	r4, r1, r4, asr r8
   14764:	andeq	r4, r1, ip, lsl #17
   14768:	andeq	r4, r1, r4, lsr r9
   1476c:	ldrdeq	r4, [r1], -ip
   14770:	sub	sp, fp, #24
   14774:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14778:	movw	r1, #31463	; 0x7ae7
   1477c:	movt	r1, #1
   14780:	b	148e4 <__assert_fail@plt+0x3544>
   14784:	movw	r1, #31144	; 0x79a8
   14788:	mov	r0, #0
   1478c:	mov	r2, #5
   14790:	movt	r1, #1
   14794:	bl	1116c <dcgettext@plt>
   14798:	ldr	r3, [r7]
   1479c:	mov	r2, r0
   147a0:	mov	r0, r8
   147a4:	mov	r1, #1
   147a8:	sub	sp, fp, #24
   147ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   147b0:	b	112e0 <__fprintf_chk@plt>
   147b4:	movw	r1, #31160	; 0x79b8
   147b8:	mov	r0, #0
   147bc:	mov	r2, #5
   147c0:	movt	r1, #1
   147c4:	bl	1116c <dcgettext@plt>
   147c8:	mov	r2, r0
   147cc:	ldr	r3, [r7]
   147d0:	ldr	r0, [r7, #4]
   147d4:	str	r0, [sp]
   147d8:	b	148c8 <__assert_fail@plt+0x3528>
   147dc:	movw	r1, #31183	; 0x79cf
   147e0:	mov	r0, #0
   147e4:	mov	r2, #5
   147e8:	movt	r1, #1
   147ec:	bl	1116c <dcgettext@plt>
   147f0:	ldr	r3, [r7]
   147f4:	mov	r2, r0
   147f8:	ldmib	r7, {r0, r1}
   147fc:	stm	sp, {r0, r1}
   14800:	b	148c8 <__assert_fail@plt+0x3528>
   14804:	movw	r1, #31211	; 0x79eb
   14808:	mov	r0, #0
   1480c:	mov	r2, #5
   14810:	movt	r1, #1
   14814:	bl	1116c <dcgettext@plt>
   14818:	ldr	r3, [r7]
   1481c:	mov	r2, r0
   14820:	ldmib	r7, {r0, r1, r7}
   14824:	stm	sp, {r0, r1, r7}
   14828:	b	148c8 <__assert_fail@plt+0x3528>
   1482c:	movw	r1, #31243	; 0x7a0b
   14830:	mov	r0, #0
   14834:	mov	r2, #5
   14838:	movt	r1, #1
   1483c:	bl	1116c <dcgettext@plt>
   14840:	ldr	r3, [r7]
   14844:	mov	r2, r0
   14848:	ldmib	r7, {r0, r1, r6, r7}
   1484c:	stm	sp, {r0, r1, r6, r7}
   14850:	b	148c8 <__assert_fail@plt+0x3528>
   14854:	movw	r1, #31279	; 0x7a2f
   14858:	mov	r0, #0
   1485c:	mov	r2, #5
   14860:	movt	r1, #1
   14864:	bl	1116c <dcgettext@plt>
   14868:	ldr	r3, [r7]
   1486c:	mov	r2, r0
   14870:	ldmib	r7, {r0, r1, r6}
   14874:	ldr	r5, [r7, #16]
   14878:	ldr	r7, [r7, #20]
   1487c:	stm	sp, {r0, r1, r6}
   14880:	str	r5, [sp, #12]
   14884:	str	r7, [sp, #16]
   14888:	b	148c8 <__assert_fail@plt+0x3528>
   1488c:	movw	r1, #31319	; 0x7a57
   14890:	mov	r0, #0
   14894:	mov	r2, #5
   14898:	movt	r1, #1
   1489c:	bl	1116c <dcgettext@plt>
   148a0:	ldr	r3, [r7]
   148a4:	mov	r2, r0
   148a8:	ldmib	r7, {r0, r1, r6}
   148ac:	ldr	r5, [r7, #16]
   148b0:	ldr	r4, [r7, #20]
   148b4:	ldr	r7, [r7, #24]
   148b8:	stm	sp, {r0, r1, r6}
   148bc:	str	r5, [sp, #12]
   148c0:	str	r4, [sp, #16]
   148c4:	str	r7, [sp, #20]
   148c8:	mov	r0, r8
   148cc:	mov	r1, #1
   148d0:	bl	112e0 <__fprintf_chk@plt>
   148d4:	sub	sp, fp, #24
   148d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148dc:	movw	r1, #31411	; 0x7ab3
   148e0:	movt	r1, #1
   148e4:	mov	r0, #0
   148e8:	mov	r2, #5
   148ec:	bl	1116c <dcgettext@plt>
   148f0:	mov	ip, r0
   148f4:	ldr	r3, [r7]
   148f8:	ldr	r0, [r7, #4]
   148fc:	ldr	r1, [r7, #8]
   14900:	ldr	r6, [r7, #12]
   14904:	ldr	r5, [r7, #16]
   14908:	ldr	r4, [r7, #20]
   1490c:	ldr	r2, [r7, #24]
   14910:	ldr	lr, [r7, #28]
   14914:	ldr	r7, [r7, #32]
   14918:	stm	sp, {r0, r1, r6}
   1491c:	str	r5, [sp, #12]
   14920:	str	r4, [sp, #16]
   14924:	str	r2, [sp, #20]
   14928:	str	lr, [sp, #24]
   1492c:	str	r7, [sp, #28]
   14930:	b	14978 <__assert_fail@plt+0x35d8>
   14934:	movw	r1, #31363	; 0x7a83
   14938:	mov	r0, #0
   1493c:	mov	r2, #5
   14940:	movt	r1, #1
   14944:	bl	1116c <dcgettext@plt>
   14948:	mov	ip, r0
   1494c:	ldr	r3, [r7]
   14950:	ldmib	r7, {r0, r1, r6}
   14954:	ldr	r5, [r7, #16]
   14958:	ldr	r4, [r7, #20]
   1495c:	ldr	r2, [r7, #24]
   14960:	ldr	r7, [r7, #28]
   14964:	stm	sp, {r0, r1, r6}
   14968:	str	r5, [sp, #12]
   1496c:	str	r4, [sp, #16]
   14970:	str	r2, [sp, #20]
   14974:	str	r7, [sp, #24]
   14978:	mov	r0, r8
   1497c:	mov	r1, #1
   14980:	mov	r2, ip
   14984:	bl	112e0 <__fprintf_chk@plt>
   14988:	sub	sp, fp, #24
   1498c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14990:	push	{r4, sl, fp, lr}
   14994:	add	fp, sp, #8
   14998:	sub	sp, sp, #8
   1499c:	ldr	ip, [fp, #8]
   149a0:	mov	lr, #0
   149a4:	ldr	r4, [ip, lr, lsl #2]
   149a8:	add	lr, lr, #1
   149ac:	cmp	r4, #0
   149b0:	bne	149a4 <__assert_fail@plt+0x3604>
   149b4:	sub	r4, lr, #1
   149b8:	str	ip, [sp]
   149bc:	str	r4, [sp, #4]
   149c0:	bl	14654 <__assert_fail@plt+0x32b4>
   149c4:	sub	sp, fp, #8
   149c8:	pop	{r4, sl, fp, pc}
   149cc:	push	{fp, lr}
   149d0:	mov	fp, sp
   149d4:	sub	sp, sp, #48	; 0x30
   149d8:	ldr	ip, [fp, #8]
   149dc:	ldr	lr, [ip]
   149e0:	cmp	lr, #0
   149e4:	str	lr, [sp, #8]
   149e8:	beq	14a84 <__assert_fail@plt+0x36e4>
   149ec:	ldr	lr, [ip, #4]
   149f0:	cmp	lr, #0
   149f4:	str	lr, [sp, #12]
   149f8:	beq	14a8c <__assert_fail@plt+0x36ec>
   149fc:	ldr	lr, [ip, #8]
   14a00:	cmp	lr, #0
   14a04:	str	lr, [sp, #16]
   14a08:	beq	14a94 <__assert_fail@plt+0x36f4>
   14a0c:	ldr	lr, [ip, #12]
   14a10:	cmp	lr, #0
   14a14:	str	lr, [sp, #20]
   14a18:	beq	14a9c <__assert_fail@plt+0x36fc>
   14a1c:	ldr	lr, [ip, #16]
   14a20:	cmp	lr, #0
   14a24:	str	lr, [sp, #24]
   14a28:	beq	14aa4 <__assert_fail@plt+0x3704>
   14a2c:	ldr	lr, [ip, #20]
   14a30:	cmp	lr, #0
   14a34:	str	lr, [sp, #28]
   14a38:	beq	14aac <__assert_fail@plt+0x370c>
   14a3c:	ldr	lr, [ip, #24]
   14a40:	cmp	lr, #0
   14a44:	str	lr, [sp, #32]
   14a48:	beq	14ab4 <__assert_fail@plt+0x3714>
   14a4c:	ldr	lr, [ip, #28]
   14a50:	cmp	lr, #0
   14a54:	str	lr, [sp, #36]	; 0x24
   14a58:	beq	14abc <__assert_fail@plt+0x371c>
   14a5c:	ldr	lr, [ip, #32]
   14a60:	cmp	lr, #0
   14a64:	str	lr, [sp, #40]	; 0x28
   14a68:	beq	14ac4 <__assert_fail@plt+0x3724>
   14a6c:	ldr	lr, [ip, #36]	; 0x24
   14a70:	mov	ip, #10
   14a74:	cmp	lr, #0
   14a78:	str	lr, [sp, #44]	; 0x2c
   14a7c:	movweq	ip, #9
   14a80:	b	14ac8 <__assert_fail@plt+0x3728>
   14a84:	mov	ip, #0
   14a88:	b	14ac8 <__assert_fail@plt+0x3728>
   14a8c:	mov	ip, #1
   14a90:	b	14ac8 <__assert_fail@plt+0x3728>
   14a94:	mov	ip, #2
   14a98:	b	14ac8 <__assert_fail@plt+0x3728>
   14a9c:	mov	ip, #3
   14aa0:	b	14ac8 <__assert_fail@plt+0x3728>
   14aa4:	mov	ip, #4
   14aa8:	b	14ac8 <__assert_fail@plt+0x3728>
   14aac:	mov	ip, #5
   14ab0:	b	14ac8 <__assert_fail@plt+0x3728>
   14ab4:	mov	ip, #6
   14ab8:	b	14ac8 <__assert_fail@plt+0x3728>
   14abc:	mov	ip, #7
   14ac0:	b	14ac8 <__assert_fail@plt+0x3728>
   14ac4:	mov	ip, #8
   14ac8:	add	lr, sp, #8
   14acc:	str	ip, [sp, #4]
   14ad0:	str	lr, [sp]
   14ad4:	bl	14654 <__assert_fail@plt+0x32b4>
   14ad8:	mov	sp, fp
   14adc:	pop	{fp, pc}
   14ae0:	push	{fp, lr}
   14ae4:	mov	fp, sp
   14ae8:	sub	sp, sp, #56	; 0x38
   14aec:	add	ip, fp, #8
   14af0:	str	ip, [sp, #12]
   14af4:	ldr	lr, [fp, #8]
   14af8:	cmp	lr, #0
   14afc:	str	lr, [sp, #16]
   14b00:	beq	14b9c <__assert_fail@plt+0x37fc>
   14b04:	ldr	lr, [ip, #4]
   14b08:	cmp	lr, #0
   14b0c:	str	lr, [sp, #20]
   14b10:	beq	14ba4 <__assert_fail@plt+0x3804>
   14b14:	ldr	lr, [ip, #8]
   14b18:	cmp	lr, #0
   14b1c:	str	lr, [sp, #24]
   14b20:	beq	14bac <__assert_fail@plt+0x380c>
   14b24:	ldr	lr, [ip, #12]
   14b28:	cmp	lr, #0
   14b2c:	str	lr, [sp, #28]
   14b30:	beq	14bb4 <__assert_fail@plt+0x3814>
   14b34:	ldr	lr, [ip, #16]
   14b38:	cmp	lr, #0
   14b3c:	str	lr, [sp, #32]
   14b40:	beq	14bbc <__assert_fail@plt+0x381c>
   14b44:	ldr	lr, [ip, #20]
   14b48:	cmp	lr, #0
   14b4c:	str	lr, [sp, #36]	; 0x24
   14b50:	beq	14bc4 <__assert_fail@plt+0x3824>
   14b54:	ldr	lr, [ip, #24]
   14b58:	cmp	lr, #0
   14b5c:	str	lr, [sp, #40]	; 0x28
   14b60:	beq	14bcc <__assert_fail@plt+0x382c>
   14b64:	ldr	lr, [ip, #28]
   14b68:	cmp	lr, #0
   14b6c:	str	lr, [sp, #44]	; 0x2c
   14b70:	beq	14bd4 <__assert_fail@plt+0x3834>
   14b74:	ldr	lr, [ip, #32]
   14b78:	cmp	lr, #0
   14b7c:	str	lr, [sp, #48]	; 0x30
   14b80:	beq	14bdc <__assert_fail@plt+0x383c>
   14b84:	ldr	lr, [ip, #36]	; 0x24
   14b88:	mov	ip, #10
   14b8c:	cmp	lr, #0
   14b90:	str	lr, [sp, #52]	; 0x34
   14b94:	movweq	ip, #9
   14b98:	b	14be0 <__assert_fail@plt+0x3840>
   14b9c:	mov	ip, #0
   14ba0:	b	14be0 <__assert_fail@plt+0x3840>
   14ba4:	mov	ip, #1
   14ba8:	b	14be0 <__assert_fail@plt+0x3840>
   14bac:	mov	ip, #2
   14bb0:	b	14be0 <__assert_fail@plt+0x3840>
   14bb4:	mov	ip, #3
   14bb8:	b	14be0 <__assert_fail@plt+0x3840>
   14bbc:	mov	ip, #4
   14bc0:	b	14be0 <__assert_fail@plt+0x3840>
   14bc4:	mov	ip, #5
   14bc8:	b	14be0 <__assert_fail@plt+0x3840>
   14bcc:	mov	ip, #6
   14bd0:	b	14be0 <__assert_fail@plt+0x3840>
   14bd4:	mov	ip, #7
   14bd8:	b	14be0 <__assert_fail@plt+0x3840>
   14bdc:	mov	ip, #8
   14be0:	add	lr, sp, #16
   14be4:	str	ip, [sp, #4]
   14be8:	str	lr, [sp]
   14bec:	bl	14654 <__assert_fail@plt+0x32b4>
   14bf0:	mov	sp, fp
   14bf4:	pop	{fp, pc}
   14bf8:	push	{fp, lr}
   14bfc:	mov	fp, sp
   14c00:	movw	r0, #33140	; 0x8174
   14c04:	movt	r0, #2
   14c08:	ldr	r1, [r0]
   14c0c:	movw	r0, #29275	; 0x725b
   14c10:	movt	r0, #1
   14c14:	bl	110d0 <fputs_unlocked@plt>
   14c18:	movw	r1, #31523	; 0x7b23
   14c1c:	mov	r0, #0
   14c20:	mov	r2, #5
   14c24:	movt	r1, #1
   14c28:	bl	1116c <dcgettext@plt>
   14c2c:	movw	r2, #31543	; 0x7b37
   14c30:	mov	r1, r0
   14c34:	mov	r0, #1
   14c38:	movt	r2, #1
   14c3c:	bl	112c8 <__printf_chk@plt>
   14c40:	movw	r1, #31565	; 0x7b4d
   14c44:	mov	r0, #0
   14c48:	mov	r2, #5
   14c4c:	movt	r1, #1
   14c50:	bl	1116c <dcgettext@plt>
   14c54:	movw	r2, #29693	; 0x73fd
   14c58:	movw	r3, #30172	; 0x75dc
   14c5c:	mov	r1, r0
   14c60:	mov	r0, #1
   14c64:	movt	r2, #1
   14c68:	movt	r3, #1
   14c6c:	bl	112c8 <__printf_chk@plt>
   14c70:	movw	r1, #31585	; 0x7b61
   14c74:	mov	r0, #0
   14c78:	mov	r2, #5
   14c7c:	movt	r1, #1
   14c80:	bl	1116c <dcgettext@plt>
   14c84:	movw	r2, #31624	; 0x7b88
   14c88:	mov	r1, r0
   14c8c:	mov	r0, #1
   14c90:	movt	r2, #1
   14c94:	pop	{fp, lr}
   14c98:	b	112c8 <__printf_chk@plt>
   14c9c:	push	{r4, r5, r6, sl, fp, lr}
   14ca0:	add	fp, sp, #16
   14ca4:	mov	r4, r2
   14ca8:	mov	r5, r1
   14cac:	mov	r6, r0
   14cb0:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14cb4:	cmp	r0, #0
   14cb8:	popne	{r4, r5, r6, sl, fp, pc}
   14cbc:	cmp	r6, #0
   14cc0:	beq	14cd4 <__assert_fail@plt+0x3934>
   14cc4:	cmp	r5, #0
   14cc8:	cmpne	r4, #0
   14ccc:	bne	14cd4 <__assert_fail@plt+0x3934>
   14cd0:	pop	{r4, r5, r6, sl, fp, pc}
   14cd4:	bl	15274 <__assert_fail@plt+0x3ed4>
   14cd8:	push	{r4, r5, r6, sl, fp, lr}
   14cdc:	add	fp, sp, #16
   14ce0:	mov	r4, r2
   14ce4:	mov	r5, r1
   14ce8:	mov	r6, r0
   14cec:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14cf0:	cmp	r0, #0
   14cf4:	popne	{r4, r5, r6, sl, fp, pc}
   14cf8:	cmp	r6, #0
   14cfc:	beq	14d10 <__assert_fail@plt+0x3970>
   14d00:	cmp	r5, #0
   14d04:	cmpne	r4, #0
   14d08:	bne	14d10 <__assert_fail@plt+0x3970>
   14d0c:	pop	{r4, r5, r6, sl, fp, pc}
   14d10:	bl	15274 <__assert_fail@plt+0x3ed4>
   14d14:	push	{fp, lr}
   14d18:	mov	fp, sp
   14d1c:	bl	16870 <__assert_fail@plt+0x54d0>
   14d20:	cmp	r0, #0
   14d24:	popne	{fp, pc}
   14d28:	bl	15274 <__assert_fail@plt+0x3ed4>
   14d2c:	push	{fp, lr}
   14d30:	mov	fp, sp
   14d34:	bl	16870 <__assert_fail@plt+0x54d0>
   14d38:	cmp	r0, #0
   14d3c:	popne	{fp, pc}
   14d40:	bl	15274 <__assert_fail@plt+0x3ed4>
   14d44:	push	{fp, lr}
   14d48:	mov	fp, sp
   14d4c:	bl	16870 <__assert_fail@plt+0x54d0>
   14d50:	cmp	r0, #0
   14d54:	popne	{fp, pc}
   14d58:	bl	15274 <__assert_fail@plt+0x3ed4>
   14d5c:	push	{r4, r5, fp, lr}
   14d60:	add	fp, sp, #8
   14d64:	mov	r4, r1
   14d68:	mov	r5, r0
   14d6c:	bl	168a0 <__assert_fail@plt+0x5500>
   14d70:	cmp	r0, #0
   14d74:	popne	{r4, r5, fp, pc}
   14d78:	cmp	r5, #0
   14d7c:	beq	14d8c <__assert_fail@plt+0x39ec>
   14d80:	cmp	r4, #0
   14d84:	bne	14d8c <__assert_fail@plt+0x39ec>
   14d88:	pop	{r4, r5, fp, pc}
   14d8c:	bl	15274 <__assert_fail@plt+0x3ed4>
   14d90:	push	{fp, lr}
   14d94:	mov	fp, sp
   14d98:	cmp	r1, #0
   14d9c:	orreq	r1, r1, #1
   14da0:	bl	168a0 <__assert_fail@plt+0x5500>
   14da4:	cmp	r0, #0
   14da8:	popne	{fp, pc}
   14dac:	bl	15274 <__assert_fail@plt+0x3ed4>
   14db0:	push	{fp, lr}
   14db4:	mov	fp, sp
   14db8:	clz	r3, r2
   14dbc:	lsr	ip, r3, #5
   14dc0:	clz	r3, r1
   14dc4:	lsr	r3, r3, #5
   14dc8:	orrs	r3, r3, ip
   14dcc:	movwne	r1, #1
   14dd0:	movwne	r2, #1
   14dd4:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14dd8:	cmp	r0, #0
   14ddc:	popne	{fp, pc}
   14de0:	bl	15274 <__assert_fail@plt+0x3ed4>
   14de4:	push	{fp, lr}
   14de8:	mov	fp, sp
   14dec:	mov	r2, r1
   14df0:	mov	r1, r0
   14df4:	mov	r0, #0
   14df8:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14dfc:	cmp	r0, #0
   14e00:	popne	{fp, pc}
   14e04:	bl	15274 <__assert_fail@plt+0x3ed4>
   14e08:	push	{fp, lr}
   14e0c:	mov	fp, sp
   14e10:	mov	r2, r1
   14e14:	mov	r1, r0
   14e18:	clz	r0, r2
   14e1c:	clz	r3, r1
   14e20:	lsr	r0, r0, #5
   14e24:	lsr	r3, r3, #5
   14e28:	orrs	r0, r3, r0
   14e2c:	movwne	r1, #1
   14e30:	movwne	r2, #1
   14e34:	mov	r0, #0
   14e38:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14e3c:	cmp	r0, #0
   14e40:	popne	{fp, pc}
   14e44:	bl	15274 <__assert_fail@plt+0x3ed4>
   14e48:	push	{r4, r5, r6, sl, fp, lr}
   14e4c:	add	fp, sp, #16
   14e50:	ldr	r5, [r1]
   14e54:	mov	r4, r1
   14e58:	mov	r6, r0
   14e5c:	cmp	r0, #0
   14e60:	beq	14e78 <__assert_fail@plt+0x3ad8>
   14e64:	mov	r0, #1
   14e68:	add	r0, r0, r5, lsr #1
   14e6c:	adds	r5, r5, r0
   14e70:	bcc	14e80 <__assert_fail@plt+0x3ae0>
   14e74:	b	14ebc <__assert_fail@plt+0x3b1c>
   14e78:	cmp	r5, #0
   14e7c:	movweq	r5, #64	; 0x40
   14e80:	mov	r0, r6
   14e84:	mov	r1, r5
   14e88:	mov	r2, #1
   14e8c:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14e90:	cmp	r5, #0
   14e94:	mov	r1, r5
   14e98:	movwne	r1, #1
   14e9c:	cmp	r0, #0
   14ea0:	bne	14eb4 <__assert_fail@plt+0x3b14>
   14ea4:	clz	r2, r6
   14ea8:	lsr	r2, r2, #5
   14eac:	orrs	r1, r2, r1
   14eb0:	bne	14ebc <__assert_fail@plt+0x3b1c>
   14eb4:	str	r5, [r4]
   14eb8:	pop	{r4, r5, r6, sl, fp, pc}
   14ebc:	bl	15274 <__assert_fail@plt+0x3ed4>
   14ec0:	push	{r4, r5, r6, r7, fp, lr}
   14ec4:	add	fp, sp, #16
   14ec8:	ldr	r5, [r1]
   14ecc:	mov	r6, r2
   14ed0:	mov	r4, r1
   14ed4:	mov	r7, r0
   14ed8:	cmp	r0, #0
   14edc:	beq	14ef4 <__assert_fail@plt+0x3b54>
   14ee0:	mov	r0, #1
   14ee4:	add	r0, r0, r5, lsr #1
   14ee8:	adds	r5, r5, r0
   14eec:	bcc	14f0c <__assert_fail@plt+0x3b6c>
   14ef0:	b	14f40 <__assert_fail@plt+0x3ba0>
   14ef4:	cmp	r5, #0
   14ef8:	bne	14f0c <__assert_fail@plt+0x3b6c>
   14efc:	mov	r0, #64	; 0x40
   14f00:	cmp	r6, #64	; 0x40
   14f04:	udiv	r5, r0, r6
   14f08:	addhi	r5, r5, #1
   14f0c:	mov	r0, r7
   14f10:	mov	r1, r5
   14f14:	mov	r2, r6
   14f18:	bl	16e80 <__assert_fail@plt+0x5ae0>
   14f1c:	cmp	r0, #0
   14f20:	bne	14f38 <__assert_fail@plt+0x3b98>
   14f24:	cmp	r7, #0
   14f28:	beq	14f40 <__assert_fail@plt+0x3ba0>
   14f2c:	cmp	r6, #0
   14f30:	cmpne	r5, #0
   14f34:	bne	14f40 <__assert_fail@plt+0x3ba0>
   14f38:	str	r5, [r4]
   14f3c:	pop	{r4, r5, r6, r7, fp, pc}
   14f40:	bl	15274 <__assert_fail@plt+0x3ed4>
   14f44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f48:	add	fp, sp, #24
   14f4c:	mov	r8, r1
   14f50:	ldr	r1, [r1]
   14f54:	mov	r5, r0
   14f58:	add	r0, r1, r1, asr #1
   14f5c:	cmp	r0, r1
   14f60:	mvnvs	r0, #-2147483648	; 0x80000000
   14f64:	cmp	r0, r3
   14f68:	mov	r7, r0
   14f6c:	movgt	r7, r3
   14f70:	cmn	r3, #1
   14f74:	movle	r7, r0
   14f78:	ldr	r0, [fp, #8]
   14f7c:	cmn	r0, #1
   14f80:	ble	14fa8 <__assert_fail@plt+0x3c08>
   14f84:	cmp	r0, #0
   14f88:	beq	14ffc <__assert_fail@plt+0x3c5c>
   14f8c:	cmn	r7, #1
   14f90:	ble	14fd0 <__assert_fail@plt+0x3c30>
   14f94:	mvn	r4, #-2147483648	; 0x80000000
   14f98:	udiv	r6, r4, r0
   14f9c:	cmp	r6, r7
   14fa0:	bge	14ffc <__assert_fail@plt+0x3c5c>
   14fa4:	b	1500c <__assert_fail@plt+0x3c6c>
   14fa8:	cmn	r7, #1
   14fac:	ble	14fec <__assert_fail@plt+0x3c4c>
   14fb0:	cmn	r0, #1
   14fb4:	beq	14ffc <__assert_fail@plt+0x3c5c>
   14fb8:	mov	r6, #-2147483648	; 0x80000000
   14fbc:	mvn	r4, #-2147483648	; 0x80000000
   14fc0:	sdiv	r6, r6, r0
   14fc4:	cmp	r6, r7
   14fc8:	bge	14ffc <__assert_fail@plt+0x3c5c>
   14fcc:	b	1500c <__assert_fail@plt+0x3c6c>
   14fd0:	beq	14ffc <__assert_fail@plt+0x3c5c>
   14fd4:	mov	r6, #-2147483648	; 0x80000000
   14fd8:	mvn	r4, #-2147483648	; 0x80000000
   14fdc:	sdiv	r6, r6, r7
   14fe0:	cmp	r6, r0
   14fe4:	bge	14ffc <__assert_fail@plt+0x3c5c>
   14fe8:	b	1500c <__assert_fail@plt+0x3c6c>
   14fec:	mvn	r4, #-2147483648	; 0x80000000
   14ff0:	sdiv	r6, r4, r0
   14ff4:	cmp	r7, r6
   14ff8:	blt	1500c <__assert_fail@plt+0x3c6c>
   14ffc:	mul	r6, r7, r0
   15000:	mov	r4, #64	; 0x40
   15004:	cmp	r6, #63	; 0x3f
   15008:	bgt	15014 <__assert_fail@plt+0x3c74>
   1500c:	sdiv	r7, r4, r0
   15010:	mul	r6, r7, r0
   15014:	cmp	r5, #0
   15018:	moveq	r4, #0
   1501c:	streq	r4, [r8]
   15020:	sub	r4, r7, r1
   15024:	cmp	r4, r2
   15028:	bge	150d4 <__assert_fail@plt+0x3d34>
   1502c:	add	r7, r1, r2
   15030:	mov	r6, #0
   15034:	mov	r2, #0
   15038:	cmp	r7, r3
   1503c:	movwgt	r6, #1
   15040:	cmn	r3, #1
   15044:	movwgt	r2, #1
   15048:	cmp	r7, r1
   1504c:	bvs	15108 <__assert_fail@plt+0x3d68>
   15050:	ands	r1, r2, r6
   15054:	bne	15108 <__assert_fail@plt+0x3d68>
   15058:	cmn	r0, #1
   1505c:	ble	15084 <__assert_fail@plt+0x3ce4>
   15060:	cmp	r0, #0
   15064:	beq	150d0 <__assert_fail@plt+0x3d30>
   15068:	cmn	r7, #1
   1506c:	ble	150a8 <__assert_fail@plt+0x3d08>
   15070:	mvn	r1, #-2147483648	; 0x80000000
   15074:	udiv	r1, r1, r0
   15078:	cmp	r1, r7
   1507c:	bge	150d0 <__assert_fail@plt+0x3d30>
   15080:	b	15108 <__assert_fail@plt+0x3d68>
   15084:	cmn	r7, #1
   15088:	ble	150c0 <__assert_fail@plt+0x3d20>
   1508c:	cmn	r0, #1
   15090:	beq	150d0 <__assert_fail@plt+0x3d30>
   15094:	mov	r1, #-2147483648	; 0x80000000
   15098:	sdiv	r1, r1, r0
   1509c:	cmp	r1, r7
   150a0:	bge	150d0 <__assert_fail@plt+0x3d30>
   150a4:	b	15108 <__assert_fail@plt+0x3d68>
   150a8:	beq	150d0 <__assert_fail@plt+0x3d30>
   150ac:	mov	r1, #-2147483648	; 0x80000000
   150b0:	sdiv	r1, r1, r7
   150b4:	cmp	r1, r0
   150b8:	bge	150d0 <__assert_fail@plt+0x3d30>
   150bc:	b	15108 <__assert_fail@plt+0x3d68>
   150c0:	mvn	r1, #-2147483648	; 0x80000000
   150c4:	sdiv	r1, r1, r0
   150c8:	cmp	r7, r1
   150cc:	blt	15108 <__assert_fail@plt+0x3d68>
   150d0:	mul	r6, r7, r0
   150d4:	mov	r0, r5
   150d8:	mov	r1, r6
   150dc:	bl	168a0 <__assert_fail@plt+0x5500>
   150e0:	cmp	r6, #0
   150e4:	movwne	r6, #1
   150e8:	cmp	r0, #0
   150ec:	bne	15100 <__assert_fail@plt+0x3d60>
   150f0:	clz	r1, r5
   150f4:	lsr	r1, r1, #5
   150f8:	orrs	r1, r1, r6
   150fc:	bne	15108 <__assert_fail@plt+0x3d68>
   15100:	str	r7, [r8]
   15104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15108:	bl	15274 <__assert_fail@plt+0x3ed4>
   1510c:	push	{fp, lr}
   15110:	mov	fp, sp
   15114:	mov	r1, #1
   15118:	bl	1681c <__assert_fail@plt+0x547c>
   1511c:	cmp	r0, #0
   15120:	popne	{fp, pc}
   15124:	bl	15274 <__assert_fail@plt+0x3ed4>
   15128:	push	{fp, lr}
   1512c:	mov	fp, sp
   15130:	bl	1681c <__assert_fail@plt+0x547c>
   15134:	cmp	r0, #0
   15138:	popne	{fp, pc}
   1513c:	bl	15274 <__assert_fail@plt+0x3ed4>
   15140:	push	{fp, lr}
   15144:	mov	fp, sp
   15148:	mov	r1, #1
   1514c:	bl	1681c <__assert_fail@plt+0x547c>
   15150:	cmp	r0, #0
   15154:	popne	{fp, pc}
   15158:	bl	15274 <__assert_fail@plt+0x3ed4>
   1515c:	push	{fp, lr}
   15160:	mov	fp, sp
   15164:	bl	1681c <__assert_fail@plt+0x547c>
   15168:	cmp	r0, #0
   1516c:	popne	{fp, pc}
   15170:	bl	15274 <__assert_fail@plt+0x3ed4>
   15174:	push	{r4, r5, r6, sl, fp, lr}
   15178:	add	fp, sp, #16
   1517c:	mov	r5, r0
   15180:	mov	r0, r1
   15184:	mov	r4, r1
   15188:	bl	16870 <__assert_fail@plt+0x54d0>
   1518c:	cmp	r0, #0
   15190:	beq	151ac <__assert_fail@plt+0x3e0c>
   15194:	mov	r1, r5
   15198:	mov	r2, r4
   1519c:	mov	r6, r0
   151a0:	bl	11130 <memcpy@plt>
   151a4:	mov	r0, r6
   151a8:	pop	{r4, r5, r6, sl, fp, pc}
   151ac:	bl	15274 <__assert_fail@plt+0x3ed4>
   151b0:	push	{r4, r5, r6, sl, fp, lr}
   151b4:	add	fp, sp, #16
   151b8:	mov	r5, r0
   151bc:	mov	r0, r1
   151c0:	mov	r4, r1
   151c4:	bl	16870 <__assert_fail@plt+0x54d0>
   151c8:	cmp	r0, #0
   151cc:	beq	151e8 <__assert_fail@plt+0x3e48>
   151d0:	mov	r1, r5
   151d4:	mov	r2, r4
   151d8:	mov	r6, r0
   151dc:	bl	11130 <memcpy@plt>
   151e0:	mov	r0, r6
   151e4:	pop	{r4, r5, r6, sl, fp, pc}
   151e8:	bl	15274 <__assert_fail@plt+0x3ed4>
   151ec:	push	{r4, r5, r6, sl, fp, lr}
   151f0:	add	fp, sp, #16
   151f4:	mov	r5, r0
   151f8:	add	r0, r1, #1
   151fc:	mov	r4, r1
   15200:	bl	16870 <__assert_fail@plt+0x54d0>
   15204:	cmp	r0, #0
   15208:	beq	15230 <__assert_fail@plt+0x3e90>
   1520c:	mov	r6, r0
   15210:	mov	r0, #0
   15214:	mov	r1, r5
   15218:	mov	r2, r4
   1521c:	strb	r0, [r6, r4]
   15220:	mov	r0, r6
   15224:	bl	11130 <memcpy@plt>
   15228:	mov	r0, r6
   1522c:	pop	{r4, r5, r6, sl, fp, pc}
   15230:	bl	15274 <__assert_fail@plt+0x3ed4>
   15234:	push	{r4, r5, r6, sl, fp, lr}
   15238:	add	fp, sp, #16
   1523c:	mov	r4, r0
   15240:	bl	11280 <strlen@plt>
   15244:	add	r5, r0, #1
   15248:	mov	r0, r5
   1524c:	bl	16870 <__assert_fail@plt+0x54d0>
   15250:	cmp	r0, #0
   15254:	beq	15270 <__assert_fail@plt+0x3ed0>
   15258:	mov	r1, r4
   1525c:	mov	r2, r5
   15260:	mov	r6, r0
   15264:	bl	11130 <memcpy@plt>
   15268:	mov	r0, r6
   1526c:	pop	{r4, r5, r6, sl, fp, pc}
   15270:	bl	15274 <__assert_fail@plt+0x3ed4>
   15274:	push	{fp, lr}
   15278:	mov	fp, sp
   1527c:	movw	r0, #33052	; 0x811c
   15280:	movw	r1, #31700	; 0x7bd4
   15284:	mov	r2, #5
   15288:	movt	r0, #2
   1528c:	movt	r1, #1
   15290:	ldr	r4, [r0]
   15294:	mov	r0, #0
   15298:	bl	1116c <dcgettext@plt>
   1529c:	movw	r2, #30623	; 0x779f
   152a0:	mov	r3, r0
   152a4:	mov	r0, r4
   152a8:	mov	r1, #0
   152ac:	movt	r2, #1
   152b0:	bl	111fc <error@plt>
   152b4:	bl	1137c <abort@plt>
   152b8:	push	{r4, sl, fp, lr}
   152bc:	add	fp, sp, #8
   152c0:	bl	16c14 <__assert_fail@plt+0x5874>
   152c4:	mov	r4, r0
   152c8:	cmn	r0, #1
   152cc:	bne	152e0 <__assert_fail@plt+0x3f40>
   152d0:	bl	11298 <__errno_location@plt>
   152d4:	ldr	r0, [r0]
   152d8:	cmp	r0, #12
   152dc:	beq	152e8 <__assert_fail@plt+0x3f48>
   152e0:	mov	r0, r4
   152e4:	pop	{r4, sl, fp, pc}
   152e8:	bl	15274 <__assert_fail@plt+0x3ed4>
   152ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f0:	add	fp, sp, #28
   152f4:	sub	sp, sp, #20
   152f8:	cmp	r2, #37	; 0x25
   152fc:	bcs	15b48 <__assert_fail@plt+0x47a8>
   15300:	ldr	r9, [fp, #8]
   15304:	mov	r5, r2
   15308:	mov	r4, r1
   1530c:	mov	r7, r0
   15310:	str	r3, [sp, #12]
   15314:	bl	11298 <__errno_location@plt>
   15318:	mov	r8, r0
   1531c:	mov	r0, #0
   15320:	str	r0, [r8]
   15324:	bl	1125c <__ctype_b_loc@plt>
   15328:	ldr	r1, [r0]
   1532c:	mov	r2, r7
   15330:	ldrb	r0, [r2], #1
   15334:	add	r3, r1, r0, lsl #1
   15338:	ldrb	r3, [r3, #1]
   1533c:	tst	r3, #32
   15340:	bne	15330 <__assert_fail@plt+0x3f90>
   15344:	add	r6, sp, #16
   15348:	cmp	r4, #0
   1534c:	mov	sl, #4
   15350:	movne	r6, r4
   15354:	cmp	r0, #45	; 0x2d
   15358:	beq	154e4 <__assert_fail@plt+0x4144>
   1535c:	mov	r0, r7
   15360:	mov	r1, r6
   15364:	mov	r2, r5
   15368:	bl	11274 <strtoul@plt>
   1536c:	ldr	r5, [r6]
   15370:	cmp	r5, r7
   15374:	beq	154d4 <__assert_fail@plt+0x4134>
   15378:	mov	r4, r0
   1537c:	ldr	r0, [r8]
   15380:	cmp	r0, #0
   15384:	beq	154f0 <__assert_fail@plt+0x4150>
   15388:	cmp	r0, #34	; 0x22
   1538c:	bne	154e4 <__assert_fail@plt+0x4144>
   15390:	mov	sl, #1
   15394:	cmp	r9, #0
   15398:	beq	15b34 <__assert_fail@plt+0x4794>
   1539c:	ldrb	r7, [r5]
   153a0:	cmp	r7, #0
   153a4:	beq	15b34 <__assert_fail@plt+0x4794>
   153a8:	mov	r0, r9
   153ac:	mov	r1, r7
   153b0:	bl	1128c <strchr@plt>
   153b4:	cmp	r0, #0
   153b8:	beq	156b4 <__assert_fail@plt+0x4314>
   153bc:	sub	r0, r7, #69	; 0x45
   153c0:	mov	lr, #1
   153c4:	mov	r8, #1024	; 0x400
   153c8:	cmp	r0, #47	; 0x2f
   153cc:	bhi	15568 <__assert_fail@plt+0x41c8>
   153d0:	add	r1, pc, #0
   153d4:	ldr	pc, [r1, r0, lsl #2]
   153d8:	muleq	r1, r8, r4
   153dc:	andeq	r5, r1, r8, ror #10
   153e0:	muleq	r1, r8, r4
   153e4:	andeq	r5, r1, r8, ror #10
   153e8:	andeq	r5, r1, r8, ror #10
   153ec:	andeq	r5, r1, r8, ror #10
   153f0:	muleq	r1, r8, r4
   153f4:	andeq	r5, r1, r8, ror #10
   153f8:	muleq	r1, r8, r4
   153fc:	andeq	r5, r1, r8, ror #10
   15400:	andeq	r5, r1, r8, ror #10
   15404:	muleq	r1, r8, r4
   15408:	andeq	r5, r1, r8, ror #10
   1540c:	andeq	r5, r1, r8, ror #10
   15410:	andeq	r5, r1, r8, ror #10
   15414:	muleq	r1, r8, r4
   15418:	andeq	r5, r1, r8, ror #10
   1541c:	andeq	r5, r1, r8, ror #10
   15420:	andeq	r5, r1, r8, ror #10
   15424:	andeq	r5, r1, r8, ror #10
   15428:	muleq	r1, r8, r4
   1542c:	muleq	r1, r8, r4
   15430:	andeq	r5, r1, r8, ror #10
   15434:	andeq	r5, r1, r8, ror #10
   15438:	andeq	r5, r1, r8, ror #10
   1543c:	andeq	r5, r1, r8, ror #10
   15440:	andeq	r5, r1, r8, ror #10
   15444:	andeq	r5, r1, r8, ror #10
   15448:	andeq	r5, r1, r8, ror #10
   1544c:	andeq	r5, r1, r8, ror #10
   15450:	andeq	r5, r1, r8, ror #10
   15454:	andeq	r5, r1, r8, ror #10
   15458:	andeq	r5, r1, r8, ror #10
   1545c:	andeq	r5, r1, r8, ror #10
   15460:	muleq	r1, r8, r4
   15464:	andeq	r5, r1, r8, ror #10
   15468:	andeq	r5, r1, r8, ror #10
   1546c:	andeq	r5, r1, r8, ror #10
   15470:	muleq	r1, r8, r4
   15474:	andeq	r5, r1, r8, ror #10
   15478:	muleq	r1, r8, r4
   1547c:	andeq	r5, r1, r8, ror #10
   15480:	andeq	r5, r1, r8, ror #10
   15484:	andeq	r5, r1, r8, ror #10
   15488:	andeq	r5, r1, r8, ror #10
   1548c:	andeq	r5, r1, r8, ror #10
   15490:	andeq	r5, r1, r8, ror #10
   15494:	muleq	r1, r8, r4
   15498:	mov	r0, r9
   1549c:	mov	r1, #48	; 0x30
   154a0:	bl	1128c <strchr@plt>
   154a4:	cmp	r0, #0
   154a8:	beq	15528 <__assert_fail@plt+0x4188>
   154ac:	ldrb	r0, [r5, #1]
   154b0:	cmp	r0, #66	; 0x42
   154b4:	cmpne	r0, #68	; 0x44
   154b8:	bne	1553c <__assert_fail@plt+0x419c>
   154bc:	mov	lr, #2
   154c0:	mov	r8, #1000	; 0x3e8
   154c4:	sub	r1, r7, #66	; 0x42
   154c8:	cmp	r1, #53	; 0x35
   154cc:	bls	15574 <__assert_fail@plt+0x41d4>
   154d0:	b	156b4 <__assert_fail@plt+0x4314>
   154d4:	cmp	r9, #0
   154d8:	ldrbne	r1, [r7]
   154dc:	cmpne	r1, #0
   154e0:	bne	15500 <__assert_fail@plt+0x4160>
   154e4:	mov	r0, sl
   154e8:	sub	sp, fp, #28
   154ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f0:	mov	sl, r0
   154f4:	cmp	r9, #0
   154f8:	bne	1539c <__assert_fail@plt+0x3ffc>
   154fc:	b	15b34 <__assert_fail@plt+0x4794>
   15500:	mov	r0, r9
   15504:	bl	1128c <strchr@plt>
   15508:	cmp	r0, #0
   1550c:	beq	154e4 <__assert_fail@plt+0x4144>
   15510:	mov	r4, #1
   15514:	mov	sl, #0
   15518:	ldrb	r7, [r5]
   1551c:	cmp	r7, #0
   15520:	bne	153a8 <__assert_fail@plt+0x4008>
   15524:	b	15b34 <__assert_fail@plt+0x4794>
   15528:	mov	lr, #1
   1552c:	sub	r1, r7, #66	; 0x42
   15530:	cmp	r1, #53	; 0x35
   15534:	bls	15574 <__assert_fail@plt+0x41d4>
   15538:	b	156b4 <__assert_fail@plt+0x4314>
   1553c:	cmp	r0, #105	; 0x69
   15540:	bne	15564 <__assert_fail@plt+0x41c4>
   15544:	ldrb	r0, [r5, #2]
   15548:	mov	lr, #1
   1554c:	cmp	r0, #66	; 0x42
   15550:	movweq	lr, #3
   15554:	sub	r1, r7, #66	; 0x42
   15558:	cmp	r1, #53	; 0x35
   1555c:	bls	15574 <__assert_fail@plt+0x41d4>
   15560:	b	156b4 <__assert_fail@plt+0x4314>
   15564:	mov	lr, #1
   15568:	sub	r1, r7, #66	; 0x42
   1556c:	cmp	r1, #53	; 0x35
   15570:	bhi	156b4 <__assert_fail@plt+0x4314>
   15574:	add	r2, pc, #4
   15578:	mov	r0, #0
   1557c:	ldr	pc, [r2, r1, lsl #2]
   15580:	andeq	r5, r1, ip, ror r8
   15584:			; <UNDEFINED> instruction: 0x000156b4
   15588:			; <UNDEFINED> instruction: 0x000156b4
   1558c:	muleq	r1, r8, r8
   15590:			; <UNDEFINED> instruction: 0x000156b4
   15594:	andeq	r5, r1, r8, asr r6
   15598:			; <UNDEFINED> instruction: 0x000156b4
   1559c:			; <UNDEFINED> instruction: 0x000156b4
   155a0:			; <UNDEFINED> instruction: 0x000156b4
   155a4:	andeq	r5, r1, ip, asr #13
   155a8:			; <UNDEFINED> instruction: 0x000156b4
   155ac:	andeq	r5, r1, ip, ror #13
   155b0:			; <UNDEFINED> instruction: 0x000156b4
   155b4:			; <UNDEFINED> instruction: 0x000156b4
   155b8:	andeq	r5, r1, r0, asr r9
   155bc:			; <UNDEFINED> instruction: 0x000156b4
   155c0:			; <UNDEFINED> instruction: 0x000156b4
   155c4:			; <UNDEFINED> instruction: 0x000156b4
   155c8:	andeq	r5, r1, ip, lsr #14
   155cc:			; <UNDEFINED> instruction: 0x000156b4
   155d0:			; <UNDEFINED> instruction: 0x000156b4
   155d4:			; <UNDEFINED> instruction: 0x000156b4
   155d8:			; <UNDEFINED> instruction: 0x000156b4
   155dc:	andeq	r5, r1, ip, ror #19
   155e0:	andeq	r5, r1, r4, lsr #15
   155e4:			; <UNDEFINED> instruction: 0x000156b4
   155e8:			; <UNDEFINED> instruction: 0x000156b4
   155ec:			; <UNDEFINED> instruction: 0x000156b4
   155f0:			; <UNDEFINED> instruction: 0x000156b4
   155f4:			; <UNDEFINED> instruction: 0x000156b4
   155f8:			; <UNDEFINED> instruction: 0x000156b4
   155fc:			; <UNDEFINED> instruction: 0x000156b4
   15600:	andeq	r5, r1, r4, ror #21
   15604:	andeq	r5, r1, ip, lsl fp
   15608:			; <UNDEFINED> instruction: 0x000156b4
   1560c:			; <UNDEFINED> instruction: 0x000156b4
   15610:			; <UNDEFINED> instruction: 0x000156b4
   15614:	andeq	r5, r1, r8, asr r6
   15618:			; <UNDEFINED> instruction: 0x000156b4
   1561c:			; <UNDEFINED> instruction: 0x000156b4
   15620:			; <UNDEFINED> instruction: 0x000156b4
   15624:	andeq	r5, r1, ip, asr #13
   15628:			; <UNDEFINED> instruction: 0x000156b4
   1562c:	andeq	r5, r1, ip, ror #13
   15630:			; <UNDEFINED> instruction: 0x000156b4
   15634:			; <UNDEFINED> instruction: 0x000156b4
   15638:			; <UNDEFINED> instruction: 0x000156b4
   1563c:			; <UNDEFINED> instruction: 0x000156b4
   15640:			; <UNDEFINED> instruction: 0x000156b4
   15644:			; <UNDEFINED> instruction: 0x000156b4
   15648:	andeq	r5, r1, ip, lsr #14
   1564c:			; <UNDEFINED> instruction: 0x000156b4
   15650:			; <UNDEFINED> instruction: 0x000156b4
   15654:	andeq	r5, r1, r8, lsl #22
   15658:	mvn	r0, #0
   1565c:	mul	r1, r4, r8
   15660:	mov	r7, #0
   15664:	udiv	r0, r0, r8
   15668:	cmp	r0, r4
   1566c:	mvncc	r1, #0
   15670:	mul	r2, r1, r8
   15674:	cmp	r0, r1
   15678:	mvncc	r2, #0
   1567c:	cmp	r0, r2
   15680:	mul	r3, r2, r8
   15684:	mov	r2, #0
   15688:	mvncc	r3, #0
   1568c:	movwcc	r7, #1
   15690:	cmp	r0, r1
   15694:	mov	r1, #0
   15698:	movwcc	r1, #1
   1569c:	cmp	r0, r4
   156a0:	mov	r4, r3
   156a4:	movwcc	r2, #1
   156a8:	orr	r0, r2, r1
   156ac:	orr	r0, r0, r7
   156b0:	b	15b1c <__assert_fail@plt+0x477c>
   156b4:	ldr	r0, [sp, #12]
   156b8:	orr	sl, sl, #2
   156bc:	str	r4, [r0]
   156c0:	mov	r0, sl
   156c4:	sub	sp, fp, #28
   156c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156cc:	mvn	r0, #0
   156d0:	mul	r1, r4, r8
   156d4:	udiv	r0, r0, r8
   156d8:	cmp	r0, r4
   156dc:	mov	r0, #0
   156e0:	mvncc	r1, #0
   156e4:	movwcc	r0, #1
   156e8:	b	15b18 <__assert_fail@plt+0x4778>
   156ec:	mvn	r0, #0
   156f0:	mul	r1, r4, r8
   156f4:	mov	r3, #0
   156f8:	udiv	r0, r0, r8
   156fc:	cmp	r0, r4
   15700:	mvncc	r1, #0
   15704:	cmp	r0, r1
   15708:	mul	r2, r1, r8
   1570c:	mov	r1, #0
   15710:	mvncc	r2, #0
   15714:	movwcc	r3, #1
   15718:	cmp	r0, r4
   1571c:	movwcc	r1, #1
   15720:	mov	r4, r2
   15724:	orr	r0, r1, r3
   15728:	b	15b1c <__assert_fail@plt+0x477c>
   1572c:	mvn	r0, #0
   15730:	mul	r1, r4, r8
   15734:	mov	r7, #0
   15738:	udiv	r0, r0, r8
   1573c:	cmp	r0, r4
   15740:	mvncc	r1, #0
   15744:	mul	r2, r1, r8
   15748:	cmp	r0, r1
   1574c:	mvncc	r2, #0
   15750:	mul	r3, r2, r8
   15754:	cmp	r0, r2
   15758:	mvncc	r3, #0
   1575c:	cmp	r0, r3
   15760:	mul	ip, r3, r8
   15764:	mov	r3, #0
   15768:	mvncc	ip, #0
   1576c:	movwcc	r7, #1
   15770:	cmp	r0, r2
   15774:	mov	r2, #0
   15778:	movwcc	r2, #1
   1577c:	cmp	r0, r1
   15780:	mov	r1, #0
   15784:	movwcc	r1, #1
   15788:	cmp	r0, r4
   1578c:	mov	r4, ip
   15790:	movwcc	r3, #1
   15794:	orr	r0, r3, r1
   15798:	orr	r0, r0, r2
   1579c:	orr	r0, r0, r7
   157a0:	b	15b1c <__assert_fail@plt+0x477c>
   157a4:	mvn	r0, #0
   157a8:	str	lr, [sp, #8]
   157ac:	mul	lr, r4, r8
   157b0:	udiv	r0, r0, r8
   157b4:	cmp	r0, r4
   157b8:	mvncc	lr, #0
   157bc:	mul	r9, lr, r8
   157c0:	cmp	r0, lr
   157c4:	mvncc	r9, #0
   157c8:	mul	r7, r9, r8
   157cc:	cmp	r0, r9
   157d0:	mvncc	r7, #0
   157d4:	mul	r3, r7, r8
   157d8:	cmp	r0, r7
   157dc:	mvncc	r3, #0
   157e0:	mul	r1, r3, r8
   157e4:	cmp	r0, r3
   157e8:	mvncc	r1, #0
   157ec:	mul	r2, r1, r8
   157f0:	cmp	r0, r1
   157f4:	mvncc	r2, #0
   157f8:	mul	ip, r2, r8
   157fc:	cmp	r0, r2
   15800:	mov	r8, #0
   15804:	mov	r2, #0
   15808:	mvncc	ip, #0
   1580c:	movwcc	r8, #1
   15810:	cmp	r0, r1
   15814:	mov	r1, #0
   15818:	movwcc	r1, #1
   1581c:	cmp	r0, r3
   15820:	mov	r3, #0
   15824:	movwcc	r3, #1
   15828:	cmp	r0, r7
   1582c:	mov	r7, #0
   15830:	movwcc	r7, #1
   15834:	cmp	r0, r9
   15838:	mov	r9, #0
   1583c:	movwcc	r9, #1
   15840:	cmp	r0, lr
   15844:	mov	lr, #0
   15848:	movwcc	lr, #1
   1584c:	cmp	r0, r4
   15850:	mov	r4, ip
   15854:	movwcc	r2, #1
   15858:	orr	r0, r2, lr
   1585c:	ldr	lr, [sp, #8]
   15860:	orr	r0, r0, r9
   15864:	orr	r0, r0, r7
   15868:	orr	r0, r0, r3
   1586c:	orr	r0, r0, r1
   15870:	orr	r0, r0, r8
   15874:	and	r0, r0, #1
   15878:	b	15b1c <__assert_fail@plt+0x477c>
   1587c:	mov	r1, #0
   15880:	lsr	r0, r4, #22
   15884:	cmp	r1, r4, lsr #22
   15888:	lsl	r4, r4, #10
   1588c:	movwne	r0, #1
   15890:	mvnne	r4, #0
   15894:	b	15b1c <__assert_fail@plt+0x477c>
   15898:	mvn	r0, #0
   1589c:	mul	ip, r4, r8
   158a0:	str	lr, [sp, #8]
   158a4:	mov	r9, #0
   158a8:	udiv	r0, r0, r8
   158ac:	cmp	r0, r4
   158b0:	mvncc	ip, #0
   158b4:	mul	r2, ip, r8
   158b8:	cmp	r0, ip
   158bc:	mvncc	r2, #0
   158c0:	mul	r3, r2, r8
   158c4:	cmp	r0, r2
   158c8:	mvncc	r3, #0
   158cc:	mul	r7, r3, r8
   158d0:	cmp	r0, r3
   158d4:	mvncc	r7, #0
   158d8:	mul	r1, r7, r8
   158dc:	cmp	r0, r7
   158e0:	mvncc	r1, #0
   158e4:	mul	lr, r1, r8
   158e8:	cmp	r0, r1
   158ec:	mov	r8, #0
   158f0:	mov	r1, #0
   158f4:	mvncc	lr, #0
   158f8:	movwcc	r8, #1
   158fc:	cmp	r0, r7
   15900:	mov	r7, #0
   15904:	movwcc	r7, #1
   15908:	cmp	r0, r3
   1590c:	mov	r3, #0
   15910:	movwcc	r3, #1
   15914:	cmp	r0, r2
   15918:	mov	r2, #0
   1591c:	movwcc	r2, #1
   15920:	cmp	r0, ip
   15924:	movwcc	r1, #1
   15928:	cmp	r0, r4
   1592c:	mov	r4, lr
   15930:	ldr	lr, [sp, #8]
   15934:	movwcc	r9, #1
   15938:	orr	r0, r9, r1
   1593c:	orr	r0, r0, r2
   15940:	orr	r0, r0, r3
   15944:	orr	r0, r0, r7
   15948:	orr	r0, r0, r8
   1594c:	b	15b1c <__assert_fail@plt+0x477c>
   15950:	mvn	r0, #0
   15954:	mul	r1, r4, r8
   15958:	udiv	r0, r0, r8
   1595c:	cmp	r0, r4
   15960:	mvncc	r1, #0
   15964:	mul	r2, r1, r8
   15968:	cmp	r0, r1
   1596c:	mvncc	r2, #0
   15970:	mul	r3, r2, r8
   15974:	cmp	r0, r2
   15978:	mvncc	r3, #0
   1597c:	mul	r7, r3, r8
   15980:	cmp	r0, r3
   15984:	mvncc	r7, #0
   15988:	mul	ip, r7, r8
   1598c:	cmp	r0, r7
   15990:	mov	r8, lr
   15994:	mov	lr, #0
   15998:	mov	r7, #0
   1599c:	mvncc	ip, #0
   159a0:	movwcc	lr, #1
   159a4:	cmp	r0, r3
   159a8:	mov	r3, #0
   159ac:	movwcc	r3, #1
   159b0:	cmp	r0, r2
   159b4:	mov	r2, #0
   159b8:	movwcc	r2, #1
   159bc:	cmp	r0, r1
   159c0:	mov	r1, #0
   159c4:	movwcc	r1, #1
   159c8:	cmp	r0, r4
   159cc:	mov	r4, ip
   159d0:	movwcc	r7, #1
   159d4:	orr	r0, r7, r1
   159d8:	orr	r0, r0, r2
   159dc:	orr	r0, r0, r3
   159e0:	orr	r0, r0, lr
   159e4:	mov	lr, r8
   159e8:	b	15b1c <__assert_fail@plt+0x477c>
   159ec:	mvn	r0, #0
   159f0:	str	lr, [sp, #8]
   159f4:	mul	lr, r4, r8
   159f8:	udiv	r0, r0, r8
   159fc:	cmp	r0, r4
   15a00:	mvncc	lr, #0
   15a04:	mul	r9, lr, r8
   15a08:	cmp	r0, lr
   15a0c:	mvncc	r9, #0
   15a10:	mul	r7, r9, r8
   15a14:	cmp	r0, r9
   15a18:	mvncc	r7, #0
   15a1c:	mul	r3, r7, r8
   15a20:	cmp	r0, r7
   15a24:	mvncc	r3, #0
   15a28:	mul	r1, r3, r8
   15a2c:	cmp	r0, r3
   15a30:	mvncc	r1, #0
   15a34:	mul	r2, r1, r8
   15a38:	cmp	r0, r1
   15a3c:	mvncc	r2, #0
   15a40:	mul	ip, r2, r8
   15a44:	cmp	r0, r2
   15a48:	mvncc	ip, #0
   15a4c:	mul	r8, ip, r8
   15a50:	cmp	r0, ip
   15a54:	mov	ip, #0
   15a58:	mvncc	r8, #0
   15a5c:	str	r8, [sp, #4]
   15a60:	mov	r8, #0
   15a64:	movwcc	r8, #1
   15a68:	cmp	r0, r2
   15a6c:	mov	r2, #0
   15a70:	movwcc	r2, #1
   15a74:	cmp	r0, r1
   15a78:	mov	r1, #0
   15a7c:	movwcc	r1, #1
   15a80:	cmp	r0, r3
   15a84:	mov	r3, #0
   15a88:	movwcc	r3, #1
   15a8c:	cmp	r0, r7
   15a90:	mov	r7, #0
   15a94:	movwcc	r7, #1
   15a98:	cmp	r0, r9
   15a9c:	mov	r9, #0
   15aa0:	movwcc	r9, #1
   15aa4:	cmp	r0, lr
   15aa8:	mov	lr, #0
   15aac:	movwcc	lr, #1
   15ab0:	cmp	r0, r4
   15ab4:	ldr	r4, [sp, #4]
   15ab8:	movwcc	ip, #1
   15abc:	orr	r0, ip, lr
   15ac0:	ldr	lr, [sp, #8]
   15ac4:	orr	r0, r0, r9
   15ac8:	orr	r0, r0, r7
   15acc:	orr	r0, r0, r3
   15ad0:	orr	r0, r0, r1
   15ad4:	orr	r0, r0, r2
   15ad8:	orr	r0, r0, r8
   15adc:	and	r0, r0, #1
   15ae0:	b	15b1c <__assert_fail@plt+0x477c>
   15ae4:	movw	r0, #65535	; 0xffff
   15ae8:	movt	r0, #63	; 0x3f
   15aec:	add	r1, r0, #4194304	; 0x400000
   15af0:	mov	r0, #0
   15af4:	cmp	r4, r1
   15af8:	lsl	r4, r4, #9
   15afc:	movwhi	r0, #1
   15b00:	mvnhi	r4, #0
   15b04:	b	15b1c <__assert_fail@plt+0x477c>
   15b08:	lsl	r1, r4, #1
   15b0c:	cmp	r4, #0
   15b10:	lsr	r0, r4, #31
   15b14:	mvnlt	r1, #0
   15b18:	mov	r4, r1
   15b1c:	add	r1, r5, lr
   15b20:	orr	sl, r0, sl
   15b24:	str	r1, [r6]
   15b28:	ldrb	r1, [r5, lr]
   15b2c:	cmp	r1, #0
   15b30:	orrne	sl, sl, #2
   15b34:	ldr	r0, [sp, #12]
   15b38:	str	r4, [r0]
   15b3c:	mov	r0, sl
   15b40:	sub	sp, fp, #28
   15b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b48:	movw	r0, #31717	; 0x7be5
   15b4c:	movw	r1, #31755	; 0x7c0b
   15b50:	movw	r3, #31771	; 0x7c1b
   15b54:	mov	r2, #85	; 0x55
   15b58:	movt	r0, #1
   15b5c:	movt	r1, #1
   15b60:	movt	r3, #1
   15b64:	bl	113a0 <__assert_fail@plt>
   15b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b6c:	add	fp, sp, #28
   15b70:	sub	sp, sp, #44	; 0x2c
   15b74:	cmp	r2, #37	; 0x25
   15b78:	bcs	167fc <__assert_fail@plt+0x545c>
   15b7c:	ldr	sl, [fp, #8]
   15b80:	mov	r6, r2
   15b84:	mov	r7, r1
   15b88:	mov	r4, r0
   15b8c:	str	r3, [sp, #36]	; 0x24
   15b90:	bl	11298 <__errno_location@plt>
   15b94:	mov	r5, r0
   15b98:	mov	r0, #0
   15b9c:	str	r0, [r5]
   15ba0:	bl	1125c <__ctype_b_loc@plt>
   15ba4:	ldr	r1, [r0]
   15ba8:	mov	r2, r4
   15bac:	ldrb	r0, [r2], #1
   15bb0:	add	r3, r1, r0, lsl #1
   15bb4:	ldrb	r3, [r3, #1]
   15bb8:	tst	r3, #32
   15bbc:	bne	15bac <__assert_fail@plt+0x480c>
   15bc0:	sub	r9, fp, #32
   15bc4:	cmp	r7, #0
   15bc8:	mov	r8, #4
   15bcc:	movne	r9, r7
   15bd0:	cmp	r0, #45	; 0x2d
   15bd4:	beq	15f94 <__assert_fail@plt+0x4bf4>
   15bd8:	mov	r0, r4
   15bdc:	mov	r1, r9
   15be0:	mov	r2, r6
   15be4:	mov	r3, #0
   15be8:	bl	11148 <__strtoull_internal@plt>
   15bec:	mov	r7, r1
   15bf0:	ldr	r1, [r9]
   15bf4:	cmp	r1, r4
   15bf8:	beq	15c30 <__assert_fail@plt+0x4890>
   15bfc:	mov	r6, r0
   15c00:	ldr	r0, [r5]
   15c04:	cmp	r0, #0
   15c08:	beq	15f4c <__assert_fail@plt+0x4bac>
   15c0c:	cmp	r0, #34	; 0x22
   15c10:	bne	15f94 <__assert_fail@plt+0x4bf4>
   15c14:	mov	r8, #1
   15c18:	cmp	sl, #0
   15c1c:	beq	167e8 <__assert_fail@plt+0x5448>
   15c20:	ldrb	r4, [r1]
   15c24:	cmp	r4, #0
   15c28:	bne	15c74 <__assert_fail@plt+0x48d4>
   15c2c:	b	167e8 <__assert_fail@plt+0x5448>
   15c30:	cmp	sl, #0
   15c34:	beq	15f94 <__assert_fail@plt+0x4bf4>
   15c38:	mov	r5, r1
   15c3c:	ldrb	r1, [r4]
   15c40:	cmp	r1, #0
   15c44:	beq	15f94 <__assert_fail@plt+0x4bf4>
   15c48:	mov	r0, sl
   15c4c:	bl	1128c <strchr@plt>
   15c50:	cmp	r0, #0
   15c54:	beq	15f94 <__assert_fail@plt+0x4bf4>
   15c58:	mov	r1, r5
   15c5c:	mov	r8, #0
   15c60:	mov	r6, #1
   15c64:	mov	r7, #0
   15c68:	ldrb	r4, [r1]
   15c6c:	cmp	r4, #0
   15c70:	beq	167e8 <__assert_fail@plt+0x5448>
   15c74:	str	r1, [sp, #32]
   15c78:	mov	r0, sl
   15c7c:	mov	r1, r4
   15c80:	bl	1128c <strchr@plt>
   15c84:	cmp	r0, #0
   15c88:	beq	15f88 <__assert_fail@plt+0x4be8>
   15c8c:	sub	r0, r4, #69	; 0x45
   15c90:	mov	r1, #1
   15c94:	mov	r3, #0
   15c98:	mov	r5, #1024	; 0x400
   15c9c:	cmp	r0, #47	; 0x2f
   15ca0:	str	r1, [sp, #28]
   15ca4:	bhi	15da8 <__assert_fail@plt+0x4a08>
   15ca8:	add	r1, pc, #0
   15cac:	ldr	pc, [r1, r0, lsl #2]
   15cb0:	andeq	r5, r1, r0, ror sp
   15cb4:	andeq	r5, r1, r8, lsr #27
   15cb8:	andeq	r5, r1, r0, ror sp
   15cbc:	andeq	r5, r1, r8, lsr #27
   15cc0:	andeq	r5, r1, r8, lsr #27
   15cc4:	andeq	r5, r1, r8, lsr #27
   15cc8:	andeq	r5, r1, r0, ror sp
   15ccc:	andeq	r5, r1, r8, lsr #27
   15cd0:	andeq	r5, r1, r0, ror sp
   15cd4:	andeq	r5, r1, r8, lsr #27
   15cd8:	andeq	r5, r1, r8, lsr #27
   15cdc:	andeq	r5, r1, r0, ror sp
   15ce0:	andeq	r5, r1, r8, lsr #27
   15ce4:	andeq	r5, r1, r8, lsr #27
   15ce8:	andeq	r5, r1, r8, lsr #27
   15cec:	andeq	r5, r1, r0, ror sp
   15cf0:	andeq	r5, r1, r8, lsr #27
   15cf4:	andeq	r5, r1, r8, lsr #27
   15cf8:	andeq	r5, r1, r8, lsr #27
   15cfc:	andeq	r5, r1, r8, lsr #27
   15d00:	andeq	r5, r1, r0, ror sp
   15d04:	andeq	r5, r1, r0, ror sp
   15d08:	andeq	r5, r1, r8, lsr #27
   15d0c:	andeq	r5, r1, r8, lsr #27
   15d10:	andeq	r5, r1, r8, lsr #27
   15d14:	andeq	r5, r1, r8, lsr #27
   15d18:	andeq	r5, r1, r8, lsr #27
   15d1c:	andeq	r5, r1, r8, lsr #27
   15d20:	andeq	r5, r1, r8, lsr #27
   15d24:	andeq	r5, r1, r8, lsr #27
   15d28:	andeq	r5, r1, r8, lsr #27
   15d2c:	andeq	r5, r1, r8, lsr #27
   15d30:	andeq	r5, r1, r8, lsr #27
   15d34:	andeq	r5, r1, r8, lsr #27
   15d38:	andeq	r5, r1, r0, ror sp
   15d3c:	andeq	r5, r1, r8, lsr #27
   15d40:	andeq	r5, r1, r8, lsr #27
   15d44:	andeq	r5, r1, r8, lsr #27
   15d48:	andeq	r5, r1, r0, ror sp
   15d4c:	andeq	r5, r1, r8, lsr #27
   15d50:	andeq	r5, r1, r0, ror sp
   15d54:	andeq	r5, r1, r8, lsr #27
   15d58:	andeq	r5, r1, r8, lsr #27
   15d5c:	andeq	r5, r1, r8, lsr #27
   15d60:	andeq	r5, r1, r8, lsr #27
   15d64:	andeq	r5, r1, r8, lsr #27
   15d68:	andeq	r5, r1, r8, lsr #27
   15d6c:	andeq	r5, r1, r0, ror sp
   15d70:	mov	r0, sl
   15d74:	mov	r1, #48	; 0x30
   15d78:	bl	1128c <strchr@plt>
   15d7c:	cmp	r0, #0
   15d80:	beq	15da4 <__assert_fail@plt+0x4a04>
   15d84:	ldr	r1, [sp, #32]
   15d88:	ldrb	r0, [r1, #1]
   15d8c:	cmp	r0, #66	; 0x42
   15d90:	cmpne	r0, #68	; 0x44
   15d94:	bne	15f5c <__assert_fail@plt+0x4bbc>
   15d98:	mov	r5, #1000	; 0x3e8
   15d9c:	mov	r0, #2
   15da0:	str	r0, [sp, #28]
   15da4:	mov	r3, #0
   15da8:	sub	r0, r4, #66	; 0x42
   15dac:	cmp	r0, #53	; 0x35
   15db0:	bhi	15f88 <__assert_fail@plt+0x4be8>
   15db4:	add	r1, pc, #0
   15db8:	ldr	pc, [r1, r0, lsl #2]
   15dbc:	strdeq	r6, [r1], -r8
   15dc0:	andeq	r5, r1, r8, lsl #31
   15dc4:	andeq	r5, r1, r8, lsl #31
   15dc8:	andeq	r6, r1, r0, lsr #6
   15dcc:	andeq	r5, r1, r8, lsl #31
   15dd0:	muleq	r1, r4, lr
   15dd4:	andeq	r5, r1, r8, lsl #31
   15dd8:	andeq	r5, r1, r8, lsl #31
   15ddc:	andeq	r5, r1, r8, lsl #31
   15de0:	andeq	r5, r1, r0, lsr #31
   15de4:	andeq	r5, r1, r8, lsl #31
   15de8:	andeq	r5, r1, r8, ror #31
   15dec:	andeq	r5, r1, r8, lsl #31
   15df0:	andeq	r5, r1, r8, lsl #31
   15df4:	andeq	r6, r1, r4, ror r4
   15df8:	andeq	r5, r1, r8, lsl #31
   15dfc:	andeq	r5, r1, r8, lsl #31
   15e00:	andeq	r5, r1, r8, lsl #31
   15e04:	andeq	r6, r1, r4, ror r0
   15e08:	andeq	r5, r1, r8, lsl #31
   15e0c:	andeq	r5, r1, r8, lsl #31
   15e10:	andeq	r5, r1, r8, lsl #31
   15e14:	andeq	r5, r1, r8, lsl #31
   15e18:	muleq	r1, ip, r5
   15e1c:	andeq	r6, r1, ip, asr r1
   15e20:	andeq	r5, r1, r8, lsl #31
   15e24:	andeq	r5, r1, r8, lsl #31
   15e28:	andeq	r5, r1, r8, lsl #31
   15e2c:	andeq	r5, r1, r8, lsl #31
   15e30:	andeq	r5, r1, r8, lsl #31
   15e34:	andeq	r5, r1, r8, lsl #31
   15e38:	andeq	r5, r1, r8, lsl #31
   15e3c:	andeq	r6, r1, r0, ror r7
   15e40:	andeq	r6, r1, r8, asr #15
   15e44:	andeq	r5, r1, r8, lsl #31
   15e48:	andeq	r5, r1, r8, lsl #31
   15e4c:	andeq	r5, r1, r8, lsl #31
   15e50:	muleq	r1, r4, lr
   15e54:	andeq	r5, r1, r8, lsl #31
   15e58:	andeq	r5, r1, r8, lsl #31
   15e5c:	andeq	r5, r1, r8, lsl #31
   15e60:	andeq	r5, r1, r0, lsr #31
   15e64:	andeq	r5, r1, r8, lsl #31
   15e68:	andeq	r5, r1, r8, ror #31
   15e6c:	andeq	r5, r1, r8, lsl #31
   15e70:	andeq	r5, r1, r8, lsl #31
   15e74:	andeq	r5, r1, r8, lsl #31
   15e78:	andeq	r5, r1, r8, lsl #31
   15e7c:	andeq	r5, r1, r8, lsl #31
   15e80:	andeq	r5, r1, r8, lsl #31
   15e84:	andeq	r6, r1, r4, ror r0
   15e88:	andeq	r5, r1, r8, lsl #31
   15e8c:	andeq	r5, r1, r8, lsl #31
   15e90:	andeq	r6, r1, r4, lsr #15
   15e94:	mvn	r0, #0
   15e98:	mvn	r1, #0
   15e9c:	mov	r2, r5
   15ea0:	mov	sl, r3
   15ea4:	bl	16fc4 <__assert_fail@plt+0x5c24>
   15ea8:	subs	r3, r0, r6
   15eac:	mov	lr, #0
   15eb0:	umull	r4, r2, r6, r5
   15eb4:	str	r1, [sp, #20]
   15eb8:	sbcs	r3, r1, r7
   15ebc:	mla	ip, r6, sl, r2
   15ec0:	mov	r2, r1
   15ec4:	movwcc	lr, #1
   15ec8:	mla	r7, r7, r5, ip
   15ecc:	mov	r2, #0
   15ed0:	cmp	lr, #0
   15ed4:	mvnne	r4, #0
   15ed8:	mvnne	r7, #0
   15edc:	subs	r6, r0, r4
   15ee0:	sbcs	r6, r1, r7
   15ee4:	movwcc	r2, #1
   15ee8:	umull	r3, r6, r4, r5
   15eec:	cmp	r2, #0
   15ef0:	str	r6, [sp, #16]
   15ef4:	mvnne	r3, #0
   15ef8:	cmp	r2, #0
   15efc:	umull	r6, ip, r3, r5
   15f00:	mla	r1, r3, sl, ip
   15f04:	ldr	ip, [sp, #16]
   15f08:	str	r1, [sp, #12]
   15f0c:	mla	r4, r4, sl, ip
   15f10:	mla	r4, r7, r5, r4
   15f14:	ldr	r7, [sp, #12]
   15f18:	mvnne	r4, #0
   15f1c:	subs	r0, r0, r3
   15f20:	ldr	r0, [sp, #20]
   15f24:	mla	r7, r4, r5, r7
   15f28:	sbcs	r0, r0, r4
   15f2c:	mov	r0, #0
   15f30:	movwcc	r0, #1
   15f34:	cmp	r0, #0
   15f38:	mov	r1, r0
   15f3c:	orr	r0, lr, r2
   15f40:	mvnne	r7, #0
   15f44:	mvnne	r6, #0
   15f48:	b	16594 <__assert_fail@plt+0x51f4>
   15f4c:	mov	r8, r0
   15f50:	cmp	sl, #0
   15f54:	bne	15c20 <__assert_fail@plt+0x4880>
   15f58:	b	167e8 <__assert_fail@plt+0x5448>
   15f5c:	cmp	r0, #105	; 0x69
   15f60:	mov	r3, #0
   15f64:	bne	15da8 <__assert_fail@plt+0x4a08>
   15f68:	ldrb	r0, [r1, #2]
   15f6c:	mov	r1, #1
   15f70:	cmp	r0, #66	; 0x42
   15f74:	movweq	r1, #3
   15f78:	str	r1, [sp, #28]
   15f7c:	sub	r0, r4, #66	; 0x42
   15f80:	cmp	r0, #53	; 0x35
   15f84:	bls	15db4 <__assert_fail@plt+0x4a14>
   15f88:	ldr	r0, [sp, #36]	; 0x24
   15f8c:	orr	r8, r8, #2
   15f90:	strd	r6, [r0]
   15f94:	mov	r0, r8
   15f98:	sub	sp, fp, #28
   15f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fa0:	mvn	r0, #0
   15fa4:	mvn	r1, #0
   15fa8:	mov	r2, r5
   15fac:	mov	r4, r3
   15fb0:	bl	16fc4 <__assert_fail@plt+0x5c24>
   15fb4:	subs	r0, r0, r6
   15fb8:	mov	r2, #0
   15fbc:	sbcs	r0, r1, r7
   15fc0:	movwcc	r2, #1
   15fc4:	umull	r0, r1, r6, r5
   15fc8:	mla	r1, r6, r4, r1
   15fcc:	cmp	r2, #0
   15fd0:	mov	r3, r2
   15fd4:	mla	r7, r7, r5, r1
   15fd8:	mvnne	r0, #0
   15fdc:	mvnne	r7, #0
   15fe0:	mov	r6, r0
   15fe4:	b	167c8 <__assert_fail@plt+0x5428>
   15fe8:	mvn	r0, #0
   15fec:	mvn	r1, #0
   15ff0:	mov	r2, r5
   15ff4:	str	r3, [sp, #24]
   15ff8:	bl	16fc4 <__assert_fail@plt+0x5c24>
   15ffc:	subs	r3, r0, r6
   16000:	mov	ip, r0
   16004:	umull	r4, r0, r6, r5
   16008:	mov	sl, #0
   1600c:	sbcs	r3, r1, r7
   16010:	str	r0, [sp, #20]
   16014:	ldr	r0, [sp, #24]
   16018:	mov	r3, #0
   1601c:	movwcc	r3, #1
   16020:	cmp	r3, #0
   16024:	mvnne	r4, #0
   16028:	cmp	r3, #0
   1602c:	umull	lr, r2, r4, r5
   16030:	mla	r2, r4, r0, r2
   16034:	str	r2, [sp, #16]
   16038:	ldr	r2, [sp, #20]
   1603c:	mla	r6, r6, r0, r2
   16040:	ldr	r0, [sp, #16]
   16044:	mla	r6, r7, r5, r6
   16048:	mvnne	r6, #0
   1604c:	mla	r7, r6, r5, r0
   16050:	subs	r0, ip, r4
   16054:	sbcs	r0, r1, r6
   16058:	movwcc	sl, #1
   1605c:	cmp	sl, #0
   16060:	orr	r3, r3, sl
   16064:	mvnne	lr, #0
   16068:	mvnne	r7, #0
   1606c:	mov	r6, lr
   16070:	b	167c8 <__assert_fail@plt+0x5428>
   16074:	mvn	r0, #0
   16078:	mvn	r1, #0
   1607c:	mov	r2, r5
   16080:	mov	sl, r3
   16084:	bl	16fc4 <__assert_fail@plt+0x5c24>
   16088:	subs	r3, r0, r6
   1608c:	mov	ip, r1
   16090:	umull	r2, lr, r6, r5
   16094:	str	r0, [sp, #20]
   16098:	sbcs	r3, r1, r7
   1609c:	mov	r1, #0
   160a0:	mla	r6, r6, sl, lr
   160a4:	mov	lr, #0
   160a8:	str	ip, [sp, #16]
   160ac:	movwcc	r1, #1
   160b0:	mla	r7, r7, r5, r6
   160b4:	cmp	r1, #0
   160b8:	mvnne	r2, #0
   160bc:	cmp	r1, #0
   160c0:	umull	r3, r4, r2, r5
   160c4:	mvnne	r7, #0
   160c8:	mla	r4, r2, sl, r4
   160cc:	subs	r2, r0, r2
   160d0:	sbcs	r2, ip, r7
   160d4:	mla	r4, r7, r5, r4
   160d8:	movwcc	lr, #1
   160dc:	mov	r2, #0
   160e0:	cmp	lr, #0
   160e4:	mvnne	r3, #0
   160e8:	mvnne	r4, #0
   160ec:	subs	r7, r0, r3
   160f0:	mov	r0, r5
   160f4:	sbcs	r7, ip, r4
   160f8:	movwcc	r2, #1
   160fc:	umull	r5, r7, r3, r5
   16100:	cmp	r2, #0
   16104:	mla	r3, r3, sl, r7
   16108:	mvnne	r5, #0
   1610c:	mla	r3, r4, r0, r3
   16110:	cmp	r2, #0
   16114:	umull	r6, ip, r5, r0
   16118:	mvnne	r3, #0
   1611c:	mla	ip, r5, sl, ip
   16120:	mla	r7, r3, r0, ip
   16124:	ldr	r0, [sp, #20]
   16128:	subs	r0, r0, r5
   1612c:	ldr	r0, [sp, #16]
   16130:	sbcs	r0, r0, r3
   16134:	mov	r0, #0
   16138:	movwcc	r0, #1
   1613c:	cmp	r0, #0
   16140:	mov	r3, r0
   16144:	orr	r0, r1, lr
   16148:	orr	r0, r0, r2
   1614c:	mvnne	r7, #0
   16150:	mvnne	r6, #0
   16154:	orr	r3, r0, r3
   16158:	b	167c8 <__assert_fail@plt+0x5428>
   1615c:	mvn	r0, #0
   16160:	mvn	r1, #0
   16164:	mov	r2, r5
   16168:	mov	r4, r3
   1616c:	str	r3, [sp, #24]
   16170:	bl	16fc4 <__assert_fail@plt+0x5c24>
   16174:	umull	r3, r2, r6, r5
   16178:	mla	r2, r6, r4, r2
   1617c:	subs	r6, r0, r6
   16180:	sbcs	r6, r1, r7
   16184:	mla	r2, r7, r5, r2
   16188:	mov	r7, #0
   1618c:	mov	r6, #0
   16190:	movwcc	r6, #1
   16194:	cmp	r6, #0
   16198:	str	r6, [sp, #20]
   1619c:	mvnne	r3, #0
   161a0:	mvnne	r2, #0
   161a4:	subs	r4, r0, r3
   161a8:	umull	r6, ip, r3, r5
   161ac:	sbcs	r4, r1, r2
   161b0:	ldr	r4, [sp, #24]
   161b4:	movwcc	r7, #1
   161b8:	cmp	r7, #0
   161bc:	mov	lr, r7
   161c0:	str	r7, [sp, #16]
   161c4:	mvnne	r6, #0
   161c8:	cmp	lr, #0
   161cc:	mov	lr, #0
   161d0:	umull	sl, r7, r6, r5
   161d4:	mla	r3, r3, r4, ip
   161d8:	mla	r7, r6, r4, r7
   161dc:	mov	r4, r0
   161e0:	mla	r2, r2, r5, r3
   161e4:	mvnne	r2, #0
   161e8:	subs	r3, r0, r6
   161ec:	mov	r0, #0
   161f0:	mla	r7, r2, r5, r7
   161f4:	sbcs	r2, r1, r2
   161f8:	mov	r3, r4
   161fc:	movwcc	r0, #1
   16200:	str	r3, [sp, #4]
   16204:	cmp	r0, #0
   16208:	str	r0, [sp, #12]
   1620c:	mov	r0, r1
   16210:	mvnne	sl, #0
   16214:	mvnne	r7, #0
   16218:	str	r0, [sp, #8]
   1621c:	subs	r2, r4, sl
   16220:	ldr	r4, [sp, #24]
   16224:	sbcs	r2, r1, r7
   16228:	movwcc	lr, #1
   1622c:	umull	r6, r2, sl, r5
   16230:	cmp	lr, #0
   16234:	mvnne	r6, #0
   16238:	mla	r2, sl, r4, r2
   1623c:	cmp	lr, #0
   16240:	umull	r1, ip, r6, r5
   16244:	mla	r2, r7, r5, r2
   16248:	mla	ip, r6, r4, ip
   1624c:	mvnne	r2, #0
   16250:	subs	r6, r3, r6
   16254:	mla	r7, r2, r5, ip
   16258:	sbcs	r2, r0, r2
   1625c:	mov	ip, #0
   16260:	movwcc	ip, #1
   16264:	mov	r2, #0
   16268:	cmp	ip, #0
   1626c:	mvnne	r1, #0
   16270:	mvnne	r7, #0
   16274:	subs	r6, r3, r1
   16278:	ldr	r3, [sp, #24]
   1627c:	sbcs	r6, r0, r7
   16280:	umull	r0, sl, r1, r5
   16284:	movwcc	r2, #1
   16288:	cmp	r2, #0
   1628c:	mvnne	r0, #0
   16290:	mla	r1, r1, r3, sl
   16294:	cmp	r2, #0
   16298:	umull	r6, r4, r0, r5
   1629c:	mla	r1, r7, r5, r1
   162a0:	mla	r4, r0, r3, r4
   162a4:	ldr	r3, [sp, #4]
   162a8:	mvnne	r1, #0
   162ac:	mla	r7, r1, r5, r4
   162b0:	ldr	r5, [sp, #16]
   162b4:	subs	r0, r3, r0
   162b8:	ldr	r0, [sp, #8]
   162bc:	sbcs	r0, r0, r1
   162c0:	mov	r0, #0
   162c4:	movwcc	r0, #1
   162c8:	cmp	r0, #0
   162cc:	mov	r1, r0
   162d0:	ldr	r0, [sp, #20]
   162d4:	mvnne	r7, #0
   162d8:	mvnne	r6, #0
   162dc:	orr	r0, r0, r5
   162e0:	ldr	r5, [sp, #12]
   162e4:	orr	r0, r0, r5
   162e8:	orr	r0, r0, lr
   162ec:	orr	r0, r0, ip
   162f0:	orr	r0, r0, r2
   162f4:	b	16764 <__assert_fail@plt+0x53c4>
   162f8:	mov	r1, #0
   162fc:	lsl	r2, r7, #10
   16300:	lsl	r0, r6, #10
   16304:	lsr	r3, r7, #22
   16308:	cmp	r1, r7, lsr #22
   1630c:	orr	r2, r2, r6, lsr #22
   16310:	mvnne	r0, #0
   16314:	movwne	r3, #1
   16318:	cmp	r1, r7, lsr #22
   1631c:	b	16794 <__assert_fail@plt+0x53f4>
   16320:	mvn	r0, #0
   16324:	mvn	r1, #0
   16328:	mov	r2, r5
   1632c:	mov	sl, r3
   16330:	bl	16fc4 <__assert_fail@plt+0x5c24>
   16334:	subs	r2, r0, r6
   16338:	mov	ip, r0
   1633c:	mov	r0, #0
   16340:	sbcs	r2, r1, r7
   16344:	movwcc	r0, #1
   16348:	umull	r4, r2, r6, r5
   1634c:	cmp	r0, #0
   16350:	mla	r2, r6, sl, r2
   16354:	str	r0, [sp, #20]
   16358:	mvnne	r4, #0
   1635c:	cmp	r0, #0
   16360:	mla	r2, r7, r5, r2
   16364:	mov	r0, #0
   16368:	umull	lr, r3, r4, r5
   1636c:	mvnne	r2, #0
   16370:	mla	r3, r4, sl, r3
   16374:	mla	r6, r2, r5, r3
   16378:	subs	r3, ip, r4
   1637c:	sbcs	r2, r1, r2
   16380:	mov	r3, r1
   16384:	movwcc	r0, #1
   16388:	str	r3, [sp, #8]
   1638c:	cmp	r0, #0
   16390:	str	r0, [sp, #16]
   16394:	mov	r0, ip
   16398:	mvnne	lr, #0
   1639c:	mvnne	r6, #0
   163a0:	str	r0, [sp, #12]
   163a4:	subs	r2, ip, lr
   163a8:	umull	r7, r4, lr, r5
   163ac:	sbcs	r2, r1, r6
   163b0:	mla	r4, lr, sl, r4
   163b4:	mov	r2, #0
   163b8:	mla	r6, r6, r5, r4
   163bc:	mov	r4, #0
   163c0:	movwcc	r2, #1
   163c4:	cmp	r2, #0
   163c8:	mvnne	r7, #0
   163cc:	cmp	r2, #0
   163d0:	umull	r1, ip, r7, r5
   163d4:	mvnne	r6, #0
   163d8:	mla	ip, r7, sl, ip
   163dc:	subs	r7, r0, r7
   163e0:	mla	lr, r6, r5, ip
   163e4:	sbcs	r7, r3, r6
   163e8:	mov	ip, #0
   163ec:	movwcc	ip, #1
   163f0:	cmp	ip, #0
   163f4:	mvnne	r1, #0
   163f8:	mvnne	lr, #0
   163fc:	subs	r7, r0, r1
   16400:	sbcs	r7, r3, lr
   16404:	movwcc	r4, #1
   16408:	umull	r0, r7, r1, r5
   1640c:	cmp	r4, #0
   16410:	mla	r1, r1, sl, r7
   16414:	mvnne	r0, #0
   16418:	mla	r1, lr, r5, r1
   1641c:	cmp	r4, #0
   16420:	umull	r6, r3, r0, r5
   16424:	mvnne	r1, #0
   16428:	mla	r3, r0, sl, r3
   1642c:	mla	r7, r1, r5, r3
   16430:	ldr	r3, [sp, #12]
   16434:	subs	r0, r3, r0
   16438:	ldr	r3, [sp, #16]
   1643c:	ldr	r0, [sp, #8]
   16440:	sbcs	r0, r0, r1
   16444:	mov	r0, #0
   16448:	movwcc	r0, #1
   1644c:	cmp	r0, #0
   16450:	mov	r1, r0
   16454:	ldr	r0, [sp, #20]
   16458:	mvnne	r7, #0
   1645c:	mvnne	r6, #0
   16460:	orr	r0, r0, r3
   16464:	orr	r0, r0, r2
   16468:	orr	r0, r0, ip
   1646c:	orr	r0, r0, r4
   16470:	b	16594 <__assert_fail@plt+0x51f4>
   16474:	mvn	r0, #0
   16478:	mvn	r1, #0
   1647c:	mov	r2, r5
   16480:	mov	sl, r3
   16484:	bl	16fc4 <__assert_fail@plt+0x5c24>
   16488:	umull	r3, r2, r6, r5
   1648c:	mov	lr, r1
   16490:	mov	r1, r0
   16494:	mla	r2, r6, sl, r2
   16498:	subs	r6, r0, r6
   1649c:	mov	r0, #0
   164a0:	sbcs	r6, lr, r7
   164a4:	mla	r2, r7, r5, r2
   164a8:	movwcc	r0, #1
   164ac:	cmp	r0, #0
   164b0:	str	r0, [sp, #20]
   164b4:	mov	r0, r1
   164b8:	mvnne	r3, #0
   164bc:	mvnne	r2, #0
   164c0:	str	r0, [sp, #16]
   164c4:	subs	r4, r1, r3
   164c8:	umull	r7, ip, r3, r5
   164cc:	sbcs	r4, lr, r2
   164d0:	mla	r3, r3, sl, ip
   164d4:	mov	ip, #0
   164d8:	mov	r4, #0
   164dc:	mla	r2, r2, r5, r3
   164e0:	movwcc	r4, #1
   164e4:	cmp	r4, #0
   164e8:	mvnne	r7, #0
   164ec:	cmp	r4, #0
   164f0:	umull	r1, r6, r7, r5
   164f4:	mvnne	r2, #0
   164f8:	mla	r6, r7, sl, r6
   164fc:	mla	r3, r2, r5, r6
   16500:	subs	r6, r0, r7
   16504:	sbcs	r2, lr, r2
   16508:	movwcc	ip, #1
   1650c:	mov	r2, #0
   16510:	cmp	ip, #0
   16514:	mvnne	r1, #0
   16518:	mvnne	r3, #0
   1651c:	subs	r6, r0, r1
   16520:	sbcs	r6, lr, r3
   16524:	movwcc	r2, #1
   16528:	umull	r0, r6, r1, r5
   1652c:	cmp	r2, #0
   16530:	str	r6, [sp, #12]
   16534:	mvnne	r0, #0
   16538:	cmp	r2, #0
   1653c:	umull	r6, r7, r0, r5
   16540:	mla	r7, r0, sl, r7
   16544:	str	r7, [sp, #8]
   16548:	ldr	r7, [sp, #12]
   1654c:	mla	r1, r1, sl, r7
   16550:	mla	r1, r3, r5, r1
   16554:	ldr	r3, [sp, #8]
   16558:	mvnne	r1, #0
   1655c:	mla	r7, r1, r5, r3
   16560:	ldr	r3, [sp, #16]
   16564:	subs	r0, r3, r0
   16568:	sbcs	r0, lr, r1
   1656c:	mov	r0, #0
   16570:	movwcc	r0, #1
   16574:	cmp	r0, #0
   16578:	mov	r1, r0
   1657c:	ldr	r0, [sp, #20]
   16580:	mvnne	r7, #0
   16584:	mvnne	r6, #0
   16588:	orr	r0, r0, r4
   1658c:	orr	r0, r0, ip
   16590:	orr	r0, r0, r2
   16594:	orr	r3, r0, r1
   16598:	b	167c8 <__assert_fail@plt+0x5428>
   1659c:	mvn	r0, #0
   165a0:	mvn	r1, #0
   165a4:	mov	r2, r5
   165a8:	mov	sl, r3
   165ac:	bl	16fc4 <__assert_fail@plt+0x5c24>
   165b0:	mov	ip, r1
   165b4:	subs	r1, r0, r6
   165b8:	umull	r3, lr, r6, r5
   165bc:	mov	r2, r5
   165c0:	sbcs	r1, ip, r7
   165c4:	mla	r6, r6, sl, lr
   165c8:	str	ip, [sp, #4]
   165cc:	mov	r1, #0
   165d0:	mla	r7, r7, r2, r6
   165d4:	movwcc	r1, #1
   165d8:	cmp	r1, #0
   165dc:	str	r1, [sp, #20]
   165e0:	mvnne	r3, #0
   165e4:	cmp	r1, #0
   165e8:	mov	r1, r0
   165ec:	umull	r4, r5, r3, r5
   165f0:	mvnne	r7, #0
   165f4:	mov	lr, r1
   165f8:	mla	r5, r3, sl, r5
   165fc:	subs	r3, r0, r3
   16600:	sbcs	r0, ip, r7
   16604:	mla	r5, r7, r2, r5
   16608:	mov	r0, #0
   1660c:	movwcc	r0, #1
   16610:	cmp	r0, #0
   16614:	str	r0, [sp, #16]
   16618:	mvnne	r4, #0
   1661c:	mvnne	r5, #0
   16620:	subs	r0, r1, r4
   16624:	mov	r1, #0
   16628:	sbcs	r0, ip, r5
   1662c:	movwcc	r1, #1
   16630:	umull	r3, r0, r4, r2
   16634:	cmp	r1, #0
   16638:	mla	r0, r4, sl, r0
   1663c:	mov	r4, lr
   16640:	str	r1, [sp, #12]
   16644:	mvnne	r3, #0
   16648:	mla	r0, r5, r2, r0
   1664c:	cmp	r1, #0
   16650:	str	r4, [sp]
   16654:	umull	r7, r6, r3, r2
   16658:	mvnne	r0, #0
   1665c:	mla	r6, r3, sl, r6
   16660:	subs	r3, lr, r3
   16664:	mla	r5, r0, r2, r6
   16668:	sbcs	r0, ip, r0
   1666c:	mov	r3, #0
   16670:	mov	r0, #0
   16674:	movwcc	r0, #1
   16678:	cmp	r0, #0
   1667c:	str	r0, [sp, #8]
   16680:	mvnne	r7, #0
   16684:	mvnne	r5, #0
   16688:	subs	r0, lr, r7
   1668c:	sbcs	r0, ip, r5
   16690:	movwcc	r3, #1
   16694:	umull	r6, r0, r7, r2
   16698:	cmp	r3, #0
   1669c:	mla	r7, r7, sl, r0
   166a0:	mov	r0, ip
   166a4:	mvnne	r6, #0
   166a8:	mla	r7, r5, r2, r7
   166ac:	cmp	r3, #0
   166b0:	mov	r5, #0
   166b4:	umull	r1, lr, r6, r2
   166b8:	mvnne	r7, #0
   166bc:	mla	lr, r6, sl, lr
   166c0:	subs	r6, r4, r6
   166c4:	mla	lr, r7, r2, lr
   166c8:	sbcs	r7, ip, r7
   166cc:	mov	ip, #0
   166d0:	movwcc	ip, #1
   166d4:	cmp	ip, #0
   166d8:	mvnne	r1, #0
   166dc:	mvnne	lr, #0
   166e0:	subs	r7, r4, r1
   166e4:	sbcs	r7, r0, lr
   166e8:	movwcc	r5, #1
   166ec:	umull	r0, r7, r1, r2
   166f0:	cmp	r5, #0
   166f4:	mla	r1, r1, sl, r7
   166f8:	mvnne	r0, #0
   166fc:	mla	r1, lr, r2, r1
   16700:	cmp	r5, #0
   16704:	umull	r6, r4, r0, r2
   16708:	mvnne	r1, #0
   1670c:	mla	r4, r0, sl, r4
   16710:	mla	r7, r1, r2, r4
   16714:	ldr	r2, [sp]
   16718:	subs	r0, r2, r0
   1671c:	ldr	r2, [sp, #16]
   16720:	ldr	r0, [sp, #4]
   16724:	sbcs	r0, r0, r1
   16728:	mov	r0, #0
   1672c:	movwcc	r0, #1
   16730:	cmp	r0, #0
   16734:	mov	r1, r0
   16738:	ldr	r0, [sp, #20]
   1673c:	mvnne	r7, #0
   16740:	mvnne	r6, #0
   16744:	orr	r0, r0, r2
   16748:	ldr	r2, [sp, #12]
   1674c:	orr	r0, r0, r2
   16750:	ldr	r2, [sp, #8]
   16754:	orr	r0, r0, r2
   16758:	orr	r0, r0, r3
   1675c:	orr	r0, r0, ip
   16760:	orr	r0, r0, r5
   16764:	orr	r0, r0, r1
   16768:	and	r3, r0, #1
   1676c:	b	167c8 <__assert_fail@plt+0x5428>
   16770:	mov	r1, #0
   16774:	lsl	r2, r7, #9
   16778:	lsl	r0, r6, #9
   1677c:	lsr	r3, r7, #23
   16780:	cmp	r1, r7, lsr #23
   16784:	orr	r2, r2, r6, lsr #23
   16788:	mvnne	r0, #0
   1678c:	movwne	r3, #1
   16790:	cmp	r1, r7, lsr #23
   16794:	mvnne	r2, #0
   16798:	mov	r6, r0
   1679c:	mov	r7, r2
   167a0:	b	167c8 <__assert_fail@plt+0x5428>
   167a4:	lsl	r1, r7, #1
   167a8:	lsl	r0, r6, #1
   167ac:	cmp	r7, #0
   167b0:	lsr	r3, r7, #31
   167b4:	orr	r1, r1, r6, lsr #31
   167b8:	mvnlt	r0, #0
   167bc:	mvnlt	r1, #0
   167c0:	mov	r6, r0
   167c4:	mov	r7, r1
   167c8:	ldr	r1, [sp, #32]
   167cc:	ldr	r2, [sp, #28]
   167d0:	orr	r8, r3, r8
   167d4:	add	r0, r1, r2
   167d8:	str	r0, [r9]
   167dc:	ldrb	r0, [r1, r2]
   167e0:	cmp	r0, #0
   167e4:	orrne	r8, r8, #2
   167e8:	ldr	r0, [sp, #36]	; 0x24
   167ec:	strd	r6, [r0]
   167f0:	mov	r0, r8
   167f4:	sub	sp, fp, #28
   167f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167fc:	movw	r0, #31717	; 0x7be5
   16800:	movw	r1, #31755	; 0x7c0b
   16804:	movw	r3, #31852	; 0x7c6c
   16808:	mov	r2, #85	; 0x55
   1680c:	movt	r0, #1
   16810:	movt	r1, #1
   16814:	movt	r3, #1
   16818:	bl	113a0 <__assert_fail@plt>
   1681c:	clz	r2, r1
   16820:	clz	r3, r0
   16824:	lsr	r2, r2, #5
   16828:	lsr	r3, r3, #5
   1682c:	orrs	r2, r3, r2
   16830:	movwne	r1, #1
   16834:	movwne	r0, #1
   16838:	cmp	r1, #0
   1683c:	beq	1686c <__assert_fail@plt+0x54cc>
   16840:	mvn	r2, #-2147483648	; 0x80000000
   16844:	udiv	r2, r2, r1
   16848:	cmp	r2, r0
   1684c:	bcs	1686c <__assert_fail@plt+0x54cc>
   16850:	push	{fp, lr}
   16854:	mov	fp, sp
   16858:	bl	11298 <__errno_location@plt>
   1685c:	mov	r1, #12
   16860:	str	r1, [r0]
   16864:	mov	r0, #0
   16868:	pop	{fp, pc}
   1686c:	b	110b8 <calloc@plt>
   16870:	cmp	r0, #0
   16874:	movweq	r0, #1
   16878:	cmn	r0, #1
   1687c:	ble	16884 <__assert_fail@plt+0x54e4>
   16880:	b	11220 <malloc@plt>
   16884:	push	{fp, lr}
   16888:	mov	fp, sp
   1688c:	bl	11298 <__errno_location@plt>
   16890:	mov	r1, #12
   16894:	str	r1, [r0]
   16898:	mov	r0, #0
   1689c:	pop	{fp, pc}
   168a0:	push	{fp, lr}
   168a4:	mov	fp, sp
   168a8:	cmp	r0, #0
   168ac:	beq	168c8 <__assert_fail@plt+0x5528>
   168b0:	cmp	r1, #0
   168b4:	beq	168d4 <__assert_fail@plt+0x5534>
   168b8:	cmn	r1, #1
   168bc:	ble	168e0 <__assert_fail@plt+0x5540>
   168c0:	pop	{fp, lr}
   168c4:	b	11178 <realloc@plt>
   168c8:	mov	r0, r1
   168cc:	pop	{fp, lr}
   168d0:	b	16870 <__assert_fail@plt+0x54d0>
   168d4:	bl	122a4 <__assert_fail@plt+0xf04>
   168d8:	mov	r0, #0
   168dc:	pop	{fp, pc}
   168e0:	bl	11298 <__errno_location@plt>
   168e4:	mov	r1, #12
   168e8:	str	r1, [r0]
   168ec:	mov	r0, #0
   168f0:	pop	{fp, pc}
   168f4:	push	{r4, r5, r6, sl, fp, lr}
   168f8:	add	fp, sp, #16
   168fc:	mov	r4, r0
   16900:	bl	111e4 <__fpending@plt>
   16904:	ldr	r6, [r4]
   16908:	mov	r5, r0
   1690c:	mov	r0, r4
   16910:	bl	16978 <__assert_fail@plt+0x55d8>
   16914:	tst	r6, #32
   16918:	bne	16950 <__assert_fail@plt+0x55b0>
   1691c:	cmp	r0, #0
   16920:	mov	r4, r0
   16924:	mvnne	r4, #0
   16928:	cmp	r5, #0
   1692c:	bne	1695c <__assert_fail@plt+0x55bc>
   16930:	cmp	r0, #0
   16934:	beq	1695c <__assert_fail@plt+0x55bc>
   16938:	bl	11298 <__errno_location@plt>
   1693c:	ldr	r0, [r0]
   16940:	subs	r4, r0, #9
   16944:	mvnne	r4, #0
   16948:	mov	r0, r4
   1694c:	pop	{r4, r5, r6, sl, fp, pc}
   16950:	mvn	r4, #0
   16954:	cmp	r0, #0
   16958:	beq	16964 <__assert_fail@plt+0x55c4>
   1695c:	mov	r0, r4
   16960:	pop	{r4, r5, r6, sl, fp, pc}
   16964:	bl	11298 <__errno_location@plt>
   16968:	mov	r1, #0
   1696c:	str	r1, [r0]
   16970:	mov	r0, r4
   16974:	pop	{r4, r5, r6, sl, fp, pc}
   16978:	push	{r4, r5, r6, sl, fp, lr}
   1697c:	add	fp, sp, #16
   16980:	sub	sp, sp, #8
   16984:	mov	r4, r0
   16988:	bl	112d4 <fileno@plt>
   1698c:	cmn	r0, #1
   16990:	ble	16a04 <__assert_fail@plt+0x5664>
   16994:	mov	r0, r4
   16998:	bl	11238 <__freading@plt>
   1699c:	cmp	r0, #0
   169a0:	beq	169cc <__assert_fail@plt+0x562c>
   169a4:	mov	r0, r4
   169a8:	bl	112d4 <fileno@plt>
   169ac:	mov	r1, #1
   169b0:	mov	r2, #0
   169b4:	mov	r3, #0
   169b8:	str	r1, [sp]
   169bc:	bl	111c0 <lseek64@plt>
   169c0:	and	r0, r0, r1
   169c4:	cmn	r0, #1
   169c8:	beq	16a04 <__assert_fail@plt+0x5664>
   169cc:	mov	r0, r4
   169d0:	bl	16a14 <__assert_fail@plt+0x5674>
   169d4:	cmp	r0, #0
   169d8:	beq	16a04 <__assert_fail@plt+0x5664>
   169dc:	bl	11298 <__errno_location@plt>
   169e0:	ldr	r6, [r0]
   169e4:	mov	r5, r0
   169e8:	mov	r0, r4
   169ec:	bl	112ec <fclose@plt>
   169f0:	cmp	r6, #0
   169f4:	strne	r6, [r5]
   169f8:	mvnne	r0, #0
   169fc:	sub	sp, fp, #16
   16a00:	pop	{r4, r5, r6, sl, fp, pc}
   16a04:	mov	r0, r4
   16a08:	sub	sp, fp, #16
   16a0c:	pop	{r4, r5, r6, sl, fp, lr}
   16a10:	b	112ec <fclose@plt>
   16a14:	push	{r4, sl, fp, lr}
   16a18:	add	fp, sp, #8
   16a1c:	sub	sp, sp, #8
   16a20:	mov	r4, r0
   16a24:	cmp	r0, #0
   16a28:	beq	16a44 <__assert_fail@plt+0x56a4>
   16a2c:	mov	r0, r4
   16a30:	bl	11238 <__freading@plt>
   16a34:	cmp	r0, #0
   16a38:	ldrbne	r0, [r4, #1]
   16a3c:	tstne	r0, #1
   16a40:	bne	16a54 <__assert_fail@plt+0x56b4>
   16a44:	mov	r0, r4
   16a48:	sub	sp, fp, #8
   16a4c:	pop	{r4, sl, fp, lr}
   16a50:	b	1110c <fflush@plt>
   16a54:	mov	r0, #1
   16a58:	mov	r2, #0
   16a5c:	mov	r3, #0
   16a60:	str	r0, [sp]
   16a64:	mov	r0, r4
   16a68:	bl	16a7c <__assert_fail@plt+0x56dc>
   16a6c:	mov	r0, r4
   16a70:	sub	sp, fp, #8
   16a74:	pop	{r4, sl, fp, lr}
   16a78:	b	1110c <fflush@plt>
   16a7c:	push	{r4, r5, r6, r7, fp, lr}
   16a80:	add	fp, sp, #16
   16a84:	sub	sp, sp, #8
   16a88:	mov	r4, r0
   16a8c:	ldr	r0, [r0, #4]
   16a90:	mov	r5, r3
   16a94:	mov	r6, r2
   16a98:	ldr	r1, [r4, #8]
   16a9c:	cmp	r1, r0
   16aa0:	bne	16abc <__assert_fail@plt+0x571c>
   16aa4:	ldrd	r0, [r4, #16]
   16aa8:	cmp	r1, r0
   16aac:	bne	16abc <__assert_fail@plt+0x571c>
   16ab0:	ldr	r0, [r4, #36]	; 0x24
   16ab4:	cmp	r0, #0
   16ab8:	beq	16ad4 <__assert_fail@plt+0x5734>
   16abc:	mov	r0, r4
   16ac0:	mov	r2, r6
   16ac4:	mov	r3, r5
   16ac8:	sub	sp, fp, #16
   16acc:	pop	{r4, r5, r6, r7, fp, lr}
   16ad0:	b	112f8 <fseeko64@plt>
   16ad4:	ldr	r7, [fp, #8]
   16ad8:	mov	r0, r4
   16adc:	bl	112d4 <fileno@plt>
   16ae0:	mov	r2, r6
   16ae4:	mov	r3, r5
   16ae8:	str	r7, [sp]
   16aec:	bl	111c0 <lseek64@plt>
   16af0:	and	r2, r0, r1
   16af4:	cmn	r2, #1
   16af8:	mvneq	r0, #0
   16afc:	subeq	sp, fp, #16
   16b00:	popeq	{r4, r5, r6, r7, fp, pc}
   16b04:	strd	r0, [r4, #80]	; 0x50
   16b08:	ldr	r0, [r4]
   16b0c:	bic	r0, r0, #16
   16b10:	str	r0, [r4]
   16b14:	mov	r0, #0
   16b18:	sub	sp, fp, #16
   16b1c:	pop	{r4, r5, r6, r7, fp, pc}
   16b20:	push	{r4, r5, r6, sl, fp, lr}
   16b24:	add	fp, sp, #16
   16b28:	mov	r5, r0
   16b2c:	mov	r0, #0
   16b30:	mov	r4, r1
   16b34:	add	r6, r2, #19
   16b38:	strb	r0, [r2, #20]
   16b3c:	mov	r0, r5
   16b40:	mov	r1, r4
   16b44:	mov	r2, #10
   16b48:	mov	r3, #0
   16b4c:	bl	16fc4 <__assert_fail@plt+0x5c24>
   16b50:	add	r2, r0, r0, lsl #2
   16b54:	sub	r2, r5, r2, lsl #1
   16b58:	orr	r2, r2, #48	; 0x30
   16b5c:	strb	r2, [r6], #-1
   16b60:	rsbs	r2, r5, #9
   16b64:	mov	r5, r0
   16b68:	rscs	r2, r4, #0
   16b6c:	mov	r4, r1
   16b70:	bcc	16b3c <__assert_fail@plt+0x579c>
   16b74:	add	r0, r6, #1
   16b78:	pop	{r4, r5, r6, sl, fp, pc}
   16b7c:	push	{fp, lr}
   16b80:	mov	fp, sp
   16b84:	mov	r0, #14
   16b88:	bl	11334 <nl_langinfo@plt>
   16b8c:	movw	r1, #29276	; 0x725c
   16b90:	cmp	r0, #0
   16b94:	movt	r1, #1
   16b98:	movne	r1, r0
   16b9c:	movw	r0, #31931	; 0x7cbb
   16ba0:	ldrb	r2, [r1]
   16ba4:	movt	r0, #1
   16ba8:	cmp	r2, #0
   16bac:	movne	r0, r1
   16bb0:	pop	{fp, pc}
   16bb4:	push	{r4, r5, r6, r7, fp, lr}
   16bb8:	add	fp, sp, #16
   16bbc:	sub	sp, sp, #8
   16bc0:	add	r5, sp, #4
   16bc4:	cmp	r0, #0
   16bc8:	mov	r7, r2
   16bcc:	mov	r4, r1
   16bd0:	movne	r5, r0
   16bd4:	mov	r0, r5
   16bd8:	bl	111f0 <mbrtowc@plt>
   16bdc:	mov	r6, r0
   16be0:	cmp	r7, #0
   16be4:	beq	16c08 <__assert_fail@plt+0x5868>
   16be8:	cmn	r6, #2
   16bec:	bcc	16c08 <__assert_fail@plt+0x5868>
   16bf0:	mov	r0, #0
   16bf4:	bl	16ebc <__assert_fail@plt+0x5b1c>
   16bf8:	cmp	r0, #0
   16bfc:	ldrbeq	r0, [r4]
   16c00:	moveq	r6, #1
   16c04:	streq	r0, [r5]
   16c08:	mov	r0, r6
   16c0c:	sub	sp, fp, #16
   16c10:	pop	{r4, r5, r6, r7, fp, pc}
   16c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c18:	add	fp, sp, #28
   16c1c:	sub	sp, sp, #12
   16c20:	mov	sl, r2
   16c24:	mov	r6, r1
   16c28:	cmp	r0, #0
   16c2c:	beq	16cd8 <__assert_fail@plt+0x5938>
   16c30:	mov	r7, r0
   16c34:	mov	r8, #10
   16c38:	mov	r0, #0
   16c3c:	mov	r1, #40	; 0x28
   16c40:	str	r8, [sp, #8]
   16c44:	bl	168a0 <__assert_fail@plt+0x5500>
   16c48:	mvn	r9, #0
   16c4c:	cmp	r0, #0
   16c50:	beq	16d84 <__assert_fail@plt+0x59e4>
   16c54:	str	sl, [sp, #4]
   16c58:	mov	r5, r0
   16c5c:	add	sl, sp, #8
   16c60:	b	16c6c <__assert_fail@plt+0x58cc>
   16c64:	ldr	r8, [sp, #8]
   16c68:	mov	r5, r0
   16c6c:	mov	r0, r7
   16c70:	mov	r1, r6
   16c74:	mov	r2, r5
   16c78:	mov	r3, sl
   16c7c:	bl	112b0 <getgrouplist@plt>
   16c80:	mov	r4, r0
   16c84:	ldr	r0, [sp, #8]
   16c88:	cmn	r4, #1
   16c8c:	bgt	16c9c <__assert_fail@plt+0x58fc>
   16c90:	cmp	r8, r0
   16c94:	lsleq	r0, r8, #1
   16c98:	streq	r0, [sp, #8]
   16c9c:	cmp	r0, #536870912	; 0x20000000
   16ca0:	bcs	16d70 <__assert_fail@plt+0x59d0>
   16ca4:	lsl	r1, r0, #2
   16ca8:	mov	r0, r5
   16cac:	bl	168a0 <__assert_fail@plt+0x5500>
   16cb0:	cmp	r0, #0
   16cb4:	beq	16d7c <__assert_fail@plt+0x59dc>
   16cb8:	cmn	r4, #1
   16cbc:	ble	16c64 <__assert_fail@plt+0x58c4>
   16cc0:	ldr	r1, [sp, #4]
   16cc4:	str	r0, [r1]
   16cc8:	ldr	r9, [sp, #8]
   16ccc:	mov	r0, r9
   16cd0:	sub	sp, fp, #28
   16cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd8:	mov	r0, #0
   16cdc:	mov	r1, #0
   16ce0:	bl	1134c <getgroups@plt>
   16ce4:	cmn	r0, #1
   16ce8:	str	r0, [sp, #8]
   16cec:	ble	16d28 <__assert_fail@plt+0x5988>
   16cf0:	mov	r4, r0
   16cf4:	cmn	r6, #1
   16cf8:	bne	16d90 <__assert_fail@plt+0x59f0>
   16cfc:	cmp	r4, #0
   16d00:	beq	16d90 <__assert_fail@plt+0x59f0>
   16d04:	cmp	r4, #536870912	; 0x20000000
   16d08:	bcc	16da0 <__assert_fail@plt+0x5a00>
   16d0c:	bl	11298 <__errno_location@plt>
   16d10:	mov	r1, #12
   16d14:	mvn	r9, #0
   16d18:	str	r1, [r0]
   16d1c:	mov	r0, r9
   16d20:	sub	sp, fp, #28
   16d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d28:	bl	11298 <__errno_location@plt>
   16d2c:	ldr	r0, [r0]
   16d30:	mvn	r9, #0
   16d34:	cmp	r0, #38	; 0x26
   16d38:	bne	16d84 <__assert_fail@plt+0x59e4>
   16d3c:	mov	r0, #0
   16d40:	mov	r1, #4
   16d44:	bl	168a0 <__assert_fail@plt+0x5500>
   16d48:	cmp	r0, #0
   16d4c:	beq	16d84 <__assert_fail@plt+0x59e4>
   16d50:	add	r9, r6, #1
   16d54:	cmn	r6, #1
   16d58:	str	r0, [sl]
   16d5c:	str	r6, [r0]
   16d60:	movwne	r9, #1
   16d64:	mov	r0, r9
   16d68:	sub	sp, fp, #28
   16d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d70:	bl	11298 <__errno_location@plt>
   16d74:	mov	r1, #12
   16d78:	str	r1, [r0]
   16d7c:	mov	r0, r5
   16d80:	bl	122a4 <__assert_fail@plt+0xf04>
   16d84:	mov	r0, r9
   16d88:	sub	sp, fp, #28
   16d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d90:	add	r4, r4, #1
   16d94:	str	r4, [sp, #8]
   16d98:	cmp	r4, #536870912	; 0x20000000
   16d9c:	bcs	16d0c <__assert_fail@plt+0x596c>
   16da0:	lsl	r1, r4, #2
   16da4:	mov	r0, #0
   16da8:	bl	168a0 <__assert_fail@plt+0x5500>
   16dac:	mvn	r9, #0
   16db0:	cmp	r0, #0
   16db4:	beq	16d84 <__assert_fail@plt+0x59e4>
   16db8:	add	r1, r6, #1
   16dbc:	cmn	r6, #1
   16dc0:	mov	r7, r0
   16dc4:	movwne	r1, #1
   16dc8:	sub	r0, r4, r1
   16dcc:	add	r1, r7, r1, lsl #2
   16dd0:	bl	1134c <getgroups@plt>
   16dd4:	cmn	r0, #1
   16dd8:	ble	16e4c <__assert_fail@plt+0x5aac>
   16ddc:	cmn	r6, #1
   16de0:	addne	r0, r0, #1
   16de4:	strne	r6, [r7]
   16de8:	str	r7, [sl]
   16dec:	cmp	r0, #2
   16df0:	blt	16e60 <__assert_fail@plt+0x5ac0>
   16df4:	mov	r2, r7
   16df8:	add	r1, r7, r0, lsl #2
   16dfc:	ldr	r6, [r2], #4
   16e00:	cmp	r1, r2
   16e04:	bls	16e70 <__assert_fail@plt+0x5ad0>
   16e08:	mov	r3, r6
   16e0c:	mov	r9, r0
   16e10:	ldr	r0, [r2]
   16e14:	cmp	r0, r6
   16e18:	cmpne	r0, r3
   16e1c:	bne	16e34 <__assert_fail@plt+0x5a94>
   16e20:	sub	r9, r9, #1
   16e24:	add	r2, r2, #4
   16e28:	cmp	r2, r1
   16e2c:	bcc	16e10 <__assert_fail@plt+0x5a70>
   16e30:	b	16d84 <__assert_fail@plt+0x59e4>
   16e34:	str	r0, [r7, #4]!
   16e38:	mov	r3, r0
   16e3c:	add	r2, r2, #4
   16e40:	cmp	r2, r1
   16e44:	bcc	16e10 <__assert_fail@plt+0x5a70>
   16e48:	b	16d84 <__assert_fail@plt+0x59e4>
   16e4c:	mov	r0, r7
   16e50:	bl	122a4 <__assert_fail@plt+0xf04>
   16e54:	mov	r0, r9
   16e58:	sub	sp, fp, #28
   16e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e60:	mov	r9, r0
   16e64:	mov	r0, r9
   16e68:	sub	sp, fp, #28
   16e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e70:	mov	r9, r0
   16e74:	mov	r0, r9
   16e78:	sub	sp, fp, #28
   16e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e80:	cmp	r2, #0
   16e84:	beq	16eb4 <__assert_fail@plt+0x5b14>
   16e88:	mvn	r3, #0
   16e8c:	udiv	r3, r3, r2
   16e90:	cmp	r3, r1
   16e94:	bcs	16eb4 <__assert_fail@plt+0x5b14>
   16e98:	push	{fp, lr}
   16e9c:	mov	fp, sp
   16ea0:	bl	11298 <__errno_location@plt>
   16ea4:	mov	r1, #12
   16ea8:	str	r1, [r0]
   16eac:	mov	r0, #0
   16eb0:	pop	{fp, pc}
   16eb4:	mul	r1, r2, r1
   16eb8:	b	168a0 <__assert_fail@plt+0x5500>
   16ebc:	push	{r4, sl, fp, lr}
   16ec0:	add	fp, sp, #8
   16ec4:	sub	sp, sp, #264	; 0x108
   16ec8:	add	r1, sp, #7
   16ecc:	movw	r2, #257	; 0x101
   16ed0:	bl	16f20 <__assert_fail@plt+0x5b80>
   16ed4:	mov	r4, #0
   16ed8:	cmp	r0, #0
   16edc:	bne	16f14 <__assert_fail@plt+0x5b74>
   16ee0:	movw	r1, #31937	; 0x7cc1
   16ee4:	add	r0, sp, #7
   16ee8:	movt	r1, #1
   16eec:	bl	110f4 <strcmp@plt>
   16ef0:	cmp	r0, #0
   16ef4:	beq	16f14 <__assert_fail@plt+0x5b74>
   16ef8:	movw	r1, #31939	; 0x7cc3
   16efc:	add	r0, sp, #7
   16f00:	movt	r1, #1
   16f04:	bl	110f4 <strcmp@plt>
   16f08:	mov	r4, r0
   16f0c:	cmp	r0, #0
   16f10:	movwne	r4, #1
   16f14:	mov	r0, r4
   16f18:	sub	sp, fp, #8
   16f1c:	pop	{r4, sl, fp, pc}
   16f20:	push	{r4, r5, r6, r7, fp, lr}
   16f24:	add	fp, sp, #16
   16f28:	mov	r4, r1
   16f2c:	mov	r1, #0
   16f30:	mov	r6, r2
   16f34:	bl	11310 <setlocale@plt>
   16f38:	cmp	r0, #0
   16f3c:	beq	16f6c <__assert_fail@plt+0x5bcc>
   16f40:	mov	r7, r0
   16f44:	bl	11280 <strlen@plt>
   16f48:	cmp	r0, r6
   16f4c:	bcs	16f8c <__assert_fail@plt+0x5bec>
   16f50:	add	r2, r0, #1
   16f54:	mov	r0, r4
   16f58:	mov	r1, r7
   16f5c:	bl	11130 <memcpy@plt>
   16f60:	mov	r5, #0
   16f64:	mov	r0, r5
   16f68:	pop	{r4, r5, r6, r7, fp, pc}
   16f6c:	cmp	r6, #0
   16f70:	mov	r5, #22
   16f74:	movne	r0, #0
   16f78:	strbne	r0, [r4]
   16f7c:	movne	r0, r5
   16f80:	popne	{r4, r5, r6, r7, fp, pc}
   16f84:	mov	r0, r5
   16f88:	pop	{r4, r5, r6, r7, fp, pc}
   16f8c:	mov	r5, #34	; 0x22
   16f90:	cmp	r6, #0
   16f94:	beq	16fb4 <__assert_fail@plt+0x5c14>
   16f98:	sub	r6, r6, #1
   16f9c:	mov	r0, r4
   16fa0:	mov	r1, r7
   16fa4:	mov	r2, r6
   16fa8:	bl	11130 <memcpy@plt>
   16fac:	mov	r0, #0
   16fb0:	strb	r0, [r4, r6]
   16fb4:	mov	r0, r5
   16fb8:	pop	{r4, r5, r6, r7, fp, pc}
   16fbc:	mov	r1, #0
   16fc0:	b	11310 <setlocale@plt>
   16fc4:	cmp	r3, #0
   16fc8:	cmpeq	r2, #0
   16fcc:	bne	16fe4 <__assert_fail@plt+0x5c44>
   16fd0:	cmp	r1, #0
   16fd4:	cmpeq	r0, #0
   16fd8:	mvnne	r1, #0
   16fdc:	mvnne	r0, #0
   16fe0:	b	17000 <__assert_fail@plt+0x5c60>
   16fe4:	sub	sp, sp, #8
   16fe8:	push	{sp, lr}
   16fec:	bl	17010 <__assert_fail@plt+0x5c70>
   16ff0:	ldr	lr, [sp, #4]
   16ff4:	add	sp, sp, #8
   16ff8:	pop	{r2, r3}
   16ffc:	bx	lr
   17000:	push	{r1, lr}
   17004:	mov	r0, #8
   17008:	bl	110dc <raise@plt>
   1700c:	pop	{r1, pc}
   17010:	cmp	r1, r3
   17014:	cmpeq	r0, r2
   17018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1701c:	mov	r4, r0
   17020:	movcc	r0, #0
   17024:	mov	r5, r1
   17028:	ldr	lr, [sp, #36]	; 0x24
   1702c:	movcc	r1, r0
   17030:	bcc	1712c <__assert_fail@plt+0x5d8c>
   17034:	cmp	r3, #0
   17038:	clzeq	ip, r2
   1703c:	clzne	ip, r3
   17040:	addeq	ip, ip, #32
   17044:	cmp	r5, #0
   17048:	clzeq	r1, r4
   1704c:	addeq	r1, r1, #32
   17050:	clzne	r1, r5
   17054:	sub	ip, ip, r1
   17058:	sub	sl, ip, #32
   1705c:	lsl	r9, r3, ip
   17060:	rsb	fp, ip, #32
   17064:	orr	r9, r9, r2, lsl sl
   17068:	orr	r9, r9, r2, lsr fp
   1706c:	lsl	r8, r2, ip
   17070:	cmp	r5, r9
   17074:	cmpeq	r4, r8
   17078:	movcc	r0, #0
   1707c:	movcc	r1, r0
   17080:	bcc	1709c <__assert_fail@plt+0x5cfc>
   17084:	mov	r0, #1
   17088:	subs	r4, r4, r8
   1708c:	lsl	r1, r0, sl
   17090:	orr	r1, r1, r0, lsr fp
   17094:	lsl	r0, r0, ip
   17098:	sbc	r5, r5, r9
   1709c:	cmp	ip, #0
   170a0:	beq	1712c <__assert_fail@plt+0x5d8c>
   170a4:	lsr	r6, r8, #1
   170a8:	orr	r6, r6, r9, lsl #31
   170ac:	lsr	r7, r9, #1
   170b0:	mov	r2, ip
   170b4:	b	170d8 <__assert_fail@plt+0x5d38>
   170b8:	subs	r3, r4, r6
   170bc:	sbc	r8, r5, r7
   170c0:	adds	r3, r3, r3
   170c4:	adc	r8, r8, r8
   170c8:	adds	r4, r3, #1
   170cc:	adc	r5, r8, #0
   170d0:	subs	r2, r2, #1
   170d4:	beq	170f4 <__assert_fail@plt+0x5d54>
   170d8:	cmp	r5, r7
   170dc:	cmpeq	r4, r6
   170e0:	bcs	170b8 <__assert_fail@plt+0x5d18>
   170e4:	adds	r4, r4, r4
   170e8:	adc	r5, r5, r5
   170ec:	subs	r2, r2, #1
   170f0:	bne	170d8 <__assert_fail@plt+0x5d38>
   170f4:	lsr	r3, r4, ip
   170f8:	orr	r3, r3, r5, lsl fp
   170fc:	lsr	r2, r5, ip
   17100:	orr	r3, r3, r5, lsr sl
   17104:	adds	r0, r0, r4
   17108:	mov	r4, r3
   1710c:	lsl	r3, r2, ip
   17110:	orr	r3, r3, r4, lsl sl
   17114:	lsl	ip, r4, ip
   17118:	orr	r3, r3, r4, lsr fp
   1711c:	adc	r1, r1, r5
   17120:	subs	r0, r0, ip
   17124:	mov	r5, r2
   17128:	sbc	r1, r1, r3
   1712c:	cmp	lr, #0
   17130:	strdne	r4, [lr]
   17134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1713c:	mov	r7, r0
   17140:	ldr	r6, [pc, #72]	; 17190 <__assert_fail@plt+0x5df0>
   17144:	ldr	r5, [pc, #72]	; 17194 <__assert_fail@plt+0x5df4>
   17148:	add	r6, pc, r6
   1714c:	add	r5, pc, r5
   17150:	sub	r6, r6, r5
   17154:	mov	r8, r1
   17158:	mov	r9, r2
   1715c:	bl	11098 <calloc@plt-0x20>
   17160:	asrs	r6, r6, #2
   17164:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17168:	mov	r4, #0
   1716c:	add	r4, r4, #1
   17170:	ldr	r3, [r5], #4
   17174:	mov	r2, r9
   17178:	mov	r1, r8
   1717c:	mov	r0, r7
   17180:	blx	r3
   17184:	cmp	r6, r4
   17188:	bne	1716c <__assert_fail@plt+0x5dcc>
   1718c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17190:			; <UNDEFINED> instruction: 0x00010dbc
   17194:			; <UNDEFINED> instruction: 0x00010db4
   17198:	bx	lr
   1719c:	ldr	r3, [pc, #12]	; 171b0 <__assert_fail@plt+0x5e10>
   171a0:	mov	r1, #0
   171a4:	add	r3, pc, r3
   171a8:	ldr	r2, [r3]
   171ac:	b	112a4 <__cxa_atexit@plt>
   171b0:	andeq	r0, r1, r8, ror #30

Disassembly of section .fini:

000171b4 <.fini>:
   171b4:	push	{r3, lr}
   171b8:	pop	{r3, pc}
