
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c4c <.init>:
   10c4c:	push	{r3, lr}
   10c50:	bl	10f0c <__assert_fail@plt+0x48>
   10c54:	pop	{r3, pc}

Disassembly of section .plt:

00010c58 <calloc@plt-0x14>:
   10c58:	push	{lr}		; (str lr, [sp, #-4]!)
   10c5c:	ldr	lr, [pc, #4]	; 10c68 <calloc@plt-0x4>
   10c60:	add	lr, pc, lr
   10c64:	ldr	pc, [lr, #8]!
   10c68:	muleq	r1, r8, r3

00010c6c <calloc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #920]!	; 0x398

00010c78 <fputs_unlocked@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #912]!	; 0x390

00010c84 <raise@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #904]!	; 0x388

00010c90 <strcmp@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #896]!	; 0x380

00010c9c <posix_fadvise64@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #888]!	; 0x378

00010ca8 <fflush@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #880]!	; 0x370

00010cb4 <free@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #872]!	; 0x368

00010cc0 <_exit@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #864]!	; 0x360

00010ccc <memcpy@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #856]!	; 0x358

00010cd8 <mbsinit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #848]!	; 0x350

00010ce4 <fwrite_unlocked@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #840]!	; 0x348

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #832]!	; 0x340

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #824]!	; 0x338

00010d08 <dcgettext@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #816]!	; 0x330

00010d14 <realloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #808]!	; 0x328

00010d20 <textdomain@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #800]!	; 0x320

00010d2c <iswprint@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #792]!	; 0x318

00010d38 <fwrite@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #784]!	; 0x310

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #776]!	; 0x308

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #768]!	; 0x300

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #760]!	; 0x2f8

00010d68 <mbrtowc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #752]!	; 0x2f0

00010d74 <error@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d80 <malloc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #736]!	; 0x2e0

00010d8c <__libc_start_main@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #728]!	; 0x2d8

00010d98 <__freading@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #720]!	; 0x2d0

00010da4 <__gmon_start__@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #712]!	; 0x2c8

00010db0 <getopt_long@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dbc <__ctype_b_loc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc8 <exit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #680]!	; 0x2a8

00010de0 <__errno_location@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dec <__cxa_atexit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #664]!	; 0x298

00010df8 <memset@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #656]!	; 0x290

00010e04 <__printf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #648]!	; 0x288

00010e10 <fileno@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #640]!	; 0x280

00010e1c <__fprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #632]!	; 0x278

00010e28 <fclose@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #624]!	; 0x270

00010e34 <fseeko64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #616]!	; 0x268

00010e40 <__uflow@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #608]!	; 0x260

00010e4c <__overflow@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #600]!	; 0x258

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #592]!	; 0x250

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #584]!	; 0x248

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #576]!	; 0x240

00010e7c <clearerr_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #568]!	; 0x238

00010e88 <fopen64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #560]!	; 0x230

00010e94 <bindtextdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #552]!	; 0x228

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #544]!	; 0x220

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #536]!	; 0x218

00010eb8 <strspn@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #528]!	; 0x210

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	mov	fp, #0
   10ed4:	mov	lr, #0
   10ed8:	pop	{r1}		; (ldr r1, [sp], #4)
   10edc:	mov	r2, sp
   10ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee8:	ldr	ip, [pc, #16]	; 10f00 <__assert_fail@plt+0x3c>
   10eec:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef0:	ldr	r0, [pc, #12]	; 10f04 <__assert_fail@plt+0x40>
   10ef4:	ldr	r3, [pc, #12]	; 10f08 <__assert_fail@plt+0x44>
   10ef8:	bl	10d8c <__libc_start_main@plt>
   10efc:	bl	10eac <abort@plt>
   10f00:	andeq	r5, r1, r4, lsr #13
   10f04:	andeq	r1, r1, ip, asr r3
   10f08:	andeq	r5, r1, r4, asr #12
   10f0c:	ldr	r3, [pc, #20]	; 10f28 <__assert_fail@plt+0x64>
   10f10:	ldr	r2, [pc, #20]	; 10f2c <__assert_fail@plt+0x68>
   10f14:	add	r3, pc, r3
   10f18:	ldr	r2, [r3, r2]
   10f1c:	cmp	r2, #0
   10f20:	bxeq	lr
   10f24:	b	10da4 <__gmon_start__@plt>
   10f28:	andeq	r6, r1, r4, ror #1
   10f2c:	ldrdeq	r0, [r0], -r8
   10f30:	ldr	r3, [pc, #28]	; 10f54 <__assert_fail@plt+0x90>
   10f34:	ldr	r0, [pc, #28]	; 10f58 <__assert_fail@plt+0x94>
   10f38:	sub	r3, r3, r0
   10f3c:	cmp	r3, #6
   10f40:	bxls	lr
   10f44:	ldr	r3, [pc, #16]	; 10f5c <__assert_fail@plt+0x98>
   10f48:	cmp	r3, #0
   10f4c:	bxeq	lr
   10f50:	bx	r3
   10f54:	andeq	r7, r2, r7, lsr r1
   10f58:	andeq	r7, r2, r4, lsr r1
   10f5c:	andeq	r0, r0, r0
   10f60:	ldr	r1, [pc, #36]	; 10f8c <__assert_fail@plt+0xc8>
   10f64:	ldr	r0, [pc, #36]	; 10f90 <__assert_fail@plt+0xcc>
   10f68:	sub	r1, r1, r0
   10f6c:	asr	r1, r1, #2
   10f70:	add	r1, r1, r1, lsr #31
   10f74:	asrs	r1, r1, #1
   10f78:	bxeq	lr
   10f7c:	ldr	r3, [pc, #16]	; 10f94 <__assert_fail@plt+0xd0>
   10f80:	cmp	r3, #0
   10f84:	bxeq	lr
   10f88:	bx	r3
   10f8c:	andeq	r7, r2, r4, lsr r1
   10f90:	andeq	r7, r2, r4, lsr r1
   10f94:	andeq	r0, r0, r0
   10f98:	push	{r4, lr}
   10f9c:	ldr	r4, [pc, #24]	; 10fbc <__assert_fail@plt+0xf8>
   10fa0:	ldrb	r3, [r4]
   10fa4:	cmp	r3, #0
   10fa8:	popne	{r4, pc}
   10fac:	bl	10f30 <__assert_fail@plt+0x6c>
   10fb0:	mov	r3, #1
   10fb4:	strb	r3, [r4]
   10fb8:	pop	{r4, pc}
   10fbc:	andeq	r7, r2, ip, asr r1
   10fc0:	ldr	r0, [pc, #40]	; 10ff0 <__assert_fail@plt+0x12c>
   10fc4:	ldr	r3, [r0]
   10fc8:	cmp	r3, #0
   10fcc:	bne	10fd4 <__assert_fail@plt+0x110>
   10fd0:	b	10f60 <__assert_fail@plt+0x9c>
   10fd4:	ldr	r3, [pc, #24]	; 10ff4 <__assert_fail@plt+0x130>
   10fd8:	cmp	r3, #0
   10fdc:	beq	10fd0 <__assert_fail@plt+0x10c>
   10fe0:	push	{r4, lr}
   10fe4:	blx	r3
   10fe8:	pop	{r4, lr}
   10fec:	b	10f60 <__assert_fail@plt+0x9c>
   10ff0:	andeq	r6, r2, r4, lsl pc
   10ff4:	andeq	r0, r0, r0
   10ff8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ffc:	sub	sp, sp, #60	; 0x3c
   11000:	subs	r6, r0, #0
   11004:	beq	11040 <__assert_fail@plt+0x17c>
   11008:	ldr	r3, [pc, #756]	; 11304 <__assert_fail@plt+0x440>
   1100c:	ldr	r4, [r3]
   11010:	mov	r2, #5
   11014:	ldr	r1, [pc, #748]	; 11308 <__assert_fail@plt+0x444>
   11018:	mov	r0, #0
   1101c:	bl	10d08 <dcgettext@plt>
   11020:	ldr	r3, [pc, #740]	; 1130c <__assert_fail@plt+0x448>
   11024:	ldr	r3, [r3]
   11028:	mov	r2, r0
   1102c:	mov	r1, #1
   11030:	mov	r0, r4
   11034:	bl	10e1c <__fprintf_chk@plt>
   11038:	mov	r0, r6
   1103c:	bl	10dc8 <exit@plt>
   11040:	mov	r2, #5
   11044:	ldr	r1, [pc, #708]	; 11310 <__assert_fail@plt+0x44c>
   11048:	mov	r0, #0
   1104c:	bl	10d08 <dcgettext@plt>
   11050:	ldr	r3, [pc, #692]	; 1130c <__assert_fail@plt+0x448>
   11054:	ldr	r2, [r3]
   11058:	mov	r1, r0
   1105c:	mov	r0, #1
   11060:	bl	10e04 <__printf_chk@plt>
   11064:	mov	r2, #5
   11068:	ldr	r1, [pc, #676]	; 11314 <__assert_fail@plt+0x450>
   1106c:	mov	r0, #0
   11070:	bl	10d08 <dcgettext@plt>
   11074:	ldr	r4, [pc, #668]	; 11318 <__assert_fail@plt+0x454>
   11078:	ldr	r1, [r4]
   1107c:	bl	10c78 <fputs_unlocked@plt>
   11080:	mov	r2, #5
   11084:	ldr	r1, [pc, #656]	; 1131c <__assert_fail@plt+0x458>
   11088:	mov	r0, #0
   1108c:	bl	10d08 <dcgettext@plt>
   11090:	ldr	r1, [r4]
   11094:	bl	10c78 <fputs_unlocked@plt>
   11098:	mov	r2, #5
   1109c:	ldr	r1, [pc, #636]	; 11320 <__assert_fail@plt+0x45c>
   110a0:	mov	r0, #0
   110a4:	bl	10d08 <dcgettext@plt>
   110a8:	ldr	r1, [r4]
   110ac:	bl	10c78 <fputs_unlocked@plt>
   110b0:	mov	r2, #5
   110b4:	ldr	r1, [pc, #616]	; 11324 <__assert_fail@plt+0x460>
   110b8:	mov	r0, #0
   110bc:	bl	10d08 <dcgettext@plt>
   110c0:	ldr	r1, [r4]
   110c4:	bl	10c78 <fputs_unlocked@plt>
   110c8:	bl	122d0 <__assert_fail@plt+0x140c>
   110cc:	mov	r2, #5
   110d0:	ldr	r1, [pc, #592]	; 11328 <__assert_fail@plt+0x464>
   110d4:	mov	r0, #0
   110d8:	bl	10d08 <dcgettext@plt>
   110dc:	ldr	r1, [r4]
   110e0:	bl	10c78 <fputs_unlocked@plt>
   110e4:	mov	r2, #5
   110e8:	ldr	r1, [pc, #572]	; 1132c <__assert_fail@plt+0x468>
   110ec:	mov	r0, #0
   110f0:	bl	10d08 <dcgettext@plt>
   110f4:	ldr	r1, [r4]
   110f8:	bl	10c78 <fputs_unlocked@plt>
   110fc:	mov	ip, sp
   11100:	ldr	lr, [pc, #552]	; 11330 <__assert_fail@plt+0x46c>
   11104:	ldm	lr!, {r0, r1, r2, r3}
   11108:	stmia	ip!, {r0, r1, r2, r3}
   1110c:	ldm	lr!, {r0, r1, r2, r3}
   11110:	stmia	ip!, {r0, r1, r2, r3}
   11114:	ldm	lr!, {r0, r1, r2, r3}
   11118:	stmia	ip!, {r0, r1, r2, r3}
   1111c:	ldm	lr, {r0, r1}
   11120:	stm	ip, {r0, r1}
   11124:	ldr	r1, [sp]
   11128:	cmp	r1, #0
   1112c:	moveq	r4, sp
   11130:	beq	11158 <__assert_fail@plt+0x294>
   11134:	mov	r4, sp
   11138:	ldr	r5, [pc, #500]	; 11334 <__assert_fail@plt+0x470>
   1113c:	mov	r0, r5
   11140:	bl	10c90 <strcmp@plt>
   11144:	cmp	r0, #0
   11148:	beq	11158 <__assert_fail@plt+0x294>
   1114c:	ldr	r1, [r4, #8]!
   11150:	cmp	r1, #0
   11154:	bne	1113c <__assert_fail@plt+0x278>
   11158:	ldr	r4, [r4, #4]
   1115c:	cmp	r4, #0
   11160:	beq	11274 <__assert_fail@plt+0x3b0>
   11164:	mov	r2, #5
   11168:	ldr	r1, [pc, #456]	; 11338 <__assert_fail@plt+0x474>
   1116c:	mov	r0, #0
   11170:	bl	10d08 <dcgettext@plt>
   11174:	ldr	r3, [pc, #448]	; 1133c <__assert_fail@plt+0x478>
   11178:	ldr	r2, [pc, #448]	; 11340 <__assert_fail@plt+0x47c>
   1117c:	mov	r1, r0
   11180:	mov	r0, #1
   11184:	bl	10e04 <__printf_chk@plt>
   11188:	mov	r1, #0
   1118c:	mov	r0, #5
   11190:	bl	10e58 <setlocale@plt>
   11194:	cmp	r0, #0
   11198:	beq	111b0 <__assert_fail@plt+0x2ec>
   1119c:	mov	r2, #3
   111a0:	ldr	r1, [pc, #412]	; 11344 <__assert_fail@plt+0x480>
   111a4:	bl	10ea0 <strncmp@plt>
   111a8:	cmp	r0, #0
   111ac:	bne	11210 <__assert_fail@plt+0x34c>
   111b0:	mov	r2, #5
   111b4:	ldr	r1, [pc, #396]	; 11348 <__assert_fail@plt+0x484>
   111b8:	mov	r0, #0
   111bc:	bl	10d08 <dcgettext@plt>
   111c0:	ldr	r5, [pc, #364]	; 11334 <__assert_fail@plt+0x470>
   111c4:	mov	r3, r5
   111c8:	ldr	r2, [pc, #364]	; 1133c <__assert_fail@plt+0x478>
   111cc:	mov	r1, r0
   111d0:	mov	r0, #1
   111d4:	bl	10e04 <__printf_chk@plt>
   111d8:	mov	r2, #5
   111dc:	ldr	r1, [pc, #360]	; 1134c <__assert_fail@plt+0x488>
   111e0:	mov	r0, #0
   111e4:	bl	10d08 <dcgettext@plt>
   111e8:	mov	r1, r0
   111ec:	ldr	r2, [pc, #348]	; 11350 <__assert_fail@plt+0x48c>
   111f0:	ldr	r3, [pc, #348]	; 11354 <__assert_fail@plt+0x490>
   111f4:	cmp	r4, r5
   111f8:	movne	r3, r2
   111fc:	mov	r2, r4
   11200:	mov	r0, #1
   11204:	bl	10e04 <__printf_chk@plt>
   11208:	b	11038 <__assert_fail@plt+0x174>
   1120c:	ldr	r4, [pc, #288]	; 11334 <__assert_fail@plt+0x470>
   11210:	mov	r2, #5
   11214:	ldr	r1, [pc, #316]	; 11358 <__assert_fail@plt+0x494>
   11218:	mov	r0, #0
   1121c:	bl	10d08 <dcgettext@plt>
   11220:	ldr	r3, [pc, #240]	; 11318 <__assert_fail@plt+0x454>
   11224:	ldr	r1, [r3]
   11228:	bl	10c78 <fputs_unlocked@plt>
   1122c:	b	111b0 <__assert_fail@plt+0x2ec>
   11230:	mov	r2, #5
   11234:	ldr	r1, [pc, #268]	; 11348 <__assert_fail@plt+0x484>
   11238:	mov	r0, #0
   1123c:	bl	10d08 <dcgettext@plt>
   11240:	ldr	r4, [pc, #236]	; 11334 <__assert_fail@plt+0x470>
   11244:	mov	r3, r4
   11248:	ldr	r2, [pc, #236]	; 1133c <__assert_fail@plt+0x478>
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	bl	10e04 <__printf_chk@plt>
   11258:	mov	r2, #5
   1125c:	ldr	r1, [pc, #232]	; 1134c <__assert_fail@plt+0x488>
   11260:	mov	r0, #0
   11264:	bl	10d08 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	ldr	r3, [pc, #224]	; 11354 <__assert_fail@plt+0x490>
   11270:	b	111fc <__assert_fail@plt+0x338>
   11274:	mov	r2, #5
   11278:	ldr	r1, [pc, #184]	; 11338 <__assert_fail@plt+0x474>
   1127c:	mov	r0, #0
   11280:	bl	10d08 <dcgettext@plt>
   11284:	ldr	r3, [pc, #176]	; 1133c <__assert_fail@plt+0x478>
   11288:	ldr	r2, [pc, #176]	; 11340 <__assert_fail@plt+0x47c>
   1128c:	mov	r1, r0
   11290:	mov	r0, #1
   11294:	bl	10e04 <__printf_chk@plt>
   11298:	mov	r1, #0
   1129c:	mov	r0, #5
   112a0:	bl	10e58 <setlocale@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	11230 <__assert_fail@plt+0x36c>
   112ac:	mov	r2, #3
   112b0:	ldr	r1, [pc, #140]	; 11344 <__assert_fail@plt+0x480>
   112b4:	bl	10ea0 <strncmp@plt>
   112b8:	cmp	r0, #0
   112bc:	bne	1120c <__assert_fail@plt+0x348>
   112c0:	mov	r2, #5
   112c4:	ldr	r1, [pc, #124]	; 11348 <__assert_fail@plt+0x484>
   112c8:	mov	r0, #0
   112cc:	bl	10d08 <dcgettext@plt>
   112d0:	ldr	r4, [pc, #92]	; 11334 <__assert_fail@plt+0x470>
   112d4:	mov	r3, r4
   112d8:	ldr	r2, [pc, #92]	; 1133c <__assert_fail@plt+0x478>
   112dc:	mov	r1, r0
   112e0:	mov	r0, #1
   112e4:	bl	10e04 <__printf_chk@plt>
   112e8:	mov	r2, #5
   112ec:	ldr	r1, [pc, #88]	; 1134c <__assert_fail@plt+0x488>
   112f0:	mov	r0, #0
   112f4:	bl	10d08 <dcgettext@plt>
   112f8:	mov	r1, r0
   112fc:	ldr	r3, [pc, #80]	; 11354 <__assert_fail@plt+0x490>
   11300:	b	111fc <__assert_fail@plt+0x338>
   11304:	andeq	r7, r2, r8, asr #2
   11308:	andeq	r5, r1, r0, ror r7
   1130c:	andeq	r7, r2, r4, lsr #3
   11310:	muleq	r1, r8, r7
   11314:			; <UNDEFINED> instruction: 0x000157bc
   11318:	andeq	r7, r2, r4, asr r1
   1131c:	andeq	r5, r1, r0, lsl #16
   11320:	andeq	r5, r1, r8, lsr r8
   11324:	andeq	r5, r1, r4, lsl #17
   11328:	andeq	r5, r1, r4, ror #18
   1132c:	muleq	r1, r4, r9
   11330:	andeq	r5, r1, ip, asr #13
   11334:	andeq	r5, r1, r4, ror #14
   11338:	andeq	r5, r1, ip, asr #19
   1133c:	andeq	r5, r1, r4, ror #19
   11340:	andeq	r5, r1, ip, lsl #20
   11344:	andeq	r5, r1, ip, lsl sl
   11348:	andeq	r5, r1, r8, ror #20
   1134c:	andeq	r5, r1, r4, lsl #21
   11350:	andeq	r5, r1, r0, ror #18
   11354:	andeq	r5, r1, r8, lsr fp
   11358:	andeq	r5, r1, r0, lsr #20
   1135c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11360:	sub	sp, sp, #36	; 0x24
   11364:	str	r0, [sp, #8]
   11368:	mov	r4, r1
   1136c:	ldr	r0, [r1]
   11370:	bl	12690 <__assert_fail@plt+0x17cc>
   11374:	ldr	r1, [pc, #964]	; 11740 <__assert_fail@plt+0x87c>
   11378:	mov	r0, #6
   1137c:	bl	10e58 <setlocale@plt>
   11380:	ldr	r6, [pc, #956]	; 11744 <__assert_fail@plt+0x880>
   11384:	ldr	r1, [pc, #956]	; 11748 <__assert_fail@plt+0x884>
   11388:	mov	r0, r6
   1138c:	bl	10e94 <bindtextdomain@plt>
   11390:	mov	r0, r6
   11394:	bl	10d20 <textdomain@plt>
   11398:	ldr	r0, [pc, #940]	; 1174c <__assert_fail@plt+0x888>
   1139c:	bl	156a8 <__assert_fail@plt+0x47e4>
   113a0:	mov	r2, #0
   113a4:	mov	r3, #0
   113a8:	mov	sl, r2
   113ac:	mov	fp, r3
   113b0:	mov	r5, #0
   113b4:	mov	r9, r5
   113b8:	ldr	r7, [pc, #912]	; 11750 <__assert_fail@plt+0x88c>
   113bc:	ldr	r6, [pc, #912]	; 11754 <__assert_fail@plt+0x890>
   113c0:	mov	r8, #1
   113c4:	mov	r3, #0
   113c8:	str	r3, [sp]
   113cc:	mov	r3, r7
   113d0:	mov	r2, r6
   113d4:	mov	r1, r4
   113d8:	ldr	r0, [sp, #8]
   113dc:	bl	10db0 <getopt_long@plt>
   113e0:	cmn	r0, #1
   113e4:	beq	1150c <__assert_fail@plt+0x648>
   113e8:	cmp	r0, #63	; 0x3f
   113ec:	beq	1148c <__assert_fail@plt+0x5c8>
   113f0:	bgt	11468 <__assert_fail@plt+0x5a4>
   113f4:	cmn	r0, #2
   113f8:	beq	114c8 <__assert_fail@plt+0x604>
   113fc:	cmp	r0, #44	; 0x2c
   11400:	beq	114ac <__assert_fail@plt+0x5e8>
   11404:	cmn	r0, #3
   11408:	beq	114d0 <__assert_fail@plt+0x60c>
   1140c:	cmp	r9, #0
   11410:	beq	118f4 <__assert_fail@plt+0xa30>
   11414:	mov	r2, sl
   11418:	mov	r3, fp
   1141c:	add	fp, pc, #788	; 0x314
   11420:	ldrd	sl, [fp]
   11424:	cmp	r3, fp
   11428:	cmpeq	r2, sl
   1142c:	bhi	118d4 <__assert_fail@plt+0xa10>
   11430:	mov	r1, #10
   11434:	mov	sl, r2
   11438:	mov	fp, r3
   1143c:	umull	r2, r3, r2, r1
   11440:	mla	r3, r1, fp, r3
   11444:	sub	r0, r0, #48	; 0x30
   11448:	adds	r2, r2, r0
   1144c:	adc	r3, r3, r0, asr #31
   11450:	cmp	r3, fp
   11454:	cmpeq	r2, sl
   11458:	bcc	118d4 <__assert_fail@plt+0xa10>
   1145c:	mov	sl, r2
   11460:	mov	fp, r3
   11464:	b	113c4 <__assert_fail@plt+0x500>
   11468:	cmp	r0, #116	; 0x74
   1146c:	beq	11494 <__assert_fail@plt+0x5d0>
   11470:	cmp	r0, #256	; 0x100
   11474:	beq	11504 <__assert_fail@plt+0x640>
   11478:	cmp	r0, #97	; 0x61
   1147c:	bne	1140c <__assert_fail@plt+0x548>
   11480:	ldr	r3, [pc, #720]	; 11758 <__assert_fail@plt+0x894>
   11484:	strb	r8, [r3]
   11488:	b	113c4 <__assert_fail@plt+0x500>
   1148c:	mov	r0, #1
   11490:	bl	10ff8 <__assert_fail@plt+0x134>
   11494:	ldr	r3, [pc, #700]	; 11758 <__assert_fail@plt+0x894>
   11498:	strb	r8, [r3]
   1149c:	ldr	r3, [pc, #696]	; 1175c <__assert_fail@plt+0x898>
   114a0:	ldr	r0, [r3]
   114a4:	bl	11ac0 <__assert_fail@plt+0xbfc>
   114a8:	b	113c4 <__assert_fail@plt+0x500>
   114ac:	cmp	r9, #0
   114b0:	beq	113c4 <__assert_fail@plt+0x500>
   114b4:	mov	r0, sl
   114b8:	mov	r1, fp
   114bc:	bl	119c8 <__assert_fail@plt+0xb04>
   114c0:	mov	r9, #0
   114c4:	b	113c4 <__assert_fail@plt+0x500>
   114c8:	mov	r0, #0
   114cc:	bl	10ff8 <__assert_fail@plt+0x134>
   114d0:	mov	r4, #0
   114d4:	str	r4, [sp, #4]
   114d8:	ldr	r3, [pc, #640]	; 11760 <__assert_fail@plt+0x89c>
   114dc:	str	r3, [sp]
   114e0:	ldr	r3, [pc, #636]	; 11764 <__assert_fail@plt+0x8a0>
   114e4:	ldr	r3, [r3]
   114e8:	ldr	r2, [pc, #632]	; 11768 <__assert_fail@plt+0x8a4>
   114ec:	ldr	r1, [pc, #632]	; 1176c <__assert_fail@plt+0x8a8>
   114f0:	ldr	r0, [pc, #632]	; 11770 <__assert_fail@plt+0x8ac>
   114f4:	ldr	r0, [r0]
   114f8:	bl	146ac <__assert_fail@plt+0x37e8>
   114fc:	mov	r0, r4
   11500:	bl	10dc8 <exit@plt>
   11504:	mov	r5, r8
   11508:	b	113c4 <__assert_fail@plt+0x500>
   1150c:	cmp	r5, #0
   11510:	movne	r2, #0
   11514:	ldrne	r3, [pc, #572]	; 11758 <__assert_fail@plt+0x894>
   11518:	strbne	r2, [r3]
   1151c:	cmp	r9, #0
   11520:	bne	11598 <__assert_fail@plt+0x6d4>
   11524:	bl	11df4 <__assert_fail@plt+0xf30>
   11528:	ldr	r3, [pc, #580]	; 11774 <__assert_fail@plt+0x8b0>
   1152c:	ldr	r0, [r3]
   11530:	ldr	r3, [sp, #8]
   11534:	cmp	r3, r0
   11538:	addgt	r0, r4, r0, lsl #2
   1153c:	movle	r0, #0
   11540:	bl	120ac <__assert_fail@plt+0x11e8>
   11544:	mov	r0, #0
   11548:	bl	120d8 <__assert_fail@plt+0x1214>
   1154c:	subs	fp, r0, #0
   11550:	beq	11888 <__assert_fail@plt+0x9c4>
   11554:	ldr	r3, [pc, #540]	; 11778 <__assert_fail@plt+0x8b4>
   11558:	ldr	r0, [r3]
   1155c:	bl	14778 <__assert_fail@plt+0x38b4>
   11560:	str	r0, [sp, #20]
   11564:	mov	r3, #0
   11568:	str	r3, [sp, #28]
   1156c:	mov	r6, r3
   11570:	mov	r3, #1
   11574:	str	r3, [sp, #16]
   11578:	mov	r9, r6
   1157c:	mov	r2, #0
   11580:	mov	r3, #0
   11584:	strd	r2, [sp, #8]
   11588:	mov	r5, #1
   1158c:	ldr	r8, [pc, #476]	; 11770 <__assert_fail@plt+0x8ac>
   11590:	ldr	sl, [pc, #448]	; 11758 <__assert_fail@plt+0x894>
   11594:	b	117d0 <__assert_fail@plt+0x90c>
   11598:	mov	r0, sl
   1159c:	mov	r1, fp
   115a0:	bl	119c8 <__assert_fail@plt+0xb04>
   115a4:	b	11524 <__assert_fail@plt+0x660>
   115a8:	mov	r0, fp
   115ac:	bl	10e40 <__uflow@plt>
   115b0:	subs	r4, r0, #0
   115b4:	bge	117ec <__assert_fail@plt+0x928>
   115b8:	mov	r0, fp
   115bc:	bl	120d8 <__assert_fail@plt+0x1214>
   115c0:	subs	fp, r0, #0
   115c4:	bne	117d0 <__assert_fail@plt+0x90c>
   115c8:	b	117ec <__assert_fail@plt+0x928>
   115cc:	add	r3, sp, #27
   115d0:	add	r2, sp, #28
   115d4:	ldrd	r0, [sp, #8]
   115d8:	bl	11f74 <__assert_fail@plt+0x10b0>
   115dc:	ldrb	r3, [sp, #27]
   115e0:	cmp	r3, #0
   115e4:	bne	116b0 <__assert_fail@plt+0x7ec>
   115e8:	ldrd	r2, [sp, #8]
   115ec:	cmp	r3, r1
   115f0:	cmpeq	r2, r0
   115f4:	bhi	1165c <__assert_fail@plt+0x798>
   115f8:	cmp	r4, #9
   115fc:	beq	1167c <__assert_fail@plt+0x7b8>
   11600:	ldrd	r2, [sp, #8]
   11604:	adds	r2, r2, #1
   11608:	adc	r3, r3, #0
   1160c:	ldr	ip, [sp, #16]
   11610:	eor	ip, ip, #1
   11614:	strd	r2, [sp, #8]
   11618:	cmp	r1, r3
   1161c:	cmpeq	r0, r2
   11620:	mov	r3, ip
   11624:	orrne	r3, r3, #1
   11628:	mov	ip, r3
   1162c:	str	r3, [sp, #16]
   11630:	cmp	r3, #0
   11634:	beq	11690 <__assert_fail@plt+0x7cc>
   11638:	ldrd	r2, [sp, #8]
   1163c:	cmp	r1, r3
   11640:	cmpeq	r0, r2
   11644:	mov	r5, ip
   11648:	moveq	r9, ip
   1164c:	ldr	r3, [sp, #20]
   11650:	strb	r4, [r3, r6]
   11654:	add	r6, r6, #1
   11658:	b	117c8 <__assert_fail@plt+0x904>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #276]	; 1177c <__assert_fail@plt+0x8b8>
   11664:	mov	r0, #0
   11668:	bl	10d08 <dcgettext@plt>
   1166c:	mov	r2, r0
   11670:	mov	r1, #0
   11674:	mov	r0, #1
   11678:	bl	10d74 <error@plt>
   1167c:	cmp	r6, #0
   11680:	ldrne	r3, [sp, #20]
   11684:	movne	r2, #9
   11688:	strbne	r2, [r3]
   1168c:	b	116a0 <__assert_fail@plt+0x7dc>
   11690:	ldr	r3, [sp, #20]
   11694:	mov	r2, #9
   11698:	strb	r2, [r3]
   1169c:	ldrd	r0, [sp, #8]
   116a0:	mov	r6, r9
   116a4:	strd	r0, [sp, #8]
   116a8:	mov	r4, #9
   116ac:	b	11838 <__assert_fail@plt+0x974>
   116b0:	mov	r5, #0
   116b4:	b	11838 <__assert_fail@plt+0x974>
   116b8:	ldrd	r0, [sp, #8]
   116bc:	mov	r3, r0
   116c0:	orrs	r3, r3, r1
   116c4:	movne	r2, #1
   116c8:	moveq	r2, #0
   116cc:	mov	r3, #0
   116d0:	subs	r0, r0, r2
   116d4:	sbc	r1, r1, r3
   116d8:	strd	r0, [sp, #8]
   116dc:	ldr	r3, [sp, #28]
   116e0:	cmp	r3, #0
   116e4:	subne	r3, r3, #1
   116e8:	str	r3, [sp, #28]
   116ec:	b	11838 <__assert_fail@plt+0x974>
   116f0:	mov	r2, #5
   116f4:	ldr	r1, [pc, #128]	; 1177c <__assert_fail@plt+0x8b8>
   116f8:	mov	r0, #0
   116fc:	bl	10d08 <dcgettext@plt>
   11700:	mov	r2, r0
   11704:	mov	r1, #0
   11708:	mov	r0, #1
   1170c:	bl	10d74 <error@plt>
   11710:	bl	10de0 <__errno_location@plt>
   11714:	ldr	r4, [r0]
   11718:	mov	r2, #5
   1171c:	ldr	r1, [pc, #96]	; 11784 <__assert_fail@plt+0x8c0>
   11720:	mov	r0, #0
   11724:	bl	10d08 <dcgettext@plt>
   11728:	mov	r2, r0
   1172c:	mov	r1, r4
   11730:	mov	r0, #1
   11734:	bl	10d74 <error@plt>
   11738:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1173c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11740:	andeq	r5, r1, r0, ror #18
   11744:	andeq	r5, r1, r0, lsl sl
   11748:			; <UNDEFINED> instruction: 0x00015ab8
   1174c:	andeq	r2, r1, r8, lsr r3
   11750:	andeq	r5, r1, r4, lsl #14
   11754:	andeq	r5, r1, r0, ror #21
   11758:	muleq	r2, r8, r1
   1175c:	andeq	r7, r2, r8, asr r1
   11760:	ldrdeq	r5, [r1], -r0
   11764:	andeq	r7, r2, ip, ror #1
   11768:	andeq	r5, r1, ip, lsl #20
   1176c:	andeq	r5, r1, r4, ror #14
   11770:	andeq	r7, r2, r4, asr r1
   11774:	andeq	r7, r2, r0, asr #2
   11778:	andeq	r7, r2, ip, ror r1
   1177c:	strdeq	r5, [r1], -r0
   11780:	muleq	r2, r4, r1
   11784:	andeq	r5, r1, r8, lsl #22
   11788:	andeq	r5, r1, r4, lsl fp
   1178c:	ldrb	r3, [sl]
   11790:	orr	r3, r7, r3
   11794:	and	r5, r5, r3
   11798:	str	r7, [sp, #16]
   1179c:	mov	r6, #0
   117a0:	cmp	r4, #0
   117a4:	blt	11880 <__assert_fail@plt+0x9bc>
   117a8:	ldr	r0, [r8]
   117ac:	ldr	r3, [r0, #20]
   117b0:	ldr	r2, [r0, #24]
   117b4:	cmp	r3, r2
   117b8:	addcc	r2, r3, #1
   117bc:	strcc	r2, [r0, #20]
   117c0:	strbcc	r4, [r3]
   117c4:	bcs	1189c <__assert_fail@plt+0x9d8>
   117c8:	cmp	r4, #10
   117cc:	beq	11564 <__assert_fail@plt+0x6a0>
   117d0:	ldr	r3, [fp, #4]
   117d4:	ldr	r2, [fp, #8]
   117d8:	cmp	r3, r2
   117dc:	bcs	115a8 <__assert_fail@plt+0x6e4>
   117e0:	add	r2, r3, #1
   117e4:	str	r2, [fp, #4]
   117e8:	ldrb	r4, [r3]
   117ec:	cmp	r5, #0
   117f0:	beq	117a0 <__assert_fail@plt+0x8dc>
   117f4:	bl	10dbc <__ctype_b_loc@plt>
   117f8:	ldr	r2, [r0]
   117fc:	lsl	r3, r4, #1
   11800:	ldrh	r3, [r2, r3]
   11804:	and	r3, r3, #1
   11808:	cmp	r3, #0
   1180c:	movne	r7, #1
   11810:	moveq	r7, #0
   11814:	bne	115cc <__assert_fail@plt+0x708>
   11818:	cmp	r4, #8
   1181c:	beq	116b8 <__assert_fail@plt+0x7f4>
   11820:	ldrd	r2, [sp, #8]
   11824:	adds	r2, r2, #1
   11828:	adc	r3, r3, #0
   1182c:	strd	r2, [sp, #8]
   11830:	orrs	r3, r2, r3
   11834:	beq	116f0 <__assert_fail@plt+0x82c>
   11838:	cmp	r6, #0
   1183c:	beq	1178c <__assert_fail@plt+0x8c8>
   11840:	cmp	r6, #1
   11844:	movls	r9, #0
   11848:	andhi	r9, r9, #1
   1184c:	cmp	r9, #0
   11850:	ldrne	r3, [sp, #20]
   11854:	movne	r2, #9
   11858:	strbne	r2, [r3]
   1185c:	ldr	r3, [r8]
   11860:	mov	r2, r6
   11864:	mov	r1, #1
   11868:	ldr	r0, [sp, #20]
   1186c:	bl	10ce4 <fwrite_unlocked@plt>
   11870:	cmp	r6, r0
   11874:	bne	11710 <__assert_fail@plt+0x84c>
   11878:	mov	r9, #0
   1187c:	b	1178c <__assert_fail@plt+0x8c8>
   11880:	ldr	r0, [sp, #20]
   11884:	bl	12590 <__assert_fail@plt+0x16cc>
   11888:	bl	12288 <__assert_fail@plt+0x13c4>
   1188c:	ldr	r3, [pc, #-276]	; 11780 <__assert_fail@plt+0x8bc>
   11890:	ldr	r0, [r3]
   11894:	add	sp, sp, #36	; 0x24
   11898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1189c:	uxtb	r1, r4
   118a0:	bl	10e4c <__overflow@plt>
   118a4:	cmp	r0, #0
   118a8:	bge	117c8 <__assert_fail@plt+0x904>
   118ac:	bl	10de0 <__errno_location@plt>
   118b0:	ldr	r4, [r0]
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #-316]	; 11784 <__assert_fail@plt+0x8c0>
   118bc:	mov	r0, #0
   118c0:	bl	10d08 <dcgettext@plt>
   118c4:	mov	r2, r0
   118c8:	mov	r1, r4
   118cc:	mov	r0, #1
   118d0:	bl	10d74 <error@plt>
   118d4:	mov	r2, #5
   118d8:	ldr	r1, [pc, #-344]	; 11788 <__assert_fail@plt+0x8c4>
   118dc:	mov	r0, #0
   118e0:	bl	10d08 <dcgettext@plt>
   118e4:	mov	r2, r0
   118e8:	mov	r1, #0
   118ec:	mov	r0, #1
   118f0:	bl	10d74 <error@plt>
   118f4:	sub	r0, r0, #48	; 0x30
   118f8:	asr	r3, r0, #31
   118fc:	mov	sl, r0
   11900:	mov	fp, r3
   11904:	mov	r9, r8
   11908:	b	113c4 <__assert_fail@plt+0x500>
   1190c:	andeq	r0, r0, r0
   11910:	push	{r4, r5, r6, lr}
   11914:	mov	r4, r0
   11918:	mov	r5, r1
   1191c:	ldr	r3, [pc, #64]	; 11964 <__assert_fail@plt+0xaa0>
   11920:	ldrd	r2, [r3]
   11924:	orrs	r3, r2, r3
   11928:	moveq	r0, #1
   1192c:	bne	1193c <__assert_fail@plt+0xa78>
   11930:	ldr	r3, [pc, #44]	; 11964 <__assert_fail@plt+0xaa0>
   11934:	strd	r4, [r3]
   11938:	pop	{r4, r5, r6, pc}
   1193c:	mov	r2, #5
   11940:	ldr	r1, [pc, #32]	; 11968 <__assert_fail@plt+0xaa4>
   11944:	mov	r0, #0
   11948:	bl	10d08 <dcgettext@plt>
   1194c:	mov	r2, r0
   11950:	mov	r1, #0
   11954:	mov	r0, r1
   11958:	bl	10d74 <error@plt>
   1195c:	mov	r0, #0
   11960:	b	11930 <__assert_fail@plt+0xa6c>
   11964:	andeq	r7, r2, r0, ror #2
   11968:	ldrdeq	r5, [r1], -r0
   1196c:	push	{r4, r5, r6, lr}
   11970:	mov	r4, r0
   11974:	mov	r5, r1
   11978:	ldr	r3, [pc, #64]	; 119c0 <__assert_fail@plt+0xafc>
   1197c:	ldrd	r2, [r3, #8]
   11980:	orrs	r3, r2, r3
   11984:	moveq	r0, #1
   11988:	bne	11998 <__assert_fail@plt+0xad4>
   1198c:	ldr	r3, [pc, #44]	; 119c0 <__assert_fail@plt+0xafc>
   11990:	strd	r4, [r3, #8]
   11994:	pop	{r4, r5, r6, pc}
   11998:	mov	r2, #5
   1199c:	ldr	r1, [pc, #32]	; 119c4 <__assert_fail@plt+0xb00>
   119a0:	mov	r0, #0
   119a4:	bl	10d08 <dcgettext@plt>
   119a8:	mov	r2, r0
   119ac:	mov	r1, #0
   119b0:	mov	r0, r1
   119b4:	bl	10d74 <error@plt>
   119b8:	mov	r0, #0
   119bc:	b	1198c <__assert_fail@plt+0xac8>
   119c0:	andeq	r7, r2, r0, ror #2
   119c4:	andeq	r5, r1, r0, lsl #24
   119c8:	push	{r4, r5, r6, r7, r8, lr}
   119cc:	mov	r6, r0
   119d0:	mov	r7, r1
   119d4:	ldr	r3, [pc, #220]	; 11ab8 <__assert_fail@plt+0xbf4>
   119d8:	ldr	r3, [r3, #16]
   119dc:	cmp	r3, #0
   119e0:	beq	11a68 <__assert_fail@plt+0xba4>
   119e4:	ldr	r2, [pc, #204]	; 11ab8 <__assert_fail@plt+0xbf4>
   119e8:	ldr	r2, [r2, #20]
   119ec:	add	r2, r2, r3, lsl #3
   119f0:	ldrd	r4, [r2, #-8]
   119f4:	cmp	r5, r1
   119f8:	cmpeq	r4, r0
   119fc:	movhi	r4, #0
   11a00:	movhi	r5, #0
   11a04:	bls	11a70 <__assert_fail@plt+0xbac>
   11a08:	ldr	r2, [pc, #168]	; 11ab8 <__assert_fail@plt+0xbf4>
   11a0c:	ldr	r2, [r2, #24]
   11a10:	cmp	r3, r2
   11a14:	beq	11a7c <__assert_fail@plt+0xbb8>
   11a18:	ldr	r3, [pc, #152]	; 11ab8 <__assert_fail@plt+0xbf4>
   11a1c:	ldr	r1, [r3, #20]
   11a20:	ldr	r2, [r3, #16]
   11a24:	add	r0, r2, #1
   11a28:	str	r0, [r3, #16]
   11a2c:	lsl	r2, r2, #3
   11a30:	strd	r6, [r1, r2]
   11a34:	ldr	r2, [r3, #28]
   11a38:	mov	r3, #0
   11a3c:	cmp	r5, r3
   11a40:	cmpeq	r4, r2
   11a44:	popls	{r4, r5, r6, r7, r8, pc}
   11a48:	mvn	r2, #0
   11a4c:	mov	r3, #0
   11a50:	cmp	r5, r3
   11a54:	cmpeq	r4, r2
   11a58:	bhi	11a98 <__assert_fail@plt+0xbd4>
   11a5c:	ldr	r3, [pc, #84]	; 11ab8 <__assert_fail@plt+0xbf4>
   11a60:	str	r4, [r3, #28]
   11a64:	pop	{r4, r5, r6, r7, r8, pc}
   11a68:	mov	r4, #0
   11a6c:	mov	r5, #0
   11a70:	subs	r4, r6, r4
   11a74:	sbc	r5, r7, r5
   11a78:	b	11a08 <__assert_fail@plt+0xb44>
   11a7c:	ldr	r8, [pc, #52]	; 11ab8 <__assert_fail@plt+0xbf4>
   11a80:	mov	r2, #8
   11a84:	add	r1, r8, #24
   11a88:	ldr	r0, [r8, #20]
   11a8c:	bl	148a0 <__assert_fail@plt+0x39dc>
   11a90:	str	r0, [r8, #20]
   11a94:	b	11a18 <__assert_fail@plt+0xb54>
   11a98:	mov	r2, #5
   11a9c:	ldr	r1, [pc, #24]	; 11abc <__assert_fail@plt+0xbf8>
   11aa0:	mov	r0, #0
   11aa4:	bl	10d08 <dcgettext@plt>
   11aa8:	mov	r2, r0
   11aac:	mov	r1, #0
   11ab0:	mov	r0, #1
   11ab4:	bl	10d74 <error@plt>
   11ab8:	andeq	r7, r2, r0, ror #2
   11abc:	andeq	r5, r1, r0, lsr ip
   11ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ac4:	sub	sp, sp, #12
   11ac8:	ldrb	r4, [r0]
   11acc:	cmp	r4, #0
   11ad0:	beq	11d90 <__assert_fail@plt+0xecc>
   11ad4:	mov	r5, r0
   11ad8:	mov	r2, #0
   11adc:	mov	r3, #0
   11ae0:	strd	r2, [sp]
   11ae4:	mov	fp, #1
   11ae8:	mov	sl, #0
   11aec:	mov	r8, sl
   11af0:	mov	r7, sl
   11af4:	mov	r6, sl
   11af8:	mov	r9, sl
   11afc:	b	11d10 <__assert_fail@plt+0xe4c>
   11b00:	ldrd	r0, [sp]
   11b04:	bl	11910 <__assert_fail@plt+0xa4c>
   11b08:	subs	r7, r0, #0
   11b0c:	beq	11cf4 <__assert_fail@plt+0xe30>
   11b10:	mov	r4, r5
   11b14:	mov	r6, r9
   11b18:	b	11d00 <__assert_fail@plt+0xe3c>
   11b1c:	ldrd	r0, [sp]
   11b20:	bl	119c8 <__assert_fail@plt+0xb04>
   11b24:	mov	r7, r8
   11b28:	mov	r6, r8
   11b2c:	mov	r4, r5
   11b30:	b	11d00 <__assert_fail@plt+0xe3c>
   11b34:	cmp	r4, #47	; 0x2f
   11b38:	beq	11bd8 <__assert_fail@plt+0xd14>
   11b3c:	cmp	r4, #43	; 0x2b
   11b40:	beq	11c30 <__assert_fail@plt+0xd6c>
   11b44:	sub	r1, r4, #48	; 0x30
   11b48:	cmp	r1, #9
   11b4c:	bhi	11cc4 <__assert_fail@plt+0xe00>
   11b50:	cmp	r6, #0
   11b54:	beq	11db4 <__assert_fail@plt+0xef0>
   11b58:	ldrd	r2, [sp]
   11b5c:	add	r1, pc, #628	; 0x274
   11b60:	ldrd	r0, [r1]
   11b64:	cmp	r3, r1
   11b68:	cmpeq	r2, r0
   11b6c:	bls	11c88 <__assert_fail@plt+0xdc4>
   11b70:	ldr	r1, [pc, #616]	; 11de0 <__assert_fail@plt+0xf1c>
   11b74:	mov	r0, sl
   11b78:	bl	10eb8 <strspn@plt>
   11b7c:	mov	r4, r0
   11b80:	mov	r1, r0
   11b84:	mov	r0, sl
   11b88:	bl	14cd4 <__assert_fail@plt+0x3e10>
   11b8c:	mov	r5, r0
   11b90:	mov	r2, #5
   11b94:	ldr	r1, [pc, #584]	; 11de4 <__assert_fail@plt+0xf20>
   11b98:	mov	r0, r9
   11b9c:	bl	10d08 <dcgettext@plt>
   11ba0:	mov	fp, r0
   11ba4:	mov	r0, r5
   11ba8:	bl	141e0 <__assert_fail@plt+0x331c>
   11bac:	mov	r3, r0
   11bb0:	mov	r2, fp
   11bb4:	mov	r1, r9
   11bb8:	mov	r0, r9
   11bbc:	bl	10d74 <error@plt>
   11bc0:	mov	r0, r5
   11bc4:	bl	12590 <__assert_fail@plt+0x16cc>
   11bc8:	sub	r4, r4, #1
   11bcc:	add	r4, sl, r4
   11bd0:	mov	fp, r9
   11bd4:	b	11d00 <__assert_fail@plt+0xe3c>
   11bd8:	cmp	r6, #0
   11bdc:	moveq	r8, r6
   11be0:	moveq	r4, r5
   11be4:	moveq	r7, #1
   11be8:	beq	11d00 <__assert_fail@plt+0xe3c>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #496]	; 11de8 <__assert_fail@plt+0xf24>
   11bf4:	mov	r0, r9
   11bf8:	bl	10d08 <dcgettext@plt>
   11bfc:	mov	r4, r0
   11c00:	mov	r0, r5
   11c04:	bl	141e0 <__assert_fail@plt+0x331c>
   11c08:	mov	r3, r0
   11c0c:	mov	r2, r4
   11c10:	mov	r1, r9
   11c14:	mov	r0, r9
   11c18:	bl	10d74 <error@plt>
   11c1c:	mov	r7, r6
   11c20:	mov	r4, r5
   11c24:	mov	fp, r9
   11c28:	mov	r8, r9
   11c2c:	b	11d00 <__assert_fail@plt+0xe3c>
   11c30:	cmp	r6, #0
   11c34:	moveq	r7, r6
   11c38:	moveq	r4, r5
   11c3c:	moveq	r8, #1
   11c40:	beq	11d00 <__assert_fail@plt+0xe3c>
   11c44:	mov	r2, #5
   11c48:	ldr	r1, [pc, #412]	; 11dec <__assert_fail@plt+0xf28>
   11c4c:	mov	r0, r9
   11c50:	bl	10d08 <dcgettext@plt>
   11c54:	mov	r4, r0
   11c58:	mov	r0, r5
   11c5c:	bl	141e0 <__assert_fail@plt+0x331c>
   11c60:	mov	r3, r0
   11c64:	mov	r2, r4
   11c68:	mov	r1, r9
   11c6c:	mov	r0, r9
   11c70:	bl	10d74 <error@plt>
   11c74:	mov	r8, r6
   11c78:	mov	r4, r5
   11c7c:	mov	fp, r9
   11c80:	mov	r7, r9
   11c84:	b	11d00 <__assert_fail@plt+0xe3c>
   11c88:	mov	r1, #10
   11c8c:	ldr	r3, [sp]
   11c90:	umull	r2, r3, r3, r1
   11c94:	ldr	ip, [sp, #4]
   11c98:	mla	r3, r1, ip, r3
   11c9c:	sub	r4, r4, #48	; 0x30
   11ca0:	adds	r2, r2, r4
   11ca4:	adc	r3, r3, r4, asr #31
   11ca8:	ldrd	r0, [sp]
   11cac:	cmp	r3, r1
   11cb0:	cmpeq	r2, r0
   11cb4:	bcc	11b70 <__assert_fail@plt+0xcac>
   11cb8:	strd	r2, [sp]
   11cbc:	mov	r4, r5
   11cc0:	b	11d00 <__assert_fail@plt+0xe3c>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #288]	; 11df0 <__assert_fail@plt+0xf2c>
   11ccc:	mov	r0, #0
   11cd0:	bl	10d08 <dcgettext@plt>
   11cd4:	mov	r4, r0
   11cd8:	mov	r0, r5
   11cdc:	bl	141e0 <__assert_fail@plt+0x331c>
   11ce0:	mov	r3, r0
   11ce4:	mov	r2, r4
   11ce8:	mov	r1, #0
   11cec:	mov	r0, r1
   11cf0:	bl	10d74 <error@plt>
   11cf4:	mov	r0, #1
   11cf8:	bl	10dc8 <exit@plt>
   11cfc:	mov	r4, r5
   11d00:	add	r5, r4, #1
   11d04:	ldrb	r4, [r4, #1]
   11d08:	cmp	r4, #0
   11d0c:	beq	11d64 <__assert_fail@plt+0xea0>
   11d10:	cmp	r4, #44	; 0x2c
   11d14:	beq	11d30 <__assert_fail@plt+0xe6c>
   11d18:	bl	10dbc <__ctype_b_loc@plt>
   11d1c:	ldr	r2, [r0]
   11d20:	lsl	r3, r4, #1
   11d24:	ldrh	r3, [r2, r3]
   11d28:	tst	r3, #1
   11d2c:	beq	11b34 <__assert_fail@plt+0xc70>
   11d30:	cmp	r6, #0
   11d34:	beq	11cfc <__assert_fail@plt+0xe38>
   11d38:	cmp	r7, #0
   11d3c:	bne	11b00 <__assert_fail@plt+0xc3c>
   11d40:	cmp	r8, #0
   11d44:	beq	11b1c <__assert_fail@plt+0xc58>
   11d48:	ldrd	r0, [sp]
   11d4c:	bl	1196c <__assert_fail@plt+0xaa8>
   11d50:	subs	r8, r0, #0
   11d54:	beq	11cf4 <__assert_fail@plt+0xe30>
   11d58:	mov	r6, r7
   11d5c:	mov	r4, r5
   11d60:	b	11d00 <__assert_fail@plt+0xe3c>
   11d64:	tst	r6, fp
   11d68:	beq	11d88 <__assert_fail@plt+0xec4>
   11d6c:	cmp	r7, #0
   11d70:	bne	11d98 <__assert_fail@plt+0xed4>
   11d74:	cmp	r8, #0
   11d78:	beq	11da8 <__assert_fail@plt+0xee4>
   11d7c:	ldrd	r0, [sp]
   11d80:	bl	1196c <__assert_fail@plt+0xaa8>
   11d84:	and	fp, fp, r0
   11d88:	cmp	fp, #0
   11d8c:	beq	11cf4 <__assert_fail@plt+0xe30>
   11d90:	add	sp, sp, #12
   11d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d98:	ldrd	r0, [sp]
   11d9c:	bl	11910 <__assert_fail@plt+0xa4c>
   11da0:	and	fp, fp, r0
   11da4:	b	11d88 <__assert_fail@plt+0xec4>
   11da8:	ldrd	r0, [sp]
   11dac:	bl	119c8 <__assert_fail@plt+0xb04>
   11db0:	b	11d88 <__assert_fail@plt+0xec4>
   11db4:	sub	r4, r4, #48	; 0x30
   11db8:	mov	r2, r4
   11dbc:	asr	r3, r4, #31
   11dc0:	strd	r2, [sp]
   11dc4:	mov	sl, r5
   11dc8:	mov	r4, r5
   11dcc:	mov	r6, #1
   11dd0:	b	11d00 <__assert_fail@plt+0xe3c>
   11dd4:	nop			; (mov r0, r0)
   11dd8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11ddc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11de0:	andeq	r5, r1, ip, asr #25
   11de4:	ldrdeq	r5, [r1], -r8
   11de8:	andeq	r5, r1, r8, asr #24
   11dec:	andeq	r5, r1, r4, ror ip
   11df0:	andeq	r5, r1, r0, lsr #25
   11df4:	push	{r4, r5, r6, lr}
   11df8:	ldr	r3, [pc, #356]	; 11f64 <__assert_fail@plt+0x10a0>
   11dfc:	ldr	lr, [r3, #20]
   11e00:	ldr	ip, [r3, #16]
   11e04:	cmp	ip, #0
   11e08:	beq	11ee0 <__assert_fail@plt+0x101c>
   11e0c:	ldrd	r4, [lr]
   11e10:	orrs	r3, r4, r5
   11e14:	movne	r0, lr
   11e18:	movne	r1, #0
   11e1c:	beq	11e50 <__assert_fail@plt+0xf8c>
   11e20:	add	r1, r1, #1
   11e24:	cmp	ip, r1
   11e28:	beq	11f20 <__assert_fail@plt+0x105c>
   11e2c:	ldrd	r2, [r0, #8]!
   11e30:	orrs	r6, r2, r3
   11e34:	beq	11e50 <__assert_fail@plt+0xf8c>
   11e38:	cmp	r3, r5
   11e3c:	cmpeq	r2, r4
   11e40:	bls	11e70 <__assert_fail@plt+0xfac>
   11e44:	mov	r4, r2
   11e48:	mov	r5, r3
   11e4c:	b	11e20 <__assert_fail@plt+0xf5c>
   11e50:	mov	r2, #5
   11e54:	ldr	r1, [pc, #268]	; 11f68 <__assert_fail@plt+0x10a4>
   11e58:	mov	r0, #0
   11e5c:	bl	10d08 <dcgettext@plt>
   11e60:	mov	r2, r0
   11e64:	mov	r1, #0
   11e68:	mov	r0, #1
   11e6c:	bl	10d74 <error@plt>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #240]	; 11f6c <__assert_fail@plt+0x10a8>
   11e78:	mov	r0, #0
   11e7c:	bl	10d08 <dcgettext@plt>
   11e80:	mov	r2, r0
   11e84:	mov	r1, #0
   11e88:	mov	r0, #1
   11e8c:	bl	10d74 <error@plt>
   11e90:	ldr	r3, [pc, #204]	; 11f64 <__assert_fail@plt+0x10a0>
   11e94:	ldrd	r2, [r3]
   11e98:	orrs	r1, r2, r3
   11e9c:	moveq	r2, #8
   11ea0:	ldr	r3, [pc, #188]	; 11f64 <__assert_fail@plt+0x10a0>
   11ea4:	str	r2, [r3, #28]
   11ea8:	str	r2, [r3, #32]
   11eac:	mov	r2, #0
   11eb0:	str	r2, [r3, #36]	; 0x24
   11eb4:	pop	{r4, r5, r6, pc}
   11eb8:	ldr	r1, [pc, #164]	; 11f64 <__assert_fail@plt+0x10a0>
   11ebc:	ldrd	r0, [r1]
   11ec0:	orr	r2, r2, r0
   11ec4:	orr	r3, r3, r1
   11ec8:	orrs	r3, r2, r3
   11ecc:	bne	11f50 <__assert_fail@plt+0x108c>
   11ed0:	ldrd	r0, [lr]
   11ed4:	ldr	r3, [pc, #136]	; 11f64 <__assert_fail@plt+0x10a0>
   11ed8:	strd	r0, [r3, #32]
   11edc:	pop	{r4, r5, r6, pc}
   11ee0:	ldr	r3, [pc, #124]	; 11f64 <__assert_fail@plt+0x10a0>
   11ee4:	ldrd	r2, [r3, #8]
   11ee8:	orrs	r1, r2, r3
   11eec:	beq	11e90 <__assert_fail@plt+0xfcc>
   11ef0:	ldr	r1, [pc, #108]	; 11f64 <__assert_fail@plt+0x10a0>
   11ef4:	ldrd	r0, [r1]
   11ef8:	orrs	r1, r0, r1
   11efc:	beq	11ea0 <__assert_fail@plt+0xfdc>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #100]	; 11f70 <__assert_fail@plt+0x10ac>
   11f08:	mov	r0, #0
   11f0c:	bl	10d08 <dcgettext@plt>
   11f10:	mov	r2, r0
   11f14:	mov	r1, #0
   11f18:	mov	r0, #1
   11f1c:	bl	10d74 <error@plt>
   11f20:	ldr	r3, [pc, #60]	; 11f64 <__assert_fail@plt+0x10a0>
   11f24:	ldrd	r2, [r3, #8]
   11f28:	orrs	r1, r2, r3
   11f2c:	beq	11f48 <__assert_fail@plt+0x1084>
   11f30:	ldr	r1, [pc, #44]	; 11f64 <__assert_fail@plt+0x10a0>
   11f34:	ldrd	r0, [r1]
   11f38:	orrs	r1, r0, r1
   11f3c:	bne	11f00 <__assert_fail@plt+0x103c>
   11f40:	cmp	ip, #0
   11f44:	beq	11ea0 <__assert_fail@plt+0xfdc>
   11f48:	cmp	ip, #1
   11f4c:	beq	11eb8 <__assert_fail@plt+0xff4>
   11f50:	mov	r0, #0
   11f54:	mov	r1, #0
   11f58:	ldr	r3, [pc, #4]	; 11f64 <__assert_fail@plt+0x10a0>
   11f5c:	strd	r0, [r3, #32]
   11f60:	pop	{r4, r5, r6, pc}
   11f64:	andeq	r7, r2, r0, ror #2
   11f68:	strdeq	r5, [r1], -r4
   11f6c:	andeq	r5, r1, ip, lsl #26
   11f70:	andeq	r5, r1, r8, lsr #26
   11f74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f78:	mov	r6, r0
   11f7c:	mov	r7, r1
   11f80:	mov	r1, #0
   11f84:	strb	r1, [r3]
   11f88:	ldr	r1, [pc, #280]	; 120a8 <__assert_fail@plt+0x11e4>
   11f8c:	ldrd	r0, [r1, #32]
   11f90:	orrs	ip, r0, r1
   11f94:	bne	11ff0 <__assert_fail@plt+0x112c>
   11f98:	ldr	r1, [r2]
   11f9c:	ldr	r0, [pc, #260]	; 120a8 <__assert_fail@plt+0x11e4>
   11fa0:	ldr	r0, [r0, #16]
   11fa4:	cmp	r1, r0
   11fa8:	bcs	12020 <__assert_fail@plt+0x115c>
   11fac:	lsl	lr, r1, #3
   11fb0:	ldr	ip, [pc, #240]	; 120a8 <__assert_fail@plt+0x11e4>
   11fb4:	ldr	r4, [ip, #20]
   11fb8:	add	ip, r4, lr
   11fbc:	ldrd	r4, [r4, lr]
   11fc0:	cmp	r7, r5
   11fc4:	cmpeq	r6, r4
   11fc8:	bcc	12014 <__assert_fail@plt+0x1150>
   11fcc:	add	r1, r1, #1
   11fd0:	str	r1, [r2]
   11fd4:	cmp	r1, r0
   11fd8:	beq	12020 <__assert_fail@plt+0x115c>
   11fdc:	ldrd	r4, [ip, #8]!
   11fe0:	cmp	r7, r5
   11fe4:	cmpeq	r6, r4
   11fe8:	bcs	11fcc <__assert_fail@plt+0x1108>
   11fec:	b	12014 <__assert_fail@plt+0x1150>
   11ff0:	adds	r4, r0, r6
   11ff4:	adc	r5, r1, r7
   11ff8:	mov	r2, r0
   11ffc:	mov	r3, r1
   12000:	mov	r0, r6
   12004:	mov	r1, r7
   12008:	bl	154d0 <__assert_fail@plt+0x460c>
   1200c:	subs	r4, r4, r2
   12010:	sbc	r5, r5, r3
   12014:	mov	r0, r4
   12018:	mov	r1, r5
   1201c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12020:	ldr	r2, [pc, #128]	; 120a8 <__assert_fail@plt+0x11e4>
   12024:	ldrd	r8, [r2]
   12028:	orrs	r2, r8, r9
   1202c:	bne	12080 <__assert_fail@plt+0x11bc>
   12030:	ldr	r2, [pc, #112]	; 120a8 <__assert_fail@plt+0x11e4>
   12034:	ldrd	r4, [r2, #8]
   12038:	orrs	r2, r4, r5
   1203c:	moveq	r2, #1
   12040:	strbeq	r2, [r3]
   12044:	beq	12014 <__assert_fail@plt+0x1150>
   12048:	adds	r8, r6, r4
   1204c:	adc	r9, r7, r5
   12050:	ldr	r3, [pc, #80]	; 120a8 <__assert_fail@plt+0x11e4>
   12054:	ldr	r3, [r3, #20]
   12058:	add	r0, r3, r0, lsl #3
   1205c:	ldrd	r0, [r0, #-8]
   12060:	mov	r2, r4
   12064:	mov	r3, r5
   12068:	subs	r0, r6, r0
   1206c:	sbc	r1, r7, r1
   12070:	bl	154d0 <__assert_fail@plt+0x460c>
   12074:	subs	r4, r8, r2
   12078:	sbc	r5, r9, r3
   1207c:	b	12014 <__assert_fail@plt+0x1150>
   12080:	adds	r4, r6, r8
   12084:	adc	r5, r7, r9
   12088:	mov	r2, r8
   1208c:	mov	r3, r9
   12090:	mov	r0, r6
   12094:	mov	r1, r7
   12098:	bl	154d0 <__assert_fail@plt+0x460c>
   1209c:	subs	r4, r4, r2
   120a0:	sbc	r5, r5, r3
   120a4:	b	12014 <__assert_fail@plt+0x1150>
   120a8:	andeq	r7, r2, r0, ror #2
   120ac:	mov	r2, #0
   120b0:	ldr	r3, [pc, #24]	; 120d0 <__assert_fail@plt+0x120c>
   120b4:	strb	r2, [r3, #40]	; 0x28
   120b8:	cmp	r0, #0
   120bc:	ldreq	r2, [pc, #16]	; 120d4 <__assert_fail@plt+0x1210>
   120c0:	streq	r2, [r3, #44]	; 0x2c
   120c4:	ldrne	r3, [pc, #4]	; 120d0 <__assert_fail@plt+0x120c>
   120c8:	strne	r0, [r3, #44]	; 0x2c
   120cc:	bx	lr
   120d0:	andeq	r7, r2, r0, ror #2
   120d4:	andeq	r7, r2, r4, ror #1
   120d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	subs	r5, r0, #0
   120e0:	beq	12134 <__assert_fail@plt+0x1270>
   120e4:	ldr	r3, [pc, #380]	; 12268 <__assert_fail@plt+0x13a4>
   120e8:	ldr	r6, [r3, #48]	; 0x30
   120ec:	cmp	r6, #0
   120f0:	beq	12168 <__assert_fail@plt+0x12a4>
   120f4:	bl	10de0 <__errno_location@plt>
   120f8:	mov	r7, r0
   120fc:	ldr	r4, [r0]
   12100:	ldr	r3, [r5]
   12104:	and	r3, r3, #32
   12108:	cmp	r3, #0
   1210c:	moveq	r4, #0
   12110:	ldr	r1, [pc, #340]	; 1226c <__assert_fail@plt+0x13a8>
   12114:	mov	r0, r6
   12118:	bl	10c90 <strcmp@plt>
   1211c:	cmp	r0, #0
   12120:	bne	1217c <__assert_fail@plt+0x12b8>
   12124:	mov	r0, r5
   12128:	bl	10e7c <clearerr_unlocked@plt>
   1212c:	cmp	r4, #0
   12130:	bne	12190 <__assert_fail@plt+0x12cc>
   12134:	ldr	r2, [pc, #300]	; 12268 <__assert_fail@plt+0x13a4>
   12138:	ldr	r3, [r2, #44]	; 0x2c
   1213c:	add	r1, r3, #4
   12140:	str	r1, [r2, #44]	; 0x2c
   12144:	ldr	r4, [r3]
   12148:	cmp	r4, #0
   1214c:	beq	12260 <__assert_fail@plt+0x139c>
   12150:	ldr	r9, [pc, #276]	; 1226c <__assert_fail@plt+0x13a8>
   12154:	mov	r5, r2
   12158:	mov	r8, #1
   1215c:	ldr	fp, [pc, #268]	; 12270 <__assert_fail@plt+0x13ac>
   12160:	ldr	sl, [pc, #268]	; 12274 <__assert_fail@plt+0x13b0>
   12164:	b	12224 <__assert_fail@plt+0x1360>
   12168:	ldr	r3, [pc, #264]	; 12278 <__assert_fail@plt+0x13b4>
   1216c:	mov	r2, #340	; 0x154
   12170:	ldr	r1, [pc, #260]	; 1227c <__assert_fail@plt+0x13b8>
   12174:	ldr	r0, [pc, #260]	; 12280 <__assert_fail@plt+0x13bc>
   12178:	bl	10ec4 <__assert_fail@plt>
   1217c:	mov	r0, r5
   12180:	bl	12484 <__assert_fail@plt+0x15c0>
   12184:	cmp	r0, #0
   12188:	ldrne	r4, [r7]
   1218c:	b	1212c <__assert_fail@plt+0x1268>
   12190:	ldr	r5, [pc, #208]	; 12268 <__assert_fail@plt+0x13a4>
   12194:	ldr	r2, [r5, #48]	; 0x30
   12198:	mov	r1, #3
   1219c:	mov	r0, #0
   121a0:	bl	14078 <__assert_fail@plt+0x31b4>
   121a4:	mov	r3, r0
   121a8:	ldr	r2, [pc, #196]	; 12274 <__assert_fail@plt+0x13b0>
   121ac:	mov	r1, r4
   121b0:	mov	r0, #0
   121b4:	bl	10d74 <error@plt>
   121b8:	mov	r3, #1
   121bc:	str	r3, [r5, #52]	; 0x34
   121c0:	b	12134 <__assert_fail@plt+0x1270>
   121c4:	ldr	r1, [pc, #184]	; 12284 <__assert_fail@plt+0x13c0>
   121c8:	mov	r0, r4
   121cc:	bl	10e88 <fopen64@plt>
   121d0:	mov	r6, r0
   121d4:	cmp	r6, #0
   121d8:	bne	12244 <__assert_fail@plt+0x1380>
   121dc:	bl	10de0 <__errno_location@plt>
   121e0:	ldr	r7, [r0]
   121e4:	mov	r2, r4
   121e8:	mov	r1, #3
   121ec:	mov	r0, #0
   121f0:	bl	14078 <__assert_fail@plt+0x31b4>
   121f4:	mov	r3, r0
   121f8:	mov	r2, sl
   121fc:	mov	r1, r7
   12200:	mov	r0, #0
   12204:	bl	10d74 <error@plt>
   12208:	str	r8, [r5, #52]	; 0x34
   1220c:	ldr	r3, [r5, #44]	; 0x2c
   12210:	add	r2, r3, #4
   12214:	str	r2, [r5, #44]	; 0x2c
   12218:	ldr	r4, [r3]
   1221c:	cmp	r4, #0
   12220:	beq	12258 <__assert_fail@plt+0x1394>
   12224:	mov	r1, r9
   12228:	mov	r0, r4
   1222c:	bl	10c90 <strcmp@plt>
   12230:	cmp	r0, #0
   12234:	bne	121c4 <__assert_fail@plt+0x1300>
   12238:	strb	r8, [r5, #40]	; 0x28
   1223c:	ldr	r6, [fp]
   12240:	b	121d4 <__assert_fail@plt+0x1310>
   12244:	ldr	r3, [pc, #28]	; 12268 <__assert_fail@plt+0x13a4>
   12248:	str	r4, [r3, #48]	; 0x30
   1224c:	mov	r1, #2
   12250:	mov	r0, r6
   12254:	bl	12450 <__assert_fail@plt+0x158c>
   12258:	mov	r0, r6
   1225c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12260:	mov	r6, #0
   12264:	b	12258 <__assert_fail@plt+0x1394>
   12268:	andeq	r7, r2, r0, ror #2
   1226c:	andeq	r5, r1, r8, ror sp
   12270:	andeq	r7, r2, r0, asr r1
   12274:	andeq	r5, r1, r8, asr #25
   12278:	andeq	r5, r1, r4, asr #23
   1227c:	andeq	r5, r1, r8, asr sp
   12280:	andeq	r5, r1, ip, ror #26
   12284:	andeq	r5, r1, ip, ror sp
   12288:	ldr	r3, [pc, #52]	; 122c4 <__assert_fail@plt+0x1400>
   1228c:	ldrb	r3, [r3, #40]	; 0x28
   12290:	cmp	r3, #0
   12294:	bxeq	lr
   12298:	push	{r4, lr}
   1229c:	ldr	r3, [pc, #36]	; 122c8 <__assert_fail@plt+0x1404>
   122a0:	ldr	r0, [r3]
   122a4:	bl	12484 <__assert_fail@plt+0x15c0>
   122a8:	cmp	r0, #0
   122ac:	popeq	{r4, pc}
   122b0:	bl	10de0 <__errno_location@plt>
   122b4:	ldr	r2, [pc, #16]	; 122cc <__assert_fail@plt+0x1408>
   122b8:	ldr	r1, [r0]
   122bc:	mov	r0, #1
   122c0:	bl	10d74 <error@plt>
   122c4:	andeq	r7, r2, r0, ror #2
   122c8:	andeq	r7, r2, r0, asr r1
   122cc:	andeq	r5, r1, r8, ror sp
   122d0:	push	{r4, lr}
   122d4:	mov	r2, #5
   122d8:	ldr	r1, [pc, #44]	; 1230c <__assert_fail@plt+0x1448>
   122dc:	mov	r0, #0
   122e0:	bl	10d08 <dcgettext@plt>
   122e4:	ldr	r4, [pc, #36]	; 12310 <__assert_fail@plt+0x144c>
   122e8:	ldr	r1, [r4]
   122ec:	bl	10c78 <fputs_unlocked@plt>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #24]	; 12314 <__assert_fail@plt+0x1450>
   122f8:	mov	r0, #0
   122fc:	bl	10d08 <dcgettext@plt>
   12300:	ldr	r1, [r4]
   12304:	bl	10c78 <fputs_unlocked@plt>
   12308:	pop	{r4, pc}
   1230c:	andeq	r5, r1, r0, lsl #27
   12310:	andeq	r7, r2, r4, asr r1
   12314:	andeq	r5, r1, r0, asr #27
   12318:	ldr	r3, [pc, #4]	; 12324 <__assert_fail@plt+0x1460>
   1231c:	str	r0, [r3]
   12320:	bx	lr
   12324:	muleq	r2, ip, r1
   12328:	ldr	r3, [pc, #4]	; 12334 <__assert_fail@plt+0x1470>
   1232c:	strb	r0, [r3, #4]
   12330:	bx	lr
   12334:	muleq	r2, ip, r1
   12338:	push	{r4, r5, r6, lr}
   1233c:	sub	sp, sp, #8
   12340:	ldr	r3, [pc, #200]	; 12410 <__assert_fail@plt+0x154c>
   12344:	ldr	r0, [r3]
   12348:	bl	14e2c <__assert_fail@plt+0x3f68>
   1234c:	cmp	r0, #0
   12350:	beq	12374 <__assert_fail@plt+0x14b0>
   12354:	ldr	r3, [pc, #184]	; 12414 <__assert_fail@plt+0x1550>
   12358:	ldrb	r3, [r3, #4]
   1235c:	cmp	r3, #0
   12360:	beq	12390 <__assert_fail@plt+0x14cc>
   12364:	bl	10de0 <__errno_location@plt>
   12368:	ldr	r3, [r0]
   1236c:	cmp	r3, #32
   12370:	bne	12390 <__assert_fail@plt+0x14cc>
   12374:	ldr	r3, [pc, #156]	; 12418 <__assert_fail@plt+0x1554>
   12378:	ldr	r0, [r3]
   1237c:	bl	14e2c <__assert_fail@plt+0x3f68>
   12380:	cmp	r0, #0
   12384:	bne	12404 <__assert_fail@plt+0x1540>
   12388:	add	sp, sp, #8
   1238c:	pop	{r4, r5, r6, pc}
   12390:	mov	r2, #5
   12394:	ldr	r1, [pc, #128]	; 1241c <__assert_fail@plt+0x1558>
   12398:	mov	r0, #0
   1239c:	bl	10d08 <dcgettext@plt>
   123a0:	mov	r4, r0
   123a4:	ldr	r3, [pc, #104]	; 12414 <__assert_fail@plt+0x1550>
   123a8:	ldr	r5, [r3]
   123ac:	cmp	r5, #0
   123b0:	beq	123e8 <__assert_fail@plt+0x1524>
   123b4:	bl	10de0 <__errno_location@plt>
   123b8:	ldr	r6, [r0]
   123bc:	mov	r0, r5
   123c0:	bl	14058 <__assert_fail@plt+0x3194>
   123c4:	str	r4, [sp]
   123c8:	mov	r3, r0
   123cc:	ldr	r2, [pc, #76]	; 12420 <__assert_fail@plt+0x155c>
   123d0:	mov	r1, r6
   123d4:	mov	r0, #0
   123d8:	bl	10d74 <error@plt>
   123dc:	ldr	r3, [pc, #64]	; 12424 <__assert_fail@plt+0x1560>
   123e0:	ldr	r0, [r3]
   123e4:	bl	10cc0 <_exit@plt>
   123e8:	bl	10de0 <__errno_location@plt>
   123ec:	mov	r3, r4
   123f0:	ldr	r2, [pc, #48]	; 12428 <__assert_fail@plt+0x1564>
   123f4:	ldr	r1, [r0]
   123f8:	mov	r0, #0
   123fc:	bl	10d74 <error@plt>
   12400:	b	123dc <__assert_fail@plt+0x1518>
   12404:	ldr	r3, [pc, #24]	; 12424 <__assert_fail@plt+0x1560>
   12408:	ldr	r0, [r3]
   1240c:	bl	10cc0 <_exit@plt>
   12410:	andeq	r7, r2, r4, asr r1
   12414:	muleq	r2, ip, r1
   12418:	andeq	r7, r2, r8, asr #2
   1241c:	andeq	r5, r1, r8, lsl #22
   12420:	andeq	r5, r1, r0, asr #30
   12424:	strdeq	r7, [r2], -r0
   12428:	andeq	r5, r1, r8, asr #25
   1242c:	push	{r4, r5, lr}
   12430:	sub	sp, sp, #20
   12434:	ldr	r1, [sp, #40]	; 0x28
   12438:	str	r1, [sp, #8]
   1243c:	ldrd	r4, [sp, #32]
   12440:	strd	r4, [sp]
   12444:	bl	10c9c <posix_fadvise64@plt>
   12448:	add	sp, sp, #20
   1244c:	pop	{r4, r5, pc}
   12450:	cmp	r0, #0
   12454:	bxeq	lr
   12458:	push	{r4, lr}
   1245c:	sub	sp, sp, #16
   12460:	mov	r4, r1
   12464:	bl	10e10 <fileno@plt>
   12468:	str	r4, [sp, #8]
   1246c:	mov	r2, #0
   12470:	mov	r3, #0
   12474:	strd	r2, [sp]
   12478:	bl	10c9c <posix_fadvise64@plt>
   1247c:	add	sp, sp, #16
   12480:	pop	{r4, pc}
   12484:	push	{r4, r5, r6, lr}
   12488:	sub	sp, sp, #8
   1248c:	mov	r4, r0
   12490:	bl	10e10 <fileno@plt>
   12494:	cmp	r0, #0
   12498:	blt	12510 <__assert_fail@plt+0x164c>
   1249c:	mov	r0, r4
   124a0:	bl	10d98 <__freading@plt>
   124a4:	cmp	r0, #0
   124a8:	beq	124dc <__assert_fail@plt+0x1618>
   124ac:	mov	r0, r4
   124b0:	bl	10e10 <fileno@plt>
   124b4:	mov	r3, #1
   124b8:	str	r3, [sp]
   124bc:	mov	r2, #0
   124c0:	mov	r3, #0
   124c4:	bl	10d44 <lseek64@plt>
   124c8:	mvn	r2, #0
   124cc:	mvn	r3, #0
   124d0:	cmp	r1, r3
   124d4:	cmpeq	r0, r2
   124d8:	beq	1251c <__assert_fail@plt+0x1658>
   124dc:	mov	r0, r4
   124e0:	bl	1252c <__assert_fail@plt+0x1668>
   124e4:	cmp	r0, #0
   124e8:	beq	1251c <__assert_fail@plt+0x1658>
   124ec:	bl	10de0 <__errno_location@plt>
   124f0:	mov	r5, r0
   124f4:	ldr	r6, [r0]
   124f8:	mov	r0, r4
   124fc:	bl	10e28 <fclose@plt>
   12500:	cmp	r6, #0
   12504:	strne	r6, [r5]
   12508:	mvnne	r0, #0
   1250c:	b	12524 <__assert_fail@plt+0x1660>
   12510:	mov	r0, r4
   12514:	bl	10e28 <fclose@plt>
   12518:	b	12524 <__assert_fail@plt+0x1660>
   1251c:	mov	r0, r4
   12520:	bl	10e28 <fclose@plt>
   12524:	add	sp, sp, #8
   12528:	pop	{r4, r5, r6, pc}
   1252c:	push	{r4, lr}
   12530:	sub	sp, sp, #8
   12534:	subs	r4, r0, #0
   12538:	beq	1254c <__assert_fail@plt+0x1688>
   1253c:	mov	r0, r4
   12540:	bl	10d98 <__freading@plt>
   12544:	cmp	r0, #0
   12548:	bne	1255c <__assert_fail@plt+0x1698>
   1254c:	mov	r0, r4
   12550:	bl	10ca8 <fflush@plt>
   12554:	add	sp, sp, #8
   12558:	pop	{r4, pc}
   1255c:	ldr	r3, [r4]
   12560:	tst	r3, #256	; 0x100
   12564:	bne	12574 <__assert_fail@plt+0x16b0>
   12568:	mov	r0, r4
   1256c:	bl	10ca8 <fflush@plt>
   12570:	b	12554 <__assert_fail@plt+0x1690>
   12574:	mov	r3, #1
   12578:	str	r3, [sp]
   1257c:	mov	r2, #0
   12580:	mov	r3, #0
   12584:	mov	r0, r4
   12588:	bl	125e8 <__assert_fail@plt+0x1724>
   1258c:	b	12568 <__assert_fail@plt+0x16a4>
   12590:	push	{r4, r5, lr}
   12594:	sub	sp, sp, #12
   12598:	mov	r5, r0
   1259c:	bl	10de0 <__errno_location@plt>
   125a0:	mov	r4, r0
   125a4:	ldr	r3, [r0]
   125a8:	str	r3, [sp]
   125ac:	str	r3, [sp, #4]
   125b0:	mov	r3, #0
   125b4:	str	r3, [r0]
   125b8:	mov	r0, r5
   125bc:	bl	10cb4 <free@plt>
   125c0:	ldr	r3, [r4]
   125c4:	cmp	r3, #0
   125c8:	moveq	r3, #4
   125cc:	movne	r3, #0
   125d0:	add	r2, sp, #8
   125d4:	add	r3, r2, r3
   125d8:	ldr	r3, [r3, #-8]
   125dc:	str	r3, [r4]
   125e0:	add	sp, sp, #12
   125e4:	pop	{r4, r5, pc}
   125e8:	push	{r4, r5, r6, r7, lr}
   125ec:	sub	sp, sp, #12
   125f0:	mov	r4, r0
   125f4:	mov	r6, r2
   125f8:	mov	r7, r3
   125fc:	ldr	r5, [sp, #32]
   12600:	ldr	r2, [r0, #8]
   12604:	ldr	r3, [r0, #4]
   12608:	cmp	r2, r3
   1260c:	beq	1262c <__assert_fail@plt+0x1768>
   12610:	str	r5, [sp]
   12614:	mov	r2, r6
   12618:	mov	r3, r7
   1261c:	mov	r0, r4
   12620:	bl	10e34 <fseeko64@plt>
   12624:	add	sp, sp, #12
   12628:	pop	{r4, r5, r6, r7, pc}
   1262c:	ldr	r2, [r0, #20]
   12630:	ldr	r3, [r0, #16]
   12634:	cmp	r2, r3
   12638:	bne	12610 <__assert_fail@plt+0x174c>
   1263c:	ldr	r3, [r0, #36]	; 0x24
   12640:	cmp	r3, #0
   12644:	bne	12610 <__assert_fail@plt+0x174c>
   12648:	bl	10e10 <fileno@plt>
   1264c:	str	r5, [sp]
   12650:	mov	r2, r6
   12654:	mov	r3, r7
   12658:	bl	10d44 <lseek64@plt>
   1265c:	mvn	r2, #0
   12660:	mvn	r3, #0
   12664:	cmp	r1, r3
   12668:	cmpeq	r0, r2
   1266c:	beq	12688 <__assert_fail@plt+0x17c4>
   12670:	ldr	r3, [r4]
   12674:	bic	r3, r3, #16
   12678:	str	r3, [r4]
   1267c:	strd	r0, [r4, #80]	; 0x50
   12680:	mov	r0, #0
   12684:	b	12624 <__assert_fail@plt+0x1760>
   12688:	mvn	r0, #0
   1268c:	b	12624 <__assert_fail@plt+0x1760>
   12690:	push	{r4, r5, r6, lr}
   12694:	subs	r4, r0, #0
   12698:	beq	12710 <__assert_fail@plt+0x184c>
   1269c:	mov	r1, #47	; 0x2f
   126a0:	mov	r0, r4
   126a4:	bl	10e64 <strrchr@plt>
   126a8:	cmp	r0, #0
   126ac:	addne	r5, r0, #1
   126b0:	moveq	r5, r4
   126b4:	sub	r3, r5, r4
   126b8:	cmp	r3, #6
   126bc:	ble	126fc <__assert_fail@plt+0x1838>
   126c0:	mov	r2, #7
   126c4:	ldr	r1, [pc, #96]	; 1272c <__assert_fail@plt+0x1868>
   126c8:	sub	r0, r5, #7
   126cc:	bl	10ea0 <strncmp@plt>
   126d0:	cmp	r0, #0
   126d4:	bne	126fc <__assert_fail@plt+0x1838>
   126d8:	mov	r2, #3
   126dc:	ldr	r1, [pc, #76]	; 12730 <__assert_fail@plt+0x186c>
   126e0:	mov	r0, r5
   126e4:	bl	10ea0 <strncmp@plt>
   126e8:	cmp	r0, #0
   126ec:	addeq	r4, r5, #3
   126f0:	ldreq	r3, [pc, #60]	; 12734 <__assert_fail@plt+0x1870>
   126f4:	streq	r4, [r3]
   126f8:	movne	r4, r5
   126fc:	ldr	r3, [pc, #52]	; 12738 <__assert_fail@plt+0x1874>
   12700:	str	r4, [r3]
   12704:	ldr	r3, [pc, #48]	; 1273c <__assert_fail@plt+0x1878>
   12708:	str	r4, [r3]
   1270c:	pop	{r4, r5, r6, pc}
   12710:	ldr	r3, [pc, #40]	; 12740 <__assert_fail@plt+0x187c>
   12714:	ldr	r3, [r3]
   12718:	mov	r2, #55	; 0x37
   1271c:	mov	r1, #1
   12720:	ldr	r0, [pc, #28]	; 12744 <__assert_fail@plt+0x1880>
   12724:	bl	10d38 <fwrite@plt>
   12728:	bl	10eac <abort@plt>
   1272c:	andeq	r5, r1, r0, lsl #31
   12730:	andeq	r5, r1, r8, lsl #31
   12734:	andeq	r7, r2, r8, lsr r1
   12738:	andeq	r7, r2, r4, lsr #3
   1273c:	andeq	r7, r2, ip, lsr r1
   12740:	andeq	r7, r2, r8, asr #2
   12744:	andeq	r5, r1, r8, asr #30
   12748:	push	{r4, r5, r6, lr}
   1274c:	mov	r5, r0
   12750:	mov	r4, r1
   12754:	mov	r2, #48	; 0x30
   12758:	mov	r1, #0
   1275c:	bl	10df8 <memset@plt>
   12760:	cmp	r4, #10
   12764:	beq	12774 <__assert_fail@plt+0x18b0>
   12768:	str	r4, [r5]
   1276c:	mov	r0, r5
   12770:	pop	{r4, r5, r6, pc}
   12774:	bl	10eac <abort@plt>
   12778:	push	{r4, r5, r6, lr}
   1277c:	mov	r4, r0
   12780:	mov	r5, r1
   12784:	mov	r2, #5
   12788:	mov	r1, r0
   1278c:	mov	r0, #0
   12790:	bl	10d08 <dcgettext@plt>
   12794:	cmp	r4, r0
   12798:	popne	{r4, r5, r6, pc}
   1279c:	bl	14ea4 <__assert_fail@plt+0x3fe0>
   127a0:	ldrb	r3, [r0]
   127a4:	bic	r3, r3, #32
   127a8:	cmp	r3, #85	; 0x55
   127ac:	beq	12828 <__assert_fail@plt+0x1964>
   127b0:	cmp	r3, #71	; 0x47
   127b4:	bne	12884 <__assert_fail@plt+0x19c0>
   127b8:	ldrb	r3, [r0, #1]
   127bc:	bic	r3, r3, #32
   127c0:	cmp	r3, #66	; 0x42
   127c4:	bne	12884 <__assert_fail@plt+0x19c0>
   127c8:	ldrb	r3, [r0, #2]
   127cc:	cmp	r3, #49	; 0x31
   127d0:	bne	12884 <__assert_fail@plt+0x19c0>
   127d4:	ldrb	r3, [r0, #3]
   127d8:	cmp	r3, #56	; 0x38
   127dc:	bne	12884 <__assert_fail@plt+0x19c0>
   127e0:	ldrb	r3, [r0, #4]
   127e4:	cmp	r3, #48	; 0x30
   127e8:	bne	12884 <__assert_fail@plt+0x19c0>
   127ec:	ldrb	r3, [r0, #5]
   127f0:	cmp	r3, #51	; 0x33
   127f4:	bne	12884 <__assert_fail@plt+0x19c0>
   127f8:	ldrb	r3, [r0, #6]
   127fc:	cmp	r3, #48	; 0x30
   12800:	bne	12884 <__assert_fail@plt+0x19c0>
   12804:	ldrb	r3, [r0, #7]
   12808:	cmp	r3, #0
   1280c:	bne	12884 <__assert_fail@plt+0x19c0>
   12810:	ldrb	r2, [r4]
   12814:	ldr	r3, [pc, #124]	; 12898 <__assert_fail@plt+0x19d4>
   12818:	ldr	r0, [pc, #124]	; 1289c <__assert_fail@plt+0x19d8>
   1281c:	cmp	r2, #96	; 0x60
   12820:	movne	r0, r3
   12824:	pop	{r4, r5, r6, pc}
   12828:	ldrb	r3, [r0, #1]
   1282c:	bic	r3, r3, #32
   12830:	cmp	r3, #84	; 0x54
   12834:	bne	12884 <__assert_fail@plt+0x19c0>
   12838:	ldrb	r3, [r0, #2]
   1283c:	bic	r3, r3, #32
   12840:	cmp	r3, #70	; 0x46
   12844:	bne	12884 <__assert_fail@plt+0x19c0>
   12848:	ldrb	r3, [r0, #3]
   1284c:	cmp	r3, #45	; 0x2d
   12850:	bne	12884 <__assert_fail@plt+0x19c0>
   12854:	ldrb	r3, [r0, #4]
   12858:	cmp	r3, #56	; 0x38
   1285c:	bne	12884 <__assert_fail@plt+0x19c0>
   12860:	ldrb	r3, [r0, #5]
   12864:	cmp	r3, #0
   12868:	bne	12884 <__assert_fail@plt+0x19c0>
   1286c:	ldrb	r2, [r4]
   12870:	ldr	r3, [pc, #40]	; 128a0 <__assert_fail@plt+0x19dc>
   12874:	ldr	r0, [pc, #40]	; 128a4 <__assert_fail@plt+0x19e0>
   12878:	cmp	r2, #96	; 0x60
   1287c:	movne	r0, r3
   12880:	pop	{r4, r5, r6, pc}
   12884:	ldr	r3, [pc, #28]	; 128a8 <__assert_fail@plt+0x19e4>
   12888:	ldr	r0, [pc, #28]	; 128ac <__assert_fail@plt+0x19e8>
   1288c:	cmp	r5, #9
   12890:	movne	r0, r3
   12894:	pop	{r4, r5, r6, pc}
   12898:	andeq	r5, r1, r4, ror #31
   1289c:	strdeq	r5, [r1], -r0
   128a0:	andeq	r5, r1, r0, ror #31
   128a4:	strdeq	r5, [r1], -r4
   128a8:	andeq	r5, r1, r8, ror #31
   128ac:	andeq	r5, r1, ip, ror #31
   128b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128b4:	sub	sp, sp, #116	; 0x74
   128b8:	str	r0, [sp, #36]	; 0x24
   128bc:	mov	sl, r1
   128c0:	str	r2, [sp, #52]	; 0x34
   128c4:	str	r3, [sp, #28]
   128c8:	ldr	r8, [sp, #152]	; 0x98
   128cc:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   128d0:	str	r0, [sp, #84]	; 0x54
   128d4:	ldr	r3, [sp, #156]	; 0x9c
   128d8:	lsr	r3, r3, #1
   128dc:	and	r3, r3, #1
   128e0:	str	r3, [sp, #32]
   128e4:	mov	r3, #1
   128e8:	str	r3, [sp, #40]	; 0x28
   128ec:	mov	r3, #0
   128f0:	str	r3, [sp, #80]	; 0x50
   128f4:	str	r3, [sp, #44]	; 0x2c
   128f8:	str	r3, [sp, #48]	; 0x30
   128fc:	str	r3, [sp, #60]	; 0x3c
   12900:	str	r3, [sp, #72]	; 0x48
   12904:	str	r3, [sp, #76]	; 0x4c
   12908:	mov	r7, sl
   1290c:	mov	sl, r8
   12910:	cmp	sl, #10
   12914:	ldrls	pc, [pc, sl, lsl #2]
   12918:	b	12ad0 <__assert_fail@plt+0x1c0c>
   1291c:	andeq	r2, r1, r0, lsl #19
   12920:	andeq	r2, r1, r0, asr r9
   12924:	andeq	r2, r1, ip, lsr #21
   12928:	andeq	r2, r1, r8, asr #18
   1292c:	andeq	r2, r1, r0, ror #20
   12930:	muleq	r1, r0, r9
   12934:	strdeq	r3, [r1], -ip
   12938:	ldrdeq	r2, [r1], -r4
   1293c:	andeq	r2, r1, ip, asr #19
   12940:	andeq	r2, r1, ip, asr #19
   12944:	andeq	r2, r1, ip, asr #19
   12948:	mov	r3, #1
   1294c:	str	r3, [sp, #48]	; 0x30
   12950:	mov	r3, #1
   12954:	str	r3, [sp, #32]
   12958:	str	r3, [sp, #60]	; 0x3c
   1295c:	ldr	r3, [pc, #4068]	; 13948 <__assert_fail@plt+0x2a84>
   12960:	str	r3, [sp, #72]	; 0x48
   12964:	mov	fp, #0
   12968:	mov	sl, #2
   1296c:	mov	r6, #0
   12970:	ldr	r3, [sp, #48]	; 0x30
   12974:	eor	r3, r3, #1
   12978:	str	r3, [sp, #68]	; 0x44
   1297c:	b	13264 <__assert_fail@plt+0x23a0>
   12980:	mov	r3, #0
   12984:	str	r3, [sp, #32]
   12988:	mov	fp, r3
   1298c:	b	1296c <__assert_fail@plt+0x1aa8>
   12990:	ldr	r3, [sp, #32]
   12994:	cmp	r3, #0
   12998:	bne	12aec <__assert_fail@plt+0x1c28>
   1299c:	cmp	r7, #0
   129a0:	beq	12b0c <__assert_fail@plt+0x1c48>
   129a4:	ldr	r3, [sp, #36]	; 0x24
   129a8:	mov	r2, #34	; 0x22
   129ac:	strb	r2, [r3]
   129b0:	mov	r3, #1
   129b4:	str	r3, [sp, #48]	; 0x30
   129b8:	str	r3, [sp, #60]	; 0x3c
   129bc:	ldr	r3, [pc, #3980]	; 13950 <__assert_fail@plt+0x2a8c>
   129c0:	str	r3, [sp, #72]	; 0x48
   129c4:	mov	fp, #1
   129c8:	b	1296c <__assert_fail@plt+0x1aa8>
   129cc:	cmp	sl, #10
   129d0:	beq	129f4 <__assert_fail@plt+0x1b30>
   129d4:	mov	r1, sl
   129d8:	ldr	r0, [pc, #3948]	; 1394c <__assert_fail@plt+0x2a88>
   129dc:	bl	12778 <__assert_fail@plt+0x18b4>
   129e0:	str	r0, [sp, #164]	; 0xa4
   129e4:	mov	r1, sl
   129e8:	ldr	r0, [pc, #3928]	; 13948 <__assert_fail@plt+0x2a84>
   129ec:	bl	12778 <__assert_fail@plt+0x18b4>
   129f0:	str	r0, [sp, #168]	; 0xa8
   129f4:	ldr	r3, [sp, #32]
   129f8:	cmp	r3, #0
   129fc:	movne	fp, #0
   12a00:	bne	12a38 <__assert_fail@plt+0x1b74>
   12a04:	ldr	r3, [sp, #164]	; 0xa4
   12a08:	ldrb	r3, [r3]
   12a0c:	cmp	r3, #0
   12a10:	beq	12a58 <__assert_fail@plt+0x1b94>
   12a14:	ldr	r2, [sp, #164]	; 0xa4
   12a18:	mov	fp, #0
   12a1c:	ldr	r1, [sp, #36]	; 0x24
   12a20:	cmp	r7, fp
   12a24:	strbhi	r3, [r1, fp]
   12a28:	add	fp, fp, #1
   12a2c:	ldrb	r3, [r2, #1]!
   12a30:	cmp	r3, #0
   12a34:	bne	12a20 <__assert_fail@plt+0x1b5c>
   12a38:	ldr	r0, [sp, #168]	; 0xa8
   12a3c:	bl	10dd4 <strlen@plt>
   12a40:	str	r0, [sp, #60]	; 0x3c
   12a44:	ldr	r3, [sp, #168]	; 0xa8
   12a48:	str	r3, [sp, #72]	; 0x48
   12a4c:	mov	r3, #1
   12a50:	str	r3, [sp, #48]	; 0x30
   12a54:	b	1296c <__assert_fail@plt+0x1aa8>
   12a58:	mov	fp, #0
   12a5c:	b	12a38 <__assert_fail@plt+0x1b74>
   12a60:	ldr	r3, [sp, #32]
   12a64:	cmp	r3, #0
   12a68:	bne	12b28 <__assert_fail@plt+0x1c64>
   12a6c:	mov	r3, #1
   12a70:	str	r3, [sp, #48]	; 0x30
   12a74:	cmp	r7, #0
   12a78:	beq	12b44 <__assert_fail@plt+0x1c80>
   12a7c:	ldr	r3, [sp, #36]	; 0x24
   12a80:	mov	r2, #39	; 0x27
   12a84:	strb	r2, [r3]
   12a88:	mov	r3, #0
   12a8c:	str	r3, [sp, #32]
   12a90:	mov	r3, #1
   12a94:	str	r3, [sp, #60]	; 0x3c
   12a98:	ldr	r3, [pc, #3752]	; 13948 <__assert_fail@plt+0x2a84>
   12a9c:	str	r3, [sp, #72]	; 0x48
   12aa0:	mov	fp, #1
   12aa4:	mov	sl, #2
   12aa8:	b	1296c <__assert_fail@plt+0x1aa8>
   12aac:	ldr	r3, [sp, #32]
   12ab0:	cmp	r3, #0
   12ab4:	beq	12a74 <__assert_fail@plt+0x1bb0>
   12ab8:	mov	r3, #1
   12abc:	str	r3, [sp, #60]	; 0x3c
   12ac0:	ldr	r3, [pc, #3712]	; 13948 <__assert_fail@plt+0x2a84>
   12ac4:	str	r3, [sp, #72]	; 0x48
   12ac8:	mov	fp, #0
   12acc:	b	1296c <__assert_fail@plt+0x1aa8>
   12ad0:	bl	10eac <abort@plt>
   12ad4:	mov	r3, #0
   12ad8:	str	r3, [sp, #32]
   12adc:	mov	r3, #1
   12ae0:	str	r3, [sp, #48]	; 0x30
   12ae4:	mov	fp, #0
   12ae8:	b	1296c <__assert_fail@plt+0x1aa8>
   12aec:	ldr	r3, [sp, #32]
   12af0:	str	r3, [sp, #48]	; 0x30
   12af4:	mov	r3, #1
   12af8:	str	r3, [sp, #60]	; 0x3c
   12afc:	ldr	r3, [pc, #3660]	; 13950 <__assert_fail@plt+0x2a8c>
   12b00:	str	r3, [sp, #72]	; 0x48
   12b04:	mov	fp, #0
   12b08:	b	1296c <__assert_fail@plt+0x1aa8>
   12b0c:	mov	r3, #1
   12b10:	str	r3, [sp, #48]	; 0x30
   12b14:	str	r3, [sp, #60]	; 0x3c
   12b18:	ldr	r3, [pc, #3632]	; 13950 <__assert_fail@plt+0x2a8c>
   12b1c:	str	r3, [sp, #72]	; 0x48
   12b20:	mov	fp, #1
   12b24:	b	1296c <__assert_fail@plt+0x1aa8>
   12b28:	mov	r3, #1
   12b2c:	str	r3, [sp, #60]	; 0x3c
   12b30:	ldr	r3, [pc, #3600]	; 13948 <__assert_fail@plt+0x2a84>
   12b34:	str	r3, [sp, #72]	; 0x48
   12b38:	mov	fp, #0
   12b3c:	mov	sl, #2
   12b40:	b	1296c <__assert_fail@plt+0x1aa8>
   12b44:	mov	r3, #0
   12b48:	str	r3, [sp, #32]
   12b4c:	mov	r3, #1
   12b50:	str	r3, [sp, #60]	; 0x3c
   12b54:	ldr	r3, [pc, #3564]	; 13948 <__assert_fail@plt+0x2a84>
   12b58:	str	r3, [sp, #72]	; 0x48
   12b5c:	mov	fp, #1
   12b60:	mov	sl, #2
   12b64:	b	1296c <__assert_fail@plt+0x1aa8>
   12b68:	mov	r3, #0
   12b6c:	str	r3, [sp, #56]	; 0x38
   12b70:	ldr	r3, [sp, #52]	; 0x34
   12b74:	add	r2, r3, r6
   12b78:	str	r2, [sp, #64]	; 0x40
   12b7c:	ldrb	r4, [r3, r6]
   12b80:	cmp	r4, #126	; 0x7e
   12b84:	ldrls	pc, [pc, r4, lsl #2]
   12b88:	b	133c4 <__assert_fail@plt+0x2500>
   12b8c:	andeq	r2, r1, r4, lsr #27
   12b90:	andeq	r3, r1, r4, asr #7
   12b94:	andeq	r3, r1, r4, asr #7
   12b98:	andeq	r3, r1, r4, asr #7
   12b9c:	andeq	r3, r1, r4, asr #7
   12ba0:	andeq	r3, r1, r4, asr #7
   12ba4:	andeq	r3, r1, r4, asr #7
   12ba8:	andeq	r3, r1, r0, lsl #2
   12bac:	muleq	r1, ip, sp
   12bb0:	strheq	r3, [r1], -r8
   12bb4:	strheq	r3, [r1], -r0
   12bb8:	andeq	r3, r1, r0, lsr #32
   12bbc:	andeq	r3, r1, r8, lsl r0
   12bc0:	muleq	r1, r4, sp
   12bc4:	andeq	r3, r1, r4, asr #7
   12bc8:	andeq	r3, r1, r4, asr #7
   12bcc:	andeq	r3, r1, r4, asr #7
   12bd0:	andeq	r3, r1, r4, asr #7
   12bd4:	andeq	r3, r1, r4, asr #7
   12bd8:	andeq	r3, r1, r4, asr #7
   12bdc:	andeq	r3, r1, r4, asr #7
   12be0:	andeq	r3, r1, r4, asr #7
   12be4:	andeq	r3, r1, r4, asr #7
   12be8:	andeq	r3, r1, r4, asr #7
   12bec:	andeq	r3, r1, r4, asr #7
   12bf0:	andeq	r3, r1, r4, asr #7
   12bf4:	andeq	r3, r1, r4, asr #7
   12bf8:	andeq	r3, r1, r4, asr #7
   12bfc:	andeq	r3, r1, r4, asr #7
   12c00:	andeq	r3, r1, r4, asr #7
   12c04:	andeq	r3, r1, r4, asr #7
   12c08:	andeq	r3, r1, r4, asr #7
   12c0c:	andeq	r3, r1, r4, asr r1
   12c10:	andeq	r3, r1, r0, asr r1
   12c14:	andeq	r3, r1, r0, asr r1
   12c18:	andeq	r3, r1, r8, lsr #2
   12c1c:	andeq	r3, r1, r0, asr r1
   12c20:	muleq	r1, r8, r7
   12c24:	andeq	r3, r1, r0, asr r1
   12c28:	andeq	r3, r1, r8, lsr #6
   12c2c:	andeq	r3, r1, r0, asr r1
   12c30:	andeq	r3, r1, r0, asr r1
   12c34:	andeq	r3, r1, r0, asr r1
   12c38:	muleq	r1, r8, r7
   12c3c:	muleq	r1, r8, r7
   12c40:	muleq	r1, r8, r7
   12c44:	muleq	r1, r8, r7
   12c48:	muleq	r1, r8, r7
   12c4c:	muleq	r1, r8, r7
   12c50:	muleq	r1, r8, r7
   12c54:	muleq	r1, r8, r7
   12c58:	muleq	r1, r8, r7
   12c5c:	muleq	r1, r8, r7
   12c60:	muleq	r1, r8, r7
   12c64:	muleq	r1, r8, r7
   12c68:	muleq	r1, r8, r7
   12c6c:	muleq	r1, r8, r7
   12c70:	muleq	r1, r8, r7
   12c74:	muleq	r1, r8, r7
   12c78:	andeq	r3, r1, r0, asr r1
   12c7c:	andeq	r3, r1, r0, asr r1
   12c80:	andeq	r3, r1, r0, asr r1
   12c84:	andeq	r3, r1, r0, asr r1
   12c88:	andeq	r2, r1, ip, lsr #29
   12c8c:	andeq	r3, r1, r4, asr #7
   12c90:	muleq	r1, r8, r7
   12c94:	muleq	r1, r8, r7
   12c98:	muleq	r1, r8, r7
   12c9c:	muleq	r1, r8, r7
   12ca0:	muleq	r1, r8, r7
   12ca4:	muleq	r1, r8, r7
   12ca8:	muleq	r1, r8, r7
   12cac:	muleq	r1, r8, r7
   12cb0:	muleq	r1, r8, r7
   12cb4:	muleq	r1, r8, r7
   12cb8:	muleq	r1, r8, r7
   12cbc:	muleq	r1, r8, r7
   12cc0:	muleq	r1, r8, r7
   12cc4:	muleq	r1, r8, r7
   12cc8:	muleq	r1, r8, r7
   12ccc:	muleq	r1, r8, r7
   12cd0:	muleq	r1, r8, r7
   12cd4:	muleq	r1, r8, r7
   12cd8:	muleq	r1, r8, r7
   12cdc:	muleq	r1, r8, r7
   12ce0:	muleq	r1, r8, r7
   12ce4:	muleq	r1, r8, r7
   12ce8:	muleq	r1, r8, r7
   12cec:	muleq	r1, r8, r7
   12cf0:	muleq	r1, r8, r7
   12cf4:	muleq	r1, r8, r7
   12cf8:	andeq	r3, r1, r0, asr r1
   12cfc:	andeq	r3, r1, r8, lsr #32
   12d00:	muleq	r1, r8, r7
   12d04:	andeq	r3, r1, r0, asr r1
   12d08:	muleq	r1, r8, r7
   12d0c:	andeq	r3, r1, r0, asr r1
   12d10:	muleq	r1, r8, r7
   12d14:	muleq	r1, r8, r7
   12d18:	muleq	r1, r8, r7
   12d1c:	muleq	r1, r8, r7
   12d20:	muleq	r1, r8, r7
   12d24:	muleq	r1, r8, r7
   12d28:	muleq	r1, r8, r7
   12d2c:	muleq	r1, r8, r7
   12d30:	muleq	r1, r8, r7
   12d34:	muleq	r1, r8, r7
   12d38:	muleq	r1, r8, r7
   12d3c:	muleq	r1, r8, r7
   12d40:	muleq	r1, r8, r7
   12d44:	muleq	r1, r8, r7
   12d48:	muleq	r1, r8, r7
   12d4c:	muleq	r1, r8, r7
   12d50:	muleq	r1, r8, r7
   12d54:	muleq	r1, r8, r7
   12d58:	muleq	r1, r8, r7
   12d5c:	muleq	r1, r8, r7
   12d60:	muleq	r1, r8, r7
   12d64:	muleq	r1, r8, r7
   12d68:	muleq	r1, r8, r7
   12d6c:	muleq	r1, r8, r7
   12d70:	muleq	r1, r8, r7
   12d74:	muleq	r1, r8, r7
   12d78:	andeq	r3, r1, r8, lsl #2
   12d7c:	andeq	r3, r1, r0, asr r1
   12d80:	andeq	r3, r1, r8, lsl #2
   12d84:	andeq	r3, r1, r8, lsr #2
   12d88:	mov	r3, #0
   12d8c:	str	r3, [sp, #56]	; 0x38
   12d90:	b	12b70 <__assert_fail@plt+0x1cac>
   12d94:	mov	r3, #114	; 0x72
   12d98:	b	130bc <__assert_fail@plt+0x21f8>
   12d9c:	mov	r3, #98	; 0x62
   12da0:	b	130d4 <__assert_fail@plt+0x2210>
   12da4:	ldr	r3, [sp, #48]	; 0x30
   12da8:	cmp	r3, #0
   12dac:	beq	12e94 <__assert_fail@plt+0x1fd0>
   12db0:	ldr	r3, [sp, #32]
   12db4:	cmp	r3, #0
   12db8:	bne	1391c <__assert_fail@plt+0x2a58>
   12dbc:	ldr	r3, [sp, #44]	; 0x2c
   12dc0:	eor	r3, r3, #1
   12dc4:	cmp	sl, #2
   12dc8:	movne	r3, #0
   12dcc:	andeq	r3, r3, #1
   12dd0:	cmp	r3, #0
   12dd4:	moveq	r2, fp
   12dd8:	beq	12e1c <__assert_fail@plt+0x1f58>
   12ddc:	cmp	r7, fp
   12de0:	ldrhi	r2, [sp, #36]	; 0x24
   12de4:	movhi	r1, #39	; 0x27
   12de8:	strbhi	r1, [r2, fp]
   12dec:	add	r2, fp, #1
   12df0:	cmp	r7, r2
   12df4:	ldrhi	r1, [sp, #36]	; 0x24
   12df8:	movhi	r0, #36	; 0x24
   12dfc:	strbhi	r0, [r1, r2]
   12e00:	add	r2, fp, #2
   12e04:	cmp	r7, r2
   12e08:	ldrhi	r1, [sp, #36]	; 0x24
   12e0c:	movhi	r0, #39	; 0x27
   12e10:	strbhi	r0, [r1, r2]
   12e14:	add	r2, fp, #3
   12e18:	str	r3, [sp, #44]	; 0x2c
   12e1c:	cmp	r7, r2
   12e20:	ldrhi	r3, [sp, #36]	; 0x24
   12e24:	movhi	r1, #92	; 0x5c
   12e28:	strbhi	r1, [r3, r2]
   12e2c:	add	fp, r2, #1
   12e30:	cmp	r5, #0
   12e34:	beq	137a0 <__assert_fail@plt+0x28dc>
   12e38:	add	r3, r6, #1
   12e3c:	ldr	r1, [sp, #28]
   12e40:	cmp	r1, r3
   12e44:	bls	137b0 <__assert_fail@plt+0x28ec>
   12e48:	ldr	r1, [sp, #52]	; 0x34
   12e4c:	ldrb	r3, [r1, r3]
   12e50:	sub	r3, r3, #48	; 0x30
   12e54:	uxtb	r3, r3
   12e58:	cmp	r3, #9
   12e5c:	bhi	137bc <__assert_fail@plt+0x28f8>
   12e60:	cmp	r7, fp
   12e64:	movhi	r3, #48	; 0x30
   12e68:	ldrhi	r1, [sp, #36]	; 0x24
   12e6c:	strbhi	r3, [r1, fp]
   12e70:	add	r3, r2, #2
   12e74:	cmp	r7, r3
   12e78:	movhi	r1, #48	; 0x30
   12e7c:	ldrhi	r0, [sp, #36]	; 0x24
   12e80:	strbhi	r1, [r0, r3]
   12e84:	add	fp, r2, #3
   12e88:	ldr	r8, [sp, #32]
   12e8c:	mov	r4, #48	; 0x30
   12e90:	b	1316c <__assert_fail@plt+0x22a8>
   12e94:	ldr	r3, [sp, #156]	; 0x9c
   12e98:	tst	r3, #1
   12e9c:	bne	13260 <__assert_fail@plt+0x239c>
   12ea0:	ldr	r5, [sp, #48]	; 0x30
   12ea4:	mov	r8, r5
   12ea8:	b	1316c <__assert_fail@plt+0x22a8>
   12eac:	cmp	sl, #2
   12eb0:	beq	12ec8 <__assert_fail@plt+0x2004>
   12eb4:	cmp	sl, #5
   12eb8:	beq	12ee0 <__assert_fail@plt+0x201c>
   12ebc:	mov	r8, #0
   12ec0:	mov	r5, r8
   12ec4:	b	1316c <__assert_fail@plt+0x22a8>
   12ec8:	ldr	r3, [sp, #32]
   12ecc:	cmp	r3, #0
   12ed0:	bne	13930 <__assert_fail@plt+0x2a6c>
   12ed4:	mov	r8, r3
   12ed8:	mov	r5, r3
   12edc:	b	1316c <__assert_fail@plt+0x22a8>
   12ee0:	ldr	r3, [sp, #156]	; 0x9c
   12ee4:	tst	r3, #4
   12ee8:	beq	137c8 <__assert_fail@plt+0x2904>
   12eec:	add	r3, r6, #2
   12ef0:	ldr	r2, [sp, #28]
   12ef4:	cmp	r2, r3
   12ef8:	bls	137d4 <__assert_fail@plt+0x2910>
   12efc:	ldr	r2, [sp, #52]	; 0x34
   12f00:	add	r2, r2, r6
   12f04:	ldrb	r2, [r2, #1]
   12f08:	cmp	r2, #63	; 0x3f
   12f0c:	movne	r8, #0
   12f10:	movne	r5, r8
   12f14:	bne	1316c <__assert_fail@plt+0x22a8>
   12f18:	ldr	r2, [sp, #52]	; 0x34
   12f1c:	ldrb	r2, [r2, r3]
   12f20:	sub	r1, r2, #33	; 0x21
   12f24:	cmp	r1, #29
   12f28:	ldrls	pc, [pc, r1, lsl #2]
   12f2c:	b	137e0 <__assert_fail@plt+0x291c>
   12f30:	andeq	r2, r1, r8, lsr #31
   12f34:	andeq	r3, r1, r0, ror #15
   12f38:	andeq	r3, r1, r0, ror #15
   12f3c:	andeq	r3, r1, r0, ror #15
   12f40:	andeq	r3, r1, r0, ror #15
   12f44:	andeq	r3, r1, r0, ror #15
   12f48:	andeq	r2, r1, r8, lsr #31
   12f4c:	andeq	r2, r1, r8, lsr #31
   12f50:	andeq	r2, r1, r8, lsr #31
   12f54:	andeq	r3, r1, r0, ror #15
   12f58:	andeq	r3, r1, r0, ror #15
   12f5c:	andeq	r3, r1, r0, ror #15
   12f60:	andeq	r2, r1, r8, lsr #31
   12f64:	andeq	r3, r1, r0, ror #15
   12f68:	andeq	r2, r1, r8, lsr #31
   12f6c:	andeq	r3, r1, r0, ror #15
   12f70:	andeq	r3, r1, r0, ror #15
   12f74:	andeq	r3, r1, r0, ror #15
   12f78:	andeq	r3, r1, r0, ror #15
   12f7c:	andeq	r3, r1, r0, ror #15
   12f80:	andeq	r3, r1, r0, ror #15
   12f84:	andeq	r3, r1, r0, ror #15
   12f88:	andeq	r3, r1, r0, ror #15
   12f8c:	andeq	r3, r1, r0, ror #15
   12f90:	andeq	r3, r1, r0, ror #15
   12f94:	andeq	r3, r1, r0, ror #15
   12f98:	andeq	r3, r1, r0, ror #15
   12f9c:	andeq	r2, r1, r8, lsr #31
   12fa0:	andeq	r2, r1, r8, lsr #31
   12fa4:	andeq	r2, r1, r8, lsr #31
   12fa8:	ldr	r1, [sp, #32]
   12fac:	cmp	r1, #0
   12fb0:	bne	139f0 <__assert_fail@plt+0x2b2c>
   12fb4:	cmp	r7, fp
   12fb8:	movhi	r1, #63	; 0x3f
   12fbc:	ldrhi	r0, [sp, #36]	; 0x24
   12fc0:	strbhi	r1, [r0, fp]
   12fc4:	add	r1, fp, #1
   12fc8:	cmp	r7, r1
   12fcc:	ldrhi	r0, [sp, #36]	; 0x24
   12fd0:	movhi	ip, #34	; 0x22
   12fd4:	strbhi	ip, [r0, r1]
   12fd8:	add	r1, fp, #2
   12fdc:	cmp	r7, r1
   12fe0:	ldrhi	r0, [sp, #36]	; 0x24
   12fe4:	movhi	ip, #34	; 0x22
   12fe8:	strbhi	ip, [r0, r1]
   12fec:	add	r1, fp, #3
   12ff0:	cmp	r7, r1
   12ff4:	movhi	r0, #63	; 0x3f
   12ff8:	ldrhi	ip, [sp, #36]	; 0x24
   12ffc:	strbhi	r0, [ip, r1]
   13000:	add	fp, fp, #4
   13004:	ldr	r5, [sp, #32]
   13008:	mov	r8, r5
   1300c:	mov	r4, r2
   13010:	mov	r6, r3
   13014:	b	1316c <__assert_fail@plt+0x22a8>
   13018:	mov	r3, #102	; 0x66
   1301c:	b	130d4 <__assert_fail@plt+0x2210>
   13020:	mov	r3, #118	; 0x76
   13024:	b	130d4 <__assert_fail@plt+0x2210>
   13028:	cmp	sl, #2
   1302c:	beq	13098 <__assert_fail@plt+0x21d4>
   13030:	ldr	r3, [sp, #48]	; 0x30
   13034:	ldr	r2, [sp, #32]
   13038:	and	r3, r3, r2
   1303c:	tst	r9, r3
   13040:	moveq	r3, r4
   13044:	beq	130d4 <__assert_fail@plt+0x2210>
   13048:	mov	r8, #0
   1304c:	mov	r5, r8
   13050:	eor	r5, r5, #1
   13054:	ldr	r3, [sp, #44]	; 0x2c
   13058:	and	r5, r5, r3
   1305c:	tst	r5, #255	; 0xff
   13060:	beq	13240 <__assert_fail@plt+0x237c>
   13064:	cmp	r7, fp
   13068:	ldrhi	r3, [sp, #36]	; 0x24
   1306c:	movhi	r2, #39	; 0x27
   13070:	strbhi	r2, [r3, fp]
   13074:	add	r3, fp, #1
   13078:	cmp	r7, r3
   1307c:	ldrhi	r2, [sp, #36]	; 0x24
   13080:	movhi	r1, #39	; 0x27
   13084:	strbhi	r1, [r2, r3]
   13088:	add	fp, fp, #2
   1308c:	mov	r3, #0
   13090:	str	r3, [sp, #44]	; 0x2c
   13094:	b	13240 <__assert_fail@plt+0x237c>
   13098:	ldr	r3, [sp, #32]
   1309c:	cmp	r3, #0
   130a0:	bne	1393c <__assert_fail@plt+0x2a78>
   130a4:	mov	r8, r3
   130a8:	mov	r5, r3
   130ac:	b	13050 <__assert_fail@plt+0x218c>
   130b0:	mov	r3, #110	; 0x6e
   130b4:	b	130bc <__assert_fail@plt+0x21f8>
   130b8:	mov	r3, #116	; 0x74
   130bc:	ldr	r2, [sp, #32]
   130c0:	cmp	sl, #2
   130c4:	movne	r2, #0
   130c8:	andeq	r2, r2, #1
   130cc:	cmp	r2, #0
   130d0:	bne	130f4 <__assert_fail@plt+0x2230>
   130d4:	ldr	r2, [sp, #48]	; 0x30
   130d8:	cmp	r2, #0
   130dc:	moveq	r8, r2
   130e0:	moveq	r5, r2
   130e4:	beq	1316c <__assert_fail@plt+0x22a8>
   130e8:	mov	r4, r3
   130ec:	mov	r8, #0
   130f0:	b	131c4 <__assert_fail@plt+0x2300>
   130f4:	mov	r8, sl
   130f8:	mov	sl, r7
   130fc:	b	13968 <__assert_fail@plt+0x2aa4>
   13100:	mov	r3, #97	; 0x61
   13104:	b	130d4 <__assert_fail@plt+0x2210>
   13108:	ldr	r3, [sp, #28]
   1310c:	cmn	r3, #1
   13110:	beq	1313c <__assert_fail@plt+0x2278>
   13114:	ldr	r3, [sp, #28]
   13118:	subs	r3, r3, #1
   1311c:	movne	r3, #1
   13120:	cmp	r3, #0
   13124:	bne	137ec <__assert_fail@plt+0x2928>
   13128:	cmp	r6, #0
   1312c:	beq	13154 <__assert_fail@plt+0x2290>
   13130:	mov	r8, #0
   13134:	mov	r5, r8
   13138:	b	1316c <__assert_fail@plt+0x22a8>
   1313c:	ldr	r3, [sp, #52]	; 0x34
   13140:	ldrb	r3, [r3, #1]
   13144:	adds	r3, r3, #0
   13148:	movne	r3, #1
   1314c:	b	13120 <__assert_fail@plt+0x225c>
   13150:	mov	r8, #0
   13154:	ldr	r5, [sp, #32]
   13158:	cmp	sl, #2
   1315c:	movne	r5, #0
   13160:	andeq	r5, r5, #1
   13164:	cmp	r5, #0
   13168:	bne	1331c <__assert_fail@plt+0x2458>
   1316c:	ldr	r3, [sp, #68]	; 0x44
   13170:	cmp	sl, #2
   13174:	orreq	r3, r3, #1
   13178:	eor	r3, r3, #1
   1317c:	ldr	r2, [sp, #32]
   13180:	orr	r3, r2, r3
   13184:	tst	r3, #255	; 0xff
   13188:	beq	131b8 <__assert_fail@plt+0x22f4>
   1318c:	ldr	r3, [sp, #160]	; 0xa0
   13190:	cmp	r3, #0
   13194:	beq	131b8 <__assert_fail@plt+0x22f4>
   13198:	lsr	r2, r4, #5
   1319c:	uxtb	r2, r2
   131a0:	and	r3, r4, #31
   131a4:	ldr	r1, [sp, #160]	; 0xa0
   131a8:	ldr	r2, [r1, r2, lsl #2]
   131ac:	lsr	r3, r2, r3
   131b0:	tst	r3, #1
   131b4:	bne	131c4 <__assert_fail@plt+0x2300>
   131b8:	ldr	r3, [sp, #56]	; 0x38
   131bc:	cmp	r3, #0
   131c0:	beq	13050 <__assert_fail@plt+0x218c>
   131c4:	ldr	r3, [sp, #32]
   131c8:	cmp	r3, #0
   131cc:	bne	139d8 <__assert_fail@plt+0x2b14>
   131d0:	ldr	r3, [sp, #44]	; 0x2c
   131d4:	eor	r3, r3, #1
   131d8:	cmp	sl, #2
   131dc:	movne	r3, #0
   131e0:	andeq	r3, r3, #1
   131e4:	cmp	r3, #0
   131e8:	beq	1322c <__assert_fail@plt+0x2368>
   131ec:	cmp	r7, fp
   131f0:	ldrhi	r2, [sp, #36]	; 0x24
   131f4:	movhi	r1, #39	; 0x27
   131f8:	strbhi	r1, [r2, fp]
   131fc:	add	r2, fp, #1
   13200:	cmp	r7, r2
   13204:	ldrhi	r1, [sp, #36]	; 0x24
   13208:	movhi	r0, #36	; 0x24
   1320c:	strbhi	r0, [r1, r2]
   13210:	add	r2, fp, #2
   13214:	cmp	r7, r2
   13218:	ldrhi	r1, [sp, #36]	; 0x24
   1321c:	movhi	r0, #39	; 0x27
   13220:	strbhi	r0, [r1, r2]
   13224:	add	fp, fp, #3
   13228:	str	r3, [sp, #44]	; 0x2c
   1322c:	cmp	r7, fp
   13230:	ldrhi	r3, [sp, #36]	; 0x24
   13234:	movhi	r2, #92	; 0x5c
   13238:	strbhi	r2, [r3, fp]
   1323c:	add	fp, fp, #1
   13240:	cmp	fp, r7
   13244:	ldrcc	r3, [sp, #36]	; 0x24
   13248:	strbcc	r4, [r3, fp]
   1324c:	add	fp, fp, #1
   13250:	ldr	r3, [sp, #40]	; 0x28
   13254:	cmp	r8, #0
   13258:	moveq	r3, #0
   1325c:	str	r3, [sp, #40]	; 0x28
   13260:	add	r6, r6, #1
   13264:	ldr	r3, [sp, #28]
   13268:	cmn	r3, #1
   1326c:	beq	137f8 <__assert_fail@plt+0x2934>
   13270:	ldr	r3, [sp, #28]
   13274:	subs	r8, r3, r6
   13278:	movne	r8, #1
   1327c:	cmp	r8, #0
   13280:	beq	1380c <__assert_fail@plt+0x2948>
   13284:	ldr	r5, [sp, #48]	; 0x30
   13288:	cmp	sl, #2
   1328c:	moveq	r5, #0
   13290:	andne	r5, r5, #1
   13294:	ldr	r3, [sp, #60]	; 0x3c
   13298:	adds	r9, r3, #0
   1329c:	movne	r9, #1
   132a0:	ands	r2, r5, r9
   132a4:	str	r2, [sp, #56]	; 0x38
   132a8:	beq	12b70 <__assert_fail@plt+0x1cac>
   132ac:	add	r4, r6, r3
   132b0:	ldr	r2, [sp, #28]
   132b4:	cmp	r3, #1
   132b8:	movls	r3, #0
   132bc:	movhi	r3, #1
   132c0:	cmn	r2, #1
   132c4:	movne	r3, #0
   132c8:	cmp	r3, #0
   132cc:	beq	132dc <__assert_fail@plt+0x2418>
   132d0:	ldr	r0, [sp, #52]	; 0x34
   132d4:	bl	10dd4 <strlen@plt>
   132d8:	str	r0, [sp, #28]
   132dc:	ldr	r3, [sp, #28]
   132e0:	cmp	r3, r4
   132e4:	bcc	12b68 <__assert_fail@plt+0x1ca4>
   132e8:	ldr	r2, [sp, #60]	; 0x3c
   132ec:	ldr	r1, [sp, #72]	; 0x48
   132f0:	ldr	r3, [sp, #52]	; 0x34
   132f4:	add	r0, r3, r6
   132f8:	bl	10cf0 <memcmp@plt>
   132fc:	cmp	r0, #0
   13300:	bne	12d88 <__assert_fail@plt+0x1ec4>
   13304:	ldr	r3, [sp, #32]
   13308:	cmp	r3, #0
   1330c:	beq	12b70 <__assert_fail@plt+0x1cac>
   13310:	mov	r8, sl
   13314:	mov	sl, r7
   13318:	b	13968 <__assert_fail@plt+0x2aa4>
   1331c:	mov	r8, sl
   13320:	mov	sl, r7
   13324:	b	13968 <__assert_fail@plt+0x2aa4>
   13328:	cmp	sl, #2
   1332c:	strne	r8, [sp, #80]	; 0x50
   13330:	movne	r5, #0
   13334:	bne	1316c <__assert_fail@plt+0x22a8>
   13338:	ldr	r3, [sp, #32]
   1333c:	cmp	r3, #0
   13340:	bne	13954 <__assert_fail@plt+0x2a90>
   13344:	ldr	r2, [sp, #76]	; 0x4c
   13348:	adds	r3, r7, #0
   1334c:	movne	r3, #1
   13350:	cmp	r2, #0
   13354:	movne	r3, #0
   13358:	cmp	r3, #0
   1335c:	movne	r3, #0
   13360:	bne	13390 <__assert_fail@plt+0x24cc>
   13364:	cmp	r7, fp
   13368:	ldrhi	r3, [sp, #36]	; 0x24
   1336c:	movhi	r2, #39	; 0x27
   13370:	strbhi	r2, [r3, fp]
   13374:	add	r3, fp, #1
   13378:	cmp	r7, r3
   1337c:	ldrhi	r2, [sp, #36]	; 0x24
   13380:	movhi	r1, #92	; 0x5c
   13384:	strbhi	r1, [r2, r3]
   13388:	mov	r3, r7
   1338c:	ldr	r7, [sp, #76]	; 0x4c
   13390:	add	r2, fp, #2
   13394:	cmp	r2, r3
   13398:	ldrcc	r1, [sp, #36]	; 0x24
   1339c:	movcc	r0, #39	; 0x27
   133a0:	strbcc	r0, [r1, r2]
   133a4:	add	fp, fp, #3
   133a8:	ldr	r2, [sp, #32]
   133ac:	mov	r5, r2
   133b0:	str	r8, [sp, #80]	; 0x50
   133b4:	str	r2, [sp, #44]	; 0x2c
   133b8:	str	r7, [sp, #76]	; 0x4c
   133bc:	mov	r7, r3
   133c0:	b	1316c <__assert_fail@plt+0x22a8>
   133c4:	ldr	r5, [sp, #84]	; 0x54
   133c8:	cmp	r5, #1
   133cc:	beq	133fc <__assert_fail@plt+0x2538>
   133d0:	mov	r3, #0
   133d4:	str	r3, [sp, #104]	; 0x68
   133d8:	str	r3, [sp, #108]	; 0x6c
   133dc:	ldr	r3, [sp, #28]
   133e0:	cmn	r3, #1
   133e4:	beq	13430 <__assert_fail@plt+0x256c>
   133e8:	mov	r3, #0
   133ec:	str	r4, [sp, #88]	; 0x58
   133f0:	str	fp, [sp, #92]	; 0x5c
   133f4:	mov	fp, r3
   133f8:	b	13558 <__assert_fail@plt+0x2694>
   133fc:	bl	10dbc <__ctype_b_loc@plt>
   13400:	ldr	r2, [r0]
   13404:	lsl	r3, r4, #1
   13408:	ldrh	r8, [r2, r3]
   1340c:	lsr	r8, r8, #14
   13410:	and	r8, r8, #1
   13414:	mov	r2, r5
   13418:	eor	r5, r8, #1
   1341c:	ldr	r3, [sp, #48]	; 0x30
   13420:	and	r5, r5, r3
   13424:	ands	r5, r5, #255	; 0xff
   13428:	beq	1316c <__assert_fail@plt+0x22a8>
   1342c:	b	135f0 <__assert_fail@plt+0x272c>
   13430:	ldr	r0, [sp, #52]	; 0x34
   13434:	bl	10dd4 <strlen@plt>
   13438:	str	r0, [sp, #28]
   1343c:	b	133e8 <__assert_fail@plt+0x2524>
   13440:	mov	r2, fp
   13444:	mov	r1, r4
   13448:	ldr	r4, [sp, #88]	; 0x58
   1344c:	ldr	fp, [sp, #92]	; 0x5c
   13450:	ldr	r0, [sp, #28]
   13454:	cmp	r0, r5
   13458:	bls	13624 <__assert_fail@plt+0x2760>
   1345c:	ldrb	r3, [r1]
   13460:	cmp	r3, #0
   13464:	beq	1362c <__assert_fail@plt+0x2768>
   13468:	mov	r3, r1
   1346c:	add	r2, r2, #1
   13470:	add	r1, r6, r2
   13474:	cmp	r0, r1
   13478:	bls	13634 <__assert_fail@plt+0x2770>
   1347c:	ldrb	r1, [r3, #1]!
   13480:	cmp	r1, #0
   13484:	bne	1346c <__assert_fail@plt+0x25a8>
   13488:	mov	r8, #0
   1348c:	b	135e8 <__assert_fail@plt+0x2724>
   13490:	cmp	r4, r5
   13494:	beq	13534 <__assert_fail@plt+0x2670>
   13498:	ldrb	r3, [r4, #1]!
   1349c:	sub	r3, r3, #91	; 0x5b
   134a0:	cmp	r3, #33	; 0x21
   134a4:	ldrls	pc, [pc, r3, lsl #2]
   134a8:	b	13490 <__assert_fail@plt+0x25cc>
   134ac:	andeq	r3, r1, r0, ror #18
   134b0:	andeq	r3, r1, r0, ror #18
   134b4:	muleq	r1, r0, r4
   134b8:	andeq	r3, r1, r0, ror #18
   134bc:	muleq	r1, r0, r4
   134c0:	andeq	r3, r1, r0, ror #18
   134c4:	muleq	r1, r0, r4
   134c8:	muleq	r1, r0, r4
   134cc:	muleq	r1, r0, r4
   134d0:	muleq	r1, r0, r4
   134d4:	muleq	r1, r0, r4
   134d8:	muleq	r1, r0, r4
   134dc:	muleq	r1, r0, r4
   134e0:	muleq	r1, r0, r4
   134e4:	muleq	r1, r0, r4
   134e8:	muleq	r1, r0, r4
   134ec:	muleq	r1, r0, r4
   134f0:	muleq	r1, r0, r4
   134f4:	muleq	r1, r0, r4
   134f8:	muleq	r1, r0, r4
   134fc:	muleq	r1, r0, r4
   13500:	muleq	r1, r0, r4
   13504:	muleq	r1, r0, r4
   13508:	muleq	r1, r0, r4
   1350c:	muleq	r1, r0, r4
   13510:	muleq	r1, r0, r4
   13514:	muleq	r1, r0, r4
   13518:	muleq	r1, r0, r4
   1351c:	muleq	r1, r0, r4
   13520:	muleq	r1, r0, r4
   13524:	muleq	r1, r0, r4
   13528:	muleq	r1, r0, r4
   1352c:	muleq	r1, r0, r4
   13530:	andeq	r3, r1, r0, ror #18
   13534:	ldr	r0, [sp, #100]	; 0x64
   13538:	bl	10d2c <iswprint@plt>
   1353c:	cmp	r0, #0
   13540:	moveq	r8, #0
   13544:	add	fp, fp, r9
   13548:	add	r0, sp, #104	; 0x68
   1354c:	bl	10cd8 <mbsinit@plt>
   13550:	cmp	r0, #0
   13554:	bne	135c8 <__assert_fail@plt+0x2704>
   13558:	add	r5, r6, fp
   1355c:	ldr	r3, [sp, #52]	; 0x34
   13560:	add	r4, r3, r5
   13564:	add	r3, sp, #104	; 0x68
   13568:	ldr	r2, [sp, #28]
   1356c:	sub	r2, r2, r5
   13570:	mov	r1, r4
   13574:	add	r0, sp, #100	; 0x64
   13578:	bl	14ed8 <__assert_fail@plt+0x4014>
   1357c:	subs	r9, r0, #0
   13580:	beq	1363c <__assert_fail@plt+0x2778>
   13584:	cmn	r9, #1
   13588:	beq	135d8 <__assert_fail@plt+0x2714>
   1358c:	cmn	r9, #2
   13590:	beq	13440 <__assert_fail@plt+0x257c>
   13594:	ldr	r3, [sp, #32]
   13598:	cmp	sl, #2
   1359c:	movne	r3, #0
   135a0:	andeq	r3, r3, #1
   135a4:	cmp	r3, #0
   135a8:	beq	13534 <__assert_fail@plt+0x2670>
   135ac:	cmp	r9, #1
   135b0:	bls	13534 <__assert_fail@plt+0x2670>
   135b4:	sub	r3, r9, #1
   135b8:	add	r5, r3, r5
   135bc:	ldr	r3, [sp, #52]	; 0x34
   135c0:	add	r5, r3, r5
   135c4:	b	13498 <__assert_fail@plt+0x25d4>
   135c8:	ldr	r4, [sp, #88]	; 0x58
   135cc:	mov	r2, fp
   135d0:	ldr	fp, [sp, #92]	; 0x5c
   135d4:	b	135e8 <__assert_fail@plt+0x2724>
   135d8:	ldr	r4, [sp, #88]	; 0x58
   135dc:	mov	r2, fp
   135e0:	ldr	fp, [sp, #92]	; 0x5c
   135e4:	mov	r8, #0
   135e8:	cmp	r2, #1
   135ec:	bls	13418 <__assert_fail@plt+0x2554>
   135f0:	add	r1, r6, r2
   135f4:	ldr	ip, [sp, #64]	; 0x40
   135f8:	mov	r5, #0
   135fc:	eor	r3, r8, #1
   13600:	ldr	r2, [sp, #48]	; 0x30
   13604:	and	r3, r3, r2
   13608:	uxtb	r3, r3
   1360c:	ldr	r9, [sp, #32]
   13610:	ldr	lr, [sp, #44]	; 0x2c
   13614:	ldr	r2, [sp, #56]	; 0x38
   13618:	str	r8, [sp, #56]	; 0x38
   1361c:	ldr	r0, [sp, #36]	; 0x24
   13620:	b	136bc <__assert_fail@plt+0x27f8>
   13624:	mov	r8, #0
   13628:	b	135e8 <__assert_fail@plt+0x2724>
   1362c:	mov	r8, #0
   13630:	b	135e8 <__assert_fail@plt+0x2724>
   13634:	mov	r8, #0
   13638:	b	135e8 <__assert_fail@plt+0x2724>
   1363c:	ldr	r4, [sp, #88]	; 0x58
   13640:	mov	r2, fp
   13644:	ldr	fp, [sp, #92]	; 0x5c
   13648:	b	135e8 <__assert_fail@plt+0x2724>
   1364c:	cmp	r2, #0
   13650:	beq	13664 <__assert_fail@plt+0x27a0>
   13654:	cmp	r7, fp
   13658:	movhi	r2, #92	; 0x5c
   1365c:	strbhi	r2, [r0, fp]
   13660:	add	fp, fp, #1
   13664:	add	r8, r6, #1
   13668:	cmp	r1, r8
   1366c:	bls	13774 <__assert_fail@plt+0x28b0>
   13670:	eor	r2, r5, #1
   13674:	and	r2, r2, lr
   13678:	ands	r2, r2, #255	; 0xff
   1367c:	beq	13790 <__assert_fail@plt+0x28cc>
   13680:	cmp	r7, fp
   13684:	movhi	r2, #39	; 0x27
   13688:	strbhi	r2, [r0, fp]
   1368c:	add	r2, fp, #1
   13690:	cmp	r7, r2
   13694:	movhi	lr, #39	; 0x27
   13698:	strbhi	lr, [r0, r2]
   1369c:	add	fp, fp, #2
   136a0:	mov	r6, r8
   136a4:	mov	r2, r3
   136a8:	mov	lr, r3
   136ac:	cmp	r7, fp
   136b0:	strbhi	r4, [r0, fp]
   136b4:	add	fp, fp, #1
   136b8:	ldrb	r4, [ip, #1]!
   136bc:	cmp	r3, #0
   136c0:	beq	1364c <__assert_fail@plt+0x2788>
   136c4:	cmp	r9, #0
   136c8:	bne	139cc <__assert_fail@plt+0x2b08>
   136cc:	eor	r5, lr, #1
   136d0:	cmp	sl, #2
   136d4:	movne	r5, #0
   136d8:	andeq	r5, r5, #1
   136dc:	cmp	r5, #0
   136e0:	beq	13718 <__assert_fail@plt+0x2854>
   136e4:	cmp	r7, fp
   136e8:	movhi	lr, #39	; 0x27
   136ec:	strbhi	lr, [r0, fp]
   136f0:	add	lr, fp, #1
   136f4:	cmp	r7, lr
   136f8:	movhi	r8, #36	; 0x24
   136fc:	strbhi	r8, [r0, lr]
   13700:	add	lr, fp, #2
   13704:	cmp	r7, lr
   13708:	movhi	r8, #39	; 0x27
   1370c:	strbhi	r8, [r0, lr]
   13710:	add	fp, fp, #3
   13714:	mov	lr, r5
   13718:	cmp	r7, fp
   1371c:	movhi	r5, #92	; 0x5c
   13720:	strbhi	r5, [r0, fp]
   13724:	add	r5, fp, #1
   13728:	cmp	r7, r5
   1372c:	lsrhi	r8, r4, #6
   13730:	addhi	r8, r8, #48	; 0x30
   13734:	strbhi	r8, [r0, r5]
   13738:	add	r8, fp, #2
   1373c:	cmp	r7, r8
   13740:	lsrhi	r5, r4, #3
   13744:	andhi	r5, r5, #7
   13748:	addhi	r5, r5, #48	; 0x30
   1374c:	strbhi	r5, [r0, r8]
   13750:	add	fp, fp, #3
   13754:	and	r4, r4, #7
   13758:	add	r4, r4, #48	; 0x30
   1375c:	add	r5, r6, #1
   13760:	cmp	r1, r5
   13764:	bls	13780 <__assert_fail@plt+0x28bc>
   13768:	mov	r6, r5
   1376c:	mov	r5, r3
   13770:	b	136ac <__assert_fail@plt+0x27e8>
   13774:	str	lr, [sp, #44]	; 0x2c
   13778:	ldr	r8, [sp, #56]	; 0x38
   1377c:	b	13050 <__assert_fail@plt+0x218c>
   13780:	str	lr, [sp, #44]	; 0x2c
   13784:	ldr	r8, [sp, #56]	; 0x38
   13788:	mov	r5, r3
   1378c:	b	13050 <__assert_fail@plt+0x218c>
   13790:	mov	r6, r8
   13794:	b	136ac <__assert_fail@plt+0x27e8>
   13798:	mov	r5, #0
   1379c:	b	1316c <__assert_fail@plt+0x22a8>
   137a0:	mov	r8, r5
   137a4:	ldr	r5, [sp, #48]	; 0x30
   137a8:	mov	r4, #48	; 0x30
   137ac:	b	1316c <__assert_fail@plt+0x22a8>
   137b0:	ldr	r8, [sp, #32]
   137b4:	mov	r4, #48	; 0x30
   137b8:	b	1316c <__assert_fail@plt+0x22a8>
   137bc:	ldr	r8, [sp, #32]
   137c0:	mov	r4, #48	; 0x30
   137c4:	b	1316c <__assert_fail@plt+0x22a8>
   137c8:	mov	r8, #0
   137cc:	mov	r5, r8
   137d0:	b	1316c <__assert_fail@plt+0x22a8>
   137d4:	mov	r8, #0
   137d8:	mov	r5, r8
   137dc:	b	1316c <__assert_fail@plt+0x22a8>
   137e0:	mov	r8, #0
   137e4:	mov	r5, r8
   137e8:	b	1316c <__assert_fail@plt+0x22a8>
   137ec:	mov	r8, #0
   137f0:	mov	r5, r8
   137f4:	b	1316c <__assert_fail@plt+0x22a8>
   137f8:	ldr	r3, [sp, #52]	; 0x34
   137fc:	ldrb	r8, [r3, r6]
   13800:	adds	r8, r8, #0
   13804:	movne	r8, #1
   13808:	b	1327c <__assert_fail@plt+0x23b8>
   1380c:	cmp	sl, #2
   13810:	movne	r3, #0
   13814:	moveq	r3, #1
   13818:	ldr	r1, [sp, #32]
   1381c:	mov	r2, r1
   13820:	and	r2, r2, r3
   13824:	cmp	fp, #0
   13828:	movne	r2, #0
   1382c:	andeq	r2, r2, #1
   13830:	cmp	r2, #0
   13834:	bne	139e4 <__assert_fail@plt+0x2b20>
   13838:	eor	r2, r1, #1
   1383c:	and	r3, r3, r2
   13840:	ldr	r1, [sp, #80]	; 0x50
   13844:	tst	r1, r3
   13848:	beq	138c0 <__assert_fail@plt+0x29fc>
   1384c:	ldr	r3, [sp, #40]	; 0x28
   13850:	cmp	r3, #0
   13854:	bne	1387c <__assert_fail@plt+0x29b8>
   13858:	ldr	r1, [sp, #76]	; 0x4c
   1385c:	clz	r3, r7
   13860:	lsr	r3, r3, #5
   13864:	cmp	r1, #0
   13868:	moveq	r3, #0
   1386c:	cmp	r3, #0
   13870:	beq	138c0 <__assert_fail@plt+0x29fc>
   13874:	ldr	r7, [sp, #76]	; 0x4c
   13878:	b	12910 <__assert_fail@plt+0x1a4c>
   1387c:	ldr	r3, [sp, #168]	; 0xa8
   13880:	str	r3, [sp, #16]
   13884:	ldr	r3, [sp, #164]	; 0xa4
   13888:	str	r3, [sp, #12]
   1388c:	ldr	r3, [sp, #160]	; 0xa0
   13890:	str	r3, [sp, #8]
   13894:	ldr	r3, [sp, #156]	; 0x9c
   13898:	str	r3, [sp, #4]
   1389c:	mov	r3, #5
   138a0:	str	r3, [sp]
   138a4:	ldr	r3, [sp, #28]
   138a8:	ldr	r2, [sp, #52]	; 0x34
   138ac:	ldr	r1, [sp, #76]	; 0x4c
   138b0:	ldr	r0, [sp, #36]	; 0x24
   138b4:	bl	128b0 <__assert_fail@plt+0x19ec>
   138b8:	mov	fp, r0
   138bc:	b	139c0 <__assert_fail@plt+0x2afc>
   138c0:	mov	sl, r7
   138c4:	ldr	r3, [sp, #72]	; 0x48
   138c8:	cmp	r3, #0
   138cc:	moveq	r2, #0
   138d0:	andne	r2, r2, #1
   138d4:	cmp	r2, #0
   138d8:	beq	13908 <__assert_fail@plt+0x2a44>
   138dc:	mov	r2, r3
   138e0:	ldrb	r3, [r3]
   138e4:	cmp	r3, #0
   138e8:	beq	13908 <__assert_fail@plt+0x2a44>
   138ec:	ldr	r1, [sp, #36]	; 0x24
   138f0:	cmp	sl, fp
   138f4:	strbhi	r3, [r1, fp]
   138f8:	add	fp, fp, #1
   138fc:	ldrb	r3, [r2, #1]!
   13900:	cmp	r3, #0
   13904:	bne	138f0 <__assert_fail@plt+0x2a2c>
   13908:	cmp	sl, fp
   1390c:	movhi	r3, #0
   13910:	ldrhi	r2, [sp, #36]	; 0x24
   13914:	strbhi	r3, [r2, fp]
   13918:	b	139c0 <__assert_fail@plt+0x2afc>
   1391c:	mov	r8, sl
   13920:	mov	sl, r7
   13924:	ldr	r3, [sp, #32]
   13928:	str	r3, [sp, #48]	; 0x30
   1392c:	b	13968 <__assert_fail@plt+0x2aa4>
   13930:	mov	r8, sl
   13934:	mov	sl, r7
   13938:	b	13968 <__assert_fail@plt+0x2aa4>
   1393c:	mov	r8, sl
   13940:	mov	sl, r7
   13944:	b	13968 <__assert_fail@plt+0x2aa4>
   13948:	andeq	r5, r1, r8, ror #31
   1394c:	strdeq	r5, [r1], -r8
   13950:	andeq	r5, r1, ip, ror #31
   13954:	mov	r8, sl
   13958:	mov	sl, r7
   1395c:	b	13968 <__assert_fail@plt+0x2aa4>
   13960:	mov	r8, sl
   13964:	mov	sl, r7
   13968:	ldr	r3, [sp, #48]	; 0x30
   1396c:	cmp	r8, #2
   13970:	movne	r3, #0
   13974:	andeq	r3, r3, #1
   13978:	cmp	r3, #0
   1397c:	movne	r8, #4
   13980:	ldr	r3, [sp, #168]	; 0xa8
   13984:	str	r3, [sp, #16]
   13988:	ldr	r3, [sp, #164]	; 0xa4
   1398c:	str	r3, [sp, #12]
   13990:	mov	r3, #0
   13994:	str	r3, [sp, #8]
   13998:	ldr	r3, [sp, #156]	; 0x9c
   1399c:	bic	r3, r3, #2
   139a0:	str	r3, [sp, #4]
   139a4:	str	r8, [sp]
   139a8:	ldr	r3, [sp, #28]
   139ac:	ldr	r2, [sp, #52]	; 0x34
   139b0:	mov	r1, sl
   139b4:	ldr	r0, [sp, #36]	; 0x24
   139b8:	bl	128b0 <__assert_fail@plt+0x19ec>
   139bc:	mov	fp, r0
   139c0:	mov	r0, fp
   139c4:	add	sp, sp, #116	; 0x74
   139c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139cc:	mov	r8, sl
   139d0:	mov	sl, r7
   139d4:	b	13968 <__assert_fail@plt+0x2aa4>
   139d8:	mov	r8, sl
   139dc:	mov	sl, r7
   139e0:	b	13968 <__assert_fail@plt+0x2aa4>
   139e4:	mov	r8, sl
   139e8:	mov	sl, r7
   139ec:	b	13968 <__assert_fail@plt+0x2aa4>
   139f0:	mov	r8, sl
   139f4:	mov	sl, r7
   139f8:	b	13980 <__assert_fail@plt+0x2abc>
   139fc:	mov	r3, #1
   13a00:	str	r3, [sp, #32]
   13a04:	str	r3, [sp, #48]	; 0x30
   13a08:	str	r3, [sp, #60]	; 0x3c
   13a0c:	ldr	r3, [pc, #-196]	; 13950 <__assert_fail@plt+0x2a8c>
   13a10:	str	r3, [sp, #72]	; 0x48
   13a14:	mov	fp, #0
   13a18:	mov	sl, #5
   13a1c:	b	1296c <__assert_fail@plt+0x1aa8>
   13a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a24:	sub	sp, sp, #52	; 0x34
   13a28:	mov	r5, r0
   13a2c:	str	r1, [sp, #24]
   13a30:	str	r2, [sp, #28]
   13a34:	mov	r4, r3
   13a38:	bl	10de0 <__errno_location@plt>
   13a3c:	str	r0, [sp, #32]
   13a40:	ldr	r3, [r0]
   13a44:	str	r3, [sp, #36]	; 0x24
   13a48:	ldr	r3, [pc, #396]	; 13bdc <__assert_fail@plt+0x2d18>
   13a4c:	ldr	r6, [r3]
   13a50:	cmn	r5, #-2147483647	; 0x80000001
   13a54:	movne	r3, #0
   13a58:	moveq	r3, #1
   13a5c:	orrs	r3, r3, r5, lsr #31
   13a60:	bne	13ba0 <__assert_fail@plt+0x2cdc>
   13a64:	ldr	r3, [pc, #368]	; 13bdc <__assert_fail@plt+0x2d18>
   13a68:	ldr	r2, [r3, #4]
   13a6c:	cmp	r5, r2
   13a70:	blt	13ad8 <__assert_fail@plt+0x2c14>
   13a74:	str	r2, [sp, #44]	; 0x2c
   13a78:	add	r3, r3, #8
   13a7c:	cmp	r6, r3
   13a80:	beq	13ba4 <__assert_fail@plt+0x2ce0>
   13a84:	sub	r2, r5, r2
   13a88:	mov	r3, #8
   13a8c:	str	r3, [sp]
   13a90:	mvn	r3, #-2147483648	; 0x80000000
   13a94:	add	r2, r2, #1
   13a98:	add	r1, sp, #44	; 0x2c
   13a9c:	mov	r0, r6
   13aa0:	bl	14924 <__assert_fail@plt+0x3a60>
   13aa4:	mov	r6, r0
   13aa8:	ldr	r3, [pc, #300]	; 13bdc <__assert_fail@plt+0x2d18>
   13aac:	str	r0, [r3]
   13ab0:	ldr	r7, [pc, #292]	; 13bdc <__assert_fail@plt+0x2d18>
   13ab4:	ldr	r0, [r7, #4]
   13ab8:	ldr	r2, [sp, #44]	; 0x2c
   13abc:	sub	r2, r2, r0
   13ac0:	lsl	r2, r2, #3
   13ac4:	mov	r1, #0
   13ac8:	add	r0, r6, r0, lsl #3
   13acc:	bl	10df8 <memset@plt>
   13ad0:	ldr	r3, [sp, #44]	; 0x2c
   13ad4:	str	r3, [r7, #4]
   13ad8:	add	fp, r6, r5, lsl #3
   13adc:	ldr	r8, [r6, r5, lsl #3]
   13ae0:	ldr	r7, [fp, #4]
   13ae4:	ldr	r9, [r4, #4]
   13ae8:	orr	r9, r9, #1
   13aec:	add	sl, r4, #8
   13af0:	ldr	r3, [r4, #44]	; 0x2c
   13af4:	str	r3, [sp, #16]
   13af8:	ldr	r3, [r4, #40]	; 0x28
   13afc:	str	r3, [sp, #12]
   13b00:	str	sl, [sp, #8]
   13b04:	str	r9, [sp, #4]
   13b08:	ldr	r3, [r4]
   13b0c:	str	r3, [sp]
   13b10:	ldr	r3, [sp, #28]
   13b14:	ldr	r2, [sp, #24]
   13b18:	mov	r1, r8
   13b1c:	mov	r0, r7
   13b20:	bl	128b0 <__assert_fail@plt+0x19ec>
   13b24:	cmp	r8, r0
   13b28:	bhi	13b88 <__assert_fail@plt+0x2cc4>
   13b2c:	add	r8, r0, #1
   13b30:	str	r8, [r6, r5, lsl #3]
   13b34:	ldr	r3, [pc, #164]	; 13be0 <__assert_fail@plt+0x2d1c>
   13b38:	cmp	r7, r3
   13b3c:	beq	13b48 <__assert_fail@plt+0x2c84>
   13b40:	mov	r0, r7
   13b44:	bl	12590 <__assert_fail@plt+0x16cc>
   13b48:	mov	r0, r8
   13b4c:	bl	147a0 <__assert_fail@plt+0x38dc>
   13b50:	mov	r7, r0
   13b54:	str	r0, [fp, #4]
   13b58:	ldr	r3, [r4, #44]	; 0x2c
   13b5c:	str	r3, [sp, #16]
   13b60:	ldr	r3, [r4, #40]	; 0x28
   13b64:	str	r3, [sp, #12]
   13b68:	str	sl, [sp, #8]
   13b6c:	str	r9, [sp, #4]
   13b70:	ldr	r3, [r4]
   13b74:	str	r3, [sp]
   13b78:	ldr	r3, [sp, #28]
   13b7c:	ldr	r2, [sp, #24]
   13b80:	mov	r1, r8
   13b84:	bl	128b0 <__assert_fail@plt+0x19ec>
   13b88:	ldr	r3, [sp, #32]
   13b8c:	ldr	r2, [sp, #36]	; 0x24
   13b90:	str	r2, [r3]
   13b94:	mov	r0, r7
   13b98:	add	sp, sp, #52	; 0x34
   13b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba0:	bl	10eac <abort@plt>
   13ba4:	sub	r2, r5, r2
   13ba8:	mov	r3, #8
   13bac:	str	r3, [sp]
   13bb0:	mvn	r3, #-2147483648	; 0x80000000
   13bb4:	add	r2, r2, #1
   13bb8:	add	r1, sp, #44	; 0x2c
   13bbc:	mov	r0, #0
   13bc0:	bl	14924 <__assert_fail@plt+0x3a60>
   13bc4:	mov	r6, r0
   13bc8:	ldr	r3, [pc, #12]	; 13bdc <__assert_fail@plt+0x2d18>
   13bcc:	str	r0, [r3], #8
   13bd0:	ldm	r3, {r0, r1}
   13bd4:	stm	r6, {r0, r1}
   13bd8:	b	13ab0 <__assert_fail@plt+0x2bec>
   13bdc:	strdeq	r7, [r2], -r4
   13be0:	andeq	r7, r2, r8, lsr #3
   13be4:	push	{r4, r5, r6, lr}
   13be8:	mov	r4, r0
   13bec:	bl	10de0 <__errno_location@plt>
   13bf0:	mov	r5, r0
   13bf4:	ldr	r6, [r0]
   13bf8:	cmp	r4, #0
   13bfc:	ldr	r3, [pc, #20]	; 13c18 <__assert_fail@plt+0x2d54>
   13c00:	moveq	r4, r3
   13c04:	mov	r1, #48	; 0x30
   13c08:	mov	r0, r4
   13c0c:	bl	14c8c <__assert_fail@plt+0x3dc8>
   13c10:	str	r6, [r5]
   13c14:	pop	{r4, r5, r6, pc}
   13c18:	andeq	r7, r2, r8, lsr #5
   13c1c:	subs	r3, r0, #0
   13c20:	ldr	r2, [pc, #8]	; 13c30 <__assert_fail@plt+0x2d6c>
   13c24:	moveq	r3, r2
   13c28:	ldr	r0, [r3]
   13c2c:	bx	lr
   13c30:	andeq	r7, r2, r8, lsr #5
   13c34:	subs	r3, r0, #0
   13c38:	ldr	r2, [pc, #8]	; 13c48 <__assert_fail@plt+0x2d84>
   13c3c:	moveq	r3, r2
   13c40:	str	r1, [r3]
   13c44:	bx	lr
   13c48:	andeq	r7, r2, r8, lsr #5
   13c4c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c50:	subs	r3, r0, #0
   13c54:	ldr	r0, [pc, #44]	; 13c88 <__assert_fail@plt+0x2dc4>
   13c58:	moveq	r3, r0
   13c5c:	add	r3, r3, #8
   13c60:	lsr	lr, r1, #5
   13c64:	and	r1, r1, #31
   13c68:	ldr	ip, [r3, lr, lsl #2]
   13c6c:	lsr	r0, ip, r1
   13c70:	eor	r2, r2, r0
   13c74:	and	r2, r2, #1
   13c78:	eor	r1, ip, r2, lsl r1
   13c7c:	str	r1, [r3, lr, lsl #2]
   13c80:	and	r0, r0, #1
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	andeq	r7, r2, r8, lsr #5
   13c8c:	subs	r3, r0, #0
   13c90:	ldr	r2, [pc, #12]	; 13ca4 <__assert_fail@plt+0x2de0>
   13c94:	moveq	r3, r2
   13c98:	ldr	r0, [r3, #4]
   13c9c:	str	r1, [r3, #4]
   13ca0:	bx	lr
   13ca4:	andeq	r7, r2, r8, lsr #5
   13ca8:	subs	r3, r0, #0
   13cac:	ldr	r0, [pc, #40]	; 13cdc <__assert_fail@plt+0x2e18>
   13cb0:	moveq	r3, r0
   13cb4:	mov	r0, #10
   13cb8:	str	r0, [r3]
   13cbc:	cmp	r2, #0
   13cc0:	cmpne	r1, #0
   13cc4:	beq	13cd4 <__assert_fail@plt+0x2e10>
   13cc8:	str	r1, [r3, #40]	; 0x28
   13ccc:	str	r2, [r3, #44]	; 0x2c
   13cd0:	bx	lr
   13cd4:	push	{r4, lr}
   13cd8:	bl	10eac <abort@plt>
   13cdc:	andeq	r7, r2, r8, lsr #5
   13ce0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ce4:	sub	sp, sp, #24
   13ce8:	mov	r7, r0
   13cec:	mov	r8, r1
   13cf0:	mov	r9, r2
   13cf4:	mov	sl, r3
   13cf8:	ldr	r4, [sp, #56]	; 0x38
   13cfc:	cmp	r4, #0
   13d00:	ldr	r3, [pc, #84]	; 13d5c <__assert_fail@plt+0x2e98>
   13d04:	moveq	r4, r3
   13d08:	bl	10de0 <__errno_location@plt>
   13d0c:	mov	r5, r0
   13d10:	ldr	r6, [r0]
   13d14:	ldr	r3, [r4, #44]	; 0x2c
   13d18:	str	r3, [sp, #16]
   13d1c:	ldr	r3, [r4, #40]	; 0x28
   13d20:	str	r3, [sp, #12]
   13d24:	add	r3, r4, #8
   13d28:	str	r3, [sp, #8]
   13d2c:	ldr	r3, [r4, #4]
   13d30:	str	r3, [sp, #4]
   13d34:	ldr	r3, [r4]
   13d38:	str	r3, [sp]
   13d3c:	mov	r3, sl
   13d40:	mov	r2, r9
   13d44:	mov	r1, r8
   13d48:	mov	r0, r7
   13d4c:	bl	128b0 <__assert_fail@plt+0x19ec>
   13d50:	str	r6, [r5]
   13d54:	add	sp, sp, #24
   13d58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d5c:	andeq	r7, r2, r8, lsr #5
   13d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d64:	sub	sp, sp, #44	; 0x2c
   13d68:	str	r0, [sp, #28]
   13d6c:	str	r1, [sp, #32]
   13d70:	mov	r6, r2
   13d74:	subs	r4, r3, #0
   13d78:	ldr	r3, [pc, #172]	; 13e2c <__assert_fail@plt+0x2f68>
   13d7c:	moveq	r4, r3
   13d80:	bl	10de0 <__errno_location@plt>
   13d84:	mov	r7, r0
   13d88:	ldr	fp, [r0]
   13d8c:	ldr	r5, [r4, #4]
   13d90:	cmp	r6, #0
   13d94:	orreq	r5, r5, #1
   13d98:	add	r9, r4, #8
   13d9c:	ldr	r3, [r4, #44]	; 0x2c
   13da0:	str	r3, [sp, #16]
   13da4:	ldr	r3, [r4, #40]	; 0x28
   13da8:	str	r3, [sp, #12]
   13dac:	str	r9, [sp, #8]
   13db0:	str	r5, [sp, #4]
   13db4:	ldr	r3, [r4]
   13db8:	str	r3, [sp]
   13dbc:	ldr	r3, [sp, #32]
   13dc0:	ldr	r2, [sp, #28]
   13dc4:	mov	r1, #0
   13dc8:	mov	r0, r1
   13dcc:	bl	128b0 <__assert_fail@plt+0x19ec>
   13dd0:	mov	sl, r0
   13dd4:	add	r8, r0, #1
   13dd8:	mov	r0, r8
   13ddc:	bl	147a0 <__assert_fail@plt+0x38dc>
   13de0:	str	r0, [sp, #36]	; 0x24
   13de4:	ldr	r3, [r4, #44]	; 0x2c
   13de8:	str	r3, [sp, #16]
   13dec:	ldr	r3, [r4, #40]	; 0x28
   13df0:	str	r3, [sp, #12]
   13df4:	str	r9, [sp, #8]
   13df8:	str	r5, [sp, #4]
   13dfc:	ldr	r3, [r4]
   13e00:	str	r3, [sp]
   13e04:	ldr	r3, [sp, #32]
   13e08:	ldr	r2, [sp, #28]
   13e0c:	mov	r1, r8
   13e10:	bl	128b0 <__assert_fail@plt+0x19ec>
   13e14:	str	fp, [r7]
   13e18:	cmp	r6, #0
   13e1c:	strne	sl, [r6]
   13e20:	ldr	r0, [sp, #36]	; 0x24
   13e24:	add	sp, sp, #44	; 0x2c
   13e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e2c:	andeq	r7, r2, r8, lsr #5
   13e30:	push	{r4, lr}
   13e34:	mov	r3, r2
   13e38:	mov	r2, #0
   13e3c:	bl	13d60 <__assert_fail@plt+0x2e9c>
   13e40:	pop	{r4, pc}
   13e44:	push	{r4, r5, r6, r7, r8, lr}
   13e48:	ldr	r3, [pc, #140]	; 13edc <__assert_fail@plt+0x3018>
   13e4c:	ldr	r7, [r3]
   13e50:	ldr	r3, [r3, #4]
   13e54:	cmp	r3, #1
   13e58:	ble	13e84 <__assert_fail@plt+0x2fc0>
   13e5c:	mov	r5, r7
   13e60:	mov	r4, #1
   13e64:	ldr	r6, [pc, #112]	; 13edc <__assert_fail@plt+0x3018>
   13e68:	ldr	r0, [r5, #12]
   13e6c:	bl	12590 <__assert_fail@plt+0x16cc>
   13e70:	add	r4, r4, #1
   13e74:	add	r5, r5, #8
   13e78:	ldr	r3, [r6, #4]
   13e7c:	cmp	r3, r4
   13e80:	bgt	13e68 <__assert_fail@plt+0x2fa4>
   13e84:	ldr	r0, [r7, #4]
   13e88:	ldr	r3, [pc, #80]	; 13ee0 <__assert_fail@plt+0x301c>
   13e8c:	cmp	r0, r3
   13e90:	beq	13eac <__assert_fail@plt+0x2fe8>
   13e94:	bl	12590 <__assert_fail@plt+0x16cc>
   13e98:	ldr	r3, [pc, #60]	; 13edc <__assert_fail@plt+0x3018>
   13e9c:	mov	r2, #256	; 0x100
   13ea0:	str	r2, [r3, #8]
   13ea4:	ldr	r2, [pc, #52]	; 13ee0 <__assert_fail@plt+0x301c>
   13ea8:	str	r2, [r3, #12]
   13eac:	ldr	r3, [pc, #48]	; 13ee4 <__assert_fail@plt+0x3020>
   13eb0:	cmp	r7, r3
   13eb4:	beq	13ecc <__assert_fail@plt+0x3008>
   13eb8:	mov	r0, r7
   13ebc:	bl	12590 <__assert_fail@plt+0x16cc>
   13ec0:	ldr	r3, [pc, #20]	; 13edc <__assert_fail@plt+0x3018>
   13ec4:	add	r2, r3, #8
   13ec8:	str	r2, [r3]
   13ecc:	mov	r2, #1
   13ed0:	ldr	r3, [pc, #4]	; 13edc <__assert_fail@plt+0x3018>
   13ed4:	str	r2, [r3, #4]
   13ed8:	pop	{r4, r5, r6, r7, r8, pc}
   13edc:	strdeq	r7, [r2], -r4
   13ee0:	andeq	r7, r2, r8, lsr #3
   13ee4:	strdeq	r7, [r2], -ip
   13ee8:	push	{r4, lr}
   13eec:	ldr	r3, [pc, #8]	; 13efc <__assert_fail@plt+0x3038>
   13ef0:	mvn	r2, #0
   13ef4:	bl	13a20 <__assert_fail@plt+0x2b5c>
   13ef8:	pop	{r4, pc}
   13efc:	andeq	r7, r2, r8, lsr #5
   13f00:	push	{r4, lr}
   13f04:	ldr	r3, [pc, #4]	; 13f10 <__assert_fail@plt+0x304c>
   13f08:	bl	13a20 <__assert_fail@plt+0x2b5c>
   13f0c:	pop	{r4, pc}
   13f10:	andeq	r7, r2, r8, lsr #5
   13f14:	push	{r4, lr}
   13f18:	mov	r1, r0
   13f1c:	mov	r0, #0
   13f20:	bl	13ee8 <__assert_fail@plt+0x3024>
   13f24:	pop	{r4, pc}
   13f28:	push	{r4, lr}
   13f2c:	mov	r2, r1
   13f30:	mov	r1, r0
   13f34:	mov	r0, #0
   13f38:	bl	13f00 <__assert_fail@plt+0x303c>
   13f3c:	pop	{r4, pc}
   13f40:	push	{r4, r5, lr}
   13f44:	sub	sp, sp, #52	; 0x34
   13f48:	mov	r4, r0
   13f4c:	mov	r5, r2
   13f50:	mov	r0, sp
   13f54:	bl	12748 <__assert_fail@plt+0x1884>
   13f58:	mov	r3, sp
   13f5c:	mvn	r2, #0
   13f60:	mov	r1, r5
   13f64:	mov	r0, r4
   13f68:	bl	13a20 <__assert_fail@plt+0x2b5c>
   13f6c:	add	sp, sp, #52	; 0x34
   13f70:	pop	{r4, r5, pc}
   13f74:	push	{r4, r5, r6, lr}
   13f78:	sub	sp, sp, #48	; 0x30
   13f7c:	mov	r4, r0
   13f80:	mov	r5, r2
   13f84:	mov	r6, r3
   13f88:	mov	r0, sp
   13f8c:	bl	12748 <__assert_fail@plt+0x1884>
   13f90:	mov	r3, sp
   13f94:	mov	r2, r6
   13f98:	mov	r1, r5
   13f9c:	mov	r0, r4
   13fa0:	bl	13a20 <__assert_fail@plt+0x2b5c>
   13fa4:	add	sp, sp, #48	; 0x30
   13fa8:	pop	{r4, r5, r6, pc}
   13fac:	push	{r4, lr}
   13fb0:	mov	r2, r1
   13fb4:	mov	r1, r0
   13fb8:	mov	r0, #0
   13fbc:	bl	13f40 <__assert_fail@plt+0x307c>
   13fc0:	pop	{r4, pc}
   13fc4:	push	{r4, lr}
   13fc8:	mov	r3, r2
   13fcc:	mov	r2, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	bl	13f74 <__assert_fail@plt+0x30b0>
   13fdc:	pop	{r4, pc}
   13fe0:	push	{r4, r5, r6, lr}
   13fe4:	sub	sp, sp, #48	; 0x30
   13fe8:	mov	r4, r0
   13fec:	mov	r5, r1
   13ff0:	mov	r6, r2
   13ff4:	mov	ip, sp
   13ff8:	ldr	lr, [pc, #64]	; 14040 <__assert_fail@plt+0x317c>
   13ffc:	ldm	lr!, {r0, r1, r2, r3}
   14000:	stmia	ip!, {r0, r1, r2, r3}
   14004:	ldm	lr!, {r0, r1, r2, r3}
   14008:	stmia	ip!, {r0, r1, r2, r3}
   1400c:	ldm	lr, {r0, r1, r2, r3}
   14010:	stm	ip, {r0, r1, r2, r3}
   14014:	mov	r2, #1
   14018:	mov	r1, r6
   1401c:	mov	r0, sp
   14020:	bl	13c4c <__assert_fail@plt+0x2d88>
   14024:	mov	r3, sp
   14028:	mov	r2, r5
   1402c:	mov	r1, r4
   14030:	mov	r0, #0
   14034:	bl	13a20 <__assert_fail@plt+0x2b5c>
   14038:	add	sp, sp, #48	; 0x30
   1403c:	pop	{r4, r5, r6, pc}
   14040:	andeq	r7, r2, r8, lsr #5
   14044:	push	{r4, lr}
   14048:	mov	r2, r1
   1404c:	mvn	r1, #0
   14050:	bl	13fe0 <__assert_fail@plt+0x311c>
   14054:	pop	{r4, pc}
   14058:	push	{r4, lr}
   1405c:	mov	r1, #58	; 0x3a
   14060:	bl	14044 <__assert_fail@plt+0x3180>
   14064:	pop	{r4, pc}
   14068:	push	{r4, lr}
   1406c:	mov	r2, #58	; 0x3a
   14070:	bl	13fe0 <__assert_fail@plt+0x311c>
   14074:	pop	{r4, pc}
   14078:	push	{r4, r5, lr}
   1407c:	sub	sp, sp, #100	; 0x64
   14080:	mov	r4, r0
   14084:	mov	r5, r2
   14088:	mov	r0, sp
   1408c:	bl	12748 <__assert_fail@plt+0x1884>
   14090:	add	lr, sp, #48	; 0x30
   14094:	mov	ip, sp
   14098:	ldm	ip!, {r0, r1, r2, r3}
   1409c:	stmia	lr!, {r0, r1, r2, r3}
   140a0:	ldm	ip!, {r0, r1, r2, r3}
   140a4:	stmia	lr!, {r0, r1, r2, r3}
   140a8:	ldm	ip, {r0, r1, r2, r3}
   140ac:	stm	lr, {r0, r1, r2, r3}
   140b0:	mov	r2, #1
   140b4:	mov	r1, #58	; 0x3a
   140b8:	add	r0, sp, #48	; 0x30
   140bc:	bl	13c4c <__assert_fail@plt+0x2d88>
   140c0:	add	r3, sp, #48	; 0x30
   140c4:	mvn	r2, #0
   140c8:	mov	r1, r5
   140cc:	mov	r0, r4
   140d0:	bl	13a20 <__assert_fail@plt+0x2b5c>
   140d4:	add	sp, sp, #100	; 0x64
   140d8:	pop	{r4, r5, pc}
   140dc:	push	{r4, r5, r6, r7, lr}
   140e0:	sub	sp, sp, #52	; 0x34
   140e4:	mov	r4, r0
   140e8:	mov	r6, r1
   140ec:	mov	r7, r2
   140f0:	mov	r5, r3
   140f4:	mov	ip, sp
   140f8:	ldr	lr, [pc, #64]	; 14140 <__assert_fail@plt+0x327c>
   140fc:	ldm	lr!, {r0, r1, r2, r3}
   14100:	stmia	ip!, {r0, r1, r2, r3}
   14104:	ldm	lr!, {r0, r1, r2, r3}
   14108:	stmia	ip!, {r0, r1, r2, r3}
   1410c:	ldm	lr, {r0, r1, r2, r3}
   14110:	stm	ip, {r0, r1, r2, r3}
   14114:	mov	r2, r7
   14118:	mov	r1, r6
   1411c:	mov	r0, sp
   14120:	bl	13ca8 <__assert_fail@plt+0x2de4>
   14124:	mov	r3, sp
   14128:	ldr	r2, [sp, #72]	; 0x48
   1412c:	mov	r1, r5
   14130:	mov	r0, r4
   14134:	bl	13a20 <__assert_fail@plt+0x2b5c>
   14138:	add	sp, sp, #52	; 0x34
   1413c:	pop	{r4, r5, r6, r7, pc}
   14140:	andeq	r7, r2, r8, lsr #5
   14144:	push	{lr}		; (str lr, [sp, #-4]!)
   14148:	sub	sp, sp, #12
   1414c:	mvn	ip, #0
   14150:	str	ip, [sp]
   14154:	bl	140dc <__assert_fail@plt+0x3218>
   14158:	add	sp, sp, #12
   1415c:	pop	{pc}		; (ldr pc, [sp], #4)
   14160:	push	{r4, lr}
   14164:	mov	r3, r2
   14168:	mov	r2, r1
   1416c:	mov	r1, r0
   14170:	mov	r0, #0
   14174:	bl	14144 <__assert_fail@plt+0x3280>
   14178:	pop	{r4, pc}
   1417c:	push	{lr}		; (str lr, [sp, #-4]!)
   14180:	sub	sp, sp, #12
   14184:	str	r3, [sp]
   14188:	mov	r3, r2
   1418c:	mov	r2, r1
   14190:	mov	r1, r0
   14194:	mov	r0, #0
   14198:	bl	140dc <__assert_fail@plt+0x3218>
   1419c:	add	sp, sp, #12
   141a0:	pop	{pc}		; (ldr pc, [sp], #4)
   141a4:	push	{r4, lr}
   141a8:	ldr	r3, [pc, #4]	; 141b4 <__assert_fail@plt+0x32f0>
   141ac:	bl	13a20 <__assert_fail@plt+0x2b5c>
   141b0:	pop	{r4, pc}
   141b4:	andeq	r7, r2, r4, lsl #2
   141b8:	push	{r4, lr}
   141bc:	mov	r2, r1
   141c0:	mov	r1, r0
   141c4:	mov	r0, #0
   141c8:	bl	141a4 <__assert_fail@plt+0x32e0>
   141cc:	pop	{r4, pc}
   141d0:	push	{r4, lr}
   141d4:	mvn	r2, #0
   141d8:	bl	141a4 <__assert_fail@plt+0x32e0>
   141dc:	pop	{r4, pc}
   141e0:	push	{r4, lr}
   141e4:	mov	r1, r0
   141e8:	mov	r0, #0
   141ec:	bl	141d0 <__assert_fail@plt+0x330c>
   141f0:	pop	{r4, pc}
   141f4:	push	{r4, r5, r6, lr}
   141f8:	sub	sp, sp, #32
   141fc:	mov	r4, r0
   14200:	ldr	r5, [sp, #48]	; 0x30
   14204:	ldr	r6, [sp, #52]	; 0x34
   14208:	cmp	r1, #0
   1420c:	beq	142c4 <__assert_fail@plt+0x3400>
   14210:	str	r3, [sp, #4]
   14214:	str	r2, [sp]
   14218:	mov	r3, r1
   1421c:	ldr	r2, [pc, #940]	; 145d0 <__assert_fail@plt+0x370c>
   14220:	mov	r1, #1
   14224:	bl	10e1c <__fprintf_chk@plt>
   14228:	mov	r2, #5
   1422c:	ldr	r1, [pc, #928]	; 145d4 <__assert_fail@plt+0x3710>
   14230:	mov	r0, #0
   14234:	bl	10d08 <dcgettext@plt>
   14238:	ldr	r3, [pc, #920]	; 145d8 <__assert_fail@plt+0x3714>
   1423c:	str	r3, [sp]
   14240:	mov	r3, r0
   14244:	ldr	r2, [pc, #912]	; 145dc <__assert_fail@plt+0x3718>
   14248:	mov	r1, #1
   1424c:	mov	r0, r4
   14250:	bl	10e1c <__fprintf_chk@plt>
   14254:	mov	r1, r4
   14258:	mov	r0, #10
   1425c:	bl	10cfc <fputc_unlocked@plt>
   14260:	mov	r2, #5
   14264:	ldr	r1, [pc, #884]	; 145e0 <__assert_fail@plt+0x371c>
   14268:	mov	r0, #0
   1426c:	bl	10d08 <dcgettext@plt>
   14270:	ldr	r3, [pc, #876]	; 145e4 <__assert_fail@plt+0x3720>
   14274:	mov	r2, r0
   14278:	mov	r1, #1
   1427c:	mov	r0, r4
   14280:	bl	10e1c <__fprintf_chk@plt>
   14284:	mov	r1, r4
   14288:	mov	r0, #10
   1428c:	bl	10cfc <fputc_unlocked@plt>
   14290:	cmp	r6, #9
   14294:	ldrls	pc, [pc, r6, lsl #2]
   14298:	b	14568 <__assert_fail@plt+0x36a4>
   1429c:	andeq	r4, r1, r0, lsl #6
   142a0:	ldrdeq	r4, [r1], -ip
   142a4:	andeq	r4, r1, r8, lsl #6
   142a8:	andeq	r4, r1, r8, lsr r3
   142ac:	andeq	r4, r1, r0, ror r3
   142b0:			; <UNDEFINED> instruction: 0x000143b0
   142b4:	strdeq	r4, [r1], -r8
   142b8:	andeq	r4, r1, r8, asr #8
   142bc:	andeq	r4, r1, r0, lsr #9
   142c0:	andeq	r4, r1, r0, lsl #10
   142c4:	str	r3, [sp]
   142c8:	mov	r3, r2
   142cc:	ldr	r2, [pc, #788]	; 145e8 <__assert_fail@plt+0x3724>
   142d0:	mov	r1, #1
   142d4:	bl	10e1c <__fprintf_chk@plt>
   142d8:	b	14228 <__assert_fail@plt+0x3364>
   142dc:	mov	r2, #5
   142e0:	ldr	r1, [pc, #772]	; 145ec <__assert_fail@plt+0x3728>
   142e4:	mov	r0, #0
   142e8:	bl	10d08 <dcgettext@plt>
   142ec:	ldr	r3, [r5]
   142f0:	mov	r2, r0
   142f4:	mov	r1, #1
   142f8:	mov	r0, r4
   142fc:	bl	10e1c <__fprintf_chk@plt>
   14300:	add	sp, sp, #32
   14304:	pop	{r4, r5, r6, pc}
   14308:	mov	r2, #5
   1430c:	ldr	r1, [pc, #732]	; 145f0 <__assert_fail@plt+0x372c>
   14310:	mov	r0, #0
   14314:	bl	10d08 <dcgettext@plt>
   14318:	ldr	r3, [r5]
   1431c:	ldr	r2, [r5, #4]
   14320:	str	r2, [sp]
   14324:	mov	r2, r0
   14328:	mov	r1, #1
   1432c:	mov	r0, r4
   14330:	bl	10e1c <__fprintf_chk@plt>
   14334:	b	14300 <__assert_fail@plt+0x343c>
   14338:	mov	r2, #5
   1433c:	ldr	r1, [pc, #688]	; 145f4 <__assert_fail@plt+0x3730>
   14340:	mov	r0, #0
   14344:	bl	10d08 <dcgettext@plt>
   14348:	ldr	r3, [r5]
   1434c:	ldr	r2, [r5, #8]
   14350:	str	r2, [sp, #4]
   14354:	ldr	r2, [r5, #4]
   14358:	str	r2, [sp]
   1435c:	mov	r2, r0
   14360:	mov	r1, #1
   14364:	mov	r0, r4
   14368:	bl	10e1c <__fprintf_chk@plt>
   1436c:	b	14300 <__assert_fail@plt+0x343c>
   14370:	mov	r2, #5
   14374:	ldr	r1, [pc, #636]	; 145f8 <__assert_fail@plt+0x3734>
   14378:	mov	r0, #0
   1437c:	bl	10d08 <dcgettext@plt>
   14380:	ldr	r3, [r5]
   14384:	ldr	r2, [r5, #12]
   14388:	str	r2, [sp, #8]
   1438c:	ldr	r2, [r5, #8]
   14390:	str	r2, [sp, #4]
   14394:	ldr	r2, [r5, #4]
   14398:	str	r2, [sp]
   1439c:	mov	r2, r0
   143a0:	mov	r1, #1
   143a4:	mov	r0, r4
   143a8:	bl	10e1c <__fprintf_chk@plt>
   143ac:	b	14300 <__assert_fail@plt+0x343c>
   143b0:	mov	r2, #5
   143b4:	ldr	r1, [pc, #576]	; 145fc <__assert_fail@plt+0x3738>
   143b8:	mov	r0, #0
   143bc:	bl	10d08 <dcgettext@plt>
   143c0:	ldr	r3, [r5]
   143c4:	ldr	r2, [r5, #16]
   143c8:	str	r2, [sp, #12]
   143cc:	ldr	r2, [r5, #12]
   143d0:	str	r2, [sp, #8]
   143d4:	ldr	r2, [r5, #8]
   143d8:	str	r2, [sp, #4]
   143dc:	ldr	r2, [r5, #4]
   143e0:	str	r2, [sp]
   143e4:	mov	r2, r0
   143e8:	mov	r1, #1
   143ec:	mov	r0, r4
   143f0:	bl	10e1c <__fprintf_chk@plt>
   143f4:	b	14300 <__assert_fail@plt+0x343c>
   143f8:	mov	r2, #5
   143fc:	ldr	r1, [pc, #508]	; 14600 <__assert_fail@plt+0x373c>
   14400:	mov	r0, #0
   14404:	bl	10d08 <dcgettext@plt>
   14408:	ldr	r3, [r5]
   1440c:	ldr	r2, [r5, #20]
   14410:	str	r2, [sp, #16]
   14414:	ldr	r2, [r5, #16]
   14418:	str	r2, [sp, #12]
   1441c:	ldr	r2, [r5, #12]
   14420:	str	r2, [sp, #8]
   14424:	ldr	r2, [r5, #8]
   14428:	str	r2, [sp, #4]
   1442c:	ldr	r2, [r5, #4]
   14430:	str	r2, [sp]
   14434:	mov	r2, r0
   14438:	mov	r1, #1
   1443c:	mov	r0, r4
   14440:	bl	10e1c <__fprintf_chk@plt>
   14444:	b	14300 <__assert_fail@plt+0x343c>
   14448:	mov	r2, #5
   1444c:	ldr	r1, [pc, #432]	; 14604 <__assert_fail@plt+0x3740>
   14450:	mov	r0, #0
   14454:	bl	10d08 <dcgettext@plt>
   14458:	ldr	r3, [r5]
   1445c:	ldr	r2, [r5, #24]
   14460:	str	r2, [sp, #20]
   14464:	ldr	r2, [r5, #20]
   14468:	str	r2, [sp, #16]
   1446c:	ldr	r2, [r5, #16]
   14470:	str	r2, [sp, #12]
   14474:	ldr	r2, [r5, #12]
   14478:	str	r2, [sp, #8]
   1447c:	ldr	r2, [r5, #8]
   14480:	str	r2, [sp, #4]
   14484:	ldr	r2, [r5, #4]
   14488:	str	r2, [sp]
   1448c:	mov	r2, r0
   14490:	mov	r1, #1
   14494:	mov	r0, r4
   14498:	bl	10e1c <__fprintf_chk@plt>
   1449c:	b	14300 <__assert_fail@plt+0x343c>
   144a0:	mov	r2, #5
   144a4:	ldr	r1, [pc, #348]	; 14608 <__assert_fail@plt+0x3744>
   144a8:	mov	r0, #0
   144ac:	bl	10d08 <dcgettext@plt>
   144b0:	ldr	r3, [r5]
   144b4:	ldr	r2, [r5, #28]
   144b8:	str	r2, [sp, #24]
   144bc:	ldr	r2, [r5, #24]
   144c0:	str	r2, [sp, #20]
   144c4:	ldr	r2, [r5, #20]
   144c8:	str	r2, [sp, #16]
   144cc:	ldr	r2, [r5, #16]
   144d0:	str	r2, [sp, #12]
   144d4:	ldr	r2, [r5, #12]
   144d8:	str	r2, [sp, #8]
   144dc:	ldr	r2, [r5, #8]
   144e0:	str	r2, [sp, #4]
   144e4:	ldr	r2, [r5, #4]
   144e8:	str	r2, [sp]
   144ec:	mov	r2, r0
   144f0:	mov	r1, #1
   144f4:	mov	r0, r4
   144f8:	bl	10e1c <__fprintf_chk@plt>
   144fc:	b	14300 <__assert_fail@plt+0x343c>
   14500:	mov	r2, #5
   14504:	ldr	r1, [pc, #256]	; 1460c <__assert_fail@plt+0x3748>
   14508:	mov	r0, #0
   1450c:	bl	10d08 <dcgettext@plt>
   14510:	ldr	r3, [r5]
   14514:	ldr	r2, [r5, #32]
   14518:	str	r2, [sp, #28]
   1451c:	ldr	r2, [r5, #28]
   14520:	str	r2, [sp, #24]
   14524:	ldr	r2, [r5, #24]
   14528:	str	r2, [sp, #20]
   1452c:	ldr	r2, [r5, #20]
   14530:	str	r2, [sp, #16]
   14534:	ldr	r2, [r5, #16]
   14538:	str	r2, [sp, #12]
   1453c:	ldr	r2, [r5, #12]
   14540:	str	r2, [sp, #8]
   14544:	ldr	r2, [r5, #8]
   14548:	str	r2, [sp, #4]
   1454c:	ldr	r2, [r5, #4]
   14550:	str	r2, [sp]
   14554:	mov	r2, r0
   14558:	mov	r1, #1
   1455c:	mov	r0, r4
   14560:	bl	10e1c <__fprintf_chk@plt>
   14564:	b	14300 <__assert_fail@plt+0x343c>
   14568:	mov	r2, #5
   1456c:	ldr	r1, [pc, #156]	; 14610 <__assert_fail@plt+0x374c>
   14570:	mov	r0, #0
   14574:	bl	10d08 <dcgettext@plt>
   14578:	ldr	r3, [r5]
   1457c:	ldr	r2, [r5, #32]
   14580:	str	r2, [sp, #28]
   14584:	ldr	r2, [r5, #28]
   14588:	str	r2, [sp, #24]
   1458c:	ldr	r2, [r5, #24]
   14590:	str	r2, [sp, #20]
   14594:	ldr	r2, [r5, #20]
   14598:	str	r2, [sp, #16]
   1459c:	ldr	r2, [r5, #16]
   145a0:	str	r2, [sp, #12]
   145a4:	ldr	r2, [r5, #12]
   145a8:	str	r2, [sp, #8]
   145ac:	ldr	r2, [r5, #8]
   145b0:	str	r2, [sp, #4]
   145b4:	ldr	r2, [r5, #4]
   145b8:	str	r2, [sp]
   145bc:	mov	r2, r0
   145c0:	mov	r1, #1
   145c4:	mov	r0, r4
   145c8:	bl	10e1c <__fprintf_chk@plt>
   145cc:	b	14300 <__assert_fail@plt+0x343c>
   145d0:	andeq	r6, r1, r4, rrx
   145d4:	andeq	r6, r1, r8, ror r0
   145d8:	andeq	r0, r0, r6, ror #15
   145dc:	andeq	r6, r1, r0, asr r3
   145e0:	andeq	r6, r1, ip, ror r0
   145e4:	andeq	r6, r1, r8, lsr #2
   145e8:	andeq	r6, r1, r0, ror r0
   145ec:	andeq	r6, r1, ip, asr #2
   145f0:	andeq	r6, r1, ip, asr r1
   145f4:	andeq	r6, r1, r4, ror r1
   145f8:	muleq	r1, r0, r1
   145fc:			; <UNDEFINED> instruction: 0x000161b0
   14600:	ldrdeq	r6, [r1], -r4
   14604:	strdeq	r6, [r1], -ip
   14608:	andeq	r6, r1, r8, lsr #4
   1460c:	andeq	r6, r1, r8, asr r2
   14610:	andeq	r6, r1, ip, lsl #5
   14614:	push	{r4, r5, lr}
   14618:	sub	sp, sp, #12
   1461c:	ldr	r5, [sp, #24]
   14620:	ldr	ip, [r5]
   14624:	cmp	ip, #0
   14628:	beq	14658 <__assert_fail@plt+0x3794>
   1462c:	mov	lr, r5
   14630:	mov	ip, #0
   14634:	add	ip, ip, #1
   14638:	ldr	r4, [lr, #4]!
   1463c:	cmp	r4, #0
   14640:	bne	14634 <__assert_fail@plt+0x3770>
   14644:	str	ip, [sp, #4]
   14648:	str	r5, [sp]
   1464c:	bl	141f4 <__assert_fail@plt+0x3330>
   14650:	add	sp, sp, #12
   14654:	pop	{r4, r5, pc}
   14658:	mov	ip, #0
   1465c:	b	14644 <__assert_fail@plt+0x3780>
   14660:	push	{r4, r5, lr}
   14664:	sub	sp, sp, #52	; 0x34
   14668:	ldr	r4, [sp, #64]	; 0x40
   1466c:	sub	r4, r4, #4
   14670:	add	r5, sp, #4
   14674:	mov	ip, #0
   14678:	ldr	lr, [r4, #4]!
   1467c:	str	lr, [r5, #4]!
   14680:	cmp	lr, #0
   14684:	beq	14694 <__assert_fail@plt+0x37d0>
   14688:	add	ip, ip, #1
   1468c:	cmp	ip, #10
   14690:	bne	14678 <__assert_fail@plt+0x37b4>
   14694:	str	ip, [sp, #4]
   14698:	add	ip, sp, #8
   1469c:	str	ip, [sp]
   146a0:	bl	141f4 <__assert_fail@plt+0x3330>
   146a4:	add	sp, sp, #52	; 0x34
   146a8:	pop	{r4, r5, pc}
   146ac:	push	{r3}		; (str r3, [sp, #-4]!)
   146b0:	push	{lr}		; (str lr, [sp, #-4]!)
   146b4:	sub	sp, sp, #16
   146b8:	add	r3, sp, #24
   146bc:	str	r3, [sp, #12]
   146c0:	str	r3, [sp]
   146c4:	ldr	r3, [sp, #20]
   146c8:	bl	14660 <__assert_fail@plt+0x379c>
   146cc:	add	sp, sp, #16
   146d0:	pop	{lr}		; (ldr lr, [sp], #4)
   146d4:	add	sp, sp, #4
   146d8:	bx	lr
   146dc:	push	{r4, lr}
   146e0:	ldr	r3, [pc, #112]	; 14758 <__assert_fail@plt+0x3894>
   146e4:	ldr	r1, [r3]
   146e8:	mov	r0, #10
   146ec:	bl	10cfc <fputc_unlocked@plt>
   146f0:	mov	r2, #5
   146f4:	ldr	r1, [pc, #96]	; 1475c <__assert_fail@plt+0x3898>
   146f8:	mov	r0, #0
   146fc:	bl	10d08 <dcgettext@plt>
   14700:	ldr	r2, [pc, #88]	; 14760 <__assert_fail@plt+0x389c>
   14704:	mov	r1, r0
   14708:	mov	r0, #1
   1470c:	bl	10e04 <__printf_chk@plt>
   14710:	mov	r2, #5
   14714:	ldr	r1, [pc, #72]	; 14764 <__assert_fail@plt+0x38a0>
   14718:	mov	r0, #0
   1471c:	bl	10d08 <dcgettext@plt>
   14720:	ldr	r3, [pc, #64]	; 14768 <__assert_fail@plt+0x38a4>
   14724:	ldr	r2, [pc, #64]	; 1476c <__assert_fail@plt+0x38a8>
   14728:	mov	r1, r0
   1472c:	mov	r0, #1
   14730:	bl	10e04 <__printf_chk@plt>
   14734:	mov	r2, #5
   14738:	ldr	r1, [pc, #48]	; 14770 <__assert_fail@plt+0x38ac>
   1473c:	mov	r0, #0
   14740:	bl	10d08 <dcgettext@plt>
   14744:	ldr	r2, [pc, #40]	; 14774 <__assert_fail@plt+0x38b0>
   14748:	mov	r1, r0
   1474c:	mov	r0, #1
   14750:	bl	10e04 <__printf_chk@plt>
   14754:	pop	{r4, pc}
   14758:	andeq	r7, r2, r4, asr r1
   1475c:	andeq	r6, r1, r8, asr #5
   14760:	ldrdeq	r6, [r1], -ip
   14764:	strdeq	r6, [r1], -r4
   14768:	andeq	r5, r1, r4, ror #19
   1476c:	andeq	r5, r1, ip, lsl #20
   14770:	andeq	r6, r1, r8, lsl #6
   14774:	andeq	r6, r1, r0, lsr r3
   14778:	push	{r4, lr}
   1477c:	bl	14dac <__assert_fail@plt+0x3ee8>
   14780:	cmp	r0, #0
   14784:	popne	{r4, pc}
   14788:	bl	14d1c <__assert_fail@plt+0x3e58>
   1478c:	push	{r4, lr}
   14790:	bl	14dac <__assert_fail@plt+0x3ee8>
   14794:	cmp	r0, #0
   14798:	popne	{r4, pc}
   1479c:	bl	14d1c <__assert_fail@plt+0x3e58>
   147a0:	push	{r4, lr}
   147a4:	bl	14778 <__assert_fail@plt+0x38b4>
   147a8:	pop	{r4, pc}
   147ac:	push	{r4, r5, r6, lr}
   147b0:	mov	r5, r0
   147b4:	mov	r4, r1
   147b8:	bl	14ddc <__assert_fail@plt+0x3f18>
   147bc:	cmp	r0, #0
   147c0:	popne	{r4, r5, r6, pc}
   147c4:	adds	r4, r4, #0
   147c8:	movne	r4, #1
   147cc:	cmp	r5, #0
   147d0:	orreq	r4, r4, #1
   147d4:	cmp	r4, #0
   147d8:	popeq	{r4, r5, r6, pc}
   147dc:	bl	14d1c <__assert_fail@plt+0x3e58>
   147e0:	push	{r4, lr}
   147e4:	cmp	r1, #0
   147e8:	orreq	r1, r1, #1
   147ec:	bl	14ddc <__assert_fail@plt+0x3f18>
   147f0:	cmp	r0, #0
   147f4:	popne	{r4, pc}
   147f8:	bl	14d1c <__assert_fail@plt+0x3e58>
   147fc:	push	{r4, r5, r6, lr}
   14800:	mov	r6, r0
   14804:	mov	r5, r1
   14808:	mov	r4, r2
   1480c:	bl	14f30 <__assert_fail@plt+0x406c>
   14810:	cmp	r0, #0
   14814:	popne	{r4, r5, r6, pc}
   14818:	cmp	r6, #0
   1481c:	beq	1482c <__assert_fail@plt+0x3968>
   14820:	cmp	r5, #0
   14824:	cmpne	r4, #0
   14828:	popeq	{r4, r5, r6, pc}
   1482c:	bl	14d1c <__assert_fail@plt+0x3e58>
   14830:	push	{r4, lr}
   14834:	bl	147fc <__assert_fail@plt+0x3938>
   14838:	pop	{r4, pc}
   1483c:	push	{r4, lr}
   14840:	mov	ip, r1
   14844:	mov	r3, r2
   14848:	cmp	r2, #0
   1484c:	cmpne	r1, #0
   14850:	moveq	r3, #1
   14854:	moveq	ip, r3
   14858:	mov	r2, r3
   1485c:	mov	r1, ip
   14860:	bl	14f30 <__assert_fail@plt+0x406c>
   14864:	cmp	r0, #0
   14868:	popne	{r4, pc}
   1486c:	bl	14d1c <__assert_fail@plt+0x3e58>
   14870:	push	{r4, lr}
   14874:	mov	r2, r1
   14878:	mov	r1, r0
   1487c:	mov	r0, #0
   14880:	bl	147fc <__assert_fail@plt+0x3938>
   14884:	pop	{r4, pc}
   14888:	push	{r4, lr}
   1488c:	mov	r2, r1
   14890:	mov	r1, r0
   14894:	mov	r0, #0
   14898:	bl	1483c <__assert_fail@plt+0x3978>
   1489c:	pop	{r4, pc}
   148a0:	push	{r4, r5, r6, r7, r8, lr}
   148a4:	mov	r5, r1
   148a8:	mov	r6, r2
   148ac:	ldr	r4, [r1]
   148b0:	subs	r7, r0, #0
   148b4:	beq	148d0 <__assert_fail@plt+0x3a0c>
   148b8:	lsr	r2, r4, #1
   148bc:	add	r3, r2, #1
   148c0:	mvn	r3, r3
   148c4:	cmp	r4, r3
   148c8:	bls	148f4 <__assert_fail@plt+0x3a30>
   148cc:	bl	14d1c <__assert_fail@plt+0x3e58>
   148d0:	cmp	r4, #0
   148d4:	bne	148fc <__assert_fail@plt+0x3a38>
   148d8:	mov	r1, r2
   148dc:	mov	r0, #64	; 0x40
   148e0:	bl	15084 <__assert_fail@plt+0x41c0>
   148e4:	cmp	r0, #0
   148e8:	movne	r4, r0
   148ec:	addeq	r4, r0, #1
   148f0:	b	148fc <__assert_fail@plt+0x3a38>
   148f4:	add	r4, r4, #1
   148f8:	add	r4, r4, r2
   148fc:	mov	r2, r6
   14900:	mov	r1, r4
   14904:	mov	r0, r7
   14908:	bl	147fc <__assert_fail@plt+0x3938>
   1490c:	str	r4, [r5]
   14910:	pop	{r4, r5, r6, r7, r8, pc}
   14914:	push	{r4, lr}
   14918:	mov	r2, #1
   1491c:	bl	148a0 <__assert_fail@plt+0x39dc>
   14920:	pop	{r4, pc}
   14924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14928:	sub	sp, sp, #12
   1492c:	mov	fp, r0
   14930:	mov	sl, r1
   14934:	mov	r9, r2
   14938:	mov	r7, r3
   1493c:	ldr	r6, [sp, #48]	; 0x30
   14940:	ldr	r5, [r1]
   14944:	asrs	r4, r5, #1
   14948:	bmi	14aa4 <__assert_fail@plt+0x3be0>
   1494c:	cmp	r5, #0
   14950:	blt	14ab8 <__assert_fail@plt+0x3bf4>
   14954:	mvn	r3, #-2147483648	; 0x80000000
   14958:	sub	r3, r3, r4
   1495c:	cmp	r5, r3
   14960:	movle	r3, #0
   14964:	movgt	r3, #1
   14968:	cmp	r3, #0
   1496c:	addeq	r4, r4, r5
   14970:	mvnne	r4, #-2147483648	; 0x80000000
   14974:	mvn	r8, r7
   14978:	lsr	r8, r8, #31
   1497c:	cmp	r7, r4
   14980:	movge	r3, #0
   14984:	andlt	r3, r8, #1
   14988:	cmp	r3, #0
   1498c:	movne	r4, r7
   14990:	cmp	r6, #0
   14994:	blt	14acc <__assert_fail@plt+0x3c08>
   14998:	cmp	r6, #0
   1499c:	beq	14b78 <__assert_fail@plt+0x3cb4>
   149a0:	cmp	r4, #0
   149a4:	blt	14b28 <__assert_fail@plt+0x3c64>
   149a8:	mov	r1, r6
   149ac:	mvn	r0, #-2147483648	; 0x80000000
   149b0:	bl	15290 <__assert_fail@plt+0x43cc>
   149b4:	cmp	r0, r4
   149b8:	movge	r0, #0
   149bc:	movlt	r0, #1
   149c0:	cmp	r0, #0
   149c4:	mvnne	r3, #-2147483648	; 0x80000000
   149c8:	strne	r3, [sp, #4]
   149cc:	beq	14b60 <__assert_fail@plt+0x3c9c>
   149d0:	mov	r1, r6
   149d4:	ldr	r0, [sp, #4]
   149d8:	bl	15290 <__assert_fail@plt+0x43cc>
   149dc:	mov	r4, r0
   149e0:	mov	r1, r6
   149e4:	ldr	r0, [sp, #4]
   149e8:	bl	154b0 <__assert_fail@plt+0x45ec>
   149ec:	ldr	r3, [sp, #4]
   149f0:	sub	r1, r3, r1
   149f4:	cmp	fp, #0
   149f8:	moveq	r3, #0
   149fc:	streq	r3, [sl]
   14a00:	sub	r3, r4, r5
   14a04:	cmp	r3, r9
   14a08:	bge	14a90 <__assert_fail@plt+0x3bcc>
   14a0c:	cmp	r9, #0
   14a10:	blt	14b84 <__assert_fail@plt+0x3cc0>
   14a14:	cmp	r5, #0
   14a18:	blt	14b98 <__assert_fail@plt+0x3cd4>
   14a1c:	mvn	r3, #-2147483648	; 0x80000000
   14a20:	sub	r3, r3, r9
   14a24:	cmp	r5, r3
   14a28:	movle	r3, #0
   14a2c:	movgt	r3, #1
   14a30:	cmp	r3, #0
   14a34:	bne	14c40 <__assert_fail@plt+0x3d7c>
   14a38:	add	r5, r5, r9
   14a3c:	mov	r4, r5
   14a40:	cmp	r7, r5
   14a44:	movge	r7, #0
   14a48:	andlt	r7, r8, #1
   14a4c:	cmp	r7, #0
   14a50:	bne	14c40 <__assert_fail@plt+0x3d7c>
   14a54:	cmp	r6, #0
   14a58:	blt	14bac <__assert_fail@plt+0x3ce8>
   14a5c:	cmp	r6, #0
   14a60:	beq	14a8c <__assert_fail@plt+0x3bc8>
   14a64:	cmp	r5, #0
   14a68:	blt	14c08 <__assert_fail@plt+0x3d44>
   14a6c:	mov	r1, r6
   14a70:	mvn	r0, #-2147483648	; 0x80000000
   14a74:	bl	15290 <__assert_fail@plt+0x43cc>
   14a78:	cmp	r5, r0
   14a7c:	movle	r0, #0
   14a80:	movgt	r0, #1
   14a84:	cmp	r0, #0
   14a88:	bne	14c40 <__assert_fail@plt+0x3d7c>
   14a8c:	mul	r1, r5, r6
   14a90:	mov	r0, fp
   14a94:	bl	147ac <__assert_fail@plt+0x38e8>
   14a98:	str	r4, [sl]
   14a9c:	add	sp, sp, #12
   14aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa4:	rsb	r3, r4, #-2147483648	; 0x80000000
   14aa8:	cmp	r5, r3
   14aac:	movge	r3, #0
   14ab0:	movlt	r3, #1
   14ab4:	b	14968 <__assert_fail@plt+0x3aa4>
   14ab8:	rsb	r3, r5, #-2147483648	; 0x80000000
   14abc:	cmp	r4, r3
   14ac0:	movge	r3, #0
   14ac4:	movlt	r3, #1
   14ac8:	b	14968 <__assert_fail@plt+0x3aa4>
   14acc:	cmp	r4, #0
   14ad0:	blt	14af8 <__assert_fail@plt+0x3c34>
   14ad4:	cmn	r6, #1
   14ad8:	beq	14b14 <__assert_fail@plt+0x3c50>
   14adc:	mov	r1, r6
   14ae0:	mov	r0, #-2147483648	; 0x80000000
   14ae4:	bl	15290 <__assert_fail@plt+0x43cc>
   14ae8:	cmp	r0, r4
   14aec:	movge	r0, #0
   14af0:	movlt	r0, #1
   14af4:	b	149c0 <__assert_fail@plt+0x3afc>
   14af8:	mov	r1, r6
   14afc:	mvn	r0, #-2147483648	; 0x80000000
   14b00:	bl	15290 <__assert_fail@plt+0x43cc>
   14b04:	cmp	r0, r4
   14b08:	movle	r0, #0
   14b0c:	movgt	r0, #1
   14b10:	b	149c0 <__assert_fail@plt+0x3afc>
   14b14:	add	r0, r4, #-2147483648	; 0x80000000
   14b18:	cmp	r0, #0
   14b1c:	movle	r0, #0
   14b20:	movgt	r0, #1
   14b24:	b	149c0 <__assert_fail@plt+0x3afc>
   14b28:	cmn	r4, #1
   14b2c:	beq	14b4c <__assert_fail@plt+0x3c88>
   14b30:	mov	r1, r4
   14b34:	mov	r0, #-2147483648	; 0x80000000
   14b38:	bl	15290 <__assert_fail@plt+0x43cc>
   14b3c:	cmp	r6, r0
   14b40:	movle	r0, #0
   14b44:	movgt	r0, #1
   14b48:	b	149c0 <__assert_fail@plt+0x3afc>
   14b4c:	add	r0, r6, #-2147483648	; 0x80000000
   14b50:	cmp	r0, #0
   14b54:	movle	r0, #0
   14b58:	movgt	r0, #1
   14b5c:	b	149c0 <__assert_fail@plt+0x3afc>
   14b60:	mul	r1, r6, r4
   14b64:	cmp	r1, #63	; 0x3f
   14b68:	movle	r3, #64	; 0x40
   14b6c:	strle	r3, [sp, #4]
   14b70:	bgt	149f4 <__assert_fail@plt+0x3b30>
   14b74:	b	149d0 <__assert_fail@plt+0x3b0c>
   14b78:	mov	r3, #64	; 0x40
   14b7c:	str	r3, [sp, #4]
   14b80:	b	149d0 <__assert_fail@plt+0x3b0c>
   14b84:	rsb	r3, r9, #-2147483648	; 0x80000000
   14b88:	cmp	r5, r3
   14b8c:	movge	r3, #0
   14b90:	movlt	r3, #1
   14b94:	b	14a30 <__assert_fail@plt+0x3b6c>
   14b98:	rsb	r3, r5, #-2147483648	; 0x80000000
   14b9c:	cmp	r9, r3
   14ba0:	movge	r3, #0
   14ba4:	movlt	r3, #1
   14ba8:	b	14a30 <__assert_fail@plt+0x3b6c>
   14bac:	cmp	r5, #0
   14bb0:	blt	14bd8 <__assert_fail@plt+0x3d14>
   14bb4:	cmn	r6, #1
   14bb8:	beq	14bf4 <__assert_fail@plt+0x3d30>
   14bbc:	mov	r1, r6
   14bc0:	mov	r0, #-2147483648	; 0x80000000
   14bc4:	bl	15290 <__assert_fail@plt+0x43cc>
   14bc8:	cmp	r5, r0
   14bcc:	movle	r0, #0
   14bd0:	movgt	r0, #1
   14bd4:	b	14a84 <__assert_fail@plt+0x3bc0>
   14bd8:	mov	r1, r6
   14bdc:	mvn	r0, #-2147483648	; 0x80000000
   14be0:	bl	15290 <__assert_fail@plt+0x43cc>
   14be4:	cmp	r5, r0
   14be8:	movge	r0, #0
   14bec:	movlt	r0, #1
   14bf0:	b	14a84 <__assert_fail@plt+0x3bc0>
   14bf4:	add	r0, r5, #-2147483648	; 0x80000000
   14bf8:	cmp	r0, #0
   14bfc:	movle	r0, #0
   14c00:	movgt	r0, #1
   14c04:	b	14a84 <__assert_fail@plt+0x3bc0>
   14c08:	cmn	r5, #1
   14c0c:	beq	14c2c <__assert_fail@plt+0x3d68>
   14c10:	mov	r1, r5
   14c14:	mov	r0, #-2147483648	; 0x80000000
   14c18:	bl	15290 <__assert_fail@plt+0x43cc>
   14c1c:	cmp	r6, r0
   14c20:	movle	r0, #0
   14c24:	movgt	r0, #1
   14c28:	b	14a84 <__assert_fail@plt+0x3bc0>
   14c2c:	add	r0, r6, #-2147483648	; 0x80000000
   14c30:	cmp	r0, #0
   14c34:	movle	r0, #0
   14c38:	movgt	r0, #1
   14c3c:	b	14a84 <__assert_fail@plt+0x3bc0>
   14c40:	bl	14d1c <__assert_fail@plt+0x3e58>
   14c44:	push	{r4, lr}
   14c48:	bl	14d5c <__assert_fail@plt+0x3e98>
   14c4c:	cmp	r0, #0
   14c50:	popne	{r4, pc}
   14c54:	bl	14d1c <__assert_fail@plt+0x3e58>
   14c58:	push	{r4, lr}
   14c5c:	mov	r1, #1
   14c60:	bl	14c44 <__assert_fail@plt+0x3d80>
   14c64:	pop	{r4, pc}
   14c68:	push	{r4, lr}
   14c6c:	bl	14d5c <__assert_fail@plt+0x3e98>
   14c70:	cmp	r0, #0
   14c74:	popne	{r4, pc}
   14c78:	bl	14d1c <__assert_fail@plt+0x3e58>
   14c7c:	push	{r4, lr}
   14c80:	mov	r1, #1
   14c84:	bl	14c68 <__assert_fail@plt+0x3da4>
   14c88:	pop	{r4, pc}
   14c8c:	push	{r4, r5, r6, lr}
   14c90:	mov	r5, r0
   14c94:	mov	r4, r1
   14c98:	mov	r0, r1
   14c9c:	bl	14778 <__assert_fail@plt+0x38b4>
   14ca0:	mov	r2, r4
   14ca4:	mov	r1, r5
   14ca8:	bl	10ccc <memcpy@plt>
   14cac:	pop	{r4, r5, r6, pc}
   14cb0:	push	{r4, r5, r6, lr}
   14cb4:	mov	r5, r0
   14cb8:	mov	r4, r1
   14cbc:	mov	r0, r1
   14cc0:	bl	1478c <__assert_fail@plt+0x38c8>
   14cc4:	mov	r2, r4
   14cc8:	mov	r1, r5
   14ccc:	bl	10ccc <memcpy@plt>
   14cd0:	pop	{r4, r5, r6, pc}
   14cd4:	push	{r4, r5, r6, lr}
   14cd8:	mov	r5, r0
   14cdc:	mov	r4, r1
   14ce0:	add	r0, r1, #1
   14ce4:	bl	1478c <__assert_fail@plt+0x38c8>
   14ce8:	mov	r2, #0
   14cec:	strb	r2, [r0, r4]
   14cf0:	mov	r2, r4
   14cf4:	mov	r1, r5
   14cf8:	bl	10ccc <memcpy@plt>
   14cfc:	pop	{r4, r5, r6, pc}
   14d00:	push	{r4, lr}
   14d04:	mov	r4, r0
   14d08:	bl	10dd4 <strlen@plt>
   14d0c:	add	r1, r0, #1
   14d10:	mov	r0, r4
   14d14:	bl	14c8c <__assert_fail@plt+0x3dc8>
   14d18:	pop	{r4, pc}
   14d1c:	push	{r4, lr}
   14d20:	ldr	r3, [pc, #40]	; 14d50 <__assert_fail@plt+0x3e8c>
   14d24:	ldr	r4, [r3]
   14d28:	mov	r2, #5
   14d2c:	ldr	r1, [pc, #32]	; 14d54 <__assert_fail@plt+0x3e90>
   14d30:	mov	r0, #0
   14d34:	bl	10d08 <dcgettext@plt>
   14d38:	mov	r3, r0
   14d3c:	ldr	r2, [pc, #20]	; 14d58 <__assert_fail@plt+0x3e94>
   14d40:	mov	r1, #0
   14d44:	mov	r0, r4
   14d48:	bl	10d74 <error@plt>
   14d4c:	bl	10eac <abort@plt>
   14d50:	strdeq	r7, [r2], -r0
   14d54:	andeq	r6, r1, r0, lsl #7
   14d58:	andeq	r5, r1, r8, asr #25
   14d5c:	push	{r4, lr}
   14d60:	mov	r2, r0
   14d64:	mov	r3, r1
   14d68:	cmp	r1, #0
   14d6c:	cmpne	r0, #0
   14d70:	moveq	r3, #1
   14d74:	moveq	r2, r3
   14d78:	umull	r0, r1, r2, r3
   14d7c:	cmp	r0, #0
   14d80:	cmpge	r1, #0
   14d84:	bne	14d98 <__assert_fail@plt+0x3ed4>
   14d88:	mov	r1, r3
   14d8c:	mov	r0, r2
   14d90:	bl	10c6c <calloc@plt>
   14d94:	pop	{r4, pc}
   14d98:	bl	10de0 <__errno_location@plt>
   14d9c:	mov	r3, #12
   14da0:	str	r3, [r0]
   14da4:	mov	r0, #0
   14da8:	pop	{r4, pc}
   14dac:	push	{r4, lr}
   14db0:	cmp	r0, #0
   14db4:	moveq	r0, #1
   14db8:	cmp	r0, #0
   14dbc:	blt	14dc8 <__assert_fail@plt+0x3f04>
   14dc0:	bl	10d80 <malloc@plt>
   14dc4:	pop	{r4, pc}
   14dc8:	bl	10de0 <__errno_location@plt>
   14dcc:	mov	r3, #12
   14dd0:	str	r3, [r0]
   14dd4:	mov	r0, #0
   14dd8:	pop	{r4, pc}
   14ddc:	push	{r4, lr}
   14de0:	cmp	r0, #0
   14de4:	beq	14e00 <__assert_fail@plt+0x3f3c>
   14de8:	cmp	r1, #0
   14dec:	beq	14e0c <__assert_fail@plt+0x3f48>
   14df0:	cmp	r1, #0
   14df4:	blt	14e18 <__assert_fail@plt+0x3f54>
   14df8:	bl	10d14 <realloc@plt>
   14dfc:	pop	{r4, pc}
   14e00:	mov	r0, r1
   14e04:	bl	14dac <__assert_fail@plt+0x3ee8>
   14e08:	pop	{r4, pc}
   14e0c:	bl	12590 <__assert_fail@plt+0x16cc>
   14e10:	mov	r0, #0
   14e14:	pop	{r4, pc}
   14e18:	bl	10de0 <__errno_location@plt>
   14e1c:	mov	r3, #12
   14e20:	str	r3, [r0]
   14e24:	mov	r0, #0
   14e28:	pop	{r4, pc}
   14e2c:	push	{r4, r5, r6, lr}
   14e30:	mov	r5, r0
   14e34:	bl	10d5c <__fpending@plt>
   14e38:	mov	r6, r0
   14e3c:	ldr	r4, [r5]
   14e40:	and	r4, r4, #32
   14e44:	mov	r0, r5
   14e48:	bl	12484 <__assert_fail@plt+0x15c0>
   14e4c:	cmp	r4, #0
   14e50:	bne	14e78 <__assert_fail@plt+0x3fb4>
   14e54:	cmp	r0, #0
   14e58:	popeq	{r4, r5, r6, pc}
   14e5c:	cmp	r6, #0
   14e60:	bne	14e94 <__assert_fail@plt+0x3fd0>
   14e64:	bl	10de0 <__errno_location@plt>
   14e68:	ldr	r0, [r0]
   14e6c:	subs	r0, r0, #9
   14e70:	mvnne	r0, #0
   14e74:	pop	{r4, r5, r6, pc}
   14e78:	cmp	r0, #0
   14e7c:	bne	14e9c <__assert_fail@plt+0x3fd8>
   14e80:	bl	10de0 <__errno_location@plt>
   14e84:	mov	r3, #0
   14e88:	str	r3, [r0]
   14e8c:	mvn	r0, #0
   14e90:	pop	{r4, r5, r6, pc}
   14e94:	mvn	r0, #0
   14e98:	pop	{r4, r5, r6, pc}
   14e9c:	mvn	r0, #0
   14ea0:	pop	{r4, r5, r6, pc}
   14ea4:	push	{r4, lr}
   14ea8:	mov	r0, #14
   14eac:	bl	10e70 <nl_langinfo@plt>
   14eb0:	cmp	r0, #0
   14eb4:	beq	14ecc <__assert_fail@plt+0x4008>
   14eb8:	ldrb	r2, [r0]
   14ebc:	ldr	r3, [pc, #16]	; 14ed4 <__assert_fail@plt+0x4010>
   14ec0:	cmp	r2, #0
   14ec4:	moveq	r0, r3
   14ec8:	pop	{r4, pc}
   14ecc:	ldr	r0, [pc]	; 14ed4 <__assert_fail@plt+0x4010>
   14ed0:	pop	{r4, pc}
   14ed4:	muleq	r1, r4, r3
   14ed8:	push	{r4, r5, r6, r7, lr}
   14edc:	sub	sp, sp, #12
   14ee0:	mov	r7, r1
   14ee4:	mov	r5, r2
   14ee8:	subs	r6, r0, #0
   14eec:	addeq	r6, sp, #4
   14ef0:	mov	r0, r6
   14ef4:	bl	10d68 <mbrtowc@plt>
   14ef8:	mov	r4, r0
   14efc:	cmp	r5, #0
   14f00:	cmnne	r0, #3
   14f04:	bhi	14f14 <__assert_fail@plt+0x4050>
   14f08:	mov	r0, r4
   14f0c:	add	sp, sp, #12
   14f10:	pop	{r4, r5, r6, r7, pc}
   14f14:	mov	r0, #0
   14f18:	bl	14f7c <__assert_fail@plt+0x40b8>
   14f1c:	cmp	r0, #0
   14f20:	ldrbeq	r3, [r7]
   14f24:	streq	r3, [r6]
   14f28:	moveq	r4, #1
   14f2c:	b	14f08 <__assert_fail@plt+0x4044>
   14f30:	push	{r4, r5, r6, lr}
   14f34:	mov	r6, r0
   14f38:	mov	r5, r1
   14f3c:	subs	r4, r2, #0
   14f40:	beq	14f6c <__assert_fail@plt+0x40a8>
   14f44:	mov	r1, r4
   14f48:	mvn	r0, #0
   14f4c:	bl	15084 <__assert_fail@plt+0x41c0>
   14f50:	cmp	r0, r5
   14f54:	bcs	14f6c <__assert_fail@plt+0x40a8>
   14f58:	bl	10de0 <__errno_location@plt>
   14f5c:	mov	r3, #12
   14f60:	str	r3, [r0]
   14f64:	mov	r0, #0
   14f68:	pop	{r4, r5, r6, pc}
   14f6c:	mul	r1, r5, r4
   14f70:	mov	r0, r6
   14f74:	bl	14ddc <__assert_fail@plt+0x3f18>
   14f78:	pop	{r4, r5, r6, pc}
   14f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   14f80:	sub	sp, sp, #268	; 0x10c
   14f84:	ldr	r2, [pc, #68]	; 14fd0 <__assert_fail@plt+0x410c>
   14f88:	add	r1, sp, #4
   14f8c:	bl	14fdc <__assert_fail@plt+0x4118>
   14f90:	cmp	r0, #0
   14f94:	movne	r0, #0
   14f98:	bne	14fc8 <__assert_fail@plt+0x4104>
   14f9c:	ldr	r1, [pc, #48]	; 14fd4 <__assert_fail@plt+0x4110>
   14fa0:	add	r0, sp, #4
   14fa4:	bl	10c90 <strcmp@plt>
   14fa8:	cmp	r0, #0
   14fac:	moveq	r0, #0
   14fb0:	beq	14fc8 <__assert_fail@plt+0x4104>
   14fb4:	ldr	r1, [pc, #28]	; 14fd8 <__assert_fail@plt+0x4114>
   14fb8:	add	r0, sp, #4
   14fbc:	bl	10c90 <strcmp@plt>
   14fc0:	adds	r0, r0, #0
   14fc4:	movne	r0, #1
   14fc8:	add	sp, sp, #268	; 0x10c
   14fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd0:	andeq	r0, r0, r1, lsl #2
   14fd4:	muleq	r1, ip, r3
   14fd8:	andeq	r6, r1, r0, lsr #7
   14fdc:	push	{r4, r5, r6, lr}
   14fe0:	mov	r6, r1
   14fe4:	mov	r4, r2
   14fe8:	mov	r1, #0
   14fec:	bl	10e58 <setlocale@plt>
   14ff0:	subs	r5, r0, #0
   14ff4:	beq	15018 <__assert_fail@plt+0x4154>
   14ff8:	mov	r0, r5
   14ffc:	bl	10dd4 <strlen@plt>
   15000:	cmp	r4, r0
   15004:	bhi	15030 <__assert_fail@plt+0x416c>
   15008:	cmp	r4, #0
   1500c:	bne	15048 <__assert_fail@plt+0x4184>
   15010:	mov	r0, #34	; 0x22
   15014:	pop	{r4, r5, r6, pc}
   15018:	cmp	r4, #0
   1501c:	beq	1506c <__assert_fail@plt+0x41a8>
   15020:	mov	r3, #0
   15024:	strb	r3, [r6]
   15028:	mov	r0, #22
   1502c:	pop	{r4, r5, r6, pc}
   15030:	add	r2, r0, #1
   15034:	mov	r1, r5
   15038:	mov	r0, r6
   1503c:	bl	10ccc <memcpy@plt>
   15040:	mov	r0, #0
   15044:	pop	{r4, r5, r6, pc}
   15048:	sub	r4, r4, #1
   1504c:	mov	r2, r4
   15050:	mov	r1, r5
   15054:	mov	r0, r6
   15058:	bl	10ccc <memcpy@plt>
   1505c:	mov	r3, #0
   15060:	strb	r3, [r6, r4]
   15064:	mov	r0, #34	; 0x22
   15068:	pop	{r4, r5, r6, pc}
   1506c:	mov	r0, #22
   15070:	pop	{r4, r5, r6, pc}
   15074:	push	{r4, lr}
   15078:	mov	r1, #0
   1507c:	bl	10e58 <setlocale@plt>
   15080:	pop	{r4, pc}
   15084:	subs	r2, r1, #1
   15088:	bxeq	lr
   1508c:	bcc	15264 <__assert_fail@plt+0x43a0>
   15090:	cmp	r0, r1
   15094:	bls	15248 <__assert_fail@plt+0x4384>
   15098:	tst	r1, r2
   1509c:	beq	15254 <__assert_fail@plt+0x4390>
   150a0:	clz	r3, r0
   150a4:	clz	r2, r1
   150a8:	sub	r3, r2, r3
   150ac:	rsbs	r3, r3, #31
   150b0:	addne	r3, r3, r3, lsl #1
   150b4:	mov	r2, #0
   150b8:	addne	pc, pc, r3, lsl #2
   150bc:	nop			; (mov r0, r0)
   150c0:	cmp	r0, r1, lsl #31
   150c4:	adc	r2, r2, r2
   150c8:	subcs	r0, r0, r1, lsl #31
   150cc:	cmp	r0, r1, lsl #30
   150d0:	adc	r2, r2, r2
   150d4:	subcs	r0, r0, r1, lsl #30
   150d8:	cmp	r0, r1, lsl #29
   150dc:	adc	r2, r2, r2
   150e0:	subcs	r0, r0, r1, lsl #29
   150e4:	cmp	r0, r1, lsl #28
   150e8:	adc	r2, r2, r2
   150ec:	subcs	r0, r0, r1, lsl #28
   150f0:	cmp	r0, r1, lsl #27
   150f4:	adc	r2, r2, r2
   150f8:	subcs	r0, r0, r1, lsl #27
   150fc:	cmp	r0, r1, lsl #26
   15100:	adc	r2, r2, r2
   15104:	subcs	r0, r0, r1, lsl #26
   15108:	cmp	r0, r1, lsl #25
   1510c:	adc	r2, r2, r2
   15110:	subcs	r0, r0, r1, lsl #25
   15114:	cmp	r0, r1, lsl #24
   15118:	adc	r2, r2, r2
   1511c:	subcs	r0, r0, r1, lsl #24
   15120:	cmp	r0, r1, lsl #23
   15124:	adc	r2, r2, r2
   15128:	subcs	r0, r0, r1, lsl #23
   1512c:	cmp	r0, r1, lsl #22
   15130:	adc	r2, r2, r2
   15134:	subcs	r0, r0, r1, lsl #22
   15138:	cmp	r0, r1, lsl #21
   1513c:	adc	r2, r2, r2
   15140:	subcs	r0, r0, r1, lsl #21
   15144:	cmp	r0, r1, lsl #20
   15148:	adc	r2, r2, r2
   1514c:	subcs	r0, r0, r1, lsl #20
   15150:	cmp	r0, r1, lsl #19
   15154:	adc	r2, r2, r2
   15158:	subcs	r0, r0, r1, lsl #19
   1515c:	cmp	r0, r1, lsl #18
   15160:	adc	r2, r2, r2
   15164:	subcs	r0, r0, r1, lsl #18
   15168:	cmp	r0, r1, lsl #17
   1516c:	adc	r2, r2, r2
   15170:	subcs	r0, r0, r1, lsl #17
   15174:	cmp	r0, r1, lsl #16
   15178:	adc	r2, r2, r2
   1517c:	subcs	r0, r0, r1, lsl #16
   15180:	cmp	r0, r1, lsl #15
   15184:	adc	r2, r2, r2
   15188:	subcs	r0, r0, r1, lsl #15
   1518c:	cmp	r0, r1, lsl #14
   15190:	adc	r2, r2, r2
   15194:	subcs	r0, r0, r1, lsl #14
   15198:	cmp	r0, r1, lsl #13
   1519c:	adc	r2, r2, r2
   151a0:	subcs	r0, r0, r1, lsl #13
   151a4:	cmp	r0, r1, lsl #12
   151a8:	adc	r2, r2, r2
   151ac:	subcs	r0, r0, r1, lsl #12
   151b0:	cmp	r0, r1, lsl #11
   151b4:	adc	r2, r2, r2
   151b8:	subcs	r0, r0, r1, lsl #11
   151bc:	cmp	r0, r1, lsl #10
   151c0:	adc	r2, r2, r2
   151c4:	subcs	r0, r0, r1, lsl #10
   151c8:	cmp	r0, r1, lsl #9
   151cc:	adc	r2, r2, r2
   151d0:	subcs	r0, r0, r1, lsl #9
   151d4:	cmp	r0, r1, lsl #8
   151d8:	adc	r2, r2, r2
   151dc:	subcs	r0, r0, r1, lsl #8
   151e0:	cmp	r0, r1, lsl #7
   151e4:	adc	r2, r2, r2
   151e8:	subcs	r0, r0, r1, lsl #7
   151ec:	cmp	r0, r1, lsl #6
   151f0:	adc	r2, r2, r2
   151f4:	subcs	r0, r0, r1, lsl #6
   151f8:	cmp	r0, r1, lsl #5
   151fc:	adc	r2, r2, r2
   15200:	subcs	r0, r0, r1, lsl #5
   15204:	cmp	r0, r1, lsl #4
   15208:	adc	r2, r2, r2
   1520c:	subcs	r0, r0, r1, lsl #4
   15210:	cmp	r0, r1, lsl #3
   15214:	adc	r2, r2, r2
   15218:	subcs	r0, r0, r1, lsl #3
   1521c:	cmp	r0, r1, lsl #2
   15220:	adc	r2, r2, r2
   15224:	subcs	r0, r0, r1, lsl #2
   15228:	cmp	r0, r1, lsl #1
   1522c:	adc	r2, r2, r2
   15230:	subcs	r0, r0, r1, lsl #1
   15234:	cmp	r0, r1
   15238:	adc	r2, r2, r2
   1523c:	subcs	r0, r0, r1
   15240:	mov	r0, r2
   15244:	bx	lr
   15248:	moveq	r0, #1
   1524c:	movne	r0, #0
   15250:	bx	lr
   15254:	clz	r2, r1
   15258:	rsb	r2, r2, #31
   1525c:	lsr	r0, r0, r2
   15260:	bx	lr
   15264:	cmp	r0, #0
   15268:	mvnne	r0, #0
   1526c:	b	1550c <__assert_fail@plt+0x4648>
   15270:	cmp	r1, #0
   15274:	beq	15264 <__assert_fail@plt+0x43a0>
   15278:	push	{r0, r1, lr}
   1527c:	bl	15084 <__assert_fail@plt+0x41c0>
   15280:	pop	{r1, r2, lr}
   15284:	mul	r3, r2, r0
   15288:	sub	r1, r1, r3
   1528c:	bx	lr
   15290:	cmp	r1, #0
   15294:	beq	154a0 <__assert_fail@plt+0x45dc>
   15298:	eor	ip, r0, r1
   1529c:	rsbmi	r1, r1, #0
   152a0:	subs	r2, r1, #1
   152a4:	beq	1546c <__assert_fail@plt+0x45a8>
   152a8:	movs	r3, r0
   152ac:	rsbmi	r3, r0, #0
   152b0:	cmp	r3, r1
   152b4:	bls	15478 <__assert_fail@plt+0x45b4>
   152b8:	tst	r1, r2
   152bc:	beq	15488 <__assert_fail@plt+0x45c4>
   152c0:	clz	r2, r3
   152c4:	clz	r0, r1
   152c8:	sub	r2, r0, r2
   152cc:	rsbs	r2, r2, #31
   152d0:	addne	r2, r2, r2, lsl #1
   152d4:	mov	r0, #0
   152d8:	addne	pc, pc, r2, lsl #2
   152dc:	nop			; (mov r0, r0)
   152e0:	cmp	r3, r1, lsl #31
   152e4:	adc	r0, r0, r0
   152e8:	subcs	r3, r3, r1, lsl #31
   152ec:	cmp	r3, r1, lsl #30
   152f0:	adc	r0, r0, r0
   152f4:	subcs	r3, r3, r1, lsl #30
   152f8:	cmp	r3, r1, lsl #29
   152fc:	adc	r0, r0, r0
   15300:	subcs	r3, r3, r1, lsl #29
   15304:	cmp	r3, r1, lsl #28
   15308:	adc	r0, r0, r0
   1530c:	subcs	r3, r3, r1, lsl #28
   15310:	cmp	r3, r1, lsl #27
   15314:	adc	r0, r0, r0
   15318:	subcs	r3, r3, r1, lsl #27
   1531c:	cmp	r3, r1, lsl #26
   15320:	adc	r0, r0, r0
   15324:	subcs	r3, r3, r1, lsl #26
   15328:	cmp	r3, r1, lsl #25
   1532c:	adc	r0, r0, r0
   15330:	subcs	r3, r3, r1, lsl #25
   15334:	cmp	r3, r1, lsl #24
   15338:	adc	r0, r0, r0
   1533c:	subcs	r3, r3, r1, lsl #24
   15340:	cmp	r3, r1, lsl #23
   15344:	adc	r0, r0, r0
   15348:	subcs	r3, r3, r1, lsl #23
   1534c:	cmp	r3, r1, lsl #22
   15350:	adc	r0, r0, r0
   15354:	subcs	r3, r3, r1, lsl #22
   15358:	cmp	r3, r1, lsl #21
   1535c:	adc	r0, r0, r0
   15360:	subcs	r3, r3, r1, lsl #21
   15364:	cmp	r3, r1, lsl #20
   15368:	adc	r0, r0, r0
   1536c:	subcs	r3, r3, r1, lsl #20
   15370:	cmp	r3, r1, lsl #19
   15374:	adc	r0, r0, r0
   15378:	subcs	r3, r3, r1, lsl #19
   1537c:	cmp	r3, r1, lsl #18
   15380:	adc	r0, r0, r0
   15384:	subcs	r3, r3, r1, lsl #18
   15388:	cmp	r3, r1, lsl #17
   1538c:	adc	r0, r0, r0
   15390:	subcs	r3, r3, r1, lsl #17
   15394:	cmp	r3, r1, lsl #16
   15398:	adc	r0, r0, r0
   1539c:	subcs	r3, r3, r1, lsl #16
   153a0:	cmp	r3, r1, lsl #15
   153a4:	adc	r0, r0, r0
   153a8:	subcs	r3, r3, r1, lsl #15
   153ac:	cmp	r3, r1, lsl #14
   153b0:	adc	r0, r0, r0
   153b4:	subcs	r3, r3, r1, lsl #14
   153b8:	cmp	r3, r1, lsl #13
   153bc:	adc	r0, r0, r0
   153c0:	subcs	r3, r3, r1, lsl #13
   153c4:	cmp	r3, r1, lsl #12
   153c8:	adc	r0, r0, r0
   153cc:	subcs	r3, r3, r1, lsl #12
   153d0:	cmp	r3, r1, lsl #11
   153d4:	adc	r0, r0, r0
   153d8:	subcs	r3, r3, r1, lsl #11
   153dc:	cmp	r3, r1, lsl #10
   153e0:	adc	r0, r0, r0
   153e4:	subcs	r3, r3, r1, lsl #10
   153e8:	cmp	r3, r1, lsl #9
   153ec:	adc	r0, r0, r0
   153f0:	subcs	r3, r3, r1, lsl #9
   153f4:	cmp	r3, r1, lsl #8
   153f8:	adc	r0, r0, r0
   153fc:	subcs	r3, r3, r1, lsl #8
   15400:	cmp	r3, r1, lsl #7
   15404:	adc	r0, r0, r0
   15408:	subcs	r3, r3, r1, lsl #7
   1540c:	cmp	r3, r1, lsl #6
   15410:	adc	r0, r0, r0
   15414:	subcs	r3, r3, r1, lsl #6
   15418:	cmp	r3, r1, lsl #5
   1541c:	adc	r0, r0, r0
   15420:	subcs	r3, r3, r1, lsl #5
   15424:	cmp	r3, r1, lsl #4
   15428:	adc	r0, r0, r0
   1542c:	subcs	r3, r3, r1, lsl #4
   15430:	cmp	r3, r1, lsl #3
   15434:	adc	r0, r0, r0
   15438:	subcs	r3, r3, r1, lsl #3
   1543c:	cmp	r3, r1, lsl #2
   15440:	adc	r0, r0, r0
   15444:	subcs	r3, r3, r1, lsl #2
   15448:	cmp	r3, r1, lsl #1
   1544c:	adc	r0, r0, r0
   15450:	subcs	r3, r3, r1, lsl #1
   15454:	cmp	r3, r1
   15458:	adc	r0, r0, r0
   1545c:	subcs	r3, r3, r1
   15460:	cmp	ip, #0
   15464:	rsbmi	r0, r0, #0
   15468:	bx	lr
   1546c:	teq	ip, r0
   15470:	rsbmi	r0, r0, #0
   15474:	bx	lr
   15478:	movcc	r0, #0
   1547c:	asreq	r0, ip, #31
   15480:	orreq	r0, r0, #1
   15484:	bx	lr
   15488:	clz	r2, r1
   1548c:	rsb	r2, r2, #31
   15490:	cmp	ip, #0
   15494:	lsr	r0, r3, r2
   15498:	rsbmi	r0, r0, #0
   1549c:	bx	lr
   154a0:	cmp	r0, #0
   154a4:	mvngt	r0, #-2147483648	; 0x80000000
   154a8:	movlt	r0, #-2147483648	; 0x80000000
   154ac:	b	1550c <__assert_fail@plt+0x4648>
   154b0:	cmp	r1, #0
   154b4:	beq	154a0 <__assert_fail@plt+0x45dc>
   154b8:	push	{r0, r1, lr}
   154bc:	bl	15298 <__assert_fail@plt+0x43d4>
   154c0:	pop	{r1, r2, lr}
   154c4:	mul	r3, r2, r0
   154c8:	sub	r1, r1, r3
   154cc:	bx	lr
   154d0:	cmp	r3, #0
   154d4:	cmpeq	r2, #0
   154d8:	bne	154f0 <__assert_fail@plt+0x462c>
   154dc:	cmp	r1, #0
   154e0:	cmpeq	r0, #0
   154e4:	mvnne	r1, #0
   154e8:	mvnne	r0, #0
   154ec:	b	1550c <__assert_fail@plt+0x4648>
   154f0:	sub	sp, sp, #8
   154f4:	push	{sp, lr}
   154f8:	bl	1551c <__assert_fail@plt+0x4658>
   154fc:	ldr	lr, [sp, #4]
   15500:	add	sp, sp, #8
   15504:	pop	{r2, r3}
   15508:	bx	lr
   1550c:	push	{r1, lr}
   15510:	mov	r0, #8
   15514:	bl	10c84 <raise@plt>
   15518:	pop	{r1, pc}
   1551c:	cmp	r1, r3
   15520:	push	{r4, r5, r6, r7, r8, r9, lr}
   15524:	cmpeq	r0, r2
   15528:	mov	r4, r0
   1552c:	mov	r5, r1
   15530:	ldr	r9, [sp, #28]
   15534:	movcc	r0, #0
   15538:	movcc	r1, #0
   1553c:	bcc	15634 <__assert_fail@plt+0x4770>
   15540:	cmp	r3, #0
   15544:	clzeq	ip, r2
   15548:	clzne	ip, r3
   1554c:	addeq	ip, ip, #32
   15550:	cmp	r5, #0
   15554:	clzeq	r1, r4
   15558:	addeq	r1, r1, #32
   1555c:	clzne	r1, r5
   15560:	sub	ip, ip, r1
   15564:	sub	lr, ip, #32
   15568:	lsl	r7, r3, ip
   1556c:	rsb	r8, ip, #32
   15570:	orr	r7, r7, r2, lsl lr
   15574:	orr	r7, r7, r2, lsr r8
   15578:	lsl	r6, r2, ip
   1557c:	cmp	r5, r7
   15580:	cmpeq	r4, r6
   15584:	movcc	r0, #0
   15588:	movcc	r1, #0
   1558c:	bcc	155a8 <__assert_fail@plt+0x46e4>
   15590:	mov	r3, #1
   15594:	subs	r4, r4, r6
   15598:	lsl	r1, r3, lr
   1559c:	lsl	r0, r3, ip
   155a0:	orr	r1, r1, r3, lsr r8
   155a4:	sbc	r5, r5, r7
   155a8:	cmp	ip, #0
   155ac:	beq	15634 <__assert_fail@plt+0x4770>
   155b0:	lsrs	r3, r7, #1
   155b4:	rrx	r2, r6
   155b8:	mov	r6, ip
   155bc:	b	155e0 <__assert_fail@plt+0x471c>
   155c0:	subs	r4, r4, r2
   155c4:	sbc	r5, r5, r3
   155c8:	adds	r4, r4, r4
   155cc:	adc	r5, r5, r5
   155d0:	adds	r4, r4, #1
   155d4:	adc	r5, r5, #0
   155d8:	subs	r6, r6, #1
   155dc:	beq	155fc <__assert_fail@plt+0x4738>
   155e0:	cmp	r5, r3
   155e4:	cmpeq	r4, r2
   155e8:	bcs	155c0 <__assert_fail@plt+0x46fc>
   155ec:	adds	r4, r4, r4
   155f0:	adc	r5, r5, r5
   155f4:	subs	r6, r6, #1
   155f8:	bne	155e0 <__assert_fail@plt+0x471c>
   155fc:	lsr	r6, r4, ip
   15600:	lsr	r7, r5, ip
   15604:	orr	r6, r6, r5, lsl r8
   15608:	adds	r2, r0, r4
   1560c:	orr	r6, r6, r5, lsr lr
   15610:	adc	r3, r1, r5
   15614:	lsl	r1, r7, ip
   15618:	orr	r1, r1, r6, lsl lr
   1561c:	lsl	r0, r6, ip
   15620:	orr	r1, r1, r6, lsr r8
   15624:	subs	r0, r2, r0
   15628:	mov	r4, r6
   1562c:	mov	r5, r7
   15630:	sbc	r1, r3, r1
   15634:	cmp	r9, #0
   15638:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1563c:	strd	r4, [r9]
   15640:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15644:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15648:	mov	r7, r0
   1564c:	ldr	r6, [pc, #72]	; 1569c <__assert_fail@plt+0x47d8>
   15650:	ldr	r5, [pc, #72]	; 156a0 <__assert_fail@plt+0x47dc>
   15654:	add	r6, pc, r6
   15658:	add	r5, pc, r5
   1565c:	sub	r6, r6, r5
   15660:	mov	r8, r1
   15664:	mov	r9, r2
   15668:	bl	10c4c <calloc@plt-0x20>
   1566c:	asrs	r6, r6, #2
   15670:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15674:	mov	r4, #0
   15678:	add	r4, r4, #1
   1567c:	ldr	r3, [r5], #4
   15680:	mov	r2, r9
   15684:	mov	r1, r8
   15688:	mov	r0, r7
   1568c:	blx	r3
   15690:	cmp	r6, r4
   15694:	bne	15678 <__assert_fail@plt+0x47b4>
   15698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1569c:			; <UNDEFINED> instruction: 0x000118b4
   156a0:	andeq	r1, r1, ip, lsr #17
   156a4:	bx	lr
   156a8:	ldr	r3, [pc, #12]	; 156bc <__assert_fail@plt+0x47f8>
   156ac:	mov	r1, #0
   156b0:	add	r3, pc, r3
   156b4:	ldr	r2, [r3]
   156b8:	b	10dec <__cxa_atexit@plt>
   156bc:	andeq	r1, r1, r8, lsr #20

Disassembly of section .fini:

000156c0 <.fini>:
   156c0:	push	{r3, lr}
   156c4:	pop	{r3, pc}
