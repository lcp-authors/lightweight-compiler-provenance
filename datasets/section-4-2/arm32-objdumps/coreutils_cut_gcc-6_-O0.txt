
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e10 <.init>:
   10e10:	push	{r3, lr}
   10e14:	bl	1113c <__assert_fail@plt+0x48>
   10e18:	pop	{r3, pc}

Disassembly of section .plt:

00010e1c <calloc@plt-0x14>:
   10e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e20:	ldr	lr, [pc, #4]	; 10e2c <calloc@plt-0x4>
   10e24:	add	lr, pc, lr
   10e28:	ldr	pc, [lr, #8]!
   10e2c:	ldrdeq	sl, [r1], -r4

00010e30 <calloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #468]!	; 0x1d4

00010e3c <fputs_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #460]!	; 0x1cc

00010e48 <raise@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #452]!	; 0x1c4

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e60 <posix_fadvise64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #436]!	; 0x1b4

00010e6c <printf@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #428]!	; 0x1ac

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #420]!	; 0x1a4

00010e84 <memmove@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #412]!	; 0x19c

00010e90 <free@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #404]!	; 0x194

00010e9c <ferror@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #396]!	; 0x18c

00010ea8 <_exit@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #388]!	; 0x184

00010eb4 <memcpy@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #380]!	; 0x17c

00010ec0 <mbsinit@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #372]!	; 0x174

00010ecc <fwrite_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #364]!	; 0x16c

00010ed8 <memcmp@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #356]!	; 0x164

00010ee4 <fputc_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #348]!	; 0x15c

00010ef0 <getc_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #340]!	; 0x154

00010efc <realloc@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #332]!	; 0x14c

00010f08 <textdomain@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #324]!	; 0x144

00010f14 <iswprint@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #316]!	; 0x13c

00010f20 <fwrite@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #308]!	; 0x134

00010f2c <lseek64@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #300]!	; 0x12c

00010f38 <__ctype_get_mb_cur_max@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #292]!	; 0x124

00010f44 <fread@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #284]!	; 0x11c

00010f50 <__fpending@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #276]!	; 0x114

00010f5c <ferror_unlocked@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #268]!	; 0x10c

00010f68 <mbrtowc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #260]!	; 0x104

00010f74 <error@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #252]!	; 0xfc

00010f80 <malloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #106496	; 0x1a000
   10f88:	ldr	pc, [ip, #244]!	; 0xf4

00010f8c <__libc_start_main@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #106496	; 0x1a000
   10f94:	ldr	pc, [ip, #236]!	; 0xec

00010f98 <__freading@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #106496	; 0x1a000
   10fa0:	ldr	pc, [ip, #228]!	; 0xe4

00010fa4 <__gmon_start__@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #106496	; 0x1a000
   10fac:	ldr	pc, [ip, #220]!	; 0xdc

00010fb0 <getopt_long@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #106496	; 0x1a000
   10fb8:	ldr	pc, [ip, #212]!	; 0xd4

00010fbc <__ctype_b_loc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #106496	; 0x1a000
   10fc4:	ldr	pc, [ip, #204]!	; 0xcc

00010fc8 <exit@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #106496	; 0x1a000
   10fd0:	ldr	pc, [ip, #196]!	; 0xc4

00010fd4 <gettext@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #106496	; 0x1a000
   10fdc:	ldr	pc, [ip, #188]!	; 0xbc

00010fe0 <strlen@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #180]!	; 0xb4

00010fec <fprintf@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #172]!	; 0xac

00010ff8 <ungetc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #164]!	; 0xa4

00011004 <__errno_location@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #156]!	; 0x9c

00011010 <__cxa_atexit@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #148]!	; 0x94

0001101c <memset@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #106496	; 0x1a000
   11024:	ldr	pc, [ip, #140]!	; 0x8c

00011028 <fgetc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #106496	; 0x1a000
   11030:	ldr	pc, [ip, #132]!	; 0x84

00011034 <fileno@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #106496	; 0x1a000
   1103c:	ldr	pc, [ip, #124]!	; 0x7c

00011040 <memchr@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #106496	; 0x1a000
   11048:	ldr	pc, [ip, #116]!	; 0x74

0001104c <fclose@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #106496	; 0x1a000
   11054:	ldr	pc, [ip, #108]!	; 0x6c

00011058 <fseeko64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #106496	; 0x1a000
   11060:	ldr	pc, [ip, #100]!	; 0x64

00011064 <setlocale@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #106496	; 0x1a000
   1106c:	ldr	pc, [ip, #92]!	; 0x5c

00011070 <strrchr@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #84]!	; 0x54

0001107c <nl_langinfo@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #76]!	; 0x4c

00011088 <clearerr_unlocked@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #68]!	; 0x44

00011094 <fopen64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #60]!	; 0x3c

000110a0 <qsort@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #52]!	; 0x34

000110ac <bindtextdomain@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #106496	; 0x1a000
   110b4:	ldr	pc, [ip, #44]!	; 0x2c

000110b8 <strncmp@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #106496	; 0x1a000
   110c0:	ldr	pc, [ip, #36]!	; 0x24

000110c4 <abort@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #106496	; 0x1a000
   110cc:	ldr	pc, [ip, #28]!

000110d0 <feof_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #106496	; 0x1a000
   110d8:	ldr	pc, [ip, #20]!

000110dc <putchar_unlocked@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #106496	; 0x1a000
   110e4:	ldr	pc, [ip, #12]!

000110e8 <strspn@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #106496	; 0x1a000
   110f0:	ldr	pc, [ip, #4]!

000110f4 <__assert_fail@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #4092]!	; 0xffc

Disassembly of section .text:

00011100 <.text>:
   11100:	mov	fp, #0
   11104:	mov	lr, #0
   11108:	pop	{r1}		; (ldr r1, [sp], #4)
   1110c:	mov	r2, sp
   11110:	push	{r2}		; (str r2, [sp, #-4]!)
   11114:	push	{r0}		; (str r0, [sp, #-4]!)
   11118:	ldr	ip, [pc, #16]	; 11130 <__assert_fail@plt+0x3c>
   1111c:	push	{ip}		; (str ip, [sp, #-4]!)
   11120:	ldr	r0, [pc, #12]	; 11134 <__assert_fail@plt+0x40>
   11124:	ldr	r3, [pc, #12]	; 11138 <__assert_fail@plt+0x44>
   11128:	bl	10f8c <__libc_start_main@plt>
   1112c:	bl	110c4 <abort@plt>
   11130:	andeq	r8, r1, r8, asr #28
   11134:	ldrdeq	r1, [r1], -ip
   11138:	andeq	r8, r1, r8, ror #27
   1113c:	ldr	r3, [pc, #20]	; 11158 <__assert_fail@plt+0x64>
   11140:	ldr	r2, [pc, #20]	; 1115c <__assert_fail@plt+0x68>
   11144:	add	r3, pc, r3
   11148:	ldr	r2, [r3, r2]
   1114c:	cmp	r2, #0
   11150:	bxeq	lr
   11154:	b	10fa4 <__gmon_start__@plt>
   11158:			; <UNDEFINED> instruction: 0x00019eb4
   1115c:	strdeq	r0, [r0], -ip
   11160:	ldr	r3, [pc, #28]	; 11184 <__assert_fail@plt+0x90>
   11164:	ldr	r0, [pc, #28]	; 11188 <__assert_fail@plt+0x94>
   11168:	sub	r3, r3, r0
   1116c:	cmp	r3, #6
   11170:	bxls	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <__assert_fail@plt+0x98>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	fp, r2, r7, asr r1
   11188:	andeq	fp, r2, r4, asr r1
   1118c:	andeq	r0, r0, r0
   11190:	ldr	r1, [pc, #36]	; 111bc <__assert_fail@plt+0xc8>
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xcc>
   11198:	sub	r1, r1, r0
   1119c:	asr	r1, r1, #2
   111a0:	add	r1, r1, r1, lsr #31
   111a4:	asrs	r1, r1, #1
   111a8:	bxeq	lr
   111ac:	ldr	r3, [pc, #16]	; 111c4 <__assert_fail@plt+0xd0>
   111b0:	cmp	r3, #0
   111b4:	bxeq	lr
   111b8:	bx	r3
   111bc:	andeq	fp, r2, r4, asr r1
   111c0:	andeq	fp, r2, r4, asr r1
   111c4:	andeq	r0, r0, r0
   111c8:	push	{r4, lr}
   111cc:	ldr	r4, [pc, #24]	; 111ec <__assert_fail@plt+0xf8>
   111d0:	ldrb	r3, [r4]
   111d4:	cmp	r3, #0
   111d8:	popne	{r4, pc}
   111dc:	bl	11160 <__assert_fail@plt+0x6c>
   111e0:	mov	r3, #1
   111e4:	strb	r3, [r4]
   111e8:	pop	{r4, pc}
   111ec:	andeq	fp, r2, ip, ror r1
   111f0:	ldr	r0, [pc, #40]	; 11220 <__assert_fail@plt+0x12c>
   111f4:	ldr	r3, [r0]
   111f8:	cmp	r3, #0
   111fc:	bne	11204 <__assert_fail@plt+0x110>
   11200:	b	11190 <__assert_fail@plt+0x9c>
   11204:	ldr	r3, [pc, #24]	; 11224 <__assert_fail@plt+0x130>
   11208:	cmp	r3, #0
   1120c:	beq	11200 <__assert_fail@plt+0x10c>
   11210:	push	{r4, lr}
   11214:	blx	r3
   11218:	pop	{r4, lr}
   1121c:	b	11190 <__assert_fail@plt+0x9c>
   11220:	andeq	sl, r2, r4, lsl pc
   11224:	andeq	r0, r0, r0
   11228:	push	{fp}		; (str fp, [sp, #-4]!)
   1122c:	add	fp, sp, #0
   11230:	sub	sp, sp, #12
   11234:	mov	r3, r0
   11238:	strb	r3, [fp, #-5]
   1123c:	ldrb	r3, [fp, #-5]
   11240:	mov	r0, r3
   11244:	add	sp, fp, #0
   11248:	pop	{fp}		; (ldr fp, [sp], #4)
   1124c:	bx	lr
   11250:	push	{fp, lr}
   11254:	add	fp, sp, #4
   11258:	ldr	r0, [pc, #32]	; 11280 <__assert_fail@plt+0x18c>
   1125c:	bl	10fd4 <gettext@plt>
   11260:	mov	r2, r0
   11264:	ldr	r3, [pc, #24]	; 11284 <__assert_fail@plt+0x190>
   11268:	ldr	r3, [r3]
   1126c:	mov	r1, r3
   11270:	mov	r0, r2
   11274:	bl	10e3c <fputs_unlocked@plt>
   11278:	nop			; (mov r0, r0)
   1127c:	pop	{fp, pc}
   11280:	andeq	r8, r1, r0, ror lr
   11284:	andeq	fp, r2, r4, ror r1
   11288:	push	{fp, lr}
   1128c:	add	fp, sp, #4
   11290:	ldr	r0, [pc, #32]	; 112b8 <__assert_fail@plt+0x1c4>
   11294:	bl	10fd4 <gettext@plt>
   11298:	mov	r2, r0
   1129c:	ldr	r3, [pc, #24]	; 112bc <__assert_fail@plt+0x1c8>
   112a0:	ldr	r3, [r3]
   112a4:	mov	r1, r3
   112a8:	mov	r0, r2
   112ac:	bl	10e3c <fputs_unlocked@plt>
   112b0:	nop			; (mov r0, r0)
   112b4:	pop	{fp, pc}
   112b8:	andeq	r8, r1, r8, lsr #29
   112bc:	andeq	fp, r2, r4, ror r1
   112c0:	push	{fp, lr}
   112c4:	add	fp, sp, #4
   112c8:	sub	sp, sp, #80	; 0x50
   112cc:	str	r0, [fp, #-80]	; 0xffffffb0
   112d0:	ldr	r3, [pc, #348]	; 11434 <__assert_fail@plt+0x340>
   112d4:	sub	ip, fp, #72	; 0x48
   112d8:	mov	lr, r3
   112dc:	ldm	lr!, {r0, r1, r2, r3}
   112e0:	stmia	ip!, {r0, r1, r2, r3}
   112e4:	ldm	lr!, {r0, r1, r2, r3}
   112e8:	stmia	ip!, {r0, r1, r2, r3}
   112ec:	ldm	lr!, {r0, r1, r2, r3}
   112f0:	stmia	ip!, {r0, r1, r2, r3}
   112f4:	ldm	lr, {r0, r1}
   112f8:	stm	ip, {r0, r1}
   112fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11300:	str	r3, [fp, #-8]
   11304:	sub	r3, fp, #72	; 0x48
   11308:	str	r3, [fp, #-12]
   1130c:	b	1131c <__assert_fail@plt+0x228>
   11310:	ldr	r3, [fp, #-12]
   11314:	add	r3, r3, #8
   11318:	str	r3, [fp, #-12]
   1131c:	ldr	r3, [fp, #-12]
   11320:	ldr	r3, [r3]
   11324:	cmp	r3, #0
   11328:	beq	1134c <__assert_fail@plt+0x258>
   1132c:	ldr	r3, [fp, #-12]
   11330:	ldr	r3, [r3]
   11334:	mov	r1, r3
   11338:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1133c:	bl	10e54 <strcmp@plt>
   11340:	mov	r3, r0
   11344:	cmp	r3, #0
   11348:	bne	11310 <__assert_fail@plt+0x21c>
   1134c:	ldr	r3, [fp, #-12]
   11350:	ldr	r3, [r3, #4]
   11354:	cmp	r3, #0
   11358:	beq	11368 <__assert_fail@plt+0x274>
   1135c:	ldr	r3, [fp, #-12]
   11360:	ldr	r3, [r3, #4]
   11364:	str	r3, [fp, #-8]
   11368:	ldr	r0, [pc, #200]	; 11438 <__assert_fail@plt+0x344>
   1136c:	bl	10fd4 <gettext@plt>
   11370:	mov	r3, r0
   11374:	ldr	r2, [pc, #192]	; 1143c <__assert_fail@plt+0x348>
   11378:	ldr	r1, [pc, #192]	; 11440 <__assert_fail@plt+0x34c>
   1137c:	mov	r0, r3
   11380:	bl	10e6c <printf@plt>
   11384:	mov	r1, #0
   11388:	mov	r0, #5
   1138c:	bl	11064 <setlocale@plt>
   11390:	str	r0, [fp, #-16]
   11394:	ldr	r3, [fp, #-16]
   11398:	cmp	r3, #0
   1139c:	beq	113dc <__assert_fail@plt+0x2e8>
   113a0:	mov	r2, #3
   113a4:	ldr	r1, [pc, #152]	; 11444 <__assert_fail@plt+0x350>
   113a8:	ldr	r0, [fp, #-16]
   113ac:	bl	110b8 <strncmp@plt>
   113b0:	mov	r3, r0
   113b4:	cmp	r3, #0
   113b8:	beq	113dc <__assert_fail@plt+0x2e8>
   113bc:	ldr	r0, [pc, #132]	; 11448 <__assert_fail@plt+0x354>
   113c0:	bl	10fd4 <gettext@plt>
   113c4:	mov	r2, r0
   113c8:	ldr	r3, [pc, #124]	; 1144c <__assert_fail@plt+0x358>
   113cc:	ldr	r3, [r3]
   113d0:	mov	r1, r3
   113d4:	mov	r0, r2
   113d8:	bl	10e3c <fputs_unlocked@plt>
   113dc:	ldr	r0, [pc, #108]	; 11450 <__assert_fail@plt+0x35c>
   113e0:	bl	10fd4 <gettext@plt>
   113e4:	mov	r3, r0
   113e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   113ec:	ldr	r1, [pc, #72]	; 1143c <__assert_fail@plt+0x348>
   113f0:	mov	r0, r3
   113f4:	bl	10e6c <printf@plt>
   113f8:	ldr	r0, [pc, #84]	; 11454 <__assert_fail@plt+0x360>
   113fc:	bl	10fd4 <gettext@plt>
   11400:	ldr	r2, [fp, #-8]
   11404:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11408:	cmp	r2, r3
   1140c:	bne	11418 <__assert_fail@plt+0x324>
   11410:	ldr	r3, [pc, #64]	; 11458 <__assert_fail@plt+0x364>
   11414:	b	1141c <__assert_fail@plt+0x328>
   11418:	ldr	r3, [pc, #60]	; 1145c <__assert_fail@plt+0x368>
   1141c:	mov	r2, r3
   11420:	ldr	r1, [fp, #-8]
   11424:	bl	10e6c <printf@plt>
   11428:	nop			; (mov r0, r0)
   1142c:	sub	sp, fp, #4
   11430:	pop	{fp, pc}
   11434:	andeq	r9, r1, r8, rrx
   11438:	strdeq	r8, [r1], -r4
   1143c:	andeq	r8, r1, ip, lsl #30
   11440:	andeq	r8, r1, r4, lsr pc
   11444:	andeq	r8, r1, r4, asr #30
   11448:	andeq	r8, r1, r8, asr #30
   1144c:	andeq	fp, r2, r4, ror r1
   11450:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11454:	andeq	r8, r1, ip, lsr #31
   11458:	andeq	r8, r1, r0, ror #31
   1145c:	andeq	r8, r1, ip, ror #31
   11460:	push	{r4, fp, lr}
   11464:	add	fp, sp, #8
   11468:	sub	sp, sp, #12
   1146c:	str	r0, [fp, #-16]
   11470:	ldr	r3, [fp, #-16]
   11474:	cmp	r3, #0
   11478:	beq	114a8 <__assert_fail@plt+0x3b4>
   1147c:	ldr	r3, [pc, #412]	; 11620 <__assert_fail@plt+0x52c>
   11480:	ldr	r4, [r3]
   11484:	ldr	r0, [pc, #408]	; 11624 <__assert_fail@plt+0x530>
   11488:	bl	10fd4 <gettext@plt>
   1148c:	mov	r1, r0
   11490:	ldr	r3, [pc, #400]	; 11628 <__assert_fail@plt+0x534>
   11494:	ldr	r3, [r3]
   11498:	mov	r2, r3
   1149c:	mov	r0, r4
   114a0:	bl	10fec <fprintf@plt>
   114a4:	b	11618 <__assert_fail@plt+0x524>
   114a8:	ldr	r0, [pc, #380]	; 1162c <__assert_fail@plt+0x538>
   114ac:	bl	10fd4 <gettext@plt>
   114b0:	mov	r2, r0
   114b4:	ldr	r3, [pc, #364]	; 11628 <__assert_fail@plt+0x534>
   114b8:	ldr	r3, [r3]
   114bc:	mov	r1, r3
   114c0:	mov	r0, r2
   114c4:	bl	10e6c <printf@plt>
   114c8:	ldr	r0, [pc, #352]	; 11630 <__assert_fail@plt+0x53c>
   114cc:	bl	10fd4 <gettext@plt>
   114d0:	mov	r2, r0
   114d4:	ldr	r3, [pc, #344]	; 11634 <__assert_fail@plt+0x540>
   114d8:	ldr	r3, [r3]
   114dc:	mov	r1, r3
   114e0:	mov	r0, r2
   114e4:	bl	10e3c <fputs_unlocked@plt>
   114e8:	bl	11250 <__assert_fail@plt+0x15c>
   114ec:	bl	11288 <__assert_fail@plt+0x194>
   114f0:	ldr	r0, [pc, #320]	; 11638 <__assert_fail@plt+0x544>
   114f4:	bl	10fd4 <gettext@plt>
   114f8:	mov	r2, r0
   114fc:	ldr	r3, [pc, #304]	; 11634 <__assert_fail@plt+0x540>
   11500:	ldr	r3, [r3]
   11504:	mov	r1, r3
   11508:	mov	r0, r2
   1150c:	bl	10e3c <fputs_unlocked@plt>
   11510:	ldr	r0, [pc, #292]	; 1163c <__assert_fail@plt+0x548>
   11514:	bl	10fd4 <gettext@plt>
   11518:	mov	r2, r0
   1151c:	ldr	r3, [pc, #272]	; 11634 <__assert_fail@plt+0x540>
   11520:	ldr	r3, [r3]
   11524:	mov	r1, r3
   11528:	mov	r0, r2
   1152c:	bl	10e3c <fputs_unlocked@plt>
   11530:	ldr	r0, [pc, #264]	; 11640 <__assert_fail@plt+0x54c>
   11534:	bl	10fd4 <gettext@plt>
   11538:	mov	r2, r0
   1153c:	ldr	r3, [pc, #240]	; 11634 <__assert_fail@plt+0x540>
   11540:	ldr	r3, [r3]
   11544:	mov	r1, r3
   11548:	mov	r0, r2
   1154c:	bl	10e3c <fputs_unlocked@plt>
   11550:	ldr	r0, [pc, #236]	; 11644 <__assert_fail@plt+0x550>
   11554:	bl	10fd4 <gettext@plt>
   11558:	mov	r2, r0
   1155c:	ldr	r3, [pc, #208]	; 11634 <__assert_fail@plt+0x540>
   11560:	ldr	r3, [r3]
   11564:	mov	r1, r3
   11568:	mov	r0, r2
   1156c:	bl	10e3c <fputs_unlocked@plt>
   11570:	ldr	r0, [pc, #208]	; 11648 <__assert_fail@plt+0x554>
   11574:	bl	10fd4 <gettext@plt>
   11578:	mov	r2, r0
   1157c:	ldr	r3, [pc, #176]	; 11634 <__assert_fail@plt+0x540>
   11580:	ldr	r3, [r3]
   11584:	mov	r1, r3
   11588:	mov	r0, r2
   1158c:	bl	10e3c <fputs_unlocked@plt>
   11590:	ldr	r0, [pc, #180]	; 1164c <__assert_fail@plt+0x558>
   11594:	bl	10fd4 <gettext@plt>
   11598:	mov	r2, r0
   1159c:	ldr	r3, [pc, #144]	; 11634 <__assert_fail@plt+0x540>
   115a0:	ldr	r3, [r3]
   115a4:	mov	r1, r3
   115a8:	mov	r0, r2
   115ac:	bl	10e3c <fputs_unlocked@plt>
   115b0:	ldr	r0, [pc, #152]	; 11650 <__assert_fail@plt+0x55c>
   115b4:	bl	10fd4 <gettext@plt>
   115b8:	mov	r2, r0
   115bc:	ldr	r3, [pc, #112]	; 11634 <__assert_fail@plt+0x540>
   115c0:	ldr	r3, [r3]
   115c4:	mov	r1, r3
   115c8:	mov	r0, r2
   115cc:	bl	10e3c <fputs_unlocked@plt>
   115d0:	ldr	r0, [pc, #124]	; 11654 <__assert_fail@plt+0x560>
   115d4:	bl	10fd4 <gettext@plt>
   115d8:	mov	r2, r0
   115dc:	ldr	r3, [pc, #80]	; 11634 <__assert_fail@plt+0x540>
   115e0:	ldr	r3, [r3]
   115e4:	mov	r1, r3
   115e8:	mov	r0, r2
   115ec:	bl	10e3c <fputs_unlocked@plt>
   115f0:	ldr	r0, [pc, #96]	; 11658 <__assert_fail@plt+0x564>
   115f4:	bl	10fd4 <gettext@plt>
   115f8:	mov	r2, r0
   115fc:	ldr	r3, [pc, #48]	; 11634 <__assert_fail@plt+0x540>
   11600:	ldr	r3, [r3]
   11604:	mov	r1, r3
   11608:	mov	r0, r2
   1160c:	bl	10e3c <fputs_unlocked@plt>
   11610:	ldr	r0, [pc, #68]	; 1165c <__assert_fail@plt+0x568>
   11614:	bl	112c0 <__assert_fail@plt+0x1cc>
   11618:	ldr	r0, [fp, #-16]
   1161c:	bl	10fc8 <exit@plt>
   11620:	andeq	fp, r2, r8, ror #2
   11624:	andeq	r9, r1, r8, asr #3
   11628:			; <UNDEFINED> instruction: 0x0002b1b8
   1162c:	strdeq	r9, [r1], -r0
   11630:	andeq	r9, r1, r0, lsl r2
   11634:	andeq	fp, r2, r4, ror r1
   11638:	andeq	r9, r1, r4, asr r2
   1163c:	andeq	r9, r1, r8, lsl #6
   11640:	strdeq	r9, [r1], -r8
   11644:	andeq	r9, r1, ip, ror #8
   11648:	andeq	r9, r1, r0, asr #10
   1164c:	andeq	r9, r1, r0, lsl #11
   11650:			; <UNDEFINED> instruction: 0x000195b0
   11654:	andeq	r9, r1, r8, ror #11
   11658:			; <UNDEFINED> instruction: 0x000196b4
   1165c:			; <UNDEFINED> instruction: 0x000197bc
   11660:	push	{fp}		; (str fp, [sp, #-4]!)
   11664:	add	fp, sp, #0
   11668:	sub	sp, sp, #12
   1166c:	str	r0, [fp, #-8]
   11670:	ldr	r3, [fp, #-8]
   11674:	ldrd	r2, [r3]
   11678:	adds	r2, r2, #1
   1167c:	adc	r3, r3, #0
   11680:	ldr	r1, [fp, #-8]
   11684:	strd	r2, [r1]
   11688:	ldr	r3, [fp, #-8]
   1168c:	ldrd	r0, [r3]
   11690:	ldr	r3, [pc, #52]	; 116cc <__assert_fail@plt+0x5d8>
   11694:	ldr	r3, [r3]
   11698:	ldrd	r2, [r3, #8]
   1169c:	cmp	r1, r3
   116a0:	cmpeq	r0, r2
   116a4:	bls	116bc <__assert_fail@plt+0x5c8>
   116a8:	ldr	r3, [pc, #28]	; 116cc <__assert_fail@plt+0x5d8>
   116ac:	ldr	r3, [r3]
   116b0:	add	r3, r3, #16
   116b4:	ldr	r2, [pc, #16]	; 116cc <__assert_fail@plt+0x5d8>
   116b8:	str	r3, [r2]
   116bc:	nop			; (mov r0, r0)
   116c0:	add	sp, fp, #0
   116c4:	pop	{fp}		; (ldr fp, [sp], #4)
   116c8:	bx	lr
   116cc:	andeq	fp, r2, r4, lsl #3
   116d0:	push	{fp}		; (str fp, [sp, #-4]!)
   116d4:	add	fp, sp, #0
   116d8:	sub	sp, sp, #12
   116dc:	strd	r0, [fp, #-12]
   116e0:	ldr	r3, [pc, #44]	; 11714 <__assert_fail@plt+0x620>
   116e4:	ldr	r3, [r3]
   116e8:	ldrd	r0, [r3]
   116ec:	ldrd	r2, [fp, #-12]
   116f0:	cmp	r1, r3
   116f4:	cmpeq	r0, r2
   116f8:	movls	r3, #1
   116fc:	movhi	r3, #0
   11700:	uxtb	r3, r3
   11704:	mov	r0, r3
   11708:	add	sp, fp, #0
   1170c:	pop	{fp}		; (ldr fp, [sp], #4)
   11710:	bx	lr
   11714:	andeq	fp, r2, r4, lsl #3
   11718:	push	{fp}		; (str fp, [sp, #-4]!)
   1171c:	add	fp, sp, #0
   11720:	sub	sp, sp, #12
   11724:	strd	r0, [fp, #-12]
   11728:	ldr	r3, [pc, #44]	; 1175c <__assert_fail@plt+0x668>
   1172c:	ldr	r3, [r3]
   11730:	ldrd	r0, [r3]
   11734:	ldrd	r2, [fp, #-12]
   11738:	cmp	r1, r3
   1173c:	cmpeq	r0, r2
   11740:	moveq	r3, #1
   11744:	movne	r3, #0
   11748:	uxtb	r3, r3
   1174c:	mov	r0, r3
   11750:	add	sp, fp, #0
   11754:	pop	{fp}		; (ldr fp, [sp], #4)
   11758:	bx	lr
   1175c:	andeq	fp, r2, r4, lsl #3
   11760:	push	{fp, lr}
   11764:	add	fp, sp, #4
   11768:	sub	sp, sp, #24
   1176c:	str	r0, [fp, #-24]	; 0xffffffe8
   11770:	mov	r2, #0
   11774:	mov	r3, #0
   11778:	strd	r2, [fp, #-20]	; 0xffffffec
   1177c:	mov	r3, #0
   11780:	strb	r3, [fp, #-5]
   11784:	ldr	r3, [pc, #304]	; 118bc <__assert_fail@plt+0x7c8>
   11788:	ldr	r3, [r3]
   1178c:	ldr	r2, [pc, #300]	; 118c0 <__assert_fail@plt+0x7cc>
   11790:	str	r3, [r2]
   11794:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11798:	bl	10ef0 <getc_unlocked@plt>
   1179c:	str	r0, [fp, #-12]
   117a0:	ldr	r3, [pc, #284]	; 118c4 <__assert_fail@plt+0x7d0>
   117a4:	ldrb	r3, [r3]
   117a8:	mov	r2, r3
   117ac:	ldr	r3, [fp, #-12]
   117b0:	cmp	r2, r3
   117b4:	bne	117e8 <__assert_fail@plt+0x6f4>
   117b8:	ldr	r0, [fp, #-12]
   117bc:	bl	110dc <putchar_unlocked@plt>
   117c0:	mov	r2, #0
   117c4:	mov	r3, #0
   117c8:	strd	r2, [fp, #-20]	; 0xffffffec
   117cc:	mov	r3, #0
   117d0:	strb	r3, [fp, #-5]
   117d4:	ldr	r3, [pc, #224]	; 118bc <__assert_fail@plt+0x7c8>
   117d8:	ldr	r3, [r3]
   117dc:	ldr	r2, [pc, #220]	; 118c0 <__assert_fail@plt+0x7cc>
   117e0:	str	r3, [r2]
   117e4:	b	11794 <__assert_fail@plt+0x6a0>
   117e8:	ldr	r3, [fp, #-12]
   117ec:	cmn	r3, #1
   117f0:	bne	11814 <__assert_fail@plt+0x720>
   117f4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   117f8:	orrs	r3, r2, r3
   117fc:	beq	118ac <__assert_fail@plt+0x7b8>
   11800:	ldr	r3, [pc, #188]	; 118c4 <__assert_fail@plt+0x7d0>
   11804:	ldrb	r3, [r3]
   11808:	mov	r0, r3
   1180c:	bl	110dc <putchar_unlocked@plt>
   11810:	b	118ac <__assert_fail@plt+0x7b8>
   11814:	sub	r3, fp, #20
   11818:	mov	r0, r3
   1181c:	bl	11660 <__assert_fail@plt+0x56c>
   11820:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11824:	mov	r0, r2
   11828:	mov	r1, r3
   1182c:	bl	116d0 <__assert_fail@plt+0x5dc>
   11830:	mov	r3, r0
   11834:	cmp	r3, #0
   11838:	beq	11794 <__assert_fail@plt+0x6a0>
   1183c:	ldr	r3, [pc, #132]	; 118c8 <__assert_fail@plt+0x7d4>
   11840:	ldr	r3, [r3]
   11844:	ldr	r2, [pc, #128]	; 118cc <__assert_fail@plt+0x7d8>
   11848:	cmp	r3, r2
   1184c:	beq	118a0 <__assert_fail@plt+0x7ac>
   11850:	ldrb	r3, [fp, #-5]
   11854:	cmp	r3, #0
   11858:	beq	11898 <__assert_fail@plt+0x7a4>
   1185c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11860:	mov	r0, r2
   11864:	mov	r1, r3
   11868:	bl	11718 <__assert_fail@plt+0x624>
   1186c:	mov	r3, r0
   11870:	cmp	r3, #0
   11874:	beq	11898 <__assert_fail@plt+0x7a4>
   11878:	ldr	r3, [pc, #72]	; 118c8 <__assert_fail@plt+0x7d4>
   1187c:	ldr	r0, [r3]
   11880:	ldr	r3, [pc, #72]	; 118d0 <__assert_fail@plt+0x7dc>
   11884:	ldr	r2, [r3]
   11888:	ldr	r3, [pc, #68]	; 118d4 <__assert_fail@plt+0x7e0>
   1188c:	ldr	r3, [r3]
   11890:	mov	r1, #1
   11894:	bl	10ecc <fwrite_unlocked@plt>
   11898:	mov	r3, #1
   1189c:	strb	r3, [fp, #-5]
   118a0:	ldr	r0, [fp, #-12]
   118a4:	bl	110dc <putchar_unlocked@plt>
   118a8:	b	11794 <__assert_fail@plt+0x6a0>
   118ac:	nop			; (mov r0, r0)
   118b0:	nop			; (mov r0, r0)
   118b4:	sub	sp, fp, #4
   118b8:	pop	{fp, pc}
   118bc:	andeq	fp, r2, r0, lsr #3
   118c0:	andeq	fp, r2, r4, lsl #3
   118c4:	andeq	fp, r2, r8, lsl #2
   118c8:	muleq	r2, r8, r1
   118cc:	andeq	fp, r2, r0, lsl #3
   118d0:	muleq	r2, r4, r1
   118d4:	andeq	fp, r2, r4, ror r1
   118d8:	push	{fp, lr}
   118dc:	add	fp, sp, #4
   118e0:	sub	sp, sp, #64	; 0x40
   118e4:	str	r0, [fp, #-48]	; 0xffffffd0
   118e8:	mov	r2, #1
   118ec:	mov	r3, #0
   118f0:	strd	r2, [fp, #-44]	; 0xffffffd4
   118f4:	mov	r3, #0
   118f8:	strb	r3, [fp, #-9]
   118fc:	ldr	r3, [pc, #1308]	; 11e20 <__assert_fail@plt+0xd2c>
   11900:	ldr	r3, [r3]
   11904:	ldr	r2, [pc, #1304]	; 11e24 <__assert_fail@plt+0xd30>
   11908:	str	r3, [r2]
   1190c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11910:	bl	10ef0 <getc_unlocked@plt>
   11914:	str	r0, [fp, #-8]
   11918:	ldr	r3, [fp, #-8]
   1191c:	cmn	r3, #1
   11920:	beq	11e0c <__assert_fail@plt+0xd18>
   11924:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11928:	ldr	r0, [fp, #-8]
   1192c:	bl	10ff8 <ungetc@plt>
   11930:	mov	r3, #0
   11934:	str	r3, [fp, #-8]
   11938:	mov	r0, #1
   1193c:	mov	r1, #0
   11940:	bl	116d0 <__assert_fail@plt+0x5dc>
   11944:	mov	r3, r0
   11948:	eor	r3, r3, #1
   1194c:	uxtb	r2, r3
   11950:	ldr	r3, [pc, #1232]	; 11e28 <__assert_fail@plt+0xd34>
   11954:	ldrb	r3, [r3]
   11958:	eor	r3, r3, r2
   1195c:	uxtb	r3, r3
   11960:	cmp	r3, #0
   11964:	movne	r3, #1
   11968:	moveq	r3, #0
   1196c:	strb	r3, [fp, #-17]	; 0xffffffef
   11970:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11974:	cmp	r3, #0
   11978:	cmpeq	r2, #1
   1197c:	bne	11b90 <__assert_fail@plt+0xa9c>
   11980:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11984:	cmp	r3, #0
   11988:	beq	11b90 <__assert_fail@plt+0xa9c>
   1198c:	ldr	r3, [pc, #1176]	; 11e2c <__assert_fail@plt+0xd38>
   11990:	ldrb	r3, [r3]
   11994:	mov	r2, r3
   11998:	ldr	r3, [pc, #1168]	; 11e30 <__assert_fail@plt+0xd3c>
   1199c:	ldrb	r3, [r3]
   119a0:	mov	r1, r3
   119a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   119a8:	str	r3, [sp, #8]
   119ac:	str	r1, [sp, #4]
   119b0:	str	r2, [sp]
   119b4:	mvn	r3, #0
   119b8:	mov	r2, #0
   119bc:	ldr	r1, [pc, #1136]	; 11e34 <__assert_fail@plt+0xd40>
   119c0:	ldr	r0, [pc, #1136]	; 11e38 <__assert_fail@plt+0xd44>
   119c4:	bl	13664 <__assert_fail@plt+0x2570>
   119c8:	str	r0, [fp, #-28]	; 0xffffffe4
   119cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119d0:	cmp	r3, #0
   119d4:	bge	11a20 <__assert_fail@plt+0x92c>
   119d8:	ldr	r3, [pc, #1112]	; 11e38 <__assert_fail@plt+0xd44>
   119dc:	ldr	r3, [r3]
   119e0:	mov	r0, r3
   119e4:	bl	134f4 <__assert_fail@plt+0x2400>
   119e8:	ldr	r3, [pc, #1096]	; 11e38 <__assert_fail@plt+0xd44>
   119ec:	mov	r2, #0
   119f0:	str	r2, [r3]
   119f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   119f8:	bl	10f5c <ferror_unlocked@plt>
   119fc:	mov	r3, r0
   11a00:	cmp	r3, #0
   11a04:	bne	11e18 <__assert_fail@plt+0xd24>
   11a08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11a0c:	bl	110d0 <feof_unlocked@plt>
   11a10:	mov	r3, r0
   11a14:	cmp	r3, #0
   11a18:	bne	11e18 <__assert_fail@plt+0xd24>
   11a1c:	bl	1777c <__assert_fail@plt+0x6688>
   11a20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a24:	str	r3, [fp, #-32]	; 0xffffffe0
   11a28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a2c:	cmp	r3, #0
   11a30:	bne	11a48 <__assert_fail@plt+0x954>
   11a34:	ldr	r3, [pc, #1024]	; 11e3c <__assert_fail@plt+0xd48>
   11a38:	ldr	r2, [pc, #1024]	; 11e40 <__assert_fail@plt+0xd4c>
   11a3c:	ldr	r1, [pc, #1024]	; 11e44 <__assert_fail@plt+0xd50>
   11a40:	ldr	r0, [pc, #1024]	; 11e48 <__assert_fail@plt+0xd54>
   11a44:	bl	110f4 <__assert_fail@plt>
   11a48:	mov	r3, #0
   11a4c:	str	r3, [fp, #-8]
   11a50:	ldr	r3, [pc, #992]	; 11e38 <__assert_fail@plt+0xd44>
   11a54:	ldr	r2, [r3]
   11a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a5c:	sub	r3, r3, #1
   11a60:	add	r3, r2, r3
   11a64:	ldrb	r3, [r3]
   11a68:	mov	r0, r3
   11a6c:	bl	11228 <__assert_fail@plt+0x134>
   11a70:	mov	r3, r0
   11a74:	mov	r2, r3
   11a78:	ldr	r3, [pc, #940]	; 11e2c <__assert_fail@plt+0xd38>
   11a7c:	ldrb	r3, [r3]
   11a80:	cmp	r2, r3
   11a84:	beq	11afc <__assert_fail@plt+0xa08>
   11a88:	ldr	r3, [pc, #920]	; 11e28 <__assert_fail@plt+0xd34>
   11a8c:	ldrb	r3, [r3]
   11a90:	cmp	r3, #0
   11a94:	bne	11e04 <__assert_fail@plt+0xd10>
   11a98:	ldr	r3, [pc, #920]	; 11e38 <__assert_fail@plt+0xd44>
   11a9c:	ldr	r0, [r3]
   11aa0:	ldr	r3, [pc, #932]	; 11e4c <__assert_fail@plt+0xd58>
   11aa4:	ldr	r3, [r3]
   11aa8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11aac:	mov	r1, #1
   11ab0:	bl	10ecc <fwrite_unlocked@plt>
   11ab4:	ldr	r3, [pc, #892]	; 11e38 <__assert_fail@plt+0xd44>
   11ab8:	ldr	r2, [r3]
   11abc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ac0:	sub	r3, r3, #1
   11ac4:	add	r3, r2, r3
   11ac8:	ldrb	r2, [r3]
   11acc:	ldr	r3, [pc, #860]	; 11e30 <__assert_fail@plt+0xd3c>
   11ad0:	ldrb	r3, [r3]
   11ad4:	cmp	r2, r3
   11ad8:	beq	11aec <__assert_fail@plt+0x9f8>
   11adc:	ldr	r3, [pc, #844]	; 11e30 <__assert_fail@plt+0xd3c>
   11ae0:	ldrb	r3, [r3]
   11ae4:	mov	r0, r3
   11ae8:	bl	110dc <putchar_unlocked@plt>
   11aec:	ldr	r3, [pc, #828]	; 11e30 <__assert_fail@plt+0xd3c>
   11af0:	ldrb	r3, [r3]
   11af4:	str	r3, [fp, #-8]
   11af8:	b	11e04 <__assert_fail@plt+0xd10>
   11afc:	mov	r0, #1
   11b00:	mov	r1, #0
   11b04:	bl	116d0 <__assert_fail@plt+0x5dc>
   11b08:	mov	r3, r0
   11b0c:	cmp	r3, #0
   11b10:	beq	11b84 <__assert_fail@plt+0xa90>
   11b14:	ldr	r3, [pc, #796]	; 11e38 <__assert_fail@plt+0xd44>
   11b18:	ldr	r0, [r3]
   11b1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b20:	sub	r2, r3, #1
   11b24:	ldr	r3, [pc, #800]	; 11e4c <__assert_fail@plt+0xd58>
   11b28:	ldr	r3, [r3]
   11b2c:	mov	r1, #1
   11b30:	bl	10ecc <fwrite_unlocked@plt>
   11b34:	ldr	r3, [pc, #752]	; 11e2c <__assert_fail@plt+0xd38>
   11b38:	ldrb	r2, [r3]
   11b3c:	ldr	r3, [pc, #748]	; 11e30 <__assert_fail@plt+0xd3c>
   11b40:	ldrb	r3, [r3]
   11b44:	cmp	r2, r3
   11b48:	bne	11b7c <__assert_fail@plt+0xa88>
   11b4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11b50:	bl	10ef0 <getc_unlocked@plt>
   11b54:	str	r0, [fp, #-36]	; 0xffffffdc
   11b58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11b5c:	cmn	r3, #1
   11b60:	beq	11b84 <__assert_fail@plt+0xa90>
   11b64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11b68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11b6c:	bl	10ff8 <ungetc@plt>
   11b70:	mov	r3, #1
   11b74:	strb	r3, [fp, #-9]
   11b78:	b	11b84 <__assert_fail@plt+0xa90>
   11b7c:	mov	r3, #1
   11b80:	strb	r3, [fp, #-9]
   11b84:	sub	r3, fp, #44	; 0x2c
   11b88:	mov	r0, r3
   11b8c:	bl	11660 <__assert_fail@plt+0x56c>
   11b90:	ldr	r3, [fp, #-8]
   11b94:	str	r3, [fp, #-16]
   11b98:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11b9c:	mov	r0, r2
   11ba0:	mov	r1, r3
   11ba4:	bl	116d0 <__assert_fail@plt+0x5dc>
   11ba8:	mov	r3, r0
   11bac:	cmp	r3, #0
   11bb0:	beq	11c50 <__assert_fail@plt+0xb5c>
   11bb4:	ldrb	r3, [fp, #-9]
   11bb8:	cmp	r3, #0
   11bbc:	beq	11be0 <__assert_fail@plt+0xaec>
   11bc0:	ldr	r3, [pc, #648]	; 11e50 <__assert_fail@plt+0xd5c>
   11bc4:	ldr	r0, [r3]
   11bc8:	ldr	r3, [pc, #644]	; 11e54 <__assert_fail@plt+0xd60>
   11bcc:	ldr	r2, [r3]
   11bd0:	ldr	r3, [pc, #628]	; 11e4c <__assert_fail@plt+0xd58>
   11bd4:	ldr	r3, [r3]
   11bd8:	mov	r1, #1
   11bdc:	bl	10ecc <fwrite_unlocked@plt>
   11be0:	mov	r3, #1
   11be4:	strb	r3, [fp, #-9]
   11be8:	b	11bfc <__assert_fail@plt+0xb08>
   11bec:	ldr	r0, [fp, #-8]
   11bf0:	bl	110dc <putchar_unlocked@plt>
   11bf4:	ldr	r3, [fp, #-8]
   11bf8:	str	r3, [fp, #-16]
   11bfc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11c00:	bl	10ef0 <getc_unlocked@plt>
   11c04:	str	r0, [fp, #-8]
   11c08:	ldr	r3, [pc, #540]	; 11e2c <__assert_fail@plt+0xd38>
   11c0c:	ldrb	r3, [r3]
   11c10:	mov	r2, r3
   11c14:	ldr	r3, [fp, #-8]
   11c18:	cmp	r3, r2
   11c1c:	beq	11c98 <__assert_fail@plt+0xba4>
   11c20:	ldr	r3, [pc, #520]	; 11e30 <__assert_fail@plt+0xd3c>
   11c24:	ldrb	r3, [r3]
   11c28:	mov	r2, r3
   11c2c:	ldr	r3, [fp, #-8]
   11c30:	cmp	r2, r3
   11c34:	beq	11c98 <__assert_fail@plt+0xba4>
   11c38:	ldr	r3, [fp, #-8]
   11c3c:	cmn	r3, #1
   11c40:	bne	11bec <__assert_fail@plt+0xaf8>
   11c44:	b	11c98 <__assert_fail@plt+0xba4>
   11c48:	ldr	r3, [fp, #-8]
   11c4c:	str	r3, [fp, #-16]
   11c50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11c54:	bl	10ef0 <getc_unlocked@plt>
   11c58:	str	r0, [fp, #-8]
   11c5c:	ldr	r3, [pc, #456]	; 11e2c <__assert_fail@plt+0xd38>
   11c60:	ldrb	r3, [r3]
   11c64:	mov	r2, r3
   11c68:	ldr	r3, [fp, #-8]
   11c6c:	cmp	r3, r2
   11c70:	beq	11c98 <__assert_fail@plt+0xba4>
   11c74:	ldr	r3, [pc, #436]	; 11e30 <__assert_fail@plt+0xd3c>
   11c78:	ldrb	r3, [r3]
   11c7c:	mov	r2, r3
   11c80:	ldr	r3, [fp, #-8]
   11c84:	cmp	r2, r3
   11c88:	beq	11c98 <__assert_fail@plt+0xba4>
   11c8c:	ldr	r3, [fp, #-8]
   11c90:	cmn	r3, #1
   11c94:	bne	11c48 <__assert_fail@plt+0xb54>
   11c98:	ldr	r3, [pc, #396]	; 11e2c <__assert_fail@plt+0xd38>
   11c9c:	ldrb	r2, [r3]
   11ca0:	ldr	r3, [pc, #392]	; 11e30 <__assert_fail@plt+0xd3c>
   11ca4:	ldrb	r3, [r3]
   11ca8:	cmp	r2, r3
   11cac:	bne	11cf8 <__assert_fail@plt+0xc04>
   11cb0:	ldr	r3, [pc, #372]	; 11e2c <__assert_fail@plt+0xd38>
   11cb4:	ldrb	r3, [r3]
   11cb8:	mov	r2, r3
   11cbc:	ldr	r3, [fp, #-8]
   11cc0:	cmp	r2, r3
   11cc4:	bne	11cf8 <__assert_fail@plt+0xc04>
   11cc8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11ccc:	bl	10ef0 <getc_unlocked@plt>
   11cd0:	str	r0, [fp, #-24]	; 0xffffffe8
   11cd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cd8:	cmn	r3, #1
   11cdc:	beq	11cf0 <__assert_fail@plt+0xbfc>
   11ce0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11ce4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ce8:	bl	10ff8 <ungetc@plt>
   11cec:	b	11cf8 <__assert_fail@plt+0xc04>
   11cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cf4:	str	r3, [fp, #-8]
   11cf8:	ldr	r3, [pc, #300]	; 11e2c <__assert_fail@plt+0xd38>
   11cfc:	ldrb	r3, [r3]
   11d00:	mov	r2, r3
   11d04:	ldr	r3, [fp, #-8]
   11d08:	cmp	r2, r3
   11d0c:	bne	11d20 <__assert_fail@plt+0xc2c>
   11d10:	sub	r3, fp, #44	; 0x2c
   11d14:	mov	r0, r3
   11d18:	bl	11660 <__assert_fail@plt+0x56c>
   11d1c:	b	11970 <__assert_fail@plt+0x87c>
   11d20:	ldr	r3, [pc, #264]	; 11e30 <__assert_fail@plt+0xd3c>
   11d24:	ldrb	r3, [r3]
   11d28:	mov	r2, r3
   11d2c:	ldr	r3, [fp, #-8]
   11d30:	cmp	r2, r3
   11d34:	beq	11d44 <__assert_fail@plt+0xc50>
   11d38:	ldr	r3, [fp, #-8]
   11d3c:	cmn	r3, #1
   11d40:	bne	11970 <__assert_fail@plt+0x87c>
   11d44:	ldrb	r3, [fp, #-9]
   11d48:	cmp	r3, #0
   11d4c:	bne	11d78 <__assert_fail@plt+0xc84>
   11d50:	ldr	r3, [pc, #208]	; 11e28 <__assert_fail@plt+0xd34>
   11d54:	ldrb	r3, [r3]
   11d58:	eor	r3, r3, #1
   11d5c:	uxtb	r3, r3
   11d60:	cmp	r3, #0
   11d64:	bne	11d78 <__assert_fail@plt+0xc84>
   11d68:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d6c:	cmp	r3, #0
   11d70:	cmpeq	r2, #1
   11d74:	beq	11dd0 <__assert_fail@plt+0xcdc>
   11d78:	ldr	r3, [pc, #176]	; 11e30 <__assert_fail@plt+0xd3c>
   11d7c:	ldrb	r3, [r3]
   11d80:	mov	r2, r3
   11d84:	ldr	r3, [fp, #-8]
   11d88:	cmp	r2, r3
   11d8c:	beq	11dc0 <__assert_fail@plt+0xccc>
   11d90:	ldr	r3, [pc, #152]	; 11e30 <__assert_fail@plt+0xd3c>
   11d94:	ldrb	r3, [r3]
   11d98:	mov	r2, r3
   11d9c:	ldr	r3, [fp, #-16]
   11da0:	cmp	r2, r3
   11da4:	bne	11dc0 <__assert_fail@plt+0xccc>
   11da8:	ldr	r3, [pc, #124]	; 11e2c <__assert_fail@plt+0xd38>
   11dac:	ldrb	r2, [r3]
   11db0:	ldr	r3, [pc, #120]	; 11e30 <__assert_fail@plt+0xd3c>
   11db4:	ldrb	r3, [r3]
   11db8:	cmp	r2, r3
   11dbc:	bne	11dd0 <__assert_fail@plt+0xcdc>
   11dc0:	ldr	r3, [pc, #104]	; 11e30 <__assert_fail@plt+0xd3c>
   11dc4:	ldrb	r3, [r3]
   11dc8:	mov	r0, r3
   11dcc:	bl	110dc <putchar_unlocked@plt>
   11dd0:	ldr	r3, [fp, #-8]
   11dd4:	cmn	r3, #1
   11dd8:	beq	11e14 <__assert_fail@plt+0xd20>
   11ddc:	mov	r2, #1
   11de0:	mov	r3, #0
   11de4:	strd	r2, [fp, #-44]	; 0xffffffd4
   11de8:	ldr	r3, [pc, #48]	; 11e20 <__assert_fail@plt+0xd2c>
   11dec:	ldr	r3, [r3]
   11df0:	ldr	r2, [pc, #44]	; 11e24 <__assert_fail@plt+0xd30>
   11df4:	str	r3, [r2]
   11df8:	mov	r3, #0
   11dfc:	strb	r3, [fp, #-9]
   11e00:	b	11970 <__assert_fail@plt+0x87c>
   11e04:	nop			; (mov r0, r0)
   11e08:	b	11970 <__assert_fail@plt+0x87c>
   11e0c:	nop			; (mov r0, r0)
   11e10:	b	11e18 <__assert_fail@plt+0xd24>
   11e14:	nop			; (mov r0, r0)
   11e18:	sub	sp, fp, #4
   11e1c:	pop	{fp, pc}
   11e20:	andeq	fp, r2, r0, lsr #3
   11e24:	andeq	fp, r2, r4, lsl #3
   11e28:	muleq	r2, r0, r1
   11e2c:	muleq	r2, r2, r1
   11e30:	andeq	fp, r2, r8, lsl #2
   11e34:	andeq	fp, r2, ip, lsl #3
   11e38:	andeq	fp, r2, r8, lsl #3
   11e3c:	andeq	r9, r1, r0, asr r9
   11e40:	andeq	r0, r0, fp, lsr r1
   11e44:	andeq	r9, r1, r0, asr #15
   11e48:	andeq	r9, r1, ip, asr #15
   11e4c:	andeq	fp, r2, r4, ror r1
   11e50:	muleq	r2, r8, r1
   11e54:	muleq	r2, r4, r1
   11e58:	push	{r4, fp, lr}
   11e5c:	add	fp, sp, #8
   11e60:	sub	sp, sp, #20
   11e64:	str	r0, [fp, #-24]	; 0xffffffe8
   11e68:	str	r1, [fp, #-28]	; 0xffffffe4
   11e6c:	ldr	r1, [pc, #340]	; 11fc8 <__assert_fail@plt+0xed4>
   11e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e74:	bl	10e54 <strcmp@plt>
   11e78:	mov	r3, r0
   11e7c:	cmp	r3, #0
   11e80:	bne	11ea0 <__assert_fail@plt+0xdac>
   11e84:	ldr	r3, [pc, #320]	; 11fcc <__assert_fail@plt+0xed8>
   11e88:	mov	r2, #1
   11e8c:	strb	r2, [r3]
   11e90:	ldr	r3, [pc, #312]	; 11fd0 <__assert_fail@plt+0xedc>
   11e94:	ldr	r3, [r3]
   11e98:	str	r3, [fp, #-16]
   11e9c:	b	11ef4 <__assert_fail@plt+0xe00>
   11ea0:	ldr	r1, [pc, #300]	; 11fd4 <__assert_fail@plt+0xee0>
   11ea4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ea8:	bl	11094 <fopen64@plt>
   11eac:	str	r0, [fp, #-16]
   11eb0:	ldr	r3, [fp, #-16]
   11eb4:	cmp	r3, #0
   11eb8:	bne	11ef4 <__assert_fail@plt+0xe00>
   11ebc:	bl	11004 <__errno_location@plt>
   11ec0:	mov	r3, r0
   11ec4:	ldr	r4, [r3]
   11ec8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11ecc:	mov	r1, #3
   11ed0:	mov	r0, #0
   11ed4:	bl	161d8 <__assert_fail@plt+0x50e4>
   11ed8:	mov	r3, r0
   11edc:	ldr	r2, [pc, #244]	; 11fd8 <__assert_fail@plt+0xee4>
   11ee0:	mov	r1, r4
   11ee4:	mov	r0, #0
   11ee8:	bl	10f74 <error@plt>
   11eec:	mov	r3, #0
   11ef0:	b	11fbc <__assert_fail@plt+0xec8>
   11ef4:	mov	r1, #2
   11ef8:	ldr	r0, [fp, #-16]
   11efc:	bl	132f8 <__assert_fail@plt+0x2204>
   11f00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f04:	ldr	r0, [fp, #-16]
   11f08:	blx	r3
   11f0c:	bl	11004 <__errno_location@plt>
   11f10:	mov	r3, r0
   11f14:	ldr	r3, [r3]
   11f18:	str	r3, [fp, #-20]	; 0xffffffec
   11f1c:	ldr	r0, [fp, #-16]
   11f20:	bl	10f5c <ferror_unlocked@plt>
   11f24:	mov	r3, r0
   11f28:	cmp	r3, #0
   11f2c:	bne	11f38 <__assert_fail@plt+0xe44>
   11f30:	mov	r3, #0
   11f34:	str	r3, [fp, #-20]	; 0xffffffec
   11f38:	ldr	r1, [pc, #136]	; 11fc8 <__assert_fail@plt+0xed4>
   11f3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f40:	bl	10e54 <strcmp@plt>
   11f44:	mov	r3, r0
   11f48:	cmp	r3, #0
   11f4c:	bne	11f5c <__assert_fail@plt+0xe68>
   11f50:	ldr	r0, [fp, #-16]
   11f54:	bl	11088 <clearerr_unlocked@plt>
   11f58:	b	11f80 <__assert_fail@plt+0xe8c>
   11f5c:	ldr	r0, [fp, #-16]
   11f60:	bl	13354 <__assert_fail@plt+0x2260>
   11f64:	mov	r3, r0
   11f68:	cmn	r3, #1
   11f6c:	bne	11f80 <__assert_fail@plt+0xe8c>
   11f70:	bl	11004 <__errno_location@plt>
   11f74:	mov	r3, r0
   11f78:	ldr	r3, [r3]
   11f7c:	str	r3, [fp, #-20]	; 0xffffffec
   11f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f84:	cmp	r3, #0
   11f88:	beq	11fb8 <__assert_fail@plt+0xec4>
   11f8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f90:	mov	r1, #3
   11f94:	mov	r0, #0
   11f98:	bl	161d8 <__assert_fail@plt+0x50e4>
   11f9c:	mov	r3, r0
   11fa0:	ldr	r2, [pc, #48]	; 11fd8 <__assert_fail@plt+0xee4>
   11fa4:	ldr	r1, [fp, #-20]	; 0xffffffec
   11fa8:	mov	r0, #0
   11fac:	bl	10f74 <error@plt>
   11fb0:	mov	r3, #0
   11fb4:	b	11fbc <__assert_fail@plt+0xec8>
   11fb8:	mov	r3, #1
   11fbc:	mov	r0, r3
   11fc0:	sub	sp, fp, #8
   11fc4:	pop	{r4, fp, pc}
   11fc8:	ldrdeq	r9, [r1], -ip
   11fcc:	muleq	r2, ip, r1
   11fd0:	andeq	fp, r2, r0, ror r1
   11fd4:	andeq	r9, r1, r0, ror #15
   11fd8:	andeq	r9, r1, r4, ror #15
   11fdc:	push	{fp, lr}
   11fe0:	add	fp, sp, #4
   11fe4:	sub	sp, sp, #40	; 0x28
   11fe8:	str	r0, [fp, #-24]	; 0xffffffe8
   11fec:	str	r1, [fp, #-28]	; 0xffffffe4
   11ff0:	mov	r3, #0
   11ff4:	strb	r3, [fp, #-6]
   11ff8:	mov	r3, #0
   11ffc:	strb	r3, [fp, #-7]
   12000:	mov	r3, #0
   12004:	str	r3, [fp, #-12]
   12008:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1200c:	ldr	r3, [r3]
   12010:	mov	r0, r3
   12014:	bl	13d18 <__assert_fail@plt+0x2c24>
   12018:	ldr	r1, [pc, #1252]	; 12504 <__assert_fail@plt+0x1410>
   1201c:	mov	r0, #6
   12020:	bl	11064 <setlocale@plt>
   12024:	ldr	r1, [pc, #1244]	; 12508 <__assert_fail@plt+0x1414>
   12028:	ldr	r0, [pc, #1244]	; 1250c <__assert_fail@plt+0x1418>
   1202c:	bl	110ac <bindtextdomain@plt>
   12030:	ldr	r0, [pc, #1236]	; 1250c <__assert_fail@plt+0x1418>
   12034:	bl	10f08 <textdomain@plt>
   12038:	ldr	r0, [pc, #1232]	; 12510 <__assert_fail@plt+0x141c>
   1203c:	bl	18e4c <__assert_fail@plt+0x7d58>
   12040:	ldr	r3, [pc, #1228]	; 12514 <__assert_fail@plt+0x1420>
   12044:	mov	r2, #0
   12048:	strb	r2, [r3]
   1204c:	ldr	r3, [pc, #1220]	; 12518 <__assert_fail@plt+0x1424>
   12050:	mov	r2, #0
   12054:	strb	r2, [r3]
   12058:	ldr	r3, [pc, #1212]	; 1251c <__assert_fail@plt+0x1428>
   1205c:	mov	r2, #0
   12060:	strb	r2, [r3]
   12064:	b	12274 <__assert_fail@plt+0x1180>
   12068:	ldr	r3, [fp, #-16]
   1206c:	cmp	r3, #102	; 0x66
   12070:	beq	120f0 <__assert_fail@plt+0xffc>
   12074:	cmp	r3, #102	; 0x66
   12078:	bgt	120ac <__assert_fail@plt+0xfb8>
   1207c:	cmp	r3, #99	; 0x63
   12080:	bgt	120a0 <__assert_fail@plt+0xfac>
   12084:	cmp	r3, #98	; 0x62
   12088:	bge	120e8 <__assert_fail@plt+0xff4>
   1208c:	cmn	r3, #3
   12090:	beq	12224 <__assert_fail@plt+0x1130>
   12094:	cmn	r3, #2
   12098:	beq	1221c <__assert_fail@plt+0x1128>
   1209c:	b	1226c <__assert_fail@plt+0x1178>
   120a0:	cmp	r3, #100	; 0x64
   120a4:	beq	12130 <__assert_fail@plt+0x103c>
   120a8:	b	1226c <__assert_fail@plt+0x1178>
   120ac:	cmp	r3, #122	; 0x7a
   120b0:	beq	121fc <__assert_fail@plt+0x1108>
   120b4:	cmp	r3, #122	; 0x7a
   120b8:	bgt	120d0 <__assert_fail@plt+0xfdc>
   120bc:	cmp	r3, #110	; 0x6e
   120c0:	beq	12274 <__assert_fail@plt+0x1180>
   120c4:	cmp	r3, #115	; 0x73
   120c8:	beq	121ec <__assert_fail@plt+0x10f8>
   120cc:	b	1226c <__assert_fail@plt+0x1178>
   120d0:	cmp	r3, #256	; 0x100
   120d4:	beq	121a0 <__assert_fail@plt+0x10ac>
   120d8:	ldr	r2, [pc, #1088]	; 12520 <__assert_fail@plt+0x142c>
   120dc:	cmp	r3, r2
   120e0:	beq	1220c <__assert_fail@plt+0x1118>
   120e4:	b	1226c <__assert_fail@plt+0x1178>
   120e8:	mov	r3, #1
   120ec:	strb	r3, [fp, #-7]
   120f0:	ldr	r3, [fp, #-12]
   120f4:	cmp	r3, #0
   120f8:	beq	12120 <__assert_fail@plt+0x102c>
   120fc:	ldr	r0, [pc, #1056]	; 12524 <__assert_fail@plt+0x1430>
   12100:	bl	10fd4 <gettext@plt>
   12104:	mov	r3, r0
   12108:	mov	r2, r3
   1210c:	mov	r1, #0
   12110:	mov	r0, #0
   12114:	bl	10f74 <error@plt>
   12118:	mov	r0, #1
   1211c:	bl	11460 <__assert_fail@plt+0x36c>
   12120:	ldr	r3, [pc, #1024]	; 12528 <__assert_fail@plt+0x1434>
   12124:	ldr	r3, [r3]
   12128:	str	r3, [fp, #-12]
   1212c:	b	12274 <__assert_fail@plt+0x1180>
   12130:	ldr	r3, [pc, #1008]	; 12528 <__assert_fail@plt+0x1434>
   12134:	ldr	r3, [r3]
   12138:	ldrb	r3, [r3]
   1213c:	cmp	r3, #0
   12140:	beq	12180 <__assert_fail@plt+0x108c>
   12144:	ldr	r3, [pc, #988]	; 12528 <__assert_fail@plt+0x1434>
   12148:	ldr	r3, [r3]
   1214c:	add	r3, r3, #1
   12150:	ldrb	r3, [r3]
   12154:	cmp	r3, #0
   12158:	beq	12180 <__assert_fail@plt+0x108c>
   1215c:	ldr	r0, [pc, #968]	; 1252c <__assert_fail@plt+0x1438>
   12160:	bl	10fd4 <gettext@plt>
   12164:	mov	r3, r0
   12168:	mov	r2, r3
   1216c:	mov	r1, #0
   12170:	mov	r0, #0
   12174:	bl	10f74 <error@plt>
   12178:	mov	r0, #1
   1217c:	bl	11460 <__assert_fail@plt+0x36c>
   12180:	ldr	r3, [pc, #928]	; 12528 <__assert_fail@plt+0x1434>
   12184:	ldr	r3, [r3]
   12188:	ldrb	r2, [r3]
   1218c:	ldr	r3, [pc, #900]	; 12518 <__assert_fail@plt+0x1424>
   12190:	strb	r2, [r3]
   12194:	mov	r3, #1
   12198:	strb	r3, [fp, #-6]
   1219c:	b	12274 <__assert_fail@plt+0x1180>
   121a0:	ldr	r3, [pc, #896]	; 12528 <__assert_fail@plt+0x1434>
   121a4:	ldr	r3, [r3]
   121a8:	ldrb	r3, [r3]
   121ac:	cmp	r3, #0
   121b0:	beq	121cc <__assert_fail@plt+0x10d8>
   121b4:	ldr	r3, [pc, #876]	; 12528 <__assert_fail@plt+0x1434>
   121b8:	ldr	r3, [r3]
   121bc:	mov	r0, r3
   121c0:	bl	10fe0 <strlen@plt>
   121c4:	mov	r3, r0
   121c8:	b	121d0 <__assert_fail@plt+0x10dc>
   121cc:	mov	r3, #1
   121d0:	ldr	r2, [pc, #856]	; 12530 <__assert_fail@plt+0x143c>
   121d4:	str	r3, [r2]
   121d8:	ldr	r3, [pc, #840]	; 12528 <__assert_fail@plt+0x1434>
   121dc:	ldr	r3, [r3]
   121e0:	ldr	r2, [pc, #844]	; 12534 <__assert_fail@plt+0x1440>
   121e4:	str	r3, [r2]
   121e8:	b	12274 <__assert_fail@plt+0x1180>
   121ec:	ldr	r3, [pc, #800]	; 12514 <__assert_fail@plt+0x1420>
   121f0:	mov	r2, #1
   121f4:	strb	r2, [r3]
   121f8:	b	12274 <__assert_fail@plt+0x1180>
   121fc:	ldr	r3, [pc, #820]	; 12538 <__assert_fail@plt+0x1444>
   12200:	mov	r2, #0
   12204:	strb	r2, [r3]
   12208:	b	12274 <__assert_fail@plt+0x1180>
   1220c:	ldr	r3, [pc, #808]	; 1253c <__assert_fail@plt+0x1448>
   12210:	mov	r2, #1
   12214:	strb	r2, [r3]
   12218:	b	12274 <__assert_fail@plt+0x1180>
   1221c:	mov	r0, #0
   12220:	bl	11460 <__assert_fail@plt+0x36c>
   12224:	ldr	r3, [pc, #788]	; 12540 <__assert_fail@plt+0x144c>
   12228:	ldr	r0, [r3]
   1222c:	ldr	r3, [pc, #784]	; 12544 <__assert_fail@plt+0x1450>
   12230:	ldr	r2, [r3]
   12234:	mov	r3, #0
   12238:	str	r3, [sp, #12]
   1223c:	ldr	r3, [pc, #772]	; 12548 <__assert_fail@plt+0x1454>
   12240:	str	r3, [sp, #8]
   12244:	ldr	r3, [pc, #768]	; 1254c <__assert_fail@plt+0x1458>
   12248:	str	r3, [sp, #4]
   1224c:	ldr	r3, [pc, #764]	; 12550 <__assert_fail@plt+0x145c>
   12250:	str	r3, [sp]
   12254:	mov	r3, r2
   12258:	ldr	r2, [pc, #756]	; 12554 <__assert_fail@plt+0x1460>
   1225c:	ldr	r1, [pc, #756]	; 12558 <__assert_fail@plt+0x1464>
   12260:	bl	16b14 <__assert_fail@plt+0x5a20>
   12264:	mov	r0, #0
   12268:	bl	10fc8 <exit@plt>
   1226c:	mov	r0, #1
   12270:	bl	11460 <__assert_fail@plt+0x36c>
   12274:	mov	r3, #0
   12278:	str	r3, [sp]
   1227c:	ldr	r3, [pc, #728]	; 1255c <__assert_fail@plt+0x1468>
   12280:	ldr	r2, [pc, #728]	; 12560 <__assert_fail@plt+0x146c>
   12284:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12288:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1228c:	bl	10fb0 <getopt_long@plt>
   12290:	str	r0, [fp, #-16]
   12294:	ldr	r3, [fp, #-16]
   12298:	cmn	r3, #1
   1229c:	bne	12068 <__assert_fail@plt+0xf74>
   122a0:	ldr	r3, [fp, #-12]
   122a4:	cmp	r3, #0
   122a8:	bne	122d0 <__assert_fail@plt+0x11dc>
   122ac:	ldr	r0, [pc, #688]	; 12564 <__assert_fail@plt+0x1470>
   122b0:	bl	10fd4 <gettext@plt>
   122b4:	mov	r3, r0
   122b8:	mov	r2, r3
   122bc:	mov	r1, #0
   122c0:	mov	r0, #0
   122c4:	bl	10f74 <error@plt>
   122c8:	mov	r0, #1
   122cc:	bl	11460 <__assert_fail@plt+0x36c>
   122d0:	ldrb	r3, [fp, #-7]
   122d4:	cmp	r3, #0
   122d8:	beq	12340 <__assert_fail@plt+0x124c>
   122dc:	ldrb	r3, [fp, #-6]
   122e0:	cmp	r3, #0
   122e4:	beq	1230c <__assert_fail@plt+0x1218>
   122e8:	ldr	r0, [pc, #632]	; 12568 <__assert_fail@plt+0x1474>
   122ec:	bl	10fd4 <gettext@plt>
   122f0:	mov	r3, r0
   122f4:	mov	r2, r3
   122f8:	mov	r1, #0
   122fc:	mov	r0, #0
   12300:	bl	10f74 <error@plt>
   12304:	mov	r0, #1
   12308:	bl	11460 <__assert_fail@plt+0x36c>
   1230c:	ldr	r3, [pc, #512]	; 12514 <__assert_fail@plt+0x1420>
   12310:	ldrb	r3, [r3]
   12314:	cmp	r3, #0
   12318:	beq	12340 <__assert_fail@plt+0x124c>
   1231c:	ldr	r0, [pc, #584]	; 1256c <__assert_fail@plt+0x1478>
   12320:	bl	10fd4 <gettext@plt>
   12324:	mov	r3, r0
   12328:	mov	r2, r3
   1232c:	mov	r1, #0
   12330:	mov	r0, #0
   12334:	bl	10f74 <error@plt>
   12338:	mov	r0, #1
   1233c:	bl	11460 <__assert_fail@plt+0x36c>
   12340:	ldrb	r3, [fp, #-7]
   12344:	cmp	r3, #0
   12348:	beq	12354 <__assert_fail@plt+0x1260>
   1234c:	mov	r2, #4
   12350:	b	12358 <__assert_fail@plt+0x1264>
   12354:	mov	r2, #0
   12358:	ldr	r3, [pc, #476]	; 1253c <__assert_fail@plt+0x1448>
   1235c:	ldrb	r3, [r3]
   12360:	cmp	r3, #0
   12364:	beq	12370 <__assert_fail@plt+0x127c>
   12368:	mov	r3, #2
   1236c:	b	12374 <__assert_fail@plt+0x1280>
   12370:	mov	r3, #0
   12374:	orr	r3, r2, r3
   12378:	mov	r1, r3
   1237c:	ldr	r0, [fp, #-12]
   12380:	bl	12880 <__assert_fail@plt+0x178c>
   12384:	ldrb	r3, [fp, #-6]
   12388:	eor	r3, r3, #1
   1238c:	uxtb	r3, r3
   12390:	cmp	r3, #0
   12394:	beq	123a4 <__assert_fail@plt+0x12b0>
   12398:	ldr	r3, [pc, #376]	; 12518 <__assert_fail@plt+0x1424>
   1239c:	mov	r2, #9
   123a0:	strb	r2, [r3]
   123a4:	ldr	r3, [pc, #392]	; 12534 <__assert_fail@plt+0x1440>
   123a8:	ldr	r3, [r3]
   123ac:	cmp	r3, #0
   123b0:	bne	123dc <__assert_fail@plt+0x12e8>
   123b4:	ldr	r3, [pc, #348]	; 12518 <__assert_fail@plt+0x1424>
   123b8:	ldrb	r2, [r3]
   123bc:	ldr	r3, [pc, #428]	; 12570 <__assert_fail@plt+0x147c>
   123c0:	strb	r2, [r3]
   123c4:	ldr	r3, [pc, #360]	; 12534 <__assert_fail@plt+0x1440>
   123c8:	ldr	r2, [pc, #416]	; 12570 <__assert_fail@plt+0x147c>
   123cc:	str	r2, [r3]
   123d0:	ldr	r3, [pc, #344]	; 12530 <__assert_fail@plt+0x143c>
   123d4:	mov	r2, #1
   123d8:	str	r2, [r3]
   123dc:	ldrb	r3, [fp, #-7]
   123e0:	cmp	r3, #0
   123e4:	beq	123f0 <__assert_fail@plt+0x12fc>
   123e8:	ldr	r3, [pc, #388]	; 12574 <__assert_fail@plt+0x1480>
   123ec:	b	123f4 <__assert_fail@plt+0x1300>
   123f0:	ldr	r3, [pc, #384]	; 12578 <__assert_fail@plt+0x1484>
   123f4:	str	r3, [fp, #-20]	; 0xffffffec
   123f8:	ldr	r3, [pc, #380]	; 1257c <__assert_fail@plt+0x1488>
   123fc:	ldr	r2, [r3]
   12400:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12404:	cmp	r2, r3
   12408:	bne	12424 <__assert_fail@plt+0x1330>
   1240c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12410:	ldr	r0, [pc, #360]	; 12580 <__assert_fail@plt+0x148c>
   12414:	bl	11e58 <__assert_fail@plt+0xd64>
   12418:	mov	r3, r0
   1241c:	strb	r3, [fp, #-5]
   12420:	b	1249c <__assert_fail@plt+0x13a8>
   12424:	mov	r3, #1
   12428:	strb	r3, [fp, #-5]
   1242c:	b	12488 <__assert_fail@plt+0x1394>
   12430:	ldr	r3, [pc, #324]	; 1257c <__assert_fail@plt+0x1488>
   12434:	ldr	r3, [r3]
   12438:	lsl	r3, r3, #2
   1243c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12440:	add	r3, r2, r3
   12444:	ldr	r3, [r3]
   12448:	ldr	r1, [fp, #-20]	; 0xffffffec
   1244c:	mov	r0, r3
   12450:	bl	11e58 <__assert_fail@plt+0xd64>
   12454:	mov	r3, r0
   12458:	mov	r2, r3
   1245c:	ldrb	r3, [fp, #-5]
   12460:	and	r3, r3, r2
   12464:	cmp	r3, #0
   12468:	movne	r3, #1
   1246c:	moveq	r3, #0
   12470:	strb	r3, [fp, #-5]
   12474:	ldr	r3, [pc, #256]	; 1257c <__assert_fail@plt+0x1488>
   12478:	ldr	r3, [r3]
   1247c:	add	r3, r3, #1
   12480:	ldr	r2, [pc, #244]	; 1257c <__assert_fail@plt+0x1488>
   12484:	str	r3, [r2]
   12488:	ldr	r3, [pc, #236]	; 1257c <__assert_fail@plt+0x1488>
   1248c:	ldr	r2, [r3]
   12490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12494:	cmp	r2, r3
   12498:	blt	12430 <__assert_fail@plt+0x133c>
   1249c:	ldr	r3, [pc, #120]	; 1251c <__assert_fail@plt+0x1428>
   124a0:	ldrb	r3, [r3]
   124a4:	cmp	r3, #0
   124a8:	beq	124ec <__assert_fail@plt+0x13f8>
   124ac:	ldr	r3, [pc, #208]	; 12584 <__assert_fail@plt+0x1490>
   124b0:	ldr	r3, [r3]
   124b4:	mov	r0, r3
   124b8:	bl	13354 <__assert_fail@plt+0x2260>
   124bc:	mov	r3, r0
   124c0:	cmn	r3, #1
   124c4:	bne	124ec <__assert_fail@plt+0x13f8>
   124c8:	bl	11004 <__errno_location@plt>
   124cc:	mov	r3, r0
   124d0:	ldr	r3, [r3]
   124d4:	ldr	r2, [pc, #164]	; 12580 <__assert_fail@plt+0x148c>
   124d8:	mov	r1, r3
   124dc:	mov	r0, #0
   124e0:	bl	10f74 <error@plt>
   124e4:	mov	r3, #0
   124e8:	strb	r3, [fp, #-5]
   124ec:	ldrb	r3, [fp, #-5]
   124f0:	eor	r3, r3, #1
   124f4:	uxtb	r3, r3
   124f8:	mov	r0, r3
   124fc:	sub	sp, fp, #4
   12500:	pop	{fp, pc}
   12504:	andeq	r8, r1, ip, ror #31
   12508:	andeq	r9, r1, r8, ror #15
   1250c:	andeq	r9, r1, r4
   12510:	andeq	r3, r1, r4, lsl #3
   12514:	muleq	r2, r0, r1
   12518:	muleq	r2, r2, r1
   1251c:	muleq	r2, ip, r1
   12520:	andeq	r0, r0, r1, lsl #2
   12524:	andeq	r9, r1, r0, lsl #16
   12528:	andeq	fp, r2, r8, ror r1
   1252c:	andeq	r9, r1, r0, lsr #16
   12530:	muleq	r2, r4, r1
   12534:	muleq	r2, r8, r1
   12538:	andeq	fp, r2, r8, lsl #2
   1253c:	muleq	r2, r1, r1
   12540:	andeq	fp, r2, r4, ror r1
   12544:	andeq	fp, r2, ip, lsl #2
   12548:	andeq	r9, r1, ip, asr #16
   1254c:	andeq	r9, r1, ip, asr r8
   12550:	andeq	r9, r1, ip, ror #16
   12554:	andeq	r8, r1, r4, lsr pc
   12558:			; <UNDEFINED> instruction: 0x000197bc
   1255c:	andeq	r9, r1, r8, lsl r1
   12560:	andeq	r9, r1, ip, ror r8
   12564:	andeq	r9, r1, r8, lsl #17
   12568:	andeq	r9, r1, r0, asr #17
   1256c:	andeq	r9, r1, r4, lsl #18
   12570:	andeq	fp, r2, r0, lsl #3
   12574:	andeq	r1, r1, r0, ror #14
   12578:	ldrdeq	r1, [r1], -r8
   1257c:	andeq	fp, r2, r0, ror #2
   12580:	ldrdeq	r9, [r1], -ip
   12584:	andeq	fp, r2, r0, ror r1
   12588:	push	{fp}		; (str fp, [sp, #-4]!)
   1258c:	add	fp, sp, #0
   12590:	sub	sp, sp, #12
   12594:	mov	r3, r0
   12598:	strb	r3, [fp, #-5]
   1259c:	ldrb	r3, [fp, #-5]
   125a0:	mov	r0, r3
   125a4:	add	sp, fp, #0
   125a8:	pop	{fp}		; (ldr fp, [sp], #4)
   125ac:	bx	lr
   125b0:	push	{fp, lr}
   125b4:	add	fp, sp, #4
   125b8:	sub	sp, sp, #16
   125bc:	strd	r0, [fp, #-12]
   125c0:	strd	r2, [fp, #-20]	; 0xffffffec
   125c4:	ldr	r3, [pc, #148]	; 12660 <__assert_fail@plt+0x156c>
   125c8:	ldr	r2, [r3]
   125cc:	ldr	r3, [pc, #144]	; 12664 <__assert_fail@plt+0x1570>
   125d0:	ldr	r3, [r3]
   125d4:	cmp	r2, r3
   125d8:	bne	12600 <__assert_fail@plt+0x150c>
   125dc:	ldr	r3, [pc, #132]	; 12668 <__assert_fail@plt+0x1574>
   125e0:	ldr	r3, [r3]
   125e4:	mov	r2, #16
   125e8:	ldr	r1, [pc, #116]	; 12664 <__assert_fail@plt+0x1570>
   125ec:	mov	r0, r3
   125f0:	bl	16ed8 <__assert_fail@plt+0x5de4>
   125f4:	mov	r2, r0
   125f8:	ldr	r3, [pc, #104]	; 12668 <__assert_fail@plt+0x1574>
   125fc:	str	r2, [r3]
   12600:	ldr	r3, [pc, #96]	; 12668 <__assert_fail@plt+0x1574>
   12604:	ldr	r2, [r3]
   12608:	ldr	r3, [pc, #80]	; 12660 <__assert_fail@plt+0x156c>
   1260c:	ldr	r3, [r3]
   12610:	lsl	r3, r3, #4
   12614:	add	r1, r2, r3
   12618:	ldrd	r2, [fp, #-12]
   1261c:	strd	r2, [r1]
   12620:	ldr	r3, [pc, #64]	; 12668 <__assert_fail@plt+0x1574>
   12624:	ldr	r2, [r3]
   12628:	ldr	r3, [pc, #48]	; 12660 <__assert_fail@plt+0x156c>
   1262c:	ldr	r3, [r3]
   12630:	lsl	r3, r3, #4
   12634:	add	r1, r2, r3
   12638:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1263c:	strd	r2, [r1, #8]
   12640:	ldr	r3, [pc, #24]	; 12660 <__assert_fail@plt+0x156c>
   12644:	ldr	r3, [r3]
   12648:	add	r3, r3, #1
   1264c:	ldr	r2, [pc, #12]	; 12660 <__assert_fail@plt+0x156c>
   12650:	str	r3, [r2]
   12654:	nop			; (mov r0, r0)
   12658:	sub	sp, fp, #4
   1265c:	pop	{fp, pc}
   12660:	andeq	fp, r2, r4, lsr #3
   12664:	andeq	fp, r2, r8, lsr #3
   12668:	andeq	fp, r2, r0, lsr #3
   1266c:	push	{fp}		; (str fp, [sp, #-4]!)
   12670:	add	fp, sp, #0
   12674:	sub	sp, sp, #20
   12678:	str	r0, [fp, #-16]
   1267c:	str	r1, [fp, #-20]	; 0xffffffec
   12680:	ldr	r3, [fp, #-16]
   12684:	ldrd	r2, [r3]
   12688:	mov	r3, r2
   1268c:	str	r3, [fp, #-8]
   12690:	ldr	r3, [fp, #-20]	; 0xffffffec
   12694:	ldrd	r2, [r3]
   12698:	mov	r3, r2
   1269c:	str	r3, [fp, #-12]
   126a0:	ldr	r2, [fp, #-8]
   126a4:	ldr	r3, [fp, #-12]
   126a8:	cmp	r2, r3
   126ac:	blt	126cc <__assert_fail@plt+0x15d8>
   126b0:	ldr	r2, [fp, #-8]
   126b4:	ldr	r3, [fp, #-12]
   126b8:	cmp	r2, r3
   126bc:	movgt	r3, #1
   126c0:	movle	r3, #0
   126c4:	uxtb	r3, r3
   126c8:	b	126d0 <__assert_fail@plt+0x15dc>
   126cc:	mvn	r3, #0
   126d0:	mov	r0, r3
   126d4:	add	sp, fp, #0
   126d8:	pop	{fp}		; (ldr fp, [sp], #4)
   126dc:	bx	lr
   126e0:	push	{fp, lr}
   126e4:	add	fp, sp, #4
   126e8:	sub	sp, sp, #16
   126ec:	ldr	r3, [pc, #384]	; 12874 <__assert_fail@plt+0x1780>
   126f0:	ldr	r3, [r3]
   126f4:	str	r3, [fp, #-12]
   126f8:	ldr	r3, [pc, #376]	; 12878 <__assert_fail@plt+0x1784>
   126fc:	ldr	r3, [r3]
   12700:	str	r3, [fp, #-16]
   12704:	ldr	r3, [pc, #360]	; 12874 <__assert_fail@plt+0x1780>
   12708:	mov	r2, #0
   1270c:	str	r2, [r3]
   12710:	ldr	r3, [pc, #352]	; 12878 <__assert_fail@plt+0x1784>
   12714:	mov	r2, #0
   12718:	str	r2, [r3]
   1271c:	ldr	r3, [pc, #344]	; 1287c <__assert_fail@plt+0x1788>
   12720:	mov	r2, #0
   12724:	str	r2, [r3]
   12728:	ldr	r3, [fp, #-12]
   1272c:	ldrd	r2, [r3]
   12730:	cmp	r3, #0
   12734:	cmpeq	r2, #1
   12738:	bls	12758 <__assert_fail@plt+0x1664>
   1273c:	ldr	r3, [fp, #-12]
   12740:	ldrd	r2, [r3]
   12744:	subs	r2, r2, #1
   12748:	sbc	r3, r3, #0
   1274c:	mov	r0, #1
   12750:	mov	r1, #0
   12754:	bl	125b0 <__assert_fail@plt+0x14bc>
   12758:	mov	r3, #1
   1275c:	str	r3, [fp, #-8]
   12760:	b	127f8 <__assert_fail@plt+0x1704>
   12764:	ldr	r3, [fp, #-8]
   12768:	sub	r3, r3, #-268435455	; 0xf0000001
   1276c:	lsl	r3, r3, #4
   12770:	ldr	r2, [fp, #-12]
   12774:	add	r3, r2, r3
   12778:	ldrd	r2, [r3, #8]
   1277c:	adds	r0, r2, #1
   12780:	adc	r1, r3, #0
   12784:	ldr	r3, [fp, #-8]
   12788:	lsl	r3, r3, #4
   1278c:	ldr	r2, [fp, #-12]
   12790:	add	r3, r2, r3
   12794:	ldrd	r2, [r3]
   12798:	cmp	r1, r3
   1279c:	cmpeq	r0, r2
   127a0:	beq	127e8 <__assert_fail@plt+0x16f4>
   127a4:	ldr	r3, [fp, #-8]
   127a8:	sub	r3, r3, #-268435455	; 0xf0000001
   127ac:	lsl	r3, r3, #4
   127b0:	ldr	r2, [fp, #-12]
   127b4:	add	r3, r2, r3
   127b8:	ldrd	r2, [r3, #8]
   127bc:	adds	r0, r2, #1
   127c0:	adc	r1, r3, #0
   127c4:	ldr	r3, [fp, #-8]
   127c8:	lsl	r3, r3, #4
   127cc:	ldr	r2, [fp, #-12]
   127d0:	add	r3, r2, r3
   127d4:	ldrd	r2, [r3]
   127d8:	subs	r2, r2, #1
   127dc:	sbc	r3, r3, #0
   127e0:	bl	125b0 <__assert_fail@plt+0x14bc>
   127e4:	b	127ec <__assert_fail@plt+0x16f8>
   127e8:	nop			; (mov r0, r0)
   127ec:	ldr	r3, [fp, #-8]
   127f0:	add	r3, r3, #1
   127f4:	str	r3, [fp, #-8]
   127f8:	ldr	r2, [fp, #-8]
   127fc:	ldr	r3, [fp, #-16]
   12800:	cmp	r2, r3
   12804:	bcc	12764 <__assert_fail@plt+0x1670>
   12808:	ldr	r3, [fp, #-16]
   1280c:	sub	r3, r3, #-268435455	; 0xf0000001
   12810:	lsl	r3, r3, #4
   12814:	ldr	r2, [fp, #-12]
   12818:	add	r3, r2, r3
   1281c:	ldrd	r2, [r3, #8]
   12820:	mvn	r0, #0
   12824:	mvn	r1, #0
   12828:	cmp	r3, r1
   1282c:	cmpeq	r2, r0
   12830:	beq	12860 <__assert_fail@plt+0x176c>
   12834:	ldr	r3, [fp, #-16]
   12838:	sub	r3, r3, #-268435455	; 0xf0000001
   1283c:	lsl	r3, r3, #4
   12840:	ldr	r2, [fp, #-12]
   12844:	add	r3, r2, r3
   12848:	ldrd	r2, [r3, #8]
   1284c:	adds	r0, r2, #1
   12850:	adc	r1, r3, #0
   12854:	mvn	r2, #0
   12858:	mvn	r3, #0
   1285c:	bl	125b0 <__assert_fail@plt+0x14bc>
   12860:	ldr	r0, [fp, #-12]
   12864:	bl	134f4 <__assert_fail@plt+0x2400>
   12868:	nop			; (mov r0, r0)
   1286c:	sub	sp, fp, #4
   12870:	pop	{fp, pc}
   12874:	andeq	fp, r2, r0, lsr #3
   12878:	andeq	fp, r2, r4, lsr #3
   1287c:	andeq	fp, r2, r8, lsr #3
   12880:	push	{r4, fp, lr}
   12884:	add	fp, sp, #8
   12888:	sub	sp, sp, #52	; 0x34
   1288c:	str	r0, [fp, #-56]	; 0xffffffc8
   12890:	str	r1, [fp, #-60]	; 0xffffffc4
   12894:	mov	r2, #1
   12898:	mov	r3, #0
   1289c:	strd	r2, [fp, #-20]	; 0xffffffec
   128a0:	mov	r2, #0
   128a4:	mov	r3, #0
   128a8:	strd	r2, [fp, #-52]	; 0xffffffcc
   128ac:	mov	r3, #0
   128b0:	strb	r3, [fp, #-21]	; 0xffffffeb
   128b4:	mov	r3, #0
   128b8:	strb	r3, [fp, #-22]	; 0xffffffea
   128bc:	mov	r3, #0
   128c0:	strb	r3, [fp, #-23]	; 0xffffffe9
   128c4:	mov	r3, #0
   128c8:	strb	r3, [fp, #-24]	; 0xffffffe8
   128cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   128d0:	and	r3, r3, #1
   128d4:	cmp	r3, #0
   128d8:	beq	1291c <__assert_fail@plt+0x1828>
   128dc:	ldr	r1, [pc, #1828]	; 13008 <__assert_fail@plt+0x1f14>
   128e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   128e4:	bl	10e54 <strcmp@plt>
   128e8:	mov	r3, r0
   128ec:	cmp	r3, #0
   128f0:	bne	1291c <__assert_fail@plt+0x1828>
   128f4:	mov	r2, #1
   128f8:	mov	r3, #0
   128fc:	strd	r2, [fp, #-52]	; 0xffffffcc
   12900:	mov	r3, #1
   12904:	strb	r3, [fp, #-21]	; 0xffffffeb
   12908:	mov	r3, #1
   1290c:	strb	r3, [fp, #-23]	; 0xffffffe9
   12910:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12914:	add	r3, r3, #1
   12918:	str	r3, [fp, #-56]	; 0xffffffc8
   1291c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12920:	ldrb	r3, [r3]
   12924:	cmp	r3, #45	; 0x2d
   12928:	bne	12a24 <__assert_fail@plt+0x1930>
   1292c:	mov	r3, #0
   12930:	strb	r3, [fp, #-24]	; 0xffffffe8
   12934:	ldrb	r3, [fp, #-23]	; 0xffffffe9
   12938:	cmp	r3, #0
   1293c:	beq	12984 <__assert_fail@plt+0x1890>
   12940:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12944:	and	r3, r3, #4
   12948:	cmp	r3, #0
   1294c:	beq	12960 <__assert_fail@plt+0x186c>
   12950:	ldr	r0, [pc, #1716]	; 1300c <__assert_fail@plt+0x1f18>
   12954:	bl	10fd4 <gettext@plt>
   12958:	mov	r3, r0
   1295c:	b	1296c <__assert_fail@plt+0x1878>
   12960:	ldr	r0, [pc, #1704]	; 13010 <__assert_fail@plt+0x1f1c>
   12964:	bl	10fd4 <gettext@plt>
   12968:	mov	r3, r0
   1296c:	mov	r2, r3
   12970:	mov	r1, #0
   12974:	mov	r0, #0
   12978:	bl	10f74 <error@plt>
   1297c:	mov	r0, #1
   12980:	bl	11460 <__assert_fail@plt+0x36c>
   12984:	mov	r3, #1
   12988:	strb	r3, [fp, #-23]	; 0xffffffe9
   1298c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12990:	add	r3, r3, #1
   12994:	str	r3, [fp, #-56]	; 0xffffffc8
   12998:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1299c:	cmp	r3, #0
   129a0:	beq	129f4 <__assert_fail@plt+0x1900>
   129a4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   129a8:	orrs	r3, r2, r3
   129ac:	bne	129f4 <__assert_fail@plt+0x1900>
   129b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   129b4:	and	r3, r3, #4
   129b8:	cmp	r3, #0
   129bc:	beq	129d0 <__assert_fail@plt+0x18dc>
   129c0:	ldr	r0, [pc, #1612]	; 13014 <__assert_fail@plt+0x1f20>
   129c4:	bl	10fd4 <gettext@plt>
   129c8:	mov	r3, r0
   129cc:	b	129dc <__assert_fail@plt+0x18e8>
   129d0:	ldr	r0, [pc, #1600]	; 13018 <__assert_fail@plt+0x1f24>
   129d4:	bl	10fd4 <gettext@plt>
   129d8:	mov	r3, r0
   129dc:	mov	r2, r3
   129e0:	mov	r1, #0
   129e4:	mov	r0, #0
   129e8:	bl	10f74 <error@plt>
   129ec:	mov	r0, #1
   129f0:	bl	11460 <__assert_fail@plt+0x36c>
   129f4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   129f8:	cmp	r3, #0
   129fc:	beq	12a08 <__assert_fail@plt+0x1914>
   12a00:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12a04:	b	12a10 <__assert_fail@plt+0x191c>
   12a08:	mov	r2, #1
   12a0c:	mov	r3, #0
   12a10:	strd	r2, [fp, #-20]	; 0xffffffec
   12a14:	mov	r2, #0
   12a18:	mov	r3, #0
   12a1c:	strd	r2, [fp, #-52]	; 0xffffffcc
   12a20:	b	1291c <__assert_fail@plt+0x1828>
   12a24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12a28:	ldrb	r3, [r3]
   12a2c:	cmp	r3, #44	; 0x2c
   12a30:	beq	12a7c <__assert_fail@plt+0x1988>
   12a34:	bl	10fbc <__ctype_b_loc@plt>
   12a38:	mov	r3, r0
   12a3c:	ldr	r4, [r3]
   12a40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12a44:	ldrb	r3, [r3]
   12a48:	mov	r0, r3
   12a4c:	bl	12588 <__assert_fail@plt+0x1494>
   12a50:	mov	r3, r0
   12a54:	lsl	r3, r3, #1
   12a58:	add	r3, r4, r3
   12a5c:	ldrh	r3, [r3]
   12a60:	and	r3, r3, #1
   12a64:	cmp	r3, #0
   12a68:	bne	12a7c <__assert_fail@plt+0x1988>
   12a6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12a70:	ldrb	r3, [r3]
   12a74:	cmp	r3, #0
   12a78:	bne	12c18 <__assert_fail@plt+0x1b24>
   12a7c:	mov	r3, #0
   12a80:	strb	r3, [fp, #-24]	; 0xffffffe8
   12a84:	ldrb	r3, [fp, #-23]	; 0xffffffe9
   12a88:	cmp	r3, #0
   12a8c:	beq	12b80 <__assert_fail@plt+0x1a8c>
   12a90:	mov	r3, #0
   12a94:	strb	r3, [fp, #-23]	; 0xffffffe9
   12a98:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12a9c:	eor	r3, r3, #1
   12aa0:	uxtb	r3, r3
   12aa4:	cmp	r3, #0
   12aa8:	beq	12b04 <__assert_fail@plt+0x1a10>
   12aac:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12ab0:	eor	r3, r3, #1
   12ab4:	uxtb	r3, r3
   12ab8:	cmp	r3, #0
   12abc:	beq	12b04 <__assert_fail@plt+0x1a10>
   12ac0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12ac4:	and	r3, r3, #1
   12ac8:	cmp	r3, #0
   12acc:	beq	12ae0 <__assert_fail@plt+0x19ec>
   12ad0:	mov	r2, #1
   12ad4:	mov	r3, #0
   12ad8:	strd	r2, [fp, #-20]	; 0xffffffec
   12adc:	b	12b04 <__assert_fail@plt+0x1a10>
   12ae0:	ldr	r0, [pc, #1332]	; 1301c <__assert_fail@plt+0x1f28>
   12ae4:	bl	10fd4 <gettext@plt>
   12ae8:	mov	r3, r0
   12aec:	mov	r2, r3
   12af0:	mov	r1, #0
   12af4:	mov	r0, #0
   12af8:	bl	10f74 <error@plt>
   12afc:	mov	r0, #1
   12b00:	bl	11460 <__assert_fail@plt+0x36c>
   12b04:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12b08:	eor	r3, r3, #1
   12b0c:	uxtb	r3, r3
   12b10:	cmp	r3, #0
   12b14:	beq	12b2c <__assert_fail@plt+0x1a38>
   12b18:	mvn	r2, #0
   12b1c:	mvn	r3, #0
   12b20:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12b24:	bl	125b0 <__assert_fail@plt+0x14bc>
   12b28:	b	12b70 <__assert_fail@plt+0x1a7c>
   12b2c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12b30:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12b34:	cmp	r1, r3
   12b38:	cmpeq	r0, r2
   12b3c:	bcs	12b64 <__assert_fail@plt+0x1a70>
   12b40:	ldr	r0, [pc, #1240]	; 13020 <__assert_fail@plt+0x1f2c>
   12b44:	bl	10fd4 <gettext@plt>
   12b48:	mov	r3, r0
   12b4c:	mov	r2, r3
   12b50:	mov	r1, #0
   12b54:	mov	r0, #0
   12b58:	bl	10f74 <error@plt>
   12b5c:	mov	r0, #1
   12b60:	bl	11460 <__assert_fail@plt+0x36c>
   12b64:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12b68:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12b6c:	bl	125b0 <__assert_fail@plt+0x14bc>
   12b70:	mov	r2, #0
   12b74:	mov	r3, #0
   12b78:	strd	r2, [fp, #-52]	; 0xffffffcc
   12b7c:	b	12be8 <__assert_fail@plt+0x1af4>
   12b80:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12b84:	orrs	r3, r2, r3
   12b88:	bne	12bd0 <__assert_fail@plt+0x1adc>
   12b8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12b90:	and	r3, r3, #4
   12b94:	cmp	r3, #0
   12b98:	beq	12bac <__assert_fail@plt+0x1ab8>
   12b9c:	ldr	r0, [pc, #1136]	; 13014 <__assert_fail@plt+0x1f20>
   12ba0:	bl	10fd4 <gettext@plt>
   12ba4:	mov	r3, r0
   12ba8:	b	12bb8 <__assert_fail@plt+0x1ac4>
   12bac:	ldr	r0, [pc, #1124]	; 13018 <__assert_fail@plt+0x1f24>
   12bb0:	bl	10fd4 <gettext@plt>
   12bb4:	mov	r3, r0
   12bb8:	mov	r2, r3
   12bbc:	mov	r1, #0
   12bc0:	mov	r0, #0
   12bc4:	bl	10f74 <error@plt>
   12bc8:	mov	r0, #1
   12bcc:	bl	11460 <__assert_fail@plt+0x36c>
   12bd0:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12bd4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12bd8:	bl	125b0 <__assert_fail@plt+0x14bc>
   12bdc:	mov	r2, #0
   12be0:	mov	r3, #0
   12be4:	strd	r2, [fp, #-52]	; 0xffffffcc
   12be8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bec:	ldrb	r3, [r3]
   12bf0:	cmp	r3, #0
   12bf4:	beq	12e48 <__assert_fail@plt+0x1d54>
   12bf8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bfc:	add	r3, r3, #1
   12c00:	str	r3, [fp, #-56]	; 0xffffffc8
   12c04:	mov	r3, #0
   12c08:	strb	r3, [fp, #-21]	; 0xffffffeb
   12c0c:	mov	r3, #0
   12c10:	strb	r3, [fp, #-22]	; 0xffffffea
   12c14:	b	12e44 <__assert_fail@plt+0x1d50>
   12c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c1c:	ldrb	r3, [r3]
   12c20:	sub	r3, r3, #48	; 0x30
   12c24:	cmp	r3, #9
   12c28:	bhi	12df4 <__assert_fail@plt+0x1d00>
   12c2c:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   12c30:	eor	r3, r3, #1
   12c34:	uxtb	r3, r3
   12c38:	cmp	r3, #0
   12c3c:	bne	12c50 <__assert_fail@plt+0x1b5c>
   12c40:	ldr	r3, [pc, #988]	; 13024 <__assert_fail@plt+0x1f30>
   12c44:	ldr	r3, [r3]
   12c48:	cmp	r3, #0
   12c4c:	bne	12c5c <__assert_fail@plt+0x1b68>
   12c50:	ldr	r2, [pc, #972]	; 13024 <__assert_fail@plt+0x1f30>
   12c54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c58:	str	r3, [r2]
   12c5c:	mov	r3, #1
   12c60:	strb	r3, [fp, #-24]	; 0xffffffe8
   12c64:	ldrb	r3, [fp, #-23]	; 0xffffffe9
   12c68:	cmp	r3, #0
   12c6c:	beq	12c7c <__assert_fail@plt+0x1b88>
   12c70:	mov	r3, #1
   12c74:	strb	r3, [fp, #-22]	; 0xffffffea
   12c78:	b	12c84 <__assert_fail@plt+0x1b90>
   12c7c:	mov	r3, #1
   12c80:	strb	r3, [fp, #-21]	; 0xffffffeb
   12c84:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12c88:	add	r1, pc, #880	; 0x370
   12c8c:	ldrd	r0, [r1]
   12c90:	cmp	r3, r1
   12c94:	cmpeq	r2, r0
   12c98:	bhi	12d54 <__assert_fail@plt+0x1c60>
   12c9c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12ca0:	mov	r1, #10
   12ca4:	mul	r0, r1, r3
   12ca8:	mov	r1, #0
   12cac:	mul	r1, r1, r2
   12cb0:	add	r1, r0, r1
   12cb4:	mov	r0, #10
   12cb8:	umull	r2, r3, r2, r0
   12cbc:	add	r1, r1, r3
   12cc0:	mov	r3, r1
   12cc4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12cc8:	ldrb	r1, [r1]
   12ccc:	sub	r1, r1, #48	; 0x30
   12cd0:	mov	r0, r1
   12cd4:	asr	r1, r0, #31
   12cd8:	adds	r0, r0, r2
   12cdc:	adc	r1, r1, r3
   12ce0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12ce4:	cmp	r1, r3
   12ce8:	cmpeq	r0, r2
   12cec:	bcc	12d54 <__assert_fail@plt+0x1c60>
   12cf0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12cf4:	mov	r1, #10
   12cf8:	mul	r0, r1, r3
   12cfc:	mov	r1, #0
   12d00:	mul	r1, r1, r2
   12d04:	add	r1, r0, r1
   12d08:	mov	r0, #10
   12d0c:	umull	r2, r3, r2, r0
   12d10:	add	r1, r1, r3
   12d14:	mov	r3, r1
   12d18:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12d1c:	ldrb	r1, [r1]
   12d20:	sub	r1, r1, #48	; 0x30
   12d24:	mov	r0, r1
   12d28:	asr	r1, r0, #31
   12d2c:	adds	r2, r2, r0
   12d30:	adc	r3, r3, r1
   12d34:	strd	r2, [fp, #-52]	; 0xffffffcc
   12d38:	nop			; (mov r0, r0)
   12d3c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12d40:	mvn	r0, #0
   12d44:	mvn	r1, #0
   12d48:	cmp	r3, r1
   12d4c:	cmpeq	r2, r0
   12d50:	bne	12de4 <__assert_fail@plt+0x1cf0>
   12d54:	ldr	r3, [pc, #712]	; 13024 <__assert_fail@plt+0x1f30>
   12d58:	ldr	r3, [r3]
   12d5c:	ldr	r1, [pc, #708]	; 13028 <__assert_fail@plt+0x1f34>
   12d60:	mov	r0, r3
   12d64:	bl	110e8 <strspn@plt>
   12d68:	str	r0, [fp, #-36]	; 0xffffffdc
   12d6c:	ldr	r3, [pc, #688]	; 13024 <__assert_fail@plt+0x1f30>
   12d70:	ldr	r3, [r3]
   12d74:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12d78:	mov	r1, r2
   12d7c:	mov	r0, r3
   12d80:	bl	176dc <__assert_fail@plt+0x65e8>
   12d84:	mov	r3, r0
   12d88:	str	r3, [fp, #-40]	; 0xffffffd8
   12d8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d90:	and	r3, r3, #4
   12d94:	cmp	r3, #0
   12d98:	beq	12dac <__assert_fail@plt+0x1cb8>
   12d9c:	ldr	r0, [pc, #648]	; 1302c <__assert_fail@plt+0x1f38>
   12da0:	bl	10fd4 <gettext@plt>
   12da4:	mov	r4, r0
   12da8:	b	12db8 <__assert_fail@plt+0x1cc4>
   12dac:	ldr	r0, [pc, #636]	; 13030 <__assert_fail@plt+0x1f3c>
   12db0:	bl	10fd4 <gettext@plt>
   12db4:	mov	r4, r0
   12db8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12dbc:	bl	16448 <__assert_fail@plt+0x5354>
   12dc0:	mov	r3, r0
   12dc4:	mov	r2, r4
   12dc8:	mov	r1, #0
   12dcc:	mov	r0, #0
   12dd0:	bl	10f74 <error@plt>
   12dd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12dd8:	bl	134f4 <__assert_fail@plt+0x2400>
   12ddc:	mov	r0, #1
   12de0:	bl	11460 <__assert_fail@plt+0x36c>
   12de4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12de8:	add	r3, r3, #1
   12dec:	str	r3, [fp, #-56]	; 0xffffffc8
   12df0:	b	1291c <__assert_fail@plt+0x1828>
   12df4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12df8:	and	r3, r3, #4
   12dfc:	cmp	r3, #0
   12e00:	beq	12e14 <__assert_fail@plt+0x1d20>
   12e04:	ldr	r0, [pc, #552]	; 13034 <__assert_fail@plt+0x1f40>
   12e08:	bl	10fd4 <gettext@plt>
   12e0c:	mov	r4, r0
   12e10:	b	12e20 <__assert_fail@plt+0x1d2c>
   12e14:	ldr	r0, [pc, #540]	; 13038 <__assert_fail@plt+0x1f44>
   12e18:	bl	10fd4 <gettext@plt>
   12e1c:	mov	r4, r0
   12e20:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e24:	bl	16448 <__assert_fail@plt+0x5354>
   12e28:	mov	r3, r0
   12e2c:	mov	r2, r4
   12e30:	mov	r1, #0
   12e34:	mov	r0, #0
   12e38:	bl	10f74 <error@plt>
   12e3c:	mov	r0, #1
   12e40:	bl	11460 <__assert_fail@plt+0x36c>
   12e44:	b	1291c <__assert_fail@plt+0x1828>
   12e48:	nop			; (mov r0, r0)
   12e4c:	ldr	r3, [pc, #504]	; 1304c <__assert_fail@plt+0x1f58>
   12e50:	ldr	r3, [r3]
   12e54:	cmp	r3, #0
   12e58:	bne	12ea0 <__assert_fail@plt+0x1dac>
   12e5c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12e60:	and	r3, r3, #4
   12e64:	cmp	r3, #0
   12e68:	beq	12e7c <__assert_fail@plt+0x1d88>
   12e6c:	ldr	r0, [pc, #456]	; 1303c <__assert_fail@plt+0x1f48>
   12e70:	bl	10fd4 <gettext@plt>
   12e74:	mov	r3, r0
   12e78:	b	12e88 <__assert_fail@plt+0x1d94>
   12e7c:	ldr	r0, [pc, #444]	; 13040 <__assert_fail@plt+0x1f4c>
   12e80:	bl	10fd4 <gettext@plt>
   12e84:	mov	r3, r0
   12e88:	mov	r2, r3
   12e8c:	mov	r1, #0
   12e90:	mov	r0, #0
   12e94:	bl	10f74 <error@plt>
   12e98:	mov	r0, #1
   12e9c:	bl	11460 <__assert_fail@plt+0x36c>
   12ea0:	ldr	r3, [pc, #416]	; 13048 <__assert_fail@plt+0x1f54>
   12ea4:	ldr	r0, [r3]
   12ea8:	ldr	r3, [pc, #412]	; 1304c <__assert_fail@plt+0x1f58>
   12eac:	ldr	r1, [r3]
   12eb0:	ldr	r3, [pc, #396]	; 13044 <__assert_fail@plt+0x1f50>
   12eb4:	mov	r2, #16
   12eb8:	bl	110a0 <qsort@plt>
   12ebc:	mov	r3, #0
   12ec0:	str	r3, [fp, #-28]	; 0xffffffe4
   12ec4:	b	13060 <__assert_fail@plt+0x1f6c>
   12ec8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ecc:	add	r3, r3, #1
   12ed0:	str	r3, [fp, #-32]	; 0xffffffe0
   12ed4:	b	12fe8 <__assert_fail@plt+0x1ef4>
   12ed8:	ldr	r3, [pc, #360]	; 13048 <__assert_fail@plt+0x1f54>
   12edc:	ldr	r2, [r3]
   12ee0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ee4:	lsl	r3, r3, #4
   12ee8:	add	r3, r2, r3
   12eec:	ldrd	r0, [r3]
   12ef0:	ldr	r3, [pc, #336]	; 13048 <__assert_fail@plt+0x1f54>
   12ef4:	ldr	r2, [r3]
   12ef8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12efc:	lsl	r3, r3, #4
   12f00:	add	r3, r2, r3
   12f04:	ldrd	r2, [r3, #8]
   12f08:	cmp	r1, r3
   12f0c:	cmpeq	r0, r2
   12f10:	bhi	13050 <__assert_fail@plt+0x1f5c>
   12f14:	ldr	r3, [pc, #300]	; 13048 <__assert_fail@plt+0x1f54>
   12f18:	ldr	r2, [r3]
   12f1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12f20:	lsl	r3, r3, #4
   12f24:	add	ip, r2, r3
   12f28:	ldr	r3, [pc, #280]	; 13048 <__assert_fail@plt+0x1f54>
   12f2c:	ldr	r2, [r3]
   12f30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12f34:	lsl	r3, r3, #4
   12f38:	add	r3, r2, r3
   12f3c:	ldrd	r2, [r3, #8]
   12f40:	ldr	r1, [pc, #256]	; 13048 <__assert_fail@plt+0x1f54>
   12f44:	ldr	r0, [r1]
   12f48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12f4c:	lsl	r1, r1, #4
   12f50:	add	r1, r0, r1
   12f54:	ldrd	r0, [r1, #8]
   12f58:	cmp	r3, r1
   12f5c:	cmpeq	r2, r0
   12f60:	bcs	12f6c <__assert_fail@plt+0x1e78>
   12f64:	mov	r2, r0
   12f68:	mov	r3, r1
   12f6c:	strd	r2, [ip, #8]
   12f70:	ldr	r3, [pc, #208]	; 13048 <__assert_fail@plt+0x1f54>
   12f74:	ldr	r2, [r3]
   12f78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f7c:	lsl	r3, r3, #4
   12f80:	add	r0, r2, r3
   12f84:	ldr	r3, [pc, #188]	; 13048 <__assert_fail@plt+0x1f54>
   12f88:	ldr	r2, [r3]
   12f8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f90:	add	r3, r3, #1
   12f94:	lsl	r3, r3, #4
   12f98:	add	r1, r2, r3
   12f9c:	ldr	r3, [pc, #168]	; 1304c <__assert_fail@plt+0x1f58>
   12fa0:	ldr	r2, [r3]
   12fa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fa8:	sub	r3, r2, r3
   12fac:	sub	r3, r3, #-268435455	; 0xf0000001
   12fb0:	lsl	r3, r3, #4
   12fb4:	mov	r2, r3
   12fb8:	bl	10e84 <memmove@plt>
   12fbc:	ldr	r3, [pc, #136]	; 1304c <__assert_fail@plt+0x1f58>
   12fc0:	ldr	r3, [r3]
   12fc4:	sub	r3, r3, #1
   12fc8:	ldr	r2, [pc, #124]	; 1304c <__assert_fail@plt+0x1f58>
   12fcc:	str	r3, [r2]
   12fd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fd4:	sub	r3, r3, #1
   12fd8:	str	r3, [fp, #-32]	; 0xffffffe0
   12fdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fe0:	add	r3, r3, #1
   12fe4:	str	r3, [fp, #-32]	; 0xffffffe0
   12fe8:	ldr	r3, [pc, #92]	; 1304c <__assert_fail@plt+0x1f58>
   12fec:	ldr	r3, [r3]
   12ff0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12ff4:	cmp	r2, r3
   12ff8:	bcc	12ed8 <__assert_fail@plt+0x1de4>
   12ffc:	b	13054 <__assert_fail@plt+0x1f60>
   13000:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   13004:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   13008:	andeq	r9, r1, ip, asr r9
   1300c:	andeq	r9, r1, r0, ror #18
   13010:	andeq	r9, r1, r0, lsl #19
   13014:	muleq	r1, r4, r9
   13018:	andeq	r9, r1, r4, asr #19
   1301c:	andeq	r9, r1, r0, ror #19
   13020:	andeq	r9, r1, r4, lsl #20
   13024:	andeq	fp, r2, ip, lsr #3
   13028:	andeq	r9, r1, r0, lsr #20
   1302c:	andeq	r9, r1, ip, lsr #20
   13030:	andeq	r9, r1, r4, asr sl
   13034:	andeq	r9, r1, r4, ror sl
   13038:	muleq	r1, r8, sl
   1303c:			; <UNDEFINED> instruction: 0x00019ab0
   13040:	ldrdeq	r9, [r1], -ip
   13044:	andeq	r2, r1, ip, ror #12
   13048:	andeq	fp, r2, r0, lsr #3
   1304c:	andeq	fp, r2, r4, lsr #3
   13050:	nop			; (mov r0, r0)
   13054:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13058:	add	r3, r3, #1
   1305c:	str	r3, [fp, #-28]	; 0xffffffe4
   13060:	ldr	r3, [pc, #-28]	; 1304c <__assert_fail@plt+0x1f58>
   13064:	ldr	r3, [r3]
   13068:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1306c:	cmp	r2, r3
   13070:	bcc	12ec8 <__assert_fail@plt+0x1dd4>
   13074:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13078:	and	r3, r3, #2
   1307c:	cmp	r3, #0
   13080:	beq	13088 <__assert_fail@plt+0x1f94>
   13084:	bl	126e0 <__assert_fail@plt+0x15ec>
   13088:	ldr	r3, [pc, #-68]	; 1304c <__assert_fail@plt+0x1f58>
   1308c:	ldr	r3, [r3]
   13090:	add	r3, r3, #1
   13094:	ldr	r2, [pc, #-80]	; 1304c <__assert_fail@plt+0x1f58>
   13098:	str	r3, [r2]
   1309c:	ldr	r3, [pc, #-92]	; 13048 <__assert_fail@plt+0x1f54>
   130a0:	ldr	r2, [r3]
   130a4:	ldr	r3, [pc, #-96]	; 1304c <__assert_fail@plt+0x1f58>
   130a8:	ldr	r3, [r3]
   130ac:	lsl	r3, r3, #4
   130b0:	mov	r1, r3
   130b4:	mov	r0, r2
   130b8:	bl	16cf0 <__assert_fail@plt+0x5bfc>
   130bc:	mov	r2, r0
   130c0:	ldr	r3, [pc, #-128]	; 13048 <__assert_fail@plt+0x1f54>
   130c4:	str	r2, [r3]
   130c8:	ldr	r3, [pc, #-136]	; 13048 <__assert_fail@plt+0x1f54>
   130cc:	ldr	r2, [r3]
   130d0:	ldr	r3, [pc, #-140]	; 1304c <__assert_fail@plt+0x1f58>
   130d4:	ldr	r3, [r3]
   130d8:	sub	r3, r3, #-268435455	; 0xf0000001
   130dc:	lsl	r3, r3, #4
   130e0:	add	ip, r2, r3
   130e4:	ldr	r3, [pc, #-164]	; 13048 <__assert_fail@plt+0x1f54>
   130e8:	ldr	r2, [r3]
   130ec:	ldr	r3, [pc, #-168]	; 1304c <__assert_fail@plt+0x1f58>
   130f0:	ldr	r3, [r3]
   130f4:	sub	r3, r3, #-268435455	; 0xf0000001
   130f8:	lsl	r3, r3, #4
   130fc:	add	r3, r2, r3
   13100:	mvn	r0, #0
   13104:	mvn	r1, #0
   13108:	strd	r0, [r3, #8]
   1310c:	ldrd	r2, [r3, #8]
   13110:	strd	r2, [ip]
   13114:	nop			; (mov r0, r0)
   13118:	sub	sp, fp, #8
   1311c:	pop	{r4, fp, pc}
   13120:	push	{fp}		; (str fp, [sp, #-4]!)
   13124:	add	fp, sp, #0
   13128:	sub	sp, sp, #12
   1312c:	str	r0, [fp, #-8]
   13130:	ldr	r2, [pc, #20]	; 1314c <__assert_fail@plt+0x2058>
   13134:	ldr	r3, [fp, #-8]
   13138:	str	r3, [r2]
   1313c:	nop			; (mov r0, r0)
   13140:	add	sp, fp, #0
   13144:	pop	{fp}		; (ldr fp, [sp], #4)
   13148:	bx	lr
   1314c:			; <UNDEFINED> instruction: 0x0002b1b0
   13150:	push	{fp}		; (str fp, [sp, #-4]!)
   13154:	add	fp, sp, #0
   13158:	sub	sp, sp, #12
   1315c:	mov	r3, r0
   13160:	strb	r3, [fp, #-5]
   13164:	ldr	r2, [pc, #20]	; 13180 <__assert_fail@plt+0x208c>
   13168:	ldrb	r3, [fp, #-5]
   1316c:	strb	r3, [r2]
   13170:	nop			; (mov r0, r0)
   13174:	add	sp, fp, #0
   13178:	pop	{fp}		; (ldr fp, [sp], #4)
   1317c:	bx	lr
   13180:			; <UNDEFINED> instruction: 0x0002b1b4
   13184:	push	{r4, fp, lr}
   13188:	add	fp, sp, #8
   1318c:	sub	sp, sp, #20
   13190:	ldr	r3, [pc, #256]	; 13298 <__assert_fail@plt+0x21a4>
   13194:	ldr	r3, [r3]
   13198:	mov	r0, r3
   1319c:	bl	17a8c <__assert_fail@plt+0x6998>
   131a0:	mov	r3, r0
   131a4:	cmp	r3, #0
   131a8:	beq	13260 <__assert_fail@plt+0x216c>
   131ac:	ldr	r3, [pc, #232]	; 1329c <__assert_fail@plt+0x21a8>
   131b0:	ldrb	r3, [r3]
   131b4:	eor	r3, r3, #1
   131b8:	uxtb	r3, r3
   131bc:	cmp	r3, #0
   131c0:	bne	131d8 <__assert_fail@plt+0x20e4>
   131c4:	bl	11004 <__errno_location@plt>
   131c8:	mov	r3, r0
   131cc:	ldr	r3, [r3]
   131d0:	cmp	r3, #32
   131d4:	beq	13260 <__assert_fail@plt+0x216c>
   131d8:	ldr	r0, [pc, #192]	; 132a0 <__assert_fail@plt+0x21ac>
   131dc:	bl	10fd4 <gettext@plt>
   131e0:	str	r0, [fp, #-16]
   131e4:	ldr	r3, [pc, #184]	; 132a4 <__assert_fail@plt+0x21b0>
   131e8:	ldr	r3, [r3]
   131ec:	cmp	r3, #0
   131f0:	beq	13234 <__assert_fail@plt+0x2140>
   131f4:	bl	11004 <__errno_location@plt>
   131f8:	mov	r3, r0
   131fc:	ldr	r4, [r3]
   13200:	ldr	r3, [pc, #156]	; 132a4 <__assert_fail@plt+0x21b0>
   13204:	ldr	r3, [r3]
   13208:	mov	r0, r3
   1320c:	bl	16178 <__assert_fail@plt+0x5084>
   13210:	mov	r2, r0
   13214:	ldr	r3, [fp, #-16]
   13218:	str	r3, [sp]
   1321c:	mov	r3, r2
   13220:	ldr	r2, [pc, #128]	; 132a8 <__assert_fail@plt+0x21b4>
   13224:	mov	r1, r4
   13228:	mov	r0, #0
   1322c:	bl	10f74 <error@plt>
   13230:	b	13250 <__assert_fail@plt+0x215c>
   13234:	bl	11004 <__errno_location@plt>
   13238:	mov	r3, r0
   1323c:	ldr	r1, [r3]
   13240:	ldr	r3, [fp, #-16]
   13244:	ldr	r2, [pc, #96]	; 132ac <__assert_fail@plt+0x21b8>
   13248:	mov	r0, #0
   1324c:	bl	10f74 <error@plt>
   13250:	ldr	r3, [pc, #88]	; 132b0 <__assert_fail@plt+0x21bc>
   13254:	ldr	r3, [r3]
   13258:	mov	r0, r3
   1325c:	bl	10ea8 <_exit@plt>
   13260:	ldr	r3, [pc, #76]	; 132b4 <__assert_fail@plt+0x21c0>
   13264:	ldr	r3, [r3]
   13268:	mov	r0, r3
   1326c:	bl	17a8c <__assert_fail@plt+0x6998>
   13270:	mov	r3, r0
   13274:	cmp	r3, #0
   13278:	beq	1328c <__assert_fail@plt+0x2198>
   1327c:	ldr	r3, [pc, #44]	; 132b0 <__assert_fail@plt+0x21bc>
   13280:	ldr	r3, [r3]
   13284:	mov	r0, r3
   13288:	bl	10ea8 <_exit@plt>
   1328c:	nop			; (mov r0, r0)
   13290:	sub	sp, fp, #8
   13294:	pop	{r4, fp, pc}
   13298:	andeq	fp, r2, r4, ror r1
   1329c:			; <UNDEFINED> instruction: 0x0002b1b4
   132a0:	andeq	r9, r1, r4, lsl #22
   132a4:			; <UNDEFINED> instruction: 0x0002b1b0
   132a8:	andeq	r9, r1, r0, lsl fp
   132ac:	andeq	r9, r1, r8, lsl fp
   132b0:	andeq	fp, r2, r0, lsl r1
   132b4:	andeq	fp, r2, r8, ror #2
   132b8:	push	{fp, lr}
   132bc:	add	fp, sp, #4
   132c0:	sub	sp, sp, #40	; 0x28
   132c4:	str	r0, [fp, #-16]
   132c8:	strd	r2, [fp, #-28]	; 0xffffffe4
   132cc:	ldr	r3, [fp, #12]
   132d0:	str	r3, [sp, #8]
   132d4:	ldrd	r2, [fp, #4]
   132d8:	strd	r2, [sp]
   132dc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   132e0:	ldr	r0, [fp, #-16]
   132e4:	bl	10e60 <posix_fadvise64@plt>
   132e8:	str	r0, [fp, #-8]
   132ec:	nop			; (mov r0, r0)
   132f0:	sub	sp, fp, #4
   132f4:	pop	{fp, pc}
   132f8:	push	{fp, lr}
   132fc:	add	fp, sp, #4
   13300:	sub	sp, sp, #24
   13304:	str	r0, [fp, #-8]
   13308:	str	r1, [fp, #-12]
   1330c:	ldr	r3, [fp, #-8]
   13310:	cmp	r3, #0
   13314:	beq	13348 <__assert_fail@plt+0x2254>
   13318:	ldr	r0, [fp, #-8]
   1331c:	bl	11034 <fileno@plt>
   13320:	mov	r1, r0
   13324:	ldr	r3, [fp, #-12]
   13328:	str	r3, [sp, #8]
   1332c:	mov	r2, #0
   13330:	mov	r3, #0
   13334:	strd	r2, [sp]
   13338:	mov	r2, #0
   1333c:	mov	r3, #0
   13340:	mov	r0, r1
   13344:	bl	132b8 <__assert_fail@plt+0x21c4>
   13348:	nop			; (mov r0, r0)
   1334c:	sub	sp, fp, #4
   13350:	pop	{fp, pc}
   13354:	push	{fp, lr}
   13358:	add	fp, sp, #4
   1335c:	sub	sp, sp, #32
   13360:	str	r0, [fp, #-24]	; 0xffffffe8
   13364:	mov	r3, #0
   13368:	str	r3, [fp, #-8]
   1336c:	mov	r3, #0
   13370:	str	r3, [fp, #-12]
   13374:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13378:	bl	11034 <fileno@plt>
   1337c:	str	r0, [fp, #-16]
   13380:	ldr	r3, [fp, #-16]
   13384:	cmp	r3, #0
   13388:	bge	1339c <__assert_fail@plt+0x22a8>
   1338c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13390:	bl	1104c <fclose@plt>
   13394:	mov	r3, r0
   13398:	b	13440 <__assert_fail@plt+0x234c>
   1339c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133a0:	bl	10f98 <__freading@plt>
   133a4:	mov	r3, r0
   133a8:	cmp	r3, #0
   133ac:	beq	133e8 <__assert_fail@plt+0x22f4>
   133b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133b4:	bl	11034 <fileno@plt>
   133b8:	mov	r1, r0
   133bc:	mov	r3, #1
   133c0:	str	r3, [sp]
   133c4:	mov	r2, #0
   133c8:	mov	r3, #0
   133cc:	mov	r0, r1
   133d0:	bl	10f2c <lseek64@plt>
   133d4:	mvn	r2, #0
   133d8:	mvn	r3, #0
   133dc:	cmp	r1, r3
   133e0:	cmpeq	r0, r2
   133e4:	beq	1340c <__assert_fail@plt+0x2318>
   133e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133ec:	bl	13494 <__assert_fail@plt+0x23a0>
   133f0:	mov	r3, r0
   133f4:	cmp	r3, #0
   133f8:	beq	1340c <__assert_fail@plt+0x2318>
   133fc:	bl	11004 <__errno_location@plt>
   13400:	mov	r3, r0
   13404:	ldr	r3, [r3]
   13408:	str	r3, [fp, #-8]
   1340c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13410:	bl	1104c <fclose@plt>
   13414:	str	r0, [fp, #-12]
   13418:	ldr	r3, [fp, #-8]
   1341c:	cmp	r3, #0
   13420:	beq	1343c <__assert_fail@plt+0x2348>
   13424:	bl	11004 <__errno_location@plt>
   13428:	mov	r2, r0
   1342c:	ldr	r3, [fp, #-8]
   13430:	str	r3, [r2]
   13434:	mvn	r3, #0
   13438:	str	r3, [fp, #-12]
   1343c:	ldr	r3, [fp, #-12]
   13440:	mov	r0, r3
   13444:	sub	sp, fp, #4
   13448:	pop	{fp, pc}
   1344c:	push	{fp, lr}
   13450:	add	fp, sp, #4
   13454:	sub	sp, sp, #16
   13458:	str	r0, [fp, #-8]
   1345c:	ldr	r3, [fp, #-8]
   13460:	ldr	r3, [r3]
   13464:	and	r3, r3, #256	; 0x100
   13468:	cmp	r3, #0
   1346c:	beq	13488 <__assert_fail@plt+0x2394>
   13470:	mov	r3, #1
   13474:	str	r3, [sp]
   13478:	mov	r2, #0
   1347c:	mov	r3, #0
   13480:	ldr	r0, [fp, #-8]
   13484:	bl	13580 <__assert_fail@plt+0x248c>
   13488:	nop			; (mov r0, r0)
   1348c:	sub	sp, fp, #4
   13490:	pop	{fp, pc}
   13494:	push	{fp, lr}
   13498:	add	fp, sp, #4
   1349c:	sub	sp, sp, #8
   134a0:	str	r0, [fp, #-8]
   134a4:	ldr	r3, [fp, #-8]
   134a8:	cmp	r3, #0
   134ac:	beq	134c4 <__assert_fail@plt+0x23d0>
   134b0:	ldr	r0, [fp, #-8]
   134b4:	bl	10f98 <__freading@plt>
   134b8:	mov	r3, r0
   134bc:	cmp	r3, #0
   134c0:	bne	134d4 <__assert_fail@plt+0x23e0>
   134c4:	ldr	r0, [fp, #-8]
   134c8:	bl	10e78 <fflush@plt>
   134cc:	mov	r3, r0
   134d0:	b	134e8 <__assert_fail@plt+0x23f4>
   134d4:	ldr	r0, [fp, #-8]
   134d8:	bl	1344c <__assert_fail@plt+0x2358>
   134dc:	ldr	r0, [fp, #-8]
   134e0:	bl	10e78 <fflush@plt>
   134e4:	mov	r3, r0
   134e8:	mov	r0, r3
   134ec:	sub	sp, fp, #4
   134f0:	pop	{fp, pc}
   134f4:	push	{r4, fp, lr}
   134f8:	add	fp, sp, #8
   134fc:	sub	sp, sp, #20
   13500:	str	r0, [fp, #-24]	; 0xffffffe8
   13504:	bl	11004 <__errno_location@plt>
   13508:	mov	r3, r0
   1350c:	ldr	r3, [r3]
   13510:	str	r3, [fp, #-20]	; 0xffffffec
   13514:	bl	11004 <__errno_location@plt>
   13518:	mov	r3, r0
   1351c:	ldr	r3, [r3]
   13520:	str	r3, [fp, #-16]
   13524:	bl	11004 <__errno_location@plt>
   13528:	mov	r2, r0
   1352c:	mov	r3, #0
   13530:	str	r3, [r2]
   13534:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13538:	bl	10e90 <free@plt>
   1353c:	bl	11004 <__errno_location@plt>
   13540:	mov	r4, r0
   13544:	bl	11004 <__errno_location@plt>
   13548:	mov	r3, r0
   1354c:	ldr	r3, [r3]
   13550:	cmp	r3, #0
   13554:	moveq	r3, #1
   13558:	movne	r3, #0
   1355c:	uxtb	r3, r3
   13560:	lsl	r3, r3, #2
   13564:	sub	r2, fp, #12
   13568:	add	r3, r2, r3
   1356c:	ldr	r3, [r3, #-8]
   13570:	str	r3, [r4]
   13574:	nop			; (mov r0, r0)
   13578:	sub	sp, fp, #8
   1357c:	pop	{r4, fp, pc}
   13580:	push	{fp, lr}
   13584:	add	fp, sp, #4
   13588:	sub	sp, sp, #32
   1358c:	str	r0, [fp, #-16]
   13590:	strd	r2, [fp, #-28]	; 0xffffffe4
   13594:	ldr	r3, [fp, #-16]
   13598:	ldr	r2, [r3, #8]
   1359c:	ldr	r3, [fp, #-16]
   135a0:	ldr	r3, [r3, #4]
   135a4:	cmp	r2, r3
   135a8:	bne	13640 <__assert_fail@plt+0x254c>
   135ac:	ldr	r3, [fp, #-16]
   135b0:	ldr	r2, [r3, #20]
   135b4:	ldr	r3, [fp, #-16]
   135b8:	ldr	r3, [r3, #16]
   135bc:	cmp	r2, r3
   135c0:	bne	13640 <__assert_fail@plt+0x254c>
   135c4:	ldr	r3, [fp, #-16]
   135c8:	ldr	r3, [r3, #36]	; 0x24
   135cc:	cmp	r3, #0
   135d0:	bne	13640 <__assert_fail@plt+0x254c>
   135d4:	ldr	r0, [fp, #-16]
   135d8:	bl	11034 <fileno@plt>
   135dc:	mov	r1, r0
   135e0:	ldr	r3, [fp, #4]
   135e4:	str	r3, [sp]
   135e8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   135ec:	mov	r0, r1
   135f0:	bl	10f2c <lseek64@plt>
   135f4:	strd	r0, [fp, #-12]
   135f8:	ldrd	r2, [fp, #-12]
   135fc:	mvn	r0, #0
   13600:	mvn	r1, #0
   13604:	cmp	r3, r1
   13608:	cmpeq	r2, r0
   1360c:	bne	13618 <__assert_fail@plt+0x2524>
   13610:	mvn	r3, #0
   13614:	b	13658 <__assert_fail@plt+0x2564>
   13618:	ldr	r3, [fp, #-16]
   1361c:	ldr	r3, [r3]
   13620:	bic	r2, r3, #16
   13624:	ldr	r3, [fp, #-16]
   13628:	str	r2, [r3]
   1362c:	ldr	r1, [fp, #-16]
   13630:	ldrd	r2, [fp, #-12]
   13634:	strd	r2, [r1, #80]	; 0x50
   13638:	mov	r3, #0
   1363c:	b	13658 <__assert_fail@plt+0x2564>
   13640:	ldr	r3, [fp, #4]
   13644:	str	r3, [sp]
   13648:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1364c:	ldr	r0, [fp, #-16]
   13650:	bl	11058 <fseeko64@plt>
   13654:	mov	r3, r0
   13658:	mov	r0, r3
   1365c:	sub	sp, fp, #4
   13660:	pop	{fp, pc}
   13664:	push	{fp, lr}
   13668:	add	fp, sp, #4
   1366c:	sub	sp, sp, #72	; 0x48
   13670:	str	r0, [fp, #-64]	; 0xffffffc0
   13674:	str	r1, [fp, #-68]	; 0xffffffbc
   13678:	str	r2, [fp, #-72]	; 0xffffffb8
   1367c:	str	r3, [fp, #-76]	; 0xffffffb4
   13680:	mvn	r3, #0
   13684:	str	r3, [fp, #-16]
   13688:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1368c:	ldr	r3, [r3]
   13690:	str	r3, [fp, #-20]	; 0xffffffec
   13694:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13698:	ldr	r3, [r3]
   1369c:	str	r3, [fp, #-24]	; 0xffffffe8
   136a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136a4:	cmp	r3, #0
   136a8:	bne	136e4 <__assert_fail@plt+0x25f0>
   136ac:	ldr	r3, [fp, #-76]	; 0xffffffb4
   136b0:	cmp	r3, #64	; 0x40
   136b4:	movcc	r3, r3
   136b8:	movcs	r3, #64	; 0x40
   136bc:	str	r3, [fp, #-24]	; 0xffffffe8
   136c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136c4:	bl	1787c <__assert_fail@plt+0x6788>
   136c8:	mov	r3, r0
   136cc:	str	r3, [fp, #-20]	; 0xffffffec
   136d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136d4:	cmp	r3, #0
   136d8:	bne	136e4 <__assert_fail@plt+0x25f0>
   136dc:	mvn	r3, #0
   136e0:	b	13ac8 <__assert_fail@plt+0x29d4>
   136e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   136e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   136ec:	cmp	r2, r3
   136f0:	bcc	13a74 <__assert_fail@plt+0x2980>
   136f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   136f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   136fc:	sub	r3, r2, r3
   13700:	str	r3, [fp, #-8]
   13704:	ldr	r2, [fp, #-20]	; 0xffffffec
   13708:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1370c:	add	r3, r2, r3
   13710:	str	r3, [fp, #-12]
   13714:	ldr	r3, [fp, #-8]
   13718:	cmp	r3, #0
   1371c:	bne	13730 <__assert_fail@plt+0x263c>
   13720:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13724:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13728:	cmp	r2, r3
   1372c:	bls	13a7c <__assert_fail@plt+0x2988>
   13730:	ldr	r3, [fp, #4]
   13734:	cmn	r3, #1
   13738:	bne	13748 <__assert_fail@plt+0x2654>
   1373c:	ldr	r3, [fp, #8]
   13740:	str	r3, [fp, #4]
   13744:	b	1375c <__assert_fail@plt+0x2668>
   13748:	ldr	r3, [fp, #8]
   1374c:	cmn	r3, #1
   13750:	bne	1375c <__assert_fail@plt+0x2668>
   13754:	ldr	r3, [fp, #4]
   13758:	str	r3, [fp, #8]
   1375c:	mov	r3, #0
   13760:	strb	r3, [fp, #-25]	; 0xffffffe7
   13764:	mov	r3, #0
   13768:	str	r3, [fp, #-32]	; 0xffffffe0
   1376c:	sub	r3, fp, #60	; 0x3c
   13770:	mov	r1, r3
   13774:	ldr	r0, [fp, #12]
   13778:	bl	17b64 <__assert_fail@plt+0x6a70>
   1377c:	str	r0, [fp, #-44]	; 0xffffffd4
   13780:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13784:	cmp	r3, #0
   13788:	beq	137dc <__assert_fail@plt+0x26e8>
   1378c:	ldr	r3, [fp, #4]
   13790:	cmn	r3, #1
   13794:	beq	13838 <__assert_fail@plt+0x2744>
   13798:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1379c:	ldr	r2, [fp, #8]
   137a0:	ldr	r1, [fp, #4]
   137a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   137a8:	bl	13ad4 <__assert_fail@plt+0x29e0>
   137ac:	str	r0, [fp, #-48]	; 0xffffffd0
   137b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137b4:	cmp	r3, #0
   137b8:	beq	13838 <__assert_fail@plt+0x2744>
   137bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   137c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137c4:	sub	r3, r2, r3
   137c8:	add	r3, r3, #1
   137cc:	str	r3, [fp, #-60]	; 0xffffffc4
   137d0:	mov	r3, #1
   137d4:	strb	r3, [fp, #-25]	; 0xffffffe7
   137d8:	b	13838 <__assert_fail@plt+0x2744>
   137dc:	ldr	r0, [fp, #12]
   137e0:	bl	10ef0 <getc_unlocked@plt>
   137e4:	str	r0, [fp, #-32]	; 0xffffffe0
   137e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   137ec:	cmn	r3, #1
   137f0:	bne	13808 <__assert_fail@plt+0x2714>
   137f4:	ldr	r2, [fp, #-12]
   137f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   137fc:	cmp	r2, r3
   13800:	bne	13a48 <__assert_fail@plt+0x2954>
   13804:	b	13a98 <__assert_fail@plt+0x29a4>
   13808:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1380c:	ldr	r3, [fp, #4]
   13810:	cmp	r2, r3
   13814:	beq	13828 <__assert_fail@plt+0x2734>
   13818:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1381c:	ldr	r3, [fp, #8]
   13820:	cmp	r2, r3
   13824:	bne	13830 <__assert_fail@plt+0x273c>
   13828:	mov	r3, #1
   1382c:	strb	r3, [fp, #-25]	; 0xffffffe7
   13830:	mov	r3, #1
   13834:	str	r3, [fp, #-60]	; 0xffffffc4
   13838:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1383c:	add	r2, r3, #1
   13840:	ldr	r3, [fp, #-8]
   13844:	cmp	r2, r3
   13848:	bls	13988 <__assert_fail@plt+0x2894>
   1384c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13850:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13854:	cmp	r2, r3
   13858:	bcs	13988 <__assert_fail@plt+0x2894>
   1385c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13860:	cmp	r3, #63	; 0x3f
   13864:	bhi	13874 <__assert_fail@plt+0x2780>
   13868:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1386c:	add	r3, r3, #64	; 0x40
   13870:	b	1387c <__assert_fail@plt+0x2788>
   13874:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13878:	lsl	r3, r3, #1
   1387c:	str	r3, [fp, #-36]	; 0xffffffdc
   13880:	ldr	r2, [fp, #-12]
   13884:	ldr	r3, [fp, #-20]	; 0xffffffec
   13888:	sub	r3, r2, r3
   1388c:	mov	r2, r3
   13890:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13894:	sub	r2, r3, r2
   13898:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1389c:	add	r3, r3, #1
   138a0:	cmp	r2, r3
   138a4:	bcs	138c8 <__assert_fail@plt+0x27d4>
   138a8:	ldr	r2, [fp, #-12]
   138ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   138b0:	sub	r3, r2, r3
   138b4:	mov	r2, r3
   138b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   138bc:	add	r3, r2, r3
   138c0:	add	r3, r3, #1
   138c4:	str	r3, [fp, #-36]	; 0xffffffdc
   138c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   138cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   138d0:	cmp	r2, r3
   138d4:	bcs	138e8 <__assert_fail@plt+0x27f4>
   138d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   138dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   138e0:	cmp	r2, r3
   138e4:	bls	138f0 <__assert_fail@plt+0x27fc>
   138e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   138ec:	str	r3, [fp, #-36]	; 0xffffffdc
   138f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   138f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   138f8:	sub	r3, r2, r3
   138fc:	cmp	r3, #0
   13900:	bge	13928 <__assert_fail@plt+0x2834>
   13904:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13908:	add	r3, r3, #-2147483648	; 0x80000000
   1390c:	str	r3, [fp, #-52]	; 0xffffffcc
   13910:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13914:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13918:	cmp	r2, r3
   1391c:	beq	13a84 <__assert_fail@plt+0x2990>
   13920:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13924:	str	r3, [fp, #-36]	; 0xffffffdc
   13928:	ldr	r2, [fp, #-12]
   1392c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13930:	sub	r3, r2, r3
   13934:	mov	r2, r3
   13938:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1393c:	sub	r3, r3, r2
   13940:	str	r3, [fp, #-8]
   13944:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13948:	ldr	r0, [fp, #-20]	; 0xffffffec
   1394c:	bl	17924 <__assert_fail@plt+0x6830>
   13950:	str	r0, [fp, #-56]	; 0xffffffc8
   13954:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13958:	cmp	r3, #0
   1395c:	beq	13a8c <__assert_fail@plt+0x2998>
   13960:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13964:	str	r3, [fp, #-20]	; 0xffffffec
   13968:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1396c:	str	r3, [fp, #-24]	; 0xffffffe8
   13970:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13974:	ldr	r3, [fp, #-8]
   13978:	sub	r3, r2, r3
   1397c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13980:	add	r3, r2, r3
   13984:	str	r3, [fp, #-12]
   13988:	ldr	r3, [fp, #-8]
   1398c:	cmp	r3, #1
   13990:	bls	13a08 <__assert_fail@plt+0x2914>
   13994:	ldr	r3, [fp, #-8]
   13998:	sub	r3, r3, #1
   1399c:	str	r3, [fp, #-40]	; 0xffffffd8
   139a0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   139a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139a8:	cmp	r2, r3
   139ac:	bcs	139b8 <__assert_fail@plt+0x28c4>
   139b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139b4:	str	r3, [fp, #-40]	; 0xffffffd8
   139b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   139bc:	cmp	r3, #0
   139c0:	beq	139d8 <__assert_fail@plt+0x28e4>
   139c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   139c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   139cc:	ldr	r0, [fp, #-12]
   139d0:	bl	10eb4 <memcpy@plt>
   139d4:	b	139e8 <__assert_fail@plt+0x28f4>
   139d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   139dc:	uxtb	r2, r3
   139e0:	ldr	r3, [fp, #-12]
   139e4:	strb	r2, [r3]
   139e8:	ldr	r2, [fp, #-12]
   139ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139f0:	add	r3, r2, r3
   139f4:	str	r3, [fp, #-12]
   139f8:	ldr	r2, [fp, #-8]
   139fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a00:	sub	r3, r2, r3
   13a04:	str	r3, [fp, #-8]
   13a08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a0c:	cmp	r3, #0
   13a10:	beq	13a30 <__assert_fail@plt+0x293c>
   13a14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13a18:	mov	r1, r3
   13a1c:	ldr	r0, [fp, #12]
   13a20:	bl	17c28 <__assert_fail@plt+0x6b34>
   13a24:	mov	r3, r0
   13a28:	cmp	r3, #0
   13a2c:	bne	13a94 <__assert_fail@plt+0x29a0>
   13a30:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13a34:	eor	r3, r3, #1
   13a38:	uxtb	r3, r3
   13a3c:	cmp	r3, #0
   13a40:	bne	13764 <__assert_fail@plt+0x2670>
   13a44:	b	13a4c <__assert_fail@plt+0x2958>
   13a48:	nop			; (mov r0, r0)
   13a4c:	ldr	r3, [fp, #-12]
   13a50:	mov	r2, #0
   13a54:	strb	r2, [r3]
   13a58:	ldr	r3, [fp, #-12]
   13a5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13a60:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13a64:	add	r2, r1, r2
   13a68:	sub	r3, r3, r2
   13a6c:	str	r3, [fp, #-16]
   13a70:	b	13a98 <__assert_fail@plt+0x29a4>
   13a74:	nop			; (mov r0, r0)
   13a78:	b	13a98 <__assert_fail@plt+0x29a4>
   13a7c:	nop			; (mov r0, r0)
   13a80:	b	13a98 <__assert_fail@plt+0x29a4>
   13a84:	nop			; (mov r0, r0)
   13a88:	b	13a98 <__assert_fail@plt+0x29a4>
   13a8c:	nop			; (mov r0, r0)
   13a90:	b	13a98 <__assert_fail@plt+0x29a4>
   13a94:	nop			; (mov r0, r0)
   13a98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13a9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13aa0:	str	r2, [r3]
   13aa4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13aa8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13aac:	str	r2, [r3]
   13ab0:	ldr	r3, [fp, #-16]
   13ab4:	cmp	r3, #0
   13ab8:	beq	13ac4 <__assert_fail@plt+0x29d0>
   13abc:	ldr	r3, [fp, #-16]
   13ac0:	b	13ac8 <__assert_fail@plt+0x29d4>
   13ac4:	mvn	r3, #0
   13ac8:	mov	r0, r3
   13acc:	sub	sp, fp, #4
   13ad0:	pop	{fp, pc}
   13ad4:	push	{fp, lr}
   13ad8:	add	fp, sp, #4
   13adc:	sub	sp, sp, #56	; 0x38
   13ae0:	str	r0, [fp, #-48]	; 0xffffffd0
   13ae4:	str	r1, [fp, #-52]	; 0xffffffcc
   13ae8:	str	r2, [fp, #-56]	; 0xffffffc8
   13aec:	str	r3, [fp, #-60]	; 0xffffffc4
   13af0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13af4:	strb	r3, [fp, #-17]	; 0xffffffef
   13af8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13afc:	strb	r3, [fp, #-18]	; 0xffffffee
   13b00:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13b04:	ldrb	r3, [fp, #-18]	; 0xffffffee
   13b08:	cmp	r2, r3
   13b0c:	bne	13b2c <__assert_fail@plt+0x2a38>
   13b10:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13b14:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13b18:	mov	r1, r3
   13b1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b20:	bl	11040 <memchr@plt>
   13b24:	mov	r3, r0
   13b28:	b	13d08 <__assert_fail@plt+0x2c14>
   13b2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b30:	str	r3, [fp, #-12]
   13b34:	b	13b88 <__assert_fail@plt+0x2a94>
   13b38:	ldr	r3, [fp, #-12]
   13b3c:	str	r3, [fp, #-8]
   13b40:	ldr	r3, [fp, #-8]
   13b44:	ldrb	r3, [r3]
   13b48:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13b4c:	cmp	r2, r3
   13b50:	beq	13b68 <__assert_fail@plt+0x2a74>
   13b54:	ldr	r3, [fp, #-8]
   13b58:	ldrb	r3, [r3]
   13b5c:	ldrb	r2, [fp, #-18]	; 0xffffffee
   13b60:	cmp	r2, r3
   13b64:	bne	13b70 <__assert_fail@plt+0x2a7c>
   13b68:	ldr	r3, [fp, #-12]
   13b6c:	b	13d08 <__assert_fail@plt+0x2c14>
   13b70:	ldr	r3, [fp, #-8]
   13b74:	add	r3, r3, #1
   13b78:	str	r3, [fp, #-12]
   13b7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13b80:	sub	r3, r3, #1
   13b84:	str	r3, [fp, #-60]	; 0xffffffc4
   13b88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13b8c:	cmp	r3, #0
   13b90:	beq	13ba4 <__assert_fail@plt+0x2ab0>
   13b94:	ldr	r3, [fp, #-12]
   13b98:	and	r3, r3, #3
   13b9c:	cmp	r3, #0
   13ba0:	bne	13b38 <__assert_fail@plt+0x2a44>
   13ba4:	ldr	r3, [fp, #-12]
   13ba8:	str	r3, [fp, #-16]
   13bac:	ldr	r3, [pc, #352]	; 13d14 <__assert_fail@plt+0x2c20>
   13bb0:	str	r3, [fp, #-24]	; 0xffffffe8
   13bb4:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13bb8:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13bbc:	lsl	r3, r3, #8
   13bc0:	orr	r3, r2, r3
   13bc4:	str	r3, [fp, #-28]	; 0xffffffe4
   13bc8:	ldrb	r2, [fp, #-18]	; 0xffffffee
   13bcc:	ldrb	r3, [fp, #-18]	; 0xffffffee
   13bd0:	lsl	r3, r3, #8
   13bd4:	orr	r3, r2, r3
   13bd8:	str	r3, [fp, #-32]	; 0xffffffe0
   13bdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13be0:	lsl	r3, r3, #16
   13be4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13be8:	orr	r3, r2, r3
   13bec:	str	r3, [fp, #-28]	; 0xffffffe4
   13bf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13bf4:	lsl	r3, r3, #16
   13bf8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bfc:	orr	r3, r2, r3
   13c00:	str	r3, [fp, #-32]	; 0xffffffe0
   13c04:	b	13c90 <__assert_fail@plt+0x2b9c>
   13c08:	ldr	r3, [fp, #-16]
   13c0c:	ldr	r2, [r3]
   13c10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c14:	eor	r3, r3, r2
   13c18:	str	r3, [fp, #-36]	; 0xffffffdc
   13c1c:	ldr	r3, [fp, #-16]
   13c20:	ldr	r2, [r3]
   13c24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13c28:	eor	r3, r3, r2
   13c2c:	str	r3, [fp, #-40]	; 0xffffffd8
   13c30:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c38:	sub	r2, r2, r3
   13c3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c40:	mvn	r3, r3
   13c44:	and	r2, r2, r3
   13c48:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c50:	sub	r1, r1, r3
   13c54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c58:	mvn	r3, r3
   13c5c:	and	r3, r3, r1
   13c60:	orr	r2, r2, r3
   13c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c68:	lsl	r3, r3, #7
   13c6c:	and	r3, r3, r2
   13c70:	cmp	r3, #0
   13c74:	bne	13ca0 <__assert_fail@plt+0x2bac>
   13c78:	ldr	r3, [fp, #-16]
   13c7c:	add	r3, r3, #4
   13c80:	str	r3, [fp, #-16]
   13c84:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13c88:	sub	r3, r3, #4
   13c8c:	str	r3, [fp, #-60]	; 0xffffffc4
   13c90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13c94:	cmp	r3, #3
   13c98:	bhi	13c08 <__assert_fail@plt+0x2b14>
   13c9c:	b	13ca4 <__assert_fail@plt+0x2bb0>
   13ca0:	nop			; (mov r0, r0)
   13ca4:	ldr	r3, [fp, #-16]
   13ca8:	str	r3, [fp, #-8]
   13cac:	b	13cf8 <__assert_fail@plt+0x2c04>
   13cb0:	ldr	r3, [fp, #-8]
   13cb4:	ldrb	r3, [r3]
   13cb8:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13cbc:	cmp	r2, r3
   13cc0:	beq	13cd8 <__assert_fail@plt+0x2be4>
   13cc4:	ldr	r3, [fp, #-8]
   13cc8:	ldrb	r3, [r3]
   13ccc:	ldrb	r2, [fp, #-18]	; 0xffffffee
   13cd0:	cmp	r2, r3
   13cd4:	bne	13ce0 <__assert_fail@plt+0x2bec>
   13cd8:	ldr	r3, [fp, #-8]
   13cdc:	b	13d08 <__assert_fail@plt+0x2c14>
   13ce0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ce4:	sub	r3, r3, #1
   13ce8:	str	r3, [fp, #-60]	; 0xffffffc4
   13cec:	ldr	r3, [fp, #-8]
   13cf0:	add	r3, r3, #1
   13cf4:	str	r3, [fp, #-8]
   13cf8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13cfc:	cmp	r3, #0
   13d00:	bne	13cb0 <__assert_fail@plt+0x2bbc>
   13d04:	mov	r3, #0
   13d08:	mov	r0, r3
   13d0c:	sub	sp, fp, #4
   13d10:	pop	{fp, pc}
   13d14:	tsteq	r1, r1, lsl #2
   13d18:	push	{fp, lr}
   13d1c:	add	fp, sp, #4
   13d20:	sub	sp, sp, #16
   13d24:	str	r0, [fp, #-16]
   13d28:	ldr	r3, [fp, #-16]
   13d2c:	cmp	r3, #0
   13d30:	bne	13d50 <__assert_fail@plt+0x2c5c>
   13d34:	ldr	r3, [pc, #220]	; 13e18 <__assert_fail@plt+0x2d24>
   13d38:	ldr	r3, [r3]
   13d3c:	mov	r2, #55	; 0x37
   13d40:	mov	r1, #1
   13d44:	ldr	r0, [pc, #208]	; 13e1c <__assert_fail@plt+0x2d28>
   13d48:	bl	10f20 <fwrite@plt>
   13d4c:	bl	110c4 <abort@plt>
   13d50:	mov	r1, #47	; 0x2f
   13d54:	ldr	r0, [fp, #-16]
   13d58:	bl	11070 <strrchr@plt>
   13d5c:	str	r0, [fp, #-8]
   13d60:	ldr	r3, [fp, #-8]
   13d64:	cmp	r3, #0
   13d68:	beq	13d78 <__assert_fail@plt+0x2c84>
   13d6c:	ldr	r3, [fp, #-8]
   13d70:	add	r3, r3, #1
   13d74:	b	13d7c <__assert_fail@plt+0x2c88>
   13d78:	ldr	r3, [fp, #-16]
   13d7c:	str	r3, [fp, #-12]
   13d80:	ldr	r2, [fp, #-12]
   13d84:	ldr	r3, [fp, #-16]
   13d88:	sub	r3, r2, r3
   13d8c:	cmp	r3, #6
   13d90:	ble	13df4 <__assert_fail@plt+0x2d00>
   13d94:	ldr	r3, [fp, #-12]
   13d98:	sub	r3, r3, #7
   13d9c:	mov	r2, #7
   13da0:	ldr	r1, [pc, #120]	; 13e20 <__assert_fail@plt+0x2d2c>
   13da4:	mov	r0, r3
   13da8:	bl	110b8 <strncmp@plt>
   13dac:	mov	r3, r0
   13db0:	cmp	r3, #0
   13db4:	bne	13df4 <__assert_fail@plt+0x2d00>
   13db8:	ldr	r3, [fp, #-12]
   13dbc:	str	r3, [fp, #-16]
   13dc0:	mov	r2, #3
   13dc4:	ldr	r1, [pc, #88]	; 13e24 <__assert_fail@plt+0x2d30>
   13dc8:	ldr	r0, [fp, #-12]
   13dcc:	bl	110b8 <strncmp@plt>
   13dd0:	mov	r3, r0
   13dd4:	cmp	r3, #0
   13dd8:	bne	13df4 <__assert_fail@plt+0x2d00>
   13ddc:	ldr	r3, [fp, #-12]
   13de0:	add	r3, r3, #3
   13de4:	str	r3, [fp, #-16]
   13de8:	ldr	r2, [pc, #56]	; 13e28 <__assert_fail@plt+0x2d34>
   13dec:	ldr	r3, [fp, #-16]
   13df0:	str	r3, [r2]
   13df4:	ldr	r2, [pc, #48]	; 13e2c <__assert_fail@plt+0x2d38>
   13df8:	ldr	r3, [fp, #-16]
   13dfc:	str	r3, [r2]
   13e00:	ldr	r2, [pc, #40]	; 13e30 <__assert_fail@plt+0x2d3c>
   13e04:	ldr	r3, [fp, #-16]
   13e08:	str	r3, [r2]
   13e0c:	nop			; (mov r0, r0)
   13e10:	sub	sp, fp, #4
   13e14:	pop	{fp, pc}
   13e18:	andeq	fp, r2, r8, ror #2
   13e1c:	andeq	r9, r1, ip, lsl fp
   13e20:	andeq	r9, r1, r4, asr fp
   13e24:	andeq	r9, r1, ip, asr fp
   13e28:	andeq	fp, r2, r8, asr r1
   13e2c:			; <UNDEFINED> instruction: 0x0002b1b8
   13e30:	andeq	fp, r2, ip, asr r1
   13e34:	push	{fp, lr}
   13e38:	add	fp, sp, #4
   13e3c:	sub	sp, sp, #16
   13e40:	str	r0, [fp, #-16]
   13e44:	bl	11004 <__errno_location@plt>
   13e48:	mov	r3, r0
   13e4c:	ldr	r3, [r3]
   13e50:	str	r3, [fp, #-8]
   13e54:	ldr	r3, [fp, #-16]
   13e58:	cmp	r3, #0
   13e5c:	beq	13e68 <__assert_fail@plt+0x2d74>
   13e60:	ldr	r3, [fp, #-16]
   13e64:	b	13e6c <__assert_fail@plt+0x2d78>
   13e68:	ldr	r3, [pc, #48]	; 13ea0 <__assert_fail@plt+0x2dac>
   13e6c:	mov	r1, #48	; 0x30
   13e70:	mov	r0, r3
   13e74:	bl	17658 <__assert_fail@plt+0x6564>
   13e78:	mov	r3, r0
   13e7c:	str	r3, [fp, #-12]
   13e80:	bl	11004 <__errno_location@plt>
   13e84:	mov	r2, r0
   13e88:	ldr	r3, [fp, #-8]
   13e8c:	str	r3, [r2]
   13e90:	ldr	r3, [fp, #-12]
   13e94:	mov	r0, r3
   13e98:	sub	sp, fp, #4
   13e9c:	pop	{fp, pc}
   13ea0:			; <UNDEFINED> instruction: 0x0002b1bc
   13ea4:	push	{fp}		; (str fp, [sp, #-4]!)
   13ea8:	add	fp, sp, #0
   13eac:	sub	sp, sp, #12
   13eb0:	str	r0, [fp, #-8]
   13eb4:	ldr	r3, [fp, #-8]
   13eb8:	cmp	r3, #0
   13ebc:	beq	13ec8 <__assert_fail@plt+0x2dd4>
   13ec0:	ldr	r3, [fp, #-8]
   13ec4:	b	13ecc <__assert_fail@plt+0x2dd8>
   13ec8:	ldr	r3, [pc, #16]	; 13ee0 <__assert_fail@plt+0x2dec>
   13ecc:	ldr	r3, [r3]
   13ed0:	mov	r0, r3
   13ed4:	add	sp, fp, #0
   13ed8:	pop	{fp}		; (ldr fp, [sp], #4)
   13edc:	bx	lr
   13ee0:			; <UNDEFINED> instruction: 0x0002b1bc
   13ee4:	push	{fp}		; (str fp, [sp, #-4]!)
   13ee8:	add	fp, sp, #0
   13eec:	sub	sp, sp, #12
   13ef0:	str	r0, [fp, #-8]
   13ef4:	str	r1, [fp, #-12]
   13ef8:	ldr	r3, [fp, #-8]
   13efc:	cmp	r3, #0
   13f00:	beq	13f0c <__assert_fail@plt+0x2e18>
   13f04:	ldr	r3, [fp, #-8]
   13f08:	b	13f10 <__assert_fail@plt+0x2e1c>
   13f0c:	ldr	r3, [pc, #20]	; 13f28 <__assert_fail@plt+0x2e34>
   13f10:	ldr	r2, [fp, #-12]
   13f14:	str	r2, [r3]
   13f18:	nop			; (mov r0, r0)
   13f1c:	add	sp, fp, #0
   13f20:	pop	{fp}		; (ldr fp, [sp], #4)
   13f24:	bx	lr
   13f28:			; <UNDEFINED> instruction: 0x0002b1bc
   13f2c:	push	{fp}		; (str fp, [sp, #-4]!)
   13f30:	add	fp, sp, #0
   13f34:	sub	sp, sp, #36	; 0x24
   13f38:	str	r0, [fp, #-24]	; 0xffffffe8
   13f3c:	mov	r3, r1
   13f40:	str	r2, [fp, #-32]	; 0xffffffe0
   13f44:	strb	r3, [fp, #-25]	; 0xffffffe7
   13f48:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13f4c:	strb	r3, [fp, #-5]
   13f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f54:	cmp	r3, #0
   13f58:	beq	13f64 <__assert_fail@plt+0x2e70>
   13f5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f60:	b	13f68 <__assert_fail@plt+0x2e74>
   13f64:	ldr	r3, [pc, #124]	; 13fe8 <__assert_fail@plt+0x2ef4>
   13f68:	add	r2, r3, #8
   13f6c:	ldrb	r3, [fp, #-5]
   13f70:	lsr	r3, r3, #5
   13f74:	uxtb	r3, r3
   13f78:	lsl	r3, r3, #2
   13f7c:	add	r3, r2, r3
   13f80:	str	r3, [fp, #-12]
   13f84:	ldrb	r3, [fp, #-5]
   13f88:	and	r3, r3, #31
   13f8c:	str	r3, [fp, #-16]
   13f90:	ldr	r3, [fp, #-12]
   13f94:	ldr	r2, [r3]
   13f98:	ldr	r3, [fp, #-16]
   13f9c:	lsr	r3, r2, r3
   13fa0:	and	r3, r3, #1
   13fa4:	str	r3, [fp, #-20]	; 0xffffffec
   13fa8:	ldr	r3, [fp, #-12]
   13fac:	ldr	r3, [r3]
   13fb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13fb4:	and	r1, r2, #1
   13fb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fbc:	eor	r1, r1, r2
   13fc0:	ldr	r2, [fp, #-16]
   13fc4:	lsl	r2, r1, r2
   13fc8:	eor	r2, r2, r3
   13fcc:	ldr	r3, [fp, #-12]
   13fd0:	str	r2, [r3]
   13fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fd8:	mov	r0, r3
   13fdc:	add	sp, fp, #0
   13fe0:	pop	{fp}		; (ldr fp, [sp], #4)
   13fe4:	bx	lr
   13fe8:			; <UNDEFINED> instruction: 0x0002b1bc
   13fec:	push	{fp}		; (str fp, [sp, #-4]!)
   13ff0:	add	fp, sp, #0
   13ff4:	sub	sp, sp, #20
   13ff8:	str	r0, [fp, #-16]
   13ffc:	str	r1, [fp, #-20]	; 0xffffffec
   14000:	ldr	r3, [fp, #-16]
   14004:	cmp	r3, #0
   14008:	bne	14014 <__assert_fail@plt+0x2f20>
   1400c:	ldr	r3, [pc, #44]	; 14040 <__assert_fail@plt+0x2f4c>
   14010:	str	r3, [fp, #-16]
   14014:	ldr	r3, [fp, #-16]
   14018:	ldr	r3, [r3, #4]
   1401c:	str	r3, [fp, #-8]
   14020:	ldr	r3, [fp, #-16]
   14024:	ldr	r2, [fp, #-20]	; 0xffffffec
   14028:	str	r2, [r3, #4]
   1402c:	ldr	r3, [fp, #-8]
   14030:	mov	r0, r3
   14034:	add	sp, fp, #0
   14038:	pop	{fp}		; (ldr fp, [sp], #4)
   1403c:	bx	lr
   14040:			; <UNDEFINED> instruction: 0x0002b1bc
   14044:	push	{fp, lr}
   14048:	add	fp, sp, #4
   1404c:	sub	sp, sp, #16
   14050:	str	r0, [fp, #-8]
   14054:	str	r1, [fp, #-12]
   14058:	str	r2, [fp, #-16]
   1405c:	ldr	r3, [fp, #-8]
   14060:	cmp	r3, #0
   14064:	bne	14070 <__assert_fail@plt+0x2f7c>
   14068:	ldr	r3, [pc, #76]	; 140bc <__assert_fail@plt+0x2fc8>
   1406c:	str	r3, [fp, #-8]
   14070:	ldr	r3, [fp, #-8]
   14074:	mov	r2, #10
   14078:	str	r2, [r3]
   1407c:	ldr	r3, [fp, #-12]
   14080:	cmp	r3, #0
   14084:	beq	14094 <__assert_fail@plt+0x2fa0>
   14088:	ldr	r3, [fp, #-16]
   1408c:	cmp	r3, #0
   14090:	bne	14098 <__assert_fail@plt+0x2fa4>
   14094:	bl	110c4 <abort@plt>
   14098:	ldr	r3, [fp, #-8]
   1409c:	ldr	r2, [fp, #-12]
   140a0:	str	r2, [r3, #40]	; 0x28
   140a4:	ldr	r3, [fp, #-8]
   140a8:	ldr	r2, [fp, #-16]
   140ac:	str	r2, [r3, #44]	; 0x2c
   140b0:	nop			; (mov r0, r0)
   140b4:	sub	sp, fp, #4
   140b8:	pop	{fp, pc}
   140bc:			; <UNDEFINED> instruction: 0x0002b1bc
   140c0:	push	{fp, lr}
   140c4:	add	fp, sp, #4
   140c8:	sub	sp, sp, #56	; 0x38
   140cc:	str	r0, [fp, #-56]	; 0xffffffc8
   140d0:	str	r1, [fp, #-60]	; 0xffffffc4
   140d4:	sub	r3, fp, #52	; 0x34
   140d8:	mov	r2, #48	; 0x30
   140dc:	mov	r1, #0
   140e0:	mov	r0, r3
   140e4:	bl	1101c <memset@plt>
   140e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   140ec:	cmp	r3, #10
   140f0:	bne	140f8 <__assert_fail@plt+0x3004>
   140f4:	bl	110c4 <abort@plt>
   140f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   140fc:	str	r3, [fp, #-52]	; 0xffffffcc
   14100:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14104:	mov	lr, r3
   14108:	sub	ip, fp, #52	; 0x34
   1410c:	ldm	ip!, {r0, r1, r2, r3}
   14110:	stmia	lr!, {r0, r1, r2, r3}
   14114:	ldm	ip!, {r0, r1, r2, r3}
   14118:	stmia	lr!, {r0, r1, r2, r3}
   1411c:	ldm	ip, {r0, r1, r2, r3}
   14120:	stm	lr, {r0, r1, r2, r3}
   14124:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14128:	sub	sp, fp, #4
   1412c:	pop	{fp, pc}
   14130:	push	{fp, lr}
   14134:	add	fp, sp, #4
   14138:	sub	sp, sp, #16
   1413c:	str	r0, [fp, #-16]
   14140:	str	r1, [fp, #-20]	; 0xffffffec
   14144:	ldr	r0, [fp, #-16]
   14148:	bl	10fd4 <gettext@plt>
   1414c:	str	r0, [fp, #-8]
   14150:	ldr	r2, [fp, #-8]
   14154:	ldr	r3, [fp, #-16]
   14158:	cmp	r2, r3
   1415c:	beq	14168 <__assert_fail@plt+0x3074>
   14160:	ldr	r3, [fp, #-8]
   14164:	b	141f8 <__assert_fail@plt+0x3104>
   14168:	bl	1804c <__assert_fail@plt+0x6f58>
   1416c:	str	r0, [fp, #-12]
   14170:	ldr	r1, [pc, #140]	; 14204 <__assert_fail@plt+0x3110>
   14174:	ldr	r0, [fp, #-12]
   14178:	bl	179f4 <__assert_fail@plt+0x6900>
   1417c:	mov	r3, r0
   14180:	cmp	r3, #0
   14184:	bne	141a8 <__assert_fail@plt+0x30b4>
   14188:	ldr	r3, [fp, #-16]
   1418c:	ldrb	r3, [r3]
   14190:	cmp	r3, #96	; 0x60
   14194:	bne	141a0 <__assert_fail@plt+0x30ac>
   14198:	ldr	r3, [pc, #104]	; 14208 <__assert_fail@plt+0x3114>
   1419c:	b	141f8 <__assert_fail@plt+0x3104>
   141a0:	ldr	r3, [pc, #100]	; 1420c <__assert_fail@plt+0x3118>
   141a4:	b	141f8 <__assert_fail@plt+0x3104>
   141a8:	ldr	r1, [pc, #96]	; 14210 <__assert_fail@plt+0x311c>
   141ac:	ldr	r0, [fp, #-12]
   141b0:	bl	179f4 <__assert_fail@plt+0x6900>
   141b4:	mov	r3, r0
   141b8:	cmp	r3, #0
   141bc:	bne	141e0 <__assert_fail@plt+0x30ec>
   141c0:	ldr	r3, [fp, #-16]
   141c4:	ldrb	r3, [r3]
   141c8:	cmp	r3, #96	; 0x60
   141cc:	bne	141d8 <__assert_fail@plt+0x30e4>
   141d0:	ldr	r3, [pc, #60]	; 14214 <__assert_fail@plt+0x3120>
   141d4:	b	141f8 <__assert_fail@plt+0x3104>
   141d8:	ldr	r3, [pc, #56]	; 14218 <__assert_fail@plt+0x3124>
   141dc:	b	141f8 <__assert_fail@plt+0x3104>
   141e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141e4:	cmp	r3, #9
   141e8:	bne	141f4 <__assert_fail@plt+0x3100>
   141ec:	ldr	r3, [pc, #40]	; 1421c <__assert_fail@plt+0x3128>
   141f0:	b	141f8 <__assert_fail@plt+0x3104>
   141f4:	ldr	r3, [pc, #36]	; 14220 <__assert_fail@plt+0x312c>
   141f8:	mov	r0, r3
   141fc:	sub	sp, fp, #4
   14200:	pop	{fp, pc}
   14204:	andeq	r9, r1, ip, lsl ip
   14208:	andeq	r9, r1, r4, lsr #24
   1420c:	andeq	r9, r1, r8, lsr #24
   14210:	andeq	r9, r1, ip, lsr #24
   14214:	andeq	r9, r1, r4, lsr ip
   14218:	andeq	r9, r1, r8, lsr ip
   1421c:	andeq	r9, r1, ip, lsr ip
   14220:	andeq	r9, r1, r0, asr #24
   14224:	push	{r4, fp, lr}
   14228:	add	fp, sp, #8
   1422c:	sub	sp, sp, #116	; 0x74
   14230:	str	r0, [fp, #-88]	; 0xffffffa8
   14234:	str	r1, [fp, #-92]	; 0xffffffa4
   14238:	str	r2, [fp, #-96]	; 0xffffffa0
   1423c:	str	r3, [fp, #-100]	; 0xffffff9c
   14240:	mov	r3, #0
   14244:	str	r3, [fp, #-20]	; 0xffffffec
   14248:	mov	r3, #0
   1424c:	str	r3, [fp, #-24]	; 0xffffffe8
   14250:	mov	r3, #0
   14254:	str	r3, [fp, #-28]	; 0xffffffe4
   14258:	mov	r3, #0
   1425c:	str	r3, [fp, #-32]	; 0xffffffe0
   14260:	mov	r3, #0
   14264:	strb	r3, [fp, #-33]	; 0xffffffdf
   14268:	bl	10f38 <__ctype_get_mb_cur_max@plt>
   1426c:	mov	r3, r0
   14270:	cmp	r3, #1
   14274:	moveq	r3, #1
   14278:	movne	r3, #0
   1427c:	strb	r3, [fp, #-57]	; 0xffffffc7
   14280:	ldr	r3, [fp, #8]
   14284:	and	r3, r3, #2
   14288:	cmp	r3, #0
   1428c:	movne	r3, #1
   14290:	moveq	r3, #0
   14294:	strb	r3, [fp, #-34]	; 0xffffffde
   14298:	mov	r3, #0
   1429c:	strb	r3, [fp, #-35]	; 0xffffffdd
   142a0:	mov	r3, #0
   142a4:	strb	r3, [fp, #-36]	; 0xffffffdc
   142a8:	mov	r3, #1
   142ac:	strb	r3, [fp, #-37]	; 0xffffffdb
   142b0:	ldr	r3, [fp, #4]
   142b4:	cmp	r3, #10
   142b8:	ldrls	pc, [pc, r3, lsl #2]
   142bc:	b	144c4 <__assert_fail@plt+0x33d0>
   142c0:			; <UNDEFINED> instruction: 0x000144b8
   142c4:	andeq	r4, r1, r4, lsr r4
   142c8:	andeq	r4, r1, r8, asr r4
   142cc:	andeq	r4, r1, ip, lsr #8
   142d0:	andeq	r4, r1, ip, lsr r4
   142d4:	strdeq	r4, [r1], -ip
   142d8:	andeq	r4, r1, ip, ror #5
   142dc:	andeq	r4, r1, ip, asr r3
   142e0:	andeq	r4, r1, r0, ror r3
   142e4:	andeq	r4, r1, r0, ror r3
   142e8:	andeq	r4, r1, r0, ror r3
   142ec:	mov	r3, #5
   142f0:	str	r3, [fp, #4]
   142f4:	mov	r3, #1
   142f8:	strb	r3, [fp, #-34]	; 0xffffffde
   142fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14300:	eor	r3, r3, #1
   14304:	uxtb	r3, r3
   14308:	cmp	r3, #0
   1430c:	beq	14340 <__assert_fail@plt+0x324c>
   14310:	ldr	r2, [fp, #-20]	; 0xffffffec
   14314:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14318:	cmp	r2, r3
   1431c:	bcs	14334 <__assert_fail@plt+0x3240>
   14320:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14324:	ldr	r3, [fp, #-20]	; 0xffffffec
   14328:	add	r3, r2, r3
   1432c:	mov	r2, #34	; 0x22
   14330:	strb	r2, [r3]
   14334:	ldr	r3, [fp, #-20]	; 0xffffffec
   14338:	add	r3, r3, #1
   1433c:	str	r3, [fp, #-20]	; 0xffffffec
   14340:	mov	r3, #1
   14344:	strb	r3, [fp, #-33]	; 0xffffffdf
   14348:	ldr	r3, [pc, #3872]	; 15270 <__assert_fail@plt+0x417c>
   1434c:	str	r3, [fp, #-28]	; 0xffffffe4
   14350:	mov	r3, #1
   14354:	str	r3, [fp, #-32]	; 0xffffffe0
   14358:	b	144c8 <__assert_fail@plt+0x33d4>
   1435c:	mov	r3, #1
   14360:	strb	r3, [fp, #-33]	; 0xffffffdf
   14364:	mov	r3, #0
   14368:	strb	r3, [fp, #-34]	; 0xffffffde
   1436c:	b	144c8 <__assert_fail@plt+0x33d4>
   14370:	ldr	r3, [fp, #4]
   14374:	cmp	r3, #10
   14378:	beq	1439c <__assert_fail@plt+0x32a8>
   1437c:	ldr	r1, [fp, #4]
   14380:	ldr	r0, [pc, #3820]	; 15274 <__assert_fail@plt+0x4180>
   14384:	bl	14130 <__assert_fail@plt+0x303c>
   14388:	str	r0, [fp, #16]
   1438c:	ldr	r1, [fp, #4]
   14390:	ldr	r0, [pc, #3808]	; 15278 <__assert_fail@plt+0x4184>
   14394:	bl	14130 <__assert_fail@plt+0x303c>
   14398:	str	r0, [fp, #20]
   1439c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   143a0:	eor	r3, r3, #1
   143a4:	uxtb	r3, r3
   143a8:	cmp	r3, #0
   143ac:	beq	1440c <__assert_fail@plt+0x3318>
   143b0:	ldr	r3, [fp, #16]
   143b4:	str	r3, [fp, #-28]	; 0xffffffe4
   143b8:	b	143fc <__assert_fail@plt+0x3308>
   143bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   143c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143c4:	cmp	r2, r3
   143c8:	bcs	143e4 <__assert_fail@plt+0x32f0>
   143cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   143d4:	add	r3, r2, r3
   143d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   143dc:	ldrb	r2, [r2]
   143e0:	strb	r2, [r3]
   143e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143e8:	add	r3, r3, #1
   143ec:	str	r3, [fp, #-20]	; 0xffffffec
   143f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143f4:	add	r3, r3, #1
   143f8:	str	r3, [fp, #-28]	; 0xffffffe4
   143fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14400:	ldrb	r3, [r3]
   14404:	cmp	r3, #0
   14408:	bne	143bc <__assert_fail@plt+0x32c8>
   1440c:	mov	r3, #1
   14410:	strb	r3, [fp, #-33]	; 0xffffffdf
   14414:	ldr	r3, [fp, #20]
   14418:	str	r3, [fp, #-28]	; 0xffffffe4
   1441c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14420:	bl	10fe0 <strlen@plt>
   14424:	str	r0, [fp, #-32]	; 0xffffffe0
   14428:	b	144c8 <__assert_fail@plt+0x33d4>
   1442c:	mov	r3, #1
   14430:	strb	r3, [fp, #-33]	; 0xffffffdf
   14434:	mov	r3, #1
   14438:	strb	r3, [fp, #-34]	; 0xffffffde
   1443c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14440:	eor	r3, r3, #1
   14444:	uxtb	r3, r3
   14448:	cmp	r3, #0
   1444c:	beq	14458 <__assert_fail@plt+0x3364>
   14450:	mov	r3, #1
   14454:	strb	r3, [fp, #-33]	; 0xffffffdf
   14458:	mov	r3, #2
   1445c:	str	r3, [fp, #4]
   14460:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14464:	eor	r3, r3, #1
   14468:	uxtb	r3, r3
   1446c:	cmp	r3, #0
   14470:	beq	144a4 <__assert_fail@plt+0x33b0>
   14474:	ldr	r2, [fp, #-20]	; 0xffffffec
   14478:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1447c:	cmp	r2, r3
   14480:	bcs	14498 <__assert_fail@plt+0x33a4>
   14484:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1448c:	add	r3, r2, r3
   14490:	mov	r2, #39	; 0x27
   14494:	strb	r2, [r3]
   14498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1449c:	add	r3, r3, #1
   144a0:	str	r3, [fp, #-20]	; 0xffffffec
   144a4:	ldr	r3, [pc, #3532]	; 15278 <__assert_fail@plt+0x4184>
   144a8:	str	r3, [fp, #-28]	; 0xffffffe4
   144ac:	mov	r3, #1
   144b0:	str	r3, [fp, #-32]	; 0xffffffe0
   144b4:	b	144c8 <__assert_fail@plt+0x33d4>
   144b8:	mov	r3, #0
   144bc:	strb	r3, [fp, #-34]	; 0xffffffde
   144c0:	b	144c8 <__assert_fail@plt+0x33d4>
   144c4:	bl	110c4 <abort@plt>
   144c8:	mov	r3, #0
   144cc:	str	r3, [fp, #-16]
   144d0:	b	15660 <__assert_fail@plt+0x456c>
   144d4:	mov	r3, #0
   144d8:	strb	r3, [fp, #-40]	; 0xffffffd8
   144dc:	mov	r3, #0
   144e0:	strb	r3, [fp, #-41]	; 0xffffffd7
   144e4:	mov	r3, #0
   144e8:	strb	r3, [fp, #-42]	; 0xffffffd6
   144ec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   144f0:	cmp	r3, #0
   144f4:	beq	14590 <__assert_fail@plt+0x349c>
   144f8:	ldr	r3, [fp, #4]
   144fc:	cmp	r3, #2
   14500:	beq	14590 <__assert_fail@plt+0x349c>
   14504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14508:	cmp	r3, #0
   1450c:	beq	14590 <__assert_fail@plt+0x349c>
   14510:	ldr	r2, [fp, #-16]
   14514:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14518:	add	r4, r2, r3
   1451c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14520:	cmn	r3, #1
   14524:	bne	14548 <__assert_fail@plt+0x3454>
   14528:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1452c:	cmp	r3, #1
   14530:	bls	14548 <__assert_fail@plt+0x3454>
   14534:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14538:	bl	10fe0 <strlen@plt>
   1453c:	str	r0, [fp, #-100]	; 0xffffff9c
   14540:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14544:	b	1454c <__assert_fail@plt+0x3458>
   14548:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1454c:	cmp	r4, r3
   14550:	bhi	14590 <__assert_fail@plt+0x349c>
   14554:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14558:	ldr	r3, [fp, #-16]
   1455c:	add	r3, r2, r3
   14560:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14564:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14568:	mov	r0, r3
   1456c:	bl	10ed8 <memcmp@plt>
   14570:	mov	r3, r0
   14574:	cmp	r3, #0
   14578:	bne	14590 <__assert_fail@plt+0x349c>
   1457c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14580:	cmp	r3, #0
   14584:	bne	1581c <__assert_fail@plt+0x4728>
   14588:	mov	r3, #1
   1458c:	strb	r3, [fp, #-40]	; 0xffffffd8
   14590:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14594:	ldr	r3, [fp, #-16]
   14598:	add	r3, r2, r3
   1459c:	ldrb	r3, [r3]
   145a0:	strb	r3, [fp, #-38]	; 0xffffffda
   145a4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   145a8:	cmp	r3, #126	; 0x7e
   145ac:	ldrls	pc, [pc, r3, lsl #2]
   145b0:	b	14ddc <__assert_fail@plt+0x3ce8>
   145b4:			; <UNDEFINED> instruction: 0x000147b0
   145b8:	ldrdeq	r4, [r1], -ip
   145bc:	ldrdeq	r4, [r1], -ip
   145c0:	ldrdeq	r4, [r1], -ip
   145c4:	ldrdeq	r4, [r1], -ip
   145c8:	ldrdeq	r4, [r1], -ip
   145cc:	ldrdeq	r4, [r1], -ip
   145d0:	andeq	r4, r1, r0, lsr #23
   145d4:	andeq	r4, r1, ip, lsr #23
   145d8:	ldrdeq	r4, [r1], -ip
   145dc:	andeq	r4, r1, r4, asr #23
   145e0:	andeq	r4, r1, r8, ror #23
   145e4:			; <UNDEFINED> instruction: 0x00014bb8
   145e8:	ldrdeq	r4, [r1], -r0
   145ec:	ldrdeq	r4, [r1], -ip
   145f0:	ldrdeq	r4, [r1], -ip
   145f4:	ldrdeq	r4, [r1], -ip
   145f8:	ldrdeq	r4, [r1], -ip
   145fc:	ldrdeq	r4, [r1], -ip
   14600:	ldrdeq	r4, [r1], -ip
   14604:	ldrdeq	r4, [r1], -ip
   14608:	ldrdeq	r4, [r1], -ip
   1460c:	ldrdeq	r4, [r1], -ip
   14610:	ldrdeq	r4, [r1], -ip
   14614:	ldrdeq	r4, [r1], -ip
   14618:	ldrdeq	r4, [r1], -ip
   1461c:	ldrdeq	r4, [r1], -ip
   14620:	ldrdeq	r4, [r1], -ip
   14624:	ldrdeq	r4, [r1], -ip
   14628:	ldrdeq	r4, [r1], -ip
   1462c:	ldrdeq	r4, [r1], -ip
   14630:	ldrdeq	r4, [r1], -ip
   14634:	andeq	r4, r1, r0, asr #25
   14638:	andeq	r4, r1, r8, asr #25
   1463c:	andeq	r4, r1, r8, asr #25
   14640:			; <UNDEFINED> instruction: 0x00014cb4
   14644:	andeq	r4, r1, r8, asr #25
   14648:	ldrdeq	r4, [r1], -r0
   1464c:	andeq	r4, r1, r8, asr #25
   14650:	andeq	r4, r1, r4, ror #25
   14654:	andeq	r4, r1, r8, asr #25
   14658:	andeq	r4, r1, r8, asr #25
   1465c:	andeq	r4, r1, r8, asr #25
   14660:	ldrdeq	r4, [r1], -r0
   14664:	ldrdeq	r4, [r1], -r0
   14668:	ldrdeq	r4, [r1], -r0
   1466c:	ldrdeq	r4, [r1], -r0
   14670:	ldrdeq	r4, [r1], -r0
   14674:	ldrdeq	r4, [r1], -r0
   14678:	ldrdeq	r4, [r1], -r0
   1467c:	ldrdeq	r4, [r1], -r0
   14680:	ldrdeq	r4, [r1], -r0
   14684:	ldrdeq	r4, [r1], -r0
   14688:	ldrdeq	r4, [r1], -r0
   1468c:	ldrdeq	r4, [r1], -r0
   14690:	ldrdeq	r4, [r1], -r0
   14694:	ldrdeq	r4, [r1], -r0
   14698:	ldrdeq	r4, [r1], -r0
   1469c:	ldrdeq	r4, [r1], -r0
   146a0:	andeq	r4, r1, r8, asr #25
   146a4:	andeq	r4, r1, r8, asr #25
   146a8:	andeq	r4, r1, r8, asr #25
   146ac:	andeq	r4, r1, r8, asr #25
   146b0:	muleq	r1, r0, r9
   146b4:	ldrdeq	r4, [r1], -ip
   146b8:	ldrdeq	r4, [r1], -r0
   146bc:	ldrdeq	r4, [r1], -r0
   146c0:	ldrdeq	r4, [r1], -r0
   146c4:	ldrdeq	r4, [r1], -r0
   146c8:	ldrdeq	r4, [r1], -r0
   146cc:	ldrdeq	r4, [r1], -r0
   146d0:	ldrdeq	r4, [r1], -r0
   146d4:	ldrdeq	r4, [r1], -r0
   146d8:	ldrdeq	r4, [r1], -r0
   146dc:	ldrdeq	r4, [r1], -r0
   146e0:	ldrdeq	r4, [r1], -r0
   146e4:	ldrdeq	r4, [r1], -r0
   146e8:	ldrdeq	r4, [r1], -r0
   146ec:	ldrdeq	r4, [r1], -r0
   146f0:	ldrdeq	r4, [r1], -r0
   146f4:	ldrdeq	r4, [r1], -r0
   146f8:	ldrdeq	r4, [r1], -r0
   146fc:	ldrdeq	r4, [r1], -r0
   14700:	ldrdeq	r4, [r1], -r0
   14704:	ldrdeq	r4, [r1], -r0
   14708:	ldrdeq	r4, [r1], -r0
   1470c:	ldrdeq	r4, [r1], -r0
   14710:	ldrdeq	r4, [r1], -r0
   14714:	ldrdeq	r4, [r1], -r0
   14718:	ldrdeq	r4, [r1], -r0
   1471c:	ldrdeq	r4, [r1], -r0
   14720:	andeq	r4, r1, r8, asr #25
   14724:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14728:	ldrdeq	r4, [r1], -r0
   1472c:	andeq	r4, r1, r8, asr #25
   14730:	ldrdeq	r4, [r1], -r0
   14734:	andeq	r4, r1, r8, asr #25
   14738:	ldrdeq	r4, [r1], -r0
   1473c:	ldrdeq	r4, [r1], -r0
   14740:	ldrdeq	r4, [r1], -r0
   14744:	ldrdeq	r4, [r1], -r0
   14748:	ldrdeq	r4, [r1], -r0
   1474c:	ldrdeq	r4, [r1], -r0
   14750:	ldrdeq	r4, [r1], -r0
   14754:	ldrdeq	r4, [r1], -r0
   14758:	ldrdeq	r4, [r1], -r0
   1475c:	ldrdeq	r4, [r1], -r0
   14760:	ldrdeq	r4, [r1], -r0
   14764:	ldrdeq	r4, [r1], -r0
   14768:	ldrdeq	r4, [r1], -r0
   1476c:	ldrdeq	r4, [r1], -r0
   14770:	ldrdeq	r4, [r1], -r0
   14774:	ldrdeq	r4, [r1], -r0
   14778:	ldrdeq	r4, [r1], -r0
   1477c:	ldrdeq	r4, [r1], -r0
   14780:	ldrdeq	r4, [r1], -r0
   14784:	ldrdeq	r4, [r1], -r0
   14788:	ldrdeq	r4, [r1], -r0
   1478c:	ldrdeq	r4, [r1], -r0
   14790:	ldrdeq	r4, [r1], -r0
   14794:	ldrdeq	r4, [r1], -r0
   14798:	ldrdeq	r4, [r1], -r0
   1479c:	ldrdeq	r4, [r1], -r0
   147a0:	andeq	r4, r1, ip, ror #24
   147a4:	andeq	r4, r1, r8, asr #25
   147a8:	andeq	r4, r1, ip, ror #24
   147ac:			; <UNDEFINED> instruction: 0x00014cb4
   147b0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   147b4:	cmp	r3, #0
   147b8:	beq	1497c <__assert_fail@plt+0x3888>
   147bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147c0:	cmp	r3, #0
   147c4:	bne	15824 <__assert_fail@plt+0x4730>
   147c8:	mov	r3, #1
   147cc:	strb	r3, [fp, #-41]	; 0xffffffd7
   147d0:	ldr	r3, [fp, #4]
   147d4:	cmp	r3, #2
   147d8:	bne	14888 <__assert_fail@plt+0x3794>
   147dc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   147e0:	eor	r3, r3, #1
   147e4:	uxtb	r3, r3
   147e8:	cmp	r3, #0
   147ec:	beq	14888 <__assert_fail@plt+0x3794>
   147f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   147f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147f8:	cmp	r2, r3
   147fc:	bcs	14814 <__assert_fail@plt+0x3720>
   14800:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14804:	ldr	r3, [fp, #-20]	; 0xffffffec
   14808:	add	r3, r2, r3
   1480c:	mov	r2, #39	; 0x27
   14810:	strb	r2, [r3]
   14814:	ldr	r3, [fp, #-20]	; 0xffffffec
   14818:	add	r3, r3, #1
   1481c:	str	r3, [fp, #-20]	; 0xffffffec
   14820:	ldr	r2, [fp, #-20]	; 0xffffffec
   14824:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14828:	cmp	r2, r3
   1482c:	bcs	14844 <__assert_fail@plt+0x3750>
   14830:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14834:	ldr	r3, [fp, #-20]	; 0xffffffec
   14838:	add	r3, r2, r3
   1483c:	mov	r2, #36	; 0x24
   14840:	strb	r2, [r3]
   14844:	ldr	r3, [fp, #-20]	; 0xffffffec
   14848:	add	r3, r3, #1
   1484c:	str	r3, [fp, #-20]	; 0xffffffec
   14850:	ldr	r2, [fp, #-20]	; 0xffffffec
   14854:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14858:	cmp	r2, r3
   1485c:	bcs	14874 <__assert_fail@plt+0x3780>
   14860:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14864:	ldr	r3, [fp, #-20]	; 0xffffffec
   14868:	add	r3, r2, r3
   1486c:	mov	r2, #39	; 0x27
   14870:	strb	r2, [r3]
   14874:	ldr	r3, [fp, #-20]	; 0xffffffec
   14878:	add	r3, r3, #1
   1487c:	str	r3, [fp, #-20]	; 0xffffffec
   14880:	mov	r3, #1
   14884:	strb	r3, [fp, #-35]	; 0xffffffdd
   14888:	ldr	r2, [fp, #-20]	; 0xffffffec
   1488c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14890:	cmp	r2, r3
   14894:	bcs	148ac <__assert_fail@plt+0x37b8>
   14898:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1489c:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a0:	add	r3, r2, r3
   148a4:	mov	r2, #92	; 0x5c
   148a8:	strb	r2, [r3]
   148ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   148b0:	add	r3, r3, #1
   148b4:	str	r3, [fp, #-20]	; 0xffffffec
   148b8:	ldr	r3, [fp, #4]
   148bc:	cmp	r3, #2
   148c0:	beq	14970 <__assert_fail@plt+0x387c>
   148c4:	ldr	r3, [fp, #-16]
   148c8:	add	r2, r3, #1
   148cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   148d0:	cmp	r2, r3
   148d4:	bcs	14970 <__assert_fail@plt+0x387c>
   148d8:	ldr	r3, [fp, #-16]
   148dc:	add	r3, r3, #1
   148e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   148e4:	add	r3, r2, r3
   148e8:	ldrb	r3, [r3]
   148ec:	cmp	r3, #47	; 0x2f
   148f0:	bls	14970 <__assert_fail@plt+0x387c>
   148f4:	ldr	r3, [fp, #-16]
   148f8:	add	r3, r3, #1
   148fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14900:	add	r3, r2, r3
   14904:	ldrb	r3, [r3]
   14908:	cmp	r3, #57	; 0x39
   1490c:	bhi	14970 <__assert_fail@plt+0x387c>
   14910:	ldr	r2, [fp, #-20]	; 0xffffffec
   14914:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14918:	cmp	r2, r3
   1491c:	bcs	14934 <__assert_fail@plt+0x3840>
   14920:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14924:	ldr	r3, [fp, #-20]	; 0xffffffec
   14928:	add	r3, r2, r3
   1492c:	mov	r2, #48	; 0x30
   14930:	strb	r2, [r3]
   14934:	ldr	r3, [fp, #-20]	; 0xffffffec
   14938:	add	r3, r3, #1
   1493c:	str	r3, [fp, #-20]	; 0xffffffec
   14940:	ldr	r2, [fp, #-20]	; 0xffffffec
   14944:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14948:	cmp	r2, r3
   1494c:	bcs	14964 <__assert_fail@plt+0x3870>
   14950:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14954:	ldr	r3, [fp, #-20]	; 0xffffffec
   14958:	add	r3, r2, r3
   1495c:	mov	r2, #48	; 0x30
   14960:	strb	r2, [r3]
   14964:	ldr	r3, [fp, #-20]	; 0xffffffec
   14968:	add	r3, r3, #1
   1496c:	str	r3, [fp, #-20]	; 0xffffffec
   14970:	mov	r3, #48	; 0x30
   14974:	strb	r3, [fp, #-38]	; 0xffffffda
   14978:	b	153b8 <__assert_fail@plt+0x42c4>
   1497c:	ldr	r3, [fp, #8]
   14980:	and	r3, r3, #1
   14984:	cmp	r3, #0
   14988:	beq	153b8 <__assert_fail@plt+0x42c4>
   1498c:	b	15654 <__assert_fail@plt+0x4560>
   14990:	ldr	r3, [fp, #4]
   14994:	cmp	r3, #2
   14998:	beq	149a8 <__assert_fail@plt+0x38b4>
   1499c:	cmp	r3, #5
   149a0:	beq	149b8 <__assert_fail@plt+0x38c4>
   149a4:	b	14b9c <__assert_fail@plt+0x3aa8>
   149a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   149ac:	cmp	r3, #0
   149b0:	beq	14b90 <__assert_fail@plt+0x3a9c>
   149b4:	b	15860 <__assert_fail@plt+0x476c>
   149b8:	ldr	r3, [fp, #8]
   149bc:	and	r3, r3, #4
   149c0:	cmp	r3, #0
   149c4:	beq	14b98 <__assert_fail@plt+0x3aa4>
   149c8:	ldr	r3, [fp, #-16]
   149cc:	add	r2, r3, #2
   149d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   149d4:	cmp	r2, r3
   149d8:	bcs	14b98 <__assert_fail@plt+0x3aa4>
   149dc:	ldr	r3, [fp, #-16]
   149e0:	add	r3, r3, #1
   149e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   149e8:	add	r3, r2, r3
   149ec:	ldrb	r3, [r3]
   149f0:	cmp	r3, #63	; 0x3f
   149f4:	bne	14b98 <__assert_fail@plt+0x3aa4>
   149f8:	ldr	r3, [fp, #-16]
   149fc:	add	r3, r3, #2
   14a00:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14a04:	add	r3, r2, r3
   14a08:	ldrb	r3, [r3]
   14a0c:	sub	r3, r3, #33	; 0x21
   14a10:	cmp	r3, #29
   14a14:	ldrls	pc, [pc, r3, lsl #2]
   14a18:	b	14b88 <__assert_fail@plt+0x3a94>
   14a1c:	muleq	r1, r4, sl
   14a20:	andeq	r4, r1, r8, lsl #23
   14a24:	andeq	r4, r1, r8, lsl #23
   14a28:	andeq	r4, r1, r8, lsl #23
   14a2c:	andeq	r4, r1, r8, lsl #23
   14a30:	andeq	r4, r1, r8, lsl #23
   14a34:	muleq	r1, r4, sl
   14a38:	muleq	r1, r4, sl
   14a3c:	muleq	r1, r4, sl
   14a40:	andeq	r4, r1, r8, lsl #23
   14a44:	andeq	r4, r1, r8, lsl #23
   14a48:	andeq	r4, r1, r8, lsl #23
   14a4c:	muleq	r1, r4, sl
   14a50:	andeq	r4, r1, r8, lsl #23
   14a54:	muleq	r1, r4, sl
   14a58:	andeq	r4, r1, r8, lsl #23
   14a5c:	andeq	r4, r1, r8, lsl #23
   14a60:	andeq	r4, r1, r8, lsl #23
   14a64:	andeq	r4, r1, r8, lsl #23
   14a68:	andeq	r4, r1, r8, lsl #23
   14a6c:	andeq	r4, r1, r8, lsl #23
   14a70:	andeq	r4, r1, r8, lsl #23
   14a74:	andeq	r4, r1, r8, lsl #23
   14a78:	andeq	r4, r1, r8, lsl #23
   14a7c:	andeq	r4, r1, r8, lsl #23
   14a80:	andeq	r4, r1, r8, lsl #23
   14a84:	andeq	r4, r1, r8, lsl #23
   14a88:	muleq	r1, r4, sl
   14a8c:	muleq	r1, r4, sl
   14a90:	muleq	r1, r4, sl
   14a94:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a98:	cmp	r3, #0
   14a9c:	bne	1582c <__assert_fail@plt+0x4738>
   14aa0:	ldr	r3, [fp, #-16]
   14aa4:	add	r3, r3, #2
   14aa8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14aac:	add	r3, r2, r3
   14ab0:	ldrb	r3, [r3]
   14ab4:	strb	r3, [fp, #-38]	; 0xffffffda
   14ab8:	ldr	r3, [fp, #-16]
   14abc:	add	r3, r3, #2
   14ac0:	str	r3, [fp, #-16]
   14ac4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ac8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14acc:	cmp	r2, r3
   14ad0:	bcs	14ae8 <__assert_fail@plt+0x39f4>
   14ad4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14adc:	add	r3, r2, r3
   14ae0:	mov	r2, #63	; 0x3f
   14ae4:	strb	r2, [r3]
   14ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14aec:	add	r3, r3, #1
   14af0:	str	r3, [fp, #-20]	; 0xffffffec
   14af4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14af8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14afc:	cmp	r2, r3
   14b00:	bcs	14b18 <__assert_fail@plt+0x3a24>
   14b04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b08:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b0c:	add	r3, r2, r3
   14b10:	mov	r2, #34	; 0x22
   14b14:	strb	r2, [r3]
   14b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b1c:	add	r3, r3, #1
   14b20:	str	r3, [fp, #-20]	; 0xffffffec
   14b24:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b2c:	cmp	r2, r3
   14b30:	bcs	14b48 <__assert_fail@plt+0x3a54>
   14b34:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b3c:	add	r3, r2, r3
   14b40:	mov	r2, #34	; 0x22
   14b44:	strb	r2, [r3]
   14b48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b4c:	add	r3, r3, #1
   14b50:	str	r3, [fp, #-20]	; 0xffffffec
   14b54:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b5c:	cmp	r2, r3
   14b60:	bcs	14b78 <__assert_fail@plt+0x3a84>
   14b64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b6c:	add	r3, r2, r3
   14b70:	mov	r2, #63	; 0x3f
   14b74:	strb	r2, [r3]
   14b78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b7c:	add	r3, r3, #1
   14b80:	str	r3, [fp, #-20]	; 0xffffffec
   14b84:	b	14b8c <__assert_fail@plt+0x3a98>
   14b88:	nop			; (mov r0, r0)
   14b8c:	b	14b98 <__assert_fail@plt+0x3aa4>
   14b90:	nop			; (mov r0, r0)
   14b94:	b	153e4 <__assert_fail@plt+0x42f0>
   14b98:	nop			; (mov r0, r0)
   14b9c:	b	153e4 <__assert_fail@plt+0x42f0>
   14ba0:	mov	r3, #97	; 0x61
   14ba4:	strb	r3, [fp, #-39]	; 0xffffffd9
   14ba8:	b	14c54 <__assert_fail@plt+0x3b60>
   14bac:	mov	r3, #98	; 0x62
   14bb0:	strb	r3, [fp, #-39]	; 0xffffffd9
   14bb4:	b	14c54 <__assert_fail@plt+0x3b60>
   14bb8:	mov	r3, #102	; 0x66
   14bbc:	strb	r3, [fp, #-39]	; 0xffffffd9
   14bc0:	b	14c54 <__assert_fail@plt+0x3b60>
   14bc4:	mov	r3, #110	; 0x6e
   14bc8:	strb	r3, [fp, #-39]	; 0xffffffd9
   14bcc:	b	14c3c <__assert_fail@plt+0x3b48>
   14bd0:	mov	r3, #114	; 0x72
   14bd4:	strb	r3, [fp, #-39]	; 0xffffffd9
   14bd8:	b	14c3c <__assert_fail@plt+0x3b48>
   14bdc:	mov	r3, #116	; 0x74
   14be0:	strb	r3, [fp, #-39]	; 0xffffffd9
   14be4:	b	14c3c <__assert_fail@plt+0x3b48>
   14be8:	mov	r3, #118	; 0x76
   14bec:	strb	r3, [fp, #-39]	; 0xffffffd9
   14bf0:	b	14c54 <__assert_fail@plt+0x3b60>
   14bf4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14bf8:	strb	r3, [fp, #-39]	; 0xffffffd9
   14bfc:	ldr	r3, [fp, #4]
   14c00:	cmp	r3, #2
   14c04:	bne	14c18 <__assert_fail@plt+0x3b24>
   14c08:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c0c:	cmp	r3, #0
   14c10:	beq	1556c <__assert_fail@plt+0x4478>
   14c14:	b	15860 <__assert_fail@plt+0x476c>
   14c18:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14c1c:	cmp	r3, #0
   14c20:	beq	14c3c <__assert_fail@plt+0x3b48>
   14c24:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c28:	cmp	r3, #0
   14c2c:	beq	14c3c <__assert_fail@plt+0x3b48>
   14c30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14c34:	cmp	r3, #0
   14c38:	bne	15574 <__assert_fail@plt+0x4480>
   14c3c:	ldr	r3, [fp, #4]
   14c40:	cmp	r3, #2
   14c44:	bne	14c54 <__assert_fail@plt+0x3b60>
   14c48:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c4c:	cmp	r3, #0
   14c50:	bne	15834 <__assert_fail@plt+0x4740>
   14c54:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14c58:	cmp	r3, #0
   14c5c:	beq	153c0 <__assert_fail@plt+0x42cc>
   14c60:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14c64:	strb	r3, [fp, #-38]	; 0xffffffda
   14c68:	b	1546c <__assert_fail@plt+0x4378>
   14c6c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14c70:	cmn	r3, #1
   14c74:	bne	14c98 <__assert_fail@plt+0x3ba4>
   14c78:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14c7c:	add	r3, r3, #1
   14c80:	ldrb	r3, [r3]
   14c84:	cmp	r3, #0
   14c88:	movne	r3, #1
   14c8c:	moveq	r3, #0
   14c90:	uxtb	r3, r3
   14c94:	b	14cac <__assert_fail@plt+0x3bb8>
   14c98:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14c9c:	cmp	r3, #1
   14ca0:	movne	r3, #1
   14ca4:	moveq	r3, #0
   14ca8:	uxtb	r3, r3
   14cac:	cmp	r3, #0
   14cb0:	bne	153c8 <__assert_fail@plt+0x42d4>
   14cb4:	ldr	r3, [fp, #-16]
   14cb8:	cmp	r3, #0
   14cbc:	bne	153d0 <__assert_fail@plt+0x42dc>
   14cc0:	mov	r3, #1
   14cc4:	strb	r3, [fp, #-42]	; 0xffffffd6
   14cc8:	ldr	r3, [fp, #4]
   14ccc:	cmp	r3, #2
   14cd0:	bne	153d8 <__assert_fail@plt+0x42e4>
   14cd4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14cd8:	cmp	r3, #0
   14cdc:	beq	153d8 <__assert_fail@plt+0x42e4>
   14ce0:	b	15860 <__assert_fail@plt+0x476c>
   14ce4:	mov	r3, #1
   14ce8:	strb	r3, [fp, #-36]	; 0xffffffdc
   14cec:	mov	r3, #1
   14cf0:	strb	r3, [fp, #-42]	; 0xffffffd6
   14cf4:	ldr	r3, [fp, #4]
   14cf8:	cmp	r3, #2
   14cfc:	bne	153e0 <__assert_fail@plt+0x42ec>
   14d00:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14d04:	cmp	r3, #0
   14d08:	bne	1583c <__assert_fail@plt+0x4748>
   14d0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d10:	cmp	r3, #0
   14d14:	beq	14d34 <__assert_fail@plt+0x3c40>
   14d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d1c:	cmp	r3, #0
   14d20:	bne	14d34 <__assert_fail@plt+0x3c40>
   14d24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d28:	str	r3, [fp, #-24]	; 0xffffffe8
   14d2c:	mov	r3, #0
   14d30:	str	r3, [fp, #-92]	; 0xffffffa4
   14d34:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d3c:	cmp	r2, r3
   14d40:	bcs	14d58 <__assert_fail@plt+0x3c64>
   14d44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d4c:	add	r3, r2, r3
   14d50:	mov	r2, #39	; 0x27
   14d54:	strb	r2, [r3]
   14d58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d5c:	add	r3, r3, #1
   14d60:	str	r3, [fp, #-20]	; 0xffffffec
   14d64:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d6c:	cmp	r2, r3
   14d70:	bcs	14d88 <__assert_fail@plt+0x3c94>
   14d74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d7c:	add	r3, r2, r3
   14d80:	mov	r2, #92	; 0x5c
   14d84:	strb	r2, [r3]
   14d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d8c:	add	r3, r3, #1
   14d90:	str	r3, [fp, #-20]	; 0xffffffec
   14d94:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d9c:	cmp	r2, r3
   14da0:	bcs	14db8 <__assert_fail@plt+0x3cc4>
   14da4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14da8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dac:	add	r3, r2, r3
   14db0:	mov	r2, #39	; 0x27
   14db4:	strb	r2, [r3]
   14db8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dbc:	add	r3, r3, #1
   14dc0:	str	r3, [fp, #-20]	; 0xffffffec
   14dc4:	mov	r3, #0
   14dc8:	strb	r3, [fp, #-35]	; 0xffffffdd
   14dcc:	b	153e0 <__assert_fail@plt+0x42ec>
   14dd0:	mov	r3, #1
   14dd4:	strb	r3, [fp, #-42]	; 0xffffffd6
   14dd8:	b	153e4 <__assert_fail@plt+0x42f0>
   14ddc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   14de0:	cmp	r3, #0
   14de4:	beq	14e24 <__assert_fail@plt+0x3d30>
   14de8:	mov	r3, #1
   14dec:	str	r3, [fp, #-48]	; 0xffffffd0
   14df0:	bl	10fbc <__ctype_b_loc@plt>
   14df4:	mov	r3, r0
   14df8:	ldr	r2, [r3]
   14dfc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14e00:	lsl	r3, r3, #1
   14e04:	add	r3, r2, r3
   14e08:	ldrh	r3, [r3]
   14e0c:	and	r3, r3, #16384	; 0x4000
   14e10:	cmp	r3, #0
   14e14:	movne	r3, #1
   14e18:	moveq	r3, #0
   14e1c:	strb	r3, [fp, #-49]	; 0xffffffcf
   14e20:	b	15070 <__assert_fail@plt+0x3f7c>
   14e24:	sub	r3, fp, #76	; 0x4c
   14e28:	mov	r2, #8
   14e2c:	mov	r1, #0
   14e30:	mov	r0, r3
   14e34:	bl	1101c <memset@plt>
   14e38:	mov	r3, #0
   14e3c:	str	r3, [fp, #-48]	; 0xffffffd0
   14e40:	mov	r3, #1
   14e44:	strb	r3, [fp, #-49]	; 0xffffffcf
   14e48:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14e4c:	cmn	r3, #1
   14e50:	bne	14e60 <__assert_fail@plt+0x3d6c>
   14e54:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14e58:	bl	10fe0 <strlen@plt>
   14e5c:	str	r0, [fp, #-100]	; 0xffffff9c
   14e60:	ldr	r2, [fp, #-16]
   14e64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e68:	add	r3, r2, r3
   14e6c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14e70:	add	r1, r2, r3
   14e74:	ldr	r2, [fp, #-16]
   14e78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e7c:	add	r3, r2, r3
   14e80:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14e84:	sub	r2, r2, r3
   14e88:	sub	r3, fp, #76	; 0x4c
   14e8c:	sub	r0, fp, #80	; 0x50
   14e90:	bl	180a8 <__assert_fail@plt+0x6fb4>
   14e94:	str	r0, [fp, #-64]	; 0xffffffc0
   14e98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e9c:	cmp	r3, #0
   14ea0:	beq	15064 <__assert_fail@plt+0x3f70>
   14ea4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14ea8:	cmn	r3, #1
   14eac:	bne	14ebc <__assert_fail@plt+0x3dc8>
   14eb0:	mov	r3, #0
   14eb4:	strb	r3, [fp, #-49]	; 0xffffffcf
   14eb8:	b	15070 <__assert_fail@plt+0x3f7c>
   14ebc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14ec0:	cmn	r3, #2
   14ec4:	bne	14f1c <__assert_fail@plt+0x3e28>
   14ec8:	mov	r3, #0
   14ecc:	strb	r3, [fp, #-49]	; 0xffffffcf
   14ed0:	b	14ee0 <__assert_fail@plt+0x3dec>
   14ed4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ed8:	add	r3, r3, #1
   14edc:	str	r3, [fp, #-48]	; 0xffffffd0
   14ee0:	ldr	r2, [fp, #-16]
   14ee4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ee8:	add	r2, r2, r3
   14eec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14ef0:	cmp	r2, r3
   14ef4:	bcs	1506c <__assert_fail@plt+0x3f78>
   14ef8:	ldr	r2, [fp, #-16]
   14efc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f00:	add	r3, r2, r3
   14f04:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14f08:	add	r3, r2, r3
   14f0c:	ldrb	r3, [r3]
   14f10:	cmp	r3, #0
   14f14:	bne	14ed4 <__assert_fail@plt+0x3de0>
   14f18:	b	1506c <__assert_fail@plt+0x3f78>
   14f1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f20:	cmp	r3, #0
   14f24:	beq	15018 <__assert_fail@plt+0x3f24>
   14f28:	ldr	r3, [fp, #4]
   14f2c:	cmp	r3, #2
   14f30:	bne	15018 <__assert_fail@plt+0x3f24>
   14f34:	mov	r3, #1
   14f38:	str	r3, [fp, #-56]	; 0xffffffc8
   14f3c:	b	15008 <__assert_fail@plt+0x3f14>
   14f40:	ldr	r2, [fp, #-16]
   14f44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f48:	add	r2, r2, r3
   14f4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14f50:	add	r3, r2, r3
   14f54:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14f58:	add	r3, r2, r3
   14f5c:	ldrb	r3, [r3]
   14f60:	sub	r3, r3, #91	; 0x5b
   14f64:	cmp	r3, #33	; 0x21
   14f68:	ldrls	pc, [pc, r3, lsl #2]
   14f6c:	b	14ff8 <__assert_fail@plt+0x3f04>
   14f70:	andeq	r5, r1, r4, asr #16
   14f74:	andeq	r5, r1, r4, asr #16
   14f78:	strdeq	r4, [r1], -r8
   14f7c:	andeq	r5, r1, r4, asr #16
   14f80:	strdeq	r4, [r1], -r8
   14f84:	andeq	r5, r1, r4, asr #16
   14f88:	strdeq	r4, [r1], -r8
   14f8c:	strdeq	r4, [r1], -r8
   14f90:	strdeq	r4, [r1], -r8
   14f94:	strdeq	r4, [r1], -r8
   14f98:	strdeq	r4, [r1], -r8
   14f9c:	strdeq	r4, [r1], -r8
   14fa0:	strdeq	r4, [r1], -r8
   14fa4:	strdeq	r4, [r1], -r8
   14fa8:	strdeq	r4, [r1], -r8
   14fac:	strdeq	r4, [r1], -r8
   14fb0:	strdeq	r4, [r1], -r8
   14fb4:	strdeq	r4, [r1], -r8
   14fb8:	strdeq	r4, [r1], -r8
   14fbc:	strdeq	r4, [r1], -r8
   14fc0:	strdeq	r4, [r1], -r8
   14fc4:	strdeq	r4, [r1], -r8
   14fc8:	strdeq	r4, [r1], -r8
   14fcc:	strdeq	r4, [r1], -r8
   14fd0:	strdeq	r4, [r1], -r8
   14fd4:	strdeq	r4, [r1], -r8
   14fd8:	strdeq	r4, [r1], -r8
   14fdc:	strdeq	r4, [r1], -r8
   14fe0:	strdeq	r4, [r1], -r8
   14fe4:	strdeq	r4, [r1], -r8
   14fe8:	strdeq	r4, [r1], -r8
   14fec:	strdeq	r4, [r1], -r8
   14ff0:	strdeq	r4, [r1], -r8
   14ff4:	andeq	r5, r1, r4, asr #16
   14ff8:	nop			; (mov r0, r0)
   14ffc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15000:	add	r3, r3, #1
   15004:	str	r3, [fp, #-56]	; 0xffffffc8
   15008:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1500c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15010:	cmp	r2, r3
   15014:	bcc	14f40 <__assert_fail@plt+0x3e4c>
   15018:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1501c:	mov	r0, r3
   15020:	bl	10f14 <iswprint@plt>
   15024:	mov	r3, r0
   15028:	cmp	r3, #0
   1502c:	bne	15038 <__assert_fail@plt+0x3f44>
   15030:	mov	r3, #0
   15034:	strb	r3, [fp, #-49]	; 0xffffffcf
   15038:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1503c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15040:	add	r3, r2, r3
   15044:	str	r3, [fp, #-48]	; 0xffffffd0
   15048:	sub	r3, fp, #76	; 0x4c
   1504c:	mov	r0, r3
   15050:	bl	10ec0 <mbsinit@plt>
   15054:	mov	r3, r0
   15058:	cmp	r3, #0
   1505c:	beq	14e60 <__assert_fail@plt+0x3d6c>
   15060:	b	15070 <__assert_fail@plt+0x3f7c>
   15064:	nop			; (mov r0, r0)
   15068:	b	15070 <__assert_fail@plt+0x3f7c>
   1506c:	nop			; (mov r0, r0)
   15070:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15074:	strb	r3, [fp, #-42]	; 0xffffffd6
   15078:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1507c:	cmp	r3, #1
   15080:	bhi	150a4 <__assert_fail@plt+0x3fb0>
   15084:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15088:	cmp	r3, #0
   1508c:	beq	153e4 <__assert_fail@plt+0x42f0>
   15090:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15094:	eor	r3, r3, #1
   15098:	uxtb	r3, r3
   1509c:	cmp	r3, #0
   150a0:	beq	153e4 <__assert_fail@plt+0x42f0>
   150a4:	ldr	r2, [fp, #-16]
   150a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   150ac:	add	r3, r2, r3
   150b0:	str	r3, [fp, #-68]	; 0xffffffbc
   150b4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   150b8:	cmp	r3, #0
   150bc:	beq	1527c <__assert_fail@plt+0x4188>
   150c0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   150c4:	eor	r3, r3, #1
   150c8:	uxtb	r3, r3
   150cc:	cmp	r3, #0
   150d0:	beq	1527c <__assert_fail@plt+0x4188>
   150d4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   150d8:	cmp	r3, #0
   150dc:	bne	1584c <__assert_fail@plt+0x4758>
   150e0:	mov	r3, #1
   150e4:	strb	r3, [fp, #-41]	; 0xffffffd7
   150e8:	ldr	r3, [fp, #4]
   150ec:	cmp	r3, #2
   150f0:	bne	151a0 <__assert_fail@plt+0x40ac>
   150f4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   150f8:	eor	r3, r3, #1
   150fc:	uxtb	r3, r3
   15100:	cmp	r3, #0
   15104:	beq	151a0 <__assert_fail@plt+0x40ac>
   15108:	ldr	r2, [fp, #-20]	; 0xffffffec
   1510c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15110:	cmp	r2, r3
   15114:	bcs	1512c <__assert_fail@plt+0x4038>
   15118:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1511c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15120:	add	r3, r2, r3
   15124:	mov	r2, #39	; 0x27
   15128:	strb	r2, [r3]
   1512c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15130:	add	r3, r3, #1
   15134:	str	r3, [fp, #-20]	; 0xffffffec
   15138:	ldr	r2, [fp, #-20]	; 0xffffffec
   1513c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15140:	cmp	r2, r3
   15144:	bcs	1515c <__assert_fail@plt+0x4068>
   15148:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1514c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15150:	add	r3, r2, r3
   15154:	mov	r2, #36	; 0x24
   15158:	strb	r2, [r3]
   1515c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15160:	add	r3, r3, #1
   15164:	str	r3, [fp, #-20]	; 0xffffffec
   15168:	ldr	r2, [fp, #-20]	; 0xffffffec
   1516c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15170:	cmp	r2, r3
   15174:	bcs	1518c <__assert_fail@plt+0x4098>
   15178:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1517c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15180:	add	r3, r2, r3
   15184:	mov	r2, #39	; 0x27
   15188:	strb	r2, [r3]
   1518c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15190:	add	r3, r3, #1
   15194:	str	r3, [fp, #-20]	; 0xffffffec
   15198:	mov	r3, #1
   1519c:	strb	r3, [fp, #-35]	; 0xffffffdd
   151a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   151a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151a8:	cmp	r2, r3
   151ac:	bcs	151c4 <__assert_fail@plt+0x40d0>
   151b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   151b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151b8:	add	r3, r2, r3
   151bc:	mov	r2, #92	; 0x5c
   151c0:	strb	r2, [r3]
   151c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151c8:	add	r3, r3, #1
   151cc:	str	r3, [fp, #-20]	; 0xffffffec
   151d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   151d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151d8:	cmp	r2, r3
   151dc:	bcs	15204 <__assert_fail@plt+0x4110>
   151e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   151e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151e8:	add	r3, r2, r3
   151ec:	ldrb	r2, [fp, #-38]	; 0xffffffda
   151f0:	lsr	r2, r2, #6
   151f4:	uxtb	r2, r2
   151f8:	add	r2, r2, #48	; 0x30
   151fc:	uxtb	r2, r2
   15200:	strb	r2, [r3]
   15204:	ldr	r3, [fp, #-20]	; 0xffffffec
   15208:	add	r3, r3, #1
   1520c:	str	r3, [fp, #-20]	; 0xffffffec
   15210:	ldr	r2, [fp, #-20]	; 0xffffffec
   15214:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15218:	cmp	r2, r3
   1521c:	bcs	1524c <__assert_fail@plt+0x4158>
   15220:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15224:	ldr	r3, [fp, #-20]	; 0xffffffec
   15228:	add	r3, r2, r3
   1522c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15230:	lsr	r2, r2, #3
   15234:	uxtb	r2, r2
   15238:	and	r2, r2, #7
   1523c:	uxtb	r2, r2
   15240:	add	r2, r2, #48	; 0x30
   15244:	uxtb	r2, r2
   15248:	strb	r2, [r3]
   1524c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15250:	add	r3, r3, #1
   15254:	str	r3, [fp, #-20]	; 0xffffffec
   15258:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1525c:	and	r3, r3, #7
   15260:	uxtb	r3, r3
   15264:	add	r3, r3, #48	; 0x30
   15268:	strb	r3, [fp, #-38]	; 0xffffffda
   1526c:	b	152c0 <__assert_fail@plt+0x41cc>
   15270:	andeq	r9, r1, ip, lsr ip
   15274:	andeq	r9, r1, r4, asr #24
   15278:	andeq	r9, r1, r0, asr #24
   1527c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15280:	cmp	r3, #0
   15284:	beq	152c0 <__assert_fail@plt+0x41cc>
   15288:	ldr	r2, [fp, #-20]	; 0xffffffec
   1528c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15290:	cmp	r2, r3
   15294:	bcs	152ac <__assert_fail@plt+0x41b8>
   15298:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1529c:	ldr	r3, [fp, #-20]	; 0xffffffec
   152a0:	add	r3, r2, r3
   152a4:	mov	r2, #92	; 0x5c
   152a8:	strb	r2, [r3]
   152ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   152b0:	add	r3, r3, #1
   152b4:	str	r3, [fp, #-20]	; 0xffffffec
   152b8:	mov	r3, #0
   152bc:	strb	r3, [fp, #-40]	; 0xffffffd8
   152c0:	ldr	r3, [fp, #-16]
   152c4:	add	r2, r3, #1
   152c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   152cc:	cmp	r2, r3
   152d0:	bcs	153b0 <__assert_fail@plt+0x42bc>
   152d4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   152d8:	cmp	r3, #0
   152dc:	beq	1535c <__assert_fail@plt+0x4268>
   152e0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   152e4:	eor	r3, r3, #1
   152e8:	uxtb	r3, r3
   152ec:	cmp	r3, #0
   152f0:	beq	1535c <__assert_fail@plt+0x4268>
   152f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   152f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152fc:	cmp	r2, r3
   15300:	bcs	15318 <__assert_fail@plt+0x4224>
   15304:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1530c:	add	r3, r2, r3
   15310:	mov	r2, #39	; 0x27
   15314:	strb	r2, [r3]
   15318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1531c:	add	r3, r3, #1
   15320:	str	r3, [fp, #-20]	; 0xffffffec
   15324:	ldr	r2, [fp, #-20]	; 0xffffffec
   15328:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1532c:	cmp	r2, r3
   15330:	bcs	15348 <__assert_fail@plt+0x4254>
   15334:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1533c:	add	r3, r2, r3
   15340:	mov	r2, #39	; 0x27
   15344:	strb	r2, [r3]
   15348:	ldr	r3, [fp, #-20]	; 0xffffffec
   1534c:	add	r3, r3, #1
   15350:	str	r3, [fp, #-20]	; 0xffffffec
   15354:	mov	r3, #0
   15358:	strb	r3, [fp, #-35]	; 0xffffffdd
   1535c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15360:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15364:	cmp	r2, r3
   15368:	bcs	15380 <__assert_fail@plt+0x428c>
   1536c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15370:	ldr	r3, [fp, #-20]	; 0xffffffec
   15374:	add	r3, r2, r3
   15378:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1537c:	strb	r2, [r3]
   15380:	ldr	r3, [fp, #-20]	; 0xffffffec
   15384:	add	r3, r3, #1
   15388:	str	r3, [fp, #-20]	; 0xffffffec
   1538c:	ldr	r3, [fp, #-16]
   15390:	add	r3, r3, #1
   15394:	str	r3, [fp, #-16]
   15398:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1539c:	ldr	r3, [fp, #-16]
   153a0:	add	r3, r2, r3
   153a4:	ldrb	r3, [r3]
   153a8:	strb	r3, [fp, #-38]	; 0xffffffda
   153ac:	b	150b4 <__assert_fail@plt+0x3fc0>
   153b0:	nop			; (mov r0, r0)
   153b4:	b	15580 <__assert_fail@plt+0x448c>
   153b8:	nop			; (mov r0, r0)
   153bc:	b	153e4 <__assert_fail@plt+0x42f0>
   153c0:	nop			; (mov r0, r0)
   153c4:	b	153e4 <__assert_fail@plt+0x42f0>
   153c8:	nop			; (mov r0, r0)
   153cc:	b	153e4 <__assert_fail@plt+0x42f0>
   153d0:	nop			; (mov r0, r0)
   153d4:	b	153e4 <__assert_fail@plt+0x42f0>
   153d8:	nop			; (mov r0, r0)
   153dc:	b	153e4 <__assert_fail@plt+0x42f0>
   153e0:	nop			; (mov r0, r0)
   153e4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   153e8:	eor	r3, r3, #1
   153ec:	uxtb	r3, r3
   153f0:	cmp	r3, #0
   153f4:	bne	15404 <__assert_fail@plt+0x4310>
   153f8:	ldr	r3, [fp, #4]
   153fc:	cmp	r3, #2
   15400:	bne	15418 <__assert_fail@plt+0x4324>
   15404:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15408:	eor	r3, r3, #1
   1540c:	uxtb	r3, r3
   15410:	cmp	r3, #0
   15414:	bne	15458 <__assert_fail@plt+0x4364>
   15418:	ldr	r3, [fp, #12]
   1541c:	cmp	r3, #0
   15420:	beq	15458 <__assert_fail@plt+0x4364>
   15424:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15428:	lsr	r3, r3, #5
   1542c:	uxtb	r3, r3
   15430:	lsl	r3, r3, #2
   15434:	ldr	r2, [fp, #12]
   15438:	add	r3, r2, r3
   1543c:	ldr	r2, [r3]
   15440:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15444:	and	r3, r3, #31
   15448:	lsr	r3, r2, r3
   1544c:	and	r3, r3, #1
   15450:	cmp	r3, #0
   15454:	bne	1546c <__assert_fail@plt+0x4378>
   15458:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1545c:	eor	r3, r3, #1
   15460:	uxtb	r3, r3
   15464:	cmp	r3, #0
   15468:	bne	1557c <__assert_fail@plt+0x4488>
   1546c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15470:	cmp	r3, #0
   15474:	bne	15854 <__assert_fail@plt+0x4760>
   15478:	mov	r3, #1
   1547c:	strb	r3, [fp, #-41]	; 0xffffffd7
   15480:	ldr	r3, [fp, #4]
   15484:	cmp	r3, #2
   15488:	bne	15538 <__assert_fail@plt+0x4444>
   1548c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15490:	eor	r3, r3, #1
   15494:	uxtb	r3, r3
   15498:	cmp	r3, #0
   1549c:	beq	15538 <__assert_fail@plt+0x4444>
   154a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   154a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154a8:	cmp	r2, r3
   154ac:	bcs	154c4 <__assert_fail@plt+0x43d0>
   154b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   154b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154b8:	add	r3, r2, r3
   154bc:	mov	r2, #39	; 0x27
   154c0:	strb	r2, [r3]
   154c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154c8:	add	r3, r3, #1
   154cc:	str	r3, [fp, #-20]	; 0xffffffec
   154d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   154d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154d8:	cmp	r2, r3
   154dc:	bcs	154f4 <__assert_fail@plt+0x4400>
   154e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   154e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154e8:	add	r3, r2, r3
   154ec:	mov	r2, #36	; 0x24
   154f0:	strb	r2, [r3]
   154f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154f8:	add	r3, r3, #1
   154fc:	str	r3, [fp, #-20]	; 0xffffffec
   15500:	ldr	r2, [fp, #-20]	; 0xffffffec
   15504:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15508:	cmp	r2, r3
   1550c:	bcs	15524 <__assert_fail@plt+0x4430>
   15510:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15514:	ldr	r3, [fp, #-20]	; 0xffffffec
   15518:	add	r3, r2, r3
   1551c:	mov	r2, #39	; 0x27
   15520:	strb	r2, [r3]
   15524:	ldr	r3, [fp, #-20]	; 0xffffffec
   15528:	add	r3, r3, #1
   1552c:	str	r3, [fp, #-20]	; 0xffffffec
   15530:	mov	r3, #1
   15534:	strb	r3, [fp, #-35]	; 0xffffffdd
   15538:	ldr	r2, [fp, #-20]	; 0xffffffec
   1553c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15540:	cmp	r2, r3
   15544:	bcs	1555c <__assert_fail@plt+0x4468>
   15548:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1554c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15550:	add	r3, r2, r3
   15554:	mov	r2, #92	; 0x5c
   15558:	strb	r2, [r3]
   1555c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15560:	add	r3, r3, #1
   15564:	str	r3, [fp, #-20]	; 0xffffffec
   15568:	b	15580 <__assert_fail@plt+0x448c>
   1556c:	nop			; (mov r0, r0)
   15570:	b	15580 <__assert_fail@plt+0x448c>
   15574:	nop			; (mov r0, r0)
   15578:	b	15580 <__assert_fail@plt+0x448c>
   1557c:	nop			; (mov r0, r0)
   15580:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15584:	cmp	r3, #0
   15588:	beq	15608 <__assert_fail@plt+0x4514>
   1558c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15590:	eor	r3, r3, #1
   15594:	uxtb	r3, r3
   15598:	cmp	r3, #0
   1559c:	beq	15608 <__assert_fail@plt+0x4514>
   155a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   155a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155a8:	cmp	r2, r3
   155ac:	bcs	155c4 <__assert_fail@plt+0x44d0>
   155b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   155b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155b8:	add	r3, r2, r3
   155bc:	mov	r2, #39	; 0x27
   155c0:	strb	r2, [r3]
   155c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155c8:	add	r3, r3, #1
   155cc:	str	r3, [fp, #-20]	; 0xffffffec
   155d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   155d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155d8:	cmp	r2, r3
   155dc:	bcs	155f4 <__assert_fail@plt+0x4500>
   155e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   155e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155e8:	add	r3, r2, r3
   155ec:	mov	r2, #39	; 0x27
   155f0:	strb	r2, [r3]
   155f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155f8:	add	r3, r3, #1
   155fc:	str	r3, [fp, #-20]	; 0xffffffec
   15600:	mov	r3, #0
   15604:	strb	r3, [fp, #-35]	; 0xffffffdd
   15608:	ldr	r2, [fp, #-20]	; 0xffffffec
   1560c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15610:	cmp	r2, r3
   15614:	bcs	1562c <__assert_fail@plt+0x4538>
   15618:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1561c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15620:	add	r3, r2, r3
   15624:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15628:	strb	r2, [r3]
   1562c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15630:	add	r3, r3, #1
   15634:	str	r3, [fp, #-20]	; 0xffffffec
   15638:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1563c:	eor	r3, r3, #1
   15640:	uxtb	r3, r3
   15644:	cmp	r3, #0
   15648:	beq	15654 <__assert_fail@plt+0x4560>
   1564c:	mov	r3, #0
   15650:	strb	r3, [fp, #-37]	; 0xffffffdb
   15654:	ldr	r3, [fp, #-16]
   15658:	add	r3, r3, #1
   1565c:	str	r3, [fp, #-16]
   15660:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15664:	cmn	r3, #1
   15668:	bne	15690 <__assert_fail@plt+0x459c>
   1566c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15670:	ldr	r3, [fp, #-16]
   15674:	add	r3, r2, r3
   15678:	ldrb	r3, [r3]
   1567c:	cmp	r3, #0
   15680:	movne	r3, #1
   15684:	moveq	r3, #0
   15688:	uxtb	r3, r3
   1568c:	b	156a8 <__assert_fail@plt+0x45b4>
   15690:	ldr	r2, [fp, #-16]
   15694:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15698:	cmp	r2, r3
   1569c:	movne	r3, #1
   156a0:	moveq	r3, #0
   156a4:	uxtb	r3, r3
   156a8:	cmp	r3, #0
   156ac:	bne	144d4 <__assert_fail@plt+0x33e0>
   156b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   156b4:	cmp	r3, #0
   156b8:	bne	156d4 <__assert_fail@plt+0x45e0>
   156bc:	ldr	r3, [fp, #4]
   156c0:	cmp	r3, #2
   156c4:	bne	156d4 <__assert_fail@plt+0x45e0>
   156c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   156cc:	cmp	r3, #0
   156d0:	bne	1585c <__assert_fail@plt+0x4768>
   156d4:	ldr	r3, [fp, #4]
   156d8:	cmp	r3, #2
   156dc:	bne	1577c <__assert_fail@plt+0x4688>
   156e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   156e4:	eor	r3, r3, #1
   156e8:	uxtb	r3, r3
   156ec:	cmp	r3, #0
   156f0:	beq	1577c <__assert_fail@plt+0x4688>
   156f4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   156f8:	cmp	r3, #0
   156fc:	beq	1577c <__assert_fail@plt+0x4688>
   15700:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15704:	cmp	r3, #0
   15708:	beq	15750 <__assert_fail@plt+0x465c>
   1570c:	ldr	r3, [fp, #20]
   15710:	str	r3, [sp, #16]
   15714:	ldr	r3, [fp, #16]
   15718:	str	r3, [sp, #12]
   1571c:	ldr	r3, [fp, #12]
   15720:	str	r3, [sp, #8]
   15724:	ldr	r3, [fp, #8]
   15728:	str	r3, [sp, #4]
   1572c:	mov	r3, #5
   15730:	str	r3, [sp]
   15734:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15738:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1573c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15740:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15744:	bl	14224 <__assert_fail@plt+0x3130>
   15748:	mov	r3, r0
   1574c:	b	158c4 <__assert_fail@plt+0x47d0>
   15750:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15754:	cmp	r3, #0
   15758:	bne	1577c <__assert_fail@plt+0x4688>
   1575c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15760:	cmp	r3, #0
   15764:	beq	1577c <__assert_fail@plt+0x4688>
   15768:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1576c:	str	r3, [fp, #-92]	; 0xffffffa4
   15770:	mov	r3, #0
   15774:	str	r3, [fp, #-20]	; 0xffffffec
   15778:	b	142b0 <__assert_fail@plt+0x31bc>
   1577c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15780:	cmp	r3, #0
   15784:	beq	157f0 <__assert_fail@plt+0x46fc>
   15788:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1578c:	eor	r3, r3, #1
   15790:	uxtb	r3, r3
   15794:	cmp	r3, #0
   15798:	beq	157f0 <__assert_fail@plt+0x46fc>
   1579c:	b	157e0 <__assert_fail@plt+0x46ec>
   157a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   157a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157a8:	cmp	r2, r3
   157ac:	bcs	157c8 <__assert_fail@plt+0x46d4>
   157b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   157b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   157b8:	add	r3, r2, r3
   157bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   157c0:	ldrb	r2, [r2]
   157c4:	strb	r2, [r3]
   157c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   157cc:	add	r3, r3, #1
   157d0:	str	r3, [fp, #-20]	; 0xffffffec
   157d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157d8:	add	r3, r3, #1
   157dc:	str	r3, [fp, #-28]	; 0xffffffe4
   157e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157e4:	ldrb	r3, [r3]
   157e8:	cmp	r3, #0
   157ec:	bne	157a0 <__assert_fail@plt+0x46ac>
   157f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   157f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157f8:	cmp	r2, r3
   157fc:	bcs	15814 <__assert_fail@plt+0x4720>
   15800:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15804:	ldr	r3, [fp, #-20]	; 0xffffffec
   15808:	add	r3, r2, r3
   1580c:	mov	r2, #0
   15810:	strb	r2, [r3]
   15814:	ldr	r3, [fp, #-20]	; 0xffffffec
   15818:	b	158c4 <__assert_fail@plt+0x47d0>
   1581c:	nop			; (mov r0, r0)
   15820:	b	15860 <__assert_fail@plt+0x476c>
   15824:	nop			; (mov r0, r0)
   15828:	b	15860 <__assert_fail@plt+0x476c>
   1582c:	nop			; (mov r0, r0)
   15830:	b	15860 <__assert_fail@plt+0x476c>
   15834:	nop			; (mov r0, r0)
   15838:	b	15860 <__assert_fail@plt+0x476c>
   1583c:	nop			; (mov r0, r0)
   15840:	b	15860 <__assert_fail@plt+0x476c>
   15844:	nop			; (mov r0, r0)
   15848:	b	15860 <__assert_fail@plt+0x476c>
   1584c:	nop			; (mov r0, r0)
   15850:	b	15860 <__assert_fail@plt+0x476c>
   15854:	nop			; (mov r0, r0)
   15858:	b	15860 <__assert_fail@plt+0x476c>
   1585c:	nop			; (mov r0, r0)
   15860:	ldr	r3, [fp, #4]
   15864:	cmp	r3, #2
   15868:	bne	15880 <__assert_fail@plt+0x478c>
   1586c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15870:	cmp	r3, #0
   15874:	beq	15880 <__assert_fail@plt+0x478c>
   15878:	mov	r3, #4
   1587c:	str	r3, [fp, #4]
   15880:	ldr	r3, [fp, #8]
   15884:	bic	r3, r3, #2
   15888:	ldr	r2, [fp, #20]
   1588c:	str	r2, [sp, #16]
   15890:	ldr	r2, [fp, #16]
   15894:	str	r2, [sp, #12]
   15898:	mov	r2, #0
   1589c:	str	r2, [sp, #8]
   158a0:	str	r3, [sp, #4]
   158a4:	ldr	r3, [fp, #4]
   158a8:	str	r3, [sp]
   158ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   158b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   158b4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   158b8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   158bc:	bl	14224 <__assert_fail@plt+0x3130>
   158c0:	mov	r3, r0
   158c4:	mov	r0, r3
   158c8:	sub	sp, fp, #8
   158cc:	pop	{r4, fp, pc}
   158d0:	push	{fp, lr}
   158d4:	add	fp, sp, #4
   158d8:	sub	sp, sp, #56	; 0x38
   158dc:	str	r0, [fp, #-24]	; 0xffffffe8
   158e0:	str	r1, [fp, #-28]	; 0xffffffe4
   158e4:	str	r2, [fp, #-32]	; 0xffffffe0
   158e8:	str	r3, [fp, #-36]	; 0xffffffdc
   158ec:	ldr	r3, [fp, #4]
   158f0:	cmp	r3, #0
   158f4:	beq	15900 <__assert_fail@plt+0x480c>
   158f8:	ldr	r3, [fp, #4]
   158fc:	b	15904 <__assert_fail@plt+0x4810>
   15900:	ldr	r3, [pc, #132]	; 1598c <__assert_fail@plt+0x4898>
   15904:	str	r3, [fp, #-8]
   15908:	bl	11004 <__errno_location@plt>
   1590c:	mov	r3, r0
   15910:	ldr	r3, [r3]
   15914:	str	r3, [fp, #-12]
   15918:	ldr	r3, [fp, #-8]
   1591c:	ldr	r3, [r3]
   15920:	ldr	r2, [fp, #-8]
   15924:	ldr	r2, [r2, #4]
   15928:	ldr	r1, [fp, #-8]
   1592c:	add	r1, r1, #8
   15930:	ldr	r0, [fp, #-8]
   15934:	ldr	r0, [r0, #40]	; 0x28
   15938:	ldr	ip, [fp, #-8]
   1593c:	ldr	ip, [ip, #44]	; 0x2c
   15940:	str	ip, [sp, #16]
   15944:	str	r0, [sp, #12]
   15948:	str	r1, [sp, #8]
   1594c:	str	r2, [sp, #4]
   15950:	str	r3, [sp]
   15954:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15958:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1595c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15960:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15964:	bl	14224 <__assert_fail@plt+0x3130>
   15968:	str	r0, [fp, #-16]
   1596c:	bl	11004 <__errno_location@plt>
   15970:	mov	r2, r0
   15974:	ldr	r3, [fp, #-12]
   15978:	str	r3, [r2]
   1597c:	ldr	r3, [fp, #-16]
   15980:	mov	r0, r3
   15984:	sub	sp, fp, #4
   15988:	pop	{fp, pc}
   1598c:			; <UNDEFINED> instruction: 0x0002b1bc
   15990:	push	{fp, lr}
   15994:	add	fp, sp, #4
   15998:	sub	sp, sp, #16
   1599c:	str	r0, [fp, #-8]
   159a0:	str	r1, [fp, #-12]
   159a4:	str	r2, [fp, #-16]
   159a8:	ldr	r3, [fp, #-16]
   159ac:	mov	r2, #0
   159b0:	ldr	r1, [fp, #-12]
   159b4:	ldr	r0, [fp, #-8]
   159b8:	bl	159cc <__assert_fail@plt+0x48d8>
   159bc:	mov	r3, r0
   159c0:	mov	r0, r3
   159c4:	sub	sp, fp, #4
   159c8:	pop	{fp, pc}
   159cc:	push	{fp, lr}
   159d0:	add	fp, sp, #4
   159d4:	sub	sp, sp, #64	; 0x40
   159d8:	str	r0, [fp, #-32]	; 0xffffffe0
   159dc:	str	r1, [fp, #-36]	; 0xffffffdc
   159e0:	str	r2, [fp, #-40]	; 0xffffffd8
   159e4:	str	r3, [fp, #-44]	; 0xffffffd4
   159e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   159ec:	cmp	r3, #0
   159f0:	beq	159fc <__assert_fail@plt+0x4908>
   159f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   159f8:	b	15a00 <__assert_fail@plt+0x490c>
   159fc:	ldr	r3, [pc, #292]	; 15b28 <__assert_fail@plt+0x4a34>
   15a00:	str	r3, [fp, #-8]
   15a04:	bl	11004 <__errno_location@plt>
   15a08:	mov	r3, r0
   15a0c:	ldr	r3, [r3]
   15a10:	str	r3, [fp, #-12]
   15a14:	ldr	r3, [fp, #-8]
   15a18:	ldr	r3, [r3, #4]
   15a1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15a20:	cmp	r2, #0
   15a24:	moveq	r2, #1
   15a28:	movne	r2, #0
   15a2c:	uxtb	r2, r2
   15a30:	orr	r3, r3, r2
   15a34:	str	r3, [fp, #-16]
   15a38:	ldr	r3, [fp, #-8]
   15a3c:	ldr	r3, [r3]
   15a40:	ldr	r2, [fp, #-8]
   15a44:	add	r2, r2, #8
   15a48:	ldr	r1, [fp, #-8]
   15a4c:	ldr	r1, [r1, #40]	; 0x28
   15a50:	ldr	r0, [fp, #-8]
   15a54:	ldr	r0, [r0, #44]	; 0x2c
   15a58:	str	r0, [sp, #16]
   15a5c:	str	r1, [sp, #12]
   15a60:	str	r2, [sp, #8]
   15a64:	ldr	r2, [fp, #-16]
   15a68:	str	r2, [sp, #4]
   15a6c:	str	r3, [sp]
   15a70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15a78:	mov	r1, #0
   15a7c:	mov	r0, #0
   15a80:	bl	14224 <__assert_fail@plt+0x3130>
   15a84:	mov	r3, r0
   15a88:	add	r3, r3, #1
   15a8c:	str	r3, [fp, #-20]	; 0xffffffec
   15a90:	ldr	r0, [fp, #-20]	; 0xffffffec
   15a94:	bl	16cc8 <__assert_fail@plt+0x5bd4>
   15a98:	mov	r3, r0
   15a9c:	str	r3, [fp, #-24]	; 0xffffffe8
   15aa0:	ldr	r3, [fp, #-8]
   15aa4:	ldr	r3, [r3]
   15aa8:	ldr	r2, [fp, #-8]
   15aac:	add	r2, r2, #8
   15ab0:	ldr	r1, [fp, #-8]
   15ab4:	ldr	r1, [r1, #40]	; 0x28
   15ab8:	ldr	r0, [fp, #-8]
   15abc:	ldr	r0, [r0, #44]	; 0x2c
   15ac0:	str	r0, [sp, #16]
   15ac4:	str	r1, [sp, #12]
   15ac8:	str	r2, [sp, #8]
   15acc:	ldr	r2, [fp, #-16]
   15ad0:	str	r2, [sp, #4]
   15ad4:	str	r3, [sp]
   15ad8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15adc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ae0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ae4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ae8:	bl	14224 <__assert_fail@plt+0x3130>
   15aec:	bl	11004 <__errno_location@plt>
   15af0:	mov	r2, r0
   15af4:	ldr	r3, [fp, #-12]
   15af8:	str	r3, [r2]
   15afc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b00:	cmp	r3, #0
   15b04:	beq	15b18 <__assert_fail@plt+0x4a24>
   15b08:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b0c:	sub	r2, r3, #1
   15b10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b14:	str	r2, [r3]
   15b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b1c:	mov	r0, r3
   15b20:	sub	sp, fp, #4
   15b24:	pop	{fp, pc}
   15b28:			; <UNDEFINED> instruction: 0x0002b1bc
   15b2c:	push	{fp, lr}
   15b30:	add	fp, sp, #4
   15b34:	sub	sp, sp, #8
   15b38:	ldr	r3, [pc, #196]	; 15c04 <__assert_fail@plt+0x4b10>
   15b3c:	ldr	r3, [r3]
   15b40:	str	r3, [fp, #-12]
   15b44:	mov	r3, #1
   15b48:	str	r3, [fp, #-8]
   15b4c:	b	15b78 <__assert_fail@plt+0x4a84>
   15b50:	ldr	r3, [fp, #-8]
   15b54:	lsl	r3, r3, #3
   15b58:	ldr	r2, [fp, #-12]
   15b5c:	add	r3, r2, r3
   15b60:	ldr	r3, [r3, #4]
   15b64:	mov	r0, r3
   15b68:	bl	134f4 <__assert_fail@plt+0x2400>
   15b6c:	ldr	r3, [fp, #-8]
   15b70:	add	r3, r3, #1
   15b74:	str	r3, [fp, #-8]
   15b78:	ldr	r3, [pc, #136]	; 15c08 <__assert_fail@plt+0x4b14>
   15b7c:	ldr	r3, [r3]
   15b80:	ldr	r2, [fp, #-8]
   15b84:	cmp	r2, r3
   15b88:	blt	15b50 <__assert_fail@plt+0x4a5c>
   15b8c:	ldr	r3, [fp, #-12]
   15b90:	ldr	r3, [r3, #4]
   15b94:	ldr	r2, [pc, #112]	; 15c0c <__assert_fail@plt+0x4b18>
   15b98:	cmp	r3, r2
   15b9c:	beq	15bc8 <__assert_fail@plt+0x4ad4>
   15ba0:	ldr	r3, [fp, #-12]
   15ba4:	ldr	r3, [r3, #4]
   15ba8:	mov	r0, r3
   15bac:	bl	134f4 <__assert_fail@plt+0x2400>
   15bb0:	ldr	r3, [pc, #88]	; 15c10 <__assert_fail@plt+0x4b1c>
   15bb4:	mov	r2, #256	; 0x100
   15bb8:	str	r2, [r3]
   15bbc:	ldr	r3, [pc, #76]	; 15c10 <__assert_fail@plt+0x4b1c>
   15bc0:	ldr	r2, [pc, #68]	; 15c0c <__assert_fail@plt+0x4b18>
   15bc4:	str	r2, [r3, #4]
   15bc8:	ldr	r3, [fp, #-12]
   15bcc:	ldr	r2, [pc, #60]	; 15c10 <__assert_fail@plt+0x4b1c>
   15bd0:	cmp	r3, r2
   15bd4:	beq	15bec <__assert_fail@plt+0x4af8>
   15bd8:	ldr	r0, [fp, #-12]
   15bdc:	bl	134f4 <__assert_fail@plt+0x2400>
   15be0:	ldr	r3, [pc, #28]	; 15c04 <__assert_fail@plt+0x4b10>
   15be4:	ldr	r2, [pc, #36]	; 15c10 <__assert_fail@plt+0x4b1c>
   15be8:	str	r2, [r3]
   15bec:	ldr	r3, [pc, #20]	; 15c08 <__assert_fail@plt+0x4b14>
   15bf0:	mov	r2, #1
   15bf4:	str	r2, [r3]
   15bf8:	nop			; (mov r0, r0)
   15bfc:	sub	sp, fp, #4
   15c00:	pop	{fp, pc}
   15c04:	andeq	fp, r2, r0, lsr #2
   15c08:	andeq	fp, r2, r4, lsl r1
   15c0c:	andeq	fp, r2, ip, ror #3
   15c10:	andeq	fp, r2, r8, lsl r1
   15c14:	push	{r4, fp, lr}
   15c18:	add	fp, sp, #8
   15c1c:	sub	sp, sp, #84	; 0x54
   15c20:	str	r0, [fp, #-56]	; 0xffffffc8
   15c24:	str	r1, [fp, #-60]	; 0xffffffc4
   15c28:	str	r2, [fp, #-64]	; 0xffffffc0
   15c2c:	str	r3, [fp, #-68]	; 0xffffffbc
   15c30:	bl	11004 <__errno_location@plt>
   15c34:	mov	r3, r0
   15c38:	ldr	r3, [r3]
   15c3c:	str	r3, [fp, #-24]	; 0xffffffe8
   15c40:	ldr	r3, [pc, #640]	; 15ec8 <__assert_fail@plt+0x4dd4>
   15c44:	ldr	r3, [r3]
   15c48:	str	r3, [fp, #-16]
   15c4c:	mvn	r3, #-2147483648	; 0x80000000
   15c50:	str	r3, [fp, #-28]	; 0xffffffe4
   15c54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c58:	cmp	r3, #0
   15c5c:	blt	15c70 <__assert_fail@plt+0x4b7c>
   15c60:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15c64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c68:	cmp	r2, r3
   15c6c:	blt	15c74 <__assert_fail@plt+0x4b80>
   15c70:	bl	110c4 <abort@plt>
   15c74:	ldr	r3, [pc, #592]	; 15ecc <__assert_fail@plt+0x4dd8>
   15c78:	ldr	r2, [r3]
   15c7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c80:	cmp	r2, r3
   15c84:	bgt	15d58 <__assert_fail@plt+0x4c64>
   15c88:	ldr	r3, [fp, #-16]
   15c8c:	ldr	r2, [pc, #572]	; 15ed0 <__assert_fail@plt+0x4ddc>
   15c90:	cmp	r3, r2
   15c94:	moveq	r3, #1
   15c98:	movne	r3, #0
   15c9c:	strb	r3, [fp, #-29]	; 0xffffffe3
   15ca0:	ldr	r3, [pc, #548]	; 15ecc <__assert_fail@plt+0x4dd8>
   15ca4:	ldr	r3, [r3]
   15ca8:	str	r3, [fp, #-48]	; 0xffffffd0
   15cac:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   15cb0:	cmp	r3, #0
   15cb4:	beq	15cc0 <__assert_fail@plt+0x4bcc>
   15cb8:	mov	r0, #0
   15cbc:	b	15cc4 <__assert_fail@plt+0x4bd0>
   15cc0:	ldr	r0, [fp, #-16]
   15cc4:	ldr	r3, [pc, #512]	; 15ecc <__assert_fail@plt+0x4dd8>
   15cc8:	ldr	r3, [r3]
   15ccc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15cd0:	sub	r3, r2, r3
   15cd4:	add	r2, r3, #1
   15cd8:	sub	r1, fp, #48	; 0x30
   15cdc:	mov	r3, #8
   15ce0:	str	r3, [sp]
   15ce4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ce8:	bl	16fe8 <__assert_fail@plt+0x5ef4>
   15cec:	str	r0, [fp, #-16]
   15cf0:	ldr	r2, [pc, #464]	; 15ec8 <__assert_fail@plt+0x4dd4>
   15cf4:	ldr	r3, [fp, #-16]
   15cf8:	str	r3, [r2]
   15cfc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   15d00:	cmp	r3, #0
   15d04:	beq	15d18 <__assert_fail@plt+0x4c24>
   15d08:	ldr	r3, [fp, #-16]
   15d0c:	ldr	r2, [pc, #444]	; 15ed0 <__assert_fail@plt+0x4ddc>
   15d10:	ldm	r2, {r0, r1}
   15d14:	stm	r3, {r0, r1}
   15d18:	ldr	r3, [pc, #428]	; 15ecc <__assert_fail@plt+0x4dd8>
   15d1c:	ldr	r3, [r3]
   15d20:	lsl	r3, r3, #3
   15d24:	ldr	r2, [fp, #-16]
   15d28:	add	r0, r2, r3
   15d2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15d30:	ldr	r3, [pc, #404]	; 15ecc <__assert_fail@plt+0x4dd8>
   15d34:	ldr	r3, [r3]
   15d38:	sub	r3, r2, r3
   15d3c:	lsl	r3, r3, #3
   15d40:	mov	r2, r3
   15d44:	mov	r1, #0
   15d48:	bl	1101c <memset@plt>
   15d4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15d50:	ldr	r2, [pc, #372]	; 15ecc <__assert_fail@plt+0x4dd8>
   15d54:	str	r3, [r2]
   15d58:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15d5c:	lsl	r3, r3, #3
   15d60:	ldr	r2, [fp, #-16]
   15d64:	add	r3, r2, r3
   15d68:	ldr	r3, [r3]
   15d6c:	str	r3, [fp, #-36]	; 0xffffffdc
   15d70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15d74:	lsl	r3, r3, #3
   15d78:	ldr	r2, [fp, #-16]
   15d7c:	add	r3, r2, r3
   15d80:	ldr	r3, [r3, #4]
   15d84:	str	r3, [fp, #-20]	; 0xffffffec
   15d88:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15d8c:	ldr	r3, [r3, #4]
   15d90:	orr	r3, r3, #1
   15d94:	str	r3, [fp, #-40]	; 0xffffffd8
   15d98:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15d9c:	ldr	r3, [r3]
   15da0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15da4:	add	r2, r2, #8
   15da8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15dac:	ldr	r1, [r1, #40]	; 0x28
   15db0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15db4:	ldr	r0, [r0, #44]	; 0x2c
   15db8:	str	r0, [sp, #16]
   15dbc:	str	r1, [sp, #12]
   15dc0:	str	r2, [sp, #8]
   15dc4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15dc8:	str	r2, [sp, #4]
   15dcc:	str	r3, [sp]
   15dd0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15dd4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15dd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15ddc:	ldr	r0, [fp, #-20]	; 0xffffffec
   15de0:	bl	14224 <__assert_fail@plt+0x3130>
   15de4:	str	r0, [fp, #-44]	; 0xffffffd4
   15de8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15dec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15df0:	cmp	r2, r3
   15df4:	bhi	15ea8 <__assert_fail@plt+0x4db4>
   15df8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15dfc:	lsl	r3, r3, #3
   15e00:	ldr	r2, [fp, #-16]
   15e04:	add	r3, r2, r3
   15e08:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15e0c:	add	r2, r2, #1
   15e10:	str	r2, [fp, #-36]	; 0xffffffdc
   15e14:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15e18:	str	r2, [r3]
   15e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e20:	ldr	r2, [pc, #172]	; 15ed4 <__assert_fail@plt+0x4de0>
   15e24:	cmp	r3, r2
   15e28:	beq	15e34 <__assert_fail@plt+0x4d40>
   15e2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15e30:	bl	134f4 <__assert_fail@plt+0x2400>
   15e34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15e38:	lsl	r3, r3, #3
   15e3c:	ldr	r2, [fp, #-16]
   15e40:	add	r4, r2, r3
   15e44:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15e48:	bl	16cc8 <__assert_fail@plt+0x5bd4>
   15e4c:	mov	r3, r0
   15e50:	str	r3, [fp, #-20]	; 0xffffffec
   15e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e58:	str	r3, [r4, #4]
   15e5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15e60:	ldr	r3, [r3]
   15e64:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15e68:	add	r2, r2, #8
   15e6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15e70:	ldr	r1, [r1, #40]	; 0x28
   15e74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15e78:	ldr	r0, [r0, #44]	; 0x2c
   15e7c:	str	r0, [sp, #16]
   15e80:	str	r1, [sp, #12]
   15e84:	str	r2, [sp, #8]
   15e88:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15e8c:	str	r2, [sp, #4]
   15e90:	str	r3, [sp]
   15e94:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15e98:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15e9c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15ea0:	ldr	r0, [fp, #-20]	; 0xffffffec
   15ea4:	bl	14224 <__assert_fail@plt+0x3130>
   15ea8:	bl	11004 <__errno_location@plt>
   15eac:	mov	r2, r0
   15eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15eb4:	str	r3, [r2]
   15eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ebc:	mov	r0, r3
   15ec0:	sub	sp, fp, #8
   15ec4:	pop	{r4, fp, pc}
   15ec8:	andeq	fp, r2, r0, lsr #2
   15ecc:	andeq	fp, r2, r4, lsl r1
   15ed0:	andeq	fp, r2, r8, lsl r1
   15ed4:	andeq	fp, r2, ip, ror #3
   15ed8:	push	{fp, lr}
   15edc:	add	fp, sp, #4
   15ee0:	sub	sp, sp, #8
   15ee4:	str	r0, [fp, #-8]
   15ee8:	str	r1, [fp, #-12]
   15eec:	ldr	r3, [pc, #28]	; 15f10 <__assert_fail@plt+0x4e1c>
   15ef0:	mvn	r2, #0
   15ef4:	ldr	r1, [fp, #-12]
   15ef8:	ldr	r0, [fp, #-8]
   15efc:	bl	15c14 <__assert_fail@plt+0x4b20>
   15f00:	mov	r3, r0
   15f04:	mov	r0, r3
   15f08:	sub	sp, fp, #4
   15f0c:	pop	{fp, pc}
   15f10:			; <UNDEFINED> instruction: 0x0002b1bc
   15f14:	push	{fp, lr}
   15f18:	add	fp, sp, #4
   15f1c:	sub	sp, sp, #16
   15f20:	str	r0, [fp, #-8]
   15f24:	str	r1, [fp, #-12]
   15f28:	str	r2, [fp, #-16]
   15f2c:	ldr	r3, [pc, #28]	; 15f50 <__assert_fail@plt+0x4e5c>
   15f30:	ldr	r2, [fp, #-16]
   15f34:	ldr	r1, [fp, #-12]
   15f38:	ldr	r0, [fp, #-8]
   15f3c:	bl	15c14 <__assert_fail@plt+0x4b20>
   15f40:	mov	r3, r0
   15f44:	mov	r0, r3
   15f48:	sub	sp, fp, #4
   15f4c:	pop	{fp, pc}
   15f50:			; <UNDEFINED> instruction: 0x0002b1bc
   15f54:	push	{fp, lr}
   15f58:	add	fp, sp, #4
   15f5c:	sub	sp, sp, #8
   15f60:	str	r0, [fp, #-8]
   15f64:	ldr	r1, [fp, #-8]
   15f68:	mov	r0, #0
   15f6c:	bl	15ed8 <__assert_fail@plt+0x4de4>
   15f70:	mov	r3, r0
   15f74:	mov	r0, r3
   15f78:	sub	sp, fp, #4
   15f7c:	pop	{fp, pc}
   15f80:	push	{fp, lr}
   15f84:	add	fp, sp, #4
   15f88:	sub	sp, sp, #8
   15f8c:	str	r0, [fp, #-8]
   15f90:	str	r1, [fp, #-12]
   15f94:	ldr	r2, [fp, #-12]
   15f98:	ldr	r1, [fp, #-8]
   15f9c:	mov	r0, #0
   15fa0:	bl	15f14 <__assert_fail@plt+0x4e20>
   15fa4:	mov	r3, r0
   15fa8:	mov	r0, r3
   15fac:	sub	sp, fp, #4
   15fb0:	pop	{fp, pc}
   15fb4:	push	{fp, lr}
   15fb8:	add	fp, sp, #4
   15fbc:	sub	sp, sp, #64	; 0x40
   15fc0:	str	r0, [fp, #-56]	; 0xffffffc8
   15fc4:	str	r1, [fp, #-60]	; 0xffffffc4
   15fc8:	str	r2, [fp, #-64]	; 0xffffffc0
   15fcc:	sub	r3, fp, #52	; 0x34
   15fd0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15fd4:	mov	r0, r3
   15fd8:	bl	140c0 <__assert_fail@plt+0x2fcc>
   15fdc:	sub	r3, fp, #52	; 0x34
   15fe0:	mvn	r2, #0
   15fe4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15fe8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15fec:	bl	15c14 <__assert_fail@plt+0x4b20>
   15ff0:	mov	r3, r0
   15ff4:	mov	r0, r3
   15ff8:	sub	sp, fp, #4
   15ffc:	pop	{fp, pc}
   16000:	push	{fp, lr}
   16004:	add	fp, sp, #4
   16008:	sub	sp, sp, #64	; 0x40
   1600c:	str	r0, [fp, #-56]	; 0xffffffc8
   16010:	str	r1, [fp, #-60]	; 0xffffffc4
   16014:	str	r2, [fp, #-64]	; 0xffffffc0
   16018:	str	r3, [fp, #-68]	; 0xffffffbc
   1601c:	sub	r3, fp, #52	; 0x34
   16020:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16024:	mov	r0, r3
   16028:	bl	140c0 <__assert_fail@plt+0x2fcc>
   1602c:	sub	r3, fp, #52	; 0x34
   16030:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16034:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16038:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1603c:	bl	15c14 <__assert_fail@plt+0x4b20>
   16040:	mov	r3, r0
   16044:	mov	r0, r3
   16048:	sub	sp, fp, #4
   1604c:	pop	{fp, pc}
   16050:	push	{fp, lr}
   16054:	add	fp, sp, #4
   16058:	sub	sp, sp, #8
   1605c:	str	r0, [fp, #-8]
   16060:	str	r1, [fp, #-12]
   16064:	ldr	r2, [fp, #-12]
   16068:	ldr	r1, [fp, #-8]
   1606c:	mov	r0, #0
   16070:	bl	15fb4 <__assert_fail@plt+0x4ec0>
   16074:	mov	r3, r0
   16078:	mov	r0, r3
   1607c:	sub	sp, fp, #4
   16080:	pop	{fp, pc}
   16084:	push	{fp, lr}
   16088:	add	fp, sp, #4
   1608c:	sub	sp, sp, #16
   16090:	str	r0, [fp, #-8]
   16094:	str	r1, [fp, #-12]
   16098:	str	r2, [fp, #-16]
   1609c:	ldr	r3, [fp, #-16]
   160a0:	ldr	r2, [fp, #-12]
   160a4:	ldr	r1, [fp, #-8]
   160a8:	mov	r0, #0
   160ac:	bl	16000 <__assert_fail@plt+0x4f0c>
   160b0:	mov	r3, r0
   160b4:	mov	r0, r3
   160b8:	sub	sp, fp, #4
   160bc:	pop	{fp, pc}
   160c0:	push	{fp, lr}
   160c4:	add	fp, sp, #4
   160c8:	sub	sp, sp, #64	; 0x40
   160cc:	str	r0, [fp, #-56]	; 0xffffffc8
   160d0:	str	r1, [fp, #-60]	; 0xffffffc4
   160d4:	mov	r3, r2
   160d8:	strb	r3, [fp, #-61]	; 0xffffffc3
   160dc:	ldr	r3, [pc, #84]	; 16138 <__assert_fail@plt+0x5044>
   160e0:	sub	ip, fp, #52	; 0x34
   160e4:	mov	lr, r3
   160e8:	ldm	lr!, {r0, r1, r2, r3}
   160ec:	stmia	ip!, {r0, r1, r2, r3}
   160f0:	ldm	lr!, {r0, r1, r2, r3}
   160f4:	stmia	ip!, {r0, r1, r2, r3}
   160f8:	ldm	lr, {r0, r1, r2, r3}
   160fc:	stm	ip, {r0, r1, r2, r3}
   16100:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   16104:	sub	r3, fp, #52	; 0x34
   16108:	mov	r2, #1
   1610c:	mov	r0, r3
   16110:	bl	13f2c <__assert_fail@plt+0x2e38>
   16114:	sub	r3, fp, #52	; 0x34
   16118:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1611c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16120:	mov	r0, #0
   16124:	bl	15c14 <__assert_fail@plt+0x4b20>
   16128:	mov	r3, r0
   1612c:	mov	r0, r3
   16130:	sub	sp, fp, #4
   16134:	pop	{fp, pc}
   16138:			; <UNDEFINED> instruction: 0x0002b1bc
   1613c:	push	{fp, lr}
   16140:	add	fp, sp, #4
   16144:	sub	sp, sp, #8
   16148:	str	r0, [fp, #-8]
   1614c:	mov	r3, r1
   16150:	strb	r3, [fp, #-9]
   16154:	ldrb	r3, [fp, #-9]
   16158:	mov	r2, r3
   1615c:	mvn	r1, #0
   16160:	ldr	r0, [fp, #-8]
   16164:	bl	160c0 <__assert_fail@plt+0x4fcc>
   16168:	mov	r3, r0
   1616c:	mov	r0, r3
   16170:	sub	sp, fp, #4
   16174:	pop	{fp, pc}
   16178:	push	{fp, lr}
   1617c:	add	fp, sp, #4
   16180:	sub	sp, sp, #8
   16184:	str	r0, [fp, #-8]
   16188:	mov	r1, #58	; 0x3a
   1618c:	ldr	r0, [fp, #-8]
   16190:	bl	1613c <__assert_fail@plt+0x5048>
   16194:	mov	r3, r0
   16198:	mov	r0, r3
   1619c:	sub	sp, fp, #4
   161a0:	pop	{fp, pc}
   161a4:	push	{fp, lr}
   161a8:	add	fp, sp, #4
   161ac:	sub	sp, sp, #8
   161b0:	str	r0, [fp, #-8]
   161b4:	str	r1, [fp, #-12]
   161b8:	mov	r2, #58	; 0x3a
   161bc:	ldr	r1, [fp, #-12]
   161c0:	ldr	r0, [fp, #-8]
   161c4:	bl	160c0 <__assert_fail@plt+0x4fcc>
   161c8:	mov	r3, r0
   161cc:	mov	r0, r3
   161d0:	sub	sp, fp, #4
   161d4:	pop	{fp, pc}
   161d8:	push	{fp, lr}
   161dc:	add	fp, sp, #4
   161e0:	sub	sp, sp, #112	; 0x70
   161e4:	str	r0, [fp, #-56]	; 0xffffffc8
   161e8:	str	r1, [fp, #-60]	; 0xffffffc4
   161ec:	str	r2, [fp, #-64]	; 0xffffffc0
   161f0:	sub	r3, fp, #116	; 0x74
   161f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   161f8:	mov	r0, r3
   161fc:	bl	140c0 <__assert_fail@plt+0x2fcc>
   16200:	sub	ip, fp, #52	; 0x34
   16204:	sub	lr, fp, #116	; 0x74
   16208:	ldm	lr!, {r0, r1, r2, r3}
   1620c:	stmia	ip!, {r0, r1, r2, r3}
   16210:	ldm	lr!, {r0, r1, r2, r3}
   16214:	stmia	ip!, {r0, r1, r2, r3}
   16218:	ldm	lr, {r0, r1, r2, r3}
   1621c:	stm	ip, {r0, r1, r2, r3}
   16220:	sub	r3, fp, #52	; 0x34
   16224:	mov	r2, #1
   16228:	mov	r1, #58	; 0x3a
   1622c:	mov	r0, r3
   16230:	bl	13f2c <__assert_fail@plt+0x2e38>
   16234:	sub	r3, fp, #52	; 0x34
   16238:	mvn	r2, #0
   1623c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16240:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16244:	bl	15c14 <__assert_fail@plt+0x4b20>
   16248:	mov	r3, r0
   1624c:	mov	r0, r3
   16250:	sub	sp, fp, #4
   16254:	pop	{fp, pc}
   16258:	push	{fp, lr}
   1625c:	add	fp, sp, #4
   16260:	sub	sp, sp, #24
   16264:	str	r0, [fp, #-8]
   16268:	str	r1, [fp, #-12]
   1626c:	str	r2, [fp, #-16]
   16270:	str	r3, [fp, #-20]	; 0xffffffec
   16274:	mvn	r3, #0
   16278:	str	r3, [sp]
   1627c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16280:	ldr	r2, [fp, #-16]
   16284:	ldr	r1, [fp, #-12]
   16288:	ldr	r0, [fp, #-8]
   1628c:	bl	162a0 <__assert_fail@plt+0x51ac>
   16290:	mov	r3, r0
   16294:	mov	r0, r3
   16298:	sub	sp, fp, #4
   1629c:	pop	{fp, pc}
   162a0:	push	{fp, lr}
   162a4:	add	fp, sp, #4
   162a8:	sub	sp, sp, #64	; 0x40
   162ac:	str	r0, [fp, #-56]	; 0xffffffc8
   162b0:	str	r1, [fp, #-60]	; 0xffffffc4
   162b4:	str	r2, [fp, #-64]	; 0xffffffc0
   162b8:	str	r3, [fp, #-68]	; 0xffffffbc
   162bc:	ldr	r3, [pc, #84]	; 16318 <__assert_fail@plt+0x5224>
   162c0:	sub	ip, fp, #52	; 0x34
   162c4:	mov	lr, r3
   162c8:	ldm	lr!, {r0, r1, r2, r3}
   162cc:	stmia	ip!, {r0, r1, r2, r3}
   162d0:	ldm	lr!, {r0, r1, r2, r3}
   162d4:	stmia	ip!, {r0, r1, r2, r3}
   162d8:	ldm	lr, {r0, r1, r2, r3}
   162dc:	stm	ip, {r0, r1, r2, r3}
   162e0:	sub	r3, fp, #52	; 0x34
   162e4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   162e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   162ec:	mov	r0, r3
   162f0:	bl	14044 <__assert_fail@plt+0x2f50>
   162f4:	sub	r3, fp, #52	; 0x34
   162f8:	ldr	r2, [fp, #4]
   162fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16300:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16304:	bl	15c14 <__assert_fail@plt+0x4b20>
   16308:	mov	r3, r0
   1630c:	mov	r0, r3
   16310:	sub	sp, fp, #4
   16314:	pop	{fp, pc}
   16318:			; <UNDEFINED> instruction: 0x0002b1bc
   1631c:	push	{fp, lr}
   16320:	add	fp, sp, #4
   16324:	sub	sp, sp, #16
   16328:	str	r0, [fp, #-8]
   1632c:	str	r1, [fp, #-12]
   16330:	str	r2, [fp, #-16]
   16334:	ldr	r3, [fp, #-16]
   16338:	ldr	r2, [fp, #-12]
   1633c:	ldr	r1, [fp, #-8]
   16340:	mov	r0, #0
   16344:	bl	16258 <__assert_fail@plt+0x5164>
   16348:	mov	r3, r0
   1634c:	mov	r0, r3
   16350:	sub	sp, fp, #4
   16354:	pop	{fp, pc}
   16358:	push	{fp, lr}
   1635c:	add	fp, sp, #4
   16360:	sub	sp, sp, #24
   16364:	str	r0, [fp, #-8]
   16368:	str	r1, [fp, #-12]
   1636c:	str	r2, [fp, #-16]
   16370:	str	r3, [fp, #-20]	; 0xffffffec
   16374:	ldr	r3, [fp, #-20]	; 0xffffffec
   16378:	str	r3, [sp]
   1637c:	ldr	r3, [fp, #-16]
   16380:	ldr	r2, [fp, #-12]
   16384:	ldr	r1, [fp, #-8]
   16388:	mov	r0, #0
   1638c:	bl	162a0 <__assert_fail@plt+0x51ac>
   16390:	mov	r3, r0
   16394:	mov	r0, r3
   16398:	sub	sp, fp, #4
   1639c:	pop	{fp, pc}
   163a0:	push	{fp, lr}
   163a4:	add	fp, sp, #4
   163a8:	sub	sp, sp, #16
   163ac:	str	r0, [fp, #-8]
   163b0:	str	r1, [fp, #-12]
   163b4:	str	r2, [fp, #-16]
   163b8:	ldr	r3, [pc, #28]	; 163dc <__assert_fail@plt+0x52e8>
   163bc:	ldr	r2, [fp, #-16]
   163c0:	ldr	r1, [fp, #-12]
   163c4:	ldr	r0, [fp, #-8]
   163c8:	bl	15c14 <__assert_fail@plt+0x4b20>
   163cc:	mov	r3, r0
   163d0:	mov	r0, r3
   163d4:	sub	sp, fp, #4
   163d8:	pop	{fp, pc}
   163dc:	andeq	fp, r2, r4, lsr #2
   163e0:	push	{fp, lr}
   163e4:	add	fp, sp, #4
   163e8:	sub	sp, sp, #8
   163ec:	str	r0, [fp, #-8]
   163f0:	str	r1, [fp, #-12]
   163f4:	ldr	r2, [fp, #-12]
   163f8:	ldr	r1, [fp, #-8]
   163fc:	mov	r0, #0
   16400:	bl	163a0 <__assert_fail@plt+0x52ac>
   16404:	mov	r3, r0
   16408:	mov	r0, r3
   1640c:	sub	sp, fp, #4
   16410:	pop	{fp, pc}
   16414:	push	{fp, lr}
   16418:	add	fp, sp, #4
   1641c:	sub	sp, sp, #8
   16420:	str	r0, [fp, #-8]
   16424:	str	r1, [fp, #-12]
   16428:	mvn	r2, #0
   1642c:	ldr	r1, [fp, #-12]
   16430:	ldr	r0, [fp, #-8]
   16434:	bl	163a0 <__assert_fail@plt+0x52ac>
   16438:	mov	r3, r0
   1643c:	mov	r0, r3
   16440:	sub	sp, fp, #4
   16444:	pop	{fp, pc}
   16448:	push	{fp, lr}
   1644c:	add	fp, sp, #4
   16450:	sub	sp, sp, #8
   16454:	str	r0, [fp, #-8]
   16458:	ldr	r1, [fp, #-8]
   1645c:	mov	r0, #0
   16460:	bl	16414 <__assert_fail@plt+0x5320>
   16464:	mov	r3, r0
   16468:	mov	r0, r3
   1646c:	sub	sp, fp, #4
   16470:	pop	{fp, pc}
   16474:	push	{r4, r5, r6, r7, fp, lr}
   16478:	add	fp, sp, #20
   1647c:	sub	sp, sp, #48	; 0x30
   16480:	str	r0, [fp, #-24]	; 0xffffffe8
   16484:	str	r1, [fp, #-28]	; 0xffffffe4
   16488:	str	r2, [fp, #-32]	; 0xffffffe0
   1648c:	str	r3, [fp, #-36]	; 0xffffffdc
   16490:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16494:	cmp	r3, #0
   16498:	beq	164bc <__assert_fail@plt+0x53c8>
   1649c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164a0:	str	r3, [sp]
   164a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   164ac:	ldr	r1, [pc, #1260]	; 169a0 <__assert_fail@plt+0x58ac>
   164b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164b4:	bl	10fec <fprintf@plt>
   164b8:	b	164d0 <__assert_fail@plt+0x53dc>
   164bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   164c4:	ldr	r1, [pc, #1240]	; 169a4 <__assert_fail@plt+0x58b0>
   164c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164cc:	bl	10fec <fprintf@plt>
   164d0:	ldr	r0, [pc, #1232]	; 169a8 <__assert_fail@plt+0x58b4>
   164d4:	bl	10fd4 <gettext@plt>
   164d8:	mov	r2, r0
   164dc:	ldr	r3, [pc, #1224]	; 169ac <__assert_fail@plt+0x58b8>
   164e0:	ldr	r1, [pc, #1224]	; 169b0 <__assert_fail@plt+0x58bc>
   164e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164e8:	bl	10fec <fprintf@plt>
   164ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   164f0:	mov	r0, #10
   164f4:	bl	10ee4 <fputc_unlocked@plt>
   164f8:	ldr	r0, [pc, #1204]	; 169b4 <__assert_fail@plt+0x58c0>
   164fc:	bl	10fd4 <gettext@plt>
   16500:	mov	r3, r0
   16504:	ldr	r2, [pc, #1196]	; 169b8 <__assert_fail@plt+0x58c4>
   16508:	mov	r1, r3
   1650c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16510:	bl	10fec <fprintf@plt>
   16514:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16518:	mov	r0, #10
   1651c:	bl	10ee4 <fputc_unlocked@plt>
   16520:	ldr	r3, [fp, #8]
   16524:	cmp	r3, #9
   16528:	ldrls	pc, [pc, r3, lsl #2]
   1652c:	b	168e8 <__assert_fail@plt+0x57f4>
   16530:	muleq	r1, r0, r9
   16534:	andeq	r6, r1, r8, asr r5
   16538:	andeq	r6, r1, ip, ror r5
   1653c:	andeq	r6, r1, r8, lsr #11
   16540:	andeq	r6, r1, r8, ror #11
   16544:	andeq	r6, r1, r0, asr #12
   16548:	andeq	r6, r1, r8, lsr #13
   1654c:	andeq	r6, r1, r0, lsr #14
   16550:	andeq	r6, r1, r8, lsr #15
   16554:	andeq	r6, r1, r0, asr #16
   16558:	ldr	r0, [pc, #1116]	; 169bc <__assert_fail@plt+0x58c8>
   1655c:	bl	10fd4 <gettext@plt>
   16560:	mov	r1, r0
   16564:	ldr	r3, [fp, #4]
   16568:	ldr	r3, [r3]
   1656c:	mov	r2, r3
   16570:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16574:	bl	10fec <fprintf@plt>
   16578:	b	16994 <__assert_fail@plt+0x58a0>
   1657c:	ldr	r0, [pc, #1084]	; 169c0 <__assert_fail@plt+0x58cc>
   16580:	bl	10fd4 <gettext@plt>
   16584:	mov	r1, r0
   16588:	ldr	r3, [fp, #4]
   1658c:	ldr	r2, [r3]
   16590:	ldr	r3, [fp, #4]
   16594:	add	r3, r3, #4
   16598:	ldr	r3, [r3]
   1659c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165a0:	bl	10fec <fprintf@plt>
   165a4:	b	16994 <__assert_fail@plt+0x58a0>
   165a8:	ldr	r0, [pc, #1044]	; 169c4 <__assert_fail@plt+0x58d0>
   165ac:	bl	10fd4 <gettext@plt>
   165b0:	ldr	r3, [fp, #4]
   165b4:	ldr	r2, [r3]
   165b8:	ldr	r3, [fp, #4]
   165bc:	add	r3, r3, #4
   165c0:	ldr	r1, [r3]
   165c4:	ldr	r3, [fp, #4]
   165c8:	add	r3, r3, #8
   165cc:	ldr	r3, [r3]
   165d0:	str	r3, [sp]
   165d4:	mov	r3, r1
   165d8:	mov	r1, r0
   165dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165e0:	bl	10fec <fprintf@plt>
   165e4:	b	16994 <__assert_fail@plt+0x58a0>
   165e8:	ldr	r0, [pc, #984]	; 169c8 <__assert_fail@plt+0x58d4>
   165ec:	bl	10fd4 <gettext@plt>
   165f0:	mov	ip, r0
   165f4:	ldr	r3, [fp, #4]
   165f8:	ldr	r1, [r3]
   165fc:	ldr	r3, [fp, #4]
   16600:	add	r3, r3, #4
   16604:	ldr	r0, [r3]
   16608:	ldr	r3, [fp, #4]
   1660c:	add	r3, r3, #8
   16610:	ldr	r3, [r3]
   16614:	ldr	r2, [fp, #4]
   16618:	add	r2, r2, #12
   1661c:	ldr	r2, [r2]
   16620:	str	r2, [sp, #4]
   16624:	str	r3, [sp]
   16628:	mov	r3, r0
   1662c:	mov	r2, r1
   16630:	mov	r1, ip
   16634:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16638:	bl	10fec <fprintf@plt>
   1663c:	b	16994 <__assert_fail@plt+0x58a0>
   16640:	ldr	r0, [pc, #900]	; 169cc <__assert_fail@plt+0x58d8>
   16644:	bl	10fd4 <gettext@plt>
   16648:	mov	lr, r0
   1664c:	ldr	r3, [fp, #4]
   16650:	ldr	r0, [r3]
   16654:	ldr	r3, [fp, #4]
   16658:	add	r3, r3, #4
   1665c:	ldr	ip, [r3]
   16660:	ldr	r3, [fp, #4]
   16664:	add	r3, r3, #8
   16668:	ldr	r3, [r3]
   1666c:	ldr	r2, [fp, #4]
   16670:	add	r2, r2, #12
   16674:	ldr	r2, [r2]
   16678:	ldr	r1, [fp, #4]
   1667c:	add	r1, r1, #16
   16680:	ldr	r1, [r1]
   16684:	str	r1, [sp, #8]
   16688:	str	r2, [sp, #4]
   1668c:	str	r3, [sp]
   16690:	mov	r3, ip
   16694:	mov	r2, r0
   16698:	mov	r1, lr
   1669c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166a0:	bl	10fec <fprintf@plt>
   166a4:	b	16994 <__assert_fail@plt+0x58a0>
   166a8:	ldr	r0, [pc, #800]	; 169d0 <__assert_fail@plt+0x58dc>
   166ac:	bl	10fd4 <gettext@plt>
   166b0:	mov	r4, r0
   166b4:	ldr	r3, [fp, #4]
   166b8:	ldr	ip, [r3]
   166bc:	ldr	r3, [fp, #4]
   166c0:	add	r3, r3, #4
   166c4:	ldr	lr, [r3]
   166c8:	ldr	r3, [fp, #4]
   166cc:	add	r3, r3, #8
   166d0:	ldr	r3, [r3]
   166d4:	ldr	r2, [fp, #4]
   166d8:	add	r2, r2, #12
   166dc:	ldr	r2, [r2]
   166e0:	ldr	r1, [fp, #4]
   166e4:	add	r1, r1, #16
   166e8:	ldr	r1, [r1]
   166ec:	ldr	r0, [fp, #4]
   166f0:	add	r0, r0, #20
   166f4:	ldr	r0, [r0]
   166f8:	str	r0, [sp, #12]
   166fc:	str	r1, [sp, #8]
   16700:	str	r2, [sp, #4]
   16704:	str	r3, [sp]
   16708:	mov	r3, lr
   1670c:	mov	r2, ip
   16710:	mov	r1, r4
   16714:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16718:	bl	10fec <fprintf@plt>
   1671c:	b	16994 <__assert_fail@plt+0x58a0>
   16720:	ldr	r0, [pc, #684]	; 169d4 <__assert_fail@plt+0x58e0>
   16724:	bl	10fd4 <gettext@plt>
   16728:	mov	r5, r0
   1672c:	ldr	r3, [fp, #4]
   16730:	ldr	lr, [r3]
   16734:	ldr	r3, [fp, #4]
   16738:	add	r3, r3, #4
   1673c:	ldr	r4, [r3]
   16740:	ldr	r3, [fp, #4]
   16744:	add	r3, r3, #8
   16748:	ldr	r3, [r3]
   1674c:	ldr	r2, [fp, #4]
   16750:	add	r2, r2, #12
   16754:	ldr	r2, [r2]
   16758:	ldr	r1, [fp, #4]
   1675c:	add	r1, r1, #16
   16760:	ldr	r1, [r1]
   16764:	ldr	r0, [fp, #4]
   16768:	add	r0, r0, #20
   1676c:	ldr	r0, [r0]
   16770:	ldr	ip, [fp, #4]
   16774:	add	ip, ip, #24
   16778:	ldr	ip, [ip]
   1677c:	str	ip, [sp, #16]
   16780:	str	r0, [sp, #12]
   16784:	str	r1, [sp, #8]
   16788:	str	r2, [sp, #4]
   1678c:	str	r3, [sp]
   16790:	mov	r3, r4
   16794:	mov	r2, lr
   16798:	mov	r1, r5
   1679c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167a0:	bl	10fec <fprintf@plt>
   167a4:	b	16994 <__assert_fail@plt+0x58a0>
   167a8:	ldr	r0, [pc, #552]	; 169d8 <__assert_fail@plt+0x58e4>
   167ac:	bl	10fd4 <gettext@plt>
   167b0:	mov	r6, r0
   167b4:	ldr	r3, [fp, #4]
   167b8:	ldr	r4, [r3]
   167bc:	ldr	r3, [fp, #4]
   167c0:	add	r3, r3, #4
   167c4:	ldr	r5, [r3]
   167c8:	ldr	r3, [fp, #4]
   167cc:	add	r3, r3, #8
   167d0:	ldr	r3, [r3]
   167d4:	ldr	r2, [fp, #4]
   167d8:	add	r2, r2, #12
   167dc:	ldr	r2, [r2]
   167e0:	ldr	r1, [fp, #4]
   167e4:	add	r1, r1, #16
   167e8:	ldr	r1, [r1]
   167ec:	ldr	r0, [fp, #4]
   167f0:	add	r0, r0, #20
   167f4:	ldr	r0, [r0]
   167f8:	ldr	ip, [fp, #4]
   167fc:	add	ip, ip, #24
   16800:	ldr	ip, [ip]
   16804:	ldr	lr, [fp, #4]
   16808:	add	lr, lr, #28
   1680c:	ldr	lr, [lr]
   16810:	str	lr, [sp, #20]
   16814:	str	ip, [sp, #16]
   16818:	str	r0, [sp, #12]
   1681c:	str	r1, [sp, #8]
   16820:	str	r2, [sp, #4]
   16824:	str	r3, [sp]
   16828:	mov	r3, r5
   1682c:	mov	r2, r4
   16830:	mov	r1, r6
   16834:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16838:	bl	10fec <fprintf@plt>
   1683c:	b	16994 <__assert_fail@plt+0x58a0>
   16840:	ldr	r0, [pc, #404]	; 169dc <__assert_fail@plt+0x58e8>
   16844:	bl	10fd4 <gettext@plt>
   16848:	mov	r7, r0
   1684c:	ldr	r3, [fp, #4]
   16850:	ldr	r5, [r3]
   16854:	ldr	r3, [fp, #4]
   16858:	add	r3, r3, #4
   1685c:	ldr	r6, [r3]
   16860:	ldr	r3, [fp, #4]
   16864:	add	r3, r3, #8
   16868:	ldr	r3, [r3]
   1686c:	ldr	r2, [fp, #4]
   16870:	add	r2, r2, #12
   16874:	ldr	r2, [r2]
   16878:	ldr	r1, [fp, #4]
   1687c:	add	r1, r1, #16
   16880:	ldr	r1, [r1]
   16884:	ldr	r0, [fp, #4]
   16888:	add	r0, r0, #20
   1688c:	ldr	r0, [r0]
   16890:	ldr	ip, [fp, #4]
   16894:	add	ip, ip, #24
   16898:	ldr	ip, [ip]
   1689c:	ldr	lr, [fp, #4]
   168a0:	add	lr, lr, #28
   168a4:	ldr	lr, [lr]
   168a8:	ldr	r4, [fp, #4]
   168ac:	add	r4, r4, #32
   168b0:	ldr	r4, [r4]
   168b4:	str	r4, [sp, #24]
   168b8:	str	lr, [sp, #20]
   168bc:	str	ip, [sp, #16]
   168c0:	str	r0, [sp, #12]
   168c4:	str	r1, [sp, #8]
   168c8:	str	r2, [sp, #4]
   168cc:	str	r3, [sp]
   168d0:	mov	r3, r6
   168d4:	mov	r2, r5
   168d8:	mov	r1, r7
   168dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168e0:	bl	10fec <fprintf@plt>
   168e4:	b	16994 <__assert_fail@plt+0x58a0>
   168e8:	ldr	r0, [pc, #240]	; 169e0 <__assert_fail@plt+0x58ec>
   168ec:	bl	10fd4 <gettext@plt>
   168f0:	mov	r7, r0
   168f4:	ldr	r3, [fp, #4]
   168f8:	ldr	r5, [r3]
   168fc:	ldr	r3, [fp, #4]
   16900:	add	r3, r3, #4
   16904:	ldr	r6, [r3]
   16908:	ldr	r3, [fp, #4]
   1690c:	add	r3, r3, #8
   16910:	ldr	r3, [r3]
   16914:	ldr	r2, [fp, #4]
   16918:	add	r2, r2, #12
   1691c:	ldr	r2, [r2]
   16920:	ldr	r1, [fp, #4]
   16924:	add	r1, r1, #16
   16928:	ldr	r1, [r1]
   1692c:	ldr	r0, [fp, #4]
   16930:	add	r0, r0, #20
   16934:	ldr	r0, [r0]
   16938:	ldr	ip, [fp, #4]
   1693c:	add	ip, ip, #24
   16940:	ldr	ip, [ip]
   16944:	ldr	lr, [fp, #4]
   16948:	add	lr, lr, #28
   1694c:	ldr	lr, [lr]
   16950:	ldr	r4, [fp, #4]
   16954:	add	r4, r4, #32
   16958:	ldr	r4, [r4]
   1695c:	str	r4, [sp, #24]
   16960:	str	lr, [sp, #20]
   16964:	str	ip, [sp, #16]
   16968:	str	r0, [sp, #12]
   1696c:	str	r1, [sp, #8]
   16970:	str	r2, [sp, #4]
   16974:	str	r3, [sp]
   16978:	mov	r3, r6
   1697c:	mov	r2, r5
   16980:	mov	r1, r7
   16984:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16988:	bl	10fec <fprintf@plt>
   1698c:	b	16994 <__assert_fail@plt+0x58a0>
   16990:	nop			; (mov r0, r0)
   16994:	nop			; (mov r0, r0)
   16998:	sub	sp, fp, #20
   1699c:	pop	{r4, r5, r6, r7, fp, pc}
   169a0:	andeq	r9, r1, r8, asr #24
   169a4:	andeq	r9, r1, r4, asr ip
   169a8:	andeq	r9, r1, ip, asr ip
   169ac:	andeq	r0, r0, r6, ror #15
   169b0:	andeq	r9, r1, ip, ror #30
   169b4:	andeq	r9, r1, r0, ror #24
   169b8:	andeq	r9, r1, ip, lsl #26
   169bc:	andeq	r9, r1, r0, lsr sp
   169c0:	andeq	r9, r1, r0, asr #26
   169c4:	andeq	r9, r1, r8, asr sp
   169c8:	andeq	r9, r1, r4, ror sp
   169cc:	muleq	r1, r4, sp
   169d0:			; <UNDEFINED> instruction: 0x00019db8
   169d4:	andeq	r9, r1, r0, ror #27
   169d8:	andeq	r9, r1, ip, lsl #28
   169dc:	andeq	r9, r1, ip, lsr lr
   169e0:	andeq	r9, r1, r0, ror lr
   169e4:	push	{fp, lr}
   169e8:	add	fp, sp, #4
   169ec:	sub	sp, sp, #32
   169f0:	str	r0, [fp, #-16]
   169f4:	str	r1, [fp, #-20]	; 0xffffffec
   169f8:	str	r2, [fp, #-24]	; 0xffffffe8
   169fc:	str	r3, [fp, #-28]	; 0xffffffe4
   16a00:	mov	r3, #0
   16a04:	str	r3, [fp, #-8]
   16a08:	b	16a18 <__assert_fail@plt+0x5924>
   16a0c:	ldr	r3, [fp, #-8]
   16a10:	add	r3, r3, #1
   16a14:	str	r3, [fp, #-8]
   16a18:	ldr	r3, [fp, #-8]
   16a1c:	lsl	r3, r3, #2
   16a20:	ldr	r2, [fp, #4]
   16a24:	add	r3, r2, r3
   16a28:	ldr	r3, [r3]
   16a2c:	cmp	r3, #0
   16a30:	bne	16a0c <__assert_fail@plt+0x5918>
   16a34:	ldr	r3, [fp, #-8]
   16a38:	str	r3, [sp, #4]
   16a3c:	ldr	r3, [fp, #4]
   16a40:	str	r3, [sp]
   16a44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16a4c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16a50:	ldr	r0, [fp, #-16]
   16a54:	bl	16474 <__assert_fail@plt+0x5380>
   16a58:	nop			; (mov r0, r0)
   16a5c:	sub	sp, fp, #4
   16a60:	pop	{fp, pc}
   16a64:	push	{fp, lr}
   16a68:	add	fp, sp, #4
   16a6c:	sub	sp, sp, #72	; 0x48
   16a70:	str	r0, [fp, #-56]	; 0xffffffc8
   16a74:	str	r1, [fp, #-60]	; 0xffffffc4
   16a78:	str	r2, [fp, #-64]	; 0xffffffc0
   16a7c:	str	r3, [fp, #-68]	; 0xffffffbc
   16a80:	mov	r3, #0
   16a84:	str	r3, [fp, #-8]
   16a88:	b	16a98 <__assert_fail@plt+0x59a4>
   16a8c:	ldr	r3, [fp, #-8]
   16a90:	add	r3, r3, #1
   16a94:	str	r3, [fp, #-8]
   16a98:	ldr	r3, [fp, #-8]
   16a9c:	cmp	r3, #9
   16aa0:	bhi	16ae4 <__assert_fail@plt+0x59f0>
   16aa4:	ldr	r3, [fp, #4]
   16aa8:	add	r2, r3, #4
   16aac:	str	r2, [fp, #4]
   16ab0:	ldr	r2, [r3]
   16ab4:	ldr	r3, [fp, #-8]
   16ab8:	lsl	r3, r3, #2
   16abc:	sub	r1, fp, #4
   16ac0:	add	r3, r1, r3
   16ac4:	str	r2, [r3, #-44]	; 0xffffffd4
   16ac8:	ldr	r3, [fp, #-8]
   16acc:	lsl	r3, r3, #2
   16ad0:	sub	r2, fp, #4
   16ad4:	add	r3, r2, r3
   16ad8:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16adc:	cmp	r3, #0
   16ae0:	bne	16a8c <__assert_fail@plt+0x5998>
   16ae4:	ldr	r3, [fp, #-8]
   16ae8:	str	r3, [sp, #4]
   16aec:	sub	r3, fp, #48	; 0x30
   16af0:	str	r3, [sp]
   16af4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16af8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16afc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16b00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b04:	bl	16474 <__assert_fail@plt+0x5380>
   16b08:	nop			; (mov r0, r0)
   16b0c:	sub	sp, fp, #4
   16b10:	pop	{fp, pc}
   16b14:	push	{r3}		; (str r3, [sp, #-4]!)
   16b18:	push	{fp, lr}
   16b1c:	add	fp, sp, #4
   16b20:	sub	sp, sp, #36	; 0x24
   16b24:	str	r0, [fp, #-20]	; 0xffffffec
   16b28:	str	r1, [fp, #-24]	; 0xffffffe8
   16b2c:	str	r2, [fp, #-28]	; 0xffffffe4
   16b30:	add	r3, fp, #8
   16b34:	str	r3, [fp, #-12]
   16b38:	ldr	r3, [fp, #-12]
   16b3c:	str	r3, [sp]
   16b40:	ldr	r3, [fp, #4]
   16b44:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16b4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16b50:	bl	16a64 <__assert_fail@plt+0x5970>
   16b54:	nop			; (mov r0, r0)
   16b58:	sub	sp, fp, #4
   16b5c:	pop	{fp, lr}
   16b60:	add	sp, sp, #4
   16b64:	bx	lr
   16b68:	push	{fp, lr}
   16b6c:	add	fp, sp, #4
   16b70:	ldr	r3, [pc, #96]	; 16bd8 <__assert_fail@plt+0x5ae4>
   16b74:	ldr	r3, [r3]
   16b78:	mov	r1, r3
   16b7c:	mov	r0, #10
   16b80:	bl	10ee4 <fputc_unlocked@plt>
   16b84:	ldr	r0, [pc, #80]	; 16bdc <__assert_fail@plt+0x5ae8>
   16b88:	bl	10fd4 <gettext@plt>
   16b8c:	mov	r3, r0
   16b90:	ldr	r1, [pc, #72]	; 16be0 <__assert_fail@plt+0x5aec>
   16b94:	mov	r0, r3
   16b98:	bl	10e6c <printf@plt>
   16b9c:	ldr	r0, [pc, #64]	; 16be4 <__assert_fail@plt+0x5af0>
   16ba0:	bl	10fd4 <gettext@plt>
   16ba4:	mov	r3, r0
   16ba8:	ldr	r2, [pc, #56]	; 16be8 <__assert_fail@plt+0x5af4>
   16bac:	ldr	r1, [pc, #56]	; 16bec <__assert_fail@plt+0x5af8>
   16bb0:	mov	r0, r3
   16bb4:	bl	10e6c <printf@plt>
   16bb8:	ldr	r0, [pc, #48]	; 16bf0 <__assert_fail@plt+0x5afc>
   16bbc:	bl	10fd4 <gettext@plt>
   16bc0:	mov	r3, r0
   16bc4:	ldr	r1, [pc, #40]	; 16bf4 <__assert_fail@plt+0x5b00>
   16bc8:	mov	r0, r3
   16bcc:	bl	10e6c <printf@plt>
   16bd0:	nop			; (mov r0, r0)
   16bd4:	pop	{fp, pc}
   16bd8:	andeq	fp, r2, r4, ror r1
   16bdc:	andeq	r9, r1, ip, lsr #29
   16be0:	andeq	r9, r1, r0, asr #29
   16be4:	ldrdeq	r9, [r1], -r8
   16be8:	andeq	r9, r1, ip, ror #29
   16bec:	andeq	r9, r1, r4, lsl pc
   16bf0:	andeq	r9, r1, r4, lsr #30
   16bf4:	andeq	r9, r1, ip, asr #30
   16bf8:	push	{fp, lr}
   16bfc:	add	fp, sp, #4
   16c00:	sub	sp, sp, #16
   16c04:	str	r0, [fp, #-8]
   16c08:	str	r1, [fp, #-12]
   16c0c:	str	r2, [fp, #-16]
   16c10:	ldr	r2, [fp, #-16]
   16c14:	ldr	r1, [fp, #-12]
   16c18:	ldr	r0, [fp, #-8]
   16c1c:	bl	16d88 <__assert_fail@plt+0x5c94>
   16c20:	mov	r3, r0
   16c24:	mov	r0, r3
   16c28:	sub	sp, fp, #4
   16c2c:	pop	{fp, pc}
   16c30:	push	{fp, lr}
   16c34:	add	fp, sp, #4
   16c38:	sub	sp, sp, #8
   16c3c:	str	r0, [fp, #-8]
   16c40:	ldr	r3, [fp, #-8]
   16c44:	cmp	r3, #0
   16c48:	bne	16c50 <__assert_fail@plt+0x5b5c>
   16c4c:	bl	1777c <__assert_fail@plt+0x6688>
   16c50:	ldr	r3, [fp, #-8]
   16c54:	mov	r0, r3
   16c58:	sub	sp, fp, #4
   16c5c:	pop	{fp, pc}
   16c60:	push	{fp, lr}
   16c64:	add	fp, sp, #4
   16c68:	sub	sp, sp, #8
   16c6c:	str	r0, [fp, #-8]
   16c70:	ldr	r0, [fp, #-8]
   16c74:	bl	1787c <__assert_fail@plt+0x6788>
   16c78:	mov	r3, r0
   16c7c:	mov	r0, r3
   16c80:	bl	16c30 <__assert_fail@plt+0x5b3c>
   16c84:	mov	r3, r0
   16c88:	mov	r0, r3
   16c8c:	sub	sp, fp, #4
   16c90:	pop	{fp, pc}
   16c94:	push	{fp, lr}
   16c98:	add	fp, sp, #4
   16c9c:	sub	sp, sp, #8
   16ca0:	str	r0, [fp, #-8]
   16ca4:	ldr	r0, [fp, #-8]
   16ca8:	bl	17f34 <__assert_fail@plt+0x6e40>
   16cac:	mov	r3, r0
   16cb0:	mov	r0, r3
   16cb4:	bl	16c30 <__assert_fail@plt+0x5b3c>
   16cb8:	mov	r3, r0
   16cbc:	mov	r0, r3
   16cc0:	sub	sp, fp, #4
   16cc4:	pop	{fp, pc}
   16cc8:	push	{fp, lr}
   16ccc:	add	fp, sp, #4
   16cd0:	sub	sp, sp, #8
   16cd4:	str	r0, [fp, #-8]
   16cd8:	ldr	r0, [fp, #-8]
   16cdc:	bl	16c60 <__assert_fail@plt+0x5b6c>
   16ce0:	mov	r3, r0
   16ce4:	mov	r0, r3
   16ce8:	sub	sp, fp, #4
   16cec:	pop	{fp, pc}
   16cf0:	push	{fp, lr}
   16cf4:	add	fp, sp, #4
   16cf8:	sub	sp, sp, #16
   16cfc:	str	r0, [fp, #-16]
   16d00:	str	r1, [fp, #-20]	; 0xffffffec
   16d04:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d08:	ldr	r0, [fp, #-16]
   16d0c:	bl	17924 <__assert_fail@plt+0x6830>
   16d10:	str	r0, [fp, #-8]
   16d14:	ldr	r3, [fp, #-8]
   16d18:	cmp	r3, #0
   16d1c:	bne	16d3c <__assert_fail@plt+0x5c48>
   16d20:	ldr	r3, [fp, #-16]
   16d24:	cmp	r3, #0
   16d28:	beq	16d38 <__assert_fail@plt+0x5c44>
   16d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d30:	cmp	r3, #0
   16d34:	beq	16d3c <__assert_fail@plt+0x5c48>
   16d38:	bl	1777c <__assert_fail@plt+0x6688>
   16d3c:	ldr	r3, [fp, #-8]
   16d40:	mov	r0, r3
   16d44:	sub	sp, fp, #4
   16d48:	pop	{fp, pc}
   16d4c:	push	{fp, lr}
   16d50:	add	fp, sp, #4
   16d54:	sub	sp, sp, #8
   16d58:	str	r0, [fp, #-8]
   16d5c:	str	r1, [fp, #-12]
   16d60:	ldr	r1, [fp, #-12]
   16d64:	ldr	r0, [fp, #-8]
   16d68:	bl	17f60 <__assert_fail@plt+0x6e6c>
   16d6c:	mov	r3, r0
   16d70:	mov	r0, r3
   16d74:	bl	16c30 <__assert_fail@plt+0x5b3c>
   16d78:	mov	r3, r0
   16d7c:	mov	r0, r3
   16d80:	sub	sp, fp, #4
   16d84:	pop	{fp, pc}
   16d88:	push	{fp, lr}
   16d8c:	add	fp, sp, #4
   16d90:	sub	sp, sp, #24
   16d94:	str	r0, [fp, #-16]
   16d98:	str	r1, [fp, #-20]	; 0xffffffec
   16d9c:	str	r2, [fp, #-24]	; 0xffffffe8
   16da0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16da4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16da8:	ldr	r0, [fp, #-16]
   16dac:	bl	18154 <__assert_fail@plt+0x7060>
   16db0:	str	r0, [fp, #-8]
   16db4:	ldr	r3, [fp, #-8]
   16db8:	cmp	r3, #0
   16dbc:	bne	16de8 <__assert_fail@plt+0x5cf4>
   16dc0:	ldr	r3, [fp, #-16]
   16dc4:	cmp	r3, #0
   16dc8:	beq	16de4 <__assert_fail@plt+0x5cf0>
   16dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16dd0:	cmp	r3, #0
   16dd4:	beq	16de8 <__assert_fail@plt+0x5cf4>
   16dd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ddc:	cmp	r3, #0
   16de0:	beq	16de8 <__assert_fail@plt+0x5cf4>
   16de4:	bl	1777c <__assert_fail@plt+0x6688>
   16de8:	ldr	r3, [fp, #-8]
   16dec:	mov	r0, r3
   16df0:	sub	sp, fp, #4
   16df4:	pop	{fp, pc}
   16df8:	push	{fp, lr}
   16dfc:	add	fp, sp, #4
   16e00:	sub	sp, sp, #16
   16e04:	str	r0, [fp, #-8]
   16e08:	str	r1, [fp, #-12]
   16e0c:	str	r2, [fp, #-16]
   16e10:	ldr	r2, [fp, #-16]
   16e14:	ldr	r1, [fp, #-12]
   16e18:	ldr	r0, [fp, #-8]
   16e1c:	bl	17fe8 <__assert_fail@plt+0x6ef4>
   16e20:	mov	r3, r0
   16e24:	mov	r0, r3
   16e28:	bl	16c30 <__assert_fail@plt+0x5b3c>
   16e2c:	mov	r3, r0
   16e30:	mov	r0, r3
   16e34:	sub	sp, fp, #4
   16e38:	pop	{fp, pc}
   16e3c:	push	{fp, lr}
   16e40:	add	fp, sp, #4
   16e44:	sub	sp, sp, #8
   16e48:	str	r0, [fp, #-8]
   16e4c:	str	r1, [fp, #-12]
   16e50:	ldr	r2, [fp, #-12]
   16e54:	ldr	r1, [fp, #-8]
   16e58:	mov	r0, #0
   16e5c:	bl	16d88 <__assert_fail@plt+0x5c94>
   16e60:	mov	r3, r0
   16e64:	mov	r0, r3
   16e68:	sub	sp, fp, #4
   16e6c:	pop	{fp, pc}
   16e70:	push	{fp, lr}
   16e74:	add	fp, sp, #4
   16e78:	sub	sp, sp, #8
   16e7c:	str	r0, [fp, #-8]
   16e80:	str	r1, [fp, #-12]
   16e84:	ldr	r2, [fp, #-12]
   16e88:	ldr	r1, [fp, #-8]
   16e8c:	mov	r0, #0
   16e90:	bl	16df8 <__assert_fail@plt+0x5d04>
   16e94:	mov	r3, r0
   16e98:	mov	r0, r3
   16e9c:	sub	sp, fp, #4
   16ea0:	pop	{fp, pc}
   16ea4:	push	{fp, lr}
   16ea8:	add	fp, sp, #4
   16eac:	sub	sp, sp, #8
   16eb0:	str	r0, [fp, #-8]
   16eb4:	str	r1, [fp, #-12]
   16eb8:	mov	r2, #1
   16ebc:	ldr	r1, [fp, #-12]
   16ec0:	ldr	r0, [fp, #-8]
   16ec4:	bl	16ed8 <__assert_fail@plt+0x5de4>
   16ec8:	mov	r3, r0
   16ecc:	mov	r0, r3
   16ed0:	sub	sp, fp, #4
   16ed4:	pop	{fp, pc}
   16ed8:	push	{fp, lr}
   16edc:	add	fp, sp, #4
   16ee0:	sub	sp, sp, #24
   16ee4:	str	r0, [fp, #-16]
   16ee8:	str	r1, [fp, #-20]	; 0xffffffec
   16eec:	str	r2, [fp, #-24]	; 0xffffffe8
   16ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ef4:	ldr	r3, [r3]
   16ef8:	str	r3, [fp, #-8]
   16efc:	ldr	r3, [fp, #-16]
   16f00:	cmp	r3, #0
   16f04:	bne	16f50 <__assert_fail@plt+0x5e5c>
   16f08:	ldr	r3, [fp, #-8]
   16f0c:	cmp	r3, #0
   16f10:	bne	16fb4 <__assert_fail@plt+0x5ec0>
   16f14:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16f18:	mov	r0, #64	; 0x40
   16f1c:	bl	1898c <__assert_fail@plt+0x7898>
   16f20:	mov	r3, r0
   16f24:	str	r3, [fp, #-8]
   16f28:	ldr	r3, [fp, #-8]
   16f2c:	cmp	r3, #0
   16f30:	moveq	r3, #1
   16f34:	movne	r3, #0
   16f38:	uxtb	r3, r3
   16f3c:	mov	r2, r3
   16f40:	ldr	r3, [fp, #-8]
   16f44:	add	r3, r2, r3
   16f48:	str	r3, [fp, #-8]
   16f4c:	b	16fb4 <__assert_fail@plt+0x5ec0>
   16f50:	ldr	r3, [fp, #-8]
   16f54:	lsr	r3, r3, #1
   16f58:	add	r3, r3, #1
   16f5c:	mvn	r2, r3
   16f60:	ldr	r3, [fp, #-8]
   16f64:	cmp	r2, r3
   16f68:	bcs	16f8c <__assert_fail@plt+0x5e98>
   16f6c:	ldr	r3, [fp, #-8]
   16f70:	lsr	r2, r3, #1
   16f74:	ldr	r3, [fp, #-8]
   16f78:	add	r3, r2, r3
   16f7c:	add	r3, r3, #1
   16f80:	str	r3, [fp, #-8]
   16f84:	mov	r3, #1
   16f88:	b	16fa8 <__assert_fail@plt+0x5eb4>
   16f8c:	ldr	r3, [fp, #-8]
   16f90:	lsr	r2, r3, #1
   16f94:	ldr	r3, [fp, #-8]
   16f98:	add	r3, r2, r3
   16f9c:	add	r3, r3, #1
   16fa0:	str	r3, [fp, #-8]
   16fa4:	mov	r3, #0
   16fa8:	cmp	r3, #0
   16fac:	beq	16fb4 <__assert_fail@plt+0x5ec0>
   16fb0:	bl	1777c <__assert_fail@plt+0x6688>
   16fb4:	ldr	r3, [fp, #-8]
   16fb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16fbc:	mov	r1, r3
   16fc0:	ldr	r0, [fp, #-16]
   16fc4:	bl	16d88 <__assert_fail@plt+0x5c94>
   16fc8:	str	r0, [fp, #-16]
   16fcc:	ldr	r2, [fp, #-8]
   16fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fd4:	str	r2, [r3]
   16fd8:	ldr	r3, [fp, #-16]
   16fdc:	mov	r0, r3
   16fe0:	sub	sp, fp, #4
   16fe4:	pop	{fp, pc}
   16fe8:	push	{fp, lr}
   16fec:	add	fp, sp, #4
   16ff0:	sub	sp, sp, #32
   16ff4:	str	r0, [fp, #-24]	; 0xffffffe8
   16ff8:	str	r1, [fp, #-28]	; 0xffffffe4
   16ffc:	str	r2, [fp, #-32]	; 0xffffffe0
   17000:	str	r3, [fp, #-36]	; 0xffffffdc
   17004:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17008:	ldr	r3, [r3]
   1700c:	str	r3, [fp, #-8]
   17010:	ldr	r3, [fp, #-8]
   17014:	asr	r3, r3, #1
   17018:	cmp	r3, #0
   1701c:	bge	17044 <__assert_fail@plt+0x5f50>
   17020:	ldr	r3, [fp, #-8]
   17024:	asr	r3, r3, #1
   17028:	rsb	r2, r3, #-2147483648	; 0x80000000
   1702c:	ldr	r3, [fp, #-8]
   17030:	cmp	r2, r3
   17034:	movgt	r3, #1
   17038:	movle	r3, #0
   1703c:	uxtb	r3, r3
   17040:	b	17098 <__assert_fail@plt+0x5fa4>
   17044:	ldr	r3, [fp, #-8]
   17048:	cmp	r3, #0
   1704c:	bge	17074 <__assert_fail@plt+0x5f80>
   17050:	ldr	r3, [fp, #-8]
   17054:	asr	r2, r3, #1
   17058:	ldr	r3, [fp, #-8]
   1705c:	rsb	r3, r3, #-2147483648	; 0x80000000
   17060:	cmp	r2, r3
   17064:	movlt	r3, #1
   17068:	movge	r3, #0
   1706c:	uxtb	r3, r3
   17070:	b	17098 <__assert_fail@plt+0x5fa4>
   17074:	ldr	r3, [fp, #-8]
   17078:	asr	r2, r3, #1
   1707c:	mvn	r3, #-2147483648	; 0x80000000
   17080:	sub	r3, r3, r2
   17084:	ldr	r2, [fp, #-8]
   17088:	cmp	r3, r2
   1708c:	movlt	r3, #1
   17090:	movge	r3, #0
   17094:	uxtb	r3, r3
   17098:	cmp	r3, #0
   1709c:	beq	170c0 <__assert_fail@plt+0x5fcc>
   170a0:	ldr	r3, [fp, #-8]
   170a4:	asr	r3, r3, #1
   170a8:	mov	r2, r3
   170ac:	ldr	r3, [fp, #-8]
   170b0:	add	r3, r2, r3
   170b4:	str	r3, [fp, #-16]
   170b8:	mov	r3, #1
   170bc:	b	170dc <__assert_fail@plt+0x5fe8>
   170c0:	ldr	r3, [fp, #-8]
   170c4:	asr	r3, r3, #1
   170c8:	mov	r2, r3
   170cc:	ldr	r3, [fp, #-8]
   170d0:	add	r3, r2, r3
   170d4:	str	r3, [fp, #-16]
   170d8:	mov	r3, #0
   170dc:	cmp	r3, #0
   170e0:	beq	170ec <__assert_fail@plt+0x5ff8>
   170e4:	mvn	r3, #-2147483648	; 0x80000000
   170e8:	str	r3, [fp, #-16]
   170ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170f0:	cmp	r3, #0
   170f4:	blt	17110 <__assert_fail@plt+0x601c>
   170f8:	ldr	r3, [fp, #-16]
   170fc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17100:	cmp	r2, r3
   17104:	bge	17110 <__assert_fail@plt+0x601c>
   17108:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1710c:	str	r3, [fp, #-16]
   17110:	ldr	r3, [fp, #4]
   17114:	cmp	r3, #0
   17118:	bge	171a8 <__assert_fail@plt+0x60b4>
   1711c:	ldr	r3, [fp, #-16]
   17120:	cmp	r3, #0
   17124:	bge	17154 <__assert_fail@plt+0x6060>
   17128:	ldr	r1, [fp, #4]
   1712c:	mvn	r0, #-2147483648	; 0x80000000
   17130:	bl	18b98 <__assert_fail@plt+0x7aa4>
   17134:	mov	r3, r0
   17138:	mov	r2, r3
   1713c:	ldr	r3, [fp, #-16]
   17140:	cmp	r2, r3
   17144:	movgt	r3, #1
   17148:	movle	r3, #0
   1714c:	uxtb	r3, r3
   17150:	b	17248 <__assert_fail@plt+0x6154>
   17154:	ldr	r3, [fp, #4]
   17158:	cmn	r3, #1
   1715c:	bne	1717c <__assert_fail@plt+0x6088>
   17160:	ldr	r3, [fp, #-16]
   17164:	add	r3, r3, #-2147483648	; 0x80000000
   17168:	cmp	r3, #0
   1716c:	movgt	r3, #1
   17170:	movle	r3, #0
   17174:	uxtb	r3, r3
   17178:	b	17248 <__assert_fail@plt+0x6154>
   1717c:	ldr	r1, [fp, #4]
   17180:	mov	r0, #-2147483648	; 0x80000000
   17184:	bl	18b98 <__assert_fail@plt+0x7aa4>
   17188:	mov	r3, r0
   1718c:	mov	r2, r3
   17190:	ldr	r3, [fp, #-16]
   17194:	cmp	r2, r3
   17198:	movlt	r3, #1
   1719c:	movge	r3, #0
   171a0:	uxtb	r3, r3
   171a4:	b	17248 <__assert_fail@plt+0x6154>
   171a8:	ldr	r3, [fp, #4]
   171ac:	cmp	r3, #0
   171b0:	beq	17244 <__assert_fail@plt+0x6150>
   171b4:	ldr	r3, [fp, #-16]
   171b8:	cmp	r3, #0
   171bc:	bge	17218 <__assert_fail@plt+0x6124>
   171c0:	ldr	r3, [fp, #-16]
   171c4:	cmn	r3, #1
   171c8:	bne	171e8 <__assert_fail@plt+0x60f4>
   171cc:	ldr	r3, [fp, #4]
   171d0:	add	r3, r3, #-2147483648	; 0x80000000
   171d4:	cmp	r3, #0
   171d8:	movgt	r3, #1
   171dc:	movle	r3, #0
   171e0:	uxtb	r3, r3
   171e4:	b	17248 <__assert_fail@plt+0x6154>
   171e8:	ldr	r3, [fp, #-16]
   171ec:	mov	r1, r3
   171f0:	mov	r0, #-2147483648	; 0x80000000
   171f4:	bl	18b98 <__assert_fail@plt+0x7aa4>
   171f8:	mov	r3, r0
   171fc:	mov	r2, r3
   17200:	ldr	r3, [fp, #4]
   17204:	cmp	r2, r3
   17208:	movlt	r3, #1
   1720c:	movge	r3, #0
   17210:	uxtb	r3, r3
   17214:	b	17248 <__assert_fail@plt+0x6154>
   17218:	ldr	r1, [fp, #4]
   1721c:	mvn	r0, #-2147483648	; 0x80000000
   17220:	bl	18b98 <__assert_fail@plt+0x7aa4>
   17224:	mov	r3, r0
   17228:	mov	r2, r3
   1722c:	ldr	r3, [fp, #-16]
   17230:	cmp	r2, r3
   17234:	movlt	r3, #1
   17238:	movge	r3, #0
   1723c:	uxtb	r3, r3
   17240:	b	17248 <__assert_fail@plt+0x6154>
   17244:	mov	r3, #0
   17248:	cmp	r3, #0
   1724c:	beq	1726c <__assert_fail@plt+0x6178>
   17250:	ldr	r3, [fp, #-16]
   17254:	mov	r2, r3
   17258:	ldr	r3, [fp, #4]
   1725c:	mul	r3, r3, r2
   17260:	str	r3, [fp, #-20]	; 0xffffffec
   17264:	mov	r3, #1
   17268:	b	17284 <__assert_fail@plt+0x6190>
   1726c:	ldr	r3, [fp, #-16]
   17270:	mov	r2, r3
   17274:	ldr	r3, [fp, #4]
   17278:	mul	r3, r3, r2
   1727c:	str	r3, [fp, #-20]	; 0xffffffec
   17280:	mov	r3, #0
   17284:	cmp	r3, #0
   17288:	beq	17294 <__assert_fail@plt+0x61a0>
   1728c:	mvn	r3, #-2147483648	; 0x80000000
   17290:	b	172ac <__assert_fail@plt+0x61b8>
   17294:	ldr	r3, [fp, #-20]	; 0xffffffec
   17298:	cmp	r3, #63	; 0x3f
   1729c:	bgt	172a8 <__assert_fail@plt+0x61b4>
   172a0:	mov	r3, #64	; 0x40
   172a4:	b	172ac <__assert_fail@plt+0x61b8>
   172a8:	mov	r3, #0
   172ac:	str	r3, [fp, #-12]
   172b0:	ldr	r3, [fp, #-12]
   172b4:	cmp	r3, #0
   172b8:	beq	172f4 <__assert_fail@plt+0x6200>
   172bc:	ldr	r1, [fp, #4]
   172c0:	ldr	r0, [fp, #-12]
   172c4:	bl	18b98 <__assert_fail@plt+0x7aa4>
   172c8:	mov	r3, r0
   172cc:	str	r3, [fp, #-16]
   172d0:	ldr	r3, [fp, #-12]
   172d4:	ldr	r1, [fp, #4]
   172d8:	mov	r0, r3
   172dc:	bl	18db8 <__assert_fail@plt+0x7cc4>
   172e0:	mov	r3, r1
   172e4:	mov	r2, r3
   172e8:	ldr	r3, [fp, #-12]
   172ec:	sub	r3, r3, r2
   172f0:	str	r3, [fp, #-20]	; 0xffffffec
   172f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172f8:	cmp	r3, #0
   172fc:	bne	1730c <__assert_fail@plt+0x6218>
   17300:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17304:	mov	r2, #0
   17308:	str	r2, [r3]
   1730c:	ldr	r2, [fp, #-16]
   17310:	ldr	r3, [fp, #-8]
   17314:	sub	r2, r2, r3
   17318:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1731c:	cmp	r2, r3
   17320:	bge	17558 <__assert_fail@plt+0x6464>
   17324:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17328:	cmp	r3, #0
   1732c:	bge	17350 <__assert_fail@plt+0x625c>
   17330:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17334:	rsb	r2, r3, #-2147483648	; 0x80000000
   17338:	ldr	r3, [fp, #-8]
   1733c:	cmp	r2, r3
   17340:	movgt	r3, #1
   17344:	movle	r3, #0
   17348:	uxtb	r3, r3
   1734c:	b	1739c <__assert_fail@plt+0x62a8>
   17350:	ldr	r3, [fp, #-8]
   17354:	cmp	r3, #0
   17358:	bge	1737c <__assert_fail@plt+0x6288>
   1735c:	ldr	r3, [fp, #-8]
   17360:	rsb	r2, r3, #-2147483648	; 0x80000000
   17364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17368:	cmp	r2, r3
   1736c:	movgt	r3, #1
   17370:	movle	r3, #0
   17374:	uxtb	r3, r3
   17378:	b	1739c <__assert_fail@plt+0x62a8>
   1737c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17380:	mvn	r3, #-2147483648	; 0x80000000
   17384:	sub	r3, r3, r2
   17388:	ldr	r2, [fp, #-8]
   1738c:	cmp	r3, r2
   17390:	movlt	r3, #1
   17394:	movge	r3, #0
   17398:	uxtb	r3, r3
   1739c:	cmp	r3, #0
   173a0:	beq	173b8 <__assert_fail@plt+0x62c4>
   173a4:	ldr	r2, [fp, #-8]
   173a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173ac:	add	r3, r2, r3
   173b0:	str	r3, [fp, #-16]
   173b4:	b	17554 <__assert_fail@plt+0x6460>
   173b8:	ldr	r2, [fp, #-8]
   173bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173c0:	add	r3, r2, r3
   173c4:	str	r3, [fp, #-16]
   173c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   173cc:	cmp	r3, #0
   173d0:	blt	173e4 <__assert_fail@plt+0x62f0>
   173d4:	ldr	r3, [fp, #-16]
   173d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   173dc:	cmp	r2, r3
   173e0:	blt	17554 <__assert_fail@plt+0x6460>
   173e4:	ldr	r3, [fp, #4]
   173e8:	cmp	r3, #0
   173ec:	bge	1747c <__assert_fail@plt+0x6388>
   173f0:	ldr	r3, [fp, #-16]
   173f4:	cmp	r3, #0
   173f8:	bge	17428 <__assert_fail@plt+0x6334>
   173fc:	ldr	r1, [fp, #4]
   17400:	mvn	r0, #-2147483648	; 0x80000000
   17404:	bl	18b98 <__assert_fail@plt+0x7aa4>
   17408:	mov	r3, r0
   1740c:	mov	r2, r3
   17410:	ldr	r3, [fp, #-16]
   17414:	cmp	r2, r3
   17418:	movgt	r3, #1
   1741c:	movle	r3, #0
   17420:	uxtb	r3, r3
   17424:	b	1751c <__assert_fail@plt+0x6428>
   17428:	ldr	r3, [fp, #4]
   1742c:	cmn	r3, #1
   17430:	bne	17450 <__assert_fail@plt+0x635c>
   17434:	ldr	r3, [fp, #-16]
   17438:	add	r3, r3, #-2147483648	; 0x80000000
   1743c:	cmp	r3, #0
   17440:	movgt	r3, #1
   17444:	movle	r3, #0
   17448:	uxtb	r3, r3
   1744c:	b	1751c <__assert_fail@plt+0x6428>
   17450:	ldr	r1, [fp, #4]
   17454:	mov	r0, #-2147483648	; 0x80000000
   17458:	bl	18b98 <__assert_fail@plt+0x7aa4>
   1745c:	mov	r3, r0
   17460:	mov	r2, r3
   17464:	ldr	r3, [fp, #-16]
   17468:	cmp	r2, r3
   1746c:	movlt	r3, #1
   17470:	movge	r3, #0
   17474:	uxtb	r3, r3
   17478:	b	1751c <__assert_fail@plt+0x6428>
   1747c:	ldr	r3, [fp, #4]
   17480:	cmp	r3, #0
   17484:	beq	17518 <__assert_fail@plt+0x6424>
   17488:	ldr	r3, [fp, #-16]
   1748c:	cmp	r3, #0
   17490:	bge	174ec <__assert_fail@plt+0x63f8>
   17494:	ldr	r3, [fp, #-16]
   17498:	cmn	r3, #1
   1749c:	bne	174bc <__assert_fail@plt+0x63c8>
   174a0:	ldr	r3, [fp, #4]
   174a4:	add	r3, r3, #-2147483648	; 0x80000000
   174a8:	cmp	r3, #0
   174ac:	movgt	r3, #1
   174b0:	movle	r3, #0
   174b4:	uxtb	r3, r3
   174b8:	b	1751c <__assert_fail@plt+0x6428>
   174bc:	ldr	r3, [fp, #-16]
   174c0:	mov	r1, r3
   174c4:	mov	r0, #-2147483648	; 0x80000000
   174c8:	bl	18b98 <__assert_fail@plt+0x7aa4>
   174cc:	mov	r3, r0
   174d0:	mov	r2, r3
   174d4:	ldr	r3, [fp, #4]
   174d8:	cmp	r2, r3
   174dc:	movlt	r3, #1
   174e0:	movge	r3, #0
   174e4:	uxtb	r3, r3
   174e8:	b	1751c <__assert_fail@plt+0x6428>
   174ec:	ldr	r1, [fp, #4]
   174f0:	mvn	r0, #-2147483648	; 0x80000000
   174f4:	bl	18b98 <__assert_fail@plt+0x7aa4>
   174f8:	mov	r3, r0
   174fc:	mov	r2, r3
   17500:	ldr	r3, [fp, #-16]
   17504:	cmp	r2, r3
   17508:	movlt	r3, #1
   1750c:	movge	r3, #0
   17510:	uxtb	r3, r3
   17514:	b	1751c <__assert_fail@plt+0x6428>
   17518:	mov	r3, #0
   1751c:	cmp	r3, #0
   17520:	beq	1753c <__assert_fail@plt+0x6448>
   17524:	ldr	r3, [fp, #-16]
   17528:	mov	r2, r3
   1752c:	ldr	r3, [fp, #4]
   17530:	mul	r3, r3, r2
   17534:	str	r3, [fp, #-20]	; 0xffffffec
   17538:	b	17554 <__assert_fail@plt+0x6460>
   1753c:	ldr	r3, [fp, #-16]
   17540:	mov	r2, r3
   17544:	ldr	r3, [fp, #4]
   17548:	mul	r3, r3, r2
   1754c:	str	r3, [fp, #-20]	; 0xffffffec
   17550:	b	17558 <__assert_fail@plt+0x6464>
   17554:	bl	1777c <__assert_fail@plt+0x6688>
   17558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1755c:	mov	r1, r3
   17560:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17564:	bl	16cf0 <__assert_fail@plt+0x5bfc>
   17568:	str	r0, [fp, #-24]	; 0xffffffe8
   1756c:	ldr	r2, [fp, #-16]
   17570:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17574:	str	r2, [r3]
   17578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1757c:	mov	r0, r3
   17580:	sub	sp, fp, #4
   17584:	pop	{fp, pc}
   17588:	push	{fp, lr}
   1758c:	add	fp, sp, #4
   17590:	sub	sp, sp, #8
   17594:	str	r0, [fp, #-8]
   17598:	mov	r1, #1
   1759c:	ldr	r0, [fp, #-8]
   175a0:	bl	175e0 <__assert_fail@plt+0x64ec>
   175a4:	mov	r3, r0
   175a8:	mov	r0, r3
   175ac:	sub	sp, fp, #4
   175b0:	pop	{fp, pc}
   175b4:	push	{fp, lr}
   175b8:	add	fp, sp, #4
   175bc:	sub	sp, sp, #8
   175c0:	str	r0, [fp, #-8]
   175c4:	mov	r1, #1
   175c8:	ldr	r0, [fp, #-8]
   175cc:	bl	1761c <__assert_fail@plt+0x6528>
   175d0:	mov	r3, r0
   175d4:	mov	r0, r3
   175d8:	sub	sp, fp, #4
   175dc:	pop	{fp, pc}
   175e0:	push	{fp, lr}
   175e4:	add	fp, sp, #4
   175e8:	sub	sp, sp, #8
   175ec:	str	r0, [fp, #-8]
   175f0:	str	r1, [fp, #-12]
   175f4:	ldr	r1, [fp, #-12]
   175f8:	ldr	r0, [fp, #-8]
   175fc:	bl	177b8 <__assert_fail@plt+0x66c4>
   17600:	mov	r3, r0
   17604:	mov	r0, r3
   17608:	bl	16c30 <__assert_fail@plt+0x5b3c>
   1760c:	mov	r3, r0
   17610:	mov	r0, r3
   17614:	sub	sp, fp, #4
   17618:	pop	{fp, pc}
   1761c:	push	{fp, lr}
   17620:	add	fp, sp, #4
   17624:	sub	sp, sp, #8
   17628:	str	r0, [fp, #-8]
   1762c:	str	r1, [fp, #-12]
   17630:	ldr	r1, [fp, #-12]
   17634:	ldr	r0, [fp, #-8]
   17638:	bl	17fb0 <__assert_fail@plt+0x6ebc>
   1763c:	mov	r3, r0
   17640:	mov	r0, r3
   17644:	bl	16c30 <__assert_fail@plt+0x5b3c>
   17648:	mov	r3, r0
   1764c:	mov	r0, r3
   17650:	sub	sp, fp, #4
   17654:	pop	{fp, pc}
   17658:	push	{fp, lr}
   1765c:	add	fp, sp, #4
   17660:	sub	sp, sp, #8
   17664:	str	r0, [fp, #-8]
   17668:	str	r1, [fp, #-12]
   1766c:	ldr	r0, [fp, #-12]
   17670:	bl	16c60 <__assert_fail@plt+0x5b6c>
   17674:	mov	r3, r0
   17678:	ldr	r2, [fp, #-12]
   1767c:	ldr	r1, [fp, #-8]
   17680:	mov	r0, r3
   17684:	bl	10eb4 <memcpy@plt>
   17688:	mov	r3, r0
   1768c:	mov	r0, r3
   17690:	sub	sp, fp, #4
   17694:	pop	{fp, pc}
   17698:	push	{fp, lr}
   1769c:	add	fp, sp, #4
   176a0:	sub	sp, sp, #8
   176a4:	str	r0, [fp, #-8]
   176a8:	str	r1, [fp, #-12]
   176ac:	ldr	r0, [fp, #-12]
   176b0:	bl	16c94 <__assert_fail@plt+0x5ba0>
   176b4:	mov	r3, r0
   176b8:	mov	r0, r3
   176bc:	ldr	r3, [fp, #-12]
   176c0:	mov	r2, r3
   176c4:	ldr	r1, [fp, #-8]
   176c8:	bl	10eb4 <memcpy@plt>
   176cc:	mov	r3, r0
   176d0:	mov	r0, r3
   176d4:	sub	sp, fp, #4
   176d8:	pop	{fp, pc}
   176dc:	push	{fp, lr}
   176e0:	add	fp, sp, #4
   176e4:	sub	sp, sp, #16
   176e8:	str	r0, [fp, #-16]
   176ec:	str	r1, [fp, #-20]	; 0xffffffec
   176f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   176f4:	add	r3, r3, #1
   176f8:	mov	r0, r3
   176fc:	bl	16c94 <__assert_fail@plt+0x5ba0>
   17700:	mov	r3, r0
   17704:	str	r3, [fp, #-8]
   17708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1770c:	ldr	r2, [fp, #-8]
   17710:	add	r3, r2, r3
   17714:	mov	r2, #0
   17718:	strb	r2, [r3]
   1771c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17720:	mov	r2, r3
   17724:	ldr	r1, [fp, #-16]
   17728:	ldr	r0, [fp, #-8]
   1772c:	bl	10eb4 <memcpy@plt>
   17730:	mov	r3, r0
   17734:	mov	r0, r3
   17738:	sub	sp, fp, #4
   1773c:	pop	{fp, pc}
   17740:	push	{fp, lr}
   17744:	add	fp, sp, #4
   17748:	sub	sp, sp, #8
   1774c:	str	r0, [fp, #-8]
   17750:	ldr	r0, [fp, #-8]
   17754:	bl	10fe0 <strlen@plt>
   17758:	mov	r3, r0
   1775c:	add	r3, r3, #1
   17760:	mov	r1, r3
   17764:	ldr	r0, [fp, #-8]
   17768:	bl	17658 <__assert_fail@plt+0x6564>
   1776c:	mov	r3, r0
   17770:	mov	r0, r3
   17774:	sub	sp, fp, #4
   17778:	pop	{fp, pc}
   1777c:	push	{r4, r5, fp, lr}
   17780:	add	fp, sp, #12
   17784:	ldr	r3, [pc, #32]	; 177ac <__assert_fail@plt+0x66b8>
   17788:	ldr	r4, [r3]
   1778c:	ldr	r0, [pc, #28]	; 177b0 <__assert_fail@plt+0x66bc>
   17790:	bl	10fd4 <gettext@plt>
   17794:	mov	r3, r0
   17798:	ldr	r2, [pc, #20]	; 177b4 <__assert_fail@plt+0x66c0>
   1779c:	mov	r1, #0
   177a0:	mov	r0, r4
   177a4:	bl	10f74 <error@plt>
   177a8:	bl	110c4 <abort@plt>
   177ac:	andeq	fp, r2, r0, lsl r1
   177b0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   177b4:			; <UNDEFINED> instruction: 0x00019fb0
   177b8:	push	{r4, r5, fp, lr}
   177bc:	add	fp, sp, #12
   177c0:	sub	sp, sp, #16
   177c4:	str	r0, [fp, #-24]	; 0xffffffe8
   177c8:	str	r1, [fp, #-28]	; 0xffffffe4
   177cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177d0:	cmp	r3, #0
   177d4:	beq	177e4 <__assert_fail@plt+0x66f0>
   177d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   177dc:	cmp	r3, #0
   177e0:	bne	177f4 <__assert_fail@plt+0x6700>
   177e4:	mov	r3, #1
   177e8:	str	r3, [fp, #-28]	; 0xffffffe4
   177ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   177f0:	str	r3, [fp, #-24]	; 0xffffffe8
   177f4:	mov	r1, #0
   177f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   177fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17800:	umull	r2, r3, r2, r3
   17804:	mov	r4, r3
   17808:	mov	r5, #0
   1780c:	cmp	r4, #0
   17810:	beq	17818 <__assert_fail@plt+0x6724>
   17814:	mov	r1, #1
   17818:	cmp	r2, #0
   1781c:	bge	17824 <__assert_fail@plt+0x6730>
   17820:	mov	r1, #1
   17824:	mov	r3, r2
   17828:	str	r3, [fp, #-20]	; 0xffffffec
   1782c:	mov	r3, r1
   17830:	and	r3, r3, #1
   17834:	uxtb	r3, r3
   17838:	cmp	r3, #0
   1783c:	beq	17858 <__assert_fail@plt+0x6764>
   17840:	bl	11004 <__errno_location@plt>
   17844:	mov	r2, r0
   17848:	mov	r3, #12
   1784c:	str	r3, [r2]
   17850:	mov	r3, #0
   17854:	b	17870 <__assert_fail@plt+0x677c>
   17858:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1785c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17860:	bl	10e30 <calloc@plt>
   17864:	mov	r3, r0
   17868:	str	r3, [fp, #-16]
   1786c:	ldr	r3, [fp, #-16]
   17870:	mov	r0, r3
   17874:	sub	sp, fp, #12
   17878:	pop	{r4, r5, fp, pc}
   1787c:	push	{r4, r5, fp, lr}
   17880:	add	fp, sp, #12
   17884:	sub	sp, sp, #16
   17888:	str	r0, [fp, #-24]	; 0xffffffe8
   1788c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17890:	cmp	r3, #0
   17894:	bne	178a0 <__assert_fail@plt+0x67ac>
   17898:	mov	r3, #1
   1789c:	str	r3, [fp, #-24]	; 0xffffffe8
   178a0:	mov	r1, #0
   178a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178a8:	mov	r2, r3
   178ac:	mov	r3, #0
   178b0:	mov	r4, r3
   178b4:	mov	r5, #0
   178b8:	cmp	r4, #0
   178bc:	beq	178c4 <__assert_fail@plt+0x67d0>
   178c0:	mov	r1, #1
   178c4:	cmp	r2, #0
   178c8:	bge	178d0 <__assert_fail@plt+0x67dc>
   178cc:	mov	r1, #1
   178d0:	mov	r3, r2
   178d4:	str	r3, [fp, #-20]	; 0xffffffec
   178d8:	mov	r3, r1
   178dc:	and	r3, r3, #1
   178e0:	uxtb	r3, r3
   178e4:	cmp	r3, #0
   178e8:	beq	17904 <__assert_fail@plt+0x6810>
   178ec:	bl	11004 <__errno_location@plt>
   178f0:	mov	r2, r0
   178f4:	mov	r3, #12
   178f8:	str	r3, [r2]
   178fc:	mov	r3, #0
   17900:	b	17918 <__assert_fail@plt+0x6824>
   17904:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17908:	bl	10f80 <malloc@plt>
   1790c:	mov	r3, r0
   17910:	str	r3, [fp, #-16]
   17914:	ldr	r3, [fp, #-16]
   17918:	mov	r0, r3
   1791c:	sub	sp, fp, #12
   17920:	pop	{r4, r5, fp, pc}
   17924:	push	{r4, r5, fp, lr}
   17928:	add	fp, sp, #12
   1792c:	sub	sp, sp, #16
   17930:	str	r0, [fp, #-24]	; 0xffffffe8
   17934:	str	r1, [fp, #-28]	; 0xffffffe4
   17938:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1793c:	cmp	r3, #0
   17940:	bne	17954 <__assert_fail@plt+0x6860>
   17944:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17948:	bl	1787c <__assert_fail@plt+0x6788>
   1794c:	mov	r3, r0
   17950:	b	179e8 <__assert_fail@plt+0x68f4>
   17954:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17958:	cmp	r3, #0
   1795c:	bne	17970 <__assert_fail@plt+0x687c>
   17960:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17964:	bl	134f4 <__assert_fail@plt+0x2400>
   17968:	mov	r3, #0
   1796c:	b	179e8 <__assert_fail@plt+0x68f4>
   17970:	mov	r1, #0
   17974:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17978:	mov	r2, r3
   1797c:	mov	r3, #0
   17980:	mov	r4, r3
   17984:	mov	r5, #0
   17988:	cmp	r4, #0
   1798c:	beq	17994 <__assert_fail@plt+0x68a0>
   17990:	mov	r1, #1
   17994:	cmp	r2, #0
   17998:	bge	179a0 <__assert_fail@plt+0x68ac>
   1799c:	mov	r1, #1
   179a0:	mov	r3, r2
   179a4:	str	r3, [fp, #-20]	; 0xffffffec
   179a8:	mov	r3, r1
   179ac:	and	r3, r3, #1
   179b0:	uxtb	r3, r3
   179b4:	cmp	r3, #0
   179b8:	beq	179d4 <__assert_fail@plt+0x68e0>
   179bc:	bl	11004 <__errno_location@plt>
   179c0:	mov	r2, r0
   179c4:	mov	r3, #12
   179c8:	str	r3, [r2]
   179cc:	mov	r3, #0
   179d0:	b	179e8 <__assert_fail@plt+0x68f4>
   179d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   179d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179dc:	bl	10efc <realloc@plt>
   179e0:	str	r0, [fp, #-16]
   179e4:	ldr	r3, [fp, #-16]
   179e8:	mov	r0, r3
   179ec:	sub	sp, fp, #12
   179f0:	pop	{r4, r5, fp, pc}
   179f4:	push	{r4, r5, fp, lr}
   179f8:	add	fp, sp, #12
   179fc:	sub	sp, sp, #16
   17a00:	str	r0, [fp, #-24]	; 0xffffffe8
   17a04:	str	r1, [fp, #-28]	; 0xffffffe4
   17a08:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17a0c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17a10:	cmp	r5, r4
   17a14:	bne	17a20 <__assert_fail@plt+0x692c>
   17a18:	mov	r3, #0
   17a1c:	b	17a80 <__assert_fail@plt+0x698c>
   17a20:	ldrb	r3, [r5]
   17a24:	mov	r0, r3
   17a28:	bl	18678 <__assert_fail@plt+0x7584>
   17a2c:	mov	r3, r0
   17a30:	strb	r3, [fp, #-13]
   17a34:	ldrb	r3, [r4]
   17a38:	mov	r0, r3
   17a3c:	bl	18678 <__assert_fail@plt+0x7584>
   17a40:	mov	r3, r0
   17a44:	strb	r3, [fp, #-14]
   17a48:	ldrb	r3, [fp, #-13]
   17a4c:	cmp	r3, #0
   17a50:	beq	17a70 <__assert_fail@plt+0x697c>
   17a54:	add	r5, r5, #1
   17a58:	add	r4, r4, #1
   17a5c:	ldrb	r2, [fp, #-13]
   17a60:	ldrb	r3, [fp, #-14]
   17a64:	cmp	r2, r3
   17a68:	beq	17a20 <__assert_fail@plt+0x692c>
   17a6c:	b	17a74 <__assert_fail@plt+0x6980>
   17a70:	nop			; (mov r0, r0)
   17a74:	ldrb	r2, [fp, #-13]
   17a78:	ldrb	r3, [fp, #-14]
   17a7c:	sub	r3, r2, r3
   17a80:	mov	r0, r3
   17a84:	sub	sp, fp, #12
   17a88:	pop	{r4, r5, fp, pc}
   17a8c:	push	{fp, lr}
   17a90:	add	fp, sp, #4
   17a94:	sub	sp, sp, #16
   17a98:	str	r0, [fp, #-16]
   17a9c:	ldr	r0, [fp, #-16]
   17aa0:	bl	10f50 <__fpending@plt>
   17aa4:	mov	r3, r0
   17aa8:	cmp	r3, #0
   17aac:	movne	r3, #1
   17ab0:	moveq	r3, #0
   17ab4:	strb	r3, [fp, #-5]
   17ab8:	ldr	r0, [fp, #-16]
   17abc:	bl	10f5c <ferror_unlocked@plt>
   17ac0:	mov	r3, r0
   17ac4:	cmp	r3, #0
   17ac8:	movne	r3, #1
   17acc:	moveq	r3, #0
   17ad0:	strb	r3, [fp, #-6]
   17ad4:	ldr	r0, [fp, #-16]
   17ad8:	bl	13354 <__assert_fail@plt+0x2260>
   17adc:	mov	r3, r0
   17ae0:	cmp	r3, #0
   17ae4:	movne	r3, #1
   17ae8:	moveq	r3, #0
   17aec:	strb	r3, [fp, #-7]
   17af0:	ldrb	r3, [fp, #-6]
   17af4:	cmp	r3, #0
   17af8:	bne	17b28 <__assert_fail@plt+0x6a34>
   17afc:	ldrb	r3, [fp, #-7]
   17b00:	cmp	r3, #0
   17b04:	beq	17b54 <__assert_fail@plt+0x6a60>
   17b08:	ldrb	r3, [fp, #-5]
   17b0c:	cmp	r3, #0
   17b10:	bne	17b28 <__assert_fail@plt+0x6a34>
   17b14:	bl	11004 <__errno_location@plt>
   17b18:	mov	r3, r0
   17b1c:	ldr	r3, [r3]
   17b20:	cmp	r3, #9
   17b24:	beq	17b54 <__assert_fail@plt+0x6a60>
   17b28:	ldrb	r3, [fp, #-7]
   17b2c:	eor	r3, r3, #1
   17b30:	uxtb	r3, r3
   17b34:	cmp	r3, #0
   17b38:	beq	17b4c <__assert_fail@plt+0x6a58>
   17b3c:	bl	11004 <__errno_location@plt>
   17b40:	mov	r2, r0
   17b44:	mov	r3, #0
   17b48:	str	r3, [r2]
   17b4c:	mvn	r3, #0
   17b50:	b	17b58 <__assert_fail@plt+0x6a64>
   17b54:	mov	r3, #0
   17b58:	mov	r0, r3
   17b5c:	sub	sp, fp, #4
   17b60:	pop	{fp, pc}
   17b64:	push	{fp}		; (str fp, [sp, #-4]!)
   17b68:	add	fp, sp, #0
   17b6c:	sub	sp, sp, #20
   17b70:	str	r0, [fp, #-16]
   17b74:	str	r1, [fp, #-20]	; 0xffffffec
   17b78:	ldr	r3, [fp, #-16]
   17b7c:	ldr	r2, [r3, #20]
   17b80:	ldr	r3, [fp, #-16]
   17b84:	ldr	r3, [r3, #16]
   17b88:	cmp	r2, r3
   17b8c:	bls	17b98 <__assert_fail@plt+0x6aa4>
   17b90:	mov	r3, #0
   17b94:	b	17bdc <__assert_fail@plt+0x6ae8>
   17b98:	ldr	r3, [fp, #-16]
   17b9c:	ldr	r3, [r3, #8]
   17ba0:	mov	r2, r3
   17ba4:	ldr	r3, [fp, #-16]
   17ba8:	ldr	r3, [r3, #4]
   17bac:	sub	r3, r2, r3
   17bb0:	str	r3, [fp, #-8]
   17bb4:	ldr	r3, [fp, #-8]
   17bb8:	cmp	r3, #0
   17bbc:	bne	17bc8 <__assert_fail@plt+0x6ad4>
   17bc0:	mov	r3, #0
   17bc4:	b	17bdc <__assert_fail@plt+0x6ae8>
   17bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bcc:	ldr	r2, [fp, #-8]
   17bd0:	str	r2, [r3]
   17bd4:	ldr	r3, [fp, #-16]
   17bd8:	ldr	r3, [r3, #4]
   17bdc:	mov	r0, r3
   17be0:	add	sp, fp, #0
   17be4:	pop	{fp}		; (ldr fp, [sp], #4)
   17be8:	bx	lr
   17bec:	push	{fp}		; (str fp, [sp, #-4]!)
   17bf0:	add	fp, sp, #0
   17bf4:	sub	sp, sp, #12
   17bf8:	str	r0, [fp, #-8]
   17bfc:	str	r1, [fp, #-12]
   17c00:	ldr	r3, [fp, #-8]
   17c04:	ldr	r2, [r3, #4]
   17c08:	ldr	r3, [fp, #-12]
   17c0c:	add	r2, r2, r3
   17c10:	ldr	r3, [fp, #-8]
   17c14:	str	r2, [r3, #4]
   17c18:	nop			; (mov r0, r0)
   17c1c:	add	sp, fp, #0
   17c20:	pop	{fp}		; (ldr fp, [sp], #4)
   17c24:	bx	lr
   17c28:	push	{fp, lr}
   17c2c:	add	fp, sp, #4
   17c30:	sub	sp, sp, #4096	; 0x1000
   17c34:	sub	sp, sp, #40	; 0x28
   17c38:	sub	r3, fp, #4096	; 0x1000
   17c3c:	sub	r3, r3, #4
   17c40:	str	r0, [r3, #-28]	; 0xffffffe4
   17c44:	sub	r3, fp, #4096	; 0x1000
   17c48:	sub	r3, r3, #4
   17c4c:	str	r1, [r3, #-32]	; 0xffffffe0
   17c50:	sub	r3, fp, #4096	; 0x1000
   17c54:	sub	r3, r3, #4
   17c58:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17c5c:	cmp	r3, #0
   17c60:	bne	17c6c <__assert_fail@plt+0x6b78>
   17c64:	mov	r3, #0
   17c68:	b	17f04 <__assert_fail@plt+0x6e10>
   17c6c:	sub	r3, fp, #4096	; 0x1000
   17c70:	sub	r3, r3, #4
   17c74:	ldr	r0, [r3, #-28]	; 0xffffffe4
   17c78:	bl	186f8 <__assert_fail@plt+0x7604>
   17c7c:	str	r0, [fp, #-8]
   17c80:	b	17da8 <__assert_fail@plt+0x6cb4>
   17c84:	sub	r2, fp, #24
   17c88:	sub	r3, fp, #4096	; 0x1000
   17c8c:	sub	r3, r3, #4
   17c90:	mov	r1, r2
   17c94:	ldr	r0, [r3, #-28]	; 0xffffffe4
   17c98:	bl	17b64 <__assert_fail@plt+0x6a70>
   17c9c:	mov	r3, r0
   17ca0:	cmp	r3, #0
   17ca4:	beq	17d44 <__assert_fail@plt+0x6c50>
   17ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cac:	cmp	r3, #0
   17cb0:	beq	17d44 <__assert_fail@plt+0x6c50>
   17cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cb8:	sub	r2, fp, #4096	; 0x1000
   17cbc:	sub	r2, r2, #4
   17cc0:	ldr	r2, [r2, #-32]	; 0xffffffe0
   17cc4:	cmp	r2, r3
   17cc8:	movcc	r3, r2
   17ccc:	movcs	r3, r3
   17cd0:	str	r3, [fp, #-12]
   17cd4:	sub	r3, fp, #4096	; 0x1000
   17cd8:	sub	r3, r3, #4
   17cdc:	ldr	r1, [fp, #-12]
   17ce0:	ldr	r0, [r3, #-28]	; 0xffffffe4
   17ce4:	bl	17bec <__assert_fail@plt+0x6af8>
   17ce8:	sub	r3, fp, #4096	; 0x1000
   17cec:	sub	r3, r3, #4
   17cf0:	mov	r1, r3
   17cf4:	sub	r3, fp, #4096	; 0x1000
   17cf8:	sub	r3, r3, #4
   17cfc:	ldr	r2, [r3, #-32]	; 0xffffffe0
   17d00:	ldr	r3, [fp, #-12]
   17d04:	sub	r3, r2, r3
   17d08:	str	r3, [r1, #-32]	; 0xffffffe0
   17d0c:	sub	r3, fp, #4096	; 0x1000
   17d10:	sub	r3, r3, #4
   17d14:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17d18:	cmp	r3, #0
   17d1c:	bne	17d28 <__assert_fail@plt+0x6c34>
   17d20:	mov	r3, #0
   17d24:	b	17f04 <__assert_fail@plt+0x6e10>
   17d28:	ldr	r2, [fp, #-8]
   17d2c:	ldr	r3, [fp, #-12]
   17d30:	sub	r3, r2, r3
   17d34:	str	r3, [fp, #-8]
   17d38:	ldr	r3, [fp, #-8]
   17d3c:	cmp	r3, #0
   17d40:	beq	17db8 <__assert_fail@plt+0x6cc4>
   17d44:	sub	r3, fp, #4096	; 0x1000
   17d48:	sub	r3, r3, #4
   17d4c:	ldr	r0, [r3, #-28]	; 0xffffffe4
   17d50:	bl	11028 <fgetc@plt>
   17d54:	mov	r3, r0
   17d58:	cmn	r3, #1
   17d5c:	beq	17ed0 <__assert_fail@plt+0x6ddc>
   17d60:	sub	r3, fp, #4096	; 0x1000
   17d64:	sub	r3, r3, #4
   17d68:	mov	r2, r3
   17d6c:	sub	r3, fp, #4096	; 0x1000
   17d70:	sub	r3, r3, #4
   17d74:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17d78:	sub	r3, r3, #1
   17d7c:	str	r3, [r2, #-32]	; 0xffffffe0
   17d80:	sub	r3, fp, #4096	; 0x1000
   17d84:	sub	r3, r3, #4
   17d88:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17d8c:	cmp	r3, #0
   17d90:	bne	17d9c <__assert_fail@plt+0x6ca8>
   17d94:	mov	r3, #0
   17d98:	b	17f04 <__assert_fail@plt+0x6e10>
   17d9c:	ldr	r3, [fp, #-8]
   17da0:	sub	r3, r3, #1
   17da4:	str	r3, [fp, #-8]
   17da8:	ldr	r3, [fp, #-8]
   17dac:	cmp	r3, #0
   17db0:	bne	17c84 <__assert_fail@plt+0x6b90>
   17db4:	b	17dbc <__assert_fail@plt+0x6cc8>
   17db8:	nop			; (mov r0, r0)
   17dbc:	sub	r3, fp, #4096	; 0x1000
   17dc0:	sub	r3, r3, #4
   17dc4:	ldr	r0, [r3, #-28]	; 0xffffffe4
   17dc8:	bl	11034 <fileno@plt>
   17dcc:	str	r0, [fp, #-16]
   17dd0:	ldr	r3, [fp, #-16]
   17dd4:	cmp	r3, #0
   17dd8:	blt	17e40 <__assert_fail@plt+0x6d4c>
   17ddc:	mov	r3, #1
   17de0:	str	r3, [sp]
   17de4:	mov	r2, #0
   17de8:	mov	r3, #0
   17dec:	ldr	r0, [fp, #-16]
   17df0:	bl	10f2c <lseek64@plt>
   17df4:	mov	r2, r0
   17df8:	mov	r3, r1
   17dfc:	cmp	r2, #0
   17e00:	sbcs	r3, r3, #0
   17e04:	blt	17e40 <__assert_fail@plt+0x6d4c>
   17e08:	sub	r3, fp, #4096	; 0x1000
   17e0c:	sub	r3, r3, #4
   17e10:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17e14:	mov	r2, r3
   17e18:	mov	r3, #0
   17e1c:	sub	r1, fp, #4096	; 0x1000
   17e20:	sub	r1, r1, #4
   17e24:	mov	r0, r1
   17e28:	mov	r1, #1
   17e2c:	str	r1, [sp]
   17e30:	ldr	r0, [r0, #-28]	; 0xffffffe4
   17e34:	bl	13580 <__assert_fail@plt+0x248c>
   17e38:	mov	r3, r0
   17e3c:	b	17f04 <__assert_fail@plt+0x6e10>
   17e40:	sub	r3, fp, #4096	; 0x1000
   17e44:	sub	r3, r3, #4
   17e48:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17e4c:	cmp	r3, #4096	; 0x1000
   17e50:	movcc	r3, r3
   17e54:	movcs	r3, #4096	; 0x1000
   17e58:	str	r3, [fp, #-20]	; 0xffffffec
   17e5c:	sub	r3, fp, #4096	; 0x1000
   17e60:	sub	r3, r3, #4
   17e64:	sub	r0, fp, #4096	; 0x1000
   17e68:	sub	r0, r0, #4
   17e6c:	sub	r0, r0, #20
   17e70:	ldr	r3, [r3, #-28]	; 0xffffffe4
   17e74:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e78:	mov	r1, #1
   17e7c:	bl	10f44 <fread@plt>
   17e80:	mov	r2, r0
   17e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e88:	cmp	r2, r3
   17e8c:	bcc	17ed8 <__assert_fail@plt+0x6de4>
   17e90:	sub	r3, fp, #4096	; 0x1000
   17e94:	sub	r3, r3, #4
   17e98:	mov	r1, r3
   17e9c:	sub	r3, fp, #4096	; 0x1000
   17ea0:	sub	r3, r3, #4
   17ea4:	ldr	r2, [r3, #-32]	; 0xffffffe0
   17ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17eac:	sub	r3, r2, r3
   17eb0:	str	r3, [r1, #-32]	; 0xffffffe0
   17eb4:	sub	r3, fp, #4096	; 0x1000
   17eb8:	sub	r3, r3, #4
   17ebc:	ldr	r3, [r3, #-32]	; 0xffffffe0
   17ec0:	cmp	r3, #0
   17ec4:	bne	17e40 <__assert_fail@plt+0x6d4c>
   17ec8:	mov	r3, #0
   17ecc:	b	17f04 <__assert_fail@plt+0x6e10>
   17ed0:	nop			; (mov r0, r0)
   17ed4:	b	17edc <__assert_fail@plt+0x6de8>
   17ed8:	nop			; (mov r0, r0)
   17edc:	sub	r3, fp, #4096	; 0x1000
   17ee0:	sub	r3, r3, #4
   17ee4:	ldr	r0, [r3, #-28]	; 0xffffffe4
   17ee8:	bl	10e9c <ferror@plt>
   17eec:	mov	r3, r0
   17ef0:	cmp	r3, #0
   17ef4:	beq	17f00 <__assert_fail@plt+0x6e0c>
   17ef8:	mvn	r3, #0
   17efc:	b	17f04 <__assert_fail@plt+0x6e10>
   17f00:	mov	r3, #0
   17f04:	mov	r0, r3
   17f08:	sub	sp, fp, #4
   17f0c:	pop	{fp, pc}
   17f10:	push	{fp, lr}
   17f14:	add	fp, sp, #4
   17f18:	bl	11004 <__errno_location@plt>
   17f1c:	mov	r2, r0
   17f20:	mov	r3, #12
   17f24:	str	r3, [r2]
   17f28:	mov	r3, #0
   17f2c:	mov	r0, r3
   17f30:	pop	{fp, pc}
   17f34:	push	{fp, lr}
   17f38:	add	fp, sp, #4
   17f3c:	sub	sp, sp, #8
   17f40:	str	r0, [fp, #-8]
   17f44:	ldr	r3, [fp, #-8]
   17f48:	mov	r0, r3
   17f4c:	bl	1787c <__assert_fail@plt+0x6788>
   17f50:	mov	r3, r0
   17f54:	mov	r0, r3
   17f58:	sub	sp, fp, #4
   17f5c:	pop	{fp, pc}
   17f60:	push	{fp, lr}
   17f64:	add	fp, sp, #4
   17f68:	sub	sp, sp, #8
   17f6c:	str	r0, [fp, #-8]
   17f70:	str	r1, [fp, #-12]
   17f74:	ldr	r3, [fp, #-12]
   17f78:	cmp	r3, #0
   17f7c:	moveq	r3, #1
   17f80:	movne	r3, #0
   17f84:	uxtb	r3, r3
   17f88:	mov	r2, r3
   17f8c:	ldr	r3, [fp, #-12]
   17f90:	orr	r3, r2, r3
   17f94:	mov	r1, r3
   17f98:	ldr	r0, [fp, #-8]
   17f9c:	bl	17924 <__assert_fail@plt+0x6830>
   17fa0:	mov	r3, r0
   17fa4:	mov	r0, r3
   17fa8:	sub	sp, fp, #4
   17fac:	pop	{fp, pc}
   17fb0:	push	{fp, lr}
   17fb4:	add	fp, sp, #4
   17fb8:	sub	sp, sp, #8
   17fbc:	str	r0, [fp, #-8]
   17fc0:	str	r1, [fp, #-12]
   17fc4:	ldr	r3, [fp, #-8]
   17fc8:	ldr	r2, [fp, #-12]
   17fcc:	mov	r1, r2
   17fd0:	mov	r0, r3
   17fd4:	bl	177b8 <__assert_fail@plt+0x66c4>
   17fd8:	mov	r3, r0
   17fdc:	mov	r0, r3
   17fe0:	sub	sp, fp, #4
   17fe4:	pop	{fp, pc}
   17fe8:	push	{fp, lr}
   17fec:	add	fp, sp, #4
   17ff0:	sub	sp, sp, #16
   17ff4:	str	r0, [fp, #-8]
   17ff8:	str	r1, [fp, #-12]
   17ffc:	str	r2, [fp, #-16]
   18000:	ldr	r3, [fp, #-12]
   18004:	cmp	r3, #0
   18008:	beq	18018 <__assert_fail@plt+0x6f24>
   1800c:	ldr	r3, [fp, #-16]
   18010:	cmp	r3, #0
   18014:	bne	18028 <__assert_fail@plt+0x6f34>
   18018:	mov	r3, #1
   1801c:	str	r3, [fp, #-16]
   18020:	ldr	r3, [fp, #-16]
   18024:	str	r3, [fp, #-12]
   18028:	ldr	r3, [fp, #-12]
   1802c:	ldr	r2, [fp, #-16]
   18030:	mov	r1, r3
   18034:	ldr	r0, [fp, #-8]
   18038:	bl	18154 <__assert_fail@plt+0x7060>
   1803c:	mov	r3, r0
   18040:	mov	r0, r3
   18044:	sub	sp, fp, #4
   18048:	pop	{fp, pc}
   1804c:	push	{fp, lr}
   18050:	add	fp, sp, #4
   18054:	sub	sp, sp, #8
   18058:	mov	r0, #14
   1805c:	bl	1107c <nl_langinfo@plt>
   18060:	str	r0, [fp, #-8]
   18064:	ldr	r3, [fp, #-8]
   18068:	cmp	r3, #0
   1806c:	bne	18078 <__assert_fail@plt+0x6f84>
   18070:	ldr	r3, [pc, #40]	; 180a0 <__assert_fail@plt+0x6fac>
   18074:	str	r3, [fp, #-8]
   18078:	ldr	r3, [fp, #-8]
   1807c:	ldrb	r3, [r3]
   18080:	cmp	r3, #0
   18084:	bne	18090 <__assert_fail@plt+0x6f9c>
   18088:	ldr	r3, [pc, #20]	; 180a4 <__assert_fail@plt+0x6fb0>
   1808c:	str	r3, [fp, #-8]
   18090:	ldr	r3, [fp, #-8]
   18094:	mov	r0, r3
   18098:	sub	sp, fp, #4
   1809c:	pop	{fp, pc}
   180a0:			; <UNDEFINED> instruction: 0x00019fb4
   180a4:			; <UNDEFINED> instruction: 0x00019fb8
   180a8:	push	{fp, lr}
   180ac:	add	fp, sp, #4
   180b0:	sub	sp, sp, #32
   180b4:	str	r0, [fp, #-24]	; 0xffffffe8
   180b8:	str	r1, [fp, #-28]	; 0xffffffe4
   180bc:	str	r2, [fp, #-32]	; 0xffffffe0
   180c0:	str	r3, [fp, #-36]	; 0xffffffdc
   180c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180c8:	cmp	r3, #0
   180cc:	bne	180d8 <__assert_fail@plt+0x6fe4>
   180d0:	sub	r3, fp, #16
   180d4:	str	r3, [fp, #-24]	; 0xffffffe8
   180d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   180e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   180e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180e8:	bl	10f68 <mbrtowc@plt>
   180ec:	str	r0, [fp, #-8]
   180f0:	ldr	r3, [fp, #-8]
   180f4:	cmn	r3, #3
   180f8:	bls	18144 <__assert_fail@plt+0x7050>
   180fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18100:	cmp	r3, #0
   18104:	beq	18144 <__assert_fail@plt+0x7050>
   18108:	mov	r0, #0
   1810c:	bl	18788 <__assert_fail@plt+0x7694>
   18110:	mov	r3, r0
   18114:	eor	r3, r3, #1
   18118:	uxtb	r3, r3
   1811c:	cmp	r3, #0
   18120:	beq	18144 <__assert_fail@plt+0x7050>
   18124:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18128:	ldrb	r3, [r3]
   1812c:	strb	r3, [fp, #-9]
   18130:	ldrb	r2, [fp, #-9]
   18134:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18138:	str	r2, [r3]
   1813c:	mov	r3, #1
   18140:	b	18148 <__assert_fail@plt+0x7054>
   18144:	ldr	r3, [fp, #-8]
   18148:	mov	r0, r3
   1814c:	sub	sp, fp, #4
   18150:	pop	{fp, pc}
   18154:	push	{fp, lr}
   18158:	add	fp, sp, #4
   1815c:	sub	sp, sp, #24
   18160:	str	r0, [fp, #-16]
   18164:	str	r1, [fp, #-20]	; 0xffffffec
   18168:	str	r2, [fp, #-24]	; 0xffffffe8
   1816c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18170:	cmp	r3, #0
   18174:	beq	181b0 <__assert_fail@plt+0x70bc>
   18178:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1817c:	mvn	r0, #0
   18180:	bl	1898c <__assert_fail@plt+0x7898>
   18184:	mov	r3, r0
   18188:	mov	r2, r3
   1818c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18190:	cmp	r2, r3
   18194:	bcs	181b0 <__assert_fail@plt+0x70bc>
   18198:	ldr	r3, [fp, #-20]	; 0xffffffec
   1819c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   181a0:	mul	r3, r2, r3
   181a4:	str	r3, [fp, #-8]
   181a8:	mov	r3, #1
   181ac:	b	181c4 <__assert_fail@plt+0x70d0>
   181b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   181b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   181b8:	mul	r3, r2, r3
   181bc:	str	r3, [fp, #-8]
   181c0:	mov	r3, #0
   181c4:	cmp	r3, #0
   181c8:	beq	181e4 <__assert_fail@plt+0x70f0>
   181cc:	bl	11004 <__errno_location@plt>
   181d0:	mov	r2, r0
   181d4:	mov	r3, #12
   181d8:	str	r3, [r2]
   181dc:	mov	r3, #0
   181e0:	b	181f8 <__assert_fail@plt+0x7104>
   181e4:	ldr	r3, [fp, #-8]
   181e8:	mov	r1, r3
   181ec:	ldr	r0, [fp, #-16]
   181f0:	bl	17924 <__assert_fail@plt+0x6830>
   181f4:	mov	r3, r0
   181f8:	mov	r0, r3
   181fc:	sub	sp, fp, #4
   18200:	pop	{fp, pc}
   18204:	push	{fp}		; (str fp, [sp, #-4]!)
   18208:	add	fp, sp, #0
   1820c:	sub	sp, sp, #12
   18210:	str	r0, [fp, #-8]
   18214:	ldr	r3, [fp, #-8]
   18218:	cmp	r3, #90	; 0x5a
   1821c:	bgt	18238 <__assert_fail@plt+0x7144>
   18220:	cmp	r3, #65	; 0x41
   18224:	bge	18244 <__assert_fail@plt+0x7150>
   18228:	sub	r3, r3, #48	; 0x30
   1822c:	cmp	r3, #9
   18230:	bhi	1824c <__assert_fail@plt+0x7158>
   18234:	b	18244 <__assert_fail@plt+0x7150>
   18238:	sub	r3, r3, #97	; 0x61
   1823c:	cmp	r3, #25
   18240:	bhi	1824c <__assert_fail@plt+0x7158>
   18244:	mov	r3, #1
   18248:	b	18250 <__assert_fail@plt+0x715c>
   1824c:	mov	r3, #0
   18250:	mov	r0, r3
   18254:	add	sp, fp, #0
   18258:	pop	{fp}		; (ldr fp, [sp], #4)
   1825c:	bx	lr
   18260:	push	{fp}		; (str fp, [sp, #-4]!)
   18264:	add	fp, sp, #0
   18268:	sub	sp, sp, #12
   1826c:	str	r0, [fp, #-8]
   18270:	ldr	r3, [fp, #-8]
   18274:	cmp	r3, #65	; 0x41
   18278:	blt	18298 <__assert_fail@plt+0x71a4>
   1827c:	cmp	r3, #90	; 0x5a
   18280:	ble	18290 <__assert_fail@plt+0x719c>
   18284:	sub	r3, r3, #97	; 0x61
   18288:	cmp	r3, #25
   1828c:	bhi	18298 <__assert_fail@plt+0x71a4>
   18290:	mov	r3, #1
   18294:	b	1829c <__assert_fail@plt+0x71a8>
   18298:	mov	r3, #0
   1829c:	mov	r0, r3
   182a0:	add	sp, fp, #0
   182a4:	pop	{fp}		; (ldr fp, [sp], #4)
   182a8:	bx	lr
   182ac:	push	{fp}		; (str fp, [sp, #-4]!)
   182b0:	add	fp, sp, #0
   182b4:	sub	sp, sp, #12
   182b8:	str	r0, [fp, #-8]
   182bc:	ldr	r3, [fp, #-8]
   182c0:	add	r3, r3, #0
   182c4:	cmp	r3, #127	; 0x7f
   182c8:	bhi	182d4 <__assert_fail@plt+0x71e0>
   182cc:	mov	r3, #1
   182d0:	b	182d8 <__assert_fail@plt+0x71e4>
   182d4:	mov	r3, #0
   182d8:	mov	r0, r3
   182dc:	add	sp, fp, #0
   182e0:	pop	{fp}		; (ldr fp, [sp], #4)
   182e4:	bx	lr
   182e8:	push	{fp}		; (str fp, [sp, #-4]!)
   182ec:	add	fp, sp, #0
   182f0:	sub	sp, sp, #12
   182f4:	str	r0, [fp, #-8]
   182f8:	ldr	r3, [fp, #-8]
   182fc:	cmp	r3, #32
   18300:	beq	18310 <__assert_fail@plt+0x721c>
   18304:	ldr	r3, [fp, #-8]
   18308:	cmp	r3, #9
   1830c:	bne	18318 <__assert_fail@plt+0x7224>
   18310:	mov	r3, #1
   18314:	b	1831c <__assert_fail@plt+0x7228>
   18318:	mov	r3, #0
   1831c:	and	r3, r3, #1
   18320:	uxtb	r3, r3
   18324:	mov	r0, r3
   18328:	add	sp, fp, #0
   1832c:	pop	{fp}		; (ldr fp, [sp], #4)
   18330:	bx	lr
   18334:	push	{fp}		; (str fp, [sp, #-4]!)
   18338:	add	fp, sp, #0
   1833c:	sub	sp, sp, #12
   18340:	str	r0, [fp, #-8]
   18344:	ldr	r3, [fp, #-8]
   18348:	cmp	r3, #0
   1834c:	blt	18368 <__assert_fail@plt+0x7274>
   18350:	cmp	r3, #31
   18354:	ble	18360 <__assert_fail@plt+0x726c>
   18358:	cmp	r3, #127	; 0x7f
   1835c:	bne	18368 <__assert_fail@plt+0x7274>
   18360:	mov	r3, #1
   18364:	b	1836c <__assert_fail@plt+0x7278>
   18368:	mov	r3, #0
   1836c:	mov	r0, r3
   18370:	add	sp, fp, #0
   18374:	pop	{fp}		; (ldr fp, [sp], #4)
   18378:	bx	lr
   1837c:	push	{fp}		; (str fp, [sp, #-4]!)
   18380:	add	fp, sp, #0
   18384:	sub	sp, sp, #12
   18388:	str	r0, [fp, #-8]
   1838c:	ldr	r3, [fp, #-8]
   18390:	sub	r3, r3, #48	; 0x30
   18394:	cmp	r3, #9
   18398:	bhi	183a4 <__assert_fail@plt+0x72b0>
   1839c:	mov	r3, #1
   183a0:	b	183a8 <__assert_fail@plt+0x72b4>
   183a4:	mov	r3, #0
   183a8:	mov	r0, r3
   183ac:	add	sp, fp, #0
   183b0:	pop	{fp}		; (ldr fp, [sp], #4)
   183b4:	bx	lr
   183b8:	push	{fp}		; (str fp, [sp, #-4]!)
   183bc:	add	fp, sp, #0
   183c0:	sub	sp, sp, #12
   183c4:	str	r0, [fp, #-8]
   183c8:	ldr	r3, [fp, #-8]
   183cc:	sub	r3, r3, #33	; 0x21
   183d0:	cmp	r3, #93	; 0x5d
   183d4:	bhi	183e0 <__assert_fail@plt+0x72ec>
   183d8:	mov	r3, #1
   183dc:	b	183e4 <__assert_fail@plt+0x72f0>
   183e0:	mov	r3, #0
   183e4:	mov	r0, r3
   183e8:	add	sp, fp, #0
   183ec:	pop	{fp}		; (ldr fp, [sp], #4)
   183f0:	bx	lr
   183f4:	push	{fp}		; (str fp, [sp, #-4]!)
   183f8:	add	fp, sp, #0
   183fc:	sub	sp, sp, #12
   18400:	str	r0, [fp, #-8]
   18404:	ldr	r3, [fp, #-8]
   18408:	sub	r3, r3, #97	; 0x61
   1840c:	cmp	r3, #25
   18410:	bhi	1841c <__assert_fail@plt+0x7328>
   18414:	mov	r3, #1
   18418:	b	18420 <__assert_fail@plt+0x732c>
   1841c:	mov	r3, #0
   18420:	mov	r0, r3
   18424:	add	sp, fp, #0
   18428:	pop	{fp}		; (ldr fp, [sp], #4)
   1842c:	bx	lr
   18430:	push	{fp}		; (str fp, [sp, #-4]!)
   18434:	add	fp, sp, #0
   18438:	sub	sp, sp, #12
   1843c:	str	r0, [fp, #-8]
   18440:	ldr	r3, [fp, #-8]
   18444:	sub	r3, r3, #32
   18448:	cmp	r3, #94	; 0x5e
   1844c:	bhi	18458 <__assert_fail@plt+0x7364>
   18450:	mov	r3, #1
   18454:	b	1845c <__assert_fail@plt+0x7368>
   18458:	mov	r3, #0
   1845c:	mov	r0, r3
   18460:	add	sp, fp, #0
   18464:	pop	{fp}		; (ldr fp, [sp], #4)
   18468:	bx	lr
   1846c:	push	{fp}		; (str fp, [sp, #-4]!)
   18470:	add	fp, sp, #0
   18474:	sub	sp, sp, #12
   18478:	str	r0, [fp, #-8]
   1847c:	ldr	r3, [fp, #-8]
   18480:	cmp	r3, #64	; 0x40
   18484:	bgt	184a0 <__assert_fail@plt+0x73ac>
   18488:	cmp	r3, #58	; 0x3a
   1848c:	bge	184bc <__assert_fail@plt+0x73c8>
   18490:	sub	r3, r3, #33	; 0x21
   18494:	cmp	r3, #14
   18498:	bhi	184c4 <__assert_fail@plt+0x73d0>
   1849c:	b	184bc <__assert_fail@plt+0x73c8>
   184a0:	cmp	r3, #91	; 0x5b
   184a4:	blt	184c4 <__assert_fail@plt+0x73d0>
   184a8:	cmp	r3, #96	; 0x60
   184ac:	ble	184bc <__assert_fail@plt+0x73c8>
   184b0:	sub	r3, r3, #123	; 0x7b
   184b4:	cmp	r3, #3
   184b8:	bhi	184c4 <__assert_fail@plt+0x73d0>
   184bc:	mov	r3, #1
   184c0:	b	184c8 <__assert_fail@plt+0x73d4>
   184c4:	mov	r3, #0
   184c8:	mov	r0, r3
   184cc:	add	sp, fp, #0
   184d0:	pop	{fp}		; (ldr fp, [sp], #4)
   184d4:	bx	lr
   184d8:	push	{fp}		; (str fp, [sp, #-4]!)
   184dc:	add	fp, sp, #0
   184e0:	sub	sp, sp, #12
   184e4:	str	r0, [fp, #-8]
   184e8:	ldr	r3, [fp, #-8]
   184ec:	cmp	r3, #9
   184f0:	blt	1850c <__assert_fail@plt+0x7418>
   184f4:	cmp	r3, #13
   184f8:	ble	18504 <__assert_fail@plt+0x7410>
   184fc:	cmp	r3, #32
   18500:	bne	1850c <__assert_fail@plt+0x7418>
   18504:	mov	r3, #1
   18508:	b	18510 <__assert_fail@plt+0x741c>
   1850c:	mov	r3, #0
   18510:	mov	r0, r3
   18514:	add	sp, fp, #0
   18518:	pop	{fp}		; (ldr fp, [sp], #4)
   1851c:	bx	lr
   18520:	push	{fp}		; (str fp, [sp, #-4]!)
   18524:	add	fp, sp, #0
   18528:	sub	sp, sp, #12
   1852c:	str	r0, [fp, #-8]
   18530:	ldr	r3, [fp, #-8]
   18534:	sub	r3, r3, #65	; 0x41
   18538:	cmp	r3, #25
   1853c:	bhi	18548 <__assert_fail@plt+0x7454>
   18540:	mov	r3, #1
   18544:	b	1854c <__assert_fail@plt+0x7458>
   18548:	mov	r3, #0
   1854c:	mov	r0, r3
   18550:	add	sp, fp, #0
   18554:	pop	{fp}		; (ldr fp, [sp], #4)
   18558:	bx	lr
   1855c:	push	{fp}		; (str fp, [sp, #-4]!)
   18560:	add	fp, sp, #0
   18564:	sub	sp, sp, #12
   18568:	str	r0, [fp, #-8]
   1856c:	ldr	r3, [fp, #-8]
   18570:	sub	r3, r3, #48	; 0x30
   18574:	cmp	r3, #54	; 0x36
   18578:	addls	pc, pc, r3, lsl #2
   1857c:	b	18664 <__assert_fail@plt+0x7570>
   18580:	b	1865c <__assert_fail@plt+0x7568>
   18584:	b	1865c <__assert_fail@plt+0x7568>
   18588:	b	1865c <__assert_fail@plt+0x7568>
   1858c:	b	1865c <__assert_fail@plt+0x7568>
   18590:	b	1865c <__assert_fail@plt+0x7568>
   18594:	b	1865c <__assert_fail@plt+0x7568>
   18598:	b	1865c <__assert_fail@plt+0x7568>
   1859c:	b	1865c <__assert_fail@plt+0x7568>
   185a0:	b	1865c <__assert_fail@plt+0x7568>
   185a4:	b	1865c <__assert_fail@plt+0x7568>
   185a8:	b	18664 <__assert_fail@plt+0x7570>
   185ac:	b	18664 <__assert_fail@plt+0x7570>
   185b0:	b	18664 <__assert_fail@plt+0x7570>
   185b4:	b	18664 <__assert_fail@plt+0x7570>
   185b8:	b	18664 <__assert_fail@plt+0x7570>
   185bc:	b	18664 <__assert_fail@plt+0x7570>
   185c0:	b	18664 <__assert_fail@plt+0x7570>
   185c4:	b	1865c <__assert_fail@plt+0x7568>
   185c8:	b	1865c <__assert_fail@plt+0x7568>
   185cc:	b	1865c <__assert_fail@plt+0x7568>
   185d0:	b	1865c <__assert_fail@plt+0x7568>
   185d4:	b	1865c <__assert_fail@plt+0x7568>
   185d8:	b	1865c <__assert_fail@plt+0x7568>
   185dc:	b	18664 <__assert_fail@plt+0x7570>
   185e0:	b	18664 <__assert_fail@plt+0x7570>
   185e4:	b	18664 <__assert_fail@plt+0x7570>
   185e8:	b	18664 <__assert_fail@plt+0x7570>
   185ec:	b	18664 <__assert_fail@plt+0x7570>
   185f0:	b	18664 <__assert_fail@plt+0x7570>
   185f4:	b	18664 <__assert_fail@plt+0x7570>
   185f8:	b	18664 <__assert_fail@plt+0x7570>
   185fc:	b	18664 <__assert_fail@plt+0x7570>
   18600:	b	18664 <__assert_fail@plt+0x7570>
   18604:	b	18664 <__assert_fail@plt+0x7570>
   18608:	b	18664 <__assert_fail@plt+0x7570>
   1860c:	b	18664 <__assert_fail@plt+0x7570>
   18610:	b	18664 <__assert_fail@plt+0x7570>
   18614:	b	18664 <__assert_fail@plt+0x7570>
   18618:	b	18664 <__assert_fail@plt+0x7570>
   1861c:	b	18664 <__assert_fail@plt+0x7570>
   18620:	b	18664 <__assert_fail@plt+0x7570>
   18624:	b	18664 <__assert_fail@plt+0x7570>
   18628:	b	18664 <__assert_fail@plt+0x7570>
   1862c:	b	18664 <__assert_fail@plt+0x7570>
   18630:	b	18664 <__assert_fail@plt+0x7570>
   18634:	b	18664 <__assert_fail@plt+0x7570>
   18638:	b	18664 <__assert_fail@plt+0x7570>
   1863c:	b	18664 <__assert_fail@plt+0x7570>
   18640:	b	18664 <__assert_fail@plt+0x7570>
   18644:	b	1865c <__assert_fail@plt+0x7568>
   18648:	b	1865c <__assert_fail@plt+0x7568>
   1864c:	b	1865c <__assert_fail@plt+0x7568>
   18650:	b	1865c <__assert_fail@plt+0x7568>
   18654:	b	1865c <__assert_fail@plt+0x7568>
   18658:	b	1865c <__assert_fail@plt+0x7568>
   1865c:	mov	r3, #1
   18660:	b	18668 <__assert_fail@plt+0x7574>
   18664:	mov	r3, #0
   18668:	mov	r0, r3
   1866c:	add	sp, fp, #0
   18670:	pop	{fp}		; (ldr fp, [sp], #4)
   18674:	bx	lr
   18678:	push	{fp}		; (str fp, [sp, #-4]!)
   1867c:	add	fp, sp, #0
   18680:	sub	sp, sp, #12
   18684:	str	r0, [fp, #-8]
   18688:	ldr	r3, [fp, #-8]
   1868c:	sub	r3, r3, #65	; 0x41
   18690:	cmp	r3, #25
   18694:	bhi	186a4 <__assert_fail@plt+0x75b0>
   18698:	ldr	r3, [fp, #-8]
   1869c:	add	r3, r3, #32
   186a0:	b	186a8 <__assert_fail@plt+0x75b4>
   186a4:	ldr	r3, [fp, #-8]
   186a8:	mov	r0, r3
   186ac:	add	sp, fp, #0
   186b0:	pop	{fp}		; (ldr fp, [sp], #4)
   186b4:	bx	lr
   186b8:	push	{fp}		; (str fp, [sp, #-4]!)
   186bc:	add	fp, sp, #0
   186c0:	sub	sp, sp, #12
   186c4:	str	r0, [fp, #-8]
   186c8:	ldr	r3, [fp, #-8]
   186cc:	sub	r3, r3, #97	; 0x61
   186d0:	cmp	r3, #25
   186d4:	bhi	186e4 <__assert_fail@plt+0x75f0>
   186d8:	ldr	r3, [fp, #-8]
   186dc:	sub	r3, r3, #32
   186e0:	b	186e8 <__assert_fail@plt+0x75f4>
   186e4:	ldr	r3, [fp, #-8]
   186e8:	mov	r0, r3
   186ec:	add	sp, fp, #0
   186f0:	pop	{fp}		; (ldr fp, [sp], #4)
   186f4:	bx	lr
   186f8:	push	{fp}		; (str fp, [sp, #-4]!)
   186fc:	add	fp, sp, #0
   18700:	sub	sp, sp, #12
   18704:	str	r0, [fp, #-8]
   18708:	ldr	r3, [fp, #-8]
   1870c:	ldr	r2, [r3, #20]
   18710:	ldr	r3, [fp, #-8]
   18714:	ldr	r3, [r3, #16]
   18718:	cmp	r2, r3
   1871c:	bls	18728 <__assert_fail@plt+0x7634>
   18720:	mov	r3, #0
   18724:	b	18778 <__assert_fail@plt+0x7684>
   18728:	ldr	r3, [fp, #-8]
   1872c:	ldr	r3, [r3, #8]
   18730:	mov	r2, r3
   18734:	ldr	r3, [fp, #-8]
   18738:	ldr	r3, [r3, #4]
   1873c:	sub	r2, r2, r3
   18740:	ldr	r3, [fp, #-8]
   18744:	ldr	r3, [r3]
   18748:	and	r3, r3, #256	; 0x100
   1874c:	cmp	r3, #0
   18750:	beq	18770 <__assert_fail@plt+0x767c>
   18754:	ldr	r3, [fp, #-8]
   18758:	ldr	r3, [r3, #44]	; 0x2c
   1875c:	mov	r1, r3
   18760:	ldr	r3, [fp, #-8]
   18764:	ldr	r3, [r3, #36]	; 0x24
   18768:	sub	r3, r1, r3
   1876c:	b	18774 <__assert_fail@plt+0x7680>
   18770:	mov	r3, #0
   18774:	add	r3, r2, r3
   18778:	mov	r0, r3
   1877c:	add	sp, fp, #0
   18780:	pop	{fp}		; (ldr fp, [sp], #4)
   18784:	bx	lr
   18788:	push	{fp, lr}
   1878c:	add	fp, sp, #4
   18790:	sub	sp, sp, #272	; 0x110
   18794:	str	r0, [fp, #-272]	; 0xfffffef0
   18798:	sub	r3, fp, #264	; 0x108
   1879c:	ldr	r2, [pc, #116]	; 18818 <__assert_fail@plt+0x7724>
   187a0:	mov	r1, r3
   187a4:	ldr	r0, [fp, #-272]	; 0xfffffef0
   187a8:	bl	1892c <__assert_fail@plt+0x7838>
   187ac:	mov	r3, r0
   187b0:	cmp	r3, #0
   187b4:	beq	187c0 <__assert_fail@plt+0x76cc>
   187b8:	mov	r3, #0
   187bc:	b	1880c <__assert_fail@plt+0x7718>
   187c0:	sub	r3, fp, #264	; 0x108
   187c4:	ldr	r1, [pc, #80]	; 1881c <__assert_fail@plt+0x7728>
   187c8:	mov	r0, r3
   187cc:	bl	10e54 <strcmp@plt>
   187d0:	mov	r3, r0
   187d4:	cmp	r3, #0
   187d8:	beq	18800 <__assert_fail@plt+0x770c>
   187dc:	sub	r3, fp, #264	; 0x108
   187e0:	ldr	r1, [pc, #56]	; 18820 <__assert_fail@plt+0x772c>
   187e4:	mov	r0, r3
   187e8:	bl	10e54 <strcmp@plt>
   187ec:	mov	r3, r0
   187f0:	cmp	r3, #0
   187f4:	beq	18800 <__assert_fail@plt+0x770c>
   187f8:	mov	r3, #1
   187fc:	b	18804 <__assert_fail@plt+0x7710>
   18800:	mov	r3, #0
   18804:	and	r3, r3, #1
   18808:	uxtb	r3, r3
   1880c:	mov	r0, r3
   18810:	sub	sp, fp, #4
   18814:	pop	{fp, pc}
   18818:	andeq	r0, r0, r1, lsl #2
   1881c:	andeq	r9, r1, r0, asr #31
   18820:	andeq	r9, r1, r4, asr #31
   18824:	push	{fp, lr}
   18828:	add	fp, sp, #4
   1882c:	sub	sp, sp, #16
   18830:	str	r0, [fp, #-16]
   18834:	mov	r1, #0
   18838:	ldr	r0, [fp, #-16]
   1883c:	bl	11064 <setlocale@plt>
   18840:	str	r0, [fp, #-8]
   18844:	ldr	r3, [fp, #-8]
   18848:	mov	r0, r3
   1884c:	sub	sp, fp, #4
   18850:	pop	{fp, pc}
   18854:	push	{fp, lr}
   18858:	add	fp, sp, #4
   1885c:	sub	sp, sp, #24
   18860:	str	r0, [fp, #-16]
   18864:	str	r1, [fp, #-20]	; 0xffffffec
   18868:	str	r2, [fp, #-24]	; 0xffffffe8
   1886c:	ldr	r0, [fp, #-16]
   18870:	bl	18824 <__assert_fail@plt+0x7730>
   18874:	str	r0, [fp, #-8]
   18878:	ldr	r3, [fp, #-8]
   1887c:	cmp	r3, #0
   18880:	bne	188a4 <__assert_fail@plt+0x77b0>
   18884:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18888:	cmp	r3, #0
   1888c:	beq	1889c <__assert_fail@plt+0x77a8>
   18890:	ldr	r3, [fp, #-20]	; 0xffffffec
   18894:	mov	r2, #0
   18898:	strb	r2, [r3]
   1889c:	mov	r3, #22
   188a0:	b	18920 <__assert_fail@plt+0x782c>
   188a4:	ldr	r0, [fp, #-8]
   188a8:	bl	10fe0 <strlen@plt>
   188ac:	str	r0, [fp, #-12]
   188b0:	ldr	r2, [fp, #-12]
   188b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188b8:	cmp	r2, r3
   188bc:	bcs	188e0 <__assert_fail@plt+0x77ec>
   188c0:	ldr	r3, [fp, #-12]
   188c4:	add	r3, r3, #1
   188c8:	mov	r2, r3
   188cc:	ldr	r1, [fp, #-8]
   188d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   188d4:	bl	10eb4 <memcpy@plt>
   188d8:	mov	r3, #0
   188dc:	b	18920 <__assert_fail@plt+0x782c>
   188e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188e4:	cmp	r3, #0
   188e8:	beq	1891c <__assert_fail@plt+0x7828>
   188ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188f0:	sub	r3, r3, #1
   188f4:	mov	r2, r3
   188f8:	ldr	r1, [fp, #-8]
   188fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   18900:	bl	10eb4 <memcpy@plt>
   18904:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18908:	sub	r3, r3, #1
   1890c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18910:	add	r3, r2, r3
   18914:	mov	r2, #0
   18918:	strb	r2, [r3]
   1891c:	mov	r3, #34	; 0x22
   18920:	mov	r0, r3
   18924:	sub	sp, fp, #4
   18928:	pop	{fp, pc}
   1892c:	push	{fp, lr}
   18930:	add	fp, sp, #4
   18934:	sub	sp, sp, #16
   18938:	str	r0, [fp, #-8]
   1893c:	str	r1, [fp, #-12]
   18940:	str	r2, [fp, #-16]
   18944:	ldr	r2, [fp, #-16]
   18948:	ldr	r1, [fp, #-12]
   1894c:	ldr	r0, [fp, #-8]
   18950:	bl	18854 <__assert_fail@plt+0x7760>
   18954:	mov	r3, r0
   18958:	mov	r0, r3
   1895c:	sub	sp, fp, #4
   18960:	pop	{fp, pc}
   18964:	push	{fp, lr}
   18968:	add	fp, sp, #4
   1896c:	sub	sp, sp, #8
   18970:	str	r0, [fp, #-8]
   18974:	ldr	r0, [fp, #-8]
   18978:	bl	18824 <__assert_fail@plt+0x7730>
   1897c:	mov	r3, r0
   18980:	mov	r0, r3
   18984:	sub	sp, fp, #4
   18988:	pop	{fp, pc}
   1898c:	subs	r2, r1, #1
   18990:	bxeq	lr
   18994:	bcc	18b6c <__assert_fail@plt+0x7a78>
   18998:	cmp	r0, r1
   1899c:	bls	18b50 <__assert_fail@plt+0x7a5c>
   189a0:	tst	r1, r2
   189a4:	beq	18b5c <__assert_fail@plt+0x7a68>
   189a8:	clz	r3, r0
   189ac:	clz	r2, r1
   189b0:	sub	r3, r2, r3
   189b4:	rsbs	r3, r3, #31
   189b8:	addne	r3, r3, r3, lsl #1
   189bc:	mov	r2, #0
   189c0:	addne	pc, pc, r3, lsl #2
   189c4:	nop			; (mov r0, r0)
   189c8:	cmp	r0, r1, lsl #31
   189cc:	adc	r2, r2, r2
   189d0:	subcs	r0, r0, r1, lsl #31
   189d4:	cmp	r0, r1, lsl #30
   189d8:	adc	r2, r2, r2
   189dc:	subcs	r0, r0, r1, lsl #30
   189e0:	cmp	r0, r1, lsl #29
   189e4:	adc	r2, r2, r2
   189e8:	subcs	r0, r0, r1, lsl #29
   189ec:	cmp	r0, r1, lsl #28
   189f0:	adc	r2, r2, r2
   189f4:	subcs	r0, r0, r1, lsl #28
   189f8:	cmp	r0, r1, lsl #27
   189fc:	adc	r2, r2, r2
   18a00:	subcs	r0, r0, r1, lsl #27
   18a04:	cmp	r0, r1, lsl #26
   18a08:	adc	r2, r2, r2
   18a0c:	subcs	r0, r0, r1, lsl #26
   18a10:	cmp	r0, r1, lsl #25
   18a14:	adc	r2, r2, r2
   18a18:	subcs	r0, r0, r1, lsl #25
   18a1c:	cmp	r0, r1, lsl #24
   18a20:	adc	r2, r2, r2
   18a24:	subcs	r0, r0, r1, lsl #24
   18a28:	cmp	r0, r1, lsl #23
   18a2c:	adc	r2, r2, r2
   18a30:	subcs	r0, r0, r1, lsl #23
   18a34:	cmp	r0, r1, lsl #22
   18a38:	adc	r2, r2, r2
   18a3c:	subcs	r0, r0, r1, lsl #22
   18a40:	cmp	r0, r1, lsl #21
   18a44:	adc	r2, r2, r2
   18a48:	subcs	r0, r0, r1, lsl #21
   18a4c:	cmp	r0, r1, lsl #20
   18a50:	adc	r2, r2, r2
   18a54:	subcs	r0, r0, r1, lsl #20
   18a58:	cmp	r0, r1, lsl #19
   18a5c:	adc	r2, r2, r2
   18a60:	subcs	r0, r0, r1, lsl #19
   18a64:	cmp	r0, r1, lsl #18
   18a68:	adc	r2, r2, r2
   18a6c:	subcs	r0, r0, r1, lsl #18
   18a70:	cmp	r0, r1, lsl #17
   18a74:	adc	r2, r2, r2
   18a78:	subcs	r0, r0, r1, lsl #17
   18a7c:	cmp	r0, r1, lsl #16
   18a80:	adc	r2, r2, r2
   18a84:	subcs	r0, r0, r1, lsl #16
   18a88:	cmp	r0, r1, lsl #15
   18a8c:	adc	r2, r2, r2
   18a90:	subcs	r0, r0, r1, lsl #15
   18a94:	cmp	r0, r1, lsl #14
   18a98:	adc	r2, r2, r2
   18a9c:	subcs	r0, r0, r1, lsl #14
   18aa0:	cmp	r0, r1, lsl #13
   18aa4:	adc	r2, r2, r2
   18aa8:	subcs	r0, r0, r1, lsl #13
   18aac:	cmp	r0, r1, lsl #12
   18ab0:	adc	r2, r2, r2
   18ab4:	subcs	r0, r0, r1, lsl #12
   18ab8:	cmp	r0, r1, lsl #11
   18abc:	adc	r2, r2, r2
   18ac0:	subcs	r0, r0, r1, lsl #11
   18ac4:	cmp	r0, r1, lsl #10
   18ac8:	adc	r2, r2, r2
   18acc:	subcs	r0, r0, r1, lsl #10
   18ad0:	cmp	r0, r1, lsl #9
   18ad4:	adc	r2, r2, r2
   18ad8:	subcs	r0, r0, r1, lsl #9
   18adc:	cmp	r0, r1, lsl #8
   18ae0:	adc	r2, r2, r2
   18ae4:	subcs	r0, r0, r1, lsl #8
   18ae8:	cmp	r0, r1, lsl #7
   18aec:	adc	r2, r2, r2
   18af0:	subcs	r0, r0, r1, lsl #7
   18af4:	cmp	r0, r1, lsl #6
   18af8:	adc	r2, r2, r2
   18afc:	subcs	r0, r0, r1, lsl #6
   18b00:	cmp	r0, r1, lsl #5
   18b04:	adc	r2, r2, r2
   18b08:	subcs	r0, r0, r1, lsl #5
   18b0c:	cmp	r0, r1, lsl #4
   18b10:	adc	r2, r2, r2
   18b14:	subcs	r0, r0, r1, lsl #4
   18b18:	cmp	r0, r1, lsl #3
   18b1c:	adc	r2, r2, r2
   18b20:	subcs	r0, r0, r1, lsl #3
   18b24:	cmp	r0, r1, lsl #2
   18b28:	adc	r2, r2, r2
   18b2c:	subcs	r0, r0, r1, lsl #2
   18b30:	cmp	r0, r1, lsl #1
   18b34:	adc	r2, r2, r2
   18b38:	subcs	r0, r0, r1, lsl #1
   18b3c:	cmp	r0, r1
   18b40:	adc	r2, r2, r2
   18b44:	subcs	r0, r0, r1
   18b48:	mov	r0, r2
   18b4c:	bx	lr
   18b50:	moveq	r0, #1
   18b54:	movne	r0, #0
   18b58:	bx	lr
   18b5c:	clz	r2, r1
   18b60:	rsb	r2, r2, #31
   18b64:	lsr	r0, r0, r2
   18b68:	bx	lr
   18b6c:	cmp	r0, #0
   18b70:	mvnne	r0, #0
   18b74:	b	18dd8 <__assert_fail@plt+0x7ce4>
   18b78:	cmp	r1, #0
   18b7c:	beq	18b6c <__assert_fail@plt+0x7a78>
   18b80:	push	{r0, r1, lr}
   18b84:	bl	1898c <__assert_fail@plt+0x7898>
   18b88:	pop	{r1, r2, lr}
   18b8c:	mul	r3, r2, r0
   18b90:	sub	r1, r1, r3
   18b94:	bx	lr
   18b98:	cmp	r1, #0
   18b9c:	beq	18da8 <__assert_fail@plt+0x7cb4>
   18ba0:	eor	ip, r0, r1
   18ba4:	rsbmi	r1, r1, #0
   18ba8:	subs	r2, r1, #1
   18bac:	beq	18d74 <__assert_fail@plt+0x7c80>
   18bb0:	movs	r3, r0
   18bb4:	rsbmi	r3, r0, #0
   18bb8:	cmp	r3, r1
   18bbc:	bls	18d80 <__assert_fail@plt+0x7c8c>
   18bc0:	tst	r1, r2
   18bc4:	beq	18d90 <__assert_fail@plt+0x7c9c>
   18bc8:	clz	r2, r3
   18bcc:	clz	r0, r1
   18bd0:	sub	r2, r0, r2
   18bd4:	rsbs	r2, r2, #31
   18bd8:	addne	r2, r2, r2, lsl #1
   18bdc:	mov	r0, #0
   18be0:	addne	pc, pc, r2, lsl #2
   18be4:	nop			; (mov r0, r0)
   18be8:	cmp	r3, r1, lsl #31
   18bec:	adc	r0, r0, r0
   18bf0:	subcs	r3, r3, r1, lsl #31
   18bf4:	cmp	r3, r1, lsl #30
   18bf8:	adc	r0, r0, r0
   18bfc:	subcs	r3, r3, r1, lsl #30
   18c00:	cmp	r3, r1, lsl #29
   18c04:	adc	r0, r0, r0
   18c08:	subcs	r3, r3, r1, lsl #29
   18c0c:	cmp	r3, r1, lsl #28
   18c10:	adc	r0, r0, r0
   18c14:	subcs	r3, r3, r1, lsl #28
   18c18:	cmp	r3, r1, lsl #27
   18c1c:	adc	r0, r0, r0
   18c20:	subcs	r3, r3, r1, lsl #27
   18c24:	cmp	r3, r1, lsl #26
   18c28:	adc	r0, r0, r0
   18c2c:	subcs	r3, r3, r1, lsl #26
   18c30:	cmp	r3, r1, lsl #25
   18c34:	adc	r0, r0, r0
   18c38:	subcs	r3, r3, r1, lsl #25
   18c3c:	cmp	r3, r1, lsl #24
   18c40:	adc	r0, r0, r0
   18c44:	subcs	r3, r3, r1, lsl #24
   18c48:	cmp	r3, r1, lsl #23
   18c4c:	adc	r0, r0, r0
   18c50:	subcs	r3, r3, r1, lsl #23
   18c54:	cmp	r3, r1, lsl #22
   18c58:	adc	r0, r0, r0
   18c5c:	subcs	r3, r3, r1, lsl #22
   18c60:	cmp	r3, r1, lsl #21
   18c64:	adc	r0, r0, r0
   18c68:	subcs	r3, r3, r1, lsl #21
   18c6c:	cmp	r3, r1, lsl #20
   18c70:	adc	r0, r0, r0
   18c74:	subcs	r3, r3, r1, lsl #20
   18c78:	cmp	r3, r1, lsl #19
   18c7c:	adc	r0, r0, r0
   18c80:	subcs	r3, r3, r1, lsl #19
   18c84:	cmp	r3, r1, lsl #18
   18c88:	adc	r0, r0, r0
   18c8c:	subcs	r3, r3, r1, lsl #18
   18c90:	cmp	r3, r1, lsl #17
   18c94:	adc	r0, r0, r0
   18c98:	subcs	r3, r3, r1, lsl #17
   18c9c:	cmp	r3, r1, lsl #16
   18ca0:	adc	r0, r0, r0
   18ca4:	subcs	r3, r3, r1, lsl #16
   18ca8:	cmp	r3, r1, lsl #15
   18cac:	adc	r0, r0, r0
   18cb0:	subcs	r3, r3, r1, lsl #15
   18cb4:	cmp	r3, r1, lsl #14
   18cb8:	adc	r0, r0, r0
   18cbc:	subcs	r3, r3, r1, lsl #14
   18cc0:	cmp	r3, r1, lsl #13
   18cc4:	adc	r0, r0, r0
   18cc8:	subcs	r3, r3, r1, lsl #13
   18ccc:	cmp	r3, r1, lsl #12
   18cd0:	adc	r0, r0, r0
   18cd4:	subcs	r3, r3, r1, lsl #12
   18cd8:	cmp	r3, r1, lsl #11
   18cdc:	adc	r0, r0, r0
   18ce0:	subcs	r3, r3, r1, lsl #11
   18ce4:	cmp	r3, r1, lsl #10
   18ce8:	adc	r0, r0, r0
   18cec:	subcs	r3, r3, r1, lsl #10
   18cf0:	cmp	r3, r1, lsl #9
   18cf4:	adc	r0, r0, r0
   18cf8:	subcs	r3, r3, r1, lsl #9
   18cfc:	cmp	r3, r1, lsl #8
   18d00:	adc	r0, r0, r0
   18d04:	subcs	r3, r3, r1, lsl #8
   18d08:	cmp	r3, r1, lsl #7
   18d0c:	adc	r0, r0, r0
   18d10:	subcs	r3, r3, r1, lsl #7
   18d14:	cmp	r3, r1, lsl #6
   18d18:	adc	r0, r0, r0
   18d1c:	subcs	r3, r3, r1, lsl #6
   18d20:	cmp	r3, r1, lsl #5
   18d24:	adc	r0, r0, r0
   18d28:	subcs	r3, r3, r1, lsl #5
   18d2c:	cmp	r3, r1, lsl #4
   18d30:	adc	r0, r0, r0
   18d34:	subcs	r3, r3, r1, lsl #4
   18d38:	cmp	r3, r1, lsl #3
   18d3c:	adc	r0, r0, r0
   18d40:	subcs	r3, r3, r1, lsl #3
   18d44:	cmp	r3, r1, lsl #2
   18d48:	adc	r0, r0, r0
   18d4c:	subcs	r3, r3, r1, lsl #2
   18d50:	cmp	r3, r1, lsl #1
   18d54:	adc	r0, r0, r0
   18d58:	subcs	r3, r3, r1, lsl #1
   18d5c:	cmp	r3, r1
   18d60:	adc	r0, r0, r0
   18d64:	subcs	r3, r3, r1
   18d68:	cmp	ip, #0
   18d6c:	rsbmi	r0, r0, #0
   18d70:	bx	lr
   18d74:	teq	ip, r0
   18d78:	rsbmi	r0, r0, #0
   18d7c:	bx	lr
   18d80:	movcc	r0, #0
   18d84:	asreq	r0, ip, #31
   18d88:	orreq	r0, r0, #1
   18d8c:	bx	lr
   18d90:	clz	r2, r1
   18d94:	rsb	r2, r2, #31
   18d98:	cmp	ip, #0
   18d9c:	lsr	r0, r3, r2
   18da0:	rsbmi	r0, r0, #0
   18da4:	bx	lr
   18da8:	cmp	r0, #0
   18dac:	mvngt	r0, #-2147483648	; 0x80000000
   18db0:	movlt	r0, #-2147483648	; 0x80000000
   18db4:	b	18dd8 <__assert_fail@plt+0x7ce4>
   18db8:	cmp	r1, #0
   18dbc:	beq	18da8 <__assert_fail@plt+0x7cb4>
   18dc0:	push	{r0, r1, lr}
   18dc4:	bl	18ba0 <__assert_fail@plt+0x7aac>
   18dc8:	pop	{r1, r2, lr}
   18dcc:	mul	r3, r2, r0
   18dd0:	sub	r1, r1, r3
   18dd4:	bx	lr
   18dd8:	push	{r1, lr}
   18ddc:	mov	r0, #8
   18de0:	bl	10e48 <raise@plt>
   18de4:	pop	{r1, pc}
   18de8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18dec:	mov	r7, r0
   18df0:	ldr	r6, [pc, #72]	; 18e40 <__assert_fail@plt+0x7d4c>
   18df4:	ldr	r5, [pc, #72]	; 18e44 <__assert_fail@plt+0x7d50>
   18df8:	add	r6, pc, r6
   18dfc:	add	r5, pc, r5
   18e00:	sub	r6, r6, r5
   18e04:	mov	r8, r1
   18e08:	mov	r9, r2
   18e0c:	bl	10e10 <calloc@plt-0x20>
   18e10:	asrs	r6, r6, #2
   18e14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e18:	mov	r4, #0
   18e1c:	add	r4, r4, #1
   18e20:	ldr	r3, [r5], #4
   18e24:	mov	r2, r9
   18e28:	mov	r1, r8
   18e2c:	mov	r0, r7
   18e30:	blx	r3
   18e34:	cmp	r6, r4
   18e38:	bne	18e1c <__assert_fail@plt+0x7d28>
   18e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e40:	andeq	r2, r1, r0, lsl r1
   18e44:	andeq	r2, r1, r8, lsl #2
   18e48:	bx	lr
   18e4c:	ldr	r3, [pc, #12]	; 18e60 <__assert_fail@plt+0x7d6c>
   18e50:	mov	r1, #0
   18e54:	add	r3, pc, r3
   18e58:	ldr	r2, [r3]
   18e5c:	b	11010 <__cxa_atexit@plt>
   18e60:	andeq	r2, r1, r8, lsr #5

Disassembly of section .fini:

00018e64 <.fini>:
   18e64:	push	{r3, lr}
   18e68:	pop	{r3, pc}
