
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	12384 <__assert_fail@plt+0xe20>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	r2, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #139264	; 0x22000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #139264	; 0x22000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #139264	; 0x22000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #139264	; 0x22000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #139264	; 0x22000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #139264	; 0x22000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #139264	; 0x22000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #139264	; 0x22000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #139264	; 0x22000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #139264	; 0x22000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #139264	; 0x22000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #139264	; 0x22000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #139264	; 0x22000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #139264	; 0x22000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #139264	; 0x22000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #139264	; 0x22000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #139264	; 0x22000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #139264	; 0x22000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <tolower@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #139264	; 0x22000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <pthread_mutex_init@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #139264	; 0x22000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #139264	; 0x22000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #139264	; 0x22000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #139264	; 0x22000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #139264	; 0x22000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #139264	; 0x22000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #139264	; 0x22000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #139264	; 0x22000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #139264	; 0x22000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #139264	; 0x22000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #139264	; 0x22000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #139264	; 0x22000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #139264	; 0x22000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #139264	; 0x22000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #139264	; 0x22000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #139264	; 0x22000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <lseek64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #139264	; 0x22000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <__ctype_get_mb_cur_max@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #139264	; 0x22000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <strcpy@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #139264	; 0x22000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <__fpending@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #139264	; 0x22000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <ferror_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #139264	; 0x22000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #139264	; 0x22000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #139264	; 0x22000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #139264	; 0x22000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #139264	; 0x22000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #139264	; 0x22000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #139264	; 0x22000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #139264	; 0x22000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__gmon_start__@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #139264	; 0x22000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <getopt_long@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #139264	; 0x22000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__ctype_b_loc@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #139264	; 0x22000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <exit@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #139264	; 0x22000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <strlen@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #139264	; 0x22000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <strchr@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #139264	; 0x22000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <__errno_location@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #139264	; 0x22000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <iswalnum@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #139264	; 0x22000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__sprintf_chk@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #139264	; 0x22000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <__cxa_atexit@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #139264	; 0x22000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <memset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #139264	; 0x22000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <btowc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #139264	; 0x22000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <__printf_chk@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #139264	; 0x22000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <fileno@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #139264	; 0x22000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <strtoumax@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #139264	; 0x22000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <__fprintf_chk@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #139264	; 0x22000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <strtoimax@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #139264	; 0x22000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #139264	; 0x22000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #139264	; 0x22000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #139264	; 0x22000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #139264	; 0x22000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #139264	; 0x22000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <toupper@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #139264	; 0x22000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <strrchr@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #139264	; 0x22000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <nl_langinfo@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #139264	; 0x22000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <fputc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #139264	; 0x22000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #139264	; 0x22000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #139264	; 0x22000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #139264	; 0x22000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <fputs@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #139264	; 0x22000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <strncmp@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #139264	; 0x22000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <abort@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #139264	; 0x22000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <close@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #139264	; 0x22000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__snprintf_chk@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #139264	; 0x22000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

00011564 <__assert_fail@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #139264	; 0x22000
   1156c:	ldr	pc, [ip, #3044]!	; 0xbe4

Disassembly of section .text:

00011570 <.text>:
   11570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11574:	sub	sp, sp, #212	; 0xd4
   11578:	mov	sl, r1
   1157c:	str	r0, [sp, #24]
   11580:	ldr	r0, [r1]
   11584:	bl	138c4 <__assert_fail@plt+0x2360>
   11588:	ldr	r1, [pc, #3332]	; 12294 <__assert_fail@plt+0xd30>
   1158c:	mov	r0, #6
   11590:	bl	114bc <setlocale@plt>
   11594:	ldr	r1, [pc, #3324]	; 12298 <__assert_fail@plt+0xd34>
   11598:	ldr	r0, [pc, #3324]	; 1229c <__assert_fail@plt+0xd38>
   1159c:	ldr	r4, [pc, #3324]	; 122a0 <__assert_fail@plt+0xd3c>
   115a0:	bl	11510 <bindtextdomain@plt>
   115a4:	ldr	r0, [pc, #3312]	; 1229c <__assert_fail@plt+0xd38>
   115a8:	bl	1130c <textdomain@plt>
   115ac:	ldr	r0, [pc, #3312]	; 122a4 <__assert_fail@plt+0xd40>
   115b0:	bl	2204c <__assert_fail@plt+0x10ae8>
   115b4:	ldr	r8, [pc, #3308]	; 122a8 <__assert_fail@plt+0xd44>
   115b8:	mov	r3, #0
   115bc:	ldr	r9, [pc, #3280]	; 12294 <__assert_fail@plt+0xd30>
   115c0:	str	r3, [r4, #20]
   115c4:	str	r3, [r4, #12]
   115c8:	strb	r3, [r4, #177]	; 0xb1
   115cc:	strb	r3, [r4, #216]	; 0xd8
   115d0:	mvn	r6, #-2147483648	; 0x80000000
   115d4:	ldr	r3, [pc, #3280]	; 122ac <__assert_fail@plt+0xd48>
   115d8:	mov	r7, #0
   115dc:	mov	r2, #1
   115e0:	strb	r2, [r4, #156]	; 0x9c
   115e4:	str	sl, [r4, #212]	; 0xd4
   115e8:	str	r3, [r4, #4]
   115ec:	mov	r5, #0
   115f0:	str	r5, [sp]
   115f4:	ldr	r3, [pc, #3252]	; 122b0 <__assert_fail@plt+0xd4c>
   115f8:	ldr	r2, [pc, #3252]	; 122b4 <__assert_fail@plt+0xd50>
   115fc:	mov	r1, sl
   11600:	ldr	r0, [sp, #24]
   11604:	bl	113d8 <getopt_long@plt>
   11608:	cmn	r0, #1
   1160c:	bne	11658 <__assert_fail@plt+0xf4>
   11610:	ldr	r6, [pc, #3232]	; 122b8 <__assert_fail@plt+0xd54>
   11614:	ldr	r2, [sp, #24]
   11618:	ldr	r3, [r6]
   1161c:	sub	r2, r2, r3
   11620:	cmp	r2, #1
   11624:	bgt	117b4 <__assert_fail@plt+0x250>
   11628:	ldr	r2, [sp, #24]
   1162c:	cmp	r2, r3
   11630:	mov	r2, #5
   11634:	bgt	1177c <__assert_fail@plt+0x218>
   11638:	ldr	r1, [pc, #3196]	; 122bc <__assert_fail@plt+0xd58>
   1163c:	mov	r0, r5
   11640:	bl	112d0 <dcgettext@plt>
   11644:	mov	r1, r5
   11648:	mov	r2, r0
   1164c:	mov	r0, r5
   11650:	bl	11384 <error@plt>
   11654:	b	11678 <__assert_fail@plt+0x114>
   11658:	cmp	r0, #107	; 0x6b
   1165c:	beq	116ec <__assert_fail@plt+0x188>
   11660:	bgt	1169c <__assert_fail@plt+0x138>
   11664:	cmn	r0, #2
   11668:	beq	1173c <__assert_fail@plt+0x1d8>
   1166c:	bgt	11680 <__assert_fail@plt+0x11c>
   11670:	cmn	r0, #3
   11674:	beq	11744 <__assert_fail@plt+0x1e0>
   11678:	mov	r0, #1
   1167c:	b	11740 <__assert_fail@plt+0x1dc>
   11680:	cmp	r0, #98	; 0x62
   11684:	beq	116e0 <__assert_fail@plt+0x17c>
   11688:	cmp	r0, #102	; 0x66
   1168c:	bne	11678 <__assert_fail@plt+0x114>
   11690:	ldr	r3, [r8]
   11694:	str	r3, [r4, #4]
   11698:	b	115ec <__assert_fail@plt+0x88>
   1169c:	cmp	r0, #115	; 0x73
   116a0:	beq	116b8 <__assert_fail@plt+0x154>
   116a4:	bgt	116c4 <__assert_fail@plt+0x160>
   116a8:	cmp	r0, #110	; 0x6e
   116ac:	beq	116f4 <__assert_fail@plt+0x190>
   116b0:	cmp	r0, #113	; 0x71
   116b4:	bne	11678 <__assert_fail@plt+0x114>
   116b8:	mov	r3, #1
   116bc:	strb	r3, [r4, #177]	; 0xb1
   116c0:	b	115ec <__assert_fail@plt+0x88>
   116c4:	cmp	r0, #122	; 0x7a
   116c8:	mov	r3, #1
   116cc:	beq	11734 <__assert_fail@plt+0x1d0>
   116d0:	cmp	r0, #256	; 0x100
   116d4:	bne	11678 <__assert_fail@plt+0x114>
   116d8:	strb	r3, [r4, #216]	; 0xd8
   116dc:	b	115ec <__assert_fail@plt+0x88>
   116e0:	ldr	r3, [r8]
   116e4:	str	r3, [r4, #8]
   116e8:	b	115ec <__assert_fail@plt+0x88>
   116ec:	strb	r5, [r4, #156]	; 0x9c
   116f0:	b	115ec <__assert_fail@plt+0x88>
   116f4:	mov	r2, #5
   116f8:	ldr	r1, [pc, #3008]	; 122c0 <__assert_fail@plt+0xd5c>
   116fc:	mov	r0, r5
   11700:	ldr	fp, [r8]
   11704:	bl	112d0 <dcgettext@plt>
   11708:	mov	r3, #0
   1170c:	str	r5, [sp, #16]
   11710:	str	r9, [sp, #8]
   11714:	strd	r6, [sp]
   11718:	mov	r2, #0
   1171c:	str	r0, [sp, #12]
   11720:	mov	r0, fp
   11724:	bl	20b64 <__assert_fail@plt+0xf600>
   11728:	ldr	r3, [pc, #2964]	; 122c4 <__assert_fail@plt+0xd60>
   1172c:	str	r0, [r3]
   11730:	b	115ec <__assert_fail@plt+0x88>
   11734:	strb	r3, [r4, #176]	; 0xb0
   11738:	b	115ec <__assert_fail@plt+0x88>
   1173c:	mov	r0, r5
   11740:	bl	13150 <__assert_fail@plt+0x1bec>
   11744:	ldr	r3, [pc, #2940]	; 122c8 <__assert_fail@plt+0xd64>
   11748:	ldr	r0, [pc, #2940]	; 122cc <__assert_fail@plt+0xd68>
   1174c:	str	r3, [sp, #4]
   11750:	ldr	r3, [pc, #2936]	; 122d0 <__assert_fail@plt+0xd6c>
   11754:	str	r5, [sp, #8]
   11758:	str	r3, [sp]
   1175c:	ldr	r3, [pc, #2928]	; 122d4 <__assert_fail@plt+0xd70>
   11760:	ldr	r2, [pc, #2928]	; 122d8 <__assert_fail@plt+0xd74>
   11764:	ldr	r1, [pc, #2928]	; 122dc <__assert_fail@plt+0xd78>
   11768:	ldr	r3, [r3]
   1176c:	ldr	r0, [r0]
   11770:	bl	204d0 <__assert_fail@plt+0xef6c>
   11774:	mov	r0, #0
   11778:	bl	113f0 <exit@plt>
   1177c:	ldr	r1, [pc, #2908]	; 122e0 <__assert_fail@plt+0xd7c>
   11780:	mov	r0, r5
   11784:	bl	112d0 <dcgettext@plt>
   11788:	ldr	r3, [sp, #24]
   1178c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11790:	mov	r4, r0
   11794:	ldr	r0, [sl, r3, lsl #2]
   11798:	bl	14ef4 <__assert_fail@plt+0x3990>
   1179c:	mov	r2, r4
   117a0:	mov	r1, r5
   117a4:	mov	r3, r0
   117a8:	mov	r0, r5
   117ac:	bl	11384 <error@plt>
   117b0:	b	11678 <__assert_fail@plt+0x114>
   117b4:	ldr	r0, [r4, #4]
   117b8:	bl	113fc <strlen@plt>
   117bc:	ldr	r3, [r4, #8]
   117c0:	cmp	r3, #0
   117c4:	mov	r7, r0
   117c8:	beq	119b8 <__assert_fail@plt+0x454>
   117cc:	ldr	ip, [r4, #8]
   117d0:	mov	r0, #1
   117d4:	mov	r2, ip
   117d8:	mov	lr, #2
   117dc:	mov	r9, #100	; 0x64
   117e0:	ldrb	r1, [r2]
   117e4:	cmp	r1, #0
   117e8:	bne	11824 <__assert_fail@plt+0x2c0>
   117ec:	cmp	r5, #0
   117f0:	moveq	r2, #5
   117f4:	ldreq	r1, [pc, #2792]	; 122e4 <__assert_fail@plt+0xd80>
   117f8:	beq	1184c <__assert_fail@plt+0x2e8>
   117fc:	mvn	r3, #-2147483648	; 0x80000000
   11800:	str	r3, [sp, #4]
   11804:	str	ip, [sp]
   11808:	mvn	r3, #0
   1180c:	mov	r2, #1
   11810:	mov	r0, r1
   11814:	bl	11558 <__snprintf_chk@plt>
   11818:	cmp	r0, #0
   1181c:	bge	11a7c <__assert_fail@plt+0x518>
   11820:	bl	12b30 <__assert_fail@plt+0x15cc>
   11824:	cmp	r1, #37	; 0x25
   11828:	bne	119a8 <__assert_fail@plt+0x444>
   1182c:	add	r3, r2, #1
   11830:	ldrb	r2, [r2, #1]
   11834:	cmp	r2, #37	; 0x25
   11838:	beq	119a4 <__assert_fail@plt+0x440>
   1183c:	cmp	r5, #0
   11840:	beq	11878 <__assert_fail@plt+0x314>
   11844:	ldr	r1, [pc, #2716]	; 122e8 <__assert_fail@plt+0xd84>
   11848:	mov	r2, #5
   1184c:	mov	r0, #0
   11850:	bl	112d0 <dcgettext@plt>
   11854:	mov	r1, #0
   11858:	mov	r2, r0
   1185c:	mov	r0, #1
   11860:	bl	11384 <error@plt>
   11864:	cmp	r2, #45	; 0x2d
   11868:	beq	11874 <__assert_fail@plt+0x310>
   1186c:	cmp	r2, #48	; 0x30
   11870:	bne	11894 <__assert_fail@plt+0x330>
   11874:	mov	r3, r1
   11878:	ldrb	r2, [r3]
   1187c:	add	r1, r3, #1
   11880:	cmp	r2, #39	; 0x27
   11884:	beq	11928 <__assert_fail@plt+0x3c4>
   11888:	bhi	11864 <__assert_fail@plt+0x300>
   1188c:	cmp	r2, #35	; 0x23
   11890:	beq	11930 <__assert_fail@plt+0x3cc>
   11894:	ldrb	r1, [r3]
   11898:	mov	r2, r3
   1189c:	add	r3, r3, #1
   118a0:	sub	r8, r1, #48	; 0x30
   118a4:	cmp	r8, #9
   118a8:	bls	11894 <__assert_fail@plt+0x330>
   118ac:	cmp	r1, #46	; 0x2e
   118b0:	bne	118c4 <__assert_fail@plt+0x360>
   118b4:	ldrb	r3, [r2, #1]!
   118b8:	sub	r3, r3, #48	; 0x30
   118bc:	cmp	r3, #9
   118c0:	bls	118b4 <__assert_fail@plt+0x350>
   118c4:	ldrb	r8, [r2]
   118c8:	cmp	r8, #105	; 0x69
   118cc:	beq	1195c <__assert_fail@plt+0x3f8>
   118d0:	bhi	11938 <__assert_fail@plt+0x3d4>
   118d4:	cmp	r8, #88	; 0x58
   118d8:	beq	11950 <__assert_fail@plt+0x3ec>
   118dc:	cmp	r8, #100	; 0x64
   118e0:	beq	1195c <__assert_fail@plt+0x3f8>
   118e4:	cmp	r8, #0
   118e8:	beq	11998 <__assert_fail@plt+0x434>
   118ec:	bl	113e4 <__ctype_b_loc@plt>
   118f0:	lsl	r3, r8, #1
   118f4:	ldr	r2, [r0]
   118f8:	mov	r0, #0
   118fc:	ldrh	r4, [r2, r3]
   11900:	mov	r2, #5
   11904:	ands	r4, r4, #16384	; 0x4000
   11908:	ldreq	r1, [pc, #2524]	; 122ec <__assert_fail@plt+0xd88>
   1190c:	ldrne	r1, [pc, #2524]	; 122f0 <__assert_fail@plt+0xd8c>
   11910:	bl	112d0 <dcgettext@plt>
   11914:	mov	r3, r8
   11918:	mov	r2, r0
   1191c:	mov	r1, #0
   11920:	mov	r0, #1
   11924:	bl	11384 <error@plt>
   11928:	orr	r5, r5, #1
   1192c:	b	11874 <__assert_fail@plt+0x310>
   11930:	orr	r5, r5, #2
   11934:	b	11874 <__assert_fail@plt+0x310>
   11938:	cmp	r8, #117	; 0x75
   1193c:	beq	11958 <__assert_fail@plt+0x3f4>
   11940:	cmp	r8, #120	; 0x78
   11944:	beq	11950 <__assert_fail@plt+0x3ec>
   11948:	cmp	r8, #111	; 0x6f
   1194c:	bne	118ec <__assert_fail@plt+0x388>
   11950:	mov	r3, lr
   11954:	b	11960 <__assert_fail@plt+0x3fc>
   11958:	strb	r9, [r2]
   1195c:	mov	r3, r0
   11960:	bics	r5, r5, r3
   11964:	beq	119b0 <__assert_fail@plt+0x44c>
   11968:	mov	r2, #5
   1196c:	ldr	r1, [pc, #2432]	; 122f4 <__assert_fail@plt+0xd90>
   11970:	mov	r0, #0
   11974:	bl	112d0 <dcgettext@plt>
   11978:	tst	r5, #2
   1197c:	moveq	r3, #39	; 0x27
   11980:	movne	r3, #35	; 0x23
   11984:	str	r8, [sp]
   11988:	mov	r2, r0
   1198c:	mov	r1, #0
   11990:	mov	r0, #1
   11994:	bl	11384 <error@plt>
   11998:	mov	r2, #5
   1199c:	ldr	r1, [pc, #2388]	; 122f8 <__assert_fail@plt+0xd94>
   119a0:	b	1184c <__assert_fail@plt+0x2e8>
   119a4:	mov	r2, r3
   119a8:	add	r2, r2, #1
   119ac:	b	117e0 <__assert_fail@plt+0x27c>
   119b0:	mov	r5, r0
   119b4:	b	119a8 <__assert_fail@plt+0x444>
   119b8:	ldr	r3, [pc, #2308]	; 122c4 <__assert_fail@plt+0xd60>
   119bc:	ldr	r2, [r3]
   119c0:	cmp	r2, #10
   119c4:	bls	11a78 <__assert_fail@plt+0x514>
   119c8:	ldr	r0, [r3]
   119cc:	cmn	r0, #1
   119d0:	bge	11a7c <__assert_fail@plt+0x518>
   119d4:	mvn	r3, #-2147483648	; 0x80000000
   119d8:	sub	r3, r3, r0
   119dc:	cmp	r7, r3
   119e0:	movge	r3, #0
   119e4:	movlt	r3, #1
   119e8:	cmp	r3, #0
   119ec:	bne	11820 <__assert_fail@plt+0x2bc>
   119f0:	add	r7, r7, #1
   119f4:	add	r0, r7, r0
   119f8:	bl	205ac <__assert_fail@plt+0xf048>
   119fc:	ldr	r3, [r6]
   11a00:	ldr	r1, [pc, #2292]	; 122fc <__assert_fail@plt+0xd98>
   11a04:	add	r2, r3, #1
   11a08:	ldr	r5, [sl, r3, lsl #2]
   11a0c:	str	r2, [r6]
   11a10:	str	r0, [r4]
   11a14:	mov	r0, r5
   11a18:	bl	111f8 <strcmp@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a9c <__assert_fail@plt+0x538>
   11a24:	mov	r3, #0
   11a28:	mov	r2, r3
   11a2c:	mov	r1, r5
   11a30:	mov	r0, r3
   11a34:	bl	135c8 <__assert_fail@plt+0x2064>
   11a38:	cmp	r0, #0
   11a3c:	bge	11a9c <__assert_fail@plt+0x538>
   11a40:	bl	11414 <__errno_location@plt>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #2224]	; 12300 <__assert_fail@plt+0xd9c>
   11a4c:	ldr	r4, [r0]
   11a50:	mov	r0, #0
   11a54:	bl	112d0 <dcgettext@plt>
   11a58:	mov	r1, r5
   11a5c:	mov	r6, r0
   11a60:	mov	r0, #4
   11a64:	bl	14d10 <__assert_fail@plt+0x37ac>
   11a68:	mov	r2, r6
   11a6c:	mov	r1, r4
   11a70:	mov	r3, r0
   11a74:	b	11920 <__assert_fail@plt+0x3bc>
   11a78:	mov	r0, #11
   11a7c:	cmp	r7, #0
   11a80:	blt	119f0 <__assert_fail@plt+0x48c>
   11a84:	mvn	r3, #-2147483647	; 0x80000001
   11a88:	sub	r3, r3, r0
   11a8c:	cmp	r7, r3
   11a90:	movle	r3, #0
   11a94:	movgt	r3, #1
   11a98:	b	119e8 <__assert_fail@plt+0x484>
   11a9c:	ldr	fp, [r6]
   11aa0:	ldr	r3, [sp, #24]
   11aa4:	cmp	r3, fp
   11aa8:	bgt	11ba4 <__assert_fail@plt+0x640>
   11aac:	ldr	r0, [pc, #2128]	; 12304 <__assert_fail@plt+0xda0>
   11ab0:	bl	114c8 <sigemptyset@plt>
   11ab4:	ldr	r6, [pc, #2124]	; 12308 <__assert_fail@plt+0xda4>
   11ab8:	mov	r5, #0
   11abc:	mov	r8, r6
   11ac0:	ldr	r7, [r6, r5, lsl #2]
   11ac4:	add	r2, sp, #64	; 0x40
   11ac8:	mov	r1, #0
   11acc:	mov	r0, r7
   11ad0:	bl	11330 <sigaction@plt>
   11ad4:	ldr	r3, [sp, #64]	; 0x40
   11ad8:	cmp	r3, #1
   11adc:	beq	11aec <__assert_fail@plt+0x588>
   11ae0:	mov	r1, r7
   11ae4:	ldr	r0, [pc, #2072]	; 12304 <__assert_fail@plt+0xda0>
   11ae8:	bl	113a8 <sigaddset@plt>
   11aec:	add	r5, r5, #1
   11af0:	cmp	r5, #11
   11af4:	bne	11ac0 <__assert_fail@plt+0x55c>
   11af8:	mov	r5, #0
   11afc:	ldr	r7, [pc, #2048]	; 12304 <__assert_fail@plt+0xda0>
   11b00:	ldr	r3, [pc, #2052]	; 1230c <__assert_fail@plt+0xda8>
   11b04:	mov	r9, r5
   11b08:	mov	r2, #128	; 0x80
   11b0c:	ldr	r1, [pc, #2032]	; 12304 <__assert_fail@plt+0xda0>
   11b10:	add	r0, sp, #68	; 0x44
   11b14:	str	r3, [sp, #64]	; 0x40
   11b18:	bl	11264 <memcpy@plt>
   11b1c:	str	r5, [sp, #196]	; 0xc4
   11b20:	ldr	r6, [r8, r5, lsl #2]
   11b24:	mov	r0, r7
   11b28:	mov	r1, r6
   11b2c:	bl	11300 <sigismember@plt>
   11b30:	cmp	r0, #0
   11b34:	beq	11b48 <__assert_fail@plt+0x5e4>
   11b38:	mov	r2, r9
   11b3c:	add	r1, sp, #64	; 0x40
   11b40:	mov	r0, r6
   11b44:	bl	11330 <sigaction@plt>
   11b48:	add	r5, r5, #1
   11b4c:	cmp	r5, #11
   11b50:	bne	11b20 <__assert_fail@plt+0x5bc>
   11b54:	mov	fp, #0
   11b58:	ldr	r3, [r4, #12]
   11b5c:	cmp	fp, r3
   11b60:	blt	11ee4 <__assert_fail@plt+0x980>
   11b64:	bl	1282c <__assert_fail@plt+0x12c8>
   11b68:	bl	13050 <__assert_fail@plt+0x1aec>
   11b6c:	bl	12694 <__assert_fail@plt+0x1130>
   11b70:	mov	r0, #0
   11b74:	bl	1154c <close@plt>
   11b78:	cmp	r0, #0
   11b7c:	beq	1228c <__assert_fail@plt+0xd28>
   11b80:	bl	11414 <__errno_location@plt>
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #1920]	; 12310 <__assert_fail@plt+0xdac>
   11b8c:	ldr	r4, [r0]
   11b90:	mov	r0, #0
   11b94:	bl	112d0 <dcgettext@plt>
   11b98:	mov	r1, r4
   11b9c:	mov	r2, r0
   11ba0:	b	1203c <__assert_fail@plt+0xad8>
   11ba4:	ldr	r6, [sl, fp, lsl #2]
   11ba8:	lsl	r3, fp, #2
   11bac:	str	r3, [sp, #32]
   11bb0:	ldrb	r5, [r6]
   11bb4:	add	r7, sl, r3
   11bb8:	sub	r8, r5, #37	; 0x25
   11bbc:	clz	r8, r8
   11bc0:	lsr	r8, r8, #5
   11bc4:	cmp	r5, #47	; 0x2f
   11bc8:	movne	r9, r8
   11bcc:	orreq	r9, r8, #1
   11bd0:	cmp	r9, #0
   11bd4:	beq	11cec <__assert_fail@plt+0x788>
   11bd8:	add	r3, r6, #1
   11bdc:	mov	r1, r5
   11be0:	mov	r0, r3
   11be4:	str	r3, [sp, #32]
   11be8:	bl	114e0 <strrchr@plt>
   11bec:	subs	r9, r0, #0
   11bf0:	bne	11c0c <__assert_fail@plt+0x6a8>
   11bf4:	mov	r2, #5
   11bf8:	ldr	r1, [pc, #1812]	; 12314 <__assert_fail@plt+0xdb0>
   11bfc:	bl	112d0 <dcgettext@plt>
   11c00:	str	r5, [sp]
   11c04:	mov	r3, r6
   11c08:	b	11988 <__assert_fail@plt+0x424>
   11c0c:	bl	124f8 <__assert_fail@plt+0xf94>
   11c10:	mov	r7, #0
   11c14:	mov	r3, #1
   11c18:	mov	r5, r0
   11c1c:	strb	r8, [r0, #29]
   11c20:	strb	r3, [r0, #30]
   11c24:	str	fp, [r0, #24]
   11c28:	str	r7, [r0, #32]
   11c2c:	str	r7, [r0, #36]	; 0x24
   11c30:	mov	r0, #256	; 0x100
   11c34:	bl	20598 <__assert_fail@plt+0xf034>
   11c38:	ldr	r2, [pc, #1752]	; 12318 <__assert_fail@plt+0xdb4>
   11c3c:	ldr	r3, [pc, #1752]	; 1231c <__assert_fail@plt+0xdb8>
   11c40:	sub	r1, r9, r6
   11c44:	str	r3, [r2]
   11c48:	str	r7, [r5, #52]	; 0x34
   11c4c:	add	r2, r5, #32
   11c50:	sub	r1, r1, #1
   11c54:	str	r0, [r5, #48]	; 0x30
   11c58:	add	r0, r6, #1
   11c5c:	bl	1f6f0 <__assert_fail@plt+0xe18c>
   11c60:	subs	r8, r0, #0
   11c64:	beq	11ca0 <__assert_fail@plt+0x73c>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #1708]	; 12320 <__assert_fail@plt+0xdbc>
   11c70:	mov	r0, r7
   11c74:	bl	112d0 <dcgettext@plt>
   11c78:	mov	r4, r0
   11c7c:	mov	r0, r6
   11c80:	bl	14ef4 <__assert_fail@plt+0x3990>
   11c84:	str	r8, [sp]
   11c88:	mov	r2, r4
   11c8c:	mov	r1, r7
   11c90:	mov	r3, r0
   11c94:	mov	r0, r7
   11c98:	bl	11384 <error@plt>
   11c9c:	bl	12644 <__assert_fail@plt+0x10e0>
   11ca0:	ldrb	r3, [r9, #1]
   11ca4:	cmp	r3, #0
   11ca8:	beq	11df8 <__assert_fail@plt+0x894>
   11cac:	ldr	r3, [pc, #1504]	; 12294 <__assert_fail@plt+0xd30>
   11cb0:	mov	r2, #10
   11cb4:	str	r3, [sp]
   11cb8:	mov	r1, r8
   11cbc:	mov	r3, r5
   11cc0:	add	r0, r9, #1
   11cc4:	bl	20ce0 <__assert_fail@plt+0xf77c>
   11cc8:	cmp	r0, #0
   11ccc:	beq	11df8 <__assert_fail@plt+0x894>
   11cd0:	ldr	r1, [pc, #1612]	; 12324 <__assert_fail@plt+0xdc0>
   11cd4:	mov	r2, #5
   11cd8:	mov	r0, #0
   11cdc:	bl	112d0 <dcgettext@plt>
   11ce0:	mov	r4, r0
   11ce4:	mov	r0, r6
   11ce8:	b	11d44 <__assert_fail@plt+0x7e0>
   11cec:	bl	124f8 <__assert_fail@plt+0xf94>
   11cf0:	ldr	r3, [pc, #1436]	; 12294 <__assert_fail@plt+0xd30>
   11cf4:	mov	r2, #10
   11cf8:	mov	r1, r9
   11cfc:	str	fp, [r0, #24]
   11d00:	str	r3, [sp]
   11d04:	mov	r5, r0
   11d08:	add	r3, sp, #56	; 0x38
   11d0c:	ldr	r0, [sl, fp, lsl #2]
   11d10:	bl	210a8 <__assert_fail@plt+0xfb44>
   11d14:	subs	r6, r0, #0
   11d18:	bne	11d2c <__assert_fail@plt+0x7c8>
   11d1c:	ldrd	r8, [sp, #56]	; 0x38
   11d20:	cmp	r8, #0
   11d24:	sbcs	r3, r9, #0
   11d28:	bge	11d54 <__assert_fail@plt+0x7f0>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #1520]	; 12328 <__assert_fail@plt+0xdc4>
   11d34:	mov	r0, #0
   11d38:	bl	112d0 <dcgettext@plt>
   11d3c:	mov	r4, r0
   11d40:	ldr	r0, [r7]
   11d44:	bl	14ef4 <__assert_fail@plt+0x3990>
   11d48:	mov	r2, r4
   11d4c:	mov	r3, r0
   11d50:	b	1191c <__assert_fail@plt+0x3b8>
   11d54:	orrs	r3, r8, r9
   11d58:	bne	11d70 <__assert_fail@plt+0x80c>
   11d5c:	mov	r2, #5
   11d60:	ldr	r1, [pc, #1476]	; 1232c <__assert_fail@plt+0xdc8>
   11d64:	bl	112d0 <dcgettext@plt>
   11d68:	ldr	r3, [r7]
   11d6c:	b	11918 <__assert_fail@plt+0x3b4>
   11d70:	ldrd	r2, [r4, #224]	; 0xe0
   11d74:	cmp	r9, r3
   11d78:	cmpeq	r8, r2
   11d7c:	bcs	11db8 <__assert_fail@plt+0x854>
   11d80:	mov	r2, #5
   11d84:	ldr	r1, [pc, #1444]	; 12330 <__assert_fail@plt+0xdcc>
   11d88:	bl	112d0 <dcgettext@plt>
   11d8c:	mov	r5, r0
   11d90:	ldr	r0, [r7]
   11d94:	bl	14ef4 <__assert_fail@plt+0x3990>
   11d98:	add	r2, sp, #64	; 0x40
   11d9c:	mov	r7, r0
   11da0:	ldrd	r0, [r4, #224]	; 0xe0
   11da4:	bl	137f4 <__assert_fail@plt+0x2290>
   11da8:	mov	r3, r7
   11dac:	mov	r2, r5
   11db0:	str	r0, [sp]
   11db4:	b	1198c <__assert_fail@plt+0x428>
   11db8:	bne	11dec <__assert_fail@plt+0x888>
   11dbc:	mov	r2, #5
   11dc0:	ldr	r1, [pc, #1388]	; 12334 <__assert_fail@plt+0xdd0>
   11dc4:	bl	112d0 <dcgettext@plt>
   11dc8:	lsl	r3, fp, #2
   11dcc:	mov	r7, r0
   11dd0:	ldr	r0, [sl, r3]
   11dd4:	bl	14ef4 <__assert_fail@plt+0x3990>
   11dd8:	mov	r2, r7
   11ddc:	mov	r1, r6
   11de0:	mov	r3, r0
   11de4:	mov	r0, r6
   11de8:	bl	11384 <error@plt>
   11dec:	ldrd	r2, [sp, #56]	; 0x38
   11df0:	strd	r2, [r4, #224]	; 0xe0
   11df4:	strd	r2, [r5, #8]
   11df8:	ldr	r3, [sp, #24]
   11dfc:	add	r7, fp, #1
   11e00:	cmp	r3, r7
   11e04:	ble	11edc <__assert_fail@plt+0x978>
   11e08:	lsl	r3, fp, #2
   11e0c:	add	r8, r3, #4
   11e10:	ldr	r6, [sl, r8]
   11e14:	ldrb	r3, [r6]
   11e18:	cmp	r3, #123	; 0x7b
   11e1c:	bne	11edc <__assert_fail@plt+0x978>
   11e20:	mov	r0, r6
   11e24:	bl	113fc <strlen@plt>
   11e28:	sub	r9, r0, #1
   11e2c:	add	r3, r6, r9
   11e30:	ldrb	r2, [r6, r9]
   11e34:	cmp	r2, #125	; 0x7d
   11e38:	movne	r2, #5
   11e3c:	ldrne	r1, [pc, #1268]	; 12338 <__assert_fail@plt+0xdd4>
   11e40:	bne	11cd8 <__assert_fail@plt+0x774>
   11e44:	add	r0, r6, #1
   11e48:	sub	r3, r3, #1
   11e4c:	mov	r2, #0
   11e50:	cmp	r0, r3
   11e54:	strb	r2, [r6, r9]
   11e58:	bne	11e70 <__assert_fail@plt+0x90c>
   11e5c:	ldrb	r3, [r6, #1]
   11e60:	cmp	r3, #42	; 0x2a
   11e64:	moveq	r3, #1
   11e68:	strbeq	r3, [r5, #28]
   11e6c:	beq	11ed0 <__assert_fail@plt+0x96c>
   11e70:	ldr	r3, [pc, #1052]	; 12294 <__assert_fail@plt+0xd30>
   11e74:	mov	r2, #10
   11e78:	str	r3, [sp]
   11e7c:	mov	r1, #0
   11e80:	add	r3, sp, #64	; 0x40
   11e84:	bl	210a8 <__assert_fail@plt+0xfb44>
   11e88:	cmp	r0, #0
   11e8c:	bne	11ea0 <__assert_fail@plt+0x93c>
   11e90:	ldrd	r2, [sp, #64]	; 0x40
   11e94:	cmp	r2, #0
   11e98:	sbcs	r1, r3, #0
   11e9c:	bge	11ecc <__assert_fail@plt+0x968>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #1168]	; 1233c <__assert_fail@plt+0xdd8>
   11ea8:	mov	r0, #0
   11eac:	bl	112d0 <dcgettext@plt>
   11eb0:	ldr	r3, [r4, #212]	; 0xd4
   11eb4:	mov	r5, r0
   11eb8:	ldr	r0, [r3, r8]
   11ebc:	bl	14ef4 <__assert_fail@plt+0x3990>
   11ec0:	mov	r2, r5
   11ec4:	mov	r3, r0
   11ec8:	b	1191c <__assert_fail@plt+0x3b8>
   11ecc:	strd	r2, [r5, #16]
   11ed0:	mov	fp, r7
   11ed4:	mov	r3, #125	; 0x7d
   11ed8:	strb	r3, [r6, r9]
   11edc:	add	fp, fp, #1
   11ee0:	b	11aa0 <__assert_fail@plt+0x53c>
   11ee4:	ldr	r3, [r4, #20]
   11ee8:	lsl	sl, fp, #6
   11eec:	add	r3, r3, sl
   11ef0:	ldrb	r3, [r3, #30]
   11ef4:	cmp	r3, #0
   11ef8:	moveq	r6, #0
   11efc:	moveq	r7, #0
   11f00:	movne	r2, #0
   11f04:	movne	r3, #0
   11f08:	bne	12198 <__assert_fail@plt+0xc34>
   11f0c:	ldr	r5, [r4, #20]
   11f10:	add	r5, r5, sl
   11f14:	ldrb	r3, [r5, #28]
   11f18:	cmp	r3, #0
   11f1c:	bne	11f30 <__assert_fail@plt+0x9cc>
   11f20:	ldrd	r2, [r5, #16]
   11f24:	cmp	r2, r6
   11f28:	sbcs	r3, r3, r7
   11f2c:	blt	121c4 <__assert_fail@plt+0xc60>
   11f30:	ldr	r2, [r5, #8]
   11f34:	adds	r8, r6, #1
   11f38:	ldr	r3, [r5, #12]
   11f3c:	umull	r0, r1, r2, r8
   11f40:	mul	r3, r8, r3
   11f44:	adc	r9, r7, #0
   11f48:	strd	r0, [sp, #24]
   11f4c:	mla	r3, r2, r9, r3
   11f50:	ldr	r2, [sp, #28]
   11f54:	add	r3, r3, r2
   11f58:	str	r3, [sp, #28]
   11f5c:	bl	1282c <__assert_fail@plt+0x12c8>
   11f60:	bl	12f0c <__assert_fail@plt+0x19a8>
   11f64:	cmp	r0, #0
   11f68:	beq	1220c <__assert_fail@plt+0xca8>
   11f6c:	ldrb	r3, [r4, #216]	; 0xd8
   11f70:	cmp	r3, #0
   11f74:	beq	1220c <__assert_fail@plt+0xca8>
   11f78:	mov	r2, r6
   11f7c:	mov	r3, r7
   11f80:	add	r0, r5, #8
   11f84:	bl	128f8 <__assert_fail@plt+0x1394>
   11f88:	ldrb	r5, [r6, #29]
   11f8c:	cmp	r5, #0
   11f90:	bne	11f98 <__assert_fail@plt+0xa34>
   11f94:	bl	1282c <__assert_fail@plt+0x12c8>
   11f98:	ldrd	r2, [r7, sl]
   11f9c:	cmp	r2, #0
   11fa0:	sbcs	r3, r3, #0
   11fa4:	add	r3, r6, #32
   11fa8:	mov	r8, r3
   11fac:	blt	120c4 <__assert_fail@plt+0xb60>
   11fb0:	ldrd	r0, [r4, #200]	; 0xc8
   11fb4:	adds	r2, r0, #1
   11fb8:	adc	r3, r1, #0
   11fbc:	mov	r0, r2
   11fc0:	mov	r1, r3
   11fc4:	strd	r2, [r4, #200]	; 0xc8
   11fc8:	bl	12e2c <__assert_fail@plt+0x18c8>
   11fcc:	cmp	r0, #0
   11fd0:	bne	11ff4 <__assert_fail@plt+0xa90>
   11fd4:	ldrb	r3, [r6, #28]
   11fd8:	cmp	r3, #0
   11fdc:	beq	12124 <__assert_fail@plt+0xbc0>
   11fe0:	cmp	r5, #0
   11fe4:	bne	11774 <__assert_fail@plt+0x210>
   11fe8:	bl	13050 <__assert_fail@plt+0x1aec>
   11fec:	bl	12694 <__assert_fail@plt+0x1130>
   11ff0:	b	11774 <__assert_fail@plt+0x210>
   11ff4:	ldr	r2, [r0]
   11ff8:	ldr	r1, [r0, #4]
   11ffc:	mov	r0, r8
   12000:	add	r3, r1, r2
   12004:	ldrb	r3, [r3, #-1]
   12008:	cmp	r3, #10
   1200c:	subeq	r2, r2, #1
   12010:	mov	r3, #0
   12014:	stm	sp, {r2, r3}
   12018:	bl	1ff34 <__assert_fail@plt+0xe9d0>
   1201c:	cmn	r0, #2
   12020:	bne	12048 <__assert_fail@plt+0xae4>
   12024:	mov	r2, #5
   12028:	ldr	r1, [pc, #784]	; 12340 <__assert_fail@plt+0xddc>
   1202c:	mov	r0, #0
   12030:	bl	112d0 <dcgettext@plt>
   12034:	mov	r1, #0
   12038:	mov	r2, r0
   1203c:	mov	r0, #0
   12040:	bl	11384 <error@plt>
   12044:	b	11c9c <__assert_fail@plt+0x738>
   12048:	cmn	r0, #1
   1204c:	beq	120b0 <__assert_fail@plt+0xb4c>
   12050:	ldrd	r2, [r4, #200]	; 0xc8
   12054:	ldrd	r0, [r7, sl]
   12058:	ldr	r6, [r6, #24]
   1205c:	adds	r8, r0, r2
   12060:	adc	r9, r1, r3
   12064:	bl	12f34 <__assert_fail@plt+0x19d0>
   12068:	mov	r3, r9
   1206c:	cmp	r8, r0
   12070:	sbcs	r3, r3, r1
   12074:	bge	12134 <__assert_fail@plt+0xbd0>
   12078:	ldr	r1, [pc, #708]	; 12344 <__assert_fail@plt+0xde0>
   1207c:	mov	r2, #5
   12080:	mov	r0, #0
   12084:	bl	112d0 <dcgettext@plt>
   12088:	ldr	r3, [r4, #212]	; 0xd4
   1208c:	mov	r5, r0
   12090:	ldr	r0, [r3, r6, lsl #2]
   12094:	bl	14ef4 <__assert_fail@plt+0x3990>
   12098:	mov	r1, #0
   1209c:	mov	r2, r5
   120a0:	mov	r3, r0
   120a4:	mov	r0, r1
   120a8:	bl	11384 <error@plt>
   120ac:	b	11c9c <__assert_fail@plt+0x738>
   120b0:	bl	12f94 <__assert_fail@plt+0x1a30>
   120b4:	cmp	r5, #0
   120b8:	bne	11fb0 <__assert_fail@plt+0xa4c>
   120bc:	bl	129c0 <__assert_fail@plt+0x145c>
   120c0:	b	11fb0 <__assert_fail@plt+0xa4c>
   120c4:	ldrd	r0, [r4, #200]	; 0xc8
   120c8:	adds	r2, r0, #1
   120cc:	adc	r3, r1, #0
   120d0:	mov	r0, r2
   120d4:	mov	r1, r3
   120d8:	strd	r2, [r4, #200]	; 0xc8
   120dc:	bl	12e2c <__assert_fail@plt+0x18c8>
   120e0:	cmp	r0, #0
   120e4:	beq	11fd4 <__assert_fail@plt+0xa70>
   120e8:	ldr	r2, [r0]
   120ec:	ldr	r1, [r0, #4]
   120f0:	mov	r0, r8
   120f4:	add	r3, r1, r2
   120f8:	ldrb	r3, [r3, #-1]
   120fc:	cmp	r3, #10
   12100:	subeq	r2, r2, #1
   12104:	mov	r3, #0
   12108:	stm	sp, {r2, r3}
   1210c:	bl	1ff34 <__assert_fail@plt+0xe9d0>
   12110:	cmn	r0, #2
   12114:	beq	12024 <__assert_fail@plt+0xac0>
   12118:	cmn	r0, #1
   1211c:	beq	120c4 <__assert_fail@plt+0xb60>
   12120:	b	12050 <__assert_fail@plt+0xaec>
   12124:	str	r5, [sp]
   12128:	ldrd	r2, [sp, #24]
   1212c:	add	r0, r6, #24
   12130:	bl	1306c <__assert_fail@plt+0x1b08>
   12134:	subs	r2, r8, r0
   12138:	sbc	r3, r9, r1
   1213c:	strd	r2, [sp, #32]
   12140:	mov	r2, #0
   12144:	mov	r3, #0
   12148:	ldrd	r0, [sp, #32]
   1214c:	cmp	r1, r3
   12150:	cmpeq	r0, r2
   12154:	bne	121cc <__assert_fail@plt+0xc68>
   12158:	cmp	r5, #0
   1215c:	bne	12164 <__assert_fail@plt+0xc00>
   12160:	bl	12694 <__assert_fail@plt+0x1130>
   12164:	ldrd	r2, [r7, sl]
   12168:	cmp	r2, #1
   1216c:	sbcs	r3, r3, #0
   12170:	movge	r2, r8
   12174:	movge	r3, r9
   12178:	strdge	r2, [r4, #200]	; 0xc8
   1217c:	ldrb	r3, [r4, #216]	; 0xd8
   12180:	cmp	r3, #0
   12184:	beq	1218c <__assert_fail@plt+0xc28>
   12188:	bl	12f94 <__assert_fail@plt+0x1a30>
   1218c:	ldrd	r2, [sp, #24]
   12190:	adds	r2, r2, #1
   12194:	adc	r3, r3, #0
   12198:	ldr	r7, [r4, #20]
   1219c:	strd	r2, [sp, #24]
   121a0:	add	r6, r7, sl
   121a4:	ldrb	r3, [r6, #28]
   121a8:	cmp	r3, #0
   121ac:	bne	11f88 <__assert_fail@plt+0xa24>
   121b0:	ldrd	r2, [r6, #16]
   121b4:	ldrd	r0, [sp, #24]
   121b8:	cmp	r2, r0
   121bc:	sbcs	r3, r3, r1
   121c0:	bge	11f88 <__assert_fail@plt+0xa24>
   121c4:	add	fp, fp, #1
   121c8:	b	11b58 <__assert_fail@plt+0x5f4>
   121cc:	strd	r2, [sp, #48]	; 0x30
   121d0:	bl	12f94 <__assert_fail@plt+0x1a30>
   121d4:	subs	r3, r0, #0
   121d8:	str	r3, [sp, #40]	; 0x28
   121dc:	ldrd	r2, [sp, #48]	; 0x30
   121e0:	moveq	r2, #5
   121e4:	ldreq	r1, [pc, #344]	; 12344 <__assert_fail@plt+0xde0>
   121e8:	beq	12084 <__assert_fail@plt+0xb20>
   121ec:	cmp	r5, #0
   121f0:	bne	12200 <__assert_fail@plt+0xc9c>
   121f4:	strd	r2, [sp, #40]	; 0x28
   121f8:	bl	129c0 <__assert_fail@plt+0x145c>
   121fc:	ldrd	r2, [sp, #40]	; 0x28
   12200:	adds	r2, r2, #1
   12204:	adc	r3, r3, #0
   12208:	b	12148 <__assert_fail@plt+0xbe4>
   1220c:	bl	12f34 <__assert_fail@plt+0x19d0>
   12210:	mov	r2, r0
   12214:	mov	r3, r1
   12218:	ldrd	r0, [sp, #24]
   1221c:	cmp	r2, r0
   12220:	sbcs	r1, r3, r1
   12224:	blt	12260 <__assert_fail@plt+0xcfc>
   12228:	bl	12694 <__assert_fail@plt+0x1130>
   1222c:	ldrb	r3, [r4, #216]	; 0xd8
   12230:	cmp	r3, #0
   12234:	beq	1223c <__assert_fail@plt+0xcd8>
   12238:	bl	12f94 <__assert_fail@plt+0x1a30>
   1223c:	bl	12f0c <__assert_fail@plt+0x19a8>
   12240:	cmp	r0, #0
   12244:	beq	12254 <__assert_fail@plt+0xcf0>
   12248:	ldrb	r3, [r4, #216]	; 0xd8
   1224c:	cmp	r3, #0
   12250:	beq	11f78 <__assert_fail@plt+0xa14>
   12254:	mov	r6, r8
   12258:	mov	r7, r9
   1225c:	b	11f0c <__assert_fail@plt+0x9a8>
   12260:	strd	r2, [sp, #32]
   12264:	bl	12f94 <__assert_fail@plt+0x1a30>
   12268:	ldrd	r2, [sp, #32]
   1226c:	adds	r2, r2, #1
   12270:	adc	r3, r3, #0
   12274:	cmp	r0, #0
   12278:	beq	11f78 <__assert_fail@plt+0xa14>
   1227c:	strd	r2, [sp, #32]
   12280:	bl	129c0 <__assert_fail@plt+0x145c>
   12284:	ldrd	r2, [sp, #32]
   12288:	b	12218 <__assert_fail@plt+0xcb4>
   1228c:	add	sp, sp, #212	; 0xd4
   12290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12294:	andeq	r2, r2, r9, asr r7
   12298:	andeq	r2, r2, r0, asr #16
   1229c:	muleq	r2, sp, r7
   122a0:	ldrdeq	r4, [r3], -r0
   122a4:	andeq	r3, r1, ip, lsr r4
   122a8:	andeq	r4, r3, r8, asr #3
   122ac:	andeq	r2, r2, r8, asr r8
   122b0:	strheq	r2, [r2], -r4
   122b4:	andeq	r2, r2, r6, lsl #17
   122b8:			; <UNDEFINED> instruction: 0x000341b8
   122bc:	muleq	r2, r1, r8
   122c0:	andeq	r2, r2, fp, asr r8
   122c4:	andeq	r4, r3, r0, ror #2
   122c8:	andeq	r2, r2, sl, ror #16
   122cc:	andeq	r4, r3, r4, asr #3
   122d0:	andeq	r2, r2, sl, ror r8
   122d4:	andeq	r4, r3, r4, ror #2
   122d8:	muleq	r2, r9, r7
   122dc:	andeq	r2, r2, r3, lsr r2
   122e0:	andeq	r2, r2, r1, lsr #17
   122e4:	muleq	r2, ip, r9
   122e8:			; <UNDEFINED> instruction: 0x000228ba
   122ec:	andeq	r2, r2, ip, lsr r9
   122f0:	andeq	r2, r2, r1, lsl r9
   122f4:	andeq	r2, r2, sl, ror #18
   122f8:	andeq	r2, r2, sl, ror #17
   122fc:	muleq	r2, ip, ip
   12300:	andeq	r2, r2, sl, asr #19
   12304:	andeq	r4, r3, ip, ror #3
   12308:	andeq	r2, r2, r4, ror #2
   1230c:	andeq	r2, r1, r0, asr sl
   12310:	andeq	r2, r2, pc, ror #3
   12314:	andeq	r2, r2, r5, ror #19
   12318:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1231c:	andeq	r0, r0, r6, asr #5
   12320:	andeq	r2, r2, r8, lsl #20
   12324:	andeq	r2, r2, fp, lsr #20
   12328:	andeq	r2, r2, r0, asr sl
   1232c:	andeq	r2, r2, r4, ror #20
   12330:	andeq	r2, r2, lr, lsl #21
   12334:	andeq	r2, r2, r7, asr #21
   12338:	andeq	r2, r2, r4, lsl #22
   1233c:	andeq	r2, r2, r8, lsr #22
   12340:	andeq	r2, r2, r2, asr fp
   12344:	andeq	r2, r2, lr, lsr #3
   12348:	mov	fp, #0
   1234c:	mov	lr, #0
   12350:	pop	{r1}		; (ldr r1, [sp], #4)
   12354:	mov	r2, sp
   12358:	push	{r2}		; (str r2, [sp, #-4]!)
   1235c:	push	{r0}		; (str r0, [sp, #-4]!)
   12360:	ldr	ip, [pc, #16]	; 12378 <__assert_fail@plt+0xe14>
   12364:	push	{ip}		; (str ip, [sp, #-4]!)
   12368:	ldr	r0, [pc, #12]	; 1237c <__assert_fail@plt+0xe18>
   1236c:	ldr	r3, [pc, #12]	; 12380 <__assert_fail@plt+0xe1c>
   12370:	bl	113b4 <__libc_start_main@plt>
   12374:	bl	11540 <abort@plt>
   12378:	andeq	r2, r2, r8, asr #32
   1237c:	andeq	r1, r1, r0, ror r5
   12380:	andeq	r1, r2, r8, ror #31
   12384:	ldr	r3, [pc, #20]	; 123a0 <__assert_fail@plt+0xe3c>
   12388:	ldr	r2, [pc, #20]	; 123a4 <__assert_fail@plt+0xe40>
   1238c:	add	r3, pc, r3
   12390:	ldr	r2, [r3, r2]
   12394:	cmp	r2, #0
   12398:	bxeq	lr
   1239c:	b	113cc <__gmon_start__@plt>
   123a0:	andeq	r1, r2, ip, ror #24
   123a4:	andeq	r0, r0, r4, asr r1
   123a8:	ldr	r3, [pc, #28]	; 123cc <__assert_fail@plt+0xe68>
   123ac:	ldr	r0, [pc, #28]	; 123d0 <__assert_fail@plt+0xe6c>
   123b0:	sub	r3, r3, r0
   123b4:	cmp	r3, #6
   123b8:	bxls	lr
   123bc:	ldr	r3, [pc, #16]	; 123d4 <__assert_fail@plt+0xe70>
   123c0:	cmp	r3, #0
   123c4:	bxeq	lr
   123c8:	bx	r3
   123cc:	andeq	r4, r3, pc, lsr #3
   123d0:	andeq	r4, r3, ip, lsr #3
   123d4:	andeq	r0, r0, r0
   123d8:	ldr	r1, [pc, #36]	; 12404 <__assert_fail@plt+0xea0>
   123dc:	ldr	r0, [pc, #36]	; 12408 <__assert_fail@plt+0xea4>
   123e0:	sub	r1, r1, r0
   123e4:	asr	r1, r1, #2
   123e8:	add	r1, r1, r1, lsr #31
   123ec:	asrs	r1, r1, #1
   123f0:	bxeq	lr
   123f4:	ldr	r3, [pc, #16]	; 1240c <__assert_fail@plt+0xea8>
   123f8:	cmp	r3, #0
   123fc:	bxeq	lr
   12400:	bx	r3
   12404:	andeq	r4, r3, ip, lsr #3
   12408:	andeq	r4, r3, ip, lsr #3
   1240c:	andeq	r0, r0, r0
   12410:	push	{r4, lr}
   12414:	ldr	r4, [pc, #24]	; 12434 <__assert_fail@plt+0xed0>
   12418:	ldrb	r3, [r4]
   1241c:	cmp	r3, #0
   12420:	popne	{r4, pc}
   12424:	bl	123a8 <__assert_fail@plt+0xe44>
   12428:	mov	r3, #1
   1242c:	strb	r3, [r4]
   12430:	pop	{r4, pc}
   12434:	andeq	r4, r3, ip, asr #3
   12438:	ldr	r0, [pc, #40]	; 12468 <__assert_fail@plt+0xf04>
   1243c:	ldr	r3, [r0]
   12440:	cmp	r3, #0
   12444:	bne	1244c <__assert_fail@plt+0xee8>
   12448:	b	123d8 <__assert_fail@plt+0xe74>
   1244c:	ldr	r3, [pc, #24]	; 1246c <__assert_fail@plt+0xf08>
   12450:	cmp	r3, #0
   12454:	beq	12448 <__assert_fail@plt+0xee4>
   12458:	push	{r4, lr}
   1245c:	blx	r3
   12460:	pop	{r4, lr}
   12464:	b	123d8 <__assert_fail@plt+0xe74>
   12468:	andeq	r3, r3, r4, lsl pc
   1246c:	andeq	r0, r0, r0
   12470:	push	{r0, r1, r4, r5, r6, lr}
   12474:	mov	r5, r0
   12478:	ldr	r4, [pc, #108]	; 124ec <__assert_fail@plt+0xf88>
   1247c:	ldr	r0, [r4]
   12480:	ldr	r1, [r4, #4]
   12484:	bl	11354 <strcpy@plt>
   12488:	ldr	r3, [r4, #8]
   1248c:	ldr	r6, [r4]
   12490:	cmp	r3, #0
   12494:	ldr	r0, [r4, #4]
   12498:	beq	124c4 <__assert_fail@plt+0xf60>
   1249c:	bl	113fc <strlen@plt>
   124a0:	ldr	r3, [r4, #8]
   124a4:	str	r5, [sp]
   124a8:	mvn	r2, #0
   124ac:	mov	r1, #1
   124b0:	add	r0, r6, r0
   124b4:	bl	1142c <__sprintf_chk@plt>
   124b8:	ldr	r0, [r4]
   124bc:	add	sp, sp, #8
   124c0:	pop	{r4, r5, r6, pc}
   124c4:	bl	113fc <strlen@plt>
   124c8:	ldr	r3, [pc, #32]	; 124f0 <__assert_fail@plt+0xf8c>
   124cc:	mvn	r2, #0
   124d0:	mov	r1, #1
   124d4:	ldr	r3, [r3]
   124d8:	stm	sp, {r3, r5}
   124dc:	ldr	r3, [pc, #16]	; 124f4 <__assert_fail@plt+0xf90>
   124e0:	add	r0, r6, r0
   124e4:	bl	1142c <__sprintf_chk@plt>
   124e8:	b	124b8 <__assert_fail@plt+0xf54>
   124ec:	ldrdeq	r4, [r3], -r0
   124f0:	andeq	r4, r3, r0, ror #2
   124f4:	muleq	r2, r0, r1
   124f8:	push	{r0, r1, r2, r4, r5, lr}
   124fc:	ldr	r4, [pc, #108]	; 12570 <__assert_fail@plt+0x100c>
   12500:	ldr	r2, [r4, #12]
   12504:	ldr	r3, [r4, #16]
   12508:	cmp	r2, r3
   1250c:	bne	12530 <__assert_fail@plt+0xfcc>
   12510:	mov	r3, #64	; 0x40
   12514:	str	r3, [sp]
   12518:	mov	r2, #1
   1251c:	mvn	r3, #0
   12520:	add	r1, r4, #16
   12524:	ldr	r0, [r4, #20]
   12528:	bl	20708 <__assert_fail@plt+0xf1a4>
   1252c:	str	r0, [r4, #20]
   12530:	ldr	r3, [r4, #12]
   12534:	ldr	r2, [r4, #20]
   12538:	add	r1, r3, #1
   1253c:	lsl	r3, r3, #6
   12540:	add	r0, r2, r3
   12544:	mov	r5, #0
   12548:	str	r1, [r4, #12]
   1254c:	mov	r4, #0
   12550:	mov	r1, #0
   12554:	strb	r1, [r0, #30]
   12558:	strd	r4, [r0, #16]
   1255c:	strb	r1, [r0, #28]
   12560:	strd	r4, [r0, #8]
   12564:	strd	r4, [r2, r3]
   12568:	add	sp, sp, #12
   1256c:	pop	{r4, r5, pc}
   12570:	ldrdeq	r4, [r3], -r0
   12574:	push	{r4, r5, r6, lr}
   12578:	mov	r4, r0
   1257c:	ldr	r0, [r0, #32]
   12580:	cmp	r0, #0
   12584:	bne	1259c <__assert_fail@plt+0x1038>
   12588:	ldr	r0, [r4, #28]
   1258c:	bl	1370c <__assert_fail@plt+0x21a8>
   12590:	mov	r0, r4
   12594:	pop	{r4, r5, r6, lr}
   12598:	b	1370c <__assert_fail@plt+0x21a8>
   1259c:	ldr	r5, [r0, #652]	; 0x28c
   125a0:	bl	1370c <__assert_fail@plt+0x21a8>
   125a4:	mov	r0, r5
   125a8:	b	12580 <__assert_fail@plt+0x101c>
   125ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b0:	mov	r8, r0
   125b4:	ldr	r3, [pc, #128]	; 1263c <__assert_fail@plt+0x10d8>
   125b8:	ldr	sl, [pc, #128]	; 12640 <__assert_fail@plt+0x10dc>
   125bc:	mov	r6, r3
   125c0:	ldr	r7, [r3, #24]
   125c4:	mov	r9, #3
   125c8:	mov	r4, #0
   125cc:	subs	r7, r7, #1
   125d0:	bpl	125e0 <__assert_fail@plt+0x107c>
   125d4:	mov	r3, #0
   125d8:	str	r3, [r6, #24]
   125dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e0:	mov	r0, r7
   125e4:	bl	12470 <__assert_fail@plt+0xf0c>
   125e8:	mov	fp, r0
   125ec:	bl	112dc <unlink@plt>
   125f0:	cmp	r0, #0
   125f4:	beq	125cc <__assert_fail@plt+0x1068>
   125f8:	bl	11414 <__errno_location@plt>
   125fc:	ldr	r5, [r0]
   12600:	cmp	r5, #2
   12604:	movne	r3, r8
   12608:	orreq	r3, r8, #1
   1260c:	cmp	r3, #0
   12610:	bne	125cc <__assert_fail@plt+0x1068>
   12614:	mov	r2, fp
   12618:	mov	r1, r9
   1261c:	mov	r0, r4
   12620:	bl	14db4 <__assert_fail@plt+0x3850>
   12624:	mov	r2, sl
   12628:	mov	r1, r5
   1262c:	mov	r3, r0
   12630:	mov	r0, r4
   12634:	bl	11384 <error@plt>
   12638:	b	125cc <__assert_fail@plt+0x1068>
   1263c:	ldrdeq	r4, [r3], -r0
   12640:	andeq	r2, r2, r4, asr #21
   12644:	ldr	r4, [pc, #68]	; 12690 <__assert_fail@plt+0x112c>
   12648:	push	{lr}		; (str lr, [sp, #-4]!)
   1264c:	sub	sp, sp, #132	; 0x84
   12650:	bl	12694 <__assert_fail@plt+0x1130>
   12654:	mov	r2, sp
   12658:	add	r1, r4, #28
   1265c:	mov	r0, #0
   12660:	bl	11228 <sigprocmask@plt>
   12664:	ldrb	r3, [r4, #156]	; 0x9c
   12668:	cmp	r3, #0
   1266c:	beq	12678 <__assert_fail@plt+0x1114>
   12670:	mov	r0, #0
   12674:	bl	125ac <__assert_fail@plt+0x1048>
   12678:	mov	r2, #0
   1267c:	mov	r1, sp
   12680:	mov	r0, #2
   12684:	bl	11228 <sigprocmask@plt>
   12688:	mov	r0, #1
   1268c:	bl	113f0 <exit@plt>
   12690:	ldrdeq	r4, [r3], -r0
   12694:	push	{r4, r5, r6, r7, r8, r9, lr}
   12698:	sub	sp, sp, #132	; 0x84
   1269c:	ldr	r5, [pc, #372]	; 12818 <__assert_fail@plt+0x12b4>
   126a0:	ldr	r6, [r5, #160]	; 0xa0
   126a4:	cmp	r6, #0
   126a8:	beq	127d4 <__assert_fail@plt+0x1270>
   126ac:	mov	r0, r6
   126b0:	bl	1136c <ferror_unlocked@plt>
   126b4:	subs	r7, r0, #0
   126b8:	beq	126fc <__assert_fail@plt+0x1198>
   126bc:	mov	r2, #5
   126c0:	ldr	r1, [pc, #340]	; 1281c <__assert_fail@plt+0x12b8>
   126c4:	mov	r0, #0
   126c8:	bl	112d0 <dcgettext@plt>
   126cc:	ldr	r1, [r5, #164]	; 0xa4
   126d0:	mov	r4, r0
   126d4:	mov	r0, #4
   126d8:	bl	14d10 <__assert_fail@plt+0x37ac>
   126dc:	mov	r1, #0
   126e0:	mov	r2, r4
   126e4:	mov	r3, r0
   126e8:	mov	r0, r1
   126ec:	bl	11384 <error@plt>
   126f0:	mov	r3, #0
   126f4:	str	r3, [r5, #160]	; 0xa0
   126f8:	bl	12644 <__assert_fail@plt+0x10e0>
   126fc:	mov	r0, r6
   12700:	bl	13520 <__assert_fail@plt+0x1fbc>
   12704:	subs	r6, r0, #0
   12708:	beq	12740 <__assert_fail@plt+0x11dc>
   1270c:	bl	11414 <__errno_location@plt>
   12710:	ldr	r2, [r5, #164]	; 0xa4
   12714:	mov	r1, #3
   12718:	ldr	r4, [r0]
   1271c:	mov	r0, r7
   12720:	bl	14db4 <__assert_fail@plt+0x3850>
   12724:	ldr	r2, [pc, #244]	; 12820 <__assert_fail@plt+0x12bc>
   12728:	mov	r1, r4
   1272c:	mov	r3, r0
   12730:	mov	r0, r7
   12734:	bl	11384 <error@plt>
   12738:	str	r7, [r5, #160]	; 0xa0
   1273c:	b	126f8 <__assert_fail@plt+0x1194>
   12740:	ldrd	r8, [r5, #168]	; 0xa8
   12744:	mov	r4, r5
   12748:	orrs	r3, r8, r9
   1274c:	bne	127dc <__assert_fail@plt+0x1278>
   12750:	ldrb	r3, [r5, #176]	; 0xb0
   12754:	cmp	r3, #0
   12758:	beq	127dc <__assert_fail@plt+0x1278>
   1275c:	add	r1, r5, #28
   12760:	mov	r2, sp
   12764:	bl	11228 <sigprocmask@plt>
   12768:	ldr	r7, [r5, #164]	; 0xa4
   1276c:	mov	r0, r7
   12770:	bl	112dc <unlink@plt>
   12774:	mov	r8, r0
   12778:	bl	11414 <__errno_location@plt>
   1277c:	ldr	r3, [r4, #24]
   12780:	mov	r2, r6
   12784:	sub	r3, r3, #1
   12788:	mov	r1, sp
   1278c:	str	r3, [r4, #24]
   12790:	ldr	r5, [r0]
   12794:	mov	r0, #2
   12798:	bl	11228 <sigprocmask@plt>
   1279c:	cmp	r8, #0
   127a0:	cmpne	r5, #2
   127a4:	beq	127cc <__assert_fail@plt+0x1268>
   127a8:	mov	r2, r7
   127ac:	mov	r1, #3
   127b0:	mov	r0, r6
   127b4:	bl	14db4 <__assert_fail@plt+0x3850>
   127b8:	ldr	r2, [pc, #96]	; 12820 <__assert_fail@plt+0x12bc>
   127bc:	mov	r1, r5
   127c0:	mov	r3, r0
   127c4:	mov	r0, r6
   127c8:	bl	11384 <error@plt>
   127cc:	mov	r3, #0
   127d0:	str	r3, [r4, #160]	; 0xa0
   127d4:	add	sp, sp, #132	; 0x84
   127d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   127dc:	ldrb	r3, [r4, #177]	; 0xb1
   127e0:	cmp	r3, #0
   127e4:	bne	127cc <__assert_fail@plt+0x1268>
   127e8:	ldr	r3, [pc, #52]	; 12824 <__assert_fail@plt+0x12c0>
   127ec:	mov	r2, sp
   127f0:	mov	r1, r9
   127f4:	mov	r0, r8
   127f8:	ldr	r5, [r3]
   127fc:	bl	137f4 <__assert_fail@plt+0x2290>
   12800:	ldr	r2, [pc, #32]	; 12828 <__assert_fail@plt+0x12c4>
   12804:	mov	r1, #1
   12808:	mov	r3, r0
   1280c:	mov	r0, r5
   12810:	bl	11480 <__fprintf_chk@plt>
   12814:	b	127cc <__assert_fail@plt+0x1268>
   12818:	ldrdeq	r4, [r3], -r0
   1281c:	muleq	r2, r5, r1
   12820:	andeq	r2, r2, r4, asr #21
   12824:	andeq	r4, r3, r4, asr #3
   12828:	andeq	r2, r2, r5, lsl #31
   1282c:	push	{r4, r5, r6, r7, r8, lr}
   12830:	sub	sp, sp, #128	; 0x80
   12834:	ldr	r4, [pc, #176]	; 128ec <__assert_fail@plt+0x1388>
   12838:	mov	r8, r4
   1283c:	ldr	r5, [r4, #24]
   12840:	mov	r0, r5
   12844:	bl	12470 <__assert_fail@plt+0xf0c>
   12848:	cmn	r5, #-2147483647	; 0x80000001
   1284c:	str	r0, [r4, #164]	; 0xa4
   12850:	beq	128d0 <__assert_fail@plt+0x136c>
   12854:	mov	r2, sp
   12858:	mov	r6, r0
   1285c:	add	r1, r4, #28
   12860:	mov	r0, #0
   12864:	bl	11228 <sigprocmask@plt>
   12868:	ldr	r1, [pc, #128]	; 128f0 <__assert_fail@plt+0x138c>
   1286c:	mov	r0, r6
   12870:	bl	13678 <__assert_fail@plt+0x2114>
   12874:	mov	r6, r0
   12878:	str	r0, [r4, #160]	; 0xa0
   1287c:	bl	11414 <__errno_location@plt>
   12880:	cmp	r6, #0
   12884:	addne	r5, r5, #1
   12888:	mov	r2, #0
   1288c:	mov	r1, sp
   12890:	str	r5, [r4, #24]
   12894:	ldr	r7, [r0]
   12898:	mov	r0, #2
   1289c:	bl	11228 <sigprocmask@plt>
   128a0:	cmp	r6, #0
   128a4:	bne	128d8 <__assert_fail@plt+0x1374>
   128a8:	ldr	r2, [r8, #164]	; 0xa4
   128ac:	mov	r1, #3
   128b0:	mov	r0, #0
   128b4:	bl	14db4 <__assert_fail@plt+0x3850>
   128b8:	ldr	r2, [pc, #52]	; 128f4 <__assert_fail@plt+0x1390>
   128bc:	mov	r1, r7
   128c0:	mov	r3, r0
   128c4:	mov	r0, #0
   128c8:	bl	11384 <error@plt>
   128cc:	bl	12644 <__assert_fail@plt+0x10e0>
   128d0:	mov	r7, #75	; 0x4b
   128d4:	b	128a8 <__assert_fail@plt+0x1344>
   128d8:	mov	r2, #0
   128dc:	mov	r3, #0
   128e0:	strd	r2, [r4, #168]	; 0xa8
   128e4:	add	sp, sp, #128	; 0x80
   128e8:	pop	{r4, r5, r6, r7, r8, pc}
   128ec:	ldrdeq	r4, [r3], -r0
   128f0:	andeq	r2, r2, r8, lsr #3
   128f4:	andeq	r2, r2, r4, asr #21
   128f8:	ldr	r4, [pc, #176]	; 129b0 <__assert_fail@plt+0x144c>
   128fc:	push	{r7, lr}
   12900:	mov	sl, r0
   12904:	sub	sp, sp, #32
   12908:	mov	r6, r2
   1290c:	ldr	r1, [pc, #160]	; 129b4 <__assert_fail@plt+0x1450>
   12910:	mov	r2, #5
   12914:	mov	r0, #0
   12918:	mov	r7, r3
   1291c:	ldr	r5, [r4]
   12920:	bl	112d0 <dcgettext@plt>
   12924:	ldr	r3, [pc, #140]	; 129b8 <__assert_fail@plt+0x1454>
   12928:	add	r2, sp, #8
   1292c:	ldr	r9, [r3]
   12930:	mov	r8, r0
   12934:	ldrd	r0, [sl]
   12938:	bl	137f4 <__assert_fail@plt+0x2290>
   1293c:	bl	14ef4 <__assert_fail@plt+0x3990>
   12940:	mov	r3, r9
   12944:	mov	r2, r8
   12948:	mov	r1, #1
   1294c:	str	r0, [sp]
   12950:	mov	r0, r5
   12954:	bl	11480 <__fprintf_chk@plt>
   12958:	orrs	r3, r6, r7
   1295c:	beq	129a0 <__assert_fail@plt+0x143c>
   12960:	mov	r2, #5
   12964:	ldr	r1, [pc, #80]	; 129bc <__assert_fail@plt+0x1458>
   12968:	mov	r0, #0
   1296c:	ldr	r4, [r4]
   12970:	bl	112d0 <dcgettext@plt>
   12974:	add	r2, sp, #8
   12978:	mov	r1, r7
   1297c:	mov	r5, r0
   12980:	mov	r0, r6
   12984:	bl	137f4 <__assert_fail@plt+0x2290>
   12988:	mov	r2, r5
   1298c:	mov	r1, #1
   12990:	mov	r3, r0
   12994:	mov	r0, r4
   12998:	bl	11480 <__fprintf_chk@plt>
   1299c:	bl	12644 <__assert_fail@plt+0x10e0>
   129a0:	ldr	r1, [r4]
   129a4:	mov	r0, #10
   129a8:	bl	114f8 <fputc@plt>
   129ac:	b	1299c <__assert_fail@plt+0x1438>
   129b0:	andeq	r4, r3, r0, asr #3
   129b4:	andeq	r2, r2, sl, lsr #3
   129b8:	andeq	r4, r3, r0, asr #5
   129bc:	andeq	r2, r2, fp, asr #3
   129c0:	push	{r4, r5, r6, lr}
   129c4:	mov	r1, #1
   129c8:	ldr	r4, [pc, #120]	; 12a48 <__assert_fail@plt+0x14e4>
   129cc:	mov	r5, r0
   129d0:	ldr	r2, [r0]
   129d4:	ldr	r3, [r4, #160]	; 0xa0
   129d8:	ldr	r0, [r0, #4]
   129dc:	bl	112ac <fwrite_unlocked@plt>
   129e0:	ldr	r3, [r5]
   129e4:	cmp	r0, r3
   129e8:	beq	12a34 <__assert_fail@plt+0x14d0>
   129ec:	bl	11414 <__errno_location@plt>
   129f0:	mov	r2, #5
   129f4:	ldr	r1, [pc, #80]	; 12a4c <__assert_fail@plt+0x14e8>
   129f8:	ldr	r5, [r0]
   129fc:	mov	r0, #0
   12a00:	bl	112d0 <dcgettext@plt>
   12a04:	ldr	r1, [r4, #164]	; 0xa4
   12a08:	mov	r6, r0
   12a0c:	mov	r0, #4
   12a10:	bl	14d10 <__assert_fail@plt+0x37ac>
   12a14:	mov	r2, r6
   12a18:	mov	r1, r5
   12a1c:	mov	r3, r0
   12a20:	mov	r0, #0
   12a24:	bl	11384 <error@plt>
   12a28:	mov	r3, #0
   12a2c:	str	r3, [r4, #160]	; 0xa0
   12a30:	bl	12644 <__assert_fail@plt+0x10e0>
   12a34:	ldrd	r2, [r4, #168]	; 0xa8
   12a38:	adds	r2, r2, r0
   12a3c:	adc	r3, r3, r0, asr #31
   12a40:	strd	r2, [r4, #168]	; 0xa8
   12a44:	pop	{r4, r5, r6, pc}
   12a48:	ldrdeq	r4, [r3], -r0
   12a4c:	muleq	r2, r5, r1
   12a50:	ldr	r3, [pc, #48]	; 12a88 <__assert_fail@plt+0x1524>
   12a54:	push	{r4, lr}
   12a58:	mov	r4, r0
   12a5c:	ldrb	r3, [r3, #156]	; 0x9c
   12a60:	cmp	r3, #0
   12a64:	beq	12a70 <__assert_fail@plt+0x150c>
   12a68:	mov	r0, #1
   12a6c:	bl	125ac <__assert_fail@plt+0x1048>
   12a70:	mov	r0, r4
   12a74:	mov	r1, #0
   12a78:	bl	112a0 <signal@plt>
   12a7c:	mov	r0, r4
   12a80:	pop	{r4, lr}
   12a84:	b	111d4 <raise@plt>
   12a88:	ldrdeq	r4, [r3], -r0
   12a8c:	push	{r4, r5, r6, r7, r8, lr}
   12a90:	mov	r4, r0
   12a94:	ldr	r5, [r0, #32]
   12a98:	mov	r7, r1
   12a9c:	cmp	r5, #0
   12aa0:	mov	r6, r2
   12aa4:	bne	12ac8 <__assert_fail@plt+0x1564>
   12aa8:	mov	r0, #656	; 0x290
   12aac:	bl	20598 <__assert_fail@plt+0xf034>
   12ab0:	str	r5, [r0, #652]	; 0x28c
   12ab4:	str	r5, [r0]
   12ab8:	str	r5, [r0, #4]
   12abc:	str	r5, [r0, #8]
   12ac0:	str	r0, [r4, #36]	; 0x24
   12ac4:	str	r0, [r4, #32]
   12ac8:	ldr	r5, [r4, #36]	; 0x24
   12acc:	ldr	r3, [r5]
   12ad0:	cmp	r3, #80	; 0x50
   12ad4:	bne	12b04 <__assert_fail@plt+0x15a0>
   12ad8:	mov	r0, #656	; 0x290
   12adc:	bl	20598 <__assert_fail@plt+0xf034>
   12ae0:	mov	r3, #0
   12ae4:	str	r3, [r0, #652]	; 0x28c
   12ae8:	str	r3, [r0]
   12aec:	str	r3, [r0, #4]
   12af0:	str	r3, [r0, #8]
   12af4:	ldr	r3, [r4, #36]	; 0x24
   12af8:	str	r0, [r5, #652]	; 0x28c
   12afc:	ldr	r3, [r3, #652]	; 0x28c
   12b00:	str	r3, [r4, #36]	; 0x24
   12b04:	ldr	r3, [r4, #36]	; 0x24
   12b08:	ldr	r2, [r3, #4]
   12b0c:	add	r1, r3, r2, lsl #3
   12b10:	add	r2, r2, #1
   12b14:	str	r7, [r1, #16]
   12b18:	str	r6, [r1, #12]
   12b1c:	ldr	r1, [r3]
   12b20:	str	r2, [r3, #4]
   12b24:	add	r1, r1, #1
   12b28:	str	r1, [r3]
   12b2c:	pop	{r4, r5, r6, r7, r8, pc}
   12b30:	push	{r4, lr}
   12b34:	mov	r2, #5
   12b38:	ldr	r1, [pc, #28]	; 12b5c <__assert_fail@plt+0x15f8>
   12b3c:	mov	r0, #0
   12b40:	bl	112d0 <dcgettext@plt>
   12b44:	mov	r1, #0
   12b48:	ldr	r2, [pc, #16]	; 12b60 <__assert_fail@plt+0x15fc>
   12b4c:	mov	r3, r0
   12b50:	mov	r0, r1
   12b54:	bl	11384 <error@plt>
   12b58:	bl	12644 <__assert_fail@plt+0x10e0>
   12b5c:	ldrdeq	r2, [r2], -lr
   12b60:	andeq	r2, r2, r4, asr #21
   12b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b68:	sub	sp, sp, #20
   12b6c:	ldr	r5, [pc, #680]	; 12e1c <__assert_fail@plt+0x18b8>
   12b70:	ldrb	r3, [r5, #178]	; 0xb2
   12b74:	cmp	r3, #0
   12b78:	bne	12e10 <__assert_fail@plt+0x18ac>
   12b7c:	ldr	r8, [r5, #180]	; 0xb4
   12b80:	ldr	r3, [pc, #664]	; 12e20 <__assert_fail@plt+0x18bc>
   12b84:	mov	r6, #0
   12b88:	cmp	r8, r3
   12b8c:	addgt	r8, r8, #1
   12b90:	ldrle	r8, [pc, #652]	; 12e24 <__assert_fail@plt+0x18c0>
   12b94:	mov	fp, #1
   12b98:	mov	r7, #10
   12b9c:	mov	r0, #48	; 0x30
   12ba0:	bl	20598 <__assert_fail@plt+0xf034>
   12ba4:	mov	r2, r8
   12ba8:	mvn	r3, #0
   12bac:	mov	r4, r0
   12bb0:	str	r6, [r0]
   12bb4:	mov	r1, r0
   12bb8:	str	fp, [sp]
   12bbc:	mov	r0, #0
   12bc0:	bl	20708 <__assert_fail@plt+0xf1a4>
   12bc4:	ldrd	r2, [r5, #184]	; 0xb8
   12bc8:	ldr	sl, [r5, #180]	; 0xb4
   12bcc:	str	r6, [r4, #4]
   12bd0:	adds	r2, r2, #1
   12bd4:	adc	r3, r3, #0
   12bd8:	cmp	sl, #0
   12bdc:	strd	r2, [r4, #16]
   12be0:	strd	r2, [r4, #8]
   12be4:	str	r6, [r4, #24]
   12be8:	str	r6, [r4, #36]	; 0x24
   12bec:	str	r6, [r4, #32]
   12bf0:	str	r6, [r4, #40]	; 0x28
   12bf4:	ldr	r8, [r4]
   12bf8:	mov	r9, r0
   12bfc:	str	r0, [r4, #28]
   12c00:	moveq	r1, r0
   12c04:	beq	12c2c <__assert_fail@plt+0x16c8>
   12c08:	ldr	r1, [r5, #192]	; 0xc0
   12c0c:	mov	r2, sl
   12c10:	bl	11264 <memcpy@plt>
   12c14:	ldr	r3, [r4, #4]
   12c18:	add	r1, r9, sl
   12c1c:	sub	r8, r8, sl
   12c20:	add	r3, r3, sl
   12c24:	str	r3, [r4, #4]
   12c28:	str	r6, [r5, #180]	; 0xb4
   12c2c:	subs	r2, r8, #1
   12c30:	beq	12c7c <__assert_fail@plt+0x1718>
   12c34:	mov	r0, r6
   12c38:	bl	20014 <__assert_fail@plt+0xeab0>
   12c3c:	subs	r2, r0, #0
   12c40:	strbeq	fp, [r5, #178]	; 0xb2
   12c44:	beq	12c7c <__assert_fail@plt+0x1718>
   12c48:	cmn	r2, #1
   12c4c:	bne	12c7c <__assert_fail@plt+0x1718>
   12c50:	bl	11414 <__errno_location@plt>
   12c54:	mov	r2, #5
   12c58:	ldr	r1, [pc, #456]	; 12e28 <__assert_fail@plt+0x18c4>
   12c5c:	ldr	r4, [r0]
   12c60:	mov	r0, #0
   12c64:	bl	112d0 <dcgettext@plt>
   12c68:	mov	r1, r4
   12c6c:	mov	r2, r0
   12c70:	mov	r0, #0
   12c74:	bl	11384 <error@plt>
   12c78:	bl	12644 <__assert_fail@plt+0x10e0>
   12c7c:	ldr	r0, [r4, #4]
   12c80:	add	r2, r2, r0
   12c84:	cmp	r2, #0
   12c88:	str	r2, [r4, #4]
   12c8c:	bne	12cac <__assert_fail@plt+0x1748>
   12c90:	ldrb	r0, [r5, #178]	; 0xb2
   12c94:	cmp	r0, #0
   12c98:	beq	12da0 <__assert_fail@plt+0x183c>
   12c9c:	mov	r0, r4
   12ca0:	bl	12574 <__assert_fail@plt+0x1010>
   12ca4:	mov	sl, #0
   12ca8:	b	12d6c <__assert_fail@plt+0x1808>
   12cac:	ldr	r9, [r4, #28]
   12cb0:	mov	sl, #0
   12cb4:	add	r8, r9, r2
   12cb8:	strb	r7, [r9, r2]
   12cbc:	mov	r1, r7
   12cc0:	mov	r0, r9
   12cc4:	bl	11318 <rawmemchr@plt>
   12cc8:	cmp	r8, r0
   12ccc:	beq	12cf8 <__assert_fail@plt+0x1794>
   12cd0:	sub	r2, r0, r9
   12cd4:	str	r0, [sp, #12]
   12cd8:	mov	r1, r9
   12cdc:	add	r2, r2, #1
   12ce0:	mov	r0, r4
   12ce4:	bl	12a8c <__assert_fail@plt+0x1528>
   12ce8:	ldr	r3, [sp, #12]
   12cec:	add	sl, sl, #1
   12cf0:	add	r9, r3, #1
   12cf4:	b	12cbc <__assert_fail@plt+0x1758>
   12cf8:	subs	r8, r8, r9
   12cfc:	beq	12d20 <__assert_fail@plt+0x17bc>
   12d00:	ldrb	r3, [r5, #178]	; 0xb2
   12d04:	cmp	r3, #0
   12d08:	beq	12d7c <__assert_fail@plt+0x1818>
   12d0c:	mov	r2, r8
   12d10:	mov	r1, r9
   12d14:	mov	r0, r4
   12d18:	bl	12a8c <__assert_fail@plt+0x1528>
   12d1c:	add	sl, sl, #1
   12d20:	ldrd	r2, [r5, #184]	; 0xb8
   12d24:	str	sl, [r4, #24]
   12d28:	adds	r8, r2, #1
   12d2c:	adc	r9, r3, #0
   12d30:	adds	r2, r2, sl
   12d34:	adc	r3, r3, sl, asr #31
   12d38:	cmp	sl, #0
   12d3c:	strd	r8, [r4, #8]
   12d40:	strd	r8, [r4, #16]
   12d44:	strd	r2, [r5, #184]	; 0xb8
   12d48:	beq	12c90 <__assert_fail@plt+0x172c>
   12d4c:	mov	r3, #0
   12d50:	str	r3, [r4, #40]	; 0x28
   12d54:	ldr	r3, [r4, #32]
   12d58:	str	r3, [r4, #36]	; 0x24
   12d5c:	ldr	r3, [r5, #196]	; 0xc4
   12d60:	cmp	r3, #0
   12d64:	bne	12dfc <__assert_fail@plt+0x1898>
   12d68:	str	r4, [r5, #196]	; 0xc4
   12d6c:	adds	r0, sl, #0
   12d70:	movne	r0, #1
   12d74:	add	sp, sp, #20
   12d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d7c:	mov	r1, r8
   12d80:	mov	r0, r9
   12d84:	bl	209c0 <__assert_fail@plt+0xf45c>
   12d88:	mov	r9, r0
   12d8c:	ldr	r0, [r5, #192]	; 0xc0
   12d90:	bl	1370c <__assert_fail@plt+0x21a8>
   12d94:	str	r9, [r5, #192]	; 0xc0
   12d98:	str	r8, [r5, #180]	; 0xb4
   12d9c:	b	12d20 <__assert_fail@plt+0x17bc>
   12da0:	ldr	r8, [r4]
   12da4:	cmp	r8, #0
   12da8:	bge	12de8 <__assert_fail@plt+0x1884>
   12dac:	cmn	r8, #1
   12db0:	beq	12dcc <__assert_fail@plt+0x1868>
   12db4:	mov	r1, r8
   12db8:	mov	r0, #-2147483648	; 0x80000000
   12dbc:	bl	21b60 <__assert_fail@plt+0x105fc>
   12dc0:	sub	r0, r0, #1
   12dc4:	clz	r0, r0
   12dc8:	lsr	r0, r0, #5
   12dcc:	and	r0, r0, #1
   12dd0:	cmp	r0, #0
   12dd4:	bne	12e18 <__assert_fail@plt+0x18b4>
   12dd8:	mov	r0, r4
   12ddc:	bl	12574 <__assert_fail@plt+0x1010>
   12de0:	lsl	r8, r8, #1
   12de4:	b	12b9c <__assert_fail@plt+0x1638>
   12de8:	cmn	r8, #-1073741823	; 0xc0000001
   12dec:	movle	r0, #0
   12df0:	movgt	r0, #1
   12df4:	b	12dd0 <__assert_fail@plt+0x186c>
   12df8:	mov	r3, r2
   12dfc:	ldr	r2, [r3, #40]	; 0x28
   12e00:	cmp	r2, #0
   12e04:	bne	12df8 <__assert_fail@plt+0x1894>
   12e08:	str	r4, [r3, #40]	; 0x28
   12e0c:	b	12d6c <__assert_fail@plt+0x1808>
   12e10:	mov	r0, #0
   12e14:	b	12d74 <__assert_fail@plt+0x1810>
   12e18:	bl	12b30 <__assert_fail@plt+0x15cc>
   12e1c:	ldrdeq	r4, [r3], -r0
   12e20:	strdeq	r1, [r0], -lr
   12e24:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12e28:	andeq	r2, r2, pc, ror #3
   12e2c:	ldr	r3, [pc, #196]	; 12ef8 <__assert_fail@plt+0x1994>
   12e30:	push	{r4, r6, r7, lr}
   12e34:	mov	r6, r0
   12e38:	ldr	r2, [r3, #196]	; 0xc4
   12e3c:	mov	r7, r1
   12e40:	cmp	r2, #0
   12e44:	mov	r4, r3
   12e48:	beq	12e68 <__assert_fail@plt+0x1904>
   12e4c:	ldr	r4, [r4, #196]	; 0xc4
   12e50:	ldrd	r2, [r4, #8]
   12e54:	cmp	r6, r2
   12e58:	sbcs	r3, r7, r3
   12e5c:	bge	12e78 <__assert_fail@plt+0x1914>
   12e60:	mov	r0, #0
   12e64:	pop	{r4, r6, r7, pc}
   12e68:	bl	12b64 <__assert_fail@plt+0x1600>
   12e6c:	cmp	r0, #0
   12e70:	bne	12e4c <__assert_fail@plt+0x18e8>
   12e74:	b	12e60 <__assert_fail@plt+0x18fc>
   12e78:	ldrd	r0, [r4, #8]
   12e7c:	ldr	ip, [r4, #24]
   12e80:	adds	r2, r0, ip
   12e84:	adc	r3, r1, ip, asr #31
   12e88:	cmp	r6, r2
   12e8c:	sbcs	r3, r7, r3
   12e90:	bge	12ebc <__assert_fail@plt+0x1958>
   12e94:	ldr	r3, [r4, #32]
   12e98:	sub	r0, r6, r0
   12e9c:	cmp	r0, #79	; 0x4f
   12ea0:	bgt	12eb0 <__assert_fail@plt+0x194c>
   12ea4:	add	r0, r3, r0, lsl #3
   12ea8:	add	r0, r0, #12
   12eac:	pop	{r4, r6, r7, pc}
   12eb0:	ldr	r3, [r3, #652]	; 0x28c
   12eb4:	sub	r0, r0, #80	; 0x50
   12eb8:	b	12e9c <__assert_fail@plt+0x1938>
   12ebc:	ldr	r3, [r4, #40]	; 0x28
   12ec0:	cmp	r3, #0
   12ec4:	beq	12ee8 <__assert_fail@plt+0x1984>
   12ec8:	ldr	r4, [r4, #40]	; 0x28
   12ecc:	cmp	r4, #0
   12ed0:	bne	12e78 <__assert_fail@plt+0x1914>
   12ed4:	ldr	r3, [pc, #32]	; 12efc <__assert_fail@plt+0x1998>
   12ed8:	ldr	r2, [pc, #32]	; 12f00 <__assert_fail@plt+0x199c>
   12edc:	ldr	r1, [pc, #32]	; 12f04 <__assert_fail@plt+0x19a0>
   12ee0:	ldr	r0, [pc, #32]	; 12f08 <__assert_fail@plt+0x19a4>
   12ee4:	bl	11564 <__assert_fail@plt>
   12ee8:	bl	12b64 <__assert_fail@plt+0x1600>
   12eec:	cmp	r0, #0
   12ef0:	bne	12ec8 <__assert_fail@plt+0x1964>
   12ef4:	b	12e60 <__assert_fail@plt+0x18fc>
   12ef8:	ldrdeq	r4, [r3], -r0
   12efc:	andeq	r2, r2, r0, ror r0
   12f00:	andeq	r0, r0, r7, asr #4
   12f04:	strdeq	r2, [r2], -sl
   12f08:	andeq	r2, r2, r7, lsl #4
   12f0c:	ldr	r3, [pc, #28]	; 12f30 <__assert_fail@plt+0x19cc>
   12f10:	push	{r4, lr}
   12f14:	ldrd	r0, [r3, #200]	; 0xc8
   12f18:	adds	r0, r0, #1
   12f1c:	adc	r1, r1, #0
   12f20:	bl	12e2c <__assert_fail@plt+0x18c8>
   12f24:	clz	r0, r0
   12f28:	lsr	r0, r0, #5
   12f2c:	pop	{r4, pc}
   12f30:	ldrdeq	r4, [r3], -r0
   12f34:	ldr	r3, [pc, #80]	; 12f8c <__assert_fail@plt+0x1a28>
   12f38:	push	{r4, r5, r6, lr}
   12f3c:	mov	r4, r3
   12f40:	ldr	r2, [r3, #196]	; 0xc4
   12f44:	cmp	r2, #0
   12f48:	bne	12f80 <__assert_fail@plt+0x1a1c>
   12f4c:	bl	12b64 <__assert_fail@plt+0x1600>
   12f50:	subs	r5, r0, #0
   12f54:	bne	12f80 <__assert_fail@plt+0x1a1c>
   12f58:	bl	11414 <__errno_location@plt>
   12f5c:	mov	r2, #5
   12f60:	ldr	r1, [pc, #40]	; 12f90 <__assert_fail@plt+0x1a2c>
   12f64:	ldr	r4, [r0]
   12f68:	mov	r0, r5
   12f6c:	bl	112d0 <dcgettext@plt>
   12f70:	mov	r1, r4
   12f74:	mov	r2, r0
   12f78:	mov	r0, #1
   12f7c:	bl	11384 <error@plt>
   12f80:	ldr	r3, [r4, #196]	; 0xc4
   12f84:	ldrd	r0, [r3, #16]
   12f88:	pop	{r4, r5, r6, pc}
   12f8c:	ldrdeq	r4, [r3], -r0
   12f90:	andeq	r2, r2, r9, lsl #4
   12f94:	push	{r4, r6, r7, lr}
   12f98:	ldr	r4, [pc, #172]	; 1304c <__assert_fail@plt+0x1ae8>
   12f9c:	ldr	r0, [r4, #208]	; 0xd0
   12fa0:	cmp	r0, #0
   12fa4:	beq	12fb4 <__assert_fail@plt+0x1a50>
   12fa8:	bl	12574 <__assert_fail@plt+0x1010>
   12fac:	mov	r3, #0
   12fb0:	str	r3, [r4, #208]	; 0xd0
   12fb4:	ldr	r3, [r4, #196]	; 0xc4
   12fb8:	cmp	r3, #0
   12fbc:	beq	13034 <__assert_fail@plt+0x1ad0>
   12fc0:	ldr	r3, [r4, #196]	; 0xc4
   12fc4:	ldrd	r0, [r4, #200]	; 0xc8
   12fc8:	ldrd	r6, [r3, #16]
   12fcc:	cmp	r0, r6
   12fd0:	sbcs	r2, r1, r7
   12fd4:	blt	13044 <__assert_fail@plt+0x1ae0>
   12fd8:	ldr	r2, [r3, #36]	; 0x24
   12fdc:	adds	r6, r6, #1
   12fe0:	adc	r7, r7, #0
   12fe4:	ldr	r1, [r2, #8]
   12fe8:	ldr	ip, [r2]
   12fec:	add	r1, r1, #1
   12ff0:	cmp	r1, ip
   12ff4:	add	r0, r2, r1, lsl #3
   12ff8:	strd	r6, [r3, #16]
   12ffc:	add	r0, r0, #4
   13000:	str	r1, [r2, #8]
   13004:	popne	{r4, r6, r7, pc}
   13008:	ldr	r2, [r2, #652]	; 0x28c
   1300c:	cmp	r2, #0
   13010:	str	r2, [r3, #36]	; 0x24
   13014:	beq	13024 <__assert_fail@plt+0x1ac0>
   13018:	ldr	r2, [r2]
   1301c:	cmp	r2, #0
   13020:	popne	{r4, r6, r7, pc}
   13024:	str	r3, [r4, #208]	; 0xd0
   13028:	ldr	r3, [r3, #40]	; 0x28
   1302c:	str	r3, [r4, #196]	; 0xc4
   13030:	pop	{r4, r6, r7, pc}
   13034:	bl	12b64 <__assert_fail@plt+0x1600>
   13038:	cmp	r0, #0
   1303c:	bne	12fc0 <__assert_fail@plt+0x1a5c>
   13040:	pop	{r4, r6, r7, pc}
   13044:	strd	r6, [r4, #200]	; 0xc8
   13048:	b	12fd8 <__assert_fail@plt+0x1a74>
   1304c:	ldrdeq	r4, [r3], -r0
   13050:	push	{r4, lr}
   13054:	bl	12f94 <__assert_fail@plt+0x1a30>
   13058:	cmp	r0, #0
   1305c:	bne	13064 <__assert_fail@plt+0x1b00>
   13060:	pop	{r4, pc}
   13064:	bl	129c0 <__assert_fail@plt+0x145c>
   13068:	b	13054 <__assert_fail@plt+0x1af0>
   1306c:	ldr	r4, [pc, #200]	; 1313c <__assert_fail@plt+0x1bd8>
   13070:	push	{r7, lr}
   13074:	mov	sl, r0
   13078:	sub	sp, sp, #32
   1307c:	ldr	r1, [pc, #188]	; 13140 <__assert_fail@plt+0x1bdc>
   13080:	mov	r6, r2
   13084:	mov	r0, #0
   13088:	mov	r2, #5
   1308c:	mov	r7, r3
   13090:	ldr	r5, [r4]
   13094:	bl	112d0 <dcgettext@plt>
   13098:	ldr	r3, [pc, #164]	; 13144 <__assert_fail@plt+0x1be0>
   1309c:	ldr	r2, [sl]
   130a0:	ldr	r9, [r3]
   130a4:	ldr	r3, [pc, #156]	; 13148 <__assert_fail@plt+0x1be4>
   130a8:	ldr	r3, [r3, #212]	; 0xd4
   130ac:	mov	r8, r0
   130b0:	ldr	r0, [r3, r2, lsl #2]
   130b4:	bl	14ef4 <__assert_fail@plt+0x3990>
   130b8:	mov	r3, r9
   130bc:	mov	r2, r8
   130c0:	mov	r1, #1
   130c4:	str	r0, [sp]
   130c8:	mov	r0, r5
   130cc:	bl	11480 <__fprintf_chk@plt>
   130d0:	orrs	r3, r6, r7
   130d4:	beq	1312c <__assert_fail@plt+0x1bc8>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #104]	; 1314c <__assert_fail@plt+0x1be8>
   130e0:	mov	r0, #0
   130e4:	ldr	r4, [r4]
   130e8:	bl	112d0 <dcgettext@plt>
   130ec:	add	r2, sp, #8
   130f0:	mov	r1, r7
   130f4:	mov	r5, r0
   130f8:	mov	r0, r6
   130fc:	bl	137f4 <__assert_fail@plt+0x2290>
   13100:	mov	r2, r5
   13104:	mov	r1, #1
   13108:	mov	r3, r0
   1310c:	mov	r0, r4
   13110:	bl	11480 <__fprintf_chk@plt>
   13114:	ldrb	r3, [sp, #40]	; 0x28
   13118:	cmp	r3, #0
   1311c:	bne	13128 <__assert_fail@plt+0x1bc4>
   13120:	bl	13050 <__assert_fail@plt+0x1aec>
   13124:	bl	12694 <__assert_fail@plt+0x1130>
   13128:	bl	12644 <__assert_fail@plt+0x10e0>
   1312c:	ldr	r1, [r4]
   13130:	mov	r0, #10
   13134:	bl	114f8 <fputc@plt>
   13138:	b	13114 <__assert_fail@plt+0x1bb0>
   1313c:	andeq	r4, r3, r0, asr #3
   13140:	andeq	r2, r2, fp, lsl r2
   13144:	andeq	r4, r3, r0, asr #5
   13148:	ldrdeq	r4, [r3], -r0
   1314c:	andeq	r2, r2, fp, asr #3
   13150:	subs	r5, r0, #0
   13154:	push	{r7, lr}
   13158:	sub	sp, sp, #56	; 0x38
   1315c:	ldr	r4, [pc, #596]	; 133b8 <__assert_fail@plt+0x1e54>
   13160:	beq	13198 <__assert_fail@plt+0x1c34>
   13164:	ldr	r3, [pc, #592]	; 133bc <__assert_fail@plt+0x1e58>
   13168:	mov	r2, #5
   1316c:	ldr	r1, [pc, #588]	; 133c0 <__assert_fail@plt+0x1e5c>
   13170:	mov	r0, #0
   13174:	ldr	r6, [r3]
   13178:	bl	112d0 <dcgettext@plt>
   1317c:	ldr	r3, [r4]
   13180:	mov	r1, #1
   13184:	mov	r2, r0
   13188:	mov	r0, r6
   1318c:	bl	11480 <__fprintf_chk@plt>
   13190:	mov	r0, r5
   13194:	bl	113f0 <exit@plt>
   13198:	mov	r2, #5
   1319c:	ldr	r1, [pc, #544]	; 133c4 <__assert_fail@plt+0x1e60>
   131a0:	bl	112d0 <dcgettext@plt>
   131a4:	ldr	r2, [r4]
   131a8:	ldr	r4, [pc, #536]	; 133c8 <__assert_fail@plt+0x1e64>
   131ac:	ldr	r8, [pc, #536]	; 133cc <__assert_fail@plt+0x1e68>
   131b0:	mov	r6, r5
   131b4:	mov	r1, r0
   131b8:	mov	r0, #1
   131bc:	bl	1145c <__printf_chk@plt>
   131c0:	mov	r2, #5
   131c4:	ldr	r1, [pc, #516]	; 133d0 <__assert_fail@plt+0x1e6c>
   131c8:	mov	r0, r5
   131cc:	bl	112d0 <dcgettext@plt>
   131d0:	ldr	r1, [r4]
   131d4:	bl	111bc <fputs_unlocked@plt>
   131d8:	mov	r2, #5
   131dc:	ldr	r1, [pc, #496]	; 133d4 <__assert_fail@plt+0x1e70>
   131e0:	mov	r0, r5
   131e4:	bl	112d0 <dcgettext@plt>
   131e8:	ldr	r1, [r4]
   131ec:	bl	111bc <fputs_unlocked@plt>
   131f0:	mov	r2, #5
   131f4:	ldr	r1, [pc, #476]	; 133d8 <__assert_fail@plt+0x1e74>
   131f8:	mov	r0, r5
   131fc:	bl	112d0 <dcgettext@plt>
   13200:	ldr	r1, [r4]
   13204:	bl	111bc <fputs_unlocked@plt>
   13208:	mov	r2, #5
   1320c:	ldr	r1, [pc, #456]	; 133dc <__assert_fail@plt+0x1e78>
   13210:	mov	r0, r5
   13214:	bl	112d0 <dcgettext@plt>
   13218:	ldr	r1, [r4]
   1321c:	bl	111bc <fputs_unlocked@plt>
   13220:	mov	r2, #5
   13224:	ldr	r1, [pc, #436]	; 133e0 <__assert_fail@plt+0x1e7c>
   13228:	mov	r0, r5
   1322c:	bl	112d0 <dcgettext@plt>
   13230:	ldr	r1, [r4]
   13234:	bl	111bc <fputs_unlocked@plt>
   13238:	mov	r2, #5
   1323c:	ldr	r1, [pc, #416]	; 133e4 <__assert_fail@plt+0x1e80>
   13240:	mov	r0, r5
   13244:	bl	112d0 <dcgettext@plt>
   13248:	ldr	r1, [r4]
   1324c:	bl	111bc <fputs_unlocked@plt>
   13250:	mov	r2, #5
   13254:	ldr	r1, [pc, #396]	; 133e8 <__assert_fail@plt+0x1e84>
   13258:	mov	r0, r5
   1325c:	bl	112d0 <dcgettext@plt>
   13260:	ldr	r1, [r4]
   13264:	bl	111bc <fputs_unlocked@plt>
   13268:	mov	r2, #5
   1326c:	ldr	r1, [pc, #376]	; 133ec <__assert_fail@plt+0x1e88>
   13270:	mov	r0, r5
   13274:	bl	112d0 <dcgettext@plt>
   13278:	ldr	r1, [r4]
   1327c:	bl	111bc <fputs_unlocked@plt>
   13280:	mov	r2, #5
   13284:	ldr	r1, [pc, #356]	; 133f0 <__assert_fail@plt+0x1e8c>
   13288:	mov	r0, r5
   1328c:	bl	112d0 <dcgettext@plt>
   13290:	ldr	r1, [r4]
   13294:	bl	111bc <fputs_unlocked@plt>
   13298:	ldr	lr, [pc, #340]	; 133f4 <__assert_fail@plt+0x1e90>
   1329c:	mov	ip, sp
   132a0:	ldm	lr!, {r0, r1, r2, r3}
   132a4:	stmia	ip!, {r0, r1, r2, r3}
   132a8:	ldm	lr!, {r0, r1, r2, r3}
   132ac:	stmia	ip!, {r0, r1, r2, r3}
   132b0:	ldm	lr!, {r0, r1, r2, r3}
   132b4:	stmia	ip!, {r0, r1, r2, r3}
   132b8:	ldm	lr, {r0, r1}
   132bc:	stm	ip, {r0, r1}
   132c0:	ldr	r1, [sp, r6]
   132c4:	add	r7, sp, r6
   132c8:	cmp	r1, #0
   132cc:	bne	13370 <__assert_fail@plt+0x1e0c>
   132d0:	ldr	r6, [r7, #4]
   132d4:	ldr	r7, [pc, #240]	; 133cc <__assert_fail@plt+0x1e68>
   132d8:	cmp	r6, #0
   132dc:	mov	r2, #5
   132e0:	ldr	r1, [pc, #272]	; 133f8 <__assert_fail@plt+0x1e94>
   132e4:	mov	r0, #0
   132e8:	moveq	r6, r7
   132ec:	bl	112d0 <dcgettext@plt>
   132f0:	ldr	r3, [pc, #260]	; 133fc <__assert_fail@plt+0x1e98>
   132f4:	ldr	r2, [pc, #260]	; 13400 <__assert_fail@plt+0x1e9c>
   132f8:	mov	r1, r0
   132fc:	mov	r0, #1
   13300:	bl	1145c <__printf_chk@plt>
   13304:	mov	r1, #0
   13308:	mov	r0, #5
   1330c:	bl	114bc <setlocale@plt>
   13310:	cmp	r0, #0
   13314:	bne	13388 <__assert_fail@plt+0x1e24>
   13318:	mov	r2, #5
   1331c:	ldr	r1, [pc, #224]	; 13404 <__assert_fail@plt+0x1ea0>
   13320:	mov	r0, #0
   13324:	bl	112d0 <dcgettext@plt>
   13328:	ldr	r3, [pc, #156]	; 133cc <__assert_fail@plt+0x1e68>
   1332c:	ldr	r2, [pc, #200]	; 133fc <__assert_fail@plt+0x1e98>
   13330:	mov	r1, r0
   13334:	mov	r0, #1
   13338:	bl	1145c <__printf_chk@plt>
   1333c:	mov	r2, #5
   13340:	ldr	r1, [pc, #192]	; 13408 <__assert_fail@plt+0x1ea4>
   13344:	mov	r0, #0
   13348:	bl	112d0 <dcgettext@plt>
   1334c:	ldr	r2, [pc, #184]	; 1340c <__assert_fail@plt+0x1ea8>
   13350:	cmp	r6, r7
   13354:	ldr	r3, [pc, #180]	; 13410 <__assert_fail@plt+0x1eac>
   13358:	moveq	r3, r2
   1335c:	mov	r2, r6
   13360:	mov	r1, r0
   13364:	mov	r0, #1
   13368:	bl	1145c <__printf_chk@plt>
   1336c:	b	13190 <__assert_fail@plt+0x1c2c>
   13370:	mov	r0, r8
   13374:	bl	111f8 <strcmp@plt>
   13378:	add	r6, r6, #8
   1337c:	cmp	r0, #0
   13380:	bne	132c0 <__assert_fail@plt+0x1d5c>
   13384:	b	132d0 <__assert_fail@plt+0x1d6c>
   13388:	mov	r2, #3
   1338c:	ldr	r1, [pc, #128]	; 13414 <__assert_fail@plt+0x1eb0>
   13390:	bl	11534 <strncmp@plt>
   13394:	cmp	r0, #0
   13398:	beq	13318 <__assert_fail@plt+0x1db4>
   1339c:	mov	r2, #5
   133a0:	ldr	r1, [pc, #112]	; 13418 <__assert_fail@plt+0x1eb4>
   133a4:	mov	r0, #0
   133a8:	bl	112d0 <dcgettext@plt>
   133ac:	ldr	r1, [r4]
   133b0:	bl	111bc <fputs_unlocked@plt>
   133b4:	b	13318 <__assert_fail@plt+0x1db4>
   133b8:	andeq	r4, r3, r0, asr #5
   133bc:	andeq	r4, r3, r0, asr #3
   133c0:	andeq	r2, r2, sl, lsr r2
   133c4:	andeq	r2, r2, r1, ror #4
   133c8:	andeq	r4, r3, r4, asr #3
   133cc:	andeq	r2, r2, r3, lsr r2
   133d0:	andeq	r2, r2, r8, lsl #5
   133d4:	andeq	r2, r2, lr, lsl #6
   133d8:	andeq	r2, r2, r1, lsr r3
   133dc:	andeq	r2, r2, ip, ror r3
   133e0:	andeq	r2, r2, r8, lsr r4
   133e4:	andeq	r2, r2, sl, ror r4
   133e8:	andeq	r2, r2, r1, asr #10
   133ec:	andeq	r2, r2, lr, ror #10
   133f0:	andeq	r2, r2, r4, lsr #11
   133f4:	andeq	r2, r2, ip, ror r0
   133f8:	andeq	r2, r2, sl, asr r7
   133fc:	andeq	r2, r2, r1, ror r7
   13400:	muleq	r2, r9, r7
   13404:	strdeq	r2, [r2], -r2	; <UNPREDICTABLE>
   13408:	andeq	r2, r2, sp, lsl #16
   1340c:	muleq	r2, r1, fp
   13410:	andeq	r2, r2, r9, asr r7
   13414:	andeq	r2, r2, r7, lsr #15
   13418:	andeq	r2, r2, fp, lsr #15
   1341c:	ldr	r3, [pc, #4]	; 13428 <__assert_fail@plt+0x1ec4>
   13420:	str	r0, [r3]
   13424:	bx	lr
   13428:			; <UNDEFINED> instruction: 0x000342b8
   1342c:	ldr	r3, [pc, #4]	; 13438 <__assert_fail@plt+0x1ed4>
   13430:	strb	r0, [r3, #4]
   13434:	bx	lr
   13438:			; <UNDEFINED> instruction: 0x000342b8
   1343c:	ldr	r3, [pc, #192]	; 13504 <__assert_fail@plt+0x1fa0>
   13440:	push	{r0, r1, r4, r5, r6, lr}
   13444:	ldr	r0, [r3]
   13448:	bl	214b8 <__assert_fail@plt+0xff54>
   1344c:	cmp	r0, #0
   13450:	beq	134e8 <__assert_fail@plt+0x1f84>
   13454:	ldr	r3, [pc, #172]	; 13508 <__assert_fail@plt+0x1fa4>
   13458:	mov	r4, r3
   1345c:	ldrb	r2, [r3, #4]
   13460:	cmp	r2, #0
   13464:	beq	13478 <__assert_fail@plt+0x1f14>
   13468:	bl	11414 <__errno_location@plt>
   1346c:	ldr	r3, [r0]
   13470:	cmp	r3, #32
   13474:	beq	134e8 <__assert_fail@plt+0x1f84>
   13478:	mov	r2, #5
   1347c:	ldr	r1, [pc, #136]	; 1350c <__assert_fail@plt+0x1fa8>
   13480:	mov	r0, #0
   13484:	bl	112d0 <dcgettext@plt>
   13488:	ldr	r4, [r4]
   1348c:	cmp	r4, #0
   13490:	mov	r5, r0
   13494:	beq	134cc <__assert_fail@plt+0x1f68>
   13498:	bl	11414 <__errno_location@plt>
   1349c:	ldr	r6, [r0]
   134a0:	mov	r0, r4
   134a4:	bl	14da4 <__assert_fail@plt+0x3840>
   134a8:	str	r5, [sp]
   134ac:	ldr	r2, [pc, #92]	; 13510 <__assert_fail@plt+0x1fac>
   134b0:	mov	r1, r6
   134b4:	mov	r3, r0
   134b8:	mov	r0, #0
   134bc:	bl	11384 <error@plt>
   134c0:	ldr	r3, [pc, #76]	; 13514 <__assert_fail@plt+0x1fb0>
   134c4:	ldr	r0, [r3]
   134c8:	bl	11258 <_exit@plt>
   134cc:	bl	11414 <__errno_location@plt>
   134d0:	mov	r3, r5
   134d4:	ldr	r2, [pc, #60]	; 13518 <__assert_fail@plt+0x1fb4>
   134d8:	ldr	r1, [r0]
   134dc:	mov	r0, r4
   134e0:	bl	11384 <error@plt>
   134e4:	b	134c0 <__assert_fail@plt+0x1f5c>
   134e8:	ldr	r3, [pc, #44]	; 1351c <__assert_fail@plt+0x1fb8>
   134ec:	ldr	r0, [r3]
   134f0:	bl	214b8 <__assert_fail@plt+0xff54>
   134f4:	cmp	r0, #0
   134f8:	bne	134c0 <__assert_fail@plt+0x1f5c>
   134fc:	add	sp, sp, #8
   13500:	pop	{r4, r5, r6, pc}
   13504:	andeq	r4, r3, r4, asr #3
   13508:			; <UNDEFINED> instruction: 0x000342b8
   1350c:	andeq	r2, r2, r7, asr #24
   13510:	andeq	r2, r2, r3, asr ip
   13514:	andeq	r4, r3, r8, ror #2
   13518:	andeq	r2, r2, r4, asr #21
   1351c:	andeq	r4, r3, r0, asr #3
   13520:	push	{r0, r1, r2, r4, r5, lr}
   13524:	mov	r4, r0
   13528:	bl	11468 <fileno@plt>
   1352c:	cmp	r0, #0
   13530:	mov	r0, r4
   13534:	bge	13544 <__assert_fail@plt+0x1fe0>
   13538:	add	sp, sp, #12
   1353c:	pop	{r4, r5, lr}
   13540:	b	11498 <fclose@plt>
   13544:	bl	113c0 <__freading@plt>
   13548:	cmp	r0, #0
   1354c:	bne	13588 <__assert_fail@plt+0x2024>
   13550:	mov	r0, r4
   13554:	bl	13628 <__assert_fail@plt+0x20c4>
   13558:	cmp	r0, #0
   1355c:	bne	135bc <__assert_fail@plt+0x2058>
   13560:	mov	r5, #0
   13564:	mov	r0, r4
   13568:	bl	11498 <fclose@plt>
   1356c:	cmp	r5, #0
   13570:	beq	13580 <__assert_fail@plt+0x201c>
   13574:	bl	11414 <__errno_location@plt>
   13578:	str	r5, [r0]
   1357c:	mvn	r0, #0
   13580:	add	sp, sp, #12
   13584:	pop	{r4, r5, pc}
   13588:	mov	r0, r4
   1358c:	bl	11468 <fileno@plt>
   13590:	mov	r3, #1
   13594:	str	r3, [sp]
   13598:	mov	r2, #0
   1359c:	mov	r3, #0
   135a0:	bl	1133c <lseek64@plt>
   135a4:	mvn	r3, #0
   135a8:	mvn	r2, #0
   135ac:	cmp	r1, r3
   135b0:	cmpeq	r0, r2
   135b4:	bne	13550 <__assert_fail@plt+0x1fec>
   135b8:	b	13560 <__assert_fail@plt+0x1ffc>
   135bc:	bl	11414 <__errno_location@plt>
   135c0:	ldr	r5, [r0]
   135c4:	b	13564 <__assert_fail@plt+0x2000>
   135c8:	push	{r4, r5, r6, r7, r8, lr}
   135cc:	mov	r5, r0
   135d0:	mov	r0, r1
   135d4:	mov	r1, r2
   135d8:	mov	r2, r3
   135dc:	bl	11390 <open64@plt>
   135e0:	sub	r3, r5, r0
   135e4:	clz	r3, r3
   135e8:	lsr	r3, r3, #5
   135ec:	orrs	r3, r3, r0, lsr #31
   135f0:	mov	r4, r0
   135f4:	bne	13620 <__assert_fail@plt+0x20bc>
   135f8:	mov	r1, r5
   135fc:	bl	112e8 <dup2@plt>
   13600:	mov	r6, r0
   13604:	bl	11414 <__errno_location@plt>
   13608:	ldr	r7, [r0]
   1360c:	mov	r5, r0
   13610:	mov	r0, r4
   13614:	mov	r4, r6
   13618:	bl	1154c <close@plt>
   1361c:	str	r7, [r5]
   13620:	mov	r0, r4
   13624:	pop	{r4, r5, r6, r7, r8, pc}
   13628:	push	{r0, r1, r4, lr}
   1362c:	subs	r4, r0, #0
   13630:	bne	13644 <__assert_fail@plt+0x20e0>
   13634:	mov	r0, r4
   13638:	add	sp, sp, #8
   1363c:	pop	{r4, lr}
   13640:	b	1121c <fflush@plt>
   13644:	bl	113c0 <__freading@plt>
   13648:	cmp	r0, #0
   1364c:	beq	13634 <__assert_fail@plt+0x20d0>
   13650:	ldr	r3, [r4]
   13654:	tst	r3, #256	; 0x100
   13658:	beq	13634 <__assert_fail@plt+0x20d0>
   1365c:	mov	r3, #1
   13660:	str	r3, [sp]
   13664:	mov	r2, #0
   13668:	mov	r3, #0
   1366c:	mov	r0, r4
   13670:	bl	13760 <__assert_fail@plt+0x21fc>
   13674:	b	13634 <__assert_fail@plt+0x20d0>
   13678:	push	{r4, r5, r6, lr}
   1367c:	mov	r6, r1
   13680:	bl	11504 <fopen64@plt>
   13684:	subs	r4, r0, #0
   13688:	beq	136c0 <__assert_fail@plt+0x215c>
   1368c:	bl	11468 <fileno@plt>
   13690:	cmp	r0, #2
   13694:	bhi	136c0 <__assert_fail@plt+0x215c>
   13698:	bl	20080 <__assert_fail@plt+0xeb1c>
   1369c:	subs	r5, r0, #0
   136a0:	bge	136c8 <__assert_fail@plt+0x2164>
   136a4:	bl	11414 <__errno_location@plt>
   136a8:	ldr	r6, [r0]
   136ac:	mov	r5, r0
   136b0:	mov	r0, r4
   136b4:	bl	13520 <__assert_fail@plt+0x1fbc>
   136b8:	str	r6, [r5]
   136bc:	mov	r4, #0
   136c0:	mov	r0, r4
   136c4:	pop	{r4, r5, r6, pc}
   136c8:	mov	r0, r4
   136cc:	bl	13520 <__assert_fail@plt+0x1fbc>
   136d0:	cmp	r0, #0
   136d4:	beq	136f4 <__assert_fail@plt+0x2190>
   136d8:	bl	11414 <__errno_location@plt>
   136dc:	ldr	r6, [r0]
   136e0:	mov	r4, r0
   136e4:	mov	r0, r5
   136e8:	bl	1154c <close@plt>
   136ec:	str	r6, [r4]
   136f0:	b	136bc <__assert_fail@plt+0x2158>
   136f4:	mov	r1, r6
   136f8:	mov	r0, r5
   136fc:	bl	111a4 <fdopen@plt>
   13700:	subs	r4, r0, #0
   13704:	bne	136c0 <__assert_fail@plt+0x215c>
   13708:	b	136d8 <__assert_fail@plt+0x2174>
   1370c:	push	{r0, r1, r2, r4, r5, lr}
   13710:	mov	r5, r0
   13714:	bl	11414 <__errno_location@plt>
   13718:	ldr	r3, [r0]
   1371c:	mov	r4, r0
   13720:	str	r3, [sp]
   13724:	str	r3, [sp, #4]
   13728:	mov	r3, #0
   1372c:	str	r3, [r0]
   13730:	mov	r0, r5
   13734:	bl	11240 <free@plt>
   13738:	ldr	r3, [r4]
   1373c:	add	r2, sp, #8
   13740:	cmp	r3, #0
   13744:	moveq	r3, #4
   13748:	movne	r3, #0
   1374c:	add	r3, r2, r3
   13750:	ldr	r3, [r3, #-8]
   13754:	str	r3, [r4]
   13758:	add	sp, sp, #12
   1375c:	pop	{r4, r5, pc}
   13760:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13764:	mov	r4, r0
   13768:	ldmib	r0, {ip, lr}
   1376c:	ldr	r8, [sp, #32]
   13770:	cmp	lr, ip
   13774:	bne	137e0 <__assert_fail@plt+0x227c>
   13778:	ldr	lr, [r0, #20]
   1377c:	ldr	ip, [r0, #16]
   13780:	cmp	lr, ip
   13784:	bne	137e0 <__assert_fail@plt+0x227c>
   13788:	ldr	r5, [r0, #36]	; 0x24
   1378c:	cmp	r5, #0
   13790:	bne	137e0 <__assert_fail@plt+0x227c>
   13794:	mov	r6, r2
   13798:	mov	r7, r3
   1379c:	bl	11468 <fileno@plt>
   137a0:	mov	r2, r6
   137a4:	mov	r3, r7
   137a8:	str	r8, [sp]
   137ac:	bl	1133c <lseek64@plt>
   137b0:	mvn	r3, #0
   137b4:	mvn	r2, #0
   137b8:	cmp	r1, r3
   137bc:	cmpeq	r0, r2
   137c0:	mvneq	r0, #0
   137c4:	ldrne	r3, [r4]
   137c8:	strdne	r0, [r4, #80]	; 0x50
   137cc:	movne	r0, r5
   137d0:	bicne	r3, r3, #16
   137d4:	strne	r3, [r4]
   137d8:	add	sp, sp, #8
   137dc:	pop	{r4, r5, r6, r7, r8, pc}
   137e0:	str	r8, [sp, #32]
   137e4:	mov	r0, r4
   137e8:	add	sp, sp, #8
   137ec:	pop	{r4, r5, r6, r7, r8, lr}
   137f0:	b	114a4 <fseeko64@plt>
   137f4:	mov	r3, #0
   137f8:	cmp	r0, #0
   137fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13800:	mov	r4, r0
   13804:	strb	r3, [r2, #20]
   13808:	sbcs	r3, r1, #0
   1380c:	mov	r5, r1
   13810:	add	r6, r2, #20
   13814:	mov	r8, #10
   13818:	mov	r9, #0
   1381c:	bge	13880 <__assert_fail@plt+0x231c>
   13820:	mov	r0, r4
   13824:	mov	r1, r5
   13828:	mov	r2, r8
   1382c:	mov	r3, r9
   13830:	bl	21da0 <__assert_fail@plt+0x1083c>
   13834:	mov	r3, r9
   13838:	mov	r0, r4
   1383c:	mov	r1, r5
   13840:	sub	r7, r6, #1
   13844:	rsb	r2, r2, #48	; 0x30
   13848:	strb	r2, [r6, #-1]
   1384c:	mov	r2, r8
   13850:	bl	21da0 <__assert_fail@plt+0x1083c>
   13854:	mov	r4, r0
   13858:	mov	r5, r1
   1385c:	orrs	r3, r4, r5
   13860:	bne	13878 <__assert_fail@plt+0x2314>
   13864:	sub	r6, r6, #2
   13868:	mov	r3, #45	; 0x2d
   1386c:	strb	r3, [r7, #-1]
   13870:	mov	r0, r6
   13874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13878:	mov	r6, r7
   1387c:	b	13820 <__assert_fail@plt+0x22bc>
   13880:	mov	r0, r4
   13884:	mov	r1, r5
   13888:	mov	r2, r8
   1388c:	mov	r3, r9
   13890:	bl	21da0 <__assert_fail@plt+0x1083c>
   13894:	mov	r3, r9
   13898:	mov	r0, r4
   1389c:	mov	r1, r5
   138a0:	add	r2, r2, #48	; 0x30
   138a4:	strb	r2, [r6, #-1]!
   138a8:	mov	r2, r8
   138ac:	bl	21da0 <__assert_fail@plt+0x1083c>
   138b0:	mov	r4, r0
   138b4:	mov	r5, r1
   138b8:	orrs	r3, r4, r5
   138bc:	bne	13880 <__assert_fail@plt+0x231c>
   138c0:	b	13870 <__assert_fail@plt+0x230c>
   138c4:	push	{r4, r5, r6, lr}
   138c8:	subs	r5, r0, #0
   138cc:	bne	138e4 <__assert_fail@plt+0x2380>
   138d0:	ldr	r3, [pc, #124]	; 13954 <__assert_fail@plt+0x23f0>
   138d4:	ldr	r0, [pc, #124]	; 13958 <__assert_fail@plt+0x23f4>
   138d8:	ldr	r1, [r3]
   138dc:	bl	11528 <fputs@plt>
   138e0:	bl	11540 <abort@plt>
   138e4:	mov	r1, #47	; 0x2f
   138e8:	bl	114e0 <strrchr@plt>
   138ec:	cmp	r0, #0
   138f0:	addne	r4, r0, #1
   138f4:	moveq	r4, r5
   138f8:	sub	r3, r4, r5
   138fc:	cmp	r3, #6
   13900:	ble	13940 <__assert_fail@plt+0x23dc>
   13904:	mov	r2, #7
   13908:	ldr	r1, [pc, #76]	; 1395c <__assert_fail@plt+0x23f8>
   1390c:	sub	r0, r4, #7
   13910:	bl	11534 <strncmp@plt>
   13914:	cmp	r0, #0
   13918:	bne	13940 <__assert_fail@plt+0x23dc>
   1391c:	mov	r2, #3
   13920:	ldr	r1, [pc, #56]	; 13960 <__assert_fail@plt+0x23fc>
   13924:	mov	r0, r4
   13928:	bl	11534 <strncmp@plt>
   1392c:	cmp	r0, #0
   13930:	movne	r5, r4
   13934:	ldreq	r3, [pc, #40]	; 13964 <__assert_fail@plt+0x2400>
   13938:	addeq	r5, r4, #3
   1393c:	streq	r5, [r3]
   13940:	ldr	r3, [pc, #32]	; 13968 <__assert_fail@plt+0x2404>
   13944:	str	r5, [r3]
   13948:	ldr	r3, [pc, #28]	; 1396c <__assert_fail@plt+0x2408>
   1394c:	str	r5, [r3]
   13950:	pop	{r4, r5, r6, pc}
   13954:	andeq	r4, r3, r0, asr #3
   13958:	andeq	r2, r2, sl, asr ip
   1395c:	muleq	r2, r2, ip
   13960:	muleq	r2, sl, ip
   13964:			; <UNDEFINED> instruction: 0x000341b0
   13968:	andeq	r4, r3, r0, asr #5
   1396c:			; <UNDEFINED> instruction: 0x000341b4
   13970:	push	{r4, r5, r6, lr}
   13974:	mov	r2, #48	; 0x30
   13978:	mov	r5, r1
   1397c:	mov	r1, #0
   13980:	mov	r4, r0
   13984:	bl	11444 <memset@plt>
   13988:	cmp	r5, #10
   1398c:	bne	13994 <__assert_fail@plt+0x2430>
   13990:	bl	11540 <abort@plt>
   13994:	str	r5, [r4]
   13998:	mov	r0, r4
   1399c:	pop	{r4, r5, r6, pc}
   139a0:	push	{r4, r5, r6, lr}
   139a4:	mov	r4, r0
   139a8:	mov	r5, r1
   139ac:	bl	217a4 <__assert_fail@plt+0x10240>
   139b0:	ldrb	r3, [r0]
   139b4:	bic	r3, r3, #32
   139b8:	cmp	r3, #85	; 0x55
   139bc:	bne	13a2c <__assert_fail@plt+0x24c8>
   139c0:	ldrb	r3, [r0, #1]
   139c4:	bic	r3, r3, #32
   139c8:	cmp	r3, #84	; 0x54
   139cc:	bne	13a04 <__assert_fail@plt+0x24a0>
   139d0:	ldrb	r3, [r0, #2]
   139d4:	bic	r3, r3, #32
   139d8:	cmp	r3, #70	; 0x46
   139dc:	bne	13a04 <__assert_fail@plt+0x24a0>
   139e0:	ldrb	r3, [r0, #3]
   139e4:	cmp	r3, #45	; 0x2d
   139e8:	bne	13a04 <__assert_fail@plt+0x24a0>
   139ec:	ldrb	r3, [r0, #4]
   139f0:	cmp	r3, #56	; 0x38
   139f4:	bne	13a04 <__assert_fail@plt+0x24a0>
   139f8:	ldrb	r3, [r0, #5]
   139fc:	cmp	r3, #0
   13a00:	beq	13a18 <__assert_fail@plt+0x24b4>
   13a04:	ldr	r1, [pc, #144]	; 13a9c <__assert_fail@plt+0x2538>
   13a08:	ldr	r0, [pc, #144]	; 13aa0 <__assert_fail@plt+0x253c>
   13a0c:	cmp	r5, #9
   13a10:	movne	r0, r1
   13a14:	pop	{r4, r5, r6, pc}
   13a18:	ldrb	r3, [r4]
   13a1c:	ldr	r1, [pc, #128]	; 13aa4 <__assert_fail@plt+0x2540>
   13a20:	ldr	r0, [pc, #128]	; 13aa8 <__assert_fail@plt+0x2544>
   13a24:	cmp	r3, #96	; 0x60
   13a28:	b	13a10 <__assert_fail@plt+0x24ac>
   13a2c:	cmp	r3, #71	; 0x47
   13a30:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a34:	ldrb	r3, [r0, #1]
   13a38:	bic	r3, r3, #32
   13a3c:	cmp	r3, #66	; 0x42
   13a40:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a44:	ldrb	r3, [r0, #2]
   13a48:	cmp	r3, #49	; 0x31
   13a4c:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a50:	ldrb	r3, [r0, #3]
   13a54:	cmp	r3, #56	; 0x38
   13a58:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a5c:	ldrb	r3, [r0, #4]
   13a60:	cmp	r3, #48	; 0x30
   13a64:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a68:	ldrb	r3, [r0, #5]
   13a6c:	cmp	r3, #51	; 0x33
   13a70:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a74:	ldrb	r3, [r0, #6]
   13a78:	cmp	r3, #48	; 0x30
   13a7c:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a80:	ldrb	r3, [r0, #7]
   13a84:	cmp	r3, #0
   13a88:	bne	13a04 <__assert_fail@plt+0x24a0>
   13a8c:	ldrb	r3, [r4]
   13a90:	ldr	r1, [pc, #20]	; 13aac <__assert_fail@plt+0x2548>
   13a94:	ldr	r0, [pc, #20]	; 13ab0 <__assert_fail@plt+0x254c>
   13a98:	b	13a24 <__assert_fail@plt+0x24c0>
   13a9c:	andeq	r2, r2, r0, asr fp
   13aa0:	andeq	r2, r2, r3, lsl #26
   13aa4:	strdeq	r2, [r2], -r8
   13aa8:	strdeq	r2, [r2], -r4
   13aac:	andeq	r2, r2, r0, lsl #26
   13ab0:	strdeq	r2, [r2], -ip
   13ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab8:	sub	sp, sp, #108	; 0x6c
   13abc:	mov	r8, r0
   13ac0:	str	r3, [sp, #36]	; 0x24
   13ac4:	mov	r5, r1
   13ac8:	str	r2, [sp, #44]	; 0x2c
   13acc:	ldr	sl, [sp, #144]	; 0x90
   13ad0:	bl	11348 <__ctype_get_mb_cur_max@plt>
   13ad4:	ldr	r3, [sp, #148]	; 0x94
   13ad8:	mov	r7, #0
   13adc:	str	r7, [sp, #48]	; 0x30
   13ae0:	lsr	r6, r3, #1
   13ae4:	and	r6, r6, #1
   13ae8:	mov	r3, #1
   13aec:	str	r3, [sp, #72]	; 0x48
   13af0:	str	r7, [sp, #24]
   13af4:	str	r7, [sp, #32]
   13af8:	str	r7, [sp, #40]	; 0x28
   13afc:	str	r7, [sp, #60]	; 0x3c
   13b00:	str	r0, [sp, #76]	; 0x4c
   13b04:	cmp	sl, #10
   13b08:	ldrls	pc, [pc, sl, lsl #2]
   13b0c:	b	13d48 <__assert_fail@plt+0x27e4>
   13b10:	andeq	r3, r1, ip, lsr fp
   13b14:	ldrdeq	r4, [r1], -r0
   13b18:	andeq	r3, r1, r4, lsl sp
   13b1c:	andeq	r3, r1, r0, ror #26
   13b20:	strdeq	r3, [r1], -r0
   13b24:	andeq	r3, r1, r8, asr #22
   13b28:			; <UNDEFINED> instruction: 0x000147b0
   13b2c:	andeq	r3, r1, ip, asr #26
   13b30:	andeq	r3, r1, r0, asr #24
   13b34:	andeq	r3, r1, r0, asr #24
   13b38:	andeq	r3, r1, r0, asr #24
   13b3c:	mov	r6, #0
   13b40:	mov	r4, #0
   13b44:	b	13b74 <__assert_fail@plt+0x2610>
   13b48:	cmp	r6, #0
   13b4c:	bne	13d70 <__assert_fail@plt+0x280c>
   13b50:	cmp	r5, #0
   13b54:	movne	r3, #34	; 0x22
   13b58:	strbne	r3, [r8]
   13b5c:	mov	r3, #1
   13b60:	str	r3, [sp, #24]
   13b64:	str	r3, [sp, #32]
   13b68:	mov	r4, #1
   13b6c:	ldr	r3, [pc, #3172]	; 147d8 <__assert_fail@plt+0x3274>
   13b70:	str	r3, [sp, #40]	; 0x28
   13b74:	mov	r9, r5
   13b78:	mov	r3, #0
   13b7c:	str	r7, [sp, #68]	; 0x44
   13b80:	str	r3, [sp, #28]
   13b84:	ldr	r3, [sp, #36]	; 0x24
   13b88:	cmn	r3, #1
   13b8c:	bne	1471c <__assert_fail@plt+0x31b8>
   13b90:	ldr	r3, [sp, #44]	; 0x2c
   13b94:	ldr	r2, [sp, #28]
   13b98:	ldrb	r3, [r3, r2]
   13b9c:	adds	r3, r3, #0
   13ba0:	movne	r3, #1
   13ba4:	str	r3, [sp, #52]	; 0x34
   13ba8:	ldr	r3, [sp, #52]	; 0x34
   13bac:	cmp	r3, #0
   13bb0:	bne	13d98 <__assert_fail@plt+0x2834>
   13bb4:	sub	r2, sl, #2
   13bb8:	clz	r2, r2
   13bbc:	lsr	r2, r2, #5
   13bc0:	and	r3, r6, r2
   13bc4:	cmp	r4, #0
   13bc8:	movne	r3, #0
   13bcc:	andeq	r3, r3, #1
   13bd0:	cmp	r3, #0
   13bd4:	bne	13f60 <__assert_fail@plt+0x29fc>
   13bd8:	eor	r3, r6, #1
   13bdc:	ands	r2, r2, r3
   13be0:	beq	14754 <__assert_fail@plt+0x31f0>
   13be4:	ldr	r3, [sp, #68]	; 0x44
   13be8:	cmp	r3, #0
   13bec:	beq	1478c <__assert_fail@plt+0x3228>
   13bf0:	ldr	r3, [sp, #72]	; 0x48
   13bf4:	cmp	r3, #0
   13bf8:	beq	14730 <__assert_fail@plt+0x31cc>
   13bfc:	ldr	r3, [sp, #160]	; 0xa0
   13c00:	ldr	r2, [sp, #44]	; 0x2c
   13c04:	str	r3, [sp, #16]
   13c08:	ldr	r3, [sp, #156]	; 0x9c
   13c0c:	ldr	r1, [sp, #60]	; 0x3c
   13c10:	str	r3, [sp, #12]
   13c14:	ldr	r3, [sp, #152]	; 0x98
   13c18:	str	r3, [sp, #8]
   13c1c:	ldr	r3, [sp, #148]	; 0x94
   13c20:	str	r3, [sp, #4]
   13c24:	mov	r3, #5
   13c28:	str	r3, [sp]
   13c2c:	ldr	r3, [sp, #36]	; 0x24
   13c30:	mov	r0, r8
   13c34:	bl	13ab4 <__assert_fail@plt+0x2550>
   13c38:	mov	r4, r0
   13c3c:	b	14780 <__assert_fail@plt+0x321c>
   13c40:	cmp	sl, #10
   13c44:	beq	13ca0 <__assert_fail@plt+0x273c>
   13c48:	ldr	r4, [pc, #2956]	; 147dc <__assert_fail@plt+0x3278>
   13c4c:	mov	r2, #5
   13c50:	mov	r1, r4
   13c54:	mov	r0, #0
   13c58:	bl	112d0 <dcgettext@plt>
   13c5c:	cmp	r0, r4
   13c60:	str	r0, [sp, #156]	; 0x9c
   13c64:	bne	13c74 <__assert_fail@plt+0x2710>
   13c68:	mov	r1, sl
   13c6c:	bl	139a0 <__assert_fail@plt+0x243c>
   13c70:	str	r0, [sp, #156]	; 0x9c
   13c74:	ldr	r4, [pc, #2916]	; 147e0 <__assert_fail@plt+0x327c>
   13c78:	mov	r2, #5
   13c7c:	mov	r1, r4
   13c80:	mov	r0, #0
   13c84:	bl	112d0 <dcgettext@plt>
   13c88:	cmp	r0, r4
   13c8c:	str	r0, [sp, #160]	; 0xa0
   13c90:	bne	13ca0 <__assert_fail@plt+0x273c>
   13c94:	mov	r1, sl
   13c98:	bl	139a0 <__assert_fail@plt+0x243c>
   13c9c:	str	r0, [sp, #160]	; 0xa0
   13ca0:	cmp	r6, #0
   13ca4:	moveq	r4, r6
   13ca8:	beq	13cc0 <__assert_fail@plt+0x275c>
   13cac:	mov	r4, #0
   13cb0:	b	13cd0 <__assert_fail@plt+0x276c>
   13cb4:	cmp	r5, r4
   13cb8:	strbhi	r3, [r8, r4]
   13cbc:	add	r4, r4, #1
   13cc0:	ldr	r3, [sp, #156]	; 0x9c
   13cc4:	ldrb	r3, [r3, r4]
   13cc8:	cmp	r3, #0
   13ccc:	bne	13cb4 <__assert_fail@plt+0x2750>
   13cd0:	ldr	r0, [sp, #160]	; 0xa0
   13cd4:	bl	113fc <strlen@plt>
   13cd8:	ldr	r3, [sp, #160]	; 0xa0
   13cdc:	str	r3, [sp, #40]	; 0x28
   13ce0:	mov	r3, #1
   13ce4:	str	r3, [sp, #24]
   13ce8:	str	r0, [sp, #32]
   13cec:	b	13b74 <__assert_fail@plt+0x2610>
   13cf0:	mov	r3, #1
   13cf4:	cmp	r6, #0
   13cf8:	streq	r3, [sp, #24]
   13cfc:	beq	13d1c <__assert_fail@plt+0x27b8>
   13d00:	str	r3, [sp, #32]
   13d04:	ldr	r3, [pc, #2772]	; 147e0 <__assert_fail@plt+0x327c>
   13d08:	mov	r4, #0
   13d0c:	str	r3, [sp, #40]	; 0x28
   13d10:	b	13d40 <__assert_fail@plt+0x27dc>
   13d14:	cmp	r6, #0
   13d18:	bne	13d88 <__assert_fail@plt+0x2824>
   13d1c:	cmp	r5, #0
   13d20:	movne	r3, #39	; 0x27
   13d24:	strbne	r3, [r8]
   13d28:	mov	r3, #1
   13d2c:	str	r3, [sp, #32]
   13d30:	mov	r6, #0
   13d34:	ldr	r3, [pc, #2724]	; 147e0 <__assert_fail@plt+0x327c>
   13d38:	mov	r4, #1
   13d3c:	str	r3, [sp, #40]	; 0x28
   13d40:	mov	sl, #2
   13d44:	b	13b74 <__assert_fail@plt+0x2610>
   13d48:	bl	11540 <abort@plt>
   13d4c:	mov	r6, #0
   13d50:	mov	r3, #1
   13d54:	str	r3, [sp, #24]
   13d58:	mov	r4, r6
   13d5c:	b	13b74 <__assert_fail@plt+0x2610>
   13d60:	mov	r6, #1
   13d64:	str	r6, [sp, #24]
   13d68:	str	r6, [sp, #32]
   13d6c:	b	13d04 <__assert_fail@plt+0x27a0>
   13d70:	mov	r3, #1
   13d74:	str	r3, [sp, #32]
   13d78:	ldr	r3, [pc, #2648]	; 147d8 <__assert_fail@plt+0x3274>
   13d7c:	str	r6, [sp, #24]
   13d80:	str	r3, [sp, #40]	; 0x28
   13d84:	b	13b40 <__assert_fail@plt+0x25dc>
   13d88:	mov	r3, #1
   13d8c:	str	r3, [sp, #32]
   13d90:	ldr	r3, [pc, #2632]	; 147e0 <__assert_fail@plt+0x327c>
   13d94:	b	13d80 <__assert_fail@plt+0x281c>
   13d98:	ldr	r3, [sp, #32]
   13d9c:	ldr	fp, [sp, #24]
   13da0:	cmp	sl, #2
   13da4:	moveq	fp, #0
   13da8:	andne	fp, fp, #1
   13dac:	adds	r5, r3, #0
   13db0:	movne	r5, #1
   13db4:	ands	r3, r5, fp
   13db8:	str	r3, [sp, #64]	; 0x40
   13dbc:	beq	13e8c <__assert_fail@plt+0x2928>
   13dc0:	ldr	r2, [sp, #32]
   13dc4:	ldr	r3, [sp, #28]
   13dc8:	add	r7, r3, r2
   13dcc:	mov	r3, r2
   13dd0:	ldr	r2, [sp, #36]	; 0x24
   13dd4:	cmp	r3, #1
   13dd8:	movls	r3, #0
   13ddc:	movhi	r3, #1
   13de0:	cmn	r2, #1
   13de4:	movne	r3, #0
   13de8:	cmp	r3, #0
   13dec:	beq	13dfc <__assert_fail@plt+0x2898>
   13df0:	ldr	r0, [sp, #44]	; 0x2c
   13df4:	bl	113fc <strlen@plt>
   13df8:	str	r0, [sp, #36]	; 0x24
   13dfc:	ldr	r3, [sp, #36]	; 0x24
   13e00:	cmp	r3, r7
   13e04:	bcc	13e84 <__assert_fail@plt+0x2920>
   13e08:	ldr	r3, [sp, #44]	; 0x2c
   13e0c:	ldr	r0, [sp, #28]
   13e10:	ldr	r2, [sp, #32]
   13e14:	ldr	r1, [sp, #40]	; 0x28
   13e18:	add	r0, r3, r0
   13e1c:	bl	112b8 <memcmp@plt>
   13e20:	cmp	r0, #0
   13e24:	bne	13e84 <__assert_fail@plt+0x2920>
   13e28:	cmp	r6, #0
   13e2c:	beq	13e8c <__assert_fail@plt+0x2928>
   13e30:	str	r6, [sp, #24]
   13e34:	ldr	r3, [sp, #24]
   13e38:	ldr	r2, [sp, #44]	; 0x2c
   13e3c:	cmp	sl, #2
   13e40:	movne	r3, #0
   13e44:	andeq	r3, r3, #1
   13e48:	cmp	r3, #0
   13e4c:	ldr	r3, [sp, #160]	; 0xa0
   13e50:	movne	sl, #4
   13e54:	str	r3, [sp, #16]
   13e58:	ldr	r3, [sp, #156]	; 0x9c
   13e5c:	str	sl, [sp]
   13e60:	str	r3, [sp, #12]
   13e64:	mov	r3, #0
   13e68:	str	r3, [sp, #8]
   13e6c:	ldr	r3, [sp, #148]	; 0x94
   13e70:	mov	r1, r9
   13e74:	bic	r3, r3, #2
   13e78:	str	r3, [sp, #4]
   13e7c:	ldr	r3, [sp, #36]	; 0x24
   13e80:	b	13c30 <__assert_fail@plt+0x26cc>
   13e84:	mov	r3, #0
   13e88:	str	r3, [sp, #64]	; 0x40
   13e8c:	ldr	r2, [sp, #28]
   13e90:	ldr	r3, [sp, #44]	; 0x2c
   13e94:	add	r3, r3, r2
   13e98:	str	r3, [sp, #80]	; 0x50
   13e9c:	ldr	r3, [sp, #44]	; 0x2c
   13ea0:	ldrb	r7, [r3, r2]
   13ea4:	cmp	r7, #58	; 0x3a
   13ea8:	bhi	14010 <__assert_fail@plt+0x2aac>
   13eac:	cmp	r7, #43	; 0x2b
   13eb0:	bcs	14064 <__assert_fail@plt+0x2b00>
   13eb4:	cmp	r7, #32
   13eb8:	beq	140bc <__assert_fail@plt+0x2b58>
   13ebc:	bhi	13f68 <__assert_fail@plt+0x2a04>
   13ec0:	cmp	r7, #9
   13ec4:	beq	14370 <__assert_fail@plt+0x2e0c>
   13ec8:	bhi	13f2c <__assert_fail@plt+0x29c8>
   13ecc:	cmp	r7, #7
   13ed0:	beq	1441c <__assert_fail@plt+0x2eb8>
   13ed4:	bhi	140d8 <__assert_fail@plt+0x2b74>
   13ed8:	cmp	r7, #0
   13edc:	beq	140f4 <__assert_fail@plt+0x2b90>
   13ee0:	ldr	r3, [sp, #76]	; 0x4c
   13ee4:	cmp	r3, #1
   13ee8:	bne	14460 <__assert_fail@plt+0x2efc>
   13eec:	bl	113e4 <__ctype_b_loc@plt>
   13ef0:	sxth	r3, r7
   13ef4:	lsl	r3, r3, #1
   13ef8:	ldr	r2, [r0]
   13efc:	ldrh	r5, [r2, r3]
   13f00:	ldr	r3, [sp, #76]	; 0x4c
   13f04:	str	r3, [sp, #56]	; 0x38
   13f08:	lsr	r5, r5, #14
   13f0c:	and	r5, r5, #1
   13f10:	ldr	r3, [sp, #24]
   13f14:	eor	fp, r5, #1
   13f18:	and	fp, fp, r3
   13f1c:	ands	fp, fp, #255	; 0xff
   13f20:	beq	142a8 <__assert_fail@plt+0x2d44>
   13f24:	mov	r5, #0
   13f28:	b	1450c <__assert_fail@plt+0x2fa8>
   13f2c:	cmp	r7, #11
   13f30:	beq	14378 <__assert_fail@plt+0x2e14>
   13f34:	bcc	14414 <__assert_fail@plt+0x2eb0>
   13f38:	cmp	r7, #12
   13f3c:	beq	14424 <__assert_fail@plt+0x2ec0>
   13f40:	cmp	r7, #13
   13f44:	moveq	r3, #114	; 0x72
   13f48:	bne	13ee0 <__assert_fail@plt+0x297c>
   13f4c:	cmp	sl, #2
   13f50:	movne	r2, #0
   13f54:	andeq	r2, r6, #1
   13f58:	cmp	r2, #0
   13f5c:	beq	140dc <__assert_fail@plt+0x2b78>
   13f60:	mov	sl, #2
   13f64:	b	13e34 <__assert_fail@plt+0x28d0>
   13f68:	cmp	r7, #37	; 0x25
   13f6c:	beq	14064 <__assert_fail@plt+0x2b00>
   13f70:	bhi	13f84 <__assert_fail@plt+0x2a20>
   13f74:	cmp	r7, #35	; 0x23
   13f78:	beq	140b0 <__assert_fail@plt+0x2b4c>
   13f7c:	mov	r5, #0
   13f80:	b	140c0 <__assert_fail@plt+0x2b5c>
   13f84:	cmp	r7, #39	; 0x27
   13f88:	bne	13f7c <__assert_fail@plt+0x2a18>
   13f8c:	cmp	sl, #2
   13f90:	ldrne	r5, [sp, #52]	; 0x34
   13f94:	movne	r3, r5
   13f98:	strne	r3, [sp, #68]	; 0x44
   13f9c:	bne	14068 <__assert_fail@plt+0x2b04>
   13fa0:	cmp	r6, #0
   13fa4:	bne	13e34 <__assert_fail@plt+0x28d0>
   13fa8:	ldr	r2, [sp, #60]	; 0x3c
   13fac:	adds	r3, r9, #0
   13fb0:	movne	r3, #1
   13fb4:	cmp	r2, #0
   13fb8:	movne	r3, #0
   13fbc:	cmp	r3, #0
   13fc0:	strne	r9, [sp, #60]	; 0x3c
   13fc4:	movne	r9, #0
   13fc8:	bne	13fd8 <__assert_fail@plt+0x2a74>
   13fcc:	cmp	r9, r4
   13fd0:	movhi	r3, #39	; 0x27
   13fd4:	strbhi	r3, [r8, r4]
   13fd8:	add	r3, r4, #1
   13fdc:	cmp	r3, r9
   13fe0:	movcc	r2, #92	; 0x5c
   13fe4:	strbcc	r2, [r8, r3]
   13fe8:	add	r3, r4, #2
   13fec:	cmp	r3, r9
   13ff0:	ldr	r5, [sp, #52]	; 0x34
   13ff4:	movcc	r2, #39	; 0x27
   13ff8:	strbcc	r2, [r8, r3]
   13ffc:	add	r4, r4, #3
   14000:	mov	fp, r6
   14004:	str	r5, [sp, #68]	; 0x44
   14008:	str	r6, [sp, #48]	; 0x30
   1400c:	b	142a8 <__assert_fail@plt+0x2d44>
   14010:	cmp	r7, #94	; 0x5e
   14014:	beq	13f7c <__assert_fail@plt+0x2a18>
   14018:	bhi	14070 <__assert_fail@plt+0x2b0c>
   1401c:	cmp	r7, #90	; 0x5a
   14020:	bhi	14058 <__assert_fail@plt+0x2af4>
   14024:	cmp	r7, #65	; 0x41
   14028:	bcs	14064 <__assert_fail@plt+0x2b00>
   1402c:	cmp	r7, #62	; 0x3e
   14030:	bls	13f7c <__assert_fail@plt+0x2a18>
   14034:	cmp	r7, #63	; 0x3f
   14038:	bne	13ee0 <__assert_fail@plt+0x297c>
   1403c:	cmp	sl, #2
   14040:	beq	141e4 <__assert_fail@plt+0x2c80>
   14044:	cmp	sl, #5
   14048:	beq	141f4 <__assert_fail@plt+0x2c90>
   1404c:	mov	fp, #0
   14050:	mov	r5, fp
   14054:	b	142a8 <__assert_fail@plt+0x2d44>
   14058:	cmp	r7, #92	; 0x5c
   1405c:	beq	14380 <__assert_fail@plt+0x2e1c>
   14060:	bls	13f7c <__assert_fail@plt+0x2a18>
   14064:	ldr	r5, [sp, #52]	; 0x34
   14068:	mov	fp, #0
   1406c:	b	142a8 <__assert_fail@plt+0x2d44>
   14070:	cmp	r7, #122	; 0x7a
   14074:	bhi	14094 <__assert_fail@plt+0x2b30>
   14078:	cmp	r7, #97	; 0x61
   1407c:	bcs	14064 <__assert_fail@plt+0x2b00>
   14080:	cmp	r7, #95	; 0x5f
   14084:	beq	14064 <__assert_fail@plt+0x2b00>
   14088:	cmp	r7, #96	; 0x60
   1408c:	bne	13ee0 <__assert_fail@plt+0x297c>
   14090:	b	13f7c <__assert_fail@plt+0x2a18>
   14094:	cmp	r7, #124	; 0x7c
   14098:	beq	13f7c <__assert_fail@plt+0x2a18>
   1409c:	bcc	1442c <__assert_fail@plt+0x2ec8>
   140a0:	cmp	r7, #125	; 0x7d
   140a4:	beq	1442c <__assert_fail@plt+0x2ec8>
   140a8:	cmp	r7, #126	; 0x7e
   140ac:	bne	13ee0 <__assert_fail@plt+0x297c>
   140b0:	ldr	r3, [sp, #28]
   140b4:	cmp	r3, #0
   140b8:	bne	141ec <__assert_fail@plt+0x2c88>
   140bc:	ldr	r5, [sp, #52]	; 0x34
   140c0:	cmp	sl, #2
   140c4:	movne	fp, #0
   140c8:	andeq	fp, r6, #1
   140cc:	cmp	fp, #0
   140d0:	beq	142a8 <__assert_fail@plt+0x2d44>
   140d4:	b	13f60 <__assert_fail@plt+0x29fc>
   140d8:	mov	r3, #98	; 0x62
   140dc:	ldr	r2, [sp, #24]
   140e0:	cmp	r2, #0
   140e4:	beq	141ec <__assert_fail@plt+0x2c88>
   140e8:	mov	r7, r3
   140ec:	mov	r5, #0
   140f0:	b	14300 <__assert_fail@plt+0x2d9c>
   140f4:	ldr	r3, [sp, #24]
   140f8:	cmp	r3, #0
   140fc:	beq	141c8 <__assert_fail@plt+0x2c64>
   14100:	cmp	r6, #0
   14104:	bne	13e30 <__assert_fail@plt+0x28cc>
   14108:	ldr	r3, [sp, #48]	; 0x30
   1410c:	eor	r2, r3, #1
   14110:	cmp	sl, #2
   14114:	movne	r2, #0
   14118:	andeq	r2, r2, #1
   1411c:	cmp	r2, #0
   14120:	moveq	r3, r4
   14124:	beq	1415c <__assert_fail@plt+0x2bf8>
   14128:	cmp	r9, r4
   1412c:	movhi	r3, #39	; 0x27
   14130:	strbhi	r3, [r8, r4]
   14134:	add	r3, r4, #1
   14138:	cmp	r9, r3
   1413c:	movhi	r1, #36	; 0x24
   14140:	strbhi	r1, [r8, r3]
   14144:	add	r3, r4, #2
   14148:	cmp	r9, r3
   1414c:	movhi	r1, #39	; 0x27
   14150:	strbhi	r1, [r8, r3]
   14154:	add	r3, r4, #3
   14158:	str	r2, [sp, #48]	; 0x30
   1415c:	cmp	r9, r3
   14160:	movhi	r2, #92	; 0x5c
   14164:	strbhi	r2, [r8, r3]
   14168:	cmp	fp, #0
   1416c:	add	r4, r3, #1
   14170:	beq	14700 <__assert_fail@plt+0x319c>
   14174:	ldr	r2, [sp, #28]
   14178:	ldr	r1, [sp, #36]	; 0x24
   1417c:	add	r2, r2, #1
   14180:	cmp	r1, r2
   14184:	bls	141c0 <__assert_fail@plt+0x2c5c>
   14188:	ldr	r1, [sp, #44]	; 0x2c
   1418c:	mov	r7, #48	; 0x30
   14190:	ldrb	r2, [r1, r2]
   14194:	sub	r2, r2, #48	; 0x30
   14198:	cmp	r2, #9
   1419c:	movhi	r5, r6
   141a0:	bhi	142a8 <__assert_fail@plt+0x2d44>
   141a4:	cmp	r9, r4
   141a8:	add	r2, r3, #2
   141ac:	strbhi	r7, [r8, r4]
   141b0:	cmp	r9, r2
   141b4:	add	r4, r3, #3
   141b8:	movhi	r1, #48	; 0x30
   141bc:	strbhi	r1, [r8, r2]
   141c0:	mov	r5, r6
   141c4:	b	14708 <__assert_fail@plt+0x31a4>
   141c8:	ldr	r3, [sp, #148]	; 0x94
   141cc:	tst	r3, #1
   141d0:	ldreq	r5, [sp, #24]
   141d4:	beq	14714 <__assert_fail@plt+0x31b0>
   141d8:	ldr	r3, [sp, #28]
   141dc:	add	r3, r3, #1
   141e0:	b	13b80 <__assert_fail@plt+0x261c>
   141e4:	cmp	r6, #0
   141e8:	bne	13e34 <__assert_fail@plt+0x28d0>
   141ec:	mov	r5, #0
   141f0:	b	14068 <__assert_fail@plt+0x2b04>
   141f4:	ldr	r3, [sp, #148]	; 0x94
   141f8:	tst	r3, #4
   141fc:	beq	141ec <__assert_fail@plt+0x2c88>
   14200:	ldr	r3, [sp, #28]
   14204:	add	r2, r3, #2
   14208:	ldr	r3, [sp, #36]	; 0x24
   1420c:	cmp	r3, r2
   14210:	bls	141ec <__assert_fail@plt+0x2c88>
   14214:	ldr	r3, [sp, #44]	; 0x2c
   14218:	ldr	r1, [sp, #28]
   1421c:	add	r3, r3, r1
   14220:	ldrb	r0, [r3, #1]
   14224:	cmp	r0, #63	; 0x3f
   14228:	bne	141ec <__assert_fail@plt+0x2c88>
   1422c:	ldr	r3, [sp, #44]	; 0x2c
   14230:	ldrb	r1, [r3, r2]
   14234:	sub	r3, r1, #33	; 0x21
   14238:	uxtb	r3, r3
   1423c:	cmp	r3, #29
   14240:	bhi	14710 <__assert_fail@plt+0x31ac>
   14244:	mov	ip, #1
   14248:	ldr	r5, [pc, #1428]	; 147e4 <__assert_fail@plt+0x3280>
   1424c:	ands	r5, r5, ip, lsl r3
   14250:	beq	14068 <__assert_fail@plt+0x2b04>
   14254:	cmp	r6, #0
   14258:	bne	13e34 <__assert_fail@plt+0x28d0>
   1425c:	add	r3, r4, #1
   14260:	cmp	r9, r4
   14264:	strbhi	r0, [r8, r4]
   14268:	cmp	r9, r3
   1426c:	movhi	r0, #34	; 0x22
   14270:	strbhi	r0, [r8, r3]
   14274:	add	r3, r4, #2
   14278:	cmp	r9, r3
   1427c:	movhi	r0, #34	; 0x22
   14280:	strbhi	r0, [r8, r3]
   14284:	add	r3, r4, #3
   14288:	cmp	r9, r3
   1428c:	add	r4, r4, #4
   14290:	mov	r5, r6
   14294:	mov	fp, r6
   14298:	mov	r7, r1
   1429c:	movhi	r0, #63	; 0x3f
   142a0:	strbhi	r0, [r8, r3]
   142a4:	str	r2, [sp, #28]
   142a8:	ldr	r3, [sp, #24]
   142ac:	eor	r3, r3, #1
   142b0:	cmp	sl, #2
   142b4:	orreq	r3, r3, #1
   142b8:	eor	r3, r3, #1
   142bc:	orr	r3, r6, r3
   142c0:	tst	r3, #255	; 0xff
   142c4:	beq	142f4 <__assert_fail@plt+0x2d90>
   142c8:	ldr	r3, [sp, #152]	; 0x98
   142cc:	cmp	r3, #0
   142d0:	beq	142f4 <__assert_fail@plt+0x2d90>
   142d4:	lsr	r2, r7, #5
   142d8:	ldr	r1, [sp, #152]	; 0x98
   142dc:	uxtb	r2, r2
   142e0:	and	r3, r7, #31
   142e4:	ldr	r2, [r1, r2, lsl #2]
   142e8:	lsr	r3, r2, r3
   142ec:	tst	r3, #1
   142f0:	bne	14300 <__assert_fail@plt+0x2d9c>
   142f4:	ldr	r3, [sp, #64]	; 0x40
   142f8:	cmp	r3, #0
   142fc:	beq	14398 <__assert_fail@plt+0x2e34>
   14300:	cmp	r6, #0
   14304:	bne	13e34 <__assert_fail@plt+0x28d0>
   14308:	ldr	r3, [sp, #48]	; 0x30
   1430c:	eor	r3, r3, #1
   14310:	cmp	sl, #2
   14314:	movne	r3, #0
   14318:	andeq	r3, r3, #1
   1431c:	cmp	r3, #0
   14320:	beq	14358 <__assert_fail@plt+0x2df4>
   14324:	cmp	r9, r4
   14328:	movhi	r2, #39	; 0x27
   1432c:	strbhi	r2, [r8, r4]
   14330:	add	r2, r4, #1
   14334:	cmp	r9, r2
   14338:	movhi	r1, #36	; 0x24
   1433c:	strbhi	r1, [r8, r2]
   14340:	add	r2, r4, #2
   14344:	cmp	r9, r2
   14348:	add	r4, r4, #3
   1434c:	movhi	r1, #39	; 0x27
   14350:	strbhi	r1, [r8, r2]
   14354:	str	r3, [sp, #48]	; 0x30
   14358:	cmp	r9, r4
   1435c:	movhi	r3, #92	; 0x5c
   14360:	strbhi	r3, [r8, r4]
   14364:	ldr	fp, [sp, #52]	; 0x34
   14368:	add	r4, r4, #1
   1436c:	b	14398 <__assert_fail@plt+0x2e34>
   14370:	mov	r3, #116	; 0x74
   14374:	b	13f4c <__assert_fail@plt+0x29e8>
   14378:	mov	r3, #118	; 0x76
   1437c:	b	140dc <__assert_fail@plt+0x2b78>
   14380:	cmp	sl, #2
   14384:	bne	143f4 <__assert_fail@plt+0x2e90>
   14388:	cmp	r6, #0
   1438c:	bne	13e34 <__assert_fail@plt+0x28d0>
   14390:	mov	r5, r6
   14394:	mov	fp, r6
   14398:	ldr	r3, [sp, #48]	; 0x30
   1439c:	eor	fp, fp, #1
   143a0:	and	fp, fp, r3
   143a4:	tst	fp, #255	; 0xff
   143a8:	beq	143d4 <__assert_fail@plt+0x2e70>
   143ac:	cmp	r9, r4
   143b0:	movhi	r3, #39	; 0x27
   143b4:	strbhi	r3, [r8, r4]
   143b8:	add	r3, r4, #1
   143bc:	cmp	r9, r3
   143c0:	movhi	r2, #39	; 0x27
   143c4:	add	r4, r4, #2
   143c8:	strbhi	r2, [r8, r3]
   143cc:	mov	r3, #0
   143d0:	str	r3, [sp, #48]	; 0x30
   143d4:	cmp	r9, r4
   143d8:	strbhi	r7, [r8, r4]
   143dc:	ldr	r3, [sp, #72]	; 0x48
   143e0:	cmp	r5, #0
   143e4:	moveq	r3, #0
   143e8:	add	r4, r4, #1
   143ec:	str	r3, [sp, #72]	; 0x48
   143f0:	b	141d8 <__assert_fail@plt+0x2c74>
   143f4:	ldr	r3, [sp, #24]
   143f8:	and	r3, r3, r6
   143fc:	tst	r5, r3
   14400:	moveq	r3, r7
   14404:	beq	13f4c <__assert_fail@plt+0x29e8>
   14408:	mov	fp, #0
   1440c:	mov	r5, fp
   14410:	b	14398 <__assert_fail@plt+0x2e34>
   14414:	mov	r3, #110	; 0x6e
   14418:	b	13f4c <__assert_fail@plt+0x29e8>
   1441c:	mov	r3, #97	; 0x61
   14420:	b	140dc <__assert_fail@plt+0x2b78>
   14424:	mov	r3, #102	; 0x66
   14428:	b	140dc <__assert_fail@plt+0x2b78>
   1442c:	ldr	r3, [sp, #36]	; 0x24
   14430:	cmn	r3, #1
   14434:	bne	14454 <__assert_fail@plt+0x2ef0>
   14438:	ldr	r3, [sp, #44]	; 0x2c
   1443c:	ldrb	r3, [r3, #1]
   14440:	adds	r3, r3, #0
   14444:	movne	r3, #1
   14448:	cmp	r3, #0
   1444c:	bne	141ec <__assert_fail@plt+0x2c88>
   14450:	b	140b0 <__assert_fail@plt+0x2b4c>
   14454:	ldr	r3, [sp, #36]	; 0x24
   14458:	subs	r3, r3, #1
   1445c:	b	14444 <__assert_fail@plt+0x2ee0>
   14460:	mov	r3, #0
   14464:	str	r3, [sp, #96]	; 0x60
   14468:	str	r3, [sp, #100]	; 0x64
   1446c:	ldr	r3, [sp, #36]	; 0x24
   14470:	cmn	r3, #1
   14474:	bne	14484 <__assert_fail@plt+0x2f20>
   14478:	ldr	r0, [sp, #44]	; 0x2c
   1447c:	bl	113fc <strlen@plt>
   14480:	str	r0, [sp, #36]	; 0x24
   14484:	ldr	r5, [sp, #52]	; 0x34
   14488:	mov	r3, #0
   1448c:	str	r3, [sp, #56]	; 0x38
   14490:	ldr	r3, [sp, #28]
   14494:	ldr	r2, [sp, #56]	; 0x38
   14498:	ldr	r1, [sp, #36]	; 0x24
   1449c:	add	r2, r3, r2
   144a0:	ldr	r3, [sp, #44]	; 0x2c
   144a4:	add	r0, sp, #92	; 0x5c
   144a8:	add	fp, r3, r2
   144ac:	sub	r2, r1, r2
   144b0:	add	r3, sp, #96	; 0x60
   144b4:	mov	r1, fp
   144b8:	bl	217d8 <__assert_fail@plt+0x10274>
   144bc:	subs	r2, r0, #0
   144c0:	beq	14500 <__assert_fail@plt+0x2f9c>
   144c4:	cmn	r2, #1
   144c8:	beq	146d8 <__assert_fail@plt+0x3174>
   144cc:	cmn	r2, #2
   144d0:	bne	14648 <__assert_fail@plt+0x30e4>
   144d4:	ldr	r2, [sp, #56]	; 0x38
   144d8:	ldr	r3, [sp, #28]
   144dc:	add	r3, r3, r2
   144e0:	ldr	r2, [sp, #36]	; 0x24
   144e4:	cmp	r2, r3
   144e8:	bls	146d8 <__assert_fail@plt+0x3174>
   144ec:	ldr	r3, [sp, #80]	; 0x50
   144f0:	ldr	r2, [sp, #56]	; 0x38
   144f4:	ldrb	r5, [r3, r2]
   144f8:	cmp	r5, #0
   144fc:	bne	14638 <__assert_fail@plt+0x30d4>
   14500:	ldr	r3, [sp, #56]	; 0x38
   14504:	cmp	r3, #1
   14508:	bls	13f10 <__assert_fail@plt+0x29ac>
   1450c:	ldr	r2, [sp, #56]	; 0x38
   14510:	ldr	r3, [sp, #28]
   14514:	mov	fp, #0
   14518:	add	r3, r3, r2
   1451c:	ldr	r2, [sp, #24]
   14520:	str	r3, [sp, #52]	; 0x34
   14524:	eor	r3, r5, #1
   14528:	and	r3, r3, r2
   1452c:	mov	ip, #92	; 0x5c
   14530:	uxtb	r3, r3
   14534:	mov	r2, #39	; 0x27
   14538:	cmp	r3, #0
   1453c:	beq	146e0 <__assert_fail@plt+0x317c>
   14540:	cmp	r6, #0
   14544:	bne	13e30 <__assert_fail@plt+0x28cc>
   14548:	ldr	r1, [sp, #48]	; 0x30
   1454c:	eor	r1, r1, #1
   14550:	cmp	sl, #2
   14554:	movne	r1, #0
   14558:	andeq	r1, r1, #1
   1455c:	cmp	r1, #0
   14560:	beq	14590 <__assert_fail@plt+0x302c>
   14564:	add	r0, r4, #1
   14568:	cmp	r9, r4
   1456c:	strbhi	r2, [r8, r4]
   14570:	cmp	r9, r0
   14574:	movhi	lr, #36	; 0x24
   14578:	strbhi	lr, [r8, r0]
   1457c:	add	r0, r4, #2
   14580:	add	r4, r4, #3
   14584:	cmp	r9, r0
   14588:	strbhi	r2, [r8, r0]
   1458c:	str	r1, [sp, #48]	; 0x30
   14590:	add	r0, r4, #1
   14594:	cmp	r9, r4
   14598:	strbhi	ip, [r8, r4]
   1459c:	cmp	r9, r0
   145a0:	lsrhi	r1, r7, #6
   145a4:	addhi	r1, r1, #48	; 0x30
   145a8:	strbhi	r1, [r8, r0]
   145ac:	add	r0, r4, #2
   145b0:	cmp	r9, r0
   145b4:	lsrhi	r1, r7, #3
   145b8:	and	r7, r7, #7
   145bc:	andhi	r1, r1, #7
   145c0:	add	r4, r4, #3
   145c4:	add	r7, r7, #48	; 0x30
   145c8:	mov	fp, r3
   145cc:	addhi	r1, r1, #48	; 0x30
   145d0:	strbhi	r1, [r8, r0]
   145d4:	ldr	r1, [sp, #28]
   145d8:	ldr	r0, [sp, #52]	; 0x34
   145dc:	add	r1, r1, #1
   145e0:	cmp	r0, r1
   145e4:	bls	14398 <__assert_fail@plt+0x2e34>
   145e8:	ldr	lr, [sp, #48]	; 0x30
   145ec:	eor	r0, fp, #1
   145f0:	and	r0, r0, lr
   145f4:	tst	r0, #255	; 0xff
   145f8:	beq	1461c <__assert_fail@plt+0x30b8>
   145fc:	add	r0, r4, #1
   14600:	cmp	r9, r4
   14604:	strbhi	r2, [r8, r4]
   14608:	cmp	r9, r0
   1460c:	add	r4, r4, #2
   14610:	strbhi	r2, [r8, r0]
   14614:	mov	r0, #0
   14618:	str	r0, [sp, #48]	; 0x30
   1461c:	ldr	r0, [sp, #44]	; 0x2c
   14620:	cmp	r9, r4
   14624:	strbhi	r7, [r8, r4]
   14628:	str	r1, [sp, #28]
   1462c:	add	r4, r4, #1
   14630:	ldrb	r7, [r0, r1]
   14634:	b	14538 <__assert_fail@plt+0x2fd4>
   14638:	ldr	r3, [sp, #56]	; 0x38
   1463c:	add	r3, r3, #1
   14640:	str	r3, [sp, #56]	; 0x38
   14644:	b	144d4 <__assert_fail@plt+0x2f70>
   14648:	cmp	sl, #2
   1464c:	movne	r3, #0
   14650:	andeq	r3, r6, #1
   14654:	cmp	r3, #0
   14658:	movne	r1, #1
   1465c:	bne	146b8 <__assert_fail@plt+0x3154>
   14660:	ldr	r0, [sp, #92]	; 0x5c
   14664:	str	r2, [sp, #84]	; 0x54
   14668:	bl	11324 <iswprint@plt>
   1466c:	ldr	r3, [sp, #56]	; 0x38
   14670:	ldr	r2, [sp, #84]	; 0x54
   14674:	add	r3, r3, r2
   14678:	str	r3, [sp, #56]	; 0x38
   1467c:	cmp	r0, #0
   14680:	add	r0, sp, #96	; 0x60
   14684:	moveq	r5, #0
   14688:	bl	11294 <mbsinit@plt>
   1468c:	cmp	r0, #0
   14690:	beq	14490 <__assert_fail@plt+0x2f2c>
   14694:	b	14500 <__assert_fail@plt+0x2f9c>
   14698:	ldrb	r3, [fp, r1]
   1469c:	cmp	r3, #94	; 0x5e
   146a0:	beq	13f60 <__assert_fail@plt+0x29fc>
   146a4:	bhi	146c4 <__assert_fail@plt+0x3160>
   146a8:	sub	r3, r3, #91	; 0x5b
   146ac:	cmp	r3, #1
   146b0:	bls	13f60 <__assert_fail@plt+0x29fc>
   146b4:	add	r1, r1, #1
   146b8:	cmp	r1, r2
   146bc:	bne	14698 <__assert_fail@plt+0x3134>
   146c0:	b	14660 <__assert_fail@plt+0x30fc>
   146c4:	cmp	r3, #96	; 0x60
   146c8:	beq	13f60 <__assert_fail@plt+0x29fc>
   146cc:	cmp	r3, #124	; 0x7c
   146d0:	bne	146b4 <__assert_fail@plt+0x3150>
   146d4:	b	13f60 <__assert_fail@plt+0x29fc>
   146d8:	mov	r5, #0
   146dc:	b	14500 <__assert_fail@plt+0x2f9c>
   146e0:	ldr	r1, [sp, #64]	; 0x40
   146e4:	cmp	r1, #0
   146e8:	beq	145d4 <__assert_fail@plt+0x3070>
   146ec:	cmp	r9, r4
   146f0:	strbhi	ip, [r8, r4]
   146f4:	str	r3, [sp, #64]	; 0x40
   146f8:	add	r4, r4, #1
   146fc:	b	145d4 <__assert_fail@plt+0x3070>
   14700:	mov	r5, fp
   14704:	ldr	fp, [sp, #24]
   14708:	mov	r7, #48	; 0x30
   1470c:	b	142a8 <__assert_fail@plt+0x2d44>
   14710:	mov	r5, #0
   14714:	mov	fp, r5
   14718:	b	142a8 <__assert_fail@plt+0x2d44>
   1471c:	ldr	r3, [sp, #36]	; 0x24
   14720:	ldr	r2, [sp, #28]
   14724:	subs	r3, r3, r2
   14728:	movne	r3, #1
   1472c:	b	13ba4 <__assert_fail@plt+0x2640>
   14730:	ldr	r3, [sp, #60]	; 0x3c
   14734:	clz	r7, r9
   14738:	cmp	r3, #0
   1473c:	lsr	r7, r7, #5
   14740:	moveq	r7, #0
   14744:	cmp	r7, #0
   14748:	mov	r5, r3
   1474c:	bne	13b04 <__assert_fail@plt+0x25a0>
   14750:	ldr	r3, [sp, #68]	; 0x44
   14754:	ldr	r2, [sp, #40]	; 0x28
   14758:	cmp	r2, #0
   1475c:	moveq	r3, #0
   14760:	andne	r3, r3, #1
   14764:	cmp	r3, #0
   14768:	movne	r3, r2
   1476c:	subne	r2, r3, #1
   14770:	bne	147a0 <__assert_fail@plt+0x323c>
   14774:	cmp	r9, r4
   14778:	movhi	r3, #0
   1477c:	strbhi	r3, [r8, r4]
   14780:	mov	r0, r4
   14784:	add	sp, sp, #108	; 0x6c
   14788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1478c:	mov	r3, r2
   14790:	b	14754 <__assert_fail@plt+0x31f0>
   14794:	cmp	r9, r4
   14798:	strbhi	r3, [r8, r4]
   1479c:	add	r4, r4, #1
   147a0:	ldrb	r3, [r2, #1]!
   147a4:	cmp	r3, #0
   147a8:	bne	14794 <__assert_fail@plt+0x3230>
   147ac:	b	14774 <__assert_fail@plt+0x3210>
   147b0:	ldr	r3, [pc, #32]	; 147d8 <__assert_fail@plt+0x3274>
   147b4:	mov	r6, #1
   147b8:	str	r6, [sp, #24]
   147bc:	str	r6, [sp, #32]
   147c0:	str	r3, [sp, #40]	; 0x28
   147c4:	mov	r4, #0
   147c8:	mov	sl, #5
   147cc:	b	13b74 <__assert_fail@plt+0x2610>
   147d0:	mov	r6, #1
   147d4:	b	13d68 <__assert_fail@plt+0x2804>
   147d8:	andeq	r2, r2, r3, lsl #26
   147dc:	andeq	r2, r2, r5, lsl #26
   147e0:	andeq	r2, r2, r0, asr fp
   147e4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   147e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ec:	sub	sp, sp, #52	; 0x34
   147f0:	mov	r6, r0
   147f4:	mov	r5, r3
   147f8:	mov	r8, r1
   147fc:	mov	r9, r2
   14800:	bl	11414 <__errno_location@plt>
   14804:	ldr	r7, [pc, #380]	; 14988 <__assert_fail@plt+0x3424>
   14808:	cmn	r6, #-2147483647	; 0x80000001
   1480c:	ldr	r4, [r7]
   14810:	ldr	r3, [r0]
   14814:	str	r0, [sp, #24]
   14818:	str	r3, [sp, #32]
   1481c:	movne	r3, #0
   14820:	moveq	r3, #1
   14824:	orrs	r3, r3, r6, lsr #31
   14828:	beq	14830 <__assert_fail@plt+0x32cc>
   1482c:	bl	11540 <abort@plt>
   14830:	ldr	r2, [r7, #4]
   14834:	cmp	r6, r2
   14838:	blt	148a8 <__assert_fail@plt+0x3344>
   1483c:	add	r1, sp, #48	; 0x30
   14840:	add	sl, r7, #8
   14844:	str	r2, [r1, #-4]!
   14848:	cmp	r4, sl
   1484c:	mov	r3, #8
   14850:	sub	r2, r6, r2
   14854:	movne	r0, r4
   14858:	str	r3, [sp]
   1485c:	add	r2, r2, #1
   14860:	mvn	r3, #-2147483648	; 0x80000000
   14864:	moveq	r0, #0
   14868:	bl	20708 <__assert_fail@plt+0xf1a4>
   1486c:	cmp	r4, sl
   14870:	ldr	r2, [sp, #44]	; 0x2c
   14874:	mov	fp, r0
   14878:	str	r0, [r7]
   1487c:	ldmeq	r4, {r0, r1}
   14880:	mov	r4, fp
   14884:	stmeq	fp, {r0, r1}
   14888:	ldr	r0, [r7, #4]
   1488c:	mov	r1, #0
   14890:	sub	r2, r2, r0
   14894:	add	r0, fp, r0, lsl #3
   14898:	lsl	r2, r2, #3
   1489c:	bl	11444 <memset@plt>
   148a0:	ldr	r3, [sp, #44]	; 0x2c
   148a4:	str	r3, [r7, #4]
   148a8:	ldr	r3, [r5, #4]
   148ac:	add	sl, r4, r6, lsl #3
   148b0:	orr	r3, r3, #1
   148b4:	str	r3, [sp, #28]
   148b8:	add	r3, r5, #8
   148bc:	str	r3, [sp, #36]	; 0x24
   148c0:	ldr	r3, [r5, #44]	; 0x2c
   148c4:	ldr	fp, [r4, r6, lsl #3]
   148c8:	ldr	r7, [sl, #4]
   148cc:	str	r3, [sp, #16]
   148d0:	ldr	r3, [r5, #40]	; 0x28
   148d4:	mov	r2, r8
   148d8:	str	r3, [sp, #12]
   148dc:	add	r3, r5, #8
   148e0:	str	r3, [sp, #8]
   148e4:	ldr	r3, [sp, #28]
   148e8:	mov	r1, fp
   148ec:	str	r3, [sp, #4]
   148f0:	ldr	r3, [r5]
   148f4:	mov	r0, r7
   148f8:	str	r3, [sp]
   148fc:	mov	r3, r9
   14900:	bl	13ab4 <__assert_fail@plt+0x2550>
   14904:	cmp	fp, r0
   14908:	bhi	14970 <__assert_fail@plt+0x340c>
   1490c:	ldr	r3, [pc, #120]	; 1498c <__assert_fail@plt+0x3428>
   14910:	add	fp, r0, #1
   14914:	cmp	r7, r3
   14918:	str	fp, [r4, r6, lsl #3]
   1491c:	beq	14928 <__assert_fail@plt+0x33c4>
   14920:	mov	r0, r7
   14924:	bl	1370c <__assert_fail@plt+0x21a8>
   14928:	mov	r0, fp
   1492c:	bl	205c0 <__assert_fail@plt+0xf05c>
   14930:	ldr	r3, [r5, #44]	; 0x2c
   14934:	mov	r2, r8
   14938:	mov	r1, fp
   1493c:	str	r0, [sl, #4]
   14940:	str	r3, [sp, #16]
   14944:	ldr	r3, [r5, #40]	; 0x28
   14948:	mov	r7, r0
   1494c:	str	r3, [sp, #12]
   14950:	add	r3, r5, #8
   14954:	str	r3, [sp, #8]
   14958:	ldr	r3, [sp, #28]
   1495c:	str	r3, [sp, #4]
   14960:	ldr	r3, [r5]
   14964:	str	r3, [sp]
   14968:	mov	r3, r9
   1496c:	bl	13ab4 <__assert_fail@plt+0x2550>
   14970:	ldr	r3, [sp, #24]
   14974:	ldr	r2, [sp, #32]
   14978:	mov	r0, r7
   1497c:	str	r2, [r3]
   14980:	add	sp, sp, #52	; 0x34
   14984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14988:	andeq	r4, r3, ip, ror #2
   1498c:	andeq	r4, r3, r4, asr #5
   14990:	push	{r4, r5, r6, lr}
   14994:	mov	r5, r0
   14998:	bl	11414 <__errno_location@plt>
   1499c:	cmp	r5, #0
   149a0:	mov	r1, #48	; 0x30
   149a4:	ldr	r6, [r0]
   149a8:	mov	r4, r0
   149ac:	ldr	r0, [pc, #12]	; 149c0 <__assert_fail@plt+0x345c>
   149b0:	movne	r0, r5
   149b4:	bl	2099c <__assert_fail@plt+0xf438>
   149b8:	str	r6, [r4]
   149bc:	pop	{r4, r5, r6, pc}
   149c0:	andeq	r4, r3, r4, asr #7
   149c4:	ldr	r3, [pc, #12]	; 149d8 <__assert_fail@plt+0x3474>
   149c8:	cmp	r0, #0
   149cc:	moveq	r0, r3
   149d0:	ldr	r0, [r0]
   149d4:	bx	lr
   149d8:	andeq	r4, r3, r4, asr #7
   149dc:	ldr	r3, [pc, #12]	; 149f0 <__assert_fail@plt+0x348c>
   149e0:	cmp	r0, #0
   149e4:	moveq	r0, r3
   149e8:	str	r1, [r0]
   149ec:	bx	lr
   149f0:	andeq	r4, r3, r4, asr #7
   149f4:	ldr	r3, [pc, #52]	; 14a30 <__assert_fail@plt+0x34cc>
   149f8:	cmp	r0, #0
   149fc:	moveq	r0, r3
   14a00:	add	r3, r0, #8
   14a04:	push	{lr}		; (str lr, [sp, #-4]!)
   14a08:	lsr	lr, r1, #5
   14a0c:	and	r1, r1, #31
   14a10:	ldr	ip, [r3, lr, lsl #2]
   14a14:	lsr	r0, ip, r1
   14a18:	eor	r2, r2, r0
   14a1c:	and	r2, r2, #1
   14a20:	and	r0, r0, #1
   14a24:	eor	r1, ip, r2, lsl r1
   14a28:	str	r1, [r3, lr, lsl #2]
   14a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a30:	andeq	r4, r3, r4, asr #7
   14a34:	ldr	r3, [pc, #16]	; 14a4c <__assert_fail@plt+0x34e8>
   14a38:	cmp	r0, #0
   14a3c:	movne	r3, r0
   14a40:	ldr	r0, [r3, #4]
   14a44:	str	r1, [r3, #4]
   14a48:	bx	lr
   14a4c:	andeq	r4, r3, r4, asr #7
   14a50:	ldr	r3, [pc, #44]	; 14a84 <__assert_fail@plt+0x3520>
   14a54:	cmp	r0, #0
   14a58:	moveq	r0, r3
   14a5c:	mov	r3, #10
   14a60:	cmp	r2, #0
   14a64:	cmpne	r1, #0
   14a68:	str	r3, [r0]
   14a6c:	bne	14a78 <__assert_fail@plt+0x3514>
   14a70:	push	{r4, lr}
   14a74:	bl	11540 <abort@plt>
   14a78:	str	r1, [r0, #40]	; 0x28
   14a7c:	str	r2, [r0, #44]	; 0x2c
   14a80:	bx	lr
   14a84:	andeq	r4, r3, r4, asr #7
   14a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a8c:	sub	sp, sp, #24
   14a90:	mov	sl, r3
   14a94:	ldr	r4, [sp, #56]	; 0x38
   14a98:	ldr	r3, [pc, #100]	; 14b04 <__assert_fail@plt+0x35a0>
   14a9c:	cmp	r4, #0
   14aa0:	moveq	r4, r3
   14aa4:	mov	r7, r0
   14aa8:	mov	r8, r1
   14aac:	mov	r9, r2
   14ab0:	bl	11414 <__errno_location@plt>
   14ab4:	ldr	r3, [r4, #44]	; 0x2c
   14ab8:	mov	r2, r9
   14abc:	mov	r1, r8
   14ac0:	ldr	r6, [r0]
   14ac4:	str	r3, [sp, #16]
   14ac8:	ldr	r3, [r4, #40]	; 0x28
   14acc:	mov	r5, r0
   14ad0:	str	r3, [sp, #12]
   14ad4:	add	r3, r4, #8
   14ad8:	str	r3, [sp, #8]
   14adc:	ldr	r3, [r4, #4]
   14ae0:	mov	r0, r7
   14ae4:	str	r3, [sp, #4]
   14ae8:	ldr	r3, [r4]
   14aec:	str	r3, [sp]
   14af0:	mov	r3, sl
   14af4:	bl	13ab4 <__assert_fail@plt+0x2550>
   14af8:	str	r6, [r5]
   14afc:	add	sp, sp, #24
   14b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b04:	andeq	r4, r3, r4, asr #7
   14b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b0c:	cmp	r3, #0
   14b10:	sub	sp, sp, #44	; 0x2c
   14b14:	ldr	r4, [pc, #188]	; 14bd8 <__assert_fail@plt+0x3674>
   14b18:	mov	r6, r2
   14b1c:	movne	r4, r3
   14b20:	mov	sl, r1
   14b24:	mov	r9, r0
   14b28:	bl	11414 <__errno_location@plt>
   14b2c:	ldr	r5, [r4, #4]
   14b30:	add	fp, r4, #8
   14b34:	cmp	r6, #0
   14b38:	orreq	r5, r5, #1
   14b3c:	mov	r1, #0
   14b40:	mov	r2, r9
   14b44:	ldr	r3, [r0]
   14b48:	mov	r8, r0
   14b4c:	str	r3, [sp, #28]
   14b50:	ldr	r3, [r4, #44]	; 0x2c
   14b54:	mov	r0, r1
   14b58:	str	r3, [sp, #16]
   14b5c:	ldr	r3, [r4, #40]	; 0x28
   14b60:	stmib	sp, {r5, fp}
   14b64:	str	r3, [sp, #12]
   14b68:	ldr	r3, [r4]
   14b6c:	str	r3, [sp]
   14b70:	mov	r3, sl
   14b74:	bl	13ab4 <__assert_fail@plt+0x2550>
   14b78:	add	r1, r0, #1
   14b7c:	mov	r7, r0
   14b80:	mov	r0, r1
   14b84:	str	r1, [sp, #36]	; 0x24
   14b88:	bl	205c0 <__assert_fail@plt+0xf05c>
   14b8c:	ldr	r3, [r4, #44]	; 0x2c
   14b90:	mov	r2, r9
   14b94:	str	r3, [sp, #16]
   14b98:	ldr	r3, [r4, #40]	; 0x28
   14b9c:	stmib	sp, {r5, fp}
   14ba0:	str	r3, [sp, #12]
   14ba4:	ldr	r3, [r4]
   14ba8:	ldr	r1, [sp, #36]	; 0x24
   14bac:	str	r3, [sp]
   14bb0:	mov	r3, sl
   14bb4:	str	r0, [sp, #32]
   14bb8:	bl	13ab4 <__assert_fail@plt+0x2550>
   14bbc:	ldr	r3, [sp, #28]
   14bc0:	cmp	r6, #0
   14bc4:	str	r3, [r8]
   14bc8:	ldr	r0, [sp, #32]
   14bcc:	strne	r7, [r6]
   14bd0:	add	sp, sp, #44	; 0x2c
   14bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bd8:	andeq	r4, r3, r4, asr #7
   14bdc:	mov	r3, r2
   14be0:	mov	r2, #0
   14be4:	b	14b08 <__assert_fail@plt+0x35a4>
   14be8:	push	{r4, r5, r6, r7, r8, lr}
   14bec:	mov	r6, #1
   14bf0:	ldr	r4, [pc, #104]	; 14c60 <__assert_fail@plt+0x36fc>
   14bf4:	ldr	r5, [r4]
   14bf8:	add	r7, r5, #12
   14bfc:	ldr	r3, [r4, #4]
   14c00:	add	r7, r7, #8
   14c04:	cmp	r6, r3
   14c08:	blt	14c50 <__assert_fail@plt+0x36ec>
   14c0c:	ldr	r0, [r5, #4]
   14c10:	ldr	r6, [pc, #76]	; 14c64 <__assert_fail@plt+0x3700>
   14c14:	cmp	r0, r6
   14c18:	beq	14c2c <__assert_fail@plt+0x36c8>
   14c1c:	bl	1370c <__assert_fail@plt+0x21a8>
   14c20:	mov	r3, #256	; 0x100
   14c24:	str	r3, [r4, #8]
   14c28:	str	r6, [r4, #12]
   14c2c:	ldr	r6, [pc, #52]	; 14c68 <__assert_fail@plt+0x3704>
   14c30:	cmp	r5, r6
   14c34:	beq	14c44 <__assert_fail@plt+0x36e0>
   14c38:	mov	r0, r5
   14c3c:	bl	1370c <__assert_fail@plt+0x21a8>
   14c40:	str	r6, [r4]
   14c44:	mov	r3, #1
   14c48:	str	r3, [r4, #4]
   14c4c:	pop	{r4, r5, r6, r7, r8, pc}
   14c50:	ldr	r0, [r7, #-8]
   14c54:	bl	1370c <__assert_fail@plt+0x21a8>
   14c58:	add	r6, r6, #1
   14c5c:	b	14bfc <__assert_fail@plt+0x3698>
   14c60:	andeq	r4, r3, ip, ror #2
   14c64:	andeq	r4, r3, r4, asr #5
   14c68:	andeq	r4, r3, r4, ror r1
   14c6c:	ldr	r3, [pc, #4]	; 14c78 <__assert_fail@plt+0x3714>
   14c70:	mvn	r2, #0
   14c74:	b	147e8 <__assert_fail@plt+0x3284>
   14c78:	andeq	r4, r3, r4, asr #7
   14c7c:	ldr	r3, [pc]	; 14c84 <__assert_fail@plt+0x3720>
   14c80:	b	147e8 <__assert_fail@plt+0x3284>
   14c84:	andeq	r4, r3, r4, asr #7
   14c88:	mov	r1, r0
   14c8c:	mov	r0, #0
   14c90:	b	14c6c <__assert_fail@plt+0x3708>
   14c94:	mov	r2, r1
   14c98:	mov	r1, r0
   14c9c:	mov	r0, #0
   14ca0:	b	14c7c <__assert_fail@plt+0x3718>
   14ca4:	push	{r4, r5, lr}
   14ca8:	sub	sp, sp, #52	; 0x34
   14cac:	mov	r5, r2
   14cb0:	mov	r4, r0
   14cb4:	mov	r0, sp
   14cb8:	bl	13970 <__assert_fail@plt+0x240c>
   14cbc:	mov	r3, sp
   14cc0:	mvn	r2, #0
   14cc4:	mov	r1, r5
   14cc8:	mov	r0, r4
   14ccc:	bl	147e8 <__assert_fail@plt+0x3284>
   14cd0:	add	sp, sp, #52	; 0x34
   14cd4:	pop	{r4, r5, pc}
   14cd8:	push	{r4, r5, r6, lr}
   14cdc:	sub	sp, sp, #48	; 0x30
   14ce0:	mov	r5, r2
   14ce4:	mov	r6, r3
   14ce8:	mov	r4, r0
   14cec:	mov	r0, sp
   14cf0:	bl	13970 <__assert_fail@plt+0x240c>
   14cf4:	mov	r3, sp
   14cf8:	mov	r2, r6
   14cfc:	mov	r1, r5
   14d00:	mov	r0, r4
   14d04:	bl	147e8 <__assert_fail@plt+0x3284>
   14d08:	add	sp, sp, #48	; 0x30
   14d0c:	pop	{r4, r5, r6, pc}
   14d10:	mov	r2, r1
   14d14:	mov	r1, r0
   14d18:	mov	r0, #0
   14d1c:	b	14ca4 <__assert_fail@plt+0x3740>
   14d20:	mov	r3, r2
   14d24:	mov	r2, r1
   14d28:	mov	r1, r0
   14d2c:	mov	r0, #0
   14d30:	b	14cd8 <__assert_fail@plt+0x3774>
   14d34:	push	{r4, r5, r6, lr}
   14d38:	mov	r4, r0
   14d3c:	ldr	lr, [pc, #80]	; 14d94 <__assert_fail@plt+0x3830>
   14d40:	mov	r5, r1
   14d44:	mov	r6, r2
   14d48:	ldm	lr!, {r0, r1, r2, r3}
   14d4c:	sub	sp, sp, #48	; 0x30
   14d50:	mov	ip, sp
   14d54:	stmia	ip!, {r0, r1, r2, r3}
   14d58:	ldm	lr!, {r0, r1, r2, r3}
   14d5c:	stmia	ip!, {r0, r1, r2, r3}
   14d60:	ldm	lr, {r0, r1, r2, r3}
   14d64:	stm	ip, {r0, r1, r2, r3}
   14d68:	mov	r1, r6
   14d6c:	mov	r2, #1
   14d70:	mov	r0, sp
   14d74:	bl	149f4 <__assert_fail@plt+0x3490>
   14d78:	mov	r3, sp
   14d7c:	mov	r2, r5
   14d80:	mov	r1, r4
   14d84:	mov	r0, #0
   14d88:	bl	147e8 <__assert_fail@plt+0x3284>
   14d8c:	add	sp, sp, #48	; 0x30
   14d90:	pop	{r4, r5, r6, pc}
   14d94:	andeq	r4, r3, r4, asr #7
   14d98:	mov	r2, r1
   14d9c:	mvn	r1, #0
   14da0:	b	14d34 <__assert_fail@plt+0x37d0>
   14da4:	mov	r1, #58	; 0x3a
   14da8:	b	14d98 <__assert_fail@plt+0x3834>
   14dac:	mov	r2, #58	; 0x3a
   14db0:	b	14d34 <__assert_fail@plt+0x37d0>
   14db4:	push	{r4, r5, lr}
   14db8:	sub	sp, sp, #100	; 0x64
   14dbc:	mov	r4, r0
   14dc0:	mov	r0, sp
   14dc4:	mov	r5, r2
   14dc8:	bl	13970 <__assert_fail@plt+0x240c>
   14dcc:	mov	ip, sp
   14dd0:	add	lr, sp, #48	; 0x30
   14dd4:	ldm	ip!, {r0, r1, r2, r3}
   14dd8:	stmia	lr!, {r0, r1, r2, r3}
   14ddc:	ldm	ip!, {r0, r1, r2, r3}
   14de0:	stmia	lr!, {r0, r1, r2, r3}
   14de4:	ldm	ip, {r0, r1, r2, r3}
   14de8:	stm	lr, {r0, r1, r2, r3}
   14dec:	mov	r2, #1
   14df0:	mov	r1, #58	; 0x3a
   14df4:	add	r0, sp, #48	; 0x30
   14df8:	bl	149f4 <__assert_fail@plt+0x3490>
   14dfc:	add	r3, sp, #48	; 0x30
   14e00:	mvn	r2, #0
   14e04:	mov	r1, r5
   14e08:	mov	r0, r4
   14e0c:	bl	147e8 <__assert_fail@plt+0x3284>
   14e10:	add	sp, sp, #100	; 0x64
   14e14:	pop	{r4, r5, pc}
   14e18:	push	{r4, r5, r6, r7, lr}
   14e1c:	mov	r4, r0
   14e20:	ldr	lr, [pc, #84]	; 14e7c <__assert_fail@plt+0x3918>
   14e24:	mov	r6, r1
   14e28:	mov	r7, r2
   14e2c:	mov	r5, r3
   14e30:	ldm	lr!, {r0, r1, r2, r3}
   14e34:	sub	sp, sp, #52	; 0x34
   14e38:	mov	ip, sp
   14e3c:	stmia	ip!, {r0, r1, r2, r3}
   14e40:	ldm	lr!, {r0, r1, r2, r3}
   14e44:	stmia	ip!, {r0, r1, r2, r3}
   14e48:	ldm	lr, {r0, r1, r2, r3}
   14e4c:	stm	ip, {r0, r1, r2, r3}
   14e50:	mov	r2, r7
   14e54:	mov	r1, r6
   14e58:	mov	r0, sp
   14e5c:	bl	14a50 <__assert_fail@plt+0x34ec>
   14e60:	mov	r3, sp
   14e64:	ldr	r2, [sp, #72]	; 0x48
   14e68:	mov	r1, r5
   14e6c:	mov	r0, r4
   14e70:	bl	147e8 <__assert_fail@plt+0x3284>
   14e74:	add	sp, sp, #52	; 0x34
   14e78:	pop	{r4, r5, r6, r7, pc}
   14e7c:	andeq	r4, r3, r4, asr #7
   14e80:	mvn	ip, #0
   14e84:	push	{r0, r1, r2, lr}
   14e88:	str	ip, [sp]
   14e8c:	bl	14e18 <__assert_fail@plt+0x38b4>
   14e90:	add	sp, sp, #12
   14e94:	pop	{pc}		; (ldr pc, [sp], #4)
   14e98:	mov	r3, r2
   14e9c:	mov	r2, r1
   14ea0:	mov	r1, r0
   14ea4:	mov	r0, #0
   14ea8:	b	14e80 <__assert_fail@plt+0x391c>
   14eac:	push	{r0, r1, r2, lr}
   14eb0:	str	r3, [sp]
   14eb4:	mov	r3, r2
   14eb8:	mov	r2, r1
   14ebc:	mov	r1, r0
   14ec0:	mov	r0, #0
   14ec4:	bl	14e18 <__assert_fail@plt+0x38b4>
   14ec8:	add	sp, sp, #12
   14ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed0:	ldr	r3, [pc]	; 14ed8 <__assert_fail@plt+0x3974>
   14ed4:	b	147e8 <__assert_fail@plt+0x3284>
   14ed8:	andeq	r4, r3, ip, ror r1
   14edc:	mov	r2, r1
   14ee0:	mov	r1, r0
   14ee4:	mov	r0, #0
   14ee8:	b	14ed0 <__assert_fail@plt+0x396c>
   14eec:	mvn	r2, #0
   14ef0:	b	14ed0 <__assert_fail@plt+0x396c>
   14ef4:	mov	r1, r0
   14ef8:	mov	r0, #0
   14efc:	b	14eec <__assert_fail@plt+0x3988>
   14f00:	cmp	r1, #0
   14f04:	add	r3, r1, #31
   14f08:	movge	r3, r1
   14f0c:	rsbs	r2, r1, #0
   14f10:	asr	r3, r3, #5
   14f14:	and	r2, r2, #31
   14f18:	and	r1, r1, #31
   14f1c:	mov	ip, #1
   14f20:	rsbpl	r1, r2, #0
   14f24:	ldr	r2, [r0, r3, lsl #2]
   14f28:	orr	r1, r2, ip, lsl r1
   14f2c:	str	r1, [r0, r3, lsl #2]
   14f30:	bx	lr
   14f34:	cmp	r1, #0
   14f38:	add	r3, r1, #31
   14f3c:	movge	r3, r1
   14f40:	rsbs	r2, r1, #0
   14f44:	asr	r3, r3, #5
   14f48:	and	r2, r2, #31
   14f4c:	ldr	r0, [r0, r3, lsl #2]
   14f50:	and	r1, r1, #31
   14f54:	rsbpl	r1, r2, #0
   14f58:	lsr	r0, r0, r1
   14f5c:	and	r0, r0, #1
   14f60:	bx	lr
   14f64:	sub	r3, r0, #4
   14f68:	add	r0, r0, #28
   14f6c:	ldr	r2, [r3, #4]
   14f70:	mvn	r2, r2
   14f74:	str	r2, [r3, #4]!
   14f78:	cmp	r3, r0
   14f7c:	bne	14f6c <__assert_fail@plt+0x3a08>
   14f80:	bx	lr
   14f84:	sub	r3, r0, #4
   14f88:	sub	r1, r1, #4
   14f8c:	add	r0, r0, #28
   14f90:	ldr	r2, [r3, #4]
   14f94:	ldr	ip, [r1, #4]!
   14f98:	orr	r2, r2, ip
   14f9c:	str	r2, [r3, #4]!
   14fa0:	cmp	r3, r0
   14fa4:	bne	14f90 <__assert_fail@plt+0x3a2c>
   14fa8:	bx	lr
   14fac:	sub	r3, r0, #4
   14fb0:	sub	r1, r1, #4
   14fb4:	add	r0, r0, #28
   14fb8:	ldr	r2, [r3, #4]
   14fbc:	ldr	ip, [r1, #4]!
   14fc0:	and	r2, r2, ip
   14fc4:	str	r2, [r3, #4]!
   14fc8:	cmp	r3, r0
   14fcc:	bne	14fb8 <__assert_fail@plt+0x3a54>
   14fd0:	bx	lr
   14fd4:	ldr	r3, [r0, #80]	; 0x50
   14fd8:	cmp	r3, #1
   14fdc:	movne	r2, r0
   14fe0:	movne	r0, #1
   14fe4:	ldrne	ip, [r2, #28]
   14fe8:	bne	14ff4 <__assert_fail@plt+0x3a90>
   14fec:	mov	r0, r3
   14ff0:	bx	lr
   14ff4:	add	r3, r0, r1
   14ff8:	cmp	ip, r3
   14ffc:	bgt	15004 <__assert_fail@plt+0x3aa0>
   15000:	bx	lr
   15004:	push	{lr}		; (str lr, [sp, #-4]!)
   15008:	ldr	lr, [r2, #8]
   1500c:	ldr	r3, [lr, r3, lsl #2]
   15010:	cmn	r3, #1
   15014:	popne	{pc}		; (ldrne pc, [sp], #4)
   15018:	add	r0, r0, #1
   1501c:	add	r3, r0, r1
   15020:	cmp	ip, r3
   15024:	bgt	15008 <__assert_fail@plt+0x3aa4>
   15028:	pop	{pc}		; (ldr pc, [sp], #4)
   1502c:	ldr	r3, [r0, #80]	; 0x50
   15030:	cmp	r3, #1
   15034:	ldreq	r3, [r0, #4]
   15038:	ldrne	r3, [r0, #8]
   1503c:	ldrbeq	r0, [r3, r1]
   15040:	ldrne	r0, [r3, r1, lsl #2]
   15044:	bx	lr
   15048:	ldr	r3, [r0, #36]	; 0x24
   1504c:	ldr	r2, [r0, #48]	; 0x30
   15050:	cmp	r3, r2
   15054:	movlt	r2, r3
   15058:	ldr	r3, [r0, #28]
   1505c:	cmp	r3, r2
   15060:	blt	15070 <__assert_fail@plt+0x3b0c>
   15064:	str	r3, [r0, #28]
   15068:	str	r3, [r0, #32]
   1506c:	bx	lr
   15070:	ldr	r1, [r0]
   15074:	ldr	ip, [r0, #24]
   15078:	add	r1, r1, r3
   1507c:	ldrb	r1, [r1, ip]
   15080:	ldr	ip, [r0, #64]	; 0x40
   15084:	ldrb	ip, [ip, r1]
   15088:	ldr	r1, [r0, #4]
   1508c:	strb	ip, [r1, r3]
   15090:	add	r3, r3, #1
   15094:	b	1505c <__assert_fail@plt+0x3af8>
   15098:	ldr	r2, [r0, #4]
   1509c:	cmp	r2, #0
   150a0:	ble	150ec <__assert_fail@plt+0x3b88>
   150a4:	sub	r2, r2, #1
   150a8:	mov	r3, #0
   150ac:	push	{lr}		; (str lr, [sp, #-4]!)
   150b0:	cmp	r2, r3
   150b4:	ldr	lr, [r0, #8]
   150b8:	bhi	150d0 <__assert_fail@plt+0x3b6c>
   150bc:	ldr	r2, [lr, r3, lsl #2]
   150c0:	cmp	r1, r2
   150c4:	bne	150f4 <__assert_fail@plt+0x3b90>
   150c8:	add	r0, r3, #1
   150cc:	pop	{pc}		; (ldr pc, [sp], #4)
   150d0:	add	ip, r2, r3
   150d4:	lsr	ip, ip, #1
   150d8:	ldr	lr, [lr, ip, lsl #2]
   150dc:	cmp	lr, r1
   150e0:	addlt	r3, ip, #1
   150e4:	movge	r2, ip
   150e8:	b	150b0 <__assert_fail@plt+0x3b4c>
   150ec:	mov	r0, #0
   150f0:	bx	lr
   150f4:	mov	r0, #0
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	ldr	r3, [r1, #40]	; 0x28
   15100:	ldr	ip, [r1, #56]	; 0x38
   15104:	cmp	ip, r3
   15108:	movle	r3, #2
   1510c:	strble	r3, [r0, #4]
   15110:	movle	r3, #0
   15114:	ble	15238 <__assert_fail@plt+0x3cd4>
   15118:	push	{r4, lr}
   1511c:	ldr	lr, [r1, #4]
   15120:	ldrb	ip, [lr, r3]
   15124:	strb	ip, [r0]
   15128:	ldr	r4, [r1, #80]	; 0x50
   1512c:	cmp	r4, #1
   15130:	ble	1515c <__assert_fail@plt+0x3bf8>
   15134:	ldr	r4, [r1, #28]
   15138:	cmp	r3, r4
   1513c:	beq	1515c <__assert_fail@plt+0x3bf8>
   15140:	ldr	r4, [r1, #8]
   15144:	ldr	r4, [r4, r3, lsl #2]
   15148:	cmn	r4, #1
   1514c:	bne	1515c <__assert_fail@plt+0x3bf8>
   15150:	mov	r3, #1
   15154:	strb	r3, [r0, #4]
   15158:	b	151e8 <__assert_fail@plt+0x3c84>
   1515c:	cmp	ip, #92	; 0x5c
   15160:	bne	15188 <__assert_fail@plt+0x3c24>
   15164:	tst	r2, #1
   15168:	beq	15150 <__assert_fail@plt+0x3bec>
   1516c:	ldr	r2, [r1, #48]	; 0x30
   15170:	add	r3, r3, #1
   15174:	cmp	r3, r2
   15178:	strlt	r3, [r1, #40]	; 0x28
   1517c:	ldrblt	r3, [lr, r3]
   15180:	strblt	r3, [r0]
   15184:	b	15150 <__assert_fail@plt+0x3bec>
   15188:	cmp	ip, #91	; 0x5b
   1518c:	bne	15200 <__assert_fail@plt+0x3c9c>
   15190:	ldr	r4, [r1, #48]	; 0x30
   15194:	add	ip, r3, #1
   15198:	cmp	ip, r4
   1519c:	addlt	r3, lr, r3
   151a0:	movge	r3, #0
   151a4:	ldrblt	r3, [r3, #1]
   151a8:	cmp	r3, #58	; 0x3a
   151ac:	strb	r3, [r0]
   151b0:	beq	151f0 <__assert_fail@plt+0x3c8c>
   151b4:	cmp	r3, #61	; 0x3d
   151b8:	beq	151dc <__assert_fail@plt+0x3c78>
   151bc:	cmp	r3, #46	; 0x2e
   151c0:	moveq	r3, #26
   151c4:	beq	151e0 <__assert_fail@plt+0x3c7c>
   151c8:	mov	r3, #1
   151cc:	mov	r2, #91	; 0x5b
   151d0:	strb	r3, [r0, #4]
   151d4:	strb	r2, [r0]
   151d8:	b	151e8 <__assert_fail@plt+0x3c84>
   151dc:	mov	r3, #28
   151e0:	strb	r3, [r0, #4]
   151e4:	mov	r3, #2
   151e8:	mov	r0, r3
   151ec:	pop	{r4, pc}
   151f0:	tst	r2, #4
   151f4:	beq	151c8 <__assert_fail@plt+0x3c64>
   151f8:	mov	r3, #30
   151fc:	b	151e0 <__assert_fail@plt+0x3c7c>
   15200:	cmp	ip, #93	; 0x5d
   15204:	beq	15228 <__assert_fail@plt+0x3cc4>
   15208:	cmp	ip, #94	; 0x5e
   1520c:	beq	15230 <__assert_fail@plt+0x3ccc>
   15210:	cmp	ip, #45	; 0x2d
   15214:	moveq	r3, #22
   15218:	bne	15150 <__assert_fail@plt+0x3bec>
   1521c:	strb	r3, [r0, #4]
   15220:	mov	r3, #1
   15224:	b	151e8 <__assert_fail@plt+0x3c84>
   15228:	mov	r3, #21
   1522c:	b	1521c <__assert_fail@plt+0x3cb8>
   15230:	mov	r3, #25
   15234:	b	1521c <__assert_fail@plt+0x3cb8>
   15238:	mov	r0, r3
   1523c:	bx	lr
   15240:	ldrb	r3, [r1, #24]
   15244:	cmp	r3, #17
   15248:	bne	15260 <__assert_fail@plt+0x3cfc>
   1524c:	ldr	r3, [r1, #20]
   15250:	cmp	r0, r3
   15254:	ldrbeq	r3, [r1, #26]
   15258:	orreq	r3, r3, #8
   1525c:	strbeq	r3, [r1, #26]
   15260:	mov	r0, #0
   15264:	bx	lr
   15268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1526c:	sub	sp, sp, #44	; 0x2c
   15270:	ldr	sl, [r0, #84]	; 0x54
   15274:	str	r3, [sp, #16]
   15278:	mov	r6, r2
   1527c:	ldr	r2, [sp, #16]
   15280:	ldr	r3, [sl, #24]
   15284:	mov	r9, #12
   15288:	mov	fp, r0
   1528c:	mla	r9, r9, r2, r3
   15290:	ldr	r2, [sp, #80]	; 0x50
   15294:	mov	r3, #24
   15298:	mov	r4, r1
   1529c:	mul	r3, r3, r2
   152a0:	mov	r8, #0
   152a4:	str	r3, [sp, #24]
   152a8:	mov	r3, #1
   152ac:	lsl	r3, r3, r6
   152b0:	str	r3, [sp, #12]
   152b4:	mvn	r3, r3
   152b8:	str	r3, [sp, #32]
   152bc:	and	r3, r1, #1
   152c0:	str	r3, [sp, #36]	; 0x24
   152c4:	and	r3, r1, #2
   152c8:	str	r3, [sp, #20]
   152cc:	ldr	r3, [r9, #4]
   152d0:	cmp	r8, r3
   152d4:	lsrge	r4, r4, #1
   152d8:	andge	r0, r4, #1
   152dc:	bge	15380 <__assert_fail@plt+0x3e1c>
   152e0:	ldr	r3, [r9, #8]
   152e4:	ldr	r7, [r3, r8, lsl #2]
   152e8:	ldr	r3, [sl]
   152ec:	add	r2, r3, r7, lsl #3
   152f0:	ldrb	r2, [r2, #4]
   152f4:	cmp	r2, #8
   152f8:	beq	153f8 <__assert_fail@plt+0x3e94>
   152fc:	cmp	r2, #9
   15300:	beq	15414 <__assert_fail@plt+0x3eb0>
   15304:	cmp	r2, #4
   15308:	bne	153f0 <__assert_fail@plt+0x3e8c>
   1530c:	ldr	r3, [sp, #80]	; 0x50
   15310:	cmn	r3, #1
   15314:	beq	153f0 <__assert_fail@plt+0x3e8c>
   15318:	mov	r3, #12
   1531c:	mul	r3, r3, r7
   15320:	str	r3, [sp, #28]
   15324:	ldr	r3, [sp, #24]
   15328:	add	r5, r3, #24
   1532c:	ldr	r3, [fp, #116]	; 0x74
   15330:	add	r5, r3, r5
   15334:	ldr	r3, [r5, #-24]	; 0xffffffe8
   15338:	cmp	r7, r3
   1533c:	bne	153e0 <__assert_fail@plt+0x3e7c>
   15340:	cmp	r6, #31
   15344:	bgt	15358 <__assert_fail@plt+0x3df4>
   15348:	ldr	r3, [r5, #-8]
   1534c:	ldr	r2, [sp, #12]
   15350:	tst	r2, r3
   15354:	beq	153e0 <__assert_fail@plt+0x3e7c>
   15358:	ldr	r2, [sp, #28]
   1535c:	ldr	r3, [sl, #20]
   15360:	add	r3, r3, r2
   15364:	ldr	r2, [sp, #16]
   15368:	ldr	r3, [r3, #8]
   1536c:	ldr	r3, [r3]
   15370:	cmp	r2, r3
   15374:	bne	15388 <__assert_fail@plt+0x3e24>
   15378:	ands	r0, r4, #1
   1537c:	mvnne	r0, #0
   15380:	add	sp, sp, #44	; 0x2c
   15384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15388:	ldr	r2, [sp, #80]	; 0x50
   1538c:	mov	r1, r4
   15390:	str	r2, [sp]
   15394:	mov	r0, fp
   15398:	mov	r2, r6
   1539c:	bl	15268 <__assert_fail@plt+0x3d04>
   153a0:	cmn	r0, #1
   153a4:	bne	153b0 <__assert_fail@plt+0x3e4c>
   153a8:	mvn	r0, #0
   153ac:	b	15380 <__assert_fail@plt+0x3e1c>
   153b0:	cmp	r0, #0
   153b4:	bne	153cc <__assert_fail@plt+0x3e68>
   153b8:	ldr	r3, [sp, #20]
   153bc:	cmp	r3, #0
   153c0:	beq	153cc <__assert_fail@plt+0x3e68>
   153c4:	mov	r0, #0
   153c8:	b	15380 <__assert_fail@plt+0x3e1c>
   153cc:	cmp	r6, #31
   153d0:	ldrle	r3, [r5, #-8]
   153d4:	ldrle	r2, [sp, #32]
   153d8:	andle	r3, r3, r2
   153dc:	strle	r3, [r5, #-8]
   153e0:	add	r5, r5, #24
   153e4:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   153e8:	cmp	r3, #0
   153ec:	bne	15334 <__assert_fail@plt+0x3dd0>
   153f0:	add	r8, r8, #1
   153f4:	b	152cc <__assert_fail@plt+0x3d68>
   153f8:	ldr	r2, [sp, #36]	; 0x24
   153fc:	cmp	r2, #0
   15400:	beq	153f0 <__assert_fail@plt+0x3e8c>
   15404:	ldr	r3, [r3, r7, lsl #3]
   15408:	cmp	r3, r6
   1540c:	bne	153f0 <__assert_fail@plt+0x3e8c>
   15410:	b	153a8 <__assert_fail@plt+0x3e44>
   15414:	ldr	r2, [sp, #20]
   15418:	cmp	r2, #0
   1541c:	beq	153f0 <__assert_fail@plt+0x3e8c>
   15420:	ldr	r3, [r3, r7, lsl #3]
   15424:	cmp	r6, r3
   15428:	bne	153f0 <__assert_fail@plt+0x3e8c>
   1542c:	b	153c4 <__assert_fail@plt+0x3e60>
   15430:	push	{r4, r5, lr}
   15434:	mov	lr, #24
   15438:	ldr	r5, [r0, #116]	; 0x74
   1543c:	ldr	ip, [sp, #12]
   15440:	mla	r1, lr, r1, r5
   15444:	ldr	r4, [sp, #16]
   15448:	ldr	lr, [r1, #8]
   1544c:	cmp	lr, ip
   15450:	bgt	15488 <__assert_fail@plt+0x3f24>
   15454:	ldr	r1, [r1, #12]
   15458:	cmp	ip, r1
   1545c:	bgt	15494 <__assert_fail@plt+0x3f30>
   15460:	cmp	ip, r1
   15464:	moveq	r1, #2
   15468:	movne	r1, #0
   1546c:	cmp	lr, ip
   15470:	orreq	r1, r1, #1
   15474:	cmp	r1, #0
   15478:	beq	1548c <__assert_fail@plt+0x3f28>
   1547c:	str	r4, [sp, #12]
   15480:	pop	{r4, r5, lr}
   15484:	b	15268 <__assert_fail@plt+0x3d04>
   15488:	mvn	r1, #0
   1548c:	mov	r0, r1
   15490:	pop	{r4, r5, pc}
   15494:	mov	r1, #1
   15498:	b	1548c <__assert_fail@plt+0x3f28>
   1549c:	push	{r4, r5, lr}
   154a0:	mov	r3, #0
   154a4:	ldr	r4, [r0, #108]	; 0x6c
   154a8:	mov	r5, #24
   154ac:	mov	ip, r4
   154b0:	cmp	ip, r3
   154b4:	bgt	154e4 <__assert_fail@plt+0x3f80>
   154b8:	cmp	r4, r3
   154bc:	mvnle	r3, #0
   154c0:	ble	154dc <__assert_fail@plt+0x3f78>
   154c4:	ldr	r0, [r0, #116]	; 0x74
   154c8:	mov	r2, #24
   154cc:	mla	r2, r2, r3, r0
   154d0:	ldr	r2, [r2, #4]
   154d4:	cmp	r1, r2
   154d8:	mvnne	r3, #0
   154dc:	mov	r0, r3
   154e0:	pop	{r4, r5, pc}
   154e4:	add	r2, ip, r3
   154e8:	ldr	lr, [r0, #116]	; 0x74
   154ec:	add	r2, r2, r2, lsr #31
   154f0:	asr	r2, r2, #1
   154f4:	mla	lr, r5, r2, lr
   154f8:	ldr	lr, [lr, #4]
   154fc:	cmp	lr, r1
   15500:	addlt	r3, r2, #1
   15504:	movge	ip, r2
   15508:	b	154b0 <__assert_fail@plt+0x3f4c>
   1550c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15510:	mov	r6, r1
   15514:	sub	sp, sp, #20
   15518:	mov	r1, r3
   1551c:	mov	r5, r0
   15520:	mov	sl, r2
   15524:	mov	r7, r3
   15528:	ldr	r9, [r0, #84]	; 0x54
   1552c:	bl	1549c <__assert_fail@plt+0x3f38>
   15530:	ldr	r1, [sp, #60]	; 0x3c
   15534:	mov	r4, #0
   15538:	str	r0, [sp, #8]
   1553c:	mov	r0, r5
   15540:	bl	1549c <__assert_fail@plt+0x3f38>
   15544:	str	r0, [sp, #12]
   15548:	ldr	r3, [r6, #4]
   1554c:	cmp	r4, r3
   15550:	blt	15560 <__assert_fail@plt+0x3ffc>
   15554:	mov	r0, #0
   15558:	add	sp, sp, #20
   1555c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15560:	ldr	r3, [r6, #8]
   15564:	ldr	r2, [r5, #116]	; 0x74
   15568:	mov	r0, r5
   1556c:	ldr	r1, [r3, r4, lsl #2]
   15570:	mov	r3, #24
   15574:	mul	r3, r3, r1
   15578:	ldr	r2, [r2, r3]
   1557c:	ldr	r3, [r9]
   15580:	ldr	r8, [r3, r2, lsl #3]
   15584:	ldr	r3, [sp, #8]
   15588:	mov	r2, r8
   1558c:	str	r3, [sp, #4]
   15590:	str	r7, [sp]
   15594:	mov	r3, sl
   15598:	bl	15430 <__assert_fail@plt+0x3ecc>
   1559c:	ldr	r3, [sp, #12]
   155a0:	ldr	r1, [r6, #8]
   155a4:	str	r3, [sp, #4]
   155a8:	ldr	r3, [sp, #60]	; 0x3c
   155ac:	mov	r2, r8
   155b0:	str	r3, [sp]
   155b4:	ldr	r3, [sp, #56]	; 0x38
   155b8:	ldr	r1, [r1, r4, lsl #2]
   155bc:	mov	fp, r0
   155c0:	mov	r0, r5
   155c4:	bl	15430 <__assert_fail@plt+0x3ecc>
   155c8:	cmp	fp, r0
   155cc:	addeq	r4, r4, #1
   155d0:	beq	15548 <__assert_fail@plt+0x3fe4>
   155d4:	mov	r0, #1
   155d8:	b	15558 <__assert_fail@plt+0x3ff4>
   155dc:	push	{r4, r5, r6, lr}
   155e0:	mov	r4, r0
   155e4:	mov	r5, r1
   155e8:	mov	r6, r2
   155ec:	ldr	r3, [r4, #4]
   155f0:	cmp	r3, #0
   155f4:	bne	15644 <__assert_fail@plt+0x40e0>
   155f8:	ldr	r3, [r4, #8]
   155fc:	cmp	r3, #0
   15600:	bne	15644 <__assert_fail@plt+0x40e0>
   15604:	mov	r1, r4
   15608:	mov	r0, r6
   1560c:	blx	r5
   15610:	cmp	r0, #0
   15614:	popne	{r4, r5, r6, pc}
   15618:	ldr	r1, [r4]
   1561c:	cmp	r1, #0
   15620:	popeq	{r4, r5, r6, pc}
   15624:	ldr	r3, [r1, #8]
   15628:	cmp	r4, r3
   1562c:	cmpne	r3, #0
   15630:	moveq	r2, #1
   15634:	movne	r2, #0
   15638:	cmp	r2, #0
   1563c:	mov	r4, r1
   15640:	bne	15604 <__assert_fail@plt+0x40a0>
   15644:	mov	r4, r3
   15648:	b	155ec <__assert_fail@plt+0x4088>
   1564c:	push	{r4, r5, r6, r7, r8, lr}
   15650:	mov	r4, r0
   15654:	mov	r5, r1
   15658:	mov	r6, r2
   1565c:	mov	r7, #0
   15660:	mov	r1, r4
   15664:	mov	r0, r6
   15668:	blx	r5
   1566c:	cmp	r0, #0
   15670:	popne	{r4, r5, r6, r7, r8, pc}
   15674:	ldr	r3, [r4, #4]
   15678:	cmp	r3, #0
   1567c:	moveq	r1, r7
   15680:	beq	156a0 <__assert_fail@plt+0x413c>
   15684:	mov	r4, r3
   15688:	b	15660 <__assert_fail@plt+0x40fc>
   1568c:	ldr	r3, [r4]
   15690:	mov	r1, r4
   15694:	cmp	r3, #0
   15698:	popeq	{r4, r5, r6, r7, r8, pc}
   1569c:	mov	r4, r3
   156a0:	ldr	r3, [r4, #8]
   156a4:	cmp	r3, #0
   156a8:	cmpne	r1, r3
   156ac:	beq	1568c <__assert_fail@plt+0x4128>
   156b0:	b	15684 <__assert_fail@plt+0x4120>
   156b4:	ldr	r3, [r0, #80]	; 0x50
   156b8:	push	{r4, r5, r6, lr}
   156bc:	cmp	r3, #1
   156c0:	mov	r4, r0
   156c4:	mov	r5, r1
   156c8:	ble	15718 <__assert_fail@plt+0x41b4>
   156cc:	cmn	r1, #-1073741823	; 0xc0000001
   156d0:	bls	156dc <__assert_fail@plt+0x4178>
   156d4:	mov	r0, #12
   156d8:	pop	{r4, r5, r6, pc}
   156dc:	lsl	r6, r1, #2
   156e0:	mov	r1, r6
   156e4:	ldr	r0, [r0, #8]
   156e8:	bl	2145c <__assert_fail@plt+0xfef8>
   156ec:	cmp	r0, #0
   156f0:	beq	156d4 <__assert_fail@plt+0x4170>
   156f4:	str	r0, [r4, #8]
   156f8:	ldr	r0, [r4, #12]
   156fc:	cmp	r0, #0
   15700:	beq	15718 <__assert_fail@plt+0x41b4>
   15704:	mov	r1, r6
   15708:	bl	2145c <__assert_fail@plt+0xfef8>
   1570c:	cmp	r0, #0
   15710:	beq	156d4 <__assert_fail@plt+0x4170>
   15714:	str	r0, [r4, #12]
   15718:	ldrb	r3, [r4, #75]	; 0x4b
   1571c:	cmp	r3, #0
   15720:	beq	1573c <__assert_fail@plt+0x41d8>
   15724:	mov	r1, r5
   15728:	ldr	r0, [r4, #4]
   1572c:	bl	2145c <__assert_fail@plt+0xfef8>
   15730:	cmp	r0, #0
   15734:	beq	156d4 <__assert_fail@plt+0x4170>
   15738:	str	r0, [r4, #4]
   1573c:	str	r5, [r4, #36]	; 0x24
   15740:	mov	r0, #0
   15744:	pop	{r4, r5, r6, pc}
   15748:	push	{r4, r5, r6, lr}
   1574c:	mov	r5, r1
   15750:	ldm	r0, {r1, r3}
   15754:	mov	r4, r0
   15758:	cmp	r1, r3
   1575c:	bne	15784 <__assert_fail@plt+0x4220>
   15760:	add	r1, r1, #1
   15764:	lsl	r3, r1, #1
   15768:	str	r3, [r0]
   1576c:	lsl	r1, r1, #3
   15770:	ldr	r0, [r0, #8]
   15774:	bl	2145c <__assert_fail@plt+0xfef8>
   15778:	cmp	r0, #0
   1577c:	popeq	{r4, r5, r6, pc}
   15780:	str	r0, [r4, #8]
   15784:	ldr	r3, [r4, #4]
   15788:	ldr	r2, [r4, #8]
   1578c:	add	r1, r3, #1
   15790:	str	r1, [r4, #4]
   15794:	mov	r0, #1
   15798:	str	r5, [r2, r3, lsl #2]
   1579c:	pop	{r4, r5, r6, pc}
   157a0:	push	{r4, r5, r6, r7, r8, lr}
   157a4:	mov	r7, r3
   157a8:	ldr	r3, [r0, #64]	; 0x40
   157ac:	mov	r4, r0
   157b0:	cmp	r3, #31
   157b4:	mov	r5, r1
   157b8:	mov	r6, r2
   157bc:	bne	157e4 <__assert_fail@plt+0x4280>
   157c0:	mov	r0, #996	; 0x3e4
   157c4:	bl	2141c <__assert_fail@plt+0xfeb8>
   157c8:	subs	lr, r0, #0
   157cc:	beq	15844 <__assert_fail@plt+0x42e0>
   157d0:	ldr	r3, [r4, #56]	; 0x38
   157d4:	str	lr, [r4, #56]	; 0x38
   157d8:	str	r3, [lr]
   157dc:	mov	r3, #0
   157e0:	str	r3, [r4, #64]	; 0x40
   157e4:	ldr	r1, [r4, #64]	; 0x40
   157e8:	ldr	ip, [r4, #56]	; 0x38
   157ec:	add	r3, r1, #1
   157f0:	lsl	r1, r1, #5
   157f4:	add	lr, r1, #4
   157f8:	str	r3, [r4, #64]	; 0x40
   157fc:	add	lr, ip, lr
   15800:	mov	r3, #0
   15804:	add	ip, ip, r1
   15808:	add	r2, ip, #24
   1580c:	stmib	ip, {r3, r5, r6}
   15810:	cmp	r5, #0
   15814:	ldm	r7, {r0, r1}
   15818:	stm	r2, {r0, r1}
   1581c:	ldrb	r2, [ip, #30]
   15820:	str	r3, [ip, #16]
   15824:	str	r3, [ip, #20]
   15828:	and	r2, r2, #243	; 0xf3
   1582c:	mvn	r3, #0
   15830:	strb	r2, [ip, #30]
   15834:	str	r3, [ip, #32]
   15838:	strne	lr, [r5]
   1583c:	cmp	r6, #0
   15840:	strne	lr, [r6]
   15844:	mov	r0, lr
   15848:	pop	{r4, r5, r6, r7, r8, pc}
   1584c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15850:	mov	r4, r0
   15854:	ldr	r5, [r0]
   15858:	mov	r8, r1
   1585c:	add	r6, sp, #4
   15860:	mov	r7, #0
   15864:	add	r3, r4, #20
   15868:	mov	r2, r7
   1586c:	mov	r1, #0
   15870:	mov	r0, r8
   15874:	bl	157a0 <__assert_fail@plt+0x423c>
   15878:	cmp	r0, #0
   1587c:	str	r0, [r6]
   15880:	beq	158e0 <__assert_fail@plt+0x437c>
   15884:	str	r5, [r0]
   15888:	ldr	r5, [r6]
   1588c:	ldrb	r3, [r5, #26]
   15890:	orr	r3, r3, #4
   15894:	strb	r3, [r5, #26]
   15898:	ldr	r3, [r4, #4]
   1589c:	cmp	r3, #0
   158a0:	addne	r6, r5, #4
   158a4:	bne	158c0 <__assert_fail@plt+0x435c>
   158a8:	mov	r2, r7
   158ac:	ldr	r3, [r4, #8]
   158b0:	cmp	r3, #0
   158b4:	cmpne	r2, r3
   158b8:	beq	158c8 <__assert_fail@plt+0x4364>
   158bc:	add	r6, r5, #8
   158c0:	mov	r4, r3
   158c4:	b	15864 <__assert_fail@plt+0x4300>
   158c8:	ldr	r3, [r4]
   158cc:	ldr	r5, [r5]
   158d0:	cmp	r3, #0
   158d4:	mov	r2, r4
   158d8:	bne	158e8 <__assert_fail@plt+0x4384>
   158dc:	ldr	r0, [sp, #4]
   158e0:	add	sp, sp, #8
   158e4:	pop	{r4, r5, r6, r7, r8, pc}
   158e8:	mov	r4, r3
   158ec:	b	158ac <__assert_fail@plt+0x4348>
   158f0:	mov	ip, #0
   158f4:	push	{r0, r1, r2, lr}
   158f8:	str	ip, [sp, #4]
   158fc:	strb	r3, [sp, #4]
   15900:	mov	r3, sp
   15904:	str	ip, [sp]
   15908:	bl	157a0 <__assert_fail@plt+0x423c>
   1590c:	add	sp, sp, #12
   15910:	pop	{pc}		; (ldr pc, [sp], #4)
   15914:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15918:	ldr	r9, [r1]
   1591c:	ldr	r4, [r2, #4]
   15920:	ldrb	r1, [r1, #28]
   15924:	adds	r3, r4, #0
   15928:	movne	r3, #1
   1592c:	ands	r3, r3, r1, lsr #4
   15930:	beq	15950 <__assert_fail@plt+0x43ec>
   15934:	ldr	r1, [r2, #20]
   15938:	cmp	r1, #31
   1593c:	bgt	159e8 <__assert_fail@plt+0x4484>
   15940:	ldr	r3, [r9, #80]	; 0x50
   15944:	lsr	r3, r3, r1
   15948:	tst	r3, #1
   1594c:	beq	159e8 <__assert_fail@plt+0x4484>
   15950:	mov	sl, r2
   15954:	mov	r2, #0
   15958:	mov	r1, r2
   1595c:	mov	r3, #8
   15960:	mov	r7, r0
   15964:	mov	r0, r9
   15968:	bl	158f0 <__assert_fail@plt+0x438c>
   1596c:	mov	r2, #0
   15970:	mov	r3, #9
   15974:	mov	r1, r2
   15978:	mov	r6, r0
   1597c:	mov	r0, r9
   15980:	bl	158f0 <__assert_fail@plt+0x438c>
   15984:	cmp	r4, #0
   15988:	mov	r5, r0
   1598c:	moveq	r8, r0
   15990:	beq	159ac <__assert_fail@plt+0x4448>
   15994:	mov	r2, r0
   15998:	mov	r3, #16
   1599c:	mov	r1, r4
   159a0:	mov	r0, r9
   159a4:	bl	158f0 <__assert_fail@plt+0x438c>
   159a8:	mov	r8, r0
   159ac:	mov	r3, #16
   159b0:	mov	r2, r8
   159b4:	mov	r1, r6
   159b8:	mov	r0, r9
   159bc:	bl	158f0 <__assert_fail@plt+0x438c>
   159c0:	cmp	r8, #0
   159c4:	cmpne	r0, #0
   159c8:	mov	r4, r0
   159cc:	beq	159dc <__assert_fail@plt+0x4478>
   159d0:	cmp	r5, #0
   159d4:	cmpne	r6, #0
   159d8:	bne	159f0 <__assert_fail@plt+0x448c>
   159dc:	mov	r4, #0
   159e0:	mov	r3, #12
   159e4:	str	r3, [r7]
   159e8:	mov	r0, r4
   159ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159f0:	ldr	r3, [sl, #20]
   159f4:	str	r3, [r5, #20]
   159f8:	str	r3, [r6, #20]
   159fc:	ldrb	r3, [sl, #26]
   15a00:	ldrb	r2, [r5, #26]
   15a04:	and	r3, r3, #8
   15a08:	bic	r2, r2, #8
   15a0c:	orr	r2, r3, r2
   15a10:	strb	r2, [r5, #26]
   15a14:	ldrb	r2, [r6, #26]
   15a18:	bic	r2, r2, #8
   15a1c:	orr	r3, r3, r2
   15a20:	strb	r3, [r6, #26]
   15a24:	b	159e8 <__assert_fail@plt+0x4484>
   15a28:	push	{r0, r1, r2, r4, r5, lr}
   15a2c:	mov	r3, #0
   15a30:	ldr	r2, [r1, #4]
   15a34:	mov	r5, r0
   15a38:	cmp	r2, r3
   15a3c:	mov	r4, r1
   15a40:	str	r3, [sp, #4]
   15a44:	beq	15a6c <__assert_fail@plt+0x4508>
   15a48:	ldrb	r3, [r2, #24]
   15a4c:	cmp	r3, #17
   15a50:	bne	15a6c <__assert_fail@plt+0x4508>
   15a54:	mov	r1, r0
   15a58:	add	r0, sp, #4
   15a5c:	bl	15914 <__assert_fail@plt+0x43b0>
   15a60:	cmp	r0, #0
   15a64:	str	r0, [r4, #4]
   15a68:	strne	r4, [r0]
   15a6c:	ldr	r2, [r4, #8]
   15a70:	cmp	r2, #0
   15a74:	beq	15a9c <__assert_fail@plt+0x4538>
   15a78:	ldrb	r3, [r2, #24]
   15a7c:	cmp	r3, #17
   15a80:	bne	15a9c <__assert_fail@plt+0x4538>
   15a84:	mov	r1, r5
   15a88:	add	r0, sp, #4
   15a8c:	bl	15914 <__assert_fail@plt+0x43b0>
   15a90:	cmp	r0, #0
   15a94:	str	r0, [r4, #8]
   15a98:	strne	r4, [r0]
   15a9c:	ldr	r0, [sp, #4]
   15aa0:	add	sp, sp, #12
   15aa4:	pop	{r4, r5, pc}
   15aa8:	mov	r3, #1
   15aac:	push	{r4, r5, r6, lr}
   15ab0:	mov	r4, r0
   15ab4:	str	r3, [r0]
   15ab8:	str	r3, [r0, #4]
   15abc:	mov	r0, #4
   15ac0:	mov	r5, r1
   15ac4:	bl	2141c <__assert_fail@plt+0xfeb8>
   15ac8:	cmp	r0, #0
   15acc:	str	r0, [r4, #8]
   15ad0:	streq	r0, [r4, #4]
   15ad4:	streq	r0, [r4]
   15ad8:	strne	r5, [r0]
   15adc:	moveq	r0, #12
   15ae0:	movne	r0, #0
   15ae4:	pop	{r4, r5, r6, pc}
   15ae8:	mov	r3, #0
   15aec:	push	{r4, lr}
   15af0:	mov	r4, r0
   15af4:	str	r1, [r0]
   15af8:	str	r3, [r0, #4]
   15afc:	lsl	r0, r1, #2
   15b00:	bl	2141c <__assert_fail@plt+0xfeb8>
   15b04:	cmp	r0, #0
   15b08:	str	r0, [r4, #8]
   15b0c:	moveq	r0, #12
   15b10:	movne	r0, #0
   15b14:	pop	{r4, pc}
   15b18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b1c:	mov	r7, r1
   15b20:	mov	r9, r0
   15b24:	str	r2, [r7], #16
   15b28:	mov	r5, r1
   15b2c:	mov	r0, r7
   15b30:	ldr	r1, [r1, #8]
   15b34:	mov	r4, r2
   15b38:	bl	15ae8 <__assert_fail@plt+0x4584>
   15b3c:	subs	r8, r0, #0
   15b40:	moveq	r6, r8
   15b44:	beq	15b74 <__assert_fail@plt+0x4610>
   15b48:	mov	r8, #12
   15b4c:	mov	r0, r8
   15b50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b54:	ldr	r3, [r5, #12]
   15b58:	ldr	r1, [r3, r6, lsl #2]
   15b5c:	ldr	r3, [r9]
   15b60:	add	r3, r3, r1, lsl #3
   15b64:	ldrb	r3, [r3, #4]
   15b68:	tst	r3, #8
   15b6c:	beq	15be4 <__assert_fail@plt+0x4680>
   15b70:	add	r6, r6, #1
   15b74:	ldr	r3, [r5, #8]
   15b78:	cmp	r6, r3
   15b7c:	blt	15b54 <__assert_fail@plt+0x45f0>
   15b80:	ldr	r3, [r9, #68]	; 0x44
   15b84:	ldr	r7, [r9, #32]
   15b88:	and	r4, r4, r3
   15b8c:	mov	r3, #12
   15b90:	mul	r4, r3, r4
   15b94:	add	r6, r7, r4
   15b98:	ldr	r1, [r7, r4]
   15b9c:	ldr	r3, [r6, #4]
   15ba0:	cmp	r3, r1
   15ba4:	bgt	15bcc <__assert_fail@plt+0x4668>
   15ba8:	add	r1, r1, #1
   15bac:	ldr	r0, [r6, #8]
   15bb0:	lsl	r9, r1, #1
   15bb4:	lsl	r1, r1, #3
   15bb8:	bl	2145c <__assert_fail@plt+0xfef8>
   15bbc:	cmp	r0, #0
   15bc0:	beq	15b48 <__assert_fail@plt+0x45e4>
   15bc4:	str	r0, [r6, #8]
   15bc8:	str	r9, [r6, #4]
   15bcc:	ldr	r3, [r7, r4]
   15bd0:	ldr	r2, [r6, #8]
   15bd4:	add	r1, r3, #1
   15bd8:	str	r1, [r7, r4]
   15bdc:	str	r5, [r2, r3, lsl #2]
   15be0:	b	15b4c <__assert_fail@plt+0x45e8>
   15be4:	mov	r0, r7
   15be8:	bl	15748 <__assert_fail@plt+0x41e4>
   15bec:	cmp	r0, #0
   15bf0:	bne	15b70 <__assert_fail@plt+0x460c>
   15bf4:	b	15b48 <__assert_fail@plt+0x45e4>
   15bf8:	mov	r2, #32
   15bfc:	mov	r1, #0
   15c00:	b	11444 <memset@plt>
   15c04:	push	{r4, r5, r6, r7, r8, r9, lr}
   15c08:	sub	sp, sp, #84	; 0x54
   15c0c:	ldr	r8, [r0, #36]	; 0x24
   15c10:	ldr	r3, [r0, #48]	; 0x30
   15c14:	ldr	r5, [r0, #28]
   15c18:	cmp	r8, r3
   15c1c:	mov	r4, r0
   15c20:	movge	r8, r3
   15c24:	add	r7, sp, #8
   15c28:	add	r9, sp, #16
   15c2c:	cmp	r5, r8
   15c30:	bge	15d48 <__assert_fail@plt+0x47e4>
   15c34:	add	r6, r4, #16
   15c38:	ldr	r3, [r4, #64]	; 0x40
   15c3c:	ldm	r6, {r0, r1}
   15c40:	cmp	r3, #0
   15c44:	sub	r2, r8, r5
   15c48:	stm	r7, {r0, r1}
   15c4c:	movne	r3, #0
   15c50:	bne	15c98 <__assert_fail@plt+0x4734>
   15c54:	ldr	r1, [r4, #24]
   15c58:	add	r3, r5, r1
   15c5c:	ldr	r1, [r4]
   15c60:	add	r1, r1, r3
   15c64:	b	15cb0 <__assert_fail@plt+0x474c>
   15c68:	ldr	r1, [r4]
   15c6c:	ldr	r0, [r4, #24]
   15c70:	add	r1, r1, r5
   15c74:	add	r1, r1, r3
   15c78:	ldrb	r1, [r1, r0]
   15c7c:	ldr	r0, [r4, #64]	; 0x40
   15c80:	ldrb	r0, [r0, r1]
   15c84:	ldr	r1, [r4, #4]
   15c88:	add	r1, r1, r5
   15c8c:	strb	r0, [r1, r3]
   15c90:	strb	r0, [r9, r3]
   15c94:	add	r3, r3, #1
   15c98:	ldr	r1, [r4, #80]	; 0x50
   15c9c:	cmp	r2, r1
   15ca0:	movlt	r1, r2
   15ca4:	cmp	r3, r1
   15ca8:	blt	15c68 <__assert_fail@plt+0x4704>
   15cac:	mov	r1, r9
   15cb0:	mov	r3, r6
   15cb4:	add	r0, sp, #4
   15cb8:	bl	217d8 <__assert_fail@plt+0x10274>
   15cbc:	sub	r3, r0, #1
   15cc0:	cmn	r3, #3
   15cc4:	bhi	15ce0 <__assert_fail@plt+0x477c>
   15cc8:	cmn	r0, #2
   15ccc:	bne	15d10 <__assert_fail@plt+0x47ac>
   15cd0:	ldr	r2, [r4, #36]	; 0x24
   15cd4:	ldr	r3, [r4, #48]	; 0x30
   15cd8:	cmp	r2, r3
   15cdc:	blt	15d40 <__assert_fail@plt+0x47dc>
   15ce0:	ldr	r3, [r4]
   15ce4:	ldr	r2, [r4, #24]
   15ce8:	add	r3, r3, r5
   15cec:	ldm	r7, {r0, r1}
   15cf0:	ldrb	r3, [r3, r2]
   15cf4:	ldr	r2, [r4, #64]	; 0x40
   15cf8:	cmp	r2, #0
   15cfc:	str	r3, [sp, #4]
   15d00:	ldrbne	r3, [r2, r3]
   15d04:	stm	r6, {r0, r1}
   15d08:	mov	r0, #1
   15d0c:	strne	r3, [sp, #4]
   15d10:	ldr	r2, [r4, #8]
   15d14:	ldr	r3, [sp, #4]
   15d18:	add	r0, r5, r0
   15d1c:	str	r3, [r2, r5, lsl #2]
   15d20:	mvn	r1, #0
   15d24:	add	r3, r5, #1
   15d28:	cmp	r3, r0
   15d2c:	mov	r5, r3
   15d30:	bge	15c2c <__assert_fail@plt+0x46c8>
   15d34:	str	r1, [r2, r3, lsl #2]
   15d38:	add	r3, r3, #1
   15d3c:	b	15d28 <__assert_fail@plt+0x47c4>
   15d40:	ldm	r7, {r0, r1}
   15d44:	stm	r6, {r0, r1}
   15d48:	str	r5, [r4, #28]
   15d4c:	str	r5, [r4, #32]
   15d50:	add	sp, sp, #84	; 0x54
   15d54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d5c:	mov	r4, r0
   15d60:	ldr	r3, [r0, #48]	; 0x30
   15d64:	ldr	r7, [r0, #36]	; 0x24
   15d68:	sub	sp, sp, #100	; 0x64
   15d6c:	cmp	r7, r3
   15d70:	movge	r7, r3
   15d74:	ldrb	r3, [r0, #74]	; 0x4a
   15d78:	ldr	r6, [r0, #28]
   15d7c:	cmp	r3, #0
   15d80:	bne	15da4 <__assert_fail@plt+0x4840>
   15d84:	ldr	r3, [r0, #64]	; 0x40
   15d88:	cmp	r3, #0
   15d8c:	bne	15da4 <__assert_fail@plt+0x4840>
   15d90:	ldrb	r3, [r0, #76]	; 0x4c
   15d94:	cmp	r3, #0
   15d98:	moveq	r5, r6
   15d9c:	addeq	r8, sp, #24
   15da0:	beq	15e04 <__assert_fail@plt+0x48a0>
   15da4:	ldr	r5, [r4, #32]
   15da8:	cmp	r6, r7
   15dac:	blt	15eb8 <__assert_fail@plt+0x4954>
   15db0:	b	15f88 <__assert_fail@plt+0x4a24>
   15db4:	ldr	fp, [r4]
   15db8:	ldr	sl, [r4, #24]
   15dbc:	add	r3, fp, r5
   15dc0:	add	r6, r4, #16
   15dc4:	ldrb	r9, [r3, sl]
   15dc8:	tst	r9, #128	; 0x80
   15dcc:	bne	15e10 <__assert_fail@plt+0x48ac>
   15dd0:	mov	r0, r6
   15dd4:	bl	11294 <mbsinit@plt>
   15dd8:	cmp	r0, #0
   15ddc:	beq	15e10 <__assert_fail@plt+0x48ac>
   15de0:	mov	r0, r9
   15de4:	bl	1151c <towupper@plt>
   15de8:	bics	r3, r0, #127	; 0x7f
   15dec:	bne	15e10 <__assert_fail@plt+0x48ac>
   15df0:	ldr	r3, [r4, #4]
   15df4:	strb	r0, [r3, r5]
   15df8:	ldr	r3, [r4, #8]
   15dfc:	str	r0, [r3, r5, lsl #2]
   15e00:	add	r5, r5, #1
   15e04:	cmp	r5, r7
   15e08:	blt	15db4 <__assert_fail@plt+0x4850>
   15e0c:	b	15ff4 <__assert_fail@plt+0x4a90>
   15e10:	ldm	r6, {r0, r1}
   15e14:	mov	r3, r6
   15e18:	sub	r2, r7, r5
   15e1c:	stm	r8, {r0, r1}
   15e20:	add	r1, sl, r5
   15e24:	add	r1, fp, r1
   15e28:	add	r0, sp, #20
   15e2c:	str	r5, [sp, #4]
   15e30:	bl	217d8 <__assert_fail@plt+0x10274>
   15e34:	sub	r3, r0, #1
   15e38:	cmn	r3, #4
   15e3c:	mov	sl, r0
   15e40:	bhi	15fac <__assert_fail@plt+0x4a48>
   15e44:	ldr	r9, [sp, #20]
   15e48:	mov	r0, r9
   15e4c:	bl	1151c <towupper@plt>
   15e50:	cmp	r9, r0
   15e54:	mov	r6, r0
   15e58:	beq	15f90 <__assert_fail@plt+0x4a2c>
   15e5c:	mov	r1, r0
   15e60:	mov	r2, r8
   15e64:	add	r0, sp, #32
   15e68:	bl	111e0 <wcrtomb@plt>
   15e6c:	cmp	sl, r0
   15e70:	bne	15eb4 <__assert_fail@plt+0x4950>
   15e74:	ldr	r0, [r4, #4]
   15e78:	mov	r2, sl
   15e7c:	add	r1, sp, #32
   15e80:	add	r0, r0, r5
   15e84:	bl	11264 <memcpy@plt>
   15e88:	ldr	r2, [r4, #8]
   15e8c:	add	sl, r5, sl
   15e90:	add	r3, r5, #1
   15e94:	mvn	r1, #0
   15e98:	str	r6, [r2, r5, lsl #2]
   15e9c:	cmp	r3, sl
   15ea0:	mov	r5, r3
   15ea4:	bge	15e04 <__assert_fail@plt+0x48a0>
   15ea8:	str	r1, [r2, r3, lsl #2]
   15eac:	add	r3, r3, #1
   15eb0:	b	15e9c <__assert_fail@plt+0x4938>
   15eb4:	mov	r6, r5
   15eb8:	add	r3, r4, #16
   15ebc:	ldr	ip, [r4, #64]	; 0x40
   15ec0:	ldm	r3, {r0, r1}
   15ec4:	add	sl, sp, #24
   15ec8:	cmp	ip, #0
   15ecc:	sub	r2, r7, r6
   15ed0:	str	r3, [sp, #4]
   15ed4:	stm	sl, {r0, r1}
   15ed8:	beq	1602c <__assert_fail@plt+0x4ac8>
   15edc:	ldr	r0, [r4, #80]	; 0x50
   15ee0:	mov	r3, #0
   15ee4:	cmp	r2, r0
   15ee8:	movlt	r0, r2
   15eec:	add	r9, sp, #32
   15ef0:	cmp	r3, r0
   15ef4:	blt	16008 <__assert_fail@plt+0x4aa4>
   15ef8:	ldr	r3, [sp, #4]
   15efc:	mov	r1, r9
   15f00:	add	r0, sp, #20
   15f04:	bl	217d8 <__assert_fail@plt+0x10274>
   15f08:	sub	r3, r0, #1
   15f0c:	cmn	r3, #4
   15f10:	mov	r8, r0
   15f14:	str	r3, [sp, #8]
   15f18:	bhi	161b0 <__assert_fail@plt+0x4c4c>
   15f1c:	ldr	r3, [sp, #20]
   15f20:	mov	r0, r3
   15f24:	str	r3, [sp, #12]
   15f28:	bl	1151c <towupper@plt>
   15f2c:	ldr	r3, [sp, #12]
   15f30:	cmp	r3, r0
   15f34:	mov	fp, r0
   15f38:	beq	1613c <__assert_fail@plt+0x4bd8>
   15f3c:	mov	r1, r0
   15f40:	mov	r2, sl
   15f44:	add	r0, sp, #32
   15f48:	bl	111e0 <wcrtomb@plt>
   15f4c:	cmp	r8, r0
   15f50:	mov	r3, r0
   15f54:	moveq	r2, r8
   15f58:	ldreq	r0, [r4, #4]
   15f5c:	addeq	r1, sp, #32
   15f60:	beq	16148 <__assert_fail@plt+0x4be4>
   15f64:	cmn	r3, #1
   15f68:	beq	1613c <__assert_fail@plt+0x4bd8>
   15f6c:	ldr	r0, [r4, #36]	; 0x24
   15f70:	add	r9, r6, r3
   15f74:	cmp	r9, r0
   15f78:	bls	16040 <__assert_fail@plt+0x4adc>
   15f7c:	ldm	sl, {r0, r1}
   15f80:	ldr	r3, [sp, #4]
   15f84:	stm	r3, {r0, r1}
   15f88:	str	r6, [r4, #28]
   15f8c:	b	15ff8 <__assert_fail@plt+0x4a94>
   15f90:	ldr	r3, [r4, #24]
   15f94:	ldr	r1, [r4]
   15f98:	add	r3, r5, r3
   15f9c:	ldr	r0, [r4, #4]
   15fa0:	mov	r2, sl
   15fa4:	add	r1, r1, r3
   15fa8:	b	15e80 <__assert_fail@plt+0x491c>
   15fac:	cmn	r3, #3
   15fb0:	bne	15fc4 <__assert_fail@plt+0x4a60>
   15fb4:	ldr	r2, [r4, #36]	; 0x24
   15fb8:	ldr	r3, [r4, #48]	; 0x30
   15fbc:	cmp	r2, r3
   15fc0:	blt	15fec <__assert_fail@plt+0x4a88>
   15fc4:	ldr	r3, [r4, #4]
   15fc8:	ldr	r2, [sp, #4]
   15fcc:	cmn	sl, #1
   15fd0:	strb	r9, [r3, r5]
   15fd4:	ldr	r3, [r4, #8]
   15fd8:	add	r5, r5, #1
   15fdc:	str	r9, [r3, r2, lsl #2]
   15fe0:	ldmeq	r8, {r0, r1}
   15fe4:	stmeq	r6, {r0, r1}
   15fe8:	b	15e04 <__assert_fail@plt+0x48a0>
   15fec:	ldm	r8, {r0, r1}
   15ff0:	stm	r6, {r0, r1}
   15ff4:	str	r5, [r4, #28]
   15ff8:	mov	r0, #0
   15ffc:	str	r5, [r4, #32]
   16000:	add	sp, sp, #100	; 0x64
   16004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16008:	ldr	r1, [r4]
   1600c:	ldr	lr, [r4, #24]
   16010:	add	r1, r1, r5
   16014:	add	r1, r1, r3
   16018:	ldrb	r1, [r1, lr]
   1601c:	ldrb	r1, [ip, r1]
   16020:	strb	r1, [r9, r3]
   16024:	add	r3, r3, #1
   16028:	b	15ef0 <__assert_fail@plt+0x498c>
   1602c:	ldr	r9, [r4, #24]
   16030:	add	r3, r5, r9
   16034:	ldr	r9, [r4]
   16038:	add	r9, r9, r3
   1603c:	b	15ef8 <__assert_fail@plt+0x4994>
   16040:	ldr	r2, [r4, #12]
   16044:	cmp	r2, #0
   16048:	bne	1606c <__assert_fail@plt+0x4b08>
   1604c:	lsl	r0, r0, #2
   16050:	str	r3, [sp, #4]
   16054:	bl	2141c <__assert_fail@plt+0xfeb8>
   16058:	ldr	r3, [sp, #4]
   1605c:	cmp	r0, #0
   16060:	str	r0, [r4, #12]
   16064:	moveq	r0, #12
   16068:	beq	16000 <__assert_fail@plt+0x4a9c>
   1606c:	ldrb	r2, [r4, #76]	; 0x4c
   16070:	cmp	r2, #0
   16074:	beq	16108 <__assert_fail@plt+0x4ba4>
   16078:	ldr	r0, [r4, #4]
   1607c:	mov	r2, r3
   16080:	add	r1, sp, #32
   16084:	add	r0, r0, r6
   16088:	str	r3, [sp, #4]
   1608c:	bl	11264 <memcpy@plt>
   16090:	ldr	r1, [r4, #8]
   16094:	ldr	r0, [r4, #12]
   16098:	lsl	r2, r6, #2
   1609c:	ldr	r3, [sp, #4]
   160a0:	add	ip, r1, r2
   160a4:	str	fp, [r1, r6, lsl #2]
   160a8:	mvn	lr, #0
   160ac:	add	r1, r0, r2
   160b0:	mov	r2, #1
   160b4:	str	r5, [r0, r6, lsl #2]
   160b8:	cmp	r2, r3
   160bc:	bcc	1611c <__assert_fail@plt+0x4bb8>
   160c0:	ldr	r2, [r4, #52]	; 0x34
   160c4:	ldr	r7, [r4, #48]	; 0x30
   160c8:	cmp	r5, r2
   160cc:	sub	r3, r3, r8
   160d0:	ldrlt	r2, [r4, #56]	; 0x38
   160d4:	add	r7, r3, r7
   160d8:	addlt	r3, r2, r3
   160dc:	strlt	r3, [r4, #56]	; 0x38
   160e0:	ldr	r3, [r4, #36]	; 0x24
   160e4:	str	r7, [r4, #48]	; 0x30
   160e8:	cmp	r7, r3
   160ec:	movge	r7, r3
   160f0:	mov	r6, r9
   160f4:	add	r5, r5, r8
   160f8:	b	15da8 <__assert_fail@plt+0x4844>
   160fc:	ldr	r1, [r4, #12]
   16100:	str	r2, [r1, r2, lsl #2]
   16104:	add	r2, r2, #1
   16108:	cmp	r2, r6
   1610c:	bne	160fc <__assert_fail@plt+0x4b98>
   16110:	mov	r2, #1
   16114:	strb	r2, [r4, #76]	; 0x4c
   16118:	b	16078 <__assert_fail@plt+0x4b14>
   1611c:	ldr	r0, [sp, #8]
   16120:	cmp	r2, r8
   16124:	movcc	r0, r2
   16128:	add	r0, r5, r0
   1612c:	str	r0, [r1, r2, lsl #2]
   16130:	str	lr, [ip, r2, lsl #2]
   16134:	add	r2, r2, #1
   16138:	b	160b8 <__assert_fail@plt+0x4b54>
   1613c:	ldr	r0, [r4, #4]
   16140:	mov	r2, r8
   16144:	mov	r1, r9
   16148:	add	r0, r0, r6
   1614c:	bl	11264 <memcpy@plt>
   16150:	ldrb	r3, [r4, #76]	; 0x4c
   16154:	cmp	r3, #0
   16158:	bne	1618c <__assert_fail@plt+0x4c28>
   1615c:	ldr	r2, [r4, #8]
   16160:	add	r5, r5, r8
   16164:	add	r3, r6, #1
   16168:	add	r8, r6, r8
   1616c:	mvn	r1, #0
   16170:	str	fp, [r2, r6, lsl #2]
   16174:	cmp	r3, r8
   16178:	mov	r6, r3
   1617c:	bge	15da8 <__assert_fail@plt+0x4844>
   16180:	str	r1, [r2, r3, lsl #2]
   16184:	add	r3, r3, #1
   16188:	b	16174 <__assert_fail@plt+0x4c10>
   1618c:	ldr	r2, [r4, #12]
   16190:	mov	r3, #0
   16194:	add	r2, r2, r6, lsl #2
   16198:	add	r1, r5, r3
   1619c:	str	r1, [r2, r3, lsl #2]
   161a0:	add	r3, r3, #1
   161a4:	cmp	r8, r3
   161a8:	bne	16198 <__assert_fail@plt+0x4c34>
   161ac:	b	1615c <__assert_fail@plt+0x4bf8>
   161b0:	sub	r3, r0, #1
   161b4:	cmn	r3, #3
   161b8:	bne	161cc <__assert_fail@plt+0x4c68>
   161bc:	ldr	r2, [r4, #36]	; 0x24
   161c0:	ldr	r3, [r4, #48]	; 0x30
   161c4:	cmp	r2, r3
   161c8:	blt	15f7c <__assert_fail@plt+0x4a18>
   161cc:	ldr	r3, [r4]
   161d0:	ldr	r2, [r4, #24]
   161d4:	add	r3, r3, r5
   161d8:	mov	r1, r6
   161dc:	ldrb	r3, [r3, r2]
   161e0:	ldr	r2, [r4, #64]	; 0x40
   161e4:	cmp	r2, #0
   161e8:	ldrbne	r3, [r2, r3]
   161ec:	ldr	r2, [r4, #4]
   161f0:	strb	r3, [r2, r6]
   161f4:	ldrb	r2, [r4, #76]	; 0x4c
   161f8:	cmp	r2, #0
   161fc:	ldrne	r2, [r4, #12]
   16200:	strne	r5, [r2, r6, lsl #2]
   16204:	ldr	r2, [r4, #8]
   16208:	cmn	r8, #1
   1620c:	add	r5, r5, #1
   16210:	str	r3, [r2, r1, lsl #2]
   16214:	ldreq	r3, [sp, #4]
   16218:	ldmeq	sl, {r0, r1}
   1621c:	add	r6, r6, #1
   16220:	stmeq	r3, {r0, r1}
   16224:	b	15da8 <__assert_fail@plt+0x4844>
   16228:	push	{r4, r5, r6, lr}
   1622c:	mov	r4, r0
   16230:	ldr	r3, [r0, #36]	; 0x24
   16234:	ldr	r6, [r0, #48]	; 0x30
   16238:	ldr	r5, [r0, #28]
   1623c:	cmp	r3, r6
   16240:	movlt	r6, r3
   16244:	cmp	r5, r6
   16248:	blt	16258 <__assert_fail@plt+0x4cf4>
   1624c:	str	r5, [r4, #28]
   16250:	str	r5, [r4, #32]
   16254:	pop	{r4, r5, r6, pc}
   16258:	ldr	r3, [r4]
   1625c:	ldr	r2, [r4, #24]
   16260:	add	r3, r3, r5
   16264:	ldrb	r0, [r3, r2]
   16268:	ldr	r3, [r4, #64]	; 0x40
   1626c:	cmp	r3, #0
   16270:	ldrbne	r0, [r3, r0]
   16274:	bl	114d4 <toupper@plt>
   16278:	ldr	r3, [r4, #4]
   1627c:	strb	r0, [r3, r5]
   16280:	add	r5, r5, #1
   16284:	b	16244 <__assert_fail@plt+0x4ce0>
   16288:	ldr	r3, [r0, #36]	; 0x24
   1628c:	push	{r4, r5, r6, lr}
   16290:	cmn	r3, #-536870910	; 0xe0000002
   16294:	bls	162a4 <__assert_fail@plt+0x4d40>
   16298:	mov	r5, #12
   1629c:	mov	r0, r5
   162a0:	pop	{r4, r5, r6, pc}
   162a4:	ldr	r2, [r0, #48]	; 0x30
   162a8:	lsl	r3, r3, #1
   162ac:	cmp	r3, r2
   162b0:	movge	r3, r2
   162b4:	cmp	r3, r1
   162b8:	movge	r1, r3
   162bc:	mov	r4, r0
   162c0:	bl	156b4 <__assert_fail@plt+0x4150>
   162c4:	subs	r5, r0, #0
   162c8:	bne	1629c <__assert_fail@plt+0x4d38>
   162cc:	ldr	r0, [r4, #100]	; 0x64
   162d0:	cmp	r0, #0
   162d4:	beq	162f4 <__assert_fail@plt+0x4d90>
   162d8:	ldr	r1, [r4, #36]	; 0x24
   162dc:	add	r1, r1, #1
   162e0:	lsl	r1, r1, #2
   162e4:	bl	2145c <__assert_fail@plt+0xfef8>
   162e8:	cmp	r0, #0
   162ec:	beq	16298 <__assert_fail@plt+0x4d34>
   162f0:	str	r0, [r4, #100]	; 0x64
   162f4:	ldrb	r3, [r4, #72]	; 0x48
   162f8:	cmp	r3, #0
   162fc:	ldr	r3, [r4, #80]	; 0x50
   16300:	beq	16320 <__assert_fail@plt+0x4dbc>
   16304:	cmp	r3, #1
   16308:	mov	r0, r4
   1630c:	ble	16318 <__assert_fail@plt+0x4db4>
   16310:	pop	{r4, r5, r6, lr}
   16314:	b	15d58 <__assert_fail@plt+0x47f4>
   16318:	bl	16228 <__assert_fail@plt+0x4cc4>
   1631c:	b	1629c <__assert_fail@plt+0x4d38>
   16320:	cmp	r3, #1
   16324:	ble	16334 <__assert_fail@plt+0x4dd0>
   16328:	mov	r0, r4
   1632c:	bl	15c04 <__assert_fail@plt+0x46a0>
   16330:	b	1629c <__assert_fail@plt+0x4d38>
   16334:	ldr	r3, [r4, #64]	; 0x40
   16338:	cmp	r3, #0
   1633c:	beq	1629c <__assert_fail@plt+0x4d38>
   16340:	mov	r0, r4
   16344:	bl	15048 <__assert_fail@plt+0x3ae4>
   16348:	b	1629c <__assert_fail@plt+0x4d38>
   1634c:	push	{r4, lr}
   16350:	mov	r4, r0
   16354:	ldr	r0, [r0]
   16358:	bl	1370c <__assert_fail@plt+0x21a8>
   1635c:	ldr	r0, [r4, #4]
   16360:	bl	1370c <__assert_fail@plt+0x21a8>
   16364:	ldr	r0, [r4, #8]
   16368:	bl	1370c <__assert_fail@plt+0x21a8>
   1636c:	ldr	r0, [r4, #12]
   16370:	bl	1370c <__assert_fail@plt+0x21a8>
   16374:	mov	r0, r4
   16378:	pop	{r4, lr}
   1637c:	b	1370c <__assert_fail@plt+0x21a8>
   16380:	ldr	r2, [r0, #4]
   16384:	ldr	r3, [pc, #32]	; 163ac <__assert_fail@plt+0x4e48>
   16388:	and	r3, r3, r2
   1638c:	cmp	r3, #6
   16390:	bne	1639c <__assert_fail@plt+0x4e38>
   16394:	ldr	r0, [r0]
   16398:	b	1634c <__assert_fail@plt+0x4de8>
   1639c:	cmp	r3, #3
   163a0:	bxne	lr
   163a4:	ldr	r0, [r0]
   163a8:	b	1370c <__assert_fail@plt+0x21a8>
   163ac:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   163b0:	add	r0, r1, #20
   163b4:	push	{r4, lr}
   163b8:	bl	16380 <__assert_fail@plt+0x4e1c>
   163bc:	mov	r0, #0
   163c0:	pop	{r4, pc}
   163c4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163c8:	mov	r4, r0
   163cc:	ldr	r6, [r0, #4]
   163d0:	ldr	r3, [r0, #8]
   163d4:	stm	sp, {r1, r2}
   163d8:	cmp	r3, r6
   163dc:	mov	r7, sp
   163e0:	ldrb	r5, [sp, #4]
   163e4:	bcc	164b8 <__assert_fail@plt+0x4f54>
   163e8:	ldr	r3, [pc, #376]	; 16568 <__assert_fail@plt+0x5004>
   163ec:	lsl	r8, r6, #1
   163f0:	cmp	r8, r3
   163f4:	bls	16404 <__assert_fail@plt+0x4ea0>
   163f8:	mvn	r0, #0
   163fc:	add	sp, sp, #12
   16400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16404:	lsl	r1, r6, #4
   16408:	ldr	r0, [r0]
   1640c:	bl	2145c <__assert_fail@plt+0xfef8>
   16410:	cmp	r0, #0
   16414:	beq	163f8 <__assert_fail@plt+0x4e94>
   16418:	lsl	r6, r6, #3
   1641c:	mov	r1, r6
   16420:	str	r0, [r4]
   16424:	ldr	r0, [r4, #12]
   16428:	bl	2145c <__assert_fail@plt+0xfef8>
   1642c:	mov	r1, r6
   16430:	mov	r6, #12
   16434:	mul	r6, r6, r8
   16438:	mov	sl, r0
   1643c:	ldr	r0, [r4, #16]
   16440:	bl	2145c <__assert_fail@plt+0xfef8>
   16444:	mov	r1, r6
   16448:	mov	fp, r0
   1644c:	ldr	r0, [r4, #20]
   16450:	bl	2145c <__assert_fail@plt+0xfef8>
   16454:	mov	r1, r6
   16458:	mov	r9, r0
   1645c:	ldr	r0, [r4, #24]
   16460:	bl	2145c <__assert_fail@plt+0xfef8>
   16464:	cmp	fp, #0
   16468:	cmpne	sl, #0
   1646c:	mov	r6, r0
   16470:	beq	16480 <__assert_fail@plt+0x4f1c>
   16474:	cmp	r0, #0
   16478:	cmpne	r9, #0
   1647c:	bne	164a4 <__assert_fail@plt+0x4f40>
   16480:	mov	r0, sl
   16484:	bl	1370c <__assert_fail@plt+0x21a8>
   16488:	mov	r0, fp
   1648c:	bl	1370c <__assert_fail@plt+0x21a8>
   16490:	mov	r0, r9
   16494:	bl	1370c <__assert_fail@plt+0x21a8>
   16498:	mov	r0, r6
   1649c:	bl	1370c <__assert_fail@plt+0x21a8>
   164a0:	b	163f8 <__assert_fail@plt+0x4e94>
   164a4:	str	sl, [r4, #12]
   164a8:	str	fp, [r4, #16]
   164ac:	str	r9, [r4, #20]
   164b0:	str	r0, [r4, #24]
   164b4:	str	r8, [r4, #4]
   164b8:	ldr	ip, [r4, #8]
   164bc:	ldr	r3, [r4]
   164c0:	ldm	r7, {r0, r1}
   164c4:	add	r3, r3, ip, lsl #3
   164c8:	cmp	r5, #5
   164cc:	stm	r3, {r0, r1}
   164d0:	subne	r5, r5, #6
   164d4:	bic	r1, r1, #261120	; 0x3fc00
   164d8:	bic	r1, r1, #768	; 0x300
   164dc:	clzne	r5, r5
   164e0:	str	r1, [r3, #4]
   164e4:	lsrne	r5, r5, #5
   164e8:	bne	164fc <__assert_fail@plt+0x4f98>
   164ec:	ldr	r5, [r4, #92]	; 0x5c
   164f0:	cmp	r5, #1
   164f4:	movle	r5, #0
   164f8:	movgt	r5, #1
   164fc:	ldrb	r2, [r3, #6]
   16500:	bic	r2, r2, #16
   16504:	orr	r5, r2, r5, lsl #4
   16508:	strb	r5, [r3, #6]
   1650c:	ldr	r3, [r4, #12]
   16510:	mvn	r2, #0
   16514:	str	r2, [r3, ip, lsl #2]
   16518:	ldr	r1, [r4, #8]
   1651c:	mov	r2, #12
   16520:	ldr	ip, [r4, #20]
   16524:	mul	r1, r2, r1
   16528:	mov	r3, #0
   1652c:	add	r0, ip, r1
   16530:	str	r3, [ip, r1]
   16534:	str	r3, [r0, #4]
   16538:	str	r3, [r0, #8]
   1653c:	ldr	r1, [r4, #8]
   16540:	ldr	r0, [r4, #24]
   16544:	mul	r2, r2, r1
   16548:	add	r1, r0, r2
   1654c:	str	r3, [r0, r2]
   16550:	str	r3, [r1, #4]
   16554:	str	r3, [r1, #8]
   16558:	ldr	r0, [r4, #8]
   1655c:	add	r3, r0, #1
   16560:	str	r3, [r4, #8]
   16564:	b	163fc <__assert_fail@plt+0x4e98>
   16568:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1656c:	ldr	r3, [r0]
   16570:	push	{r4, r5, r6, r7, r8, lr}
   16574:	lsl	r7, r1, #3
   16578:	add	r3, r3, r7
   1657c:	mov	r6, r1
   16580:	mov	r4, r2
   16584:	ldm	r3, {r1, r2}
   16588:	mov	r5, r0
   1658c:	bl	163c4 <__assert_fail@plt+0x4e60>
   16590:	cmn	r0, #1
   16594:	popeq	{r4, r5, r6, r7, r8, pc}
   16598:	ldr	lr, [r5]
   1659c:	ldr	ip, [pc, #80]	; 165f4 <__assert_fail@plt+0x5090>
   165a0:	add	r1, lr, r0, lsl #3
   165a4:	and	r2, r4, ip
   165a8:	ldr	r3, [r1, #4]
   165ac:	ldr	r4, [pc, #68]	; 165f8 <__assert_fail@plt+0x5094>
   165b0:	add	r7, lr, r7
   165b4:	bic	r3, r3, r4
   165b8:	orr	r3, r3, r2, lsl #8
   165bc:	str	r3, [r1, #4]
   165c0:	ldr	lr, [r7, #4]
   165c4:	bic	r3, r3, r4
   165c8:	and	ip, ip, lr, lsr #8
   165cc:	orr	r2, r2, ip
   165d0:	orr	r3, r3, r2, lsl #8
   165d4:	str	r3, [r1, #4]
   165d8:	lsr	r2, r3, #16
   165dc:	uxtb	r3, r2
   165e0:	orr	r3, r3, #4
   165e4:	strb	r3, [r1, #6]
   165e8:	ldr	r3, [r5, #16]
   165ec:	str	r6, [r3, r0, lsl #2]
   165f0:	pop	{r4, r5, r6, r7, r8, pc}
   165f4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   165f8:	andeq	pc, r3, r0, lsl #30
   165fc:	push	{r4, lr}
   16600:	mov	r4, r0
   16604:	ldr	r0, [r0, #24]
   16608:	bl	1370c <__assert_fail@plt+0x21a8>
   1660c:	ldr	r0, [r4, #36]	; 0x24
   16610:	bl	1370c <__assert_fail@plt+0x21a8>
   16614:	ldr	r3, [r4, #40]	; 0x28
   16618:	add	r2, r4, #4
   1661c:	cmp	r3, r2
   16620:	beq	16634 <__assert_fail@plt+0x50d0>
   16624:	ldr	r0, [r3, #8]
   16628:	bl	1370c <__assert_fail@plt+0x21a8>
   1662c:	ldr	r0, [r4, #40]	; 0x28
   16630:	bl	1370c <__assert_fail@plt+0x21a8>
   16634:	ldr	r0, [r4, #12]
   16638:	bl	1370c <__assert_fail@plt+0x21a8>
   1663c:	ldr	r0, [r4, #48]	; 0x30
   16640:	bl	1370c <__assert_fail@plt+0x21a8>
   16644:	ldr	r0, [r4, #44]	; 0x2c
   16648:	bl	1370c <__assert_fail@plt+0x21a8>
   1664c:	mov	r0, r4
   16650:	pop	{r4, lr}
   16654:	b	1370c <__assert_fail@plt+0x21a8>
   16658:	push	{r4, lr}
   1665c:	mov	r4, r0
   16660:	ldr	r0, [r0, #8]
   16664:	bl	1370c <__assert_fail@plt+0x21a8>
   16668:	ldr	r0, [r4, #12]
   1666c:	bl	1370c <__assert_fail@plt+0x21a8>
   16670:	ldrb	r3, [r4, #75]	; 0x4b
   16674:	cmp	r3, #0
   16678:	popeq	{r4, pc}
   1667c:	ldr	r0, [r4, #4]
   16680:	pop	{r4, lr}
   16684:	b	1370c <__assert_fail@plt+0x21a8>
   16688:	ldr	r3, [r0]
   1668c:	push	{r4, r5, r6, r7, r8, lr}
   16690:	cmp	r3, #0
   16694:	mov	r4, r0
   16698:	movne	r5, #0
   1669c:	bne	1672c <__assert_fail@plt+0x51c8>
   166a0:	ldr	r0, [r4, #12]
   166a4:	bl	1370c <__assert_fail@plt+0x21a8>
   166a8:	mov	r5, #0
   166ac:	mov	r6, r5
   166b0:	ldr	r3, [r4, #8]
   166b4:	cmp	r3, r6
   166b8:	bhi	1673c <__assert_fail@plt+0x51d8>
   166bc:	ldr	r0, [r4, #20]
   166c0:	bl	1370c <__assert_fail@plt+0x21a8>
   166c4:	ldr	r0, [r4, #24]
   166c8:	bl	1370c <__assert_fail@plt+0x21a8>
   166cc:	ldr	r0, [r4, #28]
   166d0:	bl	1370c <__assert_fail@plt+0x21a8>
   166d4:	ldr	r0, [r4]
   166d8:	bl	1370c <__assert_fail@plt+0x21a8>
   166dc:	ldr	r3, [r4, #32]
   166e0:	cmp	r3, #0
   166e4:	movne	r6, #0
   166e8:	movne	r8, #12
   166ec:	bne	167b4 <__assert_fail@plt+0x5250>
   166f0:	ldr	r0, [r4, #32]
   166f4:	bl	1370c <__assert_fail@plt+0x21a8>
   166f8:	ldr	r0, [r4, #60]	; 0x3c
   166fc:	ldr	r3, [pc, #220]	; 167e0 <__assert_fail@plt+0x527c>
   16700:	cmp	r0, r3
   16704:	bne	167d8 <__assert_fail@plt+0x5274>
   16708:	ldr	r0, [r4, #132]	; 0x84
   1670c:	bl	1370c <__assert_fail@plt+0x21a8>
   16710:	mov	r0, r4
   16714:	pop	{r4, r5, r6, r7, r8, lr}
   16718:	b	1370c <__assert_fail@plt+0x21a8>
   1671c:	ldr	r0, [r4]
   16720:	add	r0, r0, r5, lsl #3
   16724:	bl	16380 <__assert_fail@plt+0x4e1c>
   16728:	add	r5, r5, #1
   1672c:	ldr	r3, [r4, #8]
   16730:	cmp	r3, r5
   16734:	bhi	1671c <__assert_fail@plt+0x51b8>
   16738:	b	166a0 <__assert_fail@plt+0x513c>
   1673c:	ldr	r3, [r4, #24]
   16740:	cmp	r3, #0
   16744:	beq	16754 <__assert_fail@plt+0x51f0>
   16748:	add	r3, r3, r5
   1674c:	ldr	r0, [r3, #8]
   16750:	bl	1370c <__assert_fail@plt+0x21a8>
   16754:	ldr	r3, [r4, #28]
   16758:	cmp	r3, #0
   1675c:	beq	1676c <__assert_fail@plt+0x5208>
   16760:	add	r3, r3, r5
   16764:	ldr	r0, [r3, #8]
   16768:	bl	1370c <__assert_fail@plt+0x21a8>
   1676c:	ldr	r3, [r4, #20]
   16770:	cmp	r3, #0
   16774:	beq	16784 <__assert_fail@plt+0x5220>
   16778:	add	r3, r3, r5
   1677c:	ldr	r0, [r3, #8]
   16780:	bl	1370c <__assert_fail@plt+0x21a8>
   16784:	add	r6, r6, #1
   16788:	add	r5, r5, #12
   1678c:	b	166b0 <__assert_fail@plt+0x514c>
   16790:	ldr	r5, [r4, #32]
   16794:	mov	r7, #0
   16798:	mla	r5, r8, r6, r5
   1679c:	ldr	r3, [r5]
   167a0:	cmp	r7, r3
   167a4:	blt	167c4 <__assert_fail@plt+0x5260>
   167a8:	ldr	r0, [r5, #8]
   167ac:	bl	1370c <__assert_fail@plt+0x21a8>
   167b0:	add	r6, r6, #1
   167b4:	ldr	r3, [r4, #68]	; 0x44
   167b8:	cmp	r3, r6
   167bc:	bcs	16790 <__assert_fail@plt+0x522c>
   167c0:	b	166f0 <__assert_fail@plt+0x518c>
   167c4:	ldr	r3, [r5, #8]
   167c8:	ldr	r0, [r3, r7, lsl #2]
   167cc:	bl	165fc <__assert_fail@plt+0x5098>
   167d0:	add	r7, r7, #1
   167d4:	b	1679c <__assert_fail@plt+0x5238>
   167d8:	bl	1370c <__assert_fail@plt+0x21a8>
   167dc:	b	16708 <__assert_fail@plt+0x51a4>
   167e0:	andeq	r2, r2, r4, asr sp
   167e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167e8:	mov	r5, #0
   167ec:	mov	r6, r0
   167f0:	mov	r8, r5
   167f4:	ldr	r3, [r6, #124]	; 0x7c
   167f8:	cmp	r5, r3
   167fc:	blt	1680c <__assert_fail@plt+0x52a8>
   16800:	str	r8, [r6, #124]	; 0x7c
   16804:	str	r8, [r6, #108]	; 0x6c
   16808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1680c:	ldr	r3, [r6, #132]	; 0x84
   16810:	mov	r7, #0
   16814:	ldr	r4, [r3, r5, lsl #2]
   16818:	ldr	r3, [r4, #16]
   1681c:	cmp	r7, r3
   16820:	blt	16858 <__assert_fail@plt+0x52f4>
   16824:	ldr	r0, [r4, #20]
   16828:	bl	1370c <__assert_fail@plt+0x21a8>
   1682c:	ldr	r3, [r4, #8]
   16830:	cmp	r3, #0
   16834:	beq	16848 <__assert_fail@plt+0x52e4>
   16838:	ldr	r0, [r3, #8]
   1683c:	bl	1370c <__assert_fail@plt+0x21a8>
   16840:	ldr	r0, [r4, #8]
   16844:	bl	1370c <__assert_fail@plt+0x21a8>
   16848:	mov	r0, r4
   1684c:	bl	1370c <__assert_fail@plt+0x21a8>
   16850:	add	r5, r5, #1
   16854:	b	167f4 <__assert_fail@plt+0x5290>
   16858:	ldr	r3, [r4, #20]
   1685c:	ldr	r9, [r3, r7, lsl #2]
   16860:	add	r7, r7, #1
   16864:	ldr	r0, [r9, #16]
   16868:	bl	1370c <__assert_fail@plt+0x21a8>
   1686c:	mov	r0, r9
   16870:	bl	1370c <__assert_fail@plt+0x21a8>
   16874:	b	16818 <__assert_fail@plt+0x52b4>
   16878:	push	{r4, r5, r6, lr}
   1687c:	mov	r4, r0
   16880:	ldr	r0, [r0, #8]
   16884:	add	r5, r4, #12
   16888:	cmp	r0, r5
   1688c:	beq	16894 <__assert_fail@plt+0x5330>
   16890:	bl	1370c <__assert_fail@plt+0x21a8>
   16894:	mov	r2, #0
   16898:	mov	r3, #16
   1689c:	str	r5, [r4, #8]
   168a0:	stm	r4, {r2, r3}
   168a4:	pop	{r4, r5, r6, pc}
   168a8:	push	{r4, r5, r6, r7, r8, lr}
   168ac:	subs	r4, r0, #0
   168b0:	movne	r5, #0
   168b4:	movne	r7, #24
   168b8:	bne	168ec <__assert_fail@plt+0x5388>
   168bc:	mov	r0, #0
   168c0:	pop	{r4, r5, r6, r7, r8, pc}
   168c4:	mul	r6, r7, r5
   168c8:	ldr	r2, [r4, #8]
   168cc:	add	r5, r5, #1
   168d0:	add	r2, r2, r6
   168d4:	ldr	r0, [r2, #20]
   168d8:	bl	1370c <__assert_fail@plt+0x21a8>
   168dc:	ldr	r3, [r4, #8]
   168e0:	add	r3, r3, r6
   168e4:	ldr	r0, [r3, #8]
   168e8:	bl	1370c <__assert_fail@plt+0x21a8>
   168ec:	ldr	r3, [r4]
   168f0:	cmp	r5, r3
   168f4:	blt	168c4 <__assert_fail@plt+0x5360>
   168f8:	ldr	r0, [r4, #8]
   168fc:	bl	1370c <__assert_fail@plt+0x21a8>
   16900:	b	168bc <__assert_fail@plt+0x5358>
   16904:	mov	r3, r1
   16908:	ldr	r2, [r1, #28]
   1690c:	ldrb	r1, [r1, #24]
   16910:	sub	r1, r1, #2
   16914:	cmp	r1, #14
   16918:	ldrls	pc, [pc, r1, lsl #2]
   1691c:	b	16a28 <__assert_fail@plt+0x54c4>
   16920:	andeq	r6, r1, r8, lsr sl
   16924:	andeq	r6, r1, r8, lsr #20
   16928:	andeq	r6, r1, r4, lsl #20
   1692c:	andeq	r6, r1, r8, lsr #20
   16930:	andeq	r6, r1, r8, lsr #20
   16934:	andeq	r6, r1, r8, lsr #20
   16938:	andeq	r6, r1, ip, ror #19
   1693c:	andeq	r6, r1, ip, ror #19
   16940:	andeq	r6, r1, ip, asr r9
   16944:	andeq	r6, r1, ip, asr r9
   16948:	andeq	r6, r1, ip, ror #19
   1694c:	andeq	r6, r1, r8, lsr #20
   16950:	andeq	r6, r1, r8, lsr #20
   16954:	andeq	r6, r1, r8, lsr #20
   16958:	andeq	r6, r1, r8, lsr sl
   1695c:	ldrb	r1, [r0, #88]	; 0x58
   16960:	push	{r4, r5, r6, r7, r8, lr}
   16964:	mov	r4, #12
   16968:	orr	r1, r1, #1
   1696c:	strb	r1, [r0, #88]	; 0x58
   16970:	ldr	r1, [r3, #4]
   16974:	mul	r2, r4, r2
   16978:	cmp	r1, #0
   1697c:	mov	r7, #2
   16980:	ldreq	r1, [r3, #16]
   16984:	ldrne	r1, [r1, #12]
   16988:	ldr	r8, [r1, #28]
   1698c:	ldr	r1, [r3, #8]
   16990:	cmp	r1, #0
   16994:	ldrne	r3, [r1, #12]
   16998:	ldreq	r3, [r3, #16]
   1699c:	ldr	r5, [r3, #28]
   169a0:	ldr	r3, [r0, #20]
   169a4:	mov	r0, #8
   169a8:	add	r6, r3, r2
   169ac:	str	r7, [r3, r2]
   169b0:	bl	2141c <__assert_fail@plt+0xfeb8>
   169b4:	cmp	r0, #0
   169b8:	str	r0, [r6, #8]
   169bc:	beq	16a40 <__assert_fail@plt+0x54dc>
   169c0:	cmp	r8, r5
   169c4:	moveq	r3, #1
   169c8:	streq	r3, [r6, #4]
   169cc:	streq	r8, [r0]
   169d0:	beq	169e4 <__assert_fail@plt+0x5480>
   169d4:	str	r7, [r6, #4]
   169d8:	strlt	r8, [r0]
   169dc:	strlt	r5, [r0, #4]
   169e0:	stmge	r0, {r5, r8}
   169e4:	mov	r0, #0
   169e8:	pop	{r4, r5, r6, r7, r8, pc}
   169ec:	ldr	r1, [r3, #16]
   169f0:	ldr	r3, [r0, #20]
   169f4:	ldr	r1, [r1, #28]
   169f8:	mov	r0, #12
   169fc:	mla	r0, r0, r2, r3
   16a00:	b	15aa8 <__assert_fail@plt+0x4544>
   16a04:	ldr	r1, [r3, #16]
   16a08:	ldr	ip, [r0, #12]
   16a0c:	ldr	r1, [r1, #28]
   16a10:	str	r1, [ip, r2, lsl #2]
   16a14:	ldrb	r3, [r3, #24]
   16a18:	cmp	r3, #4
   16a1c:	bne	16a38 <__assert_fail@plt+0x54d4>
   16a20:	ldr	r3, [r0, #20]
   16a24:	b	169f8 <__assert_fail@plt+0x5494>
   16a28:	ldr	r3, [r3, #16]
   16a2c:	ldr	r1, [r3, #28]
   16a30:	ldr	r3, [r0, #12]
   16a34:	str	r1, [r3, r2, lsl #2]
   16a38:	mov	r0, #0
   16a3c:	bx	lr
   16a40:	mov	r0, r4
   16a44:	pop	{r4, r5, r6, r7, r8, pc}
   16a48:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a4c:	mov	r4, r0
   16a50:	ldr	sl, [r0, #84]	; 0x54
   16a54:	mov	r9, r1
   16a58:	mov	r6, r2
   16a5c:	mov	r5, #0
   16a60:	mov	r7, #24
   16a64:	mov	r8, #1
   16a68:	ldr	r3, [r9, #4]
   16a6c:	cmp	r5, r3
   16a70:	blt	16a80 <__assert_fail@plt+0x551c>
   16a74:	mov	r0, #0
   16a78:	add	sp, sp, #12
   16a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a80:	ldr	r3, [r9, #8]
   16a84:	ldr	fp, [r3, r5, lsl #2]
   16a88:	ldr	r3, [sl]
   16a8c:	add	r2, r3, fp, lsl #3
   16a90:	ldrb	r2, [r2, #4]
   16a94:	cmp	r2, #8
   16a98:	bne	16b3c <__assert_fail@plt+0x55d8>
   16a9c:	ldr	r2, [r3, fp, lsl #3]
   16aa0:	cmp	r2, #31
   16aa4:	bgt	16b3c <__assert_fail@plt+0x55d8>
   16aa8:	ldr	r3, [sl, #80]	; 0x50
   16aac:	lsr	r3, r3, r2
   16ab0:	tst	r3, #1
   16ab4:	beq	16b3c <__assert_fail@plt+0x55d8>
   16ab8:	ldr	r1, [r4, #128]	; 0x80
   16abc:	ldr	r3, [r4, #124]	; 0x7c
   16ac0:	ldr	r0, [r4, #132]	; 0x84
   16ac4:	cmp	r1, r3
   16ac8:	bne	16af0 <__assert_fail@plt+0x558c>
   16acc:	lsl	r3, r1, #1
   16ad0:	lsl	r1, r1, #3
   16ad4:	str	r3, [sp]
   16ad8:	bl	2145c <__assert_fail@plt+0xfef8>
   16adc:	cmp	r0, #0
   16ae0:	beq	16b44 <__assert_fail@plt+0x55e0>
   16ae4:	ldr	r3, [sp]
   16ae8:	str	r0, [r4, #132]	; 0x84
   16aec:	str	r3, [r4, #128]	; 0x80
   16af0:	ldr	r2, [r4, #124]	; 0x7c
   16af4:	ldr	r3, [r4, #132]	; 0x84
   16af8:	mov	r1, r7
   16afc:	mov	r0, r8
   16b00:	str	r2, [sp, #4]
   16b04:	str	r3, [sp]
   16b08:	bl	213d4 <__assert_fail@plt+0xfe70>
   16b0c:	ldr	r3, [sp]
   16b10:	ldr	r2, [sp, #4]
   16b14:	str	r0, [r3, r2, lsl #2]
   16b18:	ldr	r3, [r4, #124]	; 0x7c
   16b1c:	ldr	r2, [r4, #132]	; 0x84
   16b20:	ldr	r2, [r2, r3, lsl #2]
   16b24:	cmp	r2, #0
   16b28:	beq	16b44 <__assert_fail@plt+0x55e0>
   16b2c:	add	r3, r3, #1
   16b30:	str	fp, [r2, #4]
   16b34:	str	r3, [r4, #124]	; 0x7c
   16b38:	str	r6, [r2]
   16b3c:	add	r5, r5, #1
   16b40:	b	16a68 <__assert_fail@plt+0x5504>
   16b44:	mov	r0, #12
   16b48:	b	16a78 <__assert_fail@plt+0x5514>
   16b4c:	ldr	r3, [r0, #36]	; 0x24
   16b50:	push	{r4, r5, r6, lr}
   16b54:	cmp	r3, r1
   16b58:	mov	r4, r0
   16b5c:	mov	r5, r1
   16b60:	ldr	r6, [r0, #104]	; 0x68
   16b64:	bgt	16b74 <__assert_fail@plt+0x5610>
   16b68:	ldr	r2, [r0, #48]	; 0x30
   16b6c:	cmp	r3, r2
   16b70:	blt	16b9c <__assert_fail@plt+0x5638>
   16b74:	ldr	r3, [r4, #28]
   16b78:	cmp	r5, r3
   16b7c:	bge	16b90 <__assert_fail@plt+0x562c>
   16b80:	cmp	r6, r5
   16b84:	blt	16bb4 <__assert_fail@plt+0x5650>
   16b88:	mov	r0, #0
   16b8c:	pop	{r4, r5, r6, pc}
   16b90:	ldr	r2, [r4, #48]	; 0x30
   16b94:	cmp	r3, r2
   16b98:	bge	16b80 <__assert_fail@plt+0x561c>
   16b9c:	add	r1, r5, #1
   16ba0:	mov	r0, r4
   16ba4:	bl	16288 <__assert_fail@plt+0x4d24>
   16ba8:	cmp	r0, #0
   16bac:	beq	16b80 <__assert_fail@plt+0x561c>
   16bb0:	pop	{r4, r5, r6, pc}
   16bb4:	sub	r2, r5, r6
   16bb8:	ldr	r0, [r4, #100]	; 0x64
   16bbc:	add	r6, r6, #1
   16bc0:	lsl	r2, r2, #2
   16bc4:	mov	r1, #0
   16bc8:	add	r0, r0, r6, lsl #2
   16bcc:	bl	11444 <memset@plt>
   16bd0:	str	r5, [r4, #104]	; 0x68
   16bd4:	b	16b88 <__assert_fail@plt+0x5624>
   16bd8:	push	{r4, r5, r6, r7, r8, lr}
   16bdc:	subs	r4, r0, #0
   16be0:	ldr	r7, [sp, #28]
   16be4:	beq	16c78 <__assert_fail@plt+0x5714>
   16be8:	ldr	r5, [r4]
   16bec:	cmp	r5, #0
   16bf0:	beq	16c78 <__assert_fail@plt+0x5714>
   16bf4:	sub	ip, r5, #1
   16bf8:	mov	r5, #24
   16bfc:	mov	r0, r3
   16c00:	mul	r5, r5, ip
   16c04:	ldr	r3, [r4, #8]
   16c08:	str	ip, [r4]
   16c0c:	add	ip, r3, r5
   16c10:	ldr	r3, [r3, r5]
   16c14:	lsl	r6, r2, #3
   16c18:	str	r3, [r1]
   16c1c:	mov	r2, r6
   16c20:	ldr	r1, [ip, #8]
   16c24:	bl	11264 <memcpy@plt>
   16c28:	ldr	r3, [r4, #8]
   16c2c:	mov	r2, r6
   16c30:	add	r3, r3, r5
   16c34:	ldr	r0, [sp, #24]
   16c38:	ldr	r1, [r3, #8]
   16c3c:	add	r1, r1, r6
   16c40:	bl	11264 <memcpy@plt>
   16c44:	ldr	r0, [r7, #8]
   16c48:	bl	1370c <__assert_fail@plt+0x21a8>
   16c4c:	ldr	r3, [r4, #8]
   16c50:	add	r3, r3, r5
   16c54:	ldr	r0, [r3, #8]
   16c58:	bl	1370c <__assert_fail@plt+0x21a8>
   16c5c:	ldr	r3, [r4, #8]
   16c60:	add	r5, r3, r5
   16c64:	add	r3, r5, #12
   16c68:	ldm	r3, {r0, r1, r2}
   16c6c:	stm	r7, {r0, r1, r2}
   16c70:	ldr	r0, [r5, #4]
   16c74:	pop	{r4, r5, r6, r7, r8, pc}
   16c78:	mvn	r0, #0
   16c7c:	pop	{r4, r5, r6, r7, r8, pc}
   16c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c84:	mov	r9, r3
   16c88:	ldr	r3, [sp, #36]	; 0x24
   16c8c:	mov	r5, r0
   16c90:	tst	r3, #4194304	; 0x400000
   16c94:	mov	r4, r1
   16c98:	mov	r8, r2
   16c9c:	ldr	r6, [sp, #32]
   16ca0:	beq	16cd4 <__assert_fail@plt+0x5770>
   16ca4:	mov	r0, r6
   16ca8:	ldr	r1, [pc, #1816]	; 173c8 <__assert_fail@plt+0x5e64>
   16cac:	bl	111f8 <strcmp@plt>
   16cb0:	cmp	r0, #0
   16cb4:	ldreq	r6, [pc, #1808]	; 173cc <__assert_fail@plt+0x5e68>
   16cb8:	beq	16cd4 <__assert_fail@plt+0x5770>
   16cbc:	mov	r0, r6
   16cc0:	ldr	r1, [pc, #1800]	; 173d0 <__assert_fail@plt+0x5e6c>
   16cc4:	bl	111f8 <strcmp@plt>
   16cc8:	ldr	r3, [pc, #1788]	; 173cc <__assert_fail@plt+0x5e68>
   16ccc:	cmp	r0, #0
   16cd0:	moveq	r6, r3
   16cd4:	ldr	r7, [r9]
   16cd8:	ldr	r3, [r8, #36]	; 0x24
   16cdc:	cmp	r7, r3
   16ce0:	bne	16d08 <__assert_fail@plt+0x57a4>
   16ce4:	lsl	r7, r7, #1
   16ce8:	add	r7, r7, #1
   16cec:	ldr	r0, [r8, #12]
   16cf0:	lsl	r1, r7, #2
   16cf4:	bl	2145c <__assert_fail@plt+0xfef8>
   16cf8:	cmp	r0, #0
   16cfc:	beq	173b8 <__assert_fail@plt+0x5e54>
   16d00:	str	r0, [r8, #12]
   16d04:	str	r7, [r9]
   16d08:	ldr	r7, [r8, #36]	; 0x24
   16d0c:	mov	r0, r6
   16d10:	add	r3, r7, #1
   16d14:	str	r3, [r8, #36]	; 0x24
   16d18:	ldr	r9, [r8, #12]
   16d1c:	bl	111c8 <wctype@plt>
   16d20:	ldr	r1, [pc, #1708]	; 173d4 <__assert_fail@plt+0x5e70>
   16d24:	str	r0, [r9, r7, lsl #2]
   16d28:	mov	r0, r6
   16d2c:	bl	111f8 <strcmp@plt>
   16d30:	subs	r7, r0, #0
   16d34:	bne	16db4 <__assert_fail@plt+0x5850>
   16d38:	cmp	r5, #0
   16d3c:	beq	16d7c <__assert_fail@plt+0x5818>
   16d40:	bl	113e4 <__ctype_b_loc@plt>
   16d44:	mov	r6, r0
   16d48:	ldr	r2, [r6]
   16d4c:	lsl	r3, r7, #1
   16d50:	ldrh	r3, [r2, r3]
   16d54:	tst	r3, #8
   16d58:	beq	16d68 <__assert_fail@plt+0x5804>
   16d5c:	ldrb	r1, [r5, r7]
   16d60:	mov	r0, r4
   16d64:	bl	14f00 <__assert_fail@plt+0x399c>
   16d68:	add	r7, r7, #1
   16d6c:	cmp	r7, #256	; 0x100
   16d70:	bne	16d48 <__assert_fail@plt+0x57e4>
   16d74:	mov	r0, #0
   16d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d7c:	bl	113e4 <__ctype_b_loc@plt>
   16d80:	mov	r5, r0
   16d84:	ldr	r2, [r5]
   16d88:	lsl	r3, r7, #1
   16d8c:	ldrh	r3, [r2, r3]
   16d90:	tst	r3, #8
   16d94:	beq	16da4 <__assert_fail@plt+0x5840>
   16d98:	mov	r1, r7
   16d9c:	mov	r0, r4
   16da0:	bl	14f00 <__assert_fail@plt+0x399c>
   16da4:	add	r7, r7, #1
   16da8:	cmp	r7, #256	; 0x100
   16dac:	bne	16d84 <__assert_fail@plt+0x5820>
   16db0:	b	16d74 <__assert_fail@plt+0x5810>
   16db4:	ldr	r1, [pc, #1564]	; 173d8 <__assert_fail@plt+0x5e74>
   16db8:	mov	r0, r6
   16dbc:	bl	111f8 <strcmp@plt>
   16dc0:	subs	r7, r0, #0
   16dc4:	bne	16e40 <__assert_fail@plt+0x58dc>
   16dc8:	cmp	r5, #0
   16dcc:	beq	16e08 <__assert_fail@plt+0x58a4>
   16dd0:	bl	113e4 <__ctype_b_loc@plt>
   16dd4:	mov	r6, r0
   16dd8:	ldr	r2, [r6]
   16ddc:	lsl	r3, r7, #1
   16de0:	ldrh	r3, [r2, r3]
   16de4:	tst	r3, #2
   16de8:	beq	16df8 <__assert_fail@plt+0x5894>
   16dec:	ldrb	r1, [r5, r7]
   16df0:	mov	r0, r4
   16df4:	bl	14f00 <__assert_fail@plt+0x399c>
   16df8:	add	r7, r7, #1
   16dfc:	cmp	r7, #256	; 0x100
   16e00:	bne	16dd8 <__assert_fail@plt+0x5874>
   16e04:	b	16d74 <__assert_fail@plt+0x5810>
   16e08:	bl	113e4 <__ctype_b_loc@plt>
   16e0c:	mov	r5, r0
   16e10:	ldr	r2, [r5]
   16e14:	lsl	r3, r7, #1
   16e18:	ldrh	r3, [r2, r3]
   16e1c:	tst	r3, #2
   16e20:	beq	16e30 <__assert_fail@plt+0x58cc>
   16e24:	mov	r1, r7
   16e28:	mov	r0, r4
   16e2c:	bl	14f00 <__assert_fail@plt+0x399c>
   16e30:	add	r7, r7, #1
   16e34:	cmp	r7, #256	; 0x100
   16e38:	bne	16e10 <__assert_fail@plt+0x58ac>
   16e3c:	b	16d74 <__assert_fail@plt+0x5810>
   16e40:	ldr	r1, [pc, #1416]	; 173d0 <__assert_fail@plt+0x5e6c>
   16e44:	mov	r0, r6
   16e48:	bl	111f8 <strcmp@plt>
   16e4c:	subs	r7, r0, #0
   16e50:	bne	16ecc <__assert_fail@plt+0x5968>
   16e54:	cmp	r5, #0
   16e58:	beq	16e94 <__assert_fail@plt+0x5930>
   16e5c:	bl	113e4 <__ctype_b_loc@plt>
   16e60:	mov	r6, r0
   16e64:	ldr	r2, [r6]
   16e68:	lsl	r3, r7, #1
   16e6c:	ldrh	r3, [r2, r3]
   16e70:	tst	r3, #512	; 0x200
   16e74:	beq	16e84 <__assert_fail@plt+0x5920>
   16e78:	ldrb	r1, [r5, r7]
   16e7c:	mov	r0, r4
   16e80:	bl	14f00 <__assert_fail@plt+0x399c>
   16e84:	add	r7, r7, #1
   16e88:	cmp	r7, #256	; 0x100
   16e8c:	bne	16e64 <__assert_fail@plt+0x5900>
   16e90:	b	16d74 <__assert_fail@plt+0x5810>
   16e94:	bl	113e4 <__ctype_b_loc@plt>
   16e98:	mov	r5, r0
   16e9c:	ldr	r2, [r5]
   16ea0:	lsl	r3, r7, #1
   16ea4:	ldrh	r3, [r2, r3]
   16ea8:	tst	r3, #512	; 0x200
   16eac:	beq	16ebc <__assert_fail@plt+0x5958>
   16eb0:	mov	r1, r7
   16eb4:	mov	r0, r4
   16eb8:	bl	14f00 <__assert_fail@plt+0x399c>
   16ebc:	add	r7, r7, #1
   16ec0:	cmp	r7, #256	; 0x100
   16ec4:	bne	16e9c <__assert_fail@plt+0x5938>
   16ec8:	b	16d74 <__assert_fail@plt+0x5810>
   16ecc:	ldr	r1, [pc, #1288]	; 173dc <__assert_fail@plt+0x5e78>
   16ed0:	mov	r0, r6
   16ed4:	bl	111f8 <strcmp@plt>
   16ed8:	subs	r7, r0, #0
   16edc:	bne	16f58 <__assert_fail@plt+0x59f4>
   16ee0:	cmp	r5, #0
   16ee4:	beq	16f20 <__assert_fail@plt+0x59bc>
   16ee8:	bl	113e4 <__ctype_b_loc@plt>
   16eec:	mov	r6, r0
   16ef0:	ldr	r2, [r6]
   16ef4:	lsl	r3, r7, #1
   16ef8:	ldrh	r3, [r2, r3]
   16efc:	tst	r3, #8192	; 0x2000
   16f00:	beq	16f10 <__assert_fail@plt+0x59ac>
   16f04:	ldrb	r1, [r5, r7]
   16f08:	mov	r0, r4
   16f0c:	bl	14f00 <__assert_fail@plt+0x399c>
   16f10:	add	r7, r7, #1
   16f14:	cmp	r7, #256	; 0x100
   16f18:	bne	16ef0 <__assert_fail@plt+0x598c>
   16f1c:	b	16d74 <__assert_fail@plt+0x5810>
   16f20:	bl	113e4 <__ctype_b_loc@plt>
   16f24:	mov	r5, r0
   16f28:	ldr	r2, [r5]
   16f2c:	lsl	r3, r7, #1
   16f30:	ldrh	r3, [r2, r3]
   16f34:	tst	r3, #8192	; 0x2000
   16f38:	beq	16f48 <__assert_fail@plt+0x59e4>
   16f3c:	mov	r1, r7
   16f40:	mov	r0, r4
   16f44:	bl	14f00 <__assert_fail@plt+0x399c>
   16f48:	add	r7, r7, #1
   16f4c:	cmp	r7, #256	; 0x100
   16f50:	bne	16f28 <__assert_fail@plt+0x59c4>
   16f54:	b	16d74 <__assert_fail@plt+0x5810>
   16f58:	ldr	r1, [pc, #1132]	; 173cc <__assert_fail@plt+0x5e68>
   16f5c:	mov	r0, r6
   16f60:	bl	111f8 <strcmp@plt>
   16f64:	subs	r7, r0, #0
   16f68:	bne	16fe4 <__assert_fail@plt+0x5a80>
   16f6c:	cmp	r5, #0
   16f70:	beq	16fac <__assert_fail@plt+0x5a48>
   16f74:	bl	113e4 <__ctype_b_loc@plt>
   16f78:	mov	r6, r0
   16f7c:	ldr	r2, [r6]
   16f80:	lsl	r3, r7, #1
   16f84:	ldrh	r3, [r2, r3]
   16f88:	tst	r3, #1024	; 0x400
   16f8c:	beq	16f9c <__assert_fail@plt+0x5a38>
   16f90:	ldrb	r1, [r5, r7]
   16f94:	mov	r0, r4
   16f98:	bl	14f00 <__assert_fail@plt+0x399c>
   16f9c:	add	r7, r7, #1
   16fa0:	cmp	r7, #256	; 0x100
   16fa4:	bne	16f7c <__assert_fail@plt+0x5a18>
   16fa8:	b	16d74 <__assert_fail@plt+0x5810>
   16fac:	bl	113e4 <__ctype_b_loc@plt>
   16fb0:	mov	r5, r0
   16fb4:	ldr	r2, [r5]
   16fb8:	lsl	r3, r7, #1
   16fbc:	ldrh	r3, [r2, r3]
   16fc0:	tst	r3, #1024	; 0x400
   16fc4:	beq	16fd4 <__assert_fail@plt+0x5a70>
   16fc8:	mov	r1, r7
   16fcc:	mov	r0, r4
   16fd0:	bl	14f00 <__assert_fail@plt+0x399c>
   16fd4:	add	r7, r7, #1
   16fd8:	cmp	r7, #256	; 0x100
   16fdc:	bne	16fb4 <__assert_fail@plt+0x5a50>
   16fe0:	b	16d74 <__assert_fail@plt+0x5810>
   16fe4:	ldr	r1, [pc, #1012]	; 173e0 <__assert_fail@plt+0x5e7c>
   16fe8:	mov	r0, r6
   16fec:	bl	111f8 <strcmp@plt>
   16ff0:	subs	r7, r0, #0
   16ff4:	bne	17070 <__assert_fail@plt+0x5b0c>
   16ff8:	cmp	r5, #0
   16ffc:	beq	17038 <__assert_fail@plt+0x5ad4>
   17000:	bl	113e4 <__ctype_b_loc@plt>
   17004:	mov	r6, r0
   17008:	ldr	r2, [r6]
   1700c:	lsl	r3, r7, #1
   17010:	ldrh	r3, [r2, r3]
   17014:	tst	r3, #2048	; 0x800
   17018:	beq	17028 <__assert_fail@plt+0x5ac4>
   1701c:	ldrb	r1, [r5, r7]
   17020:	mov	r0, r4
   17024:	bl	14f00 <__assert_fail@plt+0x399c>
   17028:	add	r7, r7, #1
   1702c:	cmp	r7, #256	; 0x100
   17030:	bne	17008 <__assert_fail@plt+0x5aa4>
   17034:	b	16d74 <__assert_fail@plt+0x5810>
   17038:	bl	113e4 <__ctype_b_loc@plt>
   1703c:	mov	r5, r0
   17040:	ldr	r2, [r5]
   17044:	lsl	r3, r7, #1
   17048:	ldrh	r3, [r2, r3]
   1704c:	tst	r3, #2048	; 0x800
   17050:	beq	17060 <__assert_fail@plt+0x5afc>
   17054:	mov	r1, r7
   17058:	mov	r0, r4
   1705c:	bl	14f00 <__assert_fail@plt+0x399c>
   17060:	add	r7, r7, #1
   17064:	cmp	r7, #256	; 0x100
   17068:	bne	17040 <__assert_fail@plt+0x5adc>
   1706c:	b	16d74 <__assert_fail@plt+0x5810>
   17070:	ldr	r1, [pc, #876]	; 173e4 <__assert_fail@plt+0x5e80>
   17074:	mov	r0, r6
   17078:	bl	111f8 <strcmp@plt>
   1707c:	subs	r7, r0, #0
   17080:	bne	170fc <__assert_fail@plt+0x5b98>
   17084:	cmp	r5, #0
   17088:	beq	170c4 <__assert_fail@plt+0x5b60>
   1708c:	bl	113e4 <__ctype_b_loc@plt>
   17090:	mov	r6, r0
   17094:	ldr	r2, [r6]
   17098:	lsl	r3, r7, #1
   1709c:	ldrh	r3, [r2, r3]
   170a0:	tst	r3, #16384	; 0x4000
   170a4:	beq	170b4 <__assert_fail@plt+0x5b50>
   170a8:	ldrb	r1, [r5, r7]
   170ac:	mov	r0, r4
   170b0:	bl	14f00 <__assert_fail@plt+0x399c>
   170b4:	add	r7, r7, #1
   170b8:	cmp	r7, #256	; 0x100
   170bc:	bne	17094 <__assert_fail@plt+0x5b30>
   170c0:	b	16d74 <__assert_fail@plt+0x5810>
   170c4:	bl	113e4 <__ctype_b_loc@plt>
   170c8:	mov	r5, r0
   170cc:	ldr	r2, [r5]
   170d0:	lsl	r3, r7, #1
   170d4:	ldrh	r3, [r2, r3]
   170d8:	tst	r3, #16384	; 0x4000
   170dc:	beq	170ec <__assert_fail@plt+0x5b88>
   170e0:	mov	r1, r7
   170e4:	mov	r0, r4
   170e8:	bl	14f00 <__assert_fail@plt+0x399c>
   170ec:	add	r7, r7, #1
   170f0:	cmp	r7, #256	; 0x100
   170f4:	bne	170cc <__assert_fail@plt+0x5b68>
   170f8:	b	16d74 <__assert_fail@plt+0x5810>
   170fc:	ldr	r1, [pc, #708]	; 173c8 <__assert_fail@plt+0x5e64>
   17100:	mov	r0, r6
   17104:	bl	111f8 <strcmp@plt>
   17108:	subs	r7, r0, #0
   1710c:	bne	17188 <__assert_fail@plt+0x5c24>
   17110:	cmp	r5, #0
   17114:	beq	17150 <__assert_fail@plt+0x5bec>
   17118:	bl	113e4 <__ctype_b_loc@plt>
   1711c:	mov	r6, r0
   17120:	ldr	r2, [r6]
   17124:	lsl	r3, r7, #1
   17128:	ldrh	r3, [r2, r3]
   1712c:	tst	r3, #256	; 0x100
   17130:	beq	17140 <__assert_fail@plt+0x5bdc>
   17134:	ldrb	r1, [r5, r7]
   17138:	mov	r0, r4
   1713c:	bl	14f00 <__assert_fail@plt+0x399c>
   17140:	add	r7, r7, #1
   17144:	cmp	r7, #256	; 0x100
   17148:	bne	17120 <__assert_fail@plt+0x5bbc>
   1714c:	b	16d74 <__assert_fail@plt+0x5810>
   17150:	bl	113e4 <__ctype_b_loc@plt>
   17154:	mov	r5, r0
   17158:	ldr	r2, [r5]
   1715c:	lsl	r3, r7, #1
   17160:	ldrh	r3, [r2, r3]
   17164:	tst	r3, #256	; 0x100
   17168:	beq	17178 <__assert_fail@plt+0x5c14>
   1716c:	mov	r1, r7
   17170:	mov	r0, r4
   17174:	bl	14f00 <__assert_fail@plt+0x399c>
   17178:	add	r7, r7, #1
   1717c:	cmp	r7, #256	; 0x100
   17180:	bne	17158 <__assert_fail@plt+0x5bf4>
   17184:	b	16d74 <__assert_fail@plt+0x5810>
   17188:	ldr	r1, [pc, #600]	; 173e8 <__assert_fail@plt+0x5e84>
   1718c:	mov	r0, r6
   17190:	bl	111f8 <strcmp@plt>
   17194:	subs	r7, r0, #0
   17198:	bne	17214 <__assert_fail@plt+0x5cb0>
   1719c:	cmp	r5, #0
   171a0:	beq	171dc <__assert_fail@plt+0x5c78>
   171a4:	bl	113e4 <__ctype_b_loc@plt>
   171a8:	mov	r6, r0
   171ac:	ldr	r2, [r6]
   171b0:	lsl	r3, r7, #1
   171b4:	ldrh	r3, [r2, r3]
   171b8:	tst	r3, #1
   171bc:	beq	171cc <__assert_fail@plt+0x5c68>
   171c0:	ldrb	r1, [r5, r7]
   171c4:	mov	r0, r4
   171c8:	bl	14f00 <__assert_fail@plt+0x399c>
   171cc:	add	r7, r7, #1
   171d0:	cmp	r7, #256	; 0x100
   171d4:	bne	171ac <__assert_fail@plt+0x5c48>
   171d8:	b	16d74 <__assert_fail@plt+0x5810>
   171dc:	bl	113e4 <__ctype_b_loc@plt>
   171e0:	mov	r5, r0
   171e4:	ldr	r2, [r5]
   171e8:	lsl	r3, r7, #1
   171ec:	ldrh	r3, [r2, r3]
   171f0:	tst	r3, #1
   171f4:	beq	17204 <__assert_fail@plt+0x5ca0>
   171f8:	mov	r1, r7
   171fc:	mov	r0, r4
   17200:	bl	14f00 <__assert_fail@plt+0x399c>
   17204:	add	r7, r7, #1
   17208:	cmp	r7, #256	; 0x100
   1720c:	bne	171e4 <__assert_fail@plt+0x5c80>
   17210:	b	16d74 <__assert_fail@plt+0x5810>
   17214:	ldr	r1, [pc, #464]	; 173ec <__assert_fail@plt+0x5e88>
   17218:	mov	r0, r6
   1721c:	bl	111f8 <strcmp@plt>
   17220:	subs	r7, r0, #0
   17224:	bne	172a0 <__assert_fail@plt+0x5d3c>
   17228:	cmp	r5, #0
   1722c:	beq	17268 <__assert_fail@plt+0x5d04>
   17230:	bl	113e4 <__ctype_b_loc@plt>
   17234:	mov	r6, r0
   17238:	ldr	r2, [r6]
   1723c:	lsl	r3, r7, #1
   17240:	ldrsh	r3, [r2, r3]
   17244:	cmp	r3, #0
   17248:	bge	17258 <__assert_fail@plt+0x5cf4>
   1724c:	ldrb	r1, [r5, r7]
   17250:	mov	r0, r4
   17254:	bl	14f00 <__assert_fail@plt+0x399c>
   17258:	add	r7, r7, #1
   1725c:	cmp	r7, #256	; 0x100
   17260:	bne	17238 <__assert_fail@plt+0x5cd4>
   17264:	b	16d74 <__assert_fail@plt+0x5810>
   17268:	bl	113e4 <__ctype_b_loc@plt>
   1726c:	mov	r5, r0
   17270:	ldr	r2, [r5]
   17274:	lsl	r3, r7, #1
   17278:	ldrsh	r3, [r2, r3]
   1727c:	cmp	r3, #0
   17280:	bge	17290 <__assert_fail@plt+0x5d2c>
   17284:	mov	r1, r7
   17288:	mov	r0, r4
   1728c:	bl	14f00 <__assert_fail@plt+0x399c>
   17290:	add	r7, r7, #1
   17294:	cmp	r7, #256	; 0x100
   17298:	bne	17270 <__assert_fail@plt+0x5d0c>
   1729c:	b	16d74 <__assert_fail@plt+0x5810>
   172a0:	ldr	r1, [pc, #328]	; 173f0 <__assert_fail@plt+0x5e8c>
   172a4:	mov	r0, r6
   172a8:	bl	111f8 <strcmp@plt>
   172ac:	subs	r7, r0, #0
   172b0:	bne	1732c <__assert_fail@plt+0x5dc8>
   172b4:	cmp	r5, #0
   172b8:	beq	172f4 <__assert_fail@plt+0x5d90>
   172bc:	bl	113e4 <__ctype_b_loc@plt>
   172c0:	mov	r6, r0
   172c4:	ldr	r2, [r6]
   172c8:	lsl	r3, r7, #1
   172cc:	ldrh	r3, [r2, r3]
   172d0:	tst	r3, #4
   172d4:	beq	172e4 <__assert_fail@plt+0x5d80>
   172d8:	ldrb	r1, [r5, r7]
   172dc:	mov	r0, r4
   172e0:	bl	14f00 <__assert_fail@plt+0x399c>
   172e4:	add	r7, r7, #1
   172e8:	cmp	r7, #256	; 0x100
   172ec:	bne	172c4 <__assert_fail@plt+0x5d60>
   172f0:	b	16d74 <__assert_fail@plt+0x5810>
   172f4:	bl	113e4 <__ctype_b_loc@plt>
   172f8:	mov	r5, r0
   172fc:	ldr	r2, [r5]
   17300:	lsl	r3, r7, #1
   17304:	ldrh	r3, [r2, r3]
   17308:	tst	r3, #4
   1730c:	beq	1731c <__assert_fail@plt+0x5db8>
   17310:	mov	r1, r7
   17314:	mov	r0, r4
   17318:	bl	14f00 <__assert_fail@plt+0x399c>
   1731c:	add	r7, r7, #1
   17320:	cmp	r7, #256	; 0x100
   17324:	bne	172fc <__assert_fail@plt+0x5d98>
   17328:	b	16d74 <__assert_fail@plt+0x5810>
   1732c:	mov	r0, r6
   17330:	ldr	r1, [pc, #188]	; 173f4 <__assert_fail@plt+0x5e90>
   17334:	bl	111f8 <strcmp@plt>
   17338:	subs	r6, r0, #0
   1733c:	bne	173c0 <__assert_fail@plt+0x5e5c>
   17340:	cmp	r5, #0
   17344:	beq	17380 <__assert_fail@plt+0x5e1c>
   17348:	bl	113e4 <__ctype_b_loc@plt>
   1734c:	mov	r7, r0
   17350:	ldr	r2, [r7]
   17354:	lsl	r3, r6, #1
   17358:	ldrh	r3, [r2, r3]
   1735c:	tst	r3, #4096	; 0x1000
   17360:	beq	17370 <__assert_fail@plt+0x5e0c>
   17364:	ldrb	r1, [r5, r6]
   17368:	mov	r0, r4
   1736c:	bl	14f00 <__assert_fail@plt+0x399c>
   17370:	add	r6, r6, #1
   17374:	cmp	r6, #256	; 0x100
   17378:	bne	17350 <__assert_fail@plt+0x5dec>
   1737c:	b	16d74 <__assert_fail@plt+0x5810>
   17380:	bl	113e4 <__ctype_b_loc@plt>
   17384:	mov	r5, r0
   17388:	ldr	r2, [r5]
   1738c:	lsl	r3, r6, #1
   17390:	ldrh	r3, [r2, r3]
   17394:	tst	r3, #4096	; 0x1000
   17398:	beq	173a8 <__assert_fail@plt+0x5e44>
   1739c:	mov	r1, r6
   173a0:	mov	r0, r4
   173a4:	bl	14f00 <__assert_fail@plt+0x399c>
   173a8:	add	r6, r6, #1
   173ac:	cmp	r6, #256	; 0x100
   173b0:	bne	17388 <__assert_fail@plt+0x5e24>
   173b4:	b	16d74 <__assert_fail@plt+0x5810>
   173b8:	mov	r0, #12
   173bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173c0:	mov	r0, #4
   173c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173c8:	andeq	r2, r2, lr, lsr pc
   173cc:	andeq	r2, r2, r8, lsr pc
   173d0:	andeq	r2, r2, r4, asr #30
   173d4:	andeq	r2, r2, sl, asr #30
   173d8:	andeq	r2, r2, r0, asr pc
   173dc:	andeq	r2, r2, r6, asr pc
   173e0:	andeq	r2, r2, r5, ror pc
   173e4:	andeq	r2, r2, ip, asr pc
   173e8:	andeq	r2, r2, r2, ror #30
   173ec:	andeq	r2, r2, r8, ror #30
   173f0:	andeq	r2, r2, lr, ror #30
   173f4:	andeq	r2, r2, r4, ror pc
   173f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173fc:	sub	sp, sp, #36	; 0x24
   17400:	mov	r7, r0
   17404:	mov	fp, r1
   17408:	mov	r4, #0
   1740c:	mov	r1, #1
   17410:	mov	r0, #32
   17414:	str	r2, [sp, #12]
   17418:	mov	r9, r3
   1741c:	ldrb	sl, [sp, #72]	; 0x48
   17420:	ldr	r8, [sp, #76]	; 0x4c
   17424:	str	r4, [sp, #20]
   17428:	bl	213d4 <__assert_fail@plt+0xfe70>
   1742c:	subs	r5, r0, #0
   17430:	bne	17444 <__assert_fail@plt+0x5ee0>
   17434:	mov	r3, #12
   17438:	str	r3, [r8]
   1743c:	mov	r4, #0
   17440:	b	174b8 <__assert_fail@plt+0x5f54>
   17444:	mov	r1, #1
   17448:	mov	r0, #40	; 0x28
   1744c:	bl	213d4 <__assert_fail@plt+0xfe70>
   17450:	subs	r6, r0, #0
   17454:	bne	17464 <__assert_fail@plt+0x5f00>
   17458:	mov	r0, r5
   1745c:	bl	1370c <__assert_fail@plt+0x21a8>
   17460:	b	17434 <__assert_fail@plt+0x5ed0>
   17464:	ldrb	r2, [r6, #16]
   17468:	and	r3, sl, #1
   1746c:	mov	r0, fp
   17470:	bic	r2, r2, #1
   17474:	orr	r3, r3, r2
   17478:	strb	r3, [r6, #16]
   1747c:	ldr	r3, [sp, #12]
   17480:	str	r4, [sp, #4]
   17484:	str	r3, [sp]
   17488:	mov	r2, r6
   1748c:	add	r3, sp, #20
   17490:	mov	r1, r5
   17494:	bl	16c80 <__assert_fail@plt+0x571c>
   17498:	subs	fp, r0, #0
   1749c:	subeq	r9, r9, #1
   174a0:	beq	174cc <__assert_fail@plt+0x5f68>
   174a4:	mov	r0, r5
   174a8:	bl	1370c <__assert_fail@plt+0x21a8>
   174ac:	mov	r0, r6
   174b0:	bl	1634c <__assert_fail@plt+0x4de8>
   174b4:	str	fp, [r8]
   174b8:	mov	r0, r4
   174bc:	add	sp, sp, #36	; 0x24
   174c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c4:	mov	r0, r5
   174c8:	bl	14f00 <__assert_fail@plt+0x399c>
   174cc:	ldrb	r1, [r9, #1]!
   174d0:	cmp	r1, #0
   174d4:	bne	174c4 <__assert_fail@plt+0x5f60>
   174d8:	cmp	sl, #0
   174dc:	beq	174e8 <__assert_fail@plt+0x5f84>
   174e0:	mov	r0, r5
   174e4:	bl	14f64 <__assert_fail@plt+0x3a00>
   174e8:	ldr	r3, [r7, #92]	; 0x5c
   174ec:	cmp	r3, #1
   174f0:	ble	17500 <__assert_fail@plt+0x5f9c>
   174f4:	ldr	r1, [r7, #60]	; 0x3c
   174f8:	mov	r0, r5
   174fc:	bl	14fac <__assert_fail@plt+0x3a48>
   17500:	mov	r9, #0
   17504:	mov	r3, #3
   17508:	str	r9, [sp, #28]
   1750c:	mov	r2, r9
   17510:	strb	r3, [sp, #28]
   17514:	mov	r1, r9
   17518:	add	r3, sp, #24
   1751c:	mov	r0, r7
   17520:	str	r5, [sp, #24]
   17524:	bl	157a0 <__assert_fail@plt+0x423c>
   17528:	subs	r4, r0, #0
   1752c:	beq	17594 <__assert_fail@plt+0x6030>
   17530:	ldr	r3, [r7, #92]	; 0x5c
   17534:	cmp	r3, #1
   17538:	ble	17588 <__assert_fail@plt+0x6024>
   1753c:	mov	r3, #6
   17540:	strb	r3, [sp, #28]
   17544:	ldrb	r3, [r7, #88]	; 0x58
   17548:	mov	r2, r9
   1754c:	mov	r1, r9
   17550:	orr	r3, r3, #2
   17554:	strb	r3, [r7, #88]	; 0x58
   17558:	mov	r0, r7
   1755c:	add	r3, sp, #24
   17560:	str	r6, [sp, #24]
   17564:	bl	157a0 <__assert_fail@plt+0x423c>
   17568:	subs	r2, r0, #0
   1756c:	beq	17594 <__assert_fail@plt+0x6030>
   17570:	mov	r1, r4
   17574:	mov	r3, #10
   17578:	mov	r0, r7
   1757c:	bl	158f0 <__assert_fail@plt+0x438c>
   17580:	mov	r4, r0
   17584:	b	174b8 <__assert_fail@plt+0x5f54>
   17588:	mov	r0, r6
   1758c:	bl	1634c <__assert_fail@plt+0x4de8>
   17590:	b	174b8 <__assert_fail@plt+0x5f54>
   17594:	mov	r0, r5
   17598:	bl	1370c <__assert_fail@plt+0x21a8>
   1759c:	mov	r0, r6
   175a0:	bl	1634c <__assert_fail@plt+0x4de8>
   175a4:	b	17434 <__assert_fail@plt+0x5ed0>
   175a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175ac:	ldr	sl, [r0]
   175b0:	add	ip, sl, r1, lsl #3
   175b4:	ldrb	r9, [ip, #4]
   175b8:	cmp	r9, #7
   175bc:	bne	176ac <__assert_fail@plt+0x6148>
   175c0:	ldr	r0, [r2, #4]
   175c4:	add	r1, r0, r3
   175c8:	ldrb	ip, [r0, r3]
   175cc:	cmp	ip, #193	; 0xc1
   175d0:	bhi	175e0 <__assert_fail@plt+0x607c>
   175d4:	mov	r4, #0
   175d8:	mov	r0, r4
   175dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175e0:	ldr	r0, [r2, #48]	; 0x30
   175e4:	add	r2, r3, #1
   175e8:	cmp	r2, r0
   175ec:	bge	175d4 <__assert_fail@plt+0x6070>
   175f0:	cmp	ip, #223	; 0xdf
   175f4:	ldrb	r2, [r1, #1]
   175f8:	bhi	17610 <__assert_fail@plt+0x60ac>
   175fc:	eor	r2, r2, #128	; 0x80
   17600:	cmp	r2, #63	; 0x3f
   17604:	movls	r4, #2
   17608:	bls	175d8 <__assert_fail@plt+0x6074>
   1760c:	b	175d4 <__assert_fail@plt+0x6070>
   17610:	cmp	ip, #239	; 0xef
   17614:	bhi	17658 <__assert_fail@plt+0x60f4>
   17618:	cmp	r2, #159	; 0x9f
   1761c:	cmpls	ip, #224	; 0xe0
   17620:	movne	r4, #3
   17624:	beq	175d4 <__assert_fail@plt+0x6070>
   17628:	add	r3, r4, r3
   1762c:	cmp	r0, r3
   17630:	blt	175d4 <__assert_fail@plt+0x6070>
   17634:	mov	r3, #1
   17638:	ldrb	r2, [r1, r3]
   1763c:	eor	r2, r2, #128	; 0x80
   17640:	cmp	r2, #63	; 0x3f
   17644:	bhi	175d4 <__assert_fail@plt+0x6070>
   17648:	add	r3, r3, #1
   1764c:	cmp	r4, r3
   17650:	bne	17638 <__assert_fail@plt+0x60d4>
   17654:	b	175d8 <__assert_fail@plt+0x6074>
   17658:	cmp	ip, #247	; 0xf7
   1765c:	bhi	17674 <__assert_fail@plt+0x6110>
   17660:	cmp	r2, #143	; 0x8f
   17664:	cmpls	ip, #240	; 0xf0
   17668:	movne	r4, #4
   1766c:	bne	17628 <__assert_fail@plt+0x60c4>
   17670:	b	175d4 <__assert_fail@plt+0x6070>
   17674:	cmp	ip, #251	; 0xfb
   17678:	bhi	17690 <__assert_fail@plt+0x612c>
   1767c:	cmp	r2, #135	; 0x87
   17680:	cmpls	ip, #248	; 0xf8
   17684:	movne	r4, #5
   17688:	bne	17628 <__assert_fail@plt+0x60c4>
   1768c:	b	175d4 <__assert_fail@plt+0x6070>
   17690:	cmp	ip, #253	; 0xfd
   17694:	bhi	175d4 <__assert_fail@plt+0x6070>
   17698:	cmp	r2, #131	; 0x83
   1769c:	cmpls	ip, #252	; 0xfc
   176a0:	beq	175d4 <__assert_fail@plt+0x6070>
   176a4:	mov	r4, #6
   176a8:	b	17628 <__assert_fail@plt+0x60c4>
   176ac:	mov	r5, r1
   176b0:	mov	r8, r0
   176b4:	mov	r1, r3
   176b8:	mov	r0, r2
   176bc:	mov	r7, r3
   176c0:	mov	r6, r2
   176c4:	bl	14fd4 <__assert_fail@plt+0x3a70>
   176c8:	cmp	r9, #5
   176cc:	mov	r4, r0
   176d0:	bne	17714 <__assert_fail@plt+0x61b0>
   176d4:	cmp	r0, #1
   176d8:	ble	175d4 <__assert_fail@plt+0x6070>
   176dc:	ldr	r3, [r8, #128]	; 0x80
   176e0:	tst	r3, #64	; 0x40
   176e4:	bne	176f8 <__assert_fail@plt+0x6194>
   176e8:	ldr	r2, [r6, #4]
   176ec:	ldrb	r2, [r2, r7]
   176f0:	cmp	r2, #10
   176f4:	beq	175d4 <__assert_fail@plt+0x6070>
   176f8:	tst	r3, #128	; 0x80
   176fc:	beq	175d8 <__assert_fail@plt+0x6074>
   17700:	ldr	r3, [r6, #4]
   17704:	ldrb	r3, [r3, r7]
   17708:	cmp	r3, #0
   1770c:	beq	175d4 <__assert_fail@plt+0x6070>
   17710:	b	175d8 <__assert_fail@plt+0x6074>
   17714:	cmp	r0, #1
   17718:	movle	r3, #0
   1771c:	movgt	r3, #1
   17720:	cmp	r9, #6
   17724:	movne	r3, #0
   17728:	cmp	r3, #0
   1772c:	beq	175d4 <__assert_fail@plt+0x6070>
   17730:	ldr	r5, [sl, r5, lsl #3]
   17734:	ldr	r3, [r5, #32]
   17738:	ldr	r2, [r5, #20]
   1773c:	cmp	r3, #0
   17740:	bne	17758 <__assert_fail@plt+0x61f4>
   17744:	ldr	r3, [r5, #36]	; 0x24
   17748:	cmp	r3, #0
   1774c:	bne	17758 <__assert_fail@plt+0x61f4>
   17750:	cmp	r2, #0
   17754:	beq	177ec <__assert_fail@plt+0x6288>
   17758:	mov	r0, r6
   1775c:	mov	r1, r7
   17760:	bl	1502c <__assert_fail@plt+0x3ac8>
   17764:	mov	r3, #0
   17768:	mov	r6, r0
   1776c:	cmp	r3, r2
   17770:	blt	177b4 <__assert_fail@plt+0x6250>
   17774:	mov	r7, #0
   17778:	ldr	r3, [r5, #36]	; 0x24
   1777c:	cmp	r7, r3
   17780:	blt	177cc <__assert_fail@plt+0x6268>
   17784:	ldr	r2, [r5, #32]
   17788:	mov	r3, #0
   1778c:	cmp	r3, r2
   17790:	blt	177f4 <__assert_fail@plt+0x6290>
   17794:	mov	r3, #0
   17798:	ldrb	r2, [r5, #16]
   1779c:	tst	r2, #1
   177a0:	moveq	r4, r3
   177a4:	beq	175d8 <__assert_fail@plt+0x6074>
   177a8:	cmp	r3, #0
   177ac:	bne	175d4 <__assert_fail@plt+0x6070>
   177b0:	b	175d8 <__assert_fail@plt+0x6074>
   177b4:	ldr	r1, [r5]
   177b8:	ldr	r1, [r1, r3, lsl #2]
   177bc:	cmp	r6, r1
   177c0:	beq	1781c <__assert_fail@plt+0x62b8>
   177c4:	add	r3, r3, #1
   177c8:	b	1776c <__assert_fail@plt+0x6208>
   177cc:	ldr	r3, [r5, #12]
   177d0:	mov	r0, r6
   177d4:	ldr	r1, [r3, r7, lsl #2]
   177d8:	bl	111ec <iswctype@plt>
   177dc:	cmp	r0, #0
   177e0:	bne	1781c <__assert_fail@plt+0x62b8>
   177e4:	add	r7, r7, #1
   177e8:	b	17778 <__assert_fail@plt+0x6214>
   177ec:	mov	r6, r2
   177f0:	b	17784 <__assert_fail@plt+0x6220>
   177f4:	ldr	r1, [r5, #4]
   177f8:	ldr	r1, [r1, r3, lsl #2]
   177fc:	cmp	r6, r1
   17800:	bcc	17814 <__assert_fail@plt+0x62b0>
   17804:	ldr	r1, [r5, #8]
   17808:	ldr	r1, [r1, r3, lsl #2]
   1780c:	cmp	r6, r1
   17810:	bls	1781c <__assert_fail@plt+0x62b8>
   17814:	add	r3, r3, #1
   17818:	b	1778c <__assert_fail@plt+0x6228>
   1781c:	mov	r3, r4
   17820:	b	17798 <__assert_fail@plt+0x6234>
   17824:	ldr	r3, [r0, #4]
   17828:	ldr	r2, [r1, #4]
   1782c:	cmp	r3, r2
   17830:	bne	1785c <__assert_fail@plt+0x62f8>
   17834:	subs	r3, r3, #1
   17838:	bpl	17844 <__assert_fail@plt+0x62e0>
   1783c:	mov	r0, #1
   17840:	bx	lr
   17844:	ldr	ip, [r0, #8]
   17848:	ldr	r2, [r1, #8]
   1784c:	ldr	ip, [ip, r3, lsl #2]
   17850:	ldr	r2, [r2, r3, lsl #2]
   17854:	cmp	ip, r2
   17858:	b	17830 <__assert_fail@plt+0x62cc>
   1785c:	mov	r0, #0
   17860:	bx	lr
   17864:	cmp	r1, #0
   17868:	bxlt	lr
   1786c:	ldr	r3, [r0, #4]
   17870:	cmp	r1, r3
   17874:	bxge	lr
   17878:	sub	r3, r3, #1
   1787c:	str	r3, [r0, #4]
   17880:	ldr	ip, [r0, #4]
   17884:	lsl	r3, r1, #2
   17888:	cmp	r1, ip
   1788c:	add	r2, r3, #4
   17890:	blt	17898 <__assert_fail@plt+0x6334>
   17894:	bx	lr
   17898:	push	{lr}		; (str lr, [sp, #-4]!)
   1789c:	add	r1, r1, #1
   178a0:	ldr	ip, [r0, #8]
   178a4:	ldr	lr, [ip, r2]
   178a8:	str	lr, [ip, r3]
   178ac:	ldr	ip, [r0, #4]
   178b0:	mov	r3, r2
   178b4:	cmp	r1, ip
   178b8:	add	r2, r2, #4
   178bc:	blt	1789c <__assert_fail@plt+0x6338>
   178c0:	pop	{pc}		; (ldr pc, [sp], #4)
   178c4:	ldrb	r3, [r1, #24]
   178c8:	cmp	r3, #4
   178cc:	bne	17900 <__assert_fail@plt+0x639c>
   178d0:	ldr	r3, [r0, #132]	; 0x84
   178d4:	cmp	r3, #0
   178d8:	beq	178f8 <__assert_fail@plt+0x6394>
   178dc:	ldr	r2, [r1, #20]
   178e0:	ldr	r2, [r3, r2, lsl #2]
   178e4:	str	r2, [r1, #20]
   178e8:	mov	r1, #1
   178ec:	ldr	r3, [r0, #80]	; 0x50
   178f0:	orr	r3, r3, r1, lsl r2
   178f4:	str	r3, [r0, #80]	; 0x50
   178f8:	mov	r0, #0
   178fc:	bx	lr
   17900:	cmp	r3, #17
   17904:	bne	178f8 <__assert_fail@plt+0x6394>
   17908:	ldr	r3, [r1, #4]
   1790c:	cmp	r3, #0
   17910:	beq	178f8 <__assert_fail@plt+0x6394>
   17914:	ldrb	r2, [r3, #24]
   17918:	cmp	r2, #17
   1791c:	bne	178f8 <__assert_fail@plt+0x6394>
   17920:	ldr	r2, [r3, #20]
   17924:	ldr	r3, [r3, #4]
   17928:	cmp	r3, #0
   1792c:	str	r3, [r1, #4]
   17930:	strne	r1, [r3]
   17934:	ldr	r3, [r0, #132]	; 0x84
   17938:	ldr	r1, [r1, #20]
   1793c:	cmp	r2, #31
   17940:	ldr	r1, [r3, r1, lsl #2]
   17944:	str	r1, [r3, r2, lsl #2]
   17948:	bgt	178f8 <__assert_fail@plt+0x6394>
   1794c:	ldr	r3, [r0, #80]	; 0x50
   17950:	mov	r1, #1
   17954:	bic	r3, r3, r1, lsl r2
   17958:	b	178f4 <__assert_fail@plt+0x6390>
   1795c:	ldrb	r3, [r1, #24]
   17960:	ldr	r2, [r1, #4]
   17964:	cmp	r3, #11
   17968:	streq	r1, [r2, #16]
   1796c:	beq	17990 <__assert_fail@plt+0x642c>
   17970:	cmp	r3, #16
   17974:	ldr	r3, [r1, #8]
   17978:	beq	17998 <__assert_fail@plt+0x6434>
   1797c:	cmp	r2, #0
   17980:	ldrne	r0, [r1, #16]
   17984:	strne	r0, [r2, #16]
   17988:	cmp	r3, #0
   1798c:	bne	179a0 <__assert_fail@plt+0x643c>
   17990:	mov	r0, #0
   17994:	bx	lr
   17998:	ldr	r0, [r3, #12]
   1799c:	str	r0, [r2, #16]
   179a0:	ldr	r2, [r1, #16]
   179a4:	str	r2, [r3, #16]
   179a8:	b	17990 <__assert_fail@plt+0x642c>
   179ac:	ldr	r3, [r1, #4]
   179b0:	cmp	r3, #0
   179b4:	beq	17b14 <__assert_fail@plt+0x65b0>
   179b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179bc:	ldr	r5, [r2, #4]
   179c0:	cmp	r5, #0
   179c4:	beq	17af8 <__assert_fail@plt+0x6594>
   179c8:	mov	r6, r2
   179cc:	ldr	r2, [r0, #4]
   179d0:	add	r3, r3, r5
   179d4:	ldr	r5, [r0]
   179d8:	add	r2, r3, r2
   179dc:	cmp	r2, r5
   179e0:	mov	r7, r1
   179e4:	mov	r4, r0
   179e8:	ble	17a0c <__assert_fail@plt+0x64a8>
   179ec:	add	r5, r3, r5
   179f0:	ldr	r0, [r0, #8]
   179f4:	lsl	r1, r5, #2
   179f8:	bl	2145c <__assert_fail@plt+0xfef8>
   179fc:	cmp	r0, #0
   17a00:	beq	17b1c <__assert_fail@plt+0x65b8>
   17a04:	str	r0, [r4, #8]
   17a08:	str	r5, [r4]
   17a0c:	ldr	r2, [r4, #4]
   17a10:	ldr	r3, [r7, #4]
   17a14:	ldr	r0, [r6, #4]
   17a18:	add	ip, r2, r3
   17a1c:	ldr	r8, [r7, #8]
   17a20:	ldr	r9, [r6, #8]
   17a24:	add	ip, ip, r0
   17a28:	sub	r3, r3, #1
   17a2c:	sub	r0, r0, #1
   17a30:	sub	r2, r2, #1
   17a34:	ldr	lr, [r9, r0, lsl #2]
   17a38:	ldr	r1, [r8, r3, lsl #2]
   17a3c:	cmp	r1, lr
   17a40:	lsleq	lr, r2, #2
   17a44:	beq	17a58 <__assert_fail@plt+0x64f4>
   17a48:	blt	17a88 <__assert_fail@plt+0x6524>
   17a4c:	subs	r3, r3, #1
   17a50:	b	17a8c <__assert_fail@plt+0x6528>
   17a54:	sub	r2, r2, #1
   17a58:	cmp	r2, #0
   17a5c:	ldr	r5, [r4, #8]
   17a60:	blt	17a78 <__assert_fail@plt+0x6514>
   17a64:	ldr	sl, [r5, lr]
   17a68:	sub	lr, lr, #4
   17a6c:	cmp	r1, sl
   17a70:	blt	17a54 <__assert_fail@plt+0x64f0>
   17a74:	beq	17a80 <__assert_fail@plt+0x651c>
   17a78:	sub	ip, ip, #1
   17a7c:	str	r1, [r5, ip, lsl #2]
   17a80:	subs	r3, r3, #1
   17a84:	bmi	17a90 <__assert_fail@plt+0x652c>
   17a88:	subs	r0, r0, #1
   17a8c:	bpl	17a34 <__assert_fail@plt+0x64d0>
   17a90:	ldr	r1, [r4, #4]
   17a94:	ldr	r2, [r7, #4]
   17a98:	ldr	r0, [r6, #4]
   17a9c:	add	r2, r1, r2
   17aa0:	add	r2, r2, r0
   17aa4:	sub	r3, r1, #1
   17aa8:	sub	lr, r2, #1
   17aac:	sub	r2, r2, ip
   17ab0:	add	r1, r1, r2
   17ab4:	cmp	r3, #0
   17ab8:	cmpge	r2, #0
   17abc:	str	r1, [r4, #4]
   17ac0:	ldr	r0, [r4, #8]
   17ac4:	ble	17aec <__assert_fail@plt+0x6588>
   17ac8:	ldr	r5, [r0, lr, lsl #2]
   17acc:	ldr	r4, [r0, r3, lsl #2]
   17ad0:	cmp	r5, r4
   17ad4:	ble	17b00 <__assert_fail@plt+0x659c>
   17ad8:	add	r1, r3, r2
   17adc:	subs	r2, r2, #1
   17ae0:	sub	lr, lr, #1
   17ae4:	str	r5, [r0, r1, lsl #2]
   17ae8:	bne	17ac8 <__assert_fail@plt+0x6564>
   17aec:	lsl	r2, r2, #2
   17af0:	add	r1, r0, ip, lsl #2
   17af4:	bl	11264 <memcpy@plt>
   17af8:	mov	r0, #0
   17afc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b00:	add	r1, r3, r2
   17b04:	subs	r3, r3, #1
   17b08:	str	r4, [r0, r1, lsl #2]
   17b0c:	bcs	17ac8 <__assert_fail@plt+0x6564>
   17b10:	b	17aec <__assert_fail@plt+0x6588>
   17b14:	mov	r0, r3
   17b18:	bx	lr
   17b1c:	mov	r0, #12
   17b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b24:	ldr	r3, [r1, #4]
   17b28:	str	r3, [r0, #4]
   17b2c:	ldr	r2, [r1, #4]
   17b30:	cmp	r2, #0
   17b34:	ble	17b84 <__assert_fail@plt+0x6620>
   17b38:	push	{r4, r5, r6, lr}
   17b3c:	mov	r4, r0
   17b40:	str	r3, [r0]
   17b44:	lsl	r0, r3, #2
   17b48:	mov	r5, r1
   17b4c:	bl	2141c <__assert_fail@plt+0xfeb8>
   17b50:	cmp	r0, #0
   17b54:	str	r0, [r4, #8]
   17b58:	bne	17b6c <__assert_fail@plt+0x6608>
   17b5c:	str	r0, [r4, #4]
   17b60:	str	r0, [r4]
   17b64:	mov	r0, #12
   17b68:	pop	{r4, r5, r6, pc}
   17b6c:	ldr	r2, [r5, #4]
   17b70:	ldr	r1, [r5, #8]
   17b74:	lsl	r2, r2, #2
   17b78:	bl	11264 <memcpy@plt>
   17b7c:	mov	r0, #0
   17b80:	pop	{r4, r5, r6, pc}
   17b84:	mov	r3, #0
   17b88:	str	r3, [r0]
   17b8c:	str	r3, [r0, #4]
   17b90:	str	r3, [r0, #8]
   17b94:	mov	r0, r3
   17b98:	bx	lr
   17b9c:	cmp	r1, #0
   17ba0:	beq	17c38 <__assert_fail@plt+0x66d4>
   17ba4:	ldr	r3, [r1, #4]
   17ba8:	cmp	r2, #0
   17bac:	cmpne	r3, #0
   17bb0:	ble	17c2c <__assert_fail@plt+0x66c8>
   17bb4:	ldr	ip, [r2, #4]
   17bb8:	cmp	ip, #0
   17bbc:	ble	17c34 <__assert_fail@plt+0x66d0>
   17bc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17bc4:	mov	r6, r0
   17bc8:	add	r0, r3, ip
   17bcc:	str	r0, [r6]
   17bd0:	lsl	r0, r0, #2
   17bd4:	mov	r5, r1
   17bd8:	mov	r7, r2
   17bdc:	bl	2141c <__assert_fail@plt+0xfeb8>
   17be0:	cmp	r0, #0
   17be4:	str	r0, [r6, #8]
   17be8:	beq	17c9c <__assert_fail@plt+0x6738>
   17bec:	mov	r3, #0
   17bf0:	ldr	r2, [r5, #4]
   17bf4:	mov	r8, r0
   17bf8:	mov	r9, #1
   17bfc:	mov	lr, r3
   17c00:	cmp	lr, r2
   17c04:	sub	r4, r9, #1
   17c08:	ldr	ip, [r7, #4]
   17c0c:	bge	17ca4 <__assert_fail@plt+0x6740>
   17c10:	cmp	r3, ip
   17c14:	ldr	r1, [r5, #8]
   17c18:	blt	17c68 <__assert_fail@plt+0x6704>
   17c1c:	sub	r5, r2, lr
   17c20:	add	r1, r1, lr, lsl #2
   17c24:	lsl	r2, r5, #2
   17c28:	b	17cbc <__assert_fail@plt+0x6758>
   17c2c:	cmp	r3, #0
   17c30:	ble	17c38 <__assert_fail@plt+0x66d4>
   17c34:	b	17b24 <__assert_fail@plt+0x65c0>
   17c38:	cmp	r2, #0
   17c3c:	beq	17c50 <__assert_fail@plt+0x66ec>
   17c40:	ldr	r3, [r2, #4]
   17c44:	cmp	r3, #0
   17c48:	movgt	r1, r2
   17c4c:	bgt	17c34 <__assert_fail@plt+0x66d0>
   17c50:	mov	r3, #0
   17c54:	str	r3, [r0]
   17c58:	str	r3, [r0, #4]
   17c5c:	str	r3, [r0, #8]
   17c60:	mov	r0, r3
   17c64:	bx	lr
   17c68:	ldr	ip, [r7, #8]
   17c6c:	ldr	r1, [r1, lr, lsl #2]
   17c70:	ldr	ip, [ip, r3, lsl #2]
   17c74:	cmp	r1, ip
   17c78:	addgt	r3, r3, #1
   17c7c:	strgt	ip, [r8]
   17c80:	bgt	17c90 <__assert_fail@plt+0x672c>
   17c84:	addeq	r3, r3, #1
   17c88:	add	lr, lr, #1
   17c8c:	str	r1, [r8]
   17c90:	add	r9, r9, #1
   17c94:	add	r8, r8, #4
   17c98:	b	17c00 <__assert_fail@plt+0x669c>
   17c9c:	mov	r0, #12
   17ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ca4:	cmp	r3, ip
   17ca8:	bge	17cc8 <__assert_fail@plt+0x6764>
   17cac:	sub	r5, ip, r3
   17cb0:	ldr	r1, [r7, #8]
   17cb4:	lsl	r2, r5, #2
   17cb8:	add	r1, r1, r3, lsl #2
   17cbc:	add	r0, r0, r4, lsl #2
   17cc0:	bl	11264 <memcpy@plt>
   17cc4:	add	r4, r4, r5
   17cc8:	str	r4, [r6, #4]
   17ccc:	mov	r0, #0
   17cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd8:	mov	ip, #0
   17cdc:	ldr	r4, [r2, #4]
   17ce0:	sub	sp, sp, #20
   17ce4:	cmp	r4, ip
   17ce8:	str	ip, [r0]
   17cec:	addne	r9, r4, r3
   17cf0:	bne	17d10 <__assert_fail@plt+0x67ac>
   17cf4:	mov	r0, r4
   17cf8:	add	sp, sp, #20
   17cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d00:	ldr	lr, [r2, #8]
   17d04:	ldr	lr, [lr, ip, lsl #2]
   17d08:	add	ip, ip, #1
   17d0c:	add	r9, r9, lr
   17d10:	cmp	r4, ip
   17d14:	bgt	17d00 <__assert_fail@plt+0x679c>
   17d18:	mov	r7, r3
   17d1c:	ldr	r3, [r1, #68]	; 0x44
   17d20:	mov	r5, r2
   17d24:	and	r2, r9, r3
   17d28:	mov	r3, #12
   17d2c:	mov	r8, r1
   17d30:	mul	r3, r3, r2
   17d34:	ldr	r2, [r1, #32]
   17d38:	mov	r6, #0
   17d3c:	add	sl, r2, r3
   17d40:	ldr	fp, [r2, r3]
   17d44:	str	r0, [sp, #8]
   17d48:	cmp	r6, fp
   17d4c:	blt	17d98 <__assert_fail@plt+0x6834>
   17d50:	mov	r1, #1
   17d54:	mov	r0, #56	; 0x38
   17d58:	bl	213d4 <__assert_fail@plt+0xfe70>
   17d5c:	subs	r4, r0, #0
   17d60:	beq	17d84 <__assert_fail@plt+0x6820>
   17d64:	add	sl, r4, #4
   17d68:	mov	r1, r5
   17d6c:	mov	r0, sl
   17d70:	bl	17b24 <__assert_fail@plt+0x65c0>
   17d74:	subs	r6, r0, #0
   17d78:	beq	17de0 <__assert_fail@plt+0x687c>
   17d7c:	mov	r0, r4
   17d80:	bl	1370c <__assert_fail@plt+0x21a8>
   17d84:	ldr	r2, [sp, #8]
   17d88:	mov	r3, #12
   17d8c:	mov	r4, #0
   17d90:	str	r3, [r2]
   17d94:	b	17cf4 <__assert_fail@plt+0x6790>
   17d98:	ldr	r3, [sl, #8]
   17d9c:	ldr	r4, [r3, r6, lsl #2]
   17da0:	ldr	r3, [r4]
   17da4:	cmp	r3, r9
   17da8:	bne	17dd8 <__assert_fail@plt+0x6874>
   17dac:	ldrb	r3, [r4, #52]	; 0x34
   17db0:	and	r3, r3, #15
   17db4:	cmp	r7, r3
   17db8:	bne	17dd8 <__assert_fail@plt+0x6874>
   17dbc:	ldr	r0, [r4, #40]	; 0x28
   17dc0:	cmp	r0, #0
   17dc4:	beq	17dd8 <__assert_fail@plt+0x6874>
   17dc8:	mov	r1, r5
   17dcc:	bl	17824 <__assert_fail@plt+0x62c0>
   17dd0:	cmp	r0, #0
   17dd4:	bne	17cf4 <__assert_fail@plt+0x6790>
   17dd8:	add	r6, r6, #1
   17ddc:	b	17d48 <__assert_fail@plt+0x67e4>
   17de0:	ldrb	r2, [r4, #52]	; 0x34
   17de4:	and	r3, r7, #15
   17de8:	mov	fp, r6
   17dec:	bic	r2, r2, #15
   17df0:	orr	r3, r3, r2
   17df4:	strb	r3, [r4, #52]	; 0x34
   17df8:	and	r3, r7, #4
   17dfc:	str	r3, [sp]
   17e00:	and	r3, r7, #2
   17e04:	str	sl, [r4, #40]	; 0x28
   17e08:	str	r3, [sp, #4]
   17e0c:	ldr	r3, [r5, #4]
   17e10:	cmp	fp, r3
   17e14:	blt	17e34 <__assert_fail@plt+0x68d0>
   17e18:	mov	r2, r9
   17e1c:	mov	r1, r4
   17e20:	mov	r0, r8
   17e24:	bl	15b18 <__assert_fail@plt+0x45b4>
   17e28:	cmp	r0, #0
   17e2c:	beq	17cf4 <__assert_fail@plt+0x6790>
   17e30:	b	17ee0 <__assert_fail@plt+0x697c>
   17e34:	ldr	r3, [r5, #8]
   17e38:	ldr	r1, [r8]
   17e3c:	ldr	r2, [pc, #304]	; 17f74 <__assert_fail@plt+0x6a10>
   17e40:	ldr	r3, [r3, fp, lsl #2]
   17e44:	add	r1, r1, r3, lsl #3
   17e48:	ldr	r3, [r1, #4]
   17e4c:	ldrb	ip, [r1, #4]
   17e50:	ands	r3, r2, r3, lsr #8
   17e54:	moveq	r0, #1
   17e58:	movne	r0, #0
   17e5c:	cmp	ip, #1
   17e60:	movne	r0, #0
   17e64:	andeq	r0, r0, #1
   17e68:	cmp	r0, #0
   17e6c:	bne	17f6c <__assert_fail@plt+0x6a08>
   17e70:	ldrb	r1, [r1, #6]
   17e74:	ldrb	r0, [r4, #52]	; 0x34
   17e78:	cmp	ip, #2
   17e7c:	lsr	r1, r1, #4
   17e80:	orr	r1, r1, r0, lsr #5
   17e84:	and	r1, r1, #1
   17e88:	bic	r0, r0, #32
   17e8c:	orr	r1, r0, r1, lsl #5
   17e90:	strb	r1, [r4, #52]	; 0x34
   17e94:	uxtbeq	r1, r1
   17e98:	orreq	r1, r1, #16
   17e9c:	beq	17eb0 <__assert_fail@plt+0x694c>
   17ea0:	cmp	ip, #4
   17ea4:	bne	17eb4 <__assert_fail@plt+0x6950>
   17ea8:	ldrb	r1, [r4, #52]	; 0x34
   17eac:	orr	r1, r1, #64	; 0x40
   17eb0:	strb	r1, [r4, #52]	; 0x34
   17eb4:	cmp	r3, #0
   17eb8:	beq	17f6c <__assert_fail@plt+0x6a08>
   17ebc:	ldr	r1, [r4, #40]	; 0x28
   17ec0:	cmp	sl, r1
   17ec4:	bne	17f14 <__assert_fail@plt+0x69b0>
   17ec8:	mov	r0, #12
   17ecc:	str	r3, [sp, #12]
   17ed0:	bl	2141c <__assert_fail@plt+0xfeb8>
   17ed4:	ldr	r3, [sp, #12]
   17ed8:	subs	r1, r0, #0
   17edc:	bne	17eec <__assert_fail@plt+0x6988>
   17ee0:	mov	r0, r4
   17ee4:	bl	165fc <__assert_fail@plt+0x5098>
   17ee8:	b	17d84 <__assert_fail@plt+0x6820>
   17eec:	str	r1, [r4, #40]	; 0x28
   17ef0:	mov	r1, r5
   17ef4:	str	r3, [sp, #12]
   17ef8:	bl	17b24 <__assert_fail@plt+0x65c0>
   17efc:	ldr	r3, [sp, #12]
   17f00:	subs	r6, r0, #0
   17f04:	bne	17ee0 <__assert_fail@plt+0x697c>
   17f08:	ldrb	r1, [r4, #52]	; 0x34
   17f0c:	orr	r1, r1, #128	; 0x80
   17f10:	strb	r1, [r4, #52]	; 0x34
   17f14:	tst	r3, #1
   17f18:	beq	17f24 <__assert_fail@plt+0x69c0>
   17f1c:	tst	r7, #1
   17f20:	beq	17f5c <__assert_fail@plt+0x69f8>
   17f24:	tst	r3, #2
   17f28:	beq	17f34 <__assert_fail@plt+0x69d0>
   17f2c:	tst	r7, #1
   17f30:	bne	17f5c <__assert_fail@plt+0x69f8>
   17f34:	tst	r3, #16
   17f38:	beq	17f48 <__assert_fail@plt+0x69e4>
   17f3c:	ldr	r2, [sp, #4]
   17f40:	cmp	r2, #0
   17f44:	beq	17f5c <__assert_fail@plt+0x69f8>
   17f48:	tst	r3, #64	; 0x40
   17f4c:	beq	17f6c <__assert_fail@plt+0x6a08>
   17f50:	ldr	r3, [sp]
   17f54:	cmp	r3, #0
   17f58:	bne	17f6c <__assert_fail@plt+0x6a08>
   17f5c:	sub	r1, fp, r6
   17f60:	mov	r0, sl
   17f64:	bl	17864 <__assert_fail@plt+0x6300>
   17f68:	add	r6, r6, #1
   17f6c:	add	fp, fp, #1
   17f70:	b	17e0c <__assert_fail@plt+0x68a8>
   17f74:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17f78:	ldrb	r3, [r1, #24]
   17f7c:	cmp	r3, #16
   17f80:	bne	17fa0 <__assert_fail@plt+0x6a3c>
   17f84:	ldr	r3, [r1, #4]
   17f88:	mov	r0, #0
   17f8c:	ldr	r2, [r3, #12]
   17f90:	ldr	r3, [r3, #28]
   17f94:	str	r2, [r1, #12]
   17f98:	str	r3, [r1, #28]
   17f9c:	bx	lr
   17fa0:	push	{r4, r5, r6, lr}
   17fa4:	add	r3, r1, #20
   17fa8:	mov	r4, r1
   17fac:	mov	r5, r0
   17fb0:	str	r1, [r4, #12]
   17fb4:	ldm	r3, {r1, r2}
   17fb8:	bl	163c4 <__assert_fail@plt+0x4e60>
   17fbc:	cmn	r0, #1
   17fc0:	str	r0, [r4, #28]
   17fc4:	beq	18004 <__assert_fail@plt+0x6aa0>
   17fc8:	ldrb	r3, [r4, #24]
   17fcc:	cmp	r3, #12
   17fd0:	bne	17ffc <__assert_fail@plt+0x6a98>
   17fd4:	ldr	r3, [r5]
   17fd8:	ldr	r2, [r4, #20]
   17fdc:	add	r0, r3, r0, lsl #3
   17fe0:	lsl	r2, r2, #22
   17fe4:	ldr	r3, [r0, #4]
   17fe8:	lsr	r2, r2, #22
   17fec:	bic	r3, r3, #261120	; 0x3fc00
   17ff0:	bic	r3, r3, #768	; 0x300
   17ff4:	orr	r3, r3, r2, lsl #8
   17ff8:	str	r3, [r0, #4]
   17ffc:	mov	r0, #0
   18000:	pop	{r4, r5, r6, pc}
   18004:	mov	r0, #12
   18008:	pop	{r4, r5, r6, pc}
   1800c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18010:	sub	sp, sp, #36	; 0x24
   18014:	ldr	r5, [r0, #28]
   18018:	str	r3, [sp, #4]
   1801c:	mov	r3, #12
   18020:	mov	r8, r0
   18024:	mla	r5, r3, r1, r5
   18028:	mov	sl, r1
   1802c:	mov	r7, r2
   18030:	mvn	fp, #0
   18034:	mov	r4, #0
   18038:	str	r4, [sp, #20]
   1803c:	str	r4, [sp, #24]
   18040:	str	r4, [sp, #28]
   18044:	str	r3, [sp, #8]
   18048:	ldr	r3, [r5, #4]
   1804c:	cmp	r4, r3
   18050:	blt	18074 <__assert_fail@plt+0x6b10>
   18054:	mov	r4, #0
   18058:	ldr	r3, [r5, #4]
   1805c:	cmp	r4, r3
   18060:	blt	18158 <__assert_fail@plt+0x6bf4>
   18064:	ldr	r0, [sp, #28]
   18068:	bl	1370c <__assert_fail@plt+0x21a8>
   1806c:	mov	r6, #0
   18070:	b	18144 <__assert_fail@plt+0x6be0>
   18074:	ldr	r3, [r5, #8]
   18078:	ldr	r6, [r3, r4, lsl #2]
   1807c:	cmp	sl, r6
   18080:	beq	18150 <__assert_fail@plt+0x6bec>
   18084:	ldr	r3, [r8]
   18088:	add	r3, r3, r6, lsl #3
   1808c:	ldrb	r3, [r3, #4]
   18090:	tst	r3, #8
   18094:	beq	18150 <__assert_fail@plt+0x6bec>
   18098:	ldr	r3, [sp, #8]
   1809c:	mov	r0, r5
   180a0:	mul	r6, r3, r6
   180a4:	ldr	r3, [r8, #20]
   180a8:	add	r3, r3, r6
   180ac:	ldr	r1, [r3, #8]
   180b0:	ldr	r3, [r3, #4]
   180b4:	ldr	r2, [r1]
   180b8:	cmp	r3, #1
   180bc:	movle	r9, fp
   180c0:	ldrgt	r9, [r1, #4]
   180c4:	mov	r1, r2
   180c8:	str	r2, [sp, #12]
   180cc:	bl	15098 <__assert_fail@plt+0x3b34>
   180d0:	cmp	r0, #0
   180d4:	bne	180f0 <__assert_fail@plt+0x6b8c>
   180d8:	ldr	r2, [sp, #12]
   180dc:	mov	r0, r7
   180e0:	mov	r1, r2
   180e4:	bl	15098 <__assert_fail@plt+0x3b34>
   180e8:	cmp	r0, #0
   180ec:	bne	18120 <__assert_fail@plt+0x6bbc>
   180f0:	cmp	r9, #0
   180f4:	ble	18150 <__assert_fail@plt+0x6bec>
   180f8:	mov	r1, r9
   180fc:	mov	r0, r5
   18100:	bl	15098 <__assert_fail@plt+0x3b34>
   18104:	cmp	r0, #0
   18108:	bne	18150 <__assert_fail@plt+0x6bec>
   1810c:	mov	r1, r9
   18110:	mov	r0, r7
   18114:	bl	15098 <__assert_fail@plt+0x3b34>
   18118:	cmp	r0, #0
   1811c:	beq	18150 <__assert_fail@plt+0x6bec>
   18120:	ldr	r2, [r8, #28]
   18124:	ldr	r1, [sp, #4]
   18128:	add	r2, r2, r6
   1812c:	add	r0, sp, #20
   18130:	bl	179ac <__assert_fail@plt+0x6448>
   18134:	subs	r6, r0, #0
   18138:	beq	18150 <__assert_fail@plt+0x6bec>
   1813c:	ldr	r0, [sp, #28]
   18140:	bl	1370c <__assert_fail@plt+0x21a8>
   18144:	mov	r0, r6
   18148:	add	sp, sp, #36	; 0x24
   1814c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18150:	add	r4, r4, #1
   18154:	b	18048 <__assert_fail@plt+0x6ae4>
   18158:	ldr	r3, [r5, #8]
   1815c:	add	r0, sp, #20
   18160:	ldr	r6, [r3, r4, lsl #2]
   18164:	mov	r1, r6
   18168:	bl	15098 <__assert_fail@plt+0x3b34>
   1816c:	cmp	r0, #0
   18170:	bne	1818c <__assert_fail@plt+0x6c28>
   18174:	mov	r1, r6
   18178:	mov	r0, r7
   1817c:	bl	15098 <__assert_fail@plt+0x3b34>
   18180:	sub	r1, r0, #1
   18184:	mov	r0, r7
   18188:	bl	17864 <__assert_fail@plt+0x6300>
   1818c:	add	r4, r4, #1
   18190:	b	18058 <__assert_fail@plt+0x6af4>
   18194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18198:	sub	sp, sp, #300	; 0x12c
   1819c:	ldr	r6, [r0]
   181a0:	mov	r8, r0
   181a4:	mov	r9, r1
   181a8:	ldr	r3, [r6, #92]	; 0x5c
   181ac:	mov	r4, r2
   181b0:	cmp	r3, #1
   181b4:	movne	r3, #0
   181b8:	ldreq	r3, [r0, #12]
   181bc:	add	r7, sp, #40	; 0x28
   181c0:	lsreq	r3, r3, #22
   181c4:	andeq	r3, r3, #1
   181c8:	str	r3, [sp, #4]
   181cc:	mov	r3, #0
   181d0:	str	r3, [sp]
   181d4:	ldr	r3, [r9, #8]
   181d8:	ldr	r2, [sp]
   181dc:	cmp	r2, r3
   181e0:	bge	184f4 <__assert_fail@plt+0x6f90>
   181e4:	ldr	r3, [r9, #12]
   181e8:	ldr	r2, [sp]
   181ec:	ldr	sl, [r3, r2, lsl #2]
   181f0:	lsl	r3, sl, #3
   181f4:	str	r3, [sp, #8]
   181f8:	ldr	r3, [r6]
   181fc:	lsl	r2, sl, #3
   18200:	add	r2, r3, r2
   18204:	ldrb	r5, [r2, #4]
   18208:	cmp	r5, #1
   1820c:	bne	182f4 <__assert_fail@plt+0x6d90>
   18210:	ldrb	r0, [r3, sl, lsl #3]
   18214:	ldr	r3, [sp, #4]
   18218:	cmp	r3, #0
   1821c:	strb	r5, [r4, r0]
   18220:	beq	1822c <__assert_fail@plt+0x6cc8>
   18224:	bl	11270 <tolower@plt>
   18228:	strb	r5, [r4, r0]
   1822c:	ldr	r3, [r8, #12]
   18230:	tst	r3, #4194304	; 0x400000
   18234:	beq	182d4 <__assert_fail@plt+0x6d70>
   18238:	ldr	r3, [r6, #92]	; 0x5c
   1823c:	cmp	r3, #1
   18240:	ble	182d4 <__assert_fail@plt+0x6d70>
   18244:	ldr	r2, [r6]
   18248:	ldr	r0, [pc, #684]	; 184fc <__assert_fail@plt+0x6f98>
   1824c:	mov	r5, #1
   18250:	ldrb	r3, [r2, sl, lsl #3]
   18254:	strb	r3, [sp, #40]	; 0x28
   18258:	ldr	ip, [r6, #8]
   1825c:	add	r1, sl, r5
   18260:	cmp	ip, r1
   18264:	bls	18284 <__assert_fail@plt+0x6d20>
   18268:	add	r3, r2, r1, lsl #3
   1826c:	ldr	r3, [r3, #4]
   18270:	bic	r3, r3, #-16777216	; 0xff000000
   18274:	bic	r3, r3, #14614528	; 0xdf0000
   18278:	bic	r3, r3, #65280	; 0xff00
   1827c:	cmp	r3, r0
   18280:	beq	182e4 <__assert_fail@plt+0x6d80>
   18284:	mov	r3, #0
   18288:	str	r3, [sp, #32]
   1828c:	str	r3, [sp, #36]	; 0x24
   18290:	mov	r2, r5
   18294:	add	r3, sp, #32
   18298:	mov	r1, r7
   1829c:	add	r0, sp, #28
   182a0:	bl	217d8 <__assert_fail@plt+0x10274>
   182a4:	cmp	r0, r5
   182a8:	bne	182d4 <__assert_fail@plt+0x6d70>
   182ac:	ldr	r0, [sp, #28]
   182b0:	bl	11288 <towlower@plt>
   182b4:	add	r2, sp, #32
   182b8:	mov	r1, r0
   182bc:	mov	r0, r7
   182c0:	bl	111e0 <wcrtomb@plt>
   182c4:	cmn	r0, #1
   182c8:	movne	r2, #1
   182cc:	ldrbne	r3, [sp, #40]	; 0x28
   182d0:	strbne	r2, [r4, r3]
   182d4:	ldr	r3, [sp]
   182d8:	add	r3, r3, #1
   182dc:	str	r3, [sp]
   182e0:	b	181d4 <__assert_fail@plt+0x6c70>
   182e4:	ldrb	r3, [r2, r1, lsl #3]
   182e8:	strb	r3, [r7, r5]
   182ec:	add	r5, r5, #1
   182f0:	b	1825c <__assert_fail@plt+0x6cf8>
   182f4:	cmp	r5, #3
   182f8:	bne	1837c <__assert_fail@plt+0x6e18>
   182fc:	mov	sl, #0
   18300:	mov	r1, #1
   18304:	ldr	r2, [sp, #8]
   18308:	ldr	r3, [r6]
   1830c:	lsl	fp, sl, #3
   18310:	mov	r5, #0
   18314:	ldr	r3, [r3, r2]
   18318:	add	r2, r4, fp
   1831c:	ldr	r3, [r3, sl]
   18320:	lsr	ip, r3, r5
   18324:	tst	ip, #1
   18328:	add	r0, r5, fp
   1832c:	beq	18360 <__assert_fail@plt+0x6dfc>
   18330:	ldr	ip, [sp, #4]
   18334:	strb	r1, [r2, r5]
   18338:	cmp	ip, #0
   1833c:	beq	18360 <__assert_fail@plt+0x6dfc>
   18340:	str	r1, [sp, #20]
   18344:	str	r2, [sp, #16]
   18348:	str	r3, [sp, #12]
   1834c:	bl	11270 <tolower@plt>
   18350:	ldr	r2, [sp, #16]
   18354:	ldr	r3, [sp, #12]
   18358:	ldr	r1, [sp, #20]
   1835c:	strb	r1, [r4, r0]
   18360:	add	r5, r5, #1
   18364:	cmp	r5, #32
   18368:	bne	18320 <__assert_fail@plt+0x6dbc>
   1836c:	add	sl, sl, #4
   18370:	cmp	sl, #32
   18374:	bne	18304 <__assert_fail@plt+0x6da0>
   18378:	b	182d4 <__assert_fail@plt+0x6d70>
   1837c:	cmp	r5, #6
   18380:	bne	184c0 <__assert_fail@plt+0x6f5c>
   18384:	ldr	r2, [r6, #92]	; 0x5c
   18388:	ldr	fp, [r3, sl, lsl #3]
   1838c:	cmp	r2, #1
   18390:	ble	1846c <__assert_fail@plt+0x6f08>
   18394:	ldr	r2, [fp, #36]	; 0x24
   18398:	cmp	r2, #0
   1839c:	bne	18474 <__assert_fail@plt+0x6f10>
   183a0:	ldrb	r2, [fp, #16]
   183a4:	tst	r2, #1
   183a8:	bne	18474 <__assert_fail@plt+0x6f10>
   183ac:	ldr	r5, [fp, #32]
   183b0:	cmp	r5, #0
   183b4:	bne	18474 <__assert_fail@plt+0x6f10>
   183b8:	mov	sl, #0
   183bc:	ldr	r2, [fp, #20]
   183c0:	cmp	r5, r2
   183c4:	bge	182d4 <__assert_fail@plt+0x6d70>
   183c8:	str	sl, [sp, #32]
   183cc:	str	sl, [sp, #36]	; 0x24
   183d0:	ldr	r1, [fp]
   183d4:	lsl	r3, r5, #2
   183d8:	add	r2, sp, #32
   183dc:	ldr	r1, [r1, r5, lsl #2]
   183e0:	mov	r0, r7
   183e4:	str	r3, [sp, #8]
   183e8:	bl	111e0 <wcrtomb@plt>
   183ec:	cmn	r0, #1
   183f0:	beq	1841c <__assert_fail@plt+0x6eb8>
   183f4:	ldrb	r0, [sp, #40]	; 0x28
   183f8:	ldr	r3, [sp, #4]
   183fc:	mov	r2, #1
   18400:	cmp	r3, #0
   18404:	strb	r2, [r4, r0]
   18408:	str	r2, [sp, #8]
   1840c:	beq	1841c <__assert_fail@plt+0x6eb8>
   18410:	bl	11270 <tolower@plt>
   18414:	ldr	r2, [sp, #8]
   18418:	strb	r2, [r4, r0]
   1841c:	ldr	r2, [r8, #12]
   18420:	tst	r2, #4194304	; 0x400000
   18424:	beq	18464 <__assert_fail@plt+0x6f00>
   18428:	ldr	r2, [r6, #92]	; 0x5c
   1842c:	cmp	r2, #1
   18430:	ble	18464 <__assert_fail@plt+0x6f00>
   18434:	ldr	r2, [fp]
   18438:	lsl	r3, r5, #2
   1843c:	ldr	r0, [r2, r3]
   18440:	bl	11288 <towlower@plt>
   18444:	add	r2, sp, #32
   18448:	mov	r1, r0
   1844c:	mov	r0, r7
   18450:	bl	111e0 <wcrtomb@plt>
   18454:	cmn	r0, #1
   18458:	movne	r1, #1
   1845c:	ldrbne	r2, [sp, #40]	; 0x28
   18460:	strbne	r1, [r4, r2]
   18464:	add	r5, r5, #1
   18468:	b	183bc <__assert_fail@plt+0x6e58>
   1846c:	mov	r5, #0
   18470:	b	183b8 <__assert_fail@plt+0x6e54>
   18474:	mov	r5, #0
   18478:	strb	r5, [sp, #32]
   1847c:	mov	r2, #1
   18480:	mov	r3, r7
   18484:	add	r1, sp, #32
   18488:	mov	r0, r5
   1848c:	str	r5, [r7]
   18490:	str	r5, [r7, #4]
   18494:	bl	217d8 <__assert_fail@plt+0x10274>
   18498:	ldrb	r3, [sp, #32]
   1849c:	cmn	r0, #2
   184a0:	moveq	r2, #1
   184a4:	strbeq	r2, [r4, r3]
   184a8:	add	r3, r3, #1
   184ac:	uxtb	r3, r3
   184b0:	cmp	r3, #0
   184b4:	strb	r3, [sp, #32]
   184b8:	bne	1847c <__assert_fail@plt+0x6f18>
   184bc:	b	182d4 <__assert_fail@plt+0x6d70>
   184c0:	and	r3, r5, #253	; 0xfd
   184c4:	cmp	r3, #5
   184c8:	beq	184d4 <__assert_fail@plt+0x6f70>
   184cc:	cmp	r5, #2
   184d0:	bne	182d4 <__assert_fail@plt+0x6d70>
   184d4:	mov	r2, #256	; 0x100
   184d8:	mov	r1, #1
   184dc:	mov	r0, r4
   184e0:	bl	11444 <memset@plt>
   184e4:	cmp	r5, #2
   184e8:	ldrbeq	r3, [r8, #28]
   184ec:	orreq	r3, r3, #1
   184f0:	strbeq	r3, [r8, #28]
   184f4:	add	sp, sp, #300	; 0x12c
   184f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184fc:	eoreq	r0, r0, r1
   18500:	ldr	r3, [r0]
   18504:	push	{r4, r5, r6, lr}
   18508:	cmp	r3, #0
   1850c:	bne	18520 <__assert_fail@plt+0x6fbc>
   18510:	bl	15aa8 <__assert_fail@plt+0x4544>
   18514:	clz	r0, r0
   18518:	lsr	r0, r0, #5
   1851c:	pop	{r4, r5, r6, pc}
   18520:	ldr	r2, [r0, #4]
   18524:	mov	r4, r0
   18528:	cmp	r2, #0
   1852c:	mov	r5, r1
   18530:	ldreq	r3, [r0, #8]
   18534:	streq	r1, [r3]
   18538:	beq	185bc <__assert_fail@plt+0x7058>
   1853c:	cmp	r3, r2
   18540:	bne	18564 <__assert_fail@plt+0x7000>
   18544:	lsl	r2, r3, #1
   18548:	str	r2, [r0]
   1854c:	lsl	r1, r3, #3
   18550:	ldr	r0, [r0, #8]
   18554:	bl	2145c <__assert_fail@plt+0xfef8>
   18558:	cmp	r0, #0
   1855c:	popeq	{r4, r5, r6, pc}
   18560:	str	r0, [r4, #8]
   18564:	ldr	r2, [r4, #8]
   18568:	ldr	r3, [r2]
   1856c:	cmp	r5, r3
   18570:	ldr	r3, [r4, #4]
   18574:	movlt	r1, r3
   18578:	addlt	r0, r2, r3, lsl #2
   1857c:	blt	185a8 <__assert_fail@plt+0x7044>
   18580:	add	r1, r2, r3, lsl #2
   18584:	ldr	r0, [r1, #-4]
   18588:	cmp	r5, r0
   1858c:	bge	185b8 <__assert_fail@plt+0x7054>
   18590:	str	r0, [r1], #-4
   18594:	sub	r3, r3, #1
   18598:	b	18584 <__assert_fail@plt+0x7020>
   1859c:	ldr	ip, [r0, #-4]
   185a0:	sub	r1, r1, #1
   185a4:	str	ip, [r0], #-4
   185a8:	cmp	r1, #0
   185ac:	bgt	1859c <__assert_fail@plt+0x7038>
   185b0:	cmp	r3, #0
   185b4:	subge	r3, r3, r3
   185b8:	str	r5, [r2, r3, lsl #2]
   185bc:	ldr	r3, [r4, #4]
   185c0:	mov	r0, #1
   185c4:	add	r3, r3, #1
   185c8:	str	r3, [r4, #4]
   185cc:	pop	{r4, r5, r6, pc}
   185d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185d4:	sub	sp, sp, #20
   185d8:	mov	r4, r0
   185dc:	ldr	r6, [sp, #56]	; 0x38
   185e0:	mov	r7, r1
   185e4:	mov	r5, r2
   185e8:	mov	fp, r3
   185ec:	mov	sl, #12
   185f0:	ldr	ip, [r4]
   185f4:	ldr	r2, [r4, #20]
   185f8:	add	r1, ip, r7, lsl #3
   185fc:	ldrb	r3, [r1, #4]
   18600:	cmp	r3, #4
   18604:	bne	1867c <__assert_fail@plt+0x7118>
   18608:	ldr	r3, [r4, #12]
   1860c:	mul	r9, sl, r5
   18610:	ldr	r8, [r3, r7, lsl #2]
   18614:	add	r2, r2, r9
   18618:	mov	r1, #0
   1861c:	str	r1, [r2, #4]
   18620:	mov	r0, r4
   18624:	mov	r2, r6
   18628:	mov	r1, r8
   1862c:	str	r5, [sp, #12]
   18630:	bl	1656c <__assert_fail@plt+0x5008>
   18634:	ldr	r3, [sp, #12]
   18638:	cmn	r0, #1
   1863c:	mov	r5, r0
   18640:	bne	18650 <__assert_fail@plt+0x70ec>
   18644:	mov	r0, #12
   18648:	add	sp, sp, #20
   1864c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18650:	ldr	r2, [r4, #12]
   18654:	ldr	r1, [r2, r7, lsl #2]
   18658:	str	r1, [r2, r3, lsl #2]
   1865c:	ldr	r0, [r4, #20]
   18660:	mov	r1, r5
   18664:	add	r0, r0, r9
   18668:	bl	18500 <__assert_fail@plt+0x6f9c>
   1866c:	cmp	r0, #0
   18670:	beq	18644 <__assert_fail@plt+0x70e0>
   18674:	mov	r7, r8
   18678:	b	185f0 <__assert_fail@plt+0x708c>
   1867c:	mul	r8, sl, r7
   18680:	add	r3, r2, r8
   18684:	ldr	r0, [r3, #4]
   18688:	cmp	r0, #0
   1868c:	ldreq	r3, [r4, #12]
   18690:	ldreq	r2, [r3, r7, lsl #2]
   18694:	streq	r2, [r3, r5, lsl #2]
   18698:	beq	18648 <__assert_fail@plt+0x70e4>
   1869c:	cmp	r0, #1
   186a0:	ldr	r3, [r3, #8]
   186a4:	mul	r9, sl, r5
   186a8:	bne	18728 <__assert_fail@plt+0x71c4>
   186ac:	cmp	r7, r5
   186b0:	ldr	r8, [r3]
   186b4:	add	r0, r2, r9
   186b8:	mov	r3, #0
   186bc:	sub	r2, r7, fp
   186c0:	clz	r2, r2
   186c4:	lsr	r2, r2, #5
   186c8:	moveq	r2, #0
   186cc:	cmp	r2, r3
   186d0:	str	r3, [r0, #4]
   186d4:	beq	186f8 <__assert_fail@plt+0x7194>
   186d8:	mov	r1, r8
   186dc:	str	r3, [sp, #12]
   186e0:	bl	18500 <__assert_fail@plt+0x6f9c>
   186e4:	ldr	r3, [sp, #12]
   186e8:	cmp	r0, #0
   186ec:	movne	r0, r3
   186f0:	bne	18648 <__assert_fail@plt+0x70e4>
   186f4:	b	18644 <__assert_fail@plt+0x70e0>
   186f8:	ldr	r3, [r1, #4]
   186fc:	ldr	r2, [pc, #272]	; 18814 <__assert_fail@plt+0x72b0>
   18700:	and	r3, r2, r3, lsr #8
   18704:	orr	r6, r6, r3
   18708:	mov	r2, r6
   1870c:	mov	r1, r8
   18710:	mov	r0, r4
   18714:	bl	1656c <__assert_fail@plt+0x5008>
   18718:	cmn	r0, #1
   1871c:	mov	r5, r0
   18720:	bne	1865c <__assert_fail@plt+0x70f8>
   18724:	b	18644 <__assert_fail@plt+0x70e0>
   18728:	add	r0, r2, r9
   1872c:	ldr	r5, [r3]
   18730:	mov	r3, #0
   18734:	str	r3, [r0, #4]
   18738:	ldr	r3, [r4, #8]
   1873c:	sub	r2, r3, #-536870911	; 0xe0000001
   18740:	sub	r1, r3, #1
   18744:	sub	r3, r3, #-1073741823	; 0xc0000001
   18748:	add	ip, ip, r2, lsl #3
   1874c:	lsl	r3, r3, #2
   18750:	ldrb	lr, [ip, #6]
   18754:	cmp	r1, #0
   18758:	movle	r2, #0
   1875c:	movgt	r2, #1
   18760:	ands	r2, r2, lr, lsr #2
   18764:	bne	187d0 <__assert_fail@plt+0x726c>
   18768:	mov	r2, r6
   1876c:	mov	r1, r5
   18770:	mov	r0, r4
   18774:	bl	1656c <__assert_fail@plt+0x5008>
   18778:	cmn	r0, #1
   1877c:	mov	r7, r0
   18780:	beq	18644 <__assert_fail@plt+0x70e0>
   18784:	ldr	r0, [r4, #20]
   18788:	mov	r1, r7
   1878c:	add	r0, r0, r9
   18790:	bl	18500 <__assert_fail@plt+0x6f9c>
   18794:	cmp	r0, #0
   18798:	beq	18644 <__assert_fail@plt+0x70e0>
   1879c:	str	r6, [sp]
   187a0:	mov	r3, fp
   187a4:	mov	r2, r7
   187a8:	mov	r1, r5
   187ac:	mov	r0, r4
   187b0:	bl	185d0 <__assert_fail@plt+0x706c>
   187b4:	cmp	r0, #0
   187b8:	bne	18648 <__assert_fail@plt+0x70e4>
   187bc:	ldr	r3, [r4, #20]
   187c0:	add	r8, r3, r8
   187c4:	ldr	r3, [r8, #8]
   187c8:	ldr	r8, [r3, #4]
   187cc:	b	18708 <__assert_fail@plt+0x71a4>
   187d0:	ldr	r2, [r4, #16]
   187d4:	ldr	r2, [r2, r3]
   187d8:	cmp	r5, r2
   187dc:	bne	187f4 <__assert_fail@plt+0x7290>
   187e0:	ldr	r2, [ip, #4]
   187e4:	ldr	lr, [pc, #40]	; 18814 <__assert_fail@plt+0x72b0>
   187e8:	and	r2, lr, r2, lsr #8
   187ec:	cmp	r6, r2
   187f0:	beq	18804 <__assert_fail@plt+0x72a0>
   187f4:	sub	r1, r1, #1
   187f8:	sub	ip, ip, #8
   187fc:	sub	r3, r3, #4
   18800:	b	18750 <__assert_fail@plt+0x71ec>
   18804:	bl	18500 <__assert_fail@plt+0x6f9c>
   18808:	cmp	r0, #0
   1880c:	bne	187bc <__assert_fail@plt+0x7258>
   18810:	b	18644 <__assert_fail@plt+0x70e0>
   18814:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18818:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1881c:	mov	r6, r0
   18820:	ldr	r7, [sp, #40]	; 0x28
   18824:	mov	r5, r1
   18828:	mov	r4, r2
   1882c:	mov	r8, r3
   18830:	mov	r9, #12
   18834:	mov	r1, r4
   18838:	mov	r0, r5
   1883c:	bl	15098 <__assert_fail@plt+0x3b34>
   18840:	cmp	r0, #0
   18844:	beq	18850 <__assert_fail@plt+0x72ec>
   18848:	mov	r0, #0
   1884c:	b	18890 <__assert_fail@plt+0x732c>
   18850:	ldr	r3, [r6]
   18854:	add	r2, r3, r4, lsl #3
   18858:	ldrb	r2, [r2, #4]
   1885c:	cmp	r2, r7
   18860:	bne	18898 <__assert_fail@plt+0x7334>
   18864:	ldr	r3, [r3, r4, lsl #3]
   18868:	cmp	r8, r3
   1886c:	bne	18898 <__assert_fail@plt+0x7334>
   18870:	cmp	r7, #9
   18874:	bne	18848 <__assert_fail@plt+0x72e4>
   18878:	mov	r1, r4
   1887c:	mov	r0, r5
   18880:	bl	18500 <__assert_fail@plt+0x6f9c>
   18884:	cmp	r0, #0
   18888:	bne	18848 <__assert_fail@plt+0x72e4>
   1888c:	mov	r0, #12
   18890:	add	sp, sp, #12
   18894:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18898:	mov	r1, r4
   1889c:	mov	r0, r5
   188a0:	bl	18500 <__assert_fail@plt+0x6f9c>
   188a4:	cmp	r0, #0
   188a8:	beq	1888c <__assert_fail@plt+0x7328>
   188ac:	mul	r4, r9, r4
   188b0:	ldr	r3, [r6, #20]
   188b4:	add	r3, r3, r4
   188b8:	ldr	r2, [r3, #4]
   188bc:	cmp	r2, #0
   188c0:	beq	18848 <__assert_fail@plt+0x72e4>
   188c4:	cmp	r2, #2
   188c8:	beq	188e0 <__assert_fail@plt+0x737c>
   188cc:	ldr	r2, [r6, #20]
   188d0:	add	r4, r2, r4
   188d4:	ldr	r3, [r4, #8]
   188d8:	ldr	r4, [r3]
   188dc:	b	18834 <__assert_fail@plt+0x72d0>
   188e0:	ldr	r2, [r3, #8]
   188e4:	mov	r1, r5
   188e8:	str	r7, [sp]
   188ec:	mov	r3, r8
   188f0:	ldr	r2, [r2, #4]
   188f4:	mov	r0, r6
   188f8:	bl	18818 <__assert_fail@plt+0x72b4>
   188fc:	cmp	r0, #0
   18900:	beq	188cc <__assert_fail@plt+0x7368>
   18904:	b	18890 <__assert_fail@plt+0x732c>
   18908:	push	{r4, r5, r6, r7, r8, lr}
   1890c:	subs	r7, r1, #0
   18910:	bne	1891c <__assert_fail@plt+0x73b8>
   18914:	mov	r0, #0
   18918:	pop	{r4, r5, r6, r7, r8, pc}
   1891c:	ldr	r3, [r7, #4]
   18920:	cmp	r3, #0
   18924:	beq	18914 <__assert_fail@plt+0x73b0>
   18928:	ldm	r0, {r1, r2}
   1892c:	mov	r5, r0
   18930:	add	r2, r2, r3, lsl #1
   18934:	cmp	r1, r2
   18938:	bge	18960 <__assert_fail@plt+0x73fc>
   1893c:	add	r1, r3, r1
   18940:	ldr	r0, [r0, #8]
   18944:	lsl	r4, r1, #1
   18948:	lsl	r1, r1, #3
   1894c:	bl	2145c <__assert_fail@plt+0xfef8>
   18950:	cmp	r0, #0
   18954:	beq	18a64 <__assert_fail@plt+0x7500>
   18958:	str	r0, [r5, #8]
   1895c:	str	r4, [r5]
   18960:	ldr	r4, [r5, #4]
   18964:	ldr	r2, [r7, #4]
   18968:	cmp	r4, #0
   1896c:	bne	1898c <__assert_fail@plt+0x7428>
   18970:	str	r2, [r5, #4]
   18974:	ldr	r2, [r7, #4]
   18978:	ldr	r0, [r5, #8]
   1897c:	ldr	r1, [r7, #8]
   18980:	lsl	r2, r2, #2
   18984:	bl	11264 <memcpy@plt>
   18988:	b	18914 <__assert_fail@plt+0x73b0>
   1898c:	add	r6, r4, r2, lsl #1
   18990:	sub	r3, r4, #1
   18994:	sub	r2, r2, #1
   18998:	cmp	r2, #0
   1899c:	cmpge	r3, #0
   189a0:	bge	18a18 <__assert_fail@plt+0x74b4>
   189a4:	cmp	r2, #0
   189a8:	blt	189c8 <__assert_fail@plt+0x7464>
   189ac:	add	r2, r2, #1
   189b0:	sub	r6, r6, r2
   189b4:	ldr	r0, [r5, #8]
   189b8:	lsl	r2, r2, #2
   189bc:	ldr	r1, [r7, #8]
   189c0:	add	r0, r0, r6, lsl #2
   189c4:	bl	11264 <memcpy@plt>
   189c8:	ldr	r2, [r7, #4]
   189cc:	ldr	r1, [r5, #4]
   189d0:	add	r2, r1, r2, lsl #1
   189d4:	sub	ip, r2, #1
   189d8:	subs	r2, r2, r6
   189dc:	beq	18914 <__assert_fail@plt+0x73b0>
   189e0:	ldr	r0, [r5, #8]
   189e4:	sub	r3, r1, #1
   189e8:	add	r1, r1, r2
   189ec:	str	r1, [r5, #4]
   189f0:	ldr	r4, [r0, ip, lsl #2]
   189f4:	ldr	lr, [r0, r3, lsl #2]
   189f8:	add	r1, r3, r2
   189fc:	cmp	r4, lr
   18a00:	ble	18a4c <__assert_fail@plt+0x74e8>
   18a04:	subs	r2, r2, #1
   18a08:	sub	ip, ip, #1
   18a0c:	str	r4, [r0, r1, lsl #2]
   18a10:	bne	189f0 <__assert_fail@plt+0x748c>
   18a14:	b	18914 <__assert_fail@plt+0x73b0>
   18a18:	ldr	r1, [r5, #8]
   18a1c:	ldr	r0, [r7, #8]
   18a20:	ldr	ip, [r1, r3, lsl #2]
   18a24:	ldr	r0, [r0, r2, lsl #2]
   18a28:	cmp	ip, r0
   18a2c:	subeq	r2, r2, #1
   18a30:	beq	18a44 <__assert_fail@plt+0x74e0>
   18a34:	sublt	r6, r6, #1
   18a38:	sublt	r2, r2, #1
   18a3c:	strlt	r0, [r1, r6, lsl #2]
   18a40:	blt	18998 <__assert_fail@plt+0x7434>
   18a44:	sub	r3, r3, #1
   18a48:	b	18998 <__assert_fail@plt+0x7434>
   18a4c:	subs	r3, r3, #1
   18a50:	str	lr, [r0, r1, lsl #2]
   18a54:	bpl	189f0 <__assert_fail@plt+0x748c>
   18a58:	lsl	r2, r2, #2
   18a5c:	add	r1, r0, r6, lsl #2
   18a60:	b	18984 <__assert_fail@plt+0x7420>
   18a64:	mov	r0, #12
   18a68:	pop	{r4, r5, r6, r7, r8, pc}
   18a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a70:	mov	r7, #12
   18a74:	sub	sp, sp, #44	; 0x2c
   18a78:	mul	r7, r7, r2
   18a7c:	str	r3, [sp, #12]
   18a80:	ldr	r3, [r1, #20]
   18a84:	mov	r4, r1
   18a88:	add	r3, r3, r7
   18a8c:	add	r6, sp, #16
   18a90:	ldr	r1, [r3, #4]
   18a94:	str	r0, [sp, #8]
   18a98:	add	r1, r1, #1
   18a9c:	mov	r0, r6
   18aa0:	mov	r5, r2
   18aa4:	bl	15ae8 <__assert_fail@plt+0x4584>
   18aa8:	subs	sl, r0, #0
   18aac:	bne	18b44 <__assert_fail@plt+0x75e0>
   18ab0:	ldr	r3, [sp, #20]
   18ab4:	lsl	r8, r5, #3
   18ab8:	add	r2, r3, #1
   18abc:	str	r2, [sp, #20]
   18ac0:	ldr	r2, [sp, #24]
   18ac4:	str	r5, [r2, r3, lsl #2]
   18ac8:	ldr	r3, [r4, #24]
   18acc:	mvn	r2, #0
   18ad0:	add	r3, r3, r7
   18ad4:	str	r2, [r3, #4]
   18ad8:	ldr	r3, [r4]
   18adc:	add	r2, r3, r8
   18ae0:	ldr	r1, [r2, #4]
   18ae4:	ldr	r2, [pc, #352]	; 18c4c <__assert_fail@plt+0x76e8>
   18ae8:	and	r2, r2, r1
   18aec:	cmp	r2, #0
   18af0:	bne	18b50 <__assert_fail@plt+0x75ec>
   18af4:	ldr	r3, [r4]
   18af8:	add	r8, r3, r8
   18afc:	ldrb	r5, [r8, #4]
   18b00:	ands	r5, r5, #8
   18b04:	movne	r5, #0
   18b08:	movne	r9, r5
   18b0c:	addne	r8, sp, #28
   18b10:	bne	18bd8 <__assert_fail@plt+0x7674>
   18b14:	ldr	r3, [sp, #12]
   18b18:	eor	r3, r3, #1
   18b1c:	tst	r5, r3
   18b20:	ldr	r3, [r4, #24]
   18b24:	ldmeq	r6, {r0, r1, r2}
   18b28:	add	r7, r3, r7
   18b2c:	movne	r3, #0
   18b30:	strne	r3, [r7, #4]
   18b34:	stmeq	r7, {r0, r1, r2}
   18b38:	ldm	r6, {r0, r1, r2}
   18b3c:	ldr	r3, [sp, #8]
   18b40:	stm	r3, {r0, r1, r2}
   18b44:	mov	r0, sl
   18b48:	add	sp, sp, #44	; 0x2c
   18b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b50:	ldr	r2, [r4, #20]
   18b54:	add	r2, r2, r7
   18b58:	ldr	r0, [r2, #4]
   18b5c:	cmp	r0, #0
   18b60:	beq	18af4 <__assert_fail@plt+0x7590>
   18b64:	ldr	r2, [r2, #8]
   18b68:	ldr	r2, [r2]
   18b6c:	add	r3, r3, r2, lsl #3
   18b70:	ldrb	r3, [r3, #6]
   18b74:	tst	r3, #4
   18b78:	bne	18af4 <__assert_fail@plt+0x7590>
   18b7c:	ldr	r3, [pc, #204]	; 18c50 <__assert_fail@plt+0x76ec>
   18b80:	mov	r2, r5
   18b84:	and	r3, r3, r1, lsr #8
   18b88:	str	r3, [sp]
   18b8c:	mov	r1, r5
   18b90:	mov	r3, r5
   18b94:	mov	r0, r4
   18b98:	bl	185d0 <__assert_fail@plt+0x706c>
   18b9c:	cmp	r0, #0
   18ba0:	beq	18af4 <__assert_fail@plt+0x7590>
   18ba4:	mov	sl, r0
   18ba8:	b	18b44 <__assert_fail@plt+0x75e0>
   18bac:	ldr	r3, [r3, #8]
   18bb0:	ldr	r1, [r4, #24]
   18bb4:	ldr	r2, [r3, r9, lsl #2]
   18bb8:	mov	r3, #12
   18bbc:	mul	fp, r3, r2
   18bc0:	add	r1, r1, fp
   18bc4:	ldr	r3, [r1, #4]
   18bc8:	cmn	r3, #1
   18bcc:	bne	18bf0 <__assert_fail@plt+0x768c>
   18bd0:	mov	r5, #1
   18bd4:	add	r9, r9, #1
   18bd8:	ldr	r3, [r4, #20]
   18bdc:	add	r3, r3, r7
   18be0:	ldr	r2, [r3, #4]
   18be4:	cmp	r9, r2
   18be8:	blt	18bac <__assert_fail@plt+0x7648>
   18bec:	b	18b14 <__assert_fail@plt+0x75b0>
   18bf0:	cmp	r3, #0
   18bf4:	bne	18c40 <__assert_fail@plt+0x76dc>
   18bf8:	mov	r1, r4
   18bfc:	mov	r0, r8
   18c00:	bl	18a6c <__assert_fail@plt+0x7508>
   18c04:	cmp	r0, #0
   18c08:	bne	18ba4 <__assert_fail@plt+0x7640>
   18c0c:	mov	r1, r8
   18c10:	mov	r0, r6
   18c14:	bl	18908 <__assert_fail@plt+0x73a4>
   18c18:	cmp	r0, #0
   18c1c:	bne	18ba4 <__assert_fail@plt+0x7640>
   18c20:	ldr	r3, [r4, #24]
   18c24:	add	fp, r3, fp
   18c28:	ldr	r3, [fp, #4]
   18c2c:	cmp	r3, #0
   18c30:	bne	18bd4 <__assert_fail@plt+0x7670>
   18c34:	ldr	r0, [sp, #36]	; 0x24
   18c38:	bl	1370c <__assert_fail@plt+0x21a8>
   18c3c:	b	18bd0 <__assert_fail@plt+0x766c>
   18c40:	ldm	r1, {r0, r1, r2}
   18c44:	stm	r8, {r0, r1, r2}
   18c48:	b	18c0c <__assert_fail@plt+0x76a8>
   18c4c:	andeq	pc, r3, r0, lsl #30
   18c50:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18c54:	cmp	r1, #0
   18c58:	push	{r4, r5, r6, lr}
   18c5c:	mov	r4, r0
   18c60:	bge	18c6c <__assert_fail@plt+0x7708>
   18c64:	ldr	r0, [r4, #60]	; 0x3c
   18c68:	pop	{r4, r5, r6, pc}
   18c6c:	ldr	r3, [r0, #48]	; 0x30
   18c70:	cmp	r1, r3
   18c74:	bne	18c88 <__assert_fail@plt+0x7724>
   18c78:	tst	r2, #2
   18c7c:	movne	r0, #8
   18c80:	moveq	r0, #10
   18c84:	pop	{r4, r5, r6, pc}
   18c88:	ldr	r3, [r0, #80]	; 0x50
   18c8c:	cmp	r3, #1
   18c90:	ldrgt	r3, [r0, #8]
   18c94:	bgt	18cc8 <__assert_fail@plt+0x7764>
   18c98:	ldr	r3, [r0, #4]
   18c9c:	ldr	r0, [r0, #68]	; 0x44
   18ca0:	ldrb	r5, [r3, r1]
   18ca4:	mov	r1, r5
   18ca8:	bl	14f34 <__assert_fail@plt+0x39d0>
   18cac:	cmp	r0, #0
   18cb0:	bne	18d2c <__assert_fail@plt+0x77c8>
   18cb4:	cmp	r5, #10
   18cb8:	popne	{r4, r5, r6, pc}
   18cbc:	b	18d10 <__assert_fail@plt+0x77ac>
   18cc0:	subs	r1, r1, #1
   18cc4:	bcc	18c64 <__assert_fail@plt+0x7700>
   18cc8:	ldr	r5, [r3, r1, lsl #2]
   18ccc:	cmn	r5, #1
   18cd0:	beq	18cc0 <__assert_fail@plt+0x775c>
   18cd4:	ldrb	r3, [r4, #78]	; 0x4e
   18cd8:	cmp	r3, #0
   18cdc:	beq	18d08 <__assert_fail@plt+0x77a4>
   18ce0:	mov	r0, r5
   18ce4:	bl	11420 <iswalnum@plt>
   18ce8:	sub	r3, r5, #95	; 0x5f
   18cec:	clz	r3, r3
   18cf0:	lsr	r3, r3, #5
   18cf4:	cmp	r0, #0
   18cf8:	moveq	r0, r3
   18cfc:	orrne	r0, r3, #1
   18d00:	cmp	r0, #0
   18d04:	bne	18d2c <__assert_fail@plt+0x77c8>
   18d08:	cmp	r5, #10
   18d0c:	bne	18d24 <__assert_fail@plt+0x77c0>
   18d10:	ldrb	r0, [r4, #77]	; 0x4d
   18d14:	cmp	r0, #0
   18d18:	movne	r0, #2
   18d1c:	moveq	r0, #0
   18d20:	pop	{r4, r5, r6, pc}
   18d24:	mov	r0, #0
   18d28:	pop	{r4, r5, r6, pc}
   18d2c:	mov	r0, #1
   18d30:	pop	{r4, r5, r6, pc}
   18d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d38:	mov	r4, r0
   18d3c:	ldr	r5, [r0, #24]
   18d40:	sub	sp, sp, #28
   18d44:	cmp	r5, r1
   18d48:	mov	r6, r1
   18d4c:	mov	sl, r2
   18d50:	suble	r5, r1, r5
   18d54:	ble	18db4 <__assert_fail@plt+0x7850>
   18d58:	ldr	r3, [r0, #80]	; 0x50
   18d5c:	mov	r5, r1
   18d60:	cmp	r3, #1
   18d64:	ldr	r3, [r0, #44]	; 0x2c
   18d68:	movgt	r2, #0
   18d6c:	str	r3, [r0, #48]	; 0x30
   18d70:	ldr	r3, [r0, #52]	; 0x34
   18d74:	strgt	r2, [r0, #16]
   18d78:	strgt	r2, [r0, #20]
   18d7c:	str	r3, [r0, #56]	; 0x38
   18d80:	tst	sl, #1
   18d84:	mov	r3, #0
   18d88:	str	r3, [r0, #28]
   18d8c:	str	r3, [r0, #24]
   18d90:	str	r3, [r0, #32]
   18d94:	strb	r3, [r0, #76]	; 0x4c
   18d98:	moveq	r3, #6
   18d9c:	movne	r3, #4
   18da0:	str	r3, [r0, #60]	; 0x3c
   18da4:	ldrb	r3, [r0, #75]	; 0x4b
   18da8:	cmp	r3, #0
   18dac:	ldreq	r3, [r0]
   18db0:	streq	r3, [r0, #4]
   18db4:	cmp	r5, #0
   18db8:	beq	18eb4 <__assert_fail@plt+0x7950>
   18dbc:	ldr	r3, [r4, #32]
   18dc0:	ldr	r8, [r4, #28]
   18dc4:	cmp	r5, r3
   18dc8:	ldrb	r3, [r4, #76]	; 0x4c
   18dcc:	bge	1905c <__assert_fail@plt+0x7af8>
   18dd0:	cmp	r3, #0
   18dd4:	beq	18fec <__assert_fail@plt+0x7a88>
   18dd8:	ldr	r9, [r4, #12]
   18ddc:	mov	r3, r8
   18de0:	mov	r2, #0
   18de4:	add	r7, r2, r3
   18de8:	add	r7, r7, r7, lsr #31
   18dec:	asr	r7, r7, #1
   18df0:	ldr	r1, [r9, r7, lsl #2]
   18df4:	cmp	r5, r1
   18df8:	blt	18f00 <__assert_fail@plt+0x799c>
   18dfc:	ble	18e14 <__assert_fail@plt+0x78b0>
   18e00:	add	r2, r7, #1
   18e04:	cmp	r2, r3
   18e08:	blt	18de4 <__assert_fail@plt+0x7880>
   18e0c:	cmp	r5, r1
   18e10:	addgt	r7, r7, #1
   18e14:	mov	r2, sl
   18e18:	sub	r1, r7, #1
   18e1c:	mov	r0, r4
   18e20:	bl	18c54 <__assert_fail@plt+0x76f0>
   18e24:	cmp	r5, r8
   18e28:	movge	r3, #0
   18e2c:	movlt	r3, #1
   18e30:	cmp	r5, r7
   18e34:	movne	r3, #0
   18e38:	cmp	r3, #0
   18e3c:	str	r0, [r4, #60]	; 0x3c
   18e40:	beq	18f24 <__assert_fail@plt+0x79c0>
   18e44:	ldr	r3, [r9, r7, lsl #2]
   18e48:	cmp	r5, r3
   18e4c:	bne	18f24 <__assert_fail@plt+0x79c0>
   18e50:	ldr	r0, [r4, #8]
   18e54:	sub	r2, r8, r5
   18e58:	add	r1, r0, r5, lsl #2
   18e5c:	lsl	r2, r2, #2
   18e60:	bl	11234 <memmove@plt>
   18e64:	ldr	r0, [r4, #4]
   18e68:	ldr	r2, [r4, #28]
   18e6c:	add	r1, r0, r5
   18e70:	sub	r2, r2, r5
   18e74:	bl	11234 <memmove@plt>
   18e78:	ldr	r3, [r4, #28]
   18e7c:	sub	r3, r3, r5
   18e80:	str	r3, [r4, #28]
   18e84:	ldr	r3, [r4, #32]
   18e88:	sub	r3, r3, r5
   18e8c:	str	r3, [r4, #32]
   18e90:	mov	r3, #0
   18e94:	ldr	r2, [r4, #28]
   18e98:	cmp	r3, r2
   18e9c:	blt	18f08 <__assert_fail@plt+0x79a4>
   18ea0:	ldrb	r3, [r4, #75]	; 0x4b
   18ea4:	cmp	r3, #0
   18ea8:	ldreq	r3, [r4, #4]
   18eac:	addeq	r3, r3, r5
   18eb0:	streq	r3, [r4, #4]
   18eb4:	ldr	r2, [r4, #56]	; 0x38
   18eb8:	ldr	r3, [r4, #48]	; 0x30
   18ebc:	str	r6, [r4, #24]
   18ec0:	sub	r3, r3, r5
   18ec4:	sub	r5, r2, r5
   18ec8:	ldr	r2, [r4, #80]	; 0x50
   18ecc:	str	r3, [r4, #48]	; 0x30
   18ed0:	cmp	r2, #1
   18ed4:	str	r5, [r4, #56]	; 0x38
   18ed8:	ble	19334 <__assert_fail@plt+0x7dd0>
   18edc:	ldrb	r3, [r4, #72]	; 0x48
   18ee0:	mov	r0, r4
   18ee4:	cmp	r3, #0
   18ee8:	beq	19324 <__assert_fail@plt+0x7dc0>
   18eec:	bl	15d58 <__assert_fail@plt+0x47f4>
   18ef0:	cmp	r0, #0
   18ef4:	beq	19328 <__assert_fail@plt+0x7dc4>
   18ef8:	add	sp, sp, #28
   18efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f00:	mov	r3, r7
   18f04:	b	18e04 <__assert_fail@plt+0x78a0>
   18f08:	ldr	r1, [r4, #12]
   18f0c:	add	r2, r5, r3
   18f10:	ldr	r2, [r1, r2, lsl #2]
   18f14:	sub	r2, r2, r5
   18f18:	str	r2, [r1, r3, lsl #2]
   18f1c:	add	r3, r3, #1
   18f20:	b	18e94 <__assert_fail@plt+0x7930>
   18f24:	ldr	r3, [r4, #44]	; 0x2c
   18f28:	sub	r3, r3, r6
   18f2c:	add	r3, r3, r5
   18f30:	str	r3, [r4, #48]	; 0x30
   18f34:	ldr	r3, [r4, #52]	; 0x34
   18f38:	sub	r3, r3, r6
   18f3c:	add	r3, r3, r5
   18f40:	str	r3, [r4, #56]	; 0x38
   18f44:	mov	r3, #0
   18f48:	strb	r3, [r4, #76]	; 0x4c
   18f4c:	add	r3, r9, r7, lsl #2
   18f50:	cmp	r7, #0
   18f54:	ble	18f64 <__assert_fail@plt+0x7a00>
   18f58:	ldr	r2, [r3, #-4]!
   18f5c:	cmp	r5, r2
   18f60:	beq	18fa0 <__assert_fail@plt+0x7a3c>
   18f64:	lsl	r3, r7, #2
   18f68:	cmp	r7, r8
   18f6c:	blt	18fa8 <__assert_fail@plt+0x7a44>
   18f70:	moveq	r3, #0
   18f74:	streq	r3, [r4, #28]
   18f78:	beq	18f98 <__assert_fail@plt+0x7a34>
   18f7c:	ldr	r3, [r9, r7, lsl #2]
   18f80:	sub	r3, r3, r5
   18f84:	cmp	r3, #0
   18f88:	str	r3, [r4, #28]
   18f8c:	mvnne	r1, #0
   18f90:	movne	r3, #0
   18f94:	bne	18fd0 <__assert_fail@plt+0x7a6c>
   18f98:	ldr	r3, [r4, #28]
   18f9c:	b	19054 <__assert_fail@plt+0x7af0>
   18fa0:	sub	r7, r7, #1
   18fa4:	b	18f50 <__assert_fail@plt+0x79ec>
   18fa8:	ldr	r2, [r4, #8]
   18fac:	ldr	r2, [r2, r3]
   18fb0:	add	r3, r3, #4
   18fb4:	cmn	r2, #1
   18fb8:	bne	18f7c <__assert_fail@plt+0x7a18>
   18fbc:	add	r7, r7, #1
   18fc0:	b	18f68 <__assert_fail@plt+0x7a04>
   18fc4:	ldr	r2, [r4, #8]
   18fc8:	str	r1, [r2, r3, lsl #2]
   18fcc:	add	r3, r3, #1
   18fd0:	ldr	r2, [r4, #28]
   18fd4:	cmp	r3, r2
   18fd8:	blt	18fc4 <__assert_fail@plt+0x7a60>
   18fdc:	mov	r1, #255	; 0xff
   18fe0:	ldr	r0, [r4, #4]
   18fe4:	bl	11444 <memset@plt>
   18fe8:	b	18f98 <__assert_fail@plt+0x7a34>
   18fec:	mov	r2, sl
   18ff0:	sub	r1, r5, #1
   18ff4:	mov	r0, r4
   18ff8:	bl	18c54 <__assert_fail@plt+0x76f0>
   18ffc:	ldr	r3, [r4, #80]	; 0x50
   19000:	cmp	r3, #1
   19004:	str	r0, [r4, #60]	; 0x3c
   19008:	ble	19020 <__assert_fail@plt+0x7abc>
   1900c:	ldr	r0, [r4, #8]
   19010:	sub	r2, r8, r5
   19014:	add	r1, r0, r5, lsl #2
   19018:	lsl	r2, r2, #2
   1901c:	bl	11234 <memmove@plt>
   19020:	ldrb	r3, [r4, #75]	; 0x4b
   19024:	cmp	r3, #0
   19028:	beq	19040 <__assert_fail@plt+0x7adc>
   1902c:	ldr	r0, [r4, #4]
   19030:	ldr	r2, [r4, #28]
   19034:	add	r1, r0, r5
   19038:	sub	r2, r2, r5
   1903c:	bl	11234 <memmove@plt>
   19040:	ldr	r3, [r4, #28]
   19044:	sub	r3, r3, r5
   19048:	str	r3, [r4, #28]
   1904c:	ldr	r3, [r4, #32]
   19050:	sub	r3, r3, r5
   19054:	str	r3, [r4, #32]
   19058:	b	18ea0 <__assert_fail@plt+0x793c>
   1905c:	cmp	r3, #0
   19060:	beq	1908c <__assert_fail@plt+0x7b28>
   19064:	ldr	r3, [r4, #44]	; 0x2c
   19068:	sub	r3, r3, r6
   1906c:	add	r3, r3, r5
   19070:	str	r3, [r4, #48]	; 0x30
   19074:	ldr	r3, [r4, #52]	; 0x34
   19078:	sub	r3, r3, r6
   1907c:	add	r3, r3, r5
   19080:	str	r3, [r4, #56]	; 0x38
   19084:	mov	r3, #0
   19088:	strb	r3, [r4, #76]	; 0x4c
   1908c:	ldr	r3, [r4, #80]	; 0x50
   19090:	mov	r2, #0
   19094:	cmp	r3, #1
   19098:	str	r2, [r4, #28]
   1909c:	ldr	r7, [r4, #24]
   190a0:	ble	192cc <__assert_fail@plt+0x7d68>
   190a4:	ldrb	r2, [r4, #73]	; 0x49
   190a8:	cmp	r2, #0
   190ac:	beq	19178 <__assert_fail@plt+0x7c14>
   190b0:	ldr	r2, [r4]
   190b4:	sub	r3, r5, r3
   190b8:	add	r7, r2, r7
   190bc:	add	r3, r7, r3
   190c0:	cmp	r2, r3
   190c4:	sub	r9, r5, #1
   190c8:	movcs	r3, r2
   190cc:	add	r9, r7, r9
   190d0:	cmp	r9, r3
   190d4:	mov	r1, r9
   190d8:	bcc	19178 <__assert_fail@plt+0x7c14>
   190dc:	ldrb	r2, [r9]
   190e0:	sub	r0, r9, #1
   190e4:	and	r2, r2, #192	; 0xc0
   190e8:	cmp	r2, #128	; 0x80
   190ec:	beq	191f4 <__assert_fail@plt+0x7c90>
   190f0:	ldr	r2, [r4, #48]	; 0x30
   190f4:	ldr	r0, [r4, #64]	; 0x40
   190f8:	add	r2, r7, r2
   190fc:	cmp	r0, #0
   19100:	sub	r2, r2, r9
   19104:	beq	19120 <__assert_fail@plt+0x7bbc>
   19108:	cmp	r2, #6
   1910c:	movlt	r3, r2
   19110:	movge	r3, #6
   19114:	add	r1, sp, #8
   19118:	subs	r3, r3, #1
   1911c:	bpl	191e4 <__assert_fail@plt+0x7c80>
   19120:	add	r3, sp, #16
   19124:	mov	fp, #0
   19128:	add	r0, sp, #4
   1912c:	str	fp, [sp, #16]
   19130:	str	fp, [sp, #20]
   19134:	bl	217d8 <__assert_fail@plt+0x10274>
   19138:	add	r7, r7, r5
   1913c:	sub	r9, r7, r9
   19140:	cmp	r0, r9
   19144:	movcc	r3, #0
   19148:	movcs	r3, #1
   1914c:	cmn	r0, #3
   19150:	movhi	r3, #0
   19154:	cmp	r3, fp
   19158:	beq	19178 <__assert_fail@plt+0x7c14>
   1915c:	str	fp, [r4, #16]
   19160:	str	fp, [r4, #20]
   19164:	ldr	fp, [sp, #4]
   19168:	sub	r0, r0, r9
   1916c:	cmn	fp, #1
   19170:	str	r0, [r4, #28]
   19174:	bne	19268 <__assert_fail@plt+0x7d04>
   19178:	ldr	r7, [r4, #24]
   1917c:	ldr	r3, [r4, #32]
   19180:	mvn	fp, #0
   19184:	add	r7, r7, r3
   19188:	cmp	r6, r7
   1918c:	bgt	191fc <__assert_fail@plt+0x7c98>
   19190:	sub	r7, r7, r6
   19194:	cmn	fp, #1
   19198:	str	r7, [r4, #28]
   1919c:	bne	19268 <__assert_fail@plt+0x7d04>
   191a0:	mov	r2, sl
   191a4:	sub	r1, r8, #1
   191a8:	mov	r0, r4
   191ac:	bl	18c54 <__assert_fail@plt+0x76f0>
   191b0:	str	r0, [r4, #60]	; 0x3c
   191b4:	ldr	r3, [r4, #28]
   191b8:	cmp	r3, #0
   191bc:	movne	r3, #0
   191c0:	mvnne	r1, #0
   191c4:	beq	18f98 <__assert_fail@plt+0x7a34>
   191c8:	ldr	r2, [r4, #28]
   191cc:	cmp	r3, r2
   191d0:	blt	192bc <__assert_fail@plt+0x7d58>
   191d4:	ldrb	r3, [r4, #75]	; 0x4b
   191d8:	cmp	r3, #0
   191dc:	beq	18f98 <__assert_fail@plt+0x7a34>
   191e0:	b	18fdc <__assert_fail@plt+0x7a78>
   191e4:	ldrb	ip, [r9, r3]
   191e8:	ldrb	ip, [r0, ip]
   191ec:	strb	ip, [r1, r3]
   191f0:	b	19118 <__assert_fail@plt+0x7bb4>
   191f4:	mov	r9, r0
   191f8:	b	190d0 <__assert_fail@plt+0x7b6c>
   191fc:	add	r9, r4, #16
   19200:	add	r3, sp, #16
   19204:	ldm	r9, {r0, r1}
   19208:	ldr	fp, [r4, #44]	; 0x2c
   1920c:	stm	r3, {r0, r1}
   19210:	ldr	r1, [r4]
   19214:	sub	fp, fp, r7
   19218:	mov	r3, r9
   1921c:	mov	r2, fp
   19220:	add	r1, r1, r7
   19224:	add	r0, sp, #8
   19228:	bl	217d8 <__assert_fail@plt+0x10274>
   1922c:	sub	r3, r0, #1
   19230:	cmn	r3, #4
   19234:	ldrls	fp, [sp, #8]
   19238:	bls	19260 <__assert_fail@plt+0x7cfc>
   1923c:	cmp	fp, #0
   19240:	cmpne	r0, #0
   19244:	moveq	fp, #0
   19248:	ldrne	r3, [r4]
   1924c:	ldrbne	fp, [r3, r7]
   19250:	add	r3, sp, #16
   19254:	ldm	r3, {r0, r1}
   19258:	stm	r9, {r0, r1}
   1925c:	mov	r0, #1
   19260:	add	r7, r7, r0
   19264:	b	19188 <__assert_fail@plt+0x7c24>
   19268:	ldrb	r3, [r4, #78]	; 0x4e
   1926c:	cmp	r3, #0
   19270:	beq	19298 <__assert_fail@plt+0x7d34>
   19274:	mov	r0, fp
   19278:	bl	11420 <iswalnum@plt>
   1927c:	cmp	fp, #95	; 0x5f
   19280:	clz	r0, r0
   19284:	lsr	r0, r0, #5
   19288:	moveq	r0, #0
   1928c:	cmp	r0, #0
   19290:	moveq	r3, #1
   19294:	beq	192b4 <__assert_fail@plt+0x7d50>
   19298:	cmp	fp, #10
   1929c:	movne	r3, #0
   192a0:	bne	192b4 <__assert_fail@plt+0x7d50>
   192a4:	ldrb	r3, [r4, #77]	; 0x4d
   192a8:	cmp	r3, #0
   192ac:	movne	r3, #2
   192b0:	moveq	r3, #0
   192b4:	str	r3, [r4, #60]	; 0x3c
   192b8:	b	191b4 <__assert_fail@plt+0x7c50>
   192bc:	ldr	r2, [r4, #8]
   192c0:	str	r1, [r2, r3, lsl #2]
   192c4:	add	r3, r3, #1
   192c8:	b	191c8 <__assert_fail@plt+0x7c64>
   192cc:	ldr	r3, [r4]
   192d0:	ldr	r0, [r4, #68]	; 0x44
   192d4:	add	r3, r3, r5
   192d8:	add	r7, r3, r7
   192dc:	ldr	r3, [r4, #64]	; 0x40
   192e0:	ldrb	r7, [r7, #-1]
   192e4:	cmp	r3, #0
   192e8:	str	r2, [r4, #32]
   192ec:	ldrbne	r7, [r3, r7]
   192f0:	mov	r1, r7
   192f4:	bl	14f34 <__assert_fail@plt+0x39d0>
   192f8:	cmp	r0, #0
   192fc:	movne	r0, #1
   19300:	bne	1931c <__assert_fail@plt+0x7db8>
   19304:	cmp	r7, #10
   19308:	bne	1931c <__assert_fail@plt+0x7db8>
   1930c:	ldrb	r0, [r4, #77]	; 0x4d
   19310:	cmp	r0, #0
   19314:	movne	r0, #2
   19318:	moveq	r0, #0
   1931c:	str	r0, [r4, #60]	; 0x3c
   19320:	b	18ea0 <__assert_fail@plt+0x793c>
   19324:	bl	15c04 <__assert_fail@plt+0x46a0>
   19328:	mov	r0, #0
   1932c:	str	r0, [r4, #40]	; 0x28
   19330:	b	18ef8 <__assert_fail@plt+0x7994>
   19334:	ldrb	r2, [r4, #75]	; 0x4b
   19338:	cmp	r2, #0
   1933c:	streq	r3, [r4, #28]
   19340:	beq	19328 <__assert_fail@plt+0x7dc4>
   19344:	ldrb	r3, [r4, #72]	; 0x48
   19348:	cmp	r3, #0
   1934c:	beq	1935c <__assert_fail@plt+0x7df8>
   19350:	mov	r0, r4
   19354:	bl	16228 <__assert_fail@plt+0x4cc4>
   19358:	b	19328 <__assert_fail@plt+0x7dc4>
   1935c:	ldr	r3, [r4, #64]	; 0x40
   19360:	cmp	r3, #0
   19364:	beq	19328 <__assert_fail@plt+0x7dc4>
   19368:	mov	r0, r4
   1936c:	bl	15048 <__assert_fail@plt+0x3ae4>
   19370:	b	19328 <__assert_fail@plt+0x7dc4>
   19374:	ldr	r3, [r0, #4]
   19378:	push	{r4, r5, r6, lr}
   1937c:	mov	r5, r1
   19380:	ldrb	r1, [r3, r2]
   19384:	ldrb	r3, [r5, #4]
   19388:	mov	r4, r0
   1938c:	mov	r6, r2
   19390:	sub	r3, r3, #1
   19394:	cmp	r3, #6
   19398:	ldrls	pc, [pc, r3, lsl #2]
   1939c:	b	19488 <__assert_fail@plt+0x7f24>
   193a0:			; <UNDEFINED> instruction: 0x000193bc
   193a4:	andeq	r9, r1, r8, lsl #9
   193a8:	andeq	r9, r1, r8, lsr r4
   193ac:	andeq	r9, r1, r8, lsl #9
   193b0:	andeq	r9, r1, r4, asr r4
   193b4:	andeq	r9, r1, r8, lsl #9
   193b8:	andeq	r9, r1, ip, asr #8
   193bc:	ldrb	r3, [r5]
   193c0:	cmp	r3, r1
   193c4:	bne	19488 <__assert_fail@plt+0x7f24>
   193c8:	ldr	r5, [r5, #4]
   193cc:	ldr	r2, [pc, #196]	; 19498 <__assert_fail@plt+0x7f34>
   193d0:	and	r2, r2, r5
   193d4:	cmp	r2, #0
   193d8:	beq	19490 <__assert_fail@plt+0x7f2c>
   193dc:	ldr	r2, [r4, #88]	; 0x58
   193e0:	mov	r1, r6
   193e4:	mov	r0, r4
   193e8:	bl	18c54 <__assert_fail@plt+0x76f0>
   193ec:	ldr	r3, [pc, #168]	; 1949c <__assert_fail@plt+0x7f38>
   193f0:	and	r3, r3, r5, lsr #8
   193f4:	tst	r3, #4
   193f8:	beq	19404 <__assert_fail@plt+0x7ea0>
   193fc:	ands	r1, r0, #1
   19400:	beq	19488 <__assert_fail@plt+0x7f24>
   19404:	tst	r3, #8
   19408:	beq	19414 <__assert_fail@plt+0x7eb0>
   1940c:	tst	r0, #1
   19410:	bne	19488 <__assert_fail@plt+0x7f24>
   19414:	tst	r3, #32
   19418:	beq	19424 <__assert_fail@plt+0x7ec0>
   1941c:	ands	r1, r0, #2
   19420:	beq	19488 <__assert_fail@plt+0x7f24>
   19424:	tst	r3, #128	; 0x80
   19428:	beq	19490 <__assert_fail@plt+0x7f2c>
   1942c:	lsr	r0, r0, #3
   19430:	and	r0, r0, #1
   19434:	pop	{r4, r5, r6, pc}
   19438:	ldr	r0, [r5]
   1943c:	bl	14f34 <__assert_fail@plt+0x39d0>
   19440:	cmp	r0, #0
   19444:	bne	193c8 <__assert_fail@plt+0x7e64>
   19448:	pop	{r4, r5, r6, pc}
   1944c:	tst	r1, #128	; 0x80
   19450:	bne	19488 <__assert_fail@plt+0x7f24>
   19454:	cmp	r1, #10
   19458:	bne	19470 <__assert_fail@plt+0x7f0c>
   1945c:	ldr	r3, [r4, #84]	; 0x54
   19460:	ldr	r0, [r3, #128]	; 0x80
   19464:	ands	r0, r0, #64	; 0x40
   19468:	bne	193c8 <__assert_fail@plt+0x7e64>
   1946c:	pop	{r4, r5, r6, pc}
   19470:	cmp	r1, #0
   19474:	bne	193c8 <__assert_fail@plt+0x7e64>
   19478:	ldr	r3, [r4, #84]	; 0x54
   1947c:	ldr	r3, [r3, #128]	; 0x80
   19480:	tst	r3, #128	; 0x80
   19484:	beq	193c8 <__assert_fail@plt+0x7e64>
   19488:	mov	r0, #0
   1948c:	pop	{r4, r5, r6, pc}
   19490:	mov	r0, #1
   19494:	pop	{r4, r5, r6, pc}
   19498:	andeq	pc, r3, r0, lsl #30
   1949c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   194a0:	push	{r4, r5, r6, r7, r8, lr}
   194a4:	mov	r5, r1
   194a8:	mov	r1, r2
   194ac:	ldr	r2, [r0, #88]	; 0x58
   194b0:	mov	r4, r0
   194b4:	bl	18c54 <__assert_fail@plt+0x76f0>
   194b8:	ldr	r6, [pc, #152]	; 19558 <__assert_fail@plt+0x7ff4>
   194bc:	ldr	lr, [r5, #8]
   194c0:	mov	ip, #0
   194c4:	and	r7, r0, #8
   194c8:	and	r8, r0, #2
   194cc:	and	r1, r0, #1
   194d0:	cmp	ip, lr
   194d4:	blt	194e0 <__assert_fail@plt+0x7f7c>
   194d8:	mov	r0, #0
   194dc:	pop	{r4, r5, r6, r7, r8, pc}
   194e0:	ldr	r3, [r5, #12]
   194e4:	ldr	r0, [r3, ip, lsl #2]
   194e8:	ldr	r3, [r4, #84]	; 0x54
   194ec:	ldr	r2, [r3]
   194f0:	add	r2, r2, r0, lsl #3
   194f4:	ldr	r3, [r2, #4]
   194f8:	ldrb	r2, [r2, #4]
   194fc:	and	r3, r6, r3, lsr #8
   19500:	cmp	r2, #2
   19504:	bne	19550 <__assert_fail@plt+0x7fec>
   19508:	cmp	r3, #0
   1950c:	popeq	{r4, r5, r6, r7, r8, pc}
   19510:	tst	r3, #4
   19514:	beq	19520 <__assert_fail@plt+0x7fbc>
   19518:	cmp	r1, #0
   1951c:	beq	19550 <__assert_fail@plt+0x7fec>
   19520:	tst	r3, #8
   19524:	beq	19530 <__assert_fail@plt+0x7fcc>
   19528:	cmp	r1, #0
   1952c:	bne	19550 <__assert_fail@plt+0x7fec>
   19530:	tst	r3, #32
   19534:	beq	19540 <__assert_fail@plt+0x7fdc>
   19538:	cmp	r8, #0
   1953c:	beq	19550 <__assert_fail@plt+0x7fec>
   19540:	tst	r3, #128	; 0x80
   19544:	popeq	{r4, r5, r6, r7, r8, pc}
   19548:	cmp	r7, #0
   1954c:	popne	{r4, r5, r6, r7, r8, pc}
   19550:	add	ip, ip, #1
   19554:	b	194d0 <__assert_fail@plt+0x7f6c>
   19558:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1955c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19560:	ldr	r3, [r1, #56]	; 0x38
   19564:	ldr	r6, [r1, #40]	; 0x28
   19568:	cmp	r3, r6
   1956c:	movle	r3, #2
   19570:	strble	r3, [r0, #4]
   19574:	movle	r0, #0
   19578:	ble	195dc <__assert_fail@plt+0x8078>
   1957c:	ldr	r9, [r1, #4]
   19580:	ldrb	r3, [r0, #6]
   19584:	mov	r5, r2
   19588:	ldrb	r8, [r9, r6]
   1958c:	and	r3, r3, #159	; 0x9f
   19590:	strb	r3, [r0, #6]
   19594:	strb	r8, [r0]
   19598:	ldr	r2, [r1, #80]	; 0x50
   1959c:	mov	r7, r1
   195a0:	cmp	r2, #1
   195a4:	mov	r4, r0
   195a8:	ble	19b3c <__assert_fail@plt+0x85d8>
   195ac:	ldr	r3, [r1, #28]
   195b0:	cmp	r6, r3
   195b4:	beq	19b0c <__assert_fail@plt+0x85a8>
   195b8:	ldr	r3, [r1, #8]
   195bc:	ldr	r3, [r3, r6, lsl #2]
   195c0:	cmn	r3, #1
   195c4:	bne	19b0c <__assert_fail@plt+0x85a8>
   195c8:	ldrb	r3, [r4, #6]
   195cc:	mov	r0, #1
   195d0:	strb	r0, [r4, #4]
   195d4:	orr	r3, r3, #32
   195d8:	strb	r3, [r4, #6]
   195dc:	add	sp, sp, #8
   195e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195e4:	cmp	r2, #1
   195e8:	ble	19620 <__assert_fail@plt+0x80bc>
   195ec:	ldr	r3, [r7, #8]
   195f0:	lsl	r0, r1, #2
   195f4:	ldr	ip, [r3, r1, lsl #2]
   195f8:	cmn	ip, #1
   195fc:	beq	19b34 <__assert_fail@plt+0x85d0>
   19600:	ldr	ip, [r7, #28]
   19604:	add	r6, r6, #2
   19608:	cmp	ip, r6
   1960c:	beq	19620 <__assert_fail@plt+0x80bc>
   19610:	add	r3, r3, r0
   19614:	ldr	r3, [r3, #4]
   19618:	cmn	r3, #1
   1961c:	beq	19b34 <__assert_fail@plt+0x85d0>
   19620:	ldrb	r0, [r7, #76]	; 0x4c
   19624:	ldr	lr, [r7, #24]
   19628:	cmp	r0, #0
   1962c:	moveq	ip, r1
   19630:	ldrne	r3, [r7, #12]
   19634:	ldrne	ip, [r3, r1, lsl #2]
   19638:	ldr	r3, [r7]
   1963c:	cmp	r0, #0
   19640:	add	r3, r3, ip
   19644:	ldrb	r6, [r3, lr]
   19648:	beq	19654 <__assert_fail@plt+0x80f0>
   1964c:	tst	r6, #128	; 0x80
   19650:	bne	19b34 <__assert_fail@plt+0x85d0>
   19654:	mov	r3, #1
   19658:	cmp	r2, r3
   1965c:	strb	r6, [r4]
   19660:	strb	r3, [r4, #4]
   19664:	ldrb	r8, [r4, #6]
   19668:	ble	196d0 <__assert_fail@plt+0x816c>
   1966c:	mov	r0, r7
   19670:	bl	1502c <__assert_fail@plt+0x3ac8>
   19674:	bic	r8, r8, #64	; 0x40
   19678:	mov	r7, r0
   1967c:	bl	11420 <iswalnum@plt>
   19680:	adds	r0, r0, #0
   19684:	movne	r0, #1
   19688:	cmp	r7, #95	; 0x5f
   1968c:	orreq	r0, r0, #1
   19690:	orr	r8, r8, r0, lsl #6
   19694:	strb	r8, [r4, #6]
   19698:	cmp	r6, #66	; 0x42
   1969c:	beq	19844 <__assert_fail@plt+0x82e0>
   196a0:	bhi	19760 <__assert_fail@plt+0x81fc>
   196a4:	cmp	r6, #57	; 0x39
   196a8:	bhi	1972c <__assert_fail@plt+0x81c8>
   196ac:	cmp	r6, #49	; 0x31
   196b0:	bcs	19814 <__assert_fail@plt+0x82b0>
   196b4:	cmp	r6, #40	; 0x28
   196b8:	beq	198ac <__assert_fail@plt+0x8348>
   196bc:	bhi	19700 <__assert_fail@plt+0x819c>
   196c0:	cmp	r6, #39	; 0x27
   196c4:	beq	19894 <__assert_fail@plt+0x8330>
   196c8:	mov	r0, #2
   196cc:	b	195dc <__assert_fail@plt+0x8078>
   196d0:	bl	113e4 <__ctype_b_loc@plt>
   196d4:	lsl	r3, r6, #1
   196d8:	bic	r8, r8, #64	; 0x40
   196dc:	ldr	r2, [r0]
   196e0:	ldrh	r3, [r2, r3]
   196e4:	lsr	r3, r3, #3
   196e8:	and	r3, r3, #1
   196ec:	cmp	r6, #95	; 0x5f
   196f0:	orreq	r3, r3, #1
   196f4:	orr	r3, r8, r3, lsl #6
   196f8:	strb	r3, [r4, #6]
   196fc:	b	19698 <__assert_fail@plt+0x8134>
   19700:	cmp	r6, #41	; 0x29
   19704:	beq	198bc <__assert_fail@plt+0x8358>
   19708:	cmp	r6, #43	; 0x2b
   1970c:	bne	196c8 <__assert_fail@plt+0x8164>
   19710:	ldr	r0, [pc, #1128]	; 19b80 <__assert_fail@plt+0x861c>
   19714:	and	r0, r0, r5
   19718:	cmp	r0, #2
   1971c:	moveq	r3, #18
   19720:	bne	196c8 <__assert_fail@plt+0x8164>
   19724:	strb	r3, [r4, #4]
   19728:	b	195dc <__assert_fail@plt+0x8078>
   1972c:	cmp	r6, #62	; 0x3e
   19730:	beq	1982c <__assert_fail@plt+0x82c8>
   19734:	cmp	r6, #63	; 0x3f
   19738:	beq	198cc <__assert_fail@plt+0x8368>
   1973c:	cmp	r6, #60	; 0x3c
   19740:	bne	196c8 <__assert_fail@plt+0x8164>
   19744:	tst	r5, #524288	; 0x80000
   19748:	moveq	r3, #12
   1974c:	strbeq	r3, [r4, #4]
   19750:	moveq	r3, #6
   19754:	bne	196c8 <__assert_fail@plt+0x8164>
   19758:	str	r3, [r4]
   1975c:	b	196c8 <__assert_fail@plt+0x8164>
   19760:	cmp	r6, #115	; 0x73
   19764:	beq	1986c <__assert_fail@plt+0x8308>
   19768:	bhi	197b8 <__assert_fail@plt+0x8254>
   1976c:	cmp	r6, #87	; 0x57
   19770:	beq	1985c <__assert_fail@plt+0x82f8>
   19774:	bhi	19790 <__assert_fail@plt+0x822c>
   19778:	cmp	r6, #83	; 0x53
   1977c:	bne	196c8 <__assert_fail@plt+0x8164>
   19780:	tst	r5, #524288	; 0x80000
   19784:	moveq	r3, #35	; 0x23
   19788:	beq	1980c <__assert_fail@plt+0x82a8>
   1978c:	b	196c8 <__assert_fail@plt+0x8164>
   19790:	cmp	r6, #96	; 0x60
   19794:	beq	1987c <__assert_fail@plt+0x8318>
   19798:	cmp	r6, #98	; 0x62
   1979c:	bne	196c8 <__assert_fail@plt+0x8164>
   197a0:	tst	r5, #524288	; 0x80000
   197a4:	moveq	r3, #12
   197a8:	strbeq	r3, [r4, #4]
   197ac:	moveq	r3, #256	; 0x100
   197b0:	beq	19758 <__assert_fail@plt+0x81f4>
   197b4:	b	196c8 <__assert_fail@plt+0x8164>
   197b8:	cmp	r6, #123	; 0x7b
   197bc:	beq	198e4 <__assert_fail@plt+0x8380>
   197c0:	bhi	197dc <__assert_fail@plt+0x8278>
   197c4:	cmp	r6, #119	; 0x77
   197c8:	bne	196c8 <__assert_fail@plt+0x8164>
   197cc:	tst	r5, #524288	; 0x80000
   197d0:	moveq	r3, #32
   197d4:	beq	1980c <__assert_fail@plt+0x82a8>
   197d8:	b	196c8 <__assert_fail@plt+0x8164>
   197dc:	cmp	r6, #124	; 0x7c
   197e0:	beq	19800 <__assert_fail@plt+0x829c>
   197e4:	cmp	r6, #125	; 0x7d
   197e8:	bne	196c8 <__assert_fail@plt+0x8164>
   197ec:	and	r5, r5, #4608	; 0x1200
   197f0:	cmp	r5, #512	; 0x200
   197f4:	bne	196c8 <__assert_fail@plt+0x8164>
   197f8:	mov	r3, #24
   197fc:	b	1980c <__assert_fail@plt+0x82a8>
   19800:	tst	r5, #33792	; 0x8400
   19804:	moveq	r3, #10
   19808:	bne	196c8 <__assert_fail@plt+0x8164>
   1980c:	strb	r3, [r4, #4]
   19810:	b	196c8 <__assert_fail@plt+0x8164>
   19814:	tst	r5, #16384	; 0x4000
   19818:	moveq	r3, #4
   1981c:	subeq	r6, r6, #49	; 0x31
   19820:	strbeq	r3, [r4, #4]
   19824:	streq	r6, [r4]
   19828:	b	196c8 <__assert_fail@plt+0x8164>
   1982c:	tst	r5, #524288	; 0x80000
   19830:	moveq	r3, #12
   19834:	strbeq	r3, [r4, #4]
   19838:	moveq	r3, #9
   1983c:	beq	19758 <__assert_fail@plt+0x81f4>
   19840:	b	196c8 <__assert_fail@plt+0x8164>
   19844:	tst	r5, #524288	; 0x80000
   19848:	moveq	r3, #12
   1984c:	strbeq	r3, [r4, #4]
   19850:	moveq	r3, #512	; 0x200
   19854:	beq	19758 <__assert_fail@plt+0x81f4>
   19858:	b	196c8 <__assert_fail@plt+0x8164>
   1985c:	tst	r5, #524288	; 0x80000
   19860:	moveq	r3, #33	; 0x21
   19864:	beq	1980c <__assert_fail@plt+0x82a8>
   19868:	b	196c8 <__assert_fail@plt+0x8164>
   1986c:	tst	r5, #524288	; 0x80000
   19870:	moveq	r3, #34	; 0x22
   19874:	beq	1980c <__assert_fail@plt+0x82a8>
   19878:	b	196c8 <__assert_fail@plt+0x8164>
   1987c:	tst	r5, #524288	; 0x80000
   19880:	moveq	r3, #12
   19884:	strbeq	r3, [r4, #4]
   19888:	moveq	r3, #64	; 0x40
   1988c:	beq	19758 <__assert_fail@plt+0x81f4>
   19890:	b	196c8 <__assert_fail@plt+0x8164>
   19894:	tst	r5, #524288	; 0x80000
   19898:	bne	196c8 <__assert_fail@plt+0x8164>
   1989c:	mov	r3, #12
   198a0:	strb	r3, [r4, #4]
   198a4:	mov	r3, #128	; 0x80
   198a8:	b	19758 <__assert_fail@plt+0x81f4>
   198ac:	tst	r5, #8192	; 0x2000
   198b0:	moveq	r3, #8
   198b4:	beq	1980c <__assert_fail@plt+0x82a8>
   198b8:	b	196c8 <__assert_fail@plt+0x8164>
   198bc:	tst	r5, #8192	; 0x2000
   198c0:	moveq	r3, #9
   198c4:	beq	1980c <__assert_fail@plt+0x82a8>
   198c8:	b	196c8 <__assert_fail@plt+0x8164>
   198cc:	ldr	r0, [pc, #684]	; 19b80 <__assert_fail@plt+0x861c>
   198d0:	and	r0, r0, r5
   198d4:	cmp	r0, #2
   198d8:	bne	196c8 <__assert_fail@plt+0x8164>
   198dc:	mov	r3, #19
   198e0:	b	19724 <__assert_fail@plt+0x81c0>
   198e4:	and	r5, r5, #4608	; 0x1200
   198e8:	cmp	r5, #512	; 0x200
   198ec:	moveq	r3, #23
   198f0:	bne	196c8 <__assert_fail@plt+0x8164>
   198f4:	b	1980c <__assert_fail@plt+0x82a8>
   198f8:	cmp	r8, #42	; 0x2a
   198fc:	beq	19998 <__assert_fail@plt+0x8434>
   19900:	bcc	199dc <__assert_fail@plt+0x8478>
   19904:	cmp	r8, #43	; 0x2b
   19908:	bne	19b04 <__assert_fail@plt+0x85a0>
   1990c:	ldr	r3, [pc, #620]	; 19b80 <__assert_fail@plt+0x861c>
   19910:	and	r3, r3, r5
   19914:	cmp	r3, #0
   19918:	moveq	r3, #18
   1991c:	beq	19944 <__assert_fail@plt+0x83e0>
   19920:	b	19b04 <__assert_fail@plt+0x85a0>
   19924:	cmp	r8, #94	; 0x5e
   19928:	beq	199f4 <__assert_fail@plt+0x8490>
   1992c:	bhi	1994c <__assert_fail@plt+0x83e8>
   19930:	cmp	r8, #63	; 0x3f
   19934:	beq	199a0 <__assert_fail@plt+0x843c>
   19938:	cmp	r8, #91	; 0x5b
   1993c:	moveq	r3, #20
   19940:	bne	19b04 <__assert_fail@plt+0x85a0>
   19944:	strb	r3, [r4, #4]
   19948:	b	19b04 <__assert_fail@plt+0x85a0>
   1994c:	cmp	r8, #124	; 0x7c
   19950:	beq	19988 <__assert_fail@plt+0x8424>
   19954:	cmp	r8, #125	; 0x7d
   19958:	beq	199b8 <__assert_fail@plt+0x8454>
   1995c:	cmp	r8, #123	; 0x7b
   19960:	bne	19b04 <__assert_fail@plt+0x85a0>
   19964:	and	r5, r5, #4608	; 0x1200
   19968:	cmp	r5, #4608	; 0x1200
   1996c:	moveq	r3, #23
   19970:	bne	19b04 <__assert_fail@plt+0x85a0>
   19974:	b	19944 <__assert_fail@plt+0x83e0>
   19978:	tst	r5, #2048	; 0x800
   1997c:	beq	19b04 <__assert_fail@plt+0x85a0>
   19980:	mov	r3, #10
   19984:	b	19944 <__assert_fail@plt+0x83e0>
   19988:	and	r5, r5, #33792	; 0x8400
   1998c:	cmp	r5, #32768	; 0x8000
   19990:	bne	19b04 <__assert_fail@plt+0x85a0>
   19994:	b	19980 <__assert_fail@plt+0x841c>
   19998:	mov	r3, #11
   1999c:	b	19944 <__assert_fail@plt+0x83e0>
   199a0:	ldr	r3, [pc, #472]	; 19b80 <__assert_fail@plt+0x861c>
   199a4:	and	r3, r3, r5
   199a8:	cmp	r3, #0
   199ac:	moveq	r3, #19
   199b0:	beq	19944 <__assert_fail@plt+0x83e0>
   199b4:	b	19b04 <__assert_fail@plt+0x85a0>
   199b8:	and	r5, r5, #4608	; 0x1200
   199bc:	cmp	r5, #4608	; 0x1200
   199c0:	moveq	r3, #24
   199c4:	bne	19b04 <__assert_fail@plt+0x85a0>
   199c8:	b	19944 <__assert_fail@plt+0x83e0>
   199cc:	tst	r5, #8192	; 0x2000
   199d0:	movne	r3, #8
   199d4:	bne	19944 <__assert_fail@plt+0x83e0>
   199d8:	b	19b04 <__assert_fail@plt+0x85a0>
   199dc:	tst	r5, #8192	; 0x2000
   199e0:	movne	r3, #9
   199e4:	bne	19944 <__assert_fail@plt+0x83e0>
   199e8:	b	19b04 <__assert_fail@plt+0x85a0>
   199ec:	mov	r3, #5
   199f0:	b	19944 <__assert_fail@plt+0x83e0>
   199f4:	ldr	r3, [pc, #392]	; 19b84 <__assert_fail@plt+0x8620>
   199f8:	cmp	r6, #0
   199fc:	and	r3, r3, r5
   19a00:	clz	r3, r3
   19a04:	lsr	r3, r3, #5
   19a08:	moveq	r3, #0
   19a0c:	cmp	r3, #0
   19a10:	beq	19a34 <__assert_fail@plt+0x84d0>
   19a14:	add	r6, r9, r6
   19a18:	lsr	r5, r5, #11
   19a1c:	ldrb	r2, [r6, #-1]
   19a20:	eor	r5, r5, #1
   19a24:	cmp	r2, #10
   19a28:	orrne	r5, r5, #1
   19a2c:	tst	r5, #1
   19a30:	bne	19b04 <__assert_fail@plt+0x85a0>
   19a34:	mov	r3, #12
   19a38:	strb	r3, [r4, #4]
   19a3c:	mov	r3, #16
   19a40:	str	r3, [r4]
   19a44:	b	19b04 <__assert_fail@plt+0x85a0>
   19a48:	tst	r5, #8
   19a4c:	bne	19a90 <__assert_fail@plt+0x852c>
   19a50:	ldr	r3, [r7, #48]	; 0x30
   19a54:	add	r6, r6, #1
   19a58:	cmp	r6, r3
   19a5c:	beq	19a90 <__assert_fail@plt+0x852c>
   19a60:	str	r6, [r7, #40]	; 0x28
   19a64:	mov	r2, r5
   19a68:	mov	r1, r7
   19a6c:	mov	r0, sp
   19a70:	bl	1955c <__assert_fail@plt+0x7ff8>
   19a74:	ldr	r3, [r7, #40]	; 0x28
   19a78:	sub	r3, r3, #1
   19a7c:	str	r3, [r7, #40]	; 0x28
   19a80:	ldrb	r3, [sp, #4]
   19a84:	sub	r3, r3, #9
   19a88:	cmp	r3, #1
   19a8c:	bhi	19b04 <__assert_fail@plt+0x85a0>
   19a90:	mov	r3, #12
   19a94:	strb	r3, [r4, #4]
   19a98:	mov	r3, #32
   19a9c:	b	19a40 <__assert_fail@plt+0x84dc>
   19aa0:	mov	r3, #1
   19aa4:	strb	r3, [r4, #4]
   19aa8:	mov	r1, r6
   19aac:	mov	r0, r7
   19ab0:	bl	1502c <__assert_fail@plt+0x3ac8>
   19ab4:	mov	sl, r0
   19ab8:	bl	11420 <iswalnum@plt>
   19abc:	adds	r3, r0, #0
   19ac0:	ldrb	r0, [r4, #6]
   19ac4:	movne	r3, #1
   19ac8:	cmp	sl, #95	; 0x5f
   19acc:	orreq	r3, r3, #1
   19ad0:	bic	r0, r0, #64	; 0x40
   19ad4:	orr	r0, r0, r3, lsl #6
   19ad8:	strb	r0, [r4, #6]
   19adc:	cmp	r8, #46	; 0x2e
   19ae0:	beq	199ec <__assert_fail@plt+0x8488>
   19ae4:	bhi	19924 <__assert_fail@plt+0x83c0>
   19ae8:	cmp	r8, #40	; 0x28
   19aec:	beq	199cc <__assert_fail@plt+0x8468>
   19af0:	bhi	198f8 <__assert_fail@plt+0x8394>
   19af4:	cmp	r8, #10
   19af8:	beq	19978 <__assert_fail@plt+0x8414>
   19afc:	cmp	r8, #36	; 0x24
   19b00:	beq	19a48 <__assert_fail@plt+0x84e4>
   19b04:	mov	r0, #1
   19b08:	b	195dc <__assert_fail@plt+0x8078>
   19b0c:	cmp	r8, #92	; 0x5c
   19b10:	bne	19aa0 <__assert_fail@plt+0x853c>
   19b14:	ldr	r3, [r7, #48]	; 0x30
   19b18:	add	r1, r6, #1
   19b1c:	cmp	r1, r3
   19b20:	movge	r3, #36	; 0x24
   19b24:	bge	19944 <__assert_fail@plt+0x83e0>
   19b28:	ldrb	r3, [r7, #75]	; 0x4b
   19b2c:	cmp	r3, #0
   19b30:	bne	195e4 <__assert_fail@plt+0x8080>
   19b34:	ldrb	r6, [r9, r1]
   19b38:	b	19654 <__assert_fail@plt+0x80f0>
   19b3c:	cmp	r8, #92	; 0x5c
   19b40:	beq	19b14 <__assert_fail@plt+0x85b0>
   19b44:	mov	r3, #1
   19b48:	strb	r3, [r4, #4]
   19b4c:	bl	113e4 <__ctype_b_loc@plt>
   19b50:	lsl	r3, r8, #1
   19b54:	ldr	r2, [r0]
   19b58:	ldrh	r3, [r2, r3]
   19b5c:	ldrb	r2, [r4, #6]
   19b60:	lsr	r3, r3, #3
   19b64:	and	r3, r3, #1
   19b68:	cmp	r8, #95	; 0x5f
   19b6c:	orreq	r3, r3, #1
   19b70:	bic	r2, r2, #64	; 0x40
   19b74:	orr	r3, r2, r3, lsl #6
   19b78:	strb	r3, [r4, #6]
   19b7c:	b	19adc <__assert_fail@plt+0x8578>
   19b80:	andeq	r0, r0, r2, lsl #8
   19b84:	addeq	r0, r0, r8
   19b88:	push	{r4, lr}
   19b8c:	mov	r4, r1
   19b90:	bl	1955c <__assert_fail@plt+0x7ff8>
   19b94:	ldr	r3, [r4, #40]	; 0x28
   19b98:	add	r0, r3, r0
   19b9c:	str	r0, [r4, #40]	; 0x28
   19ba0:	pop	{r4, pc}
   19ba4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ba8:	mov	r6, r0
   19bac:	ldr	r9, [pc, #156]	; 19c50 <__assert_fail@plt+0x86ec>
   19bb0:	mov	r5, r1
   19bb4:	mov	r7, r2
   19bb8:	mvn	r4, #0
   19bbc:	mov	r8, #10
   19bc0:	mov	sl, #32768	; 0x8000
   19bc4:	mov	r2, r7
   19bc8:	mov	r1, r6
   19bcc:	mov	r0, r5
   19bd0:	bl	19b88 <__assert_fail@plt+0x8624>
   19bd4:	ldrb	r2, [r5, #4]
   19bd8:	ldrb	r3, [r5]
   19bdc:	cmp	r2, #2
   19be0:	beq	19c44 <__assert_fail@plt+0x86e0>
   19be4:	cmp	r3, #44	; 0x2c
   19be8:	cmpne	r2, #24
   19bec:	beq	19c48 <__assert_fail@plt+0x86e4>
   19bf0:	cmp	r2, #1
   19bf4:	bne	19c3c <__assert_fail@plt+0x86d8>
   19bf8:	sub	r1, r3, #48	; 0x30
   19bfc:	uxtb	r2, r1
   19c00:	cmp	r2, #9
   19c04:	movhi	r2, #0
   19c08:	movls	r2, #1
   19c0c:	cmn	r4, #2
   19c10:	moveq	r2, #0
   19c14:	cmp	r2, #0
   19c18:	beq	19c3c <__assert_fail@plt+0x86d8>
   19c1c:	cmn	r4, #1
   19c20:	moveq	r4, r1
   19c24:	beq	19bc4 <__assert_fail@plt+0x8660>
   19c28:	mla	r4, r8, r4, r3
   19c2c:	cmp	r4, r9
   19c30:	suble	r4, r4, #48	; 0x30
   19c34:	movgt	r4, sl
   19c38:	b	19bc4 <__assert_fail@plt+0x8660>
   19c3c:	mvn	r4, #1
   19c40:	b	19bc4 <__assert_fail@plt+0x8660>
   19c44:	mvn	r4, #1
   19c48:	mov	r0, r4
   19c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c50:	andeq	r8, r0, r0, lsr r0
   19c54:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19c58:	mov	r4, r1
   19c5c:	ldr	r5, [r1, #40]	; 0x28
   19c60:	mov	r6, r0
   19c64:	mov	r1, r5
   19c68:	mov	r0, r4
   19c6c:	mov	r7, r2
   19c70:	mov	r8, r3
   19c74:	bl	14fd4 <__assert_fail@plt+0x3a70>
   19c78:	cmp	r0, #1
   19c7c:	ble	19cb0 <__assert_fail@plt+0x874c>
   19c80:	mov	r3, #1
   19c84:	mov	r2, r0
   19c88:	mov	r1, r5
   19c8c:	str	r3, [r6]
   19c90:	mov	r0, r4
   19c94:	bl	1502c <__assert_fail@plt+0x3ac8>
   19c98:	str	r0, [r6, #4]
   19c9c:	mov	r0, #0
   19ca0:	add	r5, r5, r2
   19ca4:	str	r5, [r4, #40]	; 0x28
   19ca8:	add	sp, sp, #8
   19cac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19cb0:	ldrb	r2, [r7, #4]
   19cb4:	add	r5, r5, r8
   19cb8:	str	r5, [r4, #40]	; 0x28
   19cbc:	and	r3, r2, #251	; 0xfb
   19cc0:	cmp	r2, #28
   19cc4:	cmpne	r3, #26
   19cc8:	bne	19e18 <__assert_fail@plt+0x88b4>
   19ccc:	ldr	r3, [r4, #56]	; 0x38
   19cd0:	cmp	r5, r3
   19cd4:	blt	19ce0 <__assert_fail@plt+0x877c>
   19cd8:	mov	r0, #7
   19cdc:	b	19ca8 <__assert_fail@plt+0x8744>
   19ce0:	ldrb	sl, [r7]
   19ce4:	mov	r9, #0
   19ce8:	ldrb	r3, [r7, #4]
   19cec:	ldr	r5, [r4, #40]	; 0x28
   19cf0:	cmp	r3, #30
   19cf4:	bne	19d04 <__assert_fail@plt+0x87a0>
   19cf8:	ldrb	r3, [r4, #75]	; 0x4b
   19cfc:	cmp	r3, #0
   19d00:	bne	19d14 <__assert_fail@plt+0x87b0>
   19d04:	add	r2, r5, #1
   19d08:	ldr	r3, [r4, #4]
   19d0c:	str	r2, [r4, #40]	; 0x28
   19d10:	b	19dc4 <__assert_fail@plt+0x8860>
   19d14:	ldrb	r3, [r4, #76]	; 0x4c
   19d18:	cmp	r3, #0
   19d1c:	beq	19db0 <__assert_fail@plt+0x884c>
   19d20:	ldr	r3, [r4, #28]
   19d24:	cmp	r5, r3
   19d28:	beq	19d3c <__assert_fail@plt+0x87d8>
   19d2c:	ldr	r3, [r4, #8]
   19d30:	ldr	r3, [r3, r5, lsl #2]
   19d34:	cmn	r3, #1
   19d38:	beq	19d04 <__assert_fail@plt+0x87a0>
   19d3c:	ldr	r2, [r4, #12]
   19d40:	ldr	r3, [r4]
   19d44:	ldr	r1, [r2, r5, lsl #2]
   19d48:	ldr	r2, [r4, #24]
   19d4c:	add	r3, r3, r1
   19d50:	ldrb	r8, [r3, r2]
   19d54:	tst	r8, #128	; 0x80
   19d58:	bne	19d04 <__assert_fail@plt+0x87a0>
   19d5c:	mov	r1, r5
   19d60:	mov	r0, r4
   19d64:	bl	14fd4 <__assert_fail@plt+0x3a70>
   19d68:	add	r0, r5, r0
   19d6c:	str	r0, [r4, #40]	; 0x28
   19d70:	ldr	r3, [r4, #40]	; 0x28
   19d74:	ldr	r2, [r4, #56]	; 0x38
   19d78:	cmp	r2, r3
   19d7c:	ble	19cd8 <__assert_fail@plt+0x8774>
   19d80:	cmp	sl, r8
   19d84:	bne	19d98 <__assert_fail@plt+0x8834>
   19d88:	ldr	r2, [r4, #4]
   19d8c:	ldrb	r2, [r2, r3]
   19d90:	cmp	r2, #93	; 0x5d
   19d94:	beq	19dcc <__assert_fail@plt+0x8868>
   19d98:	ldr	r3, [r6, #4]
   19d9c:	strb	r8, [r3, r9]
   19da0:	add	r9, r9, #1
   19da4:	cmp	r9, #32
   19da8:	bne	19ce8 <__assert_fail@plt+0x8784>
   19dac:	b	19cd8 <__assert_fail@plt+0x8774>
   19db0:	ldr	r3, [r4]
   19db4:	ldr	r2, [r4, #24]
   19db8:	add	r1, r5, #1
   19dbc:	add	r3, r3, r2
   19dc0:	str	r1, [r4, #40]	; 0x28
   19dc4:	ldrb	r8, [r3, r5]
   19dc8:	b	19d70 <__assert_fail@plt+0x880c>
   19dcc:	add	r3, r3, #1
   19dd0:	str	r3, [r4, #40]	; 0x28
   19dd4:	ldr	r3, [r6, #4]
   19dd8:	mov	r0, #0
   19ddc:	strb	r0, [r3, r9]
   19de0:	ldrb	r3, [r7, #4]
   19de4:	cmp	r3, #28
   19de8:	beq	19e08 <__assert_fail@plt+0x88a4>
   19dec:	cmp	r3, #30
   19df0:	beq	19e10 <__assert_fail@plt+0x88ac>
   19df4:	cmp	r3, #26
   19df8:	moveq	r3, #3
   19dfc:	bne	19ca8 <__assert_fail@plt+0x8744>
   19e00:	str	r3, [r6]
   19e04:	b	19ca8 <__assert_fail@plt+0x8744>
   19e08:	mov	r3, #2
   19e0c:	b	19e00 <__assert_fail@plt+0x889c>
   19e10:	mov	r3, #4
   19e14:	b	19e00 <__assert_fail@plt+0x889c>
   19e18:	ldrb	r3, [sp, #44]	; 0x2c
   19e1c:	cmp	r2, #22
   19e20:	orrne	r3, r3, #1
   19e24:	cmp	r3, #0
   19e28:	bne	19e4c <__assert_fail@plt+0x88e8>
   19e2c:	ldr	r2, [sp, #40]	; 0x28
   19e30:	mov	r1, r4
   19e34:	mov	r0, sp
   19e38:	bl	150fc <__assert_fail@plt+0x3b98>
   19e3c:	ldrb	r3, [sp, #4]
   19e40:	cmp	r3, #21
   19e44:	movne	r0, #11
   19e48:	bne	19ca8 <__assert_fail@plt+0x8744>
   19e4c:	mov	r0, #0
   19e50:	str	r0, [r6]
   19e54:	ldrb	r3, [r7]
   19e58:	strb	r3, [r6, #4]
   19e5c:	b	19ca8 <__assert_fail@plt+0x8744>
   19e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e64:	sub	sp, sp, #14400	; 0x3840
   19e68:	mov	sl, #0
   19e6c:	sub	sp, sp, #4
   19e70:	mov	r9, r0
   19e74:	str	sl, [r1, #44]	; 0x2c
   19e78:	str	sl, [r1, #48]	; 0x30
   19e7c:	add	r0, sp, #64	; 0x40
   19e80:	mov	r8, r1
   19e84:	bl	15bf8 <__assert_fail@plt+0x4694>
   19e88:	mov	fp, sl
   19e8c:	ldr	r3, [r8, #8]
   19e90:	cmp	fp, r3
   19e94:	blt	19ec8 <__assert_fail@plt+0x8964>
   19e98:	cmp	sl, #0
   19e9c:	bgt	1a2f8 <__assert_fail@plt+0x8d94>
   19ea0:	bne	1a2d8 <__assert_fail@plt+0x8d74>
   19ea4:	mov	r1, #256	; 0x100
   19ea8:	mov	r0, #4
   19eac:	bl	213d4 <__assert_fail@plt+0xfe70>
   19eb0:	str	r0, [r8, #44]	; 0x2c
   19eb4:	adds	r0, r0, #0
   19eb8:	movne	r0, #1
   19ebc:	add	sp, sp, #14400	; 0x3840
   19ec0:	add	sp, sp, #4
   19ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ec8:	lsl	r3, fp, #2
   19ecc:	str	r3, [sp, #12]
   19ed0:	ldr	r3, [r8, #12]
   19ed4:	ldr	r1, [pc, #1908]	; 1a650 <__assert_fail@plt+0x90ec>
   19ed8:	ldr	r2, [r3, fp, lsl #2]
   19edc:	ldr	r3, [r9]
   19ee0:	add	r7, r3, r2, lsl #3
   19ee4:	ldrb	r4, [r7, #4]
   19ee8:	ldr	r5, [r7, #4]
   19eec:	cmp	r4, #1
   19ef0:	and	r5, r1, r5, lsr #8
   19ef4:	bne	19f78 <__assert_fail@plt+0x8a14>
   19ef8:	ldrb	r1, [r3, r2, lsl #3]
   19efc:	add	r0, sp, #64	; 0x40
   19f00:	bl	14f00 <__assert_fail@plt+0x399c>
   19f04:	cmp	r5, #0
   19f08:	bne	19ffc <__assert_fail@plt+0x8a98>
   19f0c:	add	r6, sp, #6208	; 0x1840
   19f10:	mov	r5, #0
   19f14:	add	r3, sp, #3136	; 0xc40
   19f18:	str	r3, [sp, #4]
   19f1c:	cmp	r5, sl
   19f20:	blt	1a188 <__assert_fail@plt+0x8c24>
   19f24:	cmp	r5, sl
   19f28:	bne	1a0d0 <__assert_fail@plt+0x8b6c>
   19f2c:	add	lr, sp, #64	; 0x40
   19f30:	add	r3, sp, #14400	; 0x3840
   19f34:	add	ip, r3, sl, lsl #5
   19f38:	ldm	lr!, {r0, r1, r2, r3}
   19f3c:	sub	ip, ip, #8192	; 0x2000
   19f40:	stmia	ip!, {r0, r1, r2, r3}
   19f44:	ldm	lr, {r0, r1, r2, r3}
   19f48:	stm	ip, {r0, r1, r2, r3}
   19f4c:	mov	r0, #12
   19f50:	ldr	r3, [r8, #12]
   19f54:	ldr	r2, [sp, #12]
   19f58:	ldr	r1, [r3, r2]
   19f5c:	add	r3, sp, #3136	; 0xc40
   19f60:	mla	r0, r0, sl, r3
   19f64:	bl	15aa8 <__assert_fail@plt+0x4544>
   19f68:	cmp	r0, #0
   19f6c:	bne	1a2c8 <__assert_fail@plt+0x8d64>
   19f70:	add	sl, sl, #1
   19f74:	b	1a030 <__assert_fail@plt+0x8acc>
   19f78:	cmp	r4, #3
   19f7c:	bne	19f90 <__assert_fail@plt+0x8a2c>
   19f80:	ldr	r1, [r3, r2, lsl #3]
   19f84:	add	r0, sp, #64	; 0x40
   19f88:	bl	14f84 <__assert_fail@plt+0x3a20>
   19f8c:	b	19f04 <__assert_fail@plt+0x89a0>
   19f90:	cmp	r4, #5
   19f94:	bne	19fec <__assert_fail@plt+0x8a88>
   19f98:	ldr	r3, [r9, #92]	; 0x5c
   19f9c:	cmp	r3, #1
   19fa0:	ble	19fd8 <__assert_fail@plt+0x8a74>
   19fa4:	ldr	r1, [r9, #60]	; 0x3c
   19fa8:	add	r0, sp, #64	; 0x40
   19fac:	bl	14f84 <__assert_fail@plt+0x3a20>
   19fb0:	ldr	r2, [r9, #128]	; 0x80
   19fb4:	tst	r2, #64	; 0x40
   19fb8:	ldreq	r3, [sp, #64]	; 0x40
   19fbc:	biceq	r3, r3, #1024	; 0x400
   19fc0:	streq	r3, [sp, #64]	; 0x40
   19fc4:	tst	r2, #128	; 0x80
   19fc8:	ldrne	r3, [sp, #64]	; 0x40
   19fcc:	bicne	r3, r3, #1
   19fd0:	strne	r3, [sp, #64]	; 0x40
   19fd4:	b	19f04 <__assert_fail@plt+0x89a0>
   19fd8:	mov	r2, #32
   19fdc:	mvn	r1, #0
   19fe0:	add	r0, sp, #64	; 0x40
   19fe4:	bl	11444 <memset@plt>
   19fe8:	b	19fb0 <__assert_fail@plt+0x8a4c>
   19fec:	cmp	r4, #7
   19ff0:	bne	1a0d0 <__assert_fail@plt+0x8b6c>
   19ff4:	mov	r2, #16
   19ff8:	b	19fdc <__assert_fail@plt+0x8a78>
   19ffc:	tst	r5, #32
   1a000:	beq	1a028 <__assert_fail@plt+0x8ac4>
   1a004:	ldr	r6, [sp, #64]	; 0x40
   1a008:	add	r0, sp, #64	; 0x40
   1a00c:	and	r6, r6, #1024	; 0x400
   1a010:	bl	15bf8 <__assert_fail@plt+0x4694>
   1a014:	cmp	r6, #0
   1a018:	beq	1a0d0 <__assert_fail@plt+0x8b6c>
   1a01c:	ldr	r3, [sp, #64]	; 0x40
   1a020:	orr	r3, r3, #1024	; 0x400
   1a024:	str	r3, [sp, #64]	; 0x40
   1a028:	tst	r5, #128	; 0x80
   1a02c:	beq	1a038 <__assert_fail@plt+0x8ad4>
   1a030:	add	r0, sp, #64	; 0x40
   1a034:	b	1a060 <__assert_fail@plt+0x8afc>
   1a038:	tst	r5, #4
   1a03c:	bne	1a068 <__assert_fail@plt+0x8b04>
   1a040:	tst	r5, #8
   1a044:	beq	19f0c <__assert_fail@plt+0x89a8>
   1a048:	cmp	r4, #1
   1a04c:	add	r0, sp, #64	; 0x40
   1a050:	bne	1a108 <__assert_fail@plt+0x8ba4>
   1a054:	ldrb	r3, [r7, #6]
   1a058:	tst	r3, #64	; 0x40
   1a05c:	beq	1a108 <__assert_fail@plt+0x8ba4>
   1a060:	bl	15bf8 <__assert_fail@plt+0x4694>
   1a064:	b	1a0d0 <__assert_fail@plt+0x8b6c>
   1a068:	cmp	r4, #1
   1a06c:	bne	1a07c <__assert_fail@plt+0x8b18>
   1a070:	ldrb	r3, [r7, #6]
   1a074:	tst	r3, #64	; 0x40
   1a078:	beq	1a030 <__assert_fail@plt+0x8acc>
   1a07c:	ldr	r3, [r9, #92]	; 0x5c
   1a080:	add	r2, r9, #96	; 0x60
   1a084:	cmp	r3, #1
   1a088:	ble	1a0d8 <__assert_fail@plt+0x8b74>
   1a08c:	mov	r3, #0
   1a090:	ldr	lr, [r9, #60]	; 0x3c
   1a094:	mov	r0, r3
   1a098:	add	ip, sp, #64	; 0x40
   1a09c:	ldr	r1, [lr, r0, lsl #2]
   1a0a0:	ldr	r6, [r2], #4
   1a0a4:	mvn	r1, r1
   1a0a8:	orr	r1, r1, r6
   1a0ac:	ldr	r6, [ip, r0, lsl #2]
   1a0b0:	and	r1, r1, r6
   1a0b4:	str	r1, [ip, r0, lsl #2]
   1a0b8:	add	r0, r0, #1
   1a0bc:	cmp	r0, #8
   1a0c0:	orr	r3, r3, r1
   1a0c4:	bne	1a09c <__assert_fail@plt+0x8b38>
   1a0c8:	cmp	r3, #0
   1a0cc:	bne	1a040 <__assert_fail@plt+0x8adc>
   1a0d0:	add	fp, fp, #1
   1a0d4:	b	19e8c <__assert_fail@plt+0x8928>
   1a0d8:	mov	r3, #0
   1a0dc:	mov	r1, r3
   1a0e0:	add	ip, sp, #64	; 0x40
   1a0e4:	ldr	lr, [ip, r1, lsl #2]
   1a0e8:	ldr	r0, [r2], #4
   1a0ec:	and	r0, r0, lr
   1a0f0:	str	r0, [ip, r1, lsl #2]
   1a0f4:	add	r1, r1, #1
   1a0f8:	cmp	r1, #8
   1a0fc:	orr	r3, r3, r0
   1a100:	bne	1a0e4 <__assert_fail@plt+0x8b80>
   1a104:	b	1a0c8 <__assert_fail@plt+0x8b64>
   1a108:	ldr	r3, [r9, #92]	; 0x5c
   1a10c:	add	r2, r9, #96	; 0x60
   1a110:	cmp	r3, #1
   1a114:	ble	1a15c <__assert_fail@plt+0x8bf8>
   1a118:	mov	r3, #0
   1a11c:	ldr	r5, [r9, #60]	; 0x3c
   1a120:	mov	r1, r3
   1a124:	add	lr, sp, #64	; 0x40
   1a128:	ldr	ip, [r5, r1, lsl #2]
   1a12c:	ldr	r0, [r2], #4
   1a130:	and	ip, ip, r0
   1a134:	ldr	r0, [lr, r1, lsl #2]
   1a138:	bic	r0, r0, ip
   1a13c:	str	r0, [lr, r1, lsl #2]
   1a140:	add	r1, r1, #1
   1a144:	cmp	r1, #8
   1a148:	orr	r3, r3, r0
   1a14c:	bne	1a128 <__assert_fail@plt+0x8bc4>
   1a150:	cmp	r3, #0
   1a154:	beq	1a0d0 <__assert_fail@plt+0x8b6c>
   1a158:	b	19f0c <__assert_fail@plt+0x89a8>
   1a15c:	mov	r3, #0
   1a160:	mov	r1, r3
   1a164:	ldr	ip, [r0, r1, lsl #2]
   1a168:	ldr	lr, [r2], #4
   1a16c:	bic	ip, ip, lr
   1a170:	str	ip, [r0, r1, lsl #2]
   1a174:	add	r1, r1, #1
   1a178:	cmp	r1, #8
   1a17c:	orr	r3, r3, ip
   1a180:	bne	1a164 <__assert_fail@plt+0x8c00>
   1a184:	b	1a150 <__assert_fail@plt+0x8bec>
   1a188:	cmp	r4, #1
   1a18c:	bne	1a1a4 <__assert_fail@plt+0x8c40>
   1a190:	ldrb	r1, [r7]
   1a194:	mov	r0, r6
   1a198:	bl	14f34 <__assert_fail@plt+0x39d0>
   1a19c:	cmp	r0, #0
   1a1a0:	beq	1a2b0 <__assert_fail@plt+0x8d4c>
   1a1a4:	mov	r2, #0
   1a1a8:	mov	r3, r2
   1a1ac:	add	r1, sp, #64	; 0x40
   1a1b0:	ldr	r0, [r6, r3, lsl #2]
   1a1b4:	ldr	r1, [r1, r3, lsl #2]
   1a1b8:	and	r1, r1, r0
   1a1bc:	add	r0, sp, #1088	; 0x440
   1a1c0:	orr	r2, r2, r1
   1a1c4:	str	r1, [r0, r3, lsl #2]
   1a1c8:	add	r3, r3, #1
   1a1cc:	cmp	r3, #8
   1a1d0:	bne	1a1ac <__assert_fail@plt+0x8c48>
   1a1d4:	cmp	r2, #0
   1a1d8:	beq	1a2b0 <__assert_fail@plt+0x8d4c>
   1a1dc:	mov	r3, #0
   1a1e0:	mov	r1, r3
   1a1e4:	str	r3, [sp, #8]
   1a1e8:	add	r2, sp, #64	; 0x40
   1a1ec:	ldr	r0, [r6, r3, lsl #2]
   1a1f0:	ldr	r2, [r2, r3, lsl #2]
   1a1f4:	add	lr, sp, #2112	; 0x840
   1a1f8:	bic	ip, r0, r2
   1a1fc:	bic	r2, r2, r0
   1a200:	add	r0, sp, #64	; 0x40
   1a204:	str	ip, [lr, r3, lsl #2]
   1a208:	str	r2, [r0, r3, lsl #2]
   1a20c:	ldr	r0, [sp, #8]
   1a210:	add	r3, r3, #1
   1a214:	orr	r2, r0, r2
   1a218:	cmp	r3, #8
   1a21c:	orr	r1, r1, ip
   1a220:	str	r2, [sp, #8]
   1a224:	bne	1a1e8 <__assert_fail@plt+0x8c84>
   1a228:	cmp	r1, #0
   1a22c:	beq	1a288 <__assert_fail@plt+0x8d24>
   1a230:	add	r3, sp, #14400	; 0x3840
   1a234:	add	ip, r3, sl, lsl #5
   1a238:	ldm	lr!, {r0, r1, r2, r3}
   1a23c:	sub	ip, ip, #8192	; 0x2000
   1a240:	stmia	ip!, {r0, r1, r2, r3}
   1a244:	ldm	lr, {r0, r1, r2, r3}
   1a248:	add	lr, sp, #1088	; 0x440
   1a24c:	stm	ip, {r0, r1, r2, r3}
   1a250:	add	r3, sp, #6208	; 0x1840
   1a254:	add	ip, r3, r5, lsl #5
   1a258:	ldm	lr!, {r0, r1, r2, r3}
   1a25c:	stmia	ip!, {r0, r1, r2, r3}
   1a260:	ldm	lr, {r0, r1, r2, r3}
   1a264:	stm	ip, {r0, r1, r2, r3}
   1a268:	mov	r0, #12
   1a26c:	add	r3, sp, #3136	; 0xc40
   1a270:	ldr	r1, [sp, #4]
   1a274:	mla	r0, r0, sl, r3
   1a278:	bl	17b24 <__assert_fail@plt+0x65c0>
   1a27c:	cmp	r0, #0
   1a280:	bne	1a2c8 <__assert_fail@plt+0x8d64>
   1a284:	add	sl, sl, #1
   1a288:	ldr	r3, [r8, #12]
   1a28c:	ldr	r2, [sp, #12]
   1a290:	ldr	r0, [sp, #4]
   1a294:	ldr	r1, [r3, r2]
   1a298:	bl	18500 <__assert_fail@plt+0x6f9c>
   1a29c:	cmp	r0, #0
   1a2a0:	beq	1a2c8 <__assert_fail@plt+0x8d64>
   1a2a4:	ldr	r3, [sp, #8]
   1a2a8:	cmp	r3, #0
   1a2ac:	beq	19f24 <__assert_fail@plt+0x89c0>
   1a2b0:	ldr	r3, [sp, #4]
   1a2b4:	add	r5, r5, #1
   1a2b8:	add	r3, r3, #12
   1a2bc:	add	r6, r6, #32
   1a2c0:	str	r3, [sp, #4]
   1a2c4:	b	19f1c <__assert_fail@plt+0x89b8>
   1a2c8:	mov	r4, #0
   1a2cc:	mov	r5, #12
   1a2d0:	cmp	r4, sl
   1a2d4:	blt	1a2e0 <__assert_fail@plt+0x8d7c>
   1a2d8:	mov	r0, #0
   1a2dc:	b	19ebc <__assert_fail@plt+0x8958>
   1a2e0:	add	r3, sp, #3136	; 0xc40
   1a2e4:	mla	r3, r5, r4, r3
   1a2e8:	add	r4, r4, #1
   1a2ec:	ldr	r0, [r3, #8]
   1a2f0:	bl	1370c <__assert_fail@plt+0x21a8>
   1a2f4:	b	1a2d0 <__assert_fail@plt+0x8d6c>
   1a2f8:	add	r1, sl, #1
   1a2fc:	add	r0, sp, #20
   1a300:	bl	15ae8 <__assert_fail@plt+0x4584>
   1a304:	add	r4, sp, #2112	; 0x840
   1a308:	cmp	r0, #0
   1a30c:	mov	r5, r0
   1a310:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1a314:	beq	1a348 <__assert_fail@plt+0x8de4>
   1a318:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1a31c:	bl	1370c <__assert_fail@plt+0x21a8>
   1a320:	mov	r4, #0
   1a324:	mov	r5, #12
   1a328:	add	r3, sp, #3136	; 0xc40
   1a32c:	mla	r3, r5, r4, r3
   1a330:	add	r4, r4, #1
   1a334:	ldr	r0, [r3, #8]
   1a338:	bl	1370c <__assert_fail@plt+0x21a8>
   1a33c:	cmp	r4, sl
   1a340:	bne	1a328 <__assert_fail@plt+0x8dc4>
   1a344:	b	1a2d8 <__assert_fail@plt+0x8d74>
   1a348:	add	r0, sp, #32
   1a34c:	mov	r6, r5
   1a350:	bl	15bf8 <__assert_fail@plt+0x4694>
   1a354:	add	r3, sp, #16
   1a358:	str	r3, [sp, #4]
   1a35c:	mov	r3, #12
   1a360:	add	r2, sp, #3136	; 0xc40
   1a364:	mla	fp, r3, r6, r2
   1a368:	mov	r7, #0
   1a36c:	str	r7, [r4, #-2088]	; 0xfffff7d8
   1a370:	ldr	r3, [fp, #4]
   1a374:	cmp	r7, r3
   1a378:	blt	1a404 <__assert_fail@plt+0x8ea0>
   1a37c:	mov	r3, #0
   1a380:	add	r2, sp, #20
   1a384:	mov	r1, r9
   1a388:	ldr	r0, [sp, #4]
   1a38c:	bl	17cd4 <__assert_fail@plt+0x6770>
   1a390:	add	r3, sp, #64	; 0x40
   1a394:	cmp	r0, #0
   1a398:	mov	r7, r0
   1a39c:	str	r0, [r3, r6, lsl #2]
   1a3a0:	bne	1a3b0 <__assert_fail@plt+0x8e4c>
   1a3a4:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a3a8:	cmp	r3, #0
   1a3ac:	bne	1a318 <__assert_fail@plt+0x8db4>
   1a3b0:	ldrsb	r3, [r7, #52]	; 0x34
   1a3b4:	add	fp, sp, #1088	; 0x440
   1a3b8:	cmp	r3, #0
   1a3bc:	strge	r7, [fp, r6, lsl #2]
   1a3c0:	strge	r7, [r4, r6, lsl #2]
   1a3c4:	bge	1a47c <__assert_fail@plt+0x8f18>
   1a3c8:	mov	r3, #1
   1a3cc:	add	r2, sp, #20
   1a3d0:	mov	r1, r9
   1a3d4:	ldr	r0, [sp, #4]
   1a3d8:	bl	17cd4 <__assert_fail@plt+0x6770>
   1a3dc:	cmp	r0, #0
   1a3e0:	str	r0, [fp, r6, lsl #2]
   1a3e4:	bne	1a448 <__assert_fail@plt+0x8ee4>
   1a3e8:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a3ec:	cmp	r3, #0
   1a3f0:	bne	1a318 <__assert_fail@plt+0x8db4>
   1a3f4:	ldr	r3, [r9, #92]	; 0x5c
   1a3f8:	cmp	r3, #1
   1a3fc:	movgt	r5, #1
   1a400:	b	1a450 <__assert_fail@plt+0x8eec>
   1a404:	ldr	r3, [fp, #8]
   1a408:	ldr	r2, [r3, r7, lsl #2]
   1a40c:	ldr	r3, [r9, #12]
   1a410:	ldr	r3, [r3, r2, lsl #2]
   1a414:	cmn	r3, #1
   1a418:	bne	1a424 <__assert_fail@plt+0x8ec0>
   1a41c:	add	r7, r7, #1
   1a420:	b	1a370 <__assert_fail@plt+0x8e0c>
   1a424:	ldr	r1, [r9, #24]
   1a428:	mov	r2, #12
   1a42c:	add	r0, sp, #20
   1a430:	mla	r1, r2, r3, r1
   1a434:	bl	18908 <__assert_fail@plt+0x73a4>
   1a438:	cmp	r0, #0
   1a43c:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1a440:	beq	1a41c <__assert_fail@plt+0x8eb8>
   1a444:	b	1a318 <__assert_fail@plt+0x8db4>
   1a448:	cmp	r7, r0
   1a44c:	bne	1a3f4 <__assert_fail@plt+0x8e90>
   1a450:	mov	r3, #2
   1a454:	add	r2, sp, #20
   1a458:	mov	r1, r9
   1a45c:	ldr	r0, [sp, #4]
   1a460:	bl	17cd4 <__assert_fail@plt+0x6770>
   1a464:	cmp	r0, #0
   1a468:	str	r0, [r4, r6, lsl #2]
   1a46c:	bne	1a47c <__assert_fail@plt+0x8f18>
   1a470:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a474:	cmp	r3, #0
   1a478:	bne	1a318 <__assert_fail@plt+0x8db4>
   1a47c:	add	r3, sp, #6208	; 0x1840
   1a480:	add	r1, r3, r6, lsl #5
   1a484:	add	r0, sp, #32
   1a488:	add	r6, r6, #1
   1a48c:	bl	14f84 <__assert_fail@plt+0x3a20>
   1a490:	cmp	r6, sl
   1a494:	bne	1a35c <__assert_fail@plt+0x8df8>
   1a498:	cmp	r5, #0
   1a49c:	bne	1a5b0 <__assert_fail@plt+0x904c>
   1a4a0:	mov	r1, #256	; 0x100
   1a4a4:	mov	r0, #4
   1a4a8:	bl	213d4 <__assert_fail@plt+0xfe70>
   1a4ac:	cmp	r0, #0
   1a4b0:	str	r0, [r8, #44]	; 0x2c
   1a4b4:	beq	1a318 <__assert_fail@plt+0x8db4>
   1a4b8:	add	r6, r9, #96	; 0x60
   1a4bc:	mov	r2, r5
   1a4c0:	add	r3, sp, #32
   1a4c4:	add	lr, r0, r2, lsl #5
   1a4c8:	ldr	r1, [r3, r2]
   1a4cc:	add	r3, sp, #6208	; 0x1840
   1a4d0:	mov	ip, #1
   1a4d4:	add	r7, r3, r2
   1a4d8:	cmp	r1, #0
   1a4dc:	bne	1a564 <__assert_fail@plt+0x9000>
   1a4e0:	add	r2, r2, #4
   1a4e4:	cmp	r2, #32
   1a4e8:	add	r6, r6, #4
   1a4ec:	bne	1a4c0 <__assert_fail@plt+0x8f5c>
   1a4f0:	ldr	r3, [r4, #-2080]	; 0xfffff7e0
   1a4f4:	mov	r6, r0
   1a4f8:	tst	r3, #1024	; 0x400
   1a4fc:	beq	1a530 <__assert_fail@plt+0x8fcc>
   1a500:	mov	r7, #0
   1a504:	mov	r8, #10
   1a508:	add	r3, sp, #6208	; 0x1840
   1a50c:	mov	r1, r8
   1a510:	add	r0, r3, r7, lsl #5
   1a514:	bl	14f34 <__assert_fail@plt+0x39d0>
   1a518:	cmp	r0, #0
   1a51c:	beq	1a640 <__assert_fail@plt+0x90dc>
   1a520:	ldr	r3, [r4, r7, lsl #2]
   1a524:	cmp	r5, #0
   1a528:	str	r3, [r6, #40]	; 0x28
   1a52c:	strne	r3, [r6, #1064]	; 0x428
   1a530:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1a534:	bl	1370c <__assert_fail@plt+0x21a8>
   1a538:	mov	r4, #0
   1a53c:	mov	r5, #12
   1a540:	add	r3, sp, #3136	; 0xc40
   1a544:	mla	r3, r5, r4, r3
   1a548:	add	r4, r4, #1
   1a54c:	ldr	r0, [r3, #8]
   1a550:	bl	1370c <__assert_fail@plt+0x21a8>
   1a554:	cmp	r4, sl
   1a558:	bne	1a540 <__assert_fail@plt+0x8fdc>
   1a55c:	mov	r0, #1
   1a560:	b	19ebc <__assert_fail@plt+0x8958>
   1a564:	tst	r1, #1
   1a568:	movne	r3, #0
   1a56c:	bne	1a584 <__assert_fail@plt+0x9020>
   1a570:	lsl	ip, ip, #1
   1a574:	lsr	r1, r1, #1
   1a578:	add	lr, lr, #4
   1a57c:	b	1a4d8 <__assert_fail@plt+0x8f74>
   1a580:	add	r3, r3, #1
   1a584:	ldr	r9, [r7, r3, lsl #5]
   1a588:	tst	ip, r9
   1a58c:	beq	1a580 <__assert_fail@plt+0x901c>
   1a590:	ldr	r9, [r6]
   1a594:	lsl	r3, r3, #2
   1a598:	add	r3, r4, r3
   1a59c:	tst	ip, r9
   1a5a0:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   1a5a4:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1a5a8:	str	r3, [lr]
   1a5ac:	b	1a570 <__assert_fail@plt+0x900c>
   1a5b0:	mov	r1, #512	; 0x200
   1a5b4:	mov	r0, #4
   1a5b8:	bl	213d4 <__assert_fail@plt+0xfe70>
   1a5bc:	cmp	r0, #0
   1a5c0:	str	r0, [r8, #48]	; 0x30
   1a5c4:	beq	1a318 <__assert_fail@plt+0x8db4>
   1a5c8:	mov	r2, #0
   1a5cc:	add	r3, sp, #32
   1a5d0:	add	ip, r0, r2, lsl #5
   1a5d4:	ldr	r1, [r3, r2]
   1a5d8:	add	r3, sp, #6208	; 0x1840
   1a5dc:	mov	lr, #1
   1a5e0:	add	r6, r3, r2
   1a5e4:	cmp	r1, #0
   1a5e8:	bne	1a5fc <__assert_fail@plt+0x9098>
   1a5ec:	add	r2, r2, #4
   1a5f0:	cmp	r2, #32
   1a5f4:	bne	1a5cc <__assert_fail@plt+0x9068>
   1a5f8:	b	1a4f0 <__assert_fail@plt+0x8f8c>
   1a5fc:	tst	r1, #1
   1a600:	movne	r3, #0
   1a604:	bne	1a61c <__assert_fail@plt+0x90b8>
   1a608:	lsl	lr, lr, #1
   1a60c:	lsr	r1, r1, #1
   1a610:	add	ip, ip, #4
   1a614:	b	1a5e4 <__assert_fail@plt+0x9080>
   1a618:	add	r3, r3, #1
   1a61c:	ldr	r7, [r6, r3, lsl #5]
   1a620:	tst	lr, r7
   1a624:	beq	1a618 <__assert_fail@plt+0x90b4>
   1a628:	add	r3, r4, r3, lsl #2
   1a62c:	ldr	r7, [r3, #-2048]	; 0xfffff800
   1a630:	str	r7, [ip]
   1a634:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1a638:	str	r3, [ip, #1024]	; 0x400
   1a63c:	b	1a608 <__assert_fail@plt+0x90a4>
   1a640:	add	r7, r7, #1
   1a644:	cmp	r7, sl
   1a648:	bne	1a508 <__assert_fail@plt+0x8fa4>
   1a64c:	b	1a530 <__assert_fail@plt+0x8fcc>
   1a650:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a658:	sub	sp, sp, #28
   1a65c:	add	r5, sp, #12
   1a660:	mov	r8, r0
   1a664:	mov	r4, r1
   1a668:	mov	r0, r5
   1a66c:	ldr	r1, [r1, #4]
   1a670:	mov	r9, r2
   1a674:	mov	sl, r3
   1a678:	bl	15ae8 <__assert_fail@plt+0x4584>
   1a67c:	subs	r6, r0, #0
   1a680:	moveq	r7, r6
   1a684:	beq	1a72c <__assert_fail@plt+0x91c8>
   1a688:	mov	r0, r6
   1a68c:	add	sp, sp, #28
   1a690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a694:	ldr	r3, [r4, #8]
   1a698:	ldr	r1, [r8, #24]
   1a69c:	ldr	r2, [r3, r7, lsl #2]
   1a6a0:	mov	r3, #12
   1a6a4:	mla	r1, r3, r2, r1
   1a6a8:	mov	r3, #0
   1a6ac:	ldr	lr, [r1, #4]
   1a6b0:	cmp	r3, lr
   1a6b4:	blt	1a6d8 <__assert_fail@plt+0x9174>
   1a6b8:	mov	r0, r5
   1a6bc:	bl	18908 <__assert_fail@plt+0x73a4>
   1a6c0:	subs	fp, r0, #0
   1a6c4:	beq	1a728 <__assert_fail@plt+0x91c4>
   1a6c8:	ldr	r0, [sp, #20]
   1a6cc:	bl	1370c <__assert_fail@plt+0x21a8>
   1a6d0:	mov	r6, fp
   1a6d4:	b	1a688 <__assert_fail@plt+0x9124>
   1a6d8:	ldr	r0, [r1, #8]
   1a6dc:	ldr	ip, [r8]
   1a6e0:	ldr	r0, [r0, r3, lsl #2]
   1a6e4:	add	fp, ip, r0, lsl #3
   1a6e8:	ldrb	fp, [fp, #4]
   1a6ec:	cmp	sl, fp
   1a6f0:	bne	1a700 <__assert_fail@plt+0x919c>
   1a6f4:	ldr	ip, [ip, r0, lsl #3]
   1a6f8:	cmp	r9, ip
   1a6fc:	beq	1a708 <__assert_fail@plt+0x91a4>
   1a700:	add	r3, r3, #1
   1a704:	b	1a6b0 <__assert_fail@plt+0x914c>
   1a708:	cmn	r0, #1
   1a70c:	beq	1a6b8 <__assert_fail@plt+0x9154>
   1a710:	str	sl, [sp]
   1a714:	mov	r3, r9
   1a718:	mov	r1, r5
   1a71c:	mov	r0, r8
   1a720:	bl	18818 <__assert_fail@plt+0x72b4>
   1a724:	b	1a6c0 <__assert_fail@plt+0x915c>
   1a728:	add	r7, r7, #1
   1a72c:	ldr	r3, [r4, #4]
   1a730:	cmp	r7, r3
   1a734:	blt	1a694 <__assert_fail@plt+0x9130>
   1a738:	ldr	r0, [r4, #8]
   1a73c:	bl	1370c <__assert_fail@plt+0x21a8>
   1a740:	ldm	r5, {r0, r1, r2}
   1a744:	stm	r4, {r0, r1, r2}
   1a748:	b	1a688 <__assert_fail@plt+0x9124>
   1a74c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a750:	mov	r3, #0
   1a754:	ldr	r4, [r2, #4]
   1a758:	str	r3, [r0]
   1a75c:	cmp	r4, r3
   1a760:	movne	r8, r4
   1a764:	bne	1a780 <__assert_fail@plt+0x921c>
   1a768:	mov	r0, r4
   1a76c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a770:	ldr	ip, [r2, #8]
   1a774:	ldr	ip, [ip, r3, lsl #2]
   1a778:	add	r3, r3, #1
   1a77c:	add	r8, r8, ip
   1a780:	cmp	r4, r3
   1a784:	bgt	1a770 <__assert_fail@plt+0x920c>
   1a788:	ldr	r3, [r1, #68]	; 0x44
   1a78c:	mov	r5, r2
   1a790:	and	r2, r8, r3
   1a794:	mov	r3, #12
   1a798:	mov	r6, r1
   1a79c:	mul	r3, r3, r2
   1a7a0:	ldr	r2, [r1, #32]
   1a7a4:	mov	r7, r0
   1a7a8:	add	fp, r2, r3
   1a7ac:	ldr	sl, [r2, r3]
   1a7b0:	mov	r9, #0
   1a7b4:	cmp	r9, sl
   1a7b8:	blt	1a800 <__assert_fail@plt+0x929c>
   1a7bc:	mov	r1, #1
   1a7c0:	mov	r0, #56	; 0x38
   1a7c4:	bl	213d4 <__assert_fail@plt+0xfe70>
   1a7c8:	subs	r4, r0, #0
   1a7cc:	beq	1a7f0 <__assert_fail@plt+0x928c>
   1a7d0:	add	r9, r4, #4
   1a7d4:	mov	r1, r5
   1a7d8:	mov	r0, r9
   1a7dc:	bl	17b24 <__assert_fail@plt+0x65c0>
   1a7e0:	cmp	r0, #0
   1a7e4:	beq	1a830 <__assert_fail@plt+0x92cc>
   1a7e8:	mov	r0, r4
   1a7ec:	bl	1370c <__assert_fail@plt+0x21a8>
   1a7f0:	mov	r3, #12
   1a7f4:	str	r3, [r7]
   1a7f8:	mov	r4, #0
   1a7fc:	b	1a768 <__assert_fail@plt+0x9204>
   1a800:	ldr	r3, [fp, #8]
   1a804:	ldr	r4, [r3, r9, lsl #2]
   1a808:	ldr	r3, [r4]
   1a80c:	cmp	r3, r8
   1a810:	bne	1a828 <__assert_fail@plt+0x92c4>
   1a814:	mov	r1, r5
   1a818:	add	r0, r4, #4
   1a81c:	bl	17824 <__assert_fail@plt+0x62c0>
   1a820:	cmp	r0, #0
   1a824:	bne	1a768 <__assert_fail@plt+0x9204>
   1a828:	add	r9, r9, #1
   1a82c:	b	1a7b4 <__assert_fail@plt+0x9250>
   1a830:	str	r9, [r4, #40]	; 0x28
   1a834:	ldr	lr, [pc, #188]	; 1a8f8 <__assert_fail@plt+0x9394>
   1a838:	ldr	r9, [r5, #4]
   1a83c:	cmp	r0, r9
   1a840:	blt	1a868 <__assert_fail@plt+0x9304>
   1a844:	mov	r2, r8
   1a848:	mov	r1, r4
   1a84c:	mov	r0, r6
   1a850:	bl	15b18 <__assert_fail@plt+0x45b4>
   1a854:	cmp	r0, #0
   1a858:	beq	1a768 <__assert_fail@plt+0x9204>
   1a85c:	mov	r0, r4
   1a860:	bl	165fc <__assert_fail@plt+0x5098>
   1a864:	b	1a7f0 <__assert_fail@plt+0x928c>
   1a868:	ldr	r3, [r5, #8]
   1a86c:	ldr	r1, [r6]
   1a870:	ldr	r3, [r3, r0, lsl #2]
   1a874:	add	r1, r1, r3, lsl #3
   1a878:	ldrb	ip, [r1, #4]
   1a87c:	cmp	ip, #1
   1a880:	bne	1a890 <__assert_fail@plt+0x932c>
   1a884:	ldr	r3, [r1, #4]
   1a888:	tst	r3, lr
   1a88c:	beq	1a8f0 <__assert_fail@plt+0x938c>
   1a890:	ldrb	r3, [r1, #6]
   1a894:	ldrb	r2, [r4, #52]	; 0x34
   1a898:	cmp	ip, #2
   1a89c:	lsr	r3, r3, #4
   1a8a0:	orr	r3, r3, r2, lsr #5
   1a8a4:	and	r3, r3, #1
   1a8a8:	bic	r2, r2, #32
   1a8ac:	orr	r3, r2, r3, lsl #5
   1a8b0:	strb	r3, [r4, #52]	; 0x34
   1a8b4:	uxtbeq	r3, r3
   1a8b8:	orreq	r3, r3, #16
   1a8bc:	beq	1a8ec <__assert_fail@plt+0x9388>
   1a8c0:	cmp	ip, #4
   1a8c4:	ldrbeq	r3, [r4, #52]	; 0x34
   1a8c8:	orreq	r3, r3, #64	; 0x40
   1a8cc:	beq	1a8ec <__assert_fail@plt+0x9388>
   1a8d0:	cmp	ip, #12
   1a8d4:	beq	1a8e4 <__assert_fail@plt+0x9380>
   1a8d8:	ldr	r3, [r1, #4]
   1a8dc:	tst	r3, lr
   1a8e0:	beq	1a8f0 <__assert_fail@plt+0x938c>
   1a8e4:	ldrb	r3, [r4, #52]	; 0x34
   1a8e8:	orr	r3, r3, #128	; 0x80
   1a8ec:	strb	r3, [r4, #52]	; 0x34
   1a8f0:	add	r0, r0, #1
   1a8f4:	b	1a83c <__assert_fail@plt+0x92d8>
   1a8f8:	andeq	pc, r3, r0, lsl #30
   1a8fc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a900:	mov	r8, r0
   1a904:	mov	r6, r2
   1a908:	mov	r7, r3
   1a90c:	sub	r5, r1, #4
   1a910:	mov	r4, #0
   1a914:	cmp	r4, r7
   1a918:	blt	1a928 <__assert_fail@plt+0x93c4>
   1a91c:	mov	r0, #0
   1a920:	add	sp, sp, #16
   1a924:	pop	{r4, r5, r6, r7, r8, pc}
   1a928:	ldr	r1, [r5, #4]!
   1a92c:	cmp	r1, #0
   1a930:	ldreq	r3, [r6, r4, lsl #2]
   1a934:	streq	r3, [r5]
   1a938:	beq	1a98c <__assert_fail@plt+0x9428>
   1a93c:	ldr	r2, [r6, r4, lsl #2]
   1a940:	cmp	r2, #0
   1a944:	beq	1a98c <__assert_fail@plt+0x9428>
   1a948:	add	r2, r2, #4
   1a94c:	add	r1, r1, #4
   1a950:	add	r0, sp, #4
   1a954:	bl	17b9c <__assert_fail@plt+0x6638>
   1a958:	cmp	r0, #0
   1a95c:	str	r0, [sp]
   1a960:	bne	1a920 <__assert_fail@plt+0x93bc>
   1a964:	add	r2, sp, #4
   1a968:	mov	r1, r8
   1a96c:	mov	r0, sp
   1a970:	bl	1a74c <__assert_fail@plt+0x91e8>
   1a974:	str	r0, [r5]
   1a978:	ldr	r0, [sp, #12]
   1a97c:	bl	1370c <__assert_fail@plt+0x21a8>
   1a980:	ldr	r0, [sp]
   1a984:	cmp	r0, #0
   1a988:	bne	1a920 <__assert_fail@plt+0x93bc>
   1a98c:	add	r4, r4, #1
   1a990:	b	1a914 <__assert_fail@plt+0x93b0>
   1a994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a998:	sub	sp, sp, #36	; 0x24
   1a99c:	mov	r8, r1
   1a9a0:	mov	r1, r2
   1a9a4:	mov	r6, r0
   1a9a8:	mov	r9, r2
   1a9ac:	str	r3, [sp, #8]
   1a9b0:	bl	1549c <__assert_fail@plt+0x3f38>
   1a9b4:	cmn	r0, #1
   1a9b8:	bne	1a9c8 <__assert_fail@plt+0x9464>
   1a9bc:	mov	r0, #0
   1a9c0:	add	sp, sp, #36	; 0x24
   1a9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9c8:	mov	r3, #24
   1a9cc:	ldr	r7, [r6, #84]	; 0x54
   1a9d0:	mul	r3, r3, r0
   1a9d4:	str	r3, [sp, #4]
   1a9d8:	ldr	r3, [sp, #4]
   1a9dc:	mov	fp, #12
   1a9e0:	add	r4, r3, #24
   1a9e4:	ldr	r3, [r6, #116]	; 0x74
   1a9e8:	add	r4, r3, r4
   1a9ec:	ldr	sl, [r4, #-24]	; 0xffffffe8
   1a9f0:	mov	r0, r8
   1a9f4:	mov	r1, sl
   1a9f8:	bl	15098 <__assert_fail@plt+0x3b34>
   1a9fc:	cmp	r0, #0
   1aa00:	beq	1ab50 <__assert_fail@plt+0x95ec>
   1aa04:	ldr	r5, [r4, #-12]
   1aa08:	ldr	r2, [r4, #-16]
   1aa0c:	add	r5, r9, r5
   1aa10:	sub	r5, r5, r2
   1aa14:	cmp	r9, r5
   1aa18:	bne	1aaa8 <__assert_fail@plt+0x9544>
   1aa1c:	ldr	r2, [r7, #20]
   1aa20:	mov	r0, r8
   1aa24:	mla	r3, fp, sl, r2
   1aa28:	ldr	r3, [r3, #8]
   1aa2c:	ldr	r5, [r3]
   1aa30:	mov	r1, r5
   1aa34:	bl	15098 <__assert_fail@plt+0x3b34>
   1aa38:	cmp	r0, #0
   1aa3c:	bne	1ab50 <__assert_fail@plt+0x95ec>
   1aa40:	mov	r1, r5
   1aa44:	add	r0, sp, #20
   1aa48:	bl	15aa8 <__assert_fail@plt+0x4544>
   1aa4c:	ldr	r3, [sp, #72]	; 0x48
   1aa50:	ldr	r2, [sp, #8]
   1aa54:	add	r1, sp, #20
   1aa58:	str	r0, [sp, #16]
   1aa5c:	mov	r0, r7
   1aa60:	bl	1a654 <__assert_fail@plt+0x90f0>
   1aa64:	add	r1, sp, #20
   1aa68:	mov	r4, r0
   1aa6c:	mov	r0, r8
   1aa70:	bl	18908 <__assert_fail@plt+0x73a4>
   1aa74:	mov	r5, r0
   1aa78:	ldr	r0, [sp, #28]
   1aa7c:	bl	1370c <__assert_fail@plt+0x21a8>
   1aa80:	ldr	r0, [sp, #16]
   1aa84:	orr	r3, r4, r5
   1aa88:	orrs	r3, r3, r0
   1aa8c:	beq	1a9d8 <__assert_fail@plt+0x9474>
   1aa90:	cmp	r0, #0
   1aa94:	bne	1a9c0 <__assert_fail@plt+0x945c>
   1aa98:	cmp	r4, #0
   1aa9c:	movne	r0, r4
   1aaa0:	moveq	r0, r5
   1aaa4:	b	1a9c0 <__assert_fail@plt+0x945c>
   1aaa8:	ldr	r3, [r6, #100]	; 0x64
   1aaac:	ldr	r2, [r7, #12]
   1aab0:	ldr	r3, [r3, r5, lsl #2]
   1aab4:	ldr	sl, [r2, sl, lsl #2]
   1aab8:	cmp	r3, #0
   1aabc:	beq	1ab7c <__assert_fail@plt+0x9618>
   1aac0:	add	r3, r3, #4
   1aac4:	mov	r0, r3
   1aac8:	mov	r1, sl
   1aacc:	str	r3, [sp, #12]
   1aad0:	bl	15098 <__assert_fail@plt+0x3b34>
   1aad4:	ldr	r3, [sp, #12]
   1aad8:	cmp	r0, #0
   1aadc:	bne	1ab50 <__assert_fail@plt+0x95ec>
   1aae0:	mov	r1, r3
   1aae4:	add	r0, sp, #20
   1aae8:	bl	17b24 <__assert_fail@plt+0x65c0>
   1aaec:	mov	r1, sl
   1aaf0:	str	r0, [sp, #16]
   1aaf4:	add	r0, sp, #20
   1aaf8:	bl	18500 <__assert_fail@plt+0x6f9c>
   1aafc:	ldr	r3, [sp, #16]
   1ab00:	eor	r0, r0, #1
   1ab04:	cmp	r3, #0
   1ab08:	orrne	r0, r0, #1
   1ab0c:	tst	r0, #255	; 0xff
   1ab10:	bne	1ab64 <__assert_fail@plt+0x9600>
   1ab14:	add	r2, sp, #20
   1ab18:	mov	r1, r7
   1ab1c:	add	r0, sp, #16
   1ab20:	ldr	sl, [r6, #100]	; 0x64
   1ab24:	bl	1a74c <__assert_fail@plt+0x91e8>
   1ab28:	str	r0, [sl, r5, lsl #2]
   1ab2c:	ldr	r0, [sp, #28]
   1ab30:	bl	1370c <__assert_fail@plt+0x21a8>
   1ab34:	ldr	r3, [r6, #100]	; 0x64
   1ab38:	ldr	r3, [r3, r5, lsl #2]
   1ab3c:	cmp	r3, #0
   1ab40:	bne	1ab50 <__assert_fail@plt+0x95ec>
   1ab44:	ldr	r0, [sp, #16]
   1ab48:	cmp	r0, #0
   1ab4c:	bne	1a9c0 <__assert_fail@plt+0x945c>
   1ab50:	add	r4, r4, #24
   1ab54:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1ab58:	cmp	r3, #0
   1ab5c:	bne	1a9ec <__assert_fail@plt+0x9488>
   1ab60:	b	1a9bc <__assert_fail@plt+0x9458>
   1ab64:	ldr	r0, [sp, #28]
   1ab68:	bl	1370c <__assert_fail@plt+0x21a8>
   1ab6c:	ldr	r0, [sp, #16]
   1ab70:	cmp	r0, #0
   1ab74:	moveq	r0, #12
   1ab78:	b	1a9c0 <__assert_fail@plt+0x945c>
   1ab7c:	mov	r1, sl
   1ab80:	add	r0, sp, #20
   1ab84:	bl	15aa8 <__assert_fail@plt+0x4544>
   1ab88:	cmp	r0, #0
   1ab8c:	str	r0, [sp, #16]
   1ab90:	beq	1ab14 <__assert_fail@plt+0x95b0>
   1ab94:	b	1a9c0 <__assert_fail@plt+0x945c>
   1ab98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab9c:	mov	r9, r3
   1aba0:	ldr	sl, [r0, #84]	; 0x54
   1aba4:	sub	sp, sp, #76	; 0x4c
   1aba8:	mov	fp, #0
   1abac:	ldr	r3, [sl]
   1abb0:	str	fp, [sp, #40]	; 0x28
   1abb4:	ldr	r5, [r0, #120]	; 0x78
   1abb8:	ldr	r3, [r3, r2, lsl #3]
   1abbc:	ldr	r8, [r1, #4]
   1abc0:	str	r3, [sp, #16]
   1abc4:	ldr	r3, [sp, #116]	; 0x74
   1abc8:	mov	r4, r0
   1abcc:	add	r5, r3, r5
   1abd0:	cmp	r5, r8
   1abd4:	mov	r7, r1
   1abd8:	mov	r6, r2
   1abdc:	blt	1ac40 <__assert_fail@plt+0x96dc>
   1abe0:	mvn	r3, #-2147483648	; 0x80000000
   1abe4:	add	r5, r5, #1
   1abe8:	sub	r3, r3, r8
   1abec:	cmp	r5, r3
   1abf0:	ble	1ac00 <__assert_fail@plt+0x969c>
   1abf4:	mov	r0, #12
   1abf8:	add	sp, sp, #76	; 0x4c
   1abfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac00:	add	r3, r8, r5
   1ac04:	cmn	r3, #-1073741823	; 0xc0000001
   1ac08:	bhi	1abf4 <__assert_fail@plt+0x9690>
   1ac0c:	lsl	r1, r3, #2
   1ac10:	ldr	r0, [r7, #8]
   1ac14:	str	r3, [sp, #12]
   1ac18:	bl	2145c <__assert_fail@plt+0xfef8>
   1ac1c:	cmp	r0, #0
   1ac20:	beq	1abf4 <__assert_fail@plt+0x9690>
   1ac24:	ldr	r3, [sp, #12]
   1ac28:	str	r0, [r7, #8]
   1ac2c:	str	r3, [r7, #4]
   1ac30:	lsl	r2, r5, #2
   1ac34:	mov	r1, fp
   1ac38:	add	r0, r0, r8, lsl #2
   1ac3c:	bl	11444 <memset@plt>
   1ac40:	ldr	r5, [r7]
   1ac44:	ldr	r3, [r4, #100]	; 0x64
   1ac48:	cmp	r5, #0
   1ac4c:	ldr	fp, [r7, #8]
   1ac50:	moveq	r5, r9
   1ac54:	str	r3, [sp, #28]
   1ac58:	ldr	r3, [r4, #40]	; 0x28
   1ac5c:	str	fp, [r4, #100]	; 0x64
   1ac60:	str	r5, [r4, #40]	; 0x28
   1ac64:	ldr	r2, [r4, #88]	; 0x58
   1ac68:	sub	r1, r5, #1
   1ac6c:	mov	r0, r4
   1ac70:	str	r3, [sp, #32]
   1ac74:	bl	18c54 <__assert_fail@plt+0x76f0>
   1ac78:	cmp	r5, r9
   1ac7c:	mov	r8, r0
   1ac80:	bne	1acfc <__assert_fail@plt+0x9798>
   1ac84:	mov	r1, r6
   1ac88:	add	r0, sp, #48	; 0x30
   1ac8c:	bl	15aa8 <__assert_fail@plt+0x4544>
   1ac90:	cmp	r0, #0
   1ac94:	str	r0, [sp, #40]	; 0x28
   1ac98:	bne	1abf8 <__assert_fail@plt+0x9694>
   1ac9c:	ldr	r3, [sp, #120]	; 0x78
   1aca0:	ldr	r2, [sp, #16]
   1aca4:	add	r1, sp, #48	; 0x30
   1aca8:	mov	r0, sl
   1acac:	bl	1a654 <__assert_fail@plt+0x90f0>
   1acb0:	cmp	r0, #0
   1acb4:	str	r0, [sp, #40]	; 0x28
   1acb8:	bne	1adec <__assert_fail@plt+0x9888>
   1acbc:	ldr	r3, [sp, #52]	; 0x34
   1acc0:	cmp	r3, #0
   1acc4:	bne	1adc4 <__assert_fail@plt+0x9860>
   1acc8:	mov	r3, r8
   1accc:	add	r2, sp, #48	; 0x30
   1acd0:	mov	r1, sl
   1acd4:	add	r0, sp, #40	; 0x28
   1acd8:	bl	17cd4 <__assert_fail@plt+0x6770>
   1acdc:	subs	r6, r0, #0
   1ace0:	bne	1acf0 <__assert_fail@plt+0x978c>
   1ace4:	ldr	r3, [sp, #40]	; 0x28
   1ace8:	cmp	r3, #0
   1acec:	bne	1adec <__assert_fail@plt+0x9888>
   1acf0:	ldr	r3, [r4, #100]	; 0x64
   1acf4:	str	r6, [r3, r5, lsl #2]
   1acf8:	b	1ad38 <__assert_fail@plt+0x97d4>
   1acfc:	ldr	r6, [fp, r5, lsl #2]
   1ad00:	cmp	r6, #0
   1ad04:	beq	1ada8 <__assert_fail@plt+0x9844>
   1ad08:	ldrb	r3, [r6, #52]	; 0x34
   1ad0c:	tst	r3, #64	; 0x40
   1ad10:	beq	1ada8 <__assert_fail@plt+0x9844>
   1ad14:	add	r1, r6, #4
   1ad18:	add	r0, sp, #48	; 0x30
   1ad1c:	bl	17b24 <__assert_fail@plt+0x65c0>
   1ad20:	cmp	r0, #0
   1ad24:	str	r0, [sp, #40]	; 0x28
   1ad28:	bne	1abf8 <__assert_fail@plt+0x9694>
   1ad2c:	ldrb	r3, [r6, #52]	; 0x34
   1ad30:	tst	r3, #64	; 0x40
   1ad34:	bne	1acbc <__assert_fail@plt+0x9758>
   1ad38:	add	r3, r5, #1
   1ad3c:	lsl	r3, r3, #2
   1ad40:	str	r3, [sp, #24]
   1ad44:	mov	r3, #0
   1ad48:	str	r3, [sp, #12]
   1ad4c:	ldr	r3, [sp, #116]	; 0x74
   1ad50:	cmp	r5, r3
   1ad54:	blt	1b010 <__assert_fail@plt+0x9aac>
   1ad58:	ldr	r0, [sp, #56]	; 0x38
   1ad5c:	bl	1370c <__assert_fail@plt+0x21a8>
   1ad60:	ldr	r3, [r4, #100]	; 0x64
   1ad64:	ldr	r2, [sp, #116]	; 0x74
   1ad68:	ldr	r0, [r3, r2, lsl #2]
   1ad6c:	ldr	r3, [sp, #28]
   1ad70:	cmp	r0, #0
   1ad74:	str	r5, [r7]
   1ad78:	addne	r0, r0, #4
   1ad7c:	str	r3, [r4, #100]	; 0x64
   1ad80:	ldr	r3, [sp, #32]
   1ad84:	cmp	r0, #0
   1ad88:	str	r3, [r4, #40]	; 0x28
   1ad8c:	moveq	r0, #1
   1ad90:	beq	1abf8 <__assert_fail@plt+0x9694>
   1ad94:	ldr	r1, [sp, #112]	; 0x70
   1ad98:	bl	15098 <__assert_fail@plt+0x3b34>
   1ad9c:	clz	r0, r0
   1ada0:	lsr	r0, r0, #5
   1ada4:	b	1abf8 <__assert_fail@plt+0x9694>
   1ada8:	mov	r3, #0
   1adac:	cmp	r6, r3
   1adb0:	str	r3, [sp, #48]	; 0x30
   1adb4:	str	r3, [sp, #52]	; 0x34
   1adb8:	str	r3, [sp, #56]	; 0x38
   1adbc:	bne	1ad2c <__assert_fail@plt+0x97c8>
   1adc0:	b	1ad38 <__assert_fail@plt+0x97d4>
   1adc4:	ldr	r3, [sp, #120]	; 0x78
   1adc8:	mov	r2, r5
   1adcc:	str	r3, [sp]
   1add0:	add	r1, sp, #48	; 0x30
   1add4:	ldr	r3, [sp, #16]
   1add8:	mov	r0, r4
   1addc:	bl	1a994 <__assert_fail@plt+0x9430>
   1ade0:	cmp	r0, #0
   1ade4:	str	r0, [sp, #40]	; 0x28
   1ade8:	beq	1acc8 <__assert_fail@plt+0x9764>
   1adec:	ldr	r0, [sp, #56]	; 0x38
   1adf0:	bl	1370c <__assert_fail@plt+0x21a8>
   1adf4:	ldr	r0, [sp, #40]	; 0x28
   1adf8:	b	1abf8 <__assert_fail@plt+0x9694>
   1adfc:	ldr	r3, [r6, #24]
   1ae00:	ldr	r2, [sp, #20]
   1ae04:	ldr	fp, [r3, r2, lsl #2]
   1ae08:	ldr	r3, [r9]
   1ae0c:	lsl	r8, fp, #3
   1ae10:	add	r3, r3, r8
   1ae14:	ldrb	r3, [r3, #6]
   1ae18:	tst	r3, #16
   1ae1c:	bne	1ae48 <__assert_fail@plt+0x98e4>
   1ae20:	ldr	r1, [r9]
   1ae24:	mov	r2, r5
   1ae28:	add	r1, r1, r8
   1ae2c:	mov	r0, r4
   1ae30:	bl	19374 <__assert_fail@plt+0x7e10>
   1ae34:	cmp	r0, #0
   1ae38:	bne	1afd8 <__assert_fail@plt+0x9a74>
   1ae3c:	ldr	r3, [sp, #20]
   1ae40:	add	r3, r3, #1
   1ae44:	b	1b074 <__assert_fail@plt+0x9b10>
   1ae48:	mov	r3, r5
   1ae4c:	mov	r2, r4
   1ae50:	mov	r1, fp
   1ae54:	mov	r0, r9
   1ae58:	bl	175a8 <__assert_fail@plt+0x6044>
   1ae5c:	cmp	r0, #1
   1ae60:	ble	1b004 <__assert_fail@plt+0x9aa0>
   1ae64:	ldr	r2, [r4, #100]	; 0x64
   1ae68:	add	r8, r5, r0
   1ae6c:	ldr	r3, [r9, #12]
   1ae70:	ldr	r1, [r2, r8, lsl #2]
   1ae74:	mov	r2, #0
   1ae78:	cmp	r1, r2
   1ae7c:	ldr	r3, [r3, fp, lsl #2]
   1ae80:	str	r2, [sp, #64]	; 0x40
   1ae84:	beq	1af84 <__assert_fail@plt+0x9a20>
   1ae88:	add	r1, r1, #4
   1ae8c:	add	r0, sp, #60	; 0x3c
   1ae90:	str	r3, [sp, #36]	; 0x24
   1ae94:	bl	18908 <__assert_fail@plt+0x73a4>
   1ae98:	ldr	r3, [sp, #36]	; 0x24
   1ae9c:	cmp	r0, #0
   1aea0:	str	r0, [sp, #44]	; 0x2c
   1aea4:	beq	1af84 <__assert_fail@plt+0x9a20>
   1aea8:	ldr	r0, [sp, #68]	; 0x44
   1aeac:	bl	1370c <__assert_fail@plt+0x21a8>
   1aeb0:	ldr	r3, [sp, #44]	; 0x2c
   1aeb4:	cmp	r3, #0
   1aeb8:	str	r3, [sp, #40]	; 0x28
   1aebc:	bne	1adec <__assert_fail@plt+0x9888>
   1aec0:	ldr	r3, [sp, #52]	; 0x34
   1aec4:	add	r6, r5, #1
   1aec8:	cmp	r3, #0
   1aecc:	beq	1af18 <__assert_fail@plt+0x99b4>
   1aed0:	ldr	r3, [sp, #120]	; 0x78
   1aed4:	ldr	r2, [sp, #16]
   1aed8:	add	r1, sp, #48	; 0x30
   1aedc:	mov	r0, sl
   1aee0:	bl	1a654 <__assert_fail@plt+0x90f0>
   1aee4:	cmp	r0, #0
   1aee8:	str	r0, [sp, #40]	; 0x28
   1aeec:	bne	1adec <__assert_fail@plt+0x9888>
   1aef0:	ldr	r3, [sp, #120]	; 0x78
   1aef4:	mov	r2, r6
   1aef8:	str	r3, [sp]
   1aefc:	add	r1, sp, #48	; 0x30
   1af00:	ldr	r3, [sp, #16]
   1af04:	mov	r0, r4
   1af08:	bl	1a994 <__assert_fail@plt+0x9430>
   1af0c:	cmp	r0, #0
   1af10:	str	r0, [sp, #40]	; 0x28
   1af14:	bne	1adec <__assert_fail@plt+0x9888>
   1af18:	ldr	r2, [r4, #88]	; 0x58
   1af1c:	mov	r1, r5
   1af20:	mov	r0, r4
   1af24:	bl	18c54 <__assert_fail@plt+0x76f0>
   1af28:	add	r2, sp, #48	; 0x30
   1af2c:	mov	r1, sl
   1af30:	mov	r3, r0
   1af34:	add	r0, sp, #40	; 0x28
   1af38:	bl	17cd4 <__assert_fail@plt+0x6770>
   1af3c:	subs	r6, r0, #0
   1af40:	bne	1af50 <__assert_fail@plt+0x99ec>
   1af44:	ldr	r3, [sp, #40]	; 0x28
   1af48:	cmp	r3, #0
   1af4c:	bne	1adec <__assert_fail@plt+0x9888>
   1af50:	ldr	r3, [r4, #100]	; 0x64
   1af54:	ldr	r2, [sp, #24]
   1af58:	cmp	r6, #0
   1af5c:	add	r5, r5, #1
   1af60:	str	r6, [r3, r2]
   1af64:	ldreq	r3, [sp, #12]
   1af68:	movne	r3, #0
   1af6c:	addeq	r3, r3, #1
   1af70:	str	r3, [sp, #12]
   1af74:	ldr	r3, [sp, #24]
   1af78:	add	r3, r3, #4
   1af7c:	str	r3, [sp, #24]
   1af80:	b	1ad4c <__assert_fail@plt+0x97e8>
   1af84:	mov	r1, r3
   1af88:	add	r0, sp, #60	; 0x3c
   1af8c:	bl	18500 <__assert_fail@plt+0x6f9c>
   1af90:	cmp	r0, #0
   1af94:	bne	1afa8 <__assert_fail@plt+0x9a44>
   1af98:	ldr	r0, [sp, #68]	; 0x44
   1af9c:	bl	1370c <__assert_fail@plt+0x21a8>
   1afa0:	mov	r3, #12
   1afa4:	b	1aeb4 <__assert_fail@plt+0x9950>
   1afa8:	ldr	r3, [r4, #100]	; 0x64
   1afac:	add	r2, sp, #60	; 0x3c
   1afb0:	mov	r1, r9
   1afb4:	add	r0, sp, #44	; 0x2c
   1afb8:	str	r3, [sp, #36]	; 0x24
   1afbc:	bl	1a74c <__assert_fail@plt+0x91e8>
   1afc0:	ldr	r3, [sp, #36]	; 0x24
   1afc4:	str	r0, [r3, r8, lsl #2]
   1afc8:	ldr	r3, [r4, #100]	; 0x64
   1afcc:	ldr	r3, [r3, r8, lsl #2]
   1afd0:	cmp	r3, #0
   1afd4:	beq	1aff4 <__assert_fail@plt+0x9a90>
   1afd8:	ldr	r3, [r9, #12]
   1afdc:	add	r0, sp, #48	; 0x30
   1afe0:	ldr	r1, [r3, fp, lsl #2]
   1afe4:	bl	18500 <__assert_fail@plt+0x6f9c>
   1afe8:	cmp	r0, #0
   1afec:	bne	1ae3c <__assert_fail@plt+0x98d8>
   1aff0:	b	1af98 <__assert_fail@plt+0x9a34>
   1aff4:	ldr	r3, [sp, #44]	; 0x2c
   1aff8:	cmp	r3, #0
   1affc:	beq	1afd8 <__assert_fail@plt+0x9a74>
   1b000:	b	1aea8 <__assert_fail@plt+0x9944>
   1b004:	cmp	r0, #0
   1b008:	bne	1afd8 <__assert_fail@plt+0x9a74>
   1b00c:	b	1ae20 <__assert_fail@plt+0x98bc>
   1b010:	ldr	r3, [r4, #120]	; 0x78
   1b014:	ldr	r2, [sp, #12]
   1b018:	cmp	r2, r3
   1b01c:	bgt	1ad58 <__assert_fail@plt+0x97f4>
   1b020:	mov	r3, #0
   1b024:	str	r3, [sp, #52]	; 0x34
   1b028:	ldr	r2, [sp, #24]
   1b02c:	ldr	r3, [r4, #100]	; 0x64
   1b030:	ldr	r1, [r3, r2]
   1b034:	cmp	r1, #0
   1b038:	beq	1b098 <__assert_fail@plt+0x9b34>
   1b03c:	add	r1, r1, #4
   1b040:	add	r0, sp, #48	; 0x30
   1b044:	bl	18908 <__assert_fail@plt+0x73a4>
   1b048:	cmp	r0, #0
   1b04c:	str	r0, [sp, #40]	; 0x28
   1b050:	bne	1adec <__assert_fail@plt+0x9888>
   1b054:	cmp	r6, #0
   1b058:	beq	1aec0 <__assert_fail@plt+0x995c>
   1b05c:	ldr	r9, [r4, #84]	; 0x54
   1b060:	mov	r3, #0
   1b064:	str	r3, [sp, #44]	; 0x2c
   1b068:	str	r3, [sp, #60]	; 0x3c
   1b06c:	str	r3, [sp, #64]	; 0x40
   1b070:	str	r3, [sp, #68]	; 0x44
   1b074:	str	r3, [sp, #20]
   1b078:	ldr	r2, [sp, #20]
   1b07c:	ldr	r3, [r6, #20]
   1b080:	cmp	r2, r3
   1b084:	blt	1adfc <__assert_fail@plt+0x9898>
   1b088:	ldr	r0, [sp, #68]	; 0x44
   1b08c:	bl	1370c <__assert_fail@plt+0x21a8>
   1b090:	mov	r3, #0
   1b094:	b	1aeb4 <__assert_fail@plt+0x9950>
   1b098:	cmp	r6, #0
   1b09c:	bne	1b05c <__assert_fail@plt+0x9af8>
   1b0a0:	b	1af18 <__assert_fail@plt+0x99b4>
   1b0a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0a8:	sub	sp, sp, #20
   1b0ac:	mov	r8, r2
   1b0b0:	ldr	r5, [sp, #56]	; 0x38
   1b0b4:	mov	sl, r3
   1b0b8:	mov	r3, #8
   1b0bc:	str	r3, [sp, #8]
   1b0c0:	str	r5, [sp, #4]
   1b0c4:	str	sl, [sp]
   1b0c8:	mov	r7, r1
   1b0cc:	ldm	r2, {r2, r3}
   1b0d0:	add	r1, r8, #8
   1b0d4:	mov	r4, r0
   1b0d8:	bl	1ab98 <__assert_fail@plt+0x9634>
   1b0dc:	subs	fp, r0, #0
   1b0e0:	bne	1b120 <__assert_fail@plt+0x9bbc>
   1b0e4:	ldr	r3, [r4, #112]	; 0x70
   1b0e8:	ldr	r2, [r4, #108]	; 0x6c
   1b0ec:	ldr	r9, [r7]
   1b0f0:	cmp	r2, r3
   1b0f4:	ldr	r6, [r8, #4]
   1b0f8:	blt	1b158 <__assert_fail@plt+0x9bf4>
   1b0fc:	mov	r1, #48	; 0x30
   1b100:	ldr	r0, [r4, #116]	; 0x74
   1b104:	mul	r1, r1, r3
   1b108:	bl	2145c <__assert_fail@plt+0xfef8>
   1b10c:	subs	r3, r0, #0
   1b110:	bne	1b12c <__assert_fail@plt+0x9bc8>
   1b114:	ldr	r0, [r4, #116]	; 0x74
   1b118:	bl	1370c <__assert_fail@plt+0x21a8>
   1b11c:	mov	fp, #12
   1b120:	mov	r0, fp
   1b124:	add	sp, sp, #20
   1b128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b12c:	ldr	r2, [r4, #112]	; 0x70
   1b130:	ldr	ip, [r4, #108]	; 0x6c
   1b134:	mov	r0, #24
   1b138:	str	r3, [r4, #116]	; 0x74
   1b13c:	mul	r2, r0, r2
   1b140:	mov	r1, fp
   1b144:	mla	r0, r0, ip, r3
   1b148:	bl	11444 <memset@plt>
   1b14c:	ldr	r3, [r4, #112]	; 0x70
   1b150:	lsl	r3, r3, #1
   1b154:	str	r3, [r4, #112]	; 0x70
   1b158:	ldr	r3, [r4, #108]	; 0x6c
   1b15c:	cmp	r3, #0
   1b160:	ble	1b188 <__assert_fail@plt+0x9c24>
   1b164:	mov	r2, #24
   1b168:	ldr	r1, [r4, #116]	; 0x74
   1b16c:	mul	r2, r2, r3
   1b170:	sub	r2, r2, #24
   1b174:	add	r2, r1, r2
   1b178:	ldr	r1, [r2, #4]
   1b17c:	cmp	r5, r1
   1b180:	moveq	r1, #1
   1b184:	strbeq	r1, [r2, #20]
   1b188:	mov	r1, #24
   1b18c:	ldr	r0, [r4, #116]	; 0x74
   1b190:	mul	r1, r1, r3
   1b194:	cmp	r9, r6
   1b198:	add	r2, r0, r1
   1b19c:	str	sl, [r0, r1]
   1b1a0:	add	r3, r3, #1
   1b1a4:	movne	r1, #0
   1b1a8:	mvneq	r1, #0
   1b1ac:	stmib	r2, {r5, r9}
   1b1b0:	str	r6, [r2, #12]
   1b1b4:	str	r1, [r2, #16]
   1b1b8:	str	r3, [r4, #108]	; 0x6c
   1b1bc:	mov	r3, #0
   1b1c0:	strb	r3, [r2, #20]
   1b1c4:	ldr	r3, [r4, #120]	; 0x78
   1b1c8:	sub	r6, r6, r9
   1b1cc:	ldr	r1, [r8, #4]
   1b1d0:	cmp	r3, r6
   1b1d4:	add	r5, r5, r1
   1b1d8:	strlt	r6, [r4, #120]	; 0x78
   1b1dc:	ldr	r1, [r7]
   1b1e0:	mov	r0, r4
   1b1e4:	sub	r1, r5, r1
   1b1e8:	add	sp, sp, #20
   1b1ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1f0:	b	16b4c <__assert_fail@plt+0x55e8>
   1b1f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1f8:	sub	sp, sp, #84	; 0x54
   1b1fc:	ldr	sl, [r0, #40]	; 0x28
   1b200:	ldr	fp, [r0, #84]	; 0x54
   1b204:	mov	r4, r0
   1b208:	lsl	r3, sl, #2
   1b20c:	str	r3, [sp, #44]	; 0x2c
   1b210:	mov	r3, #0
   1b214:	str	r1, [sp, #56]	; 0x38
   1b218:	str	r3, [sp, #24]
   1b21c:	ldr	r3, [sp, #56]	; 0x38
   1b220:	ldr	r2, [sp, #24]
   1b224:	ldr	r3, [r3, #4]
   1b228:	cmp	r2, r3
   1b22c:	movge	r3, #0
   1b230:	strge	r3, [sp, #64]	; 0x40
   1b234:	bge	1b7f0 <__assert_fail@plt+0xa28c>
   1b238:	ldr	r3, [sp, #56]	; 0x38
   1b23c:	ldr	r2, [sp, #24]
   1b240:	ldr	r3, [r3, #8]
   1b244:	ldr	r3, [r3, r2, lsl #2]
   1b248:	str	r3, [sp, #20]
   1b24c:	ldr	r2, [sp, #20]
   1b250:	ldr	r3, [fp]
   1b254:	add	r3, r3, r2, lsl #3
   1b258:	ldrb	r2, [r3, #4]
   1b25c:	cmp	r2, #4
   1b260:	beq	1b270 <__assert_fail@plt+0x9d0c>
   1b264:	ldr	r3, [sp, #24]
   1b268:	add	r3, r3, #1
   1b26c:	b	1b218 <__assert_fail@plt+0x9cb4>
   1b270:	ldr	r5, [r3, #4]
   1b274:	ldr	r3, [pc, #1444]	; 1b820 <__assert_fail@plt+0xa2bc>
   1b278:	tst	r5, r3
   1b27c:	beq	1b2d8 <__assert_fail@plt+0x9d74>
   1b280:	ldr	r2, [r4, #88]	; 0x58
   1b284:	mov	r1, sl
   1b288:	mov	r0, r4
   1b28c:	bl	18c54 <__assert_fail@plt+0x76f0>
   1b290:	ldr	r3, [pc, #1420]	; 1b824 <__assert_fail@plt+0xa2c0>
   1b294:	and	r3, r3, r5, lsr #8
   1b298:	tst	r3, #4
   1b29c:	beq	1b2a8 <__assert_fail@plt+0x9d44>
   1b2a0:	tst	r0, #1
   1b2a4:	beq	1b264 <__assert_fail@plt+0x9d00>
   1b2a8:	tst	r3, #8
   1b2ac:	beq	1b2b8 <__assert_fail@plt+0x9d54>
   1b2b0:	tst	r0, #1
   1b2b4:	bne	1b264 <__assert_fail@plt+0x9d00>
   1b2b8:	tst	r3, #32
   1b2bc:	beq	1b2c8 <__assert_fail@plt+0x9d64>
   1b2c0:	tst	r0, #2
   1b2c4:	beq	1b264 <__assert_fail@plt+0x9d00>
   1b2c8:	tst	r3, #128	; 0x80
   1b2cc:	beq	1b2d8 <__assert_fail@plt+0x9d74>
   1b2d0:	tst	r0, #8
   1b2d4:	beq	1b264 <__assert_fail@plt+0x9d00>
   1b2d8:	ldr	r3, [r4, #108]	; 0x6c
   1b2dc:	mov	r1, sl
   1b2e0:	mov	r0, r4
   1b2e4:	str	r3, [sp, #28]
   1b2e8:	bl	1549c <__assert_fail@plt+0x3f38>
   1b2ec:	cmn	r0, #1
   1b2f0:	beq	1b3a0 <__assert_fail@plt+0x9e3c>
   1b2f4:	mov	r3, #24
   1b2f8:	mul	r0, r3, r0
   1b2fc:	add	r3, r0, r3
   1b300:	ldr	r0, [r4, #116]	; 0x74
   1b304:	add	r0, r0, r3
   1b308:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1b30c:	ldr	r2, [sp, #20]
   1b310:	cmp	r2, r3
   1b314:	bne	1b390 <__assert_fail@plt+0x9e2c>
   1b318:	mov	r0, #0
   1b31c:	cmp	r0, #0
   1b320:	str	r0, [sp, #64]	; 0x40
   1b324:	bne	1b7f0 <__assert_fail@plt+0xa28c>
   1b328:	ldr	r3, [sp, #20]
   1b32c:	ldr	r2, [sp, #20]
   1b330:	mov	r7, #24
   1b334:	lsl	r3, r3, #2
   1b338:	str	r3, [sp, #32]
   1b33c:	mov	r3, #12
   1b340:	str	r0, [sp, #48]	; 0x30
   1b344:	mul	r3, r3, r2
   1b348:	str	r3, [sp, #40]	; 0x28
   1b34c:	ldr	r3, [sp, #28]
   1b350:	mul	r7, r7, r3
   1b354:	ldr	r3, [r4, #108]	; 0x6c
   1b358:	ldr	r2, [sp, #28]
   1b35c:	cmp	r2, r3
   1b360:	bge	1b264 <__assert_fail@plt+0x9d00>
   1b364:	ldr	r2, [r4, #116]	; 0x74
   1b368:	ldr	r1, [sp, #20]
   1b36c:	add	r3, r2, r7
   1b370:	ldr	r2, [r2, r7]
   1b374:	cmp	r1, r2
   1b378:	beq	1b6b0 <__assert_fail@plt+0xa14c>
   1b37c:	ldr	r3, [sp, #28]
   1b380:	add	r7, r7, #24
   1b384:	add	r3, r3, #1
   1b388:	str	r3, [sp, #28]
   1b38c:	b	1b354 <__assert_fail@plt+0x9df0>
   1b390:	add	r0, r0, #24
   1b394:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   1b398:	cmp	r3, #0
   1b39c:	bne	1b308 <__assert_fail@plt+0x9da4>
   1b3a0:	ldr	r3, [r4, #84]	; 0x54
   1b3a4:	ldr	r2, [sp, #20]
   1b3a8:	str	r3, [sp, #40]	; 0x28
   1b3ac:	ldr	r3, [r3]
   1b3b0:	ldr	r8, [r4, #4]
   1b3b4:	ldr	r3, [r3, r2, lsl #3]
   1b3b8:	str	r3, [sp, #48]	; 0x30
   1b3bc:	mov	r3, #0
   1b3c0:	str	r3, [sp, #32]
   1b3c4:	ldr	r2, [sp, #32]
   1b3c8:	ldr	r3, [r4, #124]	; 0x7c
   1b3cc:	cmp	r2, r3
   1b3d0:	bge	1b318 <__assert_fail@plt+0x9db4>
   1b3d4:	ldr	r3, [r4, #132]	; 0x84
   1b3d8:	ldr	r2, [sp, #32]
   1b3dc:	ldr	r5, [r3, r2, lsl #2]
   1b3e0:	ldr	r3, [sp, #40]	; 0x28
   1b3e4:	ldr	r2, [r5, #4]
   1b3e8:	ldr	r3, [r3]
   1b3ec:	ldr	r3, [r3, r2, lsl #3]
   1b3f0:	ldr	r2, [sp, #48]	; 0x30
   1b3f4:	cmp	r2, r3
   1b3f8:	moveq	r7, sl
   1b3fc:	ldreq	r6, [r5]
   1b400:	moveq	r9, #0
   1b404:	beq	1b464 <__assert_fail@plt+0x9f00>
   1b408:	ldr	r3, [sp, #32]
   1b40c:	add	r3, r3, #1
   1b410:	b	1b3c0 <__assert_fail@plt+0x9e5c>
   1b414:	ldr	r3, [r5, #20]
   1b418:	ldr	r3, [r3, r9, lsl #2]
   1b41c:	str	r3, [sp, #52]	; 0x34
   1b420:	ldr	r3, [r3, #4]
   1b424:	str	r3, [sp, #36]	; 0x24
   1b428:	sub	r3, r3, r6
   1b42c:	cmp	r3, #0
   1b430:	bgt	1b474 <__assert_fail@plt+0x9f10>
   1b434:	add	r7, r7, r3
   1b438:	str	sl, [sp]
   1b43c:	ldr	r3, [sp, #20]
   1b440:	ldr	r2, [sp, #52]	; 0x34
   1b444:	mov	r1, r5
   1b448:	mov	r0, r4
   1b44c:	bl	1b0a4 <__assert_fail@plt+0x9b40>
   1b450:	ldr	r8, [r4, #4]
   1b454:	cmp	r0, #1
   1b458:	bhi	1b31c <__assert_fail@plt+0x9db8>
   1b45c:	ldr	r6, [sp, #36]	; 0x24
   1b460:	add	r9, r9, #1
   1b464:	ldr	r3, [r5, #16]
   1b468:	cmp	r9, r3
   1b46c:	blt	1b414 <__assert_fail@plt+0x9eb0>
   1b470:	b	1b4cc <__assert_fail@plt+0x9f68>
   1b474:	ldr	r2, [r4, #28]
   1b478:	add	r1, r3, r7
   1b47c:	cmp	r1, r2
   1b480:	ble	1b4ac <__assert_fail@plt+0x9f48>
   1b484:	ldr	r2, [r4, #48]	; 0x30
   1b488:	str	r3, [sp, #60]	; 0x3c
   1b48c:	cmp	r1, r2
   1b490:	bgt	1b4cc <__assert_fail@plt+0x9f68>
   1b494:	mov	r0, r4
   1b498:	bl	16b4c <__assert_fail@plt+0x55e8>
   1b49c:	cmp	r0, #0
   1b4a0:	bne	1b31c <__assert_fail@plt+0x9db8>
   1b4a4:	ldr	r8, [r4, #4]
   1b4a8:	ldr	r3, [sp, #60]	; 0x3c
   1b4ac:	mov	r2, r3
   1b4b0:	add	r1, r8, r6
   1b4b4:	add	r0, r8, r7
   1b4b8:	str	r3, [sp, #60]	; 0x3c
   1b4bc:	bl	112b8 <memcmp@plt>
   1b4c0:	ldr	r3, [sp, #60]	; 0x3c
   1b4c4:	cmp	r0, #0
   1b4c8:	beq	1b434 <__assert_fail@plt+0x9ed0>
   1b4cc:	ldr	r3, [r5, #16]
   1b4d0:	cmp	r9, r3
   1b4d4:	blt	1b408 <__assert_fail@plt+0x9ea4>
   1b4d8:	cmp	r9, #0
   1b4dc:	addgt	r6, r6, #1
   1b4e0:	lsl	r3, r6, #2
   1b4e4:	cmp	sl, r6
   1b4e8:	str	r3, [sp, #36]	; 0x24
   1b4ec:	blt	1b408 <__assert_fail@plt+0x9ea4>
   1b4f0:	ldr	r3, [r5]
   1b4f4:	sub	r3, r6, r3
   1b4f8:	cmp	r3, #0
   1b4fc:	ble	1b54c <__assert_fail@plt+0x9fe8>
   1b500:	ldr	r3, [r4, #28]
   1b504:	cmp	r3, r7
   1b508:	bgt	1b530 <__assert_fail@plt+0x9fcc>
   1b50c:	ldr	r3, [r4, #48]	; 0x30
   1b510:	cmp	r7, r3
   1b514:	bge	1b408 <__assert_fail@plt+0x9ea4>
   1b518:	add	r1, r7, #1
   1b51c:	mov	r0, r4
   1b520:	bl	16288 <__assert_fail@plt+0x4d24>
   1b524:	cmp	r0, #0
   1b528:	bne	1b31c <__assert_fail@plt+0x9db8>
   1b52c:	ldr	r8, [r4, #4]
   1b530:	add	r3, r8, r6
   1b534:	ldrb	r1, [r8, r7]
   1b538:	ldrb	r3, [r3, #-1]
   1b53c:	add	r2, r7, #1
   1b540:	cmp	r1, r3
   1b544:	bne	1b408 <__assert_fail@plt+0x9ea4>
   1b548:	mov	r7, r2
   1b54c:	ldr	r3, [r4, #100]	; 0x64
   1b550:	ldr	r2, [sp, #36]	; 0x24
   1b554:	ldr	r2, [r3, r2]
   1b558:	cmp	r2, #0
   1b55c:	movne	r3, #0
   1b560:	ldrne	r0, [r2, #8]
   1b564:	bne	1b5ac <__assert_fail@plt+0xa048>
   1b568:	ldr	r3, [sp, #36]	; 0x24
   1b56c:	add	r6, r6, #1
   1b570:	add	r3, r3, #4
   1b574:	b	1b4e4 <__assert_fail@plt+0x9f80>
   1b578:	ldr	r1, [r2, #12]
   1b57c:	ldr	r9, [r1, r3, lsl #2]
   1b580:	ldr	r1, [sp, #40]	; 0x28
   1b584:	ldr	r1, [r1]
   1b588:	add	ip, r1, r9, lsl #3
   1b58c:	ldrb	ip, [ip, #4]
   1b590:	cmp	ip, #9
   1b594:	bne	1b5a8 <__assert_fail@plt+0xa044>
   1b598:	ldr	r1, [r1, r9, lsl #3]
   1b59c:	ldr	ip, [sp, #48]	; 0x30
   1b5a0:	cmp	ip, r1
   1b5a4:	beq	1b5b8 <__assert_fail@plt+0xa054>
   1b5a8:	add	r3, r3, #1
   1b5ac:	cmp	r3, r0
   1b5b0:	blt	1b578 <__assert_fail@plt+0xa014>
   1b5b4:	b	1b568 <__assert_fail@plt+0xa004>
   1b5b8:	cmn	r9, #1
   1b5bc:	beq	1b568 <__assert_fail@plt+0xa004>
   1b5c0:	ldr	r3, [r5, #8]
   1b5c4:	cmp	r3, #0
   1b5c8:	beq	1b688 <__assert_fail@plt+0xa124>
   1b5cc:	mov	r3, #9
   1b5d0:	str	r3, [sp, #8]
   1b5d4:	str	r6, [sp, #4]
   1b5d8:	str	r9, [sp]
   1b5dc:	mov	r0, r4
   1b5e0:	ldr	r3, [r5]
   1b5e4:	ldr	r2, [r5, #4]
   1b5e8:	ldr	r1, [r5, #8]
   1b5ec:	bl	1ab98 <__assert_fail@plt+0x9634>
   1b5f0:	cmp	r0, #1
   1b5f4:	beq	1b568 <__assert_fail@plt+0xa004>
   1b5f8:	cmp	r0, #0
   1b5fc:	bne	1b31c <__assert_fail@plt+0x9db8>
   1b600:	ldr	r8, [r5, #16]
   1b604:	ldr	r3, [r5, #12]
   1b608:	cmp	r8, r3
   1b60c:	bne	1b634 <__assert_fail@plt+0xa0d0>
   1b610:	lsl	r8, r8, #1
   1b614:	add	r8, r8, #1
   1b618:	ldr	r0, [r5, #20]
   1b61c:	lsl	r1, r8, #2
   1b620:	bl	2145c <__assert_fail@plt+0xfef8>
   1b624:	cmp	r0, #0
   1b628:	beq	1b6a8 <__assert_fail@plt+0xa144>
   1b62c:	str	r0, [r5, #20]
   1b630:	str	r8, [r5, #12]
   1b634:	mov	r1, #20
   1b638:	mov	r0, #1
   1b63c:	bl	213d4 <__assert_fail@plt+0xfe70>
   1b640:	subs	r2, r0, #0
   1b644:	beq	1b6a8 <__assert_fail@plt+0xa144>
   1b648:	ldr	r3, [r5, #16]
   1b64c:	ldr	r1, [r5, #20]
   1b650:	mov	r0, r4
   1b654:	str	r2, [r1, r3, lsl #2]
   1b658:	add	r3, r3, #1
   1b65c:	str	r9, [r2]
   1b660:	str	r6, [r2, #4]
   1b664:	mov	r1, r5
   1b668:	str	r3, [r5, #16]
   1b66c:	str	sl, [sp]
   1b670:	ldr	r3, [sp, #20]
   1b674:	bl	1b0a4 <__assert_fail@plt+0x9b40>
   1b678:	ldr	r8, [r4, #4]
   1b67c:	cmp	r0, #1
   1b680:	bls	1b568 <__assert_fail@plt+0xa004>
   1b684:	b	1b31c <__assert_fail@plt+0x9db8>
   1b688:	ldr	r1, [r5]
   1b68c:	mov	r0, #12
   1b690:	sub	r1, r6, r1
   1b694:	add	r1, r1, #1
   1b698:	bl	213d4 <__assert_fail@plt+0xfe70>
   1b69c:	cmp	r0, #0
   1b6a0:	str	r0, [r5, #8]
   1b6a4:	bne	1b5cc <__assert_fail@plt+0xa068>
   1b6a8:	mov	r0, #12
   1b6ac:	b	1b31c <__assert_fail@plt+0x9db8>
   1b6b0:	ldr	r2, [r3, #4]
   1b6b4:	cmp	sl, r2
   1b6b8:	bne	1b37c <__assert_fail@plt+0x9e18>
   1b6bc:	ldr	r5, [r3, #12]
   1b6c0:	ldr	r3, [r3, #8]
   1b6c4:	mov	r0, r4
   1b6c8:	subs	r2, r5, r3
   1b6cc:	str	r2, [sp, #36]	; 0x24
   1b6d0:	ldreq	r1, [sp, #40]	; 0x28
   1b6d4:	ldreq	r2, [fp, #20]
   1b6d8:	ldrne	r2, [fp, #12]
   1b6dc:	addeq	r2, r2, r1
   1b6e0:	ldrne	r1, [sp, #32]
   1b6e4:	ldreq	r2, [r2, #8]
   1b6e8:	add	r5, sl, r5
   1b6ec:	ldrne	r6, [r2, r1]
   1b6f0:	ldreq	r6, [r2]
   1b6f4:	mov	r1, #12
   1b6f8:	ldr	r2, [fp, #24]
   1b6fc:	sub	r5, r5, r3
   1b700:	mla	r6, r1, r6, r2
   1b704:	ldr	r2, [r4, #88]	; 0x58
   1b708:	sub	r1, r5, #1
   1b70c:	bl	18c54 <__assert_fail@plt+0x76f0>
   1b710:	ldr	r8, [r4, #100]	; 0x64
   1b714:	ldr	r2, [sp, #44]	; 0x2c
   1b718:	ldr	r1, [r8, r5, lsl #2]
   1b71c:	ldr	r2, [r8, r2]
   1b720:	cmp	r2, #0
   1b724:	ldrne	r9, [r2, #8]
   1b728:	ldreq	r9, [sp, #48]	; 0x30
   1b72c:	cmp	r1, #0
   1b730:	mov	r3, r0
   1b734:	bne	1b7c4 <__assert_fail@plt+0xa260>
   1b738:	mov	r2, r6
   1b73c:	mov	r1, fp
   1b740:	add	r0, sp, #64	; 0x40
   1b744:	bl	17cd4 <__assert_fail@plt+0x6770>
   1b748:	str	r0, [r8, r5, lsl #2]
   1b74c:	ldr	r3, [r4, #100]	; 0x64
   1b750:	ldr	r3, [r3, r5, lsl #2]
   1b754:	cmp	r3, #0
   1b758:	bne	1b768 <__assert_fail@plt+0xa204>
   1b75c:	ldr	r3, [sp, #64]	; 0x40
   1b760:	cmp	r3, #0
   1b764:	bne	1b7f0 <__assert_fail@plt+0xa28c>
   1b768:	ldr	r3, [sp, #36]	; 0x24
   1b76c:	cmp	r3, #0
   1b770:	bne	1b37c <__assert_fail@plt+0x9e18>
   1b774:	ldr	r3, [r4, #100]	; 0x64
   1b778:	ldr	r2, [sp, #44]	; 0x2c
   1b77c:	ldr	r3, [r3, r2]
   1b780:	ldr	r3, [r3, #8]
   1b784:	cmp	r9, r3
   1b788:	bge	1b37c <__assert_fail@plt+0x9e18>
   1b78c:	mov	r2, sl
   1b790:	mov	r1, r6
   1b794:	mov	r0, r4
   1b798:	bl	16a48 <__assert_fail@plt+0x54e4>
   1b79c:	cmp	r0, #0
   1b7a0:	str	r0, [sp, #64]	; 0x40
   1b7a4:	bne	1b7f0 <__assert_fail@plt+0xa28c>
   1b7a8:	mov	r1, r6
   1b7ac:	mov	r0, r4
   1b7b0:	bl	1b1f4 <__assert_fail@plt+0x9c90>
   1b7b4:	cmp	r0, #0
   1b7b8:	str	r0, [sp, #64]	; 0x40
   1b7bc:	beq	1b37c <__assert_fail@plt+0x9e18>
   1b7c0:	b	1b7f0 <__assert_fail@plt+0xa28c>
   1b7c4:	str	r0, [sp, #52]	; 0x34
   1b7c8:	mov	r2, r6
   1b7cc:	ldr	r1, [r1, #40]	; 0x28
   1b7d0:	add	r0, sp, #68	; 0x44
   1b7d4:	bl	17b9c <__assert_fail@plt+0x6638>
   1b7d8:	ldr	r3, [sp, #52]	; 0x34
   1b7dc:	cmp	r0, #0
   1b7e0:	str	r0, [sp, #64]	; 0x40
   1b7e4:	beq	1b7fc <__assert_fail@plt+0xa298>
   1b7e8:	ldr	r0, [sp, #76]	; 0x4c
   1b7ec:	bl	1370c <__assert_fail@plt+0x21a8>
   1b7f0:	ldr	r0, [sp, #64]	; 0x40
   1b7f4:	add	sp, sp, #84	; 0x54
   1b7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7fc:	add	r2, sp, #68	; 0x44
   1b800:	mov	r1, fp
   1b804:	add	r0, sp, #64	; 0x40
   1b808:	ldr	r8, [r4, #100]	; 0x64
   1b80c:	bl	17cd4 <__assert_fail@plt+0x6770>
   1b810:	str	r0, [r8, r5, lsl #2]
   1b814:	ldr	r0, [sp, #76]	; 0x4c
   1b818:	bl	1370c <__assert_fail@plt+0x21a8>
   1b81c:	b	1b74c <__assert_fail@plt+0xa1e8>
   1b820:	andeq	pc, r3, r0, lsl #30
   1b824:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1b828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b82c:	mov	r8, r0
   1b830:	ldr	r3, [r1, #104]	; 0x68
   1b834:	ldr	r6, [r1, #40]	; 0x28
   1b838:	ldr	sl, [r1, #84]	; 0x54
   1b83c:	cmp	r6, r3
   1b840:	ldr	r3, [r1, #100]	; 0x64
   1b844:	sub	sp, sp, #20
   1b848:	mov	r5, r1
   1b84c:	strgt	r2, [r3, r6, lsl #2]
   1b850:	mov	r4, r2
   1b854:	strgt	r6, [r1, #104]	; 0x68
   1b858:	bgt	1b8f8 <__assert_fail@plt+0xa394>
   1b85c:	ldr	r2, [r3, r6, lsl #2]
   1b860:	cmp	r2, #0
   1b864:	streq	r4, [r3, r6, lsl #2]
   1b868:	beq	1b8f8 <__assert_fail@plt+0xa394>
   1b86c:	cmp	r4, #0
   1b870:	ldr	r2, [r2, #40]	; 0x28
   1b874:	add	r7, sp, #4
   1b878:	beq	1b8a8 <__assert_fail@plt+0xa344>
   1b87c:	ldr	r9, [r4, #40]	; 0x28
   1b880:	mov	r0, r7
   1b884:	mov	r1, r9
   1b888:	bl	17b9c <__assert_fail@plt+0x6638>
   1b88c:	cmp	r0, #0
   1b890:	str	r0, [r8]
   1b894:	beq	1b8b4 <__assert_fail@plt+0xa350>
   1b898:	mov	r4, #0
   1b89c:	mov	r0, r4
   1b8a0:	add	sp, sp, #20
   1b8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8a8:	ldm	r2, {r0, r1, r2}
   1b8ac:	mov	r9, r4
   1b8b0:	stm	r7, {r0, r1, r2}
   1b8b4:	mov	r0, r5
   1b8b8:	ldr	r1, [r5, #40]	; 0x28
   1b8bc:	ldr	r2, [r5, #88]	; 0x58
   1b8c0:	sub	r1, r1, #1
   1b8c4:	bl	18c54 <__assert_fail@plt+0x76f0>
   1b8c8:	mov	r2, r7
   1b8cc:	mov	r1, sl
   1b8d0:	ldr	fp, [r5, #100]	; 0x64
   1b8d4:	mov	r3, r0
   1b8d8:	mov	r0, r8
   1b8dc:	bl	17cd4 <__assert_fail@plt+0x6770>
   1b8e0:	cmp	r9, #0
   1b8e4:	mov	r4, r0
   1b8e8:	str	r0, [fp, r6, lsl #2]
   1b8ec:	beq	1b8f8 <__assert_fail@plt+0xa394>
   1b8f0:	ldr	r0, [sp, #12]
   1b8f4:	bl	1370c <__assert_fail@plt+0x21a8>
   1b8f8:	ldr	r3, [sl, #76]	; 0x4c
   1b8fc:	cmp	r3, #0
   1b900:	beq	1b89c <__assert_fail@plt+0xa338>
   1b904:	cmp	r4, #0
   1b908:	beq	1b898 <__assert_fail@plt+0xa334>
   1b90c:	add	r7, r4, #4
   1b910:	mov	r2, r6
   1b914:	mov	r1, r7
   1b918:	mov	r0, r5
   1b91c:	bl	16a48 <__assert_fail@plt+0x54e4>
   1b920:	cmp	r0, #0
   1b924:	str	r0, [r8]
   1b928:	bne	1b898 <__assert_fail@plt+0xa334>
   1b92c:	ldrb	r3, [r4, #52]	; 0x34
   1b930:	tst	r3, #64	; 0x40
   1b934:	beq	1b89c <__assert_fail@plt+0xa338>
   1b938:	mov	r1, r7
   1b93c:	mov	r0, r5
   1b940:	bl	1b1f4 <__assert_fail@plt+0x9c90>
   1b944:	cmp	r0, #0
   1b948:	str	r0, [r8]
   1b94c:	bne	1b898 <__assert_fail@plt+0xa334>
   1b950:	ldr	r3, [r5, #100]	; 0x64
   1b954:	ldr	r4, [r3, r6, lsl #2]
   1b958:	b	1b89c <__assert_fail@plt+0xa338>
   1b95c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b960:	sub	sp, sp, #92	; 0x5c
   1b964:	mov	r4, r3
   1b968:	mov	r3, #0
   1b96c:	str	r3, [sp, #56]	; 0x38
   1b970:	lsl	r3, r2, #2
   1b974:	str	r3, [sp, #32]
   1b978:	ldr	r3, [r0, #100]	; 0x64
   1b97c:	mov	fp, r2
   1b980:	ldr	r7, [r0, #84]	; 0x54
   1b984:	ldr	r3, [r3, r2, lsl #2]
   1b988:	mov	r6, r0
   1b98c:	cmp	r3, #0
   1b990:	addne	r3, r3, #4
   1b994:	str	r3, [sp, #8]
   1b998:	ldr	r3, [r4, #4]
   1b99c:	mov	r5, r1
   1b9a0:	cmp	r3, #0
   1b9a4:	ldreq	r2, [r1]
   1b9a8:	streq	r3, [r2, fp, lsl #2]
   1b9ac:	beq	1bcb0 <__assert_fail@plt+0xa74c>
   1b9b0:	ldr	r3, [sp, #8]
   1b9b4:	cmp	r3, #0
   1b9b8:	bne	1b9ec <__assert_fail@plt+0xa488>
   1b9bc:	mov	r2, r4
   1b9c0:	mov	r1, r7
   1b9c4:	add	r0, sp, #56	; 0x38
   1b9c8:	ldr	r8, [r5]
   1b9cc:	bl	1a74c <__assert_fail@plt+0x91e8>
   1b9d0:	ldr	r3, [sp, #56]	; 0x38
   1b9d4:	cmp	r3, #0
   1b9d8:	str	r0, [r8, fp, lsl #2]
   1b9dc:	beq	1bcb0 <__assert_fail@plt+0xa74c>
   1b9e0:	mov	r0, r3
   1b9e4:	add	sp, sp, #92	; 0x5c
   1b9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9ec:	add	r0, sp, #88	; 0x58
   1b9f0:	mov	r3, #0
   1b9f4:	str	r3, [r0, #-28]!	; 0xffffffe4
   1b9f8:	mov	r2, r4
   1b9fc:	mov	r1, r7
   1ba00:	bl	1a74c <__assert_fail@plt+0x91e8>
   1ba04:	ldr	r8, [sp, #60]	; 0x3c
   1ba08:	cmp	r8, #0
   1ba0c:	bne	1ba34 <__assert_fail@plt+0xa4d0>
   1ba10:	mov	r9, r0
   1ba14:	ldr	r3, [r9, #28]!
   1ba18:	cmp	r3, #0
   1ba1c:	beq	1ba74 <__assert_fail@plt+0xa510>
   1ba20:	mov	r2, r9
   1ba24:	ldr	r1, [sp, #8]
   1ba28:	mov	r0, r4
   1ba2c:	bl	179ac <__assert_fail@plt+0x6448>
   1ba30:	mov	r8, r0
   1ba34:	cmp	r8, #0
   1ba38:	str	r8, [sp, #56]	; 0x38
   1ba3c:	movne	r3, r8
   1ba40:	bne	1b9e0 <__assert_fail@plt+0xa47c>
   1ba44:	ldr	r3, [r5, #20]
   1ba48:	cmp	r3, #0
   1ba4c:	strne	r8, [sp, #12]
   1ba50:	ldrne	r3, [r6, #116]	; 0x74
   1ba54:	strne	r3, [sp, #16]
   1ba58:	beq	1b9bc <__assert_fail@plt+0xa458>
   1ba5c:	ldr	r3, [r5, #20]
   1ba60:	ldr	r2, [sp, #12]
   1ba64:	cmp	r2, r3
   1ba68:	blt	1bad4 <__assert_fail@plt+0xa570>
   1ba6c:	mov	r3, r8
   1ba70:	b	1bc44 <__assert_fail@plt+0xa6e0>
   1ba74:	ldr	r1, [r4, #4]
   1ba78:	mov	r0, r9
   1ba7c:	bl	15ae8 <__assert_fail@plt+0x4584>
   1ba80:	cmp	r0, #0
   1ba84:	str	r0, [sp, #60]	; 0x3c
   1ba88:	moveq	r8, r0
   1ba8c:	moveq	sl, #12
   1ba90:	beq	1bac4 <__assert_fail@plt+0xa560>
   1ba94:	mov	r8, #12
   1ba98:	b	1ba34 <__assert_fail@plt+0xa4d0>
   1ba9c:	ldr	r3, [r4, #8]
   1baa0:	mov	r0, r9
   1baa4:	ldr	r1, [r3, r8, lsl #2]
   1baa8:	ldr	r3, [r7, #28]
   1baac:	mla	r1, sl, r1, r3
   1bab0:	bl	18908 <__assert_fail@plt+0x73a4>
   1bab4:	cmp	r0, #0
   1bab8:	str	r0, [sp, #60]	; 0x3c
   1babc:	bne	1ba94 <__assert_fail@plt+0xa530>
   1bac0:	add	r8, r8, #1
   1bac4:	ldr	r3, [r4, #4]
   1bac8:	cmp	r8, r3
   1bacc:	blt	1ba9c <__assert_fail@plt+0xa538>
   1bad0:	b	1ba20 <__assert_fail@plt+0xa4bc>
   1bad4:	ldr	r2, [sp, #12]
   1bad8:	ldr	r3, [r5, #24]
   1badc:	ldr	r3, [r3, r2, lsl #2]
   1bae0:	mov	r2, #24
   1bae4:	mul	r3, r2, r3
   1bae8:	ldr	r2, [sp, #16]
   1baec:	add	r2, r2, r3
   1baf0:	ldr	r1, [r2, #8]
   1baf4:	cmp	fp, r1
   1baf8:	bgt	1bb0c <__assert_fail@plt+0xa5a8>
   1bafc:	ldr	r3, [sp, #12]
   1bb00:	add	r3, r3, #1
   1bb04:	str	r3, [sp, #12]
   1bb08:	b	1ba5c <__assert_fail@plt+0xa4f8>
   1bb0c:	ldr	r1, [r2, #4]
   1bb10:	cmp	fp, r1
   1bb14:	bgt	1bafc <__assert_fail@plt+0xa598>
   1bb18:	ldr	r1, [sp, #16]
   1bb1c:	ldr	r0, [r7]
   1bb20:	ldr	r3, [r1, r3]
   1bb24:	ldr	r9, [r0, r3, lsl #3]
   1bb28:	ldr	r3, [r2, #12]
   1bb2c:	cmp	fp, r3
   1bb30:	movne	sl, #0
   1bb34:	bne	1bc78 <__assert_fail@plt+0xa714>
   1bb38:	mvn	sl, #0
   1bb3c:	ldr	lr, [r4, #4]
   1bb40:	mov	r1, sl
   1bb44:	mov	r2, #0
   1bb48:	cmp	r2, lr
   1bb4c:	blt	1bbe8 <__assert_fail@plt+0xa684>
   1bb50:	cmp	r1, #0
   1bb54:	bge	1bc2c <__assert_fail@plt+0xa6c8>
   1bb58:	cmp	sl, #0
   1bb5c:	movge	r9, #0
   1bb60:	blt	1bafc <__assert_fail@plt+0xa598>
   1bb64:	ldr	r3, [r4, #4]
   1bb68:	cmp	r9, r3
   1bb6c:	bge	1bafc <__assert_fail@plt+0xa598>
   1bb70:	ldr	r3, [r4, #8]
   1bb74:	ldr	r0, [r7, #28]
   1bb78:	mov	r1, sl
   1bb7c:	ldr	r3, [r3, r9, lsl #2]
   1bb80:	str	r3, [sp, #20]
   1bb84:	ldr	r2, [sp, #20]
   1bb88:	mov	r3, #12
   1bb8c:	mul	r3, r3, r2
   1bb90:	add	r0, r0, r3
   1bb94:	str	r3, [sp, #24]
   1bb98:	bl	15098 <__assert_fail@plt+0x3b34>
   1bb9c:	cmp	r0, #0
   1bba0:	bne	1bbe0 <__assert_fail@plt+0xa67c>
   1bba4:	ldr	r3, [sp, #24]
   1bba8:	ldr	r0, [r7, #24]
   1bbac:	mov	r1, sl
   1bbb0:	add	r0, r0, r3
   1bbb4:	bl	15098 <__assert_fail@plt+0x3b34>
   1bbb8:	cmp	r0, #0
   1bbbc:	bne	1bbe0 <__assert_fail@plt+0xa67c>
   1bbc0:	ldr	r3, [sp, #8]
   1bbc4:	mov	r2, r4
   1bbc8:	ldr	r1, [sp, #20]
   1bbcc:	mov	r0, r7
   1bbd0:	bl	1800c <__assert_fail@plt+0x6aa8>
   1bbd4:	subs	r3, r0, #0
   1bbd8:	bne	1bc44 <__assert_fail@plt+0xa6e0>
   1bbdc:	sub	r9, r9, #1
   1bbe0:	add	r9, r9, #1
   1bbe4:	b	1bb64 <__assert_fail@plt+0xa600>
   1bbe8:	ldr	r3, [r4, #8]
   1bbec:	ldr	r3, [r3, r2, lsl #2]
   1bbf0:	add	ip, r0, r3, lsl #3
   1bbf4:	ldrb	ip, [ip, #4]
   1bbf8:	cmp	ip, #8
   1bbfc:	bne	1bc14 <__assert_fail@plt+0xa6b0>
   1bc00:	ldr	ip, [r0, r3, lsl #3]
   1bc04:	cmp	r9, ip
   1bc08:	moveq	r1, r3
   1bc0c:	add	r2, r2, #1
   1bc10:	b	1bb48 <__assert_fail@plt+0xa5e4>
   1bc14:	cmp	ip, #9
   1bc18:	bne	1bc0c <__assert_fail@plt+0xa6a8>
   1bc1c:	ldr	ip, [r0, r3, lsl #3]
   1bc20:	cmp	r9, ip
   1bc24:	moveq	sl, r3
   1bc28:	b	1bc0c <__assert_fail@plt+0xa6a8>
   1bc2c:	ldr	r3, [sp, #8]
   1bc30:	mov	r2, r4
   1bc34:	mov	r0, r7
   1bc38:	bl	1800c <__assert_fail@plt+0x6aa8>
   1bc3c:	subs	r3, r0, #0
   1bc40:	beq	1bb58 <__assert_fail@plt+0xa5f4>
   1bc44:	cmp	r3, #0
   1bc48:	str	r3, [sp, #56]	; 0x38
   1bc4c:	beq	1b9bc <__assert_fail@plt+0xa458>
   1bc50:	b	1b9e0 <__assert_fail@plt+0xa47c>
   1bc54:	ldr	r3, [r4, #8]
   1bc58:	ldr	r2, [r7]
   1bc5c:	ldr	r1, [r3, sl, lsl #2]
   1bc60:	add	r3, r2, r1, lsl #3
   1bc64:	ldrb	r3, [r3, #4]
   1bc68:	sub	r3, r3, #8
   1bc6c:	cmp	r3, #1
   1bc70:	bls	1bc88 <__assert_fail@plt+0xa724>
   1bc74:	add	sl, sl, #1
   1bc78:	ldr	r3, [r4, #4]
   1bc7c:	cmp	sl, r3
   1bc80:	blt	1bc54 <__assert_fail@plt+0xa6f0>
   1bc84:	b	1bafc <__assert_fail@plt+0xa598>
   1bc88:	ldr	r3, [r2, r1, lsl #3]
   1bc8c:	cmp	r9, r3
   1bc90:	bne	1bc74 <__assert_fail@plt+0xa710>
   1bc94:	ldr	r3, [sp, #8]
   1bc98:	mov	r2, r4
   1bc9c:	mov	r0, r7
   1bca0:	bl	1800c <__assert_fail@plt+0x6aa8>
   1bca4:	subs	r3, r0, #0
   1bca8:	beq	1bc74 <__assert_fail@plt+0xa710>
   1bcac:	b	1bc44 <__assert_fail@plt+0xa6e0>
   1bcb0:	ldr	r3, [sp, #8]
   1bcb4:	cmp	r3, #0
   1bcb8:	beq	1be88 <__assert_fail@plt+0xa924>
   1bcbc:	ldr	r3, [r6, #100]	; 0x64
   1bcc0:	ldr	r3, [r3, fp, lsl #2]
   1bcc4:	ldrb	r3, [r3, #52]	; 0x34
   1bcc8:	ands	r3, r3, #64	; 0x40
   1bccc:	beq	1b9e0 <__assert_fail@plt+0xa47c>
   1bcd0:	mov	r1, fp
   1bcd4:	mov	r0, r6
   1bcd8:	bl	1549c <__assert_fail@plt+0x3f38>
   1bcdc:	mov	sl, #0
   1bce0:	cmn	r0, #1
   1bce4:	mov	r3, r0
   1bce8:	str	r0, [sp, #16]
   1bcec:	moveq	r3, sl
   1bcf0:	beq	1b9e0 <__assert_fail@plt+0xa47c>
   1bcf4:	mov	r3, #24
   1bcf8:	add	r9, sp, #88	; 0x58
   1bcfc:	mul	r3, r3, r0
   1bd00:	ldr	r8, [r6, #84]	; 0x54
   1bd04:	str	sl, [r9, #-28]!	; 0xffffffe4
   1bd08:	str	r3, [sp, #36]	; 0x24
   1bd0c:	add	r3, r9, #16
   1bd10:	str	r3, [sp, #28]
   1bd14:	ldr	r3, [sp, #8]
   1bd18:	ldr	r3, [r3, #4]
   1bd1c:	cmp	sl, r3
   1bd20:	movge	r3, #0
   1bd24:	bge	1be70 <__assert_fail@plt+0xa90c>
   1bd28:	ldr	r3, [sp, #8]
   1bd2c:	ldr	r2, [r5, #8]
   1bd30:	ldr	r3, [r3, #8]
   1bd34:	ldr	r7, [r3, sl, lsl #2]
   1bd38:	ldr	r3, [r8]
   1bd3c:	cmp	r7, r2
   1bd40:	add	r3, r3, r7, lsl #3
   1bd44:	ldrb	r3, [r3, #4]
   1bd48:	bne	1bd60 <__assert_fail@plt+0xa7fc>
   1bd4c:	ldr	r2, [r5, #12]
   1bd50:	cmp	fp, r2
   1bd54:	bne	1bd60 <__assert_fail@plt+0xa7fc>
   1bd58:	add	sl, sl, #1
   1bd5c:	b	1bd14 <__assert_fail@plt+0xa7b0>
   1bd60:	cmp	r3, #4
   1bd64:	bne	1bd58 <__assert_fail@plt+0xa7f4>
   1bd68:	ldr	r3, [sp, #36]	; 0x24
   1bd6c:	ldr	r4, [r6, #116]	; 0x74
   1bd70:	add	r4, r4, r3
   1bd74:	mov	r3, #12
   1bd78:	mul	r3, r3, r7
   1bd7c:	str	r3, [sp, #44]	; 0x2c
   1bd80:	lsl	r3, r7, #2
   1bd84:	str	r3, [sp, #40]	; 0x28
   1bd88:	ldr	r3, [sp, #36]	; 0x24
   1bd8c:	str	r3, [sp, #20]
   1bd90:	ldr	r3, [sp, #16]
   1bd94:	str	r3, [sp, #12]
   1bd98:	add	r3, r5, #16
   1bd9c:	str	r3, [sp, #24]
   1bda0:	ldr	r3, [r4]
   1bda4:	cmp	r7, r3
   1bda8:	bne	1bf20 <__assert_fail@plt+0xa9bc>
   1bdac:	ldr	r2, [r4, #8]
   1bdb0:	ldr	r3, [r4, #12]
   1bdb4:	sub	r3, r3, r2
   1bdb8:	cmp	r3, #0
   1bdbc:	add	r2, fp, r3
   1bdc0:	ldreq	r1, [sp, #44]	; 0x2c
   1bdc4:	ldreq	r3, [r8, #20]
   1bdc8:	ldrne	r1, [sp, #40]	; 0x28
   1bdcc:	addeq	r3, r3, r1
   1bdd0:	ldrne	r3, [r8, #12]
   1bdd4:	ldreq	r3, [r3, #8]
   1bdd8:	ldrne	r3, [r3, r1]
   1bddc:	ldr	r1, [r5, #12]
   1bde0:	ldreq	r3, [r3]
   1bde4:	cmp	r2, r1
   1bde8:	bgt	1bf20 <__assert_fail@plt+0xa9bc>
   1bdec:	ldr	r1, [r5]
   1bdf0:	str	r2, [sp, #52]	; 0x34
   1bdf4:	ldr	r0, [r1, r2, lsl #2]
   1bdf8:	cmp	r0, #0
   1bdfc:	beq	1bf20 <__assert_fail@plt+0xa9bc>
   1be00:	mov	r1, r3
   1be04:	add	r0, r0, #4
   1be08:	str	r3, [sp, #48]	; 0x30
   1be0c:	bl	15098 <__assert_fail@plt+0x3b34>
   1be10:	ldr	r3, [sp, #48]	; 0x30
   1be14:	ldr	r2, [sp, #52]	; 0x34
   1be18:	cmp	r0, #0
   1be1c:	beq	1bf20 <__assert_fail@plt+0xa9bc>
   1be20:	str	r2, [sp, #4]
   1be24:	str	r3, [sp]
   1be28:	mov	r2, r7
   1be2c:	mov	r3, fp
   1be30:	ldr	r1, [sp, #24]
   1be34:	mov	r0, r6
   1be38:	bl	1550c <__assert_fail@plt+0x3fa8>
   1be3c:	cmp	r0, #0
   1be40:	bne	1bf20 <__assert_fail@plt+0xa9bc>
   1be44:	ldr	r3, [sp, #60]	; 0x3c
   1be48:	cmp	r3, #0
   1be4c:	beq	1be90 <__assert_fail@plt+0xa92c>
   1be50:	ldr	r1, [sp, #12]
   1be54:	ldr	r0, [sp, #28]
   1be58:	str	r7, [sp, #68]	; 0x44
   1be5c:	str	fp, [sp, #72]	; 0x48
   1be60:	bl	18500 <__assert_fail@plt+0x6f9c>
   1be64:	cmp	r0, #0
   1be68:	bne	1bec4 <__assert_fail@plt+0xa960>
   1be6c:	mov	r3, #12
   1be70:	ldr	r2, [sp, #60]	; 0x3c
   1be74:	cmp	r2, #0
   1be78:	beq	1b9e0 <__assert_fail@plt+0xa47c>
   1be7c:	ldr	r0, [sp, #84]	; 0x54
   1be80:	str	r3, [sp, #8]
   1be84:	bl	1370c <__assert_fail@plt+0x21a8>
   1be88:	ldr	r3, [sp, #8]
   1be8c:	b	1b9e0 <__assert_fail@plt+0xa47c>
   1be90:	mov	lr, r5
   1be94:	add	ip, sp, #60	; 0x3c
   1be98:	ldm	lr!, {r0, r1, r2, r3}
   1be9c:	stmia	ip!, {r0, r1, r2, r3}
   1bea0:	ldr	r3, [sp, #24]
   1bea4:	ldm	r3, {r0, r1, r2}
   1bea8:	stm	ip, {r0, r1, r2}
   1beac:	mov	r1, r3
   1beb0:	mov	r0, ip
   1beb4:	bl	17b24 <__assert_fail@plt+0x65c0>
   1beb8:	subs	r3, r0, #0
   1bebc:	beq	1be50 <__assert_fail@plt+0xa8ec>
   1bec0:	b	1be70 <__assert_fail@plt+0xa90c>
   1bec4:	ldr	r3, [sp, #60]	; 0x3c
   1bec8:	ldr	r2, [sp, #32]
   1becc:	mov	r1, r9
   1bed0:	mov	r0, r6
   1bed4:	ldr	r4, [r3, r2]
   1bed8:	bl	1bf6c <__assert_fail@plt+0xaa08>
   1bedc:	subs	r3, r0, #0
   1bee0:	bne	1be70 <__assert_fail@plt+0xa90c>
   1bee4:	ldr	r1, [r5, #4]
   1bee8:	cmp	r1, #0
   1beec:	bne	1bf50 <__assert_fail@plt+0xa9ec>
   1bef0:	ldr	r3, [sp, #60]	; 0x3c
   1bef4:	ldr	r2, [sp, #32]
   1bef8:	ldr	r1, [sp, #12]
   1befc:	ldr	r0, [sp, #28]
   1bf00:	str	r4, [r3, r2]
   1bf04:	bl	15098 <__assert_fail@plt+0x3b34>
   1bf08:	sub	r1, r0, #1
   1bf0c:	ldr	r0, [sp, #28]
   1bf10:	bl	17864 <__assert_fail@plt+0x6300>
   1bf14:	ldr	r4, [r6, #116]	; 0x74
   1bf18:	ldr	r3, [sp, #20]
   1bf1c:	add	r4, r4, r3
   1bf20:	ldr	r3, [sp, #12]
   1bf24:	add	r2, r4, #24
   1bf28:	add	r3, r3, #1
   1bf2c:	str	r3, [sp, #12]
   1bf30:	ldr	r3, [sp, #20]
   1bf34:	add	r3, r3, #24
   1bf38:	str	r3, [sp, #20]
   1bf3c:	ldrb	r3, [r4, #20]
   1bf40:	cmp	r3, #0
   1bf44:	beq	1bd58 <__assert_fail@plt+0xa7f4>
   1bf48:	mov	r4, r2
   1bf4c:	b	1bda0 <__assert_fail@plt+0xa83c>
   1bf50:	add	r3, fp, #1
   1bf54:	ldr	r2, [sp, #60]	; 0x3c
   1bf58:	mov	r0, r8
   1bf5c:	bl	1a8fc <__assert_fail@plt+0x9398>
   1bf60:	subs	r3, r0, #0
   1bf64:	beq	1bef0 <__assert_fail@plt+0xa98c>
   1bf68:	b	1be70 <__assert_fail@plt+0xa90c>
   1bf6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf70:	sub	sp, sp, #52	; 0x34
   1bf74:	add	r7, sp, #36	; 0x24
   1bf78:	ldr	r4, [r1, #12]
   1bf7c:	mov	r6, r0
   1bf80:	mov	r5, r1
   1bf84:	mov	r0, r7
   1bf88:	ldr	r1, [r1, #8]
   1bf8c:	bl	15aa8 <__assert_fail@plt+0x4544>
   1bf90:	subs	fp, r0, #0
   1bf94:	bne	1bfc8 <__assert_fail@plt+0xaa64>
   1bf98:	mov	r3, r7
   1bf9c:	mov	r2, r4
   1bfa0:	mov	r1, r5
   1bfa4:	mov	r0, r6
   1bfa8:	bl	1b95c <__assert_fail@plt+0xa3f8>
   1bfac:	subs	fp, r0, #0
   1bfb0:	lsleq	r8, r4, #2
   1bfb4:	streq	fp, [sp, #8]
   1bfb8:	streq	r7, [sp, #20]
   1bfbc:	beq	1c18c <__assert_fail@plt+0xac28>
   1bfc0:	ldr	r0, [sp, #44]	; 0x2c
   1bfc4:	bl	1370c <__assert_fail@plt+0x21a8>
   1bfc8:	mov	r0, fp
   1bfcc:	add	sp, sp, #52	; 0x34
   1bfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfd4:	mov	r3, #0
   1bfd8:	str	r3, [sp, #40]	; 0x28
   1bfdc:	ldr	r3, [r6, #100]	; 0x64
   1bfe0:	sub	r4, r4, #1
   1bfe4:	add	r3, r3, r8
   1bfe8:	ldr	sl, [r3, #-4]
   1bfec:	cmp	sl, #0
   1bff0:	bne	1c01c <__assert_fail@plt+0xaab8>
   1bff4:	ldr	r3, [sp, #20]
   1bff8:	mov	r2, r4
   1bffc:	mov	r1, r5
   1c000:	mov	r0, r6
   1c004:	bl	1b95c <__assert_fail@plt+0xa3f8>
   1c008:	sub	r8, r8, #4
   1c00c:	cmp	r0, #0
   1c010:	beq	1c18c <__assert_fail@plt+0xac28>
   1c014:	mov	fp, r0
   1c018:	b	1bfc0 <__assert_fail@plt+0xaa5c>
   1c01c:	ldr	r9, [r6, #84]	; 0x54
   1c020:	mov	r3, #0
   1c024:	str	r3, [sp, #12]
   1c028:	add	r3, r5, #16
   1c02c:	str	r3, [sp, #28]
   1c030:	ldr	r3, [sl, #20]
   1c034:	ldr	r2, [sp, #12]
   1c038:	cmp	r2, r3
   1c03c:	bge	1bff4 <__assert_fail@plt+0xaa90>
   1c040:	ldr	r3, [sl, #24]
   1c044:	ldr	r2, [sp, #12]
   1c048:	ldr	r7, [r3, r2, lsl #2]
   1c04c:	lsl	r3, r7, #3
   1c050:	str	r3, [sp, #16]
   1c054:	ldr	r3, [r9]
   1c058:	lsl	r2, r7, #3
   1c05c:	add	r3, r3, r2
   1c060:	ldrb	r3, [r3, #6]
   1c064:	tst	r3, #16
   1c068:	bne	1c09c <__assert_fail@plt+0xab38>
   1c06c:	ldr	r1, [r9]
   1c070:	lsl	r3, r7, #3
   1c074:	mov	r2, r4
   1c078:	add	r1, r1, r3
   1c07c:	mov	r0, r6
   1c080:	bl	19374 <__assert_fail@plt+0x7e10>
   1c084:	cmp	r0, #0
   1c088:	bne	1c15c <__assert_fail@plt+0xabf8>
   1c08c:	ldr	r3, [sp, #12]
   1c090:	add	r3, r3, #1
   1c094:	str	r3, [sp, #12]
   1c098:	b	1c030 <__assert_fail@plt+0xaacc>
   1c09c:	ldr	r3, [r5, #12]
   1c0a0:	mov	r2, r6
   1c0a4:	str	r3, [sp, #24]
   1c0a8:	ldr	r3, [r6, #84]	; 0x54
   1c0ac:	mov	r1, r7
   1c0b0:	str	r3, [sp, #16]
   1c0b4:	ldr	r0, [sp, #16]
   1c0b8:	mov	r3, r4
   1c0bc:	bl	175a8 <__assert_fail@plt+0x6044>
   1c0c0:	subs	r3, r0, #0
   1c0c4:	ble	1c108 <__assert_fail@plt+0xaba4>
   1c0c8:	ldr	r1, [sp, #24]
   1c0cc:	add	r2, r4, r3
   1c0d0:	cmp	r1, r2
   1c0d4:	blt	1c10c <__assert_fail@plt+0xaba8>
   1c0d8:	ldr	r1, [r5]
   1c0dc:	str	r3, [sp, #24]
   1c0e0:	ldr	r0, [r1, r2, lsl #2]
   1c0e4:	cmp	r0, #0
   1c0e8:	beq	1c06c <__assert_fail@plt+0xab08>
   1c0ec:	ldr	r3, [sp, #16]
   1c0f0:	add	r0, r0, #4
   1c0f4:	ldr	r2, [r3, #12]
   1c0f8:	ldr	r1, [r2, r7, lsl #2]
   1c0fc:	bl	15098 <__assert_fail@plt+0x3b34>
   1c100:	ldr	r3, [sp, #24]
   1c104:	cmp	r0, #0
   1c108:	beq	1c06c <__assert_fail@plt+0xab08>
   1c10c:	ldr	r2, [r5, #20]
   1c110:	cmp	r2, #0
   1c114:	beq	1c140 <__assert_fail@plt+0xabdc>
   1c118:	ldr	r2, [r9, #12]
   1c11c:	add	r3, r4, r3
   1c120:	str	r4, [sp, #4]
   1c124:	str	r7, [sp]
   1c128:	ldr	r1, [sp, #28]
   1c12c:	ldr	r2, [r2, r7, lsl #2]
   1c130:	mov	r0, r6
   1c134:	bl	1550c <__assert_fail@plt+0x3fa8>
   1c138:	cmp	r0, #0
   1c13c:	bne	1c08c <__assert_fail@plt+0xab28>
   1c140:	mov	r1, r7
   1c144:	ldr	r0, [sp, #20]
   1c148:	bl	18500 <__assert_fail@plt+0x6f9c>
   1c14c:	cmp	r0, #0
   1c150:	bne	1c08c <__assert_fail@plt+0xab28>
   1c154:	mov	fp, #12
   1c158:	b	1bfc0 <__assert_fail@plt+0xaa5c>
   1c15c:	ldr	r3, [r5]
   1c160:	ldr	r0, [r3, r8]
   1c164:	cmp	r0, #0
   1c168:	beq	1c08c <__assert_fail@plt+0xab28>
   1c16c:	ldr	r3, [r9, #12]
   1c170:	add	r0, r0, #4
   1c174:	ldr	r1, [r3, r7, lsl #2]
   1c178:	bl	15098 <__assert_fail@plt+0x3b34>
   1c17c:	cmp	r0, #0
   1c180:	beq	1c08c <__assert_fail@plt+0xab28>
   1c184:	mov	r3, #1
   1c188:	b	1c10c <__assert_fail@plt+0xaba8>
   1c18c:	cmp	r4, #0
   1c190:	ble	1bfc0 <__assert_fail@plt+0xaa5c>
   1c194:	ldr	r0, [r5]
   1c198:	ldr	r3, [r0, r8]
   1c19c:	cmp	r3, #0
   1c1a0:	movne	r3, #0
   1c1a4:	ldreq	r3, [sp, #8]
   1c1a8:	addeq	r3, r3, #1
   1c1ac:	str	r3, [sp, #8]
   1c1b0:	ldr	r2, [sp, #8]
   1c1b4:	ldr	r3, [r6, #120]	; 0x78
   1c1b8:	cmp	r2, r3
   1c1bc:	ble	1bfd4 <__assert_fail@plt+0xaa70>
   1c1c0:	mov	r2, r8
   1c1c4:	mov	r1, #0
   1c1c8:	bl	11444 <memset@plt>
   1c1cc:	b	1bfc0 <__assert_fail@plt+0xaa5c>
   1c1d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1d4:	sub	sp, sp, #420	; 0x1a4
   1c1d8:	mov	sl, r0
   1c1dc:	ldr	fp, [r0]
   1c1e0:	str	r1, [sp, #32]
   1c1e4:	str	r2, [sp, #36]	; 0x24
   1c1e8:	mov	r1, #0
   1c1ec:	mov	r2, #136	; 0x88
   1c1f0:	add	r0, sp, #140	; 0x8c
   1c1f4:	mov	r5, r3
   1c1f8:	ldr	r8, [sp, #456]	; 0x1c8
   1c1fc:	ldr	r7, [sp, #460]	; 0x1cc
   1c200:	ldr	r6, [sp, #464]	; 0x1d0
   1c204:	ldr	r4, [sp, #468]	; 0x1d4
   1c208:	bl	11444 <memset@plt>
   1c20c:	ldr	r2, [sl, #16]
   1c210:	str	fp, [sp, #224]	; 0xe0
   1c214:	cmp	r2, #0
   1c218:	streq	r2, [sp, #20]
   1c21c:	beq	1c244 <__assert_fail@plt+0xace0>
   1c220:	ldrb	r1, [sl, #28]
   1c224:	subs	r3, r5, r8
   1c228:	movne	r3, #1
   1c22c:	ands	r3, r3, r1, lsr #3
   1c230:	beq	1c240 <__assert_fail@plt+0xacdc>
   1c234:	tst	r1, #1
   1c238:	moveq	r3, r2
   1c23c:	movne	r3, #0
   1c240:	str	r3, [sp, #20]
   1c244:	ldr	r3, [sl, #24]
   1c248:	cmp	r3, r6
   1c24c:	subcc	r2, r6, #1
   1c250:	subcc	r3, r2, r3
   1c254:	movcs	r3, #0
   1c258:	str	r3, [sp, #68]	; 0x44
   1c25c:	ldr	r3, [sl, #8]
   1c260:	cmp	r3, #0
   1c264:	beq	1c274 <__assert_fail@plt+0xad10>
   1c268:	ldr	r2, [fp, #36]	; 0x24
   1c26c:	cmp	r2, #0
   1c270:	bne	1d3a8 <__assert_fail@plt+0xbe44>
   1c274:	mov	r3, #1
   1c278:	str	r3, [sp, #12]
   1c27c:	b	1ce34 <__assert_fail@plt+0xb8d0>
   1c280:	ldr	r3, [pc, #4028]	; 1d244 <__assert_fail@plt+0xbce0>
   1c284:	cmp	r7, r3
   1c288:	bgt	1c2b8 <__assert_fail@plt+0xad54>
   1c28c:	mov	r0, #24
   1c290:	mul	r0, r0, r7
   1c294:	bl	2141c <__assert_fail@plt+0xfeb8>
   1c298:	str	r0, [sp, #256]	; 0x100
   1c29c:	lsl	r0, r9, #3
   1c2a0:	bl	2141c <__assert_fail@plt+0xfeb8>
   1c2a4:	ldr	r3, [sp, #256]	; 0x100
   1c2a8:	cmp	r0, #0
   1c2ac:	cmpne	r3, #0
   1c2b0:	str	r0, [sp, #272]	; 0x110
   1c2b4:	bne	1d568 <__assert_fail@plt+0xc004>
   1c2b8:	mov	r3, #12
   1c2bc:	b	1c380 <__assert_fail@plt+0xae1c>
   1c2c0:	ldr	r0, [sp, #176]	; 0xb0
   1c2c4:	cmn	r0, #-1073741822	; 0xc0000002
   1c2c8:	bhi	1c2b8 <__assert_fail@plt+0xad54>
   1c2cc:	add	r0, r0, #1
   1c2d0:	lsl	r0, r0, #2
   1c2d4:	bl	2141c <__assert_fail@plt+0xfeb8>
   1c2d8:	cmp	r0, #0
   1c2dc:	str	r0, [sp, #240]	; 0xf0
   1c2e0:	bne	1d590 <__assert_fail@plt+0xc02c>
   1c2e4:	b	1c2b8 <__assert_fail@plt+0xad54>
   1c2e8:	ldr	r3, [sp, #92]	; 0x5c
   1c2ec:	cmp	r3, #1
   1c2f0:	moveq	r3, #4
   1c2f4:	beq	1c318 <__assert_fail@plt+0xadb4>
   1c2f8:	ldr	r3, [sl, #12]
   1c2fc:	ldr	r2, [sp, #24]
   1c300:	lsr	r3, r3, #22
   1c304:	eor	r3, r3, #1
   1c308:	cmp	r2, #0
   1c30c:	movne	r3, #0
   1c310:	andeq	r3, r3, #1
   1c314:	lsl	r3, r3, #2
   1c318:	cmp	r5, r8
   1c31c:	movle	r2, #2
   1c320:	movgt	r2, #0
   1c324:	orr	r6, r6, r3
   1c328:	orr	r3, r6, r2
   1c32c:	cmp	r5, r8
   1c330:	str	r3, [sp, #84]	; 0x54
   1c334:	add	r3, sp, #416	; 0x1a0
   1c338:	suble	r3, r3, #308	; 0x134
   1c33c:	movgt	r3, #0
   1c340:	str	r3, [sp, #88]	; 0x58
   1c344:	adds	r3, r3, #0
   1c348:	movne	r3, #1
   1c34c:	str	r3, [sp, #96]	; 0x60
   1c350:	ldr	r3, [sp, #108]	; 0x6c
   1c354:	ldr	r2, [sp, #40]	; 0x28
   1c358:	cmp	r2, r3
   1c35c:	ldr	r2, [sp, #60]	; 0x3c
   1c360:	movge	r5, #0
   1c364:	movlt	r5, #1
   1c368:	cmp	r2, r3
   1c36c:	orrgt	r5, r5, #1
   1c370:	cmp	r5, #0
   1c374:	str	r5, [sp, #28]
   1c378:	beq	1c388 <__assert_fail@plt+0xae24>
   1c37c:	mov	r3, #1
   1c380:	str	r3, [sp, #12]
   1c384:	b	1ce00 <__assert_fail@plt+0xb89c>
   1c388:	ldr	r2, [sp, #84]	; 0x54
   1c38c:	sub	r2, r2, #4
   1c390:	cmp	r2, #4
   1c394:	ldrls	pc, [pc, r2, lsl #2]
   1c398:	b	1c750 <__assert_fail@plt+0xb1ec>
   1c39c:	andeq	ip, r1, r4, ror #8
   1c3a0:	andeq	ip, r1, r4, ror #8
   1c3a4:	andeq	ip, r1, r4, lsr #8
   1c3a8:			; <UNDEFINED> instruction: 0x0001c3b0
   1c3ac:			; <UNDEFINED> instruction: 0x0001c4bc
   1c3b0:	ldr	r2, [sp, #32]
   1c3b4:	ldr	r1, [sp, #28]
   1c3b8:	add	r3, r2, r3
   1c3bc:	mov	ip, #1
   1c3c0:	ldr	r2, [sp, #32]
   1c3c4:	ldr	r0, [sp, #40]	; 0x28
   1c3c8:	sub	r2, r3, r2
   1c3cc:	cmp	r0, r2
   1c3d0:	bgt	1c494 <__assert_fail@plt+0xaf30>
   1c3d4:	cmp	r1, #0
   1c3d8:	strne	r2, [sp, #108]	; 0x6c
   1c3dc:	ldr	r3, [sp, #108]	; 0x6c
   1c3e0:	ldr	r2, [sp, #40]	; 0x28
   1c3e4:	cmp	r2, r3
   1c3e8:	bne	1c4bc <__assert_fail@plt+0xaf58>
   1c3ec:	ldr	r3, [sp, #36]	; 0x24
   1c3f0:	ldr	r2, [sp, #40]	; 0x28
   1c3f4:	cmp	r3, r2
   1c3f8:	movle	r3, #0
   1c3fc:	ldrgt	r3, [sp, #32]
   1c400:	ldrbgt	r3, [r3, r2]
   1c404:	ldr	r2, [sp, #24]
   1c408:	cmp	r2, #0
   1c40c:	ldrbne	r3, [r2, r3]
   1c410:	ldr	r2, [sp, #20]
   1c414:	ldrb	r3, [r2, r3]
   1c418:	cmp	r3, #0
   1c41c:	bne	1c4bc <__assert_fail@plt+0xaf58>
   1c420:	b	1c37c <__assert_fail@plt+0xae18>
   1c424:	ldr	r2, [sp, #32]
   1c428:	ldr	r1, [sp, #28]
   1c42c:	add	r3, r2, r3
   1c430:	mov	ip, #1
   1c434:	ldr	r2, [sp, #32]
   1c438:	ldr	r0, [sp, #40]	; 0x28
   1c43c:	sub	r2, r3, r2
   1c440:	cmp	r0, r2
   1c444:	ble	1c3d4 <__assert_fail@plt+0xae70>
   1c448:	ldrb	r0, [r3], #1
   1c44c:	ldr	lr, [sp, #20]
   1c450:	ldrb	r0, [lr, r0]
   1c454:	cmp	r0, #0
   1c458:	bne	1c4b0 <__assert_fail@plt+0xaf4c>
   1c45c:	mov	r1, ip
   1c460:	b	1c434 <__assert_fail@plt+0xaed0>
   1c464:	ldr	r1, [sp, #28]
   1c468:	mov	ip, #0
   1c46c:	mov	lr, #1
   1c470:	ldr	r2, [sp, #60]	; 0x3c
   1c474:	mov	r0, r3
   1c478:	cmp	r3, r2
   1c47c:	bge	1c708 <__assert_fail@plt+0xb1a4>
   1c480:	cmp	r1, #0
   1c484:	strne	r3, [sp, #108]	; 0x6c
   1c488:	b	1c37c <__assert_fail@plt+0xae18>
   1c48c:	mov	r1, ip
   1c490:	b	1c3c0 <__assert_fail@plt+0xae5c>
   1c494:	ldrb	r0, [r3], #1
   1c498:	ldr	lr, [sp, #24]
   1c49c:	ldrb	r0, [lr, r0]
   1c4a0:	ldr	lr, [sp, #20]
   1c4a4:	ldrb	r0, [lr, r0]
   1c4a8:	cmp	r0, #0
   1c4ac:	beq	1c48c <__assert_fail@plt+0xaf28>
   1c4b0:	cmp	r1, #0
   1c4b4:	strne	r2, [sp, #108]	; 0x6c
   1c4b8:	beq	1c3dc <__assert_fail@plt+0xae78>
   1c4bc:	ldr	r2, [sp, #472]	; 0x1d8
   1c4c0:	ldr	r1, [sp, #108]	; 0x6c
   1c4c4:	add	r0, sp, #140	; 0x8c
   1c4c8:	bl	18d34 <__assert_fail@plt+0x77d0>
   1c4cc:	subs	r3, r0, #0
   1c4d0:	str	r3, [sp, #12]
   1c4d4:	bne	1ce00 <__assert_fail@plt+0xb89c>
   1c4d8:	ldr	r3, [sp, #92]	; 0x5c
   1c4dc:	cmp	r3, #1
   1c4e0:	beq	1c500 <__assert_fail@plt+0xaf9c>
   1c4e4:	ldr	r3, [sp, #168]	; 0xa8
   1c4e8:	cmp	r3, #0
   1c4ec:	beq	1c500 <__assert_fail@plt+0xaf9c>
   1c4f0:	ldr	r3, [sp, #148]	; 0x94
   1c4f4:	ldr	r3, [r3]
   1c4f8:	cmn	r3, #1
   1c4fc:	beq	1c860 <__assert_fail@plt+0xb2fc>
   1c500:	ldr	r7, [sp, #224]	; 0xe0
   1c504:	mov	r3, #0
   1c508:	str	r3, [sp, #260]	; 0x104
   1c50c:	ldr	r6, [r7, #36]	; 0x24
   1c510:	str	r3, [sp, #248]	; 0xf8
   1c514:	str	r3, [sp, #244]	; 0xf4
   1c518:	str	r3, [sp, #116]	; 0x74
   1c51c:	ldrsb	r3, [r6, #52]	; 0x34
   1c520:	ldr	r5, [sp, #180]	; 0xb4
   1c524:	cmp	r3, #0
   1c528:	bge	1c590 <__assert_fail@plt+0xb02c>
   1c52c:	ldr	r2, [sp, #228]	; 0xe4
   1c530:	sub	r1, r5, #1
   1c534:	add	r0, sp, #140	; 0x8c
   1c538:	bl	18c54 <__assert_fail@plt+0x76f0>
   1c53c:	tst	r0, #1
   1c540:	mov	r3, r0
   1c544:	ldrne	r6, [r7, #40]	; 0x28
   1c548:	bne	1c590 <__assert_fail@plt+0xb02c>
   1c54c:	cmp	r0, #0
   1c550:	beq	1c590 <__assert_fail@plt+0xb02c>
   1c554:	and	r2, r0, #6
   1c558:	cmp	r2, #6
   1c55c:	ldreq	r6, [r7, #48]	; 0x30
   1c560:	beq	1c590 <__assert_fail@plt+0xb02c>
   1c564:	tst	r0, #2
   1c568:	ldrne	r6, [r7, #44]	; 0x2c
   1c56c:	bne	1c590 <__assert_fail@plt+0xb02c>
   1c570:	tst	r0, #4
   1c574:	beq	1c590 <__assert_fail@plt+0xb02c>
   1c578:	ldr	r2, [r6, #40]	; 0x28
   1c57c:	mov	r1, r7
   1c580:	add	r0, sp, #116	; 0x74
   1c584:	bl	17cd4 <__assert_fail@plt+0x6770>
   1c588:	subs	r6, r0, #0
   1c58c:	beq	1c2b8 <__assert_fail@plt+0xad54>
   1c590:	ldr	r3, [sp, #240]	; 0xf0
   1c594:	cmp	r3, #0
   1c598:	beq	1c80c <__assert_fail@plt+0xb2a8>
   1c59c:	str	r6, [r3, r5, lsl #2]
   1c5a0:	ldr	r3, [r7, #76]	; 0x4c
   1c5a4:	cmp	r3, #0
   1c5a8:	beq	1c80c <__assert_fail@plt+0xb2a8>
   1c5ac:	add	r7, r6, #4
   1c5b0:	mov	r2, #0
   1c5b4:	mov	r1, r7
   1c5b8:	add	r0, sp, #140	; 0x8c
   1c5bc:	bl	16a48 <__assert_fail@plt+0x54e4>
   1c5c0:	cmp	r0, #0
   1c5c4:	str	r0, [sp, #116]	; 0x74
   1c5c8:	bne	1c804 <__assert_fail@plt+0xb2a0>
   1c5cc:	ldrb	r3, [r6, #52]	; 0x34
   1c5d0:	tst	r3, #64	; 0x40
   1c5d4:	bne	1c7ec <__assert_fail@plt+0xb288>
   1c5d8:	ldr	r3, [sp, #28]
   1c5dc:	ldrb	r0, [r6, #52]	; 0x34
   1c5e0:	str	r3, [sp, #44]	; 0x2c
   1c5e4:	lsr	r0, r0, #4
   1c5e8:	ands	r0, r0, #1
   1c5ec:	bne	1c814 <__assert_fail@plt+0xb2b0>
   1c5f0:	mvn	r3, #0
   1c5f4:	str	r0, [sp, #52]	; 0x34
   1c5f8:	str	r5, [sp, #72]	; 0x48
   1c5fc:	mov	r5, r3
   1c600:	ldr	r3, [sp, #88]	; 0x58
   1c604:	str	r3, [sp, #48]	; 0x30
   1c608:	ldr	r1, [sp, #180]	; 0xb4
   1c60c:	ldr	r3, [sp, #196]	; 0xc4
   1c610:	cmp	r1, r3
   1c614:	bge	1c6e0 <__assert_fail@plt+0xb17c>
   1c618:	add	r3, r1, #1
   1c61c:	str	r3, [sp, #64]	; 0x40
   1c620:	ldr	r3, [sp, #176]	; 0xb0
   1c624:	add	r2, r1, #1
   1c628:	cmp	r2, r3
   1c62c:	blt	1c63c <__assert_fail@plt+0xb0d8>
   1c630:	ldr	r2, [sp, #188]	; 0xbc
   1c634:	cmp	r3, r2
   1c638:	blt	1c658 <__assert_fail@plt+0xb0f4>
   1c63c:	ldr	r3, [sp, #168]	; 0xa8
   1c640:	add	r2, r1, #1
   1c644:	cmp	r2, r3
   1c648:	blt	1c670 <__assert_fail@plt+0xb10c>
   1c64c:	ldr	r2, [sp, #188]	; 0xbc
   1c650:	cmp	r3, r2
   1c654:	bge	1c670 <__assert_fail@plt+0xb10c>
   1c658:	add	r1, r1, #2
   1c65c:	add	r0, sp, #140	; 0x8c
   1c660:	bl	16288 <__assert_fail@plt+0x4d24>
   1c664:	cmp	r0, #0
   1c668:	str	r0, [sp, #116]	; 0x74
   1c66c:	bne	1c2b8 <__assert_fail@plt+0xad54>
   1c670:	ldrb	r3, [r6, #52]	; 0x34
   1c674:	tst	r3, #32
   1c678:	bne	1c874 <__assert_fail@plt+0xb310>
   1c67c:	ldr	r3, [sp, #180]	; 0xb4
   1c680:	add	r2, r3, #1
   1c684:	str	r2, [sp, #180]	; 0xb4
   1c688:	ldr	r2, [sp, #144]	; 0x90
   1c68c:	ldrb	r8, [r2, r3]
   1c690:	ldr	r3, [r6, #44]	; 0x2c
   1c694:	cmp	r3, #0
   1c698:	beq	1ca38 <__assert_fail@plt+0xb4d4>
   1c69c:	ldr	r7, [r3, r8, lsl #2]
   1c6a0:	ldr	r3, [sp, #240]	; 0xf0
   1c6a4:	cmp	r3, #0
   1c6a8:	beq	1c6c0 <__assert_fail@plt+0xb15c>
   1c6ac:	mov	r2, r7
   1c6b0:	add	r1, sp, #140	; 0x8c
   1c6b4:	add	r0, sp, #116	; 0x74
   1c6b8:	bl	1b828 <__assert_fail@plt+0xa2c4>
   1c6bc:	mov	r7, r0
   1c6c0:	cmp	r7, #0
   1c6c4:	bne	1cb08 <__assert_fail@plt+0xb5a4>
   1c6c8:	ldr	r3, [sp, #116]	; 0x74
   1c6cc:	cmp	r3, #0
   1c6d0:	bne	1c2b8 <__assert_fail@plt+0xad54>
   1c6d4:	ldr	r3, [sp, #240]	; 0xf0
   1c6d8:	cmp	r3, #0
   1c6dc:	bne	1ca88 <__assert_fail@plt+0xb524>
   1c6e0:	ldr	r3, [sp, #48]	; 0x30
   1c6e4:	cmp	r3, #0
   1c6e8:	beq	1c850 <__assert_fail@plt+0xb2ec>
   1c6ec:	ldr	r3, [sp, #48]	; 0x30
   1c6f0:	ldr	r2, [sp, #72]	; 0x48
   1c6f4:	ldr	r3, [r3]
   1c6f8:	add	r3, r3, r2
   1c6fc:	ldr	r2, [sp, #48]	; 0x30
   1c700:	str	r3, [r2]
   1c704:	b	1c850 <__assert_fail@plt+0xb2ec>
   1c708:	ldr	r2, [sp, #36]	; 0x24
   1c70c:	ldr	r5, [sp, #24]
   1c710:	cmp	r2, r3
   1c714:	movle	r2, ip
   1c718:	ldrgt	r2, [sp, #32]
   1c71c:	ldrbgt	r2, [r2, r3]
   1c720:	cmp	r5, #0
   1c724:	sub	r3, r3, #1
   1c728:	ldrbne	r2, [r5, r2]
   1c72c:	ldr	r5, [sp, #20]
   1c730:	ldrb	r2, [r5, r2]
   1c734:	cmp	r2, #0
   1c738:	beq	1c748 <__assert_fail@plt+0xb1e4>
   1c73c:	cmp	r1, #0
   1c740:	strne	r0, [sp, #108]	; 0x6c
   1c744:	b	1c4bc <__assert_fail@plt+0xaf58>
   1c748:	mov	r1, lr
   1c74c:	b	1c470 <__assert_fail@plt+0xaf0c>
   1c750:	mov	r6, #0
   1c754:	ldr	r5, [sp, #108]	; 0x6c
   1c758:	ldr	r3, [sp, #164]	; 0xa4
   1c75c:	ldr	r2, [sp, #172]	; 0xac
   1c760:	sub	r3, r5, r3
   1c764:	cmp	r3, r2
   1c768:	bcc	1c790 <__assert_fail@plt+0xb22c>
   1c76c:	ldr	r2, [sp, #472]	; 0x1d8
   1c770:	mov	r1, r5
   1c774:	add	r0, sp, #140	; 0x8c
   1c778:	bl	18d34 <__assert_fail@plt+0x77d0>
   1c77c:	subs	r3, r0, #0
   1c780:	str	r3, [sp, #12]
   1c784:	bne	1ce00 <__assert_fail@plt+0xb89c>
   1c788:	ldr	r3, [sp, #164]	; 0xa4
   1c78c:	sub	r3, r5, r3
   1c790:	ldr	r2, [sp, #168]	; 0xa8
   1c794:	cmp	r3, r2
   1c798:	movcs	r3, r6
   1c79c:	ldrcc	r2, [sp, #144]	; 0x90
   1c7a0:	ldrbcc	r3, [r2, r3]
   1c7a4:	ldr	r2, [sp, #20]
   1c7a8:	ldrb	r3, [r2, r3]
   1c7ac:	cmp	r3, #0
   1c7b0:	bne	1c4bc <__assert_fail@plt+0xaf58>
   1c7b4:	ldr	r3, [sp, #80]	; 0x50
   1c7b8:	ldr	r2, [sp, #60]	; 0x3c
   1c7bc:	add	r5, r3, r5
   1c7c0:	ldr	r3, [sp, #40]	; 0x28
   1c7c4:	str	r5, [sp, #108]	; 0x6c
   1c7c8:	cmp	r3, r5
   1c7cc:	movge	r3, #0
   1c7d0:	movlt	r3, #1
   1c7d4:	cmp	r2, r5
   1c7d8:	movle	r5, r3
   1c7dc:	orrgt	r5, r3, #1
   1c7e0:	cmp	r5, #0
   1c7e4:	beq	1c754 <__assert_fail@plt+0xb1f0>
   1c7e8:	b	1c37c <__assert_fail@plt+0xae18>
   1c7ec:	mov	r1, r7
   1c7f0:	add	r0, sp, #140	; 0x8c
   1c7f4:	bl	1b1f4 <__assert_fail@plt+0x9c90>
   1c7f8:	cmp	r0, #0
   1c7fc:	str	r0, [sp, #116]	; 0x74
   1c800:	beq	1c5d8 <__assert_fail@plt+0xb074>
   1c804:	mov	r5, r0
   1c808:	b	1c850 <__assert_fail@plt+0xb2ec>
   1c80c:	ldr	r3, [sp, #96]	; 0x60
   1c810:	b	1c5dc <__assert_fail@plt+0xb078>
   1c814:	ldrsb	r3, [r6, #52]	; 0x34
   1c818:	cmp	r3, #0
   1c81c:	bge	1c838 <__assert_fail@plt+0xb2d4>
   1c820:	mov	r2, r5
   1c824:	mov	r1, r6
   1c828:	add	r0, sp, #140	; 0x8c
   1c82c:	bl	194a0 <__assert_fail@plt+0x7f3c>
   1c830:	cmp	r0, #0
   1c834:	beq	1c5f0 <__assert_fail@plt+0xb08c>
   1c838:	ldr	r3, [sp, #56]	; 0x38
   1c83c:	cmp	r3, #0
   1c840:	movne	r2, #1
   1c844:	movne	r3, r5
   1c848:	strne	r2, [sp, #52]	; 0x34
   1c84c:	bne	1c5f8 <__assert_fail@plt+0xb094>
   1c850:	cmn	r5, #1
   1c854:	bne	1cb9c <__assert_fail@plt+0xb638>
   1c858:	add	r0, sp, #140	; 0x8c
   1c85c:	bl	167e4 <__assert_fail@plt+0x5280>
   1c860:	ldr	r3, [sp, #108]	; 0x6c
   1c864:	ldr	r2, [sp, #80]	; 0x50
   1c868:	add	r3, r3, r2
   1c86c:	str	r3, [sp, #108]	; 0x6c
   1c870:	b	1c350 <__assert_fail@plt+0xadec>
   1c874:	ldr	r8, [sp, #224]	; 0xe0
   1c878:	mov	r9, #0
   1c87c:	ldr	r3, [r6, #8]
   1c880:	cmp	r9, r3
   1c884:	ldrge	r0, [sp, #12]
   1c888:	bge	1ca24 <__assert_fail@plt+0xb4c0>
   1c88c:	ldr	r3, [r6, #12]
   1c890:	ldr	r3, [r3, r9, lsl #2]
   1c894:	str	r3, [sp, #76]	; 0x4c
   1c898:	ldr	r2, [sp, #76]	; 0x4c
   1c89c:	ldr	r3, [r8]
   1c8a0:	add	r3, r3, r2, lsl #3
   1c8a4:	ldrb	r2, [r3, #6]
   1c8a8:	tst	r2, #16
   1c8ac:	beq	1ca00 <__assert_fail@plt+0xb49c>
   1c8b0:	ldr	r7, [r3, #4]
   1c8b4:	ldr	r3, [pc, #2444]	; 1d248 <__assert_fail@plt+0xbce4>
   1c8b8:	tst	r7, r3
   1c8bc:	beq	1c918 <__assert_fail@plt+0xb3b4>
   1c8c0:	ldr	r2, [sp, #228]	; 0xe4
   1c8c4:	ldr	r1, [sp, #180]	; 0xb4
   1c8c8:	add	r0, sp, #140	; 0x8c
   1c8cc:	bl	18c54 <__assert_fail@plt+0x76f0>
   1c8d0:	ldr	r3, [pc, #2420]	; 1d24c <__assert_fail@plt+0xbce8>
   1c8d4:	and	r3, r3, r7, lsr #8
   1c8d8:	tst	r3, #4
   1c8dc:	beq	1c8e8 <__assert_fail@plt+0xb384>
   1c8e0:	tst	r0, #1
   1c8e4:	beq	1ca00 <__assert_fail@plt+0xb49c>
   1c8e8:	tst	r3, #8
   1c8ec:	beq	1c8f8 <__assert_fail@plt+0xb394>
   1c8f0:	tst	r0, #1
   1c8f4:	bne	1ca00 <__assert_fail@plt+0xb49c>
   1c8f8:	tst	r3, #32
   1c8fc:	beq	1c908 <__assert_fail@plt+0xb3a4>
   1c900:	tst	r0, #2
   1c904:	beq	1ca00 <__assert_fail@plt+0xb49c>
   1c908:	tst	r3, #128	; 0x80
   1c90c:	beq	1c918 <__assert_fail@plt+0xb3b4>
   1c910:	tst	r0, #8
   1c914:	beq	1ca00 <__assert_fail@plt+0xb49c>
   1c918:	ldr	r3, [sp, #180]	; 0xb4
   1c91c:	add	r2, sp, #140	; 0x8c
   1c920:	ldr	r1, [sp, #76]	; 0x4c
   1c924:	mov	r0, r8
   1c928:	bl	175a8 <__assert_fail@plt+0x6044>
   1c92c:	cmp	r0, #0
   1c930:	beq	1ca00 <__assert_fail@plt+0xb49c>
   1c934:	ldr	r7, [sp, #180]	; 0xb4
   1c938:	ldr	r3, [sp, #260]	; 0x104
   1c93c:	add	r7, r0, r7
   1c940:	cmp	r3, r0
   1c944:	strge	r3, [sp, #260]	; 0x104
   1c948:	strlt	r0, [sp, #260]	; 0x104
   1c94c:	mov	r1, r7
   1c950:	add	r0, sp, #140	; 0x8c
   1c954:	bl	16b4c <__assert_fail@plt+0x55e8>
   1c958:	cmp	r0, #0
   1c95c:	str	r0, [sp, #128]	; 0x80
   1c960:	bne	1ca24 <__assert_fail@plt+0xb4c0>
   1c964:	ldr	r3, [r8, #12]
   1c968:	ldr	r2, [sp, #76]	; 0x4c
   1c96c:	mov	r1, #12
   1c970:	ldr	r2, [r3, r2, lsl #2]
   1c974:	ldr	r3, [r8, #24]
   1c978:	mla	r2, r1, r2, r3
   1c97c:	ldr	r3, [sp, #240]	; 0xf0
   1c980:	ldr	r3, [r3, r7, lsl #2]
   1c984:	cmp	r3, #0
   1c988:	str	r3, [sp, #76]	; 0x4c
   1c98c:	bne	1ca08 <__assert_fail@plt+0xb4a4>
   1c990:	ldm	r2, {r0, r1, r2}
   1c994:	add	r3, sp, #276	; 0x114
   1c998:	stm	r3, {r0, r1, r2}
   1c99c:	sub	r1, r7, #1
   1c9a0:	ldr	r2, [sp, #228]	; 0xe4
   1c9a4:	add	r0, sp, #140	; 0x8c
   1c9a8:	bl	18c54 <__assert_fail@plt+0x76f0>
   1c9ac:	ldr	r3, [sp, #240]	; 0xf0
   1c9b0:	add	r2, sp, #276	; 0x114
   1c9b4:	str	r3, [sp, #100]	; 0x64
   1c9b8:	mov	r1, r8
   1c9bc:	mov	r3, r0
   1c9c0:	add	r0, sp, #128	; 0x80
   1c9c4:	bl	17cd4 <__assert_fail@plt+0x6770>
   1c9c8:	ldr	r3, [sp, #100]	; 0x64
   1c9cc:	str	r0, [r3, r7, lsl #2]
   1c9d0:	ldr	r3, [sp, #76]	; 0x4c
   1c9d4:	cmp	r3, #0
   1c9d8:	beq	1c9e4 <__assert_fail@plt+0xb480>
   1c9dc:	ldr	r0, [sp, #284]	; 0x11c
   1c9e0:	bl	1370c <__assert_fail@plt+0x21a8>
   1c9e4:	ldr	r3, [sp, #240]	; 0xf0
   1c9e8:	ldr	r3, [r3, r7, lsl #2]
   1c9ec:	cmp	r3, #0
   1c9f0:	bne	1ca00 <__assert_fail@plt+0xb49c>
   1c9f4:	ldr	r0, [sp, #128]	; 0x80
   1c9f8:	cmp	r0, #0
   1c9fc:	bne	1ca24 <__assert_fail@plt+0xb4c0>
   1ca00:	add	r9, r9, #1
   1ca04:	b	1c87c <__assert_fail@plt+0xb318>
   1ca08:	ldr	r3, [sp, #76]	; 0x4c
   1ca0c:	add	r0, sp, #276	; 0x114
   1ca10:	ldr	r1, [r3, #40]	; 0x28
   1ca14:	bl	17b9c <__assert_fail@plt+0x6638>
   1ca18:	cmp	r0, #0
   1ca1c:	str	r0, [sp, #128]	; 0x80
   1ca20:	beq	1c99c <__assert_fail@plt+0xb438>
   1ca24:	cmp	r0, #0
   1ca28:	str	r0, [sp, #116]	; 0x74
   1ca2c:	beq	1c67c <__assert_fail@plt+0xb118>
   1ca30:	mov	r7, #0
   1ca34:	b	1c6a0 <__assert_fail@plt+0xb13c>
   1ca38:	ldr	r7, [r6, #48]	; 0x30
   1ca3c:	cmp	r7, #0
   1ca40:	beq	1ca68 <__assert_fail@plt+0xb504>
   1ca44:	ldr	r1, [sp, #180]	; 0xb4
   1ca48:	ldr	r2, [sp, #228]	; 0xe4
   1ca4c:	sub	r1, r1, #1
   1ca50:	add	r0, sp, #140	; 0x8c
   1ca54:	bl	18c54 <__assert_fail@plt+0x76f0>
   1ca58:	tst	r0, #1
   1ca5c:	addne	r8, r8, #256	; 0x100
   1ca60:	ldr	r7, [r7, r8, lsl #2]
   1ca64:	b	1c6a0 <__assert_fail@plt+0xb13c>
   1ca68:	mov	r1, r6
   1ca6c:	ldr	r0, [sp, #224]	; 0xe0
   1ca70:	bl	19e60 <__assert_fail@plt+0x88fc>
   1ca74:	subs	r7, r0, #0
   1ca78:	bne	1c690 <__assert_fail@plt+0xb12c>
   1ca7c:	mov	r3, #12
   1ca80:	str	r3, [sp, #116]	; 0x74
   1ca84:	b	1c6a0 <__assert_fail@plt+0xb13c>
   1ca88:	ldr	r3, [sp, #56]	; 0x38
   1ca8c:	eor	r8, r3, #1
   1ca90:	ldr	r3, [sp, #52]	; 0x34
   1ca94:	ands	r8, r8, r3
   1ca98:	bne	1c6e0 <__assert_fail@plt+0xb17c>
   1ca9c:	mov	r9, #1
   1caa0:	ldr	ip, [sp, #244]	; 0xf4
   1caa4:	ldr	r3, [sp, #180]	; 0xb4
   1caa8:	ldr	r0, [sp, #240]	; 0xf0
   1caac:	mov	r2, r8
   1cab0:	add	r1, r3, #1
   1cab4:	cmp	ip, r1
   1cab8:	bge	1cac8 <__assert_fail@plt+0xb564>
   1cabc:	cmp	r2, #0
   1cac0:	strne	r3, [sp, #180]	; 0xb4
   1cac4:	b	1c6e0 <__assert_fail@plt+0xb17c>
   1cac8:	mov	r3, r1
   1cacc:	ldr	r1, [r0, r1, lsl #2]
   1cad0:	mov	r2, r9
   1cad4:	cmp	r1, #0
   1cad8:	beq	1cab0 <__assert_fail@plt+0xb54c>
   1cadc:	mov	r2, #0
   1cae0:	add	r1, sp, #140	; 0x8c
   1cae4:	add	r0, sp, #116	; 0x74
   1cae8:	str	r3, [sp, #180]	; 0xb4
   1caec:	bl	1b828 <__assert_fail@plt+0xa2c4>
   1caf0:	ldr	r3, [sp, #116]	; 0x74
   1caf4:	cmp	r3, #0
   1caf8:	mov	r7, r0
   1cafc:	bne	1cb90 <__assert_fail@plt+0xb62c>
   1cb00:	cmp	r0, #0
   1cb04:	beq	1caa0 <__assert_fail@plt+0xb53c>
   1cb08:	ldr	r3, [sp, #44]	; 0x2c
   1cb0c:	ldr	r2, [sp, #72]	; 0x48
   1cb10:	cmp	r6, r7
   1cb14:	movne	r3, #0
   1cb18:	andeq	r3, r3, #1
   1cb1c:	str	r3, [sp, #44]	; 0x2c
   1cb20:	ldr	r1, [sp, #44]	; 0x2c
   1cb24:	ldr	r3, [sp, #64]	; 0x40
   1cb28:	cmp	r1, #0
   1cb2c:	moveq	r3, r2
   1cb30:	str	r3, [sp, #64]	; 0x40
   1cb34:	ldrb	r3, [r7, #52]	; 0x34
   1cb38:	tst	r3, #16
   1cb3c:	beq	1cb80 <__assert_fail@plt+0xb61c>
   1cb40:	tst	r3, #128	; 0x80
   1cb44:	beq	1cb60 <__assert_fail@plt+0xb5fc>
   1cb48:	ldr	r2, [sp, #180]	; 0xb4
   1cb4c:	mov	r1, r7
   1cb50:	add	r0, sp, #140	; 0x8c
   1cb54:	bl	194a0 <__assert_fail@plt+0x7f3c>
   1cb58:	cmp	r0, #0
   1cb5c:	beq	1cb80 <__assert_fail@plt+0xb61c>
   1cb60:	ldr	r3, [sp, #56]	; 0x38
   1cb64:	ldr	r5, [sp, #180]	; 0xb4
   1cb68:	cmp	r3, #0
   1cb6c:	beq	1c850 <__assert_fail@plt+0xb2ec>
   1cb70:	mov	r3, #1
   1cb74:	str	r3, [sp, #52]	; 0x34
   1cb78:	mov	r3, #0
   1cb7c:	str	r3, [sp, #48]	; 0x30
   1cb80:	ldr	r3, [sp, #64]	; 0x40
   1cb84:	mov	r6, r7
   1cb88:	str	r3, [sp, #72]	; 0x48
   1cb8c:	b	1c608 <__assert_fail@plt+0xb0a4>
   1cb90:	cmp	r0, #0
   1cb94:	bne	1cb08 <__assert_fail@plt+0xb5a4>
   1cb98:	b	1c6e0 <__assert_fail@plt+0xb17c>
   1cb9c:	cmn	r5, #2
   1cba0:	beq	1c2b8 <__assert_fail@plt+0xad54>
   1cba4:	ldrb	r6, [sl, #28]
   1cba8:	ldr	r3, [sp, #16]
   1cbac:	str	r5, [sp, #232]	; 0xe8
   1cbb0:	lsr	r6, r6, #4
   1cbb4:	eor	r6, r6, #1
   1cbb8:	cmp	r3, #1
   1cbbc:	movls	r6, #0
   1cbc0:	andhi	r6, r6, #1
   1cbc4:	cmp	r6, #0
   1cbc8:	bne	1cbd8 <__assert_fail@plt+0xb674>
   1cbcc:	ldr	r3, [fp, #76]	; 0x4c
   1cbd0:	cmp	r3, #0
   1cbd4:	beq	1cc04 <__assert_fail@plt+0xb6a0>
   1cbd8:	ldr	r3, [sp, #240]	; 0xf0
   1cbdc:	mov	r2, r5
   1cbe0:	add	r0, sp, #140	; 0x8c
   1cbe4:	ldr	r1, [r3, r5, lsl #2]
   1cbe8:	bl	194a0 <__assert_fail@plt+0x7f3c>
   1cbec:	cmp	r6, #0
   1cbf0:	str	r0, [sp, #236]	; 0xec
   1cbf4:	beq	1cc04 <__assert_fail@plt+0xb6a0>
   1cbf8:	ldrb	r3, [fp, #88]	; 0x58
   1cbfc:	tst	r3, #1
   1cc00:	bne	1cc10 <__assert_fail@plt+0xb6ac>
   1cc04:	ldr	r3, [fp, #76]	; 0x4c
   1cc08:	cmp	r3, #0
   1cc0c:	beq	1cde8 <__assert_fail@plt+0xb884>
   1cc10:	ldr	r3, [sp, #224]	; 0xe0
   1cc14:	cmn	r5, #-1073741822	; 0xc0000002
   1cc18:	str	r3, [sp, #48]	; 0x30
   1cc1c:	ldr	r3, [sp, #236]	; 0xec
   1cc20:	str	r3, [sp, #44]	; 0x2c
   1cc24:	bhi	1c2b8 <__assert_fail@plt+0xad54>
   1cc28:	add	r9, r5, #1
   1cc2c:	lsl	r9, r9, #2
   1cc30:	mov	r0, r9
   1cc34:	bl	2141c <__assert_fail@plt+0xfeb8>
   1cc38:	subs	r7, r0, #0
   1cc3c:	beq	1cdac <__assert_fail@plt+0xb848>
   1cc40:	ldr	r3, [sp, #48]	; 0x30
   1cc44:	ldr	r6, [r3, #76]	; 0x4c
   1cc48:	cmp	r6, #0
   1cc4c:	beq	1cd3c <__assert_fail@plt+0xb7d8>
   1cc50:	mov	r0, r9
   1cc54:	bl	2141c <__assert_fail@plt+0xfeb8>
   1cc58:	subs	r6, r0, #0
   1cc5c:	beq	1cdb0 <__assert_fail@plt+0xb84c>
   1cc60:	mov	r9, #0
   1cc64:	add	r3, r5, #1
   1cc68:	mov	r1, r9
   1cc6c:	lsl	r2, r3, #2
   1cc70:	mov	r0, r6
   1cc74:	str	r3, [sp, #52]	; 0x34
   1cc78:	bl	11444 <memset@plt>
   1cc7c:	ldr	r3, [sp, #44]	; 0x2c
   1cc80:	add	r1, sp, #276	; 0x114
   1cc84:	add	r0, sp, #140	; 0x8c
   1cc88:	str	r3, [sp, #284]	; 0x11c
   1cc8c:	str	r7, [sp, #276]	; 0x114
   1cc90:	str	r6, [sp, #280]	; 0x118
   1cc94:	str	r5, [sp, #288]	; 0x120
   1cc98:	str	r9, [sp, #292]	; 0x124
   1cc9c:	str	r9, [sp, #296]	; 0x128
   1cca0:	str	r9, [sp, #300]	; 0x12c
   1cca4:	bl	1bf6c <__assert_fail@plt+0xaa08>
   1cca8:	mov	r8, r0
   1ccac:	ldr	r0, [sp, #300]	; 0x12c
   1ccb0:	bl	1370c <__assert_fail@plt+0x21a8>
   1ccb4:	cmp	r8, #0
   1ccb8:	bne	1cdb4 <__assert_fail@plt+0xb850>
   1ccbc:	ldr	r3, [r7]
   1ccc0:	cmp	r3, #0
   1ccc4:	bne	1cd0c <__assert_fail@plt+0xb7a8>
   1ccc8:	ldr	r3, [r6]
   1cccc:	cmp	r3, #0
   1ccd0:	bne	1cd0c <__assert_fail@plt+0xb7a8>
   1ccd4:	ldr	r2, [sp, #240]	; 0xf0
   1ccd8:	subs	r5, r5, #1
   1ccdc:	bcc	1cde0 <__assert_fail@plt+0xb87c>
   1cce0:	ldr	r1, [r2, r5, lsl #2]
   1cce4:	cmp	r1, #0
   1cce8:	beq	1ccd8 <__assert_fail@plt+0xb774>
   1ccec:	ldrb	r3, [r1, #52]	; 0x34
   1ccf0:	tst	r3, #16
   1ccf4:	beq	1ccd8 <__assert_fail@plt+0xb774>
   1ccf8:	mov	r2, r5
   1ccfc:	add	r0, sp, #140	; 0x8c
   1cd00:	bl	194a0 <__assert_fail@plt+0x7f3c>
   1cd04:	str	r0, [sp, #44]	; 0x2c
   1cd08:	b	1cc64 <__assert_fail@plt+0xb700>
   1cd0c:	add	r3, r5, #1
   1cd10:	mov	r2, r6
   1cd14:	mov	r1, r7
   1cd18:	ldr	r0, [sp, #48]	; 0x30
   1cd1c:	bl	1a8fc <__assert_fail@plt+0x9398>
   1cd20:	mov	r8, r0
   1cd24:	mov	r0, r6
   1cd28:	bl	1370c <__assert_fail@plt+0x21a8>
   1cd2c:	cmp	r8, #0
   1cd30:	beq	1cd88 <__assert_fail@plt+0xb824>
   1cd34:	mov	r6, #0
   1cd38:	b	1cdb4 <__assert_fail@plt+0xb850>
   1cd3c:	ldr	r3, [sp, #44]	; 0x2c
   1cd40:	add	r1, sp, #276	; 0x114
   1cd44:	add	r0, sp, #140	; 0x8c
   1cd48:	str	r3, [sp, #284]	; 0x11c
   1cd4c:	str	r7, [sp, #276]	; 0x114
   1cd50:	str	r6, [sp, #280]	; 0x118
   1cd54:	str	r5, [sp, #288]	; 0x120
   1cd58:	str	r6, [sp, #292]	; 0x124
   1cd5c:	str	r6, [sp, #296]	; 0x128
   1cd60:	str	r6, [sp, #300]	; 0x12c
   1cd64:	bl	1bf6c <__assert_fail@plt+0xaa08>
   1cd68:	mov	r8, r0
   1cd6c:	ldr	r0, [sp, #300]	; 0x12c
   1cd70:	bl	1370c <__assert_fail@plt+0x21a8>
   1cd74:	cmp	r8, #0
   1cd78:	bne	1cdb4 <__assert_fail@plt+0xb850>
   1cd7c:	ldr	r2, [r7]
   1cd80:	cmp	r2, #0
   1cd84:	beq	1cddc <__assert_fail@plt+0xb878>
   1cd88:	ldr	r0, [sp, #240]	; 0xf0
   1cd8c:	bl	1370c <__assert_fail@plt+0x21a8>
   1cd90:	ldr	r3, [sp, #44]	; 0x2c
   1cd94:	str	r7, [sp, #240]	; 0xf0
   1cd98:	str	r3, [sp, #236]	; 0xec
   1cd9c:	str	r5, [sp, #232]	; 0xe8
   1cda0:	ldr	r8, [sp, #12]
   1cda4:	mov	r7, #0
   1cda8:	b	1cd34 <__assert_fail@plt+0xb7d0>
   1cdac:	mov	r6, r7
   1cdb0:	mov	r8, #12
   1cdb4:	mov	r0, r7
   1cdb8:	bl	1370c <__assert_fail@plt+0x21a8>
   1cdbc:	mov	r0, r6
   1cdc0:	bl	1370c <__assert_fail@plt+0x21a8>
   1cdc4:	cmp	r8, #0
   1cdc8:	beq	1cde8 <__assert_fail@plt+0xb884>
   1cdcc:	cmp	r8, #1
   1cdd0:	beq	1c858 <__assert_fail@plt+0xb2f4>
   1cdd4:	str	r8, [sp, #12]
   1cdd8:	b	1ce00 <__assert_fail@plt+0xb89c>
   1cddc:	mov	r6, r8
   1cde0:	mov	r8, #1
   1cde4:	b	1cdb4 <__assert_fail@plt+0xb850>
   1cde8:	ldr	r3, [sp, #16]
   1cdec:	cmp	r3, #0
   1cdf0:	addne	r3, r4, #8
   1cdf4:	movne	r7, #1
   1cdf8:	mvnne	r2, #0
   1cdfc:	bne	1ce4c <__assert_fail@plt+0xb8e8>
   1ce00:	ldr	r0, [sp, #240]	; 0xf0
   1ce04:	bl	1370c <__assert_fail@plt+0x21a8>
   1ce08:	ldr	r3, [fp, #76]	; 0x4c
   1ce0c:	cmp	r3, #0
   1ce10:	beq	1ce2c <__assert_fail@plt+0xb8c8>
   1ce14:	add	r0, sp, #140	; 0x8c
   1ce18:	bl	167e4 <__assert_fail@plt+0x5280>
   1ce1c:	ldr	r0, [sp, #272]	; 0x110
   1ce20:	bl	1370c <__assert_fail@plt+0x21a8>
   1ce24:	ldr	r0, [sp, #256]	; 0x100
   1ce28:	bl	1370c <__assert_fail@plt+0x21a8>
   1ce2c:	add	r0, sp, #140	; 0x8c
   1ce30:	bl	16658 <__assert_fail@plt+0x50f4>
   1ce34:	ldr	r0, [sp, #12]
   1ce38:	add	sp, sp, #420	; 0x1a4
   1ce3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce40:	add	r7, r7, #1
   1ce44:	str	r2, [r3, #-4]
   1ce48:	str	r2, [r3, #-8]
   1ce4c:	ldr	r1, [sp, #16]
   1ce50:	add	r3, r3, #8
   1ce54:	cmp	r7, r1
   1ce58:	bne	1ce40 <__assert_fail@plt+0xb8dc>
   1ce5c:	mov	r3, #0
   1ce60:	str	r3, [r4]
   1ce64:	ldr	r3, [sp, #232]	; 0xe8
   1ce68:	str	r3, [r4, #4]
   1ce6c:	ldrb	r3, [sl, #28]
   1ce70:	lsr	r3, r3, #4
   1ce74:	eor	r3, r3, #1
   1ce78:	cmp	r7, #1
   1ce7c:	moveq	r3, #0
   1ce80:	andne	r3, r3, #1
   1ce84:	cmp	r3, #0
   1ce88:	bne	1cf80 <__assert_fail@plt+0xba1c>
   1ce8c:	ldrb	r8, [sp, #216]	; 0xd8
   1ce90:	ldr	ip, [sp, #168]	; 0xa8
   1ce94:	ldr	r5, [sp, #152]	; 0x98
   1ce98:	ldr	lr, [sp, #172]	; 0xac
   1ce9c:	ldr	r6, [sp, #108]	; 0x6c
   1cea0:	mov	r1, r4
   1cea4:	mov	r2, r4
   1cea8:	mov	r3, #0
   1ceac:	ldr	r0, [r4, r3, lsl #3]
   1ceb0:	cmn	r0, #1
   1ceb4:	beq	1cefc <__assert_fail@plt+0xb998>
   1ceb8:	cmp	r8, #0
   1cebc:	beq	1cee4 <__assert_fail@plt+0xb980>
   1cec0:	cmp	r0, ip
   1cec4:	moveq	r0, lr
   1cec8:	ldrne	r0, [r5, r0, lsl #2]
   1cecc:	str	r0, [r4, r3, lsl #3]
   1ced0:	ldr	r0, [r2, #4]
   1ced4:	cmp	ip, r0
   1ced8:	moveq	r0, lr
   1cedc:	ldrne	r0, [r5, r0, lsl #2]
   1cee0:	str	r0, [r2, #4]
   1cee4:	ldr	r0, [r4, r3, lsl #3]
   1cee8:	add	r0, r0, r6
   1ceec:	str	r0, [r4, r3, lsl #3]
   1cef0:	ldr	r0, [r2, #4]
   1cef4:	add	r0, r0, r6
   1cef8:	str	r0, [r2, #4]
   1cefc:	add	r3, r3, #1
   1cf00:	cmp	r7, r3
   1cf04:	add	r2, r2, #8
   1cf08:	bne	1ceac <__assert_fail@plt+0xb948>
   1cf0c:	ldr	r2, [sp, #16]
   1cf10:	mvn	r0, #0
   1cf14:	add	r6, r4, r2, lsl #3
   1cf18:	mov	r2, #0
   1cf1c:	ldr	ip, [sp, #68]	; 0x44
   1cf20:	add	r6, r6, #8
   1cf24:	cmp	r2, ip
   1cf28:	blt	1d398 <__assert_fail@plt+0xbe34>
   1cf2c:	ldr	r2, [fp, #132]	; 0x84
   1cf30:	cmp	r2, #0
   1cf34:	movne	ip, #0
   1cf38:	beq	1ce00 <__assert_fail@plt+0xb89c>
   1cf3c:	add	lr, ip, #1
   1cf40:	cmp	r3, lr
   1cf44:	beq	1ce00 <__assert_fail@plt+0xb89c>
   1cf48:	ldr	r0, [r2]
   1cf4c:	cmp	ip, r0
   1cf50:	beq	1cf70 <__assert_fail@plt+0xba0c>
   1cf54:	add	r0, r0, #1
   1cf58:	ldr	r0, [r4, r0, lsl #3]
   1cf5c:	str	r0, [r1, #8]
   1cf60:	ldr	r0, [r2]
   1cf64:	add	r0, r4, r0, lsl #3
   1cf68:	ldr	r0, [r0, #12]
   1cf6c:	str	r0, [r1, #12]
   1cf70:	add	r2, r2, #4
   1cf74:	add	r1, r1, #8
   1cf78:	mov	ip, lr
   1cf7c:	b	1cf3c <__assert_fail@plt+0xb9d8>
   1cf80:	ldrb	r3, [fp, #88]	; 0x58
   1cf84:	tst	r3, #1
   1cf88:	beq	1cfa0 <__assert_fail@plt+0xba3c>
   1cf8c:	ldr	r5, [fp, #76]	; 0x4c
   1cf90:	cmp	r5, #0
   1cf94:	movle	r3, #0
   1cf98:	movgt	r3, #1
   1cf9c:	str	r3, [sp, #28]
   1cfa0:	ldr	r3, [sl]
   1cfa4:	mov	r2, #2
   1cfa8:	str	r3, [sp, #32]
   1cfac:	mov	r3, #0
   1cfb0:	str	r3, [sp, #128]	; 0x80
   1cfb4:	str	r3, [sp, #136]	; 0x88
   1cfb8:	str	r3, [sp, #276]	; 0x114
   1cfbc:	mov	r3, #16
   1cfc0:	str	r3, [sp, #280]	; 0x118
   1cfc4:	add	r3, sp, #288	; 0x120
   1cfc8:	str	r3, [sp, #284]	; 0x11c
   1cfcc:	ldr	r3, [sp, #28]
   1cfd0:	str	r2, [sp, #132]	; 0x84
   1cfd4:	cmp	r3, #0
   1cfd8:	beq	1d080 <__assert_fail@plt+0xbb1c>
   1cfdc:	mov	r0, #48	; 0x30
   1cfe0:	bl	2141c <__assert_fail@plt+0xfeb8>
   1cfe4:	cmp	r0, #0
   1cfe8:	str	r0, [sp, #136]	; 0x88
   1cfec:	addne	r5, sp, #128	; 0x80
   1cff0:	beq	1c2b8 <__assert_fail@plt+0xad54>
   1cff4:	ldr	r3, [sp, #32]
   1cff8:	ldr	r2, [sp, #16]
   1cffc:	ldr	r6, [r3, #72]	; 0x48
   1d000:	mov	r3, #0
   1d004:	str	r3, [sp, #116]	; 0x74
   1d008:	str	r3, [sp, #120]	; 0x78
   1d00c:	str	r3, [sp, #124]	; 0x7c
   1d010:	ldr	r3, [sp, #276]	; 0x114
   1d014:	cmp	r2, r3
   1d018:	ldrls	r3, [sp, #16]
   1d01c:	strls	r3, [sp, #276]	; 0x114
   1d020:	bls	1d5ec <__assert_fail@plt+0xc088>
   1d024:	add	r8, sp, #288	; 0x120
   1d028:	mov	r3, #8
   1d02c:	mov	r2, r8
   1d030:	ldr	r1, [sp, #16]
   1d034:	add	r0, sp, #276	; 0x114
   1d038:	bl	21528 <__assert_fail@plt+0xffc4>
   1d03c:	cmp	r0, #0
   1d040:	bne	1d5ec <__assert_fail@plt+0xc088>
   1d044:	ldr	r0, [sp, #284]	; 0x11c
   1d048:	cmp	r0, r8
   1d04c:	beq	1d054 <__assert_fail@plt+0xbaf0>
   1d050:	bl	1370c <__assert_fail@plt+0x21a8>
   1d054:	add	r3, sp, #288	; 0x120
   1d058:	str	r3, [sp, #284]	; 0x11c
   1d05c:	mov	r3, #0
   1d060:	str	r3, [sp, #276]	; 0x114
   1d064:	mvn	r3, #0
   1d068:	str	r3, [sp, #280]	; 0x118
   1d06c:	add	r0, sp, #276	; 0x114
   1d070:	bl	16878 <__assert_fail@plt+0x5314>
   1d074:	mov	r0, r5
   1d078:	bl	168a8 <__assert_fail@plt+0x5344>
   1d07c:	b	1c2b8 <__assert_fail@plt+0xad54>
   1d080:	ldr	r5, [sp, #28]
   1d084:	b	1cff4 <__assert_fail@plt+0xba90>
   1d088:	cmp	ip, #9
   1d08c:	bne	1d674 <__assert_fail@plt+0xc110>
   1d090:	ldr	r3, [r3, r1]
   1d094:	add	r3, r3, #1
   1d098:	cmp	r7, r3
   1d09c:	ble	1d674 <__assert_fail@plt+0xc110>
   1d0a0:	ldr	ip, [r4, r3, lsl #3]
   1d0a4:	add	r1, r4, r3, lsl #3
   1d0a8:	cmp	r2, ip
   1d0ac:	ble	1d0c8 <__assert_fail@plt+0xbb64>
   1d0b0:	str	r2, [r1, #4]
   1d0b4:	ldr	r0, [sp, #20]
   1d0b8:	ldr	r2, [sp, #24]
   1d0bc:	mov	r1, r4
   1d0c0:	bl	11264 <memcpy@plt>
   1d0c4:	b	1d674 <__assert_fail@plt+0xc110>
   1d0c8:	ldrb	r0, [r0, #6]
   1d0cc:	tst	r0, #8
   1d0d0:	beq	1d0f0 <__assert_fail@plt+0xbb8c>
   1d0d4:	ldr	r0, [sp, #20]
   1d0d8:	ldr	r3, [r0, r3, lsl #3]
   1d0dc:	cmn	r3, #1
   1d0e0:	movne	r1, r0
   1d0e4:	ldrne	r2, [sp, #24]
   1d0e8:	movne	r0, r4
   1d0ec:	bne	1d0c0 <__assert_fail@plt+0xbb5c>
   1d0f0:	str	r2, [r1, #4]
   1d0f4:	b	1d674 <__assert_fail@plt+0xc110>
   1d0f8:	cmp	r5, #0
   1d0fc:	beq	1d14c <__assert_fail@plt+0xbbe8>
   1d100:	mov	r2, r4
   1d104:	mov	r3, #0
   1d108:	ldr	r1, [r4, r3, lsl #3]
   1d10c:	cmp	r1, #0
   1d110:	blt	1d174 <__assert_fail@plt+0xbc10>
   1d114:	ldr	r1, [r2, #4]
   1d118:	cmn	r1, #1
   1d11c:	bne	1d174 <__assert_fail@plt+0xbc10>
   1d120:	add	r3, sp, #116	; 0x74
   1d124:	str	r3, [sp, #4]
   1d128:	ldr	r3, [sp, #20]
   1d12c:	mov	r2, r7
   1d130:	str	r3, [sp]
   1d134:	ldr	r1, [sp, #28]
   1d138:	mov	r3, r4
   1d13c:	mov	r0, r5
   1d140:	bl	16bd8 <__assert_fail@plt+0x5674>
   1d144:	subs	r6, r0, #0
   1d148:	bge	1d6ac <__assert_fail@plt+0xc148>
   1d14c:	ldr	r0, [sp, #124]	; 0x7c
   1d150:	bl	1370c <__assert_fail@plt+0x21a8>
   1d154:	add	r0, sp, #276	; 0x114
   1d158:	bl	16878 <__assert_fail@plt+0x5314>
   1d15c:	mov	r0, r5
   1d160:	bl	168a8 <__assert_fail@plt+0x5344>
   1d164:	cmp	r0, #0
   1d168:	beq	1ce8c <__assert_fail@plt+0xb928>
   1d16c:	str	r0, [sp, #12]
   1d170:	b	1ce00 <__assert_fail@plt+0xb89c>
   1d174:	add	r3, r3, #1
   1d178:	cmp	r7, r3
   1d17c:	add	r2, r2, #8
   1d180:	bne	1d108 <__assert_fail@plt+0xbba4>
   1d184:	b	1d14c <__assert_fail@plt+0xbbe8>
   1d188:	mov	r1, r6
   1d18c:	add	r0, sp, #116	; 0x74
   1d190:	bl	18500 <__assert_fail@plt+0x6f9c>
   1d194:	cmp	r0, #0
   1d198:	bne	1d6fc <__assert_fail@plt+0xc198>
   1d19c:	ldr	r0, [sp, #124]	; 0x7c
   1d1a0:	bl	1370c <__assert_fail@plt+0x21a8>
   1d1a4:	b	1d06c <__assert_fail@plt+0xbb08>
   1d1a8:	mov	r6, r8
   1d1ac:	add	r3, r3, #1
   1d1b0:	b	1d708 <__assert_fail@plt+0xc1a4>
   1d1b4:	ldrb	r1, [r1, #6]
   1d1b8:	tst	r1, #16
   1d1bc:	beq	1d250 <__assert_fail@plt+0xbcec>
   1d1c0:	ldr	r3, [sp, #112]	; 0x70
   1d1c4:	add	r2, sp, #140	; 0x8c
   1d1c8:	mov	r1, r6
   1d1cc:	mov	r0, r8
   1d1d0:	bl	175a8 <__assert_fail@plt+0x6044>
   1d1d4:	subs	r3, r0, #0
   1d1d8:	bne	1d330 <__assert_fail@plt+0xbdcc>
   1d1dc:	ldr	r1, [r8]
   1d1e0:	ldr	r2, [sp, #112]	; 0x70
   1d1e4:	add	r1, r1, r9
   1d1e8:	add	r0, sp, #140	; 0x8c
   1d1ec:	bl	19374 <__assert_fail@plt+0x7e10>
   1d1f0:	cmp	r0, #0
   1d1f4:	movne	r3, #0
   1d1f8:	bne	1d330 <__assert_fail@plt+0xbdcc>
   1d1fc:	add	r3, sp, #116	; 0x74
   1d200:	str	r3, [sp, #4]
   1d204:	ldr	r3, [sp, #20]
   1d208:	mov	r2, r7
   1d20c:	str	r3, [sp]
   1d210:	ldr	r1, [sp, #28]
   1d214:	mov	r3, r4
   1d218:	mov	r0, r5
   1d21c:	bl	16bd8 <__assert_fail@plt+0x5674>
   1d220:	subs	r6, r0, #0
   1d224:	bge	1d62c <__assert_fail@plt+0xc0c8>
   1d228:	ldr	r0, [sp, #124]	; 0x7c
   1d22c:	bl	1370c <__assert_fail@plt+0x21a8>
   1d230:	add	r0, sp, #276	; 0x114
   1d234:	bl	16878 <__assert_fail@plt+0x5314>
   1d238:	mov	r0, r5
   1d23c:	bl	168a8 <__assert_fail@plt+0x5344>
   1d240:	b	1c37c <__assert_fail@plt+0xae18>
   1d244:	beq	feac7cf4 <optarg@@GLIBC_2.4+0xfea93b2c>
   1d248:	andeq	pc, r3, r0, lsl #30
   1d24c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1d250:	cmp	r2, #4
   1d254:	bne	1d1dc <__assert_fail@plt+0xbc78>
   1d258:	ldr	r3, [r3, r9]
   1d25c:	add	r3, r3, #1
   1d260:	cmp	r7, r3
   1d264:	ble	1d28c <__assert_fail@plt+0xbd28>
   1d268:	add	r2, r4, r3, lsl #3
   1d26c:	ldr	r0, [r4, r3, lsl #3]
   1d270:	ldr	r2, [r2, #4]
   1d274:	cmp	r5, #0
   1d278:	sub	r3, r2, r0
   1d27c:	bne	1d2e0 <__assert_fail@plt+0xbd7c>
   1d280:	cmp	r3, #0
   1d284:	bne	1d330 <__assert_fail@plt+0xbdcc>
   1d288:	b	1d294 <__assert_fail@plt+0xbd30>
   1d28c:	cmp	r5, #0
   1d290:	bne	1d1fc <__assert_fail@plt+0xbc98>
   1d294:	mov	r1, r6
   1d298:	add	r0, sp, #116	; 0x74
   1d29c:	bl	18500 <__assert_fail@plt+0x6f9c>
   1d2a0:	cmp	r0, #0
   1d2a4:	beq	1d19c <__assert_fail@plt+0xbc38>
   1d2a8:	ldr	r2, [r8, #20]
   1d2ac:	mov	r3, #12
   1d2b0:	mla	r6, r3, r6, r2
   1d2b4:	ldr	r2, [sp, #112]	; 0x70
   1d2b8:	ldr	r3, [r6, #8]
   1d2bc:	ldr	r6, [r3]
   1d2c0:	ldr	r3, [sp, #240]	; 0xf0
   1d2c4:	mov	r1, r6
   1d2c8:	ldr	r0, [r3, r2, lsl #2]
   1d2cc:	add	r0, r0, #4
   1d2d0:	bl	15098 <__assert_fail@plt+0x3b34>
   1d2d4:	cmp	r0, #0
   1d2d8:	beq	1d1dc <__assert_fail@plt+0xbc78>
   1d2dc:	b	1d828 <__assert_fail@plt+0xc2c4>
   1d2e0:	cmn	r0, #1
   1d2e4:	beq	1d1fc <__assert_fail@plt+0xbc98>
   1d2e8:	cmn	r2, #1
   1d2ec:	beq	1d1fc <__assert_fail@plt+0xbc98>
   1d2f0:	cmp	r3, #0
   1d2f4:	beq	1d294 <__assert_fail@plt+0xbd30>
   1d2f8:	ldr	r1, [sp, #112]	; 0x70
   1d2fc:	ldr	r2, [sp, #168]	; 0xa8
   1d300:	ldr	ip, [sp, #144]	; 0x90
   1d304:	sub	r2, r2, r1
   1d308:	cmp	r3, r2
   1d30c:	bgt	1d1fc <__assert_fail@plt+0xbc98>
   1d310:	mov	r2, r3
   1d314:	add	r1, ip, r1
   1d318:	add	r0, ip, r0
   1d31c:	str	r3, [sp, #40]	; 0x28
   1d320:	bl	112b8 <memcmp@plt>
   1d324:	ldr	r3, [sp, #40]	; 0x28
   1d328:	cmp	r0, #0
   1d32c:	bne	1d1fc <__assert_fail@plt+0xbc98>
   1d330:	ldr	r2, [r8, #12]
   1d334:	cmp	r3, #0
   1d338:	ldr	r6, [r2, sl, lsl #2]
   1d33c:	ldr	r2, [sp, #112]	; 0x70
   1d340:	addeq	r3, r2, #1
   1d344:	addne	r3, r3, r2
   1d348:	cmp	r5, #0
   1d34c:	str	r3, [sp, #112]	; 0x70
   1d350:	beq	1d384 <__assert_fail@plt+0xbe20>
   1d354:	ldr	r2, [sp, #232]	; 0xe8
   1d358:	cmp	r3, r2
   1d35c:	bgt	1d1fc <__assert_fail@plt+0xbc98>
   1d360:	ldr	r2, [sp, #240]	; 0xf0
   1d364:	ldr	r0, [r2, r3, lsl #2]
   1d368:	cmp	r0, #0
   1d36c:	beq	1d1fc <__assert_fail@plt+0xbc98>
   1d370:	mov	r1, r6
   1d374:	add	r0, r0, #4
   1d378:	bl	15098 <__assert_fail@plt+0x3b34>
   1d37c:	cmp	r0, #0
   1d380:	beq	1d1fc <__assert_fail@plt+0xbc98>
   1d384:	mov	r3, #0
   1d388:	str	r3, [sp, #120]	; 0x78
   1d38c:	b	1d828 <__assert_fail@plt+0xc2c4>
   1d390:	mov	r6, r8
   1d394:	b	1d828 <__assert_fail@plt+0xc2c4>
   1d398:	str	r0, [r6, #-8]
   1d39c:	str	r0, [r6, #-4]
   1d3a0:	add	r2, r2, #1
   1d3a4:	b	1cf1c <__assert_fail@plt+0xb9b8>
   1d3a8:	ldr	r3, [fp, #40]	; 0x28
   1d3ac:	cmp	r3, #0
   1d3b0:	beq	1c274 <__assert_fail@plt+0xad10>
   1d3b4:	ldr	r1, [fp, #44]	; 0x2c
   1d3b8:	cmp	r1, #0
   1d3bc:	beq	1c274 <__assert_fail@plt+0xad10>
   1d3c0:	ldr	r0, [fp, #48]	; 0x30
   1d3c4:	cmp	r0, #0
   1d3c8:	beq	1c274 <__assert_fail@plt+0xad10>
   1d3cc:	ldr	r2, [r2, #8]
   1d3d0:	cmp	r2, #0
   1d3d4:	bne	1d414 <__assert_fail@plt+0xbeb0>
   1d3d8:	ldr	r3, [r3, #8]
   1d3dc:	cmp	r3, #0
   1d3e0:	bne	1d414 <__assert_fail@plt+0xbeb0>
   1d3e4:	ldr	r3, [r1, #8]
   1d3e8:	cmp	r3, #0
   1d3ec:	beq	1d3fc <__assert_fail@plt+0xbe98>
   1d3f0:	ldrsb	r3, [sl, #28]
   1d3f4:	cmp	r3, #0
   1d3f8:	blt	1d414 <__assert_fail@plt+0xbeb0>
   1d3fc:	cmp	r5, #0
   1d400:	cmpne	r8, #0
   1d404:	movne	r8, #1
   1d408:	moveq	r8, #0
   1d40c:	bne	1c274 <__assert_fail@plt+0xad10>
   1d410:	mov	r5, r8
   1d414:	ldr	r3, [sp, #68]	; 0x44
   1d418:	subs	r3, r6, r3
   1d41c:	str	r3, [sp, #16]
   1d420:	movne	r3, #1
   1d424:	bne	1d434 <__assert_fail@plt+0xbed0>
   1d428:	ldr	r3, [fp, #76]	; 0x4c
   1d42c:	adds	r3, r3, #0
   1d430:	movne	r3, #1
   1d434:	ldr	ip, [sp, #32]
   1d438:	str	r3, [sp, #56]	; 0x38
   1d43c:	ldr	r3, [sl, #20]
   1d440:	ldr	r2, [fp, #8]
   1d444:	str	ip, [sp, #140]	; 0x8c
   1d448:	ldr	ip, [sp, #36]	; 0x24
   1d44c:	ldr	r0, [fp, #92]	; 0x5c
   1d450:	str	r3, [sp, #24]
   1d454:	ldr	r3, [sl, #12]
   1d458:	add	r2, r2, #1
   1d45c:	str	ip, [sp, #188]	; 0xbc
   1d460:	str	ip, [sp, #184]	; 0xb8
   1d464:	ldr	ip, [sp, #24]
   1d468:	cmp	r2, r0
   1d46c:	movlt	r2, r0
   1d470:	lsr	r3, r3, #22
   1d474:	adds	r6, ip, #0
   1d478:	and	r3, r3, #1
   1d47c:	movne	r6, #1
   1d480:	strb	r3, [sp, #212]	; 0xd4
   1d484:	orr	r3, r3, r6
   1d488:	strb	r3, [sp, #215]	; 0xd7
   1d48c:	ldrb	r3, [fp, #88]	; 0x58
   1d490:	ldr	r1, [sp, #36]	; 0x24
   1d494:	str	r0, [sp, #220]	; 0xdc
   1d498:	add	r1, r1, #1
   1d49c:	lsr	r0, r3, #2
   1d4a0:	lsr	r3, r3, #3
   1d4a4:	and	r3, r3, #1
   1d4a8:	cmp	r2, r1
   1d4ac:	and	r0, r0, #1
   1d4b0:	strb	r3, [sp, #214]	; 0xd6
   1d4b4:	ldr	r3, [sp, #36]	; 0x24
   1d4b8:	strb	r0, [sp, #213]	; 0xd5
   1d4bc:	movlt	r1, r2
   1d4c0:	add	r0, sp, #140	; 0x8c
   1d4c4:	str	r3, [sp, #196]	; 0xc4
   1d4c8:	str	r3, [sp, #192]	; 0xc0
   1d4cc:	str	ip, [sp, #204]	; 0xcc
   1d4d0:	bl	156b4 <__assert_fail@plt+0x4150>
   1d4d4:	subs	r3, r0, #0
   1d4d8:	str	r3, [sp, #12]
   1d4dc:	bne	1ce00 <__assert_fail@plt+0xb89c>
   1d4e0:	add	r3, fp, #96	; 0x60
   1d4e4:	str	r3, [sp, #208]	; 0xd0
   1d4e8:	ldrb	r3, [fp, #88]	; 0x58
   1d4ec:	lsr	r3, r3, #4
   1d4f0:	and	r3, r3, #1
   1d4f4:	strb	r3, [sp, #218]	; 0xda
   1d4f8:	ldrb	r3, [sp, #215]	; 0xd7
   1d4fc:	cmp	r3, #0
   1d500:	ldrne	r2, [sp, #144]	; 0x90
   1d504:	ldreq	r2, [sp, #32]
   1d508:	cmp	r3, #0
   1d50c:	str	r2, [sp, #144]	; 0x90
   1d510:	movne	r3, #0
   1d514:	bne	1d52c <__assert_fail@plt+0xbfc8>
   1d518:	ldr	r3, [fp, #92]	; 0x5c
   1d51c:	ldr	r2, [sp, #36]	; 0x24
   1d520:	cmp	r3, #1
   1d524:	movgt	r2, #0
   1d528:	mov	r3, r2
   1d52c:	str	r3, [sp, #168]	; 0xa8
   1d530:	str	r3, [sp, #172]	; 0xac
   1d534:	ldrb	r3, [sl, #28]
   1d538:	str	r7, [sp, #196]	; 0xc4
   1d53c:	str	r7, [sp, #192]	; 0xc0
   1d540:	lsr	r3, r3, #7
   1d544:	strb	r3, [sp, #217]	; 0xd9
   1d548:	ldr	r9, [fp, #76]	; 0x4c
   1d54c:	ldr	r3, [sp, #472]	; 0x1d8
   1d550:	lsl	r7, r9, #1
   1d554:	str	r3, [sp, #228]	; 0xe4
   1d558:	cmp	r7, #0
   1d55c:	mvn	r3, #0
   1d560:	str	r3, [sp, #232]	; 0xe8
   1d564:	bgt	1c280 <__assert_fail@plt+0xad1c>
   1d568:	mov	r3, #1
   1d56c:	str	r3, [sp, #260]	; 0x104
   1d570:	ldr	r3, [sp, #16]
   1d574:	str	r7, [sp, #252]	; 0xfc
   1d578:	cmp	r3, #1
   1d57c:	str	r7, [sp, #268]	; 0x10c
   1d580:	bhi	1c2c0 <__assert_fail@plt+0xad5c>
   1d584:	ldrb	r3, [fp, #88]	; 0x58
   1d588:	tst	r3, #2
   1d58c:	bne	1c2c0 <__assert_fail@plt+0xad5c>
   1d590:	ldr	r3, [sp, #472]	; 0x1d8
   1d594:	str	r5, [sp, #108]	; 0x6c
   1d598:	tst	r3, #1
   1d59c:	moveq	r3, #6
   1d5a0:	movne	r3, #4
   1d5a4:	cmp	r5, r8
   1d5a8:	str	r3, [sp, #200]	; 0xc8
   1d5ac:	movle	r3, #1
   1d5b0:	mvngt	r3, #0
   1d5b4:	str	r3, [sp, #80]	; 0x50
   1d5b8:	movlt	r3, r5
   1d5bc:	movge	r3, r8
   1d5c0:	str	r3, [sp, #60]	; 0x3c
   1d5c4:	movge	r3, r5
   1d5c8:	movlt	r3, r8
   1d5cc:	str	r3, [sp, #40]	; 0x28
   1d5d0:	ldr	r3, [fp, #92]	; 0x5c
   1d5d4:	str	r3, [sp, #92]	; 0x5c
   1d5d8:	ldr	r3, [sp, #20]
   1d5dc:	cmp	r3, #0
   1d5e0:	bne	1c2e8 <__assert_fail@plt+0xad84>
   1d5e4:	mov	r3, #8
   1d5e8:	b	1c32c <__assert_fail@plt+0xadc8>
   1d5ec:	ldr	r3, [sp, #284]	; 0x11c
   1d5f0:	mov	r1, r4
   1d5f4:	str	r3, [sp, #20]
   1d5f8:	ldr	r3, [sp, #16]
   1d5fc:	ldr	r0, [sp, #20]
   1d600:	lsl	r3, r3, #3
   1d604:	mov	r2, r3
   1d608:	str	r3, [sp, #24]
   1d60c:	bl	11264 <memcpy@plt>
   1d610:	ldr	r3, [r4]
   1d614:	add	r2, sp, #416	; 0x1a0
   1d618:	str	r3, [r2, #-304]!	; 0xfffffed0
   1d61c:	ldr	r3, [sp, #16]
   1d620:	str	r2, [sp, #28]
   1d624:	lsl	r3, r3, #4
   1d628:	str	r3, [sp, #36]	; 0x24
   1d62c:	ldr	r2, [sp, #112]	; 0x70
   1d630:	ldr	r3, [r4, #4]
   1d634:	cmp	r2, r3
   1d638:	bgt	1d14c <__assert_fail@plt+0xbbe8>
   1d63c:	ldr	r3, [sp, #32]
   1d640:	lsl	r1, r6, #3
   1d644:	ldr	r3, [r3]
   1d648:	add	r0, r3, r1
   1d64c:	ldrb	ip, [r0, #4]
   1d650:	cmp	ip, #8
   1d654:	bne	1d088 <__assert_fail@plt+0xbb24>
   1d658:	ldr	r3, [r3, r6, lsl #3]
   1d65c:	add	r3, r3, #1
   1d660:	cmp	r7, r3
   1d664:	addgt	r1, r4, r3, lsl #3
   1d668:	strgt	r2, [r4, r3, lsl #3]
   1d66c:	mvngt	r3, #0
   1d670:	strgt	r3, [r1, #4]
   1d674:	ldr	r2, [r4, #4]
   1d678:	ldr	r3, [sp, #112]	; 0x70
   1d67c:	cmp	r2, r3
   1d680:	bne	1d690 <__assert_fail@plt+0xc12c>
   1d684:	ldr	r3, [sp, #236]	; 0xec
   1d688:	cmp	r6, r3
   1d68c:	beq	1d0f8 <__assert_fail@plt+0xbb94>
   1d690:	cmp	r5, #0
   1d694:	beq	1d6ac <__assert_fail@plt+0xc148>
   1d698:	mov	r1, r6
   1d69c:	add	r0, sp, #116	; 0x74
   1d6a0:	bl	15098 <__assert_fail@plt+0x3b34>
   1d6a4:	cmp	r0, #0
   1d6a8:	bne	1d100 <__assert_fail@plt+0xbb9c>
   1d6ac:	ldr	r8, [sp, #224]	; 0xe0
   1d6b0:	lsl	r9, r6, #3
   1d6b4:	mov	sl, r6
   1d6b8:	ldr	r3, [r8]
   1d6bc:	add	r1, r3, r9
   1d6c0:	ldrb	r2, [r1, #4]
   1d6c4:	tst	r2, #8
   1d6c8:	beq	1d1b4 <__assert_fail@plt+0xbc50>
   1d6cc:	ldr	r3, [sp, #240]	; 0xf0
   1d6d0:	ldr	r2, [sp, #112]	; 0x70
   1d6d4:	mov	sl, #12
   1d6d8:	mov	r1, r6
   1d6dc:	ldr	r9, [r3, r2, lsl #2]
   1d6e0:	ldr	r3, [r8, #20]
   1d6e4:	add	r0, sp, #116	; 0x74
   1d6e8:	mla	sl, sl, r6, r3
   1d6ec:	bl	15098 <__assert_fail@plt+0x3b34>
   1d6f0:	add	r9, r9, #4
   1d6f4:	cmp	r0, #0
   1d6f8:	beq	1d188 <__assert_fail@plt+0xbc24>
   1d6fc:	ldr	r2, [sl, #4]
   1d700:	mov	r3, #0
   1d704:	mvn	r6, #0
   1d708:	cmp	r3, r2
   1d70c:	bge	1d828 <__assert_fail@plt+0xc2c4>
   1d710:	ldr	r1, [sl, #8]
   1d714:	mov	r0, r9
   1d718:	str	r2, [sp, #44]	; 0x2c
   1d71c:	ldr	r8, [r1, r3, lsl #2]
   1d720:	str	r3, [sp, #40]	; 0x28
   1d724:	mov	r1, r8
   1d728:	bl	15098 <__assert_fail@plt+0x3b34>
   1d72c:	ldr	r3, [sp, #40]	; 0x28
   1d730:	ldr	r2, [sp, #44]	; 0x2c
   1d734:	cmp	r0, #0
   1d738:	beq	1d1ac <__assert_fail@plt+0xbc48>
   1d73c:	cmn	r6, #1
   1d740:	beq	1d1a8 <__assert_fail@plt+0xbc44>
   1d744:	mov	r1, r6
   1d748:	add	r0, sp, #116	; 0x74
   1d74c:	bl	15098 <__assert_fail@plt+0x3b34>
   1d750:	cmp	r0, #0
   1d754:	bne	1d390 <__assert_fail@plt+0xbe2c>
   1d758:	cmp	r5, #0
   1d75c:	beq	1d828 <__assert_fail@plt+0xc2c4>
   1d760:	ldr	r9, [r5]
   1d764:	ldr	r2, [r5, #4]
   1d768:	add	r3, r9, #1
   1d76c:	cmp	r3, r2
   1d770:	ldr	sl, [sp, #112]	; 0x70
   1d774:	str	r3, [r5]
   1d778:	bne	1d7a4 <__assert_fail@plt+0xc240>
   1d77c:	mov	r1, #48	; 0x30
   1d780:	ldr	r0, [r5, #8]
   1d784:	mul	r1, r1, r3
   1d788:	bl	2145c <__assert_fail@plt+0xfef8>
   1d78c:	cmp	r0, #0
   1d790:	beq	1d19c <__assert_fail@plt+0xbc38>
   1d794:	ldr	r3, [r5, #4]
   1d798:	str	r0, [r5, #8]
   1d79c:	lsl	r3, r3, #1
   1d7a0:	str	r3, [r5, #4]
   1d7a4:	mov	r0, #24
   1d7a8:	ldr	r2, [r5, #8]
   1d7ac:	mul	r9, r0, r9
   1d7b0:	ldr	r0, [sp, #36]	; 0x24
   1d7b4:	add	r3, r2, r9
   1d7b8:	str	sl, [r2, r9]
   1d7bc:	str	r8, [r3, #4]
   1d7c0:	str	r3, [sp, #40]	; 0x28
   1d7c4:	bl	2141c <__assert_fail@plt+0xfeb8>
   1d7c8:	ldr	r3, [sp, #40]	; 0x28
   1d7cc:	str	r0, [r3, #8]
   1d7d0:	ldr	r3, [r5, #8]
   1d7d4:	add	r3, r3, r9
   1d7d8:	ldr	r0, [r3, #8]
   1d7dc:	cmp	r0, #0
   1d7e0:	beq	1d19c <__assert_fail@plt+0xbc38>
   1d7e4:	ldr	r2, [sp, #24]
   1d7e8:	mov	r1, r4
   1d7ec:	bl	11264 <memcpy@plt>
   1d7f0:	ldr	r3, [r5, #8]
   1d7f4:	ldr	r2, [sp, #24]
   1d7f8:	add	r3, r3, r9
   1d7fc:	ldr	r1, [sp, #20]
   1d800:	ldr	r0, [r3, #8]
   1d804:	add	r0, r0, r2
   1d808:	bl	11264 <memcpy@plt>
   1d80c:	ldr	r0, [r5, #8]
   1d810:	add	r1, sp, #116	; 0x74
   1d814:	add	r0, r0, r9
   1d818:	add	r0, r0, #12
   1d81c:	bl	17b24 <__assert_fail@plt+0x65c0>
   1d820:	cmp	r0, #0
   1d824:	bne	1d19c <__assert_fail@plt+0xbc38>
   1d828:	cmp	r6, #0
   1d82c:	bge	1d62c <__assert_fail@plt+0xc0c8>
   1d830:	cmn	r6, #2
   1d834:	bne	1d1fc <__assert_fail@plt+0xbc98>
   1d838:	b	1d19c <__assert_fail@plt+0xbc38>
   1d83c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d840:	sub	sp, sp, #156	; 0x9c
   1d844:	mov	fp, r0
   1d848:	ldr	r9, [sp, #196]	; 0xc4
   1d84c:	mov	r5, r1
   1d850:	mov	sl, r2
   1d854:	and	r6, r3, #16777216	; 0x1000000
   1d858:	and	r7, r3, #32
   1d85c:	and	r8, r3, #16
   1d860:	str	r3, [sp, #12]
   1d864:	ldrb	r3, [sl, #4]
   1d868:	ldr	r4, [r5]
   1d86c:	sub	r2, r3, #1
   1d870:	cmp	r2, #35	; 0x23
   1d874:	ldrls	pc, [pc, r2, lsl #2]
   1d878:	b	1e378 <__assert_fail@plt+0xce14>
   1d87c:	andeq	sp, r1, ip, lsl #18
   1d880:	andeq	sp, r1, r0, lsl fp
   1d884:	andeq	lr, r1, r8, ror r3
   1d888:	andeq	lr, r1, r4, asr #32
   1d88c:	strdeq	lr, [r1], -r0
   1d890:	andeq	lr, r1, r8, ror r3
   1d894:	andeq	lr, r1, r8, ror r3
   1d898:	andeq	sp, r1, r0, ror #20
   1d89c:	andeq	lr, r1, r0, ror #1
   1d8a0:	andeq	sp, r1, r0, lsl fp
   1d8a4:	strheq	lr, [r1], -r4
   1d8a8:	andeq	lr, r1, r8, lsr #2
   1d8ac:	andeq	lr, r1, r8, ror r3
   1d8b0:	andeq	lr, r1, r8, ror r3
   1d8b4:	andeq	lr, r1, r8, ror r3
   1d8b8:	andeq	lr, r1, r8, ror r3
   1d8bc:	andeq	lr, r1, r8, ror r3
   1d8c0:	strheq	lr, [r1], -r4
   1d8c4:	strheq	lr, [r1], -r4
   1d8c8:	andeq	sp, r1, ip, asr fp
   1d8cc:	andeq	lr, r1, r8, ror r3
   1d8d0:	andeq	lr, r1, r8, ror r3
   1d8d4:	andeq	lr, r1, r4, lsr #1
   1d8d8:	andeq	lr, r1, r0, lsl #2
   1d8dc:	andeq	lr, r1, r8, ror r3
   1d8e0:	andeq	lr, r1, r8, ror r3
   1d8e4:	andeq	lr, r1, r8, ror r3
   1d8e8:	andeq	lr, r1, r8, ror r3
   1d8ec:	andeq	lr, r1, r8, ror r3
   1d8f0:	andeq	lr, r1, r8, ror r3
   1d8f4:	andeq	lr, r1, r8, ror r3
   1d8f8:	andeq	lr, r1, ip, lsl r3
   1d8fc:	andeq	lr, r1, ip, lsl r3
   1d900:	andeq	lr, r1, r0, asr r3
   1d904:	andeq	lr, r1, r0, asr r3
   1d908:	andeq	lr, r1, r0, ror r3
   1d90c:	mov	r2, #0
   1d910:	mov	r3, sl
   1d914:	mov	r1, r2
   1d918:	mov	r0, r4
   1d91c:	bl	157a0 <__assert_fail@plt+0x423c>
   1d920:	subs	r5, r0, #0
   1d924:	bne	1d934 <__assert_fail@plt+0xc3d0>
   1d928:	mov	r3, #12
   1d92c:	str	r3, [r9]
   1d930:	b	1db10 <__assert_fail@plt+0xc5ac>
   1d934:	ldr	r3, [r4, #92]	; 0x5c
   1d938:	cmp	r3, #1
   1d93c:	movgt	r7, #0
   1d940:	movgt	r8, #16
   1d944:	bgt	1da30 <__assert_fail@plt+0xc4cc>
   1d948:	ldr	r2, [sp, #12]
   1d94c:	mov	r1, fp
   1d950:	mov	r0, sl
   1d954:	bl	19b88 <__assert_fail@plt+0x8624>
   1d958:	ldrb	r3, [sl, #4]
   1d95c:	cmp	r3, #23
   1d960:	movhi	r7, #1
   1d964:	ldrls	r2, [pc, #3844]	; 1e870 <__assert_fail@plt+0xd30c>
   1d968:	sub	r8, r3, #18
   1d96c:	clz	r8, r8
   1d970:	mvnls	r7, r2, lsr r3
   1d974:	ands	r7, r7, #1
   1d978:	lsr	r8, r8, #5
   1d97c:	bne	1e0f4 <__assert_fail@plt+0xcb90>
   1d980:	ldr	r2, [fp, #40]	; 0x28
   1d984:	ldm	sl, {r0, r1}
   1d988:	str	r2, [sp, #16]
   1d98c:	add	r2, sp, #120	; 0x78
   1d990:	cmp	r3, #23
   1d994:	stm	r2, {r0, r1}
   1d998:	bne	1e494 <__assert_fail@plt+0xcf30>
   1d99c:	ldr	r2, [sp, #12]
   1d9a0:	mov	r1, sl
   1d9a4:	mov	r0, fp
   1d9a8:	bl	19ba4 <__assert_fail@plt+0x8640>
   1d9ac:	cmn	r0, #1
   1d9b0:	mov	r8, r0
   1d9b4:	bne	1e378 <__assert_fail@plt+0xce14>
   1d9b8:	ldrb	r3, [sl, #4]
   1d9bc:	cmp	r3, #1
   1d9c0:	bne	1d9d4 <__assert_fail@plt+0xc470>
   1d9c4:	ldrb	r3, [sl]
   1d9c8:	cmp	r3, #44	; 0x2c
   1d9cc:	moveq	r8, r7
   1d9d0:	beq	1e3e4 <__assert_fail@plt+0xce80>
   1d9d4:	mov	r3, #10
   1d9d8:	str	r3, [r9]
   1d9dc:	mov	r6, #0
   1d9e0:	b	1e3ac <__assert_fail@plt+0xce48>
   1d9e4:	ldr	r2, [sp, #12]
   1d9e8:	mov	r1, fp
   1d9ec:	mov	r0, sl
   1d9f0:	bl	19b88 <__assert_fail@plt+0x8624>
   1d9f4:	mov	r3, sl
   1d9f8:	mov	r2, r7
   1d9fc:	mov	r1, #0
   1da00:	mov	r0, r4
   1da04:	bl	157a0 <__assert_fail@plt+0x423c>
   1da08:	mov	r1, r5
   1da0c:	mov	r3, r8
   1da10:	mov	r6, r0
   1da14:	mov	r2, r0
   1da18:	mov	r0, r4
   1da1c:	bl	158f0 <__assert_fail@plt+0x438c>
   1da20:	cmp	r0, #0
   1da24:	cmpne	r6, #0
   1da28:	mov	r5, r0
   1da2c:	beq	1d928 <__assert_fail@plt+0xc3c4>
   1da30:	ldr	r3, [fp, #40]	; 0x28
   1da34:	ldr	r2, [fp, #56]	; 0x38
   1da38:	cmp	r2, r3
   1da3c:	ble	1d948 <__assert_fail@plt+0xc3e4>
   1da40:	ldr	r2, [fp, #28]
   1da44:	cmp	r3, r2
   1da48:	beq	1d948 <__assert_fail@plt+0xc3e4>
   1da4c:	ldr	r2, [fp, #8]
   1da50:	ldr	r3, [r2, r3, lsl #2]
   1da54:	cmn	r3, #1
   1da58:	beq	1d9e4 <__assert_fail@plt+0xc480>
   1da5c:	b	1d948 <__assert_fail@plt+0xc3e4>
   1da60:	ldr	r6, [r5, #24]
   1da64:	mov	r1, fp
   1da68:	add	r3, r6, #1
   1da6c:	str	r3, [r5, #24]
   1da70:	ldr	r3, [sp, #12]
   1da74:	mov	r0, sl
   1da78:	orr	r2, r3, #8388608	; 0x800000
   1da7c:	bl	19b88 <__assert_fail@plt+0x8624>
   1da80:	ldrb	r3, [sl, #4]
   1da84:	cmp	r3, #9
   1da88:	beq	1db18 <__assert_fail@plt+0xc5b4>
   1da8c:	ldr	r3, [sp, #192]	; 0xc0
   1da90:	mov	r2, sl
   1da94:	add	r3, r3, #1
   1da98:	str	r3, [sp]
   1da9c:	mov	r1, r5
   1daa0:	str	r9, [sp, #4]
   1daa4:	ldr	r3, [sp, #12]
   1daa8:	mov	r0, fp
   1daac:	bl	1e9ec <__assert_fail@plt+0xd488>
   1dab0:	ldr	r2, [r9]
   1dab4:	cmp	r2, #0
   1dab8:	mov	r5, r0
   1dabc:	bne	1dae4 <__assert_fail@plt+0xc580>
   1dac0:	ldrb	r3, [sl, #4]
   1dac4:	cmp	r3, #9
   1dac8:	beq	1dae4 <__assert_fail@plt+0xc580>
   1dacc:	cmp	r0, #0
   1dad0:	beq	1dadc <__assert_fail@plt+0xc578>
   1dad4:	ldr	r1, [pc, #3480]	; 1e874 <__assert_fail@plt+0xd310>
   1dad8:	bl	155dc <__assert_fail@plt+0x4078>
   1dadc:	mov	r3, #8
   1dae0:	str	r3, [r9]
   1dae4:	ldr	r3, [r9]
   1dae8:	cmp	r3, #0
   1daec:	beq	1db1c <__assert_fail@plt+0xc5b8>
   1daf0:	mov	r5, #0
   1daf4:	ldr	r3, [r9]
   1daf8:	adds	r3, r3, #0
   1dafc:	movne	r3, #1
   1db00:	cmp	r5, #0
   1db04:	movne	r3, #0
   1db08:	cmp	r3, #0
   1db0c:	beq	1d948 <__assert_fail@plt+0xc3e4>
   1db10:	mov	r5, #0
   1db14:	b	1e0f4 <__assert_fail@plt+0xcb90>
   1db18:	mov	r5, #0
   1db1c:	cmp	r6, #8
   1db20:	movls	r2, #1
   1db24:	ldrls	r3, [r4, #84]	; 0x54
   1db28:	mov	r1, r5
   1db2c:	orrls	r3, r3, r2, lsl r6
   1db30:	mov	r0, r4
   1db34:	strls	r3, [r4, #84]	; 0x54
   1db38:	mov	r2, #0
   1db3c:	mov	r3, #17
   1db40:	bl	158f0 <__assert_fail@plt+0x438c>
   1db44:	subs	r5, r0, #0
   1db48:	strne	r6, [r5, #20]
   1db4c:	bne	1daf4 <__assert_fail@plt+0xc590>
   1db50:	mov	r3, #12
   1db54:	str	r3, [r9]
   1db58:	b	1daf4 <__assert_fail@plt+0xc590>
   1db5c:	mov	r5, #0
   1db60:	mov	r1, #1
   1db64:	mov	r0, #32
   1db68:	str	r5, [sp, #60]	; 0x3c
   1db6c:	bl	213d4 <__assert_fail@plt+0xfe70>
   1db70:	mov	r1, #1
   1db74:	str	r0, [sp, #16]
   1db78:	mov	r0, #40	; 0x28
   1db7c:	bl	213d4 <__assert_fail@plt+0xfe70>
   1db80:	ldr	r3, [sp, #16]
   1db84:	cmp	r0, r5
   1db88:	cmpne	r3, r5
   1db8c:	moveq	r3, #1
   1db90:	movne	r3, #0
   1db94:	mov	r6, r0
   1db98:	str	r3, [sp, #36]	; 0x24
   1db9c:	bne	1dbb4 <__assert_fail@plt+0xc650>
   1dba0:	ldr	r0, [sp, #16]
   1dba4:	bl	1370c <__assert_fail@plt+0x21a8>
   1dba8:	mov	r0, r6
   1dbac:	bl	1370c <__assert_fail@plt+0x21a8>
   1dbb0:	b	1db50 <__assert_fail@plt+0xc5ec>
   1dbb4:	ldr	r2, [sp, #12]
   1dbb8:	mov	r1, fp
   1dbbc:	mov	r0, sl
   1dbc0:	bl	150fc <__assert_fail@plt+0x3b98>
   1dbc4:	ldrb	r3, [sl, #4]
   1dbc8:	cmp	r3, #2
   1dbcc:	str	r0, [sp, #24]
   1dbd0:	bne	1dbe0 <__assert_fail@plt+0xc67c>
   1dbd4:	mov	r3, #2
   1dbd8:	str	r3, [r9]
   1dbdc:	b	1dcb8 <__assert_fail@plt+0xc754>
   1dbe0:	cmp	r3, #25
   1dbe4:	ldrne	r3, [sp, #36]	; 0x24
   1dbe8:	bne	1dc44 <__assert_fail@plt+0xc6e0>
   1dbec:	ldrb	r3, [r6, #16]
   1dbf0:	orr	r3, r3, #1
   1dbf4:	strb	r3, [r6, #16]
   1dbf8:	ldr	r3, [sp, #12]
   1dbfc:	tst	r3, #256	; 0x100
   1dc00:	beq	1dc10 <__assert_fail@plt+0xc6ac>
   1dc04:	mov	r1, #10
   1dc08:	ldr	r0, [sp, #16]
   1dc0c:	bl	14f00 <__assert_fail@plt+0x399c>
   1dc10:	ldr	r3, [fp, #40]	; 0x28
   1dc14:	ldr	r2, [sp, #24]
   1dc18:	mov	r1, fp
   1dc1c:	add	r3, r3, r2
   1dc20:	str	r3, [fp, #40]	; 0x28
   1dc24:	ldr	r2, [sp, #12]
   1dc28:	mov	r0, sl
   1dc2c:	bl	150fc <__assert_fail@plt+0x3b98>
   1dc30:	ldrb	r3, [sl, #4]
   1dc34:	cmp	r3, #2
   1dc38:	movne	r3, #1
   1dc3c:	str	r0, [sp, #24]
   1dc40:	beq	1dbd4 <__assert_fail@plt+0xc670>
   1dc44:	str	r3, [sp, #40]	; 0x28
   1dc48:	ldrb	r3, [sl, #4]
   1dc4c:	mov	r2, #0
   1dc50:	str	r2, [sp, #28]
   1dc54:	cmp	r3, #21
   1dc58:	ldr	r2, [sp, #12]
   1dc5c:	moveq	r3, #1
   1dc60:	strbeq	r3, [sl, #4]
   1dc64:	mov	r3, #0
   1dc68:	str	r3, [sp, #32]
   1dc6c:	lsr	r2, r2, #16
   1dc70:	mov	r3, #1
   1dc74:	and	r2, r2, r3
   1dc78:	str	r2, [sp, #44]	; 0x2c
   1dc7c:	add	r0, sp, #152	; 0x98
   1dc80:	mov	r7, #3
   1dc84:	str	r7, [r0, #-88]!	; 0xffffffa8
   1dc88:	str	r3, [sp, #4]
   1dc8c:	ldr	r3, [sp, #12]
   1dc90:	add	r2, sp, #88	; 0x58
   1dc94:	str	r2, [sp, #68]	; 0x44
   1dc98:	str	r3, [sp]
   1dc9c:	mov	r2, sl
   1dca0:	ldr	r3, [sp, #24]
   1dca4:	mov	r1, fp
   1dca8:	bl	19c54 <__assert_fail@plt+0x86f0>
   1dcac:	subs	r5, r0, #0
   1dcb0:	beq	1dccc <__assert_fail@plt+0xc768>
   1dcb4:	str	r5, [r9]
   1dcb8:	ldr	r0, [sp, #16]
   1dcbc:	bl	1370c <__assert_fail@plt+0x21a8>
   1dcc0:	mov	r0, r6
   1dcc4:	bl	1634c <__assert_fail@plt+0x4de8>
   1dcc8:	b	1daf0 <__assert_fail@plt+0xc58c>
   1dccc:	ldr	r2, [sp, #12]
   1dcd0:	mov	r1, fp
   1dcd4:	mov	r0, sl
   1dcd8:	bl	150fc <__assert_fail@plt+0x3b98>
   1dcdc:	ldr	r3, [sp, #64]	; 0x40
   1dce0:	sub	r3, r3, #2
   1dce4:	bics	r3, r3, #2
   1dce8:	str	r0, [sp, #24]
   1dcec:	beq	1dd5c <__assert_fail@plt+0xc7f8>
   1dcf0:	ldrb	r3, [sl, #4]
   1dcf4:	cmp	r3, #2
   1dcf8:	bne	1dd04 <__assert_fail@plt+0xc7a0>
   1dcfc:	mov	r3, #7
   1dd00:	b	1dbd8 <__assert_fail@plt+0xc674>
   1dd04:	cmp	r3, #22
   1dd08:	bne	1dd5c <__assert_fail@plt+0xc7f8>
   1dd0c:	ldr	r3, [fp, #40]	; 0x28
   1dd10:	ldr	r2, [sp, #24]
   1dd14:	mov	r1, fp
   1dd18:	add	r3, r3, r2
   1dd1c:	str	r3, [fp, #40]	; 0x28
   1dd20:	ldr	r2, [sp, #12]
   1dd24:	add	r0, sp, #80	; 0x50
   1dd28:	bl	150fc <__assert_fail@plt+0x3b98>
   1dd2c:	ldrb	r2, [sp, #84]	; 0x54
   1dd30:	cmp	r2, #2
   1dd34:	mov	r3, r0
   1dd38:	beq	1dcfc <__assert_fail@plt+0xc798>
   1dd3c:	cmp	r2, #21
   1dd40:	bne	1e680 <__assert_fail@plt+0xd11c>
   1dd44:	ldr	r3, [fp, #40]	; 0x28
   1dd48:	ldr	r2, [sp, #24]
   1dd4c:	sub	r3, r3, r2
   1dd50:	str	r3, [fp, #40]	; 0x28
   1dd54:	mov	r3, #1
   1dd58:	strb	r3, [sl, #4]
   1dd5c:	ldr	r3, [sp, #64]	; 0x40
   1dd60:	cmp	r3, #4
   1dd64:	ldrls	pc, [pc, r3, lsl #2]
   1dd68:	b	1df20 <__assert_fail@plt+0xc9bc>
   1dd6c:	andeq	sp, r1, r8, asr #28
   1dd70:	andeq	sp, r1, r0, ror lr
   1dd74:	andeq	sp, r1, r0, asr #29
   1dd78:	andeq	sp, r1, r0, asr #29
   1dd7c:	strdeq	sp, [r1], -r0
   1dd80:	ldr	r2, [sp, #12]
   1dd84:	mov	r1, fp
   1dd88:	mov	r0, sl
   1dd8c:	bl	150fc <__assert_fail@plt+0x3b98>
   1dd90:	ldr	r8, [sp, #64]	; 0x40
   1dd94:	sub	r3, r8, #2
   1dd98:	bics	r3, r3, #2
   1dd9c:	str	r0, [sp, #24]
   1dda0:	beq	1ddb4 <__assert_fail@plt+0xc850>
   1dda4:	ldr	r7, [sp, #72]	; 0x48
   1dda8:	sub	r3, r7, #2
   1ddac:	bics	r3, r3, #2
   1ddb0:	bne	1e6c0 <__assert_fail@plt+0xd15c>
   1ddb4:	mov	r3, #11
   1ddb8:	b	1e810 <__assert_fail@plt+0xd2ac>
   1ddbc:	ldr	r0, [sp, #68]	; 0x44
   1ddc0:	bl	113fc <strlen@plt>
   1ddc4:	cmp	r0, #1
   1ddc8:	bls	1e864 <__assert_fail@plt+0xd300>
   1ddcc:	mov	r3, #3
   1ddd0:	b	1e810 <__assert_fail@plt+0xd2ac>
   1ddd4:	stmib	r6, {r2, r3}
   1ddd8:	str	r8, [sp, #32]
   1dddc:	ldr	r2, [r6, #32]
   1dde0:	ldr	r3, [r6, #4]
   1dde4:	str	r5, [r3, r2, lsl #2]
   1dde8:	ldr	r2, [r6, #8]
   1ddec:	ldr	r3, [r6, #32]
   1ddf0:	add	r1, r3, #1
   1ddf4:	str	r1, [r6, #32]
   1ddf8:	str	r7, [r2, r3, lsl #2]
   1ddfc:	mov	r8, #0
   1de00:	cmp	r5, r8
   1de04:	movhi	r3, #0
   1de08:	movls	r3, #1
   1de0c:	cmp	r7, r8
   1de10:	movcc	r3, #0
   1de14:	cmp	r3, #0
   1de18:	beq	1de28 <__assert_fail@plt+0xc8c4>
   1de1c:	mov	r1, r8
   1de20:	ldr	r0, [sp, #16]
   1de24:	bl	14f00 <__assert_fail@plt+0x399c>
   1de28:	add	r8, r8, #1
   1de2c:	cmp	r8, #256	; 0x100
   1de30:	bne	1de00 <__assert_fail@plt+0xc89c>
   1de34:	ldr	r3, [sp, #20]
   1de38:	cmp	r3, #0
   1de3c:	str	r3, [r9]
   1de40:	beq	1de54 <__assert_fail@plt+0xc8f0>
   1de44:	b	1dcb8 <__assert_fail@plt+0xc754>
   1de48:	ldrb	r1, [sp, #68]	; 0x44
   1de4c:	ldr	r0, [sp, #16]
   1de50:	bl	14f00 <__assert_fail@plt+0x399c>
   1de54:	ldrb	r3, [sl, #4]
   1de58:	cmp	r3, #2
   1de5c:	beq	1dcfc <__assert_fail@plt+0xc798>
   1de60:	cmp	r3, #21
   1de64:	beq	1df20 <__assert_fail@plt+0xc9bc>
   1de68:	ldr	r3, [sp, #36]	; 0x24
   1de6c:	b	1dc7c <__assert_fail@plt+0xc718>
   1de70:	ldr	r3, [r6, #20]
   1de74:	ldr	r2, [sp, #28]
   1de78:	cmp	r3, r2
   1de7c:	bne	1dea4 <__assert_fail@plt+0xc940>
   1de80:	lsl	r3, r2, #1
   1de84:	add	r3, r3, #1
   1de88:	ldr	r0, [r6]
   1de8c:	lsl	r1, r3, #2
   1de90:	str	r3, [sp, #28]
   1de94:	bl	2145c <__assert_fail@plt+0xfef8>
   1de98:	cmp	r0, #0
   1de9c:	beq	1e85c <__assert_fail@plt+0xd2f8>
   1dea0:	str	r0, [r6]
   1dea4:	ldr	r3, [r6, #20]
   1dea8:	ldr	r2, [r6]
   1deac:	add	r1, r3, #1
   1deb0:	str	r1, [r6, #20]
   1deb4:	ldr	r1, [sp, #68]	; 0x44
   1deb8:	str	r1, [r2, r3, lsl #2]
   1debc:	b	1de54 <__assert_fail@plt+0xc8f0>
   1dec0:	ldr	r7, [sp, #68]	; 0x44
   1dec4:	mov	r0, r7
   1dec8:	bl	113fc <strlen@plt>
   1decc:	cmp	r0, #1
   1ded0:	movne	r5, #3
   1ded4:	bne	1dee4 <__assert_fail@plt+0xc980>
   1ded8:	ldrb	r1, [r7]
   1dedc:	ldr	r0, [sp, #16]
   1dee0:	bl	14f00 <__assert_fail@plt+0x399c>
   1dee4:	str	r5, [r9]
   1dee8:	cmp	r5, #0
   1deec:	b	1de40 <__assert_fail@plt+0xc8dc>
   1def0:	ldr	r3, [sp, #12]
   1def4:	mov	r2, r6
   1def8:	str	r3, [sp, #4]
   1defc:	ldr	r3, [sp, #68]	; 0x44
   1df00:	ldr	r1, [sp, #16]
   1df04:	str	r3, [sp]
   1df08:	ldr	r0, [fp, #64]	; 0x40
   1df0c:	add	r3, sp, #60	; 0x3c
   1df10:	bl	16c80 <__assert_fail@plt+0x571c>
   1df14:	str	r0, [r9]
   1df18:	cmp	r0, #0
   1df1c:	b	1de40 <__assert_fail@plt+0xc8dc>
   1df20:	ldr	r3, [fp, #40]	; 0x28
   1df24:	ldr	r2, [sp, #24]
   1df28:	add	r3, r3, r2
   1df2c:	str	r3, [fp, #40]	; 0x28
   1df30:	ldr	r3, [sp, #40]	; 0x28
   1df34:	cmp	r3, #0
   1df38:	beq	1df44 <__assert_fail@plt+0xc9e0>
   1df3c:	ldr	r0, [sp, #16]
   1df40:	bl	14f64 <__assert_fail@plt+0x3a00>
   1df44:	ldr	r3, [r4, #92]	; 0x5c
   1df48:	cmp	r3, #1
   1df4c:	ble	1df5c <__assert_fail@plt+0xc9f8>
   1df50:	ldr	r1, [r4, #60]	; 0x3c
   1df54:	ldr	r0, [sp, #16]
   1df58:	bl	14fac <__assert_fail@plt+0x3a48>
   1df5c:	ldr	r3, [r6, #20]
   1df60:	cmp	r3, #0
   1df64:	bne	1dfb0 <__assert_fail@plt+0xca4c>
   1df68:	ldr	r3, [r6, #24]
   1df6c:	cmp	r3, #0
   1df70:	bne	1dfb0 <__assert_fail@plt+0xca4c>
   1df74:	ldr	r3, [r6, #28]
   1df78:	cmp	r3, #0
   1df7c:	bne	1dfb0 <__assert_fail@plt+0xca4c>
   1df80:	ldr	r3, [r6, #32]
   1df84:	cmp	r3, #0
   1df88:	bne	1dfb0 <__assert_fail@plt+0xca4c>
   1df8c:	ldr	r3, [r4, #92]	; 0x5c
   1df90:	cmp	r3, #1
   1df94:	ble	1e014 <__assert_fail@plt+0xcab0>
   1df98:	ldr	r3, [r6, #36]	; 0x24
   1df9c:	cmp	r3, #0
   1dfa0:	bne	1dfb0 <__assert_fail@plt+0xca4c>
   1dfa4:	ldrb	r3, [r6, #16]
   1dfa8:	tst	r3, #1
   1dfac:	beq	1e014 <__assert_fail@plt+0xcab0>
   1dfb0:	ldrb	r3, [r4, #88]	; 0x58
   1dfb4:	mov	r2, #0
   1dfb8:	mov	r1, r2
   1dfbc:	orr	r3, r3, #2
   1dfc0:	strb	r3, [r4, #88]	; 0x58
   1dfc4:	mov	r3, #6
   1dfc8:	strb	r3, [sp, #124]	; 0x7c
   1dfcc:	mov	r0, r4
   1dfd0:	add	r3, sp, #120	; 0x78
   1dfd4:	str	r6, [sp, #120]	; 0x78
   1dfd8:	bl	157a0 <__assert_fail@plt+0x423c>
   1dfdc:	subs	r5, r0, #0
   1dfe0:	beq	1e85c <__assert_fail@plt+0xd2f8>
   1dfe4:	ldr	r3, [sp, #16]
   1dfe8:	ldr	r2, [sp, #16]
   1dfec:	sub	r3, r3, #4
   1dff0:	add	r2, r2, #28
   1dff4:	ldr	r1, [r3, #4]!
   1dff8:	cmp	r1, #0
   1dffc:	bne	1e818 <__assert_fail@plt+0xd2b4>
   1e000:	cmp	r2, r3
   1e004:	bne	1dff4 <__assert_fail@plt+0xca90>
   1e008:	ldr	r0, [sp, #16]
   1e00c:	bl	1370c <__assert_fail@plt+0x21a8>
   1e010:	b	1daf4 <__assert_fail@plt+0xc590>
   1e014:	mov	r0, r6
   1e018:	bl	1634c <__assert_fail@plt+0x4de8>
   1e01c:	mov	r3, #3
   1e020:	strb	r3, [sp, #124]	; 0x7c
   1e024:	ldr	r3, [sp, #16]
   1e028:	mov	r2, #0
   1e02c:	str	r3, [sp, #120]	; 0x78
   1e030:	mov	r1, r2
   1e034:	add	r3, sp, #120	; 0x78
   1e038:	mov	r0, r4
   1e03c:	bl	157a0 <__assert_fail@plt+0x423c>
   1e040:	b	1e854 <__assert_fail@plt+0xd2f0>
   1e044:	ldr	r2, [sl]
   1e048:	mov	r3, #1
   1e04c:	ldr	r5, [r4, #84]	; 0x54
   1e050:	lsl	r3, r3, r2
   1e054:	ands	r5, r3, r5
   1e058:	moveq	r3, #6
   1e05c:	beq	1e0f0 <__assert_fail@plt+0xcb8c>
   1e060:	ldr	r2, [r4, #80]	; 0x50
   1e064:	mov	r0, r4
   1e068:	orr	r3, r2, r3
   1e06c:	mov	r2, #0
   1e070:	str	r3, [r4, #80]	; 0x50
   1e074:	mov	r1, r2
   1e078:	mov	r3, sl
   1e07c:	bl	157a0 <__assert_fail@plt+0x423c>
   1e080:	subs	r5, r0, #0
   1e084:	ldrne	r3, [r4, #76]	; 0x4c
   1e088:	addne	r3, r3, #1
   1e08c:	strne	r3, [r4, #76]	; 0x4c
   1e090:	beq	1d928 <__assert_fail@plt+0xc3c4>
   1e094:	ldrb	r3, [r4, #88]	; 0x58
   1e098:	orr	r3, r3, #2
   1e09c:	strb	r3, [r4, #88]	; 0x58
   1e0a0:	b	1d948 <__assert_fail@plt+0xc3e4>
   1e0a4:	cmp	r6, #0
   1e0a8:	beq	1e0b4 <__assert_fail@plt+0xcb50>
   1e0ac:	mov	r3, #13
   1e0b0:	b	1d92c <__assert_fail@plt+0xc3c8>
   1e0b4:	cmp	r7, #0
   1e0b8:	bne	1e0ac <__assert_fail@plt+0xcb48>
   1e0bc:	cmp	r8, #0
   1e0c0:	beq	1e0d8 <__assert_fail@plt+0xcb74>
   1e0c4:	ldr	r2, [sp, #12]
   1e0c8:	mov	r1, fp
   1e0cc:	mov	r0, sl
   1e0d0:	bl	19b88 <__assert_fail@plt+0x8624>
   1e0d4:	b	1d864 <__assert_fail@plt+0xc300>
   1e0d8:	cmp	r3, #9
   1e0dc:	bne	1e100 <__assert_fail@plt+0xcb9c>
   1e0e0:	ldr	r3, [sp, #12]
   1e0e4:	ands	r5, r3, #131072	; 0x20000
   1e0e8:	bne	1e100 <__assert_fail@plt+0xcb9c>
   1e0ec:	mov	r3, #16
   1e0f0:	str	r3, [r9]
   1e0f4:	mov	r0, r5
   1e0f8:	add	sp, sp, #156	; 0x9c
   1e0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e100:	mov	r3, #1
   1e104:	mov	r2, #0
   1e108:	strb	r3, [sl, #4]
   1e10c:	mov	r1, r2
   1e110:	mov	r3, sl
   1e114:	mov	r0, r4
   1e118:	bl	157a0 <__assert_fail@plt+0x423c>
   1e11c:	subs	r5, r0, #0
   1e120:	bne	1d948 <__assert_fail@plt+0xc3e4>
   1e124:	b	1d928 <__assert_fail@plt+0xc3c4>
   1e128:	ldr	r2, [sl]
   1e12c:	ldr	r3, [pc, #1860]	; 1e878 <__assert_fail@plt+0xd314>
   1e130:	and	r3, r3, r2
   1e134:	cmp	r3, #0
   1e138:	beq	1e188 <__assert_fail@plt+0xcc24>
   1e13c:	ldrb	r3, [r4, #88]	; 0x58
   1e140:	ands	r5, r3, #16
   1e144:	bne	1e188 <__assert_fail@plt+0xcc24>
   1e148:	orr	r3, r3, #16
   1e14c:	ands	r1, r3, #8
   1e150:	strb	r3, [r4, #88]	; 0x58
   1e154:	bne	1e280 <__assert_fail@plt+0xcd1c>
   1e158:	ldr	r2, [pc, #1820]	; 1e87c <__assert_fail@plt+0xd318>
   1e15c:	tst	r3, #4
   1e160:	str	r2, [r4, #100]	; 0x64
   1e164:	mvn	r2, #2013265921	; 0x78000001
   1e168:	str	r2, [r4, #104]	; 0x68
   1e16c:	mvn	r2, #-134217727	; 0xf8000001
   1e170:	str	r1, [r4, #96]	; 0x60
   1e174:	str	r2, [r4, #108]	; 0x6c
   1e178:	beq	1e2a0 <__assert_fail@plt+0xcd3c>
   1e17c:	mov	r2, #16
   1e180:	add	r0, r4, #112	; 0x70
   1e184:	bl	11444 <memset@plt>
   1e188:	ldr	r3, [sl]
   1e18c:	sub	r2, r3, #256	; 0x100
   1e190:	bics	r2, r2, #256	; 0x100
   1e194:	bne	1e2d0 <__assert_fail@plt+0xcd6c>
   1e198:	cmp	r3, #256	; 0x100
   1e19c:	bne	1e2ac <__assert_fail@plt+0xcd48>
   1e1a0:	mov	r3, #6
   1e1a4:	str	r3, [sl]
   1e1a8:	mov	r1, r2
   1e1ac:	mov	r3, sl
   1e1b0:	mov	r0, r4
   1e1b4:	bl	157a0 <__assert_fail@plt+0x423c>
   1e1b8:	mov	r3, #9
   1e1bc:	mov	r5, r0
   1e1c0:	mov	r2, #0
   1e1c4:	mov	r1, r2
   1e1c8:	str	r3, [sl]
   1e1cc:	mov	r0, r4
   1e1d0:	mov	r3, sl
   1e1d4:	bl	157a0 <__assert_fail@plt+0x423c>
   1e1d8:	mov	r1, r5
   1e1dc:	mov	r3, #10
   1e1e0:	mov	r2, r0
   1e1e4:	mov	r6, r0
   1e1e8:	mov	r0, r4
   1e1ec:	bl	158f0 <__assert_fail@plt+0x438c>
   1e1f0:	cmp	r6, #0
   1e1f4:	cmpne	r5, #0
   1e1f8:	moveq	r2, #1
   1e1fc:	movne	r2, #0
   1e200:	cmp	r0, #0
   1e204:	orreq	r2, r2, #1
   1e208:	cmp	r2, #0
   1e20c:	mov	r5, r0
   1e210:	bne	1d928 <__assert_fail@plt+0xc3c4>
   1e214:	ldr	r2, [sp, #12]
   1e218:	mov	r1, fp
   1e21c:	mov	r0, sl
   1e220:	bl	19b88 <__assert_fail@plt+0x8624>
   1e224:	b	1e0f4 <__assert_fail@plt+0xcb90>
   1e228:	ldrh	r7, [ip], #2
   1e22c:	add	r0, r5, r2
   1e230:	lsr	r7, r7, #3
   1e234:	cmp	r0, #95	; 0x5f
   1e238:	movne	r0, r7
   1e23c:	orreq	r0, r7, #1
   1e240:	tst	r0, #1
   1e244:	ldrne	r0, [r3]
   1e248:	orrne	r0, r0, lr, lsl r2
   1e24c:	add	r2, r2, #1
   1e250:	strne	r0, [r3]
   1e254:	cmp	r2, #32
   1e258:	bne	1e228 <__assert_fail@plt+0xccc4>
   1e25c:	add	r6, r6, #1
   1e260:	cmp	r6, #8
   1e264:	add	r5, r5, #32
   1e268:	add	r1, r1, #64	; 0x40
   1e26c:	add	r3, r3, #4
   1e270:	beq	1e188 <__assert_fail@plt+0xcc24>
   1e274:	mov	ip, r1
   1e278:	mov	r2, #0
   1e27c:	b	1e228 <__assert_fail@plt+0xccc4>
   1e280:	mov	r6, r5
   1e284:	bl	113e4 <__ctype_b_loc@plt>
   1e288:	add	r3, r6, #24
   1e28c:	mov	lr, #1
   1e290:	add	r3, r4, r3, lsl #2
   1e294:	ldr	r1, [r0]
   1e298:	add	r1, r1, r5, lsl #1
   1e29c:	b	1e274 <__assert_fail@plt+0xcd10>
   1e2a0:	mov	r5, #128	; 0x80
   1e2a4:	mov	r6, #4
   1e2a8:	b	1e284 <__assert_fail@plt+0xcd20>
   1e2ac:	mov	r3, #5
   1e2b0:	str	r3, [sl]
   1e2b4:	mov	r1, r2
   1e2b8:	mov	r3, sl
   1e2bc:	mov	r0, r4
   1e2c0:	bl	157a0 <__assert_fail@plt+0x423c>
   1e2c4:	mov	r3, #10
   1e2c8:	mov	r5, r0
   1e2cc:	b	1e1c0 <__assert_fail@plt+0xcc5c>
   1e2d0:	mov	r2, #0
   1e2d4:	mov	r3, sl
   1e2d8:	mov	r1, r2
   1e2dc:	mov	r0, r4
   1e2e0:	bl	157a0 <__assert_fail@plt+0x423c>
   1e2e4:	subs	r5, r0, #0
   1e2e8:	bne	1e214 <__assert_fail@plt+0xccb0>
   1e2ec:	b	1d928 <__assert_fail@plt+0xc3c4>
   1e2f0:	mov	r2, #0
   1e2f4:	mov	r3, sl
   1e2f8:	mov	r1, r2
   1e2fc:	mov	r0, r4
   1e300:	bl	157a0 <__assert_fail@plt+0x423c>
   1e304:	subs	r5, r0, #0
   1e308:	beq	1d928 <__assert_fail@plt+0xc3c4>
   1e30c:	ldr	r3, [r4, #92]	; 0x5c
   1e310:	cmp	r3, #1
   1e314:	bgt	1e094 <__assert_fail@plt+0xcb30>
   1e318:	b	1d948 <__assert_fail@plt+0xc3e4>
   1e31c:	sub	r3, r3, #33	; 0x21
   1e320:	clz	r3, r3
   1e324:	lsr	r3, r3, #5
   1e328:	str	r3, [sp]
   1e32c:	ldr	r2, [pc, #1356]	; 1e880 <__assert_fail@plt+0xd31c>
   1e330:	ldr	r3, [pc, #1356]	; 1e884 <__assert_fail@plt+0xd320>
   1e334:	str	r9, [sp, #4]
   1e338:	ldr	r1, [fp, #64]	; 0x40
   1e33c:	mov	r0, r4
   1e340:	bl	173f8 <__assert_fail@plt+0x5e94>
   1e344:	ldr	r3, [r9]
   1e348:	mov	r5, r0
   1e34c:	b	1daf8 <__assert_fail@plt+0xc594>
   1e350:	sub	r3, r3, #35	; 0x23
   1e354:	clz	r3, r3
   1e358:	lsr	r3, r3, #5
   1e35c:	str	r3, [sp]
   1e360:	str	r9, [sp, #4]
   1e364:	ldr	r3, [pc, #1308]	; 1e888 <__assert_fail@plt+0xd324>
   1e368:	ldr	r2, [pc, #1308]	; 1e88c <__assert_fail@plt+0xd328>
   1e36c:	b	1e338 <__assert_fail@plt+0xcdd4>
   1e370:	mov	r3, #5
   1e374:	b	1d92c <__assert_fail@plt+0xc3c8>
   1e378:	cmn	r0, #2
   1e37c:	bne	1e3e4 <__assert_fail@plt+0xce80>
   1e380:	cmn	r8, #2
   1e384:	cmnne	r7, #2
   1e388:	bne	1e44c <__assert_fail@plt+0xcee8>
   1e38c:	ldr	r3, [sp, #12]
   1e390:	ands	r6, r3, #2097152	; 0x200000
   1e394:	bne	1e428 <__assert_fail@plt+0xcec4>
   1e398:	ldrb	r3, [sl, #4]
   1e39c:	cmp	r3, #2
   1e3a0:	moveq	r3, #9
   1e3a4:	streq	r3, [r9]
   1e3a8:	bne	1d9d4 <__assert_fail@plt+0xc470>
   1e3ac:	ldr	r2, [r9]
   1e3b0:	adds	r2, r2, #0
   1e3b4:	movne	r2, #1
   1e3b8:	cmp	r6, #0
   1e3bc:	movne	r2, #0
   1e3c0:	cmp	r2, #0
   1e3c4:	beq	1e644 <__assert_fail@plt+0xd0e0>
   1e3c8:	cmp	r5, #0
   1e3cc:	beq	1db10 <__assert_fail@plt+0xc5ac>
   1e3d0:	mov	r2, #0
   1e3d4:	ldr	r1, [pc, #1176]	; 1e874 <__assert_fail@plt+0xd310>
   1e3d8:	mov	r0, r5
   1e3dc:	bl	155dc <__assert_fail@plt+0x4078>
   1e3e0:	b	1db10 <__assert_fail@plt+0xc5ac>
   1e3e4:	ldrb	r3, [sl, #4]
   1e3e8:	cmp	r3, #24
   1e3ec:	moveq	r7, r8
   1e3f0:	beq	1e380 <__assert_fail@plt+0xce1c>
   1e3f4:	cmp	r3, #1
   1e3f8:	bne	1e420 <__assert_fail@plt+0xcebc>
   1e3fc:	ldrb	r3, [sl]
   1e400:	cmp	r3, #44	; 0x2c
   1e404:	bne	1e420 <__assert_fail@plt+0xcebc>
   1e408:	ldr	r2, [sp, #12]
   1e40c:	mov	r1, sl
   1e410:	mov	r0, fp
   1e414:	bl	19ba4 <__assert_fail@plt+0x8640>
   1e418:	mov	r7, r0
   1e41c:	b	1e380 <__assert_fail@plt+0xce1c>
   1e420:	mvn	r7, #1
   1e424:	b	1e380 <__assert_fail@plt+0xce1c>
   1e428:	ldr	r3, [sp, #16]
   1e42c:	str	r3, [fp, #40]	; 0x28
   1e430:	add	r3, sp, #120	; 0x78
   1e434:	ldm	r3, {r0, r1}
   1e438:	mov	r3, #1
   1e43c:	stm	sl, {r0, r1}
   1e440:	strb	r3, [sl, #4]
   1e444:	mov	r6, r5
   1e448:	b	1e3ac <__assert_fail@plt+0xce48>
   1e44c:	cmn	r7, #1
   1e450:	cmpne	r7, r8
   1e454:	blt	1d9d4 <__assert_fail@plt+0xc470>
   1e458:	ldrb	r3, [sl, #4]
   1e45c:	cmp	r3, #24
   1e460:	bne	1d9d4 <__assert_fail@plt+0xc470>
   1e464:	cmn	r7, #1
   1e468:	ldr	r3, [pc, #1056]	; 1e890 <__assert_fail@plt+0xd32c>
   1e46c:	bne	1e48c <__assert_fail@plt+0xcf28>
   1e470:	cmp	r8, r3
   1e474:	movle	r3, #0
   1e478:	movgt	r3, #1
   1e47c:	cmp	r3, #0
   1e480:	beq	1e4a0 <__assert_fail@plt+0xcf3c>
   1e484:	mov	r3, #15
   1e488:	b	1d9d8 <__assert_fail@plt+0xc474>
   1e48c:	cmp	r7, r3
   1e490:	b	1e474 <__assert_fail@plt+0xcf10>
   1e494:	cmp	r3, #19
   1e498:	mvnne	r7, #0
   1e49c:	moveq	r7, #1
   1e4a0:	ldr	r2, [sp, #12]
   1e4a4:	mov	r1, fp
   1e4a8:	mov	r0, sl
   1e4ac:	bl	19b88 <__assert_fail@plt+0x8624>
   1e4b0:	cmp	r5, #0
   1e4b4:	beq	1e444 <__assert_fail@plt+0xcee0>
   1e4b8:	orrs	r6, r8, r7
   1e4bc:	bne	1e4d4 <__assert_fail@plt+0xcf70>
   1e4c0:	mov	r2, r6
   1e4c4:	ldr	r1, [pc, #936]	; 1e874 <__assert_fail@plt+0xd310>
   1e4c8:	mov	r0, r5
   1e4cc:	bl	155dc <__assert_fail@plt+0x4078>
   1e4d0:	b	1e3ac <__assert_fail@plt+0xce48>
   1e4d4:	cmp	r8, #0
   1e4d8:	movgt	r6, r5
   1e4dc:	strgt	r5, [sp, #16]
   1e4e0:	movgt	r3, #2
   1e4e4:	bgt	1e5b0 <__assert_fail@plt+0xd04c>
   1e4e8:	mov	r3, #0
   1e4ec:	str	r5, [sp, #16]
   1e4f0:	str	r3, [sp, #20]
   1e4f4:	ldr	r3, [sp, #16]
   1e4f8:	ldrb	r3, [r3, #24]
   1e4fc:	cmp	r3, #17
   1e500:	bne	1e518 <__assert_fail@plt+0xcfb4>
   1e504:	ldr	r3, [sp, #16]
   1e508:	ldr	r1, [pc, #900]	; 1e894 <__assert_fail@plt+0xd330>
   1e50c:	mov	r0, r3
   1e510:	ldr	r2, [r3, #20]
   1e514:	bl	155dc <__assert_fail@plt+0x4078>
   1e518:	cmn	r7, #1
   1e51c:	movne	r3, #10
   1e520:	moveq	r3, #11
   1e524:	mov	r2, #0
   1e528:	ldr	r1, [sp, #16]
   1e52c:	mov	r0, r4
   1e530:	bl	158f0 <__assert_fail@plt+0x438c>
   1e534:	subs	r6, r0, #0
   1e538:	addne	r8, r8, #2
   1e53c:	beq	1e5e4 <__assert_fail@plt+0xd080>
   1e540:	cmp	r7, r8
   1e544:	bge	1e5ec <__assert_fail@plt+0xd088>
   1e548:	ldr	r3, [sp, #20]
   1e54c:	cmp	r3, #0
   1e550:	beq	1e3ac <__assert_fail@plt+0xce48>
   1e554:	mov	r2, r6
   1e558:	mov	r3, #16
   1e55c:	ldr	r1, [sp, #20]
   1e560:	mov	r0, r4
   1e564:	bl	158f0 <__assert_fail@plt+0x438c>
   1e568:	mov	r6, r0
   1e56c:	b	1e3ac <__assert_fail@plt+0xce48>
   1e570:	mov	r1, r4
   1e574:	ldr	r0, [sp, #16]
   1e578:	bl	1584c <__assert_fail@plt+0x42e8>
   1e57c:	mov	r3, #16
   1e580:	mov	r1, r6
   1e584:	str	r0, [sp, #16]
   1e588:	mov	r2, r0
   1e58c:	mov	r0, r4
   1e590:	bl	158f0 <__assert_fail@plt+0x438c>
   1e594:	ldr	r3, [sp, #16]
   1e598:	cmp	r0, #0
   1e59c:	cmpne	r3, #0
   1e5a0:	mov	r6, r0
   1e5a4:	beq	1e5e4 <__assert_fail@plt+0xd080>
   1e5a8:	ldr	r3, [sp, #20]
   1e5ac:	add	r3, r3, #1
   1e5b0:	str	r3, [sp, #20]
   1e5b4:	ldr	r3, [sp, #20]
   1e5b8:	cmp	r8, r3
   1e5bc:	bge	1e570 <__assert_fail@plt+0xd00c>
   1e5c0:	cmp	r8, r7
   1e5c4:	beq	1e3ac <__assert_fail@plt+0xce48>
   1e5c8:	mov	r1, r4
   1e5cc:	ldr	r0, [sp, #16]
   1e5d0:	bl	1584c <__assert_fail@plt+0x42e8>
   1e5d4:	subs	r3, r0, #0
   1e5d8:	str	r3, [sp, #16]
   1e5dc:	strne	r6, [sp, #20]
   1e5e0:	bne	1e4f4 <__assert_fail@plt+0xcf90>
   1e5e4:	mov	r3, #12
   1e5e8:	b	1d9d8 <__assert_fail@plt+0xc474>
   1e5ec:	mov	r1, r4
   1e5f0:	ldr	r0, [sp, #16]
   1e5f4:	bl	1584c <__assert_fail@plt+0x42e8>
   1e5f8:	mov	r3, #16
   1e5fc:	mov	r1, r6
   1e600:	str	r0, [sp, #16]
   1e604:	mov	r2, r0
   1e608:	mov	r0, r4
   1e60c:	bl	158f0 <__assert_fail@plt+0x438c>
   1e610:	ldr	r3, [sp, #16]
   1e614:	cmp	r0, #0
   1e618:	cmpne	r3, #0
   1e61c:	mov	r1, r0
   1e620:	beq	1e5e4 <__assert_fail@plt+0xd080>
   1e624:	mov	r3, #10
   1e628:	mov	r2, #0
   1e62c:	mov	r0, r4
   1e630:	bl	158f0 <__assert_fail@plt+0x438c>
   1e634:	subs	r6, r0, #0
   1e638:	beq	1e5e4 <__assert_fail@plt+0xd080>
   1e63c:	add	r8, r8, #1
   1e640:	b	1e540 <__assert_fail@plt+0xcfdc>
   1e644:	ldr	r3, [sp, #12]
   1e648:	tst	r3, #16777216	; 0x1000000
   1e64c:	beq	1e678 <__assert_fail@plt+0xd114>
   1e650:	ldrb	r3, [sl, #4]
   1e654:	cmp	r3, #23
   1e658:	cmpne	r3, #11
   1e65c:	bne	1e678 <__assert_fail@plt+0xd114>
   1e660:	cmp	r6, #0
   1e664:	beq	1e0ac <__assert_fail@plt+0xcb48>
   1e668:	ldr	r1, [pc, #516]	; 1e874 <__assert_fail@plt+0xd310>
   1e66c:	mov	r0, r6
   1e670:	bl	155dc <__assert_fail@plt+0x4078>
   1e674:	b	1e0ac <__assert_fail@plt+0xcb48>
   1e678:	mov	r5, r6
   1e67c:	b	1d958 <__assert_fail@plt+0xc3f4>
   1e680:	add	r2, sp, #120	; 0x78
   1e684:	add	r0, sp, #152	; 0x98
   1e688:	str	r2, [sp, #76]	; 0x4c
   1e68c:	mov	r2, #1
   1e690:	str	r7, [r0, #-80]!	; 0xffffffb0
   1e694:	str	r2, [sp, #4]
   1e698:	ldr	r2, [sp, #12]
   1e69c:	mov	r1, fp
   1e6a0:	str	r2, [sp]
   1e6a4:	add	r2, sp, #80	; 0x50
   1e6a8:	bl	19c54 <__assert_fail@plt+0x86f0>
   1e6ac:	subs	r3, r0, #0
   1e6b0:	str	r3, [sp, #20]
   1e6b4:	beq	1dd80 <__assert_fail@plt+0xc81c>
   1e6b8:	ldr	r3, [sp, #20]
   1e6bc:	b	1dbd8 <__assert_fail@plt+0xc674>
   1e6c0:	cmp	r8, #3
   1e6c4:	beq	1ddbc <__assert_fail@plt+0xc858>
   1e6c8:	cmp	r7, #3
   1e6cc:	bne	1e6e0 <__assert_fail@plt+0xd17c>
   1e6d0:	ldr	r0, [sp, #76]	; 0x4c
   1e6d4:	bl	113fc <strlen@plt>
   1e6d8:	cmp	r0, #1
   1e6dc:	bhi	1ddcc <__assert_fail@plt+0xc868>
   1e6e0:	cmp	r8, #0
   1e6e4:	ldrbeq	r5, [sp, #68]	; 0x44
   1e6e8:	beq	1e700 <__assert_fail@plt+0xd19c>
   1e6ec:	cmp	r8, #3
   1e6f0:	movne	r5, #0
   1e6f4:	bne	1e700 <__assert_fail@plt+0xd19c>
   1e6f8:	ldr	r3, [sp, #68]	; 0x44
   1e6fc:	ldrb	r5, [r3]
   1e700:	cmp	r7, #0
   1e704:	ldrbeq	r7, [sp, #76]	; 0x4c
   1e708:	beq	1e71c <__assert_fail@plt+0xd1b8>
   1e70c:	cmp	r7, #3
   1e710:	movne	r7, #0
   1e714:	ldreq	r3, [sp, #76]	; 0x4c
   1e718:	ldrbeq	r7, [r3]
   1e71c:	cmp	r8, #0
   1e720:	cmpne	r8, #3
   1e724:	ldrne	r5, [sp, #68]	; 0x44
   1e728:	bne	1e744 <__assert_fail@plt+0xd1e0>
   1e72c:	ldr	r3, [r4, #92]	; 0x5c
   1e730:	cmp	r3, #1
   1e734:	ble	1e744 <__assert_fail@plt+0xd1e0>
   1e738:	mov	r0, r5
   1e73c:	bl	11450 <btowc@plt>
   1e740:	mov	r5, r0
   1e744:	ldr	r3, [sp, #72]	; 0x48
   1e748:	cmp	r3, #3
   1e74c:	cmpne	r3, #0
   1e750:	ldrne	r7, [sp, #76]	; 0x4c
   1e754:	bne	1e770 <__assert_fail@plt+0xd20c>
   1e758:	ldr	r3, [r4, #92]	; 0x5c
   1e75c:	cmp	r3, #1
   1e760:	ble	1e770 <__assert_fail@plt+0xd20c>
   1e764:	mov	r0, r7
   1e768:	bl	11450 <btowc@plt>
   1e76c:	mov	r7, r0
   1e770:	cmn	r5, #1
   1e774:	cmnne	r7, #1
   1e778:	beq	1ddcc <__assert_fail@plt+0xc868>
   1e77c:	ldr	r3, [sp, #44]	; 0x2c
   1e780:	cmp	r5, r7
   1e784:	movls	r3, #0
   1e788:	andhi	r3, r3, #1
   1e78c:	cmp	r3, #0
   1e790:	bne	1ddb4 <__assert_fail@plt+0xc850>
   1e794:	ldr	r3, [r4, #92]	; 0x5c
   1e798:	cmp	r3, #1
   1e79c:	ble	1ddfc <__assert_fail@plt+0xc898>
   1e7a0:	ldr	r3, [r6, #32]
   1e7a4:	ldr	r2, [sp, #32]
   1e7a8:	cmp	r3, r2
   1e7ac:	bne	1dddc <__assert_fail@plt+0xc878>
   1e7b0:	lsl	r8, r2, #1
   1e7b4:	add	r8, r8, #1
   1e7b8:	ldr	r0, [r6, #4]
   1e7bc:	lsl	r3, r8, #2
   1e7c0:	mov	r1, r3
   1e7c4:	str	r3, [sp, #52]	; 0x34
   1e7c8:	bl	2145c <__assert_fail@plt+0xfef8>
   1e7cc:	ldr	r3, [sp, #52]	; 0x34
   1e7d0:	mov	r1, r3
   1e7d4:	str	r0, [sp, #48]	; 0x30
   1e7d8:	ldr	r0, [r6, #8]
   1e7dc:	bl	2145c <__assert_fail@plt+0xfef8>
   1e7e0:	ldr	r2, [sp, #48]	; 0x30
   1e7e4:	cmp	r0, #0
   1e7e8:	cmpne	r2, #0
   1e7ec:	mov	r3, r0
   1e7f0:	bne	1ddd4 <__assert_fail@plt+0xc870>
   1e7f4:	str	r0, [sp, #20]
   1e7f8:	mov	r0, r2
   1e7fc:	bl	1370c <__assert_fail@plt+0x21a8>
   1e800:	ldr	r3, [sp, #20]
   1e804:	mov	r0, r3
   1e808:	bl	1370c <__assert_fail@plt+0x21a8>
   1e80c:	mov	r3, #12
   1e810:	str	r3, [sp, #20]
   1e814:	b	1de34 <__assert_fail@plt+0xc8d0>
   1e818:	mov	r3, #3
   1e81c:	strb	r3, [sp, #124]	; 0x7c
   1e820:	ldr	r3, [sp, #16]
   1e824:	mov	r2, #0
   1e828:	str	r3, [sp, #120]	; 0x78
   1e82c:	mov	r1, r2
   1e830:	add	r3, sp, #120	; 0x78
   1e834:	mov	r0, r4
   1e838:	bl	157a0 <__assert_fail@plt+0x423c>
   1e83c:	subs	r1, r0, #0
   1e840:	beq	1e85c <__assert_fail@plt+0xd2f8>
   1e844:	mov	r3, #10
   1e848:	mov	r2, r5
   1e84c:	mov	r0, r4
   1e850:	bl	158f0 <__assert_fail@plt+0x438c>
   1e854:	subs	r5, r0, #0
   1e858:	bne	1daf4 <__assert_fail@plt+0xc590>
   1e85c:	mov	r3, #12
   1e860:	b	1dbd8 <__assert_fail@plt+0xc674>
   1e864:	cmp	r7, #3
   1e868:	bne	1e6f8 <__assert_fail@plt+0xd194>
   1e86c:	b	1e6d0 <__assert_fail@plt+0xd16c>
   1e870:	addeq	r0, ip, r0, lsl #16
   1e874:			; <UNDEFINED> instruction: 0x000163b0
   1e878:	andeq	r0, r0, pc, lsl #6
   1e87c:	mvnseq	r0, #0
   1e880:	andeq	r2, r2, sl, asr #30
   1e884:	andeq	r2, r2, r9, lsr #15
   1e888:	andeq	r2, r2, r9, asr r7
   1e88c:	andeq	r2, r2, r6, asr pc
   1e890:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1e894:	andeq	r5, r1, r0, asr #4
   1e898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e89c:	sub	sp, sp, #20
   1e8a0:	ldr	ip, [r1]
   1e8a4:	ldr	r5, [sp, #60]	; 0x3c
   1e8a8:	mov	sl, r3
   1e8ac:	str	r0, [sp, #12]
   1e8b0:	stmib	sp, {r5, ip}
   1e8b4:	ldr	ip, [sp, #56]	; 0x38
   1e8b8:	mov	r7, r1
   1e8bc:	str	ip, [sp]
   1e8c0:	mov	r8, r2
   1e8c4:	bl	1d83c <__assert_fail@plt+0xc2d8>
   1e8c8:	ldr	r3, [r5]
   1e8cc:	adds	r3, r3, #0
   1e8d0:	movne	r3, #1
   1e8d4:	cmp	r0, #0
   1e8d8:	movne	r3, #0
   1e8dc:	cmp	r3, #0
   1e8e0:	moveq	r4, r0
   1e8e4:	moveq	fp, #16
   1e8e8:	beq	1e960 <__assert_fail@plt+0xd3fc>
   1e8ec:	mov	r4, #0
   1e8f0:	mov	r0, r4
   1e8f4:	add	sp, sp, #20
   1e8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8fc:	cmp	r4, #0
   1e900:	cmpne	r0, #0
   1e904:	beq	1e950 <__assert_fail@plt+0xd3ec>
   1e908:	mov	r2, r0
   1e90c:	mov	r3, fp
   1e910:	mov	r1, r4
   1e914:	ldr	r0, [sp, #8]
   1e918:	bl	158f0 <__assert_fail@plt+0x438c>
   1e91c:	subs	r9, r0, #0
   1e920:	bne	1e95c <__assert_fail@plt+0xd3f8>
   1e924:	mov	r2, r9
   1e928:	ldr	r1, [pc, #184]	; 1e9e8 <__assert_fail@plt+0xd484>
   1e92c:	mov	r0, r6
   1e930:	bl	155dc <__assert_fail@plt+0x4078>
   1e934:	mov	r2, r9
   1e938:	ldr	r1, [pc, #168]	; 1e9e8 <__assert_fail@plt+0xd484>
   1e93c:	mov	r0, r4
   1e940:	bl	155dc <__assert_fail@plt+0x4078>
   1e944:	mov	r2, #12
   1e948:	str	r2, [r5]
   1e94c:	b	1e8ec <__assert_fail@plt+0xd388>
   1e950:	cmp	r4, #0
   1e954:	movne	r9, r4
   1e958:	moveq	r9, r0
   1e95c:	mov	r4, r9
   1e960:	ldrb	r2, [r8, #4]
   1e964:	and	r3, r2, #247	; 0xf7
   1e968:	cmp	r3, #2
   1e96c:	beq	1e8f0 <__assert_fail@plt+0xd38c>
   1e970:	ldr	r3, [sp, #56]	; 0x38
   1e974:	clz	r3, r3
   1e978:	lsr	r3, r3, #5
   1e97c:	cmp	r2, #9
   1e980:	orrne	r3, r3, #1
   1e984:	cmp	r3, #0
   1e988:	beq	1e8f0 <__assert_fail@plt+0xd38c>
   1e98c:	ldr	r3, [sp, #56]	; 0x38
   1e990:	str	r5, [sp, #4]
   1e994:	str	r3, [sp]
   1e998:	mov	r2, r8
   1e99c:	mov	r3, sl
   1e9a0:	mov	r1, r7
   1e9a4:	ldr	r0, [sp, #12]
   1e9a8:	bl	1d83c <__assert_fail@plt+0xc2d8>
   1e9ac:	ldr	r3, [r5]
   1e9b0:	adds	r3, r3, #0
   1e9b4:	movne	r3, #1
   1e9b8:	cmp	r0, #0
   1e9bc:	movne	r3, #0
   1e9c0:	cmp	r3, #0
   1e9c4:	mov	r6, r0
   1e9c8:	beq	1e8fc <__assert_fail@plt+0xd398>
   1e9cc:	cmp	r4, #0
   1e9d0:	beq	1e8ec <__assert_fail@plt+0xd388>
   1e9d4:	mov	r2, #0
   1e9d8:	ldr	r1, [pc, #8]	; 1e9e8 <__assert_fail@plt+0xd484>
   1e9dc:	mov	r0, r4
   1e9e0:	bl	155dc <__assert_fail@plt+0x4078>
   1e9e4:	b	1e8ec <__assert_fail@plt+0xd388>
   1e9e8:			; <UNDEFINED> instruction: 0x000163b0
   1e9ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9f0:	sub	sp, sp, #28
   1e9f4:	ldr	r6, [r1]
   1e9f8:	ldr	r7, [sp, #68]	; 0x44
   1e9fc:	mov	fp, r3
   1ea00:	ldr	ip, [r6, #84]	; 0x54
   1ea04:	str	r7, [sp, #4]
   1ea08:	str	ip, [sp, #12]
   1ea0c:	ldr	ip, [sp, #64]	; 0x40
   1ea10:	mov	r9, r0
   1ea14:	str	ip, [sp]
   1ea18:	mov	sl, r1
   1ea1c:	mov	r8, r2
   1ea20:	bl	1e898 <__assert_fail@plt+0xd334>
   1ea24:	ldr	r5, [r7]
   1ea28:	adds	r5, r5, #0
   1ea2c:	movne	r5, #1
   1ea30:	cmp	r0, #0
   1ea34:	movne	r5, #0
   1ea38:	cmp	r5, #0
   1ea3c:	orreq	r3, fp, #8388608	; 0x800000
   1ea40:	moveq	r4, r0
   1ea44:	streq	r3, [sp, #20]
   1ea48:	beq	1ea98 <__assert_fail@plt+0xd534>
   1ea4c:	mov	r4, #0
   1ea50:	mov	r0, r4
   1ea54:	add	sp, sp, #28
   1ea58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea5c:	ldr	r3, [r6, #84]	; 0x54
   1ea60:	ldr	r1, [sp, #16]
   1ea64:	orr	r3, r3, r1
   1ea68:	str	r3, [r6, #84]	; 0x54
   1ea6c:	mov	r1, r4
   1ea70:	mov	r3, #10
   1ea74:	mov	r0, r6
   1ea78:	bl	158f0 <__assert_fail@plt+0x438c>
   1ea7c:	subs	r4, r0, #0
   1ea80:	bne	1ea98 <__assert_fail@plt+0xd534>
   1ea84:	mov	r3, #12
   1ea88:	str	r3, [r7]
   1ea8c:	b	1ea50 <__assert_fail@plt+0xd4ec>
   1ea90:	mov	r2, r5
   1ea94:	b	1ea6c <__assert_fail@plt+0xd508>
   1ea98:	ldrb	r3, [r8, #4]
   1ea9c:	cmp	r3, #10
   1eaa0:	bne	1ea50 <__assert_fail@plt+0xd4ec>
   1eaa4:	ldr	r2, [sp, #20]
   1eaa8:	mov	r1, r9
   1eaac:	mov	r0, r8
   1eab0:	bl	19b88 <__assert_fail@plt+0x8624>
   1eab4:	ldrb	r2, [r8, #4]
   1eab8:	and	r3, r2, #247	; 0xf7
   1eabc:	cmp	r3, #2
   1eac0:	beq	1ea90 <__assert_fail@plt+0xd52c>
   1eac4:	ldr	r3, [sp, #64]	; 0x40
   1eac8:	clz	r3, r3
   1eacc:	lsr	r3, r3, #5
   1ead0:	cmp	r2, #9
   1ead4:	orrne	r3, r3, #1
   1ead8:	cmp	r3, #0
   1eadc:	beq	1ea90 <__assert_fail@plt+0xd52c>
   1eae0:	ldr	r3, [r6, #84]	; 0x54
   1eae4:	mov	r2, r8
   1eae8:	str	r3, [sp, #16]
   1eaec:	ldr	r3, [sp, #12]
   1eaf0:	mov	r1, sl
   1eaf4:	str	r3, [r6, #84]	; 0x54
   1eaf8:	ldr	r3, [sp, #64]	; 0x40
   1eafc:	str	r7, [sp, #4]
   1eb00:	str	r3, [sp]
   1eb04:	mov	r0, r9
   1eb08:	mov	r3, fp
   1eb0c:	bl	1e898 <__assert_fail@plt+0xd334>
   1eb10:	ldr	r3, [r7]
   1eb14:	adds	r3, r3, #0
   1eb18:	movne	r3, #1
   1eb1c:	cmp	r0, #0
   1eb20:	movne	r3, #0
   1eb24:	cmp	r3, #0
   1eb28:	mov	r2, r0
   1eb2c:	beq	1ea5c <__assert_fail@plt+0xd4f8>
   1eb30:	cmp	r4, #0
   1eb34:	beq	1ea4c <__assert_fail@plt+0xd4e8>
   1eb38:	mov	r2, #0
   1eb3c:	ldr	r1, [pc, #8]	; 1eb4c <__assert_fail@plt+0xd5e8>
   1eb40:	mov	r0, r4
   1eb44:	bl	155dc <__assert_fail@plt+0x4078>
   1eb48:	b	1ea4c <__assert_fail@plt+0xd4e8>
   1eb4c:			; <UNDEFINED> instruction: 0x000163b0
   1eb50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb54:	mov	r9, r3
   1eb58:	ldrb	r3, [r0, #28]
   1eb5c:	sub	sp, sp, #132	; 0x84
   1eb60:	mov	r7, r2
   1eb64:	and	r3, r3, #144	; 0x90
   1eb68:	strb	r3, [r0, #28]
   1eb6c:	ldr	r3, [r0, #4]
   1eb70:	mov	r2, #0
   1eb74:	cmp	r3, #159	; 0x9f
   1eb78:	mov	r6, r0
   1eb7c:	mov	sl, r1
   1eb80:	str	r2, [sp, #24]
   1eb84:	str	r9, [r0, #12]
   1eb88:	str	r2, [r0, #8]
   1eb8c:	str	r2, [r0, #24]
   1eb90:	ldr	r4, [r0]
   1eb94:	bhi	1ebb8 <__assert_fail@plt+0xd654>
   1eb98:	mov	r0, r4
   1eb9c:	mov	r1, #160	; 0xa0
   1eba0:	bl	2145c <__assert_fail@plt+0xfef8>
   1eba4:	subs	r4, r0, #0
   1eba8:	beq	1f684 <__assert_fail@plt+0xe120>
   1ebac:	mov	r3, #160	; 0xa0
   1ebb0:	str	r3, [r6, #4]
   1ebb4:	str	r4, [r6]
   1ebb8:	mov	r2, #160	; 0xa0
   1ebbc:	str	r2, [r6, #8]
   1ebc0:	mov	r1, #0
   1ebc4:	mov	r0, r4
   1ebc8:	bl	11444 <memset@plt>
   1ebcc:	mov	r3, #31
   1ebd0:	str	r3, [r4, #64]	; 0x40
   1ebd4:	ldr	r3, [pc, #2796]	; 1f6c8 <__assert_fail@plt+0xe164>
   1ebd8:	cmp	r7, r3
   1ebdc:	bls	1ed80 <__assert_fail@plt+0xd81c>
   1ebe0:	mov	r5, #12
   1ebe4:	cmp	r5, #0
   1ebe8:	str	r5, [sp, #24]
   1ebec:	bne	1f6b0 <__assert_fail@plt+0xe14c>
   1ebf0:	ldr	r8, [pc, #2772]	; 1f6cc <__assert_fail@plt+0xe168>
   1ebf4:	ldr	r1, [pc, #2772]	; 1f6d0 <__assert_fail@plt+0xe16c>
   1ebf8:	cmp	r8, #0
   1ebfc:	mov	r3, #1
   1ec00:	moveq	r3, r5
   1ec04:	cmp	r1, #0
   1ec08:	mov	r2, #1
   1ec0c:	moveq	r2, r1
   1ec10:	orr	r3, r3, r2
   1ec14:	tst	r3, #1
   1ec18:	bne	1f68c <__assert_fail@plt+0xe128>
   1ec1c:	ldr	r3, [r6, #20]
   1ec20:	mov	r2, #84	; 0x54
   1ec24:	str	r3, [sp, #12]
   1ec28:	mov	r1, #0
   1ec2c:	ands	r3, r9, #4194304	; 0x400000
   1ec30:	add	r0, sp, #44	; 0x2c
   1ec34:	movne	fp, #1
   1ec38:	moveq	fp, #0
   1ec3c:	str	r3, [sp, #16]
   1ec40:	bl	11444 <memset@plt>
   1ec44:	ldr	r3, [sp, #12]
   1ec48:	ldrb	r2, [r4, #88]	; 0x58
   1ec4c:	str	r3, [sp, #108]	; 0x6c
   1ec50:	strb	fp, [sp, #116]	; 0x74
   1ec54:	cmp	r3, #0
   1ec58:	orrne	fp, fp, #1
   1ec5c:	ldr	r3, [r4, #92]	; 0x5c
   1ec60:	cmp	r7, #0
   1ec64:	str	r3, [sp, #124]	; 0x7c
   1ec68:	lsr	r3, r2, #2
   1ec6c:	lsr	r2, r2, #3
   1ec70:	and	r3, r3, #1
   1ec74:	and	r2, r2, #1
   1ec78:	str	sl, [sp, #44]	; 0x2c
   1ec7c:	str	r7, [sp, #92]	; 0x5c
   1ec80:	str	r7, [sp, #88]	; 0x58
   1ec84:	strb	fp, [sp, #119]	; 0x77
   1ec88:	strb	r3, [sp, #117]	; 0x75
   1ec8c:	strb	r2, [sp, #118]	; 0x76
   1ec90:	str	r7, [sp, #100]	; 0x64
   1ec94:	str	r7, [sp, #96]	; 0x60
   1ec98:	bgt	1eef8 <__assert_fail@plt+0xd994>
   1ec9c:	ldrb	r3, [sp, #119]	; 0x77
   1eca0:	cmp	r3, #0
   1eca4:	ldrne	sl, [sp, #48]	; 0x30
   1eca8:	ands	r3, r9, #4194304	; 0x400000
   1ecac:	cmp	r3, #0
   1ecb0:	str	sl, [sp, #48]	; 0x30
   1ecb4:	ldr	r3, [r4, #92]	; 0x5c
   1ecb8:	beq	1ef20 <__assert_fail@plt+0xd9bc>
   1ecbc:	cmp	r3, #1
   1ecc0:	ble	1ef14 <__assert_fail@plt+0xd9b0>
   1ecc4:	add	r0, sp, #44	; 0x2c
   1ecc8:	bl	15d58 <__assert_fail@plt+0x47f4>
   1eccc:	subs	r5, r0, #0
   1ecd0:	bne	1ed0c <__assert_fail@plt+0xd7a8>
   1ecd4:	ldr	r3, [sp, #76]	; 0x4c
   1ecd8:	cmp	r7, r3
   1ecdc:	ble	1ed0c <__assert_fail@plt+0xd7a8>
   1ece0:	ldr	r2, [r4, #92]	; 0x5c
   1ece4:	ldr	r3, [sp, #72]	; 0x48
   1ece8:	ldr	r1, [sp, #80]	; 0x50
   1ecec:	add	r3, r3, r2
   1ecf0:	cmp	r1, r3
   1ecf4:	bgt	1ed0c <__assert_fail@plt+0xd7a8>
   1ecf8:	lsl	r1, r1, #1
   1ecfc:	add	r0, sp, #44	; 0x2c
   1ed00:	bl	156b4 <__assert_fail@plt+0x4150>
   1ed04:	subs	r5, r0, #0
   1ed08:	beq	1ecc4 <__assert_fail@plt+0xd760>
   1ed0c:	cmp	r5, #0
   1ed10:	str	r5, [sp, #24]
   1ed14:	beq	1ef68 <__assert_fail@plt+0xda04>
   1ed18:	ldr	r7, [r6]
   1ed1c:	ldr	r5, [r7, #56]	; 0x38
   1ed20:	cmp	r5, #0
   1ed24:	bne	1ef54 <__assert_fail@plt+0xd9f0>
   1ed28:	mov	r3, #31
   1ed2c:	ldr	r0, [r7, #16]
   1ed30:	str	r5, [r7, #56]	; 0x38
   1ed34:	str	r3, [r7, #64]	; 0x40
   1ed38:	str	r5, [r7, #52]	; 0x34
   1ed3c:	bl	1370c <__assert_fail@plt+0x21a8>
   1ed40:	str	r5, [r7, #16]
   1ed44:	add	r0, sp, #44	; 0x2c
   1ed48:	bl	16658 <__assert_fail@plt+0x50f4>
   1ed4c:	ldr	r2, [pc, #2428]	; 1f6d0 <__assert_fail@plt+0xe16c>
   1ed50:	mov	r3, #1
   1ed54:	cmp	r2, #0
   1ed58:	moveq	r3, r5
   1ed5c:	cmp	r8, #0
   1ed60:	mov	r2, #1
   1ed64:	moveq	r2, r8
   1ed68:	orr	r3, r3, r2
   1ed6c:	tst	r3, #1
   1ed70:	beq	1f6b0 <__assert_fail@plt+0xe14c>
   1ed74:	add	r0, r4, #136	; 0x88
   1ed78:	bl	11210 <pthread_mutex_destroy@plt>
   1ed7c:	b	1f6b0 <__assert_fail@plt+0xe14c>
   1ed80:	add	r0, r7, #1
   1ed84:	str	r0, [r4, #4]
   1ed88:	lsl	r0, r0, #3
   1ed8c:	bl	2141c <__assert_fail@plt+0xfeb8>
   1ed90:	mov	r5, #1
   1ed94:	str	r0, [r4]
   1ed98:	cmp	r7, r5
   1ed9c:	lslcs	r5, r5, #1
   1eda0:	bcs	1ed98 <__assert_fail@plt+0xd834>
   1eda4:	mov	r1, r5
   1eda8:	mov	r0, #12
   1edac:	bl	213d4 <__assert_fail@plt+0xfe70>
   1edb0:	sub	r5, r5, #1
   1edb4:	str	r5, [r4, #68]	; 0x44
   1edb8:	str	r0, [r4, #32]
   1edbc:	bl	11348 <__ctype_get_mb_cur_max@plt>
   1edc0:	str	r0, [r4, #92]	; 0x5c
   1edc4:	mov	r0, #14
   1edc8:	bl	114ec <nl_langinfo@plt>
   1edcc:	ldrb	r3, [r0]
   1edd0:	and	r3, r3, #223	; 0xdf
   1edd4:	cmp	r3, #85	; 0x55
   1edd8:	bne	1ee28 <__assert_fail@plt+0xd8c4>
   1eddc:	ldrb	r3, [r0, #1]
   1ede0:	and	r3, r3, #223	; 0xdf
   1ede4:	cmp	r3, #84	; 0x54
   1ede8:	bne	1ee28 <__assert_fail@plt+0xd8c4>
   1edec:	ldrb	r3, [r0, #2]
   1edf0:	and	r3, r3, #223	; 0xdf
   1edf4:	cmp	r3, #70	; 0x46
   1edf8:	bne	1ee28 <__assert_fail@plt+0xd8c4>
   1edfc:	ldrb	r3, [r0, #3]
   1ee00:	ldr	r1, [pc, #2252]	; 1f6d4 <__assert_fail@plt+0xe170>
   1ee04:	cmp	r3, #45	; 0x2d
   1ee08:	moveq	r3, #4
   1ee0c:	movne	r3, #3
   1ee10:	add	r0, r0, r3
   1ee14:	bl	111f8 <strcmp@plt>
   1ee18:	cmp	r0, #0
   1ee1c:	ldrbeq	r3, [r4, #88]	; 0x58
   1ee20:	orreq	r3, r3, #4
   1ee24:	strbeq	r3, [r4, #88]	; 0x58
   1ee28:	ldrb	r3, [r4, #88]	; 0x58
   1ee2c:	bic	r3, r3, #8
   1ee30:	strb	r3, [r4, #88]	; 0x58
   1ee34:	ldr	r3, [r4, #92]	; 0x5c
   1ee38:	cmp	r3, #1
   1ee3c:	ble	1eed8 <__assert_fail@plt+0xd974>
   1ee40:	ldrb	r5, [r4, #88]	; 0x58
   1ee44:	ands	r5, r5, #4
   1ee48:	ldrne	r3, [pc, #2184]	; 1f6d8 <__assert_fail@plt+0xe174>
   1ee4c:	strne	r3, [r4, #60]	; 0x3c
   1ee50:	bne	1eed8 <__assert_fail@plt+0xd974>
   1ee54:	mov	r1, #1
   1ee58:	mov	r0, #32
   1ee5c:	bl	213d4 <__assert_fail@plt+0xfe70>
   1ee60:	cmp	r0, #0
   1ee64:	str	r0, [r4, #60]	; 0x3c
   1ee68:	movne	r2, #1
   1ee6c:	beq	1ebe0 <__assert_fail@plt+0xd67c>
   1ee70:	lsl	fp, r5, #3
   1ee74:	mov	r8, #0
   1ee78:	add	r3, r8, fp
   1ee7c:	mov	r0, r3
   1ee80:	str	r2, [sp, #16]
   1ee84:	str	r3, [sp, #12]
   1ee88:	bl	11450 <btowc@plt>
   1ee8c:	ldr	r2, [sp, #16]
   1ee90:	ldr	r3, [sp, #12]
   1ee94:	cmn	r0, #1
   1ee98:	ldrne	ip, [r4, #60]	; 0x3c
   1ee9c:	ldrne	r1, [ip, r5]
   1eea0:	orrne	r1, r1, r2, lsl r8
   1eea4:	strne	r1, [ip, r5]
   1eea8:	bics	r1, r3, #127	; 0x7f
   1eeac:	bne	1eec0 <__assert_fail@plt+0xd95c>
   1eeb0:	cmp	r3, r0
   1eeb4:	ldrbne	r3, [r4, #88]	; 0x58
   1eeb8:	orrne	r3, r3, #8
   1eebc:	strbne	r3, [r4, #88]	; 0x58
   1eec0:	add	r8, r8, #1
   1eec4:	cmp	r8, #32
   1eec8:	bne	1ee78 <__assert_fail@plt+0xd914>
   1eecc:	add	r5, r5, #4
   1eed0:	cmp	r5, #32
   1eed4:	bne	1ee70 <__assert_fail@plt+0xd90c>
   1eed8:	ldr	r3, [r4]
   1eedc:	cmp	r3, #0
   1eee0:	beq	1ebe0 <__assert_fail@plt+0xd67c>
   1eee4:	ldr	r3, [r4, #32]
   1eee8:	cmp	r3, #0
   1eeec:	beq	1ebe0 <__assert_fail@plt+0xd67c>
   1eef0:	mov	r5, #0
   1eef4:	b	1ebe4 <__assert_fail@plt+0xd680>
   1eef8:	add	r1, r7, #1
   1eefc:	add	r0, sp, #44	; 0x2c
   1ef00:	bl	156b4 <__assert_fail@plt+0x4150>
   1ef04:	cmp	r0, #0
   1ef08:	beq	1ec9c <__assert_fail@plt+0xd738>
   1ef0c:	mov	r5, r0
   1ef10:	b	1ed0c <__assert_fail@plt+0xd7a8>
   1ef14:	add	r0, sp, #44	; 0x2c
   1ef18:	bl	16228 <__assert_fail@plt+0x4cc4>
   1ef1c:	b	1ed0c <__assert_fail@plt+0xd7a8>
   1ef20:	cmp	r3, #1
   1ef24:	ble	1ef34 <__assert_fail@plt+0xd9d0>
   1ef28:	add	r0, sp, #44	; 0x2c
   1ef2c:	bl	15c04 <__assert_fail@plt+0x46a0>
   1ef30:	b	1ed0c <__assert_fail@plt+0xd7a8>
   1ef34:	cmp	fp, #0
   1ef38:	ldreq	r3, [sp, #80]	; 0x50
   1ef3c:	streq	r3, [sp, #72]	; 0x48
   1ef40:	streq	r3, [sp, #76]	; 0x4c
   1ef44:	beq	1ed0c <__assert_fail@plt+0xd7a8>
   1ef48:	add	r0, sp, #44	; 0x2c
   1ef4c:	bl	15048 <__assert_fail@plt+0x3ae4>
   1ef50:	b	1ed0c <__assert_fail@plt+0xd7a8>
   1ef54:	ldr	r9, [r5]
   1ef58:	mov	r0, r5
   1ef5c:	bl	1370c <__assert_fail@plt+0x21a8>
   1ef60:	mov	r5, r9
   1ef64:	b	1ed20 <__assert_fail@plt+0xd7bc>
   1ef68:	ldr	r7, [r6]
   1ef6c:	orr	r2, r9, #8388608	; 0x800000
   1ef70:	str	r5, [r6, #24]
   1ef74:	add	r1, sp, #44	; 0x2c
   1ef78:	str	r9, [r7, #128]	; 0x80
   1ef7c:	add	r0, sp, #32
   1ef80:	bl	19b88 <__assert_fail@plt+0x8624>
   1ef84:	add	r3, sp, #24
   1ef88:	str	r3, [sp, #4]
   1ef8c:	str	r5, [sp]
   1ef90:	mov	r3, r9
   1ef94:	add	r2, sp, #32
   1ef98:	mov	r1, r6
   1ef9c:	add	r0, sp, #44	; 0x2c
   1efa0:	bl	1e9ec <__assert_fail@plt+0xd488>
   1efa4:	ldr	r3, [sp, #24]
   1efa8:	adds	r3, r3, #0
   1efac:	movne	r3, #1
   1efb0:	cmp	r0, #0
   1efb4:	movne	r3, #0
   1efb8:	cmp	r3, #0
   1efbc:	mov	r9, r0
   1efc0:	movne	r0, r5
   1efc4:	bne	1f010 <__assert_fail@plt+0xdaac>
   1efc8:	mov	r2, r5
   1efcc:	mov	r1, r5
   1efd0:	mov	r3, #2
   1efd4:	mov	r0, r7
   1efd8:	bl	158f0 <__assert_fail@plt+0x438c>
   1efdc:	cmp	r9, #0
   1efe0:	mov	r5, r0
   1efe4:	beq	1effc <__assert_fail@plt+0xda98>
   1efe8:	mov	r3, #16
   1efec:	mov	r2, r5
   1eff0:	mov	r1, r9
   1eff4:	mov	r0, r7
   1eff8:	bl	158f0 <__assert_fail@plt+0x438c>
   1effc:	cmp	r0, #0
   1f000:	cmpne	r5, #0
   1f004:	moveq	r0, #0
   1f008:	moveq	r3, #12
   1f00c:	streq	r3, [sp, #24]
   1f010:	cmp	r0, #0
   1f014:	str	r0, [r4, #52]	; 0x34
   1f018:	beq	1ed18 <__assert_fail@plt+0xd7b4>
   1f01c:	ldr	r5, [r6]
   1f020:	mov	r7, #12
   1f024:	ldr	r0, [r5, #4]
   1f028:	lsl	r0, r0, #2
   1f02c:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f030:	str	r0, [r5, #12]
   1f034:	ldr	r0, [r5, #4]
   1f038:	lsl	r0, r0, #2
   1f03c:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f040:	str	r0, [r5, #16]
   1f044:	ldr	r0, [r5, #4]
   1f048:	mul	r0, r7, r0
   1f04c:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f050:	str	r0, [r5, #20]
   1f054:	ldr	r0, [r5, #4]
   1f058:	mul	r0, r7, r0
   1f05c:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f060:	ldr	r3, [r5, #12]
   1f064:	cmp	r3, #0
   1f068:	str	r0, [r5, #24]
   1f06c:	bne	1f168 <__assert_fail@plt+0xdc04>
   1f070:	mov	r7, #12
   1f074:	cmp	r7, #0
   1f078:	str	r7, [sp, #24]
   1f07c:	bne	1ed18 <__assert_fail@plt+0xd7b4>
   1f080:	ldrb	r2, [r4, #88]	; 0x58
   1f084:	ldr	r3, [sp, #16]
   1f088:	clz	r3, r3
   1f08c:	lsr	r3, r3, #5
   1f090:	ands	r3, r3, r2, lsr #2
   1f094:	beq	1f0b0 <__assert_fail@plt+0xdb4c>
   1f098:	ldr	r2, [r6, #20]
   1f09c:	cmp	r2, #0
   1f0a0:	moveq	lr, r7
   1f0a4:	ldreq	ip, [r4, #8]
   1f0a8:	moveq	r0, r7
   1f0ac:	beq	1f450 <__assert_fail@plt+0xdeec>
   1f0b0:	ldr	r3, [r4, #52]	; 0x34
   1f0b4:	ldr	r1, [r4, #24]
   1f0b8:	mov	r9, #12
   1f0bc:	ldr	r3, [r3, #12]
   1f0c0:	add	r0, sp, #32
   1f0c4:	ldr	r3, [r3, #28]
   1f0c8:	str	r3, [r4, #72]	; 0x48
   1f0cc:	mla	r1, r9, r3, r1
   1f0d0:	bl	17b24 <__assert_fail@plt+0x65c0>
   1f0d4:	cmp	r0, #0
   1f0d8:	mov	r7, r0
   1f0dc:	str	r0, [sp, #28]
   1f0e0:	bne	1f118 <__assert_fail@plt+0xdbb4>
   1f0e4:	ldr	r3, [r4, #76]	; 0x4c
   1f0e8:	cmp	r3, #0
   1f0ec:	movgt	r5, r0
   1f0f0:	bgt	1f560 <__assert_fail@plt+0xdffc>
   1f0f4:	mov	r3, #0
   1f0f8:	add	r2, sp, #32
   1f0fc:	mov	r1, r4
   1f100:	add	r0, sp, #28
   1f104:	bl	17cd4 <__assert_fail@plt+0x6770>
   1f108:	cmp	r0, #0
   1f10c:	str	r0, [r4, #36]	; 0x24
   1f110:	bne	1f5e8 <__assert_fail@plt+0xe084>
   1f114:	ldr	r7, [sp, #28]
   1f118:	str	r7, [sp, #24]
   1f11c:	ldr	r7, [r6]
   1f120:	ldr	r5, [r7, #56]	; 0x38
   1f124:	cmp	r5, #0
   1f128:	bne	1f670 <__assert_fail@plt+0xe10c>
   1f12c:	mov	r3, #31
   1f130:	str	r3, [r7, #64]	; 0x40
   1f134:	ldr	r0, [r7, #16]
   1f138:	str	r5, [r7, #56]	; 0x38
   1f13c:	str	r5, [r7, #52]	; 0x34
   1f140:	bl	1370c <__assert_fail@plt+0x21a8>
   1f144:	str	r5, [r7, #16]
   1f148:	add	r0, sp, #44	; 0x2c
   1f14c:	bl	16658 <__assert_fail@plt+0x50f4>
   1f150:	ldr	r3, [sp, #24]
   1f154:	cmp	r3, #0
   1f158:	bne	1ed4c <__assert_fail@plt+0xd7e8>
   1f15c:	ldr	r0, [sp, #24]
   1f160:	add	sp, sp, #132	; 0x84
   1f164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f168:	ldr	r3, [r5, #16]
   1f16c:	cmp	r3, #0
   1f170:	beq	1f070 <__assert_fail@plt+0xdb0c>
   1f174:	ldr	r9, [r5, #20]
   1f178:	cmp	r0, #0
   1f17c:	cmpne	r9, #0
   1f180:	moveq	r9, #1
   1f184:	movne	r9, #0
   1f188:	beq	1f070 <__assert_fail@plt+0xdb0c>
   1f18c:	ldr	r0, [r6, #24]
   1f190:	lsl	r0, r0, #2
   1f194:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f198:	cmp	r0, #0
   1f19c:	str	r0, [r5, #132]	; 0x84
   1f1a0:	ldrne	r2, [r6, #24]
   1f1a4:	movne	r3, r9
   1f1a8:	bne	1f278 <__assert_fail@plt+0xdd14>
   1f1ac:	mov	r2, r6
   1f1b0:	ldr	r1, [pc, #1316]	; 1f6dc <__assert_fail@plt+0xe178>
   1f1b4:	ldr	r0, [r5, #52]	; 0x34
   1f1b8:	bl	155dc <__assert_fail@plt+0x4078>
   1f1bc:	subs	r7, r0, #0
   1f1c0:	bne	1f074 <__assert_fail@plt+0xdb10>
   1f1c4:	mov	r2, r5
   1f1c8:	ldr	r1, [pc, #1296]	; 1f6e0 <__assert_fail@plt+0xe17c>
   1f1cc:	ldr	r0, [r5, #52]	; 0x34
   1f1d0:	bl	155dc <__assert_fail@plt+0x4078>
   1f1d4:	subs	r7, r0, #0
   1f1d8:	bne	1f074 <__assert_fail@plt+0xdb10>
   1f1dc:	mov	r2, r5
   1f1e0:	ldr	r1, [pc, #1276]	; 1f6e4 <__assert_fail@plt+0xe180>
   1f1e4:	ldr	r0, [r5, #52]	; 0x34
   1f1e8:	bl	1564c <__assert_fail@plt+0x40e8>
   1f1ec:	mov	r2, r5
   1f1f0:	ldr	r1, [pc, #1264]	; 1f6e8 <__assert_fail@plt+0xe184>
   1f1f4:	ldr	r0, [r5, #52]	; 0x34
   1f1f8:	bl	1564c <__assert_fail@plt+0x40e8>
   1f1fc:	subs	r7, r0, #0
   1f200:	bne	1f074 <__assert_fail@plt+0xdb10>
   1f204:	mov	fp, r9
   1f208:	mov	sl, r7
   1f20c:	ldr	r0, [r5, #8]
   1f210:	cmp	r0, sl
   1f214:	bne	1f228 <__assert_fail@plt+0xdcc4>
   1f218:	cmp	fp, #0
   1f21c:	beq	1f2f8 <__assert_fail@plt+0xdd94>
   1f220:	mov	fp, r9
   1f224:	mov	sl, #0
   1f228:	mov	r3, #12
   1f22c:	mul	r3, r3, sl
   1f230:	str	r3, [sp, #12]
   1f234:	ldr	r2, [sp, #12]
   1f238:	ldr	r3, [r5, #24]
   1f23c:	add	r3, r3, r2
   1f240:	ldr	r3, [r3, #4]
   1f244:	cmp	r3, #0
   1f248:	bne	1f2f0 <__assert_fail@plt+0xdd8c>
   1f24c:	mov	r3, #1
   1f250:	mov	r2, sl
   1f254:	mov	r1, r5
   1f258:	add	r0, sp, #32
   1f25c:	bl	18a6c <__assert_fail@plt+0x7508>
   1f260:	cmp	r0, #0
   1f264:	beq	1f2cc <__assert_fail@plt+0xdd68>
   1f268:	mov	r7, r0
   1f26c:	b	1f074 <__assert_fail@plt+0xdb10>
   1f270:	str	r3, [r0, r3, lsl #2]
   1f274:	add	r3, r3, #1
   1f278:	cmp	r2, r3
   1f27c:	bne	1f270 <__assert_fail@plt+0xdd0c>
   1f280:	mov	r2, r5
   1f284:	ldr	r1, [pc, #1120]	; 1f6ec <__assert_fail@plt+0xe188>
   1f288:	ldr	r0, [r5, #52]	; 0x34
   1f28c:	bl	1564c <__assert_fail@plt+0x40e8>
   1f290:	ldr	r2, [r6, #24]
   1f294:	mov	r3, #0
   1f298:	cmp	r2, r3
   1f29c:	bne	1f2b4 <__assert_fail@plt+0xdd50>
   1f2a0:	ldr	r0, [r5, #132]	; 0x84
   1f2a4:	bl	1370c <__assert_fail@plt+0x21a8>
   1f2a8:	mov	r3, #0
   1f2ac:	str	r3, [r5, #132]	; 0x84
   1f2b0:	b	1f1ac <__assert_fail@plt+0xdc48>
   1f2b4:	ldr	r1, [r5, #132]	; 0x84
   1f2b8:	ldr	r1, [r1, r3, lsl #2]
   1f2bc:	cmp	r1, r3
   1f2c0:	bne	1f1ac <__assert_fail@plt+0xdc48>
   1f2c4:	add	r3, r3, #1
   1f2c8:	b	1f298 <__assert_fail@plt+0xdd34>
   1f2cc:	ldr	r3, [r5, #24]
   1f2d0:	ldr	r2, [sp, #12]
   1f2d4:	add	r3, r3, r2
   1f2d8:	ldr	r3, [r3, #4]
   1f2dc:	cmp	r3, #0
   1f2e0:	bne	1f2f0 <__assert_fail@plt+0xdd8c>
   1f2e4:	ldr	r0, [sp, #40]	; 0x28
   1f2e8:	bl	1370c <__assert_fail@plt+0x21a8>
   1f2ec:	mov	fp, #1
   1f2f0:	add	sl, sl, #1
   1f2f4:	b	1f20c <__assert_fail@plt+0xdca8>
   1f2f8:	ldrb	r3, [r6, #28]
   1f2fc:	tst	r3, #16
   1f300:	beq	1f314 <__assert_fail@plt+0xddb0>
   1f304:	ldr	r3, [r5, #76]	; 0x4c
   1f308:	cmp	r3, #0
   1f30c:	bne	1f32c <__assert_fail@plt+0xddc8>
   1f310:	b	1f074 <__assert_fail@plt+0xdb10>
   1f314:	ldr	r3, [r6, #24]
   1f318:	cmp	r3, #0
   1f31c:	beq	1f304 <__assert_fail@plt+0xdda0>
   1f320:	ldrb	r3, [r5, #88]	; 0x58
   1f324:	tst	r3, #1
   1f328:	beq	1f304 <__assert_fail@plt+0xdda0>
   1f32c:	mov	r9, #12
   1f330:	mul	r0, r9, r0
   1f334:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f338:	cmp	r0, #0
   1f33c:	movne	r3, #0
   1f340:	str	r0, [r5, #28]
   1f344:	movne	r2, r3
   1f348:	beq	1f070 <__assert_fail@plt+0xdb0c>
   1f34c:	ldr	r1, [r5, #8]
   1f350:	cmp	r3, r1
   1f354:	bcc	1f39c <__assert_fail@plt+0xde38>
   1f358:	mov	r9, #0
   1f35c:	mov	fp, #12
   1f360:	ldr	r3, [r5, #8]
   1f364:	cmp	r9, r3
   1f368:	bcs	1f074 <__assert_fail@plt+0xdb10>
   1f36c:	mul	r3, fp, r9
   1f370:	ldr	r2, [r5, #24]
   1f374:	mov	sl, #0
   1f378:	add	r2, r2, r3
   1f37c:	ldr	r2, [r2, #8]
   1f380:	ldr	r1, [r5, #24]
   1f384:	add	r1, r1, r3
   1f388:	ldr	r1, [r1, #4]
   1f38c:	cmp	sl, r1
   1f390:	blt	1f3bc <__assert_fail@plt+0xde58>
   1f394:	add	r9, r9, #1
   1f398:	b	1f360 <__assert_fail@plt+0xddfc>
   1f39c:	mul	r0, r9, r3
   1f3a0:	ldr	ip, [r5, #28]
   1f3a4:	add	r3, r3, #1
   1f3a8:	add	r1, ip, r0
   1f3ac:	str	r2, [ip, r0]
   1f3b0:	str	r2, [r1, #4]
   1f3b4:	str	r2, [r1, #8]
   1f3b8:	b	1f34c <__assert_fail@plt+0xdde8>
   1f3bc:	ldr	ip, [r2, sl, lsl #2]
   1f3c0:	ldr	r0, [r5, #28]
   1f3c4:	mov	r1, r9
   1f3c8:	mla	r0, fp, ip, r0
   1f3cc:	str	r3, [sp, #20]
   1f3d0:	str	r2, [sp, #12]
   1f3d4:	bl	15748 <__assert_fail@plt+0x41e4>
   1f3d8:	cmp	r0, #0
   1f3dc:	beq	1f070 <__assert_fail@plt+0xdb0c>
   1f3e0:	add	sl, sl, #1
   1f3e4:	ldr	r3, [sp, #20]
   1f3e8:	ldr	r2, [sp, #12]
   1f3ec:	b	1f380 <__assert_fail@plt+0xde1c>
   1f3f0:	ldr	r2, [r4]
   1f3f4:	lsl	r5, r0, #3
   1f3f8:	add	r1, r2, r5
   1f3fc:	ldrb	r1, [r1, #4]
   1f400:	sub	r1, r1, #1
   1f404:	cmp	r1, #11
   1f408:	ldrls	pc, [pc, r1, lsl #2]
   1f40c:	b	1f4e8 <__assert_fail@plt+0xdf84>
   1f410:	andeq	pc, r1, r0, asr #8
   1f414:	andeq	pc, r1, ip, asr #8
   1f418:	andeq	pc, r1, r4, asr #9
   1f41c:	andeq	pc, r1, ip, asr #8
   1f420:	andeq	pc, r1, ip, ror #9
   1f424:	strheq	pc, [r1], -r0	; <UNPREDICTABLE>
   1f428:	andeq	pc, r1, r8, ror #9
   1f42c:	andeq	pc, r1, ip, asr #8
   1f430:	andeq	pc, r1, ip, asr #8
   1f434:	andeq	pc, r1, ip, asr #8
   1f438:	andeq	pc, r1, ip, asr #8
   1f43c:	muleq	r1, r8, r4
   1f440:	ldrsb	r2, [r2, r5]
   1f444:	cmp	r2, #0
   1f448:	movlt	lr, r3
   1f44c:	add	r0, r0, #1
   1f450:	cmp	r0, ip
   1f454:	bne	1f3f0 <__assert_fail@plt+0xde8c>
   1f458:	orr	r3, lr, r7
   1f45c:	tst	r3, #255	; 0xff
   1f460:	movne	r3, #0
   1f464:	movne	r5, #7
   1f468:	bne	1f524 <__assert_fail@plt+0xdfc0>
   1f46c:	mov	r3, #1
   1f470:	str	r3, [r4, #92]	; 0x5c
   1f474:	ldr	r2, [r4, #76]	; 0x4c
   1f478:	ldrb	r3, [r4, #88]	; 0x58
   1f47c:	cmp	r2, #0
   1f480:	movle	r2, r7
   1f484:	orrgt	r2, r7, #1
   1f488:	and	r7, r3, #249	; 0xf9
   1f48c:	orr	r7, r7, r2, lsl #1
   1f490:	strb	r7, [r4, #88]	; 0x58
   1f494:	b	1f0b0 <__assert_fail@plt+0xdb4c>
   1f498:	ldr	r2, [r2, r0, lsl #3]
   1f49c:	cmp	r2, #32
   1f4a0:	beq	1f44c <__assert_fail@plt+0xdee8>
   1f4a4:	bhi	1f4b4 <__assert_fail@plt+0xdf50>
   1f4a8:	cmp	r2, #16
   1f4ac:	beq	1f44c <__assert_fail@plt+0xdee8>
   1f4b0:	b	1f0b0 <__assert_fail@plt+0xdb4c>
   1f4b4:	cmp	r2, #64	; 0x40
   1f4b8:	beq	1f44c <__assert_fail@plt+0xdee8>
   1f4bc:	cmp	r2, #128	; 0x80
   1f4c0:	b	1f4ac <__assert_fail@plt+0xdf48>
   1f4c4:	ldr	r2, [r2, r0, lsl #3]
   1f4c8:	add	r1, r2, #12
   1f4cc:	add	r2, r2, #28
   1f4d0:	ldr	r5, [r1, #4]!
   1f4d4:	cmp	r5, #0
   1f4d8:	bne	1f0b0 <__assert_fail@plt+0xdb4c>
   1f4dc:	cmp	r1, r2
   1f4e0:	bne	1f4d0 <__assert_fail@plt+0xdf6c>
   1f4e4:	b	1f44c <__assert_fail@plt+0xdee8>
   1f4e8:	bl	11540 <abort@plt>
   1f4ec:	mov	r7, r3
   1f4f0:	b	1f44c <__assert_fail@plt+0xdee8>
   1f4f4:	ldr	lr, [r4]
   1f4f8:	lsl	ip, r3, #3
   1f4fc:	add	r2, lr, ip
   1f500:	ldrb	r1, [r2, #4]
   1f504:	cmp	r1, #1
   1f508:	bne	1f530 <__assert_fail@plt+0xdfcc>
   1f50c:	ldrsb	r1, [lr, ip]
   1f510:	cmp	r1, #0
   1f514:	ldrblt	r1, [r2, #6]
   1f518:	biclt	r1, r1, #32
   1f51c:	strblt	r1, [r2, #6]
   1f520:	add	r3, r3, #1
   1f524:	cmp	r0, r3
   1f528:	bne	1f4f4 <__assert_fail@plt+0xdf90>
   1f52c:	b	1f46c <__assert_fail@plt+0xdf08>
   1f530:	cmp	r1, #5
   1f534:	strbeq	r5, [r2, #4]
   1f538:	b	1f520 <__assert_fail@plt+0xdfbc>
   1f53c:	ldr	ip, [sp, #40]	; 0x28
   1f540:	ldr	r1, [r4]
   1f544:	ldr	r3, [ip, r5, lsl #2]
   1f548:	add	lr, r1, r3, lsl #3
   1f54c:	ldrb	r2, [lr, #4]
   1f550:	cmp	r2, #4
   1f554:	moveq	r2, #0
   1f558:	beq	1f598 <__assert_fail@plt+0xe034>
   1f55c:	add	r5, r5, #1
   1f560:	ldr	r0, [sp, #36]	; 0x24
   1f564:	cmp	r5, r0
   1f568:	blt	1f53c <__assert_fail@plt+0xdfd8>
   1f56c:	b	1f0f4 <__assert_fail@plt+0xdb90>
   1f570:	ldr	sl, [ip, r2, lsl #2]
   1f574:	add	fp, r1, sl, lsl #3
   1f578:	ldrb	fp, [fp, #4]
   1f57c:	cmp	fp, #9
   1f580:	bne	1f594 <__assert_fail@plt+0xe030>
   1f584:	ldr	fp, [r1, sl, lsl #3]
   1f588:	ldr	sl, [lr]
   1f58c:	cmp	fp, sl
   1f590:	beq	1f5a4 <__assert_fail@plt+0xe040>
   1f594:	add	r2, r2, #1
   1f598:	cmp	r2, r0
   1f59c:	blt	1f570 <__assert_fail@plt+0xe00c>
   1f5a0:	beq	1f55c <__assert_fail@plt+0xdff8>
   1f5a4:	ldr	r2, [r4, #20]
   1f5a8:	add	r0, sp, #32
   1f5ac:	mla	r3, r9, r3, r2
   1f5b0:	ldr	r3, [r3, #8]
   1f5b4:	ldr	sl, [r3]
   1f5b8:	mov	r1, sl
   1f5bc:	bl	15098 <__assert_fail@plt+0x3b34>
   1f5c0:	cmp	r0, #0
   1f5c4:	bne	1f55c <__assert_fail@plt+0xdff8>
   1f5c8:	ldr	r1, [r4, #24]
   1f5cc:	add	r0, sp, #32
   1f5d0:	mla	r1, r9, sl, r1
   1f5d4:	bl	18908 <__assert_fail@plt+0x73a4>
   1f5d8:	subs	r5, r0, #0
   1f5dc:	beq	1f55c <__assert_fail@plt+0xdff8>
   1f5e0:	mov	r7, r5
   1f5e4:	b	1f118 <__assert_fail@plt+0xdbb4>
   1f5e8:	ldrsb	r3, [r0, #52]	; 0x34
   1f5ec:	cmp	r3, #0
   1f5f0:	strge	r0, [r4, #48]	; 0x30
   1f5f4:	strge	r0, [r4, #44]	; 0x2c
   1f5f8:	strge	r0, [r4, #40]	; 0x28
   1f5fc:	bge	1f664 <__assert_fail@plt+0xe100>
   1f600:	mov	r3, #1
   1f604:	add	r2, sp, #32
   1f608:	mov	r1, r4
   1f60c:	add	r0, sp, #28
   1f610:	bl	17cd4 <__assert_fail@plt+0x6770>
   1f614:	mov	r3, #2
   1f618:	add	r2, sp, #32
   1f61c:	mov	r1, r4
   1f620:	str	r0, [r4, #40]	; 0x28
   1f624:	add	r0, sp, #28
   1f628:	bl	17cd4 <__assert_fail@plt+0x6770>
   1f62c:	mov	r3, #6
   1f630:	add	r2, sp, #32
   1f634:	mov	r1, r4
   1f638:	str	r0, [r4, #44]	; 0x2c
   1f63c:	add	r0, sp, #28
   1f640:	bl	17cd4 <__assert_fail@plt+0x6770>
   1f644:	ldr	r3, [r4, #40]	; 0x28
   1f648:	cmp	r3, #0
   1f64c:	str	r0, [r4, #48]	; 0x30
   1f650:	beq	1f114 <__assert_fail@plt+0xdbb0>
   1f654:	ldr	r3, [r4, #44]	; 0x2c
   1f658:	cmp	r0, #0
   1f65c:	cmpne	r3, #0
   1f660:	beq	1f114 <__assert_fail@plt+0xdbb0>
   1f664:	ldr	r0, [sp, #40]	; 0x28
   1f668:	bl	1370c <__assert_fail@plt+0x21a8>
   1f66c:	b	1f118 <__assert_fail@plt+0xdbb4>
   1f670:	ldr	r9, [r5]
   1f674:	mov	r0, r5
   1f678:	bl	1370c <__assert_fail@plt+0x21a8>
   1f67c:	mov	r5, r9
   1f680:	b	1f124 <__assert_fail@plt+0xdbc0>
   1f684:	mov	r0, #12
   1f688:	b	1f160 <__assert_fail@plt+0xdbfc>
   1f68c:	mov	r1, #0
   1f690:	add	r0, r4, #136	; 0x88
   1f694:	bl	1127c <pthread_mutex_init@plt>
   1f698:	cmp	r0, #0
   1f69c:	movne	r3, #12
   1f6a0:	strne	r3, [sp, #24]
   1f6a4:	ldr	r3, [sp, #24]
   1f6a8:	cmp	r3, #0
   1f6ac:	beq	1ec1c <__assert_fail@plt+0xd6b8>
   1f6b0:	mov	r0, r4
   1f6b4:	bl	16688 <__assert_fail@plt+0x5124>
   1f6b8:	mov	r3, #0
   1f6bc:	str	r3, [r6]
   1f6c0:	str	r3, [r6, #4]
   1f6c4:	b	1f15c <__assert_fail@plt+0xdbf8>
   1f6c8:	beq	feaca174 <optarg@@GLIBC_2.4+0xfea95fac>
	...
   1f6d4:	andeq	r2, r2, fp, ror pc
   1f6d8:	andeq	r2, r2, r4, asr sp
   1f6dc:	andeq	r5, r1, r8, lsr #20
   1f6e0:	andeq	r7, r1, r8, ror pc
   1f6e4:	andeq	r7, r1, ip, asr r9
   1f6e8:	andeq	r6, r1, r4, lsl #18
   1f6ec:	andeq	r7, r1, r4, asr #17
   1f6f0:	ldr	r3, [pc, #96]	; 1f758 <__assert_fail@plt+0xe1f4>
   1f6f4:	mov	ip, r2
   1f6f8:	ldrb	r2, [r2, #28]
   1f6fc:	ldr	r3, [r3]
   1f700:	push	{r4, lr}
   1f704:	and	r2, r2, #239	; 0xef
   1f708:	lsr	lr, r3, #21
   1f70c:	and	lr, lr, #16
   1f710:	orr	r2, r2, lr
   1f714:	orr	r2, r2, #128	; 0x80
   1f718:	strb	r2, [ip, #28]
   1f71c:	mov	r2, r1
   1f720:	mov	r1, r0
   1f724:	mov	r0, ip
   1f728:	bl	1eb50 <__assert_fail@plt+0xd5ec>
   1f72c:	subs	r2, r0, #0
   1f730:	popeq	{r4, pc}
   1f734:	ldr	r3, [pc, #32]	; 1f75c <__assert_fail@plt+0xe1f8>
   1f738:	mov	r0, #0
   1f73c:	add	r1, r3, #32
   1f740:	add	r3, r3, r2, lsl #2
   1f744:	pop	{r4, lr}
   1f748:	mov	r2, #5
   1f74c:	ldr	r3, [r3, #416]	; 0x1a0
   1f750:	add	r1, r1, r3
   1f754:	b	112d0 <dcgettext@plt>
   1f758:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1f75c:	andeq	r2, r2, r4, asr sp
   1f760:	ldr	r3, [pc, #12]	; 1f774 <__assert_fail@plt+0xe210>
   1f764:	ldr	r2, [r3]
   1f768:	str	r0, [r3]
   1f76c:	mov	r0, r2
   1f770:	bx	lr
   1f774:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1f778:	push	{r4, r5, r6, lr}
   1f77c:	mov	r2, #256	; 0x100
   1f780:	ldr	r5, [r0]
   1f784:	ldr	r6, [r0, #16]
   1f788:	mov	r4, r0
   1f78c:	mov	r1, #0
   1f790:	mov	r0, r6
   1f794:	bl	11444 <memset@plt>
   1f798:	ldr	r1, [r5, #36]	; 0x24
   1f79c:	mov	r2, r6
   1f7a0:	mov	r0, r4
   1f7a4:	bl	18194 <__assert_fail@plt+0x6c30>
   1f7a8:	ldr	r1, [r5, #40]	; 0x28
   1f7ac:	ldr	r3, [r5, #36]	; 0x24
   1f7b0:	cmp	r3, r1
   1f7b4:	beq	1f7c4 <__assert_fail@plt+0xe260>
   1f7b8:	mov	r2, r6
   1f7bc:	mov	r0, r4
   1f7c0:	bl	18194 <__assert_fail@plt+0x6c30>
   1f7c4:	ldr	r1, [r5, #44]	; 0x2c
   1f7c8:	ldr	r3, [r5, #36]	; 0x24
   1f7cc:	cmp	r3, r1
   1f7d0:	beq	1f7e0 <__assert_fail@plt+0xe27c>
   1f7d4:	mov	r2, r6
   1f7d8:	mov	r0, r4
   1f7dc:	bl	18194 <__assert_fail@plt+0x6c30>
   1f7e0:	ldr	r1, [r5, #48]	; 0x30
   1f7e4:	ldr	r3, [r5, #36]	; 0x24
   1f7e8:	cmp	r3, r1
   1f7ec:	beq	1f7fc <__assert_fail@plt+0xe298>
   1f7f0:	mov	r2, r6
   1f7f4:	mov	r0, r4
   1f7f8:	bl	18194 <__assert_fail@plt+0x6c30>
   1f7fc:	ldrb	r3, [r4, #28]
   1f800:	mov	r0, #0
   1f804:	orr	r3, r3, #8
   1f808:	strb	r3, [r4, #28]
   1f80c:	pop	{r4, r5, r6, pc}
   1f810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f814:	sub	sp, sp, #44	; 0x2c
   1f818:	cmp	r3, r2
   1f81c:	ldr	ip, [sp, #80]	; 0x50
   1f820:	movle	lr, #0
   1f824:	movgt	lr, #1
   1f828:	orrs	lr, lr, r3, lsr #31
   1f82c:	ldr	r4, [sp, #88]	; 0x58
   1f830:	ldr	fp, [r0]
   1f834:	add	r8, r3, ip
   1f838:	mvnne	r7, #0
   1f83c:	bne	1f9b4 <__assert_fail@plt+0xe450>
   1f840:	cmp	r8, r2
   1f844:	bgt	1f9c0 <__assert_fail@plt+0xe45c>
   1f848:	cmp	ip, #0
   1f84c:	cmpge	r3, r8
   1f850:	movgt	lr, #1
   1f854:	movle	lr, #0
   1f858:	bgt	1f9c0 <__assert_fail@plt+0xe45c>
   1f85c:	cmp	r8, #0
   1f860:	movlt	r8, lr
   1f864:	blt	1f87c <__assert_fail@plt+0xe318>
   1f868:	cmp	r3, r8
   1f86c:	movgt	lr, #0
   1f870:	movle	lr, #1
   1f874:	ands	ip, lr, ip, lsr #31
   1f878:	movne	r8, #0
   1f87c:	ldr	lr, [pc, #700]	; 1fb40 <__assert_fail@plt+0xe5dc>
   1f880:	ldr	r6, [pc, #700]	; 1fb44 <__assert_fail@plt+0xe5e0>
   1f884:	cmp	lr, #0
   1f888:	mov	ip, #1
   1f88c:	moveq	ip, lr
   1f890:	cmp	r6, #0
   1f894:	mov	lr, #1
   1f898:	moveq	lr, r6
   1f89c:	mov	r7, r3
   1f8a0:	orr	r3, ip, lr
   1f8a4:	ands	r3, r3, #255	; 0xff
   1f8a8:	str	r2, [sp, #36]	; 0x24
   1f8ac:	str	r1, [sp, #32]
   1f8b0:	mov	r6, r0
   1f8b4:	str	r3, [sp, #28]
   1f8b8:	beq	1f8c4 <__assert_fail@plt+0xe360>
   1f8bc:	add	r0, fp, #136	; 0x88
   1f8c0:	bl	1124c <pthread_mutex_lock@plt>
   1f8c4:	ldrb	r3, [r6, #28]
   1f8c8:	cmp	r8, r7
   1f8cc:	lsr	sl, r3, #5
   1f8d0:	and	sl, sl, #3
   1f8d4:	ble	1f8f4 <__assert_fail@plt+0xe390>
   1f8d8:	ldr	r2, [r6, #16]
   1f8dc:	cmp	r2, #0
   1f8e0:	beq	1f8f4 <__assert_fail@plt+0xe390>
   1f8e4:	tst	r3, #8
   1f8e8:	bne	1f8f4 <__assert_fail@plt+0xe390>
   1f8ec:	mov	r0, r6
   1f8f0:	bl	1f778 <__assert_fail@plt+0xe214>
   1f8f4:	ldrb	r2, [r6, #28]
   1f8f8:	lsr	r3, r2, #4
   1f8fc:	and	r3, r3, #1
   1f900:	cmp	r4, #0
   1f904:	orreq	r3, r3, #1
   1f908:	cmp	r3, #0
   1f90c:	movne	r5, #1
   1f910:	movne	r4, #0
   1f914:	bne	1f940 <__assert_fail@plt+0xe3dc>
   1f918:	and	r2, r2, #6
   1f91c:	cmp	r2, #4
   1f920:	ldr	r5, [r6, #24]
   1f924:	bne	1f9c8 <__assert_fail@plt+0xe464>
   1f928:	ldr	r2, [r4]
   1f92c:	cmp	r2, r5
   1f930:	bhi	1f9c8 <__assert_fail@plt+0xe464>
   1f934:	subs	r5, r2, #0
   1f938:	movle	r5, #1
   1f93c:	movle	r4, r3
   1f940:	lsl	r0, r5, #3
   1f944:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f948:	subs	r9, r0, #0
   1f94c:	mvneq	r7, #1
   1f950:	beq	1f9a0 <__assert_fail@plt+0xe43c>
   1f954:	ldr	r3, [sp, #84]	; 0x54
   1f958:	str	sl, [sp, #16]
   1f95c:	str	r3, [sp, #4]
   1f960:	str	r9, [sp, #12]
   1f964:	str	r5, [sp, #8]
   1f968:	str	r8, [sp]
   1f96c:	mov	r3, r7
   1f970:	ldr	r2, [sp, #36]	; 0x24
   1f974:	ldr	r1, [sp, #32]
   1f978:	mov	r0, r6
   1f97c:	bl	1c1d0 <__assert_fail@plt+0xac6c>
   1f980:	cmp	r0, #0
   1f984:	beq	1f9d0 <__assert_fail@plt+0xe46c>
   1f988:	cmp	r0, #1
   1f98c:	mvneq	r7, #0
   1f990:	beq	1f998 <__assert_fail@plt+0xe434>
   1f994:	mvn	r7, #1
   1f998:	mov	r0, r9
   1f99c:	bl	1370c <__assert_fail@plt+0x21a8>
   1f9a0:	ldr	r3, [sp, #28]
   1f9a4:	cmp	r3, #0
   1f9a8:	beq	1f9b4 <__assert_fail@plt+0xe450>
   1f9ac:	add	r0, fp, #136	; 0x88
   1f9b0:	bl	11198 <pthread_mutex_unlock@plt>
   1f9b4:	mov	r0, r7
   1f9b8:	add	sp, sp, #44	; 0x2c
   1f9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9c0:	mov	r8, r2
   1f9c4:	b	1f87c <__assert_fail@plt+0xe318>
   1f9c8:	add	r5, r5, #1
   1f9cc:	b	1f940 <__assert_fail@plt+0xe3dc>
   1f9d0:	cmp	r4, #0
   1f9d4:	beq	1fa24 <__assert_fail@plt+0xe4c0>
   1f9d8:	ldrb	r8, [r6, #28]
   1f9dc:	add	sl, r5, #1
   1f9e0:	lsr	r8, r8, #1
   1f9e4:	ands	r8, r8, #3
   1f9e8:	bne	1fa68 <__assert_fail@plt+0xe504>
   1f9ec:	lsl	r8, sl, #2
   1f9f0:	mov	r0, r8
   1f9f4:	bl	2141c <__assert_fail@plt+0xfeb8>
   1f9f8:	cmp	r0, #0
   1f9fc:	str	r0, [r4, #4]
   1fa00:	bne	1fa3c <__assert_fail@plt+0xe4d8>
   1fa04:	mov	r8, #0
   1fa08:	ldrb	r3, [r6, #28]
   1fa0c:	and	r8, r8, #3
   1fa10:	bic	r3, r3, #6
   1fa14:	orr	r8, r3, r8, lsl #1
   1fa18:	tst	r8, #6
   1fa1c:	strb	r8, [r6, #28]
   1fa20:	beq	1f994 <__assert_fail@plt+0xe430>
   1fa24:	ldrb	r3, [sp, #92]	; 0x5c
   1fa28:	cmp	r3, #0
   1fa2c:	ldrne	r3, [r9, #4]
   1fa30:	subne	r7, r3, r7
   1fa34:	ldreq	r7, [r9]
   1fa38:	b	1f998 <__assert_fail@plt+0xe434>
   1fa3c:	mov	r0, r8
   1fa40:	bl	2141c <__assert_fail@plt+0xfeb8>
   1fa44:	cmp	r0, #0
   1fa48:	mov	r8, r0
   1fa4c:	str	r0, [r4, #8]
   1fa50:	strne	sl, [r4]
   1fa54:	movne	r8, #1
   1fa58:	bne	1fad8 <__assert_fail@plt+0xe574>
   1fa5c:	ldr	r0, [r4, #4]
   1fa60:	bl	1370c <__assert_fail@plt+0x21a8>
   1fa64:	b	1fa08 <__assert_fail@plt+0xe4a4>
   1fa68:	cmp	r8, #1
   1fa6c:	movne	r8, #2
   1fa70:	bne	1fad8 <__assert_fail@plt+0xe574>
   1fa74:	ldr	r3, [r4]
   1fa78:	cmp	r3, sl
   1fa7c:	bcs	1fad8 <__assert_fail@plt+0xe574>
   1fa80:	lsl	r2, sl, #2
   1fa84:	mov	r1, r2
   1fa88:	ldr	r0, [r4, #4]
   1fa8c:	str	r2, [sp, #36]	; 0x24
   1fa90:	bl	2145c <__assert_fail@plt+0xfef8>
   1fa94:	subs	r3, r0, #0
   1fa98:	str	r3, [sp, #32]
   1fa9c:	beq	1fa04 <__assert_fail@plt+0xe4a0>
   1faa0:	ldr	r2, [sp, #36]	; 0x24
   1faa4:	ldr	r0, [r4, #8]
   1faa8:	mov	r1, r2
   1faac:	bl	2145c <__assert_fail@plt+0xfef8>
   1fab0:	ldr	r3, [sp, #32]
   1fab4:	subs	r2, r0, #0
   1fab8:	strne	r3, [r4, #4]
   1fabc:	strne	r2, [r4, #8]
   1fac0:	strne	sl, [r4]
   1fac4:	bne	1fad8 <__assert_fail@plt+0xe574>
   1fac8:	mov	r0, r3
   1facc:	str	r2, [sp, #32]
   1fad0:	bl	1370c <__assert_fail@plt+0x21a8>
   1fad4:	b	1fa04 <__assert_fail@plt+0xe4a0>
   1fad8:	mov	r2, r9
   1fadc:	mov	r3, #0
   1fae0:	cmp	r5, r3
   1fae4:	add	r2, r2, #8
   1fae8:	bgt	1fb20 <__assert_fail@plt+0xe5bc>
   1faec:	bic	r5, r5, r5, asr #31
   1faf0:	mvn	r2, #0
   1faf4:	lsl	r3, r5, #2
   1faf8:	ldr	r1, [r4]
   1fafc:	cmp	r5, r1
   1fb00:	bcs	1fa08 <__assert_fail@plt+0xe4a4>
   1fb04:	ldr	r1, [r4, #4]
   1fb08:	ldr	r0, [r4, #8]
   1fb0c:	add	r5, r5, #1
   1fb10:	str	r2, [r0, r3]
   1fb14:	str	r2, [r1, r3]
   1fb18:	add	r3, r3, #4
   1fb1c:	b	1faf8 <__assert_fail@plt+0xe594>
   1fb20:	ldr	r1, [r4, #4]
   1fb24:	ldr	r0, [r2, #-8]
   1fb28:	str	r0, [r1, r3, lsl #2]
   1fb2c:	ldr	r1, [r4, #8]
   1fb30:	ldr	r0, [r2, #-4]
   1fb34:	str	r0, [r1, r3, lsl #2]
   1fb38:	add	r3, r3, #1
   1fb3c:	b	1fae0 <__assert_fail@plt+0xe57c>
	...
   1fb48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb4c:	sub	sp, sp, #20
   1fb50:	mov	r7, r3
   1fb54:	ldr	r9, [sp, #72]	; 0x48
   1fb58:	ldr	r5, [sp, #56]	; 0x38
   1fb5c:	orr	r3, r2, r9
   1fb60:	orrs	r3, r3, r5
   1fb64:	bpl	1fb8c <__assert_fail@plt+0xe628>
   1fb68:	mvn	r4, #1
   1fb6c:	mov	r0, r4
   1fb70:	add	sp, sp, #20
   1fb74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb78:	mov	r7, r8
   1fb7c:	mov	r6, #0
   1fb80:	b	1fbf4 <__assert_fail@plt+0xe690>
   1fb84:	mov	r6, r4
   1fb88:	b	1fbf4 <__assert_fail@plt+0xe690>
   1fb8c:	cmp	r5, #0
   1fb90:	mov	sl, r0
   1fb94:	mov	r8, r1
   1fb98:	mov	r4, r2
   1fb9c:	blt	1fbb0 <__assert_fail@plt+0xe64c>
   1fba0:	mvn	r3, #-2147483648	; 0x80000000
   1fba4:	sub	r3, r3, r5
   1fba8:	cmp	r4, r3
   1fbac:	bgt	1fb68 <__assert_fail@plt+0xe604>
   1fbb0:	cmp	r5, #0
   1fbb4:	add	fp, r4, r5
   1fbb8:	ble	1fb78 <__assert_fail@plt+0xe614>
   1fbbc:	cmp	r4, #0
   1fbc0:	beq	1fb84 <__assert_fail@plt+0xe620>
   1fbc4:	mov	r0, fp
   1fbc8:	bl	2141c <__assert_fail@plt+0xfeb8>
   1fbcc:	subs	r6, r0, #0
   1fbd0:	beq	1fb68 <__assert_fail@plt+0xe604>
   1fbd4:	mov	r2, r4
   1fbd8:	mov	r1, r8
   1fbdc:	bl	11264 <memcpy@plt>
   1fbe0:	mov	r1, r7
   1fbe4:	mov	r2, r5
   1fbe8:	add	r0, r6, r4
   1fbec:	bl	11264 <memcpy@plt>
   1fbf0:	mov	r7, r6
   1fbf4:	ldrb	r3, [sp, #76]	; 0x4c
   1fbf8:	str	r9, [sp, #4]
   1fbfc:	mov	r2, fp
   1fc00:	str	r3, [sp, #12]
   1fc04:	ldr	r3, [sp, #68]	; 0x44
   1fc08:	mov	r1, r7
   1fc0c:	str	r3, [sp, #8]
   1fc10:	ldr	r3, [sp, #64]	; 0x40
   1fc14:	mov	r0, sl
   1fc18:	str	r3, [sp]
   1fc1c:	ldr	r3, [sp, #60]	; 0x3c
   1fc20:	bl	1f810 <__assert_fail@plt+0xe2ac>
   1fc24:	mov	r4, r0
   1fc28:	mov	r0, r6
   1fc2c:	bl	1370c <__assert_fail@plt+0x21a8>
   1fc30:	b	1fb6c <__assert_fail@plt+0xe608>
   1fc34:	ldr	r3, [pc, #232]	; 1fd24 <__assert_fail@plt+0xe7c0>
   1fc38:	tst	r2, #1
   1fc3c:	push	{r4, r5, r6, r7, r8, lr}
   1fc40:	mov	r4, r0
   1fc44:	ldr	r6, [pc, #220]	; 1fd28 <__assert_fail@plt+0xe7c4>
   1fc48:	moveq	r6, r3
   1fc4c:	mov	r3, #0
   1fc50:	str	r3, [r0]
   1fc54:	str	r3, [r0, #4]
   1fc58:	str	r3, [r0, #8]
   1fc5c:	mov	r0, #256	; 0x100
   1fc60:	mov	r7, r1
   1fc64:	mov	r5, r2
   1fc68:	bl	2141c <__assert_fail@plt+0xfeb8>
   1fc6c:	cmp	r0, #0
   1fc70:	str	r0, [r4, #16]
   1fc74:	beq	1fd1c <__assert_fail@plt+0xe7b8>
   1fc78:	ldrb	r2, [r4, #28]
   1fc7c:	tst	r5, #2
   1fc80:	movne	r3, #4194304	; 0x400000
   1fc84:	moveq	r3, #0
   1fc88:	tst	r5, #4
   1fc8c:	orrne	r2, r2, #128	; 0x80
   1fc90:	biceq	r2, r2, #128	; 0x80
   1fc94:	strb	r2, [r4, #28]
   1fc98:	ldrb	r2, [r4, #28]
   1fc9c:	lsl	r5, r5, #1
   1fca0:	and	r5, r5, #16
   1fca4:	bic	r2, r2, #16
   1fca8:	orr	r6, r6, r3
   1fcac:	orr	r5, r5, r2
   1fcb0:	mov	r3, #0
   1fcb4:	bicne	r6, r6, #64	; 0x40
   1fcb8:	strb	r5, [r4, #28]
   1fcbc:	str	r3, [r4, #20]
   1fcc0:	mov	r0, r7
   1fcc4:	orrne	r6, r6, #256	; 0x100
   1fcc8:	bl	113fc <strlen@plt>
   1fccc:	mov	r3, r6
   1fcd0:	mov	r1, r7
   1fcd4:	mov	r2, r0
   1fcd8:	mov	r0, r4
   1fcdc:	bl	1eb50 <__assert_fail@plt+0xd5ec>
   1fce0:	cmp	r0, #16
   1fce4:	mov	r5, r0
   1fce8:	beq	1fd04 <__assert_fail@plt+0xe7a0>
   1fcec:	cmp	r0, #0
   1fcf0:	bne	1fd08 <__assert_fail@plt+0xe7a4>
   1fcf4:	mov	r0, r4
   1fcf8:	bl	1f778 <__assert_fail@plt+0xe214>
   1fcfc:	mov	r0, r5
   1fd00:	pop	{r4, r5, r6, r7, r8, pc}
   1fd04:	mov	r5, #8
   1fd08:	ldr	r0, [r4, #16]
   1fd0c:	bl	1370c <__assert_fail@plt+0x21a8>
   1fd10:	mov	r3, #0
   1fd14:	str	r3, [r4, #16]
   1fd18:	b	1fcfc <__assert_fail@plt+0xe798>
   1fd1c:	mov	r0, #12
   1fd20:	pop	{r4, r5, r6, r7, r8, pc}
   1fd24:	smlabteq	r1, r6, r2, r0
   1fd28:	strdeq	fp, [r3], -ip
   1fd2c:	cmp	r0, #16
   1fd30:	push	{r4, r5, r6, r7, r8, lr}
   1fd34:	bls	1fd3c <__assert_fail@plt+0xe7d8>
   1fd38:	bl	11540 <abort@plt>
   1fd3c:	mov	r4, r3
   1fd40:	ldr	r3, [pc, #88]	; 1fda0 <__assert_fail@plt+0xe83c>
   1fd44:	mov	r6, r2
   1fd48:	add	r1, r3, #32
   1fd4c:	add	r3, r3, r0, lsl #2
   1fd50:	mov	r2, #5
   1fd54:	ldr	r3, [r3, #416]	; 0x1a0
   1fd58:	mov	r0, #0
   1fd5c:	add	r1, r1, r3
   1fd60:	bl	112d0 <dcgettext@plt>
   1fd64:	mov	r7, r0
   1fd68:	bl	113fc <strlen@plt>
   1fd6c:	cmp	r4, #0
   1fd70:	add	r5, r0, #1
   1fd74:	beq	1fd98 <__assert_fail@plt+0xe834>
   1fd78:	cmp	r5, r4
   1fd7c:	subhi	r2, r4, #1
   1fd80:	movhi	r3, #0
   1fd84:	strbhi	r3, [r6, r2]
   1fd88:	movls	r2, r5
   1fd8c:	mov	r1, r7
   1fd90:	mov	r0, r6
   1fd94:	bl	11264 <memcpy@plt>
   1fd98:	mov	r0, r5
   1fd9c:	pop	{r4, r5, r6, r7, r8, pc}
   1fda0:	andeq	r2, r2, r4, asr sp
   1fda4:	push	{r4, r5, r6, lr}
   1fda8:	mov	r4, r0
   1fdac:	ldr	r5, [r0]
   1fdb0:	cmp	r5, #0
   1fdb4:	beq	1fdf4 <__assert_fail@plt+0xe890>
   1fdb8:	ldr	r2, [pc, #92]	; 1fe1c <__assert_fail@plt+0xe8b8>
   1fdbc:	ldr	r1, [pc, #92]	; 1fe20 <__assert_fail@plt+0xe8bc>
   1fdc0:	cmp	r2, #0
   1fdc4:	mov	r3, #1
   1fdc8:	moveq	r3, r2
   1fdcc:	cmp	r1, #0
   1fdd0:	mov	r2, #1
   1fdd4:	moveq	r2, r1
   1fdd8:	orr	r3, r3, r2
   1fddc:	tst	r3, #1
   1fde0:	beq	1fdec <__assert_fail@plt+0xe888>
   1fde4:	add	r0, r5, #136	; 0x88
   1fde8:	bl	11210 <pthread_mutex_destroy@plt>
   1fdec:	mov	r0, r5
   1fdf0:	bl	16688 <__assert_fail@plt+0x5124>
   1fdf4:	mov	r5, #0
   1fdf8:	ldr	r0, [r4, #16]
   1fdfc:	str	r5, [r4]
   1fe00:	str	r5, [r4, #4]
   1fe04:	bl	1370c <__assert_fail@plt+0x21a8>
   1fe08:	str	r5, [r4, #16]
   1fe0c:	ldr	r0, [r4, #20]
   1fe10:	bl	1370c <__assert_fail@plt+0x21a8>
   1fe14:	str	r5, [r4, #20]
   1fe18:	pop	{r4, r5, r6, pc}
	...
   1fe24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe28:	sub	sp, sp, #36	; 0x24
   1fe2c:	ldr	r9, [sp, #72]	; 0x48
   1fe30:	bics	ip, r9, #7
   1fe34:	movne	r0, #2
   1fe38:	bne	1fefc <__assert_fail@plt+0xe998>
   1fe3c:	ands	fp, r9, #4
   1fe40:	mov	r8, r3
   1fe44:	str	r2, [sp, #28]
   1fe48:	mov	r7, r1
   1fe4c:	mov	r6, r0
   1fe50:	ldrne	fp, [r3]
   1fe54:	ldrne	r5, [r3, #4]
   1fe58:	bne	1fe68 <__assert_fail@plt+0xe904>
   1fe5c:	mov	r0, r1
   1fe60:	bl	113fc <strlen@plt>
   1fe64:	mov	r5, r0
   1fe68:	ldr	r2, [pc, #148]	; 1ff04 <__assert_fail@plt+0xe9a0>
   1fe6c:	ldr	r1, [pc, #148]	; 1ff08 <__assert_fail@plt+0xe9a4>
   1fe70:	cmp	r2, #0
   1fe74:	mov	r4, #1
   1fe78:	moveq	r4, r2
   1fe7c:	cmp	r1, #0
   1fe80:	mov	r2, #1
   1fe84:	moveq	r2, r1
   1fe88:	orr	r4, r4, r2
   1fe8c:	ands	r4, r4, #255	; 0xff
   1fe90:	ldr	sl, [r6]
   1fe94:	beq	1fea0 <__assert_fail@plt+0xe93c>
   1fe98:	add	r0, sl, #136	; 0x88
   1fe9c:	bl	1124c <pthread_mutex_lock@plt>
   1fea0:	ldrb	r2, [r6, #28]
   1fea4:	mov	r1, r7
   1fea8:	str	r5, [sp, #4]
   1feac:	tst	r2, #16
   1feb0:	movne	r2, #0
   1feb4:	ldreq	r3, [sp, #28]
   1feb8:	strne	r2, [sp, #12]
   1febc:	strne	r2, [sp, #8]
   1fec0:	streq	r3, [sp, #8]
   1fec4:	streq	r8, [sp, #12]
   1fec8:	str	r5, [sp]
   1fecc:	mov	r2, r5
   1fed0:	str	r9, [sp, #16]
   1fed4:	mov	r3, fp
   1fed8:	mov	r0, r6
   1fedc:	bl	1c1d0 <__assert_fail@plt+0xac6c>
   1fee0:	cmp	r4, #0
   1fee4:	mov	r5, r0
   1fee8:	beq	1fef4 <__assert_fail@plt+0xe990>
   1feec:	add	r0, sl, #136	; 0x88
   1fef0:	bl	11198 <pthread_mutex_unlock@plt>
   1fef4:	adds	r0, r5, #0
   1fef8:	movne	r0, #1
   1fefc:	add	sp, sp, #36	; 0x24
   1ff00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1ff0c:	push	{r0, r1, r2, r3, r4, lr}
   1ff10:	mov	ip, #1
   1ff14:	str	ip, [sp, #12]
   1ff18:	ldr	ip, [sp, #24]
   1ff1c:	stmib	sp, {r2, ip}
   1ff20:	mov	ip, #0
   1ff24:	str	ip, [sp]
   1ff28:	bl	1f810 <__assert_fail@plt+0xe2ac>
   1ff2c:	add	sp, sp, #20
   1ff30:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff34:	push	{r0, r1, r2, r3, r4, lr}
   1ff38:	mov	ip, #0
   1ff3c:	str	ip, [sp, #12]
   1ff40:	ldr	ip, [sp, #28]
   1ff44:	stmib	sp, {r2, ip}
   1ff48:	ldr	ip, [sp, #24]
   1ff4c:	str	ip, [sp]
   1ff50:	bl	1f810 <__assert_fail@plt+0xe2ac>
   1ff54:	add	sp, sp, #20
   1ff58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff5c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ff60:	mov	ip, #1
   1ff64:	str	ip, [sp, #20]
   1ff68:	ldr	ip, [sp, #44]	; 0x2c
   1ff6c:	str	ip, [sp, #16]
   1ff70:	ldr	ip, [sp, #40]	; 0x28
   1ff74:	str	ip, [sp, #12]
   1ff78:	mov	ip, #0
   1ff7c:	str	ip, [sp, #8]
   1ff80:	ldr	ip, [sp, #36]	; 0x24
   1ff84:	str	ip, [sp, #4]
   1ff88:	ldr	ip, [sp, #32]
   1ff8c:	str	ip, [sp]
   1ff90:	bl	1fb48 <__assert_fail@plt+0xe5e4>
   1ff94:	add	sp, sp, #28
   1ff98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff9c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ffa0:	mov	ip, #0
   1ffa4:	str	ip, [sp, #20]
   1ffa8:	ldr	ip, [sp, #48]	; 0x30
   1ffac:	str	ip, [sp, #16]
   1ffb0:	ldr	ip, [sp, #44]	; 0x2c
   1ffb4:	str	ip, [sp, #12]
   1ffb8:	ldr	ip, [sp, #40]	; 0x28
   1ffbc:	str	ip, [sp, #8]
   1ffc0:	ldr	ip, [sp, #36]	; 0x24
   1ffc4:	str	ip, [sp, #4]
   1ffc8:	ldr	ip, [sp, #32]
   1ffcc:	str	ip, [sp]
   1ffd0:	bl	1fb48 <__assert_fail@plt+0xe5e4>
   1ffd4:	add	sp, sp, #28
   1ffd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ffdc:	ldrb	ip, [r0, #28]
   1ffe0:	cmp	r2, #0
   1ffe4:	bicne	ip, ip, #4
   1ffe8:	orrne	ip, ip, #2
   1ffec:	strbne	ip, [r0, #28]
   1fff0:	stmne	r1, {r2, r3}
   1fff4:	ldrne	r3, [sp]
   1fff8:	biceq	ip, ip, #6
   1fffc:	strbeq	ip, [r0, #28]
   20000:	strne	r3, [r1, #8]
   20004:	streq	r2, [r1]
   20008:	streq	r2, [r1, #8]
   2000c:	streq	r2, [r1, #4]
   20010:	bx	lr
   20014:	push	{r4, r5, r6, r7, r8, lr}
   20018:	mov	r7, r0
   2001c:	ldr	r5, [pc, #88]	; 2007c <__assert_fail@plt+0xeb18>
   20020:	mov	r8, r1
   20024:	mov	r4, r2
   20028:	mov	r2, r4
   2002c:	mov	r1, r8
   20030:	mov	r0, r7
   20034:	bl	11204 <read@plt>
   20038:	subs	r6, r0, #0
   2003c:	bge	2006c <__assert_fail@plt+0xeb08>
   20040:	bl	11414 <__errno_location@plt>
   20044:	ldr	r3, [r0]
   20048:	cmp	r3, #4
   2004c:	beq	20028 <__assert_fail@plt+0xeac4>
   20050:	cmp	r4, r5
   20054:	movls	r4, #0
   20058:	movhi	r4, #1
   2005c:	cmp	r3, #22
   20060:	movne	r4, #0
   20064:	cmp	r4, #0
   20068:	bne	20074 <__assert_fail@plt+0xeb10>
   2006c:	mov	r0, r6
   20070:	pop	{r4, r5, r6, r7, r8, pc}
   20074:	mov	r4, r5
   20078:	b	20028 <__assert_fail@plt+0xeac4>
   2007c:	svcvc	0x00f00000	; IMB
   20080:	mov	r2, #3
   20084:	mov	r1, #0
   20088:	b	215e0 <__assert_fail@plt+0x1007c>
   2008c:	push	{r4, r5, r6, lr}
   20090:	sub	sp, sp, #32
   20094:	cmp	r1, #0
   20098:	mov	r5, r0
   2009c:	ldr	r4, [sp, #48]	; 0x30
   200a0:	ldr	r6, [sp, #52]	; 0x34
   200a4:	beq	20158 <__assert_fail@plt+0xebf4>
   200a8:	stm	sp, {r2, r3}
   200ac:	mov	r3, r1
   200b0:	ldr	r2, [pc, #860]	; 20414 <__assert_fail@plt+0xeeb0>
   200b4:	mov	r1, #1
   200b8:	bl	11480 <__fprintf_chk@plt>
   200bc:	mov	r2, #5
   200c0:	ldr	r1, [pc, #848]	; 20418 <__assert_fail@plt+0xeeb4>
   200c4:	mov	r0, #0
   200c8:	bl	112d0 <dcgettext@plt>
   200cc:	ldr	r3, [pc, #840]	; 2041c <__assert_fail@plt+0xeeb8>
   200d0:	ldr	r2, [pc, #840]	; 20420 <__assert_fail@plt+0xeebc>
   200d4:	str	r3, [sp]
   200d8:	mov	r1, #1
   200dc:	mov	r3, r0
   200e0:	mov	r0, r5
   200e4:	bl	11480 <__fprintf_chk@plt>
   200e8:	mov	r1, r5
   200ec:	mov	r0, #10
   200f0:	bl	112c4 <fputc_unlocked@plt>
   200f4:	mov	r2, #5
   200f8:	ldr	r1, [pc, #804]	; 20424 <__assert_fail@plt+0xeec0>
   200fc:	mov	r0, #0
   20100:	bl	112d0 <dcgettext@plt>
   20104:	mov	r1, #1
   20108:	ldr	r3, [pc, #792]	; 20428 <__assert_fail@plt+0xeec4>
   2010c:	mov	r2, r0
   20110:	mov	r0, r5
   20114:	bl	11480 <__fprintf_chk@plt>
   20118:	mov	r1, r5
   2011c:	mov	r0, #10
   20120:	bl	112c4 <fputc_unlocked@plt>
   20124:	cmp	r6, #9
   20128:	ldrls	pc, [pc, r6, lsl #2]
   2012c:	b	20408 <__assert_fail@plt+0xeea4>
   20130:	andeq	r0, r2, r8, asr #4
   20134:	andeq	r0, r2, r0, ror r1
   20138:	muleq	r2, ip, r1
   2013c:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20140:	andeq	r0, r2, ip, lsl #4
   20144:	andeq	r0, r2, r0, asr r2
   20148:	muleq	r2, r8, r2
   2014c:	andeq	r0, r2, r8, ror #5
   20150:	andeq	r0, r2, r0, asr #6
   20154:	andeq	r0, r2, r0, lsr #7
   20158:	str	r3, [sp]
   2015c:	mov	r1, #1
   20160:	mov	r3, r2
   20164:	ldr	r2, [pc, #704]	; 2042c <__assert_fail@plt+0xeec8>
   20168:	bl	11480 <__fprintf_chk@plt>
   2016c:	b	200bc <__assert_fail@plt+0xeb58>
   20170:	mov	r2, #5
   20174:	ldr	r1, [pc, #692]	; 20430 <__assert_fail@plt+0xeecc>
   20178:	mov	r0, #0
   2017c:	bl	112d0 <dcgettext@plt>
   20180:	ldr	r3, [r4]
   20184:	mov	r1, #1
   20188:	mov	r2, r0
   2018c:	mov	r0, r5
   20190:	add	sp, sp, #32
   20194:	pop	{r4, r5, r6, lr}
   20198:	b	11480 <__fprintf_chk@plt>
   2019c:	mov	r2, #5
   201a0:	ldr	r1, [pc, #652]	; 20434 <__assert_fail@plt+0xeed0>
   201a4:	mov	r0, #0
   201a8:	bl	112d0 <dcgettext@plt>
   201ac:	ldr	r3, [r4, #4]
   201b0:	mov	r1, #1
   201b4:	str	r3, [sp, #48]	; 0x30
   201b8:	ldr	r3, [r4]
   201bc:	mov	r2, r0
   201c0:	mov	r0, r5
   201c4:	add	sp, sp, #32
   201c8:	pop	{r4, r5, r6, lr}
   201cc:	b	11480 <__fprintf_chk@plt>
   201d0:	mov	r2, #5
   201d4:	ldr	r1, [pc, #604]	; 20438 <__assert_fail@plt+0xeed4>
   201d8:	mov	r0, #0
   201dc:	bl	112d0 <dcgettext@plt>
   201e0:	ldr	r3, [r4, #8]
   201e4:	mov	r1, #1
   201e8:	str	r3, [sp, #52]	; 0x34
   201ec:	ldr	r3, [r4, #4]
   201f0:	str	r3, [sp, #48]	; 0x30
   201f4:	ldr	r3, [r4]
   201f8:	mov	r2, r0
   201fc:	mov	r0, r5
   20200:	add	sp, sp, #32
   20204:	pop	{r4, r5, r6, lr}
   20208:	b	11480 <__fprintf_chk@plt>
   2020c:	mov	r2, #5
   20210:	ldr	r1, [pc, #548]	; 2043c <__assert_fail@plt+0xeed8>
   20214:	mov	r0, #0
   20218:	bl	112d0 <dcgettext@plt>
   2021c:	ldr	r3, [r4, #12]
   20220:	mov	r1, #1
   20224:	str	r3, [sp, #8]
   20228:	ldr	r3, [r4, #8]
   2022c:	str	r3, [sp, #4]
   20230:	ldr	r3, [r4, #4]
   20234:	str	r3, [sp]
   20238:	ldr	r3, [r4]
   2023c:	mov	r2, r0
   20240:	mov	r0, r5
   20244:	bl	11480 <__fprintf_chk@plt>
   20248:	add	sp, sp, #32
   2024c:	pop	{r4, r5, r6, pc}
   20250:	mov	r2, #5
   20254:	ldr	r1, [pc, #484]	; 20440 <__assert_fail@plt+0xeedc>
   20258:	mov	r0, #0
   2025c:	bl	112d0 <dcgettext@plt>
   20260:	ldr	r3, [r4, #16]
   20264:	mov	r1, #1
   20268:	str	r3, [sp, #12]
   2026c:	ldr	r3, [r4, #12]
   20270:	str	r3, [sp, #8]
   20274:	ldr	r3, [r4, #8]
   20278:	str	r3, [sp, #4]
   2027c:	ldr	r3, [r4, #4]
   20280:	str	r3, [sp]
   20284:	ldr	r3, [r4]
   20288:	mov	r2, r0
   2028c:	mov	r0, r5
   20290:	bl	11480 <__fprintf_chk@plt>
   20294:	b	20248 <__assert_fail@plt+0xece4>
   20298:	mov	r2, #5
   2029c:	ldr	r1, [pc, #416]	; 20444 <__assert_fail@plt+0xeee0>
   202a0:	mov	r0, #0
   202a4:	bl	112d0 <dcgettext@plt>
   202a8:	ldr	r3, [r4, #20]
   202ac:	mov	r1, #1
   202b0:	str	r3, [sp, #16]
   202b4:	ldr	r3, [r4, #16]
   202b8:	str	r3, [sp, #12]
   202bc:	ldr	r3, [r4, #12]
   202c0:	str	r3, [sp, #8]
   202c4:	ldr	r3, [r4, #8]
   202c8:	str	r3, [sp, #4]
   202cc:	ldr	r3, [r4, #4]
   202d0:	str	r3, [sp]
   202d4:	ldr	r3, [r4]
   202d8:	mov	r2, r0
   202dc:	mov	r0, r5
   202e0:	bl	11480 <__fprintf_chk@plt>
   202e4:	b	20248 <__assert_fail@plt+0xece4>
   202e8:	mov	r2, #5
   202ec:	ldr	r1, [pc, #340]	; 20448 <__assert_fail@plt+0xeee4>
   202f0:	mov	r0, #0
   202f4:	bl	112d0 <dcgettext@plt>
   202f8:	ldr	r3, [r4, #24]
   202fc:	mov	r1, #1
   20300:	str	r3, [sp, #20]
   20304:	ldr	r3, [r4, #20]
   20308:	str	r3, [sp, #16]
   2030c:	ldr	r3, [r4, #16]
   20310:	str	r3, [sp, #12]
   20314:	ldr	r3, [r4, #12]
   20318:	str	r3, [sp, #8]
   2031c:	ldr	r3, [r4, #8]
   20320:	str	r3, [sp, #4]
   20324:	ldr	r3, [r4, #4]
   20328:	str	r3, [sp]
   2032c:	ldr	r3, [r4]
   20330:	mov	r2, r0
   20334:	mov	r0, r5
   20338:	bl	11480 <__fprintf_chk@plt>
   2033c:	b	20248 <__assert_fail@plt+0xece4>
   20340:	mov	r2, #5
   20344:	ldr	r1, [pc, #256]	; 2044c <__assert_fail@plt+0xeee8>
   20348:	mov	r0, #0
   2034c:	bl	112d0 <dcgettext@plt>
   20350:	ldr	r3, [r4, #28]
   20354:	mov	r1, #1
   20358:	str	r3, [sp, #24]
   2035c:	ldr	r3, [r4, #24]
   20360:	str	r3, [sp, #20]
   20364:	ldr	r3, [r4, #20]
   20368:	str	r3, [sp, #16]
   2036c:	ldr	r3, [r4, #16]
   20370:	str	r3, [sp, #12]
   20374:	ldr	r3, [r4, #12]
   20378:	str	r3, [sp, #8]
   2037c:	ldr	r3, [r4, #8]
   20380:	str	r3, [sp, #4]
   20384:	ldr	r3, [r4, #4]
   20388:	str	r3, [sp]
   2038c:	ldr	r3, [r4]
   20390:	mov	r2, r0
   20394:	mov	r0, r5
   20398:	bl	11480 <__fprintf_chk@plt>
   2039c:	b	20248 <__assert_fail@plt+0xece4>
   203a0:	ldr	r1, [pc, #168]	; 20450 <__assert_fail@plt+0xeeec>
   203a4:	mov	r2, #5
   203a8:	mov	r0, #0
   203ac:	bl	112d0 <dcgettext@plt>
   203b0:	ldr	r3, [r4, #32]
   203b4:	mov	r1, #1
   203b8:	str	r3, [sp, #28]
   203bc:	ldr	r3, [r4, #28]
   203c0:	str	r3, [sp, #24]
   203c4:	ldr	r3, [r4, #24]
   203c8:	str	r3, [sp, #20]
   203cc:	ldr	r3, [r4, #20]
   203d0:	str	r3, [sp, #16]
   203d4:	ldr	r3, [r4, #16]
   203d8:	str	r3, [sp, #12]
   203dc:	ldr	r3, [r4, #12]
   203e0:	str	r3, [sp, #8]
   203e4:	ldr	r3, [r4, #8]
   203e8:	str	r3, [sp, #4]
   203ec:	ldr	r3, [r4, #4]
   203f0:	str	r3, [sp]
   203f4:	ldr	r3, [r4]
   203f8:	mov	r2, r0
   203fc:	mov	r0, r5
   20400:	bl	11480 <__fprintf_chk@plt>
   20404:	b	20248 <__assert_fail@plt+0xece4>
   20408:	mov	r2, #5
   2040c:	ldr	r1, [pc, #64]	; 20454 <__assert_fail@plt+0xeef0>
   20410:	b	203a8 <__assert_fail@plt+0xee44>
   20414:	andeq	r2, r2, sp, ror pc
   20418:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   2041c:	andeq	r0, r0, r6, ror #15
   20420:	andeq	r3, r2, lr, asr r2
   20424:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   20428:	andeq	r3, r2, pc, lsr r0
   2042c:	andeq	r2, r2, r9, lsl #31
   20430:	andeq	r3, r2, r1, rrx
   20434:	andeq	r3, r2, r1, ror r0
   20438:	andeq	r3, r2, r8, lsl #1
   2043c:	andeq	r3, r2, r4, lsr #1
   20440:	andeq	r3, r2, r4, asr #1
   20444:	andeq	r3, r2, r8, ror #1
   20448:	andeq	r3, r2, r0, lsl r1
   2044c:	andeq	r3, r2, ip, lsr r1
   20450:	andeq	r3, r2, ip, ror #2
   20454:	andeq	r3, r2, r0, lsr #3
   20458:	push	{r0, r1, r4, lr}
   2045c:	mov	ip, #0
   20460:	ldr	lr, [sp, #16]
   20464:	ldr	r4, [lr, ip, lsl #2]
   20468:	cmp	r4, #0
   2046c:	bne	20484 <__assert_fail@plt+0xef20>
   20470:	str	ip, [sp, #4]
   20474:	str	lr, [sp]
   20478:	bl	2008c <__assert_fail@plt+0xeb28>
   2047c:	add	sp, sp, #8
   20480:	pop	{r4, pc}
   20484:	add	ip, ip, #1
   20488:	b	20464 <__assert_fail@plt+0xef00>
   2048c:	push	{r4, r5, lr}
   20490:	sub	sp, sp, #52	; 0x34
   20494:	mov	ip, #0
   20498:	ldr	r5, [sp, #64]	; 0x40
   2049c:	add	lr, sp, #8
   204a0:	ldr	r4, [r5, ip, lsl #2]
   204a4:	cmp	r4, #0
   204a8:	str	r4, [lr, ip, lsl #2]
   204ac:	beq	204bc <__assert_fail@plt+0xef58>
   204b0:	add	ip, ip, #1
   204b4:	cmp	ip, #10
   204b8:	bne	204a0 <__assert_fail@plt+0xef3c>
   204bc:	str	ip, [sp, #4]
   204c0:	str	lr, [sp]
   204c4:	bl	2008c <__assert_fail@plt+0xeb28>
   204c8:	add	sp, sp, #52	; 0x34
   204cc:	pop	{r4, r5, pc}
   204d0:	push	{r3}		; (str r3, [sp, #-4]!)
   204d4:	push	{r0, r1, r2, r3, lr}
   204d8:	add	r3, sp, #24
   204dc:	str	r3, [sp, #12]
   204e0:	str	r3, [sp]
   204e4:	ldr	r3, [sp, #20]
   204e8:	bl	2048c <__assert_fail@plt+0xef28>
   204ec:	add	sp, sp, #16
   204f0:	pop	{lr}		; (ldr lr, [sp], #4)
   204f4:	add	sp, sp, #4
   204f8:	bx	lr
   204fc:	ldr	r3, [pc, #116]	; 20578 <__assert_fail@plt+0xf014>
   20500:	push	{r4, lr}
   20504:	mov	r0, #10
   20508:	ldr	r1, [r3]
   2050c:	bl	112c4 <fputc_unlocked@plt>
   20510:	mov	r2, #5
   20514:	ldr	r1, [pc, #96]	; 2057c <__assert_fail@plt+0xf018>
   20518:	mov	r0, #0
   2051c:	bl	112d0 <dcgettext@plt>
   20520:	ldr	r2, [pc, #88]	; 20580 <__assert_fail@plt+0xf01c>
   20524:	mov	r1, r0
   20528:	mov	r0, #1
   2052c:	bl	1145c <__printf_chk@plt>
   20530:	mov	r2, #5
   20534:	ldr	r1, [pc, #72]	; 20584 <__assert_fail@plt+0xf020>
   20538:	mov	r0, #0
   2053c:	bl	112d0 <dcgettext@plt>
   20540:	ldr	r3, [pc, #64]	; 20588 <__assert_fail@plt+0xf024>
   20544:	ldr	r2, [pc, #64]	; 2058c <__assert_fail@plt+0xf028>
   20548:	mov	r1, r0
   2054c:	mov	r0, #1
   20550:	bl	1145c <__printf_chk@plt>
   20554:	mov	r2, #5
   20558:	ldr	r1, [pc, #48]	; 20590 <__assert_fail@plt+0xf02c>
   2055c:	mov	r0, #0
   20560:	bl	112d0 <dcgettext@plt>
   20564:	ldr	r2, [pc, #40]	; 20594 <__assert_fail@plt+0xf030>
   20568:	pop	{r4, lr}
   2056c:	mov	r1, r0
   20570:	mov	r0, #1
   20574:	b	1145c <__printf_chk@plt>
   20578:	andeq	r4, r3, r4, asr #3
   2057c:	ldrdeq	r3, [r2], -ip
   20580:	strdeq	r3, [r2], -r0
   20584:	andeq	r3, r2, r6, lsl #4
   20588:	andeq	r2, r2, r1, ror r7
   2058c:	muleq	r2, r9, r7
   20590:	andeq	r3, r2, sl, lsl r2
   20594:	andeq	r3, r2, r1, asr #4
   20598:	push	{r4, lr}
   2059c:	bl	2141c <__assert_fail@plt+0xfeb8>
   205a0:	cmp	r0, #0
   205a4:	popne	{r4, pc}
   205a8:	bl	12b30 <__assert_fail@plt+0x15cc>
   205ac:	push	{r4, lr}
   205b0:	bl	2141c <__assert_fail@plt+0xfeb8>
   205b4:	cmp	r0, #0
   205b8:	popne	{r4, pc}
   205bc:	bl	12b30 <__assert_fail@plt+0x15cc>
   205c0:	b	20598 <__assert_fail@plt+0xf034>
   205c4:	push	{r4, r5, r6, lr}
   205c8:	mov	r5, r0
   205cc:	mov	r4, r1
   205d0:	bl	2145c <__assert_fail@plt+0xfef8>
   205d4:	cmp	r0, #0
   205d8:	popne	{r4, r5, r6, pc}
   205dc:	adds	r4, r4, #0
   205e0:	movne	r4, #1
   205e4:	cmp	r5, #0
   205e8:	orreq	r4, r4, #1
   205ec:	cmp	r4, #0
   205f0:	popeq	{r4, r5, r6, pc}
   205f4:	bl	12b30 <__assert_fail@plt+0x15cc>
   205f8:	push	{r4, lr}
   205fc:	cmp	r1, #0
   20600:	orreq	r1, r1, #1
   20604:	bl	2145c <__assert_fail@plt+0xfef8>
   20608:	cmp	r0, #0
   2060c:	popne	{r4, pc}
   20610:	bl	12b30 <__assert_fail@plt+0x15cc>
   20614:	push	{r4, r5, r6, lr}
   20618:	mov	r6, r0
   2061c:	mov	r5, r1
   20620:	mov	r4, r2
   20624:	bl	21828 <__assert_fail@plt+0x102c4>
   20628:	cmp	r0, #0
   2062c:	popne	{r4, r5, r6, pc}
   20630:	cmp	r6, #0
   20634:	beq	20644 <__assert_fail@plt+0xf0e0>
   20638:	cmp	r5, #0
   2063c:	cmpne	r4, #0
   20640:	popeq	{r4, r5, r6, pc}
   20644:	bl	12b30 <__assert_fail@plt+0x15cc>
   20648:	b	20614 <__assert_fail@plt+0xf0b0>
   2064c:	cmp	r2, #0
   20650:	cmpne	r1, #0
   20654:	moveq	r2, #1
   20658:	moveq	r1, r2
   2065c:	push	{r4, lr}
   20660:	bl	21828 <__assert_fail@plt+0x102c4>
   20664:	cmp	r0, #0
   20668:	popne	{r4, pc}
   2066c:	bl	12b30 <__assert_fail@plt+0x15cc>
   20670:	mov	r2, r1
   20674:	mov	r1, r0
   20678:	mov	r0, #0
   2067c:	b	20614 <__assert_fail@plt+0xf0b0>
   20680:	mov	r2, r1
   20684:	mov	r1, r0
   20688:	mov	r0, #0
   2068c:	b	2064c <__assert_fail@plt+0xf0e8>
   20690:	push	{r4, r5, r6, r7, r8, lr}
   20694:	subs	r7, r0, #0
   20698:	mov	r5, r1
   2069c:	mov	r6, r2
   206a0:	ldr	r4, [r1]
   206a4:	bne	206e0 <__assert_fail@plt+0xf17c>
   206a8:	cmp	r4, #0
   206ac:	bne	206c8 <__assert_fail@plt+0xf164>
   206b0:	mov	r1, r2
   206b4:	mov	r0, #64	; 0x40
   206b8:	bl	21954 <__assert_fail@plt+0x103f0>
   206bc:	cmp	r0, #0
   206c0:	movne	r4, r0
   206c4:	addeq	r4, r0, #1
   206c8:	mov	r2, r6
   206cc:	mov	r1, r4
   206d0:	mov	r0, r7
   206d4:	bl	20614 <__assert_fail@plt+0xf0b0>
   206d8:	str	r4, [r5]
   206dc:	pop	{r4, r5, r6, r7, r8, pc}
   206e0:	lsr	r2, r4, #1
   206e4:	add	r3, r2, #1
   206e8:	mvn	r3, r3
   206ec:	cmp	r4, r3
   206f0:	addls	r4, r4, #1
   206f4:	addls	r4, r4, r2
   206f8:	bls	206c8 <__assert_fail@plt+0xf164>
   206fc:	bl	12b30 <__assert_fail@plt+0x15cc>
   20700:	mov	r2, #1
   20704:	b	20690 <__assert_fail@plt+0xf12c>
   20708:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2070c:	mov	sl, r0
   20710:	ldr	r8, [r1]
   20714:	mov	fp, r1
   20718:	mov	r5, r2
   2071c:	asrs	r4, r8, #1
   20720:	mov	r9, r3
   20724:	ldr	r7, [sp, #48]	; 0x30
   20728:	bpl	207c4 <__assert_fail@plt+0xf260>
   2072c:	rsb	r2, r4, #-2147483648	; 0x80000000
   20730:	cmp	r8, r2
   20734:	movge	r2, #0
   20738:	movlt	r2, #1
   2073c:	mvn	r3, r9
   20740:	cmp	r2, #0
   20744:	lsr	r3, r3, #31
   20748:	addeq	r4, r4, r8
   2074c:	mvnne	r4, #-2147483648	; 0x80000000
   20750:	mov	r0, r3
   20754:	cmp	r9, r4
   20758:	movge	r0, #0
   2075c:	andlt	r0, r0, #1
   20760:	cmp	r0, #0
   20764:	str	r3, [sp, #4]
   20768:	bne	20938 <__assert_fail@plt+0xf3d4>
   2076c:	cmp	r7, #0
   20770:	bge	20884 <__assert_fail@plt+0xf320>
   20774:	cmp	r4, #0
   20778:	bge	207dc <__assert_fail@plt+0xf278>
   2077c:	mov	r1, r7
   20780:	mvn	r0, #-2147483648	; 0x80000000
   20784:	bl	21b60 <__assert_fail@plt+0x105fc>
   20788:	cmp	r0, r4
   2078c:	movle	r0, #0
   20790:	movgt	r0, #1
   20794:	cmp	r0, #0
   20798:	mvnne	r6, #-2147483648	; 0x80000000
   2079c:	beq	207ec <__assert_fail@plt+0xf288>
   207a0:	mov	r1, r7
   207a4:	mov	r0, r6
   207a8:	bl	21b60 <__assert_fail@plt+0x105fc>
   207ac:	mov	r1, r7
   207b0:	mov	r4, r0
   207b4:	mov	r0, r6
   207b8:	bl	21d80 <__assert_fail@plt+0x1081c>
   207bc:	sub	r1, r6, r1
   207c0:	b	207fc <__assert_fail@plt+0xf298>
   207c4:	mvn	r2, #-2147483648	; 0x80000000
   207c8:	sub	r2, r2, r4
   207cc:	cmp	r8, r2
   207d0:	movle	r2, #0
   207d4:	movgt	r2, #1
   207d8:	b	2073c <__assert_fail@plt+0xf1d8>
   207dc:	cmn	r7, #1
   207e0:	movne	r1, r7
   207e4:	movne	r0, #-2147483648	; 0x80000000
   207e8:	bne	20950 <__assert_fail@plt+0xf3ec>
   207ec:	mul	r1, r7, r4
   207f0:	cmp	r1, #63	; 0x3f
   207f4:	movle	r6, #64	; 0x40
   207f8:	ble	207a0 <__assert_fail@plt+0xf23c>
   207fc:	cmp	sl, #0
   20800:	sub	r2, r4, r8
   20804:	streq	sl, [fp]
   20808:	cmp	r2, r5
   2080c:	bge	208e0 <__assert_fail@plt+0xf37c>
   20810:	cmp	r5, #0
   20814:	bge	208ac <__assert_fail@plt+0xf348>
   20818:	rsb	r2, r5, #-2147483648	; 0x80000000
   2081c:	cmp	r8, r2
   20820:	movge	r2, #0
   20824:	movlt	r2, #1
   20828:	cmp	r2, #0
   2082c:	bne	20880 <__assert_fail@plt+0xf31c>
   20830:	ldr	r0, [sp, #4]
   20834:	add	r5, r8, r5
   20838:	cmp	r9, r5
   2083c:	movge	r0, #0
   20840:	andlt	r0, r0, #1
   20844:	cmp	r0, #0
   20848:	mov	r4, r5
   2084c:	bne	20880 <__assert_fail@plt+0xf31c>
   20850:	cmp	r7, #0
   20854:	bge	208f4 <__assert_fail@plt+0xf390>
   20858:	cmp	r5, #0
   2085c:	bge	208cc <__assert_fail@plt+0xf368>
   20860:	mov	r1, r7
   20864:	mvn	r0, #-2147483648	; 0x80000000
   20868:	bl	21b60 <__assert_fail@plt+0x105fc>
   2086c:	cmp	r5, r0
   20870:	movge	r0, #0
   20874:	movlt	r0, #1
   20878:	cmp	r0, #0
   2087c:	beq	208dc <__assert_fail@plt+0xf378>
   20880:	bl	12b30 <__assert_fail@plt+0x15cc>
   20884:	beq	207ec <__assert_fail@plt+0xf288>
   20888:	cmp	r4, #0
   2088c:	bge	20948 <__assert_fail@plt+0xf3e4>
   20890:	cmn	r4, #1
   20894:	beq	207ec <__assert_fail@plt+0xf288>
   20898:	mov	r1, r4
   2089c:	mov	r0, #-2147483648	; 0x80000000
   208a0:	bl	21b60 <__assert_fail@plt+0x105fc>
   208a4:	cmp	r7, r0
   208a8:	b	2078c <__assert_fail@plt+0xf228>
   208ac:	cmp	r8, #0
   208b0:	blt	20830 <__assert_fail@plt+0xf2cc>
   208b4:	mvn	r2, #-2147483648	; 0x80000000
   208b8:	sub	r2, r2, r5
   208bc:	cmp	r8, r2
   208c0:	movle	r2, #0
   208c4:	movgt	r2, #1
   208c8:	b	20828 <__assert_fail@plt+0xf2c4>
   208cc:	cmn	r7, #1
   208d0:	movne	r1, r7
   208d4:	movne	r0, #-2147483648	; 0x80000000
   208d8:	bne	2092c <__assert_fail@plt+0xf3c8>
   208dc:	mul	r1, r5, r7
   208e0:	mov	r0, sl
   208e4:	bl	205c4 <__assert_fail@plt+0xf060>
   208e8:	str	r4, [fp]
   208ec:	add	sp, sp, #12
   208f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208f4:	beq	208dc <__assert_fail@plt+0xf378>
   208f8:	cmp	r5, #0
   208fc:	movge	r1, r7
   20900:	mvnge	r0, #-2147483648	; 0x80000000
   20904:	bge	2092c <__assert_fail@plt+0xf3c8>
   20908:	cmn	r5, #1
   2090c:	beq	208dc <__assert_fail@plt+0xf378>
   20910:	mov	r1, r5
   20914:	mov	r0, #-2147483648	; 0x80000000
   20918:	bl	21b60 <__assert_fail@plt+0x105fc>
   2091c:	cmp	r7, r0
   20920:	movle	r0, #0
   20924:	movgt	r0, #1
   20928:	b	20878 <__assert_fail@plt+0xf314>
   2092c:	bl	21b60 <__assert_fail@plt+0x105fc>
   20930:	cmp	r5, r0
   20934:	b	20920 <__assert_fail@plt+0xf3bc>
   20938:	cmp	r7, #0
   2093c:	mov	r4, r9
   20940:	blt	207dc <__assert_fail@plt+0xf278>
   20944:	beq	207ec <__assert_fail@plt+0xf288>
   20948:	mov	r1, r7
   2094c:	mvn	r0, #-2147483648	; 0x80000000
   20950:	bl	21b60 <__assert_fail@plt+0x105fc>
   20954:	cmp	r0, r4
   20958:	movge	r0, #0
   2095c:	movlt	r0, #1
   20960:	b	20794 <__assert_fail@plt+0xf230>
   20964:	push	{r4, lr}
   20968:	bl	213d4 <__assert_fail@plt+0xfe70>
   2096c:	cmp	r0, #0
   20970:	popne	{r4, pc}
   20974:	bl	12b30 <__assert_fail@plt+0x15cc>
   20978:	mov	r1, #1
   2097c:	b	20964 <__assert_fail@plt+0xf400>
   20980:	push	{r4, lr}
   20984:	bl	213d4 <__assert_fail@plt+0xfe70>
   20988:	cmp	r0, #0
   2098c:	popne	{r4, pc}
   20990:	bl	12b30 <__assert_fail@plt+0x15cc>
   20994:	mov	r1, #1
   20998:	b	20980 <__assert_fail@plt+0xf41c>
   2099c:	push	{r4, r5, r6, lr}
   209a0:	mov	r4, r1
   209a4:	mov	r5, r0
   209a8:	mov	r0, r1
   209ac:	bl	20598 <__assert_fail@plt+0xf034>
   209b0:	mov	r2, r4
   209b4:	mov	r1, r5
   209b8:	pop	{r4, r5, r6, lr}
   209bc:	b	11264 <memcpy@plt>
   209c0:	push	{r4, r5, r6, lr}
   209c4:	mov	r4, r1
   209c8:	mov	r5, r0
   209cc:	mov	r0, r1
   209d0:	bl	205ac <__assert_fail@plt+0xf048>
   209d4:	mov	r2, r4
   209d8:	mov	r1, r5
   209dc:	pop	{r4, r5, r6, lr}
   209e0:	b	11264 <memcpy@plt>
   209e4:	push	{r4, r5, r6, lr}
   209e8:	mov	r5, r0
   209ec:	add	r0, r1, #1
   209f0:	mov	r4, r1
   209f4:	bl	205ac <__assert_fail@plt+0xf048>
   209f8:	mov	r2, #0
   209fc:	mov	r1, r5
   20a00:	strb	r2, [r0, r4]
   20a04:	mov	r2, r4
   20a08:	pop	{r4, r5, r6, lr}
   20a0c:	b	11264 <memcpy@plt>
   20a10:	push	{r4, lr}
   20a14:	mov	r4, r0
   20a18:	bl	113fc <strlen@plt>
   20a1c:	add	r1, r0, #1
   20a20:	mov	r0, r4
   20a24:	pop	{r4, lr}
   20a28:	b	2099c <__assert_fail@plt+0xf438>
   20a2c:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   20a30:	mov	r9, r3
   20a34:	ldr	r3, [sp, #48]	; 0x30
   20a38:	mov	r8, r2
   20a3c:	str	r3, [sp]
   20a40:	mov	r2, r1
   20a44:	add	r3, sp, #8
   20a48:	mov	r1, #0
   20a4c:	mov	r6, r0
   20a50:	ldr	r4, [sp, #56]	; 0x38
   20a54:	bl	20ce0 <__assert_fail@plt+0xf77c>
   20a58:	cmp	r0, #0
   20a5c:	bne	20adc <__assert_fail@plt+0xf578>
   20a60:	ldrd	r0, [sp, #8]
   20a64:	cmp	r0, r8
   20a68:	sbcs	r3, r1, r9
   20a6c:	ldrd	r2, [sp, #40]	; 0x28
   20a70:	movlt	ip, #1
   20a74:	movge	ip, #0
   20a78:	cmp	r2, r0
   20a7c:	sbcs	r3, r3, r1
   20a80:	movge	r3, ip
   20a84:	orrlt	r3, ip, #1
   20a88:	cmp	r3, #0
   20a8c:	beq	20b58 <__assert_fail@plt+0xf5f4>
   20a90:	cmp	r0, #1073741824	; 0x40000000
   20a94:	sbcs	r3, r1, #0
   20a98:	blt	20abc <__assert_fail@plt+0xf558>
   20a9c:	bl	11414 <__errno_location@plt>
   20aa0:	mov	r3, #75	; 0x4b
   20aa4:	cmp	r4, #0
   20aa8:	str	r3, [r0]
   20aac:	beq	20b24 <__assert_fail@plt+0xf5c0>
   20ab0:	bl	11414 <__errno_location@plt>
   20ab4:	ldr	r5, [r0]
   20ab8:	b	20b38 <__assert_fail@plt+0xf5d4>
   20abc:	mov	r2, #-1073741824	; 0xc0000000
   20ac0:	mvn	r3, #0
   20ac4:	cmp	r0, r2
   20ac8:	sbcs	r3, r1, r3
   20acc:	blt	20a9c <__assert_fail@plt+0xf538>
   20ad0:	bl	11414 <__errno_location@plt>
   20ad4:	mov	r3, #34	; 0x22
   20ad8:	b	20aa4 <__assert_fail@plt+0xf540>
   20adc:	cmp	r0, #1
   20ae0:	bne	20b08 <__assert_fail@plt+0xf5a4>
   20ae4:	bl	11414 <__errno_location@plt>
   20ae8:	mov	r3, #75	; 0x4b
   20aec:	cmp	r4, #0
   20af0:	str	r3, [r0]
   20af4:	bne	20b28 <__assert_fail@plt+0xf5c4>
   20af8:	bl	11414 <__errno_location@plt>
   20afc:	mov	r4, #1
   20b00:	ldr	r5, [r0]
   20b04:	b	20b38 <__assert_fail@plt+0xf5d4>
   20b08:	cmp	r0, #3
   20b0c:	bne	20b1c <__assert_fail@plt+0xf5b8>
   20b10:	bl	11414 <__errno_location@plt>
   20b14:	mov	r3, #0
   20b18:	b	20aec <__assert_fail@plt+0xf588>
   20b1c:	cmp	r4, #0
   20b20:	bne	20b28 <__assert_fail@plt+0xf5c4>
   20b24:	mov	r4, #1
   20b28:	bl	11414 <__errno_location@plt>
   20b2c:	ldr	r5, [r0]
   20b30:	cmp	r5, #22
   20b34:	moveq	r5, #0
   20b38:	mov	r0, r6
   20b3c:	bl	14ef4 <__assert_fail@plt+0x3990>
   20b40:	ldr	r3, [sp, #52]	; 0x34
   20b44:	ldr	r2, [pc, #20]	; 20b60 <__assert_fail@plt+0xf5fc>
   20b48:	mov	r1, r5
   20b4c:	str	r0, [sp]
   20b50:	mov	r0, r4
   20b54:	bl	11384 <error@plt>
   20b58:	add	sp, sp, #16
   20b5c:	pop	{r4, r5, r6, r8, r9, pc}
   20b60:	andeq	r2, r2, r3, asr ip
   20b64:	push	{r4, r5}
   20b68:	mov	r1, #10
   20b6c:	pop	{r4, r5}
   20b70:	b	20a2c <__assert_fail@plt+0xf4c8>
   20b74:	push	{r4, r5, r6, r7, r8, lr}
   20b78:	subs	r4, r1, #0
   20b7c:	mov	r5, r0
   20b80:	bge	20c3c <__assert_fail@plt+0xf6d8>
   20b84:	ldrd	r6, [r0]
   20b88:	cmp	r6, #0
   20b8c:	sbcs	r3, r7, #0
   20b90:	bge	20bf0 <__assert_fail@plt+0xf68c>
   20b94:	asr	r3, r4, #31
   20b98:	mov	r2, r4
   20b9c:	mvn	r0, #0
   20ba0:	mvn	r1, #-2147483648	; 0x80000000
   20ba4:	bl	21da0 <__assert_fail@plt+0x1083c>
   20ba8:	cmp	r6, r0
   20bac:	sbcs	r3, r7, r1
   20bb0:	movlt	r3, #1
   20bb4:	movge	r3, #0
   20bb8:	cmp	r3, #0
   20bbc:	movne	r2, #0
   20bc0:	movne	r3, #-2147483648	; 0x80000000
   20bc4:	bne	20c30 <__assert_fail@plt+0xf6cc>
   20bc8:	ldr	r2, [r5]
   20bcc:	asr	r3, r4, #31
   20bd0:	ldr	r1, [r5, #4]
   20bd4:	mul	r3, r3, r2
   20bd8:	mov	r0, #0
   20bdc:	mla	r1, r4, r1, r3
   20be0:	umull	r2, r3, r2, r4
   20be4:	add	r3, r1, r3
   20be8:	strd	r2, [r5]
   20bec:	pop	{r4, r5, r6, r7, r8, pc}
   20bf0:	cmn	r4, #1
   20bf4:	moveq	r3, #0
   20bf8:	beq	20c20 <__assert_fail@plt+0xf6bc>
   20bfc:	mov	r2, r4
   20c00:	asr	r3, r4, #31
   20c04:	mov	r0, #0
   20c08:	mov	r1, #-2147483648	; 0x80000000
   20c0c:	bl	21da0 <__assert_fail@plt+0x1083c>
   20c10:	cmp	r0, r6
   20c14:	sbcs	r3, r1, r7
   20c18:	movlt	r3, #1
   20c1c:	movge	r3, #0
   20c20:	cmp	r3, #0
   20c24:	mvnne	r2, #0
   20c28:	mvnne	r3, #-2147483648	; 0x80000000
   20c2c:	beq	20bc8 <__assert_fail@plt+0xf664>
   20c30:	strd	r2, [r5]
   20c34:	mov	r0, #1
   20c38:	pop	{r4, r5, r6, r7, r8, pc}
   20c3c:	beq	20bc8 <__assert_fail@plt+0xf664>
   20c40:	ldrd	r6, [r0]
   20c44:	cmp	r6, #0
   20c48:	sbcs	r3, r7, #0
   20c4c:	bge	20c90 <__assert_fail@plt+0xf72c>
   20c50:	mvn	r3, #0
   20c54:	cmp	r7, r3
   20c58:	mvn	r2, #0
   20c5c:	cmpeq	r6, r2
   20c60:	moveq	r3, #0
   20c64:	beq	20bb8 <__assert_fail@plt+0xf654>
   20c68:	mov	r2, r6
   20c6c:	mov	r3, r7
   20c70:	mov	r0, #0
   20c74:	mov	r1, #-2147483648	; 0x80000000
   20c78:	bl	21da0 <__assert_fail@plt+0x1083c>
   20c7c:	asr	r3, r4, #31
   20c80:	mov	r2, r4
   20c84:	cmp	r0, r4
   20c88:	sbcs	r3, r1, r3
   20c8c:	b	20bb0 <__assert_fail@plt+0xf64c>
   20c90:	mov	r2, r4
   20c94:	asr	r3, r4, #31
   20c98:	mvn	r0, #0
   20c9c:	mvn	r1, #-2147483648	; 0x80000000
   20ca0:	b	20c0c <__assert_fail@plt+0xf6a8>
   20ca4:	push	{r4, r5, r6, r7, r8, lr}
   20ca8:	mov	r6, r0
   20cac:	mov	r7, r1
   20cb0:	mov	r5, r2
   20cb4:	mov	r4, #0
   20cb8:	cmp	r5, #0
   20cbc:	bne	20cc8 <__assert_fail@plt+0xf764>
   20cc0:	mov	r0, r4
   20cc4:	pop	{r4, r5, r6, r7, r8, pc}
   20cc8:	mov	r1, r7
   20ccc:	mov	r0, r6
   20cd0:	bl	20b74 <__assert_fail@plt+0xf610>
   20cd4:	sub	r5, r5, #1
   20cd8:	orr	r4, r4, r0
   20cdc:	b	20cb8 <__assert_fail@plt+0xf754>
   20ce0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   20ce4:	cmp	r2, #36	; 0x24
   20ce8:	ldr	r9, [sp, #48]	; 0x30
   20cec:	bls	20d04 <__assert_fail@plt+0xf7a0>
   20cf0:	ldr	r3, [pc, #724]	; 20fcc <__assert_fail@plt+0xfa68>
   20cf4:	mov	r2, #85	; 0x55
   20cf8:	ldr	r1, [pc, #720]	; 20fd0 <__assert_fail@plt+0xfa6c>
   20cfc:	ldr	r0, [pc, #720]	; 20fd4 <__assert_fail@plt+0xfa70>
   20d00:	bl	11564 <__assert_fail@plt>
   20d04:	cmp	r1, #0
   20d08:	mov	r7, r1
   20d0c:	mov	r4, r0
   20d10:	addeq	r7, sp, #4
   20d14:	mov	r6, r2
   20d18:	mov	r8, r3
   20d1c:	bl	11414 <__errno_location@plt>
   20d20:	mov	r5, #0
   20d24:	mov	r2, r6
   20d28:	mov	r1, r7
   20d2c:	str	r5, [r0]
   20d30:	mov	sl, r0
   20d34:	mov	r0, r4
   20d38:	bl	1148c <strtoimax@plt>
   20d3c:	ldr	r6, [r7]
   20d40:	cmp	r4, r6
   20d44:	strd	r0, [sp, #8]
   20d48:	bne	20dac <__assert_fail@plt+0xf848>
   20d4c:	cmp	r9, r5
   20d50:	beq	20fc4 <__assert_fail@plt+0xfa60>
   20d54:	ldrb	r1, [r6]
   20d58:	cmp	r1, r5
   20d5c:	beq	20fc4 <__assert_fail@plt+0xfa60>
   20d60:	mov	r0, r9
   20d64:	bl	11408 <strchr@plt>
   20d68:	cmp	r0, r5
   20d6c:	beq	20fc4 <__assert_fail@plt+0xfa60>
   20d70:	mov	r2, #1
   20d74:	mov	r3, #0
   20d78:	strd	r2, [sp, #8]
   20d7c:	ldrb	r4, [r6]
   20d80:	cmp	r4, #0
   20d84:	beq	20ec4 <__assert_fail@plt+0xf960>
   20d88:	mov	r1, r4
   20d8c:	mov	r0, r9
   20d90:	bl	11408 <strchr@plt>
   20d94:	cmp	r0, #0
   20d98:	bne	20ddc <__assert_fail@plt+0xf878>
   20d9c:	ldrd	r2, [sp, #8]
   20da0:	orr	r5, r5, #2
   20da4:	strd	r2, [r8]
   20da8:	b	20dd0 <__assert_fail@plt+0xf86c>
   20dac:	ldr	r5, [sl]
   20db0:	cmp	r5, #0
   20db4:	beq	20dc4 <__assert_fail@plt+0xf860>
   20db8:	cmp	r5, #34	; 0x22
   20dbc:	bne	20fc4 <__assert_fail@plt+0xfa60>
   20dc0:	mov	r5, #1
   20dc4:	cmp	r9, #0
   20dc8:	bne	20d7c <__assert_fail@plt+0xf818>
   20dcc:	strd	r0, [r8]
   20dd0:	mov	r0, r5
   20dd4:	add	sp, sp, #16
   20dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20ddc:	cmp	r4, #84	; 0x54
   20de0:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20de4:	bhi	20e1c <__assert_fail@plt+0xf8b8>
   20de8:	cmp	r4, #75	; 0x4b
   20dec:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20df0:	bhi	20e0c <__assert_fail@plt+0xf8a8>
   20df4:	cmp	r4, #69	; 0x45
   20df8:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20dfc:	cmp	r4, #71	; 0x47
   20e00:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20e04:	mov	r6, #1
   20e08:	b	20ef8 <__assert_fail@plt+0xf994>
   20e0c:	cmp	r4, #77	; 0x4d
   20e10:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20e14:	cmp	r4, #80	; 0x50
   20e18:	b	20e00 <__assert_fail@plt+0xf89c>
   20e1c:	cmp	r4, #103	; 0x67
   20e20:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20e24:	bhi	20ed0 <__assert_fail@plt+0xf96c>
   20e28:	sub	r3, r4, #89	; 0x59
   20e2c:	cmp	r3, #1
   20e30:	bhi	20e04 <__assert_fail@plt+0xf8a0>
   20e34:	mov	r1, #48	; 0x30
   20e38:	mov	r0, r9
   20e3c:	bl	11408 <strchr@plt>
   20e40:	cmp	r0, #0
   20e44:	beq	20e04 <__assert_fail@plt+0xf8a0>
   20e48:	ldrb	r3, [r6, #1]
   20e4c:	cmp	r3, #68	; 0x44
   20e50:	beq	20e64 <__assert_fail@plt+0xf900>
   20e54:	cmp	r3, #105	; 0x69
   20e58:	beq	20ee8 <__assert_fail@plt+0xf984>
   20e5c:	cmp	r3, #66	; 0x42
   20e60:	bne	20e04 <__assert_fail@plt+0xf8a0>
   20e64:	mov	r6, #2
   20e68:	mov	r1, #1000	; 0x3e8
   20e6c:	cmp	r4, #89	; 0x59
   20e70:	beq	20fac <__assert_fail@plt+0xfa48>
   20e74:	bhi	20f20 <__assert_fail@plt+0xf9bc>
   20e78:	cmp	r4, #75	; 0x4b
   20e7c:	beq	20f60 <__assert_fail@plt+0xf9fc>
   20e80:	bhi	20f00 <__assert_fail@plt+0xf99c>
   20e84:	cmp	r4, #69	; 0x45
   20e88:	beq	20f88 <__assert_fail@plt+0xfa24>
   20e8c:	cmp	r4, #71	; 0x47
   20e90:	beq	20f94 <__assert_fail@plt+0xfa30>
   20e94:	cmp	r4, #66	; 0x42
   20e98:	moveq	r1, #1024	; 0x400
   20e9c:	bne	20d9c <__assert_fail@plt+0xf838>
   20ea0:	add	r0, sp, #8
   20ea4:	bl	20b74 <__assert_fail@plt+0xf610>
   20ea8:	ldr	r3, [r7]
   20eac:	orr	r5, r5, r0
   20eb0:	add	r2, r3, r6
   20eb4:	str	r2, [r7]
   20eb8:	ldrb	r3, [r3, r6]
   20ebc:	cmp	r3, #0
   20ec0:	orrne	r5, r5, #2
   20ec4:	ldrd	r2, [sp, #8]
   20ec8:	strd	r2, [r8]
   20ecc:	b	20dd0 <__assert_fail@plt+0xf86c>
   20ed0:	cmp	r4, #109	; 0x6d
   20ed4:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20ed8:	cmp	r4, #116	; 0x74
   20edc:	beq	20e34 <__assert_fail@plt+0xf8d0>
   20ee0:	cmp	r4, #107	; 0x6b
   20ee4:	b	20e00 <__assert_fail@plt+0xf89c>
   20ee8:	ldrb	r6, [r6, #2]
   20eec:	cmp	r6, #66	; 0x42
   20ef0:	movne	r6, #1
   20ef4:	moveq	r6, #3
   20ef8:	mov	r1, #1024	; 0x400
   20efc:	b	20e6c <__assert_fail@plt+0xf908>
   20f00:	cmp	r4, #80	; 0x50
   20f04:	beq	20f9c <__assert_fail@plt+0xfa38>
   20f08:	cmp	r4, #84	; 0x54
   20f0c:	beq	20fa4 <__assert_fail@plt+0xfa40>
   20f10:	cmp	r4, #77	; 0x4d
   20f14:	bne	20d9c <__assert_fail@plt+0xf838>
   20f18:	mov	r2, #2
   20f1c:	b	20f8c <__assert_fail@plt+0xfa28>
   20f20:	cmp	r4, #103	; 0x67
   20f24:	beq	20f94 <__assert_fail@plt+0xfa30>
   20f28:	bhi	20f4c <__assert_fail@plt+0xf9e8>
   20f2c:	cmp	r4, #98	; 0x62
   20f30:	beq	20f80 <__assert_fail@plt+0xfa1c>
   20f34:	cmp	r4, #99	; 0x63
   20f38:	beq	20fbc <__assert_fail@plt+0xfa58>
   20f3c:	cmp	r4, #90	; 0x5a
   20f40:	bne	20d9c <__assert_fail@plt+0xf838>
   20f44:	mov	r2, #7
   20f48:	b	20f8c <__assert_fail@plt+0xfa28>
   20f4c:	cmp	r4, #109	; 0x6d
   20f50:	beq	20f18 <__assert_fail@plt+0xf9b4>
   20f54:	bhi	20f68 <__assert_fail@plt+0xfa04>
   20f58:	cmp	r4, #107	; 0x6b
   20f5c:	bne	20d9c <__assert_fail@plt+0xf838>
   20f60:	mov	r2, #1
   20f64:	b	20f8c <__assert_fail@plt+0xfa28>
   20f68:	cmp	r4, #116	; 0x74
   20f6c:	beq	20fa4 <__assert_fail@plt+0xfa40>
   20f70:	cmp	r4, #119	; 0x77
   20f74:	moveq	r1, #2
   20f78:	beq	20ea0 <__assert_fail@plt+0xf93c>
   20f7c:	b	20d9c <__assert_fail@plt+0xf838>
   20f80:	mov	r1, #512	; 0x200
   20f84:	b	20ea0 <__assert_fail@plt+0xf93c>
   20f88:	mov	r2, #6
   20f8c:	add	r0, sp, #8
   20f90:	b	20fb4 <__assert_fail@plt+0xfa50>
   20f94:	mov	r2, #3
   20f98:	b	20f8c <__assert_fail@plt+0xfa28>
   20f9c:	mov	r2, #5
   20fa0:	b	20f8c <__assert_fail@plt+0xfa28>
   20fa4:	mov	r2, #4
   20fa8:	b	20f8c <__assert_fail@plt+0xfa28>
   20fac:	mov	r2, #8
   20fb0:	add	r0, sp, r2
   20fb4:	bl	20ca4 <__assert_fail@plt+0xf740>
   20fb8:	b	20ea8 <__assert_fail@plt+0xf944>
   20fbc:	mov	r0, #0
   20fc0:	b	20ea8 <__assert_fail@plt+0xf944>
   20fc4:	mov	r5, #4
   20fc8:	b	20dd0 <__assert_fail@plt+0xf86c>
   20fcc:	andeq	r3, r2, sp, lsl #5
   20fd0:	muleq	r2, r8, r2
   20fd4:	andeq	r3, r2, r6, lsr #5
   20fd8:	push	{r4, r5, r6, lr}
   20fdc:	subs	r5, r1, #0
   20fe0:	mov	r4, r0
   20fe4:	bge	21024 <__assert_fail@plt+0xfac0>
   20fe8:	ldm	r0, {r0, r3}
   20fec:	orr	r0, r0, r3
   20ff0:	adds	r0, r0, #0
   20ff4:	movne	r0, #1
   20ff8:	cmp	r0, #0
   20ffc:	bne	21058 <__assert_fail@plt+0xfaf4>
   21000:	ldr	r2, [r4]
   21004:	asr	r3, r5, #31
   21008:	ldr	r1, [r4, #4]
   2100c:	mul	r3, r3, r2
   21010:	mla	r1, r5, r1, r3
   21014:	umull	r2, r3, r2, r5
   21018:	add	r3, r1, r3
   2101c:	strd	r2, [r4]
   21020:	pop	{r4, r5, r6, pc}
   21024:	moveq	r0, r5
   21028:	beq	20ff8 <__assert_fail@plt+0xfa94>
   2102c:	mov	r2, r5
   21030:	asr	r3, r5, #31
   21034:	mvn	r0, #0
   21038:	mvn	r1, #0
   2103c:	bl	21e74 <__assert_fail@plt+0x10910>
   21040:	ldrd	r2, [r4]
   21044:	cmp	r1, r3
   21048:	cmpeq	r0, r2
   2104c:	movcc	r0, #1
   21050:	movcs	r0, #0
   21054:	b	20ff8 <__assert_fail@plt+0xfa94>
   21058:	mvn	r2, #0
   2105c:	mvn	r3, #0
   21060:	mov	r0, #1
   21064:	strd	r2, [r4]
   21068:	pop	{r4, r5, r6, pc}
   2106c:	push	{r4, r5, r6, r7, r8, lr}
   21070:	mov	r6, r0
   21074:	mov	r7, r1
   21078:	mov	r5, r2
   2107c:	mov	r4, #0
   21080:	cmp	r5, #0
   21084:	bne	21090 <__assert_fail@plt+0xfb2c>
   21088:	mov	r0, r4
   2108c:	pop	{r4, r5, r6, r7, r8, pc}
   21090:	mov	r1, r7
   21094:	mov	r0, r6
   21098:	bl	20fd8 <__assert_fail@plt+0xfa74>
   2109c:	sub	r5, r5, #1
   210a0:	orr	r4, r4, r0
   210a4:	b	21080 <__assert_fail@plt+0xfb1c>
   210a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210ac:	sub	sp, sp, #20
   210b0:	cmp	r2, #36	; 0x24
   210b4:	ldr	r9, [sp, #56]	; 0x38
   210b8:	bls	210d0 <__assert_fail@plt+0xfb6c>
   210bc:	ldr	r3, [pc, #772]	; 213c8 <__assert_fail@plt+0xfe64>
   210c0:	mov	r2, #85	; 0x55
   210c4:	ldr	r1, [pc, #768]	; 213cc <__assert_fail@plt+0xfe68>
   210c8:	ldr	r0, [pc, #768]	; 213d0 <__assert_fail@plt+0xfe6c>
   210cc:	bl	11564 <__assert_fail@plt>
   210d0:	cmp	r1, #0
   210d4:	mov	r7, r1
   210d8:	mov	r4, r0
   210dc:	mov	fp, r2
   210e0:	mov	r8, r3
   210e4:	addeq	r7, sp, #4
   210e8:	bl	11414 <__errno_location@plt>
   210ec:	mov	r3, #0
   210f0:	str	r3, [r0]
   210f4:	mov	sl, r0
   210f8:	bl	113e4 <__ctype_b_loc@plt>
   210fc:	ldrb	r6, [r4]
   21100:	mov	r3, r4
   21104:	ldr	r1, [r0]
   21108:	lsl	r2, r6, #1
   2110c:	ldrh	r5, [r1, r2]
   21110:	ands	r5, r5, #8192	; 0x2000
   21114:	bne	21130 <__assert_fail@plt+0xfbcc>
   21118:	cmp	r6, #45	; 0x2d
   2111c:	bne	21138 <__assert_fail@plt+0xfbd4>
   21120:	mov	r5, #4
   21124:	mov	r0, r5
   21128:	add	sp, sp, #20
   2112c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21130:	ldrb	r6, [r3, #1]!
   21134:	b	21108 <__assert_fail@plt+0xfba4>
   21138:	mov	r2, fp
   2113c:	mov	r1, r7
   21140:	mov	r0, r4
   21144:	bl	11474 <strtoumax@plt>
   21148:	ldr	r6, [r7]
   2114c:	cmp	r4, r6
   21150:	strd	r0, [sp, #8]
   21154:	bne	211b8 <__assert_fail@plt+0xfc54>
   21158:	cmp	r9, #0
   2115c:	beq	21120 <__assert_fail@plt+0xfbbc>
   21160:	ldrb	r1, [r6]
   21164:	cmp	r1, #0
   21168:	beq	21120 <__assert_fail@plt+0xfbbc>
   2116c:	mov	r0, r9
   21170:	bl	11408 <strchr@plt>
   21174:	cmp	r0, #0
   21178:	beq	21120 <__assert_fail@plt+0xfbbc>
   2117c:	mov	r2, #1
   21180:	mov	r3, #0
   21184:	strd	r2, [sp, #8]
   21188:	ldrb	r4, [r6]
   2118c:	cmp	r4, #0
   21190:	beq	212c8 <__assert_fail@plt+0xfd64>
   21194:	mov	r1, r4
   21198:	mov	r0, r9
   2119c:	bl	11408 <strchr@plt>
   211a0:	cmp	r0, #0
   211a4:	bne	211e0 <__assert_fail@plt+0xfc7c>
   211a8:	ldrd	r2, [sp, #8]
   211ac:	orr	r5, r5, #2
   211b0:	strd	r2, [r8]
   211b4:	b	21124 <__assert_fail@plt+0xfbc0>
   211b8:	ldr	r5, [sl]
   211bc:	cmp	r5, #0
   211c0:	beq	211d0 <__assert_fail@plt+0xfc6c>
   211c4:	cmp	r5, #34	; 0x22
   211c8:	bne	21120 <__assert_fail@plt+0xfbbc>
   211cc:	mov	r5, #1
   211d0:	cmp	r9, #0
   211d4:	bne	21188 <__assert_fail@plt+0xfc24>
   211d8:	strd	r0, [r8]
   211dc:	b	21124 <__assert_fail@plt+0xfbc0>
   211e0:	cmp	r4, #84	; 0x54
   211e4:	beq	21238 <__assert_fail@plt+0xfcd4>
   211e8:	bhi	21220 <__assert_fail@plt+0xfcbc>
   211ec:	cmp	r4, #75	; 0x4b
   211f0:	beq	21238 <__assert_fail@plt+0xfcd4>
   211f4:	bhi	21210 <__assert_fail@plt+0xfcac>
   211f8:	cmp	r4, #69	; 0x45
   211fc:	beq	21238 <__assert_fail@plt+0xfcd4>
   21200:	cmp	r4, #71	; 0x47
   21204:	beq	21238 <__assert_fail@plt+0xfcd4>
   21208:	mov	r6, #1
   2120c:	b	212fc <__assert_fail@plt+0xfd98>
   21210:	cmp	r4, #77	; 0x4d
   21214:	beq	21238 <__assert_fail@plt+0xfcd4>
   21218:	cmp	r4, #80	; 0x50
   2121c:	b	21204 <__assert_fail@plt+0xfca0>
   21220:	cmp	r4, #103	; 0x67
   21224:	beq	21238 <__assert_fail@plt+0xfcd4>
   21228:	bhi	212d4 <__assert_fail@plt+0xfd70>
   2122c:	sub	r3, r4, #89	; 0x59
   21230:	cmp	r3, #1
   21234:	bhi	21208 <__assert_fail@plt+0xfca4>
   21238:	mov	r1, #48	; 0x30
   2123c:	mov	r0, r9
   21240:	bl	11408 <strchr@plt>
   21244:	cmp	r0, #0
   21248:	beq	21208 <__assert_fail@plt+0xfca4>
   2124c:	ldrb	r3, [r6, #1]
   21250:	cmp	r3, #68	; 0x44
   21254:	beq	21268 <__assert_fail@plt+0xfd04>
   21258:	cmp	r3, #105	; 0x69
   2125c:	beq	212ec <__assert_fail@plt+0xfd88>
   21260:	cmp	r3, #66	; 0x42
   21264:	bne	21208 <__assert_fail@plt+0xfca4>
   21268:	mov	r6, #2
   2126c:	mov	r1, #1000	; 0x3e8
   21270:	cmp	r4, #89	; 0x59
   21274:	beq	213b0 <__assert_fail@plt+0xfe4c>
   21278:	bhi	21324 <__assert_fail@plt+0xfdc0>
   2127c:	cmp	r4, #75	; 0x4b
   21280:	beq	21364 <__assert_fail@plt+0xfe00>
   21284:	bhi	21304 <__assert_fail@plt+0xfda0>
   21288:	cmp	r4, #69	; 0x45
   2128c:	beq	2138c <__assert_fail@plt+0xfe28>
   21290:	cmp	r4, #71	; 0x47
   21294:	beq	21398 <__assert_fail@plt+0xfe34>
   21298:	cmp	r4, #66	; 0x42
   2129c:	moveq	r1, #1024	; 0x400
   212a0:	bne	211a8 <__assert_fail@plt+0xfc44>
   212a4:	add	r0, sp, #8
   212a8:	bl	20fd8 <__assert_fail@plt+0xfa74>
   212ac:	ldr	r3, [r7]
   212b0:	orr	r5, r5, r0
   212b4:	add	r2, r3, r6
   212b8:	str	r2, [r7]
   212bc:	ldrb	r3, [r3, r6]
   212c0:	cmp	r3, #0
   212c4:	orrne	r5, r5, #2
   212c8:	ldrd	r2, [sp, #8]
   212cc:	strd	r2, [r8]
   212d0:	b	21124 <__assert_fail@plt+0xfbc0>
   212d4:	cmp	r4, #109	; 0x6d
   212d8:	beq	21238 <__assert_fail@plt+0xfcd4>
   212dc:	cmp	r4, #116	; 0x74
   212e0:	beq	21238 <__assert_fail@plt+0xfcd4>
   212e4:	cmp	r4, #107	; 0x6b
   212e8:	b	21204 <__assert_fail@plt+0xfca0>
   212ec:	ldrb	r6, [r6, #2]
   212f0:	cmp	r6, #66	; 0x42
   212f4:	movne	r6, #1
   212f8:	moveq	r6, #3
   212fc:	mov	r1, #1024	; 0x400
   21300:	b	21270 <__assert_fail@plt+0xfd0c>
   21304:	cmp	r4, #80	; 0x50
   21308:	beq	213a0 <__assert_fail@plt+0xfe3c>
   2130c:	cmp	r4, #84	; 0x54
   21310:	beq	213a8 <__assert_fail@plt+0xfe44>
   21314:	cmp	r4, #77	; 0x4d
   21318:	bne	211a8 <__assert_fail@plt+0xfc44>
   2131c:	mov	r2, #2
   21320:	b	21390 <__assert_fail@plt+0xfe2c>
   21324:	cmp	r4, #103	; 0x67
   21328:	beq	21398 <__assert_fail@plt+0xfe34>
   2132c:	bhi	21350 <__assert_fail@plt+0xfdec>
   21330:	cmp	r4, #98	; 0x62
   21334:	beq	21384 <__assert_fail@plt+0xfe20>
   21338:	cmp	r4, #99	; 0x63
   2133c:	beq	213c0 <__assert_fail@plt+0xfe5c>
   21340:	cmp	r4, #90	; 0x5a
   21344:	bne	211a8 <__assert_fail@plt+0xfc44>
   21348:	mov	r2, #7
   2134c:	b	21390 <__assert_fail@plt+0xfe2c>
   21350:	cmp	r4, #109	; 0x6d
   21354:	beq	2131c <__assert_fail@plt+0xfdb8>
   21358:	bhi	2136c <__assert_fail@plt+0xfe08>
   2135c:	cmp	r4, #107	; 0x6b
   21360:	bne	211a8 <__assert_fail@plt+0xfc44>
   21364:	mov	r2, #1
   21368:	b	21390 <__assert_fail@plt+0xfe2c>
   2136c:	cmp	r4, #116	; 0x74
   21370:	beq	213a8 <__assert_fail@plt+0xfe44>
   21374:	cmp	r4, #119	; 0x77
   21378:	moveq	r1, #2
   2137c:	beq	212a4 <__assert_fail@plt+0xfd40>
   21380:	b	211a8 <__assert_fail@plt+0xfc44>
   21384:	mov	r1, #512	; 0x200
   21388:	b	212a4 <__assert_fail@plt+0xfd40>
   2138c:	mov	r2, #6
   21390:	add	r0, sp, #8
   21394:	b	213b8 <__assert_fail@plt+0xfe54>
   21398:	mov	r2, #3
   2139c:	b	21390 <__assert_fail@plt+0xfe2c>
   213a0:	mov	r2, #5
   213a4:	b	21390 <__assert_fail@plt+0xfe2c>
   213a8:	mov	r2, #4
   213ac:	b	21390 <__assert_fail@plt+0xfe2c>
   213b0:	mov	r2, #8
   213b4:	add	r0, sp, r2
   213b8:	bl	2106c <__assert_fail@plt+0xfb08>
   213bc:	b	212ac <__assert_fail@plt+0xfd48>
   213c0:	mov	r0, #0
   213c4:	b	212ac <__assert_fail@plt+0xfd48>
   213c8:	andeq	r3, r2, ip, asr #5
   213cc:	muleq	r2, r8, r2
   213d0:	andeq	r3, r2, r6, lsr #5
   213d4:	cmp	r1, #0
   213d8:	cmpne	r0, #0
   213dc:	moveq	r1, #1
   213e0:	moveq	r0, r1
   213e4:	umull	r2, r3, r0, r1
   213e8:	adds	r3, r3, #0
   213ec:	movne	r3, #1
   213f0:	cmp	r2, #0
   213f4:	blt	21404 <__assert_fail@plt+0xfea0>
   213f8:	cmp	r3, #0
   213fc:	bne	21404 <__assert_fail@plt+0xfea0>
   21400:	b	111b0 <calloc@plt>
   21404:	push	{r4, lr}
   21408:	bl	11414 <__errno_location@plt>
   2140c:	mov	r3, #12
   21410:	str	r3, [r0]
   21414:	mov	r0, #0
   21418:	pop	{r4, pc}
   2141c:	cmp	r0, #0
   21420:	mov	r3, #0
   21424:	moveq	r0, #1
   21428:	adds	r3, r3, #0
   2142c:	movne	r3, #1
   21430:	cmp	r0, #0
   21434:	blt	21444 <__assert_fail@plt+0xfee0>
   21438:	cmp	r3, #0
   2143c:	bne	21444 <__assert_fail@plt+0xfee0>
   21440:	b	1139c <malloc@plt>
   21444:	push	{r4, lr}
   21448:	bl	11414 <__errno_location@plt>
   2144c:	mov	r3, #12
   21450:	str	r3, [r0]
   21454:	mov	r0, #0
   21458:	pop	{r4, pc}
   2145c:	cmp	r0, #0
   21460:	push	{r4, lr}
   21464:	mov	r4, r1
   21468:	bne	21478 <__assert_fail@plt+0xff14>
   2146c:	mov	r0, r1
   21470:	pop	{r4, lr}
   21474:	b	2141c <__assert_fail@plt+0xfeb8>
   21478:	cmp	r1, #0
   2147c:	bne	2148c <__assert_fail@plt+0xff28>
   21480:	bl	1370c <__assert_fail@plt+0x21a8>
   21484:	mov	r0, #0
   21488:	pop	{r4, pc}
   2148c:	cmp	r1, #0
   21490:	blt	214a0 <__assert_fail@plt+0xff3c>
   21494:	mov	r3, #0
   21498:	cmp	r3, r3
   2149c:	beq	214b0 <__assert_fail@plt+0xff4c>
   214a0:	bl	11414 <__errno_location@plt>
   214a4:	mov	r3, #12
   214a8:	str	r3, [r0]
   214ac:	b	21484 <__assert_fail@plt+0xff20>
   214b0:	pop	{r4, lr}
   214b4:	b	112f4 <realloc@plt>
   214b8:	push	{r4, r5, r6, lr}
   214bc:	mov	r4, r0
   214c0:	bl	11360 <__fpending@plt>
   214c4:	mov	r5, r0
   214c8:	mov	r0, r4
   214cc:	bl	1136c <ferror_unlocked@plt>
   214d0:	mov	r6, r0
   214d4:	mov	r0, r4
   214d8:	bl	13520 <__assert_fail@plt+0x1fbc>
   214dc:	cmp	r6, #0
   214e0:	mov	r4, r0
   214e4:	bne	21510 <__assert_fail@plt+0xffac>
   214e8:	cmp	r0, #0
   214ec:	beq	21508 <__assert_fail@plt+0xffa4>
   214f0:	cmp	r5, #0
   214f4:	bne	21520 <__assert_fail@plt+0xffbc>
   214f8:	bl	11414 <__errno_location@plt>
   214fc:	ldr	r4, [r0]
   21500:	subs	r4, r4, #9
   21504:	mvnne	r4, #0
   21508:	mov	r0, r4
   2150c:	pop	{r4, r5, r6, pc}
   21510:	cmp	r0, #0
   21514:	bne	21520 <__assert_fail@plt+0xffbc>
   21518:	bl	11414 <__errno_location@plt>
   2151c:	str	r4, [r0]
   21520:	mvn	r4, #0
   21524:	b	21508 <__assert_fail@plt+0xffa4>
   21528:	ldr	ip, [r0, #4]
   2152c:	cmp	ip, r1
   21530:	bcc	21540 <__assert_fail@plt+0xffdc>
   21534:	str	r1, [r0]
   21538:	mov	r0, #1
   2153c:	bx	lr
   21540:	cmp	r3, #0
   21544:	push	{r4, r5, r6, r7, r8, lr}
   21548:	mov	r7, r3
   2154c:	mov	r6, r2
   21550:	mov	r5, r1
   21554:	mov	r4, r0
   21558:	beq	21570 <__assert_fail@plt+0x1000c>
   2155c:	mov	r1, r3
   21560:	mvn	r0, #0
   21564:	bl	21954 <__assert_fail@plt+0x103f0>
   21568:	cmp	r5, r0
   2156c:	bhi	215d0 <__assert_fail@plt+0x1006c>
   21570:	ldr	r0, [r4, #8]
   21574:	mul	r1, r7, r5
   21578:	cmp	r0, r6
   2157c:	bne	215c0 <__assert_fail@plt+0x1005c>
   21580:	mov	r0, r1
   21584:	bl	2141c <__assert_fail@plt+0xfeb8>
   21588:	subs	r6, r0, #0
   2158c:	bne	21598 <__assert_fail@plt+0x10034>
   21590:	mov	r0, #0
   21594:	pop	{r4, r5, r6, r7, r8, pc}
   21598:	ldr	r1, [r4, #8]
   2159c:	cmp	r1, #0
   215a0:	beq	215b0 <__assert_fail@plt+0x1004c>
   215a4:	ldr	r2, [r4]
   215a8:	mul	r2, r2, r7
   215ac:	bl	11264 <memcpy@plt>
   215b0:	stmib	r4, {r5, r6}
   215b4:	str	r5, [r4]
   215b8:	mov	r0, #1
   215bc:	pop	{r4, r5, r6, r7, r8, pc}
   215c0:	bl	2145c <__assert_fail@plt+0xfef8>
   215c4:	subs	r6, r0, #0
   215c8:	bne	215b0 <__assert_fail@plt+0x1004c>
   215cc:	b	21590 <__assert_fail@plt+0x1002c>
   215d0:	bl	11414 <__errno_location@plt>
   215d4:	mov	r3, #12
   215d8:	str	r3, [r0]
   215dc:	b	21590 <__assert_fail@plt+0x1002c>
   215e0:	push	{r1, r2, r3}
   215e4:	push	{r0, r1, r4, r5, r6, r7, lr}
   215e8:	add	r2, sp, #32
   215ec:	ldr	r1, [sp, #28]
   215f0:	str	r2, [sp, #4]
   215f4:	cmp	r1, #0
   215f8:	beq	2163c <__assert_fail@plt+0x100d8>
   215fc:	ldr	r3, [pc, #396]	; 21790 <__assert_fail@plt+0x1022c>
   21600:	mov	r6, r0
   21604:	cmp	r1, r3
   21608:	beq	21648 <__assert_fail@plt+0x100e4>
   2160c:	cmp	r1, #11
   21610:	beq	2162c <__assert_fail@plt+0x100c8>
   21614:	bgt	21758 <__assert_fail@plt+0x101f4>
   21618:	cmp	r1, #3
   2161c:	beq	2162c <__assert_fail@plt+0x100c8>
   21620:	bgt	21734 <__assert_fail@plt+0x101d0>
   21624:	cmp	r1, #1
   21628:	bne	21740 <__assert_fail@plt+0x101dc>
   2162c:	mov	r0, r6
   21630:	bl	114b0 <fcntl64@plt>
   21634:	mov	r4, r0
   21638:	b	216f4 <__assert_fail@plt+0x10190>
   2163c:	ldr	r2, [sp, #32]
   21640:	bl	114b0 <fcntl64@plt>
   21644:	b	21634 <__assert_fail@plt+0x100d0>
   21648:	ldr	r5, [pc, #324]	; 21794 <__assert_fail@plt+0x10230>
   2164c:	add	r3, sp, #36	; 0x24
   21650:	str	r3, [sp, #4]
   21654:	ldr	r3, [r5]
   21658:	ldr	r7, [r2]
   2165c:	cmp	r3, #0
   21660:	mov	r2, r7
   21664:	blt	21708 <__assert_fail@plt+0x101a4>
   21668:	bl	114b0 <fcntl64@plt>
   2166c:	subs	r4, r0, #0
   21670:	bge	21684 <__assert_fail@plt+0x10120>
   21674:	bl	11414 <__errno_location@plt>
   21678:	ldr	r3, [r0]
   2167c:	cmp	r3, #22
   21680:	beq	216d4 <__assert_fail@plt+0x10170>
   21684:	mov	r3, #1
   21688:	str	r3, [r5]
   2168c:	cmp	r4, #0
   21690:	blt	216f4 <__assert_fail@plt+0x10190>
   21694:	ldr	r5, [r5]
   21698:	cmn	r5, #1
   2169c:	bne	216f4 <__assert_fail@plt+0x10190>
   216a0:	mov	r1, #1
   216a4:	mov	r0, r4
   216a8:	bl	114b0 <fcntl64@plt>
   216ac:	subs	r2, r0, #0
   216b0:	bge	21718 <__assert_fail@plt+0x101b4>
   216b4:	bl	11414 <__errno_location@plt>
   216b8:	ldr	r7, [r0]
   216bc:	mov	r6, r0
   216c0:	mov	r0, r4
   216c4:	bl	1154c <close@plt>
   216c8:	mov	r4, r5
   216cc:	str	r7, [r6]
   216d0:	b	216f4 <__assert_fail@plt+0x10190>
   216d4:	mov	r2, r7
   216d8:	mov	r1, #0
   216dc:	mov	r0, r6
   216e0:	bl	114b0 <fcntl64@plt>
   216e4:	subs	r4, r0, #0
   216e8:	mvnge	r3, #0
   216ec:	strge	r3, [r5]
   216f0:	bge	21694 <__assert_fail@plt+0x10130>
   216f4:	mov	r0, r4
   216f8:	add	sp, sp, #8
   216fc:	pop	{r4, r5, r6, r7, lr}
   21700:	add	sp, sp, #12
   21704:	bx	lr
   21708:	mov	r1, #0
   2170c:	bl	114b0 <fcntl64@plt>
   21710:	mov	r4, r0
   21714:	b	2168c <__assert_fail@plt+0x10128>
   21718:	orr	r2, r2, #1
   2171c:	mov	r1, #2
   21720:	mov	r0, r4
   21724:	bl	114b0 <fcntl64@plt>
   21728:	cmn	r0, #1
   2172c:	bne	216f4 <__assert_fail@plt+0x10190>
   21730:	b	216b4 <__assert_fail@plt+0x10150>
   21734:	cmp	r1, #8
   21738:	beq	21740 <__assert_fail@plt+0x101dc>
   2173c:	bgt	21750 <__assert_fail@plt+0x101ec>
   21740:	ldr	r3, [sp, #4]
   21744:	mov	r0, r6
   21748:	ldr	r2, [r3]
   2174c:	b	21640 <__assert_fail@plt+0x100dc>
   21750:	cmp	r1, #9
   21754:	b	21628 <__assert_fail@plt+0x100c4>
   21758:	ldr	r2, [pc, #56]	; 21798 <__assert_fail@plt+0x10234>
   2175c:	cmp	r1, r2
   21760:	bgt	21778 <__assert_fail@plt+0x10214>
   21764:	cmp	r1, r3
   21768:	ldrlt	r3, [pc, #44]	; 2179c <__assert_fail@plt+0x10238>
   2176c:	bge	21740 <__assert_fail@plt+0x101dc>
   21770:	cmp	r1, r3
   21774:	b	21628 <__assert_fail@plt+0x100c4>
   21778:	ldr	r3, [pc, #32]	; 217a0 <__assert_fail@plt+0x1023c>
   2177c:	cmp	r1, r3
   21780:	beq	21740 <__assert_fail@plt+0x101dc>
   21784:	blt	2162c <__assert_fail@plt+0x100c8>
   21788:	add	r3, r3, #1
   2178c:	b	21770 <__assert_fail@plt+0x1020c>
   21790:	andeq	r0, r0, r6, lsl #8
   21794:	strdeq	r4, [r3], -r8
   21798:	andeq	r0, r0, r7, lsl #8
   2179c:	andeq	r0, r0, r1, lsl #8
   217a0:	andeq	r0, r0, r9, lsl #8
   217a4:	push	{r4, lr}
   217a8:	mov	r0, #14
   217ac:	bl	114ec <nl_langinfo@plt>
   217b0:	ldr	r3, [pc, #24]	; 217d0 <__assert_fail@plt+0x1026c>
   217b4:	cmp	r0, #0
   217b8:	moveq	r0, r3
   217bc:	ldr	r3, [pc, #16]	; 217d4 <__assert_fail@plt+0x10270>
   217c0:	ldrb	r2, [r0]
   217c4:	cmp	r2, #0
   217c8:	moveq	r0, r3
   217cc:	pop	{r4, pc}
   217d0:	andeq	r2, r2, r9, asr r7
   217d4:	ldrdeq	r3, [r2], -r7
   217d8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   217dc:	subs	r5, r0, #0
   217e0:	addeq	r5, sp, #4
   217e4:	mov	r0, r5
   217e8:	mov	r7, r2
   217ec:	mov	r6, r1
   217f0:	bl	11378 <mbrtowc@plt>
   217f4:	cmp	r7, #0
   217f8:	cmnne	r0, #3
   217fc:	mov	r4, r0
   21800:	bls	2181c <__assert_fail@plt+0x102b8>
   21804:	mov	r0, #0
   21808:	bl	21874 <__assert_fail@plt+0x10310>
   2180c:	cmp	r0, #0
   21810:	moveq	r4, #1
   21814:	ldrbeq	r3, [r6]
   21818:	streq	r3, [r5]
   2181c:	mov	r0, r4
   21820:	add	sp, sp, #12
   21824:	pop	{r4, r5, r6, r7, pc}
   21828:	push	{r4, r5, r6, lr}
   2182c:	subs	r4, r2, #0
   21830:	mov	r6, r0
   21834:	mov	r5, r1
   21838:	beq	21850 <__assert_fail@plt+0x102ec>
   2183c:	mov	r1, r4
   21840:	mvn	r0, #0
   21844:	bl	21954 <__assert_fail@plt+0x103f0>
   21848:	cmp	r0, r5
   2184c:	bcc	21860 <__assert_fail@plt+0x102fc>
   21850:	mul	r1, r5, r4
   21854:	mov	r0, r6
   21858:	pop	{r4, r5, r6, lr}
   2185c:	b	2145c <__assert_fail@plt+0xfef8>
   21860:	bl	11414 <__errno_location@plt>
   21864:	mov	r3, #12
   21868:	str	r3, [r0]
   2186c:	mov	r0, #0
   21870:	pop	{r4, r5, r6, pc}
   21874:	push	{lr}		; (str lr, [sp, #-4]!)
   21878:	sub	sp, sp, #268	; 0x10c
   2187c:	ldr	r2, [pc, #64]	; 218c4 <__assert_fail@plt+0x10360>
   21880:	add	r1, sp, #4
   21884:	bl	218d0 <__assert_fail@plt+0x1036c>
   21888:	cmp	r0, #0
   2188c:	movne	r0, #0
   21890:	bne	218bc <__assert_fail@plt+0x10358>
   21894:	ldr	r1, [pc, #44]	; 218c8 <__assert_fail@plt+0x10364>
   21898:	add	r0, sp, #4
   2189c:	bl	111f8 <strcmp@plt>
   218a0:	cmp	r0, #0
   218a4:	beq	218bc <__assert_fail@plt+0x10358>
   218a8:	ldr	r1, [pc, #28]	; 218cc <__assert_fail@plt+0x10368>
   218ac:	add	r0, sp, #4
   218b0:	bl	111f8 <strcmp@plt>
   218b4:	adds	r0, r0, #0
   218b8:	movne	r0, #1
   218bc:	add	sp, sp, #268	; 0x10c
   218c0:	pop	{pc}		; (ldr pc, [sp], #4)
   218c4:	andeq	r0, r0, r1, lsl #2
   218c8:	ldrdeq	r3, [r2], -sp
   218cc:	ldrdeq	r3, [r2], -pc	; <UNPREDICTABLE>
   218d0:	push	{r4, r5, r6, lr}
   218d4:	mov	r5, r1
   218d8:	mov	r1, #0
   218dc:	mov	r4, r2
   218e0:	bl	114bc <setlocale@plt>
   218e4:	subs	r6, r0, #0
   218e8:	bne	218fc <__assert_fail@plt+0x10398>
   218ec:	cmp	r4, #0
   218f0:	strbne	r6, [r5]
   218f4:	mov	r0, #22
   218f8:	pop	{r4, r5, r6, pc}
   218fc:	bl	113fc <strlen@plt>
   21900:	cmp	r4, r0
   21904:	bls	21920 <__assert_fail@plt+0x103bc>
   21908:	add	r2, r0, #1
   2190c:	mov	r1, r6
   21910:	mov	r0, r5
   21914:	bl	11264 <memcpy@plt>
   21918:	mov	r0, #0
   2191c:	pop	{r4, r5, r6, pc}
   21920:	cmp	r4, #0
   21924:	beq	21944 <__assert_fail@plt+0x103e0>
   21928:	sub	r4, r4, #1
   2192c:	mov	r2, r4
   21930:	mov	r1, r6
   21934:	mov	r0, r5
   21938:	bl	11264 <memcpy@plt>
   2193c:	mov	r3, #0
   21940:	strb	r3, [r5, r4]
   21944:	mov	r0, #34	; 0x22
   21948:	pop	{r4, r5, r6, pc}
   2194c:	mov	r1, #0
   21950:	b	114bc <setlocale@plt>
   21954:	subs	r2, r1, #1
   21958:	bxeq	lr
   2195c:	bcc	21b34 <__assert_fail@plt+0x105d0>
   21960:	cmp	r0, r1
   21964:	bls	21b18 <__assert_fail@plt+0x105b4>
   21968:	tst	r1, r2
   2196c:	beq	21b24 <__assert_fail@plt+0x105c0>
   21970:	clz	r3, r0
   21974:	clz	r2, r1
   21978:	sub	r3, r2, r3
   2197c:	rsbs	r3, r3, #31
   21980:	addne	r3, r3, r3, lsl #1
   21984:	mov	r2, #0
   21988:	addne	pc, pc, r3, lsl #2
   2198c:	nop			; (mov r0, r0)
   21990:	cmp	r0, r1, lsl #31
   21994:	adc	r2, r2, r2
   21998:	subcs	r0, r0, r1, lsl #31
   2199c:	cmp	r0, r1, lsl #30
   219a0:	adc	r2, r2, r2
   219a4:	subcs	r0, r0, r1, lsl #30
   219a8:	cmp	r0, r1, lsl #29
   219ac:	adc	r2, r2, r2
   219b0:	subcs	r0, r0, r1, lsl #29
   219b4:	cmp	r0, r1, lsl #28
   219b8:	adc	r2, r2, r2
   219bc:	subcs	r0, r0, r1, lsl #28
   219c0:	cmp	r0, r1, lsl #27
   219c4:	adc	r2, r2, r2
   219c8:	subcs	r0, r0, r1, lsl #27
   219cc:	cmp	r0, r1, lsl #26
   219d0:	adc	r2, r2, r2
   219d4:	subcs	r0, r0, r1, lsl #26
   219d8:	cmp	r0, r1, lsl #25
   219dc:	adc	r2, r2, r2
   219e0:	subcs	r0, r0, r1, lsl #25
   219e4:	cmp	r0, r1, lsl #24
   219e8:	adc	r2, r2, r2
   219ec:	subcs	r0, r0, r1, lsl #24
   219f0:	cmp	r0, r1, lsl #23
   219f4:	adc	r2, r2, r2
   219f8:	subcs	r0, r0, r1, lsl #23
   219fc:	cmp	r0, r1, lsl #22
   21a00:	adc	r2, r2, r2
   21a04:	subcs	r0, r0, r1, lsl #22
   21a08:	cmp	r0, r1, lsl #21
   21a0c:	adc	r2, r2, r2
   21a10:	subcs	r0, r0, r1, lsl #21
   21a14:	cmp	r0, r1, lsl #20
   21a18:	adc	r2, r2, r2
   21a1c:	subcs	r0, r0, r1, lsl #20
   21a20:	cmp	r0, r1, lsl #19
   21a24:	adc	r2, r2, r2
   21a28:	subcs	r0, r0, r1, lsl #19
   21a2c:	cmp	r0, r1, lsl #18
   21a30:	adc	r2, r2, r2
   21a34:	subcs	r0, r0, r1, lsl #18
   21a38:	cmp	r0, r1, lsl #17
   21a3c:	adc	r2, r2, r2
   21a40:	subcs	r0, r0, r1, lsl #17
   21a44:	cmp	r0, r1, lsl #16
   21a48:	adc	r2, r2, r2
   21a4c:	subcs	r0, r0, r1, lsl #16
   21a50:	cmp	r0, r1, lsl #15
   21a54:	adc	r2, r2, r2
   21a58:	subcs	r0, r0, r1, lsl #15
   21a5c:	cmp	r0, r1, lsl #14
   21a60:	adc	r2, r2, r2
   21a64:	subcs	r0, r0, r1, lsl #14
   21a68:	cmp	r0, r1, lsl #13
   21a6c:	adc	r2, r2, r2
   21a70:	subcs	r0, r0, r1, lsl #13
   21a74:	cmp	r0, r1, lsl #12
   21a78:	adc	r2, r2, r2
   21a7c:	subcs	r0, r0, r1, lsl #12
   21a80:	cmp	r0, r1, lsl #11
   21a84:	adc	r2, r2, r2
   21a88:	subcs	r0, r0, r1, lsl #11
   21a8c:	cmp	r0, r1, lsl #10
   21a90:	adc	r2, r2, r2
   21a94:	subcs	r0, r0, r1, lsl #10
   21a98:	cmp	r0, r1, lsl #9
   21a9c:	adc	r2, r2, r2
   21aa0:	subcs	r0, r0, r1, lsl #9
   21aa4:	cmp	r0, r1, lsl #8
   21aa8:	adc	r2, r2, r2
   21aac:	subcs	r0, r0, r1, lsl #8
   21ab0:	cmp	r0, r1, lsl #7
   21ab4:	adc	r2, r2, r2
   21ab8:	subcs	r0, r0, r1, lsl #7
   21abc:	cmp	r0, r1, lsl #6
   21ac0:	adc	r2, r2, r2
   21ac4:	subcs	r0, r0, r1, lsl #6
   21ac8:	cmp	r0, r1, lsl #5
   21acc:	adc	r2, r2, r2
   21ad0:	subcs	r0, r0, r1, lsl #5
   21ad4:	cmp	r0, r1, lsl #4
   21ad8:	adc	r2, r2, r2
   21adc:	subcs	r0, r0, r1, lsl #4
   21ae0:	cmp	r0, r1, lsl #3
   21ae4:	adc	r2, r2, r2
   21ae8:	subcs	r0, r0, r1, lsl #3
   21aec:	cmp	r0, r1, lsl #2
   21af0:	adc	r2, r2, r2
   21af4:	subcs	r0, r0, r1, lsl #2
   21af8:	cmp	r0, r1, lsl #1
   21afc:	adc	r2, r2, r2
   21b00:	subcs	r0, r0, r1, lsl #1
   21b04:	cmp	r0, r1
   21b08:	adc	r2, r2, r2
   21b0c:	subcs	r0, r0, r1
   21b10:	mov	r0, r2
   21b14:	bx	lr
   21b18:	moveq	r0, #1
   21b1c:	movne	r0, #0
   21b20:	bx	lr
   21b24:	clz	r2, r1
   21b28:	rsb	r2, r2, #31
   21b2c:	lsr	r0, r0, r2
   21b30:	bx	lr
   21b34:	cmp	r0, #0
   21b38:	mvnne	r0, #0
   21b3c:	b	21eb0 <__assert_fail@plt+0x1094c>
   21b40:	cmp	r1, #0
   21b44:	beq	21b34 <__assert_fail@plt+0x105d0>
   21b48:	push	{r0, r1, lr}
   21b4c:	bl	21954 <__assert_fail@plt+0x103f0>
   21b50:	pop	{r1, r2, lr}
   21b54:	mul	r3, r2, r0
   21b58:	sub	r1, r1, r3
   21b5c:	bx	lr
   21b60:	cmp	r1, #0
   21b64:	beq	21d70 <__assert_fail@plt+0x1080c>
   21b68:	eor	ip, r0, r1
   21b6c:	rsbmi	r1, r1, #0
   21b70:	subs	r2, r1, #1
   21b74:	beq	21d3c <__assert_fail@plt+0x107d8>
   21b78:	movs	r3, r0
   21b7c:	rsbmi	r3, r0, #0
   21b80:	cmp	r3, r1
   21b84:	bls	21d48 <__assert_fail@plt+0x107e4>
   21b88:	tst	r1, r2
   21b8c:	beq	21d58 <__assert_fail@plt+0x107f4>
   21b90:	clz	r2, r3
   21b94:	clz	r0, r1
   21b98:	sub	r2, r0, r2
   21b9c:	rsbs	r2, r2, #31
   21ba0:	addne	r2, r2, r2, lsl #1
   21ba4:	mov	r0, #0
   21ba8:	addne	pc, pc, r2, lsl #2
   21bac:	nop			; (mov r0, r0)
   21bb0:	cmp	r3, r1, lsl #31
   21bb4:	adc	r0, r0, r0
   21bb8:	subcs	r3, r3, r1, lsl #31
   21bbc:	cmp	r3, r1, lsl #30
   21bc0:	adc	r0, r0, r0
   21bc4:	subcs	r3, r3, r1, lsl #30
   21bc8:	cmp	r3, r1, lsl #29
   21bcc:	adc	r0, r0, r0
   21bd0:	subcs	r3, r3, r1, lsl #29
   21bd4:	cmp	r3, r1, lsl #28
   21bd8:	adc	r0, r0, r0
   21bdc:	subcs	r3, r3, r1, lsl #28
   21be0:	cmp	r3, r1, lsl #27
   21be4:	adc	r0, r0, r0
   21be8:	subcs	r3, r3, r1, lsl #27
   21bec:	cmp	r3, r1, lsl #26
   21bf0:	adc	r0, r0, r0
   21bf4:	subcs	r3, r3, r1, lsl #26
   21bf8:	cmp	r3, r1, lsl #25
   21bfc:	adc	r0, r0, r0
   21c00:	subcs	r3, r3, r1, lsl #25
   21c04:	cmp	r3, r1, lsl #24
   21c08:	adc	r0, r0, r0
   21c0c:	subcs	r3, r3, r1, lsl #24
   21c10:	cmp	r3, r1, lsl #23
   21c14:	adc	r0, r0, r0
   21c18:	subcs	r3, r3, r1, lsl #23
   21c1c:	cmp	r3, r1, lsl #22
   21c20:	adc	r0, r0, r0
   21c24:	subcs	r3, r3, r1, lsl #22
   21c28:	cmp	r3, r1, lsl #21
   21c2c:	adc	r0, r0, r0
   21c30:	subcs	r3, r3, r1, lsl #21
   21c34:	cmp	r3, r1, lsl #20
   21c38:	adc	r0, r0, r0
   21c3c:	subcs	r3, r3, r1, lsl #20
   21c40:	cmp	r3, r1, lsl #19
   21c44:	adc	r0, r0, r0
   21c48:	subcs	r3, r3, r1, lsl #19
   21c4c:	cmp	r3, r1, lsl #18
   21c50:	adc	r0, r0, r0
   21c54:	subcs	r3, r3, r1, lsl #18
   21c58:	cmp	r3, r1, lsl #17
   21c5c:	adc	r0, r0, r0
   21c60:	subcs	r3, r3, r1, lsl #17
   21c64:	cmp	r3, r1, lsl #16
   21c68:	adc	r0, r0, r0
   21c6c:	subcs	r3, r3, r1, lsl #16
   21c70:	cmp	r3, r1, lsl #15
   21c74:	adc	r0, r0, r0
   21c78:	subcs	r3, r3, r1, lsl #15
   21c7c:	cmp	r3, r1, lsl #14
   21c80:	adc	r0, r0, r0
   21c84:	subcs	r3, r3, r1, lsl #14
   21c88:	cmp	r3, r1, lsl #13
   21c8c:	adc	r0, r0, r0
   21c90:	subcs	r3, r3, r1, lsl #13
   21c94:	cmp	r3, r1, lsl #12
   21c98:	adc	r0, r0, r0
   21c9c:	subcs	r3, r3, r1, lsl #12
   21ca0:	cmp	r3, r1, lsl #11
   21ca4:	adc	r0, r0, r0
   21ca8:	subcs	r3, r3, r1, lsl #11
   21cac:	cmp	r3, r1, lsl #10
   21cb0:	adc	r0, r0, r0
   21cb4:	subcs	r3, r3, r1, lsl #10
   21cb8:	cmp	r3, r1, lsl #9
   21cbc:	adc	r0, r0, r0
   21cc0:	subcs	r3, r3, r1, lsl #9
   21cc4:	cmp	r3, r1, lsl #8
   21cc8:	adc	r0, r0, r0
   21ccc:	subcs	r3, r3, r1, lsl #8
   21cd0:	cmp	r3, r1, lsl #7
   21cd4:	adc	r0, r0, r0
   21cd8:	subcs	r3, r3, r1, lsl #7
   21cdc:	cmp	r3, r1, lsl #6
   21ce0:	adc	r0, r0, r0
   21ce4:	subcs	r3, r3, r1, lsl #6
   21ce8:	cmp	r3, r1, lsl #5
   21cec:	adc	r0, r0, r0
   21cf0:	subcs	r3, r3, r1, lsl #5
   21cf4:	cmp	r3, r1, lsl #4
   21cf8:	adc	r0, r0, r0
   21cfc:	subcs	r3, r3, r1, lsl #4
   21d00:	cmp	r3, r1, lsl #3
   21d04:	adc	r0, r0, r0
   21d08:	subcs	r3, r3, r1, lsl #3
   21d0c:	cmp	r3, r1, lsl #2
   21d10:	adc	r0, r0, r0
   21d14:	subcs	r3, r3, r1, lsl #2
   21d18:	cmp	r3, r1, lsl #1
   21d1c:	adc	r0, r0, r0
   21d20:	subcs	r3, r3, r1, lsl #1
   21d24:	cmp	r3, r1
   21d28:	adc	r0, r0, r0
   21d2c:	subcs	r3, r3, r1
   21d30:	cmp	ip, #0
   21d34:	rsbmi	r0, r0, #0
   21d38:	bx	lr
   21d3c:	teq	ip, r0
   21d40:	rsbmi	r0, r0, #0
   21d44:	bx	lr
   21d48:	movcc	r0, #0
   21d4c:	asreq	r0, ip, #31
   21d50:	orreq	r0, r0, #1
   21d54:	bx	lr
   21d58:	clz	r2, r1
   21d5c:	rsb	r2, r2, #31
   21d60:	cmp	ip, #0
   21d64:	lsr	r0, r3, r2
   21d68:	rsbmi	r0, r0, #0
   21d6c:	bx	lr
   21d70:	cmp	r0, #0
   21d74:	mvngt	r0, #-2147483648	; 0x80000000
   21d78:	movlt	r0, #-2147483648	; 0x80000000
   21d7c:	b	21eb0 <__assert_fail@plt+0x1094c>
   21d80:	cmp	r1, #0
   21d84:	beq	21d70 <__assert_fail@plt+0x1080c>
   21d88:	push	{r0, r1, lr}
   21d8c:	bl	21b68 <__assert_fail@plt+0x10604>
   21d90:	pop	{r1, r2, lr}
   21d94:	mul	r3, r2, r0
   21d98:	sub	r1, r1, r3
   21d9c:	bx	lr
   21da0:	cmp	r3, #0
   21da4:	cmpeq	r2, #0
   21da8:	bne	21dcc <__assert_fail@plt+0x10868>
   21dac:	cmp	r1, #0
   21db0:	movlt	r1, #-2147483648	; 0x80000000
   21db4:	movlt	r0, #0
   21db8:	blt	21dc8 <__assert_fail@plt+0x10864>
   21dbc:	cmpeq	r0, #0
   21dc0:	mvnne	r1, #-2147483648	; 0x80000000
   21dc4:	mvnne	r0, #0
   21dc8:	b	21eb0 <__assert_fail@plt+0x1094c>
   21dcc:	sub	sp, sp, #8
   21dd0:	push	{sp, lr}
   21dd4:	cmp	r1, #0
   21dd8:	blt	21df8 <__assert_fail@plt+0x10894>
   21ddc:	cmp	r3, #0
   21de0:	blt	21e2c <__assert_fail@plt+0x108c8>
   21de4:	bl	21ec0 <__assert_fail@plt+0x1095c>
   21de8:	ldr	lr, [sp, #4]
   21dec:	add	sp, sp, #8
   21df0:	pop	{r2, r3}
   21df4:	bx	lr
   21df8:	rsbs	r0, r0, #0
   21dfc:	sbc	r1, r1, r1, lsl #1
   21e00:	cmp	r3, #0
   21e04:	blt	21e50 <__assert_fail@plt+0x108ec>
   21e08:	bl	21ec0 <__assert_fail@plt+0x1095c>
   21e0c:	ldr	lr, [sp, #4]
   21e10:	add	sp, sp, #8
   21e14:	pop	{r2, r3}
   21e18:	rsbs	r0, r0, #0
   21e1c:	sbc	r1, r1, r1, lsl #1
   21e20:	rsbs	r2, r2, #0
   21e24:	sbc	r3, r3, r3, lsl #1
   21e28:	bx	lr
   21e2c:	rsbs	r2, r2, #0
   21e30:	sbc	r3, r3, r3, lsl #1
   21e34:	bl	21ec0 <__assert_fail@plt+0x1095c>
   21e38:	ldr	lr, [sp, #4]
   21e3c:	add	sp, sp, #8
   21e40:	pop	{r2, r3}
   21e44:	rsbs	r0, r0, #0
   21e48:	sbc	r1, r1, r1, lsl #1
   21e4c:	bx	lr
   21e50:	rsbs	r2, r2, #0
   21e54:	sbc	r3, r3, r3, lsl #1
   21e58:	bl	21ec0 <__assert_fail@plt+0x1095c>
   21e5c:	ldr	lr, [sp, #4]
   21e60:	add	sp, sp, #8
   21e64:	pop	{r2, r3}
   21e68:	rsbs	r2, r2, #0
   21e6c:	sbc	r3, r3, r3, lsl #1
   21e70:	bx	lr
   21e74:	cmp	r3, #0
   21e78:	cmpeq	r2, #0
   21e7c:	bne	21e94 <__assert_fail@plt+0x10930>
   21e80:	cmp	r1, #0
   21e84:	cmpeq	r0, #0
   21e88:	mvnne	r1, #0
   21e8c:	mvnne	r0, #0
   21e90:	b	21eb0 <__assert_fail@plt+0x1094c>
   21e94:	sub	sp, sp, #8
   21e98:	push	{sp, lr}
   21e9c:	bl	21ec0 <__assert_fail@plt+0x1095c>
   21ea0:	ldr	lr, [sp, #4]
   21ea4:	add	sp, sp, #8
   21ea8:	pop	{r2, r3}
   21eac:	bx	lr
   21eb0:	push	{r1, lr}
   21eb4:	mov	r0, #8
   21eb8:	bl	111d4 <raise@plt>
   21ebc:	pop	{r1, pc}
   21ec0:	cmp	r1, r3
   21ec4:	push	{r4, r5, r6, r7, r8, r9, lr}
   21ec8:	cmpeq	r0, r2
   21ecc:	mov	r4, r0
   21ed0:	mov	r5, r1
   21ed4:	ldr	r9, [sp, #28]
   21ed8:	movcc	r0, #0
   21edc:	movcc	r1, #0
   21ee0:	bcc	21fd8 <__assert_fail@plt+0x10a74>
   21ee4:	cmp	r3, #0
   21ee8:	clzeq	ip, r2
   21eec:	clzne	ip, r3
   21ef0:	addeq	ip, ip, #32
   21ef4:	cmp	r5, #0
   21ef8:	clzeq	r1, r4
   21efc:	addeq	r1, r1, #32
   21f00:	clzne	r1, r5
   21f04:	sub	ip, ip, r1
   21f08:	sub	lr, ip, #32
   21f0c:	lsl	r7, r3, ip
   21f10:	rsb	r8, ip, #32
   21f14:	orr	r7, r7, r2, lsl lr
   21f18:	orr	r7, r7, r2, lsr r8
   21f1c:	lsl	r6, r2, ip
   21f20:	cmp	r5, r7
   21f24:	cmpeq	r4, r6
   21f28:	movcc	r0, #0
   21f2c:	movcc	r1, #0
   21f30:	bcc	21f4c <__assert_fail@plt+0x109e8>
   21f34:	mov	r3, #1
   21f38:	subs	r4, r4, r6
   21f3c:	lsl	r1, r3, lr
   21f40:	lsl	r0, r3, ip
   21f44:	orr	r1, r1, r3, lsr r8
   21f48:	sbc	r5, r5, r7
   21f4c:	cmp	ip, #0
   21f50:	beq	21fd8 <__assert_fail@plt+0x10a74>
   21f54:	lsrs	r3, r7, #1
   21f58:	rrx	r2, r6
   21f5c:	mov	r6, ip
   21f60:	b	21f84 <__assert_fail@plt+0x10a20>
   21f64:	subs	r4, r4, r2
   21f68:	sbc	r5, r5, r3
   21f6c:	adds	r4, r4, r4
   21f70:	adc	r5, r5, r5
   21f74:	adds	r4, r4, #1
   21f78:	adc	r5, r5, #0
   21f7c:	subs	r6, r6, #1
   21f80:	beq	21fa0 <__assert_fail@plt+0x10a3c>
   21f84:	cmp	r5, r3
   21f88:	cmpeq	r4, r2
   21f8c:	bcs	21f64 <__assert_fail@plt+0x10a00>
   21f90:	adds	r4, r4, r4
   21f94:	adc	r5, r5, r5
   21f98:	subs	r6, r6, #1
   21f9c:	bne	21f84 <__assert_fail@plt+0x10a20>
   21fa0:	lsr	r6, r4, ip
   21fa4:	lsr	r7, r5, ip
   21fa8:	orr	r6, r6, r5, lsl r8
   21fac:	adds	r2, r0, r4
   21fb0:	orr	r6, r6, r5, lsr lr
   21fb4:	adc	r3, r1, r5
   21fb8:	lsl	r1, r7, ip
   21fbc:	orr	r1, r1, r6, lsl lr
   21fc0:	lsl	r0, r6, ip
   21fc4:	orr	r1, r1, r6, lsr r8
   21fc8:	subs	r0, r2, r0
   21fcc:	mov	r4, r6
   21fd0:	mov	r5, r7
   21fd4:	sbc	r1, r3, r1
   21fd8:	cmp	r9, #0
   21fdc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   21fe0:	strd	r4, [r9]
   21fe4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21fe8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21fec:	mov	r7, r0
   21ff0:	ldr	r6, [pc, #72]	; 22040 <__assert_fail@plt+0x10adc>
   21ff4:	ldr	r5, [pc, #72]	; 22044 <__assert_fail@plt+0x10ae0>
   21ff8:	add	r6, pc, r6
   21ffc:	add	r5, pc, r5
   22000:	sub	r6, r6, r5
   22004:	mov	r8, r1
   22008:	mov	r9, r2
   2200c:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   22010:	asrs	r6, r6, #2
   22014:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22018:	mov	r4, #0
   2201c:	add	r4, r4, #1
   22020:	ldr	r3, [r5], #4
   22024:	mov	r2, r9
   22028:	mov	r1, r8
   2202c:	mov	r0, r7
   22030:	blx	r3
   22034:	cmp	r6, r4
   22038:	bne	2201c <__assert_fail@plt+0x10ab8>
   2203c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22040:	andeq	r1, r1, r0, lsl pc
   22044:	andeq	r1, r1, r8, lsl #30
   22048:	bx	lr
   2204c:	ldr	r3, [pc, #12]	; 22060 <__assert_fail@plt+0x10afc>
   22050:	mov	r1, #0
   22054:	add	r3, pc, r3
   22058:	ldr	r2, [r3]
   2205c:	b	11438 <__cxa_atexit@plt>
   22060:	andeq	r2, r1, r0, lsl #2

Disassembly of section .fini:

00022064 <.fini>:
   22064:	push	{r3, lr}
   22068:	pop	{r3, pc}
