
../repos/charybdis/modules/.libs/m_time.so:     file format elf32-littlearm


Disassembly of section .init:

0000059c <_init>:
 59c:	push	{r3, lr}
 5a0:	bl	634 <call_weak_fn>
 5a4:	pop	{r3, pc}

Disassembly of section .plt:

000005a8 <.plt>:
 5a8:	push	{lr}		; (str lr, [sp, #-4]!)
 5ac:	ldr	lr, [pc, #4]	; 5b8 <.plt+0x10>
 5b0:	add	lr, pc, lr
 5b4:	ldr	pc, [lr, #8]!
 5b8:	.word	0x00010a48

000005bc <raise@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #16, 20	; 0x10000
 5c4:	ldr	pc, [ip, #2632]!	; 0xa48

000005c8 <rb_current_time@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #16, 20	; 0x10000
 5d0:	ldr	pc, [ip, #2624]!	; 0xa40

000005d4 <__cxa_finalize@plt>:
 5d4:	add	ip, pc, #0, 12
 5d8:	add	ip, ip, #16, 20	; 0x10000
 5dc:	ldr	pc, [ip, #2616]!	; 0xa38

000005e0 <localtime@plt>:
 5e0:	add	ip, pc, #0, 12
 5e4:	add	ip, ip, #16, 20	; 0x10000
 5e8:	ldr	pc, [ip, #2608]!	; 0xa30

000005ec <hunt_server@plt>:
 5ec:	add	ip, pc, #0, 12
 5f0:	add	ip, ip, #16, 20	; 0x10000
 5f4:	ldr	pc, [ip, #2600]!	; 0xa28

000005f8 <__gmon_start__@plt>:
 5f8:	add	ip, pc, #0, 12
 5fc:	add	ip, ip, #16, 20	; 0x10000
 600:	ldr	pc, [ip, #2592]!	; 0xa20

00000604 <sendto_one_numeric@plt>:
 604:	add	ip, pc, #0, 12
 608:	add	ip, ip, #16, 20	; 0x10000
 60c:	ldr	pc, [ip, #2584]!	; 0xa18

00000610 <gmtime@plt>:
 610:	add	ip, pc, #0, 12
 614:	add	ip, ip, #16, 20	; 0x10000
 618:	ldr	pc, [ip, #2576]!	; 0xa10

0000061c <sprintf@plt>:
 61c:	add	ip, pc, #0, 12
 620:	add	ip, ip, #16, 20	; 0x10000
 624:	ldr	pc, [ip, #2568]!	; 0xa08

00000628 <flood_endgrace@plt>:
 628:	add	ip, pc, #0, 12
 62c:	add	ip, ip, #16, 20	; 0x10000
 630:	ldr	pc, [ip, #2560]!	; 0xa00

Disassembly of section .text:

00000634 <call_weak_fn>:
 634:	ldr	r3, [pc, #20]	; 650 <call_weak_fn+0x1c>
 638:	ldr	r2, [pc, #20]	; 654 <call_weak_fn+0x20>
 63c:	add	r3, pc, r3
 640:	ldr	r2, [r3, r2]
 644:	cmp	r2, #0
 648:	bxeq	lr
 64c:	b	5f8 <__gmon_start__@plt>
 650:	.word	0x000109bc
 654:	.word	0x0000003c

00000658 <deregister_tm_clones>:
 658:	ldr	r3, [pc, #52]	; 694 <deregister_tm_clones+0x3c>
 65c:	ldr	r0, [pc, #52]	; 698 <deregister_tm_clones+0x40>
 660:	add	r3, pc, r3
 664:	add	r0, pc, r0
 668:	add	r3, r3, #3
 66c:	sub	r3, r3, r0
 670:	cmp	r3, #6
 674:	ldr	r3, [pc, #32]	; 69c <deregister_tm_clones+0x44>
 678:	add	r3, pc, r3
 67c:	bxls	lr
 680:	ldr	r2, [pc, #24]	; 6a0 <deregister_tm_clones+0x48>
 684:	ldr	r3, [r3, r2]
 688:	cmp	r3, #0
 68c:	bxeq	lr
 690:	bx	r3
 694:	.word	0x00010a5c
 698:	.word	0x00010a58
 69c:	.word	0x00010980
 6a0:	.word	0x00000038

000006a4 <register_tm_clones>:
 6a4:	ldr	r1, [pc, #56]	; 6e4 <register_tm_clones+0x40>
 6a8:	ldr	r0, [pc, #56]	; 6e8 <register_tm_clones+0x44>
 6ac:	add	r1, pc, r1
 6b0:	add	r0, pc, r0
 6b4:	sub	r1, r1, r0
 6b8:	ldr	r3, [pc, #44]	; 6ec <register_tm_clones+0x48>
 6bc:	asr	r1, r1, #2
 6c0:	add	r3, pc, r3
 6c4:	add	r1, r1, r1, lsr #31
 6c8:	asrs	r1, r1, #1
 6cc:	bxeq	lr
 6d0:	ldr	r2, [pc, #24]	; 6f0 <register_tm_clones+0x4c>
 6d4:	ldr	r3, [r3, r2]
 6d8:	cmp	r3, #0
 6dc:	bxeq	lr
 6e0:	bx	r3
 6e4:	.word	0x00010a10
 6e8:	.word	0x00010a0c
 6ec:	.word	0x00010938
 6f0:	.word	0x00000044

000006f4 <__do_global_dtors_aux>:
 6f4:	ldr	r3, [pc, #76]	; 748 <__do_global_dtors_aux+0x54>
 6f8:	ldr	r2, [pc, #76]	; 74c <__do_global_dtors_aux+0x58>
 6fc:	add	r3, pc, r3
 700:	add	r2, pc, r2
 704:	ldrb	r3, [r3]
 708:	cmp	r3, #0
 70c:	bxne	lr
 710:	ldr	r3, [pc, #56]	; 750 <__do_global_dtors_aux+0x5c>
 714:	push	{r4, lr}
 718:	ldr	r3, [r2, r3]
 71c:	cmp	r3, #0
 720:	beq	730 <__do_global_dtors_aux+0x3c>
 724:	ldr	r3, [pc, #40]	; 754 <__do_global_dtors_aux+0x60>
 728:	ldr	r0, [pc, r3]
 72c:	bl	5d4 <__cxa_finalize@plt>
 730:	bl	658 <deregister_tm_clones>
 734:	ldr	r3, [pc, #28]	; 758 <__do_global_dtors_aux+0x64>
 738:	mov	r2, #1
 73c:	add	r3, pc, r3
 740:	strb	r2, [r3]
 744:	pop	{r4, pc}
 748:	.word	0x000109c0
 74c:	.word	0x000108f8
 750:	.word	0x00000034
 754:	.word	0x0001091c
 758:	.word	0x00010980

0000075c <frame_dummy>:
 75c:	ldr	r0, [pc, #56]	; 79c <frame_dummy+0x40>
 760:	ldr	r3, [pc, #56]	; 7a0 <frame_dummy+0x44>
 764:	add	r0, pc, r0
 768:	ldr	r2, [r0]
 76c:	add	r3, pc, r3
 770:	cmp	r2, #0
 774:	bne	77c <frame_dummy+0x20>
 778:	b	6a4 <register_tm_clones>
 77c:	ldr	r2, [pc, #32]	; 7a4 <frame_dummy+0x48>
 780:	ldr	r3, [r3, r2]
 784:	cmp	r3, #0
 788:	beq	778 <frame_dummy+0x1c>
 78c:	push	{r4, lr}
 790:	blx	r3
 794:	pop	{r4, lr}
 798:	b	6a4 <register_tm_clones>
 79c:	.word	0x00010744
 7a0:	.word	0x0001088c
 7a4:	.word	0x00000040

000007a8 <m_time>:
 7a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 7ac:	mov	r6, r2
 7b0:	mov	r5, r3
 7b4:	ldrd	r2, [r2, #64]	; 0x40
 7b8:	mov	r4, r1
 7bc:	ldr	r7, [pc, #480]	; 9a4 <m_time+0x1fc>
 7c0:	and	r0, r2, #8192	; 0x2000
 7c4:	mov	r1, #0
 7c8:	orrs	r1, r0, r1
 7cc:	add	r7, pc, r7
 7d0:	sub	sp, sp, #92	; 0x5c
 7d4:	beq	7fc <m_time+0x54>
 7d8:	ldrh	r1, [r6, #80]	; 0x50
 7dc:	cmp	r1, #64	; 0x40
 7e0:	bne	7fc <m_time+0x54>
 7e4:	and	r2, r2, #256	; 0x100
 7e8:	mov	r3, #0
 7ec:	orrs	r3, r2, r3
 7f0:	bne	7fc <m_time+0x54>
 7f4:	mov	r0, r6
 7f8:	bl	628 <flood_endgrace@plt>
 7fc:	ldr	r3, [sp, #128]	; 0x80
 800:	ldr	r2, [pc, #416]	; 9a8 <m_time+0x200>
 804:	str	r3, [sp, #4]
 808:	str	r5, [sp]
 80c:	mov	r3, #1
 810:	add	r2, pc, r2
 814:	mov	r1, r6
 818:	mov	r0, r4
 81c:	bl	5ec <hunt_server@plt>
 820:	cmp	r0, #0
 824:	bne	970 <m_time+0x1c8>
 828:	bl	5c8 <rb_current_time@plt>
 82c:	add	r4, sp, #88	; 0x58
 830:	str	r0, [r4, #-48]!	; 0xffffffd0
 834:	mov	r0, r4
 838:	bl	610 <gmtime@plt>
 83c:	add	r2, sp, #44	; 0x2c
 840:	mov	r3, r0
 844:	add	lr, r0, #40	; 0x28
 848:	ldr	r0, [r3]
 84c:	ldr	r1, [r3, #4]
 850:	mov	ip, r2
 854:	add	r3, r3, #8
 858:	cmp	r3, lr
 85c:	stmia	ip!, {r0, r1}
 860:	mov	r2, ip
 864:	bne	848 <m_time+0xa0>
 868:	ldr	r0, [r3]
 86c:	str	r0, [ip]
 870:	mov	r0, r4
 874:	bl	5e0 <localtime@plt>
 878:	ldr	r3, [sp, #72]	; 0x48
 87c:	ldr	r4, [sp, #52]	; 0x34
 880:	ldr	r2, [r0, #28]
 884:	mov	r5, r0
 888:	cmp	r2, r3
 88c:	ldr	r3, [r0, #8]
 890:	bne	978 <m_time+0x1d0>
 894:	sub	r4, r4, r3
 898:	ldr	r2, [r0, #4]
 89c:	ldr	r3, [sp, #48]	; 0x30
 8a0:	sub	r3, r3, r2
 8a4:	mov	r2, #60	; 0x3c
 8a8:	mla	r4, r2, r4, r3
 8ac:	cmp	r4, #0
 8b0:	rsble	r4, r4, #0
 8b4:	movle	r3, #43	; 0x2b
 8b8:	movgt	r3, #45	; 0x2d
 8bc:	mov	r1, #60	; 0x3c
 8c0:	mov	r0, r4
 8c4:	str	r3, [sp, #36]	; 0x24
 8c8:	bl	bb0 <__aeabi_uidivmod>
 8cc:	ldr	fp, [r5, #16]
 8d0:	ldr	sl, [r5, #24]
 8d4:	mov	r0, r4
 8d8:	ldr	r9, [pc, #204]	; 9ac <m_time+0x204>
 8dc:	ldr	r8, [pc, #204]	; 9b0 <m_time+0x208>
 8e0:	add	r9, pc, r9
 8e4:	add	sl, r9, sl, lsl #2
 8e8:	add	r8, pc, r8
 8ec:	str	r1, [sp, #28]
 8f0:	mov	r1, #60	; 0x3c
 8f4:	bl	9c4 <__udivsi3>
 8f8:	ldr	r3, [sp, #36]	; 0x24
 8fc:	ldr	r1, [pc, #176]	; 9b4 <m_time+0x20c>
 900:	str	r3, [sp, #20]
 904:	ldr	r2, [sl, #48]	; 0x30
 908:	add	r1, pc, r1
 90c:	str	r0, [sp, #24]
 910:	ldr	r3, [r5]
 914:	mov	r0, r8
 918:	str	r3, [sp, #16]
 91c:	ldr	r3, [r5, #4]
 920:	str	r3, [sp, #12]
 924:	ldr	r3, [r5, #8]
 928:	str	r3, [sp, #8]
 92c:	ldr	r3, [r5, #20]
 930:	add	r3, r3, #1888	; 0x760
 934:	add	r3, r3, #12
 938:	str	r3, [sp, #4]
 93c:	ldr	r3, [r5, #12]
 940:	str	r3, [sp]
 944:	ldr	r3, [r9, fp, lsl #2]
 948:	bl	61c <sprintf@plt>
 94c:	ldr	r3, [pc, #100]	; 9b8 <m_time+0x210>
 950:	ldr	r2, [pc, #100]	; 9bc <m_time+0x214>
 954:	ldr	r1, [pc, #100]	; 9c0 <m_time+0x218>
 958:	ldr	r3, [r7, r3]
 95c:	add	r2, pc, r2
 960:	str	r8, [sp]
 964:	add	r3, r3, #88	; 0x58
 968:	mov	r0, r6
 96c:	bl	604 <sendto_one_numeric@plt>
 970:	add	sp, sp, #92	; 0x5c
 974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 978:	ble	990 <m_time+0x1e8>
 97c:	ldr	r1, [r0, #20]
 980:	ldr	r2, [sp, #64]	; 0x40
 984:	cmp	r1, r2
 988:	addeq	r3, r3, #24
 98c:	beq	994 <m_time+0x1ec>
 990:	add	r4, r4, #24
 994:	sub	r4, r4, r3
 998:	mov	r3, #60	; 0x3c
 99c:	mul	r4, r3, r4
 9a0:	b	8ac <m_time+0x104>
 9a4:	.word	0x0001082c
 9a8:	.word	0x0000040a
 9ac:	.word	0x000105cc
 9b0:	.word	0x000107d5
 9b4:	.word	0x0000031f
 9b8:	.word	0x00000048
 9bc:	.word	0x000002f5
 9c0:	.word	0x00000187

000009c4 <__udivsi3>:
 9c4:	subs	r2, r1, #1
 9c8:	bxeq	lr
 9cc:	bcc	ba4 <__udivsi3+0x1e0>
 9d0:	cmp	r0, r1
 9d4:	bls	b88 <__udivsi3+0x1c4>
 9d8:	tst	r1, r2
 9dc:	beq	b94 <__udivsi3+0x1d0>
 9e0:	clz	r3, r0
 9e4:	clz	r2, r1
 9e8:	sub	r3, r2, r3
 9ec:	rsbs	r3, r3, #31
 9f0:	addne	r3, r3, r3, lsl #1
 9f4:	mov	r2, #0
 9f8:	addne	pc, pc, r3, lsl #2
 9fc:	nop			; (mov r0, r0)
 a00:	cmp	r0, r1, lsl #31
 a04:	adc	r2, r2, r2
 a08:	subcs	r0, r0, r1, lsl #31
 a0c:	cmp	r0, r1, lsl #30
 a10:	adc	r2, r2, r2
 a14:	subcs	r0, r0, r1, lsl #30
 a18:	cmp	r0, r1, lsl #29
 a1c:	adc	r2, r2, r2
 a20:	subcs	r0, r0, r1, lsl #29
 a24:	cmp	r0, r1, lsl #28
 a28:	adc	r2, r2, r2
 a2c:	subcs	r0, r0, r1, lsl #28
 a30:	cmp	r0, r1, lsl #27
 a34:	adc	r2, r2, r2
 a38:	subcs	r0, r0, r1, lsl #27
 a3c:	cmp	r0, r1, lsl #26
 a40:	adc	r2, r2, r2
 a44:	subcs	r0, r0, r1, lsl #26
 a48:	cmp	r0, r1, lsl #25
 a4c:	adc	r2, r2, r2
 a50:	subcs	r0, r0, r1, lsl #25
 a54:	cmp	r0, r1, lsl #24
 a58:	adc	r2, r2, r2
 a5c:	subcs	r0, r0, r1, lsl #24
 a60:	cmp	r0, r1, lsl #23
 a64:	adc	r2, r2, r2
 a68:	subcs	r0, r0, r1, lsl #23
 a6c:	cmp	r0, r1, lsl #22
 a70:	adc	r2, r2, r2
 a74:	subcs	r0, r0, r1, lsl #22
 a78:	cmp	r0, r1, lsl #21
 a7c:	adc	r2, r2, r2
 a80:	subcs	r0, r0, r1, lsl #21
 a84:	cmp	r0, r1, lsl #20
 a88:	adc	r2, r2, r2
 a8c:	subcs	r0, r0, r1, lsl #20
 a90:	cmp	r0, r1, lsl #19
 a94:	adc	r2, r2, r2
 a98:	subcs	r0, r0, r1, lsl #19
 a9c:	cmp	r0, r1, lsl #18
 aa0:	adc	r2, r2, r2
 aa4:	subcs	r0, r0, r1, lsl #18
 aa8:	cmp	r0, r1, lsl #17
 aac:	adc	r2, r2, r2
 ab0:	subcs	r0, r0, r1, lsl #17
 ab4:	cmp	r0, r1, lsl #16
 ab8:	adc	r2, r2, r2
 abc:	subcs	r0, r0, r1, lsl #16
 ac0:	cmp	r0, r1, lsl #15
 ac4:	adc	r2, r2, r2
 ac8:	subcs	r0, r0, r1, lsl #15
 acc:	cmp	r0, r1, lsl #14
 ad0:	adc	r2, r2, r2
 ad4:	subcs	r0, r0, r1, lsl #14
 ad8:	cmp	r0, r1, lsl #13
 adc:	adc	r2, r2, r2
 ae0:	subcs	r0, r0, r1, lsl #13
 ae4:	cmp	r0, r1, lsl #12
 ae8:	adc	r2, r2, r2
 aec:	subcs	r0, r0, r1, lsl #12
 af0:	cmp	r0, r1, lsl #11
 af4:	adc	r2, r2, r2
 af8:	subcs	r0, r0, r1, lsl #11
 afc:	cmp	r0, r1, lsl #10
 b00:	adc	r2, r2, r2
 b04:	subcs	r0, r0, r1, lsl #10
 b08:	cmp	r0, r1, lsl #9
 b0c:	adc	r2, r2, r2
 b10:	subcs	r0, r0, r1, lsl #9
 b14:	cmp	r0, r1, lsl #8
 b18:	adc	r2, r2, r2
 b1c:	subcs	r0, r0, r1, lsl #8
 b20:	cmp	r0, r1, lsl #7
 b24:	adc	r2, r2, r2
 b28:	subcs	r0, r0, r1, lsl #7
 b2c:	cmp	r0, r1, lsl #6
 b30:	adc	r2, r2, r2
 b34:	subcs	r0, r0, r1, lsl #6
 b38:	cmp	r0, r1, lsl #5
 b3c:	adc	r2, r2, r2
 b40:	subcs	r0, r0, r1, lsl #5
 b44:	cmp	r0, r1, lsl #4
 b48:	adc	r2, r2, r2
 b4c:	subcs	r0, r0, r1, lsl #4
 b50:	cmp	r0, r1, lsl #3
 b54:	adc	r2, r2, r2
 b58:	subcs	r0, r0, r1, lsl #3
 b5c:	cmp	r0, r1, lsl #2
 b60:	adc	r2, r2, r2
 b64:	subcs	r0, r0, r1, lsl #2
 b68:	cmp	r0, r1, lsl #1
 b6c:	adc	r2, r2, r2
 b70:	subcs	r0, r0, r1, lsl #1
 b74:	cmp	r0, r1
 b78:	adc	r2, r2, r2
 b7c:	subcs	r0, r0, r1
 b80:	mov	r0, r2
 b84:	bx	lr
 b88:	moveq	r0, #1
 b8c:	movne	r0, #0
 b90:	bx	lr
 b94:	clz	r2, r1
 b98:	rsb	r2, r2, #31
 b9c:	lsr	r0, r0, r2
 ba0:	bx	lr
 ba4:	cmp	r0, #0
 ba8:	mvnne	r0, #0
 bac:	b	bd0 <__aeabi_idiv0>

00000bb0 <__aeabi_uidivmod>:
 bb0:	cmp	r1, #0
 bb4:	beq	ba4 <__udivsi3+0x1e0>
 bb8:	push	{r0, r1, lr}
 bbc:	bl	9c4 <__udivsi3>
 bc0:	pop	{r1, r2, lr}
 bc4:	mul	r3, r2, r0
 bc8:	sub	r1, r1, r3
 bcc:	bx	lr

00000bd0 <__aeabi_idiv0>:
 bd0:	push	{r1, lr}
 bd4:	mov	r0, #8
 bd8:	bl	5bc <raise@plt>
 bdc:	pop	{r1, pc}

Disassembly of section .fini:

00000be0 <_fini>:
 be0:	push	{r3, lr}
 be4:	pop	{r3, pc}
