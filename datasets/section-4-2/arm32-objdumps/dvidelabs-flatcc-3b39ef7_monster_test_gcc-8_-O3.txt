
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012948 <.init>:
   12948:	push	{r3, lr}
   1294c:	bl	12c4c <_start@@Base+0x3c>
   12950:	pop	{r3, pc}

Disassembly of section .plt:

00012954 <strcmp@plt-0x14>:
   12954:	push	{lr}		; (str lr, [sp, #-4]!)
   12958:	ldr	lr, [pc, #4]	; 12964 <strcmp@plt-0x4>
   1295c:	add	lr, pc, lr
   12960:	ldr	pc, [lr, #8]!
   12964:	muleq	r2, ip, r6

00012968 <strcmp@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #159744	; 0x27000
   12970:	ldr	pc, [ip, #1692]!	; 0x69c

00012974 <printf@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #159744	; 0x27000
   1297c:	ldr	pc, [ip, #1684]!	; 0x694

00012980 <free@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #159744	; 0x27000
   12988:	ldr	pc, [ip, #1676]!	; 0x68c

0001298c <memcpy@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #159744	; 0x27000
   12994:	ldr	pc, [ip, #1668]!	; 0x684

00012998 <memcmp@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #159744	; 0x27000
   129a0:	ldr	pc, [ip, #1660]!	; 0x67c

000129a4 <realloc@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #159744	; 0x27000
   129ac:	ldr	pc, [ip, #1652]!	; 0x674

000129b0 <fwrite@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #159744	; 0x27000
   129b8:	ldr	pc, [ip, #1644]!	; 0x66c

000129bc <gettimeofday@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #159744	; 0x27000
   129c4:	ldr	pc, [ip, #1636]!	; 0x664

000129c8 <puts@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #159744	; 0x27000
   129d0:	ldr	pc, [ip, #1628]!	; 0x65c

000129d4 <malloc@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #159744	; 0x27000
   129dc:	ldr	pc, [ip, #1620]!	; 0x654

000129e0 <__libc_start_main@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #159744	; 0x27000
   129e8:	ldr	pc, [ip, #1612]!	; 0x64c

000129ec <__gmon_start__@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #159744	; 0x27000
   129f4:	ldr	pc, [ip, #1604]!	; 0x644

000129f8 <strlen@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #159744	; 0x27000
   12a00:	ldr	pc, [ip, #1596]!	; 0x63c

00012a04 <fprintf@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #159744	; 0x27000
   12a0c:	ldr	pc, [ip, #1588]!	; 0x634

00012a10 <posix_memalign@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #159744	; 0x27000
   12a18:	ldr	pc, [ip, #1580]!	; 0x62c

00012a1c <memset@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #159744	; 0x27000
   12a24:	ldr	pc, [ip, #1572]!	; 0x624

00012a28 <strncpy@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #159744	; 0x27000
   12a30:	ldr	pc, [ip, #1564]!	; 0x61c

00012a34 <memchr@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #159744	; 0x27000
   12a3c:	ldr	pc, [ip, #1556]!	; 0x614

00012a40 <fputc@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #159744	; 0x27000
   12a48:	ldr	pc, [ip, #1548]!	; 0x60c

00012a4c <strncmp@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #159744	; 0x27000
   12a54:	ldr	pc, [ip, #1540]!	; 0x604

00012a58 <abort@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #159744	; 0x27000
   12a60:	ldr	pc, [ip, #1532]!	; 0x5fc

00012a64 <__assert_fail@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #159744	; 0x27000
   12a6c:	ldr	pc, [ip, #1524]!	; 0x5f4

Disassembly of section .text:

00012a70 <main@@Base>:
   12a70:	str	r4, [sp, #-8]!
   12a74:	str	lr, [sp, #4]
   12a78:	sub	sp, sp, #232	; 0xe8
   12a7c:	mov	r0, sp
   12a80:	bl	1e124 <flatcc_builder_init@@Base>
   12a84:	movw	r0, #34828	; 0x880c
   12a88:	movt	r0, #2
   12a8c:	bl	129c8 <puts@plt>
   12a90:	mov	r0, sp
   12a94:	bl	154c8 <test_table_with_emptystruct@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	12bfc <main@@Base+0x18c>
   12aa0:	mov	r0, sp
   12aa4:	bl	14fc0 <test_empty_monster@@Base>
   12aa8:	cmp	r0, #0
   12aac:	bne	12bfc <main@@Base+0x18c>
   12ab0:	mov	r0, sp
   12ab4:	bl	16ea8 <test_monster@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	12bfc <main@@Base+0x18c>
   12ac0:	mov	r0, sp
   12ac4:	bl	16f58 <test_monster_with_size@@Base>
   12ac8:	cmp	r0, #0
   12acc:	bne	12bfc <main@@Base+0x18c>
   12ad0:	mov	r0, sp
   12ad4:	bl	17064 <test_string@@Base>
   12ad8:	cmp	r0, #0
   12adc:	bne	12bfc <main@@Base+0x18c>
   12ae0:	mov	r0, sp
   12ae4:	bl	1cf54 <test_struct_buffer@@Base>
   12ae8:	cmp	r0, #0
   12aec:	bne	12bfc <main@@Base+0x18c>
   12af0:	mov	r0, sp
   12af4:	bl	15130 <test_typed_empty_monster@@Base>
   12af8:	cmp	r0, #0
   12afc:	bne	12bfc <main@@Base+0x18c>
   12b00:	mov	r0, sp
   12b04:	bl	155e4 <test_typed_table_with_emptystruct@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12bfc <main@@Base+0x18c>
   12b10:	mov	r0, sp
   12b14:	bl	1d198 <test_typed_struct_buffer@@Base>
   12b18:	cmp	r0, #0
   12b1c:	bne	12bfc <main@@Base+0x18c>
   12b20:	mov	r0, sp
   12b24:	bl	1a304 <test_clone_slice@@Base>
   12b28:	cmp	r0, #0
   12b2c:	bne	12bfc <main@@Base+0x18c>
   12b30:	mov	r0, sp
   12b34:	bl	1c15c <test_add_set_defaults@@Base>
   12b38:	cmp	r0, #0
   12b3c:	bne	12bfc <main@@Base+0x18c>
   12b40:	mov	r0, sp
   12b44:	bl	1ae30 <test_create_add_field@@Base>
   12b48:	cmp	r0, #0
   12b4c:	bne	12bfc <main@@Base+0x18c>
   12b50:	mov	r0, sp
   12b54:	bl	1b0e8 <test_union_vector@@Base>
   12b58:	cmp	r0, #0
   12b5c:	bne	12bfc <main@@Base+0x18c>
   12b60:	mov	r0, sp
   12b64:	bl	19e28 <test_basic_sort@@Base>
   12b68:	cmp	r0, #0
   12b6c:	bne	12bfc <main@@Base+0x18c>
   12b70:	mov	r0, sp
   12b74:	bl	17310 <test_sort_find@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12bfc <main@@Base+0x18c>
   12b80:	mov	r0, sp
   12b84:	bl	186d4 <test_scan@@Base>
   12b88:	cmp	r0, #0
   12b8c:	bne	12bfc <main@@Base+0x18c>
   12b90:	mov	r0, sp
   12b94:	bl	1c4a4 <test_nested_buffer@@Base>
   12b98:	cmp	r0, #0
   12b9c:	bne	12bfc <main@@Base+0x18c>
   12ba0:	mov	r0, sp
   12ba4:	bl	1c7f8 <test_nested_buffer_first@@Base>
   12ba8:	cmp	r0, #0
   12bac:	bne	12bfc <main@@Base+0x18c>
   12bb0:	mov	r0, sp
   12bb4:	bl	1cb4c <test_nested_buffer_using_nest@@Base>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12bfc <main@@Base+0x18c>
   12bc0:	mov	r0, sp
   12bc4:	bl	14a68 <test_type_aliases@@Base>
   12bc8:	cmp	r0, #0
   12bcc:	bne	12bfc <main@@Base+0x18c>
   12bd0:	mov	r0, sp
   12bd4:	bl	1b4a8 <test_mixed_type_union@@Base>
   12bd8:	subs	r4, r0, #0
   12bdc:	bne	12bfc <main@@Base+0x18c>
   12be0:	mov	r0, sp
   12be4:	bl	1e2ec <flatcc_builder_clear@@Base>
   12be8:	mov	r0, r4
   12bec:	add	sp, sp, #232	; 0xe8
   12bf0:	ldr	r4, [sp]
   12bf4:	add	sp, sp, #4
   12bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bfc:	movw	r0, #34856	; 0x8828
   12c00:	movt	r0, #2
   12c04:	bl	129c8 <puts@plt>
   12c08:	mvn	r4, #0
   12c0c:	b	12be8 <main@@Base+0x178>

00012c10 <_start@@Base>:
   12c10:	mov	fp, #0
   12c14:	mov	lr, #0
   12c18:	pop	{r1}		; (ldr r1, [sp], #4)
   12c1c:	mov	r2, sp
   12c20:	push	{r2}		; (str r2, [sp, #-4]!)
   12c24:	push	{r0}		; (str r0, [sp, #-4]!)
   12c28:	ldr	ip, [pc, #16]	; 12c40 <_start@@Base+0x30>
   12c2c:	push	{ip}		; (str ip, [sp, #-4]!)
   12c30:	ldr	r0, [pc, #12]	; 12c44 <_start@@Base+0x34>
   12c34:	ldr	r3, [pc, #12]	; 12c48 <_start@@Base+0x38>
   12c38:	bl	129e0 <__libc_start_main@plt>
   12c3c:	bl	12a58 <abort@plt>
   12c40:	andeq	r5, r2, ip, lsr #9
   12c44:	andeq	r2, r1, r0, ror sl
   12c48:	andeq	r5, r2, ip, asr #8
   12c4c:	ldr	r3, [pc, #20]	; 12c68 <_start@@Base+0x58>
   12c50:	ldr	r2, [pc, #20]	; 12c6c <_start@@Base+0x5c>
   12c54:	add	r3, pc, r3
   12c58:	ldr	r2, [r3, r2]
   12c5c:	cmp	r2, #0
   12c60:	bxeq	lr
   12c64:	b	129ec <__gmon_start__@plt>
   12c68:	andeq	r7, r2, r4, lsr #7
   12c6c:	andeq	r0, r0, r4, rrx
   12c70:	ldr	r0, [pc, #24]	; 12c90 <_start@@Base+0x80>
   12c74:	ldr	r3, [pc, #24]	; 12c94 <_start@@Base+0x84>
   12c78:	cmp	r3, r0
   12c7c:	bxeq	lr
   12c80:	ldr	r3, [pc, #16]	; 12c98 <_start@@Base+0x88>
   12c84:	cmp	r3, #0
   12c88:	bxeq	lr
   12c8c:	bx	r3
   12c90:	andeq	sl, r3, r0, ror r0
   12c94:	andeq	sl, r3, r0, ror r0
   12c98:	andeq	r0, r0, r0
   12c9c:	ldr	r0, [pc, #36]	; 12cc8 <_start@@Base+0xb8>
   12ca0:	ldr	r1, [pc, #36]	; 12ccc <_start@@Base+0xbc>
   12ca4:	sub	r1, r1, r0
   12ca8:	asr	r1, r1, #2
   12cac:	add	r1, r1, r1, lsr #31
   12cb0:	asrs	r1, r1, #1
   12cb4:	bxeq	lr
   12cb8:	ldr	r3, [pc, #16]	; 12cd0 <_start@@Base+0xc0>
   12cbc:	cmp	r3, #0
   12cc0:	bxeq	lr
   12cc4:	bx	r3
   12cc8:	andeq	sl, r3, r0, ror r0
   12ccc:	andeq	sl, r3, r0, ror r0
   12cd0:	andeq	r0, r0, r0
   12cd4:	push	{r4, lr}
   12cd8:	ldr	r4, [pc, #24]	; 12cf8 <_start@@Base+0xe8>
   12cdc:	ldrb	r3, [r4]
   12ce0:	cmp	r3, #0
   12ce4:	popne	{r4, pc}
   12ce8:	bl	12c70 <_start@@Base+0x60>
   12cec:	mov	r3, #1
   12cf0:	strb	r3, [r4]
   12cf4:	pop	{r4, pc}
   12cf8:	andeq	sl, r3, r4, ror r0
   12cfc:	b	12c9c <_start@@Base+0x8c>
   12d00:	mov	r0, #0
   12d04:	bx	lr
   12d08:	mov	r3, #4
   12d0c:	mov	r1, #0
   12d10:	mov	r2, r3
   12d14:	b	23c8c <flatcc_verify_field@@Base>
   12d18:	mov	r2, #0
   12d1c:	mov	r3, #1
   12d20:	mov	r1, r2
   12d24:	b	23c8c <flatcc_verify_field@@Base>
   12d28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d2c:	strd	r6, [sp, #8]
   12d30:	mov	r6, r2
   12d34:	mov	r2, r0
   12d38:	mov	r0, r3
   12d3c:	strd	r8, [sp, #16]
   12d40:	mov	r8, r1
   12d44:	movw	r1, #23564	; 0x5c0c
   12d48:	movt	r1, #2
   12d4c:	strd	sl, [sp, #24]
   12d50:	str	lr, [sp, #32]
   12d54:	sub	sp, sp, #36	; 0x24
   12d58:	mov	r7, r3
   12d5c:	bl	12a04 <fprintf@plt>
   12d60:	cmp	r6, #0
   12d64:	beq	12e98 <_start@@Base+0x288>
   12d68:	movw	fp, #23580	; 0x5c1c
   12d6c:	movt	fp, #2
   12d70:	movw	sl, #23572	; 0x5c14
   12d74:	movt	sl, #2
   12d78:	movw	r9, #23588	; 0x5c24
   12d7c:	movt	r9, #2
   12d80:	add	r3, sp, #12
   12d84:	sub	r8, r8, #1
   12d88:	mov	r4, #0
   12d8c:	str	r3, [sp, #4]
   12d90:	ands	r5, r4, #15
   12d94:	bne	12e80 <_start@@Base+0x270>
   12d98:	cmp	r4, #0
   12d9c:	mov	r1, sl
   12da0:	ldr	r2, [sp, #4]
   12da4:	mov	r0, r7
   12da8:	beq	12db0 <_start@@Base+0x1a0>
   12dac:	bl	12a04 <fprintf@plt>
   12db0:	mov	r2, r4
   12db4:	mov	r1, fp
   12db8:	mov	r0, r7
   12dbc:	bl	12a04 <fprintf@plt>
   12dc0:	ldrb	r2, [r8, #1]!
   12dc4:	mov	r1, r9
   12dc8:	mov	r0, r7
   12dcc:	bl	12a04 <fprintf@plt>
   12dd0:	add	r3, sp, #32
   12dd4:	mov	lr, #46	; 0x2e
   12dd8:	add	r2, r3, r5
   12ddc:	mov	ip, #0
   12de0:	mov	r5, r2
   12de4:	add	r4, r4, #1
   12de8:	ldrb	r3, [r8]
   12dec:	sub	r1, r3, #32
   12df0:	cmp	r1, #94	; 0x5e
   12df4:	bls	12e68 <_start@@Base+0x258>
   12df8:	cmp	r6, r4
   12dfc:	strb	lr, [r2, #-20]	; 0xffffffec
   12e00:	strb	ip, [r2, #-19]	; 0xffffffed
   12e04:	bne	12d90 <_start@@Base+0x180>
   12e08:	tst	r6, #15
   12e0c:	beq	12e38 <_start@@Base+0x228>
   12e10:	movw	r4, #23596	; 0x5c2c
   12e14:	movt	r4, #2
   12e18:	add	r6, r6, #1
   12e1c:	mov	r3, r7
   12e20:	mov	r2, #3
   12e24:	mov	r1, #1
   12e28:	mov	r0, r4
   12e2c:	bl	129b0 <fwrite@plt>
   12e30:	tst	r6, #15
   12e34:	bne	12e18 <_start@@Base+0x208>
   12e38:	ldr	r2, [sp, #4]
   12e3c:	mov	r0, r7
   12e40:	movw	r1, #23572	; 0x5c14
   12e44:	movt	r1, #2
   12e48:	bl	12a04 <fprintf@plt>
   12e4c:	add	sp, sp, #36	; 0x24
   12e50:	ldrd	r4, [sp]
   12e54:	ldrd	r6, [sp, #8]
   12e58:	ldrd	r8, [sp, #16]
   12e5c:	ldrd	sl, [sp, #24]
   12e60:	add	sp, sp, #32
   12e64:	pop	{pc}		; (ldr pc, [sp], #4)
   12e68:	cmp	r6, r4
   12e6c:	strb	r3, [r2, #-20]	; 0xffffffec
   12e70:	strb	ip, [r5, #-19]	; 0xffffffed
   12e74:	beq	12e08 <_start@@Base+0x1f8>
   12e78:	ands	r5, r4, #15
   12e7c:	beq	12d98 <_start@@Base+0x188>
   12e80:	tst	r4, #7
   12e84:	bne	12dc0 <_start@@Base+0x1b0>
   12e88:	mov	r1, r7
   12e8c:	mov	r0, #32
   12e90:	bl	12a40 <fputc@plt>
   12e94:	b	12dc0 <_start@@Base+0x1b0>
   12e98:	add	r3, sp, #12
   12e9c:	str	r3, [sp, #4]
   12ea0:	b	12e38 <_start@@Base+0x228>
   12ea4:	movw	r3, #21692	; 0x54bc
   12ea8:	movt	r3, #2
   12eac:	str	r4, [sp, #-8]!
   12eb0:	movw	r1, #23600	; 0x5c30
   12eb4:	movt	r1, #2
   12eb8:	str	lr, [sp, #4]
   12ebc:	movw	r0, #23700	; 0x5c94
   12ec0:	movt	r0, #2
   12ec4:	movw	r2, #697	; 0x2b9
   12ec8:	bl	12a64 <__assert_fail@plt>
   12ecc:	movw	r1, #23600	; 0x5c30
   12ed0:	movt	r1, #2
   12ed4:	ldr	r3, [pc, #20]	; 12ef0 <_start@@Base+0x2e0>
   12ed8:	movw	r0, #23700	; 0x5c94
   12edc:	movt	r0, #2
   12ee0:	str	r4, [sp, #-8]!
   12ee4:	movw	r2, #697	; 0x2b9
   12ee8:	str	lr, [sp, #4]
   12eec:	bl	12a64 <__assert_fail@plt>
   12ef0:	ldrdeq	r5, [r2], -r8
   12ef4:	movw	r1, #23600	; 0x5c30
   12ef8:	movt	r1, #2
   12efc:	ldr	r3, [pc, #20]	; 12f18 <_start@@Base+0x308>
   12f00:	movw	r0, #23700	; 0x5c94
   12f04:	movt	r0, #2
   12f08:	str	r4, [sp, #-8]!
   12f0c:	mov	r2, #696	; 0x2b8
   12f10:	str	lr, [sp, #4]
   12f14:	bl	12a64 <__assert_fail@plt>
   12f18:	andeq	r5, r2, r0, lsl #10
   12f1c:	movw	r1, #23600	; 0x5c30
   12f20:	movt	r1, #2
   12f24:	ldr	r3, [pc, #20]	; 12f40 <_start@@Base+0x330>
   12f28:	movw	r0, #23700	; 0x5c94
   12f2c:	movt	r0, #2
   12f30:	str	r4, [sp, #-8]!
   12f34:	mov	r2, #696	; 0x2b8
   12f38:	str	lr, [sp, #4]
   12f3c:	bl	12a64 <__assert_fail@plt>
   12f40:	andeq	r5, r2, r8, lsr #10
   12f44:	movw	r1, #23600	; 0x5c30
   12f48:	movt	r1, #2
   12f4c:	ldr	r3, [pc, #20]	; 12f68 <_start@@Base+0x358>
   12f50:	movw	r0, #23700	; 0x5c94
   12f54:	movt	r0, #2
   12f58:	str	r4, [sp, #-8]!
   12f5c:	movw	r2, #706	; 0x2c2
   12f60:	str	lr, [sp, #4]
   12f64:	bl	12a64 <__assert_fail@plt>
   12f68:	andeq	r5, r2, r4, asr #10
   12f6c:	movw	r1, #23740	; 0x5cbc
   12f70:	movt	r1, #2
   12f74:	ldr	r3, [pc, #20]	; 12f90 <_start@@Base+0x380>
   12f78:	movw	r0, #23844	; 0x5d24
   12f7c:	movt	r0, #2
   12f80:	str	r4, [sp, #-8]!
   12f84:	movw	r2, #395	; 0x18b
   12f88:	str	lr, [sp, #4]
   12f8c:	bl	12a64 <__assert_fail@plt>
   12f90:	andeq	r5, r2, r8, ror #10
   12f94:	movw	r1, #23600	; 0x5c30
   12f98:	movt	r1, #2
   12f9c:	ldr	r3, [pc, #20]	; 12fb8 <_start@@Base+0x3a8>
   12fa0:	movw	r0, #23700	; 0x5c94
   12fa4:	movt	r0, #2
   12fa8:	str	r4, [sp, #-8]!
   12fac:	movw	r2, #698	; 0x2ba
   12fb0:	str	lr, [sp, #4]
   12fb4:	bl	12a64 <__assert_fail@plt>
   12fb8:	andeq	r5, r2, r4, lsl #11
   12fbc:	movw	r1, #23600	; 0x5c30
   12fc0:	movt	r1, #2
   12fc4:	ldr	r3, [pc, #20]	; 12fe0 <_start@@Base+0x3d0>
   12fc8:	movw	r0, #23700	; 0x5c94
   12fcc:	movt	r0, #2
   12fd0:	str	r4, [sp, #-8]!
   12fd4:	movw	r2, #698	; 0x2ba
   12fd8:	str	lr, [sp, #4]
   12fdc:	bl	12a64 <__assert_fail@plt>
   12fe0:	andeq	r5, r2, r0, lsr #11
   12fe4:	movw	r1, #23600	; 0x5c30
   12fe8:	movt	r1, #2
   12fec:	ldr	r3, [pc, #20]	; 13008 <_start@@Base+0x3f8>
   12ff0:	movw	r0, #23700	; 0x5c94
   12ff4:	movt	r0, #2
   12ff8:	str	r4, [sp, #-8]!
   12ffc:	movw	r2, #718	; 0x2ce
   13000:	str	lr, [sp, #4]
   13004:	bl	12a64 <__assert_fail@plt>
   13008:	andeq	r5, r2, r8, asr #11
   1300c:	movw	r1, #23600	; 0x5c30
   13010:	movt	r1, #2
   13014:	ldr	r3, [pc, #20]	; 13030 <_start@@Base+0x420>
   13018:	movw	r0, #23700	; 0x5c94
   1301c:	movt	r0, #2
   13020:	str	r4, [sp, #-8]!
   13024:	mov	r2, #712	; 0x2c8
   13028:	str	lr, [sp, #4]
   1302c:	bl	12a64 <__assert_fail@plt>
   13030:	andeq	r5, r2, r8, ror #11
   13034:	movw	r1, #23740	; 0x5cbc
   13038:	movt	r1, #2
   1303c:	ldr	r3, [pc, #20]	; 13058 <_start@@Base+0x448>
   13040:	movw	r0, #23844	; 0x5d24
   13044:	movt	r0, #2
   13048:	str	r4, [sp, #-8]!
   1304c:	mov	r2, #108	; 0x6c
   13050:	str	lr, [sp, #4]
   13054:	bl	12a64 <__assert_fail@plt>
   13058:	andeq	r5, r2, r4, lsl r6
   1305c:	movw	r1, #23600	; 0x5c30
   13060:	movt	r1, #2
   13064:	ldr	r3, [pc, #20]	; 13080 <_start@@Base+0x470>
   13068:	movw	r0, #23700	; 0x5c94
   1306c:	movt	r0, #2
   13070:	str	r4, [sp, #-8]!
   13074:	movw	r2, #714	; 0x2ca
   13078:	str	lr, [sp, #4]
   1307c:	bl	12a64 <__assert_fail@plt>
   13080:	andeq	r5, r2, r0, lsr r6
   13084:	movw	r1, #23600	; 0x5c30
   13088:	movt	r1, #2
   1308c:	ldr	r3, [pc, #20]	; 130a8 <_start@@Base+0x498>
   13090:	movw	r0, #23700	; 0x5c94
   13094:	movt	r0, #2
   13098:	str	r4, [sp, #-8]!
   1309c:	movw	r2, #711	; 0x2c7
   130a0:	str	lr, [sp, #4]
   130a4:	bl	12a64 <__assert_fail@plt>
   130a8:	andeq	r5, r2, r8, asr r6
   130ac:	movw	r1, #23600	; 0x5c30
   130b0:	movt	r1, #2
   130b4:	ldr	r3, [pc, #20]	; 130d0 <_start@@Base+0x4c0>
   130b8:	movw	r0, #23844	; 0x5d24
   130bc:	movt	r0, #2
   130c0:	str	r4, [sp, #-8]!
   130c4:	movw	r2, #693	; 0x2b5
   130c8:	str	lr, [sp, #4]
   130cc:	bl	12a64 <__assert_fail@plt>
   130d0:	andeq	r5, r2, r4, lsl #13
   130d4:	movw	r1, #23600	; 0x5c30
   130d8:	movt	r1, #2
   130dc:	ldr	r3, [pc, #20]	; 130f8 <_start@@Base+0x4e8>
   130e0:	movw	r0, #23700	; 0x5c94
   130e4:	movt	r0, #2
   130e8:	str	r4, [sp, #-8]!
   130ec:	movw	r2, #717	; 0x2cd
   130f0:	str	lr, [sp, #4]
   130f4:	bl	12a64 <__assert_fail@plt>
   130f8:	andeq	r5, r2, r4, lsr #13
   130fc:	subs	r2, r0, #0
   13100:	beq	13130 <_start@@Base+0x520>
   13104:	ldr	r3, [r2]
   13108:	sub	r3, r2, r3
   1310c:	ldrh	r1, [r3]
   13110:	cmp	r1, #19
   13114:	bls	13128 <_start@@Base+0x518>
   13118:	ldrh	r0, [r3, #18]
   1311c:	cmp	r0, #0
   13120:	ldrbne	r0, [r2, r0]
   13124:	bx	lr
   13128:	mov	r0, #0
   1312c:	bx	lr
   13130:	str	r4, [sp, #-8]!
   13134:	str	lr, [sp, #4]
   13138:	bl	130d4 <_start@@Base+0x4c4>
   1313c:	movw	r1, #23600	; 0x5c30
   13140:	movt	r1, #2
   13144:	ldr	r3, [pc, #20]	; 13160 <_start@@Base+0x550>
   13148:	movw	r0, #23700	; 0x5c94
   1314c:	movt	r0, #2
   13150:	str	r4, [sp, #-8]!
   13154:	movw	r2, #717	; 0x2cd
   13158:	str	lr, [sp, #4]
   1315c:	bl	12a64 <__assert_fail@plt>
   13160:	andeq	r5, r2, r8, asr #13
   13164:	cmp	r0, #0
   13168:	beq	131a4 <_start@@Base+0x594>
   1316c:	ldr	r3, [r0]
   13170:	sub	r3, r0, r3
   13174:	ldrh	r2, [r3]
   13178:	cmp	r2, #21
   1317c:	bls	1319c <_start@@Base+0x58c>
   13180:	ldrh	r3, [r3, #20]
   13184:	cmp	r3, #0
   13188:	beq	1319c <_start@@Base+0x58c>
   1318c:	ldr	r2, [r0, r3]
   13190:	add	r0, r0, r3
   13194:	add	r0, r0, r2
   13198:	bx	lr
   1319c:	mov	r0, #0
   131a0:	bx	lr
   131a4:	str	r4, [sp, #-8]!
   131a8:	str	lr, [sp, #4]
   131ac:	bl	1313c <_start@@Base+0x52c>
   131b0:	movw	r1, #23600	; 0x5c30
   131b4:	movt	r1, #2
   131b8:	ldr	r3, [pc, #20]	; 131d4 <_start@@Base+0x5c4>
   131bc:	movw	r0, #23700	; 0x5c94
   131c0:	movt	r0, #2
   131c4:	str	r4, [sp, #-8]!
   131c8:	movw	r2, #699	; 0x2bb
   131cc:	str	lr, [sp, #4]
   131d0:	bl	12a64 <__assert_fail@plt>
   131d4:	andeq	r5, r2, r4, ror #13
   131d8:	cmp	r0, #0
   131dc:	str	r4, [sp, #-8]!
   131e0:	str	lr, [sp, #4]
   131e4:	beq	13240 <_start@@Base+0x630>
   131e8:	ldr	r3, [r0]
   131ec:	sub	r3, r0, r3
   131f0:	ldrh	r2, [r3]
   131f4:	cmp	r2, #11
   131f8:	bls	13224 <_start@@Base+0x614>
   131fc:	ldrh	r3, [r3, #10]
   13200:	cmp	r3, #0
   13204:	beq	13224 <_start@@Base+0x614>
   13208:	ldr	r2, [r0, r3]
   1320c:	add	r0, r0, r3
   13210:	ldr	r4, [sp]
   13214:	add	sp, sp, #4
   13218:	add	r2, r2, #4
   1321c:	add	r0, r0, r2
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	movw	r1, #23600	; 0x5c30
   13228:	movt	r1, #2
   1322c:	ldr	r3, [pc, #16]	; 13244 <_start@@Base+0x634>
   13230:	movw	r0, #23900	; 0x5d5c
   13234:	movt	r0, #2
   13238:	movw	r2, #699	; 0x2bb
   1323c:	bl	12a64 <__assert_fail@plt>
   13240:	bl	131b0 <_start@@Base+0x5a0>
   13244:	andeq	r5, r2, r4, ror #13
   13248:	movw	r1, #23600	; 0x5c30
   1324c:	movt	r1, #2
   13250:	ldr	r3, [pc, #20]	; 1326c <_start@@Base+0x65c>
   13254:	movw	r0, #23700	; 0x5c94
   13258:	movt	r0, #2
   1325c:	str	r4, [sp, #-8]!
   13260:	movw	r2, #722	; 0x2d2
   13264:	str	lr, [sp, #4]
   13268:	bl	12a64 <__assert_fail@plt>
   1326c:	andeq	r5, r2, r0, lsl #14
   13270:	movw	r1, #23600	; 0x5c30
   13274:	movt	r1, #2
   13278:	ldr	r3, [pc, #20]	; 13294 <_start@@Base+0x684>
   1327c:	movw	r0, #23700	; 0x5c94
   13280:	movt	r0, #2
   13284:	str	r4, [sp, #-8]!
   13288:	movw	r2, #621	; 0x26d
   1328c:	str	lr, [sp, #4]
   13290:	bl	12a64 <__assert_fail@plt>
   13294:	andeq	r5, r2, r4, lsr #14
   13298:	movw	r1, #23600	; 0x5c30
   1329c:	movt	r1, #2
   132a0:	ldr	r3, [pc, #20]	; 132bc <_start@@Base+0x6ac>
   132a4:	movw	r0, #23700	; 0x5c94
   132a8:	movt	r0, #2
   132ac:	str	r4, [sp, #-8]!
   132b0:	movw	r2, #621	; 0x26d
   132b4:	str	lr, [sp, #4]
   132b8:	bl	12a64 <__assert_fail@plt>
   132bc:	andeq	r5, r2, r4, asr #14
   132c0:	movw	r1, #23740	; 0x5cbc
   132c4:	movt	r1, #2
   132c8:	ldr	r3, [pc, #20]	; 132e4 <_start@@Base+0x6d4>
   132cc:	movw	r0, #23844	; 0x5d24
   132d0:	movt	r0, #2
   132d4:	str	r4, [sp, #-8]!
   132d8:	mov	r2, #117	; 0x75
   132dc:	str	lr, [sp, #4]
   132e0:	bl	12a64 <__assert_fail@plt>
   132e4:	andeq	r5, r2, r0, ror #14
   132e8:	movw	r1, #23740	; 0x5cbc
   132ec:	movt	r1, #2
   132f0:	ldr	r3, [pc, #20]	; 1330c <_start@@Base+0x6fc>
   132f4:	movw	r0, #23844	; 0x5d24
   132f8:	movt	r0, #2
   132fc:	str	r4, [sp, #-8]!
   13300:	movw	r2, #405	; 0x195
   13304:	str	lr, [sp, #4]
   13308:	bl	12a64 <__assert_fail@plt>
   1330c:	andeq	r5, r2, ip, ror r7
   13310:	movw	r1, #23600	; 0x5c30
   13314:	movt	r1, #2
   13318:	ldr	r3, [pc, #20]	; 13334 <_start@@Base+0x724>
   1331c:	movw	r0, #23700	; 0x5c94
   13320:	movt	r0, #2
   13324:	str	r4, [sp, #-8]!
   13328:	movw	r2, #821	; 0x335
   1332c:	str	lr, [sp, #4]
   13330:	bl	12a64 <__assert_fail@plt>
   13334:	muleq	r2, ip, r7
   13338:	movw	r1, #23600	; 0x5c30
   1333c:	movt	r1, #2
   13340:	ldr	r3, [pc, #20]	; 1335c <_start@@Base+0x74c>
   13344:	movw	r0, #23700	; 0x5c94
   13348:	movt	r0, #2
   1334c:	str	r4, [sp, #-8]!
   13350:	movw	r2, #821	; 0x335
   13354:	str	lr, [sp, #4]
   13358:	bl	12a64 <__assert_fail@plt>
   1335c:			; <UNDEFINED> instruction: 0x000257bc
   13360:	subs	r2, r0, #0
   13364:	beq	13394 <_start@@Base+0x784>
   13368:	ldr	r3, [r2]
   1336c:	sub	r3, r2, r3
   13370:	ldrh	r1, [r3]
   13374:	cmp	r1, #5
   13378:	bls	1338c <_start@@Base+0x77c>
   1337c:	ldrh	r0, [r3, #4]
   13380:	cmp	r0, #0
   13384:	ldrne	r0, [r2, r0]
   13388:	bx	lr
   1338c:	mov	r0, #0
   13390:	bx	lr
   13394:	movw	r1, #23600	; 0x5c30
   13398:	movt	r1, #2
   1339c:	ldr	r3, [pc, #20]	; 133b8 <_start@@Base+0x7a8>
   133a0:	movw	r0, #23700	; 0x5c94
   133a4:	movt	r0, #2
   133a8:	str	r4, [sp, #-8]!
   133ac:	movw	r2, #770	; 0x302
   133b0:	str	lr, [sp, #4]
   133b4:	bl	12a64 <__assert_fail@plt>
   133b8:	ldrdeq	r5, [r2], -r4
   133bc:	movw	r1, #23600	; 0x5c30
   133c0:	movt	r1, #2
   133c4:	ldr	r3, [pc, #20]	; 133e0 <_start@@Base+0x7d0>
   133c8:	movw	r0, #23700	; 0x5c94
   133cc:	movt	r0, #2
   133d0:	str	r4, [sp, #-8]!
   133d4:	movw	r2, #823	; 0x337
   133d8:	str	lr, [sp, #4]
   133dc:	bl	12a64 <__assert_fail@plt>
   133e0:	strdeq	r5, [r2], -ip
   133e4:	push	{lr}		; (str lr, [sp, #-4]!)
   133e8:	sub	sp, sp, #12
   133ec:	add	ip, sp, #8
   133f0:	stmdb	ip, {r1, r2}
   133f4:	ldr	r2, [sp]
   133f8:	cmp	r2, #0
   133fc:	beq	13458 <_start@@Base+0x848>
   13400:	ldr	r1, [r2, #-4]
   13404:	cmp	r3, r1
   13408:	bcs	13458 <_start@@Base+0x848>
   1340c:	ldrb	r2, [r2, r3]
   13410:	cmp	r2, #0
   13414:	strbeq	r2, [r0]
   13418:	streq	r2, [r0, #4]
   1341c:	beq	1344c <_start@@Base+0x83c>
   13420:	ldr	r1, [sp, #4]
   13424:	cmp	r1, #0
   13428:	add	ip, r1, r3, lsl #2
   1342c:	beq	13454 <_start@@Base+0x844>
   13430:	ldr	lr, [r1, #-4]
   13434:	cmp	r3, lr
   13438:	bcs	13454 <_start@@Base+0x844>
   1343c:	ldr	r3, [r1, r3, lsl #2]
   13440:	strb	r2, [r0]
   13444:	add	ip, ip, r3
   13448:	str	ip, [r0, #4]
   1344c:	add	sp, sp, #12
   13450:	pop	{pc}		; (ldr pc, [sp], #4)
   13454:	bl	132c0 <_start@@Base+0x6b0>
   13458:	movw	r1, #23600	; 0x5c30
   1345c:	movt	r1, #2
   13460:	ldr	r3, [pc, #12]	; 13474 <_start@@Base+0x864>
   13464:	movw	r0, #23936	; 0x5d80
   13468:	movt	r0, #2
   1346c:	movw	r2, #773	; 0x305
   13470:	bl	12a64 <__assert_fail@plt>
   13474:	andeq	r5, r2, ip, lsl r8
   13478:	movw	r1, #23600	; 0x5c30
   1347c:	movt	r1, #2
   13480:	ldr	r3, [pc, #20]	; 1349c <_start@@Base+0x88c>
   13484:	movw	r0, #23700	; 0x5c94
   13488:	movt	r0, #2
   1348c:	str	r4, [sp, #-8]!
   13490:	movw	r2, #705	; 0x2c1
   13494:	str	lr, [sp, #4]
   13498:	bl	12a64 <__assert_fail@plt>
   1349c:	andeq	r5, r2, ip, lsr r8
   134a0:	movw	r1, #23968	; 0x5da0
   134a4:	movt	r1, #2
   134a8:	ldr	r3, [pc, #20]	; 134c4 <_start@@Base+0x8b4>
   134ac:	movw	r0, #24068	; 0x5e04
   134b0:	movt	r0, #2
   134b4:	str	r4, [sp, #-8]!
   134b8:	mov	r2, #235	; 0xeb
   134bc:	str	lr, [sp, #4]
   134c0:	bl	12a64 <__assert_fail@plt>
   134c4:	andeq	r5, r2, r4, ror #16
   134c8:	movw	r1, #23968	; 0x5da0
   134cc:	movt	r1, #2
   134d0:	ldr	r3, [pc, #20]	; 134ec <_start@@Base+0x8dc>
   134d4:	movw	r0, #24232	; 0x5ea8
   134d8:	movt	r0, #2
   134dc:	str	r4, [sp, #-8]!
   134e0:	mov	r2, #221	; 0xdd
   134e4:	str	lr, [sp, #4]
   134e8:	bl	12a64 <__assert_fail@plt>
   134ec:	andeq	r5, r2, r0, lsl #17
   134f0:	mov	r3, #8
   134f4:	mov	r1, #0
   134f8:	str	r4, [sp, #-8]!
   134fc:	mov	r2, r3
   13500:	mov	r4, r0
   13504:	str	lr, [sp, #4]
   13508:	bl	23c8c <flatcc_verify_field@@Base>
   1350c:	cmp	r0, #0
   13510:	beq	13520 <_start@@Base+0x910>
   13514:	ldr	r4, [sp]
   13518:	add	sp, sp, #4
   1351c:	pop	{pc}		; (ldr pc, [sp], #4)
   13520:	mov	r3, #4
   13524:	mov	r0, r4
   13528:	ldr	r4, [sp]
   1352c:	mov	r2, r3
   13530:	mov	r1, #1
   13534:	ldr	lr, [sp, #4]
   13538:	add	sp, sp, #8
   1353c:	b	23c8c <flatcc_verify_field@@Base>
   13540:	mov	r3, #1
   13544:	mov	r1, #0
   13548:	str	r4, [sp, #-8]!
   1354c:	mov	r2, r3
   13550:	mov	r4, r0
   13554:	str	lr, [sp, #4]
   13558:	bl	23c8c <flatcc_verify_field@@Base>
   1355c:	cmp	r0, #0
   13560:	beq	13570 <_start@@Base+0x960>
   13564:	ldr	r4, [sp]
   13568:	add	sp, sp, #4
   1356c:	pop	{pc}		; (ldr pc, [sp], #4)
   13570:	mov	r3, #1
   13574:	mov	r0, r4
   13578:	mov	r2, r3
   1357c:	mov	r1, r3
   13580:	bl	23c8c <flatcc_verify_field@@Base>
   13584:	cmp	r0, #0
   13588:	bne	13564 <_start@@Base+0x954>
   1358c:	mov	r3, #1
   13590:	mov	r1, #2
   13594:	mov	r2, r3
   13598:	mov	r0, r4
   1359c:	bl	23c8c <flatcc_verify_field@@Base>
   135a0:	cmp	r0, #0
   135a4:	bne	13564 <_start@@Base+0x954>
   135a8:	mov	r3, #1
   135ac:	mov	r0, r4
   135b0:	ldr	r4, [sp]
   135b4:	mov	r2, r3
   135b8:	mov	r1, #3
   135bc:	ldr	lr, [sp, #4]
   135c0:	add	sp, sp, #8
   135c4:	b	23c8c <flatcc_verify_field@@Base>
   135c8:	mov	r3, #1
   135cc:	mov	r1, #0
   135d0:	str	r4, [sp, #-8]!
   135d4:	mov	r2, r3
   135d8:	str	lr, [sp, #4]
   135dc:	sub	sp, sp, #8
   135e0:	mov	r4, r0
   135e4:	bl	23c8c <flatcc_verify_field@@Base>
   135e8:	cmp	r0, #0
   135ec:	beq	13600 <_start@@Base+0x9f0>
   135f0:	add	sp, sp, #8
   135f4:	ldr	r4, [sp]
   135f8:	add	sp, sp, #4
   135fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13600:	mov	r3, #1
   13604:	mov	r0, r4
   13608:	mov	r2, r3
   1360c:	mov	r1, r3
   13610:	bl	23c8c <flatcc_verify_field@@Base>
   13614:	cmp	r0, #0
   13618:	bne	135f0 <_start@@Base+0x9e0>
   1361c:	mov	r3, #2
   13620:	mov	r0, r4
   13624:	mov	r2, r3
   13628:	mov	r1, r3
   1362c:	bl	23c8c <flatcc_verify_field@@Base>
   13630:	cmp	r0, #0
   13634:	bne	135f0 <_start@@Base+0x9e0>
   13638:	mov	r3, #2
   1363c:	mov	r1, #3
   13640:	mov	r2, r3
   13644:	mov	r0, r4
   13648:	bl	23c8c <flatcc_verify_field@@Base>
   1364c:	cmp	r0, #0
   13650:	bne	135f0 <_start@@Base+0x9e0>
   13654:	mov	r3, #4
   13658:	mov	r0, r4
   1365c:	mov	r2, r3
   13660:	mov	r1, r3
   13664:	bl	23c8c <flatcc_verify_field@@Base>
   13668:	cmp	r0, #0
   1366c:	bne	135f0 <_start@@Base+0x9e0>
   13670:	mov	r3, #4
   13674:	mov	r1, #5
   13678:	mov	r2, r3
   1367c:	mov	r0, r4
   13680:	bl	23c8c <flatcc_verify_field@@Base>
   13684:	cmp	r0, #0
   13688:	bne	135f0 <_start@@Base+0x9e0>
   1368c:	mov	r3, #8
   13690:	mov	r1, #6
   13694:	mov	r2, r3
   13698:	mov	r0, r4
   1369c:	bl	23c8c <flatcc_verify_field@@Base>
   136a0:	cmp	r0, #0
   136a4:	bne	135f0 <_start@@Base+0x9e0>
   136a8:	mov	r3, #8
   136ac:	mov	r1, #7
   136b0:	mov	r2, r3
   136b4:	mov	r0, r4
   136b8:	bl	23c8c <flatcc_verify_field@@Base>
   136bc:	cmp	r0, #0
   136c0:	bne	135f0 <_start@@Base+0x9e0>
   136c4:	mov	r3, #4
   136c8:	mov	r1, #8
   136cc:	mov	r2, r3
   136d0:	mov	r0, r4
   136d4:	bl	23c8c <flatcc_verify_field@@Base>
   136d8:	cmp	r0, #0
   136dc:	bne	135f0 <_start@@Base+0x9e0>
   136e0:	mov	r3, #8
   136e4:	mov	r1, #9
   136e8:	mov	r2, r3
   136ec:	mov	r0, r4
   136f0:	bl	23c8c <flatcc_verify_field@@Base>
   136f4:	cmp	r0, #0
   136f8:	bne	135f0 <_start@@Base+0x9e0>
   136fc:	mov	r1, #1
   13700:	mvn	ip, #0
   13704:	mov	r3, r1
   13708:	mov	r2, #0
   1370c:	mov	r0, r4
   13710:	stm	sp, {r1, ip}
   13714:	mov	r1, #10
   13718:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   1371c:	cmp	r0, #0
   13720:	bne	135f0 <_start@@Base+0x9e0>
   13724:	mov	r1, #8
   13728:	mvn	ip, #-536870912	; 0xe0000000
   1372c:	mov	r2, r0
   13730:	mov	r3, r1
   13734:	mov	r0, r4
   13738:	stm	sp, {r1, ip}
   1373c:	mov	r1, #11
   13740:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13744:	b	135f0 <_start@@Base+0x9e0>
   13748:	mov	r2, #0
   1374c:	str	r4, [sp, #-8]!
   13750:	mov	r4, r0
   13754:	mov	r1, r2
   13758:	str	lr, [sp, #4]
   1375c:	bl	23cf8 <flatcc_verify_string_field@@Base>
   13760:	cmp	r0, #0
   13764:	beq	13774 <_start@@Base+0xb64>
   13768:	ldr	r4, [sp]
   1376c:	add	sp, sp, #4
   13770:	pop	{pc}		; (ldr pc, [sp], #4)
   13774:	mov	r3, #8
   13778:	mov	r1, #1
   1377c:	mov	r2, r3
   13780:	mov	r0, r4
   13784:	bl	23c8c <flatcc_verify_field@@Base>
   13788:	cmp	r0, #0
   1378c:	bne	13768 <_start@@Base+0xb58>
   13790:	mov	r3, #2
   13794:	mov	r0, r4
   13798:	ldr	r4, [sp]
   1379c:	mov	r2, r3
   137a0:	mov	r1, r3
   137a4:	ldr	lr, [sp, #4]
   137a8:	add	sp, sp, #8
   137ac:	b	23c8c <flatcc_verify_field@@Base>
   137b0:	mov	r2, #0
   137b4:	str	r4, [sp, #-8]!
   137b8:	mov	r4, r0
   137bc:	mov	r1, r2
   137c0:	str	lr, [sp, #4]
   137c4:	bl	23cf8 <flatcc_verify_string_field@@Base>
   137c8:	cmp	r0, #0
   137cc:	beq	137dc <_start@@Base+0xbcc>
   137d0:	ldr	r4, [sp]
   137d4:	add	sp, sp, #4
   137d8:	pop	{pc}		; (ldr pc, [sp], #4)
   137dc:	mov	r3, #4
   137e0:	mov	r1, #1
   137e4:	mov	r2, r3
   137e8:	mov	r0, r4
   137ec:	bl	23c8c <flatcc_verify_field@@Base>
   137f0:	cmp	r0, #0
   137f4:	bne	137d0 <_start@@Base+0xbc0>
   137f8:	mov	r2, r0
   137fc:	mov	r1, #2
   13800:	mov	r0, r4
   13804:	bl	23cf8 <flatcc_verify_string_field@@Base>
   13808:	cmp	r0, #0
   1380c:	bne	137d0 <_start@@Base+0xbc0>
   13810:	mov	r3, #8
   13814:	mov	r1, #3
   13818:	mov	r2, r3
   1381c:	mov	r0, r4
   13820:	bl	23c8c <flatcc_verify_field@@Base>
   13824:	cmp	r0, #0
   13828:	bne	137d0 <_start@@Base+0xbc0>
   1382c:	mov	r2, r0
   13830:	mov	r1, #4
   13834:	mov	r0, r4
   13838:	bl	23cf8 <flatcc_verify_string_field@@Base>
   1383c:	cmp	r0, #0
   13840:	bne	137d0 <_start@@Base+0xbc0>
   13844:	mov	r3, #8
   13848:	mov	r1, #5
   1384c:	mov	r2, r3
   13850:	mov	r0, r4
   13854:	bl	23c8c <flatcc_verify_field@@Base>
   13858:	cmp	r0, #0
   1385c:	bne	137d0 <_start@@Base+0xbc0>
   13860:	mov	r3, #4
   13864:	mov	r1, #6
   13868:	mov	r2, r3
   1386c:	mov	r0, r4
   13870:	bl	23c8c <flatcc_verify_field@@Base>
   13874:	cmp	r0, #0
   13878:	bne	137d0 <_start@@Base+0xbc0>
   1387c:	mov	r3, #8
   13880:	mov	r1, #7
   13884:	mov	r2, r3
   13888:	mov	r0, r4
   1388c:	bl	23c8c <flatcc_verify_field@@Base>
   13890:	cmp	r0, #0
   13894:	bne	137d0 <_start@@Base+0xbc0>
   13898:	mov	r3, #4
   1389c:	mov	r0, r4
   138a0:	ldr	r4, [sp]
   138a4:	mov	r2, r3
   138a8:	mov	r1, #8
   138ac:	ldr	lr, [sp, #4]
   138b0:	add	sp, sp, #8
   138b4:	b	23c8c <flatcc_verify_field@@Base>
   138b8:	mov	r2, #0
   138bc:	movw	r3, #14256	; 0x37b0
   138c0:	movt	r3, #1
   138c4:	mov	r1, r2
   138c8:	str	r4, [sp, #-8]!
   138cc:	mov	r4, r0
   138d0:	str	lr, [sp, #4]
   138d4:	bl	240c0 <flatcc_verify_table_field@@Base>
   138d8:	cmp	r0, #0
   138dc:	beq	138ec <_start@@Base+0xcdc>
   138e0:	ldr	r4, [sp]
   138e4:	add	sp, sp, #4
   138e8:	pop	{pc}		; (ldr pc, [sp], #4)
   138ec:	mov	r2, r0
   138f0:	movw	r3, #17120	; 0x42e0
   138f4:	movt	r3, #1
   138f8:	mov	r1, #1
   138fc:	mov	r0, r4
   13900:	bl	240c0 <flatcc_verify_table_field@@Base>
   13904:	cmp	r0, #0
   13908:	bne	138e0 <_start@@Base+0xcd0>
   1390c:	mov	r2, r0
   13910:	movw	r3, #13552	; 0x34f0
   13914:	movt	r3, #1
   13918:	mov	r0, r4
   1391c:	ldr	r4, [sp]
   13920:	mov	r1, #2
   13924:	ldr	lr, [sp, #4]
   13928:	add	sp, sp, #8
   1392c:	b	240c0 <flatcc_verify_table_field@@Base>
   13930:	mov	r3, #16
   13934:	mov	r2, #32
   13938:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1393c:	mov	r1, #0
   13940:	strd	r6, [sp, #8]
   13944:	mov	r4, r0
   13948:	str	r8, [sp, #16]
   1394c:	str	lr, [sp, #20]
   13950:	sub	sp, sp, #8
   13954:	bl	23c8c <flatcc_verify_field@@Base>
   13958:	cmp	r0, #0
   1395c:	beq	13978 <_start@@Base+0xd68>
   13960:	add	sp, sp, #8
   13964:	ldrd	r4, [sp]
   13968:	ldrd	r6, [sp, #8]
   1396c:	ldr	r8, [sp, #16]
   13970:	add	sp, sp, #20
   13974:	pop	{pc}		; (ldr pc, [sp], #4)
   13978:	mov	r3, #2
   1397c:	mov	r0, r4
   13980:	mov	r2, r3
   13984:	mov	r1, r3
   13988:	bl	23c8c <flatcc_verify_field@@Base>
   1398c:	cmp	r0, #0
   13990:	bne	13960 <_start@@Base+0xd50>
   13994:	mov	r3, #2
   13998:	mov	r1, #1
   1399c:	mov	r2, r3
   139a0:	mov	r0, r4
   139a4:	bl	23c8c <flatcc_verify_field@@Base>
   139a8:	cmp	r0, #0
   139ac:	bne	13960 <_start@@Base+0xd50>
   139b0:	mov	r2, #1
   139b4:	mov	r1, #3
   139b8:	mov	r0, r4
   139bc:	bl	23cf8 <flatcc_verify_string_field@@Base>
   139c0:	cmp	r0, #0
   139c4:	bne	13960 <_start@@Base+0xd50>
   139c8:	mov	r3, #1
   139cc:	mov	r1, #6
   139d0:	mov	r2, r3
   139d4:	mov	r0, r4
   139d8:	bl	23c8c <flatcc_verify_field@@Base>
   139dc:	cmp	r0, #0
   139e0:	bne	13960 <_start@@Base+0xd50>
   139e4:	mov	r5, #1
   139e8:	mvn	r6, #0
   139ec:	mov	r2, r0
   139f0:	mov	r3, r5
   139f4:	mov	r1, #5
   139f8:	mov	r0, r4
   139fc:	stm	sp, {r5, r6}
   13a00:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13a04:	cmp	r0, #0
   13a08:	bne	13960 <_start@@Base+0xd50>
   13a0c:	mov	r2, r0
   13a10:	movw	r3, #14640	; 0x3930
   13a14:	movt	r3, #1
   13a18:	mov	r1, #11
   13a1c:	mov	r0, r4
   13a20:	bl	2422c <flatcc_verify_table_vector_field@@Base>
   13a24:	cmp	r0, #0
   13a28:	bne	13960 <_start@@Base+0xd50>
   13a2c:	mov	r2, r0
   13a30:	mov	r1, #10
   13a34:	mov	r0, r4
   13a38:	bl	23edc <flatcc_verify_string_vector_field@@Base>
   13a3c:	cmp	r0, #0
   13a40:	bne	13960 <_start@@Base+0xd50>
   13a44:	mov	r2, r0
   13a48:	mov	r1, #28
   13a4c:	mov	r0, r4
   13a50:	bl	23edc <flatcc_verify_string_vector_field@@Base>
   13a54:	cmp	r0, #0
   13a58:	bne	13960 <_start@@Base+0xd50>
   13a5c:	mov	r2, r0
   13a60:	mov	r3, r5
   13a64:	stm	sp, {r5, r6}
   13a68:	mov	r1, #24
   13a6c:	mov	r0, r4
   13a70:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13a74:	cmp	r0, #0
   13a78:	bne	13960 <_start@@Base+0xd50>
   13a7c:	mvn	ip, #-536870912	; 0xe0000000
   13a80:	mov	r5, #4
   13a84:	mov	r3, #8
   13a88:	mov	r2, #0
   13a8c:	mov	r1, #29
   13a90:	mov	r0, r4
   13a94:	stm	sp, {r5, ip}
   13a98:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13a9c:	cmp	r0, #0
   13aa0:	bne	13960 <_start@@Base+0xd50>
   13aa4:	movw	r6, #14640	; 0x3930
   13aa8:	movt	r6, #1
   13aac:	mov	r2, r0
   13ab0:	mov	r3, r6
   13ab4:	mov	r1, #12
   13ab8:	mov	r0, r4
   13abc:	bl	240c0 <flatcc_verify_table_field@@Base>
   13ac0:	cmp	r0, #0
   13ac4:	bne	13960 <_start@@Base+0xd50>
   13ac8:	mov	r2, r0
   13acc:	movw	r3, #15904	; 0x3e20
   13ad0:	movt	r3, #1
   13ad4:	mov	r1, #8
   13ad8:	mov	r0, r4
   13adc:	bl	2506c <flatcc_verify_union_field@@Base>
   13ae0:	cmp	r0, #0
   13ae4:	bne	13960 <_start@@Base+0xd50>
   13ae8:	mvn	r7, #-1073741824	; 0xc0000000
   13aec:	mov	r8, #2
   13af0:	mov	r2, r0
   13af4:	mov	r3, r5
   13af8:	mov	r1, #9
   13afc:	mov	r0, r4
   13b00:	str	r8, [sp]
   13b04:	str	r7, [sp, #4]
   13b08:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13b0c:	cmp	r0, #0
   13b10:	bne	13960 <_start@@Base+0xd50>
   13b14:	mov	r2, r0
   13b18:	mov	r3, r5
   13b1c:	str	r8, [sp]
   13b20:	mov	r1, #31
   13b24:	mov	r0, r4
   13b28:	str	r7, [sp, #4]
   13b2c:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13b30:	cmp	r0, #0
   13b34:	bne	13960 <_start@@Base+0xd50>
   13b38:	mov	r7, #1
   13b3c:	mov	r3, r0
   13b40:	mov	r2, r0
   13b44:	mov	r1, #13
   13b48:	mov	r0, r4
   13b4c:	str	r7, [sp]
   13b50:	str	r6, [sp, #4]
   13b54:	bl	24e14 <flatcc_verify_table_as_nested_root@@Base>
   13b58:	cmp	r0, #0
   13b5c:	bne	13960 <_start@@Base+0xd50>
   13b60:	mov	r2, r0
   13b64:	movw	r3, #14152	; 0x3748
   13b68:	movt	r3, #1
   13b6c:	mov	r1, #14
   13b70:	mov	r0, r4
   13b74:	bl	240c0 <flatcc_verify_table_field@@Base>
   13b78:	cmp	r0, #0
   13b7c:	bne	13960 <_start@@Base+0xd50>
   13b80:	mov	r3, r7
   13b84:	mov	r2, r7
   13b88:	mov	r1, #15
   13b8c:	mov	r0, r4
   13b90:	bl	23c8c <flatcc_verify_field@@Base>
   13b94:	cmp	r0, #0
   13b98:	bne	13960 <_start@@Base+0xd50>
   13b9c:	mov	r3, r5
   13ba0:	mov	r2, r5
   13ba4:	mov	r1, #16
   13ba8:	mov	r0, r4
   13bac:	bl	23c8c <flatcc_verify_field@@Base>
   13bb0:	cmp	r0, #0
   13bb4:	bne	13960 <_start@@Base+0xd50>
   13bb8:	mov	r3, r5
   13bbc:	mov	r2, r5
   13bc0:	mov	r1, #17
   13bc4:	mov	r0, r4
   13bc8:	bl	23c8c <flatcc_verify_field@@Base>
   13bcc:	cmp	r0, #0
   13bd0:	bne	13960 <_start@@Base+0xd50>
   13bd4:	mov	r3, #8
   13bd8:	mov	r1, #18
   13bdc:	mov	r2, r3
   13be0:	mov	r0, r4
   13be4:	bl	23c8c <flatcc_verify_field@@Base>
   13be8:	cmp	r0, #0
   13bec:	bne	13960 <_start@@Base+0xd50>
   13bf0:	mov	r3, #8
   13bf4:	mov	r1, #19
   13bf8:	mov	r2, r3
   13bfc:	mov	r0, r4
   13c00:	bl	23c8c <flatcc_verify_field@@Base>
   13c04:	cmp	r0, #0
   13c08:	bne	13960 <_start@@Base+0xd50>
   13c0c:	mov	r3, r5
   13c10:	mov	r1, #20
   13c14:	mov	r2, r5
   13c18:	mov	r0, r4
   13c1c:	bl	23c8c <flatcc_verify_field@@Base>
   13c20:	cmp	r0, #0
   13c24:	bne	13960 <_start@@Base+0xd50>
   13c28:	mov	r3, r5
   13c2c:	mov	r1, #21
   13c30:	mov	r2, r5
   13c34:	mov	r0, r4
   13c38:	bl	23c8c <flatcc_verify_field@@Base>
   13c3c:	cmp	r0, #0
   13c40:	bne	13960 <_start@@Base+0xd50>
   13c44:	mov	r3, #8
   13c48:	mov	r1, #22
   13c4c:	mov	r2, r3
   13c50:	mov	r0, r4
   13c54:	bl	23c8c <flatcc_verify_field@@Base>
   13c58:	cmp	r0, #0
   13c5c:	bne	13960 <_start@@Base+0xd50>
   13c60:	mov	r3, #8
   13c64:	mov	r1, #23
   13c68:	mov	r2, r3
   13c6c:	mov	r0, r4
   13c70:	bl	23c8c <flatcc_verify_field@@Base>
   13c74:	cmp	r0, #0
   13c78:	bne	13960 <_start@@Base+0xd50>
   13c7c:	mov	r3, r5
   13c80:	mov	r1, #25
   13c84:	mov	r2, r5
   13c88:	mov	r0, r4
   13c8c:	bl	23c8c <flatcc_verify_field@@Base>
   13c90:	cmp	r0, #0
   13c94:	bne	13960 <_start@@Base+0xd50>
   13c98:	mov	r3, r5
   13c9c:	mov	r1, #26
   13ca0:	mov	r2, r5
   13ca4:	mov	r0, r4
   13ca8:	bl	23c8c <flatcc_verify_field@@Base>
   13cac:	cmp	r0, #0
   13cb0:	bne	13960 <_start@@Base+0xd50>
   13cb4:	mov	r3, r5
   13cb8:	mov	r1, #27
   13cbc:	mov	r2, r5
   13cc0:	mov	r0, r4
   13cc4:	bl	23c8c <flatcc_verify_field@@Base>
   13cc8:	cmp	r0, #0
   13ccc:	bne	13960 <_start@@Base+0xd50>
   13cd0:	mvn	ip, #0
   13cd4:	mov	r1, r7
   13cd8:	mov	r2, r0
   13cdc:	mov	r3, r7
   13ce0:	mov	r0, r4
   13ce4:	stm	sp, {r1, ip}
   13ce8:	mov	r1, #30
   13cec:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13cf0:	cmp	r0, #0
   13cf4:	bne	13960 <_start@@Base+0xd50>
   13cf8:	mov	r5, #8
   13cfc:	mvn	r6, #-536870912	; 0xe0000000
   13d00:	mov	r3, r5
   13d04:	mov	r2, #0
   13d08:	mov	r1, #32
   13d0c:	mov	r0, r4
   13d10:	stm	sp, {r5, r6}
   13d14:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13d18:	cmp	r0, #0
   13d1c:	bne	13960 <_start@@Base+0xd50>
   13d20:	mov	r2, r0
   13d24:	mov	r3, r5
   13d28:	stm	sp, {r5, r6}
   13d2c:	mov	r1, #33	; 0x21
   13d30:	mov	r0, r4
   13d34:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13d38:	cmp	r0, #0
   13d3c:	bne	13960 <_start@@Base+0xd50>
   13d40:	mov	r2, r0
   13d44:	movw	r3, #11520	; 0x2d00
   13d48:	movt	r3, #1
   13d4c:	mov	r1, #34	; 0x22
   13d50:	mov	r0, r4
   13d54:	bl	240c0 <flatcc_verify_table_field@@Base>
   13d58:	cmp	r0, #0
   13d5c:	bne	13960 <_start@@Base+0xd50>
   13d60:	mov	r2, r0
   13d64:	movw	r3, #15760	; 0x3d90
   13d68:	movt	r3, #1
   13d6c:	mov	r0, r4
   13d70:	mov	r1, #35	; 0x23
   13d74:	add	sp, sp, #8
   13d78:	ldrd	r4, [sp]
   13d7c:	ldrd	r6, [sp, #8]
   13d80:	ldr	r8, [sp, #16]
   13d84:	ldr	lr, [sp, #20]
   13d88:	add	sp, sp, #24
   13d8c:	b	240c0 <flatcc_verify_table_field@@Base>
   13d90:	strd	r4, [sp, #-16]!
   13d94:	mov	r4, #1
   13d98:	mvn	r5, #0
   13d9c:	str	r6, [sp, #8]
   13da0:	mov	r2, #0
   13da4:	mov	r3, r4
   13da8:	str	lr, [sp, #12]
   13dac:	sub	sp, sp, #8
   13db0:	mov	r1, r2
   13db4:	mov	r6, r0
   13db8:	strd	r4, [sp]
   13dbc:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13dc0:	subs	r2, r0, #0
   13dc4:	beq	13de0 <_start@@Base+0x11d0>
   13dc8:	mov	r0, r2
   13dcc:	add	sp, sp, #8
   13dd0:	ldrd	r4, [sp]
   13dd4:	ldr	r6, [sp, #8]
   13dd8:	add	sp, sp, #12
   13ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   13de0:	mov	r3, r4
   13de4:	mov	r1, r4
   13de8:	strd	r4, [sp]
   13dec:	mov	r0, r6
   13df0:	bl	23dd8 <flatcc_verify_vector_field@@Base>
   13df4:	subs	r2, r0, #0
   13df8:	bne	13dc8 <_start@@Base+0x11b8>
   13dfc:	movw	ip, #14640	; 0x3930
   13e00:	movt	ip, #1
   13e04:	mov	r3, r2
   13e08:	mov	r0, r6
   13e0c:	mov	r1, #2
   13e10:	stm	sp, {r4, ip}
   13e14:	bl	24e14 <flatcc_verify_table_as_nested_root@@Base>
   13e18:	mov	r2, r0
   13e1c:	b	13dc8 <_start@@Base+0x11b8>
   13e20:	ldrb	r3, [r0, #12]
   13e24:	sub	r3, r3, #1
   13e28:	cmp	r3, #3
   13e2c:	ldrls	pc, [pc, r3, lsl #2]
   13e30:	b	13e74 <_start@@Base+0x1264>
   13e34:	andeq	r3, r1, r8, ror #28
   13e38:	andeq	r3, r1, ip, asr lr
   13e3c:	andeq	r3, r1, r0, asr lr
   13e40:	andeq	r3, r1, r4, asr #28
   13e44:	movw	r1, #15996	; 0x3e7c
   13e48:	movt	r1, #1
   13e4c:	b	24548 <flatcc_verify_union_table@@Base>
   13e50:	movw	r1, #17112	; 0x42d8
   13e54:	movt	r1, #1
   13e58:	b	24548 <flatcc_verify_union_table@@Base>
   13e5c:	movw	r1, #13632	; 0x3540
   13e60:	movt	r1, #1
   13e64:	b	24548 <flatcc_verify_union_table@@Base>
   13e68:	movw	r1, #14640	; 0x3930
   13e6c:	movt	r1, #1
   13e70:	b	24548 <flatcc_verify_union_table@@Base>
   13e74:	mov	r0, #0
   13e78:	bx	lr
   13e7c:	mov	r2, #0
   13e80:	movw	r3, #14520	; 0x38b8
   13e84:	movt	r3, #1
   13e88:	mov	r1, r2
   13e8c:	str	r4, [sp, #-8]!
   13e90:	mov	r4, r0
   13e94:	str	lr, [sp, #4]
   13e98:	bl	240c0 <flatcc_verify_table_field@@Base>
   13e9c:	cmp	r0, #0
   13ea0:	beq	13eb0 <_start@@Base+0x12a0>
   13ea4:	ldr	r4, [sp]
   13ea8:	add	sp, sp, #4
   13eac:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb0:	mov	r2, r0
   13eb4:	movw	r3, #16116	; 0x3ef4
   13eb8:	movt	r3, #1
   13ebc:	mov	r1, #1
   13ec0:	mov	r0, r4
   13ec4:	bl	240c0 <flatcc_verify_table_field@@Base>
   13ec8:	cmp	r0, #0
   13ecc:	bne	13ea4 <_start@@Base+0x1294>
   13ed0:	mov	r2, r0
   13ed4:	movw	r3, #15904	; 0x3e20
   13ed8:	movt	r3, #1
   13edc:	mov	r0, r4
   13ee0:	ldr	r4, [sp]
   13ee4:	mov	r1, #3
   13ee8:	ldr	lr, [sp, #4]
   13eec:	add	sp, sp, #8
   13ef0:	b	251c0 <flatcc_verify_union_vector_field@@Base>
   13ef4:	movw	r3, #16300	; 0x3fac
   13ef8:	movt	r3, #1
   13efc:	str	r4, [sp, #-8]!
   13f00:	mov	r2, #0
   13f04:	mov	r1, #1
   13f08:	str	lr, [sp, #4]
   13f0c:	mov	r4, r0
   13f10:	bl	2506c <flatcc_verify_union_field@@Base>
   13f14:	cmp	r0, #0
   13f18:	beq	13f28 <_start@@Base+0x1318>
   13f1c:	ldr	r4, [sp]
   13f20:	add	sp, sp, #4
   13f24:	pop	{pc}		; (ldr pc, [sp], #4)
   13f28:	mov	r2, r0
   13f2c:	movw	r3, #16300	; 0x3fac
   13f30:	movt	r3, #1
   13f34:	mov	r1, #3
   13f38:	mov	r0, r4
   13f3c:	bl	2506c <flatcc_verify_union_field@@Base>
   13f40:	cmp	r0, #0
   13f44:	bne	13f1c <_start@@Base+0x130c>
   13f48:	mov	r2, r0
   13f4c:	movw	r3, #16300	; 0x3fac
   13f50:	movt	r3, #1
   13f54:	mov	r1, #5
   13f58:	mov	r0, r4
   13f5c:	bl	2506c <flatcc_verify_union_field@@Base>
   13f60:	cmp	r0, #0
   13f64:	bne	13f1c <_start@@Base+0x130c>
   13f68:	mov	r2, r0
   13f6c:	movw	r3, #16300	; 0x3fac
   13f70:	movt	r3, #1
   13f74:	mov	r1, #7
   13f78:	mov	r0, r4
   13f7c:	bl	2506c <flatcc_verify_union_field@@Base>
   13f80:	cmp	r0, #0
   13f84:	bne	13f1c <_start@@Base+0x130c>
   13f88:	mov	r2, r0
   13f8c:	movw	r3, #16300	; 0x3fac
   13f90:	movt	r3, #1
   13f94:	mov	r0, r4
   13f98:	ldr	r4, [sp]
   13f9c:	mov	r1, #9
   13fa0:	ldr	lr, [sp, #4]
   13fa4:	add	sp, sp, #8
   13fa8:	b	251c0 <flatcc_verify_union_vector_field@@Base>
   13fac:	ldrb	r3, [r0, #12]
   13fb0:	mov	r2, r0
   13fb4:	cmp	r3, #10
   13fb8:	bhi	13fe0 <_start@@Base+0x13d0>
   13fbc:	cmp	r3, #9
   13fc0:	bcs	13ff8 <_start@@Base+0x13e8>
   13fc4:	cmp	r3, #2
   13fc8:	beq	1400c <_start@@Base+0x13fc>
   13fcc:	cmp	r3, #8
   13fd0:	bne	14004 <_start@@Base+0x13f4>
   13fd4:	mov	r2, #2
   13fd8:	mov	r1, r2
   13fdc:	b	24644 <flatcc_verify_union_struct@@Base>
   13fe0:	cmp	r3, #11
   13fe4:	beq	13ff0 <_start@@Base+0x13e0>
   13fe8:	cmp	r3, #255	; 0xff
   13fec:	bne	14004 <_start@@Base+0x13f4>
   13ff0:	mov	r0, r2
   13ff4:	b	246a4 <flatcc_verify_union_string@@Base>
   13ff8:	mov	r2, #4
   13ffc:	mov	r1, r2
   14000:	b	24644 <flatcc_verify_union_struct@@Base>
   14004:	mov	r0, #0
   14008:	bx	lr
   1400c:	movw	r1, #11528	; 0x2d08
   14010:	movt	r1, #1
   14014:	b	24548 <flatcc_verify_union_table@@Base>
   14018:	push	{lr}		; (str lr, [sp, #-4]!)
   1401c:	vpush	{d8-d9}
   14020:	vsub.f64	d8, d1, d0
   14024:	sub	sp, sp, #12
   14028:	vldr	d9, [pc, #352]	; 14190 <_start@@Base+0x1580>
   1402c:	str	r1, [sp, #4]
   14030:	mov	r1, r0
   14034:	movw	r0, #24388	; 0x5f44
   14038:	movt	r0, #2
   1403c:	bl	12974 <printf@plt>
   14040:	movw	r0, #24404	; 0x5f54
   14044:	movt	r0, #2
   14048:	vmov	r2, r3, d8
   1404c:	bl	12974 <printf@plt>
   14050:	movw	r1, #16960	; 0x4240
   14054:	movt	r1, #15
   14058:	movw	r0, #24428	; 0x5f6c
   1405c:	movt	r0, #2
   14060:	bl	12974 <printf@plt>
   14064:	movw	r0, #24444	; 0x5f7c
   14068:	movt	r0, #2
   1406c:	ldr	r1, [sp, #4]
   14070:	bl	12974 <printf@plt>
   14074:	vldr	s15, [sp, #4]
   14078:	movw	r0, #24464	; 0x5f90
   1407c:	movt	r0, #2
   14080:	vcvt.f64.u32	d7, s15
   14084:	vmul.f64	d7, d7, d9
   14088:	vdiv.f64	d6, d7, d9
   1408c:	vdiv.f64	d7, d6, d8
   14090:	vmov	r2, r3, d7
   14094:	bl	12974 <printf@plt>
   14098:	vdiv.f64	d7, d9, d8
   1409c:	movw	r0, #24488	; 0x5fa8
   140a0:	movt	r0, #2
   140a4:	vmov	r2, r3, d7
   140a8:	bl	12974 <printf@plt>
   140ac:	vldr	d7, [pc, #228]	; 14198 <_start@@Base+0x1588>
   140b0:	movw	r1, #24524	; 0x5fcc
   140b4:	movt	r1, #2
   140b8:	movw	r0, #24532	; 0x5fd4
   140bc:	movt	r0, #2
   140c0:	vdiv.f64	d7, d7, d8
   140c4:	vmov	r2, r3, d7
   140c8:	bl	12974 <printf@plt>
   140cc:	vldr	d6, [pc, #204]	; 141a0 <_start@@Base+0x1590>
   140d0:	vldr	d5, [pc, #208]	; 141a8 <_start@@Base+0x1598>
   140d4:	vmul.f64	d8, d8, d6
   140d8:	vdiv.f64	d7, d8, d9
   140dc:	vcmpe.f64	d7, d5
   140e0:	vmrs	APSR_nzcv, fpscr
   140e4:	bmi	14148 <_start@@Base+0x1538>
   140e8:	vcmpe.f64	d7, d9
   140ec:	vmrs	APSR_nzcv, fpscr
   140f0:	bmi	14124 <_start@@Base+0x1514>
   140f4:	vcmpe.f64	d7, d6
   140f8:	vmrs	APSR_nzcv, fpscr
   140fc:	bpl	14168 <_start@@Base+0x1558>
   14100:	vdiv.f64	d7, d7, d9
   14104:	movw	r0, #24616	; 0x6028
   14108:	movt	r0, #2
   1410c:	vmov	r2, r3, d7
   14110:	bl	12974 <printf@plt>
   14114:	mov	r0, #0
   14118:	add	sp, sp, #12
   1411c:	vpop	{d8-d9}
   14120:	pop	{pc}		; (ldr pc, [sp], #4)
   14124:	vdiv.f64	d7, d7, d5
   14128:	movw	r0, #24592	; 0x6010
   1412c:	movt	r0, #2
   14130:	vmov	r2, r3, d7
   14134:	bl	12974 <printf@plt>
   14138:	mov	r0, #0
   1413c:	add	sp, sp, #12
   14140:	vpop	{d8-d9}
   14144:	pop	{pc}		; (ldr pc, [sp], #4)
   14148:	vmov	r2, r3, d7
   1414c:	movw	r0, #24568	; 0x5ff8
   14150:	movt	r0, #2
   14154:	bl	12974 <printf@plt>
   14158:	mov	r0, #0
   1415c:	add	sp, sp, #12
   14160:	vpop	{d8-d9}
   14164:	pop	{pc}		; (ldr pc, [sp], #4)
   14168:	vdiv.f64	d7, d7, d6
   1416c:	movw	r0, #24640	; 0x6040
   14170:	movt	r0, #2
   14174:	vmov	r2, r3, d7
   14178:	bl	12974 <printf@plt>
   1417c:	mov	r0, #0
   14180:	add	sp, sp, #12
   14184:	vpop	{d8-d9}
   14188:	pop	{pc}		; (ldr pc, [sp], #4)
   1418c:	nop	{0}
   14190:	andeq	r0, r0, r0
   14194:	smlawbmi	lr, r0, r4, r8
   14198:	andeq	r0, r0, r0
   1419c:	svccc	0x00f00000	; IMB
   141a0:	andeq	r0, r0, r0
   141a4:	bicmi	ip, sp, r5, ror #26
   141a8:	andeq	r0, r0, r0
   141ac:	addmi	r4, pc, r0
   141b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   141b4:	mov	r4, #0
   141b8:	strd	r6, [sp, #8]
   141bc:	mov	r7, r2
   141c0:	sub	r6, r1, #1
   141c4:	mov	r2, r0
   141c8:	movw	r1, #23564	; 0x5c0c
   141cc:	movt	r1, #2
   141d0:	mov	r0, r7
   141d4:	strd	r8, [sp, #16]
   141d8:	str	sl, [sp, #24]
   141dc:	movw	r9, #23572	; 0x5c14
   141e0:	movt	r9, #2
   141e4:	str	lr, [sp, #28]
   141e8:	sub	sp, sp, #24
   141ec:	movw	sl, #23580	; 0x5c1c
   141f0:	movt	sl, #2
   141f4:	movw	r8, #23588	; 0x5c24
   141f8:	movt	r8, #2
   141fc:	bl	12a04 <fprintf@plt>
   14200:	ands	r5, r4, #15
   14204:	bne	142c0 <_start@@Base+0x16b0>
   14208:	cmp	r4, #0
   1420c:	add	r2, sp, #4
   14210:	mov	r1, r9
   14214:	mov	r0, r7
   14218:	beq	14220 <_start@@Base+0x1610>
   1421c:	bl	12a04 <fprintf@plt>
   14220:	mov	r2, r4
   14224:	mov	r1, sl
   14228:	mov	r0, r7
   1422c:	bl	12a04 <fprintf@plt>
   14230:	ldrb	r2, [r6, #1]!
   14234:	mov	r1, r8
   14238:	mov	r0, r7
   1423c:	bl	12a04 <fprintf@plt>
   14240:	add	r3, sp, #24
   14244:	mov	lr, #46	; 0x2e
   14248:	add	r2, r3, r5
   1424c:	mov	ip, #0
   14250:	mov	r5, r2
   14254:	add	r4, r4, #1
   14258:	ldrb	r3, [r6]
   1425c:	sub	r1, r3, #32
   14260:	cmp	r1, #94	; 0x5e
   14264:	bls	142a8 <_start@@Base+0x1698>
   14268:	cmp	r4, #48	; 0x30
   1426c:	strb	lr, [r2, #-20]	; 0xffffffec
   14270:	strb	ip, [r2, #-19]	; 0xffffffed
   14274:	bne	14200 <_start@@Base+0x15f0>
   14278:	add	r2, sp, #4
   1427c:	mov	r0, r7
   14280:	movw	r1, #23572	; 0x5c14
   14284:	movt	r1, #2
   14288:	bl	12a04 <fprintf@plt>
   1428c:	add	sp, sp, #24
   14290:	ldrd	r4, [sp]
   14294:	ldrd	r6, [sp, #8]
   14298:	ldrd	r8, [sp, #16]
   1429c:	ldr	sl, [sp, #24]
   142a0:	add	sp, sp, #28
   142a4:	pop	{pc}		; (ldr pc, [sp], #4)
   142a8:	cmp	r4, #48	; 0x30
   142ac:	strb	r3, [r2, #-20]	; 0xffffffec
   142b0:	strb	ip, [r5, #-19]	; 0xffffffed
   142b4:	beq	14278 <_start@@Base+0x1668>
   142b8:	ands	r5, r4, #15
   142bc:	beq	14208 <_start@@Base+0x15f8>
   142c0:	tst	r4, #7
   142c4:	bne	14230 <_start@@Base+0x1620>
   142c8:	mov	r1, r7
   142cc:	mov	r0, #32
   142d0:	bl	12a40 <fputc@plt>
   142d4:	b	14230 <_start@@Base+0x1620>
   142d8:	mov	r0, #0
   142dc:	bx	lr
   142e0:	mov	r3, #8
   142e4:	mov	r1, #0
   142e8:	str	r4, [sp, #-8]!
   142ec:	mov	r2, r3
   142f0:	mov	r4, r0
   142f4:	str	lr, [sp, #4]
   142f8:	bl	23c8c <flatcc_verify_field@@Base>
   142fc:	cmp	r0, #0
   14300:	beq	14310 <_start@@Base+0x1700>
   14304:	ldr	r4, [sp]
   14308:	add	sp, sp, #4
   1430c:	pop	{pc}		; (ldr pc, [sp], #4)
   14310:	mov	r3, #4
   14314:	mov	r0, r4
   14318:	ldr	r4, [sp]
   1431c:	mov	r2, r3
   14320:	mov	r1, #1
   14324:	ldr	lr, [sp, #4]
   14328:	add	sp, sp, #8
   1432c:	b	23c8c <flatcc_verify_field@@Base>
   14330:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14334:	strd	r6, [sp, #8]
   14338:	subs	r6, r0, #0
   1433c:	strd	r8, [sp, #16]
   14340:	str	sl, [sp, #24]
   14344:	str	lr, [sp, #28]
   14348:	beq	144e4 <_start@@Base+0x18d4>
   1434c:	ldr	r7, [r6, #-4]
   14350:	cmp	r7, #0
   14354:	beq	14524 <_start@@Base+0x1914>
   14358:	ldr	r3, [r6]
   1435c:	mov	r8, r1
   14360:	adds	r1, r6, r3
   14364:	beq	14508 <_start@@Base+0x18f8>
   14368:	ldr	r3, [r6, r3]
   1436c:	sub	r3, r1, r3
   14370:	ldrh	r2, [r3]
   14374:	cmp	r2, #11
   14378:	bls	144ec <_start@@Base+0x18dc>
   1437c:	ldrh	r0, [r3, #10]
   14380:	cmp	r0, #0
   14384:	beq	144ec <_start@@Base+0x18dc>
   14388:	add	r5, r6, #4
   1438c:	mov	r4, #0
   14390:	b	143d4 <_start@@Base+0x17c4>
   14394:	cmp	r7, r3
   14398:	beq	144e4 <_start@@Base+0x18d4>
   1439c:	mov	r2, r5
   143a0:	add	r5, r5, #4
   143a4:	ldr	r0, [r2]
   143a8:	adds	r1, r2, r0
   143ac:	beq	14508 <_start@@Base+0x18f8>
   143b0:	ldr	r2, [r2, r0]
   143b4:	sub	r2, r1, r2
   143b8:	ldrh	r0, [r2]
   143bc:	cmp	r0, #11
   143c0:	bls	144ec <_start@@Base+0x18dc>
   143c4:	ldrh	r0, [r2, #10]
   143c8:	mov	r4, r3
   143cc:	cmp	r0, #0
   143d0:	beq	144ec <_start@@Base+0x18dc>
   143d4:	ldr	r3, [r1, r0]
   143d8:	add	r0, r1, r0
   143dc:	mov	r1, r8
   143e0:	add	r3, r3, #4
   143e4:	add	r0, r0, r3
   143e8:	bl	12968 <strcmp@plt>
   143ec:	cmp	r0, #0
   143f0:	add	r3, r4, #1
   143f4:	bne	14394 <_start@@Base+0x1784>
   143f8:	mov	r9, r0
   143fc:	cmp	r3, r7
   14400:	mov	r4, r3
   14404:	add	r9, r9, #1
   14408:	bcs	144c8 <_start@@Base+0x18b8>
   1440c:	ldr	r2, [r6, r3, lsl #2]
   14410:	lsl	r5, r3, #2
   14414:	add	r1, r6, r5
   14418:	adds	r3, r1, r2
   1441c:	beq	14508 <_start@@Base+0x18f8>
   14420:	ldr	r2, [r1, r2]
   14424:	sub	r2, r3, r2
   14428:	ldrh	r1, [r2]
   1442c:	cmp	r1, #11
   14430:	bls	144ec <_start@@Base+0x18dc>
   14434:	ldrh	r0, [r2, #10]
   14438:	cmp	r0, #0
   1443c:	beq	144ec <_start@@Base+0x18dc>
   14440:	add	r5, r5, #4
   14444:	add	r5, r6, r5
   14448:	b	1448c <_start@@Base+0x187c>
   1444c:	add	r4, r4, #1
   14450:	cmp	r7, r4
   14454:	bls	144c8 <_start@@Base+0x18b8>
   14458:	mov	r2, r5
   1445c:	add	r5, r5, #4
   14460:	ldr	r1, [r2]
   14464:	adds	r3, r2, r1
   14468:	beq	14508 <_start@@Base+0x18f8>
   1446c:	ldr	r2, [r2, r1]
   14470:	sub	r2, r3, r2
   14474:	ldrh	r1, [r2]
   14478:	cmp	r1, #11
   1447c:	bls	144ec <_start@@Base+0x18dc>
   14480:	ldrh	r0, [r2, #10]
   14484:	cmp	r0, #0
   14488:	beq	144ec <_start@@Base+0x18dc>
   1448c:	ldr	r2, [r3, r0]
   14490:	add	r0, r3, r0
   14494:	mov	r1, r8
   14498:	add	r2, r2, #4
   1449c:	add	r0, r0, r2
   144a0:	bl	12968 <strcmp@plt>
   144a4:	cmp	r0, #0
   144a8:	bne	1444c <_start@@Base+0x183c>
   144ac:	cmn	r4, #1
   144b0:	beq	144c8 <_start@@Base+0x18b8>
   144b4:	add	r3, r4, #1
   144b8:	add	r9, r9, #1
   144bc:	cmp	r3, r7
   144c0:	mov	r4, r3
   144c4:	bcc	1440c <_start@@Base+0x17fc>
   144c8:	mov	r0, r9
   144cc:	ldrd	r4, [sp]
   144d0:	ldrd	r6, [sp, #8]
   144d4:	ldrd	r8, [sp, #16]
   144d8:	ldr	sl, [sp, #24]
   144dc:	add	sp, sp, #28
   144e0:	pop	{pc}		; (ldr pc, [sp], #4)
   144e4:	mov	r9, #0
   144e8:	b	144c8 <_start@@Base+0x18b8>
   144ec:	movw	r1, #23600	; 0x5c30
   144f0:	movt	r1, #2
   144f4:	ldr	r3, [pc, #48]	; 1452c <_start@@Base+0x191c>
   144f8:	movw	r0, #23900	; 0x5d5c
   144fc:	movt	r0, #2
   14500:	movw	r2, #699	; 0x2bb
   14504:	bl	12a64 <__assert_fail@plt>
   14508:	movw	r1, #23600	; 0x5c30
   1450c:	movt	r1, #2
   14510:	ldr	r3, [pc, #20]	; 1452c <_start@@Base+0x191c>
   14514:	movw	r0, #23700	; 0x5c94
   14518:	movt	r0, #2
   1451c:	movw	r2, #699	; 0x2bb
   14520:	bl	12a64 <__assert_fail@plt>
   14524:	mov	r9, r7
   14528:	b	144c8 <_start@@Base+0x18b8>
   1452c:	andeq	r5, r2, r4, ror #13
   14530:	cmp	r0, #0
   14534:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14538:	strd	r6, [sp, #8]
   1453c:	str	r8, [sp, #16]
   14540:	str	lr, [sp, #20]
   14544:	beq	145ec <_start@@Base+0x19dc>
   14548:	ldr	r6, [r0, #-4]
   1454c:	mov	r5, r3
   14550:	mov	r4, r1
   14554:	cmp	r2, r6
   14558:	movcc	r3, r2
   1455c:	movcs	r3, r6
   14560:	sub	r7, r3, #-1073741823	; 0xc0000001
   14564:	add	r7, r0, r7, lsl #2
   14568:	cmp	r3, r4
   1456c:	sub	r8, r3, #1
   14570:	bls	145ec <_start@@Base+0x19dc>
   14574:	cmp	r8, r6
   14578:	mov	r2, r7
   1457c:	bcs	1462c <_start@@Base+0x1a1c>
   14580:	ldr	r3, [r2]
   14584:	sub	r7, r7, #4
   14588:	adds	r0, r2, r3
   1458c:	beq	14610 <_start@@Base+0x1a00>
   14590:	ldr	r2, [r2, r3]
   14594:	sub	r2, r0, r2
   14598:	ldrh	r3, [r2]
   1459c:	cmp	r3, #11
   145a0:	bls	145f4 <_start@@Base+0x19e4>
   145a4:	ldrh	r2, [r2, #10]
   145a8:	cmp	r2, #0
   145ac:	beq	145f4 <_start@@Base+0x19e4>
   145b0:	ldr	r3, [r0, r2]
   145b4:	add	r0, r0, r2
   145b8:	mov	r1, r5
   145bc:	add	r3, r3, #4
   145c0:	add	r0, r0, r3
   145c4:	bl	12968 <strcmp@plt>
   145c8:	cmp	r0, #0
   145cc:	mov	r3, r8
   145d0:	bne	14568 <_start@@Base+0x1958>
   145d4:	mov	r0, r8
   145d8:	ldrd	r4, [sp]
   145dc:	ldrd	r6, [sp, #8]
   145e0:	ldr	r8, [sp, #16]
   145e4:	add	sp, sp, #20
   145e8:	pop	{pc}		; (ldr pc, [sp], #4)
   145ec:	mvn	r8, #0
   145f0:	b	145d4 <_start@@Base+0x19c4>
   145f4:	movw	r1, #23600	; 0x5c30
   145f8:	movt	r1, #2
   145fc:	ldr	r3, [pc, #68]	; 14648 <_start@@Base+0x1a38>
   14600:	movw	r0, #23900	; 0x5d5c
   14604:	movt	r0, #2
   14608:	movw	r2, #699	; 0x2bb
   1460c:	bl	12a64 <__assert_fail@plt>
   14610:	movw	r1, #23600	; 0x5c30
   14614:	movt	r1, #2
   14618:	ldr	r3, [pc, #40]	; 14648 <_start@@Base+0x1a38>
   1461c:	movw	r0, #23700	; 0x5c94
   14620:	movt	r0, #2
   14624:	movw	r2, #699	; 0x2bb
   14628:	bl	12a64 <__assert_fail@plt>
   1462c:	movw	r1, #23600	; 0x5c30
   14630:	movt	r1, #2
   14634:	ldr	r3, [pc, #16]	; 1464c <_start@@Base+0x1a3c>
   14638:	movw	r0, #23844	; 0x5d24
   1463c:	movt	r0, #2
   14640:	movw	r2, #693	; 0x2b5
   14644:	bl	12a64 <__assert_fail@plt>
   14648:	andeq	r5, r2, r4, ror #13
   1464c:	andeq	r5, r2, r4, lsl #13
   14650:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14654:	subs	r5, r0, #0
   14658:	strd	r6, [sp, #8]
   1465c:	str	r8, [sp, #16]
   14660:	str	lr, [sp, #20]
   14664:	beq	14720 <_start@@Base+0x1b10>
   14668:	ldr	r7, [r5, #-4]
   1466c:	mov	r4, r1
   14670:	cmp	r2, r7
   14674:	movcc	r6, r2
   14678:	movcs	r6, r7
   1467c:	cmp	r1, r6
   14680:	bcs	14720 <_start@@Base+0x1b10>
   14684:	cmp	r1, r7
   14688:	add	r1, r5, r1, lsl #2
   1468c:	bcs	14744 <_start@@Base+0x1b34>
   14690:	mov	r8, r3
   14694:	ldr	r3, [r5, r4, lsl #2]
   14698:	adds	r2, r1, r3
   1469c:	bne	146c8 <_start@@Base+0x1ab8>
   146a0:	b	14760 <_start@@Base+0x1b50>
   146a4:	add	r4, r4, #1
   146a8:	cmp	r4, r6
   146ac:	bcs	14720 <_start@@Base+0x1b10>
   146b0:	cmp	r4, r7
   146b4:	add	r1, r5, r4, lsl #2
   146b8:	bcs	14744 <_start@@Base+0x1b34>
   146bc:	ldr	r3, [r5, r4, lsl #2]
   146c0:	adds	r2, r1, r3
   146c4:	beq	14760 <_start@@Base+0x1b50>
   146c8:	ldr	r3, [r1, r3]
   146cc:	sub	r3, r2, r3
   146d0:	ldrh	r1, [r3]
   146d4:	cmp	r1, #11
   146d8:	bls	14728 <_start@@Base+0x1b18>
   146dc:	ldrh	r0, [r3, #10]
   146e0:	cmp	r0, #0
   146e4:	beq	14728 <_start@@Base+0x1b18>
   146e8:	ldr	r3, [r2, r0]
   146ec:	add	r0, r2, r0
   146f0:	mov	r1, r8
   146f4:	add	r3, r3, #4
   146f8:	add	r0, r0, r3
   146fc:	bl	12968 <strcmp@plt>
   14700:	cmp	r0, #0
   14704:	bne	146a4 <_start@@Base+0x1a94>
   14708:	mov	r0, r4
   1470c:	ldrd	r4, [sp]
   14710:	ldrd	r6, [sp, #8]
   14714:	ldr	r8, [sp, #16]
   14718:	add	sp, sp, #20
   1471c:	pop	{pc}		; (ldr pc, [sp], #4)
   14720:	mvn	r0, #0
   14724:	b	1470c <_start@@Base+0x1afc>
   14728:	movw	r1, #23600	; 0x5c30
   1472c:	movt	r1, #2
   14730:	ldr	r3, [pc, #68]	; 1477c <_start@@Base+0x1b6c>
   14734:	movw	r0, #23900	; 0x5d5c
   14738:	movt	r0, #2
   1473c:	movw	r2, #699	; 0x2bb
   14740:	bl	12a64 <__assert_fail@plt>
   14744:	movw	r1, #23600	; 0x5c30
   14748:	movt	r1, #2
   1474c:	ldr	r3, [pc, #44]	; 14780 <_start@@Base+0x1b70>
   14750:	movw	r0, #23844	; 0x5d24
   14754:	movt	r0, #2
   14758:	movw	r2, #693	; 0x2b5
   1475c:	bl	12a64 <__assert_fail@plt>
   14760:	movw	r1, #23600	; 0x5c30
   14764:	movt	r1, #2
   14768:	ldr	r3, [pc, #12]	; 1477c <_start@@Base+0x1b6c>
   1476c:	movw	r0, #23700	; 0x5c94
   14770:	movt	r0, #2
   14774:	movw	r2, #699	; 0x2bb
   14778:	bl	12a64 <__assert_fail@plt>
   1477c:	andeq	r5, r2, r4, ror #13
   14780:	andeq	r5, r2, r4, lsl #13
   14784:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14788:	strd	r6, [sp, #8]
   1478c:	strd	r8, [sp, #16]
   14790:	subs	r9, r0, #0
   14794:	str	sl, [sp, #24]
   14798:	str	lr, [sp, #28]
   1479c:	beq	148c8 <_start@@Base+0x1cb8>
   147a0:	ldr	r6, [r9, #-4]
   147a4:	cmp	r6, #0
   147a8:	beq	148c8 <_start@@Base+0x1cb8>
   147ac:	subs	r8, r6, #1
   147b0:	mov	r7, r1
   147b4:	beq	148e8 <_start@@Base+0x1cd8>
   147b8:	lsr	r4, r8, #1
   147bc:	cmp	r6, r4
   147c0:	add	r2, r9, r4, lsl #2
   147c4:	bls	14964 <_start@@Base+0x1d54>
   147c8:	ldr	r3, [r9, r4, lsl #2]
   147cc:	adds	r1, r2, r3
   147d0:	beq	14948 <_start@@Base+0x1d38>
   147d4:	ldr	r2, [r2, r3]
   147d8:	sub	r2, r1, r2
   147dc:	ldrh	r3, [r2]
   147e0:	cmp	r3, #11
   147e4:	movhi	r5, #0
   147e8:	bhi	14834 <_start@@Base+0x1c24>
   147ec:	b	148a0 <_start@@Base+0x1c90>
   147f0:	cmp	r4, r5
   147f4:	bls	148c0 <_start@@Base+0x1cb0>
   147f8:	sub	r3, r4, r5
   147fc:	add	r3, r5, r3, lsr #1
   14800:	cmp	r3, r6
   14804:	add	r0, r9, r3, lsl #2
   14808:	bcs	14964 <_start@@Base+0x1d54>
   1480c:	ldr	r2, [r9, r3, lsl #2]
   14810:	adds	r1, r0, r2
   14814:	beq	14948 <_start@@Base+0x1d38>
   14818:	ldr	r2, [r0, r2]
   1481c:	mov	r8, r4
   14820:	sub	r2, r1, r2
   14824:	ldrh	r0, [r2]
   14828:	cmp	r0, #11
   1482c:	bls	148a0 <_start@@Base+0x1c90>
   14830:	mov	r4, r3
   14834:	ldrh	r0, [r2, #10]
   14838:	cmp	r0, #0
   1483c:	beq	148a0 <_start@@Base+0x1c90>
   14840:	ldr	r3, [r1, r0]
   14844:	add	r0, r1, r0
   14848:	mov	r1, r7
   1484c:	add	r3, r3, #4
   14850:	add	r0, r0, r3
   14854:	bl	12968 <strcmp@plt>
   14858:	cmp	r0, #0
   1485c:	bge	147f0 <_start@@Base+0x1be0>
   14860:	add	r5, r4, #1
   14864:	cmp	r5, r8
   14868:	bcs	148bc <_start@@Base+0x1cac>
   1486c:	sub	r4, r8, r5
   14870:	add	r4, r5, r4, lsr #1
   14874:	cmp	r6, r4
   14878:	add	r2, r9, r4, lsl #2
   1487c:	bls	14964 <_start@@Base+0x1d54>
   14880:	ldr	r3, [r9, r4, lsl #2]
   14884:	adds	r1, r2, r3
   14888:	beq	14948 <_start@@Base+0x1d38>
   1488c:	ldr	r2, [r2, r3]
   14890:	sub	r2, r1, r2
   14894:	ldrh	r3, [r2]
   14898:	cmp	r3, #11
   1489c:	bhi	14834 <_start@@Base+0x1c24>
   148a0:	movw	r1, #23600	; 0x5c30
   148a4:	movt	r1, #2
   148a8:	ldr	r3, [pc, #216]	; 14988 <_start@@Base+0x1d78>
   148ac:	movw	r0, #23900	; 0x5d5c
   148b0:	movt	r0, #2
   148b4:	movw	r2, #699	; 0x2bb
   148b8:	bl	12a64 <__assert_fail@plt>
   148bc:	mov	r4, r8
   148c0:	cmp	r4, r5
   148c4:	beq	148ec <_start@@Base+0x1cdc>
   148c8:	mvn	r5, #0
   148cc:	mov	r0, r5
   148d0:	ldrd	r4, [sp]
   148d4:	ldrd	r6, [sp, #8]
   148d8:	ldrd	r8, [sp, #16]
   148dc:	ldr	sl, [sp, #24]
   148e0:	add	sp, sp, #28
   148e4:	pop	{pc}		; (ldr pc, [sp], #4)
   148e8:	mov	r5, r8
   148ec:	cmp	r6, r5
   148f0:	add	r1, r9, r5, lsl #2
   148f4:	bls	14984 <_start@@Base+0x1d74>
   148f8:	ldr	r2, [r9, r5, lsl #2]
   148fc:	adds	r3, r1, r2
   14900:	beq	14980 <_start@@Base+0x1d70>
   14904:	ldr	r2, [r1, r2]
   14908:	sub	r2, r3, r2
   1490c:	ldrh	r1, [r2]
   14910:	cmp	r1, #11
   14914:	bls	148a0 <_start@@Base+0x1c90>
   14918:	ldrh	r2, [r2, #10]
   1491c:	cmp	r2, #0
   14920:	beq	148a0 <_start@@Base+0x1c90>
   14924:	ldr	r0, [r3, r2]
   14928:	add	r3, r3, r2
   1492c:	mov	r1, r7
   14930:	add	r0, r0, #4
   14934:	add	r0, r3, r0
   14938:	bl	12968 <strcmp@plt>
   1493c:	cmp	r0, #0
   14940:	bne	148c8 <_start@@Base+0x1cb8>
   14944:	b	148cc <_start@@Base+0x1cbc>
   14948:	movw	r1, #23600	; 0x5c30
   1494c:	movt	r1, #2
   14950:	ldr	r3, [pc, #48]	; 14988 <_start@@Base+0x1d78>
   14954:	movw	r0, #23700	; 0x5c94
   14958:	movt	r0, #2
   1495c:	movw	r2, #699	; 0x2bb
   14960:	bl	12a64 <__assert_fail@plt>
   14964:	movw	r1, #23600	; 0x5c30
   14968:	movt	r1, #2
   1496c:	ldr	r3, [pc, #24]	; 1498c <_start@@Base+0x1d7c>
   14970:	movw	r0, #23844	; 0x5d24
   14974:	movt	r0, #2
   14978:	movw	r2, #693	; 0x2b5
   1497c:	bl	12a64 <__assert_fail@plt>
   14980:	bl	131b0 <_start@@Base+0x5a0>
   14984:	bl	130ac <_start@@Base+0x49c>
   14988:	andeq	r5, r2, r4, ror #13
   1498c:	andeq	r5, r2, r4, lsl #13

00014990 <verify_empty_monster@@Base>:
   14990:	cmp	r0, #0
   14994:	str	r4, [sp, #-8]!
   14998:	str	lr, [sp, #4]
   1499c:	beq	149bc <verify_empty_monster@@Base+0x2c>
   149a0:	ldr	r3, [r0]
   149a4:	movw	r2, #20301	; 0x4f4d
   149a8:	movt	r2, #21326	; 0x534e
   149ac:	ldr	r1, [r0, #4]
   149b0:	cmp	r1, r2
   149b4:	add	r1, r0, r3
   149b8:	beq	149d8 <verify_empty_monster@@Base+0x48>
   149bc:	movw	r0, #24664	; 0x6058
   149c0:	movt	r0, #2
   149c4:	bl	129c8 <puts@plt>
   149c8:	mvn	r0, #0
   149cc:	ldr	r4, [sp]
   149d0:	add	sp, sp, #4
   149d4:	pop	{pc}		; (ldr pc, [sp], #4)
   149d8:	cmp	r1, #0
   149dc:	beq	149bc <verify_empty_monster@@Base+0x2c>
   149e0:	ldr	r3, [r0, r3]
   149e4:	sub	r3, r1, r3
   149e8:	ldrh	r2, [r3]
   149ec:	cmp	r2, #9
   149f0:	bls	14a20 <verify_empty_monster@@Base+0x90>
   149f4:	ldrh	r2, [r3, #8]
   149f8:	cmp	r2, #0
   149fc:	beq	14a2c <verify_empty_monster@@Base+0x9c>
   14a00:	ldrsh	r3, [r1, r2]
   14a04:	cmp	r3, #100	; 0x64
   14a08:	bne	14a4c <verify_empty_monster@@Base+0xbc>
   14a0c:	movw	r0, #24752	; 0x60b0
   14a10:	movt	r0, #2
   14a14:	bl	129c8 <puts@plt>
   14a18:	mvn	r0, #0
   14a1c:	b	149cc <verify_empty_monster@@Base+0x3c>
   14a20:	cmp	r2, #5
   14a24:	movls	r0, #0
   14a28:	bls	149cc <verify_empty_monster@@Base+0x3c>
   14a2c:	ldrh	r0, [r3, #4]
   14a30:	cmp	r0, #0
   14a34:	beq	149cc <verify_empty_monster@@Base+0x3c>
   14a38:	movw	r0, #24724	; 0x6094
   14a3c:	movt	r0, #2
   14a40:	bl	129c8 <puts@plt>
   14a44:	mvn	r0, #0
   14a48:	b	149cc <verify_empty_monster@@Base+0x3c>
   14a4c:	movw	r0, #24688	; 0x6070
   14a50:	movt	r0, #2
   14a54:	bl	129c8 <puts@plt>
   14a58:	mvn	r0, #0
   14a5c:	b	149cc <verify_empty_monster@@Base+0x3c>

00014a60 <test_enums@@Base>:
   14a60:	mov	r0, #0
   14a64:	bx	lr

00014a68 <test_type_aliases@@Base>:
   14a68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a6c:	mov	r4, r0
   14a70:	mov	r5, #8
   14a74:	strd	r6, [sp, #8]
   14a78:	mvn	r6, #0
   14a7c:	strd	r8, [sp, #16]
   14a80:	strd	sl, [sp, #24]
   14a84:	str	lr, [sp, #32]
   14a88:	sub	sp, sp, #20
   14a8c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   14a90:	mov	ip, #1
   14a94:	mov	r2, #0
   14a98:	mov	r3, ip
   14a9c:	mov	r1, r2
   14aa0:	mov	r0, r4
   14aa4:	str	ip, [sp]
   14aa8:	str	r6, [sp, #4]
   14aac:	bl	211e8 <flatcc_builder_create_vector@@Base>
   14ab0:	mvn	ip, #-536870912	; 0xe0000000
   14ab4:	mov	r2, #0
   14ab8:	mov	r1, r2
   14abc:	mov	r3, r5
   14ac0:	mov	r8, r0
   14ac4:	mov	r0, r4
   14ac8:	stm	sp, {r5, ip}
   14acc:	bl	211e8 <flatcc_builder_create_vector@@Base>
   14ad0:	mov	r3, #0
   14ad4:	mov	r9, r0
   14ad8:	mov	r2, r3
   14adc:	mov	r0, r4
   14ae0:	movw	r1, #24784	; 0x60d0
   14ae4:	movt	r1, #2
   14ae8:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   14aec:	subs	r7, r0, #0
   14af0:	beq	14d50 <test_type_aliases@@Base+0x2e8>
   14af4:	mov	r0, r4
   14af8:	add	r1, sp, #12
   14afc:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   14b00:	movw	r3, #13768	; 0x35c8
   14b04:	movt	r3, #1
   14b08:	ldr	r1, [sp, #12]
   14b0c:	movw	r2, #24784	; 0x60d0
   14b10:	movt	r2, #2
   14b14:	mov	r4, r0
   14b18:	bl	24998 <flatcc_verify_table_as_root@@Base>
   14b1c:	subs	r5, r0, #0
   14b20:	bne	14f4c <test_type_aliases@@Base+0x4e4>
   14b24:	cmp	r4, #0
   14b28:	beq	14b40 <test_type_aliases@@Base+0xd8>
   14b2c:	ldr	r2, [r4, #4]
   14b30:	movw	r3, #20301	; 0x4f4d
   14b34:	movt	r3, #21326	; 0x534e
   14b38:	cmp	r2, r3
   14b3c:	beq	14b5c <test_type_aliases@@Base+0xf4>
   14b40:	movw	r1, #23600	; 0x5c30
   14b44:	movt	r1, #2
   14b48:	ldr	r3, [pc, #1124]	; 14fb4 <test_type_aliases@@Base+0x54c>
   14b4c:	movw	r0, #23700	; 0x5c94
   14b50:	movt	r0, #2
   14b54:	movw	r2, #749	; 0x2ed
   14b58:	bl	12a64 <__assert_fail@plt>
   14b5c:	ldr	r2, [r4]
   14b60:	adds	r0, r4, r2
   14b64:	beq	14b40 <test_type_aliases@@Base+0xd8>
   14b68:	ldr	r3, [r4, r2]
   14b6c:	sub	r3, r0, r3
   14b70:	ldrh	r2, [r3]
   14b74:	cmp	r2, #5
   14b78:	bhi	14bb4 <test_type_aliases@@Base+0x14c>
   14b7c:	movw	r0, #25032	; 0x61c8
   14b80:	movt	r0, #2
   14b84:	mvn	r5, #0
   14b88:	bl	129c8 <puts@plt>
   14b8c:	mov	r0, r4
   14b90:	bl	23658 <flatcc_builder_aligned_free@@Base>
   14b94:	mov	r0, r5
   14b98:	add	sp, sp, #20
   14b9c:	ldrd	r4, [sp]
   14ba0:	ldrd	r6, [sp, #8]
   14ba4:	ldrd	r8, [sp, #16]
   14ba8:	ldrd	sl, [sp, #24]
   14bac:	add	sp, sp, #32
   14bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bb4:	ldrh	r1, [r3, #4]
   14bb8:	cmp	r1, #0
   14bbc:	beq	14b7c <test_type_aliases@@Base+0x114>
   14bc0:	ldrsb	ip, [r0, r1]
   14bc4:	cmp	r2, #9
   14bc8:	movls	r1, #0
   14bcc:	movhi	r1, #1
   14bd0:	cmn	ip, #128	; 0x80
   14bd4:	movne	r1, #0
   14bd8:	cmp	r1, #0
   14bdc:	beq	14b7c <test_type_aliases@@Base+0x114>
   14be0:	ldrh	r1, [r3, #8]
   14be4:	cmp	r1, #0
   14be8:	beq	14b7c <test_type_aliases@@Base+0x114>
   14bec:	ldrsh	ip, [r0, r1]
   14bf0:	cmp	r2, #13
   14bf4:	movls	r1, #0
   14bf8:	movhi	r1, #1
   14bfc:	cmn	ip, #32768	; 0x8000
   14c00:	movne	r1, #0
   14c04:	cmp	r1, #0
   14c08:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c0c:	ldrh	r1, [r3, #12]
   14c10:	cmp	r1, #0
   14c14:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c18:	ldr	ip, [r0, r1]
   14c1c:	cmp	r2, #17
   14c20:	sub	r1, ip, #-2147483648	; 0x80000000
   14c24:	clz	r1, r1
   14c28:	lsr	r1, r1, #5
   14c2c:	movls	r1, #0
   14c30:	cmp	r1, #0
   14c34:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c38:	ldrh	r1, [r3, #16]
   14c3c:	cmp	r1, #0
   14c40:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c44:	ldrd	r6, [r0, r1]
   14c48:	cmp	r7, #-2147483648	; 0x80000000
   14c4c:	cmpeq	r6, #0
   14c50:	bne	14b7c <test_type_aliases@@Base+0x114>
   14c54:	ldrh	r1, [r3, #6]
   14c58:	cmp	r1, #0
   14c5c:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c60:	ldrb	r1, [r0, r1]
   14c64:	cmp	r1, #255	; 0xff
   14c68:	bne	14b7c <test_type_aliases@@Base+0x114>
   14c6c:	ldrh	r1, [r3, #10]
   14c70:	cmp	r1, #0
   14c74:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c78:	ldrh	ip, [r0, r1]
   14c7c:	movw	r1, #65535	; 0xffff
   14c80:	cmp	ip, r1
   14c84:	bne	14b7c <test_type_aliases@@Base+0x114>
   14c88:	ldrh	r1, [r3, #14]
   14c8c:	cmp	r1, #0
   14c90:	beq	14b7c <test_type_aliases@@Base+0x114>
   14c94:	ldr	ip, [r0, r1]
   14c98:	cmp	r2, #19
   14c9c:	movls	r1, #0
   14ca0:	movhi	r1, #1
   14ca4:	cmn	ip, #1
   14ca8:	movne	r1, #0
   14cac:	cmp	r1, #0
   14cb0:	beq	14b7c <test_type_aliases@@Base+0x114>
   14cb4:	ldrh	r1, [r3, #18]
   14cb8:	cmp	r1, #0
   14cbc:	beq	14b7c <test_type_aliases@@Base+0x114>
   14cc0:	mov	ip, r0
   14cc4:	cmp	r2, #21
   14cc8:	ldr	r1, [ip, r1]!
   14ccc:	ldr	ip, [ip, #4]
   14cd0:	and	r1, r1, ip
   14cd4:	movls	ip, #0
   14cd8:	movhi	ip, #1
   14cdc:	cmn	r1, #1
   14ce0:	movne	ip, #0
   14ce4:	cmp	ip, #0
   14ce8:	beq	14b7c <test_type_aliases@@Base+0x114>
   14cec:	ldrh	r1, [r3, #20]
   14cf0:	cmp	r1, #0
   14cf4:	beq	14b7c <test_type_aliases@@Base+0x114>
   14cf8:	add	r1, r0, r1
   14cfc:	vldr	s15, [pc, #684]	; 14fb0 <test_type_aliases@@Base+0x548>
   14d00:	vldr	s14, [r1]
   14d04:	vcmp.f32	s14, s15
   14d08:	vmrs	APSR_nzcv, fpscr
   14d0c:	moveq	r1, #1
   14d10:	movne	r1, #0
   14d14:	cmp	r2, #23
   14d18:	movls	r2, #0
   14d1c:	andhi	r2, r1, #1
   14d20:	cmp	r2, #0
   14d24:	beq	14b7c <test_type_aliases@@Base+0x114>
   14d28:	ldrh	r3, [r3, #22]
   14d2c:	cmp	r3, #0
   14d30:	beq	14b7c <test_type_aliases@@Base+0x114>
   14d34:	add	r3, r0, r3
   14d38:	vldr	d7, [pc, #616]	; 14fa8 <test_type_aliases@@Base+0x540>
   14d3c:	vldr	d6, [r3]
   14d40:	vcmp.f64	d6, d7
   14d44:	vmrs	APSR_nzcv, fpscr
   14d48:	beq	14b8c <test_type_aliases@@Base+0x124>
   14d4c:	b	14b7c <test_type_aliases@@Base+0x114>
   14d50:	mov	r1, #12
   14d54:	mov	r0, r4
   14d58:	bl	206a8 <flatcc_builder_start_table@@Base>
   14d5c:	cmp	r0, #0
   14d60:	bne	14f3c <test_type_aliases@@Base+0x4d4>
   14d64:	mov	r3, r5
   14d68:	mov	r2, r5
   14d6c:	mov	r1, #6
   14d70:	mov	r0, r4
   14d74:	bl	22a20 <flatcc_builder_table_add@@Base>
   14d78:	cmp	r0, #0
   14d7c:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14d80:	mov	sl, #0
   14d84:	mov	fp, #-2147483648	; 0x80000000
   14d88:	mov	r3, r5
   14d8c:	mov	r2, r5
   14d90:	mov	r1, #7
   14d94:	strd	sl, [r0]
   14d98:	mov	r0, r4
   14d9c:	bl	22a20 <flatcc_builder_table_add@@Base>
   14da0:	cmp	r0, #0
   14da4:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14da8:	mvn	sl, #0
   14dac:	mvn	fp, #0
   14db0:	mov	r3, r5
   14db4:	mov	r2, r5
   14db8:	mov	r1, #9
   14dbc:	strd	sl, [r0]
   14dc0:	mov	r0, r4
   14dc4:	bl	22a20 <flatcc_builder_table_add@@Base>
   14dc8:	subs	ip, r0, #0
   14dcc:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14dd0:	movw	sl, #26214	; 0x6666
   14dd4:	movt	sl, #26214	; 0x6666
   14dd8:	movw	fp, #26214	; 0x6666
   14ddc:	movt	fp, #16386	; 0x4002
   14de0:	mov	r3, #4
   14de4:	mov	r0, r4
   14de8:	mov	r2, r3
   14dec:	mov	r1, r3
   14df0:	strd	sl, [ip]
   14df4:	bl	22a20 <flatcc_builder_table_add@@Base>
   14df8:	cmp	r0, #0
   14dfc:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e00:	mov	ip, #-2147483648	; 0x80000000
   14e04:	mov	r3, #4
   14e08:	mov	r2, r3
   14e0c:	mov	r1, #5
   14e10:	str	ip, [r0]
   14e14:	mov	r0, r4
   14e18:	bl	22a20 <flatcc_builder_table_add@@Base>
   14e1c:	cmp	r0, #0
   14e20:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e24:	mov	r3, #4
   14e28:	mov	r1, r5
   14e2c:	str	r6, [r0]
   14e30:	mov	r2, r3
   14e34:	mov	r0, r4
   14e38:	bl	22a20 <flatcc_builder_table_add@@Base>
   14e3c:	cmp	r0, #0
   14e40:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e44:	movw	r3, #13107	; 0x3333
   14e48:	movt	r3, #16403	; 0x4013
   14e4c:	cmp	r8, #0
   14e50:	str	r3, [r0]
   14e54:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e58:	mov	r1, #10
   14e5c:	mov	r0, r4
   14e60:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   14e64:	cmp	r0, #0
   14e68:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e6c:	cmp	r9, #0
   14e70:	str	r8, [r0]
   14e74:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e78:	mov	r1, #11
   14e7c:	mov	r0, r4
   14e80:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   14e84:	subs	r2, r0, #0
   14e88:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14e8c:	mov	r3, #2
   14e90:	mov	r0, r4
   14e94:	str	r9, [r2]
   14e98:	mov	r1, r3
   14e9c:	mov	r2, r3
   14ea0:	bl	22a20 <flatcc_builder_table_add@@Base>
   14ea4:	cmp	r0, #0
   14ea8:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14eac:	mov	ip, #32768	; 0x8000
   14eb0:	mov	r3, #2
   14eb4:	mov	r2, r3
   14eb8:	mov	r1, #3
   14ebc:	strh	ip, [r0]
   14ec0:	mov	r0, r4
   14ec4:	bl	22a20 <flatcc_builder_table_add@@Base>
   14ec8:	cmp	r0, #0
   14ecc:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14ed0:	mov	r3, #1
   14ed4:	mov	r1, #0
   14ed8:	strh	r6, [r0]
   14edc:	mov	r2, r3
   14ee0:	mov	r0, r4
   14ee4:	bl	22a20 <flatcc_builder_table_add@@Base>
   14ee8:	cmp	r0, #0
   14eec:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14ef0:	mvn	ip, #127	; 0x7f
   14ef4:	mov	r3, #1
   14ef8:	mov	r2, r3
   14efc:	mov	r1, r3
   14f00:	strb	ip, [r0]
   14f04:	mov	r0, r4
   14f08:	bl	22a20 <flatcc_builder_table_add@@Base>
   14f0c:	subs	r3, r0, #0
   14f10:	beq	14f3c <test_type_aliases@@Base+0x4d4>
   14f14:	mov	r2, #0
   14f18:	ldr	r1, [pc, #152]	; 14fb8 <test_type_aliases@@Base+0x550>
   14f1c:	mov	r0, r4
   14f20:	strb	r6, [r3]
   14f24:	bl	20f8c <flatcc_builder_check_required@@Base>
   14f28:	cmp	r0, #0
   14f2c:	beq	14f88 <test_type_aliases@@Base+0x520>
   14f30:	mov	r0, r4
   14f34:	bl	21028 <flatcc_builder_end_table@@Base>
   14f38:	mov	r7, r0
   14f3c:	mov	r1, r7
   14f40:	mov	r0, r4
   14f44:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   14f48:	b	14af4 <test_type_aliases@@Base+0x8c>
   14f4c:	movw	r3, #41072	; 0xa070
   14f50:	movt	r3, #3
   14f54:	ldr	r2, [sp, #12]
   14f58:	mov	r1, r4
   14f5c:	movw	r0, #24968	; 0x6188
   14f60:	movt	r0, #2
   14f64:	ldr	r3, [r3]
   14f68:	bl	12d28 <_start@@Base+0x118>
   14f6c:	mov	r0, r5
   14f70:	bl	23c68 <flatcc_verify_error_string@@Base>
   14f74:	mov	r1, r0
   14f78:	movw	r0, #24988	; 0x619c
   14f7c:	movt	r0, #2
   14f80:	bl	12974 <printf@plt>
   14f84:	b	14b8c <test_type_aliases@@Base+0x124>
   14f88:	movw	r1, #23968	; 0x5da0
   14f8c:	movt	r1, #2
   14f90:	ldr	r3, [pc, #36]	; 14fbc <test_type_aliases@@Base+0x554>
   14f94:	movw	r0, #24792	; 0x60d8
   14f98:	movt	r0, #2
   14f9c:	mov	r2, #237	; 0xed
   14fa0:	bl	12a64 <__assert_fail@plt>
   14fa4:	nop	{0}
   14fa8:	strbtvs	r6, [r6], -r6, ror #12
   14fac:	andmi	r6, r2, r6, ror #12
   14fb0:	andsmi	r3, r3, r3, lsr r3
   14fb4:			; <UNDEFINED> instruction: 0x000258bc
   14fb8:	muleq	r2, r8, r8
   14fbc:	muleq	r2, ip, r8

00014fc0 <test_empty_monster@@Base>:
   14fc0:	strd	r4, [sp, #-12]!
   14fc4:	mov	r4, r0
   14fc8:	str	lr, [sp, #8]
   14fcc:	sub	sp, sp, #12
   14fd0:	bl	1e2e0 <flatcc_builder_reset@@Base>
   14fd4:	mov	r3, #0
   14fd8:	mov	r0, r4
   14fdc:	mov	r2, r3
   14fe0:	movw	r1, #24784	; 0x60d0
   14fe4:	movt	r1, #2
   14fe8:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   14fec:	mov	r1, #36	; 0x24
   14ff0:	mov	r0, r4
   14ff4:	bl	206a8 <flatcc_builder_start_table@@Base>
   14ff8:	mov	r0, r4
   14ffc:	movw	r1, #25080	; 0x61f8
   15000:	movt	r1, #2
   15004:	bl	22630 <flatcc_builder_create_string_str@@Base>
   15008:	subs	r5, r0, #0
   1500c:	beq	15024 <test_empty_monster@@Base+0x64>
   15010:	mov	r1, #3
   15014:	mov	r0, r4
   15018:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1501c:	cmp	r0, #0
   15020:	strne	r5, [r0]
   15024:	mov	r2, #1
   15028:	ldr	r1, [pc, #252]	; 1512c <test_empty_monster@@Base+0x16c>
   1502c:	mov	r0, r4
   15030:	bl	20f8c <flatcc_builder_check_required@@Base>
   15034:	cmp	r0, #0
   15038:	beq	15128 <test_empty_monster@@Base+0x168>
   1503c:	mov	r0, r4
   15040:	bl	21028 <flatcc_builder_end_table@@Base>
   15044:	mov	r1, r0
   15048:	mov	r0, r4
   1504c:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   15050:	mov	r0, r4
   15054:	add	r1, sp, #4
   15058:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   1505c:	movw	r3, #41072	; 0xa070
   15060:	movt	r3, #3
   15064:	ldr	r2, [sp, #4]
   15068:	mov	r1, r0
   1506c:	mov	r4, r0
   15070:	movw	r0, #25092	; 0x6204
   15074:	movt	r0, #2
   15078:	ldr	r3, [r3]
   1507c:	bl	12d28 <_start@@Base+0x118>
   15080:	mov	r0, r4
   15084:	bl	14990 <verify_empty_monster@@Base>
   15088:	subs	r5, r0, #0
   1508c:	beq	150ac <test_empty_monster@@Base+0xec>
   15090:	mov	r0, r4
   15094:	bl	23658 <flatcc_builder_aligned_free@@Base>
   15098:	mov	r0, r5
   1509c:	add	sp, sp, #12
   150a0:	ldrd	r4, [sp]
   150a4:	add	sp, sp, #8
   150a8:	pop	{pc}		; (ldr pc, [sp], #4)
   150ac:	movw	r3, #14640	; 0x3930
   150b0:	movt	r3, #1
   150b4:	ldr	r1, [sp, #4]
   150b8:	movw	r2, #24784	; 0x60d0
   150bc:	movt	r2, #2
   150c0:	mov	r0, r4
   150c4:	bl	24998 <flatcc_verify_table_as_root@@Base>
   150c8:	subs	r5, r0, #0
   150cc:	bne	1510c <test_empty_monster@@Base+0x14c>
   150d0:	ldr	r1, [sp, #4]
   150d4:	movw	r3, #14640	; 0x3930
   150d8:	movt	r3, #1
   150dc:	movw	r2, #24784	; 0x60d0
   150e0:	movt	r2, #2
   150e4:	mov	r0, r4
   150e8:	sub	r1, r1, #1
   150ec:	bl	24998 <flatcc_verify_table_as_root@@Base>
   150f0:	cmp	r0, #0
   150f4:	bne	15090 <test_empty_monster@@Base+0xd0>
   150f8:	movw	r0, #25152	; 0x6240
   150fc:	movt	r0, #2
   15100:	bl	129c8 <puts@plt>
   15104:	mvn	r5, #0
   15108:	b	15098 <test_empty_monster@@Base+0xd8>
   1510c:	bl	23c68 <flatcc_verify_error_string@@Base>
   15110:	mov	r1, r0
   15114:	movw	r0, #25112	; 0x6218
   15118:	movt	r0, #2
   1511c:	mvn	r5, #0
   15120:	bl	12974 <printf@plt>
   15124:	b	15098 <test_empty_monster@@Base+0xd8>
   15128:	bl	134a0 <_start@@Base+0x890>
   1512c:	ldrdeq	r5, [r2], -ip

00015130 <test_typed_empty_monster@@Base>:
   15130:	strd	r4, [sp, #-16]!
   15134:	mov	r4, #0
   15138:	mov	r5, r0
   1513c:	str	r6, [sp, #8]
   15140:	str	lr, [sp, #12]
   15144:	sub	sp, sp, #8
   15148:	str	r4, [sp, #4]
   1514c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   15150:	mov	r3, r4
   15154:	mov	r2, r4
   15158:	mov	r0, r5
   1515c:	movw	r1, #25224	; 0x6288
   15160:	movt	r1, #2
   15164:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   15168:	mov	r1, #36	; 0x24
   1516c:	mov	r0, r5
   15170:	bl	206a8 <flatcc_builder_start_table@@Base>
   15174:	mov	r0, r5
   15178:	movw	r1, #25080	; 0x61f8
   1517c:	movt	r1, #2
   15180:	bl	22630 <flatcc_builder_create_string_str@@Base>
   15184:	subs	r4, r0, #0
   15188:	beq	151a0 <test_typed_empty_monster@@Base+0x70>
   1518c:	mov	r1, #3
   15190:	mov	r0, r5
   15194:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   15198:	cmp	r0, #0
   1519c:	strne	r4, [r0]
   151a0:	mov	r2, #1
   151a4:	ldr	r1, [pc, #652]	; 15438 <test_typed_empty_monster@@Base+0x308>
   151a8:	mov	r0, r5
   151ac:	bl	20f8c <flatcc_builder_check_required@@Base>
   151b0:	cmp	r0, #0
   151b4:	beq	15434 <test_typed_empty_monster@@Base+0x304>
   151b8:	mov	r0, r5
   151bc:	movw	r4, #40389	; 0x9dc5
   151c0:	movt	r4, #33052	; 0x811c
   151c4:	bl	21028 <flatcc_builder_end_table@@Base>
   151c8:	mov	r1, r0
   151cc:	mov	r0, r5
   151d0:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   151d4:	mov	r0, r5
   151d8:	mov	r1, sp
   151dc:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   151e0:	movw	r3, #41072	; 0xa070
   151e4:	movt	r3, #3
   151e8:	ldr	r2, [sp]
   151ec:	mov	r1, r0
   151f0:	mov	r5, r0
   151f4:	movw	r0, #25232	; 0x6290
   151f8:	movt	r0, #2
   151fc:	ldr	r3, [r3]
   15200:	bl	12d28 <_start@@Base+0x118>
   15204:	ldr	r1, [r5, #4]
   15208:	movw	r2, #25200	; 0x6270
   1520c:	movt	r2, #2
   15210:	movw	r0, #403	; 0x193
   15214:	movt	r0, #256	; 0x100
   15218:	mov	r3, #77	; 0x4d
   1521c:	eor	r4, r4, r3
   15220:	ldrb	r3, [r2, #1]!
   15224:	mul	r4, r0, r4
   15228:	cmp	r3, #0
   1522c:	bne	1521c <test_typed_empty_monster@@Base+0xec>
   15230:	cmp	r4, #0
   15234:	beq	15384 <test_typed_empty_monster@@Base+0x254>
   15238:	cmp	r4, r1
   1523c:	bne	153dc <test_typed_empty_monster@@Base+0x2ac>
   15240:	movw	r3, #62593	; 0xf481
   15244:	movt	r3, #13070	; 0x330e
   15248:	cmp	r4, r3
   1524c:	bne	15394 <test_typed_empty_monster@@Base+0x264>
   15250:	mov	r0, r5
   15254:	bl	14990 <verify_empty_monster@@Base>
   15258:	cmp	r0, #0
   1525c:	beq	15420 <test_typed_empty_monster@@Base+0x2f0>
   15260:	movw	r3, #14640	; 0x3930
   15264:	movt	r3, #1
   15268:	ldr	r1, [sp]
   1526c:	movw	r2, #25224	; 0x6288
   15270:	movt	r2, #2
   15274:	mov	r0, r5
   15278:	bl	24998 <flatcc_verify_table_as_root@@Base>
   1527c:	subs	r6, r0, #0
   15280:	bne	153c4 <test_typed_empty_monster@@Base+0x294>
   15284:	movw	r3, #14640	; 0x3930
   15288:	movt	r3, #1
   1528c:	ldr	r1, [sp]
   15290:	movw	r2, #25224	; 0x6288
   15294:	movt	r2, #2
   15298:	mov	r0, r5
   1529c:	bl	24998 <flatcc_verify_table_as_root@@Base>
   152a0:	subs	r6, r0, #0
   152a4:	bne	153c4 <test_typed_empty_monster@@Base+0x294>
   152a8:	mov	r2, r4
   152ac:	movw	r3, #14640	; 0x3930
   152b0:	movt	r3, #1
   152b4:	mov	r0, r5
   152b8:	ldr	r1, [sp]
   152bc:	bl	24b14 <flatcc_verify_table_as_typed_root@@Base>
   152c0:	subs	r6, r0, #0
   152c4:	bne	15408 <test_typed_empty_monster@@Base+0x2d8>
   152c8:	ldr	r1, [sp]
   152cc:	movw	r0, #25200	; 0x6270
   152d0:	movt	r0, #2
   152d4:	movw	r2, #40389	; 0x9dc5
   152d8:	movt	r2, #33052	; 0x811c
   152dc:	movw	ip, #403	; 0x193
   152e0:	movt	ip, #256	; 0x100
   152e4:	mov	r3, #77	; 0x4d
   152e8:	eor	r2, r2, r3
   152ec:	ldrb	r3, [r0, #1]!
   152f0:	mul	r2, ip, r2
   152f4:	cmp	r3, #0
   152f8:	bne	152e8 <test_typed_empty_monster@@Base+0x1b8>
   152fc:	cmp	r2, #0
   15300:	movw	r3, #40389	; 0x9dc5
   15304:	movt	r3, #33052	; 0x811c
   15308:	mov	r0, r5
   1530c:	moveq	r2, r3
   15310:	movw	r3, #14640	; 0x3930
   15314:	movt	r3, #1
   15318:	bl	24b14 <flatcc_verify_table_as_typed_root@@Base>
   1531c:	subs	r6, r0, #0
   15320:	bne	153f0 <test_typed_empty_monster@@Base+0x2c0>
   15324:	movw	ip, #62593	; 0xf481
   15328:	movt	ip, #13070	; 0x330e
   1532c:	ldr	r1, [sp]
   15330:	movw	r3, #14640	; 0x3930
   15334:	movt	r3, #1
   15338:	add	r2, sp, #4
   1533c:	mov	r0, r5
   15340:	str	ip, [sp, #4]
   15344:	bl	24998 <flatcc_verify_table_as_root@@Base>
   15348:	subs	r6, r0, #0
   1534c:	bne	153c4 <test_typed_empty_monster@@Base+0x294>
   15350:	movw	r3, #14640	; 0x3930
   15354:	movt	r3, #1
   15358:	ldr	r1, [sp]
   1535c:	movw	r2, #24784	; 0x60d0
   15360:	movt	r2, #2
   15364:	mov	r0, r5
   15368:	bl	24998 <flatcc_verify_table_as_root@@Base>
   1536c:	cmp	r0, #0
   15370:	bne	153a4 <test_typed_empty_monster@@Base+0x274>
   15374:	movw	r0, #25584	; 0x63f0
   15378:	movt	r0, #2
   1537c:	bl	129c8 <puts@plt>
   15380:	b	153a4 <test_typed_empty_monster@@Base+0x274>
   15384:	movw	r3, #40389	; 0x9dc5
   15388:	movt	r3, #33052	; 0x811c
   1538c:	cmp	r1, r3
   15390:	bne	153dc <test_typed_empty_monster@@Base+0x2ac>
   15394:	movw	r0, #25312	; 0x62e0
   15398:	movt	r0, #2
   1539c:	mvn	r6, #0
   153a0:	bl	129c8 <puts@plt>
   153a4:	mov	r0, r5
   153a8:	bl	23658 <flatcc_builder_aligned_free@@Base>
   153ac:	mov	r0, r6
   153b0:	add	sp, sp, #8
   153b4:	ldrd	r4, [sp]
   153b8:	ldr	r6, [sp, #8]
   153bc:	add	sp, sp, #12
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	bl	23c68 <flatcc_verify_error_string@@Base>
   153c8:	mov	r1, r0
   153cc:	movw	r0, #25416	; 0x6348
   153d0:	movt	r0, #2
   153d4:	bl	12974 <printf@plt>
   153d8:	b	153a4 <test_typed_empty_monster@@Base+0x274>
   153dc:	movw	r0, #25260	; 0x62ac
   153e0:	movt	r0, #2
   153e4:	mvn	r6, #0
   153e8:	bl	12974 <printf@plt>
   153ec:	b	153a4 <test_typed_empty_monster@@Base+0x274>
   153f0:	bl	23c68 <flatcc_verify_error_string@@Base>
   153f4:	mov	r1, r0
   153f8:	movw	r0, #25520	; 0x63b0
   153fc:	movt	r0, #2
   15400:	bl	12974 <printf@plt>
   15404:	b	153a4 <test_typed_empty_monster@@Base+0x274>
   15408:	bl	23c68 <flatcc_verify_error_string@@Base>
   1540c:	mov	r1, r0
   15410:	movw	r0, #25464	; 0x6378
   15414:	movt	r0, #2
   15418:	bl	12974 <printf@plt>
   1541c:	b	153a4 <test_typed_empty_monster@@Base+0x274>
   15420:	movw	r0, #25352	; 0x6308
   15424:	movt	r0, #2
   15428:	bl	129c8 <puts@plt>
   1542c:	mvn	r6, #0
   15430:	b	153a4 <test_typed_empty_monster@@Base+0x274>
   15434:	bl	134a0 <_start@@Base+0x890>
   15438:	ldrdeq	r5, [r2], -ip

0001543c <verify_table_with_emptystruct@@Base>:
   1543c:	cmp	r0, #0
   15440:	str	r4, [sp, #-8]!
   15444:	str	lr, [sp, #4]
   15448:	beq	15460 <verify_table_with_emptystruct@@Base+0x24>
   1544c:	ldr	r2, [r0, #4]
   15450:	movw	r3, #20301	; 0x4f4d
   15454:	movt	r3, #21326	; 0x534e
   15458:	cmp	r2, r3
   1545c:	beq	1547c <verify_table_with_emptystruct@@Base+0x40>
   15460:	movw	r0, #25660	; 0x643c
   15464:	movt	r0, #2
   15468:	bl	129c8 <puts@plt>
   1546c:	mvn	r0, #0
   15470:	ldr	r4, [sp]
   15474:	add	sp, sp, #4
   15478:	pop	{pc}		; (ldr pc, [sp], #4)
   1547c:	ldr	r3, [r0]
   15480:	adds	r2, r0, r3
   15484:	beq	15460 <verify_table_with_emptystruct@@Base+0x24>
   15488:	ldr	r3, [r0, r3]
   1548c:	sub	r3, r2, r3
   15490:	ldrh	r1, [r3]
   15494:	cmp	r1, #5
   15498:	bls	154b4 <verify_table_with_emptystruct@@Base+0x78>
   1549c:	ldrh	r3, [r3, #4]
   154a0:	cmp	r3, #0
   154a4:	beq	154b4 <verify_table_with_emptystruct@@Base+0x78>
   154a8:	cmn	r2, r3
   154ac:	movne	r0, #0
   154b0:	bne	15470 <verify_table_with_emptystruct@@Base+0x34>
   154b4:	movw	r0, #25700	; 0x6464
   154b8:	movt	r0, #2
   154bc:	bl	129c8 <puts@plt>
   154c0:	mvn	r0, #0
   154c4:	b	15470 <verify_table_with_emptystruct@@Base+0x34>

000154c8 <test_table_with_emptystruct@@Base>:
   154c8:	strd	r4, [sp, #-16]!
   154cc:	mov	r4, r0
   154d0:	str	r6, [sp, #8]
   154d4:	str	lr, [sp, #12]
   154d8:	sub	sp, sp, #8
   154dc:	bl	1e2e0 <flatcc_builder_reset@@Base>
   154e0:	mov	r3, #0
   154e4:	mov	r0, r4
   154e8:	mov	r2, r3
   154ec:	movw	r1, #24784	; 0x60d0
   154f0:	movt	r1, #2
   154f4:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   154f8:	subs	r5, r0, #0
   154fc:	beq	1555c <test_table_with_emptystruct@@Base+0x94>
   15500:	add	r1, sp, #4
   15504:	mov	r0, r4
   15508:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   1550c:	movw	r3, #41072	; 0xa070
   15510:	movt	r3, #3
   15514:	ldr	r2, [sp, #4]
   15518:	mov	r1, r0
   1551c:	mov	r4, r0
   15520:	movw	r0, #25920	; 0x6540
   15524:	movt	r0, #2
   15528:	ldr	r3, [r3]
   1552c:	bl	12d28 <_start@@Base+0x118>
   15530:	mov	r0, r4
   15534:	bl	1543c <verify_table_with_emptystruct@@Base>
   15538:	mov	r5, r0
   1553c:	mov	r0, r4
   15540:	bl	23658 <flatcc_builder_aligned_free@@Base>
   15544:	mov	r0, r5
   15548:	add	sp, sp, #8
   1554c:	ldrd	r4, [sp]
   15550:	ldr	r6, [sp, #8]
   15554:	add	sp, sp, #12
   15558:	pop	{pc}		; (ldr pc, [sp], #4)
   1555c:	mov	r1, #1
   15560:	mov	r0, r4
   15564:	bl	206a8 <flatcc_builder_start_table@@Base>
   15568:	subs	r6, r0, #0
   1556c:	bne	155b0 <test_table_with_emptystruct@@Base+0xe8>
   15570:	mov	r3, #1
   15574:	mov	r2, r6
   15578:	mov	r1, r6
   1557c:	mov	r0, r4
   15580:	bl	22a20 <flatcc_builder_table_add@@Base>
   15584:	cmp	r0, #0
   15588:	beq	155b0 <test_table_with_emptystruct@@Base+0xe8>
   1558c:	mov	r2, r6
   15590:	ldr	r1, [pc, #68]	; 155dc <test_table_with_emptystruct@@Base+0x114>
   15594:	mov	r0, r4
   15598:	bl	20f8c <flatcc_builder_check_required@@Base>
   1559c:	cmp	r0, #0
   155a0:	beq	155c0 <test_table_with_emptystruct@@Base+0xf8>
   155a4:	mov	r0, r4
   155a8:	bl	21028 <flatcc_builder_end_table@@Base>
   155ac:	mov	r5, r0
   155b0:	mov	r1, r5
   155b4:	mov	r0, r4
   155b8:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   155bc:	b	15500 <test_table_with_emptystruct@@Base+0x38>
   155c0:	movw	r1, #23968	; 0x5da0
   155c4:	movt	r1, #2
   155c8:	ldr	r3, [pc, #16]	; 155e0 <test_table_with_emptystruct@@Base+0x118>
   155cc:	movw	r0, #25728	; 0x6480
   155d0:	movt	r0, #2
   155d4:	mov	r2, #215	; 0xd7
   155d8:	bl	12a64 <__assert_fail@plt>
   155dc:	andeq	r5, r2, r0, ror #17
   155e0:	andeq	r5, r2, r4, ror #17

000155e4 <test_typed_table_with_emptystruct@@Base>:
   155e4:	strd	r4, [sp, #-16]!
   155e8:	mov	r4, r0
   155ec:	str	r6, [sp, #8]
   155f0:	str	lr, [sp, #12]
   155f4:	sub	sp, sp, #8
   155f8:	bl	1e2e0 <flatcc_builder_reset@@Base>
   155fc:	mov	r3, #0
   15600:	mov	r0, r4
   15604:	mov	r2, r3
   15608:	movw	r1, #25944	; 0x6558
   1560c:	movt	r1, #2
   15610:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   15614:	subs	r5, r0, #0
   15618:	beq	156f4 <test_typed_table_with_emptystruct@@Base+0x110>
   1561c:	mov	r0, r4
   15620:	add	r1, sp, #4
   15624:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   15628:	movw	r3, #41072	; 0xa070
   1562c:	movt	r3, #3
   15630:	ldr	r2, [sp, #4]
   15634:	mov	r1, r0
   15638:	mov	r4, r0
   1563c:	movw	r0, #25952	; 0x6560
   15640:	movt	r0, #2
   15644:	ldr	r3, [r3]
   15648:	bl	12d28 <_start@@Base+0x118>
   1564c:	mov	r0, r4
   15650:	movw	r3, #11544	; 0x2d18
   15654:	movt	r3, #1
   15658:	movw	r2, #25944	; 0x6558
   1565c:	movt	r2, #2
   15660:	ldr	r1, [sp, #4]
   15664:	bl	24998 <flatcc_verify_table_as_root@@Base>
   15668:	cmp	r0, #0
   1566c:	bne	15778 <test_typed_table_with_emptystruct@@Base+0x194>
   15670:	movw	r3, #11544	; 0x2d18
   15674:	movt	r3, #1
   15678:	ldr	r1, [sp, #4]
   1567c:	movw	r2, #25944	; 0x6558
   15680:	movt	r2, #2
   15684:	mov	r0, r4
   15688:	bl	24998 <flatcc_verify_table_as_root@@Base>
   1568c:	cmp	r0, #0
   15690:	bne	1578c <test_typed_table_with_emptystruct@@Base+0x1a8>
   15694:	movw	r5, #14262	; 0x37b6
   15698:	movt	r5, #45277	; 0xb0dd
   1569c:	ldr	r1, [sp, #4]
   156a0:	mov	r2, r5
   156a4:	movw	r3, #11544	; 0x2d18
   156a8:	movt	r3, #1
   156ac:	mov	r0, r4
   156b0:	bl	24b14 <flatcc_verify_table_as_typed_root@@Base>
   156b4:	cmp	r0, #0
   156b8:	bne	157a0 <test_typed_table_with_emptystruct@@Base+0x1bc>
   156bc:	cmp	r4, #0
   156c0:	beq	157b4 <test_typed_table_with_emptystruct@@Base+0x1d0>
   156c4:	ldr	r3, [r4, #4]
   156c8:	cmp	r3, r5
   156cc:	beq	15758 <test_typed_table_with_emptystruct@@Base+0x174>
   156d0:	movw	r0, #26108	; 0x65fc
   156d4:	movt	r0, #2
   156d8:	bl	129c8 <puts@plt>
   156dc:	mvn	r0, #0
   156e0:	add	sp, sp, #8
   156e4:	ldrd	r4, [sp]
   156e8:	ldr	r6, [sp, #8]
   156ec:	add	sp, sp, #12
   156f0:	pop	{pc}		; (ldr pc, [sp], #4)
   156f4:	mov	r1, #1
   156f8:	mov	r0, r4
   156fc:	bl	206a8 <flatcc_builder_start_table@@Base>
   15700:	subs	r6, r0, #0
   15704:	bne	15748 <test_typed_table_with_emptystruct@@Base+0x164>
   15708:	mov	r3, #1
   1570c:	mov	r2, r6
   15710:	mov	r1, r6
   15714:	mov	r0, r4
   15718:	bl	22a20 <flatcc_builder_table_add@@Base>
   1571c:	cmp	r0, #0
   15720:	beq	15748 <test_typed_table_with_emptystruct@@Base+0x164>
   15724:	mov	r2, r6
   15728:	ldr	r1, [pc, #180]	; 157e4 <test_typed_table_with_emptystruct@@Base+0x200>
   1572c:	mov	r0, r4
   15730:	bl	20f8c <flatcc_builder_check_required@@Base>
   15734:	cmp	r0, #0
   15738:	beq	157c8 <test_typed_table_with_emptystruct@@Base+0x1e4>
   1573c:	mov	r0, r4
   15740:	bl	21028 <flatcc_builder_end_table@@Base>
   15744:	mov	r5, r0
   15748:	mov	r1, r5
   1574c:	mov	r0, r4
   15750:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   15754:	b	1561c <test_typed_table_with_emptystruct@@Base+0x38>
   15758:	ldr	r3, [r4]
   1575c:	cmn	r4, r3
   15760:	bne	156e0 <test_typed_table_with_emptystruct@@Base+0xfc>
   15764:	movw	r0, #26124	; 0x660c
   15768:	movt	r0, #2
   1576c:	bl	129c8 <puts@plt>
   15770:	mvn	r0, #0
   15774:	b	156e0 <test_typed_table_with_emptystruct@@Base+0xfc>
   15778:	movw	r0, #25984	; 0x6580
   1577c:	movt	r0, #2
   15780:	bl	129c8 <puts@plt>
   15784:	mvn	r0, #0
   15788:	b	156e0 <test_typed_table_with_emptystruct@@Base+0xfc>
   1578c:	movw	r0, #26016	; 0x65a0
   15790:	movt	r0, #2
   15794:	bl	129c8 <puts@plt>
   15798:	mvn	r0, #0
   1579c:	b	156e0 <test_typed_table_with_emptystruct@@Base+0xfc>
   157a0:	movw	r0, #26044	; 0x65bc
   157a4:	movt	r0, #2
   157a8:	bl	129c8 <puts@plt>
   157ac:	mvn	r0, #0
   157b0:	b	156e0 <test_typed_table_with_emptystruct@@Base+0xfc>
   157b4:	movw	r0, #26084	; 0x65e4
   157b8:	movt	r0, #2
   157bc:	bl	129c8 <puts@plt>
   157c0:	mvn	r0, #0
   157c4:	b	156e0 <test_typed_table_with_emptystruct@@Base+0xfc>
   157c8:	movw	r1, #23968	; 0x5da0
   157cc:	movt	r1, #2
   157d0:	ldr	r3, [pc, #16]	; 157e8 <test_typed_table_with_emptystruct@@Base+0x204>
   157d4:	movw	r0, #25728	; 0x6480
   157d8:	movt	r0, #2
   157dc:	mov	r2, #215	; 0xd7
   157e0:	bl	12a64 <__assert_fail@plt>
   157e4:	andeq	r5, r2, r0, ror #17
   157e8:	andeq	r5, r2, r4, ror #17

000157ec <verify_monster@@Base>:
   157ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   157f0:	movw	r3, #1100	; 0x44c
   157f4:	ldr	r4, [r0, #4]
   157f8:	strd	r6, [sp, #8]
   157fc:	movw	r6, #21692	; 0x54bc
   15800:	movt	r6, #2
   15804:	add	ip, r6, #1120	; 0x460
   15808:	mov	r7, r0
   1580c:	strd	r8, [sp, #16]
   15810:	ldr	r8, [pc, #832]	; 15b58 <verify_monster@@Base+0x36c>
   15814:	str	sl, [sp, #24]
   15818:	ldrd	r2, [r3, r6]
   1581c:	str	lr, [sp, #28]
   15820:	sub	sp, sp, #80	; 0x50
   15824:	movw	lr, #20301	; 0x4f4d
   15828:	movt	lr, #21326	; 0x534e
   1582c:	ldrd	r0, [ip]
   15830:	cmp	r4, lr
   15834:	ldrd	r4, [ip, #8]
   15838:	strd	r0, [sp, #4]
   1583c:	strd	r2, [sp, #20]
   15840:	ldrd	r0, [r8, #8]
   15844:	strd	r4, [sp, #12]
   15848:	ldr	r3, [r8, #16]
   1584c:	strd	r0, [sp, #28]
   15850:	str	r3, [sp, #36]	; 0x24
   15854:	beq	15884 <verify_monster@@Base+0x98>
   15858:	movw	r0, #26180	; 0x6644
   1585c:	movt	r0, #2
   15860:	bl	129c8 <puts@plt>
   15864:	mvn	r0, #0
   15868:	add	sp, sp, #80	; 0x50
   1586c:	ldrd	r4, [sp]
   15870:	ldrd	r6, [sp, #8]
   15874:	ldrd	r8, [sp, #16]
   15878:	ldr	sl, [sp, #24]
   1587c:	add	sp, sp, #28
   15880:	pop	{pc}		; (ldr pc, [sp], #4)
   15884:	ldr	r9, [r7]
   15888:	adds	r8, r7, r9
   1588c:	beq	1598c <verify_monster@@Base+0x1a0>
   15890:	ldr	r3, [r7, r9]
   15894:	sub	r3, r8, r3
   15898:	ldrh	r2, [r3]
   1589c:	cmp	r2, #9
   158a0:	bls	15b0c <verify_monster@@Base+0x320>
   158a4:	ldrh	r2, [r3, #8]
   158a8:	cmp	r2, #0
   158ac:	beq	15b0c <verify_monster@@Base+0x320>
   158b0:	ldrsh	r2, [r8, r2]
   158b4:	cmp	r2, #80	; 0x50
   158b8:	bne	15b0c <verify_monster@@Base+0x320>
   158bc:	ldrh	r5, [r3, #4]
   158c0:	cmp	r5, #0
   158c4:	beq	162f4 <verify_monster@@Base+0xb08>
   158c8:	adds	r5, r8, r5
   158cc:	beq	162f4 <verify_monster@@Base+0xb08>
   158d0:	add	r4, sp, #55	; 0x37
   158d4:	tst	r5, #15
   158d8:	bic	r4, r4, #15
   158dc:	bne	159a0 <verify_monster@@Base+0x1b4>
   158e0:	vldr	s15, [pc, #612]	; 15b4c <verify_monster@@Base+0x360>
   158e4:	vldr	s14, [r5, #8]
   158e8:	vcmp.f32	s14, s15
   158ec:	vmrs	APSR_nzcv, fpscr
   158f0:	bne	1629c <verify_monster@@Base+0xab0>
   158f4:	vldr	s14, [pc, #596]	; 15b50 <verify_monster@@Base+0x364>
   158f8:	vldr	s13, [r5]
   158fc:	vcmp.f32	s13, s14
   15900:	vmrs	APSR_nzcv, fpscr
   15904:	bne	15f64 <verify_monster@@Base+0x778>
   15908:	vldr	s13, [pc, #580]	; 15b54 <verify_monster@@Base+0x368>
   1590c:	vldr	s12, [r5, #4]
   15910:	vcmp.f32	s12, s13
   15914:	vmrs	APSR_nzcv, fpscr
   15918:	bne	15f64 <verify_monster@@Base+0x778>
   1591c:	vldr	d5, [r5, #16]
   15920:	mov	r3, #0
   15924:	vstr	s14, [r4]
   15928:	ldrb	r1, [r5, #24]
   1592c:	vstr	s13, [r4, #4]
   15930:	ldrb	r2, [r5, #28]
   15934:	str	r3, [r4, #12]
   15938:	vcmp.f64	d5, #0.0
   1593c:	str	r3, [r4, #24]
   15940:	str	r3, [r4, #28]
   15944:	ldrh	r3, [r5, #26]
   15948:	vstr	s15, [r4, #8]
   1594c:	vstr	d5, [r4, #16]
   15950:	strb	r1, [r4, #24]
   15954:	vmrs	APSR_nzcv, fpscr
   15958:	strh	r3, [r4, #26]
   1595c:	strb	r2, [r4, #28]
   15960:	bne	15978 <verify_monster@@Base+0x18c>
   15964:	ldrb	r1, [r5, #26]
   15968:	ldrb	r3, [r6, #1136]	; 0x470
   1596c:	ldr	r0, [pc, #488]	; 15b5c <verify_monster@@Base+0x370>
   15970:	cmp	r1, r3
   15974:	beq	159b0 <verify_monster@@Base+0x1c4>
   15978:	movw	r0, #26344	; 0x66e8
   1597c:	movt	r0, #2
   15980:	bl	129c8 <puts@plt>
   15984:	mvn	r0, #0
   15988:	b	15868 <verify_monster@@Base+0x7c>
   1598c:	movw	r0, #24664	; 0x6058
   15990:	movt	r0, #2
   15994:	bl	129c8 <puts@plt>
   15998:	mvn	r0, #0
   1599c:	b	15868 <verify_monster@@Base+0x7c>
   159a0:	movw	r0, #26244	; 0x6684
   159a4:	movt	r0, #2
   159a8:	bl	129c8 <puts@plt>
   159ac:	b	158e0 <verify_monster@@Base+0xf4>
   159b0:	ldrb	r3, [r6, #1137]	; 0x471
   159b4:	add	r0, r0, #1
   159b8:	ldrb	r1, [r5, #27]
   159bc:	cmp	r1, r3
   159c0:	bne	15978 <verify_monster@@Base+0x18c>
   159c4:	ldrb	r3, [r0, #1]!
   159c8:	cmp	r2, r3
   159cc:	bne	15978 <verify_monster@@Base+0x18c>
   159d0:	ldrb	r2, [r5, #29]
   159d4:	ldrb	r3, [r0, #1]
   159d8:	cmp	r2, r3
   159dc:	bne	15978 <verify_monster@@Base+0x18c>
   159e0:	mov	r0, r8
   159e4:	bl	131d8 <_start@@Base+0x5c8>
   159e8:	subs	r4, r0, #0
   159ec:	beq	161d4 <verify_monster@@Base+0x9e8>
   159f0:	movw	r1, #25080	; 0x61f8
   159f4:	movt	r1, #2
   159f8:	bl	12968 <strcmp@plt>
   159fc:	cmp	r0, #0
   15a00:	bne	161d4 <verify_monster@@Base+0x9e8>
   15a04:	ldr	r1, [r4, #-4]
   15a08:	cmp	r1, #9
   15a0c:	bne	15fa4 <verify_monster@@Base+0x7b8>
   15a10:	ldr	r4, [r7, r9]
   15a14:	sub	r4, r8, r4
   15a18:	ldrh	r5, [r4]
   15a1c:	cmp	r5, #17
   15a20:	bls	1618c <verify_monster@@Base+0x9a0>
   15a24:	ldrh	r3, [r4, #16]
   15a28:	cmp	r3, #0
   15a2c:	beq	1618c <verify_monster@@Base+0x9a0>
   15a30:	ldrsb	r3, [r8, r3]
   15a34:	cmp	r3, #2
   15a38:	bne	1618c <verify_monster@@Base+0x9a0>
   15a3c:	ldrh	r3, [r4, #14]
   15a40:	cmp	r3, #0
   15a44:	beq	15b20 <verify_monster@@Base+0x334>
   15a48:	ldr	r0, [r8, r3]
   15a4c:	add	r2, r8, r3
   15a50:	add	r0, r0, #4
   15a54:	adds	r3, r2, r0
   15a58:	beq	15b20 <verify_monster@@Base+0x334>
   15a5c:	ldr	ip, [r3, #-4]
   15a60:	cmp	ip, #10
   15a64:	bne	15b20 <verify_monster@@Base+0x334>
   15a68:	ldrb	r2, [r2, r0]
   15a6c:	cmp	r2, #0
   15a70:	bne	15f3c <verify_monster@@Base+0x750>
   15a74:	ldrb	r2, [r3, #1]
   15a78:	cmp	r2, #1
   15a7c:	bne	15f44 <verify_monster@@Base+0x758>
   15a80:	ldrb	r2, [r3, #2]
   15a84:	cmp	r2, #2
   15a88:	bne	15f4c <verify_monster@@Base+0x760>
   15a8c:	ldrb	r2, [r3, #3]
   15a90:	cmp	r2, #3
   15a94:	bne	15f54 <verify_monster@@Base+0x768>
   15a98:	ldrb	r2, [r3, #4]
   15a9c:	cmp	r2, #4
   15aa0:	bne	15f5c <verify_monster@@Base+0x770>
   15aa4:	ldrb	r2, [r3, #5]
   15aa8:	cmp	r2, #5
   15aac:	bne	15f78 <verify_monster@@Base+0x78c>
   15ab0:	ldrb	r2, [r3, #6]
   15ab4:	cmp	r2, #6
   15ab8:	bne	15f94 <verify_monster@@Base+0x7a8>
   15abc:	ldrb	r2, [r3, #7]
   15ac0:	cmp	r2, #7
   15ac4:	bne	15f9c <verify_monster@@Base+0x7b0>
   15ac8:	ldrb	r2, [r3, #8]
   15acc:	cmp	r2, #8
   15ad0:	bne	15b34 <verify_monster@@Base+0x348>
   15ad4:	ldrb	r3, [r3, #9]
   15ad8:	cmp	r3, #9
   15adc:	bne	15b38 <verify_monster@@Base+0x34c>
   15ae0:	ldrh	r3, [r4, #6]
   15ae4:	cmp	r3, #0
   15ae8:	beq	15b68 <verify_monster@@Base+0x37c>
   15aec:	ldrsh	r3, [r8, r3]
   15af0:	cmp	r3, #150	; 0x96
   15af4:	bne	161e8 <verify_monster@@Base+0x9fc>
   15af8:	movw	r0, #27760	; 0x6c70
   15afc:	movt	r0, #2
   15b00:	bl	129c8 <puts@plt>
   15b04:	mvn	r0, #0
   15b08:	b	15868 <verify_monster@@Base+0x7c>
   15b0c:	movw	r0, #24688	; 0x6070
   15b10:	movt	r0, #2
   15b14:	bl	129c8 <puts@plt>
   15b18:	mvn	r0, #0
   15b1c:	b	15868 <verify_monster@@Base+0x7c>
   15b20:	movw	r0, #26460	; 0x675c
   15b24:	movt	r0, #2
   15b28:	bl	129c8 <puts@plt>
   15b2c:	mvn	r0, #0
   15b30:	b	15868 <verify_monster@@Base+0x7c>
   15b34:	mov	r1, #8
   15b38:	movw	r0, #26488	; 0x6778
   15b3c:	movt	r0, #2
   15b40:	bl	12974 <printf@plt>
   15b44:	mvn	r0, #0
   15b48:	b	15868 <verify_monster@@Base+0x7c>
   15b4c:	subgt	ip, ip, sp, asr #25
   15b50:	svccc	0x00800000
   15b54:	andmi	r0, r0, r0
   15b58:	andeq	r5, r2, r8, lsl #18
   15b5c:	andeq	r5, r2, ip, lsr #18
   15b60:	muleq	r2, r0, r9
   15b64:	andeq	r5, r2, r4, lsr #19
   15b68:	ldrh	r3, [r4, #8]
   15b6c:	cmp	r3, #0
   15b70:	beq	162c4 <verify_monster@@Base+0xad8>
   15b74:	ldrh	r3, [r4, #4]
   15b78:	cmp	r3, #0
   15b7c:	beq	162b0 <verify_monster@@Base+0xac4>
   15b80:	cmp	r5, #23
   15b84:	bls	15e7c <verify_monster@@Base+0x690>
   15b88:	ldrh	r3, [r4, #22]
   15b8c:	cmp	r3, #0
   15b90:	beq	15e7c <verify_monster@@Base+0x690>
   15b94:	ldr	r1, [r8, r3]
   15b98:	add	r2, r8, r3
   15b9c:	add	r1, r1, #4
   15ba0:	adds	r3, r2, r1
   15ba4:	beq	15e7c <verify_monster@@Base+0x690>
   15ba8:	ldr	r0, [r3, #-4]
   15bac:	cmp	r0, #5
   15bb0:	bne	15e7c <verify_monster@@Base+0x690>
   15bb4:	ldrsh	r1, [r2, r1]
   15bb8:	ldrsh	r2, [sp, #20]
   15bbc:	cmp	r1, r2
   15bc0:	bne	161a0 <verify_monster@@Base+0x9b4>
   15bc4:	ldrsb	r1, [r3, #2]
   15bc8:	ldrsb	r2, [sp, #22]
   15bcc:	cmp	r1, r2
   15bd0:	bne	161a0 <verify_monster@@Base+0x9b4>
   15bd4:	cmn	r3, #4
   15bd8:	ldrsh	r2, [sp, #24]
   15bdc:	beq	15e90 <verify_monster@@Base+0x6a4>
   15be0:	ldrsh	r1, [r3, #4]
   15be4:	cmp	r1, r2
   15be8:	bne	161a8 <verify_monster@@Base+0x9bc>
   15bec:	ldrsb	r1, [r3, #6]
   15bf0:	ldrsb	r2, [sp, #26]
   15bf4:	cmp	r1, r2
   15bf8:	bne	161a8 <verify_monster@@Base+0x9bc>
   15bfc:	adds	r2, r3, #8
   15c00:	ldrsh	r1, [sp, #28]
   15c04:	beq	15eb0 <verify_monster@@Base+0x6c4>
   15c08:	ldrsh	r0, [r2]
   15c0c:	cmp	r0, r1
   15c10:	bne	161c4 <verify_monster@@Base+0x9d8>
   15c14:	ldrsb	r1, [r2, #2]
   15c18:	ldrsb	r2, [sp, #30]
   15c1c:	cmp	r1, r2
   15c20:	bne	161c4 <verify_monster@@Base+0x9d8>
   15c24:	adds	r2, r3, #12
   15c28:	ldrsh	r1, [sp, #32]
   15c2c:	beq	15ed0 <verify_monster@@Base+0x6e4>
   15c30:	ldrsh	r0, [r2]
   15c34:	cmp	r0, r1
   15c38:	bne	161cc <verify_monster@@Base+0x9e0>
   15c3c:	ldrsb	r2, [r2, #2]
   15c40:	ldrsb	r1, [sp, #34]	; 0x22
   15c44:	cmp	r1, r2
   15c48:	bne	161cc <verify_monster@@Base+0x9e0>
   15c4c:	adds	r3, r3, #16
   15c50:	ldrsh	r2, [sp, #36]	; 0x24
   15c54:	beq	15f04 <verify_monster@@Base+0x718>
   15c58:	ldrsh	r1, [r3]
   15c5c:	cmp	r1, r2
   15c60:	bne	15f10 <verify_monster@@Base+0x724>
   15c64:	ldrsb	r2, [r3, #2]
   15c68:	ldrsb	r3, [sp, #38]	; 0x26
   15c6c:	cmp	r2, r3
   15c70:	bne	15f10 <verify_monster@@Base+0x724>
   15c74:	cmp	r5, #27
   15c78:	bls	15ef0 <verify_monster@@Base+0x704>
   15c7c:	ldrh	r9, [r4, #26]
   15c80:	cmp	r9, #0
   15c84:	beq	15ef0 <verify_monster@@Base+0x704>
   15c88:	ldr	sl, [r8, r9]
   15c8c:	add	r9, r8, r9
   15c90:	add	sl, sl, #4
   15c94:	adds	r6, r9, sl
   15c98:	beq	15ef0 <verify_monster@@Base+0x704>
   15c9c:	ldr	r3, [r6, #-4]
   15ca0:	cmp	r3, #8
   15ca4:	bne	15ef0 <verify_monster@@Base+0x704>
   15ca8:	ldr	r7, [r6, #20]
   15cac:	add	r7, r7, #20
   15cb0:	adds	r7, r6, r7
   15cb4:	beq	16478 <verify_monster@@Base+0xc8c>
   15cb8:	mov	r0, r7
   15cbc:	bl	131d8 <_start@@Base+0x5c8>
   15cc0:	movw	r1, #26792	; 0x68a8
   15cc4:	movt	r1, #2
   15cc8:	bl	12968 <strcmp@plt>
   15ccc:	cmp	r0, #0
   15cd0:	bne	163b0 <verify_monster@@Base+0xbc4>
   15cd4:	ldr	r3, [r6, #4]
   15cd8:	add	r3, r3, #4
   15cdc:	add	r3, r6, r3
   15ce0:	cmp	r7, r3
   15ce4:	bne	162d8 <verify_monster@@Base+0xaec>
   15ce8:	mov	r0, r7
   15cec:	bl	131d8 <_start@@Base+0x5c8>
   15cf0:	movw	r1, #26792	; 0x68a8
   15cf4:	movt	r1, #2
   15cf8:	mov	r7, r0
   15cfc:	bl	12968 <strcmp@plt>
   15d00:	cmp	r0, #0
   15d04:	bne	16308 <verify_monster@@Base+0xb1c>
   15d08:	ldr	r0, [r6, #8]
   15d0c:	add	r0, r0, #8
   15d10:	add	r0, r6, r0
   15d14:	bl	131d8 <_start@@Base+0x5c8>
   15d18:	movw	r1, #26892	; 0x690c
   15d1c:	movt	r1, #2
   15d20:	mov	r7, r0
   15d24:	bl	12968 <strcmp@plt>
   15d28:	cmp	r0, #0
   15d2c:	bne	16338 <verify_monster@@Base+0xb4c>
   15d30:	ldr	r0, [r9, sl]
   15d34:	add	r0, r6, r0
   15d38:	bl	131d8 <_start@@Base+0x5c8>
   15d3c:	movw	r1, #26936	; 0x6938
   15d40:	movt	r1, #2
   15d44:	mov	r7, r0
   15d48:	bl	12968 <strcmp@plt>
   15d4c:	cmp	r0, #0
   15d50:	bne	16320 <verify_monster@@Base+0xb34>
   15d54:	ldr	r0, [r6, #12]
   15d58:	add	r0, r0, #12
   15d5c:	add	r0, r6, r0
   15d60:	bl	131d8 <_start@@Base+0x5c8>
   15d64:	movw	r1, #26792	; 0x68a8
   15d68:	movt	r1, #2
   15d6c:	mov	r7, r0
   15d70:	bl	12968 <strcmp@plt>
   15d74:	cmp	r0, #0
   15d78:	bne	16398 <verify_monster@@Base+0xbac>
   15d7c:	ldr	r0, [r6, #16]
   15d80:	add	r0, r0, #16
   15d84:	add	r0, r6, r0
   15d88:	bl	131d8 <_start@@Base+0x5c8>
   15d8c:	movw	r1, #26892	; 0x690c
   15d90:	movt	r1, #2
   15d94:	mov	r7, r0
   15d98:	bl	12968 <strcmp@plt>
   15d9c:	cmp	r0, #0
   15da0:	bne	16380 <verify_monster@@Base+0xb94>
   15da4:	ldr	r0, [r6, #24]
   15da8:	add	r0, r0, #24
   15dac:	add	r0, r6, r0
   15db0:	bl	131d8 <_start@@Base+0x5c8>
   15db4:	movw	r1, #26936	; 0x6938
   15db8:	movt	r1, #2
   15dbc:	mov	r7, r0
   15dc0:	bl	12968 <strcmp@plt>
   15dc4:	cmp	r0, #0
   15dc8:	bne	16368 <verify_monster@@Base+0xb7c>
   15dcc:	ldr	r0, [r6, #28]
   15dd0:	add	r0, r0, #28
   15dd4:	add	r0, r6, r0
   15dd8:	bl	131d8 <_start@@Base+0x5c8>
   15ddc:	movw	r1, #26892	; 0x690c
   15de0:	movt	r1, #2
   15de4:	mov	r6, r0
   15de8:	bl	12968 <strcmp@plt>
   15dec:	cmp	r0, #0
   15df0:	bne	16350 <verify_monster@@Base+0xb64>
   15df4:	ldrh	r3, [r4, #24]
   15df8:	cmp	r3, #0
   15dfc:	beq	15f28 <verify_monster@@Base+0x73c>
   15e00:	ldr	r2, [r8, r3]
   15e04:	add	r3, r8, r3
   15e08:	add	r2, r2, #4
   15e0c:	adds	r6, r3, r2
   15e10:	beq	15f28 <verify_monster@@Base+0x73c>
   15e14:	ldr	r1, [r6, #-4]
   15e18:	cmp	r1, #3
   15e1c:	bne	15f28 <verify_monster@@Base+0x73c>
   15e20:	ldr	r0, [r3, r2]
   15e24:	movw	r1, #27184	; 0x6a30
   15e28:	movt	r1, #2
   15e2c:	add	r0, r0, #4
   15e30:	add	r0, r6, r0
   15e34:	bl	12968 <strcmp@plt>
   15e38:	cmp	r0, #0
   15e3c:	bne	163c4 <verify_monster@@Base+0xbd8>
   15e40:	ldr	r3, [r6, #4]
   15e44:	add	r3, r3, #8
   15e48:	adds	r2, r6, r3
   15e4c:	beq	15f80 <verify_monster@@Base+0x794>
   15e50:	ldr	r7, [r2, #-4]
   15e54:	cmp	r7, #2
   15e58:	bne	15f80 <verify_monster@@Base+0x794>
   15e5c:	ldrb	r3, [r6, r3]
   15e60:	cmp	r3, #44	; 0x2c
   15e64:	beq	15fb8 <verify_monster@@Base+0x7cc>
   15e68:	movw	r0, #27244	; 0x6a6c
   15e6c:	movt	r0, #2
   15e70:	bl	129c8 <puts@plt>
   15e74:	mvn	r0, #0
   15e78:	b	15868 <verify_monster@@Base+0x7c>
   15e7c:	movw	r0, #26572	; 0x67cc
   15e80:	movt	r0, #2
   15e84:	bl	129c8 <puts@plt>
   15e88:	mvn	r0, #0
   15e8c:	b	15868 <verify_monster@@Base+0x7c>
   15e90:	cmp	r2, #0
   15e94:	bne	161a8 <verify_monster@@Base+0x9bc>
   15e98:	ldrsb	r2, [sp, #26]
   15e9c:	cmp	r2, #0
   15ea0:	bne	161a8 <verify_monster@@Base+0x9bc>
   15ea4:	add	r2, r3, #8
   15ea8:	ldrsh	r1, [sp, #28]
   15eac:	b	15c08 <verify_monster@@Base+0x41c>
   15eb0:	cmp	r1, #0
   15eb4:	bne	161c4 <verify_monster@@Base+0x9d8>
   15eb8:	ldrsb	r2, [sp, #30]
   15ebc:	cmp	r2, #0
   15ec0:	bne	161c4 <verify_monster@@Base+0x9d8>
   15ec4:	add	r2, r3, #12
   15ec8:	ldrsh	r1, [sp, #32]
   15ecc:	b	15c30 <verify_monster@@Base+0x444>
   15ed0:	cmp	r1, #0
   15ed4:	bne	161cc <verify_monster@@Base+0x9e0>
   15ed8:	ldrsb	r2, [sp, #34]	; 0x22
   15edc:	cmp	r2, #0
   15ee0:	bne	161cc <verify_monster@@Base+0x9e0>
   15ee4:	add	r3, r3, #16
   15ee8:	ldrsh	r2, [sp, #36]	; 0x24
   15eec:	b	15c58 <verify_monster@@Base+0x46c>
   15ef0:	movw	r0, #26652	; 0x681c
   15ef4:	movt	r0, #2
   15ef8:	bl	129c8 <puts@plt>
   15efc:	mvn	r0, #0
   15f00:	b	15868 <verify_monster@@Base+0x7c>
   15f04:	cmp	r2, #0
   15f08:	ldrsbeq	r3, [sp, #38]	; 0x26
   15f0c:	beq	15c6c <verify_monster@@Base+0x480>
   15f10:	mov	r1, #4
   15f14:	movw	r0, #26612	; 0x67f4
   15f18:	movt	r0, #2
   15f1c:	bl	12974 <printf@plt>
   15f20:	mvn	r0, #0
   15f24:	b	15868 <verify_monster@@Base+0x7c>
   15f28:	movw	r0, #27140	; 0x6a04
   15f2c:	movt	r0, #2
   15f30:	bl	129c8 <puts@plt>
   15f34:	mvn	r0, #0
   15f38:	b	15868 <verify_monster@@Base+0x7c>
   15f3c:	mov	r1, #0
   15f40:	b	15b38 <verify_monster@@Base+0x34c>
   15f44:	mov	r1, #1
   15f48:	b	15b38 <verify_monster@@Base+0x34c>
   15f4c:	mov	r1, #2
   15f50:	b	15b38 <verify_monster@@Base+0x34c>
   15f54:	mov	r1, #3
   15f58:	b	15b38 <verify_monster@@Base+0x34c>
   15f5c:	mov	r1, #4
   15f60:	b	15b38 <verify_monster@@Base+0x34c>
   15f64:	movw	r0, #26320	; 0x66d0
   15f68:	movt	r0, #2
   15f6c:	bl	129c8 <puts@plt>
   15f70:	mvn	r0, #0
   15f74:	b	15868 <verify_monster@@Base+0x7c>
   15f78:	mov	r1, #5
   15f7c:	b	15b38 <verify_monster@@Base+0x34c>
   15f80:	movw	r0, #27216	; 0x6a50
   15f84:	movt	r0, #2
   15f88:	bl	12974 <printf@plt>
   15f8c:	mvn	r0, #0
   15f90:	b	15868 <verify_monster@@Base+0x7c>
   15f94:	mov	r1, #6
   15f98:	b	15b38 <verify_monster@@Base+0x34c>
   15f9c:	mov	r1, #7
   15fa0:	b	15b38 <verify_monster@@Base+0x34c>
   15fa4:	movw	r0, #26400	; 0x6720
   15fa8:	movt	r0, #2
   15fac:	bl	129c8 <puts@plt>
   15fb0:	mvn	r0, #0
   15fb4:	b	15868 <verify_monster@@Base+0x7c>
   15fb8:	ldrb	r3, [r2, #1]
   15fbc:	cmp	r3, #0
   15fc0:	bne	15e68 <verify_monster@@Base+0x67c>
   15fc4:	ldr	r0, [r6, #8]
   15fc8:	movw	r1, #27276	; 0x6a8c
   15fcc:	movt	r1, #2
   15fd0:	add	r0, r0, #12
   15fd4:	add	r0, r6, r0
   15fd8:	bl	12968 <strcmp@plt>
   15fdc:	cmp	r0, #0
   15fe0:	bne	163d8 <verify_monster@@Base+0xbec>
   15fe4:	cmp	r5, #53	; 0x35
   15fe8:	bhi	16000 <verify_monster@@Base+0x814>
   15fec:	movw	r0, #27308	; 0x6aac
   15ff0:	movt	r0, #2
   15ff4:	bl	129c8 <puts@plt>
   15ff8:	mvn	r0, #0
   15ffc:	b	15868 <verify_monster@@Base+0x7c>
   16000:	ldrh	r3, [r4, #52]	; 0x34
   16004:	cmp	r3, #0
   16008:	beq	15fec <verify_monster@@Base+0x800>
   1600c:	ldr	r2, [r8, r3]
   16010:	add	r3, r8, r3
   16014:	add	r2, r2, #4
   16018:	adds	r1, r3, r2
   1601c:	beq	161b0 <verify_monster@@Base+0x9c4>
   16020:	ldr	ip, [r1, #-4]
   16024:	cmp	ip, #4
   16028:	bne	161b0 <verify_monster@@Base+0x9c4>
   1602c:	ldrb	r3, [r3, r2]
   16030:	ldr	r2, [sp, #4]
   16034:	cmp	r2, r3
   16038:	bne	162ec <verify_monster@@Base+0xb00>
   1603c:	ldrb	r3, [r1, #1]
   16040:	ldr	r2, [sp, #8]
   16044:	cmp	r2, r3
   16048:	bne	161fc <verify_monster@@Base+0xa10>
   1604c:	ldrb	r3, [r1, #2]
   16050:	ldr	r2, [sp, #12]
   16054:	cmp	r2, r3
   16058:	bne	16200 <verify_monster@@Base+0xa14>
   1605c:	ldrb	r2, [r1, #3]
   16060:	ldr	r3, [sp, #16]
   16064:	cmp	r2, r3
   16068:	movne	r7, #3
   1606c:	bne	16200 <verify_monster@@Base+0xa14>
   16070:	mov	r0, r8
   16074:	bl	130fc <_start@@Base+0x4ec>
   16078:	cmp	r0, #1
   1607c:	bne	16400 <verify_monster@@Base+0xc14>
   16080:	mov	r0, r8
   16084:	bl	13164 <_start@@Base+0x554>
   16088:	bl	131d8 <_start@@Base+0x5c8>
   1608c:	movw	r1, #26792	; 0x68a8
   16090:	movt	r1, #2
   16094:	bl	12968 <strcmp@plt>
   16098:	cmp	r0, #0
   1609c:	bne	163ec <verify_monster@@Base+0xc00>
   160a0:	ldrh	r5, [r4, #28]
   160a4:	cmp	r5, #0
   160a8:	beq	160b8 <verify_monster@@Base+0x8cc>
   160ac:	ldr	r3, [r8, r5]
   160b0:	add	r5, r8, r5
   160b4:	add	r5, r5, r3
   160b8:	mov	r0, r5
   160bc:	bl	131d8 <_start@@Base+0x5c8>
   160c0:	movw	r1, #27476	; 0x6b54
   160c4:	movt	r1, #2
   160c8:	bl	12968 <strcmp@plt>
   160cc:	cmp	r0, #0
   160d0:	bne	16464 <verify_monster@@Base+0xc78>
   160d4:	mov	r0, r5
   160d8:	bl	130fc <_start@@Base+0x4ec>
   160dc:	cmp	r0, #0
   160e0:	bne	16450 <verify_monster@@Base+0xc64>
   160e4:	cmp	r5, #0
   160e8:	beq	164b4 <verify_monster@@Base+0xcc8>
   160ec:	ldr	r3, [r5]
   160f0:	sub	r3, r5, r3
   160f4:	ldrh	r2, [r3]
   160f8:	cmp	r2, #27
   160fc:	bls	164b0 <verify_monster@@Base+0xcc4>
   16100:	ldrh	r3, [r3, #26]
   16104:	cmp	r3, #0
   16108:	beq	164b0 <verify_monster@@Base+0xcc4>
   1610c:	ldr	r2, [r5, r3]
   16110:	add	r3, r5, r3
   16114:	add	r2, r2, #4
   16118:	adds	r3, r3, r2
   1611c:	beq	164b0 <verify_monster@@Base+0xcc4>
   16120:	ldr	r2, [r3, #-4]
   16124:	mvn	r6, #0
   16128:	adds	r2, r2, r6
   1612c:	add	r5, r3, r2, lsl #2
   16130:	bcc	164b0 <verify_monster@@Base+0xcc4>
   16134:	ldr	r3, [r3, r2, lsl #2]
   16138:	add	r5, r5, r3
   1613c:	mov	r0, r5
   16140:	bl	130fc <_start@@Base+0x4ec>
   16144:	cmp	r0, #1
   16148:	bne	1643c <verify_monster@@Base+0xc50>
   1614c:	mov	r0, r5
   16150:	bl	13164 <_start@@Base+0x554>
   16154:	bl	131d8 <_start@@Base+0x5c8>
   16158:	movw	r1, #26792	; 0x68a8
   1615c:	movt	r1, #2
   16160:	bl	12968 <strcmp@plt>
   16164:	cmp	r0, #0
   16168:	bne	16428 <verify_monster@@Base+0xc3c>
   1616c:	ldrh	r3, [r4, #34]	; 0x22
   16170:	cmp	r3, #0
   16174:	bne	16218 <verify_monster@@Base+0xa2c>
   16178:	movw	r0, #27684	; 0x6c24
   1617c:	movt	r0, #2
   16180:	bl	129c8 <puts@plt>
   16184:	mvn	r0, #0
   16188:	b	15868 <verify_monster@@Base+0x7c>
   1618c:	movw	r0, #26428	; 0x673c
   16190:	movt	r0, #2
   16194:	bl	129c8 <puts@plt>
   16198:	mvn	r0, #0
   1619c:	b	15868 <verify_monster@@Base+0x7c>
   161a0:	mov	r1, #0
   161a4:	b	15f14 <verify_monster@@Base+0x728>
   161a8:	mov	r1, #1
   161ac:	b	15f14 <verify_monster@@Base+0x728>
   161b0:	movw	r0, #27336	; 0x6ac8
   161b4:	movt	r0, #2
   161b8:	bl	129c8 <puts@plt>
   161bc:	mvn	r0, #0
   161c0:	b	15868 <verify_monster@@Base+0x7c>
   161c4:	mov	r1, #2
   161c8:	b	15f14 <verify_monster@@Base+0x728>
   161cc:	mov	r1, #3
   161d0:	b	15f14 <verify_monster@@Base+0x728>
   161d4:	movw	r0, #26380	; 0x670c
   161d8:	movt	r0, #2
   161dc:	bl	129c8 <puts@plt>
   161e0:	mvn	r0, #0
   161e4:	b	15868 <verify_monster@@Base+0x7c>
   161e8:	movw	r0, #26520	; 0x6798
   161ec:	movt	r0, #2
   161f0:	bl	129c8 <puts@plt>
   161f4:	mvn	r0, #0
   161f8:	b	15868 <verify_monster@@Base+0x7c>
   161fc:	mov	r7, #1
   16200:	mov	r1, r7
   16204:	movw	r0, #27368	; 0x6ae8
   16208:	movt	r0, #2
   1620c:	bl	12974 <printf@plt>
   16210:	mvn	r0, #0
   16214:	b	15868 <verify_monster@@Base+0x7c>
   16218:	ldrb	r3, [r8, r3]
   1621c:	cmp	r3, #0
   16220:	bne	16178 <verify_monster@@Base+0x98c>
   16224:	ldrh	r3, [r4, #32]
   16228:	cmp	r3, #0
   1622c:	beq	16414 <verify_monster@@Base+0xc28>
   16230:	ldr	r2, [r8, r3]
   16234:	add	r8, r8, r3
   16238:	adds	r3, r8, r2
   1623c:	beq	16494 <verify_monster@@Base+0xca8>
   16240:	ldr	r2, [r8, r2]
   16244:	sub	r3, r3, r2
   16248:	ldrh	r2, [r3]
   1624c:	cmp	r2, #5
   16250:	bls	15868 <verify_monster@@Base+0x7c>
   16254:	ldrh	r1, [r3, #4]
   16258:	cmp	r1, #0
   1625c:	bne	16288 <verify_monster@@Base+0xa9c>
   16260:	cmp	r2, #7
   16264:	bls	15868 <verify_monster@@Base+0x7c>
   16268:	ldrh	r1, [r3, #6]
   1626c:	cmp	r1, #0
   16270:	bne	16288 <verify_monster@@Base+0xa9c>
   16274:	cmp	r2, #9
   16278:	bls	15868 <verify_monster@@Base+0x7c>
   1627c:	ldrh	r3, [r3, #8]
   16280:	cmp	r3, #0
   16284:	beq	15868 <verify_monster@@Base+0x7c>
   16288:	movw	r0, #27736	; 0x6c58
   1628c:	movt	r0, #2
   16290:	bl	129c8 <puts@plt>
   16294:	mvn	r0, #0
   16298:	b	15868 <verify_monster@@Base+0x7c>
   1629c:	movw	r0, #26284	; 0x66ac
   162a0:	movt	r0, #2
   162a4:	bl	129c8 <puts@plt>
   162a8:	mvn	r0, #0
   162ac:	b	15868 <verify_monster@@Base+0x7c>
   162b0:	movw	r0, #24724	; 0x6094
   162b4:	movt	r0, #2
   162b8:	bl	129c8 <puts@plt>
   162bc:	mvn	r0, #0
   162c0:	b	15868 <verify_monster@@Base+0x7c>
   162c4:	movw	r0, #26540	; 0x67ac
   162c8:	movt	r0, #2
   162cc:	bl	129c8 <puts@plt>
   162d0:	mvn	r0, #0
   162d4:	b	15868 <verify_monster@@Base+0x7c>
   162d8:	movw	r0, #26800	; 0x68b0
   162dc:	movt	r0, #2
   162e0:	bl	129c8 <puts@plt>
   162e4:	mvn	r0, #0
   162e8:	b	15868 <verify_monster@@Base+0x7c>
   162ec:	mov	r7, r0
   162f0:	b	16200 <verify_monster@@Base+0xa14>
   162f4:	movw	r0, #26224	; 0x6670
   162f8:	movt	r0, #2
   162fc:	bl	129c8 <puts@plt>
   16300:	mvn	r0, #0
   16304:	b	15868 <verify_monster@@Base+0x7c>
   16308:	mov	r1, r7
   1630c:	movw	r0, #26856	; 0x68e8
   16310:	movt	r0, #2
   16314:	bl	12974 <printf@plt>
   16318:	mvn	r0, #0
   1631c:	b	15868 <verify_monster@@Base+0x7c>
   16320:	mov	r1, r7
   16324:	movw	r0, #26948	; 0x6944
   16328:	movt	r0, #2
   1632c:	bl	12974 <printf@plt>
   16330:	mvn	r0, #0
   16334:	b	15868 <verify_monster@@Base+0x7c>
   16338:	mov	r1, r7
   1633c:	movw	r0, #26900	; 0x6914
   16340:	movt	r0, #2
   16344:	bl	12974 <printf@plt>
   16348:	mvn	r0, #0
   1634c:	b	15868 <verify_monster@@Base+0x7c>
   16350:	mov	r1, r6
   16354:	movw	r0, #27100	; 0x69dc
   16358:	movt	r0, #2
   1635c:	bl	12974 <printf@plt>
   16360:	mvn	r0, #0
   16364:	b	15868 <verify_monster@@Base+0x7c>
   16368:	mov	r1, r7
   1636c:	movw	r0, #27060	; 0x69b4
   16370:	movt	r0, #2
   16374:	bl	12974 <printf@plt>
   16378:	mvn	r0, #0
   1637c:	b	15868 <verify_monster@@Base+0x7c>
   16380:	mov	r1, r7
   16384:	movw	r0, #27024	; 0x6990
   16388:	movt	r0, #2
   1638c:	bl	12974 <printf@plt>
   16390:	mvn	r0, #0
   16394:	b	15868 <verify_monster@@Base+0x7c>
   16398:	mov	r1, r7
   1639c:	movw	r0, #26988	; 0x696c
   163a0:	movt	r0, #2
   163a4:	bl	12974 <printf@plt>
   163a8:	mvn	r0, #0
   163ac:	b	15868 <verify_monster@@Base+0x7c>
   163b0:	movw	r0, #26776	; 0x6898
   163b4:	movt	r0, #2
   163b8:	bl	12974 <printf@plt>
   163bc:	mvn	r0, #0
   163c0:	b	15868 <verify_monster@@Base+0x7c>
   163c4:	movw	r0, #27192	; 0x6a38
   163c8:	movt	r0, #2
   163cc:	bl	129c8 <puts@plt>
   163d0:	mvn	r0, #0
   163d4:	b	15868 <verify_monster@@Base+0x7c>
   163d8:	movw	r0, #27284	; 0x6a94
   163dc:	movt	r0, #2
   163e0:	bl	129c8 <puts@plt>
   163e4:	mvn	r0, #0
   163e8:	b	15868 <verify_monster@@Base+0x7c>
   163ec:	movw	r0, #27444	; 0x6b34
   163f0:	movt	r0, #2
   163f4:	bl	129c8 <puts@plt>
   163f8:	mvn	r0, #0
   163fc:	b	15868 <verify_monster@@Base+0x7c>
   16400:	movw	r0, #27400	; 0x6b08
   16404:	movt	r0, #2
   16408:	bl	129c8 <puts@plt>
   1640c:	mvn	r0, #0
   16410:	b	15868 <verify_monster@@Base+0x7c>
   16414:	movw	r0, #27704	; 0x6c38
   16418:	movt	r0, #2
   1641c:	bl	129c8 <puts@plt>
   16420:	mvn	r0, #0
   16424:	b	15868 <verify_monster@@Base+0x7c>
   16428:	movw	r0, #27624	; 0x6be8
   1642c:	movt	r0, #2
   16430:	bl	129c8 <puts@plt>
   16434:	mov	r0, r6
   16438:	b	15868 <verify_monster@@Base+0x7c>
   1643c:	movw	r0, #27556	; 0x6ba4
   16440:	movt	r0, #2
   16444:	bl	129c8 <puts@plt>
   16448:	mov	r0, r6
   1644c:	b	15868 <verify_monster@@Base+0x7c>
   16450:	movw	r0, #27520	; 0x6b80
   16454:	movt	r0, #2
   16458:	bl	129c8 <puts@plt>
   1645c:	mvn	r0, #0
   16460:	b	15868 <verify_monster@@Base+0x7c>
   16464:	movw	r0, #27488	; 0x6b60
   16468:	movt	r0, #2
   1646c:	bl	129c8 <puts@plt>
   16470:	mvn	r0, #0
   16474:	b	15868 <verify_monster@@Base+0x7c>
   16478:	movw	r1, #26688	; 0x6840
   1647c:	movt	r1, #2
   16480:	ldr	r3, [pc, #-2344]	; 15b60 <verify_monster@@Base+0x374>
   16484:	movw	r0, #26772	; 0x6894
   16488:	movt	r0, #2
   1648c:	movw	r2, #662	; 0x296
   16490:	bl	12a64 <__assert_fail@plt>
   16494:	movw	r1, #23600	; 0x5c30
   16498:	movt	r1, #2
   1649c:	ldr	r3, [pc, #-2368]	; 15b64 <verify_monster@@Base+0x378>
   164a0:	movw	r0, #23700	; 0x5c94
   164a4:	movt	r0, #2
   164a8:	movw	r2, #607	; 0x25f
   164ac:	bl	12a64 <__assert_fail@plt>
   164b0:	bl	130ac <_start@@Base+0x49c>
   164b4:	bl	13084 <_start@@Base+0x474>

000164b8 <gen_monster@@Base>:
   164b8:	ldr	r3, [pc, #2516]	; 16e94 <gen_monster@@Base+0x9dc>
   164bc:	movw	ip, #1292	; 0x50c
   164c0:	movw	r2, #21692	; 0x54bc
   164c4:	movt	r2, #2
   164c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   164cc:	mov	r5, r1
   164d0:	strd	r6, [sp, #8]
   164d4:	mov	r4, r0
   164d8:	ldrd	r6, [r2, ip]
   164dc:	mov	r2, #256	; 0x100
   164e0:	movt	r2, #1
   164e4:	str	lr, [sp, #16]
   164e8:	sub	sp, sp, #52	; 0x34
   164ec:	ldrh	r3, [r3, #8]
   164f0:	str	r2, [sp, #12]
   164f4:	strd	r6, [sp, #24]
   164f8:	strh	r3, [sp, #32]
   164fc:	bl	1e2e0 <flatcc_builder_reset@@Base>
   16500:	cmp	r5, #0
   16504:	movw	r1, #24784	; 0x60d0
   16508:	movt	r1, #2
   1650c:	moveq	r3, r5
   16510:	movne	r3, #2
   16514:	mov	r2, #0
   16518:	mov	r0, r4
   1651c:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   16520:	cmp	r0, #0
   16524:	bne	16534 <gen_monster@@Base+0x7c>
   16528:	mov	r1, #36	; 0x24
   1652c:	mov	r0, r4
   16530:	bl	206a8 <flatcc_builder_start_table@@Base>
   16534:	mov	r3, #2
   16538:	mov	r0, r4
   1653c:	mov	r2, r3
   16540:	mov	r1, r3
   16544:	bl	22a20 <flatcc_builder_table_add@@Base>
   16548:	cmp	r0, #0
   1654c:	mov	r2, #32
   16550:	movne	r3, #80	; 0x50
   16554:	mov	r1, #0
   16558:	strhne	r3, [r0]
   1655c:	mov	r3, #16
   16560:	mov	r0, r4
   16564:	bl	22a20 <flatcc_builder_table_add@@Base>
   16568:	mov	r3, r0
   1656c:	mov	lr, #1065353216	; 0x3f800000
   16570:	mov	ip, #1073741824	; 0x40000000
   16574:	movw	r2, #52429	; 0xcccd
   16578:	movt	r2, #49228	; 0xc04c
   1657c:	movw	r1, #25080	; 0x61f8
   16580:	movt	r1, #2
   16584:	mov	r0, r4
   16588:	str	lr, [r3]
   1658c:	str	ip, [r3, #4]
   16590:	str	r2, [r3, #8]
   16594:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16598:	subs	r5, r0, #0
   1659c:	beq	165b4 <gen_monster@@Base+0xfc>
   165a0:	mov	r1, #3
   165a4:	mov	r0, r4
   165a8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   165ac:	cmp	r0, #0
   165b0:	strne	r5, [r0]
   165b4:	mov	r3, #1
   165b8:	mov	r1, #6
   165bc:	mov	r2, r3
   165c0:	mov	r0, r4
   165c4:	bl	22a20 <flatcc_builder_table_add@@Base>
   165c8:	cmp	r0, #0
   165cc:	mov	r2, #1
   165d0:	movne	r3, #2
   165d4:	mvn	ip, #0
   165d8:	add	r1, sp, #24
   165dc:	strbne	r3, [r0]
   165e0:	mov	r3, r2
   165e4:	mov	r0, r4
   165e8:	stm	sp, {r2, ip}
   165ec:	mov	r2, #10
   165f0:	bl	211e8 <flatcc_builder_create_vector@@Base>
   165f4:	subs	r5, r0, #0
   165f8:	beq	16610 <gen_monster@@Base+0x158>
   165fc:	mov	r1, #5
   16600:	mov	r0, r4
   16604:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16608:	cmp	r0, #0
   1660c:	strne	r5, [r0]
   16610:	mvn	r3, #-1073741824	; 0xc0000000
   16614:	mov	r2, #2
   16618:	mov	r1, #4
   1661c:	mov	r0, r4
   16620:	bl	1ff10 <flatcc_builder_start_vector@@Base>
   16624:	mov	r1, #1
   16628:	mov	r0, r4
   1662c:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   16630:	mov	r3, r0
   16634:	mov	r2, #32
   16638:	mov	r0, #16
   1663c:	mov	r1, #2
   16640:	strh	r0, [r3]
   16644:	mov	r0, r4
   16648:	strb	r2, [r3, #2]
   1664c:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   16650:	mov	r3, r0
   16654:	mov	r1, #48	; 0x30
   16658:	mov	r0, #64	; 0x40
   1665c:	mov	ip, #80	; 0x50
   16660:	mov	r2, #96	; 0x60
   16664:	strh	r1, [r3]
   16668:	mov	r1, #1
   1666c:	strb	r0, [r3, #2]
   16670:	mov	r0, r4
   16674:	strh	ip, [r3, #4]
   16678:	strb	r2, [r3, #6]
   1667c:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   16680:	cmp	r0, #0
   16684:	beq	16698 <gen_monster@@Base+0x1e0>
   16688:	mov	r2, #112	; 0x70
   1668c:	mvn	r3, #127	; 0x7f
   16690:	strh	r2, [r0]
   16694:	strb	r3, [r0, #2]
   16698:	mvn	r3, #110	; 0x6e
   1669c:	mov	r2, #400	; 0x190
   166a0:	mov	r1, #1
   166a4:	mov	r0, r4
   166a8:	strh	r2, [sp, #8]
   166ac:	strb	r3, [sp, #10]
   166b0:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   166b4:	cmp	r0, #0
   166b8:	mov	r1, #1
   166bc:	ldrne	r3, [sp, #8]
   166c0:	strne	r3, [r0]
   166c4:	mov	r0, r4
   166c8:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   166cc:	cmp	r0, #0
   166d0:	mov	r1, #1
   166d4:	ldrne	r3, [sp, #8]
   166d8:	strne	r3, [r0]
   166dc:	mov	r0, r4
   166e0:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   166e4:	cmp	r0, #0
   166e8:	ldrne	r3, [sp, #8]
   166ec:	strne	r3, [r0]
   166f0:	mov	r0, r4
   166f4:	bl	21554 <flatcc_builder_vector_count@@Base>
   166f8:	cmp	r0, #7
   166fc:	bne	16e6c <gen_monster@@Base+0x9b4>
   16700:	mov	r1, #2
   16704:	mov	r0, r4
   16708:	bl	1fd28 <flatcc_builder_truncate_vector@@Base>
   1670c:	mov	r0, r4
   16710:	bl	21554 <flatcc_builder_vector_count@@Base>
   16714:	cmp	r0, #5
   16718:	bne	16e50 <gen_monster@@Base+0x998>
   1671c:	mov	r0, r4
   16720:	bl	21560 <flatcc_builder_vector_edit@@Base>
   16724:	mov	r2, r0
   16728:	mov	r0, r4
   1672c:	ldrh	r3, [r2, #16]
   16730:	add	r3, r3, #1
   16734:	strh	r3, [r2, #16]
   16738:	bl	21344 <flatcc_builder_end_vector@@Base>
   1673c:	subs	r5, r0, #0
   16740:	beq	16758 <gen_monster@@Base+0x2a0>
   16744:	mov	r1, #9
   16748:	mov	r0, r4
   1674c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16750:	cmp	r0, #0
   16754:	strne	r5, [r0]
   16758:	mov	r1, #36	; 0x24
   1675c:	mov	r0, r4
   16760:	bl	206a8 <flatcc_builder_start_table@@Base>
   16764:	movw	r1, #26792	; 0x68a8
   16768:	movt	r1, #2
   1676c:	mov	r2, #7
   16770:	mov	r0, r4
   16774:	bl	22538 <flatcc_builder_create_string@@Base>
   16778:	subs	r5, r0, #0
   1677c:	beq	16794 <gen_monster@@Base+0x2dc>
   16780:	mov	r1, #3
   16784:	mov	r0, r4
   16788:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1678c:	cmp	r0, #0
   16790:	strne	r5, [r0]
   16794:	mov	r2, #1
   16798:	ldr	r1, [pc, #1784]	; 16e98 <gen_monster@@Base+0x9e0>
   1679c:	mov	r0, r4
   167a0:	bl	20f8c <flatcc_builder_check_required@@Base>
   167a4:	cmp	r0, #0
   167a8:	beq	16dfc <gen_monster@@Base+0x944>
   167ac:	mov	r0, r4
   167b0:	bl	21028 <flatcc_builder_end_table@@Base>
   167b4:	mov	r5, r0
   167b8:	mov	r0, r4
   167bc:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   167c0:	mov	r1, #2
   167c4:	mov	r0, r4
   167c8:	bl	1f5dc <flatcc_builder_extend_offset_vector@@Base>
   167cc:	mov	r3, r0
   167d0:	mov	r1, #36	; 0x24
   167d4:	mov	r0, r4
   167d8:	str	r5, [r3]
   167dc:	str	r5, [r3, #4]
   167e0:	bl	206a8 <flatcc_builder_start_table@@Base>
   167e4:	movw	r1, #26892	; 0x690c
   167e8:	movt	r1, #2
   167ec:	mov	r2, #30
   167f0:	mov	r0, r4
   167f4:	bl	22738 <flatcc_builder_create_string_strn@@Base>
   167f8:	subs	r6, r0, #0
   167fc:	beq	16814 <gen_monster@@Base+0x35c>
   16800:	mov	r1, #3
   16804:	mov	r0, r4
   16808:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1680c:	cmp	r0, #0
   16810:	strne	r6, [r0]
   16814:	mov	r2, #1
   16818:	ldr	r1, [pc, #1656]	; 16e98 <gen_monster@@Base+0x9e0>
   1681c:	mov	r0, r4
   16820:	bl	20f8c <flatcc_builder_check_required@@Base>
   16824:	cmp	r0, #0
   16828:	beq	16dfc <gen_monster@@Base+0x944>
   1682c:	mov	r0, r4
   16830:	bl	21028 <flatcc_builder_end_table@@Base>
   16834:	subs	r1, r0, #0
   16838:	beq	16e8c <gen_monster@@Base+0x9d4>
   1683c:	mov	r0, r4
   16840:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   16844:	ldr	r6, [r0]
   16848:	mov	r1, #3
   1684c:	mov	r0, r4
   16850:	bl	1f5dc <flatcc_builder_extend_offset_vector@@Base>
   16854:	mov	r3, r0
   16858:	mov	r1, #1
   1685c:	mov	r0, r4
   16860:	stm	r3, {r5, r6}
   16864:	bl	1fdcc <flatcc_builder_truncate_offset_vector@@Base>
   16868:	mov	r0, r4
   1686c:	bl	21a54 <flatcc_builder_offset_vector_count@@Base>
   16870:	cmp	r0, #5
   16874:	bne	16e18 <gen_monster@@Base+0x960>
   16878:	mov	r1, #36	; 0x24
   1687c:	mov	r0, r4
   16880:	bl	206a8 <flatcc_builder_start_table@@Base>
   16884:	movw	r1, #27912	; 0x6d08
   16888:	movt	r1, #2
   1688c:	mov	r2, #8
   16890:	mov	r0, r4
   16894:	bl	22738 <flatcc_builder_create_string_strn@@Base>
   16898:	subs	r6, r0, #0
   1689c:	beq	168b4 <gen_monster@@Base+0x3fc>
   168a0:	mov	r1, #3
   168a4:	mov	r0, r4
   168a8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   168ac:	cmp	r0, #0
   168b0:	strne	r6, [r0]
   168b4:	mov	r2, #1
   168b8:	ldr	r1, [pc, #1496]	; 16e98 <gen_monster@@Base+0x9e0>
   168bc:	mov	r0, r4
   168c0:	bl	20f8c <flatcc_builder_check_required@@Base>
   168c4:	cmp	r0, #0
   168c8:	beq	16dfc <gen_monster@@Base+0x944>
   168cc:	mov	r0, r4
   168d0:	bl	21028 <flatcc_builder_end_table@@Base>
   168d4:	subs	r1, r0, #0
   168d8:	beq	16e8c <gen_monster@@Base+0x9d4>
   168dc:	mov	r0, r4
   168e0:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   168e4:	ldr	r3, [r0]
   168e8:	mov	r0, r4
   168ec:	str	r3, [sp, #16]
   168f0:	bl	21a54 <flatcc_builder_offset_vector_count@@Base>
   168f4:	cmp	r0, #6
   168f8:	bne	16e34 <gen_monster@@Base+0x97c>
   168fc:	mov	r0, r4
   16900:	bl	21a4c <flatcc_builder_offset_vector_edit@@Base>
   16904:	mov	r3, r0
   16908:	mov	r2, #2
   1690c:	ldr	lr, [r3, #8]
   16910:	add	r1, sp, #16
   16914:	mov	r0, r4
   16918:	ldr	ip, [r3, #20]
   1691c:	str	r5, [r3, #20]
   16920:	str	lr, [sp, #20]
   16924:	str	ip, [r3]
   16928:	bl	1f7c0 <flatcc_builder_append_offset_vector@@Base>
   1692c:	mov	r0, r4
   16930:	bl	21708 <flatcc_builder_end_offset_vector@@Base>
   16934:	subs	r6, r0, #0
   16938:	beq	16950 <gen_monster@@Base+0x498>
   1693c:	mov	r1, #11
   16940:	mov	r0, r4
   16944:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16948:	cmp	r0, #0
   1694c:	strne	r6, [r0]
   16950:	movw	r1, #27184	; 0x6a30
   16954:	movt	r1, #2
   16958:	mov	r0, r4
   1695c:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16960:	mov	r2, #2
   16964:	ldr	r1, [pc, #1328]	; 16e9c <gen_monster@@Base+0x9e4>
   16968:	str	r0, [sp, #36]	; 0x24
   1696c:	mov	r0, r4
   16970:	bl	22538 <flatcc_builder_create_string@@Base>
   16974:	movw	r1, #27276	; 0x6a8c
   16978:	movt	r1, #2
   1697c:	str	r0, [sp, #40]	; 0x28
   16980:	mov	r0, r4
   16984:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16988:	mov	r2, #3
   1698c:	add	r1, sp, #36	; 0x24
   16990:	str	r0, [sp, #44]	; 0x2c
   16994:	mov	r0, r4
   16998:	bl	201e0 <flatcc_builder_create_offset_vector@@Base>
   1699c:	subs	r6, r0, #0
   169a0:	beq	169b8 <gen_monster@@Base+0x500>
   169a4:	mov	r1, #10
   169a8:	mov	r0, r4
   169ac:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   169b0:	cmp	r0, #0
   169b4:	strne	r6, [r0]
   169b8:	mov	r2, #1
   169bc:	mvn	r3, #0
   169c0:	mov	r1, r2
   169c4:	mov	r0, r4
   169c8:	bl	1ff10 <flatcc_builder_start_vector@@Base>
   169cc:	mov	r2, #1
   169d0:	add	r1, sp, #12
   169d4:	mov	r0, r4
   169d8:	bl	1f498 <flatcc_builder_append_vector@@Base>
   169dc:	mov	r2, #3
   169e0:	add	r1, sp, #13
   169e4:	mov	r0, r4
   169e8:	bl	1f498 <flatcc_builder_append_vector@@Base>
   169ec:	mov	r0, r4
   169f0:	bl	21344 <flatcc_builder_end_vector@@Base>
   169f4:	subs	r6, r0, #0
   169f8:	beq	16a10 <gen_monster@@Base+0x558>
   169fc:	mov	r1, #24
   16a00:	mov	r0, r4
   16a04:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16a08:	cmp	r0, #0
   16a0c:	strne	r6, [r0]
   16a10:	cmp	r5, #0
   16a14:	beq	16da8 <gen_monster@@Base+0x8f0>
   16a18:	mov	r3, #1
   16a1c:	mov	r1, #7
   16a20:	mov	r2, r3
   16a24:	mov	r0, r4
   16a28:	bl	22a20 <flatcc_builder_table_add@@Base>
   16a2c:	subs	r6, r0, #0
   16a30:	beq	16a54 <gen_monster@@Base+0x59c>
   16a34:	mov	r1, #8
   16a38:	mov	r0, r4
   16a3c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16a40:	cmp	r0, #0
   16a44:	beq	16a54 <gen_monster@@Base+0x59c>
   16a48:	mov	r3, #1
   16a4c:	strb	r3, [r6]
   16a50:	str	r5, [r0]
   16a54:	mov	r1, #36	; 0x24
   16a58:	mov	r0, r4
   16a5c:	bl	206a8 <flatcc_builder_start_table@@Base>
   16a60:	movw	r1, #27476	; 0x6b54
   16a64:	movt	r1, #2
   16a68:	mov	r0, r4
   16a6c:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16a70:	subs	r6, r0, #0
   16a74:	beq	16d90 <gen_monster@@Base+0x8d8>
   16a78:	mov	r1, #3
   16a7c:	mov	r0, r4
   16a80:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16a84:	subs	r3, r0, #0
   16a88:	beq	16d90 <gen_monster@@Base+0x8d8>
   16a8c:	mov	r0, r4
   16a90:	str	r6, [r3]
   16a94:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   16a98:	mov	r1, #36	; 0x24
   16a9c:	mov	r0, r4
   16aa0:	bl	206a8 <flatcc_builder_start_table@@Base>
   16aa4:	mov	r3, #1
   16aa8:	mov	r1, #7
   16aac:	mov	r2, r3
   16ab0:	mov	r0, r4
   16ab4:	bl	22a20 <flatcc_builder_table_add@@Base>
   16ab8:	subs	r6, r0, #0
   16abc:	beq	16ae0 <gen_monster@@Base+0x628>
   16ac0:	mov	r1, #8
   16ac4:	mov	r0, r4
   16ac8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16acc:	cmp	r0, #0
   16ad0:	beq	16ae0 <gen_monster@@Base+0x628>
   16ad4:	mov	r3, #1
   16ad8:	strb	r3, [r6]
   16adc:	str	r5, [r0]
   16ae0:	movw	r1, #27992	; 0x6d58
   16ae4:	movt	r1, #2
   16ae8:	mov	r0, r4
   16aec:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16af0:	subs	r6, r0, #0
   16af4:	beq	16b0c <gen_monster@@Base+0x654>
   16af8:	mov	r1, #3
   16afc:	mov	r0, r4
   16b00:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16b04:	cmp	r0, #0
   16b08:	strne	r6, [r0]
   16b0c:	mov	r2, #1
   16b10:	ldr	r1, [pc, #896]	; 16e98 <gen_monster@@Base+0x9e0>
   16b14:	mov	r0, r4
   16b18:	bl	20f8c <flatcc_builder_check_required@@Base>
   16b1c:	cmp	r0, #0
   16b20:	beq	16dfc <gen_monster@@Base+0x944>
   16b24:	mov	r0, r4
   16b28:	bl	21028 <flatcc_builder_end_table@@Base>
   16b2c:	subs	r1, r0, #0
   16b30:	beq	16b3c <gen_monster@@Base+0x684>
   16b34:	mov	r0, r4
   16b38:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   16b3c:	mov	r1, #36	; 0x24
   16b40:	mov	r0, r4
   16b44:	bl	206a8 <flatcc_builder_start_table@@Base>
   16b48:	cmp	r5, #0
   16b4c:	beq	16b8c <gen_monster@@Base+0x6d4>
   16b50:	mov	r3, #1
   16b54:	mov	r1, #7
   16b58:	mov	r2, r3
   16b5c:	mov	r0, r4
   16b60:	bl	22a20 <flatcc_builder_table_add@@Base>
   16b64:	subs	r6, r0, #0
   16b68:	beq	16b8c <gen_monster@@Base+0x6d4>
   16b6c:	mov	r1, #8
   16b70:	mov	r0, r4
   16b74:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16b78:	cmp	r0, #0
   16b7c:	beq	16b8c <gen_monster@@Base+0x6d4>
   16b80:	mov	r3, #1
   16b84:	strb	r3, [r6]
   16b88:	str	r5, [r0]
   16b8c:	movw	r1, #27992	; 0x6d58
   16b90:	movt	r1, #2
   16b94:	mov	r0, r4
   16b98:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16b9c:	subs	r6, r0, #0
   16ba0:	beq	16bb8 <gen_monster@@Base+0x700>
   16ba4:	mov	r1, #3
   16ba8:	mov	r0, r4
   16bac:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16bb0:	cmp	r0, #0
   16bb4:	strne	r6, [r0]
   16bb8:	mov	r2, #1
   16bbc:	ldr	r1, [pc, #724]	; 16e98 <gen_monster@@Base+0x9e0>
   16bc0:	mov	r0, r4
   16bc4:	bl	20f8c <flatcc_builder_check_required@@Base>
   16bc8:	cmp	r0, #0
   16bcc:	beq	16dfc <gen_monster@@Base+0x944>
   16bd0:	mov	r0, r4
   16bd4:	bl	21028 <flatcc_builder_end_table@@Base>
   16bd8:	subs	r1, r0, #0
   16bdc:	beq	16be8 <gen_monster@@Base+0x730>
   16be0:	mov	r0, r4
   16be4:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   16be8:	mov	r1, #36	; 0x24
   16bec:	mov	r0, r4
   16bf0:	bl	206a8 <flatcc_builder_start_table@@Base>
   16bf4:	mov	r1, #8
   16bf8:	mov	r0, r4
   16bfc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16c00:	cmp	r0, #0
   16c04:	movw	r1, #27992	; 0x6d58
   16c08:	movt	r1, #2
   16c0c:	strne	r5, [r0]
   16c10:	mov	r0, r4
   16c14:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16c18:	subs	r5, r0, #0
   16c1c:	beq	16c34 <gen_monster@@Base+0x77c>
   16c20:	mov	r1, #3
   16c24:	mov	r0, r4
   16c28:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16c2c:	cmp	r0, #0
   16c30:	strne	r5, [r0]
   16c34:	mov	r3, #1
   16c38:	mov	r1, #7
   16c3c:	mov	r2, r3
   16c40:	mov	r0, r4
   16c44:	bl	22a20 <flatcc_builder_table_add@@Base>
   16c48:	cmp	r0, #0
   16c4c:	mov	r2, #1
   16c50:	ldr	r1, [pc, #576]	; 16e98 <gen_monster@@Base+0x9e0>
   16c54:	movne	r3, #1
   16c58:	strbne	r3, [r0]
   16c5c:	mov	r0, r4
   16c60:	bl	20f8c <flatcc_builder_check_required@@Base>
   16c64:	cmp	r0, #0
   16c68:	beq	16dfc <gen_monster@@Base+0x944>
   16c6c:	mov	r0, r4
   16c70:	bl	21028 <flatcc_builder_end_table@@Base>
   16c74:	subs	r1, r0, #0
   16c78:	beq	16c84 <gen_monster@@Base+0x7cc>
   16c7c:	mov	r0, r4
   16c80:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   16c84:	mov	r0, r4
   16c88:	bl	21708 <flatcc_builder_end_offset_vector@@Base>
   16c8c:	subs	r5, r0, #0
   16c90:	beq	16ca8 <gen_monster@@Base+0x7f0>
   16c94:	mov	r1, #11
   16c98:	mov	r0, r4
   16c9c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16ca0:	cmp	r0, #0
   16ca4:	strne	r5, [r0]
   16ca8:	mov	r2, #1
   16cac:	ldr	r1, [pc, #484]	; 16e98 <gen_monster@@Base+0x9e0>
   16cb0:	mov	r0, r4
   16cb4:	bl	20f8c <flatcc_builder_check_required@@Base>
   16cb8:	cmp	r0, #0
   16cbc:	beq	16dfc <gen_monster@@Base+0x944>
   16cc0:	mov	r0, r4
   16cc4:	bl	21028 <flatcc_builder_end_table@@Base>
   16cc8:	subs	r5, r0, #0
   16ccc:	beq	16ce4 <gen_monster@@Base+0x82c>
   16cd0:	mov	r1, #12
   16cd4:	mov	r0, r4
   16cd8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16cdc:	cmp	r0, #0
   16ce0:	strne	r5, [r0]
   16ce4:	mov	r3, #1
   16ce8:	mov	r1, #15
   16cec:	mov	r2, r3
   16cf0:	mov	r0, r4
   16cf4:	bl	22a20 <flatcc_builder_table_add@@Base>
   16cf8:	cmp	r0, #0
   16cfc:	mov	r1, #3
   16d00:	movne	r3, #0
   16d04:	strbne	r3, [r0]
   16d08:	mov	r0, r4
   16d0c:	bl	206a8 <flatcc_builder_start_table@@Base>
   16d10:	mov	r2, #0
   16d14:	ldr	r1, [pc, #388]	; 16ea0 <gen_monster@@Base+0x9e8>
   16d18:	mov	r0, r4
   16d1c:	bl	20f8c <flatcc_builder_check_required@@Base>
   16d20:	cmp	r0, #0
   16d24:	beq	16e88 <gen_monster@@Base+0x9d0>
   16d28:	mov	r0, r4
   16d2c:	bl	21028 <flatcc_builder_end_table@@Base>
   16d30:	subs	r5, r0, #0
   16d34:	beq	16d4c <gen_monster@@Base+0x894>
   16d38:	mov	r1, #14
   16d3c:	mov	r0, r4
   16d40:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16d44:	cmp	r0, #0
   16d48:	strne	r5, [r0]
   16d4c:	mov	r2, #1
   16d50:	ldr	r1, [pc, #320]	; 16e98 <gen_monster@@Base+0x9e0>
   16d54:	mov	r0, r4
   16d58:	bl	20f8c <flatcc_builder_check_required@@Base>
   16d5c:	cmp	r0, #0
   16d60:	beq	16dfc <gen_monster@@Base+0x944>
   16d64:	mov	r0, r4
   16d68:	bl	21028 <flatcc_builder_end_table@@Base>
   16d6c:	mov	r1, r0
   16d70:	mov	r0, r4
   16d74:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   16d78:	mov	r0, #0
   16d7c:	add	sp, sp, #52	; 0x34
   16d80:	ldrd	r4, [sp]
   16d84:	ldrd	r6, [sp, #8]
   16d88:	add	sp, sp, #16
   16d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d90:	mov	r0, r4
   16d94:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   16d98:	mov	r1, #36	; 0x24
   16d9c:	mov	r0, r4
   16da0:	bl	206a8 <flatcc_builder_start_table@@Base>
   16da4:	b	16aa4 <gen_monster@@Base+0x5ec>
   16da8:	mov	r1, #36	; 0x24
   16dac:	mov	r0, r4
   16db0:	bl	206a8 <flatcc_builder_start_table@@Base>
   16db4:	movw	r1, #27476	; 0x6b54
   16db8:	movt	r1, #2
   16dbc:	mov	r0, r4
   16dc0:	bl	22630 <flatcc_builder_create_string_str@@Base>
   16dc4:	subs	r6, r0, #0
   16dc8:	beq	16e00 <gen_monster@@Base+0x948>
   16dcc:	mov	r1, #3
   16dd0:	mov	r0, r4
   16dd4:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   16dd8:	subs	r3, r0, #0
   16ddc:	beq	16e00 <gen_monster@@Base+0x948>
   16de0:	mov	r0, r4
   16de4:	str	r6, [r3]
   16de8:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   16dec:	mov	r1, #36	; 0x24
   16df0:	mov	r0, r4
   16df4:	bl	206a8 <flatcc_builder_start_table@@Base>
   16df8:	b	16ae0 <gen_monster@@Base+0x628>
   16dfc:	bl	134a0 <_start@@Base+0x890>
   16e00:	mov	r0, r4
   16e04:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   16e08:	mov	r1, #36	; 0x24
   16e0c:	mov	r0, r4
   16e10:	bl	206a8 <flatcc_builder_start_table@@Base>
   16e14:	b	16ae0 <gen_monster@@Base+0x628>
   16e18:	movw	r1, #26688	; 0x6840
   16e1c:	movt	r1, #2
   16e20:	ldr	r3, [pc, #124]	; 16ea4 <gen_monster@@Base+0x9ec>
   16e24:	movw	r0, #27860	; 0x6cd4
   16e28:	movt	r0, #2
   16e2c:	movw	r2, #923	; 0x39b
   16e30:	bl	12a64 <__assert_fail@plt>
   16e34:	movw	r1, #26688	; 0x6840
   16e38:	movt	r1, #2
   16e3c:	ldr	r3, [pc, #96]	; 16ea4 <gen_monster@@Base+0x9ec>
   16e40:	movw	r0, #27940	; 0x6d24
   16e44:	movt	r0, #2
   16e48:	movw	r2, #929	; 0x3a1
   16e4c:	bl	12a64 <__assert_fail@plt>
   16e50:	movw	r1, #26688	; 0x6840
   16e54:	movt	r1, #2
   16e58:	ldr	r3, [pc, #68]	; 16ea4 <gen_monster@@Base+0x9ec>
   16e5c:	movw	r0, #27820	; 0x6cac
   16e60:	movt	r0, #2
   16e64:	movw	r2, #883	; 0x373
   16e68:	bl	12a64 <__assert_fail@plt>
   16e6c:	movw	r1, #26688	; 0x6840
   16e70:	movt	r1, #2
   16e74:	ldr	r3, [pc, #40]	; 16ea4 <gen_monster@@Base+0x9ec>
   16e78:	movw	r0, #27780	; 0x6c84
   16e7c:	movt	r0, #2
   16e80:	movw	r2, #881	; 0x371
   16e84:	bl	12a64 <__assert_fail@plt>
   16e88:	bl	134c8 <_start@@Base+0x8b8>
   16e8c:	ldr	r3, [r1]
   16e90:	udf	#0
   16e94:	andeq	r5, r2, r8, asr #19
   16e98:	ldrdeq	r5, [r2], -ip
   16e9c:	andeq	r5, r2, r0, lsr #19
   16ea0:	andeq	r5, r2, r0, ror #19
   16ea4:	ldrdeq	r5, [r2], -r4

00016ea8 <test_monster@@Base>:
   16ea8:	mov	r1, #0
   16eac:	strd	r4, [sp, #-12]!
   16eb0:	mov	r4, r0
   16eb4:	str	lr, [sp, #8]
   16eb8:	sub	sp, sp, #12
   16ebc:	bl	164b8 <gen_monster@@Base>
   16ec0:	mov	r0, r4
   16ec4:	add	r1, sp, #4
   16ec8:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   16ecc:	movw	r3, #41072	; 0xa070
   16ed0:	movt	r3, #3
   16ed4:	ldr	r2, [sp, #4]
   16ed8:	mov	r1, r0
   16edc:	mov	r4, r0
   16ee0:	movw	r0, #25244	; 0x629c
   16ee4:	movt	r0, #2
   16ee8:	ldr	r3, [r3]
   16eec:	bl	12d28 <_start@@Base+0x118>
   16ef0:	mov	r0, r4
   16ef4:	movw	r3, #14640	; 0x3930
   16ef8:	movt	r3, #1
   16efc:	movw	r2, #24784	; 0x60d0
   16f00:	movt	r2, #2
   16f04:	ldr	r1, [sp, #4]
   16f08:	bl	24998 <flatcc_verify_table_as_root@@Base>
   16f0c:	cmp	r0, #0
   16f10:	bne	16f3c <test_monster@@Base+0x94>
   16f14:	mov	r0, r4
   16f18:	bl	157ec <verify_monster@@Base>
   16f1c:	mov	r5, r0
   16f20:	mov	r0, r4
   16f24:	bl	23658 <flatcc_builder_aligned_free@@Base>
   16f28:	mov	r0, r5
   16f2c:	add	sp, sp, #12
   16f30:	ldrd	r4, [sp]
   16f34:	add	sp, sp, #8
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	bl	23c68 <flatcc_verify_error_string@@Base>
   16f40:	mov	r1, r0
   16f44:	movw	r0, #28004	; 0x6d64
   16f48:	movt	r0, #2
   16f4c:	mvn	r5, #0
   16f50:	bl	12974 <printf@plt>
   16f54:	b	16f28 <test_monster@@Base+0x80>

00016f58 <test_monster_with_size@@Base>:
   16f58:	mov	r1, #1
   16f5c:	strd	r4, [sp, #-12]!
   16f60:	mov	r4, r0
   16f64:	str	lr, [sp, #8]
   16f68:	sub	sp, sp, #12
   16f6c:	bl	164b8 <gen_monster@@Base>
   16f70:	mov	r0, r4
   16f74:	add	r1, sp, #4
   16f78:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   16f7c:	movw	r3, #41072	; 0xa070
   16f80:	movt	r3, #3
   16f84:	ldr	r2, [sp, #4]
   16f88:	mov	r4, r0
   16f8c:	mov	r1, r0
   16f90:	movw	r0, #28048	; 0x6d90
   16f94:	movt	r0, #2
   16f98:	ldr	r3, [r3]
   16f9c:	bl	12d28 <_start@@Base+0x118>
   16fa0:	tst	r4, #15
   16fa4:	bne	17040 <test_monster_with_size@@Base+0xe8>
   16fa8:	mov	r5, r4
   16fac:	ldr	r1, [sp, #4]
   16fb0:	ldr	r3, [r5], #4
   16fb4:	sub	r1, r1, #4
   16fb8:	cmp	r1, r3
   16fbc:	bne	17008 <test_monster_with_size@@Base+0xb0>
   16fc0:	movw	r3, #14640	; 0x3930
   16fc4:	movt	r3, #1
   16fc8:	movw	r2, #24784	; 0x60d0
   16fcc:	movt	r2, #2
   16fd0:	mov	r0, r5
   16fd4:	bl	24998 <flatcc_verify_table_as_root@@Base>
   16fd8:	cmp	r0, #0
   16fdc:	bne	17024 <test_monster_with_size@@Base+0xcc>
   16fe0:	mov	r0, r5
   16fe4:	bl	157ec <verify_monster@@Base>
   16fe8:	mov	r5, r0
   16fec:	mov	r0, r4
   16ff0:	bl	23658 <flatcc_builder_aligned_free@@Base>
   16ff4:	mov	r0, r5
   16ff8:	add	sp, sp, #12
   16ffc:	ldrd	r4, [sp]
   17000:	add	sp, sp, #8
   17004:	pop	{pc}		; (ldr pc, [sp], #4)
   17008:	mov	r2, r1
   1700c:	movw	r0, #28176	; 0x6e10
   17010:	movt	r0, #2
   17014:	mov	r1, r3
   17018:	bl	12974 <printf@plt>
   1701c:	mvn	r5, #0
   17020:	b	16ff4 <test_monster_with_size@@Base+0x9c>
   17024:	bl	23c68 <flatcc_verify_error_string@@Base>
   17028:	mov	r1, r0
   1702c:	movw	r0, #28232	; 0x6e48
   17030:	movt	r0, #2
   17034:	mvn	r5, #0
   17038:	bl	12974 <printf@plt>
   1703c:	b	16ff4 <test_monster_with_size@@Base+0x9c>
   17040:	movw	r0, #28072	; 0x6da8
   17044:	movt	r0, #2
   17048:	bl	12974 <printf@plt>
   1704c:	mov	r1, r4
   17050:	movw	r0, #28156	; 0x6dfc
   17054:	movt	r0, #2
   17058:	mvn	r5, #0
   1705c:	bl	12974 <printf@plt>
   17060:	b	16ff4 <test_monster_with_size@@Base+0x9c>

00017064 <test_string@@Base>:
   17064:	strd	r4, [sp, #-16]!
   17068:	mov	r4, r0
   1706c:	str	r6, [sp, #8]
   17070:	str	lr, [sp, #12]
   17074:	bl	1e2e0 <flatcc_builder_reset@@Base>
   17078:	mov	r3, #0
   1707c:	mov	r0, r4
   17080:	mov	r2, r3
   17084:	movw	r1, #24784	; 0x60d0
   17088:	movt	r1, #2
   1708c:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   17090:	cmp	r0, #0
   17094:	bne	170a4 <test_string@@Base+0x40>
   17098:	mov	r1, #36	; 0x24
   1709c:	mov	r0, r4
   170a0:	bl	206a8 <flatcc_builder_start_table@@Base>
   170a4:	mov	r0, r4
   170a8:	bl	20438 <flatcc_builder_start_string@@Base>
   170ac:	mov	r1, #3
   170b0:	mov	r0, r4
   170b4:	bl	1f8fc <flatcc_builder_extend_string@@Base>
   170b8:	mov	r3, r0
   170bc:	mov	r2, #51	; 0x33
   170c0:	mov	r1, #49	; 0x31
   170c4:	mov	r0, #50	; 0x32
   170c8:	strb	r1, [r3]
   170cc:	movw	r1, #28328	; 0x6ea8
   170d0:	movt	r1, #2
   170d4:	strb	r0, [r3, #1]
   170d8:	mov	r0, r4
   170dc:	strb	r2, [r3, #2]
   170e0:	bl	1fafc <flatcc_builder_append_string_str@@Base>
   170e4:	mov	r0, r4
   170e8:	bl	22a14 <flatcc_builder_string_len@@Base>
   170ec:	cmp	r0, #4
   170f0:	bne	172cc <test_string@@Base+0x268>
   170f4:	mov	r2, #30
   170f8:	movw	r1, #28332	; 0x6eac
   170fc:	movt	r1, #2
   17100:	mov	r0, r4
   17104:	bl	1fc0c <flatcc_builder_append_string_strn@@Base>
   17108:	mov	r0, r4
   1710c:	bl	22a14 <flatcc_builder_string_len@@Base>
   17110:	cmp	r0, #8
   17114:	bne	172b0 <test_string@@Base+0x24c>
   17118:	mov	r2, #2
   1711c:	movw	r1, #28380	; 0x6edc
   17120:	movt	r1, #2
   17124:	mov	r0, r4
   17128:	bl	1f9f4 <flatcc_builder_append_string@@Base>
   1712c:	mov	r0, r4
   17130:	bl	22a14 <flatcc_builder_string_len@@Base>
   17134:	cmp	r0, #10
   17138:	bne	172e8 <test_string@@Base+0x284>
   1713c:	mov	r1, #3
   17140:	mov	r0, r4
   17144:	bl	1fe70 <flatcc_builder_truncate_string@@Base>
   17148:	mov	r0, r4
   1714c:	bl	22a14 <flatcc_builder_string_len@@Base>
   17150:	cmp	r0, #7
   17154:	bne	17274 <test_string@@Base+0x210>
   17158:	mov	r0, r4
   1715c:	bl	22a0c <flatcc_builder_string_edit@@Base>
   17160:	mov	r3, #46	; 0x2e
   17164:	strb	r3, [r0, #4]
   17168:	mov	r0, r4
   1716c:	bl	22844 <flatcc_builder_end_string@@Base>
   17170:	subs	r5, r0, #0
   17174:	beq	1718c <test_string@@Base+0x128>
   17178:	mov	r1, #3
   1717c:	mov	r0, r4
   17180:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   17184:	cmp	r0, #0
   17188:	strne	r5, [r0]
   1718c:	mov	r2, #1
   17190:	ldr	r1, [pc, #364]	; 17304 <test_string@@Base+0x2a0>
   17194:	mov	r0, r4
   17198:	bl	20f8c <flatcc_builder_check_required@@Base>
   1719c:	cmp	r0, #0
   171a0:	beq	172ac <test_string@@Base+0x248>
   171a4:	mov	r0, r4
   171a8:	bl	21028 <flatcc_builder_end_table@@Base>
   171ac:	mov	r1, r0
   171b0:	mov	r0, r4
   171b4:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   171b8:	mov	r0, r4
   171bc:	mov	r1, #0
   171c0:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   171c4:	cmp	r0, #0
   171c8:	beq	17290 <test_string@@Base+0x22c>
   171cc:	ldr	r2, [r0, #4]
   171d0:	movw	r3, #20301	; 0x4f4d
   171d4:	movt	r3, #21326	; 0x534e
   171d8:	cmp	r2, r3
   171dc:	beq	171e4 <test_string@@Base+0x180>
   171e0:	bl	131b0 <_start@@Base+0x5a0>
   171e4:	ldr	r2, [r0]
   171e8:	adds	r3, r0, r2
   171ec:	beq	171e0 <test_string@@Base+0x17c>
   171f0:	ldr	r2, [r0, r2]
   171f4:	sub	r2, r3, r2
   171f8:	ldrh	r1, [r2]
   171fc:	cmp	r1, #11
   17200:	bls	17258 <test_string@@Base+0x1f4>
   17204:	ldrh	r2, [r2, #10]
   17208:	cmp	r2, #0
   1720c:	beq	17258 <test_string@@Base+0x1f4>
   17210:	ldr	r0, [r3, r2]
   17214:	add	r3, r3, r2
   17218:	movw	r1, #28464	; 0x6f30
   1721c:	movt	r1, #2
   17220:	add	r0, r0, #4
   17224:	add	r0, r3, r0
   17228:	bl	12968 <strcmp@plt>
   1722c:	cmp	r0, #0
   17230:	bne	17244 <test_string@@Base+0x1e0>
   17234:	ldrd	r4, [sp]
   17238:	ldr	r6, [sp, #8]
   1723c:	add	sp, sp, #12
   17240:	pop	{pc}		; (ldr pc, [sp], #4)
   17244:	movw	r0, #28472	; 0x6f38
   17248:	movt	r0, #2
   1724c:	bl	129c8 <puts@plt>
   17250:	mvn	r0, #0
   17254:	b	17234 <test_string@@Base+0x1d0>
   17258:	movw	r1, #23600	; 0x5c30
   1725c:	movt	r1, #2
   17260:	ldr	r3, [pc, #160]	; 17308 <test_string@@Base+0x2a4>
   17264:	movw	r0, #23900	; 0x5d5c
   17268:	movt	r0, #2
   1726c:	movw	r2, #699	; 0x2bb
   17270:	bl	12a64 <__assert_fail@plt>
   17274:	movw	r1, #26688	; 0x6840
   17278:	movt	r1, #2
   1727c:	ldr	r3, [pc, #136]	; 1730c <test_string@@Base+0x2a8>
   17280:	movw	r0, #28424	; 0x6f08
   17284:	movt	r0, #2
   17288:	movw	r2, #1086	; 0x43e
   1728c:	bl	12a64 <__assert_fail@plt>
   17290:	movw	r1, #26688	; 0x6840
   17294:	movt	r1, #2
   17298:	ldr	r3, [pc, #108]	; 1730c <test_string@@Base+0x2a8>
   1729c:	movw	r0, #24980	; 0x6194
   172a0:	movt	r0, #2
   172a4:	movw	r2, #1093	; 0x445
   172a8:	bl	12a64 <__assert_fail@plt>
   172ac:	bl	134a0 <_start@@Base+0x890>
   172b0:	movw	r1, #26688	; 0x6840
   172b4:	movt	r1, #2
   172b8:	ldr	r3, [pc, #76]	; 1730c <test_string@@Base+0x2a8>
   172bc:	movw	r0, #28340	; 0x6eb4
   172c0:	movt	r0, #2
   172c4:	movw	r2, #1082	; 0x43a
   172c8:	bl	12a64 <__assert_fail@plt>
   172cc:	movw	r1, #26688	; 0x6840
   172d0:	movt	r1, #2
   172d4:	ldr	r3, [pc, #48]	; 1730c <test_string@@Base+0x2a8>
   172d8:	movw	r0, #28292	; 0x6e84
   172dc:	movt	r0, #2
   172e0:	movw	r2, #1080	; 0x438
   172e4:	bl	12a64 <__assert_fail@plt>
   172e8:	movw	r1, #26688	; 0x6840
   172ec:	movt	r1, #2
   172f0:	ldr	r3, [pc, #20]	; 1730c <test_string@@Base+0x2a8>
   172f4:	movw	r0, #28384	; 0x6ee0
   172f8:	movt	r0, #2
   172fc:	movw	r2, #1084	; 0x43c
   17300:	bl	12a64 <__assert_fail@plt>
   17304:	ldrdeq	r5, [r2], -ip
   17308:	andeq	r5, r2, r4, ror #13
   1730c:	andeq	r5, r2, r4, ror #19

00017310 <test_sort_find@@Base>:
   17310:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17314:	mov	r4, r0
   17318:	strd	r6, [sp, #8]
   1731c:	strd	r8, [sp, #16]
   17320:	strd	sl, [sp, #24]
   17324:	str	lr, [sp, #32]
   17328:	sub	sp, sp, #52	; 0x34
   1732c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   17330:	mov	r3, #0
   17334:	mov	r0, r4
   17338:	mov	r2, r3
   1733c:	movw	r1, #24784	; 0x60d0
   17340:	movt	r1, #2
   17344:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   17348:	cmp	r0, #0
   1734c:	bne	1735c <test_sort_find@@Base+0x4c>
   17350:	mov	r1, #36	; 0x24
   17354:	mov	r0, r4
   17358:	bl	206a8 <flatcc_builder_start_table@@Base>
   1735c:	movw	r1, #25080	; 0x61f8
   17360:	movt	r1, #2
   17364:	mov	r0, r4
   17368:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1736c:	subs	r5, r0, #0
   17370:	beq	17388 <test_sort_find@@Base+0x78>
   17374:	mov	r1, #3
   17378:	mov	r0, r4
   1737c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   17380:	cmp	r0, #0
   17384:	strne	r5, [r0]
   17388:	mov	r0, r4
   1738c:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   17390:	mov	r1, #36	; 0x24
   17394:	mov	r0, r4
   17398:	bl	206a8 <flatcc_builder_start_table@@Base>
   1739c:	movw	r1, #26792	; 0x68a8
   173a0:	movt	r1, #2
   173a4:	mov	r0, r4
   173a8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   173ac:	subs	r5, r0, #0
   173b0:	beq	173c8 <test_sort_find@@Base+0xb8>
   173b4:	mov	r1, #3
   173b8:	mov	r0, r4
   173bc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   173c0:	cmp	r0, #0
   173c4:	strne	r5, [r0]
   173c8:	mov	r2, #1
   173cc:	ldr	r1, [pc, #3992]	; 1836c <test_sort_find@@Base+0x105c>
   173d0:	mov	r0, r4
   173d4:	bl	20f8c <flatcc_builder_check_required@@Base>
   173d8:	cmp	r0, #0
   173dc:	beq	186cc <test_sort_find@@Base+0x13bc>
   173e0:	mov	r0, r4
   173e4:	bl	21028 <flatcc_builder_end_table@@Base>
   173e8:	subs	r1, r0, #0
   173ec:	beq	173f8 <test_sort_find@@Base+0xe8>
   173f0:	mov	r0, r4
   173f4:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   173f8:	mov	r1, #36	; 0x24
   173fc:	mov	r0, r4
   17400:	bl	206a8 <flatcc_builder_start_table@@Base>
   17404:	movw	r1, #26892	; 0x690c
   17408:	movt	r1, #2
   1740c:	mov	r0, r4
   17410:	bl	22630 <flatcc_builder_create_string_str@@Base>
   17414:	subs	r5, r0, #0
   17418:	beq	17430 <test_sort_find@@Base+0x120>
   1741c:	mov	r1, #3
   17420:	mov	r0, r4
   17424:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   17428:	cmp	r0, #0
   1742c:	strne	r5, [r0]
   17430:	mov	r2, #1
   17434:	ldr	r1, [pc, #3888]	; 1836c <test_sort_find@@Base+0x105c>
   17438:	mov	r0, r4
   1743c:	bl	20f8c <flatcc_builder_check_required@@Base>
   17440:	cmp	r0, #0
   17444:	beq	186cc <test_sort_find@@Base+0x13bc>
   17448:	mov	r0, r4
   1744c:	bl	21028 <flatcc_builder_end_table@@Base>
   17450:	subs	r1, r0, #0
   17454:	beq	17460 <test_sort_find@@Base+0x150>
   17458:	mov	r0, r4
   1745c:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   17460:	mov	r1, #36	; 0x24
   17464:	mov	r0, r4
   17468:	bl	206a8 <flatcc_builder_start_table@@Base>
   1746c:	movw	r1, #26936	; 0x6938
   17470:	movt	r1, #2
   17474:	mov	r0, r4
   17478:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1747c:	subs	r5, r0, #0
   17480:	beq	17498 <test_sort_find@@Base+0x188>
   17484:	mov	r1, #3
   17488:	mov	r0, r4
   1748c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   17490:	cmp	r0, #0
   17494:	strne	r5, [r0]
   17498:	mov	r2, #1
   1749c:	ldr	r1, [pc, #3784]	; 1836c <test_sort_find@@Base+0x105c>
   174a0:	mov	r0, r4
   174a4:	bl	20f8c <flatcc_builder_check_required@@Base>
   174a8:	cmp	r0, #0
   174ac:	beq	186cc <test_sort_find@@Base+0x13bc>
   174b0:	mov	r0, r4
   174b4:	bl	21028 <flatcc_builder_end_table@@Base>
   174b8:	subs	r1, r0, #0
   174bc:	beq	174c8 <test_sort_find@@Base+0x1b8>
   174c0:	mov	r0, r4
   174c4:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   174c8:	mov	r1, #36	; 0x24
   174cc:	mov	r0, r4
   174d0:	bl	206a8 <flatcc_builder_start_table@@Base>
   174d4:	movw	r1, #28492	; 0x6f4c
   174d8:	movt	r1, #2
   174dc:	mov	r0, r4
   174e0:	bl	22630 <flatcc_builder_create_string_str@@Base>
   174e4:	subs	r5, r0, #0
   174e8:	beq	17500 <test_sort_find@@Base+0x1f0>
   174ec:	mov	r1, #3
   174f0:	mov	r0, r4
   174f4:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   174f8:	cmp	r0, #0
   174fc:	strne	r5, [r0]
   17500:	mov	r2, #1
   17504:	ldr	r1, [pc, #3680]	; 1836c <test_sort_find@@Base+0x105c>
   17508:	mov	r0, r4
   1750c:	bl	20f8c <flatcc_builder_check_required@@Base>
   17510:	cmp	r0, #0
   17514:	beq	186cc <test_sort_find@@Base+0x13bc>
   17518:	mov	r0, r4
   1751c:	bl	21028 <flatcc_builder_end_table@@Base>
   17520:	subs	r1, r0, #0
   17524:	beq	17530 <test_sort_find@@Base+0x220>
   17528:	mov	r0, r4
   1752c:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   17530:	mov	r1, #36	; 0x24
   17534:	mov	r0, r4
   17538:	bl	206a8 <flatcc_builder_start_table@@Base>
   1753c:	movw	r1, #26936	; 0x6938
   17540:	movt	r1, #2
   17544:	mov	r0, r4
   17548:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1754c:	subs	r5, r0, #0
   17550:	beq	17568 <test_sort_find@@Base+0x258>
   17554:	mov	r1, #3
   17558:	mov	r0, r4
   1755c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   17560:	cmp	r0, #0
   17564:	strne	r5, [r0]
   17568:	mov	r2, #1
   1756c:	ldr	r1, [pc, #3576]	; 1836c <test_sort_find@@Base+0x105c>
   17570:	mov	r0, r4
   17574:	bl	20f8c <flatcc_builder_check_required@@Base>
   17578:	cmp	r0, #0
   1757c:	beq	186cc <test_sort_find@@Base+0x13bc>
   17580:	mov	r0, r4
   17584:	bl	21028 <flatcc_builder_end_table@@Base>
   17588:	subs	r1, r0, #0
   1758c:	beq	17598 <test_sort_find@@Base+0x288>
   17590:	mov	r0, r4
   17594:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   17598:	mov	r0, r4
   1759c:	bl	21708 <flatcc_builder_end_offset_vector@@Base>
   175a0:	subs	r5, r0, #0
   175a4:	beq	175bc <test_sort_find@@Base+0x2ac>
   175a8:	mov	r1, #11
   175ac:	mov	r0, r4
   175b0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   175b4:	cmp	r0, #0
   175b8:	strne	r5, [r0]
   175bc:	mov	r2, #1
   175c0:	ldr	r1, [pc, #3492]	; 1836c <test_sort_find@@Base+0x105c>
   175c4:	mov	r0, r4
   175c8:	bl	20f8c <flatcc_builder_check_required@@Base>
   175cc:	cmp	r0, #0
   175d0:	beq	186cc <test_sort_find@@Base+0x13bc>
   175d4:	movw	r5, #41072	; 0xa070
   175d8:	movt	r5, #3
   175dc:	mov	r0, r4
   175e0:	str	r5, [sp, #24]
   175e4:	bl	21028 <flatcc_builder_end_table@@Base>
   175e8:	mov	r1, r0
   175ec:	mov	r0, r4
   175f0:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   175f4:	mov	r0, r4
   175f8:	add	r1, sp, #44	; 0x2c
   175fc:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   17600:	mov	r4, r0
   17604:	movw	r0, #28500	; 0x6f54
   17608:	movt	r0, #2
   1760c:	mov	r1, r4
   17610:	ldr	r3, [r5]
   17614:	str	r4, [sp, #8]
   17618:	ldr	r2, [sp, #44]	; 0x2c
   1761c:	bl	12d28 <_start@@Base+0x118>
   17620:	cmp	r4, #0
   17624:	beq	1763c <test_sort_find@@Base+0x32c>
   17628:	ldr	r2, [r4, #4]
   1762c:	movw	r3, #20301	; 0x4f4d
   17630:	movt	r3, #21326	; 0x534e
   17634:	cmp	r2, r3
   17638:	beq	17640 <test_sort_find@@Base+0x330>
   1763c:	bl	13084 <_start@@Base+0x474>
   17640:	ldr	r2, [sp, #8]
   17644:	ldr	r3, [r2]
   17648:	adds	r2, r2, r3
   1764c:	beq	1763c <test_sort_find@@Base+0x32c>
   17650:	ldr	r1, [sp, #8]
   17654:	ldr	r3, [r1, r3]
   17658:	sub	r3, r2, r3
   1765c:	ldrh	r1, [r3]
   17660:	cmp	r1, #27
   17664:	bls	18004 <test_sort_find@@Base+0xcf4>
   17668:	ldrh	r3, [r3, #26]
   1766c:	cmp	r3, #0
   17670:	beq	18004 <test_sort_find@@Base+0xcf4>
   17674:	ldr	r1, [r2, r3]
   17678:	add	r3, r2, r3
   1767c:	str	r3, [sp, #32]
   17680:	add	r2, r1, #4
   17684:	adds	fp, r3, r2
   17688:	str	r2, [sp, #36]	; 0x24
   1768c:	beq	18004 <test_sort_find@@Base+0xcf4>
   17690:	ldr	r3, [fp, #-4]
   17694:	cmp	r3, #0
   17698:	str	r3, [sp, #28]
   1769c:	beq	17b20 <test_sort_find@@Base+0x810>
   176a0:	mov	r2, r3
   176a4:	lsr	r3, r3, #1
   176a8:	sub	sl, r2, #1
   176ac:	str	r3, [sp, #12]
   176b0:	lsl	r3, r3, #1
   176b4:	str	r3, [sp, #4]
   176b8:	ldr	r3, [sp, #4]
   176bc:	cmp	sl, r3
   176c0:	bcc	178b8 <test_sort_find@@Base+0x5a8>
   176c4:	mov	r4, r3
   176c8:	ldr	r7, [sp, #12]
   176cc:	b	17728 <test_sort_find@@Base+0x418>
   176d0:	ldr	r8, [r0, #-4]
   176d4:	str	r3, [sp, #20]
   176d8:	cmp	r9, r8
   176dc:	movcc	r2, r9
   176e0:	movcs	r2, r8
   176e4:	bl	12a4c <strncmp@plt>
   176e8:	cmp	r0, #0
   176ec:	ldr	r3, [sp, #20]
   176f0:	beq	178b0 <test_sort_find@@Base+0x5a0>
   176f4:	bge	178b8 <test_sort_find@@Base+0x5a8>
   176f8:	sub	r2, r7, r4
   176fc:	lsl	r1, r4, #1
   17700:	mov	r7, r4
   17704:	lsl	r2, r2, #2
   17708:	cmp	sl, r1
   1770c:	sub	r6, r6, r2
   17710:	add	r5, r5, r2
   17714:	ldr	r2, [sp, #16]
   17718:	str	r6, [fp, r2]
   1771c:	str	r5, [fp, r3]
   17720:	bcc	178b8 <test_sort_find@@Base+0x5a8>
   17724:	mov	r4, r1
   17728:	cmp	r4, sl
   1772c:	ldr	r6, [fp, #-4]
   17730:	bcs	17800 <test_sort_find@@Base+0x4f0>
   17734:	lsl	r2, r4, #2
   17738:	cmp	r4, r6
   1773c:	add	ip, fp, r2
   17740:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   17744:	ldr	r0, [fp, r4, lsl #2]
   17748:	adds	r1, ip, r0
   1774c:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17750:	ldr	r0, [ip, r0]
   17754:	sub	r0, r1, r0
   17758:	ldrh	ip, [r0]
   1775c:	cmp	ip, #11
   17760:	bls	17e54 <test_sort_find@@Base+0xb44>
   17764:	ldrh	ip, [r0, #10]
   17768:	cmp	ip, #0
   1776c:	beq	17e54 <test_sort_find@@Base+0xb44>
   17770:	ldr	r0, [r1, ip]
   17774:	add	r8, r4, #1
   17778:	add	r1, r1, ip
   1777c:	add	r2, r2, #4
   17780:	cmp	r8, r6
   17784:	add	ip, fp, r2
   17788:	add	r0, r0, #4
   1778c:	add	r0, r1, r0
   17790:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   17794:	ldr	r2, [fp, r2]
   17798:	adds	r1, ip, r2
   1779c:	beq	17fcc <test_sort_find@@Base+0xcbc>
   177a0:	ldr	r2, [ip, r2]
   177a4:	sub	r2, r1, r2
   177a8:	ldrh	ip, [r2]
   177ac:	cmp	ip, #11
   177b0:	bls	17e54 <test_sort_find@@Base+0xb44>
   177b4:	ldrh	ip, [r2, #10]
   177b8:	cmp	ip, #0
   177bc:	beq	17e54 <test_sort_find@@Base+0xb44>
   177c0:	ldr	r2, [r1, ip]
   177c4:	add	r1, r1, ip
   177c8:	add	r2, r2, #4
   177cc:	adds	r1, r1, r2
   177d0:	ldrne	r9, [r1, #-4]
   177d4:	moveq	r9, #0
   177d8:	cmp	r0, #0
   177dc:	beq	17e44 <test_sort_find@@Base+0xb34>
   177e0:	ldr	r5, [r0, #-4]
   177e4:	cmp	r9, r5
   177e8:	movcc	r2, r9
   177ec:	movcs	r2, r5
   177f0:	bl	12a4c <strncmp@plt>
   177f4:	cmp	r0, #0
   177f8:	beq	17e48 <test_sort_find@@Base+0xb38>
   177fc:	movlt	r4, r8
   17800:	lsl	r3, r7, #2
   17804:	cmp	r7, r6
   17808:	add	r1, fp, r3
   1780c:	str	r3, [sp, #16]
   17810:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   17814:	ldr	r5, [fp, r7, lsl #2]
   17818:	adds	r2, r1, r5
   1781c:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17820:	ldr	r1, [r1, r5]
   17824:	sub	r1, r2, r1
   17828:	ldrh	r0, [r1]
   1782c:	cmp	r0, #11
   17830:	bls	17e54 <test_sort_find@@Base+0xb44>
   17834:	ldrh	r1, [r1, #10]
   17838:	cmp	r1, #0
   1783c:	beq	17e54 <test_sort_find@@Base+0xb44>
   17840:	ldr	r0, [r2, r1]
   17844:	lsl	r3, r4, #2
   17848:	add	r2, r2, r1
   1784c:	cmp	r4, r6
   17850:	add	r1, fp, r3
   17854:	add	r0, r0, #4
   17858:	add	r0, r2, r0
   1785c:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   17860:	ldr	r6, [fp, r4, lsl #2]
   17864:	adds	r2, r1, r6
   17868:	beq	17fcc <test_sort_find@@Base+0xcbc>
   1786c:	ldr	r1, [r1, r6]
   17870:	sub	r1, r2, r1
   17874:	ldrh	ip, [r1]
   17878:	cmp	ip, #11
   1787c:	bls	17e54 <test_sort_find@@Base+0xb44>
   17880:	ldrh	ip, [r1, #10]
   17884:	cmp	ip, #0
   17888:	beq	17e54 <test_sort_find@@Base+0xb44>
   1788c:	ldr	r1, [r2, ip]
   17890:	add	r2, r2, ip
   17894:	add	r1, r1, #4
   17898:	adds	r1, r2, r1
   1789c:	ldrne	r9, [r1, #-4]
   178a0:	moveq	r9, r1
   178a4:	cmp	r0, #0
   178a8:	bne	176d0 <test_sort_find@@Base+0x3c0>
   178ac:	mov	r8, r0
   178b0:	cmp	r9, r8
   178b4:	bhi	176f8 <test_sort_find@@Base+0x3e8>
   178b8:	ldr	r2, [sp, #4]
   178bc:	ldr	r3, [sp, #12]
   178c0:	sub	r2, r2, #2
   178c4:	sub	r3, r3, #1
   178c8:	str	r2, [sp, #4]
   178cc:	cmn	r3, #1
   178d0:	str	r3, [sp, #12]
   178d4:	bne	176b8 <test_sort_find@@Base+0x3a8>
   178d8:	cmp	sl, #0
   178dc:	beq	17b20 <test_sort_find@@Base+0x810>
   178e0:	ldr	r3, [sp, #28]
   178e4:	add	r2, fp, #4
   178e8:	str	r2, [sp, #20]
   178ec:	add	r3, fp, r3, lsl #2
   178f0:	ldr	r2, [sp, #20]
   178f4:	mov	r7, #0
   178f8:	sub	sl, sl, #1
   178fc:	mov	r4, r7
   17900:	ldr	ip, [r3, #-4]
   17904:	ldr	r0, [fp]
   17908:	sub	r1, r3, r2
   1790c:	sub	r2, r2, r3
   17910:	add	r1, r1, ip
   17914:	add	r2, r2, r0
   17918:	str	r1, [fp]
   1791c:	sub	r1, r3, #4
   17920:	str	r2, [r3, #-4]
   17924:	str	r1, [sp, #16]
   17928:	b	17984 <test_sort_find@@Base+0x674>
   1792c:	ldr	r8, [r0, #-4]
   17930:	str	r3, [sp, #12]
   17934:	cmp	r9, r8
   17938:	movcc	r2, r9
   1793c:	movcs	r2, r8
   17940:	bl	12a4c <strncmp@plt>
   17944:	cmp	r0, #0
   17948:	ldr	r3, [sp, #12]
   1794c:	beq	17b0c <test_sort_find@@Base+0x7fc>
   17950:	bge	17b14 <test_sort_find@@Base+0x804>
   17954:	sub	r2, r7, r4
   17958:	lsl	r1, r4, #1
   1795c:	mov	r7, r4
   17960:	lsl	r2, r2, #2
   17964:	cmp	sl, r1
   17968:	sub	r6, r6, r2
   1796c:	add	r5, r5, r2
   17970:	ldr	r2, [sp, #4]
   17974:	str	r6, [fp, r2]
   17978:	str	r5, [fp, r3]
   1797c:	bcc	17b14 <test_sort_find@@Base+0x804>
   17980:	mov	r4, r1
   17984:	cmp	r4, sl
   17988:	ldr	r6, [fp, #-4]
   1798c:	bcs	17a5c <test_sort_find@@Base+0x74c>
   17990:	lsl	r2, r4, #2
   17994:	cmp	r6, r4
   17998:	add	ip, fp, r2
   1799c:	bls	17fe8 <test_sort_find@@Base+0xcd8>
   179a0:	ldr	r0, [fp, r4, lsl #2]
   179a4:	adds	r1, ip, r0
   179a8:	beq	17fcc <test_sort_find@@Base+0xcbc>
   179ac:	ldr	r0, [ip, r0]
   179b0:	sub	r0, r1, r0
   179b4:	ldrh	ip, [r0]
   179b8:	cmp	ip, #11
   179bc:	bls	17e54 <test_sort_find@@Base+0xb44>
   179c0:	ldrh	ip, [r0, #10]
   179c4:	cmp	ip, #0
   179c8:	beq	17e54 <test_sort_find@@Base+0xb44>
   179cc:	ldr	r0, [r1, ip]
   179d0:	add	r8, r4, #1
   179d4:	add	r1, r1, ip
   179d8:	add	r2, r2, #4
   179dc:	cmp	r6, r8
   179e0:	add	ip, fp, r2
   179e4:	add	r0, r0, #4
   179e8:	add	r0, r1, r0
   179ec:	bls	17fe8 <test_sort_find@@Base+0xcd8>
   179f0:	ldr	r2, [fp, r2]
   179f4:	adds	r1, ip, r2
   179f8:	beq	17fcc <test_sort_find@@Base+0xcbc>
   179fc:	ldr	r2, [ip, r2]
   17a00:	sub	r2, r1, r2
   17a04:	ldrh	ip, [r2]
   17a08:	cmp	ip, #11
   17a0c:	bls	17e54 <test_sort_find@@Base+0xb44>
   17a10:	ldrh	ip, [r2, #10]
   17a14:	cmp	ip, #0
   17a18:	beq	17e54 <test_sort_find@@Base+0xb44>
   17a1c:	ldr	r2, [r1, ip]
   17a20:	add	r1, r1, ip
   17a24:	add	r2, r2, #4
   17a28:	adds	r1, r1, r2
   17a2c:	ldrne	r9, [r1, #-4]
   17a30:	moveq	r9, #0
   17a34:	cmp	r0, #0
   17a38:	beq	17fbc <test_sort_find@@Base+0xcac>
   17a3c:	ldr	r5, [r0, #-4]
   17a40:	cmp	r9, r5
   17a44:	movcc	r2, r9
   17a48:	movcs	r2, r5
   17a4c:	bl	12a4c <strncmp@plt>
   17a50:	cmp	r0, #0
   17a54:	beq	17fc0 <test_sort_find@@Base+0xcb0>
   17a58:	movlt	r4, r8
   17a5c:	lsl	r3, r7, #2
   17a60:	cmp	r6, r7
   17a64:	add	r1, fp, r3
   17a68:	str	r3, [sp, #4]
   17a6c:	bls	17fe8 <test_sort_find@@Base+0xcd8>
   17a70:	ldr	r5, [fp, r7, lsl #2]
   17a74:	adds	r2, r1, r5
   17a78:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17a7c:	ldr	r1, [r1, r5]
   17a80:	sub	r1, r2, r1
   17a84:	ldrh	r0, [r1]
   17a88:	cmp	r0, #11
   17a8c:	bls	17e54 <test_sort_find@@Base+0xb44>
   17a90:	ldrh	r1, [r1, #10]
   17a94:	cmp	r1, #0
   17a98:	beq	17e54 <test_sort_find@@Base+0xb44>
   17a9c:	ldr	r0, [r2, r1]
   17aa0:	lsl	r3, r4, #2
   17aa4:	add	r2, r2, r1
   17aa8:	cmp	r6, r4
   17aac:	add	r1, fp, r3
   17ab0:	add	r0, r0, #4
   17ab4:	add	r0, r2, r0
   17ab8:	bls	17fe8 <test_sort_find@@Base+0xcd8>
   17abc:	ldr	r6, [fp, r4, lsl #2]
   17ac0:	adds	r2, r1, r6
   17ac4:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17ac8:	ldr	r1, [r1, r6]
   17acc:	sub	r1, r2, r1
   17ad0:	ldrh	ip, [r1]
   17ad4:	cmp	ip, #11
   17ad8:	bls	17e54 <test_sort_find@@Base+0xb44>
   17adc:	ldrh	ip, [r1, #10]
   17ae0:	cmp	ip, #0
   17ae4:	beq	17e54 <test_sort_find@@Base+0xb44>
   17ae8:	ldr	r1, [r2, ip]
   17aec:	add	r2, r2, ip
   17af0:	add	r1, r1, #4
   17af4:	adds	r1, r2, r1
   17af8:	ldrne	r9, [r1, #-4]
   17afc:	moveq	r9, r1
   17b00:	cmp	r0, #0
   17b04:	bne	1792c <test_sort_find@@Base+0x61c>
   17b08:	mov	r8, r0
   17b0c:	cmp	r9, r8
   17b10:	bhi	17954 <test_sort_find@@Base+0x644>
   17b14:	cmp	sl, #0
   17b18:	ldr	r3, [sp, #16]
   17b1c:	bne	178f0 <test_sort_find@@Base+0x5e0>
   17b20:	movw	r0, #28536	; 0x6f78
   17b24:	movt	r0, #2
   17b28:	ldr	r1, [sp, #8]
   17b2c:	ldr	r3, [sp, #24]
   17b30:	ldr	r2, [sp, #44]	; 0x2c
   17b34:	ldr	r3, [r3]
   17b38:	bl	12d28 <_start@@Base+0x118>
   17b3c:	ldr	r3, [fp, #-4]
   17b40:	cmp	r3, #5
   17b44:	bne	18594 <test_sort_find@@Base+0x1284>
   17b48:	ldr	r3, [sp, #32]
   17b4c:	ldr	r2, [sp, #36]	; 0x24
   17b50:	ldr	r3, [r3, r2]
   17b54:	adds	r0, fp, r3
   17b58:	beq	186d0 <test_sort_find@@Base+0x13c0>
   17b5c:	ldr	r3, [fp, r3]
   17b60:	sub	r3, r0, r3
   17b64:	ldrh	r2, [r3]
   17b68:	cmp	r2, #11
   17b6c:	bls	17e54 <test_sort_find@@Base+0xb44>
   17b70:	ldrh	r2, [r3, #10]
   17b74:	cmp	r2, #0
   17b78:	beq	17e54 <test_sort_find@@Base+0xb44>
   17b7c:	ldr	r3, [r0, r2]
   17b80:	add	r0, r0, r2
   17b84:	movw	r1, #28492	; 0x6f4c
   17b88:	movt	r1, #2
   17b8c:	add	r3, r3, #4
   17b90:	add	r0, r0, r3
   17b94:	bl	12968 <strcmp@plt>
   17b98:	cmp	r0, #0
   17b9c:	bne	18624 <test_sort_find@@Base+0x1314>
   17ba0:	ldr	r4, [fp, #4]
   17ba4:	add	r4, r4, #4
   17ba8:	adds	r0, fp, r4
   17bac:	beq	186d0 <test_sort_find@@Base+0x13c0>
   17bb0:	ldr	r3, [fp, r4]
   17bb4:	sub	r3, r0, r3
   17bb8:	ldrh	r2, [r3]
   17bbc:	cmp	r2, #11
   17bc0:	bls	17e54 <test_sort_find@@Base+0xb44>
   17bc4:	ldrh	r2, [r3, #10]
   17bc8:	cmp	r2, #0
   17bcc:	beq	17e54 <test_sort_find@@Base+0xb44>
   17bd0:	ldr	r3, [r0, r2]
   17bd4:	add	r0, r0, r2
   17bd8:	movw	r1, #26936	; 0x6938
   17bdc:	movt	r1, #2
   17be0:	add	r3, r3, #4
   17be4:	add	r0, r0, r3
   17be8:	bl	12968 <strcmp@plt>
   17bec:	cmp	r0, #0
   17bf0:	bne	1863c <test_sort_find@@Base+0x132c>
   17bf4:	ldr	r6, [fp, #8]
   17bf8:	add	r6, r6, #8
   17bfc:	adds	r0, fp, r6
   17c00:	beq	186d0 <test_sort_find@@Base+0x13c0>
   17c04:	ldr	r3, [fp, r6]
   17c08:	sub	r3, r0, r3
   17c0c:	ldrh	r2, [r3]
   17c10:	cmp	r2, #11
   17c14:	bls	17e54 <test_sort_find@@Base+0xb44>
   17c18:	ldrh	r3, [r3, #10]
   17c1c:	cmp	r3, #0
   17c20:	beq	17e54 <test_sort_find@@Base+0xb44>
   17c24:	ldr	r2, [r0, r3]
   17c28:	add	r0, r0, r3
   17c2c:	movw	r1, #26936	; 0x6938
   17c30:	movt	r1, #2
   17c34:	add	r2, r2, #4
   17c38:	add	r0, r0, r2
   17c3c:	bl	12968 <strcmp@plt>
   17c40:	cmp	r0, #0
   17c44:	bne	18654 <test_sort_find@@Base+0x1344>
   17c48:	ldr	r3, [fp, #12]
   17c4c:	add	r3, r3, #12
   17c50:	adds	r0, fp, r3
   17c54:	beq	186d0 <test_sort_find@@Base+0x13c0>
   17c58:	ldr	r3, [fp, r3]
   17c5c:	sub	r3, r0, r3
   17c60:	ldrh	r2, [r3]
   17c64:	cmp	r2, #11
   17c68:	bls	17e54 <test_sort_find@@Base+0xb44>
   17c6c:	ldrh	r2, [r3, #10]
   17c70:	cmp	r2, #0
   17c74:	beq	17e54 <test_sort_find@@Base+0xb44>
   17c78:	ldr	r3, [r0, r2]
   17c7c:	add	r0, r0, r2
   17c80:	movw	r1, #26892	; 0x690c
   17c84:	movt	r1, #2
   17c88:	add	r3, r3, #4
   17c8c:	add	r0, r0, r3
   17c90:	bl	12968 <strcmp@plt>
   17c94:	cmp	r0, #0
   17c98:	bne	1866c <test_sort_find@@Base+0x135c>
   17c9c:	ldr	r3, [fp, #16]
   17ca0:	add	r3, r3, #16
   17ca4:	adds	r0, fp, r3
   17ca8:	beq	186d0 <test_sort_find@@Base+0x13c0>
   17cac:	ldr	r3, [fp, r3]
   17cb0:	sub	r3, r0, r3
   17cb4:	ldrh	r2, [r3]
   17cb8:	cmp	r2, #11
   17cbc:	bls	17e54 <test_sort_find@@Base+0xb44>
   17cc0:	ldrh	r2, [r3, #10]
   17cc4:	cmp	r2, #0
   17cc8:	beq	17e54 <test_sort_find@@Base+0xb44>
   17ccc:	ldr	r3, [r0, r2]
   17cd0:	add	r0, r0, r2
   17cd4:	movw	r1, #26792	; 0x68a8
   17cd8:	movt	r1, #2
   17cdc:	add	r3, r3, #4
   17ce0:	add	r0, r0, r3
   17ce4:	bl	12968 <strcmp@plt>
   17ce8:	subs	r5, r0, #0
   17cec:	bne	186b4 <test_sort_find@@Base+0x13a4>
   17cf0:	cmp	r4, r6
   17cf4:	beq	1869c <test_sort_find@@Base+0x138c>
   17cf8:	movw	r1, #26892	; 0x690c
   17cfc:	movt	r1, #2
   17d00:	mov	r0, fp
   17d04:	bl	14784 <_start@@Base+0x1b74>
   17d08:	cmp	r0, #3
   17d0c:	movweq	r7, #28876	; 0x70cc
   17d10:	moveq	r6, #4
   17d14:	movteq	r7, #2
   17d18:	bne	185ac <test_sort_find@@Base+0x129c>
   17d1c:	sub	r4, r6, r5
   17d20:	add	r4, r5, r4, lsr #1
   17d24:	cmp	r4, #4
   17d28:	add	r2, fp, r4, lsl #2
   17d2c:	bhi	18698 <test_sort_find@@Base+0x1388>
   17d30:	ldr	r3, [fp, r4, lsl #2]
   17d34:	adds	r1, r2, r3
   17d38:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17d3c:	ldr	r3, [r2, r3]
   17d40:	sub	r3, r1, r3
   17d44:	ldrh	r2, [r3]
   17d48:	cmp	r2, #11
   17d4c:	bhi	17dbc <test_sort_find@@Base+0xaac>
   17d50:	b	17e54 <test_sort_find@@Base+0xb44>
   17d54:	ldr	r8, [r0, #-4]
   17d58:	mov	r1, r7
   17d5c:	cmp	r8, #5
   17d60:	movcc	r2, r8
   17d64:	movcs	r2, #5
   17d68:	bl	12a4c <strncmp@plt>
   17d6c:	cmp	r0, #0
   17d70:	beq	17e2c <test_sort_find@@Base+0xb1c>
   17d74:	blt	17ddc <test_sort_find@@Base+0xacc>
   17d78:	cmp	r4, r5
   17d7c:	bls	17e3c <test_sort_find@@Base+0xb2c>
   17d80:	sub	r2, r4, r5
   17d84:	add	r2, r5, r2, lsr #1
   17d88:	cmp	r2, #4
   17d8c:	add	r0, fp, r2, lsl #2
   17d90:	bhi	18698 <test_sort_find@@Base+0x1388>
   17d94:	ldr	r3, [fp, r2, lsl #2]
   17d98:	adds	r1, r0, r3
   17d9c:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17da0:	ldr	r3, [r0, r3]
   17da4:	mov	r6, r4
   17da8:	sub	r3, r1, r3
   17dac:	ldrh	r0, [r3]
   17db0:	cmp	r0, #11
   17db4:	bls	17e54 <test_sort_find@@Base+0xb44>
   17db8:	mov	r4, r2
   17dbc:	ldrh	r0, [r3, #10]
   17dc0:	cmp	r0, #0
   17dc4:	beq	17e54 <test_sort_find@@Base+0xb44>
   17dc8:	ldr	r3, [r1, r0]
   17dcc:	add	r0, r1, r0
   17dd0:	add	r3, r3, #4
   17dd4:	adds	r0, r0, r3
   17dd8:	bne	17d54 <test_sort_find@@Base+0xa44>
   17ddc:	add	r5, r4, #1
   17de0:	cmp	r6, r5
   17de4:	bhi	17d1c <test_sort_find@@Base+0xa0c>
   17de8:	cmp	r5, r6
   17dec:	beq	17e70 <test_sort_find@@Base+0xb60>
   17df0:	movw	r0, #28884	; 0x70d4
   17df4:	movt	r0, #2
   17df8:	bl	129c8 <puts@plt>
   17dfc:	mvn	r3, #0
   17e00:	str	r3, [sp, #20]
   17e04:	ldr	r0, [sp, #8]
   17e08:	bl	23658 <flatcc_builder_aligned_free@@Base>
   17e0c:	ldr	r0, [sp, #20]
   17e10:	add	sp, sp, #52	; 0x34
   17e14:	ldrd	r4, [sp]
   17e18:	ldrd	r6, [sp, #8]
   17e1c:	ldrd	r8, [sp, #16]
   17e20:	ldrd	sl, [sp, #24]
   17e24:	add	sp, sp, #32
   17e28:	pop	{pc}		; (ldr pc, [sp], #4)
   17e2c:	cmp	r8, #4
   17e30:	bls	17ddc <test_sort_find@@Base+0xacc>
   17e34:	cmp	r4, r5
   17e38:	bhi	17d80 <test_sort_find@@Base+0xa70>
   17e3c:	mov	r6, r4
   17e40:	b	17de8 <test_sort_find@@Base+0xad8>
   17e44:	mov	r5, r0
   17e48:	cmp	r9, r5
   17e4c:	movhi	r4, r8
   17e50:	b	17800 <test_sort_find@@Base+0x4f0>
   17e54:	movw	r1, #23600	; 0x5c30
   17e58:	movt	r1, #2
   17e5c:	ldr	r3, [pc, #1292]	; 18370 <test_sort_find@@Base+0x1060>
   17e60:	movw	r0, #23900	; 0x5d5c
   17e64:	movt	r0, #2
   17e68:	movw	r2, #699	; 0x2bb
   17e6c:	bl	12a64 <__assert_fail@plt>
   17e70:	ldr	r3, [fp, r5, lsl #2]
   17e74:	add	r0, fp, r5, lsl #2
   17e78:	add	r0, r0, r3
   17e7c:	bl	131d8 <_start@@Base+0x5c8>
   17e80:	subs	r3, r0, #0
   17e84:	beq	17df0 <test_sort_find@@Base+0xae0>
   17e88:	ldr	r4, [r3, #-4]
   17e8c:	movw	r1, #28876	; 0x70cc
   17e90:	movt	r1, #2
   17e94:	cmp	r4, #5
   17e98:	movcc	r2, r4
   17e9c:	movcs	r2, #5
   17ea0:	bl	12a4c <strncmp@plt>
   17ea4:	cmp	r0, #0
   17ea8:	bne	17df0 <test_sort_find@@Base+0xae0>
   17eac:	cmp	r4, #5
   17eb0:	bne	17df0 <test_sort_find@@Base+0xae0>
   17eb4:	cmp	r5, #3
   17eb8:	bne	17df0 <test_sort_find@@Base+0xae0>
   17ebc:	movw	r6, #28936	; 0x7108
   17ec0:	movt	r6, #2
   17ec4:	mov	r5, r0
   17ec8:	mov	r7, #4
   17ecc:	sub	r4, r7, r5
   17ed0:	add	r4, r5, r4, lsr #1
   17ed4:	cmp	r4, #4
   17ed8:	add	r2, fp, r4, lsl #2
   17edc:	bhi	18698 <test_sort_find@@Base+0x1388>
   17ee0:	ldr	r3, [fp, r4, lsl #2]
   17ee4:	adds	r1, r2, r3
   17ee8:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17eec:	ldr	r2, [r2, r3]
   17ef0:	sub	r2, r1, r2
   17ef4:	ldrh	r3, [r2]
   17ef8:	cmp	r3, #11
   17efc:	bhi	17f6c <test_sort_find@@Base+0xc5c>
   17f00:	b	17e54 <test_sort_find@@Base+0xb44>
   17f04:	ldr	r8, [r0, #-4]
   17f08:	mov	r1, r6
   17f0c:	cmp	r8, #5
   17f10:	movcc	r2, r8
   17f14:	movcs	r2, #5
   17f18:	bl	12a4c <strncmp@plt>
   17f1c:	cmp	r0, #0
   17f20:	beq	18020 <test_sort_find@@Base+0xd10>
   17f24:	blt	17f8c <test_sort_find@@Base+0xc7c>
   17f28:	cmp	r4, r5
   17f2c:	bls	17f9c <test_sort_find@@Base+0xc8c>
   17f30:	sub	r3, r4, r5
   17f34:	add	r3, r5, r3, lsr #1
   17f38:	cmp	r3, #4
   17f3c:	add	r0, fp, r3, lsl #2
   17f40:	bhi	18698 <test_sort_find@@Base+0x1388>
   17f44:	ldr	r2, [fp, r3, lsl #2]
   17f48:	adds	r1, r0, r2
   17f4c:	beq	17fcc <test_sort_find@@Base+0xcbc>
   17f50:	ldr	r2, [r0, r2]
   17f54:	mov	r7, r4
   17f58:	sub	r2, r1, r2
   17f5c:	ldrh	r0, [r2]
   17f60:	cmp	r0, #11
   17f64:	bls	17e54 <test_sort_find@@Base+0xb44>
   17f68:	mov	r4, r3
   17f6c:	ldrh	r0, [r2, #10]
   17f70:	cmp	r0, #0
   17f74:	beq	17e54 <test_sort_find@@Base+0xb44>
   17f78:	ldr	r3, [r1, r0]
   17f7c:	add	r0, r1, r0
   17f80:	add	r3, r3, #4
   17f84:	adds	r0, r0, r3
   17f88:	bne	17f04 <test_sort_find@@Base+0xbf4>
   17f8c:	add	r5, r4, #1
   17f90:	cmp	r7, r5
   17f94:	bhi	17ecc <test_sort_find@@Base+0xbbc>
   17f98:	mov	r4, r7
   17f9c:	cmp	r4, r5
   17fa0:	beq	1802c <test_sort_find@@Base+0xd1c>
   17fa4:	movw	r0, #28944	; 0x7110
   17fa8:	movt	r0, #2
   17fac:	bl	129c8 <puts@plt>
   17fb0:	mvn	r3, #0
   17fb4:	str	r3, [sp, #20]
   17fb8:	b	17e04 <test_sort_find@@Base+0xaf4>
   17fbc:	mov	r5, r0
   17fc0:	cmp	r9, r5
   17fc4:	movhi	r4, r8
   17fc8:	b	17a5c <test_sort_find@@Base+0x74c>
   17fcc:	movw	r1, #23600	; 0x5c30
   17fd0:	movt	r1, #2
   17fd4:	ldr	r3, [pc, #916]	; 18370 <test_sort_find@@Base+0x1060>
   17fd8:	movw	r0, #23700	; 0x5c94
   17fdc:	movt	r0, #2
   17fe0:	movw	r2, #699	; 0x2bb
   17fe4:	bl	12a64 <__assert_fail@plt>
   17fe8:	movw	r1, #23600	; 0x5c30
   17fec:	movt	r1, #2
   17ff0:	ldr	r3, [pc, #892]	; 18374 <test_sort_find@@Base+0x1064>
   17ff4:	movw	r0, #23844	; 0x5d24
   17ff8:	movt	r0, #2
   17ffc:	movw	r2, #693	; 0x2b5
   18000:	bl	12a64 <__assert_fail@plt>
   18004:	movw	r1, #26688	; 0x6840
   18008:	movt	r1, #2
   1800c:	ldr	r3, [pc, #868]	; 18378 <test_sort_find@@Base+0x1068>
   18010:	movw	r0, #28524	; 0x6f6c
   18014:	movt	r0, #2
   18018:	movw	r2, #1147	; 0x47b
   1801c:	bl	12a64 <__assert_fail@plt>
   18020:	cmp	r8, #4
   18024:	bhi	17f28 <test_sort_find@@Base+0xc18>
   18028:	b	17f8c <test_sort_find@@Base+0xc7c>
   1802c:	ldr	r3, [fp, r4, lsl #2]
   18030:	add	r0, fp, r4, lsl #2
   18034:	add	r0, r0, r3
   18038:	bl	131d8 <_start@@Base+0x5c8>
   1803c:	subs	r3, r0, #0
   18040:	beq	17fa4 <test_sort_find@@Base+0xc94>
   18044:	ldr	r8, [r3, #-4]
   18048:	movw	r1, #28936	; 0x7108
   1804c:	movt	r1, #2
   18050:	cmp	r8, #5
   18054:	movcc	r2, r8
   18058:	movcs	r2, #5
   1805c:	bl	12a4c <strncmp@plt>
   18060:	subs	r3, r0, #0
   18064:	str	r3, [sp, #20]
   18068:	bne	17fa4 <test_sort_find@@Base+0xc94>
   1806c:	cmp	r8, #5
   18070:	bne	17fa4 <test_sort_find@@Base+0xc94>
   18074:	cmp	r4, #3
   18078:	bne	17fa4 <test_sort_find@@Base+0xc94>
   1807c:	movw	r1, #28980	; 0x7134
   18080:	movt	r1, #2
   18084:	mov	r0, fp
   18088:	bl	14784 <_start@@Base+0x1b74>
   1808c:	cmn	r0, #1
   18090:	mov	r4, r0
   18094:	bne	185c4 <test_sort_find@@Base+0x12b4>
   18098:	movw	r1, #28492	; 0x6f4c
   1809c:	movt	r1, #2
   180a0:	mov	r0, fp
   180a4:	bl	14784 <_start@@Base+0x1b74>
   180a8:	cmp	r0, #0
   180ac:	bne	18684 <test_sort_find@@Base+0x1374>
   180b0:	movw	r1, #26936	; 0x6938
   180b4:	movt	r1, #2
   180b8:	mov	r0, fp
   180bc:	bl	14784 <_start@@Base+0x1b74>
   180c0:	cmp	r0, #1
   180c4:	mov	r5, r0
   180c8:	bne	185dc <test_sort_find@@Base+0x12cc>
   180cc:	movw	r1, #26792	; 0x68a8
   180d0:	movt	r1, #2
   180d4:	mov	r0, fp
   180d8:	bl	14784 <_start@@Base+0x1b74>
   180dc:	cmp	r0, #4
   180e0:	mov	r3, r0
   180e4:	str	r0, [sp, #4]
   180e8:	moveq	r3, #2
   180ec:	moveq	r5, r3
   180f0:	streq	r3, [sp, #12]
   180f4:	bne	18600 <test_sort_find@@Base+0x12f0>
   180f8:	lsl	r4, r5, #1
   180fc:	b	182d8 <test_sort_find@@Base+0xfc8>
   18100:	lsl	r6, r4, #2
   18104:	cmp	r4, r8
   18108:	add	r1, fp, r6
   1810c:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   18110:	ldr	r3, [fp, r4, lsl #2]
   18114:	adds	r2, r1, r3
   18118:	beq	17fcc <test_sort_find@@Base+0xcbc>
   1811c:	ldr	r3, [r1, r3]
   18120:	sub	r3, r2, r3
   18124:	ldrh	r1, [r3]
   18128:	cmp	r1, #11
   1812c:	bls	17e54 <test_sort_find@@Base+0xb44>
   18130:	ldrh	r1, [r3, #10]
   18134:	cmp	r1, #0
   18138:	beq	17e54 <test_sort_find@@Base+0xb44>
   1813c:	ldr	r0, [r2, r1]
   18140:	add	r3, r4, #1
   18144:	add	r2, r2, r1
   18148:	add	r7, r6, #4
   1814c:	cmp	r3, r8
   18150:	add	ip, fp, r7
   18154:	add	r0, r0, #4
   18158:	add	r0, r2, r0
   1815c:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   18160:	ldr	r2, [fp, r7]
   18164:	adds	r1, ip, r2
   18168:	beq	17fcc <test_sort_find@@Base+0xcbc>
   1816c:	ldr	r2, [ip, r2]
   18170:	sub	r2, r1, r2
   18174:	ldrh	ip, [r2]
   18178:	cmp	ip, #11
   1817c:	bls	17e54 <test_sort_find@@Base+0xb44>
   18180:	ldrh	ip, [r2, #10]
   18184:	cmp	ip, #0
   18188:	beq	17e54 <test_sort_find@@Base+0xb44>
   1818c:	ldr	r2, [r1, ip]
   18190:	add	r1, r1, ip
   18194:	add	r2, r2, #4
   18198:	adds	r1, r1, r2
   1819c:	ldrne	sl, [r1, #-4]
   181a0:	moveq	sl, #0
   181a4:	cmp	r0, #0
   181a8:	beq	182e8 <test_sort_find@@Base+0xfd8>
   181ac:	ldr	r9, [r0, #-4]
   181b0:	str	r3, [sp, #16]
   181b4:	cmp	sl, r9
   181b8:	movcc	r2, sl
   181bc:	movcs	r2, r9
   181c0:	bl	12a4c <strncmp@plt>
   181c4:	cmp	r0, #0
   181c8:	ldr	r3, [sp, #16]
   181cc:	beq	182ec <test_sort_find@@Base+0xfdc>
   181d0:	bge	181dc <test_sort_find@@Base+0xecc>
   181d4:	mov	r6, r7
   181d8:	mov	r4, r3
   181dc:	lsl	r9, r5, #2
   181e0:	cmp	r5, r8
   181e4:	add	r3, fp, r9
   181e8:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   181ec:	ldr	r7, [fp, r5, lsl #2]
   181f0:	adds	r0, r3, r7
   181f4:	beq	17fcc <test_sort_find@@Base+0xcbc>
   181f8:	ldr	r3, [r3, r7]
   181fc:	sub	r3, r0, r3
   18200:	ldrh	r2, [r3]
   18204:	cmp	r2, #11
   18208:	bls	17e54 <test_sort_find@@Base+0xb44>
   1820c:	ldrh	r2, [r3, #10]
   18210:	cmp	r2, #0
   18214:	beq	17e54 <test_sort_find@@Base+0xb44>
   18218:	ldr	r3, [r0, r2]
   1821c:	cmp	r4, r8
   18220:	add	r0, r0, r2
   18224:	add	r8, fp, r6
   18228:	add	r3, r3, #4
   1822c:	add	r0, r0, r3
   18230:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   18234:	ldr	r6, [fp, r6]
   18238:	adds	r1, r8, r6
   1823c:	beq	17fcc <test_sort_find@@Base+0xcbc>
   18240:	ldr	r3, [r8, r6]
   18244:	sub	r3, r1, r3
   18248:	ldrh	r2, [r3]
   1824c:	cmp	r2, #11
   18250:	bls	17e54 <test_sort_find@@Base+0xb44>
   18254:	ldrh	r2, [r3, #10]
   18258:	cmp	r2, #0
   1825c:	beq	17e54 <test_sort_find@@Base+0xb44>
   18260:	ldr	r3, [r1, r2]
   18264:	add	r1, r1, r2
   18268:	add	r3, r3, #4
   1826c:	adds	r1, r1, r3
   18270:	beq	18308 <test_sort_find@@Base+0xff8>
   18274:	cmp	r0, #0
   18278:	ldr	r3, [r1, #-4]
   1827c:	beq	182fc <test_sort_find@@Base+0xfec>
   18280:	ldr	sl, [r0, #-4]
   18284:	str	r3, [sp, #16]
   18288:	cmp	r3, sl
   1828c:	movcc	r2, r3
   18290:	movcs	r2, sl
   18294:	bl	12a4c <strncmp@plt>
   18298:	cmp	r0, #0
   1829c:	ldr	r3, [sp, #16]
   182a0:	beq	18300 <test_sort_find@@Base+0xff0>
   182a4:	bge	18308 <test_sort_find@@Base+0xff8>
   182a8:	sub	r5, r5, r4
   182ac:	lsl	r3, r4, #1
   182b0:	lsl	r5, r5, #2
   182b4:	cmp	r3, #4
   182b8:	sub	r6, r6, r5
   182bc:	add	r7, r7, r5
   182c0:	str	r6, [fp, r9]
   182c4:	str	r7, [r8]
   182c8:	bhi	18308 <test_sort_find@@Base+0xff8>
   182cc:	ldr	r8, [fp, #-4]
   182d0:	mov	r5, r4
   182d4:	mov	r4, r3
   182d8:	cmp	r4, #4
   182dc:	bne	18100 <test_sort_find@@Base+0xdf0>
   182e0:	mov	r6, #16
   182e4:	b	181dc <test_sort_find@@Base+0xecc>
   182e8:	mov	r9, r0
   182ec:	cmp	sl, r9
   182f0:	movhi	r6, r7
   182f4:	movhi	r4, r3
   182f8:	b	181dc <test_sort_find@@Base+0xecc>
   182fc:	mov	sl, #0
   18300:	cmp	r3, sl
   18304:	bhi	182a8 <test_sort_find@@Base+0xf98>
   18308:	ldr	r3, [sp, #12]
   1830c:	cmp	r3, #0
   18310:	beq	18328 <test_sort_find@@Base+0x1018>
   18314:	sub	r3, r3, #1
   18318:	ldr	r8, [fp, #-4]
   1831c:	mov	r5, r3
   18320:	str	r3, [sp, #12]
   18324:	b	180f8 <test_sort_find@@Base+0xde8>
   18328:	add	r5, fp, #16
   1832c:	ldr	r1, [sp, #4]
   18330:	sub	r0, r5, fp
   18334:	sub	r3, fp, r5
   18338:	mov	r7, #0
   1833c:	ldr	r2, [r5]
   18340:	mov	r4, r7
   18344:	sub	r1, r1, #1
   18348:	str	r1, [sp, #4]
   1834c:	add	r2, r2, r0
   18350:	ldr	r1, [fp]
   18354:	str	r2, [fp]
   18358:	add	r3, r3, r1
   1835c:	str	r3, [r5], #-4
   18360:	str	r5, [sp, #16]
   18364:	ldr	r3, [sp, #4]
   18368:	b	183e4 <test_sort_find@@Base+0x10d4>
   1836c:	ldrdeq	r5, [r2], -ip
   18370:	andeq	r5, r2, r4, ror #13
   18374:	andeq	r5, r2, r4, lsl #13
   18378:	strdeq	r5, [r2], -r0
   1837c:	cmp	r0, #0
   18380:	ldr	r3, [r1, #-4]
   18384:	beq	18568 <test_sort_find@@Base+0x1258>
   18388:	ldr	r8, [r0, #-4]
   1838c:	str	r3, [sp, #12]
   18390:	cmp	r3, r8
   18394:	movcc	r2, r3
   18398:	movcs	r2, r8
   1839c:	bl	12a4c <strncmp@plt>
   183a0:	cmp	r0, #0
   183a4:	ldr	r3, [sp, #12]
   183a8:	beq	1856c <test_sort_find@@Base+0x125c>
   183ac:	bge	18558 <test_sort_find@@Base+0x1248>
   183b0:	ldr	r1, [sp, #4]
   183b4:	sub	r3, r7, r4
   183b8:	lsl	r2, r4, #1
   183bc:	lsl	r3, r3, #2
   183c0:	mov	r7, r4
   183c4:	sub	r6, r6, r3
   183c8:	add	r5, r5, r3
   183cc:	cmp	r1, r2
   183d0:	str	r6, [fp, sl]
   183d4:	str	r5, [fp, r9]
   183d8:	bcc	18558 <test_sort_find@@Base+0x1248>
   183dc:	mov	r4, r2
   183e0:	mov	r3, r1
   183e4:	cmp	r3, r4
   183e8:	ldr	r6, [fp, #-4]
   183ec:	bls	184bc <test_sort_find@@Base+0x11ac>
   183f0:	lsl	r3, r4, #2
   183f4:	cmp	r6, r4
   183f8:	add	r0, fp, r3
   183fc:	bls	17fe8 <test_sort_find@@Base+0xcd8>
   18400:	ldr	r1, [fp, r4, lsl #2]
   18404:	adds	r2, r0, r1
   18408:	beq	17fcc <test_sort_find@@Base+0xcbc>
   1840c:	ldr	r1, [r0, r1]
   18410:	sub	r1, r2, r1
   18414:	ldrh	r0, [r1]
   18418:	cmp	r0, #11
   1841c:	bls	17e54 <test_sort_find@@Base+0xb44>
   18420:	ldrh	r1, [r1, #10]
   18424:	cmp	r1, #0
   18428:	beq	17e54 <test_sort_find@@Base+0xb44>
   1842c:	ldr	r0, [r2, r1]
   18430:	add	r5, r4, #1
   18434:	add	r3, r3, #4
   18438:	add	r2, r2, r1
   1843c:	cmp	r5, r6
   18440:	add	ip, fp, r3
   18444:	add	r0, r0, #4
   18448:	add	r0, r2, r0
   1844c:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   18450:	ldr	r3, [fp, r3]
   18454:	adds	r1, ip, r3
   18458:	beq	17fcc <test_sort_find@@Base+0xcbc>
   1845c:	ldr	r3, [ip, r3]
   18460:	sub	r3, r1, r3
   18464:	ldrh	r2, [r3]
   18468:	cmp	r2, #11
   1846c:	bls	17e54 <test_sort_find@@Base+0xb44>
   18470:	ldrh	r2, [r3, #10]
   18474:	cmp	r2, #0
   18478:	beq	17e54 <test_sort_find@@Base+0xb44>
   1847c:	ldr	r3, [r1, r2]
   18480:	add	r1, r1, r2
   18484:	add	r3, r3, #4
   18488:	adds	r1, r1, r3
   1848c:	beq	184bc <test_sort_find@@Base+0x11ac>
   18490:	cmp	r0, #0
   18494:	ldr	r9, [r1, #-4]
   18498:	beq	18584 <test_sort_find@@Base+0x1274>
   1849c:	ldr	r8, [r0, #-4]
   184a0:	cmp	r9, r8
   184a4:	movcc	r2, r9
   184a8:	movcs	r2, r8
   184ac:	bl	12a4c <strncmp@plt>
   184b0:	cmp	r0, #0
   184b4:	beq	18588 <test_sort_find@@Base+0x1278>
   184b8:	movlt	r4, r5
   184bc:	lsl	sl, r7, #2
   184c0:	cmp	r6, r7
   184c4:	add	r3, fp, sl
   184c8:	bls	17fe8 <test_sort_find@@Base+0xcd8>
   184cc:	ldr	r5, [fp, r7, lsl #2]
   184d0:	adds	r0, r3, r5
   184d4:	beq	17fcc <test_sort_find@@Base+0xcbc>
   184d8:	ldr	r3, [r3, r5]
   184dc:	sub	r3, r0, r3
   184e0:	ldrh	r2, [r3]
   184e4:	cmp	r2, #11
   184e8:	bls	17e54 <test_sort_find@@Base+0xb44>
   184ec:	ldrh	r3, [r3, #10]
   184f0:	cmp	r3, #0
   184f4:	beq	17e54 <test_sort_find@@Base+0xb44>
   184f8:	ldr	r2, [r0, r3]
   184fc:	lsl	r9, r4, #2
   18500:	add	r0, r0, r3
   18504:	cmp	r4, r6
   18508:	add	r3, fp, r9
   1850c:	add	r2, r2, #4
   18510:	add	r0, r0, r2
   18514:	bcs	17fe8 <test_sort_find@@Base+0xcd8>
   18518:	ldr	r6, [fp, r4, lsl #2]
   1851c:	adds	r1, r3, r6
   18520:	beq	17fcc <test_sort_find@@Base+0xcbc>
   18524:	ldr	r3, [r3, r6]
   18528:	sub	r3, r1, r3
   1852c:	ldrh	r2, [r3]
   18530:	cmp	r2, #11
   18534:	bls	17e54 <test_sort_find@@Base+0xb44>
   18538:	ldrh	r2, [r3, #10]
   1853c:	cmp	r2, #0
   18540:	beq	17e54 <test_sort_find@@Base+0xb44>
   18544:	ldr	r3, [r1, r2]
   18548:	add	r1, r1, r2
   1854c:	add	r3, r3, #4
   18550:	adds	r1, r1, r3
   18554:	bne	1837c <test_sort_find@@Base+0x106c>
   18558:	ldr	r5, [sp, #16]
   1855c:	cmp	fp, r5
   18560:	bne	1832c <test_sort_find@@Base+0x101c>
   18564:	b	17e04 <test_sort_find@@Base+0xaf4>
   18568:	mov	r8, #0
   1856c:	cmp	r3, r8
   18570:	bhi	183b0 <test_sort_find@@Base+0x10a0>
   18574:	ldr	r5, [sp, #16]
   18578:	cmp	fp, r5
   1857c:	bne	1832c <test_sort_find@@Base+0x101c>
   18580:	b	17e04 <test_sort_find@@Base+0xaf4>
   18584:	mov	r8, r0
   18588:	cmp	r9, r8
   1858c:	movhi	r4, r5
   18590:	b	184bc <test_sort_find@@Base+0x11ac>
   18594:	movw	r0, #28560	; 0x6f90
   18598:	movt	r0, #2
   1859c:	bl	129c8 <puts@plt>
   185a0:	mvn	r3, #0
   185a4:	str	r3, [sp, #20]
   185a8:	b	17e04 <test_sort_find@@Base+0xaf4>
   185ac:	movw	r0, #28832	; 0x70a0
   185b0:	movt	r0, #2
   185b4:	bl	129c8 <puts@plt>
   185b8:	mvn	r3, #0
   185bc:	str	r3, [sp, #20]
   185c0:	b	17e04 <test_sort_find@@Base+0xaf4>
   185c4:	movw	r0, #28988	; 0x713c
   185c8:	movt	r0, #2
   185cc:	bl	129c8 <puts@plt>
   185d0:	mvn	r3, #0
   185d4:	str	r3, [sp, #20]
   185d8:	b	17e04 <test_sort_find@@Base+0xaf4>
   185dc:	movw	r0, #29308	; 0x727c
   185e0:	movt	r0, #2
   185e4:	bl	129c8 <puts@plt>
   185e8:	mov	r1, r5
   185ec:	movw	r0, #29028	; 0x7164
   185f0:	movt	r0, #2
   185f4:	str	r4, [sp, #20]
   185f8:	bl	12974 <printf@plt>
   185fc:	b	17e04 <test_sort_find@@Base+0xaf4>
   18600:	movw	r0, #29036	; 0x716c
   18604:	movt	r0, #2
   18608:	bl	129c8 <puts@plt>
   1860c:	movw	r0, #29028	; 0x7164
   18610:	movt	r0, #2
   18614:	ldr	r1, [sp, #4]
   18618:	str	r4, [sp, #20]
   1861c:	bl	12974 <printf@plt>
   18620:	b	17e04 <test_sort_find@@Base+0xaf4>
   18624:	movw	r0, #28600	; 0x6fb8
   18628:	movt	r0, #2
   1862c:	bl	129c8 <puts@plt>
   18630:	mvn	r3, #0
   18634:	str	r3, [sp, #20]
   18638:	b	17e04 <test_sort_find@@Base+0xaf4>
   1863c:	movw	r0, #28632	; 0x6fd8
   18640:	movt	r0, #2
   18644:	bl	129c8 <puts@plt>
   18648:	mvn	r3, #0
   1864c:	str	r3, [sp, #20]
   18650:	b	17e04 <test_sort_find@@Base+0xaf4>
   18654:	movw	r0, #28664	; 0x6ff8
   18658:	movt	r0, #2
   1865c:	bl	129c8 <puts@plt>
   18660:	mvn	r3, #0
   18664:	str	r3, [sp, #20]
   18668:	b	17e04 <test_sort_find@@Base+0xaf4>
   1866c:	movw	r0, #28696	; 0x7018
   18670:	movt	r0, #2
   18674:	bl	129c8 <puts@plt>
   18678:	mvn	r3, #0
   1867c:	str	r3, [sp, #20]
   18680:	b	17e04 <test_sort_find@@Base+0xaf4>
   18684:	movw	r0, #29012	; 0x7154
   18688:	movt	r0, #2
   1868c:	str	r4, [sp, #20]
   18690:	bl	129c8 <puts@plt>
   18694:	b	17e04 <test_sort_find@@Base+0xaf4>
   18698:	bl	130ac <_start@@Base+0x49c>
   1869c:	movw	r0, #28760	; 0x7058
   186a0:	movt	r0, #2
   186a4:	bl	129c8 <puts@plt>
   186a8:	mvn	r3, #0
   186ac:	str	r3, [sp, #20]
   186b0:	b	17e04 <test_sort_find@@Base+0xaf4>
   186b4:	movw	r0, #28728	; 0x7038
   186b8:	movt	r0, #2
   186bc:	bl	129c8 <puts@plt>
   186c0:	mvn	r3, #0
   186c4:	str	r3, [sp, #20]
   186c8:	b	17e04 <test_sort_find@@Base+0xaf4>
   186cc:	bl	134a0 <_start@@Base+0x890>
   186d0:	bl	131b0 <_start@@Base+0x5a0>

000186d4 <test_scan@@Base>:
   186d4:	ldr	r2, [pc, #4080]	; 196cc <test_scan@@Base+0xff8>
   186d8:	movw	r3, #21692	; 0x54bc
   186dc:	movt	r3, #2
   186e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   186e4:	mov	r4, r0
   186e8:	ldr	ip, [r3, #1348]	; 0x544
   186ec:	strd	r6, [sp, #8]
   186f0:	strd	r8, [sp, #16]
   186f4:	ldrh	r1, [r2, #4]
   186f8:	strd	sl, [sp, #24]
   186fc:	ldrb	r3, [r2, #6]
   18700:	str	lr, [sp, #32]
   18704:	sub	sp, sp, #84	; 0x54
   18708:	str	ip, [sp, #72]	; 0x48
   1870c:	strh	r1, [sp, #76]	; 0x4c
   18710:	strb	r3, [sp, #78]	; 0x4e
   18714:	bl	1e2e0 <flatcc_builder_reset@@Base>
   18718:	mov	r3, #0
   1871c:	mov	r0, r4
   18720:	mov	r2, r3
   18724:	movw	r1, #24784	; 0x60d0
   18728:	movt	r1, #2
   1872c:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   18730:	cmp	r0, #0
   18734:	bne	18744 <test_scan@@Base+0x70>
   18738:	mov	r1, #36	; 0x24
   1873c:	mov	r0, r4
   18740:	bl	206a8 <flatcc_builder_start_table@@Base>
   18744:	movw	r1, #25080	; 0x61f8
   18748:	movt	r1, #2
   1874c:	mov	r0, r4
   18750:	bl	22630 <flatcc_builder_create_string_str@@Base>
   18754:	subs	r5, r0, #0
   18758:	beq	18770 <test_scan@@Base+0x9c>
   1875c:	mov	r1, #3
   18760:	mov	r0, r4
   18764:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   18768:	cmp	r0, #0
   1876c:	strne	r5, [r0]
   18770:	mov	r2, #1
   18774:	mvn	ip, #0
   18778:	mov	r3, r2
   1877c:	add	r1, sp, #72	; 0x48
   18780:	mov	r0, r4
   18784:	stm	sp, {r2, ip}
   18788:	mov	r2, #7
   1878c:	bl	211e8 <flatcc_builder_create_vector@@Base>
   18790:	subs	r5, r0, #0
   18794:	beq	187ac <test_scan@@Base+0xd8>
   18798:	mov	r1, #5
   1879c:	mov	r0, r4
   187a0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   187a4:	cmp	r0, #0
   187a8:	strne	r5, [r0]
   187ac:	mov	r0, r4
   187b0:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   187b4:	mov	r0, r4
   187b8:	bl	21708 <flatcc_builder_end_offset_vector@@Base>
   187bc:	subs	r5, r0, #0
   187c0:	beq	187d8 <test_scan@@Base+0x104>
   187c4:	mov	r1, #10
   187c8:	mov	r0, r4
   187cc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   187d0:	cmp	r0, #0
   187d4:	strne	r5, [r0]
   187d8:	mov	r0, r4
   187dc:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   187e0:	mov	r1, #36	; 0x24
   187e4:	mov	r0, r4
   187e8:	bl	206a8 <flatcc_builder_start_table@@Base>
   187ec:	movw	r1, #26792	; 0x68a8
   187f0:	movt	r1, #2
   187f4:	mov	r0, r4
   187f8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   187fc:	subs	r5, r0, #0
   18800:	beq	18818 <test_scan@@Base+0x144>
   18804:	mov	r1, #3
   18808:	mov	r0, r4
   1880c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   18810:	cmp	r0, #0
   18814:	strne	r5, [r0]
   18818:	mov	r2, #1
   1881c:	ldr	r1, [pc, #3756]	; 196d0 <test_scan@@Base+0xffc>
   18820:	mov	r0, r4
   18824:	bl	20f8c <flatcc_builder_check_required@@Base>
   18828:	cmp	r0, #0
   1882c:	beq	19dec <test_scan@@Base+0x1718>
   18830:	mov	r0, r4
   18834:	bl	21028 <flatcc_builder_end_table@@Base>
   18838:	subs	r1, r0, #0
   1883c:	beq	18848 <test_scan@@Base+0x174>
   18840:	mov	r0, r4
   18844:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   18848:	mov	r1, #36	; 0x24
   1884c:	mov	r0, r4
   18850:	bl	206a8 <flatcc_builder_start_table@@Base>
   18854:	movw	r1, #26892	; 0x690c
   18858:	movt	r1, #2
   1885c:	mov	r0, r4
   18860:	bl	22630 <flatcc_builder_create_string_str@@Base>
   18864:	subs	r5, r0, #0
   18868:	beq	18880 <test_scan@@Base+0x1ac>
   1886c:	mov	r1, #3
   18870:	mov	r0, r4
   18874:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   18878:	cmp	r0, #0
   1887c:	strne	r5, [r0]
   18880:	mov	r2, #1
   18884:	ldr	r1, [pc, #3652]	; 196d0 <test_scan@@Base+0xffc>
   18888:	mov	r0, r4
   1888c:	bl	20f8c <flatcc_builder_check_required@@Base>
   18890:	cmp	r0, #0
   18894:	beq	19dec <test_scan@@Base+0x1718>
   18898:	mov	r0, r4
   1889c:	bl	21028 <flatcc_builder_end_table@@Base>
   188a0:	subs	r1, r0, #0
   188a4:	beq	188b0 <test_scan@@Base+0x1dc>
   188a8:	mov	r0, r4
   188ac:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   188b0:	mov	r1, #36	; 0x24
   188b4:	mov	r0, r4
   188b8:	bl	206a8 <flatcc_builder_start_table@@Base>
   188bc:	movw	r1, #26936	; 0x6938
   188c0:	movt	r1, #2
   188c4:	mov	r0, r4
   188c8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   188cc:	subs	r5, r0, #0
   188d0:	beq	188e8 <test_scan@@Base+0x214>
   188d4:	mov	r1, #3
   188d8:	mov	r0, r4
   188dc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   188e0:	cmp	r0, #0
   188e4:	strne	r5, [r0]
   188e8:	mov	r2, #1
   188ec:	ldr	r1, [pc, #3548]	; 196d0 <test_scan@@Base+0xffc>
   188f0:	mov	r0, r4
   188f4:	bl	20f8c <flatcc_builder_check_required@@Base>
   188f8:	cmp	r0, #0
   188fc:	beq	19dec <test_scan@@Base+0x1718>
   18900:	mov	r0, r4
   18904:	bl	21028 <flatcc_builder_end_table@@Base>
   18908:	subs	r1, r0, #0
   1890c:	beq	18918 <test_scan@@Base+0x244>
   18910:	mov	r0, r4
   18914:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   18918:	mov	r1, #36	; 0x24
   1891c:	mov	r0, r4
   18920:	bl	206a8 <flatcc_builder_start_table@@Base>
   18924:	movw	r1, #28492	; 0x6f4c
   18928:	movt	r1, #2
   1892c:	mov	r0, r4
   18930:	bl	22630 <flatcc_builder_create_string_str@@Base>
   18934:	subs	r5, r0, #0
   18938:	beq	18950 <test_scan@@Base+0x27c>
   1893c:	mov	r1, #3
   18940:	mov	r0, r4
   18944:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   18948:	cmp	r0, #0
   1894c:	strne	r5, [r0]
   18950:	mov	r2, #1
   18954:	ldr	r1, [pc, #3444]	; 196d0 <test_scan@@Base+0xffc>
   18958:	mov	r0, r4
   1895c:	bl	20f8c <flatcc_builder_check_required@@Base>
   18960:	cmp	r0, #0
   18964:	beq	19dec <test_scan@@Base+0x1718>
   18968:	mov	r0, r4
   1896c:	bl	21028 <flatcc_builder_end_table@@Base>
   18970:	subs	r1, r0, #0
   18974:	beq	18980 <test_scan@@Base+0x2ac>
   18978:	mov	r0, r4
   1897c:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   18980:	mov	r1, #36	; 0x24
   18984:	mov	r0, r4
   18988:	bl	206a8 <flatcc_builder_start_table@@Base>
   1898c:	movw	r1, #26936	; 0x6938
   18990:	movt	r1, #2
   18994:	mov	r0, r4
   18998:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1899c:	subs	r5, r0, #0
   189a0:	beq	189b8 <test_scan@@Base+0x2e4>
   189a4:	mov	r1, #3
   189a8:	mov	r0, r4
   189ac:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   189b0:	cmp	r0, #0
   189b4:	strne	r5, [r0]
   189b8:	mov	r2, #1
   189bc:	ldr	r1, [pc, #3340]	; 196d0 <test_scan@@Base+0xffc>
   189c0:	mov	r0, r4
   189c4:	bl	20f8c <flatcc_builder_check_required@@Base>
   189c8:	cmp	r0, #0
   189cc:	beq	19dec <test_scan@@Base+0x1718>
   189d0:	mov	r0, r4
   189d4:	bl	21028 <flatcc_builder_end_table@@Base>
   189d8:	subs	r1, r0, #0
   189dc:	beq	189e8 <test_scan@@Base+0x314>
   189e0:	mov	r0, r4
   189e4:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   189e8:	mov	r0, r4
   189ec:	bl	21708 <flatcc_builder_end_offset_vector@@Base>
   189f0:	subs	r5, r0, #0
   189f4:	beq	18a0c <test_scan@@Base+0x338>
   189f8:	mov	r1, #11
   189fc:	mov	r0, r4
   18a00:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   18a04:	cmp	r0, #0
   18a08:	strne	r5, [r0]
   18a0c:	mov	r2, #1
   18a10:	ldr	r1, [pc, #3256]	; 196d0 <test_scan@@Base+0xffc>
   18a14:	mov	r0, r4
   18a18:	bl	20f8c <flatcc_builder_check_required@@Base>
   18a1c:	cmp	r0, #0
   18a20:	beq	19dec <test_scan@@Base+0x1718>
   18a24:	mov	r0, r4
   18a28:	bl	21028 <flatcc_builder_end_table@@Base>
   18a2c:	mov	r1, r0
   18a30:	mov	r0, r4
   18a34:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   18a38:	mov	r0, r4
   18a3c:	add	r1, sp, #68	; 0x44
   18a40:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   18a44:	subs	r3, r0, #0
   18a48:	str	r3, [sp, #32]
   18a4c:	beq	18a64 <test_scan@@Base+0x390>
   18a50:	ldr	r2, [r3, #4]
   18a54:	movw	r3, #20301	; 0x4f4d
   18a58:	movt	r3, #21326	; 0x534e
   18a5c:	cmp	r2, r3
   18a60:	beq	18a68 <test_scan@@Base+0x394>
   18a64:	bl	13084 <_start@@Base+0x474>
   18a68:	ldr	r3, [r0]
   18a6c:	adds	r2, r0, r3
   18a70:	beq	18a64 <test_scan@@Base+0x390>
   18a74:	ldr	r1, [sp, #32]
   18a78:	ldr	r3, [r1, r3]
   18a7c:	sub	r3, r2, r3
   18a80:	ldrh	r1, [r3]
   18a84:	cmp	r1, #27
   18a88:	bls	19b74 <test_scan@@Base+0x14a0>
   18a8c:	ldrh	r0, [r3, #26]
   18a90:	cmp	r0, #0
   18a94:	beq	19b74 <test_scan@@Base+0x14a0>
   18a98:	ldr	r1, [r2, r0]
   18a9c:	add	r0, r2, r0
   18aa0:	add	r1, r1, #4
   18aa4:	adds	ip, r0, r1
   18aa8:	str	ip, [sp, #12]
   18aac:	beq	19b74 <test_scan@@Base+0x14a0>
   18ab0:	ldrh	ip, [r3, #14]
   18ab4:	cmp	ip, #0
   18ab8:	beq	19e0c <test_scan@@Base+0x1738>
   18abc:	ldr	lr, [r2, ip]
   18ac0:	add	ip, r2, ip
   18ac4:	str	ip, [sp, #56]	; 0x38
   18ac8:	add	lr, lr, #4
   18acc:	adds	ip, ip, lr
   18ad0:	str	ip, [sp, #36]	; 0x24
   18ad4:	str	lr, [sp, #60]	; 0x3c
   18ad8:	beq	19e0c <test_scan@@Base+0x1738>
   18adc:	ldrh	r7, [r3, #24]
   18ae0:	cmp	r7, #0
   18ae4:	beq	19df0 <test_scan@@Base+0x171c>
   18ae8:	ldr	r3, [r2, r7]
   18aec:	add	r2, r2, r7
   18af0:	add	r7, r3, #4
   18af4:	adds	r3, r2, r7
   18af8:	str	r3, [sp, #40]	; 0x28
   18afc:	beq	19df0 <test_scan@@Base+0x171c>
   18b00:	adds	r2, r0, r1
   18b04:	ldr	r4, [r2, #-4]
   18b08:	cmp	r4, #0
   18b0c:	beq	18bcc <test_scan@@Base+0x4f8>
   18b10:	ldr	r3, [r0, r1]
   18b14:	mov	r1, r2
   18b18:	adds	r2, r2, r3
   18b1c:	str	r2, [sp, #28]
   18b20:	beq	19b90 <test_scan@@Base+0x14bc>
   18b24:	ldr	r3, [r1, r3]
   18b28:	sub	r3, r2, r3
   18b2c:	ldrh	r0, [r3]
   18b30:	cmp	r0, #11
   18b34:	str	r0, [sp, #48]	; 0x30
   18b38:	str	r3, [sp, #52]	; 0x34
   18b3c:	bls	19b58 <test_scan@@Base+0x1484>
   18b40:	ldrh	r7, [r3, #10]
   18b44:	cmp	r7, #0
   18b48:	beq	19b58 <test_scan@@Base+0x1484>
   18b4c:	add	r3, r1, #4
   18b50:	movw	r5, #26892	; 0x690c
   18b54:	movt	r5, #2
   18b58:	mov	r8, r3
   18b5c:	mov	r0, r7
   18b60:	mov	r6, #0
   18b64:	str	r3, [sp, #24]
   18b68:	b	18ba0 <test_scan@@Base+0x4cc>
   18b6c:	mov	r3, r8
   18b70:	add	r8, r8, #4
   18b74:	ldr	r1, [r3]
   18b78:	adds	r2, r3, r1
   18b7c:	beq	19b90 <test_scan@@Base+0x14bc>
   18b80:	ldr	r3, [r3, r1]
   18b84:	sub	r3, r2, r3
   18b88:	ldrh	r1, [r3]
   18b8c:	cmp	r1, #11
   18b90:	bls	19b58 <test_scan@@Base+0x1484>
   18b94:	ldrh	r0, [r3, #10]
   18b98:	cmp	r0, #0
   18b9c:	beq	19b58 <test_scan@@Base+0x1484>
   18ba0:	ldr	r3, [r2, r0]
   18ba4:	add	r2, r2, r0
   18ba8:	mov	r1, r5
   18bac:	add	r0, r3, #4
   18bb0:	add	r0, r2, r0
   18bb4:	bl	12968 <strcmp@plt>
   18bb8:	cmp	r0, #0
   18bbc:	beq	18c08 <test_scan@@Base+0x534>
   18bc0:	add	r6, r6, #1
   18bc4:	cmp	r6, r4
   18bc8:	bne	18b6c <test_scan@@Base+0x498>
   18bcc:	movw	r0, #29068	; 0x718c
   18bd0:	movt	r0, #2
   18bd4:	bl	129c8 <puts@plt>
   18bd8:	mvn	r3, #0
   18bdc:	str	r3, [sp, #20]
   18be0:	ldr	r0, [sp, #32]
   18be4:	bl	23658 <flatcc_builder_aligned_free@@Base>
   18be8:	ldr	r0, [sp, #20]
   18bec:	add	sp, sp, #84	; 0x54
   18bf0:	ldrd	r4, [sp]
   18bf4:	ldrd	r6, [sp, #8]
   18bf8:	ldrd	r8, [sp, #16]
   18bfc:	ldrd	sl, [sp, #24]
   18c00:	add	sp, sp, #32
   18c04:	pop	{pc}		; (ldr pc, [sp], #4)
   18c08:	cmp	r6, #1
   18c0c:	bne	18bcc <test_scan@@Base+0x4f8>
   18c10:	ldr	r3, [sp, #12]
   18c14:	sub	r6, r4, #-1073741823	; 0xc0000001
   18c18:	sub	r9, r4, #1
   18c1c:	movw	r8, #26892	; 0x690c
   18c20:	movt	r8, #2
   18c24:	str	r9, [sp, #16]
   18c28:	add	r6, r3, r6, lsl #2
   18c2c:	mov	sl, r6
   18c30:	b	18c98 <test_scan@@Base+0x5c4>
   18c34:	cmp	r9, r4
   18c38:	mov	r3, sl
   18c3c:	bcs	19bdc <test_scan@@Base+0x1508>
   18c40:	ldr	r2, [r3]
   18c44:	sub	sl, sl, #4
   18c48:	adds	r0, r3, r2
   18c4c:	beq	19b90 <test_scan@@Base+0x14bc>
   18c50:	ldr	r3, [r3, r2]
   18c54:	sub	r3, r0, r3
   18c58:	ldrh	r2, [r3]
   18c5c:	cmp	r2, #11
   18c60:	bls	19b58 <test_scan@@Base+0x1484>
   18c64:	ldrh	r2, [r3, #10]
   18c68:	cmp	r2, #0
   18c6c:	beq	19b58 <test_scan@@Base+0x1484>
   18c70:	ldr	r3, [r0, r2]
   18c74:	add	r0, r0, r2
   18c78:	mov	r1, r8
   18c7c:	add	r3, r3, #4
   18c80:	add	r0, r0, r3
   18c84:	bl	12968 <strcmp@plt>
   18c88:	cmp	r0, #0
   18c8c:	sub	r3, r9, #1
   18c90:	beq	18cb8 <test_scan@@Base+0x5e4>
   18c94:	mov	r9, r3
   18c98:	cmn	r9, #1
   18c9c:	bne	18c34 <test_scan@@Base+0x560>
   18ca0:	movw	r0, #29100	; 0x71ac
   18ca4:	movt	r0, #2
   18ca8:	bl	129c8 <puts@plt>
   18cac:	mvn	r3, #0
   18cb0:	str	r3, [sp, #20]
   18cb4:	b	18be0 <test_scan@@Base+0x50c>
   18cb8:	cmp	r9, #1
   18cbc:	mov	r5, r0
   18cc0:	bne	18ca0 <test_scan@@Base+0x5cc>
   18cc4:	movw	r9, #28936	; 0x7108
   18cc8:	movt	r9, #2
   18ccc:	ldr	sl, [sp, #24]
   18cd0:	mov	r3, r7
   18cd4:	ldr	r2, [sp, #28]
   18cd8:	b	18d1c <test_scan@@Base+0x648>
   18cdc:	add	r5, r5, #1
   18ce0:	cmp	r5, r4
   18ce4:	beq	19bac <test_scan@@Base+0x14d8>
   18ce8:	mov	r3, sl
   18cec:	add	sl, sl, #4
   18cf0:	ldr	r1, [r3]
   18cf4:	adds	r2, r3, r1
   18cf8:	beq	19b90 <test_scan@@Base+0x14bc>
   18cfc:	ldr	r3, [r3, r1]
   18d00:	sub	r3, r2, r3
   18d04:	ldrh	r1, [r3]
   18d08:	cmp	r1, #11
   18d0c:	bls	19b58 <test_scan@@Base+0x1484>
   18d10:	ldrh	r3, [r3, #10]
   18d14:	cmp	r3, #0
   18d18:	beq	19b58 <test_scan@@Base+0x1484>
   18d1c:	ldr	r0, [r2, r3]
   18d20:	add	r2, r2, r3
   18d24:	add	r0, r0, #4
   18d28:	adds	r0, r2, r0
   18d2c:	beq	18cdc <test_scan@@Base+0x608>
   18d30:	ldr	r8, [r0, #-4]
   18d34:	mov	r1, r9
   18d38:	cmp	r8, #5
   18d3c:	movcc	r2, r8
   18d40:	movcs	r2, #5
   18d44:	bl	12a4c <strncmp@plt>
   18d48:	cmp	r0, #0
   18d4c:	bne	18cdc <test_scan@@Base+0x608>
   18d50:	cmp	r8, #5
   18d54:	bne	18cdc <test_scan@@Base+0x608>
   18d58:	cmp	r5, #1
   18d5c:	bne	19bac <test_scan@@Base+0x14d8>
   18d60:	movw	sl, #28936	; 0x7108
   18d64:	movt	sl, #2
   18d68:	ldr	r5, [sp, #16]
   18d6c:	mov	r9, r6
   18d70:	b	18d80 <test_scan@@Base+0x6ac>
   18d74:	cmp	r5, #0
   18d78:	sub	r5, r5, #1
   18d7c:	beq	19bac <test_scan@@Base+0x14d8>
   18d80:	cmp	r5, r4
   18d84:	mov	r3, r9
   18d88:	bcs	19bdc <test_scan@@Base+0x1508>
   18d8c:	ldr	r2, [r3]
   18d90:	sub	r9, r9, #4
   18d94:	adds	r0, r3, r2
   18d98:	beq	19b90 <test_scan@@Base+0x14bc>
   18d9c:	ldr	r3, [r3, r2]
   18da0:	sub	r3, r0, r3
   18da4:	ldrh	r2, [r3]
   18da8:	cmp	r2, #11
   18dac:	bls	19b58 <test_scan@@Base+0x1484>
   18db0:	ldrh	r2, [r3, #10]
   18db4:	cmp	r2, #0
   18db8:	beq	19b58 <test_scan@@Base+0x1484>
   18dbc:	ldr	r3, [r0, r2]
   18dc0:	add	r0, r0, r2
   18dc4:	add	r3, r3, #4
   18dc8:	adds	r0, r0, r3
   18dcc:	beq	18d74 <test_scan@@Base+0x6a0>
   18dd0:	ldr	fp, [r0, #-4]
   18dd4:	mov	r1, sl
   18dd8:	cmp	fp, #5
   18ddc:	movcc	r2, fp
   18de0:	movcs	r2, #5
   18de4:	bl	12a4c <strncmp@plt>
   18de8:	cmp	r0, #0
   18dec:	bne	18d74 <test_scan@@Base+0x6a0>
   18df0:	cmp	fp, #5
   18df4:	bne	18d74 <test_scan@@Base+0x6a0>
   18df8:	cmp	r5, #1
   18dfc:	mov	r8, r0
   18e00:	bne	19bac <test_scan@@Base+0x14d8>
   18e04:	movw	r3, #26892	; 0x690c
   18e08:	movt	r3, #2
   18e0c:	ldr	r0, [sp, #12]
   18e10:	mvn	r2, #0
   18e14:	mov	r1, #2
   18e18:	bl	14650 <_start@@Base+0x1a40>
   18e1c:	cmn	r0, #1
   18e20:	bne	19c50 <test_scan@@Base+0x157c>
   18e24:	movw	r5, #28980	; 0x7134
   18e28:	movt	r5, #2
   18e2c:	ldr	r9, [sp, #24]
   18e30:	mov	r0, r7
   18e34:	ldr	r2, [sp, #28]
   18e38:	b	18e7c <test_scan@@Base+0x7a8>
   18e3c:	add	r8, r8, #1
   18e40:	cmp	r8, r4
   18e44:	bcs	18eb4 <test_scan@@Base+0x7e0>
   18e48:	mov	r3, r9
   18e4c:	add	r9, r9, #4
   18e50:	ldr	r1, [r3]
   18e54:	adds	r2, r3, r1
   18e58:	beq	19b90 <test_scan@@Base+0x14bc>
   18e5c:	ldr	r3, [r3, r1]
   18e60:	sub	r3, r2, r3
   18e64:	ldrh	r1, [r3]
   18e68:	cmp	r1, #11
   18e6c:	bls	19b58 <test_scan@@Base+0x1484>
   18e70:	ldrh	r0, [r3, #10]
   18e74:	cmp	r0, #0
   18e78:	beq	19b58 <test_scan@@Base+0x1484>
   18e7c:	ldr	r3, [r2, r0]
   18e80:	add	r2, r2, r0
   18e84:	mov	r1, r5
   18e88:	add	r0, r3, #4
   18e8c:	add	r0, r2, r0
   18e90:	bl	12968 <strcmp@plt>
   18e94:	cmp	r0, #0
   18e98:	bne	18e3c <test_scan@@Base+0x768>
   18e9c:	movw	r0, #28988	; 0x713c
   18ea0:	movt	r0, #2
   18ea4:	bl	129c8 <puts@plt>
   18ea8:	mvn	r3, #0
   18eac:	str	r3, [sp, #20]
   18eb0:	b	18be0 <test_scan@@Base+0x50c>
   18eb4:	movw	r5, #26792	; 0x68a8
   18eb8:	movt	r5, #2
   18ebc:	ldr	r9, [sp, #24]
   18ec0:	mov	r0, r7
   18ec4:	mov	r8, #0
   18ec8:	ldr	r2, [sp, #28]
   18ecc:	b	18f10 <test_scan@@Base+0x83c>
   18ed0:	add	r8, r8, #1
   18ed4:	cmp	r8, r4
   18ed8:	bcs	19d78 <test_scan@@Base+0x16a4>
   18edc:	mov	r3, r9
   18ee0:	add	r9, r9, #4
   18ee4:	ldr	r1, [r3]
   18ee8:	adds	r2, r3, r1
   18eec:	beq	19b90 <test_scan@@Base+0x14bc>
   18ef0:	ldr	r3, [r3, r1]
   18ef4:	sub	r3, r2, r3
   18ef8:	ldrh	r1, [r3]
   18efc:	cmp	r1, #11
   18f00:	bls	19b58 <test_scan@@Base+0x1484>
   18f04:	ldrh	r0, [r3, #10]
   18f08:	cmp	r0, #0
   18f0c:	beq	19b58 <test_scan@@Base+0x1484>
   18f10:	ldr	r3, [r2, r0]
   18f14:	add	r2, r2, r0
   18f18:	mov	r1, r5
   18f1c:	add	r0, r3, #4
   18f20:	add	r0, r2, r0
   18f24:	bl	12968 <strcmp@plt>
   18f28:	cmp	r0, #0
   18f2c:	bne	18ed0 <test_scan@@Base+0x7fc>
   18f30:	cmp	r8, #0
   18f34:	bne	19d78 <test_scan@@Base+0x16a4>
   18f38:	movw	r5, #26936	; 0x6938
   18f3c:	movt	r5, #2
   18f40:	ldr	r9, [sp, #24]
   18f44:	ldr	r0, [sp, #28]
   18f48:	b	18f8c <test_scan@@Base+0x8b8>
   18f4c:	add	r8, r8, #1
   18f50:	cmp	r8, r4
   18f54:	bcs	1902c <test_scan@@Base+0x958>
   18f58:	mov	r3, r9
   18f5c:	add	r9, r9, #4
   18f60:	ldr	r2, [r3]
   18f64:	adds	r0, r3, r2
   18f68:	beq	19b90 <test_scan@@Base+0x14bc>
   18f6c:	ldr	r3, [r3, r2]
   18f70:	sub	r3, r0, r3
   18f74:	ldrh	r2, [r3]
   18f78:	cmp	r2, #11
   18f7c:	bls	19b58 <test_scan@@Base+0x1484>
   18f80:	ldrh	r7, [r3, #10]
   18f84:	cmp	r7, #0
   18f88:	beq	19b58 <test_scan@@Base+0x1484>
   18f8c:	ldr	r3, [r0, r7]
   18f90:	add	r0, r0, r7
   18f94:	mov	r1, r5
   18f98:	add	r3, r3, #4
   18f9c:	add	r0, r0, r3
   18fa0:	bl	12968 <strcmp@plt>
   18fa4:	cmp	r0, #0
   18fa8:	bne	18f4c <test_scan@@Base+0x878>
   18fac:	cmp	r8, #2
   18fb0:	bne	1902c <test_scan@@Base+0x958>
   18fb4:	ldr	r7, [sp, #16]
   18fb8:	movw	r5, #26936	; 0x6938
   18fbc:	movt	r5, #2
   18fc0:	mov	r8, r6
   18fc4:	cmp	r7, r4
   18fc8:	mov	r3, r8
   18fcc:	bcs	19bdc <test_scan@@Base+0x1508>
   18fd0:	ldr	r2, [r3]
   18fd4:	sub	r8, r8, #4
   18fd8:	adds	r0, r3, r2
   18fdc:	beq	19b90 <test_scan@@Base+0x14bc>
   18fe0:	ldr	r3, [r3, r2]
   18fe4:	sub	r3, r0, r3
   18fe8:	ldrh	r2, [r3]
   18fec:	cmp	r2, #11
   18ff0:	bls	19b58 <test_scan@@Base+0x1484>
   18ff4:	ldrh	r2, [r3, #10]
   18ff8:	cmp	r2, #0
   18ffc:	beq	19b58 <test_scan@@Base+0x1484>
   19000:	ldr	r3, [r0, r2]
   19004:	add	r0, r0, r2
   19008:	mov	r1, r5
   1900c:	add	r3, r3, #4
   19010:	add	r0, r0, r3
   19014:	bl	12968 <strcmp@plt>
   19018:	cmp	r0, #0
   1901c:	beq	19044 <test_scan@@Base+0x970>
   19020:	cmp	r7, #0
   19024:	sub	r7, r7, #1
   19028:	bne	18fc4 <test_scan@@Base+0x8f0>
   1902c:	movw	r0, #29308	; 0x727c
   19030:	movt	r0, #2
   19034:	bl	129c8 <puts@plt>
   19038:	mvn	r3, #0
   1903c:	str	r3, [sp, #20]
   19040:	b	18be0 <test_scan@@Base+0x50c>
   19044:	cmp	r7, #4
   19048:	bne	1902c <test_scan@@Base+0x958>
   1904c:	movw	r7, #29216	; 0x7220
   19050:	movt	r7, #2
   19054:	ldr	r5, [sp, #16]
   19058:	b	19064 <test_scan@@Base+0x990>
   1905c:	subs	r5, r5, #1
   19060:	bcc	191b8 <test_scan@@Base+0xae4>
   19064:	cmp	r5, r4
   19068:	mov	r3, r6
   1906c:	bcs	19bdc <test_scan@@Base+0x1508>
   19070:	ldr	r2, [r3]
   19074:	sub	r6, r6, #4
   19078:	adds	r0, r3, r2
   1907c:	beq	19b90 <test_scan@@Base+0x14bc>
   19080:	ldr	r3, [r3, r2]
   19084:	sub	r3, r0, r3
   19088:	ldrh	r2, [r3]
   1908c:	cmp	r2, #11
   19090:	bls	19b58 <test_scan@@Base+0x1484>
   19094:	ldrh	r2, [r3, #10]
   19098:	cmp	r2, #0
   1909c:	beq	19b58 <test_scan@@Base+0x1484>
   190a0:	ldr	r3, [r0, r2]
   190a4:	add	r0, r0, r2
   190a8:	add	r3, r3, #4
   190ac:	adds	r0, r0, r3
   190b0:	beq	1905c <test_scan@@Base+0x988>
   190b4:	ldr	r8, [r0, #-4]
   190b8:	mov	r1, r7
   190bc:	cmp	r8, #8
   190c0:	movcc	r2, r8
   190c4:	movcs	r2, #8
   190c8:	bl	12a4c <strncmp@plt>
   190cc:	cmp	r0, #0
   190d0:	bne	1905c <test_scan@@Base+0x988>
   190d4:	cmp	r8, #8
   190d8:	bne	1905c <test_scan@@Base+0x988>
   190dc:	cmp	r5, #4
   190e0:	bne	191b8 <test_scan@@Base+0xae4>
   190e4:	cmp	r4, #3
   190e8:	movcc	r6, r4
   190ec:	movcs	r6, #3
   190f0:	cmp	r4, #1
   190f4:	sub	r5, r6, #1
   190f8:	beq	191b8 <test_scan@@Base+0xae4>
   190fc:	ldr	r3, [sp, #12]
   19100:	cmp	r4, r5
   19104:	add	r2, r3, r5, lsl #2
   19108:	bls	19bdc <test_scan@@Base+0x1508>
   1910c:	ldr	r3, [r3, r5, lsl #2]
   19110:	adds	r0, r2, r3
   19114:	beq	19b90 <test_scan@@Base+0x14bc>
   19118:	ldr	r3, [r2, r3]
   1911c:	sub	r3, r0, r3
   19120:	ldrh	r2, [r3]
   19124:	cmp	r2, #11
   19128:	bls	19b58 <test_scan@@Base+0x1484>
   1912c:	ldrh	r2, [r3, #10]
   19130:	cmp	r2, #0
   19134:	beq	19b58 <test_scan@@Base+0x1484>
   19138:	ldr	r3, [r0, r2]
   1913c:	add	r0, r0, r2
   19140:	add	r3, r3, #4
   19144:	adds	r0, r0, r3
   19148:	beq	19170 <test_scan@@Base+0xa9c>
   1914c:	ldr	r7, [r0, #-4]
   19150:	movw	r1, #29216	; 0x7220
   19154:	movt	r1, #2
   19158:	cmp	r7, #8
   1915c:	movcc	r2, r7
   19160:	movcs	r2, #8
   19164:	bl	12a4c <strncmp@plt>
   19168:	cmp	r0, #0
   1916c:	beq	191d0 <test_scan@@Base+0xafc>
   19170:	cmp	r5, #2
   19174:	sub	r6, r6, #2
   19178:	bne	191b8 <test_scan@@Base+0xae4>
   1917c:	ldr	r3, [sp, #12]
   19180:	cmp	r6, r4
   19184:	add	r1, r3, r6, lsl #2
   19188:	bcs	19bdc <test_scan@@Base+0x1508>
   1918c:	ldr	r2, [r3, r6, lsl #2]
   19190:	adds	r3, r1, r2
   19194:	beq	19b90 <test_scan@@Base+0x14bc>
   19198:	ldr	r2, [r1, r2]
   1919c:	sub	r3, r3, r2
   191a0:	ldrh	r2, [r3]
   191a4:	cmp	r2, #11
   191a8:	bls	19b58 <test_scan@@Base+0x1484>
   191ac:	ldrh	r3, [r3, #10]
   191b0:	cmp	r3, #0
   191b4:	beq	19b58 <test_scan@@Base+0x1484>
   191b8:	movw	r0, #29228	; 0x722c
   191bc:	movt	r0, #2
   191c0:	bl	129c8 <puts@plt>
   191c4:	mvn	r3, #0
   191c8:	str	r3, [sp, #20]
   191cc:	b	18be0 <test_scan@@Base+0x50c>
   191d0:	cmp	r7, #8
   191d4:	bne	19170 <test_scan@@Base+0xa9c>
   191d8:	cmp	r5, #2
   191dc:	bne	191b8 <test_scan@@Base+0xae4>
   191e0:	ldr	r6, [sp, #12]
   191e4:	mov	r1, r5
   191e8:	movw	r3, #26936	; 0x6938
   191ec:	movt	r3, #2
   191f0:	mvn	r2, #0
   191f4:	mov	r0, r6
   191f8:	bl	14650 <_start@@Base+0x1a40>
   191fc:	cmp	r0, #2
   19200:	mov	r5, r0
   19204:	bne	19bc4 <test_scan@@Base+0x14f0>
   19208:	cmp	r4, #2
   1920c:	bls	19bc4 <test_scan@@Base+0x14f0>
   19210:	ldr	r3, [r6, #8]
   19214:	add	r3, r3, #8
   19218:	adds	r2, r6, r3
   1921c:	beq	19b90 <test_scan@@Base+0x14bc>
   19220:	ldr	r3, [r6, r3]
   19224:	sub	r3, r2, r3
   19228:	ldrh	r1, [r3]
   1922c:	cmp	r1, #11
   19230:	bls	19b58 <test_scan@@Base+0x1484>
   19234:	ldrh	r0, [r3, #10]
   19238:	cmp	r0, #0
   1923c:	beq	19b58 <test_scan@@Base+0x1484>
   19240:	movw	r7, #29216	; 0x7220
   19244:	movt	r7, #2
   19248:	add	r8, r6, #12
   1924c:	mov	r3, r0
   19250:	b	19294 <test_scan@@Base+0xbc0>
   19254:	add	r5, r5, #1
   19258:	cmp	r5, r4
   1925c:	beq	19bc4 <test_scan@@Base+0x14f0>
   19260:	mov	r3, r8
   19264:	add	r8, r8, #4
   19268:	ldr	r1, [r3]
   1926c:	adds	r2, r3, r1
   19270:	beq	19b90 <test_scan@@Base+0x14bc>
   19274:	ldr	r3, [r3, r1]
   19278:	sub	r3, r2, r3
   1927c:	ldrh	r1, [r3]
   19280:	cmp	r1, #11
   19284:	bls	19b58 <test_scan@@Base+0x1484>
   19288:	ldrh	r3, [r3, #10]
   1928c:	cmp	r3, #0
   19290:	beq	19b58 <test_scan@@Base+0x1484>
   19294:	ldr	r0, [r2, r3]
   19298:	add	r2, r2, r3
   1929c:	add	r0, r0, #4
   192a0:	adds	r0, r2, r0
   192a4:	beq	19254 <test_scan@@Base+0xb80>
   192a8:	ldr	r6, [r0, #-4]
   192ac:	mov	r1, r7
   192b0:	cmp	r6, #8
   192b4:	movcc	r2, r6
   192b8:	movcs	r2, #8
   192bc:	bl	12a4c <strncmp@plt>
   192c0:	cmp	r0, #0
   192c4:	bne	19254 <test_scan@@Base+0xb80>
   192c8:	cmp	r6, #8
   192cc:	bne	19254 <test_scan@@Base+0xb80>
   192d0:	cmp	r5, #2
   192d4:	str	r0, [sp, #20]
   192d8:	bne	19bc4 <test_scan@@Base+0x14f0>
   192dc:	movw	r3, #26936	; 0x6938
   192e0:	movt	r3, #2
   192e4:	ldr	r0, [sp, #12]
   192e8:	mvn	r2, #0
   192ec:	mov	r1, #3
   192f0:	bl	14650 <_start@@Base+0x1a40>
   192f4:	cmp	r0, #4
   192f8:	bne	19c68 <test_scan@@Base+0x1594>
   192fc:	movw	r3, #28980	; 0x7134
   19300:	movt	r3, #2
   19304:	ldr	r0, [sp, #12]
   19308:	mov	r2, #3
   1930c:	mov	r1, #1
   19310:	bl	14650 <_start@@Base+0x1a40>
   19314:	cmn	r0, #1
   19318:	mov	r5, r0
   1931c:	bne	19ca4 <test_scan@@Base+0x15d0>
   19320:	movw	r3, #26792	; 0x68a8
   19324:	movt	r3, #2
   19328:	ldr	r0, [sp, #12]
   1932c:	mov	r2, #3
   19330:	mov	r1, #1
   19334:	bl	14650 <_start@@Base+0x1a40>
   19338:	cmn	r0, #1
   1933c:	mov	r6, r0
   19340:	bne	19c90 <test_scan@@Base+0x15bc>
   19344:	movw	r3, #26892	; 0x690c
   19348:	movt	r3, #2
   1934c:	ldr	r0, [sp, #12]
   19350:	mov	r2, #3
   19354:	mov	r1, #1
   19358:	bl	14650 <_start@@Base+0x1a40>
   1935c:	cmp	r0, #1
   19360:	mov	r5, r0
   19364:	bne	19cd0 <test_scan@@Base+0x15fc>
   19368:	mov	r1, r0
   1936c:	movw	r3, #26936	; 0x6938
   19370:	movt	r3, #2
   19374:	mov	r2, #3
   19378:	ldr	r0, [sp, #12]
   1937c:	bl	14650 <_start@@Base+0x1a40>
   19380:	cmp	r0, #2
   19384:	bne	19cbc <test_scan@@Base+0x15e8>
   19388:	mov	r1, r5
   1938c:	movw	r3, #28492	; 0x6f4c
   19390:	movt	r3, #2
   19394:	mov	r2, #3
   19398:	ldr	r0, [sp, #12]
   1939c:	bl	14650 <_start@@Base+0x1a40>
   193a0:	cmn	r0, #1
   193a4:	bne	19cfc <test_scan@@Base+0x1628>
   193a8:	movw	r3, #28980	; 0x7134
   193ac:	movt	r3, #2
   193b0:	ldr	r0, [sp, #12]
   193b4:	mov	r2, #3
   193b8:	mov	r1, #1
   193bc:	bl	14530 <_start@@Base+0x1920>
   193c0:	cmn	r0, #1
   193c4:	mov	r5, r0
   193c8:	bne	19ce4 <test_scan@@Base+0x1610>
   193cc:	movw	r3, #26792	; 0x68a8
   193d0:	movt	r3, #2
   193d4:	ldr	r0, [sp, #12]
   193d8:	mov	r2, #3
   193dc:	mov	r1, #1
   193e0:	bl	14530 <_start@@Base+0x1920>
   193e4:	cmn	r0, #1
   193e8:	mov	r6, r0
   193ec:	bne	19d28 <test_scan@@Base+0x1654>
   193f0:	movw	r3, #26892	; 0x690c
   193f4:	movt	r3, #2
   193f8:	ldr	r0, [sp, #12]
   193fc:	mov	r2, #3
   19400:	mov	r1, #1
   19404:	bl	14530 <_start@@Base+0x1920>
   19408:	cmp	r0, #1
   1940c:	mov	r5, r0
   19410:	bne	19d14 <test_scan@@Base+0x1640>
   19414:	mov	r1, r0
   19418:	movw	r3, #26936	; 0x6938
   1941c:	movt	r3, #2
   19420:	mov	r2, #3
   19424:	ldr	r0, [sp, #12]
   19428:	bl	14530 <_start@@Base+0x1920>
   1942c:	cmp	r0, #2
   19430:	bne	19d50 <test_scan@@Base+0x167c>
   19434:	movw	r3, #28492	; 0x6f4c
   19438:	movt	r3, #2
   1943c:	ldr	r0, [sp, #12]
   19440:	mov	r2, #3
   19444:	mov	r1, r5
   19448:	bl	14530 <_start@@Base+0x1920>
   1944c:	cmn	r0, #1
   19450:	bne	19d3c <test_scan@@Base+0x1668>
   19454:	mov	r2, #0
   19458:	movw	r3, #26792	; 0x68a8
   1945c:	movt	r3, #2
   19460:	mov	r1, r2
   19464:	ldr	r0, [sp, #12]
   19468:	bl	14650 <_start@@Base+0x1a40>
   1946c:	cmn	r0, #1
   19470:	bne	19bf0 <test_scan@@Base+0x151c>
   19474:	mov	r2, #0
   19478:	movw	r3, #26892	; 0x690c
   1947c:	movt	r3, #2
   19480:	mov	r1, r2
   19484:	ldr	r0, [sp, #12]
   19488:	bl	14650 <_start@@Base+0x1a40>
   1948c:	cmn	r0, #1
   19490:	bne	19c08 <test_scan@@Base+0x1534>
   19494:	movw	r3, #26892	; 0x690c
   19498:	movt	r3, #2
   1949c:	ldr	r0, [sp, #12]
   194a0:	mov	r2, r5
   194a4:	mov	r1, r5
   194a8:	bl	14650 <_start@@Base+0x1a40>
   194ac:	cmn	r0, #1
   194b0:	bne	19c20 <test_scan@@Base+0x154c>
   194b4:	mov	r2, r0
   194b8:	movw	r3, #26792	; 0x68a8
   194bc:	movt	r3, #2
   194c0:	mov	r1, r4
   194c4:	ldr	r0, [sp, #12]
   194c8:	bl	14650 <_start@@Base+0x1a40>
   194cc:	cmn	r0, #1
   194d0:	bne	19c38 <test_scan@@Base+0x1564>
   194d4:	ldr	r6, [sp, #12]
   194d8:	mov	r2, #0
   194dc:	movw	r3, #26792	; 0x68a8
   194e0:	movt	r3, #2
   194e4:	mov	r1, r2
   194e8:	mov	r0, r6
   194ec:	bl	14530 <_start@@Base+0x1920>
   194f0:	cmn	r0, #1
   194f4:	bne	19bf0 <test_scan@@Base+0x151c>
   194f8:	mov	r2, #0
   194fc:	movw	r3, #26892	; 0x690c
   19500:	movt	r3, #2
   19504:	mov	r1, r2
   19508:	mov	r0, r6
   1950c:	bl	14530 <_start@@Base+0x1920>
   19510:	cmn	r0, #1
   19514:	bne	19c08 <test_scan@@Base+0x1534>
   19518:	mov	r2, #1
   1951c:	movw	r3, #26892	; 0x690c
   19520:	movt	r3, #2
   19524:	mov	r1, r2
   19528:	mov	r0, r6
   1952c:	bl	14530 <_start@@Base+0x1920>
   19530:	cmn	r0, #1
   19534:	bne	19c20 <test_scan@@Base+0x154c>
   19538:	mov	r2, r0
   1953c:	movw	r3, #26792	; 0x68a8
   19540:	movt	r3, #2
   19544:	mov	r1, r4
   19548:	mov	r0, r6
   1954c:	bl	14530 <_start@@Base+0x1920>
   19550:	cmn	r0, #1
   19554:	mov	r5, r0
   19558:	bne	19c38 <test_scan@@Base+0x1564>
   1955c:	movw	r1, #26892	; 0x690c
   19560:	movt	r1, #2
   19564:	mov	r0, r6
   19568:	bl	14330 <_start@@Base+0x1720>
   1956c:	cmp	r0, #1
   19570:	bne	19d64 <test_scan@@Base+0x1690>
   19574:	mov	r0, r6
   19578:	movw	r1, #28980	; 0x7134
   1957c:	movt	r1, #2
   19580:	bl	14330 <_start@@Base+0x1720>
   19584:	subs	r3, r0, #0
   19588:	str	r3, [sp, #44]	; 0x2c
   1958c:	bne	19da8 <test_scan@@Base+0x16d4>
   19590:	movw	r1, #26792	; 0x68a8
   19594:	movt	r1, #2
   19598:	ldr	r0, [sp, #12]
   1959c:	bl	14330 <_start@@Base+0x1720>
   195a0:	cmp	r0, #1
   195a4:	mov	sl, r0
   195a8:	bne	19d90 <test_scan@@Base+0x16bc>
   195ac:	movw	r1, #26936	; 0x6938
   195b0:	movt	r1, #2
   195b4:	ldr	r0, [sp, #12]
   195b8:	bl	14330 <_start@@Base+0x1720>
   195bc:	cmp	r0, #2
   195c0:	bne	19dd4 <test_scan@@Base+0x1700>
   195c4:	ldr	r3, [sp, #36]	; 0x24
   195c8:	ldr	ip, [r3, #-4]
   195cc:	cmp	ip, #0
   195d0:	beq	19618 <test_scan@@Base+0xf44>
   195d4:	ldr	r3, [sp, #56]	; 0x38
   195d8:	ldr	r2, [sp, #60]	; 0x3c
   195dc:	ldrb	lr, [r3, r2]
   195e0:	cmp	lr, #6
   195e4:	beq	19be0 <test_scan@@Base+0x150c>
   195e8:	ldr	r2, [sp, #36]	; 0x24
   195ec:	add	r1, r2, ip
   195f0:	mov	r3, r2
   195f4:	sub	r6, r1, #1
   195f8:	rsb	r2, r2, #1
   195fc:	b	1960c <test_scan@@Base+0xf38>
   19600:	ldrb	r0, [r3, #1]!
   19604:	cmp	r0, #6
   19608:	beq	19630 <test_scan@@Base+0xf5c>
   1960c:	cmp	r6, r3
   19610:	add	r5, r2, r3
   19614:	bne	19600 <test_scan@@Base+0xf2c>
   19618:	movw	r0, #30000	; 0x7530
   1961c:	movt	r0, #2
   19620:	bl	129c8 <puts@plt>
   19624:	mvn	r3, #0
   19628:	str	r3, [sp, #20]
   1962c:	b	18be0 <test_scan@@Base+0x50c>
   19630:	cmp	r5, #0
   19634:	bne	19618 <test_scan@@Base+0xf44>
   19638:	cmp	lr, #1
   1963c:	beq	19668 <test_scan@@Base+0xf94>
   19640:	ldr	r3, [sp, #36]	; 0x24
   19644:	sub	r1, r1, #1
   19648:	mov	r0, r3
   1964c:	b	1965c <test_scan@@Base+0xf88>
   19650:	ldrb	r5, [r3, #1]!
   19654:	cmp	r5, #1
   19658:	beq	19680 <test_scan@@Base+0xfac>
   1965c:	cmp	r1, r3
   19660:	add	r6, r2, r3
   19664:	bne	19650 <test_scan@@Base+0xf7c>
   19668:	movw	r0, #30044	; 0x755c
   1966c:	movt	r0, #2
   19670:	bl	129c8 <puts@plt>
   19674:	mvn	r3, #0
   19678:	str	r3, [sp, #20]
   1967c:	b	18be0 <test_scan@@Base+0x50c>
   19680:	cmp	r6, #2
   19684:	bne	19668 <test_scan@@Base+0xf94>
   19688:	cmp	ip, #3
   1968c:	bls	196bc <test_scan@@Base+0xfe8>
   19690:	ldr	r5, [sp, #36]	; 0x24
   19694:	ldrb	r3, [r5, #3]
   19698:	cmp	r3, #1
   1969c:	beq	19dbc <test_scan@@Base+0x16e8>
   196a0:	add	r3, r5, #3
   196a4:	b	196b4 <test_scan@@Base+0xfe0>
   196a8:	ldrb	r5, [r3, #1]!
   196ac:	cmp	r5, #1
   196b0:	beq	19dbc <test_scan@@Base+0x16e8>
   196b4:	cmp	r1, r3
   196b8:	bne	196a8 <test_scan@@Base+0xfd4>
   196bc:	cmp	lr, #5
   196c0:	beq	1975c <test_scan@@Base+0x1088>
   196c4:	ldr	r3, [sp, #36]	; 0x24
   196c8:	b	196e8 <test_scan@@Base+0x1014>
   196cc:	andeq	r5, r2, r0, lsl #20
   196d0:	ldrdeq	r5, [r2], -ip
   196d4:	andeq	r5, r2, r4, ror #13
   196d8:	andeq	r5, r2, r8, lsl #20
   196dc:	ldrb	r5, [r3, #1]!
   196e0:	cmp	r5, #5
   196e4:	beq	1975c <test_scan@@Base+0x1088>
   196e8:	cmp	r1, r3
   196ec:	bne	196dc <test_scan@@Base+0x1008>
   196f0:	cmp	lr, #2
   196f4:	beq	19718 <test_scan@@Base+0x1044>
   196f8:	ldr	r1, [sp, #36]	; 0x24
   196fc:	b	1970c <test_scan@@Base+0x1038>
   19700:	ldrb	r5, [r1, #1]!
   19704:	cmp	r5, #2
   19708:	beq	19730 <test_scan@@Base+0x105c>
   1970c:	cmp	r3, r1
   19710:	add	r6, r2, r1
   19714:	bne	19700 <test_scan@@Base+0x102c>
   19718:	movw	r0, #30144	; 0x75c0
   1971c:	movt	r0, #2
   19720:	bl	129c8 <puts@plt>
   19724:	mvn	r3, #0
   19728:	str	r3, [sp, #20]
   1972c:	b	18be0 <test_scan@@Base+0x50c>
   19730:	cmp	r6, #6
   19734:	bne	19718 <test_scan@@Base+0x1044>
   19738:	cmp	lr, #3
   1973c:	bne	19750 <test_scan@@Base+0x107c>
   19740:	b	1975c <test_scan@@Base+0x1088>
   19744:	ldrb	r1, [r0, #1]!
   19748:	cmp	r1, #3
   1974c:	beq	19774 <test_scan@@Base+0x10a0>
   19750:	cmp	r3, r0
   19754:	add	lr, r2, r0
   19758:	bne	19744 <test_scan@@Base+0x1070>
   1975c:	movw	r0, #30092	; 0x758c
   19760:	movt	r0, #2
   19764:	bl	129c8 <puts@plt>
   19768:	mvn	r3, #0
   1976c:	str	r3, [sp, #20]
   19770:	b	18be0 <test_scan@@Base+0x50c>
   19774:	cmp	lr, #3
   19778:	bne	1975c <test_scan@@Base+0x1088>
   1977c:	cmp	ip, #3
   19780:	bls	19794 <test_scan@@Base+0x10c0>
   19784:	ldr	r1, [sp, #36]	; 0x24
   19788:	ldrb	r1, [r1, #3]
   1978c:	cmp	r1, #3
   19790:	beq	197ac <test_scan@@Base+0x10d8>
   19794:	movw	r0, #30188	; 0x75ec
   19798:	movt	r0, #2
   1979c:	bl	129c8 <puts@plt>
   197a0:	mvn	r3, #0
   197a4:	str	r3, [sp, #20]
   197a8:	b	18be0 <test_scan@@Base+0x50c>
   197ac:	cmp	ip, #4
   197b0:	beq	197e4 <test_scan@@Base+0x1110>
   197b4:	ldr	r0, [sp, #36]	; 0x24
   197b8:	ldrb	r1, [r0, #4]
   197bc:	cmp	r1, #3
   197c0:	beq	197e4 <test_scan@@Base+0x1110>
   197c4:	add	r1, r0, #4
   197c8:	b	197d8 <test_scan@@Base+0x1104>
   197cc:	ldrb	r0, [r1, #1]!
   197d0:	cmp	r0, #3
   197d4:	beq	197fc <test_scan@@Base+0x1128>
   197d8:	cmp	r3, r1
   197dc:	add	lr, r2, r1
   197e0:	bne	197cc <test_scan@@Base+0x10f8>
   197e4:	movw	r0, #30248	; 0x7628
   197e8:	movt	r0, #2
   197ec:	bl	129c8 <puts@plt>
   197f0:	mvn	r3, #0
   197f4:	str	r3, [sp, #20]
   197f8:	b	18be0 <test_scan@@Base+0x50c>
   197fc:	cmp	lr, #5
   19800:	bne	197e4 <test_scan@@Base+0x1110>
   19804:	ldr	r2, [sp, #36]	; 0x24
   19808:	sub	r3, ip, #1
   1980c:	ldrb	r1, [r2, r3]
   19810:	add	r2, r2, r3
   19814:	cmp	r1, #3
   19818:	beq	19858 <test_scan@@Base+0x1184>
   1981c:	sub	r3, ip, #2
   19820:	cmp	r3, ip
   19824:	bcs	19de8 <test_scan@@Base+0x1714>
   19828:	ldrb	r1, [r2, #-1]!
   1982c:	cmp	r1, #3
   19830:	beq	19858 <test_scan@@Base+0x1184>
   19834:	cmp	r3, #0
   19838:	sub	r3, r3, #1
   1983c:	bne	19820 <test_scan@@Base+0x114c>
   19840:	movw	r0, #30308	; 0x7664
   19844:	movt	r0, #2
   19848:	bl	129c8 <puts@plt>
   1984c:	mvn	r3, #0
   19850:	str	r3, [sp, #20]
   19854:	b	18be0 <test_scan@@Base+0x50c>
   19858:	cmp	r3, #5
   1985c:	bne	19840 <test_scan@@Base+0x116c>
   19860:	ldr	r3, [sp, #40]	; 0x28
   19864:	ldr	r5, [r3, #-4]
   19868:	cmp	r5, #0
   1986c:	beq	19c80 <test_scan@@Base+0x15ac>
   19870:	sub	r3, r5, #1
   19874:	sub	r7, r5, #-1073741823	; 0xc0000001
   19878:	mov	r9, r3
   1987c:	movw	r8, #27184	; 0x6a30
   19880:	movt	r8, #2
   19884:	str	r3, [sp, #36]	; 0x24
   19888:	ldr	r3, [sp, #40]	; 0x28
   1988c:	add	fp, r3, r7, lsl #2
   19890:	cmp	r9, r5
   19894:	mov	r0, fp
   19898:	bcs	19da4 <test_scan@@Base+0x16d0>
   1989c:	ldr	r3, [r0]
   198a0:	mov	r1, r8
   198a4:	sub	fp, fp, #4
   198a8:	sub	r9, r9, #1
   198ac:	add	r3, r3, #4
   198b0:	add	r0, r0, r3
   198b4:	bl	12968 <strcmp@plt>
   198b8:	cmp	r0, #0
   198bc:	beq	198c8 <test_scan@@Base+0x11f4>
   198c0:	cmn	r9, #1
   198c4:	bne	19890 <test_scan@@Base+0x11bc>
   198c8:	ldr	fp, [sp, #36]	; 0x24
   198cc:	movw	r9, #27184	; 0x6a30
   198d0:	movt	r9, #2
   198d4:	ldr	r3, [sp, #40]	; 0x28
   198d8:	mov	r8, fp
   198dc:	add	r7, r3, r7, lsl #2
   198e0:	mov	r6, r7
   198e4:	b	19918 <test_scan@@Base+0x1244>
   198e8:	cmp	r5, fp
   198ec:	mov	r0, r6
   198f0:	bls	19da4 <test_scan@@Base+0x16d0>
   198f4:	ldr	r3, [r0]
   198f8:	mov	r1, r9
   198fc:	sub	r6, r6, #4
   19900:	sub	fp, fp, #1
   19904:	add	r3, r3, #4
   19908:	add	r0, r0, r3
   1990c:	bl	12968 <strcmp@plt>
   19910:	cmp	r0, #0
   19914:	beq	19920 <test_scan@@Base+0x124c>
   19918:	cmn	fp, #1
   1991c:	bne	198e8 <test_scan@@Base+0x1214>
   19920:	ldr	r6, [sp, #36]	; 0x24
   19924:	movw	fp, #27184	; 0x6a30
   19928:	movt	fp, #2
   1992c:	mov	r9, r7
   19930:	str	r4, [sp, #36]	; 0x24
   19934:	cmn	r6, #1
   19938:	beq	19988 <test_scan@@Base+0x12b4>
   1993c:	cmp	r5, r6
   19940:	mov	r0, r9
   19944:	bls	19da4 <test_scan@@Base+0x16d0>
   19948:	ldr	r3, [r0]
   1994c:	sub	r9, r9, #4
   19950:	add	r3, r3, #4
   19954:	adds	r0, r0, r3
   19958:	beq	1997c <test_scan@@Base+0x12a8>
   1995c:	ldr	r4, [r0, #-4]
   19960:	mov	r1, fp
   19964:	cmp	r4, #4
   19968:	movcc	r2, r4
   1996c:	movcs	r2, #4
   19970:	bl	12a4c <strncmp@plt>
   19974:	cmp	r0, #0
   19978:	beq	19b40 <test_scan@@Base+0x146c>
   1997c:	sub	r6, r6, #1
   19980:	cmn	r6, #1
   19984:	bne	1993c <test_scan@@Base+0x1268>
   19988:	cmn	r8, #1
   1998c:	movw	r9, #27184	; 0x6a30
   19990:	movt	r9, #2
   19994:	ldr	r4, [sp, #36]	; 0x24
   19998:	beq	199e8 <test_scan@@Base+0x1314>
   1999c:	cmp	r8, r5
   199a0:	mov	r0, r7
   199a4:	bcs	19da4 <test_scan@@Base+0x16d0>
   199a8:	ldr	r3, [r0]
   199ac:	sub	r7, r7, #4
   199b0:	add	r3, r3, #4
   199b4:	adds	r0, r0, r3
   199b8:	beq	199dc <test_scan@@Base+0x1308>
   199bc:	ldr	r6, [r0, #-4]
   199c0:	mov	r1, r9
   199c4:	cmp	r6, #4
   199c8:	movcc	r2, r6
   199cc:	movcs	r2, #4
   199d0:	bl	12a4c <strncmp@plt>
   199d4:	cmp	r0, #0
   199d8:	beq	19b4c <test_scan@@Base+0x1478>
   199dc:	sub	r8, r8, #1
   199e0:	cmn	r8, #1
   199e4:	bne	1999c <test_scan@@Base+0x12c8>
   199e8:	add	r1, sp, #44	; 0x2c
   199ec:	ldr	r0, [sp, #24]
   199f0:	ldm	r1, {r1, r2, r3}
   199f4:	ldr	ip, [sp, #28]
   199f8:	b	19a28 <test_scan@@Base+0x1354>
   199fc:	add	r1, r1, #1
   19a00:	cmp	r1, r4
   19a04:	bcs	19a48 <test_scan@@Base+0x1374>
   19a08:	mov	r3, r0
   19a0c:	add	r0, r0, #4
   19a10:	ldr	r2, [r3]
   19a14:	adds	ip, r3, r2
   19a18:	beq	19b20 <test_scan@@Base+0x144c>
   19a1c:	ldr	r3, [r3, r2]
   19a20:	sub	r3, ip, r3
   19a24:	ldrh	r2, [r3]
   19a28:	cmp	r2, #9
   19a2c:	bls	199fc <test_scan@@Base+0x1328>
   19a30:	ldrh	r3, [r3, #8]
   19a34:	cmp	r3, #0
   19a38:	beq	199fc <test_scan@@Base+0x1328>
   19a3c:	ldrsh	r3, [ip, r3]
   19a40:	cmp	r3, #13
   19a44:	bne	199fc <test_scan@@Base+0x1328>
   19a48:	ldr	r2, [sp, #12]
   19a4c:	ldr	r1, [r2, #4]
   19a50:	add	r3, r1, #4
   19a54:	adds	r3, r2, r3
   19a58:	beq	19b20 <test_scan@@Base+0x144c>
   19a5c:	add	r0, r2, #8
   19a60:	b	19a84 <test_scan@@Base+0x13b0>
   19a64:	add	sl, sl, #1
   19a68:	cmp	sl, r4
   19a6c:	bcs	19ab0 <test_scan@@Base+0x13dc>
   19a70:	mov	r3, r0
   19a74:	add	r0, r0, #4
   19a78:	ldr	r2, [r3]
   19a7c:	adds	r3, r3, r2
   19a80:	beq	19b20 <test_scan@@Base+0x144c>
   19a84:	ldr	r2, [r3]
   19a88:	sub	r2, r3, r2
   19a8c:	ldrh	ip, [r2]
   19a90:	cmp	ip, #9
   19a94:	bls	19a64 <test_scan@@Base+0x1390>
   19a98:	ldrh	r2, [r2, #8]
   19a9c:	cmp	r2, #0
   19aa0:	beq	19a64 <test_scan@@Base+0x1390>
   19aa4:	ldrsh	r3, [r3, r2]
   19aa8:	cmp	r3, #42	; 0x2a
   19aac:	bne	19a64 <test_scan@@Base+0x1390>
   19ab0:	ldrd	r2, [sp, #12]
   19ab4:	add	r0, r2, r3, lsl #2
   19ab8:	b	19ac8 <test_scan@@Base+0x13f4>
   19abc:	cmp	r3, #0
   19ac0:	sub	r3, r3, #1
   19ac4:	beq	19b10 <test_scan@@Base+0x143c>
   19ac8:	cmp	r3, r4
   19acc:	mov	r2, r0
   19ad0:	bcs	19bdc <test_scan@@Base+0x1508>
   19ad4:	ldr	ip, [r2]
   19ad8:	sub	r0, r0, #4
   19adc:	adds	lr, r2, ip
   19ae0:	beq	19b20 <test_scan@@Base+0x144c>
   19ae4:	ldr	r2, [r2, ip]
   19ae8:	sub	r2, lr, r2
   19aec:	ldrh	ip, [r2]
   19af0:	cmp	ip, #9
   19af4:	bls	19abc <test_scan@@Base+0x13e8>
   19af8:	ldrh	r2, [r2, #8]
   19afc:	cmp	r2, #0
   19b00:	beq	19abc <test_scan@@Base+0x13e8>
   19b04:	ldrsh	r2, [lr, r2]
   19b08:	cmp	r2, #1
   19b0c:	bne	19abc <test_scan@@Base+0x13e8>
   19b10:	ldr	r3, [sp, #12]
   19b14:	add	r1, r1, #4
   19b18:	cmn	r3, r1
   19b1c:	bne	18be0 <test_scan@@Base+0x50c>
   19b20:	movw	r3, #21692	; 0x54bc
   19b24:	movt	r3, #2
   19b28:	movw	r1, #23600	; 0x5c30
   19b2c:	movt	r1, #2
   19b30:	movw	r0, #23700	; 0x5c94
   19b34:	movt	r0, #2
   19b38:	movw	r2, #697	; 0x2b9
   19b3c:	bl	12a64 <__assert_fail@plt>
   19b40:	cmp	r4, #4
   19b44:	beq	19988 <test_scan@@Base+0x12b4>
   19b48:	b	1997c <test_scan@@Base+0x12a8>
   19b4c:	cmp	r6, #4
   19b50:	beq	199e8 <test_scan@@Base+0x1314>
   19b54:	b	199dc <test_scan@@Base+0x1308>
   19b58:	movw	r1, #23600	; 0x5c30
   19b5c:	movt	r1, #2
   19b60:	ldr	r3, [pc, #-1172]	; 196d4 <test_scan@@Base+0x1000>
   19b64:	movw	r0, #23900	; 0x5d5c
   19b68:	movt	r0, #2
   19b6c:	movw	r2, #699	; 0x2bb
   19b70:	bl	12a64 <__assert_fail@plt>
   19b74:	movw	r1, #26688	; 0x6840
   19b78:	movt	r1, #2
   19b7c:	ldr	r3, [pc, #-1196]	; 196d8 <test_scan@@Base+0x1004>
   19b80:	movw	r0, #28524	; 0x6f6c
   19b84:	movt	r0, #2
   19b88:	movw	r2, #1305	; 0x519
   19b8c:	bl	12a64 <__assert_fail@plt>
   19b90:	movw	r1, #23600	; 0x5c30
   19b94:	movt	r1, #2
   19b98:	ldr	r3, [pc, #-1228]	; 196d4 <test_scan@@Base+0x1000>
   19b9c:	movw	r0, #23700	; 0x5c94
   19ba0:	movt	r0, #2
   19ba4:	movw	r2, #699	; 0x2bb
   19ba8:	bl	12a64 <__assert_fail@plt>
   19bac:	movw	r0, #29132	; 0x71cc
   19bb0:	movt	r0, #2
   19bb4:	bl	129c8 <puts@plt>
   19bb8:	mvn	r3, #0
   19bbc:	str	r3, [sp, #20]
   19bc0:	b	18be0 <test_scan@@Base+0x50c>
   19bc4:	movw	r0, #29256	; 0x7248
   19bc8:	movt	r0, #2
   19bcc:	bl	129c8 <puts@plt>
   19bd0:	mvn	r3, #0
   19bd4:	str	r3, [sp, #20]
   19bd8:	b	18be0 <test_scan@@Base+0x50c>
   19bdc:	bl	130ac <_start@@Base+0x49c>
   19be0:	ldr	r3, [sp, #36]	; 0x24
   19be4:	add	r1, r3, ip
   19be8:	rsb	r2, r3, #1
   19bec:	b	19640 <test_scan@@Base+0xf6c>
   19bf0:	movw	r0, #29736	; 0x7428
   19bf4:	movt	r0, #2
   19bf8:	bl	129c8 <puts@plt>
   19bfc:	mvn	r3, #0
   19c00:	str	r3, [sp, #20]
   19c04:	b	18be0 <test_scan@@Base+0x50c>
   19c08:	movw	r0, #29768	; 0x7448
   19c0c:	movt	r0, #2
   19c10:	bl	129c8 <puts@plt>
   19c14:	mvn	r3, #0
   19c18:	str	r3, [sp, #20]
   19c1c:	b	18be0 <test_scan@@Base+0x50c>
   19c20:	movw	r0, #29800	; 0x7468
   19c24:	movt	r0, #2
   19c28:	bl	129c8 <puts@plt>
   19c2c:	mvn	r3, #0
   19c30:	str	r3, [sp, #20]
   19c34:	b	18be0 <test_scan@@Base+0x50c>
   19c38:	movw	r0, #29840	; 0x7490
   19c3c:	movt	r0, #2
   19c40:	bl	129c8 <puts@plt>
   19c44:	mvn	r3, #0
   19c48:	str	r3, [sp, #20]
   19c4c:	b	18be0 <test_scan@@Base+0x50c>
   19c50:	movw	r0, #29172	; 0x71f4
   19c54:	movt	r0, #2
   19c58:	bl	129c8 <puts@plt>
   19c5c:	mvn	r3, #0
   19c60:	str	r3, [sp, #20]
   19c64:	b	18be0 <test_scan@@Base+0x50c>
   19c68:	movw	r0, #29300	; 0x7274
   19c6c:	movt	r0, #2
   19c70:	bl	129c8 <puts@plt>
   19c74:	mvn	r3, #0
   19c78:	str	r3, [sp, #20]
   19c7c:	b	18be0 <test_scan@@Base+0x50c>
   19c80:	mvn	r3, #0
   19c84:	mvn	r7, #-1073741824	; 0xc0000000
   19c88:	str	r3, [sp, #36]	; 0x24
   19c8c:	b	198c8 <test_scan@@Base+0x11f4>
   19c90:	movw	r0, #29364	; 0x72b4
   19c94:	movt	r0, #2
   19c98:	str	r5, [sp, #20]
   19c9c:	bl	129c8 <puts@plt>
   19ca0:	b	18be0 <test_scan@@Base+0x50c>
   19ca4:	movw	r0, #29328	; 0x7290
   19ca8:	movt	r0, #2
   19cac:	bl	129c8 <puts@plt>
   19cb0:	mvn	r3, #0
   19cb4:	str	r3, [sp, #20]
   19cb8:	b	18be0 <test_scan@@Base+0x50c>
   19cbc:	movw	r0, #29436	; 0x72fc
   19cc0:	movt	r0, #2
   19cc4:	str	r6, [sp, #20]
   19cc8:	bl	129c8 <puts@plt>
   19ccc:	b	18be0 <test_scan@@Base+0x50c>
   19cd0:	movw	r0, #29400	; 0x72d8
   19cd4:	movt	r0, #2
   19cd8:	str	r6, [sp, #20]
   19cdc:	bl	129c8 <puts@plt>
   19ce0:	b	18be0 <test_scan@@Base+0x50c>
   19ce4:	movw	r0, #29520	; 0x7350
   19ce8:	movt	r0, #2
   19cec:	bl	129c8 <puts@plt>
   19cf0:	mvn	r3, #0
   19cf4:	str	r3, [sp, #20]
   19cf8:	b	18be0 <test_scan@@Base+0x50c>
   19cfc:	movw	r0, #29476	; 0x7324
   19d00:	movt	r0, #2
   19d04:	bl	129c8 <puts@plt>
   19d08:	mvn	r3, #0
   19d0c:	str	r3, [sp, #20]
   19d10:	b	18be0 <test_scan@@Base+0x50c>
   19d14:	movw	r0, #29612	; 0x73ac
   19d18:	movt	r0, #2
   19d1c:	str	r6, [sp, #20]
   19d20:	bl	129c8 <puts@plt>
   19d24:	b	18be0 <test_scan@@Base+0x50c>
   19d28:	movw	r0, #29568	; 0x7380
   19d2c:	movt	r0, #2
   19d30:	str	r5, [sp, #20]
   19d34:	bl	129c8 <puts@plt>
   19d38:	b	18be0 <test_scan@@Base+0x50c>
   19d3c:	movw	r0, #29692	; 0x73fc
   19d40:	movt	r0, #2
   19d44:	str	r6, [sp, #20]
   19d48:	bl	129c8 <puts@plt>
   19d4c:	b	18be0 <test_scan@@Base+0x50c>
   19d50:	movw	r0, #29652	; 0x73d4
   19d54:	movt	r0, #2
   19d58:	str	r6, [sp, #20]
   19d5c:	bl	129c8 <puts@plt>
   19d60:	b	18be0 <test_scan@@Base+0x50c>
   19d64:	movw	r0, #29884	; 0x74bc
   19d68:	movt	r0, #2
   19d6c:	str	r5, [sp, #20]
   19d70:	bl	129c8 <puts@plt>
   19d74:	b	18be0 <test_scan@@Base+0x50c>
   19d78:	movw	r0, #29036	; 0x716c
   19d7c:	movt	r0, #2
   19d80:	bl	129c8 <puts@plt>
   19d84:	mvn	r3, #0
   19d88:	str	r3, [sp, #20]
   19d8c:	b	18be0 <test_scan@@Base+0x50c>
   19d90:	movw	r0, #29940	; 0x74f4
   19d94:	movt	r0, #2
   19d98:	str	r5, [sp, #20]
   19d9c:	bl	129c8 <puts@plt>
   19da0:	b	18be0 <test_scan@@Base+0x50c>
   19da4:	bl	13034 <_start@@Base+0x424>
   19da8:	movw	r0, #29912	; 0x74d8
   19dac:	movt	r0, #2
   19db0:	str	r5, [sp, #20]
   19db4:	bl	129c8 <puts@plt>
   19db8:	b	18be0 <test_scan@@Base+0x50c>
   19dbc:	movw	r0, #30416	; 0x76d0
   19dc0:	movt	r0, #2
   19dc4:	bl	129c8 <puts@plt>
   19dc8:	mvn	r3, #0
   19dcc:	str	r3, [sp, #20]
   19dd0:	b	18be0 <test_scan@@Base+0x50c>
   19dd4:	movw	r0, #29968	; 0x7510
   19dd8:	movt	r0, #2
   19ddc:	str	r5, [sp, #20]
   19de0:	bl	129c8 <puts@plt>
   19de4:	b	18be0 <test_scan@@Base+0x50c>
   19de8:	bl	12f6c <_start@@Base+0x35c>
   19dec:	bl	134a0 <_start@@Base+0x890>
   19df0:	movw	r1, #26688	; 0x6840
   19df4:	movt	r1, #2
   19df8:	ldr	r3, [pc, #-1832]	; 196d8 <test_scan@@Base+0x1004>
   19dfc:	movw	r0, #29060	; 0x7184
   19e00:	movt	r0, #2
   19e04:	movw	r2, #1309	; 0x51d
   19e08:	bl	12a64 <__assert_fail@plt>
   19e0c:	movw	r1, #26688	; 0x6840
   19e10:	movt	r1, #2
   19e14:	ldr	r3, [pc, #-1860]	; 196d8 <test_scan@@Base+0x1004>
   19e18:	movw	r0, #29056	; 0x7180
   19e1c:	movt	r0, #2
   19e20:	movw	r2, #1307	; 0x51b
   19e24:	bl	12a64 <__assert_fail@plt>

00019e28 <test_basic_sort@@Base>:
   19e28:	movw	r2, #1798	; 0x706
   19e2c:	movt	r2, #769	; 0x301
   19e30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19e34:	strd	r6, [sp, #8]
   19e38:	mov	ip, #2
   19e3c:	movw	r1, #1540	; 0x604
   19e40:	strd	r8, [sp, #16]
   19e44:	movw	r3, #513	; 0x201
   19e48:	movt	r3, #771	; 0x303
   19e4c:	strd	sl, [sp, #24]
   19e50:	mov	r4, r0
   19e54:	str	lr, [sp, #32]
   19e58:	sub	sp, sp, #36	; 0x24
   19e5c:	mov	lr, #772	; 0x304
   19e60:	str	r2, [sp, #16]
   19e64:	mov	r2, #7
   19e68:	strh	lr, [sp, #20]
   19e6c:	strb	ip, [sp, #22]
   19e70:	str	r3, [sp, #24]
   19e74:	strh	r1, [sp, #28]
   19e78:	strb	r2, [sp, #30]
   19e7c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   19e80:	mov	r3, #0
   19e84:	mov	r0, r4
   19e88:	mov	r2, r3
   19e8c:	movw	r1, #24784	; 0x60d0
   19e90:	movt	r1, #2
   19e94:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   19e98:	cmp	r0, #0
   19e9c:	bne	19eac <test_basic_sort@@Base+0x84>
   19ea0:	mov	r1, #36	; 0x24
   19ea4:	mov	r0, r4
   19ea8:	bl	206a8 <flatcc_builder_start_table@@Base>
   19eac:	movw	r1, #25080	; 0x61f8
   19eb0:	movt	r1, #2
   19eb4:	mov	r0, r4
   19eb8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   19ebc:	subs	r5, r0, #0
   19ec0:	beq	19ed8 <test_basic_sort@@Base+0xb0>
   19ec4:	mov	r1, #3
   19ec8:	mov	r0, r4
   19ecc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   19ed0:	cmp	r0, #0
   19ed4:	strne	r5, [r0]
   19ed8:	mov	r1, #1
   19edc:	mvn	ip, #0
   19ee0:	mov	r3, r1
   19ee4:	mov	r2, #7
   19ee8:	mov	r0, r4
   19eec:	stm	sp, {r1, ip}
   19ef0:	add	r1, sp, #16
   19ef4:	bl	211e8 <flatcc_builder_create_vector@@Base>
   19ef8:	subs	r5, r0, #0
   19efc:	beq	19f14 <test_basic_sort@@Base+0xec>
   19f00:	mov	r1, #5
   19f04:	mov	r0, r4
   19f08:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   19f0c:	cmp	r0, #0
   19f10:	strne	r5, [r0]
   19f14:	mov	r2, #1
   19f18:	ldr	r1, [pc, #984]	; 1a2f8 <test_basic_sort@@Base+0x4d0>
   19f1c:	mov	r0, r4
   19f20:	bl	20f8c <flatcc_builder_check_required@@Base>
   19f24:	cmp	r0, #0
   19f28:	beq	1a2e8 <test_basic_sort@@Base+0x4c0>
   19f2c:	mov	r0, r4
   19f30:	bl	21028 <flatcc_builder_end_table@@Base>
   19f34:	mov	r1, r0
   19f38:	mov	r0, r4
   19f3c:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   19f40:	mov	r0, r4
   19f44:	add	r1, sp, #12
   19f48:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   19f4c:	cmp	r0, #0
   19f50:	beq	19f68 <test_basic_sort@@Base+0x140>
   19f54:	ldr	r2, [r0, #4]
   19f58:	movw	r3, #20301	; 0x4f4d
   19f5c:	movt	r3, #21326	; 0x534e
   19f60:	cmp	r2, r3
   19f64:	beq	19f6c <test_basic_sort@@Base+0x144>
   19f68:	bl	12f44 <_start@@Base+0x334>
   19f6c:	ldr	r3, [r0]
   19f70:	adds	r5, r0, r3
   19f74:	beq	19f68 <test_basic_sort@@Base+0x140>
   19f78:	ldr	r3, [r0, r3]
   19f7c:	sub	r3, r5, r3
   19f80:	ldrh	r2, [r3]
   19f84:	cmp	r2, #15
   19f88:	bls	1a204 <test_basic_sort@@Base+0x3dc>
   19f8c:	ldrh	r3, [r3, #14]
   19f90:	cmp	r3, #0
   19f94:	beq	1a204 <test_basic_sort@@Base+0x3dc>
   19f98:	ldr	r6, [r5, r3]
   19f9c:	add	r5, r5, r3
   19fa0:	add	r6, r6, #4
   19fa4:	adds	r3, r5, r6
   19fa8:	beq	1a204 <test_basic_sort@@Base+0x3dc>
   19fac:	ldr	sl, [r3, #-4]
   19fb0:	cmp	sl, #0
   19fb4:	beq	1a204 <test_basic_sort@@Base+0x3dc>
   19fb8:	lsr	r7, sl, #1
   19fbc:	sub	r0, sl, #1
   19fc0:	lsl	r8, r7, #1
   19fc4:	cmp	r0, r8
   19fc8:	movcs	r2, r7
   19fcc:	movcs	r1, r8
   19fd0:	bcs	1a030 <test_basic_sort@@Base+0x208>
   19fd4:	b	1a068 <test_basic_sort@@Base+0x240>
   19fd8:	cmp	ip, r1
   19fdc:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   19fe0:	add	lr, r1, #1
   19fe4:	ldrb	fp, [r3, r1]
   19fe8:	cmp	lr, ip
   19fec:	bcs	1a2c4 <test_basic_sort@@Base+0x49c>
   19ff0:	ldrb	r4, [r3, lr]
   19ff4:	add	r9, r3, lr
   19ff8:	cmp	fp, r4
   19ffc:	bcs	1a220 <test_basic_sort@@Base+0x3f8>
   1a000:	cmp	ip, r2
   1a004:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a008:	ldrb	ip, [r3, r2]
   1a00c:	add	fp, r3, r2
   1a010:	mov	r2, lr
   1a014:	cmp	ip, r4
   1a018:	bcs	1a068 <test_basic_sort@@Base+0x240>
   1a01c:	lsl	r1, r2, #1
   1a020:	strb	ip, [r9]
   1a024:	strb	r4, [fp]
   1a028:	cmp	r0, r1
   1a02c:	bcc	1a068 <test_basic_sort@@Base+0x240>
   1a030:	cmp	r0, r1
   1a034:	ldr	ip, [r3, #-4]
   1a038:	bhi	19fd8 <test_basic_sort@@Base+0x1b0>
   1a03c:	cmp	ip, r2
   1a040:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a044:	cmp	ip, r1
   1a048:	add	fp, r3, r2
   1a04c:	ldrb	ip, [r3, r2]
   1a050:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a054:	ldrb	r4, [r3, r1]
   1a058:	add	r9, r3, r1
   1a05c:	mov	r2, r1
   1a060:	cmp	ip, r4
   1a064:	bcc	1a01c <test_basic_sort@@Base+0x1f4>
   1a068:	sub	r7, r7, #1
   1a06c:	sub	r8, r8, #2
   1a070:	cmn	r7, #1
   1a074:	bne	19fc4 <test_basic_sort@@Base+0x19c>
   1a078:	cmp	r0, #0
   1a07c:	beq	1a13c <test_basic_sort@@Base+0x314>
   1a080:	add	sl, r3, sl
   1a084:	ldrb	ip, [sl, #-1]!
   1a088:	mov	r2, #0
   1a08c:	sub	r0, r0, #1
   1a090:	mov	r1, r2
   1a094:	ldrb	lr, [r3]
   1a098:	strb	lr, [sl]
   1a09c:	strb	ip, [r3]
   1a0a0:	b	1a0fc <test_basic_sort@@Base+0x2d4>
   1a0a4:	cmp	ip, r1
   1a0a8:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a0ac:	add	r4, r1, #1
   1a0b0:	ldrb	r7, [r3, r1]
   1a0b4:	cmp	r4, ip
   1a0b8:	bcs	1a2c4 <test_basic_sort@@Base+0x49c>
   1a0bc:	ldrb	lr, [r3, r4]
   1a0c0:	add	r8, r3, r4
   1a0c4:	cmp	r7, lr
   1a0c8:	bcs	1a234 <test_basic_sort@@Base+0x40c>
   1a0cc:	cmp	ip, r2
   1a0d0:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a0d4:	ldrb	ip, [r3, r2]
   1a0d8:	add	r7, r3, r2
   1a0dc:	mov	r2, r4
   1a0e0:	cmp	lr, ip
   1a0e4:	bls	1a134 <test_basic_sort@@Base+0x30c>
   1a0e8:	lsl	r1, r2, #1
   1a0ec:	strb	ip, [r8]
   1a0f0:	strb	lr, [r7]
   1a0f4:	cmp	r0, r1
   1a0f8:	bcc	1a134 <test_basic_sort@@Base+0x30c>
   1a0fc:	cmp	r0, r1
   1a100:	ldr	ip, [r3, #-4]
   1a104:	bhi	1a0a4 <test_basic_sort@@Base+0x27c>
   1a108:	cmp	ip, r2
   1a10c:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a110:	cmp	ip, r1
   1a114:	add	r7, r3, r2
   1a118:	ldrb	ip, [r3, r2]
   1a11c:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a120:	ldrb	lr, [r3, r1]
   1a124:	add	r8, r3, r1
   1a128:	mov	r2, r1
   1a12c:	cmp	lr, ip
   1a130:	bhi	1a0e8 <test_basic_sort@@Base+0x2c0>
   1a134:	cmp	r0, #0
   1a138:	bne	1a084 <test_basic_sort@@Base+0x25c>
   1a13c:	ldr	r2, [r3, #-4]
   1a140:	cmp	r2, #7
   1a144:	bne	1a204 <test_basic_sort@@Base+0x3dc>
   1a148:	ldrb	ip, [r5, r6]
   1a14c:	cmp	ip, #1
   1a150:	bne	1a2a8 <test_basic_sort@@Base+0x480>
   1a154:	mov	r6, r3
   1a158:	add	r5, sp, #25
   1a15c:	mov	lr, ip
   1a160:	mov	r1, #6
   1a164:	mov	r0, #0
   1a168:	sub	r4, r1, r0
   1a16c:	add	r2, r0, r4, lsr #1
   1a170:	cmp	r2, #6
   1a174:	bhi	1a2c4 <test_basic_sort@@Base+0x49c>
   1a178:	ldrb	r7, [r3, r2]
   1a17c:	cmp	r7, ip
   1a180:	bcc	1a254 <test_basic_sort@@Base+0x42c>
   1a184:	cmp	r2, r0
   1a188:	bls	1a2e0 <test_basic_sort@@Base+0x4b8>
   1a18c:	add	r1, r0, r4, lsr #2
   1a190:	cmp	r1, #6
   1a194:	bhi	1a2c4 <test_basic_sort@@Base+0x49c>
   1a198:	ldrb	r4, [r3, r1]
   1a19c:	cmp	r4, ip
   1a1a0:	bcs	1a1c8 <test_basic_sort@@Base+0x3a0>
   1a1a4:	b	1a248 <test_basic_sort@@Base+0x420>
   1a1a8:	sub	r2, r1, r0
   1a1ac:	add	r2, r0, r2, lsr #1
   1a1b0:	cmp	r2, #6
   1a1b4:	bhi	1a2c4 <test_basic_sort@@Base+0x49c>
   1a1b8:	ldrb	r4, [r3, r2]
   1a1bc:	cmp	r4, ip
   1a1c0:	bcc	1a254 <test_basic_sort@@Base+0x42c>
   1a1c4:	mov	r1, r2
   1a1c8:	cmp	r1, r0
   1a1cc:	bhi	1a1a8 <test_basic_sort@@Base+0x380>
   1a1d0:	cmp	r1, r0
   1a1d4:	beq	1a268 <test_basic_sort@@Base+0x440>
   1a1d8:	movw	r0, #30544	; 0x7750
   1a1dc:	movt	r0, #2
   1a1e0:	bl	129c8 <puts@plt>
   1a1e4:	mvn	r0, #0
   1a1e8:	add	sp, sp, #36	; 0x24
   1a1ec:	ldrd	r4, [sp]
   1a1f0:	ldrd	r6, [sp, #8]
   1a1f4:	ldrd	r8, [sp, #16]
   1a1f8:	ldrd	sl, [sp, #24]
   1a1fc:	add	sp, sp, #32
   1a200:	pop	{pc}		; (ldr pc, [sp], #4)
   1a204:	movw	r1, #26688	; 0x6840
   1a208:	movt	r1, #2
   1a20c:	ldr	r3, [pc, #232]	; 1a2fc <test_basic_sort@@Base+0x4d4>
   1a210:	movw	r0, #30472	; 0x7708
   1a214:	movt	r0, #2
   1a218:	mov	r2, #1552	; 0x610
   1a21c:	bl	12a64 <__assert_fail@plt>
   1a220:	cmp	ip, r2
   1a224:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a228:	add	fp, r3, r2
   1a22c:	ldrb	ip, [r3, r2]
   1a230:	b	1a054 <test_basic_sort@@Base+0x22c>
   1a234:	cmp	ip, r2
   1a238:	bls	1a2c4 <test_basic_sort@@Base+0x49c>
   1a23c:	add	r7, r3, r2
   1a240:	ldrb	ip, [r3, r2]
   1a244:	b	1a120 <test_basic_sort@@Base+0x2f8>
   1a248:	mov	r0, r2
   1a24c:	mov	r2, r1
   1a250:	mov	r1, r0
   1a254:	add	r0, r2, #1
   1a258:	cmp	r0, r1
   1a25c:	bcc	1a168 <test_basic_sort@@Base+0x340>
   1a260:	cmp	r1, r0
   1a264:	bne	1a1d8 <test_basic_sort@@Base+0x3b0>
   1a268:	ldrb	r2, [r3, r1]
   1a26c:	cmp	r2, ip
   1a270:	bne	1a1d8 <test_basic_sort@@Base+0x3b0>
   1a274:	uxtb	r2, lr
   1a278:	cmp	r2, #4
   1a27c:	beq	1a2ec <test_basic_sort@@Base+0x4c4>
   1a280:	sub	r0, lr, #1
   1a284:	cmp	r0, r1
   1a288:	bne	1a1d8 <test_basic_sort@@Base+0x3b0>
   1a28c:	cmp	r2, #7
   1a290:	beq	1a2bc <test_basic_sort@@Base+0x494>
   1a294:	ldrb	ip, [r6, #1]!
   1a298:	add	lr, lr, #1
   1a29c:	ldrb	r2, [r5], #1
   1a2a0:	cmp	r2, ip
   1a2a4:	beq	1a160 <test_basic_sort@@Base+0x338>
   1a2a8:	movw	r0, #30520	; 0x7738
   1a2ac:	movt	r0, #2
   1a2b0:	bl	129c8 <puts@plt>
   1a2b4:	mvn	r0, #0
   1a2b8:	b	1a1e8 <test_basic_sort@@Base+0x3c0>
   1a2bc:	mov	r0, #0
   1a2c0:	b	1a1e8 <test_basic_sort@@Base+0x3c0>
   1a2c4:	movw	r1, #23740	; 0x5cbc
   1a2c8:	movt	r1, #2
   1a2cc:	ldr	r3, [pc, #44]	; 1a300 <test_basic_sort@@Base+0x4d8>
   1a2d0:	movw	r0, #23844	; 0x5d24
   1a2d4:	movt	r0, #2
   1a2d8:	movw	r2, #395	; 0x18b
   1a2dc:	bl	12a64 <__assert_fail@plt>
   1a2e0:	mov	r1, r2
   1a2e4:	b	1a1d0 <test_basic_sort@@Base+0x3a8>
   1a2e8:	bl	134a0 <_start@@Base+0x890>
   1a2ec:	cmp	r1, #2
   1a2f0:	beq	1a294 <test_basic_sort@@Base+0x46c>
   1a2f4:	b	1a1d8 <test_basic_sort@@Base+0x3b0>
   1a2f8:	ldrdeq	r5, [r2], -ip
   1a2fc:	andeq	r5, r2, r4, lsl sl
   1a300:	andeq	r5, r2, r8, ror #10

0001a304 <test_clone_slice@@Base>:
   1a304:	mov	r2, #256	; 0x100
   1a308:	mov	r3, #1
   1a30c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a310:	mov	r5, #0
   1a314:	strd	r6, [sp, #8]
   1a318:	mov	r4, r0
   1a31c:	strd	r8, [sp, #16]
   1a320:	strd	sl, [sp, #24]
   1a324:	str	lr, [sp, #32]
   1a328:	sub	sp, sp, #36	; 0x24
   1a32c:	str	r2, [sp, #24]
   1a330:	strh	r3, [sp, #28]
   1a334:	strb	r5, [sp, #30]
   1a338:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1a33c:	mov	r3, r5
   1a340:	mov	r2, r5
   1a344:	mov	r0, r4
   1a348:	movw	r1, #24784	; 0x60d0
   1a34c:	movt	r1, #2
   1a350:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1a354:	cmp	r0, r5
   1a358:	bne	1a368 <test_clone_slice@@Base+0x64>
   1a35c:	mov	r1, #36	; 0x24
   1a360:	mov	r0, r4
   1a364:	bl	206a8 <flatcc_builder_start_table@@Base>
   1a368:	movw	r1, #30576	; 0x7770
   1a36c:	movt	r1, #2
   1a370:	mov	r0, r4
   1a374:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1a378:	subs	r5, r0, #0
   1a37c:	beq	1a394 <test_clone_slice@@Base+0x90>
   1a380:	mov	r1, #3
   1a384:	mov	r0, r4
   1a388:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a38c:	cmp	r0, #0
   1a390:	strne	r5, [r0]
   1a394:	mov	r2, #1
   1a398:	mvn	r0, #0
   1a39c:	mov	r3, r2
   1a3a0:	add	r1, sp, #24
   1a3a4:	str	r2, [sp]
   1a3a8:	mov	r2, #7
   1a3ac:	str	r0, [sp, #4]
   1a3b0:	mov	r0, r4
   1a3b4:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1a3b8:	subs	r5, r0, #0
   1a3bc:	beq	1a3d4 <test_clone_slice@@Base+0xd0>
   1a3c0:	mov	r1, #24
   1a3c4:	mov	r0, r4
   1a3c8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a3cc:	cmp	r0, #0
   1a3d0:	strne	r5, [r0]
   1a3d4:	mvn	r3, #-1073741824	; 0xc0000000
   1a3d8:	mov	r2, #2
   1a3dc:	mov	r1, #4
   1a3e0:	mov	r0, r4
   1a3e4:	bl	1ff10 <flatcc_builder_start_vector@@Base>
   1a3e8:	mov	r1, #2
   1a3ec:	mov	r0, r4
   1a3f0:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   1a3f4:	mov	r3, r0
   1a3f8:	mov	r1, #22
   1a3fc:	mov	r2, #44	; 0x2c
   1a400:	mov	r0, r4
   1a404:	strh	r1, [r3]
   1a408:	strh	r2, [r3, #4]
   1a40c:	bl	21344 <flatcc_builder_end_vector@@Base>
   1a410:	subs	r5, r0, #0
   1a414:	beq	1a42c <test_clone_slice@@Base+0x128>
   1a418:	mov	r1, #9
   1a41c:	mov	r0, r4
   1a420:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a424:	cmp	r0, #0
   1a428:	strne	r5, [r0]
   1a42c:	mov	r3, #16
   1a430:	mov	r2, #32
   1a434:	mov	r1, #0
   1a438:	mov	r0, r4
   1a43c:	bl	22a20 <flatcc_builder_table_add@@Base>
   1a440:	movw	r3, #13107	; 0x3333
   1a444:	movt	r3, #49705	; 0xc229
   1a448:	ldr	r1, [pc, #2512]	; 1ae20 <test_clone_slice@@Base+0xb1c>
   1a44c:	mov	r2, #1
   1a450:	str	r3, [r0]
   1a454:	mov	r0, r4
   1a458:	bl	20f8c <flatcc_builder_check_required@@Base>
   1a45c:	cmp	r0, #0
   1a460:	beq	1ada4 <test_clone_slice@@Base+0xaa0>
   1a464:	mov	r0, r4
   1a468:	movw	sl, #41072	; 0xa070
   1a46c:	movt	sl, #3
   1a470:	bl	21028 <flatcc_builder_end_table@@Base>
   1a474:	mov	r1, r0
   1a478:	mov	r0, r4
   1a47c:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1a480:	add	r1, sp, #20
   1a484:	mov	r0, r4
   1a488:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a48c:	mov	r8, r0
   1a490:	mov	r1, r0
   1a494:	ldr	r3, [sl]
   1a498:	movw	r0, #30588	; 0x777c
   1a49c:	movt	r0, #2
   1a4a0:	ldr	r2, [sp, #20]
   1a4a4:	bl	12d28 <_start@@Base+0x118>
   1a4a8:	cmp	r8, #0
   1a4ac:	mov	r0, r4
   1a4b0:	beq	1a4c8 <test_clone_slice@@Base+0x1c4>
   1a4b4:	ldr	r2, [r8, #4]
   1a4b8:	movw	r3, #20301	; 0x4f4d
   1a4bc:	movt	r3, #21326	; 0x534e
   1a4c0:	cmp	r2, r3
   1a4c4:	beq	1a4fc <test_clone_slice@@Base+0x1f8>
   1a4c8:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1a4cc:	mov	r3, #0
   1a4d0:	movw	r1, #24784	; 0x60d0
   1a4d4:	movt	r1, #2
   1a4d8:	mov	r2, r3
   1a4dc:	mov	r0, r4
   1a4e0:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1a4e4:	cmp	r0, #0
   1a4e8:	bne	1a4f8 <test_clone_slice@@Base+0x1f4>
   1a4ec:	mov	r0, r4
   1a4f0:	mov	r1, #36	; 0x24
   1a4f4:	bl	206a8 <flatcc_builder_start_table@@Base>
   1a4f8:	bl	131b0 <_start@@Base+0x5a0>
   1a4fc:	ldr	fp, [r8]
   1a500:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1a504:	mov	r3, #0
   1a508:	movw	r1, #24784	; 0x60d0
   1a50c:	movt	r1, #2
   1a510:	mov	r2, r3
   1a514:	mov	r0, r4
   1a518:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1a51c:	cmp	r0, #0
   1a520:	add	r9, r8, fp
   1a524:	bne	1a534 <test_clone_slice@@Base+0x230>
   1a528:	mov	r1, #36	; 0x24
   1a52c:	mov	r0, r4
   1a530:	bl	206a8 <flatcc_builder_start_table@@Base>
   1a534:	cmp	r9, #0
   1a538:	beq	1a4f8 <test_clone_slice@@Base+0x1f4>
   1a53c:	ldr	r3, [r8, fp]
   1a540:	sub	r3, r9, r3
   1a544:	ldrh	r1, [r3]
   1a548:	cmp	r1, #11
   1a54c:	bls	1ad74 <test_clone_slice@@Base+0xa70>
   1a550:	ldrh	r5, [r3, #10]
   1a554:	cmp	r5, #0
   1a558:	beq	1ad74 <test_clone_slice@@Base+0xa70>
   1a55c:	ldr	r2, [r9, r5]
   1a560:	add	r5, r9, r5
   1a564:	add	r2, r2, #4
   1a568:	adds	r5, r5, r2
   1a56c:	beq	1adc0 <test_clone_slice@@Base+0xabc>
   1a570:	cmp	r1, #53	; 0x35
   1a574:	bls	1adf8 <test_clone_slice@@Base+0xaf4>
   1a578:	ldrh	r6, [r3, #52]	; 0x34
   1a57c:	cmp	r6, #0
   1a580:	beq	1adf8 <test_clone_slice@@Base+0xaf4>
   1a584:	ldr	r2, [r9, r6]
   1a588:	add	r6, r9, r6
   1a58c:	add	r2, r2, #4
   1a590:	adds	r6, r6, r2
   1a594:	beq	1adf8 <test_clone_slice@@Base+0xaf4>
   1a598:	ldrh	r7, [r3, #22]
   1a59c:	cmp	r7, #0
   1a5a0:	beq	1addc <test_clone_slice@@Base+0xad8>
   1a5a4:	ldr	r3, [r9, r7]
   1a5a8:	add	r7, r9, r7
   1a5ac:	add	r3, r3, #4
   1a5b0:	adds	r7, r7, r3
   1a5b4:	beq	1addc <test_clone_slice@@Base+0xad8>
   1a5b8:	mov	r1, r5
   1a5bc:	mov	r0, r4
   1a5c0:	ldr	r2, [r5, #-4]
   1a5c4:	bl	22538 <flatcc_builder_create_string@@Base>
   1a5c8:	subs	r3, r0, #0
   1a5cc:	str	r3, [sp, #12]
   1a5d0:	beq	1a5ec <test_clone_slice@@Base+0x2e8>
   1a5d4:	mov	r1, #3
   1a5d8:	mov	r0, r4
   1a5dc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a5e0:	cmp	r0, #0
   1a5e4:	ldrne	r3, [sp, #12]
   1a5e8:	strne	r3, [r0]
   1a5ec:	mov	r0, r4
   1a5f0:	bl	20088 <flatcc_builder_start_offset_vector@@Base>
   1a5f4:	mov	r1, r5
   1a5f8:	mov	r0, r4
   1a5fc:	ldr	r2, [r5, #-4]
   1a600:	bl	22538 <flatcc_builder_create_string@@Base>
   1a604:	subs	r1, r0, #0
   1a608:	beq	1a614 <test_clone_slice@@Base+0x310>
   1a60c:	mov	r0, r4
   1a610:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   1a614:	ldr	r1, [r5, #-4]
   1a618:	cmp	r1, #4
   1a61c:	movls	r2, #0
   1a620:	bls	1a634 <test_clone_slice@@Base+0x330>
   1a624:	sub	r2, r1, #4
   1a628:	mov	r1, #4
   1a62c:	cmp	r2, #19
   1a630:	movhi	r2, #20
   1a634:	add	r1, r5, r1
   1a638:	mov	r0, r4
   1a63c:	bl	22538 <flatcc_builder_create_string@@Base>
   1a640:	subs	r1, r0, #0
   1a644:	beq	1a650 <test_clone_slice@@Base+0x34c>
   1a648:	mov	r0, r4
   1a64c:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   1a650:	ldr	r2, [r5, #-4]
   1a654:	mov	r1, r5
   1a658:	mov	r0, r4
   1a65c:	cmp	r2, #3
   1a660:	movcs	r2, #3
   1a664:	bl	22538 <flatcc_builder_create_string@@Base>
   1a668:	subs	r1, r0, #0
   1a66c:	beq	1a678 <test_clone_slice@@Base+0x374>
   1a670:	mov	r0, r4
   1a674:	bl	1f6c0 <flatcc_builder_offset_vector_push@@Base>
   1a678:	mov	r0, r4
   1a67c:	bl	21708 <flatcc_builder_end_offset_vector@@Base>
   1a680:	subs	r3, r0, #0
   1a684:	str	r3, [sp, #12]
   1a688:	beq	1a6a4 <test_clone_slice@@Base+0x3a0>
   1a68c:	mov	r1, #10
   1a690:	mov	r0, r4
   1a694:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a698:	cmp	r0, #0
   1a69c:	ldrne	r3, [sp, #12]
   1a6a0:	strne	r3, [r0]
   1a6a4:	mov	r1, #36	; 0x24
   1a6a8:	mov	r0, r4
   1a6ac:	bl	206a8 <flatcc_builder_start_table@@Base>
   1a6b0:	ldr	r1, [r5, #-4]
   1a6b4:	cmp	r1, #2
   1a6b8:	movls	r2, #0
   1a6bc:	bls	1a6d0 <test_clone_slice@@Base+0x3cc>
   1a6c0:	sub	r2, r1, #2
   1a6c4:	mov	r1, #2
   1a6c8:	cmp	r2, #19
   1a6cc:	movhi	r2, #20
   1a6d0:	add	r1, r5, r1
   1a6d4:	mov	r0, r4
   1a6d8:	bl	22538 <flatcc_builder_create_string@@Base>
   1a6dc:	subs	r5, r0, #0
   1a6e0:	beq	1a6f8 <test_clone_slice@@Base+0x3f4>
   1a6e4:	mov	r1, #3
   1a6e8:	mov	r0, r4
   1a6ec:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a6f0:	cmp	r0, #0
   1a6f4:	strne	r5, [r0]
   1a6f8:	mov	r0, #1
   1a6fc:	mvn	ip, #0
   1a700:	ldr	r2, [r6, #-4]
   1a704:	mov	r3, r0
   1a708:	mov	r1, r6
   1a70c:	stm	sp, {r0, ip}
   1a710:	mov	r0, r4
   1a714:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1a718:	subs	r5, r0, #0
   1a71c:	beq	1a734 <test_clone_slice@@Base+0x430>
   1a720:	mov	r1, #24
   1a724:	mov	r0, r4
   1a728:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a72c:	cmp	r0, #0
   1a730:	strne	r5, [r0]
   1a734:	ldr	r1, [r7, #-4]
   1a738:	cmp	r1, #1
   1a73c:	lslls	r1, r1, #2
   1a740:	movls	r2, #0
   1a744:	bls	1a758 <test_clone_slice@@Base+0x454>
   1a748:	cmp	r1, #2
   1a74c:	mov	r1, #4
   1a750:	moveq	r2, #1
   1a754:	movne	r2, #2
   1a758:	mvn	ip, #-1073741824	; 0xc0000000
   1a75c:	mov	r3, #2
   1a760:	add	r1, r7, r1
   1a764:	mov	r0, r4
   1a768:	stm	sp, {r3, ip}
   1a76c:	mov	r3, #4
   1a770:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1a774:	subs	r5, r0, #0
   1a778:	beq	1a790 <test_clone_slice@@Base+0x48c>
   1a77c:	mov	r1, #9
   1a780:	mov	r0, r4
   1a784:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a788:	cmp	r0, #0
   1a78c:	strne	r5, [r0]
   1a790:	mov	r2, #1
   1a794:	ldr	r1, [pc, #1668]	; 1ae20 <test_clone_slice@@Base+0xb1c>
   1a798:	mov	r0, r4
   1a79c:	bl	20f8c <flatcc_builder_check_required@@Base>
   1a7a0:	cmp	r0, #0
   1a7a4:	beq	1ada4 <test_clone_slice@@Base+0xaa0>
   1a7a8:	mov	r0, r4
   1a7ac:	bl	21028 <flatcc_builder_end_table@@Base>
   1a7b0:	subs	r5, r0, #0
   1a7b4:	beq	1a7fc <test_clone_slice@@Base+0x4f8>
   1a7b8:	mov	r3, #1
   1a7bc:	mov	r1, #7
   1a7c0:	mov	r2, r3
   1a7c4:	mov	r0, r4
   1a7c8:	bl	22a20 <flatcc_builder_table_add@@Base>
   1a7cc:	subs	r3, r0, #0
   1a7d0:	str	r3, [sp, #12]
   1a7d4:	beq	1a7fc <test_clone_slice@@Base+0x4f8>
   1a7d8:	mov	r1, #8
   1a7dc:	mov	r0, r4
   1a7e0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1a7fc <test_clone_slice@@Base+0x4f8>
   1a7ec:	ldr	r3, [sp, #12]
   1a7f0:	mov	r2, #1
   1a7f4:	strb	r2, [r3]
   1a7f8:	str	r5, [r0]
   1a7fc:	ldr	r1, [r6, #-4]
   1a800:	mvn	ip, #0
   1a804:	mov	r3, #1
   1a808:	mov	r0, r4
   1a80c:	stm	sp, {r3, ip}
   1a810:	cmp	r1, #3
   1a814:	subhi	r2, r1, #3
   1a818:	movhi	r1, #3
   1a81c:	movls	r2, #0
   1a820:	add	r1, r6, r1
   1a824:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1a828:	subs	r5, r0, #0
   1a82c:	beq	1a844 <test_clone_slice@@Base+0x540>
   1a830:	mov	r1, #24
   1a834:	mov	r0, r4
   1a838:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a83c:	cmp	r0, #0
   1a840:	strne	r5, [r0]
   1a844:	ldr	r3, [r8, fp]
   1a848:	sub	r3, r9, r3
   1a84c:	ldrh	r2, [r3]
   1a850:	cmp	r2, #5
   1a854:	movls	r2, #0
   1a858:	bls	1a868 <test_clone_slice@@Base+0x564>
   1a85c:	ldrh	r2, [r3, #4]
   1a860:	cmp	r2, #0
   1a864:	addne	r2, r9, r2
   1a868:	mov	r0, #16
   1a86c:	mov	r3, #32
   1a870:	mov	r1, #0
   1a874:	str	r0, [sp]
   1a878:	mov	r0, r4
   1a87c:	bl	22c14 <flatcc_builder_table_add_copy@@Base>
   1a880:	mvn	ip, #-1073741824	; 0xc0000000
   1a884:	mov	r0, #2
   1a888:	ldr	r2, [r7, #-4]
   1a88c:	mov	r1, r7
   1a890:	mov	r3, #4
   1a894:	stm	sp, {r0, ip}
   1a898:	mov	r0, r4
   1a89c:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1a8a0:	subs	r5, r0, #0
   1a8a4:	beq	1a8bc <test_clone_slice@@Base+0x5b8>
   1a8a8:	mov	r1, #9
   1a8ac:	mov	r0, r4
   1a8b0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1a8b4:	cmp	r0, #0
   1a8b8:	strne	r5, [r0]
   1a8bc:	mov	r2, #1
   1a8c0:	ldr	r1, [pc, #1368]	; 1ae20 <test_clone_slice@@Base+0xb1c>
   1a8c4:	mov	r0, r4
   1a8c8:	bl	20f8c <flatcc_builder_check_required@@Base>
   1a8cc:	cmp	r0, #0
   1a8d0:	beq	1ada4 <test_clone_slice@@Base+0xaa0>
   1a8d4:	mov	r0, r4
   1a8d8:	bl	21028 <flatcc_builder_end_table@@Base>
   1a8dc:	mov	r1, r0
   1a8e0:	mov	r0, r4
   1a8e4:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1a8e8:	add	r1, sp, #20
   1a8ec:	mov	r0, r4
   1a8f0:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1a8f4:	mov	r4, r0
   1a8f8:	movw	r0, #30632	; 0x77a8
   1a8fc:	movt	r0, #2
   1a900:	mov	r1, r4
   1a904:	ldr	r3, [sl]
   1a908:	ldr	r2, [sp, #20]
   1a90c:	bl	12d28 <_start@@Base+0x118>
   1a910:	cmp	r4, #0
   1a914:	beq	1a4f8 <test_clone_slice@@Base+0x1f4>
   1a918:	ldr	r2, [r4, #4]
   1a91c:	movw	r3, #20301	; 0x4f4d
   1a920:	movt	r3, #21326	; 0x534e
   1a924:	cmp	r2, r3
   1a928:	bne	1a4f8 <test_clone_slice@@Base+0x1f4>
   1a92c:	ldr	r3, [r4]
   1a930:	adds	r6, r4, r3
   1a934:	beq	1a4f8 <test_clone_slice@@Base+0x1f4>
   1a938:	ldr	r5, [r4, r3]
   1a93c:	sub	r5, r6, r5
   1a940:	ldrh	r7, [r5]
   1a944:	cmp	r7, #11
   1a948:	bls	1ad74 <test_clone_slice@@Base+0xa70>
   1a94c:	ldrh	r0, [r5, #10]
   1a950:	cmp	r0, #0
   1a954:	beq	1ad74 <test_clone_slice@@Base+0xa70>
   1a958:	ldr	r3, [r6, r0]
   1a95c:	add	r0, r6, r0
   1a960:	movw	r1, #30576	; 0x7770
   1a964:	movt	r1, #2
   1a968:	add	r3, r3, #4
   1a96c:	add	r0, r0, r3
   1a970:	bl	12968 <strcmp@plt>
   1a974:	cmp	r0, #0
   1a978:	bne	1acfc <test_clone_slice@@Base+0x9f8>
   1a97c:	cmp	r7, #25
   1a980:	bls	1ab20 <test_clone_slice@@Base+0x81c>
   1a984:	ldrh	r3, [r5, #24]
   1a988:	cmp	r3, #0
   1a98c:	beq	1ab20 <test_clone_slice@@Base+0x81c>
   1a990:	ldr	r2, [r6, r3]
   1a994:	add	r3, r6, r3
   1a998:	add	r2, r2, #4
   1a99c:	adds	r4, r3, r2
   1a9a0:	beq	1ab20 <test_clone_slice@@Base+0x81c>
   1a9a4:	ldr	r9, [r4, #-4]
   1a9a8:	cmp	r9, #0
   1a9ac:	beq	1ab20 <test_clone_slice@@Base+0x81c>
   1a9b0:	ldr	r0, [r3, r2]
   1a9b4:	movw	r1, #30576	; 0x7770
   1a9b8:	movt	r1, #2
   1a9bc:	add	r0, r0, #4
   1a9c0:	add	r0, r4, r0
   1a9c4:	bl	12968 <strcmp@plt>
   1a9c8:	cmp	r0, #0
   1a9cc:	bne	1ad10 <test_clone_slice@@Base+0xa0c>
   1a9d0:	cmp	r9, #1
   1a9d4:	bls	1adbc <test_clone_slice@@Base+0xab8>
   1a9d8:	ldr	r0, [r4, #4]
   1a9dc:	add	r0, r0, #8
   1a9e0:	adds	r0, r4, r0
   1a9e4:	beq	1ab3c <test_clone_slice@@Base+0x838>
   1a9e8:	ldr	r3, [r0, #-4]
   1a9ec:	cmp	r3, #6
   1a9f0:	bne	1ab3c <test_clone_slice@@Base+0x838>
   1a9f4:	movw	r1, #30580	; 0x7774
   1a9f8:	movt	r1, #2
   1a9fc:	bl	12968 <strcmp@plt>
   1aa00:	cmp	r0, #0
   1aa04:	bne	1ad4c <test_clone_slice@@Base+0xa48>
   1aa08:	cmp	r9, #2
   1aa0c:	beq	1adbc <test_clone_slice@@Base+0xab8>
   1aa10:	ldr	r0, [r4, #8]
   1aa14:	add	r0, r0, #12
   1aa18:	adds	r0, r4, r0
   1aa1c:	beq	1ab74 <test_clone_slice@@Base+0x870>
   1aa20:	ldr	r3, [r0, #-4]
   1aa24:	cmp	r3, #3
   1aa28:	bne	1ab74 <test_clone_slice@@Base+0x870>
   1aa2c:	movw	r1, #30812	; 0x785c
   1aa30:	movt	r1, #2
   1aa34:	bl	12968 <strcmp@plt>
   1aa38:	cmp	r0, #0
   1aa3c:	bne	1ad38 <test_clone_slice@@Base+0xa34>
   1aa40:	ldrh	r3, [r5, #20]
   1aa44:	cmp	r3, #0
   1aa48:	beq	1abb0 <test_clone_slice@@Base+0x8ac>
   1aa4c:	ldr	sl, [r6, r3]
   1aa50:	add	r9, r6, r3
   1aa54:	adds	r4, r9, sl
   1aa58:	beq	1abb0 <test_clone_slice@@Base+0x8ac>
   1aa5c:	mov	r0, r4
   1aa60:	bl	131d8 <_start@@Base+0x5c8>
   1aa64:	movw	r1, #30704	; 0x77f0
   1aa68:	movt	r1, #2
   1aa6c:	bl	12968 <strcmp@plt>
   1aa70:	cmp	r0, #0
   1aa74:	bne	1ad24 <test_clone_slice@@Base+0xa20>
   1aa78:	ldr	r9, [r9, sl]
   1aa7c:	sub	r9, r4, r9
   1aa80:	ldrh	r3, [r9]
   1aa84:	cmp	r3, #53	; 0x35
   1aa88:	bls	1ab88 <test_clone_slice@@Base+0x884>
   1aa8c:	ldrh	r0, [r9, #52]	; 0x34
   1aa90:	cmp	r0, #0
   1aa94:	beq	1ab88 <test_clone_slice@@Base+0x884>
   1aa98:	ldr	r3, [r4, r0]
   1aa9c:	add	r0, r4, r0
   1aaa0:	add	r3, r3, #4
   1aaa4:	adds	r0, r0, r3
   1aaa8:	beq	1ab88 <test_clone_slice@@Base+0x884>
   1aaac:	ldr	r2, [r0, #-4]
   1aab0:	cmp	r2, #7
   1aab4:	bne	1ab88 <test_clone_slice@@Base+0x884>
   1aab8:	add	r1, sp, #24
   1aabc:	bl	12998 <memcmp@plt>
   1aac0:	cmp	r0, #0
   1aac4:	bne	1ad60 <test_clone_slice@@Base+0xa5c>
   1aac8:	cmp	r7, #53	; 0x35
   1aacc:	bls	1ab9c <test_clone_slice@@Base+0x898>
   1aad0:	ldrh	r3, [r5, #52]	; 0x34
   1aad4:	cmp	r3, #0
   1aad8:	beq	1ab9c <test_clone_slice@@Base+0x898>
   1aadc:	ldr	r2, [r6, r3]
   1aae0:	add	r3, r6, r3
   1aae4:	add	r2, r2, #4
   1aae8:	adds	r1, r3, r2
   1aaec:	beq	1ab9c <test_clone_slice@@Base+0x898>
   1aaf0:	ldr	r0, [r1, #-4]
   1aaf4:	cmp	r0, #4
   1aaf8:	bne	1ab9c <test_clone_slice@@Base+0x898>
   1aafc:	ldrb	r2, [r3, r2]
   1ab00:	ldrb	r3, [sp, #27]
   1ab04:	cmp	r2, r3
   1ab08:	beq	1abcc <test_clone_slice@@Base+0x8c8>
   1ab0c:	movw	r0, #30976	; 0x7900
   1ab10:	movt	r0, #2
   1ab14:	bl	129c8 <puts@plt>
   1ab18:	mvn	r7, #0
   1ab1c:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ab20:	movw	r1, #23740	; 0x5cbc
   1ab24:	movt	r1, #2
   1ab28:	ldr	r3, [pc, #756]	; 1ae24 <test_clone_slice@@Base+0xb20>
   1ab2c:	movw	r0, #23844	; 0x5d24
   1ab30:	movt	r0, #2
   1ab34:	mov	r2, #108	; 0x6c
   1ab38:	bl	12a64 <__assert_fail@plt>
   1ab3c:	movw	r0, #30716	; 0x77fc
   1ab40:	movt	r0, #2
   1ab44:	mvn	r7, #0
   1ab48:	bl	129c8 <puts@plt>
   1ab4c:	mov	r0, r8
   1ab50:	bl	23658 <flatcc_builder_aligned_free@@Base>
   1ab54:	mov	r0, r7
   1ab58:	add	sp, sp, #36	; 0x24
   1ab5c:	ldrd	r4, [sp]
   1ab60:	ldrd	r6, [sp, #8]
   1ab64:	ldrd	r8, [sp, #16]
   1ab68:	ldrd	sl, [sp, #24]
   1ab6c:	add	sp, sp, #32
   1ab70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab74:	movw	r0, #30780	; 0x783c
   1ab78:	movt	r0, #2
   1ab7c:	bl	129c8 <puts@plt>
   1ab80:	mvn	r7, #0
   1ab84:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ab88:	movw	r0, #30888	; 0x78a8
   1ab8c:	movt	r0, #2
   1ab90:	bl	129c8 <puts@plt>
   1ab94:	mvn	r7, #0
   1ab98:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ab9c:	movw	r0, #30948	; 0x78e4
   1aba0:	movt	r0, #2
   1aba4:	bl	129c8 <puts@plt>
   1aba8:	mvn	r7, #0
   1abac:	b	1ab4c <test_clone_slice@@Base+0x848>
   1abb0:	movw	r1, #26688	; 0x6840
   1abb4:	movt	r1, #2
   1abb8:	ldr	r3, [pc, #616]	; 1ae28 <test_clone_slice@@Base+0xb24>
   1abbc:	movw	r0, #26772	; 0x6894
   1abc0:	movt	r0, #2
   1abc4:	mov	r2, #1664	; 0x680
   1abc8:	bl	12a64 <__assert_fail@plt>
   1abcc:	ldrb	r2, [r1, #1]
   1abd0:	add	r1, r1, #1
   1abd4:	ldrb	r3, [sp, #28]
   1abd8:	cmp	r2, r3
   1abdc:	bne	1ab0c <test_clone_slice@@Base+0x808>
   1abe0:	ldrb	r2, [r1, #1]!
   1abe4:	ldrb	r3, [sp, #29]
   1abe8:	cmp	r2, r3
   1abec:	bne	1ab0c <test_clone_slice@@Base+0x808>
   1abf0:	ldrb	r2, [r1, #1]
   1abf4:	ldrb	r3, [sp, #30]
   1abf8:	cmp	r2, r3
   1abfc:	bne	1ab0c <test_clone_slice@@Base+0x808>
   1ac00:	ldrh	r3, [r5, #4]
   1ac04:	mov	r7, #0
   1ac08:	cmp	r3, r7
   1ac0c:	beq	1ae14 <test_clone_slice@@Base+0xb10>
   1ac10:	add	r3, r6, r3
   1ac14:	vldr	s15, [pc, #512]	; 1ae1c <test_clone_slice@@Base+0xb18>
   1ac18:	vldr	s14, [r3]
   1ac1c:	vcmp.f32	s14, s15
   1ac20:	vmrs	APSR_nzcv, fpscr
   1ac24:	bne	1ad90 <test_clone_slice@@Base+0xa8c>
   1ac28:	ldrh	r2, [r5, #22]
   1ac2c:	cmp	r2, #0
   1ac30:	beq	1acc0 <test_clone_slice@@Base+0x9bc>
   1ac34:	ldr	r3, [r6, r2]
   1ac38:	add	r6, r6, r2
   1ac3c:	add	r3, r3, #4
   1ac40:	adds	r2, r6, r3
   1ac44:	beq	1acc0 <test_clone_slice@@Base+0x9bc>
   1ac48:	ldr	r1, [r2, #-4]
   1ac4c:	cmp	r1, #2
   1ac50:	bne	1acc0 <test_clone_slice@@Base+0x9bc>
   1ac54:	ldrsh	r3, [r6, r3]
   1ac58:	cmp	r3, #22
   1ac5c:	bne	1ada8 <test_clone_slice@@Base+0xaa4>
   1ac60:	cmn	r2, #4
   1ac64:	beq	1acd4 <test_clone_slice@@Base+0x9d0>
   1ac68:	ldrsh	r3, [r2, #4]
   1ac6c:	cmp	r3, #44	; 0x2c
   1ac70:	bne	1acd4 <test_clone_slice@@Base+0x9d0>
   1ac74:	ldrh	r2, [r9, #22]
   1ac78:	cmp	r2, #0
   1ac7c:	beq	1ace8 <test_clone_slice@@Base+0x9e4>
   1ac80:	ldr	r3, [r4, r2]
   1ac84:	add	r4, r4, r2
   1ac88:	add	r3, r3, #4
   1ac8c:	adds	r2, r4, r3
   1ac90:	beq	1ace8 <test_clone_slice@@Base+0x9e4>
   1ac94:	ldr	r2, [r2, #-4]
   1ac98:	cmp	r2, #1
   1ac9c:	bne	1ace8 <test_clone_slice@@Base+0x9e4>
   1aca0:	ldrsh	r3, [r4, r3]
   1aca4:	cmp	r3, #44	; 0x2c
   1aca8:	beq	1ab4c <test_clone_slice@@Base+0x848>
   1acac:	movw	r0, #31176	; 0x79c8
   1acb0:	movt	r0, #2
   1acb4:	mvn	r7, #0
   1acb8:	bl	129c8 <puts@plt>
   1acbc:	b	1ab4c <test_clone_slice@@Base+0x848>
   1acc0:	movw	r0, #31036	; 0x793c
   1acc4:	movt	r0, #2
   1acc8:	bl	129c8 <puts@plt>
   1accc:	mvn	r7, #0
   1acd0:	b	1ab4c <test_clone_slice@@Base+0x848>
   1acd4:	movw	r0, #31116	; 0x798c
   1acd8:	movt	r0, #2
   1acdc:	bl	129c8 <puts@plt>
   1ace0:	mvn	r7, #0
   1ace4:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ace8:	movw	r0, #31144	; 0x79a8
   1acec:	movt	r0, #2
   1acf0:	bl	129c8 <puts@plt>
   1acf4:	mvn	r7, #0
   1acf8:	b	1ab4c <test_clone_slice@@Base+0x848>
   1acfc:	movw	r0, #30656	; 0x77c0
   1ad00:	movt	r0, #2
   1ad04:	bl	129c8 <puts@plt>
   1ad08:	mvn	r7, #0
   1ad0c:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ad10:	movw	r0, #30684	; 0x77dc
   1ad14:	movt	r0, #2
   1ad18:	bl	129c8 <puts@plt>
   1ad1c:	mvn	r7, #0
   1ad20:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ad24:	movw	r0, #30840	; 0x7878
   1ad28:	movt	r0, #2
   1ad2c:	bl	12974 <printf@plt>
   1ad30:	mvn	r7, #0
   1ad34:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ad38:	movw	r0, #30816	; 0x7860
   1ad3c:	movt	r0, #2
   1ad40:	bl	129c8 <puts@plt>
   1ad44:	mvn	r7, #0
   1ad48:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ad4c:	movw	r0, #30752	; 0x7820
   1ad50:	movt	r0, #2
   1ad54:	bl	129c8 <puts@plt>
   1ad58:	mvn	r7, #0
   1ad5c:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ad60:	movw	r0, #30916	; 0x78c4
   1ad64:	movt	r0, #2
   1ad68:	bl	129c8 <puts@plt>
   1ad6c:	mvn	r7, #0
   1ad70:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ad74:	movw	r1, #23600	; 0x5c30
   1ad78:	movt	r1, #2
   1ad7c:	ldr	r3, [pc, #168]	; 1ae2c <test_clone_slice@@Base+0xb28>
   1ad80:	movw	r0, #23900	; 0x5d5c
   1ad84:	movt	r0, #2
   1ad88:	movw	r2, #699	; 0x2bb
   1ad8c:	bl	12a64 <__assert_fail@plt>
   1ad90:	movw	r0, #31008	; 0x7920
   1ad94:	movt	r0, #2
   1ad98:	bl	129c8 <puts@plt>
   1ad9c:	mvn	r7, #0
   1ada0:	b	1ab4c <test_clone_slice@@Base+0x848>
   1ada4:	bl	134a0 <_start@@Base+0x890>
   1ada8:	movw	r0, #31088	; 0x7970
   1adac:	movt	r0, #2
   1adb0:	bl	129c8 <puts@plt>
   1adb4:	mvn	r7, #0
   1adb8:	b	1ab4c <test_clone_slice@@Base+0x848>
   1adbc:	bl	13034 <_start@@Base+0x424>
   1adc0:	movw	r1, #26688	; 0x6840
   1adc4:	movt	r1, #2
   1adc8:	ldr	r3, [pc, #88]	; 1ae28 <test_clone_slice@@Base+0xb24>
   1adcc:	movw	r0, #27996	; 0x6d5c
   1add0:	movt	r0, #2
   1add4:	movw	r2, #1604	; 0x644
   1add8:	bl	12a64 <__assert_fail@plt>
   1addc:	movw	r1, #26688	; 0x6840
   1ade0:	movt	r1, #2
   1ade4:	ldr	r3, [pc, #60]	; 1ae28 <test_clone_slice@@Base+0xb24>
   1ade8:	movw	r0, #30624	; 0x77a0
   1adec:	movt	r0, #2
   1adf0:	movw	r2, #1608	; 0x648
   1adf4:	bl	12a64 <__assert_fail@plt>
   1adf8:	movw	r1, #26688	; 0x6840
   1adfc:	movt	r1, #2
   1ae00:	ldr	r3, [pc, #32]	; 1ae28 <test_clone_slice@@Base+0xb24>
   1ae04:	movw	r0, #30616	; 0x7798
   1ae08:	movt	r0, #2
   1ae0c:	movw	r2, #1606	; 0x646
   1ae10:	bl	12a64 <__assert_fail@plt>
   1ae14:	ldr	r3, [r3]
   1ae18:	udf	#0
   1ae1c:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1ae20:	ldrdeq	r5, [r2], -ip
   1ae24:	andeq	r5, r2, r4, lsl r6
   1ae28:	andeq	r5, r2, r4, lsr #20
   1ae2c:	andeq	r5, r2, r4, ror #13

0001ae30 <test_create_add_field@@Base>:
   1ae30:	strd	r4, [sp, #-16]!
   1ae34:	mov	r4, r0
   1ae38:	str	r6, [sp, #8]
   1ae3c:	str	lr, [sp, #12]
   1ae40:	sub	sp, sp, #8
   1ae44:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1ae48:	mov	r3, #0
   1ae4c:	mov	r0, r4
   1ae50:	mov	r2, r3
   1ae54:	movw	r1, #24784	; 0x60d0
   1ae58:	movt	r1, #2
   1ae5c:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1ae60:	cmp	r0, #0
   1ae64:	bne	1ae74 <test_create_add_field@@Base+0x44>
   1ae68:	mov	r1, #36	; 0x24
   1ae6c:	mov	r0, r4
   1ae70:	bl	206a8 <flatcc_builder_start_table@@Base>
   1ae74:	movw	r1, #25080	; 0x61f8
   1ae78:	movt	r1, #2
   1ae7c:	mov	r0, r4
   1ae80:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1ae84:	subs	r5, r0, #0
   1ae88:	beq	1aea0 <test_create_add_field@@Base+0x70>
   1ae8c:	mov	r1, #3
   1ae90:	mov	r0, r4
   1ae94:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1ae98:	cmp	r0, #0
   1ae9c:	strne	r5, [r0]
   1aea0:	movw	r1, #31212	; 0x79ec
   1aea4:	movt	r1, #2
   1aea8:	mov	r0, r4
   1aeac:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1aeb0:	mov	r5, r0
   1aeb4:	mov	r1, #3
   1aeb8:	mov	r0, r4
   1aebc:	bl	206a8 <flatcc_builder_start_table@@Base>
   1aec0:	subs	r6, r0, #0
   1aec4:	bne	1af70 <test_create_add_field@@Base+0x140>
   1aec8:	mov	r3, #8
   1aecc:	mov	r1, #1
   1aed0:	mov	r2, r3
   1aed4:	mov	r0, r4
   1aed8:	bl	22a20 <flatcc_builder_table_add@@Base>
   1aedc:	cmp	r0, #0
   1aee0:	beq	1af70 <test_create_add_field@@Base+0x140>
   1aee4:	mvn	r2, #99	; 0x63
   1aee8:	mvn	r3, #0
   1aeec:	cmp	r5, #0
   1aef0:	strd	r2, [r0]
   1aef4:	beq	1af70 <test_create_add_field@@Base+0x140>
   1aef8:	mov	r1, r6
   1aefc:	mov	r0, r4
   1af00:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1af04:	subs	r2, r0, #0
   1af08:	beq	1af70 <test_create_add_field@@Base+0x140>
   1af0c:	mov	r3, #2
   1af10:	mov	r0, r4
   1af14:	str	r5, [r2]
   1af18:	mov	r1, r3
   1af1c:	mov	r2, r3
   1af20:	bl	22a20 <flatcc_builder_table_add@@Base>
   1af24:	subs	r3, r0, #0
   1af28:	beq	1af70 <test_create_add_field@@Base+0x140>
   1af2c:	mov	ip, #2
   1af30:	mov	r2, r6
   1af34:	ldr	r1, [pc, #412]	; 1b0d8 <test_create_add_field@@Base+0x2a8>
   1af38:	mov	r0, r4
   1af3c:	strh	ip, [r3]
   1af40:	bl	20f8c <flatcc_builder_check_required@@Base>
   1af44:	cmp	r0, #0
   1af48:	beq	1b0d4 <test_create_add_field@@Base+0x2a4>
   1af4c:	mov	r0, r4
   1af50:	bl	21028 <flatcc_builder_end_table@@Base>
   1af54:	subs	r5, r0, #0
   1af58:	beq	1af70 <test_create_add_field@@Base+0x140>
   1af5c:	mov	r1, #14
   1af60:	mov	r0, r4
   1af64:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1af68:	cmp	r0, #0
   1af6c:	strne	r5, [r0]
   1af70:	mov	r2, #1
   1af74:	ldr	r1, [pc, #352]	; 1b0dc <test_create_add_field@@Base+0x2ac>
   1af78:	mov	r0, r4
   1af7c:	bl	20f8c <flatcc_builder_check_required@@Base>
   1af80:	cmp	r0, #0
   1af84:	beq	1b0d0 <test_create_add_field@@Base+0x2a0>
   1af88:	mov	r0, r4
   1af8c:	bl	21028 <flatcc_builder_end_table@@Base>
   1af90:	mov	r1, r0
   1af94:	mov	r0, r4
   1af98:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1af9c:	mov	r0, r4
   1afa0:	add	r1, sp, #4
   1afa4:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   1afa8:	subs	r4, r0, #0
   1afac:	beq	1afc4 <test_create_add_field@@Base+0x194>
   1afb0:	ldr	r2, [r4, #4]
   1afb4:	movw	r3, #20301	; 0x4f4d
   1afb8:	movt	r3, #21326	; 0x534e
   1afbc:	cmp	r2, r3
   1afc0:	beq	1afe0 <test_create_add_field@@Base+0x1b0>
   1afc4:	movw	r1, #23600	; 0x5c30
   1afc8:	movt	r1, #2
   1afcc:	ldr	r3, [pc, #268]	; 1b0e0 <test_create_add_field@@Base+0x2b0>
   1afd0:	movw	r0, #23700	; 0x5c94
   1afd4:	movt	r0, #2
   1afd8:	mov	r2, #716	; 0x2cc
   1afdc:	bl	12a64 <__assert_fail@plt>
   1afe0:	ldr	r3, [r4]
   1afe4:	adds	r2, r4, r3
   1afe8:	beq	1afc4 <test_create_add_field@@Base+0x194>
   1afec:	ldr	r3, [r4, r3]
   1aff0:	sub	r3, r2, r3
   1aff4:	ldrh	r1, [r3]
   1aff8:	cmp	r1, #29
   1affc:	bls	1b0a0 <test_create_add_field@@Base+0x270>
   1b000:	ldrh	r0, [r3, #28]
   1b004:	cmp	r0, #0
   1b008:	bne	1b0bc <test_create_add_field@@Base+0x28c>
   1b00c:	cmp	r1, #33	; 0x21
   1b010:	bls	1b0a0 <test_create_add_field@@Base+0x270>
   1b014:	ldrh	r3, [r3, #32]
   1b018:	cmp	r3, #0
   1b01c:	beq	1b0a0 <test_create_add_field@@Base+0x270>
   1b020:	ldr	r1, [r2, r3]
   1b024:	add	r2, r2, r3
   1b028:	adds	r0, r2, r1
   1b02c:	beq	1b0a0 <test_create_add_field@@Base+0x270>
   1b030:	ldr	r3, [r2, r1]
   1b034:	sub	r3, r0, r3
   1b038:	ldrh	r2, [r3]
   1b03c:	cmp	r2, #7
   1b040:	bhi	1b074 <test_create_add_field@@Base+0x244>
   1b044:	movw	r0, #31268	; 0x7a24
   1b048:	movt	r0, #2
   1b04c:	mvn	r5, #0
   1b050:	bl	129c8 <puts@plt>
   1b054:	mov	r0, r4
   1b058:	bl	23658 <flatcc_builder_aligned_free@@Base>
   1b05c:	mov	r0, r5
   1b060:	add	sp, sp, #8
   1b064:	ldrd	r4, [sp]
   1b068:	ldr	r6, [sp, #8]
   1b06c:	add	sp, sp, #12
   1b070:	pop	{pc}		; (ldr pc, [sp], #4)
   1b074:	ldrh	r3, [r3, #6]
   1b078:	cmp	r3, #0
   1b07c:	beq	1b044 <test_create_add_field@@Base+0x214>
   1b080:	ldrd	r0, [r0, r3]
   1b084:	mvn	r3, #0
   1b088:	mvn	r2, #99	; 0x63
   1b08c:	cmp	r1, r3
   1b090:	cmpeq	r0, r2
   1b094:	moveq	r5, #0
   1b098:	beq	1b054 <test_create_add_field@@Base+0x224>
   1b09c:	b	1b044 <test_create_add_field@@Base+0x214>
   1b0a0:	movw	r1, #23600	; 0x5c30
   1b0a4:	movt	r1, #2
   1b0a8:	ldr	r3, [pc, #52]	; 1b0e4 <test_create_add_field@@Base+0x2b4>
   1b0ac:	movw	r0, #23700	; 0x5c94
   1b0b0:	movt	r0, #2
   1b0b4:	mov	r2, #608	; 0x260
   1b0b8:	bl	12a64 <__assert_fail@plt>
   1b0bc:	movw	r0, #31220	; 0x79f4
   1b0c0:	movt	r0, #2
   1b0c4:	bl	129c8 <puts@plt>
   1b0c8:	mvn	r5, #0
   1b0cc:	b	1b054 <test_create_add_field@@Base+0x224>
   1b0d0:	bl	134a0 <_start@@Base+0x890>
   1b0d4:	bl	134c8 <_start@@Base+0x8b8>
   1b0d8:	andeq	r5, r2, r0, ror #19
   1b0dc:	ldrdeq	r5, [r2], -ip
   1b0e0:	andeq	r5, r2, r8, lsr sl
   1b0e4:	andeq	r5, r2, r0, ror #20

0001b0e8 <test_union_vector@@Base>:
   1b0e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b0ec:	mov	r4, r0
   1b0f0:	strd	r6, [sp, #8]
   1b0f4:	str	lr, [sp, #16]
   1b0f8:	sub	sp, sp, #20
   1b0fc:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1b100:	mov	r3, #0
   1b104:	mov	r0, r4
   1b108:	mov	r2, r3
   1b10c:	movw	r1, #24784	; 0x60d0
   1b110:	movt	r1, #2
   1b114:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1b118:	cmp	r0, #0
   1b11c:	bne	1b12c <test_union_vector@@Base+0x44>
   1b120:	mov	r1, #36	; 0x24
   1b124:	mov	r0, r4
   1b128:	bl	206a8 <flatcc_builder_start_table@@Base>
   1b12c:	movw	r1, #31288	; 0x7a38
   1b130:	movt	r1, #2
   1b134:	mov	r0, r4
   1b138:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1b13c:	subs	r5, r0, #0
   1b140:	beq	1b158 <test_union_vector@@Base+0x70>
   1b144:	mov	r1, #3
   1b148:	mov	r0, r4
   1b14c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b150:	cmp	r0, #0
   1b154:	strne	r5, [r0]
   1b158:	mov	r1, #4
   1b15c:	mov	r0, r4
   1b160:	bl	206a8 <flatcc_builder_start_table@@Base>
   1b164:	subs	r2, r0, #0
   1b168:	bne	1b398 <test_union_vector@@Base+0x2b0>
   1b16c:	ldr	r1, [pc, #796]	; 1b490 <test_union_vector@@Base+0x3a8>
   1b170:	mov	r0, r4
   1b174:	bl	20f8c <flatcc_builder_check_required@@Base>
   1b178:	cmp	r0, #0
   1b17c:	beq	1b474 <test_union_vector@@Base+0x38c>
   1b180:	mov	r0, r4
   1b184:	bl	21028 <flatcc_builder_end_table@@Base>
   1b188:	mov	r7, r0
   1b18c:	mov	r6, #2
   1b190:	add	r5, sp, #8
   1b194:	mov	r0, r4
   1b198:	bl	21e00 <flatcc_builder_start_union_vector@@Base>
   1b19c:	mov	r0, r4
   1b1a0:	strb	r6, [sp, #8]
   1b1a4:	str	r7, [sp, #12]
   1b1a8:	ldm	r5, {r1, r2}
   1b1ac:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b1b0:	mov	r0, r5
   1b1b4:	mov	r1, r4
   1b1b8:	bl	21f5c <flatcc_builder_end_union_vector@@Base>
   1b1bc:	mov	r1, #4
   1b1c0:	mov	r0, r4
   1b1c4:	bl	206a8 <flatcc_builder_start_table@@Base>
   1b1c8:	ldr	r5, [sp, #8]
   1b1cc:	ldr	r7, [sp, #12]
   1b1d0:	cmp	r7, #0
   1b1d4:	cmpne	r5, #0
   1b1d8:	bne	1b3a0 <test_union_vector@@Base+0x2b8>
   1b1dc:	mov	r2, #0
   1b1e0:	ldr	r1, [pc, #684]	; 1b494 <test_union_vector@@Base+0x3ac>
   1b1e4:	mov	r0, r4
   1b1e8:	bl	20f8c <flatcc_builder_check_required@@Base>
   1b1ec:	cmp	r0, #0
   1b1f0:	beq	1b454 <test_union_vector@@Base+0x36c>
   1b1f4:	mov	r0, r4
   1b1f8:	bl	21028 <flatcc_builder_end_table@@Base>
   1b1fc:	subs	r5, r0, #0
   1b200:	beq	1b240 <test_union_vector@@Base+0x158>
   1b204:	mov	r3, #1
   1b208:	mov	r1, #7
   1b20c:	mov	r2, r3
   1b210:	mov	r0, r4
   1b214:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b218:	subs	r6, r0, #0
   1b21c:	beq	1b240 <test_union_vector@@Base+0x158>
   1b220:	mov	r1, #8
   1b224:	mov	r0, r4
   1b228:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b22c:	cmp	r0, #0
   1b230:	beq	1b240 <test_union_vector@@Base+0x158>
   1b234:	mov	r3, #4
   1b238:	strb	r3, [r6]
   1b23c:	str	r5, [r0]
   1b240:	mov	r2, #1
   1b244:	ldr	r1, [pc, #588]	; 1b498 <test_union_vector@@Base+0x3b0>
   1b248:	mov	r0, r4
   1b24c:	bl	20f8c <flatcc_builder_check_required@@Base>
   1b250:	cmp	r0, #0
   1b254:	beq	1b470 <test_union_vector@@Base+0x388>
   1b258:	mov	r0, r4
   1b25c:	bl	21028 <flatcc_builder_end_table@@Base>
   1b260:	mov	r1, r0
   1b264:	mov	r0, r4
   1b268:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1b26c:	mov	r0, r4
   1b270:	add	r1, sp, #4
   1b274:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b278:	movw	r3, #14640	; 0x3930
   1b27c:	movt	r3, #1
   1b280:	ldr	r1, [sp, #4]
   1b284:	movw	r2, #24784	; 0x60d0
   1b288:	movt	r2, #2
   1b28c:	mov	r4, r0
   1b290:	bl	24998 <flatcc_verify_table_as_root@@Base>
   1b294:	subs	r5, r0, #0
   1b298:	bne	1b438 <test_union_vector@@Base+0x350>
   1b29c:	cmp	r4, #0
   1b2a0:	beq	1b2b8 <test_union_vector@@Base+0x1d0>
   1b2a4:	ldr	r2, [r4, #4]
   1b2a8:	movw	r3, #20301	; 0x4f4d
   1b2ac:	movt	r3, #21326	; 0x534e
   1b2b0:	cmp	r2, r3
   1b2b4:	beq	1b2bc <test_union_vector@@Base+0x1d4>
   1b2b8:	bl	130d4 <_start@@Base+0x4c4>
   1b2bc:	ldr	r3, [r4]
   1b2c0:	adds	r2, r4, r3
   1b2c4:	beq	1b2b8 <test_union_vector@@Base+0x1d0>
   1b2c8:	ldr	r3, [r4, r3]
   1b2cc:	sub	r3, r2, r3
   1b2d0:	ldrh	r1, [r3]
   1b2d4:	cmp	r1, #19
   1b2d8:	bls	1b350 <test_union_vector@@Base+0x268>
   1b2dc:	ldrh	r0, [r3, #18]
   1b2e0:	cmp	r0, #0
   1b2e4:	beq	1b350 <test_union_vector@@Base+0x268>
   1b2e8:	ldrb	r0, [r2, r0]
   1b2ec:	cmp	r0, #4
   1b2f0:	bne	1b350 <test_union_vector@@Base+0x268>
   1b2f4:	cmp	r1, #21
   1b2f8:	bls	1b388 <test_union_vector@@Base+0x2a0>
   1b2fc:	ldrh	r3, [r3, #20]
   1b300:	cmp	r3, #0
   1b304:	beq	1b388 <test_union_vector@@Base+0x2a0>
   1b308:	ldr	r0, [r2, r3]
   1b30c:	add	r2, r2, r3
   1b310:	adds	r1, r2, r0
   1b314:	beq	1b388 <test_union_vector@@Base+0x2a0>
   1b318:	ldr	r3, [r2, r0]
   1b31c:	sub	r3, r1, r3
   1b320:	ldrh	r2, [r3]
   1b324:	cmp	r2, #11
   1b328:	bhi	1b37c <test_union_vector@@Base+0x294>
   1b32c:	cmp	r2, #9
   1b330:	bls	1b340 <test_union_vector@@Base+0x258>
   1b334:	ldrh	r3, [r3, #8]
   1b338:	cmp	r3, #0
   1b33c:	bne	1b3dc <test_union_vector@@Base+0x2f4>
   1b340:	movw	r0, #31796	; 0x7c34
   1b344:	movt	r0, #2
   1b348:	bl	129c8 <puts@plt>
   1b34c:	b	1b35c <test_union_vector@@Base+0x274>
   1b350:	movw	r0, #31720	; 0x7be8
   1b354:	movt	r0, #2
   1b358:	bl	12974 <printf@plt>
   1b35c:	mov	r0, r4
   1b360:	bl	23658 <flatcc_builder_aligned_free@@Base>
   1b364:	mov	r0, r5
   1b368:	add	sp, sp, #20
   1b36c:	ldrd	r4, [sp]
   1b370:	ldrd	r6, [sp, #8]
   1b374:	add	sp, sp, #16
   1b378:	pop	{pc}		; (ldr pc, [sp], #4)
   1b37c:	ldrh	r2, [r3, #10]
   1b380:	cmp	r2, #0
   1b384:	beq	1b3d0 <test_union_vector@@Base+0x2e8>
   1b388:	movw	r0, #31756	; 0x7c0c
   1b38c:	movt	r0, #2
   1b390:	bl	129c8 <puts@plt>
   1b394:	b	1b35c <test_union_vector@@Base+0x274>
   1b398:	mov	r7, #0
   1b39c:	b	1b18c <test_union_vector@@Base+0xa4>
   1b3a0:	mov	r1, r6
   1b3a4:	mov	r0, r4
   1b3a8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b3ac:	cmp	r0, #0
   1b3b0:	beq	1b1dc <test_union_vector@@Base+0xf4>
   1b3b4:	mov	r1, #3
   1b3b8:	str	r5, [r0]
   1b3bc:	mov	r0, r4
   1b3c0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b3c4:	cmp	r0, #0
   1b3c8:	strne	r7, [r0]
   1b3cc:	b	1b1dc <test_union_vector@@Base+0xf4>
   1b3d0:	ldrh	r3, [r3, #8]
   1b3d4:	cmp	r3, #0
   1b3d8:	beq	1b340 <test_union_vector@@Base+0x258>
   1b3dc:	ldr	r2, [r1, r3]
   1b3e0:	add	r1, r1, r3
   1b3e4:	add	r3, r2, #4
   1b3e8:	add	r1, r1, r3
   1b3ec:	cmp	r1, #0
   1b3f0:	beq	1b340 <test_union_vector@@Base+0x258>
   1b3f4:	ldr	r3, [r1, #-4]
   1b3f8:	cmp	r3, #1
   1b3fc:	bne	1b340 <test_union_vector@@Base+0x258>
   1b400:	ldrb	r3, [r1]
   1b404:	cmp	r3, #2
   1b408:	bne	1b428 <test_union_vector@@Base+0x340>
   1b40c:	movw	r1, #23740	; 0x5cbc
   1b410:	movt	r1, #2
   1b414:	ldr	r3, [pc, #128]	; 1b49c <test_union_vector@@Base+0x3b4>
   1b418:	movw	r0, #23844	; 0x5d24
   1b41c:	movt	r0, #2
   1b420:	mov	r2, #117	; 0x75
   1b424:	bl	12a64 <__assert_fail@plt>
   1b428:	movw	r0, #31836	; 0x7c5c
   1b42c:	movt	r0, #2
   1b430:	bl	129c8 <puts@plt>
   1b434:	b	1b35c <test_union_vector@@Base+0x274>
   1b438:	bl	23c68 <flatcc_verify_error_string@@Base>
   1b43c:	mov	r1, r0
   1b440:	movw	r0, #31660	; 0x7bac
   1b444:	movt	r0, #2
   1b448:	mvn	r5, #0
   1b44c:	bl	12974 <printf@plt>
   1b450:	b	1b364 <test_union_vector@@Base+0x27c>
   1b454:	movw	r1, #23968	; 0x5da0
   1b458:	movt	r1, #2
   1b45c:	ldr	r3, [pc, #60]	; 1b4a0 <test_union_vector@@Base+0x3b8>
   1b460:	movw	r0, #31508	; 0x7b14
   1b464:	movt	r0, #2
   1b468:	mov	r2, #223	; 0xdf
   1b46c:	bl	12a64 <__assert_fail@plt>
   1b470:	bl	134a0 <_start@@Base+0x890>
   1b474:	movw	r1, #23968	; 0x5da0
   1b478:	movt	r1, #2
   1b47c:	ldr	r3, [pc, #32]	; 1b4a4 <test_union_vector@@Base+0x3bc>
   1b480:	movw	r0, #31296	; 0x7a40
   1b484:	movt	r0, #2
   1b488:	mov	r2, #217	; 0xd9
   1b48c:	bl	12a64 <__assert_fail@plt>
   1b490:	andeq	r5, r2, r8, ror sl
   1b494:	andeq	r5, r2, r8, lsr #21
   1b498:	ldrdeq	r5, [r2], -ip
   1b49c:	andeq	r5, r2, r0, ror #14
   1b4a0:	andeq	r5, r2, ip, lsr #21
   1b4a4:	andeq	r5, r2, ip, ror sl

0001b4a8 <test_mixed_type_union@@Base>:
   1b4a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b4ac:	mov	r4, r0
   1b4b0:	strd	r6, [sp, #8]
   1b4b4:	strd	r8, [sp, #16]
   1b4b8:	str	sl, [sp, #24]
   1b4bc:	str	lr, [sp, #28]
   1b4c0:	sub	sp, sp, #32
   1b4c4:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1b4c8:	mov	r3, #0
   1b4cc:	mov	r0, r4
   1b4d0:	mov	r2, r3
   1b4d4:	movw	r1, #24784	; 0x60d0
   1b4d8:	movt	r1, #2
   1b4dc:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1b4e0:	cmp	r0, #0
   1b4e4:	bne	1b4f4 <test_mixed_type_union@@Base+0x4c>
   1b4e8:	mov	r1, #10
   1b4ec:	mov	r0, r4
   1b4f0:	bl	206a8 <flatcc_builder_start_table@@Base>
   1b4f4:	mov	r2, #4
   1b4f8:	mov	r0, r4
   1b4fc:	mov	r1, r2
   1b500:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1b504:	subs	r7, r0, #0
   1b508:	beq	1b520 <test_mixed_type_union@@Base+0x78>
   1b50c:	mov	r2, #10
   1b510:	mov	r0, r4
   1b514:	str	r2, [r7]
   1b518:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1b51c:	mov	r7, r0
   1b520:	mov	r2, #2
   1b524:	mov	r0, r4
   1b528:	mov	r1, r2
   1b52c:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1b530:	subs	r6, r0, #0
   1b534:	beq	1bc44 <test_mixed_type_union@@Base+0x79c>
   1b538:	mov	r3, #22
   1b53c:	mov	r0, r4
   1b540:	strh	r3, [r6]
   1b544:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1b548:	mov	r2, #2
   1b54c:	mov	r6, r0
   1b550:	mov	r1, r2
   1b554:	mov	r0, r4
   1b558:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1b55c:	subs	r3, r0, #0
   1b560:	beq	1b5b8 <test_mixed_type_union@@Base+0x110>
   1b564:	mov	r2, #19
   1b568:	mov	r0, r4
   1b56c:	strh	r2, [r3]
   1b570:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1b574:	subs	r5, r0, #0
   1b578:	beq	1b5b8 <test_mixed_type_union@@Base+0x110>
   1b57c:	mov	r3, #1
   1b580:	mov	r1, #0
   1b584:	mov	r2, r3
   1b588:	mov	r0, r4
   1b58c:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b590:	subs	r8, r0, #0
   1b594:	beq	1b5b8 <test_mixed_type_union@@Base+0x110>
   1b598:	mov	r1, #1
   1b59c:	mov	r0, r4
   1b5a0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b5a4:	cmp	r0, #0
   1b5a8:	beq	1b5b8 <test_mixed_type_union@@Base+0x110>
   1b5ac:	mov	r3, #8
   1b5b0:	strb	r3, [r8]
   1b5b4:	str	r5, [r0]
   1b5b8:	cmp	r6, #0
   1b5bc:	beq	1bc90 <test_mixed_type_union@@Base+0x7e8>
   1b5c0:	mov	r3, #1
   1b5c4:	mov	r1, #6
   1b5c8:	mov	r2, r3
   1b5cc:	mov	r0, r4
   1b5d0:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b5d4:	subs	r5, r0, #0
   1b5d8:	beq	1b5fc <test_mixed_type_union@@Base+0x154>
   1b5dc:	mov	r1, #7
   1b5e0:	mov	r0, r4
   1b5e4:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b5e8:	cmp	r0, #0
   1b5ec:	beq	1b5fc <test_mixed_type_union@@Base+0x154>
   1b5f0:	mov	r3, #8
   1b5f4:	strb	r3, [r5]
   1b5f8:	str	r6, [r0]
   1b5fc:	mov	r1, #1
   1b600:	mov	r0, r4
   1b604:	bl	206a8 <flatcc_builder_start_table@@Base>
   1b608:	subs	r5, r0, #0
   1b60c:	bne	1ba3c <test_mixed_type_union@@Base+0x594>
   1b610:	mov	r3, #4
   1b614:	mov	r1, r5
   1b618:	mov	r2, r3
   1b61c:	mov	r0, r4
   1b620:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b624:	cmp	r0, #0
   1b628:	beq	1ba3c <test_mixed_type_union@@Base+0x594>
   1b62c:	mov	r3, #42	; 0x2a
   1b630:	mov	r2, r5
   1b634:	ldr	r1, [pc, #2820]	; 1c140 <test_mixed_type_union@@Base+0xc98>
   1b638:	str	r3, [r0]
   1b63c:	mov	r0, r4
   1b640:	bl	20f8c <flatcc_builder_check_required@@Base>
   1b644:	cmp	r0, #0
   1b648:	beq	1bd74 <test_mixed_type_union@@Base+0x8cc>
   1b64c:	mov	r0, r4
   1b650:	bl	21028 <flatcc_builder_end_table@@Base>
   1b654:	subs	r8, r0, #0
   1b658:	beq	1ba3c <test_mixed_type_union@@Base+0x594>
   1b65c:	mov	r3, #1
   1b660:	mov	r1, #2
   1b664:	mov	r2, r3
   1b668:	mov	r0, r4
   1b66c:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b670:	subs	r5, r0, #0
   1b674:	beq	1b698 <test_mixed_type_union@@Base+0x1f0>
   1b678:	mov	r1, #3
   1b67c:	mov	r0, r4
   1b680:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b684:	cmp	r0, #0
   1b688:	beq	1b698 <test_mixed_type_union@@Base+0x1f0>
   1b68c:	mov	r3, #2
   1b690:	strb	r3, [r5]
   1b694:	str	r8, [r0]
   1b698:	movw	r1, #32300	; 0x7e2c
   1b69c:	movt	r1, #2
   1b6a0:	mov	r0, r4
   1b6a4:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1b6a8:	subs	r5, r0, #0
   1b6ac:	beq	1b6ec <test_mixed_type_union@@Base+0x244>
   1b6b0:	mov	r3, #1
   1b6b4:	mov	r1, #4
   1b6b8:	mov	r2, r3
   1b6bc:	mov	r0, r4
   1b6c0:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b6c4:	subs	r9, r0, #0
   1b6c8:	beq	1b6ec <test_mixed_type_union@@Base+0x244>
   1b6cc:	mov	r1, #5
   1b6d0:	mov	r0, r4
   1b6d4:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1b6d8:	cmp	r0, #0
   1b6dc:	beq	1b6ec <test_mixed_type_union@@Base+0x244>
   1b6e0:	mov	r3, #11
   1b6e4:	strb	r3, [r9]
   1b6e8:	str	r5, [r0]
   1b6ec:	mov	r0, r4
   1b6f0:	add	r5, sp, #24
   1b6f4:	bl	21e00 <flatcc_builder_start_union_vector@@Base>
   1b6f8:	mov	r3, #8
   1b6fc:	mov	r0, r4
   1b700:	strb	r3, [sp, #24]
   1b704:	str	r6, [sp, #28]
   1b708:	ldm	r5, {r1, r2}
   1b70c:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b710:	mov	r3, #2
   1b714:	mov	r0, r4
   1b718:	strb	r3, [sp, #24]
   1b71c:	str	r8, [sp, #28]
   1b720:	ldm	r5, {r1, r2}
   1b724:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b728:	mov	r1, #1
   1b72c:	mov	r0, r4
   1b730:	bl	206a8 <flatcc_builder_start_table@@Base>
   1b734:	subs	r6, r0, #0
   1b738:	bne	1ba44 <test_mixed_type_union@@Base+0x59c>
   1b73c:	mov	r3, #4
   1b740:	mov	r1, r6
   1b744:	mov	r2, r3
   1b748:	mov	r0, r4
   1b74c:	bl	22a20 <flatcc_builder_table_add@@Base>
   1b750:	cmp	r0, #0
   1b754:	beq	1ba44 <test_mixed_type_union@@Base+0x59c>
   1b758:	mov	r3, #1
   1b75c:	mov	r2, r6
   1b760:	ldr	r1, [pc, #2520]	; 1c140 <test_mixed_type_union@@Base+0xc98>
   1b764:	str	r3, [r0]
   1b768:	mov	r0, r4
   1b76c:	bl	20f8c <flatcc_builder_check_required@@Base>
   1b770:	cmp	r0, #0
   1b774:	beq	1bd74 <test_mixed_type_union@@Base+0x8cc>
   1b778:	mov	r0, r4
   1b77c:	bl	21028 <flatcc_builder_end_table@@Base>
   1b780:	mov	r2, r0
   1b784:	mov	r3, #2
   1b788:	mov	r0, r4
   1b78c:	mov	r6, #9
   1b790:	strb	r3, [sp, #24]
   1b794:	str	r2, [sp, #28]
   1b798:	ldm	r5, {r1, r2}
   1b79c:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b7a0:	movw	r1, #32308	; 0x7e34
   1b7a4:	movt	r1, #2
   1b7a8:	mov	r0, r4
   1b7ac:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1b7b0:	mov	r3, #11
   1b7b4:	strb	r3, [sp, #24]
   1b7b8:	str	r0, [sp, #28]
   1b7bc:	mov	r0, r4
   1b7c0:	ldm	r5, {r1, r2}
   1b7c4:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b7c8:	mov	r0, r4
   1b7cc:	strb	r6, [sp, #24]
   1b7d0:	str	r7, [sp, #28]
   1b7d4:	ldm	r5, {r1, r2}
   1b7d8:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b7dc:	mov	r2, #4
   1b7e0:	mov	r0, r4
   1b7e4:	mov	r1, r2
   1b7e8:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1b7ec:	mov	r3, #3
   1b7f0:	str	r3, [r0]
   1b7f4:	mov	r0, r4
   1b7f8:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1b7fc:	strb	r6, [sp, #24]
   1b800:	str	r0, [sp, #28]
   1b804:	mov	r0, r4
   1b808:	ldm	r5, {r1, r2}
   1b80c:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b810:	mov	r2, #4
   1b814:	mov	r0, r4
   1b818:	mov	r1, r2
   1b81c:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1b820:	subs	r3, r0, #0
   1b824:	beq	1b83c <test_mixed_type_union@@Base+0x394>
   1b828:	mov	r2, #1
   1b82c:	mov	r0, r4
   1b830:	str	r2, [r3]
   1b834:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1b838:	mov	r3, r0
   1b83c:	mov	r2, #9
   1b840:	mov	r0, r4
   1b844:	strb	r2, [sp, #24]
   1b848:	str	r3, [sp, #28]
   1b84c:	ldm	r5, {r1, r2}
   1b850:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b854:	mov	r2, #4
   1b858:	mov	r0, r4
   1b85c:	mov	r1, r2
   1b860:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1b864:	subs	r3, r0, #0
   1b868:	beq	1b880 <test_mixed_type_union@@Base+0x3d8>
   1b86c:	mov	r2, #2
   1b870:	mov	r0, r4
   1b874:	str	r2, [r3]
   1b878:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1b87c:	mov	r3, r0
   1b880:	mov	r7, #9
   1b884:	mov	r0, r4
   1b888:	mov	r6, #11
   1b88c:	strb	r7, [sp, #24]
   1b890:	str	r3, [sp, #28]
   1b894:	ldm	r5, {r1, r2}
   1b898:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b89c:	movw	r1, #32320	; 0x7e40
   1b8a0:	movt	r1, #2
   1b8a4:	mov	r0, r4
   1b8a8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1b8ac:	strb	r6, [sp, #24]
   1b8b0:	str	r0, [sp, #28]
   1b8b4:	mov	r0, r4
   1b8b8:	ldm	r5, {r1, r2}
   1b8bc:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b8c0:	movw	r1, #32316	; 0x7e3c
   1b8c4:	movt	r1, #2
   1b8c8:	mov	r0, r4
   1b8cc:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1b8d0:	strb	r6, [sp, #24]
   1b8d4:	str	r0, [sp, #28]
   1b8d8:	mov	r0, r4
   1b8dc:	ldm	r5, {r1, r2}
   1b8e0:	bl	222f4 <flatcc_builder_union_vector_push@@Base>
   1b8e4:	mov	r0, r5
   1b8e8:	mov	r1, r4
   1b8ec:	bl	21f5c <flatcc_builder_end_union_vector@@Base>
   1b8f0:	ldr	r5, [sp, #24]
   1b8f4:	ldr	r6, [sp, #28]
   1b8f8:	cmp	r5, #0
   1b8fc:	cmpne	r6, #0
   1b900:	bne	1bc14 <test_mixed_type_union@@Base+0x76c>
   1b904:	mov	r2, #0
   1b908:	ldr	r1, [pc, #2100]	; 1c144 <test_mixed_type_union@@Base+0xc9c>
   1b90c:	mov	r0, r4
   1b910:	bl	20f8c <flatcc_builder_check_required@@Base>
   1b914:	cmp	r0, #0
   1b918:	beq	1bda4 <test_mixed_type_union@@Base+0x8fc>
   1b91c:	mov	r0, r4
   1b920:	bl	21028 <flatcc_builder_end_table@@Base>
   1b924:	mov	r1, r0
   1b928:	mov	r0, r4
   1b92c:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1b930:	mov	r0, r4
   1b934:	add	r1, sp, #4
   1b938:	bl	23528 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b93c:	movw	r3, #41072	; 0xa070
   1b940:	movt	r3, #3
   1b944:	ldr	r2, [sp, #4]
   1b948:	mov	r1, r0
   1b94c:	mov	r4, r0
   1b950:	movw	r0, #32464	; 0x7ed0
   1b954:	movt	r0, #2
   1b958:	ldr	r3, [r3]
   1b95c:	bl	12d28 <_start@@Base+0x118>
   1b960:	mov	r0, r4
   1b964:	movw	r3, #16116	; 0x3ef4
   1b968:	movt	r3, #1
   1b96c:	movw	r2, #24784	; 0x60d0
   1b970:	movt	r2, #2
   1b974:	ldr	r1, [sp, #4]
   1b978:	bl	24998 <flatcc_verify_table_as_root@@Base>
   1b97c:	cmp	r0, #0
   1b980:	bne	1bd30 <test_mixed_type_union@@Base+0x888>
   1b984:	cmp	r4, #0
   1b988:	beq	1b9a0 <test_mixed_type_union@@Base+0x4f8>
   1b98c:	ldr	r2, [r4, #4]
   1b990:	movw	r3, #20301	; 0x4f4d
   1b994:	movt	r3, #21326	; 0x534e
   1b998:	cmp	r2, r3
   1b99c:	beq	1b9bc <test_mixed_type_union@@Base+0x514>
   1b9a0:	movw	r1, #23600	; 0x5c30
   1b9a4:	movt	r1, #2
   1b9a8:	ldr	r3, [pc, #1944]	; 1c148 <test_mixed_type_union@@Base+0xca0>
   1b9ac:	movw	r0, #23700	; 0x5c94
   1b9b0:	movt	r0, #2
   1b9b4:	movw	r2, #819	; 0x333
   1b9b8:	bl	12a64 <__assert_fail@plt>
   1b9bc:	ldr	r6, [r4]
   1b9c0:	adds	r7, r4, r6
   1b9c4:	beq	1b9a0 <test_mixed_type_union@@Base+0x4f8>
   1b9c8:	ldr	r5, [r4, r6]
   1b9cc:	sub	r5, r7, r5
   1b9d0:	ldrh	r3, [r5]
   1b9d4:	cmp	r3, #7
   1b9d8:	bls	1ba28 <test_mixed_type_union@@Base+0x580>
   1b9dc:	ldrh	r2, [r5, #6]
   1b9e0:	cmp	r2, #0
   1b9e4:	beq	1ba28 <test_mixed_type_union@@Base+0x580>
   1b9e8:	cmp	r3, #23
   1b9ec:	bhi	1ba4c <test_mixed_type_union@@Base+0x5a4>
   1b9f0:	movw	r0, #32604	; 0x7f5c
   1b9f4:	movt	r0, #2
   1b9f8:	mvn	r5, #0
   1b9fc:	bl	129c8 <puts@plt>
   1ba00:	mov	r0, r4
   1ba04:	bl	23658 <flatcc_builder_aligned_free@@Base>
   1ba08:	mov	r0, r5
   1ba0c:	add	sp, sp, #32
   1ba10:	ldrd	r4, [sp]
   1ba14:	ldrd	r6, [sp, #8]
   1ba18:	ldrd	r8, [sp, #16]
   1ba1c:	ldr	sl, [sp, #24]
   1ba20:	add	sp, sp, #28
   1ba24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba28:	movw	r0, #32560	; 0x7f30
   1ba2c:	movt	r0, #2
   1ba30:	bl	129c8 <puts@plt>
   1ba34:	mvn	r5, #0
   1ba38:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1ba3c:	mov	r8, #0
   1ba40:	b	1b698 <test_mixed_type_union@@Base+0x1f0>
   1ba44:	mov	r2, #0
   1ba48:	b	1b784 <test_mixed_type_union@@Base+0x2dc>
   1ba4c:	ldrh	r8, [r5, #22]
   1ba50:	cmp	r8, #0
   1ba54:	beq	1b9f0 <test_mixed_type_union@@Base+0x548>
   1ba58:	ldrh	r3, [r5, #4]
   1ba5c:	cmp	r3, #0
   1ba60:	beq	1bc98 <test_mixed_type_union@@Base+0x7f0>
   1ba64:	ldrb	r1, [r7, r3]
   1ba68:	cmp	r1, #0
   1ba6c:	beq	1bc98 <test_mixed_type_union@@Base+0x7f0>
   1ba70:	ldr	r3, [r7, r2]
   1ba74:	cmp	r1, #8
   1ba78:	add	r2, r7, r2
   1ba7c:	add	r1, r2, r3
   1ba80:	bne	1bc98 <test_mixed_type_union@@Base+0x7f0>
   1ba84:	cmp	r1, #0
   1ba88:	beq	1bcac <test_mixed_type_union@@Base+0x804>
   1ba8c:	ldrh	r3, [r2, r3]
   1ba90:	cmp	r3, #19
   1ba94:	bhi	1bce0 <test_mixed_type_union@@Base+0x838>
   1ba98:	bne	1bcb8 <test_mixed_type_union@@Base+0x810>
   1ba9c:	ldrh	r3, [r5, #16]
   1baa0:	cmp	r3, #0
   1baa4:	beq	1bccc <test_mixed_type_union@@Base+0x824>
   1baa8:	ldrb	r3, [r7, r3]
   1baac:	cmp	r3, #8
   1bab0:	bne	1bccc <test_mixed_type_union@@Base+0x824>
   1bab4:	ldrh	r3, [r5, #18]
   1bab8:	cmp	r3, #0
   1babc:	beq	1bd4c <test_mixed_type_union@@Base+0x8a4>
   1bac0:	ldr	r2, [r7, r3]
   1bac4:	add	r3, r7, r3
   1bac8:	cmn	r3, r2
   1bacc:	beq	1bd4c <test_mixed_type_union@@Base+0x8a4>
   1bad0:	ldrh	r3, [r3, r2]
   1bad4:	cmp	r3, #22
   1bad8:	bne	1bcf4 <test_mixed_type_union@@Base+0x84c>
   1badc:	ldrh	r3, [r5, #8]
   1bae0:	cmp	r3, #0
   1bae4:	beq	1bd08 <test_mixed_type_union@@Base+0x860>
   1bae8:	ldrb	r3, [r7, r3]
   1baec:	cmp	r3, #2
   1baf0:	bne	1bd08 <test_mixed_type_union@@Base+0x860>
   1baf4:	ldrh	r3, [r5, #10]
   1baf8:	cmp	r3, #0
   1bafc:	beq	1bd1c <test_mixed_type_union@@Base+0x874>
   1bb00:	ldr	r2, [r7, r3]
   1bb04:	add	r3, r7, r3
   1bb08:	adds	r1, r3, r2
   1bb0c:	beq	1bd1c <test_mixed_type_union@@Base+0x874>
   1bb10:	ldr	r3, [r3, r2]
   1bb14:	sub	r3, r1, r3
   1bb18:	ldrh	r2, [r3]
   1bb1c:	cmp	r2, #5
   1bb20:	bls	1bd1c <test_mixed_type_union@@Base+0x874>
   1bb24:	ldrh	r3, [r3, #4]
   1bb28:	cmp	r3, #0
   1bb2c:	beq	1bd1c <test_mixed_type_union@@Base+0x874>
   1bb30:	ldr	r3, [r1, r3]
   1bb34:	cmp	r3, #42	; 0x2a
   1bb38:	bne	1bd1c <test_mixed_type_union@@Base+0x874>
   1bb3c:	ldrh	r3, [r5, #12]
   1bb40:	cmp	r3, #0
   1bb44:	beq	1bd60 <test_mixed_type_union@@Base+0x8b8>
   1bb48:	ldrb	r3, [r7, r3]
   1bb4c:	cmp	r3, #11
   1bb50:	bne	1bd60 <test_mixed_type_union@@Base+0x8b8>
   1bb54:	ldrh	r3, [r5, #14]
   1bb58:	cmp	r3, #0
   1bb5c:	beq	1bd90 <test_mixed_type_union@@Base+0x8e8>
   1bb60:	ldr	r2, [r7, r3]
   1bb64:	add	r9, r7, r3
   1bb68:	adds	r9, r9, r2
   1bb6c:	beq	1bd90 <test_mixed_type_union@@Base+0x8e8>
   1bb70:	adds	r9, r9, #4
   1bb74:	beq	1bd90 <test_mixed_type_union@@Base+0x8e8>
   1bb78:	movw	r1, #32300	; 0x7e2c
   1bb7c:	movt	r1, #2
   1bb80:	mov	r0, r9
   1bb84:	bl	12968 <strcmp@plt>
   1bb88:	cmp	r0, #0
   1bb8c:	bne	1bdc0 <test_mixed_type_union@@Base+0x918>
   1bb90:	ldrh	r3, [r5, #20]
   1bb94:	cmp	r3, #0
   1bb98:	beq	1be58 <test_mixed_type_union@@Base+0x9b0>
   1bb9c:	ldr	r9, [r7, r3]
   1bba0:	add	r3, r7, r3
   1bba4:	add	r2, r7, r8
   1bba8:	ldr	r5, [r7, r8]
   1bbac:	add	r9, r9, #4
   1bbb0:	adds	r9, r3, r9
   1bbb4:	add	r5, r5, #4
   1bbb8:	add	r5, r2, r5
   1bbbc:	beq	1be68 <test_mixed_type_union@@Base+0x9c0>
   1bbc0:	cmp	r5, #0
   1bbc4:	ldr	r2, [r9, #-4]
   1bbc8:	beq	1be08 <test_mixed_type_union@@Base+0x960>
   1bbcc:	ldr	r3, [r5, #-4]
   1bbd0:	cmp	r2, r3
   1bbd4:	bne	1be34 <test_mixed_type_union@@Base+0x98c>
   1bbd8:	add	r8, sp, #8
   1bbdc:	mov	r3, #0
   1bbe0:	str	r9, [sp, #8]
   1bbe4:	add	r0, sp, #16
   1bbe8:	str	r5, [sp, #12]
   1bbec:	ldm	r8, {r1, r2}
   1bbf0:	bl	133e4 <_start@@Base+0x7d4>
   1bbf4:	ldrb	r3, [sp, #16]
   1bbf8:	cmp	r3, #8
   1bbfc:	beq	1bdd8 <test_mixed_type_union@@Base+0x930>
   1bc00:	movw	r0, #33084	; 0x813c
   1bc04:	movt	r0, #2
   1bc08:	bl	12974 <printf@plt>
   1bc0c:	mvn	r5, #0
   1bc10:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bc14:	mov	r1, #8
   1bc18:	mov	r0, r4
   1bc1c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1bc20:	cmp	r0, #0
   1bc24:	beq	1b904 <test_mixed_type_union@@Base+0x45c>
   1bc28:	mov	r1, r7
   1bc2c:	str	r5, [r0]
   1bc30:	mov	r0, r4
   1bc34:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1bc38:	cmp	r0, #0
   1bc3c:	strne	r6, [r0]
   1bc40:	b	1b904 <test_mixed_type_union@@Base+0x45c>
   1bc44:	mov	r2, #2
   1bc48:	mov	r0, r4
   1bc4c:	mov	r1, r2
   1bc50:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1bc54:	subs	r3, r0, #0
   1bc58:	beq	1bc90 <test_mixed_type_union@@Base+0x7e8>
   1bc5c:	mov	r2, #19
   1bc60:	mov	r0, r4
   1bc64:	strh	r2, [r3]
   1bc68:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1bc6c:	subs	r5, r0, #0
   1bc70:	beq	1be50 <test_mixed_type_union@@Base+0x9a8>
   1bc74:	mov	r3, #1
   1bc78:	mov	r1, r6
   1bc7c:	mov	r2, r3
   1bc80:	mov	r0, r4
   1bc84:	bl	22a20 <flatcc_builder_table_add@@Base>
   1bc88:	subs	r8, r0, #0
   1bc8c:	bne	1b598 <test_mixed_type_union@@Base+0xf0>
   1bc90:	mov	r6, #0
   1bc94:	b	1b5fc <test_mixed_type_union@@Base+0x154>
   1bc98:	movw	r0, #32648	; 0x7f88
   1bc9c:	movt	r0, #2
   1bca0:	bl	129c8 <puts@plt>
   1bca4:	mvn	r5, #0
   1bca8:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bcac:	movw	r0, #32676	; 0x7fa4
   1bcb0:	movt	r0, #2
   1bcb4:	bl	129c8 <puts@plt>
   1bcb8:	movw	r0, #32740	; 0x7fe4
   1bcbc:	movt	r0, #2
   1bcc0:	bl	129c8 <puts@plt>
   1bcc4:	mvn	r5, #0
   1bcc8:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bccc:	movw	r0, #32788	; 0x8014
   1bcd0:	movt	r0, #2
   1bcd4:	bl	129c8 <puts@plt>
   1bcd8:	mvn	r5, #0
   1bcdc:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bce0:	movw	r0, #32700	; 0x7fbc
   1bce4:	movt	r0, #2
   1bce8:	bl	129c8 <puts@plt>
   1bcec:	mvn	r5, #0
   1bcf0:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bcf4:	movw	r0, #32888	; 0x8078
   1bcf8:	movt	r0, #2
   1bcfc:	bl	129c8 <puts@plt>
   1bd00:	mvn	r5, #0
   1bd04:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bd08:	movw	r0, #32936	; 0x80a8
   1bd0c:	movt	r0, #2
   1bd10:	bl	129c8 <puts@plt>
   1bd14:	mvn	r5, #0
   1bd18:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bd1c:	movw	r0, #32960	; 0x80c0
   1bd20:	movt	r0, #2
   1bd24:	bl	129c8 <puts@plt>
   1bd28:	mvn	r5, #0
   1bd2c:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bd30:	bl	23c68 <flatcc_verify_error_string@@Base>
   1bd34:	mov	r1, r0
   1bd38:	movw	r0, #32480	; 0x7ee0
   1bd3c:	movt	r0, #2
   1bd40:	mvn	r5, #0
   1bd44:	bl	12974 <printf@plt>
   1bd48:	b	1ba08 <test_mixed_type_union@@Base+0x560>
   1bd4c:	movw	r0, #32840	; 0x8048
   1bd50:	movt	r0, #2
   1bd54:	bl	129c8 <puts@plt>
   1bd58:	mvn	r5, #0
   1bd5c:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bd60:	movw	r0, #32996	; 0x80e4
   1bd64:	movt	r0, #2
   1bd68:	bl	129c8 <puts@plt>
   1bd6c:	mvn	r5, #0
   1bd70:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bd74:	movw	r1, #23968	; 0x5da0
   1bd78:	movt	r1, #2
   1bd7c:	ldr	r3, [pc, #968]	; 1c14c <test_mixed_type_union@@Base+0xca4>
   1bd80:	movw	r0, #32156	; 0x7d9c
   1bd84:	movt	r0, #2
   1bd88:	mov	r2, #239	; 0xef
   1bd8c:	bl	12a64 <__assert_fail@plt>
   1bd90:	movw	r0, #33020	; 0x80fc
   1bd94:	movt	r0, #2
   1bd98:	bl	129c8 <puts@plt>
   1bd9c:	mvn	r5, #0
   1bda0:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bda4:	movw	r1, #23968	; 0x5da0
   1bda8:	movt	r1, #2
   1bdac:	ldr	r3, [pc, #924]	; 1c150 <test_mixed_type_union@@Base+0xca8>
   1bdb0:	movw	r0, #32328	; 0x7e48
   1bdb4:	movt	r0, #2
   1bdb8:	mov	r2, #241	; 0xf1
   1bdbc:	bl	12a64 <__assert_fail@plt>
   1bdc0:	mov	r1, r9
   1bdc4:	movw	r0, #33048	; 0x8118
   1bdc8:	movt	r0, #2
   1bdcc:	mvn	r5, #0
   1bdd0:	bl	12974 <printf@plt>
   1bdd4:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bdd8:	mov	r3, #1
   1bddc:	add	r0, sp, #16
   1bde0:	ldm	r8, {r1, r2}
   1bde4:	bl	133e4 <_start@@Base+0x7d4>
   1bde8:	ldrb	sl, [sp, #16]
   1bdec:	cmp	sl, #2
   1bdf0:	beq	1be10 <test_mixed_type_union@@Base+0x968>
   1bdf4:	movw	r0, #33124	; 0x8164
   1bdf8:	movt	r0, #2
   1bdfc:	bl	12974 <printf@plt>
   1be00:	mvn	r5, #0
   1be04:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1be08:	mov	r3, r5
   1be0c:	b	1bbd0 <test_mixed_type_union@@Base+0x728>
   1be10:	ldr	r0, [sp, #20]
   1be14:	bl	13360 <_start@@Base+0x750>
   1be18:	cmp	r0, #42	; 0x2a
   1be1c:	beq	1be80 <test_mixed_type_union@@Base+0x9d8>
   1be20:	movw	r0, #33160	; 0x8188
   1be24:	movt	r0, #2
   1be28:	bl	12974 <printf@plt>
   1be2c:	mvn	r5, #0
   1be30:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1be34:	movw	r1, #23600	; 0x5c30
   1be38:	movt	r1, #2
   1be3c:	ldr	r3, [pc, #784]	; 1c154 <test_mixed_type_union@@Base+0xcac>
   1be40:	movw	r0, #31932	; 0x7cbc
   1be44:	movt	r0, #2
   1be48:	movw	r2, #823	; 0x337
   1be4c:	bl	12a64 <__assert_fail@plt>
   1be50:	mov	r6, r5
   1be54:	b	1b5fc <test_mixed_type_union@@Base+0x154>
   1be58:	ldr	r3, [r7, r8]
   1be5c:	add	r5, r7, r8
   1be60:	add	r3, r3, #4
   1be64:	add	r5, r5, r3
   1be68:	cmp	r5, #0
   1be6c:	moveq	r9, r5
   1be70:	beq	1bbd8 <test_mixed_type_union@@Base+0x730>
   1be74:	mov	r9, #0
   1be78:	mov	r2, r9
   1be7c:	b	1bbcc <test_mixed_type_union@@Base+0x724>
   1be80:	mov	r3, sl
   1be84:	add	r0, sp, #16
   1be88:	ldm	r8, {r1, r2}
   1be8c:	bl	133e4 <_start@@Base+0x7d4>
   1be90:	ldrb	r3, [sp, #16]
   1be94:	cmp	r3, #2
   1be98:	beq	1beb0 <test_mixed_type_union@@Base+0xa08>
   1be9c:	movw	r0, #33212	; 0x81bc
   1bea0:	movt	r0, #2
   1bea4:	bl	12974 <printf@plt>
   1bea8:	mvn	r5, #0
   1beac:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1beb0:	ldr	r0, [sp, #20]
   1beb4:	bl	13360 <_start@@Base+0x750>
   1beb8:	cmp	r0, #1
   1bebc:	beq	1bed4 <test_mixed_type_union@@Base+0xa2c>
   1bec0:	movw	r0, #33248	; 0x81e0
   1bec4:	movt	r0, #2
   1bec8:	bl	12974 <printf@plt>
   1becc:	mvn	r5, #0
   1bed0:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bed4:	ldr	r3, [r4, r6]
   1bed8:	sub	r3, r7, r3
   1bedc:	ldrh	r2, [r3]
   1bee0:	cmp	r2, #21
   1bee4:	bls	1bf34 <test_mixed_type_union@@Base+0xa8c>
   1bee8:	ldrh	r3, [r3, #20]
   1beec:	cmp	r3, #0
   1bef0:	beq	1bf34 <test_mixed_type_union@@Base+0xa8c>
   1bef4:	ldr	r2, [r7, r3]
   1bef8:	add	r3, r7, r3
   1befc:	add	r2, r2, #4
   1bf00:	adds	r3, r3, r2
   1bf04:	beq	1bf34 <test_mixed_type_union@@Base+0xa8c>
   1bf08:	ldr	r2, [r3, #-4]
   1bf0c:	cmp	r2, #3
   1bf10:	bls	1bf34 <test_mixed_type_union@@Base+0xa8c>
   1bf14:	ldrb	r3, [r3, #3]
   1bf18:	cmp	r3, #11
   1bf1c:	beq	1bf38 <test_mixed_type_union@@Base+0xa90>
   1bf20:	movw	r0, #33300	; 0x8214
   1bf24:	movt	r0, #2
   1bf28:	bl	129c8 <puts@plt>
   1bf2c:	mvn	r5, #0
   1bf30:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bf34:	bl	132e8 <_start@@Base+0x6d8>
   1bf38:	cmp	r5, #0
   1bf3c:	beq	1bfe4 <test_mixed_type_union@@Base+0xb3c>
   1bf40:	ldr	r3, [r5, #-4]
   1bf44:	cmp	r3, #3
   1bf48:	bls	1bfe4 <test_mixed_type_union@@Base+0xb3c>
   1bf4c:	ldr	r3, [r5, #12]
   1bf50:	add	r3, r3, #16
   1bf54:	adds	r0, r5, r3
   1bf58:	beq	1c088 <test_mixed_type_union@@Base+0xbe0>
   1bf5c:	movw	r1, #32308	; 0x7e34
   1bf60:	movt	r1, #2
   1bf64:	bl	12968 <strcmp@plt>
   1bf68:	cmp	r0, #0
   1bf6c:	bne	1c088 <test_mixed_type_union@@Base+0xbe0>
   1bf70:	mov	r3, #3
   1bf74:	add	r0, sp, #16
   1bf78:	ldm	r8, {r1, r2}
   1bf7c:	bl	133e4 <_start@@Base+0x7d4>
   1bf80:	ldrb	r3, [sp, #16]
   1bf84:	cmp	r3, #11
   1bf88:	bne	1c074 <test_mixed_type_union@@Base+0xbcc>
   1bf8c:	ldr	r3, [sp, #20]
   1bf90:	cmp	r3, #0
   1bf94:	beq	1c030 <test_mixed_type_union@@Base+0xb88>
   1bf98:	adds	r0, r3, #4
   1bf9c:	beq	1c030 <test_mixed_type_union@@Base+0xb88>
   1bfa0:	movw	r1, #32308	; 0x7e34
   1bfa4:	movt	r1, #2
   1bfa8:	bl	12968 <strcmp@plt>
   1bfac:	subs	r5, r0, #0
   1bfb0:	bne	1c030 <test_mixed_type_union@@Base+0xb88>
   1bfb4:	mov	r3, #4
   1bfb8:	add	r0, sp, #16
   1bfbc:	ldm	r8, {r1, r2}
   1bfc0:	bl	133e4 <_start@@Base+0x7d4>
   1bfc4:	ldrb	r3, [sp, #16]
   1bfc8:	cmp	r3, #9
   1bfcc:	beq	1c000 <test_mixed_type_union@@Base+0xb58>
   1bfd0:	movw	r0, #33520	; 0x82f0
   1bfd4:	movt	r0, #2
   1bfd8:	bl	12974 <printf@plt>
   1bfdc:	mvn	r5, #0
   1bfe0:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1bfe4:	movw	r1, #23740	; 0x5cbc
   1bfe8:	movt	r1, #2
   1bfec:	ldr	r3, [pc, #356]	; 1c158 <test_mixed_type_union@@Base+0xcb0>
   1bff0:	movw	r0, #23844	; 0x5d24
   1bff4:	movt	r0, #2
   1bff8:	mov	r2, #119	; 0x77
   1bffc:	bl	12a64 <__assert_fail@plt>
   1c000:	mov	r3, #5
   1c004:	add	r0, sp, #16
   1c008:	ldm	r8, {r1, r2}
   1c00c:	bl	133e4 <_start@@Base+0x7d4>
   1c010:	ldrb	r3, [sp, #16]
   1c014:	cmp	r3, #9
   1c018:	beq	1c044 <test_mixed_type_union@@Base+0xb9c>
   1c01c:	movw	r0, #33556	; 0x8314
   1c020:	movt	r0, #2
   1c024:	bl	12974 <printf@plt>
   1c028:	mvn	r5, #0
   1c02c:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c030:	movw	r0, #33456	; 0x82b0
   1c034:	movt	r0, #2
   1c038:	bl	129c8 <puts@plt>
   1c03c:	mvn	r5, #0
   1c040:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c044:	mov	r3, #6
   1c048:	add	r0, sp, #16
   1c04c:	ldm	r8, {r1, r2}
   1c050:	bl	133e4 <_start@@Base+0x7d4>
   1c054:	ldrb	r3, [sp, #16]
   1c058:	cmp	r3, #9
   1c05c:	beq	1c09c <test_mixed_type_union@@Base+0xbf4>
   1c060:	movw	r0, #33592	; 0x8338
   1c064:	movt	r0, #2
   1c068:	bl	12974 <printf@plt>
   1c06c:	mvn	r5, #0
   1c070:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c074:	movw	r0, #33400	; 0x8278
   1c078:	movt	r0, #2
   1c07c:	bl	12974 <printf@plt>
   1c080:	mvn	r5, #0
   1c084:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c088:	movw	r0, #33348	; 0x8244
   1c08c:	movt	r0, #2
   1c090:	bl	129c8 <puts@plt>
   1c094:	mvn	r5, #0
   1c098:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c09c:	mov	r3, #7
   1c0a0:	add	r0, sp, #16
   1c0a4:	ldm	r8, {r1, r2}
   1c0a8:	bl	133e4 <_start@@Base+0x7d4>
   1c0ac:	ldrb	r6, [sp, #16]
   1c0b0:	cmp	r6, #9
   1c0b4:	beq	1c0cc <test_mixed_type_union@@Base+0xc24>
   1c0b8:	movw	r0, #33628	; 0x835c
   1c0bc:	movt	r0, #2
   1c0c0:	bl	12974 <printf@plt>
   1c0c4:	mvn	r5, #0
   1c0c8:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c0cc:	mov	r3, #8
   1c0d0:	add	r0, sp, #16
   1c0d4:	ldm	r8, {r1, r2}
   1c0d8:	bl	133e4 <_start@@Base+0x7d4>
   1c0dc:	ldrb	r3, [sp, #16]
   1c0e0:	cmp	r3, #11
   1c0e4:	bne	1c12c <test_mixed_type_union@@Base+0xc84>
   1c0e8:	mov	r3, r6
   1c0ec:	add	r0, sp, #16
   1c0f0:	ldm	r8, {r1, r2}
   1c0f4:	bl	133e4 <_start@@Base+0x7d4>
   1c0f8:	ldrb	r3, [sp, #16]
   1c0fc:	cmp	r3, #11
   1c100:	bne	1c12c <test_mixed_type_union@@Base+0xc84>
   1c104:	cmp	r9, #0
   1c108:	beq	1c118 <test_mixed_type_union@@Base+0xc70>
   1c10c:	ldr	r3, [r9, #-4]
   1c110:	cmp	r3, #10
   1c114:	beq	1ba00 <test_mixed_type_union@@Base+0x558>
   1c118:	movw	r0, #33708	; 0x83ac
   1c11c:	movt	r0, #2
   1c120:	mvn	r5, #0
   1c124:	bl	12974 <printf@plt>
   1c128:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c12c:	movw	r0, #33664	; 0x8380
   1c130:	movt	r0, #2
   1c134:	bl	12974 <printf@plt>
   1c138:	mvn	r5, #0
   1c13c:	b	1ba00 <test_mixed_type_union@@Base+0x558>
   1c140:	andeq	r5, r2, r8, ror #21
   1c144:	andeq	r5, r2, r4, lsl #22
   1c148:	andeq	r5, r2, ip, lsl fp
   1c14c:	andeq	r5, r2, ip, ror #21
   1c150:	andeq	r5, r2, r8, lsl #22
   1c154:	andeq	r5, r2, r4, asr #22
   1c158:	andeq	r5, r2, r4, ror #22

0001c15c <test_add_set_defaults@@Base>:
   1c15c:	strd	r4, [sp, #-12]!
   1c160:	mov	r4, r0
   1c164:	str	lr, [sp, #8]
   1c168:	sub	sp, sp, #12
   1c16c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1c170:	mov	r3, #0
   1c174:	mov	r0, r4
   1c178:	mov	r2, r3
   1c17c:	movw	r1, #24784	; 0x60d0
   1c180:	movt	r1, #2
   1c184:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1c188:	cmp	r0, #0
   1c18c:	bne	1c19c <test_add_set_defaults@@Base+0x40>
   1c190:	mov	r1, #36	; 0x24
   1c194:	mov	r0, r4
   1c198:	bl	206a8 <flatcc_builder_start_table@@Base>
   1c19c:	movw	r1, #25080	; 0x61f8
   1c1a0:	movt	r1, #2
   1c1a4:	mov	r0, r4
   1c1a8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1c1ac:	subs	r5, r0, #0
   1c1b0:	beq	1c1c8 <test_add_set_defaults@@Base+0x6c>
   1c1b4:	mov	r1, #3
   1c1b8:	mov	r0, r4
   1c1bc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c1c0:	cmp	r0, #0
   1c1c4:	strne	r5, [r0]
   1c1c8:	mov	r3, #2
   1c1cc:	mov	r1, #1
   1c1d0:	mov	r2, r3
   1c1d4:	mov	r0, r4
   1c1d8:	bl	22a20 <flatcc_builder_table_add@@Base>
   1c1dc:	cmp	r0, #0
   1c1e0:	mov	r2, #1
   1c1e4:	ldr	r1, [pc, #692]	; 1c4a0 <test_add_set_defaults@@Base+0x344>
   1c1e8:	movne	r3, #100	; 0x64
   1c1ec:	strhne	r3, [r0]
   1c1f0:	mov	r0, r4
   1c1f4:	bl	20f8c <flatcc_builder_check_required@@Base>
   1c1f8:	cmp	r0, #0
   1c1fc:	beq	1c49c <test_add_set_defaults@@Base+0x340>
   1c200:	mov	r0, r4
   1c204:	bl	21028 <flatcc_builder_end_table@@Base>
   1c208:	mov	r1, r0
   1c20c:	mov	r0, r4
   1c210:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1c214:	add	r1, sp, #4
   1c218:	mov	r0, r4
   1c21c:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1c220:	cmp	r0, #0
   1c224:	beq	1c23c <test_add_set_defaults@@Base+0xe0>
   1c228:	ldr	r2, [r0, #4]
   1c22c:	movw	r3, #20301	; 0x4f4d
   1c230:	movt	r3, #21326	; 0x534e
   1c234:	cmp	r2, r3
   1c238:	beq	1c240 <test_add_set_defaults@@Base+0xe4>
   1c23c:	bl	12ecc <_start@@Base+0x2bc>
   1c240:	ldr	r2, [r0]
   1c244:	adds	r3, r0, r2
   1c248:	beq	1c23c <test_add_set_defaults@@Base+0xe0>
   1c24c:	ldr	r2, [r0, r2]
   1c250:	sub	r3, r3, r2
   1c254:	ldrh	r2, [r3]
   1c258:	cmp	r2, #9
   1c25c:	bls	1c3e0 <test_add_set_defaults@@Base+0x284>
   1c260:	ldrh	r1, [r3, #8]
   1c264:	cmp	r1, #0
   1c268:	bne	1c460 <test_add_set_defaults@@Base+0x304>
   1c26c:	ldrh	r1, [r3, #6]
   1c270:	cmp	r1, #0
   1c274:	beq	1c3e8 <test_add_set_defaults@@Base+0x28c>
   1c278:	cmp	r2, #17
   1c27c:	bls	1c28c <test_add_set_defaults@@Base+0x130>
   1c280:	ldrh	r3, [r3, #16]
   1c284:	cmp	r3, #0
   1c288:	bne	1c474 <test_add_set_defaults@@Base+0x318>
   1c28c:	mov	r0, r4
   1c290:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1c294:	mov	r3, #0
   1c298:	movw	r1, #24784	; 0x60d0
   1c29c:	movt	r1, #2
   1c2a0:	mov	r2, r3
   1c2a4:	mov	r0, r4
   1c2a8:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1c2ac:	cmp	r0, #0
   1c2b0:	bne	1c2c0 <test_add_set_defaults@@Base+0x164>
   1c2b4:	mov	r1, #36	; 0x24
   1c2b8:	mov	r0, r4
   1c2bc:	bl	206a8 <flatcc_builder_start_table@@Base>
   1c2c0:	movw	r1, #25080	; 0x61f8
   1c2c4:	movt	r1, #2
   1c2c8:	mov	r0, r4
   1c2cc:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1c2d0:	subs	r5, r0, #0
   1c2d4:	beq	1c2ec <test_add_set_defaults@@Base+0x190>
   1c2d8:	mov	r1, #3
   1c2dc:	mov	r0, r4
   1c2e0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c2e4:	cmp	r0, #0
   1c2e8:	strne	r5, [r0]
   1c2ec:	mov	r3, #2
   1c2f0:	mov	r0, r4
   1c2f4:	mov	r2, r3
   1c2f8:	mov	r1, r3
   1c2fc:	bl	22a20 <flatcc_builder_table_add@@Base>
   1c300:	cmp	r0, #0
   1c304:	mov	r1, #1
   1c308:	movne	r3, #100	; 0x64
   1c30c:	strhne	r3, [r0]
   1c310:	mov	r3, #2
   1c314:	mov	r0, r4
   1c318:	mov	r2, r3
   1c31c:	bl	22a20 <flatcc_builder_table_add@@Base>
   1c320:	cmp	r0, #0
   1c324:	mov	r1, #6
   1c328:	movne	r3, #100	; 0x64
   1c32c:	strhne	r3, [r0]
   1c330:	mov	r3, #1
   1c334:	mov	r0, r4
   1c338:	mov	r2, r3
   1c33c:	bl	22a20 <flatcc_builder_table_add@@Base>
   1c340:	cmp	r0, #0
   1c344:	mov	r2, #1
   1c348:	ldr	r1, [pc, #336]	; 1c4a0 <test_add_set_defaults@@Base+0x344>
   1c34c:	movne	r3, #8
   1c350:	strbne	r3, [r0]
   1c354:	mov	r0, r4
   1c358:	bl	20f8c <flatcc_builder_check_required@@Base>
   1c35c:	cmp	r0, #0
   1c360:	beq	1c49c <test_add_set_defaults@@Base+0x340>
   1c364:	mov	r0, r4
   1c368:	bl	21028 <flatcc_builder_end_table@@Base>
   1c36c:	mov	r1, r0
   1c370:	mov	r0, r4
   1c374:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1c378:	add	r1, sp, #4
   1c37c:	mov	r0, r4
   1c380:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1c384:	cmp	r0, #0
   1c388:	beq	1c23c <test_add_set_defaults@@Base+0xe0>
   1c38c:	ldr	r2, [r0, #4]
   1c390:	movw	r3, #20301	; 0x4f4d
   1c394:	movt	r3, #21326	; 0x534e
   1c398:	cmp	r2, r3
   1c39c:	bne	1c23c <test_add_set_defaults@@Base+0xe0>
   1c3a0:	ldr	r2, [r0]
   1c3a4:	adds	r3, r0, r2
   1c3a8:	beq	1c23c <test_add_set_defaults@@Base+0xe0>
   1c3ac:	ldr	r2, [r0, r2]
   1c3b0:	sub	r3, r3, r2
   1c3b4:	ldrh	r2, [r3]
   1c3b8:	cmp	r2, #9
   1c3bc:	bhi	1c3fc <test_add_set_defaults@@Base+0x2a0>
   1c3c0:	movw	r0, #33888	; 0x8460
   1c3c4:	movt	r0, #2
   1c3c8:	bl	129c8 <puts@plt>
   1c3cc:	mvn	r0, #0
   1c3d0:	add	sp, sp, #12
   1c3d4:	ldrd	r4, [sp]
   1c3d8:	add	sp, sp, #8
   1c3dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3e0:	cmp	r2, #7
   1c3e4:	bhi	1c450 <test_add_set_defaults@@Base+0x2f4>
   1c3e8:	movw	r0, #33792	; 0x8400
   1c3ec:	movt	r0, #2
   1c3f0:	bl	129c8 <puts@plt>
   1c3f4:	mvn	r0, #0
   1c3f8:	b	1c3d0 <test_add_set_defaults@@Base+0x274>
   1c3fc:	ldrh	r1, [r3, #8]
   1c400:	cmp	r1, #0
   1c404:	beq	1c3c0 <test_add_set_defaults@@Base+0x264>
   1c408:	ldrh	r1, [r3, #6]
   1c40c:	cmp	r1, #0
   1c410:	beq	1c488 <test_add_set_defaults@@Base+0x32c>
   1c414:	cmp	r2, #17
   1c418:	bhi	1c430 <test_add_set_defaults@@Base+0x2d4>
   1c41c:	movw	r0, #34004	; 0x84d4
   1c420:	movt	r0, #2
   1c424:	bl	129c8 <puts@plt>
   1c428:	mvn	r0, #0
   1c42c:	b	1c3d0 <test_add_set_defaults@@Base+0x274>
   1c430:	ldrh	r3, [r3, #16]
   1c434:	cmp	r3, #0
   1c438:	movne	r0, #0
   1c43c:	beq	1c41c <test_add_set_defaults@@Base+0x2c0>
   1c440:	add	sp, sp, #12
   1c444:	ldrd	r4, [sp]
   1c448:	add	sp, sp, #8
   1c44c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c450:	ldrh	r3, [r3, #6]
   1c454:	cmp	r3, #0
   1c458:	bne	1c28c <test_add_set_defaults@@Base+0x130>
   1c45c:	b	1c3e8 <test_add_set_defaults@@Base+0x28c>
   1c460:	movw	r0, #33748	; 0x83d4
   1c464:	movt	r0, #2
   1c468:	bl	129c8 <puts@plt>
   1c46c:	mvn	r0, #0
   1c470:	b	1c3d0 <test_add_set_defaults@@Base+0x274>
   1c474:	movw	r0, #33840	; 0x8430
   1c478:	movt	r0, #2
   1c47c:	bl	129c8 <puts@plt>
   1c480:	mvn	r0, #0
   1c484:	b	1c3d0 <test_add_set_defaults@@Base+0x274>
   1c488:	movw	r0, #33940	; 0x8494
   1c48c:	movt	r0, #2
   1c490:	bl	129c8 <puts@plt>
   1c494:	mvn	r0, #0
   1c498:	b	1c3d0 <test_add_set_defaults@@Base+0x274>
   1c49c:	bl	134a0 <_start@@Base+0x890>
   1c4a0:	ldrdeq	r5, [r2], -ip

0001c4a4 <test_nested_buffer@@Base>:
   1c4a4:	strd	r4, [sp, #-16]!
   1c4a8:	mov	r4, r0
   1c4ac:	str	r6, [sp, #8]
   1c4b0:	str	lr, [sp, #12]
   1c4b4:	sub	sp, sp, #8
   1c4b8:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1c4bc:	mov	r3, #0
   1c4c0:	mov	r0, r4
   1c4c4:	mov	r2, r3
   1c4c8:	movw	r1, #24784	; 0x60d0
   1c4cc:	movt	r1, #2
   1c4d0:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1c4d4:	cmp	r0, #0
   1c4d8:	bne	1c4e8 <test_nested_buffer@@Base+0x44>
   1c4dc:	mov	r1, #36	; 0x24
   1c4e0:	mov	r0, r4
   1c4e4:	bl	206a8 <flatcc_builder_start_table@@Base>
   1c4e8:	movw	r1, #25080	; 0x61f8
   1c4ec:	movt	r1, #2
   1c4f0:	mov	r0, r4
   1c4f4:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1c4f8:	subs	r5, r0, #0
   1c4fc:	beq	1c514 <test_nested_buffer@@Base+0x70>
   1c500:	mov	r1, #3
   1c504:	mov	r0, r4
   1c508:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c50c:	cmp	r0, #0
   1c510:	strne	r5, [r0]
   1c514:	mov	r3, #0
   1c518:	movw	r1, #24784	; 0x60d0
   1c51c:	movt	r1, #2
   1c520:	mov	r2, r3
   1c524:	mov	r0, r4
   1c528:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1c52c:	cmp	r0, #0
   1c530:	bne	1c540 <test_nested_buffer@@Base+0x9c>
   1c534:	mov	r1, #36	; 0x24
   1c538:	mov	r0, r4
   1c53c:	bl	206a8 <flatcc_builder_start_table@@Base>
   1c540:	movw	r1, #34060	; 0x850c
   1c544:	movt	r1, #2
   1c548:	mov	r0, r4
   1c54c:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1c550:	subs	r5, r0, #0
   1c554:	beq	1c56c <test_nested_buffer@@Base+0xc8>
   1c558:	mov	r1, #3
   1c55c:	mov	r0, r4
   1c560:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c564:	cmp	r0, #0
   1c568:	strne	r5, [r0]
   1c56c:	mov	r2, #1
   1c570:	ldr	r1, [pc, #628]	; 1c7ec <test_nested_buffer@@Base+0x348>
   1c574:	mov	r0, r4
   1c578:	bl	20f8c <flatcc_builder_check_required@@Base>
   1c57c:	cmp	r0, #0
   1c580:	beq	1c7cc <test_nested_buffer@@Base+0x328>
   1c584:	mov	r0, r4
   1c588:	bl	21028 <flatcc_builder_end_table@@Base>
   1c58c:	mov	r1, r0
   1c590:	mov	r0, r4
   1c594:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1c598:	subs	r5, r0, #0
   1c59c:	beq	1c5b4 <test_nested_buffer@@Base+0x110>
   1c5a0:	mov	r1, #13
   1c5a4:	mov	r0, r4
   1c5a8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c5ac:	cmp	r0, #0
   1c5b0:	strne	r5, [r0]
   1c5b4:	mov	r3, #2
   1c5b8:	mov	r0, r4
   1c5bc:	mov	r2, r3
   1c5c0:	mov	r1, r3
   1c5c4:	bl	22a20 <flatcc_builder_table_add@@Base>
   1c5c8:	cmp	r0, #0
   1c5cc:	mov	r2, #1
   1c5d0:	ldr	r1, [pc, #532]	; 1c7ec <test_nested_buffer@@Base+0x348>
   1c5d4:	movne	r3, #10
   1c5d8:	strhne	r3, [r0]
   1c5dc:	mov	r0, r4
   1c5e0:	bl	20f8c <flatcc_builder_check_required@@Base>
   1c5e4:	cmp	r0, #0
   1c5e8:	beq	1c7cc <test_nested_buffer@@Base+0x328>
   1c5ec:	mov	r0, r4
   1c5f0:	bl	21028 <flatcc_builder_end_table@@Base>
   1c5f4:	mov	r1, r0
   1c5f8:	mov	r0, r4
   1c5fc:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1c600:	mov	r0, r4
   1c604:	add	r1, sp, #4
   1c608:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1c60c:	movw	r3, #41072	; 0xa070
   1c610:	movt	r3, #3
   1c614:	ldr	r2, [sp, #4]
   1c618:	mov	r4, r0
   1c61c:	mov	r1, r0
   1c620:	movw	r0, #34076	; 0x851c
   1c624:	movt	r0, #2
   1c628:	ldr	r3, [r3]
   1c62c:	bl	12d28 <_start@@Base+0x118>
   1c630:	cmp	r4, #0
   1c634:	beq	1c770 <test_nested_buffer@@Base+0x2cc>
   1c638:	ldr	r2, [r4, #4]
   1c63c:	movw	r3, #20301	; 0x4f4d
   1c640:	movt	r3, #21326	; 0x534e
   1c644:	cmp	r2, r3
   1c648:	bne	1c770 <test_nested_buffer@@Base+0x2cc>
   1c64c:	ldr	r3, [r4]
   1c650:	adds	r5, r4, r3
   1c654:	beq	1c770 <test_nested_buffer@@Base+0x2cc>
   1c658:	ldr	r4, [r4, r3]
   1c65c:	sub	r4, r5, r4
   1c660:	ldrh	r6, [r4]
   1c664:	cmp	r6, #11
   1c668:	bls	1c7b0 <test_nested_buffer@@Base+0x30c>
   1c66c:	ldrh	r0, [r4, #10]
   1c670:	cmp	r0, #0
   1c674:	beq	1c7b0 <test_nested_buffer@@Base+0x30c>
   1c678:	ldr	r3, [r5, r0]
   1c67c:	add	r0, r5, r0
   1c680:	movw	r1, #25080	; 0x61f8
   1c684:	movt	r1, #2
   1c688:	add	r3, r3, #4
   1c68c:	add	r0, r0, r3
   1c690:	bl	12968 <strcmp@plt>
   1c694:	cmp	r0, #0
   1c698:	bne	1c788 <test_nested_buffer@@Base+0x2e4>
   1c69c:	cmp	r6, #31
   1c6a0:	ldrh	r1, [r4, #8]
   1c6a4:	bls	1c75c <test_nested_buffer@@Base+0x2b8>
   1c6a8:	ldrh	r3, [r4, #30]
   1c6ac:	cmp	r3, #0
   1c6b0:	beq	1c75c <test_nested_buffer@@Base+0x2b8>
   1c6b4:	ldr	r0, [r5, r3]
   1c6b8:	add	r3, r5, r3
   1c6bc:	add	r0, r0, #4
   1c6c0:	adds	r2, r3, r0
   1c6c4:	beq	1c75c <test_nested_buffer@@Base+0x2b8>
   1c6c8:	ldr	lr, [r2, #4]
   1c6cc:	movw	ip, #20301	; 0x4f4d
   1c6d0:	movt	ip, #21326	; 0x534e
   1c6d4:	cmp	lr, ip
   1c6d8:	bne	1c75c <test_nested_buffer@@Base+0x2b8>
   1c6dc:	ldr	r3, [r3, r0]
   1c6e0:	cmp	r1, #0
   1c6e4:	add	r0, r2, r3
   1c6e8:	beq	1c774 <test_nested_buffer@@Base+0x2d0>
   1c6ec:	ldrsh	r1, [r5, r1]
   1c6f0:	cmp	r1, #10
   1c6f4:	bne	1c774 <test_nested_buffer@@Base+0x2d0>
   1c6f8:	cmp	r0, #0
   1c6fc:	beq	1c770 <test_nested_buffer@@Base+0x2cc>
   1c700:	ldr	r3, [r2, r3]
   1c704:	sub	r3, r0, r3
   1c708:	ldrh	r2, [r3]
   1c70c:	cmp	r2, #11
   1c710:	bls	1c7b0 <test_nested_buffer@@Base+0x30c>
   1c714:	ldrh	r2, [r3, #10]
   1c718:	cmp	r2, #0
   1c71c:	beq	1c7b0 <test_nested_buffer@@Base+0x30c>
   1c720:	ldr	r3, [r0, r2]
   1c724:	add	r0, r0, r2
   1c728:	add	r3, r3, #4
   1c72c:	adds	r0, r0, r3
   1c730:	beq	1c7d0 <test_nested_buffer@@Base+0x32c>
   1c734:	movw	r1, #34060	; 0x850c
   1c738:	movt	r1, #2
   1c73c:	bl	12968 <strcmp@plt>
   1c740:	cmp	r0, #0
   1c744:	bne	1c79c <test_nested_buffer@@Base+0x2f8>
   1c748:	add	sp, sp, #8
   1c74c:	ldrd	r4, [sp]
   1c750:	ldr	r6, [sp, #8]
   1c754:	add	sp, sp, #12
   1c758:	pop	{pc}		; (ldr pc, [sp], #4)
   1c75c:	cmp	r1, #0
   1c760:	beq	1c774 <test_nested_buffer@@Base+0x2d0>
   1c764:	ldrsh	r3, [r5, r1]
   1c768:	cmp	r3, #10
   1c76c:	bne	1c774 <test_nested_buffer@@Base+0x2d0>
   1c770:	bl	131b0 <_start@@Base+0x5a0>
   1c774:	movw	r0, #34124	; 0x854c
   1c778:	movt	r0, #2
   1c77c:	bl	129c8 <puts@plt>
   1c780:	mvn	r0, #0
   1c784:	b	1c748 <test_nested_buffer@@Base+0x2a4>
   1c788:	movw	r0, #34096	; 0x8530
   1c78c:	movt	r0, #2
   1c790:	bl	129c8 <puts@plt>
   1c794:	mvn	r0, #0
   1c798:	b	1c748 <test_nested_buffer@@Base+0x2a4>
   1c79c:	movw	r0, #34188	; 0x858c
   1c7a0:	movt	r0, #2
   1c7a4:	bl	129c8 <puts@plt>
   1c7a8:	mvn	r0, #0
   1c7ac:	b	1c748 <test_nested_buffer@@Base+0x2a4>
   1c7b0:	movw	r1, #23600	; 0x5c30
   1c7b4:	movt	r1, #2
   1c7b8:	ldr	r3, [pc, #48]	; 1c7f0 <test_nested_buffer@@Base+0x34c>
   1c7bc:	movw	r0, #23900	; 0x5d5c
   1c7c0:	movt	r0, #2
   1c7c4:	movw	r2, #699	; 0x2bb
   1c7c8:	bl	12a64 <__assert_fail@plt>
   1c7cc:	bl	134a0 <_start@@Base+0x890>
   1c7d0:	movw	r1, #26688	; 0x6840
   1c7d4:	movt	r1, #2
   1c7d8:	ldr	r3, [pc, #20]	; 1c7f4 <test_nested_buffer@@Base+0x350>
   1c7dc:	movw	r0, #34160	; 0x8570
   1c7e0:	movt	r0, #2
   1c7e4:	movw	r2, #2188	; 0x88c
   1c7e8:	bl	12a64 <__assert_fail@plt>
   1c7ec:	ldrdeq	r5, [r2], -ip
   1c7f0:	andeq	r5, r2, r4, ror #13
   1c7f4:	andeq	r5, r2, ip, lsl #23

0001c7f8 <test_nested_buffer_first@@Base>:
   1c7f8:	strd	r4, [sp, #-16]!
   1c7fc:	mov	r4, r0
   1c800:	str	r6, [sp, #8]
   1c804:	str	lr, [sp, #12]
   1c808:	sub	sp, sp, #8
   1c80c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1c810:	mov	r3, #0
   1c814:	mov	r0, r4
   1c818:	mov	r2, r3
   1c81c:	movw	r1, #24784	; 0x60d0
   1c820:	movt	r1, #2
   1c824:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1c828:	cmp	r0, #0
   1c82c:	bne	1c83c <test_nested_buffer_first@@Base+0x44>
   1c830:	mov	r1, #36	; 0x24
   1c834:	mov	r0, r4
   1c838:	bl	206a8 <flatcc_builder_start_table@@Base>
   1c83c:	mov	r3, #0
   1c840:	movw	r1, #24784	; 0x60d0
   1c844:	movt	r1, #2
   1c848:	mov	r2, r3
   1c84c:	mov	r0, r4
   1c850:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1c854:	cmp	r0, #0
   1c858:	bne	1c868 <test_nested_buffer_first@@Base+0x70>
   1c85c:	mov	r1, #36	; 0x24
   1c860:	mov	r0, r4
   1c864:	bl	206a8 <flatcc_builder_start_table@@Base>
   1c868:	movw	r1, #34060	; 0x850c
   1c86c:	movt	r1, #2
   1c870:	mov	r0, r4
   1c874:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1c878:	subs	r5, r0, #0
   1c87c:	beq	1c894 <test_nested_buffer_first@@Base+0x9c>
   1c880:	mov	r1, #3
   1c884:	mov	r0, r4
   1c888:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c88c:	cmp	r0, #0
   1c890:	strne	r5, [r0]
   1c894:	mov	r2, #1
   1c898:	ldr	r1, [pc, #672]	; 1cb40 <test_nested_buffer_first@@Base+0x348>
   1c89c:	mov	r0, r4
   1c8a0:	bl	20f8c <flatcc_builder_check_required@@Base>
   1c8a4:	cmp	r0, #0
   1c8a8:	beq	1cb20 <test_nested_buffer_first@@Base+0x328>
   1c8ac:	mov	r0, r4
   1c8b0:	bl	21028 <flatcc_builder_end_table@@Base>
   1c8b4:	mov	r1, r0
   1c8b8:	mov	r0, r4
   1c8bc:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1c8c0:	subs	r5, r0, #0
   1c8c4:	beq	1c8dc <test_nested_buffer_first@@Base+0xe4>
   1c8c8:	mov	r1, #13
   1c8cc:	mov	r0, r4
   1c8d0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c8d4:	cmp	r0, #0
   1c8d8:	strne	r5, [r0]
   1c8dc:	mov	r3, #2
   1c8e0:	mov	r0, r4
   1c8e4:	mov	r1, r3
   1c8e8:	mov	r2, r3
   1c8ec:	bl	22a20 <flatcc_builder_table_add@@Base>
   1c8f0:	cmp	r0, #0
   1c8f4:	movw	r1, #25080	; 0x61f8
   1c8f8:	movt	r1, #2
   1c8fc:	movne	r3, #10
   1c900:	strhne	r3, [r0]
   1c904:	mov	r0, r4
   1c908:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1c90c:	subs	r5, r0, #0
   1c910:	beq	1c928 <test_nested_buffer_first@@Base+0x130>
   1c914:	mov	r1, #3
   1c918:	mov	r0, r4
   1c91c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1c920:	cmp	r0, #0
   1c924:	strne	r5, [r0]
   1c928:	mov	r2, #1
   1c92c:	ldr	r1, [pc, #524]	; 1cb40 <test_nested_buffer_first@@Base+0x348>
   1c930:	mov	r0, r4
   1c934:	bl	20f8c <flatcc_builder_check_required@@Base>
   1c938:	cmp	r0, #0
   1c93c:	beq	1cb20 <test_nested_buffer_first@@Base+0x328>
   1c940:	mov	r0, r4
   1c944:	bl	21028 <flatcc_builder_end_table@@Base>
   1c948:	mov	r1, r0
   1c94c:	mov	r0, r4
   1c950:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1c954:	mov	r0, r4
   1c958:	add	r1, sp, #4
   1c95c:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1c960:	movw	r3, #41072	; 0xa070
   1c964:	movt	r3, #3
   1c968:	ldr	r2, [sp, #4]
   1c96c:	mov	r4, r0
   1c970:	mov	r1, r0
   1c974:	movw	r0, #34076	; 0x851c
   1c978:	movt	r0, #2
   1c97c:	ldr	r3, [r3]
   1c980:	bl	12d28 <_start@@Base+0x118>
   1c984:	cmp	r4, #0
   1c988:	beq	1cac4 <test_nested_buffer_first@@Base+0x2cc>
   1c98c:	ldr	r2, [r4, #4]
   1c990:	movw	r3, #20301	; 0x4f4d
   1c994:	movt	r3, #21326	; 0x534e
   1c998:	cmp	r2, r3
   1c99c:	bne	1cac4 <test_nested_buffer_first@@Base+0x2cc>
   1c9a0:	ldr	r3, [r4]
   1c9a4:	adds	r5, r4, r3
   1c9a8:	beq	1cac4 <test_nested_buffer_first@@Base+0x2cc>
   1c9ac:	ldr	r4, [r4, r3]
   1c9b0:	sub	r4, r5, r4
   1c9b4:	ldrh	r6, [r4]
   1c9b8:	cmp	r6, #11
   1c9bc:	bls	1cb04 <test_nested_buffer_first@@Base+0x30c>
   1c9c0:	ldrh	r0, [r4, #10]
   1c9c4:	cmp	r0, #0
   1c9c8:	beq	1cb04 <test_nested_buffer_first@@Base+0x30c>
   1c9cc:	ldr	r3, [r5, r0]
   1c9d0:	add	r0, r5, r0
   1c9d4:	movw	r1, #25080	; 0x61f8
   1c9d8:	movt	r1, #2
   1c9dc:	add	r3, r3, #4
   1c9e0:	add	r0, r0, r3
   1c9e4:	bl	12968 <strcmp@plt>
   1c9e8:	cmp	r0, #0
   1c9ec:	bne	1cadc <test_nested_buffer_first@@Base+0x2e4>
   1c9f0:	cmp	r6, #31
   1c9f4:	ldrh	r1, [r4, #8]
   1c9f8:	bls	1cab0 <test_nested_buffer_first@@Base+0x2b8>
   1c9fc:	ldrh	r3, [r4, #30]
   1ca00:	cmp	r3, #0
   1ca04:	beq	1cab0 <test_nested_buffer_first@@Base+0x2b8>
   1ca08:	ldr	r0, [r5, r3]
   1ca0c:	add	r3, r5, r3
   1ca10:	add	r0, r0, #4
   1ca14:	adds	r2, r3, r0
   1ca18:	beq	1cab0 <test_nested_buffer_first@@Base+0x2b8>
   1ca1c:	ldr	lr, [r2, #4]
   1ca20:	movw	ip, #20301	; 0x4f4d
   1ca24:	movt	ip, #21326	; 0x534e
   1ca28:	cmp	lr, ip
   1ca2c:	bne	1cab0 <test_nested_buffer_first@@Base+0x2b8>
   1ca30:	ldr	r3, [r3, r0]
   1ca34:	cmp	r1, #0
   1ca38:	add	r0, r2, r3
   1ca3c:	beq	1cac8 <test_nested_buffer_first@@Base+0x2d0>
   1ca40:	ldrsh	r1, [r5, r1]
   1ca44:	cmp	r1, #10
   1ca48:	bne	1cac8 <test_nested_buffer_first@@Base+0x2d0>
   1ca4c:	cmp	r0, #0
   1ca50:	beq	1cac4 <test_nested_buffer_first@@Base+0x2cc>
   1ca54:	ldr	r3, [r2, r3]
   1ca58:	sub	r3, r0, r3
   1ca5c:	ldrh	r2, [r3]
   1ca60:	cmp	r2, #11
   1ca64:	bls	1cb04 <test_nested_buffer_first@@Base+0x30c>
   1ca68:	ldrh	r2, [r3, #10]
   1ca6c:	cmp	r2, #0
   1ca70:	beq	1cb04 <test_nested_buffer_first@@Base+0x30c>
   1ca74:	ldr	r3, [r0, r2]
   1ca78:	add	r0, r0, r2
   1ca7c:	add	r3, r3, #4
   1ca80:	adds	r0, r0, r3
   1ca84:	beq	1cb24 <test_nested_buffer_first@@Base+0x32c>
   1ca88:	movw	r1, #34060	; 0x850c
   1ca8c:	movt	r1, #2
   1ca90:	bl	12968 <strcmp@plt>
   1ca94:	cmp	r0, #0
   1ca98:	bne	1caf0 <test_nested_buffer_first@@Base+0x2f8>
   1ca9c:	add	sp, sp, #8
   1caa0:	ldrd	r4, [sp]
   1caa4:	ldr	r6, [sp, #8]
   1caa8:	add	sp, sp, #12
   1caac:	pop	{pc}		; (ldr pc, [sp], #4)
   1cab0:	cmp	r1, #0
   1cab4:	beq	1cac8 <test_nested_buffer_first@@Base+0x2d0>
   1cab8:	ldrsh	r3, [r5, r1]
   1cabc:	cmp	r3, #10
   1cac0:	bne	1cac8 <test_nested_buffer_first@@Base+0x2d0>
   1cac4:	bl	131b0 <_start@@Base+0x5a0>
   1cac8:	movw	r0, #34124	; 0x854c
   1cacc:	movt	r0, #2
   1cad0:	bl	129c8 <puts@plt>
   1cad4:	mvn	r0, #0
   1cad8:	b	1ca9c <test_nested_buffer_first@@Base+0x2a4>
   1cadc:	movw	r0, #34096	; 0x8530
   1cae0:	movt	r0, #2
   1cae4:	bl	129c8 <puts@plt>
   1cae8:	mvn	r0, #0
   1caec:	b	1ca9c <test_nested_buffer_first@@Base+0x2a4>
   1caf0:	movw	r0, #34188	; 0x858c
   1caf4:	movt	r0, #2
   1caf8:	bl	129c8 <puts@plt>
   1cafc:	mvn	r0, #0
   1cb00:	b	1ca9c <test_nested_buffer_first@@Base+0x2a4>
   1cb04:	movw	r1, #23600	; 0x5c30
   1cb08:	movt	r1, #2
   1cb0c:	ldr	r3, [pc, #48]	; 1cb44 <test_nested_buffer_first@@Base+0x34c>
   1cb10:	movw	r0, #23900	; 0x5d5c
   1cb14:	movt	r0, #2
   1cb18:	movw	r2, #699	; 0x2bb
   1cb1c:	bl	12a64 <__assert_fail@plt>
   1cb20:	bl	134a0 <_start@@Base+0x890>
   1cb24:	movw	r1, #26688	; 0x6840
   1cb28:	movt	r1, #2
   1cb2c:	ldr	r3, [pc, #20]	; 1cb48 <test_nested_buffer_first@@Base+0x350>
   1cb30:	movw	r0, #34160	; 0x8570
   1cb34:	movt	r0, #2
   1cb38:	movw	r2, #2241	; 0x8c1
   1cb3c:	bl	12a64 <__assert_fail@plt>
   1cb40:	ldrdeq	r5, [r2], -ip
   1cb44:	andeq	r5, r2, r4, ror #13
   1cb48:	andeq	r5, r2, r0, lsr #23

0001cb4c <test_nested_buffer_using_nest@@Base>:
   1cb4c:	strd	r4, [sp, #-16]!
   1cb50:	mov	r4, r0
   1cb54:	str	r6, [sp, #8]
   1cb58:	str	lr, [sp, #12]
   1cb5c:	sub	sp, sp, #1040	; 0x410
   1cb60:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1cb64:	mov	r3, #0
   1cb68:	mov	r0, r4
   1cb6c:	mov	r2, r3
   1cb70:	movw	r1, #24784	; 0x60d0
   1cb74:	movt	r1, #2
   1cb78:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1cb7c:	cmp	r0, #0
   1cb80:	bne	1cb90 <test_nested_buffer_using_nest@@Base+0x44>
   1cb84:	mov	r1, #36	; 0x24
   1cb88:	mov	r0, r4
   1cb8c:	bl	206a8 <flatcc_builder_start_table@@Base>
   1cb90:	movw	r1, #34060	; 0x850c
   1cb94:	movt	r1, #2
   1cb98:	mov	r0, r4
   1cb9c:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1cba0:	subs	r5, r0, #0
   1cba4:	beq	1cbbc <test_nested_buffer_using_nest@@Base+0x70>
   1cba8:	mov	r1, #3
   1cbac:	mov	r0, r4
   1cbb0:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1cbb4:	cmp	r0, #0
   1cbb8:	strne	r5, [r0]
   1cbbc:	mov	r3, #2
   1cbc0:	mov	r1, #1
   1cbc4:	mov	r2, r3
   1cbc8:	mov	r0, r4
   1cbcc:	bl	22a20 <flatcc_builder_table_add@@Base>
   1cbd0:	cmp	r0, #0
   1cbd4:	mov	r2, #1
   1cbd8:	ldr	r1, [pc, #864]	; 1cf40 <test_nested_buffer_using_nest@@Base+0x3f4>
   1cbdc:	movne	r3, #42	; 0x2a
   1cbe0:	strhne	r3, [r0]
   1cbe4:	mov	r0, r4
   1cbe8:	bl	20f8c <flatcc_builder_check_required@@Base>
   1cbec:	cmp	r0, #0
   1cbf0:	beq	1cf20 <test_nested_buffer_using_nest@@Base+0x3d4>
   1cbf4:	mov	r0, r4
   1cbf8:	bl	21028 <flatcc_builder_end_table@@Base>
   1cbfc:	mov	r1, r0
   1cc00:	mov	r0, r4
   1cc04:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1cc08:	mov	r0, r4
   1cc0c:	bl	23374 <flatcc_builder_get_buffer_size@@Base>
   1cc10:	mov	r5, r0
   1cc14:	add	r1, sp, #16
   1cc18:	mov	r2, #1024	; 0x400
   1cc1c:	mov	r0, r4
   1cc20:	bl	23440 <flatcc_builder_copy_buffer@@Base>
   1cc24:	cmp	r0, #0
   1cc28:	beq	1cef0 <test_nested_buffer_using_nest@@Base+0x3a4>
   1cc2c:	mov	r0, r4
   1cc30:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1cc34:	mov	r3, #0
   1cc38:	movw	r1, #24784	; 0x60d0
   1cc3c:	movt	r1, #2
   1cc40:	mov	r2, r3
   1cc44:	mov	r0, r4
   1cc48:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1cc4c:	cmp	r0, #0
   1cc50:	bne	1cc60 <test_nested_buffer_using_nest@@Base+0x114>
   1cc54:	mov	r1, #36	; 0x24
   1cc58:	mov	r0, r4
   1cc5c:	bl	206a8 <flatcc_builder_start_table@@Base>
   1cc60:	mvn	ip, #0
   1cc64:	mov	r1, #8
   1cc68:	mov	r2, r5
   1cc6c:	mov	r3, #1
   1cc70:	mov	r0, r4
   1cc74:	stm	sp, {r1, ip}
   1cc78:	add	r1, sp, #16
   1cc7c:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1cc80:	subs	r5, r0, #0
   1cc84:	beq	1cc9c <test_nested_buffer_using_nest@@Base+0x150>
   1cc88:	mov	r1, #13
   1cc8c:	mov	r0, r4
   1cc90:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1cc94:	cmp	r0, #0
   1cc98:	strne	r5, [r0]
   1cc9c:	mov	r3, #2
   1cca0:	mov	r0, r4
   1cca4:	mov	r1, r3
   1cca8:	mov	r2, r3
   1ccac:	bl	22a20 <flatcc_builder_table_add@@Base>
   1ccb0:	cmp	r0, #0
   1ccb4:	movw	r1, #25080	; 0x61f8
   1ccb8:	movt	r1, #2
   1ccbc:	movne	r3, #10
   1ccc0:	strhne	r3, [r0]
   1ccc4:	mov	r0, r4
   1ccc8:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1cccc:	subs	r5, r0, #0
   1ccd0:	beq	1cce8 <test_nested_buffer_using_nest@@Base+0x19c>
   1ccd4:	mov	r1, #3
   1ccd8:	mov	r0, r4
   1ccdc:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1cce0:	cmp	r0, #0
   1cce4:	strne	r5, [r0]
   1cce8:	mov	r2, #1
   1ccec:	ldr	r1, [pc, #588]	; 1cf40 <test_nested_buffer_using_nest@@Base+0x3f4>
   1ccf0:	mov	r0, r4
   1ccf4:	bl	20f8c <flatcc_builder_check_required@@Base>
   1ccf8:	cmp	r0, #0
   1ccfc:	beq	1cf20 <test_nested_buffer_using_nest@@Base+0x3d4>
   1cd00:	mov	r0, r4
   1cd04:	bl	21028 <flatcc_builder_end_table@@Base>
   1cd08:	mov	r1, r0
   1cd0c:	mov	r0, r4
   1cd10:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1cd14:	add	r1, sp, #12
   1cd18:	mov	r0, r4
   1cd1c:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1cd20:	movw	r3, #41072	; 0xa070
   1cd24:	movt	r3, #3
   1cd28:	ldr	r2, [sp, #12]
   1cd2c:	mov	r4, r0
   1cd30:	mov	r1, r0
   1cd34:	movw	r0, #34248	; 0x85c8
   1cd38:	movt	r0, #2
   1cd3c:	ldr	r3, [r3]
   1cd40:	bl	12d28 <_start@@Base+0x118>
   1cd44:	cmp	r4, #0
   1cd48:	beq	1ce9c <test_nested_buffer_using_nest@@Base+0x350>
   1cd4c:	ldr	r2, [r4, #4]
   1cd50:	movw	r3, #20301	; 0x4f4d
   1cd54:	movt	r3, #21326	; 0x534e
   1cd58:	cmp	r2, r3
   1cd5c:	bne	1ce9c <test_nested_buffer_using_nest@@Base+0x350>
   1cd60:	ldr	r3, [r4]
   1cd64:	adds	r5, r4, r3
   1cd68:	beq	1ce9c <test_nested_buffer_using_nest@@Base+0x350>
   1cd6c:	ldr	r4, [r4, r3]
   1cd70:	sub	r4, r5, r4
   1cd74:	ldrh	r6, [r4]
   1cd78:	cmp	r6, #11
   1cd7c:	bls	1cf04 <test_nested_buffer_using_nest@@Base+0x3b8>
   1cd80:	ldrh	r0, [r4, #10]
   1cd84:	cmp	r0, #0
   1cd88:	beq	1cf04 <test_nested_buffer_using_nest@@Base+0x3b8>
   1cd8c:	ldr	r3, [r5, r0]
   1cd90:	add	r0, r5, r0
   1cd94:	movw	r1, #25080	; 0x61f8
   1cd98:	movt	r1, #2
   1cd9c:	add	r3, r3, #4
   1cda0:	add	r0, r0, r3
   1cda4:	bl	12968 <strcmp@plt>
   1cda8:	cmp	r0, #0
   1cdac:	bne	1ceb4 <test_nested_buffer_using_nest@@Base+0x368>
   1cdb0:	cmp	r6, #31
   1cdb4:	ldrh	r1, [r4, #8]
   1cdb8:	bls	1ce88 <test_nested_buffer_using_nest@@Base+0x33c>
   1cdbc:	ldrh	r3, [r4, #30]
   1cdc0:	cmp	r3, #0
   1cdc4:	beq	1ce88 <test_nested_buffer_using_nest@@Base+0x33c>
   1cdc8:	ldr	r0, [r5, r3]
   1cdcc:	add	r3, r5, r3
   1cdd0:	add	r0, r0, #4
   1cdd4:	adds	r2, r3, r0
   1cdd8:	beq	1ce88 <test_nested_buffer_using_nest@@Base+0x33c>
   1cddc:	ldr	lr, [r2, #4]
   1cde0:	movw	ip, #20301	; 0x4f4d
   1cde4:	movt	ip, #21326	; 0x534e
   1cde8:	cmp	lr, ip
   1cdec:	bne	1ce88 <test_nested_buffer_using_nest@@Base+0x33c>
   1cdf0:	ldr	r3, [r3, r0]
   1cdf4:	cmp	r1, #0
   1cdf8:	add	r6, r2, r3
   1cdfc:	beq	1cea0 <test_nested_buffer_using_nest@@Base+0x354>
   1ce00:	ldrsh	r1, [r5, r1]
   1ce04:	cmp	r1, #10
   1ce08:	bne	1cea0 <test_nested_buffer_using_nest@@Base+0x354>
   1ce0c:	cmp	r6, #0
   1ce10:	beq	1ce9c <test_nested_buffer_using_nest@@Base+0x350>
   1ce14:	ldr	r4, [r2, r3]
   1ce18:	sub	r4, r6, r4
   1ce1c:	ldrh	r3, [r4]
   1ce20:	cmp	r3, #11
   1ce24:	bls	1cf04 <test_nested_buffer_using_nest@@Base+0x3b8>
   1ce28:	ldrh	r0, [r4, #10]
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1cf04 <test_nested_buffer_using_nest@@Base+0x3b8>
   1ce34:	ldr	r3, [r6, r0]
   1ce38:	add	r0, r6, r0
   1ce3c:	add	r3, r3, #4
   1ce40:	adds	r0, r0, r3
   1ce44:	beq	1cf24 <test_nested_buffer_using_nest@@Base+0x3d8>
   1ce48:	movw	r1, #34060	; 0x850c
   1ce4c:	movt	r1, #2
   1ce50:	bl	12968 <strcmp@plt>
   1ce54:	cmp	r0, #0
   1ce58:	bne	1cec8 <test_nested_buffer_using_nest@@Base+0x37c>
   1ce5c:	ldrh	r3, [r4, #6]
   1ce60:	cmp	r3, #0
   1ce64:	beq	1cedc <test_nested_buffer_using_nest@@Base+0x390>
   1ce68:	ldrsh	r3, [r6, r3]
   1ce6c:	cmp	r3, #42	; 0x2a
   1ce70:	bne	1cedc <test_nested_buffer_using_nest@@Base+0x390>
   1ce74:	add	sp, sp, #1040	; 0x410
   1ce78:	ldrd	r4, [sp]
   1ce7c:	ldr	r6, [sp, #8]
   1ce80:	add	sp, sp, #12
   1ce84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce88:	cmp	r1, #0
   1ce8c:	beq	1cea0 <test_nested_buffer_using_nest@@Base+0x354>
   1ce90:	ldrsh	r3, [r5, r1]
   1ce94:	cmp	r3, #10
   1ce98:	bne	1cea0 <test_nested_buffer_using_nest@@Base+0x354>
   1ce9c:	bl	131b0 <_start@@Base+0x5a0>
   1cea0:	movw	r0, #34124	; 0x854c
   1cea4:	movt	r0, #2
   1cea8:	bl	129c8 <puts@plt>
   1ceac:	mvn	r0, #0
   1ceb0:	b	1ce74 <test_nested_buffer_using_nest@@Base+0x328>
   1ceb4:	movw	r0, #34096	; 0x8530
   1ceb8:	movt	r0, #2
   1cebc:	bl	129c8 <puts@plt>
   1cec0:	mvn	r0, #0
   1cec4:	b	1ce74 <test_nested_buffer_using_nest@@Base+0x328>
   1cec8:	movw	r0, #34188	; 0x858c
   1cecc:	movt	r0, #2
   1ced0:	bl	129c8 <puts@plt>
   1ced4:	mvn	r0, #0
   1ced8:	b	1ce74 <test_nested_buffer_using_nest@@Base+0x328>
   1cedc:	movw	r0, #34284	; 0x85ec
   1cee0:	movt	r0, #2
   1cee4:	bl	129c8 <puts@plt>
   1cee8:	mvn	r0, #0
   1ceec:	b	1ce74 <test_nested_buffer_using_nest@@Base+0x328>
   1cef0:	movw	r0, #34220	; 0x85ac
   1cef4:	movt	r0, #2
   1cef8:	bl	129c8 <puts@plt>
   1cefc:	mvn	r0, #0
   1cf00:	b	1ce74 <test_nested_buffer_using_nest@@Base+0x328>
   1cf04:	movw	r1, #23600	; 0x5c30
   1cf08:	movt	r1, #2
   1cf0c:	ldr	r3, [pc, #48]	; 1cf44 <test_nested_buffer_using_nest@@Base+0x3f8>
   1cf10:	movw	r0, #23900	; 0x5d5c
   1cf14:	movt	r0, #2
   1cf18:	movw	r2, #699	; 0x2bb
   1cf1c:	bl	12a64 <__assert_fail@plt>
   1cf20:	bl	134a0 <_start@@Base+0x890>
   1cf24:	movw	r1, #26688	; 0x6840
   1cf28:	movt	r1, #2
   1cf2c:	ldr	r3, [pc, #20]	; 1cf48 <test_nested_buffer_using_nest@@Base+0x3fc>
   1cf30:	movw	r0, #34160	; 0x8570
   1cf34:	movt	r0, #2
   1cf38:	movw	r2, #2298	; 0x8fa
   1cf3c:	bl	12a64 <__assert_fail@plt>
   1cf40:	ldrdeq	r5, [r2], -ip
   1cf44:	andeq	r5, r2, r4, ror #13
   1cf48:			; <UNDEFINED> instruction: 0x00025bbc

0001cf4c <verify_include@@Base>:
   1cf4c:	mov	r0, #0
   1cf50:	bx	lr

0001cf54 <test_struct_buffer@@Base>:
   1cf54:	str	r4, [sp, #-16]!
   1cf58:	mov	r4, r0
   1cf5c:	strd	r6, [sp, #4]
   1cf60:	str	lr, [sp, #12]
   1cf64:	sub	sp, sp, #112	; 0x70
   1cf68:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1cf6c:	mov	r0, r4
   1cf70:	mov	r2, #16
   1cf74:	mov	r1, #32
   1cf78:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1cf7c:	subs	r3, r0, #0
   1cf80:	beq	1cfd8 <test_struct_buffer@@Base+0x84>
   1cf84:	mov	r2, #8
   1cf88:	mov	ip, #1065353216	; 0x3f800000
   1cf8c:	movw	lr, #2730	; 0xaaa
   1cf90:	mov	r0, #1073741824	; 0x40000000
   1cf94:	mvn	r1, #16
   1cf98:	movw	r6, #52429	; 0xcccd
   1cf9c:	movt	r6, #52428	; 0xcccc
   1cfa0:	movw	r7, #52428	; 0xcccc
   1cfa4:	movt	r7, #16400	; 0x4010
   1cfa8:	str	ip, [r3]
   1cfac:	strb	r2, [r3, #24]
   1cfb0:	mov	r2, #0
   1cfb4:	movt	r2, #16448	; 0x4040
   1cfb8:	str	r0, [r3, #4]
   1cfbc:	mov	r0, r4
   1cfc0:	str	r2, [r3, #8]
   1cfc4:	strd	r6, [r3, #16]
   1cfc8:	strh	lr, [r3, #26]
   1cfcc:	strb	r1, [r3, #28]
   1cfd0:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1cfd4:	mov	r3, r0
   1cfd8:	mov	r0, #0
   1cfdc:	mov	r1, #16
   1cfe0:	mov	r2, r0
   1cfe4:	str	r1, [sp]
   1cfe8:	movw	r1, #24784	; 0x60d0
   1cfec:	movt	r1, #2
   1cff0:	str	r0, [sp, #4]
   1cff4:	mov	r0, r4
   1cff8:	bl	1e7bc <flatcc_builder_create_buffer@@Base>
   1cffc:	mov	r0, r4
   1d000:	bl	23374 <flatcc_builder_get_buffer_size@@Base>
   1d004:	cmp	r0, #48	; 0x30
   1d008:	bne	1d164 <test_struct_buffer@@Base+0x210>
   1d00c:	mov	r1, r0
   1d010:	movw	r0, #34332	; 0x861c
   1d014:	movt	r0, #2
   1d018:	bl	12974 <printf@plt>
   1d01c:	mov	r0, r4
   1d020:	bl	2365c <flatcc_builder_get_emit_context@@Base>
   1d024:	ldr	r3, [r0, #24]
   1d028:	cmp	r3, #48	; 0x30
   1d02c:	bne	1d148 <test_struct_buffer@@Base+0x1f4>
   1d030:	mov	r0, r4
   1d034:	add	r1, sp, #12
   1d038:	mov	r2, #100	; 0x64
   1d03c:	bl	23440 <flatcc_builder_copy_buffer@@Base>
   1d040:	cmp	r0, #0
   1d044:	beq	1d134 <test_struct_buffer@@Base+0x1e0>
   1d048:	movw	r3, #41072	; 0xa070
   1d04c:	movt	r3, #3
   1d050:	movw	r0, #34452	; 0x8694
   1d054:	movt	r0, #2
   1d058:	ldr	r2, [r3]
   1d05c:	add	r1, sp, #12
   1d060:	bl	141b0 <_start@@Base+0x15a0>
   1d064:	ldr	r2, [sp, #16]
   1d068:	movw	r3, #20301	; 0x4f4d
   1d06c:	movt	r3, #21326	; 0x534e
   1d070:	cmp	r2, r3
   1d074:	beq	1d09c <test_struct_buffer@@Base+0x148>
   1d078:	movw	r0, #34472	; 0x86a8
   1d07c:	movt	r0, #2
   1d080:	bl	129c8 <puts@plt>
   1d084:	mvn	r0, #0
   1d088:	add	sp, sp, #112	; 0x70
   1d08c:	ldr	r4, [sp]
   1d090:	ldrd	r6, [sp, #4]
   1d094:	add	sp, sp, #12
   1d098:	pop	{pc}		; (ldr pc, [sp], #4)
   1d09c:	ldr	r3, [sp, #12]
   1d0a0:	add	r2, sp, #12
   1d0a4:	vldr	s15, [pc, #220]	; 1d188 <test_struct_buffer@@Base+0x234>
   1d0a8:	add	r3, r2, r3
   1d0ac:	vldr	s14, [r3]
   1d0b0:	vcmp.f32	s14, s15
   1d0b4:	vmrs	APSR_nzcv, fpscr
   1d0b8:	bne	1d120 <test_struct_buffer@@Base+0x1cc>
   1d0bc:	vldr	s15, [pc, #200]	; 1d18c <test_struct_buffer@@Base+0x238>
   1d0c0:	vldr	s14, [r3, #4]
   1d0c4:	vcmp.f32	s14, s15
   1d0c8:	vmrs	APSR_nzcv, fpscr
   1d0cc:	bne	1d120 <test_struct_buffer@@Base+0x1cc>
   1d0d0:	vldr	s15, [pc, #184]	; 1d190 <test_struct_buffer@@Base+0x23c>
   1d0d4:	vldr	s14, [r3, #8]
   1d0d8:	vcmp.f32	s14, s15
   1d0dc:	vmrs	APSR_nzcv, fpscr
   1d0e0:	bne	1d120 <test_struct_buffer@@Base+0x1cc>
   1d0e4:	vldr	d7, [pc, #148]	; 1d180 <test_struct_buffer@@Base+0x22c>
   1d0e8:	vldr	d6, [r3, #16]
   1d0ec:	vcmp.f64	d6, d7
   1d0f0:	vmrs	APSR_nzcv, fpscr
   1d0f4:	bne	1d120 <test_struct_buffer@@Base+0x1cc>
   1d0f8:	ldr	r2, [r3, #24]
   1d0fc:	mov	r1, #8
   1d100:	movt	r1, #2730	; 0xaaa
   1d104:	bic	r2, r2, #65280	; 0xff00
   1d108:	cmp	r2, r1
   1d10c:	bne	1d120 <test_struct_buffer@@Base+0x1cc>
   1d110:	ldrsb	r3, [r3, #28]
   1d114:	cmn	r3, #17
   1d118:	moveq	r0, #0
   1d11c:	beq	1d088 <test_struct_buffer@@Base+0x134>
   1d120:	movw	r0, #34508	; 0x86cc
   1d124:	movt	r0, #2
   1d128:	bl	129c8 <puts@plt>
   1d12c:	mvn	r0, #0
   1d130:	b	1d088 <test_struct_buffer@@Base+0x134>
   1d134:	movw	r0, #34440	; 0x8688
   1d138:	movt	r0, #2
   1d13c:	bl	129c8 <puts@plt>
   1d140:	mvn	r0, #0
   1d144:	b	1d088 <test_struct_buffer@@Base+0x134>
   1d148:	movw	r1, #26688	; 0x6840
   1d14c:	movt	r1, #2
   1d150:	ldr	r3, [pc, #60]	; 1d194 <test_struct_buffer@@Base+0x240>
   1d154:	movw	r0, #34364	; 0x863c
   1d158:	movt	r0, #2
   1d15c:	movw	r2, #2341	; 0x925
   1d160:	bl	12a64 <__assert_fail@plt>
   1d164:	movw	r1, #26688	; 0x6840
   1d168:	movt	r1, #2
   1d16c:	ldr	r3, [pc, #32]	; 1d194 <test_struct_buffer@@Base+0x240>
   1d170:	movw	r0, #34320	; 0x8610
   1d174:	movt	r0, #2
   1d178:	movw	r2, #2339	; 0x923
   1d17c:	bl	12a64 <__assert_fail@plt>
   1d180:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d184:	andsmi	ip, r0, ip, asr #25
   1d188:	svccc	0x00800000
   1d18c:	andmi	r0, r0, r0
   1d190:	submi	r0, r0, r0
   1d194:	ldrdeq	r5, [r2], -ip

0001d198 <test_typed_struct_buffer@@Base>:
   1d198:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d19c:	mov	r4, r0
   1d1a0:	strd	r6, [sp, #8]
   1d1a4:	str	lr, [sp, #16]
   1d1a8:	sub	sp, sp, #116	; 0x74
   1d1ac:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1d1b0:	mov	r0, r4
   1d1b4:	mov	r2, #16
   1d1b8:	mov	r1, #32
   1d1bc:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1d1c0:	subs	r3, r0, #0
   1d1c4:	beq	1d21c <test_typed_struct_buffer@@Base+0x84>
   1d1c8:	mov	r2, #8
   1d1cc:	mov	ip, #1065353216	; 0x3f800000
   1d1d0:	movw	lr, #2730	; 0xaaa
   1d1d4:	mov	r0, #1073741824	; 0x40000000
   1d1d8:	mvn	r1, #16
   1d1dc:	movw	r6, #52429	; 0xcccd
   1d1e0:	movt	r6, #52428	; 0xcccc
   1d1e4:	movw	r7, #52428	; 0xcccc
   1d1e8:	movt	r7, #16400	; 0x4010
   1d1ec:	str	ip, [r3]
   1d1f0:	strb	r2, [r3, #24]
   1d1f4:	mov	r2, #0
   1d1f8:	movt	r2, #16448	; 0x4040
   1d1fc:	str	r0, [r3, #4]
   1d200:	mov	r0, r4
   1d204:	str	r2, [r3, #8]
   1d208:	strd	r6, [r3, #16]
   1d20c:	strh	lr, [r3, #26]
   1d210:	strb	r1, [r3, #28]
   1d214:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1d218:	mov	r3, r0
   1d21c:	mov	r0, #0
   1d220:	mov	r6, #16
   1d224:	mov	r2, r0
   1d228:	movw	r1, #34532	; 0x86e4
   1d22c:	movt	r1, #2
   1d230:	str	r6, [sp]
   1d234:	str	r0, [sp, #4]
   1d238:	mov	r0, r4
   1d23c:	bl	1e7bc <flatcc_builder_create_buffer@@Base>
   1d240:	mov	r0, r4
   1d244:	bl	23374 <flatcc_builder_get_buffer_size@@Base>
   1d248:	cmp	r0, #48	; 0x30
   1d24c:	bne	1d44c <test_typed_struct_buffer@@Base+0x2b4>
   1d250:	mov	r1, r0
   1d254:	movw	r0, #34332	; 0x861c
   1d258:	movt	r0, #2
   1d25c:	bl	12974 <printf@plt>
   1d260:	mov	r0, r4
   1d264:	bl	2365c <flatcc_builder_get_emit_context@@Base>
   1d268:	ldr	r7, [r0, #24]
   1d26c:	cmp	r7, #48	; 0x30
   1d270:	bne	1d430 <test_typed_struct_buffer@@Base+0x298>
   1d274:	add	r5, sp, #12
   1d278:	mov	r0, r4
   1d27c:	mov	r1, r5
   1d280:	mov	r2, #100	; 0x64
   1d284:	bl	23440 <flatcc_builder_copy_buffer@@Base>
   1d288:	cmp	r0, #0
   1d28c:	beq	1d3e0 <test_typed_struct_buffer@@Base+0x248>
   1d290:	movw	r3, #41072	; 0xa070
   1d294:	movt	r3, #3
   1d298:	movw	r0, #34540	; 0x86ec
   1d29c:	movt	r0, #2
   1d2a0:	ldr	r2, [r3]
   1d2a4:	mov	r1, r5
   1d2a8:	bl	141b0 <_start@@Base+0x15a0>
   1d2ac:	ldr	r4, [sp, #16]
   1d2b0:	movw	r3, #16082	; 0x3ed2
   1d2b4:	movt	r3, #43253	; 0xa8f5
   1d2b8:	cmp	r4, r3
   1d2bc:	beq	1d2e4 <test_typed_struct_buffer@@Base+0x14c>
   1d2c0:	movw	r0, #34472	; 0x86a8
   1d2c4:	movt	r0, #2
   1d2c8:	bl	129c8 <puts@plt>
   1d2cc:	mvn	r0, #0
   1d2d0:	add	sp, sp, #116	; 0x74
   1d2d4:	ldrd	r4, [sp]
   1d2d8:	ldrd	r6, [sp, #8]
   1d2dc:	add	sp, sp, #16
   1d2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2e4:	ldr	r3, [sp, #12]
   1d2e8:	cmn	r5, r3
   1d2ec:	beq	1d408 <test_typed_struct_buffer@@Base+0x270>
   1d2f0:	mov	r3, #32
   1d2f4:	mov	r2, r4
   1d2f8:	str	r6, [sp]
   1d2fc:	mov	r1, r7
   1d300:	mov	r0, r5
   1d304:	bl	248fc <flatcc_verify_struct_as_typed_root@@Base>
   1d308:	cmp	r0, #0
   1d30c:	bne	1d3f4 <test_typed_struct_buffer@@Base+0x25c>
   1d310:	ldr	r2, [sp, #16]
   1d314:	cmp	r2, r4
   1d318:	beq	1d330 <test_typed_struct_buffer@@Base+0x198>
   1d31c:	movw	r0, #34644	; 0x8754
   1d320:	movt	r0, #2
   1d324:	bl	129c8 <puts@plt>
   1d328:	mvn	r0, #0
   1d32c:	b	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d330:	ldr	r4, [sp, #12]
   1d334:	adds	r4, r5, r4
   1d338:	beq	1d31c <test_typed_struct_buffer@@Base+0x184>
   1d33c:	mov	r1, r7
   1d340:	mov	r0, r5
   1d344:	str	r6, [sp]
   1d348:	mov	r3, #32
   1d34c:	bl	248fc <flatcc_verify_struct_as_typed_root@@Base>
   1d350:	cmp	r0, #0
   1d354:	bne	1d41c <test_typed_struct_buffer@@Base+0x284>
   1d358:	vldr	s15, [pc, #272]	; 1d470 <test_typed_struct_buffer@@Base+0x2d8>
   1d35c:	vldr	s14, [r4]
   1d360:	vcmp.f32	s14, s15
   1d364:	vmrs	APSR_nzcv, fpscr
   1d368:	bne	1d3cc <test_typed_struct_buffer@@Base+0x234>
   1d36c:	vldr	s15, [pc, #256]	; 1d474 <test_typed_struct_buffer@@Base+0x2dc>
   1d370:	vldr	s14, [r4, #4]
   1d374:	vcmp.f32	s14, s15
   1d378:	vmrs	APSR_nzcv, fpscr
   1d37c:	bne	1d3cc <test_typed_struct_buffer@@Base+0x234>
   1d380:	vldr	s15, [pc, #240]	; 1d478 <test_typed_struct_buffer@@Base+0x2e0>
   1d384:	vldr	s14, [r4, #8]
   1d388:	vcmp.f32	s14, s15
   1d38c:	vmrs	APSR_nzcv, fpscr
   1d390:	bne	1d3cc <test_typed_struct_buffer@@Base+0x234>
   1d394:	vldr	d7, [pc, #204]	; 1d468 <test_typed_struct_buffer@@Base+0x2d0>
   1d398:	vldr	d6, [r4, #16]
   1d39c:	vcmp.f64	d6, d7
   1d3a0:	vmrs	APSR_nzcv, fpscr
   1d3a4:	bne	1d3cc <test_typed_struct_buffer@@Base+0x234>
   1d3a8:	ldr	r3, [r4, #24]
   1d3ac:	mov	r2, #8
   1d3b0:	movt	r2, #2730	; 0xaaa
   1d3b4:	bic	r3, r3, #65280	; 0xff00
   1d3b8:	cmp	r3, r2
   1d3bc:	bne	1d3cc <test_typed_struct_buffer@@Base+0x234>
   1d3c0:	ldrsb	r3, [r4, #28]
   1d3c4:	cmn	r3, #17
   1d3c8:	beq	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d3cc:	movw	r0, #34508	; 0x86cc
   1d3d0:	movt	r0, #2
   1d3d4:	bl	129c8 <puts@plt>
   1d3d8:	mvn	r0, #0
   1d3dc:	b	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d3e0:	movw	r0, #34440	; 0x8688
   1d3e4:	movt	r0, #2
   1d3e8:	bl	129c8 <puts@plt>
   1d3ec:	mvn	r0, #0
   1d3f0:	b	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d3f4:	movw	r0, #34608	; 0x8730
   1d3f8:	movt	r0, #2
   1d3fc:	bl	129c8 <puts@plt>
   1d400:	mvn	r0, #0
   1d404:	b	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d408:	movw	r0, #34568	; 0x8708
   1d40c:	movt	r0, #2
   1d410:	bl	129c8 <puts@plt>
   1d414:	mvn	r0, #0
   1d418:	b	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d41c:	movw	r0, #34676	; 0x8774
   1d420:	movt	r0, #2
   1d424:	bl	129c8 <puts@plt>
   1d428:	mvn	r0, #0
   1d42c:	b	1d2d0 <test_typed_struct_buffer@@Base+0x138>
   1d430:	movw	r1, #26688	; 0x6840
   1d434:	movt	r1, #2
   1d438:	ldr	r3, [pc, #60]	; 1d47c <test_typed_struct_buffer@@Base+0x2e4>
   1d43c:	movw	r0, #34364	; 0x863c
   1d440:	movt	r0, #2
   1d444:	movw	r2, #2390	; 0x956
   1d448:	bl	12a64 <__assert_fail@plt>
   1d44c:	movw	r1, #26688	; 0x6840
   1d450:	movt	r1, #2
   1d454:	ldr	r3, [pc, #32]	; 1d47c <test_typed_struct_buffer@@Base+0x2e4>
   1d458:	movw	r0, #34320	; 0x8610
   1d45c:	movt	r0, #2
   1d460:	movw	r2, #2388	; 0x954
   1d464:	bl	12a64 <__assert_fail@plt>
   1d468:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d46c:	andsmi	ip, r0, ip, asr #25
   1d470:	svccc	0x00800000
   1d474:	andmi	r0, r0, r0
   1d478:	submi	r0, r0, r0
   1d47c:	strdeq	r5, [r2], -r0

0001d480 <gen_monster_benchmark@@Base>:
   1d480:	ldr	r2, [pc, #564]	; 1d6bc <gen_monster_benchmark@@Base+0x23c>
   1d484:	movw	r1, #1292	; 0x50c
   1d488:	movw	r3, #21692	; 0x54bc
   1d48c:	movt	r3, #2
   1d490:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d494:	mov	r4, r0
   1d498:	strd	r6, [sp, #8]
   1d49c:	ldrd	r6, [r3, r1]
   1d4a0:	str	lr, [sp, #16]
   1d4a4:	sub	sp, sp, #28
   1d4a8:	ldrh	r3, [r2, #8]
   1d4ac:	strd	r6, [sp, #12]
   1d4b0:	strh	r3, [sp, #20]
   1d4b4:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1d4b8:	mov	r3, #0
   1d4bc:	mov	r0, r4
   1d4c0:	mov	r2, r3
   1d4c4:	movw	r1, #24784	; 0x60d0
   1d4c8:	movt	r1, #2
   1d4cc:	bl	1ebbc <flatcc_builder_start_buffer@@Base>
   1d4d0:	cmp	r0, #0
   1d4d4:	bne	1d4e4 <gen_monster_benchmark@@Base+0x64>
   1d4d8:	mov	r1, #36	; 0x24
   1d4dc:	mov	r0, r4
   1d4e0:	bl	206a8 <flatcc_builder_start_table@@Base>
   1d4e4:	mov	r3, #2
   1d4e8:	mov	r0, r4
   1d4ec:	mov	r2, r3
   1d4f0:	mov	r1, r3
   1d4f4:	bl	22a20 <flatcc_builder_table_add@@Base>
   1d4f8:	cmp	r0, #0
   1d4fc:	mov	r2, #32
   1d500:	movne	r3, #80	; 0x50
   1d504:	mov	r1, #0
   1d508:	strhne	r3, [r0]
   1d50c:	mov	r3, #16
   1d510:	mov	r0, r4
   1d514:	bl	22a20 <flatcc_builder_table_add@@Base>
   1d518:	mov	r3, r0
   1d51c:	mov	lr, #1065353216	; 0x3f800000
   1d520:	mov	ip, #1073741824	; 0x40000000
   1d524:	movw	r2, #52429	; 0xcccd
   1d528:	movt	r2, #49228	; 0xc04c
   1d52c:	movw	r1, #25080	; 0x61f8
   1d530:	movt	r1, #2
   1d534:	mov	r0, r4
   1d538:	str	lr, [r3]
   1d53c:	str	ip, [r3, #4]
   1d540:	str	r2, [r3, #8]
   1d544:	bl	22630 <flatcc_builder_create_string_str@@Base>
   1d548:	subs	r5, r0, #0
   1d54c:	beq	1d564 <gen_monster_benchmark@@Base+0xe4>
   1d550:	mov	r1, #3
   1d554:	mov	r0, r4
   1d558:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1d55c:	cmp	r0, #0
   1d560:	strne	r5, [r0]
   1d564:	mov	r2, #1
   1d568:	mvn	ip, #0
   1d56c:	mov	r3, r2
   1d570:	add	r1, sp, #12
   1d574:	mov	r0, r4
   1d578:	stm	sp, {r2, ip}
   1d57c:	mov	r2, #10
   1d580:	bl	211e8 <flatcc_builder_create_vector@@Base>
   1d584:	subs	r5, r0, #0
   1d588:	beq	1d5a0 <gen_monster_benchmark@@Base+0x120>
   1d58c:	mov	r1, #5
   1d590:	mov	r0, r4
   1d594:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1d598:	cmp	r0, #0
   1d59c:	strne	r5, [r0]
   1d5a0:	mvn	r3, #-1073741824	; 0xc0000000
   1d5a4:	mov	r2, #2
   1d5a8:	mov	r1, #4
   1d5ac:	mov	r0, r4
   1d5b0:	bl	1ff10 <flatcc_builder_start_vector@@Base>
   1d5b4:	mov	r1, #1
   1d5b8:	mov	r0, r4
   1d5bc:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   1d5c0:	mov	r3, r0
   1d5c4:	mov	r2, #32
   1d5c8:	mov	r0, #16
   1d5cc:	mov	r1, #2
   1d5d0:	strh	r0, [r3]
   1d5d4:	mov	r0, r4
   1d5d8:	strb	r2, [r3, #2]
   1d5dc:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   1d5e0:	mov	r3, r0
   1d5e4:	mov	r1, #48	; 0x30
   1d5e8:	mov	r0, #64	; 0x40
   1d5ec:	mov	ip, #80	; 0x50
   1d5f0:	mov	r2, #96	; 0x60
   1d5f4:	strh	r1, [r3]
   1d5f8:	mov	r1, #1
   1d5fc:	strb	r0, [r3, #2]
   1d600:	mov	r0, r4
   1d604:	strh	ip, [r3, #4]
   1d608:	strb	r2, [r3, #6]
   1d60c:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   1d610:	cmp	r0, #0
   1d614:	beq	1d628 <gen_monster_benchmark@@Base+0x1a8>
   1d618:	mov	r2, #112	; 0x70
   1d61c:	mvn	r3, #127	; 0x7f
   1d620:	strh	r2, [r0]
   1d624:	strb	r3, [r0, #2]
   1d628:	mvn	r3, #110	; 0x6e
   1d62c:	movw	r2, #401	; 0x191
   1d630:	mov	r1, #1
   1d634:	mov	r0, r4
   1d638:	strh	r2, [sp, #8]
   1d63c:	strb	r3, [sp, #10]
   1d640:	bl	1f26c <flatcc_builder_extend_vector@@Base>
   1d644:	cmp	r0, #0
   1d648:	ldrne	r3, [sp, #8]
   1d64c:	strne	r3, [r0]
   1d650:	mov	r0, r4
   1d654:	bl	21344 <flatcc_builder_end_vector@@Base>
   1d658:	subs	r5, r0, #0
   1d65c:	beq	1d674 <gen_monster_benchmark@@Base+0x1f4>
   1d660:	mov	r1, #9
   1d664:	mov	r0, r4
   1d668:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   1d66c:	cmp	r0, #0
   1d670:	strne	r5, [r0]
   1d674:	mov	r2, #1
   1d678:	ldr	r1, [pc, #64]	; 1d6c0 <gen_monster_benchmark@@Base+0x240>
   1d67c:	mov	r0, r4
   1d680:	bl	20f8c <flatcc_builder_check_required@@Base>
   1d684:	cmp	r0, #0
   1d688:	beq	1d6b8 <gen_monster_benchmark@@Base+0x238>
   1d68c:	mov	r0, r4
   1d690:	bl	21028 <flatcc_builder_end_table@@Base>
   1d694:	mov	r1, r0
   1d698:	mov	r0, r4
   1d69c:	bl	1ed68 <flatcc_builder_end_buffer@@Base>
   1d6a0:	mov	r0, #0
   1d6a4:	add	sp, sp, #28
   1d6a8:	ldrd	r4, [sp]
   1d6ac:	ldrd	r6, [sp, #8]
   1d6b0:	add	sp, sp, #16
   1d6b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6b8:	bl	134a0 <_start@@Base+0x890>
   1d6bc:	andeq	r5, r2, r8, asr #19
   1d6c0:	ldrdeq	r5, [r2], -ip

0001d6c4 <time_monster@@Base>:
   1d6c4:	strd	r4, [sp, #-16]!
   1d6c8:	mov	r5, r0
   1d6cc:	movw	r0, #34716	; 0x879c
   1d6d0:	movt	r0, #2
   1d6d4:	str	r6, [sp, #8]
   1d6d8:	movw	r6, #41080	; 0xa078
   1d6dc:	movt	r6, #3
   1d6e0:	str	lr, [sp, #12]
   1d6e4:	vpush	{d8}
   1d6e8:	sub	sp, sp, #8
   1d6ec:	bl	129c8 <puts@plt>
   1d6f0:	mov	r0, sp
   1d6f4:	mov	r1, #0
   1d6f8:	bl	129bc <gettimeofday@plt>
   1d6fc:	ldr	r2, [r6]
   1d700:	cmp	r2, #0
   1d704:	bne	1d71c <time_monster@@Base+0x58>
   1d708:	ldr	r3, [sp]
   1d70c:	ldr	r1, [sp, #4]
   1d710:	mov	r2, r3
   1d714:	str	r3, [r6]
   1d718:	str	r1, [r6, #4]
   1d71c:	ldr	r1, [r6, #4]
   1d720:	movw	r4, #16960	; 0x4240
   1d724:	movt	r4, #15
   1d728:	ldr	r3, [sp, #4]
   1d72c:	vldr	d5, [pc, #204]	; 1d800 <time_monster@@Base+0x13c>
   1d730:	sub	r3, r3, r1
   1d734:	vmov	s12, r3
   1d738:	ldr	r3, [sp]
   1d73c:	sub	r3, r3, r2
   1d740:	vmov	s15, r3
   1d744:	vcvt.f64.s32	d6, s12
   1d748:	vdiv.f64	d8, d6, d5
   1d74c:	vcvt.f64.s32	d7, s15
   1d750:	vadd.f64	d8, d8, d7
   1d754:	mov	r0, r5
   1d758:	bl	1d480 <gen_monster_benchmark@@Base>
   1d75c:	subs	r4, r4, #1
   1d760:	bne	1d754 <time_monster@@Base+0x90>
   1d764:	mov	r0, r5
   1d768:	bl	23374 <flatcc_builder_get_buffer_size@@Base>
   1d76c:	mov	r5, r0
   1d770:	mov	r1, r4
   1d774:	mov	r0, sp
   1d778:	bl	129bc <gettimeofday@plt>
   1d77c:	ldr	ip, [r6]
   1d780:	cmp	ip, #0
   1d784:	bne	1d79c <time_monster@@Base+0xd8>
   1d788:	ldr	r3, [sp]
   1d78c:	ldr	r2, [sp, #4]
   1d790:	mov	ip, r3
   1d794:	str	r3, [r6]
   1d798:	str	r2, [r6, #4]
   1d79c:	ldr	lr, [r6, #4]
   1d7a0:	vmov.f64	d0, d8
   1d7a4:	mov	r1, r5
   1d7a8:	movw	r0, #34736	; 0x87b0
   1d7ac:	movt	r0, #2
   1d7b0:	vldr	d5, [pc, #72]	; 1d800 <time_monster@@Base+0x13c>
   1d7b4:	ldr	r2, [sp, #4]
   1d7b8:	ldr	r3, [sp]
   1d7bc:	sub	r2, r2, lr
   1d7c0:	vmov	s15, r2
   1d7c4:	sub	r3, r3, ip
   1d7c8:	vcvt.f64.s32	d6, s15
   1d7cc:	vmov	s15, r3
   1d7d0:	vdiv.f64	d1, d6, d5
   1d7d4:	vcvt.f64.s32	d7, s15
   1d7d8:	vadd.f64	d1, d1, d7
   1d7dc:	bl	14018 <_start@@Base+0x1408>
   1d7e0:	mov	r0, #0
   1d7e4:	add	sp, sp, #8
   1d7e8:	vpop	{d8}
   1d7ec:	ldrd	r4, [sp]
   1d7f0:	ldr	r6, [sp, #8]
   1d7f4:	add	sp, sp, #12
   1d7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7fc:	nop	{0}
   1d800:	andeq	r0, r0, r0
   1d804:	smlawbmi	lr, r0, r4, r8

0001d808 <gen_struct_buffer_benchmark@@Base>:
   1d808:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d80c:	mov	r4, r0
   1d810:	strd	r6, [sp, #8]
   1d814:	str	lr, [sp, #16]
   1d818:	sub	sp, sp, #12
   1d81c:	bl	1e2e0 <flatcc_builder_reset@@Base>
   1d820:	mov	r0, r4
   1d824:	mov	r2, #16
   1d828:	mov	r1, #32
   1d82c:	bl	1eea8 <flatcc_builder_start_struct@@Base>
   1d830:	subs	r3, r0, #0
   1d834:	beq	1d88c <gen_struct_buffer_benchmark@@Base+0x84>
   1d838:	mov	r2, #8
   1d83c:	mov	ip, #1065353216	; 0x3f800000
   1d840:	movw	lr, #2730	; 0xaaa
   1d844:	mov	r0, #1073741824	; 0x40000000
   1d848:	mvn	r1, #16
   1d84c:	movw	r6, #52429	; 0xcccd
   1d850:	movt	r6, #52428	; 0xcccc
   1d854:	movw	r7, #52428	; 0xcccc
   1d858:	movt	r7, #16400	; 0x4010
   1d85c:	str	ip, [r3]
   1d860:	strb	r2, [r3, #24]
   1d864:	mov	r2, #0
   1d868:	movt	r2, #16448	; 0x4040
   1d86c:	str	r0, [r3, #4]
   1d870:	mov	r0, r4
   1d874:	str	r2, [r3, #8]
   1d878:	strd	r6, [r3, #16]
   1d87c:	strh	lr, [r3, #26]
   1d880:	strb	r1, [r3, #28]
   1d884:	bl	1f07c <flatcc_builder_end_struct@@Base>
   1d888:	mov	r3, r0
   1d88c:	mov	r5, #0
   1d890:	mov	r0, #16
   1d894:	mov	r2, r5
   1d898:	movw	r1, #24784	; 0x60d0
   1d89c:	movt	r1, #2
   1d8a0:	stm	sp, {r0, r5}
   1d8a4:	mov	r0, r4
   1d8a8:	bl	1e7bc <flatcc_builder_create_buffer@@Base>
   1d8ac:	mov	r1, r5
   1d8b0:	mov	r0, r4
   1d8b4:	bl	233fc <flatcc_builder_get_direct_buffer@@Base>
   1d8b8:	cmp	r0, #0
   1d8bc:	beq	1d950 <gen_struct_buffer_benchmark@@Base+0x148>
   1d8c0:	ldr	r3, [r0]
   1d8c4:	vldr	s15, [pc, #148]	; 1d960 <gen_struct_buffer_benchmark@@Base+0x158>
   1d8c8:	add	r0, r0, r3
   1d8cc:	vldr	s14, [r0]
   1d8d0:	vcmp.f32	s14, s15
   1d8d4:	vmrs	APSR_nzcv, fpscr
   1d8d8:	bne	1d950 <gen_struct_buffer_benchmark@@Base+0x148>
   1d8dc:	vldr	s15, [pc, #128]	; 1d964 <gen_struct_buffer_benchmark@@Base+0x15c>
   1d8e0:	vldr	s14, [r0, #4]
   1d8e4:	vcmp.f32	s14, s15
   1d8e8:	vmrs	APSR_nzcv, fpscr
   1d8ec:	bne	1d950 <gen_struct_buffer_benchmark@@Base+0x148>
   1d8f0:	vldr	s15, [pc, #112]	; 1d968 <gen_struct_buffer_benchmark@@Base+0x160>
   1d8f4:	vldr	s14, [r0, #8]
   1d8f8:	vcmp.f32	s14, s15
   1d8fc:	vmrs	APSR_nzcv, fpscr
   1d900:	bne	1d950 <gen_struct_buffer_benchmark@@Base+0x148>
   1d904:	vldr	d7, [pc, #76]	; 1d958 <gen_struct_buffer_benchmark@@Base+0x150>
   1d908:	vldr	d6, [r0, #16]
   1d90c:	vcmp.f64	d6, d7
   1d910:	vmrs	APSR_nzcv, fpscr
   1d914:	bne	1d950 <gen_struct_buffer_benchmark@@Base+0x148>
   1d918:	ldr	r3, [r0, #24]
   1d91c:	mov	r2, #8
   1d920:	movt	r2, #2730	; 0xaaa
   1d924:	bic	r3, r3, #65280	; 0xff00
   1d928:	cmp	r3, r2
   1d92c:	bne	1d950 <gen_struct_buffer_benchmark@@Base+0x148>
   1d930:	ldrb	r0, [r0, #28]
   1d934:	subs	r0, r0, #239	; 0xef
   1d938:	mvnne	r0, #0
   1d93c:	add	sp, sp, #12
   1d940:	ldrd	r4, [sp]
   1d944:	ldrd	r6, [sp, #8]
   1d948:	add	sp, sp, #16
   1d94c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d950:	mvn	r0, #0
   1d954:	b	1d93c <gen_struct_buffer_benchmark@@Base+0x134>
   1d958:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d95c:	andsmi	ip, r0, ip, asr #25
   1d960:	svccc	0x00800000
   1d964:	andmi	r0, r0, r0
   1d968:	submi	r0, r0, r0

0001d96c <time_struct_buffer@@Base>:
   1d96c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d970:	strd	r6, [sp, #8]
   1d974:	mov	r6, r0
   1d978:	movw	r0, #34716	; 0x879c
   1d97c:	movt	r0, #2
   1d980:	str	lr, [sp, #16]
   1d984:	movw	r7, #41080	; 0xa078
   1d988:	movt	r7, #3
   1d98c:	vpush	{d8-d9}
   1d990:	sub	sp, sp, #12
   1d994:	bl	129c8 <puts@plt>
   1d998:	mov	r0, sp
   1d99c:	mov	r1, #0
   1d9a0:	bl	129bc <gettimeofday@plt>
   1d9a4:	ldr	r2, [r7]
   1d9a8:	cmp	r2, #0
   1d9ac:	bne	1d9c4 <time_struct_buffer@@Base+0x58>
   1d9b0:	ldr	r3, [sp]
   1d9b4:	ldr	r1, [sp, #4]
   1d9b8:	mov	r2, r3
   1d9bc:	str	r3, [r7]
   1d9c0:	str	r1, [r7, #4]
   1d9c4:	ldr	r1, [r7, #4]
   1d9c8:	movw	r4, #16960	; 0x4240
   1d9cc:	movt	r4, #15
   1d9d0:	mov	r5, #0
   1d9d4:	ldr	r3, [sp, #4]
   1d9d8:	vldr	d5, [pc, #232]	; 1dac8 <time_struct_buffer@@Base+0x15c>
   1d9dc:	sub	r3, r3, r1
   1d9e0:	vmov	s12, r3
   1d9e4:	ldr	r3, [sp]
   1d9e8:	sub	r3, r3, r2
   1d9ec:	vmov	s15, r3
   1d9f0:	vcvt.f64.s32	d6, s12
   1d9f4:	vdiv.f64	d8, d6, d5
   1d9f8:	vcvt.f64.s32	d7, s15
   1d9fc:	vadd.f64	d8, d8, d7
   1da00:	mov	r0, r6
   1da04:	bl	1d808 <gen_struct_buffer_benchmark@@Base>
   1da08:	subs	r4, r4, #1
   1da0c:	orr	r5, r5, r0
   1da10:	bne	1da00 <time_struct_buffer@@Base+0x94>
   1da14:	mov	r1, r4
   1da18:	mov	r0, sp
   1da1c:	bl	129bc <gettimeofday@plt>
   1da20:	ldr	r1, [r7]
   1da24:	cmp	r1, #0
   1da28:	bne	1da40 <time_struct_buffer@@Base+0xd4>
   1da2c:	ldr	r3, [sp]
   1da30:	ldr	r2, [sp, #4]
   1da34:	mov	r1, r3
   1da38:	str	r3, [r7]
   1da3c:	str	r2, [r7, #4]
   1da40:	ldr	ip, [r7, #4]
   1da44:	mov	r0, r6
   1da48:	vldr	d5, [pc, #120]	; 1dac8 <time_struct_buffer@@Base+0x15c>
   1da4c:	ldr	r2, [sp, #4]
   1da50:	ldr	r3, [sp]
   1da54:	sub	r2, r2, ip
   1da58:	vmov	s15, r2
   1da5c:	sub	r3, r3, r1
   1da60:	vcvt.f64.s32	d6, s15
   1da64:	vmov	s15, r3
   1da68:	vdiv.f64	d9, d6, d5
   1da6c:	vcvt.f64.s32	d7, s15
   1da70:	vadd.f64	d9, d9, d7
   1da74:	bl	23374 <flatcc_builder_get_buffer_size@@Base>
   1da78:	cmp	r5, #0
   1da7c:	mov	r4, r0
   1da80:	bne	1dab8 <time_struct_buffer@@Base+0x14c>
   1da84:	vmov.f64	d1, d9
   1da88:	vmov.f64	d0, d8
   1da8c:	mov	r1, r4
   1da90:	movw	r0, #34780	; 0x87dc
   1da94:	movt	r0, #2
   1da98:	bl	14018 <_start@@Base+0x1408>
   1da9c:	mov	r0, r5
   1daa0:	add	sp, sp, #12
   1daa4:	vpop	{d8-d9}
   1daa8:	ldrd	r4, [sp]
   1daac:	ldrd	r6, [sp, #8]
   1dab0:	add	sp, sp, #16
   1dab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dab8:	movw	r0, #34760	; 0x87c8
   1dabc:	movt	r0, #2
   1dac0:	bl	129c8 <puts@plt>
   1dac4:	b	1da84 <time_struct_buffer@@Base+0x118>
   1dac8:	andeq	r0, r0, r0
   1dacc:	smlawbmi	lr, r0, r4, r8

0001dad0 <flatcc_builder_default_alloc@@Base>:
   1dad0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dad4:	subs	r5, r2, #0
   1dad8:	strd	r6, [sp, #8]
   1dadc:	mov	r6, r1
   1dae0:	str	r8, [sp, #16]
   1dae4:	str	lr, [sp, #20]
   1dae8:	beq	1db20 <flatcc_builder_default_alloc@@Base+0x50>
   1daec:	mov	r7, r3
   1daf0:	ldr	r3, [sp, #24]
   1daf4:	sub	r2, r3, #1
   1daf8:	cmp	r2, #6
   1dafc:	ldrls	pc, [pc, r2, lsl #2]
   1db00:	b	1dbd0 <flatcc_builder_default_alloc@@Base+0x100>
   1db04:	andeq	sp, r1, r0, asr fp
   1db08:	ldrdeq	sp, [r1], -r0
   1db0c:	ldrdeq	sp, [r1], -r0
   1db10:	andeq	sp, r1, r8, asr #23
   1db14:			; <UNDEFINED> instruction: 0x0001dbb8
   1db18:	ldrdeq	sp, [r1], -r0
   1db1c:	andeq	sp, r1, r0, asr #23
   1db20:	ldr	r0, [r1]
   1db24:	cmp	r0, #0
   1db28:	beq	1db3c <flatcc_builder_default_alloc@@Base+0x6c>
   1db2c:	bl	12980 <free@plt>
   1db30:	mov	r0, r5
   1db34:	str	r5, [r6]
   1db38:	str	r5, [r6, #4]
   1db3c:	ldrd	r4, [sp]
   1db40:	ldrd	r6, [sp, #8]
   1db44:	ldr	r8, [sp, #16]
   1db48:	add	sp, sp, #20
   1db4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1db50:	mov	r4, #256	; 0x100
   1db54:	cmp	r4, r5
   1db58:	bcs	1db68 <flatcc_builder_default_alloc@@Base+0x98>
   1db5c:	lsl	r4, r4, #1
   1db60:	cmp	r5, r4
   1db64:	bhi	1db5c <flatcc_builder_default_alloc@@Base+0x8c>
   1db68:	ldr	r2, [r6, #4]
   1db6c:	cmp	r5, r2
   1db70:	bhi	1db80 <flatcc_builder_default_alloc@@Base+0xb0>
   1db74:	cmp	r4, r2, lsr #1
   1db78:	movls	r0, #0
   1db7c:	bls	1db3c <flatcc_builder_default_alloc@@Base+0x6c>
   1db80:	mov	r1, r4
   1db84:	ldr	r0, [r6]
   1db88:	bl	129a4 <realloc@plt>
   1db8c:	subs	r5, r0, #0
   1db90:	beq	1dbec <flatcc_builder_default_alloc@@Base+0x11c>
   1db94:	cmp	r7, #0
   1db98:	beq	1dba8 <flatcc_builder_default_alloc@@Base+0xd8>
   1db9c:	ldr	r0, [r6, #4]
   1dba0:	cmp	r0, r4
   1dba4:	bcc	1dbd8 <flatcc_builder_default_alloc@@Base+0x108>
   1dba8:	mov	r0, #0
   1dbac:	str	r5, [r6]
   1dbb0:	str	r4, [r6, #4]
   1dbb4:	b	1db3c <flatcc_builder_default_alloc@@Base+0x6c>
   1dbb8:	mov	r4, r5
   1dbbc:	b	1db68 <flatcc_builder_default_alloc@@Base+0x98>
   1dbc0:	mov	r4, #64	; 0x40
   1dbc4:	b	1db54 <flatcc_builder_default_alloc@@Base+0x84>
   1dbc8:	mov	r4, #288	; 0x120
   1dbcc:	b	1db54 <flatcc_builder_default_alloc@@Base+0x84>
   1dbd0:	mov	r4, #32
   1dbd4:	b	1db54 <flatcc_builder_default_alloc@@Base+0x84>
   1dbd8:	sub	r2, r4, r0
   1dbdc:	mov	r1, #0
   1dbe0:	add	r0, r5, r0
   1dbe4:	bl	12a1c <memset@plt>
   1dbe8:	b	1dba8 <flatcc_builder_default_alloc@@Base+0xd8>
   1dbec:	mvn	r0, #0
   1dbf0:	b	1db3c <flatcc_builder_default_alloc@@Base+0x6c>
   1dbf4:	movw	r3, #34868	; 0x8834
   1dbf8:	movt	r3, #2
   1dbfc:	str	r4, [sp, #-8]!
   1dc00:	movw	r1, #36740	; 0x8f84
   1dc04:	movt	r1, #2
   1dc08:	str	lr, [sp, #4]
   1dc0c:	movw	r0, #36924	; 0x903c
   1dc10:	movt	r0, #2
   1dc14:	mov	r2, #308	; 0x134
   1dc18:	bl	12a64 <__assert_fail@plt>
   1dc1c:	movw	r1, #36740	; 0x8f84
   1dc20:	movt	r1, #2
   1dc24:	ldr	r3, [pc, #20]	; 1dc40 <flatcc_builder_default_alloc@@Base+0x170>
   1dc28:	movw	r0, #36924	; 0x903c
   1dc2c:	movt	r0, #2
   1dc30:	str	r4, [sp, #-8]!
   1dc34:	movw	r2, #677	; 0x2a5
   1dc38:	str	lr, [sp, #4]
   1dc3c:	bl	12a64 <__assert_fail@plt>
   1dc40:	andeq	r8, r2, r4, asr #16
   1dc44:	movw	r1, #36740	; 0x8f84
   1dc48:	movt	r1, #2
   1dc4c:	ldr	r3, [pc, #20]	; 1dc68 <flatcc_builder_default_alloc@@Base+0x198>
   1dc50:	movw	r0, #36924	; 0x903c
   1dc54:	movt	r0, #2
   1dc58:	str	r4, [sp, #-8]!
   1dc5c:	movw	r2, #702	; 0x2be
   1dc60:	str	lr, [sp, #4]
   1dc64:	bl	12a64 <__assert_fail@plt>
   1dc68:	andeq	r8, r2, r0, asr r8
   1dc6c:	movw	r1, #36740	; 0x8f84
   1dc70:	movt	r1, #2
   1dc74:	ldr	r3, [pc, #20]	; 1dc90 <flatcc_builder_default_alloc@@Base+0x1c0>
   1dc78:	movw	r0, #36924	; 0x903c
   1dc7c:	movt	r0, #2
   1dc80:	str	r4, [sp, #-8]!
   1dc84:	movw	r2, #651	; 0x28b
   1dc88:	str	lr, [sp, #4]
   1dc8c:	bl	12a64 <__assert_fail@plt>
   1dc90:	andeq	r8, r2, r0, ror #16
   1dc94:	movw	r1, #36740	; 0x8f84
   1dc98:	movt	r1, #2
   1dc9c:	ldr	r3, [pc, #20]	; 1dcb8 <flatcc_builder_default_alloc@@Base+0x1e8>
   1dca0:	movw	r0, #36812	; 0x8fcc
   1dca4:	movt	r0, #2
   1dca8:	str	r4, [sp, #-8]!
   1dcac:	mov	r2, #892	; 0x37c
   1dcb0:	str	lr, [sp, #4]
   1dcb4:	bl	12a64 <__assert_fail@plt>
   1dcb8:	andeq	r8, r2, ip, ror #16
   1dcbc:	movw	r1, #36740	; 0x8f84
   1dcc0:	movt	r1, #2
   1dcc4:	ldr	r3, [pc, #20]	; 1dce0 <flatcc_builder_default_alloc@@Base+0x210>
   1dcc8:	movw	r0, #36840	; 0x8fe8
   1dccc:	movt	r0, #2
   1dcd0:	str	r4, [sp, #-8]!
   1dcd4:	movw	r2, #542	; 0x21e
   1dcd8:	str	lr, [sp, #4]
   1dcdc:	bl	12a64 <__assert_fail@plt>
   1dce0:	andeq	r8, r2, r0, lsl #17
   1dce4:	movw	r1, #36740	; 0x8f84
   1dce8:	movt	r1, #2
   1dcec:	ldr	r3, [pc, #20]	; 1dd08 <flatcc_builder_default_alloc@@Base+0x238>
   1dcf0:	movw	r0, #36868	; 0x9004
   1dcf4:	movt	r0, #2
   1dcf8:	str	r4, [sp, #-8]!
   1dcfc:	movw	r2, #966	; 0x3c6
   1dd00:	str	lr, [sp, #4]
   1dd04:	bl	12a64 <__assert_fail@plt>
   1dd08:	andeq	r8, r2, r0, lsr #17
   1dd0c:	movw	r1, #36740	; 0x8f84
   1dd10:	movt	r1, #2
   1dd14:	ldr	r3, [pc, #20]	; 1dd30 <flatcc_builder_default_alloc@@Base+0x260>
   1dd18:	movw	r0, #24980	; 0x6194
   1dd1c:	movt	r0, #2
   1dd20:	str	r4, [sp, #-8]!
   1dd24:	movw	r2, #1926	; 0x786
   1dd28:	str	lr, [sp, #4]
   1dd2c:	bl	12a64 <__assert_fail@plt>
   1dd30:	andeq	r8, r2, r0, asr #17
   1dd34:	ldrd	r2, [r0, #156]	; 0x9c
   1dd38:	strd	r4, [sp, #-20]!	; 0xffffffec
   1dd3c:	mov	r5, r1
   1dd40:	mov	r4, r0
   1dd44:	strd	r6, [sp, #8]
   1dd48:	str	lr, [sp, #16]
   1dd4c:	sub	sp, sp, #12
   1dd50:	add	r1, r2, #1
   1dd54:	cmp	r1, r3
   1dd58:	str	r1, [r0, #156]	; 0x9c
   1dd5c:	ble	1de3c <flatcc_builder_default_alloc@@Base+0x36c>
   1dd60:	ldr	r3, [r0, #176]	; 0xb0
   1dd64:	cmp	r1, r3
   1dd68:	cmpgt	r3, #0
   1dd6c:	movgt	r3, #1
   1dd70:	movle	r3, #0
   1dd74:	bgt	1de4c <flatcc_builder_default_alloc@@Base+0x37c>
   1dd78:	add	r2, r2, r2, lsl #3
   1dd7c:	ldr	r1, [r0, #88]	; 0x58
   1dd80:	lsl	r6, r2, #2
   1dd84:	add	r2, r6, #36	; 0x24
   1dd88:	cmp	r2, r1
   1dd8c:	bls	1ddb0 <flatcc_builder_default_alloc@@Base+0x2e0>
   1dd90:	mov	ip, #4
   1dd94:	add	r1, r0, #84	; 0x54
   1dd98:	ldr	r0, [r0, #40]	; 0x28
   1dd9c:	str	ip, [sp]
   1dda0:	ldr	r7, [r4, #48]	; 0x30
   1dda4:	blx	r7
   1dda8:	cmp	r0, #0
   1ddac:	bne	1de54 <flatcc_builder_default_alloc@@Base+0x384>
   1ddb0:	ldr	r2, [r4, #84]	; 0x54
   1ddb4:	add	r2, r2, r6
   1ddb8:	cmp	r2, #0
   1ddbc:	str	r2, [r4, #32]
   1ddc0:	beq	1de4c <flatcc_builder_default_alloc@@Base+0x37c>
   1ddc4:	ldr	r3, [r4, #88]	; 0x58
   1ddc8:	movw	r0, #36409	; 0x8e39
   1ddcc:	movt	r0, #14563	; 0x38e3
   1ddd0:	ldr	r1, [r4, #176]	; 0xb0
   1ddd4:	umull	r0, r3, r0, r3
   1ddd8:	lsr	r3, r3, #3
   1dddc:	cmp	r3, r1
   1dde0:	cmpgt	r1, #0
   1dde4:	movgt	r3, r1
   1dde8:	str	r3, [r4, #160]	; 0xa0
   1ddec:	ldr	r3, [r4, #20]
   1ddf0:	mov	r1, #0
   1ddf4:	mvn	lr, #3
   1ddf8:	mov	r0, r1
   1ddfc:	ldr	ip, [r4, #28]
   1de00:	ldrh	r6, [r4, #130]	; 0x82
   1de04:	str	r3, [r2, #8]
   1de08:	add	r3, r3, ip
   1de0c:	add	r3, r3, #7
   1de10:	bic	r3, r3, #7
   1de14:	strh	r6, [r2, #12]
   1de18:	strh	r5, [r4, #130]	; 0x82
   1de1c:	stm	r2, {ip, lr}
   1de20:	str	r1, [r4, #20]
   1de24:	str	r3, [r4, #28]
   1de28:	add	sp, sp, #12
   1de2c:	ldrd	r4, [sp]
   1de30:	ldrd	r6, [sp, #8]
   1de34:	add	sp, sp, #16
   1de38:	pop	{pc}		; (ldr pc, [sp], #4)
   1de3c:	ldr	r2, [r0, #32]
   1de40:	add	r2, r2, #36	; 0x24
   1de44:	str	r2, [r0, #32]
   1de48:	b	1ddec <flatcc_builder_default_alloc@@Base+0x31c>
   1de4c:	mvn	r0, #0
   1de50:	b	1de28 <flatcc_builder_default_alloc@@Base+0x358>
   1de54:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>
   1de58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1de5c:	mov	r4, r0
   1de60:	ldrh	r0, [r0, #128]	; 0x80
   1de64:	strd	r6, [sp, #8]
   1de68:	mov	r6, #4
   1de6c:	ldr	r5, [r4, #136]	; 0x88
   1de70:	str	lr, [sp, #20]
   1de74:	mov	lr, r2
   1de78:	str	r8, [sp, #16]
   1de7c:	sub	sp, sp, #88	; 0x58
   1de80:	cmp	r0, #3
   1de84:	add	r0, sp, #12
   1de88:	movls	r2, #4
   1de8c:	str	lr, [sp, #12]
   1de90:	str	r6, [sp, #16]
   1de94:	strhls	r2, [r4, #128]	; 0x80
   1de98:	mov	r2, #1
   1de9c:	lsls	ip, lr, #2
   1dea0:	moveq	r7, #2
   1dea4:	str	r2, [sp, #20]
   1dea8:	str	r0, [sp, #24]
   1deac:	and	r0, r5, #3
   1deb0:	str	r6, [sp, #28]
   1deb4:	beq	1ded8 <flatcc_builder_default_alloc@@Base+0x408>
   1deb8:	mov	r8, #2
   1debc:	add	r6, ip, r6
   1dec0:	mov	r2, r8
   1dec4:	mov	r7, #3
   1dec8:	str	r6, [sp, #16]
   1decc:	str	r8, [sp, #20]
   1ded0:	str	r1, [sp, #32]
   1ded4:	str	ip, [sp, #36]	; 0x24
   1ded8:	cmp	r0, #0
   1dedc:	beq	1df04 <flatcc_builder_default_alloc@@Base+0x434>
   1dee0:	ldr	r8, [pc, #360]	; 1e050 <flatcc_builder_default_alloc@@Base+0x580>
   1dee4:	add	r2, r2, #1
   1dee8:	add	ip, sp, #88	; 0x58
   1deec:	add	ip, ip, r2, lsl #3
   1def0:	add	r6, r6, r0
   1def4:	mov	r2, r7
   1def8:	strd	r6, [sp, #16]
   1defc:	str	r8, [ip, #-72]	; 0xffffffb8
   1df00:	str	r0, [ip, #-68]	; 0xffffffbc
   1df04:	cmp	lr, #0
   1df08:	beq	1df98 <flatcc_builder_default_alloc@@Base+0x4c8>
   1df0c:	cmp	r3, #0
   1df10:	subne	r5, r1, r5
   1df14:	addne	lr, r3, lr
   1df18:	addne	r5, r5, r6
   1df1c:	bne	1df48 <flatcc_builder_default_alloc@@Base+0x478>
   1df20:	b	1e000 <flatcc_builder_default_alloc@@Base+0x530>
   1df24:	sub	ip, r5, r1
   1df28:	add	r0, ip, r0
   1df2c:	str	r0, [r1, #-4]
   1df30:	ldrb	r0, [r3]
   1df34:	cmp	r0, #0
   1df38:	beq	1dfe4 <flatcc_builder_default_alloc@@Base+0x514>
   1df3c:	add	r3, r3, #1
   1df40:	cmp	r3, lr
   1df44:	beq	1df94 <flatcc_builder_default_alloc@@Base+0x4c4>
   1df48:	ldr	r0, [r1], #4
   1df4c:	cmp	r0, #0
   1df50:	bne	1df24 <flatcc_builder_default_alloc@@Base+0x454>
   1df54:	ldrb	r0, [r3]
   1df58:	cmp	r0, #0
   1df5c:	beq	1df3c <flatcc_builder_default_alloc@@Base+0x46c>
   1df60:	movw	r1, #36740	; 0x8f84
   1df64:	movt	r1, #2
   1df68:	ldr	r3, [pc, #228]	; 1e054 <flatcc_builder_default_alloc@@Base+0x584>
   1df6c:	movw	r0, #36928	; 0x9040
   1df70:	movt	r0, #2
   1df74:	movw	r2, #1461	; 0x5b5
   1df78:	bl	12a64 <__assert_fail@plt>
   1df7c:	sub	r0, ip, r1
   1df80:	add	r3, r3, #1
   1df84:	add	r0, r0, r5
   1df88:	cmp	lr, r3
   1df8c:	str	r0, [r1, #-4]
   1df90:	bne	1e008 <flatcc_builder_default_alloc@@Base+0x538>
   1df94:	ldr	r5, [r4, #136]	; 0x88
   1df98:	sub	r7, r5, r6
   1df9c:	cmp	r7, r5
   1dfa0:	bge	1e034 <flatcc_builder_default_alloc@@Base+0x564>
   1dfa4:	mov	r3, r7
   1dfa8:	add	r1, sp, #24
   1dfac:	str	r6, [sp]
   1dfb0:	ldr	r0, [r4, #36]	; 0x24
   1dfb4:	ldr	r5, [r4, #44]	; 0x2c
   1dfb8:	blx	r5
   1dfbc:	cmp	r0, #0
   1dfc0:	bne	1e030 <flatcc_builder_default_alloc@@Base+0x560>
   1dfc4:	mov	r0, r7
   1dfc8:	str	r7, [r4, #136]	; 0x88
   1dfcc:	add	sp, sp, #88	; 0x58
   1dfd0:	ldrd	r4, [sp]
   1dfd4:	ldrd	r6, [sp, #8]
   1dfd8:	ldr	r8, [sp, #16]
   1dfdc:	add	sp, sp, #20
   1dfe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dfe4:	movw	r1, #36740	; 0x8f84
   1dfe8:	movt	r1, #2
   1dfec:	ldr	r3, [pc, #96]	; 1e054 <flatcc_builder_default_alloc@@Base+0x584>
   1dff0:	movw	r0, #36912	; 0x9030
   1dff4:	movt	r0, #2
   1dff8:	movw	r2, #1457	; 0x5b1
   1dffc:	bl	12a64 <__assert_fail@plt>
   1e000:	sub	ip, r1, r5
   1e004:	add	ip, ip, r6
   1e008:	ldr	r5, [r1], #4
   1e00c:	cmp	r5, #0
   1e010:	bne	1df7c <flatcc_builder_default_alloc@@Base+0x4ac>
   1e014:	movw	r1, #36740	; 0x8f84
   1e018:	movt	r1, #2
   1e01c:	ldr	r3, [pc, #48]	; 1e054 <flatcc_builder_default_alloc@@Base+0x584>
   1e020:	movw	r0, #36924	; 0x903c
   1e024:	movt	r0, #2
   1e028:	movw	r2, #1463	; 0x5b7
   1e02c:	bl	12a64 <__assert_fail@plt>
   1e030:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   1e034:	movw	r1, #36740	; 0x8f84
   1e038:	movt	r1, #2
   1e03c:	ldr	r3, [pc, #20]	; 1e058 <flatcc_builder_default_alloc@@Base+0x588>
   1e040:	movw	r0, #36924	; 0x903c
   1e044:	movt	r0, #2
   1e048:	movw	r2, #647	; 0x287
   1e04c:	bl	12a64 <__assert_fail@plt>
   1e050:	ldrdeq	r8, [r2], -ip
   1e054:	ldrdeq	r8, [r2], -ip
   1e058:	andeq	r8, r2, r0, ror #16

0001e05c <flatcc_builder_flush_vtable_cache@@Base>:
   1e05c:	ldr	r3, [r0, #116]	; 0x74
   1e060:	cmp	r3, #0
   1e064:	bxeq	lr
   1e068:	str	r4, [sp, #-8]!
   1e06c:	mov	r4, r0
   1e070:	mov	r1, #0
   1e074:	ldr	r0, [r0, #92]	; 0x5c
   1e078:	ldr	r2, [r4, #96]	; 0x60
   1e07c:	str	lr, [sp, #4]
   1e080:	bl	12a1c <memset@plt>
   1e084:	mov	r3, #16
   1e088:	mov	r2, #0
   1e08c:	strd	r2, [r4, #120]	; 0x78
   1e090:	ldr	r4, [sp]
   1e094:	add	sp, sp, #4
   1e098:	pop	{pc}		; (ldr pc, [sp], #4)

0001e09c <flatcc_builder_custom_init@@Base>:
   1e09c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e0a0:	mov	r5, r3
   1e0a4:	mov	r4, r0
   1e0a8:	strd	r6, [sp, #8]
   1e0ac:	mov	r6, r1
   1e0b0:	mov	r7, r2
   1e0b4:	mov	r1, #0
   1e0b8:	mov	r2, #232	; 0xe8
   1e0bc:	str	r8, [sp, #16]
   1e0c0:	str	lr, [sp, #20]
   1e0c4:	ldr	r8, [sp, #24]
   1e0c8:	bl	12a1c <memset@plt>
   1e0cc:	cmp	r6, #0
   1e0d0:	beq	1e10c <flatcc_builder_custom_init@@Base+0x70>
   1e0d4:	cmp	r5, #0
   1e0d8:	movw	r3, #56016	; 0xdad0
   1e0dc:	movt	r3, #1
   1e0e0:	str	r7, [r4, #36]	; 0x24
   1e0e4:	mov	r0, #0
   1e0e8:	moveq	r5, r3
   1e0ec:	str	r8, [r4, #40]	; 0x28
   1e0f0:	str	r6, [r4, #44]	; 0x2c
   1e0f4:	str	r5, [r4, #48]	; 0x30
   1e0f8:	ldrd	r4, [sp]
   1e0fc:	ldrd	r6, [sp, #8]
   1e100:	ldr	r8, [sp, #16]
   1e104:	add	sp, sp, #20
   1e108:	pop	{pc}		; (ldr pc, [sp], #4)
   1e10c:	mov	r3, #1
   1e110:	movw	r6, #14348	; 0x380c
   1e114:	movt	r6, #2
   1e118:	add	r7, r4, #188	; 0xbc
   1e11c:	str	r3, [r4, #184]	; 0xb8
   1e120:	b	1e0d4 <flatcc_builder_custom_init@@Base+0x38>

0001e124 <flatcc_builder_init@@Base>:
   1e124:	mov	r2, #232	; 0xe8
   1e128:	mov	r1, #0
   1e12c:	str	r4, [sp, #-8]!
   1e130:	str	lr, [sp, #4]
   1e134:	bl	12a1c <memset@plt>
   1e138:	mov	r3, r0
   1e13c:	movw	r2, #56016	; 0xdad0
   1e140:	movt	r2, #1
   1e144:	mov	r0, #1
   1e148:	ldr	r4, [sp]
   1e14c:	add	ip, r3, #188	; 0xbc
   1e150:	movw	r1, #14348	; 0x380c
   1e154:	movt	r1, #2
   1e158:	add	sp, sp, #4
   1e15c:	str	ip, [r3, #36]	; 0x24
   1e160:	str	r1, [r3, #44]	; 0x2c
   1e164:	str	r2, [r3, #48]	; 0x30
   1e168:	str	r0, [r3, #184]	; 0xb8
   1e16c:	mov	r0, #0
   1e170:	pop	{pc}		; (ldr pc, [sp], #4)

0001e174 <flatcc_builder_custom_reset@@Base>:
   1e174:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e178:	mov	r5, #0
   1e17c:	mov	r4, r0
   1e180:	strd	r6, [sp, #8]
   1e184:	mov	r6, r0
   1e188:	strd	r8, [sp, #16]
   1e18c:	mov	r8, r1
   1e190:	mov	r9, r2
   1e194:	str	lr, [sp, #24]
   1e198:	sub	sp, sp, #12
   1e19c:	b	1e1ec <flatcc_builder_custom_reset@@Base+0x78>
   1e1a0:	cmp	r5, #5
   1e1a4:	cmpne	r9, #0
   1e1a8:	beq	1e1d0 <flatcc_builder_custom_reset@@Base+0x5c>
   1e1ac:	mov	r3, #1
   1e1b0:	str	r5, [sp]
   1e1b4:	mov	r2, r3
   1e1b8:	ldr	r0, [r6, #40]	; 0x28
   1e1bc:	ldr	r7, [r6, #48]	; 0x30
   1e1c0:	blx	r7
   1e1c4:	cmp	r0, #0
   1e1c8:	bne	1e2d4 <flatcc_builder_custom_reset@@Base+0x160>
   1e1cc:	ldr	r0, [r4, #52]	; 0x34
   1e1d0:	mov	r1, #0
   1e1d4:	ldr	r2, [r4, #56]	; 0x38
   1e1d8:	bl	12a1c <memset@plt>
   1e1dc:	add	r5, r5, #1
   1e1e0:	add	r4, r4, #8
   1e1e4:	cmp	r5, #8
   1e1e8:	beq	1e224 <flatcc_builder_custom_reset@@Base+0xb0>
   1e1ec:	ldr	r0, [r4, #52]	; 0x34
   1e1f0:	add	r1, r4, #52	; 0x34
   1e1f4:	cmp	r0, #0
   1e1f8:	bne	1e1a0 <flatcc_builder_custom_reset@@Base+0x2c>
   1e1fc:	ldr	r3, [r4, #56]	; 0x38
   1e200:	cmp	r3, #0
   1e204:	beq	1e1dc <flatcc_builder_custom_reset@@Base+0x68>
   1e208:	movw	r1, #36740	; 0x8f84
   1e20c:	movt	r1, #2
   1e210:	ldr	r3, [pc, #196]	; 1e2dc <flatcc_builder_custom_reset@@Base+0x168>
   1e214:	movw	r0, #36944	; 0x9050
   1e218:	movt	r0, #2
   1e21c:	movw	r2, #434	; 0x1b2
   1e220:	bl	12a64 <__assert_fail@plt>
   1e224:	mov	r2, #0
   1e228:	ldr	r0, [r6, #52]	; 0x34
   1e22c:	ldr	r3, [r6, #124]	; 0x7c
   1e230:	ldr	r1, [r6, #60]	; 0x3c
   1e234:	str	r0, [r6, #4]
   1e238:	str	r2, [r6, #120]	; 0x78
   1e23c:	cmp	r3, r2
   1e240:	ldr	r2, [r6, #76]	; 0x4c
   1e244:	movne	r3, #16
   1e248:	strne	r3, [r6, #124]	; 0x7c
   1e24c:	mov	r3, #0
   1e250:	cmp	r8, r3
   1e254:	str	r2, [r6]
   1e258:	str	r1, [r6, #16]
   1e25c:	str	r3, [r6, #20]
   1e260:	str	r3, [r6, #24]
   1e264:	str	r3, [r6, #32]
   1e268:	strh	r3, [r6, #128]	; 0x80
   1e26c:	str	r3, [r6, #136]	; 0x88
   1e270:	str	r3, [r6, #140]	; 0x8c
   1e274:	str	r3, [r6, #148]	; 0x94
   1e278:	str	r3, [r6, #152]	; 0x98
   1e27c:	str	r3, [r6, #156]	; 0x9c
   1e280:	str	r3, [r6, #160]	; 0xa0
   1e284:	bne	1e2ac <flatcc_builder_custom_reset@@Base+0x138>
   1e288:	ldr	r0, [r6, #184]	; 0xb8
   1e28c:	cmp	r0, #0
   1e290:	bne	1e2c4 <flatcc_builder_custom_reset@@Base+0x150>
   1e294:	add	sp, sp, #12
   1e298:	ldrd	r4, [sp]
   1e29c:	ldrd	r6, [sp, #8]
   1e2a0:	ldrd	r8, [sp, #16]
   1e2a4:	add	sp, sp, #24
   1e2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2ac:	ldr	r0, [r6, #184]	; 0xb8
   1e2b0:	str	r3, [r6, #172]	; 0xac
   1e2b4:	str	r3, [r6, #176]	; 0xb0
   1e2b8:	str	r3, [r6, #180]	; 0xb4
   1e2bc:	cmp	r0, #0
   1e2c0:	beq	1e294 <flatcc_builder_custom_reset@@Base+0x120>
   1e2c4:	add	r0, r6, #188	; 0xbc
   1e2c8:	bl	236b8 <flatcc_emitter_reset@@Base>
   1e2cc:	mov	r0, #0
   1e2d0:	b	1e294 <flatcc_builder_custom_reset@@Base+0x120>
   1e2d4:	mvn	r0, #0
   1e2d8:	b	1e294 <flatcc_builder_custom_reset@@Base+0x120>
   1e2dc:	strdeq	r8, [r2], -ip

0001e2e0 <flatcc_builder_reset@@Base>:
   1e2e0:	mov	r2, #0
   1e2e4:	mov	r1, r2
   1e2e8:	b	1e174 <flatcc_builder_custom_reset@@Base>

0001e2ec <flatcc_builder_clear@@Base>:
   1e2ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e2f0:	mov	r4, #0
   1e2f4:	add	r5, r0, #52	; 0x34
   1e2f8:	strd	r6, [sp, #8]
   1e2fc:	mov	r6, r0
   1e300:	str	lr, [sp, #16]
   1e304:	sub	sp, sp, #12
   1e308:	mov	r3, #0
   1e30c:	mov	r1, r5
   1e310:	str	r4, [sp]
   1e314:	mov	r2, r3
   1e318:	add	r4, r4, #1
   1e31c:	ldr	r0, [r6, #40]	; 0x28
   1e320:	add	r5, r5, #8
   1e324:	ldr	r7, [r6, #48]	; 0x30
   1e328:	blx	r7
   1e32c:	cmp	r4, #8
   1e330:	bne	1e308 <flatcc_builder_clear@@Base+0x1c>
   1e334:	ldr	r3, [r6, #184]	; 0xb8
   1e338:	cmp	r3, #0
   1e33c:	bne	1e364 <flatcc_builder_clear@@Base+0x78>
   1e340:	mov	r0, r6
   1e344:	mov	r2, #232	; 0xe8
   1e348:	mov	r1, #0
   1e34c:	add	sp, sp, #12
   1e350:	ldrd	r4, [sp]
   1e354:	ldrd	r6, [sp, #8]
   1e358:	ldr	lr, [sp, #16]
   1e35c:	add	sp, sp, #20
   1e360:	b	12a1c <memset@plt>
   1e364:	add	r0, r6, #188	; 0xbc
   1e368:	bl	2378c <flatcc_emitter_clear@@Base>
   1e36c:	b	1e340 <flatcc_builder_clear@@Base+0x54>

0001e370 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1e370:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e374:	add	r4, r1, #3
   1e378:	mov	r5, r0
   1e37c:	ldr	r3, [r0, #112]	; 0x70
   1e380:	bic	r4, r4, #3
   1e384:	strd	r6, [sp, #8]
   1e388:	add	r4, r4, #4
   1e38c:	ldr	r6, [r0, #228]	; 0xe4
   1e390:	str	lr, [sp, #16]
   1e394:	sub	sp, sp, #12
   1e398:	add	r2, r6, r4
   1e39c:	cmp	r2, r3
   1e3a0:	bls	1e3c8 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   1e3a4:	mov	ip, #7
   1e3a8:	add	r1, r0, #108	; 0x6c
   1e3ac:	ldr	r0, [r0, #40]	; 0x28
   1e3b0:	mov	r3, #0
   1e3b4:	str	ip, [sp]
   1e3b8:	ldr	r7, [r5, #48]	; 0x30
   1e3bc:	blx	r7
   1e3c0:	cmp	r0, #0
   1e3c4:	bne	1e41c <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   1e3c8:	ldr	r7, [r5, #108]	; 0x6c
   1e3cc:	adds	r3, r7, r6
   1e3d0:	moveq	r0, r3
   1e3d4:	beq	1e408 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1e3d8:	mov	r2, r4
   1e3dc:	mov	r0, r3
   1e3e0:	mov	r1, #0
   1e3e4:	bl	12a1c <memset@plt>
   1e3e8:	ldr	r2, [r5, #224]	; 0xe0
   1e3ec:	add	r0, r0, #4
   1e3f0:	str	r2, [r7, r6]
   1e3f4:	ldr	r3, [r5, #228]	; 0xe4
   1e3f8:	add	r4, r3, r4
   1e3fc:	add	r3, r3, #4
   1e400:	str	r3, [r5, #224]	; 0xe0
   1e404:	str	r4, [r5, #228]	; 0xe4
   1e408:	add	sp, sp, #12
   1e40c:	ldrd	r4, [sp]
   1e410:	ldrd	r6, [sp, #8]
   1e414:	add	sp, sp, #16
   1e418:	pop	{pc}		; (ldr pc, [sp], #4)
   1e41c:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

0001e420 <flatcc_builder_enter_user_frame@@Base>:
   1e420:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e424:	add	r4, r1, #3
   1e428:	mov	r5, r0
   1e42c:	ldr	r3, [r0, #112]	; 0x70
   1e430:	bic	r4, r4, #3
   1e434:	strd	r6, [sp, #8]
   1e438:	add	r4, r4, #4
   1e43c:	ldr	r6, [r0, #228]	; 0xe4
   1e440:	str	lr, [sp, #16]
   1e444:	sub	sp, sp, #12
   1e448:	add	r2, r6, r4
   1e44c:	cmp	r2, r3
   1e450:	bls	1e478 <flatcc_builder_enter_user_frame@@Base+0x58>
   1e454:	mov	ip, #7
   1e458:	add	r1, r0, #108	; 0x6c
   1e45c:	ldr	r0, [r0, #40]	; 0x28
   1e460:	mov	r3, #0
   1e464:	str	ip, [sp]
   1e468:	ldr	r7, [r5, #48]	; 0x30
   1e46c:	blx	r7
   1e470:	cmp	r0, #0
   1e474:	bne	1e4c0 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1e478:	ldr	r7, [r5, #108]	; 0x6c
   1e47c:	adds	r0, r7, r6
   1e480:	beq	1e4ac <flatcc_builder_enter_user_frame@@Base+0x8c>
   1e484:	mov	r2, r4
   1e488:	mov	r1, #0
   1e48c:	bl	12a1c <memset@plt>
   1e490:	ldr	r3, [r5, #224]	; 0xe0
   1e494:	str	r3, [r7, r6]
   1e498:	ldr	r0, [r5, #228]	; 0xe4
   1e49c:	add	r4, r0, r4
   1e4a0:	add	r0, r0, #4
   1e4a4:	str	r0, [r5, #224]	; 0xe0
   1e4a8:	str	r4, [r5, #228]	; 0xe4
   1e4ac:	add	sp, sp, #12
   1e4b0:	ldrd	r4, [sp]
   1e4b4:	ldrd	r6, [sp, #8]
   1e4b8:	add	sp, sp, #16
   1e4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4c0:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

0001e4c4 <flatcc_builder_exit_user_frame@@Base>:
   1e4c4:	ldr	r2, [r0, #224]	; 0xe0
   1e4c8:	cmp	r2, #0
   1e4cc:	beq	1e4f4 <flatcc_builder_exit_user_frame@@Base+0x30>
   1e4d0:	mov	r3, r0
   1e4d4:	sub	r0, r2, #4
   1e4d8:	ldr	r1, [r3, #108]	; 0x6c
   1e4dc:	str	r0, [r3, #228]	; 0xe4
   1e4e0:	add	r2, r1, r2
   1e4e4:	ldr	r2, [r2, #-4]
   1e4e8:	mov	r0, r2
   1e4ec:	str	r2, [r3, #224]	; 0xe0
   1e4f0:	bx	lr
   1e4f4:	str	r4, [sp, #-8]!
   1e4f8:	str	lr, [sp, #4]
   1e4fc:	bl	1dcbc <flatcc_builder_default_alloc@@Base+0x1ec>

0001e500 <flatcc_builder_exit_user_frame_at@@Base>:
   1e500:	ldr	r2, [r0, #224]	; 0xe0
   1e504:	str	r4, [sp, #-8]!
   1e508:	str	lr, [sp, #4]
   1e50c:	cmp	r2, r1
   1e510:	bcc	1e54c <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   1e514:	cmp	r1, #0
   1e518:	mov	r3, r0
   1e51c:	str	r1, [r0, #224]	; 0xe0
   1e520:	beq	1e568 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   1e524:	ldr	r2, [r3, #108]	; 0x6c
   1e528:	sub	r0, r1, #4
   1e52c:	ldr	r4, [sp]
   1e530:	add	sp, sp, #4
   1e534:	str	r0, [r3, #228]	; 0xe4
   1e538:	add	r1, r2, r1
   1e53c:	ldr	r2, [r1, #-4]
   1e540:	mov	r0, r2
   1e544:	str	r2, [r3, #224]	; 0xe0
   1e548:	pop	{pc}		; (ldr pc, [sp], #4)
   1e54c:	movw	r1, #36740	; 0x8f84
   1e550:	movt	r1, #2
   1e554:	ldr	r3, [pc, #16]	; 1e56c <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   1e558:	movw	r0, #36964	; 0x9064
   1e55c:	movt	r0, #2
   1e560:	movw	r2, #551	; 0x227
   1e564:	bl	12a64 <__assert_fail@plt>
   1e568:	bl	1dcbc <flatcc_builder_default_alloc@@Base+0x1ec>
   1e56c:	andeq	r8, r2, r8, lsl fp

0001e570 <flatcc_builder_get_current_user_frame@@Base>:
   1e570:	ldr	r0, [r0, #224]	; 0xe0
   1e574:	bx	lr

0001e578 <flatcc_builder_get_user_frame_ptr@@Base>:
   1e578:	ldr	r0, [r0, #108]	; 0x6c
   1e57c:	add	r0, r0, r1
   1e580:	bx	lr

0001e584 <flatcc_builder_embed_buffer@@Base>:
   1e584:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1e588:	mov	r5, r0
   1e58c:	ldr	r0, [r0, #152]	; 0x98
   1e590:	strd	r6, [sp, #8]
   1e594:	mov	r7, r2
   1e598:	mov	r6, r3
   1e59c:	strd	r8, [sp, #16]
   1e5a0:	str	sl, [sp, #24]
   1e5a4:	str	lr, [sp, #28]
   1e5a8:	sub	sp, sp, #88	; 0x58
   1e5ac:	ldrh	r4, [sp, #120]	; 0x78
   1e5b0:	ldr	r8, [sp, #124]	; 0x7c
   1e5b4:	cmp	r4, #4
   1e5b8:	movcc	r4, #4
   1e5bc:	cmp	r1, #0
   1e5c0:	and	r8, r8, #2
   1e5c4:	bne	1e5d4 <flatcc_builder_embed_buffer@@Base+0x50>
   1e5c8:	ldrh	r1, [r5, #132]	; 0x84
   1e5cc:	cmp	r1, #0
   1e5d0:	beq	1e5f4 <flatcc_builder_embed_buffer@@Base+0x70>
   1e5d4:	cmp	r1, r4
   1e5d8:	movcs	r4, r1
   1e5dc:	cmp	r0, #0
   1e5e0:	bne	1e5f4 <flatcc_builder_embed_buffer@@Base+0x70>
   1e5e4:	ldr	r9, [r5, #140]	; 0x8c
   1e5e8:	sub	r1, r1, #1
   1e5ec:	ands	r1, r1, r9
   1e5f0:	bne	1e71c <flatcc_builder_embed_buffer@@Base+0x198>
   1e5f4:	ldr	r1, [r5, #136]	; 0x88
   1e5f8:	cmp	r8, #0
   1e5fc:	sub	r4, r4, #1
   1e600:	movne	ip, #4
   1e604:	moveq	ip, #0
   1e608:	mov	r2, #0
   1e60c:	cmp	r0, r2
   1e610:	str	r2, [sp, #16]
   1e614:	sub	r3, r1, r6
   1e618:	str	r2, [sp, #20]
   1e61c:	sub	r3, r3, ip
   1e620:	and	r4, r4, r3
   1e624:	add	r3, r6, r4
   1e628:	str	r3, [sp, #12]
   1e62c:	bne	1e6ec <flatcc_builder_embed_buffer@@Base+0x168>
   1e630:	mov	lr, #2
   1e634:	mov	r3, #1
   1e638:	mov	r2, r0
   1e63c:	cmp	r6, #0
   1e640:	beq	1e66c <flatcc_builder_embed_buffer@@Base+0xe8>
   1e644:	add	r2, r2, #1
   1e648:	add	ip, sp, #88	; 0x58
   1e64c:	add	ip, ip, r2, lsl #3
   1e650:	add	r0, r0, r6
   1e654:	mov	r2, r3
   1e658:	str	r0, [sp, #16]
   1e65c:	str	r7, [ip, #-72]	; 0xffffffb8
   1e660:	str	r6, [ip, #-68]	; 0xffffffbc
   1e664:	str	r3, [sp, #20]
   1e668:	mov	r3, lr
   1e66c:	cmp	r4, #0
   1e670:	beq	1e69c <flatcc_builder_embed_buffer@@Base+0x118>
   1e674:	ldr	lr, [pc, #312]	; 1e7b4 <flatcc_builder_embed_buffer@@Base+0x230>
   1e678:	add	r2, r2, #1
   1e67c:	add	ip, sp, #88	; 0x58
   1e680:	add	ip, ip, r2, lsl #3
   1e684:	add	r0, r0, r4
   1e688:	mov	r2, r3
   1e68c:	str	r0, [sp, #16]
   1e690:	str	lr, [ip, #-72]	; 0xffffffb8
   1e694:	str	r4, [ip, #-68]	; 0xffffffbc
   1e698:	str	r3, [sp, #20]
   1e69c:	sub	r4, r1, r0
   1e6a0:	cmp	r1, r4
   1e6a4:	ble	1e774 <flatcc_builder_embed_buffer@@Base+0x1f0>
   1e6a8:	mov	r3, r4
   1e6ac:	add	r1, sp, #24
   1e6b0:	str	r0, [sp]
   1e6b4:	ldr	r0, [r5, #36]	; 0x24
   1e6b8:	ldr	r6, [r5, #44]	; 0x2c
   1e6bc:	blx	r6
   1e6c0:	cmp	r0, #0
   1e6c4:	bne	1e770 <flatcc_builder_embed_buffer@@Base+0x1ec>
   1e6c8:	mov	r0, r4
   1e6cc:	str	r4, [r5, #136]	; 0x88
   1e6d0:	add	sp, sp, #88	; 0x58
   1e6d4:	ldrd	r4, [sp]
   1e6d8:	ldrd	r6, [sp, #8]
   1e6dc:	ldrd	r8, [sp, #16]
   1e6e0:	ldr	sl, [sp, #24]
   1e6e4:	add	sp, sp, #28
   1e6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6ec:	mov	ip, #4
   1e6f0:	mov	r3, #1
   1e6f4:	add	r8, sp, #12
   1e6f8:	mov	r2, r3
   1e6fc:	mov	r0, ip
   1e700:	mov	lr, #3
   1e704:	str	ip, [sp, #16]
   1e708:	str	r3, [sp, #20]
   1e70c:	mov	r3, #2
   1e710:	str	r8, [sp, #24]
   1e714:	str	ip, [sp, #28]
   1e718:	b	1e63c <flatcc_builder_embed_buffer@@Base+0xb8>
   1e71c:	ldr	r3, [pc, #144]	; 1e7b4 <flatcc_builder_embed_buffer@@Base+0x230>
   1e720:	add	r0, r9, r1
   1e724:	mov	r2, #1
   1e728:	cmp	r9, r0
   1e72c:	str	r1, [sp, #16]
   1e730:	str	r0, [r5, #140]	; 0x8c
   1e734:	strd	r2, [sp, #20]
   1e738:	str	r1, [sp, #28]
   1e73c:	bgt	1e790 <flatcc_builder_embed_buffer@@Base+0x20c>
   1e740:	mov	r3, r9
   1e744:	str	r1, [sp]
   1e748:	add	r1, sp, #24
   1e74c:	ldr	r0, [r5, #36]	; 0x24
   1e750:	ldr	sl, [r5, #44]	; 0x2c
   1e754:	blx	sl
   1e758:	cmp	r0, #0
   1e75c:	bne	1e7b0 <flatcc_builder_embed_buffer@@Base+0x22c>
   1e760:	cmn	r9, #1
   1e764:	beq	1e7ac <flatcc_builder_embed_buffer@@Base+0x228>
   1e768:	ldr	r0, [r5, #152]	; 0x98
   1e76c:	b	1e5f4 <flatcc_builder_embed_buffer@@Base+0x70>
   1e770:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   1e774:	movw	r1, #36740	; 0x8f84
   1e778:	movt	r1, #2
   1e77c:	ldr	r3, [pc, #52]	; 1e7b8 <flatcc_builder_embed_buffer@@Base+0x234>
   1e780:	movw	r0, #36924	; 0x903c
   1e784:	movt	r0, #2
   1e788:	movw	r2, #647	; 0x287
   1e78c:	bl	12a64 <__assert_fail@plt>
   1e790:	movw	r1, #36740	; 0x8f84
   1e794:	movt	r1, #2
   1e798:	movw	r0, #36924	; 0x903c
   1e79c:	movt	r0, #2
   1e7a0:	sub	r3, r3, #152	; 0x98
   1e7a4:	movw	r2, #673	; 0x2a1
   1e7a8:	bl	12a64 <__assert_fail@plt>
   1e7ac:	bl	1dc44 <flatcc_builder_default_alloc@@Base+0x174>
   1e7b0:	bl	1dc1c <flatcc_builder_default_alloc@@Base+0x14c>
   1e7b4:	ldrdeq	r8, [r2], -ip
   1e7b8:	andeq	r8, r2, r0, ror #16

0001e7bc <flatcc_builder_create_buffer@@Base>:
   1e7bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e7c0:	mov	ip, #0
   1e7c4:	mov	r5, r0
   1e7c8:	strd	r6, [sp, #8]
   1e7cc:	mov	r7, r3
   1e7d0:	strd	r8, [sp, #16]
   1e7d4:	mov	r9, r1
   1e7d8:	strd	sl, [sp, #24]
   1e7dc:	str	lr, [sp, #32]
   1e7e0:	sub	sp, sp, #100	; 0x64
   1e7e4:	ldrh	r4, [sp, #136]	; 0x88
   1e7e8:	str	ip, [sp, #20]
   1e7ec:	ldr	r6, [sp, #140]	; 0x8c
   1e7f0:	cmp	r4, #4
   1e7f4:	movcc	r4, #4
   1e7f8:	cmp	r2, #0
   1e7fc:	and	r8, r6, #1
   1e800:	bne	1e810 <flatcc_builder_create_buffer@@Base+0x54>
   1e804:	ldrh	r2, [r0, #132]	; 0x84
   1e808:	cmp	r2, ip
   1e80c:	beq	1e830 <flatcc_builder_create_buffer@@Base+0x74>
   1e810:	cmp	r2, r4
   1e814:	movcs	r4, r2
   1e818:	cmp	r8, #0
   1e81c:	bne	1e830 <flatcc_builder_create_buffer@@Base+0x74>
   1e820:	ldr	sl, [r5, #140]	; 0x8c
   1e824:	sub	r2, r2, #1
   1e828:	ands	r1, r2, sl
   1e82c:	bne	1e9c4 <flatcc_builder_create_buffer@@Base+0x208>
   1e830:	ldrh	r3, [r5, #128]	; 0x80
   1e834:	ldr	r0, [r5, #136]	; 0x88
   1e838:	cmp	r3, r4
   1e83c:	strhcc	r4, [r5, #128]	; 0x80
   1e840:	cmp	r9, #0
   1e844:	sub	r4, r4, #1
   1e848:	ldrne	r3, [r9]
   1e84c:	ldreq	r1, [sp, #20]
   1e850:	movne	r1, r3
   1e854:	strne	r3, [sp, #20]
   1e858:	sub	r3, r0, #4
   1e85c:	cmp	r1, #0
   1e860:	movne	r1, #4
   1e864:	tst	r6, #2
   1e868:	movne	r2, #4
   1e86c:	moveq	r2, #0
   1e870:	sub	r3, r3, r1
   1e874:	ands	r6, r6, #3
   1e878:	sub	r3, r3, r2
   1e87c:	and	r4, r4, r3
   1e880:	bne	1e99c <flatcc_builder_create_buffer@@Base+0x1e0>
   1e884:	mov	r3, r6
   1e888:	mov	r9, #3
   1e88c:	mov	lr, #2
   1e890:	mov	r2, #1
   1e894:	mov	ip, #4
   1e898:	add	fp, sp, #96	; 0x60
   1e89c:	add	r3, r3, #1
   1e8a0:	str	ip, [sp, #24]
   1e8a4:	add	r3, fp, r3, lsl #3
   1e8a8:	add	sl, sp, #12
   1e8ac:	mov	fp, #4
   1e8b0:	cmp	r1, #0
   1e8b4:	strd	sl, [r3, #-72]	; 0xffffffb8
   1e8b8:	str	r2, [sp, #28]
   1e8bc:	beq	1e8ec <flatcc_builder_create_buffer@@Base+0x130>
   1e8c0:	add	r2, r2, #1
   1e8c4:	add	r3, sp, #96	; 0x60
   1e8c8:	add	r3, r3, r2, lsl #3
   1e8cc:	add	ip, ip, r1
   1e8d0:	add	sl, sp, #20
   1e8d4:	mov	r2, lr
   1e8d8:	str	ip, [sp, #24]
   1e8dc:	str	sl, [r3, #-72]	; 0xffffffb8
   1e8e0:	str	r1, [r3, #-68]	; 0xffffffbc
   1e8e4:	str	lr, [sp, #28]
   1e8e8:	mov	lr, r9
   1e8ec:	cmp	r4, #0
   1e8f0:	beq	1e91c <flatcc_builder_create_buffer@@Base+0x160>
   1e8f4:	ldr	r1, [pc, #372]	; 1ea70 <flatcc_builder_create_buffer@@Base+0x2b4>
   1e8f8:	add	r2, r2, #1
   1e8fc:	add	r3, sp, #96	; 0x60
   1e900:	add	r3, r3, r2, lsl #3
   1e904:	add	ip, ip, r4
   1e908:	mov	r2, lr
   1e90c:	str	ip, [sp, #24]
   1e910:	str	r1, [r3, #-72]	; 0xffffffb8
   1e914:	str	r4, [r3, #-68]	; 0xffffffbc
   1e918:	str	lr, [sp, #28]
   1e91c:	sub	r4, r0, ip
   1e920:	cmp	r6, #0
   1e924:	mov	r1, r4
   1e928:	addne	r1, r4, #4
   1e92c:	cmp	r8, #0
   1e930:	sub	r7, r7, r1
   1e934:	ldrne	r3, [r5, #144]	; 0x90
   1e938:	str	r7, [sp, #12]
   1e93c:	ldreq	r3, [r5, #140]	; 0x8c
   1e940:	cmp	r0, r4
   1e944:	sub	r3, r3, r1
   1e948:	str	r3, [sp, #16]
   1e94c:	ble	1ea14 <flatcc_builder_create_buffer@@Base+0x258>
   1e950:	mov	r3, r4
   1e954:	add	r1, sp, #32
   1e958:	str	ip, [sp]
   1e95c:	ldr	r0, [r5, #36]	; 0x24
   1e960:	ldr	r6, [r5, #44]	; 0x2c
   1e964:	blx	r6
   1e968:	cmp	r0, #0
   1e96c:	bne	1ea30 <flatcc_builder_create_buffer@@Base+0x274>
   1e970:	cmp	r4, #0
   1e974:	str	r4, [r5, #136]	; 0x88
   1e978:	beq	1ea34 <flatcc_builder_create_buffer@@Base+0x278>
   1e97c:	mov	r0, r4
   1e980:	add	sp, sp, #100	; 0x64
   1e984:	ldrd	r4, [sp]
   1e988:	ldrd	r6, [sp, #8]
   1e98c:	ldrd	r8, [sp, #16]
   1e990:	ldrd	sl, [sp, #24]
   1e994:	add	sp, sp, #32
   1e998:	pop	{pc}		; (ldr pc, [sp], #4)
   1e99c:	mov	ip, #4
   1e9a0:	add	r3, sp, #16
   1e9a4:	mov	r9, ip
   1e9a8:	mov	lr, #3
   1e9ac:	mov	r2, #2
   1e9b0:	str	r3, [sp, #32]
   1e9b4:	mov	r3, #1
   1e9b8:	str	ip, [sp, #36]	; 0x24
   1e9bc:	mov	ip, #8
   1e9c0:	b	1e898 <flatcc_builder_create_buffer@@Base+0xdc>
   1e9c4:	ldr	r3, [pc, #164]	; 1ea70 <flatcc_builder_create_buffer@@Base+0x2b4>
   1e9c8:	add	r0, sl, r1
   1e9cc:	mov	r2, #1
   1e9d0:	cmp	sl, r0
   1e9d4:	str	r1, [sp, #24]
   1e9d8:	str	r0, [r5, #140]	; 0x8c
   1e9dc:	strd	r2, [sp, #28]
   1e9e0:	str	r1, [sp, #36]	; 0x24
   1e9e4:	bgt	1ea54 <flatcc_builder_create_buffer@@Base+0x298>
   1e9e8:	mov	r3, sl
   1e9ec:	str	r1, [sp]
   1e9f0:	add	r1, sp, #32
   1e9f4:	ldr	r0, [r5, #36]	; 0x24
   1e9f8:	ldr	fp, [r5, #44]	; 0x2c
   1e9fc:	blx	fp
   1ea00:	cmp	r0, #0
   1ea04:	bne	1ea50 <flatcc_builder_create_buffer@@Base+0x294>
   1ea08:	cmn	sl, #1
   1ea0c:	bne	1e830 <flatcc_builder_create_buffer@@Base+0x74>
   1ea10:	bl	1dc44 <flatcc_builder_default_alloc@@Base+0x174>
   1ea14:	movw	r1, #36740	; 0x8f84
   1ea18:	movt	r1, #2
   1ea1c:	ldr	r3, [pc, #80]	; 1ea74 <flatcc_builder_create_buffer@@Base+0x2b8>
   1ea20:	movw	r0, #36924	; 0x903c
   1ea24:	movt	r0, #2
   1ea28:	movw	r2, #647	; 0x287
   1ea2c:	bl	12a64 <__assert_fail@plt>
   1ea30:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   1ea34:	movw	r1, #36740	; 0x8f84
   1ea38:	movt	r1, #2
   1ea3c:	ldr	r3, [pc, #52]	; 1ea78 <flatcc_builder_create_buffer@@Base+0x2bc>
   1ea40:	movw	r0, #36924	; 0x903c
   1ea44:	movt	r0, #2
   1ea48:	mov	r2, #772	; 0x304
   1ea4c:	bl	12a64 <__assert_fail@plt>
   1ea50:	bl	1dc1c <flatcc_builder_default_alloc@@Base+0x14c>
   1ea54:	movw	r1, #36740	; 0x8f84
   1ea58:	movt	r1, #2
   1ea5c:	movw	r0, #36924	; 0x903c
   1ea60:	movt	r0, #2
   1ea64:	sub	r3, r3, #152	; 0x98
   1ea68:	movw	r2, #673	; 0x2a1
   1ea6c:	bl	12a64 <__assert_fail@plt>
   1ea70:	ldrdeq	r8, [r2], -ip
   1ea74:	andeq	r8, r2, r0, ror #16
   1ea78:	andeq	r8, r2, ip, lsr fp

0001ea7c <flatcc_builder_create_struct@@Base>:
   1ea7c:	cmp	r3, #0
   1ea80:	strd	r4, [sp, #-16]!
   1ea84:	str	r6, [sp, #8]
   1ea88:	str	lr, [sp, #12]
   1ea8c:	sub	sp, sp, #80	; 0x50
   1ea90:	beq	1eb94 <flatcc_builder_create_struct@@Base+0x118>
   1ea94:	mov	r4, r0
   1ea98:	mov	r0, r2
   1ea9c:	ldrh	r2, [r4, #128]	; 0x80
   1eaa0:	ldr	ip, [r4, #136]	; 0x88
   1eaa4:	cmp	r2, r3
   1eaa8:	mov	r2, #0
   1eaac:	strhcc	r3, [r4, #128]	; 0x80
   1eab0:	sub	r5, ip, r0
   1eab4:	sub	r3, r3, #1
   1eab8:	cmp	r0, r2
   1eabc:	and	r3, r3, r5
   1eac0:	str	r2, [sp, #8]
   1eac4:	str	r2, [sp, #12]
   1eac8:	bne	1eb48 <flatcc_builder_create_struct@@Base+0xcc>
   1eacc:	cmp	r3, #0
   1ead0:	movne	r1, r2
   1ead4:	movne	r0, r3
   1ead8:	movne	r2, #1
   1eadc:	beq	1eb74 <flatcc_builder_create_struct@@Base+0xf8>
   1eae0:	ldr	lr, [pc, #200]	; 1ebb0 <flatcc_builder_create_struct@@Base+0x134>
   1eae4:	add	r5, sp, #80	; 0x50
   1eae8:	add	r1, r1, #1
   1eaec:	add	r1, r5, r1, lsl #3
   1eaf0:	sub	r5, ip, r0
   1eaf4:	str	r0, [sp, #8]
   1eaf8:	str	r2, [sp, #12]
   1eafc:	str	lr, [r1, #-72]	; 0xffffffb8
   1eb00:	str	r3, [r1, #-68]	; 0xffffffbc
   1eb04:	cmp	ip, r5
   1eb08:	ble	1eb74 <flatcc_builder_create_struct@@Base+0xf8>
   1eb0c:	mov	r3, r5
   1eb10:	add	r1, sp, #16
   1eb14:	str	r0, [sp]
   1eb18:	ldr	r0, [r4, #36]	; 0x24
   1eb1c:	ldr	r6, [r4, #44]	; 0x2c
   1eb20:	blx	r6
   1eb24:	cmp	r0, #0
   1eb28:	bne	1eb90 <flatcc_builder_create_struct@@Base+0x114>
   1eb2c:	mov	r0, r5
   1eb30:	str	r5, [r4, #136]	; 0x88
   1eb34:	add	sp, sp, #80	; 0x50
   1eb38:	ldrd	r4, [sp]
   1eb3c:	ldr	r6, [sp, #8]
   1eb40:	add	sp, sp, #12
   1eb44:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb48:	mov	r2, #1
   1eb4c:	cmp	r3, #0
   1eb50:	str	r0, [sp, #8]
   1eb54:	str	r2, [sp, #12]
   1eb58:	str	r1, [sp, #16]
   1eb5c:	movne	r1, r2
   1eb60:	movne	r2, #2
   1eb64:	str	r0, [sp, #20]
   1eb68:	addne	r0, r0, r3
   1eb6c:	beq	1eb04 <flatcc_builder_create_struct@@Base+0x88>
   1eb70:	b	1eae0 <flatcc_builder_create_struct@@Base+0x64>
   1eb74:	movw	r1, #36740	; 0x8f84
   1eb78:	movt	r1, #2
   1eb7c:	ldr	r3, [pc, #48]	; 1ebb4 <flatcc_builder_create_struct@@Base+0x138>
   1eb80:	movw	r0, #36924	; 0x903c
   1eb84:	movt	r0, #2
   1eb88:	movw	r2, #647	; 0x287
   1eb8c:	bl	12a64 <__assert_fail@plt>
   1eb90:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   1eb94:	movw	r1, #36740	; 0x8f84
   1eb98:	movt	r1, #2
   1eb9c:	ldr	r3, [pc, #20]	; 1ebb8 <flatcc_builder_create_struct@@Base+0x13c>
   1eba0:	movw	r0, #36996	; 0x9084
   1eba4:	movt	r0, #2
   1eba8:	movw	r2, #783	; 0x30f
   1ebac:	bl	12a64 <__assert_fail@plt>
   1ebb0:	ldrdeq	r8, [r2], -ip
   1ebb4:	andeq	r8, r2, r0, ror #16
   1ebb8:	andeq	r8, r2, ip, asr fp

0001ebbc <flatcc_builder_start_buffer@@Base>:
   1ebbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ebc0:	mov	r5, r1
   1ebc4:	mov	r4, r0
   1ebc8:	ldr	r1, [r0, #156]	; 0x9c
   1ebcc:	strd	r6, [sp, #8]
   1ebd0:	mov	r6, r3
   1ebd4:	mov	r7, r2
   1ebd8:	ldr	r3, [r0, #160]	; 0xa0
   1ebdc:	strd	r8, [sp, #16]
   1ebe0:	ldrh	r8, [r0, #128]	; 0x80
   1ebe4:	add	r2, r1, #1
   1ebe8:	strd	sl, [sp, #24]
   1ebec:	str	lr, [sp, #32]
   1ebf0:	sub	sp, sp, #12
   1ebf4:	cmp	r2, r3
   1ebf8:	str	r2, [r0, #156]	; 0x9c
   1ebfc:	ble	1ed48 <flatcc_builder_start_buffer@@Base+0x18c>
   1ec00:	ldr	r3, [r0, #176]	; 0xb0
   1ec04:	cmp	r3, #0
   1ec08:	cmpgt	r2, r3
   1ec0c:	movgt	r3, #1
   1ec10:	movle	r3, #0
   1ec14:	bgt	1ed58 <flatcc_builder_start_buffer@@Base+0x19c>
   1ec18:	add	r1, r1, r1, lsl #3
   1ec1c:	ldr	r0, [r0, #88]	; 0x58
   1ec20:	lsl	r9, r1, #2
   1ec24:	add	r2, r9, #36	; 0x24
   1ec28:	cmp	r2, r0
   1ec2c:	bls	1ec50 <flatcc_builder_start_buffer@@Base+0x94>
   1ec30:	mov	ip, #4
   1ec34:	add	r1, r4, #84	; 0x54
   1ec38:	ldr	r0, [r4, #40]	; 0x28
   1ec3c:	str	ip, [sp]
   1ec40:	ldr	sl, [r4, #48]	; 0x30
   1ec44:	blx	sl
   1ec48:	cmp	r0, #0
   1ec4c:	bne	1ed60 <flatcc_builder_start_buffer@@Base+0x1a4>
   1ec50:	ldr	r3, [r4, #84]	; 0x54
   1ec54:	add	r3, r3, r9
   1ec58:	cmp	r3, #0
   1ec5c:	str	r3, [r4, #32]
   1ec60:	beq	1ed58 <flatcc_builder_start_buffer@@Base+0x19c>
   1ec64:	ldr	r2, [r4, #88]	; 0x58
   1ec68:	movw	r0, #36409	; 0x8e39
   1ec6c:	movt	r0, #14563	; 0x38e3
   1ec70:	ldr	r1, [r4, #176]	; 0xb0
   1ec74:	umull	r0, r2, r0, r2
   1ec78:	lsr	r2, r2, #3
   1ec7c:	cmp	r1, #0
   1ec80:	cmpgt	r2, r1
   1ec84:	movgt	r2, r1
   1ec88:	str	r2, [r4, #160]	; 0xa0
   1ec8c:	ldr	sl, [pc, #208]	; 1ed64 <flatcc_builder_start_buffer@@Base+0x1a8>
   1ec90:	mov	r0, #0
   1ec94:	mvn	lr, #3
   1ec98:	cmp	r5, r0
   1ec9c:	ldr	r2, [r4, #20]
   1eca0:	ldr	ip, [r4, #28]
   1eca4:	moveq	r5, sl
   1eca8:	ldrh	r9, [r4, #130]	; 0x82
   1ecac:	ldrh	fp, [r4, #132]	; 0x84
   1ecb0:	ldr	r1, [r4, #148]	; 0x94
   1ecb4:	ldr	sl, [r4, #152]	; 0x98
   1ecb8:	str	r2, [r3, #8]
   1ecbc:	add	r2, r2, ip
   1ecc0:	add	r2, r2, #7
   1ecc4:	strh	r9, [r3, #12]
   1ecc8:	bic	r2, r2, #7
   1eccc:	strh	r8, [r4, #130]	; 0x82
   1ecd0:	ldrh	r8, [r4, #164]	; 0xa4
   1ecd4:	ldr	r9, [r4, #136]	; 0x88
   1ecd8:	stm	r3, {ip, lr}
   1ecdc:	mov	ip, #1
   1ece0:	str	r0, [r4, #20]
   1ece4:	str	r2, [r4, #28]
   1ece8:	add	r2, r1, ip
   1ecec:	strh	ip, [r4, #128]	; 0x80
   1ecf0:	ldr	lr, [r4, #144]	; 0x90
   1ecf4:	strh	fp, [r3, #34]	; 0x22
   1ecf8:	strh	r7, [r4, #132]	; 0x84
   1ecfc:	ldr	r7, [r4, #168]	; 0xa8
   1ed00:	strh	r8, [r3, #32]
   1ed04:	strh	r6, [r4, #164]	; 0xa4
   1ed08:	str	lr, [r3, #20]
   1ed0c:	str	sl, [r3, #28]
   1ed10:	str	r9, [r4, #144]	; 0x90
   1ed14:	str	r2, [r4, #148]	; 0x94
   1ed18:	str	r1, [r4, #152]	; 0x98
   1ed1c:	str	r7, [r3, #16]
   1ed20:	ldr	r2, [r5]
   1ed24:	str	r2, [r4, #168]	; 0xa8
   1ed28:	strh	ip, [r3, #14]
   1ed2c:	add	sp, sp, #12
   1ed30:	ldrd	r4, [sp]
   1ed34:	ldrd	r6, [sp, #8]
   1ed38:	ldrd	r8, [sp, #16]
   1ed3c:	ldrd	sl, [sp, #24]
   1ed40:	add	sp, sp, #32
   1ed44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed48:	ldr	r3, [r0, #32]
   1ed4c:	add	r3, r3, #36	; 0x24
   1ed50:	str	r3, [r0, #32]
   1ed54:	b	1ec8c <flatcc_builder_start_buffer@@Base+0xd0>
   1ed58:	mvn	r0, #0
   1ed5c:	b	1ed2c <flatcc_builder_start_buffer@@Base+0x170>
   1ed60:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>
   1ed64:	ldrdeq	r8, [r2], -ip

0001ed68 <flatcc_builder_end_buffer@@Base>:
   1ed68:	ldr	ip, [r0, #32]
   1ed6c:	strd	r4, [sp, #-16]!
   1ed70:	mov	r4, r0
   1ed74:	ldrh	r2, [r0, #164]	; 0xa4
   1ed78:	ldr	r0, [r0, #152]	; 0x98
   1ed7c:	ldrh	ip, [ip, #14]
   1ed80:	and	r2, r2, #2
   1ed84:	str	r6, [sp, #8]
   1ed88:	str	lr, [sp, #12]
   1ed8c:	sub	sp, sp, #8
   1ed90:	cmp	r0, #0
   1ed94:	moveq	r0, r2
   1ed98:	orrne	r0, r2, #1
   1ed9c:	cmp	ip, #1
   1eda0:	bne	1ee88 <flatcc_builder_end_buffer@@Base+0x120>
   1eda4:	ldrh	r2, [r4, #132]	; 0x84
   1eda8:	mov	r3, r1
   1edac:	add	r1, r4, #168	; 0xa8
   1edb0:	ldrh	ip, [r4, #128]	; 0x80
   1edb4:	cmp	r2, ip
   1edb8:	movhi	ip, r2
   1edbc:	strhhi	r2, [r4, #128]	; 0x80
   1edc0:	str	ip, [sp]
   1edc4:	str	r0, [sp, #4]
   1edc8:	mov	r0, r4
   1edcc:	bl	1e7bc <flatcc_builder_create_buffer@@Base>
   1edd0:	subs	r5, r0, #0
   1edd4:	beq	1ee70 <flatcc_builder_end_buffer@@Base+0x108>
   1edd8:	mov	r1, #0
   1eddc:	ldr	r0, [r4, #16]
   1ede0:	ldr	r3, [r4, #32]
   1ede4:	ldr	r2, [r4, #20]
   1ede8:	ldrh	lr, [r3, #32]
   1edec:	ldr	ip, [r3, #16]
   1edf0:	ldr	r6, [r3, #20]
   1edf4:	ldr	r3, [r3, #28]
   1edf8:	str	r6, [r4, #144]	; 0x90
   1edfc:	strh	lr, [r4, #164]	; 0xa4
   1ee00:	str	r3, [r4, #152]	; 0x98
   1ee04:	str	ip, [r4, #168]	; 0xa8
   1ee08:	bl	12a1c <memset@plt>
   1ee0c:	ldr	r3, [r4, #32]
   1ee10:	ldr	r0, [r4, #60]	; 0x3c
   1ee14:	ldr	r2, [r4, #64]	; 0x40
   1ee18:	ldr	ip, [r3]
   1ee1c:	ldmib	r3, {r1, lr}
   1ee20:	add	r0, r0, ip
   1ee24:	sub	r2, r2, ip
   1ee28:	str	r0, [r4, #16]
   1ee2c:	cmp	r2, r1
   1ee30:	ldrh	r0, [r4, #128]	; 0x80
   1ee34:	movcs	r2, r1
   1ee38:	str	lr, [r4, #20]
   1ee3c:	str	ip, [r4, #28]
   1ee40:	ldrh	ip, [r4, #130]	; 0x82
   1ee44:	str	r2, [r4, #24]
   1ee48:	ldr	r2, [r4, #156]	; 0x9c
   1ee4c:	str	r1, [r3, #4]
   1ee50:	cmp	r0, ip
   1ee54:	sub	r0, r3, #36	; 0x24
   1ee58:	strhcc	ip, [r4, #128]	; 0x80
   1ee5c:	ldrh	r1, [r3, #12]
   1ee60:	sub	r3, r2, #1
   1ee64:	str	r0, [r4, #32]
   1ee68:	strh	r1, [r4, #130]	; 0x82
   1ee6c:	str	r3, [r4, #156]	; 0x9c
   1ee70:	mov	r0, r5
   1ee74:	add	sp, sp, #8
   1ee78:	ldrd	r4, [sp]
   1ee7c:	ldr	r6, [sp, #8]
   1ee80:	add	sp, sp, #12
   1ee84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee88:	movw	r1, #36740	; 0x8f84
   1ee8c:	movt	r1, #2
   1ee90:	ldr	r3, [pc, #12]	; 1eea4 <flatcc_builder_end_buffer@@Base+0x13c>
   1ee94:	movw	r0, #37008	; 0x9090
   1ee98:	movt	r0, #2
   1ee9c:	movw	r2, #838	; 0x346
   1eea0:	bl	12a64 <__assert_fail@plt>
   1eea4:	andeq	r8, r2, ip, ror fp

0001eea8 <flatcc_builder_start_struct@@Base>:
   1eea8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1eeac:	mov	r5, r1
   1eeb0:	mov	r4, r0
   1eeb4:	ldr	r1, [r0, #156]	; 0x9c
   1eeb8:	ldr	r3, [r0, #160]	; 0xa0
   1eebc:	strd	r6, [sp, #8]
   1eec0:	mov	r6, r2
   1eec4:	str	r8, [sp, #16]
   1eec8:	add	r2, r1, #1
   1eecc:	str	lr, [sp, #20]
   1eed0:	sub	sp, sp, #8
   1eed4:	cmp	r2, r3
   1eed8:	str	r2, [r0, #156]	; 0x9c
   1eedc:	ble	1effc <flatcc_builder_start_struct@@Base+0x154>
   1eee0:	ldr	r3, [r0, #176]	; 0xb0
   1eee4:	cmp	r3, #0
   1eee8:	cmpgt	r2, r3
   1eeec:	movgt	r3, #1
   1eef0:	movle	r3, #0
   1eef4:	bgt	1f068 <flatcc_builder_start_struct@@Base+0x1c0>
   1eef8:	add	r1, r1, r1, lsl #3
   1eefc:	ldr	r0, [r0, #88]	; 0x58
   1ef00:	lsl	r7, r1, #2
   1ef04:	add	r2, r7, #36	; 0x24
   1ef08:	cmp	r2, r0
   1ef0c:	bls	1ef30 <flatcc_builder_start_struct@@Base+0x88>
   1ef10:	mov	ip, #4
   1ef14:	add	r1, r4, #84	; 0x54
   1ef18:	ldr	r0, [r4, #40]	; 0x28
   1ef1c:	str	ip, [sp]
   1ef20:	ldr	r8, [r4, #48]	; 0x30
   1ef24:	blx	r8
   1ef28:	cmp	r0, #0
   1ef2c:	bne	1f070 <flatcc_builder_start_struct@@Base+0x1c8>
   1ef30:	ldr	r1, [r4, #84]	; 0x54
   1ef34:	add	r1, r1, r7
   1ef38:	cmp	r1, #0
   1ef3c:	str	r1, [r4, #32]
   1ef40:	beq	1f068 <flatcc_builder_start_struct@@Base+0x1c0>
   1ef44:	ldr	r3, [r4, #88]	; 0x58
   1ef48:	movw	r0, #36409	; 0x8e39
   1ef4c:	movt	r0, #14563	; 0x38e3
   1ef50:	ldr	r2, [r4, #176]	; 0xb0
   1ef54:	umull	r0, r3, r0, r3
   1ef58:	lsr	r3, r3, #3
   1ef5c:	cmp	r2, #0
   1ef60:	cmpgt	r3, r2
   1ef64:	movgt	r3, r2
   1ef68:	str	r3, [r4, #160]	; 0xa0
   1ef6c:	ldr	r3, [r4, #20]
   1ef70:	mvn	lr, #3
   1ef74:	ldr	ip, [r4, #28]
   1ef78:	ldrh	r7, [r4, #130]	; 0x82
   1ef7c:	ldr	r2, [r4, #64]	; 0x40
   1ef80:	ldr	r0, [r4, #60]	; 0x3c
   1ef84:	str	r3, [r1, #8]
   1ef88:	add	r3, r3, ip
   1ef8c:	add	r3, r3, #7
   1ef90:	strh	r7, [r1, #12]
   1ef94:	mov	r7, #0
   1ef98:	bic	r3, r3, #7
   1ef9c:	strh	r6, [r4, #130]	; 0x82
   1efa0:	mvn	r6, #3
   1efa4:	sub	r2, r2, r3
   1efa8:	stm	r1, {ip, lr}
   1efac:	mov	ip, #2
   1efb0:	cmp	r2, lr
   1efb4:	add	r0, r0, r3
   1efb8:	str	r7, [r4, #20]
   1efbc:	movhi	r2, lr
   1efc0:	str	r3, [r4, #28]
   1efc4:	strh	ip, [r1, #14]
   1efc8:	strls	r2, [r4, #24]
   1efcc:	strhi	lr, [r4, #24]
   1efd0:	cmp	r5, r2
   1efd4:	str	r0, [r4, #16]
   1efd8:	str	r6, [r1, #4]
   1efdc:	str	r5, [r4, #20]
   1efe0:	bcs	1f00c <flatcc_builder_start_struct@@Base+0x164>
   1efe4:	add	sp, sp, #8
   1efe8:	ldrd	r4, [sp]
   1efec:	ldrd	r6, [sp, #8]
   1eff0:	ldr	r8, [sp, #16]
   1eff4:	add	sp, sp, #20
   1eff8:	pop	{pc}		; (ldr pc, [sp], #4)
   1effc:	ldr	r1, [r0, #32]
   1f000:	add	r1, r1, #36	; 0x24
   1f004:	str	r1, [r0, #32]
   1f008:	b	1ef6c <flatcc_builder_start_struct@@Base+0xc4>
   1f00c:	mov	ip, #1
   1f010:	add	r1, r4, #60	; 0x3c
   1f014:	ldr	r0, [r4, #40]	; 0x28
   1f018:	add	r2, r5, ip
   1f01c:	add	r2, r2, r3
   1f020:	mov	r3, ip
   1f024:	str	ip, [sp]
   1f028:	ldr	r5, [r4, #48]	; 0x30
   1f02c:	blx	r5
   1f030:	cmp	r0, #0
   1f034:	bne	1f068 <flatcc_builder_start_struct@@Base+0x1c0>
   1f038:	ldr	r0, [r4, #28]
   1f03c:	ldr	r2, [r4, #32]
   1f040:	ldr	r3, [r4, #64]	; 0x40
   1f044:	ldr	r1, [r4, #60]	; 0x3c
   1f048:	sub	r3, r3, r0
   1f04c:	cmp	r3, r6
   1f050:	movhi	r3, r6
   1f054:	add	r0, r1, r0
   1f058:	str	r0, [r4, #16]
   1f05c:	str	r3, [r4, #24]
   1f060:	str	r6, [r2, #4]
   1f064:	b	1efe4 <flatcc_builder_start_struct@@Base+0x13c>
   1f068:	mov	r0, #0
   1f06c:	b	1efe4 <flatcc_builder_start_struct@@Base+0x13c>
   1f070:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

0001f074 <flatcc_builder_struct_edit@@Base>:
   1f074:	ldr	r0, [r0, #16]
   1f078:	bx	lr

0001f07c <flatcc_builder_end_struct@@Base>:
   1f07c:	ldr	r3, [r0, #32]
   1f080:	strd	r4, [sp, #-16]!
   1f084:	ldrh	r3, [r3, #14]
   1f088:	str	r6, [sp, #8]
   1f08c:	str	lr, [sp, #12]
   1f090:	sub	sp, sp, #80	; 0x50
   1f094:	cmp	r3, #2
   1f098:	bne	1f240 <flatcc_builder_end_struct@@Base+0x1c4>
   1f09c:	ldrh	r3, [r0, #130]	; 0x82
   1f0a0:	mov	r4, r0
   1f0a4:	ldr	r1, [r0, #16]
   1f0a8:	ldr	r0, [r0, #20]
   1f0ac:	cmp	r3, #0
   1f0b0:	beq	1f224 <flatcc_builder_end_struct@@Base+0x1a8>
   1f0b4:	ldrh	r2, [r4, #128]	; 0x80
   1f0b8:	ldr	ip, [r4, #136]	; 0x88
   1f0bc:	cmp	r2, r3
   1f0c0:	mov	r2, #0
   1f0c4:	strhcc	r3, [r4, #128]	; 0x80
   1f0c8:	sub	r5, ip, r0
   1f0cc:	sub	r3, r3, #1
   1f0d0:	cmp	r0, r2
   1f0d4:	and	r3, r3, r5
   1f0d8:	str	r2, [sp, #8]
   1f0dc:	str	r2, [sp, #12]
   1f0e0:	bne	1f1d8 <flatcc_builder_end_struct@@Base+0x15c>
   1f0e4:	cmp	r3, #0
   1f0e8:	movne	r1, r2
   1f0ec:	movne	r0, r3
   1f0f0:	movne	r2, #1
   1f0f4:	beq	1f204 <flatcc_builder_end_struct@@Base+0x188>
   1f0f8:	ldr	lr, [pc, #348]	; 1f25c <flatcc_builder_end_struct@@Base+0x1e0>
   1f0fc:	add	r5, sp, #80	; 0x50
   1f100:	add	r1, r1, #1
   1f104:	add	r1, r5, r1, lsl #3
   1f108:	sub	r5, ip, r0
   1f10c:	str	r0, [sp, #8]
   1f110:	str	r2, [sp, #12]
   1f114:	str	lr, [r1, #-72]	; 0xffffffb8
   1f118:	str	r3, [r1, #-68]	; 0xffffffbc
   1f11c:	cmp	ip, r5
   1f120:	ble	1f204 <flatcc_builder_end_struct@@Base+0x188>
   1f124:	add	r1, sp, #16
   1f128:	mov	r3, r5
   1f12c:	str	r0, [sp]
   1f130:	ldr	r0, [r4, #36]	; 0x24
   1f134:	ldr	r6, [r4, #44]	; 0x2c
   1f138:	blx	r6
   1f13c:	subs	r1, r0, #0
   1f140:	bne	1f220 <flatcc_builder_end_struct@@Base+0x1a4>
   1f144:	cmp	r5, #0
   1f148:	str	r5, [r4, #136]	; 0x88
   1f14c:	beq	1f1c0 <flatcc_builder_end_struct@@Base+0x144>
   1f150:	ldr	r0, [r4, #16]
   1f154:	ldr	r2, [r4, #20]
   1f158:	bl	12a1c <memset@plt>
   1f15c:	ldr	r3, [r4, #32]
   1f160:	ldr	r0, [r4, #60]	; 0x3c
   1f164:	ldr	r2, [r4, #64]	; 0x40
   1f168:	ldr	ip, [r3]
   1f16c:	ldmib	r3, {r1, lr}
   1f170:	add	r0, r0, ip
   1f174:	sub	r2, r2, ip
   1f178:	str	r0, [r4, #16]
   1f17c:	cmp	r2, r1
   1f180:	ldrh	r0, [r4, #128]	; 0x80
   1f184:	movcs	r2, r1
   1f188:	str	lr, [r4, #20]
   1f18c:	str	ip, [r4, #28]
   1f190:	ldrh	ip, [r4, #130]	; 0x82
   1f194:	str	r2, [r4, #24]
   1f198:	ldr	r2, [r4, #156]	; 0x9c
   1f19c:	str	r1, [r3, #4]
   1f1a0:	cmp	r0, ip
   1f1a4:	sub	r0, r3, #36	; 0x24
   1f1a8:	strhcc	ip, [r4, #128]	; 0x80
   1f1ac:	ldrh	r1, [r3, #12]
   1f1b0:	sub	r3, r2, #1
   1f1b4:	str	r0, [r4, #32]
   1f1b8:	strh	r1, [r4, #130]	; 0x82
   1f1bc:	str	r3, [r4, #156]	; 0x9c
   1f1c0:	mov	r0, r5
   1f1c4:	add	sp, sp, #80	; 0x50
   1f1c8:	ldrd	r4, [sp]
   1f1cc:	ldr	r6, [sp, #8]
   1f1d0:	add	sp, sp, #12
   1f1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1d8:	mov	r2, #1
   1f1dc:	cmp	r3, #0
   1f1e0:	str	r0, [sp, #8]
   1f1e4:	str	r2, [sp, #12]
   1f1e8:	str	r1, [sp, #16]
   1f1ec:	movne	r1, r2
   1f1f0:	movne	r2, #2
   1f1f4:	str	r0, [sp, #20]
   1f1f8:	addne	r0, r0, r3
   1f1fc:	beq	1f11c <flatcc_builder_end_struct@@Base+0xa0>
   1f200:	b	1f0f8 <flatcc_builder_end_struct@@Base+0x7c>
   1f204:	movw	r1, #36740	; 0x8f84
   1f208:	movt	r1, #2
   1f20c:	ldr	r3, [pc, #76]	; 1f260 <flatcc_builder_end_struct@@Base+0x1e4>
   1f210:	movw	r0, #36924	; 0x903c
   1f214:	movt	r0, #2
   1f218:	movw	r2, #647	; 0x287
   1f21c:	bl	12a64 <__assert_fail@plt>
   1f220:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   1f224:	movw	r1, #36740	; 0x8f84
   1f228:	movt	r1, #2
   1f22c:	ldr	r3, [pc, #48]	; 1f264 <flatcc_builder_end_struct@@Base+0x1e8>
   1f230:	movw	r0, #36996	; 0x9084
   1f234:	movt	r0, #2
   1f238:	movw	r2, #783	; 0x30f
   1f23c:	bl	12a64 <__assert_fail@plt>
   1f240:	movw	r1, #36740	; 0x8f84
   1f244:	movt	r1, #2
   1f248:	ldr	r3, [pc, #24]	; 1f268 <flatcc_builder_end_struct@@Base+0x1ec>
   1f24c:	movw	r0, #37052	; 0x90bc
   1f250:	movt	r0, #2
   1f254:	mov	r2, #872	; 0x368
   1f258:	bl	12a64 <__assert_fail@plt>
   1f25c:	ldrdeq	r8, [r2], -ip
   1f260:	andeq	r8, r2, r0, ror #16
   1f264:	andeq	r8, r2, ip, asr fp
   1f268:	muleq	r2, r8, fp

0001f26c <flatcc_builder_extend_vector@@Base>:
   1f26c:	ldr	ip, [r0, #32]
   1f270:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f274:	mov	r4, r0
   1f278:	ldr	r3, [ip, #20]
   1f27c:	ldr	r0, [ip, #24]
   1f280:	strd	r6, [sp, #8]
   1f284:	str	lr, [sp, #16]
   1f288:	sub	sp, sp, #12
   1f28c:	adds	r3, r1, r3
   1f290:	movcs	r5, #1
   1f294:	movcc	r5, #0
   1f298:	cmp	r0, r3
   1f29c:	orrcc	r5, r5, #1
   1f2a0:	cmp	r5, #0
   1f2a4:	bne	1f350 <flatcc_builder_extend_vector@@Base+0xe4>
   1f2a8:	ldr	r2, [ip, #16]
   1f2ac:	ldr	r6, [r4, #20]
   1f2b0:	str	r3, [ip, #20]
   1f2b4:	ldr	r3, [r4, #24]
   1f2b8:	mla	r2, r2, r1, r6
   1f2bc:	cmp	r2, r3
   1f2c0:	str	r2, [r4, #20]
   1f2c4:	bcs	1f2e4 <flatcc_builder_extend_vector@@Base+0x78>
   1f2c8:	ldr	r0, [r4, #16]
   1f2cc:	add	r0, r0, r6
   1f2d0:	add	sp, sp, #12
   1f2d4:	ldrd	r4, [sp]
   1f2d8:	ldrd	r6, [sp, #8]
   1f2dc:	add	sp, sp, #16
   1f2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2e4:	ldr	ip, [r4, #28]
   1f2e8:	mov	r0, #1
   1f2ec:	add	r1, r4, #60	; 0x3c
   1f2f0:	mov	r3, r0
   1f2f4:	str	r0, [sp]
   1f2f8:	ldr	r7, [r4, #48]	; 0x30
   1f2fc:	add	ip, ip, r0
   1f300:	ldr	r0, [r4, #40]	; 0x28
   1f304:	add	r2, ip, r2
   1f308:	blx	r7
   1f30c:	cmp	r0, #0
   1f310:	bne	1f348 <flatcc_builder_extend_vector@@Base+0xdc>
   1f314:	ldr	r2, [r4, #28]
   1f318:	ldr	r0, [r4, #60]	; 0x3c
   1f31c:	ldr	r3, [r4, #64]	; 0x40
   1f320:	add	r0, r0, r2
   1f324:	sub	r3, r3, r2
   1f328:	mvn	r2, #3
   1f32c:	str	r0, [r4, #16]
   1f330:	cmn	r3, #4
   1f334:	mvnhi	r3, #3
   1f338:	str	r3, [r4, #24]
   1f33c:	ldr	r3, [r4, #32]
   1f340:	str	r2, [r3, #4]
   1f344:	b	1f2cc <flatcc_builder_extend_vector@@Base+0x60>
   1f348:	mov	r0, r5
   1f34c:	b	1f2d0 <flatcc_builder_extend_vector@@Base+0x64>
   1f350:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>

0001f354 <flatcc_builder_vector_push@@Base>:
   1f354:	ldr	r3, [r0, #32]
   1f358:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f35c:	ldrh	r2, [r3, #14]
   1f360:	strd	r6, [sp, #8]
   1f364:	str	r8, [sp, #16]
   1f368:	str	lr, [sp, #20]
   1f36c:	sub	sp, sp, #8
   1f370:	cmp	r2, #4
   1f374:	bne	1f478 <flatcc_builder_vector_push@@Base+0x124>
   1f378:	mov	r6, r1
   1f37c:	ldr	r2, [r3, #20]
   1f380:	ldr	r1, [r3, #24]
   1f384:	cmp	r2, r1
   1f388:	bhi	1f45c <flatcc_builder_vector_push@@Base+0x108>
   1f38c:	add	r2, r2, #1
   1f390:	ldr	r5, [r3, #16]
   1f394:	mov	r4, r0
   1f398:	ldr	r7, [r0, #20]
   1f39c:	str	r2, [r3, #20]
   1f3a0:	ldr	r3, [r0, #24]
   1f3a4:	add	ip, r5, r7
   1f3a8:	cmp	ip, r3
   1f3ac:	str	ip, [r0, #20]
   1f3b0:	bcs	1f3f0 <flatcc_builder_vector_push@@Base+0x9c>
   1f3b4:	ldr	r3, [r0, #16]
   1f3b8:	adds	r3, r3, r7
   1f3bc:	beq	1f3d4 <flatcc_builder_vector_push@@Base+0x80>
   1f3c0:	mov	r0, r3
   1f3c4:	mov	r2, r5
   1f3c8:	mov	r1, r6
   1f3cc:	bl	1298c <memcpy@plt>
   1f3d0:	mov	r3, r0
   1f3d4:	mov	r0, r3
   1f3d8:	add	sp, sp, #8
   1f3dc:	ldrd	r4, [sp]
   1f3e0:	ldrd	r6, [sp, #8]
   1f3e4:	ldr	r8, [sp, #16]
   1f3e8:	add	sp, sp, #20
   1f3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3f0:	ldr	r2, [r4, #28]
   1f3f4:	mov	r0, #1
   1f3f8:	add	r1, r4, #60	; 0x3c
   1f3fc:	mov	r3, r0
   1f400:	str	r0, [sp]
   1f404:	ldr	r8, [r4, #48]	; 0x30
   1f408:	add	r2, r2, r0
   1f40c:	ldr	r0, [r4, #40]	; 0x28
   1f410:	add	r2, r2, ip
   1f414:	blx	r8
   1f418:	cmp	r0, #0
   1f41c:	bne	1f454 <flatcc_builder_vector_push@@Base+0x100>
   1f420:	ldr	r1, [r4, #28]
   1f424:	ldr	r3, [r4, #60]	; 0x3c
   1f428:	ldr	r2, [r4, #64]	; 0x40
   1f42c:	add	r3, r3, r1
   1f430:	sub	r2, r2, r1
   1f434:	mvn	r1, #3
   1f438:	str	r3, [r4, #16]
   1f43c:	cmn	r2, #4
   1f440:	mvnhi	r2, #3
   1f444:	str	r2, [r4, #24]
   1f448:	ldr	r2, [r4, #32]
   1f44c:	str	r1, [r2, #4]
   1f450:	b	1f3b8 <flatcc_builder_vector_push@@Base+0x64>
   1f454:	mov	r3, #0
   1f458:	b	1f3d4 <flatcc_builder_vector_push@@Base+0x80>
   1f45c:	movw	r1, #36740	; 0x8f84
   1f460:	movt	r1, #2
   1f464:	ldr	r3, [pc, #40]	; 1f494 <flatcc_builder_vector_push@@Base+0x140>
   1f468:	movw	r0, #37140	; 0x9114
   1f46c:	movt	r0, #2
   1f470:	mov	r2, #908	; 0x38c
   1f474:	bl	12a64 <__assert_fail@plt>
   1f478:	movw	r1, #36740	; 0x8f84
   1f47c:	movt	r1, #2
   1f480:	ldr	r3, [pc, #12]	; 1f494 <flatcc_builder_vector_push@@Base+0x140>
   1f484:	movw	r0, #37096	; 0x90e8
   1f488:	movt	r0, #2
   1f48c:	movw	r2, #907	; 0x38b
   1f490:	bl	12a64 <__assert_fail@plt>
   1f494:			; <UNDEFINED> instruction: 0x00028bb4

0001f498 <flatcc_builder_append_vector@@Base>:
   1f498:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f49c:	mov	r5, r0
   1f4a0:	ldr	r0, [r0, #32]
   1f4a4:	ldrh	r3, [r0, #14]
   1f4a8:	strd	r6, [sp, #8]
   1f4ac:	strd	r8, [sp, #16]
   1f4b0:	str	lr, [sp, #24]
   1f4b4:	sub	sp, sp, #12
   1f4b8:	cmp	r3, #4
   1f4bc:	bne	1f5bc <flatcc_builder_append_vector@@Base+0x124>
   1f4c0:	mov	r6, r1
   1f4c4:	ldr	r1, [r0, #20]
   1f4c8:	ldr	r4, [r0, #24]
   1f4cc:	adds	r1, r2, r1
   1f4d0:	movcs	r3, #1
   1f4d4:	movcc	r3, #0
   1f4d8:	cmp	r4, r1
   1f4dc:	movcs	r4, r3
   1f4e0:	orrcc	r4, r3, #1
   1f4e4:	cmp	r4, #0
   1f4e8:	bne	1f5b8 <flatcc_builder_append_vector@@Base+0x120>
   1f4ec:	ldr	r7, [r0, #16]
   1f4f0:	ldr	r8, [r5, #20]
   1f4f4:	ldr	r3, [r5, #24]
   1f4f8:	mul	r7, r7, r2
   1f4fc:	str	r1, [r0, #20]
   1f500:	add	ip, r7, r8
   1f504:	cmp	ip, r3
   1f508:	str	ip, [r5, #20]
   1f50c:	bcs	1f54c <flatcc_builder_append_vector@@Base+0xb4>
   1f510:	ldr	r3, [r5, #16]
   1f514:	adds	r3, r3, r8
   1f518:	beq	1f530 <flatcc_builder_append_vector@@Base+0x98>
   1f51c:	mov	r0, r3
   1f520:	mov	r2, r7
   1f524:	mov	r1, r6
   1f528:	bl	1298c <memcpy@plt>
   1f52c:	mov	r3, r0
   1f530:	mov	r0, r3
   1f534:	add	sp, sp, #12
   1f538:	ldrd	r4, [sp]
   1f53c:	ldrd	r6, [sp, #8]
   1f540:	ldrd	r8, [sp, #16]
   1f544:	add	sp, sp, #24
   1f548:	pop	{pc}		; (ldr pc, [sp], #4)
   1f54c:	ldr	r2, [r5, #28]
   1f550:	mov	r0, #1
   1f554:	add	r1, r5, #60	; 0x3c
   1f558:	mov	r3, r0
   1f55c:	str	r0, [sp]
   1f560:	ldr	r9, [r5, #48]	; 0x30
   1f564:	add	r2, r2, r0
   1f568:	ldr	r0, [r5, #40]	; 0x28
   1f56c:	add	r2, r2, ip
   1f570:	blx	r9
   1f574:	cmp	r0, #0
   1f578:	bne	1f5b0 <flatcc_builder_append_vector@@Base+0x118>
   1f57c:	ldr	r1, [r5, #28]
   1f580:	ldr	r3, [r5, #60]	; 0x3c
   1f584:	ldr	r2, [r5, #64]	; 0x40
   1f588:	add	r3, r3, r1
   1f58c:	sub	r2, r2, r1
   1f590:	mvn	r1, #3
   1f594:	str	r3, [r5, #16]
   1f598:	cmn	r2, #4
   1f59c:	mvnhi	r2, #3
   1f5a0:	str	r2, [r5, #24]
   1f5a4:	ldr	r2, [r5, #32]
   1f5a8:	str	r1, [r2, #4]
   1f5ac:	b	1f514 <flatcc_builder_append_vector@@Base+0x7c>
   1f5b0:	mov	r3, r4
   1f5b4:	b	1f530 <flatcc_builder_append_vector@@Base+0x98>
   1f5b8:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   1f5bc:	movw	r1, #36740	; 0x8f84
   1f5c0:	movt	r1, #2
   1f5c4:	ldr	r3, [pc, #12]	; 1f5d8 <flatcc_builder_append_vector@@Base+0x140>
   1f5c8:	movw	r0, #37096	; 0x90e8
   1f5cc:	movt	r0, #2
   1f5d0:	movw	r2, #915	; 0x393
   1f5d4:	bl	12a64 <__assert_fail@plt>
   1f5d8:	ldrdeq	r8, [r2], -r0

0001f5dc <flatcc_builder_extend_offset_vector@@Base>:
   1f5dc:	ldr	ip, [r0, #32]
   1f5e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f5e4:	mov	r4, r0
   1f5e8:	ldr	r3, [ip, #20]
   1f5ec:	strd	r6, [sp, #8]
   1f5f0:	str	lr, [sp, #16]
   1f5f4:	sub	sp, sp, #12
   1f5f8:	adds	r3, r1, r3
   1f5fc:	movcs	r2, #1
   1f600:	movcc	r2, #0
   1f604:	cmn	r3, #-1073741823	; 0xc0000001
   1f608:	movls	r0, #0
   1f60c:	movhi	r0, #1
   1f610:	orrs	r5, r2, r0
   1f614:	bne	1f6bc <flatcc_builder_extend_offset_vector@@Base+0xe0>
   1f618:	ldr	r6, [r4, #20]
   1f61c:	str	r3, [ip, #20]
   1f620:	ldr	r3, [r4, #24]
   1f624:	add	r2, r6, r1, lsl #2
   1f628:	cmp	r2, r3
   1f62c:	str	r2, [r4, #20]
   1f630:	bcs	1f650 <flatcc_builder_extend_offset_vector@@Base+0x74>
   1f634:	ldr	r0, [r4, #16]
   1f638:	add	r0, r0, r6
   1f63c:	add	sp, sp, #12
   1f640:	ldrd	r4, [sp]
   1f644:	ldrd	r6, [sp, #8]
   1f648:	add	sp, sp, #16
   1f64c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f650:	ldr	ip, [r4, #28]
   1f654:	mov	r0, #1
   1f658:	add	r1, r4, #60	; 0x3c
   1f65c:	mov	r3, r0
   1f660:	str	r0, [sp]
   1f664:	ldr	r7, [r4, #48]	; 0x30
   1f668:	add	ip, ip, r0
   1f66c:	ldr	r0, [r4, #40]	; 0x28
   1f670:	add	r2, ip, r2
   1f674:	blx	r7
   1f678:	cmp	r0, #0
   1f67c:	bne	1f6b4 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   1f680:	ldr	r2, [r4, #28]
   1f684:	ldr	r0, [r4, #60]	; 0x3c
   1f688:	ldr	r3, [r4, #64]	; 0x40
   1f68c:	add	r0, r0, r2
   1f690:	sub	r3, r3, r2
   1f694:	mvn	r2, #3
   1f698:	str	r0, [r4, #16]
   1f69c:	cmn	r3, #4
   1f6a0:	mvnhi	r3, #3
   1f6a4:	str	r3, [r4, #24]
   1f6a8:	ldr	r3, [r4, #32]
   1f6ac:	str	r2, [r3, #4]
   1f6b0:	b	1f638 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   1f6b4:	mov	r0, r5
   1f6b8:	b	1f63c <flatcc_builder_extend_offset_vector@@Base+0x60>
   1f6bc:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>

0001f6c0 <flatcc_builder_offset_vector_push@@Base>:
   1f6c0:	ldr	r2, [r0, #32]
   1f6c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f6c8:	ldrh	r3, [r2, #14]
   1f6cc:	strd	r6, [sp, #8]
   1f6d0:	str	lr, [sp, #16]
   1f6d4:	sub	sp, sp, #12
   1f6d8:	cmp	r3, #5
   1f6dc:	bne	1f7a0 <flatcc_builder_offset_vector_push@@Base+0xe0>
   1f6e0:	ldr	r3, [r2, #20]
   1f6e4:	cmn	r3, #-1073741823	; 0xc0000001
   1f6e8:	beq	1f798 <flatcc_builder_offset_vector_push@@Base+0xd8>
   1f6ec:	ldr	r5, [r0, #20]
   1f6f0:	mov	r6, r1
   1f6f4:	add	r3, r3, #1
   1f6f8:	mov	r4, r0
   1f6fc:	ldr	r1, [r0, #24]
   1f700:	str	r3, [r2, #20]
   1f704:	add	r3, r5, #4
   1f708:	cmp	r3, r1
   1f70c:	str	r3, [r0, #20]
   1f710:	bcs	1f734 <flatcc_builder_offset_vector_push@@Base+0x74>
   1f714:	ldr	r3, [r0, #16]
   1f718:	adds	r0, r3, r5
   1f71c:	strne	r6, [r3, r5]
   1f720:	add	sp, sp, #12
   1f724:	ldrd	r4, [sp]
   1f728:	ldrd	r6, [sp, #8]
   1f72c:	add	sp, sp, #16
   1f730:	pop	{pc}		; (ldr pc, [sp], #4)
   1f734:	ldr	r2, [r4, #28]
   1f738:	mov	r0, #1
   1f73c:	add	r1, r4, #60	; 0x3c
   1f740:	mov	r3, r0
   1f744:	str	r0, [sp]
   1f748:	ldr	r0, [r4, #40]	; 0x28
   1f74c:	add	r2, r5, r2
   1f750:	ldr	r7, [r4, #48]	; 0x30
   1f754:	add	r2, r2, #5
   1f758:	blx	r7
   1f75c:	cmp	r0, #0
   1f760:	bne	1f798 <flatcc_builder_offset_vector_push@@Base+0xd8>
   1f764:	ldr	r1, [r4, #28]
   1f768:	ldr	r3, [r4, #60]	; 0x3c
   1f76c:	ldr	r2, [r4, #64]	; 0x40
   1f770:	add	r3, r3, r1
   1f774:	sub	r2, r2, r1
   1f778:	mvn	r1, #3
   1f77c:	str	r3, [r4, #16]
   1f780:	cmn	r2, #4
   1f784:	mvnhi	r2, #3
   1f788:	str	r2, [r4, #24]
   1f78c:	ldr	r2, [r4, #32]
   1f790:	str	r1, [r2, #4]
   1f794:	b	1f718 <flatcc_builder_offset_vector_push@@Base+0x58>
   1f798:	mov	r0, #0
   1f79c:	b	1f720 <flatcc_builder_offset_vector_push@@Base+0x60>
   1f7a0:	movw	r1, #36740	; 0x8f84
   1f7a4:	movt	r1, #2
   1f7a8:	ldr	r3, [pc, #12]	; 1f7bc <flatcc_builder_offset_vector_push@@Base+0xfc>
   1f7ac:	movw	r0, #37204	; 0x9154
   1f7b0:	movt	r0, #2
   1f7b4:	movw	r2, #934	; 0x3a6
   1f7b8:	bl	12a64 <__assert_fail@plt>
   1f7bc:	strdeq	r8, [r2], -r0

0001f7c0 <flatcc_builder_append_offset_vector@@Base>:
   1f7c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f7c4:	mov	r5, r0
   1f7c8:	ldr	r0, [r0, #32]
   1f7cc:	ldrh	r3, [r0, #14]
   1f7d0:	strd	r6, [sp, #8]
   1f7d4:	strd	r8, [sp, #16]
   1f7d8:	str	lr, [sp, #24]
   1f7dc:	sub	sp, sp, #12
   1f7e0:	cmp	r3, #5
   1f7e4:	bne	1f8dc <flatcc_builder_append_offset_vector@@Base+0x11c>
   1f7e8:	ldr	r3, [r0, #20]
   1f7ec:	mov	r7, r1
   1f7f0:	adds	r1, r2, r3
   1f7f4:	movcs	r4, #1
   1f7f8:	movcc	r4, #0
   1f7fc:	cmn	r1, #-1073741823	; 0xc0000001
   1f800:	movls	r3, #0
   1f804:	movhi	r3, #1
   1f808:	orrs	r4, r4, r3
   1f80c:	bne	1f8d8 <flatcc_builder_append_offset_vector@@Base+0x118>
   1f810:	ldr	r8, [r5, #20]
   1f814:	lsl	r6, r2, #2
   1f818:	ldr	r3, [r5, #24]
   1f81c:	str	r1, [r0, #20]
   1f820:	add	ip, r6, r8
   1f824:	cmp	ip, r3
   1f828:	str	ip, [r5, #20]
   1f82c:	bcs	1f86c <flatcc_builder_append_offset_vector@@Base+0xac>
   1f830:	ldr	r3, [r5, #16]
   1f834:	adds	r3, r3, r8
   1f838:	beq	1f850 <flatcc_builder_append_offset_vector@@Base+0x90>
   1f83c:	mov	r0, r3
   1f840:	mov	r2, r6
   1f844:	mov	r1, r7
   1f848:	bl	1298c <memcpy@plt>
   1f84c:	mov	r3, r0
   1f850:	mov	r0, r3
   1f854:	add	sp, sp, #12
   1f858:	ldrd	r4, [sp]
   1f85c:	ldrd	r6, [sp, #8]
   1f860:	ldrd	r8, [sp, #16]
   1f864:	add	sp, sp, #24
   1f868:	pop	{pc}		; (ldr pc, [sp], #4)
   1f86c:	ldr	r2, [r5, #28]
   1f870:	mov	r0, #1
   1f874:	add	r1, r5, #60	; 0x3c
   1f878:	mov	r3, r0
   1f87c:	str	r0, [sp]
   1f880:	ldr	r9, [r5, #48]	; 0x30
   1f884:	add	r2, r2, r0
   1f888:	ldr	r0, [r5, #40]	; 0x28
   1f88c:	add	r2, r2, ip
   1f890:	blx	r9
   1f894:	cmp	r0, #0
   1f898:	bne	1f8d0 <flatcc_builder_append_offset_vector@@Base+0x110>
   1f89c:	ldr	r1, [r5, #28]
   1f8a0:	ldr	r3, [r5, #60]	; 0x3c
   1f8a4:	ldr	r2, [r5, #64]	; 0x40
   1f8a8:	add	r3, r3, r1
   1f8ac:	sub	r2, r2, r1
   1f8b0:	mvn	r1, #3
   1f8b4:	str	r3, [r5, #16]
   1f8b8:	cmn	r2, #4
   1f8bc:	mvnhi	r2, #3
   1f8c0:	str	r2, [r5, #24]
   1f8c4:	ldr	r2, [r5, #32]
   1f8c8:	str	r1, [r2, #4]
   1f8cc:	b	1f834 <flatcc_builder_append_offset_vector@@Base+0x74>
   1f8d0:	mov	r3, r4
   1f8d4:	b	1f850 <flatcc_builder_append_offset_vector@@Base+0x90>
   1f8d8:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   1f8dc:	movw	r1, #36740	; 0x8f84
   1f8e0:	movt	r1, #2
   1f8e4:	ldr	r3, [pc, #12]	; 1f8f8 <flatcc_builder_append_offset_vector@@Base+0x138>
   1f8e8:	movw	r0, #37204	; 0x9154
   1f8ec:	movt	r0, #2
   1f8f0:	mov	r2, #948	; 0x3b4
   1f8f4:	bl	12a64 <__assert_fail@plt>
   1f8f8:	andeq	r8, r2, r4, lsl ip

0001f8fc <flatcc_builder_extend_string@@Base>:
   1f8fc:	ldr	r2, [r0, #32]
   1f900:	strd	r4, [sp, #-16]!
   1f904:	ldrh	r3, [r2, #14]
   1f908:	str	r6, [sp, #8]
   1f90c:	str	lr, [sp, #12]
   1f910:	sub	sp, sp, #8
   1f914:	cmp	r3, #6
   1f918:	bne	1f9d4 <flatcc_builder_extend_string@@Base+0xd8>
   1f91c:	ldr	r3, [r2, #20]
   1f920:	adds	r3, r1, r3
   1f924:	bcs	1f9d0 <flatcc_builder_extend_string@@Base+0xd4>
   1f928:	ldr	r5, [r0, #20]
   1f92c:	mov	r4, r0
   1f930:	str	r3, [r2, #20]
   1f934:	ldr	r3, [r0, #24]
   1f938:	add	r2, r1, r5
   1f93c:	cmp	r2, r3
   1f940:	str	r2, [r0, #20]
   1f944:	bcs	1f964 <flatcc_builder_extend_string@@Base+0x68>
   1f948:	ldr	r0, [r0, #16]
   1f94c:	add	r0, r0, r5
   1f950:	add	sp, sp, #8
   1f954:	ldrd	r4, [sp]
   1f958:	ldr	r6, [sp, #8]
   1f95c:	add	sp, sp, #12
   1f960:	pop	{pc}		; (ldr pc, [sp], #4)
   1f964:	ldr	ip, [r4, #28]
   1f968:	mov	r0, #1
   1f96c:	add	r1, r4, #60	; 0x3c
   1f970:	mov	r3, r0
   1f974:	str	r0, [sp]
   1f978:	ldr	r6, [r4, #48]	; 0x30
   1f97c:	add	ip, ip, r0
   1f980:	ldr	r0, [r4, #40]	; 0x28
   1f984:	add	r2, ip, r2
   1f988:	blx	r6
   1f98c:	cmp	r0, #0
   1f990:	bne	1f9c8 <flatcc_builder_extend_string@@Base+0xcc>
   1f994:	ldr	r2, [r4, #28]
   1f998:	ldr	r0, [r4, #60]	; 0x3c
   1f99c:	ldr	r3, [r4, #64]	; 0x40
   1f9a0:	add	r0, r0, r2
   1f9a4:	sub	r3, r3, r2
   1f9a8:	mvn	r2, #3
   1f9ac:	str	r0, [r4, #16]
   1f9b0:	cmn	r3, #4
   1f9b4:	mvnhi	r3, #3
   1f9b8:	str	r3, [r4, #24]
   1f9bc:	ldr	r3, [r4, #32]
   1f9c0:	str	r2, [r3, #4]
   1f9c4:	b	1f94c <flatcc_builder_extend_string@@Base+0x50>
   1f9c8:	mov	r0, #0
   1f9cc:	b	1f950 <flatcc_builder_extend_string@@Base+0x54>
   1f9d0:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   1f9d4:	movw	r1, #36740	; 0x8f84
   1f9d8:	movt	r1, #2
   1f9dc:	ldr	r3, [pc, #12]	; 1f9f0 <flatcc_builder_extend_string@@Base+0xf4>
   1f9e0:	movw	r0, #36868	; 0x9004
   1f9e4:	movt	r0, #2
   1f9e8:	movw	r2, #957	; 0x3bd
   1f9ec:	bl	12a64 <__assert_fail@plt>
   1f9f0:	andeq	r8, r2, r8, lsr ip

0001f9f4 <flatcc_builder_append_string@@Base>:
   1f9f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f9f8:	strd	r6, [sp, #8]
   1f9fc:	mov	r6, r1
   1fa00:	ldr	r1, [r0, #32]
   1fa04:	str	r8, [sp, #16]
   1fa08:	str	lr, [sp, #20]
   1fa0c:	sub	sp, sp, #8
   1fa10:	ldrh	r3, [r1, #14]
   1fa14:	cmp	r3, #6
   1fa18:	bne	1faf8 <flatcc_builder_append_string@@Base+0x104>
   1fa1c:	ldr	r3, [r1, #20]
   1fa20:	mov	r5, r2
   1fa24:	adds	r3, r2, r3
   1fa28:	bcs	1faf4 <flatcc_builder_append_string@@Base+0x100>
   1fa2c:	ldr	r7, [r0, #20]
   1fa30:	mov	r4, r0
   1fa34:	str	r3, [r1, #20]
   1fa38:	ldr	r3, [r0, #24]
   1fa3c:	add	ip, r2, r7
   1fa40:	cmp	ip, r3
   1fa44:	str	ip, [r0, #20]
   1fa48:	bcs	1fa88 <flatcc_builder_append_string@@Base+0x94>
   1fa4c:	ldr	r3, [r0, #16]
   1fa50:	adds	r3, r3, r7
   1fa54:	beq	1fa6c <flatcc_builder_append_string@@Base+0x78>
   1fa58:	mov	r0, r3
   1fa5c:	mov	r2, r5
   1fa60:	mov	r1, r6
   1fa64:	bl	1298c <memcpy@plt>
   1fa68:	mov	r3, r0
   1fa6c:	mov	r0, r3
   1fa70:	add	sp, sp, #8
   1fa74:	ldrd	r4, [sp]
   1fa78:	ldrd	r6, [sp, #8]
   1fa7c:	ldr	r8, [sp, #16]
   1fa80:	add	sp, sp, #20
   1fa84:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa88:	ldr	r2, [r4, #28]
   1fa8c:	mov	r0, #1
   1fa90:	add	r1, r4, #60	; 0x3c
   1fa94:	mov	r3, r0
   1fa98:	str	r0, [sp]
   1fa9c:	ldr	r8, [r4, #48]	; 0x30
   1faa0:	add	r2, r2, r0
   1faa4:	ldr	r0, [r4, #40]	; 0x28
   1faa8:	add	r2, r2, ip
   1faac:	blx	r8
   1fab0:	cmp	r0, #0
   1fab4:	bne	1faec <flatcc_builder_append_string@@Base+0xf8>
   1fab8:	ldr	r1, [r4, #28]
   1fabc:	ldr	r3, [r4, #60]	; 0x3c
   1fac0:	ldr	r2, [r4, #64]	; 0x40
   1fac4:	add	r3, r3, r1
   1fac8:	sub	r2, r2, r1
   1facc:	mvn	r1, #3
   1fad0:	str	r3, [r4, #16]
   1fad4:	cmn	r2, #4
   1fad8:	mvnhi	r2, #3
   1fadc:	str	r2, [r4, #24]
   1fae0:	ldr	r2, [r4, #32]
   1fae4:	str	r1, [r2, #4]
   1fae8:	b	1fa50 <flatcc_builder_append_string@@Base+0x5c>
   1faec:	mov	r3, #0
   1faf0:	b	1fa6c <flatcc_builder_append_string@@Base+0x78>
   1faf4:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   1faf8:	bl	1dce4 <flatcc_builder_default_alloc@@Base+0x214>

0001fafc <flatcc_builder_append_string_str@@Base>:
   1fafc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fb00:	mov	r4, r0
   1fb04:	mov	r0, r1
   1fb08:	strd	r6, [sp, #8]
   1fb0c:	mov	r6, r1
   1fb10:	str	r8, [sp, #16]
   1fb14:	str	lr, [sp, #20]
   1fb18:	sub	sp, sp, #8
   1fb1c:	bl	129f8 <strlen@plt>
   1fb20:	ldr	r2, [r4, #32]
   1fb24:	ldrh	r3, [r2, #14]
   1fb28:	cmp	r3, #6
   1fb2c:	bne	1fc08 <flatcc_builder_append_string_str@@Base+0x10c>
   1fb30:	ldr	r3, [r2, #20]
   1fb34:	mov	r5, r0
   1fb38:	adds	r3, r0, r3
   1fb3c:	bcs	1fc04 <flatcc_builder_append_string_str@@Base+0x108>
   1fb40:	ldr	r7, [r4, #20]
   1fb44:	str	r3, [r2, #20]
   1fb48:	ldr	r3, [r4, #24]
   1fb4c:	add	ip, r0, r7
   1fb50:	cmp	ip, r3
   1fb54:	str	ip, [r4, #20]
   1fb58:	bcs	1fb98 <flatcc_builder_append_string_str@@Base+0x9c>
   1fb5c:	ldr	r3, [r4, #16]
   1fb60:	adds	r3, r3, r7
   1fb64:	beq	1fb7c <flatcc_builder_append_string_str@@Base+0x80>
   1fb68:	mov	r0, r3
   1fb6c:	mov	r2, r5
   1fb70:	mov	r1, r6
   1fb74:	bl	1298c <memcpy@plt>
   1fb78:	mov	r3, r0
   1fb7c:	mov	r0, r3
   1fb80:	add	sp, sp, #8
   1fb84:	ldrd	r4, [sp]
   1fb88:	ldrd	r6, [sp, #8]
   1fb8c:	ldr	r8, [sp, #16]
   1fb90:	add	sp, sp, #20
   1fb94:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb98:	ldr	r2, [r4, #28]
   1fb9c:	mov	r0, #1
   1fba0:	add	r1, r4, #60	; 0x3c
   1fba4:	mov	r3, r0
   1fba8:	str	r0, [sp]
   1fbac:	ldr	r8, [r4, #48]	; 0x30
   1fbb0:	add	r2, r2, r0
   1fbb4:	ldr	r0, [r4, #40]	; 0x28
   1fbb8:	add	r2, r2, ip
   1fbbc:	blx	r8
   1fbc0:	cmp	r0, #0
   1fbc4:	bne	1fbfc <flatcc_builder_append_string_str@@Base+0x100>
   1fbc8:	ldr	r1, [r4, #28]
   1fbcc:	ldr	r3, [r4, #60]	; 0x3c
   1fbd0:	ldr	r2, [r4, #64]	; 0x40
   1fbd4:	add	r3, r3, r1
   1fbd8:	sub	r2, r2, r1
   1fbdc:	mvn	r1, #3
   1fbe0:	str	r3, [r4, #16]
   1fbe4:	cmn	r2, #4
   1fbe8:	mvnhi	r2, #3
   1fbec:	str	r2, [r4, #24]
   1fbf0:	ldr	r2, [r4, #32]
   1fbf4:	str	r1, [r2, #4]
   1fbf8:	b	1fb60 <flatcc_builder_append_string_str@@Base+0x64>
   1fbfc:	mov	r3, #0
   1fc00:	b	1fb7c <flatcc_builder_append_string_str@@Base+0x80>
   1fc04:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   1fc08:	bl	1dce4 <flatcc_builder_default_alloc@@Base+0x214>

0001fc0c <flatcc_builder_append_string_strn@@Base>:
   1fc0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fc10:	mov	r4, r0
   1fc14:	mov	r5, r2
   1fc18:	strd	r6, [sp, #8]
   1fc1c:	mov	r6, r1
   1fc20:	mov	r1, #0
   1fc24:	mov	r0, r6
   1fc28:	str	r8, [sp, #16]
   1fc2c:	str	lr, [sp, #20]
   1fc30:	sub	sp, sp, #8
   1fc34:	bl	12a34 <memchr@plt>
   1fc38:	ldr	r2, [r4, #32]
   1fc3c:	cmp	r0, #0
   1fc40:	subne	r5, r0, r6
   1fc44:	ldrh	r3, [r2, #14]
   1fc48:	cmp	r3, #6
   1fc4c:	bne	1fd24 <flatcc_builder_append_string_strn@@Base+0x118>
   1fc50:	ldr	r3, [r2, #20]
   1fc54:	adds	r3, r5, r3
   1fc58:	bcs	1fd20 <flatcc_builder_append_string_strn@@Base+0x114>
   1fc5c:	ldr	r7, [r4, #20]
   1fc60:	str	r3, [r2, #20]
   1fc64:	ldr	r3, [r4, #24]
   1fc68:	add	ip, r5, r7
   1fc6c:	cmp	ip, r3
   1fc70:	str	ip, [r4, #20]
   1fc74:	bcs	1fcb4 <flatcc_builder_append_string_strn@@Base+0xa8>
   1fc78:	ldr	r3, [r4, #16]
   1fc7c:	adds	r3, r3, r7
   1fc80:	beq	1fc98 <flatcc_builder_append_string_strn@@Base+0x8c>
   1fc84:	mov	r0, r3
   1fc88:	mov	r2, r5
   1fc8c:	mov	r1, r6
   1fc90:	bl	1298c <memcpy@plt>
   1fc94:	mov	r3, r0
   1fc98:	mov	r0, r3
   1fc9c:	add	sp, sp, #8
   1fca0:	ldrd	r4, [sp]
   1fca4:	ldrd	r6, [sp, #8]
   1fca8:	ldr	r8, [sp, #16]
   1fcac:	add	sp, sp, #20
   1fcb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fcb4:	ldr	r2, [r4, #28]
   1fcb8:	mov	r0, #1
   1fcbc:	add	r1, r4, #60	; 0x3c
   1fcc0:	mov	r3, r0
   1fcc4:	str	r0, [sp]
   1fcc8:	ldr	r8, [r4, #48]	; 0x30
   1fccc:	add	r2, r2, r0
   1fcd0:	ldr	r0, [r4, #40]	; 0x28
   1fcd4:	add	r2, r2, ip
   1fcd8:	blx	r8
   1fcdc:	cmp	r0, #0
   1fce0:	bne	1fd18 <flatcc_builder_append_string_strn@@Base+0x10c>
   1fce4:	ldr	r1, [r4, #28]
   1fce8:	ldr	r3, [r4, #60]	; 0x3c
   1fcec:	ldr	r2, [r4, #64]	; 0x40
   1fcf0:	add	r3, r3, r1
   1fcf4:	sub	r2, r2, r1
   1fcf8:	mvn	r1, #3
   1fcfc:	str	r3, [r4, #16]
   1fd00:	cmn	r2, #4
   1fd04:	mvnhi	r2, #3
   1fd08:	str	r2, [r4, #24]
   1fd0c:	ldr	r2, [r4, #32]
   1fd10:	str	r1, [r2, #4]
   1fd14:	b	1fc7c <flatcc_builder_append_string_strn@@Base+0x70>
   1fd18:	mov	r3, #0
   1fd1c:	b	1fc98 <flatcc_builder_append_string_strn@@Base+0x8c>
   1fd20:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   1fd24:	bl	1dce4 <flatcc_builder_default_alloc@@Base+0x214>

0001fd28 <flatcc_builder_truncate_vector@@Base>:
   1fd28:	mov	r3, r0
   1fd2c:	ldr	r0, [r0, #32]
   1fd30:	str	r4, [sp, #-8]!
   1fd34:	ldrh	r2, [r0, #14]
   1fd38:	str	lr, [sp, #4]
   1fd3c:	cmp	r2, #4
   1fd40:	bne	1fd90 <flatcc_builder_truncate_vector@@Base+0x68>
   1fd44:	mov	lr, r1
   1fd48:	ldr	r1, [r0, #20]
   1fd4c:	cmp	r1, lr
   1fd50:	bcc	1fdac <flatcc_builder_truncate_vector@@Base+0x84>
   1fd54:	ldr	r2, [r0, #16]
   1fd58:	sub	ip, r1, lr
   1fd5c:	mov	r1, #0
   1fd60:	str	ip, [r0, #20]
   1fd64:	ldr	r0, [r3, #16]
   1fd68:	ldr	ip, [r3, #20]
   1fd6c:	mul	r2, r2, lr
   1fd70:	sub	ip, ip, r2
   1fd74:	add	r0, r0, ip
   1fd78:	str	ip, [r3, #20]
   1fd7c:	bl	12a1c <memset@plt>
   1fd80:	ldr	r4, [sp]
   1fd84:	add	sp, sp, #4
   1fd88:	mov	r0, #0
   1fd8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd90:	movw	r1, #36740	; 0x8f84
   1fd94:	movt	r1, #2
   1fd98:	ldr	r3, [pc, #40]	; 1fdc8 <flatcc_builder_truncate_vector@@Base+0xa0>
   1fd9c:	movw	r0, #37096	; 0x90e8
   1fda0:	movt	r0, #2
   1fda4:	movw	r2, #985	; 0x3d9
   1fda8:	bl	12a64 <__assert_fail@plt>
   1fdac:	movw	r1, #36740	; 0x8f84
   1fdb0:	movt	r1, #2
   1fdb4:	ldr	r3, [pc, #12]	; 1fdc8 <flatcc_builder_truncate_vector@@Base+0xa0>
   1fdb8:	movw	r0, #37256	; 0x9188
   1fdbc:	movt	r0, #2
   1fdc0:	movw	r2, #986	; 0x3da
   1fdc4:	bl	12a64 <__assert_fail@plt>
   1fdc8:	andeq	r8, r2, r8, asr ip

0001fdcc <flatcc_builder_truncate_offset_vector@@Base>:
   1fdcc:	mov	r3, r0
   1fdd0:	ldr	r0, [r0, #32]
   1fdd4:	str	r4, [sp, #-8]!
   1fdd8:	ldrh	r2, [r0, #14]
   1fddc:	str	lr, [sp, #4]
   1fde0:	cmp	r2, #5
   1fde4:	bne	1fe34 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1fde8:	mov	lr, r1
   1fdec:	ldr	r1, [r0, #20]
   1fdf0:	cmp	r1, lr
   1fdf4:	bcc	1fe50 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   1fdf8:	ldr	r2, [r0, #16]
   1fdfc:	sub	ip, r1, lr
   1fe00:	mov	r1, #0
   1fe04:	str	ip, [r0, #20]
   1fe08:	ldr	r0, [r3, #16]
   1fe0c:	ldr	ip, [r3, #20]
   1fe10:	mul	r2, r2, lr
   1fe14:	sub	ip, ip, r2
   1fe18:	add	r0, r0, ip
   1fe1c:	str	ip, [r3, #20]
   1fe20:	bl	12a1c <memset@plt>
   1fe24:	ldr	r4, [sp]
   1fe28:	add	sp, sp, #4
   1fe2c:	mov	r0, #0
   1fe30:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe34:	movw	r1, #36740	; 0x8f84
   1fe38:	movt	r1, #2
   1fe3c:	ldr	r3, [pc, #40]	; 1fe6c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   1fe40:	movw	r0, #37204	; 0x9154
   1fe44:	movt	r0, #2
   1fe48:	movw	r2, #994	; 0x3e2
   1fe4c:	bl	12a64 <__assert_fail@plt>
   1fe50:	movw	r1, #36740	; 0x8f84
   1fe54:	movt	r1, #2
   1fe58:	ldr	r3, [pc, #12]	; 1fe6c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   1fe5c:	movw	r0, #37292	; 0x91ac
   1fe60:	movt	r0, #2
   1fe64:	movw	r2, #995	; 0x3e3
   1fe68:	bl	12a64 <__assert_fail@plt>
   1fe6c:	andeq	r8, r2, r8, ror ip

0001fe70 <flatcc_builder_truncate_string@@Base>:
   1fe70:	str	r4, [sp, #-8]!
   1fe74:	str	lr, [sp, #4]
   1fe78:	ldr	lr, [r0, #32]
   1fe7c:	ldrh	r2, [lr, #14]
   1fe80:	cmp	r2, #6
   1fe84:	bne	1fed4 <flatcc_builder_truncate_string@@Base+0x64>
   1fe88:	ldr	r2, [lr, #20]
   1fe8c:	mov	ip, r1
   1fe90:	cmp	r2, r1
   1fe94:	bcc	1fef0 <flatcc_builder_truncate_string@@Base+0x80>
   1fe98:	sub	r1, r2, r1
   1fe9c:	mov	r3, r0
   1fea0:	ldr	r0, [r0, #16]
   1fea4:	mov	r2, ip
   1fea8:	str	r1, [lr, #20]
   1feac:	mov	r1, #0
   1feb0:	ldr	lr, [r3, #20]
   1feb4:	sub	ip, lr, ip
   1feb8:	add	r0, r0, ip
   1febc:	str	ip, [r3, #20]
   1fec0:	bl	12a1c <memset@plt>
   1fec4:	ldr	r4, [sp]
   1fec8:	add	sp, sp, #4
   1fecc:	mov	r0, #0
   1fed0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fed4:	movw	r1, #36740	; 0x8f84
   1fed8:	movt	r1, #2
   1fedc:	ldr	r3, [pc, #40]	; 1ff0c <flatcc_builder_truncate_string@@Base+0x9c>
   1fee0:	movw	r0, #36868	; 0x9004
   1fee4:	movt	r0, #2
   1fee8:	movw	r2, #1003	; 0x3eb
   1feec:	bl	12a64 <__assert_fail@plt>
   1fef0:	movw	r1, #36740	; 0x8f84
   1fef4:	movt	r1, #2
   1fef8:	ldr	r3, [pc, #12]	; 1ff0c <flatcc_builder_truncate_string@@Base+0x9c>
   1fefc:	movw	r0, #37352	; 0x91e8
   1ff00:	movt	r0, #2
   1ff04:	mov	r2, #1004	; 0x3ec
   1ff08:	bl	12a64 <__assert_fail@plt>
   1ff0c:	andeq	r8, r2, r0, lsr #25

0001ff10 <flatcc_builder_start_vector@@Base>:
   1ff10:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ff14:	mov	r4, r0
   1ff18:	mov	r5, r3
   1ff1c:	ldr	r0, [r0, #156]	; 0x9c
   1ff20:	cmp	r2, #4
   1ff24:	ldr	r3, [r4, #160]	; 0xa0
   1ff28:	strd	r6, [sp, #8]
   1ff2c:	movcs	r7, r2
   1ff30:	movcc	r7, #4
   1ff34:	mov	r6, r1
   1ff38:	strd	r8, [sp, #16]
   1ff3c:	add	r2, r0, #1
   1ff40:	str	lr, [sp, #24]
   1ff44:	sub	sp, sp, #12
   1ff48:	cmp	r2, r3
   1ff4c:	str	r2, [r4, #156]	; 0x9c
   1ff50:	ble	2006c <flatcc_builder_start_vector@@Base+0x15c>
   1ff54:	ldr	r3, [r4, #176]	; 0xb0
   1ff58:	cmp	r3, #0
   1ff5c:	cmpgt	r2, r3
   1ff60:	movgt	r3, #1
   1ff64:	movle	r3, #0
   1ff68:	bgt	2007c <flatcc_builder_start_vector@@Base+0x16c>
   1ff6c:	add	r0, r0, r0, lsl #3
   1ff70:	ldr	r1, [r4, #88]	; 0x58
   1ff74:	lsl	r8, r0, #2
   1ff78:	add	r2, r8, #36	; 0x24
   1ff7c:	cmp	r2, r1
   1ff80:	bls	1ffa4 <flatcc_builder_start_vector@@Base+0x94>
   1ff84:	mov	ip, #4
   1ff88:	add	r1, r4, #84	; 0x54
   1ff8c:	ldr	r0, [r4, #40]	; 0x28
   1ff90:	str	ip, [sp]
   1ff94:	ldr	r9, [r4, #48]	; 0x30
   1ff98:	blx	r9
   1ff9c:	cmp	r0, #0
   1ffa0:	bne	20084 <flatcc_builder_start_vector@@Base+0x174>
   1ffa4:	ldr	r3, [r4, #84]	; 0x54
   1ffa8:	add	r3, r3, r8
   1ffac:	cmp	r3, #0
   1ffb0:	str	r3, [r4, #32]
   1ffb4:	beq	2007c <flatcc_builder_start_vector@@Base+0x16c>
   1ffb8:	ldr	r2, [r4, #88]	; 0x58
   1ffbc:	movw	r0, #36409	; 0x8e39
   1ffc0:	movt	r0, #14563	; 0x38e3
   1ffc4:	ldr	r1, [r4, #176]	; 0xb0
   1ffc8:	umull	r0, r2, r0, r2
   1ffcc:	lsr	r2, r2, #3
   1ffd0:	cmp	r1, #0
   1ffd4:	cmpgt	r2, r1
   1ffd8:	movgt	r2, r1
   1ffdc:	str	r2, [r4, #160]	; 0xa0
   1ffe0:	ldr	r2, [r4, #20]
   1ffe4:	mvn	r9, #3
   1ffe8:	mov	ip, #0
   1ffec:	ldr	r0, [r4, #28]
   1fff0:	ldrh	lr, [r4, #130]	; 0x82
   1fff4:	ldr	r1, [r4, #64]	; 0x40
   1fff8:	ldr	r8, [r4, #60]	; 0x3c
   1fffc:	str	r2, [r3, #8]
   20000:	add	r2, r2, r0
   20004:	add	r2, r2, #7
   20008:	strh	lr, [r3, #12]
   2000c:	bic	r2, r2, #7
   20010:	strh	r7, [r4, #130]	; 0x82
   20014:	mov	r7, #4
   20018:	sub	r1, r1, r2
   2001c:	str	r0, [r3]
   20020:	mov	r0, ip
   20024:	cmp	r1, r9
   20028:	add	lr, r8, r2
   2002c:	str	ip, [r4, #20]
   20030:	movhi	r1, r9
   20034:	str	r2, [r4, #28]
   20038:	strh	r7, [r3, #14]
   2003c:	str	r6, [r3, #16]
   20040:	str	ip, [r3, #20]
   20044:	str	r5, [r3, #24]
   20048:	str	lr, [r4, #16]
   2004c:	str	r1, [r4, #24]
   20050:	str	r9, [r3, #4]
   20054:	add	sp, sp, #12
   20058:	ldrd	r4, [sp]
   2005c:	ldrd	r6, [sp, #8]
   20060:	ldrd	r8, [sp, #16]
   20064:	add	sp, sp, #24
   20068:	pop	{pc}		; (ldr pc, [sp], #4)
   2006c:	ldr	r3, [r4, #32]
   20070:	add	r3, r3, #36	; 0x24
   20074:	str	r3, [r4, #32]
   20078:	b	1ffe0 <flatcc_builder_start_vector@@Base+0xd0>
   2007c:	mvn	r0, #0
   20080:	b	20054 <flatcc_builder_start_vector@@Base+0x144>
   20084:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

00020088 <flatcc_builder_start_offset_vector@@Base>:
   20088:	ldrd	r2, [r0, #156]	; 0x9c
   2008c:	strd	r4, [sp, #-16]!
   20090:	mov	r4, r0
   20094:	str	r6, [sp, #8]
   20098:	str	lr, [sp, #12]
   2009c:	sub	sp, sp, #8
   200a0:	add	r1, r2, #1
   200a4:	cmp	r1, r3
   200a8:	str	r1, [r0, #156]	; 0x9c
   200ac:	ble	201c4 <flatcc_builder_start_offset_vector@@Base+0x13c>
   200b0:	ldr	r3, [r0, #176]	; 0xb0
   200b4:	cmp	r3, #0
   200b8:	cmpgt	r1, r3
   200bc:	movgt	r3, #1
   200c0:	movle	r3, #0
   200c4:	bgt	201d4 <flatcc_builder_start_offset_vector@@Base+0x14c>
   200c8:	add	r2, r2, r2, lsl #3
   200cc:	ldr	r1, [r0, #88]	; 0x58
   200d0:	lsl	r5, r2, #2
   200d4:	add	r2, r5, #36	; 0x24
   200d8:	cmp	r2, r1
   200dc:	bls	20100 <flatcc_builder_start_offset_vector@@Base+0x78>
   200e0:	mov	ip, #4
   200e4:	add	r1, r0, #84	; 0x54
   200e8:	ldr	r0, [r0, #40]	; 0x28
   200ec:	str	ip, [sp]
   200f0:	ldr	r6, [r4, #48]	; 0x30
   200f4:	blx	r6
   200f8:	cmp	r0, #0
   200fc:	bne	201dc <flatcc_builder_start_offset_vector@@Base+0x154>
   20100:	ldr	r3, [r4, #84]	; 0x54
   20104:	add	r3, r3, r5
   20108:	cmp	r3, #0
   2010c:	str	r3, [r4, #32]
   20110:	beq	201d4 <flatcc_builder_start_offset_vector@@Base+0x14c>
   20114:	ldr	r2, [r4, #88]	; 0x58
   20118:	movw	r0, #36409	; 0x8e39
   2011c:	movt	r0, #14563	; 0x38e3
   20120:	ldr	r1, [r4, #176]	; 0xb0
   20124:	umull	r0, r2, r0, r2
   20128:	lsr	r2, r2, #3
   2012c:	cmp	r1, #0
   20130:	cmpgt	r2, r1
   20134:	movgt	r2, r1
   20138:	str	r2, [r4, #160]	; 0xa0
   2013c:	ldr	r2, [r4, #20]
   20140:	mvn	r5, #3
   20144:	mov	lr, #0
   20148:	ldr	r0, [r4, #28]
   2014c:	ldrh	r6, [r4, #130]	; 0x82
   20150:	ldr	ip, [r4, #60]	; 0x3c
   20154:	ldr	r1, [r4, #64]	; 0x40
   20158:	str	r2, [r3, #8]
   2015c:	add	r2, r2, r0
   20160:	add	r2, r2, #7
   20164:	strh	r6, [r3, #12]
   20168:	mov	r6, #4
   2016c:	bic	r2, r2, #7
   20170:	add	ip, ip, r2
   20174:	strh	r6, [r4, #130]	; 0x82
   20178:	sub	r1, r1, r2
   2017c:	str	r0, [r3]
   20180:	mov	r0, lr
   20184:	cmp	r1, r5
   20188:	str	lr, [r4, #20]
   2018c:	movhi	r1, r5
   20190:	str	r2, [r4, #28]
   20194:	mov	r2, #5
   20198:	strh	r2, [r3, #14]
   2019c:	str	r6, [r3, #16]
   201a0:	str	lr, [r3, #20]
   201a4:	str	ip, [r4, #16]
   201a8:	str	r1, [r4, #24]
   201ac:	str	r5, [r3, #4]
   201b0:	add	sp, sp, #8
   201b4:	ldrd	r4, [sp]
   201b8:	ldr	r6, [sp, #8]
   201bc:	add	sp, sp, #12
   201c0:	pop	{pc}		; (ldr pc, [sp], #4)
   201c4:	ldr	r3, [r0, #32]
   201c8:	add	r3, r3, #36	; 0x24
   201cc:	str	r3, [r0, #32]
   201d0:	b	2013c <flatcc_builder_start_offset_vector@@Base+0xb4>
   201d4:	mvn	r0, #0
   201d8:	b	201b0 <flatcc_builder_start_offset_vector@@Base+0x128>
   201dc:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

000201e0 <flatcc_builder_create_offset_vector@@Base>:
   201e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   201e4:	mov	r5, r2
   201e8:	mov	r4, r0
   201ec:	ldr	r3, [r0, #160]	; 0xa0
   201f0:	strd	r6, [sp, #8]
   201f4:	mov	r6, r1
   201f8:	ldr	r1, [r0, #156]	; 0x9c
   201fc:	strd	r8, [sp, #16]
   20200:	str	lr, [sp, #24]
   20204:	sub	sp, sp, #12
   20208:	add	r2, r1, #1
   2020c:	cmp	r2, r3
   20210:	str	r2, [r0, #156]	; 0x9c
   20214:	ble	2038c <flatcc_builder_create_offset_vector@@Base+0x1ac>
   20218:	ldr	r3, [r0, #176]	; 0xb0
   2021c:	cmp	r2, r3
   20220:	cmpgt	r3, #0
   20224:	movgt	r3, #1
   20228:	movle	r3, #0
   2022c:	bgt	2036c <flatcc_builder_create_offset_vector@@Base+0x18c>
   20230:	add	r1, r1, r1, lsl #3
   20234:	ldr	r0, [r0, #88]	; 0x58
   20238:	lsl	r7, r1, #2
   2023c:	add	r2, r7, #36	; 0x24
   20240:	cmp	r2, r0
   20244:	bls	20268 <flatcc_builder_create_offset_vector@@Base+0x88>
   20248:	mov	ip, #4
   2024c:	add	r1, r4, #84	; 0x54
   20250:	ldr	r0, [r4, #40]	; 0x28
   20254:	str	ip, [sp]
   20258:	ldr	r8, [r4, #48]	; 0x30
   2025c:	blx	r8
   20260:	cmp	r0, #0
   20264:	bne	20430 <flatcc_builder_create_offset_vector@@Base+0x250>
   20268:	ldr	r3, [r4, #84]	; 0x54
   2026c:	add	r3, r3, r7
   20270:	cmp	r3, #0
   20274:	str	r3, [r4, #32]
   20278:	beq	2036c <flatcc_builder_create_offset_vector@@Base+0x18c>
   2027c:	ldr	r2, [r4, #88]	; 0x58
   20280:	movw	r0, #36409	; 0x8e39
   20284:	movt	r0, #14563	; 0x38e3
   20288:	ldr	r1, [r4, #176]	; 0xb0
   2028c:	umull	r0, r2, r0, r2
   20290:	lsr	r2, r2, #3
   20294:	cmp	r2, r1
   20298:	cmpgt	r1, #0
   2029c:	movgt	r2, r1
   202a0:	str	r2, [r4, #160]	; 0xa0
   202a4:	ldr	r2, [r4, #20]
   202a8:	mvn	lr, #3
   202ac:	mov	r0, #4
   202b0:	ldr	r8, [r4, #28]
   202b4:	ldrh	r7, [r4, #130]	; 0x82
   202b8:	ldr	r1, [r4, #64]	; 0x40
   202bc:	ldr	r9, [r4, #60]	; 0x3c
   202c0:	str	r2, [r3, #8]
   202c4:	add	r2, r2, r8
   202c8:	add	r2, r2, #7
   202cc:	strh	r7, [r3, #12]
   202d0:	mov	r7, #0
   202d4:	bic	r2, r2, #7
   202d8:	strh	r0, [r4, #130]	; 0x82
   202dc:	sub	r1, r1, r2
   202e0:	str	r8, [r3]
   202e4:	cmp	r1, lr
   202e8:	add	r9, r9, r2
   202ec:	str	r7, [r4, #20]
   202f0:	movls	ip, r1
   202f4:	movhi	ip, lr
   202f8:	str	r2, [r4, #28]
   202fc:	mov	r1, #5
   20300:	strh	r1, [r3, #14]
   20304:	mov	r1, r5
   20308:	str	r0, [r3, #16]
   2030c:	mov	r0, r4
   20310:	str	r7, [r3, #20]
   20314:	str	r9, [r4, #16]
   20318:	str	ip, [r4, #24]
   2031c:	str	lr, [r3, #4]
   20320:	bl	1f5dc <flatcc_builder_extend_offset_vector@@Base>
   20324:	cmp	r0, r7
   20328:	beq	2036c <flatcc_builder_create_offset_vector@@Base+0x18c>
   2032c:	lsl	r2, r5, #2
   20330:	mov	r1, r6
   20334:	bl	1298c <memcpy@plt>
   20338:	ldr	r3, [r4, #32]
   2033c:	ldrh	r2, [r3, #14]
   20340:	cmp	r2, #5
   20344:	bne	20414 <flatcc_builder_create_offset_vector@@Base+0x234>
   20348:	ldr	r2, [r3, #20]
   2034c:	cmn	r2, #-1073741823	; 0xc0000001
   20350:	bhi	2036c <flatcc_builder_create_offset_vector@@Base+0x18c>
   20354:	mov	r3, r7
   20358:	mov	r0, r4
   2035c:	ldr	r1, [r4, #16]
   20360:	bl	1de58 <flatcc_builder_default_alloc@@Base+0x388>
   20364:	subs	r5, r0, #0
   20368:	bne	2039c <flatcc_builder_create_offset_vector@@Base+0x1bc>
   2036c:	mov	r5, #0
   20370:	mov	r0, r5
   20374:	add	sp, sp, #12
   20378:	ldrd	r4, [sp]
   2037c:	ldrd	r6, [sp, #8]
   20380:	ldrd	r8, [sp, #16]
   20384:	add	sp, sp, #24
   20388:	pop	{pc}		; (ldr pc, [sp], #4)
   2038c:	ldr	r3, [r0, #32]
   20390:	add	r3, r3, #36	; 0x24
   20394:	str	r3, [r0, #32]
   20398:	b	202a4 <flatcc_builder_create_offset_vector@@Base+0xc4>
   2039c:	mov	r1, r7
   203a0:	ldr	r0, [r4, #16]
   203a4:	ldr	r2, [r4, #20]
   203a8:	bl	12a1c <memset@plt>
   203ac:	ldr	r3, [r4, #32]
   203b0:	ldr	r0, [r4, #60]	; 0x3c
   203b4:	ldr	r2, [r4, #64]	; 0x40
   203b8:	ldr	ip, [r3]
   203bc:	ldmib	r3, {r1, lr}
   203c0:	add	r0, r0, ip
   203c4:	sub	r2, r2, ip
   203c8:	str	r0, [r4, #16]
   203cc:	cmp	r2, r1
   203d0:	ldrh	r0, [r4, #128]	; 0x80
   203d4:	movcs	r2, r1
   203d8:	str	lr, [r4, #20]
   203dc:	str	ip, [r4, #28]
   203e0:	ldrh	ip, [r4, #130]	; 0x82
   203e4:	str	r2, [r4, #24]
   203e8:	ldr	r2, [r4, #156]	; 0x9c
   203ec:	str	r1, [r3, #4]
   203f0:	cmp	r0, ip
   203f4:	sub	r0, r3, #36	; 0x24
   203f8:	strhcc	ip, [r4, #128]	; 0x80
   203fc:	ldrh	r1, [r3, #12]
   20400:	sub	r3, r2, #1
   20404:	str	r0, [r4, #32]
   20408:	strh	r1, [r4, #130]	; 0x82
   2040c:	str	r3, [r4, #156]	; 0x9c
   20410:	b	20370 <flatcc_builder_create_offset_vector@@Base+0x190>
   20414:	movw	r1, #36740	; 0x8f84
   20418:	movt	r1, #2
   2041c:	ldr	r3, [pc, #16]	; 20434 <flatcc_builder_create_offset_vector@@Base+0x254>
   20420:	movw	r0, #37204	; 0x9154
   20424:	movt	r0, #2
   20428:	movw	r2, #1480	; 0x5c8
   2042c:	bl	12a64 <__assert_fail@plt>
   20430:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>
   20434:	andeq	r8, r2, r0, asr #25

00020438 <flatcc_builder_start_string@@Base>:
   20438:	ldrd	r2, [r0, #156]	; 0x9c
   2043c:	strd	r4, [sp, #-16]!
   20440:	mov	r4, r0
   20444:	str	r6, [sp, #8]
   20448:	str	lr, [sp, #12]
   2044c:	sub	sp, sp, #8
   20450:	add	r1, r2, #1
   20454:	cmp	r1, r3
   20458:	str	r1, [r0, #156]	; 0x9c
   2045c:	ble	20574 <flatcc_builder_start_string@@Base+0x13c>
   20460:	ldr	r3, [r0, #176]	; 0xb0
   20464:	cmp	r3, #0
   20468:	cmpgt	r1, r3
   2046c:	movgt	r3, #1
   20470:	movle	r3, #0
   20474:	bgt	20584 <flatcc_builder_start_string@@Base+0x14c>
   20478:	add	r2, r2, r2, lsl #3
   2047c:	ldr	r1, [r0, #88]	; 0x58
   20480:	lsl	r5, r2, #2
   20484:	add	r2, r5, #36	; 0x24
   20488:	cmp	r2, r1
   2048c:	bls	204b0 <flatcc_builder_start_string@@Base+0x78>
   20490:	mov	ip, #4
   20494:	add	r1, r0, #84	; 0x54
   20498:	ldr	r0, [r0, #40]	; 0x28
   2049c:	str	ip, [sp]
   204a0:	ldr	r6, [r4, #48]	; 0x30
   204a4:	blx	r6
   204a8:	cmp	r0, #0
   204ac:	bne	2058c <flatcc_builder_start_string@@Base+0x154>
   204b0:	ldr	r3, [r4, #84]	; 0x54
   204b4:	add	r3, r3, r5
   204b8:	cmp	r3, #0
   204bc:	str	r3, [r4, #32]
   204c0:	beq	20584 <flatcc_builder_start_string@@Base+0x14c>
   204c4:	ldr	r2, [r4, #88]	; 0x58
   204c8:	movw	r0, #36409	; 0x8e39
   204cc:	movt	r0, #14563	; 0x38e3
   204d0:	ldr	r1, [r4, #176]	; 0xb0
   204d4:	umull	r0, r2, r0, r2
   204d8:	lsr	r2, r2, #3
   204dc:	cmp	r1, #0
   204e0:	cmpgt	r2, r1
   204e4:	movgt	r2, r1
   204e8:	str	r2, [r4, #160]	; 0xa0
   204ec:	ldr	r2, [r4, #20]
   204f0:	mvn	r5, #3
   204f4:	mov	lr, #0
   204f8:	ldr	r0, [r4, #28]
   204fc:	ldrh	r6, [r4, #130]	; 0x82
   20500:	ldr	ip, [r4, #60]	; 0x3c
   20504:	ldr	r1, [r4, #64]	; 0x40
   20508:	str	r2, [r3, #8]
   2050c:	add	r2, r2, r0
   20510:	add	r2, r2, #7
   20514:	strh	r6, [r3, #12]
   20518:	mov	r6, #1
   2051c:	bic	r2, r2, #7
   20520:	add	ip, ip, r2
   20524:	strh	r6, [r4, #130]	; 0x82
   20528:	sub	r1, r1, r2
   2052c:	str	r0, [r3]
   20530:	mov	r0, lr
   20534:	cmp	r1, r5
   20538:	str	lr, [r4, #20]
   2053c:	movhi	r1, r5
   20540:	str	r2, [r4, #28]
   20544:	mov	r2, #6
   20548:	strh	r2, [r3, #14]
   2054c:	str	r6, [r3, #16]
   20550:	str	lr, [r3, #20]
   20554:	str	ip, [r4, #16]
   20558:	str	r1, [r4, #24]
   2055c:	str	r5, [r3, #4]
   20560:	add	sp, sp, #8
   20564:	ldrd	r4, [sp]
   20568:	ldr	r6, [sp, #8]
   2056c:	add	sp, sp, #12
   20570:	pop	{pc}		; (ldr pc, [sp], #4)
   20574:	ldr	r3, [r0, #32]
   20578:	add	r3, r3, #36	; 0x24
   2057c:	str	r3, [r0, #32]
   20580:	b	204ec <flatcc_builder_start_string@@Base+0xb4>
   20584:	mvn	r0, #0
   20588:	b	20560 <flatcc_builder_start_string@@Base+0x128>
   2058c:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

00020590 <flatcc_builder_reserve_table@@Base>:
   20590:	cmp	r1, #0
   20594:	strd	r4, [sp, #-20]!	; 0xffffffec
   20598:	strd	r6, [sp, #8]
   2059c:	str	lr, [sp, #16]
   205a0:	sub	sp, sp, #12
   205a4:	blt	20688 <flatcc_builder_reserve_table@@Base+0xf8>
   205a8:	ldr	r2, [r0, #32]
   205ac:	add	r1, r1, #2
   205b0:	mov	r4, r0
   205b4:	lsl	r5, r1, #1
   205b8:	ldr	r1, [r0, #56]	; 0x38
   205bc:	ldrh	r6, [r2, #28]
   205c0:	ldr	r3, [r2, #16]
   205c4:	add	r6, r3, r6, lsl #1
   205c8:	add	r2, r6, r5
   205cc:	cmp	r2, r1
   205d0:	bhi	20638 <flatcc_builder_reserve_table@@Base+0xa8>
   205d4:	ldr	r3, [r4, #52]	; 0x34
   205d8:	adds	r3, r3, r6
   205dc:	mvneq	r0, #0
   205e0:	streq	r3, [r4, #4]
   205e4:	beq	20624 <flatcc_builder_reserve_table@@Base+0x94>
   205e8:	ldr	r2, [r4, #32]
   205ec:	add	r3, r3, #4
   205f0:	ldr	r1, [r4, #80]	; 0x50
   205f4:	ldr	r6, [r2, #20]
   205f8:	str	r3, [r4, #4]
   205fc:	add	r2, r5, r6
   20600:	sub	r2, r2, #3
   20604:	cmp	r2, r1
   20608:	bhi	20660 <flatcc_builder_reserve_table@@Base+0xd0>
   2060c:	ldr	r3, [r4, #76]	; 0x4c
   20610:	add	r3, r3, r6
   20614:	clz	r0, r3
   20618:	lsr	r0, r0, #5
   2061c:	str	r3, [r4]
   20620:	rsb	r0, r0, #0
   20624:	add	sp, sp, #12
   20628:	ldrd	r4, [sp]
   2062c:	ldrd	r6, [sp, #8]
   20630:	add	sp, sp, #16
   20634:	pop	{pc}		; (ldr pc, [sp], #4)
   20638:	mov	ip, #0
   2063c:	add	r1, r0, #52	; 0x34
   20640:	ldr	r0, [r0, #40]	; 0x28
   20644:	mov	r3, #1
   20648:	str	ip, [sp]
   2064c:	ldr	r7, [r4, #48]	; 0x30
   20650:	blx	r7
   20654:	cmp	r0, #0
   20658:	beq	205d4 <flatcc_builder_reserve_table@@Base+0x44>
   2065c:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>
   20660:	mov	ip, #3
   20664:	mov	r3, #0
   20668:	ldr	r0, [r4, #40]	; 0x28
   2066c:	add	r1, r4, #76	; 0x4c
   20670:	str	ip, [sp]
   20674:	ldr	r5, [r4, #48]	; 0x30
   20678:	blx	r5
   2067c:	cmp	r0, #0
   20680:	beq	2060c <flatcc_builder_reserve_table@@Base+0x7c>
   20684:	b	2065c <flatcc_builder_reserve_table@@Base+0xcc>
   20688:	movw	r1, #36740	; 0x8f84
   2068c:	movt	r1, #2
   20690:	ldr	r3, [pc, #12]	; 206a4 <flatcc_builder_reserve_table@@Base+0x114>
   20694:	movw	r0, #37388	; 0x920c
   20698:	movt	r0, #2
   2069c:	movw	r2, #1065	; 0x429
   206a0:	bl	12a64 <__assert_fail@plt>
   206a4:	andeq	r8, r2, r4, ror #25

000206a8 <flatcc_builder_start_table@@Base>:
   206a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   206ac:	mov	r5, r1
   206b0:	mov	r1, #4
   206b4:	strd	r6, [sp, #8]
   206b8:	mov	r4, r0
   206bc:	strd	r8, [sp, #16]
   206c0:	str	sl, [sp, #24]
   206c4:	str	lr, [sp, #28]
   206c8:	sub	sp, sp, #8
   206cc:	bl	1dd34 <flatcc_builder_default_alloc@@Base+0x264>
   206d0:	subs	r7, r0, #0
   206d4:	bne	2081c <flatcc_builder_start_table@@Base+0x174>
   206d8:	ldm	r4, {r0, r2}
   206dc:	add	r5, r5, #2
   206e0:	movw	ip, #15186	; 0x3b52
   206e4:	movt	ip, #12137	; 0x2f69
   206e8:	lsl	r5, r5, #1
   206ec:	mov	r8, #3
   206f0:	ldrh	lr, [r4, #8]
   206f4:	ldr	r1, [r4, #52]	; 0x34
   206f8:	ldr	sl, [r4, #76]	; 0x4c
   206fc:	ldr	r3, [r4, #32]
   20700:	sub	r2, r2, r1
   20704:	ldr	r9, [r4, #56]	; 0x38
   20708:	add	r6, r2, lr, lsl #1
   2070c:	sub	r0, r0, sl
   20710:	ldr	sl, [r4, #12]
   20714:	str	r2, [r3, #16]
   20718:	add	r2, r6, r5
   2071c:	str	r0, [r3, #20]
   20720:	cmp	r2, r9
   20724:	str	sl, [r3, #24]
   20728:	strh	lr, [r3, #28]
   2072c:	strh	r7, [r4, #8]
   20730:	str	ip, [r4, #12]
   20734:	strh	r8, [r3, #14]
   20738:	bls	20760 <flatcc_builder_start_table@@Base+0xb8>
   2073c:	mov	r3, #1
   20740:	add	r1, r4, #52	; 0x34
   20744:	str	r7, [sp]
   20748:	ldr	r0, [r4, #40]	; 0x28
   2074c:	ldr	r8, [r4, #48]	; 0x30
   20750:	blx	r8
   20754:	cmp	r0, #0
   20758:	bne	20818 <flatcc_builder_start_table@@Base+0x170>
   2075c:	ldr	r1, [r4, #52]	; 0x34
   20760:	adds	r6, r6, r1
   20764:	streq	r6, [r4, #4]
   20768:	beq	2081c <flatcc_builder_start_table@@Base+0x174>
   2076c:	ldr	r1, [r4, #32]
   20770:	sub	r2, r5, #3
   20774:	add	r6, r6, #4
   20778:	ldr	r3, [r4, #80]	; 0x50
   2077c:	ldr	r5, [r1, #20]
   20780:	str	r6, [r4, #4]
   20784:	add	r2, r2, r5
   20788:	cmp	r2, r3
   2078c:	bhi	207f4 <flatcc_builder_start_table@@Base+0x14c>
   20790:	ldr	r3, [r4, #76]	; 0x4c
   20794:	add	r3, r3, r5
   20798:	cmp	r3, #0
   2079c:	str	r3, [r4]
   207a0:	beq	2081c <flatcc_builder_start_table@@Base+0x174>
   207a4:	ldr	r0, [r4, #28]
   207a8:	movw	r2, #65532	; 0xfffc
   207ac:	ldr	ip, [r4, #32]
   207b0:	ldr	r3, [r4, #64]	; 0x40
   207b4:	ldr	r1, [r4, #60]	; 0x3c
   207b8:	sub	r3, r3, r0
   207bc:	cmp	r3, r2
   207c0:	add	r1, r1, r0
   207c4:	movcs	r3, r2
   207c8:	str	r1, [r4, #16]
   207cc:	str	r3, [r4, #24]
   207d0:	str	r2, [ip, #4]
   207d4:	mov	r0, r7
   207d8:	add	sp, sp, #8
   207dc:	ldrd	r4, [sp]
   207e0:	ldrd	r6, [sp, #8]
   207e4:	ldrd	r8, [sp, #16]
   207e8:	ldr	sl, [sp, #24]
   207ec:	add	sp, sp, #28
   207f0:	pop	{pc}		; (ldr pc, [sp], #4)
   207f4:	mov	ip, #3
   207f8:	mov	r3, #0
   207fc:	ldr	r0, [r4, #40]	; 0x28
   20800:	add	r1, r4, #76	; 0x4c
   20804:	str	ip, [sp]
   20808:	ldr	r6, [r4, #48]	; 0x30
   2080c:	blx	r6
   20810:	cmp	r0, #0
   20814:	beq	20790 <flatcc_builder_start_table@@Base+0xe8>
   20818:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>
   2081c:	mvn	r7, #0
   20820:	b	207d4 <flatcc_builder_start_table@@Base+0x12c>

00020824 <flatcc_builder_create_vtable@@Base>:
   20824:	strd	r4, [sp, #-16]!
   20828:	mov	r5, r0
   2082c:	mov	r3, #0
   20830:	ldr	ip, [r5, #152]	; 0x98
   20834:	subs	r0, r2, #0
   20838:	str	r6, [sp, #8]
   2083c:	str	lr, [sp, #12]
   20840:	sub	sp, sp, #80	; 0x50
   20844:	str	r3, [sp, #8]
   20848:	str	r3, [sp, #12]
   2084c:	beq	208c8 <flatcc_builder_create_vtable@@Base+0xa4>
   20850:	mov	r2, #1
   20854:	cmp	ip, r3
   20858:	str	r0, [sp, #8]
   2085c:	str	r2, [sp, #12]
   20860:	str	r1, [sp, #16]
   20864:	str	r0, [sp, #20]
   20868:	beq	208f8 <flatcc_builder_create_vtable@@Base+0xd4>
   2086c:	ldr	r3, [r5, #136]	; 0x88
   20870:	sub	r4, r3, r0
   20874:	cmp	r3, r4
   20878:	ble	208dc <flatcc_builder_create_vtable@@Base+0xb8>
   2087c:	mov	r3, r4
   20880:	mov	r2, #1
   20884:	str	r0, [sp]
   20888:	add	r1, sp, #16
   2088c:	ldr	r0, [r5, #36]	; 0x24
   20890:	ldr	r6, [r5, #44]	; 0x2c
   20894:	blx	r6
   20898:	cmp	r0, #0
   2089c:	bne	20940 <flatcc_builder_create_vtable@@Base+0x11c>
   208a0:	cmp	r4, #0
   208a4:	str	r4, [r5, #136]	; 0x88
   208a8:	beq	208b0 <flatcc_builder_create_vtable@@Base+0x8c>
   208ac:	add	r4, r4, #1
   208b0:	mov	r0, r4
   208b4:	add	sp, sp, #80	; 0x50
   208b8:	ldrd	r4, [sp]
   208bc:	ldr	r6, [sp, #8]
   208c0:	add	sp, sp, #12
   208c4:	pop	{pc}		; (ldr pc, [sp], #4)
   208c8:	cmp	ip, #0
   208cc:	bne	208dc <flatcc_builder_create_vtable@@Base+0xb8>
   208d0:	ldr	r2, [r5, #180]	; 0xb4
   208d4:	cmp	r2, #0
   208d8:	beq	20938 <flatcc_builder_create_vtable@@Base+0x114>
   208dc:	movw	r1, #36740	; 0x8f84
   208e0:	movt	r1, #2
   208e4:	ldr	r3, [pc, #88]	; 20944 <flatcc_builder_create_vtable@@Base+0x120>
   208e8:	movw	r0, #36924	; 0x903c
   208ec:	movt	r0, #2
   208f0:	movw	r2, #647	; 0x287
   208f4:	bl	12a64 <__assert_fail@plt>
   208f8:	ldr	r3, [r5, #180]	; 0xb4
   208fc:	cmp	r3, #0
   20900:	bne	2086c <flatcc_builder_create_vtable@@Base+0x48>
   20904:	ldr	r4, [r5, #140]	; 0x8c
   20908:	mov	ip, r0
   2090c:	add	r0, r4, r0
   20910:	str	r0, [r5, #140]	; 0x8c
   20914:	mov	r3, r4
   20918:	add	r1, sp, #16
   2091c:	str	ip, [sp]
   20920:	ldr	r0, [r5, #36]	; 0x24
   20924:	ldr	r5, [r5, #44]	; 0x2c
   20928:	blx	r5
   2092c:	cmp	r0, #0
   20930:	beq	208ac <flatcc_builder_create_vtable@@Base+0x88>
   20934:	bl	1dc1c <flatcc_builder_default_alloc@@Base+0x14c>
   20938:	ldr	r4, [r5, #140]	; 0x8c
   2093c:	b	20914 <flatcc_builder_create_vtable@@Base+0xf0>
   20940:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   20944:	andeq	r8, r2, r0, ror #16

00020948 <flatcc_builder_create_cached_vtable@@Base>:
   20948:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2094c:	strd	r6, [sp, #8]
   20950:	mov	r6, r0
   20954:	strd	r8, [sp, #16]
   20958:	mov	r9, r2
   2095c:	mov	r8, r3
   20960:	strd	sl, [sp, #24]
   20964:	str	lr, [sp, #32]
   20968:	sub	sp, sp, #28
   2096c:	str	r1, [sp, #8]
   20970:	ldr	r1, [r0, #116]	; 0x74
   20974:	cmp	r1, #0
   20978:	rsbne	r1, r1, #32
   2097c:	beq	20b04 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   20980:	ldr	sl, [r6, #92]	; 0x5c
   20984:	lsr	r8, r8, r1
   20988:	adds	fp, sl, r8, lsl #2
   2098c:	str	fp, [sp, #12]
   20990:	beq	20ba0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20994:	ldr	r5, [sl, r8, lsl #2]
   20998:	cmp	r5, #0
   2099c:	beq	20bd4 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   209a0:	mov	r3, #0
   209a4:	str	r8, [sp, #16]
   209a8:	mov	r8, fp
   209ac:	mov	fp, r6
   209b0:	ldr	r7, [r6, #68]	; 0x44
   209b4:	str	r3, [sp, #20]
   209b8:	ldr	r3, [r6, #100]	; 0x64
   209bc:	mov	r6, r3
   209c0:	add	r4, r6, r5
   209c4:	ldr	r1, [r4, #8]
   209c8:	ldrh	r2, [r7, r1]
   209cc:	add	r1, r7, r1
   209d0:	cmp	r2, r9
   209d4:	bne	20ab0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   209d8:	mov	r2, r9
   209dc:	ldr	r0, [sp, #8]
   209e0:	bl	12998 <memcmp@plt>
   209e4:	cmp	r0, #0
   209e8:	bne	20ab0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   209ec:	ldr	r1, [r4, #4]
   209f0:	ldr	r2, [fp, #152]	; 0x98
   209f4:	cmp	r1, r2
   209f8:	beq	20abc <flatcc_builder_create_cached_vtable@@Base+0x174>
   209fc:	ldr	r5, [r4, #12]
   20a00:	add	r8, r4, #12
   20a04:	str	r4, [sp, #20]
   20a08:	cmp	r5, #0
   20a0c:	bne	209c0 <flatcc_builder_create_cached_vtable@@Base+0x78>
   20a10:	ldr	r8, [sp, #16]
   20a14:	mov	r6, fp
   20a18:	ldr	r3, [r6, #104]	; 0x68
   20a1c:	ldr	r4, [r6, #124]	; 0x7c
   20a20:	add	r2, r4, #16
   20a24:	cmp	r2, r3
   20a28:	bls	20a50 <flatcc_builder_create_cached_vtable@@Base+0x108>
   20a2c:	mov	ip, #6
   20a30:	mov	r3, #0
   20a34:	ldr	r0, [r6, #40]	; 0x28
   20a38:	add	r1, r6, #100	; 0x64
   20a3c:	str	ip, [sp]
   20a40:	ldr	r5, [r6, #48]	; 0x30
   20a44:	blx	r5
   20a48:	cmp	r0, #0
   20a4c:	bne	20bd0 <flatcc_builder_create_cached_vtable@@Base+0x288>
   20a50:	ldr	r5, [r6, #100]	; 0x64
   20a54:	adds	r7, r5, r4
   20a58:	beq	20ba0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20a5c:	ldr	r3, [r6, #124]	; 0x7c
   20a60:	mov	r2, r9
   20a64:	ldr	r0, [r6, #152]	; 0x98
   20a68:	ldr	r1, [sp, #8]
   20a6c:	add	ip, r3, #16
   20a70:	str	ip, [r6, #124]	; 0x7c
   20a74:	str	r0, [r7, #4]
   20a78:	mov	r0, r6
   20a7c:	ldr	ip, [sl, r8, lsl #2]
   20a80:	str	ip, [r7, #12]
   20a84:	str	r3, [sl, r8, lsl #2]
   20a88:	bl	20824 <flatcc_builder_create_vtable@@Base>
   20a8c:	cmp	r0, #0
   20a90:	str	r0, [r5, r4]
   20a94:	beq	20ba0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20a98:	ldr	r3, [sp, #20]
   20a9c:	cmp	r3, #0
   20aa0:	beq	20be4 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   20aa4:	ldr	r3, [r3, #8]
   20aa8:	str	r3, [r7, #8]
   20aac:	b	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20ab0:	add	r8, r4, #12
   20ab4:	ldr	r5, [r4, #12]
   20ab8:	b	20a08 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   20abc:	ldr	r3, [sp, #12]
   20ac0:	mov	fp, r8
   20ac4:	ldr	r8, [sp, #16]
   20ac8:	cmp	r3, fp
   20acc:	beq	20ae4 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   20ad0:	ldr	r3, [r4, #12]
   20ad4:	str	r3, [fp]
   20ad8:	ldr	r3, [sl, r8, lsl #2]
   20adc:	str	r3, [r4, #12]
   20ae0:	str	r5, [sl, r8, lsl #2]
   20ae4:	ldr	r0, [r4]
   20ae8:	add	sp, sp, #28
   20aec:	ldrd	r4, [sp]
   20af0:	ldrd	r6, [sp, #8]
   20af4:	ldrd	r8, [sp, #16]
   20af8:	ldrd	sl, [sp, #24]
   20afc:	add	sp, sp, #32
   20b00:	pop	{pc}		; (ldr pc, [sp], #4)
   20b04:	ldr	r4, [r0, #124]	; 0x7c
   20b08:	add	r5, r0, #92	; 0x5c
   20b0c:	cmp	r4, #0
   20b10:	bne	20c94 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   20b14:	ldr	r3, [r0, #104]	; 0x68
   20b18:	cmp	r3, #15
   20b1c:	bls	20ba8 <flatcc_builder_create_cached_vtable@@Base+0x260>
   20b20:	ldr	r3, [r6, #100]	; 0x64
   20b24:	cmp	r3, #0
   20b28:	beq	20ba0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20b2c:	mov	ip, #16
   20b30:	mov	r2, #5
   20b34:	ldr	r0, [r6, #40]	; 0x28
   20b38:	mov	r1, r5
   20b3c:	mov	r3, #1
   20b40:	str	r2, [sp]
   20b44:	mov	r2, #256	; 0x100
   20b48:	str	ip, [r6, #124]	; 0x7c
   20b4c:	ldr	r5, [r6, #48]	; 0x30
   20b50:	blx	r5
   20b54:	cmp	r0, #0
   20b58:	bne	20ba0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20b5c:	mov	r3, #256	; 0x100
   20b60:	ldr	r1, [r6, #96]	; 0x60
   20b64:	b	20b6c <flatcc_builder_create_cached_vtable@@Base+0x224>
   20b68:	mov	r3, r2
   20b6c:	lsl	r2, r3, #1
   20b70:	cmp	r2, r1
   20b74:	bls	20b68 <flatcc_builder_create_cached_vtable@@Base+0x220>
   20b78:	lsr	r3, r3, #2
   20b7c:	cmp	r3, #1
   20b80:	bls	20bdc <flatcc_builder_create_cached_vtable@@Base+0x294>
   20b84:	mov	r2, #1
   20b88:	add	r4, r4, #1
   20b8c:	cmp	r3, r2, lsl r4
   20b90:	bhi	20b88 <flatcc_builder_create_cached_vtable@@Base+0x240>
   20b94:	rsb	r1, r4, #32
   20b98:	str	r4, [r6, #116]	; 0x74
   20b9c:	b	20980 <flatcc_builder_create_cached_vtable@@Base+0x38>
   20ba0:	mov	r0, #0
   20ba4:	b	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20ba8:	mov	ip, #6
   20bac:	add	r1, r0, #100	; 0x64
   20bb0:	ldr	r0, [r0, #40]	; 0x28
   20bb4:	mov	r3, r4
   20bb8:	mov	r2, #16
   20bbc:	str	ip, [sp]
   20bc0:	ldr	r7, [r6, #48]	; 0x30
   20bc4:	blx	r7
   20bc8:	cmp	r0, #0
   20bcc:	beq	20b20 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   20bd0:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>
   20bd4:	str	r5, [sp, #20]
   20bd8:	b	20a18 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   20bdc:	mov	r1, #32
   20be0:	b	20b98 <flatcc_builder_create_cached_vtable@@Base+0x250>
   20be4:	ldr	r8, [r6, #120]	; 0x78
   20be8:	ldr	r3, [r6, #172]	; 0xac
   20bec:	add	r2, r9, r8
   20bf0:	cmp	r3, #0
   20bf4:	beq	20c34 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   20bf8:	cmp	r3, r2
   20bfc:	bcs	20c34 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   20c00:	ldr	r3, [r6, #116]	; 0x74
   20c04:	cmp	r3, #0
   20c08:	beq	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20c0c:	ldr	r7, [sp, #20]
   20c10:	ldr	r0, [r6, #92]	; 0x5c
   20c14:	ldr	r2, [r6, #96]	; 0x60
   20c18:	mov	r1, r7
   20c1c:	bl	12a1c <memset@plt>
   20c20:	mov	r3, #16
   20c24:	mov	r2, r7
   20c28:	ldr	r0, [r5, r4]
   20c2c:	strd	r2, [r6, #120]	; 0x78
   20c30:	b	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20c34:	ldr	r3, [r6, #72]	; 0x48
   20c38:	cmp	r3, r2
   20c3c:	bcs	20c64 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   20c40:	mov	ip, #2
   20c44:	mov	r3, #0
   20c48:	ldr	r0, [r6, #40]	; 0x28
   20c4c:	add	r1, r6, #68	; 0x44
   20c50:	str	ip, [sp]
   20c54:	ldr	sl, [r6, #48]	; 0x30
   20c58:	blx	sl
   20c5c:	cmp	r0, #0
   20c60:	bne	20bd0 <flatcc_builder_create_cached_vtable@@Base+0x288>
   20c64:	ldr	r3, [r6, #68]	; 0x44
   20c68:	adds	r0, r3, r8
   20c6c:	beq	20cb0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   20c70:	ldr	r3, [r6, #120]	; 0x78
   20c74:	mov	r2, r9
   20c78:	ldr	r1, [sp, #8]
   20c7c:	add	r9, r3, r9
   20c80:	str	r3, [r7, #8]
   20c84:	str	r9, [r6, #120]	; 0x78
   20c88:	bl	1298c <memcpy@plt>
   20c8c:	ldr	r0, [r5, r4]
   20c90:	b	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20c94:	movw	r1, #36740	; 0x8f84
   20c98:	movt	r1, #2
   20c9c:	ldr	r3, [pc, #20]	; 20cb8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   20ca0:	movw	r0, #37400	; 0x9218
   20ca4:	movt	r0, #2
   20ca8:	movw	r2, #342	; 0x156
   20cac:	bl	12a64 <__assert_fail@plt>
   20cb0:	mvn	r0, #0
   20cb4:	b	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20cb8:	andeq	r8, r2, r4, lsl #26

00020cbc <flatcc_builder_create_table@@Base>:
   20cbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20cc0:	mov	r5, r0
   20cc4:	strd	r6, [sp, #8]
   20cc8:	str	r8, [sp, #16]
   20ccc:	str	lr, [sp, #20]
   20cd0:	sub	sp, sp, #88	; 0x58
   20cd4:	ldr	r6, [sp, #116]	; 0x74
   20cd8:	ldr	r0, [sp, #120]	; 0x78
   20cdc:	cmp	r6, #0
   20ce0:	blt	20e48 <flatcc_builder_create_table@@Base+0x18c>
   20ce4:	ands	r7, r0, #1
   20ce8:	beq	20e2c <flatcc_builder_create_table@@Base+0x170>
   20cec:	ldrh	ip, [r5, #128]	; 0x80
   20cf0:	cmp	r3, #4
   20cf4:	sub	r0, r0, #1
   20cf8:	movcc	r3, #4
   20cfc:	cmp	ip, r3
   20d00:	ldr	ip, [r5, #136]	; 0x88
   20d04:	strhcc	r3, [r5, #128]	; 0x80
   20d08:	sub	r3, r3, #1
   20d0c:	cmp	r6, #0
   20d10:	sub	r4, ip, r2
   20d14:	mov	r8, r4
   20d18:	sub	r4, r4, #4
   20d1c:	and	r8, r8, r3
   20d20:	sub	r0, r4, r0
   20d24:	sub	r0, r0, r8
   20d28:	str	r0, [sp, #12]
   20d2c:	beq	20d60 <flatcc_builder_create_table@@Base+0xa4>
   20d30:	ldr	ip, [sp, #112]	; 0x70
   20d34:	sub	r4, r8, r4
   20d38:	sub	r4, r4, #4
   20d3c:	add	r6, ip, r6, lsl #1
   20d40:	ldrh	r3, [ip], #2
   20d44:	ldr	r0, [r1, r3]
   20d48:	sub	lr, r4, r3
   20d4c:	cmp	r6, ip
   20d50:	add	r0, r0, lr
   20d54:	str	r0, [r1, r3]
   20d58:	bne	20d40 <flatcc_builder_create_table@@Base+0x84>
   20d5c:	ldr	ip, [r5, #136]	; 0x88
   20d60:	mov	r0, #4
   20d64:	add	r3, sp, #12
   20d68:	mov	lr, #1
   20d6c:	cmp	r2, #0
   20d70:	moveq	r2, #2
   20d74:	str	r0, [sp, #16]
   20d78:	str	lr, [sp, #20]
   20d7c:	str	r3, [sp, #24]
   20d80:	str	r0, [sp, #28]
   20d84:	beq	20da8 <flatcc_builder_create_table@@Base+0xec>
   20d88:	mov	r3, #2
   20d8c:	add	r0, r2, r0
   20d90:	mov	r7, r3
   20d94:	str	r0, [sp, #16]
   20d98:	str	r2, [sp, #36]	; 0x24
   20d9c:	mov	r2, #3
   20da0:	str	r3, [sp, #20]
   20da4:	str	r1, [sp, #32]
   20da8:	cmp	r8, #0
   20dac:	bne	20e00 <flatcc_builder_create_table@@Base+0x144>
   20db0:	sub	r4, ip, r0
   20db4:	cmp	r4, ip
   20db8:	bge	20e68 <flatcc_builder_create_table@@Base+0x1ac>
   20dbc:	mov	r2, r7
   20dc0:	mov	r3, r4
   20dc4:	str	r0, [sp]
   20dc8:	add	r1, sp, #24
   20dcc:	ldr	r0, [r5, #36]	; 0x24
   20dd0:	ldr	r6, [r5, #44]	; 0x2c
   20dd4:	blx	r6
   20dd8:	cmp	r0, #0
   20ddc:	bne	20e64 <flatcc_builder_create_table@@Base+0x1a8>
   20de0:	mov	r0, r4
   20de4:	str	r4, [r5, #136]	; 0x88
   20de8:	add	sp, sp, #88	; 0x58
   20dec:	ldrd	r4, [sp]
   20df0:	ldrd	r6, [sp, #8]
   20df4:	ldr	r8, [sp, #16]
   20df8:	add	sp, sp, #20
   20dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   20e00:	ldr	r1, [pc, #124]	; 20e84 <flatcc_builder_create_table@@Base+0x1c8>
   20e04:	add	r7, r7, #1
   20e08:	add	r3, sp, #88	; 0x58
   20e0c:	add	r3, r3, r7, lsl #3
   20e10:	add	r0, r0, r8
   20e14:	mov	r7, r2
   20e18:	str	r0, [sp, #16]
   20e1c:	str	r2, [sp, #20]
   20e20:	str	r1, [r3, #-72]	; 0xffffffb8
   20e24:	str	r8, [r3, #-68]	; 0xffffffbc
   20e28:	b	20db0 <flatcc_builder_create_table@@Base+0xf4>
   20e2c:	movw	r1, #36740	; 0x8f84
   20e30:	movt	r1, #2
   20e34:	ldr	r3, [pc, #76]	; 20e88 <flatcc_builder_create_table@@Base+0x1cc>
   20e38:	movw	r0, #37436	; 0x923c
   20e3c:	movt	r0, #2
   20e40:	movw	r2, #1243	; 0x4db
   20e44:	bl	12a64 <__assert_fail@plt>
   20e48:	movw	r1, #36740	; 0x8f84
   20e4c:	movt	r1, #2
   20e50:	ldr	r3, [pc, #48]	; 20e88 <flatcc_builder_create_table@@Base+0x1cc>
   20e54:	movw	r0, #37416	; 0x9228
   20e58:	movt	r0, #2
   20e5c:	movw	r2, #1237	; 0x4d5
   20e60:	bl	12a64 <__assert_fail@plt>
   20e64:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   20e68:	movw	r1, #36740	; 0x8f84
   20e6c:	movt	r1, #2
   20e70:	ldr	r3, [pc, #20]	; 20e8c <flatcc_builder_create_table@@Base+0x1d0>
   20e74:	movw	r0, #36924	; 0x903c
   20e78:	movt	r0, #2
   20e7c:	movw	r2, #647	; 0x287
   20e80:	bl	12a64 <__assert_fail@plt>
   20e84:	ldrdeq	r8, [r2], -ip
   20e88:	andeq	r8, r2, r0, lsl sp
   20e8c:	andeq	r8, r2, r0, ror #16

00020e90 <flatcc_builder_check_required_field@@Base>:
   20e90:	ldr	r3, [r0, #32]
   20e94:	ldrh	r3, [r3, #14]
   20e98:	cmp	r3, #3
   20e9c:	bne	20ecc <flatcc_builder_check_required_field@@Base+0x3c>
   20ea0:	ldrh	r3, [r0, #8]
   20ea4:	cmp	r3, r1
   20ea8:	bls	20ec4 <flatcc_builder_check_required_field@@Base+0x34>
   20eac:	ldr	r3, [r0, #4]
   20eb0:	lsl	r1, r1, #1
   20eb4:	ldrh	r0, [r3, r1]
   20eb8:	adds	r0, r0, #0
   20ebc:	movne	r0, #1
   20ec0:	bx	lr
   20ec4:	mov	r0, #0
   20ec8:	bx	lr
   20ecc:	movw	r1, #36740	; 0x8f84
   20ed0:	movt	r1, #2
   20ed4:	ldr	r3, [pc, #20]	; 20ef0 <flatcc_builder_check_required_field@@Base+0x60>
   20ed8:	movw	r0, #37448	; 0x9248
   20edc:	movt	r0, #2
   20ee0:	str	r4, [sp, #-8]!
   20ee4:	movw	r2, #1272	; 0x4f8
   20ee8:	str	lr, [sp, #4]
   20eec:	bl	12a64 <__assert_fail@plt>
   20ef0:	andeq	r8, r2, ip, lsr #26

00020ef4 <flatcc_builder_check_union_field@@Base>:
   20ef4:	ldr	r3, [r0, #32]
   20ef8:	ldrh	r3, [r3, #14]
   20efc:	cmp	r3, #3
   20f00:	bne	20f64 <flatcc_builder_check_union_field@@Base+0x70>
   20f04:	cmp	r1, #0
   20f08:	beq	20f50 <flatcc_builder_check_union_field@@Base+0x5c>
   20f0c:	ldrh	r3, [r0, #8]
   20f10:	cmp	r3, r1
   20f14:	bls	20f50 <flatcc_builder_check_union_field@@Base+0x5c>
   20f18:	ldr	r3, [r0, #4]
   20f1c:	sub	r1, r1, #-2147483647	; 0x80000001
   20f20:	lsl	r1, r1, #1
   20f24:	ldrh	r2, [r3, r1]!
   20f28:	cmp	r2, #0
   20f2c:	ldrh	r1, [r3, #2]
   20f30:	beq	20f44 <flatcc_builder_check_union_field@@Base+0x50>
   20f34:	ldr	r3, [r0, #16]
   20f38:	ldrb	r3, [r3, r2]
   20f3c:	cmp	r3, #0
   20f40:	bne	20f58 <flatcc_builder_check_union_field@@Base+0x64>
   20f44:	clz	r0, r1
   20f48:	lsr	r0, r0, #5
   20f4c:	bx	lr
   20f50:	mov	r0, #0
   20f54:	bx	lr
   20f58:	adds	r0, r1, #0
   20f5c:	movne	r0, #1
   20f60:	bx	lr
   20f64:	movw	r1, #36740	; 0x8f84
   20f68:	movt	r1, #2
   20f6c:	ldr	r3, [pc, #20]	; 20f88 <flatcc_builder_check_union_field@@Base+0x94>
   20f70:	movw	r0, #37448	; 0x9248
   20f74:	movt	r0, #2
   20f78:	str	r4, [sp, #-8]!
   20f7c:	movw	r2, #1279	; 0x4ff
   20f80:	str	lr, [sp, #4]
   20f84:	bl	12a64 <__assert_fail@plt>
   20f88:	andeq	r8, r2, r0, asr sp

00020f8c <flatcc_builder_check_required@@Base>:
   20f8c:	ldr	r3, [r0, #32]
   20f90:	ldrh	r3, [r3, #14]
   20f94:	cmp	r3, #3
   20f98:	bne	21000 <flatcc_builder_check_required@@Base+0x74>
   20f9c:	ldrh	r3, [r0, #8]
   20fa0:	cmp	r3, r2
   20fa4:	blt	20ff8 <flatcc_builder_check_required@@Base+0x6c>
   20fa8:	cmp	r2, #0
   20fac:	ble	20ff0 <flatcc_builder_check_required@@Base+0x64>
   20fb0:	ldrh	r3, [r1]
   20fb4:	ldr	ip, [r0, #4]
   20fb8:	lsl	r3, r3, #1
   20fbc:	ldrh	r0, [ip, r3]
   20fc0:	cmp	r0, #0
   20fc4:	bxeq	lr
   20fc8:	add	r2, r1, r2, lsl #1
   20fcc:	add	r1, r1, #2
   20fd0:	b	20fe8 <flatcc_builder_check_required@@Base+0x5c>
   20fd4:	ldrh	r3, [r1], #2
   20fd8:	lsl	r3, r3, #1
   20fdc:	ldrh	r0, [ip, r3]
   20fe0:	cmp	r0, #0
   20fe4:	bxeq	lr
   20fe8:	cmp	r1, r2
   20fec:	bne	20fd4 <flatcc_builder_check_required@@Base+0x48>
   20ff0:	mov	r0, #1
   20ff4:	bx	lr
   20ff8:	mov	r0, #0
   20ffc:	bx	lr
   21000:	movw	r1, #36740	; 0x8f84
   21004:	movt	r1, #2
   21008:	ldr	r3, [pc, #20]	; 21024 <flatcc_builder_check_required@@Base+0x98>
   2100c:	movw	r0, #37448	; 0x9248
   21010:	movt	r0, #2
   21014:	str	r4, [sp, #-8]!
   21018:	movw	r2, #1297	; 0x511
   2101c:	str	lr, [sp, #4]
   21020:	bl	12a64 <__assert_fail@plt>
   21024:	andeq	r8, r2, r4, ror sp

00021028 <flatcc_builder_end_table@@Base>:
   21028:	ldr	r3, [r0, #32]
   2102c:	strd	r4, [sp, #-20]!	; 0xffffffec
   21030:	ldrh	r3, [r3, #14]
   21034:	strd	r6, [sp, #8]
   21038:	str	lr, [sp, #16]
   2103c:	sub	sp, sp, #20
   21040:	cmp	r3, #3
   21044:	bne	211c8 <flatcc_builder_end_table@@Base+0x1a0>
   21048:	ldrh	r5, [r0, #8]
   2104c:	movw	ip, #31153	; 0x79b1
   21050:	movt	ip, #40503	; 0x9e37
   21054:	mov	r4, r0
   21058:	ldr	r1, [r0, #4]
   2105c:	ldr	r3, [r0, #12]
   21060:	add	r5, r5, #2
   21064:	lsl	r5, r5, #1
   21068:	ldr	lr, [r0, #20]
   2106c:	sub	r6, r1, #4
   21070:	uxth	r5, r5
   21074:	eor	r3, r3, r5
   21078:	mov	r2, r5
   2107c:	strh	r5, [r1, #-4]
   21080:	mul	r3, ip, r3
   21084:	add	lr, lr, #4
   21088:	uxth	lr, lr
   2108c:	eor	r3, r3, lr
   21090:	strh	lr, [r1, #-2]
   21094:	mov	r1, r6
   21098:	mul	r3, ip, r3
   2109c:	str	r3, [r0, #12]
   210a0:	bl	20948 <flatcc_builder_create_cached_vtable@@Base>
   210a4:	subs	r7, r0, #0
   210a8:	bne	210c8 <flatcc_builder_end_table@@Base+0xa0>
   210ac:	mov	r5, #0
   210b0:	mov	r0, r5
   210b4:	add	sp, sp, #20
   210b8:	ldrd	r4, [sp]
   210bc:	ldrd	r6, [sp, #8]
   210c0:	add	sp, sp, #16
   210c4:	pop	{pc}		; (ldr pc, [sp], #4)
   210c8:	mov	r2, r5
   210cc:	mov	r1, #0
   210d0:	mov	r0, r6
   210d4:	bl	12a1c <memset@plt>
   210d8:	ldr	ip, [r4]
   210dc:	mov	r0, r4
   210e0:	ldr	r3, [r4, #32]
   210e4:	ldr	r2, [r4, #76]	; 0x4c
   210e8:	ldr	r1, [r3, #20]
   210ec:	str	r7, [sp, #8]
   210f0:	ldrh	r3, [r4, #130]	; 0x82
   210f4:	add	r2, r2, r1
   210f8:	ldr	r1, [r4, #16]
   210fc:	sub	ip, ip, r2
   21100:	asr	ip, ip, #1
   21104:	str	r2, [sp]
   21108:	ldr	r2, [r4, #20]
   2110c:	str	ip, [sp, #4]
   21110:	bl	20cbc <flatcc_builder_create_table@@Base>
   21114:	subs	r5, r0, #0
   21118:	beq	210ac <flatcc_builder_end_table@@Base+0x84>
   2111c:	ldr	r3, [r4, #32]
   21120:	mov	r1, #0
   21124:	ldr	r0, [r4, #52]	; 0x34
   21128:	ldr	r2, [r4, #76]	; 0x4c
   2112c:	ldr	ip, [r3, #16]
   21130:	ldr	r6, [r3, #20]
   21134:	ldrh	lr, [r3, #28]
   21138:	add	r0, r0, ip
   2113c:	ldr	ip, [r3, #24]
   21140:	add	r3, r2, r6
   21144:	ldr	r2, [r4, #20]
   21148:	str	r3, [r4]
   2114c:	str	r0, [r4, #4]
   21150:	strh	lr, [r4, #8]
   21154:	str	ip, [r4, #12]
   21158:	ldr	r0, [r4, #16]
   2115c:	bl	12a1c <memset@plt>
   21160:	ldr	r3, [r4, #32]
   21164:	ldr	r0, [r4, #60]	; 0x3c
   21168:	ldr	r2, [r4, #64]	; 0x40
   2116c:	ldr	ip, [r3]
   21170:	ldmib	r3, {r1, lr}
   21174:	add	r0, r0, ip
   21178:	sub	r2, r2, ip
   2117c:	str	r0, [r4, #16]
   21180:	cmp	r2, r1
   21184:	ldrh	r0, [r4, #128]	; 0x80
   21188:	movcs	r2, r1
   2118c:	str	lr, [r4, #20]
   21190:	str	ip, [r4, #28]
   21194:	ldrh	ip, [r4, #130]	; 0x82
   21198:	str	r2, [r4, #24]
   2119c:	ldr	r2, [r4, #156]	; 0x9c
   211a0:	str	r1, [r3, #4]
   211a4:	cmp	r0, ip
   211a8:	sub	r0, r3, #36	; 0x24
   211ac:	strhcc	ip, [r4, #128]	; 0x80
   211b0:	ldrh	r1, [r3, #12]
   211b4:	sub	r3, r2, #1
   211b8:	str	r0, [r4, #32]
   211bc:	strh	r1, [r4, #130]	; 0x82
   211c0:	str	r3, [r4, #156]	; 0x9c
   211c4:	b	210b0 <flatcc_builder_end_table@@Base+0x88>
   211c8:	movw	r1, #36740	; 0x8f84
   211cc:	movt	r1, #2
   211d0:	ldr	r3, [pc, #12]	; 211e4 <flatcc_builder_end_table@@Base+0x1bc>
   211d4:	movw	r0, #37448	; 0x9248
   211d8:	movt	r0, #2
   211dc:	movw	r2, #1317	; 0x525
   211e0:	bl	12a64 <__assert_fail@plt>
   211e4:	muleq	r2, r4, sp

000211e8 <flatcc_builder_create_vector@@Base>:
   211e8:	strd	r4, [sp, #-16]!
   211ec:	mov	r4, r0
   211f0:	str	r6, [sp, #8]
   211f4:	str	lr, [sp, #12]
   211f8:	sub	sp, sp, #88	; 0x58
   211fc:	ldr	ip, [sp, #108]	; 0x6c
   21200:	ldrh	r0, [sp, #104]	; 0x68
   21204:	cmp	r2, ip
   21208:	bhi	212fc <flatcc_builder_create_vector@@Base+0x114>
   2120c:	ldrh	ip, [r4, #128]	; 0x80
   21210:	cmp	r0, #4
   21214:	mul	r3, r3, r2
   21218:	movcc	r0, #4
   2121c:	add	lr, sp, #12
   21220:	str	r2, [sp, #12]
   21224:	ldr	r6, [r4, #136]	; 0x88
   21228:	mov	r2, #1
   2122c:	str	lr, [sp, #24]
   21230:	cmp	ip, r0
   21234:	mov	ip, #4
   21238:	strhcc	r0, [r4, #128]	; 0x80
   2123c:	sub	lr, r6, r3
   21240:	sub	r0, r0, #1
   21244:	cmp	r3, #0
   21248:	and	r0, r0, lr
   2124c:	str	ip, [sp, #16]
   21250:	moveq	r3, #2
   21254:	str	r2, [sp, #20]
   21258:	str	ip, [sp, #28]
   2125c:	beq	21280 <flatcc_builder_create_vector@@Base+0x98>
   21260:	mov	lr, #2
   21264:	add	ip, r3, ip
   21268:	mov	r2, lr
   2126c:	str	ip, [sp, #16]
   21270:	str	r3, [sp, #36]	; 0x24
   21274:	mov	r3, #3
   21278:	str	lr, [sp, #20]
   2127c:	str	r1, [sp, #32]
   21280:	cmp	r0, #0
   21284:	bne	212d0 <flatcc_builder_create_vector@@Base+0xe8>
   21288:	sub	r5, r6, ip
   2128c:	cmp	r6, r5
   21290:	ble	2131c <flatcc_builder_create_vector@@Base+0x134>
   21294:	mov	r3, r5
   21298:	add	r1, sp, #24
   2129c:	str	ip, [sp]
   212a0:	ldr	r0, [r4, #36]	; 0x24
   212a4:	ldr	r6, [r4, #44]	; 0x2c
   212a8:	blx	r6
   212ac:	cmp	r0, #0
   212b0:	bne	21318 <flatcc_builder_create_vector@@Base+0x130>
   212b4:	mov	r0, r5
   212b8:	str	r5, [r4, #136]	; 0x88
   212bc:	add	sp, sp, #88	; 0x58
   212c0:	ldrd	r4, [sp]
   212c4:	ldr	r6, [sp, #8]
   212c8:	add	sp, sp, #12
   212cc:	pop	{pc}		; (ldr pc, [sp], #4)
   212d0:	ldr	lr, [pc, #96]	; 21338 <flatcc_builder_create_vector@@Base+0x150>
   212d4:	add	r2, r2, #1
   212d8:	add	r1, sp, #88	; 0x58
   212dc:	add	r1, r1, r2, lsl #3
   212e0:	add	ip, ip, r0
   212e4:	mov	r2, r3
   212e8:	str	ip, [sp, #16]
   212ec:	str	r3, [sp, #20]
   212f0:	str	lr, [r1, #-72]	; 0xffffffb8
   212f4:	str	r0, [r1, #-68]	; 0xffffffbc
   212f8:	b	21288 <flatcc_builder_create_vector@@Base+0xa0>
   212fc:	movw	r1, #36740	; 0x8f84
   21300:	movt	r1, #2
   21304:	ldr	r3, [pc, #48]	; 2133c <flatcc_builder_create_vector@@Base+0x154>
   21308:	movw	r0, #37492	; 0x9274
   2130c:	movt	r0, #2
   21310:	movw	r2, #1365	; 0x555
   21314:	bl	12a64 <__assert_fail@plt>
   21318:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   2131c:	movw	r1, #36740	; 0x8f84
   21320:	movt	r1, #2
   21324:	ldr	r3, [pc, #20]	; 21340 <flatcc_builder_create_vector@@Base+0x158>
   21328:	movw	r0, #36924	; 0x903c
   2132c:	movt	r0, #2
   21330:	movw	r2, #647	; 0x287
   21334:	bl	12a64 <__assert_fail@plt>
   21338:	ldrdeq	r8, [r2], -ip
   2133c:			; <UNDEFINED> instruction: 0x00028db0
   21340:	andeq	r8, r2, r0, ror #16

00021344 <flatcc_builder_end_vector@@Base>:
   21344:	ldr	r2, [r0, #32]
   21348:	strd	r4, [sp, #-16]!
   2134c:	ldrh	r3, [r2, #14]
   21350:	str	r6, [sp, #8]
   21354:	str	lr, [sp, #12]
   21358:	sub	sp, sp, #88	; 0x58
   2135c:	cmp	r3, #4
   21360:	bne	21528 <flatcc_builder_end_vector@@Base+0x1e4>
   21364:	ldr	ip, [r2, #20]
   21368:	mov	r4, r0
   2136c:	ldr	r1, [r2, #24]
   21370:	ldrh	r3, [r0, #130]	; 0x82
   21374:	ldr	r5, [r4, #16]
   21378:	cmp	ip, r1
   2137c:	ldr	r0, [r2, #16]
   21380:	bhi	2150c <flatcc_builder_end_vector@@Base+0x1c8>
   21384:	cmp	r3, #4
   21388:	mul	r0, r0, ip
   2138c:	mov	r1, #4
   21390:	ldrh	r2, [r4, #128]	; 0x80
   21394:	movcc	r3, #4
   21398:	add	r6, sp, #12
   2139c:	str	ip, [sp, #12]
   213a0:	ldr	lr, [r4, #136]	; 0x88
   213a4:	str	r1, [sp, #16]
   213a8:	str	r6, [sp, #24]
   213ac:	cmp	r2, r3
   213b0:	mov	r2, #1
   213b4:	strhcc	r3, [r4, #128]	; 0x80
   213b8:	sub	ip, lr, r0
   213bc:	sub	r3, r3, #1
   213c0:	cmp	r0, #0
   213c4:	and	r3, r3, ip
   213c8:	str	r2, [sp, #20]
   213cc:	moveq	r0, #2
   213d0:	str	r1, [sp, #28]
   213d4:	beq	213f8 <flatcc_builder_end_vector@@Base+0xb4>
   213d8:	mov	ip, #2
   213dc:	add	r1, r0, r1
   213e0:	mov	r2, ip
   213e4:	str	r1, [sp, #16]
   213e8:	str	r0, [sp, #36]	; 0x24
   213ec:	mov	r0, #3
   213f0:	str	ip, [sp, #20]
   213f4:	str	r5, [sp, #32]
   213f8:	cmp	r3, #0
   213fc:	bne	214c0 <flatcc_builder_end_vector@@Base+0x17c>
   21400:	sub	r5, lr, r1
   21404:	cmp	lr, r5
   21408:	ble	214f0 <flatcc_builder_end_vector@@Base+0x1ac>
   2140c:	mov	r3, r5
   21410:	str	r1, [sp]
   21414:	add	r1, sp, #24
   21418:	ldr	r0, [r4, #36]	; 0x24
   2141c:	ldr	r6, [r4, #44]	; 0x2c
   21420:	blx	r6
   21424:	subs	r1, r0, #0
   21428:	bne	214ec <flatcc_builder_end_vector@@Base+0x1a8>
   2142c:	cmp	r5, #0
   21430:	str	r5, [r4, #136]	; 0x88
   21434:	beq	214a8 <flatcc_builder_end_vector@@Base+0x164>
   21438:	ldr	r0, [r4, #16]
   2143c:	ldr	r2, [r4, #20]
   21440:	bl	12a1c <memset@plt>
   21444:	ldr	r3, [r4, #32]
   21448:	ldr	r0, [r4, #60]	; 0x3c
   2144c:	ldr	r2, [r4, #64]	; 0x40
   21450:	ldr	ip, [r3]
   21454:	ldmib	r3, {r1, lr}
   21458:	add	r0, r0, ip
   2145c:	sub	r2, r2, ip
   21460:	str	r0, [r4, #16]
   21464:	cmp	r2, r1
   21468:	ldrh	r0, [r4, #128]	; 0x80
   2146c:	movcs	r2, r1
   21470:	str	lr, [r4, #20]
   21474:	str	ip, [r4, #28]
   21478:	ldrh	ip, [r4, #130]	; 0x82
   2147c:	str	r2, [r4, #24]
   21480:	ldr	r2, [r4, #156]	; 0x9c
   21484:	str	r1, [r3, #4]
   21488:	cmp	r0, ip
   2148c:	sub	r0, r3, #36	; 0x24
   21490:	strhcc	ip, [r4, #128]	; 0x80
   21494:	ldrh	r1, [r3, #12]
   21498:	sub	r3, r2, #1
   2149c:	str	r0, [r4, #32]
   214a0:	strh	r1, [r4, #130]	; 0x82
   214a4:	str	r3, [r4, #156]	; 0x9c
   214a8:	mov	r0, r5
   214ac:	add	sp, sp, #88	; 0x58
   214b0:	ldrd	r4, [sp]
   214b4:	ldr	r6, [sp, #8]
   214b8:	add	sp, sp, #12
   214bc:	pop	{pc}		; (ldr pc, [sp], #4)
   214c0:	ldr	r5, [pc, #124]	; 21544 <flatcc_builder_end_vector@@Base+0x200>
   214c4:	add	r2, r2, #1
   214c8:	add	ip, sp, #88	; 0x58
   214cc:	add	ip, ip, r2, lsl #3
   214d0:	add	r1, r1, r3
   214d4:	mov	r2, r0
   214d8:	str	r1, [sp, #16]
   214dc:	str	r0, [sp, #20]
   214e0:	str	r5, [ip, #-72]	; 0xffffffb8
   214e4:	str	r3, [ip, #-68]	; 0xffffffbc
   214e8:	b	21400 <flatcc_builder_end_vector@@Base+0xbc>
   214ec:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   214f0:	movw	r1, #36740	; 0x8f84
   214f4:	movt	r1, #2
   214f8:	ldr	r3, [pc, #72]	; 21548 <flatcc_builder_end_vector@@Base+0x204>
   214fc:	movw	r0, #36924	; 0x903c
   21500:	movt	r0, #2
   21504:	movw	r2, #647	; 0x287
   21508:	bl	12a64 <__assert_fail@plt>
   2150c:	movw	r1, #36740	; 0x8f84
   21510:	movt	r1, #2
   21514:	ldr	r3, [pc, #48]	; 2154c <flatcc_builder_end_vector@@Base+0x208>
   21518:	movw	r0, #37492	; 0x9274
   2151c:	movt	r0, #2
   21520:	movw	r2, #1365	; 0x555
   21524:	bl	12a64 <__assert_fail@plt>
   21528:	movw	r1, #36740	; 0x8f84
   2152c:	movt	r1, #2
   21530:	ldr	r3, [pc, #24]	; 21550 <flatcc_builder_end_vector@@Base+0x20c>
   21534:	movw	r0, #37096	; 0x90e8
   21538:	movt	r0, #2
   2153c:	movw	r2, #1400	; 0x578
   21540:	bl	12a64 <__assert_fail@plt>
   21544:	ldrdeq	r8, [r2], -ip
   21548:	andeq	r8, r2, r0, ror #16
   2154c:			; <UNDEFINED> instruction: 0x00028db0
   21550:	ldrdeq	r8, [r2], -r0

00021554 <flatcc_builder_vector_count@@Base>:
   21554:	ldr	r3, [r0, #32]
   21558:	ldr	r0, [r3, #20]
   2155c:	bx	lr

00021560 <flatcc_builder_vector_edit@@Base>:
   21560:	ldr	r0, [r0, #16]
   21564:	bx	lr

00021568 <flatcc_builder_create_offset_vector_direct@@Base>:
   21568:	cmn	r2, #-1073741823	; 0xc0000001
   2156c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21570:	strd	r6, [sp, #8]
   21574:	str	r8, [sp, #16]
   21578:	str	lr, [sp, #20]
   2157c:	sub	sp, sp, #88	; 0x58
   21580:	bhi	21684 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   21584:	ldrh	r3, [r0, #128]	; 0x80
   21588:	mov	r4, r0
   2158c:	mov	ip, #1
   21590:	str	r2, [sp, #12]
   21594:	ldr	r5, [r4, #136]	; 0x88
   21598:	str	ip, [sp, #20]
   2159c:	cmp	r3, #3
   215a0:	movls	r3, #4
   215a4:	strhls	r3, [r0, #128]	; 0x80
   215a8:	mov	r0, #4
   215ac:	add	r3, sp, #12
   215b0:	lsls	lr, r2, #2
   215b4:	str	r0, [sp, #16]
   215b8:	moveq	r7, #2
   215bc:	str	r3, [sp, #24]
   215c0:	and	r3, r5, #3
   215c4:	str	r0, [sp, #28]
   215c8:	beq	215ec <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   215cc:	mov	r6, #2
   215d0:	add	r0, lr, r0
   215d4:	mov	ip, r6
   215d8:	mov	r7, #3
   215dc:	str	r0, [sp, #16]
   215e0:	str	r6, [sp, #20]
   215e4:	str	r1, [sp, #32]
   215e8:	str	lr, [sp, #36]	; 0x24
   215ec:	cmp	r3, #0
   215f0:	bne	21658 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   215f4:	cmp	r2, #0
   215f8:	beq	216a8 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   215fc:	ldr	r3, [r1]
   21600:	cmp	r3, #0
   21604:	subne	lr, lr, #4
   21608:	movne	r2, #0
   2160c:	beq	2163c <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   21610:	sub	r3, r3, #4
   21614:	cmp	r2, lr
   21618:	sub	r3, r3, r5
   2161c:	add	r3, r3, r0
   21620:	sub	r3, r3, r2
   21624:	str	r3, [r1]
   21628:	beq	216a4 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   2162c:	ldr	r3, [r1, #4]!
   21630:	add	r2, r2, #4
   21634:	cmp	r3, #0
   21638:	bne	21610 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   2163c:	movw	r1, #36740	; 0x8f84
   21640:	movt	r1, #2
   21644:	ldr	r3, [pc, #176]	; 216fc <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   21648:	movw	r0, #36924	; 0x903c
   2164c:	movt	r0, #2
   21650:	movw	r2, #1463	; 0x5b7
   21654:	bl	12a64 <__assert_fail@plt>
   21658:	ldr	r8, [pc, #160]	; 21700 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   2165c:	add	ip, ip, #1
   21660:	add	r6, sp, #88	; 0x58
   21664:	add	r6, r6, ip, lsl #3
   21668:	add	r0, r0, r3
   2166c:	mov	ip, r7
   21670:	str	r0, [sp, #16]
   21674:	str	r7, [sp, #20]
   21678:	str	r8, [r6, #-72]	; 0xffffffb8
   2167c:	str	r3, [r6, #-68]	; 0xffffffbc
   21680:	b	215f4 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   21684:	mov	r6, #0
   21688:	mov	r0, r6
   2168c:	add	sp, sp, #88	; 0x58
   21690:	ldrd	r4, [sp]
   21694:	ldrd	r6, [sp, #8]
   21698:	ldr	r8, [sp, #16]
   2169c:	add	sp, sp, #20
   216a0:	pop	{pc}		; (ldr pc, [sp], #4)
   216a4:	ldr	r5, [r4, #136]	; 0x88
   216a8:	sub	r6, r5, r0
   216ac:	cmp	r6, r5
   216b0:	bge	216e0 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   216b4:	mov	r2, ip
   216b8:	mov	r3, r6
   216bc:	str	r0, [sp]
   216c0:	add	r1, sp, #24
   216c4:	ldr	r0, [r4, #36]	; 0x24
   216c8:	ldr	r5, [r4, #44]	; 0x2c
   216cc:	blx	r5
   216d0:	cmp	r0, #0
   216d4:	streq	r6, [r4, #136]	; 0x88
   216d8:	beq	21688 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   216dc:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   216e0:	movw	r1, #36740	; 0x8f84
   216e4:	movt	r1, #2
   216e8:	ldr	r3, [pc, #20]	; 21704 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   216ec:	movw	r0, #36924	; 0x903c
   216f0:	movt	r0, #2
   216f4:	movw	r2, #647	; 0x287
   216f8:	bl	12a64 <__assert_fail@plt>
   216fc:	ldrdeq	r8, [r2], -ip
   21700:	ldrdeq	r8, [r2], -ip
   21704:	andeq	r8, r2, r0, ror #16

00021708 <flatcc_builder_end_offset_vector@@Base>:
   21708:	ldr	r3, [r0, #32]
   2170c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21710:	ldrh	r2, [r3, #14]
   21714:	strd	r6, [sp, #8]
   21718:	str	r8, [sp, #16]
   2171c:	str	lr, [sp, #20]
   21720:	sub	sp, sp, #88	; 0x58
   21724:	cmp	r2, #5
   21728:	bne	21910 <flatcc_builder_end_offset_vector@@Base+0x208>
   2172c:	ldr	r3, [r3, #20]
   21730:	cmn	r3, #-1073741823	; 0xc0000001
   21734:	bhi	21838 <flatcc_builder_end_offset_vector@@Base+0x130>
   21738:	ldrh	r2, [r0, #128]	; 0x80
   2173c:	mov	r4, r0
   21740:	add	r5, sp, #12
   21744:	mov	r1, #1
   21748:	str	r3, [sp, #12]
   2174c:	ldr	ip, [r4, #136]	; 0x88
   21750:	str	r1, [sp, #20]
   21754:	ldr	r0, [r0, #16]
   21758:	cmp	r2, #3
   2175c:	str	r5, [sp, #24]
   21760:	movls	r2, #4
   21764:	and	r5, ip, #3
   21768:	strhls	r2, [r4, #128]	; 0x80
   2176c:	mov	r2, #4
   21770:	lsls	lr, r3, #2
   21774:	moveq	r6, #2
   21778:	str	r2, [sp, #16]
   2177c:	str	r2, [sp, #28]
   21780:	beq	217a4 <flatcc_builder_end_offset_vector@@Base+0x9c>
   21784:	mov	r7, #2
   21788:	add	r2, lr, r2
   2178c:	mov	r1, r7
   21790:	mov	r6, #3
   21794:	str	r2, [sp, #16]
   21798:	str	r7, [sp, #20]
   2179c:	str	r0, [sp, #32]
   217a0:	str	lr, [sp, #36]	; 0x24
   217a4:	cmp	r5, #0
   217a8:	bne	21810 <flatcc_builder_end_offset_vector@@Base+0x108>
   217ac:	cmp	r3, #0
   217b0:	beq	21860 <flatcc_builder_end_offset_vector@@Base+0x158>
   217b4:	ldr	r3, [r0]
   217b8:	cmp	r3, #0
   217bc:	subne	lr, lr, #4
   217c0:	movne	r1, #0
   217c4:	beq	217f4 <flatcc_builder_end_offset_vector@@Base+0xec>
   217c8:	sub	r3, r3, #4
   217cc:	cmp	r1, lr
   217d0:	sub	r3, r3, ip
   217d4:	add	r3, r3, r2
   217d8:	sub	r3, r3, r1
   217dc:	str	r3, [r0]
   217e0:	beq	21858 <flatcc_builder_end_offset_vector@@Base+0x150>
   217e4:	ldr	r3, [r0, #4]!
   217e8:	add	r1, r1, #4
   217ec:	cmp	r3, #0
   217f0:	bne	217c8 <flatcc_builder_end_offset_vector@@Base+0xc0>
   217f4:	movw	r1, #36740	; 0x8f84
   217f8:	movt	r1, #2
   217fc:	ldr	r3, [pc, #328]	; 2194c <flatcc_builder_end_offset_vector@@Base+0x244>
   21800:	movw	r0, #36924	; 0x903c
   21804:	movt	r0, #2
   21808:	movw	r2, #1463	; 0x5b7
   2180c:	bl	12a64 <__assert_fail@plt>
   21810:	ldr	r7, [pc, #312]	; 21950 <flatcc_builder_end_offset_vector@@Base+0x248>
   21814:	add	r1, r1, #1
   21818:	add	r8, sp, #88	; 0x58
   2181c:	add	r1, r8, r1, lsl #3
   21820:	add	r2, r2, r5
   21824:	str	r2, [sp, #16]
   21828:	str	r6, [sp, #20]
   2182c:	str	r7, [r1, #-72]	; 0xffffffb8
   21830:	str	r5, [r1, #-68]	; 0xffffffbc
   21834:	b	217ac <flatcc_builder_end_offset_vector@@Base+0xa4>
   21838:	mov	r5, #0
   2183c:	mov	r0, r5
   21840:	add	sp, sp, #88	; 0x58
   21844:	ldrd	r4, [sp]
   21848:	ldrd	r6, [sp, #8]
   2184c:	ldr	r8, [sp, #16]
   21850:	add	sp, sp, #20
   21854:	pop	{pc}		; (ldr pc, [sp], #4)
   21858:	ldr	r2, [sp, #16]
   2185c:	ldr	ip, [r4, #136]	; 0x88
   21860:	sub	r5, ip, r2
   21864:	cmp	r5, ip
   21868:	bge	21930 <flatcc_builder_end_offset_vector@@Base+0x228>
   2186c:	add	r1, sp, #24
   21870:	mov	r3, r5
   21874:	str	r2, [sp]
   21878:	ldr	r2, [sp, #20]
   2187c:	ldr	r0, [r4, #36]	; 0x24
   21880:	ldr	r6, [r4, #44]	; 0x2c
   21884:	blx	r6
   21888:	subs	r1, r0, #0
   2188c:	bne	2192c <flatcc_builder_end_offset_vector@@Base+0x224>
   21890:	cmp	r5, #0
   21894:	str	r5, [r4, #136]	; 0x88
   21898:	beq	21838 <flatcc_builder_end_offset_vector@@Base+0x130>
   2189c:	ldr	r0, [r4, #16]
   218a0:	ldr	r2, [r4, #20]
   218a4:	bl	12a1c <memset@plt>
   218a8:	ldr	r3, [r4, #32]
   218ac:	ldr	r0, [r4, #60]	; 0x3c
   218b0:	ldr	r2, [r4, #64]	; 0x40
   218b4:	ldr	ip, [r3]
   218b8:	ldmib	r3, {r1, lr}
   218bc:	add	r0, r0, ip
   218c0:	sub	r2, r2, ip
   218c4:	str	r0, [r4, #16]
   218c8:	cmp	r2, r1
   218cc:	ldrh	r0, [r4, #128]	; 0x80
   218d0:	movcs	r2, r1
   218d4:	str	lr, [r4, #20]
   218d8:	str	ip, [r4, #28]
   218dc:	ldrh	ip, [r4, #130]	; 0x82
   218e0:	str	r2, [r4, #24]
   218e4:	ldr	r2, [r4, #156]	; 0x9c
   218e8:	str	r1, [r3, #4]
   218ec:	cmp	r0, ip
   218f0:	sub	r0, r3, #36	; 0x24
   218f4:	strhcc	ip, [r4, #128]	; 0x80
   218f8:	ldrh	r1, [r3, #12]
   218fc:	sub	r3, r2, #1
   21900:	str	r0, [r4, #32]
   21904:	strh	r1, [r4, #130]	; 0x82
   21908:	str	r3, [r4, #156]	; 0x9c
   2190c:	b	2183c <flatcc_builder_end_offset_vector@@Base+0x134>
   21910:	movw	r1, #36740	; 0x8f84
   21914:	movt	r1, #2
   21918:	ldr	r3, [pc, #52]	; 21954 <flatcc_builder_end_offset_vector@@Base+0x24c>
   2191c:	movw	r0, #37204	; 0x9154
   21920:	movt	r0, #2
   21924:	movw	r2, #1480	; 0x5c8
   21928:	bl	12a64 <__assert_fail@plt>
   2192c:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   21930:	movw	r1, #36740	; 0x8f84
   21934:	movt	r1, #2
   21938:	ldr	r3, [pc, #24]	; 21958 <flatcc_builder_end_offset_vector@@Base+0x250>
   2193c:	movw	r0, #36924	; 0x903c
   21940:	movt	r0, #2
   21944:	movw	r2, #647	; 0x287
   21948:	bl	12a64 <__assert_fail@plt>
   2194c:	ldrdeq	r8, [r2], -ip
   21950:	ldrdeq	r8, [r2], -ip
   21954:	andeq	r8, r2, r0, asr #25
   21958:	andeq	r8, r2, r0, ror #16

0002195c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2195c:	ldr	r2, [r0, #32]
   21960:	strd	r4, [sp, #-16]!
   21964:	ldrh	ip, [r2, #14]
   21968:	str	r6, [sp, #8]
   2196c:	str	lr, [sp, #12]
   21970:	cmp	ip, #5
   21974:	bne	21a2c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   21978:	ldr	r2, [r2, #20]
   2197c:	cmn	r2, #-1073741823	; 0xc0000001
   21980:	bhi	2199c <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   21984:	mov	r3, r1
   21988:	ldr	r1, [r0, #16]
   2198c:	mov	r4, r0
   21990:	bl	1de58 <flatcc_builder_default_alloc@@Base+0x388>
   21994:	subs	r5, r0, #0
   21998:	bne	219b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   2199c:	mov	r5, #0
   219a0:	mov	r0, r5
   219a4:	ldrd	r4, [sp]
   219a8:	ldr	r6, [sp, #8]
   219ac:	add	sp, sp, #12
   219b0:	pop	{pc}		; (ldr pc, [sp], #4)
   219b4:	mov	r1, #0
   219b8:	ldr	r0, [r4, #16]
   219bc:	ldr	r2, [r4, #20]
   219c0:	bl	12a1c <memset@plt>
   219c4:	ldr	r3, [r4, #32]
   219c8:	ldr	r0, [r4, #60]	; 0x3c
   219cc:	ldr	r2, [r4, #64]	; 0x40
   219d0:	ldr	ip, [r3]
   219d4:	ldmib	r3, {r1, lr}
   219d8:	add	r0, r0, ip
   219dc:	sub	r2, r2, ip
   219e0:	str	r0, [r4, #16]
   219e4:	cmp	r2, r1
   219e8:	ldrh	r0, [r4, #128]	; 0x80
   219ec:	movcs	r2, r1
   219f0:	str	lr, [r4, #20]
   219f4:	str	ip, [r4, #28]
   219f8:	ldrh	ip, [r4, #130]	; 0x82
   219fc:	str	r2, [r4, #24]
   21a00:	ldr	r2, [r4, #156]	; 0x9c
   21a04:	str	r1, [r3, #4]
   21a08:	cmp	r0, ip
   21a0c:	sub	r0, r3, #36	; 0x24
   21a10:	strhcc	ip, [r4, #128]	; 0x80
   21a14:	ldrh	r1, [r3, #12]
   21a18:	sub	r3, r2, #1
   21a1c:	str	r0, [r4, #32]
   21a20:	strh	r1, [r4, #130]	; 0x82
   21a24:	str	r3, [r4, #156]	; 0x9c
   21a28:	b	219a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   21a2c:	movw	r1, #36740	; 0x8f84
   21a30:	movt	r1, #2
   21a34:	ldr	r3, [pc, #12]	; 21a48 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   21a38:	movw	r0, #37204	; 0x9154
   21a3c:	movt	r0, #2
   21a40:	movw	r2, #1493	; 0x5d5
   21a44:	bl	12a64 <__assert_fail@plt>
   21a48:	andeq	r8, r2, ip, ror #27

00021a4c <flatcc_builder_offset_vector_edit@@Base>:
   21a4c:	ldr	r0, [r0, #16]
   21a50:	bx	lr

00021a54 <flatcc_builder_offset_vector_count@@Base>:
   21a54:	ldr	r3, [r0, #32]
   21a58:	ldr	r0, [r3, #20]
   21a5c:	bx	lr

00021a60 <flatcc_builder_create_union_vector@@Base>:
   21a60:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21a64:	mov	r4, r1
   21a68:	mov	r1, #4
   21a6c:	strd	r6, [sp, #8]
   21a70:	mov	r6, r0
   21a74:	mov	r0, r4
   21a78:	strd	r8, [sp, #16]
   21a7c:	mov	r5, r2
   21a80:	mov	r7, r3
   21a84:	str	sl, [sp, #24]
   21a88:	str	lr, [sp, #28]
   21a8c:	sub	sp, sp, #8
   21a90:	bl	1dd34 <flatcc_builder_default_alloc@@Base+0x264>
   21a94:	cmp	r0, #0
   21a98:	bne	21c04 <flatcc_builder_create_union_vector@@Base+0x1a4>
   21a9c:	ldr	ip, [r4, #28]
   21aa0:	mov	lr, #4
   21aa4:	mov	r8, #5
   21aa8:	mvn	r9, #3
   21aac:	ldr	r3, [r4, #32]
   21ab0:	ldr	r2, [r4, #64]	; 0x40
   21ab4:	ldr	r1, [r4, #60]	; 0x3c
   21ab8:	strh	r8, [r3, #14]
   21abc:	str	lr, [r3, #16]
   21ac0:	sub	r2, r2, ip
   21ac4:	str	r0, [r3, #20]
   21ac8:	mov	r0, r4
   21acc:	cmn	r2, #4
   21ad0:	add	r1, r1, ip
   21ad4:	mvnhi	r2, #3
   21ad8:	str	r1, [r4, #16]
   21adc:	mov	r1, r7
   21ae0:	str	r2, [r4, #24]
   21ae4:	str	r9, [r3, #4]
   21ae8:	bl	1f5dc <flatcc_builder_extend_offset_vector@@Base>
   21aec:	cmp	r0, #0
   21af0:	beq	21c04 <flatcc_builder_create_union_vector@@Base+0x1a4>
   21af4:	ldr	r8, [r4, #20]
   21af8:	ldr	r3, [r4, #24]
   21afc:	add	r2, r7, r8
   21b00:	cmp	r2, r3
   21b04:	str	r2, [r4, #20]
   21b08:	bcs	21c30 <flatcc_builder_create_union_vector@@Base+0x1d0>
   21b0c:	ldr	r1, [r4, #16]
   21b10:	adds	r8, r1, r8
   21b14:	beq	21c04 <flatcc_builder_create_union_vector@@Base+0x1a4>
   21b18:	cmp	r7, #0
   21b1c:	beq	21b4c <flatcc_builder_create_union_vector@@Base+0xec>
   21b20:	add	lr, r5, r7, lsl #3
   21b24:	mov	r2, r5
   21b28:	sub	r0, r8, #1
   21b2c:	sub	r3, r1, #4
   21b30:	ldrb	ip, [r2]
   21b34:	add	r2, r2, #8
   21b38:	strb	ip, [r0, #1]!
   21b3c:	ldr	ip, [r2, #-4]
   21b40:	cmp	lr, r2
   21b44:	str	ip, [r3, #4]!
   21b48:	bne	21b30 <flatcc_builder_create_union_vector@@Base+0xd0>
   21b4c:	mov	r3, r8
   21b50:	mov	r2, r7
   21b54:	mov	r0, r4
   21b58:	bl	1de58 <flatcc_builder_default_alloc@@Base+0x388>
   21b5c:	subs	r5, r0, #0
   21b60:	beq	21c90 <flatcc_builder_create_union_vector@@Base+0x230>
   21b64:	mvn	ip, #0
   21b68:	mov	r3, #1
   21b6c:	mov	r2, r7
   21b70:	mov	r1, r8
   21b74:	mov	r0, r4
   21b78:	stm	sp, {r3, ip}
   21b7c:	bl	211e8 <flatcc_builder_create_vector@@Base>
   21b80:	mov	r7, r0
   21b84:	mov	r1, #0
   21b88:	ldr	r0, [r4, #16]
   21b8c:	ldr	r2, [r4, #20]
   21b90:	bl	12a1c <memset@plt>
   21b94:	ldr	r3, [r4, #32]
   21b98:	str	r7, [r6]
   21b9c:	ldr	r0, [r4, #60]	; 0x3c
   21ba0:	str	r5, [r6, #4]
   21ba4:	ldr	r2, [r4, #64]	; 0x40
   21ba8:	ldr	ip, [r3]
   21bac:	ldmib	r3, {r1, lr}
   21bb0:	add	r0, r0, ip
   21bb4:	sub	r2, r2, ip
   21bb8:	str	r0, [r4, #16]
   21bbc:	cmp	r2, r1
   21bc0:	ldrh	r0, [r4, #128]	; 0x80
   21bc4:	movcs	r2, r1
   21bc8:	str	lr, [r4, #20]
   21bcc:	str	ip, [r4, #28]
   21bd0:	ldrh	ip, [r4, #130]	; 0x82
   21bd4:	str	r2, [r4, #24]
   21bd8:	ldr	r2, [r4, #156]	; 0x9c
   21bdc:	str	r1, [r3, #4]
   21be0:	cmp	r0, ip
   21be4:	sub	r0, r3, #36	; 0x24
   21be8:	strhcc	ip, [r4, #128]	; 0x80
   21bec:	ldrh	r1, [r3, #12]
   21bf0:	sub	r3, r2, #1
   21bf4:	str	r0, [r4, #32]
   21bf8:	strh	r1, [r4, #130]	; 0x82
   21bfc:	str	r3, [r4, #156]	; 0x9c
   21c00:	b	21c10 <flatcc_builder_create_union_vector@@Base+0x1b0>
   21c04:	mov	r3, #0
   21c08:	str	r3, [r6]
   21c0c:	str	r3, [r6, #4]
   21c10:	mov	r0, r6
   21c14:	add	sp, sp, #8
   21c18:	ldrd	r4, [sp]
   21c1c:	ldrd	r6, [sp, #8]
   21c20:	ldrd	r8, [sp, #16]
   21c24:	ldr	sl, [sp, #24]
   21c28:	add	sp, sp, #28
   21c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   21c30:	ldr	ip, [r4, #28]
   21c34:	mov	r0, #1
   21c38:	add	r1, r4, #60	; 0x3c
   21c3c:	mov	r3, r0
   21c40:	str	r0, [sp]
   21c44:	ldr	sl, [r4, #48]	; 0x30
   21c48:	add	ip, ip, r0
   21c4c:	ldr	r0, [r4, #40]	; 0x28
   21c50:	add	r2, ip, r2
   21c54:	blx	sl
   21c58:	cmp	r0, #0
   21c5c:	bne	21c04 <flatcc_builder_create_union_vector@@Base+0x1a4>
   21c60:	ldr	r1, [r4, #28]
   21c64:	ldr	r2, [r4, #32]
   21c68:	ldr	r3, [r4, #64]	; 0x40
   21c6c:	ldr	r0, [r4, #60]	; 0x3c
   21c70:	sub	r3, r3, r1
   21c74:	cmn	r3, #4
   21c78:	movhi	r3, r9
   21c7c:	add	r1, r0, r1
   21c80:	str	r1, [r4, #16]
   21c84:	str	r3, [r4, #24]
   21c88:	str	r9, [r2, #4]
   21c8c:	b	21b10 <flatcc_builder_create_union_vector@@Base+0xb0>
   21c90:	mov	r7, r5
   21c94:	b	21b84 <flatcc_builder_create_union_vector@@Base+0x124>

00021c98 <flatcc_builder_create_union_vector_direct@@Base>:
   21c98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21c9c:	strd	r6, [sp, #8]
   21ca0:	mov	r6, r0
   21ca4:	str	r8, [sp, #16]
   21ca8:	str	lr, [sp, #20]
   21cac:	sub	sp, sp, #88	; 0x58
   21cb0:	ldr	r4, [sp, #112]	; 0x70
   21cb4:	cmn	r4, #-1073741823	; 0xc0000001
   21cb8:	bhi	21d8c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   21cbc:	mov	r5, r1
   21cc0:	mov	r8, r2
   21cc4:	mov	r1, r3
   21cc8:	mov	r0, r5
   21ccc:	mov	r3, r2
   21cd0:	mov	r2, r4
   21cd4:	bl	1de58 <flatcc_builder_default_alloc@@Base+0x388>
   21cd8:	subs	r7, r0, #0
   21cdc:	beq	21d8c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   21ce0:	ldrh	r3, [r5, #128]	; 0x80
   21ce4:	mov	r2, #1
   21ce8:	mov	r1, #4
   21cec:	str	r4, [sp, #12]
   21cf0:	ldr	r0, [r5, #136]	; 0x88
   21cf4:	str	r1, [sp, #16]
   21cf8:	str	r1, [sp, #28]
   21cfc:	cmp	r3, #3
   21d00:	movls	r3, #4
   21d04:	strhls	r3, [r5, #128]	; 0x80
   21d08:	add	r3, sp, #12
   21d0c:	cmp	r4, #0
   21d10:	moveq	ip, #2
   21d14:	strd	r2, [sp, #20]
   21d18:	sub	r3, r0, r4
   21d1c:	and	r3, r3, #3
   21d20:	bne	21db4 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   21d24:	cmp	r3, #0
   21d28:	beq	21d54 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   21d2c:	ldr	r4, [pc, #196]	; 21df8 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   21d30:	add	r2, r2, #1
   21d34:	add	lr, sp, #88	; 0x58
   21d38:	add	lr, lr, r2, lsl #3
   21d3c:	add	r1, r1, r3
   21d40:	mov	r2, ip
   21d44:	str	r1, [sp, #16]
   21d48:	str	ip, [sp, #20]
   21d4c:	str	r4, [lr, #-72]	; 0xffffffb8
   21d50:	str	r3, [lr, #-68]	; 0xffffffbc
   21d54:	sub	r4, r0, r1
   21d58:	cmp	r0, r4
   21d5c:	ble	21dd8 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   21d60:	mov	r3, r4
   21d64:	str	r1, [sp]
   21d68:	add	r1, sp, #24
   21d6c:	ldr	r0, [r5, #36]	; 0x24
   21d70:	ldr	r8, [r5, #44]	; 0x2c
   21d74:	blx	r8
   21d78:	cmp	r0, #0
   21d7c:	bne	21df4 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   21d80:	stm	r6, {r4, r7}
   21d84:	str	r4, [r5, #136]	; 0x88
   21d88:	b	21d98 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   21d8c:	mov	r3, #0
   21d90:	str	r3, [r6]
   21d94:	str	r3, [r6, #4]
   21d98:	mov	r0, r6
   21d9c:	add	sp, sp, #88	; 0x58
   21da0:	ldrd	r4, [sp]
   21da4:	ldrd	r6, [sp, #8]
   21da8:	ldr	r8, [sp, #16]
   21dac:	add	sp, sp, #20
   21db0:	pop	{pc}		; (ldr pc, [sp], #4)
   21db4:	mov	lr, #2
   21db8:	add	r1, r4, r1
   21dbc:	mov	r2, lr
   21dc0:	mov	ip, #3
   21dc4:	str	r1, [sp, #16]
   21dc8:	str	lr, [sp, #20]
   21dcc:	str	r8, [sp, #32]
   21dd0:	str	r4, [sp, #36]	; 0x24
   21dd4:	b	21d24 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   21dd8:	movw	r1, #36740	; 0x8f84
   21ddc:	movt	r1, #2
   21de0:	ldr	r3, [pc, #20]	; 21dfc <flatcc_builder_create_union_vector_direct@@Base+0x164>
   21de4:	movw	r0, #36924	; 0x903c
   21de8:	movt	r0, #2
   21dec:	movw	r2, #647	; 0x287
   21df0:	bl	12a64 <__assert_fail@plt>
   21df4:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   21df8:	ldrdeq	r8, [r2], -ip
   21dfc:	andeq	r8, r2, r0, ror #16

00021e00 <flatcc_builder_start_union_vector@@Base>:
   21e00:	ldrd	r2, [r0, #156]	; 0x9c
   21e04:	strd	r4, [sp, #-16]!
   21e08:	mov	r4, r0
   21e0c:	str	r6, [sp, #8]
   21e10:	str	lr, [sp, #12]
   21e14:	sub	sp, sp, #8
   21e18:	add	r1, r2, #1
   21e1c:	cmp	r1, r3
   21e20:	str	r1, [r0, #156]	; 0x9c
   21e24:	ble	21f40 <flatcc_builder_start_union_vector@@Base+0x140>
   21e28:	ldr	r3, [r0, #176]	; 0xb0
   21e2c:	cmp	r3, #0
   21e30:	cmpgt	r1, r3
   21e34:	movgt	r3, #1
   21e38:	movle	r3, #0
   21e3c:	bgt	21f50 <flatcc_builder_start_union_vector@@Base+0x150>
   21e40:	add	r2, r2, r2, lsl #3
   21e44:	ldr	r1, [r0, #88]	; 0x58
   21e48:	lsl	r5, r2, #2
   21e4c:	add	r2, r5, #36	; 0x24
   21e50:	cmp	r2, r1
   21e54:	bls	21e78 <flatcc_builder_start_union_vector@@Base+0x78>
   21e58:	mov	ip, #4
   21e5c:	add	r1, r0, #84	; 0x54
   21e60:	ldr	r0, [r0, #40]	; 0x28
   21e64:	str	ip, [sp]
   21e68:	ldr	r6, [r4, #48]	; 0x30
   21e6c:	blx	r6
   21e70:	cmp	r0, #0
   21e74:	bne	21f58 <flatcc_builder_start_union_vector@@Base+0x158>
   21e78:	ldr	r3, [r4, #84]	; 0x54
   21e7c:	add	r3, r3, r5
   21e80:	cmp	r3, #0
   21e84:	str	r3, [r4, #32]
   21e88:	beq	21f50 <flatcc_builder_start_union_vector@@Base+0x150>
   21e8c:	ldr	r2, [r4, #88]	; 0x58
   21e90:	movw	r0, #36409	; 0x8e39
   21e94:	movt	r0, #14563	; 0x38e3
   21e98:	ldr	r1, [r4, #176]	; 0xb0
   21e9c:	umull	r0, r2, r0, r2
   21ea0:	lsr	r2, r2, #3
   21ea4:	cmp	r1, #0
   21ea8:	cmpgt	r2, r1
   21eac:	movgt	r2, r1
   21eb0:	str	r2, [r4, #160]	; 0xa0
   21eb4:	ldr	r2, [r4, #20]
   21eb8:	mvn	r5, #3
   21ebc:	mov	lr, #0
   21ec0:	ldr	r6, [r4, #28]
   21ec4:	ldrh	r0, [r4, #130]	; 0x82
   21ec8:	ldr	ip, [r4, #60]	; 0x3c
   21ecc:	ldr	r1, [r4, #64]	; 0x40
   21ed0:	str	r2, [r3, #8]
   21ed4:	add	r2, r2, r6
   21ed8:	add	r2, r2, #7
   21edc:	strh	r0, [r3, #12]
   21ee0:	mov	r0, #4
   21ee4:	bic	r2, r2, #7
   21ee8:	add	ip, ip, r2
   21eec:	strh	r0, [r4, #130]	; 0x82
   21ef0:	mov	r0, lr
   21ef4:	sub	r1, r1, r2
   21ef8:	str	r6, [r3]
   21efc:	mov	r6, #8
   21f00:	cmp	r1, r5
   21f04:	str	lr, [r4, #20]
   21f08:	movhi	r1, r5
   21f0c:	str	r2, [r4, #28]
   21f10:	mov	r2, #7
   21f14:	strh	r2, [r3, #14]
   21f18:	str	r6, [r3, #16]
   21f1c:	str	lr, [r3, #20]
   21f20:	str	ip, [r4, #16]
   21f24:	str	r1, [r4, #24]
   21f28:	str	r5, [r3, #4]
   21f2c:	add	sp, sp, #8
   21f30:	ldrd	r4, [sp]
   21f34:	ldr	r6, [sp, #8]
   21f38:	add	sp, sp, #12
   21f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   21f40:	ldr	r3, [r0, #32]
   21f44:	add	r3, r3, #36	; 0x24
   21f48:	str	r3, [r0, #32]
   21f4c:	b	21eb4 <flatcc_builder_start_union_vector@@Base+0xb4>
   21f50:	mvn	r0, #0
   21f54:	b	21f2c <flatcc_builder_start_union_vector@@Base+0x12c>
   21f58:	bl	1dbf4 <flatcc_builder_default_alloc@@Base+0x124>

00021f5c <flatcc_builder_end_union_vector@@Base>:
   21f5c:	ldr	r3, [r1, #32]
   21f60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21f64:	ldrh	r2, [r3, #14]
   21f68:	strd	r6, [sp, #8]
   21f6c:	strd	r8, [sp, #16]
   21f70:	str	lr, [sp, #24]
   21f74:	sub	sp, sp, #12
   21f78:	cmp	r2, #7
   21f7c:	bne	22138 <flatcc_builder_end_union_vector@@Base+0x1dc>
   21f80:	ldr	r5, [r3, #20]
   21f84:	mov	r4, r1
   21f88:	mov	r6, r0
   21f8c:	ldr	r8, [r1, #20]
   21f90:	ldr	r3, [r1, #24]
   21f94:	lsl	r7, r5, #2
   21f98:	add	r2, r7, r5
   21f9c:	add	r2, r2, r8
   21fa0:	cmp	r2, r3
   21fa4:	str	r2, [r1, #20]
   21fa8:	bcs	220b8 <flatcc_builder_end_union_vector@@Base+0x15c>
   21fac:	ldr	r3, [r1, #16]
   21fb0:	adds	r1, r3, r8
   21fb4:	beq	22120 <flatcc_builder_end_union_vector@@Base+0x1c4>
   21fb8:	cmp	r5, #0
   21fbc:	add	r7, r1, r7
   21fc0:	subne	r0, r7, #1
   21fc4:	addne	lr, r3, r5, lsl #3
   21fc8:	subne	r2, r1, #4
   21fcc:	beq	21fec <flatcc_builder_end_union_vector@@Base+0x90>
   21fd0:	ldrb	ip, [r3]
   21fd4:	add	r3, r3, #8
   21fd8:	strb	ip, [r0, #1]!
   21fdc:	ldr	ip, [r3, #-4]
   21fe0:	cmp	lr, r3
   21fe4:	str	ip, [r2, #4]!
   21fe8:	bne	21fd0 <flatcc_builder_end_union_vector@@Base+0x74>
   21fec:	mov	r3, r7
   21ff0:	mov	r2, r5
   21ff4:	mov	r0, r4
   21ff8:	bl	1de58 <flatcc_builder_default_alloc@@Base+0x388>
   21ffc:	subs	r8, r0, #0
   22000:	beq	22130 <flatcc_builder_end_union_vector@@Base+0x1d4>
   22004:	mvn	ip, #0
   22008:	mov	r3, #1
   2200c:	mov	r2, r5
   22010:	mov	r1, r7
   22014:	mov	r0, r4
   22018:	stm	sp, {r3, ip}
   2201c:	bl	211e8 <flatcc_builder_create_vector@@Base>
   22020:	mov	r5, r0
   22024:	mov	r1, #0
   22028:	ldr	r0, [r4, #16]
   2202c:	ldr	r2, [r4, #20]
   22030:	bl	12a1c <memset@plt>
   22034:	ldr	r3, [r4, #32]
   22038:	stm	r6, {r5, r8}
   2203c:	ldr	r0, [r4, #60]	; 0x3c
   22040:	ldr	r2, [r4, #64]	; 0x40
   22044:	ldr	ip, [r3]
   22048:	ldmib	r3, {r1, lr}
   2204c:	add	r0, r0, ip
   22050:	sub	r2, r2, ip
   22054:	str	r0, [r4, #16]
   22058:	cmp	r2, r1
   2205c:	ldrh	r0, [r4, #128]	; 0x80
   22060:	movcs	r2, r1
   22064:	str	lr, [r4, #20]
   22068:	str	ip, [r4, #28]
   2206c:	ldrh	ip, [r4, #130]	; 0x82
   22070:	str	r2, [r4, #24]
   22074:	ldr	r2, [r4, #156]	; 0x9c
   22078:	str	r1, [r3, #4]
   2207c:	cmp	r0, ip
   22080:	sub	r0, r3, #36	; 0x24
   22084:	strhcc	ip, [r4, #128]	; 0x80
   22088:	ldrh	r1, [r3, #12]
   2208c:	sub	r3, r2, #1
   22090:	str	r0, [r4, #32]
   22094:	strh	r1, [r4, #130]	; 0x82
   22098:	str	r3, [r4, #156]	; 0x9c
   2209c:	mov	r0, r6
   220a0:	add	sp, sp, #12
   220a4:	ldrd	r4, [sp]
   220a8:	ldrd	r6, [sp, #8]
   220ac:	ldrd	r8, [sp, #16]
   220b0:	add	sp, sp, #24
   220b4:	pop	{pc}		; (ldr pc, [sp], #4)
   220b8:	ldr	ip, [r4, #28]
   220bc:	mov	r0, #1
   220c0:	add	r1, r1, #60	; 0x3c
   220c4:	mov	r3, r0
   220c8:	str	r0, [sp]
   220cc:	ldr	r9, [r4, #48]	; 0x30
   220d0:	add	ip, ip, r0
   220d4:	ldr	r0, [r4, #40]	; 0x28
   220d8:	add	r2, ip, r2
   220dc:	blx	r9
   220e0:	cmp	r0, #0
   220e4:	bne	22120 <flatcc_builder_end_union_vector@@Base+0x1c4>
   220e8:	ldr	r1, [r4, #28]
   220ec:	ldr	r3, [r4, #60]	; 0x3c
   220f0:	ldr	r2, [r4, #64]	; 0x40
   220f4:	add	r3, r3, r1
   220f8:	sub	r2, r2, r1
   220fc:	mvn	r1, #3
   22100:	str	r3, [r4, #16]
   22104:	cmn	r2, #4
   22108:	mvnhi	r2, #3
   2210c:	str	r2, [r4, #24]
   22110:	ldr	r2, [r4, #32]
   22114:	str	r1, [r2, #4]
   22118:	adds	r1, r3, r8
   2211c:	bne	21fb8 <flatcc_builder_end_union_vector@@Base+0x5c>
   22120:	mov	r3, #0
   22124:	str	r3, [r6]
   22128:	str	r3, [r6, #4]
   2212c:	b	2209c <flatcc_builder_end_union_vector@@Base+0x140>
   22130:	mov	r5, r8
   22134:	b	22024 <flatcc_builder_end_union_vector@@Base+0xc8>
   22138:	movw	r1, #36740	; 0x8f84
   2213c:	movt	r1, #2
   22140:	ldr	r3, [pc, #12]	; 22154 <flatcc_builder_end_union_vector@@Base+0x1f8>
   22144:	movw	r0, #37512	; 0x9288
   22148:	movt	r0, #2
   2214c:	movw	r2, #1617	; 0x651
   22150:	bl	12a64 <__assert_fail@plt>
   22154:	andeq	r8, r2, r8, lsl lr

00022158 <flatcc_builder_union_vector_edit@@Base>:
   22158:	ldr	r0, [r0, #16]
   2215c:	bx	lr

00022160 <flatcc_builder_union_vector_count@@Base>:
   22160:	ldr	r3, [r0, #32]
   22164:	ldr	r0, [r3, #20]
   22168:	bx	lr

0002216c <flatcc_builder_extend_union_vector@@Base>:
   2216c:	ldr	ip, [r0, #32]
   22170:	strd	r4, [sp, #-20]!	; 0xffffffec
   22174:	mov	r4, r0
   22178:	ldr	r3, [ip, #20]
   2217c:	strd	r6, [sp, #8]
   22180:	str	lr, [sp, #16]
   22184:	sub	sp, sp, #12
   22188:	adds	r3, r1, r3
   2218c:	movcs	r2, #1
   22190:	movcc	r2, #0
   22194:	cmn	r3, #-536870911	; 0xe0000001
   22198:	movls	r0, #0
   2219c:	movhi	r0, #1
   221a0:	orrs	r5, r2, r0
   221a4:	bne	2224c <flatcc_builder_extend_union_vector@@Base+0xe0>
   221a8:	ldr	r6, [r4, #20]
   221ac:	str	r3, [ip, #20]
   221b0:	ldr	r3, [r4, #24]
   221b4:	add	r2, r6, r1, lsl #3
   221b8:	cmp	r2, r3
   221bc:	str	r2, [r4, #20]
   221c0:	bcs	221e0 <flatcc_builder_extend_union_vector@@Base+0x74>
   221c4:	ldr	r0, [r4, #16]
   221c8:	add	r0, r0, r6
   221cc:	add	sp, sp, #12
   221d0:	ldrd	r4, [sp]
   221d4:	ldrd	r6, [sp, #8]
   221d8:	add	sp, sp, #16
   221dc:	pop	{pc}		; (ldr pc, [sp], #4)
   221e0:	ldr	ip, [r4, #28]
   221e4:	mov	r0, #1
   221e8:	add	r1, r4, #60	; 0x3c
   221ec:	mov	r3, r0
   221f0:	str	r0, [sp]
   221f4:	ldr	r7, [r4, #48]	; 0x30
   221f8:	add	ip, ip, r0
   221fc:	ldr	r0, [r4, #40]	; 0x28
   22200:	add	r2, ip, r2
   22204:	blx	r7
   22208:	cmp	r0, #0
   2220c:	bne	22244 <flatcc_builder_extend_union_vector@@Base+0xd8>
   22210:	ldr	r2, [r4, #28]
   22214:	ldr	r0, [r4, #60]	; 0x3c
   22218:	ldr	r3, [r4, #64]	; 0x40
   2221c:	add	r0, r0, r2
   22220:	sub	r3, r3, r2
   22224:	mvn	r2, #3
   22228:	str	r0, [r4, #16]
   2222c:	cmn	r3, #4
   22230:	mvnhi	r3, #3
   22234:	str	r3, [r4, #24]
   22238:	ldr	r3, [r4, #32]
   2223c:	str	r2, [r3, #4]
   22240:	b	221c8 <flatcc_builder_extend_union_vector@@Base+0x5c>
   22244:	mov	r0, r5
   22248:	b	221cc <flatcc_builder_extend_union_vector@@Base+0x60>
   2224c:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>

00022250 <flatcc_builder_truncate_union_vector@@Base>:
   22250:	mov	r3, r0
   22254:	ldr	r0, [r0, #32]
   22258:	str	r4, [sp, #-8]!
   2225c:	ldrh	r2, [r0, #14]
   22260:	str	lr, [sp, #4]
   22264:	cmp	r2, #7
   22268:	bne	222b8 <flatcc_builder_truncate_union_vector@@Base+0x68>
   2226c:	mov	lr, r1
   22270:	ldr	r1, [r0, #20]
   22274:	cmp	r1, lr
   22278:	bcc	222d4 <flatcc_builder_truncate_union_vector@@Base+0x84>
   2227c:	ldr	r2, [r0, #16]
   22280:	sub	ip, r1, lr
   22284:	mov	r1, #0
   22288:	str	ip, [r0, #20]
   2228c:	ldr	r0, [r3, #16]
   22290:	ldr	ip, [r3, #20]
   22294:	mul	r2, r2, lr
   22298:	sub	ip, ip, r2
   2229c:	add	r0, r0, ip
   222a0:	str	ip, [r3, #20]
   222a4:	bl	12a1c <memset@plt>
   222a8:	ldr	r4, [sp]
   222ac:	add	sp, sp, #4
   222b0:	mov	r0, #0
   222b4:	pop	{pc}		; (ldr pc, [sp], #4)
   222b8:	movw	r1, #36740	; 0x8f84
   222bc:	movt	r1, #2
   222c0:	ldr	r3, [pc, #40]	; 222f0 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   222c4:	movw	r0, #37512	; 0x9288
   222c8:	movt	r0, #2
   222cc:	movw	r2, #1665	; 0x681
   222d0:	bl	12a64 <__assert_fail@plt>
   222d4:	movw	r1, #36740	; 0x8f84
   222d8:	movt	r1, #2
   222dc:	ldr	r3, [pc, #12]	; 222f0 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   222e0:	movw	r0, #37292	; 0x91ac
   222e4:	movt	r0, #2
   222e8:	movw	r2, #1666	; 0x682
   222ec:	bl	12a64 <__assert_fail@plt>
   222f0:	andeq	r8, r2, r8, lsr lr

000222f4 <flatcc_builder_union_vector_push@@Base>:
   222f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   222f8:	strd	r6, [sp, #8]
   222fc:	str	lr, [sp, #16]
   22300:	sub	sp, sp, #20
   22304:	add	r3, sp, #16
   22308:	stmdb	r3, {r1, r2}
   2230c:	ldr	r2, [r0, #32]
   22310:	ldrh	r3, [r2, #14]
   22314:	cmp	r3, #7
   22318:	bne	223dc <flatcc_builder_union_vector_push@@Base+0xe8>
   2231c:	ldr	r3, [r2, #20]
   22320:	cmn	r3, #-536870911	; 0xe0000001
   22324:	beq	223d4 <flatcc_builder_union_vector_push@@Base+0xe0>
   22328:	ldr	r5, [r0, #20]
   2232c:	add	r3, r3, #1
   22330:	mov	r4, r0
   22334:	ldr	r1, [r0, #24]
   22338:	str	r3, [r2, #20]
   2233c:	add	r3, r5, #8
   22340:	cmp	r3, r1
   22344:	str	r3, [r0, #20]
   22348:	bcs	22370 <flatcc_builder_union_vector_push@@Base+0x7c>
   2234c:	ldr	r3, [r0, #16]
   22350:	adds	r0, r3, r5
   22354:	ldrdne	r6, [sp, #8]
   22358:	strdne	r6, [r3, r5]
   2235c:	add	sp, sp, #20
   22360:	ldrd	r4, [sp]
   22364:	ldrd	r6, [sp, #8]
   22368:	add	sp, sp, #16
   2236c:	pop	{pc}		; (ldr pc, [sp], #4)
   22370:	ldr	r2, [r4, #28]
   22374:	mov	r0, #1
   22378:	add	r1, r4, #60	; 0x3c
   2237c:	mov	r3, r0
   22380:	str	r0, [sp]
   22384:	ldr	r0, [r4, #40]	; 0x28
   22388:	add	r2, r5, r2
   2238c:	ldr	r6, [r4, #48]	; 0x30
   22390:	add	r2, r2, #9
   22394:	blx	r6
   22398:	cmp	r0, #0
   2239c:	bne	223d4 <flatcc_builder_union_vector_push@@Base+0xe0>
   223a0:	ldr	r1, [r4, #28]
   223a4:	ldr	r3, [r4, #60]	; 0x3c
   223a8:	ldr	r2, [r4, #64]	; 0x40
   223ac:	add	r3, r3, r1
   223b0:	sub	r2, r2, r1
   223b4:	mvn	r1, #3
   223b8:	str	r3, [r4, #16]
   223bc:	cmn	r2, #4
   223c0:	mvnhi	r2, #3
   223c4:	str	r2, [r4, #24]
   223c8:	ldr	r2, [r4, #32]
   223cc:	str	r1, [r2, #4]
   223d0:	b	22350 <flatcc_builder_union_vector_push@@Base+0x5c>
   223d4:	mov	r0, #0
   223d8:	b	2235c <flatcc_builder_union_vector_push@@Base+0x68>
   223dc:	movw	r1, #36740	; 0x8f84
   223e0:	movt	r1, #2
   223e4:	ldr	r3, [pc, #12]	; 223f8 <flatcc_builder_union_vector_push@@Base+0x104>
   223e8:	movw	r0, #37512	; 0x9288
   223ec:	movt	r0, #2
   223f0:	movw	r2, #1677	; 0x68d
   223f4:	bl	12a64 <__assert_fail@plt>
   223f8:	andeq	r8, r2, r0, ror #28

000223fc <flatcc_builder_append_union_vector@@Base>:
   223fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22400:	mov	r5, r0
   22404:	ldr	r0, [r0, #32]
   22408:	ldrh	r3, [r0, #14]
   2240c:	strd	r6, [sp, #8]
   22410:	strd	r8, [sp, #16]
   22414:	str	lr, [sp, #24]
   22418:	sub	sp, sp, #12
   2241c:	cmp	r3, #7
   22420:	bne	22518 <flatcc_builder_append_union_vector@@Base+0x11c>
   22424:	ldr	r3, [r0, #20]
   22428:	mov	r7, r1
   2242c:	adds	r1, r2, r3
   22430:	movcs	r4, #1
   22434:	movcc	r4, #0
   22438:	cmn	r1, #-536870911	; 0xe0000001
   2243c:	movls	r3, #0
   22440:	movhi	r3, #1
   22444:	orrs	r4, r4, r3
   22448:	bne	22514 <flatcc_builder_append_union_vector@@Base+0x118>
   2244c:	ldr	r8, [r5, #20]
   22450:	lsl	r6, r2, #3
   22454:	ldr	r3, [r5, #24]
   22458:	str	r1, [r0, #20]
   2245c:	add	ip, r6, r8
   22460:	cmp	ip, r3
   22464:	str	ip, [r5, #20]
   22468:	bcs	224a8 <flatcc_builder_append_union_vector@@Base+0xac>
   2246c:	ldr	r3, [r5, #16]
   22470:	adds	r3, r3, r8
   22474:	beq	2248c <flatcc_builder_append_union_vector@@Base+0x90>
   22478:	mov	r0, r3
   2247c:	mov	r2, r6
   22480:	mov	r1, r7
   22484:	bl	1298c <memcpy@plt>
   22488:	mov	r3, r0
   2248c:	mov	r0, r3
   22490:	add	sp, sp, #12
   22494:	ldrd	r4, [sp]
   22498:	ldrd	r6, [sp, #8]
   2249c:	ldrd	r8, [sp, #16]
   224a0:	add	sp, sp, #24
   224a4:	pop	{pc}		; (ldr pc, [sp], #4)
   224a8:	ldr	r2, [r5, #28]
   224ac:	mov	r0, #1
   224b0:	add	r1, r5, #60	; 0x3c
   224b4:	mov	r3, r0
   224b8:	str	r0, [sp]
   224bc:	ldr	r9, [r5, #48]	; 0x30
   224c0:	add	r2, r2, r0
   224c4:	ldr	r0, [r5, #40]	; 0x28
   224c8:	add	r2, r2, ip
   224cc:	blx	r9
   224d0:	cmp	r0, #0
   224d4:	bne	2250c <flatcc_builder_append_union_vector@@Base+0x110>
   224d8:	ldr	r1, [r5, #28]
   224dc:	ldr	r3, [r5, #60]	; 0x3c
   224e0:	ldr	r2, [r5, #64]	; 0x40
   224e4:	add	r3, r3, r1
   224e8:	sub	r2, r2, r1
   224ec:	mvn	r1, #3
   224f0:	str	r3, [r5, #16]
   224f4:	cmn	r2, #4
   224f8:	mvnhi	r2, #3
   224fc:	str	r2, [r5, #24]
   22500:	ldr	r2, [r5, #32]
   22504:	str	r1, [r2, #4]
   22508:	b	22470 <flatcc_builder_append_union_vector@@Base+0x74>
   2250c:	mov	r3, r4
   22510:	b	2248c <flatcc_builder_append_union_vector@@Base+0x90>
   22514:	bl	1dc94 <flatcc_builder_default_alloc@@Base+0x1c4>
   22518:	movw	r1, #36740	; 0x8f84
   2251c:	movt	r1, #2
   22520:	ldr	r3, [pc, #12]	; 22534 <flatcc_builder_append_union_vector@@Base+0x138>
   22524:	movw	r0, #37512	; 0x9288
   22528:	movt	r0, #2
   2252c:	movw	r2, #1692	; 0x69c
   22530:	bl	12a64 <__assert_fail@plt>
   22534:	andeq	r8, r2, r4, lsl #29

00022538 <flatcc_builder_create_string@@Base>:
   22538:	strd	r4, [sp, #-16]!
   2253c:	mov	r4, r0
   22540:	mov	ip, #4
   22544:	str	r6, [sp, #8]
   22548:	cmp	r2, #0
   2254c:	str	lr, [sp, #12]
   22550:	sub	sp, sp, #88	; 0x58
   22554:	moveq	r6, #2
   22558:	ldr	lr, [r0, #136]	; 0x88
   2255c:	add	r3, sp, #12
   22560:	str	r2, [sp, #12]
   22564:	str	r3, [sp, #24]
   22568:	mov	r3, #1
   2256c:	moveq	r1, r3
   22570:	str	ip, [sp, #28]
   22574:	sub	r0, lr, r2
   22578:	sub	r0, r0, #1
   2257c:	and	r0, r0, #3
   22580:	add	r0, r0, r3
   22584:	beq	2259c <flatcc_builder_create_string@@Base+0x64>
   22588:	add	ip, r2, ip
   2258c:	mov	r6, #3
   22590:	str	r1, [sp, #32]
   22594:	mov	r1, #2
   22598:	str	r2, [sp, #36]	; 0x24
   2259c:	ldr	r3, [pc, #136]	; 2262c <flatcc_builder_create_string@@Base+0xf4>
   225a0:	add	r1, r1, #1
   225a4:	add	r2, sp, #88	; 0x58
   225a8:	add	ip, r0, ip
   225ac:	add	r1, r2, r1, lsl #3
   225b0:	sub	r5, lr, ip
   225b4:	cmp	lr, r5
   225b8:	str	ip, [sp, #16]
   225bc:	str	r6, [sp, #20]
   225c0:	str	r3, [r1, #-72]	; 0xffffffb8
   225c4:	str	r0, [r1, #-68]	; 0xffffffbc
   225c8:	ble	2260c <flatcc_builder_create_string@@Base+0xd4>
   225cc:	mov	r2, r6
   225d0:	mov	r3, r5
   225d4:	str	ip, [sp]
   225d8:	add	r1, sp, #24
   225dc:	ldr	r0, [r4, #36]	; 0x24
   225e0:	ldr	r6, [r4, #44]	; 0x2c
   225e4:	blx	r6
   225e8:	cmp	r0, #0
   225ec:	bne	22628 <flatcc_builder_create_string@@Base+0xf0>
   225f0:	mov	r0, r5
   225f4:	str	r5, [r4, #136]	; 0x88
   225f8:	add	sp, sp, #88	; 0x58
   225fc:	ldrd	r4, [sp]
   22600:	ldr	r6, [sp, #8]
   22604:	add	sp, sp, #12
   22608:	pop	{pc}		; (ldr pc, [sp], #4)
   2260c:	movw	r1, #36740	; 0x8f84
   22610:	movt	r1, #2
   22614:	movw	r0, #36924	; 0x903c
   22618:	movt	r0, #2
   2261c:	sub	r3, r3, #124	; 0x7c
   22620:	movw	r2, #647	; 0x287
   22624:	bl	12a64 <__assert_fail@plt>
   22628:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   2262c:	ldrdeq	r8, [r2], -ip

00022630 <flatcc_builder_create_string_str@@Base>:
   22630:	strd	r4, [sp, #-16]!
   22634:	mov	r4, r0
   22638:	mov	r0, r1
   2263c:	str	r6, [sp, #8]
   22640:	mov	r6, r1
   22644:	str	lr, [sp, #12]
   22648:	sub	sp, sp, #88	; 0x58
   2264c:	bl	129f8 <strlen@plt>
   22650:	ldr	r5, [r4, #136]	; 0x88
   22654:	mov	r2, #4
   22658:	add	r1, sp, #12
   2265c:	mov	r3, #1
   22660:	cmp	r0, #0
   22664:	str	r0, [sp, #12]
   22668:	str	r1, [sp, #24]
   2266c:	str	r2, [sp, #28]
   22670:	sub	ip, r5, #1
   22674:	sub	ip, ip, r0
   22678:	and	ip, ip, #3
   2267c:	add	ip, ip, r3
   22680:	beq	22704 <flatcc_builder_create_string_str@@Base+0xd4>
   22684:	add	lr, r0, r2
   22688:	mov	r1, #2
   2268c:	str	r6, [sp, #32]
   22690:	mov	r2, #3
   22694:	str	r0, [sp, #36]	; 0x24
   22698:	ldr	r3, [pc, #148]	; 22734 <flatcc_builder_create_string_str@@Base+0x104>
   2269c:	add	r0, ip, lr
   226a0:	add	r1, r1, #1
   226a4:	add	lr, sp, #88	; 0x58
   226a8:	sub	r6, r5, r0
   226ac:	add	r1, lr, r1, lsl #3
   226b0:	cmp	r5, r6
   226b4:	str	r0, [sp, #16]
   226b8:	str	r2, [sp, #20]
   226bc:	str	r3, [r1, #-72]	; 0xffffffb8
   226c0:	str	ip, [r1, #-68]	; 0xffffffbc
   226c4:	ble	22714 <flatcc_builder_create_string_str@@Base+0xe4>
   226c8:	mov	r3, r6
   226cc:	add	r1, sp, #24
   226d0:	str	r0, [sp]
   226d4:	ldr	r0, [r4, #36]	; 0x24
   226d8:	ldr	r5, [r4, #44]	; 0x2c
   226dc:	blx	r5
   226e0:	cmp	r0, #0
   226e4:	bne	22730 <flatcc_builder_create_string_str@@Base+0x100>
   226e8:	mov	r0, r6
   226ec:	str	r6, [r4, #136]	; 0x88
   226f0:	add	sp, sp, #88	; 0x58
   226f4:	ldrd	r4, [sp]
   226f8:	ldr	r6, [sp, #8]
   226fc:	add	sp, sp, #12
   22700:	pop	{pc}		; (ldr pc, [sp], #4)
   22704:	mov	lr, r2
   22708:	mov	r1, r3
   2270c:	mov	r2, #2
   22710:	b	22698 <flatcc_builder_create_string_str@@Base+0x68>
   22714:	movw	r1, #36740	; 0x8f84
   22718:	movt	r1, #2
   2271c:	movw	r0, #36924	; 0x903c
   22720:	movt	r0, #2
   22724:	sub	r3, r3, #124	; 0x7c
   22728:	movw	r2, #647	; 0x287
   2272c:	bl	12a64 <__assert_fail@plt>
   22730:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   22734:	ldrdeq	r8, [r2], -ip

00022738 <flatcc_builder_create_string_strn@@Base>:
   22738:	strd	r4, [sp, #-16]!
   2273c:	mov	r4, r0
   22740:	mov	r5, r2
   22744:	str	r6, [sp, #8]
   22748:	mov	r6, r1
   2274c:	mov	r1, #0
   22750:	mov	r0, r6
   22754:	str	lr, [sp, #12]
   22758:	sub	sp, sp, #88	; 0x58
   2275c:	bl	12a34 <memchr@plt>
   22760:	ldr	lr, [r4, #136]	; 0x88
   22764:	cmp	r0, #0
   22768:	mov	ip, #4
   2276c:	subne	r5, r0, r6
   22770:	add	r3, sp, #12
   22774:	cmp	r5, #0
   22778:	mov	r0, #1
   2277c:	moveq	r2, #2
   22780:	str	r5, [sp, #12]
   22784:	str	r3, [sp, #24]
   22788:	sub	r1, lr, #1
   2278c:	str	ip, [sp, #28]
   22790:	sub	r1, r1, r5
   22794:	and	r1, r1, #3
   22798:	add	r1, r1, r0
   2279c:	beq	227b4 <flatcc_builder_create_string_strn@@Base+0x7c>
   227a0:	add	ip, r5, ip
   227a4:	mov	r2, #3
   227a8:	str	r6, [sp, #32]
   227ac:	mov	r0, #2
   227b0:	str	r5, [sp, #36]	; 0x24
   227b4:	ldr	r3, [pc, #132]	; 22840 <flatcc_builder_create_string_strn@@Base+0x108>
   227b8:	add	r5, sp, #88	; 0x58
   227bc:	add	r0, r0, #1
   227c0:	add	r0, r5, r0, lsl #3
   227c4:	add	ip, r1, ip
   227c8:	sub	r5, lr, ip
   227cc:	cmp	lr, r5
   227d0:	str	ip, [sp, #16]
   227d4:	str	r2, [sp, #20]
   227d8:	str	r3, [r0, #-72]	; 0xffffffb8
   227dc:	str	r1, [r0, #-68]	; 0xffffffbc
   227e0:	ble	22820 <flatcc_builder_create_string_strn@@Base+0xe8>
   227e4:	mov	r3, r5
   227e8:	add	r1, sp, #24
   227ec:	str	ip, [sp]
   227f0:	ldr	r0, [r4, #36]	; 0x24
   227f4:	ldr	r6, [r4, #44]	; 0x2c
   227f8:	blx	r6
   227fc:	cmp	r0, #0
   22800:	bne	2283c <flatcc_builder_create_string_strn@@Base+0x104>
   22804:	mov	r0, r5
   22808:	str	r5, [r4, #136]	; 0x88
   2280c:	add	sp, sp, #88	; 0x58
   22810:	ldrd	r4, [sp]
   22814:	ldr	r6, [sp, #8]
   22818:	add	sp, sp, #12
   2281c:	pop	{pc}		; (ldr pc, [sp], #4)
   22820:	movw	r1, #36740	; 0x8f84
   22824:	movt	r1, #2
   22828:	movw	r0, #36924	; 0x903c
   2282c:	movt	r0, #2
   22830:	sub	r3, r3, #124	; 0x7c
   22834:	movw	r2, #647	; 0x287
   22838:	bl	12a64 <__assert_fail@plt>
   2283c:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   22840:	ldrdeq	r8, [r2], -ip

00022844 <flatcc_builder_end_string@@Base>:
   22844:	ldr	r3, [r0, #32]
   22848:	strd	r4, [sp, #-16]!
   2284c:	ldrh	r2, [r3, #14]
   22850:	str	r6, [sp, #8]
   22854:	str	lr, [sp, #12]
   22858:	sub	sp, sp, #88	; 0x58
   2285c:	cmp	r2, #6
   22860:	bne	229e8 <flatcc_builder_end_string@@Base+0x1a4>
   22864:	ldr	r3, [r3, #20]
   22868:	mov	r4, r0
   2286c:	ldr	r2, [r0, #20]
   22870:	cmp	r3, r2
   22874:	bne	229cc <flatcc_builder_end_string@@Base+0x188>
   22878:	ldr	lr, [r4, #136]	; 0x88
   2287c:	add	r2, sp, #12
   22880:	mov	ip, #4
   22884:	cmp	r3, #0
   22888:	mov	r0, #1
   2288c:	str	r3, [sp, #12]
   22890:	str	r2, [sp, #24]
   22894:	str	ip, [sp, #28]
   22898:	ldr	r2, [r4, #16]
   2289c:	moveq	r2, #2
   228a0:	sub	r1, lr, r3
   228a4:	sub	r1, r1, #1
   228a8:	and	r1, r1, #3
   228ac:	add	r1, r1, r0
   228b0:	bne	22998 <flatcc_builder_end_string@@Base+0x154>
   228b4:	ldr	r3, [pc, #328]	; 22a04 <flatcc_builder_end_string@@Base+0x1c0>
   228b8:	add	r5, sp, #88	; 0x58
   228bc:	add	r0, r0, #1
   228c0:	add	r0, r5, r0, lsl #3
   228c4:	add	ip, r1, ip
   228c8:	sub	r5, lr, ip
   228cc:	cmp	lr, r5
   228d0:	str	ip, [sp, #16]
   228d4:	str	r2, [sp, #20]
   228d8:	str	r3, [r0, #-72]	; 0xffffffb8
   228dc:	str	r1, [r0, #-68]	; 0xffffffbc
   228e0:	ble	229b0 <flatcc_builder_end_string@@Base+0x16c>
   228e4:	add	r1, sp, #24
   228e8:	mov	r3, r5
   228ec:	str	ip, [sp]
   228f0:	ldr	r0, [r4, #36]	; 0x24
   228f4:	ldr	r6, [r4, #44]	; 0x2c
   228f8:	blx	r6
   228fc:	subs	r1, r0, #0
   22900:	bne	229ac <flatcc_builder_end_string@@Base+0x168>
   22904:	cmp	r5, #0
   22908:	str	r5, [r4, #136]	; 0x88
   2290c:	beq	22980 <flatcc_builder_end_string@@Base+0x13c>
   22910:	ldr	r0, [r4, #16]
   22914:	ldr	r2, [r4, #20]
   22918:	bl	12a1c <memset@plt>
   2291c:	ldr	r3, [r4, #32]
   22920:	ldr	r0, [r4, #60]	; 0x3c
   22924:	ldr	r2, [r4, #64]	; 0x40
   22928:	ldr	ip, [r3]
   2292c:	ldmib	r3, {r1, lr}
   22930:	add	r0, r0, ip
   22934:	sub	r2, r2, ip
   22938:	str	r0, [r4, #16]
   2293c:	cmp	r2, r1
   22940:	ldrh	r0, [r4, #128]	; 0x80
   22944:	movcs	r2, r1
   22948:	str	lr, [r4, #20]
   2294c:	str	ip, [r4, #28]
   22950:	ldrh	ip, [r4, #130]	; 0x82
   22954:	str	r2, [r4, #24]
   22958:	ldr	r2, [r4, #156]	; 0x9c
   2295c:	str	r1, [r3, #4]
   22960:	cmp	r0, ip
   22964:	sub	r0, r3, #36	; 0x24
   22968:	strhcc	ip, [r4, #128]	; 0x80
   2296c:	ldrh	r1, [r3, #12]
   22970:	sub	r3, r2, #1
   22974:	str	r0, [r4, #32]
   22978:	strh	r1, [r4, #130]	; 0x82
   2297c:	str	r3, [r4, #156]	; 0x9c
   22980:	mov	r0, r5
   22984:	add	sp, sp, #88	; 0x58
   22988:	ldrd	r4, [sp]
   2298c:	ldr	r6, [sp, #8]
   22990:	add	sp, sp, #12
   22994:	pop	{pc}		; (ldr pc, [sp], #4)
   22998:	add	ip, r3, ip
   2299c:	mov	r0, #2
   229a0:	strd	r2, [sp, #32]
   229a4:	mov	r2, #3
   229a8:	b	228b4 <flatcc_builder_end_string@@Base+0x70>
   229ac:	bl	1dc6c <flatcc_builder_default_alloc@@Base+0x19c>
   229b0:	movw	r1, #36740	; 0x8f84
   229b4:	movt	r1, #2
   229b8:	movw	r0, #36924	; 0x903c
   229bc:	movt	r0, #2
   229c0:	sub	r3, r3, #124	; 0x7c
   229c4:	movw	r2, #647	; 0x287
   229c8:	bl	12a64 <__assert_fail@plt>
   229cc:	movw	r1, #36740	; 0x8f84
   229d0:	movt	r1, #2
   229d4:	ldr	r3, [pc, #44]	; 22a08 <flatcc_builder_end_string@@Base+0x1c4>
   229d8:	movw	r0, #37564	; 0x92bc
   229dc:	movt	r0, #2
   229e0:	movw	r2, #1733	; 0x6c5
   229e4:	bl	12a64 <__assert_fail@plt>
   229e8:	movw	r1, #36740	; 0x8f84
   229ec:	movt	r1, #2
   229f0:	ldr	r3, [pc, #16]	; 22a08 <flatcc_builder_end_string@@Base+0x1c4>
   229f4:	movw	r0, #36868	; 0x9004
   229f8:	movt	r0, #2
   229fc:	movw	r2, #1732	; 0x6c4
   22a00:	bl	12a64 <__assert_fail@plt>
   22a04:	ldrdeq	r8, [r2], -ip
   22a08:	andeq	r8, r2, r8, lsr #29

00022a0c <flatcc_builder_string_edit@@Base>:
   22a0c:	ldr	r0, [r0, #16]
   22a10:	bx	lr

00022a14 <flatcc_builder_string_len@@Base>:
   22a14:	ldr	r3, [r0, #32]
   22a18:	ldr	r0, [r3, #20]
   22a1c:	bx	lr

00022a20 <flatcc_builder_table_add@@Base>:
   22a20:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22a24:	mov	r4, r0
   22a28:	ldr	r0, [r0, #32]
   22a2c:	ldrh	r0, [r0, #14]
   22a30:	strd	r6, [sp, #8]
   22a34:	strd	r8, [sp, #16]
   22a38:	str	lr, [sp, #24]
   22a3c:	sub	sp, sp, #12
   22a40:	cmp	r0, #3
   22a44:	bne	22ba8 <flatcc_builder_table_add@@Base+0x188>
   22a48:	movw	r0, #32764	; 0x7ffc
   22a4c:	cmp	r1, r0
   22a50:	bhi	22b8c <flatcc_builder_table_add@@Base+0x16c>
   22a54:	ldrh	r0, [r4, #130]	; 0x82
   22a58:	lsl	r7, r1, #1
   22a5c:	ldr	ip, [r4, #4]
   22a60:	cmp	r0, r3
   22a64:	strhcc	r3, [r4, #130]	; 0x82
   22a68:	ldrh	r5, [ip, r7]
   22a6c:	add	ip, ip, r7
   22a70:	cmp	r5, #0
   22a74:	bne	22b70 <flatcc_builder_table_add@@Base+0x150>
   22a78:	ldr	r9, [r4, #12]
   22a7c:	movw	lr, #31153	; 0x79b1
   22a80:	movt	lr, #40503	; 0x9e37
   22a84:	uxth	r6, r1
   22a88:	sub	r8, r3, #1
   22a8c:	ldr	r0, [r4, #20]
   22a90:	rsb	r3, r3, #0
   22a94:	eor	r1, r1, r9
   22a98:	mul	r1, lr, r1
   22a9c:	add	r8, r8, r0
   22aa0:	ldr	r0, [r4, #24]
   22aa4:	and	r8, r8, r3
   22aa8:	eor	r1, r1, r2
   22aac:	add	r2, r2, r8
   22ab0:	mul	r1, lr, r1
   22ab4:	cmp	r2, r0
   22ab8:	str	r1, [r4, #12]
   22abc:	str	r2, [r4, #20]
   22ac0:	bcs	22afc <flatcc_builder_table_add@@Base+0xdc>
   22ac4:	ldr	r0, [r4, #16]
   22ac8:	add	r3, r8, #4
   22acc:	add	r0, r0, r8
   22ad0:	strh	r3, [ip]
   22ad4:	ldrh	r3, [r4, #8]
   22ad8:	cmp	r3, r6
   22adc:	addls	r6, r6, #1
   22ae0:	strhls	r6, [r4, #8]
   22ae4:	add	sp, sp, #12
   22ae8:	ldrd	r4, [sp]
   22aec:	ldrd	r6, [sp, #8]
   22af0:	ldrd	r8, [sp, #16]
   22af4:	add	sp, sp, #24
   22af8:	pop	{pc}		; (ldr pc, [sp], #4)
   22afc:	ldr	ip, [r4, #28]
   22b00:	mov	r0, #1
   22b04:	add	r1, r4, #60	; 0x3c
   22b08:	mov	r3, r0
   22b0c:	str	r0, [sp]
   22b10:	ldr	r9, [r4, #48]	; 0x30
   22b14:	add	ip, ip, r0
   22b18:	ldr	r0, [r4, #40]	; 0x28
   22b1c:	add	r2, ip, r2
   22b20:	blx	r9
   22b24:	cmp	r0, #0
   22b28:	bne	22b68 <flatcc_builder_table_add@@Base+0x148>
   22b2c:	ldr	ip, [r4, #4]
   22b30:	movw	r2, #65532	; 0xfffc
   22b34:	ldr	r5, [r4, #28]
   22b38:	ldr	r3, [r4, #64]	; 0x40
   22b3c:	add	ip, ip, r7
   22b40:	ldr	r0, [r4, #60]	; 0x3c
   22b44:	ldr	r1, [r4, #32]
   22b48:	sub	r3, r3, r5
   22b4c:	cmp	r3, r2
   22b50:	add	r0, r0, r5
   22b54:	movcs	r3, r2
   22b58:	str	r0, [r4, #16]
   22b5c:	str	r3, [r4, #24]
   22b60:	str	r2, [r1, #4]
   22b64:	b	22ac8 <flatcc_builder_table_add@@Base+0xa8>
   22b68:	mov	r0, r5
   22b6c:	b	22ae4 <flatcc_builder_table_add@@Base+0xc4>
   22b70:	movw	r1, #36740	; 0x8f84
   22b74:	movt	r1, #2
   22b78:	ldr	r3, [pc, #68]	; 22bc4 <flatcc_builder_table_add@@Base+0x1a4>
   22b7c:	movw	r0, #36924	; 0x903c
   22b80:	movt	r0, #2
   22b84:	movw	r2, #1784	; 0x6f8
   22b88:	bl	12a64 <__assert_fail@plt>
   22b8c:	movw	r1, #36740	; 0x8f84
   22b90:	movt	r1, #2
   22b94:	ldr	r3, [pc, #40]	; 22bc4 <flatcc_builder_table_add@@Base+0x1a4>
   22b98:	movw	r0, #37600	; 0x92e0
   22b9c:	movt	r0, #2
   22ba0:	movw	r2, #1774	; 0x6ee
   22ba4:	bl	12a64 <__assert_fail@plt>
   22ba8:	movw	r1, #36740	; 0x8f84
   22bac:	movt	r1, #2
   22bb0:	ldr	r3, [pc, #12]	; 22bc4 <flatcc_builder_table_add@@Base+0x1a4>
   22bb4:	movw	r0, #37448	; 0x9248
   22bb8:	movt	r0, #2
   22bbc:	movw	r2, #1773	; 0x6ed
   22bc0:	bl	12a64 <__assert_fail@plt>
   22bc4:	andeq	r8, r2, r4, asr #29

00022bc8 <flatcc_builder_table_edit@@Base>:
   22bc8:	ldr	r2, [r0, #32]
   22bcc:	ldrh	r2, [r2, #14]
   22bd0:	cmp	r2, #3
   22bd4:	bne	22bec <flatcc_builder_table_edit@@Base+0x24>
   22bd8:	ldr	r3, [r0, #20]
   22bdc:	ldr	r0, [r0, #16]
   22be0:	sub	r3, r3, r1
   22be4:	add	r0, r0, r3
   22be8:	bx	lr
   22bec:	movw	r1, #36740	; 0x8f84
   22bf0:	movt	r1, #2
   22bf4:	ldr	r3, [pc, #20]	; 22c10 <flatcc_builder_table_edit@@Base+0x48>
   22bf8:	movw	r0, #37448	; 0x9248
   22bfc:	movt	r0, #2
   22c00:	str	r4, [sp, #-8]!
   22c04:	movw	r2, #1794	; 0x702
   22c08:	str	lr, [sp, #4]
   22c0c:	bl	12a64 <__assert_fail@plt>
   22c10:	andeq	r8, r2, r0, ror #29

00022c14 <flatcc_builder_table_add_copy@@Base>:
   22c14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22c18:	mov	r5, r3
   22c1c:	ldr	r3, [r0, #32]
   22c20:	ldrh	r3, [r3, #14]
   22c24:	strd	r6, [sp, #8]
   22c28:	strd	r8, [sp, #16]
   22c2c:	strd	sl, [sp, #24]
   22c30:	str	lr, [sp, #32]
   22c34:	sub	sp, sp, #12
   22c38:	cmp	r3, #3
   22c3c:	ldrh	ip, [sp, #48]	; 0x30
   22c40:	bne	22dcc <flatcc_builder_table_add_copy@@Base+0x1b8>
   22c44:	movw	r3, #32764	; 0x7ffc
   22c48:	cmp	r1, r3
   22c4c:	bhi	22db0 <flatcc_builder_table_add_copy@@Base+0x19c>
   22c50:	ldrh	r3, [r0, #130]	; 0x82
   22c54:	mov	r7, r2
   22c58:	lsl	r8, r1, #1
   22c5c:	mov	r4, r0
   22c60:	ldr	r2, [r0, #4]
   22c64:	cmp	r3, ip
   22c68:	strhcc	ip, [r0, #130]	; 0x82
   22c6c:	ldrh	r9, [r2, r8]
   22c70:	add	r2, r2, r8
   22c74:	cmp	r9, #0
   22c78:	bne	22d94 <flatcc_builder_table_add_copy@@Base+0x180>
   22c7c:	ldr	lr, [r4, #12]
   22c80:	movw	r0, #31153	; 0x79b1
   22c84:	movt	r0, #40503	; 0x9e37
   22c88:	uxth	r6, r1
   22c8c:	sub	r3, ip, #1
   22c90:	ldr	sl, [r4, #20]
   22c94:	rsb	ip, ip, #0
   22c98:	eor	r1, r1, lr
   22c9c:	ldr	lr, [r4, #24]
   22ca0:	mul	r1, r0, r1
   22ca4:	add	r3, r3, sl
   22ca8:	and	sl, r3, ip
   22cac:	add	ip, r5, sl
   22cb0:	eor	r1, r1, r5
   22cb4:	cmp	ip, lr
   22cb8:	str	ip, [r4, #20]
   22cbc:	mul	r1, r0, r1
   22cc0:	str	r1, [r4, #12]
   22cc4:	bcs	22d20 <flatcc_builder_table_add_copy@@Base+0x10c>
   22cc8:	ldr	r3, [r4, #16]
   22ccc:	add	r1, sl, #4
   22cd0:	strh	r1, [r2]
   22cd4:	ldrh	r2, [r4, #8]
   22cd8:	cmp	r2, r6
   22cdc:	addls	r6, r6, #1
   22ce0:	strhls	r6, [r4, #8]
   22ce4:	adds	r3, r3, sl
   22ce8:	beq	22d00 <flatcc_builder_table_add_copy@@Base+0xec>
   22cec:	mov	r0, r3
   22cf0:	mov	r2, r5
   22cf4:	mov	r1, r7
   22cf8:	bl	1298c <memcpy@plt>
   22cfc:	mov	r3, r0
   22d00:	mov	r0, r3
   22d04:	add	sp, sp, #12
   22d08:	ldrd	r4, [sp]
   22d0c:	ldrd	r6, [sp, #8]
   22d10:	ldrd	r8, [sp, #16]
   22d14:	ldrd	sl, [sp, #24]
   22d18:	add	sp, sp, #32
   22d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   22d20:	ldr	r2, [r4, #28]
   22d24:	mov	r0, #1
   22d28:	add	r1, r4, #60	; 0x3c
   22d2c:	mov	r3, r0
   22d30:	str	r0, [sp]
   22d34:	ldr	fp, [r4, #48]	; 0x30
   22d38:	add	r2, r2, r0
   22d3c:	ldr	r0, [r4, #40]	; 0x28
   22d40:	add	r2, r2, ip
   22d44:	blx	fp
   22d48:	cmp	r0, #0
   22d4c:	bne	22d8c <flatcc_builder_table_add_copy@@Base+0x178>
   22d50:	ldr	r2, [r4, #4]
   22d54:	movw	r0, #65532	; 0xfffc
   22d58:	ldr	r3, [r4, #28]
   22d5c:	ldr	r1, [r4, #64]	; 0x40
   22d60:	add	r2, r2, r8
   22d64:	ldr	lr, [r4, #60]	; 0x3c
   22d68:	ldr	ip, [r4, #32]
   22d6c:	sub	r1, r1, r3
   22d70:	cmp	r1, r0
   22d74:	add	r3, lr, r3
   22d78:	movcs	r1, r0
   22d7c:	str	r3, [r4, #16]
   22d80:	str	r1, [r4, #24]
   22d84:	str	r0, [ip, #4]
   22d88:	b	22ccc <flatcc_builder_table_add_copy@@Base+0xb8>
   22d8c:	mov	r3, r9
   22d90:	b	22d00 <flatcc_builder_table_add_copy@@Base+0xec>
   22d94:	movw	r1, #36740	; 0x8f84
   22d98:	movt	r1, #2
   22d9c:	ldr	r3, [pc, #68]	; 22de8 <flatcc_builder_table_add_copy@@Base+0x1d4>
   22da0:	movw	r0, #36924	; 0x903c
   22da4:	movt	r0, #2
   22da8:	movw	r2, #1784	; 0x6f8
   22dac:	bl	12a64 <__assert_fail@plt>
   22db0:	movw	r1, #36740	; 0x8f84
   22db4:	movt	r1, #2
   22db8:	ldr	r3, [pc, #40]	; 22de8 <flatcc_builder_table_add_copy@@Base+0x1d4>
   22dbc:	movw	r0, #37600	; 0x92e0
   22dc0:	movt	r0, #2
   22dc4:	movw	r2, #1774	; 0x6ee
   22dc8:	bl	12a64 <__assert_fail@plt>
   22dcc:	movw	r1, #36740	; 0x8f84
   22dd0:	movt	r1, #2
   22dd4:	ldr	r3, [pc, #12]	; 22de8 <flatcc_builder_table_add_copy@@Base+0x1d4>
   22dd8:	movw	r0, #37448	; 0x9248
   22ddc:	movt	r0, #2
   22de0:	movw	r2, #1773	; 0x6ed
   22de4:	bl	12a64 <__assert_fail@plt>
   22de8:	andeq	r8, r2, r4, asr #29

00022dec <flatcc_builder_table_add_offset@@Base>:
   22dec:	ldr	r3, [r0, #32]
   22df0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22df4:	ldrh	r3, [r3, #14]
   22df8:	strd	r6, [sp, #8]
   22dfc:	strd	r8, [sp, #16]
   22e00:	str	lr, [sp, #24]
   22e04:	sub	sp, sp, #12
   22e08:	cmp	r3, #3
   22e0c:	bne	22f6c <flatcc_builder_table_add_offset@@Base+0x180>
   22e10:	movw	r3, #32764	; 0x7ffc
   22e14:	cmp	r1, r3
   22e18:	bhi	22f50 <flatcc_builder_table_add_offset@@Base+0x164>
   22e1c:	ldr	ip, [r0, #4]
   22e20:	lsl	r7, r1, #1
   22e24:	mov	r4, r0
   22e28:	ldrh	r5, [ip, r7]
   22e2c:	add	ip, ip, r7
   22e30:	cmp	r5, #0
   22e34:	bne	22f34 <flatcc_builder_table_add_offset@@Base+0x148>
   22e38:	ldr	r2, [r0, #12]
   22e3c:	movw	r3, #31153	; 0x79b1
   22e40:	movt	r3, #40503	; 0x9e37
   22e44:	uxth	r6, r1
   22e48:	ldr	r8, [r0, #20]
   22e4c:	ldr	r0, [r0, #24]
   22e50:	eor	r1, r1, r2
   22e54:	mul	r1, r3, r1
   22e58:	add	r8, r8, #3
   22e5c:	bic	r8, r8, #3
   22e60:	add	r2, r8, #4
   22e64:	eor	r1, r1, #4
   22e68:	cmp	r2, r0
   22e6c:	str	r2, [r4, #20]
   22e70:	mul	r1, r3, r1
   22e74:	str	r1, [r4, #12]
   22e78:	bhi	22ec8 <flatcc_builder_table_add_offset@@Base+0xdc>
   22e7c:	ldr	r0, [r4, #16]
   22e80:	uxth	r2, r8
   22e84:	add	r0, r0, r8
   22e88:	add	r3, r2, #4
   22e8c:	strh	r3, [ip]
   22e90:	ldrh	r3, [r4, #8]
   22e94:	cmp	r3, r6
   22e98:	ldr	r3, [r4]
   22e9c:	addls	r6, r6, #1
   22ea0:	strhls	r6, [r4, #8]
   22ea4:	add	r1, r3, #2
   22ea8:	str	r1, [r4]
   22eac:	strh	r2, [r3]
   22eb0:	add	sp, sp, #12
   22eb4:	ldrd	r4, [sp]
   22eb8:	ldrd	r6, [sp, #8]
   22ebc:	ldrd	r8, [sp, #16]
   22ec0:	add	sp, sp, #24
   22ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   22ec8:	ldr	ip, [r4, #28]
   22ecc:	mov	r0, #1
   22ed0:	add	r1, r4, #60	; 0x3c
   22ed4:	mov	r3, r0
   22ed8:	str	r0, [sp]
   22edc:	ldr	r0, [r4, #40]	; 0x28
   22ee0:	add	r2, r2, ip
   22ee4:	ldr	r9, [r4, #48]	; 0x30
   22ee8:	blx	r9
   22eec:	cmp	r0, #0
   22ef0:	bne	22f2c <flatcc_builder_table_add_offset@@Base+0x140>
   22ef4:	ldr	ip, [r4, #4]
   22ef8:	movw	r2, #65532	; 0xfffc
   22efc:	ldrd	r0, [r4, #28]
   22f00:	ldr	r3, [r4, #64]	; 0x40
   22f04:	add	ip, ip, r7
   22f08:	ldr	r5, [r4, #60]	; 0x3c
   22f0c:	sub	r3, r3, r0
   22f10:	cmp	r3, r2
   22f14:	add	r0, r5, r0
   22f18:	movcs	r3, r2
   22f1c:	str	r0, [r4, #16]
   22f20:	str	r3, [r4, #24]
   22f24:	str	r2, [r1, #4]
   22f28:	b	22e80 <flatcc_builder_table_add_offset@@Base+0x94>
   22f2c:	mov	r0, r5
   22f30:	b	22eb0 <flatcc_builder_table_add_offset@@Base+0xc4>
   22f34:	movw	r1, #36740	; 0x8f84
   22f38:	movt	r1, #2
   22f3c:	ldr	r3, [pc, #68]	; 22f88 <flatcc_builder_table_add_offset@@Base+0x19c>
   22f40:	movw	r0, #36924	; 0x903c
   22f44:	movt	r0, #2
   22f48:	movw	r2, #1819	; 0x71b
   22f4c:	bl	12a64 <__assert_fail@plt>
   22f50:	movw	r1, #36740	; 0x8f84
   22f54:	movt	r1, #2
   22f58:	ldr	r3, [pc, #40]	; 22f88 <flatcc_builder_table_add_offset@@Base+0x19c>
   22f5c:	movw	r0, #37600	; 0x92e0
   22f60:	movt	r0, #2
   22f64:	movw	r2, #1812	; 0x714
   22f68:	bl	12a64 <__assert_fail@plt>
   22f6c:	movw	r1, #36740	; 0x8f84
   22f70:	movt	r1, #2
   22f74:	ldr	r3, [pc, #12]	; 22f88 <flatcc_builder_table_add_offset@@Base+0x19c>
   22f78:	movw	r0, #37448	; 0x9248
   22f7c:	movt	r0, #2
   22f80:	movw	r2, #1811	; 0x713
   22f84:	bl	12a64 <__assert_fail@plt>
   22f88:	strdeq	r8, [r2], -ip

00022f8c <flatcc_builder_table_add_union@@Base>:
   22f8c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22f90:	strd	r6, [sp, #8]
   22f94:	strd	r8, [sp, #16]
   22f98:	str	lr, [sp, #24]
   22f9c:	sub	sp, sp, #20
   22fa0:	add	ip, sp, #16
   22fa4:	stmdb	ip, {r2, r3}
   22fa8:	ldr	r3, [r0, #32]
   22fac:	ldrb	r7, [sp, #8]
   22fb0:	ldr	r6, [sp, #12]
   22fb4:	ldrh	r3, [r3, #14]
   22fb8:	cmp	r3, #3
   22fbc:	bne	23178 <flatcc_builder_table_add_union@@Base+0x1ec>
   22fc0:	cmp	r7, #0
   22fc4:	mov	r4, r0
   22fc8:	mov	r5, r1
   22fcc:	beq	230b0 <flatcc_builder_table_add_union@@Base+0x124>
   22fd0:	cmp	r6, #0
   22fd4:	beq	22ff8 <flatcc_builder_table_add_union@@Base+0x6c>
   22fd8:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   22fdc:	cmp	r0, #0
   22fe0:	beq	231cc <flatcc_builder_table_add_union@@Base+0x240>
   22fe4:	ldr	r3, [r4, #32]
   22fe8:	ldrh	r3, [r3, #14]
   22fec:	str	r6, [r0]
   22ff0:	cmp	r3, #3
   22ff4:	bne	23194 <flatcc_builder_table_add_union@@Base+0x208>
   22ff8:	sub	r1, r5, #1
   22ffc:	movw	r3, #32764	; 0x7ffc
   23000:	cmp	r1, r3
   23004:	bhi	231b0 <flatcc_builder_table_add_union@@Base+0x224>
   23008:	ldrh	r3, [r4, #130]	; 0x82
   2300c:	lsl	r8, r1, #1
   23010:	cmp	r3, #0
   23014:	moveq	r3, #1
   23018:	strheq	r3, [r4, #130]	; 0x82
   2301c:	ldr	r3, [r4, #4]
   23020:	ldrh	r2, [r3, r8]
   23024:	add	r0, r3, r8
   23028:	cmp	r2, #0
   2302c:	bne	2315c <flatcc_builder_table_add_union@@Base+0x1d0>
   23030:	ldr	r2, [r4, #12]
   23034:	movw	r3, #31153	; 0x79b1
   23038:	movt	r3, #40503	; 0x9e37
   2303c:	uxth	r6, r1
   23040:	ldr	r5, [r4, #20]
   23044:	ldr	ip, [r4, #24]
   23048:	eor	r1, r1, r2
   2304c:	mul	r1, r3, r1
   23050:	add	r2, r5, #1
   23054:	cmp	r2, ip
   23058:	str	r2, [r4, #20]
   2305c:	eor	r1, r1, #1
   23060:	mul	r1, r3, r1
   23064:	str	r1, [r4, #12]
   23068:	bcs	230d4 <flatcc_builder_table_add_union@@Base+0x148>
   2306c:	ldr	r3, [r4, #16]
   23070:	add	r2, r5, #4
   23074:	strh	r2, [r0]
   23078:	ldrh	r2, [r4, #8]
   2307c:	cmp	r2, r6
   23080:	addls	r6, r6, #1
   23084:	strhls	r6, [r4, #8]
   23088:	cmn	r3, r5
   2308c:	beq	23140 <flatcc_builder_table_add_union@@Base+0x1b4>
   23090:	mov	r0, #0
   23094:	strb	r7, [r3, r5]
   23098:	add	sp, sp, #20
   2309c:	ldrd	r4, [sp]
   230a0:	ldrd	r6, [sp, #8]
   230a4:	ldrd	r8, [sp, #16]
   230a8:	add	sp, sp, #24
   230ac:	pop	{pc}		; (ldr pc, [sp], #4)
   230b0:	cmp	r6, #0
   230b4:	beq	22ff8 <flatcc_builder_table_add_union@@Base+0x6c>
   230b8:	movw	r1, #36740	; 0x8f84
   230bc:	movt	r1, #2
   230c0:	ldr	r3, [pc, #288]	; 231e8 <flatcc_builder_table_add_union@@Base+0x25c>
   230c4:	movw	r0, #37668	; 0x9324
   230c8:	movt	r0, #2
   230cc:	movw	r2, #1519	; 0x5ef
   230d0:	bl	12a64 <__assert_fail@plt>
   230d4:	ldr	r2, [r4, #28]
   230d8:	mov	r0, #1
   230dc:	add	r1, r4, #60	; 0x3c
   230e0:	mov	r3, r0
   230e4:	str	r0, [sp]
   230e8:	ldr	r0, [r4, #40]	; 0x28
   230ec:	add	r2, r5, r2
   230f0:	ldr	r9, [r4, #48]	; 0x30
   230f4:	add	r2, r2, #2
   230f8:	blx	r9
   230fc:	cmp	r0, #0
   23100:	bne	23140 <flatcc_builder_table_add_union@@Base+0x1b4>
   23104:	ldr	r0, [r4, #4]
   23108:	movw	r1, #65532	; 0xfffc
   2310c:	ldr	ip, [r4, #28]
   23110:	ldr	r2, [r4, #64]	; 0x40
   23114:	add	r0, r0, r8
   23118:	ldr	r3, [r4, #60]	; 0x3c
   2311c:	ldr	lr, [r4, #32]
   23120:	sub	r2, r2, ip
   23124:	cmp	r2, r1
   23128:	add	r3, r3, ip
   2312c:	movcs	r2, r1
   23130:	str	r3, [r4, #16]
   23134:	str	r2, [r4, #24]
   23138:	str	r1, [lr, #4]
   2313c:	b	23070 <flatcc_builder_table_add_union@@Base+0xe4>
   23140:	movw	r1, #36740	; 0x8f84
   23144:	movt	r1, #2
   23148:	ldr	r3, [pc, #152]	; 231e8 <flatcc_builder_table_add_union@@Base+0x25c>
   2314c:	movw	r0, #37716	; 0x9354
   23150:	movt	r0, #2
   23154:	movw	r2, #1526	; 0x5f6
   23158:	bl	12a64 <__assert_fail@plt>
   2315c:	movw	r1, #36740	; 0x8f84
   23160:	movt	r1, #2
   23164:	ldr	r3, [pc, #128]	; 231ec <flatcc_builder_table_add_union@@Base+0x260>
   23168:	movw	r0, #36924	; 0x903c
   2316c:	movt	r0, #2
   23170:	movw	r2, #1784	; 0x6f8
   23174:	bl	12a64 <__assert_fail@plt>
   23178:	movw	r1, #36740	; 0x8f84
   2317c:	movt	r1, #2
   23180:	ldr	r3, [pc, #96]	; 231e8 <flatcc_builder_table_add_union@@Base+0x25c>
   23184:	movw	r0, #37448	; 0x9248
   23188:	movt	r0, #2
   2318c:	movw	r2, #1518	; 0x5ee
   23190:	bl	12a64 <__assert_fail@plt>
   23194:	movw	r1, #36740	; 0x8f84
   23198:	movt	r1, #2
   2319c:	ldr	r3, [pc, #72]	; 231ec <flatcc_builder_table_add_union@@Base+0x260>
   231a0:	movw	r0, #37448	; 0x9248
   231a4:	movt	r0, #2
   231a8:	movw	r2, #1773	; 0x6ed
   231ac:	bl	12a64 <__assert_fail@plt>
   231b0:	movw	r1, #36740	; 0x8f84
   231b4:	movt	r1, #2
   231b8:	ldr	r3, [pc, #44]	; 231ec <flatcc_builder_table_add_union@@Base+0x260>
   231bc:	movw	r0, #37600	; 0x92e0
   231c0:	movt	r0, #2
   231c4:	movw	r2, #1774	; 0x6ee
   231c8:	bl	12a64 <__assert_fail@plt>
   231cc:	movw	r1, #36740	; 0x8f84
   231d0:	movt	r1, #2
   231d4:	ldr	r3, [pc, #12]	; 231e8 <flatcc_builder_table_add_union@@Base+0x25c>
   231d8:	movw	r0, #37704	; 0x9348
   231dc:	movt	r0, #2
   231e0:	movw	r2, #1522	; 0x5f2
   231e4:	bl	12a64 <__assert_fail@plt>
   231e8:	andeq	r8, r2, ip, lsl pc
   231ec:	andeq	r8, r2, r4, asr #29

000231f0 <flatcc_builder_table_add_union_vector@@Base>:
   231f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   231f4:	strd	r6, [sp, #8]
   231f8:	mov	r7, r1
   231fc:	str	lr, [sp, #16]
   23200:	sub	sp, sp, #12
   23204:	add	r1, sp, #8
   23208:	stmdb	r1, {r2, r3}
   2320c:	ldr	r3, [r0, #32]
   23210:	ldm	sp, {r4, r6}
   23214:	ldrh	r3, [r3, #14]
   23218:	cmp	r3, #3
   2321c:	bne	232bc <flatcc_builder_table_add_union_vector@@Base+0xcc>
   23220:	clz	r3, r6
   23224:	clz	r2, r4
   23228:	lsr	r3, r3, #5
   2322c:	lsr	r2, r2, #5
   23230:	cmp	r2, r3
   23234:	beq	23264 <flatcc_builder_table_add_union_vector@@Base+0x74>
   23238:	adds	r4, r4, #0
   2323c:	movne	r4, #1
   23240:	cmp	r4, r3
   23244:	mvnne	r4, #0
   23248:	beq	232d8 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   2324c:	mov	r0, r4
   23250:	add	sp, sp, #12
   23254:	ldrd	r4, [sp]
   23258:	ldrd	r6, [sp, #8]
   2325c:	add	sp, sp, #16
   23260:	pop	{pc}		; (ldr pc, [sp], #4)
   23264:	cmp	r4, #0
   23268:	beq	2324c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2326c:	sub	r1, r7, #1
   23270:	mov	r5, r0
   23274:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   23278:	subs	r3, r0, #0
   2327c:	beq	232f4 <flatcc_builder_table_add_union_vector@@Base+0x104>
   23280:	mov	r1, r7
   23284:	mov	r0, r5
   23288:	str	r4, [r3]
   2328c:	bl	22dec <flatcc_builder_table_add_offset@@Base>
   23290:	cmp	r0, #0
   23294:	movne	r4, #0
   23298:	strne	r6, [r0]
   2329c:	bne	2324c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   232a0:	movw	r1, #36740	; 0x8f84
   232a4:	movt	r1, #2
   232a8:	ldr	r3, [pc, #96]	; 23310 <flatcc_builder_table_add_union_vector@@Base+0x120>
   232ac:	movw	r0, #37704	; 0x9348
   232b0:	movt	r0, #2
   232b4:	movw	r2, #1544	; 0x608
   232b8:	bl	12a64 <__assert_fail@plt>
   232bc:	movw	r1, #36740	; 0x8f84
   232c0:	movt	r1, #2
   232c4:	ldr	r3, [pc, #68]	; 23310 <flatcc_builder_table_add_union_vector@@Base+0x120>
   232c8:	movw	r0, #37448	; 0x9248
   232cc:	movt	r0, #2
   232d0:	mov	r2, #1536	; 0x600
   232d4:	bl	12a64 <__assert_fail@plt>
   232d8:	movw	r1, #36740	; 0x8f84
   232dc:	movt	r1, #2
   232e0:	ldr	r3, [pc, #40]	; 23310 <flatcc_builder_table_add_union_vector@@Base+0x120>
   232e4:	movw	r0, #37728	; 0x9360
   232e8:	movt	r0, #2
   232ec:	movw	r2, #1537	; 0x601
   232f0:	bl	12a64 <__assert_fail@plt>
   232f4:	movw	r1, #36740	; 0x8f84
   232f8:	movt	r1, #2
   232fc:	ldr	r3, [pc, #12]	; 23310 <flatcc_builder_table_add_union_vector@@Base+0x120>
   23300:	movw	r0, #37704	; 0x9348
   23304:	movt	r0, #2
   23308:	movw	r2, #1540	; 0x604
   2330c:	bl	12a64 <__assert_fail@plt>
   23310:	andeq	r8, r2, ip, lsr pc

00023314 <flatcc_builder_push_buffer_alignment@@Base>:
   23314:	mov	r3, r0
   23318:	mov	r2, #4
   2331c:	ldrh	r0, [r0, #128]	; 0x80
   23320:	strh	r2, [r3, #128]	; 0x80
   23324:	bx	lr

00023328 <flatcc_builder_pop_buffer_alignment@@Base>:
   23328:	ldrh	r3, [r0, #128]	; 0x80
   2332c:	cmp	r3, r1
   23330:	strhcc	r1, [r0, #128]	; 0x80
   23334:	bx	lr

00023338 <flatcc_builder_get_buffer_alignment@@Base>:
   23338:	ldrh	r0, [r0, #128]	; 0x80
   2333c:	bx	lr

00023340 <flatcc_builder_set_vtable_clustering@@Base>:
   23340:	clz	r1, r1
   23344:	lsr	r1, r1, #5
   23348:	str	r1, [r0, #180]	; 0xb4
   2334c:	bx	lr

00023350 <flatcc_builder_set_block_align@@Base>:
   23350:	strh	r1, [r0, #132]	; 0x84
   23354:	bx	lr

00023358 <flatcc_builder_get_level@@Base>:
   23358:	ldr	r0, [r0, #156]	; 0x9c
   2335c:	bx	lr

00023360 <flatcc_builder_set_max_level@@Base>:
   23360:	ldr	r3, [r0, #160]	; 0xa0
   23364:	str	r1, [r0, #176]	; 0xb0
   23368:	cmp	r3, r1
   2336c:	strlt	r1, [r0, #160]	; 0xa0
   23370:	bx	lr

00023374 <flatcc_builder_get_buffer_size@@Base>:
   23374:	ldr	r3, [r0, #136]	; 0x88
   23378:	ldr	r0, [r0, #140]	; 0x8c
   2337c:	sub	r0, r0, r3
   23380:	bx	lr

00023384 <flatcc_builder_get_buffer_start@@Base>:
   23384:	ldr	r0, [r0, #136]	; 0x88
   23388:	bx	lr

0002338c <flatcc_builder_get_buffer_end@@Base>:
   2338c:	ldr	r0, [r0, #140]	; 0x8c
   23390:	bx	lr

00023394 <flatcc_builder_set_vtable_cache_limit@@Base>:
   23394:	str	r1, [r0, #172]	; 0xac
   23398:	bx	lr

0002339c <flatcc_builder_set_identifier@@Base>:
   2339c:	ldr	r3, [pc, #16]	; 233b4 <flatcc_builder_set_identifier@@Base+0x18>
   233a0:	cmp	r1, #0
   233a4:	moveq	r1, r3
   233a8:	ldr	r3, [r1]
   233ac:	str	r3, [r0, #168]	; 0xa8
   233b0:	bx	lr
   233b4:	ldrdeq	r8, [r2], -ip

000233b8 <flatcc_builder_get_type@@Base>:
   233b8:	ldr	r0, [r0, #32]
   233bc:	cmp	r0, #0
   233c0:	ldrhne	r0, [r0, #14]
   233c4:	bx	lr

000233c8 <flatcc_builder_get_type_at@@Base>:
   233c8:	cmp	r1, #0
   233cc:	ble	233f4 <flatcc_builder_get_type_at@@Base+0x2c>
   233d0:	ldr	r3, [r0, #156]	; 0x9c
   233d4:	cmp	r3, r1
   233d8:	blt	233f4 <flatcc_builder_get_type_at@@Base+0x2c>
   233dc:	ldr	r2, [r0, #32]
   233e0:	sub	r1, r1, r3
   233e4:	add	r1, r1, r1, lsl #3
   233e8:	add	r1, r2, r1, lsl #2
   233ec:	ldrh	r0, [r1, #14]
   233f0:	bx	lr
   233f4:	mov	r0, #0
   233f8:	bx	lr

000233fc <flatcc_builder_get_direct_buffer@@Base>:
   233fc:	ldr	r3, [r0, #184]	; 0xb8
   23400:	cmp	r3, #0
   23404:	bne	23420 <flatcc_builder_get_direct_buffer@@Base+0x24>
   23408:	cmp	r1, #0
   2340c:	movne	r3, #0
   23410:	movne	r0, r3
   23414:	moveq	r0, r1
   23418:	strne	r3, [r1]
   2341c:	bx	lr
   23420:	ldrd	r2, [r0, #188]	; 0xbc
   23424:	cmp	r2, r3
   23428:	bne	23408 <flatcc_builder_get_direct_buffer@@Base+0xc>
   2342c:	cmp	r1, #0
   23430:	ldrne	r3, [r0, #212]	; 0xd4
   23434:	ldr	r0, [r0, #196]	; 0xc4
   23438:	strne	r3, [r1]
   2343c:	bx	lr

00023440 <flatcc_builder_copy_buffer@@Base>:
   23440:	ldr	r3, [r0, #184]	; 0xb8
   23444:	cmp	r3, #0
   23448:	beq	23470 <flatcc_builder_copy_buffer@@Base+0x30>
   2344c:	add	r0, r0, #188	; 0xbc
   23450:	str	r4, [sp, #-8]!
   23454:	str	lr, [sp, #4]
   23458:	bl	23bac <flatcc_emitter_copy_buffer@@Base>
   2345c:	cmp	r0, #0
   23460:	beq	23478 <flatcc_builder_copy_buffer@@Base+0x38>
   23464:	ldr	r4, [sp]
   23468:	add	sp, sp, #4
   2346c:	pop	{pc}		; (ldr pc, [sp], #4)
   23470:	mov	r0, r3
   23474:	bx	lr
   23478:	bl	1dd0c <flatcc_builder_default_alloc@@Base+0x23c>

0002347c <flatcc_builder_finalize_buffer@@Base>:
   2347c:	strd	r4, [sp, #-16]!
   23480:	cmp	r1, #0
   23484:	mov	r5, r0
   23488:	ldr	r2, [r0, #136]	; 0x88
   2348c:	ldr	r4, [r0, #140]	; 0x8c
   23490:	str	r6, [sp, #8]
   23494:	str	lr, [sp, #12]
   23498:	sub	r4, r4, r2
   2349c:	mov	r0, r4
   234a0:	strne	r4, [r1]
   234a4:	bl	129d4 <malloc@plt>
   234a8:	subs	r6, r0, #0
   234ac:	beq	23504 <flatcc_builder_finalize_buffer@@Base+0x88>
   234b0:	ldr	r3, [r5, #184]	; 0xb8
   234b4:	cmp	r3, #0
   234b8:	beq	234e8 <flatcc_builder_finalize_buffer@@Base+0x6c>
   234bc:	mov	r2, r4
   234c0:	add	r0, r5, #188	; 0xbc
   234c4:	mov	r1, r6
   234c8:	bl	23bac <flatcc_emitter_copy_buffer@@Base>
   234cc:	cmp	r0, #0
   234d0:	beq	23520 <flatcc_builder_finalize_buffer@@Base+0xa4>
   234d4:	mov	r0, r6
   234d8:	ldrd	r4, [sp]
   234dc:	ldr	r6, [sp, #8]
   234e0:	add	sp, sp, #12
   234e4:	pop	{pc}		; (ldr pc, [sp], #4)
   234e8:	movw	r1, #36740	; 0x8f84
   234ec:	movt	r1, #2
   234f0:	ldr	r3, [pc, #44]	; 23524 <flatcc_builder_finalize_buffer@@Base+0xa8>
   234f4:	movw	r0, #36924	; 0x903c
   234f8:	movt	r0, #2
   234fc:	movw	r2, #1948	; 0x79c
   23500:	bl	12a64 <__assert_fail@plt>
   23504:	movw	r1, #36740	; 0x8f84
   23508:	movt	r1, #2
   2350c:	ldr	r3, [pc, #16]	; 23524 <flatcc_builder_finalize_buffer@@Base+0xa8>
   23510:	movw	r0, #36924	; 0x903c
   23514:	movt	r0, #2
   23518:	movw	r2, #1944	; 0x798
   2351c:	bl	12a64 <__assert_fail@plt>
   23520:	bl	1dd0c <flatcc_builder_default_alloc@@Base+0x23c>
   23524:	andeq	r8, r2, r4, ror #30

00023528 <flatcc_builder_finalize_aligned_buffer@@Base>:
   23528:	strd	r4, [sp, #-20]!	; 0xffffffec
   2352c:	mov	r2, #0
   23530:	mov	r5, r0
   23534:	ldr	r3, [r0, #136]	; 0x88
   23538:	ldr	r4, [r0, #140]	; 0x8c
   2353c:	strd	r6, [sp, #8]
   23540:	subs	r6, r1, #0
   23544:	ldrh	r1, [r0, #128]	; 0x80
   23548:	str	lr, [sp, #16]
   2354c:	sub	sp, sp, #12
   23550:	add	r0, sp, #4
   23554:	sub	r3, r4, r3
   23558:	str	r2, [sp, #4]
   2355c:	sub	r4, r1, #1
   23560:	rsb	r2, r1, #0
   23564:	strne	r3, [r6]
   23568:	add	r4, r4, r3
   2356c:	cmp	r1, #4
   23570:	and	r4, r4, r2
   23574:	movcc	r1, #4
   23578:	mov	r2, r4
   2357c:	bl	12a10 <posix_memalign@plt>
   23580:	cmp	r0, #0
   23584:	beq	235c4 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   23588:	ldr	r0, [sp, #4]
   2358c:	cmp	r0, #0
   23590:	beq	23598 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   23594:	bl	12980 <free@plt>
   23598:	cmp	r6, #0
   2359c:	movne	r3, #0
   235a0:	moveq	r7, r6
   235a4:	movne	r7, r3
   235a8:	strne	r3, [r6]
   235ac:	mov	r0, r7
   235b0:	add	sp, sp, #12
   235b4:	ldrd	r4, [sp]
   235b8:	ldrd	r6, [sp, #8]
   235bc:	add	sp, sp, #16
   235c0:	pop	{pc}		; (ldr pc, [sp], #4)
   235c4:	ldr	r7, [sp, #4]
   235c8:	cmp	r7, #0
   235cc:	beq	23598 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   235d0:	ldr	r3, [r5, #184]	; 0xb8
   235d4:	cmp	r3, #0
   235d8:	beq	235f8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   235dc:	mov	r2, r4
   235e0:	add	r0, r5, #188	; 0xbc
   235e4:	mov	r1, r7
   235e8:	bl	23bac <flatcc_emitter_copy_buffer@@Base>
   235ec:	cmp	r0, #0
   235f0:	bne	235ac <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   235f4:	bl	1dd0c <flatcc_builder_default_alloc@@Base+0x23c>
   235f8:	mov	r0, r7
   235fc:	b	23594 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00023600 <flatcc_builder_aligned_alloc@@Base>:
   23600:	cmp	r0, #4
   23604:	str	r4, [sp, #-8]!
   23608:	mov	r4, #0
   2360c:	str	lr, [sp, #4]
   23610:	sub	sp, sp, #8
   23614:	mov	r2, r1
   23618:	movcs	r1, r0
   2361c:	movcc	r1, #4
   23620:	add	r0, sp, #4
   23624:	str	r4, [sp, #4]
   23628:	bl	12a10 <posix_memalign@plt>
   2362c:	cmp	r0, r4
   23630:	ldr	r0, [sp, #4]
   23634:	beq	23648 <flatcc_builder_aligned_alloc@@Base+0x48>
   23638:	cmp	r0, #0
   2363c:	beq	23648 <flatcc_builder_aligned_alloc@@Base+0x48>
   23640:	bl	12980 <free@plt>
   23644:	mov	r0, r4
   23648:	add	sp, sp, #8
   2364c:	ldr	r4, [sp]
   23650:	add	sp, sp, #4
   23654:	pop	{pc}		; (ldr pc, [sp], #4)

00023658 <flatcc_builder_aligned_free@@Base>:
   23658:	b	12980 <free@plt>

0002365c <flatcc_builder_get_emit_context@@Base>:
   2365c:	ldr	r0, [r0, #36]	; 0x24
   23660:	bx	lr

00023664 <flatcc_emitter_recycle_page@@Base>:
   23664:	ldr	r3, [r0]
   23668:	cmp	r3, r1
   2366c:	beq	236b0 <flatcc_emitter_recycle_page@@Base+0x4c>
   23670:	ldr	r2, [r0, #4]
   23674:	cmp	r2, r1
   23678:	beq	236b0 <flatcc_emitter_recycle_page@@Base+0x4c>
   2367c:	push	{lr}		; (str lr, [sp, #-4]!)
   23680:	mov	r0, #0
   23684:	ldr	lr, [r1, #2944]	; 0xb80
   23688:	ldr	ip, [r1, #2948]	; 0xb84
   2368c:	str	ip, [lr, #2948]	; 0xb84
   23690:	ldr	r2, [r3, #2948]	; 0xb84
   23694:	str	lr, [ip, #2944]	; 0xb80
   23698:	str	r3, [r1, #2944]	; 0xb80
   2369c:	str	r2, [r1, #2948]	; 0xb84
   236a0:	str	r1, [r2, #2944]	; 0xb80
   236a4:	ldr	r3, [r1, #2944]	; 0xb80
   236a8:	str	r1, [r3, #2948]	; 0xb84
   236ac:	pop	{pc}		; (ldr pc, [sp], #4)
   236b0:	mvn	r0, #0
   236b4:	bx	lr

000236b8 <flatcc_emitter_reset@@Base>:
   236b8:	ldr	r2, [r0]
   236bc:	cmp	r2, #0
   236c0:	bxeq	lr
   236c4:	strd	r4, [sp, #-16]!
   236c8:	movw	ip, #64064	; 0xfa40
   236cc:	movt	ip, #65535	; 0xffff
   236d0:	ldr	r1, [r0, #24]
   236d4:	add	r4, r2, #1472	; 0x5c0
   236d8:	ldr	r3, [r0, #32]
   236dc:	ldr	r5, [r0, #28]
   236e0:	str	r6, [sp, #8]
   236e4:	str	lr, [sp, #12]
   236e8:	mov	lr, #1472	; 0x5c0
   236ec:	cmp	r3, #0
   236f0:	stmib	r0, {r2, r4}
   236f4:	moveq	r3, r1
   236f8:	lsr	r1, r1, #2
   236fc:	str	lr, [r0, #12]
   23700:	add	r3, r3, r3, lsl #1
   23704:	str	r4, [r0, #16]
   23708:	str	lr, [r0, #20]
   2370c:	add	r3, r1, r3, lsr #2
   23710:	str	ip, [r2, #2952]	; 0xb88
   23714:	mov	ip, #0
   23718:	cmp	r5, r3, lsl #1
   2371c:	str	ip, [r0, #24]
   23720:	str	r3, [r0, #32]
   23724:	bls	2377c <flatcc_emitter_reset@@Base+0xc4>
   23728:	ldr	r3, [r2, #2944]	; 0xb80
   2372c:	mov	r4, r0
   23730:	cmp	r2, r3
   23734:	bne	2374c <flatcc_emitter_reset@@Base+0x94>
   23738:	b	2377c <flatcc_emitter_reset@@Base+0xc4>
   2373c:	ldm	r4, {r1, r2}
   23740:	ldr	r3, [r2, #2944]	; 0xb80
   23744:	cmp	r3, r1
   23748:	beq	2377c <flatcc_emitter_reset@@Base+0xc4>
   2374c:	ldr	r1, [r3, #2944]	; 0xb80
   23750:	mov	r0, r3
   23754:	str	r1, [r2, #2944]	; 0xb80
   23758:	ldr	r3, [r3, #2944]	; 0xb80
   2375c:	str	r2, [r3, #2948]	; 0xb84
   23760:	bl	12980 <free@plt>
   23764:	ldr	r3, [r4, #28]
   23768:	ldr	r2, [r4, #32]
   2376c:	sub	r3, r3, #2944	; 0xb80
   23770:	cmp	r3, r2, lsl #1
   23774:	str	r3, [r4, #28]
   23778:	bhi	2373c <flatcc_emitter_reset@@Base+0x84>
   2377c:	ldrd	r4, [sp]
   23780:	ldr	r6, [sp, #8]
   23784:	add	sp, sp, #12
   23788:	pop	{pc}		; (ldr pc, [sp], #4)

0002378c <flatcc_emitter_clear@@Base>:
   2378c:	ldr	r3, [r0]
   23790:	cmp	r3, #0
   23794:	bxeq	lr
   23798:	mov	r1, #0
   2379c:	strd	r4, [sp, #-16]!
   237a0:	mov	r5, r0
   237a4:	ldr	r2, [r3, #2948]	; 0xb84
   237a8:	str	r6, [sp, #8]
   237ac:	str	lr, [sp, #12]
   237b0:	str	r1, [r2, #2944]	; 0xb80
   237b4:	ldr	r4, [r3, #2944]	; 0xb80
   237b8:	cmp	r4, r1
   237bc:	bne	237c8 <flatcc_emitter_clear@@Base+0x3c>
   237c0:	b	23804 <flatcc_emitter_clear@@Base+0x78>
   237c4:	mov	r4, r3
   237c8:	ldr	r0, [r4, #2948]	; 0xb84
   237cc:	bl	12980 <free@plt>
   237d0:	ldr	r3, [r4, #2944]	; 0xb80
   237d4:	cmp	r3, #0
   237d8:	bne	237c4 <flatcc_emitter_clear@@Base+0x38>
   237dc:	mov	r0, r4
   237e0:	bl	12980 <free@plt>
   237e4:	mov	r0, r5
   237e8:	mov	r2, #36	; 0x24
   237ec:	ldrd	r4, [sp]
   237f0:	mov	r1, #0
   237f4:	ldr	r6, [sp, #8]
   237f8:	ldr	lr, [sp, #12]
   237fc:	add	sp, sp, #16
   23800:	b	12a1c <memset@plt>
   23804:	mov	r4, r3
   23808:	b	237dc <flatcc_emitter_clear@@Base+0x50>

0002380c <flatcc_emitter@@Base>:
   2380c:	cmp	r3, #0
   23810:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23814:	mov	r4, r0
   23818:	ldr	r3, [r0, #24]
   2381c:	strd	r6, [sp, #8]
   23820:	strd	r8, [sp, #16]
   23824:	sub	r8, r2, #1
   23828:	strd	sl, [sp, #24]
   2382c:	str	lr, [sp, #32]
   23830:	sub	sp, sp, #12
   23834:	ldr	ip, [sp, #48]	; 0x30
   23838:	add	r3, r3, ip
   2383c:	str	r3, [r0, #24]
   23840:	blt	23a24 <flatcc_emitter@@Base+0x218>
   23844:	ldr	r0, [r0, #20]
   23848:	cmp	r0, ip
   2384c:	bcs	238e4 <flatcc_emitter@@Base+0xd8>
   23850:	cmp	r2, #0
   23854:	beq	23928 <flatcc_emitter@@Base+0x11c>
   23858:	movw	r3, #64064	; 0xfa40
   2385c:	movt	r3, #65535	; 0xffff
   23860:	add	r5, r1, #8
   23864:	mov	r8, r2
   23868:	mov	r9, #1472	; 0x5c0
   2386c:	str	r3, [sp, #4]
   23870:	ldr	r7, [r5, #-8]
   23874:	ldr	r6, [r5, #-4]
   23878:	cmp	r6, #0
   2387c:	beq	239c0 <flatcc_emitter@@Base+0x1b4>
   23880:	mov	r3, r0
   23884:	cmp	r6, r3
   23888:	bls	238dc <flatcc_emitter@@Base+0xd0>
   2388c:	cmp	r3, #0
   23890:	beq	23948 <flatcc_emitter@@Base+0x13c>
   23894:	sub	fp, r6, r3
   23898:	mov	r6, r3
   2389c:	mov	r2, r6
   238a0:	mov	r1, r7
   238a4:	ldr	r0, [r4, #16]
   238a8:	bl	1298c <memcpy@plt>
   238ac:	ldr	r2, [r4, #16]
   238b0:	cmp	fp, #0
   238b4:	add	r7, r7, r6
   238b8:	ldr	r0, [r4, #20]
   238bc:	add	r2, r2, r6
   238c0:	sub	r3, r0, r6
   238c4:	mov	r0, r3
   238c8:	strd	r2, [r4, #16]
   238cc:	beq	239c0 <flatcc_emitter@@Base+0x1b4>
   238d0:	mov	r6, fp
   238d4:	cmp	r6, r3
   238d8:	bhi	2388c <flatcc_emitter@@Base+0x80>
   238dc:	mov	fp, #0
   238e0:	b	2389c <flatcc_emitter@@Base+0x90>
   238e4:	ldr	r3, [r4, #16]
   238e8:	sub	r0, r0, ip
   238ec:	str	r0, [r4, #20]
   238f0:	add	ip, r3, ip
   238f4:	str	ip, [r4, #16]
   238f8:	cmp	r2, #0
   238fc:	addne	r4, r1, #8
   23900:	beq	23928 <flatcc_emitter@@Base+0x11c>
   23904:	mov	r0, r3
   23908:	ldmdb	r4, {r1, r2}
   2390c:	sub	r8, r8, #1
   23910:	bl	1298c <memcpy@plt>
   23914:	ldr	r2, [r4, #-4]
   23918:	cmn	r8, #1
   2391c:	add	r4, r4, #8
   23920:	add	r3, r0, r2
   23924:	bne	23904 <flatcc_emitter@@Base+0xf8>
   23928:	mov	r0, #0
   2392c:	add	sp, sp, #12
   23930:	ldrd	r4, [sp]
   23934:	ldrd	r6, [sp, #8]
   23938:	ldrd	r8, [sp, #16]
   2393c:	ldrd	sl, [sp, #24]
   23940:	add	sp, sp, #32
   23944:	pop	{pc}		; (ldr pc, [sp], #4)
   23948:	ldr	fp, [r4, #4]
   2394c:	cmp	fp, #0
   23950:	beq	239d0 <flatcc_emitter@@Base+0x1c4>
   23954:	ldr	sl, [r4]
   23958:	ldr	r0, [fp, #2944]	; 0xb80
   2395c:	cmp	r0, sl
   23960:	beq	2398c <flatcc_emitter@@Base+0x180>
   23964:	str	r0, [r4, #4]
   23968:	ldr	r1, [r0, #2948]	; 0xb84
   2396c:	mov	r2, #2944	; 0xb80
   23970:	mov	r3, r2
   23974:	str	r0, [r4, #16]
   23978:	str	r2, [r4, #20]
   2397c:	ldr	r2, [r1, #2952]	; 0xb88
   23980:	add	r2, r2, r3
   23984:	str	r2, [r0, #2952]	; 0xb88
   23988:	b	23884 <flatcc_emitter@@Base+0x78>
   2398c:	movw	r0, #2956	; 0xb8c
   23990:	bl	129d4 <malloc@plt>
   23994:	cmp	r0, #0
   23998:	beq	23a1c <flatcc_emitter@@Base+0x210>
   2399c:	ldr	r2, [r4, #28]
   239a0:	str	sl, [r0, #2944]	; 0xb80
   239a4:	str	fp, [r0, #2948]	; 0xb84
   239a8:	add	r2, r2, #2944	; 0xb80
   239ac:	str	r2, [r4, #28]
   239b0:	str	r0, [sl, #2948]	; 0xb84
   239b4:	str	r0, [fp, #2944]	; 0xb80
   239b8:	str	r0, [r4, #4]
   239bc:	b	23968 <flatcc_emitter@@Base+0x15c>
   239c0:	subs	r8, r8, #1
   239c4:	add	r5, r5, #8
   239c8:	bne	23870 <flatcc_emitter@@Base+0x64>
   239cc:	b	23928 <flatcc_emitter@@Base+0x11c>
   239d0:	movw	r0, #2956	; 0xb8c
   239d4:	bl	129d4 <malloc@plt>
   239d8:	cmp	r0, #0
   239dc:	beq	23a1c <flatcc_emitter@@Base+0x210>
   239e0:	ldr	r2, [r4, #28]
   239e4:	add	r1, r0, #1472	; 0x5c0
   239e8:	mov	r3, #1472	; 0x5c0
   239ec:	str	r0, [r4]
   239f0:	strd	r0, [r4, #4]
   239f4:	str	r9, [r4, #12]
   239f8:	str	r1, [r4, #16]
   239fc:	add	r2, r2, #2944	; 0xb80
   23a00:	str	r9, [r4, #20]
   23a04:	str	r0, [r0, #2944]	; 0xb80
   23a08:	str	r2, [r4, #28]
   23a0c:	ldr	r2, [sp, #4]
   23a10:	str	r0, [r0, #2948]	; 0xb84
   23a14:	str	r2, [r0, #2952]	; 0xb88
   23a18:	b	23884 <flatcc_emitter@@Base+0x78>
   23a1c:	mvn	r0, #0
   23a20:	b	2392c <flatcc_emitter@@Base+0x120>
   23a24:	ldr	r0, [r0, #12]
   23a28:	cmp	r0, ip
   23a2c:	bcs	23b94 <flatcc_emitter@@Base+0x388>
   23a30:	add	r5, r1, r2, lsl #3
   23a34:	movw	r3, #64064	; 0xfa40
   23a38:	movt	r3, #65535	; 0xffff
   23a3c:	str	r3, [sp, #4]
   23a40:	cmn	r8, #1
   23a44:	beq	23928 <flatcc_emitter@@Base+0x11c>
   23a48:	ldr	r7, [r5, #-8]
   23a4c:	ldr	r6, [r5, #-4]
   23a50:	cmp	r6, #0
   23a54:	add	r7, r7, r6
   23a58:	beq	23aa8 <flatcc_emitter@@Base+0x29c>
   23a5c:	mov	r9, #1472	; 0x5c0
   23a60:	ldr	r2, [r4, #12]
   23a64:	cmp	r2, r6
   23a68:	bcs	23b0c <flatcc_emitter@@Base+0x300>
   23a6c:	cmp	r2, #0
   23a70:	beq	23ab4 <flatcc_emitter@@Base+0x2a8>
   23a74:	sub	r6, r6, r2
   23a78:	mov	r1, #0
   23a7c:	ldr	r3, [r4, #8]
   23a80:	rsb	r0, r2, #0
   23a84:	add	r7, r7, r0
   23a88:	str	r1, [r4, #12]
   23a8c:	mov	r1, r7
   23a90:	add	r3, r3, r0
   23a94:	mov	r0, r3
   23a98:	str	r3, [r4, #8]
   23a9c:	bl	1298c <memcpy@plt>
   23aa0:	cmp	r6, #0
   23aa4:	bne	23a60 <flatcc_emitter@@Base+0x254>
   23aa8:	sub	r5, r5, #8
   23aac:	sub	r8, r8, #1
   23ab0:	b	23a40 <flatcc_emitter@@Base+0x234>
   23ab4:	ldr	fp, [r4]
   23ab8:	cmp	fp, #0
   23abc:	beq	23b50 <flatcc_emitter@@Base+0x344>
   23ac0:	ldr	sl, [r4, #4]
   23ac4:	ldr	r0, [fp, #2948]	; 0xb84
   23ac8:	cmp	r0, sl
   23acc:	beq	23b1c <flatcc_emitter@@Base+0x310>
   23ad0:	ldr	r3, [fp, #2952]	; 0xb88
   23ad4:	sub	r3, r3, #2944	; 0xb80
   23ad8:	str	r3, [r0, #2952]	; 0xb88
   23adc:	str	r0, [r4]
   23ae0:	ldr	r3, [r0, #2944]	; 0xb80
   23ae4:	mov	r2, #2944	; 0xb80
   23ae8:	add	r1, r0, #2944	; 0xb80
   23aec:	ldr	r3, [r3, #2952]	; 0xb88
   23af0:	str	r1, [r4, #8]
   23af4:	str	r2, [r4, #12]
   23af8:	sub	r3, r3, #2944	; 0xb80
   23afc:	str	r3, [r0, #2952]	; 0xb88
   23b00:	ldr	r2, [r4, #12]
   23b04:	cmp	r2, r6
   23b08:	bcc	23a6c <flatcc_emitter@@Base+0x260>
   23b0c:	sub	r1, r2, r6
   23b10:	mov	r2, r6
   23b14:	mov	r6, #0
   23b18:	b	23a7c <flatcc_emitter@@Base+0x270>
   23b1c:	movw	r0, #2956	; 0xb8c
   23b20:	bl	129d4 <malloc@plt>
   23b24:	cmp	r0, #0
   23b28:	beq	23a1c <flatcc_emitter@@Base+0x210>
   23b2c:	ldr	r2, [r4, #28]
   23b30:	str	fp, [r0, #2944]	; 0xb80
   23b34:	str	sl, [r0, #2948]	; 0xb84
   23b38:	add	r2, r2, #2944	; 0xb80
   23b3c:	str	r2, [r4, #28]
   23b40:	str	r0, [fp, #2948]	; 0xb84
   23b44:	str	r0, [sl, #2944]	; 0xb80
   23b48:	str	r0, [r4]
   23b4c:	b	23ae0 <flatcc_emitter@@Base+0x2d4>
   23b50:	movw	r0, #2956	; 0xb8c
   23b54:	bl	129d4 <malloc@plt>
   23b58:	cmp	r0, #0
   23b5c:	beq	23a1c <flatcc_emitter@@Base+0x210>
   23b60:	ldr	r3, [r4, #28]
   23b64:	add	r2, r0, #1472	; 0x5c0
   23b68:	str	r0, [r4]
   23b6c:	stmib	r4, {r0, r2, r9}
   23b70:	add	r3, r3, #2944	; 0xb80
   23b74:	str	r2, [r4, #16]
   23b78:	str	r9, [r4, #20]
   23b7c:	str	r3, [r4, #28]
   23b80:	ldr	r3, [sp, #4]
   23b84:	str	r0, [r0, #2944]	; 0xb80
   23b88:	str	r0, [r0, #2948]	; 0xb84
   23b8c:	str	r3, [r0, #2952]	; 0xb88
   23b90:	b	23a60 <flatcc_emitter@@Base+0x254>
   23b94:	ldr	r3, [r4, #8]
   23b98:	sub	r0, r0, ip
   23b9c:	str	r0, [r4, #12]
   23ba0:	sub	r3, r3, ip
   23ba4:	str	r3, [r4, #8]
   23ba8:	b	238f8 <flatcc_emitter@@Base+0xec>

00023bac <flatcc_emitter_copy_buffer@@Base>:
   23bac:	ldr	r3, [r0, #24]
   23bb0:	strd	r4, [sp, #-16]!
   23bb4:	str	r6, [sp, #8]
   23bb8:	str	lr, [sp, #12]
   23bbc:	cmp	r3, r2
   23bc0:	movhi	r5, #0
   23bc4:	bhi	23c44 <flatcc_emitter_copy_buffer@@Base+0x98>
   23bc8:	ldr	r5, [r0]
   23bcc:	mov	r6, r0
   23bd0:	cmp	r5, #0
   23bd4:	beq	23c44 <flatcc_emitter_copy_buffer@@Base+0x98>
   23bd8:	ldr	r2, [r6, #4]
   23bdc:	mov	r0, r1
   23be0:	ldr	r1, [r6, #8]
   23be4:	cmp	r5, r2
   23be8:	beq	23c58 <flatcc_emitter_copy_buffer@@Base+0xac>
   23bec:	ldr	r2, [r6, #12]
   23bf0:	rsb	r2, r2, #2944	; 0xb80
   23bf4:	add	r5, r0, r2
   23bf8:	bl	1298c <memcpy@plt>
   23bfc:	ldrd	r2, [r6]
   23c00:	ldr	r4, [r2, #2944]	; 0xb80
   23c04:	cmp	r4, r3
   23c08:	beq	23c30 <flatcc_emitter_copy_buffer@@Base+0x84>
   23c0c:	mov	r2, #2944	; 0xb80
   23c10:	mov	r1, r4
   23c14:	mov	r0, r5
   23c18:	add	r5, r5, r2
   23c1c:	bl	1298c <memcpy@plt>
   23c20:	ldr	r3, [r6, #4]
   23c24:	ldr	r4, [r4, #2944]	; 0xb80
   23c28:	cmp	r3, r4
   23c2c:	bne	23c0c <flatcc_emitter_copy_buffer@@Base+0x60>
   23c30:	ldr	r2, [r6, #20]
   23c34:	mov	r1, r4
   23c38:	mov	r0, r5
   23c3c:	rsb	r2, r2, #2944	; 0xb80
   23c40:	bl	1298c <memcpy@plt>
   23c44:	mov	r0, r5
   23c48:	ldrd	r4, [sp]
   23c4c:	ldr	r6, [sp, #8]
   23c50:	add	sp, sp, #12
   23c54:	pop	{pc}		; (ldr pc, [sp], #4)
   23c58:	mov	r2, r3
   23c5c:	mov	r5, r0
   23c60:	bl	1298c <memcpy@plt>
   23c64:	b	23c44 <flatcc_emitter_copy_buffer@@Base+0x98>

00023c68 <flatcc_verify_error_string@@Base>:
   23c68:	cmp	r0, #36	; 0x24
   23c6c:	bhi	23c80 <flatcc_verify_error_string@@Base+0x18>
   23c70:	movw	r3, #37768	; 0x9388
   23c74:	movt	r3, #2
   23c78:	ldr	r0, [r3, r0, lsl #2]
   23c7c:	bx	lr
   23c80:	movw	r0, #37916	; 0x941c
   23c84:	movt	r0, #2
   23c88:	bx	lr

00023c8c <flatcc_verify_field@@Base>:
   23c8c:	ldrh	ip, [r0, #22]
   23c90:	add	r1, r1, #2
   23c94:	lsl	r1, r1, #1
   23c98:	uxth	r1, r1
   23c9c:	cmp	ip, r1
   23ca0:	bls	23ce8 <flatcc_verify_field@@Base+0x5c>
   23ca4:	ldr	ip, [r0, #12]
   23ca8:	ldrh	r1, [ip, r1]
   23cac:	cmp	r1, #0
   23cb0:	beq	23ce8 <flatcc_verify_field@@Base+0x5c>
   23cb4:	ldrh	ip, [r0, #20]
   23cb8:	add	r2, r2, r1
   23cbc:	cmp	r2, ip
   23cc0:	bhi	23cf0 <flatcc_verify_field@@Base+0x64>
   23cc4:	ldr	r2, [r0]
   23cc8:	sub	r3, r3, #1
   23ccc:	ldr	r0, [r0, #16]
   23cd0:	add	r2, r2, r0
   23cd4:	add	r1, r2, r1
   23cd8:	tst	r1, r3
   23cdc:	moveq	r0, #0
   23ce0:	movne	r0, #12
   23ce4:	bx	lr
   23ce8:	mov	r0, #0
   23cec:	bx	lr
   23cf0:	mov	r0, #13
   23cf4:	bx	lr

00023cf8 <flatcc_verify_string_field@@Base>:
   23cf8:	ldrh	r3, [r0, #22]
   23cfc:	add	r1, r1, #2
   23d00:	lsl	r1, r1, #1
   23d04:	uxth	r1, r1
   23d08:	cmp	r3, r1
   23d0c:	bls	23da8 <flatcc_verify_string_field@@Base+0xb0>
   23d10:	ldr	r3, [r0, #12]
   23d14:	ldrh	r3, [r3, r1]
   23d18:	cmp	r3, #0
   23d1c:	beq	23da8 <flatcc_verify_string_field@@Base+0xb0>
   23d20:	ldrh	r2, [r0, #20]
   23d24:	add	r1, r3, #4
   23d28:	cmp	r1, r2
   23d2c:	bhi	23db8 <flatcc_verify_string_field@@Base+0xc0>
   23d30:	ldr	r2, [r0, #16]
   23d34:	add	r3, r3, r2
   23d38:	tst	r3, #3
   23d3c:	bne	23dc0 <flatcc_verify_string_field@@Base+0xc8>
   23d40:	cmp	r3, #0
   23d44:	beq	23dd0 <flatcc_verify_string_field@@Base+0xd8>
   23d48:	ldr	r1, [r0]
   23d4c:	ldr	r2, [r1, r3]
   23d50:	add	r2, r3, r2
   23d54:	cmp	r3, r2
   23d58:	bcs	23da0 <flatcc_verify_string_field@@Base+0xa8>
   23d5c:	ldr	r3, [r0, #4]
   23d60:	add	r0, r2, #4
   23d64:	cmp	r3, r0
   23d68:	bcc	23da0 <flatcc_verify_string_field@@Base+0xa8>
   23d6c:	tst	r2, #3
   23d70:	bne	23da0 <flatcc_verify_string_field@@Base+0xa8>
   23d74:	ldr	r2, [r1, r2]
   23d78:	sub	r3, r3, r0
   23d7c:	add	ip, r2, #1
   23d80:	cmp	r3, ip
   23d84:	bcc	23dc8 <flatcc_verify_string_field@@Base+0xd0>
   23d88:	add	r1, r1, r0
   23d8c:	ldrb	r3, [r1, r2]
   23d90:	cmp	r3, #0
   23d94:	moveq	r0, #0
   23d98:	movne	r0, #7
   23d9c:	bx	lr
   23da0:	mov	r0, #17
   23da4:	bx	lr
   23da8:	cmp	r2, #0
   23dac:	moveq	r0, #0
   23db0:	movne	r0, #4
   23db4:	bx	lr
   23db8:	mov	r0, #13
   23dbc:	bx	lr
   23dc0:	mov	r0, #12
   23dc4:	bx	lr
   23dc8:	mov	r0, #8
   23dcc:	bx	lr
   23dd0:	mov	r0, r3
   23dd4:	bx	lr

00023dd8 <flatcc_verify_vector_field@@Base>:
   23dd8:	ldrh	ip, [r0, #22]
   23ddc:	add	r1, r1, #2
   23de0:	lsl	r1, r1, #1
   23de4:	str	r4, [sp, #-8]!
   23de8:	str	lr, [sp, #4]
   23dec:	uxth	r1, r1
   23df0:	ldrh	lr, [sp, #8]
   23df4:	cmp	ip, r1
   23df8:	bls	23ebc <flatcc_verify_vector_field@@Base+0xe4>
   23dfc:	ldr	ip, [r0, #12]
   23e00:	ldrh	r1, [ip, r1]
   23e04:	cmp	r1, #0
   23e08:	beq	23ebc <flatcc_verify_vector_field@@Base+0xe4>
   23e0c:	ldrh	r2, [r0, #20]
   23e10:	add	ip, r1, #4
   23e14:	cmp	ip, r2
   23e18:	movhi	r0, #13
   23e1c:	bhi	23ea0 <flatcc_verify_vector_field@@Base+0xc8>
   23e20:	ldr	r2, [r0, #16]
   23e24:	add	r2, r1, r2
   23e28:	tst	r2, #3
   23e2c:	movne	r0, #12
   23e30:	bne	23ea0 <flatcc_verify_vector_field@@Base+0xc8>
   23e34:	cmp	r2, #0
   23e38:	beq	23ed4 <flatcc_verify_vector_field@@Base+0xfc>
   23e3c:	ldr	r4, [r0]
   23e40:	ldr	ip, [r4, r2]
   23e44:	add	ip, r2, ip
   23e48:	cmp	r2, ip
   23e4c:	bcs	23eac <flatcc_verify_vector_field@@Base+0xd4>
   23e50:	ldr	r1, [r0, #4]
   23e54:	add	r0, ip, #4
   23e58:	cmp	r1, r0
   23e5c:	bcc	23eac <flatcc_verify_vector_field@@Base+0xd4>
   23e60:	cmp	lr, #4
   23e64:	movcc	lr, #4
   23e68:	sub	lr, lr, #1
   23e6c:	orr	lr, lr, #3
   23e70:	tst	lr, r0
   23e74:	bne	23eac <flatcc_verify_vector_field@@Base+0xd4>
   23e78:	ldr	r2, [r4, ip]
   23e7c:	ldr	ip, [sp, #12]
   23e80:	cmp	ip, r2
   23e84:	movcc	r0, #25
   23e88:	bcc	23ea0 <flatcc_verify_vector_field@@Base+0xc8>
   23e8c:	mul	r2, r2, r3
   23e90:	sub	r0, r1, r0
   23e94:	cmp	r0, r2
   23e98:	movcc	r0, #26
   23e9c:	movcs	r0, #0
   23ea0:	ldr	r4, [sp]
   23ea4:	add	sp, sp, #4
   23ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   23eac:	ldr	r4, [sp]
   23eb0:	add	sp, sp, #4
   23eb4:	mov	r0, #16
   23eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   23ebc:	cmp	r2, #0
   23ec0:	ldr	r4, [sp]
   23ec4:	add	sp, sp, #4
   23ec8:	moveq	r0, #0
   23ecc:	movne	r0, #4
   23ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   23ed4:	mov	r0, r2
   23ed8:	b	23ea0 <flatcc_verify_vector_field@@Base+0xc8>

00023edc <flatcc_verify_string_vector_field@@Base>:
   23edc:	ldrh	r3, [r0, #22]
   23ee0:	add	r1, r1, #2
   23ee4:	lsl	r1, r1, #1
   23ee8:	uxth	r1, r1
   23eec:	cmp	r3, r1
   23ef0:	bls	2404c <flatcc_verify_string_vector_field@@Base+0x170>
   23ef4:	ldr	r3, [r0, #12]
   23ef8:	ldrh	r3, [r3, r1]
   23efc:	cmp	r3, #0
   23f00:	beq	2404c <flatcc_verify_string_vector_field@@Base+0x170>
   23f04:	ldrh	r2, [r0, #20]
   23f08:	add	r1, r3, #4
   23f0c:	cmp	r1, r2
   23f10:	bhi	2405c <flatcc_verify_string_vector_field@@Base+0x180>
   23f14:	ldr	r2, [r0, #16]
   23f18:	add	r3, r3, r2
   23f1c:	tst	r3, #3
   23f20:	bne	24064 <flatcc_verify_string_vector_field@@Base+0x188>
   23f24:	cmp	r3, #0
   23f28:	beq	2409c <flatcc_verify_string_vector_field@@Base+0x1c0>
   23f2c:	ldr	r1, [r0]
   23f30:	ldr	r2, [r1, r3]
   23f34:	add	r2, r3, r2
   23f38:	cmp	r3, r2
   23f3c:	bcs	24044 <flatcc_verify_string_vector_field@@Base+0x168>
   23f40:	ldr	ip, [r0, #4]
   23f44:	add	r0, r2, #4
   23f48:	cmp	ip, r0
   23f4c:	bcc	24044 <flatcc_verify_string_vector_field@@Base+0x168>
   23f50:	tst	r0, #3
   23f54:	bne	24044 <flatcc_verify_string_vector_field@@Base+0x168>
   23f58:	ldr	r3, [r1, r2]
   23f5c:	strd	r4, [sp, #-16]!
   23f60:	str	r6, [sp, #8]
   23f64:	str	lr, [sp, #12]
   23f68:	cmn	r3, #-1073741823	; 0xc0000001
   23f6c:	bhi	2406c <flatcc_verify_string_vector_field@@Base+0x190>
   23f70:	lsl	lr, r3, #2
   23f74:	sub	r4, ip, r0
   23f78:	cmp	r4, lr
   23f7c:	bcc	2406c <flatcc_verify_string_vector_field@@Base+0x190>
   23f80:	cmp	r3, #0
   23f84:	beq	240b8 <flatcc_verify_string_vector_field@@Base+0x1dc>
   23f88:	ldr	r2, [r1, r0]
   23f8c:	add	r2, r0, r2
   23f90:	cmp	r0, r2
   23f94:	bcs	240b0 <flatcc_verify_string_vector_field@@Base+0x1d4>
   23f98:	add	r4, r2, #4
   23f9c:	cmp	ip, r4
   23fa0:	bcc	240b0 <flatcc_verify_string_vector_field@@Base+0x1d4>
   23fa4:	tst	r2, #3
   23fa8:	bne	240b0 <flatcc_verify_string_vector_field@@Base+0x1d4>
   23fac:	ldr	r3, [r1, r2]
   23fb0:	sub	r5, ip, r4
   23fb4:	add	r6, r3, #1
   23fb8:	cmp	r6, r5
   23fbc:	addls	lr, r0, lr
   23fc0:	bhi	24018 <flatcc_verify_string_vector_field@@Base+0x13c>
   23fc4:	add	r3, r1, r3
   23fc8:	add	r0, r0, #4
   23fcc:	ldrb	r3, [r3, r4]
   23fd0:	cmp	r3, #0
   23fd4:	bne	240a4 <flatcc_verify_string_vector_field@@Base+0x1c8>
   23fd8:	cmp	r0, lr
   23fdc:	beq	240b8 <flatcc_verify_string_vector_field@@Base+0x1dc>
   23fe0:	ldr	r2, [r1, r0]
   23fe4:	add	r2, r0, r2
   23fe8:	cmp	r2, r0
   23fec:	add	r4, r2, #4
   23ff0:	bls	240b0 <flatcc_verify_string_vector_field@@Base+0x1d4>
   23ff4:	cmp	ip, r4
   23ff8:	bcc	240b0 <flatcc_verify_string_vector_field@@Base+0x1d4>
   23ffc:	tst	r2, #3
   24000:	sub	r5, ip, r4
   24004:	bne	240b0 <flatcc_verify_string_vector_field@@Base+0x1d4>
   24008:	ldr	r3, [r1, r2]
   2400c:	add	r6, r3, #1
   24010:	cmp	r5, r6
   24014:	bcs	23fc4 <flatcc_verify_string_vector_field@@Base+0xe8>
   24018:	ldr	r3, [r1, r2]
   2401c:	add	r2, r3, #1
   24020:	cmp	r5, r2
   24024:	movcc	r0, #8
   24028:	bcc	2408c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2402c:	add	r3, r1, r3
   24030:	ldrb	r3, [r3, r4]
   24034:	cmp	r3, #0
   24038:	moveq	r0, #0
   2403c:	movne	r0, #7
   24040:	b	2408c <flatcc_verify_string_vector_field@@Base+0x1b0>
   24044:	mov	r0, #16
   24048:	bx	lr
   2404c:	cmp	r2, #0
   24050:	movne	r0, #4
   24054:	moveq	r0, #0
   24058:	bx	lr
   2405c:	mov	r0, #13
   24060:	bx	lr
   24064:	mov	r0, #12
   24068:	bx	lr
   2406c:	ldr	r3, [r1, r2]
   24070:	cmn	r3, #-1073741823	; 0xc0000001
   24074:	movhi	r0, #25
   24078:	bhi	2408c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2407c:	sub	r0, ip, r0
   24080:	cmp	r0, r3, lsl #2
   24084:	movcs	r0, #0
   24088:	movcc	r0, #26
   2408c:	ldrd	r4, [sp]
   24090:	ldr	r6, [sp, #8]
   24094:	add	sp, sp, #12
   24098:	pop	{pc}		; (ldr pc, [sp], #4)
   2409c:	mov	r0, r3
   240a0:	bx	lr
   240a4:	cmp	ip, r4
   240a8:	subcs	r5, ip, r4
   240ac:	bcs	24018 <flatcc_verify_string_vector_field@@Base+0x13c>
   240b0:	mov	r0, #17
   240b4:	b	2408c <flatcc_verify_string_vector_field@@Base+0x1b0>
   240b8:	mov	r0, r3
   240bc:	b	2408c <flatcc_verify_string_vector_field@@Base+0x1b0>

000240c0 <flatcc_verify_table_field@@Base>:
   240c0:	ldrh	ip, [r0, #22]
   240c4:	add	r1, r1, #2
   240c8:	lsl	r1, r1, #1
   240cc:	uxth	r1, r1
   240d0:	cmp	ip, r1
   240d4:	bls	241f4 <flatcc_verify_table_field@@Base+0x134>
   240d8:	ldr	ip, [r0, #12]
   240dc:	ldrh	r1, [ip, r1]
   240e0:	cmp	r1, #0
   240e4:	beq	241f4 <flatcc_verify_table_field@@Base+0x134>
   240e8:	ldrh	r2, [r0, #20]
   240ec:	add	ip, r1, #4
   240f0:	cmp	ip, r2
   240f4:	bhi	24204 <flatcc_verify_table_field@@Base+0x144>
   240f8:	ldr	r2, [r0, #16]
   240fc:	add	r1, r1, r2
   24100:	tst	r1, #3
   24104:	bne	2420c <flatcc_verify_table_field@@Base+0x14c>
   24108:	cmp	r1, #0
   2410c:	beq	24214 <flatcc_verify_table_field@@Base+0x154>
   24110:	ldr	ip, [r0]
   24114:	strd	r4, [sp, #-12]!
   24118:	ldr	r2, [r0, #8]
   2411c:	str	lr, [sp, #8]
   24120:	sub	sp, sp, #28
   24124:	ldr	lr, [r0, #4]
   24128:	ldr	r0, [ip, r1]
   2412c:	sub	r2, r2, #1
   24130:	cmp	r2, #0
   24134:	moveq	r0, #3
   24138:	str	r2, [sp, #8]
   2413c:	beq	241e4 <flatcc_verify_table_field@@Base+0x124>
   24140:	add	r2, r1, r0
   24144:	cmp	r1, r2
   24148:	bcs	241e0 <flatcc_verify_table_field@@Base+0x120>
   2414c:	add	r1, r2, #4
   24150:	cmp	lr, r1
   24154:	bcc	241e0 <flatcc_verify_table_field@@Base+0x120>
   24158:	tst	r2, #3
   2415c:	bne	241e0 <flatcc_verify_table_field@@Base+0x120>
   24160:	str	r2, [sp, #16]
   24164:	ldr	r1, [ip, r2]
   24168:	subs	r1, r2, r1
   2416c:	bmi	2421c <flatcc_verify_table_field@@Base+0x15c>
   24170:	tst	r1, #1
   24174:	bne	2421c <flatcc_verify_table_field@@Base+0x15c>
   24178:	add	r4, r1, #2
   2417c:	cmp	lr, r4
   24180:	movcc	r0, #27
   24184:	bcc	241e4 <flatcc_verify_table_field@@Base+0x124>
   24188:	ldrh	r0, [ip, r1]
   2418c:	add	r5, ip, r1
   24190:	add	r1, r0, r1
   24194:	strh	r0, [sp, #22]
   24198:	cmp	lr, r1
   2419c:	bcc	24224 <flatcc_verify_table_field@@Base+0x164>
   241a0:	tst	r0, #1
   241a4:	bne	24224 <flatcc_verify_table_field@@Base+0x164>
   241a8:	cmp	r0, #3
   241ac:	movls	r0, #28
   241b0:	bls	241e4 <flatcc_verify_table_field@@Base+0x124>
   241b4:	ldrh	r1, [ip, r4]
   241b8:	sub	r2, lr, r2
   241bc:	cmp	r2, r1
   241c0:	strh	r1, [sp, #20]
   241c4:	movcc	r0, #20
   241c8:	bcc	241e4 <flatcc_verify_table_field@@Base+0x124>
   241cc:	mov	r0, sp
   241d0:	stm	sp, {ip, lr}
   241d4:	str	r5, [sp, #12]
   241d8:	blx	r3
   241dc:	b	241e4 <flatcc_verify_table_field@@Base+0x124>
   241e0:	mov	r0, #15
   241e4:	add	sp, sp, #28
   241e8:	ldrd	r4, [sp]
   241ec:	add	sp, sp, #8
   241f0:	pop	{pc}		; (ldr pc, [sp], #4)
   241f4:	cmp	r2, #0
   241f8:	moveq	r0, #0
   241fc:	movne	r0, #4
   24200:	bx	lr
   24204:	mov	r0, #13
   24208:	bx	lr
   2420c:	mov	r0, #12
   24210:	bx	lr
   24214:	mov	r0, r1
   24218:	bx	lr
   2421c:	mov	r0, #29
   24220:	b	241e4 <flatcc_verify_table_field@@Base+0x124>
   24224:	mov	r0, #30
   24228:	b	241e4 <flatcc_verify_table_field@@Base+0x124>

0002422c <flatcc_verify_table_vector_field@@Base>:
   2422c:	ldrh	ip, [r0, #22]
   24230:	add	r1, r1, #2
   24234:	lsl	r1, r1, #1
   24238:	uxth	r1, r1
   2423c:	cmp	ip, r1
   24240:	bls	244b8 <flatcc_verify_table_vector_field@@Base+0x28c>
   24244:	ldr	ip, [r0, #12]
   24248:	ldrh	r1, [ip, r1]
   2424c:	cmp	r1, #0
   24250:	beq	244b8 <flatcc_verify_table_vector_field@@Base+0x28c>
   24254:	ldrh	r2, [r0, #20]
   24258:	add	ip, r1, #4
   2425c:	cmp	ip, r2
   24260:	bhi	244c8 <flatcc_verify_table_vector_field@@Base+0x29c>
   24264:	ldr	r2, [r0, #16]
   24268:	add	r1, r1, r2
   2426c:	tst	r1, #3
   24270:	bne	244e0 <flatcc_verify_table_vector_field@@Base+0x2b4>
   24274:	cmp	r1, #0
   24278:	beq	244c0 <flatcc_verify_table_vector_field@@Base+0x294>
   2427c:	ldr	ip, [r0, #8]
   24280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24284:	strd	r6, [sp, #8]
   24288:	ldr	r6, [r0]
   2428c:	strd	r8, [sp, #16]
   24290:	cmp	ip, #0
   24294:	strd	sl, [sp, #24]
   24298:	str	lr, [sp, #32]
   2429c:	sub	sp, sp, #36	; 0x24
   242a0:	ldr	r2, [r6, r1]
   242a4:	ble	244d8 <flatcc_verify_table_vector_field@@Base+0x2ac>
   242a8:	add	r2, r1, r2
   242ac:	cmp	r1, r2
   242b0:	bcs	24498 <flatcc_verify_table_vector_field@@Base+0x26c>
   242b4:	ldr	r8, [r0, #4]
   242b8:	add	r5, r2, #4
   242bc:	cmp	r8, r5
   242c0:	bcc	24498 <flatcc_verify_table_vector_field@@Base+0x26c>
   242c4:	tst	r5, #3
   242c8:	bne	24498 <flatcc_verify_table_vector_field@@Base+0x26c>
   242cc:	ldr	r1, [r6, r2]
   242d0:	cmn	r1, #-1073741823	; 0xc0000001
   242d4:	bhi	244e8 <flatcc_verify_table_vector_field@@Base+0x2bc>
   242d8:	lsl	r9, r1, #2
   242dc:	sub	r0, r8, r5
   242e0:	cmp	r0, r9
   242e4:	bcc	244e8 <flatcc_verify_table_vector_field@@Base+0x2bc>
   242e8:	cmp	r1, #0
   242ec:	beq	24508 <flatcc_verify_table_vector_field@@Base+0x2dc>
   242f0:	sub	r7, ip, #2
   242f4:	add	fp, r6, r5
   242f8:	ldr	r1, [r6, r5]
   242fc:	cmp	r7, #0
   24300:	str	r7, [sp, #16]
   24304:	beq	244d8 <flatcc_verify_table_vector_field@@Base+0x2ac>
   24308:	add	r1, r5, r1
   2430c:	mov	sl, r3
   24310:	cmp	r5, r1
   24314:	bcs	24528 <flatcc_verify_table_vector_field@@Base+0x2fc>
   24318:	add	r3, r1, #4
   2431c:	cmp	r8, r3
   24320:	bcc	24528 <flatcc_verify_table_vector_field@@Base+0x2fc>
   24324:	tst	r1, #3
   24328:	bne	24528 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2432c:	movw	r3, #65532	; 0xfffc
   24330:	movt	r3, #65535	; 0xffff
   24334:	sub	r3, r3, r2
   24338:	add	r2, r2, #8
   2433c:	add	r9, r5, r9
   24340:	add	fp, fp, r3
   24344:	add	r4, r6, r2
   24348:	str	r1, [sp, #24]
   2434c:	add	r3, fp, r5
   24350:	ldr	r2, [r6, r1]
   24354:	subs	r2, r1, r2
   24358:	bmi	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   2435c:	tst	r2, #1
   24360:	bne	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24364:	add	lr, r2, #2
   24368:	cmp	r8, lr
   2436c:	bcc	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24370:	ldrh	r0, [r6, r2]
   24374:	add	ip, r6, r2
   24378:	add	r2, r0, r2
   2437c:	strh	r0, [sp, #30]
   24380:	cmp	r8, r2
   24384:	bcc	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24388:	tst	r0, #1
   2438c:	bne	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24390:	cmp	r0, #3
   24394:	bls	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24398:	ldrh	r2, [r6, lr]
   2439c:	sub	r1, r8, r1
   243a0:	cmp	r1, r2
   243a4:	strh	r2, [sp, #28]
   243a8:	bcc	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   243ac:	add	r0, sp, #8
   243b0:	stmib	sp, {r3, r6, r8}
   243b4:	str	ip, [sp, #20]
   243b8:	blx	sl
   243bc:	cmp	r0, #0
   243c0:	ldr	r3, [sp, #4]
   243c4:	bne	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   243c8:	add	r5, r5, #4
   243cc:	cmp	r5, r9
   243d0:	beq	24508 <flatcc_verify_table_vector_field@@Base+0x2dc>
   243d4:	mov	r3, r4
   243d8:	ldr	r1, [r4], #4
   243dc:	str	r7, [sp, #16]
   243e0:	add	r1, r1, r5
   243e4:	cmp	r5, r1
   243e8:	bcc	24510 <flatcc_verify_table_vector_field@@Base+0x2e4>
   243ec:	ldr	r3, [r3]
   243f0:	str	r7, [sp, #16]
   243f4:	add	r3, r5, r3
   243f8:	cmp	r3, r5
   243fc:	bls	24530 <flatcc_verify_table_vector_field@@Base+0x304>
   24400:	add	r2, r3, #4
   24404:	cmp	r8, r2
   24408:	bcc	24530 <flatcc_verify_table_vector_field@@Base+0x304>
   2440c:	tst	r3, #3
   24410:	bne	24530 <flatcc_verify_table_vector_field@@Base+0x304>
   24414:	str	r3, [sp, #24]
   24418:	ldr	r2, [r6, r3]
   2441c:	subs	r2, r3, r2
   24420:	bmi	24538 <flatcc_verify_table_vector_field@@Base+0x30c>
   24424:	tst	r2, #1
   24428:	bne	24538 <flatcc_verify_table_vector_field@@Base+0x30c>
   2442c:	add	r0, r2, #2
   24430:	cmp	r8, r0
   24434:	movcc	r0, #27
   24438:	bcc	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   2443c:	ldrh	r1, [r6, r2]
   24440:	add	ip, r6, r2
   24444:	add	r2, r1, r2
   24448:	strh	r1, [sp, #30]
   2444c:	cmp	r8, r2
   24450:	bcc	24540 <flatcc_verify_table_vector_field@@Base+0x314>
   24454:	tst	r1, #1
   24458:	bne	24540 <flatcc_verify_table_vector_field@@Base+0x314>
   2445c:	cmp	r1, #3
   24460:	movls	r0, #28
   24464:	bls	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24468:	ldrh	r2, [r6, r0]
   2446c:	sub	r3, r8, r3
   24470:	cmp	r3, r2
   24474:	strh	r2, [sp, #28]
   24478:	movcc	r0, #20
   2447c:	bcc	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24480:	add	r0, sp, #8
   24484:	str	r6, [sp, #8]
   24488:	str	r8, [sp, #12]
   2448c:	str	ip, [sp, #20]
   24490:	blx	sl
   24494:	b	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24498:	mov	r0, #16
   2449c:	add	sp, sp, #36	; 0x24
   244a0:	ldrd	r4, [sp]
   244a4:	ldrd	r6, [sp, #8]
   244a8:	ldrd	r8, [sp, #16]
   244ac:	ldrd	sl, [sp, #24]
   244b0:	add	sp, sp, #32
   244b4:	pop	{pc}		; (ldr pc, [sp], #4)
   244b8:	cmp	r2, #0
   244bc:	bne	244d0 <flatcc_verify_table_vector_field@@Base+0x2a4>
   244c0:	mov	r0, #0
   244c4:	bx	lr
   244c8:	mov	r0, #13
   244cc:	bx	lr
   244d0:	mov	r0, #4
   244d4:	bx	lr
   244d8:	mov	r0, #3
   244dc:	b	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   244e0:	mov	r0, #12
   244e4:	bx	lr
   244e8:	ldr	r3, [r6, r2]
   244ec:	cmn	r3, #-1073741823	; 0xc0000001
   244f0:	movhi	r0, #25
   244f4:	bhi	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   244f8:	sub	r5, r8, r5
   244fc:	cmp	r5, r3, lsl #2
   24500:	movcc	r0, #26
   24504:	bcc	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24508:	mov	r0, #0
   2450c:	b	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24510:	add	r2, r1, #4
   24514:	cmp	r8, r2
   24518:	bcc	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   2451c:	tst	r1, #3
   24520:	beq	24348 <flatcc_verify_table_vector_field@@Base+0x11c>
   24524:	b	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24528:	mov	r3, fp
   2452c:	b	243ec <flatcc_verify_table_vector_field@@Base+0x1c0>
   24530:	mov	r0, #15
   24534:	b	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24538:	mov	r0, #29
   2453c:	b	2449c <flatcc_verify_table_vector_field@@Base+0x270>
   24540:	mov	r0, #30
   24544:	b	2449c <flatcc_verify_table_vector_field@@Base+0x270>

00024548 <flatcc_verify_union_table@@Base>:
   24548:	strd	r4, [sp, #-12]!
   2454c:	ldr	r3, [r0, #8]
   24550:	ldr	ip, [r0, #4]
   24554:	ldr	r2, [r0, #16]
   24558:	sub	r3, r3, #1
   2455c:	str	lr, [sp, #8]
   24560:	sub	sp, sp, #28
   24564:	cmp	r3, #0
   24568:	ldr	lr, [r0]
   2456c:	str	r3, [sp, #8]
   24570:	ldr	r3, [r0, #20]
   24574:	moveq	r0, #3
   24578:	beq	2458c <flatcc_verify_union_table@@Base+0x44>
   2457c:	add	r3, r2, r3
   24580:	cmp	r2, r3
   24584:	bcc	2459c <flatcc_verify_union_table@@Base+0x54>
   24588:	mov	r0, #15
   2458c:	add	sp, sp, #28
   24590:	ldrd	r4, [sp]
   24594:	add	sp, sp, #8
   24598:	pop	{pc}		; (ldr pc, [sp], #4)
   2459c:	add	r2, r3, #4
   245a0:	cmp	ip, r2
   245a4:	bcc	24588 <flatcc_verify_union_table@@Base+0x40>
   245a8:	tst	r3, #3
   245ac:	bne	24588 <flatcc_verify_union_table@@Base+0x40>
   245b0:	str	r3, [sp, #16]
   245b4:	ldr	r2, [lr, r3]
   245b8:	subs	r2, r3, r2
   245bc:	bmi	2463c <flatcc_verify_union_table@@Base+0xf4>
   245c0:	tst	r2, #1
   245c4:	bne	2463c <flatcc_verify_union_table@@Base+0xf4>
   245c8:	add	r4, r2, #2
   245cc:	cmp	ip, r4
   245d0:	movcc	r0, #27
   245d4:	bcc	2458c <flatcc_verify_union_table@@Base+0x44>
   245d8:	ldrh	r0, [lr, r2]
   245dc:	add	r5, lr, r2
   245e0:	add	r2, r0, r2
   245e4:	strh	r0, [sp, #22]
   245e8:	cmp	ip, r2
   245ec:	bcc	24634 <flatcc_verify_union_table@@Base+0xec>
   245f0:	tst	r0, #1
   245f4:	bne	24634 <flatcc_verify_union_table@@Base+0xec>
   245f8:	cmp	r0, #3
   245fc:	movls	r0, #28
   24600:	bls	2458c <flatcc_verify_union_table@@Base+0x44>
   24604:	ldrh	r2, [lr, r4]
   24608:	sub	r3, ip, r3
   2460c:	cmp	r3, r2
   24610:	strh	r2, [sp, #20]
   24614:	movcc	r0, #20
   24618:	bcc	2458c <flatcc_verify_union_table@@Base+0x44>
   2461c:	mov	r0, sp
   24620:	str	lr, [sp]
   24624:	str	ip, [sp, #4]
   24628:	str	r5, [sp, #12]
   2462c:	blx	r1
   24630:	b	2458c <flatcc_verify_union_table@@Base+0x44>
   24634:	mov	r0, #30
   24638:	b	2458c <flatcc_verify_union_table@@Base+0x44>
   2463c:	mov	r0, #29
   24640:	b	2458c <flatcc_verify_union_table@@Base+0x44>

00024644 <flatcc_verify_union_struct@@Base>:
   24644:	push	{lr}		; (str lr, [sp, #-4]!)
   24648:	ldr	ip, [r0, #20]
   2464c:	ldr	lr, [r0, #4]
   24650:	ldr	r3, [r0, #16]
   24654:	cmp	ip, #0
   24658:	beq	2468c <flatcc_verify_union_struct@@Base+0x48>
   2465c:	add	r3, r3, ip
   24660:	cmp	lr, r3
   24664:	bcc	2468c <flatcc_verify_union_struct@@Base+0x48>
   24668:	adds	r1, r1, r3
   2466c:	bcs	2469c <flatcc_verify_union_struct@@Base+0x58>
   24670:	cmp	lr, r1
   24674:	bcc	24694 <flatcc_verify_union_struct@@Base+0x50>
   24678:	sub	r2, r2, #1
   2467c:	tst	r2, r3
   24680:	moveq	r0, #0
   24684:	movne	r0, #11
   24688:	pop	{pc}		; (ldr pc, [sp], #4)
   2468c:	mov	r0, #18
   24690:	pop	{pc}		; (ldr pc, [sp], #4)
   24694:	mov	r0, #9
   24698:	pop	{pc}		; (ldr pc, [sp], #4)
   2469c:	mov	r0, #10
   246a0:	b	24688 <flatcc_verify_union_struct@@Base+0x44>

000246a4 <flatcc_verify_union_string@@Base>:
   246a4:	ldrd	r2, [r0, #16]
   246a8:	add	r3, r2, r3
   246ac:	cmp	r2, r3
   246b0:	bcs	246fc <flatcc_verify_union_string@@Base+0x58>
   246b4:	ldr	r2, [r0, #4]
   246b8:	add	r1, r3, #4
   246bc:	cmp	r2, r1
   246c0:	bcc	246fc <flatcc_verify_union_string@@Base+0x58>
   246c4:	tst	r3, #3
   246c8:	bne	246fc <flatcc_verify_union_string@@Base+0x58>
   246cc:	ldr	r0, [r0]
   246d0:	sub	r2, r2, r1
   246d4:	ldr	r3, [r0, r3]
   246d8:	add	ip, r3, #1
   246dc:	cmp	r2, ip
   246e0:	bcc	24704 <flatcc_verify_union_string@@Base+0x60>
   246e4:	add	r1, r0, r1
   246e8:	ldrb	r3, [r1, r3]
   246ec:	cmp	r3, #0
   246f0:	moveq	r0, #0
   246f4:	movne	r0, #7
   246f8:	bx	lr
   246fc:	mov	r0, #17
   24700:	bx	lr
   24704:	mov	r0, #8
   24708:	bx	lr

0002470c <flatcc_verify_buffer_header@@Base>:
   2470c:	tst	r0, #3
   24710:	bne	2477c <flatcc_verify_buffer_header@@Base+0x70>
   24714:	cmn	r1, #9
   24718:	bhi	24784 <flatcc_verify_buffer_header@@Base+0x78>
   2471c:	cmp	r1, #7
   24720:	bls	24774 <flatcc_verify_buffer_header@@Base+0x68>
   24724:	cmp	r2, #0
   24728:	beq	2478c <flatcc_verify_buffer_header@@Base+0x80>
   2472c:	mov	r1, r2
   24730:	mov	r2, #4
   24734:	str	r4, [sp, #-8]!
   24738:	str	lr, [sp, #4]
   2473c:	sub	sp, sp, #8
   24740:	mov	r4, r0
   24744:	add	r0, sp, r2
   24748:	bl	12a28 <strncpy@plt>
   2474c:	ldr	r2, [r4, #4]
   24750:	ldr	r3, [sp, #4]
   24754:	cmp	r3, #0
   24758:	cmpne	r2, r3
   2475c:	movne	r0, #2
   24760:	moveq	r0, #0
   24764:	add	sp, sp, #8
   24768:	ldr	r4, [sp]
   2476c:	add	sp, sp, #4
   24770:	pop	{pc}		; (ldr pc, [sp], #4)
   24774:	mov	r0, #1
   24778:	bx	lr
   2477c:	mov	r0, #5
   24780:	bx	lr
   24784:	mov	r0, #6
   24788:	bx	lr
   2478c:	mov	r0, #0
   24790:	bx	lr

00024794 <flatcc_verify_typed_buffer_header@@Base>:
   24794:	tst	r0, #3
   24798:	bne	247d0 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2479c:	cmn	r1, #9
   247a0:	bhi	247e0 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   247a4:	cmp	r1, #7
   247a8:	bls	247c8 <flatcc_verify_typed_buffer_header@@Base+0x34>
   247ac:	cmp	r2, #0
   247b0:	beq	247d8 <flatcc_verify_typed_buffer_header@@Base+0x44>
   247b4:	ldr	r0, [r0, #4]
   247b8:	cmp	r2, r0
   247bc:	movne	r0, #2
   247c0:	moveq	r0, #0
   247c4:	bx	lr
   247c8:	mov	r0, #1
   247cc:	bx	lr
   247d0:	mov	r0, #5
   247d4:	bx	lr
   247d8:	mov	r0, r2
   247dc:	bx	lr
   247e0:	mov	r0, #6
   247e4:	bx	lr

000247e8 <flatcc_verify_struct_as_root@@Base>:
   247e8:	tst	r0, #3
   247ec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   247f0:	strd	r6, [sp, #8]
   247f4:	movne	r0, #5
   247f8:	strd	r8, [sp, #16]
   247fc:	str	lr, [sp, #24]
   24800:	sub	sp, sp, #12
   24804:	ldrh	r5, [sp, #40]	; 0x28
   24808:	bne	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   2480c:	cmn	r1, #9
   24810:	movhi	r0, #6
   24814:	bhi	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   24818:	cmp	r1, #7
   2481c:	movls	r0, #1
   24820:	bls	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   24824:	cmp	r2, #0
   24828:	mov	r7, r3
   2482c:	mov	r8, r2
   24830:	mov	r6, r1
   24834:	mov	r4, r0
   24838:	beq	24860 <flatcc_verify_struct_as_root@@Base+0x78>
   2483c:	mov	r2, #4
   24840:	mov	r1, r8
   24844:	add	r0, sp, r2
   24848:	bl	12a28 <strncpy@plt>
   2484c:	ldr	r9, [r4, #4]
   24850:	ldr	r3, [sp, #4]
   24854:	cmp	r3, r9
   24858:	cmpne	r3, #0
   2485c:	bne	248cc <flatcc_verify_struct_as_root@@Base+0xe4>
   24860:	ldr	r2, [r4]
   24864:	cmp	r6, r2
   24868:	movcs	r0, #0
   2486c:	movcc	r0, #1
   24870:	cmp	r2, #0
   24874:	moveq	r0, #1
   24878:	cmp	r0, #0
   2487c:	bne	248bc <flatcc_verify_struct_as_root@@Base+0xd4>
   24880:	adds	r3, r7, r2
   24884:	bcs	248f4 <flatcc_verify_struct_as_root@@Base+0x10c>
   24888:	cmp	r6, r3
   2488c:	bcc	248c4 <flatcc_verify_struct_as_root@@Base+0xdc>
   24890:	sub	r5, r5, #1
   24894:	tst	r5, r2
   24898:	movne	r0, #11
   2489c:	bne	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   248a0:	mov	r0, #0
   248a4:	add	sp, sp, #12
   248a8:	ldrd	r4, [sp]
   248ac:	ldrd	r6, [sp, #8]
   248b0:	ldrd	r8, [sp, #16]
   248b4:	add	sp, sp, #24
   248b8:	pop	{pc}		; (ldr pc, [sp], #4)
   248bc:	mov	r0, #18
   248c0:	b	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   248c4:	mov	r0, #9
   248c8:	b	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   248cc:	mov	r1, r8
   248d0:	add	r0, sp, #4
   248d4:	mov	r2, #4
   248d8:	bl	12a28 <strncpy@plt>
   248dc:	ldr	r3, [sp, #4]
   248e0:	cmp	r9, r3
   248e4:	cmpne	r3, #0
   248e8:	beq	248a0 <flatcc_verify_struct_as_root@@Base+0xb8>
   248ec:	mov	r0, #2
   248f0:	b	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>
   248f4:	mov	r0, #10
   248f8:	b	248a4 <flatcc_verify_struct_as_root@@Base+0xbc>

000248fc <flatcc_verify_struct_as_typed_root@@Base>:
   248fc:	tst	r0, #3
   24900:	push	{lr}		; (str lr, [sp, #-4]!)
   24904:	movne	r0, #5
   24908:	ldrh	ip, [sp, #4]
   2490c:	bne	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   24910:	cmn	r1, #9
   24914:	movhi	r0, #6
   24918:	bhi	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2491c:	cmp	r1, #7
   24920:	movls	r0, #1
   24924:	bls	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   24928:	cmp	r2, #0
   2492c:	beq	24940 <flatcc_verify_struct_as_typed_root@@Base+0x44>
   24930:	ldr	lr, [r0, #4]
   24934:	cmp	r2, lr
   24938:	movne	r0, #2
   2493c:	bne	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   24940:	ldr	r2, [r0]
   24944:	cmp	r1, r2
   24948:	movcs	r0, #0
   2494c:	movcc	r0, #1
   24950:	cmp	r2, #0
   24954:	moveq	r0, #1
   24958:	cmp	r0, #0
   2495c:	movne	r0, #18
   24960:	bne	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   24964:	adds	r3, r3, r2
   24968:	bcs	24990 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   2496c:	cmp	r1, r3
   24970:	bcc	24988 <flatcc_verify_struct_as_typed_root@@Base+0x8c>
   24974:	sub	ip, ip, #1
   24978:	tst	ip, r2
   2497c:	moveq	r0, #0
   24980:	movne	r0, #11
   24984:	pop	{pc}		; (ldr pc, [sp], #4)
   24988:	mov	r0, #9
   2498c:	b	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   24990:	mov	r0, #10
   24994:	b	24984 <flatcc_verify_struct_as_typed_root@@Base+0x88>

00024998 <flatcc_verify_table_as_root@@Base>:
   24998:	tst	r0, #3
   2499c:	bne	24acc <flatcc_verify_table_as_root@@Base+0x134>
   249a0:	cmn	r1, #9
   249a4:	bhi	24afc <flatcc_verify_table_as_root@@Base+0x164>
   249a8:	cmp	r1, #7
   249ac:	bls	24aa8 <flatcc_verify_table_as_root@@Base+0x110>
   249b0:	cmp	r2, #0
   249b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   249b8:	mov	r4, r2
   249bc:	mov	r5, r0
   249c0:	strd	r6, [sp, #8]
   249c4:	mov	r7, r3
   249c8:	mov	r6, r1
   249cc:	str	r8, [sp, #16]
   249d0:	str	lr, [sp, #20]
   249d4:	sub	sp, sp, #24
   249d8:	beq	24a00 <flatcc_verify_table_as_root@@Base+0x68>
   249dc:	mov	r2, #4
   249e0:	mov	r0, sp
   249e4:	mov	r1, r4
   249e8:	bl	12a28 <strncpy@plt>
   249ec:	ldr	r3, [sp]
   249f0:	ldr	r8, [r5, #4]
   249f4:	cmp	r3, r8
   249f8:	cmpne	r3, #0
   249fc:	bne	24ad4 <flatcc_verify_table_as_root@@Base+0x13c>
   24a00:	ldr	r2, [r5]
   24a04:	mov	r3, #99	; 0x63
   24a08:	str	r3, [sp, #8]
   24a0c:	cmp	r2, #0
   24a10:	beq	24ab0 <flatcc_verify_table_as_root@@Base+0x118>
   24a14:	add	r3, r2, #4
   24a18:	cmp	r6, r3
   24a1c:	bcc	24ab0 <flatcc_verify_table_as_root@@Base+0x118>
   24a20:	tst	r2, #3
   24a24:	bne	24ab0 <flatcc_verify_table_as_root@@Base+0x118>
   24a28:	ldr	r3, [r5, r2]
   24a2c:	str	r2, [sp, #16]
   24a30:	subs	r3, r2, r3
   24a34:	bmi	24b04 <flatcc_verify_table_as_root@@Base+0x16c>
   24a38:	tst	r3, #1
   24a3c:	bne	24b04 <flatcc_verify_table_as_root@@Base+0x16c>
   24a40:	add	r0, r3, #2
   24a44:	cmp	r6, r0
   24a48:	movcc	r0, #27
   24a4c:	bcc	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>
   24a50:	ldrh	r1, [r5, r3]
   24a54:	add	ip, r5, r3
   24a58:	add	r3, r1, r3
   24a5c:	strh	r1, [sp, #22]
   24a60:	cmp	r6, r3
   24a64:	bcc	24b0c <flatcc_verify_table_as_root@@Base+0x174>
   24a68:	tst	r1, #1
   24a6c:	bne	24b0c <flatcc_verify_table_as_root@@Base+0x174>
   24a70:	cmp	r1, #3
   24a74:	movls	r0, #28
   24a78:	bls	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>
   24a7c:	ldrh	r3, [r5, r0]
   24a80:	sub	r2, r6, r2
   24a84:	cmp	r2, r3
   24a88:	strh	r3, [sp, #20]
   24a8c:	movcc	r0, #20
   24a90:	bcc	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>
   24a94:	mov	r0, sp
   24a98:	stm	sp, {r5, r6}
   24a9c:	str	ip, [sp, #12]
   24aa0:	blx	r7
   24aa4:	b	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>
   24aa8:	mov	r0, #1
   24aac:	bx	lr
   24ab0:	mov	r0, #15
   24ab4:	add	sp, sp, #24
   24ab8:	ldrd	r4, [sp]
   24abc:	ldrd	r6, [sp, #8]
   24ac0:	ldr	r8, [sp, #16]
   24ac4:	add	sp, sp, #20
   24ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   24acc:	mov	r0, #5
   24ad0:	bx	lr
   24ad4:	mov	r1, r4
   24ad8:	mov	r0, sp
   24adc:	mov	r2, #4
   24ae0:	bl	12a28 <strncpy@plt>
   24ae4:	ldr	r3, [sp]
   24ae8:	cmp	r8, r3
   24aec:	cmpne	r3, #0
   24af0:	moveq	r0, #0
   24af4:	movne	r0, #2
   24af8:	b	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>
   24afc:	mov	r0, #6
   24b00:	bx	lr
   24b04:	mov	r0, #29
   24b08:	b	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>
   24b0c:	mov	r0, #30
   24b10:	b	24ab4 <flatcc_verify_table_as_root@@Base+0x11c>

00024b14 <flatcc_verify_table_as_typed_root@@Base>:
   24b14:	tst	r0, #3
   24b18:	bne	24c04 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   24b1c:	cmn	r1, #9
   24b20:	bhi	24c20 <flatcc_verify_table_as_typed_root@@Base+0x10c>
   24b24:	cmp	r1, #7
   24b28:	bls	24bfc <flatcc_verify_table_as_typed_root@@Base+0xe8>
   24b2c:	cmp	r2, #0
   24b30:	beq	24b40 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   24b34:	ldr	ip, [r0, #4]
   24b38:	cmp	r2, ip
   24b3c:	bne	24c28 <flatcc_verify_table_as_typed_root@@Base+0x114>
   24b40:	ldr	r2, [r0]
   24b44:	mov	ip, #99	; 0x63
   24b48:	strd	r4, [sp, #-12]!
   24b4c:	str	lr, [sp, #8]
   24b50:	sub	sp, sp, #28
   24b54:	str	ip, [sp, #8]
   24b58:	cmp	r2, #0
   24b5c:	beq	24c0c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   24b60:	add	ip, r2, #4
   24b64:	cmp	r1, ip
   24b68:	bcc	24c0c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   24b6c:	tst	r2, #3
   24b70:	bne	24c0c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   24b74:	ldr	ip, [r0, r2]
   24b78:	str	r2, [sp, #16]
   24b7c:	subs	ip, r2, ip
   24b80:	bmi	24c30 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   24b84:	tst	ip, #1
   24b88:	bne	24c30 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   24b8c:	add	r4, ip, #2
   24b90:	cmp	r1, r4
   24b94:	movcc	r0, #27
   24b98:	bcc	24c10 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24b9c:	ldrh	lr, [r0, ip]
   24ba0:	add	r5, r0, ip
   24ba4:	add	ip, lr, ip
   24ba8:	strh	lr, [sp, #22]
   24bac:	cmp	r1, ip
   24bb0:	bcc	24c38 <flatcc_verify_table_as_typed_root@@Base+0x124>
   24bb4:	tst	lr, #1
   24bb8:	bne	24c38 <flatcc_verify_table_as_typed_root@@Base+0x124>
   24bbc:	cmp	lr, #3
   24bc0:	movls	r0, #28
   24bc4:	bls	24c10 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24bc8:	ldrh	ip, [r0, r4]
   24bcc:	sub	r2, r1, r2
   24bd0:	cmp	r2, ip
   24bd4:	strh	ip, [sp, #20]
   24bd8:	movcc	r0, #20
   24bdc:	bcc	24c10 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24be0:	mov	r2, r0
   24be4:	mov	r0, sp
   24be8:	str	r2, [sp]
   24bec:	str	r1, [sp, #4]
   24bf0:	str	r5, [sp, #12]
   24bf4:	blx	r3
   24bf8:	b	24c10 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24bfc:	mov	r0, #1
   24c00:	bx	lr
   24c04:	mov	r0, #5
   24c08:	bx	lr
   24c0c:	mov	r0, #15
   24c10:	add	sp, sp, #28
   24c14:	ldrd	r4, [sp]
   24c18:	add	sp, sp, #8
   24c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   24c20:	mov	r0, #6
   24c24:	bx	lr
   24c28:	mov	r0, #2
   24c2c:	bx	lr
   24c30:	mov	r0, #29
   24c34:	b	24c10 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24c38:	mov	r0, #30
   24c3c:	b	24c10 <flatcc_verify_table_as_typed_root@@Base+0xfc>

00024c40 <flatcc_verify_struct_as_nested_root@@Base>:
   24c40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24c44:	add	ip, r1, #2
   24c48:	lsl	ip, ip, #1
   24c4c:	strd	r6, [sp, #8]
   24c50:	str	lr, [sp, #20]
   24c54:	ldrh	lr, [r0, #22]
   24c58:	uxth	ip, ip
   24c5c:	str	r8, [sp, #16]
   24c60:	sub	sp, sp, #8
   24c64:	ldrh	r4, [sp, #36]	; 0x24
   24c68:	cmp	lr, ip
   24c6c:	bls	24dbc <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   24c70:	ldr	r1, [r0, #12]
   24c74:	ldrh	ip, [r1, ip]
   24c78:	cmp	ip, #0
   24c7c:	beq	24dbc <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   24c80:	ldrh	r2, [r0, #20]
   24c84:	add	r1, ip, #4
   24c88:	cmp	r1, r2
   24c8c:	movhi	r0, #13
   24c90:	bhi	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24c94:	ldr	r2, [r0, #16]
   24c98:	add	r2, ip, r2
   24c9c:	tst	r2, #3
   24ca0:	movne	r0, #12
   24ca4:	bne	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24ca8:	cmp	r2, #0
   24cac:	ldr	ip, [r0]
   24cb0:	beq	24cf4 <flatcc_verify_struct_as_nested_root@@Base+0xb4>
   24cb4:	ldr	lr, [ip, r2]
   24cb8:	add	lr, r2, lr
   24cbc:	cmp	r2, lr
   24cc0:	bcs	24db4 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   24cc4:	ldr	r1, [r0, #4]
   24cc8:	add	r0, lr, #4
   24ccc:	cmp	r1, r0
   24cd0:	bcc	24db4 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   24cd4:	tst	r0, #3
   24cd8:	bne	24db4 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   24cdc:	ldr	lr, [ip, lr]
   24ce0:	sub	r1, r1, r0
   24ce4:	mul	r0, lr, r4
   24ce8:	cmp	r1, r0
   24cec:	movcc	r0, #26
   24cf0:	bcc	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24cf4:	adds	r1, ip, r2
   24cf8:	beq	24dc4 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   24cfc:	ldr	r2, [ip, r2]
   24d00:	add	r7, r1, r2
   24d04:	tst	r7, #3
   24d08:	movne	r0, #5
   24d0c:	bne	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24d10:	ldr	r6, [r1, r2]
   24d14:	cmn	r6, #9
   24d18:	movhi	r0, #6
   24d1c:	bhi	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24d20:	cmp	r6, #7
   24d24:	movls	r0, #1
   24d28:	bls	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24d2c:	cmp	r3, #0
   24d30:	beq	24d5c <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   24d34:	mov	r2, #4
   24d38:	mov	r1, r3
   24d3c:	add	r0, sp, r2
   24d40:	mov	r5, r3
   24d44:	bl	12a28 <strncpy@plt>
   24d48:	ldr	r3, [sp, #4]
   24d4c:	ldr	r8, [r7, #8]
   24d50:	cmp	r3, r8
   24d54:	cmpne	r3, #0
   24d58:	bne	24de4 <flatcc_verify_struct_as_nested_root@@Base+0x1a4>
   24d5c:	ldr	r2, [r7, #4]
   24d60:	clz	r3, r2
   24d64:	lsr	r3, r3, #5
   24d68:	cmp	r6, r2
   24d6c:	orrcc	r3, r3, #1
   24d70:	cmp	r3, #0
   24d74:	bne	24dd4 <flatcc_verify_struct_as_nested_root@@Base+0x194>
   24d78:	ldr	r3, [sp, #32]
   24d7c:	adds	r3, r3, r2
   24d80:	bcs	24e0c <flatcc_verify_struct_as_nested_root@@Base+0x1cc>
   24d84:	cmp	r6, r3
   24d88:	bcc	24ddc <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   24d8c:	sub	r4, r4, #1
   24d90:	tst	r4, r2
   24d94:	movne	r0, #11
   24d98:	beq	24dc4 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   24d9c:	add	sp, sp, #8
   24da0:	ldrd	r4, [sp]
   24da4:	ldrd	r6, [sp, #8]
   24da8:	ldr	r8, [sp, #16]
   24dac:	add	sp, sp, #20
   24db0:	pop	{pc}		; (ldr pc, [sp], #4)
   24db4:	mov	r0, #16
   24db8:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24dbc:	cmp	r2, #0
   24dc0:	bne	24dcc <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   24dc4:	mov	r0, #0
   24dc8:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24dcc:	mov	r0, #4
   24dd0:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24dd4:	mov	r0, #18
   24dd8:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24ddc:	mov	r0, #9
   24de0:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24de4:	mov	r1, r5
   24de8:	add	r0, sp, #4
   24dec:	mov	r2, #4
   24df0:	bl	12a28 <strncpy@plt>
   24df4:	ldr	r3, [sp, #4]
   24df8:	cmp	r8, r3
   24dfc:	cmpne	r3, #0
   24e00:	beq	24dc4 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   24e04:	mov	r0, #2
   24e08:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   24e0c:	mov	r0, #10
   24e10:	b	24d9c <flatcc_verify_struct_as_nested_root@@Base+0x15c>

00024e14 <flatcc_verify_table_as_nested_root@@Base>:
   24e14:	strd	r4, [sp, #-28]!	; 0xffffffe4
   24e18:	add	ip, r1, #2
   24e1c:	lsl	ip, ip, #1
   24e20:	strd	r6, [sp, #8]
   24e24:	str	lr, [sp, #24]
   24e28:	ldrh	lr, [r0, #22]
   24e2c:	uxth	ip, ip
   24e30:	strd	r8, [sp, #16]
   24e34:	sub	sp, sp, #28
   24e38:	ldrh	r4, [sp, #56]	; 0x38
   24e3c:	cmp	lr, ip
   24e40:	bls	2500c <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   24e44:	ldr	r1, [r0, #12]
   24e48:	ldrh	ip, [r1, ip]
   24e4c:	cmp	ip, #0
   24e50:	beq	2500c <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   24e54:	ldrh	r2, [r0, #20]
   24e58:	add	r1, ip, #4
   24e5c:	cmp	r1, r2
   24e60:	movhi	r0, #13
   24e64:	bhi	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24e68:	ldr	r2, [r0, #16]
   24e6c:	add	r2, ip, r2
   24e70:	tst	r2, #3
   24e74:	movne	r0, #12
   24e78:	bne	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24e7c:	cmp	r2, #0
   24e80:	ldr	ip, [r0]
   24e84:	beq	24ec8 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   24e88:	ldr	lr, [ip, r2]
   24e8c:	add	lr, r2, lr
   24e90:	cmp	r2, lr
   24e94:	bcs	25004 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   24e98:	ldr	r1, [r0, #4]
   24e9c:	add	r5, lr, #4
   24ea0:	cmp	r1, r5
   24ea4:	bcc	25004 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   24ea8:	tst	r5, #3
   24eac:	bne	25004 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   24eb0:	ldr	lr, [ip, lr]
   24eb4:	sub	r1, r1, r5
   24eb8:	mul	r4, lr, r4
   24ebc:	cmp	r1, r4
   24ec0:	movcc	r0, #26
   24ec4:	bcc	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24ec8:	adds	r1, ip, r2
   24ecc:	beq	25014 <flatcc_verify_table_as_nested_root@@Base+0x200>
   24ed0:	ldr	r2, [ip, r2]
   24ed4:	add	r6, r1, r2
   24ed8:	add	r7, r6, #4
   24edc:	tst	r7, #3
   24ee0:	movne	r0, #5
   24ee4:	bne	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24ee8:	ldr	r8, [r1, r2]
   24eec:	cmn	r8, #9
   24ef0:	movhi	r0, #6
   24ef4:	bhi	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24ef8:	cmp	r8, #7
   24efc:	movls	r0, #1
   24f00:	bls	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24f04:	cmp	r3, #0
   24f08:	mov	r5, r3
   24f0c:	mov	r4, r0
   24f10:	beq	24f38 <flatcc_verify_table_as_nested_root@@Base+0x124>
   24f14:	mov	r1, r3
   24f18:	mov	r2, #4
   24f1c:	mov	r0, sp
   24f20:	bl	12a28 <strncpy@plt>
   24f24:	ldr	r3, [sp]
   24f28:	ldr	r9, [r6, #8]
   24f2c:	cmp	r3, r9
   24f30:	cmpne	r3, #0
   24f34:	bne	25034 <flatcc_verify_table_as_nested_root@@Base+0x220>
   24f38:	ldr	r3, [r4, #8]
   24f3c:	ldr	r2, [r6, #4]
   24f40:	sub	r3, r3, #1
   24f44:	cmp	r3, #0
   24f48:	str	r3, [sp, #8]
   24f4c:	beq	2502c <flatcc_verify_table_as_nested_root@@Base+0x218>
   24f50:	cmp	r2, #0
   24f54:	beq	2501c <flatcc_verify_table_as_nested_root@@Base+0x208>
   24f58:	add	r3, r2, #4
   24f5c:	cmp	r8, r3
   24f60:	bcc	2501c <flatcc_verify_table_as_nested_root@@Base+0x208>
   24f64:	tst	r2, #3
   24f68:	bne	2501c <flatcc_verify_table_as_nested_root@@Base+0x208>
   24f6c:	str	r2, [sp, #16]
   24f70:	ldr	r3, [r7, r2]
   24f74:	subs	r3, r2, r3
   24f78:	bmi	2505c <flatcc_verify_table_as_nested_root@@Base+0x248>
   24f7c:	tst	r3, #1
   24f80:	bne	2505c <flatcc_verify_table_as_nested_root@@Base+0x248>
   24f84:	add	r0, r3, #2
   24f88:	cmp	r8, r0
   24f8c:	movcc	r0, #27
   24f90:	bcc	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24f94:	ldrh	r1, [r7, r3]
   24f98:	add	ip, r7, r3
   24f9c:	add	r3, r1, r3
   24fa0:	strh	r1, [sp, #22]
   24fa4:	cmp	r8, r3
   24fa8:	bcc	25064 <flatcc_verify_table_as_nested_root@@Base+0x250>
   24fac:	tst	r1, #1
   24fb0:	bne	25064 <flatcc_verify_table_as_nested_root@@Base+0x250>
   24fb4:	cmp	r1, #3
   24fb8:	movls	r0, #28
   24fbc:	bls	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24fc0:	ldrh	r3, [r7, r0]
   24fc4:	sub	r2, r8, r2
   24fc8:	cmp	r2, r3
   24fcc:	strh	r3, [sp, #20]
   24fd0:	movcc	r0, #20
   24fd4:	bcc	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   24fd8:	mov	r0, sp
   24fdc:	ldr	r3, [sp, #60]	; 0x3c
   24fe0:	stm	sp, {r7, r8}
   24fe4:	str	ip, [sp, #12]
   24fe8:	blx	r3
   24fec:	add	sp, sp, #28
   24ff0:	ldrd	r4, [sp]
   24ff4:	ldrd	r6, [sp, #8]
   24ff8:	ldrd	r8, [sp, #16]
   24ffc:	add	sp, sp, #24
   25000:	pop	{pc}		; (ldr pc, [sp], #4)
   25004:	mov	r0, #16
   25008:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2500c:	cmp	r2, #0
   25010:	bne	25024 <flatcc_verify_table_as_nested_root@@Base+0x210>
   25014:	mov	r0, #0
   25018:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2501c:	mov	r0, #15
   25020:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   25024:	mov	r0, #4
   25028:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2502c:	mov	r0, #3
   25030:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   25034:	mov	r1, r5
   25038:	mov	r0, sp
   2503c:	mov	r2, #4
   25040:	bl	12a28 <strncpy@plt>
   25044:	ldr	r3, [sp]
   25048:	cmp	r9, r3
   2504c:	cmpne	r3, #0
   25050:	movne	r0, #2
   25054:	beq	25014 <flatcc_verify_table_as_nested_root@@Base+0x200>
   25058:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2505c:	mov	r0, #29
   25060:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   25064:	mov	r0, #30
   25068:	b	24fec <flatcc_verify_table_as_nested_root@@Base+0x1d8>

0002506c <flatcc_verify_union_field@@Base>:
   2506c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25070:	add	r1, r1, #1
   25074:	ldr	r4, [r0, #12]
   25078:	lsl	r1, r1, #1
   2507c:	strd	r6, [sp, #8]
   25080:	str	lr, [sp, #16]
   25084:	uxth	r1, r1
   25088:	sub	sp, sp, #28
   2508c:	ldrh	lr, [r0, #22]
   25090:	cmp	r1, lr
   25094:	bcs	25140 <flatcc_verify_union_field@@Base+0xd4>
   25098:	ldrh	ip, [r4, r1]
   2509c:	cmp	ip, #0
   250a0:	beq	25140 <flatcc_verify_union_field@@Base+0xd4>
   250a4:	ldrh	r5, [r0, #20]
   250a8:	add	r6, ip, #1
   250ac:	cmp	r6, r5
   250b0:	bhi	25190 <flatcc_verify_union_field@@Base+0x124>
   250b4:	ldr	r6, [r0]
   250b8:	add	r1, r1, #2
   250bc:	uxth	r1, r1
   250c0:	ldr	r7, [r0, #16]
   250c4:	cmp	lr, r1
   250c8:	add	lr, ip, r7
   250cc:	ldrb	ip, [r6, lr]
   250d0:	bls	25198 <flatcc_verify_union_field@@Base+0x12c>
   250d4:	cmp	ip, #0
   250d8:	ldrh	r1, [r4, r1]
   250dc:	beq	25180 <flatcc_verify_union_field@@Base+0x114>
   250e0:	cmp	r1, #0
   250e4:	beq	251a8 <flatcc_verify_union_field@@Base+0x13c>
   250e8:	add	r2, r1, #4
   250ec:	cmp	r5, r2
   250f0:	bcc	25190 <flatcc_verify_union_field@@Base+0x124>
   250f4:	add	r1, r1, r7
   250f8:	tst	r1, #3
   250fc:	movne	r0, #12
   25100:	bne	2516c <flatcc_verify_union_field@@Base+0x100>
   25104:	cmp	r1, #0
   25108:	beq	251b8 <flatcc_verify_union_field@@Base+0x14c>
   2510c:	mov	r2, r0
   25110:	str	r1, [sp, #16]
   25114:	mov	r0, sp
   25118:	ldr	ip, [r2, #4]
   2511c:	ldr	r2, [r2, #8]
   25120:	stm	sp, {r6, ip}
   25124:	str	r2, [sp, #8]
   25128:	ldr	r2, [r6, r1]
   2512c:	str	r2, [sp, #20]
   25130:	ldrb	r2, [r6, lr]
   25134:	strb	r2, [sp, #12]
   25138:	blx	r3
   2513c:	b	2516c <flatcc_verify_union_field@@Base+0x100>
   25140:	add	r1, r1, #2
   25144:	uxth	r1, r1
   25148:	cmp	lr, r1
   2514c:	bls	25160 <flatcc_verify_union_field@@Base+0xf4>
   25150:	ldrh	r3, [r4, r1]
   25154:	cmp	r3, #0
   25158:	movne	r0, #23
   2515c:	bne	2516c <flatcc_verify_union_field@@Base+0x100>
   25160:	cmp	r2, #0
   25164:	moveq	r0, #0
   25168:	movne	r0, #21
   2516c:	add	sp, sp, #28
   25170:	ldrd	r4, [sp]
   25174:	ldrd	r6, [sp, #8]
   25178:	add	sp, sp, #16
   2517c:	pop	{pc}		; (ldr pc, [sp], #4)
   25180:	cmp	r1, #0
   25184:	movne	r0, #24
   25188:	moveq	r0, #0
   2518c:	b	2516c <flatcc_verify_union_field@@Base+0x100>
   25190:	mov	r0, #13
   25194:	b	2516c <flatcc_verify_union_field@@Base+0x100>
   25198:	cmp	ip, #0
   2519c:	bne	251a8 <flatcc_verify_union_field@@Base+0x13c>
   251a0:	mov	r0, ip
   251a4:	b	2516c <flatcc_verify_union_field@@Base+0x100>
   251a8:	cmp	r2, #0
   251ac:	moveq	r0, #0
   251b0:	movne	r0, #4
   251b4:	b	2516c <flatcc_verify_union_field@@Base+0x100>
   251b8:	mov	r0, r1
   251bc:	b	2516c <flatcc_verify_union_field@@Base+0x100>

000251c0 <flatcc_verify_union_vector_field@@Base>:
   251c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   251c4:	add	r1, r1, #1
   251c8:	ldrh	r4, [r0, #22]
   251cc:	lsl	r1, r1, #1
   251d0:	uxth	r1, r1
   251d4:	ldr	r5, [r0, #12]
   251d8:	strd	r6, [sp, #8]
   251dc:	strd	r8, [sp, #16]
   251e0:	cmp	r1, r4
   251e4:	strd	sl, [sp, #24]
   251e8:	str	lr, [sp, #32]
   251ec:	sub	sp, sp, #28
   251f0:	bcs	252f8 <flatcc_verify_union_vector_field@@Base+0x138>
   251f4:	ldrh	ip, [r5, r1]
   251f8:	cmp	ip, #0
   251fc:	beq	252f8 <flatcc_verify_union_vector_field@@Base+0x138>
   25200:	ldrh	r7, [r0, #20]
   25204:	add	lr, ip, #4
   25208:	cmp	lr, r7
   2520c:	bhi	25334 <flatcc_verify_union_vector_field@@Base+0x174>
   25210:	ldr	r8, [r0, #16]
   25214:	add	ip, ip, r8
   25218:	tst	ip, #3
   2521c:	bne	25360 <flatcc_verify_union_vector_field@@Base+0x1a0>
   25220:	ldr	r6, [r0]
   25224:	cmp	ip, #0
   25228:	add	lr, r6, ip
   2522c:	beq	25270 <flatcc_verify_union_vector_field@@Base+0xb0>
   25230:	ldr	r9, [r6, ip]
   25234:	add	sl, ip, r9
   25238:	cmp	ip, sl
   2523c:	bcs	252d8 <flatcc_verify_union_vector_field@@Base+0x118>
   25240:	ldr	ip, [r0, #4]
   25244:	add	fp, sl, #4
   25248:	cmp	ip, fp
   2524c:	bcc	252d8 <flatcc_verify_union_vector_field@@Base+0x118>
   25250:	tst	fp, #3
   25254:	bne	252d8 <flatcc_verify_union_vector_field@@Base+0x118>
   25258:	ldr	sl, [r6, sl]
   2525c:	sub	ip, ip, fp
   25260:	cmp	sl, ip
   25264:	bls	2527c <flatcc_verify_union_vector_field@@Base+0xbc>
   25268:	mov	r0, #26
   2526c:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25270:	cmp	lr, #0
   25274:	beq	25358 <flatcc_verify_union_vector_field@@Base+0x198>
   25278:	ldr	r9, [r6]
   2527c:	add	r1, r1, #2
   25280:	uxth	r1, r1
   25284:	cmp	r4, r1
   25288:	bls	25314 <flatcc_verify_union_vector_field@@Base+0x154>
   2528c:	ldrh	r1, [r5, r1]
   25290:	cmp	r1, #0
   25294:	beq	25314 <flatcc_verify_union_vector_field@@Base+0x154>
   25298:	add	r2, r1, #4
   2529c:	cmp	r2, r7
   252a0:	bhi	25334 <flatcc_verify_union_vector_field@@Base+0x174>
   252a4:	add	r8, r1, r8
   252a8:	tst	r8, #3
   252ac:	bne	25360 <flatcc_verify_union_vector_field@@Base+0x1a0>
   252b0:	cmp	r8, #0
   252b4:	beq	25358 <flatcc_verify_union_vector_field@@Base+0x198>
   252b8:	ldr	r1, [r0, #8]
   252bc:	ldr	r2, [r6, r8]
   252c0:	cmp	r1, #0
   252c4:	movle	r0, #3
   252c8:	ble	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   252cc:	add	r2, r8, r2
   252d0:	cmp	r8, r2
   252d4:	bcc	25368 <flatcc_verify_union_vector_field@@Base+0x1a8>
   252d8:	mov	r0, #16
   252dc:	add	sp, sp, #28
   252e0:	ldrd	r4, [sp]
   252e4:	ldrd	r6, [sp, #8]
   252e8:	ldrd	r8, [sp, #16]
   252ec:	ldrd	sl, [sp, #24]
   252f0:	add	sp, sp, #32
   252f4:	pop	{pc}		; (ldr pc, [sp], #4)
   252f8:	add	r1, r1, #2
   252fc:	uxth	r1, r1
   25300:	cmp	r4, r1
   25304:	bls	25324 <flatcc_verify_union_vector_field@@Base+0x164>
   25308:	ldrh	r3, [r5, r1]
   2530c:	cmp	r3, #0
   25310:	beq	25324 <flatcc_verify_union_vector_field@@Base+0x164>
   25314:	cmp	r2, #0
   25318:	moveq	r0, #0
   2531c:	movne	r0, #4
   25320:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25324:	cmp	r2, #0
   25328:	moveq	r0, #0
   2532c:	movne	r0, #22
   25330:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25334:	mov	r0, #13
   25338:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   2533c:	ldr	r3, [r6, r2]
   25340:	cmn	r3, #-1073741823	; 0xc0000001
   25344:	movhi	r0, #25
   25348:	bhi	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   2534c:	sub	r0, r4, r0
   25350:	cmp	r0, r3, lsl #2
   25354:	bcc	25268 <flatcc_verify_union_vector_field@@Base+0xa8>
   25358:	mov	r0, #0
   2535c:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25360:	mov	r0, #12
   25364:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25368:	ldr	r4, [r0, #4]
   2536c:	add	r0, r2, #4
   25370:	cmp	r4, r0
   25374:	bcc	252d8 <flatcc_verify_union_vector_field@@Base+0x118>
   25378:	tst	r0, #3
   2537c:	bne	252d8 <flatcc_verify_union_vector_field@@Base+0x118>
   25380:	ldr	ip, [r6, r2]
   25384:	add	r5, r6, r2
   25388:	cmn	ip, #-1073741823	; 0xc0000001
   2538c:	bhi	2533c <flatcc_verify_union_vector_field@@Base+0x17c>
   25390:	sub	r7, r4, r0
   25394:	cmp	r7, ip, lsl #2
   25398:	bcc	2533c <flatcc_verify_union_vector_field@@Base+0x17c>
   2539c:	ldr	r2, [lr, r9]
   253a0:	add	r0, lr, r9
   253a4:	cmp	r2, ip
   253a8:	bne	25434 <flatcc_verify_union_vector_field@@Base+0x274>
   253ac:	sub	r1, r1, #1
   253b0:	cmp	ip, #0
   253b4:	str	r6, [sp]
   253b8:	str	r4, [sp, #4]
   253bc:	str	r1, [sp, #8]
   253c0:	beq	25358 <flatcc_verify_union_vector_field@@Base+0x198>
   253c4:	add	ip, ip, #4
   253c8:	mov	r7, r3
   253cc:	add	r8, ip, r0
   253d0:	add	r4, r0, #4
   253d4:	rsb	r6, r6, #4
   253d8:	b	253ec <flatcc_verify_union_vector_field@@Base+0x22c>
   253dc:	cmp	r2, #0
   253e0:	bne	2543c <flatcc_verify_union_vector_field@@Base+0x27c>
   253e4:	cmp	r8, r4
   253e8:	beq	25358 <flatcc_verify_union_vector_field@@Base+0x198>
   253ec:	add	r1, r6, r5
   253f0:	ldr	r3, [r5, #4]!
   253f4:	mov	r0, sp
   253f8:	add	r4, r4, #1
   253fc:	ldrb	r2, [r4, #-1]
   25400:	cmp	r3, #0
   25404:	beq	253dc <flatcc_verify_union_vector_field@@Base+0x21c>
   25408:	cmp	r2, #0
   2540c:	beq	25444 <flatcc_verify_union_vector_field@@Base+0x284>
   25410:	strb	r2, [sp, #12]
   25414:	str	r1, [sp, #16]
   25418:	str	r3, [sp, #20]
   2541c:	blx	r7
   25420:	cmp	r0, #0
   25424:	beq	253e4 <flatcc_verify_union_vector_field@@Base+0x224>
   25428:	mov	r0, sp
   2542c:	blx	r7
   25430:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25434:	mov	r0, #34	; 0x22
   25438:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   2543c:	mov	r0, #32
   25440:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>
   25444:	mov	r0, #33	; 0x21
   25448:	b	252dc <flatcc_verify_union_vector_field@@Base+0x11c>

0002544c <__libc_csu_init@@Base>:
   2544c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25450:	mov	r7, r0
   25454:	ldr	r6, [pc, #72]	; 254a4 <__libc_csu_init@@Base+0x58>
   25458:	ldr	r5, [pc, #72]	; 254a8 <__libc_csu_init@@Base+0x5c>
   2545c:	add	r6, pc, r6
   25460:	add	r5, pc, r5
   25464:	sub	r6, r6, r5
   25468:	mov	r8, r1
   2546c:	mov	r9, r2
   25470:	bl	12948 <strcmp@plt-0x20>
   25474:	asrs	r6, r6, #2
   25478:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2547c:	mov	r4, #0
   25480:	add	r4, r4, #1
   25484:	ldr	r3, [r5], #4
   25488:	mov	r2, r9
   2548c:	mov	r1, r8
   25490:	mov	r0, r7
   25494:	blx	r3
   25498:	cmp	r6, r4
   2549c:	bne	25480 <__libc_csu_init@@Base+0x34>
   254a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   254a4:			; <UNDEFINED> instruction: 0x00014ab0
   254a8:	andeq	r4, r1, r8, lsr #21

000254ac <__libc_csu_fini@@Base>:
   254ac:	bx	lr

Disassembly of section .fini:

000254b0 <.fini>:
   254b0:	push	{r3, lr}
   254b4:	pop	{r3, pc}
