
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011078 <.init>:
   11078:	push	{r3, lr}
   1107c:	bl	11e18 <__assert_fail@plt+0xa50>
   11080:	pop	{r3, pc}

Disassembly of section .plt:

00011084 <calloc@plt-0x14>:
   11084:	push	{lr}		; (str lr, [sp, #-4]!)
   11088:	ldr	lr, [pc, #4]	; 11094 <calloc@plt-0x4>
   1108c:	add	lr, pc, lr
   11090:	ldr	pc, [lr, #8]!
   11094:	andeq	r5, r1, ip, ror #30

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #86016	; 0x15000
   110a0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110a4 <fputs_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #86016	; 0x15000
   110ac:	ldr	pc, [ip, #3940]!	; 0xf64

000110b0 <raise@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #86016	; 0x15000
   110b8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110bc <strcmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #86016	; 0x15000
   110c4:	ldr	pc, [ip, #3924]!	; 0xf54

000110c8 <posix_fadvise64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d4 <read@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #3908]!	; 0xf44

000110e0 <fflush@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110ec <wcwidth@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3892]!	; 0xf34

000110f8 <__memmove_chk@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3884]!	; 0xf2c

00011104 <free@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3876]!	; 0xf24

00011110 <ferror@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3868]!	; 0xf1c

0001111c <_exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3860]!	; 0xf14

00011128 <memcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3852]!	; 0xf0c

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3844]!	; 0xf04

00011140 <memcmp@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3836]!	; 0xefc

0001114c <fputc_unlocked@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3828]!	; 0xef4

00011158 <dcgettext@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3820]!	; 0xeec

00011164 <sysconf@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3812]!	; 0xee4

00011170 <realloc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3804]!	; 0xedc

0001117c <textdomain@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3796]!	; 0xed4

00011188 <iswcntrl@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3788]!	; 0xecc

00011194 <rawmemchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3780]!	; 0xec4

000111a0 <iswprint@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3772]!	; 0xebc

000111ac <__fxstat64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b8 <lseek64@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3756]!	; 0xeac

000111c4 <__ctype_get_mb_cur_max@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3748]!	; 0xea4

000111d0 <__fpending@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111dc <ferror_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3732]!	; 0xe94

000111e8 <mbrtowc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f4 <error@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3716]!	; 0xe84

00011200 <open64@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3708]!	; 0xe7c

0001120c <getenv@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3700]!	; 0xe74

00011218 <sysinfo@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3692]!	; 0xe6c

00011224 <malloc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3684]!	; 0xe64

00011230 <__libc_start_main@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3676]!	; 0xe5c

0001123c <__freading@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3668]!	; 0xe54

00011248 <__gmon_start__@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3660]!	; 0xe4c

00011254 <getopt_long@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #86016	; 0x15000
   1125c:	ldr	pc, [ip, #3652]!	; 0xe44

00011260 <__ctype_b_loc@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #86016	; 0x15000
   11268:	ldr	pc, [ip, #3644]!	; 0xe3c

0001126c <exit@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #86016	; 0x15000
   11274:	ldr	pc, [ip, #3636]!	; 0xe34

00011278 <feof@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #86016	; 0x15000
   11280:	ldr	pc, [ip, #3628]!	; 0xe2c

00011284 <iswspace@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #86016	; 0x15000
   1128c:	ldr	pc, [ip, #3620]!	; 0xe24

00011290 <strlen@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #86016	; 0x15000
   11298:	ldr	pc, [ip, #3612]!	; 0xe1c

0001129c <strchr@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #86016	; 0x15000
   112a4:	ldr	pc, [ip, #3604]!	; 0xe14

000112a8 <getpagesize@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #86016	; 0x15000
   112b0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #86016	; 0x15000
   112bc:	ldr	pc, [ip, #3588]!	; 0xe04

000112c0 <__cxa_atexit@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #86016	; 0x15000
   112c8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112cc <setvbuf@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #86016	; 0x15000
   112d4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d8 <memset@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #86016	; 0x15000
   112e0:	ldr	pc, [ip, #3564]!	; 0xdec

000112e4 <btowc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #86016	; 0x15000
   112ec:	ldr	pc, [ip, #3556]!	; 0xde4

000112f0 <fgetc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #86016	; 0x15000
   112f8:	ldr	pc, [ip, #3548]!	; 0xddc

000112fc <__printf_chk@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #86016	; 0x15000
   11304:	ldr	pc, [ip, #3540]!	; 0xdd4

00011308 <fileno@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3532]!	; 0xdcc

00011314 <__fprintf_chk@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011320 <fclose@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3516]!	; 0xdbc

0001132c <fseeko64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3508]!	; 0xdb4

00011338 <setlocale@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3500]!	; 0xdac

00011344 <strrchr@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3492]!	; 0xda4

00011350 <nl_langinfo@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3484]!	; 0xd9c

0001135c <fopen64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3476]!	; 0xd94

00011368 <bindtextdomain@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3468]!	; 0xd8c

00011374 <getdelim@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3460]!	; 0xd84

00011380 <__xstat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3452]!	; 0xd7c

0001138c <fputs@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3444]!	; 0xd74

00011398 <strncmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3436]!	; 0xd6c

000113a4 <abort@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3428]!	; 0xd64

000113b0 <close@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3420]!	; 0xd5c

000113bc <putchar_unlocked@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3412]!	; 0xd54

000113c8 <__assert_fail@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3404]!	; 0xd4c

Disassembly of section .text:

000113d8 <_obstack_begin@@Base-0x4488>:
   113d8:	push	{r4, lr}
   113dc:	bl	112b4 <__errno_location@plt>
   113e0:	mov	r3, #12
   113e4:	str	r3, [r0]
   113e8:	mov	r0, #0
   113ec:	pop	{r4, pc}
   113f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f4:	mov	r6, r0
   113f8:	mov	r5, r1
   113fc:	vpush	{d8-d9}
   11400:	sub	sp, sp, #316	; 0x13c
   11404:	ldr	r0, [r1]
   11408:	bl	133f0 <__assert_fail@plt+0x2028>
   1140c:	ldr	r4, [pc, #1748]	; 11ae8 <__assert_fail@plt+0x720>
   11410:	mov	r0, #6
   11414:	ldr	r1, [pc, #1744]	; 11aec <__assert_fail@plt+0x724>
   11418:	bl	11338 <setlocale@plt>
   1141c:	ldr	r8, [pc, #1740]	; 11af0 <__assert_fail@plt+0x728>
   11420:	ldr	r1, [pc, #1740]	; 11af4 <__assert_fail@plt+0x72c>
   11424:	ldr	r0, [pc, #1740]	; 11af8 <__assert_fail@plt+0x730>
   11428:	bl	11368 <bindtextdomain@plt>
   1142c:	ldr	r0, [pc, #1732]	; 11af8 <__assert_fail@plt+0x730>
   11430:	bl	1117c <textdomain@plt>
   11434:	ldr	r0, [pc, #1728]	; 11afc <__assert_fail@plt+0x734>
   11438:	bl	160ac <_obstack_memory_used@@Base+0x66c>
   1143c:	bl	112a8 <getpagesize@plt>
   11440:	mov	r3, #0
   11444:	mov	r2, #1
   11448:	str	r0, [r4, #12]
   1144c:	mov	r1, r3
   11450:	ldr	r0, [r8]
   11454:	bl	112cc <setvbuf@plt>
   11458:	ldr	r0, [pc, #1696]	; 11b00 <__assert_fail@plt+0x738>
   1145c:	bl	1120c <getenv@plt>
   11460:	adds	r0, r0, #0
   11464:	ldr	sl, [pc, #1688]	; 11b04 <__assert_fail@plt+0x73c>
   11468:	mov	r3, #0
   1146c:	movne	r0, #1
   11470:	mov	r1, #0
   11474:	ldr	r9, [pc, #1676]	; 11b08 <__assert_fail@plt+0x740>
   11478:	mov	fp, r3
   1147c:	strb	r0, [r4]
   11480:	mov	r0, #0
   11484:	strb	r3, [r4, #1]
   11488:	strb	r3, [r4, #8]
   1148c:	strb	r3, [r4, #9]
   11490:	strb	r3, [r4, #10]
   11494:	strb	r3, [r4, #11]
   11498:	strd	r0, [r4, #16]
   1149c:	strd	r0, [r4, #24]
   114a0:	strd	r0, [r4, #32]
   114a4:	strd	r0, [r4, #40]	; 0x28
   114a8:	strd	r0, [r4, #48]	; 0x30
   114ac:	mov	r7, #0
   114b0:	mov	r3, sl
   114b4:	mov	r2, r9
   114b8:	mov	r1, r5
   114bc:	mov	r0, r6
   114c0:	str	r7, [sp]
   114c4:	bl	11254 <getopt_long@plt>
   114c8:	cmn	r0, #1
   114cc:	bne	11598 <__assert_fail@plt+0x1d0>
   114d0:	ldrb	r3, [r4, #1]
   114d4:	cmp	r3, r7
   114d8:	bne	11518 <__assert_fail@plt+0x150>
   114dc:	ldrb	r3, [r4, #8]
   114e0:	cmp	r3, r7
   114e4:	bne	11518 <__assert_fail@plt+0x150>
   114e8:	ldrb	r3, [r4, #9]
   114ec:	cmp	r3, r7
   114f0:	bne	11518 <__assert_fail@plt+0x150>
   114f4:	ldrb	r3, [r4, #10]
   114f8:	cmp	r3, r7
   114fc:	bne	11518 <__assert_fail@plt+0x150>
   11500:	ldrb	r3, [r4, #11]
   11504:	cmp	r3, r7
   11508:	moveq	r3, #1
   1150c:	strbeq	r3, [r4, #1]
   11510:	strbeq	r3, [r4, #8]
   11514:	strbeq	r3, [r4, #10]
   11518:	ldr	r7, [pc, #1516]	; 11b0c <__assert_fail@plt+0x744>
   1151c:	cmp	fp, #0
   11520:	ldr	r3, [r7]
   11524:	beq	117f0 <__assert_fail@plt+0x428>
   11528:	cmp	r6, r3
   1152c:	ble	11674 <__assert_fail@plt+0x2ac>
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #1492]	; 11b10 <__assert_fail@plt+0x748>
   11538:	mov	r0, #0
   1153c:	bl	11158 <dcgettext@plt>
   11540:	ldr	r3, [r7]
   11544:	mov	r4, r0
   11548:	mov	r0, #4
   1154c:	ldr	r1, [r5, r3, lsl #2]
   11550:	bl	1480c <__assert_fail@plt+0x3444>
   11554:	mov	r1, #0
   11558:	mov	r3, r0
   1155c:	mov	r2, r4
   11560:	mov	r0, r1
   11564:	bl	111f4 <error@plt>
   11568:	ldr	r3, [pc, #1444]	; 11b14 <__assert_fail@plt+0x74c>
   1156c:	mov	r2, #5
   11570:	mov	r0, #0
   11574:	ldr	r1, [pc, #1436]	; 11b18 <__assert_fail@plt+0x750>
   11578:	ldr	r4, [r3]
   1157c:	bl	11158 <dcgettext@plt>
   11580:	mov	r3, r0
   11584:	ldr	r2, [pc, #1424]	; 11b1c <__assert_fail@plt+0x754>
   11588:	mov	r1, #1
   1158c:	mov	r0, r4
   11590:	bl	11314 <__fprintf_chk@plt>
   11594:	b	115b8 <__assert_fail@plt+0x1f0>
   11598:	cmp	r0, #108	; 0x6c
   1159c:	beq	1161c <__assert_fail@plt+0x254>
   115a0:	bgt	115dc <__assert_fail@plt+0x214>
   115a4:	cmn	r0, #2
   115a8:	beq	1163c <__assert_fail@plt+0x274>
   115ac:	bgt	115c0 <__assert_fail@plt+0x1f8>
   115b0:	cmn	r0, #3
   115b4:	beq	11644 <__assert_fail@plt+0x27c>
   115b8:	mov	r0, #1
   115bc:	b	11640 <__assert_fail@plt+0x278>
   115c0:	cmp	r0, #76	; 0x4c
   115c4:	mov	r3, #1
   115c8:	beq	11634 <__assert_fail@plt+0x26c>
   115cc:	cmp	r0, #99	; 0x63
   115d0:	bne	115b8 <__assert_fail@plt+0x1f0>
   115d4:	strb	r3, [r4, #10]
   115d8:	b	114ac <__assert_fail@plt+0xe4>
   115dc:	cmp	r0, #119	; 0x77
   115e0:	beq	11628 <__assert_fail@plt+0x260>
   115e4:	bgt	115fc <__assert_fail@plt+0x234>
   115e8:	cmp	r0, #109	; 0x6d
   115ec:	bne	115b8 <__assert_fail@plt+0x1f0>
   115f0:	mov	r3, #1
   115f4:	strb	r3, [r4, #9]
   115f8:	b	114ac <__assert_fail@plt+0xe4>
   115fc:	cmp	r0, #256	; 0x100
   11600:	beq	114ac <__assert_fail@plt+0xe4>
   11604:	movw	r3, #257	; 0x101
   11608:	cmp	r0, r3
   1160c:	bne	115b8 <__assert_fail@plt+0x1f0>
   11610:	ldr	r3, [pc, #1288]	; 11b20 <__assert_fail@plt+0x758>
   11614:	ldr	fp, [r3]
   11618:	b	114ac <__assert_fail@plt+0xe4>
   1161c:	mov	r3, #1
   11620:	strb	r3, [r4, #1]
   11624:	b	114ac <__assert_fail@plt+0xe4>
   11628:	mov	r3, #1
   1162c:	strb	r3, [r4, #8]
   11630:	b	114ac <__assert_fail@plt+0xe4>
   11634:	strb	r3, [r4, #11]
   11638:	b	114ac <__assert_fail@plt+0xe4>
   1163c:	mov	r0, r7
   11640:	bl	12ae4 <__assert_fail@plt+0x171c>
   11644:	ldr	r3, [pc, #1240]	; 11b24 <__assert_fail@plt+0x75c>
   11648:	ldr	r2, [pc, #1240]	; 11b28 <__assert_fail@plt+0x760>
   1164c:	ldr	r1, [pc, #1240]	; 11b2c <__assert_fail@plt+0x764>
   11650:	stmib	sp, {r3, r7}
   11654:	ldr	r3, [pc, #1236]	; 11b30 <__assert_fail@plt+0x768>
   11658:	str	r3, [sp]
   1165c:	ldr	r3, [pc, #1232]	; 11b34 <__assert_fail@plt+0x76c>
   11660:	ldr	r0, [r8]
   11664:	ldr	r3, [r3]
   11668:	bl	15194 <__assert_fail@plt+0x3dcc>
   1166c:	mov	r0, r7
   11670:	bl	1126c <exit@plt>
   11674:	ldr	r1, [pc, #1264]	; 11b6c <__assert_fail@plt+0x7a4>
   11678:	mov	r0, fp
   1167c:	bl	110bc <strcmp@plt>
   11680:	cmp	r0, #0
   11684:	ldreq	r3, [pc, #1196]	; 11b38 <__assert_fail@plt+0x770>
   11688:	ldreq	r5, [r3]
   1168c:	beq	116e0 <__assert_fail@plt+0x318>
   11690:	mov	r0, fp
   11694:	ldr	r1, [pc, #1184]	; 11b3c <__assert_fail@plt+0x774>
   11698:	bl	1135c <fopen64@plt>
   1169c:	subs	r5, r0, #0
   116a0:	bne	116e0 <__assert_fail@plt+0x318>
   116a4:	bl	112b4 <__errno_location@plt>
   116a8:	ldr	r4, [r0]
   116ac:	mov	r2, #5
   116b0:	mov	r0, r5
   116b4:	ldr	r1, [pc, #1156]	; 11b40 <__assert_fail@plt+0x778>
   116b8:	bl	11158 <dcgettext@plt>
   116bc:	mov	r5, r0
   116c0:	mov	r1, fp
   116c4:	mov	r0, #4
   116c8:	bl	1480c <__assert_fail@plt+0x3444>
   116cc:	mov	r3, r0
   116d0:	mov	r2, r5
   116d4:	mov	r1, r4
   116d8:	mov	r0, #1
   116dc:	bl	111f4 <error@plt>
   116e0:	mov	r0, r5
   116e4:	bl	11308 <fileno@plt>
   116e8:	add	r1, sp, #64	; 0x40
   116ec:	bl	160d4 <_obstack_memory_used@@Base+0x694>
   116f0:	cmp	r0, #0
   116f4:	bne	117c4 <__assert_fail@plt+0x3fc>
   116f8:	ldr	r3, [sp, #80]	; 0x50
   116fc:	and	r3, r3, #61440	; 0xf000
   11700:	cmp	r3, #32768	; 0x8000
   11704:	bne	117c4 <__assert_fail@plt+0x3fc>
   11708:	vldr	d8, [pc, #968]	; 11ad8 <__assert_fail@plt+0x710>
   1170c:	ldrd	r0, [sp, #112]	; 0x70
   11710:	bl	15e74 <_obstack_memory_used@@Base+0x434>
   11714:	vmov	d9, r0, r1
   11718:	bl	13368 <__assert_fail@plt+0x1fa0>
   1171c:	vmul.f64	d7, d0, d8
   11720:	vldr	d0, [pc, #952]	; 11ae0 <__assert_fail@plt+0x718>
   11724:	vcmpe.f64	d7, d0
   11728:	vmrs	APSR_nzcv, fpscr
   1172c:	bgt	11738 <__assert_fail@plt+0x370>
   11730:	bl	13368 <__assert_fail@plt+0x1fa0>
   11734:	vmul.f64	d0, d0, d8
   11738:	vcmpe.f64	d9, d0
   1173c:	vmrs	APSR_nzcv, fpscr
   11740:	bhi	117c4 <__assert_fail@plt+0x3fc>
   11744:	add	r0, sp, #168	; 0xa8
   11748:	bl	14ac8 <__assert_fail@plt+0x3700>
   1174c:	add	r1, sp, #168	; 0xa8
   11750:	mov	r0, r5
   11754:	bl	14b70 <__assert_fail@plt+0x37a8>
   11758:	subs	r3, r0, #0
   1175c:	str	r3, [sp, #40]	; 0x28
   11760:	bne	11794 <__assert_fail@plt+0x3cc>
   11764:	mov	r2, #5
   11768:	ldr	r1, [pc, #980]	; 11b44 <__assert_fail@plt+0x77c>
   1176c:	mov	r0, #0
   11770:	bl	11158 <dcgettext@plt>
   11774:	mov	r4, r0
   11778:	mov	r1, fp
   1177c:	mov	r0, #4
   11780:	bl	1480c <__assert_fail@plt+0x3444>
   11784:	mov	r3, r0
   11788:	mov	r2, r4
   1178c:	mov	r1, #0
   11790:	b	116d8 <__assert_fail@plt+0x310>
   11794:	mov	r0, r5
   11798:	bl	12fbc <__assert_fail@plt+0x1bf4>
   1179c:	cmp	r0, #0
   117a0:	bne	11764 <__assert_fail@plt+0x39c>
   117a4:	ldr	r6, [sp, #168]	; 0xa8
   117a8:	ldr	r5, [sp, #172]	; 0xac
   117ac:	mov	r0, r5
   117b0:	bl	12d5c <__assert_fail@plt+0x1994>
   117b4:	subs	r3, r0, #0
   117b8:	str	r3, [sp, #36]	; 0x24
   117bc:	bne	118d0 <__assert_fail@plt+0x508>
   117c0:	bl	15514 <__assert_fail@plt+0x414c>
   117c4:	mov	r0, r5
   117c8:	bl	12d84 <__assert_fail@plt+0x19bc>
   117cc:	subs	r3, r0, #0
   117d0:	str	r3, [sp, #36]	; 0x24
   117d4:	movne	r3, #0
   117d8:	movne	r5, r3
   117dc:	strne	r3, [sp, #40]	; 0x28
   117e0:	beq	117c0 <__assert_fail@plt+0x3f8>
   117e4:	mov	r7, #0
   117e8:	mov	r6, #1
   117ec:	b	11824 <__assert_fail@plt+0x45c>
   117f0:	cmp	r6, r3
   117f4:	ldrle	r5, [pc, #844]	; 11b48 <__assert_fail@plt+0x780>
   117f8:	addgt	r5, r5, r3, lsl #2
   117fc:	subgt	r6, r6, r3
   11800:	movle	r6, #1
   11804:	mov	r0, r5
   11808:	bl	12d5c <__assert_fail@plt+0x1994>
   1180c:	subs	r3, r0, #0
   11810:	movne	r7, r6
   11814:	str	r3, [sp, #36]	; 0x24
   11818:	movne	r3, #0
   1181c:	strne	r3, [sp, #40]	; 0x28
   11820:	beq	117c0 <__assert_fail@plt+0x3f8>
   11824:	mov	r1, #112	; 0x70
   11828:	mov	r0, r6
   1182c:	bl	1531c <__assert_fail@plt+0x3f54>
   11830:	cmp	r7, #0
   11834:	mov	r9, r0
   11838:	beq	118e0 <__assert_fail@plt+0x518>
   1183c:	cmp	r7, #1
   11840:	bne	11870 <__assert_fail@plt+0x4a8>
   11844:	ldrb	r2, [r4, #8]
   11848:	ldrb	r3, [r4, #1]
   1184c:	add	r3, r3, r2
   11850:	ldrb	r2, [r4, #9]
   11854:	add	r3, r3, r2
   11858:	ldrb	r2, [r4, #10]
   1185c:	add	r3, r3, r2
   11860:	ldrb	r2, [r4, #11]
   11864:	add	r3, r3, r2
   11868:	cmp	r3, #1
   1186c:	beq	118e0 <__assert_fail@plt+0x518>
   11870:	ldr	r8, [pc, #756]	; 11b6c <__assert_fail@plt+0x7a4>
   11874:	add	r6, r5, r7, lsl #2
   11878:	add	sl, r9, #8
   1187c:	cmp	r5, r6
   11880:	bne	11a3c <__assert_fail@plt+0x674>
   11884:	ldr	r3, [r9]
   11888:	cmp	r3, #0
   1188c:	movgt	r5, #1
   11890:	bgt	118e8 <__assert_fail@plt+0x520>
   11894:	mov	r2, #112	; 0x70
   11898:	mov	r3, r9
   1189c:	mov	r0, #0
   118a0:	mov	r1, #0
   118a4:	mla	r2, r2, r7, r9
   118a8:	mov	r6, #1
   118ac:	cmp	r2, r3
   118b0:	bne	11a8c <__assert_fail@plt+0x6c4>
   118b4:	mov	r5, #1
   118b8:	cmp	r1, #0
   118bc:	cmpeq	r0, #9
   118c0:	bhi	11ac4 <__assert_fail@plt+0x6fc>
   118c4:	cmp	r5, r6
   118c8:	movlt	r5, r6
   118cc:	b	118e8 <__assert_fail@plt+0x520>
   118d0:	cmp	r6, #0
   118d4:	movne	r7, r6
   118d8:	bne	11824 <__assert_fail@plt+0x45c>
   118dc:	b	117e4 <__assert_fail@plt+0x41c>
   118e0:	mov	r5, #1
   118e4:	str	r5, [r9]
   118e8:	mov	r3, #0
   118ec:	mov	sl, #1
   118f0:	str	r5, [r4, #4]
   118f4:	str	r3, [sp, #48]	; 0x30
   118f8:	add	r1, sp, #64	; 0x40
   118fc:	ldr	r0, [sp, #36]	; 0x24
   11900:	bl	12db8 <__assert_fail@plt+0x19f0>
   11904:	subs	r5, r0, #0
   11908:	bne	11bd0 <__assert_fail@plt+0x808>
   1190c:	ldr	r3, [sp, #64]	; 0x40
   11910:	cmp	r3, #3
   11914:	beq	117c0 <__assert_fail@plt+0x3f8>
   11918:	cmp	r3, #4
   1191c:	beq	11b74 <__assert_fail@plt+0x7ac>
   11920:	cmp	r3, #2
   11924:	bne	11bbc <__assert_fail@plt+0x7f4>
   11928:	cmp	fp, #0
   1192c:	movne	r5, #0
   11930:	andeq	r5, sl, #1
   11934:	cmp	r5, #0
   11938:	beq	11970 <__assert_fail@plt+0x5a8>
   1193c:	ldr	r0, [sp, #36]	; 0x24
   11940:	bl	12e4c <__assert_fail@plt+0x1a84>
   11944:	subs	r1, r0, #0
   11948:	movne	sl, r5
   1194c:	bne	11970 <__assert_fail@plt+0x5a8>
   11950:	mov	r3, #1
   11954:	mvn	r2, #0
   11958:	strb	r3, [r4, #60]	; 0x3c
   1195c:	mvn	r3, #0
   11960:	strd	r2, [sp]
   11964:	mov	r2, r9
   11968:	bl	12098 <__assert_fail@plt+0xcd0>
   1196c:	mov	sl, r0
   11970:	ldr	r3, [sp, #40]	; 0x28
   11974:	cmp	r3, #0
   11978:	beq	11984 <__assert_fail@plt+0x5bc>
   1197c:	add	r0, sp, #168	; 0xa8
   11980:	bl	14b40 <__assert_fail@plt+0x3778>
   11984:	ldr	r0, [sp, #36]	; 0x24
   11988:	bl	12e4c <__assert_fail@plt+0x1a84>
   1198c:	cmp	r0, #1
   11990:	bls	119f8 <__assert_fail@plt+0x630>
   11994:	ldr	r3, [pc, #332]	; 11ae8 <__assert_fail@plt+0x720>
   11998:	ldrd	r4, [r3, #16]
   1199c:	ldrd	r0, [r3, #32]
   119a0:	ldrd	r6, [r3, #24]
   119a4:	strd	r0, [sp, #40]	; 0x28
   119a8:	ldrd	r0, [r3, #40]	; 0x28
   119ac:	ldrd	r2, [r3, #48]	; 0x30
   119b0:	strd	r0, [sp, #48]	; 0x30
   119b4:	mov	r0, #0
   119b8:	ldr	r1, [pc, #396]	; 11b4c <__assert_fail@plt+0x784>
   119bc:	strd	r2, [sp, #56]	; 0x38
   119c0:	mov	r2, #5
   119c4:	bl	11158 <dcgettext@plt>
   119c8:	ldrd	r2, [sp, #56]	; 0x38
   119cc:	mov	r1, r5
   119d0:	strd	r2, [sp, #16]
   119d4:	ldrd	r2, [sp, #48]	; 0x30
   119d8:	str	r0, [sp, #24]
   119dc:	mov	r0, r4
   119e0:	strd	r2, [sp, #8]
   119e4:	ldrd	r2, [sp, #40]	; 0x28
   119e8:	strd	r2, [sp]
   119ec:	mov	r2, r6
   119f0:	mov	r3, r7
   119f4:	bl	11f1c <__assert_fail@plt+0xb54>
   119f8:	ldr	r0, [sp, #36]	; 0x24
   119fc:	bl	12e6c <__assert_fail@plt+0x1aa4>
   11a00:	mov	r0, r9
   11a04:	bl	130b4 <__assert_fail@plt+0x1cec>
   11a08:	ldr	r3, [pc, #216]	; 11ae8 <__assert_fail@plt+0x720>
   11a0c:	ldrb	r3, [r3, #60]	; 0x3c
   11a10:	cmp	r3, #0
   11a14:	beq	11dc8 <__assert_fail@plt+0xa00>
   11a18:	mov	r0, #0
   11a1c:	bl	113b0 <close@plt>
   11a20:	cmp	r0, #0
   11a24:	beq	11dc8 <__assert_fail@plt+0xa00>
   11a28:	bl	112b4 <__errno_location@plt>
   11a2c:	ldr	r2, [pc, #312]	; 11b6c <__assert_fail@plt+0x7a4>
   11a30:	ldr	r1, [r0]
   11a34:	mov	r0, #1
   11a38:	bl	111f4 <error@plt>
   11a3c:	ldr	r3, [r5], #4
   11a40:	cmp	r3, #0
   11a44:	beq	11a64 <__assert_fail@plt+0x69c>
   11a48:	mov	r0, r3
   11a4c:	mov	r1, r8
   11a50:	str	r3, [sp, #48]	; 0x30
   11a54:	bl	110bc <strcmp@plt>
   11a58:	cmp	r0, #0
   11a5c:	ldr	r3, [sp, #48]	; 0x30
   11a60:	bne	11a7c <__assert_fail@plt+0x6b4>
   11a64:	mov	r1, sl
   11a68:	mov	r0, #0
   11a6c:	bl	160d4 <_obstack_memory_used@@Base+0x694>
   11a70:	add	sl, sl, #112	; 0x70
   11a74:	str	r0, [sl, #-120]	; 0xffffff88
   11a78:	b	1187c <__assert_fail@plt+0x4b4>
   11a7c:	mov	r1, sl
   11a80:	mov	r0, r3
   11a84:	bl	160c4 <_obstack_memory_used@@Base+0x684>
   11a88:	b	11a70 <__assert_fail@plt+0x6a8>
   11a8c:	ldr	ip, [r3]
   11a90:	cmp	ip, #0
   11a94:	bne	11abc <__assert_fail@plt+0x6f4>
   11a98:	ldr	ip, [r3, #24]
   11a9c:	and	ip, ip, #61440	; 0xf000
   11aa0:	cmp	ip, #32768	; 0x8000
   11aa4:	movne	r6, #7
   11aa8:	bne	11abc <__assert_fail@plt+0x6f4>
   11aac:	ldr	ip, [r3, #56]	; 0x38
   11ab0:	ldr	lr, [r3, #60]	; 0x3c
   11ab4:	adds	r0, r0, ip
   11ab8:	adc	r1, r1, lr
   11abc:	add	r3, r3, #112	; 0x70
   11ac0:	b	118ac <__assert_fail@plt+0x4e4>
   11ac4:	mov	r2, #10
   11ac8:	mov	r3, #0
   11acc:	add	r5, r5, #1
   11ad0:	bl	15ed4 <_obstack_memory_used@@Base+0x494>
   11ad4:	b	118b8 <__assert_fail@plt+0x4f0>
   11ad8:	andeq	r0, r0, r0
   11adc:	svccc	0x00e00000
   11ae0:	andeq	r0, r0, r0
   11ae4:	cmnmi	r4, r0
   11ae8:	andeq	r7, r2, r0, lsr #3
   11aec:	strdeq	r6, [r1], -r1
   11af0:	muleq	r2, r4, r1
   11af4:	strdeq	r6, [r1], -r2
   11af8:	andeq	r6, r1, pc, asr #12
   11afc:			; <UNDEFINED> instruction: 0x00012eb4
   11b00:	andeq	r6, r1, sl, lsl #14
   11b04:	andeq	r6, r1, r0, lsr r1
   11b08:	andeq	r6, r1, r5, lsr r7
   11b0c:	andeq	r7, r2, r0, lsl #3
   11b10:	andeq	r6, r1, fp, lsr r7
   11b14:	andeq	r7, r2, r8, lsl #3
   11b18:	andeq	r6, r1, ip, asr #14
   11b1c:	andeq	r6, r1, r3, asr #20
   11b20:	muleq	r2, r8, r1
   11b24:	andeq	r6, r1, sl, lsl r7
   11b28:	andeq	r6, r1, fp, asr #12
   11b2c:	andeq	r6, r1, r4, ror #3
   11b30:	andeq	r6, r1, sl, lsr #14
   11b34:	andeq	r7, r2, ip, lsr #2
   11b38:	muleq	r2, r0, r1
   11b3c:	andeq	r6, r1, r7, asr #15
   11b40:	andeq	r6, r1, r0, lsl #15
   11b44:	muleq	r1, fp, r7
   11b48:	ldrdeq	r7, [r2], -r8
   11b4c:	andeq	r6, r1, r2, ror #16
   11b50:			; <UNDEFINED> instruction: 0x000167ba
   11b54:	ldrdeq	r6, [r1], -r0
   11b58:	andeq	r6, r1, r9, asr #15
   11b5c:	ldrdeq	r6, [r1], -r2
   11b60:	strdeq	r6, [r1], -sl
   11b64:	andeq	r6, r1, r9, lsr r8
   11b68:	andeq	r6, r1, r7, asr r8
   11b6c:	andeq	r6, r1, r6, lsl #19
   11b70:	andeq	r6, r1, r1, lsr #18
   11b74:	bl	112b4 <__errno_location@plt>
   11b78:	ldr	r6, [r0]
   11b7c:	mov	r2, #5
   11b80:	mov	r0, r5
   11b84:	mov	sl, r5
   11b88:	ldr	r1, [pc, #-64]	; 11b50 <__assert_fail@plt+0x788>
   11b8c:	bl	11158 <dcgettext@plt>
   11b90:	mov	r7, r0
   11b94:	mov	r2, fp
   11b98:	mov	r1, #3
   11b9c:	mov	r0, r5
   11ba0:	bl	148b0 <__assert_fail@plt+0x34e8>
   11ba4:	mov	r3, r0
   11ba8:	mov	r2, r7
   11bac:	mov	r1, r6
   11bb0:	mov	r0, r5
   11bb4:	bl	111f4 <error@plt>
   11bb8:	b	11928 <__assert_fail@plt+0x560>
   11bbc:	ldr	r3, [pc, #-112]	; 11b54 <__assert_fail@plt+0x78c>
   11bc0:	movw	r2, #938	; 0x3aa
   11bc4:	ldr	r1, [pc, #-116]	; 11b58 <__assert_fail@plt+0x790>
   11bc8:	ldr	r0, [pc, #-116]	; 11b5c <__assert_fail@plt+0x794>
   11bcc:	bl	113c8 <__assert_fail@plt>
   11bd0:	cmp	fp, #0
   11bd4:	beq	11c74 <__assert_fail@plt+0x8ac>
   11bd8:	ldr	r1, [pc, #-116]	; 11b6c <__assert_fail@plt+0x7a4>
   11bdc:	mov	r0, fp
   11be0:	bl	110bc <strcmp@plt>
   11be4:	subs	r6, r0, #0
   11be8:	bne	11c74 <__assert_fail@plt+0x8ac>
   11bec:	ldr	r1, [pc, #-136]	; 11b6c <__assert_fail@plt+0x7a4>
   11bf0:	mov	r0, r5
   11bf4:	bl	110bc <strcmp@plt>
   11bf8:	subs	r8, r0, #0
   11bfc:	bne	11c34 <__assert_fail@plt+0x86c>
   11c00:	mov	r2, #5
   11c04:	ldr	r1, [pc, #-172]	; 11b60 <__assert_fail@plt+0x798>
   11c08:	bl	11158 <dcgettext@plt>
   11c0c:	mov	r6, r0
   11c10:	mov	r1, r5
   11c14:	mov	r0, #4
   11c18:	bl	1480c <__assert_fail@plt+0x3444>
   11c1c:	mov	r3, r0
   11c20:	mov	r2, r6
   11c24:	mov	r1, r8
   11c28:	mov	r0, r8
   11c2c:	mov	r6, #1
   11c30:	bl	111f4 <error@plt>
   11c34:	ldrb	r8, [r5]
   11c38:	cmp	r8, #0
   11c3c:	bne	11ccc <__assert_fail@plt+0x904>
   11c40:	cmp	fp, #0
   11c44:	bne	11c7c <__assert_fail@plt+0x8b4>
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #-240]	; 11b64 <__assert_fail@plt+0x79c>
   11c50:	mov	r0, fp
   11c54:	bl	11158 <dcgettext@plt>
   11c58:	mov	r3, r0
   11c5c:	ldr	r2, [pc, #-244]	; 11b70 <__assert_fail@plt+0x7a8>
   11c60:	mov	r1, fp
   11c64:	mov	r0, fp
   11c68:	bl	111f4 <error@plt>
   11c6c:	mov	sl, #0
   11c70:	b	11d2c <__assert_fail@plt+0x964>
   11c74:	mov	r6, #0
   11c78:	b	11c34 <__assert_fail@plt+0x86c>
   11c7c:	ldr	r0, [sp, #36]	; 0x24
   11c80:	bl	12e4c <__assert_fail@plt+0x1a84>
   11c84:	mov	r6, r0
   11c88:	mov	r2, fp
   11c8c:	mov	r1, #3
   11c90:	mov	r0, r8
   11c94:	bl	148b0 <__assert_fail@plt+0x34e8>
   11c98:	mov	r5, r0
   11c9c:	mov	r2, #5
   11ca0:	ldr	r1, [pc, #-324]	; 11b64 <__assert_fail@plt+0x79c>
   11ca4:	mov	r0, r8
   11ca8:	bl	11158 <dcgettext@plt>
   11cac:	mov	r3, r5
   11cb0:	ldr	r2, [pc, #-336]	; 11b68 <__assert_fail@plt+0x7a0>
   11cb4:	mov	r1, r8
   11cb8:	str	r6, [sp]
   11cbc:	str	r0, [sp, #4]
   11cc0:	mov	r0, r8
   11cc4:	bl	111f4 <error@plt>
   11cc8:	b	11c6c <__assert_fail@plt+0x8a4>
   11ccc:	cmp	r6, #0
   11cd0:	bne	11c6c <__assert_fail@plt+0x8a4>
   11cd4:	cmp	r7, #0
   11cd8:	ldr	r1, [pc, #-372]	; 11b6c <__assert_fail@plt+0x7a4>
   11cdc:	mov	r0, r5
   11ce0:	movne	r8, #112	; 0x70
   11ce4:	moveq	r8, r7
   11ce8:	ldrne	r3, [sp, #48]	; 0x30
   11cec:	mulne	r8, r8, r3
   11cf0:	bl	110bc <strcmp@plt>
   11cf4:	cmp	r0, #0
   11cf8:	add	r8, r9, r8
   11cfc:	bne	11d48 <__assert_fail@plt+0x980>
   11d00:	mov	r3, #1
   11d04:	mvn	r2, #0
   11d08:	mov	r1, r5
   11d0c:	strb	r3, [r4, #60]	; 0x3c
   11d10:	mvn	r3, #0
   11d14:	strd	r2, [sp]
   11d18:	mov	r2, r8
   11d1c:	bl	12098 <__assert_fail@plt+0xcd0>
   11d20:	mov	r6, r0
   11d24:	and	r6, r6, sl
   11d28:	uxtb	sl, r6
   11d2c:	cmp	r7, #0
   11d30:	moveq	r3, #1
   11d34:	streq	r3, [r9]
   11d38:	ldr	r3, [sp, #48]	; 0x30
   11d3c:	add	r3, r3, #1
   11d40:	str	r3, [sp, #48]	; 0x30
   11d44:	b	118f8 <__assert_fail@plt+0x530>
   11d48:	mov	r1, #0
   11d4c:	mov	r0, r5
   11d50:	bl	11200 <open64@plt>
   11d54:	cmn	r0, #1
   11d58:	bne	11d8c <__assert_fail@plt+0x9c4>
   11d5c:	bl	112b4 <__errno_location@plt>
   11d60:	ldr	r8, [r0]
   11d64:	mov	r2, r5
   11d68:	mov	r1, #3
   11d6c:	mov	r0, #0
   11d70:	bl	148b0 <__assert_fail@plt+0x34e8>
   11d74:	mov	r3, r0
   11d78:	ldr	r2, [pc, #-528]	; 11b70 <__assert_fail@plt+0x7a8>
   11d7c:	mov	r0, #0
   11d80:	mov	r1, r8
   11d84:	bl	111f4 <error@plt>
   11d88:	b	11d24 <__assert_fail@plt+0x95c>
   11d8c:	mov	r3, #0
   11d90:	mov	r2, #0
   11d94:	mov	r1, r5
   11d98:	strd	r2, [sp]
   11d9c:	mov	r2, r8
   11da0:	str	r0, [sp, #56]	; 0x38
   11da4:	bl	12098 <__assert_fail@plt+0xcd0>
   11da8:	ldr	r3, [sp, #56]	; 0x38
   11dac:	mov	r8, r0
   11db0:	mov	r0, r3
   11db4:	bl	113b0 <close@plt>
   11db8:	cmp	r0, #0
   11dbc:	moveq	r6, r8
   11dc0:	beq	11d24 <__assert_fail@plt+0x95c>
   11dc4:	b	11d5c <__assert_fail@plt+0x994>
   11dc8:	eor	r0, sl, #1
   11dcc:	uxtb	r0, r0
   11dd0:	add	sp, sp, #316	; 0x13c
   11dd4:	vpop	{d8-d9}
   11dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ddc:	mov	fp, #0
   11de0:	mov	lr, #0
   11de4:	pop	{r1}		; (ldr r1, [sp], #4)
   11de8:	mov	r2, sp
   11dec:	push	{r2}		; (str r2, [sp, #-4]!)
   11df0:	push	{r0}		; (str r0, [sp, #-4]!)
   11df4:	ldr	ip, [pc, #16]	; 11e0c <__assert_fail@plt+0xa44>
   11df8:	push	{ip}		; (str ip, [sp, #-4]!)
   11dfc:	ldr	r0, [pc, #12]	; 11e10 <__assert_fail@plt+0xa48>
   11e00:	ldr	r3, [pc, #12]	; 11e14 <__assert_fail@plt+0xa4c>
   11e04:	bl	11230 <__libc_start_main@plt>
   11e08:	bl	113a4 <abort@plt>
   11e0c:	andeq	r6, r1, r8, lsr #1
   11e10:	strdeq	r1, [r1], -r0
   11e14:	andeq	r6, r1, r8, asr #32
   11e18:	ldr	r3, [pc, #20]	; 11e34 <__assert_fail@plt+0xa6c>
   11e1c:	ldr	r2, [pc, #20]	; 11e38 <__assert_fail@plt+0xa70>
   11e20:	add	r3, pc, r3
   11e24:	ldr	r2, [r3, r2]
   11e28:	cmp	r2, #0
   11e2c:	bxeq	lr
   11e30:	b	11248 <__gmon_start__@plt>
   11e34:	ldrdeq	r5, [r1], -r8
   11e38:	andeq	r0, r0, r0, lsr #2
   11e3c:	ldr	r0, [pc, #24]	; 11e5c <__assert_fail@plt+0xa94>
   11e40:	ldr	r3, [pc, #24]	; 11e60 <__assert_fail@plt+0xa98>
   11e44:	cmp	r3, r0
   11e48:	bxeq	lr
   11e4c:	ldr	r3, [pc, #16]	; 11e64 <__assert_fail@plt+0xa9c>
   11e50:	cmp	r3, #0
   11e54:	bxeq	lr
   11e58:	bx	r3
   11e5c:	andeq	r7, r2, r8, ror r1
   11e60:	andeq	r7, r2, r8, ror r1
   11e64:	andeq	r0, r0, r0
   11e68:	ldr	r0, [pc, #36]	; 11e94 <__assert_fail@plt+0xacc>
   11e6c:	ldr	r1, [pc, #36]	; 11e98 <__assert_fail@plt+0xad0>
   11e70:	sub	r1, r1, r0
   11e74:	asr	r1, r1, #2
   11e78:	add	r1, r1, r1, lsr #31
   11e7c:	asrs	r1, r1, #1
   11e80:	bxeq	lr
   11e84:	ldr	r3, [pc, #16]	; 11e9c <__assert_fail@plt+0xad4>
   11e88:	cmp	r3, #0
   11e8c:	bxeq	lr
   11e90:	bx	r3
   11e94:	andeq	r7, r2, r8, ror r1
   11e98:	andeq	r7, r2, r8, ror r1
   11e9c:	andeq	r0, r0, r0
   11ea0:	push	{r4, lr}
   11ea4:	ldr	r4, [pc, #24]	; 11ec4 <__assert_fail@plt+0xafc>
   11ea8:	ldrb	r3, [r4]
   11eac:	cmp	r3, #0
   11eb0:	popne	{r4, pc}
   11eb4:	bl	11e3c <__assert_fail@plt+0xa74>
   11eb8:	mov	r3, #1
   11ebc:	strb	r3, [r4]
   11ec0:	pop	{r4, pc}
   11ec4:	muleq	r2, ip, r1
   11ec8:	b	11e68 <__assert_fail@plt+0xaa0>
   11ecc:	ldr	r3, [pc, #68]	; 11f18 <__assert_fail@plt+0xb50>
   11ed0:	ldrb	r3, [r3]
   11ed4:	cmp	r3, #0
   11ed8:	bne	11f08 <__assert_fail@plt+0xb40>
   11edc:	movw	r3, #8199	; 0x2007
   11ee0:	cmp	r0, r3
   11ee4:	cmpne	r0, #160	; 0xa0
   11ee8:	beq	11f10 <__assert_fail@plt+0xb48>
   11eec:	movw	r2, #8239	; 0x202f
   11ef0:	movw	r3, #8288	; 0x2060
   11ef4:	cmp	r0, r3
   11ef8:	cmpne	r0, r2
   11efc:	moveq	r0, #1
   11f00:	movne	r0, #0
   11f04:	bx	lr
   11f08:	mov	r0, #0
   11f0c:	bx	lr
   11f10:	mov	r0, #1
   11f14:	bx	lr
   11f18:	andeq	r7, r2, r0, lsr #3
   11f1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   11f20:	mov	r7, r3
   11f24:	sub	sp, sp, #28
   11f28:	mov	r6, r2
   11f2c:	ldr	r4, [pc, #340]	; 12088 <__assert_fail@plt+0xcc0>
   11f30:	ldr	r8, [sp, #80]	; 0x50
   11f34:	ldrb	r3, [r4, #1]
   11f38:	cmp	r3, #0
   11f3c:	ldreq	r5, [pc, #328]	; 1208c <__assert_fail@plt+0xcc4>
   11f40:	beq	11f68 <__assert_fail@plt+0xba0>
   11f44:	mov	r2, sp
   11f48:	ldr	r5, [r4, #4]
   11f4c:	bl	1319c <__assert_fail@plt+0x1dd4>
   11f50:	mov	r3, r0
   11f54:	ldr	r1, [pc, #304]	; 1208c <__assert_fail@plt+0xcc4>
   11f58:	mov	r0, #1
   11f5c:	mov	r2, r5
   11f60:	ldr	r5, [pc, #296]	; 12090 <__assert_fail@plt+0xcc8>
   11f64:	bl	112fc <__printf_chk@plt>
   11f68:	ldrb	r3, [r4, #8]
   11f6c:	cmp	r3, #0
   11f70:	beq	11fa0 <__assert_fail@plt+0xbd8>
   11f74:	ldr	r9, [r4, #4]
   11f78:	mov	r2, sp
   11f7c:	mov	r1, r7
   11f80:	mov	r0, r6
   11f84:	bl	1319c <__assert_fail@plt+0x1dd4>
   11f88:	mov	r1, r5
   11f8c:	ldr	r5, [pc, #252]	; 12090 <__assert_fail@plt+0xcc8>
   11f90:	mov	r3, r0
   11f94:	mov	r0, #1
   11f98:	mov	r2, r9
   11f9c:	bl	112fc <__printf_chk@plt>
   11fa0:	ldrb	r3, [r4, #9]
   11fa4:	cmp	r3, #0
   11fa8:	beq	11fd4 <__assert_fail@plt+0xc0c>
   11fac:	ldr	r6, [r4, #4]
   11fb0:	mov	r2, sp
   11fb4:	ldrd	r0, [sp, #56]	; 0x38
   11fb8:	bl	1319c <__assert_fail@plt+0x1dd4>
   11fbc:	mov	r1, r5
   11fc0:	ldr	r5, [pc, #200]	; 12090 <__assert_fail@plt+0xcc8>
   11fc4:	mov	r3, r0
   11fc8:	mov	r2, r6
   11fcc:	mov	r0, #1
   11fd0:	bl	112fc <__printf_chk@plt>
   11fd4:	ldrb	r3, [r4, #10]
   11fd8:	cmp	r3, #0
   11fdc:	beq	12008 <__assert_fail@plt+0xc40>
   11fe0:	ldr	r6, [r4, #4]
   11fe4:	mov	r2, sp
   11fe8:	ldrd	r0, [sp, #64]	; 0x40
   11fec:	bl	1319c <__assert_fail@plt+0x1dd4>
   11ff0:	mov	r1, r5
   11ff4:	ldr	r5, [pc, #148]	; 12090 <__assert_fail@plt+0xcc8>
   11ff8:	mov	r3, r0
   11ffc:	mov	r2, r6
   12000:	mov	r0, #1
   12004:	bl	112fc <__printf_chk@plt>
   12008:	ldrb	r3, [r4, #11]
   1200c:	cmp	r3, #0
   12010:	beq	12038 <__assert_fail@plt+0xc70>
   12014:	ldr	r4, [r4, #4]
   12018:	mov	r2, sp
   1201c:	ldrd	r0, [sp, #72]	; 0x48
   12020:	bl	1319c <__assert_fail@plt+0x1dd4>
   12024:	mov	r3, r0
   12028:	mov	r1, r5
   1202c:	mov	r2, r4
   12030:	mov	r0, #1
   12034:	bl	112fc <__printf_chk@plt>
   12038:	cmp	r8, #0
   1203c:	beq	12078 <__assert_fail@plt+0xcb0>
   12040:	mov	r1, #10
   12044:	mov	r0, r8
   12048:	bl	1129c <strchr@plt>
   1204c:	cmp	r0, #0
   12050:	beq	12068 <__assert_fail@plt+0xca0>
   12054:	mov	r2, r8
   12058:	mov	r1, #3
   1205c:	mov	r0, #0
   12060:	bl	148b0 <__assert_fail@plt+0x34e8>
   12064:	mov	r8, r0
   12068:	mov	r2, r8
   1206c:	ldr	r1, [pc, #32]	; 12094 <__assert_fail@plt+0xccc>
   12070:	mov	r0, #1
   12074:	bl	112fc <__printf_chk@plt>
   12078:	mov	r0, #10
   1207c:	bl	113bc <putchar_unlocked@plt>
   12080:	add	sp, sp, #28
   12084:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12088:	andeq	r7, r2, r0, lsr #3
   1208c:	strdeq	r6, [r1], -r1
   12090:	strdeq	r6, [r1], -r0
   12094:	andeq	r6, r1, r0, lsr #18
   12098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1209c:	sub	sp, sp, #16384	; 0x4000
   120a0:	subs	r3, r1, #0
   120a4:	sub	sp, sp, #140	; 0x8c
   120a8:	mov	sl, r2
   120ac:	str	r0, [sp, #40]	; 0x28
   120b0:	str	r3, [sp, #68]	; 0x44
   120b4:	ldrne	r3, [sp, #68]	; 0x44
   120b8:	strne	r3, [sp, #52]	; 0x34
   120bc:	bne	120d4 <__assert_fail@plt+0xd0c>
   120c0:	mov	r2, #5
   120c4:	ldr	r1, [pc, #2188]	; 12958 <__assert_fail@plt+0x1590>
   120c8:	mov	r0, r3
   120cc:	bl	11158 <dcgettext@plt>
   120d0:	str	r0, [sp, #52]	; 0x34
   120d4:	ldr	r9, [pc, #2176]	; 1295c <__assert_fail@plt+0x1594>
   120d8:	mov	r3, #0
   120dc:	mov	r2, #0
   120e0:	strd	r2, [sp, #96]	; 0x60
   120e4:	strd	r2, [sp, #104]	; 0x68
   120e8:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   120ec:	cmp	r0, #1
   120f0:	ldrb	r4, [r9, #10]
   120f4:	ldrbhi	r3, [r9, #9]
   120f8:	bhi	12110 <__assert_fail@plt+0xd48>
   120fc:	cmp	r4, #0
   12100:	mov	r3, #0
   12104:	ldrbeq	r4, [r9, #9]
   12108:	movne	r4, #1
   1210c:	and	r4, r4, #1
   12110:	str	r3, [sp, #44]	; 0x2c
   12114:	ldrb	r3, [r9, #8]
   12118:	ldr	r2, [sp, #44]	; 0x2c
   1211c:	cmp	r3, #0
   12120:	eor	r3, r4, #1
   12124:	ldrbeq	r5, [r9, #11]
   12128:	movne	r5, #1
   1212c:	orrs	r3, r2, r3
   12130:	and	r6, r5, #1
   12134:	bne	12230 <__assert_fail@plt+0xe68>
   12138:	ldrb	r3, [r9, #1]
   1213c:	orrs	r3, r6, r3
   12140:	bne	12230 <__assert_fail@plt+0xe68>
   12144:	cmp	r5, #0
   12148:	bne	12474 <__assert_fail@plt+0x10ac>
   1214c:	ldr	r3, [sl]
   12150:	cmp	r3, #0
   12154:	ble	12168 <__assert_fail@plt+0xda0>
   12158:	add	r1, sl, #8
   1215c:	ldr	r0, [sp, #40]	; 0x28
   12160:	bl	160d4 <_obstack_memory_used@@Base+0x694>
   12164:	str	r0, [sl]
   12168:	ldr	r3, [sl]
   1216c:	cmp	r3, #0
   12170:	bne	12304 <__assert_fail@plt+0xf3c>
   12174:	ldr	r3, [sl, #24]
   12178:	and	r3, r3, #53248	; 0xd000
   1217c:	cmp	r3, #32768	; 0x8000
   12180:	bne	12304 <__assert_fail@plt+0xf3c>
   12184:	ldrd	r4, [sl, #56]	; 0x38
   12188:	cmp	r4, #0
   1218c:	sbcs	r3, r5, #0
   12190:	blt	12304 <__assert_fail@plt+0xf3c>
   12194:	add	r3, sp, #16384	; 0x4000
   12198:	mvn	r1, #0
   1219c:	add	r3, r3, #176	; 0xb0
   121a0:	mvn	r0, #0
   121a4:	ldrd	r2, [r3]
   121a8:	cmp	r3, r1
   121ac:	cmpeq	r2, r0
   121b0:	movne	r6, #0
   121b4:	movne	r7, #0
   121b8:	bne	121dc <__assert_fail@plt+0xe14>
   121bc:	mov	r3, #1
   121c0:	mov	r2, #0
   121c4:	ldr	r0, [sp, #40]	; 0x28
   121c8:	str	r3, [sp]
   121cc:	mov	r3, #0
   121d0:	bl	111b8 <lseek64@plt>
   121d4:	mov	r6, r0
   121d8:	mov	r7, r1
   121dc:	ldr	r2, [r9, #12]
   121e0:	udiv	r3, r4, r2
   121e4:	mls	r3, r2, r3, r4
   121e8:	cmp	r3, #0
   121ec:	beq	122a4 <__assert_fail@plt+0xedc>
   121f0:	mov	r1, #0
   121f4:	cmp	r4, r6
   121f8:	sbcs	r3, r1, r7
   121fc:	movlt	r2, #0
   12200:	movlt	r3, r2
   12204:	blt	12210 <__assert_fail@plt+0xe48>
   12208:	subs	r2, r4, r6
   1220c:	sbc	r3, r1, r7
   12210:	strd	r2, [sp, #104]	; 0x68
   12214:	mov	r4, #0
   12218:	mov	r5, #0
   1221c:	mov	r6, r4
   12220:	mov	r7, r5
   12224:	mov	r8, #1
   12228:	strd	r4, [sp, #32]
   1222c:	b	1238c <__assert_fail@plt+0xfc4>
   12230:	mov	r3, #2
   12234:	mov	r2, #0
   12238:	ldr	r0, [sp, #40]	; 0x28
   1223c:	str	r3, [sp, #8]
   12240:	mov	r3, #0
   12244:	strd	r2, [sp]
   12248:	bl	12f88 <__assert_fail@plt+0x1bc0>
   1224c:	ldr	r3, [sp, #44]	; 0x2c
   12250:	eor	r3, r3, #1
   12254:	tst	r4, r3
   12258:	beq	12268 <__assert_fail@plt+0xea0>
   1225c:	ldrb	r3, [r9, #1]
   12260:	cmp	r3, #0
   12264:	beq	12144 <__assert_fail@plt+0xd7c>
   12268:	ldr	r3, [sp, #44]	; 0x2c
   1226c:	orrs	r3, r3, r6
   12270:	bne	12474 <__assert_fail@plt+0x10ac>
   12274:	mov	r4, #0
   12278:	mov	r5, #0
   1227c:	ldr	r1, [sp, #40]	; 0x28
   12280:	add	r3, sp, #104	; 0x68
   12284:	add	r2, sp, #96	; 0x60
   12288:	ldr	r0, [sp, #52]	; 0x34
   1228c:	mov	r6, r4
   12290:	mov	r7, r5
   12294:	bl	12acc <__assert_fail@plt+0x1704>
   12298:	mov	r8, r0
   1229c:	strd	r4, [sp, #32]
   122a0:	b	1238c <__assert_fail@plt+0xfc4>
   122a4:	ldr	r3, [sl, #64]	; 0x40
   122a8:	mov	r5, #0
   122ac:	sub	r2, r3, #1
   122b0:	cmn	r2, #-536870911	; 0xe0000001
   122b4:	addls	r3, r3, #1
   122b8:	movwhi	r3, #513	; 0x201
   122bc:	cmp	r7, r5
   122c0:	udiv	r2, r4, r3
   122c4:	mls	r3, r3, r2, r4
   122c8:	sub	r4, r4, r3
   122cc:	cmpeq	r6, r4
   122d0:	bcs	12304 <__assert_fail@plt+0xf3c>
   122d4:	mov	r3, #1
   122d8:	mov	r2, r4
   122dc:	ldr	r0, [sp, #40]	; 0x28
   122e0:	str	r3, [sp]
   122e4:	mov	r3, r5
   122e8:	bl	111b8 <lseek64@plt>
   122ec:	cmp	r0, #0
   122f0:	sbcs	r3, r1, #0
   122f4:	blt	12304 <__assert_fail@plt+0xf3c>
   122f8:	subs	r2, r4, r6
   122fc:	sbc	r3, r5, r7
   12300:	strd	r2, [sp, #104]	; 0x68
   12304:	mov	r3, #2
   12308:	mov	r2, #0
   1230c:	ldr	r0, [sp, #40]	; 0x28
   12310:	str	r3, [sp, #8]
   12314:	mov	r3, #0
   12318:	strd	r2, [sp]
   1231c:	bl	12f88 <__assert_fail@plt+0x1bc0>
   12320:	add	r3, sp, #132	; 0x84
   12324:	str	r3, [sp, #32]
   12328:	mov	r2, #16384	; 0x4000
   1232c:	ldr	r1, [sp, #32]
   12330:	ldr	r0, [sp, #40]	; 0x28
   12334:	bl	14ce8 <__assert_fail@plt+0x3920>
   12338:	cmp	r0, #0
   1233c:	beq	12214 <__assert_fail@plt+0xe4c>
   12340:	cmn	r0, #1
   12344:	bne	12460 <__assert_fail@plt+0x1098>
   12348:	bl	112b4 <__errno_location@plt>
   1234c:	ldr	r4, [r0]
   12350:	mov	r1, #3
   12354:	mov	r0, #0
   12358:	mov	r5, #0
   1235c:	mov	r8, #0
   12360:	ldr	r2, [sp, #52]	; 0x34
   12364:	mov	r7, r5
   12368:	bl	148b0 <__assert_fail@plt+0x34e8>
   1236c:	mov	r3, r0
   12370:	ldr	r2, [pc, #1512]	; 12960 <__assert_fail@plt+0x1598>
   12374:	mov	r0, #0
   12378:	mov	r1, r4
   1237c:	mov	r4, #0
   12380:	mov	r6, r4
   12384:	bl	111f4 <error@plt>
   12388:	strd	r4, [sp, #32]
   1238c:	ldr	r1, [pc, #1480]	; 1295c <__assert_fail@plt+0x1594>
   12390:	ldr	r0, [sp, #44]	; 0x2c
   12394:	ldrd	r2, [sp, #104]	; 0x68
   12398:	ldrb	r1, [r1, #9]
   1239c:	strd	r2, [sp, #8]
   123a0:	strd	r4, [sp, #16]
   123a4:	cmp	r1, r0
   123a8:	ldr	r1, [sp, #68]	; 0x44
   123ac:	movhi	r6, r2
   123b0:	movhi	r7, r3
   123b4:	ldrd	r2, [sp, #32]
   123b8:	strd	r6, [sp]
   123bc:	str	r1, [sp, #24]
   123c0:	ldrd	r0, [sp, #96]	; 0x60
   123c4:	bl	11f1c <__assert_fail@plt+0xb54>
   123c8:	ldr	r1, [pc, #1420]	; 1295c <__assert_fail@plt+0x1594>
   123cc:	ldr	r0, [sp, #96]	; 0x60
   123d0:	ldr	ip, [sp, #100]	; 0x64
   123d4:	ldr	r3, [r1, #16]
   123d8:	ldr	r2, [r1, #20]
   123dc:	adds	r3, r3, r0
   123e0:	ldr	r0, [sp, #32]
   123e4:	str	r3, [r1, #16]
   123e8:	adc	r2, r2, ip
   123ec:	ldr	r3, [r1, #24]
   123f0:	str	r2, [r1, #20]
   123f4:	ldr	r2, [r1, #28]
   123f8:	ldr	ip, [sp, #108]	; 0x6c
   123fc:	adds	r3, r3, r0
   12400:	ldr	r0, [sp, #36]	; 0x24
   12404:	str	r3, [r1, #24]
   12408:	ldr	r3, [r1, #32]
   1240c:	adc	r2, r2, r0
   12410:	ldr	r0, [sp, #104]	; 0x68
   12414:	str	r2, [r1, #28]
   12418:	adds	r6, r3, r6
   1241c:	ldr	r2, [r1, #36]	; 0x24
   12420:	ldr	r3, [r1, #40]	; 0x28
   12424:	adc	r7, r2, r7
   12428:	ldr	r2, [r1, #44]	; 0x2c
   1242c:	adds	r3, r3, r0
   12430:	mov	r0, r8
   12434:	strd	r6, [r1, #32]
   12438:	str	r3, [r1, #40]	; 0x28
   1243c:	adc	r2, r2, ip
   12440:	str	r2, [r1, #44]	; 0x2c
   12444:	ldrd	r2, [r1, #48]	; 0x30
   12448:	cmp	r3, r5
   1244c:	cmpeq	r2, r4
   12450:	strdcc	r4, [r1, #48]	; 0x30
   12454:	add	sp, sp, #16384	; 0x4000
   12458:	add	sp, sp, #140	; 0x8c
   1245c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12460:	ldrd	r2, [sp, #104]	; 0x68
   12464:	adds	r4, r2, r0
   12468:	adc	r5, r3, #0
   1246c:	strd	r4, [sp, #104]	; 0x68
   12470:	b	12328 <__assert_fail@plt+0xf60>
   12474:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   12478:	cmp	r0, #1
   1247c:	mov	r2, #0
   12480:	mov	r3, r2
   12484:	bls	1293c <__assert_fail@plt+0x1574>
   12488:	mov	sl, r2
   1248c:	mov	fp, r2
   12490:	str	r2, [sp, #48]	; 0x30
   12494:	mov	r4, r2
   12498:	mov	r5, r2
   1249c:	mov	r6, r2
   124a0:	mov	r7, r2
   124a4:	strd	sl, [sp, #56]	; 0x38
   124a8:	strd	sl, [sp, #72]	; 0x48
   124ac:	strd	r2, [sp, #116]	; 0x74
   124b0:	add	r3, sp, #132	; 0x84
   124b4:	rsb	r2, r4, #16384	; 0x4000
   124b8:	ldr	r0, [sp, #40]	; 0x28
   124bc:	add	r1, r3, r4
   124c0:	bl	14ce8 <__assert_fail@plt+0x3920>
   124c4:	cmp	r0, #0
   124c8:	moveq	r8, #1
   124cc:	beq	12508 <__assert_fail@plt+0x1140>
   124d0:	cmn	r0, #1
   124d4:	bne	12540 <__assert_fail@plt+0x1178>
   124d8:	bl	112b4 <__errno_location@plt>
   124dc:	ldr	r4, [r0]
   124e0:	mov	r1, #3
   124e4:	mov	r0, #0
   124e8:	mov	r8, #0
   124ec:	ldr	r2, [sp, #52]	; 0x34
   124f0:	bl	148b0 <__assert_fail@plt+0x34e8>
   124f4:	mov	r3, r0
   124f8:	ldr	r2, [pc, #1120]	; 12960 <__assert_fail@plt+0x1598>
   124fc:	mov	r0, #0
   12500:	mov	r1, r4
   12504:	bl	111f4 <error@plt>
   12508:	ldrd	r4, [sp, #56]	; 0x38
   1250c:	mov	r3, #0
   12510:	ldrb	r2, [sp, #48]	; 0x30
   12514:	ldr	r1, [sp, #72]	; 0x48
   12518:	cmp	r5, fp
   1251c:	cmpeq	r4, sl
   12520:	movcc	r4, sl
   12524:	movcc	r5, fp
   12528:	adds	r1, r2, r1
   1252c:	str	r1, [sp, #32]
   12530:	ldr	r1, [sp, #76]	; 0x4c
   12534:	adc	r3, r3, r1
   12538:	str	r3, [sp, #36]	; 0x24
   1253c:	b	1238c <__assert_fail@plt+0xfc4>
   12540:	ldrd	r2, [sp, #104]	; 0x68
   12544:	add	r4, r4, r0
   12548:	adds	r8, r2, r0
   1254c:	adc	r9, r3, #0
   12550:	add	r3, sp, #124	; 0x7c
   12554:	str	r3, [sp, #80]	; 0x50
   12558:	strd	r8, [sp, #104]	; 0x68
   1255c:	add	r9, sp, #132	; 0x84
   12560:	cmp	r5, #0
   12564:	bne	1264c <__assert_fail@plt+0x1284>
   12568:	ldrb	r3, [r9]
   1256c:	mov	r0, r3
   12570:	str	r3, [sp, #64]	; 0x40
   12574:	bl	13280 <__assert_fail@plt+0x1eb8>
   12578:	cmp	r0, #0
   1257c:	beq	1264c <__assert_fail@plt+0x1284>
   12580:	ldr	r3, [sp, #64]	; 0x40
   12584:	str	r5, [sp, #64]	; 0x40
   12588:	str	r3, [sp, #92]	; 0x5c
   1258c:	mov	r3, #1
   12590:	mov	r8, r3
   12594:	ldr	r3, [sp, #92]	; 0x5c
   12598:	cmp	r3, #11
   1259c:	beq	12728 <__assert_fail@plt+0x1360>
   125a0:	bhi	126dc <__assert_fail@plt+0x1314>
   125a4:	cmp	r3, #9
   125a8:	beq	12754 <__assert_fail@plt+0x138c>
   125ac:	cmp	r3, #10
   125b0:	beq	126f8 <__assert_fail@plt+0x1330>
   125b4:	cmp	r5, #0
   125b8:	beq	12764 <__assert_fail@plt+0x139c>
   125bc:	mov	r0, r3
   125c0:	str	r3, [sp, #84]	; 0x54
   125c4:	bl	111a0 <iswprint@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	1262c <__assert_fail@plt+0x1264>
   125d0:	ldr	r3, [pc, #900]	; 1295c <__assert_fail@plt+0x1594>
   125d4:	ldrb	r2, [r3, #11]
   125d8:	ldr	r3, [sp, #84]	; 0x54
   125dc:	cmp	r2, #0
   125e0:	beq	125fc <__assert_fail@plt+0x1234>
   125e4:	mov	r0, r3
   125e8:	bl	110ec <wcwidth@plt>
   125ec:	cmp	r0, #0
   125f0:	ble	125fc <__assert_fail@plt+0x1234>
   125f4:	adds	sl, sl, r0
   125f8:	adc	fp, fp, r0, asr #31
   125fc:	ldr	r3, [sp, #92]	; 0x5c
   12600:	mov	r0, r3
   12604:	str	r3, [sp, #84]	; 0x54
   12608:	bl	11284 <iswspace@plt>
   1260c:	cmp	r0, #0
   12610:	bne	12728 <__assert_fail@plt+0x1360>
   12614:	ldr	r3, [sp, #84]	; 0x54
   12618:	mov	r0, r3
   1261c:	bl	11ecc <__assert_fail@plt+0xb04>
   12620:	cmp	r0, #0
   12624:	streq	r5, [sp, #48]	; 0x30
   12628:	bne	12728 <__assert_fail@plt+0x1360>
   1262c:	ldr	r5, [sp, #64]	; 0x40
   12630:	adds	r6, r6, #1
   12634:	add	r9, r9, r8
   12638:	sub	r4, r4, r8
   1263c:	adc	r7, r7, #0
   12640:	cmp	r4, #0
   12644:	bne	12560 <__assert_fail@plt+0x1198>
   12648:	b	124b0 <__assert_fail@plt+0x10e8>
   1264c:	add	r5, sp, #116	; 0x74
   12650:	ldr	r3, [sp, #80]	; 0x50
   12654:	mov	r2, r4
   12658:	ldm	r5, {r0, r1}
   1265c:	stm	r3, {r0, r1}
   12660:	mov	r3, r5
   12664:	mov	r1, r9
   12668:	add	r0, sp, #92	; 0x5c
   1266c:	bl	132a0 <__assert_fail@plt+0x1ed8>
   12670:	cmn	r0, #2
   12674:	mov	r8, r0
   12678:	bne	12698 <__assert_fail@plt+0x12d0>
   1267c:	ldr	r3, [sp, #80]	; 0x50
   12680:	cmp	r4, #0
   12684:	ldm	r3, {r0, r1}
   12688:	stm	r5, {r0, r1}
   1268c:	bne	12798 <__assert_fail@plt+0x13d0>
   12690:	mov	r5, #1
   12694:	b	124b0 <__assert_fail@plt+0x10e8>
   12698:	cmn	r0, #1
   1269c:	addeq	r9, r9, #1
   126a0:	subeq	r4, r4, #1
   126a4:	moveq	r5, #1
   126a8:	beq	12640 <__assert_fail@plt+0x1278>
   126ac:	mov	r0, r5
   126b0:	mov	r5, #1
   126b4:	bl	11134 <mbsinit@plt>
   126b8:	clz	r3, r0
   126bc:	cmp	r8, #0
   126c0:	lsr	r3, r3, #5
   126c4:	streq	r8, [sp, #92]	; 0x5c
   126c8:	str	r3, [sp, #64]	; 0x40
   126cc:	mov	r3, r8
   126d0:	moveq	r3, #1
   126d4:	moveq	r8, r3
   126d8:	b	12594 <__assert_fail@plt+0x11cc>
   126dc:	cmp	r3, #13
   126e0:	bls	12710 <__assert_fail@plt+0x1348>
   126e4:	cmp	r3, #32
   126e8:	bne	125b4 <__assert_fail@plt+0x11ec>
   126ec:	adds	sl, sl, #1
   126f0:	adc	fp, fp, #0
   126f4:	b	12728 <__assert_fail@plt+0x1360>
   126f8:	ldr	r3, [sp, #96]	; 0x60
   126fc:	ldr	r2, [sp, #100]	; 0x64
   12700:	adds	r3, r3, #1
   12704:	adc	r2, r2, #0
   12708:	str	r3, [sp, #96]	; 0x60
   1270c:	str	r2, [sp, #100]	; 0x64
   12710:	ldrd	r2, [sp, #56]	; 0x38
   12714:	cmp	r3, fp
   12718:	cmpeq	r2, sl
   1271c:	strdcc	sl, [sp, #56]	; 0x38
   12720:	mov	sl, #0
   12724:	mov	fp, #0
   12728:	ldrb	r2, [sp, #48]	; 0x30
   1272c:	mov	r3, #0
   12730:	ldr	r1, [sp, #72]	; 0x48
   12734:	adds	r1, r1, r2
   12738:	str	r1, [sp, #72]	; 0x48
   1273c:	ldr	r1, [sp, #76]	; 0x4c
   12740:	adc	r3, r1, r3
   12744:	str	r3, [sp, #76]	; 0x4c
   12748:	mov	r3, #0
   1274c:	str	r3, [sp, #48]	; 0x30
   12750:	b	1262c <__assert_fail@plt+0x1264>
   12754:	bic	r3, sl, #7
   12758:	adds	sl, r3, #8
   1275c:	adc	fp, fp, #0
   12760:	b	12728 <__assert_fail@plt+0x1360>
   12764:	bl	11260 <__ctype_b_loc@plt>
   12768:	ldrb	r3, [r9]
   1276c:	ldr	r2, [r0]
   12770:	lsl	r3, r3, #1
   12774:	ldrh	r3, [r2, r3]
   12778:	tst	r3, #16384	; 0x4000
   1277c:	beq	1262c <__assert_fail@plt+0x1264>
   12780:	adds	sl, sl, #1
   12784:	adc	fp, fp, #0
   12788:	tst	r3, #8192	; 0x2000
   1278c:	bne	12728 <__assert_fail@plt+0x1360>
   12790:	mov	r3, #1
   12794:	b	1274c <__assert_fail@plt+0x1384>
   12798:	cmp	r4, #16384	; 0x4000
   1279c:	movw	r3, #16385	; 0x4001
   127a0:	addeq	r9, r9, #1
   127a4:	movweq	r4, #16383	; 0x3fff
   127a8:	mov	r2, r4
   127ac:	mov	r1, r9
   127b0:	add	r0, sp, #132	; 0x84
   127b4:	bl	110f8 <__memmove_chk@plt>
   127b8:	b	12690 <__assert_fail@plt+0x12c8>
   127bc:	cmn	sl, #1
   127c0:	bne	12820 <__assert_fail@plt+0x1458>
   127c4:	bl	112b4 <__errno_location@plt>
   127c8:	ldr	r8, [r0]
   127cc:	mov	r1, #3
   127d0:	mov	r0, #0
   127d4:	ldr	r2, [sp, #52]	; 0x34
   127d8:	bl	148b0 <__assert_fail@plt+0x34e8>
   127dc:	mov	r3, r0
   127e0:	ldr	r2, [pc, #376]	; 12960 <__assert_fail@plt+0x1598>
   127e4:	mov	r0, #0
   127e8:	mov	r1, r8
   127ec:	mov	r8, #0
   127f0:	bl	111f4 <error@plt>
   127f4:	ldrd	r2, [sp, #32]
   127f8:	cmp	r5, r7
   127fc:	cmpeq	r4, r6
   12800:	movcc	r4, r6
   12804:	movcc	r5, r7
   12808:	mov	r6, #0
   1280c:	mov	r7, r6
   12810:	adds	r2, r2, r9
   12814:	adc	r3, r3, #0
   12818:	strd	r2, [sp, #32]
   1281c:	b	1238c <__assert_fail@plt+0xfc4>
   12820:	ldrd	r0, [sp, #104]	; 0x68
   12824:	adds	r2, r0, sl
   12828:	adc	r3, r1, #0
   1282c:	strd	r2, [sp, #104]	; 0x68
   12830:	add	r3, sp, #132	; 0x84
   12834:	mov	r8, r3
   12838:	mov	r3, r8
   1283c:	ldrb	fp, [r3], #1
   12840:	cmp	fp, #11
   12844:	mov	r8, r3
   12848:	beq	128f0 <__assert_fail@plt+0x1528>
   1284c:	bhi	128a4 <__assert_fail@plt+0x14dc>
   12850:	cmp	fp, #9
   12854:	beq	1292c <__assert_fail@plt+0x1564>
   12858:	cmp	fp, #10
   1285c:	beq	128c0 <__assert_fail@plt+0x14f8>
   12860:	bl	11260 <__ctype_b_loc@plt>
   12864:	ldr	r1, [r0]
   12868:	lsl	r2, fp, #1
   1286c:	ldrh	r2, [r1, r2]
   12870:	tst	r2, #16384	; 0x4000
   12874:	beq	12904 <__assert_fail@plt+0x153c>
   12878:	adds	r6, r6, #1
   1287c:	adc	r7, r7, #0
   12880:	tst	r2, #8192	; 0x2000
   12884:	bne	128f0 <__assert_fail@plt+0x1528>
   12888:	mov	r0, fp
   1288c:	bl	112e4 <btowc@plt>
   12890:	bl	11ecc <__assert_fail@plt+0xb04>
   12894:	cmp	r0, #0
   12898:	bne	128f0 <__assert_fail@plt+0x1528>
   1289c:	mov	r9, #1
   128a0:	b	12904 <__assert_fail@plt+0x153c>
   128a4:	cmp	fp, #13
   128a8:	bls	128d8 <__assert_fail@plt+0x1510>
   128ac:	cmp	fp, #32
   128b0:	bne	12860 <__assert_fail@plt+0x1498>
   128b4:	adds	r6, r6, #1
   128b8:	adc	r7, r7, #0
   128bc:	b	128f0 <__assert_fail@plt+0x1528>
   128c0:	ldr	r2, [sp, #96]	; 0x60
   128c4:	ldr	r1, [sp, #100]	; 0x64
   128c8:	adds	r2, r2, #1
   128cc:	adc	r1, r1, #0
   128d0:	str	r2, [sp, #96]	; 0x60
   128d4:	str	r1, [sp, #100]	; 0x64
   128d8:	cmp	r5, r7
   128dc:	cmpeq	r4, r6
   128e0:	movcc	r4, r6
   128e4:	movcc	r5, r7
   128e8:	mov	r6, #0
   128ec:	mov	r7, #0
   128f0:	ldrd	r2, [sp, #32]
   128f4:	adds	r2, r2, r9
   128f8:	mov	r9, #0
   128fc:	adc	r3, r3, #0
   12900:	strd	r2, [sp, #32]
   12904:	subs	sl, sl, #1
   12908:	bne	12838 <__assert_fail@plt+0x1470>
   1290c:	mov	r2, #16384	; 0x4000
   12910:	add	r1, sp, #132	; 0x84
   12914:	ldr	r0, [sp, #40]	; 0x28
   12918:	bl	14ce8 <__assert_fail@plt+0x3920>
   1291c:	subs	sl, r0, #0
   12920:	bne	127bc <__assert_fail@plt+0x13f4>
   12924:	mov	r8, #1
   12928:	b	127f4 <__assert_fail@plt+0x142c>
   1292c:	bic	r2, r6, #7
   12930:	adds	r6, r2, #8
   12934:	adc	r7, r7, #0
   12938:	b	128f0 <__assert_fail@plt+0x1528>
   1293c:	mov	r6, r2
   12940:	mov	r7, r2
   12944:	mov	r9, #0
   12948:	mov	r4, r2
   1294c:	mov	r5, r2
   12950:	strd	r6, [sp, #32]
   12954:	b	1290c <__assert_fail@plt+0x1544>
   12958:	ldrdeq	r6, [r1], -r5
   1295c:	andeq	r7, r2, r0, lsr #3
   12960:	andeq	r6, r1, r1, lsr #18
   12964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12968:	sub	sp, sp, #16384	; 0x4000
   1296c:	mov	sl, #0
   12970:	sub	sp, sp, #44	; 0x2c
   12974:	mov	fp, #0
   12978:	mov	r6, sl
   1297c:	mov	r7, fp
   12980:	add	r9, sp, #36	; 0x24
   12984:	str	r2, [sp, #4]
   12988:	str	r3, [sp, #24]
   1298c:	mov	r3, #0
   12990:	strd	r0, [sp, #16]
   12994:	mov	r2, #16384	; 0x4000
   12998:	mov	r1, r9
   1299c:	ldr	r0, [sp, #20]
   129a0:	str	r3, [sp, #28]
   129a4:	bl	14ce8 <__assert_fail@plt+0x3920>
   129a8:	subs	r8, r0, #0
   129ac:	ldr	r3, [sp, #28]
   129b0:	bne	129cc <__assert_fail@plt+0x1604>
   129b4:	ldr	r3, [sp, #24]
   129b8:	mov	r0, #1
   129bc:	strd	sl, [r3]
   129c0:	ldr	r3, [sp, #4]
   129c4:	strd	r6, [r3]
   129c8:	b	12a04 <__assert_fail@plt+0x163c>
   129cc:	cmn	r8, #1
   129d0:	bne	12a10 <__assert_fail@plt+0x1648>
   129d4:	bl	112b4 <__errno_location@plt>
   129d8:	ldr	r4, [r0]
   129dc:	mov	r1, #3
   129e0:	mov	r0, #0
   129e4:	ldr	r2, [sp, #16]
   129e8:	bl	148b0 <__assert_fail@plt+0x34e8>
   129ec:	mov	r3, r0
   129f0:	ldr	r2, [pc, #208]	; 12ac8 <__assert_fail@plt+0x1700>
   129f4:	mov	r0, #0
   129f8:	mov	r1, r4
   129fc:	bl	111f4 <error@plt>
   12a00:	mov	r0, #0
   12a04:	add	sp, sp, #16384	; 0x4000
   12a08:	add	sp, sp, #44	; 0x2c
   12a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a10:	adds	sl, sl, r8
   12a14:	add	r2, r9, r8
   12a18:	adc	fp, fp, #0
   12a1c:	cmp	r3, #0
   12a20:	moveq	r4, r6
   12a24:	moveq	r5, r7
   12a28:	moveq	r3, r9
   12a2c:	beq	12a84 <__assert_fail@plt+0x16bc>
   12a30:	mov	r3, #10
   12a34:	mov	r4, r6
   12a38:	mov	r5, r7
   12a3c:	mov	r0, r9
   12a40:	strb	r3, [r9, r8]
   12a44:	mov	r1, #10
   12a48:	str	r2, [sp, #28]
   12a4c:	bl	11194 <rawmemchr@plt>
   12a50:	ldr	r2, [sp, #28]
   12a54:	cmp	r2, r0
   12a58:	bls	12a8c <__assert_fail@plt+0x16c4>
   12a5c:	adds	r4, r4, #1
   12a60:	add	r0, r0, #1
   12a64:	adc	r5, r5, #0
   12a68:	b	12a44 <__assert_fail@plt+0x167c>
   12a6c:	ldrb	r1, [r3], #1
   12a70:	sub	r1, r1, #10
   12a74:	clz	r1, r1
   12a78:	lsr	r1, r1, #5
   12a7c:	adds	r4, r4, r1
   12a80:	adc	r5, r5, #0
   12a84:	cmp	r2, r3
   12a88:	bne	12a6c <__assert_fail@plt+0x16a4>
   12a8c:	mov	r2, #15
   12a90:	subs	r3, r4, r6
   12a94:	mov	r6, r4
   12a98:	udiv	r8, r8, r2
   12a9c:	str	r3, [sp, #8]
   12aa0:	sbc	r3, r5, r7
   12aa4:	mov	r7, r5
   12aa8:	str	r3, [sp, #12]
   12aac:	mov	r3, #0
   12ab0:	ldrd	r0, [sp, #8]
   12ab4:	cmp	r1, r3
   12ab8:	cmpeq	r0, r8
   12abc:	movls	r3, #1
   12ac0:	movhi	r3, #0
   12ac4:	b	12994 <__assert_fail@plt+0x15cc>
   12ac8:	andeq	r6, r1, r1, lsr #18
   12acc:	cmp	r3, #0
   12ad0:	cmpne	r2, #0
   12ad4:	beq	12adc <__assert_fail@plt+0x1714>
   12ad8:	b	12964 <__assert_fail@plt+0x159c>
   12adc:	mov	r0, #0
   12ae0:	bx	lr
   12ae4:	subs	r5, r0, #0
   12ae8:	push	{r7, lr}
   12aec:	sub	sp, sp, #56	; 0x38
   12af0:	ldr	r4, [pc, #524]	; 12d04 <__assert_fail@plt+0x193c>
   12af4:	beq	12b2c <__assert_fail@plt+0x1764>
   12af8:	mov	r2, #5
   12afc:	mov	r0, #0
   12b00:	ldr	r3, [pc, #512]	; 12d08 <__assert_fail@plt+0x1940>
   12b04:	ldr	r1, [pc, #512]	; 12d0c <__assert_fail@plt+0x1944>
   12b08:	ldr	r6, [r3]
   12b0c:	bl	11158 <dcgettext@plt>
   12b10:	mov	r2, r0
   12b14:	mov	r1, #1
   12b18:	ldr	r3, [r4]
   12b1c:	mov	r0, r6
   12b20:	bl	11314 <__fprintf_chk@plt>
   12b24:	mov	r0, r5
   12b28:	bl	1126c <exit@plt>
   12b2c:	mov	r2, #5
   12b30:	ldr	r1, [pc, #472]	; 12d10 <__assert_fail@plt+0x1948>
   12b34:	mov	r6, sp
   12b38:	bl	11158 <dcgettext@plt>
   12b3c:	ldr	r3, [r4]
   12b40:	mov	r1, r0
   12b44:	mov	r0, #1
   12b48:	ldr	r4, [pc, #452]	; 12d14 <__assert_fail@plt+0x194c>
   12b4c:	ldr	r7, [pc, #452]	; 12d18 <__assert_fail@plt+0x1950>
   12b50:	mov	r2, r3
   12b54:	bl	112fc <__printf_chk@plt>
   12b58:	mov	r2, #5
   12b5c:	ldr	r1, [pc, #440]	; 12d1c <__assert_fail@plt+0x1954>
   12b60:	mov	r0, r5
   12b64:	bl	11158 <dcgettext@plt>
   12b68:	ldr	r1, [r4]
   12b6c:	bl	110a4 <fputs_unlocked@plt>
   12b70:	mov	r2, #5
   12b74:	ldr	r1, [pc, #420]	; 12d20 <__assert_fail@plt+0x1958>
   12b78:	mov	r0, r5
   12b7c:	bl	11158 <dcgettext@plt>
   12b80:	ldr	r1, [r4]
   12b84:	bl	110a4 <fputs_unlocked@plt>
   12b88:	mov	r2, #5
   12b8c:	ldr	r1, [pc, #400]	; 12d24 <__assert_fail@plt+0x195c>
   12b90:	mov	r0, r5
   12b94:	bl	11158 <dcgettext@plt>
   12b98:	ldr	r1, [r4]
   12b9c:	bl	110a4 <fputs_unlocked@plt>
   12ba0:	mov	r2, #5
   12ba4:	ldr	r1, [pc, #380]	; 12d28 <__assert_fail@plt+0x1960>
   12ba8:	mov	r0, r5
   12bac:	bl	11158 <dcgettext@plt>
   12bb0:	ldr	r1, [r4]
   12bb4:	bl	110a4 <fputs_unlocked@plt>
   12bb8:	mov	r2, #5
   12bbc:	ldr	r1, [pc, #360]	; 12d2c <__assert_fail@plt+0x1964>
   12bc0:	mov	r0, r5
   12bc4:	bl	11158 <dcgettext@plt>
   12bc8:	ldr	r1, [r4]
   12bcc:	bl	110a4 <fputs_unlocked@plt>
   12bd0:	mov	r2, #5
   12bd4:	ldr	r1, [pc, #340]	; 12d30 <__assert_fail@plt+0x1968>
   12bd8:	mov	r0, r5
   12bdc:	bl	11158 <dcgettext@plt>
   12be0:	ldr	r1, [r4]
   12be4:	bl	110a4 <fputs_unlocked@plt>
   12be8:	ldr	lr, [pc, #324]	; 12d34 <__assert_fail@plt+0x196c>
   12bec:	mov	ip, sp
   12bf0:	ldm	lr!, {r0, r1, r2, r3}
   12bf4:	stmia	ip!, {r0, r1, r2, r3}
   12bf8:	ldm	lr!, {r0, r1, r2, r3}
   12bfc:	stmia	ip!, {r0, r1, r2, r3}
   12c00:	ldm	lr!, {r0, r1, r2, r3}
   12c04:	stmia	ip!, {r0, r1, r2, r3}
   12c08:	ldm	lr, {r0, r1}
   12c0c:	stm	ip, {r0, r1}
   12c10:	ldr	r1, [r6]
   12c14:	cmp	r1, #0
   12c18:	bne	12cbc <__assert_fail@plt+0x18f4>
   12c1c:	ldr	r6, [r6, #4]
   12c20:	mov	r2, #5
   12c24:	mov	r0, #0
   12c28:	ldr	r7, [pc, #232]	; 12d18 <__assert_fail@plt+0x1950>
   12c2c:	ldr	r1, [pc, #260]	; 12d38 <__assert_fail@plt+0x1970>
   12c30:	cmp	r6, #0
   12c34:	moveq	r6, r7
   12c38:	bl	11158 <dcgettext@plt>
   12c3c:	mov	r1, r0
   12c40:	ldr	r3, [pc, #244]	; 12d3c <__assert_fail@plt+0x1974>
   12c44:	mov	r0, #1
   12c48:	ldr	r2, [pc, #240]	; 12d40 <__assert_fail@plt+0x1978>
   12c4c:	bl	112fc <__printf_chk@plt>
   12c50:	mov	r1, #0
   12c54:	mov	r0, #5
   12c58:	bl	11338 <setlocale@plt>
   12c5c:	cmp	r0, #0
   12c60:	bne	12cd4 <__assert_fail@plt+0x190c>
   12c64:	mov	r2, #5
   12c68:	ldr	r1, [pc, #212]	; 12d44 <__assert_fail@plt+0x197c>
   12c6c:	mov	r0, #0
   12c70:	bl	11158 <dcgettext@plt>
   12c74:	mov	r1, r0
   12c78:	ldr	r3, [pc, #152]	; 12d18 <__assert_fail@plt+0x1950>
   12c7c:	mov	r0, #1
   12c80:	ldr	r2, [pc, #180]	; 12d3c <__assert_fail@plt+0x1974>
   12c84:	bl	112fc <__printf_chk@plt>
   12c88:	mov	r2, #5
   12c8c:	ldr	r1, [pc, #180]	; 12d48 <__assert_fail@plt+0x1980>
   12c90:	mov	r0, #0
   12c94:	bl	11158 <dcgettext@plt>
   12c98:	ldr	r2, [pc, #172]	; 12d4c <__assert_fail@plt+0x1984>
   12c9c:	cmp	r6, r7
   12ca0:	mov	r1, r0
   12ca4:	mov	r0, #1
   12ca8:	ldr	r3, [pc, #160]	; 12d50 <__assert_fail@plt+0x1988>
   12cac:	moveq	r3, r2
   12cb0:	mov	r2, r6
   12cb4:	bl	112fc <__printf_chk@plt>
   12cb8:	b	12b24 <__assert_fail@plt+0x175c>
   12cbc:	mov	r0, r7
   12cc0:	bl	110bc <strcmp@plt>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12c1c <__assert_fail@plt+0x1854>
   12ccc:	add	r6, r6, #8
   12cd0:	b	12c10 <__assert_fail@plt+0x1848>
   12cd4:	mov	r2, #3
   12cd8:	ldr	r1, [pc, #116]	; 12d54 <__assert_fail@plt+0x198c>
   12cdc:	bl	11398 <strncmp@plt>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12c64 <__assert_fail@plt+0x189c>
   12ce8:	mov	r2, #5
   12cec:	ldr	r1, [pc, #100]	; 12d58 <__assert_fail@plt+0x1990>
   12cf0:	mov	r0, #0
   12cf4:	bl	11158 <dcgettext@plt>
   12cf8:	ldr	r1, [r4]
   12cfc:	bl	110a4 <fputs_unlocked@plt>
   12d00:	b	12c64 <__assert_fail@plt+0x189c>
   12d04:	andeq	r7, r2, r8, ror #3
   12d08:	andeq	r7, r2, r8, lsl #3
   12d0c:	andeq	r6, r1, r7, ror #3
   12d10:	andeq	r6, r1, lr, lsl #4
   12d14:	muleq	r2, r4, r1
   12d18:	andeq	r6, r1, r4, ror #3
   12d1c:	andeq	r6, r1, r5, asr r2
   12d20:	andeq	r6, r1, r7, lsl r3
   12d24:	andeq	r6, r1, pc, asr #6
   12d28:	andeq	r6, r1, ip, ror r4
   12d2c:	andeq	r6, r1, r9, lsr #11
   12d30:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   12d34:	strdeq	r6, [r1], -r8
   12d38:	andeq	r6, r1, ip, lsl #12
   12d3c:	andeq	r6, r1, r3, lsr #12
   12d40:	andeq	r6, r1, fp, asr #12
   12d44:	andeq	r6, r1, r4, lsr #13
   12d48:			; <UNDEFINED> instruction: 0x000166bf
   12d4c:	andeq	r6, r1, r4, lsl #17
   12d50:	strdeq	r6, [r1], -r1
   12d54:	andeq	r6, r1, r9, asr r6
   12d58:	andeq	r6, r1, sp, asr r6
   12d5c:	push	{r4, lr}
   12d60:	mov	r4, r0
   12d64:	mov	r0, #24
   12d68:	bl	155a8 <__assert_fail@plt+0x41e0>
   12d6c:	cmp	r0, #0
   12d70:	movne	r3, #0
   12d74:	strne	r4, [r0, #16]
   12d78:	strne	r3, [r0]
   12d7c:	strne	r4, [r0, #20]
   12d80:	pop	{r4, pc}
   12d84:	push	{r4, lr}
   12d88:	mov	r4, r0
   12d8c:	mov	r0, #24
   12d90:	bl	155a8 <__assert_fail@plt+0x41e0>
   12d94:	cmp	r0, #0
   12d98:	popeq	{r4, pc}
   12d9c:	mov	r3, #0
   12da0:	str	r4, [r0]
   12da4:	str	r3, [r0, #4]
   12da8:	str	r3, [r0, #8]
   12dac:	str	r3, [r0, #12]
   12db0:	str	r3, [r0, #16]
   12db4:	pop	{r4, pc}
   12db8:	ldr	r3, [r0]
   12dbc:	push	{r4, r5, r6, lr}
   12dc0:	mov	r4, r0
   12dc4:	cmp	r3, #0
   12dc8:	beq	12e24 <__assert_fail@plt+0x1a5c>
   12dcc:	mov	r5, r1
   12dd0:	mov	r2, #0
   12dd4:	add	r1, r0, #12
   12dd8:	add	r0, r0, #8
   12ddc:	bl	11374 <getdelim@plt>
   12de0:	cmp	r0, #0
   12de4:	bge	12e08 <__assert_fail@plt+0x1a40>
   12de8:	ldr	r0, [r4]
   12dec:	bl	11278 <feof@plt>
   12df0:	cmp	r0, #0
   12df4:	mov	r0, #0
   12df8:	movne	r3, #2
   12dfc:	moveq	r3, #4
   12e00:	str	r3, [r5]
   12e04:	pop	{r4, r5, r6, pc}
   12e08:	mov	r3, #1
   12e0c:	ldr	r0, [r4, #8]
   12e10:	str	r3, [r5]
   12e14:	ldr	r3, [r4, #4]
   12e18:	add	r3, r3, #1
   12e1c:	str	r3, [r4, #4]
   12e20:	pop	{r4, r5, r6, pc}
   12e24:	ldr	r3, [r0, #20]
   12e28:	ldr	r0, [r3]
   12e2c:	cmp	r0, #0
   12e30:	moveq	r3, #2
   12e34:	movne	r2, #1
   12e38:	addne	r3, r3, #4
   12e3c:	strne	r2, [r1]
   12e40:	streq	r3, [r1]
   12e44:	strne	r3, [r4, #20]
   12e48:	pop	{r4, r5, r6, pc}
   12e4c:	ldr	r3, [r0]
   12e50:	cmp	r3, #0
   12e54:	ldreq	r3, [r0, #20]
   12e58:	ldrne	r0, [r0, #4]
   12e5c:	ldreq	r0, [r0, #16]
   12e60:	subeq	r0, r3, r0
   12e64:	asreq	r0, r0, #2
   12e68:	bx	lr
   12e6c:	ldr	r3, [r0]
   12e70:	push	{r4, lr}
   12e74:	mov	r4, r0
   12e78:	cmp	r3, #0
   12e7c:	beq	12e88 <__assert_fail@plt+0x1ac0>
   12e80:	ldr	r0, [r0, #8]
   12e84:	bl	130b4 <__assert_fail@plt+0x1cec>
   12e88:	mov	r0, r4
   12e8c:	pop	{r4, lr}
   12e90:	b	130b4 <__assert_fail@plt+0x1cec>
   12e94:	ldr	r3, [pc, #4]	; 12ea0 <__assert_fail@plt+0x1ad8>
   12e98:	str	r0, [r3]
   12e9c:	bx	lr
   12ea0:	andeq	r7, r2, r0, ror #3
   12ea4:	ldr	r3, [pc, #4]	; 12eb0 <__assert_fail@plt+0x1ae8>
   12ea8:	strb	r0, [r3, #4]
   12eac:	bx	lr
   12eb0:	andeq	r7, r2, r0, ror #3
   12eb4:	ldr	r3, [pc, #176]	; 12f6c <__assert_fail@plt+0x1ba4>
   12eb8:	push	{r0, r1, r4, r5, r6, lr}
   12ebc:	ldr	r0, [r3]
   12ec0:	bl	15618 <__assert_fail@plt+0x4250>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12f50 <__assert_fail@plt+0x1b88>
   12ecc:	ldr	r4, [pc, #156]	; 12f70 <__assert_fail@plt+0x1ba8>
   12ed0:	bl	112b4 <__errno_location@plt>
   12ed4:	mov	r5, r0
   12ed8:	ldrb	r6, [r4, #4]
   12edc:	cmp	r6, #0
   12ee0:	beq	12ef0 <__assert_fail@plt+0x1b28>
   12ee4:	ldr	r3, [r0]
   12ee8:	cmp	r3, #32
   12eec:	beq	12f50 <__assert_fail@plt+0x1b88>
   12ef0:	mov	r2, #5
   12ef4:	ldr	r1, [pc, #120]	; 12f74 <__assert_fail@plt+0x1bac>
   12ef8:	mov	r0, #0
   12efc:	bl	11158 <dcgettext@plt>
   12f00:	mov	r6, r0
   12f04:	ldr	r0, [r4]
   12f08:	cmp	r0, #0
   12f0c:	beq	12f3c <__assert_fail@plt+0x1b74>
   12f10:	ldr	r4, [r5]
   12f14:	bl	148a0 <__assert_fail@plt+0x34d8>
   12f18:	mov	r3, r0
   12f1c:	ldr	r2, [pc, #84]	; 12f78 <__assert_fail@plt+0x1bb0>
   12f20:	mov	r0, #0
   12f24:	str	r6, [sp]
   12f28:	mov	r1, r4
   12f2c:	bl	111f4 <error@plt>
   12f30:	ldr	r3, [pc, #68]	; 12f7c <__assert_fail@plt+0x1bb4>
   12f34:	ldr	r0, [r3]
   12f38:	bl	1111c <_exit@plt>
   12f3c:	mov	r3, r6
   12f40:	ldr	r2, [pc, #56]	; 12f80 <__assert_fail@plt+0x1bb8>
   12f44:	ldr	r1, [r5]
   12f48:	bl	111f4 <error@plt>
   12f4c:	b	12f30 <__assert_fail@plt+0x1b68>
   12f50:	ldr	r3, [pc, #44]	; 12f84 <__assert_fail@plt+0x1bbc>
   12f54:	ldr	r0, [r3]
   12f58:	bl	15618 <__assert_fail@plt+0x4250>
   12f5c:	cmp	r0, #0
   12f60:	bne	12f30 <__assert_fail@plt+0x1b68>
   12f64:	add	sp, sp, #8
   12f68:	pop	{r4, r5, r6, pc}
   12f6c:	muleq	r2, r4, r1
   12f70:	andeq	r7, r2, r0, ror #3
   12f74:	andeq	r6, r1, r1, lsl r9
   12f78:	andeq	r6, r1, sp, lsl r9
   12f7c:	andeq	r7, r2, r0, lsr r1
   12f80:	andeq	r6, r1, r1, lsr #18
   12f84:	andeq	r7, r2, r8, lsl #3
   12f88:	b	110c8 <posix_fadvise64@plt>
   12f8c:	cmp	r0, #0
   12f90:	bxeq	lr
   12f94:	push	{r0, r1, r2, r3, r4, lr}
   12f98:	mov	r4, r1
   12f9c:	bl	11308 <fileno@plt>
   12fa0:	mov	r2, #0
   12fa4:	mov	r3, #0
   12fa8:	strd	r2, [sp]
   12fac:	str	r4, [sp, #8]
   12fb0:	bl	110c8 <posix_fadvise64@plt>
   12fb4:	add	sp, sp, #16
   12fb8:	pop	{r4, pc}
   12fbc:	push	{r0, r1, r2, r4, r5, lr}
   12fc0:	mov	r4, r0
   12fc4:	bl	11308 <fileno@plt>
   12fc8:	cmp	r0, #0
   12fcc:	mov	r0, r4
   12fd0:	bge	12fe0 <__assert_fail@plt+0x1c18>
   12fd4:	add	sp, sp, #12
   12fd8:	pop	{r4, r5, lr}
   12fdc:	b	11320 <fclose@plt>
   12fe0:	bl	1123c <__freading@plt>
   12fe4:	cmp	r0, #0
   12fe8:	bne	13024 <__assert_fail@plt+0x1c5c>
   12fec:	mov	r0, r4
   12ff0:	bl	13064 <__assert_fail@plt+0x1c9c>
   12ff4:	cmp	r0, #0
   12ff8:	bne	13058 <__assert_fail@plt+0x1c90>
   12ffc:	mov	r5, #0
   13000:	mov	r0, r4
   13004:	bl	11320 <fclose@plt>
   13008:	cmp	r5, #0
   1300c:	beq	1301c <__assert_fail@plt+0x1c54>
   13010:	bl	112b4 <__errno_location@plt>
   13014:	str	r5, [r0]
   13018:	mvn	r0, #0
   1301c:	add	sp, sp, #12
   13020:	pop	{r4, r5, pc}
   13024:	mov	r0, r4
   13028:	bl	11308 <fileno@plt>
   1302c:	mov	r3, #1
   13030:	mov	r2, #0
   13034:	str	r3, [sp]
   13038:	mov	r3, #0
   1303c:	bl	111b8 <lseek64@plt>
   13040:	mvn	r3, #0
   13044:	mvn	r2, #0
   13048:	cmp	r1, r3
   1304c:	cmpeq	r0, r2
   13050:	bne	12fec <__assert_fail@plt+0x1c24>
   13054:	b	12ffc <__assert_fail@plt+0x1c34>
   13058:	bl	112b4 <__errno_location@plt>
   1305c:	ldr	r5, [r0]
   13060:	b	13000 <__assert_fail@plt+0x1c38>
   13064:	push	{r0, r1, r4, lr}
   13068:	subs	r4, r0, #0
   1306c:	bne	13080 <__assert_fail@plt+0x1cb8>
   13070:	mov	r0, r4
   13074:	add	sp, sp, #8
   13078:	pop	{r4, lr}
   1307c:	b	110e0 <fflush@plt>
   13080:	bl	1123c <__freading@plt>
   13084:	cmp	r0, #0
   13088:	beq	13070 <__assert_fail@plt+0x1ca8>
   1308c:	ldr	r3, [r4]
   13090:	tst	r3, #256	; 0x100
   13094:	beq	13070 <__assert_fail@plt+0x1ca8>
   13098:	mov	r3, #1
   1309c:	mov	r2, #0
   130a0:	mov	r0, r4
   130a4:	str	r3, [sp]
   130a8:	mov	r3, #0
   130ac:	bl	13104 <__assert_fail@plt+0x1d3c>
   130b0:	b	13070 <__assert_fail@plt+0x1ca8>
   130b4:	push	{r0, r1, r2, r4, r5, lr}
   130b8:	mov	r5, r0
   130bc:	bl	112b4 <__errno_location@plt>
   130c0:	mov	r4, r0
   130c4:	mov	r0, r5
   130c8:	ldr	r3, [r4]
   130cc:	str	r3, [sp]
   130d0:	str	r3, [sp, #4]
   130d4:	mov	r3, #0
   130d8:	str	r3, [r4]
   130dc:	bl	11104 <free@plt>
   130e0:	ldr	r3, [r4]
   130e4:	add	r2, sp, #8
   130e8:	clz	r3, r3
   130ec:	lsr	r3, r3, #5
   130f0:	add	r3, r2, r3, lsl #2
   130f4:	ldr	r3, [r3, #-8]
   130f8:	str	r3, [r4]
   130fc:	add	sp, sp, #12
   13100:	pop	{r4, r5, pc}
   13104:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13108:	mov	r4, r0
   1310c:	ldmib	r0, {ip, lr}
   13110:	ldr	r8, [sp, #32]
   13114:	cmp	lr, ip
   13118:	bne	13188 <__assert_fail@plt+0x1dc0>
   1311c:	ldr	ip, [r0, #16]
   13120:	ldr	lr, [r0, #20]
   13124:	cmp	lr, ip
   13128:	bne	13188 <__assert_fail@plt+0x1dc0>
   1312c:	ldr	r5, [r0, #36]	; 0x24
   13130:	cmp	r5, #0
   13134:	bne	13188 <__assert_fail@plt+0x1dc0>
   13138:	mov	r6, r2
   1313c:	mov	r7, r3
   13140:	bl	11308 <fileno@plt>
   13144:	mov	r2, r6
   13148:	mov	r3, r7
   1314c:	str	r8, [sp]
   13150:	bl	111b8 <lseek64@plt>
   13154:	mvn	r3, #0
   13158:	mvn	r2, #0
   1315c:	cmp	r1, r3
   13160:	cmpeq	r0, r2
   13164:	mvneq	r0, #0
   13168:	beq	13180 <__assert_fail@plt+0x1db8>
   1316c:	ldr	r3, [r4]
   13170:	strd	r0, [r4, #80]	; 0x50
   13174:	mov	r0, r5
   13178:	bic	r3, r3, #16
   1317c:	str	r3, [r4]
   13180:	add	sp, sp, #8
   13184:	pop	{r4, r5, r6, r7, r8, pc}
   13188:	mov	r0, r4
   1318c:	str	r8, [sp, #32]
   13190:	add	sp, sp, #8
   13194:	pop	{r4, r5, r6, r7, r8, lr}
   13198:	b	1132c <fseeko64@plt>
   1319c:	push	{r4, r5, r6, lr}
   131a0:	mov	r3, #0
   131a4:	mov	r4, r0
   131a8:	mov	r5, r1
   131ac:	add	r6, r2, #20
   131b0:	strb	r3, [r2, #20]
   131b4:	mov	r2, #10
   131b8:	mov	r3, #0
   131bc:	mov	r0, r4
   131c0:	mov	r1, r5
   131c4:	bl	15ed4 <_obstack_memory_used@@Base+0x494>
   131c8:	add	r2, r2, #48	; 0x30
   131cc:	mov	r3, #0
   131d0:	mov	r0, r4
   131d4:	mov	r1, r5
   131d8:	strb	r2, [r6, #-1]!
   131dc:	mov	r2, #10
   131e0:	bl	15ed4 <_obstack_memory_used@@Base+0x494>
   131e4:	cmp	r5, #0
   131e8:	cmpeq	r4, #9
   131ec:	bhi	131f8 <__assert_fail@plt+0x1e30>
   131f0:	mov	r0, r6
   131f4:	pop	{r4, r5, r6, pc}
   131f8:	mov	r4, r0
   131fc:	mov	r5, r1
   13200:	b	131b4 <__assert_fail@plt+0x1dec>
   13204:	push	{r4, lr}
   13208:	mov	r4, r0
   1320c:	bl	110ec <wcwidth@plt>
   13210:	cmp	r0, #0
   13214:	popge	{r4, pc}
   13218:	mov	r0, r4
   1321c:	bl	11188 <iswcntrl@plt>
   13220:	clz	r0, r0
   13224:	lsr	r0, r0, #5
   13228:	pop	{r4, pc}
   1322c:	mov	r3, r1
   13230:	push	{r4, r5, r6, lr}
   13234:	mov	r5, r1
   13238:	mov	r4, r0
   1323c:	ldr	r1, [r3], #16
   13240:	cmp	r1, r3
   13244:	strne	r1, [r0]
   13248:	bne	13260 <__assert_fail@plt+0x1e98>
   1324c:	add	r3, r0, #16
   13250:	ldr	r2, [r5, #4]
   13254:	mov	r0, r3
   13258:	bl	11128 <memcpy@plt>
   1325c:	str	r0, [r4]
   13260:	ldr	r3, [r5, #4]
   13264:	str	r3, [r4, #4]
   13268:	ldrb	r3, [r5, #8]
   1326c:	cmp	r3, #0
   13270:	strb	r3, [r4, #8]
   13274:	ldrne	r3, [r5, #12]
   13278:	strne	r3, [r4, #12]
   1327c:	pop	{r4, r5, r6, pc}
   13280:	ldr	r3, [pc, #20]	; 1329c <__assert_fail@plt+0x1ed4>
   13284:	lsr	r2, r0, #5
   13288:	and	r0, r0, #31
   1328c:	ldr	r3, [r3, r2, lsl #2]
   13290:	lsr	r0, r3, r0
   13294:	and	r0, r0, #1
   13298:	bx	lr
   1329c:	andeq	r6, r1, r4, lsr #18
   132a0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132a4:	subs	r5, r0, #0
   132a8:	mov	r7, r2
   132ac:	addeq	r5, sp, #4
   132b0:	mov	r6, r1
   132b4:	mov	r0, r5
   132b8:	bl	111e8 <mbrtowc@plt>
   132bc:	cmp	r7, #0
   132c0:	cmnne	r0, #3
   132c4:	mov	r4, r0
   132c8:	bls	132e4 <__assert_fail@plt+0x1f1c>
   132cc:	mov	r0, #0
   132d0:	bl	15688 <__assert_fail@plt+0x42c0>
   132d4:	cmp	r0, #0
   132d8:	ldrbeq	r3, [r6]
   132dc:	moveq	r4, #1
   132e0:	streq	r3, [r5]
   132e4:	mov	r0, r4
   132e8:	add	sp, sp, #12
   132ec:	pop	{r4, r5, r6, r7, pc}
   132f0:	push	{r4, lr}
   132f4:	mov	r0, #85	; 0x55
   132f8:	sub	sp, sp, #64	; 0x40
   132fc:	bl	11164 <sysconf@plt>
   13300:	mov	r4, r0
   13304:	mov	r0, #30
   13308:	bl	11164 <sysconf@plt>
   1330c:	cmp	r4, #0
   13310:	cmpge	r0, #0
   13314:	blt	13334 <__assert_fail@plt+0x1f6c>
   13318:	vmov	s15, r4
   1331c:	vmov	s13, r0
   13320:	vcvt.f64.s32	d7, s15
   13324:	vcvt.f64.s32	d0, s13
   13328:	vmul.f64	d0, d0, d7
   1332c:	add	sp, sp, #64	; 0x40
   13330:	pop	{r4, pc}
   13334:	mov	r0, sp
   13338:	bl	11218 <sysinfo@plt>
   1333c:	cmp	r0, #0
   13340:	vldrne	d0, [pc, #24]	; 13360 <__assert_fail@plt+0x1f98>
   13344:	bne	1332c <__assert_fail@plt+0x1f64>
   13348:	vldr	s15, [sp, #16]
   1334c:	vcvt.f64.u32	d0, s15
   13350:	vldr	s15, [sp, #52]	; 0x34
   13354:	vcvt.f64.u32	d7, s15
   13358:	b	13328 <__assert_fail@plt+0x1f60>
   1335c:	nop	{0}
   13360:	andeq	r0, r0, r0
   13364:	orrsmi	r0, r0, r0
   13368:	push	{r4, lr}
   1336c:	mov	r0, #86	; 0x56
   13370:	sub	sp, sp, #64	; 0x40
   13374:	bl	11164 <sysconf@plt>
   13378:	mov	r4, r0
   1337c:	mov	r0, #30
   13380:	bl	11164 <sysconf@plt>
   13384:	cmp	r0, #0
   13388:	cmpge	r4, #0
   1338c:	blt	133ac <__assert_fail@plt+0x1fe4>
   13390:	vmov	s15, r4
   13394:	vmov	s13, r0
   13398:	vcvt.f64.s32	d7, s15
   1339c:	vcvt.f64.s32	d0, s13
   133a0:	vmul.f64	d0, d0, d7
   133a4:	add	sp, sp, #64	; 0x40
   133a8:	pop	{r4, pc}
   133ac:	mov	r0, sp
   133b0:	bl	11218 <sysinfo@plt>
   133b4:	cmp	r0, #0
   133b8:	bne	133dc <__assert_fail@plt+0x2014>
   133bc:	vldr	s15, [sp, #20]
   133c0:	vcvt.f64.u32	d0, s15
   133c4:	vldr	s15, [sp, #28]
   133c8:	vcvt.f64.u32	d7, s15
   133cc:	vadd.f64	d0, d0, d7
   133d0:	vldr	s15, [sp, #52]	; 0x34
   133d4:	vcvt.f64.u32	d7, s15
   133d8:	b	133a0 <__assert_fail@plt+0x1fd8>
   133dc:	bl	132f0 <__assert_fail@plt+0x1f28>
   133e0:	vldr	d7, [pc]	; 133e8 <__assert_fail@plt+0x2020>
   133e4:	b	133a0 <__assert_fail@plt+0x1fd8>
   133e8:	andeq	r0, r0, r0
   133ec:	svccc	0x00d00000
   133f0:	push	{r4, r5, r6, lr}
   133f4:	subs	r4, r0, #0
   133f8:	bne	13410 <__assert_fail@plt+0x2048>
   133fc:	ldr	r3, [pc, #124]	; 13480 <__assert_fail@plt+0x20b8>
   13400:	ldr	r0, [pc, #124]	; 13484 <__assert_fail@plt+0x20bc>
   13404:	ldr	r1, [r3]
   13408:	bl	1138c <fputs@plt>
   1340c:	bl	113a4 <abort@plt>
   13410:	mov	r1, #47	; 0x2f
   13414:	bl	11344 <strrchr@plt>
   13418:	subs	r6, r0, #0
   1341c:	beq	1346c <__assert_fail@plt+0x20a4>
   13420:	add	r5, r6, #1
   13424:	sub	r3, r5, r4
   13428:	cmp	r3, #6
   1342c:	ble	1346c <__assert_fail@plt+0x20a4>
   13430:	mov	r2, #7
   13434:	ldr	r1, [pc, #76]	; 13488 <__assert_fail@plt+0x20c0>
   13438:	sub	r0, r6, #6
   1343c:	bl	11398 <strncmp@plt>
   13440:	cmp	r0, #0
   13444:	bne	1346c <__assert_fail@plt+0x20a4>
   13448:	mov	r2, #3
   1344c:	ldr	r1, [pc, #56]	; 1348c <__assert_fail@plt+0x20c4>
   13450:	mov	r0, r5
   13454:	bl	11398 <strncmp@plt>
   13458:	cmp	r0, #0
   1345c:	ldreq	r3, [pc, #44]	; 13490 <__assert_fail@plt+0x20c8>
   13460:	addeq	r4, r6, #4
   13464:	movne	r4, r5
   13468:	streq	r4, [r3]
   1346c:	ldr	r3, [pc, #32]	; 13494 <__assert_fail@plt+0x20cc>
   13470:	str	r4, [r3]
   13474:	ldr	r3, [pc, #28]	; 13498 <__assert_fail@plt+0x20d0>
   13478:	str	r4, [r3]
   1347c:	pop	{r4, r5, r6, pc}
   13480:	andeq	r7, r2, r8, lsl #3
   13484:	andeq	r6, r1, r4, asr #18
   13488:	andeq	r6, r1, ip, ror r9
   1348c:	andeq	r6, r1, r4, lsl #19
   13490:	andeq	r7, r2, r8, ror r1
   13494:	andeq	r7, r2, r8, ror #3
   13498:	andeq	r7, r2, ip, ror r1
   1349c:	push	{r4, lr}
   134a0:	mov	r2, #48	; 0x30
   134a4:	mov	r4, r1
   134a8:	mov	r1, #0
   134ac:	bl	112d8 <memset@plt>
   134b0:	cmp	r4, #10
   134b4:	bne	134bc <__assert_fail@plt+0x20f4>
   134b8:	bl	113a4 <abort@plt>
   134bc:	str	r4, [r0]
   134c0:	pop	{r4, pc}
   134c4:	push	{r4, r5, r6, lr}
   134c8:	mov	r2, #5
   134cc:	mov	r6, r0
   134d0:	mov	r5, r1
   134d4:	mov	r1, r0
   134d8:	mov	r0, #0
   134dc:	bl	11158 <dcgettext@plt>
   134e0:	cmp	r6, r0
   134e4:	mov	r4, r0
   134e8:	bne	13558 <__assert_fail@plt+0x2190>
   134ec:	bl	1570c <__assert_fail@plt+0x4344>
   134f0:	ldrb	r3, [r0]
   134f4:	bic	r3, r3, #32
   134f8:	cmp	r3, #85	; 0x55
   134fc:	bne	13560 <__assert_fail@plt+0x2198>
   13500:	ldrb	r3, [r0, #1]
   13504:	bic	r3, r3, #32
   13508:	cmp	r3, #84	; 0x54
   1350c:	bne	135d0 <__assert_fail@plt+0x2208>
   13510:	ldrb	r3, [r0, #2]
   13514:	bic	r3, r3, #32
   13518:	cmp	r3, #70	; 0x46
   1351c:	bne	135d0 <__assert_fail@plt+0x2208>
   13520:	ldrb	r3, [r0, #3]
   13524:	cmp	r3, #45	; 0x2d
   13528:	bne	135d0 <__assert_fail@plt+0x2208>
   1352c:	ldrb	r3, [r0, #4]
   13530:	cmp	r3, #56	; 0x38
   13534:	bne	135d0 <__assert_fail@plt+0x2208>
   13538:	ldrb	r3, [r0, #5]
   1353c:	cmp	r3, #0
   13540:	bne	135d0 <__assert_fail@plt+0x2208>
   13544:	ldrb	r2, [r4]
   13548:	ldr	r3, [pc, #144]	; 135e0 <__assert_fail@plt+0x2218>
   1354c:	ldr	r4, [pc, #144]	; 135e4 <__assert_fail@plt+0x221c>
   13550:	cmp	r2, #96	; 0x60
   13554:	movne	r4, r3
   13558:	mov	r0, r4
   1355c:	pop	{r4, r5, r6, pc}
   13560:	cmp	r3, #71	; 0x47
   13564:	bne	135d0 <__assert_fail@plt+0x2208>
   13568:	ldrb	r3, [r0, #1]
   1356c:	bic	r3, r3, #32
   13570:	cmp	r3, #66	; 0x42
   13574:	bne	135d0 <__assert_fail@plt+0x2208>
   13578:	ldrb	r3, [r0, #2]
   1357c:	cmp	r3, #49	; 0x31
   13580:	bne	135d0 <__assert_fail@plt+0x2208>
   13584:	ldrb	r3, [r0, #3]
   13588:	cmp	r3, #56	; 0x38
   1358c:	bne	135d0 <__assert_fail@plt+0x2208>
   13590:	ldrb	r3, [r0, #4]
   13594:	cmp	r3, #48	; 0x30
   13598:	bne	135d0 <__assert_fail@plt+0x2208>
   1359c:	ldrb	r3, [r0, #5]
   135a0:	cmp	r3, #51	; 0x33
   135a4:	bne	135d0 <__assert_fail@plt+0x2208>
   135a8:	ldrb	r3, [r0, #6]
   135ac:	cmp	r3, #48	; 0x30
   135b0:	bne	135d0 <__assert_fail@plt+0x2208>
   135b4:	ldrb	r3, [r0, #7]
   135b8:	cmp	r3, #0
   135bc:	bne	135d0 <__assert_fail@plt+0x2208>
   135c0:	ldrb	r2, [r4]
   135c4:	ldr	r3, [pc, #28]	; 135e8 <__assert_fail@plt+0x2220>
   135c8:	ldr	r4, [pc, #28]	; 135ec <__assert_fail@plt+0x2224>
   135cc:	b	13550 <__assert_fail@plt+0x2188>
   135d0:	ldr	r4, [pc, #24]	; 135f0 <__assert_fail@plt+0x2228>
   135d4:	cmp	r5, #9
   135d8:	ldr	r3, [pc, #20]	; 135f4 <__assert_fail@plt+0x222c>
   135dc:	b	13554 <__assert_fail@plt+0x218c>
   135e0:	ldrdeq	r6, [r1], -ip
   135e4:	andeq	r6, r1, r7, ror #19
   135e8:	andeq	r6, r1, r0, ror #19
   135ec:	andeq	r6, r1, r3, ror #19
   135f0:	strdeq	r6, [r1], -r8
   135f4:	andeq	r6, r1, fp, ror #19
   135f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135fc:	sub	sp, sp, #108	; 0x6c
   13600:	mov	r8, r0
   13604:	mov	r5, r1
   13608:	mov	r6, #0
   1360c:	str	r3, [sp, #40]	; 0x28
   13610:	str	r2, [sp, #48]	; 0x30
   13614:	ldr	sl, [sp, #144]	; 0x90
   13618:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   1361c:	ldr	r3, [sp, #148]	; 0x94
   13620:	str	r6, [sp, #24]
   13624:	str	r6, [sp, #32]
   13628:	str	r6, [sp, #44]	; 0x2c
   1362c:	str	r6, [sp, #52]	; 0x34
   13630:	ubfx	r7, r3, #1, #1
   13634:	mov	r3, #1
   13638:	str	r6, [sp, #60]	; 0x3c
   1363c:	str	r3, [sp, #72]	; 0x48
   13640:	str	r0, [sp, #76]	; 0x4c
   13644:	cmp	sl, #10
   13648:	ldrls	pc, [pc, sl, lsl #2]
   1364c:	b	13890 <__assert_fail@plt+0x24c8>
   13650:	andeq	r3, r1, ip, ror r6
   13654:	andeq	r3, r1, r8, lsr #17
   13658:	andeq	r3, r1, ip, lsr #16
   1365c:	andeq	r3, r1, r4, asr #16
   13660:	andeq	r3, r1, r4, lsl r8
   13664:	andeq	r3, r1, ip, ror #14
   13668:	andeq	r3, r1, ip, asr #14
   1366c:	muleq	r1, r4, r8
   13670:	muleq	r1, ip, r7
   13674:	muleq	r1, ip, r7
   13678:	muleq	r1, ip, r7
   1367c:	mov	r4, sl
   13680:	mov	r7, #0
   13684:	mov	r9, r5
   13688:	mov	r3, #0
   1368c:	str	r6, [sp, #68]	; 0x44
   13690:	str	r3, [sp, #28]
   13694:	ldr	r3, [sp, #40]	; 0x28
   13698:	cmn	r3, #1
   1369c:	bne	1423c <__assert_fail@plt+0x2e74>
   136a0:	ldr	r2, [sp, #28]
   136a4:	ldr	r3, [sp, #48]	; 0x30
   136a8:	ldrb	r3, [r3, r2]
   136ac:	adds	r3, r3, #0
   136b0:	movne	r3, #1
   136b4:	str	r3, [sp, #36]	; 0x24
   136b8:	ldr	r3, [sp, #36]	; 0x24
   136bc:	cmp	r3, #0
   136c0:	bne	138cc <__assert_fail@plt+0x2504>
   136c4:	sub	r3, sl, #2
   136c8:	cmp	r4, #0
   136cc:	clz	r3, r3
   136d0:	movne	r2, #0
   136d4:	lsr	r3, r3, #5
   136d8:	andeq	r2, r3, r7
   136dc:	cmp	r2, #0
   136e0:	bne	13a90 <__assert_fail@plt+0x26c8>
   136e4:	eor	r7, r7, #1
   136e8:	ands	r3, r3, r7
   136ec:	beq	142b4 <__assert_fail@plt+0x2eec>
   136f0:	ldr	r2, [sp, #68]	; 0x44
   136f4:	cmp	r2, #0
   136f8:	beq	1427c <__assert_fail@plt+0x2eb4>
   136fc:	ldr	r3, [sp, #72]	; 0x48
   13700:	cmp	r3, #0
   13704:	beq	14250 <__assert_fail@plt+0x2e88>
   13708:	ldr	r2, [sp, #48]	; 0x30
   1370c:	ldr	r3, [sp, #160]	; 0xa0
   13710:	ldr	r1, [sp, #60]	; 0x3c
   13714:	str	r3, [sp, #16]
   13718:	ldr	r3, [sp, #156]	; 0x9c
   1371c:	str	r3, [sp, #12]
   13720:	ldr	r3, [sp, #152]	; 0x98
   13724:	str	r3, [sp, #8]
   13728:	ldr	r3, [sp, #148]	; 0x94
   1372c:	str	r3, [sp, #4]
   13730:	mov	r3, #5
   13734:	str	r3, [sp]
   13738:	ldr	r3, [sp, #40]	; 0x28
   1373c:	mov	r0, r8
   13740:	bl	135f8 <__assert_fail@plt+0x2230>
   13744:	mov	r4, r0
   13748:	b	142a8 <__assert_fail@plt+0x2ee0>
   1374c:	ldr	r3, [pc, #2948]	; 142d8 <__assert_fail@plt+0x2f10>
   13750:	mov	r7, #1
   13754:	mov	r4, #0
   13758:	mov	sl, #5
   1375c:	str	r7, [sp, #24]
   13760:	str	r7, [sp, #32]
   13764:	str	r3, [sp, #44]	; 0x2c
   13768:	b	13684 <__assert_fail@plt+0x22bc>
   1376c:	cmp	r7, #0
   13770:	bne	138b4 <__assert_fail@plt+0x24ec>
   13774:	cmp	r5, #0
   13778:	mov	r4, #1
   1377c:	movne	r3, #34	; 0x22
   13780:	strbne	r3, [r8]
   13784:	mov	r3, #1
   13788:	str	r3, [sp, #24]
   1378c:	str	r3, [sp, #32]
   13790:	ldr	r3, [pc, #2880]	; 142d8 <__assert_fail@plt+0x2f10>
   13794:	str	r3, [sp, #44]	; 0x2c
   13798:	b	13684 <__assert_fail@plt+0x22bc>
   1379c:	cmp	sl, #10
   137a0:	beq	137c4 <__assert_fail@plt+0x23fc>
   137a4:	mov	r1, sl
   137a8:	ldr	r0, [pc, #2860]	; 142dc <__assert_fail@plt+0x2f14>
   137ac:	bl	134c4 <__assert_fail@plt+0x20fc>
   137b0:	mov	r1, sl
   137b4:	str	r0, [sp, #156]	; 0x9c
   137b8:	ldr	r0, [pc, #2848]	; 142e0 <__assert_fail@plt+0x2f18>
   137bc:	bl	134c4 <__assert_fail@plt+0x20fc>
   137c0:	str	r0, [sp, #160]	; 0xa0
   137c4:	cmp	r7, #0
   137c8:	moveq	r4, r7
   137cc:	beq	137e4 <__assert_fail@plt+0x241c>
   137d0:	mov	r4, #0
   137d4:	b	137f4 <__assert_fail@plt+0x242c>
   137d8:	cmp	r5, r4
   137dc:	strbhi	r3, [r8, r4]
   137e0:	add	r4, r4, #1
   137e4:	ldr	r3, [sp, #156]	; 0x9c
   137e8:	ldrb	r3, [r3, r4]
   137ec:	cmp	r3, #0
   137f0:	bne	137d8 <__assert_fail@plt+0x2410>
   137f4:	ldr	r0, [sp, #160]	; 0xa0
   137f8:	bl	11290 <strlen@plt>
   137fc:	ldr	r3, [sp, #160]	; 0xa0
   13800:	str	r0, [sp, #32]
   13804:	str	r3, [sp, #44]	; 0x2c
   13808:	mov	r3, #1
   1380c:	str	r3, [sp, #24]
   13810:	b	13684 <__assert_fail@plt+0x22bc>
   13814:	mov	r3, #1
   13818:	cmp	r7, #0
   1381c:	streq	r3, [sp, #24]
   13820:	beq	13864 <__assert_fail@plt+0x249c>
   13824:	str	r3, [sp, #32]
   13828:	b	13850 <__assert_fail@plt+0x2488>
   1382c:	cmp	r7, #0
   13830:	beq	13864 <__assert_fail@plt+0x249c>
   13834:	mov	r3, #1
   13838:	str	r3, [sp, #32]
   1383c:	ldr	r3, [pc, #2716]	; 142e0 <__assert_fail@plt+0x2f18>
   13840:	b	138c4 <__assert_fail@plt+0x24fc>
   13844:	mov	r7, #1
   13848:	str	r7, [sp, #24]
   1384c:	str	r7, [sp, #32]
   13850:	ldr	r3, [pc, #2696]	; 142e0 <__assert_fail@plt+0x2f18>
   13854:	mov	r4, #0
   13858:	str	r3, [sp, #44]	; 0x2c
   1385c:	mov	sl, #2
   13860:	b	13684 <__assert_fail@plt+0x22bc>
   13864:	cmp	r5, #0
   13868:	movne	r3, #39	; 0x27
   1386c:	movne	r7, #0
   13870:	strbne	r3, [r8]
   13874:	moveq	r7, r5
   13878:	mov	r3, #1
   1387c:	mov	r4, #1
   13880:	str	r3, [sp, #32]
   13884:	ldr	r3, [pc, #2644]	; 142e0 <__assert_fail@plt+0x2f18>
   13888:	str	r3, [sp, #44]	; 0x2c
   1388c:	b	1385c <__assert_fail@plt+0x2494>
   13890:	bl	113a4 <abort@plt>
   13894:	mov	r3, #1
   13898:	mov	r7, #0
   1389c:	str	r3, [sp, #24]
   138a0:	mov	r4, #0
   138a4:	b	13684 <__assert_fail@plt+0x22bc>
   138a8:	mov	r7, #1
   138ac:	str	sl, [sp, #32]
   138b0:	b	13850 <__assert_fail@plt+0x2488>
   138b4:	mov	r3, #1
   138b8:	str	r7, [sp, #24]
   138bc:	str	r3, [sp, #32]
   138c0:	ldr	r3, [pc, #2576]	; 142d8 <__assert_fail@plt+0x2f10>
   138c4:	str	r3, [sp, #44]	; 0x2c
   138c8:	b	138a0 <__assert_fail@plt+0x24d8>
   138cc:	ldr	fp, [sp, #24]
   138d0:	ldr	r3, [sp, #32]
   138d4:	cmp	sl, #2
   138d8:	moveq	fp, #0
   138dc:	andne	fp, fp, #1
   138e0:	adds	r5, r3, #0
   138e4:	movne	r5, #1
   138e8:	ands	r3, fp, r5
   138ec:	str	r3, [sp, #64]	; 0x40
   138f0:	beq	139c0 <__assert_fail@plt+0x25f8>
   138f4:	ldr	r3, [sp, #28]
   138f8:	ldr	r2, [sp, #32]
   138fc:	cmp	r2, #1
   13900:	add	r6, r3, r2
   13904:	mov	r3, r2
   13908:	ldr	r2, [sp, #40]	; 0x28
   1390c:	movls	r3, #0
   13910:	movhi	r3, #1
   13914:	cmn	r2, #1
   13918:	movne	r3, #0
   1391c:	cmp	r3, #0
   13920:	beq	13930 <__assert_fail@plt+0x2568>
   13924:	ldr	r0, [sp, #48]	; 0x30
   13928:	bl	11290 <strlen@plt>
   1392c:	str	r0, [sp, #40]	; 0x28
   13930:	ldr	r3, [sp, #40]	; 0x28
   13934:	cmp	r6, r3
   13938:	bhi	139b8 <__assert_fail@plt+0x25f0>
   1393c:	ldr	r0, [sp, #28]
   13940:	ldr	r2, [sp, #32]
   13944:	ldr	r3, [sp, #48]	; 0x30
   13948:	ldr	r1, [sp, #44]	; 0x2c
   1394c:	add	r0, r3, r0
   13950:	bl	11140 <memcmp@plt>
   13954:	cmp	r0, #0
   13958:	bne	139b8 <__assert_fail@plt+0x25f0>
   1395c:	cmp	r7, #0
   13960:	beq	139c0 <__assert_fail@plt+0x25f8>
   13964:	str	r7, [sp, #24]
   13968:	ldr	r3, [sp, #24]
   1396c:	mov	r1, r9
   13970:	ldr	r2, [sp, #48]	; 0x30
   13974:	cmp	sl, #2
   13978:	movne	r3, #0
   1397c:	andeq	r3, r3, #1
   13980:	cmp	r3, #0
   13984:	ldr	r3, [sp, #160]	; 0xa0
   13988:	movne	sl, #4
   1398c:	str	sl, [sp]
   13990:	str	r3, [sp, #16]
   13994:	ldr	r3, [sp, #156]	; 0x9c
   13998:	str	r3, [sp, #12]
   1399c:	mov	r3, #0
   139a0:	str	r3, [sp, #8]
   139a4:	ldr	r3, [sp, #148]	; 0x94
   139a8:	bic	r3, r3, #2
   139ac:	str	r3, [sp, #4]
   139b0:	ldr	r3, [sp, #40]	; 0x28
   139b4:	b	1373c <__assert_fail@plt+0x2374>
   139b8:	mov	r3, #0
   139bc:	str	r3, [sp, #64]	; 0x40
   139c0:	ldr	r2, [sp, #28]
   139c4:	ldr	r3, [sp, #48]	; 0x30
   139c8:	add	r3, r3, r2
   139cc:	str	r3, [sp, #80]	; 0x50
   139d0:	ldr	r3, [sp, #48]	; 0x30
   139d4:	ldrb	r6, [r3, r2]
   139d8:	cmp	r6, #58	; 0x3a
   139dc:	bhi	13b40 <__assert_fail@plt+0x2778>
   139e0:	cmp	r6, #43	; 0x2b
   139e4:	bcs	13d00 <__assert_fail@plt+0x2938>
   139e8:	cmp	r6, #32
   139ec:	beq	13d54 <__assert_fail@plt+0x298c>
   139f0:	bhi	13a98 <__assert_fail@plt+0x26d0>
   139f4:	cmp	r6, #9
   139f8:	beq	13efc <__assert_fail@plt+0x2b34>
   139fc:	bhi	13a5c <__assert_fail@plt+0x2694>
   13a00:	cmp	r6, #7
   13a04:	beq	13f0c <__assert_fail@plt+0x2b44>
   13a08:	bhi	13f28 <__assert_fail@plt+0x2b60>
   13a0c:	cmp	r6, #0
   13a10:	beq	13d70 <__assert_fail@plt+0x29a8>
   13a14:	ldr	r3, [sp, #76]	; 0x4c
   13a18:	cmp	r3, #1
   13a1c:	bne	13f74 <__assert_fail@plt+0x2bac>
   13a20:	bl	11260 <__ctype_b_loc@plt>
   13a24:	ldr	r2, [r0]
   13a28:	sxth	r3, r6
   13a2c:	lsl	r3, r3, #1
   13a30:	ldrh	r5, [r2, r3]
   13a34:	ldr	r3, [sp, #76]	; 0x4c
   13a38:	ubfx	r5, r5, #14, #1
   13a3c:	str	r3, [sp, #56]	; 0x38
   13a40:	ldr	r3, [sp, #24]
   13a44:	eor	fp, r5, #1
   13a48:	and	fp, fp, r3
   13a4c:	ands	fp, fp, #255	; 0xff
   13a50:	beq	13c30 <__assert_fail@plt+0x2868>
   13a54:	mov	r5, #0
   13a58:	b	14020 <__assert_fail@plt+0x2c58>
   13a5c:	cmp	r6, #11
   13a60:	beq	13f30 <__assert_fail@plt+0x2b68>
   13a64:	bcc	13f04 <__assert_fail@plt+0x2b3c>
   13a68:	cmp	r6, #12
   13a6c:	beq	13f38 <__assert_fail@plt+0x2b70>
   13a70:	cmp	r6, #13
   13a74:	moveq	r3, #114	; 0x72
   13a78:	bne	13a14 <__assert_fail@plt+0x264c>
   13a7c:	cmp	sl, #2
   13a80:	movne	r2, #0
   13a84:	andeq	r2, r7, #1
   13a88:	cmp	r2, #0
   13a8c:	beq	13f10 <__assert_fail@plt+0x2b48>
   13a90:	mov	sl, #2
   13a94:	b	13968 <__assert_fail@plt+0x25a0>
   13a98:	cmp	r6, #37	; 0x25
   13a9c:	beq	13d00 <__assert_fail@plt+0x2938>
   13aa0:	bhi	13ab4 <__assert_fail@plt+0x26ec>
   13aa4:	cmp	r6, #35	; 0x23
   13aa8:	beq	13d48 <__assert_fail@plt+0x2980>
   13aac:	mov	r5, #0
   13ab0:	b	13d58 <__assert_fail@plt+0x2990>
   13ab4:	cmp	r6, #39	; 0x27
   13ab8:	bne	13aac <__assert_fail@plt+0x26e4>
   13abc:	cmp	sl, #2
   13ac0:	ldrne	r5, [sp, #36]	; 0x24
   13ac4:	movne	r3, r5
   13ac8:	strne	r3, [sp, #68]	; 0x44
   13acc:	bne	13e4c <__assert_fail@plt+0x2a84>
   13ad0:	cmp	r7, #0
   13ad4:	bne	13968 <__assert_fail@plt+0x25a0>
   13ad8:	ldr	r3, [sp, #60]	; 0x3c
   13adc:	cmp	r9, #0
   13ae0:	clz	r3, r3
   13ae4:	lsr	r3, r3, #5
   13ae8:	moveq	r3, #0
   13aec:	cmp	r3, #0
   13af0:	strne	r9, [sp, #60]	; 0x3c
   13af4:	movne	r9, #0
   13af8:	bne	13b08 <__assert_fail@plt+0x2740>
   13afc:	cmp	r9, r4
   13b00:	movhi	r3, #39	; 0x27
   13b04:	strbhi	r3, [r8, r4]
   13b08:	add	r3, r4, #1
   13b0c:	ldr	r5, [sp, #36]	; 0x24
   13b10:	mov	fp, #0
   13b14:	cmp	r3, r9
   13b18:	movcc	r2, #92	; 0x5c
   13b1c:	str	fp, [sp, #52]	; 0x34
   13b20:	strbcc	r2, [r8, r3]
   13b24:	add	r3, r4, #2
   13b28:	add	r4, r4, #3
   13b2c:	cmp	r3, r9
   13b30:	str	r5, [sp, #68]	; 0x44
   13b34:	movcc	r2, #39	; 0x27
   13b38:	strbcc	r2, [r8, r3]
   13b3c:	b	13c30 <__assert_fail@plt+0x2868>
   13b40:	cmp	r6, #94	; 0x5e
   13b44:	beq	13aac <__assert_fail@plt+0x26e4>
   13b48:	bhi	13d08 <__assert_fail@plt+0x2940>
   13b4c:	cmp	r6, #90	; 0x5a
   13b50:	bhi	13cf4 <__assert_fail@plt+0x292c>
   13b54:	cmp	r6, #65	; 0x41
   13b58:	bcs	13d00 <__assert_fail@plt+0x2938>
   13b5c:	cmp	r6, #62	; 0x3e
   13b60:	bls	13aac <__assert_fail@plt+0x26e4>
   13b64:	cmp	r6, #63	; 0x3f
   13b68:	bne	13a14 <__assert_fail@plt+0x264c>
   13b6c:	cmp	sl, #2
   13b70:	beq	13e54 <__assert_fail@plt+0x2a8c>
   13b74:	cmp	sl, #5
   13b78:	movne	fp, #0
   13b7c:	bne	14224 <__assert_fail@plt+0x2e5c>
   13b80:	ldr	r3, [sp, #148]	; 0x94
   13b84:	tst	r3, #4
   13b88:	beq	13e5c <__assert_fail@plt+0x2a94>
   13b8c:	ldr	r3, [sp, #28]
   13b90:	add	r2, r3, #2
   13b94:	ldr	r3, [sp, #40]	; 0x28
   13b98:	cmp	r2, r3
   13b9c:	bcs	13e5c <__assert_fail@plt+0x2a94>
   13ba0:	ldr	r1, [sp, #28]
   13ba4:	ldr	r3, [sp, #48]	; 0x30
   13ba8:	add	r3, r3, r1
   13bac:	ldrb	r1, [r3, #1]
   13bb0:	cmp	r1, #63	; 0x3f
   13bb4:	bne	13e5c <__assert_fail@plt+0x2a94>
   13bb8:	ldr	r3, [sp, #48]	; 0x30
   13bbc:	ldrb	r6, [r3, r2]
   13bc0:	sub	r3, r6, #33	; 0x21
   13bc4:	uxtb	r3, r3
   13bc8:	cmp	r3, #29
   13bcc:	bhi	1422c <__assert_fail@plt+0x2e64>
   13bd0:	ldr	r0, [pc, #1804]	; 142e4 <__assert_fail@plt+0x2f1c>
   13bd4:	mov	r5, #1
   13bd8:	ands	r5, r0, r5, lsl r3
   13bdc:	beq	14234 <__assert_fail@plt+0x2e6c>
   13be0:	cmp	r7, #0
   13be4:	bne	13968 <__assert_fail@plt+0x25a0>
   13be8:	cmp	r9, r4
   13bec:	add	r3, r4, #1
   13bf0:	str	r2, [sp, #28]
   13bf4:	mov	r5, #0
   13bf8:	strbhi	r1, [r8, r4]
   13bfc:	cmp	r9, r3
   13c00:	mov	fp, r5
   13c04:	movhi	r1, #34	; 0x22
   13c08:	strbhi	r1, [r8, r3]
   13c0c:	add	r3, r4, #2
   13c10:	cmp	r9, r3
   13c14:	movhi	r1, #34	; 0x22
   13c18:	strbhi	r1, [r8, r3]
   13c1c:	add	r3, r4, #3
   13c20:	add	r4, r4, #4
   13c24:	cmp	r9, r3
   13c28:	movhi	r1, #63	; 0x3f
   13c2c:	strbhi	r1, [r8, r3]
   13c30:	ldr	r3, [sp, #24]
   13c34:	eor	r3, r3, #1
   13c38:	cmp	sl, #2
   13c3c:	orreq	r3, r3, #1
   13c40:	eor	r3, r3, #1
   13c44:	orr	r3, r7, r3
   13c48:	tst	r3, #255	; 0xff
   13c4c:	beq	13c78 <__assert_fail@plt+0x28b0>
   13c50:	ldr	r3, [sp, #152]	; 0x98
   13c54:	cmp	r3, #0
   13c58:	beq	13c78 <__assert_fail@plt+0x28b0>
   13c5c:	ldr	r1, [sp, #152]	; 0x98
   13c60:	ubfx	r2, r6, #5, #8
   13c64:	and	r3, r6, #31
   13c68:	ldr	r2, [r1, r2, lsl #2]
   13c6c:	lsr	r3, r2, r3
   13c70:	tst	r3, #1
   13c74:	bne	13c84 <__assert_fail@plt+0x28bc>
   13c78:	ldr	r3, [sp, #64]	; 0x40
   13c7c:	cmp	r3, #0
   13c80:	beq	13e7c <__assert_fail@plt+0x2ab4>
   13c84:	sub	r3, sl, #2
   13c88:	cmp	r7, #0
   13c8c:	clz	r3, r3
   13c90:	lsr	r3, r3, #5
   13c94:	bne	13968 <__assert_fail@plt+0x25a0>
   13c98:	ldr	r2, [sp, #52]	; 0x34
   13c9c:	eor	r2, r2, #1
   13ca0:	ands	r3, r3, r2
   13ca4:	beq	13cdc <__assert_fail@plt+0x2914>
   13ca8:	cmp	r9, r4
   13cac:	str	r3, [sp, #52]	; 0x34
   13cb0:	movhi	r2, #39	; 0x27
   13cb4:	strbhi	r2, [r8, r4]
   13cb8:	add	r2, r4, #1
   13cbc:	cmp	r9, r2
   13cc0:	movhi	r1, #36	; 0x24
   13cc4:	strbhi	r1, [r8, r2]
   13cc8:	add	r2, r4, #2
   13ccc:	add	r4, r4, #3
   13cd0:	cmp	r9, r2
   13cd4:	movhi	r1, #39	; 0x27
   13cd8:	strbhi	r1, [r8, r2]
   13cdc:	cmp	r9, r4
   13ce0:	ldr	fp, [sp, #36]	; 0x24
   13ce4:	movhi	r3, #92	; 0x5c
   13ce8:	strbhi	r3, [r8, r4]
   13cec:	add	r4, r4, #1
   13cf0:	b	13e7c <__assert_fail@plt+0x2ab4>
   13cf4:	cmp	r6, #92	; 0x5c
   13cf8:	beq	13e64 <__assert_fail@plt+0x2a9c>
   13cfc:	bls	13aac <__assert_fail@plt+0x26e4>
   13d00:	ldr	r5, [sp, #36]	; 0x24
   13d04:	b	13e4c <__assert_fail@plt+0x2a84>
   13d08:	cmp	r6, #122	; 0x7a
   13d0c:	bhi	13d2c <__assert_fail@plt+0x2964>
   13d10:	cmp	r6, #97	; 0x61
   13d14:	bcs	13d00 <__assert_fail@plt+0x2938>
   13d18:	cmp	r6, #95	; 0x5f
   13d1c:	beq	13d00 <__assert_fail@plt+0x2938>
   13d20:	cmp	r6, #96	; 0x60
   13d24:	bne	13a14 <__assert_fail@plt+0x264c>
   13d28:	b	13aac <__assert_fail@plt+0x26e4>
   13d2c:	cmp	r6, #124	; 0x7c
   13d30:	beq	13aac <__assert_fail@plt+0x26e4>
   13d34:	bcc	13f40 <__assert_fail@plt+0x2b78>
   13d38:	cmp	r6, #125	; 0x7d
   13d3c:	beq	13f40 <__assert_fail@plt+0x2b78>
   13d40:	cmp	r6, #126	; 0x7e
   13d44:	bne	13a14 <__assert_fail@plt+0x264c>
   13d48:	ldr	r3, [sp, #28]
   13d4c:	cmp	r3, #0
   13d50:	bne	13e5c <__assert_fail@plt+0x2a94>
   13d54:	ldr	r5, [sp, #36]	; 0x24
   13d58:	cmp	sl, #2
   13d5c:	movne	fp, #0
   13d60:	andeq	fp, r7, #1
   13d64:	cmp	fp, #0
   13d68:	beq	13c30 <__assert_fail@plt+0x2868>
   13d6c:	b	13a90 <__assert_fail@plt+0x26c8>
   13d70:	ldr	r3, [sp, #24]
   13d74:	cmp	r3, #0
   13d78:	beq	13e40 <__assert_fail@plt+0x2a78>
   13d7c:	sub	r2, sl, #2
   13d80:	cmp	r7, #0
   13d84:	clz	r2, r2
   13d88:	lsr	r2, r2, #5
   13d8c:	bne	13964 <__assert_fail@plt+0x259c>
   13d90:	ldr	r3, [sp, #52]	; 0x34
   13d94:	eor	r3, r3, #1
   13d98:	ands	r2, r2, r3
   13d9c:	moveq	r3, r4
   13da0:	beq	13dd8 <__assert_fail@plt+0x2a10>
   13da4:	cmp	r9, r4
   13da8:	str	r2, [sp, #52]	; 0x34
   13dac:	movhi	r3, #39	; 0x27
   13db0:	strbhi	r3, [r8, r4]
   13db4:	add	r3, r4, #1
   13db8:	cmp	r9, r3
   13dbc:	movhi	r1, #36	; 0x24
   13dc0:	strbhi	r1, [r8, r3]
   13dc4:	add	r3, r4, #2
   13dc8:	cmp	r9, r3
   13dcc:	movhi	r1, #39	; 0x27
   13dd0:	strbhi	r1, [r8, r3]
   13dd4:	add	r3, r4, #3
   13dd8:	cmp	r9, r3
   13ddc:	add	r4, r3, #1
   13de0:	movhi	r2, #92	; 0x5c
   13de4:	strbhi	r2, [r8, r3]
   13de8:	cmp	fp, #0
   13dec:	beq	14214 <__assert_fail@plt+0x2e4c>
   13df0:	ldr	r2, [sp, #28]
   13df4:	ldr	r1, [sp, #40]	; 0x28
   13df8:	add	r2, r2, #1
   13dfc:	cmp	r2, r1
   13e00:	bcs	13e38 <__assert_fail@plt+0x2a70>
   13e04:	ldr	r1, [sp, #48]	; 0x30
   13e08:	mov	r6, #48	; 0x30
   13e0c:	ldrb	r2, [r1, r2]
   13e10:	sub	r2, r2, #48	; 0x30
   13e14:	cmp	r2, #9
   13e18:	bhi	14224 <__assert_fail@plt+0x2e5c>
   13e1c:	cmp	r9, r4
   13e20:	add	r2, r3, #2
   13e24:	strbhi	r6, [r8, r4]
   13e28:	cmp	r9, r2
   13e2c:	add	r4, r3, #3
   13e30:	movhi	r1, #48	; 0x30
   13e34:	strbhi	r1, [r8, r2]
   13e38:	mov	r5, #0
   13e3c:	b	1421c <__assert_fail@plt+0x2e54>
   13e40:	ldr	r3, [sp, #148]	; 0x94
   13e44:	ands	r5, r3, #1
   13e48:	bne	13ed0 <__assert_fail@plt+0x2b08>
   13e4c:	mov	fp, #0
   13e50:	b	13c30 <__assert_fail@plt+0x2868>
   13e54:	cmp	r7, #0
   13e58:	bne	13968 <__assert_fail@plt+0x25a0>
   13e5c:	mov	r5, #0
   13e60:	b	13e4c <__assert_fail@plt+0x2a84>
   13e64:	cmp	sl, #2
   13e68:	bne	13edc <__assert_fail@plt+0x2b14>
   13e6c:	cmp	r7, #0
   13e70:	bne	13968 <__assert_fail@plt+0x25a0>
   13e74:	mov	r5, r7
   13e78:	mov	fp, r7
   13e7c:	ldr	r3, [sp, #52]	; 0x34
   13e80:	eor	fp, fp, #1
   13e84:	tst	r3, fp
   13e88:	beq	13eb4 <__assert_fail@plt+0x2aec>
   13e8c:	cmp	r9, r4
   13e90:	movhi	r3, #39	; 0x27
   13e94:	strbhi	r3, [r8, r4]
   13e98:	add	r3, r4, #1
   13e9c:	add	r4, r4, #2
   13ea0:	cmp	r9, r3
   13ea4:	movhi	r2, #39	; 0x27
   13ea8:	strbhi	r2, [r8, r3]
   13eac:	mov	r3, #0
   13eb0:	str	r3, [sp, #52]	; 0x34
   13eb4:	cmp	r9, r4
   13eb8:	ldr	r3, [sp, #72]	; 0x48
   13ebc:	strbhi	r6, [r8, r4]
   13ec0:	cmp	r5, #0
   13ec4:	add	r4, r4, #1
   13ec8:	moveq	r3, #0
   13ecc:	str	r3, [sp, #72]	; 0x48
   13ed0:	ldr	r3, [sp, #28]
   13ed4:	add	r3, r3, #1
   13ed8:	b	13690 <__assert_fail@plt+0x22c8>
   13edc:	ldr	r3, [sp, #24]
   13ee0:	and	r3, r3, r7
   13ee4:	tst	r5, r3
   13ee8:	moveq	r3, r6
   13eec:	beq	13a7c <__assert_fail@plt+0x26b4>
   13ef0:	mov	fp, #0
   13ef4:	mov	r5, fp
   13ef8:	b	13e7c <__assert_fail@plt+0x2ab4>
   13efc:	mov	r3, #116	; 0x74
   13f00:	b	13a7c <__assert_fail@plt+0x26b4>
   13f04:	mov	r3, #110	; 0x6e
   13f08:	b	13a7c <__assert_fail@plt+0x26b4>
   13f0c:	mov	r3, #97	; 0x61
   13f10:	ldr	r2, [sp, #24]
   13f14:	cmp	r2, #0
   13f18:	beq	13e5c <__assert_fail@plt+0x2a94>
   13f1c:	mov	r6, r3
   13f20:	mov	r5, #0
   13f24:	b	13c84 <__assert_fail@plt+0x28bc>
   13f28:	mov	r3, #98	; 0x62
   13f2c:	b	13f10 <__assert_fail@plt+0x2b48>
   13f30:	mov	r3, #118	; 0x76
   13f34:	b	13f10 <__assert_fail@plt+0x2b48>
   13f38:	mov	r3, #102	; 0x66
   13f3c:	b	13f10 <__assert_fail@plt+0x2b48>
   13f40:	ldr	r3, [sp, #40]	; 0x28
   13f44:	cmn	r3, #1
   13f48:	bne	13f68 <__assert_fail@plt+0x2ba0>
   13f4c:	ldr	r3, [sp, #48]	; 0x30
   13f50:	ldrb	r3, [r3, #1]
   13f54:	adds	r3, r3, #0
   13f58:	movne	r3, #1
   13f5c:	cmp	r3, #0
   13f60:	bne	13e5c <__assert_fail@plt+0x2a94>
   13f64:	b	13d48 <__assert_fail@plt+0x2980>
   13f68:	ldr	r3, [sp, #40]	; 0x28
   13f6c:	subs	r3, r3, #1
   13f70:	b	13f58 <__assert_fail@plt+0x2b90>
   13f74:	mov	r3, #0
   13f78:	mov	r2, #0
   13f7c:	strd	r2, [sp, #96]	; 0x60
   13f80:	ldr	r3, [sp, #40]	; 0x28
   13f84:	cmn	r3, #1
   13f88:	bne	13f98 <__assert_fail@plt+0x2bd0>
   13f8c:	ldr	r0, [sp, #48]	; 0x30
   13f90:	bl	11290 <strlen@plt>
   13f94:	str	r0, [sp, #40]	; 0x28
   13f98:	ldr	r5, [sp, #36]	; 0x24
   13f9c:	mov	r3, #0
   13fa0:	str	r3, [sp, #56]	; 0x38
   13fa4:	ldr	r3, [sp, #28]
   13fa8:	add	r0, sp, #92	; 0x5c
   13fac:	ldr	r1, [sp, #40]	; 0x28
   13fb0:	ldr	r2, [sp, #56]	; 0x38
   13fb4:	add	r2, r3, r2
   13fb8:	ldr	r3, [sp, #48]	; 0x30
   13fbc:	add	fp, r3, r2
   13fc0:	sub	r2, r1, r2
   13fc4:	add	r3, sp, #96	; 0x60
   13fc8:	mov	r1, fp
   13fcc:	bl	132a0 <__assert_fail@plt+0x1ed8>
   13fd0:	subs	r2, r0, #0
   13fd4:	beq	14014 <__assert_fail@plt+0x2c4c>
   13fd8:	cmn	r2, #1
   13fdc:	beq	141e8 <__assert_fail@plt+0x2e20>
   13fe0:	cmn	r2, #2
   13fe4:	bne	14158 <__assert_fail@plt+0x2d90>
   13fe8:	ldr	r3, [sp, #28]
   13fec:	ldr	r2, [sp, #56]	; 0x38
   13ff0:	add	r3, r3, r2
   13ff4:	ldr	r2, [sp, #40]	; 0x28
   13ff8:	cmp	r2, r3
   13ffc:	bls	141e8 <__assert_fail@plt+0x2e20>
   14000:	ldr	r2, [sp, #56]	; 0x38
   14004:	ldr	r3, [sp, #80]	; 0x50
   14008:	ldrb	r5, [r3, r2]
   1400c:	cmp	r5, #0
   14010:	bne	14148 <__assert_fail@plt+0x2d80>
   14014:	ldr	r3, [sp, #56]	; 0x38
   14018:	cmp	r3, #1
   1401c:	bls	13a40 <__assert_fail@plt+0x2678>
   14020:	ldr	r3, [sp, #28]
   14024:	mov	fp, #0
   14028:	mov	ip, #92	; 0x5c
   1402c:	ldr	r2, [sp, #56]	; 0x38
   14030:	add	r3, r3, r2
   14034:	ldr	r2, [sp, #24]
   14038:	str	r3, [sp, #36]	; 0x24
   1403c:	eor	r3, r5, #1
   14040:	and	r3, r3, r2
   14044:	mov	r2, #39	; 0x27
   14048:	uxtb	r3, r3
   1404c:	cmp	r3, #0
   14050:	beq	141f0 <__assert_fail@plt+0x2e28>
   14054:	sub	r0, sl, #2
   14058:	cmp	r7, #0
   1405c:	clz	r0, r0
   14060:	lsr	r0, r0, #5
   14064:	bne	13964 <__assert_fail@plt+0x259c>
   14068:	ldr	r1, [sp, #52]	; 0x34
   1406c:	eor	r1, r1, #1
   14070:	ands	r1, r0, r1
   14074:	beq	140a4 <__assert_fail@plt+0x2cdc>
   14078:	cmp	r9, r4
   1407c:	add	r0, r4, #1
   14080:	str	r1, [sp, #52]	; 0x34
   14084:	strbhi	r2, [r8, r4]
   14088:	cmp	r9, r0
   1408c:	movhi	lr, #36	; 0x24
   14090:	strbhi	lr, [r8, r0]
   14094:	add	r0, r4, #2
   14098:	add	r4, r4, #3
   1409c:	cmp	r9, r0
   140a0:	strbhi	r2, [r8, r0]
   140a4:	cmp	r9, r4
   140a8:	add	r0, r4, #1
   140ac:	mov	fp, r3
   140b0:	strbhi	ip, [r8, r4]
   140b4:	cmp	r9, r0
   140b8:	lsrhi	r1, r6, #6
   140bc:	addhi	r1, r1, #48	; 0x30
   140c0:	strbhi	r1, [r8, r0]
   140c4:	add	r0, r4, #2
   140c8:	add	r4, r4, #3
   140cc:	cmp	r9, r0
   140d0:	ubfxhi	r1, r6, #3, #3
   140d4:	and	r6, r6, #7
   140d8:	add	r6, r6, #48	; 0x30
   140dc:	addhi	r1, r1, #48	; 0x30
   140e0:	strbhi	r1, [r8, r0]
   140e4:	eor	r0, fp, #1
   140e8:	ldr	r1, [sp, #28]
   140ec:	ldr	lr, [sp, #52]	; 0x34
   140f0:	add	r1, r1, #1
   140f4:	and	r0, r0, lr
   140f8:	ldr	lr, [sp, #36]	; 0x24
   140fc:	cmp	r1, lr
   14100:	bcs	13e7c <__assert_fail@plt+0x2ab4>
   14104:	cmp	r0, #0
   14108:	beq	1412c <__assert_fail@plt+0x2d64>
   1410c:	cmp	r9, r4
   14110:	add	r0, r4, #1
   14114:	strbhi	r2, [r8, r4]
   14118:	cmp	r9, r0
   1411c:	add	r4, r4, #2
   14120:	strbhi	r2, [r8, r0]
   14124:	mov	r0, #0
   14128:	str	r0, [sp, #52]	; 0x34
   1412c:	ldr	r0, [sp, #48]	; 0x30
   14130:	cmp	r9, r4
   14134:	str	r1, [sp, #28]
   14138:	strbhi	r6, [r8, r4]
   1413c:	add	r4, r4, #1
   14140:	ldrb	r6, [r0, r1]
   14144:	b	1404c <__assert_fail@plt+0x2c84>
   14148:	ldr	r3, [sp, #56]	; 0x38
   1414c:	add	r3, r3, #1
   14150:	str	r3, [sp, #56]	; 0x38
   14154:	b	13fe8 <__assert_fail@plt+0x2c20>
   14158:	cmp	sl, #2
   1415c:	movne	r3, #0
   14160:	andeq	r3, r7, #1
   14164:	cmp	r3, #0
   14168:	movne	r1, #1
   1416c:	bne	141c8 <__assert_fail@plt+0x2e00>
   14170:	ldr	r0, [sp, #92]	; 0x5c
   14174:	str	r2, [sp, #84]	; 0x54
   14178:	bl	111a0 <iswprint@plt>
   1417c:	ldr	r3, [sp, #56]	; 0x38
   14180:	cmp	r0, #0
   14184:	add	r0, sp, #96	; 0x60
   14188:	moveq	r5, #0
   1418c:	ldr	r2, [sp, #84]	; 0x54
   14190:	add	r3, r3, r2
   14194:	str	r3, [sp, #56]	; 0x38
   14198:	bl	11134 <mbsinit@plt>
   1419c:	cmp	r0, #0
   141a0:	beq	13fa4 <__assert_fail@plt+0x2bdc>
   141a4:	b	14014 <__assert_fail@plt+0x2c4c>
   141a8:	ldrb	r3, [fp, #1]!
   141ac:	cmp	r3, #94	; 0x5e
   141b0:	beq	13a90 <__assert_fail@plt+0x26c8>
   141b4:	bhi	141d4 <__assert_fail@plt+0x2e0c>
   141b8:	sub	r3, r3, #91	; 0x5b
   141bc:	cmp	r3, #1
   141c0:	bls	13a90 <__assert_fail@plt+0x26c8>
   141c4:	add	r1, r1, #1
   141c8:	cmp	r1, r2
   141cc:	bne	141a8 <__assert_fail@plt+0x2de0>
   141d0:	b	14170 <__assert_fail@plt+0x2da8>
   141d4:	cmp	r3, #96	; 0x60
   141d8:	beq	13a90 <__assert_fail@plt+0x26c8>
   141dc:	cmp	r3, #124	; 0x7c
   141e0:	bne	141c4 <__assert_fail@plt+0x2dfc>
   141e4:	b	13a90 <__assert_fail@plt+0x26c8>
   141e8:	mov	r5, #0
   141ec:	b	14014 <__assert_fail@plt+0x2c4c>
   141f0:	ldr	r1, [sp, #64]	; 0x40
   141f4:	cmp	r1, #0
   141f8:	beq	140e4 <__assert_fail@plt+0x2d1c>
   141fc:	cmp	r9, r4
   14200:	mov	r1, #0
   14204:	strbhi	ip, [r8, r4]
   14208:	add	r4, r4, #1
   1420c:	str	r1, [sp, #64]	; 0x40
   14210:	b	140e4 <__assert_fail@plt+0x2d1c>
   14214:	mov	r5, fp
   14218:	ldr	fp, [sp, #24]
   1421c:	mov	r6, #48	; 0x30
   14220:	b	13c30 <__assert_fail@plt+0x2868>
   14224:	mov	r5, #0
   14228:	b	13c30 <__assert_fail@plt+0x2868>
   1422c:	mov	r6, r1
   14230:	b	13e5c <__assert_fail@plt+0x2a94>
   14234:	mov	r6, r1
   14238:	b	13e4c <__assert_fail@plt+0x2a84>
   1423c:	ldr	r2, [sp, #28]
   14240:	ldr	r3, [sp, #40]	; 0x28
   14244:	subs	r3, r3, r2
   14248:	movne	r3, #1
   1424c:	b	136b4 <__assert_fail@plt+0x22ec>
   14250:	ldr	r3, [sp, #60]	; 0x3c
   14254:	mov	sl, #2
   14258:	ldr	r7, [sp, #72]	; 0x48
   1425c:	adds	r6, r3, #0
   14260:	mov	r5, r3
   14264:	movne	r6, #1
   14268:	cmp	r9, #0
   1426c:	movne	r6, #0
   14270:	cmp	r6, #0
   14274:	bne	13644 <__assert_fail@plt+0x227c>
   14278:	ldr	r3, [sp, #68]	; 0x44
   1427c:	ldr	r2, [sp, #44]	; 0x2c
   14280:	cmp	r2, #0
   14284:	moveq	r3, #0
   14288:	andne	r3, r3, #1
   1428c:	cmp	r3, #0
   14290:	movne	r3, r2
   14294:	subne	r3, r3, #1
   14298:	bne	142c8 <__assert_fail@plt+0x2f00>
   1429c:	cmp	r9, r4
   142a0:	movhi	r3, #0
   142a4:	strbhi	r3, [r8, r4]
   142a8:	mov	r0, r4
   142ac:	add	sp, sp, #108	; 0x6c
   142b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142b4:	mov	r3, r7
   142b8:	b	1427c <__assert_fail@plt+0x2eb4>
   142bc:	cmp	r9, r4
   142c0:	strbhi	r2, [r8, r4]
   142c4:	add	r4, r4, #1
   142c8:	ldrb	r2, [r3, #1]!
   142cc:	cmp	r2, #0
   142d0:	bne	142bc <__assert_fail@plt+0x2ef4>
   142d4:	b	1429c <__assert_fail@plt+0x2ed4>
   142d8:	strdeq	r6, [r1], -r8
   142dc:	andeq	r6, r1, sp, ror #19
   142e0:	andeq	r6, r1, fp, ror #19
   142e4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   142e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ec:	sub	sp, sp, #52	; 0x34
   142f0:	mov	r6, r0
   142f4:	mov	r5, r3
   142f8:	mov	r8, r1
   142fc:	mov	r9, r2
   14300:	bl	112b4 <__errno_location@plt>
   14304:	ldr	r3, [r0]
   14308:	cmn	r6, #-2147483647	; 0x80000001
   1430c:	str	r0, [sp, #24]
   14310:	ldr	r7, [pc, #368]	; 14488 <__assert_fail@plt+0x30c0>
   14314:	str	r3, [sp, #32]
   14318:	movne	r3, #0
   1431c:	moveq	r3, #1
   14320:	orrs	r3, r3, r6, lsr #31
   14324:	ldr	r4, [r7]
   14328:	beq	14330 <__assert_fail@plt+0x2f68>
   1432c:	bl	113a4 <abort@plt>
   14330:	ldr	r2, [r7, #4]
   14334:	cmp	r2, r6
   14338:	bgt	143a8 <__assert_fail@plt+0x2fe0>
   1433c:	add	sl, r7, #8
   14340:	mov	r3, #8
   14344:	cmp	r4, sl
   14348:	add	r1, sp, #44	; 0x2c
   1434c:	str	r2, [sp, #44]	; 0x2c
   14350:	sub	r2, r6, r2
   14354:	movne	r0, r4
   14358:	moveq	r0, #0
   1435c:	add	r2, r2, #1
   14360:	str	r3, [sp]
   14364:	mvn	r3, #-2147483648	; 0x80000000
   14368:	bl	15394 <__assert_fail@plt+0x3fcc>
   1436c:	cmp	r4, sl
   14370:	mov	fp, r0
   14374:	str	r0, [r7]
   14378:	ldmeq	r4, {r0, r1}
   1437c:	mov	r4, fp
   14380:	ldr	r2, [sp, #44]	; 0x2c
   14384:	stmeq	fp, {r0, r1}
   14388:	mov	r1, #0
   1438c:	ldr	r0, [r7, #4]
   14390:	sub	r2, r2, r0
   14394:	add	r0, fp, r0, lsl #3
   14398:	lsl	r2, r2, #3
   1439c:	bl	112d8 <memset@plt>
   143a0:	ldr	r3, [sp, #44]	; 0x2c
   143a4:	str	r3, [r7, #4]
   143a8:	ldr	r3, [r5, #4]
   143ac:	add	sl, r4, r6, lsl #3
   143b0:	mov	r2, r8
   143b4:	ldr	fp, [r4, r6, lsl #3]
   143b8:	ldr	r7, [sl, #4]
   143bc:	orr	r3, r3, #1
   143c0:	str	r3, [sp, #28]
   143c4:	add	r3, r5, #8
   143c8:	mov	r1, fp
   143cc:	str	r3, [sp, #36]	; 0x24
   143d0:	mov	r0, r7
   143d4:	ldr	r3, [r5, #44]	; 0x2c
   143d8:	str	r3, [sp, #16]
   143dc:	ldr	r3, [r5, #40]	; 0x28
   143e0:	str	r3, [sp, #12]
   143e4:	add	r3, r5, #8
   143e8:	str	r3, [sp, #8]
   143ec:	ldr	r3, [sp, #28]
   143f0:	str	r3, [sp, #4]
   143f4:	ldr	r3, [r5]
   143f8:	str	r3, [sp]
   143fc:	mov	r3, r9
   14400:	bl	135f8 <__assert_fail@plt+0x2230>
   14404:	cmp	fp, r0
   14408:	bhi	14470 <__assert_fail@plt+0x30a8>
   1440c:	ldr	r3, [pc, #120]	; 1448c <__assert_fail@plt+0x30c4>
   14410:	add	fp, r0, #1
   14414:	str	fp, [r4, r6, lsl #3]
   14418:	cmp	r7, r3
   1441c:	beq	14428 <__assert_fail@plt+0x3060>
   14420:	mov	r0, r7
   14424:	bl	130b4 <__assert_fail@plt+0x1cec>
   14428:	mov	r0, fp
   1442c:	bl	15284 <__assert_fail@plt+0x3ebc>
   14430:	ldr	r3, [r5, #44]	; 0x2c
   14434:	mov	r2, r8
   14438:	mov	r1, fp
   1443c:	str	r0, [sl, #4]
   14440:	mov	r7, r0
   14444:	str	r3, [sp, #16]
   14448:	ldr	r3, [r5, #40]	; 0x28
   1444c:	str	r3, [sp, #12]
   14450:	add	r3, r5, #8
   14454:	str	r3, [sp, #8]
   14458:	ldr	r3, [sp, #28]
   1445c:	str	r3, [sp, #4]
   14460:	ldr	r3, [r5]
   14464:	str	r3, [sp]
   14468:	mov	r3, r9
   1446c:	bl	135f8 <__assert_fail@plt+0x2230>
   14470:	ldr	r3, [sp, #24]
   14474:	mov	r0, r7
   14478:	ldr	r2, [sp, #32]
   1447c:	str	r2, [r3]
   14480:	add	sp, sp, #52	; 0x34
   14484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14488:	andeq	r7, r2, r4, lsr r1
   1448c:	andeq	r7, r2, ip, ror #3
   14490:	push	{r4, r5, r6, lr}
   14494:	mov	r5, r0
   14498:	bl	112b4 <__errno_location@plt>
   1449c:	mov	r4, r0
   144a0:	cmp	r5, #0
   144a4:	ldr	r0, [pc, #20]	; 144c0 <__assert_fail@plt+0x30f8>
   144a8:	mov	r1, #48	; 0x30
   144ac:	movne	r0, r5
   144b0:	ldr	r6, [r4]
   144b4:	bl	15484 <__assert_fail@plt+0x40bc>
   144b8:	str	r6, [r4]
   144bc:	pop	{r4, r5, r6, pc}
   144c0:	andeq	r7, r2, ip, ror #5
   144c4:	ldr	r3, [pc, #12]	; 144d8 <__assert_fail@plt+0x3110>
   144c8:	cmp	r0, #0
   144cc:	moveq	r0, r3
   144d0:	ldr	r0, [r0]
   144d4:	bx	lr
   144d8:	andeq	r7, r2, ip, ror #5
   144dc:	ldr	r3, [pc, #12]	; 144f0 <__assert_fail@plt+0x3128>
   144e0:	cmp	r0, #0
   144e4:	moveq	r0, r3
   144e8:	str	r1, [r0]
   144ec:	bx	lr
   144f0:	andeq	r7, r2, ip, ror #5
   144f4:	ldr	r3, [pc, #52]	; 14530 <__assert_fail@plt+0x3168>
   144f8:	cmp	r0, #0
   144fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14500:	lsr	lr, r1, #5
   14504:	and	r1, r1, #31
   14508:	moveq	r0, r3
   1450c:	add	r3, r0, #8
   14510:	ldr	ip, [r3, lr, lsl #2]
   14514:	lsr	r0, ip, r1
   14518:	eor	r2, r2, r0
   1451c:	and	r0, r0, #1
   14520:	and	r2, r2, #1
   14524:	eor	r1, ip, r2, lsl r1
   14528:	str	r1, [r3, lr, lsl #2]
   1452c:	pop	{pc}		; (ldr pc, [sp], #4)
   14530:	andeq	r7, r2, ip, ror #5
   14534:	ldr	r3, [pc, #16]	; 1454c <__assert_fail@plt+0x3184>
   14538:	cmp	r0, #0
   1453c:	movne	r3, r0
   14540:	ldr	r0, [r3, #4]
   14544:	str	r1, [r3, #4]
   14548:	bx	lr
   1454c:	andeq	r7, r2, ip, ror #5
   14550:	ldr	r3, [pc, #44]	; 14584 <__assert_fail@plt+0x31bc>
   14554:	cmp	r0, #0
   14558:	moveq	r0, r3
   1455c:	mov	r3, #10
   14560:	cmp	r2, #0
   14564:	cmpne	r1, #0
   14568:	str	r3, [r0]
   1456c:	bne	14578 <__assert_fail@plt+0x31b0>
   14570:	push	{r4, lr}
   14574:	bl	113a4 <abort@plt>
   14578:	str	r1, [r0, #40]	; 0x28
   1457c:	str	r2, [r0, #44]	; 0x2c
   14580:	bx	lr
   14584:	andeq	r7, r2, ip, ror #5
   14588:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1458c:	sub	sp, sp, #24
   14590:	mov	sl, r3
   14594:	mov	r7, r0
   14598:	mov	r8, r1
   1459c:	mov	r9, r2
   145a0:	ldr	r4, [sp, #56]	; 0x38
   145a4:	ldr	r3, [pc, #88]	; 14604 <__assert_fail@plt+0x323c>
   145a8:	cmp	r4, #0
   145ac:	moveq	r4, r3
   145b0:	bl	112b4 <__errno_location@plt>
   145b4:	ldr	r3, [r4, #44]	; 0x2c
   145b8:	mov	r5, r0
   145bc:	mov	r2, r9
   145c0:	mov	r1, r8
   145c4:	mov	r0, r7
   145c8:	ldr	r6, [r5]
   145cc:	str	r3, [sp, #16]
   145d0:	ldr	r3, [r4, #40]	; 0x28
   145d4:	str	r3, [sp, #12]
   145d8:	add	r3, r4, #8
   145dc:	str	r3, [sp, #8]
   145e0:	ldr	r3, [r4, #4]
   145e4:	str	r3, [sp, #4]
   145e8:	ldr	r3, [r4]
   145ec:	str	r3, [sp]
   145f0:	mov	r3, sl
   145f4:	bl	135f8 <__assert_fail@plt+0x2230>
   145f8:	str	r6, [r5]
   145fc:	add	sp, sp, #24
   14600:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14604:	andeq	r7, r2, ip, ror #5
   14608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1460c:	cmp	r3, #0
   14610:	sub	sp, sp, #44	; 0x2c
   14614:	mov	r6, r2
   14618:	mov	sl, r1
   1461c:	mov	r9, r0
   14620:	ldr	r4, [pc, #176]	; 146d8 <__assert_fail@plt+0x3310>
   14624:	movne	r4, r3
   14628:	bl	112b4 <__errno_location@plt>
   1462c:	ldr	r3, [r0]
   14630:	mov	r1, #0
   14634:	mov	r2, r9
   14638:	mov	r8, r0
   1463c:	mov	r0, r1
   14640:	ldr	r5, [r4, #4]
   14644:	add	fp, r4, #8
   14648:	str	r3, [sp, #28]
   1464c:	ldr	r3, [r4, #44]	; 0x2c
   14650:	cmp	r6, #0
   14654:	orreq	r5, r5, #1
   14658:	str	r3, [sp, #16]
   1465c:	ldr	r3, [r4, #40]	; 0x28
   14660:	stmib	sp, {r5, fp}
   14664:	str	r3, [sp, #12]
   14668:	ldr	r3, [r4]
   1466c:	str	r3, [sp]
   14670:	mov	r3, sl
   14674:	bl	135f8 <__assert_fail@plt+0x2230>
   14678:	add	r1, r0, #1
   1467c:	mov	r7, r0
   14680:	mov	r0, r1
   14684:	str	r1, [sp, #36]	; 0x24
   14688:	bl	15284 <__assert_fail@plt+0x3ebc>
   1468c:	ldr	r3, [r4, #44]	; 0x2c
   14690:	mov	r2, r9
   14694:	ldr	r1, [sp, #36]	; 0x24
   14698:	str	r3, [sp, #16]
   1469c:	ldr	r3, [r4, #40]	; 0x28
   146a0:	stmib	sp, {r5, fp}
   146a4:	str	r0, [sp, #32]
   146a8:	str	r3, [sp, #12]
   146ac:	ldr	r3, [r4]
   146b0:	str	r3, [sp]
   146b4:	mov	r3, sl
   146b8:	bl	135f8 <__assert_fail@plt+0x2230>
   146bc:	ldr	r3, [sp, #28]
   146c0:	cmp	r6, #0
   146c4:	ldr	r0, [sp, #32]
   146c8:	str	r3, [r8]
   146cc:	strne	r7, [r6]
   146d0:	add	sp, sp, #44	; 0x2c
   146d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d8:	andeq	r7, r2, ip, ror #5
   146dc:	mov	r3, r2
   146e0:	mov	r2, #0
   146e4:	b	14608 <__assert_fail@plt+0x3240>
   146e8:	push	{r4, r5, r6, r7, r8, lr}
   146ec:	mov	r6, #1
   146f0:	ldr	r4, [pc, #100]	; 1475c <__assert_fail@plt+0x3394>
   146f4:	ldr	r5, [r4]
   146f8:	add	r7, r5, #4
   146fc:	ldr	r3, [r4, #4]
   14700:	cmp	r3, r6
   14704:	bgt	1474c <__assert_fail@plt+0x3384>
   14708:	ldr	r6, [pc, #80]	; 14760 <__assert_fail@plt+0x3398>
   1470c:	ldr	r0, [r5, #4]
   14710:	cmp	r0, r6
   14714:	beq	14728 <__assert_fail@plt+0x3360>
   14718:	bl	130b4 <__assert_fail@plt+0x1cec>
   1471c:	mov	r3, #256	; 0x100
   14720:	str	r3, [r4, #8]
   14724:	str	r6, [r4, #12]
   14728:	ldr	r6, [pc, #52]	; 14764 <__assert_fail@plt+0x339c>
   1472c:	cmp	r5, r6
   14730:	beq	14740 <__assert_fail@plt+0x3378>
   14734:	mov	r0, r5
   14738:	bl	130b4 <__assert_fail@plt+0x1cec>
   1473c:	str	r6, [r4]
   14740:	mov	r3, #1
   14744:	str	r3, [r4, #4]
   14748:	pop	{r4, r5, r6, r7, r8, pc}
   1474c:	ldr	r0, [r7, r6, lsl #3]
   14750:	add	r6, r6, #1
   14754:	bl	130b4 <__assert_fail@plt+0x1cec>
   14758:	b	146fc <__assert_fail@plt+0x3334>
   1475c:	andeq	r7, r2, r4, lsr r1
   14760:	andeq	r7, r2, ip, ror #3
   14764:	andeq	r7, r2, ip, lsr r1
   14768:	ldr	r3, [pc, #4]	; 14774 <__assert_fail@plt+0x33ac>
   1476c:	mvn	r2, #0
   14770:	b	142e8 <__assert_fail@plt+0x2f20>
   14774:	andeq	r7, r2, ip, ror #5
   14778:	ldr	r3, [pc]	; 14780 <__assert_fail@plt+0x33b8>
   1477c:	b	142e8 <__assert_fail@plt+0x2f20>
   14780:	andeq	r7, r2, ip, ror #5
   14784:	mov	r1, r0
   14788:	mov	r0, #0
   1478c:	b	14768 <__assert_fail@plt+0x33a0>
   14790:	mov	r2, r1
   14794:	mov	r1, r0
   14798:	mov	r0, #0
   1479c:	b	14778 <__assert_fail@plt+0x33b0>
   147a0:	push	{r4, r5, lr}
   147a4:	sub	sp, sp, #52	; 0x34
   147a8:	mov	r5, r2
   147ac:	mov	r4, r0
   147b0:	mov	r0, sp
   147b4:	bl	1349c <__assert_fail@plt+0x20d4>
   147b8:	mov	r3, sp
   147bc:	mvn	r2, #0
   147c0:	mov	r1, r5
   147c4:	mov	r0, r4
   147c8:	bl	142e8 <__assert_fail@plt+0x2f20>
   147cc:	add	sp, sp, #52	; 0x34
   147d0:	pop	{r4, r5, pc}
   147d4:	push	{r4, r5, r6, lr}
   147d8:	sub	sp, sp, #48	; 0x30
   147dc:	mov	r5, r2
   147e0:	mov	r6, r3
   147e4:	mov	r4, r0
   147e8:	mov	r0, sp
   147ec:	bl	1349c <__assert_fail@plt+0x20d4>
   147f0:	mov	r3, sp
   147f4:	mov	r2, r6
   147f8:	mov	r1, r5
   147fc:	mov	r0, r4
   14800:	bl	142e8 <__assert_fail@plt+0x2f20>
   14804:	add	sp, sp, #48	; 0x30
   14808:	pop	{r4, r5, r6, pc}
   1480c:	mov	r2, r1
   14810:	mov	r1, r0
   14814:	mov	r0, #0
   14818:	b	147a0 <__assert_fail@plt+0x33d8>
   1481c:	mov	r3, r2
   14820:	mov	r2, r1
   14824:	mov	r1, r0
   14828:	mov	r0, #0
   1482c:	b	147d4 <__assert_fail@plt+0x340c>
   14830:	push	{r4, r5, r6, lr}
   14834:	mov	r4, r0
   14838:	mov	r5, r1
   1483c:	mov	r6, r2
   14840:	sub	sp, sp, #48	; 0x30
   14844:	mov	ip, sp
   14848:	ldr	lr, [pc, #64]	; 14890 <__assert_fail@plt+0x34c8>
   1484c:	ldm	lr!, {r0, r1, r2, r3}
   14850:	stmia	ip!, {r0, r1, r2, r3}
   14854:	ldm	lr!, {r0, r1, r2, r3}
   14858:	stmia	ip!, {r0, r1, r2, r3}
   1485c:	ldm	lr, {r0, r1, r2, r3}
   14860:	stm	ip, {r0, r1, r2, r3}
   14864:	mov	r1, r6
   14868:	mov	r2, #1
   1486c:	mov	r0, sp
   14870:	bl	144f4 <__assert_fail@plt+0x312c>
   14874:	mov	r3, sp
   14878:	mov	r2, r5
   1487c:	mov	r1, r4
   14880:	mov	r0, #0
   14884:	bl	142e8 <__assert_fail@plt+0x2f20>
   14888:	add	sp, sp, #48	; 0x30
   1488c:	pop	{r4, r5, r6, pc}
   14890:	andeq	r7, r2, ip, ror #5
   14894:	mov	r2, r1
   14898:	mvn	r1, #0
   1489c:	b	14830 <__assert_fail@plt+0x3468>
   148a0:	mov	r1, #58	; 0x3a
   148a4:	b	14894 <__assert_fail@plt+0x34cc>
   148a8:	mov	r2, #58	; 0x3a
   148ac:	b	14830 <__assert_fail@plt+0x3468>
   148b0:	push	{r4, r5, lr}
   148b4:	sub	sp, sp, #100	; 0x64
   148b8:	mov	r4, r0
   148bc:	mov	r0, sp
   148c0:	mov	r5, r2
   148c4:	bl	1349c <__assert_fail@plt+0x20d4>
   148c8:	mov	ip, sp
   148cc:	add	lr, sp, #48	; 0x30
   148d0:	ldm	ip!, {r0, r1, r2, r3}
   148d4:	stmia	lr!, {r0, r1, r2, r3}
   148d8:	ldm	ip!, {r0, r1, r2, r3}
   148dc:	stmia	lr!, {r0, r1, r2, r3}
   148e0:	ldm	ip, {r0, r1, r2, r3}
   148e4:	stm	lr, {r0, r1, r2, r3}
   148e8:	mov	r2, #1
   148ec:	mov	r1, #58	; 0x3a
   148f0:	add	r0, sp, #48	; 0x30
   148f4:	bl	144f4 <__assert_fail@plt+0x312c>
   148f8:	add	r3, sp, #48	; 0x30
   148fc:	mvn	r2, #0
   14900:	mov	r1, r5
   14904:	mov	r0, r4
   14908:	bl	142e8 <__assert_fail@plt+0x2f20>
   1490c:	add	sp, sp, #100	; 0x64
   14910:	pop	{r4, r5, pc}
   14914:	push	{r4, r5, r6, r7, lr}
   14918:	mov	r4, r0
   1491c:	mov	r6, r1
   14920:	mov	r7, r2
   14924:	mov	r5, r3
   14928:	sub	sp, sp, #52	; 0x34
   1492c:	ldr	lr, [pc, #68]	; 14978 <__assert_fail@plt+0x35b0>
   14930:	mov	ip, sp
   14934:	ldm	lr!, {r0, r1, r2, r3}
   14938:	stmia	ip!, {r0, r1, r2, r3}
   1493c:	ldm	lr!, {r0, r1, r2, r3}
   14940:	stmia	ip!, {r0, r1, r2, r3}
   14944:	ldm	lr, {r0, r1, r2, r3}
   14948:	stm	ip, {r0, r1, r2, r3}
   1494c:	mov	r2, r7
   14950:	mov	r1, r6
   14954:	mov	r0, sp
   14958:	bl	14550 <__assert_fail@plt+0x3188>
   1495c:	ldr	r2, [sp, #72]	; 0x48
   14960:	mov	r3, sp
   14964:	mov	r1, r5
   14968:	mov	r0, r4
   1496c:	bl	142e8 <__assert_fail@plt+0x2f20>
   14970:	add	sp, sp, #52	; 0x34
   14974:	pop	{r4, r5, r6, r7, pc}
   14978:	andeq	r7, r2, ip, ror #5
   1497c:	mvn	ip, #0
   14980:	push	{r0, r1, r2, lr}
   14984:	str	ip, [sp]
   14988:	bl	14914 <__assert_fail@plt+0x354c>
   1498c:	add	sp, sp, #12
   14990:	pop	{pc}		; (ldr pc, [sp], #4)
   14994:	mov	r3, r2
   14998:	mov	r2, r1
   1499c:	mov	r1, r0
   149a0:	mov	r0, #0
   149a4:	b	1497c <__assert_fail@plt+0x35b4>
   149a8:	push	{r0, r1, r2, lr}
   149ac:	str	r3, [sp]
   149b0:	mov	r3, r2
   149b4:	mov	r2, r1
   149b8:	mov	r1, r0
   149bc:	mov	r0, #0
   149c0:	bl	14914 <__assert_fail@plt+0x354c>
   149c4:	add	sp, sp, #12
   149c8:	pop	{pc}		; (ldr pc, [sp], #4)
   149cc:	ldr	r3, [pc]	; 149d4 <__assert_fail@plt+0x360c>
   149d0:	b	142e8 <__assert_fail@plt+0x2f20>
   149d4:	andeq	r7, r2, r4, asr #2
   149d8:	mov	r2, r1
   149dc:	mov	r1, r0
   149e0:	mov	r0, #0
   149e4:	b	149cc <__assert_fail@plt+0x3604>
   149e8:	mvn	r2, #0
   149ec:	b	149cc <__assert_fail@plt+0x3604>
   149f0:	mov	r1, r0
   149f4:	mov	r0, #0
   149f8:	b	149e8 <__assert_fail@plt+0x3620>
   149fc:	push	{r4, r5, r6, lr}
   14a00:	mov	r4, r0
   14a04:	ldr	r6, [r0, #20]
   14a08:	ldr	r3, [r0, #24]
   14a0c:	ldr	r1, [r0, #28]
   14a10:	cmp	r3, r6
   14a14:	sub	r5, r3, r6
   14a18:	ldrbeq	r2, [r0, #52]	; 0x34
   14a1c:	sub	r5, r5, #1
   14a20:	orreq	r2, r2, #2
   14a24:	strbeq	r2, [r0, #52]	; 0x34
   14a28:	ldr	r2, [r0, #36]	; 0x24
   14a2c:	add	r3, r3, r2
   14a30:	bic	r3, r3, r2
   14a34:	ldr	r2, [r0, #16]
   14a38:	sub	r0, r3, r2
   14a3c:	sub	r2, r1, r2
   14a40:	cmp	r0, r2
   14a44:	ldr	r2, [r4, #68]	; 0x44
   14a48:	movhi	r3, r1
   14a4c:	str	r3, [r4, #20]
   14a50:	str	r3, [r4, #24]
   14a54:	ldr	r3, [r4, #72]	; 0x48
   14a58:	sub	r3, r3, r2
   14a5c:	cmp	r3, #3
   14a60:	bhi	14a70 <__assert_fail@plt+0x36a8>
   14a64:	mov	r1, #4
   14a68:	add	r0, r4, #56	; 0x38
   14a6c:	bl	158a0 <_obstack_newchunk@@Base>
   14a70:	ldr	r3, [r4, #68]	; 0x44
   14a74:	str	r6, [r3]
   14a78:	ldr	r3, [r4, #68]	; 0x44
   14a7c:	ldr	r2, [r4, #112]	; 0x70
   14a80:	add	r3, r3, #4
   14a84:	str	r3, [r4, #68]	; 0x44
   14a88:	ldr	r3, [r4, #116]	; 0x74
   14a8c:	sub	r3, r3, r2
   14a90:	cmp	r3, #3
   14a94:	bhi	14aa4 <__assert_fail@plt+0x36dc>
   14a98:	mov	r1, #4
   14a9c:	add	r0, r4, #100	; 0x64
   14aa0:	bl	158a0 <_obstack_newchunk@@Base>
   14aa4:	ldr	r3, [r4, #112]	; 0x70
   14aa8:	str	r5, [r3]
   14aac:	ldr	r3, [r4, #112]	; 0x70
   14ab0:	add	r3, r3, #4
   14ab4:	str	r3, [r4, #112]	; 0x70
   14ab8:	ldr	r3, [r4]
   14abc:	add	r3, r3, #1
   14ac0:	str	r3, [r4]
   14ac4:	pop	{r4, r5, r6, pc}
   14ac8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14acc:	mov	r4, #0
   14ad0:	mov	r5, r0
   14ad4:	mov	r2, r4
   14ad8:	mov	r1, r4
   14adc:	add	r0, r0, #12
   14ae0:	ldr	r6, [pc, #80]	; 14b38 <__assert_fail@plt+0x3770>
   14ae4:	str	r4, [r5]
   14ae8:	ldr	r7, [pc, #76]	; 14b3c <__assert_fail@plt+0x3774>
   14aec:	str	r4, [r5, #4]
   14af0:	str	r4, [r5, #8]
   14af4:	mov	r3, r6
   14af8:	str	r7, [sp]
   14afc:	bl	15860 <_obstack_begin@@Base>
   14b00:	mov	r3, r6
   14b04:	mov	r2, r4
   14b08:	str	r7, [sp]
   14b0c:	mov	r1, r4
   14b10:	add	r0, r5, #56	; 0x38
   14b14:	bl	15860 <_obstack_begin@@Base>
   14b18:	mov	r3, r6
   14b1c:	mov	r2, r4
   14b20:	str	r7, [sp]
   14b24:	mov	r1, r4
   14b28:	add	r0, r5, #100	; 0x64
   14b2c:	bl	15860 <_obstack_begin@@Base>
   14b30:	add	sp, sp, #12
   14b34:	pop	{r4, r5, r6, r7, pc}
   14b38:	andeq	r5, r1, r8, lsr #11
   14b3c:	strheq	r3, [r1], -r4
   14b40:	push	{r4, lr}
   14b44:	mov	r1, #0
   14b48:	mov	r4, r0
   14b4c:	add	r0, r0, #12
   14b50:	bl	159d8 <_obstack_free@@Base>
   14b54:	add	r0, r4, #56	; 0x38
   14b58:	mov	r1, #0
   14b5c:	bl	159d8 <_obstack_free@@Base>
   14b60:	add	r0, r4, #100	; 0x64
   14b64:	mov	r1, #0
   14b68:	pop	{r4, lr}
   14b6c:	b	159d8 <_obstack_free@@Base>
   14b70:	push	{r4, r5, r6, r7, r8, lr}
   14b74:	mov	r5, r0
   14b78:	mov	r4, r1
   14b7c:	add	r7, r1, #12
   14b80:	mov	r0, r5
   14b84:	bl	112f0 <fgetc@plt>
   14b88:	cmn	r0, #1
   14b8c:	mov	r6, r0
   14b90:	ldr	r3, [r4, #24]
   14b94:	bne	14cac <__assert_fail@plt+0x38e4>
   14b98:	ldr	r2, [r4, #20]
   14b9c:	cmp	r3, r2
   14ba0:	beq	14bd8 <__assert_fail@plt+0x3810>
   14ba4:	ldr	r2, [r4, #28]
   14ba8:	cmp	r3, r2
   14bac:	bne	14bbc <__assert_fail@plt+0x37f4>
   14bb0:	mov	r1, #1
   14bb4:	add	r0, r4, #12
   14bb8:	bl	158a0 <_obstack_newchunk@@Base>
   14bbc:	ldr	r3, [r4, #24]
   14bc0:	mov	r0, r4
   14bc4:	add	r2, r3, #1
   14bc8:	str	r2, [r4, #24]
   14bcc:	mov	r2, #0
   14bd0:	strb	r2, [r3]
   14bd4:	bl	149fc <__assert_fail@plt+0x3634>
   14bd8:	ldrd	r2, [r4, #68]	; 0x44
   14bdc:	sub	r3, r3, r2
   14be0:	cmp	r3, #3
   14be4:	bhi	14bf4 <__assert_fail@plt+0x382c>
   14be8:	mov	r1, #4
   14bec:	add	r0, r4, #56	; 0x38
   14bf0:	bl	158a0 <_obstack_newchunk@@Base>
   14bf4:	ldr	r3, [r4, #68]	; 0x44
   14bf8:	mov	r2, #0
   14bfc:	str	r2, [r3]
   14c00:	ldr	r1, [r4, #64]	; 0x40
   14c04:	ldr	r3, [r4, #68]	; 0x44
   14c08:	ldr	r0, [r4, #72]	; 0x48
   14c0c:	str	r1, [r4, #4]
   14c10:	add	r3, r3, #4
   14c14:	cmp	r3, r1
   14c18:	ldr	r1, [r4, #108]	; 0x6c
   14c1c:	ldrbeq	r2, [r4, #96]	; 0x60
   14c20:	str	r3, [r4, #68]	; 0x44
   14c24:	str	r1, [r4, #8]
   14c28:	orreq	r2, r2, #2
   14c2c:	strbeq	r2, [r4, #96]	; 0x60
   14c30:	ldr	r2, [r4, #80]	; 0x50
   14c34:	add	r3, r3, r2
   14c38:	bic	r3, r3, r2
   14c3c:	ldr	r2, [r4, #60]	; 0x3c
   14c40:	sub	ip, r3, r2
   14c44:	sub	r2, r0, r2
   14c48:	cmp	ip, r2
   14c4c:	movhi	r3, r0
   14c50:	ldr	r0, [r4, #116]	; 0x74
   14c54:	str	r3, [r4, #64]	; 0x40
   14c58:	str	r3, [r4, #68]	; 0x44
   14c5c:	ldr	r3, [r4, #112]	; 0x70
   14c60:	cmp	r3, r1
   14c64:	ldrbeq	r2, [r4, #140]	; 0x8c
   14c68:	orreq	r2, r2, #2
   14c6c:	strbeq	r2, [r4, #140]	; 0x8c
   14c70:	ldr	r2, [r4, #124]	; 0x7c
   14c74:	add	r3, r3, r2
   14c78:	bic	r3, r3, r2
   14c7c:	ldr	r2, [r4, #104]	; 0x68
   14c80:	sub	ip, r3, r2
   14c84:	sub	r2, r0, r2
   14c88:	cmp	ip, r2
   14c8c:	movhi	r3, r0
   14c90:	mov	r0, r5
   14c94:	str	r3, [r4, #108]	; 0x6c
   14c98:	str	r3, [r4, #112]	; 0x70
   14c9c:	bl	11110 <ferror@plt>
   14ca0:	clz	r0, r0
   14ca4:	lsr	r0, r0, #5
   14ca8:	pop	{r4, r5, r6, r7, r8, pc}
   14cac:	ldr	r2, [r4, #28]
   14cb0:	cmp	r2, r3
   14cb4:	bne	14cc4 <__assert_fail@plt+0x38fc>
   14cb8:	mov	r1, #1
   14cbc:	mov	r0, r7
   14cc0:	bl	158a0 <_obstack_newchunk@@Base>
   14cc4:	ldr	r3, [r4, #24]
   14cc8:	cmp	r6, #0
   14ccc:	add	r2, r3, #1
   14cd0:	str	r2, [r4, #24]
   14cd4:	strb	r6, [r3]
   14cd8:	bne	14b80 <__assert_fail@plt+0x37b8>
   14cdc:	mov	r0, r4
   14ce0:	bl	149fc <__assert_fail@plt+0x3634>
   14ce4:	b	14b80 <__assert_fail@plt+0x37b8>
   14ce8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cec:	mov	r7, r0
   14cf0:	mov	r8, r1
   14cf4:	mov	r9, r2
   14cf8:	ldr	r5, [pc, #80]	; 14d50 <__assert_fail@plt+0x3988>
   14cfc:	mov	r2, r9
   14d00:	mov	r1, r8
   14d04:	mov	r0, r7
   14d08:	bl	110d4 <read@plt>
   14d0c:	subs	r6, r0, #0
   14d10:	bge	14d40 <__assert_fail@plt+0x3978>
   14d14:	bl	112b4 <__errno_location@plt>
   14d18:	ldr	r3, [r0]
   14d1c:	cmp	r3, #4
   14d20:	beq	14cfc <__assert_fail@plt+0x3934>
   14d24:	cmp	r9, r5
   14d28:	movls	r4, #0
   14d2c:	movhi	r4, #1
   14d30:	cmp	r3, #22
   14d34:	movne	r4, #0
   14d38:	cmp	r4, #0
   14d3c:	bne	14d48 <__assert_fail@plt+0x3980>
   14d40:	mov	r0, r6
   14d44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d48:	mov	r9, r5
   14d4c:	b	14cfc <__assert_fail@plt+0x3934>
   14d50:	svcvc	0x00f00000	; IMB
   14d54:	push	{r4, r5, r6, lr}
   14d58:	cmp	r1, #0
   14d5c:	sub	sp, sp, #32
   14d60:	mov	r5, r0
   14d64:	ldr	r4, [sp, #48]	; 0x30
   14d68:	ldr	r6, [sp, #52]	; 0x34
   14d6c:	beq	14e20 <__assert_fail@plt+0x3a58>
   14d70:	strd	r2, [sp]
   14d74:	mov	r3, r1
   14d78:	mov	r1, #1
   14d7c:	ldr	r2, [pc, #856]	; 150dc <__assert_fail@plt+0x3d14>
   14d80:	bl	11314 <__fprintf_chk@plt>
   14d84:	mov	r2, #5
   14d88:	ldr	r1, [pc, #848]	; 150e0 <__assert_fail@plt+0x3d18>
   14d8c:	mov	r0, #0
   14d90:	bl	11158 <dcgettext@plt>
   14d94:	movw	r3, #2022	; 0x7e6
   14d98:	ldr	r2, [pc, #836]	; 150e4 <__assert_fail@plt+0x3d1c>
   14d9c:	mov	r1, #1
   14da0:	str	r3, [sp]
   14da4:	mov	r3, r0
   14da8:	mov	r0, r5
   14dac:	bl	11314 <__fprintf_chk@plt>
   14db0:	mov	r1, r5
   14db4:	mov	r0, #10
   14db8:	bl	1114c <fputc_unlocked@plt>
   14dbc:	mov	r2, #5
   14dc0:	ldr	r1, [pc, #800]	; 150e8 <__assert_fail@plt+0x3d20>
   14dc4:	mov	r0, #0
   14dc8:	bl	11158 <dcgettext@plt>
   14dcc:	mov	r2, r0
   14dd0:	mov	r1, #1
   14dd4:	ldr	r3, [pc, #784]	; 150ec <__assert_fail@plt+0x3d24>
   14dd8:	mov	r0, r5
   14ddc:	bl	11314 <__fprintf_chk@plt>
   14de0:	mov	r1, r5
   14de4:	mov	r0, #10
   14de8:	bl	1114c <fputc_unlocked@plt>
   14dec:	cmp	r6, #9
   14df0:	ldrls	pc, [pc, r6, lsl #2]
   14df4:	b	150d0 <__assert_fail@plt+0x3d08>
   14df8:	andeq	r4, r1, r0, lsl pc
   14dfc:	andeq	r4, r1, r8, lsr lr
   14e00:	andeq	r4, r1, r4, ror #28
   14e04:	muleq	r1, r8, lr
   14e08:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e0c:	andeq	r4, r1, r8, lsl pc
   14e10:	andeq	r4, r1, r0, ror #30
   14e14:			; <UNDEFINED> instruction: 0x00014fb0
   14e18:	andeq	r5, r1, r8
   14e1c:	andeq	r5, r1, r8, rrx
   14e20:	mov	r1, #1
   14e24:	str	r3, [sp]
   14e28:	mov	r3, r2
   14e2c:	ldr	r2, [pc, #700]	; 150f0 <__assert_fail@plt+0x3d28>
   14e30:	bl	11314 <__fprintf_chk@plt>
   14e34:	b	14d84 <__assert_fail@plt+0x39bc>
   14e38:	mov	r2, #5
   14e3c:	ldr	r1, [pc, #688]	; 150f4 <__assert_fail@plt+0x3d2c>
   14e40:	mov	r0, #0
   14e44:	bl	11158 <dcgettext@plt>
   14e48:	ldr	r3, [r4]
   14e4c:	mov	r2, r0
   14e50:	mov	r1, #1
   14e54:	mov	r0, r5
   14e58:	add	sp, sp, #32
   14e5c:	pop	{r4, r5, r6, lr}
   14e60:	b	11314 <__fprintf_chk@plt>
   14e64:	mov	r2, #5
   14e68:	ldr	r1, [pc, #648]	; 150f8 <__assert_fail@plt+0x3d30>
   14e6c:	mov	r0, #0
   14e70:	bl	11158 <dcgettext@plt>
   14e74:	ldr	r3, [r4, #4]
   14e78:	mov	r2, r0
   14e7c:	mov	r1, #1
   14e80:	mov	r0, r5
   14e84:	str	r3, [sp, #48]	; 0x30
   14e88:	ldr	r3, [r4]
   14e8c:	add	sp, sp, #32
   14e90:	pop	{r4, r5, r6, lr}
   14e94:	b	11314 <__fprintf_chk@plt>
   14e98:	mov	r2, #5
   14e9c:	ldr	r1, [pc, #600]	; 150fc <__assert_fail@plt+0x3d34>
   14ea0:	mov	r0, #0
   14ea4:	bl	11158 <dcgettext@plt>
   14ea8:	ldr	r3, [r4, #8]
   14eac:	mov	r2, r0
   14eb0:	mov	r1, #1
   14eb4:	mov	r0, r5
   14eb8:	str	r3, [sp, #52]	; 0x34
   14ebc:	ldr	r3, [r4, #4]
   14ec0:	str	r3, [sp, #48]	; 0x30
   14ec4:	ldr	r3, [r4]
   14ec8:	add	sp, sp, #32
   14ecc:	pop	{r4, r5, r6, lr}
   14ed0:	b	11314 <__fprintf_chk@plt>
   14ed4:	mov	r2, #5
   14ed8:	ldr	r1, [pc, #544]	; 15100 <__assert_fail@plt+0x3d38>
   14edc:	mov	r0, #0
   14ee0:	bl	11158 <dcgettext@plt>
   14ee4:	ldr	r3, [r4, #12]
   14ee8:	mov	r2, r0
   14eec:	mov	r1, #1
   14ef0:	mov	r0, r5
   14ef4:	str	r3, [sp, #8]
   14ef8:	ldr	r3, [r4, #8]
   14efc:	str	r3, [sp, #4]
   14f00:	ldr	r3, [r4, #4]
   14f04:	str	r3, [sp]
   14f08:	ldr	r3, [r4]
   14f0c:	bl	11314 <__fprintf_chk@plt>
   14f10:	add	sp, sp, #32
   14f14:	pop	{r4, r5, r6, pc}
   14f18:	mov	r2, #5
   14f1c:	ldr	r1, [pc, #480]	; 15104 <__assert_fail@plt+0x3d3c>
   14f20:	mov	r0, #0
   14f24:	bl	11158 <dcgettext@plt>
   14f28:	ldr	r3, [r4, #16]
   14f2c:	mov	r2, r0
   14f30:	mov	r1, #1
   14f34:	mov	r0, r5
   14f38:	str	r3, [sp, #12]
   14f3c:	ldr	r3, [r4, #12]
   14f40:	str	r3, [sp, #8]
   14f44:	ldr	r3, [r4, #8]
   14f48:	str	r3, [sp, #4]
   14f4c:	ldr	r3, [r4, #4]
   14f50:	str	r3, [sp]
   14f54:	ldr	r3, [r4]
   14f58:	bl	11314 <__fprintf_chk@plt>
   14f5c:	b	14f10 <__assert_fail@plt+0x3b48>
   14f60:	mov	r2, #5
   14f64:	ldr	r1, [pc, #412]	; 15108 <__assert_fail@plt+0x3d40>
   14f68:	mov	r0, #0
   14f6c:	bl	11158 <dcgettext@plt>
   14f70:	ldr	r3, [r4, #20]
   14f74:	mov	r2, r0
   14f78:	mov	r1, #1
   14f7c:	mov	r0, r5
   14f80:	str	r3, [sp, #16]
   14f84:	ldr	r3, [r4, #16]
   14f88:	str	r3, [sp, #12]
   14f8c:	ldr	r3, [r4, #12]
   14f90:	str	r3, [sp, #8]
   14f94:	ldr	r3, [r4, #8]
   14f98:	str	r3, [sp, #4]
   14f9c:	ldr	r3, [r4, #4]
   14fa0:	str	r3, [sp]
   14fa4:	ldr	r3, [r4]
   14fa8:	bl	11314 <__fprintf_chk@plt>
   14fac:	b	14f10 <__assert_fail@plt+0x3b48>
   14fb0:	mov	r2, #5
   14fb4:	ldr	r1, [pc, #336]	; 1510c <__assert_fail@plt+0x3d44>
   14fb8:	mov	r0, #0
   14fbc:	bl	11158 <dcgettext@plt>
   14fc0:	ldr	r3, [r4, #24]
   14fc4:	mov	r2, r0
   14fc8:	mov	r1, #1
   14fcc:	mov	r0, r5
   14fd0:	str	r3, [sp, #20]
   14fd4:	ldr	r3, [r4, #20]
   14fd8:	str	r3, [sp, #16]
   14fdc:	ldr	r3, [r4, #16]
   14fe0:	str	r3, [sp, #12]
   14fe4:	ldr	r3, [r4, #12]
   14fe8:	str	r3, [sp, #8]
   14fec:	ldr	r3, [r4, #8]
   14ff0:	str	r3, [sp, #4]
   14ff4:	ldr	r3, [r4, #4]
   14ff8:	str	r3, [sp]
   14ffc:	ldr	r3, [r4]
   15000:	bl	11314 <__fprintf_chk@plt>
   15004:	b	14f10 <__assert_fail@plt+0x3b48>
   15008:	mov	r2, #5
   1500c:	ldr	r1, [pc, #252]	; 15110 <__assert_fail@plt+0x3d48>
   15010:	mov	r0, #0
   15014:	bl	11158 <dcgettext@plt>
   15018:	ldr	r3, [r4, #28]
   1501c:	mov	r2, r0
   15020:	mov	r1, #1
   15024:	mov	r0, r5
   15028:	str	r3, [sp, #24]
   1502c:	ldr	r3, [r4, #24]
   15030:	str	r3, [sp, #20]
   15034:	ldr	r3, [r4, #20]
   15038:	str	r3, [sp, #16]
   1503c:	ldr	r3, [r4, #16]
   15040:	str	r3, [sp, #12]
   15044:	ldr	r3, [r4, #12]
   15048:	str	r3, [sp, #8]
   1504c:	ldr	r3, [r4, #8]
   15050:	str	r3, [sp, #4]
   15054:	ldr	r3, [r4, #4]
   15058:	str	r3, [sp]
   1505c:	ldr	r3, [r4]
   15060:	bl	11314 <__fprintf_chk@plt>
   15064:	b	14f10 <__assert_fail@plt+0x3b48>
   15068:	ldr	r1, [pc, #164]	; 15114 <__assert_fail@plt+0x3d4c>
   1506c:	mov	r2, #5
   15070:	mov	r0, #0
   15074:	bl	11158 <dcgettext@plt>
   15078:	ldr	r3, [r4, #32]
   1507c:	mov	r2, r0
   15080:	mov	r1, #1
   15084:	mov	r0, r5
   15088:	str	r3, [sp, #28]
   1508c:	ldr	r3, [r4, #28]
   15090:	str	r3, [sp, #24]
   15094:	ldr	r3, [r4, #24]
   15098:	str	r3, [sp, #20]
   1509c:	ldr	r3, [r4, #20]
   150a0:	str	r3, [sp, #16]
   150a4:	ldr	r3, [r4, #16]
   150a8:	str	r3, [sp, #12]
   150ac:	ldr	r3, [r4, #12]
   150b0:	str	r3, [sp, #8]
   150b4:	ldr	r3, [r4, #8]
   150b8:	str	r3, [sp, #4]
   150bc:	ldr	r3, [r4, #4]
   150c0:	str	r3, [sp]
   150c4:	ldr	r3, [r4]
   150c8:	bl	11314 <__fprintf_chk@plt>
   150cc:	b	14f10 <__assert_fail@plt+0x3b48>
   150d0:	mov	r2, #5
   150d4:	ldr	r1, [pc, #60]	; 15118 <__assert_fail@plt+0x3d50>
   150d8:	b	15070 <__assert_fail@plt+0x3ca8>
   150dc:	andeq	r6, r1, fp, lsr sl
   150e0:	andeq	r6, r1, lr, asr #20
   150e4:	andeq	r6, r1, ip, lsl sp
   150e8:	andeq	r6, r1, r2, asr sl
   150ec:	strdeq	r6, [r1], -sp
   150f0:	andeq	r6, r1, r7, asr #20
   150f4:	andeq	r6, r1, pc, lsl fp
   150f8:	andeq	r6, r1, pc, lsr #22
   150fc:	andeq	r6, r1, r6, asr #22
   15100:	andeq	r6, r1, r2, ror #22
   15104:	andeq	r6, r1, r2, lsl #23
   15108:	andeq	r6, r1, r6, lsr #23
   1510c:	andeq	r6, r1, lr, asr #23
   15110:	strdeq	r6, [r1], -sl
   15114:	andeq	r6, r1, sl, lsr #24
   15118:	andeq	r6, r1, lr, asr ip
   1511c:	push	{r0, r1, r4, lr}
   15120:	mov	ip, #0
   15124:	ldr	lr, [sp, #16]
   15128:	ldr	r4, [lr, ip, lsl #2]
   1512c:	cmp	r4, #0
   15130:	bne	15148 <__assert_fail@plt+0x3d80>
   15134:	str	lr, [sp]
   15138:	str	ip, [sp, #4]
   1513c:	bl	14d54 <__assert_fail@plt+0x398c>
   15140:	add	sp, sp, #8
   15144:	pop	{r4, pc}
   15148:	add	ip, ip, #1
   1514c:	b	15128 <__assert_fail@plt+0x3d60>
   15150:	push	{r4, r5, r6, lr}
   15154:	sub	sp, sp, #48	; 0x30
   15158:	mov	ip, #0
   1515c:	add	lr, sp, #8
   15160:	mov	r5, lr
   15164:	ldr	r6, [sp, #64]	; 0x40
   15168:	ldr	r4, [r6, ip, lsl #2]
   1516c:	cmp	r4, #0
   15170:	str	r4, [lr], #4
   15174:	beq	15184 <__assert_fail@plt+0x3dbc>
   15178:	add	ip, ip, #1
   1517c:	cmp	ip, #10
   15180:	bne	15168 <__assert_fail@plt+0x3da0>
   15184:	stm	sp, {r5, ip}
   15188:	bl	14d54 <__assert_fail@plt+0x398c>
   1518c:	add	sp, sp, #48	; 0x30
   15190:	pop	{r4, r5, r6, pc}
   15194:	push	{r3}		; (str r3, [sp, #-4]!)
   15198:	push	{r0, r1, r2, r3, lr}
   1519c:	add	r3, sp, #24
   151a0:	str	r3, [sp]
   151a4:	str	r3, [sp, #12]
   151a8:	ldr	r3, [sp, #20]
   151ac:	bl	15150 <__assert_fail@plt+0x3d88>
   151b0:	add	sp, sp, #16
   151b4:	pop	{lr}		; (ldr lr, [sp], #4)
   151b8:	add	sp, sp, #4
   151bc:	bx	lr
   151c0:	ldr	r3, [pc, #116]	; 1523c <__assert_fail@plt+0x3e74>
   151c4:	mov	r0, #10
   151c8:	push	{r4, lr}
   151cc:	ldr	r1, [r3]
   151d0:	bl	1114c <fputc_unlocked@plt>
   151d4:	mov	r2, #5
   151d8:	ldr	r1, [pc, #96]	; 15240 <__assert_fail@plt+0x3e78>
   151dc:	mov	r0, #0
   151e0:	bl	11158 <dcgettext@plt>
   151e4:	mov	r1, r0
   151e8:	ldr	r2, [pc, #84]	; 15244 <__assert_fail@plt+0x3e7c>
   151ec:	mov	r0, #1
   151f0:	bl	112fc <__printf_chk@plt>
   151f4:	mov	r2, #5
   151f8:	ldr	r1, [pc, #72]	; 15248 <__assert_fail@plt+0x3e80>
   151fc:	mov	r0, #0
   15200:	bl	11158 <dcgettext@plt>
   15204:	mov	r1, r0
   15208:	ldr	r3, [pc, #60]	; 1524c <__assert_fail@plt+0x3e84>
   1520c:	mov	r0, #1
   15210:	ldr	r2, [pc, #56]	; 15250 <__assert_fail@plt+0x3e88>
   15214:	bl	112fc <__printf_chk@plt>
   15218:	mov	r2, #5
   1521c:	ldr	r1, [pc, #48]	; 15254 <__assert_fail@plt+0x3e8c>
   15220:	mov	r0, #0
   15224:	bl	11158 <dcgettext@plt>
   15228:	mov	r1, r0
   1522c:	ldr	r2, [pc, #36]	; 15258 <__assert_fail@plt+0x3e90>
   15230:	mov	r0, #1
   15234:	pop	{r4, lr}
   15238:	b	112fc <__printf_chk@plt>
   1523c:	muleq	r2, r4, r1
   15240:	muleq	r1, sl, ip
   15244:	andeq	r6, r1, lr, lsr #25
   15248:	andeq	r6, r1, r4, asr #25
   1524c:	andeq	r6, r1, r3, lsr #12
   15250:	andeq	r6, r1, fp, asr #12
   15254:	ldrdeq	r6, [r1], -r8
   15258:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   1525c:	push	{r4, lr}
   15260:	bl	155a8 <__assert_fail@plt+0x41e0>
   15264:	cmp	r0, #0
   15268:	popne	{r4, pc}
   1526c:	bl	15514 <__assert_fail@plt+0x414c>
   15270:	push	{r4, lr}
   15274:	bl	155a8 <__assert_fail@plt+0x41e0>
   15278:	cmp	r0, #0
   1527c:	popne	{r4, pc}
   15280:	bl	15514 <__assert_fail@plt+0x414c>
   15284:	b	1525c <__assert_fail@plt+0x3e94>
   15288:	push	{r4, r5, r6, lr}
   1528c:	mov	r5, r0
   15290:	mov	r4, r1
   15294:	bl	155d4 <__assert_fail@plt+0x420c>
   15298:	cmp	r0, #0
   1529c:	popne	{r4, r5, r6, pc}
   152a0:	adds	r4, r4, #0
   152a4:	movne	r4, #1
   152a8:	cmp	r5, #0
   152ac:	moveq	r4, #1
   152b0:	cmp	r4, #0
   152b4:	popeq	{r4, r5, r6, pc}
   152b8:	bl	15514 <__assert_fail@plt+0x414c>
   152bc:	push	{r4, lr}
   152c0:	bl	156e8 <__assert_fail@plt+0x4320>
   152c4:	cmp	r0, #0
   152c8:	popne	{r4, pc}
   152cc:	bl	15514 <__assert_fail@plt+0x414c>
   152d0:	push	{r4, r5, r6, lr}
   152d4:	mov	r6, r0
   152d8:	mov	r5, r1
   152dc:	mov	r4, r2
   152e0:	bl	15a64 <_obstack_memory_used@@Base+0x24>
   152e4:	cmp	r0, #0
   152e8:	popne	{r4, r5, r6, pc}
   152ec:	cmp	r6, #0
   152f0:	beq	15300 <__assert_fail@plt+0x3f38>
   152f4:	cmp	r5, #0
   152f8:	cmpne	r4, #0
   152fc:	popeq	{r4, r5, r6, pc}
   15300:	bl	15514 <__assert_fail@plt+0x414c>
   15304:	b	152d0 <__assert_fail@plt+0x3f08>
   15308:	push	{r4, lr}
   1530c:	bl	156f8 <__assert_fail@plt+0x4330>
   15310:	cmp	r0, #0
   15314:	popne	{r4, pc}
   15318:	bl	15514 <__assert_fail@plt+0x414c>
   1531c:	mov	r2, r1
   15320:	mov	r1, r0
   15324:	mov	r0, #0
   15328:	b	152d0 <__assert_fail@plt+0x3f08>
   1532c:	mov	r2, r1
   15330:	mov	r1, r0
   15334:	mov	r0, #0
   15338:	b	15308 <__assert_fail@plt+0x3f40>
   1533c:	cmp	r0, #0
   15340:	push	{r4, r5, r6, lr}
   15344:	mov	r5, r1
   15348:	ldr	r4, [r1]
   1534c:	bne	15378 <__assert_fail@plt+0x3fb0>
   15350:	cmp	r4, #0
   15354:	bne	15368 <__assert_fail@plt+0x3fa0>
   15358:	mov	r4, #64	; 0x40
   1535c:	udiv	r4, r4, r2
   15360:	cmp	r2, #64	; 0x40
   15364:	addhi	r4, r4, #1
   15368:	mov	r1, r4
   1536c:	bl	152d0 <__assert_fail@plt+0x3f08>
   15370:	str	r4, [r5]
   15374:	pop	{r4, r5, r6, pc}
   15378:	lsr	r3, r4, #1
   1537c:	add	r3, r3, #1
   15380:	adds	r4, r4, r3
   15384:	bcc	15368 <__assert_fail@plt+0x3fa0>
   15388:	bl	15514 <__assert_fail@plt+0x414c>
   1538c:	mov	r2, #1
   15390:	b	1533c <__assert_fail@plt+0x3f74>
   15394:	ldr	ip, [r1]
   15398:	push	{r4, r5, r6, r7, r8, lr}
   1539c:	mov	r5, r1
   153a0:	mvn	r8, r3
   153a4:	lsr	r8, r8, #31
   153a8:	ldr	lr, [sp, #24]
   153ac:	asr	r1, ip, #1
   153b0:	adds	r4, ip, r1
   153b4:	mvnvs	r4, #-2147483648	; 0x80000000
   153b8:	cmp	r3, r4
   153bc:	movge	r1, #0
   153c0:	andlt	r1, r8, #1
   153c4:	cmp	r1, #0
   153c8:	movne	r4, r3
   153cc:	smull	r6, r7, r4, lr
   153d0:	cmp	r7, r6, asr #31
   153d4:	bne	153ec <__assert_fail@plt+0x4024>
   153d8:	cmp	r6, #63	; 0x3f
   153dc:	mov	r1, r6
   153e0:	bgt	153fc <__assert_fail@plt+0x4034>
   153e4:	mov	r1, #64	; 0x40
   153e8:	b	153f0 <__assert_fail@plt+0x4028>
   153ec:	mvn	r1, #-2147483648	; 0x80000000
   153f0:	sdiv	r4, r1, lr
   153f4:	mls	r6, lr, r4, r1
   153f8:	sub	r1, r1, r6
   153fc:	cmp	r0, #0
   15400:	sub	r6, r4, ip
   15404:	streq	r0, [r5]
   15408:	cmp	r6, r2
   1540c:	bge	15440 <__assert_fail@plt+0x4078>
   15410:	adds	r4, ip, r2
   15414:	bvs	1543c <__assert_fail@plt+0x4074>
   15418:	cmp	r4, r3
   1541c:	movle	r3, #0
   15420:	andgt	r3, r8, #1
   15424:	cmp	r3, #0
   15428:	bne	1543c <__assert_fail@plt+0x4074>
   1542c:	smull	r2, r3, r4, lr
   15430:	cmp	r3, r2, asr #31
   15434:	mov	r1, r2
   15438:	beq	15440 <__assert_fail@plt+0x4078>
   1543c:	bl	15514 <__assert_fail@plt+0x414c>
   15440:	bl	15288 <__assert_fail@plt+0x3ec0>
   15444:	str	r4, [r5]
   15448:	pop	{r4, r5, r6, r7, r8, pc}
   1544c:	push	{r4, lr}
   15450:	bl	15554 <__assert_fail@plt+0x418c>
   15454:	cmp	r0, #0
   15458:	popne	{r4, pc}
   1545c:	bl	15514 <__assert_fail@plt+0x414c>
   15460:	mov	r1, #1
   15464:	b	1544c <__assert_fail@plt+0x4084>
   15468:	push	{r4, lr}
   1546c:	bl	15554 <__assert_fail@plt+0x418c>
   15470:	cmp	r0, #0
   15474:	popne	{r4, pc}
   15478:	bl	15514 <__assert_fail@plt+0x414c>
   1547c:	mov	r1, #1
   15480:	b	15468 <__assert_fail@plt+0x40a0>
   15484:	push	{r4, r5, r6, lr}
   15488:	mov	r4, r1
   1548c:	mov	r5, r0
   15490:	mov	r0, r1
   15494:	bl	1525c <__assert_fail@plt+0x3e94>
   15498:	mov	r2, r4
   1549c:	mov	r1, r5
   154a0:	pop	{r4, r5, r6, lr}
   154a4:	b	11128 <memcpy@plt>
   154a8:	push	{r4, r5, r6, lr}
   154ac:	mov	r4, r1
   154b0:	mov	r5, r0
   154b4:	mov	r0, r1
   154b8:	bl	15270 <__assert_fail@plt+0x3ea8>
   154bc:	mov	r2, r4
   154c0:	mov	r1, r5
   154c4:	pop	{r4, r5, r6, lr}
   154c8:	b	11128 <memcpy@plt>
   154cc:	push	{r4, r5, r6, lr}
   154d0:	mov	r5, r0
   154d4:	add	r0, r1, #1
   154d8:	mov	r4, r1
   154dc:	bl	15270 <__assert_fail@plt+0x3ea8>
   154e0:	mov	r2, #0
   154e4:	mov	r1, r5
   154e8:	strb	r2, [r0, r4]
   154ec:	mov	r2, r4
   154f0:	pop	{r4, r5, r6, lr}
   154f4:	b	11128 <memcpy@plt>
   154f8:	push	{r4, lr}
   154fc:	mov	r4, r0
   15500:	bl	11290 <strlen@plt>
   15504:	add	r1, r0, #1
   15508:	mov	r0, r4
   1550c:	pop	{r4, lr}
   15510:	b	15484 <__assert_fail@plt+0x40bc>
   15514:	ldr	r3, [pc, #44]	; 15548 <__assert_fail@plt+0x4180>
   15518:	mov	r2, #5
   1551c:	mov	r0, #0
   15520:	push	{r4, lr}
   15524:	ldr	r1, [pc, #32]	; 1554c <__assert_fail@plt+0x4184>
   15528:	ldr	r4, [r3]
   1552c:	bl	11158 <dcgettext@plt>
   15530:	mov	r3, r0
   15534:	ldr	r2, [pc, #20]	; 15550 <__assert_fail@plt+0x4188>
   15538:	mov	r1, #0
   1553c:	mov	r0, r4
   15540:	bl	111f4 <error@plt>
   15544:	bl	113a4 <abort@plt>
   15548:	andeq	r7, r2, r0, lsr r1
   1554c:	andeq	r6, r1, fp, asr #26
   15550:	andeq	r6, r1, r1, lsr #18
   15554:	cmp	r1, #0
   15558:	cmpne	r0, #0
   1555c:	beq	15594 <__assert_fail@plt+0x41cc>
   15560:	push	{r4, r5, r6, lr}
   15564:	umull	r4, r5, r0, r1
   15568:	adds	r3, r5, #0
   1556c:	movne	r3, #1
   15570:	cmp	r4, #0
   15574:	blt	15580 <__assert_fail@plt+0x41b8>
   15578:	cmp	r3, #0
   1557c:	beq	155a0 <__assert_fail@plt+0x41d8>
   15580:	bl	112b4 <__errno_location@plt>
   15584:	mov	r3, #12
   15588:	str	r3, [r0]
   1558c:	mov	r0, #0
   15590:	pop	{r4, r5, r6, pc}
   15594:	mov	r1, #1
   15598:	mov	r0, r1
   1559c:	b	11098 <calloc@plt>
   155a0:	pop	{r4, r5, r6, lr}
   155a4:	b	1559c <__assert_fail@plt+0x41d4>
   155a8:	cmp	r0, #0
   155ac:	beq	155cc <__assert_fail@plt+0x4204>
   155b0:	bge	155d0 <__assert_fail@plt+0x4208>
   155b4:	push	{r4, lr}
   155b8:	bl	112b4 <__errno_location@plt>
   155bc:	mov	r3, #12
   155c0:	str	r3, [r0]
   155c4:	mov	r0, #0
   155c8:	pop	{r4, pc}
   155cc:	mov	r0, #1
   155d0:	b	11224 <malloc@plt>
   155d4:	cmp	r0, #0
   155d8:	bne	155e4 <__assert_fail@plt+0x421c>
   155dc:	mov	r0, r1
   155e0:	b	155a8 <__assert_fail@plt+0x41e0>
   155e4:	cmp	r1, #0
   155e8:	push	{r4, lr}
   155ec:	bne	155fc <__assert_fail@plt+0x4234>
   155f0:	bl	130b4 <__assert_fail@plt+0x1cec>
   155f4:	mov	r0, #0
   155f8:	pop	{r4, pc}
   155fc:	blt	15608 <__assert_fail@plt+0x4240>
   15600:	pop	{r4, lr}
   15604:	b	11170 <realloc@plt>
   15608:	bl	112b4 <__errno_location@plt>
   1560c:	mov	r3, #12
   15610:	str	r3, [r0]
   15614:	b	155f4 <__assert_fail@plt+0x422c>
   15618:	push	{r4, r5, r6, lr}
   1561c:	mov	r4, r0
   15620:	bl	111d0 <__fpending@plt>
   15624:	mov	r5, r0
   15628:	mov	r0, r4
   1562c:	bl	111dc <ferror_unlocked@plt>
   15630:	mov	r6, r0
   15634:	mov	r0, r4
   15638:	bl	12fbc <__assert_fail@plt+0x1bf4>
   1563c:	cmp	r6, #0
   15640:	mov	r4, r0
   15644:	bne	15670 <__assert_fail@plt+0x42a8>
   15648:	cmp	r0, #0
   1564c:	beq	15668 <__assert_fail@plt+0x42a0>
   15650:	cmp	r5, #0
   15654:	bne	15680 <__assert_fail@plt+0x42b8>
   15658:	bl	112b4 <__errno_location@plt>
   1565c:	ldr	r4, [r0]
   15660:	subs	r4, r4, #9
   15664:	mvnne	r4, #0
   15668:	mov	r0, r4
   1566c:	pop	{r4, r5, r6, pc}
   15670:	cmp	r0, #0
   15674:	bne	15680 <__assert_fail@plt+0x42b8>
   15678:	bl	112b4 <__errno_location@plt>
   1567c:	str	r4, [r0]
   15680:	mvn	r4, #0
   15684:	b	15668 <__assert_fail@plt+0x42a0>
   15688:	push	{lr}		; (str lr, [sp, #-4]!)
   1568c:	sub	sp, sp, #268	; 0x10c
   15690:	movw	r2, #257	; 0x101
   15694:	add	r1, sp, #4
   15698:	bl	15a90 <_obstack_memory_used@@Base+0x50>
   1569c:	cmp	r0, #0
   156a0:	movne	r0, #0
   156a4:	bne	156d4 <__assert_fail@plt+0x430c>
   156a8:	ldr	r1, [pc, #44]	; 156dc <__assert_fail@plt+0x4314>
   156ac:	add	r0, sp, #4
   156b0:	bl	110bc <strcmp@plt>
   156b4:	cmp	r0, #0
   156b8:	beq	156d0 <__assert_fail@plt+0x4308>
   156bc:	ldr	r1, [pc, #28]	; 156e0 <__assert_fail@plt+0x4318>
   156c0:	add	r0, sp, #4
   156c4:	bl	110bc <strcmp@plt>
   156c8:	adds	r0, r0, #0
   156cc:	movne	r0, #1
   156d0:	and	r0, r0, #1
   156d4:	add	sp, sp, #268	; 0x10c
   156d8:	pop	{pc}		; (ldr pc, [sp], #4)
   156dc:	andeq	r6, r1, ip, asr sp
   156e0:	andeq	r6, r1, lr, asr sp
   156e4:	b	155a8 <__assert_fail@plt+0x41e0>
   156e8:	cmp	r1, #0
   156ec:	orreq	r1, r1, #1
   156f0:	b	155d4 <__assert_fail@plt+0x420c>
   156f4:	b	15554 <__assert_fail@plt+0x418c>
   156f8:	cmp	r2, #0
   156fc:	cmpne	r1, #0
   15700:	moveq	r2, #1
   15704:	moveq	r1, r2
   15708:	b	15a64 <_obstack_memory_used@@Base+0x24>
   1570c:	push	{r4, lr}
   15710:	mov	r0, #14
   15714:	bl	11350 <nl_langinfo@plt>
   15718:	cmp	r0, #0
   1571c:	beq	15734 <__assert_fail@plt+0x436c>
   15720:	ldrb	r2, [r0]
   15724:	ldr	r3, [pc, #16]	; 1573c <__assert_fail@plt+0x4374>
   15728:	cmp	r2, #0
   1572c:	moveq	r0, r3
   15730:	pop	{r4, pc}
   15734:	ldr	r0, [pc]	; 1573c <__assert_fail@plt+0x4374>
   15738:	pop	{r4, pc}
   1573c:	andeq	r6, r1, r4, ror #26
   15740:	ldr	r3, [pc, #52]	; 1577c <__assert_fail@plt+0x43b4>
   15744:	mov	r2, #5
   15748:	mov	r0, #0
   1574c:	push	{r4, lr}
   15750:	ldr	r1, [pc, #40]	; 15780 <__assert_fail@plt+0x43b8>
   15754:	ldr	r4, [r3]
   15758:	bl	11158 <dcgettext@plt>
   1575c:	mov	r3, r0
   15760:	ldr	r2, [pc, #28]	; 15784 <__assert_fail@plt+0x43bc>
   15764:	mov	r1, #1
   15768:	mov	r0, r4
   1576c:	bl	11314 <__fprintf_chk@plt>
   15770:	ldr	r3, [pc, #16]	; 15788 <__assert_fail@plt+0x43c0>
   15774:	ldr	r0, [r3]
   15778:	bl	1126c <exit@plt>
   1577c:	andeq	r7, r2, r8, lsl #3
   15780:	andeq	r6, r1, fp, asr #26
   15784:	andeq	r6, r1, r3, asr #20
   15788:	andeq	r7, r2, r0, lsr r1
   1578c:	mov	r3, r0
   15790:	mov	r0, r1
   15794:	ldrb	ip, [r3, #40]	; 0x28
   15798:	ldr	r2, [r3, #28]
   1579c:	tst	ip, #1
   157a0:	beq	157ac <__assert_fail@plt+0x43e4>
   157a4:	ldr	r0, [r3, #36]	; 0x24
   157a8:	bx	r2
   157ac:	bx	r2
   157b0:	mov	r3, r0
   157b4:	mov	r0, r1
   157b8:	ldrb	ip, [r3, #40]	; 0x28
   157bc:	ldr	r2, [r3, #32]
   157c0:	tst	ip, #1
   157c4:	beq	157d0 <__assert_fail@plt+0x4408>
   157c8:	ldr	r0, [r3, #36]	; 0x24
   157cc:	bx	r2
   157d0:	bx	r2
   157d4:	push	{r4, r5, r6, lr}
   157d8:	subs	r5, r2, #0
   157dc:	movw	r3, #4072	; 0xfe8
   157e0:	moveq	r5, #8
   157e4:	cmp	r1, #0
   157e8:	moveq	r1, r3
   157ec:	sub	r6, r5, #1
   157f0:	mov	r4, r0
   157f4:	str	r1, [r0]
   157f8:	str	r6, [r0, #24]
   157fc:	bl	1578c <__assert_fail@plt+0x43c4>
   15800:	cmp	r0, #0
   15804:	str	r0, [r4, #4]
   15808:	bne	15818 <__assert_fail@plt+0x4450>
   1580c:	ldr	r3, [pc, #72]	; 1585c <__assert_fail@plt+0x4494>
   15810:	ldr	r3, [r3]
   15814:	blx	r3
   15818:	add	r3, r0, #8
   1581c:	rsb	r2, r5, #0
   15820:	add	r3, r3, r6
   15824:	and	r2, r2, r3
   15828:	ldr	r3, [r4]
   1582c:	str	r2, [r4, #8]
   15830:	str	r2, [r4, #12]
   15834:	add	r3, r0, r3
   15838:	str	r3, [r0]
   1583c:	str	r3, [r4, #16]
   15840:	mov	r3, #0
   15844:	str	r3, [r0, #4]
   15848:	mov	r0, #1
   1584c:	ldrb	r3, [r4, #40]	; 0x28
   15850:	bic	r3, r3, #6
   15854:	strb	r3, [r4, #40]	; 0x28
   15858:	pop	{r4, r5, r6, pc}
   1585c:	andeq	r7, r2, r4, ror r1

00015860 <_obstack_begin@@Base>:
   15860:	str	r3, [r0, #28]
   15864:	ldr	r3, [sp]
   15868:	str	r3, [r0, #32]
   1586c:	ldrb	r3, [r0, #40]	; 0x28
   15870:	bfc	r3, #0, #1
   15874:	strb	r3, [r0, #40]	; 0x28
   15878:	b	157d4 <__assert_fail@plt+0x440c>

0001587c <_obstack_begin_1@@Base>:
   1587c:	str	r3, [r0, #28]
   15880:	ldr	r3, [sp]
   15884:	str	r3, [r0, #32]
   15888:	ldr	r3, [sp, #4]
   1588c:	str	r3, [r0, #36]	; 0x24
   15890:	ldrb	r3, [r0, #40]	; 0x28
   15894:	orr	r3, r3, #1
   15898:	strb	r3, [r0, #40]	; 0x28
   1589c:	b	157d4 <__assert_fail@plt+0x440c>

000158a0 <_obstack_newchunk@@Base>:
   158a0:	push	{r4, r5, r6, r7, r8, lr}
   158a4:	ldr	r7, [r0, #4]
   158a8:	ldr	r3, [r0, #8]
   158ac:	ldr	r5, [r0, #12]
   158b0:	sub	r6, r5, r3
   158b4:	ldr	r3, [r0, #24]
   158b8:	adds	r1, r6, r1
   158bc:	movcs	ip, #1
   158c0:	movcc	ip, #0
   158c4:	eor	ip, ip, #1
   158c8:	adds	r3, r3, r1
   158cc:	ldr	r1, [r0]
   158d0:	add	r5, r3, r6, lsr #3
   158d4:	movcs	r2, #1
   158d8:	movcc	r2, #0
   158dc:	add	r5, r5, #100	; 0x64
   158e0:	cmp	r3, r1
   158e4:	movcc	r3, r1
   158e8:	cmp	r3, r5
   158ec:	movcs	r5, r3
   158f0:	eor	r3, r2, #1
   158f4:	tst	ip, r3
   158f8:	bne	15908 <_obstack_newchunk@@Base+0x68>
   158fc:	ldr	r3, [pc, #164]	; 159a8 <_obstack_newchunk@@Base+0x108>
   15900:	ldr	r3, [r3]
   15904:	blx	r3
   15908:	mov	r1, r5
   1590c:	mov	r4, r0
   15910:	bl	1578c <__assert_fail@plt+0x43c4>
   15914:	subs	r8, r0, #0
   15918:	beq	158fc <_obstack_newchunk@@Base+0x5c>
   1591c:	add	r5, r8, r5
   15920:	mov	r3, r8
   15924:	str	r8, [r4, #4]
   15928:	ldr	r1, [r4, #8]
   1592c:	mov	r2, r6
   15930:	str	r7, [r8, #4]
   15934:	str	r5, [r4, #16]
   15938:	str	r5, [r3], #8
   1593c:	ldr	r5, [r4, #24]
   15940:	add	r3, r3, r5
   15944:	bic	r5, r3, r5
   15948:	mov	r0, r5
   1594c:	bl	11128 <memcpy@plt>
   15950:	ldrb	r3, [r4, #40]	; 0x28
   15954:	tst	r3, #2
   15958:	bne	1598c <_obstack_newchunk@@Base+0xec>
   1595c:	ldr	r2, [r4, #24]
   15960:	add	r3, r7, #8
   15964:	add	r3, r3, r2
   15968:	bic	r3, r3, r2
   1596c:	ldr	r2, [r4, #8]
   15970:	cmp	r2, r3
   15974:	bne	1598c <_obstack_newchunk@@Base+0xec>
   15978:	ldr	r3, [r7, #4]
   1597c:	mov	r1, r7
   15980:	mov	r0, r4
   15984:	str	r3, [r8, #4]
   15988:	bl	157b0 <__assert_fail@plt+0x43e8>
   1598c:	ldrb	r3, [r4, #40]	; 0x28
   15990:	str	r5, [r4, #8]
   15994:	add	r5, r5, r6
   15998:	str	r5, [r4, #12]
   1599c:	bfc	r3, #1, #1
   159a0:	strb	r3, [r4, #40]	; 0x28
   159a4:	pop	{r4, r5, r6, r7, r8, pc}
   159a8:	andeq	r7, r2, r4, ror r1

000159ac <_obstack_allocated_p@@Base>:
   159ac:	ldr	r0, [r0, #4]
   159b0:	cmp	r0, #0
   159b4:	beq	159cc <_obstack_allocated_p@@Base+0x20>
   159b8:	cmp	r0, r1
   159bc:	bcs	159ac <_obstack_allocated_p@@Base>
   159c0:	ldr	r3, [r0]
   159c4:	cmp	r3, r1
   159c8:	bcc	159ac <_obstack_allocated_p@@Base>
   159cc:	adds	r0, r0, #0
   159d0:	movne	r0, #1
   159d4:	bx	lr

000159d8 <_obstack_free@@Base>:
   159d8:	push	{r4, r5, r6, lr}
   159dc:	mov	r5, r1
   159e0:	mov	r4, r0
   159e4:	ldr	r1, [r0, #4]
   159e8:	cmp	r1, #0
   159ec:	beq	15a34 <_obstack_free@@Base+0x5c>
   159f0:	cmp	r1, r5
   159f4:	bcs	15a14 <_obstack_free@@Base+0x3c>
   159f8:	ldr	r3, [r1]
   159fc:	cmp	r3, r5
   15a00:	bcc	15a14 <_obstack_free@@Base+0x3c>
   15a04:	stmib	r4, {r1, r5}
   15a08:	str	r5, [r4, #12]
   15a0c:	str	r3, [r4, #16]
   15a10:	pop	{r4, r5, r6, pc}
   15a14:	mov	r0, r4
   15a18:	ldr	r6, [r1, #4]
   15a1c:	bl	157b0 <__assert_fail@plt+0x43e8>
   15a20:	ldrb	r3, [r4, #40]	; 0x28
   15a24:	mov	r1, r6
   15a28:	orr	r3, r3, #2
   15a2c:	strb	r3, [r4, #40]	; 0x28
   15a30:	b	159e8 <_obstack_free@@Base+0x10>
   15a34:	cmp	r5, #0
   15a38:	popeq	{r4, r5, r6, pc}
   15a3c:	bl	113a4 <abort@plt>

00015a40 <_obstack_memory_used@@Base>:
   15a40:	ldr	r3, [r0, #4]
   15a44:	mov	r0, #0
   15a48:	cmp	r3, #0
   15a4c:	bxeq	lr
   15a50:	ldr	r2, [r3]
   15a54:	sub	r2, r2, r3
   15a58:	ldr	r3, [r3, #4]
   15a5c:	add	r0, r0, r2
   15a60:	b	15a48 <_obstack_memory_used@@Base+0x8>
   15a64:	umull	r2, r3, r1, r2
   15a68:	cmp	r3, #0
   15a6c:	bne	15a78 <_obstack_memory_used@@Base+0x38>
   15a70:	mov	r1, r2
   15a74:	b	155d4 <__assert_fail@plt+0x420c>
   15a78:	push	{r4, lr}
   15a7c:	bl	112b4 <__errno_location@plt>
   15a80:	mov	r3, #12
   15a84:	str	r3, [r0]
   15a88:	mov	r0, #0
   15a8c:	pop	{r4, pc}
   15a90:	push	{r4, r5, r6, lr}
   15a94:	mov	r5, r1
   15a98:	mov	r1, #0
   15a9c:	mov	r4, r2
   15aa0:	bl	11338 <setlocale@plt>
   15aa4:	subs	r6, r0, #0
   15aa8:	bne	15abc <_obstack_memory_used@@Base+0x7c>
   15aac:	cmp	r4, #0
   15ab0:	mov	r0, #22
   15ab4:	strbne	r6, [r5]
   15ab8:	pop	{r4, r5, r6, pc}
   15abc:	bl	11290 <strlen@plt>
   15ac0:	cmp	r4, r0
   15ac4:	bls	15ae0 <_obstack_memory_used@@Base+0xa0>
   15ac8:	add	r2, r0, #1
   15acc:	mov	r1, r6
   15ad0:	mov	r0, r5
   15ad4:	bl	11128 <memcpy@plt>
   15ad8:	mov	r0, #0
   15adc:	pop	{r4, r5, r6, pc}
   15ae0:	cmp	r4, #0
   15ae4:	beq	15b04 <_obstack_memory_used@@Base+0xc4>
   15ae8:	sub	r4, r4, #1
   15aec:	mov	r1, r6
   15af0:	mov	r2, r4
   15af4:	mov	r0, r5
   15af8:	bl	11128 <memcpy@plt>
   15afc:	mov	r3, #0
   15b00:	strb	r3, [r5, r4]
   15b04:	mov	r0, #34	; 0x22
   15b08:	pop	{r4, r5, r6, pc}
   15b0c:	mov	r1, #0
   15b10:	b	11338 <setlocale@plt>
   15b14:	eor	r1, r1, #-2147483648	; 0x80000000
   15b18:	b	15b20 <_obstack_memory_used@@Base+0xe0>
   15b1c:	eor	r3, r3, #-2147483648	; 0x80000000
   15b20:	push	{r4, r5, lr}
   15b24:	lsl	r4, r1, #1
   15b28:	lsl	r5, r3, #1
   15b2c:	teq	r4, r5
   15b30:	teqeq	r0, r2
   15b34:	orrsne	ip, r4, r0
   15b38:	orrsne	ip, r5, r2
   15b3c:	mvnsne	ip, r4, asr #21
   15b40:	mvnsne	ip, r5, asr #21
   15b44:	beq	15d30 <_obstack_memory_used@@Base+0x2f0>
   15b48:	lsr	r4, r4, #21
   15b4c:	rsbs	r5, r4, r5, lsr #21
   15b50:	rsblt	r5, r5, #0
   15b54:	ble	15b74 <_obstack_memory_used@@Base+0x134>
   15b58:	add	r4, r4, r5
   15b5c:	eor	r2, r0, r2
   15b60:	eor	r3, r1, r3
   15b64:	eor	r0, r2, r0
   15b68:	eor	r1, r3, r1
   15b6c:	eor	r2, r0, r2
   15b70:	eor	r3, r1, r3
   15b74:	cmp	r5, #54	; 0x36
   15b78:	pophi	{r4, r5, pc}
   15b7c:	tst	r1, #-2147483648	; 0x80000000
   15b80:	lsl	r1, r1, #12
   15b84:	mov	ip, #1048576	; 0x100000
   15b88:	orr	r1, ip, r1, lsr #12
   15b8c:	beq	15b98 <_obstack_memory_used@@Base+0x158>
   15b90:	rsbs	r0, r0, #0
   15b94:	rsc	r1, r1, #0
   15b98:	tst	r3, #-2147483648	; 0x80000000
   15b9c:	lsl	r3, r3, #12
   15ba0:	orr	r3, ip, r3, lsr #12
   15ba4:	beq	15bb0 <_obstack_memory_used@@Base+0x170>
   15ba8:	rsbs	r2, r2, #0
   15bac:	rsc	r3, r3, #0
   15bb0:	teq	r4, r5
   15bb4:	beq	15d18 <_obstack_memory_used@@Base+0x2d8>
   15bb8:	sub	r4, r4, #1
   15bbc:	rsbs	lr, r5, #32
   15bc0:	blt	15bdc <_obstack_memory_used@@Base+0x19c>
   15bc4:	lsl	ip, r2, lr
   15bc8:	adds	r0, r0, r2, lsr r5
   15bcc:	adc	r1, r1, #0
   15bd0:	adds	r0, r0, r3, lsl lr
   15bd4:	adcs	r1, r1, r3, asr r5
   15bd8:	b	15bf8 <_obstack_memory_used@@Base+0x1b8>
   15bdc:	sub	r5, r5, #32
   15be0:	add	lr, lr, #32
   15be4:	cmp	r2, #1
   15be8:	lsl	ip, r3, lr
   15bec:	orrcs	ip, ip, #2
   15bf0:	adds	r0, r0, r3, asr r5
   15bf4:	adcs	r1, r1, r3, asr #31
   15bf8:	and	r5, r1, #-2147483648	; 0x80000000
   15bfc:	bpl	15c0c <_obstack_memory_used@@Base+0x1cc>
   15c00:	rsbs	ip, ip, #0
   15c04:	rscs	r0, r0, #0
   15c08:	rsc	r1, r1, #0
   15c0c:	cmp	r1, #1048576	; 0x100000
   15c10:	bcc	15c50 <_obstack_memory_used@@Base+0x210>
   15c14:	cmp	r1, #2097152	; 0x200000
   15c18:	bcc	15c38 <_obstack_memory_used@@Base+0x1f8>
   15c1c:	lsrs	r1, r1, #1
   15c20:	rrxs	r0, r0
   15c24:	rrx	ip, ip
   15c28:	add	r4, r4, #1
   15c2c:	lsl	r2, r4, #21
   15c30:	cmn	r2, #4194304	; 0x400000
   15c34:	bcs	15d90 <_obstack_memory_used@@Base+0x350>
   15c38:	cmp	ip, #-2147483648	; 0x80000000
   15c3c:	lsrseq	ip, r0, #1
   15c40:	adcs	r0, r0, #0
   15c44:	adc	r1, r1, r4, lsl #20
   15c48:	orr	r1, r1, r5
   15c4c:	pop	{r4, r5, pc}
   15c50:	lsls	ip, ip, #1
   15c54:	adcs	r0, r0, r0
   15c58:	adc	r1, r1, r1
   15c5c:	tst	r1, #1048576	; 0x100000
   15c60:	sub	r4, r4, #1
   15c64:	bne	15c38 <_obstack_memory_used@@Base+0x1f8>
   15c68:	teq	r1, #0
   15c6c:	moveq	r1, r0
   15c70:	moveq	r0, #0
   15c74:	clz	r3, r1
   15c78:	addeq	r3, r3, #32
   15c7c:	sub	r3, r3, #11
   15c80:	subs	r2, r3, #32
   15c84:	bge	15ca8 <_obstack_memory_used@@Base+0x268>
   15c88:	adds	r2, r2, #12
   15c8c:	ble	15ca4 <_obstack_memory_used@@Base+0x264>
   15c90:	add	ip, r2, #20
   15c94:	rsb	r2, r2, #12
   15c98:	lsl	r0, r1, ip
   15c9c:	lsr	r1, r1, r2
   15ca0:	b	15cb8 <_obstack_memory_used@@Base+0x278>
   15ca4:	add	r2, r2, #20
   15ca8:	rsble	ip, r2, #32
   15cac:	lsl	r1, r1, r2
   15cb0:	orrle	r1, r1, r0, lsr ip
   15cb4:	lslle	r0, r0, r2
   15cb8:	subs	r4, r4, r3
   15cbc:	addge	r1, r1, r4, lsl #20
   15cc0:	orrge	r1, r1, r5
   15cc4:	popge	{r4, r5, pc}
   15cc8:	mvn	r4, r4
   15ccc:	subs	r4, r4, #31
   15cd0:	bge	15d0c <_obstack_memory_used@@Base+0x2cc>
   15cd4:	adds	r4, r4, #12
   15cd8:	bgt	15cf4 <_obstack_memory_used@@Base+0x2b4>
   15cdc:	add	r4, r4, #20
   15ce0:	rsb	r2, r4, #32
   15ce4:	lsr	r0, r0, r4
   15ce8:	orr	r0, r0, r1, lsl r2
   15cec:	orr	r1, r5, r1, lsr r4
   15cf0:	pop	{r4, r5, pc}
   15cf4:	rsb	r4, r4, #12
   15cf8:	rsb	r2, r4, #32
   15cfc:	lsr	r0, r0, r2
   15d00:	orr	r0, r0, r1, lsl r4
   15d04:	mov	r1, r5
   15d08:	pop	{r4, r5, pc}
   15d0c:	lsr	r0, r1, r4
   15d10:	mov	r1, r5
   15d14:	pop	{r4, r5, pc}
   15d18:	teq	r4, #0
   15d1c:	eor	r3, r3, #1048576	; 0x100000
   15d20:	eoreq	r1, r1, #1048576	; 0x100000
   15d24:	addeq	r4, r4, #1
   15d28:	subne	r5, r5, #1
   15d2c:	b	15bb8 <_obstack_memory_used@@Base+0x178>
   15d30:	mvns	ip, r4, asr #21
   15d34:	mvnsne	ip, r5, asr #21
   15d38:	beq	15da0 <_obstack_memory_used@@Base+0x360>
   15d3c:	teq	r4, r5
   15d40:	teqeq	r0, r2
   15d44:	beq	15d58 <_obstack_memory_used@@Base+0x318>
   15d48:	orrs	ip, r4, r0
   15d4c:	moveq	r1, r3
   15d50:	moveq	r0, r2
   15d54:	pop	{r4, r5, pc}
   15d58:	teq	r1, r3
   15d5c:	movne	r1, #0
   15d60:	movne	r0, #0
   15d64:	popne	{r4, r5, pc}
   15d68:	lsrs	ip, r4, #21
   15d6c:	bne	15d80 <_obstack_memory_used@@Base+0x340>
   15d70:	lsls	r0, r0, #1
   15d74:	adcs	r1, r1, r1
   15d78:	orrcs	r1, r1, #-2147483648	; 0x80000000
   15d7c:	pop	{r4, r5, pc}
   15d80:	adds	r4, r4, #4194304	; 0x400000
   15d84:	addcc	r1, r1, #1048576	; 0x100000
   15d88:	popcc	{r4, r5, pc}
   15d8c:	and	r5, r1, #-2147483648	; 0x80000000
   15d90:	orr	r1, r5, #2130706432	; 0x7f000000
   15d94:	orr	r1, r1, #15728640	; 0xf00000
   15d98:	mov	r0, #0
   15d9c:	pop	{r4, r5, pc}
   15da0:	mvns	ip, r4, asr #21
   15da4:	movne	r1, r3
   15da8:	movne	r0, r2
   15dac:	mvnseq	ip, r5, asr #21
   15db0:	movne	r3, r1
   15db4:	movne	r2, r0
   15db8:	orrs	r4, r0, r1, lsl #12
   15dbc:	orrseq	r5, r2, r3, lsl #12
   15dc0:	teqeq	r1, r3
   15dc4:	orrne	r1, r1, #524288	; 0x80000
   15dc8:	pop	{r4, r5, pc}
   15dcc:	teq	r0, #0
   15dd0:	moveq	r1, #0
   15dd4:	bxeq	lr
   15dd8:	push	{r4, r5, lr}
   15ddc:	mov	r4, #1024	; 0x400
   15de0:	add	r4, r4, #50	; 0x32
   15de4:	mov	r5, #0
   15de8:	mov	r1, #0
   15dec:	b	15c68 <_obstack_memory_used@@Base+0x228>
   15df0:	teq	r0, #0
   15df4:	moveq	r1, #0
   15df8:	bxeq	lr
   15dfc:	push	{r4, r5, lr}
   15e00:	mov	r4, #1024	; 0x400
   15e04:	add	r4, r4, #50	; 0x32
   15e08:	ands	r5, r0, #-2147483648	; 0x80000000
   15e0c:	rsbmi	r0, r0, #0
   15e10:	mov	r1, #0
   15e14:	b	15c68 <_obstack_memory_used@@Base+0x228>
   15e18:	lsls	r2, r0, #1
   15e1c:	asr	r1, r2, #3
   15e20:	rrx	r1, r1
   15e24:	lsl	r0, r2, #28
   15e28:	andsne	r3, r2, #-16777216	; 0xff000000
   15e2c:	teqne	r3, #-16777216	; 0xff000000
   15e30:	eorne	r1, r1, #939524096	; 0x38000000
   15e34:	bxne	lr
   15e38:	bics	r2, r2, #-16777216	; 0xff000000
   15e3c:	bxeq	lr
   15e40:	teq	r3, #-16777216	; 0xff000000
   15e44:	orreq	r1, r1, #524288	; 0x80000
   15e48:	bxeq	lr
   15e4c:	push	{r4, r5, lr}
   15e50:	mov	r4, #896	; 0x380
   15e54:	and	r5, r1, #-2147483648	; 0x80000000
   15e58:	bic	r1, r1, #-2147483648	; 0x80000000
   15e5c:	b	15c68 <_obstack_memory_used@@Base+0x228>
   15e60:	orrs	r2, r0, r1
   15e64:	bxeq	lr
   15e68:	push	{r4, r5, lr}
   15e6c:	mov	r5, #0
   15e70:	b	15e90 <_obstack_memory_used@@Base+0x450>
   15e74:	orrs	r2, r0, r1
   15e78:	bxeq	lr
   15e7c:	push	{r4, r5, lr}
   15e80:	ands	r5, r1, #-2147483648	; 0x80000000
   15e84:	bpl	15e90 <_obstack_memory_used@@Base+0x450>
   15e88:	rsbs	r0, r0, #0
   15e8c:	rsc	r1, r1, #0
   15e90:	mov	r4, #1024	; 0x400
   15e94:	add	r4, r4, #50	; 0x32
   15e98:	lsrs	ip, r1, #22
   15e9c:	beq	15c0c <_obstack_memory_used@@Base+0x1cc>
   15ea0:	mov	r2, #3
   15ea4:	lsrs	ip, ip, #3
   15ea8:	addne	r2, r2, #3
   15eac:	lsrs	ip, ip, #3
   15eb0:	addne	r2, r2, #3
   15eb4:	add	r2, r2, ip, lsr #3
   15eb8:	rsb	r3, r2, #32
   15ebc:	lsl	ip, r0, r3
   15ec0:	lsr	r0, r0, r2
   15ec4:	orr	r0, r0, r1, lsl r3
   15ec8:	lsr	r1, r1, r2
   15ecc:	add	r4, r4, r2
   15ed0:	b	15c0c <_obstack_memory_used@@Base+0x1cc>
   15ed4:	cmp	r3, #0
   15ed8:	cmpeq	r2, #0
   15edc:	bne	15ef4 <_obstack_memory_used@@Base+0x4b4>
   15ee0:	cmp	r1, #0
   15ee4:	cmpeq	r0, #0
   15ee8:	mvnne	r1, #0
   15eec:	mvnne	r0, #0
   15ef0:	b	15f10 <_obstack_memory_used@@Base+0x4d0>
   15ef4:	sub	sp, sp, #8
   15ef8:	push	{sp, lr}
   15efc:	bl	15f20 <_obstack_memory_used@@Base+0x4e0>
   15f00:	ldr	lr, [sp, #4]
   15f04:	add	sp, sp, #8
   15f08:	pop	{r2, r3}
   15f0c:	bx	lr
   15f10:	push	{r1, lr}
   15f14:	mov	r0, #8
   15f18:	bl	110b0 <raise@plt>
   15f1c:	pop	{r1, pc}
   15f20:	cmp	r1, r3
   15f24:	cmpeq	r0, r2
   15f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f2c:	mov	r4, r0
   15f30:	movcc	r0, #0
   15f34:	mov	r5, r1
   15f38:	ldr	lr, [sp, #36]	; 0x24
   15f3c:	movcc	r1, r0
   15f40:	bcc	1603c <_obstack_memory_used@@Base+0x5fc>
   15f44:	cmp	r3, #0
   15f48:	clzeq	ip, r2
   15f4c:	clzne	ip, r3
   15f50:	addeq	ip, ip, #32
   15f54:	cmp	r5, #0
   15f58:	clzeq	r1, r4
   15f5c:	addeq	r1, r1, #32
   15f60:	clzne	r1, r5
   15f64:	sub	ip, ip, r1
   15f68:	sub	sl, ip, #32
   15f6c:	lsl	r9, r3, ip
   15f70:	rsb	fp, ip, #32
   15f74:	orr	r9, r9, r2, lsl sl
   15f78:	orr	r9, r9, r2, lsr fp
   15f7c:	lsl	r8, r2, ip
   15f80:	cmp	r5, r9
   15f84:	cmpeq	r4, r8
   15f88:	movcc	r0, #0
   15f8c:	movcc	r1, r0
   15f90:	bcc	15fac <_obstack_memory_used@@Base+0x56c>
   15f94:	mov	r0, #1
   15f98:	subs	r4, r4, r8
   15f9c:	lsl	r1, r0, sl
   15fa0:	orr	r1, r1, r0, lsr fp
   15fa4:	lsl	r0, r0, ip
   15fa8:	sbc	r5, r5, r9
   15fac:	cmp	ip, #0
   15fb0:	beq	1603c <_obstack_memory_used@@Base+0x5fc>
   15fb4:	lsr	r6, r8, #1
   15fb8:	orr	r6, r6, r9, lsl #31
   15fbc:	lsr	r7, r9, #1
   15fc0:	mov	r2, ip
   15fc4:	b	15fe8 <_obstack_memory_used@@Base+0x5a8>
   15fc8:	subs	r3, r4, r6
   15fcc:	sbc	r8, r5, r7
   15fd0:	adds	r3, r3, r3
   15fd4:	adc	r8, r8, r8
   15fd8:	adds	r4, r3, #1
   15fdc:	adc	r5, r8, #0
   15fe0:	subs	r2, r2, #1
   15fe4:	beq	16004 <_obstack_memory_used@@Base+0x5c4>
   15fe8:	cmp	r5, r7
   15fec:	cmpeq	r4, r6
   15ff0:	bcs	15fc8 <_obstack_memory_used@@Base+0x588>
   15ff4:	adds	r4, r4, r4
   15ff8:	adc	r5, r5, r5
   15ffc:	subs	r2, r2, #1
   16000:	bne	15fe8 <_obstack_memory_used@@Base+0x5a8>
   16004:	lsr	r3, r4, ip
   16008:	orr	r3, r3, r5, lsl fp
   1600c:	lsr	r2, r5, ip
   16010:	orr	r3, r3, r5, lsr sl
   16014:	adds	r0, r0, r4
   16018:	mov	r4, r3
   1601c:	lsl	r3, r2, ip
   16020:	orr	r3, r3, r4, lsl sl
   16024:	lsl	ip, r4, ip
   16028:	orr	r3, r3, r4, lsr fp
   1602c:	adc	r1, r1, r5
   16030:	subs	r0, r0, ip
   16034:	mov	r5, r2
   16038:	sbc	r1, r1, r3
   1603c:	cmp	lr, #0
   16040:	strdne	r4, [lr]
   16044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16048:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1604c:	mov	r7, r0
   16050:	ldr	r6, [pc, #72]	; 160a0 <_obstack_memory_used@@Base+0x660>
   16054:	ldr	r5, [pc, #72]	; 160a4 <_obstack_memory_used@@Base+0x664>
   16058:	add	r6, pc, r6
   1605c:	add	r5, pc, r5
   16060:	sub	r6, r6, r5
   16064:	mov	r8, r1
   16068:	mov	r9, r2
   1606c:	bl	11078 <calloc@plt-0x20>
   16070:	asrs	r6, r6, #2
   16074:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16078:	mov	r4, #0
   1607c:	add	r4, r4, #1
   16080:	ldr	r3, [r5], #4
   16084:	mov	r2, r9
   16088:	mov	r1, r8
   1608c:	mov	r0, r7
   16090:	blx	r3
   16094:	cmp	r6, r4
   16098:	bne	1607c <_obstack_memory_used@@Base+0x63c>
   1609c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160a0:			; <UNDEFINED> instruction: 0x00010eb4
   160a4:	andeq	r0, r1, ip, lsr #29
   160a8:	bx	lr
   160ac:	ldr	r3, [pc, #12]	; 160c0 <_obstack_memory_used@@Base+0x680>
   160b0:	mov	r1, #0
   160b4:	add	r3, pc, r3
   160b8:	ldr	r2, [r3]
   160bc:	b	112c0 <__cxa_atexit@plt>
   160c0:	andeq	r1, r1, ip, rrx
   160c4:	mov	r2, r1
   160c8:	mov	r1, r0
   160cc:	mov	r0, #3
   160d0:	b	11380 <__xstat64@plt>
   160d4:	mov	r2, r1
   160d8:	mov	r1, r0
   160dc:	mov	r0, #3
   160e0:	b	111ac <__fxstat64@plt>

Disassembly of section .fini:

000160e4 <.fini>:
   160e4:	push	{r3, lr}
   160e8:	pop	{r3, pc}
