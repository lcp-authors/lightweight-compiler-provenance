
../repos/inetutils/ping/ping:     file format elf32-littlearm


Disassembly of section .init:

000110e0 <.init>:
   110e0:	push	{r3, lr}
   110e4:	bl	11754 <__assert_fail@plt+0x2e8>
   110e8:	pop	{r3, pc}

Disassembly of section .plt:

000110ec <calloc@plt-0x14>:
   110ec:	push	{lr}		; (str lr, [sp, #-4]!)
   110f0:	ldr	lr, [pc, #4]	; 110fc <calloc@plt-0x4>
   110f4:	add	lr, pc, lr
   110f8:	ldr	pc, [lr, #8]!
   110fc:	andeq	fp, r1, r4, lsl #30

00011100 <calloc@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #3844]!	; 0xf04

0001110c <fputs_unlocked@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #3836]!	; 0xefc

00011118 <raise@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #3828]!	; 0xef4

00011124 <strcmp@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #3820]!	; 0xeec

00011130 <strtol@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #3812]!	; 0xee4

0001113c <setsockopt@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #3804]!	; 0xedc

00011148 <printf@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #110592	; 0x1b000
   11150:	ldr	pc, [ip, #3796]!	; 0xed4

00011154 <getprotobyname@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #110592	; 0x1b000
   1115c:	ldr	pc, [ip, #3788]!	; 0xecc

00011160 <fflush@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #110592	; 0x1b000
   11168:	ldr	pc, [ip, #3780]!	; 0xec4

0001116c <getuid@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #110592	; 0x1b000
   11174:	ldr	pc, [ip, #3772]!	; 0xebc

00011178 <memmove@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #110592	; 0x1b000
   11180:	ldr	pc, [ip, #3764]!	; 0xeb4

00011184 <strchrnul@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #110592	; 0x1b000
   1118c:	ldr	pc, [ip, #3756]!	; 0xeac

00011190 <free@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #110592	; 0x1b000
   11198:	ldr	pc, [ip, #3748]!	; 0xea4

0001119c <gai_strerror@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111a8 <strndup@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3732]!	; 0xe94

000111b4 <memcpy@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c0 <signal@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3716]!	; 0xe84

000111cc <fwrite_unlocked@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111d8 <memcmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3700]!	; 0xe74

000111e4 <inet_ntoa@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f0 <select@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3684]!	; 0xe64

000111fc <sleep@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3676]!	; 0xe5c

00011208 <gethostbyaddr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3668]!	; 0xe54

00011214 <recvfrom@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011220 <strdup@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3652]!	; 0xe44

0001122c <realloc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3644]!	; 0xe3c

00011238 <strcasecmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3636]!	; 0xe34

00011244 <funlockfile@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011250 <fwrite@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3620]!	; 0xe24

0001125c <gettimeofday@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3612]!	; 0xe1c

00011268 <error@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3604]!	; 0xe14

00011274 <getenv@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011280 <puts@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3588]!	; 0xe04

0001128c <malloc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3580]!	; 0xdfc

00011298 <__libc_start_main@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112a4 <strerror@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3564]!	; 0xdec

000112b0 <__ctype_tolower_loc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3556]!	; 0xde4

000112bc <__gmon_start__@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3548]!	; 0xddc

000112c8 <mempcpy@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112d4 <__ctype_b_loc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e0 <getpid@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112ec <exit@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112f8 <strtoul@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3508]!	; 0xdb4

00011304 <strlen@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3500]!	; 0xdac

00011310 <strchr@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3492]!	; 0xda4

0001131c <fprintf@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3484]!	; 0xd9c

00011328 <__errno_location@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3476]!	; 0xd94

00011334 <snprintf@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011340 <strerror_r@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3460]!	; 0xd84

0001134c <setvbuf@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3452]!	; 0xd7c

00011358 <memset@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3444]!	; 0xd74

00011364 <putchar@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011370 <strtod@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3428]!	; 0xd64

0001137c <memchr@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3420]!	; 0xd5c

00011388 <sendto@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3412]!	; 0xd54

00011394 <__overflow@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a0 <setlocale@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3396]!	; 0xd44

000113ac <getnameinfo@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113b8 <strrchr@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3380]!	; 0xd34

000113c4 <vfprintf@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d0 <fputc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3364]!	; 0xd24

000113dc <setuid@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113e8 <sscanf@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3348]!	; 0xd14

000113f4 <putc@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3340]!	; 0xd0c

00011400 <flockfile@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3332]!	; 0xd04

0001140c <vsnprintf@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3324]!	; 0xcfc

00011418 <qsort@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3316]!	; 0xcf4

00011424 <freeaddrinfo@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3308]!	; 0xcec

00011430 <getaddrinfo@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3300]!	; 0xce4

0001143c <socket@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3292]!	; 0xcdc

00011448 <strncmp@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3284]!	; 0xcd4

00011454 <abort@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3276]!	; 0xccc

00011460 <close@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3268]!	; 0xcc4

0001146c <__assert_fail@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3260]!	; 0xcbc

Disassembly of section .text:

00011478 <argp_failure@@Base-0x4c30>:
   11478:	push	{r4, r5, r6, r7, r8, lr}
   1147c:	sub	sp, sp, #16
   11480:	mov	r5, r0
   11484:	mov	r6, #1
   11488:	ldr	r0, [r1]
   1148c:	mov	r4, r1
   11490:	str	r6, [sp, #12]
   11494:	bl	18b44 <argp_parse@@Base+0xfa0>
   11498:	ldr	r1, [pc, #556]	; 116cc <__assert_fail@plt+0x260>
   1149c:	mov	r0, #6
   114a0:	bl	113a0 <setlocale@plt>
   114a4:	bl	1116c <getuid@plt>
   114a8:	ldr	r2, [pc, #544]	; 116d0 <__assert_fail@plt+0x264>
   114ac:	ldr	r1, [pc, #544]	; 116d4 <__assert_fail@plt+0x268>
   114b0:	ldr	r8, [pc, #544]	; 116d8 <__assert_fail@plt+0x26c>
   114b4:	cmp	r0, #0
   114b8:	ldr	r0, [pc, #540]	; 116dc <__assert_fail@plt+0x270>
   114bc:	ldreq	r3, [pc, #540]	; 116e0 <__assert_fail@plt+0x274>
   114c0:	strbeq	r6, [r3, #4]
   114c4:	ldr	r3, [pc, #536]	; 116e4 <__assert_fail@plt+0x278>
   114c8:	str	r2, [r3]
   114cc:	bl	18968 <argp_parse@@Base+0xdc4>
   114d0:	mov	r3, #0
   114d4:	add	r2, sp, #8
   114d8:	mov	r1, r5
   114dc:	stm	sp, {r2, r3}
   114e0:	ldr	r0, [pc, #512]	; 116e8 <__assert_fail@plt+0x27c>
   114e4:	mov	r2, r4
   114e8:	bl	17ba4 <argp_parse@@Base>
   114ec:	bl	112e0 <getpid@plt>
   114f0:	mov	r1, r0
   114f4:	mov	r0, #8
   114f8:	bl	13a98 <__assert_fail@plt+0x262c>
   114fc:	cmp	r0, #0
   11500:	str	r0, [r8]
   11504:	beq	116c4 <__assert_fail@plt+0x258>
   11508:	add	r2, sp, #12
   1150c:	mov	r3, #4
   11510:	mov	r1, #6
   11514:	bl	126d0 <__assert_fail@plt+0x1264>
   11518:	bl	1116c <getuid@plt>
   1151c:	bl	113dc <setuid@plt>
   11520:	cmp	r0, #0
   11524:	bne	1167c <__assert_fail@plt+0x210>
   11528:	ldr	r2, [pc, #444]	; 116ec <__assert_fail@plt+0x280>
   1152c:	ldr	r7, [pc, #428]	; 116e0 <__assert_fail@plt+0x274>
   11530:	mov	r3, #0
   11534:	ldr	r0, [r2]
   11538:	mov	r1, r3
   1153c:	mov	r2, #1
   11540:	bl	1134c <setvbuf@plt>
   11544:	ldr	r6, [sp, #8]
   11548:	ldr	r1, [r7, #8]
   1154c:	sub	r5, r5, r6
   11550:	cmp	r1, #0
   11554:	add	r6, r4, r6, lsl #2
   11558:	bne	11670 <__assert_fail@plt+0x204>
   1155c:	ldr	r3, [pc, #396]	; 116f0 <__assert_fail@plt+0x284>
   11560:	ldr	r1, [r3]
   11564:	cmp	r1, #0
   11568:	bne	1165c <__assert_fail@plt+0x1f0>
   1156c:	ldr	r3, [pc, #384]	; 116f4 <__assert_fail@plt+0x288>
   11570:	ldr	r3, [r3]
   11574:	tst	r3, #2
   11578:	bne	11648 <__assert_fail@plt+0x1dc>
   1157c:	ldr	r3, [r7, #12]
   11580:	cmp	r3, #0
   11584:	ble	115b0 <__assert_fail@plt+0x144>
   11588:	ldr	r2, [r8]
   1158c:	mov	r3, #4
   11590:	str	r3, [sp]
   11594:	mov	r1, #0
   11598:	ldr	r0, [r2]
   1159c:	ldr	r3, [pc, #340]	; 116f8 <__assert_fail@plt+0x28c>
   115a0:	mov	r2, #2
   115a4:	bl	1113c <setsockopt@plt>
   115a8:	cmp	r0, #0
   115ac:	blt	116ac <__assert_fail@plt+0x240>
   115b0:	ldr	r7, [pc, #324]	; 116fc <__assert_fail@plt+0x290>
   115b4:	ldr	r3, [r7, #40]	; 0x28
   115b8:	cmp	r3, #0
   115bc:	blt	115e8 <__assert_fail@plt+0x17c>
   115c0:	ldr	r2, [r8]
   115c4:	mov	r3, #4
   115c8:	str	r3, [sp]
   115cc:	mov	r1, #0
   115d0:	ldr	r0, [r2]
   115d4:	add	r3, r7, #40	; 0x28
   115d8:	mov	r2, #1
   115dc:	bl	1113c <setsockopt@plt>
   115e0:	cmp	r0, #0
   115e4:	blt	11694 <__assert_fail@plt+0x228>
   115e8:	ldr	r3, [pc, #272]	; 11700 <__assert_fail@plt+0x294>
   115ec:	ldr	r1, [r7, #44]	; 0x2c
   115f0:	ldr	r0, [r3]
   115f4:	bl	123a4 <__assert_fail@plt+0xf38>
   115f8:	cmp	r5, #0
   115fc:	beq	11628 <__assert_fail@plt+0x1bc>
   11600:	mov	r4, r5
   11604:	mov	r5, #0
   11608:	ldr	r3, [r7, #48]	; 0x30
   1160c:	ldr	r0, [r6], #4
   11610:	blx	r3
   11614:	orr	r5, r5, r0
   11618:	ldr	r0, [r8]
   1161c:	bl	13c20 <__assert_fail@plt+0x27b4>
   11620:	subs	r4, r4, #1
   11624:	bne	11608 <__assert_fail@plt+0x19c>
   11628:	ldr	r0, [r8]
   1162c:	bl	18a3c <argp_parse@@Base+0xe98>
   11630:	ldr	r3, [pc, #204]	; 11704 <__assert_fail@plt+0x298>
   11634:	ldr	r0, [r3]
   11638:	bl	18a3c <argp_parse@@Base+0xe98>
   1163c:	mov	r0, r5
   11640:	add	sp, sp, #16
   11644:	pop	{r4, r5, r6, r7, r8, pc}
   11648:	ldr	r3, [pc, #184]	; 11708 <__assert_fail@plt+0x29c>
   1164c:	ldr	r0, [r8]
   11650:	ldr	r1, [r3]
   11654:	bl	12700 <__assert_fail@plt+0x1294>
   11658:	b	1157c <__assert_fail@plt+0x110>
   1165c:	add	r2, sp, #12
   11660:	mov	r3, #4
   11664:	ldr	r0, [r8]
   11668:	bl	126d0 <__assert_fail@plt+0x1264>
   1166c:	b	1156c <__assert_fail@plt+0x100>
   11670:	ldr	r0, [r8]
   11674:	bl	126c8 <__assert_fail@plt+0x125c>
   11678:	b	1155c <__assert_fail@plt+0xf0>
   1167c:	bl	11328 <__errno_location@plt>
   11680:	ldr	r2, [pc, #132]	; 1170c <__assert_fail@plt+0x2a0>
   11684:	ldr	r1, [r0]
   11688:	mov	r0, #1
   1168c:	bl	11268 <error@plt>
   11690:	b	11528 <__assert_fail@plt+0xbc>
   11694:	bl	11328 <__errno_location@plt>
   11698:	ldr	r2, [pc, #112]	; 11710 <__assert_fail@plt+0x2a4>
   1169c:	ldr	r1, [r0]
   116a0:	mov	r0, #0
   116a4:	bl	11268 <error@plt>
   116a8:	b	115e8 <__assert_fail@plt+0x17c>
   116ac:	bl	11328 <__errno_location@plt>
   116b0:	ldr	r2, [pc, #92]	; 11714 <__assert_fail@plt+0x2a8>
   116b4:	ldr	r1, [r0]
   116b8:	mov	r0, #0
   116bc:	bl	11268 <error@plt>
   116c0:	b	115b0 <__assert_fail@plt+0x144>
   116c4:	mov	r0, #1
   116c8:	bl	112ec <exit@plt>
   116cc:	andeq	ip, r1, r0, ror #17
   116d0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   116d4:	andeq	sp, r2, r4, asr #2
   116d8:	ldrdeq	sp, [r2], -r0
   116dc:	andeq	sl, r1, ip, lsr #31
   116e0:	andeq	sp, r2, r4, lsr r6
   116e4:	ldrdeq	sp, [r2], -ip
   116e8:	andeq	sp, r2, ip, asr #2
   116ec:	andeq	sp, r2, ip, lsr #12
   116f0:	andeq	sp, r2, ip, asr #13
   116f4:	andeq	sp, r2, r8, asr #13
   116f8:	andeq	sp, r2, r0, asr #12
   116fc:	andeq	sp, r2, r0, asr #2
   11700:	andeq	sp, r2, r0, asr #13
   11704:	andeq	sp, r2, r4, asr #13
   11708:	ldrdeq	sp, [r2], -r8
   1170c:			; <UNDEFINED> instruction: 0x0001afb4
   11710:	ldrdeq	sl, [r1], -r0
   11714:			; <UNDEFINED> instruction: 0x0001afbc
   11718:	mov	fp, #0
   1171c:	mov	lr, #0
   11720:	pop	{r1}		; (ldr r1, [sp], #4)
   11724:	mov	r2, sp
   11728:	push	{r2}		; (str r2, [sp, #-4]!)
   1172c:	push	{r0}		; (str r0, [sp, #-4]!)
   11730:	ldr	ip, [pc, #16]	; 11748 <__assert_fail@plt+0x2dc>
   11734:	push	{ip}		; (str ip, [sp, #-4]!)
   11738:	ldr	r0, [pc, #12]	; 1174c <__assert_fail@plt+0x2e0>
   1173c:	ldr	r3, [pc, #12]	; 11750 <__assert_fail@plt+0x2e4>
   11740:	bl	11298 <__libc_start_main@plt>
   11744:	bl	11454 <abort@plt>
   11748:	strdeq	sl, [r1], -r4
   1174c:	andeq	r1, r1, r8, ror r4
   11750:	muleq	r1, r4, lr
   11754:	ldr	r3, [pc, #20]	; 11770 <__assert_fail@plt+0x304>
   11758:	ldr	r2, [pc, #20]	; 11774 <__assert_fail@plt+0x308>
   1175c:	add	r3, pc, r3
   11760:	ldr	r2, [r3, r2]
   11764:	cmp	r2, #0
   11768:	bxeq	lr
   1176c:	b	112bc <__gmon_start__@plt>
   11770:	muleq	r1, ip, r8
   11774:	andeq	r0, r0, r4, lsr r1
   11778:	ldr	r3, [pc, #28]	; 1179c <__assert_fail@plt+0x330>
   1177c:	ldr	r0, [pc, #28]	; 117a0 <__assert_fail@plt+0x334>
   11780:	sub	r3, r3, r0
   11784:	cmp	r3, #6
   11788:	bxls	lr
   1178c:	ldr	r3, [pc, #16]	; 117a4 <__assert_fail@plt+0x338>
   11790:	cmp	r3, #0
   11794:	bxeq	lr
   11798:	bx	r3
   1179c:	andeq	sp, r2, r3, lsr #12
   117a0:	andeq	sp, r2, r0, lsr #12
   117a4:	andeq	r0, r0, r0
   117a8:	ldr	r1, [pc, #36]	; 117d4 <__assert_fail@plt+0x368>
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0x36c>
   117b0:	sub	r1, r1, r0
   117b4:	asr	r1, r1, #2
   117b8:	add	r1, r1, r1, lsr #31
   117bc:	asrs	r1, r1, #1
   117c0:	bxeq	lr
   117c4:	ldr	r3, [pc, #16]	; 117dc <__assert_fail@plt+0x370>
   117c8:	cmp	r3, #0
   117cc:	bxeq	lr
   117d0:	bx	r3
   117d4:	andeq	sp, r2, r0, lsr #12
   117d8:	andeq	sp, r2, r0, lsr #12
   117dc:	andeq	r0, r0, r0
   117e0:	push	{r4, lr}
   117e4:	ldr	r4, [pc, #24]	; 11804 <__assert_fail@plt+0x398>
   117e8:	ldrb	r3, [r4]
   117ec:	cmp	r3, #0
   117f0:	popne	{r4, pc}
   117f4:	bl	11778 <__assert_fail@plt+0x30c>
   117f8:	mov	r3, #1
   117fc:	strb	r3, [r4]
   11800:	pop	{r4, pc}
   11804:	andeq	sp, r2, r0, lsr r6
   11808:	ldr	r0, [pc, #40]	; 11838 <__assert_fail@plt+0x3cc>
   1180c:	ldr	r3, [r0]
   11810:	cmp	r3, #0
   11814:	bne	1181c <__assert_fail@plt+0x3b0>
   11818:	b	117a8 <__assert_fail@plt+0x33c>
   1181c:	ldr	r3, [pc, #24]	; 1183c <__assert_fail@plt+0x3d0>
   11820:	cmp	r3, #0
   11824:	beq	11818 <__assert_fail@plt+0x3ac>
   11828:	push	{r4, lr}
   1182c:	blx	r3
   11830:	pop	{r4, lr}
   11834:	b	117a8 <__assert_fail@plt+0x33c>
   11838:	andeq	ip, r2, r4, lsl pc
   1183c:	andeq	r0, r0, r0
   11840:	ldr	r3, [pc, #8]	; 11850 <__assert_fail@plt+0x3e4>
   11844:	mov	r2, #1
   11848:	str	r2, [r3]
   1184c:	bx	lr
   11850:	andeq	sp, r2, r4, lsr r6
   11854:	push	{r4, r5, lr}
   11858:	mov	r4, r0
   1185c:	ldr	r5, [pc, #164]	; 11908 <__assert_fail@plt+0x49c>
   11860:	sub	sp, sp, #20
   11864:	ldr	r3, [r5]
   11868:	cmp	r3, #7
   1186c:	movls	r2, #0
   11870:	bhi	118bc <__assert_fail@plt+0x450>
   11874:	ldr	r3, [pc, #144]	; 1190c <__assert_fail@plt+0x4a0>
   11878:	ldr	r1, [r3]
   1187c:	cmp	r1, #0
   11880:	beq	118a0 <__assert_fail@plt+0x434>
   11884:	ldr	r3, [r5]
   11888:	mov	r0, #0
   1188c:	cmp	r2, r3
   11890:	str	r0, [sp]
   11894:	subcc	r3, r3, r2
   11898:	mov	r0, r4
   1189c:	bl	12668 <__assert_fail@plt+0x11fc>
   118a0:	mov	r0, r4
   118a4:	bl	13c3c <__assert_fail@plt+0x27d0>
   118a8:	subs	r4, r0, #0
   118ac:	blt	118e8 <__assert_fail@plt+0x47c>
   118b0:	mov	r0, r4
   118b4:	add	sp, sp, #20
   118b8:	pop	{r4, r5, pc}
   118bc:	mov	r1, #0
   118c0:	add	r0, sp, #8
   118c4:	bl	1125c <gettimeofday@plt>
   118c8:	mov	r2, #0
   118cc:	str	r2, [sp]
   118d0:	add	r1, sp, #8
   118d4:	mov	r3, #8
   118d8:	mov	r0, r4
   118dc:	bl	12668 <__assert_fail@plt+0x11fc>
   118e0:	mov	r2, #8
   118e4:	b	11874 <__assert_fail@plt+0x408>
   118e8:	bl	11328 <__errno_location@plt>
   118ec:	ldr	r2, [pc, #28]	; 11910 <__assert_fail@plt+0x4a4>
   118f0:	ldr	r1, [r0]
   118f4:	mov	r0, #1
   118f8:	bl	11268 <error@plt>
   118fc:	mov	r0, r4
   11900:	add	sp, sp, #20
   11904:	pop	{r4, r5, pc}
   11908:	andeq	sp, r2, r0, asr #2
   1190c:	andeq	sp, r2, r4, asr #13
   11910:	andeq	sl, r1, r4, lsl #31
   11914:	push	{r4, lr}
   11918:	mov	r4, r0
   1191c:	ldr	r1, [pc, #120]	; 1199c <__assert_fail@plt+0x530>
   11920:	bl	11238 <strcasecmp@plt>
   11924:	cmp	r0, #0
   11928:	beq	11978 <__assert_fail@plt+0x50c>
   1192c:	ldr	r1, [pc, #108]	; 119a0 <__assert_fail@plt+0x534>
   11930:	mov	r0, r4
   11934:	bl	11238 <strcasecmp@plt>
   11938:	cmp	r0, #0
   1193c:	beq	11970 <__assert_fail@plt+0x504>
   11940:	ldr	r1, [pc, #92]	; 119a4 <__assert_fail@plt+0x538>
   11944:	mov	r0, r4
   11948:	bl	11238 <strcasecmp@plt>
   1194c:	cmp	r0, #0
   11950:	beq	11968 <__assert_fail@plt+0x4fc>
   11954:	ldr	r1, [pc, #76]	; 119a8 <__assert_fail@plt+0x53c>
   11958:	mov	r0, r4
   1195c:	bl	11238 <strcasecmp@plt>
   11960:	cmp	r0, #0
   11964:	bne	11980 <__assert_fail@plt+0x514>
   11968:	ldr	r0, [pc, #60]	; 119ac <__assert_fail@plt+0x540>
   1196c:	pop	{r4, pc}
   11970:	ldr	r0, [pc, #56]	; 119b0 <__assert_fail@plt+0x544>
   11974:	pop	{r4, pc}
   11978:	ldr	r0, [pc, #52]	; 119b4 <__assert_fail@plt+0x548>
   1197c:	pop	{r4, pc}
   11980:	mov	r3, r4
   11984:	ldr	r2, [pc, #44]	; 119b8 <__assert_fail@plt+0x54c>
   11988:	mov	r1, #0
   1198c:	mov	r0, #1
   11990:	bl	11268 <error@plt>
   11994:	mov	r0, #0
   11998:	pop	{r4, pc}
   1199c:	andeq	sl, r1, r4, ror #31
   119a0:	andeq	sl, r1, ip, ror #31
   119a4:	strdeq	sl, [r1], -r8
   119a8:	andeq	fp, r1, r0
   119ac:	strdeq	r3, [r1], -r0
   119b0:	strdeq	r3, [r1], -ip
   119b4:			; <UNDEFINED> instruction: 0x00012db0
   119b8:	andeq	fp, r1, r8
   119bc:	cmp	r0, #114	; 0x72
   119c0:	beq	11db0 <__assert_fail@plt+0x944>
   119c4:	push	{r4, r5, lr}
   119c8:	vpush	{d8}
   119cc:	mov	r4, r1
   119d0:	sub	sp, sp, #20
   119d4:	bgt	11a20 <__assert_fail@plt+0x5b4>
   119d8:	cmp	r0, #102	; 0x66
   119dc:	beq	11dcc <__assert_fail@plt+0x960>
   119e0:	bgt	11a64 <__assert_fail@plt+0x5f8>
   119e4:	cmp	r0, #87	; 0x57
   119e8:	beq	11d88 <__assert_fail@plt+0x91c>
   119ec:	bgt	11b70 <__assert_fail@plt+0x704>
   119f0:	cmp	r0, #82	; 0x52
   119f4:	beq	11c34 <__assert_fail@plt+0x7c8>
   119f8:	cmp	r0, #84	; 0x54
   119fc:	bne	11da8 <__assert_fail@plt+0x93c>
   11a00:	mov	r0, r1
   11a04:	mov	r2, #1
   11a08:	mov	r1, #255	; 0xff
   11a0c:	bl	122f8 <__assert_fail@plt+0xe8c>
   11a10:	ldr	r2, [pc, #1080]	; 11e50 <__assert_fail@plt+0x9e4>
   11a14:	mov	r3, #0
   11a18:	str	r0, [r2, #40]	; 0x28
   11a1c:	b	11b94 <__assert_fail@plt+0x728>
   11a20:	ldr	r3, [pc, #1068]	; 11e54 <__assert_fail@plt+0x9e8>
   11a24:	cmp	r0, r3
   11a28:	beq	11de4 <__assert_fail@plt+0x978>
   11a2c:	bgt	11ab8 <__assert_fail@plt+0x64c>
   11a30:	cmp	r0, #118	; 0x76
   11a34:	beq	11d70 <__assert_fail@plt+0x904>
   11a38:	bgt	11af4 <__assert_fail@plt+0x688>
   11a3c:	cmp	r0, #115	; 0x73
   11a40:	beq	11ba4 <__assert_fail@plt+0x738>
   11a44:	cmp	r0, #116	; 0x74
   11a48:	bne	11da8 <__assert_fail@plt+0x93c>
   11a4c:	mov	r0, r1
   11a50:	bl	11914 <__assert_fail@plt+0x4a8>
   11a54:	ldr	r2, [pc, #1012]	; 11e50 <__assert_fail@plt+0x9e4>
   11a58:	mov	r3, #0
   11a5c:	str	r0, [r2, #48]	; 0x30
   11a60:	b	11b94 <__assert_fail@plt+0x728>
   11a64:	cmp	r0, #110	; 0x6e
   11a68:	beq	11d58 <__assert_fail@plt+0x8ec>
   11a6c:	bgt	11b1c <__assert_fail@plt+0x6b0>
   11a70:	cmp	r0, #105	; 0x69
   11a74:	beq	11c4c <__assert_fail@plt+0x7e0>
   11a78:	cmp	r0, #108	; 0x6c
   11a7c:	bne	11da8 <__assert_fail@plt+0x93c>
   11a80:	mov	r2, #0
   11a84:	add	r1, sp, #12
   11a88:	mov	r0, r4
   11a8c:	bl	112f8 <strtoul@plt>
   11a90:	ldr	r2, [pc, #960]	; 11e58 <__assert_fail@plt+0x9ec>
   11a94:	ldr	r3, [sp, #12]
   11a98:	str	r0, [r2, #32]
   11a9c:	ldrb	r3, [r3]
   11aa0:	cmp	r3, #0
   11aa4:	bne	11dfc <__assert_fail@plt+0x990>
   11aa8:	cmp	r0, #0
   11aac:	blt	11dfc <__assert_fail@plt+0x990>
   11ab0:	mov	r3, #0
   11ab4:	b	11b94 <__assert_fail@plt+0x728>
   11ab8:	cmp	r0, #260	; 0x104
   11abc:	beq	11d38 <__assert_fail@plt+0x8cc>
   11ac0:	bgt	11b44 <__assert_fail@plt+0x6d8>
   11ac4:	ldr	r3, [pc, #912]	; 11e5c <__assert_fail@plt+0x9f0>
   11ac8:	cmp	r0, r3
   11acc:	beq	11c1c <__assert_fail@plt+0x7b0>
   11ad0:	add	r3, r3, #1
   11ad4:	cmp	r0, r3
   11ad8:	bne	11da8 <__assert_fail@plt+0x93c>
   11adc:	ldr	r0, [pc, #892]	; 11e60 <__assert_fail@plt+0x9f4>
   11ae0:	bl	11914 <__assert_fail@plt+0x4a8>
   11ae4:	ldr	r2, [pc, #868]	; 11e50 <__assert_fail@plt+0x9e4>
   11ae8:	mov	r3, #0
   11aec:	str	r0, [r2, #48]	; 0x30
   11af0:	b	11b94 <__assert_fail@plt+0x728>
   11af4:	cmp	r0, #119	; 0x77
   11af8:	beq	11cd4 <__assert_fail@plt+0x868>
   11afc:	cmp	r0, #256	; 0x100
   11b00:	bne	11da8 <__assert_fail@plt+0x93c>
   11b04:	ldr	r0, [pc, #856]	; 11e64 <__assert_fail@plt+0x9f8>
   11b08:	bl	11914 <__assert_fail@plt+0x4a8>
   11b0c:	ldr	r2, [pc, #828]	; 11e50 <__assert_fail@plt+0x9e4>
   11b10:	mov	r3, #0
   11b14:	str	r0, [r2, #48]	; 0x30
   11b18:	b	11b94 <__assert_fail@plt+0x728>
   11b1c:	cmp	r0, #112	; 0x70
   11b20:	beq	11d14 <__assert_fail@plt+0x8a8>
   11b24:	cmp	r0, #113	; 0x71
   11b28:	bne	11da8 <__assert_fail@plt+0x93c>
   11b2c:	ldr	r1, [pc, #820]	; 11e68 <__assert_fail@plt+0x9fc>
   11b30:	mov	r3, #0
   11b34:	ldr	r2, [r1]
   11b38:	orr	r2, r2, #8
   11b3c:	str	r2, [r1]
   11b40:	b	11b94 <__assert_fail@plt+0x728>
   11b44:	ldr	r3, [pc, #800]	; 11e6c <__assert_fail@plt+0xa00>
   11b48:	cmp	r0, r3
   11b4c:	beq	11bc4 <__assert_fail@plt+0x758>
   11b50:	ldr	r3, [pc, #792]	; 11e70 <__assert_fail@plt+0xa04>
   11b54:	cmp	r0, r3
   11b58:	bne	11da8 <__assert_fail@plt+0x93c>
   11b5c:	mov	r0, r2
   11b60:	ldr	r1, [pc, #780]	; 11e74 <__assert_fail@plt+0xa08>
   11b64:	bl	17500 <argp_error@@Base>
   11b68:	mov	r3, #7
   11b6c:	b	11b94 <__assert_fail@plt+0x728>
   11b70:	cmp	r0, #99	; 0x63
   11b74:	beq	11cf4 <__assert_fail@plt+0x888>
   11b78:	cmp	r0, #100	; 0x64
   11b7c:	bne	11da8 <__assert_fail@plt+0x93c>
   11b80:	ldr	r1, [pc, #752]	; 11e78 <__assert_fail@plt+0xa0c>
   11b84:	mov	r3, #0
   11b88:	ldr	r2, [r1]
   11b8c:	orr	r2, r2, #1
   11b90:	str	r2, [r1]
   11b94:	mov	r0, r3
   11b98:	add	sp, sp, #20
   11b9c:	vpop	{d8}
   11ba0:	pop	{r4, r5, pc}
   11ba4:	mov	r0, r1
   11ba8:	mov	r2, #1
   11bac:	ldr	r1, [pc, #712]	; 11e7c <__assert_fail@plt+0xa10>
   11bb0:	bl	122f8 <__assert_fail@plt+0xe8c>
   11bb4:	ldr	r2, [pc, #660]	; 11e50 <__assert_fail@plt+0x9e4>
   11bb8:	mov	r3, #0
   11bbc:	str	r0, [r2]
   11bc0:	b	11b94 <__assert_fail@plt+0x728>
   11bc4:	ldr	r2, [pc, #668]	; 11e68 <__assert_fail@plt+0x9fc>
   11bc8:	ldr	r1, [pc, #688]	; 11e80 <__assert_fail@plt+0xa14>
   11bcc:	mov	r0, r4
   11bd0:	ldr	r3, [r2]
   11bd4:	orr	r3, r3, #64	; 0x40
   11bd8:	str	r3, [r2]
   11bdc:	bl	11238 <strcasecmp@plt>
   11be0:	cmp	r0, #0
   11be4:	moveq	r0, #1
   11be8:	beq	11c04 <__assert_fail@plt+0x798>
   11bec:	ldr	r1, [pc, #656]	; 11e84 <__assert_fail@plt+0xa18>
   11bf0:	mov	r0, r4
   11bf4:	bl	11238 <strcasecmp@plt>
   11bf8:	cmp	r0, #0
   11bfc:	moveq	r0, #2
   11c00:	bne	11e2c <__assert_fail@plt+0x9c0>
   11c04:	ldr	r1, [pc, #636]	; 11e88 <__assert_fail@plt+0xa1c>
   11c08:	mov	r3, #0
   11c0c:	ldr	r2, [r1]
   11c10:	orr	r2, r2, r0
   11c14:	str	r2, [r1]
   11c18:	b	11b94 <__assert_fail@plt+0x728>
   11c1c:	ldr	r0, [pc, #616]	; 11e8c <__assert_fail@plt+0xa20>
   11c20:	bl	11914 <__assert_fail@plt+0x4a8>
   11c24:	ldr	r2, [pc, #548]	; 11e50 <__assert_fail@plt+0x9e4>
   11c28:	mov	r3, #0
   11c2c:	str	r0, [r2, #48]	; 0x30
   11c30:	b	11b94 <__assert_fail@plt+0x728>
   11c34:	ldr	r1, [pc, #556]	; 11e68 <__assert_fail@plt+0x9fc>
   11c38:	mov	r3, #0
   11c3c:	ldr	r2, [r1]
   11c40:	orr	r2, r2, #16
   11c44:	str	r2, [r1]
   11c48:	b	11b94 <__assert_fail@plt+0x728>
   11c4c:	add	r1, sp, #12
   11c50:	mov	r0, r4
   11c54:	str	r2, [sp, #4]
   11c58:	bl	11370 <strtod@plt>
   11c5c:	ldr	r3, [sp, #12]
   11c60:	ldr	r2, [sp, #4]
   11c64:	ldrb	r1, [r3]
   11c68:	cmp	r1, #0
   11c6c:	vmov.f64	d8, d0
   11c70:	bne	11e18 <__assert_fail@plt+0x9ac>
   11c74:	vldr	d0, [pc, #460]	; 11e48 <__assert_fail@plt+0x9dc>
   11c78:	ldr	r3, [pc, #472]	; 11e58 <__assert_fail@plt+0x9ec>
   11c7c:	ldr	r1, [pc, #484]	; 11e68 <__assert_fail@plt+0x9fc>
   11c80:	ldr	r0, [pc, #520]	; 11e90 <__assert_fail@plt+0xa24>
   11c84:	vmul.f64	d0, d8, d0
   11c88:	ldrb	r2, [r3, #4]
   11c8c:	ldr	r3, [r1]
   11c90:	orr	r3, r3, #2
   11c94:	str	r3, [r1]
   11c98:	eor	r2, r2, #1
   11c9c:	vcvt.u32.f64	s15, d0
   11ca0:	vmov	r3, s15
   11ca4:	vstr	s15, [r0]
   11ca8:	cmp	r3, #199	; 0xc7
   11cac:	movhi	r2, #0
   11cb0:	andls	r2, r2, #1
   11cb4:	cmp	r2, #0
   11cb8:	beq	11ab0 <__assert_fail@plt+0x644>
   11cbc:	mov	r3, r4
   11cc0:	ldr	r2, [pc, #460]	; 11e94 <__assert_fail@plt+0xa28>
   11cc4:	mov	r1, #0
   11cc8:	mov	r0, #1
   11ccc:	bl	11268 <error@plt>
   11cd0:	b	11ab0 <__assert_fail@plt+0x644>
   11cd4:	mov	r0, r1
   11cd8:	mov	r2, #0
   11cdc:	mvn	r1, #-2147483648	; 0x80000000
   11ce0:	bl	122f8 <__assert_fail@plt+0xe8c>
   11ce4:	ldr	r2, [pc, #356]	; 11e50 <__assert_fail@plt+0x9e4>
   11ce8:	mov	r3, #0
   11cec:	str	r0, [r2, #52]	; 0x34
   11cf0:	b	11b94 <__assert_fail@plt+0x728>
   11cf4:	mov	r0, r1
   11cf8:	mov	r2, #1
   11cfc:	mov	r1, #0
   11d00:	bl	122f8 <__assert_fail@plt+0xe8c>
   11d04:	ldr	r2, [pc, #332]	; 11e58 <__assert_fail@plt+0x9ec>
   11d08:	mov	r3, #0
   11d0c:	str	r0, [r2, #8]
   11d10:	b	11b94 <__assert_fail@plt+0x728>
   11d14:	ldr	r5, [pc, #380]	; 11e98 <__assert_fail@plt+0xa2c>
   11d18:	mov	r0, r1
   11d1c:	mov	r2, r5
   11d20:	ldr	r1, [pc, #372]	; 11e9c <__assert_fail@plt+0xa30>
   11d24:	bl	12448 <__assert_fail@plt+0xfdc>
   11d28:	ldr	r2, [pc, #368]	; 11ea0 <__assert_fail@plt+0xa34>
   11d2c:	mov	r3, #0
   11d30:	str	r5, [r2]
   11d34:	b	11b94 <__assert_fail@plt+0x728>
   11d38:	mov	r0, r1
   11d3c:	mov	r2, #0
   11d40:	mov	r1, #255	; 0xff
   11d44:	bl	122f8 <__assert_fail@plt+0xe8c>
   11d48:	ldr	r2, [pc, #264]	; 11e58 <__assert_fail@plt+0x9ec>
   11d4c:	mov	r3, #0
   11d50:	str	r0, [r2, #12]
   11d54:	b	11b94 <__assert_fail@plt+0x728>
   11d58:	ldr	r1, [pc, #264]	; 11e68 <__assert_fail@plt+0x9fc>
   11d5c:	mov	r3, #0
   11d60:	ldr	r2, [r1]
   11d64:	orr	r2, r2, #4
   11d68:	str	r2, [r1]
   11d6c:	b	11b94 <__assert_fail@plt+0x728>
   11d70:	ldr	r1, [pc, #240]	; 11e68 <__assert_fail@plt+0x9fc>
   11d74:	mov	r3, #0
   11d78:	ldr	r2, [r1]
   11d7c:	orr	r2, r2, #32
   11d80:	str	r2, [r1]
   11d84:	b	11b94 <__assert_fail@plt+0x728>
   11d88:	mov	r0, r1
   11d8c:	mov	r2, #0
   11d90:	mvn	r1, #-2147483648	; 0x80000000
   11d94:	bl	122f8 <__assert_fail@plt+0xe8c>
   11d98:	ldr	r2, [pc, #176]	; 11e50 <__assert_fail@plt+0x9e4>
   11d9c:	mov	r3, #0
   11da0:	str	r0, [r2, #56]	; 0x38
   11da4:	b	11b94 <__assert_fail@plt+0x728>
   11da8:	mov	r3, #7
   11dac:	b	11b94 <__assert_fail@plt+0x728>
   11db0:	ldr	r1, [pc, #192]	; 11e78 <__assert_fail@plt+0xa0c>
   11db4:	mov	r3, #0
   11db8:	mov	r0, r3
   11dbc:	ldr	r2, [r1]
   11dc0:	orr	r2, r2, #5
   11dc4:	str	r2, [r1]
   11dc8:	bx	lr
   11dcc:	ldr	r1, [pc, #148]	; 11e68 <__assert_fail@plt+0x9fc>
   11dd0:	mov	r3, #0
   11dd4:	ldr	r2, [r1]
   11dd8:	orr	r2, r2, #1
   11ddc:	str	r2, [r1]
   11de0:	b	11b94 <__assert_fail@plt+0x728>
   11de4:	ldr	r0, [pc, #184]	; 11ea4 <__assert_fail@plt+0xa38>
   11de8:	bl	11914 <__assert_fail@plt+0x4a8>
   11dec:	ldr	r2, [pc, #92]	; 11e50 <__assert_fail@plt+0x9e4>
   11df0:	mov	r3, #0
   11df4:	str	r0, [r2, #48]	; 0x30
   11df8:	b	11b94 <__assert_fail@plt+0x728>
   11dfc:	mov	r3, r4
   11e00:	ldr	r2, [pc, #160]	; 11ea8 <__assert_fail@plt+0xa3c>
   11e04:	mov	r1, #0
   11e08:	mov	r0, #1
   11e0c:	bl	11268 <error@plt>
   11e10:	mov	r3, #0
   11e14:	b	11b94 <__assert_fail@plt+0x728>
   11e18:	mov	r0, r2
   11e1c:	ldr	r1, [pc, #136]	; 11eac <__assert_fail@plt+0xa40>
   11e20:	mov	r2, r4
   11e24:	bl	17500 <argp_error@@Base>
   11e28:	b	11c74 <__assert_fail@plt+0x808>
   11e2c:	mov	r0, #1
   11e30:	mov	r3, r4
   11e34:	ldr	r2, [pc, #116]	; 11eb0 <__assert_fail@plt+0xa44>
   11e38:	mov	r1, #0
   11e3c:	bl	11268 <error@plt>
   11e40:	mov	r0, #0
   11e44:	b	11c04 <__assert_fail@plt+0x798>
   11e48:	andeq	r0, r0, r0
   11e4c:	addmi	r4, pc, r0
   11e50:	andeq	sp, r2, r0, asr #2
   11e54:	andeq	r0, r0, r1, lsl #2
   11e58:	andeq	sp, r2, r4, lsr r6
   11e5c:	andeq	r0, r0, r2, lsl #2
   11e60:	andeq	fp, r1, ip, ror r0
   11e64:	andeq	sl, r1, r4, ror #31
   11e68:	andeq	sp, r2, r8, asr #13
   11e6c:	andeq	r0, r0, r5, lsl #2
   11e70:	tsteq	r0, r2
   11e74:	strheq	fp, [r1], -r4
   11e78:	andeq	sp, r2, ip, asr #13
   11e7c:	andeq	pc, r0, r7, ror pc	; <UNPREDICTABLE>
   11e80:	andeq	fp, r1, r4, lsl #1
   11e84:	andeq	fp, r1, ip, lsl #1
   11e88:	ldrdeq	sp, [r2], -r4
   11e8c:	andeq	sl, r1, ip, ror #31
   11e90:	ldrdeq	sp, [r2], -r8
   11e94:	andeq	fp, r1, r4, asr #32
   11e98:	andeq	sp, r2, r4, asr #12
   11e9c:	andeq	sp, r2, ip, ror #2
   11ea0:	andeq	sp, r2, r0, asr #13
   11ea4:	strdeq	sl, [r1], -r8
   11ea8:	andeq	fp, r1, r0, rrx
   11eac:	andeq	fp, r1, r4, lsr #32
   11eb0:	muleq	r1, r4, r0
   11eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb8:	sub	sp, sp, #188	; 0xbc
   11ebc:	ldr	r8, [pc, #828]	; 12200 <__assert_fail@plt+0xd94>
   11ec0:	mov	r7, r0
   11ec4:	str	r1, [sp, #20]
   11ec8:	mov	r0, #2
   11ecc:	ldr	r1, [pc, #816]	; 12204 <__assert_fail@plt+0xd98>
   11ed0:	bl	111c0 <signal@plt>
   11ed4:	ldr	r3, [r8, #32]
   11ed8:	ldr	r9, [r7]
   11edc:	add	sl, sp, #24
   11ee0:	mov	r4, #0
   11ee4:	cmp	r3, #0
   11ee8:	str	r4, [sl, #4]
   11eec:	add	r9, r9, #1
   11ef0:	str	r4, [sp, #24]
   11ef4:	str	r4, [sp, #40]	; 0x28
   11ef8:	str	r4, [sp, #48]	; 0x30
   11efc:	str	r4, [sp, #44]	; 0x2c
   11f00:	str	r4, [sp, #52]	; 0x34
   11f04:	beq	11f20 <__assert_fail@plt+0xab4>
   11f08:	mov	r0, r7
   11f0c:	bl	11854 <__assert_fail@plt+0x3e8>
   11f10:	ldr	r3, [r8, #32]
   11f14:	add	r4, r4, #1
   11f18:	cmp	r3, r4
   11f1c:	bhi	11f08 <__assert_fail@plt+0xa9c>
   11f20:	ldr	r3, [pc, #736]	; 12208 <__assert_fail@plt+0xd9c>
   11f24:	ldr	r3, [r3]
   11f28:	tst	r3, #1
   11f2c:	beq	121bc <__assert_fail@plt+0xd50>
   11f30:	ldr	r3, [pc, #724]	; 1220c <__assert_fail@plt+0xda0>
   11f34:	str	r3, [sp, #44]	; 0x2c
   11f38:	mov	r1, #0
   11f3c:	add	r0, sp, #32
   11f40:	ldr	r6, [pc, #712]	; 12210 <__assert_fail@plt+0xda4>
   11f44:	ldr	fp, [pc, #712]	; 12214 <__assert_fail@plt+0xda8>
   11f48:	bl	1125c <gettimeofday@plt>
   11f4c:	add	r5, sp, #180	; 0xb4
   11f50:	mov	r3, #0
   11f54:	mov	r4, r3
   11f58:	mov	r0, r7
   11f5c:	str	r3, [sp, #16]
   11f60:	bl	11854 <__assert_fail@plt+0x3e8>
   11f64:	str	r4, [sp, #8]
   11f68:	str	r4, [sp, #12]
   11f6c:	ldr	r3, [r8]
   11f70:	cmp	r3, #0
   11f74:	bne	120ac <__assert_fail@plt+0xc40>
   11f78:	add	r3, sp, #52	; 0x34
   11f7c:	str	r4, [r3, #4]!
   11f80:	cmp	r5, r3
   11f84:	bne	11f7c <__assert_fail@plt+0xb10>
   11f88:	ldr	r3, [r7]
   11f8c:	add	ip, sp, #184	; 0xb8
   11f90:	cmp	r3, #0
   11f94:	add	r2, r3, #31
   11f98:	movge	r2, r3
   11f9c:	asr	r1, r3, #31
   11fa0:	asr	r2, r2, #5
   11fa4:	lsr	r1, r1, #27
   11fa8:	add	r2, ip, r2, lsl #2
   11fac:	add	r3, r3, r1
   11fb0:	and	r3, r3, #31
   11fb4:	ldr	ip, [r2, #-128]	; 0xffffff80
   11fb8:	mov	r0, #1
   11fbc:	sub	r3, r3, r1
   11fc0:	mov	r1, r4
   11fc4:	orr	r3, ip, r0, lsl r3
   11fc8:	add	r0, sp, #48	; 0x30
   11fcc:	str	r3, [r2, #-128]	; 0xffffff80
   11fd0:	bl	1125c <gettimeofday@plt>
   11fd4:	ldr	r1, [sp, #44]	; 0x2c
   11fd8:	ldr	r3, [sp, #36]	; 0x24
   11fdc:	ldr	ip, [sp, #52]	; 0x34
   11fe0:	ldr	r2, [sp, #32]
   11fe4:	ldr	r0, [sp, #40]	; 0x28
   11fe8:	add	r3, r3, r1
   11fec:	ldr	r1, [sp, #48]	; 0x30
   11ff0:	sub	r3, r3, ip
   11ff4:	add	r2, r2, r0
   11ff8:	sub	r2, r2, r1
   11ffc:	cmp	r3, #0
   12000:	str	r3, [sp, #28]
   12004:	str	r2, [sp, #24]
   12008:	bge	12188 <__assert_fail@plt+0xd1c>
   1200c:	sub	r1, r2, #1
   12010:	add	r3, r3, #999424	; 0xf4000
   12014:	adds	r3, r3, #576	; 0x240
   12018:	mov	r2, r1
   1201c:	sub	r1, r1, #1
   12020:	bmi	12010 <__assert_fail@plt+0xba4>
   12024:	str	r3, [sp, #28]
   12028:	str	r2, [sp, #24]
   1202c:	cmp	r2, #0
   12030:	str	sl, [sp]
   12034:	mov	r3, r4
   12038:	mov	r2, #0
   1203c:	add	r1, sp, #56	; 0x38
   12040:	mov	r0, r9
   12044:	strlt	r4, [sp, #28]
   12048:	strlt	r4, [sp, #24]
   1204c:	bl	111f0 <select@plt>
   12050:	cmp	r0, #0
   12054:	blt	12108 <__assert_fail@plt+0xc9c>
   12058:	cmp	r0, #1
   1205c:	beq	12128 <__assert_fail@plt+0xcbc>
   12060:	ldr	r3, [r7, #8]
   12064:	cmp	r3, #0
   12068:	beq	120d4 <__assert_fail@plt+0xc68>
   1206c:	ldr	r2, [r7, #112]	; 0x70
   12070:	cmp	r3, r2
   12074:	bhi	120d4 <__assert_fail@plt+0xc68>
   12078:	ldr	r3, [sp, #8]
   1207c:	cmp	r3, #0
   12080:	bne	120ac <__assert_fail@plt+0xc40>
   12084:	ldr	r3, [fp, #56]	; 0x38
   12088:	mov	r2, #1
   1208c:	str	r2, [sp, #8]
   12090:	str	r3, [sp, #40]	; 0x28
   12094:	mov	r1, r4
   12098:	add	r0, sp, #32
   1209c:	bl	1125c <gettimeofday@plt>
   120a0:	ldr	r3, [r8]
   120a4:	cmp	r3, #0
   120a8:	beq	11f78 <__assert_fail@plt+0xb0c>
   120ac:	mov	r0, r7
   120b0:	bl	12708 <__assert_fail@plt+0x129c>
   120b4:	ldr	r3, [sp, #20]
   120b8:	cmp	r3, #0
   120bc:	moveq	r0, r3
   120c0:	beq	120cc <__assert_fail@plt+0xc60>
   120c4:	ldr	r3, [sp, #20]
   120c8:	blx	r3
   120cc:	add	sp, sp, #188	; 0xbc
   120d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120d4:	mov	r0, r7
   120d8:	bl	11854 <__assert_fail@plt+0x3e8>
   120dc:	ldr	r3, [pc, #292]	; 12208 <__assert_fail@plt+0xd9c>
   120e0:	ldr	r3, [r3]
   120e4:	and	r3, r3, #9
   120e8:	cmp	r3, #1
   120ec:	beq	121a8 <__assert_fail@plt+0xd3c>
   120f0:	ldr	r1, [fp, #52]	; 0x34
   120f4:	add	r0, r7, #12
   120f8:	bl	12744 <__assert_fail@plt+0x12d8>
   120fc:	cmp	r0, #0
   12100:	beq	12094 <__assert_fail@plt+0xc28>
   12104:	b	120ac <__assert_fail@plt+0xc40>
   12108:	bl	11328 <__errno_location@plt>
   1210c:	ldr	r1, [r0]
   12110:	cmp	r1, #4
   12114:	beq	11f6c <__assert_fail@plt+0xb00>
   12118:	ldr	r2, [pc, #248]	; 12218 <__assert_fail@plt+0xdac>
   1211c:	mov	r0, #1
   12120:	bl	11268 <error@plt>
   12124:	b	11f6c <__assert_fail@plt+0xb00>
   12128:	mov	r0, r7
   1212c:	bl	13da0 <__assert_fail@plt+0x2934>
   12130:	cmp	r0, #0
   12134:	ldreq	r3, [sp, #16]
   12138:	addeq	r3, r3, #1
   1213c:	streq	r3, [sp, #16]
   12140:	ldr	r3, [sp, #12]
   12144:	cmp	r3, #0
   12148:	beq	121e8 <__assert_fail@plt+0xd7c>
   1214c:	ldr	r1, [fp, #52]	; 0x34
   12150:	add	r0, r7, #12
   12154:	bl	12744 <__assert_fail@plt+0x12d8>
   12158:	cmp	r0, #0
   1215c:	bne	120ac <__assert_fail@plt+0xc40>
   12160:	ldr	r2, [sp, #16]
   12164:	ldr	r3, [r7, #8]
   12168:	cmp	r2, r3
   1216c:	movcc	r2, #0
   12170:	movcs	r2, #1
   12174:	cmp	r3, #0
   12178:	moveq	r2, #0
   1217c:	cmp	r2, #0
   12180:	beq	11f6c <__assert_fail@plt+0xb00>
   12184:	b	120ac <__assert_fail@plt+0xc40>
   12188:	cmp	r3, r6
   1218c:	ble	1202c <__assert_fail@plt+0xbc0>
   12190:	sub	r3, r3, #999424	; 0xf4000
   12194:	sub	r3, r3, #576	; 0x240
   12198:	cmp	r3, r6
   1219c:	add	r2, r2, #1
   121a0:	bgt	12190 <__assert_fail@plt+0xd24>
   121a4:	b	12024 <__assert_fail@plt+0xbb8>
   121a8:	ldr	r3, [pc, #108]	; 1221c <__assert_fail@plt+0xdb0>
   121ac:	mov	r0, #46	; 0x2e
   121b0:	ldr	r1, [r3]
   121b4:	bl	113f4 <putc@plt>
   121b8:	b	120f0 <__assert_fail@plt+0xc84>
   121bc:	ldr	r1, [r7, #20]
   121c0:	ldr	r3, [pc, #88]	; 12220 <__assert_fail@plt+0xdb4>
   121c4:	mov	r2, #1000	; 0x3e8
   121c8:	umull	r0, r3, r3, r1
   121cc:	lsr	r3, r3, #6
   121d0:	str	r3, [sp, #40]	; 0x28
   121d4:	mul	r3, r2, r3
   121d8:	sub	r3, r1, r3
   121dc:	mul	r2, r2, r3
   121e0:	str	r2, [sp, #44]	; 0x2c
   121e4:	b	11f38 <__assert_fail@plt+0xacc>
   121e8:	mov	r1, r3
   121ec:	add	r0, sp, #48	; 0x30
   121f0:	bl	1125c <gettimeofday@plt>
   121f4:	add	r3, sp, #48	; 0x30
   121f8:	str	r3, [sp, #12]
   121fc:	b	1214c <__assert_fail@plt+0xce0>
   12200:	andeq	sp, r2, r4, lsr r6
   12204:	andeq	r1, r1, r0, asr #16
   12208:	andeq	sp, r2, r8, asr #13
   1220c:	andeq	r2, r0, r0, lsl r7
   12210:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   12214:	andeq	sp, r2, r0, asr #2
   12218:	andeq	fp, r1, ip, asr #1
   1221c:	andeq	sp, r2, ip, lsr #12
   12220:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   12224:	ldr	r3, [pc, #172]	; 122d8 <__assert_fail@plt+0xe6c>
   12228:	push	{r4, lr}
   1222c:	ldr	r4, [pc, #168]	; 122dc <__assert_fail@plt+0xe70>
   12230:	ldr	r0, [r3]
   12234:	bl	11160 <fflush@plt>
   12238:	ldr	r3, [r4]
   1223c:	ldr	r0, [pc, #156]	; 122e0 <__assert_fail@plt+0xe74>
   12240:	ldr	r1, [r3, #52]	; 0x34
   12244:	bl	11148 <printf@plt>
   12248:	ldr	r3, [r4]
   1224c:	ldr	r0, [pc, #144]	; 122e4 <__assert_fail@plt+0xe78>
   12250:	ldr	r1, [r3, #112]	; 0x70
   12254:	bl	11148 <printf@plt>
   12258:	ldr	r3, [r4]
   1225c:	ldr	r0, [pc, #132]	; 122e8 <__assert_fail@plt+0xe7c>
   12260:	ldr	r1, [r3, #116]	; 0x74
   12264:	bl	11148 <printf@plt>
   12268:	ldr	r3, [r4]
   1226c:	ldr	r1, [r3, #120]	; 0x78
   12270:	cmp	r1, #0
   12274:	bne	122c8 <__assert_fail@plt+0xe5c>
   12278:	ldr	r1, [r3, #112]	; 0x70
   1227c:	cmp	r1, #0
   12280:	beq	122ac <__assert_fail@plt+0xe40>
   12284:	ldr	r0, [r3, #116]	; 0x74
   12288:	cmp	r1, r0
   1228c:	bcc	122bc <__assert_fail@plt+0xe50>
   12290:	sub	r0, r1, r0
   12294:	mov	r3, #100	; 0x64
   12298:	mul	r0, r3, r0
   1229c:	bl	1aa38 <argp_parse@@Base+0x2e94>
   122a0:	mov	r1, r0
   122a4:	ldr	r0, [pc, #64]	; 122ec <__assert_fail@plt+0xe80>
   122a8:	bl	11148 <printf@plt>
   122ac:	mov	r0, #10
   122b0:	bl	11364 <putchar@plt>
   122b4:	mov	r0, #0
   122b8:	pop	{r4, pc}
   122bc:	ldr	r0, [pc, #44]	; 122f0 <__assert_fail@plt+0xe84>
   122c0:	bl	11148 <printf@plt>
   122c4:	b	122ac <__assert_fail@plt+0xe40>
   122c8:	ldr	r0, [pc, #36]	; 122f4 <__assert_fail@plt+0xe88>
   122cc:	bl	11148 <printf@plt>
   122d0:	ldr	r3, [r4]
   122d4:	b	12278 <__assert_fail@plt+0xe0c>
   122d8:	andeq	sp, r2, ip, lsr #12
   122dc:	ldrdeq	sp, [r2], -r0
   122e0:	ldrdeq	fp, [r1], -ip
   122e4:	strdeq	fp, [r1], -r8
   122e8:	andeq	fp, r1, r4, lsl r1
   122ec:	andeq	fp, r1, r8, ror #2
   122f0:	andeq	fp, r1, r0, asr #2
   122f4:	andeq	fp, r1, ip, lsr #2
   122f8:	push	{r4, r5, r6, r7, lr}
   122fc:	sub	sp, sp, #20
   12300:	mov	r5, r1
   12304:	mov	r6, r2
   12308:	add	r1, sp, #12
   1230c:	mov	r2, #0
   12310:	mov	r7, r0
   12314:	bl	112f8 <strtoul@plt>
   12318:	ldr	r3, [sp, #12]
   1231c:	ldrb	r2, [r3]
   12320:	cmp	r2, #0
   12324:	mov	r4, r0
   12328:	bne	1237c <__assert_fail@plt+0xf10>
   1232c:	cmp	r4, #0
   12330:	cmpeq	r6, #0
   12334:	beq	12364 <__assert_fail@plt+0xef8>
   12338:	cmp	r5, #0
   1233c:	cmpne	r4, r5
   12340:	bls	12358 <__assert_fail@plt+0xeec>
   12344:	mov	r3, r7
   12348:	ldr	r2, [pc, #72]	; 12398 <__assert_fail@plt+0xf2c>
   1234c:	mov	r1, #0
   12350:	mov	r0, #1
   12354:	bl	11268 <error@plt>
   12358:	mov	r0, r4
   1235c:	add	sp, sp, #20
   12360:	pop	{r4, r5, r6, r7, pc}
   12364:	mov	r3, r7
   12368:	ldr	r2, [pc, #44]	; 1239c <__assert_fail@plt+0xf30>
   1236c:	mov	r1, #0
   12370:	mov	r0, #1
   12374:	bl	11268 <error@plt>
   12378:	b	12338 <__assert_fail@plt+0xecc>
   1237c:	str	r3, [sp]
   12380:	ldr	r2, [pc, #24]	; 123a0 <__assert_fail@plt+0xf34>
   12384:	mov	r3, r7
   12388:	mov	r1, #0
   1238c:	mov	r0, #1
   12390:	bl	11268 <error@plt>
   12394:	b	1232c <__assert_fail@plt+0xec0>
   12398:	strdeq	fp, [r1], -r4
   1239c:	andeq	fp, r1, r4, asr #32
   123a0:	andeq	fp, r1, r4, lsr #32
   123a4:	push	{r4, r5, r6, lr}
   123a8:	ldr	r6, [pc, #144]	; 12440 <__assert_fail@plt+0xfd4>
   123ac:	ldr	r3, [r6]
   123b0:	cmp	r3, #0
   123b4:	popeq	{r4, r5, r6, pc}
   123b8:	mov	r4, r0
   123bc:	mov	r0, r3
   123c0:	mov	r5, r1
   123c4:	bl	18fec <argp_parse@@Base+0x1448>
   123c8:	ldr	r3, [pc, #116]	; 12444 <__assert_fail@plt+0xfd8>
   123cc:	cmp	r4, #0
   123d0:	str	r0, [r3]
   123d4:	beq	12414 <__assert_fail@plt+0xfa8>
   123d8:	ldr	ip, [r6]
   123dc:	add	ip, r0, ip
   123e0:	cmp	r0, ip
   123e4:	popcs	{r4, r5, r6, pc}
   123e8:	sub	r2, r0, #1
   123ec:	sub	ip, ip, #1
   123f0:	mov	r3, #0
   123f4:	ldrb	r0, [r4, r3]
   123f8:	add	r3, r3, #1
   123fc:	cmp	r3, r5
   12400:	movcs	r3, #0
   12404:	strb	r0, [r2, #1]!
   12408:	cmp	r2, ip
   1240c:	bne	123f4 <__assert_fail@plt+0xf88>
   12410:	pop	{r4, r5, r6, pc}
   12414:	ldr	r2, [r6]
   12418:	cmp	r2, #0
   1241c:	popeq	{r4, r5, r6, pc}
   12420:	mov	r2, r0
   12424:	strb	r4, [r2, r4]
   12428:	ldr	r2, [r6]
   1242c:	add	r4, r4, #1
   12430:	cmp	r2, r4
   12434:	popls	{r4, r5, r6, pc}
   12438:	ldr	r2, [r3]
   1243c:	b	12424 <__assert_fail@plt+0xfb8>
   12440:	andeq	sp, r2, r0, asr #2
   12444:	andeq	sp, r2, r4, asr #13
   12448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1244c:	mov	r7, r1
   12450:	ldrb	r5, [r0]
   12454:	sub	sp, sp, #12
   12458:	cmp	r5, #0
   1245c:	beq	124e4 <__assert_fail@plt+0x1078>
   12460:	ldr	r3, [r1]
   12464:	cmp	r3, #0
   12468:	ble	124f0 <__assert_fail@plt+0x1084>
   1246c:	mov	r5, #0
   12470:	mov	r4, r0
   12474:	ldr	fp, [pc, #124]	; 124f8 <__assert_fail@plt+0x108c>
   12478:	ldr	sl, [pc, #124]	; 124fc <__assert_fail@plt+0x1090>
   1247c:	sub	r6, r2, #1
   12480:	mov	r9, r5
   12484:	mov	r8, #1
   12488:	b	12498 <__assert_fail@plt+0x102c>
   1248c:	ldr	r3, [r7]
   12490:	cmp	r3, r5
   12494:	ble	124e4 <__assert_fail@plt+0x1078>
   12498:	add	r3, sp, #4
   1249c:	mov	r2, sp
   124a0:	mov	r1, fp
   124a4:	mov	r0, r4
   124a8:	bl	113e8 <sscanf@plt>
   124ac:	add	r5, r5, #1
   124b0:	mov	r3, r4
   124b4:	mov	r2, sl
   124b8:	mov	r1, r9
   124bc:	cmp	r0, #1
   124c0:	mov	r0, r8
   124c4:	beq	124cc <__assert_fail@plt+0x1060>
   124c8:	bl	11268 <error@plt>
   124cc:	ldr	r2, [sp, #4]
   124d0:	ldr	r3, [sp]
   124d4:	strb	r3, [r6, #1]!
   124d8:	ldrb	r3, [r4, r2]!
   124dc:	cmp	r3, #0
   124e0:	bne	1248c <__assert_fail@plt+0x1020>
   124e4:	str	r5, [r7]
   124e8:	add	sp, sp, #12
   124ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f0:	mov	r5, #0
   124f4:	b	124e4 <__assert_fail@plt+0x1078>
   124f8:	andeq	fp, r1, r0, lsl r6
   124fc:	andeq	fp, r1, r8, lsl r6
   12500:	ldr	r2, [r1, #4]
   12504:	ldr	r3, [r0, #4]
   12508:	sub	r3, r3, r2
   1250c:	cmp	r3, #0
   12510:	ldr	r2, [r0]
   12514:	str	r3, [r0, #4]
   12518:	addlt	r3, r3, #999424	; 0xf4000
   1251c:	addlt	r3, r3, #576	; 0x240
   12520:	sublt	r2, r2, #1
   12524:	stmlt	r0, {r2, r3}
   12528:	ldr	r3, [r1]
   1252c:	sub	r2, r2, r3
   12530:	str	r2, [r0]
   12534:	bx	lr
   12538:	vcmpe.f64	d0, #0.0
   1253c:	vmrs	APSR_nzcv, fpscr
   12540:	vnegmi.f64	d0, d0
   12544:	bx	lr
   12548:	vldr	d7, [pc, #88]	; 125a8 <__assert_fail@plt+0x113c>
   1254c:	vcmpe.f64	d0, d7
   12550:	vmrs	APSR_nzcv, fpscr
   12554:	bmi	1259c <__assert_fail@plt+0x1130>
   12558:	vcmpe.f64	d0, d1
   1255c:	vmrs	APSR_nzcv, fpscr
   12560:	bmi	1259c <__assert_fail@plt+0x1130>
   12564:	vldr	d3, [pc, #68]	; 125b0 <__assert_fail@plt+0x1144>
   12568:	vmov.f64	d4, d7
   1256c:	vmul.f64	d6, d0, d3
   12570:	vdiv.f64	d7, d0, d6
   12574:	vadd.f64	d7, d7, d6
   12578:	vmul.f64	d7, d7, d3
   1257c:	vsub.f64	d5, d7, d6
   12580:	vmov.f64	d6, d7
   12584:	vcmpe.f64	d5, d4
   12588:	vmrs	APSR_nzcv, fpscr
   1258c:	vnegmi.f64	d5, d5
   12590:	vcmpe.f64	d1, d5
   12594:	vmrs	APSR_nzcv, fpscr
   12598:	bmi	12570 <__assert_fail@plt+0x1104>
   1259c:	vmov.f64	d0, d7
   125a0:	bx	lr
   125a4:	nop			; (mov r0, r0)
	...
   125b4:	svccc	0x00e00000
   125b8:	mvn	r0, r0
   125bc:	lsr	r0, r0, #31
   125c0:	bx	lr
   125c4:	cmp	r2, #0
   125c8:	bic	r3, r2, #-2147483648	; 0x80000000
   125cc:	push	{r4, lr}
   125d0:	mov	r4, r0
   125d4:	ldrge	r2, [pc, #12]	; 125e8 <__assert_fail@plt+0x117c>
   125d8:	ldrlt	r2, [pc, #12]	; 125ec <__assert_fail@plt+0x1180>
   125dc:	bl	11334 <snprintf@plt>
   125e0:	mov	r0, r4
   125e4:	pop	{r4, pc}
   125e8:	andeq	fp, r1, r4, lsr r6
   125ec:	andeq	fp, r1, r8, lsr r6
   125f0:	ldr	r3, [r0, #80]	; 0x50
   125f4:	push	{r4, r5, r6, lr}
   125f8:	cmp	r3, #0
   125fc:	mov	r5, r0
   12600:	beq	12618 <__assert_fail@plt+0x11ac>
   12604:	ldr	r4, [r5, #76]	; 0x4c
   12608:	cmp	r4, #0
   1260c:	beq	12640 <__assert_fail@plt+0x11d4>
   12610:	mov	r0, #0
   12614:	pop	{r4, r5, r6, pc}
   12618:	ldr	r0, [r0, #56]	; 0x38
   1261c:	cmp	r1, #0
   12620:	addne	r0, r0, #8
   12624:	addeq	r0, r0, #80	; 0x50
   12628:	bl	195a8 <argp_parse@@Base+0x1a04>
   1262c:	cmp	r0, #0
   12630:	str	r0, [r5, #80]	; 0x50
   12634:	bne	12604 <__assert_fail@plt+0x1198>
   12638:	mvn	r0, #0
   1263c:	pop	{r4, r5, r6, pc}
   12640:	ldr	r0, [r5, #72]	; 0x48
   12644:	bl	195a8 <argp_parse@@Base+0x1a04>
   12648:	cmp	r0, #0
   1264c:	str	r0, [r5, #76]	; 0x4c
   12650:	beq	12638 <__assert_fail@plt+0x11cc>
   12654:	ldr	r2, [r5, #72]	; 0x48
   12658:	mov	r1, r4
   1265c:	bl	11358 <memset@plt>
   12660:	mov	r0, r4
   12664:	pop	{r4, r5, r6, pc}
   12668:	push	{r4, r5, r6, r7, r8, lr}
   1266c:	mov	r8, r1
   12670:	ldrb	r1, [sp, #24]
   12674:	mov	r4, r2
   12678:	mov	r5, r3
   1267c:	mov	r6, r0
   12680:	bl	125f0 <__assert_fail@plt+0x1184>
   12684:	subs	r7, r0, #0
   12688:	bne	126bc <__assert_fail@plt+0x1250>
   1268c:	ldr	r2, [r6, #56]	; 0x38
   12690:	add	r3, r4, r5
   12694:	cmp	r2, r3
   12698:	bcc	126bc <__assert_fail@plt+0x1250>
   1269c:	ldr	r0, [r6, #80]	; 0x50
   126a0:	mov	r2, r5
   126a4:	add	r0, r0, #8
   126a8:	add	r0, r0, r4
   126ac:	mov	r1, r8
   126b0:	bl	111b4 <memcpy@plt>
   126b4:	mov	r0, r7
   126b8:	pop	{r4, r5, r6, r7, r8, pc}
   126bc:	mvn	r7, #0
   126c0:	mov	r0, r7
   126c4:	pop	{r4, r5, r6, r7, r8, pc}
   126c8:	str	r1, [r0, #8]
   126cc:	bx	lr
   126d0:	push	{lr}		; (str lr, [sp, #-4]!)
   126d4:	sub	sp, sp, #20
   126d8:	add	ip, sp, #16
   126dc:	ldr	r0, [r0]
   126e0:	str	r3, [sp]
   126e4:	str	r2, [ip, #-4]!
   126e8:	mov	r2, r1
   126ec:	mov	r3, ip
   126f0:	mov	r1, #1
   126f4:	bl	1113c <setsockopt@plt>
   126f8:	add	sp, sp, #20
   126fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12700:	str	r1, [r0, #20]
   12704:	bx	lr
   12708:	push	{r4, lr}
   1270c:	mov	r4, r0
   12710:	ldr	r0, [r0, #80]	; 0x50
   12714:	cmp	r0, #0
   12718:	beq	12728 <__assert_fail@plt+0x12bc>
   1271c:	bl	18a3c <argp_parse@@Base+0xe98>
   12720:	mov	r3, #0
   12724:	str	r3, [r4, #80]	; 0x50
   12728:	ldr	r0, [r4, #76]	; 0x4c
   1272c:	cmp	r0, #0
   12730:	popeq	{r4, pc}
   12734:	bl	18a3c <argp_parse@@Base+0xe98>
   12738:	mov	r3, #0
   1273c:	str	r3, [r4, #76]	; 0x4c
   12740:	pop	{r4, pc}
   12744:	push	{r4, r5, lr}
   12748:	sub	sp, sp, #12
   1274c:	mov	r4, r1
   12750:	mov	r5, r0
   12754:	mov	r1, #0
   12758:	mov	r0, sp
   1275c:	bl	1125c <gettimeofday@plt>
   12760:	cmn	r4, #1
   12764:	moveq	r0, #0
   12768:	beq	12798 <__assert_fail@plt+0x132c>
   1276c:	ldr	r3, [sp, #4]
   12770:	ldr	r2, [r5, #4]
   12774:	ldr	r0, [sp]
   12778:	sub	r3, r3, r2
   1277c:	cmp	r3, #0
   12780:	ldr	r3, [r5]
   12784:	sublt	r0, r0, #1
   12788:	sub	r0, r0, r3
   1278c:	cmp	r4, r0
   12790:	movgt	r0, #0
   12794:	movle	r0, #1
   12798:	add	sp, sp, #12
   1279c:	pop	{r4, r5, pc}
   127a0:	push	{r4, r5, lr}
   127a4:	mov	r3, #0
   127a8:	sub	sp, sp, #324	; 0x144
   127ac:	mov	ip, #1
   127b0:	str	r3, [sp]
   127b4:	stmib	sp, {r3, ip}
   127b8:	add	r2, sp, #16
   127bc:	mov	r3, #46	; 0x2e
   127c0:	mov	r4, r0
   127c4:	mov	r5, r1
   127c8:	bl	113ac <getnameinfo@plt>
   127cc:	subs	r3, r0, #0
   127d0:	beq	1280c <__assert_fail@plt+0x13a0>
   127d4:	cmn	r3, #11
   127d8:	beq	128ac <__assert_fail@plt+0x1440>
   127dc:	bl	1119c <gai_strerror@plt>
   127e0:	mov	r2, r0
   127e4:	ldr	r3, [pc, #232]	; 128d4 <__assert_fail@plt+0x1468>
   127e8:	ldr	r1, [pc, #232]	; 128d8 <__assert_fail@plt+0x146c>
   127ec:	ldr	r0, [r3]
   127f0:	bl	1131c <fprintf@plt>
   127f4:	ldr	r0, [pc, #224]	; 128dc <__assert_fail@plt+0x1470>
   127f8:	bl	19518 <argp_parse@@Base+0x1974>
   127fc:	mov	r4, r0
   12800:	mov	r0, r4
   12804:	add	sp, sp, #324	; 0x144
   12808:	pop	{r4, r5, pc}
   1280c:	ldr	r3, [pc, #204]	; 128e0 <__assert_fail@plt+0x1474>
   12810:	ldr	r3, [r3]
   12814:	ands	r3, r3, #4
   12818:	bne	12894 <__assert_fail@plt+0x1428>
   1281c:	mov	ip, #40	; 0x28
   12820:	str	r3, [sp, #4]
   12824:	str	r3, [sp]
   12828:	mov	r1, r5
   1282c:	mov	r0, r4
   12830:	add	r2, sp, #64	; 0x40
   12834:	str	ip, [sp, #8]
   12838:	mov	r3, #256	; 0x100
   1283c:	bl	113ac <getnameinfo@plt>
   12840:	cmp	r0, #0
   12844:	add	r0, sp, #16
   12848:	bne	128c0 <__assert_fail@plt+0x1454>
   1284c:	bl	11304 <strlen@plt>
   12850:	mov	r5, r0
   12854:	add	r0, sp, #64	; 0x40
   12858:	bl	11304 <strlen@plt>
   1285c:	add	r5, r5, r0
   12860:	add	r5, r5, #4
   12864:	mov	r0, r5
   12868:	bl	18fec <argp_parse@@Base+0x1448>
   1286c:	add	r3, sp, #16
   12870:	str	r3, [sp]
   12874:	mov	r1, r5
   12878:	add	r3, sp, #64	; 0x40
   1287c:	ldr	r2, [pc, #96]	; 128e4 <__assert_fail@plt+0x1478>
   12880:	mov	r4, r0
   12884:	bl	11334 <snprintf@plt>
   12888:	mov	r0, r4
   1288c:	add	sp, sp, #324	; 0x144
   12890:	pop	{r4, r5, pc}
   12894:	add	r0, sp, #16
   12898:	bl	19518 <argp_parse@@Base+0x1974>
   1289c:	mov	r4, r0
   128a0:	mov	r0, r4
   128a4:	add	sp, sp, #324	; 0x144
   128a8:	pop	{r4, r5, pc}
   128ac:	bl	11328 <__errno_location@plt>
   128b0:	ldr	r0, [r0]
   128b4:	bl	112a4 <strerror@plt>
   128b8:	mov	r2, r0
   128bc:	b	127e4 <__assert_fail@plt+0x1378>
   128c0:	bl	19518 <argp_parse@@Base+0x1974>
   128c4:	mov	r4, r0
   128c8:	mov	r0, r4
   128cc:	add	sp, sp, #324	; 0x144
   128d0:	pop	{r4, r5, pc}
   128d4:	andeq	sp, r2, r8, lsr #12
   128d8:	andeq	fp, r1, r0, asr #12
   128dc:	andeq	fp, r1, r8, asr r6
   128e0:	andeq	sp, r2, r8, asr #13
   128e4:	andeq	fp, r1, r0, ror #12
   128e8:	ldr	r3, [pc, #196]	; 129b4 <__assert_fail@plt+0x1548>
   128ec:	push	{r4, r5, r6, r7, lr}
   128f0:	sub	sp, sp, #20
   128f4:	ldr	r3, [r3]
   128f8:	str	r0, [sp, #12]
   128fc:	tst	r3, #4
   12900:	bne	12980 <__assert_fail@plt+0x1514>
   12904:	mov	r2, #2
   12908:	mov	r1, #4
   1290c:	add	r0, sp, #12
   12910:	bl	11208 <gethostbyaddr@plt>
   12914:	subs	r6, r0, #0
   12918:	ldr	r0, [sp, #12]
   1291c:	beq	12980 <__assert_fail@plt+0x1514>
   12920:	bl	111e4 <inet_ntoa@plt>
   12924:	mov	r7, r0
   12928:	bl	11304 <strlen@plt>
   1292c:	mov	r4, r0
   12930:	ldr	r0, [r6]
   12934:	cmp	r0, #0
   12938:	addeq	r4, r4, #1
   1293c:	beq	1294c <__assert_fail@plt+0x14e0>
   12940:	bl	11304 <strlen@plt>
   12944:	add	r4, r4, #5
   12948:	add	r4, r4, r0
   1294c:	mov	r0, r4
   12950:	bl	18fec <argp_parse@@Base+0x1448>
   12954:	ldr	r3, [r6]
   12958:	cmp	r3, #0
   1295c:	mov	r5, r0
   12960:	beq	12998 <__assert_fail@plt+0x152c>
   12964:	str	r7, [sp]
   12968:	mov	r1, r4
   1296c:	ldr	r2, [pc, #68]	; 129b8 <__assert_fail@plt+0x154c>
   12970:	bl	11334 <snprintf@plt>
   12974:	mov	r0, r5
   12978:	add	sp, sp, #20
   1297c:	pop	{r4, r5, r6, r7, pc}
   12980:	bl	111e4 <inet_ntoa@plt>
   12984:	bl	19518 <argp_parse@@Base+0x1974>
   12988:	mov	r5, r0
   1298c:	mov	r0, r5
   12990:	add	sp, sp, #20
   12994:	pop	{r4, r5, r6, r7, pc}
   12998:	mov	r3, r7
   1299c:	mov	r1, r4
   129a0:	ldr	r2, [pc, #20]	; 129bc <__assert_fail@plt+0x1550>
   129a4:	bl	11334 <snprintf@plt>
   129a8:	mov	r0, r5
   129ac:	add	sp, sp, #20
   129b0:	pop	{r4, r5, r6, r7, pc}
   129b4:	andeq	sp, r2, r8, asr #13
   129b8:	andeq	fp, r1, r0, ror #12
   129bc:	strheq	fp, [r1], -r0
   129c0:	push	{r4, r6, r7, r8, r9, lr}
   129c4:	vpush	{d8}
   129c8:	ldr	r4, [pc, #160]	; 12a70 <__assert_fail@plt+0x1604>
   129cc:	sub	sp, sp, #24
   129d0:	bl	12224 <__assert_fail@plt+0xdb8>
   129d4:	ldr	r3, [r4]
   129d8:	ldr	r0, [r3, #116]	; 0x74
   129dc:	cmp	r0, #0
   129e0:	beq	129f4 <__assert_fail@plt+0x1588>
   129e4:	ldr	r2, [pc, #136]	; 12a74 <__assert_fail@plt+0x1608>
   129e8:	ldr	r2, [r2]
   129ec:	cmp	r2, #7
   129f0:	bhi	12a08 <__assert_fail@plt+0x159c>
   129f4:	clz	r0, r0
   129f8:	lsr	r0, r0, #5
   129fc:	add	sp, sp, #24
   12a00:	vpop	{d8}
   12a04:	pop	{r4, r6, r7, r8, r9, pc}
   12a08:	ldr	r2, [r3, #120]	; 0x78
   12a0c:	ldr	r3, [r3, #68]	; 0x44
   12a10:	add	r0, r0, r2
   12a14:	vldr	d1, [pc, #76]	; 12a68 <__assert_fail@plt+0x15fc>
   12a18:	vmov	s15, r0
   12a1c:	vldr	d5, [r3, #16]
   12a20:	vldr	d6, [r3, #24]
   12a24:	ldrd	r6, [r3]
   12a28:	vcvt.f64.u32	d7, s15
   12a2c:	ldrd	r8, [r3, #8]
   12a30:	vdiv.f64	d8, d5, d7
   12a34:	vdiv.f64	d0, d6, d7
   12a38:	vmls.f64	d0, d8, d8
   12a3c:	bl	12548 <__assert_fail@plt+0x10dc>
   12a40:	mov	r3, r7
   12a44:	vstr	d8, [sp]
   12a48:	strd	r8, [sp, #8]
   12a4c:	mov	r2, r6
   12a50:	ldr	r0, [pc, #32]	; 12a78 <__assert_fail@plt+0x160c>
   12a54:	vstr	d0, [sp, #16]
   12a58:	bl	11148 <printf@plt>
   12a5c:	ldr	r3, [r4]
   12a60:	ldr	r0, [r3, #116]	; 0x74
   12a64:	b	129f4 <__assert_fail@plt+0x1588>
   12a68:	rscsle	sl, r1, #252, 18	; 0x3f0000
   12a6c:	svccc	0x0040624d
   12a70:	ldrdeq	sp, [r2], -r0
   12a74:	andeq	sp, r2, r0, asr #2
   12a78:	andeq	fp, r1, r8, ror #12
   12a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a80:	sub	sp, sp, #12
   12a84:	ldr	r3, [pc, #560]	; 12cbc <__assert_fail@plt+0x1850>
   12a88:	ldrb	r5, [r0, #8]
   12a8c:	mov	r6, r0
   12a90:	ldr	r3, [r3]
   12a94:	and	r5, r5, #15
   12a98:	tst	r3, #32
   12a9c:	lsl	r3, r5, #2
   12aa0:	add	fp, r0, #8
   12aa4:	str	r3, [sp, #4]
   12aa8:	add	r4, r0, #28
   12aac:	bne	12bc4 <__assert_fail@plt+0x1758>
   12ab0:	ldr	r0, [pc, #520]	; 12cc0 <__assert_fail@plt+0x1854>
   12ab4:	bl	11280 <puts@plt>
   12ab8:	ldrb	r1, [r6, #8]
   12abc:	ldrb	r3, [r6, #9]
   12ac0:	ldr	r0, [pc, #508]	; 12cc4 <__assert_fail@plt+0x1858>
   12ac4:	and	r2, r1, #15
   12ac8:	lsr	r1, r1, #4
   12acc:	bl	11148 <printf@plt>
   12ad0:	ldrh	r1, [r6, #10]
   12ad4:	cmp	r1, #8192	; 0x2000
   12ad8:	rev16hi	r1, r1
   12adc:	uxthhi	r1, r1
   12ae0:	ldrh	r2, [r6, #12]
   12ae4:	ldr	r0, [pc, #476]	; 12cc8 <__assert_fail@plt+0x185c>
   12ae8:	rev16	r2, r2
   12aec:	uxth	r2, r2
   12af0:	bl	11148 <printf@plt>
   12af4:	ldrh	r1, [r6, #14]
   12af8:	ldr	r0, [pc, #460]	; 12ccc <__assert_fail@plt+0x1860>
   12afc:	rev16	r1, r1
   12b00:	uxth	r1, r1
   12b04:	lsl	r2, r1, #19
   12b08:	lsr	r1, r1, #13
   12b0c:	lsr	r2, r2, #19
   12b10:	bl	11148 <printf@plt>
   12b14:	ldrh	r3, [r6, #18]
   12b18:	ldrb	r2, [r6, #17]
   12b1c:	ldrb	r1, [r6, #16]
   12b20:	rev16	r3, r3
   12b24:	ldr	r0, [pc, #420]	; 12cd0 <__assert_fail@plt+0x1864>
   12b28:	uxth	r3, r3
   12b2c:	bl	11148 <printf@plt>
   12b30:	ldr	r0, [fp, #12]
   12b34:	bl	111e4 <inet_ntoa@plt>
   12b38:	mov	r1, r0
   12b3c:	ldr	r0, [pc, #400]	; 12cd4 <__assert_fail@plt+0x1868>
   12b40:	bl	11148 <printf@plt>
   12b44:	ldr	r0, [fp, #16]
   12b48:	bl	111e4 <inet_ntoa@plt>
   12b4c:	mov	r1, r0
   12b50:	ldr	r0, [pc, #380]	; 12cd4 <__assert_fail@plt+0x1868>
   12b54:	bl	11148 <printf@plt>
   12b58:	ldr	r3, [sp, #4]
   12b5c:	cmp	r3, #20
   12b60:	ble	12b88 <__assert_fail@plt+0x171c>
   12b64:	ldr	r3, [sp, #4]
   12b68:	ldr	r7, [pc, #360]	; 12cd8 <__assert_fail@plt+0x186c>
   12b6c:	sub	r5, r3, #20
   12b70:	add	r5, r4, r5
   12b74:	ldrb	r1, [r4], #1
   12b78:	mov	r0, r7
   12b7c:	bl	11148 <printf@plt>
   12b80:	cmp	r4, r5
   12b84:	bne	12b74 <__assert_fail@plt+0x1708>
   12b88:	mov	r0, #10
   12b8c:	bl	11364 <putchar@plt>
   12b90:	ldrb	r2, [r6, #8]
   12b94:	ldrb	r1, [r6, #17]
   12b98:	and	r2, r2, #15
   12b9c:	cmp	r1, #6
   12ba0:	lsl	r3, r2, #2
   12ba4:	add	r4, fp, r3
   12ba8:	beq	12c58 <__assert_fail@plt+0x17ec>
   12bac:	cmp	r1, #17
   12bb0:	beq	12c80 <__assert_fail@plt+0x1814>
   12bb4:	cmp	r1, #1
   12bb8:	beq	12c1c <__assert_fail@plt+0x17b0>
   12bbc:	add	sp, sp, #12
   12bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc4:	ldr	r0, [pc, #272]	; 12cdc <__assert_fail@plt+0x1870>
   12bc8:	bl	11148 <printf@plt>
   12bcc:	ldr	r2, [pc, #268]	; 12ce0 <__assert_fail@plt+0x1874>
   12bd0:	ldrb	r1, [r6, #8]
   12bd4:	mov	sl, r2
   12bd8:	mov	r7, fp
   12bdc:	mov	r5, #0
   12be0:	ldr	r8, [pc, #252]	; 12ce4 <__assert_fail@plt+0x1878>
   12be4:	ldr	r9, [pc, #252]	; 12ce8 <__assert_fail@plt+0x187c>
   12be8:	b	12bfc <__assert_fail@plt+0x1790>
   12bec:	ldrb	r1, [r7, #1]!
   12bf0:	tst	r5, #1
   12bf4:	movne	r2, r9
   12bf8:	moveq	r2, sl
   12bfc:	add	r5, r5, #1
   12c00:	mov	r0, r8
   12c04:	bl	11148 <printf@plt>
   12c08:	cmp	r5, #20
   12c0c:	bne	12bec <__assert_fail@plt+0x1780>
   12c10:	mov	r0, #10
   12c14:	bl	11364 <putchar@plt>
   12c18:	b	12ab0 <__assert_fail@plt+0x1644>
   12c1c:	ldrh	r0, [r6, #10]
   12c20:	ldrb	r5, [fp, r2, lsl #2]
   12c24:	ldrb	r2, [r4, #1]
   12c28:	rev16	r0, r0
   12c2c:	mov	r1, r5
   12c30:	uxth	r0, r0
   12c34:	sub	r3, r0, r3
   12c38:	ldr	r0, [pc, #172]	; 12cec <__assert_fail@plt+0x1880>
   12c3c:	bl	11148 <printf@plt>
   12c40:	tst	r5, #247	; 0xf7
   12c44:	beq	12c98 <__assert_fail@plt+0x182c>
   12c48:	mov	r0, #10
   12c4c:	add	sp, sp, #12
   12c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c54:	b	11364 <putchar@plt>
   12c58:	ldrb	ip, [fp, r2, lsl #2]
   12c5c:	ldrb	r1, [r4, #1]
   12c60:	ldrb	r2, [r4, #2]
   12c64:	ldrb	r3, [r4, #3]
   12c68:	ldr	r0, [pc, #128]	; 12cf0 <__assert_fail@plt+0x1884>
   12c6c:	add	r1, r1, ip, lsl #8
   12c70:	add	r2, r3, r2, lsl #8
   12c74:	add	sp, sp, #12
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c7c:	b	11148 <printf@plt>
   12c80:	ldrb	ip, [fp, r2, lsl #2]
   12c84:	ldrb	r1, [r4, #1]
   12c88:	ldrb	r2, [r4, #2]
   12c8c:	ldrb	r3, [r4, #3]
   12c90:	ldr	r0, [pc, #92]	; 12cf4 <__assert_fail@plt+0x1888>
   12c94:	b	12c6c <__assert_fail@plt+0x1800>
   12c98:	ldrb	ip, [r4, #6]
   12c9c:	ldrb	r1, [r4, #4]
   12ca0:	ldrb	r2, [r4, #7]
   12ca4:	ldrb	r3, [r4, #5]
   12ca8:	ldr	r0, [pc, #72]	; 12cf8 <__assert_fail@plt+0x188c>
   12cac:	add	r2, r2, ip, lsl #8
   12cb0:	add	r1, r3, r1, lsl #8
   12cb4:	bl	11148 <printf@plt>
   12cb8:	b	12c48 <__assert_fail@plt+0x17dc>
   12cbc:	andeq	sp, r2, r8, asr #13
   12cc0:			; <UNDEFINED> instruction: 0x0001b6b8
   12cc4:	strdeq	fp, [r1], -r4
   12cc8:	andeq	fp, r1, r4, lsl #14
   12ccc:	andeq	fp, r1, r0, lsl r7
   12cd0:	andeq	fp, r1, ip, lsl r7
   12cd4:	andeq	fp, r1, r0, lsr r7
   12cd8:	andeq	fp, r1, r8, lsr r7
   12cdc:	andeq	fp, r1, r0, lsr #13
   12ce0:	andeq	ip, r1, r0, ror #17
   12ce4:			; <UNDEFINED> instruction: 0x0001b6b0
   12ce8:	andeq	fp, r1, r0, lsl r1
   12cec:	muleq	r1, r8, r7
   12cf0:	andeq	fp, r1, r0, asr #14
   12cf4:	andeq	fp, r1, ip, ror #14
   12cf8:			; <UNDEFINED> instruction: 0x0001b7b8
   12cfc:	push	{r4, r5, r6, lr}
   12d00:	mov	r4, r0
   12d04:	ldr	r0, [r0, #4]
   12d08:	mov	r5, r1
   12d0c:	bl	111e4 <inet_ntoa@plt>
   12d10:	mov	r1, r0
   12d14:	ldr	r0, [pc, #16]	; 12d2c <__assert_fail@plt+0x18c0>
   12d18:	bl	11148 <printf@plt>
   12d1c:	mov	r1, r5
   12d20:	mov	r0, r4
   12d24:	pop	{r4, r5, r6, lr}
   12d28:	b	12a7c <__assert_fail@plt+0x1610>
   12d2c:	ldrdeq	fp, [r1], -r0
   12d30:	ldr	r3, [pc, #108]	; 12da4 <__assert_fail@plt+0x1938>
   12d34:	push	{r4, lr}
   12d38:	mov	r4, r0
   12d3c:	ldrb	ip, [r0]
   12d40:	ldrb	r2, [r0, #1]
   12d44:	add	lr, r3, #240	; 0xf0
   12d48:	b	12d58 <__assert_fail@plt+0x18ec>
   12d4c:	add	r3, r3, #12
   12d50:	cmp	r3, lr
   12d54:	beq	12d7c <__assert_fail@plt+0x1910>
   12d58:	ldr	r0, [r3]
   12d5c:	cmp	ip, r0
   12d60:	bne	12d4c <__assert_fail@plt+0x18e0>
   12d64:	ldr	r0, [r3, #4]
   12d68:	cmp	r2, r0
   12d6c:	bne	12d4c <__assert_fail@plt+0x18e0>
   12d70:	ldr	r0, [r3, #8]
   12d74:	bl	11280 <puts@plt>
   12d78:	b	12d84 <__assert_fail@plt+0x1918>
   12d7c:	ldr	r0, [pc, #36]	; 12da8 <__assert_fail@plt+0x193c>
   12d80:	bl	11148 <printf@plt>
   12d84:	ldr	r3, [pc, #32]	; 12dac <__assert_fail@plt+0x1940>
   12d88:	ldr	r3, [r3]
   12d8c:	tst	r3, #32
   12d90:	popeq	{r4, pc}
   12d94:	mov	r0, r4
   12d98:	mov	r1, #0
   12d9c:	pop	{r4, lr}
   12da0:	b	12a7c <__assert_fail@plt+0x1610>
   12da4:	andeq	sp, r2, r4, lsl #8
   12da8:	strdeq	fp, [r1], -r4
   12dac:	andeq	sp, r2, r8, asr #13
   12db0:	push	{r4, r5, r6, r7, r8, r9, lr}
   12db4:	mov	r7, r0
   12db8:	ldr	r5, [pc, #556]	; 12fec <__assert_fail@plt+0x1b80>
   12dbc:	sub	sp, sp, #84	; 0x54
   12dc0:	ldr	r3, [r5]
   12dc4:	and	r3, r3, #3
   12dc8:	cmp	r3, #3
   12dcc:	beq	12fac <__assert_fail@plt+0x1b40>
   12dd0:	ldr	r4, [pc, #536]	; 12ff0 <__assert_fail@plt+0x1b84>
   12dd4:	mov	r2, #32
   12dd8:	mov	r1, #0
   12ddc:	add	r0, sp, #8
   12de0:	bl	11358 <memset@plt>
   12de4:	ldr	r6, [pc, #520]	; 12ff4 <__assert_fail@plt+0x1b88>
   12de8:	ldr	r3, [pc, #520]	; 12ff8 <__assert_fail@plt+0x1b8c>
   12dec:	ldr	r2, [pc, #520]	; 12ffc <__assert_fail@plt+0x1b90>
   12df0:	ldr	r0, [r4]
   12df4:	mov	r1, #8
   12df8:	strd	r2, [sp, #8]
   12dfc:	bl	13c34 <__assert_fail@plt+0x27c8>
   12e00:	ldr	r0, [r4]
   12e04:	ldr	r1, [r6]
   12e08:	bl	13ff8 <__assert_fail@plt+0x2b8c>
   12e0c:	add	r2, sp, #8
   12e10:	ldr	r0, [r4]
   12e14:	ldr	r1, [pc, #484]	; 13000 <__assert_fail@plt+0x1b94>
   12e18:	bl	13fec <__assert_fail@plt+0x2b80>
   12e1c:	mov	r1, r7
   12e20:	ldr	r0, [r4]
   12e24:	bl	14000 <__assert_fail@plt+0x2b94>
   12e28:	cmp	r0, #0
   12e2c:	bne	12f90 <__assert_fail@plt+0x1b24>
   12e30:	ldr	r3, [r5]
   12e34:	tst	r3, #16
   12e38:	bne	12f40 <__assert_fail@plt+0x1ad4>
   12e3c:	tst	r3, #64	; 0x40
   12e40:	bne	12eb8 <__assert_fail@plt+0x1a4c>
   12e44:	ldr	r3, [r4]
   12e48:	ldr	r0, [r3, #28]
   12e4c:	ldr	r7, [r3, #52]	; 0x34
   12e50:	bl	111e4 <inet_ntoa@plt>
   12e54:	ldr	r3, [r6]
   12e58:	mov	r1, r7
   12e5c:	mov	r2, r0
   12e60:	ldr	r0, [pc, #412]	; 13004 <__assert_fail@plt+0x1b98>
   12e64:	bl	11148 <printf@plt>
   12e68:	ldr	r3, [r5]
   12e6c:	tst	r3, #32
   12e70:	beq	12e88 <__assert_fail@plt+0x1a1c>
   12e74:	ldr	r3, [r4]
   12e78:	ldr	r0, [pc, #392]	; 13008 <__assert_fail@plt+0x1b9c>
   12e7c:	ldr	r2, [r3, #60]	; 0x3c
   12e80:	mov	r1, r2
   12e84:	bl	11148 <printf@plt>
   12e88:	mov	r0, #10
   12e8c:	bl	11364 <putchar@plt>
   12e90:	ldr	r1, [pc, #372]	; 1300c <__assert_fail@plt+0x1ba0>
   12e94:	ldr	r0, [r4]
   12e98:	bl	11eb4 <__assert_fail@plt+0xa48>
   12e9c:	ldr	r3, [r4]
   12ea0:	mov	r5, r0
   12ea4:	ldr	r0, [r3, #52]	; 0x34
   12ea8:	bl	18a3c <argp_parse@@Base+0xe98>
   12eac:	mov	r0, r5
   12eb0:	add	sp, sp, #84	; 0x54
   12eb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12eb8:	ldr	r3, [pc, #336]	; 13010 <__assert_fail@plt+0x1ba4>
   12ebc:	ldr	r1, [r3]
   12ec0:	tst	r1, #4
   12ec4:	bne	12fa4 <__assert_fail@plt+0x1b38>
   12ec8:	ands	r8, r1, #2
   12ecc:	beq	12fc0 <__assert_fail@plt+0x1b54>
   12ed0:	mov	r8, #1
   12ed4:	add	r9, sp, #40	; 0x28
   12ed8:	mov	r2, #40	; 0x28
   12edc:	mov	r0, r9
   12ee0:	mov	r1, #0
   12ee4:	bl	11358 <memset@plt>
   12ee8:	mov	r3, #68	; 0x44
   12eec:	mov	r2, #36	; 0x24
   12ef0:	strb	r3, [sp, #40]	; 0x28
   12ef4:	strb	r2, [sp, #41]	; 0x29
   12ef8:	ldr	r3, [r4]
   12efc:	mov	r1, #5
   12f00:	strb	r1, [sp, #42]	; 0x2a
   12f04:	strb	r8, [sp, #43]	; 0x2b
   12f08:	mov	r1, #0
   12f0c:	ldr	r0, [r3]
   12f10:	str	r2, [sp]
   12f14:	mov	r3, r9
   12f18:	mov	r2, #4
   12f1c:	bl	1113c <setsockopt@plt>
   12f20:	cmp	r0, #0
   12f24:	bge	12e44 <__assert_fail@plt+0x19d8>
   12f28:	bl	11328 <__errno_location@plt>
   12f2c:	ldr	r2, [pc, #224]	; 13014 <__assert_fail@plt+0x1ba8>
   12f30:	ldr	r1, [r0]
   12f34:	mov	r0, #1
   12f38:	bl	11268 <error@plt>
   12f3c:	b	12e44 <__assert_fail@plt+0x19d8>
   12f40:	mov	r7, #40	; 0x28
   12f44:	mov	r2, r7
   12f48:	mov	r1, #0
   12f4c:	add	r0, sp, r7
   12f50:	bl	11358 <memset@plt>
   12f54:	ldr	r3, [r4]
   12f58:	mov	r0, #7
   12f5c:	mov	r1, #39	; 0x27
   12f60:	mov	r2, #4
   12f64:	strb	r1, [sp, #41]	; 0x29
   12f68:	strb	r0, [sp, #40]	; 0x28
   12f6c:	strb	r2, [sp, #42]	; 0x2a
   12f70:	mov	r1, #0
   12f74:	ldr	r0, [r3]
   12f78:	add	r3, sp, r7
   12f7c:	str	r7, [sp]
   12f80:	bl	1113c <setsockopt@plt>
   12f84:	cmp	r0, #0
   12f88:	bge	12e44 <__assert_fail@plt+0x19d8>
   12f8c:	b	12f28 <__assert_fail@plt+0x1abc>
   12f90:	ldr	r2, [pc, #128]	; 13018 <__assert_fail@plt+0x1bac>
   12f94:	mov	r1, #0
   12f98:	mov	r0, #1
   12f9c:	bl	11268 <error@plt>
   12fa0:	b	12e30 <__assert_fail@plt+0x19c4>
   12fa4:	mov	r8, #3
   12fa8:	b	12ed4 <__assert_fail@plt+0x1a68>
   12fac:	ldr	r2, [pc, #104]	; 1301c <__assert_fail@plt+0x1bb0>
   12fb0:	mov	r1, #0
   12fb4:	mov	r0, #1
   12fb8:	bl	11268 <error@plt>
   12fbc:	b	12dd0 <__assert_fail@plt+0x1964>
   12fc0:	mov	r7, #40	; 0x28
   12fc4:	add	r9, sp, #40	; 0x28
   12fc8:	mov	r2, r7
   12fcc:	mov	r0, r9
   12fd0:	mov	r1, r8
   12fd4:	bl	11358 <memset@plt>
   12fd8:	mov	r3, #68	; 0x44
   12fdc:	strb	r7, [sp, #41]	; 0x29
   12fe0:	mov	r2, r7
   12fe4:	strb	r3, [sp, #40]	; 0x28
   12fe8:	b	12ef8 <__assert_fail@plt+0x1a8c>
   12fec:	andeq	sp, r2, r8, asr #13
   12ff0:	ldrdeq	sp, [r2], -r0
   12ff4:	andeq	sp, r2, r0, asr #2
   12ff8:	bicmi	ip, sp, r4, ror #26
   12ffc:			; <UNDEFINED> instruction: 0xff800000
   13000:	ldrdeq	r3, [r1], -r4
   13004:	andeq	fp, r1, r8, asr #16
   13008:	andeq	fp, r1, r8, ror #16
   1300c:	andeq	r2, r1, r0, asr #19
   13010:	ldrdeq	sp, [r2], -r4
   13014:	andeq	fp, r1, ip, lsr r8
   13018:	andeq	fp, r1, ip, lsr #16
   1301c:	andeq	fp, r1, ip, lsl #16
   13020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13024:	vpush	{d8}
   13028:	mov	r6, r0
   1302c:	mov	r8, r1
   13030:	mov	r1, #0
   13034:	sub	sp, sp, #44	; 0x2c
   13038:	add	r0, sp, #16
   1303c:	mov	r7, r3
   13040:	ldr	r5, [sp, #96]	; 0x60
   13044:	bl	1125c <gettimeofday@plt>
   13048:	ldr	r3, [sp, #88]	; 0x58
   1304c:	ldrb	r4, [r3]
   13050:	and	r4, r4, #15
   13054:	lsl	r4, r4, #2
   13058:	sub	r5, r5, r4
   1305c:	sub	r3, r5, #8
   13060:	cmp	r3, #7
   13064:	bhi	13350 <__assert_fail@plt+0x1ee4>
   13068:	vldr	d8, [pc, #928]	; 13410 <__assert_fail@plt+0x1fa4>
   1306c:	mov	r8, #0
   13070:	ldr	r3, [pc, #1000]	; 13460 <__assert_fail@plt+0x1ff4>
   13074:	ldr	r3, [r3]
   13078:	tst	r3, #8
   1307c:	bne	13124 <__assert_fail@plt+0x1cb8>
   13080:	tst	r3, #1
   13084:	bne	13134 <__assert_fail@plt+0x1cc8>
   13088:	ldr	r0, [r7, #4]
   1308c:	bl	111e4 <inet_ntoa@plt>
   13090:	ldr	r3, [sp, #92]	; 0x5c
   13094:	mov	r1, r5
   13098:	ldrh	r3, [r3, #6]
   1309c:	rev16	r3, r3
   130a0:	uxth	r3, r3
   130a4:	mov	r2, r0
   130a8:	ldr	r0, [pc, #880]	; 13420 <__assert_fail@plt+0x1fb4>
   130ac:	bl	11148 <printf@plt>
   130b0:	ldr	r3, [sp, #88]	; 0x58
   130b4:	ldr	r0, [pc, #872]	; 13424 <__assert_fail@plt+0x1fb8>
   130b8:	ldrb	r1, [r3, #8]
   130bc:	bl	11148 <printf@plt>
   130c0:	cmp	r8, #0
   130c4:	bne	135f4 <__assert_fail@plt+0x2188>
   130c8:	cmp	r6, #0
   130cc:	bne	135e8 <__assert_fail@plt+0x217c>
   130d0:	cmp	r4, #20
   130d4:	ldr	r3, [sp, #88]	; 0x58
   130d8:	ldrgt	fp, [pc, #840]	; 13428 <__assert_fail@plt+0x1fbc>
   130dc:	add	sl, r3, #20
   130e0:	ble	1311c <__assert_fail@plt+0x1cb0>
   130e4:	ldrb	r1, [sl]
   130e8:	cmp	r1, #7
   130ec:	beq	13184 <__assert_fail@plt+0x1d18>
   130f0:	bhi	13154 <__assert_fail@plt+0x1ce8>
   130f4:	cmp	r1, #0
   130f8:	beq	1311c <__assert_fail@plt+0x1cb0>
   130fc:	cmp	r1, #1
   13100:	bne	13274 <__assert_fail@plt+0x1e08>
   13104:	ldr	r0, [pc, #800]	; 1342c <__assert_fail@plt+0x1fc0>
   13108:	sub	r4, r4, #1
   1310c:	bl	11148 <printf@plt>
   13110:	cmp	r4, #20
   13114:	add	sl, sl, #1
   13118:	bgt	130e4 <__assert_fail@plt+0x1c78>
   1311c:	mov	r0, #10
   13120:	bl	11364 <putchar@plt>
   13124:	mov	r0, #0
   13128:	add	sp, sp, #44	; 0x2c
   1312c:	vpop	{d8}
   13130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13134:	ldr	r3, [pc, #748]	; 13428 <__assert_fail@plt+0x1fbc>
   13138:	mov	r0, #8
   1313c:	ldr	r1, [r3]
   13140:	bl	113f4 <putc@plt>
   13144:	mov	r0, #0
   13148:	add	sp, sp, #44	; 0x2c
   1314c:	vpop	{d8}
   13150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13154:	cmp	r1, #131	; 0x83
   13158:	beq	13568 <__assert_fail@plt+0x20fc>
   1315c:	cmp	r1, #137	; 0x89
   13160:	beq	13284 <__assert_fail@plt+0x1e18>
   13164:	cmp	r1, #68	; 0x44
   13168:	bne	13274 <__assert_fail@plt+0x1e08>
   1316c:	ldrb	r9, [sl, #1]
   13170:	cmp	r9, #8
   13174:	bgt	133cc <__assert_fail@plt+0x1f60>
   13178:	add	sl, sl, #2
   1317c:	sub	r4, r4, #3
   13180:	b	13110 <__assert_fail@plt+0x1ca4>
   13184:	ldrb	r7, [sl, #1]
   13188:	ldrb	r3, [sl, #2]
   1318c:	sub	r6, r4, #2
   13190:	add	sl, sl, #2
   13194:	cmp	r7, r3
   13198:	movge	r7, r3
   1319c:	sub	r5, r7, #4
   131a0:	cmp	r5, #0
   131a4:	ble	1317c <__assert_fail@plt+0x1d10>
   131a8:	ldr	r3, [pc, #640]	; 13430 <__assert_fail@plt+0x1fc4>
   131ac:	ldr	r3, [r3]
   131b0:	cmp	r5, r3
   131b4:	beq	13588 <__assert_fail@plt+0x211c>
   131b8:	cmp	r5, #39	; 0x27
   131bc:	ble	13570 <__assert_fail@plt+0x2104>
   131c0:	ldr	r2, [pc, #616]	; 13430 <__assert_fail@plt+0x1fc4>
   131c4:	mov	r3, #0
   131c8:	str	r3, [r2]
   131cc:	sub	r7, r7, #5
   131d0:	ldr	r0, [pc, #604]	; 13434 <__assert_fail@plt+0x1fc8>
   131d4:	bl	11148 <printf@plt>
   131d8:	bic	r3, r7, #3
   131dc:	sub	r7, r4, #6
   131e0:	sub	r7, r7, r3
   131e4:	sub	r4, r4, #42	; 0x2a
   131e8:	mov	r8, #10
   131ec:	b	13218 <__assert_fail@plt+0x1dac>
   131f0:	bl	11148 <printf@plt>
   131f4:	sub	r3, r6, #4
   131f8:	cmp	r3, r7
   131fc:	mov	r0, r8
   13200:	beq	1326c <__assert_fail@plt+0x1e00>
   13204:	cmp	r3, r4
   13208:	beq	13340 <__assert_fail@plt+0x1ed4>
   1320c:	ldr	r1, [fp]
   13210:	mov	r6, r3
   13214:	bl	113f4 <putc@plt>
   13218:	ldrb	r2, [sl, #1]
   1321c:	ldrb	r1, [sl, #2]
   13220:	ldrb	r3, [sl, #3]
   13224:	ldr	r0, [pc, #524]	; 13438 <__assert_fail@plt+0x1fcc>
   13228:	add	r1, r1, r2, lsl #8
   1322c:	ldrb	r2, [sl, #4]!
   13230:	add	r3, r3, r1, lsl #8
   13234:	adds	r3, r2, r3, lsl #8
   13238:	beq	131f0 <__assert_fail@plt+0x1d84>
   1323c:	rev	r0, r3
   13240:	bl	128e8 <__assert_fail@plt+0x147c>
   13244:	mov	r1, r0
   13248:	mov	r5, r0
   1324c:	ldr	r0, [pc, #512]	; 13454 <__assert_fail@plt+0x1fe8>
   13250:	bl	11148 <printf@plt>
   13254:	mov	r0, r5
   13258:	bl	18a3c <argp_parse@@Base+0xe98>
   1325c:	sub	r3, r6, #4
   13260:	cmp	r3, r7
   13264:	mov	r0, r8
   13268:	bne	13204 <__assert_fail@plt+0x1d98>
   1326c:	sub	r4, r6, #5
   13270:	b	13110 <__assert_fail@plt+0x1ca4>
   13274:	ldr	r0, [pc, #448]	; 1343c <__assert_fail@plt+0x1fd0>
   13278:	bl	11148 <printf@plt>
   1327c:	sub	r4, r4, #1
   13280:	b	13110 <__assert_fail@plt+0x1ca4>
   13284:	mov	r1, #83	; 0x53
   13288:	ldr	r0, [pc, #432]	; 13440 <__assert_fail@plt+0x1fd4>
   1328c:	bl	11148 <printf@plt>
   13290:	ldrb	r6, [sl, #1]
   13294:	add	sl, sl, #2
   13298:	cmp	r6, #4
   1329c:	mov	r5, r6
   132a0:	ble	1317c <__assert_fail@plt+0x1d10>
   132a4:	mov	r8, sl
   132a8:	mov	r7, #10
   132ac:	b	132cc <__assert_fail@plt+0x1e60>
   132b0:	sub	r5, r5, #4
   132b4:	bl	11148 <printf@plt>
   132b8:	cmp	r5, #4
   132bc:	mov	r0, r7
   132c0:	ble	13320 <__assert_fail@plt+0x1eb4>
   132c4:	ldr	r1, [fp]
   132c8:	bl	113f4 <putc@plt>
   132cc:	ldrb	r2, [r8, #1]
   132d0:	ldrb	r1, [r8, #2]
   132d4:	ldrb	r3, [r8, #3]
   132d8:	ldr	r0, [pc, #344]	; 13438 <__assert_fail@plt+0x1fcc>
   132dc:	add	r1, r1, r2, lsl #8
   132e0:	ldrb	r2, [r8, #4]!
   132e4:	add	r3, r3, r1, lsl #8
   132e8:	adds	r3, r2, r3, lsl #8
   132ec:	beq	132b0 <__assert_fail@plt+0x1e44>
   132f0:	rev	r0, r3
   132f4:	bl	128e8 <__assert_fail@plt+0x147c>
   132f8:	sub	r5, r5, #4
   132fc:	mov	r1, r0
   13300:	mov	r9, r0
   13304:	ldr	r0, [pc, #328]	; 13454 <__assert_fail@plt+0x1fe8>
   13308:	bl	11148 <printf@plt>
   1330c:	mov	r0, r9
   13310:	bl	18a3c <argp_parse@@Base+0xe98>
   13314:	cmp	r5, #4
   13318:	mov	r0, r7
   1331c:	bgt	132c4 <__assert_fail@plt+0x1e58>
   13320:	sub	r6, r6, #5
   13324:	bic	r3, r6, #3
   13328:	mov	r6, r3
   1332c:	sub	r4, r4, r6
   13330:	add	r3, r3, #4
   13334:	add	sl, sl, r3
   13338:	sub	r4, r4, #7
   1333c:	b	13110 <__assert_fail@plt+0x1ca4>
   13340:	ldr	r0, [pc, #252]	; 13444 <__assert_fail@plt+0x1fd8>
   13344:	sub	r4, r6, #5
   13348:	bl	11148 <printf@plt>
   1334c:	b	13110 <__assert_fail@plt+0x1ca4>
   13350:	ldr	r2, [sp, #92]	; 0x5c
   13354:	add	r3, sp, #24
   13358:	ldr	r0, [r2, #8]!
   1335c:	ldr	r1, [r2, #4]
   13360:	stmia	r3!, {r0, r1}
   13364:	add	r1, sp, #24
   13368:	add	r0, sp, #16
   1336c:	bl	12500 <__assert_fail@plt+0x1094>
   13370:	vldr	s15, [sp, #20]
   13374:	vldr	d2, [pc, #156]	; 13418 <__assert_fail@plt+0x1fac>
   13378:	vldr	d5, [r8]
   1337c:	vldr	d6, [r8, #24]
   13380:	vcvt.f64.s32	d3, s15
   13384:	vldr	s15, [sp, #16]
   13388:	vcvt.f64.s32	d4, s15
   1338c:	vldr	d7, [r8, #16]
   13390:	vdiv.f64	d8, d3, d2
   13394:	vmla.f64	d8, d4, d2
   13398:	vadd.f64	d7, d7, d8
   1339c:	vcmpe.f64	d8, d5
   133a0:	vmla.f64	d6, d8, d8
   133a4:	vmrs	APSR_nzcv, fpscr
   133a8:	vstr	d7, [r8, #16]
   133ac:	vldr	d7, [r8, #8]
   133b0:	vstrmi	d8, [r8]
   133b4:	vstr	d6, [r8, #24]
   133b8:	vcmpe.f64	d8, d7
   133bc:	vmrs	APSR_nzcv, fpscr
   133c0:	vstrgt	d8, [r8, #8]
   133c4:	mov	r8, #1
   133c8:	b	13070 <__assert_fail@plt+0x1c04>
   133cc:	ldrb	r3, [sl, #3]
   133d0:	ldr	r0, [pc, #112]	; 13448 <__assert_fail@plt+0x1fdc>
   133d4:	ldrb	r5, [sl, #2]
   133d8:	mov	r6, r3
   133dc:	str	r3, [sp, #12]
   133e0:	bl	11148 <printf@plt>
   133e4:	cmp	r9, r5
   133e8:	movlt	r3, r9
   133ec:	movge	r3, r5
   133f0:	sub	r4, r4, #8
   133f4:	add	r7, sl, #8
   133f8:	add	r9, sl, #4
   133fc:	str	r3, [sp, #8]
   13400:	and	r3, r6, #15
   13404:	str	r3, [sp, #4]
   13408:	mov	r6, #9
   1340c:	b	13498 <__assert_fail@plt+0x202c>
	...
   1341c:	addmi	r4, pc, r0
   13420:	andeq	fp, r1, ip, ror r8
   13424:	muleq	r1, ip, r8
   13428:	andeq	sp, r2, ip, lsr #12
   1342c:	andeq	fp, r1, r8, lsr r9
   13430:	andeq	sp, r2, r8, asr r6
   13434:	andeq	fp, r1, r8, ror #17
   13438:	andeq	fp, r1, r8, asr #17
   1343c:	andeq	fp, r1, r0, asr #18
   13440:			; <UNDEFINED> instruction: 0x0001b8bc
   13444:	strdeq	fp, [r1], -r0
   13448:	andeq	fp, r1, r4, lsl #18
   1344c:	andeq	fp, r1, ip, lsl #18
   13450:	andeq	fp, r1, r4, lsl r9
   13454:	ldrdeq	fp, [r1], -r4
   13458:	andeq	fp, r1, r0, lsr #18
   1345c:	andeq	sp, r2, ip, asr r6
   13460:	andeq	sp, r2, r8, asr #13
   13464:	ldrdeq	fp, [r1], -r8
   13468:			; <UNDEFINED> instruction: 0x0001b8b4
   1346c:	andeq	fp, r1, r4, lsr #17
   13470:	ldr	r1, [fp]
   13474:	mov	r0, #10
   13478:	bl	113f4 <putc@plt>
   1347c:	ldr	r3, [sp, #8]
   13480:	sub	r4, r4, #4
   13484:	cmp	r8, r3
   13488:	add	r7, r7, #4
   1348c:	add	r9, r9, #4
   13490:	add	r6, r6, #4
   13494:	bge	13540 <__assert_fail@plt+0x20d4>
   13498:	ldr	r3, [sp, #4]
   1349c:	mov	r8, r6
   134a0:	cmp	r3, #0
   134a4:	mov	r5, r4
   134a8:	mov	sl, r7
   134ac:	mov	r1, #16
   134b0:	add	r0, sp, #24
   134b4:	sub	r2, r6, #4
   134b8:	beq	134dc <__assert_fail@plt+0x2070>
   134bc:	cmp	r2, #0
   134c0:	sublt	r2, r6, #1
   134c4:	lsr	ip, r2, #31
   134c8:	add	r2, ip, r2, asr #2
   134cc:	and	r2, r2, #1
   134d0:	sub	r2, r2, ip
   134d4:	cmp	r2, #1
   134d8:	beq	13518 <__assert_fail@plt+0x20ac>
   134dc:	ldr	r2, [r9]
   134e0:	rev	r2, r2
   134e4:	bl	125c4 <__assert_fail@plt+0x1158>
   134e8:	mov	r1, r0
   134ec:	ldr	r0, [pc, #-168]	; 1344c <__assert_fail@plt+0x1fe0>
   134f0:	bl	11148 <printf@plt>
   134f4:	ldr	r3, [pc, #-156]	; 13460 <__assert_fail@plt+0x1ff4>
   134f8:	ldr	r2, [r3]
   134fc:	tst	r2, #32
   13500:	beq	13470 <__assert_fail@plt+0x2004>
   13504:	ldr	r1, [r9]
   13508:	ldr	r0, [pc, #-192]	; 13450 <__assert_fail@plt+0x1fe4>
   1350c:	rev	r1, r1
   13510:	bl	11148 <printf@plt>
   13514:	b	13470 <__assert_fail@plt+0x2004>
   13518:	ldr	r0, [r9]
   1351c:	bl	128e8 <__assert_fail@plt+0x147c>
   13520:	mov	r5, r0
   13524:	mov	r1, r0
   13528:	ldr	r0, [pc, #-220]	; 13454 <__assert_fail@plt+0x1fe8>
   1352c:	bl	11148 <printf@plt>
   13530:	mov	r0, r5
   13534:	bl	18a3c <argp_parse@@Base+0xe98>
   13538:	mov	r5, r4
   1353c:	b	1347c <__assert_fail@plt+0x2010>
   13540:	ldr	r3, [sp, #12]
   13544:	tst	r3, #240	; 0xf0
   13548:	subeq	r4, r5, #1
   1354c:	beq	13110 <__assert_fail@plt+0x1ca4>
   13550:	ldr	r3, [sp, #12]
   13554:	ldr	r0, [pc, #-260]	; 13458 <__assert_fail@plt+0x1fec>
   13558:	sub	r4, r5, #1
   1355c:	lsr	r1, r3, #4
   13560:	bl	11148 <printf@plt>
   13564:	b	13110 <__assert_fail@plt+0x1ca4>
   13568:	mov	r1, #76	; 0x4c
   1356c:	b	13288 <__assert_fail@plt+0x1e1c>
   13570:	ldr	r0, [pc, #-284]	; 1345c <__assert_fail@plt+0x1ff0>
   13574:	mov	r2, r5
   13578:	mov	r1, sl
   1357c:	str	r5, [r0, #-4]
   13580:	bl	11178 <memmove@plt>
   13584:	b	131cc <__assert_fail@plt+0x1d60>
   13588:	ldr	r3, [sp, #88]	; 0x58
   1358c:	add	r3, r3, #22
   13590:	cmp	sl, r3
   13594:	bne	131b8 <__assert_fail@plt+0x1d4c>
   13598:	mov	r2, r5
   1359c:	ldr	r1, [pc, #-328]	; 1345c <__assert_fail@plt+0x1ff0>
   135a0:	mov	r0, sl
   135a4:	bl	111d8 <memcmp@plt>
   135a8:	cmp	r0, #0
   135ac:	bne	131b8 <__assert_fail@plt+0x1d4c>
   135b0:	ldr	r3, [pc, #-344]	; 13460 <__assert_fail@plt+0x1ff4>
   135b4:	ldr	r3, [r3]
   135b8:	tst	r3, #1
   135bc:	bne	131b8 <__assert_fail@plt+0x1d4c>
   135c0:	ldr	r0, [pc, #-356]	; 13464 <__assert_fail@plt+0x1ff8>
   135c4:	bl	11148 <printf@plt>
   135c8:	subs	r3, r7, #1
   135cc:	addmi	r7, r7, #2
   135d0:	movpl	r7, r3
   135d4:	bic	r3, r7, #3
   135d8:	sub	r4, r6, r3
   135dc:	sub	r4, r4, #1
   135e0:	add	sl, sl, r3
   135e4:	b	13110 <__assert_fail@plt+0x1ca4>
   135e8:	ldr	r0, [pc, #-392]	; 13468 <__assert_fail@plt+0x1ffc>
   135ec:	bl	11148 <printf@plt>
   135f0:	b	130d0 <__assert_fail@plt+0x1c64>
   135f4:	vmov	r2, r3, d8
   135f8:	ldr	r0, [pc, #-404]	; 1346c <__assert_fail@plt+0x2000>
   135fc:	bl	11148 <printf@plt>
   13600:	b	130c8 <__assert_fail@plt+0x1c5c>
   13604:	ldr	ip, [pc, #180]	; 136c0 <__assert_fail@plt+0x2254>
   13608:	push	{r4, r5, r6, r7, r8, lr}
   1360c:	ldr	ip, [ip]
   13610:	tst	ip, #32
   13614:	bne	13630 <__assert_fail@plt+0x21c4>
   13618:	ldr	ip, [pc, #164]	; 136c4 <__assert_fail@plt+0x2258>
   1361c:	ldr	lr, [r2, #24]
   13620:	ldr	ip, [ip]
   13624:	ldr	ip, [ip, #28]
   13628:	cmp	lr, ip
   1362c:	popne	{r4, r5, r6, r7, r8, pc}
   13630:	ldrb	r6, [r1]
   13634:	mov	r1, #16
   13638:	mov	r4, r3
   1363c:	mov	r5, r2
   13640:	bl	127a0 <__assert_fail@plt+0x1334>
   13644:	and	r6, r6, #15
   13648:	sub	r1, r4, r6, lsl #2
   1364c:	ldr	r4, [pc, #116]	; 136c8 <__assert_fail@plt+0x225c>
   13650:	mov	r2, r0
   13654:	mov	r7, r0
   13658:	ldr	r0, [pc, #108]	; 136cc <__assert_fail@plt+0x2260>
   1365c:	bl	11148 <printf@plt>
   13660:	mov	r0, r7
   13664:	bl	18a3c <argp_parse@@Base+0xe98>
   13668:	ldrb	r1, [r5]
   1366c:	add	r0, r4, #240	; 0xf0
   13670:	ldr	r3, [r4]
   13674:	cmp	r3, r1
   13678:	beq	13694 <__assert_fail@plt+0x2228>
   1367c:	add	r4, r4, #16
   13680:	cmp	r4, r0
   13684:	bne	13670 <__assert_fail@plt+0x2204>
   13688:	ldr	r0, [pc, #64]	; 136d0 <__assert_fail@plt+0x2264>
   1368c:	pop	{r4, r5, r6, r7, r8, lr}
   13690:	b	11148 <printf@plt>
   13694:	ldr	r0, [r4, #4]
   13698:	cmp	r0, #0
   1369c:	beq	136a4 <__assert_fail@plt+0x2238>
   136a0:	bl	11280 <puts@plt>
   136a4:	ldr	r3, [r4, #8]
   136a8:	cmp	r3, #0
   136ac:	popeq	{r4, r5, r6, r7, r8, pc}
   136b0:	ldr	r1, [r4, #12]
   136b4:	mov	r0, r5
   136b8:	pop	{r4, r5, r6, r7, r8, lr}
   136bc:	bx	r3
   136c0:	andeq	sp, r2, r8, asr #13
   136c4:	ldrdeq	sp, [r2], -r0
   136c8:	strdeq	sp, [r2], -r4
   136cc:	andeq	fp, r1, r4, asr r9
   136d0:	andeq	fp, r1, r8, ror #18
   136d4:	subs	ip, r0, #0
   136d8:	blt	13738 <__assert_fail@plt+0x22cc>
   136dc:	cmp	ip, #1
   136e0:	push	{lr}		; (str lr, [sp, #-4]!)
   136e4:	sub	sp, sp, #20
   136e8:	ble	13710 <__assert_fail@plt+0x22a4>
   136ec:	cmp	ip, #2
   136f0:	bne	13704 <__assert_fail@plt+0x2298>
   136f4:	add	r1, sp, #24
   136f8:	mov	r0, r3
   136fc:	ldm	r1, {r1, r2, r3}
   13700:	bl	13604 <__assert_fail@plt+0x2198>
   13704:	mov	r0, #0
   13708:	add	sp, sp, #20
   1370c:	pop	{pc}		; (ldr pc, [sp], #4)
   13710:	ldr	ip, [sp, #32]
   13714:	str	ip, [sp, #8]
   13718:	ldr	ip, [sp, #28]
   1371c:	str	ip, [sp, #4]
   13720:	ldr	ip, [sp, #24]
   13724:	str	ip, [sp]
   13728:	bl	13020 <__assert_fail@plt+0x1bb4>
   1372c:	mov	r0, #0
   13730:	add	sp, sp, #20
   13734:	pop	{pc}		; (ldr pc, [sp], #4)
   13738:	mov	r0, #0
   1373c:	bx	lr
   13740:	mov	r0, #0
   13744:	bx	lr
   13748:	push	{r4, lr}
   1374c:	subs	r4, r0, #0
   13750:	blt	13774 <__assert_fail@plt+0x2308>
   13754:	cmp	r4, #1
   13758:	ble	1377c <__assert_fail@plt+0x2310>
   1375c:	cmp	r4, #2
   13760:	bne	13774 <__assert_fail@plt+0x2308>
   13764:	add	r1, sp, #8
   13768:	mov	r0, r3
   1376c:	ldm	r1, {r1, r2, r3}
   13770:	bl	13604 <__assert_fail@plt+0x2198>
   13774:	mov	r0, #0
   13778:	pop	{r4, pc}
   1377c:	ldr	r0, [r3, #4]
   13780:	bl	111e4 <inet_ntoa@plt>
   13784:	ldr	r3, [sp, #12]
   13788:	ldr	r1, [sp, #16]
   1378c:	ldrh	r3, [r3, #6]
   13790:	rev16	r3, r3
   13794:	uxth	r3, r3
   13798:	mov	r2, r0
   1379c:	ldr	r0, [pc, #64]	; 137e4 <__assert_fail@plt+0x2378>
   137a0:	bl	11148 <printf@plt>
   137a4:	cmp	r4, #1
   137a8:	bne	137b4 <__assert_fail@plt+0x2348>
   137ac:	ldr	r0, [pc, #52]	; 137e8 <__assert_fail@plt+0x237c>
   137b0:	bl	11148 <printf@plt>
   137b4:	mov	r0, #10
   137b8:	bl	11364 <putchar@plt>
   137bc:	ldr	r3, [sp, #12]
   137c0:	ldr	r0, [r3, #8]
   137c4:	bl	111e4 <inet_ntoa@plt>
   137c8:	mov	r1, r0
   137cc:	ldr	r0, [pc, #24]	; 137ec <__assert_fail@plt+0x2380>
   137d0:	bl	11148 <printf@plt>
   137d4:	mov	r0, #10
   137d8:	bl	11364 <putchar@plt>
   137dc:	mov	r0, #0
   137e0:	pop	{r4, pc}
   137e4:	andeq	fp, r1, ip, ror r8
   137e8:			; <UNDEFINED> instruction: 0x0001b8b4
   137ec:	muleq	r1, r4, ip
   137f0:	push	{r4, r5, r6, lr}
   137f4:	mov	r1, #17
   137f8:	ldr	r4, [pc, #132]	; 13884 <__assert_fail@plt+0x2418>
   137fc:	mov	r5, r0
   13800:	ldr	r0, [r4]
   13804:	bl	13c34 <__assert_fail@plt+0x27c8>
   13808:	mov	r2, #0
   1380c:	ldr	r0, [r4]
   13810:	ldr	r1, [pc, #112]	; 13888 <__assert_fail@plt+0x241c>
   13814:	bl	13fec <__assert_fail@plt+0x2b80>
   13818:	ldr	r0, [r4]
   1381c:	mov	r1, #12
   13820:	bl	13ff8 <__assert_fail@plt+0x2b8c>
   13824:	ldr	r0, [r4]
   13828:	mov	r1, #1
   1382c:	bl	126c8 <__assert_fail@plt+0x125c>
   13830:	mov	r1, r5
   13834:	ldr	r0, [r4]
   13838:	bl	14000 <__assert_fail@plt+0x2b94>
   1383c:	cmp	r0, #0
   13840:	beq	13854 <__assert_fail@plt+0x23e8>
   13844:	ldr	r2, [pc, #64]	; 1388c <__assert_fail@plt+0x2420>
   13848:	mov	r1, #0
   1384c:	mov	r0, #1
   13850:	bl	11268 <error@plt>
   13854:	ldr	r3, [r4]
   13858:	ldr	r0, [r3, #28]
   1385c:	ldr	r5, [r3, #52]	; 0x34
   13860:	bl	111e4 <inet_ntoa@plt>
   13864:	mov	r1, r5
   13868:	mov	r2, r0
   1386c:	ldr	r0, [pc, #28]	; 13890 <__assert_fail@plt+0x2424>
   13870:	bl	11148 <printf@plt>
   13874:	ldr	r0, [r4]
   13878:	ldr	r1, [pc, #20]	; 13894 <__assert_fail@plt+0x2428>
   1387c:	pop	{r4, r5, r6, lr}
   13880:	b	11eb4 <__assert_fail@plt+0xa48>
   13884:	ldrdeq	sp, [r2], -r0
   13888:	andeq	r3, r1, r8, asr #14
   1388c:	andeq	fp, r1, ip, lsr #16
   13890:	andeq	fp, r1, r4, lsr #25
   13894:	andeq	r3, r1, r0, asr #14
   13898:	mov	r0, #0
   1389c:	bx	lr
   138a0:	b	12224 <__assert_fail@plt+0xdb8>
   138a4:	push	{r4, r5, lr}
   138a8:	sub	sp, sp, #20
   138ac:	subs	r4, r0, #0
   138b0:	ldr	r5, [sp, #36]	; 0x24
   138b4:	blt	138dc <__assert_fail@plt+0x2470>
   138b8:	cmp	r4, #1
   138bc:	ble	138e8 <__assert_fail@plt+0x247c>
   138c0:	cmp	r4, #2
   138c4:	bne	138dc <__assert_fail@plt+0x2470>
   138c8:	mov	r0, r3
   138cc:	mov	r2, r5
   138d0:	ldr	r3, [sp, #40]	; 0x28
   138d4:	ldr	r1, [sp, #32]
   138d8:	bl	13604 <__assert_fail@plt+0x2198>
   138dc:	mov	r0, #0
   138e0:	add	sp, sp, #20
   138e4:	pop	{r4, r5, pc}
   138e8:	ldr	r0, [r3, #4]
   138ec:	bl	111e4 <inet_ntoa@plt>
   138f0:	ldrh	r3, [r5, #6]
   138f4:	ldr	r1, [sp, #40]	; 0x28
   138f8:	rev16	r3, r3
   138fc:	uxth	r3, r3
   13900:	mov	r2, r0
   13904:	ldr	r0, [pc, #212]	; 139e0 <__assert_fail@plt+0x2574>
   13908:	bl	11148 <printf@plt>
   1390c:	cmp	r4, #1
   13910:	beq	139d4 <__assert_fail@plt+0x2568>
   13914:	mov	r0, #10
   13918:	bl	11364 <putchar@plt>
   1391c:	ldr	r2, [r5, #8]
   13920:	mov	r1, #16
   13924:	rev	r2, r2
   13928:	mov	r0, sp
   1392c:	bl	125c4 <__assert_fail@plt+0x1158>
   13930:	mov	r1, r0
   13934:	ldr	r0, [pc, #168]	; 139e4 <__assert_fail@plt+0x2578>
   13938:	bl	11148 <printf@plt>
   1393c:	ldr	r2, [r5, #12]
   13940:	mov	r1, #16
   13944:	rev	r2, r2
   13948:	mov	r0, sp
   1394c:	bl	125c4 <__assert_fail@plt+0x1158>
   13950:	mov	r1, r0
   13954:	ldr	r0, [pc, #140]	; 139e8 <__assert_fail@plt+0x257c>
   13958:	bl	11148 <printf@plt>
   1395c:	ldr	r2, [r5, #16]
   13960:	mov	r1, #16
   13964:	rev	r2, r2
   13968:	mov	r0, sp
   1396c:	bl	125c4 <__assert_fail@plt+0x1158>
   13970:	mov	r1, r0
   13974:	ldr	r0, [pc, #112]	; 139ec <__assert_fail@plt+0x2580>
   13978:	bl	11148 <printf@plt>
   1397c:	ldr	r3, [pc, #108]	; 139f0 <__assert_fail@plt+0x2584>
   13980:	ldr	r3, [r3]
   13984:	tst	r3, #32
   13988:	beq	138dc <__assert_fail@plt+0x2470>
   1398c:	ldr	r0, [r5, #8]
   13990:	rev	r0, r0
   13994:	bl	125b8 <__assert_fail@plt+0x114c>
   13998:	cmp	r0, #0
   1399c:	beq	138dc <__assert_fail@plt+0x2470>
   139a0:	ldr	r0, [r5, #8]
   139a4:	rev	r0, r0
   139a8:	bl	125b8 <__assert_fail@plt+0x114c>
   139ac:	cmp	r0, #0
   139b0:	beq	138dc <__assert_fail@plt+0x2470>
   139b4:	ldr	r1, [r5, #16]
   139b8:	ldr	r3, [r5, #8]
   139bc:	rev	r1, r1
   139c0:	rev	r3, r3
   139c4:	sub	r1, r1, r3
   139c8:	ldr	r0, [pc, #36]	; 139f4 <__assert_fail@plt+0x2588>
   139cc:	bl	11148 <printf@plt>
   139d0:	b	138dc <__assert_fail@plt+0x2470>
   139d4:	ldr	r0, [pc, #28]	; 139f8 <__assert_fail@plt+0x258c>
   139d8:	bl	11148 <printf@plt>
   139dc:	b	13914 <__assert_fail@plt+0x24a8>
   139e0:	andeq	fp, r1, ip, ror r8
   139e4:	ldrdeq	fp, [r1], -r0
   139e8:	andeq	fp, r1, r4, ror #25
   139ec:	strdeq	fp, [r1], -r8
   139f0:	andeq	sp, r2, r8, asr #13
   139f4:	andeq	fp, r1, ip, lsl #26
   139f8:			; <UNDEFINED> instruction: 0x0001b8b4
   139fc:	push	{r4, r5, r6, lr}
   13a00:	mov	r1, #13
   13a04:	ldr	r4, [pc, #120]	; 13a84 <__assert_fail@plt+0x2618>
   13a08:	mov	r5, r0
   13a0c:	ldr	r0, [r4]
   13a10:	bl	13c34 <__assert_fail@plt+0x27c8>
   13a14:	mov	r2, #0
   13a18:	ldr	r0, [r4]
   13a1c:	ldr	r1, [pc, #100]	; 13a88 <__assert_fail@plt+0x261c>
   13a20:	bl	13fec <__assert_fail@plt+0x2b80>
   13a24:	ldr	r0, [r4]
   13a28:	mov	r1, #20
   13a2c:	bl	13ff8 <__assert_fail@plt+0x2b8c>
   13a30:	mov	r1, r5
   13a34:	ldr	r0, [r4]
   13a38:	bl	14000 <__assert_fail@plt+0x2b94>
   13a3c:	cmp	r0, #0
   13a40:	beq	13a54 <__assert_fail@plt+0x25e8>
   13a44:	ldr	r2, [pc, #64]	; 13a8c <__assert_fail@plt+0x2620>
   13a48:	mov	r1, #0
   13a4c:	mov	r0, #1
   13a50:	bl	11268 <error@plt>
   13a54:	ldr	r3, [r4]
   13a58:	ldr	r0, [r3, #28]
   13a5c:	ldr	r5, [r3, #52]	; 0x34
   13a60:	bl	111e4 <inet_ntoa@plt>
   13a64:	mov	r1, r5
   13a68:	mov	r2, r0
   13a6c:	ldr	r0, [pc, #28]	; 13a90 <__assert_fail@plt+0x2624>
   13a70:	bl	11148 <printf@plt>
   13a74:	ldr	r0, [r4]
   13a78:	ldr	r1, [pc, #20]	; 13a94 <__assert_fail@plt+0x2628>
   13a7c:	pop	{r4, r5, r6, lr}
   13a80:	b	11eb4 <__assert_fail@plt+0xa48>
   13a84:	ldrdeq	sp, [r2], -r0
   13a88:	andeq	r3, r1, r4, lsr #17
   13a8c:	andeq	fp, r1, ip, lsr #16
   13a90:	andeq	fp, r1, r0, lsr #26
   13a94:	andeq	r3, r1, r0, lsr #17
   13a98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a9c:	mov	r8, r0
   13aa0:	ldr	r0, [pc, #352]	; 13c08 <__assert_fail@plt+0x279c>
   13aa4:	mov	r5, r1
   13aa8:	bl	11154 <getprotobyname@plt>
   13aac:	subs	r6, r0, #0
   13ab0:	beq	13be8 <__assert_fail@plt+0x277c>
   13ab4:	ldr	r2, [r6, #8]
   13ab8:	mov	r1, #3
   13abc:	mov	r0, #2
   13ac0:	bl	1143c <socket@plt>
   13ac4:	subs	r7, r0, #0
   13ac8:	blt	13b24 <__assert_fail@plt+0x26b8>
   13acc:	mov	r0, #124	; 0x7c
   13ad0:	bl	195a8 <argp_parse@@Base+0x1a04>
   13ad4:	subs	r4, r0, #0
   13ad8:	beq	13bc0 <__assert_fail@plt+0x2754>
   13adc:	mov	r2, #124	; 0x7c
   13ae0:	mov	r1, #0
   13ae4:	bl	11358 <memset@plt>
   13ae8:	uxth	r5, r5
   13aec:	mov	r0, #1000	; 0x3e8
   13af0:	mov	r1, #0
   13af4:	mov	r2, #28
   13af8:	mov	r3, #128	; 0x80
   13afc:	str	r0, [r4, #20]
   13b00:	str	r5, [r4, #60]	; 0x3c
   13b04:	stm	r4, {r7, r8}
   13b08:	str	r1, [r4, #8]
   13b0c:	str	r2, [r4, #56]	; 0x38
   13b10:	str	r3, [r4, #72]	; 0x48
   13b14:	add	r0, r4, #12
   13b18:	bl	1125c <gettimeofday@plt>
   13b1c:	mov	r0, r4
   13b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b24:	bl	11328 <__errno_location@plt>
   13b28:	ldr	r4, [r0]
   13b2c:	mov	r9, r0
   13b30:	cmp	r4, #13
   13b34:	cmpne	r4, #1
   13b38:	moveq	r4, #1
   13b3c:	movne	r4, #0
   13b40:	bne	13b1c <__assert_fail@plt+0x26b0>
   13b44:	mov	r1, #2
   13b48:	mov	r4, #0
   13b4c:	str	r4, [r0]
   13b50:	mov	r0, r1
   13b54:	ldr	r2, [r6, #8]
   13b58:	bl	1143c <socket@plt>
   13b5c:	subs	r7, r0, #0
   13b60:	blt	13b78 <__assert_fail@plt+0x270c>
   13b64:	ldr	r2, [pc, #160]	; 13c0c <__assert_fail@plt+0x27a0>
   13b68:	ldr	r3, [r2]
   13b6c:	add	r3, r3, #1
   13b70:	str	r3, [r2]
   13b74:	b	13acc <__assert_fail@plt+0x2660>
   13b78:	ldr	r0, [r9]
   13b7c:	cmp	r0, #13
   13b80:	cmpne	r0, #1
   13b84:	moveq	r3, #1
   13b88:	movne	r3, #0
   13b8c:	cmp	r0, #93	; 0x5d
   13b90:	orreq	r3, r3, #1
   13b94:	cmp	r3, r4
   13b98:	bne	13bcc <__assert_fail@plt+0x2760>
   13b9c:	ldr	r2, [pc, #108]	; 13c10 <__assert_fail@plt+0x27a4>
   13ba0:	mov	r4, r3
   13ba4:	ldr	r5, [r2]
   13ba8:	bl	112a4 <strerror@plt>
   13bac:	ldr	r1, [pc, #96]	; 13c14 <__assert_fail@plt+0x27a8>
   13bb0:	mov	r2, r0
   13bb4:	mov	r0, r5
   13bb8:	bl	1131c <fprintf@plt>
   13bbc:	b	13b1c <__assert_fail@plt+0x26b0>
   13bc0:	mov	r0, r7
   13bc4:	bl	11460 <close@plt>
   13bc8:	b	13b1c <__assert_fail@plt+0x26b0>
   13bcc:	ldr	r3, [pc, #60]	; 13c10 <__assert_fail@plt+0x27a4>
   13bd0:	mov	r2, #41	; 0x29
   13bd4:	mov	r1, #1
   13bd8:	ldr	r3, [r3]
   13bdc:	ldr	r0, [pc, #52]	; 13c18 <__assert_fail@plt+0x27ac>
   13be0:	bl	11250 <fwrite@plt>
   13be4:	b	13b1c <__assert_fail@plt+0x26b0>
   13be8:	ldr	r3, [pc, #32]	; 13c10 <__assert_fail@plt+0x27a4>
   13bec:	mov	r2, #29
   13bf0:	mov	r1, #1
   13bf4:	ldr	r3, [r3]
   13bf8:	ldr	r0, [pc, #28]	; 13c1c <__assert_fail@plt+0x27b0>
   13bfc:	mov	r4, r6
   13c00:	bl	11250 <fwrite@plt>
   13c04:	b	13b1c <__assert_fail@plt+0x26b0>
   13c08:	andeq	fp, r1, ip, asr #26
   13c0c:	andeq	sp, r2, r4, lsl #13
   13c10:	andeq	sp, r2, r8, lsr #12
   13c14:	andeq	fp, r1, r0, lsr #27
   13c18:	andeq	fp, r1, r4, ror sp
   13c1c:	andeq	fp, r1, r4, asr sp
   13c20:	mov	r3, #0
   13c24:	str	r3, [r0, #112]	; 0x70
   13c28:	str	r3, [r0, #116]	; 0x74
   13c2c:	str	r3, [r0, #120]	; 0x78
   13c30:	bx	lr
   13c34:	str	r1, [r0, #4]
   13c38:	bx	lr
   13c3c:	push	{r4, r5, r6, r7, lr}
   13c40:	mov	r1, #0
   13c44:	sub	sp, sp, #12
   13c48:	mov	r4, r0
   13c4c:	bl	125f0 <__assert_fail@plt+0x1184>
   13c50:	subs	r6, r0, #0
   13c54:	bne	13d94 <__assert_fail@plt+0x2928>
   13c58:	ldr	r3, [r4, #4]
   13c5c:	sub	r2, r3, #13
   13c60:	cmp	r2, #1
   13c64:	bls	13d4c <__assert_fail@plt+0x28e0>
   13c68:	sub	r3, r3, #17
   13c6c:	cmp	r3, #1
   13c70:	bls	13d88 <__assert_fail@plt+0x291c>
   13c74:	ldr	r5, [r4, #56]	; 0x38
   13c78:	add	r5, r5, #8
   13c7c:	mov	r7, r5
   13c80:	ldr	r1, [r4, #72]	; 0x48
   13c84:	ldr	r0, [r4, #112]	; 0x70
   13c88:	lsl	r1, r1, #3
   13c8c:	bl	1ac24 <argp_parse@@Base+0x3080>
   13c90:	ldr	r2, [r4, #76]	; 0x4c
   13c94:	mov	ip, #1
   13c98:	ldrb	r3, [r2, r1, asr #3]
   13c9c:	and	r0, r1, #7
   13ca0:	bic	r3, r3, ip, lsl r0
   13ca4:	strb	r3, [r2, r1, asr #3]
   13ca8:	ldr	r2, [r4, #4]
   13cac:	cmp	r2, #13
   13cb0:	beq	13d70 <__assert_fail@plt+0x2904>
   13cb4:	cmp	r2, #17
   13cb8:	beq	13d34 <__assert_fail@plt+0x28c8>
   13cbc:	cmp	r2, #8
   13cc0:	beq	13d58 <__assert_fail@plt+0x28ec>
   13cc4:	ldr	r1, [r4, #112]	; 0x70
   13cc8:	ldr	r3, [r4, #60]	; 0x3c
   13ccc:	ldr	r0, [r4, #80]	; 0x50
   13cd0:	str	r1, [sp]
   13cd4:	mov	r1, r5
   13cd8:	bl	140a0 <__assert_fail@plt+0x2c34>
   13cdc:	add	r3, r4, #24
   13ce0:	mov	ip, #16
   13ce4:	ldr	r0, [r4]
   13ce8:	ldr	r1, [r4, #80]	; 0x50
   13cec:	mov	r2, r5
   13cf0:	stm	sp, {r3, ip}
   13cf4:	mov	r3, #0
   13cf8:	bl	11388 <sendto@plt>
   13cfc:	subs	r3, r0, #0
   13d00:	blt	13d94 <__assert_fail@plt+0x2928>
   13d04:	ldr	r2, [r4, #112]	; 0x70
   13d08:	cmp	r3, r7
   13d0c:	add	r2, r2, #1
   13d10:	str	r2, [r4, #112]	; 0x70
   13d14:	beq	13d28 <__assert_fail@plt+0x28bc>
   13d18:	mov	r2, r7
   13d1c:	ldr	r1, [r4, #52]	; 0x34
   13d20:	ldr	r0, [pc, #116]	; 13d9c <__assert_fail@plt+0x2930>
   13d24:	bl	11148 <printf@plt>
   13d28:	mov	r0, r6
   13d2c:	add	sp, sp, #12
   13d30:	pop	{r4, r5, r6, r7, pc}
   13d34:	ldr	r3, [r4, #112]	; 0x70
   13d38:	ldr	r2, [r4, #60]	; 0x3c
   13d3c:	mov	r1, r5
   13d40:	ldr	r0, [r4, #80]	; 0x50
   13d44:	bl	1424c <__assert_fail@plt+0x2de0>
   13d48:	b	13cdc <__assert_fail@plt+0x2870>
   13d4c:	mov	r7, #20
   13d50:	mov	r5, r7
   13d54:	b	13c80 <__assert_fail@plt+0x2814>
   13d58:	ldr	r3, [r4, #112]	; 0x70
   13d5c:	ldr	r2, [r4, #60]	; 0x3c
   13d60:	mov	r1, r5
   13d64:	ldr	r0, [r4, #80]	; 0x50
   13d68:	bl	14148 <__assert_fail@plt+0x2cdc>
   13d6c:	b	13cdc <__assert_fail@plt+0x2870>
   13d70:	ldr	r3, [r4, #112]	; 0x70
   13d74:	ldr	r2, [r4, #60]	; 0x3c
   13d78:	mov	r1, r5
   13d7c:	ldr	r0, [r4, #80]	; 0x50
   13d80:	bl	14198 <__assert_fail@plt+0x2d2c>
   13d84:	b	13cdc <__assert_fail@plt+0x2870>
   13d88:	mov	r7, #12
   13d8c:	mov	r5, r7
   13d90:	b	13c80 <__assert_fail@plt+0x2814>
   13d94:	mvn	r6, #0
   13d98:	b	13d28 <__assert_fail@plt+0x28bc>
   13d9c:	andeq	fp, r1, ip, lsr #27
   13da0:	push	{r4, r5, r6, r7, lr}
   13da4:	mov	r4, r0
   13da8:	sub	sp, sp, #36	; 0x24
   13dac:	ldr	r2, [r4, #56]	; 0x38
   13db0:	add	ip, sp, #32
   13db4:	mov	r3, #16
   13db8:	add	r5, r4, #84	; 0x54
   13dbc:	ldr	r0, [r0]
   13dc0:	ldr	r1, [r4, #80]	; 0x50
   13dc4:	add	r2, r2, #80	; 0x50
   13dc8:	str	r5, [sp]
   13dcc:	str	r3, [ip, #-12]!
   13dd0:	mov	r3, #0
   13dd4:	str	ip, [sp, #4]
   13dd8:	bl	11214 <recvfrom@plt>
   13ddc:	subs	r6, r0, #0
   13de0:	blt	13f04 <__assert_fail@plt+0x2a98>
   13de4:	add	r3, sp, #24
   13de8:	add	r2, sp, #28
   13dec:	mov	r1, r6
   13df0:	ldr	r0, [r4, #80]	; 0x50
   13df4:	bl	140ec <__assert_fail@plt+0x2c80>
   13df8:	cmp	r0, #0
   13dfc:	blt	13fb0 <__assert_fail@plt+0x2b44>
   13e00:	ldr	r3, [sp, #24]
   13e04:	ldrb	r2, [r3]
   13e08:	cmp	r2, #18
   13e0c:	bhi	13ef4 <__assert_fail@plt+0x2a88>
   13e10:	mov	r1, #1
   13e14:	ldr	ip, [pc, #444]	; 13fd8 <__assert_fail@plt+0x2b6c>
   13e18:	lsl	r2, r1, r2
   13e1c:	and	ip, ip, r2
   13e20:	cmp	ip, #0
   13e24:	bne	13f04 <__assert_fail@plt+0x2a98>
   13e28:	add	r1, r1, #278528	; 0x44000
   13e2c:	and	r1, r1, r2
   13e30:	cmp	r1, #0
   13e34:	beq	13ef4 <__assert_fail@plt+0x2a88>
   13e38:	ldrh	r2, [r3, #4]
   13e3c:	ldr	r1, [r4, #60]	; 0x3c
   13e40:	rev16	r2, r2
   13e44:	uxth	r2, r2
   13e48:	cmp	r2, r1
   13e4c:	beq	13e60 <__assert_fail@plt+0x29f4>
   13e50:	ldr	r2, [pc, #388]	; 13fdc <__assert_fail@plt+0x2b70>
   13e54:	ldr	r2, [r2]
   13e58:	cmp	r2, #0
   13e5c:	beq	13f04 <__assert_fail@plt+0x2a98>
   13e60:	cmp	r0, #0
   13e64:	bne	13f10 <__assert_fail@plt+0x2aa4>
   13e68:	ldr	r7, [r4, #116]	; 0x74
   13e6c:	ldr	r1, [r4, #72]	; 0x48
   13e70:	add	r2, r7, #1
   13e74:	str	r2, [r4, #116]	; 0x74
   13e78:	ldrh	r0, [r3, #6]
   13e7c:	lsl	r1, r1, #3
   13e80:	rev16	r0, r0
   13e84:	uxth	r0, r0
   13e88:	bl	1ae64 <argp_parse@@Base+0x32c0>
   13e8c:	ldr	r2, [r4, #76]	; 0x4c
   13e90:	ldrb	r3, [r2, r1, asr #3]
   13e94:	and	ip, r1, #7
   13e98:	asr	r0, r3, ip
   13e9c:	ands	r0, r0, #1
   13ea0:	moveq	lr, #1
   13ea4:	ldrne	r3, [r4, #120]	; 0x78
   13ea8:	orreq	r3, r3, lr, lsl ip
   13eac:	strne	r7, [r4, #116]	; 0x74
   13eb0:	strbeq	r3, [r2, r1, asr #3]
   13eb4:	ldr	r7, [r4, #64]	; 0x40
   13eb8:	addne	r3, r3, #1
   13ebc:	strne	r3, [r4, #120]	; 0x78
   13ec0:	cmp	r7, #0
   13ec4:	beq	13ee8 <__assert_fail@plt+0x2a7c>
   13ec8:	ldr	lr, [sp, #24]
   13ecc:	ldr	ip, [sp, #28]
   13ed0:	ldr	r1, [r4, #68]	; 0x44
   13ed4:	mov	r3, r5
   13ed8:	str	r6, [sp, #8]
   13edc:	add	r2, r4, #24
   13ee0:	stm	sp, {ip, lr}
   13ee4:	blx	r7
   13ee8:	mov	r0, #0
   13eec:	add	sp, sp, #36	; 0x24
   13ef0:	pop	{r4, r5, r6, r7, pc}
   13ef4:	ldr	r1, [r3, #24]
   13ef8:	ldr	r2, [r4, #28]
   13efc:	cmp	r1, r2
   13f00:	beq	13f38 <__assert_fail@plt+0x2acc>
   13f04:	mvn	r0, #0
   13f08:	add	sp, sp, #36	; 0x24
   13f0c:	pop	{r4, r5, r6, r7, pc}
   13f10:	ldr	r3, [pc, #200]	; 13fe0 <__assert_fail@plt+0x2b74>
   13f14:	ldr	r0, [r4, #88]	; 0x58
   13f18:	ldr	r7, [r3]
   13f1c:	bl	111e4 <inet_ntoa@plt>
   13f20:	ldr	r1, [pc, #188]	; 13fe4 <__assert_fail@plt+0x2b78>
   13f24:	mov	r2, r0
   13f28:	mov	r0, r7
   13f2c:	bl	1131c <fprintf@plt>
   13f30:	ldr	r3, [sp, #24]
   13f34:	b	13e68 <__assert_fail@plt+0x29fc>
   13f38:	ldrb	r2, [r3, #17]
   13f3c:	cmp	r2, #1
   13f40:	bne	13f04 <__assert_fail@plt+0x2a98>
   13f44:	ldrb	r2, [r3, #28]
   13f48:	cmp	r2, #8
   13f4c:	bne	13f04 <__assert_fail@plt+0x2a98>
   13f50:	ldrh	r2, [r3, #32]
   13f54:	ldr	r1, [r4, #60]	; 0x3c
   13f58:	rev16	r2, r2
   13f5c:	uxth	r2, r2
   13f60:	cmp	r2, r1
   13f64:	beq	13f78 <__assert_fail@plt+0x2b0c>
   13f68:	ldr	r2, [pc, #108]	; 13fdc <__assert_fail@plt+0x2b70>
   13f6c:	ldr	r2, [r2]
   13f70:	cmp	r2, #0
   13f74:	beq	13f04 <__assert_fail@plt+0x2a98>
   13f78:	ldr	r7, [r4, #64]	; 0x40
   13f7c:	cmp	r7, #0
   13f80:	beq	13ee8 <__assert_fail@plt+0x2a7c>
   13f84:	ldr	r0, [sp, #28]
   13f88:	ldr	r1, [r4, #68]	; 0x44
   13f8c:	add	r2, r4, #24
   13f90:	stmib	sp, {r3, r6}
   13f94:	str	r0, [sp]
   13f98:	mov	r3, r5
   13f9c:	mov	r0, #2
   13fa0:	blx	r7
   13fa4:	mov	r0, #0
   13fa8:	add	sp, sp, #36	; 0x24
   13fac:	pop	{r4, r5, r6, r7, pc}
   13fb0:	ldr	r3, [pc, #40]	; 13fe0 <__assert_fail@plt+0x2b74>
   13fb4:	ldr	r0, [r4, #88]	; 0x58
   13fb8:	ldr	r4, [r3]
   13fbc:	bl	111e4 <inet_ntoa@plt>
   13fc0:	mov	r2, r6
   13fc4:	ldr	r1, [pc, #28]	; 13fe8 <__assert_fail@plt+0x2b7c>
   13fc8:	mov	r3, r0
   13fcc:	mov	r0, r4
   13fd0:	bl	1131c <fprintf@plt>
   13fd4:	b	13f04 <__assert_fail@plt+0x2a98>
   13fd8:	andeq	r2, r2, r0, lsl #2
   13fdc:	andeq	sp, r2, r4, lsl #13
   13fe0:	andeq	sp, r2, r8, lsr #12
   13fe4:	strdeq	fp, [r1], -r8
   13fe8:	ldrdeq	fp, [r1], -r0
   13fec:	str	r1, [r0, #64]	; 0x40
   13ff0:	str	r2, [r0, #68]	; 0x44
   13ff4:	bx	lr
   13ff8:	str	r1, [r0, #56]	; 0x38
   13ffc:	bx	lr
   14000:	push	{r4, r5, r6, r7, lr}
   14004:	sub	sp, sp, #44	; 0x2c
   14008:	mov	r7, r1
   1400c:	mov	r2, #32
   14010:	mov	r1, #0
   14014:	mov	r6, r0
   14018:	add	r0, sp, #8
   1401c:	bl	11358 <memset@plt>
   14020:	mov	lr, #2
   14024:	mov	ip, #194	; 0xc2
   14028:	add	r2, sp, #8
   1402c:	mov	r0, r7
   14030:	add	r3, sp, #4
   14034:	mov	r1, #0
   14038:	str	lr, [sp, #12]
   1403c:	str	ip, [sp, #8]
   14040:	bl	11430 <getaddrinfo@plt>
   14044:	subs	r5, r0, #0
   14048:	bne	14088 <__assert_fail@plt+0x2c1c>
   1404c:	ldr	r4, [sp, #4]
   14050:	add	r0, r6, #24
   14054:	ldr	r2, [r4, #16]
   14058:	ldr	r1, [r4, #20]
   1405c:	bl	111b4 <memcpy@plt>
   14060:	ldr	r0, [r4, #24]
   14064:	cmp	r0, #0
   14068:	moveq	r0, r7
   1406c:	bl	11220 <strdup@plt>
   14070:	str	r0, [r6, #52]	; 0x34
   14074:	mov	r0, r4
   14078:	bl	11424 <freeaddrinfo@plt>
   1407c:	mov	r0, r5
   14080:	add	sp, sp, #44	; 0x2c
   14084:	pop	{r4, r5, r6, r7, pc}
   14088:	mov	r0, #0
   1408c:	bl	18a3c <argp_parse@@Base+0xe98>
   14090:	mov	r5, #1
   14094:	mov	r0, r5
   14098:	add	sp, sp, #44	; 0x2c
   1409c:	pop	{r4, r5, r6, r7, pc}
   140a0:	cmp	r1, #7
   140a4:	push	{r4, r5, r6, lr}
   140a8:	bls	140e4 <__assert_fail@plt+0x2c78>
   140ac:	ldrh	ip, [sp, #16]
   140b0:	rev16	r3, r3
   140b4:	mov	r5, #0
   140b8:	rev16	ip, ip
   140bc:	strh	r3, [r0, #4]
   140c0:	strb	r2, [r0]
   140c4:	strb	r5, [r0, #1]
   140c8:	strh	r5, [r0, #2]
   140cc:	strh	ip, [r0, #6]
   140d0:	mov	r4, r0
   140d4:	bl	1428c <__assert_fail@plt+0x2e20>
   140d8:	strh	r0, [r4, #2]
   140dc:	mov	r0, r5
   140e0:	pop	{r4, r5, r6, pc}
   140e4:	mvn	r5, #0
   140e8:	b	140dc <__assert_fail@plt+0x2c70>
   140ec:	ldrb	ip, [r0]
   140f0:	push	{r4, r5, r6, lr}
   140f4:	and	ip, ip, #15
   140f8:	lsl	ip, ip, #2
   140fc:	add	lr, ip, #8
   14100:	cmp	lr, r1
   14104:	bhi	14140 <__assert_fail@plt+0x2cd4>
   14108:	add	r4, r0, ip
   1410c:	mov	lr, #0
   14110:	ldrh	r5, [r4, #2]
   14114:	sub	r1, r1, ip
   14118:	str	r0, [r2]
   1411c:	str	r4, [r3]
   14120:	mov	r0, r4
   14124:	strh	lr, [r4, #2]
   14128:	bl	1428c <__assert_fail@plt+0x2e20>
   1412c:	mov	r3, r0
   14130:	subs	r0, r5, r0
   14134:	movne	r0, #1
   14138:	strh	r3, [r4, #2]
   1413c:	pop	{r4, r5, r6, pc}
   14140:	mvn	r0, #0
   14144:	pop	{r4, r5, r6, pc}
   14148:	cmp	r1, #7
   1414c:	push	{r4, r5, r6, lr}
   14150:	bls	1418c <__assert_fail@plt+0x2d20>
   14154:	rev16	r3, r3
   14158:	rev16	r2, r2
   1415c:	mov	ip, #8
   14160:	mov	r5, #0
   14164:	strh	r3, [r0, #6]
   14168:	strh	r2, [r0, #4]
   1416c:	strb	ip, [r0]
   14170:	strb	r5, [r0, #1]
   14174:	strh	r5, [r0, #2]
   14178:	mov	r4, r0
   1417c:	bl	1428c <__assert_fail@plt+0x2e20>
   14180:	strh	r0, [r4, #2]
   14184:	mov	r0, r5
   14188:	pop	{r4, r5, r6, pc}
   1418c:	mvn	r5, #0
   14190:	b	14184 <__assert_fail@plt+0x2d18>
   14194:	b	140ec <__assert_fail@plt+0x2c80>
   14198:	cmp	r1, #19
   1419c:	bls	14238 <__assert_fail@plt+0x2dcc>
   141a0:	push	{r4, r5, r6, r7, lr}
   141a4:	sub	sp, sp, #20
   141a8:	mov	r4, r0
   141ac:	mov	r5, r1
   141b0:	add	r0, sp, #8
   141b4:	mov	r1, #0
   141b8:	mov	r7, r3
   141bc:	mov	r6, r2
   141c0:	bl	1125c <gettimeofday@plt>
   141c4:	ldr	ip, [sp, #8]
   141c8:	ldr	r1, [pc, #112]	; 14240 <__assert_fail@plt+0x2dd4>
   141cc:	ldr	r0, [sp, #12]
   141d0:	asr	r2, ip, #31
   141d4:	smull	r3, r1, r1, ip
   141d8:	ldr	r3, [pc, #100]	; 14244 <__assert_fail@plt+0x2dd8>
   141dc:	add	r1, r1, ip
   141e0:	str	r7, [sp]
   141e4:	rsb	r2, r2, r1, asr #16
   141e8:	ldr	r1, [pc, #88]	; 14248 <__assert_fail@plt+0x2ddc>
   141ec:	smull	lr, r3, r3, r0
   141f0:	mul	r1, r1, r2
   141f4:	asr	r0, r0, #31
   141f8:	sub	ip, ip, r1
   141fc:	mov	r2, #1000	; 0x3e8
   14200:	rsb	r0, r0, r3, asr #6
   14204:	mla	ip, r2, ip, r0
   14208:	mov	r3, r6
   1420c:	rev	ip, ip
   14210:	mov	r1, r5
   14214:	str	ip, [r4, #8]
   14218:	str	ip, [r4, #12]
   1421c:	str	ip, [r4, #16]
   14220:	mov	r0, r4
   14224:	mov	r2, #13
   14228:	bl	140a0 <__assert_fail@plt+0x2c34>
   1422c:	mov	r0, #0
   14230:	add	sp, sp, #20
   14234:	pop	{r4, r5, r6, r7, pc}
   14238:	mvn	r0, #0
   1423c:	bx	lr
   14240:	eorgt	r4, lr, #29360128	; 0x1c00000
   14244:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   14248:	andeq	r5, r1, r0, lsl #3
   1424c:	cmp	r1, #11
   14250:	bls	14284 <__assert_fail@plt+0x2e18>
   14254:	push	{r4, lr}
   14258:	sub	sp, sp, #8
   1425c:	mov	lr, r3
   14260:	mov	r4, #0
   14264:	mov	r3, r2
   14268:	str	lr, [sp]
   1426c:	mov	r2, #17
   14270:	str	r4, [r0, #8]
   14274:	bl	140a0 <__assert_fail@plt+0x2c34>
   14278:	mov	r0, r4
   1427c:	add	sp, sp, #8
   14280:	pop	{r4, pc}
   14284:	mvn	r0, #0
   14288:	bx	lr
   1428c:	push	{lr}		; (str lr, [sp, #-4]!)
   14290:	sub	sp, sp, #12
   14294:	mov	r2, #0
   14298:	cmp	r1, #1
   1429c:	strh	r2, [sp, #6]
   142a0:	ble	142d4 <__assert_fail@plt+0x2e68>
   142a4:	mov	ip, r0
   142a8:	mov	r3, r1
   142ac:	ldrh	lr, [ip], #2
   142b0:	sub	r3, r3, #2
   142b4:	cmp	r3, #1
   142b8:	add	r2, r2, lr
   142bc:	bgt	142ac <__assert_fail@plt+0x2e40>
   142c0:	sub	r1, r1, #2
   142c4:	bic	r3, r1, #1
   142c8:	add	r3, r3, #2
   142cc:	add	r0, r0, r3
   142d0:	and	r1, r1, #1
   142d4:	cmp	r1, #1
   142d8:	ldrbeq	r3, [r0]
   142dc:	strbeq	r3, [sp, #6]
   142e0:	ldrheq	r3, [sp, #6]
   142e4:	addeq	r2, r2, r3
   142e8:	uxth	r0, r2
   142ec:	add	r2, r0, r2, asr #16
   142f0:	add	r2, r2, r2, asr #16
   142f4:	mvn	r0, r2
   142f8:	uxth	r0, r0
   142fc:	add	sp, sp, #12
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14308:	sub	sp, sp, #20
   1430c:	ldr	r5, [r0, #4]
   14310:	ldr	r4, [r0]
   14314:	cmp	r5, #0
   14318:	ldr	r7, [r0, #8]
   1431c:	beq	143f4 <__assert_fail@plt+0x2f88>
   14320:	stmib	sp, {r1, r2, r3}
   14324:	mov	r6, #1
   14328:	str	r4, [sp]
   1432c:	mov	r8, #0
   14330:	b	14350 <__assert_fail@plt+0x2ee4>
   14334:	mov	r3, r6
   14338:	subs	r5, r5, #1
   1433c:	moveq	r3, #0
   14340:	andne	r3, r3, #1
   14344:	cmp	r3, #0
   14348:	add	r4, r4, #24
   1434c:	beq	143bc <__assert_fail@plt+0x2f50>
   14350:	ldr	fp, [r4, #12]
   14354:	ands	r9, fp, #8
   14358:	movne	r3, r6
   1435c:	movne	r9, r8
   14360:	bne	14338 <__assert_fail@plt+0x2ecc>
   14364:	ldr	sl, [r4, #4]
   14368:	sub	r3, sl, #1
   1436c:	cmp	r3, #254	; 0xfe
   14370:	bhi	14334 <__assert_fail@plt+0x2ec8>
   14374:	bl	112d4 <__ctype_b_loc@plt>
   14378:	lsl	r3, sl, #1
   1437c:	ldr	r1, [r0]
   14380:	ldrh	r3, [r1, r3]
   14384:	tst	r3, #16384	; 0x4000
   14388:	beq	14334 <__assert_fail@plt+0x2ec8>
   1438c:	ldrb	r3, [r7]
   14390:	cmp	r3, sl
   14394:	bne	14334 <__assert_fail@plt+0x2ec8>
   14398:	ldr	r3, [sp]
   1439c:	tst	fp, #4
   143a0:	moveq	r3, r4
   143a4:	tst	fp, #2
   143a8:	str	r3, [sp]
   143ac:	movne	r3, r6
   143b0:	beq	143cc <__assert_fail@plt+0x2f60>
   143b4:	add	r7, r7, #1
   143b8:	b	14338 <__assert_fail@plt+0x2ecc>
   143bc:	mov	sl, r9
   143c0:	mov	r0, sl
   143c4:	add	sp, sp, #20
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	ldr	r3, [sp, #12]
   143d0:	ldr	r2, [sp, #8]
   143d4:	ldr	r1, [sp]
   143d8:	mov	r0, r4
   143dc:	ldr	ip, [sp, #4]
   143e0:	blx	ip
   143e4:	clz	r3, r0
   143e8:	mov	r9, r0
   143ec:	lsr	r3, r3, #5
   143f0:	b	143b4 <__assert_fail@plt+0x2f48>
   143f4:	mov	sl, r5
   143f8:	b	143c0 <__assert_fail@plt+0x2f54>
   143fc:	push	{r4, r5, r6, lr}
   14400:	ldr	r4, [r0, #12]
   14404:	ands	r4, r4, #8
   14408:	movne	r4, #0
   1440c:	bne	14438 <__assert_fail@plt+0x2fcc>
   14410:	ldr	r5, [r0, #4]
   14414:	sub	r3, r5, #1
   14418:	cmp	r3, #254	; 0xfe
   1441c:	bhi	14438 <__assert_fail@plt+0x2fcc>
   14420:	bl	112d4 <__ctype_b_loc@plt>
   14424:	lsl	r3, r5, #1
   14428:	ldr	r2, [r0]
   1442c:	ldrh	r3, [r2, r3]
   14430:	tst	r3, #16384	; 0x4000
   14434:	movne	r4, r5
   14438:	mov	r0, r4
   1443c:	pop	{r4, r5, r6, pc}
   14440:	push	{r4, lr}
   14444:	mov	r4, r0
   14448:	bl	112d4 <__ctype_b_loc@plt>
   1444c:	ldr	r2, [r4]
   14450:	ldr	lr, [r0]
   14454:	b	1445c <__assert_fail@plt+0x2ff0>
   14458:	str	r2, [r4]
   1445c:	ldrb	r1, [r2]
   14460:	mov	r3, r2
   14464:	add	r2, r2, #1
   14468:	lsl	r0, r1, #1
   1446c:	ldrh	ip, [lr, r0]
   14470:	tst	ip, #8192	; 0x2000
   14474:	bne	14458 <__assert_fail@plt+0x2fec>
   14478:	subs	r0, r1, #45	; 0x2d
   1447c:	movne	r0, #1
   14480:	cmp	r1, #0
   14484:	popeq	{r4, pc}
   14488:	tst	ip, #8
   1448c:	popne	{r4, pc}
   14490:	add	r3, r3, #1
   14494:	str	r3, [r4]
   14498:	ldrb	r2, [r3]
   1449c:	cmp	r2, #0
   144a0:	lsl	r2, r2, #1
   144a4:	popeq	{r4, pc}
   144a8:	ldrh	r2, [lr, r2]
   144ac:	tst	r2, #8
   144b0:	beq	14490 <__assert_fail@plt+0x3024>
   144b4:	pop	{r4, pc}
   144b8:	push	{r4, r5, r6, lr}
   144bc:	mov	r5, r0
   144c0:	ldr	r0, [r0, #12]
   144c4:	cmp	r0, #0
   144c8:	beq	144dc <__assert_fail@plt+0x3070>
   144cc:	ldr	r4, [r0, #24]
   144d0:	bl	18a3c <argp_parse@@Base+0xe98>
   144d4:	subs	r0, r4, #0
   144d8:	bne	144cc <__assert_fail@plt+0x3060>
   144dc:	ldr	r3, [r5, #4]
   144e0:	cmp	r3, #0
   144e4:	beq	144f8 <__assert_fail@plt+0x308c>
   144e8:	ldr	r0, [r5]
   144ec:	bl	18a3c <argp_parse@@Base+0xe98>
   144f0:	ldr	r0, [r5, #8]
   144f4:	bl	18a3c <argp_parse@@Base+0xe98>
   144f8:	mov	r0, r5
   144fc:	pop	{r4, r5, r6, lr}
   14500:	b	18a3c <argp_parse@@Base+0xe98>
   14504:	push	{r4, r5, r6, r7, r8, lr}
   14508:	mov	r5, r1
   1450c:	ldr	r3, [r0, #28]
   14510:	ldr	r1, [r0, #24]
   14514:	ldr	r2, [r0, #16]
   14518:	sub	r3, r3, r1
   1451c:	cmp	r3, r2
   14520:	mov	r4, r0
   14524:	bhi	14590 <__assert_fail@plt+0x3124>
   14528:	ldr	r1, [r4, #20]
   1452c:	mov	r6, #32
   14530:	cmp	r1, #0
   14534:	subge	r5, r5, r1
   14538:	mov	r7, #1
   1453c:	cmp	r5, #0
   14540:	sub	r5, r5, #1
   14544:	ble	14570 <__assert_fail@plt+0x3104>
   14548:	ldr	r3, [r4, #28]
   1454c:	ldr	r2, [r4, #32]
   14550:	cmp	r3, r2
   14554:	bcs	14574 <__assert_fail@plt+0x3108>
   14558:	add	r2, r3, #1
   1455c:	cmp	r5, #0
   14560:	str	r2, [r4, #28]
   14564:	sub	r5, r5, #1
   14568:	strb	r6, [r3]
   1456c:	bgt	14548 <__assert_fail@plt+0x30dc>
   14570:	pop	{r4, r5, r6, r7, r8, pc}
   14574:	mov	r1, r7
   14578:	mov	r0, r4
   1457c:	bl	19d3c <argp_parse@@Base+0x2198>
   14580:	cmp	r0, #0
   14584:	beq	1453c <__assert_fail@plt+0x30d0>
   14588:	ldr	r3, [r4, #28]
   1458c:	b	14558 <__assert_fail@plt+0x30ec>
   14590:	bl	196ac <argp_parse@@Base+0x1b08>
   14594:	b	14528 <__assert_fail@plt+0x30bc>
   14598:	push	{r4, r5, r6, lr}
   1459c:	subs	r4, r2, #0
   145a0:	popeq	{r4, r5, r6, pc}
   145a4:	ldr	ip, [r4, #20]
   145a8:	cmp	ip, #0
   145ac:	popeq	{r4, r5, r6, pc}
   145b0:	mov	r6, r1
   145b4:	mov	r5, r0
   145b8:	mov	r1, r3
   145bc:	mov	r0, r4
   145c0:	bl	188e0 <argp_parse@@Base+0xd3c>
   145c4:	ldr	r3, [r4, #20]
   145c8:	mov	r1, r5
   145cc:	mov	r2, r0
   145d0:	mov	r0, r6
   145d4:	pop	{r4, r5, r6, lr}
   145d8:	bx	r3
   145dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e0:	mov	r5, r2
   145e4:	sub	sp, sp, #12
   145e8:	mov	r2, r1
   145ec:	ldr	r3, [r5, #16]
   145f0:	ldr	r1, [pc, #488]	; 147e0 <__assert_fail@plt+0x3374>
   145f4:	mov	r8, r0
   145f8:	bl	14598 <__assert_fail@plt+0x312c>
   145fc:	subs	r6, r0, #0
   14600:	beq	1470c <__assert_fail@plt+0x32a0>
   14604:	ldrb	r3, [r6]
   14608:	cmp	r3, #0
   1460c:	beq	14700 <__assert_fail@plt+0x3294>
   14610:	ldr	r3, [r5, #8]
   14614:	ldr	r3, [r3]
   14618:	cmp	r3, #0
   1461c:	beq	14644 <__assert_fail@plt+0x31d8>
   14620:	ldr	r4, [r5, #4]
   14624:	ldr	r3, [r4, #28]
   14628:	ldr	r2, [r4, #32]
   1462c:	cmp	r3, r2
   14630:	bcs	147c4 <__assert_fail@plt+0x3358>
   14634:	add	r1, r3, #1
   14638:	mov	r2, #10
   1463c:	str	r1, [r4, #28]
   14640:	strb	r2, [r3]
   14644:	ldr	sl, [pc, #408]	; 147e4 <__assert_fail@plt+0x3378>
   14648:	ldr	r0, [r5, #4]
   1464c:	ldr	r1, [sl, #24]
   14650:	bl	14504 <__assert_fail@plt+0x3098>
   14654:	ldr	r4, [r5, #4]
   14658:	ldr	r9, [sl, #24]
   1465c:	ldr	r7, [r4, #28]
   14660:	ldr	r3, [r4, #24]
   14664:	ldr	r2, [r4, #16]
   14668:	sub	r3, r7, r3
   1466c:	cmp	r3, r2
   14670:	strls	r9, [r4, #4]
   14674:	movls	fp, r4
   14678:	bhi	14748 <__assert_fail@plt+0x32dc>
   1467c:	str	r9, [fp, #12]
   14680:	mov	r0, r6
   14684:	bl	11304 <strlen@plt>
   14688:	subs	r9, r0, #0
   1468c:	beq	146c4 <__assert_fail@plt+0x3258>
   14690:	ldr	r2, [r4, #32]
   14694:	add	r3, r7, r9
   14698:	cmp	r2, r3
   1469c:	bcc	1472c <__assert_fail@plt+0x32c0>
   146a0:	mov	r2, r9
   146a4:	mov	r0, r7
   146a8:	mov	r1, r6
   146ac:	bl	111b4 <memcpy@plt>
   146b0:	ldr	r3, [r4, #28]
   146b4:	add	r9, r3, r9
   146b8:	str	r9, [r4, #28]
   146bc:	ldr	r4, [r5, #4]
   146c0:	ldr	r7, [r4, #28]
   146c4:	ldr	r3, [r4, #24]
   146c8:	ldr	r2, [r4, #16]
   146cc:	sub	r3, r7, r3
   146d0:	cmp	r3, r2
   146d4:	movls	r9, r4
   146d8:	bhi	14794 <__assert_fail@plt+0x3328>
   146dc:	ldr	r2, [r9, #32]
   146e0:	mov	r3, #0
   146e4:	cmp	r2, r7
   146e8:	str	r3, [r4, #4]
   146ec:	bls	147a8 <__assert_fail@plt+0x333c>
   146f0:	add	r2, r7, #1
   146f4:	mov	r3, #10
   146f8:	str	r2, [r9, #28]
   146fc:	strb	r3, [r7]
   14700:	ldr	r3, [r5, #8]
   14704:	mov	r2, #1
   14708:	str	r2, [r3, #4]
   1470c:	cmp	r8, r6
   14710:	beq	14724 <__assert_fail@plt+0x32b8>
   14714:	mov	r0, r6
   14718:	add	sp, sp, #12
   1471c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14720:	b	18a3c <argp_parse@@Base+0xe98>
   14724:	add	sp, sp, #12
   14728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1472c:	mov	r1, r9
   14730:	mov	r0, r4
   14734:	bl	19d3c <argp_parse@@Base+0x2198>
   14738:	cmp	r0, #0
   1473c:	beq	146bc <__assert_fail@plt+0x3250>
   14740:	ldr	r7, [r4, #28]
   14744:	b	146a0 <__assert_fail@plt+0x3234>
   14748:	mov	r0, r4
   1474c:	str	r9, [sp, #4]
   14750:	bl	196ac <argp_parse@@Base+0x1b08>
   14754:	ldr	fp, [r5, #4]
   14758:	ldr	r3, [sp, #4]
   1475c:	ldr	r9, [sl, #24]
   14760:	ldr	r7, [fp, #28]
   14764:	ldr	r2, [fp, #24]
   14768:	ldr	r1, [fp, #16]
   1476c:	sub	r2, r7, r2
   14770:	cmp	r2, r1
   14774:	str	r3, [r4, #4]
   14778:	movls	r4, fp
   1477c:	bls	1467c <__assert_fail@plt+0x3210>
   14780:	mov	r0, fp
   14784:	bl	196ac <argp_parse@@Base+0x1b08>
   14788:	ldr	r4, [r5, #4]
   1478c:	ldr	r7, [r4, #28]
   14790:	b	1467c <__assert_fail@plt+0x3210>
   14794:	mov	r0, r4
   14798:	bl	196ac <argp_parse@@Base+0x1b08>
   1479c:	ldr	r9, [r5, #4]
   147a0:	ldr	r7, [r9, #28]
   147a4:	b	146dc <__assert_fail@plt+0x3270>
   147a8:	mov	r1, #1
   147ac:	mov	r0, r9
   147b0:	bl	19d3c <argp_parse@@Base+0x2198>
   147b4:	cmp	r0, #0
   147b8:	beq	14700 <__assert_fail@plt+0x3294>
   147bc:	ldr	r7, [r9, #28]
   147c0:	b	146f0 <__assert_fail@plt+0x3284>
   147c4:	mov	r1, #1
   147c8:	mov	r0, r4
   147cc:	bl	19d3c <argp_parse@@Base+0x2198>
   147d0:	cmp	r0, #0
   147d4:	beq	14644 <__assert_fail@plt+0x31d8>
   147d8:	ldr	r3, [r4, #28]
   147dc:	b	14634 <__assert_fail@plt+0x31c8>
   147e0:	andeq	r0, r0, #3
   147e4:	andeq	sp, r2, r4, ror #11
   147e8:	ldr	r3, [r1, #12]
   147ec:	push	{r4, r5, r6, r7, r8, lr}
   147f0:	cmp	r3, #0
   147f4:	mov	r4, r1
   147f8:	mov	r6, r0
   147fc:	beq	148e4 <__assert_fail@plt+0x3478>
   14800:	ldr	r3, [r1, #8]
   14804:	ldr	r2, [r1]
   14808:	ldr	r7, [r3]
   1480c:	ldr	r3, [r3, #4]
   14810:	ldr	r5, [r2, #16]
   14814:	cmp	r3, #0
   14818:	cmpne	r7, #0
   1481c:	beq	14854 <__assert_fail@plt+0x33e8>
   14820:	ldr	r2, [r2, #12]
   14824:	ldr	r3, [r7, #12]
   14828:	cmp	r2, r3
   1482c:	beq	14854 <__assert_fail@plt+0x33e8>
   14830:	ldr	r8, [r1, #4]
   14834:	ldr	r3, [r8, #28]
   14838:	ldr	r2, [r8, #32]
   1483c:	cmp	r3, r2
   14840:	bcs	14974 <__assert_fail@plt+0x3508>
   14844:	add	r1, r3, #1
   14848:	mov	r2, #10
   1484c:	str	r1, [r8, #28]
   14850:	strb	r2, [r3]
   14854:	cmp	r5, #0
   14858:	beq	14940 <__assert_fail@plt+0x34d4>
   1485c:	ldr	r0, [r5]
   14860:	cmp	r0, #0
   14864:	beq	14940 <__assert_fail@plt+0x34d4>
   14868:	ldrb	r3, [r0]
   1486c:	cmp	r3, #0
   14870:	beq	14940 <__assert_fail@plt+0x34d4>
   14874:	cmp	r7, #0
   14878:	beq	148a8 <__assert_fail@plt+0x343c>
   1487c:	ldr	r3, [r7, #16]
   14880:	cmp	r5, r3
   14884:	beq	14940 <__assert_fail@plt+0x34d4>
   14888:	cmp	r3, #0
   1488c:	beq	148a8 <__assert_fail@plt+0x343c>
   14890:	ldr	r3, [r3, #12]
   14894:	cmp	r3, #0
   14898:	cmpne	r5, r3
   1489c:	bne	14890 <__assert_fail@plt+0x3424>
   148a0:	cmp	r5, r3
   148a4:	beq	14940 <__assert_fail@plt+0x34d4>
   148a8:	ldr	r3, [r4, #4]
   148ac:	ldr	r1, [r5, #16]
   148b0:	mov	r2, r4
   148b4:	ldr	r7, [r3, #12]
   148b8:	bl	145dc <__assert_fail@plt+0x3170>
   148bc:	ldr	r5, [r4, #4]
   148c0:	mov	r0, r5
   148c4:	ldr	r3, [r5, #28]
   148c8:	ldr	r1, [r5, #24]
   148cc:	ldr	r2, [r5, #16]
   148d0:	sub	r3, r3, r1
   148d4:	cmp	r3, r2
   148d8:	bhi	14968 <__assert_fail@plt+0x34fc>
   148dc:	str	r7, [r5, #12]
   148e0:	b	14944 <__assert_fail@plt+0x34d8>
   148e4:	ldr	r5, [r1, #4]
   148e8:	ldr	r3, [r5, #28]
   148ec:	ldr	r1, [r5, #32]
   148f0:	add	r2, r3, #2
   148f4:	cmp	r1, r2
   148f8:	bcc	14924 <__assert_fail@plt+0x34b8>
   148fc:	ldr	r2, [pc, #140]	; 14990 <__assert_fail@plt+0x3524>
   14900:	mov	r1, r6
   14904:	ldrh	r2, [r2]
   14908:	strh	r2, [r3]
   1490c:	ldr	r3, [r5, #28]
   14910:	ldr	r0, [r4, #4]
   14914:	add	r3, r3, #2
   14918:	str	r3, [r5, #28]
   1491c:	pop	{r4, r5, r6, r7, r8, lr}
   14920:	b	14504 <__assert_fail@plt+0x3098>
   14924:	mov	r1, #2
   14928:	mov	r0, r5
   1492c:	bl	19d3c <argp_parse@@Base+0x2198>
   14930:	cmp	r0, #0
   14934:	beq	14958 <__assert_fail@plt+0x34ec>
   14938:	ldr	r3, [r5, #28]
   1493c:	b	148fc <__assert_fail@plt+0x3490>
   14940:	ldr	r0, [r4, #4]
   14944:	mov	r3, #0
   14948:	str	r3, [r4, #12]
   1494c:	mov	r1, r6
   14950:	pop	{r4, r5, r6, r7, r8, lr}
   14954:	b	14504 <__assert_fail@plt+0x3098>
   14958:	ldr	r0, [r4, #4]
   1495c:	mov	r1, r6
   14960:	pop	{r4, r5, r6, r7, r8, lr}
   14964:	b	14504 <__assert_fail@plt+0x3098>
   14968:	bl	196ac <argp_parse@@Base+0x1b08>
   1496c:	ldr	r0, [r4, #4]
   14970:	b	148dc <__assert_fail@plt+0x3470>
   14974:	mov	r1, #1
   14978:	mov	r0, r8
   1497c:	bl	19d3c <argp_parse@@Base+0x2198>
   14980:	cmp	r0, #0
   14984:	beq	14854 <__assert_fail@plt+0x33e8>
   14988:	ldr	r3, [r8, #28]
   1498c:	b	14844 <__assert_fail@plt+0x33d8>
   14990:	andeq	fp, r1, r8, lsr #2
   14994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14998:	mov	r7, r3
   1499c:	ldr	sl, [r0, #12]
   149a0:	sub	sp, sp, #36	; 0x24
   149a4:	ldr	r3, [r0, #16]
   149a8:	cmp	sl, #0
   149ac:	mov	fp, r0
   149b0:	mov	r6, r2
   149b4:	str	r3, [sp, #16]
   149b8:	mov	r9, r1
   149bc:	ldr	r8, [sp, #72]	; 0x48
   149c0:	ldr	r5, [sp, #76]	; 0x4c
   149c4:	beq	14d94 <__assert_fail@plt+0x3928>
   149c8:	mov	r1, #11
   149cc:	mov	r0, sl
   149d0:	bl	11310 <strchr@plt>
   149d4:	cmp	r6, #0
   149d8:	bne	14cb0 <__assert_fail@plt+0x3844>
   149dc:	cmp	r0, #0
   149e0:	ldr	r3, [fp, #20]
   149e4:	beq	14eec <__assert_fail@plt+0x3a80>
   149e8:	cmp	r3, #0
   149ec:	sub	r4, r0, sl
   149f0:	beq	14e84 <__assert_fail@plt+0x3a18>
   149f4:	cmp	r4, #0
   149f8:	beq	14e24 <__assert_fail@plt+0x39b8>
   149fc:	mov	r0, sl
   14a00:	mov	r1, r4
   14a04:	bl	111a8 <strndup@plt>
   14a08:	mov	r3, #1
   14a0c:	str	r3, [sp, #24]
   14a10:	mov	sl, r0
   14a14:	adds	r3, r0, #0
   14a18:	movne	r3, #1
   14a1c:	str	r3, [sp, #20]
   14a20:	mov	r1, r9
   14a24:	mov	r0, fp
   14a28:	bl	188e0 <argp_parse@@Base+0xd3c>
   14a2c:	ldr	r3, [fp, #20]
   14a30:	str	r0, [sp, #12]
   14a34:	ldr	r0, [pc, #1272]	; 14f34 <__assert_fail@plt+0x3ac8>
   14a38:	ldr	r2, [sp, #12]
   14a3c:	mov	r1, sl
   14a40:	blx	r3
   14a44:	subs	r3, r0, #0
   14a48:	beq	14dd4 <__assert_fail@plt+0x3968>
   14a4c:	cmp	r7, #0
   14a50:	beq	14a74 <__assert_fail@plt+0x3608>
   14a54:	ldr	r2, [r5, #28]
   14a58:	ldr	r1, [r5, #32]
   14a5c:	cmp	r2, r1
   14a60:	bcs	14ddc <__assert_fail@plt+0x3970>
   14a64:	add	r0, r2, #1
   14a68:	mov	r1, #10
   14a6c:	str	r0, [r5, #28]
   14a70:	strb	r1, [r2]
   14a74:	ldr	r2, [sp, #24]
   14a78:	cmp	r3, sl
   14a7c:	movne	r2, #0
   14a80:	andeq	r2, r2, #1
   14a84:	cmp	r2, #0
   14a88:	beq	14cf4 <__assert_fail@plt+0x3888>
   14a8c:	ldr	r0, [r5, #28]
   14a90:	ldr	r1, [r5, #32]
   14a94:	add	r2, r0, r4
   14a98:	cmp	r1, r2
   14a9c:	bcs	14d54 <__assert_fail@plt+0x38e8>
   14aa0:	mov	r1, r4
   14aa4:	mov	r0, r5
   14aa8:	str	r3, [sp, #24]
   14aac:	bl	19d3c <argp_parse@@Base+0x2198>
   14ab0:	ldr	r3, [sp, #24]
   14ab4:	cmp	r0, #0
   14ab8:	bne	14d50 <__assert_fail@plt+0x38e4>
   14abc:	ldr	r4, [r5, #28]
   14ac0:	ldr	r1, [r5, #24]
   14ac4:	ldr	r2, [r5, #16]
   14ac8:	sub	r4, r4, r1
   14acc:	cmp	r4, r2
   14ad0:	bhi	14d78 <__assert_fail@plt+0x390c>
   14ad4:	ldr	r2, [r5, #20]
   14ad8:	ldr	r1, [r5, #4]
   14adc:	bic	r2, r2, r2, asr #31
   14ae0:	cmp	r1, r2
   14ae4:	bcs	14b08 <__assert_fail@plt+0x369c>
   14ae8:	ldr	r2, [r5, #28]
   14aec:	ldr	r1, [r5, #32]
   14af0:	cmp	r2, r1
   14af4:	bcs	14e00 <__assert_fail@plt+0x3994>
   14af8:	add	r0, r2, #1
   14afc:	mov	r1, #10
   14b00:	str	r0, [r5, #28]
   14b04:	strb	r1, [r2]
   14b08:	cmp	r3, sl
   14b0c:	moveq	r4, #1
   14b10:	beq	14b20 <__assert_fail@plt+0x36b4>
   14b14:	mov	r0, r3
   14b18:	bl	18a3c <argp_parse@@Base+0xe98>
   14b1c:	mov	r4, #1
   14b20:	ldr	r3, [sp, #20]
   14b24:	cmp	r3, #0
   14b28:	beq	14b40 <__assert_fail@plt+0x36d4>
   14b2c:	ldr	r3, [fp, #20]
   14b30:	cmp	r3, #0
   14b34:	beq	14c24 <__assert_fail@plt+0x37b8>
   14b38:	mov	r0, sl
   14b3c:	bl	18a3c <argp_parse@@Base+0xe98>
   14b40:	cmp	r6, #0
   14b44:	beq	14c24 <__assert_fail@plt+0x37b8>
   14b48:	ldr	r3, [fp, #20]
   14b4c:	cmp	r3, #0
   14b50:	beq	14c24 <__assert_fail@plt+0x37b8>
   14b54:	ldr	r2, [sp, #12]
   14b58:	mov	r1, #0
   14b5c:	ldr	r0, [pc, #980]	; 14f38 <__assert_fail@plt+0x3acc>
   14b60:	blx	r3
   14b64:	subs	sl, r0, #0
   14b68:	beq	14c24 <__assert_fail@plt+0x37b8>
   14b6c:	orrs	r3, r7, r4
   14b70:	beq	14b94 <__assert_fail@plt+0x3728>
   14b74:	ldr	r3, [r5, #28]
   14b78:	ldr	r2, [r5, #32]
   14b7c:	cmp	r3, r2
   14b80:	bcs	14ebc <__assert_fail@plt+0x3a50>
   14b84:	add	r1, r3, #1
   14b88:	mov	r2, #10
   14b8c:	str	r1, [r5, #28]
   14b90:	strb	r2, [r3]
   14b94:	mov	r0, sl
   14b98:	bl	11304 <strlen@plt>
   14b9c:	subs	r4, r0, #0
   14ba0:	beq	14bcc <__assert_fail@plt+0x3760>
   14ba4:	ldr	r0, [r5, #28]
   14ba8:	ldr	r2, [r5, #32]
   14bac:	add	r3, r0, r4
   14bb0:	cmp	r2, r3
   14bb4:	bcs	14e34 <__assert_fail@plt+0x39c8>
   14bb8:	mov	r1, r4
   14bbc:	mov	r0, r5
   14bc0:	bl	19d3c <argp_parse@@Base+0x2198>
   14bc4:	cmp	r0, #0
   14bc8:	bne	14e30 <__assert_fail@plt+0x39c4>
   14bcc:	mov	r0, sl
   14bd0:	bl	18a3c <argp_parse@@Base+0xe98>
   14bd4:	ldr	r3, [r5, #28]
   14bd8:	ldr	r1, [r5, #24]
   14bdc:	ldr	r2, [r5, #16]
   14be0:	sub	r3, r3, r1
   14be4:	cmp	r3, r2
   14be8:	bhi	14e50 <__assert_fail@plt+0x39e4>
   14bec:	ldr	r3, [r5, #20]
   14bf0:	ldr	r2, [r5, #4]
   14bf4:	bic	r3, r3, r3, asr #31
   14bf8:	cmp	r2, r3
   14bfc:	bcs	14d8c <__assert_fail@plt+0x3920>
   14c00:	ldr	r3, [r5, #28]
   14c04:	ldr	r2, [r5, #32]
   14c08:	cmp	r3, r2
   14c0c:	bcs	14ea0 <__assert_fail@plt+0x3a34>
   14c10:	mov	r4, #1
   14c14:	add	r2, r3, r4
   14c18:	str	r2, [r5, #28]
   14c1c:	mov	r2, #10
   14c20:	strb	r2, [r3]
   14c24:	ldr	fp, [sp, #16]
   14c28:	cmp	fp, #0
   14c2c:	beq	14ca4 <__assert_fail@plt+0x3838>
   14c30:	ldr	r3, [fp]
   14c34:	cmp	r3, #0
   14c38:	beq	14ca4 <__assert_fail@plt+0x3838>
   14c3c:	eor	r2, r4, #1
   14c40:	and	r2, r2, #1
   14c44:	clz	sl, r8
   14c48:	lsr	sl, sl, #5
   14c4c:	orrs	r2, sl, r2
   14c50:	bne	14c6c <__assert_fail@plt+0x3800>
   14c54:	b	14ed8 <__assert_fail@plt+0x3a6c>
   14c58:	cmp	r4, #0
   14c5c:	movne	r2, sl
   14c60:	orreq	r2, sl, #1
   14c64:	cmp	r2, #0
   14c68:	beq	14ca4 <__assert_fail@plt+0x3838>
   14c6c:	orrs	r2, r7, r4
   14c70:	mov	r0, r3
   14c74:	str	r5, [sp, #4]
   14c78:	movne	r3, #1
   14c7c:	moveq	r3, #0
   14c80:	str	r8, [sp]
   14c84:	mov	r2, r6
   14c88:	mov	r1, r9
   14c8c:	bl	14994 <__assert_fail@plt+0x3528>
   14c90:	ldr	r3, [fp, #16]
   14c94:	add	fp, fp, #16
   14c98:	cmp	r3, #0
   14c9c:	orr	r4, r4, r0
   14ca0:	bne	14c58 <__assert_fail@plt+0x37ec>
   14ca4:	mov	r0, r4
   14ca8:	add	sp, sp, #36	; 0x24
   14cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb0:	cmp	r0, #0
   14cb4:	addne	sl, r0, #1
   14cb8:	beq	14e7c <__assert_fail@plt+0x3a10>
   14cbc:	ldr	r3, [fp, #20]
   14cc0:	cmp	r3, #0
   14cc4:	beq	14e5c <__assert_fail@plt+0x39f0>
   14cc8:	mov	r3, #0
   14ccc:	mov	r1, r9
   14cd0:	mov	r0, fp
   14cd4:	mov	r4, r3
   14cd8:	str	r3, [sp, #20]
   14cdc:	bl	188e0 <argp_parse@@Base+0xd3c>
   14ce0:	str	r4, [sp, #24]
   14ce4:	ldr	r3, [fp, #20]
   14ce8:	str	r0, [sp, #12]
   14cec:	ldr	r0, [pc, #584]	; 14f3c <__assert_fail@plt+0x3ad0>
   14cf0:	b	14a38 <__assert_fail@plt+0x35cc>
   14cf4:	mov	r0, r3
   14cf8:	str	r3, [sp, #24]
   14cfc:	bl	11304 <strlen@plt>
   14d00:	ldr	r3, [sp, #24]
   14d04:	subs	r4, r0, #0
   14d08:	beq	14abc <__assert_fail@plt+0x3650>
   14d0c:	ldr	r0, [r5, #28]
   14d10:	ldr	r1, [r5, #32]
   14d14:	add	r2, r0, r4
   14d18:	cmp	r1, r2
   14d1c:	bcs	14d40 <__assert_fail@plt+0x38d4>
   14d20:	mov	r1, r4
   14d24:	mov	r0, r5
   14d28:	str	r3, [sp, #24]
   14d2c:	bl	19d3c <argp_parse@@Base+0x2198>
   14d30:	ldr	r3, [sp, #24]
   14d34:	cmp	r0, #0
   14d38:	beq	14abc <__assert_fail@plt+0x3650>
   14d3c:	ldr	r0, [r5, #28]
   14d40:	mov	r2, r4
   14d44:	mov	r1, r3
   14d48:	str	r3, [sp, #24]
   14d4c:	b	14d60 <__assert_fail@plt+0x38f4>
   14d50:	ldr	r0, [r5, #28]
   14d54:	mov	r2, r4
   14d58:	mov	r1, sl
   14d5c:	str	r3, [sp, #24]
   14d60:	bl	111b4 <memcpy@plt>
   14d64:	ldr	r2, [r5, #28]
   14d68:	ldr	r3, [sp, #24]
   14d6c:	add	r4, r2, r4
   14d70:	str	r4, [r5, #28]
   14d74:	b	14ac0 <__assert_fail@plt+0x3654>
   14d78:	mov	r0, r5
   14d7c:	str	r3, [sp, #24]
   14d80:	bl	196ac <argp_parse@@Base+0x1b08>
   14d84:	ldr	r3, [sp, #24]
   14d88:	b	14ad4 <__assert_fail@plt+0x3668>
   14d8c:	mov	r4, #1
   14d90:	b	14c24 <__assert_fail@plt+0x37b8>
   14d94:	ldr	r4, [r0, #20]
   14d98:	cmp	r4, #0
   14d9c:	beq	14ee4 <__assert_fail@plt+0x3a78>
   14da0:	bl	188e0 <argp_parse@@Base+0xd3c>
   14da4:	cmp	r6, #0
   14da8:	ldr	r3, [fp, #20]
   14dac:	strne	sl, [sp, #20]
   14db0:	strne	sl, [sp, #24]
   14db4:	movne	r4, sl
   14db8:	streq	r6, [sp, #20]
   14dbc:	streq	r6, [sp, #24]
   14dc0:	moveq	r4, r6
   14dc4:	str	r0, [sp, #12]
   14dc8:	ldrne	r0, [pc, #364]	; 14f3c <__assert_fail@plt+0x3ad0>
   14dcc:	ldreq	r0, [pc, #352]	; 14f34 <__assert_fail@plt+0x3ac8>
   14dd0:	b	14a38 <__assert_fail@plt+0x35cc>
   14dd4:	mov	r4, r3
   14dd8:	b	14b20 <__assert_fail@plt+0x36b4>
   14ddc:	mov	r1, #1
   14de0:	mov	r0, r5
   14de4:	str	r3, [sp, #28]
   14de8:	bl	19d3c <argp_parse@@Base+0x2198>
   14dec:	ldr	r3, [sp, #28]
   14df0:	cmp	r0, #0
   14df4:	beq	14a74 <__assert_fail@plt+0x3608>
   14df8:	ldr	r2, [r5, #28]
   14dfc:	b	14a64 <__assert_fail@plt+0x35f8>
   14e00:	mov	r1, #1
   14e04:	mov	r0, r5
   14e08:	str	r3, [sp, #24]
   14e0c:	bl	19d3c <argp_parse@@Base+0x2198>
   14e10:	ldr	r3, [sp, #24]
   14e14:	cmp	r0, #0
   14e18:	beq	14b08 <__assert_fail@plt+0x369c>
   14e1c:	ldr	r2, [r5, #28]
   14e20:	b	14af8 <__assert_fail@plt+0x368c>
   14e24:	str	r4, [sp, #20]
   14e28:	str	r4, [sp, #24]
   14e2c:	b	14a20 <__assert_fail@plt+0x35b4>
   14e30:	ldr	r0, [r5, #28]
   14e34:	mov	r2, r4
   14e38:	mov	r1, sl
   14e3c:	bl	111b4 <memcpy@plt>
   14e40:	ldr	r3, [r5, #28]
   14e44:	add	r4, r3, r4
   14e48:	str	r4, [r5, #28]
   14e4c:	b	14bcc <__assert_fail@plt+0x3760>
   14e50:	mov	r0, r5
   14e54:	bl	196ac <argp_parse@@Base+0x1b08>
   14e58:	b	14bec <__assert_fail@plt+0x3780>
   14e5c:	cmp	sl, #0
   14e60:	beq	14ee0 <__assert_fail@plt+0x3a74>
   14e64:	str	r3, [sp, #20]
   14e68:	str	r3, [sp, #24]
   14e6c:	mov	r4, r3
   14e70:	str	r3, [sp, #12]
   14e74:	mov	r3, sl
   14e78:	b	14a4c <__assert_fail@plt+0x35e0>
   14e7c:	mov	sl, r0
   14e80:	b	14cbc <__assert_fail@plt+0x3850>
   14e84:	adds	r3, r4, #0
   14e88:	movne	r3, #1
   14e8c:	str	r3, [sp, #24]
   14e90:	str	r3, [sp, #20]
   14e94:	str	r6, [sp, #12]
   14e98:	mov	r3, sl
   14e9c:	b	14a4c <__assert_fail@plt+0x35e0>
   14ea0:	mov	r1, #1
   14ea4:	mov	r0, r5
   14ea8:	bl	19d3c <argp_parse@@Base+0x2198>
   14eac:	cmp	r0, #0
   14eb0:	beq	14d8c <__assert_fail@plt+0x3920>
   14eb4:	ldr	r3, [r5, #28]
   14eb8:	b	14c10 <__assert_fail@plt+0x37a4>
   14ebc:	mov	r1, #1
   14ec0:	mov	r0, r5
   14ec4:	bl	19d3c <argp_parse@@Base+0x2198>
   14ec8:	cmp	r0, #0
   14ecc:	beq	14b94 <__assert_fail@plt+0x3728>
   14ed0:	ldr	r3, [r5, #28]
   14ed4:	b	14b84 <__assert_fail@plt+0x3718>
   14ed8:	mov	r4, #1
   14edc:	b	14ca4 <__assert_fail@plt+0x3838>
   14ee0:	mov	r4, sl
   14ee4:	str	r4, [sp, #12]
   14ee8:	b	14b40 <__assert_fail@plt+0x36d4>
   14eec:	cmp	r3, #0
   14ef0:	beq	14f1c <__assert_fail@plt+0x3ab0>
   14ef4:	mov	r1, r9
   14ef8:	mov	r0, fp
   14efc:	bl	188e0 <argp_parse@@Base+0xd3c>
   14f00:	mov	r4, r6
   14f04:	ldr	r3, [fp, #20]
   14f08:	str	r6, [sp, #20]
   14f0c:	str	r6, [sp, #24]
   14f10:	str	r0, [sp, #12]
   14f14:	ldr	r0, [pc, #24]	; 14f34 <__assert_fail@plt+0x3ac8>
   14f18:	b	14a38 <__assert_fail@plt+0x35cc>
   14f1c:	mov	r3, sl
   14f20:	str	r6, [sp, #20]
   14f24:	str	r6, [sp, #24]
   14f28:	mov	r4, r6
   14f2c:	str	r6, [sp, #12]
   14f30:	b	14a4c <__assert_fail@plt+0x35e0>
   14f34:	andeq	r0, r0, #1
   14f38:	andeq	r0, r0, #4
   14f3c:	andeq	r0, r0, #2
   14f40:	ldr	r3, [r0, #12]
   14f44:	ldr	r2, [r1, #12]
   14f48:	push	{r4, r5, r6, lr}
   14f4c:	cmp	r3, r2
   14f50:	beq	14fa0 <__assert_fail@plt+0x3b34>
   14f54:	mov	r5, r1
   14f58:	mov	r4, r0
   14f5c:	mov	r1, r2
   14f60:	mov	r0, r3
   14f64:	bl	14f40 <__assert_fail@plt+0x3ad4>
   14f68:	cmp	r0, #0
   14f6c:	popne	{r4, r5, r6, pc}
   14f70:	ldr	r3, [r5, #8]
   14f74:	ldr	r0, [r4, #8]
   14f78:	mvn	r2, r3
   14f7c:	lsr	r2, r2, #31
   14f80:	cmp	r2, r0, lsr #31
   14f84:	subne	r0, r0, r3
   14f88:	subeq	r0, r3, r0
   14f8c:	cmp	r0, #0
   14f90:	ldreq	r3, [r5, #4]
   14f94:	ldreq	r0, [r4, #4]
   14f98:	subeq	r0, r3, r0
   14f9c:	pop	{r4, r5, r6, pc}
   14fa0:	ldr	r3, [r1, #8]
   14fa4:	ldr	r2, [r0, #8]
   14fa8:	mvn	ip, r3
   14fac:	ldr	lr, [r1, #4]
   14fb0:	lsr	ip, ip, #31
   14fb4:	cmp	ip, r2, lsr #31
   14fb8:	ldr	r1, [r0, #4]
   14fbc:	subne	r0, r2, r3
   14fc0:	subeq	r0, r3, r2
   14fc4:	cmp	r0, #0
   14fc8:	subeq	r0, lr, r1
   14fcc:	pop	{r4, r5, r6, pc}
   14fd0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14fd4:	sub	sp, sp, #12
   14fd8:	ldr	lr, [r0, #16]
   14fdc:	cmp	lr, #0
   14fe0:	movne	r2, lr
   14fe4:	bne	14ff0 <__assert_fail@plt+0x3b84>
   14fe8:	b	152b4 <__assert_fail@plt+0x3e48>
   14fec:	mov	r2, r3
   14ff0:	ldr	r3, [r2, #12]
   14ff4:	cmp	r3, #0
   14ff8:	bne	14fec <__assert_fail@plt+0x3b80>
   14ffc:	ldr	ip, [r1, #16]
   15000:	ldr	r4, [r2, #8]
   15004:	cmp	ip, #0
   15008:	movne	r2, ip
   1500c:	bne	15018 <__assert_fail@plt+0x3bac>
   15010:	b	152c8 <__assert_fail@plt+0x3e5c>
   15014:	mov	r2, r3
   15018:	ldr	r3, [r2, #12]
   1501c:	cmp	r3, #0
   15020:	bne	15014 <__assert_fail@plt+0x3ba8>
   15024:	ldr	r3, [r2, #8]
   15028:	mvn	r2, r3
   1502c:	lsr	r2, r2, #31
   15030:	cmp	r2, r4, lsr #31
   15034:	subne	r4, r4, r3
   15038:	subeq	r4, r3, r4
   1503c:	cmp	r4, #0
   15040:	bne	150a8 <__assert_fail@plt+0x3c3c>
   15044:	adds	r4, ip, #0
   15048:	movne	r4, #1
   1504c:	cmp	lr, #0
   15050:	rsbeq	r4, r4, #0
   15054:	rsbne	r4, r4, #1
   15058:	cmp	r4, #0
   1505c:	bne	150a8 <__assert_fail@plt+0x3c3c>
   15060:	cmp	lr, #0
   15064:	mov	r5, r1
   15068:	mov	r6, r0
   1506c:	beq	150c4 <__assert_fail@plt+0x3c58>
   15070:	ldr	r0, [lr, #20]
   15074:	ldr	r2, [ip, #20]
   15078:	cmp	r0, r2
   1507c:	ble	15288 <__assert_fail@plt+0x3e1c>
   15080:	mov	r0, lr
   15084:	ldr	r0, [r0, #12]
   15088:	ldr	r3, [r0, #20]
   1508c:	cmp	r2, r3
   15090:	blt	15084 <__assert_fail@plt+0x3c18>
   15094:	mov	r1, ip
   15098:	bl	14f40 <__assert_fail@plt+0x3ad4>
   1509c:	cmp	r0, #0
   150a0:	movne	r4, r0
   150a4:	moveq	r4, #1
   150a8:	mov	r0, r4
   150ac:	add	sp, sp, #12
   150b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150b4:	mov	r0, lr
   150b8:	bl	14f40 <__assert_fail@plt+0x3ad4>
   150bc:	subs	r4, r0, #0
   150c0:	bne	150a8 <__assert_fail@plt+0x3c3c>
   150c4:	ldr	r4, [r5, #12]
   150c8:	ldr	r3, [r6, #12]
   150cc:	mvn	r2, r4
   150d0:	lsr	r2, r2, #31
   150d4:	cmp	r2, r3, lsr #31
   150d8:	subne	r4, r3, r4
   150dc:	subeq	r4, r4, r3
   150e0:	cmp	r4, #0
   150e4:	bne	150a8 <__assert_fail@plt+0x3c3c>
   150e8:	ldr	r2, [r6, #4]
   150ec:	ldr	lr, [r6]
   150f0:	cmp	r2, #0
   150f4:	beq	15120 <__assert_fail@plt+0x3cb4>
   150f8:	add	r3, lr, #24
   150fc:	ldr	r1, [r3, #-24]	; 0xffffffe8
   15100:	cmp	r1, #0
   15104:	beq	15114 <__assert_fail@plt+0x3ca8>
   15108:	ldr	r0, [r3, #-12]
   1510c:	tst	r0, #2
   15110:	beq	152d0 <__assert_fail@plt+0x3e64>
   15114:	subs	r2, r2, #1
   15118:	add	r3, r3, #24
   1511c:	bne	150fc <__assert_fail@plt+0x3c90>
   15120:	ldr	r2, [r5, #4]
   15124:	mov	ip, #0
   15128:	cmp	r2, ip
   1512c:	str	ip, [sp]
   15130:	ldr	r3, [r5]
   15134:	beq	15340 <__assert_fail@plt+0x3ed4>
   15138:	add	r3, r3, #24
   1513c:	ldr	r1, [r3, #-24]	; 0xffffffe8
   15140:	cmp	r1, #0
   15144:	beq	15154 <__assert_fail@plt+0x3ce8>
   15148:	ldr	r0, [r3, #-12]
   1514c:	tst	r0, #2
   15150:	beq	15164 <__assert_fail@plt+0x3cf8>
   15154:	subs	r2, r2, #1
   15158:	add	r3, r3, #24
   1515c:	bne	1513c <__assert_fail@plt+0x3cd0>
   15160:	mov	r1, r2
   15164:	ldr	r3, [lr, #12]
   15168:	str	r1, [sp, #4]
   1516c:	ands	r3, ip, r3, lsr #3
   15170:	beq	15338 <__assert_fail@plt+0x3ecc>
   15174:	mov	r0, sp
   15178:	bl	14440 <__assert_fail@plt+0x2fd4>
   1517c:	ldr	r3, [r5]
   15180:	cmp	r0, #0
   15184:	bne	15324 <__assert_fail@plt+0x3eb8>
   15188:	ldr	r3, [r3, #12]
   1518c:	tst	r3, #8
   15190:	beq	151b8 <__assert_fail@plt+0x3d4c>
   15194:	ldr	r3, [sp, #4]
   15198:	cmp	r3, #0
   1519c:	beq	151b8 <__assert_fail@plt+0x3d4c>
   151a0:	add	r0, sp, #4
   151a4:	bl	14440 <__assert_fail@plt+0x2fd4>
   151a8:	cmp	r0, #0
   151ac:	subne	r4, r4, #1
   151b0:	cmp	r4, #0
   151b4:	bne	150a8 <__assert_fail@plt+0x3c3c>
   151b8:	ldr	r2, [r6, #20]
   151bc:	mov	r0, r6
   151c0:	mov	r3, #0
   151c4:	ldr	r2, [r2, #24]
   151c8:	ldr	r1, [pc, #408]	; 15368 <__assert_fail@plt+0x3efc>
   151cc:	bl	14304 <__assert_fail@plt+0x2e98>
   151d0:	ldr	r2, [r5, #20]
   151d4:	mov	r3, #0
   151d8:	ldr	r1, [pc, #392]	; 15368 <__assert_fail@plt+0x3efc>
   151dc:	ldr	r2, [r2, #24]
   151e0:	uxtb	r6, r0
   151e4:	mov	r0, r5
   151e8:	bl	14304 <__assert_fail@plt+0x2e98>
   151ec:	cmp	r6, #0
   151f0:	lslne	r4, r6, #2
   151f4:	movne	r7, r6
   151f8:	uxtb	r5, r0
   151fc:	beq	15308 <__assert_fail@plt+0x3e9c>
   15200:	cmp	r5, #0
   15204:	lslne	r9, r5, #2
   15208:	movne	r8, r5
   1520c:	beq	152ec <__assert_fail@plt+0x3e80>
   15210:	bl	112b0 <__ctype_tolower_loc@plt>
   15214:	ldr	r3, [r0]
   15218:	ldr	r4, [r3, r4]
   1521c:	ldr	r3, [r3, r9]
   15220:	subs	r4, r4, r3
   15224:	bne	150a8 <__assert_fail@plt+0x3c3c>
   15228:	subs	r4, r8, r7
   1522c:	bne	150a8 <__assert_fail@plt+0x3c3c>
   15230:	adds	r4, r5, #0
   15234:	movne	r4, #1
   15238:	cmp	r6, #0
   1523c:	rsbeq	r4, r4, #0
   15240:	rsbne	r4, r4, #1
   15244:	cmp	r4, #0
   15248:	bne	150a8 <__assert_fail@plt+0x3c3c>
   1524c:	cmp	r6, #0
   15250:	bne	150a8 <__assert_fail@plt+0x3c3c>
   15254:	ldm	sp, {r0, r1}
   15258:	adds	r4, r1, #0
   1525c:	movne	r4, #1
   15260:	cmp	r0, #0
   15264:	rsbeq	r4, r4, #0
   15268:	rsbne	r4, r4, #1
   1526c:	cmp	r4, #0
   15270:	bne	150a8 <__assert_fail@plt+0x3c3c>
   15274:	cmp	r0, #0
   15278:	beq	150a8 <__assert_fail@plt+0x3c3c>
   1527c:	bl	11238 <strcasecmp@plt>
   15280:	mov	r4, r0
   15284:	b	150a8 <__assert_fail@plt+0x3c3c>
   15288:	mov	r1, ip
   1528c:	bge	150b4 <__assert_fail@plt+0x3c48>
   15290:	ldr	r1, [r1, #12]
   15294:	ldr	r3, [r1, #20]
   15298:	cmp	r0, r3
   1529c:	blt	15290 <__assert_fail@plt+0x3e24>
   152a0:	mov	r0, lr
   152a4:	bl	14f40 <__assert_fail@plt+0x3ad4>
   152a8:	subs	r4, r0, #0
   152ac:	mvneq	r4, #0
   152b0:	b	150a8 <__assert_fail@plt+0x3c3c>
   152b4:	ldr	ip, [r1, #16]
   152b8:	ldr	r4, [r0, #12]
   152bc:	cmp	ip, #0
   152c0:	movne	r2, ip
   152c4:	bne	15018 <__assert_fail@plt+0x3bac>
   152c8:	ldr	r3, [r1, #12]
   152cc:	b	15028 <__assert_fail@plt+0x3bbc>
   152d0:	ldr	r2, [r5, #4]
   152d4:	str	r1, [sp]
   152d8:	cmp	r2, #0
   152dc:	ldr	r3, [r5]
   152e0:	beq	15348 <__assert_fail@plt+0x3edc>
   152e4:	mov	ip, #1
   152e8:	b	15138 <__assert_fail@plt+0x3ccc>
   152ec:	ldr	r3, [sp, #4]
   152f0:	cmp	r3, #0
   152f4:	moveq	r9, r5
   152f8:	ldrbne	r8, [r3]
   152fc:	moveq	r8, r5
   15300:	lslne	r9, r8, #2
   15304:	b	15210 <__assert_fail@plt+0x3da4>
   15308:	ldr	r3, [sp]
   1530c:	cmp	r3, #0
   15310:	moveq	r4, r6
   15314:	ldrbne	r7, [r3]
   15318:	moveq	r7, r6
   1531c:	lslne	r4, r7, #2
   15320:	b	15200 <__assert_fail@plt+0x3d94>
   15324:	ldr	r3, [r3, #12]
   15328:	tst	r3, #8
   1532c:	bne	15354 <__assert_fail@plt+0x3ee8>
   15330:	mov	r4, #1
   15334:	b	150a8 <__assert_fail@plt+0x3c3c>
   15338:	ldr	r3, [r5]
   1533c:	b	15188 <__assert_fail@plt+0x3d1c>
   15340:	str	r2, [sp, #4]
   15344:	b	151b8 <__assert_fail@plt+0x3d4c>
   15348:	mov	r1, r2
   1534c:	mov	ip, #1
   15350:	b	15164 <__assert_fail@plt+0x3cf8>
   15354:	ldr	r3, [sp, #4]
   15358:	mov	r4, #1
   1535c:	cmp	r3, #0
   15360:	bne	151a0 <__assert_fail@plt+0x3d34>
   15364:	b	150a8 <__assert_fail@plt+0x3c3c>
   15368:	strdeq	r4, [r1], -ip
   1536c:	ldr	r3, [r0, #28]
   15370:	ldr	r2, [r0, #24]
   15374:	push	{r4, r5, r6, lr}
   15378:	mov	r5, r1
   1537c:	ldr	r1, [r0, #16]
   15380:	sub	r2, r3, r2
   15384:	cmp	r2, r1
   15388:	mov	r4, r0
   1538c:	movls	r2, r3
   15390:	bhi	153ec <__assert_fail@plt+0x3f80>
   15394:	ldr	r1, [r4, #20]
   15398:	ldr	r0, [r4, #8]
   1539c:	cmp	r1, #0
   153a0:	addge	r5, r5, r1
   153a4:	cmp	r5, r0
   153a8:	bcc	153cc <__assert_fail@plt+0x3f60>
   153ac:	ldr	r1, [r4, #32]
   153b0:	cmp	r1, r3
   153b4:	bls	153fc <__assert_fail@plt+0x3f90>
   153b8:	add	r1, r2, #1
   153bc:	mov	r3, #10
   153c0:	str	r1, [r4, #28]
   153c4:	strb	r3, [r2]
   153c8:	pop	{r4, r5, r6, pc}
   153cc:	ldr	r2, [r4, #32]
   153d0:	cmp	r2, r3
   153d4:	bls	15418 <__assert_fail@plt+0x3fac>
   153d8:	add	r1, r3, #1
   153dc:	mov	r2, #32
   153e0:	str	r1, [r4, #28]
   153e4:	strb	r2, [r3]
   153e8:	pop	{r4, r5, r6, pc}
   153ec:	bl	196ac <argp_parse@@Base+0x1b08>
   153f0:	ldr	r3, [r4, #28]
   153f4:	mov	r2, r3
   153f8:	b	15394 <__assert_fail@plt+0x3f28>
   153fc:	mov	r1, #1
   15400:	mov	r0, r4
   15404:	bl	19d3c <argp_parse@@Base+0x2198>
   15408:	cmp	r0, #0
   1540c:	popeq	{r4, r5, r6, pc}
   15410:	ldr	r2, [r4, #28]
   15414:	b	153b8 <__assert_fail@plt+0x3f4c>
   15418:	mov	r1, #1
   1541c:	mov	r0, r4
   15420:	bl	19d3c <argp_parse@@Base+0x2198>
   15424:	cmp	r0, #0
   15428:	popeq	{r4, r5, r6, pc}
   1542c:	ldr	r3, [r4, #28]
   15430:	b	153d8 <__assert_fail@plt+0x3f6c>
   15434:	push	{r4, r5, r6, lr}
   15438:	ldr	r5, [r0, #8]
   1543c:	ldr	r2, [r0, #12]
   15440:	ldr	ip, [r1, #12]
   15444:	cmp	r5, #0
   15448:	orr	r2, r2, ip
   1544c:	beq	154b4 <__assert_fail@plt+0x4048>
   15450:	tst	r2, #16
   15454:	bne	15490 <__assert_fail@plt+0x4024>
   15458:	tst	r2, #1
   1545c:	mov	r6, r3
   15460:	mov	r4, r0
   15464:	bne	15498 <__assert_fail@plt+0x402c>
   15468:	mov	r0, r5
   1546c:	bl	11304 <strlen@plt>
   15470:	add	r1, r0, #6
   15474:	mov	r0, r6
   15478:	bl	1536c <__assert_fail@plt+0x3f00>
   1547c:	mov	r3, r5
   15480:	ldr	r2, [r4, #4]
   15484:	mov	r0, r6
   15488:	ldr	r1, [pc, #56]	; 154c8 <__assert_fail@plt+0x405c>
   1548c:	bl	19d5c <argp_parse@@Base+0x21b8>
   15490:	mov	r0, #0
   15494:	pop	{r4, r5, r6, pc}
   15498:	ldr	r2, [r0, #4]
   1549c:	mov	r3, r5
   154a0:	mov	r0, r6
   154a4:	ldr	r1, [pc, #32]	; 154cc <__assert_fail@plt+0x4060>
   154a8:	bl	19d5c <argp_parse@@Base+0x21b8>
   154ac:	mov	r0, #0
   154b0:	pop	{r4, r5, r6, pc}
   154b4:	ldr	r5, [r1, #8]
   154b8:	cmp	r5, #0
   154bc:	bne	15450 <__assert_fail@plt+0x3fe4>
   154c0:	mov	r0, #0
   154c4:	pop	{r4, r5, r6, pc}
   154c8:	andeq	fp, r1, r8, asr #29
   154cc:			; <UNDEFINED> instruction: 0x0001bebc
   154d0:	mov	ip, r0
   154d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154d8:	mov	r8, r2
   154dc:	sub	sp, sp, #28
   154e0:	mov	r2, ip
   154e4:	ldr	ip, [ip, #16]
   154e8:	mov	r9, r1
   154ec:	ldr	r1, [r0, #8]
   154f0:	str	ip, [sp, #8]
   154f4:	ldr	ip, [r8]
   154f8:	str	r1, [sp, #16]
   154fc:	mov	r0, r1
   15500:	mov	r4, r3
   15504:	ldr	r1, [pc, #456]	; 156d4 <__assert_fail@plt+0x4268>
   15508:	mov	r3, r9
   1550c:	mov	r5, ip
   15510:	str	ip, [sp, #20]
   15514:	ldr	r6, [sp, #64]	; 0x40
   15518:	bl	14598 <__assert_fail@plt+0x312c>
   1551c:	subs	r3, r0, #0
   15520:	str	r3, [sp, #12]
   15524:	beq	15680 <__assert_fail@plt+0x4214>
   15528:	mov	r1, #10
   1552c:	bl	11184 <strchrnul@plt>
   15530:	ldrb	sl, [r0]
   15534:	mov	r7, r0
   15538:	cmp	sl, #0
   1553c:	bne	1563c <__assert_fail@plt+0x41d0>
   15540:	ldr	r5, [sp, #12]
   15544:	add	r1, r7, #1
   15548:	sub	r1, r1, r5
   1554c:	mov	r0, r6
   15550:	bl	1536c <__assert_fail@plt+0x3f00>
   15554:	ldr	r0, [r6, #28]
   15558:	sub	fp, r7, r5
   1555c:	ldr	r1, [r6, #32]
   15560:	add	r2, r0, fp
   15564:	cmp	r1, r2
   15568:	bcs	15584 <__assert_fail@plt+0x4118>
   1556c:	mov	r1, fp
   15570:	mov	r0, r6
   15574:	bl	19d3c <argp_parse@@Base+0x2198>
   15578:	cmp	r0, #0
   1557c:	beq	1559c <__assert_fail@plt+0x4130>
   15580:	ldr	r0, [r6, #28]
   15584:	mov	r2, fp
   15588:	mov	r1, r5
   1558c:	bl	111b4 <memcpy@plt>
   15590:	ldr	r3, [r6, #28]
   15594:	add	fp, r3, fp
   15598:	str	fp, [r6, #28]
   1559c:	ldr	r3, [sp, #16]
   155a0:	ldr	r2, [sp, #12]
   155a4:	cmp	r3, r2
   155a8:	beq	155b4 <__assert_fail@plt+0x4148>
   155ac:	mov	r0, r2
   155b0:	bl	18a3c <argp_parse@@Base+0xe98>
   155b4:	ldr	r3, [sp, #8]
   155b8:	cmp	r3, #0
   155bc:	beq	15600 <__assert_fail@plt+0x4194>
   155c0:	ldr	r2, [r3]
   155c4:	cmp	r2, #0
   155c8:	beq	15600 <__assert_fail@plt+0x4194>
   155cc:	ldr	r5, [sp, #8]
   155d0:	mov	r3, r4
   155d4:	mov	r0, r2
   155d8:	str	r6, [sp]
   155dc:	mov	r2, r8
   155e0:	mov	r1, r9
   155e4:	bl	154d0 <__assert_fail@plt+0x4064>
   155e8:	ldr	r2, [r5, #16]!
   155ec:	cmp	r2, #0
   155f0:	clz	r3, r0
   155f4:	lsr	r3, r3, #5
   155f8:	bne	155d4 <__assert_fail@plt+0x4168>
   155fc:	mov	r4, r3
   15600:	cmp	r4, #0
   15604:	moveq	sl, #0
   15608:	andne	sl, sl, #1
   1560c:	cmp	sl, #0
   15610:	beq	156a0 <__assert_fail@plt+0x4234>
   15614:	ldrb	r0, [r7]
   15618:	cmp	r0, #0
   1561c:	bne	156b0 <__assert_fail@plt+0x4244>
   15620:	ldr	r3, [sp, #20]
   15624:	ldrb	r4, [r3]
   15628:	cmp	r4, #0
   1562c:	moveq	r0, r4
   15630:	strbne	r0, [r3]
   15634:	add	sp, sp, #28
   15638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1563c:	ldrb	sl, [r5]
   15640:	cmp	sl, #0
   15644:	beq	156cc <__assert_fail@plt+0x4260>
   15648:	mov	fp, #0
   1564c:	add	r5, r0, #1
   15650:	add	fp, fp, #1
   15654:	mov	r0, r5
   15658:	mov	r1, #10
   1565c:	bl	11184 <strchrnul@plt>
   15660:	cmp	fp, sl
   15664:	bne	1564c <__assert_fail@plt+0x41e0>
   15668:	mov	r7, r0
   1566c:	ldr	r2, [r8]
   15670:	mov	sl, #1
   15674:	add	r2, r2, sl
   15678:	str	r2, [r8]
   1567c:	b	15544 <__assert_fail@plt+0x40d8>
   15680:	ldr	r3, [sp, #8]
   15684:	cmp	r3, #0
   15688:	beq	156a0 <__assert_fail@plt+0x4234>
   1568c:	ldr	r2, [r3]
   15690:	cmp	r2, #0
   15694:	ldrne	r7, [sp, #12]
   15698:	movne	sl, r7
   1569c:	bne	155cc <__assert_fail@plt+0x4160>
   156a0:	clz	r0, r4
   156a4:	lsr	r0, r0, #5
   156a8:	add	sp, sp, #28
   156ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b0:	ldr	r2, [sp, #20]
   156b4:	mov	r0, #1
   156b8:	ldrb	r3, [r2]
   156bc:	add	r3, r3, r0
   156c0:	strb	r3, [r2]
   156c4:	add	sp, sp, #28
   156c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156cc:	ldr	r5, [sp, #12]
   156d0:	b	1566c <__assert_fail@plt+0x4200>
   156d4:	andeq	r0, r0, #6
   156d8:	ldr	r2, [r0, #8]
   156dc:	cmp	r2, #0
   156e0:	beq	156ec <__assert_fail@plt+0x4280>
   156e4:	mov	r0, #0
   156e8:	bx	lr
   156ec:	ldr	r2, [r1, #8]
   156f0:	cmp	r2, #0
   156f4:	bne	156e4 <__assert_fail@plt+0x4278>
   156f8:	ldr	r1, [r1, #12]
   156fc:	ldr	r2, [r0, #12]
   15700:	orr	r2, r2, r1
   15704:	tst	r2, #16
   15708:	ldreq	r2, [r3]
   1570c:	ldreq	r1, [r0, #4]
   15710:	addeq	r0, r2, #1
   15714:	streq	r0, [r3]
   15718:	strbeq	r1, [r2]
   1571c:	b	156e4 <__assert_fail@plt+0x4278>
   15720:	mov	r3, r0
   15724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15728:	sub	sp, sp, #52	; 0x34
   1572c:	ldr	r2, [r3, #16]
   15730:	str	r0, [sp, #24]
   15734:	mov	r0, #16
   15738:	ldr	r4, [r3]
   1573c:	str	r1, [sp, #28]
   15740:	str	r2, [sp, #8]
   15744:	bl	195a8 <argp_parse@@Base+0x1a04>
   15748:	subs	r3, r0, #0
   1574c:	str	r3, [sp, #20]
   15750:	beq	15db4 <__assert_fail@plt+0x4948>
   15754:	ldr	r2, [sp, #20]
   15758:	mov	r3, #0
   1575c:	cmp	r4, #0
   15760:	str	r3, [r2, #4]
   15764:	str	r3, [r2, #12]
   15768:	beq	1596c <__assert_fail@plt+0x4500>
   1576c:	ldr	r5, [r4, #12]
   15770:	ands	r5, r5, #4
   15774:	bne	15dc8 <__assert_fail@plt+0x495c>
   15778:	add	r6, r4, #24
   1577c:	mov	r9, r5
   15780:	mov	sl, r5
   15784:	mov	fp, r2
   15788:	b	157cc <__assert_fail@plt+0x4360>
   1578c:	ldr	r3, [r6, #-12]
   15790:	tst	r3, #4
   15794:	addeq	r9, r9, #1
   15798:	streq	r9, [fp, #4]
   1579c:	tst	r3, #8
   157a0:	bne	157c8 <__assert_fail@plt+0x435c>
   157a4:	sub	r3, r8, #1
   157a8:	cmp	r3, #254	; 0xfe
   157ac:	bhi	157c8 <__assert_fail@plt+0x435c>
   157b0:	bl	112d4 <__ctype_b_loc@plt>
   157b4:	lsl	r8, r8, #1
   157b8:	ldr	r3, [r0]
   157bc:	ldrh	r3, [r3, r8]
   157c0:	tst	r3, #16384	; 0x4000
   157c4:	addne	sl, sl, #1
   157c8:	add	r6, r6, #24
   157cc:	ldr	r8, [r6, #-20]	; 0xffffffec
   157d0:	cmp	r8, #0
   157d4:	bne	1578c <__assert_fail@plt+0x4320>
   157d8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   157dc:	cmp	r3, #0
   157e0:	bne	1578c <__assert_fail@plt+0x4320>
   157e4:	ldr	r3, [r6, #-8]
   157e8:	cmp	r3, #0
   157ec:	bne	1578c <__assert_fail@plt+0x4320>
   157f0:	ldr	r7, [r6, #-4]
   157f4:	cmp	r7, #0
   157f8:	bne	1578c <__assert_fail@plt+0x4320>
   157fc:	rsb	r9, r9, r9, lsl #3
   15800:	lsl	r0, r9, #2
   15804:	bl	195a8 <argp_parse@@Base+0x1a04>
   15808:	ldr	r6, [sp, #20]
   1580c:	str	r0, [r6]
   15810:	add	r0, sl, #1
   15814:	bl	195a8 <argp_parse@@Base+0x1a04>
   15818:	ldr	r8, [r6]
   1581c:	mov	r3, r6
   15820:	cmp	r0, #0
   15824:	cmpne	r8, #0
   15828:	mov	sl, r0
   1582c:	str	r0, [r3, #8]
   15830:	beq	15d78 <__assert_fail@plt+0x490c>
   15834:	ldr	r2, [sp, #20]
   15838:	ldr	r3, [pc, #1436]	; 15ddc <__assert_fail@plt+0x4970>
   1583c:	ldr	r2, [r2, #4]
   15840:	cmp	r2, r3
   15844:	bhi	15d64 <__assert_fail@plt+0x48f8>
   15848:	add	r8, r8, #28
   1584c:	mov	r2, r8
   15850:	ldr	r3, [r4, #4]
   15854:	mov	r8, sl
   15858:	mov	r9, r2
   1585c:	cmp	r3, #0
   15860:	bne	15870 <__assert_fail@plt+0x4404>
   15864:	ldr	r2, [r4]
   15868:	cmp	r2, #0
   1586c:	beq	15d1c <__assert_fail@plt+0x48b0>
   15870:	str	r7, [r9, #-24]	; 0xffffffe8
   15874:	ldr	r6, [r4, #20]
   15878:	str	r4, [r9, #-28]	; 0xffffffe4
   1587c:	cmp	r6, #0
   15880:	str	sl, [r9, #-20]	; 0xffffffec
   15884:	bne	1589c <__assert_fail@plt+0x4430>
   15888:	ldr	r2, [r4]
   1588c:	cmp	r2, #0
   15890:	cmpeq	r3, #0
   15894:	movne	r6, r5
   15898:	beq	15d40 <__assert_fail@plt+0x48d4>
   1589c:	ldr	r1, [sp, #28]
   158a0:	str	r6, [r9, #-16]
   158a4:	mov	r5, r4
   158a8:	ldr	r2, [r4, #12]
   158ac:	mov	r3, r7
   158b0:	str	r1, [r9, #-12]
   158b4:	ldr	r1, [sp, #24]
   158b8:	str	r1, [r9, #-8]
   158bc:	add	r3, r3, #1
   158c0:	tst	r2, #8
   158c4:	str	r3, [r9, #-24]	; 0xffffffe8
   158c8:	bne	15934 <__assert_fail@plt+0x44c8>
   158cc:	ldr	fp, [r4, #4]
   158d0:	sub	r3, fp, #1
   158d4:	cmp	r3, #254	; 0xfe
   158d8:	bhi	15934 <__assert_fail@plt+0x44c8>
   158dc:	bl	112d4 <__ctype_b_loc@plt>
   158e0:	lsl	r3, fp, #1
   158e4:	ldr	r2, [r0]
   158e8:	ldrh	r3, [r2, r3]
   158ec:	tst	r3, #16384	; 0x4000
   158f0:	beq	15934 <__assert_fail@plt+0x44c8>
   158f4:	cmp	r8, sl
   158f8:	uxtb	r1, fp
   158fc:	bcs	1592c <__assert_fail@plt+0x44c0>
   15900:	ldrb	r3, [r8]
   15904:	cmp	r3, r1
   15908:	movne	r3, r8
   1590c:	subne	r0, sl, #1
   15910:	bne	15924 <__assert_fail@plt+0x44b8>
   15914:	b	15934 <__assert_fail@plt+0x44c8>
   15918:	ldrb	r2, [r3, #1]!
   1591c:	cmp	r2, r1
   15920:	beq	15934 <__assert_fail@plt+0x44c8>
   15924:	cmp	r0, r3
   15928:	bne	15918 <__assert_fail@plt+0x44ac>
   1592c:	strb	r1, [sl]
   15930:	add	sl, sl, #1
   15934:	ldr	r3, [r5, #28]
   15938:	add	r4, r4, #24
   1593c:	cmp	r3, #0
   15940:	bne	15950 <__assert_fail@plt+0x44e4>
   15944:	ldr	r2, [r5, #24]
   15948:	cmp	r2, #0
   1594c:	beq	15cf8 <__assert_fail@plt+0x488c>
   15950:	ldr	r2, [r5, #36]	; 0x24
   15954:	tst	r2, #4
   15958:	beq	15d10 <__assert_fail@plt+0x48a4>
   1595c:	ldr	r3, [r9, #-24]	; 0xffffffe8
   15960:	mov	r5, r4
   15964:	b	158bc <__assert_fail@plt+0x4450>
   15968:	strb	r3, [sl]
   1596c:	ldr	r3, [sp, #8]
   15970:	cmp	r3, #0
   15974:	beq	15ab0 <__assert_fail@plt+0x4644>
   15978:	ldr	r3, [r3]
   1597c:	cmp	r3, #0
   15980:	beq	15ab0 <__assert_fail@plt+0x4644>
   15984:	ldr	r3, [sp, #20]
   15988:	add	r3, r3, #12
   1598c:	str	r3, [sp, #44]	; 0x2c
   15990:	ldr	r3, [sp, #8]
   15994:	ldr	r5, [r3, #12]
   15998:	cmp	r5, #0
   1599c:	ldrne	r6, [r3, #8]
   159a0:	bne	159b4 <__assert_fail@plt+0x4548>
   159a4:	ldr	r3, [sp, #8]
   159a8:	ldr	r6, [r3, #8]
   159ac:	cmp	r6, #0
   159b0:	beq	15cd8 <__assert_fail@plt+0x486c>
   159b4:	ldr	r7, [sp, #24]
   159b8:	ldr	r2, [sp, #8]
   159bc:	mov	r0, #28
   159c0:	ldr	r3, [r7, #16]
   159c4:	sub	r3, r2, r3
   159c8:	asr	r4, r3, #4
   159cc:	bl	195a8 <argp_parse@@Base+0x1a04>
   159d0:	subs	r1, r0, #0
   159d4:	beq	15a14 <__assert_fail@plt+0x45a8>
   159d8:	ldr	r3, [sp, #28]
   159dc:	ldr	r0, [sp, #20]
   159e0:	cmp	r3, #0
   159e4:	str	r3, [r1, #12]
   159e8:	ldrne	r3, [r3, #20]
   159ec:	ldr	r2, [r0, #12]
   159f0:	addne	r3, r3, #1
   159f4:	moveq	r3, #0
   159f8:	str	r5, [r1, #8]
   159fc:	str	r6, [r1]
   15a00:	str	r4, [r1, #4]
   15a04:	str	r7, [r1, #16]
   15a08:	str	r3, [r1, #20]
   15a0c:	str	r2, [r1, #24]
   15a10:	str	r1, [r0, #12]
   15a14:	ldr	r3, [sp, #8]
   15a18:	ldr	r0, [r3]
   15a1c:	bl	15720 <__assert_fail@plt+0x42b4>
   15a20:	ldr	r3, [sp, #20]
   15a24:	ldr	r2, [r3, #12]
   15a28:	cmp	r2, #0
   15a2c:	str	r0, [sp, #16]
   15a30:	bne	15a3c <__assert_fail@plt+0x45d0>
   15a34:	b	15ce0 <__assert_fail@plt+0x4874>
   15a38:	mov	r2, r3
   15a3c:	ldr	r3, [r2, #24]
   15a40:	cmp	r3, #0
   15a44:	bne	15a38 <__assert_fail@plt+0x45cc>
   15a48:	add	r2, r2, #24
   15a4c:	ldr	r0, [sp, #16]
   15a50:	mov	ip, r0
   15a54:	ldr	r3, [r0, #4]
   15a58:	ldr	r1, [r0, #12]
   15a5c:	cmp	r3, #0
   15a60:	str	r1, [r2]
   15a64:	mov	r2, #0
   15a68:	str	r2, [r0, #12]
   15a6c:	beq	15a94 <__assert_fail@plt+0x4628>
   15a70:	ldr	lr, [sp, #20]
   15a74:	ldr	r2, [lr, #4]
   15a78:	cmp	r2, #0
   15a7c:	bne	15abc <__assert_fail@plt+0x4650>
   15a80:	ldr	r0, [r0]
   15a84:	ldr	r1, [ip, #8]
   15a88:	stm	lr, {r0, r3}
   15a8c:	str	r1, [lr, #8]
   15a90:	str	r2, [ip, #4]
   15a94:	ldr	r0, [sp, #16]
   15a98:	bl	144b8 <__assert_fail@plt+0x304c>
   15a9c:	ldr	r2, [sp, #8]
   15aa0:	ldr	r3, [r2, #16]!
   15aa4:	cmp	r3, #0
   15aa8:	str	r2, [sp, #8]
   15aac:	bne	15990 <__assert_fail@plt+0x4524>
   15ab0:	ldr	r0, [sp, #20]
   15ab4:	add	sp, sp, #52	; 0x34
   15ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15abc:	add	r3, r3, r2
   15ac0:	str	r3, [sp, #36]	; 0x24
   15ac4:	rsb	r0, r3, r3, lsl #3
   15ac8:	lsl	r0, r0, #2
   15acc:	bl	195a8 <argp_parse@@Base+0x1a04>
   15ad0:	ldr	r3, [sp, #20]
   15ad4:	mov	r4, r0
   15ad8:	str	r0, [sp, #32]
   15adc:	ldr	r0, [r3, #8]
   15ae0:	bl	11304 <strlen@plt>
   15ae4:	ldr	r3, [sp, #16]
   15ae8:	mov	r8, r0
   15aec:	ldr	r0, [r3, #8]
   15af0:	bl	11304 <strlen@plt>
   15af4:	add	r0, r8, r0
   15af8:	add	r0, r0, #1
   15afc:	bl	195a8 <argp_parse@@Base+0x1a04>
   15b00:	cmp	r4, #0
   15b04:	cmpne	r0, #0
   15b08:	mov	r7, r0
   15b0c:	beq	15d8c <__assert_fail@plt+0x4920>
   15b10:	ldr	r3, [sp, #36]	; 0x24
   15b14:	ldr	r2, [pc, #704]	; 15ddc <__assert_fail@plt+0x4970>
   15b18:	cmp	r3, r2
   15b1c:	bhi	15da0 <__assert_fail@plt+0x4934>
   15b20:	ldr	r5, [sp, #20]
   15b24:	ldr	r9, [sp, #32]
   15b28:	ldm	r5, {r3, r4}
   15b2c:	mov	r0, r9
   15b30:	rsb	r6, r4, r4, lsl #3
   15b34:	mov	r1, r3
   15b38:	lsl	r6, r6, #2
   15b3c:	mov	r2, r6
   15b40:	str	r3, [sp, #40]	; 0x28
   15b44:	bl	112c8 <mempcpy@plt>
   15b48:	ldr	r3, [sp, #16]
   15b4c:	ldr	r1, [r3, #4]
   15b50:	mov	ip, r1
   15b54:	str	r1, [sp, #4]
   15b58:	rsb	r2, ip, ip, lsl #3
   15b5c:	ldr	r1, [r3]
   15b60:	lsl	r2, r2, #2
   15b64:	bl	111b4 <memcpy@plt>
   15b68:	ldr	r5, [r5, #8]
   15b6c:	mov	r2, r8
   15b70:	mov	r1, r5
   15b74:	mov	r0, r7
   15b78:	bl	111b4 <memcpy@plt>
   15b7c:	cmp	r4, #0
   15b80:	beq	15cf0 <__assert_fail@plt+0x4884>
   15b84:	mov	r2, r9
   15b88:	ldr	r3, [r2, #8]
   15b8c:	subs	r4, r4, #1
   15b90:	sub	r3, r3, r5
   15b94:	add	r3, r7, r3
   15b98:	str	r3, [r2, #8]
   15b9c:	add	r2, r2, #28
   15ba0:	bne	15b88 <__assert_fail@plt+0x471c>
   15ba4:	ldr	r3, [sp, #32]
   15ba8:	add	r1, r3, r6
   15bac:	ldr	r3, [sp, #4]
   15bb0:	ldr	r2, [sp, #16]
   15bb4:	cmp	r3, #0
   15bb8:	add	r3, r7, r8
   15bbc:	str	r3, [sp, #12]
   15bc0:	ldr	sl, [r2, #8]
   15bc4:	beq	15ce8 <__assert_fail@plt+0x487c>
   15bc8:	sub	r8, r3, #1
   15bcc:	add	fp, r1, #28
   15bd0:	mov	r9, r3
   15bd4:	mov	r3, r8
   15bd8:	mov	r8, fp
   15bdc:	mov	fp, sl
   15be0:	mov	sl, r3
   15be4:	ldr	r5, [r8, #-24]	; 0xffffffe8
   15be8:	str	r9, [r8, #-20]	; 0xffffffec
   15bec:	cmp	r5, #0
   15bf0:	ldr	r4, [r8, #-28]	; 0xffffffe4
   15bf4:	bne	15c08 <__assert_fail@plt+0x479c>
   15bf8:	b	15c94 <__assert_fail@plt+0x4828>
   15bfc:	subs	r5, r5, #1
   15c00:	add	r4, r4, #24
   15c04:	beq	15c94 <__assert_fail@plt+0x4828>
   15c08:	ldr	r3, [r4, #12]
   15c0c:	tst	r3, #8
   15c10:	bne	15bfc <__assert_fail@plt+0x4790>
   15c14:	ldr	r6, [r4, #4]
   15c18:	sub	r3, r6, #1
   15c1c:	cmp	r3, #254	; 0xfe
   15c20:	bhi	15bfc <__assert_fail@plt+0x4790>
   15c24:	bl	112d4 <__ctype_b_loc@plt>
   15c28:	lsl	r3, r6, #1
   15c2c:	ldr	r2, [r0]
   15c30:	ldrh	r3, [r2, r3]
   15c34:	tst	r3, #16384	; 0x4000
   15c38:	beq	15bfc <__assert_fail@plt+0x4790>
   15c3c:	ldrb	r1, [fp]
   15c40:	cmp	r1, r6
   15c44:	bne	15bfc <__assert_fail@plt+0x4790>
   15c48:	ldr	r3, [sp, #12]
   15c4c:	cmp	r7, r3
   15c50:	bcs	15c7c <__assert_fail@plt+0x4810>
   15c54:	ldrb	r3, [r7]
   15c58:	cmp	r3, r1
   15c5c:	movne	r3, r7
   15c60:	bne	15c74 <__assert_fail@plt+0x4808>
   15c64:	b	15c84 <__assert_fail@plt+0x4818>
   15c68:	ldrb	r2, [r3, #1]!
   15c6c:	cmp	r2, r1
   15c70:	beq	15c84 <__assert_fail@plt+0x4818>
   15c74:	cmp	sl, r3
   15c78:	bne	15c68 <__assert_fail@plt+0x47fc>
   15c7c:	strb	r1, [r9]
   15c80:	add	r9, r9, #1
   15c84:	subs	r5, r5, #1
   15c88:	add	fp, fp, #1
   15c8c:	add	r4, r4, #24
   15c90:	bne	15c08 <__assert_fail@plt+0x479c>
   15c94:	ldr	r3, [sp, #4]
   15c98:	add	r8, r8, #28
   15c9c:	subs	r3, r3, #1
   15ca0:	str	r3, [sp, #4]
   15ca4:	bne	15be4 <__assert_fail@plt+0x4778>
   15ca8:	mov	r3, #0
   15cac:	strb	r3, [r9]
   15cb0:	ldr	r0, [sp, #40]	; 0x28
   15cb4:	bl	18a3c <argp_parse@@Base+0xe98>
   15cb8:	ldr	r4, [sp, #20]
   15cbc:	ldr	r0, [r4, #8]
   15cc0:	bl	18a3c <argp_parse@@Base+0xe98>
   15cc4:	ldr	r2, [sp, #32]
   15cc8:	str	r2, [r4]
   15ccc:	ldr	r2, [sp, #36]	; 0x24
   15cd0:	stmib	r4, {r2, r7}
   15cd4:	b	15a94 <__assert_fail@plt+0x4628>
   15cd8:	ldr	r1, [sp, #28]
   15cdc:	b	15a14 <__assert_fail@plt+0x45a8>
   15ce0:	ldr	r2, [sp, #44]	; 0x2c
   15ce4:	b	15a4c <__assert_fail@plt+0x45e0>
   15ce8:	ldr	r9, [sp, #12]
   15cec:	b	15ca8 <__assert_fail@plt+0x483c>
   15cf0:	ldr	r1, [sp, #32]
   15cf4:	b	15bac <__assert_fail@plt+0x4740>
   15cf8:	ldr	r2, [r5, #40]	; 0x28
   15cfc:	cmp	r2, #0
   15d00:	bne	15950 <__assert_fail@plt+0x44e4>
   15d04:	ldr	r2, [r5, #44]	; 0x2c
   15d08:	cmp	r2, #0
   15d0c:	bne	15950 <__assert_fail@plt+0x44e4>
   15d10:	add	r9, r9, #28
   15d14:	mov	r5, r6
   15d18:	b	1585c <__assert_fail@plt+0x43f0>
   15d1c:	ldr	r2, [r4, #16]
   15d20:	cmp	r2, #0
   15d24:	beq	15d48 <__assert_fail@plt+0x48dc>
   15d28:	str	r3, [r9, #-24]	; 0xffffffe8
   15d2c:	ldr	r6, [r4, #20]
   15d30:	str	r4, [r9, #-28]	; 0xffffffe4
   15d34:	cmp	r6, #0
   15d38:	str	sl, [r9, #-20]	; 0xffffffec
   15d3c:	bne	1589c <__assert_fail@plt+0x4430>
   15d40:	add	r6, r5, #1
   15d44:	b	1589c <__assert_fail@plt+0x4430>
   15d48:	ldr	r6, [r4, #20]
   15d4c:	cmp	r6, #0
   15d50:	beq	15968 <__assert_fail@plt+0x44fc>
   15d54:	str	r4, [r9, #-28]	; 0xffffffe4
   15d58:	str	r3, [r9, #-24]	; 0xffffffe8
   15d5c:	str	sl, [r9, #-20]	; 0xffffffec
   15d60:	b	1589c <__assert_fail@plt+0x4430>
   15d64:	ldr	r3, [pc, #116]	; 15de0 <__assert_fail@plt+0x4974>
   15d68:	mov	r2, #476	; 0x1dc
   15d6c:	ldr	r1, [pc, #112]	; 15de4 <__assert_fail@plt+0x4978>
   15d70:	ldr	r0, [pc, #112]	; 15de8 <__assert_fail@plt+0x497c>
   15d74:	bl	1146c <__assert_fail@plt>
   15d78:	ldr	r3, [pc, #96]	; 15de0 <__assert_fail@plt+0x4974>
   15d7c:	ldr	r2, [pc, #104]	; 15dec <__assert_fail@plt+0x4980>
   15d80:	ldr	r1, [pc, #92]	; 15de4 <__assert_fail@plt+0x4978>
   15d84:	ldr	r0, [pc, #100]	; 15df0 <__assert_fail@plt+0x4984>
   15d88:	bl	1146c <__assert_fail@plt>
   15d8c:	ldr	r3, [pc, #96]	; 15df4 <__assert_fail@plt+0x4988>
   15d90:	ldr	r2, [pc, #96]	; 15df8 <__assert_fail@plt+0x498c>
   15d94:	ldr	r1, [pc, #72]	; 15de4 <__assert_fail@plt+0x4978>
   15d98:	ldr	r0, [pc, #92]	; 15dfc <__assert_fail@plt+0x4990>
   15d9c:	bl	1146c <__assert_fail@plt>
   15da0:	ldr	r3, [pc, #76]	; 15df4 <__assert_fail@plt+0x4988>
   15da4:	mov	r2, #972	; 0x3cc
   15da8:	ldr	r1, [pc, #52]	; 15de4 <__assert_fail@plt+0x4978>
   15dac:	ldr	r0, [pc, #76]	; 15e00 <__assert_fail@plt+0x4994>
   15db0:	bl	1146c <__assert_fail@plt>
   15db4:	ldr	r3, [pc, #36]	; 15de0 <__assert_fail@plt+0x4974>
   15db8:	ldr	r2, [pc, #68]	; 15e04 <__assert_fail@plt+0x4998>
   15dbc:	ldr	r1, [pc, #32]	; 15de4 <__assert_fail@plt+0x4978>
   15dc0:	ldr	r0, [pc, #64]	; 15e08 <__assert_fail@plt+0x499c>
   15dc4:	bl	1146c <__assert_fail@plt>
   15dc8:	ldr	r3, [pc, #16]	; 15de0 <__assert_fail@plt+0x4974>
   15dcc:	mov	r2, #460	; 0x1cc
   15dd0:	ldr	r1, [pc, #12]	; 15de4 <__assert_fail@plt+0x4978>
   15dd4:	ldr	r0, [pc, #48]	; 15e0c <__assert_fail@plt+0x49a0>
   15dd8:	bl	1146c <__assert_fail@plt>
   15ddc:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   15de0:	andeq	fp, r1, r4, lsl lr
   15de4:	ldrdeq	fp, [r1], -r4
   15de8:	andeq	fp, r1, r8, lsl pc
   15dec:	ldrdeq	r0, [r0], -sl
   15df0:	strdeq	fp, [r1], -r4
   15df4:	andeq	fp, r1, r0, lsr #28
   15df8:	andeq	r0, r0, sl, asr #7
   15dfc:	andeq	fp, r1, r4, asr pc
   15e00:	andeq	fp, r1, r0, ror pc
   15e04:	andeq	r0, r0, r2, asr #3
   15e08:	andeq	fp, r1, r0, ror #29
   15e0c:	andeq	fp, r1, r4, ror #29
   15e10:	cmp	r1, #0
   15e14:	push	{r4, r5, r6, r7, r8, lr}
   15e18:	beq	15e90 <__assert_fail@plt+0x4a24>
   15e1c:	sub	r7, r1, #1
   15e20:	mov	r8, r2
   15e24:	mov	r6, r0
   15e28:	ldm	r6, {r4, r5}
   15e2c:	cmp	r5, #0
   15e30:	sub	r5, r5, #1
   15e34:	beq	15e74 <__assert_fail@plt+0x4a08>
   15e38:	add	r4, r4, #24
   15e3c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15e40:	mov	r1, r8
   15e44:	subs	r0, r3, #0
   15e48:	sub	r5, r5, #1
   15e4c:	beq	15e68 <__assert_fail@plt+0x49fc>
   15e50:	ldr	r3, [r4, #-12]
   15e54:	tst	r3, #2
   15e58:	bne	15e68 <__assert_fail@plt+0x49fc>
   15e5c:	bl	11124 <strcmp@plt>
   15e60:	cmp	r0, #0
   15e64:	beq	15e88 <__assert_fail@plt+0x4a1c>
   15e68:	cmn	r5, #1
   15e6c:	add	r4, r4, #24
   15e70:	bne	15e3c <__assert_fail@plt+0x49d0>
   15e74:	sub	r7, r7, #1
   15e78:	cmn	r7, #1
   15e7c:	add	r6, r6, #28
   15e80:	bne	15e28 <__assert_fail@plt+0x49bc>
   15e84:	mov	r6, #0
   15e88:	mov	r0, r6
   15e8c:	pop	{r4, r5, r6, r7, r8, pc}
   15e90:	mov	r6, r1
   15e94:	b	15e88 <__assert_fail@plt+0x4a1c>
   15e98:	push	{r4, r5, r6, lr}
   15e9c:	subs	r4, r0, #0
   15ea0:	mov	r5, r1
   15ea4:	beq	15eb8 <__assert_fail@plt+0x4a4c>
   15ea8:	mov	r1, #10
   15eac:	bl	11310 <strchr@plt>
   15eb0:	adds	r4, r0, #0
   15eb4:	movne	r4, #1
   15eb8:	cmp	r5, #0
   15ebc:	beq	15ee8 <__assert_fail@plt+0x4a7c>
   15ec0:	ldr	r3, [r5]
   15ec4:	cmp	r3, #0
   15ec8:	beq	15ee8 <__assert_fail@plt+0x4a7c>
   15ecc:	ldr	r1, [r3, #16]
   15ed0:	ldr	r0, [r3, #8]
   15ed4:	bl	15e98 <__assert_fail@plt+0x4a2c>
   15ed8:	ldr	r3, [r5, #16]!
   15edc:	cmp	r3, #0
   15ee0:	add	r4, r4, r0
   15ee4:	bne	15ecc <__assert_fail@plt+0x4a60>
   15ee8:	mov	r0, r4
   15eec:	pop	{r4, r5, r6, pc}
   15ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef4:	add	fp, sp, #32
   15ef8:	sub	sp, sp, #12
   15efc:	ldr	r5, [r0, #4]
   15f00:	cmp	r5, #0
   15f04:	bne	15f10 <__assert_fail@plt+0x4aa4>
   15f08:	sub	sp, fp, #32
   15f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f10:	mov	r6, r0
   15f14:	ldr	r0, [r0, #8]
   15f18:	mov	r9, r1
   15f1c:	bl	11304 <strlen@plt>
   15f20:	ldr	r8, [pc, #360]	; 16090 <__assert_fail@plt+0x4c24>
   15f24:	ldr	r4, [r6]
   15f28:	sub	r7, fp, #36	; 0x24
   15f2c:	add	r3, r0, #15
   15f30:	bic	r3, r3, #7
   15f34:	sub	sp, sp, r3
   15f38:	mov	sl, sp
   15f3c:	str	sp, [r7, #-4]!
   15f40:	ldr	r2, [r4, #20]
   15f44:	mov	r0, r4
   15f48:	mov	r3, r7
   15f4c:	mov	r1, r8
   15f50:	ldr	r2, [r2, #24]
   15f54:	bl	14304 <__assert_fail@plt+0x2e98>
   15f58:	subs	r5, r5, #1
   15f5c:	add	r4, r4, #28
   15f60:	bne	15f40 <__assert_fail@plt+0x4ad4>
   15f64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f68:	cmp	sl, r3
   15f6c:	bcc	16070 <__assert_fail@plt+0x4c04>
   15f70:	ldm	r6, {r4, r5}
   15f74:	cmp	r5, #0
   15f78:	beq	15f08 <__assert_fail@plt+0x4a9c>
   15f7c:	ldr	r7, [pc, #272]	; 16094 <__assert_fail@plt+0x4c28>
   15f80:	ldr	r2, [r4, #20]
   15f84:	mov	r0, r4
   15f88:	mov	r3, r9
   15f8c:	mov	r1, r7
   15f90:	ldr	r2, [r2, #24]
   15f94:	bl	14304 <__assert_fail@plt+0x2e98>
   15f98:	subs	r5, r5, #1
   15f9c:	add	r4, r4, #28
   15fa0:	bne	15f80 <__assert_fail@plt+0x4b14>
   15fa4:	ldm	r6, {r7, r8}
   15fa8:	cmp	r8, #0
   15fac:	beq	15f08 <__assert_fail@plt+0x4a9c>
   15fb0:	ldr	sl, [pc, #224]	; 16098 <__assert_fail@plt+0x4c2c>
   15fb4:	add	r7, r7, #28
   15fb8:	ldr	r5, [r7, #-24]	; 0xffffffe8
   15fbc:	ldr	r4, [r7, #-28]	; 0xffffffe4
   15fc0:	cmp	r5, #0
   15fc4:	movne	r6, r4
   15fc8:	bne	15fdc <__assert_fail@plt+0x4b70>
   15fcc:	b	16038 <__assert_fail@plt+0x4bcc>
   15fd0:	subs	r5, r5, #1
   15fd4:	add	r4, r4, #24
   15fd8:	beq	16038 <__assert_fail@plt+0x4bcc>
   15fdc:	ldr	r2, [r4]
   15fe0:	cmp	r2, #0
   15fe4:	beq	15fd0 <__assert_fail@plt+0x4b64>
   15fe8:	ldr	r1, [r4, #12]
   15fec:	tst	r1, #4
   15ff0:	moveq	r6, r4
   15ff4:	tst	r1, #2
   15ff8:	bne	15fd0 <__assert_fail@plt+0x4b64>
   15ffc:	ldr	r3, [r4, #8]
   16000:	ldr	r0, [r6, #12]
   16004:	cmp	r3, #0
   16008:	orr	r1, r1, r0
   1600c:	beq	1604c <__assert_fail@plt+0x4be0>
   16010:	tst	r1, #16
   16014:	bne	15fd0 <__assert_fail@plt+0x4b64>
   16018:	tst	r1, #1
   1601c:	moveq	r1, sl
   16020:	ldrne	r1, [pc, #116]	; 1609c <__assert_fail@plt+0x4c30>
   16024:	mov	r0, r9
   16028:	bl	19d5c <argp_parse@@Base+0x21b8>
   1602c:	subs	r5, r5, #1
   16030:	add	r4, r4, #24
   16034:	bne	15fdc <__assert_fail@plt+0x4b70>
   16038:	subs	r8, r8, #1
   1603c:	add	r7, r7, #28
   16040:	bne	15fb8 <__assert_fail@plt+0x4b4c>
   16044:	sub	sp, fp, #32
   16048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1604c:	tst	r1, #16
   16050:	bne	15fd0 <__assert_fail@plt+0x4b64>
   16054:	ldr	r3, [r6, #8]
   16058:	cmp	r3, #0
   1605c:	bne	16018 <__assert_fail@plt+0x4bac>
   16060:	ldr	r1, [pc, #56]	; 160a0 <__assert_fail@plt+0x4c34>
   16064:	mov	r0, r9
   16068:	bl	19d5c <argp_parse@@Base+0x21b8>
   1606c:	b	15fd0 <__assert_fail@plt+0x4b64>
   16070:	add	r1, r3, #1
   16074:	str	r1, [fp, #-40]	; 0xffffffd8
   16078:	mov	r2, sl
   1607c:	ldr	r1, [pc, #32]	; 160a4 <__assert_fail@plt+0x4c38>
   16080:	strb	r5, [r3]
   16084:	mov	r0, r9
   16088:	bl	19d5c <argp_parse@@Base+0x21b8>
   1608c:	b	15f70 <__assert_fail@plt+0x4b04>
   16090:	ldrdeq	r5, [r1], -r8
   16094:	andeq	r5, r1, r4, lsr r4
   16098:			; <UNDEFINED> instruction: 0x0001bfbc
   1609c:	andeq	fp, r1, ip, lsr #31
   160a0:	andeq	fp, r1, r8, asr #31
   160a4:	andeq	fp, r1, r4, lsr #31

000160a8 <argp_failure@@Base>:
   160a8:	push	{r3}		; (str r3, [sp, #-4]!)
   160ac:	push	{r4, r5, r6, r7, lr}
   160b0:	subs	r5, r0, #0
   160b4:	sub	sp, sp, #200	; 0xc8
   160b8:	mov	r7, r1
   160bc:	mov	r6, r2
   160c0:	beq	16210 <argp_failure@@Base+0x168>
   160c4:	ldr	r3, [r5, #16]
   160c8:	tst	r3, #2
   160cc:	bne	16200 <argp_failure@@Base+0x158>
   160d0:	ldr	r4, [r5, #44]	; 0x2c
   160d4:	cmp	r4, #0
   160d8:	beq	16200 <argp_failure@@Base+0x158>
   160dc:	mov	r0, r4
   160e0:	bl	11400 <flockfile@plt>
   160e4:	ldr	r0, [r5, #40]	; 0x28
   160e8:	mov	r1, r4
   160ec:	bl	1110c <fputs_unlocked@plt>
   160f0:	ldr	r3, [sp, #220]	; 0xdc
   160f4:	cmp	r3, #0
   160f8:	beq	16154 <argp_failure@@Base+0xac>
   160fc:	ldr	r3, [r4, #20]
   16100:	ldr	r1, [r4, #24]
   16104:	add	r2, sp, #224	; 0xe0
   16108:	cmp	r3, r1
   1610c:	str	r2, [sp]
   16110:	addcc	r1, r3, #1
   16114:	movcc	r2, #58	; 0x3a
   16118:	strcc	r1, [r4, #20]
   1611c:	strbcc	r2, [r3]
   16120:	bcs	1625c <argp_failure@@Base+0x1b4>
   16124:	ldr	r3, [r4, #20]
   16128:	ldr	r2, [r4, #24]
   1612c:	cmp	r3, r2
   16130:	addcc	r1, r3, #1
   16134:	movcc	r2, #32
   16138:	strcc	r1, [r4, #20]
   1613c:	strbcc	r2, [r3]
   16140:	bcs	1624c <argp_failure@@Base+0x1a4>
   16144:	ldr	r2, [sp]
   16148:	ldr	r1, [sp, #220]	; 0xdc
   1614c:	mov	r0, r4
   16150:	bl	113c4 <vfprintf@plt>
   16154:	cmp	r6, #0
   16158:	beq	161bc <argp_failure@@Base+0x114>
   1615c:	ldr	r3, [r4, #20]
   16160:	ldr	r2, [r4, #24]
   16164:	cmp	r3, r2
   16168:	addcc	r1, r3, #1
   1616c:	movcc	r2, #58	; 0x3a
   16170:	strcc	r1, [r4, #20]
   16174:	strbcc	r2, [r3]
   16178:	bcs	1627c <argp_failure@@Base+0x1d4>
   1617c:	ldr	r3, [r4, #20]
   16180:	ldr	r2, [r4, #24]
   16184:	cmp	r3, r2
   16188:	addcc	r1, r3, #1
   1618c:	movcc	r2, #32
   16190:	strcc	r1, [r4, #20]
   16194:	strbcc	r2, [r3]
   16198:	bcs	1626c <argp_failure@@Base+0x1c4>
   1619c:	mov	r2, #200	; 0xc8
   161a0:	mov	r1, sp
   161a4:	mov	r0, r6
   161a8:	bl	11340 <strerror_r@plt>
   161ac:	cmp	r0, #0
   161b0:	beq	1628c <argp_failure@@Base+0x1e4>
   161b4:	mov	r1, r4
   161b8:	bl	1110c <fputs_unlocked@plt>
   161bc:	ldr	r3, [r4, #20]
   161c0:	ldr	r2, [r4, #24]
   161c4:	cmp	r3, r2
   161c8:	addcc	r1, r3, #1
   161cc:	movcc	r2, #10
   161d0:	strcc	r1, [r4, #20]
   161d4:	strbcc	r2, [r3]
   161d8:	bcs	16234 <argp_failure@@Base+0x18c>
   161dc:	mov	r0, r4
   161e0:	bl	11244 <funlockfile@plt>
   161e4:	cmp	r7, #0
   161e8:	beq	16200 <argp_failure@@Base+0x158>
   161ec:	cmp	r5, #0
   161f0:	beq	16244 <argp_failure@@Base+0x19c>
   161f4:	ldr	r3, [r5, #16]
   161f8:	tst	r3, #32
   161fc:	beq	16244 <argp_failure@@Base+0x19c>
   16200:	add	sp, sp, #200	; 0xc8
   16204:	pop	{r4, r5, r6, r7, lr}
   16208:	add	sp, sp, #4
   1620c:	bx	lr
   16210:	ldr	r3, [pc, #140]	; 162a4 <argp_failure@@Base+0x1fc>
   16214:	ldr	r4, [r3]
   16218:	cmp	r4, #0
   1621c:	beq	16200 <argp_failure@@Base+0x158>
   16220:	mov	r0, r4
   16224:	bl	11400 <flockfile@plt>
   16228:	ldr	r3, [pc, #120]	; 162a8 <argp_failure@@Base+0x200>
   1622c:	ldr	r0, [r3]
   16230:	b	160e8 <argp_failure@@Base+0x40>
   16234:	mov	r1, #10
   16238:	mov	r0, r4
   1623c:	bl	11394 <__overflow@plt>
   16240:	b	161dc <argp_failure@@Base+0x134>
   16244:	mov	r0, r7
   16248:	bl	112ec <exit@plt>
   1624c:	mov	r1, #32
   16250:	mov	r0, r4
   16254:	bl	11394 <__overflow@plt>
   16258:	b	16144 <argp_failure@@Base+0x9c>
   1625c:	mov	r1, #58	; 0x3a
   16260:	mov	r0, r4
   16264:	bl	11394 <__overflow@plt>
   16268:	b	16124 <argp_failure@@Base+0x7c>
   1626c:	mov	r1, #32
   16270:	mov	r0, r4
   16274:	bl	11394 <__overflow@plt>
   16278:	b	1619c <argp_failure@@Base+0xf4>
   1627c:	mov	r1, #58	; 0x3a
   16280:	mov	r0, r4
   16284:	bl	11394 <__overflow@plt>
   16288:	b	1617c <argp_failure@@Base+0xd4>
   1628c:	mov	r0, r6
   16290:	bl	112a4 <strerror@plt>
   16294:	ldr	r3, [pc, #16]	; 162ac <argp_failure@@Base+0x204>
   16298:	cmp	r0, #0
   1629c:	moveq	r0, r3
   162a0:	b	161b4 <argp_failure@@Base+0x10c>
   162a4:	andeq	sp, r2, r8, lsr #12
   162a8:	andeq	sp, r2, r0, lsr #12
   162ac:	ldrdeq	fp, [r1], -r0
   162b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162b4:	add	fp, sp, #32
   162b8:	cmp	r2, #0
   162bc:	sub	sp, sp, #116	; 0x74
   162c0:	str	r2, [fp, #-132]	; 0xffffff7c
   162c4:	str	r0, [fp, #-112]	; 0xffffff90
   162c8:	str	r1, [fp, #-104]	; 0xffffff98
   162cc:	str	r3, [fp, #-96]	; 0xffffffa0
   162d0:	beq	16388 <argp_failure@@Base+0x2e0>
   162d4:	ldr	sl, [pc, #4064]	; 172bc <argp_failure@@Base+0x1214>
   162d8:	mov	r0, r2
   162dc:	bl	11400 <flockfile@plt>
   162e0:	ldr	r3, [sl, #36]	; 0x24
   162e4:	cmp	r3, #0
   162e8:	str	r3, [fp, #-108]	; 0xffffff94
   162ec:	beq	16838 <argp_failure@@Base+0x790>
   162f0:	mov	r3, #0
   162f4:	mov	r1, r3
   162f8:	ldr	r2, [sl, #32]
   162fc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16300:	bl	19630 <argp_parse@@Base+0x1a8c>
   16304:	subs	r9, r0, #0
   16308:	beq	1737c <argp_failure@@Base+0x12d4>
   1630c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16310:	ands	r3, r3, #11
   16314:	streq	r3, [fp, #-136]	; 0xffffff78
   16318:	bne	16c94 <argp_failure@@Base+0xbec>
   1631c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16320:	ands	r4, r3, #3
   16324:	bne	16a88 <argp_failure@@Base+0x9e0>
   16328:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1632c:	tst	r3, #16
   16330:	bne	16a64 <argp_failure@@Base+0x9bc>
   16334:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16338:	tst	r3, #4
   1633c:	bne	16a48 <argp_failure@@Base+0x9a0>
   16340:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16344:	tst	r3, #8
   16348:	bne	163dc <argp_failure@@Base+0x334>
   1634c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16350:	tst	r3, #32
   16354:	bne	16810 <argp_failure@@Base+0x768>
   16358:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1635c:	tst	r3, #64	; 0x40
   16360:	bne	16390 <argp_failure@@Base+0x2e8>
   16364:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16368:	bl	11244 <funlockfile@plt>
   1636c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16370:	cmp	r3, #0
   16374:	beq	16380 <argp_failure@@Base+0x2d8>
   16378:	mov	r0, r3
   1637c:	bl	144b8 <__assert_fail@plt+0x304c>
   16380:	mov	r0, r9
   16384:	bl	19c1c <argp_parse@@Base+0x2078>
   16388:	sub	sp, fp, #32
   1638c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16390:	ldr	r5, [pc, #3880]	; 172c0 <argp_failure@@Base+0x1218>
   16394:	ldr	r2, [r5]
   16398:	cmp	r2, #0
   1639c:	beq	16364 <argp_failure@@Base+0x2bc>
   163a0:	cmp	r4, #0
   163a4:	beq	163cc <argp_failure@@Base+0x324>
   163a8:	ldr	r3, [r9, #28]
   163ac:	ldr	r2, [r9, #32]
   163b0:	cmp	r3, r2
   163b4:	bcs	17360 <argp_failure@@Base+0x12b8>
   163b8:	add	r1, r3, #1
   163bc:	mov	r2, #10
   163c0:	str	r1, [r9, #28]
   163c4:	strb	r2, [r3]
   163c8:	ldr	r2, [r5]
   163cc:	ldr	r1, [pc, #3824]	; 172c4 <argp_failure@@Base+0x121c>
   163d0:	mov	r0, r9
   163d4:	bl	19d5c <argp_parse@@Base+0x21b8>
   163d8:	b	16364 <argp_failure@@Base+0x2bc>
   163dc:	ldr	r3, [fp, #-136]	; 0xffffff78
   163e0:	ldr	r3, [r3, #4]
   163e4:	cmp	r3, #0
   163e8:	str	r3, [fp, #-108]	; 0xffffff94
   163ec:	beq	1634c <argp_failure@@Base+0x2a4>
   163f0:	cmp	r4, #0
   163f4:	beq	17210 <argp_failure@@Base+0x1168>
   163f8:	ldr	r3, [r9, #28]
   163fc:	ldr	r2, [r9, #32]
   16400:	cmp	r3, r2
   16404:	bcs	173b4 <argp_failure@@Base+0x130c>
   16408:	add	r1, r3, #1
   1640c:	mov	r2, #10
   16410:	str	r1, [r9, #28]
   16414:	strb	r2, [r3]
   16418:	ldr	r3, [fp, #-136]	; 0xffffff78
   1641c:	ldr	r2, [fp, #-136]	; 0xffffff78
   16420:	ldr	r3, [r3, #4]
   16424:	ldr	r8, [r2]
   16428:	str	r3, [fp, #-108]	; 0xffffff94
   1642c:	ldr	r3, [fp, #-108]	; 0xffffff94
   16430:	cmp	r3, #0
   16434:	mov	r3, #0
   16438:	str	r3, [fp, #-88]	; 0xffffffa8
   1643c:	str	r3, [fp, #-84]	; 0xffffffac
   16440:	str	r3, [fp, #-80]	; 0xffffffb0
   16444:	beq	16800 <argp_failure@@Base+0x758>
   16448:	str	sl, [fp, #-100]	; 0xffffff9c
   1644c:	ldr	lr, [r9, #28]
   16450:	ldr	r3, [r9, #24]
   16454:	ldr	r5, [r9, #16]
   16458:	sub	lr, lr, r3
   1645c:	cmp	lr, r5
   16460:	ldr	r6, [r8]
   16464:	ldr	sl, [r8, #8]
   16468:	bhi	16f68 <argp_failure@@Base+0xec0>
   1646c:	ldr	r1, [r9, #4]
   16470:	ldr	r7, [r6, #12]
   16474:	str	r1, [fp, #-116]	; 0xffffff8c
   16478:	ldr	r1, [r9, #12]
   1647c:	mov	r3, #0
   16480:	str	r1, [fp, #-120]	; 0xffffff88
   16484:	sub	r1, fp, #88	; 0x58
   16488:	str	r3, [r9, #4]
   1648c:	and	r2, r7, #8
   16490:	str	r1, [fp, #-68]	; 0xffffffbc
   16494:	ldr	r1, [fp, #-104]	; 0xffffff98
   16498:	mov	r0, #1
   1649c:	cmp	r2, r3
   164a0:	mov	r4, r2
   164a4:	str	r0, [fp, #-64]	; 0xffffffc0
   164a8:	str	r8, [fp, #-76]	; 0xffffffb4
   164ac:	str	r9, [fp, #-72]	; 0xffffffb8
   164b0:	str	r1, [fp, #-60]	; 0xffffffc4
   164b4:	bne	16df4 <argp_failure@@Base+0xd4c>
   164b8:	ldr	ip, [r8, #4]
   164bc:	cmp	ip, r3
   164c0:	beq	164ec <argp_failure@@Base+0x444>
   164c4:	add	r0, r6, #24
   164c8:	ldr	r3, [r0, #-24]	; 0xffffffe8
   164cc:	cmp	r3, #0
   164d0:	beq	164e0 <argp_failure@@Base+0x438>
   164d4:	ldr	r3, [r0, #-12]
   164d8:	tst	r3, #2
   164dc:	beq	16df0 <argp_failure@@Base+0xd48>
   164e0:	subs	ip, ip, #1
   164e4:	add	r0, r0, #24
   164e8:	bne	164c8 <argp_failure@@Base+0x420>
   164ec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   164f0:	cmp	lr, r5
   164f4:	str	r2, [fp, #-128]	; 0xffffff80
   164f8:	ldr	r5, [r3, #8]
   164fc:	bhi	16e08 <argp_failure@@Base+0xd60>
   16500:	str	r5, [r9, #12]
   16504:	ldr	r5, [r8, #4]
   16508:	cmp	r5, #0
   1650c:	beq	16590 <argp_failure@@Base+0x4e8>
   16510:	mov	r4, r6
   16514:	str	r8, [fp, #-124]	; 0xffffff84
   16518:	b	16530 <argp_failure@@Base+0x488>
   1651c:	subs	r5, r5, #1
   16520:	add	r4, r4, #24
   16524:	beq	16584 <argp_failure@@Base+0x4dc>
   16528:	ldr	r7, [r4, #12]
   1652c:	and	r2, r7, #8
   16530:	cmp	r2, #0
   16534:	bne	1651c <argp_failure@@Base+0x474>
   16538:	ldr	r8, [r4, #4]
   1653c:	sub	r2, r8, #1
   16540:	cmp	r2, #254	; 0xfe
   16544:	bhi	1651c <argp_failure@@Base+0x474>
   16548:	bl	112d4 <__ctype_b_loc@plt>
   1654c:	lsl	r2, r8, #1
   16550:	ldr	r1, [r0]
   16554:	ldrh	r2, [r1, r2]
   16558:	tst	r2, #16384	; 0x4000
   1655c:	beq	1651c <argp_failure@@Base+0x474>
   16560:	ldrb	r2, [sl]
   16564:	cmp	r8, r2
   16568:	bne	1651c <argp_failure@@Base+0x474>
   1656c:	tst	r7, #2
   16570:	beq	16eb4 <argp_failure@@Base+0xe0c>
   16574:	subs	r5, r5, #1
   16578:	add	sl, sl, #1
   1657c:	add	r4, r4, #24
   16580:	bne	16528 <argp_failure@@Base+0x480>
   16584:	ldr	r4, [r6, #12]
   16588:	ldr	r8, [fp, #-124]	; 0xffffff84
   1658c:	and	r4, r4, #8
   16590:	ldr	r3, [r9, #28]
   16594:	ldr	r1, [r9, #24]
   16598:	cmp	r4, #0
   1659c:	ldr	r2, [r9, #16]
   165a0:	sub	r3, r3, r1
   165a4:	beq	16e20 <argp_failure@@Base+0xd78>
   165a8:	cmp	r3, r2
   165ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   165b0:	ldr	r4, [r3, #16]
   165b4:	bhi	170e8 <argp_failure@@Base+0x1040>
   165b8:	str	r4, [r9, #12]
   165bc:	ldr	r5, [r8, #4]
   165c0:	cmp	r5, #0
   165c4:	addne	r4, r6, #24
   165c8:	bne	165dc <argp_failure@@Base+0x534>
   165cc:	b	1666c <argp_failure@@Base+0x5c4>
   165d0:	subs	r5, r5, #1
   165d4:	add	r4, r4, #24
   165d8:	beq	1666c <argp_failure@@Base+0x5c4>
   165dc:	ldr	r3, [r4, #-24]	; 0xffffffe8
   165e0:	cmp	r3, #0
   165e4:	beq	165d0 <argp_failure@@Base+0x528>
   165e8:	ldr	r3, [r4, #-12]
   165ec:	tst	r3, #2
   165f0:	bne	165d0 <argp_failure@@Base+0x528>
   165f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   165f8:	sub	r1, fp, #76	; 0x4c
   165fc:	ldr	r0, [r3, #16]
   16600:	bl	147e8 <__assert_fail@plt+0x337c>
   16604:	ldr	sl, [r4, #-24]	; 0xffffffe8
   16608:	mov	r0, sl
   1660c:	bl	11304 <strlen@plt>
   16610:	subs	r7, r0, #0
   16614:	beq	165d0 <argp_failure@@Base+0x528>
   16618:	ldr	r2, [r9, #28]
   1661c:	ldr	lr, [r9, #32]
   16620:	add	ip, r2, r7
   16624:	cmp	lr, ip
   16628:	mov	r1, r7
   1662c:	mov	r0, r9
   16630:	bcs	16644 <argp_failure@@Base+0x59c>
   16634:	bl	19d3c <argp_parse@@Base+0x2198>
   16638:	cmp	r0, #0
   1663c:	beq	165d0 <argp_failure@@Base+0x528>
   16640:	ldr	r2, [r9, #28]
   16644:	mov	r0, r2
   16648:	mov	r1, sl
   1664c:	mov	r2, r7
   16650:	bl	111b4 <memcpy@plt>
   16654:	ldr	r2, [r9, #28]
   16658:	subs	r5, r5, #1
   1665c:	add	r3, r2, r7
   16660:	str	r3, [r9, #28]
   16664:	add	r4, r4, #24
   16668:	bne	165dc <argp_failure@@Base+0x534>
   1666c:	ldr	r3, [r9, #28]
   16670:	ldr	r1, [r9, #24]
   16674:	ldr	r2, [r9, #16]
   16678:	sub	r3, r3, r1
   1667c:	cmp	r3, r2
   16680:	bhi	1709c <argp_failure@@Base+0xff4>
   16684:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16688:	mov	r3, #0
   1668c:	cmp	r2, r3
   16690:	str	r3, [r9, #4]
   16694:	beq	16f84 <argp_failure@@Base+0xedc>
   16698:	ldr	r3, [r6, #12]
   1669c:	tst	r3, #8
   166a0:	bne	166cc <argp_failure@@Base+0x624>
   166a4:	ldr	r4, [r6, #4]
   166a8:	sub	r3, r4, #1
   166ac:	cmp	r3, #254	; 0xfe
   166b0:	bhi	166cc <argp_failure@@Base+0x624>
   166b4:	bl	112d4 <__ctype_b_loc@plt>
   166b8:	lsl	r4, r4, #1
   166bc:	ldr	r3, [r0]
   166c0:	ldrh	r3, [r3, r4]
   166c4:	tst	r3, #16384	; 0x4000
   166c8:	bne	166d8 <argp_failure@@Base+0x630>
   166cc:	ldr	r3, [r6]
   166d0:	cmp	r3, #0
   166d4:	beq	1734c <argp_failure@@Base+0x12a4>
   166d8:	ldr	r3, [r9, #28]
   166dc:	ldr	r1, [r9, #24]
   166e0:	ldr	r2, [r9, #16]
   166e4:	sub	r3, r3, r1
   166e8:	cmp	r3, r2
   166ec:	bhi	16f34 <argp_failure@@Base+0xe8c>
   166f0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   166f4:	str	r3, [r9, #4]
   166f8:	ldr	r3, [fp, #-108]	; 0xffffff94
   166fc:	add	r8, r8, #28
   16700:	subs	r3, r3, #1
   16704:	str	r3, [fp, #-108]	; 0xffffff94
   16708:	ldr	r3, [fp, #-120]	; 0xffffff88
   1670c:	str	r3, [r9, #12]
   16710:	bne	1644c <argp_failure@@Base+0x3a4>
   16714:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16718:	ldr	sl, [fp, #-100]	; 0xffffff9c
   1671c:	cmp	r3, #0
   16720:	beq	16800 <argp_failure@@Base+0x758>
   16724:	ldr	r3, [sl, #4]
   16728:	cmp	r3, #0
   1672c:	beq	16800 <argp_failure@@Base+0x758>
   16730:	ldr	r3, [fp, #-104]	; 0xffffff98
   16734:	ldr	r1, [pc, #2956]	; 172c8 <argp_failure@@Base+0x1220>
   16738:	cmp	r3, #0
   1673c:	ldr	r0, [pc, #2952]	; 172cc <argp_failure@@Base+0x1224>
   16740:	ldrne	r2, [r3]
   16744:	ldreq	r2, [fp, #-104]	; 0xffffff98
   16748:	ldr	r3, [fp, #-104]	; 0xffffff98
   1674c:	bl	14598 <__assert_fail@plt+0x312c>
   16750:	subs	r4, r0, #0
   16754:	beq	16800 <argp_failure@@Base+0x758>
   16758:	ldrb	r3, [r4]
   1675c:	cmp	r3, #0
   16760:	beq	167f4 <argp_failure@@Base+0x74c>
   16764:	ldr	r3, [r9, #28]
   16768:	ldr	r2, [r9, #32]
   1676c:	cmp	r3, r2
   16770:	bcs	17410 <argp_failure@@Base+0x1368>
   16774:	add	r1, r3, #1
   16778:	mov	r2, #10
   1677c:	str	r1, [r9, #28]
   16780:	strb	r2, [r3]
   16784:	mov	r0, r4
   16788:	bl	11304 <strlen@plt>
   1678c:	subs	r5, r0, #0
   16790:	beq	173ec <argp_failure@@Base+0x1344>
   16794:	ldr	r0, [r9, #28]
   16798:	ldr	r2, [r9, #32]
   1679c:	add	r3, r0, r5
   167a0:	cmp	r2, r3
   167a4:	bcs	167c0 <argp_failure@@Base+0x718>
   167a8:	mov	r1, r5
   167ac:	mov	r0, r9
   167b0:	bl	19d3c <argp_parse@@Base+0x2198>
   167b4:	cmp	r0, #0
   167b8:	beq	173ec <argp_failure@@Base+0x1344>
   167bc:	ldr	r0, [r9, #28]
   167c0:	mov	r2, r5
   167c4:	mov	r1, r4
   167c8:	bl	111b4 <memcpy@plt>
   167cc:	ldr	r3, [r9, #28]
   167d0:	add	r3, r3, r5
   167d4:	str	r3, [r9, #28]
   167d8:	ldr	r2, [r9, #32]
   167dc:	cmp	r2, r3
   167e0:	bls	173f4 <argp_failure@@Base+0x134c>
   167e4:	add	r1, r3, #1
   167e8:	mov	r2, #10
   167ec:	str	r1, [r9, #28]
   167f0:	strb	r2, [r3]
   167f4:	ldr	r3, [pc, #2768]	; 172cc <argp_failure@@Base+0x1224>
   167f8:	cmp	r4, r3
   167fc:	bne	17340 <argp_failure@@Base+0x1298>
   16800:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16804:	mov	r4, #1
   16808:	tst	r3, #32
   1680c:	beq	16358 <argp_failure@@Base+0x2b0>
   16810:	mov	r3, #0
   16814:	str	r3, [sp]
   16818:	str	r9, [sp, #4]
   1681c:	mov	r3, r4
   16820:	ldr	r1, [fp, #-104]	; 0xffffff98
   16824:	ldr	r0, [fp, #-112]	; 0xffffff90
   16828:	mov	r2, #1
   1682c:	bl	14994 <__assert_fail@plt+0x3528>
   16830:	orr	r4, r4, r0
   16834:	b	16358 <argp_failure@@Base+0x2b0>
   16838:	ldr	r0, [pc, #2704]	; 172d0 <argp_failure@@Base+0x1228>
   1683c:	bl	11274 <getenv@plt>
   16840:	mov	lr, sl
   16844:	sub	r3, fp, #76	; 0x4c
   16848:	mov	ip, r3
   1684c:	str	r3, [fp, #-100]	; 0xffffff9c
   16850:	mov	r6, r0
   16854:	ldm	lr!, {r0, r1, r2, r3}
   16858:	cmp	r6, #0
   1685c:	stmia	ip!, {r0, r1, r2, r3}
   16860:	ldm	lr!, {r0, r1, r2, r3}
   16864:	stmia	ip!, {r0, r1, r2, r3}
   16868:	ldm	lr, {r0, r1}
   1686c:	stm	ip, {r0, r1}
   16870:	beq	162f0 <argp_failure@@Base+0x248>
   16874:	ldrb	r9, [r6]
   16878:	ldr	r8, [pc, #2644]	; 172d4 <argp_failure@@Base+0x122c>
   1687c:	cmp	r9, #0
   16880:	beq	169d4 <argp_failure@@Base+0x92c>
   16884:	bl	112d4 <__ctype_b_loc@plt>
   16888:	mov	r5, r0
   1688c:	ldr	r1, [r0]
   16890:	b	16898 <argp_failure@@Base+0x7f0>
   16894:	ldrb	r9, [r6, #1]!
   16898:	lsl	r3, r9, #1
   1689c:	ldrh	r3, [r1, r3]
   168a0:	tst	r3, #8192	; 0x2000
   168a4:	bne	16894 <argp_failure@@Base+0x7ec>
   168a8:	ands	r2, r3, #1024	; 0x400
   168ac:	beq	169cc <argp_failure@@Base+0x924>
   168b0:	cmp	r9, #95	; 0x5f
   168b4:	cmpne	r9, #45	; 0x2d
   168b8:	lsl	r3, r3, #28
   168bc:	moveq	r7, #1
   168c0:	movne	r7, #0
   168c4:	orrs	r3, r7, r3, lsr #31
   168c8:	beq	17188 <argp_failure@@Base+0x10e0>
   168cc:	mov	r4, r6
   168d0:	ldrb	r3, [r4, #1]!
   168d4:	cmp	r3, #95	; 0x5f
   168d8:	cmpne	r3, #45	; 0x2d
   168dc:	lsl	r2, r3, #1
   168e0:	moveq	r0, #1
   168e4:	ldrh	r2, [r1, r2]
   168e8:	movne	r0, #0
   168ec:	lsl	ip, r2, #28
   168f0:	orrs	r0, r0, ip, lsr #31
   168f4:	bne	168d0 <argp_failure@@Base+0x828>
   168f8:	tst	r2, #8192	; 0x2000
   168fc:	sub	r7, r4, r6
   16900:	beq	16918 <argp_failure@@Base+0x870>
   16904:	ldrb	r3, [r4, #1]!
   16908:	lsl	r2, r3, #1
   1690c:	ldrh	r2, [r1, r2]
   16910:	tst	r2, #8192	; 0x2000
   16914:	bne	16904 <argp_failure@@Base+0x85c>
   16918:	cmp	r3, #44	; 0x2c
   1691c:	cmpne	r3, #0
   16920:	beq	16a34 <argp_failure@@Base+0x98c>
   16924:	cmp	r3, #61	; 0x3d
   16928:	beq	16d90 <argp_failure@@Base+0xce8>
   1692c:	ldrb	r3, [r4]
   16930:	lsl	r3, r3, #1
   16934:	ldrh	r3, [r1, r3]
   16938:	tst	r3, #2048	; 0x800
   1693c:	bne	16d30 <argp_failure@@Base+0xc88>
   16940:	ldr	r3, [fp, #-108]	; 0xffffff94
   16944:	mov	r9, r3
   16948:	str	r3, [fp, #-116]	; 0xffffff8c
   1694c:	ldr	r5, [pc, #2436]	; 172d8 <argp_failure@@Base+0x1230>
   16950:	b	16960 <argp_failure@@Base+0x8b8>
   16954:	add	r5, r5, #16
   16958:	cmp	r5, r8
   1695c:	beq	171f0 <argp_failure@@Base+0x1148>
   16960:	mov	r0, r5
   16964:	bl	11304 <strlen@plt>
   16968:	cmp	r0, r7
   1696c:	bne	16954 <argp_failure@@Base+0x8ac>
   16970:	mov	r2, r7
   16974:	mov	r1, r5
   16978:	mov	r0, r6
   1697c:	bl	11448 <strncmp@plt>
   16980:	cmp	r0, #0
   16984:	bne	16954 <argp_failure@@Base+0x8ac>
   16988:	cmp	r9, #0
   1698c:	beq	1699c <argp_failure@@Base+0x8f4>
   16990:	ldrb	r1, [r5, #14]
   16994:	cmp	r1, #0
   16998:	beq	173d0 <argp_failure@@Base+0x1328>
   1699c:	ldrb	r3, [r5, #15]
   169a0:	sub	r2, fp, #36	; 0x24
   169a4:	add	r3, r2, r3
   169a8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   169ac:	str	r2, [r3, #-40]	; 0xffffffd8
   169b0:	cmp	r5, r8
   169b4:	beq	171f0 <argp_failure@@Base+0x1148>
   169b8:	ldrb	r9, [r4]
   169bc:	cmp	r9, #44	; 0x2c
   169c0:	beq	170d0 <argp_failure@@Base+0x1028>
   169c4:	mov	r6, r4
   169c8:	b	1687c <argp_failure@@Base+0x7d4>
   169cc:	cmp	r9, #0
   169d0:	bne	17328 <argp_failure@@Base+0x1280>
   169d4:	ldr	lr, [fp, #-44]	; 0xffffffd4
   169d8:	ldr	r1, [pc, #2296]	; 172d8 <argp_failure@@Base+0x1230>
   169dc:	add	r3, r1, #16
   169e0:	cmp	r3, r8
   169e4:	mov	r1, r3
   169e8:	beq	1712c <argp_failure@@Base+0x1084>
   169ec:	ldrb	r2, [r3, #14]
   169f0:	cmp	r2, #0
   169f4:	bne	169dc <argp_failure@@Base+0x934>
   169f8:	ldrb	r0, [r3, #15]
   169fc:	sub	ip, fp, #36	; 0x24
   16a00:	cmp	r0, #32
   16a04:	add	ip, ip, r0
   16a08:	beq	169dc <argp_failure@@Base+0x934>
   16a0c:	ldr	r0, [ip, #-40]	; 0xffffffd8
   16a10:	cmp	r0, lr
   16a14:	blt	169dc <argp_failure@@Base+0x934>
   16a18:	ldr	r1, [pc, #2236]	; 172dc <argp_failure@@Base+0x1234>
   16a1c:	ldr	r0, [fp, #-104]	; 0xffffff98
   16a20:	stm	sp, {r1, r3}
   16a24:	ldr	r3, [pc, #2228]	; 172e0 <argp_failure@@Base+0x1238>
   16a28:	mov	r1, r2
   16a2c:	bl	160a8 <argp_failure@@Base>
   16a30:	b	162f0 <argp_failure@@Base+0x248>
   16a34:	cmp	r9, #110	; 0x6e
   16a38:	beq	16dc0 <argp_failure@@Base+0xd18>
   16a3c:	mov	r9, #1
   16a40:	str	r9, [fp, #-116]	; 0xffffff8c
   16a44:	b	1694c <argp_failure@@Base+0x8a4>
   16a48:	ldr	r3, [fp, #4]
   16a4c:	ldr	r1, [pc, #2192]	; 172e4 <argp_failure@@Base+0x123c>
   16a50:	mov	r2, r3
   16a54:	mov	r0, r9
   16a58:	bl	19d5c <argp_parse@@Base+0x21b8>
   16a5c:	mov	r4, #1
   16a60:	b	16340 <argp_failure@@Base+0x298>
   16a64:	mov	r2, #1
   16a68:	mov	r3, #0
   16a6c:	stm	sp, {r2, r9}
   16a70:	ldr	r1, [fp, #-104]	; 0xffffff98
   16a74:	mov	r2, r3
   16a78:	ldr	r0, [fp, #-112]	; 0xffffff90
   16a7c:	bl	14994 <__assert_fail@plt+0x3528>
   16a80:	orr	r4, r4, r0
   16a84:	b	16334 <argp_failure@@Base+0x28c>
   16a88:	ldr	r3, [fp, #-112]	; 0xffffff90
   16a8c:	mov	r4, #1
   16a90:	mov	r6, r4
   16a94:	ldr	r1, [r3, #16]
   16a98:	ldr	r0, [r3, #8]
   16a9c:	bl	15e98 <__assert_fail@plt+0x4a2c>
   16aa0:	mov	r1, #0
   16aa4:	add	r3, r0, #14
   16aa8:	bic	r3, r3, #7
   16aac:	sub	sp, sp, r3
   16ab0:	add	r7, sp, #8
   16ab4:	mov	r2, r0
   16ab8:	mov	r0, r7
   16abc:	bl	11358 <memset@plt>
   16ac0:	sub	r3, fp, #76	; 0x4c
   16ac4:	str	r3, [fp, #-100]	; 0xffffff9c
   16ac8:	ldr	r8, [fp, #-136]	; 0xffffff78
   16acc:	str	r7, [fp, #-108]	; 0xffffff94
   16ad0:	b	16bec <argp_failure@@Base+0xb44>
   16ad4:	cmp	r4, #0
   16ad8:	ldr	r3, [fp, #-108]	; 0xffffff94
   16adc:	ldr	r5, [r9, #12]
   16ae0:	ldrne	r2, [pc, #2048]	; 172e8 <argp_failure@@Base+0x1240>
   16ae4:	str	r7, [r9, #12]
   16ae8:	ldreq	r2, [pc, #2044]	; 172ec <argp_failure@@Base+0x1244>
   16aec:	str	r3, [fp, #-76]	; 0xffffffb4
   16af0:	ldr	r1, [pc, #2040]	; 172f0 <argp_failure@@Base+0x1248>
   16af4:	ldr	r3, [fp, #4]
   16af8:	mov	r0, r9
   16afc:	bl	19d5c <argp_parse@@Base+0x21b8>
   16b00:	ldr	r3, [r9, #28]
   16b04:	ldr	r1, [r9, #24]
   16b08:	ldr	r2, [r9, #16]
   16b0c:	sub	r3, r3, r1
   16b10:	cmp	r3, r2
   16b14:	ldr	r7, [sl, #28]
   16b18:	bhi	16c80 <argp_failure@@Base+0xbd8>
   16b1c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16b20:	ldr	r4, [r9, #4]
   16b24:	tst	r3, #2
   16b28:	str	r7, [r9, #4]
   16b2c:	beq	16c64 <argp_failure@@Base+0xbbc>
   16b30:	ldr	r3, [r8, #4]
   16b34:	cmp	r3, #0
   16b38:	beq	16b88 <argp_failure@@Base+0xae0>
   16b3c:	ldr	ip, [r9, #28]
   16b40:	ldr	r2, [r9, #32]
   16b44:	add	r3, ip, #12
   16b48:	cmp	r2, r3
   16b4c:	bcs	16b68 <argp_failure@@Base+0xac0>
   16b50:	mov	r1, #12
   16b54:	mov	r0, r9
   16b58:	bl	19d3c <argp_parse@@Base+0x2198>
   16b5c:	cmp	r0, #0
   16b60:	beq	16b88 <argp_failure@@Base+0xae0>
   16b64:	ldr	ip, [r9, #28]
   16b68:	ldr	r3, [pc, #1924]	; 172f4 <argp_failure@@Base+0x124c>
   16b6c:	ldm	r3!, {r0, r1, r2}
   16b70:	str	r0, [ip]
   16b74:	str	r1, [ip, #4]
   16b78:	str	r2, [ip, #8]
   16b7c:	ldr	r3, [r9, #28]
   16b80:	add	r3, r3, #12
   16b84:	str	r3, [r9, #28]
   16b88:	mov	r3, r6
   16b8c:	ldr	r1, [fp, #-104]	; 0xffffff98
   16b90:	str	r9, [sp]
   16b94:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16b98:	ldr	r0, [fp, #-112]	; 0xffffff90
   16b9c:	bl	154d0 <__assert_fail@plt+0x4064>
   16ba0:	ldr	r3, [r9, #28]
   16ba4:	ldr	r1, [r9, #24]
   16ba8:	sub	r1, r3, r1
   16bac:	mov	r7, r0
   16bb0:	ldr	r0, [r9, #16]
   16bb4:	cmp	r1, r0
   16bb8:	strls	r5, [r9, #12]
   16bbc:	bhi	16c30 <argp_failure@@Base+0xb88>
   16bc0:	ldr	r1, [r9, #32]
   16bc4:	str	r4, [r9, #4]
   16bc8:	cmp	r1, r3
   16bcc:	bls	16c14 <argp_failure@@Base+0xb6c>
   16bd0:	add	r1, r3, #1
   16bd4:	mov	r2, #10
   16bd8:	str	r1, [r9, #28]
   16bdc:	strb	r2, [r3]
   16be0:	cmp	r7, #0
   16be4:	mov	r4, #0
   16be8:	beq	16c8c <argp_failure@@Base+0xbe4>
   16bec:	ldr	r3, [r9, #28]
   16bf0:	ldr	r1, [r9, #24]
   16bf4:	ldr	r2, [r9, #16]
   16bf8:	sub	r3, r3, r1
   16bfc:	cmp	r3, r2
   16c00:	ldr	r7, [sl, #28]
   16c04:	bls	16ad4 <argp_failure@@Base+0xa2c>
   16c08:	mov	r0, r9
   16c0c:	bl	196ac <argp_parse@@Base+0x1b08>
   16c10:	b	16ad4 <argp_failure@@Base+0xa2c>
   16c14:	mov	r1, r6
   16c18:	mov	r0, r9
   16c1c:	bl	19d3c <argp_parse@@Base+0x2198>
   16c20:	cmp	r0, #0
   16c24:	beq	16be0 <argp_failure@@Base+0xb38>
   16c28:	ldr	r3, [r9, #28]
   16c2c:	b	16bd0 <argp_failure@@Base+0xb28>
   16c30:	mov	r0, r9
   16c34:	bl	196ac <argp_parse@@Base+0x1b08>
   16c38:	ldr	r3, [r9, #28]
   16c3c:	ldr	r1, [r9, #24]
   16c40:	ldr	r0, [r9, #16]
   16c44:	sub	r1, r3, r1
   16c48:	cmp	r1, r0
   16c4c:	str	r5, [r9, #12]
   16c50:	bls	16bc0 <argp_failure@@Base+0xb18>
   16c54:	mov	r0, r9
   16c58:	bl	196ac <argp_parse@@Base+0x1b08>
   16c5c:	ldr	r3, [r9, #28]
   16c60:	b	16bc0 <argp_failure@@Base+0xb18>
   16c64:	mov	r1, r9
   16c68:	mov	r0, r8
   16c6c:	bl	15ef0 <__assert_fail@plt+0x4a84>
   16c70:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16c74:	orr	r3, r3, #2
   16c78:	str	r3, [fp, #-96]	; 0xffffffa0
   16c7c:	b	16b88 <argp_failure@@Base+0xae0>
   16c80:	mov	r0, r9
   16c84:	bl	196ac <argp_parse@@Base+0x1b08>
   16c88:	b	16b1c <argp_failure@@Base+0xa74>
   16c8c:	mov	r4, #1
   16c90:	b	16328 <argp_failure@@Base+0x280>
   16c94:	mov	r1, #0
   16c98:	ldr	r0, [fp, #-112]	; 0xffffff90
   16c9c:	bl	15720 <__assert_fail@plt+0x42b4>
   16ca0:	ldr	r2, [pc, #1616]	; 172f8 <argp_failure@@Base+0x1250>
   16ca4:	ldr	r4, [r0, #4]
   16ca8:	ldr	r5, [r0]
   16cac:	mov	r1, r4
   16cb0:	mov	r6, r0
   16cb4:	str	r0, [fp, #-136]	; 0xffffff78
   16cb8:	mov	r0, r5
   16cbc:	bl	15e10 <__assert_fail@plt+0x49a4>
   16cc0:	ldr	r2, [pc, #1588]	; 172fc <argp_failure@@Base+0x1254>
   16cc4:	cmp	r0, #0
   16cc8:	mvnne	r3, #0
   16ccc:	strne	r3, [r0, #12]
   16cd0:	movne	r3, r6
   16cd4:	mov	r0, r5
   16cd8:	ldrne	r4, [r3, #4]
   16cdc:	mov	r1, r4
   16ce0:	bl	15e10 <__assert_fail@plt+0x49a4>
   16ce4:	cmp	r0, #0
   16ce8:	mvnne	r3, #0
   16cec:	strne	r3, [r0, #12]
   16cf0:	ldrne	r3, [fp, #-136]	; 0xffffff78
   16cf4:	ldrne	r4, [r3, #4]
   16cf8:	cmp	r4, #0
   16cfc:	beq	1631c <argp_failure@@Base+0x274>
   16d00:	mov	r3, r5
   16d04:	mov	r1, #0
   16d08:	str	r1, [r3, #24]
   16d0c:	add	r1, r1, #1
   16d10:	cmp	r1, r4
   16d14:	add	r3, r3, #28
   16d18:	bne	16d08 <argp_failure@@Base+0xc60>
   16d1c:	mov	r0, r5
   16d20:	ldr	r3, [pc, #1496]	; 17300 <argp_failure@@Base+0x1258>
   16d24:	mov	r2, #28
   16d28:	bl	11418 <qsort@plt>
   16d2c:	b	1631c <argp_failure@@Base+0x274>
   16d30:	mov	r2, #10
   16d34:	mov	r1, #0
   16d38:	mov	r0, r4
   16d3c:	bl	11130 <strtol@plt>
   16d40:	ldrb	r3, [r4]
   16d44:	ldr	r2, [r5]
   16d48:	lsl	r3, r3, #1
   16d4c:	ldrh	r3, [r2, r3]
   16d50:	tst	r3, #2048	; 0x800
   16d54:	str	r0, [fp, #-116]	; 0xffffff8c
   16d58:	beq	16d80 <argp_failure@@Base+0xcd8>
   16d5c:	ldrb	r3, [r4, #1]!
   16d60:	lsl	r3, r3, #1
   16d64:	ldrh	r3, [r2, r3]
   16d68:	tst	r3, #2048	; 0x800
   16d6c:	bne	16d5c <argp_failure@@Base+0xcb4>
   16d70:	b	16d80 <argp_failure@@Base+0xcd8>
   16d74:	ldrb	r3, [r4, #1]!
   16d78:	lsl	r3, r3, #1
   16d7c:	ldrh	r3, [r2, r3]
   16d80:	tst	r3, #8192	; 0x2000
   16d84:	bne	16d74 <argp_failure@@Base+0xccc>
   16d88:	ldr	r9, [fp, #-108]	; 0xffffff94
   16d8c:	b	1694c <argp_failure@@Base+0x8a4>
   16d90:	ldrb	r3, [r4, #1]
   16d94:	add	r4, r4, #1
   16d98:	lsl	r3, r3, #1
   16d9c:	ldrh	r3, [r1, r3]
   16da0:	tst	r3, #8192	; 0x2000
   16da4:	beq	16938 <argp_failure@@Base+0x890>
   16da8:	ldrb	r3, [r4, #1]!
   16dac:	lsl	r3, r3, #1
   16db0:	ldrh	r3, [r1, r3]
   16db4:	tst	r3, #8192	; 0x2000
   16db8:	bne	16da8 <argp_failure@@Base+0xd00>
   16dbc:	b	16938 <argp_failure@@Base+0x890>
   16dc0:	ldrb	r3, [r6, #1]
   16dc4:	cmp	r3, #111	; 0x6f
   16dc8:	bne	16a3c <argp_failure@@Base+0x994>
   16dcc:	ldrb	r3, [r6, #2]
   16dd0:	cmp	r3, #45	; 0x2d
   16dd4:	bne	16a3c <argp_failure@@Base+0x994>
   16dd8:	ldr	r3, [fp, #-108]	; 0xffffff94
   16ddc:	add	r6, r6, #3
   16de0:	sub	r7, r7, #3
   16de4:	str	r3, [fp, #-116]	; 0xffffff8c
   16de8:	mov	r9, #1
   16dec:	b	1694c <argp_failure@@Base+0x8a4>
   16df0:	mov	r3, #1
   16df4:	str	r3, [fp, #-128]	; 0xffffff80
   16df8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16dfc:	cmp	lr, r5
   16e00:	ldr	r5, [r3, #8]
   16e04:	bls	16500 <argp_failure@@Base+0x458>
   16e08:	mov	r0, r9
   16e0c:	bl	196ac <argp_parse@@Base+0x1b08>
   16e10:	ldr	r7, [r6, #12]
   16e14:	and	r2, r7, #8
   16e18:	mov	r4, r2
   16e1c:	b	16500 <argp_failure@@Base+0x458>
   16e20:	cmp	r3, r2
   16e24:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16e28:	ldr	r4, [r3, #12]
   16e2c:	bhi	170dc <argp_failure@@Base+0x1034>
   16e30:	str	r4, [r9, #12]
   16e34:	ldr	r5, [r8, #4]
   16e38:	cmp	r5, #0
   16e3c:	beq	1666c <argp_failure@@Base+0x5c4>
   16e40:	add	r4, r6, #24
   16e44:	ldr	r7, [fp, #-100]	; 0xffffff9c
   16e48:	b	16e58 <argp_failure@@Base+0xdb0>
   16e4c:	subs	r5, r5, #1
   16e50:	add	r4, r4, #24
   16e54:	beq	1666c <argp_failure@@Base+0x5c4>
   16e58:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16e5c:	cmp	r3, #0
   16e60:	beq	16e4c <argp_failure@@Base+0xda4>
   16e64:	ldr	r3, [r4, #-12]
   16e68:	tst	r3, #2
   16e6c:	bne	16e4c <argp_failure@@Base+0xda4>
   16e70:	sub	r1, fp, #76	; 0x4c
   16e74:	ldr	r0, [r7, #12]
   16e78:	bl	147e8 <__assert_fail@plt+0x337c>
   16e7c:	ldr	r2, [r4, #-24]	; 0xffffffe8
   16e80:	ldr	r1, [pc, #1148]	; 17304 <argp_failure@@Base+0x125c>
   16e84:	mov	r0, r9
   16e88:	bl	19d5c <argp_parse@@Base+0x21b8>
   16e8c:	ldr	r3, [r6, #8]
   16e90:	ldr	r1, [pc, #1136]	; 17308 <argp_failure@@Base+0x1260>
   16e94:	subs	r2, r3, #0
   16e98:	mov	r0, r9
   16e9c:	beq	16e4c <argp_failure@@Base+0xda4>
   16ea0:	ldr	ip, [r6, #12]
   16ea4:	tst	ip, #1
   16ea8:	ldrne	r1, [pc, #1116]	; 1730c <argp_failure@@Base+0x1264>
   16eac:	bl	19d5c <argp_parse@@Base+0x21b8>
   16eb0:	b	16e4c <argp_failure@@Base+0xda4>
   16eb4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16eb8:	sub	r1, fp, #76	; 0x4c
   16ebc:	ldr	r0, [r3, #8]
   16ec0:	bl	147e8 <__assert_fail@plt+0x337c>
   16ec4:	ldr	r3, [r9, #28]
   16ec8:	ldr	r2, [r9, #32]
   16ecc:	cmp	r3, r2
   16ed0:	bcs	17110 <argp_failure@@Base+0x1068>
   16ed4:	add	r2, r3, #1
   16ed8:	str	r2, [r9, #28]
   16edc:	mov	r2, #45	; 0x2d
   16ee0:	strb	r2, [r3]
   16ee4:	ldr	r3, [r9, #28]
   16ee8:	ldr	r2, [r9, #32]
   16eec:	ldrb	r7, [sl]
   16ef0:	cmp	r3, r2
   16ef4:	bcs	170f4 <argp_failure@@Base+0x104c>
   16ef8:	add	r2, r3, #1
   16efc:	str	r2, [r9, #28]
   16f00:	strb	r7, [r3]
   16f04:	ldr	r3, [fp, #-128]	; 0xffffff80
   16f08:	cmp	r3, #0
   16f0c:	beq	170a8 <argp_failure@@Base+0x1000>
   16f10:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16f14:	ldr	r3, [r3]
   16f18:	cmp	r3, #0
   16f1c:	bne	170a8 <argp_failure@@Base+0x1000>
   16f20:	ldr	r3, [r6, #8]
   16f24:	cmp	r3, #0
   16f28:	movne	r3, #1
   16f2c:	strne	r3, [fp, #-80]	; 0xffffffb0
   16f30:	b	16574 <argp_failure@@Base+0x4cc>
   16f34:	mov	r0, r9
   16f38:	bl	196ac <argp_parse@@Base+0x1b08>
   16f3c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16f40:	ldr	r3, [r9, #28]
   16f44:	ldr	r1, [r9, #24]
   16f48:	str	r2, [r9, #4]
   16f4c:	ldr	r2, [r9, #16]
   16f50:	sub	r3, r3, r1
   16f54:	cmp	r3, r2
   16f58:	bls	166f8 <argp_failure@@Base+0x650>
   16f5c:	mov	r0, r9
   16f60:	bl	196ac <argp_parse@@Base+0x1b08>
   16f64:	b	166f8 <argp_failure@@Base+0x650>
   16f68:	mov	r0, r9
   16f6c:	bl	196ac <argp_parse@@Base+0x1b08>
   16f70:	ldr	lr, [r9, #28]
   16f74:	ldr	r2, [r9, #24]
   16f78:	ldr	r5, [r9, #16]
   16f7c:	sub	lr, lr, r2
   16f80:	b	1646c <argp_failure@@Base+0x3c4>
   16f84:	ldr	r4, [r6, #16]
   16f88:	ldr	r1, [r6, #4]
   16f8c:	mov	r0, r4
   16f90:	ldr	r3, [fp, #-104]	; 0xffffff98
   16f94:	ldr	r2, [r8, #20]
   16f98:	bl	14598 <__assert_fail@plt+0x312c>
   16f9c:	subs	r5, r0, #0
   16fa0:	beq	17058 <argp_failure@@Base+0xfb0>
   16fa4:	ldrb	r3, [r5]
   16fa8:	cmp	r3, #0
   16fac:	beq	17048 <argp_failure@@Base+0xfa0>
   16fb0:	ldr	r3, [r9, #28]
   16fb4:	ldr	r1, [r9, #24]
   16fb8:	ldr	r2, [r9, #16]
   16fbc:	sub	r3, r3, r1
   16fc0:	cmp	r3, r2
   16fc4:	bhi	17248 <argp_failure@@Base+0x11a0>
   16fc8:	ldr	r7, [r9, #20]
   16fcc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16fd0:	bic	r7, r7, r7, asr #31
   16fd4:	ldr	r6, [r3, #20]
   16fd8:	mov	r3, r6
   16fdc:	str	r6, [r9, #4]
   16fe0:	add	r2, r6, #3
   16fe4:	cmp	r2, r7
   16fe8:	str	r3, [r9, #12]
   16fec:	bcs	17198 <argp_failure@@Base+0x10f0>
   16ff0:	ldr	r3, [r9, #28]
   16ff4:	ldr	r2, [r9, #32]
   16ff8:	cmp	r3, r2
   16ffc:	bcs	17398 <argp_failure@@Base+0x12f0>
   17000:	add	r1, r3, #1
   17004:	mov	r2, #10
   17008:	str	r1, [r9, #28]
   1700c:	strb	r2, [r3]
   17010:	mov	r0, r5
   17014:	bl	11304 <strlen@plt>
   17018:	subs	r6, r0, #0
   1701c:	beq	17048 <argp_failure@@Base+0xfa0>
   17020:	ldr	r0, [r9, #28]
   17024:	ldr	r2, [r9, #32]
   17028:	add	r3, r0, r6
   1702c:	cmp	r2, r3
   17030:	bcs	1722c <argp_failure@@Base+0x1184>
   17034:	mov	r1, r6
   17038:	mov	r0, r9
   1703c:	bl	19d3c <argp_parse@@Base+0x2198>
   17040:	cmp	r0, #0
   17044:	bne	17228 <argp_failure@@Base+0x1180>
   17048:	cmp	r4, r5
   1704c:	beq	17058 <argp_failure@@Base+0xfb0>
   17050:	mov	r0, r5
   17054:	bl	18a3c <argp_parse@@Base+0xe98>
   17058:	ldr	r3, [r9, #28]
   1705c:	ldr	r2, [r9, #24]
   17060:	ldr	r1, [r9, #16]
   17064:	sub	r2, r3, r2
   17068:	cmp	r2, r1
   1706c:	bhi	17178 <argp_failure@@Base+0x10d0>
   17070:	ldr	r1, [r9, #32]
   17074:	mov	r2, #0
   17078:	cmp	r1, r3
   1707c:	str	r2, [r9, #4]
   17080:	bls	1715c <argp_failure@@Base+0x10b4>
   17084:	add	r1, r3, #1
   17088:	mov	r2, #10
   1708c:	str	r1, [r9, #28]
   17090:	strb	r2, [r3]
   17094:	str	r8, [fp, #-88]	; 0xffffffa8
   17098:	b	166d8 <argp_failure@@Base+0x630>
   1709c:	mov	r0, r9
   170a0:	bl	196ac <argp_parse@@Base+0x1b08>
   170a4:	b	16684 <argp_failure@@Base+0x5dc>
   170a8:	ldr	r2, [r6, #8]
   170ac:	cmp	r2, #0
   170b0:	beq	16574 <argp_failure@@Base+0x4cc>
   170b4:	ldr	r3, [r6, #12]
   170b8:	mov	r0, r9
   170bc:	tst	r3, #1
   170c0:	ldrne	r1, [pc, #584]	; 17310 <argp_failure@@Base+0x1268>
   170c4:	ldreq	r1, [pc, #584]	; 17314 <argp_failure@@Base+0x126c>
   170c8:	bl	19d5c <argp_parse@@Base+0x21b8>
   170cc:	b	16574 <argp_failure@@Base+0x4cc>
   170d0:	ldrb	r9, [r4, #1]
   170d4:	add	r4, r4, #1
   170d8:	b	169c4 <argp_failure@@Base+0x91c>
   170dc:	mov	r0, r9
   170e0:	bl	196ac <argp_parse@@Base+0x1b08>
   170e4:	b	16e30 <argp_failure@@Base+0xd88>
   170e8:	mov	r0, r9
   170ec:	bl	196ac <argp_parse@@Base+0x1b08>
   170f0:	b	165b8 <argp_failure@@Base+0x510>
   170f4:	mov	r1, #1
   170f8:	mov	r0, r9
   170fc:	bl	19d3c <argp_parse@@Base+0x2198>
   17100:	cmp	r0, #0
   17104:	beq	16f04 <argp_failure@@Base+0xe5c>
   17108:	ldr	r3, [r9, #28]
   1710c:	b	16ef8 <argp_failure@@Base+0xe50>
   17110:	mov	r1, #1
   17114:	mov	r0, r9
   17118:	bl	19d3c <argp_parse@@Base+0x2198>
   1711c:	cmp	r0, #0
   17120:	beq	16ee4 <argp_failure@@Base+0xe3c>
   17124:	ldr	r3, [r9, #28]
   17128:	b	16ed4 <argp_failure@@Base+0xe2c>
   1712c:	ldr	lr, [fp, #-100]	; 0xffffff9c
   17130:	ldr	sl, [pc, #388]	; 172bc <argp_failure@@Base+0x1214>
   17134:	mov	r4, #1
   17138:	ldm	lr!, {r0, r1, r2, r3}
   1713c:	mov	ip, sl
   17140:	stmia	ip!, {r0, r1, r2, r3}
   17144:	ldm	lr!, {r0, r1, r2, r3}
   17148:	stmia	ip!, {r0, r1, r2, r3}
   1714c:	ldm	lr, {r0, r1}
   17150:	stm	ip, {r0, r1}
   17154:	str	r4, [sl, #36]	; 0x24
   17158:	b	162f0 <argp_failure@@Base+0x248>
   1715c:	mov	r1, #1
   17160:	mov	r0, r9
   17164:	bl	19d3c <argp_parse@@Base+0x2198>
   17168:	cmp	r0, #0
   1716c:	beq	17094 <argp_failure@@Base+0xfec>
   17170:	ldr	r3, [r9, #28]
   17174:	b	17084 <argp_failure@@Base+0xfdc>
   17178:	mov	r0, r9
   1717c:	bl	196ac <argp_parse@@Base+0x1b08>
   17180:	ldr	r3, [r9, #28]
   17184:	b	17070 <argp_failure@@Base+0xfc8>
   17188:	mov	r7, r3
   1718c:	mov	r4, r6
   17190:	mov	r3, r9
   17194:	b	16918 <argp_failure@@Base+0x870>
   17198:	cmp	r6, r7
   1719c:	bhi	17388 <argp_failure@@Base+0x12e0>
   171a0:	ldr	r3, [r9, #28]
   171a4:	ldr	r1, [r9, #32]
   171a8:	add	r2, r3, #3
   171ac:	cmp	r1, r2
   171b0:	bcs	171cc <argp_failure@@Base+0x1124>
   171b4:	mov	r1, #3
   171b8:	mov	r0, r9
   171bc:	bl	19d3c <argp_parse@@Base+0x2198>
   171c0:	cmp	r0, #0
   171c4:	beq	17010 <argp_failure@@Base+0xf68>
   171c8:	ldr	r3, [r9, #28]
   171cc:	ldr	r2, [pc, #324]	; 17318 <argp_failure@@Base+0x1270>
   171d0:	ldrh	r1, [r2]
   171d4:	ldrb	r2, [r2, #2]
   171d8:	strh	r1, [r3]
   171dc:	strb	r2, [r3, #2]
   171e0:	ldr	r3, [r9, #28]
   171e4:	add	r3, r3, #3
   171e8:	str	r3, [r9, #28]
   171ec:	b	17010 <argp_failure@@Base+0xf68>
   171f0:	mov	r2, #0
   171f4:	str	r6, [sp, #4]
   171f8:	str	r7, [sp]
   171fc:	ldr	r3, [pc, #280]	; 1731c <argp_failure@@Base+0x1274>
   17200:	mov	r1, r2
   17204:	ldr	r0, [fp, #-104]	; 0xffffff98
   17208:	bl	160a8 <argp_failure@@Base>
   1720c:	b	169b8 <argp_failure@@Base+0x910>
   17210:	ldr	r3, [fp, #-136]	; 0xffffff78
   17214:	ldr	r8, [r3]
   17218:	str	r4, [fp, #-88]	; 0xffffffa8
   1721c:	str	r4, [fp, #-84]	; 0xffffffac
   17220:	str	r4, [fp, #-80]	; 0xffffffb0
   17224:	b	16448 <argp_failure@@Base+0x3a0>
   17228:	ldr	r0, [r9, #28]
   1722c:	mov	r2, r6
   17230:	mov	r1, r5
   17234:	bl	111b4 <memcpy@plt>
   17238:	ldr	r3, [r9, #28]
   1723c:	add	r6, r3, r6
   17240:	str	r6, [r9, #28]
   17244:	b	17048 <argp_failure@@Base+0xfa0>
   17248:	mov	r0, r9
   1724c:	bl	196ac <argp_parse@@Base+0x1b08>
   17250:	ldr	r3, [r9, #28]
   17254:	ldr	r1, [r9, #24]
   17258:	ldr	r2, [r9, #16]
   1725c:	ldr	r7, [r9, #20]
   17260:	ldr	sl, [fp, #-100]	; 0xffffff9c
   17264:	sub	r3, r3, r1
   17268:	cmp	r3, r2
   1726c:	ldr	r6, [sl, #20]
   17270:	bic	r7, r7, r7, asr #31
   17274:	bls	16fd8 <argp_failure@@Base+0xf30>
   17278:	mov	r0, r9
   1727c:	bl	196ac <argp_parse@@Base+0x1b08>
   17280:	ldr	r3, [r9, #28]
   17284:	ldr	r1, [r9, #24]
   17288:	ldr	r2, [r9, #16]
   1728c:	sub	r3, r3, r1
   17290:	cmp	r3, r2
   17294:	ldr	r3, [sl, #20]
   17298:	str	r6, [r9, #4]
   1729c:	movls	r6, r3
   172a0:	bls	16fe0 <argp_failure@@Base+0xf38>
   172a4:	mov	r0, r9
   172a8:	str	r3, [fp, #-124]	; 0xffffff84
   172ac:	bl	196ac <argp_parse@@Base+0x1b08>
   172b0:	ldr	r6, [sl, #20]
   172b4:	ldr	r3, [fp, #-124]	; 0xffffff84
   172b8:	b	16fe0 <argp_failure@@Base+0xf38>
   172bc:	andeq	sp, r2, r4, ror #11
   172c0:	ldrdeq	sp, [r2], -ip
   172c4:			; <UNDEFINED> instruction: 0x0001c1b0
   172c8:	andeq	r0, r0, #5
   172cc:	andeq	ip, r1, ip, lsr r1
   172d0:	andeq	fp, r1, r8, ror #31
   172d4:			; <UNDEFINED> instruction: 0x0001bebc
   172d8:	andeq	fp, r1, ip, lsr #28
   172dc:	andeq	ip, r1, r4, lsr #1
   172e0:	andeq	ip, r1, r0, ror r0
   172e4:	andeq	ip, r1, r4, ror #1
   172e8:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   172ec:	andeq	ip, r1, ip, asr #1
   172f0:	andeq	ip, r1, r4, asr #1
   172f4:	ldrdeq	ip, [r1], -r4
   172f8:	andeq	ip, r1, ip, lsr #1
   172fc:	strheq	ip, [r1], -r4
   17300:	ldrdeq	r4, [r1], -r0
   17304:	andeq	ip, r1, r4, lsr #2
   17308:	andeq	ip, r1, r4, lsr r1
   1730c:	andeq	ip, r1, ip, lsr #2
   17310:	andeq	ip, r1, ip, lsl r1
   17314:	andeq	ip, r1, r4, lsl r3
   17318:	andeq	ip, r1, r8, lsr r1
   1731c:	andeq	ip, r1, r8, lsr #32
   17320:	andeq	ip, r1, r0, asr r0
   17324:	strdeq	fp, [r1], -r8
   17328:	str	r6, [sp]
   1732c:	ldr	r3, [pc, #-20]	; 17320 <argp_failure@@Base+0x1278>
   17330:	mov	r1, r2
   17334:	ldr	r0, [fp, #-104]	; 0xffffff98
   17338:	bl	160a8 <argp_failure@@Base>
   1733c:	b	169d4 <argp_failure@@Base+0x92c>
   17340:	mov	r0, r4
   17344:	bl	18a3c <argp_parse@@Base+0xe98>
   17348:	b	16800 <argp_failure@@Base+0x758>
   1734c:	ldr	r0, [r6, #16]
   17350:	sub	r2, fp, #76	; 0x4c
   17354:	ldr	r1, [r8, #20]
   17358:	bl	145dc <__assert_fail@plt+0x3170>
   1735c:	b	17094 <argp_failure@@Base+0xfec>
   17360:	mov	r1, #1
   17364:	mov	r0, r9
   17368:	bl	19d3c <argp_parse@@Base+0x2198>
   1736c:	cmp	r0, #0
   17370:	beq	163c8 <argp_failure@@Base+0x320>
   17374:	ldr	r3, [r9, #28]
   17378:	b	163b8 <argp_failure@@Base+0x310>
   1737c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17380:	bl	11244 <funlockfile@plt>
   17384:	b	16388 <argp_failure@@Base+0x2e0>
   17388:	mov	r1, r6
   1738c:	mov	r0, r9
   17390:	bl	14504 <__assert_fail@plt+0x3098>
   17394:	b	17010 <argp_failure@@Base+0xf68>
   17398:	mov	r1, #1
   1739c:	mov	r0, r9
   173a0:	bl	19d3c <argp_parse@@Base+0x2198>
   173a4:	cmp	r0, #0
   173a8:	beq	17010 <argp_failure@@Base+0xf68>
   173ac:	ldr	r3, [r9, #28]
   173b0:	b	17000 <argp_failure@@Base+0xf58>
   173b4:	mov	r1, #1
   173b8:	mov	r0, r9
   173bc:	bl	19d3c <argp_parse@@Base+0x2198>
   173c0:	cmp	r0, #0
   173c4:	beq	16418 <argp_failure@@Base+0x370>
   173c8:	ldr	r3, [r9, #28]
   173cc:	b	16408 <argp_failure@@Base+0x360>
   173d0:	str	r6, [sp, #4]
   173d4:	str	r7, [sp]
   173d8:	ldr	r3, [pc, #-188]	; 17324 <argp_failure@@Base+0x127c>
   173dc:	mov	r2, #0
   173e0:	ldr	r0, [fp, #-104]	; 0xffffff98
   173e4:	bl	160a8 <argp_failure@@Base>
   173e8:	b	169b0 <argp_failure@@Base+0x908>
   173ec:	ldr	r3, [r9, #28]
   173f0:	b	167d8 <argp_failure@@Base+0x730>
   173f4:	mov	r1, #1
   173f8:	mov	r0, r9
   173fc:	bl	19d3c <argp_parse@@Base+0x2198>
   17400:	cmp	r0, #0
   17404:	beq	167f4 <argp_failure@@Base+0x74c>
   17408:	ldr	r3, [r9, #28]
   1740c:	b	167e4 <argp_failure@@Base+0x73c>
   17410:	mov	r1, #1
   17414:	mov	r0, r9
   17418:	bl	19d3c <argp_parse@@Base+0x2198>
   1741c:	cmp	r0, #0
   17420:	beq	16784 <argp_failure@@Base+0x6dc>
   17424:	ldr	r3, [r9, #28]
   17428:	b	16774 <argp_failure@@Base+0x6cc>

0001742c <argp_help@@Base>:
   1742c:	push	{lr}		; (str lr, [sp, #-4]!)
   17430:	sub	sp, sp, #12
   17434:	str	r3, [sp]
   17438:	mov	r3, r2
   1743c:	mov	r2, r1
   17440:	mov	r1, #0
   17444:	bl	162b0 <argp_failure@@Base+0x208>
   17448:	add	sp, sp, #12
   1744c:	pop	{pc}		; (ldr pc, [sp], #4)

00017450 <argp_state_help@@Base>:
   17450:	push	{r4, r5, lr}
   17454:	subs	r4, r0, #0
   17458:	sub	sp, sp, #12
   1745c:	mov	r5, r2
   17460:	beq	174c0 <argp_state_help@@Base+0x70>
   17464:	ldr	r3, [r4, #16]
   17468:	tst	r3, #2
   1746c:	bne	174b8 <argp_state_help@@Base+0x68>
   17470:	cmp	r1, #0
   17474:	beq	174b8 <argp_state_help@@Base+0x68>
   17478:	tst	r3, #64	; 0x40
   1747c:	ldr	r3, [r4, #40]	; 0x28
   17480:	orrne	r5, r5, #128	; 0x80
   17484:	ldr	r0, [r4]
   17488:	mov	r2, r1
   1748c:	str	r3, [sp]
   17490:	mov	r1, r4
   17494:	mov	r3, r5
   17498:	bl	162b0 <argp_failure@@Base+0x208>
   1749c:	ldr	r3, [r4, #16]
   174a0:	tst	r3, #32
   174a4:	bne	174b8 <argp_state_help@@Base+0x68>
   174a8:	ands	r0, r5, #256	; 0x100
   174ac:	bne	174ec <argp_state_help@@Base+0x9c>
   174b0:	tst	r5, #512	; 0x200
   174b4:	bne	174e8 <argp_state_help@@Base+0x98>
   174b8:	add	sp, sp, #12
   174bc:	pop	{r4, r5, pc}
   174c0:	cmp	r1, #0
   174c4:	beq	174b8 <argp_state_help@@Base+0x68>
   174c8:	ldr	r3, [pc, #40]	; 174f8 <argp_state_help@@Base+0xa8>
   174cc:	mov	r2, r1
   174d0:	mov	r1, r4
   174d4:	ldr	ip, [r3]
   174d8:	mov	r3, r5
   174dc:	str	ip, [sp]
   174e0:	bl	162b0 <argp_failure@@Base+0x208>
   174e4:	b	174a8 <argp_state_help@@Base+0x58>
   174e8:	bl	112ec <exit@plt>
   174ec:	ldr	r3, [pc, #8]	; 174fc <argp_state_help@@Base+0xac>
   174f0:	ldr	r0, [r3]
   174f4:	bl	112ec <exit@plt>
   174f8:	andeq	sp, r2, r0, lsr #12
   174fc:	andeq	sp, r2, ip, lsl #12

00017500 <argp_error@@Base>:
   17500:	push	{r1, r2, r3}
   17504:	push	{r4, r5, lr}
   17508:	subs	r5, r0, #0
   1750c:	sub	sp, sp, #8
   17510:	beq	175e0 <argp_error@@Base+0xe0>
   17514:	ldr	r3, [r5, #16]
   17518:	tst	r3, #2
   1751c:	bne	175d0 <argp_error@@Base+0xd0>
   17520:	ldr	r4, [r5, #44]	; 0x2c
   17524:	cmp	r4, #0
   17528:	beq	175d0 <argp_error@@Base+0xd0>
   1752c:	mov	r0, r4
   17530:	bl	11400 <flockfile@plt>
   17534:	ldr	r0, [r5, #40]	; 0x28
   17538:	add	r3, sp, #24
   1753c:	str	r3, [sp, #4]
   17540:	mov	r1, r4
   17544:	bl	1110c <fputs_unlocked@plt>
   17548:	ldr	r3, [r4, #20]
   1754c:	ldr	r2, [r4, #24]
   17550:	cmp	r3, r2
   17554:	addcc	r1, r3, #1
   17558:	movcc	r2, #58	; 0x3a
   1755c:	strcc	r1, [r4, #20]
   17560:	strbcc	r2, [r3]
   17564:	bcs	1762c <argp_error@@Base+0x12c>
   17568:	ldr	r3, [r4, #20]
   1756c:	ldr	r2, [r4, #24]
   17570:	cmp	r3, r2
   17574:	addcc	r1, r3, #1
   17578:	movcc	r2, #32
   1757c:	strcc	r1, [r4, #20]
   17580:	strbcc	r2, [r3]
   17584:	bcs	1761c <argp_error@@Base+0x11c>
   17588:	ldr	r1, [sp, #20]
   1758c:	ldr	r2, [sp, #4]
   17590:	mov	r0, r4
   17594:	bl	113c4 <vfprintf@plt>
   17598:	ldr	r3, [r4, #20]
   1759c:	ldr	r2, [r4, #24]
   175a0:	cmp	r3, r2
   175a4:	addcc	r1, r3, #1
   175a8:	movcc	r2, #10
   175ac:	strcc	r1, [r4, #20]
   175b0:	strbcc	r2, [r3]
   175b4:	bcs	1760c <argp_error@@Base+0x10c>
   175b8:	mov	r0, r5
   175bc:	mov	r2, #260	; 0x104
   175c0:	mov	r1, r4
   175c4:	bl	17450 <argp_state_help@@Base>
   175c8:	mov	r0, r4
   175cc:	bl	11244 <funlockfile@plt>
   175d0:	add	sp, sp, #8
   175d4:	pop	{r4, r5, lr}
   175d8:	add	sp, sp, #12
   175dc:	bx	lr
   175e0:	ldr	r3, [pc, #84]	; 1763c <argp_error@@Base+0x13c>
   175e4:	ldr	r4, [r3]
   175e8:	cmp	r4, #0
   175ec:	beq	175d0 <argp_error@@Base+0xd0>
   175f0:	mov	r0, r4
   175f4:	bl	11400 <flockfile@plt>
   175f8:	ldr	r2, [pc, #64]	; 17640 <argp_error@@Base+0x140>
   175fc:	add	r3, sp, #24
   17600:	str	r3, [sp, #4]
   17604:	ldr	r0, [r2]
   17608:	b	17540 <argp_error@@Base+0x40>
   1760c:	mov	r1, #10
   17610:	mov	r0, r4
   17614:	bl	11394 <__overflow@plt>
   17618:	b	175b8 <argp_error@@Base+0xb8>
   1761c:	mov	r1, #32
   17620:	mov	r0, r4
   17624:	bl	11394 <__overflow@plt>
   17628:	b	17588 <argp_error@@Base+0x88>
   1762c:	mov	r1, #58	; 0x3a
   17630:	mov	r0, r4
   17634:	bl	11394 <__overflow@plt>
   17638:	b	17568 <argp_error@@Base+0x68>
   1763c:	andeq	sp, r2, r8, lsr #12
   17640:	andeq	sp, r2, r0, lsr #12
   17644:	ldr	r3, [r0]
   17648:	push	{r4, r5, r6, lr}
   1764c:	cmp	r3, #0
   17650:	ldr	r5, [r0, #16]
   17654:	beq	176bc <argp_error@@Base+0x1bc>
   17658:	ldr	r0, [r1, #8]
   1765c:	mov	r2, #0
   17660:	add	r0, r0, #1
   17664:	str	r0, [r1, #8]
   17668:	b	17670 <argp_error@@Base+0x170>
   1766c:	add	r2, r2, #1
   17670:	add	r3, r3, #24
   17674:	ldr	r0, [r3, #-20]	; 0xffffffec
   17678:	cmp	r0, #0
   1767c:	bne	1766c <argp_error@@Base+0x16c>
   17680:	ldr	r0, [r3, #-24]	; 0xffffffe8
   17684:	cmp	r0, #0
   17688:	bne	1766c <argp_error@@Base+0x16c>
   1768c:	ldr	r0, [r3, #-8]
   17690:	cmp	r0, #0
   17694:	bne	1766c <argp_error@@Base+0x16c>
   17698:	ldr	r0, [r3, #-4]
   1769c:	cmp	r0, #0
   176a0:	bne	1766c <argp_error@@Base+0x16c>
   176a4:	ldm	r1, {r0, r3}
   176a8:	add	ip, r2, r2, lsl #1
   176ac:	add	r0, r0, ip
   176b0:	add	r2, r3, r2
   176b4:	stm	r1, {r0, r2}
   176b8:	b	176d0 <argp_error@@Base+0x1d0>
   176bc:	ldr	r3, [r0, #4]
   176c0:	cmp	r3, #0
   176c4:	ldrne	r3, [r1, #8]
   176c8:	addne	r3, r3, #1
   176cc:	strne	r3, [r1, #8]
   176d0:	cmp	r5, #0
   176d4:	popeq	{r4, r5, r6, pc}
   176d8:	ldr	r0, [r5]
   176dc:	cmp	r0, #0
   176e0:	popeq	{r4, r5, r6, pc}
   176e4:	mov	r4, r1
   176e8:	mov	r1, r4
   176ec:	bl	17644 <argp_error@@Base+0x144>
   176f0:	ldr	r3, [r4, #12]
   176f4:	ldr	r0, [r5, #16]!
   176f8:	add	r3, r3, #1
   176fc:	cmp	r0, #0
   17700:	str	r3, [r4, #12]
   17704:	bne	176e8 <argp_error@@Base+0x1e8>
   17708:	pop	{r4, r5, r6, pc}
   1770c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17710:	sub	sp, sp, #36	; 0x24
   17714:	ldr	sl, [r0]
   17718:	str	r0, [sp, #12]
   1771c:	cmp	sl, #0
   17720:	str	r1, [sp, #16]
   17724:	str	r2, [sp, #20]
   17728:	mov	r9, r3
   1772c:	ldr	r8, [r0, #16]
   17730:	ldr	r7, [sp, #72]	; 0x48
   17734:	beq	17900 <argp_error@@Base+0x400>
   17738:	add	fp, sl, #24
   1773c:	str	r8, [sp, #28]
   17740:	str	r3, [sp, #24]
   17744:	ldr	r4, [fp, #-20]	; 0xffffffec
   17748:	sub	r1, fp, #24
   1774c:	cmp	r4, #0
   17750:	bne	17760 <argp_error@@Base+0x260>
   17754:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17758:	cmp	r3, #0
   1775c:	beq	178d4 <argp_error@@Base+0x3d4>
   17760:	ldr	r3, [fp, #-12]
   17764:	tst	r3, #4
   17768:	moveq	sl, r1
   1776c:	moveq	r5, r3
   17770:	ldrne	r5, [sl, #12]
   17774:	ands	r5, r5, #8
   17778:	bne	178bc <argp_error@@Base+0x3bc>
   1777c:	tst	r3, #8
   17780:	bne	177fc <argp_error@@Base+0x2fc>
   17784:	sub	r3, r4, #1
   17788:	cmp	r3, #254	; 0xfe
   1778c:	bhi	177fc <argp_error@@Base+0x2fc>
   17790:	bl	112d4 <__ctype_b_loc@plt>
   17794:	lsl	r3, r4, #1
   17798:	ldr	r1, [r0]
   1779c:	ldrh	r3, [r1, r3]
   177a0:	tst	r3, #16384	; 0x4000
   177a4:	beq	177fc <argp_error@@Base+0x2fc>
   177a8:	ldr	r3, [r7, #4]
   177ac:	add	r1, r3, #1
   177b0:	str	r1, [r7, #4]
   177b4:	strb	r4, [r3]
   177b8:	ldr	r3, [sl, #8]
   177bc:	cmp	r3, #0
   177c0:	beq	177f0 <argp_error@@Base+0x2f0>
   177c4:	ldr	r3, [r7, #4]
   177c8:	mov	r2, #58	; 0x3a
   177cc:	add	r1, r3, #1
   177d0:	str	r1, [r7, #4]
   177d4:	strb	r2, [r3]
   177d8:	ldr	r3, [sl, #12]
   177dc:	tst	r3, #1
   177e0:	ldrne	r3, [r7, #4]
   177e4:	addne	r1, r3, #1
   177e8:	strne	r1, [r7, #4]
   177ec:	strbne	r2, [r3]
   177f0:	ldr	r3, [r7, #4]
   177f4:	mov	r2, #0
   177f8:	strb	r2, [r3]
   177fc:	ldr	r4, [fp, #-24]	; 0xffffffe8
   17800:	cmp	r4, #0
   17804:	beq	178bc <argp_error@@Base+0x3bc>
   17808:	ldr	r8, [r7]
   1780c:	ldr	r6, [r8, #8]
   17810:	ldr	r0, [r6]
   17814:	cmp	r0, #0
   17818:	beq	1783c <argp_error@@Base+0x33c>
   1781c:	mov	r9, r6
   17820:	mov	r1, r4
   17824:	bl	11124 <strcmp@plt>
   17828:	cmp	r0, #0
   1782c:	beq	178c4 <argp_error@@Base+0x3c4>
   17830:	ldr	r0, [r9, #16]!
   17834:	cmp	r0, #0
   17838:	bne	17820 <argp_error@@Base+0x320>
   1783c:	ldr	r3, [sl, #8]
   17840:	ldr	r1, [r7, #8]
   17844:	cmp	r3, #0
   17848:	str	r4, [r1]
   1784c:	beq	17860 <argp_error@@Base+0x360>
   17850:	ldr	r3, [sl, #12]
   17854:	tst	r3, #1
   17858:	moveq	r5, #1
   1785c:	movne	r5, #2
   17860:	str	r5, [r1, #4]
   17864:	ldr	ip, [fp, #-20]	; 0xffffffec
   17868:	mov	r3, #0
   1786c:	cmp	ip, r3
   17870:	str	r3, [r1, #8]
   17874:	ldr	r2, [sp, #24]
   17878:	ldr	r3, [r8, #48]	; 0x30
   1787c:	ldreq	ip, [sl, #4]
   17880:	sub	r3, r2, r3
   17884:	bic	ip, ip, #-16777216	; 0xff000000
   17888:	asr	r3, r3, #2
   1788c:	add	lr, r1, #16
   17890:	rsb	r0, r3, r3, lsl #3
   17894:	add	r0, r0, r0, lsl #6
   17898:	add	r0, r3, r0, lsl #3
   1789c:	rsb	r0, r0, r0, lsl #15
   178a0:	add	r3, r3, r0, lsl #3
   178a4:	add	r3, r3, #1
   178a8:	add	r3, ip, r3, lsl #24
   178ac:	str	r3, [r1, #12]
   178b0:	mov	r3, #0
   178b4:	str	lr, [r7, #8]
   178b8:	str	r3, [r1, #16]
   178bc:	add	fp, fp, #24
   178c0:	b	17744 <argp_error@@Base+0x244>
   178c4:	sub	r6, r9, r6
   178c8:	cmn	r6, #15
   178cc:	bge	178bc <argp_error@@Base+0x3bc>
   178d0:	b	1783c <argp_error@@Base+0x33c>
   178d4:	ldr	r3, [fp, #-8]
   178d8:	cmp	r3, #0
   178dc:	bne	17760 <argp_error@@Base+0x260>
   178e0:	ldr	r3, [fp, #-4]
   178e4:	cmp	r3, #0
   178e8:	bne	17760 <argp_error@@Base+0x260>
   178ec:	ldr	r3, [sp, #12]
   178f0:	ldr	r8, [sp, #28]
   178f4:	ldr	r9, [sp, #24]
   178f8:	ldr	r3, [r3, #4]
   178fc:	b	17918 <argp_error@@Base+0x418>
   17900:	ldr	r3, [sp, #12]
   17904:	ldr	r3, [r3, #4]
   17908:	cmp	r3, #0
   1790c:	moveq	r0, r9
   17910:	moveq	r9, r3
   17914:	beq	17988 <argp_error@@Base+0x488>
   17918:	ldr	r2, [r7, #4]
   1791c:	ldr	r1, [sp, #12]
   17920:	str	r3, [r9]
   17924:	cmp	r8, #0
   17928:	stmib	r9, {r1, r2}
   1792c:	ldr	r2, [sp, #16]
   17930:	mov	r3, #0
   17934:	str	r2, [r9, #16]
   17938:	ldr	r2, [sp, #20]
   1793c:	str	r3, [r9, #12]
   17940:	str	r2, [r9, #20]
   17944:	str	r3, [r9, #24]
   17948:	str	r3, [r9, #32]
   1794c:	str	r3, [r9, #28]
   17950:	beq	17984 <argp_error@@Base+0x484>
   17954:	ldr	r2, [r8]
   17958:	cmp	r2, r3
   1795c:	beq	179d0 <argp_error@@Base+0x4d0>
   17960:	add	r3, r3, #1
   17964:	ldr	r2, [r8, r3, lsl #4]
   17968:	cmp	r2, #0
   1796c:	bne	17960 <argp_error@@Base+0x460>
   17970:	lsl	r3, r3, #2
   17974:	ldr	r2, [r7, #12]
   17978:	add	r3, r2, r3
   1797c:	str	r2, [r9, #28]
   17980:	str	r3, [r7, #12]
   17984:	add	r0, r9, #36	; 0x24
   17988:	cmp	r8, #0
   1798c:	beq	179c8 <argp_error@@Base+0x4c8>
   17990:	ldr	r1, [r8]
   17994:	cmp	r1, #0
   17998:	beq	179c8 <argp_error@@Base+0x4c8>
   1799c:	mov	r2, #0
   179a0:	add	r4, r2, #1
   179a4:	mov	r3, r0
   179a8:	str	r7, [sp]
   179ac:	mov	r0, r1
   179b0:	mov	r1, r9
   179b4:	bl	1770c <argp_error@@Base+0x20c>
   179b8:	ldr	r1, [r8, r4, lsl #4]
   179bc:	mov	r2, r4
   179c0:	cmp	r1, #0
   179c4:	bne	179a0 <argp_error@@Base+0x4a0>
   179c8:	add	sp, sp, #36	; 0x24
   179cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d0:	mov	r3, r2
   179d4:	b	17974 <argp_error@@Base+0x474>
   179d8:	cmp	r0, #86	; 0x56
   179dc:	beq	179e8 <argp_error@@Base+0x4e8>
   179e0:	mov	r0, #7
   179e4:	bx	lr
   179e8:	ldr	r3, [pc, #104]	; 17a58 <argp_error@@Base+0x558>
   179ec:	push	{r4, lr}
   179f0:	mov	r4, r2
   179f4:	ldr	r3, [r3]
   179f8:	cmp	r3, #0
   179fc:	beq	17a20 <argp_error@@Base+0x520>
   17a00:	mov	r1, r2
   17a04:	ldr	r0, [r2, #48]	; 0x30
   17a08:	blx	r3
   17a0c:	ldr	r0, [r4, #16]
   17a10:	ands	r0, r0, #32
   17a14:	beq	17a54 <argp_error@@Base+0x554>
   17a18:	mov	r0, #0
   17a1c:	pop	{r4, pc}
   17a20:	ldr	r3, [pc, #52]	; 17a5c <argp_error@@Base+0x55c>
   17a24:	ldr	r2, [r3]
   17a28:	cmp	r2, #0
   17a2c:	beq	17a40 <argp_error@@Base+0x540>
   17a30:	ldr	r1, [pc, #40]	; 17a60 <argp_error@@Base+0x560>
   17a34:	ldr	r0, [r4, #48]	; 0x30
   17a38:	bl	1131c <fprintf@plt>
   17a3c:	b	17a0c <argp_error@@Base+0x50c>
   17a40:	ldr	r2, [pc, #28]	; 17a64 <argp_error@@Base+0x564>
   17a44:	ldr	r1, [pc, #28]	; 17a68 <argp_error@@Base+0x568>
   17a48:	mov	r0, r4
   17a4c:	bl	17500 <argp_error@@Base>
   17a50:	b	17a0c <argp_error@@Base+0x50c>
   17a54:	bl	112ec <exit@plt>
   17a58:	andeq	sp, r2, ip, lsl #13
   17a5c:	andeq	sp, r2, r0, ror #13
   17a60:	andeq	ip, r1, r8, ror #8
   17a64:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   17a68:	strheq	fp, [r1], -r0
   17a6c:	cmn	r0, #3
   17a70:	push	{r4, r5, lr}
   17a74:	mov	r4, r2
   17a78:	sub	sp, sp, #12
   17a7c:	beq	17b60 <argp_error@@Base+0x660>
   17a80:	ble	17af0 <argp_error@@Base+0x5f0>
   17a84:	cmn	r0, #2
   17a88:	beq	17ab0 <argp_error@@Base+0x5b0>
   17a8c:	cmp	r0, #63	; 0x3f
   17a90:	bne	17b54 <argp_error@@Base+0x654>
   17a94:	mov	r0, r4
   17a98:	ldr	r2, [pc, #236]	; 17b8c <argp_error@@Base+0x68c>
   17a9c:	ldr	r1, [r4, #48]	; 0x30
   17aa0:	bl	17450 <argp_state_help@@Base>
   17aa4:	mov	r0, #0
   17aa8:	add	sp, sp, #12
   17aac:	pop	{r4, r5, pc}
   17ab0:	ldr	r3, [pc, #216]	; 17b90 <argp_error@@Base+0x690>
   17ab4:	mov	r0, r1
   17ab8:	str	r1, [sp, #4]
   17abc:	str	r1, [r3]
   17ac0:	bl	18990 <argp_parse@@Base+0xdec>
   17ac4:	ldr	r3, [r4, #16]
   17ac8:	ldr	r2, [pc, #196]	; 17b94 <argp_error@@Base+0x694>
   17acc:	and	r3, r3, #3
   17ad0:	cmp	r3, #1
   17ad4:	ldr	r1, [sp, #4]
   17ad8:	str	r0, [r4, #40]	; 0x28
   17adc:	str	r0, [r2]
   17ae0:	beq	17b7c <argp_error@@Base+0x67c>
   17ae4:	mov	r0, #0
   17ae8:	add	sp, sp, #12
   17aec:	pop	{r4, r5, pc}
   17af0:	cmn	r0, #4
   17af4:	bne	17b54 <argp_error@@Base+0x654>
   17af8:	cmp	r1, #0
   17afc:	ldr	r0, [pc, #148]	; 17b98 <argp_error@@Base+0x698>
   17b00:	mov	r2, #10
   17b04:	movne	r0, r1
   17b08:	mov	r1, #0
   17b0c:	bl	11130 <strtol@plt>
   17b10:	ldr	r4, [pc, #132]	; 17b9c <argp_error@@Base+0x69c>
   17b14:	str	r0, [r4]
   17b18:	ldr	r3, [r4]
   17b1c:	cmp	r3, #0
   17b20:	sub	r3, r3, #1
   17b24:	str	r3, [r4]
   17b28:	ble	17ae4 <argp_error@@Base+0x5e4>
   17b2c:	mov	r5, #1
   17b30:	mov	r0, r5
   17b34:	bl	111fc <sleep@plt>
   17b38:	ldr	r3, [r4]
   17b3c:	cmp	r3, #0
   17b40:	sub	r3, r3, #1
   17b44:	str	r3, [r4]
   17b48:	bgt	17b30 <argp_error@@Base+0x630>
   17b4c:	mov	r0, #0
   17b50:	b	17ae8 <argp_error@@Base+0x5e8>
   17b54:	mov	r0, #7
   17b58:	add	sp, sp, #12
   17b5c:	pop	{r4, r5, pc}
   17b60:	mov	r0, r4
   17b64:	ldr	r2, [pc, #52]	; 17ba0 <argp_error@@Base+0x6a0>
   17b68:	ldr	r1, [r4, #48]	; 0x30
   17b6c:	bl	17450 <argp_state_help@@Base>
   17b70:	mov	r0, #0
   17b74:	add	sp, sp, #12
   17b78:	pop	{r4, r5, pc}
   17b7c:	ldr	r3, [r4, #8]
   17b80:	mov	r0, #0
   17b84:	str	r1, [r3]
   17b88:	b	17aa8 <argp_error@@Base+0x5a8>
   17b8c:	andeq	r0, r0, sl, ror r2
   17b90:	andeq	sp, r2, r4, lsr #12
   17b94:	andeq	sp, r2, r0, lsr #12
   17b98:	andeq	ip, r1, r0, lsl #6
   17b9c:	andeq	sp, r2, r8, lsl #13
   17ba0:	andeq	r0, r0, r1, lsl #4

00017ba4 <argp_parse@@Base>:
   17ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba8:	add	fp, sp, #32
   17bac:	tst	r3, #1
   17bb0:	sub	sp, sp, #228	; 0xe4
   17bb4:	mov	r6, r3
   17bb8:	mov	r7, r0
   17bbc:	str	r1, [fp, #-240]	; 0xffffff10
   17bc0:	str	r2, [fp, #-232]	; 0xffffff18
   17bc4:	bne	17bf0 <argp_parse@@Base+0x4c>
   17bc8:	ldr	r3, [pc, #3260]	; 1888c <argp_parse@@Base+0xce8>
   17bcc:	ldr	r4, [pc, #3260]	; 18890 <argp_parse@@Base+0xcec>
   17bd0:	ldr	r2, [r3]
   17bd4:	cmp	r2, #0
   17bd8:	ldreq	r2, [fp, #-232]	; 0xffffff18
   17bdc:	ldreq	r2, [r2]
   17be0:	streq	r2, [r3]
   17be4:	ldr	r3, [r4]
   17be8:	cmp	r3, #0
   17bec:	beq	18290 <argp_parse@@Base+0x6ec>
   17bf0:	ands	r3, r6, #16
   17bf4:	beq	18198 <argp_parse@@Base+0x5f4>
   17bf8:	sub	r4, fp, #196	; 0xc4
   17bfc:	mov	r0, r4
   17c00:	mov	r2, #36	; 0x24
   17c04:	mov	r1, #0
   17c08:	bl	11358 <memset@plt>
   17c0c:	ands	r3, r6, #4
   17c10:	str	r3, [fp, #-244]	; 0xffffff0c
   17c14:	mov	r3, #0
   17c18:	moveq	r0, #1
   17c1c:	movne	r0, #0
   17c20:	cmp	r7, r3
   17c24:	str	r3, [fp, #-224]	; 0xffffff20
   17c28:	str	r3, [fp, #-220]	; 0xffffff24
   17c2c:	str	r3, [fp, #-216]	; 0xffffff28
   17c30:	str	r0, [fp, #-228]	; 0xffffff1c
   17c34:	beq	1809c <argp_parse@@Base+0x4f8>
   17c38:	mov	r0, r7
   17c3c:	sub	r1, fp, #228	; 0xe4
   17c40:	bl	17644 <argp_error@@Base+0x144>
   17c44:	ldr	r5, [fp, #-220]	; 0xffffff24
   17c48:	ldr	r9, [fp, #-216]	; 0xffffff28
   17c4c:	add	r5, r5, #1
   17c50:	ldr	r3, [fp, #-224]	; 0xffffff20
   17c54:	add	r5, r5, r5, lsl #3
   17c58:	lsl	r2, r9, #2
   17c5c:	lsl	r5, r5, #2
   17c60:	add	r3, r3, #1
   17c64:	add	sl, r2, r5
   17c68:	ldr	r0, [fp, #-228]	; 0xffffff1c
   17c6c:	add	r9, sl, r3, lsl #4
   17c70:	str	r2, [fp, #-236]	; 0xffffff14
   17c74:	add	r0, r9, r0
   17c78:	add	r0, r0, #1
   17c7c:	bl	195a8 <argp_parse@@Base+0x1a04>
   17c80:	cmp	r0, #0
   17c84:	mov	r8, r0
   17c88:	str	r0, [fp, #-40]	; 0xffffffd8
   17c8c:	moveq	r5, #12
   17c90:	beq	18090 <argp_parse@@Base+0x4ec>
   17c94:	mov	r3, #1
   17c98:	str	r3, [fp, #-196]	; 0xffffff3c
   17c9c:	str	r3, [fp, #-192]	; 0xffffff40
   17ca0:	ldm	r4!, {r0, r1, r2, r3}
   17ca4:	sub	ip, fp, #148	; 0x94
   17ca8:	add	r5, r8, r5
   17cac:	str	r5, [fp, #-104]	; 0xffffff98
   17cb0:	stmia	ip!, {r0, r1, r2, r3}
   17cb4:	add	r3, r8, sl
   17cb8:	mov	lr, r3
   17cbc:	ldm	r4!, {r0, r1, r2, r3}
   17cc0:	add	sl, r8, r9
   17cc4:	str	lr, [fp, #-248]	; 0xffffff08
   17cc8:	str	lr, [fp, #-152]	; 0xffffff68
   17ccc:	ldr	lr, [r4]
   17cd0:	stmia	ip!, {r0, r1, r2, r3}
   17cd4:	mov	r0, r5
   17cd8:	ldr	r2, [fp, #-236]	; 0xffffff14
   17cdc:	mov	r1, #0
   17ce0:	str	lr, [ip]
   17ce4:	str	r8, [fp, #-112]	; 0xffffff90
   17ce8:	str	sl, [fp, #-156]	; 0xffffff64
   17cec:	bl	11358 <memset@plt>
   17cf0:	ldr	lr, [fp, #-248]	; 0xffffff08
   17cf4:	sub	r4, fp, #160	; 0xa0
   17cf8:	tst	r6, #8
   17cfc:	str	lr, [fp, #-204]	; 0xffffff34
   17d00:	str	sl, [fp, #-208]	; 0xffffff30
   17d04:	str	r5, [fp, #-200]	; 0xffffff38
   17d08:	str	r4, [fp, #-212]	; 0xffffff2c
   17d0c:	bne	180b0 <argp_parse@@Base+0x50c>
   17d10:	ldr	r3, [fp, #-244]	; 0xffffff0c
   17d14:	cmp	r3, #0
   17d18:	addne	r3, sl, #1
   17d1c:	movne	r2, #43	; 0x2b
   17d20:	strbne	r2, [sl]
   17d24:	movne	sl, r3
   17d28:	strne	r3, [fp, #-208]	; 0xffffff30
   17d2c:	mov	r2, #0
   17d30:	strb	r2, [sl]
   17d34:	ldr	r3, [fp, #-204]	; 0xffffff34
   17d38:	cmp	r7, r2
   17d3c:	str	r2, [r3]
   17d40:	str	r7, [fp, #-160]	; 0xffffff60
   17d44:	beq	18258 <argp_parse@@Base+0x6b4>
   17d48:	sub	r1, fp, #212	; 0xd4
   17d4c:	mov	r0, r7
   17d50:	str	r1, [sp]
   17d54:	ldr	r3, [fp, #-112]	; 0xffffff90
   17d58:	mov	r1, r2
   17d5c:	bl	1770c <argp_error@@Base+0x20c>
   17d60:	ldr	r7, [fp, #-160]	; 0xffffff60
   17d64:	ldr	r5, [fp, #-112]	; 0xffffff90
   17d68:	mov	r8, r0
   17d6c:	str	r0, [fp, #-108]	; 0xffffff94
   17d70:	mov	r2, #56	; 0x38
   17d74:	mov	r1, #0
   17d78:	sub	r0, fp, #96	; 0x60
   17d7c:	bl	11358 <memset@plt>
   17d80:	ldr	r2, [pc, #2828]	; 18894 <argp_parse@@Base+0xcf0>
   17d84:	ldr	r3, [pc, #2828]	; 18898 <argp_parse@@Base+0xcf4>
   17d88:	ldr	r0, [fp, #-240]	; 0xffffff10
   17d8c:	ldr	r1, [r2]
   17d90:	str	r0, [fp, #-92]	; 0xffffffa4
   17d94:	ldr	r2, [r3]
   17d98:	ldr	r0, [fp, #-232]	; 0xffffff18
   17d9c:	mov	r3, #1
   17da0:	cmp	r5, r8
   17da4:	str	r7, [fp, #-96]	; 0xffffffa0
   17da8:	str	r0, [fp, #-88]	; 0xffffffa8
   17dac:	str	r6, [fp, #-80]	; 0xffffffb0
   17db0:	str	r4, [fp, #-44]	; 0xffffffd4
   17db4:	str	r1, [fp, #-52]	; 0xffffffcc
   17db8:	str	r2, [fp, #-48]	; 0xffffffd0
   17dbc:	str	r3, [fp, #-100]	; 0xffffff9c
   17dc0:	bcc	180c4 <argp_parse@@Base+0x520>
   17dc4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17dc8:	tst	r3, #2
   17dcc:	bne	18268 <argp_parse@@Base+0x6c4>
   17dd0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17dd4:	ldr	r4, [fp, #-92]	; 0xffffffa4
   17dd8:	mov	r2, #1
   17ddc:	str	r2, [fp, #-144]	; 0xffffff70
   17de0:	ldr	r2, [fp, #-232]	; 0xffffff18
   17de4:	cmp	r2, r3
   17de8:	beq	18768 <argp_parse@@Base+0xbc4>
   17dec:	ldr	r3, [pc, #2716]	; 18890 <argp_parse@@Base+0xcec>
   17df0:	ldr	r3, [r3]
   17df4:	str	r3, [fp, #-56]	; 0xffffffc8
   17df8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17dfc:	ldr	r5, [fp, #-84]	; 0xffffffac
   17e00:	ldr	sl, [pc, #2708]	; 1889c <argp_parse@@Base+0xcf8>
   17e04:	mov	r0, r4
   17e08:	mov	r6, #0
   17e0c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   17e10:	cmp	r3, #0
   17e14:	beq	182a4 <argp_parse@@Base+0x700>
   17e18:	cmp	r3, r5
   17e1c:	strgt	r6, [fp, #-72]	; 0xffffffb8
   17e20:	bgt	182a4 <argp_parse@@Base+0x700>
   17e24:	cmp	r5, r0
   17e28:	blt	18640 <argp_parse@@Base+0xa9c>
   17e2c:	cmp	r5, r0
   17e30:	bne	1864c <argp_parse@@Base+0xaa8>
   17e34:	ldr	r3, [fp, #-112]	; 0xffffff90
   17e38:	ldr	ip, [fp, #-108]	; 0xffffff94
   17e3c:	cmp	r3, ip
   17e40:	bcs	18830 <argp_parse@@Base+0xc8c>
   17e44:	mov	r5, #0
   17e48:	add	r4, r3, #36	; 0x24
   17e4c:	mov	r7, r5
   17e50:	ldr	r6, [pc, #2632]	; 188a0 <argp_parse@@Base+0xcfc>
   17e54:	mov	r0, r5
   17e58:	b	17ea0 <argp_parse@@Base+0x2fc>
   17e5c:	ldr	ip, [r4, #-4]
   17e60:	str	ip, [fp, #-60]	; 0xffffffc4
   17e64:	ldr	ip, [r4, #-12]
   17e68:	str	ip, [fp, #-68]	; 0xffffffbc
   17e6c:	ldr	ip, [r4, #-8]
   17e70:	str	r3, [fp, #-76]	; 0xffffffb4
   17e74:	str	ip, [fp, #-64]	; 0xffffffc0
   17e78:	blx	r5
   17e7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17e80:	str	r3, [r4, #-4]
   17e84:	ldr	ip, [fp, #-108]	; 0xffffff94
   17e88:	cmp	ip, r4
   17e8c:	bls	187d8 <argp_parse@@Base+0xc34>
   17e90:	cmp	r0, #7
   17e94:	cmpne	r0, #0
   17e98:	bne	187b4 <argp_parse@@Base+0xc10>
   17e9c:	add	r4, r4, #36	; 0x24
   17ea0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   17ea4:	cmp	r3, #0
   17ea8:	bne	17e88 <argp_parse@@Base+0x2e4>
   17eac:	ldr	r5, [r4, #-36]	; 0xffffffdc
   17eb0:	sub	r2, fp, #96	; 0x60
   17eb4:	cmp	r5, #0
   17eb8:	mov	r1, r7
   17ebc:	mov	r0, r6
   17ec0:	bne	17e5c <argp_parse@@Base+0x2b8>
   17ec4:	cmp	ip, r4
   17ec8:	mov	r0, #7
   17ecc:	bhi	17e9c <argp_parse@@Base+0x2f8>
   17ed0:	ldr	r3, [fp, #-112]	; 0xffffff90
   17ed4:	sub	r4, ip, #36	; 0x24
   17ed8:	cmp	r4, r3
   17edc:	movcs	r5, #7
   17ee0:	bcc	17f68 <argp_parse@@Base+0x3c4>
   17ee4:	cmp	r5, #7
   17ee8:	cmpne	r5, #0
   17eec:	bne	187c8 <argp_parse@@Base+0xc24>
   17ef0:	sub	r4, r4, #36	; 0x24
   17ef4:	mov	r7, #0
   17ef8:	ldr	r6, [pc, #2468]	; 188a4 <argp_parse@@Base+0xd00>
   17efc:	b	17f48 <argp_parse@@Base+0x3a4>
   17f00:	ldr	r3, [r4, #68]	; 0x44
   17f04:	ldr	ip, [r4, #48]	; 0x30
   17f08:	str	r3, [fp, #-60]	; 0xffffffc4
   17f0c:	ldr	r3, [r4, #60]	; 0x3c
   17f10:	str	r3, [fp, #-68]	; 0xffffffbc
   17f14:	ldr	r3, [r4, #64]	; 0x40
   17f18:	str	ip, [fp, #-76]	; 0xffffffb4
   17f1c:	str	r3, [fp, #-64]	; 0xffffffc0
   17f20:	blx	r5
   17f24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17f28:	str	r3, [r4, #68]	; 0x44
   17f2c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17f30:	cmp	r4, r3
   17f34:	bcc	18828 <argp_parse@@Base+0xc84>
   17f38:	cmp	r0, #7
   17f3c:	cmpne	r0, #0
   17f40:	bne	18798 <argp_parse@@Base+0xbf4>
   17f44:	sub	r4, r4, #36	; 0x24
   17f48:	ldr	r5, [r4, #36]	; 0x24
   17f4c:	sub	r2, fp, #96	; 0x60
   17f50:	cmp	r5, #0
   17f54:	mov	r1, r7
   17f58:	mov	r0, r6
   17f5c:	bne	17f00 <argp_parse@@Base+0x35c>
   17f60:	cmp	r4, r3
   17f64:	bcs	17f44 <argp_parse@@Base+0x3a0>
   17f68:	ldr	r2, [fp, #4]
   17f6c:	cmp	r2, #0
   17f70:	beq	17f8c <argp_parse@@Base+0x3e8>
   17f74:	mov	r5, #0
   17f78:	ldr	r1, [fp, #4]
   17f7c:	ldr	r2, [fp, #-84]	; 0xffffffac
   17f80:	str	r2, [r1]
   17f84:	cmp	r5, #0
   17f88:	bne	187a8 <argp_parse@@Base+0xc04>
   17f8c:	ldr	ip, [fp, #-108]	; 0xffffff94
   17f90:	b	18664 <argp_parse@@Base+0xac0>
   17f94:	ldr	r3, [fp, #-112]	; 0xffffff90
   17f98:	mov	r5, r0
   17f9c:	ldr	ip, [fp, #-108]	; 0xffffff94
   17fa0:	cmp	ip, r3
   17fa4:	bls	18760 <argp_parse@@Base+0xbbc>
   17fa8:	ldr	r7, [pc, #2296]	; 188a8 <argp_parse@@Base+0xd04>
   17fac:	add	r4, r3, #36	; 0x24
   17fb0:	mov	r8, #0
   17fb4:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17fb8:	sub	r2, fp, #96	; 0x60
   17fbc:	cmp	r3, #0
   17fc0:	mov	r1, r8
   17fc4:	mov	r0, r7
   17fc8:	mov	r6, r4
   17fcc:	beq	18000 <argp_parse@@Base+0x45c>
   17fd0:	ldr	ip, [r4, #-4]
   17fd4:	ldr	lr, [r4, #-24]	; 0xffffffe8
   17fd8:	str	ip, [fp, #-60]	; 0xffffffc4
   17fdc:	ldr	ip, [r4, #-12]
   17fe0:	str	ip, [fp, #-68]	; 0xffffffbc
   17fe4:	ldr	ip, [r4, #-8]
   17fe8:	str	lr, [fp, #-76]	; 0xffffffb4
   17fec:	str	ip, [fp, #-64]	; 0xffffffc0
   17ff0:	blx	r3
   17ff4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17ff8:	str	r3, [r4, #-4]
   17ffc:	ldr	ip, [fp, #-108]	; 0xffffff94
   18000:	cmp	ip, r6
   18004:	add	r4, r4, #36	; 0x24
   18008:	bhi	17fb4 <argp_parse@@Base+0x410>
   1800c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18010:	sub	ip, ip, #36	; 0x24
   18014:	cmp	r3, ip
   18018:	bhi	18080 <argp_parse@@Base+0x4dc>
   1801c:	ldr	r8, [pc, #2184]	; 188ac <argp_parse@@Base+0xd08>
   18020:	sub	r4, ip, #36	; 0x24
   18024:	mov	r9, #0
   18028:	ldr	r6, [r4, #36]	; 0x24
   1802c:	sub	r2, fp, #96	; 0x60
   18030:	cmp	r6, #0
   18034:	mov	r1, r9
   18038:	mov	r0, r8
   1803c:	mov	r7, r4
   18040:	beq	18074 <argp_parse@@Base+0x4d0>
   18044:	ldr	r3, [r4, #68]	; 0x44
   18048:	ldr	ip, [r4, #48]	; 0x30
   1804c:	str	r3, [fp, #-60]	; 0xffffffc4
   18050:	ldr	r3, [r4, #60]	; 0x3c
   18054:	str	r3, [fp, #-68]	; 0xffffffbc
   18058:	ldr	r3, [r4, #64]	; 0x40
   1805c:	str	ip, [fp, #-76]	; 0xffffffb4
   18060:	str	r3, [fp, #-64]	; 0xffffffc0
   18064:	blx	r6
   18068:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1806c:	str	r3, [r4, #68]	; 0x44
   18070:	ldr	r3, [fp, #-112]	; 0xffffff90
   18074:	cmp	r3, r7
   18078:	sub	r4, r4, #36	; 0x24
   1807c:	bls	18028 <argp_parse@@Base+0x484>
   18080:	cmp	r5, #7
   18084:	moveq	r5, #22
   18088:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1808c:	bl	18a3c <argp_parse@@Base+0xe98>
   18090:	mov	r0, r5
   18094:	sub	sp, fp, #32
   18098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1809c:	mov	sl, #36	; 0x24
   180a0:	mov	r5, sl
   180a4:	mov	r9, #52	; 0x34
   180a8:	str	r7, [fp, #-236]	; 0xffffff14
   180ac:	b	17c74 <argp_parse@@Base+0xd0>
   180b0:	add	sl, sl, #1
   180b4:	mov	r3, #45	; 0x2d
   180b8:	str	sl, [fp, #-208]	; 0xffffff30
   180bc:	strb	r3, [r8, r9]
   180c0:	b	17d2c <argp_parse@@Base+0x188>
   180c4:	ldr	r3, [fp, #8]
   180c8:	add	r4, r5, #36	; 0x24
   180cc:	str	r3, [r5, #24]
   180d0:	mov	r7, #0
   180d4:	ldr	r6, [pc, #2004]	; 188b0 <argp_parse@@Base+0xd0c>
   180d8:	b	18130 <argp_parse@@Base+0x58c>
   180dc:	ldr	r2, [r4, #-4]
   180e0:	ldr	r0, [r4, #-24]	; 0xffffffe8
   180e4:	str	r2, [fp, #-60]	; 0xffffffc4
   180e8:	ldr	r1, [r4, #-12]
   180ec:	sub	r2, fp, #96	; 0x60
   180f0:	str	r1, [fp, #-68]	; 0xffffffbc
   180f4:	ldr	ip, [r4, #-8]
   180f8:	mov	r1, r7
   180fc:	str	r0, [fp, #-76]	; 0xffffffb4
   18100:	str	ip, [fp, #-64]	; 0xffffffc0
   18104:	mov	r0, r6
   18108:	blx	r3
   1810c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18110:	str	r3, [r4, #-4]
   18114:	ldr	r3, [fp, #-108]	; 0xffffff94
   18118:	cmp	r3, r4
   1811c:	bls	1884c <argp_parse@@Base+0xca8>
   18120:	cmp	r0, #7
   18124:	cmpne	r0, #0
   18128:	bne	18248 <argp_parse@@Base+0x6a4>
   1812c:	add	r4, r4, #36	; 0x24
   18130:	ldr	r3, [r4, #-20]	; 0xffffffec
   18134:	cmp	r3, #0
   18138:	ldrne	r3, [r3, #28]
   1813c:	ldrne	r2, [r4, #-16]
   18140:	ldrne	r3, [r3, r2, lsl #2]
   18144:	strne	r3, [r4, #-12]
   18148:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1814c:	cmp	r3, #0
   18150:	bne	180dc <argp_parse@@Base+0x538>
   18154:	ldr	r3, [r4, #-32]	; 0xffffffe0
   18158:	ldr	r3, [r3, #16]
   1815c:	cmp	r3, #0
   18160:	beq	18188 <argp_parse@@Base+0x5e4>
   18164:	ldr	r3, [r3]
   18168:	cmp	r3, #0
   1816c:	beq	18188 <argp_parse@@Base+0x5e4>
   18170:	ldr	r3, [r4, #-8]
   18174:	ldr	r2, [r4, #-12]
   18178:	str	r2, [r3]
   1817c:	ldr	r3, [r4, #-36]	; 0xffffffdc
   18180:	cmp	r3, #0
   18184:	bne	180dc <argp_parse@@Base+0x538>
   18188:	ldr	r3, [fp, #-108]	; 0xffffff94
   1818c:	cmp	r3, r4
   18190:	bhi	1812c <argp_parse@@Base+0x588>
   18194:	b	17dc4 <argp_parse@@Base+0x220>
   18198:	sub	sp, sp, #72	; 0x48
   1819c:	add	r4, sp, #8
   181a0:	sub	sp, sp, #40	; 0x28
   181a4:	add	r5, sp, #8
   181a8:	mov	r1, r3
   181ac:	mov	r0, r4
   181b0:	mov	r2, #64	; 0x40
   181b4:	str	r3, [r5]
   181b8:	str	r3, [r5, #4]
   181bc:	str	r3, [r5, #8]
   181c0:	str	r3, [r5, #12]
   181c4:	str	r3, [r5, #20]
   181c8:	str	r3, [r5, #24]
   181cc:	str	r4, [r5, #16]
   181d0:	bl	11358 <memset@plt>
   181d4:	ldr	r3, [pc, #1752]	; 188b4 <argp_parse@@Base+0xd10>
   181d8:	cmp	r7, #0
   181dc:	strne	r7, [r4]
   181e0:	ldr	r3, [r3]
   181e4:	addne	r4, r4, #16
   181e8:	ldr	r2, [pc, #1736]	; 188b8 <argp_parse@@Base+0xd14>
   181ec:	cmp	r3, #0
   181f0:	str	r2, [r4]
   181f4:	beq	18780 <argp_parse@@Base+0xbdc>
   181f8:	ldr	r2, [pc, #1724]	; 188bc <argp_parse@@Base+0xd18>
   181fc:	add	r3, r4, #32
   18200:	str	r2, [r4, #16]
   18204:	mov	r8, #0
   18208:	sub	r4, fp, #196	; 0xc4
   1820c:	str	r8, [r3]
   18210:	mov	r1, r8
   18214:	mov	r0, r4
   18218:	mov	r2, #36	; 0x24
   1821c:	bl	11358 <memset@plt>
   18220:	ands	r3, r6, #4
   18224:	str	r3, [fp, #-244]	; 0xffffff0c
   18228:	moveq	r3, #1
   1822c:	movne	r3, r8
   18230:	mov	r7, r5
   18234:	str	r8, [fp, #-224]	; 0xffffff20
   18238:	str	r8, [fp, #-220]	; 0xffffff24
   1823c:	str	r8, [fp, #-216]	; 0xffffff28
   18240:	str	r3, [fp, #-228]	; 0xffffff1c
   18244:	b	17c38 <argp_parse@@Base+0x94>
   18248:	mov	r5, r0
   1824c:	mov	r0, r5
   18250:	sub	sp, fp, #32
   18254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18258:	ldr	r5, [fp, #-112]	; 0xffffff90
   1825c:	mov	r8, r5
   18260:	str	r5, [fp, #-108]	; 0xffffff94
   18264:	b	17d70 <argp_parse@@Base+0x1cc>
   18268:	tst	r3, #1
   1826c:	mov	r3, #0
   18270:	str	r3, [fp, #-144]	; 0xffffff70
   18274:	ldr	r4, [fp, #-92]	; 0xffffffa4
   18278:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1827c:	subne	r3, r3, #4
   18280:	addne	r4, r4, #1
   18284:	strne	r3, [fp, #-88]	; 0xffffffa8
   18288:	strne	r4, [fp, #-92]	; 0xffffffa4
   1828c:	b	17de0 <argp_parse@@Base+0x23c>
   18290:	ldr	r3, [fp, #-232]	; 0xffffff18
   18294:	ldr	r0, [r3]
   18298:	bl	18990 <argp_parse@@Base+0xdec>
   1829c:	str	r0, [r4]
   182a0:	b	17bf0 <argp_parse@@Base+0x4c>
   182a4:	cmp	r2, #0
   182a8:	beq	17e24 <argp_parse@@Base+0x280>
   182ac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   182b0:	str	r5, [fp, #-148]	; 0xffffff6c
   182b4:	ands	ip, r3, #64	; 0x40
   182b8:	mvn	r3, #0
   182bc:	str	r3, [fp, #-140]	; 0xffffff74
   182c0:	ldr	r2, [fp, #-156]	; 0xffffff64
   182c4:	ldr	r3, [fp, #-152]	; 0xffffff68
   182c8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   182cc:	beq	185ec <argp_parse@@Base+0xa48>
   182d0:	sub	ip, fp, #148	; 0x94
   182d4:	stm	sp, {r6, ip}
   182d8:	bl	18b10 <argp_parse@@Base+0xf6c>
   182dc:	ldr	r5, [fp, #-148]	; 0xffffff6c
   182e0:	str	r5, [fp, #-84]	; 0xffffffac
   182e4:	mov	r7, r0
   182e8:	cmn	r7, #1
   182ec:	beq	1860c <argp_parse@@Base+0xa68>
   182f0:	cmp	r7, #63	; 0x3f
   182f4:	beq	18710 <argp_parse@@Base+0xb6c>
   182f8:	cmp	r7, #1
   182fc:	beq	18454 <argp_parse@@Base+0x8b0>
   18300:	asrs	r8, r7, #24
   18304:	bne	183b0 <argp_parse@@Base+0x80c>
   18308:	mov	r1, r7
   1830c:	ldr	r0, [fp, #-156]	; 0xffffff64
   18310:	bl	11310 <strchr@plt>
   18314:	cmp	r0, #0
   18318:	beq	18420 <argp_parse@@Base+0x87c>
   1831c:	ldr	r4, [fp, #-112]	; 0xffffff90
   18320:	ldr	r2, [fp, #-108]	; 0xffffff94
   18324:	cmp	r4, r2
   18328:	bcc	1833c <argp_parse@@Base+0x798>
   1832c:	b	18420 <argp_parse@@Base+0x87c>
   18330:	add	r4, r4, #36	; 0x24
   18334:	cmp	r4, r2
   18338:	bcs	18420 <argp_parse@@Base+0x87c>
   1833c:	ldr	r3, [r4, #8]
   18340:	cmp	r0, r3
   18344:	bcs	18330 <argp_parse@@Base+0x78c>
   18348:	ldr	r3, [r4]
   1834c:	cmp	r3, #0
   18350:	beq	18420 <argp_parse@@Base+0x87c>
   18354:	ldr	r2, [r4, #32]
   18358:	ldr	r0, [r4, #28]
   1835c:	ldr	ip, [r4, #24]
   18360:	str	r2, [fp, #-60]	; 0xffffffc4
   18364:	ldr	r2, [r4, #12]
   18368:	ldr	r1, [fp, #-136]	; 0xffffff78
   1836c:	str	r0, [fp, #-64]	; 0xffffffc0
   18370:	str	r2, [fp, #-76]	; 0xffffffb4
   18374:	str	ip, [fp, #-68]	; 0xffffffbc
   18378:	sub	r2, fp, #96	; 0x60
   1837c:	mov	r0, r7
   18380:	blx	r3
   18384:	mov	r8, r6
   18388:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1838c:	str	r3, [r4, #32]
   18390:	cmp	r0, #7
   18394:	beq	18418 <argp_parse@@Base+0x874>
   18398:	cmp	r0, #0
   1839c:	bne	17f94 <argp_parse@@Base+0x3f0>
   183a0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   183a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   183a8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   183ac:	b	17e0c <argp_parse@@Base+0x268>
   183b0:	add	r3, r8, r8, lsl #3
   183b4:	ldr	r2, [fp, #-112]	; 0xffffff90
   183b8:	lsl	r3, r3, #2
   183bc:	sub	r3, r3, #36	; 0x24
   183c0:	add	r4, r2, r3
   183c4:	ldr	r5, [r2, r3]
   183c8:	ands	r3, r7, #8388608	; 0x800000
   183cc:	movne	r3, #-16777216	; 0xff000000
   183d0:	cmp	r5, #0
   183d4:	beq	185a4 <argp_parse@@Base+0xa00>
   183d8:	ldr	r0, [r4, #32]
   183dc:	ldr	r2, [r4, #24]
   183e0:	str	r0, [fp, #-60]	; 0xffffffc4
   183e4:	ldr	r0, [r4, #28]
   183e8:	str	r2, [fp, #-68]	; 0xffffffbc
   183ec:	ldr	r2, [r4, #12]
   183f0:	str	r0, [fp, #-64]	; 0xffffffc0
   183f4:	bic	r0, r7, #-16777216	; 0xff000000
   183f8:	str	r2, [fp, #-76]	; 0xffffffb4
   183fc:	orr	r0, r0, r3
   18400:	ldr	r1, [fp, #-136]	; 0xffffff78
   18404:	sub	r2, fp, #96	; 0x60
   18408:	blx	r5
   1840c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18410:	str	r3, [r4, #32]
   18414:	b	18390 <argp_parse@@Base+0x7ec>
   18418:	cmp	r8, #0
   1841c:	bne	185a4 <argp_parse@@Base+0xa00>
   18420:	mov	r2, r7
   18424:	ldr	r3, [pc, #1172]	; 188c0 <argp_parse@@Base+0xd1c>
   18428:	ldr	r1, [pc, #1172]	; 188c4 <argp_parse@@Base+0xd20>
   1842c:	sub	r0, fp, #96	; 0x60
   18430:	bl	17500 <argp_error@@Base>
   18434:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18438:	mov	r2, #260	; 0x104
   1843c:	sub	r0, fp, #96	; 0x60
   18440:	bl	17450 <argp_state_help@@Base>
   18444:	mov	r5, #7
   18448:	ldr	r3, [fp, #-112]	; 0xffffff90
   1844c:	ldr	ip, [fp, #-108]	; 0xffffff94
   18450:	b	17fa0 <argp_parse@@Base+0x3fc>
   18454:	ldr	r7, [fp, #-136]	; 0xffffff78
   18458:	ldr	r3, [fp, #-112]	; 0xffffff90
   1845c:	ldr	ip, [fp, #-108]	; 0xffffff94
   18460:	sub	r8, r5, #1
   18464:	cmp	r3, ip
   18468:	str	r8, [fp, #-84]	; 0xffffffac
   1846c:	bcs	18598 <argp_parse@@Base+0x9f4>
   18470:	mov	lr, r8
   18474:	add	r4, r3, #36	; 0x24
   18478:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1847c:	add	r5, lr, #1
   18480:	cmp	r3, #0
   18484:	str	r5, [fp, #-84]	; 0xffffffac
   18488:	sub	r2, fp, #96	; 0x60
   1848c:	mov	r1, r7
   18490:	mov	r0, r6
   18494:	sub	r5, r4, #36	; 0x24
   18498:	mov	r9, r4
   1849c:	streq	lr, [fp, #-84]	; 0xffffffac
   184a0:	beq	1858c <argp_parse@@Base+0x9e8>
   184a4:	ldr	ip, [r4, #-4]
   184a8:	ldr	lr, [r4, #-24]	; 0xffffffe8
   184ac:	str	ip, [fp, #-60]	; 0xffffffc4
   184b0:	ldr	ip, [r4, #-12]
   184b4:	str	ip, [fp, #-68]	; 0xffffffbc
   184b8:	ldr	ip, [r4, #-8]
   184bc:	str	lr, [fp, #-76]	; 0xffffffb4
   184c0:	str	ip, [fp, #-64]	; 0xffffffc0
   184c4:	blx	r3
   184c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   184cc:	str	r3, [r4, #-4]
   184d0:	cmp	r0, #7
   184d4:	beq	18510 <argp_parse@@Base+0x96c>
   184d8:	cmp	r0, #0
   184dc:	bne	17f94 <argp_parse@@Base+0x3f0>
   184e0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   184e4:	ldr	r5, [fp, #-84]	; 0xffffffac
   184e8:	cmp	r8, r5
   184ec:	sublt	r8, r5, r8
   184f0:	ldrlt	r3, [r4, #-24]	; 0xffffffe8
   184f4:	movge	r3, #1
   184f8:	addlt	r8, r3, r8
   184fc:	strlt	r8, [r4, #-24]	; 0xffffffe8
   18500:	ldrlt	r2, [fp, #-100]	; 0xffffff9c
   18504:	strge	r3, [fp, #-100]	; 0xffffff9c
   18508:	movge	r2, r3
   1850c:	b	17e0c <argp_parse@@Base+0x268>
   18510:	ldr	lr, [fp, #-84]	; 0xffffffac
   18514:	ldr	r3, [r4, #-36]	; 0xffffffdc
   18518:	sub	lr, lr, #1
   1851c:	cmp	r3, #0
   18520:	str	lr, [fp, #-84]	; 0xffffffac
   18524:	beq	18588 <argp_parse@@Base+0x9e4>
   18528:	add	r0, r5, #24
   1852c:	ldr	r2, [r5, #12]
   18530:	ldm	r0, {r0, r1, ip}
   18534:	str	r2, [fp, #-76]	; 0xffffffb4
   18538:	sub	r2, fp, #96	; 0x60
   1853c:	str	ip, [fp, #-60]	; 0xffffffc4
   18540:	str	r0, [fp, #-68]	; 0xffffffbc
   18544:	str	r1, [fp, #-64]	; 0xffffffc0
   18548:	mov	r0, sl
   1854c:	mov	r1, r6
   18550:	blx	r3
   18554:	ldr	ip, [fp, #-108]	; 0xffffff94
   18558:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1855c:	cmp	r4, ip
   18560:	movcs	r1, #0
   18564:	movcc	r1, #1
   18568:	mov	r3, r4
   1856c:	str	r2, [r5, #32]
   18570:	cmp	r0, #7
   18574:	movne	r1, #0
   18578:	cmp	r1, #0
   1857c:	beq	18864 <argp_parse@@Base+0xcc0>
   18580:	ldr	lr, [fp, #-84]	; 0xffffffac
   18584:	b	18474 <argp_parse@@Base+0x8d0>
   18588:	ldr	ip, [fp, #-108]	; 0xffffff94
   1858c:	cmp	r9, ip
   18590:	add	r4, r4, #36	; 0x24
   18594:	bcc	18478 <argp_parse@@Base+0x8d4>
   18598:	ldr	r5, [fp, #-84]	; 0xffffffac
   1859c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   185a0:	b	17e2c <argp_parse@@Base+0x288>
   185a4:	ldr	r3, [fp, #-152]	; 0xffffff68
   185a8:	ldr	r2, [r3, #12]
   185ac:	cmp	r2, r7
   185b0:	bne	185c8 <argp_parse@@Base+0xa24>
   185b4:	b	186fc <argp_parse@@Base+0xb58>
   185b8:	add	r3, r3, #16
   185bc:	ldr	r2, [r3, #12]
   185c0:	cmp	r2, r7
   185c4:	beq	186fc <argp_parse@@Base+0xb58>
   185c8:	ldr	r2, [r3]
   185cc:	cmp	r2, #0
   185d0:	bne	185b8 <argp_parse@@Base+0xa14>
   185d4:	ldr	r2, [pc, #748]	; 188c8 <argp_parse@@Base+0xd24>
   185d8:	ldr	r3, [pc, #736]	; 188c0 <argp_parse@@Base+0xd1c>
   185dc:	ldr	r1, [pc, #744]	; 188cc <argp_parse@@Base+0xd28>
   185e0:	sub	r0, fp, #96	; 0x60
   185e4:	bl	17500 <argp_error@@Base>
   185e8:	b	18434 <argp_parse@@Base+0x890>
   185ec:	sub	lr, fp, #148	; 0x94
   185f0:	stm	sp, {ip, lr}
   185f4:	bl	18abc <argp_parse@@Base+0xf18>
   185f8:	ldr	r5, [fp, #-148]	; 0xffffff6c
   185fc:	str	r5, [fp, #-84]	; 0xffffffac
   18600:	mov	r7, r0
   18604:	cmn	r7, #1
   18608:	bne	182f0 <argp_parse@@Base+0x74c>
   1860c:	cmp	r5, #1
   18610:	str	r6, [fp, #-100]	; 0xffffff9c
   18614:	ble	18634 <argp_parse@@Base+0xa90>
   18618:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1861c:	sub	r3, r5, #-1073741823	; 0xc0000001
   18620:	ldr	r1, [pc, #680]	; 188d0 <argp_parse@@Base+0xd2c>
   18624:	ldr	r0, [r2, r3, lsl #2]
   18628:	bl	11124 <strcmp@plt>
   1862c:	cmp	r0, #0
   18630:	streq	r5, [fp, #-72]	; 0xffffffb8
   18634:	ldr	r0, [fp, #-92]	; 0xffffffa4
   18638:	cmp	r5, r0
   1863c:	bge	17e2c <argp_parse@@Base+0x288>
   18640:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18644:	tst	r3, #4
   18648:	beq	18720 <argp_parse@@Base+0xb7c>
   1864c:	ldr	r3, [fp, #4]
   18650:	cmp	r3, #0
   18654:	beq	187f8 <argp_parse@@Base+0xc54>
   18658:	str	r5, [r3]
   1865c:	ldr	ip, [fp, #-108]	; 0xffffff94
   18660:	ldr	r3, [fp, #-112]	; 0xffffff90
   18664:	sub	r2, ip, #36	; 0x24
   18668:	cmp	r3, r2
   1866c:	bhi	18754 <argp_parse@@Base+0xbb0>
   18670:	ldr	r6, [pc, #604]	; 188d4 <argp_parse@@Base+0xd30>
   18674:	sub	r4, ip, #72	; 0x48
   18678:	mov	r7, #0
   1867c:	ldr	r5, [r4, #36]	; 0x24
   18680:	sub	r2, fp, #96	; 0x60
   18684:	cmp	r5, #0
   18688:	mov	r1, r7
   1868c:	mov	r0, r6
   18690:	beq	186ec <argp_parse@@Base+0xb48>
   18694:	ldr	r3, [r4, #68]	; 0x44
   18698:	ldr	ip, [r4, #48]	; 0x30
   1869c:	str	r3, [fp, #-60]	; 0xffffffc4
   186a0:	ldr	r3, [r4, #60]	; 0x3c
   186a4:	str	r3, [fp, #-68]	; 0xffffffbc
   186a8:	ldr	r3, [r4, #64]	; 0x40
   186ac:	str	ip, [fp, #-76]	; 0xffffffb4
   186b0:	str	r3, [fp, #-64]	; 0xffffffc0
   186b4:	blx	r5
   186b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   186bc:	str	r3, [r4, #68]	; 0x44
   186c0:	ldr	r3, [fp, #-112]	; 0xffffff90
   186c4:	cmp	r4, r3
   186c8:	bcc	18734 <argp_parse@@Base+0xb90>
   186cc:	cmp	r0, #7
   186d0:	cmpne	r0, #0
   186d4:	sub	r4, r4, #36	; 0x24
   186d8:	beq	1867c <argp_parse@@Base+0xad8>
   186dc:	ldr	ip, [fp, #-108]	; 0xffffff94
   186e0:	mov	r5, r0
   186e4:	sub	ip, ip, #36	; 0x24
   186e8:	b	18014 <argp_parse@@Base+0x470>
   186ec:	cmp	r4, r3
   186f0:	bcc	18740 <argp_parse@@Base+0xb9c>
   186f4:	sub	r4, r4, #36	; 0x24
   186f8:	b	1867c <argp_parse@@Base+0xad8>
   186fc:	ldr	r2, [r3]
   18700:	ldr	r3, [pc, #448]	; 188c8 <argp_parse@@Base+0xd24>
   18704:	cmp	r2, #0
   18708:	moveq	r2, r3
   1870c:	b	185d8 <argp_parse@@Base+0xa34>
   18710:	ldr	r3, [fp, #-140]	; 0xffffff74
   18714:	cmn	r3, #1
   18718:	bne	18434 <argp_parse@@Base+0x890>
   1871c:	b	18308 <argp_parse@@Base+0x764>
   18720:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18724:	ldr	r7, [r3, r5, lsl #2]
   18728:	add	r5, r5, #1
   1872c:	str	r7, [fp, #-136]	; 0xffffff78
   18730:	b	18458 <argp_parse@@Base+0x8b4>
   18734:	cmp	r0, #7
   18738:	mov	r5, r0
   1873c:	bne	1875c <argp_parse@@Base+0xbb8>
   18740:	ldr	ip, [fp, #-108]	; 0xffffff94
   18744:	sub	ip, ip, #36	; 0x24
   18748:	cmp	ip, r3
   1874c:	movcs	r5, #0
   18750:	bcs	1801c <argp_parse@@Base+0x478>
   18754:	mov	r5, #0
   18758:	b	18088 <argp_parse@@Base+0x4e4>
   1875c:	ldr	ip, [fp, #-108]	; 0xffffff94
   18760:	sub	ip, ip, #36	; 0x24
   18764:	b	18014 <argp_parse@@Base+0x470>
   18768:	ldr	r0, [r2]
   1876c:	cmp	r0, #0
   18770:	beq	17dec <argp_parse@@Base+0x248>
   18774:	bl	18990 <argp_parse@@Base+0xdec>
   18778:	str	r0, [fp, #-56]	; 0xffffffc8
   1877c:	b	17df8 <argp_parse@@Base+0x254>
   18780:	ldr	r3, [pc, #336]	; 188d8 <argp_parse@@Base+0xd34>
   18784:	ldr	r3, [r3]
   18788:	cmp	r3, #0
   1878c:	addeq	r3, r4, #16
   18790:	bne	181f8 <argp_parse@@Base+0x654>
   18794:	b	18204 <argp_parse@@Base+0x660>
   18798:	mov	r5, r0
   1879c:	ldr	r2, [fp, #4]
   187a0:	cmp	r2, #0
   187a4:	bne	17f78 <argp_parse@@Base+0x3d4>
   187a8:	cmp	r5, #7
   187ac:	bne	17f9c <argp_parse@@Base+0x3f8>
   187b0:	b	18434 <argp_parse@@Base+0x890>
   187b4:	ldr	r3, [fp, #-112]	; 0xffffff90
   187b8:	sub	ip, ip, #36	; 0x24
   187bc:	cmp	r3, ip
   187c0:	mov	r5, r0
   187c4:	bls	1879c <argp_parse@@Base+0xbf8>
   187c8:	ldr	r2, [fp, #4]
   187cc:	cmp	r2, #0
   187d0:	bne	17f78 <argp_parse@@Base+0x3d4>
   187d4:	b	17f84 <argp_parse@@Base+0x3e0>
   187d8:	ldr	r3, [fp, #-112]	; 0xffffff90
   187dc:	sub	r4, ip, #36	; 0x24
   187e0:	cmp	r4, r3
   187e4:	mov	r5, r0
   187e8:	bcs	17ee4 <argp_parse@@Base+0x340>
   187ec:	cmp	r5, #7
   187f0:	beq	17f68 <argp_parse@@Base+0x3c4>
   187f4:	b	187c8 <argp_parse@@Base+0xc24>
   187f8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   187fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18800:	tst	r3, #2
   18804:	bne	18438 <argp_parse@@Base+0x894>
   18808:	cmp	r1, #0
   1880c:	beq	18438 <argp_parse@@Base+0x894>
   18810:	mov	r0, r1
   18814:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18818:	ldr	r1, [pc, #188]	; 188dc <argp_parse@@Base+0xd38>
   1881c:	bl	1131c <fprintf@plt>
   18820:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18824:	b	18438 <argp_parse@@Base+0x894>
   18828:	mov	r5, r0
   1882c:	b	187ec <argp_parse@@Base+0xc48>
   18830:	sub	r4, ip, #36	; 0x24
   18834:	cmp	r3, r4
   18838:	bls	17ef0 <argp_parse@@Base+0x34c>
   1883c:	ldr	r2, [fp, #4]
   18840:	cmp	r2, #0
   18844:	bne	17f74 <argp_parse@@Base+0x3d0>
   18848:	b	18664 <argp_parse@@Base+0xac0>
   1884c:	cmp	r0, #7
   18850:	mov	r5, r0
   18854:	beq	17dc4 <argp_parse@@Base+0x220>
   18858:	cmp	r0, #0
   1885c:	beq	17dc4 <argp_parse@@Base+0x220>
   18860:	b	18090 <argp_parse@@Base+0x4ec>
   18864:	cmp	r0, #0
   18868:	ldreq	r0, [fp, #-92]	; 0xffffffa4
   1886c:	moveq	r5, r0
   18870:	streq	r0, [fp, #-84]	; 0xffffffac
   18874:	beq	184e8 <argp_parse@@Base+0x944>
   18878:	cmp	r0, #7
   1887c:	mov	r5, r0
   18880:	beq	18598 <argp_parse@@Base+0x9f4>
   18884:	ldr	r3, [fp, #-112]	; 0xffffff90
   18888:	b	17fa0 <argp_parse@@Base+0x3fc>
   1888c:	andeq	sp, r2, r4, lsr #12
   18890:	andeq	sp, r2, r0, lsr #12
   18894:	andeq	sp, r2, r8, lsr #12
   18898:	andeq	sp, r2, ip, lsr #12
   1889c:	tsteq	r0, r6
   188a0:	tsteq	r0, r2
   188a4:	tsteq	r0, r1
   188a8:	tsteq	r0, r5
   188ac:	tsteq	r0, r7
   188b0:	tsteq	r0, r3
   188b4:	andeq	sp, r2, r0, ror #13
   188b8:	andeq	ip, r1, r4, asr #3
   188bc:	andeq	ip, r1, r0, ror #3
   188c0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   188c4:	andeq	ip, r1, r0, lsl r3
   188c8:	andeq	ip, r1, r8, lsl #6
   188cc:	andeq	ip, r1, r8, lsl r3
   188d0:	andeq	ip, r1, ip, lsl #6
   188d4:	tsteq	r0, r4
   188d8:	andeq	sp, r2, ip, lsl #13
   188dc:	andeq	ip, r1, r4, lsr #6
   188e0:	cmp	r1, #0
   188e4:	beq	18924 <argp_parse@@Base+0xd80>
   188e8:	ldr	r2, [r1, #52]	; 0x34
   188ec:	ldr	r3, [r2, #48]	; 0x30
   188f0:	ldr	r1, [r2, #52]	; 0x34
   188f4:	cmp	r3, r1
   188f8:	bcs	18924 <argp_parse@@Base+0xd80>
   188fc:	ldr	r2, [r3, #4]
   18900:	cmp	r0, r2
   18904:	bne	18918 <argp_parse@@Base+0xd74>
   18908:	b	1892c <argp_parse@@Base+0xd88>
   1890c:	ldr	r2, [r3, #4]
   18910:	cmp	r2, r0
   18914:	beq	1892c <argp_parse@@Base+0xd88>
   18918:	add	r3, r3, #36	; 0x24
   1891c:	cmp	r3, r1
   18920:	bcc	1890c <argp_parse@@Base+0xd68>
   18924:	mov	r0, #0
   18928:	bx	lr
   1892c:	ldr	r0, [r3, #24]
   18930:	bx	lr
   18934:	ldr	ip, [pc, #32]	; 1895c <argp_parse@@Base+0xdb8>
   18938:	push	{lr}		; (str lr, [sp, #-4]!)
   1893c:	sub	sp, sp, #12
   18940:	ldm	ip, {r1, ip}
   18944:	ldr	r3, [pc, #20]	; 18960 <argp_parse@@Base+0xdbc>
   18948:	ldr	r2, [pc, #20]	; 18964 <argp_parse@@Base+0xdc0>
   1894c:	str	ip, [sp]
   18950:	bl	18ea0 <argp_parse@@Base+0x12fc>
   18954:	add	sp, sp, #12
   18958:	pop	{pc}		; (ldr pc, [sp], #4)
   1895c:	muleq	r2, r0, r6
   18960:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   18964:	andeq	ip, r1, ip, lsl #8
   18968:	ldr	r3, [pc, #20]	; 18984 <argp_parse@@Base+0xde0>
   1896c:	ldr	r2, [pc, #20]	; 18988 <argp_parse@@Base+0xde4>
   18970:	ldr	ip, [pc, #20]	; 1898c <argp_parse@@Base+0xde8>
   18974:	str	r0, [r3]
   18978:	str	ip, [r2]
   1897c:	str	r1, [r3, #4]
   18980:	bx	lr
   18984:	muleq	r2, r0, r6
   18988:	andeq	sp, r2, ip, lsl #13
   1898c:	andeq	r8, r1, r4, lsr r9
   18990:	ldrb	r3, [r0]
   18994:	cmp	r3, #47	; 0x2f
   18998:	bne	189a8 <argp_parse@@Base+0xe04>
   1899c:	ldrb	r3, [r0, #1]!
   189a0:	cmp	r3, #47	; 0x2f
   189a4:	beq	1899c <argp_parse@@Base+0xdf8>
   189a8:	cmp	r3, #0
   189ac:	bxeq	lr
   189b0:	mov	r2, #0
   189b4:	push	{lr}		; (str lr, [sp, #-4]!)
   189b8:	mov	ip, r2
   189bc:	mov	r1, r0
   189c0:	mov	lr, #1
   189c4:	cmp	r3, #47	; 0x2f
   189c8:	moveq	r2, lr
   189cc:	beq	189dc <argp_parse@@Base+0xe38>
   189d0:	cmp	r2, #0
   189d4:	movne	r0, r1
   189d8:	movne	r2, ip
   189dc:	ldrb	r3, [r1, #1]!
   189e0:	cmp	r3, #0
   189e4:	bne	189c4 <argp_parse@@Base+0xe20>
   189e8:	pop	{pc}		; (ldr pc, [sp], #4)
   189ec:	push	{r4, lr}
   189f0:	mov	r4, r0
   189f4:	bl	11304 <strlen@plt>
   189f8:	cmp	r0, #1
   189fc:	popls	{r4, pc}
   18a00:	sub	r3, r0, #1
   18a04:	add	r2, r4, r3
   18a08:	ldrb	r1, [r4, r3]
   18a0c:	cmp	r1, #47	; 0x2f
   18a10:	popne	{r4, pc}
   18a14:	cmp	r3, #1
   18a18:	beq	18a2c <argp_parse@@Base+0xe88>
   18a1c:	ldrb	r1, [r2, #-1]!
   18a20:	sub	r0, r3, #1
   18a24:	cmp	r1, #47	; 0x2f
   18a28:	beq	18a34 <argp_parse@@Base+0xe90>
   18a2c:	mov	r0, r3
   18a30:	pop	{r4, pc}
   18a34:	mov	r3, r0
   18a38:	b	18a14 <argp_parse@@Base+0xe70>
   18a3c:	push	{r4, r5, lr}
   18a40:	sub	sp, sp, #12
   18a44:	mov	r5, r0
   18a48:	bl	11328 <__errno_location@plt>
   18a4c:	mov	r2, #0
   18a50:	mov	r4, r0
   18a54:	ldr	r3, [r0]
   18a58:	str	r2, [r4]
   18a5c:	mov	r0, r5
   18a60:	str	r3, [sp]
   18a64:	str	r3, [sp, #4]
   18a68:	bl	11190 <free@plt>
   18a6c:	ldr	r3, [r4]
   18a70:	add	r2, sp, #8
   18a74:	cmp	r3, #0
   18a78:	moveq	r3, #4
   18a7c:	movne	r3, #0
   18a80:	add	r3, r2, r3
   18a84:	ldr	r3, [r3, #-8]
   18a88:	str	r3, [r4]
   18a8c:	add	sp, sp, #12
   18a90:	pop	{r4, r5, pc}
   18a94:	push	{lr}		; (str lr, [sp, #-4]!)
   18a98:	sub	sp, sp, #20
   18a9c:	mov	ip, #0
   18aa0:	ldr	lr, [sp, #24]
   18aa4:	str	ip, [sp, #8]
   18aa8:	str	lr, [sp]
   18aac:	str	ip, [sp, #4]
   18ab0:	bl	1a958 <argp_parse@@Base+0x2db4>
   18ab4:	add	sp, sp, #20
   18ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   18abc:	push	{r4, lr}
   18ac0:	sub	sp, sp, #16
   18ac4:	mov	ip, #0
   18ac8:	ldr	r4, [sp, #24]
   18acc:	ldr	lr, [sp, #28]
   18ad0:	str	r4, [sp]
   18ad4:	str	lr, [sp, #8]
   18ad8:	str	ip, [sp, #12]
   18adc:	str	ip, [sp, #4]
   18ae0:	bl	1a3f8 <argp_parse@@Base+0x2854>
   18ae4:	add	sp, sp, #16
   18ae8:	pop	{r4, pc}
   18aec:	push	{r4, lr}
   18af0:	sub	sp, sp, #16
   18af4:	mov	lr, #0
   18af8:	ldr	r4, [sp, #24]
   18afc:	mov	ip, #1
   18b00:	stm	sp, {r4, ip, lr}
   18b04:	bl	1a958 <argp_parse@@Base+0x2db4>
   18b08:	add	sp, sp, #16
   18b0c:	pop	{r4, pc}
   18b10:	push	{r4, r5, lr}
   18b14:	sub	sp, sp, #20
   18b18:	mov	lr, #0
   18b1c:	ldr	r5, [sp, #32]
   18b20:	ldr	r4, [sp, #36]	; 0x24
   18b24:	mov	ip, #1
   18b28:	str	r5, [sp]
   18b2c:	str	r4, [sp, #8]
   18b30:	str	lr, [sp, #12]
   18b34:	str	ip, [sp, #4]
   18b38:	bl	1a3f8 <argp_parse@@Base+0x2854>
   18b3c:	add	sp, sp, #20
   18b40:	pop	{r4, r5, pc}
   18b44:	push	{r4, r5, r6, lr}
   18b48:	subs	r4, r0, #0
   18b4c:	beq	18bc0 <argp_parse@@Base+0x101c>
   18b50:	mov	r1, #47	; 0x2f
   18b54:	bl	113b8 <strrchr@plt>
   18b58:	subs	r5, r0, #0
   18b5c:	beq	18bac <argp_parse@@Base+0x1008>
   18b60:	add	r6, r5, #1
   18b64:	sub	r3, r6, r4
   18b68:	cmp	r3, #6
   18b6c:	ble	18bac <argp_parse@@Base+0x1008>
   18b70:	mov	r2, #7
   18b74:	ldr	r1, [pc, #96]	; 18bdc <argp_parse@@Base+0x1038>
   18b78:	sub	r0, r5, #6
   18b7c:	bl	11448 <strncmp@plt>
   18b80:	cmp	r0, #0
   18b84:	bne	18bac <argp_parse@@Base+0x1008>
   18b88:	mov	r2, #3
   18b8c:	ldr	r1, [pc, #76]	; 18be0 <argp_parse@@Base+0x103c>
   18b90:	mov	r0, r6
   18b94:	bl	11448 <strncmp@plt>
   18b98:	cmp	r0, #0
   18b9c:	movne	r4, r6
   18ba0:	ldreq	r3, [pc, #60]	; 18be4 <argp_parse@@Base+0x1040>
   18ba4:	addeq	r4, r5, #4
   18ba8:	streq	r4, [r3]
   18bac:	ldr	r2, [pc, #52]	; 18be8 <argp_parse@@Base+0x1044>
   18bb0:	ldr	r3, [pc, #52]	; 18bec <argp_parse@@Base+0x1048>
   18bb4:	str	r4, [r2]
   18bb8:	str	r4, [r3]
   18bbc:	pop	{r4, r5, r6, pc}
   18bc0:	ldr	r3, [pc, #40]	; 18bf0 <argp_parse@@Base+0x104c>
   18bc4:	mov	r2, #55	; 0x37
   18bc8:	mov	r1, #1
   18bcc:	ldr	r3, [r3]
   18bd0:	ldr	r0, [pc, #28]	; 18bf4 <argp_parse@@Base+0x1050>
   18bd4:	bl	11250 <fwrite@plt>
   18bd8:	bl	11454 <abort@plt>
   18bdc:	andeq	ip, r1, r4, asr r4
   18be0:	andeq	ip, r1, ip, asr r4
   18be4:	andeq	sp, r2, r0, lsr #12
   18be8:	muleq	r2, r8, r6
   18bec:	andeq	sp, r2, r4, lsr #12
   18bf0:	andeq	sp, r2, r8, lsr #12
   18bf4:	andeq	ip, r1, ip, lsl r4
   18bf8:	push	{r4, r5, r6, r7, lr}
   18bfc:	sub	sp, sp, #36	; 0x24
   18c00:	cmp	r1, #0
   18c04:	mov	r4, r0
   18c08:	ldr	r5, [sp, #56]	; 0x38
   18c0c:	ldr	r6, [sp, #60]	; 0x3c
   18c10:	beq	18e50 <argp_parse@@Base+0x12ac>
   18c14:	str	r3, [sp]
   18c18:	mov	r3, r2
   18c1c:	mov	r2, r1
   18c20:	ldr	r1, [pc, #564]	; 18e5c <argp_parse@@Base+0x12b8>
   18c24:	bl	1131c <fprintf@plt>
   18c28:	ldr	r3, [pc, #560]	; 18e60 <argp_parse@@Base+0x12bc>
   18c2c:	ldr	r2, [pc, #560]	; 18e64 <argp_parse@@Base+0x12c0>
   18c30:	ldr	r1, [pc, #560]	; 18e68 <argp_parse@@Base+0x12c4>
   18c34:	mov	r0, r4
   18c38:	bl	1131c <fprintf@plt>
   18c3c:	mov	r1, r4
   18c40:	mov	r0, #10
   18c44:	bl	113d0 <fputc@plt>
   18c48:	ldr	r1, [pc, #540]	; 18e6c <argp_parse@@Base+0x12c8>
   18c4c:	ldr	r2, [pc, #540]	; 18e70 <argp_parse@@Base+0x12cc>
   18c50:	mov	r0, r4
   18c54:	bl	1131c <fprintf@plt>
   18c58:	mov	r1, r4
   18c5c:	mov	r0, #10
   18c60:	bl	113d0 <fputc@plt>
   18c64:	cmp	r6, #9
   18c68:	ldrls	pc, [pc, r6, lsl #2]
   18c6c:	b	18c98 <argp_parse@@Base+0x10f4>
   18c70:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c74:	andeq	r8, r1, r4, lsr #26
   18c78:	andeq	r8, r1, ip, lsr sp
   18c7c:	andeq	r8, r1, r4, asr sp
   18c80:	andeq	r8, r1, r4, ror sp
   18c84:	muleq	r1, ip, sp
   18c88:			; <UNDEFINED> instruction: 0x00018dbc
   18c8c:	andeq	r8, r1, r4, ror #27
   18c90:	andeq	r8, r1, r4, lsl lr
   18c94:	andeq	r8, r1, r0, ror #25
   18c98:	ldr	ip, [r5, #32]
   18c9c:	ldr	r1, [r5, #28]
   18ca0:	ldm	r5, {r2, r3}
   18ca4:	ldr	r7, [r5, #24]
   18ca8:	ldr	r6, [r5, #20]
   18cac:	str	ip, [sp, #24]
   18cb0:	ldr	lr, [r5, #16]
   18cb4:	str	r1, [sp, #20]
   18cb8:	ldr	r1, [r5, #8]
   18cbc:	ldr	ip, [r5, #12]
   18cc0:	mov	r0, r4
   18cc4:	str	r7, [sp, #16]
   18cc8:	stm	sp, {r1, ip, lr}
   18ccc:	str	r6, [sp, #12]
   18cd0:	ldr	r1, [pc, #412]	; 18e74 <argp_parse@@Base+0x12d0>
   18cd4:	bl	1131c <fprintf@plt>
   18cd8:	add	sp, sp, #36	; 0x24
   18cdc:	pop	{r4, r5, r6, r7, pc}
   18ce0:	ldr	ip, [r5, #32]
   18ce4:	ldr	r1, [r5, #28]
   18ce8:	ldm	r5, {r2, r3}
   18cec:	ldr	r7, [r5, #24]
   18cf0:	ldr	r6, [r5, #20]
   18cf4:	str	ip, [sp, #24]
   18cf8:	ldr	lr, [r5, #16]
   18cfc:	str	r1, [sp, #20]
   18d00:	ldr	r1, [r5, #8]
   18d04:	ldr	ip, [r5, #12]
   18d08:	mov	r0, r4
   18d0c:	str	r7, [sp, #16]
   18d10:	stm	sp, {r1, ip, lr}
   18d14:	str	r6, [sp, #12]
   18d18:	ldr	r1, [pc, #344]	; 18e78 <argp_parse@@Base+0x12d4>
   18d1c:	bl	1131c <fprintf@plt>
   18d20:	b	18cd8 <argp_parse@@Base+0x1134>
   18d24:	ldr	r2, [r5]
   18d28:	mov	r0, r4
   18d2c:	ldr	r1, [pc, #328]	; 18e7c <argp_parse@@Base+0x12d8>
   18d30:	add	sp, sp, #36	; 0x24
   18d34:	pop	{r4, r5, r6, r7, lr}
   18d38:	b	1131c <fprintf@plt>
   18d3c:	mov	r0, r4
   18d40:	ldm	r5, {r2, r3}
   18d44:	ldr	r1, [pc, #308]	; 18e80 <argp_parse@@Base+0x12dc>
   18d48:	add	sp, sp, #36	; 0x24
   18d4c:	pop	{r4, r5, r6, r7, lr}
   18d50:	b	1131c <fprintf@plt>
   18d54:	ldr	r1, [r5, #8]
   18d58:	ldm	r5, {r2, r3}
   18d5c:	mov	r0, r4
   18d60:	str	r1, [sp, #56]	; 0x38
   18d64:	ldr	r1, [pc, #280]	; 18e84 <argp_parse@@Base+0x12e0>
   18d68:	add	sp, sp, #36	; 0x24
   18d6c:	pop	{r4, r5, r6, r7, lr}
   18d70:	b	1131c <fprintf@plt>
   18d74:	ldr	r1, [r5, #8]
   18d78:	ldr	ip, [r5, #12]
   18d7c:	ldm	r5, {r2, r3}
   18d80:	mov	r0, r4
   18d84:	str	r1, [sp, #56]	; 0x38
   18d88:	str	ip, [sp, #60]	; 0x3c
   18d8c:	ldr	r1, [pc, #244]	; 18e88 <argp_parse@@Base+0x12e4>
   18d90:	add	sp, sp, #36	; 0x24
   18d94:	pop	{r4, r5, r6, r7, lr}
   18d98:	b	1131c <fprintf@plt>
   18d9c:	add	r1, r5, #8
   18da0:	ldm	r5, {r2, r3}
   18da4:	ldm	r1, {r1, ip, lr}
   18da8:	mov	r0, r4
   18dac:	stm	sp, {r1, ip, lr}
   18db0:	ldr	r1, [pc, #212]	; 18e8c <argp_parse@@Base+0x12e8>
   18db4:	bl	1131c <fprintf@plt>
   18db8:	b	18cd8 <argp_parse@@Base+0x1134>
   18dbc:	add	r1, r5, #8
   18dc0:	ldr	r6, [r5, #20]
   18dc4:	ldm	r1, {r1, ip, lr}
   18dc8:	mov	r0, r4
   18dcc:	ldm	r5, {r2, r3}
   18dd0:	str	r6, [sp, #12]
   18dd4:	stm	sp, {r1, ip, lr}
   18dd8:	ldr	r1, [pc, #176]	; 18e90 <argp_parse@@Base+0x12ec>
   18ddc:	bl	1131c <fprintf@plt>
   18de0:	b	18cd8 <argp_parse@@Base+0x1134>
   18de4:	add	r1, r5, #8
   18de8:	ldr	r7, [r5, #24]
   18dec:	ldm	r1, {r1, ip, lr}
   18df0:	mov	r0, r4
   18df4:	ldr	r6, [r5, #20]
   18df8:	ldm	r5, {r2, r3}
   18dfc:	stm	sp, {r1, ip, lr}
   18e00:	str	r7, [sp, #16]
   18e04:	str	r6, [sp, #12]
   18e08:	ldr	r1, [pc, #132]	; 18e94 <argp_parse@@Base+0x12f0>
   18e0c:	bl	1131c <fprintf@plt>
   18e10:	b	18cd8 <argp_parse@@Base+0x1134>
   18e14:	ldr	r1, [r5, #28]
   18e18:	ldm	r5, {r2, r3}
   18e1c:	ldr	r7, [r5, #24]
   18e20:	ldr	r6, [r5, #20]
   18e24:	ldr	lr, [r5, #16]
   18e28:	str	r1, [sp, #20]
   18e2c:	ldr	r1, [r5, #8]
   18e30:	ldr	ip, [r5, #12]
   18e34:	mov	r0, r4
   18e38:	str	r7, [sp, #16]
   18e3c:	stm	sp, {r1, ip, lr}
   18e40:	str	r6, [sp, #12]
   18e44:	ldr	r1, [pc, #76]	; 18e98 <argp_parse@@Base+0x12f4>
   18e48:	bl	1131c <fprintf@plt>
   18e4c:	b	18cd8 <argp_parse@@Base+0x1134>
   18e50:	ldr	r1, [pc, #68]	; 18e9c <argp_parse@@Base+0x12f8>
   18e54:	bl	1131c <fprintf@plt>
   18e58:	b	18c28 <argp_parse@@Base+0x1084>
   18e5c:	andeq	ip, r1, r0, ror #8
   18e60:	andeq	r0, r0, r6, ror #15
   18e64:	andeq	ip, r1, r4, ror r4
   18e68:	andeq	ip, r1, r4, ror r7
   18e6c:	muleq	r1, ip, r4
   18e70:	andeq	ip, r1, r8, ror r4
   18e74:	andeq	ip, r1, r8, lsl #13
   18e78:	andeq	ip, r1, r4, asr r6
   18e7c:	andeq	ip, r1, r8, asr #10
   18e80:	andeq	ip, r1, r8, asr r5
   18e84:	andeq	ip, r1, r0, ror r5
   18e88:	andeq	ip, r1, ip, lsl #11
   18e8c:	andeq	ip, r1, ip, lsr #11
   18e90:	ldrdeq	ip, [r1], -r0
   18e94:	strdeq	ip, [r1], -r8
   18e98:	andeq	ip, r1, r4, lsr #12
   18e9c:	andeq	ip, r1, ip, ror #8
   18ea0:	push	{r4, r5, lr}
   18ea4:	sub	sp, sp, #12
   18ea8:	ldr	r5, [sp, #24]
   18eac:	ldr	ip, [r5]
   18eb0:	cmp	ip, #0
   18eb4:	beq	18ed0 <argp_parse@@Base+0x132c>
   18eb8:	mov	lr, r5
   18ebc:	mov	ip, #0
   18ec0:	ldr	r4, [lr, #4]!
   18ec4:	add	ip, ip, #1
   18ec8:	cmp	r4, #0
   18ecc:	bne	18ec0 <argp_parse@@Base+0x131c>
   18ed0:	stm	sp, {r5, ip}
   18ed4:	bl	18bf8 <argp_parse@@Base+0x1054>
   18ed8:	add	sp, sp, #12
   18edc:	pop	{r4, r5, pc}
   18ee0:	push	{r4, r5, lr}
   18ee4:	sub	sp, sp, #52	; 0x34
   18ee8:	add	r5, sp, #4
   18eec:	ldr	r4, [sp, #64]	; 0x40
   18ef0:	mov	ip, #0
   18ef4:	sub	r4, r4, #4
   18ef8:	ldr	lr, [r4, #4]!
   18efc:	cmp	lr, #0
   18f00:	str	lr, [r5, #4]!
   18f04:	beq	18f14 <argp_parse@@Base+0x1370>
   18f08:	add	ip, ip, #1
   18f0c:	cmp	ip, #10
   18f10:	bne	18ef8 <argp_parse@@Base+0x1354>
   18f14:	add	lr, sp, #8
   18f18:	str	ip, [sp, #4]
   18f1c:	str	lr, [sp]
   18f20:	bl	18bf8 <argp_parse@@Base+0x1054>
   18f24:	add	sp, sp, #52	; 0x34
   18f28:	pop	{r4, r5, pc}
   18f2c:	push	{r3}		; (str r3, [sp, #-4]!)
   18f30:	push	{r4, lr}
   18f34:	sub	sp, sp, #60	; 0x3c
   18f38:	add	lr, sp, #56	; 0x38
   18f3c:	add	r3, sp, #72	; 0x48
   18f40:	str	r3, [lr, #-44]!	; 0xffffffd4
   18f44:	add	r4, sp, #68	; 0x44
   18f48:	mov	r3, #0
   18f4c:	ldr	ip, [r4, #4]!
   18f50:	cmp	ip, #0
   18f54:	str	ip, [lr, #4]!
   18f58:	beq	18f68 <argp_parse@@Base+0x13c4>
   18f5c:	add	r3, r3, #1
   18f60:	cmp	r3, #10
   18f64:	bne	18f4c <argp_parse@@Base+0x13a8>
   18f68:	add	ip, sp, #16
   18f6c:	str	r3, [sp, #4]
   18f70:	str	ip, [sp]
   18f74:	ldr	r3, [sp, #68]	; 0x44
   18f78:	bl	18bf8 <argp_parse@@Base+0x1054>
   18f7c:	add	sp, sp, #60	; 0x3c
   18f80:	pop	{r4, lr}
   18f84:	add	sp, sp, #4
   18f88:	bx	lr
   18f8c:	ldr	r3, [pc, #56]	; 18fcc <argp_parse@@Base+0x1428>
   18f90:	push	{r4, lr}
   18f94:	mov	r0, #10
   18f98:	ldr	r1, [r3]
   18f9c:	bl	113d0 <fputc@plt>
   18fa0:	ldr	r1, [pc, #40]	; 18fd0 <argp_parse@@Base+0x142c>
   18fa4:	ldr	r0, [pc, #40]	; 18fd4 <argp_parse@@Base+0x1430>
   18fa8:	bl	11148 <printf@plt>
   18fac:	ldr	r1, [pc, #36]	; 18fd8 <argp_parse@@Base+0x1434>
   18fb0:	ldr	r2, [pc, #36]	; 18fdc <argp_parse@@Base+0x1438>
   18fb4:	ldr	r0, [pc, #36]	; 18fe0 <argp_parse@@Base+0x143c>
   18fb8:	bl	11148 <printf@plt>
   18fbc:	ldr	r1, [pc, #32]	; 18fe4 <argp_parse@@Base+0x1440>
   18fc0:	ldr	r0, [pc, #32]	; 18fe8 <argp_parse@@Base+0x1444>
   18fc4:	pop	{r4, lr}
   18fc8:	b	11148 <printf@plt>
   18fcc:	andeq	sp, r2, ip, lsr #12
   18fd0:	andeq	ip, r1, r4, asr #13
   18fd4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   18fd8:	andeq	ip, r1, ip, lsl #8
   18fdc:	strdeq	ip, [r1], -r0
   18fe0:	andeq	ip, r1, r8, lsl r7
   18fe4:	andeq	ip, r1, ip, lsr #14
   18fe8:	andeq	ip, r1, ip, asr #14
   18fec:	push	{r4, lr}
   18ff0:	bl	195a8 <argp_parse@@Base+0x1a04>
   18ff4:	cmp	r0, #0
   18ff8:	popne	{r4, pc}
   18ffc:	bl	19534 <argp_parse@@Base+0x1990>
   19000:	push	{r4, lr}
   19004:	bl	195a8 <argp_parse@@Base+0x1a04>
   19008:	cmp	r0, #0
   1900c:	popne	{r4, pc}
   19010:	bl	19534 <argp_parse@@Base+0x1990>
   19014:	push	{r4, lr}
   19018:	bl	195a8 <argp_parse@@Base+0x1a04>
   1901c:	cmp	r0, #0
   19020:	popne	{r4, pc}
   19024:	bl	19534 <argp_parse@@Base+0x1990>
   19028:	push	{r4, r5, r6, lr}
   1902c:	mov	r5, r0
   19030:	mov	r4, r1
   19034:	bl	195d4 <argp_parse@@Base+0x1a30>
   19038:	cmp	r0, #0
   1903c:	popne	{r4, r5, r6, pc}
   19040:	adds	r4, r4, #0
   19044:	movne	r4, #1
   19048:	cmp	r5, #0
   1904c:	orreq	r4, r4, #1
   19050:	cmp	r4, #0
   19054:	popeq	{r4, r5, r6, pc}
   19058:	bl	19534 <argp_parse@@Base+0x1990>
   1905c:	push	{r4, lr}
   19060:	cmp	r1, #0
   19064:	orreq	r1, r1, #1
   19068:	bl	195d4 <argp_parse@@Base+0x1a30>
   1906c:	cmp	r0, #0
   19070:	popne	{r4, pc}
   19074:	bl	19534 <argp_parse@@Base+0x1990>
   19078:	push	{r4, r5, r6, lr}
   1907c:	mov	r6, r0
   19080:	mov	r5, r1
   19084:	mov	r4, r2
   19088:	bl	1a9ec <argp_parse@@Base+0x2e48>
   1908c:	cmp	r0, #0
   19090:	popne	{r4, r5, r6, pc}
   19094:	cmp	r6, #0
   19098:	beq	190a8 <argp_parse@@Base+0x1504>
   1909c:	cmp	r5, #0
   190a0:	cmpne	r4, #0
   190a4:	popeq	{r4, r5, r6, pc}
   190a8:	bl	19534 <argp_parse@@Base+0x1990>
   190ac:	b	19078 <argp_parse@@Base+0x14d4>
   190b0:	cmp	r2, #0
   190b4:	cmpne	r1, #0
   190b8:	moveq	r2, #1
   190bc:	moveq	r1, r2
   190c0:	push	{r4, lr}
   190c4:	bl	1a9ec <argp_parse@@Base+0x2e48>
   190c8:	cmp	r0, #0
   190cc:	popne	{r4, pc}
   190d0:	bl	19534 <argp_parse@@Base+0x1990>
   190d4:	mov	r2, r1
   190d8:	mov	r1, r0
   190dc:	mov	r0, #0
   190e0:	b	19078 <argp_parse@@Base+0x14d4>
   190e4:	mov	r2, r1
   190e8:	mov	r1, r0
   190ec:	mov	r0, #0
   190f0:	b	190b0 <argp_parse@@Base+0x150c>
   190f4:	push	{r4, r5, r6, lr}
   190f8:	subs	r6, r0, #0
   190fc:	sub	sp, sp, #8
   19100:	mov	r5, r1
   19104:	ldr	r4, [r1]
   19108:	beq	19144 <argp_parse@@Base+0x15a0>
   1910c:	lsr	r1, r4, #1
   19110:	add	r3, r1, #1
   19114:	mvn	r3, r3
   19118:	cmp	r4, r3
   1911c:	bhi	19140 <argp_parse@@Base+0x159c>
   19120:	add	r4, r4, #1
   19124:	add	r4, r4, r1
   19128:	mov	r0, r6
   1912c:	mov	r1, r4
   19130:	bl	19078 <argp_parse@@Base+0x14d4>
   19134:	str	r4, [r5]
   19138:	add	sp, sp, #8
   1913c:	pop	{r4, r5, r6, pc}
   19140:	bl	19534 <argp_parse@@Base+0x1990>
   19144:	cmp	r4, #0
   19148:	bne	19128 <argp_parse@@Base+0x1584>
   1914c:	mov	r1, r2
   19150:	mov	r0, #64	; 0x40
   19154:	str	r2, [sp, #4]
   19158:	bl	1aa38 <argp_parse@@Base+0x2e94>
   1915c:	ldr	r2, [sp, #4]
   19160:	cmp	r0, #0
   19164:	movne	r4, r0
   19168:	addeq	r4, r0, #1
   1916c:	b	19128 <argp_parse@@Base+0x1584>
   19170:	mov	r2, #1
   19174:	b	190f4 <argp_parse@@Base+0x1550>
   19178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1917c:	sub	sp, sp, #12
   19180:	ldr	r6, [r1]
   19184:	mov	sl, r1
   19188:	mov	r9, r0
   1918c:	asrs	r4, r6, #1
   19190:	mov	r5, r2
   19194:	mov	fp, r3
   19198:	ldr	r7, [sp, #48]	; 0x30
   1919c:	bmi	19308 <argp_parse@@Base+0x1764>
   191a0:	mvn	r3, #-2147483648	; 0x80000000
   191a4:	sub	r3, r3, r4
   191a8:	cmp	r6, r3
   191ac:	movle	r3, #0
   191b0:	movgt	r3, #1
   191b4:	mvn	r8, fp
   191b8:	cmp	r3, #0
   191bc:	addeq	r4, r4, r6
   191c0:	mvnne	r4, #-2147483648	; 0x80000000
   191c4:	lsr	r8, r8, #31
   191c8:	cmp	fp, r4
   191cc:	movge	r3, #0
   191d0:	andlt	r3, r8, #1
   191d4:	cmp	r3, #0
   191d8:	beq	192c0 <argp_parse@@Base+0x171c>
   191dc:	cmp	r7, #0
   191e0:	blt	19390 <argp_parse@@Base+0x17ec>
   191e4:	bne	19388 <argp_parse@@Base+0x17e4>
   191e8:	mov	r2, #64	; 0x40
   191ec:	mov	r1, r7
   191f0:	mov	r0, r2
   191f4:	str	r2, [sp, #4]
   191f8:	bl	1ac44 <argp_parse@@Base+0x30a0>
   191fc:	ldr	r2, [sp, #4]
   19200:	mov	r1, r7
   19204:	mov	r4, r0
   19208:	mov	r0, r2
   1920c:	bl	1ae64 <argp_parse@@Base+0x32c0>
   19210:	ldr	r2, [sp, #4]
   19214:	sub	r1, r2, r1
   19218:	cmp	r9, #0
   1921c:	sub	r3, r4, r6
   19220:	streq	r9, [sl]
   19224:	cmp	r3, r5
   19228:	bge	192ac <argp_parse@@Base+0x1708>
   1922c:	cmp	r5, #0
   19230:	blt	1931c <argp_parse@@Base+0x1778>
   19234:	cmp	r6, #0
   19238:	blt	19258 <argp_parse@@Base+0x16b4>
   1923c:	mvn	r3, #-2147483648	; 0x80000000
   19240:	sub	r3, r3, r5
   19244:	cmp	r6, r3
   19248:	movle	r3, #0
   1924c:	movgt	r3, #1
   19250:	cmp	r3, #0
   19254:	bne	19418 <argp_parse@@Base+0x1874>
   19258:	add	r5, r6, r5
   1925c:	cmp	fp, r5
   19260:	movge	r8, #0
   19264:	andlt	r8, r8, #1
   19268:	cmp	r8, #0
   1926c:	mov	r4, r5
   19270:	bne	19418 <argp_parse@@Base+0x1874>
   19274:	cmp	r7, #0
   19278:	blt	19330 <argp_parse@@Base+0x178c>
   1927c:	beq	192a8 <argp_parse@@Base+0x1704>
   19280:	cmp	r5, #0
   19284:	blt	193d8 <argp_parse@@Base+0x1834>
   19288:	mov	r1, r7
   1928c:	mvn	r0, #-2147483648	; 0x80000000
   19290:	bl	1ac44 <argp_parse@@Base+0x30a0>
   19294:	cmp	r5, r0
   19298:	movle	r0, #0
   1929c:	movgt	r0, #1
   192a0:	cmp	r0, #0
   192a4:	bne	19418 <argp_parse@@Base+0x1874>
   192a8:	mul	r1, r5, r7
   192ac:	mov	r0, r9
   192b0:	bl	19028 <argp_parse@@Base+0x1484>
   192b4:	str	r4, [sl]
   192b8:	add	sp, sp, #12
   192bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192c0:	cmp	r7, #0
   192c4:	blt	1935c <argp_parse@@Base+0x17b8>
   192c8:	beq	191e8 <argp_parse@@Base+0x1644>
   192cc:	cmp	r4, #0
   192d0:	blt	19398 <argp_parse@@Base+0x17f4>
   192d4:	mov	r1, r7
   192d8:	mvn	r0, #-2147483648	; 0x80000000
   192dc:	bl	1ac44 <argp_parse@@Base+0x30a0>
   192e0:	cmp	r0, r4
   192e4:	movge	r0, #0
   192e8:	movlt	r0, #1
   192ec:	cmp	r0, #0
   192f0:	mvnne	r2, #-2147483648	; 0x80000000
   192f4:	bne	191ec <argp_parse@@Base+0x1648>
   192f8:	mul	r1, r7, r4
   192fc:	cmp	r1, #63	; 0x3f
   19300:	bgt	19218 <argp_parse@@Base+0x1674>
   19304:	b	191e8 <argp_parse@@Base+0x1644>
   19308:	rsb	r3, r4, #-2147483648	; 0x80000000
   1930c:	cmp	r6, r3
   19310:	movge	r3, #0
   19314:	movlt	r3, #1
   19318:	b	191b4 <argp_parse@@Base+0x1610>
   1931c:	rsb	r3, r5, #-2147483648	; 0x80000000
   19320:	cmp	r6, r3
   19324:	movge	r3, #0
   19328:	movlt	r3, #1
   1932c:	b	19250 <argp_parse@@Base+0x16ac>
   19330:	cmp	r5, #0
   19334:	blt	193bc <argp_parse@@Base+0x1818>
   19338:	cmn	r7, #1
   1933c:	beq	192a8 <argp_parse@@Base+0x1704>
   19340:	mov	r1, r7
   19344:	mov	r0, #-2147483648	; 0x80000000
   19348:	bl	1ac44 <argp_parse@@Base+0x30a0>
   1934c:	cmp	r5, r0
   19350:	movle	r0, #0
   19354:	movgt	r0, #1
   19358:	b	192a0 <argp_parse@@Base+0x16fc>
   1935c:	cmp	r4, #0
   19360:	blt	193fc <argp_parse@@Base+0x1858>
   19364:	cmn	r7, #1
   19368:	beq	192f8 <argp_parse@@Base+0x1754>
   1936c:	mov	r1, r7
   19370:	mov	r0, #-2147483648	; 0x80000000
   19374:	bl	1ac44 <argp_parse@@Base+0x30a0>
   19378:	cmp	r0, r4
   1937c:	movge	r0, #0
   19380:	movlt	r0, #1
   19384:	b	192ec <argp_parse@@Base+0x1748>
   19388:	mov	r4, fp
   1938c:	b	192d4 <argp_parse@@Base+0x1730>
   19390:	mov	r4, fp
   19394:	b	19364 <argp_parse@@Base+0x17c0>
   19398:	cmn	r4, #1
   1939c:	beq	192f8 <argp_parse@@Base+0x1754>
   193a0:	mov	r1, r4
   193a4:	mov	r0, #-2147483648	; 0x80000000
   193a8:	bl	1ac44 <argp_parse@@Base+0x30a0>
   193ac:	cmp	r7, r0
   193b0:	movle	r0, #0
   193b4:	movgt	r0, #1
   193b8:	b	192ec <argp_parse@@Base+0x1748>
   193bc:	mov	r1, r7
   193c0:	mvn	r0, #-2147483648	; 0x80000000
   193c4:	bl	1ac44 <argp_parse@@Base+0x30a0>
   193c8:	cmp	r5, r0
   193cc:	movge	r0, #0
   193d0:	movlt	r0, #1
   193d4:	b	192a0 <argp_parse@@Base+0x16fc>
   193d8:	cmn	r5, #1
   193dc:	beq	192a8 <argp_parse@@Base+0x1704>
   193e0:	mov	r1, r5
   193e4:	mov	r0, #-2147483648	; 0x80000000
   193e8:	bl	1ac44 <argp_parse@@Base+0x30a0>
   193ec:	cmp	r7, r0
   193f0:	movle	r0, #0
   193f4:	movgt	r0, #1
   193f8:	b	192a0 <argp_parse@@Base+0x16fc>
   193fc:	mov	r1, r7
   19400:	mvn	r0, #-2147483648	; 0x80000000
   19404:	bl	1ac44 <argp_parse@@Base+0x30a0>
   19408:	cmp	r0, r4
   1940c:	movle	r0, #0
   19410:	movgt	r0, #1
   19414:	b	192ec <argp_parse@@Base+0x1748>
   19418:	bl	19534 <argp_parse@@Base+0x1990>
   1941c:	push	{r4, lr}
   19420:	mov	r1, #1
   19424:	bl	19560 <argp_parse@@Base+0x19bc>
   19428:	cmp	r0, #0
   1942c:	popne	{r4, pc}
   19430:	bl	19534 <argp_parse@@Base+0x1990>
   19434:	push	{r4, lr}
   19438:	mov	r1, #1
   1943c:	bl	19560 <argp_parse@@Base+0x19bc>
   19440:	cmp	r0, #0
   19444:	popne	{r4, pc}
   19448:	bl	19534 <argp_parse@@Base+0x1990>
   1944c:	push	{r4, lr}
   19450:	bl	19560 <argp_parse@@Base+0x19bc>
   19454:	cmp	r0, #0
   19458:	popne	{r4, pc}
   1945c:	bl	19534 <argp_parse@@Base+0x1990>
   19460:	push	{r4, lr}
   19464:	bl	19560 <argp_parse@@Base+0x19bc>
   19468:	cmp	r0, #0
   1946c:	popne	{r4, pc}
   19470:	bl	19534 <argp_parse@@Base+0x1990>
   19474:	push	{r4, r5, r6, lr}
   19478:	mov	r6, r0
   1947c:	mov	r0, r1
   19480:	mov	r4, r1
   19484:	bl	195a8 <argp_parse@@Base+0x1a04>
   19488:	subs	r5, r0, #0
   1948c:	beq	194a4 <argp_parse@@Base+0x1900>
   19490:	mov	r2, r4
   19494:	mov	r1, r6
   19498:	bl	111b4 <memcpy@plt>
   1949c:	mov	r0, r5
   194a0:	pop	{r4, r5, r6, pc}
   194a4:	bl	19534 <argp_parse@@Base+0x1990>
   194a8:	push	{r4, r5, r6, lr}
   194ac:	mov	r6, r0
   194b0:	mov	r0, r1
   194b4:	mov	r4, r1
   194b8:	bl	195a8 <argp_parse@@Base+0x1a04>
   194bc:	subs	r5, r0, #0
   194c0:	beq	194d8 <argp_parse@@Base+0x1934>
   194c4:	mov	r2, r4
   194c8:	mov	r1, r6
   194cc:	bl	111b4 <memcpy@plt>
   194d0:	mov	r0, r5
   194d4:	pop	{r4, r5, r6, pc}
   194d8:	bl	19534 <argp_parse@@Base+0x1990>
   194dc:	push	{r4, r5, r6, lr}
   194e0:	mov	r6, r0
   194e4:	add	r0, r1, #1
   194e8:	mov	r4, r1
   194ec:	bl	195a8 <argp_parse@@Base+0x1a04>
   194f0:	subs	r5, r0, #0
   194f4:	beq	19514 <argp_parse@@Base+0x1970>
   194f8:	mov	r3, #0
   194fc:	mov	r1, r6
   19500:	strb	r3, [r5, r4]
   19504:	mov	r2, r4
   19508:	bl	111b4 <memcpy@plt>
   1950c:	mov	r0, r5
   19510:	pop	{r4, r5, r6, pc}
   19514:	bl	19534 <argp_parse@@Base+0x1990>
   19518:	push	{r4, lr}
   1951c:	mov	r4, r0
   19520:	bl	11304 <strlen@plt>
   19524:	add	r1, r0, #1
   19528:	mov	r0, r4
   1952c:	pop	{r4, lr}
   19530:	b	19474 <argp_parse@@Base+0x18d0>
   19534:	ldr	r1, [pc, #24]	; 19554 <argp_parse@@Base+0x19b0>
   19538:	push	{r4, lr}
   1953c:	ldr	r0, [r1]
   19540:	ldr	r3, [pc, #16]	; 19558 <argp_parse@@Base+0x19b4>
   19544:	ldr	r2, [pc, #16]	; 1955c <argp_parse@@Base+0x19b8>
   19548:	mov	r1, #0
   1954c:	bl	11268 <error@plt>
   19550:	bl	11454 <abort@plt>
   19554:	andeq	sp, r2, r0, lsl r6
   19558:	andeq	ip, r1, r4, lsr #15
   1955c:	strheq	fp, [r1], -r0
   19560:	cmp	r1, #0
   19564:	cmpne	r0, #0
   19568:	moveq	r1, #1
   1956c:	moveq	r0, r1
   19570:	umull	r2, r3, r0, r1
   19574:	adds	r3, r3, #0
   19578:	movne	r3, #1
   1957c:	cmp	r2, #0
   19580:	blt	19590 <argp_parse@@Base+0x19ec>
   19584:	cmp	r3, #0
   19588:	bne	19590 <argp_parse@@Base+0x19ec>
   1958c:	b	11100 <calloc@plt>
   19590:	push	{r4, lr}
   19594:	bl	11328 <__errno_location@plt>
   19598:	mov	r3, #12
   1959c:	str	r3, [r0]
   195a0:	mov	r0, #0
   195a4:	pop	{r4, pc}
   195a8:	cmp	r0, #0
   195ac:	moveq	r0, #1
   195b0:	cmp	r0, #0
   195b4:	blt	195bc <argp_parse@@Base+0x1a18>
   195b8:	b	1128c <malloc@plt>
   195bc:	push	{r4, lr}
   195c0:	bl	11328 <__errno_location@plt>
   195c4:	mov	r3, #12
   195c8:	str	r3, [r0]
   195cc:	mov	r0, #0
   195d0:	pop	{r4, pc}
   195d4:	cmp	r0, #0
   195d8:	beq	195fc <argp_parse@@Base+0x1a58>
   195dc:	cmp	r1, #0
   195e0:	push	{lr}		; (str lr, [sp, #-4]!)
   195e4:	sub	sp, sp, #12
   195e8:	beq	19604 <argp_parse@@Base+0x1a60>
   195ec:	blt	1961c <argp_parse@@Base+0x1a78>
   195f0:	add	sp, sp, #12
   195f4:	pop	{lr}		; (ldr lr, [sp], #4)
   195f8:	b	1122c <realloc@plt>
   195fc:	mov	r0, r1
   19600:	b	195a8 <argp_parse@@Base+0x1a04>
   19604:	str	r1, [sp, #4]
   19608:	bl	18a3c <argp_parse@@Base+0xe98>
   1960c:	ldr	r3, [sp, #4]
   19610:	mov	r0, r3
   19614:	add	sp, sp, #12
   19618:	pop	{pc}		; (ldr pc, [sp], #4)
   1961c:	bl	11328 <__errno_location@plt>
   19620:	mov	r2, #12
   19624:	mov	r3, #0
   19628:	str	r2, [r0]
   1962c:	b	19610 <argp_parse@@Base+0x1a6c>
   19630:	push	{r4, r5, r6, r7, r8, lr}
   19634:	mov	r8, r0
   19638:	mov	r0, #36	; 0x24
   1963c:	mov	r7, r1
   19640:	mov	r6, r2
   19644:	mov	r5, r3
   19648:	bl	195a8 <argp_parse@@Base+0x1a04>
   1964c:	subs	r4, r0, #0
   19650:	beq	19694 <argp_parse@@Base+0x1af0>
   19654:	mov	r0, #0
   19658:	str	r5, [r4, #12]
   1965c:	str	r0, [r4, #20]
   19660:	str	r0, [r4, #16]
   19664:	str	r8, [r4]
   19668:	str	r7, [r4, #4]
   1966c:	str	r6, [r4, #8]
   19670:	mov	r0, #200	; 0xc8
   19674:	bl	195a8 <argp_parse@@Base+0x1a04>
   19678:	cmp	r0, #0
   1967c:	addne	r3, r0, #200	; 0xc8
   19680:	mov	r5, r0
   19684:	str	r0, [r4, #24]
   19688:	strne	r0, [r4, #28]
   1968c:	strne	r3, [r4, #32]
   19690:	beq	1969c <argp_parse@@Base+0x1af8>
   19694:	mov	r0, r4
   19698:	pop	{r4, r5, r6, r7, r8, pc}
   1969c:	mov	r0, r4
   196a0:	bl	18a3c <argp_parse@@Base+0xe98>
   196a4:	mov	r4, r5
   196a8:	b	19694 <argp_parse@@Base+0x1af0>
   196ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196b0:	mov	r7, r0
   196b4:	ldr	r6, [r0, #24]
   196b8:	ldr	r3, [r0, #16]
   196bc:	ldr	fp, [r0, #28]
   196c0:	sub	sp, sp, #12
   196c4:	add	r6, r6, r3
   196c8:	mov	r9, #32
   196cc:	cmp	r6, fp
   196d0:	bcs	197ac <argp_parse@@Base+0x1c08>
   196d4:	ldr	r8, [r7, #20]
   196d8:	cmp	r8, #0
   196dc:	bne	1974c <argp_parse@@Base+0x1ba8>
   196e0:	ldr	r4, [r7, #4]
   196e4:	cmp	r4, #0
   196e8:	beq	199f0 <argp_parse@@Base+0x1e4c>
   196ec:	ldr	r2, [r7, #32]
   196f0:	add	r3, fp, r4
   196f4:	cmp	r2, r3
   196f8:	bls	1970c <argp_parse@@Base+0x1b68>
   196fc:	b	19b38 <argp_parse@@Base+0x1f94>
   19700:	add	r8, r8, #1
   19704:	cmp	r4, r8
   19708:	beq	19740 <argp_parse@@Base+0x1b9c>
   1970c:	ldr	r0, [r7]
   19710:	ldr	r3, [r0, #20]
   19714:	ldr	r2, [r0, #24]
   19718:	add	r1, r3, #1
   1971c:	cmp	r3, r2
   19720:	strcc	r1, [r0, #20]
   19724:	strbcc	r9, [r3]
   19728:	bcc	19700 <argp_parse@@Base+0x1b5c>
   1972c:	mov	r1, r9
   19730:	add	r8, r8, #1
   19734:	bl	11394 <__overflow@plt>
   19738:	cmp	r4, r8
   1973c:	bne	1970c <argp_parse@@Base+0x1b68>
   19740:	ldr	fp, [r7, #28]
   19744:	mov	r8, r4
   19748:	str	r4, [r7, #20]
   1974c:	sub	sl, fp, r6
   19750:	mov	r2, sl
   19754:	mov	r1, #10
   19758:	mov	r0, r6
   1975c:	bl	1137c <memchr@plt>
   19760:	cmp	r8, #0
   19764:	movlt	r8, #0
   19768:	movlt	r3, r8
   1976c:	str	r6, [sp]
   19770:	mov	r4, r0
   19774:	strlt	r3, [r7, #20]
   19778:	cmp	r4, #0
   1977c:	beq	19a14 <argp_parse@@Base+0x1e70>
   19780:	sub	r2, r4, r6
   19784:	ldr	r3, [r7, #8]
   19788:	add	r2, r2, r8
   1978c:	cmp	r2, r3
   19790:	bge	197c0 <argp_parse@@Base+0x1c1c>
   19794:	ldr	fp, [r7, #28]
   19798:	add	r6, r4, #1
   1979c:	mov	r3, #0
   197a0:	cmp	r6, fp
   197a4:	str	r3, [r7, #20]
   197a8:	bcc	196d4 <argp_parse@@Base+0x1b30>
   197ac:	ldr	r3, [r7, #24]
   197b0:	sub	r3, fp, r3
   197b4:	str	r3, [r7, #16]
   197b8:	add	sp, sp, #12
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	ldr	r2, [r7, #12]
   197c4:	sub	r5, r3, #1
   197c8:	cmp	r2, #0
   197cc:	str	r2, [sp, #4]
   197d0:	blt	19acc <argp_parse@@Base+0x1f28>
   197d4:	add	r5, r5, #1
   197d8:	sub	r8, r5, r8
   197dc:	adds	r8, r6, r8
   197e0:	bcs	19a4c <argp_parse@@Base+0x1ea8>
   197e4:	bl	112d4 <__ctype_b_loc@plt>
   197e8:	mov	r3, r8
   197ec:	ldr	r0, [r0]
   197f0:	b	197fc <argp_parse@@Base+0x1c58>
   197f4:	cmp	r3, r6
   197f8:	bcc	19a50 <argp_parse@@Base+0x1eac>
   197fc:	mov	r1, r3
   19800:	sub	r3, r3, #1
   19804:	ldrb	r2, [r1]
   19808:	mov	r5, r3
   1980c:	lsl	r2, r2, #1
   19810:	ldrh	r2, [r0, r2]
   19814:	tst	r2, #1
   19818:	beq	197f4 <argp_parse@@Base+0x1c50>
   1981c:	add	r5, r1, #1
   19820:	cmp	r5, r6
   19824:	bls	19a64 <argp_parse@@Base+0x1ec0>
   19828:	cmp	r1, r6
   1982c:	bcc	19a5c <argp_parse@@Base+0x1eb8>
   19830:	mov	r1, r3
   19834:	sub	r8, r6, #1
   19838:	b	19854 <argp_parse@@Base+0x1cb0>
   1983c:	ldrb	r3, [r1]
   19840:	sub	r1, r1, #1
   19844:	lsl	r3, r3, #1
   19848:	ldrh	r3, [r0, r3]
   1984c:	tst	r3, #1
   19850:	beq	19b7c <argp_parse@@Base+0x1fd8>
   19854:	cmp	r8, r1
   19858:	mov	r2, r1
   1985c:	bne	1983c <argp_parse@@Base+0x1c98>
   19860:	add	r8, r8, #1
   19864:	add	r3, sl, #1
   19868:	add	r3, r6, r3
   1986c:	cmp	r5, r3
   19870:	beq	19958 <argp_parse@@Base+0x1db4>
   19874:	add	r3, r8, #1
   19878:	ldr	r1, [sp, #4]
   1987c:	sub	r2, r5, r3
   19880:	cmp	r2, r1
   19884:	bge	19974 <argp_parse@@Base+0x1dd0>
   19888:	cmp	r5, fp
   1988c:	bcs	1996c <argp_parse@@Base+0x1dc8>
   19890:	ldr	r3, [r7, #32]
   19894:	ldr	r2, [sp, #4]
   19898:	sub	r3, r3, fp
   1989c:	add	r0, r2, #1
   198a0:	cmp	r3, r0
   198a4:	bgt	19bac <argp_parse@@Base+0x2008>
   198a8:	ldr	r0, [r7, #24]
   198ac:	cmp	r8, r0
   198b0:	bls	198c4 <argp_parse@@Base+0x1d20>
   198b4:	sub	r2, r8, r0
   198b8:	ldr	r3, [r7]
   198bc:	mov	r1, #1
   198c0:	bl	111cc <fwrite_unlocked@plt>
   198c4:	ldr	r0, [r7]
   198c8:	ldr	r2, [r0, #24]
   198cc:	ldr	r3, [r0, #20]
   198d0:	cmp	r3, r2
   198d4:	addcc	r2, r3, #1
   198d8:	strcc	r2, [r0, #20]
   198dc:	movcc	r2, #10
   198e0:	strbcc	r2, [r3]
   198e4:	bcs	19bec <argp_parse@@Base+0x2048>
   198e8:	ldr	r6, [r7, #24]
   198ec:	ldr	r3, [sp]
   198f0:	sub	r2, r5, r6
   198f4:	sub	r3, r3, r6
   198f8:	add	sl, sl, r3
   198fc:	mov	fp, r2
   19900:	mov	r4, r6
   19904:	ldr	r3, [r7, #12]
   19908:	cmp	r3, r2
   1990c:	bgt	19994 <argp_parse@@Base+0x1df0>
   19910:	cmp	r3, #0
   19914:	movgt	r2, r6
   19918:	ble	19934 <argp_parse@@Base+0x1d90>
   1991c:	strb	r9, [r2], #1
   19920:	ldr	r3, [r7, #12]
   19924:	sub	r1, r2, r6
   19928:	cmp	r3, r1
   1992c:	bgt	1991c <argp_parse@@Base+0x1d78>
   19930:	mov	r6, r2
   19934:	cmp	r6, r5
   19938:	bcc	19b1c <argp_parse@@Base+0x1f78>
   1993c:	sub	fp, sl, fp
   19940:	cmp	r3, #0
   19944:	add	fp, r6, fp
   19948:	mvneq	r3, #0
   1994c:	str	fp, [r7, #28]
   19950:	str	r3, [r7, #20]
   19954:	b	196cc <argp_parse@@Base+0x1b28>
   19958:	ldr	r3, [r7, #32]
   1995c:	ldr	r2, [sp, #4]
   19960:	sub	r3, r3, r8
   19964:	cmp	r3, r2
   19968:	ble	19888 <argp_parse@@Base+0x1ce4>
   1996c:	add	r3, r8, #1
   19970:	sub	r2, r5, r3
   19974:	sub	fp, r5, r6
   19978:	mov	r4, r6
   1997c:	mov	r6, r3
   19980:	mov	r3, #10
   19984:	strb	r3, [r8]
   19988:	ldr	r3, [r7, #12]
   1998c:	cmp	r3, r2
   19990:	ble	19910 <argp_parse@@Base+0x1d6c>
   19994:	add	r2, sl, #1
   19998:	add	r2, r4, r2
   1999c:	cmp	r5, r2
   199a0:	beq	19b98 <argp_parse@@Base+0x1ff4>
   199a4:	cmp	r3, #0
   199a8:	movgt	r8, #0
   199ac:	bgt	199c4 <argp_parse@@Base+0x1e20>
   199b0:	b	19934 <argp_parse@@Base+0x1d90>
   199b4:	ldr	r3, [r7, #12]
   199b8:	add	r8, r8, #1
   199bc:	cmp	r3, r8
   199c0:	ble	19934 <argp_parse@@Base+0x1d90>
   199c4:	ldr	r0, [r7]
   199c8:	ldr	r3, [r0, #20]
   199cc:	ldr	r2, [r0, #24]
   199d0:	add	r1, r3, #1
   199d4:	cmp	r3, r2
   199d8:	strcc	r1, [r0, #20]
   199dc:	strbcc	r9, [r3]
   199e0:	bcc	199b4 <argp_parse@@Base+0x1e10>
   199e4:	mov	r1, r9
   199e8:	bl	11394 <__overflow@plt>
   199ec:	b	199b4 <argp_parse@@Base+0x1e10>
   199f0:	sub	sl, fp, r6
   199f4:	mov	r2, sl
   199f8:	mov	r1, #10
   199fc:	mov	r0, r6
   19a00:	bl	1137c <memchr@plt>
   19a04:	str	r6, [sp]
   19a08:	mov	r4, r0
   19a0c:	cmp	r4, #0
   19a10:	bne	19780 <argp_parse@@Base+0x1bdc>
   19a14:	ldr	r5, [r7, #8]
   19a18:	add	r3, r8, sl
   19a1c:	cmp	r3, r5
   19a20:	bcc	19c10 <argp_parse@@Base+0x206c>
   19a24:	ldr	r2, [r7, #12]
   19a28:	sub	r5, r5, #1
   19a2c:	cmp	r2, #0
   19a30:	str	r2, [sp, #4]
   19a34:	blt	19bfc <argp_parse@@Base+0x2058>
   19a38:	add	r5, r5, #1
   19a3c:	sub	r8, r5, r8
   19a40:	adds	r8, r6, r8
   19a44:	mov	r4, fp
   19a48:	bcc	197e4 <argp_parse@@Base+0x1c40>
   19a4c:	mov	r5, r8
   19a50:	add	r5, r5, #1
   19a54:	cmp	r5, r6
   19a58:	bls	19a64 <argp_parse@@Base+0x1ec0>
   19a5c:	mov	r8, r5
   19a60:	b	19864 <argp_parse@@Base+0x1cc0>
   19a64:	cmp	r8, r4
   19a68:	bcs	19aa0 <argp_parse@@Base+0x1efc>
   19a6c:	add	r5, r8, #1
   19a70:	b	19a94 <argp_parse@@Base+0x1ef0>
   19a74:	bl	112d4 <__ctype_b_loc@plt>
   19a78:	ldrb	r3, [r5]
   19a7c:	add	r5, r5, #1
   19a80:	lsl	r3, r3, #1
   19a84:	ldr	r2, [r0]
   19a88:	ldrh	r3, [r2, r3]
   19a8c:	tst	r3, #1
   19a90:	bne	19ab0 <argp_parse@@Base+0x1f0c>
   19a94:	cmp	r5, r4
   19a98:	mov	r8, r5
   19a9c:	bne	19a74 <argp_parse@@Base+0x1ed0>
   19aa0:	cmp	r8, r4
   19aa4:	beq	19b84 <argp_parse@@Base+0x1fe0>
   19aa8:	bl	112d4 <__ctype_b_loc@plt>
   19aac:	ldr	r2, [r0]
   19ab0:	mov	r5, r8
   19ab4:	ldrb	r3, [r5, #1]!
   19ab8:	lsl	r3, r3, #1
   19abc:	ldrh	r3, [r2, r3]
   19ac0:	tst	r3, #1
   19ac4:	bne	19ab4 <argp_parse@@Base+0x1f10>
   19ac8:	b	19864 <argp_parse@@Base+0x1cc0>
   19acc:	cmp	r4, fp
   19ad0:	str	r3, [sp]
   19ad4:	bcs	19bf8 <argp_parse@@Base+0x2054>
   19ad8:	sub	r0, r5, r8
   19adc:	sub	r2, fp, r4
   19ae0:	add	r0, r6, r0
   19ae4:	mov	r1, r4
   19ae8:	bl	11178 <memmove@plt>
   19aec:	ldr	r2, [r7, #20]
   19af0:	ldr	fp, [r7, #28]
   19af4:	sub	r5, r5, r2
   19af8:	add	r5, r6, r5
   19afc:	mov	r3, #0
   19b00:	sub	r4, r5, r4
   19b04:	str	r3, [r7, #20]
   19b08:	ldr	r3, [sp]
   19b0c:	sub	fp, fp, r4
   19b10:	add	r6, r6, r3
   19b14:	str	fp, [r7, #28]
   19b18:	b	196cc <argp_parse@@Base+0x1b28>
   19b1c:	add	r2, r4, sl
   19b20:	sub	r2, r2, r5
   19b24:	mov	r1, r5
   19b28:	mov	r0, r6
   19b2c:	bl	11178 <memmove@plt>
   19b30:	ldr	r3, [r7, #12]
   19b34:	b	1993c <argp_parse@@Base+0x1d98>
   19b38:	add	r5, r6, r4
   19b3c:	sub	r2, fp, r6
   19b40:	mov	r1, r6
   19b44:	mov	r0, r5
   19b48:	bl	11178 <memmove@plt>
   19b4c:	ldr	r3, [r7, #28]
   19b50:	mov	r0, r6
   19b54:	add	r3, r3, r4
   19b58:	str	r3, [r7, #28]
   19b5c:	mov	r2, r4
   19b60:	mov	r1, r9
   19b64:	bl	11358 <memset@plt>
   19b68:	mov	r6, r5
   19b6c:	ldr	fp, [r7, #28]
   19b70:	mov	r8, r4
   19b74:	str	r4, [r7, #20]
   19b78:	b	1974c <argp_parse@@Base+0x1ba8>
   19b7c:	add	r8, r2, #1
   19b80:	b	19864 <argp_parse@@Base+0x1cc0>
   19b84:	mov	r3, #0
   19b88:	str	r3, [r7, #20]
   19b8c:	add	r6, r8, #1
   19b90:	ldr	fp, [r7, #28]
   19b94:	b	196cc <argp_parse@@Base+0x1b28>
   19b98:	ldr	r2, [r7, #32]
   19b9c:	sub	r2, r2, r5
   19ba0:	cmp	r3, r2
   19ba4:	ble	19910 <argp_parse@@Base+0x1d6c>
   19ba8:	b	199a4 <argp_parse@@Base+0x1e00>
   19bac:	sub	fp, fp, r5
   19bb0:	mov	r2, fp
   19bb4:	mov	r1, r5
   19bb8:	add	r0, r8, r0
   19bbc:	bl	11178 <memmove@plt>
   19bc0:	ldr	r2, [r7, #12]
   19bc4:	mov	r3, #10
   19bc8:	add	r5, r2, #1
   19bcc:	add	r5, r8, r5
   19bd0:	add	fp, r5, fp
   19bd4:	sub	sl, fp, r6
   19bd8:	mov	r4, r6
   19bdc:	sub	fp, r5, r6
   19be0:	strb	r3, [r8]
   19be4:	add	r6, r8, #1
   19be8:	b	19904 <argp_parse@@Base+0x1d60>
   19bec:	mov	r1, #10
   19bf0:	bl	11394 <__overflow@plt>
   19bf4:	b	198e8 <argp_parse@@Base+0x1d44>
   19bf8:	add	r3, r8, sl
   19bfc:	sub	r5, r5, r3
   19c00:	add	fp, fp, r5
   19c04:	str	fp, [r7, #28]
   19c08:	str	r3, [r7, #20]
   19c0c:	b	197ac <argp_parse@@Base+0x1c08>
   19c10:	str	r3, [r7, #20]
   19c14:	ldr	fp, [r7, #28]
   19c18:	b	197ac <argp_parse@@Base+0x1c08>
   19c1c:	push	{r4, lr}
   19c20:	mov	r4, r0
   19c24:	bl	196ac <argp_parse@@Base+0x1b08>
   19c28:	ldr	r2, [r4, #28]
   19c2c:	ldr	r0, [r4, #24]
   19c30:	cmp	r2, r0
   19c34:	bls	19c4c <argp_parse@@Base+0x20a8>
   19c38:	sub	r2, r2, r0
   19c3c:	ldr	r3, [r4]
   19c40:	mov	r1, #1
   19c44:	bl	111cc <fwrite_unlocked@plt>
   19c48:	ldr	r0, [r4, #24]
   19c4c:	bl	18a3c <argp_parse@@Base+0xe98>
   19c50:	mov	r0, r4
   19c54:	pop	{r4, lr}
   19c58:	b	18a3c <argp_parse@@Base+0xe98>
   19c5c:	push	{r4, r5, r6, lr}
   19c60:	mov	r4, r0
   19c64:	mov	r5, r1
   19c68:	bl	196ac <argp_parse@@Base+0x1b08>
   19c6c:	ldr	r3, [r4, #24]
   19c70:	ldr	r2, [r4, #28]
   19c74:	mov	r0, r3
   19c78:	sub	r2, r2, r3
   19c7c:	mov	r1, #1
   19c80:	ldr	r3, [r4]
   19c84:	bl	111cc <fwrite_unlocked@plt>
   19c88:	ldr	r2, [r4, #28]
   19c8c:	ldr	r3, [r4, #24]
   19c90:	sub	r1, r2, r3
   19c94:	cmp	r0, r1
   19c98:	bne	19cdc <argp_parse@@Base+0x2138>
   19c9c:	ldr	r1, [r4, #32]
   19ca0:	mov	r2, #0
   19ca4:	sub	r1, r1, r3
   19ca8:	cmp	r1, r5
   19cac:	str	r3, [r4, #28]
   19cb0:	str	r2, [r4, #16]
   19cb4:	movcs	r3, #1
   19cb8:	bcs	19cd4 <argp_parse@@Base+0x2130>
   19cbc:	adds	r5, r1, r5
   19cc0:	bcc	19d0c <argp_parse@@Base+0x2168>
   19cc4:	bl	11328 <__errno_location@plt>
   19cc8:	mov	r3, #0
   19ccc:	mov	r2, #12
   19cd0:	str	r2, [r0]
   19cd4:	mov	r0, r3
   19cd8:	pop	{r4, r5, r6, pc}
   19cdc:	ldr	r1, [r4, #16]
   19ce0:	sub	r2, r2, r0
   19ce4:	sub	r1, r1, r0
   19ce8:	str	r2, [r4, #28]
   19cec:	str	r1, [r4, #16]
   19cf0:	sub	r2, r2, r3
   19cf4:	add	r1, r3, r0
   19cf8:	mov	r0, r3
   19cfc:	bl	11178 <memmove@plt>
   19d00:	mov	r3, #0
   19d04:	mov	r0, r3
   19d08:	pop	{r4, r5, r6, pc}
   19d0c:	mov	r0, r3
   19d10:	mov	r1, r5
   19d14:	bl	195d4 <argp_parse@@Base+0x1a30>
   19d18:	cmp	r0, #0
   19d1c:	beq	19cc4 <argp_parse@@Base+0x2120>
   19d20:	add	r1, r0, r5
   19d24:	mov	r3, #1
   19d28:	str	r0, [r4, #24]
   19d2c:	str	r0, [r4, #28]
   19d30:	str	r1, [r4, #32]
   19d34:	mov	r0, r3
   19d38:	pop	{r4, r5, r6, pc}
   19d3c:	ldr	r3, [r0, #32]
   19d40:	ldr	r2, [r0, #28]
   19d44:	sub	r3, r3, r2
   19d48:	cmp	r3, r1
   19d4c:	bcc	19d58 <argp_parse@@Base+0x21b4>
   19d50:	mov	r0, #1
   19d54:	bx	lr
   19d58:	b	19c5c <argp_parse@@Base+0x20b8>
   19d5c:	push	{r1, r2, r3}
   19d60:	mov	r1, #150	; 0x96
   19d64:	push	{r4, r5, r6, r7, lr}
   19d68:	sub	sp, sp, #8
   19d6c:	mov	r5, r0
   19d70:	ldr	r7, [sp, #28]
   19d74:	add	r6, sp, #32
   19d78:	ldr	r3, [r5, #32]
   19d7c:	ldr	r0, [r5, #28]
   19d80:	sub	r2, r3, r0
   19d84:	cmp	r1, r2
   19d88:	bhi	19dcc <argp_parse@@Base+0x2228>
   19d8c:	sub	r4, r3, r0
   19d90:	mov	r1, r4
   19d94:	mov	r3, r6
   19d98:	mov	r2, r7
   19d9c:	str	r6, [sp, #4]
   19da0:	bl	1140c <vsnprintf@plt>
   19da4:	cmp	r4, r0
   19da8:	addls	r1, r0, #1
   19dac:	bls	19d78 <argp_parse@@Base+0x21d4>
   19db0:	ldr	r3, [r5, #28]
   19db4:	add	r3, r3, r0
   19db8:	str	r3, [r5, #28]
   19dbc:	add	sp, sp, #8
   19dc0:	pop	{r4, r5, r6, r7, lr}
   19dc4:	add	sp, sp, #12
   19dc8:	bx	lr
   19dcc:	mov	r0, r5
   19dd0:	bl	19c5c <argp_parse@@Base+0x20b8>
   19dd4:	cmp	r0, #0
   19dd8:	ldrne	r3, [r5, #32]
   19ddc:	ldrne	r0, [r5, #28]
   19de0:	bne	19d8c <argp_parse@@Base+0x21e8>
   19de4:	mvn	r0, #0
   19de8:	add	sp, sp, #8
   19dec:	pop	{r4, r5, r6, r7, lr}
   19df0:	add	sp, sp, #12
   19df4:	bx	lr
   19df8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19dfc:	ldr	r4, [r1, #32]
   19e00:	ldr	r8, [r1, #28]
   19e04:	ldr	r7, [r1]
   19e08:	add	r6, r0, r4, lsl #2
   19e0c:	mov	r2, r8
   19e10:	mov	r5, r7
   19e14:	cmp	r5, r4
   19e18:	movle	r3, #0
   19e1c:	movgt	r3, #1
   19e20:	cmp	r2, r4
   19e24:	movge	r3, #0
   19e28:	cmp	r3, #0
   19e2c:	beq	19ea0 <argp_parse@@Base+0x22fc>
   19e30:	sub	r3, r5, r4
   19e34:	sub	sl, r4, r2
   19e38:	cmp	r3, sl
   19e3c:	ble	19e70 <argp_parse@@Base+0x22cc>
   19e40:	sub	r5, r5, sl
   19e44:	add	sl, sl, r2
   19e48:	add	ip, r0, r5, lsl #2
   19e4c:	add	sl, r0, sl, lsl #2
   19e50:	add	r3, r0, r2, lsl #2
   19e54:	ldr	r9, [ip]
   19e58:	ldr	lr, [r3]
   19e5c:	str	r9, [r3], #4
   19e60:	cmp	sl, r3
   19e64:	str	lr, [ip], #4
   19e68:	bne	19e54 <argp_parse@@Base+0x22b0>
   19e6c:	b	19e14 <argp_parse@@Base+0x2270>
   19e70:	add	sl, r3, r2
   19e74:	add	r3, r0, r2, lsl #2
   19e78:	add	r9, r0, sl, lsl #2
   19e7c:	mov	r2, r6
   19e80:	ldr	lr, [r2]
   19e84:	ldr	ip, [r3]
   19e88:	str	lr, [r3], #4
   19e8c:	cmp	r3, r9
   19e90:	str	ip, [r2], #4
   19e94:	bne	19e80 <argp_parse@@Base+0x22dc>
   19e98:	mov	r2, sl
   19e9c:	b	19e14 <argp_parse@@Base+0x2270>
   19ea0:	sub	r4, r7, r4
   19ea4:	add	r8, r4, r8
   19ea8:	str	r8, [r1, #28]
   19eac:	str	r7, [r1, #32]
   19eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19eb8:	sub	sp, sp, #44	; 0x2c
   19ebc:	str	r1, [sp, #20]
   19ec0:	ldr	r1, [sp, #88]	; 0x58
   19ec4:	str	r0, [sp, #24]
   19ec8:	str	r2, [sp, #28]
   19ecc:	ldr	r8, [r1, #20]
   19ed0:	str	r3, [sp, #12]
   19ed4:	mov	r7, r8
   19ed8:	ldrb	r5, [r8]
   19edc:	cmp	r5, #61	; 0x3d
   19ee0:	cmpne	r5, #0
   19ee4:	movne	r5, #1
   19ee8:	moveq	r5, #0
   19eec:	beq	19f04 <argp_parse@@Base+0x2360>
   19ef0:	ldrb	r3, [r7, #1]!
   19ef4:	cmp	r3, #0
   19ef8:	cmpne	r3, #61	; 0x3d
   19efc:	bne	19ef0 <argp_parse@@Base+0x234c>
   19f00:	sub	r5, r7, r8
   19f04:	ldr	r3, [sp, #12]
   19f08:	ldr	sl, [r3]
   19f0c:	cmp	sl, #0
   19f10:	beq	1a1c4 <argp_parse@@Base+0x2620>
   19f14:	mov	fp, r3
   19f18:	mov	r4, sl
   19f1c:	mov	r6, #0
   19f20:	mov	r2, r5
   19f24:	mov	r1, r8
   19f28:	mov	r0, r4
   19f2c:	bl	11448 <strncmp@plt>
   19f30:	mov	r9, fp
   19f34:	cmp	r0, #0
   19f38:	mov	r0, r4
   19f3c:	bne	19f4c <argp_parse@@Base+0x23a8>
   19f40:	bl	11304 <strlen@plt>
   19f44:	cmp	r0, r5
   19f48:	beq	19fd8 <argp_parse@@Base+0x2434>
   19f4c:	ldr	r4, [fp, #16]!
   19f50:	add	r6, r6, #1
   19f54:	cmp	r4, #0
   19f58:	bne	19f20 <argp_parse@@Base+0x237c>
   19f5c:	ldr	r3, [sp, #12]
   19f60:	ldr	fp, [sp, #88]	; 0x58
   19f64:	mov	r0, sl
   19f68:	mov	r1, r8
   19f6c:	mov	r9, r4
   19f70:	mov	sl, r4
   19f74:	mov	r8, r3
   19f78:	mvn	r2, #0
   19f7c:	str	r4, [sp, #36]	; 0x24
   19f80:	str	r4, [sp, #16]
   19f84:	str	r2, [sp, #32]
   19f88:	mov	r2, r5
   19f8c:	bl	11448 <strncmp@plt>
   19f90:	cmp	r0, #0
   19f94:	bne	19fb4 <argp_parse@@Base+0x2410>
   19f98:	cmp	r9, #0
   19f9c:	beq	1a234 <argp_parse@@Base+0x2690>
   19fa0:	ldr	r3, [sp, #84]	; 0x54
   19fa4:	cmp	r3, #0
   19fa8:	beq	1a07c <argp_parse@@Base+0x24d8>
   19fac:	cmp	r4, #0
   19fb0:	beq	1a0b0 <argp_parse@@Base+0x250c>
   19fb4:	ldr	r0, [r8, #16]!
   19fb8:	add	sl, sl, #1
   19fbc:	cmp	r0, #0
   19fc0:	beq	1a0e4 <argp_parse@@Base+0x2540>
   19fc4:	ldr	r1, [fp, #20]
   19fc8:	b	19f88 <argp_parse@@Base+0x23e4>
   19fcc:	cmp	r9, #0
   19fd0:	beq	1a1c4 <argp_parse@@Base+0x2620>
   19fd4:	ldr	r6, [sp, #32]
   19fd8:	ldr	r3, [sp, #88]	; 0x58
   19fdc:	ldr	r0, [sp, #88]	; 0x58
   19fe0:	mov	r1, #0
   19fe4:	ldr	r2, [r3]
   19fe8:	str	r1, [r0, #20]
   19fec:	add	r3, r2, #1
   19ff0:	str	r3, [r0]
   19ff4:	ldrb	r1, [r7]
   19ff8:	cmp	r1, #0
   19ffc:	bne	1a03c <argp_parse@@Base+0x2498>
   1a000:	ldr	r1, [r9, #4]
   1a004:	cmp	r1, #1
   1a008:	beq	1a240 <argp_parse@@Base+0x269c>
   1a00c:	ldr	r3, [sp, #80]	; 0x50
   1a010:	ldr	r2, [r9, #8]
   1a014:	cmp	r3, #0
   1a018:	strne	r6, [r3]
   1a01c:	cmp	r2, #0
   1a020:	movne	r3, #0
   1a024:	ldreq	r3, [r9, #12]
   1a028:	ldrne	r1, [r9, #12]
   1a02c:	strne	r1, [r2]
   1a030:	mov	r0, r3
   1a034:	add	sp, sp, #44	; 0x2c
   1a038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a03c:	ldr	r3, [r9, #4]
   1a040:	cmp	r3, #0
   1a044:	movne	r3, r0
   1a048:	addne	r7, r7, #1
   1a04c:	strne	r7, [r3, #12]
   1a050:	bne	1a00c <argp_parse@@Base+0x2468>
   1a054:	ldr	r3, [sp, #92]	; 0x5c
   1a058:	cmp	r3, #0
   1a05c:	bne	1a18c <argp_parse@@Base+0x25e8>
   1a060:	ldr	r1, [sp, #88]	; 0x58
   1a064:	ldr	r2, [r9, #12]
   1a068:	mov	r3, #63	; 0x3f
   1a06c:	str	r2, [r1, #8]
   1a070:	mov	r0, r3
   1a074:	add	sp, sp, #44	; 0x2c
   1a078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a07c:	ldr	r2, [r9, #4]
   1a080:	ldr	r3, [r8, #4]
   1a084:	cmp	r2, r3
   1a088:	bne	19fac <argp_parse@@Base+0x2408>
   1a08c:	ldr	r2, [r9, #8]
   1a090:	ldr	r3, [r8, #8]
   1a094:	cmp	r2, r3
   1a098:	bne	19fac <argp_parse@@Base+0x2408>
   1a09c:	ldr	r2, [r9, #12]
   1a0a0:	ldr	r3, [r8, #12]
   1a0a4:	cmp	r2, r3
   1a0a8:	bne	19fac <argp_parse@@Base+0x2408>
   1a0ac:	b	19fb4 <argp_parse@@Base+0x2410>
   1a0b0:	ldr	r3, [sp, #92]	; 0x5c
   1a0b4:	cmp	r3, #0
   1a0b8:	ldr	r3, [sp, #16]
   1a0bc:	beq	1a17c <argp_parse@@Base+0x25d8>
   1a0c0:	cmp	r3, #0
   1a0c4:	beq	1a398 <argp_parse@@Base+0x27f4>
   1a0c8:	ldr	r3, [sp, #16]
   1a0cc:	ldr	r0, [r8, #16]!
   1a0d0:	mov	r2, #1
   1a0d4:	cmp	r0, #0
   1a0d8:	strb	r2, [r3, sl]
   1a0dc:	add	sl, sl, #1
   1a0e0:	bne	19fc4 <argp_parse@@Base+0x2420>
   1a0e4:	ldr	r3, [sp, #16]
   1a0e8:	cmp	r3, #0
   1a0ec:	cmpeq	r4, #0
   1a0f0:	beq	19fcc <argp_parse@@Base+0x2428>
   1a0f4:	ldr	r3, [sp, #92]	; 0x5c
   1a0f8:	cmp	r3, #0
   1a0fc:	beq	1a27c <argp_parse@@Base+0x26d8>
   1a100:	cmp	r4, #0
   1a104:	bne	1a304 <argp_parse@@Base+0x2760>
   1a108:	ldr	r5, [pc, #716]	; 1a3dc <argp_parse@@Base+0x2838>
   1a10c:	ldr	r8, [sp, #16]
   1a110:	ldr	r7, [pc, #712]	; 1a3e0 <argp_parse@@Base+0x283c>
   1a114:	ldr	r0, [r5]
   1a118:	bl	11400 <flockfile@plt>
   1a11c:	ldr	r3, [sp, #20]
   1a120:	ldr	r0, [r5]
   1a124:	ldr	r1, [pc, #696]	; 1a3e4 <argp_parse@@Base+0x2840>
   1a128:	ldr	r2, [r3]
   1a12c:	ldr	r3, [sp, #88]	; 0x58
   1a130:	add	r6, r8, r6
   1a134:	ldr	r3, [r3, #20]
   1a138:	str	r3, [sp]
   1a13c:	ldr	r3, [sp, #96]	; 0x60
   1a140:	bl	1131c <fprintf@plt>
   1a144:	ldr	r9, [sp, #12]
   1a148:	b	1a158 <argp_parse@@Base+0x25b4>
   1a14c:	cmp	r8, r6
   1a150:	add	r4, r4, #1
   1a154:	beq	1a268 <argp_parse@@Base+0x26c4>
   1a158:	ldrb	r3, [r8], #1
   1a15c:	cmp	r3, #0
   1a160:	beq	1a14c <argp_parse@@Base+0x25a8>
   1a164:	ldr	r3, [r9, r4, lsl #4]
   1a168:	ldr	r2, [sp, #96]	; 0x60
   1a16c:	mov	r1, r7
   1a170:	ldr	r0, [r5]
   1a174:	bl	1131c <fprintf@plt>
   1a178:	b	1a14c <argp_parse@@Base+0x25a8>
   1a17c:	cmp	r3, #0
   1a180:	mov	r4, #1
   1a184:	bne	1a0c8 <argp_parse@@Base+0x2524>
   1a188:	b	19fb4 <argp_parse@@Base+0x2410>
   1a18c:	ldr	r3, [sp, #20]
   1a190:	ldr	r1, [pc, #580]	; 1a3dc <argp_parse@@Base+0x2838>
   1a194:	ldr	r2, [r3]
   1a198:	ldr	r3, [r9]
   1a19c:	ldr	r0, [r1]
   1a1a0:	str	r3, [sp]
   1a1a4:	ldr	r1, [pc, #572]	; 1a3e8 <argp_parse@@Base+0x2844>
   1a1a8:	ldr	r3, [sp, #96]	; 0x60
   1a1ac:	bl	1131c <fprintf@plt>
   1a1b0:	ldr	r1, [sp, #88]	; 0x58
   1a1b4:	ldr	r2, [r9, #12]
   1a1b8:	mov	r3, #63	; 0x3f
   1a1bc:	str	r2, [r1, #8]
   1a1c0:	b	1a070 <argp_parse@@Base+0x24cc>
   1a1c4:	ldr	r3, [sp, #84]	; 0x54
   1a1c8:	cmp	r3, #0
   1a1cc:	bne	1a358 <argp_parse@@Base+0x27b4>
   1a1d0:	ldr	r3, [sp, #92]	; 0x5c
   1a1d4:	cmp	r3, #0
   1a1d8:	beq	1a204 <argp_parse@@Base+0x2660>
   1a1dc:	ldr	r3, [sp, #20]
   1a1e0:	ldr	r1, [pc, #500]	; 1a3dc <argp_parse@@Base+0x2838>
   1a1e4:	ldr	r2, [r3]
   1a1e8:	ldr	r3, [sp, #88]	; 0x58
   1a1ec:	ldr	r0, [r1]
   1a1f0:	ldr	r1, [pc, #500]	; 1a3ec <argp_parse@@Base+0x2848>
   1a1f4:	ldr	r3, [r3, #20]
   1a1f8:	str	r3, [sp]
   1a1fc:	ldr	r3, [sp, #96]	; 0x60
   1a200:	bl	1131c <fprintf@plt>
   1a204:	ldr	r3, [sp, #88]	; 0x58
   1a208:	ldr	r1, [sp, #88]	; 0x58
   1a20c:	mov	r2, #0
   1a210:	ldr	r3, [r3]
   1a214:	str	r2, [r1, #20]
   1a218:	add	r3, r3, #1
   1a21c:	str	r3, [r1]
   1a220:	mov	r3, #63	; 0x3f
   1a224:	mov	r0, r3
   1a228:	str	r2, [r1, #8]
   1a22c:	add	sp, sp, #44	; 0x2c
   1a230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a234:	str	sl, [sp, #32]
   1a238:	mov	r9, r8
   1a23c:	b	19fb4 <argp_parse@@Base+0x2410>
   1a240:	ldr	r1, [sp, #24]
   1a244:	cmp	r3, r1
   1a248:	bge	1a2d4 <argp_parse@@Base+0x2730>
   1a24c:	ldr	r1, [sp, #20]
   1a250:	add	r2, r2, #2
   1a254:	ldr	r3, [r1, r3, lsl #2]
   1a258:	ldr	r1, [sp, #88]	; 0x58
   1a25c:	str	r3, [r1, #12]
   1a260:	str	r2, [r1]
   1a264:	b	1a00c <argp_parse@@Base+0x2468>
   1a268:	ldr	r1, [r5]
   1a26c:	mov	r0, #10
   1a270:	bl	113d0 <fputc@plt>
   1a274:	ldr	r0, [r5]
   1a278:	bl	11244 <funlockfile@plt>
   1a27c:	ldr	r3, [sp, #36]	; 0x24
   1a280:	cmp	r3, #0
   1a284:	beq	1a290 <argp_parse@@Base+0x26ec>
   1a288:	ldr	r0, [sp, #16]
   1a28c:	bl	18a3c <argp_parse@@Base+0xe98>
   1a290:	ldr	r3, [sp, #88]	; 0x58
   1a294:	ldr	r4, [r3, #20]
   1a298:	mov	r0, r4
   1a29c:	bl	11304 <strlen@plt>
   1a2a0:	ldr	r3, [sp, #88]	; 0x58
   1a2a4:	ldr	r1, [sp, #88]	; 0x58
   1a2a8:	mov	r2, #0
   1a2ac:	ldr	r3, [r3]
   1a2b0:	str	r2, [r1, #8]
   1a2b4:	add	r3, r3, #1
   1a2b8:	str	r3, [r1]
   1a2bc:	mov	r3, #63	; 0x3f
   1a2c0:	add	r0, r4, r0
   1a2c4:	str	r0, [r1, #20]
   1a2c8:	mov	r0, r3
   1a2cc:	add	sp, sp, #44	; 0x2c
   1a2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2d4:	ldr	r3, [sp, #92]	; 0x5c
   1a2d8:	cmp	r3, #0
   1a2dc:	bne	1a330 <argp_parse@@Base+0x278c>
   1a2e0:	ldr	r2, [sp, #88]	; 0x58
   1a2e4:	ldr	r3, [r9, #12]
   1a2e8:	str	r3, [r2, #8]
   1a2ec:	ldr	r3, [sp, #28]
   1a2f0:	ldrb	r3, [r3]
   1a2f4:	cmp	r3, #58	; 0x3a
   1a2f8:	movne	r3, #63	; 0x3f
   1a2fc:	moveq	r3, #58	; 0x3a
   1a300:	b	1a030 <argp_parse@@Base+0x248c>
   1a304:	ldr	r3, [sp, #20]
   1a308:	ldr	r1, [pc, #204]	; 1a3dc <argp_parse@@Base+0x2838>
   1a30c:	ldr	r2, [r3]
   1a310:	ldr	r3, [sp, #88]	; 0x58
   1a314:	ldr	r0, [r1]
   1a318:	ldr	r1, [pc, #208]	; 1a3f0 <argp_parse@@Base+0x284c>
   1a31c:	ldr	r3, [r3, #20]
   1a320:	str	r3, [sp]
   1a324:	ldr	r3, [sp, #96]	; 0x60
   1a328:	bl	1131c <fprintf@plt>
   1a32c:	b	1a27c <argp_parse@@Base+0x26d8>
   1a330:	ldr	r3, [sp, #20]
   1a334:	ldr	r1, [pc, #160]	; 1a3dc <argp_parse@@Base+0x2838>
   1a338:	ldr	r2, [r3]
   1a33c:	ldr	r3, [r9]
   1a340:	ldr	r0, [r1]
   1a344:	str	r3, [sp]
   1a348:	ldr	r1, [pc, #164]	; 1a3f4 <argp_parse@@Base+0x2850>
   1a34c:	ldr	r3, [sp, #96]	; 0x60
   1a350:	bl	1131c <fprintf@plt>
   1a354:	b	1a2e0 <argp_parse@@Base+0x273c>
   1a358:	ldr	r3, [sp, #88]	; 0x58
   1a35c:	ldr	r2, [sp, #20]
   1a360:	ldr	r3, [r3]
   1a364:	ldr	r3, [r2, r3, lsl #2]
   1a368:	ldrb	r3, [r3, #1]
   1a36c:	cmp	r3, #45	; 0x2d
   1a370:	beq	1a1d0 <argp_parse@@Base+0x262c>
   1a374:	ldr	r3, [sp, #88]	; 0x58
   1a378:	ldr	r0, [sp, #28]
   1a37c:	ldr	r3, [r3, #20]
   1a380:	ldrb	r1, [r3]
   1a384:	bl	11310 <strchr@plt>
   1a388:	cmp	r0, #0
   1a38c:	beq	1a1d0 <argp_parse@@Base+0x262c>
   1a390:	mvn	r3, #0
   1a394:	b	1a030 <argp_parse@@Base+0x248c>
   1a398:	mov	r0, r6
   1a39c:	bl	195a8 <argp_parse@@Base+0x1a04>
   1a3a0:	subs	r3, r0, #0
   1a3a4:	str	r3, [sp, #16]
   1a3a8:	beq	1a3d4 <argp_parse@@Base+0x2830>
   1a3ac:	mov	r2, r6
   1a3b0:	mov	r1, #0
   1a3b4:	bl	11358 <memset@plt>
   1a3b8:	mov	r3, #1
   1a3bc:	str	r3, [sp, #36]	; 0x24
   1a3c0:	ldr	r2, [sp, #32]
   1a3c4:	ldr	r3, [sp, #16]
   1a3c8:	mov	r1, #1
   1a3cc:	strb	r1, [r3, r2]
   1a3d0:	b	1a0c8 <argp_parse@@Base+0x2524>
   1a3d4:	mov	r4, #1
   1a3d8:	b	19fb4 <argp_parse@@Base+0x2410>
   1a3dc:	andeq	sp, r2, r8, lsr #12
   1a3e0:	andeq	ip, r1, r8, lsl #16
   1a3e4:	ldrdeq	ip, [r1], -r8
   1a3e8:	andeq	ip, r1, r0, lsr r8
   1a3ec:	andeq	ip, r1, r0, lsl r8
   1a3f0:			; <UNDEFINED> instruction: 0x0001c7b8
   1a3f4:	andeq	ip, r1, r0, ror #16
   1a3f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3fc:	sub	sp, sp, #36	; 0x24
   1a400:	subs	r6, r0, #0
   1a404:	ldr	r4, [sp, #80]	; 0x50
   1a408:	ldr	r8, [r4, #4]
   1a40c:	ble	1a5e8 <argp_parse@@Base+0x2a44>
   1a410:	mov	sl, r3
   1a414:	ldr	r3, [r4]
   1a418:	mov	r7, r2
   1a41c:	mov	r2, #0
   1a420:	cmp	r3, r2
   1a424:	mov	r9, r1
   1a428:	str	r2, [r4, #12]
   1a42c:	beq	1a670 <argp_parse@@Base+0x2acc>
   1a430:	ldr	r2, [r4, #16]
   1a434:	cmp	r2, #0
   1a438:	bne	1a5f4 <argp_parse@@Base+0x2a50>
   1a43c:	mov	r5, #0
   1a440:	str	r3, [r4, #32]
   1a444:	str	r3, [r4, #28]
   1a448:	str	r5, [r4, #20]
   1a44c:	ldrb	r3, [r7]
   1a450:	cmp	r3, #45	; 0x2d
   1a454:	moveq	r3, #2
   1a458:	addeq	r7, r7, #1
   1a45c:	streq	r3, [r4, #24]
   1a460:	beq	1a488 <argp_parse@@Base+0x28e4>
   1a464:	cmp	r3, #43	; 0x2b
   1a468:	streq	r5, [r4, #24]
   1a46c:	addeq	r7, r7, #1
   1a470:	beq	1a488 <argp_parse@@Base+0x28e4>
   1a474:	ldr	r3, [sp, #84]	; 0x54
   1a478:	cmp	r3, #0
   1a47c:	beq	1a710 <argp_parse@@Base+0x2b6c>
   1a480:	mov	r3, #0
   1a484:	str	r3, [r4, #24]
   1a488:	mov	r3, #1
   1a48c:	str	r3, [r4, #16]
   1a490:	ldrb	r3, [r7]
   1a494:	cmp	r3, #58	; 0x3a
   1a498:	moveq	r8, #0
   1a49c:	cmp	r5, #0
   1a4a0:	beq	1a554 <argp_parse@@Base+0x29b0>
   1a4a4:	ldrb	r3, [r5]
   1a4a8:	cmp	r3, #0
   1a4ac:	beq	1a554 <argp_parse@@Base+0x29b0>
   1a4b0:	add	r3, r5, #1
   1a4b4:	str	r3, [r4, #20]
   1a4b8:	ldrb	fp, [r5]
   1a4bc:	mov	r0, r7
   1a4c0:	str	r3, [sp, #28]
   1a4c4:	mov	r1, fp
   1a4c8:	bl	11310 <strchr@plt>
   1a4cc:	ldrb	r1, [r5, #1]
   1a4d0:	ldr	r3, [sp, #28]
   1a4d4:	cmp	r1, #0
   1a4d8:	ldreq	r1, [r4]
   1a4dc:	addeq	r1, r1, #1
   1a4e0:	streq	r1, [r4]
   1a4e4:	sub	r1, fp, #58	; 0x3a
   1a4e8:	mov	r2, r0
   1a4ec:	cmp	r2, #0
   1a4f0:	cmpne	r1, #1
   1a4f4:	mov	r0, fp
   1a4f8:	bls	1a640 <argp_parse@@Base+0x2a9c>
   1a4fc:	ldrb	r1, [r2]
   1a500:	cmp	r1, #87	; 0x57
   1a504:	ldrb	r1, [r2, #1]
   1a508:	beq	1a794 <argp_parse@@Base+0x2bf0>
   1a50c:	cmp	r1, #58	; 0x3a
   1a510:	bne	1a638 <argp_parse@@Base+0x2a94>
   1a514:	ldrb	r2, [r2, #2]
   1a518:	cmp	r2, #58	; 0x3a
   1a51c:	ldrb	r2, [r5, #1]
   1a520:	beq	1a81c <argp_parse@@Base+0x2c78>
   1a524:	cmp	r2, #0
   1a528:	bne	1a828 <argp_parse@@Base+0x2c84>
   1a52c:	ldr	r3, [r4]
   1a530:	cmp	r6, r3
   1a534:	beq	1a8c8 <argp_parse@@Base+0x2d24>
   1a538:	ldr	r2, [r9, r3, lsl #2]
   1a53c:	add	r3, r3, #1
   1a540:	str	r2, [r4, #12]
   1a544:	str	r3, [r4]
   1a548:	mov	r3, #0
   1a54c:	str	r3, [r4, #20]
   1a550:	b	1a638 <argp_parse@@Base+0x2a94>
   1a554:	ldr	fp, [r4]
   1a558:	ldr	r3, [r4, #32]
   1a55c:	cmp	r3, fp
   1a560:	ldr	r3, [r4, #28]
   1a564:	strgt	fp, [r4, #32]
   1a568:	cmp	fp, r3
   1a56c:	ldr	r3, [r4, #24]
   1a570:	strlt	fp, [r4, #28]
   1a574:	cmp	r3, #1
   1a578:	beq	1a680 <argp_parse@@Base+0x2adc>
   1a57c:	cmp	r6, fp
   1a580:	beq	1a6f8 <argp_parse@@Base+0x2b54>
   1a584:	ldr	r3, [pc, #944]	; 1a93c <argp_parse@@Base+0x2d98>
   1a588:	ldr	r5, [r9, fp, lsl #2]
   1a58c:	mov	r1, r3
   1a590:	mov	r0, r5
   1a594:	str	r3, [sp, #28]
   1a598:	bl	11124 <strcmp@plt>
   1a59c:	ldr	r3, [sp, #28]
   1a5a0:	cmp	r0, #0
   1a5a4:	bne	1a610 <argp_parse@@Base+0x2a6c>
   1a5a8:	ldr	r3, [r4, #28]
   1a5ac:	ldr	r2, [r4, #32]
   1a5b0:	add	fp, fp, #1
   1a5b4:	cmp	r3, r2
   1a5b8:	str	fp, [r4]
   1a5bc:	beq	1a788 <argp_parse@@Base+0x2be4>
   1a5c0:	cmp	fp, r2
   1a5c4:	beq	1a5d8 <argp_parse@@Base+0x2a34>
   1a5c8:	mov	r0, r9
   1a5cc:	mov	r1, r4
   1a5d0:	bl	19df8 <argp_parse@@Base+0x2254>
   1a5d4:	ldr	r3, [r4, #28]
   1a5d8:	cmp	r3, r6
   1a5dc:	str	r6, [r4]
   1a5e0:	str	r6, [r4, #32]
   1a5e4:	strne	r3, [r4]
   1a5e8:	mvn	r0, #0
   1a5ec:	add	sp, sp, #36	; 0x24
   1a5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5f4:	ldrb	r3, [r7]
   1a5f8:	ldr	r5, [r4, #20]
   1a5fc:	sub	r2, r3, #43	; 0x2b
   1a600:	tst	r2, #253	; 0xfd
   1a604:	ldrbeq	r3, [r7, #1]
   1a608:	addeq	r7, r7, #1
   1a60c:	b	1a494 <argp_parse@@Base+0x28f0>
   1a610:	ldrb	r2, [r5]
   1a614:	cmp	r2, #45	; 0x2d
   1a618:	beq	1a73c <argp_parse@@Base+0x2b98>
   1a61c:	ldr	r3, [r4, #24]
   1a620:	cmp	r3, #0
   1a624:	beq	1a5e8 <argp_parse@@Base+0x2a44>
   1a628:	mov	r0, #1
   1a62c:	add	fp, fp, #1
   1a630:	str	fp, [r4]
   1a634:	str	r5, [r4, #12]
   1a638:	add	sp, sp, #36	; 0x24
   1a63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a640:	cmp	r8, #0
   1a644:	beq	1a660 <argp_parse@@Base+0x2abc>
   1a648:	ldr	r1, [pc, #752]	; 1a940 <argp_parse@@Base+0x2d9c>
   1a64c:	ldr	r2, [r9]
   1a650:	mov	r3, fp
   1a654:	ldr	r0, [r1]
   1a658:	ldr	r1, [pc, #740]	; 1a944 <argp_parse@@Base+0x2da0>
   1a65c:	bl	1131c <fprintf@plt>
   1a660:	mov	r0, #63	; 0x3f
   1a664:	str	fp, [r4, #8]
   1a668:	add	sp, sp, #36	; 0x24
   1a66c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a670:	mov	r2, #1
   1a674:	mov	r3, r2
   1a678:	str	r2, [r4]
   1a67c:	b	1a43c <argp_parse@@Base+0x2898>
   1a680:	ldr	r2, [r4, #28]
   1a684:	ldr	r3, [r4, #32]
   1a688:	cmp	r2, r3
   1a68c:	beq	1a80c <argp_parse@@Base+0x2c68>
   1a690:	cmp	fp, r3
   1a694:	beq	1a6a8 <argp_parse@@Base+0x2b04>
   1a698:	mov	r1, r4
   1a69c:	mov	r0, r9
   1a6a0:	bl	19df8 <argp_parse@@Base+0x2254>
   1a6a4:	ldr	r3, [r4]
   1a6a8:	cmp	r6, r3
   1a6ac:	movle	fp, r3
   1a6b0:	ble	1a6ec <argp_parse@@Base+0x2b48>
   1a6b4:	add	r1, r9, r3, lsl #2
   1a6b8:	b	1a6cc <argp_parse@@Base+0x2b28>
   1a6bc:	add	r3, r3, #1
   1a6c0:	cmp	r6, r3
   1a6c4:	str	r3, [r4]
   1a6c8:	beq	1a730 <argp_parse@@Base+0x2b8c>
   1a6cc:	ldr	r2, [r1], #4
   1a6d0:	ldrb	r0, [r2]
   1a6d4:	cmp	r0, #45	; 0x2d
   1a6d8:	bne	1a6bc <argp_parse@@Base+0x2b18>
   1a6dc:	ldrb	r2, [r2, #1]
   1a6e0:	cmp	r2, #0
   1a6e4:	beq	1a6bc <argp_parse@@Base+0x2b18>
   1a6e8:	ldr	fp, [r4]
   1a6ec:	str	r3, [r4, #32]
   1a6f0:	cmp	r6, fp
   1a6f4:	bne	1a584 <argp_parse@@Base+0x29e0>
   1a6f8:	ldr	r3, [r4, #28]
   1a6fc:	ldr	r6, [r4, #32]
   1a700:	mvn	r0, #0
   1a704:	cmp	r3, r6
   1a708:	strne	r3, [r4]
   1a70c:	b	1a5ec <argp_parse@@Base+0x2a48>
   1a710:	ldr	r0, [pc, #560]	; 1a948 <argp_parse@@Base+0x2da4>
   1a714:	bl	11274 <getenv@plt>
   1a718:	ldr	r5, [r4, #20]
   1a71c:	cmp	r0, #0
   1a720:	bne	1a480 <argp_parse@@Base+0x28dc>
   1a724:	mov	r3, #1
   1a728:	str	r3, [r4, #24]
   1a72c:	b	1a488 <argp_parse@@Base+0x28e4>
   1a730:	mov	fp, r6
   1a734:	str	r3, [r4, #32]
   1a738:	b	1a6f0 <argp_parse@@Base+0x2b4c>
   1a73c:	ldrb	r1, [r5, #1]
   1a740:	cmp	r1, #0
   1a744:	beq	1a61c <argp_parse@@Base+0x2a78>
   1a748:	cmp	sl, #0
   1a74c:	beq	1a780 <argp_parse@@Base+0x2bdc>
   1a750:	cmp	r1, #45	; 0x2d
   1a754:	beq	1a88c <argp_parse@@Base+0x2ce8>
   1a758:	ldr	r3, [sp, #76]	; 0x4c
   1a75c:	cmp	r3, #0
   1a760:	beq	1a780 <argp_parse@@Base+0x2bdc>
   1a764:	ldrb	r3, [r5, #2]
   1a768:	cmp	r3, #0
   1a76c:	bne	1a83c <argp_parse@@Base+0x2c98>
   1a770:	mov	r0, r7
   1a774:	bl	11310 <strchr@plt>
   1a778:	cmp	r0, #0
   1a77c:	beq	1a83c <argp_parse@@Base+0x2c98>
   1a780:	add	r5, r5, #1
   1a784:	b	1a4b0 <argp_parse@@Base+0x290c>
   1a788:	mov	r3, fp
   1a78c:	str	fp, [r4, #28]
   1a790:	b	1a5d8 <argp_parse@@Base+0x2a34>
   1a794:	cmp	sl, #0
   1a798:	sub	ip, r1, #59	; 0x3b
   1a79c:	clz	ip, ip
   1a7a0:	lsr	ip, ip, #5
   1a7a4:	moveq	ip, #0
   1a7a8:	cmp	ip, #0
   1a7ac:	beq	1a50c <argp_parse@@Base+0x2968>
   1a7b0:	ldrb	r2, [r5, #1]
   1a7b4:	cmp	r2, #0
   1a7b8:	bne	1a7cc <argp_parse@@Base+0x2c28>
   1a7bc:	ldr	r3, [r4]
   1a7c0:	cmp	r6, r3
   1a7c4:	ldrne	r3, [r9, r3, lsl #2]
   1a7c8:	beq	1a8e8 <argp_parse@@Base+0x2d44>
   1a7cc:	str	r3, [r4, #20]
   1a7d0:	ldr	lr, [pc, #372]	; 1a94c <argp_parse@@Base+0x2da8>
   1a7d4:	ldr	r3, [sp, #72]	; 0x48
   1a7d8:	mov	ip, #0
   1a7dc:	str	r3, [sp]
   1a7e0:	str	r8, [sp, #12]
   1a7e4:	str	r4, [sp, #8]
   1a7e8:	str	lr, [sp, #16]
   1a7ec:	mov	r3, sl
   1a7f0:	str	ip, [r4, #12]
   1a7f4:	mov	r2, r7
   1a7f8:	mov	r1, r9
   1a7fc:	mov	r0, r6
   1a800:	str	ip, [sp, #4]
   1a804:	bl	19eb4 <argp_parse@@Base+0x2310>
   1a808:	b	1a638 <argp_parse@@Base+0x2a94>
   1a80c:	cmp	fp, r3
   1a810:	movne	r3, fp
   1a814:	strne	fp, [r4, #28]
   1a818:	b	1a6a8 <argp_parse@@Base+0x2b04>
   1a81c:	cmp	r2, #0
   1a820:	streq	r2, [r4, #12]
   1a824:	beq	1a548 <argp_parse@@Base+0x29a4>
   1a828:	ldr	r2, [r4]
   1a82c:	str	r3, [r4, #12]
   1a830:	add	r3, r2, #1
   1a834:	str	r3, [r4]
   1a838:	b	1a548 <argp_parse@@Base+0x29a4>
   1a83c:	ldr	r2, [sp, #76]	; 0x4c
   1a840:	add	r5, r5, #1
   1a844:	str	r5, [r4, #20]
   1a848:	ldr	r3, [pc, #256]	; 1a950 <argp_parse@@Base+0x2dac>
   1a84c:	str	r2, [sp, #4]
   1a850:	ldr	r2, [sp, #72]	; 0x48
   1a854:	str	r3, [sp, #16]
   1a858:	str	r2, [sp]
   1a85c:	str	r8, [sp, #12]
   1a860:	str	r4, [sp, #8]
   1a864:	mov	r3, sl
   1a868:	mov	r2, r7
   1a86c:	mov	r1, r9
   1a870:	mov	r0, r6
   1a874:	bl	19eb4 <argp_parse@@Base+0x2310>
   1a878:	cmn	r0, #1
   1a87c:	bne	1a638 <argp_parse@@Base+0x2a94>
   1a880:	ldr	r3, [r4]
   1a884:	ldr	r5, [r9, r3, lsl #2]
   1a888:	b	1a780 <argp_parse@@Base+0x2bdc>
   1a88c:	add	r5, r5, #2
   1a890:	str	r5, [r4, #20]
   1a894:	str	r3, [sp, #16]
   1a898:	ldr	r3, [sp, #76]	; 0x4c
   1a89c:	str	r8, [sp, #12]
   1a8a0:	str	r3, [sp, #4]
   1a8a4:	ldr	r3, [sp, #72]	; 0x48
   1a8a8:	str	r4, [sp, #8]
   1a8ac:	str	r3, [sp]
   1a8b0:	mov	r2, r7
   1a8b4:	mov	r3, sl
   1a8b8:	mov	r1, r9
   1a8bc:	mov	r0, r6
   1a8c0:	bl	19eb4 <argp_parse@@Base+0x2310>
   1a8c4:	b	1a638 <argp_parse@@Base+0x2a94>
   1a8c8:	cmp	r8, #0
   1a8cc:	bne	1a920 <argp_parse@@Base+0x2d7c>
   1a8d0:	str	fp, [r4, #8]
   1a8d4:	ldrb	r0, [r7]
   1a8d8:	cmp	r0, #58	; 0x3a
   1a8dc:	movne	r0, #63	; 0x3f
   1a8e0:	moveq	r0, #58	; 0x3a
   1a8e4:	b	1a548 <argp_parse@@Base+0x29a4>
   1a8e8:	cmp	r8, #0
   1a8ec:	beq	1a908 <argp_parse@@Base+0x2d64>
   1a8f0:	ldr	r1, [pc, #72]	; 1a940 <argp_parse@@Base+0x2d9c>
   1a8f4:	ldr	r2, [r9]
   1a8f8:	mov	r3, fp
   1a8fc:	ldr	r0, [r1]
   1a900:	ldr	r1, [pc, #76]	; 1a954 <argp_parse@@Base+0x2db0>
   1a904:	bl	1131c <fprintf@plt>
   1a908:	str	fp, [r4, #8]
   1a90c:	ldrb	r0, [r7]
   1a910:	cmp	r0, #58	; 0x3a
   1a914:	movne	r0, #63	; 0x3f
   1a918:	moveq	r0, #58	; 0x3a
   1a91c:	b	1a638 <argp_parse@@Base+0x2a94>
   1a920:	ldr	r1, [pc, #24]	; 1a940 <argp_parse@@Base+0x2d9c>
   1a924:	ldr	r2, [r9]
   1a928:	mov	r3, fp
   1a92c:	ldr	r0, [r1]
   1a930:	ldr	r1, [pc, #28]	; 1a954 <argp_parse@@Base+0x2db0>
   1a934:	bl	1131c <fprintf@plt>
   1a938:	b	1a8d0 <argp_parse@@Base+0x2d2c>
   1a93c:	andeq	ip, r1, ip, lsl #6
   1a940:	andeq	sp, r2, r8, lsr #12
   1a944:	muleq	r1, ip, r8
   1a948:	andeq	ip, r1, r8, lsl #17
   1a94c:	andeq	ip, r1, r4, ror #17
   1a950:	muleq	r1, r8, r8
   1a954:			; <UNDEFINED> instruction: 0x0001c8b8
   1a958:	push	{r4, r5, r6, lr}
   1a95c:	sub	sp, sp, #16
   1a960:	ldr	r5, [pc, #84]	; 1a9bc <argp_parse@@Base+0x2e18>
   1a964:	ldr	ip, [sp, #32]
   1a968:	ldr	r4, [pc, #80]	; 1a9c0 <argp_parse@@Base+0x2e1c>
   1a96c:	str	ip, [sp]
   1a970:	ldr	ip, [sp, #40]	; 0x28
   1a974:	ldr	r6, [sp, #36]	; 0x24
   1a978:	ldr	lr, [r5]
   1a97c:	str	ip, [sp, #12]
   1a980:	ldr	ip, [r5, #4]
   1a984:	str	r4, [sp, #8]
   1a988:	str	r6, [sp, #4]
   1a98c:	str	ip, [r4, #4]
   1a990:	str	lr, [r4]
   1a994:	bl	1a3f8 <argp_parse@@Base+0x2854>
   1a998:	ldr	r3, [pc, #36]	; 1a9c4 <argp_parse@@Base+0x2e20>
   1a99c:	ldr	ip, [r4]
   1a9a0:	ldr	r1, [r4, #8]
   1a9a4:	ldr	r2, [r4, #12]
   1a9a8:	str	ip, [r5]
   1a9ac:	str	r1, [r5, #8]
   1a9b0:	str	r2, [r3]
   1a9b4:	add	sp, sp, #16
   1a9b8:	pop	{r4, r5, r6, pc}
   1a9bc:	andeq	sp, r2, r4, lsl r6
   1a9c0:	muleq	r2, ip, r6
   1a9c4:	andeq	sp, r2, r4, ror #13
   1a9c8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a9cc:	mov	r3, #0
   1a9d0:	sub	sp, sp, #20
   1a9d4:	mov	ip, #1
   1a9d8:	str	r3, [sp]
   1a9dc:	stmib	sp, {r3, ip}
   1a9e0:	bl	1a958 <argp_parse@@Base+0x2db4>
   1a9e4:	add	sp, sp, #20
   1a9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9ec:	push	{r4, r5, r6, lr}
   1a9f0:	subs	r4, r2, #0
   1a9f4:	mov	r6, r0
   1a9f8:	mov	r5, r1
   1a9fc:	beq	1aa28 <argp_parse@@Base+0x2e84>
   1aa00:	mov	r1, r4
   1aa04:	mvn	r0, #0
   1aa08:	bl	1aa38 <argp_parse@@Base+0x2e94>
   1aa0c:	cmp	r0, r5
   1aa10:	bcs	1aa28 <argp_parse@@Base+0x2e84>
   1aa14:	bl	11328 <__errno_location@plt>
   1aa18:	mov	r3, #12
   1aa1c:	str	r3, [r0]
   1aa20:	mov	r0, #0
   1aa24:	pop	{r4, r5, r6, pc}
   1aa28:	mul	r1, r5, r4
   1aa2c:	mov	r0, r6
   1aa30:	pop	{r4, r5, r6, lr}
   1aa34:	b	195d4 <argp_parse@@Base+0x1a30>
   1aa38:	subs	r2, r1, #1
   1aa3c:	bxeq	lr
   1aa40:	bcc	1ac18 <argp_parse@@Base+0x3074>
   1aa44:	cmp	r0, r1
   1aa48:	bls	1abfc <argp_parse@@Base+0x3058>
   1aa4c:	tst	r1, r2
   1aa50:	beq	1ac08 <argp_parse@@Base+0x3064>
   1aa54:	clz	r3, r0
   1aa58:	clz	r2, r1
   1aa5c:	sub	r3, r2, r3
   1aa60:	rsbs	r3, r3, #31
   1aa64:	addne	r3, r3, r3, lsl #1
   1aa68:	mov	r2, #0
   1aa6c:	addne	pc, pc, r3, lsl #2
   1aa70:	nop			; (mov r0, r0)
   1aa74:	cmp	r0, r1, lsl #31
   1aa78:	adc	r2, r2, r2
   1aa7c:	subcs	r0, r0, r1, lsl #31
   1aa80:	cmp	r0, r1, lsl #30
   1aa84:	adc	r2, r2, r2
   1aa88:	subcs	r0, r0, r1, lsl #30
   1aa8c:	cmp	r0, r1, lsl #29
   1aa90:	adc	r2, r2, r2
   1aa94:	subcs	r0, r0, r1, lsl #29
   1aa98:	cmp	r0, r1, lsl #28
   1aa9c:	adc	r2, r2, r2
   1aaa0:	subcs	r0, r0, r1, lsl #28
   1aaa4:	cmp	r0, r1, lsl #27
   1aaa8:	adc	r2, r2, r2
   1aaac:	subcs	r0, r0, r1, lsl #27
   1aab0:	cmp	r0, r1, lsl #26
   1aab4:	adc	r2, r2, r2
   1aab8:	subcs	r0, r0, r1, lsl #26
   1aabc:	cmp	r0, r1, lsl #25
   1aac0:	adc	r2, r2, r2
   1aac4:	subcs	r0, r0, r1, lsl #25
   1aac8:	cmp	r0, r1, lsl #24
   1aacc:	adc	r2, r2, r2
   1aad0:	subcs	r0, r0, r1, lsl #24
   1aad4:	cmp	r0, r1, lsl #23
   1aad8:	adc	r2, r2, r2
   1aadc:	subcs	r0, r0, r1, lsl #23
   1aae0:	cmp	r0, r1, lsl #22
   1aae4:	adc	r2, r2, r2
   1aae8:	subcs	r0, r0, r1, lsl #22
   1aaec:	cmp	r0, r1, lsl #21
   1aaf0:	adc	r2, r2, r2
   1aaf4:	subcs	r0, r0, r1, lsl #21
   1aaf8:	cmp	r0, r1, lsl #20
   1aafc:	adc	r2, r2, r2
   1ab00:	subcs	r0, r0, r1, lsl #20
   1ab04:	cmp	r0, r1, lsl #19
   1ab08:	adc	r2, r2, r2
   1ab0c:	subcs	r0, r0, r1, lsl #19
   1ab10:	cmp	r0, r1, lsl #18
   1ab14:	adc	r2, r2, r2
   1ab18:	subcs	r0, r0, r1, lsl #18
   1ab1c:	cmp	r0, r1, lsl #17
   1ab20:	adc	r2, r2, r2
   1ab24:	subcs	r0, r0, r1, lsl #17
   1ab28:	cmp	r0, r1, lsl #16
   1ab2c:	adc	r2, r2, r2
   1ab30:	subcs	r0, r0, r1, lsl #16
   1ab34:	cmp	r0, r1, lsl #15
   1ab38:	adc	r2, r2, r2
   1ab3c:	subcs	r0, r0, r1, lsl #15
   1ab40:	cmp	r0, r1, lsl #14
   1ab44:	adc	r2, r2, r2
   1ab48:	subcs	r0, r0, r1, lsl #14
   1ab4c:	cmp	r0, r1, lsl #13
   1ab50:	adc	r2, r2, r2
   1ab54:	subcs	r0, r0, r1, lsl #13
   1ab58:	cmp	r0, r1, lsl #12
   1ab5c:	adc	r2, r2, r2
   1ab60:	subcs	r0, r0, r1, lsl #12
   1ab64:	cmp	r0, r1, lsl #11
   1ab68:	adc	r2, r2, r2
   1ab6c:	subcs	r0, r0, r1, lsl #11
   1ab70:	cmp	r0, r1, lsl #10
   1ab74:	adc	r2, r2, r2
   1ab78:	subcs	r0, r0, r1, lsl #10
   1ab7c:	cmp	r0, r1, lsl #9
   1ab80:	adc	r2, r2, r2
   1ab84:	subcs	r0, r0, r1, lsl #9
   1ab88:	cmp	r0, r1, lsl #8
   1ab8c:	adc	r2, r2, r2
   1ab90:	subcs	r0, r0, r1, lsl #8
   1ab94:	cmp	r0, r1, lsl #7
   1ab98:	adc	r2, r2, r2
   1ab9c:	subcs	r0, r0, r1, lsl #7
   1aba0:	cmp	r0, r1, lsl #6
   1aba4:	adc	r2, r2, r2
   1aba8:	subcs	r0, r0, r1, lsl #6
   1abac:	cmp	r0, r1, lsl #5
   1abb0:	adc	r2, r2, r2
   1abb4:	subcs	r0, r0, r1, lsl #5
   1abb8:	cmp	r0, r1, lsl #4
   1abbc:	adc	r2, r2, r2
   1abc0:	subcs	r0, r0, r1, lsl #4
   1abc4:	cmp	r0, r1, lsl #3
   1abc8:	adc	r2, r2, r2
   1abcc:	subcs	r0, r0, r1, lsl #3
   1abd0:	cmp	r0, r1, lsl #2
   1abd4:	adc	r2, r2, r2
   1abd8:	subcs	r0, r0, r1, lsl #2
   1abdc:	cmp	r0, r1, lsl #1
   1abe0:	adc	r2, r2, r2
   1abe4:	subcs	r0, r0, r1, lsl #1
   1abe8:	cmp	r0, r1
   1abec:	adc	r2, r2, r2
   1abf0:	subcs	r0, r0, r1
   1abf4:	mov	r0, r2
   1abf8:	bx	lr
   1abfc:	moveq	r0, #1
   1ac00:	movne	r0, #0
   1ac04:	bx	lr
   1ac08:	clz	r2, r1
   1ac0c:	rsb	r2, r2, #31
   1ac10:	lsr	r0, r0, r2
   1ac14:	bx	lr
   1ac18:	cmp	r0, #0
   1ac1c:	mvnne	r0, #0
   1ac20:	b	1ae84 <argp_parse@@Base+0x32e0>
   1ac24:	cmp	r1, #0
   1ac28:	beq	1ac18 <argp_parse@@Base+0x3074>
   1ac2c:	push	{r0, r1, lr}
   1ac30:	bl	1aa38 <argp_parse@@Base+0x2e94>
   1ac34:	pop	{r1, r2, lr}
   1ac38:	mul	r3, r2, r0
   1ac3c:	sub	r1, r1, r3
   1ac40:	bx	lr
   1ac44:	cmp	r1, #0
   1ac48:	beq	1ae54 <argp_parse@@Base+0x32b0>
   1ac4c:	eor	ip, r0, r1
   1ac50:	rsbmi	r1, r1, #0
   1ac54:	subs	r2, r1, #1
   1ac58:	beq	1ae20 <argp_parse@@Base+0x327c>
   1ac5c:	movs	r3, r0
   1ac60:	rsbmi	r3, r0, #0
   1ac64:	cmp	r3, r1
   1ac68:	bls	1ae2c <argp_parse@@Base+0x3288>
   1ac6c:	tst	r1, r2
   1ac70:	beq	1ae3c <argp_parse@@Base+0x3298>
   1ac74:	clz	r2, r3
   1ac78:	clz	r0, r1
   1ac7c:	sub	r2, r0, r2
   1ac80:	rsbs	r2, r2, #31
   1ac84:	addne	r2, r2, r2, lsl #1
   1ac88:	mov	r0, #0
   1ac8c:	addne	pc, pc, r2, lsl #2
   1ac90:	nop			; (mov r0, r0)
   1ac94:	cmp	r3, r1, lsl #31
   1ac98:	adc	r0, r0, r0
   1ac9c:	subcs	r3, r3, r1, lsl #31
   1aca0:	cmp	r3, r1, lsl #30
   1aca4:	adc	r0, r0, r0
   1aca8:	subcs	r3, r3, r1, lsl #30
   1acac:	cmp	r3, r1, lsl #29
   1acb0:	adc	r0, r0, r0
   1acb4:	subcs	r3, r3, r1, lsl #29
   1acb8:	cmp	r3, r1, lsl #28
   1acbc:	adc	r0, r0, r0
   1acc0:	subcs	r3, r3, r1, lsl #28
   1acc4:	cmp	r3, r1, lsl #27
   1acc8:	adc	r0, r0, r0
   1accc:	subcs	r3, r3, r1, lsl #27
   1acd0:	cmp	r3, r1, lsl #26
   1acd4:	adc	r0, r0, r0
   1acd8:	subcs	r3, r3, r1, lsl #26
   1acdc:	cmp	r3, r1, lsl #25
   1ace0:	adc	r0, r0, r0
   1ace4:	subcs	r3, r3, r1, lsl #25
   1ace8:	cmp	r3, r1, lsl #24
   1acec:	adc	r0, r0, r0
   1acf0:	subcs	r3, r3, r1, lsl #24
   1acf4:	cmp	r3, r1, lsl #23
   1acf8:	adc	r0, r0, r0
   1acfc:	subcs	r3, r3, r1, lsl #23
   1ad00:	cmp	r3, r1, lsl #22
   1ad04:	adc	r0, r0, r0
   1ad08:	subcs	r3, r3, r1, lsl #22
   1ad0c:	cmp	r3, r1, lsl #21
   1ad10:	adc	r0, r0, r0
   1ad14:	subcs	r3, r3, r1, lsl #21
   1ad18:	cmp	r3, r1, lsl #20
   1ad1c:	adc	r0, r0, r0
   1ad20:	subcs	r3, r3, r1, lsl #20
   1ad24:	cmp	r3, r1, lsl #19
   1ad28:	adc	r0, r0, r0
   1ad2c:	subcs	r3, r3, r1, lsl #19
   1ad30:	cmp	r3, r1, lsl #18
   1ad34:	adc	r0, r0, r0
   1ad38:	subcs	r3, r3, r1, lsl #18
   1ad3c:	cmp	r3, r1, lsl #17
   1ad40:	adc	r0, r0, r0
   1ad44:	subcs	r3, r3, r1, lsl #17
   1ad48:	cmp	r3, r1, lsl #16
   1ad4c:	adc	r0, r0, r0
   1ad50:	subcs	r3, r3, r1, lsl #16
   1ad54:	cmp	r3, r1, lsl #15
   1ad58:	adc	r0, r0, r0
   1ad5c:	subcs	r3, r3, r1, lsl #15
   1ad60:	cmp	r3, r1, lsl #14
   1ad64:	adc	r0, r0, r0
   1ad68:	subcs	r3, r3, r1, lsl #14
   1ad6c:	cmp	r3, r1, lsl #13
   1ad70:	adc	r0, r0, r0
   1ad74:	subcs	r3, r3, r1, lsl #13
   1ad78:	cmp	r3, r1, lsl #12
   1ad7c:	adc	r0, r0, r0
   1ad80:	subcs	r3, r3, r1, lsl #12
   1ad84:	cmp	r3, r1, lsl #11
   1ad88:	adc	r0, r0, r0
   1ad8c:	subcs	r3, r3, r1, lsl #11
   1ad90:	cmp	r3, r1, lsl #10
   1ad94:	adc	r0, r0, r0
   1ad98:	subcs	r3, r3, r1, lsl #10
   1ad9c:	cmp	r3, r1, lsl #9
   1ada0:	adc	r0, r0, r0
   1ada4:	subcs	r3, r3, r1, lsl #9
   1ada8:	cmp	r3, r1, lsl #8
   1adac:	adc	r0, r0, r0
   1adb0:	subcs	r3, r3, r1, lsl #8
   1adb4:	cmp	r3, r1, lsl #7
   1adb8:	adc	r0, r0, r0
   1adbc:	subcs	r3, r3, r1, lsl #7
   1adc0:	cmp	r3, r1, lsl #6
   1adc4:	adc	r0, r0, r0
   1adc8:	subcs	r3, r3, r1, lsl #6
   1adcc:	cmp	r3, r1, lsl #5
   1add0:	adc	r0, r0, r0
   1add4:	subcs	r3, r3, r1, lsl #5
   1add8:	cmp	r3, r1, lsl #4
   1addc:	adc	r0, r0, r0
   1ade0:	subcs	r3, r3, r1, lsl #4
   1ade4:	cmp	r3, r1, lsl #3
   1ade8:	adc	r0, r0, r0
   1adec:	subcs	r3, r3, r1, lsl #3
   1adf0:	cmp	r3, r1, lsl #2
   1adf4:	adc	r0, r0, r0
   1adf8:	subcs	r3, r3, r1, lsl #2
   1adfc:	cmp	r3, r1, lsl #1
   1ae00:	adc	r0, r0, r0
   1ae04:	subcs	r3, r3, r1, lsl #1
   1ae08:	cmp	r3, r1
   1ae0c:	adc	r0, r0, r0
   1ae10:	subcs	r3, r3, r1
   1ae14:	cmp	ip, #0
   1ae18:	rsbmi	r0, r0, #0
   1ae1c:	bx	lr
   1ae20:	teq	ip, r0
   1ae24:	rsbmi	r0, r0, #0
   1ae28:	bx	lr
   1ae2c:	movcc	r0, #0
   1ae30:	asreq	r0, ip, #31
   1ae34:	orreq	r0, r0, #1
   1ae38:	bx	lr
   1ae3c:	clz	r2, r1
   1ae40:	rsb	r2, r2, #31
   1ae44:	cmp	ip, #0
   1ae48:	lsr	r0, r3, r2
   1ae4c:	rsbmi	r0, r0, #0
   1ae50:	bx	lr
   1ae54:	cmp	r0, #0
   1ae58:	mvngt	r0, #-2147483648	; 0x80000000
   1ae5c:	movlt	r0, #-2147483648	; 0x80000000
   1ae60:	b	1ae84 <argp_parse@@Base+0x32e0>
   1ae64:	cmp	r1, #0
   1ae68:	beq	1ae54 <argp_parse@@Base+0x32b0>
   1ae6c:	push	{r0, r1, lr}
   1ae70:	bl	1ac4c <argp_parse@@Base+0x30a8>
   1ae74:	pop	{r1, r2, lr}
   1ae78:	mul	r3, r2, r0
   1ae7c:	sub	r1, r1, r3
   1ae80:	bx	lr
   1ae84:	push	{r1, lr}
   1ae88:	mov	r0, #8
   1ae8c:	bl	11118 <raise@plt>
   1ae90:	pop	{r1, pc}
   1ae94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae98:	mov	r7, r0
   1ae9c:	ldr	r6, [pc, #72]	; 1aeec <argp_parse@@Base+0x3348>
   1aea0:	ldr	r5, [pc, #72]	; 1aef0 <argp_parse@@Base+0x334c>
   1aea4:	add	r6, pc, r6
   1aea8:	add	r5, pc, r5
   1aeac:	sub	r6, r6, r5
   1aeb0:	mov	r8, r1
   1aeb4:	mov	r9, r2
   1aeb8:	bl	110e0 <calloc@plt-0x20>
   1aebc:	asrs	r6, r6, #2
   1aec0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aec4:	mov	r4, #0
   1aec8:	add	r4, r4, #1
   1aecc:	ldr	r3, [r5], #4
   1aed0:	mov	r2, r9
   1aed4:	mov	r1, r8
   1aed8:	mov	r0, r7
   1aedc:	blx	r3
   1aee0:	cmp	r6, r4
   1aee4:	bne	1aec8 <argp_parse@@Base+0x3324>
   1aee8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aeec:	andeq	r2, r1, r4, rrx
   1aef0:	andeq	r2, r1, ip, asr r0
   1aef4:	bx	lr

Disassembly of section .fini:

0001aef8 <.fini>:
   1aef8:	push	{r3, lr}
   1aefc:	pop	{r3, pc}
