
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010de4 <.init>:
   10de4:	push	{r3, lr}
   10de8:	bl	110a4 <__assert_fail@plt+0x48>
   10dec:	pop	{r3, pc}

Disassembly of section .plt:

00010df0 <calloc@plt-0x14>:
   10df0:	push	{lr}		; (str lr, [sp, #-4]!)
   10df4:	ldr	lr, [pc, #4]	; 10e00 <calloc@plt-0x4>
   10df8:	add	lr, pc, lr
   10dfc:	ldr	pc, [lr, #8]!
   10e00:	andeq	r5, r1, r0, lsl #4

00010e04 <calloc@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #512]!	; 0x200

00010e10 <fputs_unlocked@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #504]!	; 0x1f8

00010e1c <raise@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #496]!	; 0x1f0

00010e28 <strcmp@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #488]!	; 0x1e8

00010e34 <posix_fadvise64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e40 <fflush@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #472]!	; 0x1d8

00010e4c <free@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #464]!	; 0x1d0

00010e58 <_exit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #456]!	; 0x1c8

00010e64 <memcpy@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e70 <mbsinit@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #440]!	; 0x1b8

00010e7c <fwrite_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #432]!	; 0x1b0

00010e88 <getc_unlocked@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #424]!	; 0x1a8

00010e94 <dcgettext@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #416]!	; 0x1a0

00010ea0 <realloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #408]!	; 0x198

00010eac <textdomain@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #400]!	; 0x190

00010eb8 <iswprint@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #392]!	; 0x188

00010ec4 <lseek64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #384]!	; 0x180

00010ed0 <__ctype_get_mb_cur_max@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #376]!	; 0x178

00010edc <__fpending@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #368]!	; 0x170

00010ee8 <ferror_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #360]!	; 0x168

00010ef4 <mbrtowc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #352]!	; 0x160

00010f00 <error@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #344]!	; 0x158

00010f0c <malloc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #336]!	; 0x150

00010f18 <__libc_start_main@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #328]!	; 0x148

00010f24 <__freading@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #320]!	; 0x140

00010f30 <__gmon_start__@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #312]!	; 0x138

00010f3c <getopt_long@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #304]!	; 0x130

00010f48 <__ctype_b_loc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #296]!	; 0x128

00010f54 <exit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #288]!	; 0x120

00010f60 <bcmp@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #280]!	; 0x118

00010f6c <strlen@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #272]!	; 0x110

00010f78 <__errno_location@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #264]!	; 0x108

00010f84 <__cxa_atexit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #256]!	; 0x100

00010f90 <memset@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #248]!	; 0xf8

00010f9c <__printf_chk@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #240]!	; 0xf0

00010fa8 <fileno@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #232]!	; 0xe8

00010fb4 <__fprintf_chk@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #224]!	; 0xe0

00010fc0 <fclose@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #216]!	; 0xd8

00010fcc <fseeko64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #208]!	; 0xd0

00010fd8 <setlocale@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #200]!	; 0xc8

00010fe4 <strrchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #192]!	; 0xc0

00010ff0 <nl_langinfo@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #184]!	; 0xb8

00010ffc <clearerr_unlocked@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #176]!	; 0xb0

00011008 <fopen64@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #168]!	; 0xa8

00011014 <bindtextdomain@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #160]!	; 0xa0

00011020 <fputs@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #152]!	; 0x98

0001102c <strncmp@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #144]!	; 0x90

00011038 <abort@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #136]!	; 0x88

00011044 <putchar_unlocked@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #128]!	; 0x80

00011050 <strspn@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #120]!	; 0x78

0001105c <__assert_fail@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #86016	; 0x15000
   11064:	ldr	pc, [ip, #112]!	; 0x70

Disassembly of section .text:

00011068 <.text>:
   11068:	mov	fp, #0
   1106c:	mov	lr, #0
   11070:	pop	{r1}		; (ldr r1, [sp], #4)
   11074:	mov	r2, sp
   11078:	push	{r2}		; (str r2, [sp, #-4]!)
   1107c:	push	{r0}		; (str r0, [sp, #-4]!)
   11080:	ldr	ip, [pc, #16]	; 11098 <__assert_fail@plt+0x3c>
   11084:	push	{ip}		; (str ip, [sp, #-4]!)
   11088:	ldr	r0, [pc, #12]	; 1109c <__assert_fail@plt+0x40>
   1108c:	ldr	r3, [pc, #12]	; 110a0 <__assert_fail@plt+0x44>
   11090:	bl	10f18 <__libc_start_main@plt>
   11094:	bl	11038 <abort@plt>
   11098:	andeq	r4, r1, r4, ror pc
   1109c:	ldrdeq	r1, [r1], -r4
   110a0:	andeq	r4, r1, r4, lsl pc
   110a4:	ldr	r3, [pc, #20]	; 110c0 <__assert_fail@plt+0x64>
   110a8:	ldr	r2, [pc, #20]	; 110c4 <__assert_fail@plt+0x68>
   110ac:	add	r3, pc, r3
   110b0:	ldr	r2, [r3, r2]
   110b4:	cmp	r2, #0
   110b8:	bxeq	lr
   110bc:	b	10f30 <__gmon_start__@plt>
   110c0:	andeq	r4, r1, ip, asr #30
   110c4:	ldrdeq	r0, [r0], -r8
   110c8:	ldr	r0, [pc, #24]	; 110e8 <__assert_fail@plt+0x8c>
   110cc:	ldr	r3, [pc, #24]	; 110ec <__assert_fail@plt+0x90>
   110d0:	cmp	r3, r0
   110d4:	bxeq	lr
   110d8:	ldr	r3, [pc, #16]	; 110f0 <__assert_fail@plt+0x94>
   110dc:	cmp	r3, #0
   110e0:	bxeq	lr
   110e4:	bx	r3
   110e8:	andeq	r6, r2, r8, lsr r1
   110ec:	andeq	r6, r2, r8, lsr r1
   110f0:	andeq	r0, r0, r0
   110f4:	ldr	r0, [pc, #36]	; 11120 <__assert_fail@plt+0xc4>
   110f8:	ldr	r1, [pc, #36]	; 11124 <__assert_fail@plt+0xc8>
   110fc:	sub	r1, r1, r0
   11100:	asr	r1, r1, #2
   11104:	add	r1, r1, r1, lsr #31
   11108:	asrs	r1, r1, #1
   1110c:	bxeq	lr
   11110:	ldr	r3, [pc, #16]	; 11128 <__assert_fail@plt+0xcc>
   11114:	cmp	r3, #0
   11118:	bxeq	lr
   1111c:	bx	r3
   11120:	andeq	r6, r2, r8, lsr r1
   11124:	andeq	r6, r2, r8, lsr r1
   11128:	andeq	r0, r0, r0
   1112c:	push	{r4, lr}
   11130:	ldr	r4, [pc, #24]	; 11150 <__assert_fail@plt+0xf4>
   11134:	ldrb	r3, [r4]
   11138:	cmp	r3, #0
   1113c:	popne	{r4, pc}
   11140:	bl	110c8 <__assert_fail@plt+0x6c>
   11144:	mov	r3, #1
   11148:	strb	r3, [r4]
   1114c:	pop	{r4, pc}
   11150:	andeq	r6, r2, ip, asr r1
   11154:	b	110f4 <__assert_fail@plt+0x98>
   11158:	push	{fp, lr}
   1115c:	mov	fp, sp
   11160:	sub	sp, sp, #56	; 0x38
   11164:	mov	r8, r0
   11168:	cmp	r0, #0
   1116c:	bne	11394 <__assert_fail@plt+0x338>
   11170:	movw	r1, #20419	; 0x4fc3
   11174:	mov	r0, #0
   11178:	mov	r2, #5
   1117c:	movt	r1, #1
   11180:	bl	10e94 <dcgettext@plt>
   11184:	mov	r1, r0
   11188:	movw	r0, #24996	; 0x61a4
   1118c:	movt	r0, #2
   11190:	ldr	r2, [r0]
   11194:	mov	r0, #1
   11198:	bl	10f9c <__printf_chk@plt>
   1119c:	movw	r1, #20452	; 0x4fe4
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10e94 <dcgettext@plt>
   111b0:	movw	r9, #24916	; 0x6154
   111b4:	movt	r9, #2
   111b8:	ldr	r1, [r9]
   111bc:	bl	10e10 <fputs_unlocked@plt>
   111c0:	movw	r1, #20944	; 0x51d0
   111c4:	mov	r0, #0
   111c8:	mov	r2, #5
   111cc:	movt	r1, #1
   111d0:	bl	10e94 <dcgettext@plt>
   111d4:	ldr	r1, [r9]
   111d8:	bl	10e10 <fputs_unlocked@plt>
   111dc:	movw	r1, #21000	; 0x5208
   111e0:	mov	r0, #0
   111e4:	mov	r2, #5
   111e8:	movt	r1, #1
   111ec:	bl	10e94 <dcgettext@plt>
   111f0:	ldr	r1, [r9]
   111f4:	bl	10e10 <fputs_unlocked@plt>
   111f8:	movw	r1, #20518	; 0x5026
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10e94 <dcgettext@plt>
   1120c:	ldr	r1, [r9]
   11210:	bl	10e10 <fputs_unlocked@plt>
   11214:	bl	122b4 <__assert_fail@plt+0x1258>
   11218:	movw	r1, #20739	; 0x5103
   1121c:	mov	r0, #0
   11220:	mov	r2, #5
   11224:	movt	r1, #1
   11228:	bl	10e94 <dcgettext@plt>
   1122c:	ldr	r1, [r9]
   11230:	bl	10e10 <fputs_unlocked@plt>
   11234:	movw	r1, #20784	; 0x5130
   11238:	mov	r0, #0
   1123c:	mov	r2, #5
   11240:	movt	r1, #1
   11244:	bl	10e94 <dcgettext@plt>
   11248:	ldr	r1, [r9]
   1124c:	bl	10e10 <fputs_unlocked@plt>
   11250:	movw	r0, #21552	; 0x5430
   11254:	mov	r6, sp
   11258:	movt	r0, #1
   1125c:	mov	r1, r6
   11260:	ldm	r0!, {r2, r3, r4, r5}
   11264:	stmia	r1!, {r2, r3, r4, r5}
   11268:	ldm	r0!, {r2, r3, r4, r5, r7}
   1126c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11270:	ldm	r0, {r2, r3, r4, r5, r7}
   11274:	stm	r1, {r2, r3, r4, r5, r7}
   11278:	movw	r1, #21075	; 0x5253
   1127c:	movw	r5, #20838	; 0x5166
   11280:	movt	r1, #1
   11284:	movt	r5, #1
   11288:	mov	r0, r5
   1128c:	bl	10e28 <strcmp@plt>
   11290:	cmp	r0, #0
   11294:	ldrne	r1, [r6, #8]!
   11298:	cmpne	r1, #0
   1129c:	bne	11288 <__assert_fail@plt+0x22c>
   112a0:	movw	r1, #21170	; 0x52b2
   112a4:	ldr	r6, [r6, #4]
   112a8:	mov	r0, #0
   112ac:	mov	r2, #5
   112b0:	movt	r1, #1
   112b4:	bl	10e94 <dcgettext@plt>
   112b8:	movw	r2, #20886	; 0x5196
   112bc:	movw	r3, #21193	; 0x52c9
   112c0:	mov	r1, r0
   112c4:	mov	r0, #1
   112c8:	movt	r2, #1
   112cc:	movt	r3, #1
   112d0:	bl	10f9c <__printf_chk@plt>
   112d4:	cmp	r6, #0
   112d8:	mov	r0, #5
   112dc:	mov	r1, #0
   112e0:	moveq	r6, r5
   112e4:	bl	10fd8 <setlocale@plt>
   112e8:	cmp	r0, #0
   112ec:	beq	11324 <__assert_fail@plt+0x2c8>
   112f0:	movw	r1, #21233	; 0x52f1
   112f4:	mov	r2, #3
   112f8:	movt	r1, #1
   112fc:	bl	1102c <strncmp@plt>
   11300:	cmp	r0, #0
   11304:	beq	11324 <__assert_fail@plt+0x2c8>
   11308:	movw	r1, #21237	; 0x52f5
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	movt	r1, #1
   11318:	bl	10e94 <dcgettext@plt>
   1131c:	ldr	r1, [r9]
   11320:	bl	10e10 <fputs_unlocked@plt>
   11324:	movw	r1, #21308	; 0x533c
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10e94 <dcgettext@plt>
   11338:	movw	r2, #21193	; 0x52c9
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	mov	r3, r5
   11348:	movt	r2, #1
   1134c:	bl	10f9c <__printf_chk@plt>
   11350:	movw	r1, #21335	; 0x5357
   11354:	mov	r0, #0
   11358:	mov	r2, #5
   1135c:	movt	r1, #1
   11360:	bl	10e94 <dcgettext@plt>
   11364:	mov	r1, r0
   11368:	movw	r0, #21103	; 0x526f
   1136c:	movw	r3, #21385	; 0x5389
   11370:	cmp	r6, r5
   11374:	mov	r2, r6
   11378:	movt	r0, #1
   1137c:	movt	r3, #1
   11380:	moveq	r3, r0
   11384:	mov	r0, #1
   11388:	bl	10f9c <__printf_chk@plt>
   1138c:	mov	r0, r8
   11390:	bl	10f54 <exit@plt>
   11394:	movw	r0, #24904	; 0x6148
   11398:	movw	r1, #20380	; 0x4f9c
   1139c:	mov	r2, #5
   113a0:	movt	r0, #2
   113a4:	movt	r1, #1
   113a8:	ldr	r5, [r0]
   113ac:	mov	r0, #0
   113b0:	bl	10e94 <dcgettext@plt>
   113b4:	mov	r2, r0
   113b8:	movw	r0, #24996	; 0x61a4
   113bc:	mov	r1, #1
   113c0:	movt	r0, #2
   113c4:	ldr	r3, [r0]
   113c8:	mov	r0, r5
   113cc:	bl	10fb4 <__fprintf_chk@plt>
   113d0:	b	1138c <__assert_fail@plt+0x330>
   113d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d8:	add	fp, sp, #28
   113dc:	sub	sp, sp, #36	; 0x24
   113e0:	mov	r5, r0
   113e4:	ldr	r0, [r1]
   113e8:	mov	r4, r1
   113ec:	bl	1260c <__assert_fail@plt+0x15b0>
   113f0:	movw	r1, #21385	; 0x5389
   113f4:	mov	r0, #6
   113f8:	movt	r1, #1
   113fc:	bl	10fd8 <setlocale@plt>
   11400:	movw	r6, #20890	; 0x519a
   11404:	movw	r1, #20847	; 0x516f
   11408:	movt	r6, #1
   1140c:	movt	r1, #1
   11410:	mov	r0, r6
   11414:	bl	11014 <bindtextdomain@plt>
   11418:	mov	r0, r6
   1141c:	bl	10eac <textdomain@plt>
   11420:	movw	r0, #8992	; 0x2320
   11424:	movt	r0, #1
   11428:	bl	14f78 <__assert_fail@plt+0x3f1c>
   1142c:	movw	r8, #20871	; 0x5187
   11430:	movw	r9, #21456	; 0x53d0
   11434:	mov	sl, #0
   11438:	mov	r0, #0
   1143c:	movt	r8, #1
   11440:	movt	r9, #1
   11444:	str	r0, [sp, #24]
   11448:	mov	r0, #0
   1144c:	mov	r1, r4
   11450:	mov	r2, r8
   11454:	mov	r3, r9
   11458:	str	r0, [sp]
   1145c:	mov	r0, r5
   11460:	bl	10f3c <getopt_long@plt>
   11464:	cmp	r0, #96	; 0x60
   11468:	ble	11488 <__assert_fail@plt+0x42c>
   1146c:	cmp	r0, #97	; 0x61
   11470:	beq	114d4 <__assert_fail@plt+0x478>
   11474:	cmp	r0, #116	; 0x74
   11478:	beq	114e8 <__assert_fail@plt+0x48c>
   1147c:	cmp	r0, #256	; 0x100
   11480:	beq	11574 <__assert_fail@plt+0x518>
   11484:	b	11514 <__assert_fail@plt+0x4b8>
   11488:	cmp	r0, #43	; 0x2b
   1148c:	bgt	114ac <__assert_fail@plt+0x450>
   11490:	cmn	r0, #1
   11494:	beq	1157c <__assert_fail@plt+0x520>
   11498:	cmn	r0, #3
   1149c:	beq	118b8 <__assert_fail@plt+0x85c>
   114a0:	cmn	r0, #2
   114a4:	bne	11514 <__assert_fail@plt+0x4b8>
   114a8:	b	11900 <__assert_fail@plt+0x8a4>
   114ac:	cmp	r0, #44	; 0x2c
   114b0:	bne	1150c <__assert_fail@plt+0x4b0>
   114b4:	tst	sl, #1
   114b8:	mov	sl, #0
   114bc:	beq	11448 <__assert_fail@plt+0x3ec>
   114c0:	mov	r0, r6
   114c4:	mov	r1, r7
   114c8:	bl	11940 <__assert_fail@plt+0x8e4>
   114cc:	mov	sl, #0
   114d0:	b	11448 <__assert_fail@plt+0x3ec>
   114d4:	movw	r0, #24928	; 0x6160
   114d8:	mov	r1, #1
   114dc:	movt	r0, #2
   114e0:	strb	r1, [r0]
   114e4:	b	11448 <__assert_fail@plt+0x3ec>
   114e8:	movw	r0, #24928	; 0x6160
   114ec:	mov	r1, #1
   114f0:	movt	r0, #2
   114f4:	strb	r1, [r0]
   114f8:	movw	r0, #24920	; 0x6158
   114fc:	movt	r0, #2
   11500:	ldr	r0, [r0]
   11504:	bl	11a34 <__assert_fail@plt+0x9d8>
   11508:	b	11448 <__assert_fail@plt+0x3ec>
   1150c:	cmp	r0, #63	; 0x3f
   11510:	beq	11908 <__assert_fail@plt+0x8ac>
   11514:	ands	r1, sl, #1
   11518:	moveq	r7, r1
   1151c:	moveq	r6, r1
   11520:	movw	r1, #39321	; 0x9999
   11524:	movt	r1, #39321	; 0x9999
   11528:	subs	r1, r1, r6
   1152c:	movw	r1, #39321	; 0x9999
   11530:	movt	r1, #6553	; 0x1999
   11534:	sbcs	r1, r1, r7
   11538:	bcc	11910 <__assert_fail@plt+0x8b4>
   1153c:	mov	r1, #10
   11540:	add	r3, r7, r7, lsl #2
   11544:	sub	r0, r0, #48	; 0x30
   11548:	mov	sl, #1
   1154c:	umull	r1, r2, r6, r1
   11550:	add	r2, r2, r3, lsl #1
   11554:	adds	r1, r1, r0
   11558:	adc	r0, r2, r0, asr #31
   1155c:	subs	r2, r1, r6
   11560:	mov	r6, r1
   11564:	sbcs	r2, r0, r7
   11568:	mov	r7, r0
   1156c:	bcs	11448 <__assert_fail@plt+0x3ec>
   11570:	b	11910 <__assert_fail@plt+0x8b4>
   11574:	mov	r0, #1
   11578:	b	11444 <__assert_fail@plt+0x3e8>
   1157c:	ldr	r0, [sp, #24]
   11580:	tst	r0, #1
   11584:	movwne	r1, #24928	; 0x6160
   11588:	movne	r0, #0
   1158c:	movtne	r1, #2
   11590:	strbne	r0, [r1]
   11594:	tst	sl, #1
   11598:	beq	115a8 <__assert_fail@plt+0x54c>
   1159c:	mov	r0, r6
   115a0:	mov	r1, r7
   115a4:	bl	11940 <__assert_fail@plt+0x8e4>
   115a8:	bl	11e20 <__assert_fail@plt+0xdc4>
   115ac:	movw	r0, #24896	; 0x6140
   115b0:	movt	r0, #2
   115b4:	ldr	r1, [r0]
   115b8:	mov	r0, #0
   115bc:	cmp	r1, r5
   115c0:	addlt	r0, r4, r1, lsl #2
   115c4:	bl	12054 <__assert_fail@plt+0xff8>
   115c8:	mov	r0, #0
   115cc:	bl	12084 <__assert_fail@plt+0x1028>
   115d0:	cmp	r0, #0
   115d4:	beq	11874 <__assert_fail@plt+0x818>
   115d8:	mov	r4, r0
   115dc:	movw	r0, #25304	; 0x62d8
   115e0:	movt	r0, #2
   115e4:	ldr	r0, [r0]
   115e8:	bl	14604 <__assert_fail@plt+0x35a8>
   115ec:	str	r0, [sp, #8]
   115f0:	mov	r0, #0
   115f4:	mov	r5, #0
   115f8:	mov	sl, #1
   115fc:	mov	r8, #0
   11600:	mov	r9, #1
   11604:	str	r0, [sp, #12]
   11608:	mov	r0, #0
   1160c:	str	r5, [sp, #32]
   11610:	str	r0, [sp, #24]
   11614:	mov	r0, r4
   11618:	bl	10e88 <getc_unlocked@plt>
   1161c:	mov	r7, r0
   11620:	cmn	r0, #1
   11624:	bgt	11640 <__assert_fail@plt+0x5e4>
   11628:	mov	r0, r4
   1162c:	bl	12084 <__assert_fail@plt+0x1028>
   11630:	mov	r4, r0
   11634:	cmp	r0, #0
   11638:	bne	11614 <__assert_fail@plt+0x5b8>
   1163c:	mov	r4, #0
   11640:	tst	sl, #1
   11644:	beq	11690 <__assert_fail@plt+0x634>
   11648:	bl	10f48 <__ctype_b_loc@plt>
   1164c:	ldr	r0, [r0]
   11650:	add	r0, r0, r7, lsl #1
   11654:	ldrh	r0, [r0]
   11658:	ands	r0, r0, #1
   1165c:	str	r0, [sp, #16]
   11660:	beq	116a0 <__assert_fail@plt+0x644>
   11664:	mov	r0, r5
   11668:	mov	r1, r8
   1166c:	add	r2, sp, #32
   11670:	add	r3, sp, #31
   11674:	bl	11f50 <__assert_fail@plt+0xef4>
   11678:	ldrb	ip, [sp, #31]
   1167c:	cmp	ip, #0
   11680:	beq	11710 <__assert_fail@plt+0x6b4>
   11684:	ldr	r6, [sp, #24]
   11688:	str	r5, [sp, #20]
   1168c:	b	1178c <__assert_fail@plt+0x730>
   11690:	mov	r6, r9
   11694:	ldr	r9, [sp, #24]
   11698:	mov	sl, #0
   1169c:	b	1180c <__assert_fail@plt+0x7b0>
   116a0:	cmp	r7, #8
   116a4:	bne	116e8 <__assert_fail@plt+0x68c>
   116a8:	ldr	r0, [sp, #32]
   116ac:	ldr	r6, [sp, #24]
   116b0:	mov	r7, #8
   116b4:	cmp	r0, #0
   116b8:	subne	r0, r0, #1
   116bc:	subs	r1, r5, #1
   116c0:	str	r0, [sp, #32]
   116c4:	orr	r0, r5, r8
   116c8:	sbc	r2, r8, #0
   116cc:	cmp	r0, #0
   116d0:	moveq	r2, r8
   116d4:	moveq	r1, r5
   116d8:	mov	r5, #1
   116dc:	mov	r8, r2
   116e0:	str	r1, [sp, #20]
   116e4:	b	11794 <__assert_fail@plt+0x738>
   116e8:	adds	r0, r5, #1
   116ec:	ldr	r6, [sp, #24]
   116f0:	mov	r5, #1
   116f4:	str	r0, [sp, #20]
   116f8:	adcs	r8, r8, #0
   116fc:	mov	r0, #0
   11700:	adc	r0, r0, #0
   11704:	cmp	r0, #1
   11708:	bne	11794 <__assert_fail@plt+0x738>
   1170c:	b	1191c <__assert_fail@plt+0x8c0>
   11710:	str	r0, [sp, #20]
   11714:	subs	r0, r0, r5
   11718:	mov	r2, r1
   1171c:	sbcs	r1, r1, r8
   11720:	bcc	1191c <__assert_fail@plt+0x8c0>
   11724:	cmp	r7, #9
   11728:	bne	11740 <__assert_fail@plt+0x6e4>
   1172c:	ldr	r0, [sp, #24]
   11730:	mov	r8, r2
   11734:	cmp	r0, #0
   11738:	bne	11774 <__assert_fail@plt+0x718>
   1173c:	b	11780 <__assert_fail@plt+0x724>
   11740:	ldr	r0, [sp, #20]
   11744:	adds	r5, r5, #1
   11748:	mvn	r3, r9
   1174c:	adc	r8, r8, #0
   11750:	eor	r2, r8, r2
   11754:	eor	r1, r5, r0
   11758:	orrs	r1, r1, r2
   1175c:	mov	r2, r1
   11760:	movwne	r2, #1
   11764:	orr	r2, r3, r2
   11768:	tst	r2, #1
   1176c:	bne	11838 <__assert_fail@plt+0x7dc>
   11770:	str	r5, [sp, #20]
   11774:	ldr	r1, [sp, #8]
   11778:	mov	r2, #9
   1177c:	strb	r2, [r1]
   11780:	ldr	r1, [sp, #12]
   11784:	mov	r7, #9
   11788:	and	r6, r1, #1
   1178c:	clz	r0, ip
   11790:	lsr	r5, r0, #5
   11794:	cmp	r6, #0
   11798:	beq	117e8 <__assert_fail@plt+0x78c>
   1179c:	cmp	r6, #1
   117a0:	beq	117bc <__assert_fail@plt+0x760>
   117a4:	ldr	r0, [sp, #12]
   117a8:	tst	r0, #1
   117ac:	beq	117bc <__assert_fail@plt+0x760>
   117b0:	ldr	r0, [sp, #8]
   117b4:	mov	r1, #9
   117b8:	strb	r1, [r0]
   117bc:	movw	r0, #24916	; 0x6154
   117c0:	mov	r1, #1
   117c4:	mov	r2, r6
   117c8:	movt	r0, #2
   117cc:	ldr	r3, [r0]
   117d0:	ldr	r0, [sp, #8]
   117d4:	bl	10e7c <fwrite_unlocked@plt>
   117d8:	mov	r1, #0
   117dc:	cmp	r0, r6
   117e0:	str	r1, [sp, #12]
   117e4:	bne	1188c <__assert_fail@plt+0x830>
   117e8:	movw	r0, #24928	; 0x6160
   117ec:	ldr	r6, [sp, #16]
   117f0:	mov	r9, #0
   117f4:	movt	r0, #2
   117f8:	ldrb	r0, [r0]
   117fc:	orrs	r0, r6, r0
   11800:	movwne	r0, #1
   11804:	and	sl, r5, r0
   11808:	ldr	r5, [sp, #20]
   1180c:	cmn	r7, #1
   11810:	ble	1186c <__assert_fail@plt+0x810>
   11814:	mov	r0, r7
   11818:	str	r9, [sp, #24]
   1181c:	bl	11044 <putchar_unlocked@plt>
   11820:	cmn	r0, #1
   11824:	mov	r9, r6
   11828:	ble	1188c <__assert_fail@plt+0x830>
   1182c:	cmp	r7, #10
   11830:	bne	11614 <__assert_fail@plt+0x5b8>
   11834:	b	115f0 <__assert_fail@plt+0x594>
   11838:	ldr	r0, [sp, #8]
   1183c:	ldr	r2, [sp, #24]
   11840:	mov	sl, #1
   11844:	mov	r9, #1
   11848:	strb	r7, [r0, r2]
   1184c:	clz	r0, r1
   11850:	ldr	r1, [sp, #12]
   11854:	add	r2, r2, #1
   11858:	lsr	r0, r0, #5
   1185c:	str	r2, [sp, #24]
   11860:	orr	r1, r1, r0
   11864:	str	r1, [sp, #12]
   11868:	b	1182c <__assert_fail@plt+0x7d0>
   1186c:	ldr	r0, [sp, #8]
   11870:	bl	12540 <__assert_fail@plt+0x14e4>
   11874:	bl	12264 <__assert_fail@plt+0x1208>
   11878:	movw	r0, #24932	; 0x6164
   1187c:	movt	r0, #2
   11880:	ldr	r0, [r0]
   11884:	sub	sp, fp, #28
   11888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1188c:	bl	10f78 <__errno_location@plt>
   11890:	movw	r1, #21442	; 0x53c2
   11894:	ldr	r4, [r0]
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	movt	r1, #1
   118a4:	bl	10e94 <dcgettext@plt>
   118a8:	mov	r2, r0
   118ac:	mov	r0, #1
   118b0:	mov	r1, r4
   118b4:	bl	10f00 <error@plt>
   118b8:	movw	r0, #24816	; 0x60f0
   118bc:	movw	r2, #20900	; 0x51a4
   118c0:	mov	r1, #0
   118c4:	movt	r0, #2
   118c8:	movt	r2, #1
   118cc:	str	r1, [sp, #4]
   118d0:	movw	r1, #20838	; 0x5166
   118d4:	movt	r1, #1
   118d8:	ldr	r3, [r0]
   118dc:	movw	r0, #24916	; 0x6154
   118e0:	str	r2, [sp]
   118e4:	movw	r2, #20886	; 0x5196
   118e8:	movt	r0, #2
   118ec:	movt	r2, #1
   118f0:	ldr	r0, [r0]
   118f4:	bl	144fc <__assert_fail@plt+0x34a0>
   118f8:	mov	r0, #0
   118fc:	bl	10f54 <exit@plt>
   11900:	mov	r0, #0
   11904:	bl	11158 <__assert_fail@plt+0xfc>
   11908:	mov	r0, #1
   1190c:	bl	11158 <__assert_fail@plt+0xfc>
   11910:	movw	r1, #20916	; 0x51b4
   11914:	movt	r1, #1
   11918:	b	11924 <__assert_fail@plt+0x8c8>
   1191c:	movw	r1, #21419	; 0x53ab
   11920:	movt	r1, #1
   11924:	mov	r0, #0
   11928:	mov	r2, #5
   1192c:	bl	10e94 <dcgettext@plt>
   11930:	mov	r2, r0
   11934:	mov	r0, #1
   11938:	mov	r1, #0
   1193c:	bl	10f00 <error@plt>
   11940:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11944:	add	fp, sp, #24
   11948:	movw	r8, #24936	; 0x6168
   1194c:	mov	r4, r1
   11950:	movw	r9, #24940	; 0x616c
   11954:	mov	r5, r0
   11958:	mov	r0, #0
   1195c:	movt	r8, #2
   11960:	movt	r9, #2
   11964:	ldr	r1, [r8]
   11968:	cmp	r1, #0
   1196c:	beq	11980 <__assert_fail@plt+0x924>
   11970:	ldr	r2, [r9]
   11974:	add	r2, r2, r1, lsl #3
   11978:	ldrd	r2, [r2, #-8]
   1197c:	b	11988 <__assert_fail@plt+0x92c>
   11980:	mov	r2, #0
   11984:	mov	r3, #0
   11988:	subs	r7, r5, r2
   1198c:	sbcs	r6, r4, r3
   11990:	adc	r0, r0, #0
   11994:	rsbs	r0, r0, #1
   11998:	movw	r0, #24944	; 0x6170
   1199c:	movt	r0, #2
   119a0:	movwne	r6, #0
   119a4:	movwne	r7, #0
   119a8:	ldr	r0, [r0]
   119ac:	cmp	r1, r0
   119b0:	bne	119d4 <__assert_fail@plt+0x978>
   119b4:	ldr	r0, [r9]
   119b8:	movw	r1, #24944	; 0x6170
   119bc:	mov	r2, #8
   119c0:	movt	r1, #2
   119c4:	bl	14710 <__assert_fail@plt+0x36b4>
   119c8:	ldr	r1, [r8]
   119cc:	str	r0, [r9]
   119d0:	b	119d8 <__assert_fail@plt+0x97c>
   119d4:	ldr	r0, [r9]
   119d8:	add	r2, r1, #1
   119dc:	str	r2, [r8]
   119e0:	str	r5, [r0, r1, lsl #3]!
   119e4:	str	r4, [r0, #4]
   119e8:	movw	r0, #25304	; 0x62d8
   119ec:	movt	r0, #2
   119f0:	ldr	r1, [r0]
   119f4:	subs	r1, r1, r7
   119f8:	rscs	r1, r6, #0
   119fc:	bcs	11a0c <__assert_fail@plt+0x9b0>
   11a00:	cmp	r6, #0
   11a04:	bne	11a10 <__assert_fail@plt+0x9b4>
   11a08:	str	r7, [r0]
   11a0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a10:	movw	r1, #21608	; 0x5468
   11a14:	mov	r0, #0
   11a18:	mov	r2, #5
   11a1c:	movt	r1, #1
   11a20:	bl	10e94 <dcgettext@plt>
   11a24:	mov	r2, r0
   11a28:	mov	r0, #1
   11a2c:	mov	r1, #0
   11a30:	bl	10f00 <error@plt>
   11a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a38:	add	fp, sp, #28
   11a3c:	sub	sp, sp, #12
   11a40:	mov	r8, r0
   11a44:	mov	r0, #0
   11a48:	mov	r7, #0
   11a4c:	mov	sl, #1
   11a50:	mov	r9, #0
   11a54:	mov	r5, #0
   11a58:	mov	r4, #0
   11a5c:	str	r0, [sp, #8]
   11a60:	mov	r0, #0
   11a64:	str	r0, [sp, #4]
   11a68:	ldrb	r6, [r8]
   11a6c:	cmp	r6, #44	; 0x2c
   11a70:	beq	11ae8 <__assert_fail@plt+0xa8c>
   11a74:	cmp	r6, #0
   11a78:	beq	11cbc <__assert_fail@plt+0xc60>
   11a7c:	bl	10f48 <__ctype_b_loc@plt>
   11a80:	ldr	r0, [r0]
   11a84:	ldrb	r0, [r0, r6, lsl #1]
   11a88:	tst	r0, #1
   11a8c:	bne	11ae8 <__assert_fail@plt+0xa8c>
   11a90:	cmp	r6, #43	; 0x2b
   11a94:	beq	11b48 <__assert_fail@plt+0xaec>
   11a98:	cmp	r6, #47	; 0x2f
   11a9c:	bne	11ba8 <__assert_fail@plt+0xb4c>
   11aa0:	mov	r5, #0
   11aa4:	tst	r4, #1
   11aa8:	beq	11ca0 <__assert_fail@plt+0xc44>
   11aac:	movw	r1, #21631	; 0x547f
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #1
   11abc:	bl	10e94 <dcgettext@plt>
   11ac0:	mov	r9, r0
   11ac4:	mov	r0, r8
   11ac8:	bl	13ff8 <__assert_fail@plt+0x2f9c>
   11acc:	mov	r3, r0
   11ad0:	mov	r0, #0
   11ad4:	mov	r1, #0
   11ad8:	mov	r2, r9
   11adc:	bl	10f00 <error@plt>
   11ae0:	mov	r9, #1
   11ae4:	b	11b94 <__assert_fail@plt+0xb38>
   11ae8:	tst	r4, #1
   11aec:	beq	11ca4 <__assert_fail@plt+0xc48>
   11af0:	mov	r0, r7
   11af4:	tst	r9, #1
   11af8:	beq	11b18 <__assert_fail@plt+0xabc>
   11afc:	ldr	r1, [sp, #8]
   11b00:	bl	11d58 <__assert_fail@plt+0xcfc>
   11b04:	mov	r9, #1
   11b08:	cmp	r0, #0
   11b0c:	mov	r4, #0
   11b10:	bne	11ca8 <__assert_fail@plt+0xc4c>
   11b14:	b	11d50 <__assert_fail@plt+0xcf4>
   11b18:	tst	r5, #1
   11b1c:	beq	11b34 <__assert_fail@plt+0xad8>
   11b20:	ldr	r1, [sp, #8]
   11b24:	bl	11dbc <__assert_fail@plt+0xd60>
   11b28:	cmp	r0, #0
   11b2c:	bne	11b9c <__assert_fail@plt+0xb40>
   11b30:	b	11d50 <__assert_fail@plt+0xcf4>
   11b34:	ldr	r1, [sp, #8]
   11b38:	bl	11940 <__assert_fail@plt+0x8e4>
   11b3c:	mov	r9, #0
   11b40:	mov	r5, #0
   11b44:	b	11ca4 <__assert_fail@plt+0xc48>
   11b48:	tst	r4, #1
   11b4c:	beq	11b9c <__assert_fail@plt+0xb40>
   11b50:	movw	r1, #21672	; 0x54a8
   11b54:	mov	r0, #0
   11b58:	mov	r2, #5
   11b5c:	mov	r9, #0
   11b60:	movt	r1, #1
   11b64:	bl	10e94 <dcgettext@plt>
   11b68:	mov	r4, r7
   11b6c:	mov	r7, r0
   11b70:	mov	r0, r8
   11b74:	bl	13ff8 <__assert_fail@plt+0x2f9c>
   11b78:	mov	r3, r0
   11b7c:	mov	r2, r7
   11b80:	mov	r0, #0
   11b84:	mov	r1, #0
   11b88:	mov	r7, r4
   11b8c:	bl	10f00 <error@plt>
   11b90:	mov	r5, #1
   11b94:	mov	sl, #0
   11b98:	b	11c98 <__assert_fail@plt+0xc3c>
   11b9c:	mov	r5, #1
   11ba0:	mov	r9, #0
   11ba4:	b	11ca4 <__assert_fail@plt+0xc48>
   11ba8:	sub	r0, r6, #48	; 0x30
   11bac:	cmp	r0, #9
   11bb0:	bhi	11d1c <__assert_fail@plt+0xcc0>
   11bb4:	ands	r1, r4, #1
   11bb8:	ldr	r2, [sp, #4]
   11bbc:	moveq	r2, r8
   11bc0:	str	r2, [sp, #4]
   11bc4:	mov	r2, r1
   11bc8:	movne	r1, r7
   11bcc:	ldr	r3, [sp, #8]
   11bd0:	movne	r2, r3
   11bd4:	movw	r3, #39321	; 0x9999
   11bd8:	movt	r3, #39321	; 0x9999
   11bdc:	subs	r3, r3, r1
   11be0:	movw	r3, #39321	; 0x9999
   11be4:	movt	r3, #6553	; 0x1999
   11be8:	sbcs	r3, r3, r2
   11bec:	bcc	11c20 <__assert_fail@plt+0xbc4>
   11bf0:	mov	r3, #10
   11bf4:	add	r6, r2, r2, lsl #2
   11bf8:	mov	r4, #1
   11bfc:	str	r2, [sp, #8]
   11c00:	umull	r3, r7, r1, r3
   11c04:	add	r7, r7, r6, lsl #1
   11c08:	adds	r3, r3, r0
   11c0c:	adc	r0, r7, r0, asr #31
   11c10:	subs	r7, r3, r1
   11c14:	sbcs	r7, r0, r2
   11c18:	mov	r7, r1
   11c1c:	bcs	11cb0 <__assert_fail@plt+0xc54>
   11c20:	ldr	sl, [sp, #4]
   11c24:	movw	r1, #21713	; 0x54d1
   11c28:	movt	r1, #1
   11c2c:	mov	r0, sl
   11c30:	bl	11050 <strspn@plt>
   11c34:	mov	r8, r7
   11c38:	mov	r7, r0
   11c3c:	mov	r0, sl
   11c40:	mov	r1, r7
   11c44:	bl	149bc <__assert_fail@plt+0x3960>
   11c48:	movw	r1, #21724	; 0x54dc
   11c4c:	mov	r6, r0
   11c50:	mov	r0, #0
   11c54:	mov	r2, #5
   11c58:	movt	r1, #1
   11c5c:	bl	10e94 <dcgettext@plt>
   11c60:	mov	r4, r0
   11c64:	mov	r0, r6
   11c68:	bl	13ff8 <__assert_fail@plt+0x2f9c>
   11c6c:	mov	r3, r0
   11c70:	mov	r0, #0
   11c74:	mov	r1, #0
   11c78:	mov	r2, r4
   11c7c:	bl	10f00 <error@plt>
   11c80:	mov	r0, r6
   11c84:	bl	12540 <__assert_fail@plt+0x14e4>
   11c88:	add	r0, sl, r7
   11c8c:	mov	r7, r8
   11c90:	mov	sl, #0
   11c94:	sub	r8, r0, #1
   11c98:	mov	r4, #1
   11c9c:	b	11ca8 <__assert_fail@plt+0xc4c>
   11ca0:	mov	r9, #1
   11ca4:	mov	r4, #0
   11ca8:	add	r8, r8, #1
   11cac:	b	11a68 <__assert_fail@plt+0xa0c>
   11cb0:	mov	r7, r3
   11cb4:	str	r0, [sp, #8]
   11cb8:	b	11ca8 <__assert_fail@plt+0xc4c>
   11cbc:	and	r0, sl, r4
   11cc0:	tst	r0, #1
   11cc4:	beq	11ce0 <__assert_fail@plt+0xc84>
   11cc8:	mov	r0, r7
   11ccc:	tst	r9, #1
   11cd0:	beq	11cec <__assert_fail@plt+0xc90>
   11cd4:	ldr	r1, [sp, #8]
   11cd8:	bl	11d58 <__assert_fail@plt+0xcfc>
   11cdc:	b	11cfc <__assert_fail@plt+0xca0>
   11ce0:	tst	sl, #1
   11ce4:	bne	11d04 <__assert_fail@plt+0xca8>
   11ce8:	b	11d50 <__assert_fail@plt+0xcf4>
   11cec:	tst	r5, #1
   11cf0:	beq	11d0c <__assert_fail@plt+0xcb0>
   11cf4:	ldr	r1, [sp, #8]
   11cf8:	bl	11dbc <__assert_fail@plt+0xd60>
   11cfc:	cmp	r0, #0
   11d00:	beq	11d50 <__assert_fail@plt+0xcf4>
   11d04:	sub	sp, fp, #28
   11d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d0c:	ldr	r1, [sp, #8]
   11d10:	sub	sp, fp, #28
   11d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d18:	b	11940 <__assert_fail@plt+0x8e4>
   11d1c:	movw	r1, #21749	; 0x54f5
   11d20:	mov	r0, #0
   11d24:	mov	r2, #5
   11d28:	movt	r1, #1
   11d2c:	bl	10e94 <dcgettext@plt>
   11d30:	mov	r4, r0
   11d34:	mov	r0, r8
   11d38:	bl	13ff8 <__assert_fail@plt+0x2f9c>
   11d3c:	mov	r3, r0
   11d40:	mov	r0, #0
   11d44:	mov	r1, #0
   11d48:	mov	r2, r4
   11d4c:	bl	10f00 <error@plt>
   11d50:	mov	r0, #1
   11d54:	bl	10f54 <exit@plt>
   11d58:	push	{r4, r5, r6, r7, fp, lr}
   11d5c:	add	fp, sp, #16
   11d60:	movw	r7, #24952	; 0x6178
   11d64:	mov	r5, r1
   11d68:	mov	r6, r0
   11d6c:	movt	r7, #2
   11d70:	ldrd	r0, [r7]
   11d74:	orrs	r0, r0, r1
   11d78:	beq	11da8 <__assert_fail@plt+0xd4c>
   11d7c:	movw	r1, #22274	; 0x5702
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	mov	r4, #0
   11d8c:	movt	r1, #1
   11d90:	bl	10e94 <dcgettext@plt>
   11d94:	mov	r2, r0
   11d98:	mov	r0, #0
   11d9c:	mov	r1, #0
   11da0:	bl	10f00 <error@plt>
   11da4:	b	11dac <__assert_fail@plt+0xd50>
   11da8:	mov	r4, #1
   11dac:	mov	r0, r4
   11db0:	str	r6, [r7]
   11db4:	str	r5, [r7, #4]
   11db8:	pop	{r4, r5, r6, r7, fp, pc}
   11dbc:	push	{r4, r5, r6, r7, fp, lr}
   11dc0:	add	fp, sp, #16
   11dc4:	movw	r7, #24960	; 0x6180
   11dc8:	mov	r5, r1
   11dcc:	mov	r6, r0
   11dd0:	movt	r7, #2
   11dd4:	ldrd	r0, [r7]
   11dd8:	orrs	r0, r0, r1
   11ddc:	beq	11e0c <__assert_fail@plt+0xdb0>
   11de0:	movw	r1, #22321	; 0x5731
   11de4:	mov	r0, #0
   11de8:	mov	r2, #5
   11dec:	mov	r4, #0
   11df0:	movt	r1, #1
   11df4:	bl	10e94 <dcgettext@plt>
   11df8:	mov	r2, r0
   11dfc:	mov	r0, #0
   11e00:	mov	r1, #0
   11e04:	bl	10f00 <error@plt>
   11e08:	b	11e10 <__assert_fail@plt+0xdb4>
   11e0c:	mov	r4, #1
   11e10:	mov	r0, r4
   11e14:	str	r6, [r7]
   11e18:	str	r5, [r7, #4]
   11e1c:	pop	{r4, r5, r6, r7, fp, pc}
   11e20:	push	{r4, r5, r6, r7, fp, lr}
   11e24:	add	fp, sp, #16
   11e28:	movw	r0, #24936	; 0x6168
   11e2c:	movt	r0, #2
   11e30:	ldr	r1, [r0]
   11e34:	movw	r0, #24940	; 0x616c
   11e38:	movt	r0, #2
   11e3c:	ldr	ip, [r0]
   11e40:	cmp	r1, #0
   11e44:	beq	11e84 <__assert_fail@plt+0xe28>
   11e48:	mov	r6, #0
   11e4c:	mov	r2, ip
   11e50:	mov	r3, r1
   11e54:	mov	r5, #0
   11e58:	ldm	r2, {r4, r7}
   11e5c:	orrs	r0, r4, r7
   11e60:	beq	11f14 <__assert_fail@plt+0xeb8>
   11e64:	subs	r0, r6, r4
   11e68:	sbcs	r0, r5, r7
   11e6c:	bcs	11f20 <__assert_fail@plt+0xec4>
   11e70:	add	r2, r2, #8
   11e74:	subs	r3, r3, #1
   11e78:	mov	r6, r4
   11e7c:	mov	r5, r7
   11e80:	bne	11e58 <__assert_fail@plt+0xdfc>
   11e84:	movw	r2, #24952	; 0x6178
   11e88:	movt	r2, #2
   11e8c:	ldrd	r4, [r2]
   11e90:	movw	r2, #24960	; 0x6180
   11e94:	movt	r2, #2
   11e98:	ldrd	r2, [r2]
   11e9c:	orrs	r7, r2, r3
   11ea0:	orrsne	r6, r4, r5
   11ea4:	bne	11f44 <__assert_fail@plt+0xee8>
   11ea8:	cmp	r1, #0
   11eac:	beq	11ed4 <__assert_fail@plt+0xe78>
   11eb0:	mov	r6, #0
   11eb4:	cmp	r1, #1
   11eb8:	bne	11f00 <__assert_fail@plt+0xea4>
   11ebc:	orr	r0, r4, r2
   11ec0:	orr	r1, r5, r3
   11ec4:	mov	r7, #0
   11ec8:	orrs	r0, r0, r1
   11ecc:	ldrdeq	r6, [ip]
   11ed0:	b	11f04 <__assert_fail@plt+0xea8>
   11ed4:	cmp	r7, #0
   11ed8:	orr	r0, r4, r5
   11edc:	mov	r7, #0
   11ee0:	movweq	r2, #8
   11ee4:	cmp	r0, #0
   11ee8:	movw	r0, #25304	; 0x62d8
   11eec:	movt	r0, #2
   11ef0:	movne	r2, r4
   11ef4:	mov	r6, r2
   11ef8:	str	r2, [r0]
   11efc:	b	11f04 <__assert_fail@plt+0xea8>
   11f00:	mov	r7, #0
   11f04:	movw	r0, #24968	; 0x6188
   11f08:	movt	r0, #2
   11f0c:	strd	r6, [r0]
   11f10:	pop	{r4, r5, r6, r7, fp, pc}
   11f14:	movw	r1, #22368	; 0x5760
   11f18:	movt	r1, #1
   11f1c:	b	11f28 <__assert_fail@plt+0xecc>
   11f20:	movw	r1, #22389	; 0x5775
   11f24:	movt	r1, #1
   11f28:	mov	r0, #0
   11f2c:	mov	r2, #5
   11f30:	bl	10e94 <dcgettext@plt>
   11f34:	mov	r2, r0
   11f38:	mov	r0, #1
   11f3c:	mov	r1, #0
   11f40:	bl	10f00 <error@plt>
   11f44:	movw	r1, #22417	; 0x5791
   11f48:	movt	r1, #1
   11f4c:	b	11f28 <__assert_fail@plt+0xecc>
   11f50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f54:	add	fp, sp, #24
   11f58:	mov	r9, r0
   11f5c:	mov	r0, #0
   11f60:	mov	r8, r1
   11f64:	strb	r0, [r3]
   11f68:	movw	r0, #24968	; 0x6188
   11f6c:	movt	r0, #2
   11f70:	ldrd	r6, [r0]
   11f74:	orrs	r0, r6, r7
   11f78:	bne	11fdc <__assert_fail@plt+0xf80>
   11f7c:	movw	r0, #24936	; 0x6168
   11f80:	ldr	r1, [r2]
   11f84:	movt	r0, #2
   11f88:	ldr	r0, [r0]
   11f8c:	cmp	r1, r0
   11f90:	bcs	11fc8 <__assert_fail@plt+0xf6c>
   11f94:	movw	r7, #24940	; 0x616c
   11f98:	movt	r7, #2
   11f9c:	ldr	r7, [r7]
   11fa0:	add	r4, r7, r1, lsl #3
   11fa4:	ldrd	r6, [r4]
   11fa8:	subs	r5, r9, r6
   11fac:	sbcs	r5, r8, r7
   11fb0:	bcc	12000 <__assert_fail@plt+0xfa4>
   11fb4:	add	r1, r1, #1
   11fb8:	add	r4, r4, #8
   11fbc:	cmp	r1, r0
   11fc0:	str	r1, [r2]
   11fc4:	bcc	11fa4 <__assert_fail@plt+0xf48>
   11fc8:	movw	r1, #24952	; 0x6178
   11fcc:	movt	r1, #2
   11fd0:	ldrd	r6, [r1]
   11fd4:	orrs	r1, r6, r7
   11fd8:	beq	1200c <__assert_fail@plt+0xfb0>
   11fdc:	mov	r0, r9
   11fe0:	mov	r1, r8
   11fe4:	mov	r2, r6
   11fe8:	mov	r3, r7
   11fec:	bl	14da0 <__assert_fail@plt+0x3d44>
   11ff0:	adds	r0, r6, r9
   11ff4:	adc	r1, r7, r8
   11ff8:	subs	r6, r0, r2
   11ffc:	sbc	r7, r1, r3
   12000:	mov	r0, r6
   12004:	mov	r1, r7
   12008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1200c:	movw	r1, #24960	; 0x6180
   12010:	movt	r1, #2
   12014:	ldrd	r6, [r1]
   12018:	orrs	r1, r6, r7
   1201c:	beq	12040 <__assert_fail@plt+0xfe4>
   12020:	movw	r1, #24940	; 0x616c
   12024:	movt	r1, #2
   12028:	ldr	r1, [r1]
   1202c:	add	r0, r1, r0, lsl #3
   12030:	ldrd	r0, [r0, #-8]
   12034:	subs	r0, r9, r0
   12038:	sbc	r1, r8, r1
   1203c:	b	11fe4 <__assert_fail@plt+0xf88>
   12040:	mov	r0, #1
   12044:	mov	r6, #0
   12048:	mov	r7, #0
   1204c:	strb	r0, [r3]
   12050:	b	12000 <__assert_fail@plt+0xfa4>
   12054:	movw	r1, #24976	; 0x6190
   12058:	mov	r2, #0
   1205c:	cmp	r0, #0
   12060:	movt	r1, #2
   12064:	strb	r2, [r1]
   12068:	movw	r1, #24808	; 0x60e8
   1206c:	movt	r1, #2
   12070:	movne	r1, r0
   12074:	movw	r0, #24980	; 0x6194
   12078:	movt	r0, #2
   1207c:	str	r1, [r0]
   12080:	bx	lr
   12084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12088:	add	fp, sp, #28
   1208c:	sub	sp, sp, #4
   12090:	cmp	r0, #0
   12094:	beq	12140 <__assert_fail@plt+0x10e4>
   12098:	movw	r7, #24984	; 0x6198
   1209c:	mov	r5, r0
   120a0:	movt	r7, #2
   120a4:	ldr	r0, [r7]
   120a8:	cmp	r0, #0
   120ac:	beq	12244 <__assert_fail@plt+0x11e8>
   120b0:	bl	10f78 <__errno_location@plt>
   120b4:	ldr	r4, [r0]
   120b8:	mov	r6, r0
   120bc:	mov	r0, r5
   120c0:	bl	10ee8 <ferror_unlocked@plt>
   120c4:	cmp	r0, #0
   120c8:	movw	r1, #22550	; 0x5816
   120cc:	moveq	r4, r0
   120d0:	ldr	r0, [r7]
   120d4:	movt	r1, #1
   120d8:	bl	10e28 <strcmp@plt>
   120dc:	cmp	r0, #0
   120e0:	beq	120f8 <__assert_fail@plt+0x109c>
   120e4:	mov	r0, r5
   120e8:	bl	12448 <__assert_fail@plt+0x13ec>
   120ec:	cmp	r0, #0
   120f0:	ldrne	r4, [r6]
   120f4:	b	12100 <__assert_fail@plt+0x10a4>
   120f8:	mov	r0, r5
   120fc:	bl	10ffc <clearerr_unlocked@plt>
   12100:	cmp	r4, #0
   12104:	beq	12140 <__assert_fail@plt+0x10e4>
   12108:	ldr	r2, [r7]
   1210c:	mov	r0, #0
   12110:	mov	r1, #3
   12114:	bl	13e64 <__assert_fail@plt+0x2e08>
   12118:	movw	r2, #21789	; 0x551d
   1211c:	mov	r3, r0
   12120:	mov	r0, #0
   12124:	mov	r1, r4
   12128:	movt	r2, #1
   1212c:	bl	10f00 <error@plt>
   12130:	movw	r1, #24932	; 0x6164
   12134:	mov	r0, #1
   12138:	movt	r1, #2
   1213c:	str	r0, [r1]
   12140:	movw	sl, #24980	; 0x6194
   12144:	movt	sl, #2
   12148:	ldr	r0, [sl]
   1214c:	add	r1, r0, #4
   12150:	str	r1, [sl]
   12154:	ldr	r7, [r0]
   12158:	cmp	r7, #0
   1215c:	beq	12218 <__assert_fail@plt+0x11bc>
   12160:	movw	r9, #22550	; 0x5816
   12164:	movw	r5, #21789	; 0x551d
   12168:	mov	r8, #1
   1216c:	movt	r9, #1
   12170:	movt	r5, #1
   12174:	mov	r0, r7
   12178:	mov	r1, r9
   1217c:	bl	10e28 <strcmp@plt>
   12180:	cmp	r0, #0
   12184:	beq	121a0 <__assert_fail@plt+0x1144>
   12188:	movw	r1, #21452	; 0x53cc
   1218c:	mov	r0, r7
   12190:	movt	r1, #1
   12194:	bl	11008 <fopen64@plt>
   12198:	mov	r6, r0
   1219c:	b	121b8 <__assert_fail@plt+0x115c>
   121a0:	movw	r0, #24976	; 0x6190
   121a4:	movt	r0, #2
   121a8:	strb	r8, [r0]
   121ac:	movw	r0, #24912	; 0x6150
   121b0:	movt	r0, #2
   121b4:	ldr	r6, [r0]
   121b8:	cmp	r6, #0
   121bc:	bne	12220 <__assert_fail@plt+0x11c4>
   121c0:	bl	10f78 <__errno_location@plt>
   121c4:	ldr	r4, [r0]
   121c8:	mov	r0, #0
   121cc:	mov	r1, #3
   121d0:	mov	r2, r7
   121d4:	mov	r6, #0
   121d8:	bl	13e64 <__assert_fail@plt+0x2e08>
   121dc:	mov	r3, r0
   121e0:	mov	r0, #0
   121e4:	mov	r1, r4
   121e8:	mov	r2, r5
   121ec:	bl	10f00 <error@plt>
   121f0:	movw	r0, #24932	; 0x6164
   121f4:	movt	r0, #2
   121f8:	str	r8, [r0]
   121fc:	ldr	r0, [sl]
   12200:	add	r1, r0, #4
   12204:	str	r1, [sl]
   12208:	ldr	r7, [r0]
   1220c:	cmp	r7, #0
   12210:	bne	12174 <__assert_fail@plt+0x1118>
   12214:	b	12238 <__assert_fail@plt+0x11dc>
   12218:	mov	r6, #0
   1221c:	b	12238 <__assert_fail@plt+0x11dc>
   12220:	movw	r0, #24984	; 0x6198
   12224:	mov	r1, #2
   12228:	movt	r0, #2
   1222c:	str	r7, [r0]
   12230:	mov	r0, r6
   12234:	bl	1240c <__assert_fail@plt+0x13b0>
   12238:	mov	r0, r6
   1223c:	sub	sp, fp, #28
   12240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12244:	movw	r0, #21792	; 0x5520
   12248:	movw	r1, #21802	; 0x552a
   1224c:	movw	r3, #21822	; 0x553e
   12250:	mov	r2, #340	; 0x154
   12254:	movt	r0, #1
   12258:	movt	r1, #1
   1225c:	movt	r3, #1
   12260:	bl	1105c <__assert_fail@plt>
   12264:	push	{fp, lr}
   12268:	mov	fp, sp
   1226c:	movw	r0, #24976	; 0x6190
   12270:	movt	r0, #2
   12274:	ldrb	r0, [r0]
   12278:	cmp	r0, #1
   1227c:	popne	{fp, pc}
   12280:	movw	r0, #24912	; 0x6150
   12284:	movt	r0, #2
   12288:	ldr	r0, [r0]
   1228c:	bl	12448 <__assert_fail@plt+0x13ec>
   12290:	cmp	r0, #0
   12294:	bne	1229c <__assert_fail@plt+0x1240>
   12298:	pop	{fp, pc}
   1229c:	bl	10f78 <__errno_location@plt>
   122a0:	ldr	r1, [r0]
   122a4:	movw	r2, #22550	; 0x5816
   122a8:	mov	r0, #1
   122ac:	movt	r2, #1
   122b0:	bl	10f00 <error@plt>
   122b4:	push	{r4, sl, fp, lr}
   122b8:	add	fp, sp, #8
   122bc:	movw	r1, #21846	; 0x5556
   122c0:	mov	r0, #0
   122c4:	mov	r2, #5
   122c8:	movt	r1, #1
   122cc:	bl	10e94 <dcgettext@plt>
   122d0:	movw	r4, #24916	; 0x6154
   122d4:	movt	r4, #2
   122d8:	ldr	r1, [r4]
   122dc:	bl	10e10 <fputs_unlocked@plt>
   122e0:	movw	r1, #21909	; 0x5595
   122e4:	mov	r0, #0
   122e8:	mov	r2, #5
   122ec:	movt	r1, #1
   122f0:	bl	10e94 <dcgettext@plt>
   122f4:	ldr	r1, [r4]
   122f8:	pop	{r4, sl, fp, lr}
   122fc:	b	10e10 <fputs_unlocked@plt>
   12300:	movw	r1, #24988	; 0x619c
   12304:	movt	r1, #2
   12308:	str	r0, [r1]
   1230c:	bx	lr
   12310:	movw	r1, #24992	; 0x61a0
   12314:	movt	r1, #2
   12318:	strb	r0, [r1]
   1231c:	bx	lr
   12320:	push	{r4, r5, r6, sl, fp, lr}
   12324:	add	fp, sp, #16
   12328:	sub	sp, sp, #8
   1232c:	movw	r0, #24916	; 0x6154
   12330:	movt	r0, #2
   12334:	ldr	r0, [r0]
   12338:	bl	14b48 <__assert_fail@plt+0x3aec>
   1233c:	cmp	r0, #0
   12340:	beq	12368 <__assert_fail@plt+0x130c>
   12344:	movw	r0, #24992	; 0x61a0
   12348:	movt	r0, #2
   1234c:	ldrb	r0, [r0]
   12350:	cmp	r0, #0
   12354:	beq	12388 <__assert_fail@plt+0x132c>
   12358:	bl	10f78 <__errno_location@plt>
   1235c:	ldr	r0, [r0]
   12360:	cmp	r0, #32
   12364:	bne	12388 <__assert_fail@plt+0x132c>
   12368:	movw	r0, #24904	; 0x6148
   1236c:	movt	r0, #2
   12370:	ldr	r0, [r0]
   12374:	bl	14b48 <__assert_fail@plt+0x3aec>
   12378:	cmp	r0, #0
   1237c:	subeq	sp, fp, #16
   12380:	popeq	{r4, r5, r6, sl, fp, pc}
   12384:	b	123f8 <__assert_fail@plt+0x139c>
   12388:	movw	r1, #21442	; 0x53c2
   1238c:	mov	r0, #0
   12390:	mov	r2, #5
   12394:	movt	r1, #1
   12398:	bl	10e94 <dcgettext@plt>
   1239c:	mov	r4, r0
   123a0:	movw	r0, #24988	; 0x619c
   123a4:	movt	r0, #2
   123a8:	ldr	r6, [r0]
   123ac:	bl	10f78 <__errno_location@plt>
   123b0:	ldr	r5, [r0]
   123b4:	cmp	r6, #0
   123b8:	bne	123d4 <__assert_fail@plt+0x1378>
   123bc:	movw	r2, #21789	; 0x551d
   123c0:	mov	r0, #0
   123c4:	mov	r1, r5
   123c8:	mov	r3, r4
   123cc:	movt	r2, #1
   123d0:	b	123f4 <__assert_fail@plt+0x1398>
   123d4:	mov	r0, r6
   123d8:	bl	13db8 <__assert_fail@plt+0x2d5c>
   123dc:	movw	r2, #22477	; 0x57cd
   123e0:	mov	r3, r0
   123e4:	str	r4, [sp]
   123e8:	mov	r0, #0
   123ec:	mov	r1, r5
   123f0:	movt	r2, #1
   123f4:	bl	10f00 <error@plt>
   123f8:	movw	r0, #24820	; 0x60f4
   123fc:	movt	r0, #2
   12400:	ldr	r0, [r0]
   12404:	bl	10e58 <_exit@plt>
   12408:	b	10e34 <posix_fadvise64@plt>
   1240c:	cmp	r0, #0
   12410:	bxeq	lr
   12414:	push	{r4, sl, fp, lr}
   12418:	add	fp, sp, #8
   1241c:	sub	sp, sp, #16
   12420:	mov	r4, r1
   12424:	bl	10fa8 <fileno@plt>
   12428:	mov	r1, #0
   1242c:	mov	r2, #0
   12430:	mov	r3, #0
   12434:	str	r1, [sp]
   12438:	stmib	sp, {r1, r4}
   1243c:	bl	10e34 <posix_fadvise64@plt>
   12440:	sub	sp, fp, #8
   12444:	pop	{r4, sl, fp, pc}
   12448:	push	{r4, r5, r6, sl, fp, lr}
   1244c:	add	fp, sp, #16
   12450:	sub	sp, sp, #8
   12454:	mov	r4, r0
   12458:	bl	10fa8 <fileno@plt>
   1245c:	cmn	r0, #1
   12460:	ble	124d4 <__assert_fail@plt+0x1478>
   12464:	mov	r0, r4
   12468:	bl	10f24 <__freading@plt>
   1246c:	cmp	r0, #0
   12470:	beq	1249c <__assert_fail@plt+0x1440>
   12474:	mov	r0, r4
   12478:	bl	10fa8 <fileno@plt>
   1247c:	mov	r1, #1
   12480:	mov	r2, #0
   12484:	mov	r3, #0
   12488:	str	r1, [sp]
   1248c:	bl	10ec4 <lseek64@plt>
   12490:	and	r0, r0, r1
   12494:	cmn	r0, #1
   12498:	beq	124d4 <__assert_fail@plt+0x1478>
   1249c:	mov	r0, r4
   124a0:	bl	124e4 <__assert_fail@plt+0x1488>
   124a4:	cmp	r0, #0
   124a8:	beq	124d4 <__assert_fail@plt+0x1478>
   124ac:	bl	10f78 <__errno_location@plt>
   124b0:	ldr	r6, [r0]
   124b4:	mov	r5, r0
   124b8:	mov	r0, r4
   124bc:	bl	10fc0 <fclose@plt>
   124c0:	cmp	r6, #0
   124c4:	strne	r6, [r5]
   124c8:	mvnne	r0, #0
   124cc:	sub	sp, fp, #16
   124d0:	pop	{r4, r5, r6, sl, fp, pc}
   124d4:	mov	r0, r4
   124d8:	sub	sp, fp, #16
   124dc:	pop	{r4, r5, r6, sl, fp, lr}
   124e0:	b	10fc0 <fclose@plt>
   124e4:	push	{r4, sl, fp, lr}
   124e8:	add	fp, sp, #8
   124ec:	sub	sp, sp, #8
   124f0:	mov	r4, r0
   124f4:	cmp	r0, #0
   124f8:	beq	12530 <__assert_fail@plt+0x14d4>
   124fc:	mov	r0, r4
   12500:	bl	10f24 <__freading@plt>
   12504:	cmp	r0, #0
   12508:	beq	12530 <__assert_fail@plt+0x14d4>
   1250c:	ldrb	r0, [r4, #1]
   12510:	tst	r0, #1
   12514:	beq	12530 <__assert_fail@plt+0x14d4>
   12518:	mov	r0, #1
   1251c:	mov	r2, #0
   12520:	mov	r3, #0
   12524:	str	r0, [sp]
   12528:	mov	r0, r4
   1252c:	bl	12568 <__assert_fail@plt+0x150c>
   12530:	mov	r0, r4
   12534:	sub	sp, fp, #8
   12538:	pop	{r4, sl, fp, lr}
   1253c:	b	10e40 <fflush@plt>
   12540:	push	{r4, r5, r6, sl, fp, lr}
   12544:	add	fp, sp, #16
   12548:	mov	r4, r0
   1254c:	bl	10f78 <__errno_location@plt>
   12550:	ldr	r6, [r0]
   12554:	mov	r5, r0
   12558:	mov	r0, r4
   1255c:	bl	10e4c <free@plt>
   12560:	str	r6, [r5]
   12564:	pop	{r4, r5, r6, sl, fp, pc}
   12568:	push	{r4, r5, r6, r7, fp, lr}
   1256c:	add	fp, sp, #16
   12570:	sub	sp, sp, #8
   12574:	mov	r4, r0
   12578:	ldr	r0, [r0, #4]
   1257c:	mov	r5, r3
   12580:	mov	r6, r2
   12584:	ldr	r1, [r4, #8]
   12588:	cmp	r1, r0
   1258c:	bne	125a8 <__assert_fail@plt+0x154c>
   12590:	ldrd	r0, [r4, #16]
   12594:	cmp	r1, r0
   12598:	bne	125a8 <__assert_fail@plt+0x154c>
   1259c:	ldr	r0, [r4, #36]	; 0x24
   125a0:	cmp	r0, #0
   125a4:	beq	125c0 <__assert_fail@plt+0x1564>
   125a8:	mov	r0, r4
   125ac:	mov	r2, r6
   125b0:	mov	r3, r5
   125b4:	sub	sp, fp, #16
   125b8:	pop	{r4, r5, r6, r7, fp, lr}
   125bc:	b	10fcc <fseeko64@plt>
   125c0:	ldr	r7, [fp, #8]
   125c4:	mov	r0, r4
   125c8:	bl	10fa8 <fileno@plt>
   125cc:	mov	r2, r6
   125d0:	mov	r3, r5
   125d4:	str	r7, [sp]
   125d8:	bl	10ec4 <lseek64@plt>
   125dc:	and	r2, r0, r1
   125e0:	cmn	r2, #1
   125e4:	beq	12600 <__assert_fail@plt+0x15a4>
   125e8:	strd	r0, [r4, #80]	; 0x50
   125ec:	ldr	r0, [r4]
   125f0:	bic	r0, r0, #16
   125f4:	str	r0, [r4]
   125f8:	mov	r0, #0
   125fc:	b	12604 <__assert_fail@plt+0x15a8>
   12600:	mvn	r0, #0
   12604:	sub	sp, fp, #16
   12608:	pop	{r4, r5, r6, r7, fp, pc}
   1260c:	push	{r4, r5, fp, lr}
   12610:	add	fp, sp, #8
   12614:	cmp	r0, #0
   12618:	beq	126ac <__assert_fail@plt+0x1650>
   1261c:	mov	r1, #47	; 0x2f
   12620:	mov	r4, r0
   12624:	bl	10fe4 <strrchr@plt>
   12628:	cmp	r0, #0
   1262c:	mov	r5, r4
   12630:	addne	r5, r0, #1
   12634:	sub	r0, r5, r4
   12638:	cmp	r0, #7
   1263c:	blt	12690 <__assert_fail@plt+0x1634>
   12640:	movw	r1, #22540	; 0x580c
   12644:	sub	r0, r5, #7
   12648:	mov	r2, #7
   1264c:	movt	r1, #1
   12650:	bl	1102c <strncmp@plt>
   12654:	cmp	r0, #0
   12658:	bne	12690 <__assert_fail@plt+0x1634>
   1265c:	movw	r1, #22548	; 0x5814
   12660:	mov	r0, r5
   12664:	mov	r2, #3
   12668:	movt	r1, #1
   1266c:	bl	1102c <strncmp@plt>
   12670:	cmp	r0, #0
   12674:	beq	12680 <__assert_fail@plt+0x1624>
   12678:	mov	r4, r5
   1267c:	b	12690 <__assert_fail@plt+0x1634>
   12680:	movw	r0, #24888	; 0x6138
   12684:	add	r4, r5, #3
   12688:	movt	r0, #2
   1268c:	str	r4, [r0]
   12690:	movw	r0, #24892	; 0x613c
   12694:	movt	r0, #2
   12698:	str	r4, [r0]
   1269c:	movw	r0, #24996	; 0x61a4
   126a0:	movt	r0, #2
   126a4:	str	r4, [r0]
   126a8:	pop	{r4, r5, fp, pc}
   126ac:	movw	r0, #24904	; 0x6148
   126b0:	movt	r0, #2
   126b4:	ldr	r1, [r0]
   126b8:	movw	r0, #22484	; 0x57d4
   126bc:	movt	r0, #1
   126c0:	bl	11020 <fputs@plt>
   126c4:	bl	11038 <abort@plt>
   126c8:	push	{r4, r5, r6, sl, fp, lr}
   126cc:	add	fp, sp, #16
   126d0:	mov	r4, r0
   126d4:	movw	r0, #25000	; 0x61a8
   126d8:	movt	r0, #2
   126dc:	cmp	r4, #0
   126e0:	moveq	r4, r0
   126e4:	bl	10f78 <__errno_location@plt>
   126e8:	ldr	r6, [r0]
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #48	; 0x30
   126f8:	bl	14954 <__assert_fail@plt+0x38f8>
   126fc:	str	r6, [r5]
   12700:	pop	{r4, r5, r6, sl, fp, pc}
   12704:	movw	r1, #25000	; 0x61a8
   12708:	cmp	r0, #0
   1270c:	movt	r1, #2
   12710:	movne	r1, r0
   12714:	ldr	r0, [r1]
   12718:	bx	lr
   1271c:	movw	r2, #25000	; 0x61a8
   12720:	cmp	r0, #0
   12724:	movt	r2, #2
   12728:	movne	r2, r0
   1272c:	str	r1, [r2]
   12730:	bx	lr
   12734:	movw	r3, #25000	; 0x61a8
   12738:	cmp	r0, #0
   1273c:	and	r2, r2, #1
   12740:	movt	r3, #2
   12744:	movne	r3, r0
   12748:	ubfx	r0, r1, #5, #3
   1274c:	and	r1, r1, #31
   12750:	add	ip, r3, r0, lsl #2
   12754:	mov	r0, #1
   12758:	ldr	r3, [ip, #8]
   1275c:	and	r0, r0, r3, lsr r1
   12760:	eor	r2, r0, r2
   12764:	eor	r1, r3, r2, lsl r1
   12768:	str	r1, [ip, #8]
   1276c:	bx	lr
   12770:	movw	r2, #25000	; 0x61a8
   12774:	cmp	r0, #0
   12778:	movt	r2, #2
   1277c:	movne	r2, r0
   12780:	ldr	r0, [r2, #4]
   12784:	str	r1, [r2, #4]
   12788:	bx	lr
   1278c:	push	{fp, lr}
   12790:	mov	fp, sp
   12794:	movw	r3, #25000	; 0x61a8
   12798:	cmp	r0, #0
   1279c:	movt	r3, #2
   127a0:	movne	r3, r0
   127a4:	cmp	r1, #0
   127a8:	mov	r0, #10
   127ac:	cmpne	r2, #0
   127b0:	str	r0, [r3]
   127b4:	bne	127bc <__assert_fail@plt+0x1760>
   127b8:	bl	11038 <abort@plt>
   127bc:	str	r1, [r3, #40]	; 0x28
   127c0:	str	r2, [r3, #44]	; 0x2c
   127c4:	pop	{fp, pc}
   127c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	add	fp, sp, #28
   127d0:	sub	sp, sp, #20
   127d4:	mov	r7, r0
   127d8:	ldr	r0, [fp, #8]
   127dc:	movw	r5, #25000	; 0x61a8
   127e0:	mov	r8, r3
   127e4:	mov	r9, r2
   127e8:	mov	sl, r1
   127ec:	movt	r5, #2
   127f0:	cmp	r0, #0
   127f4:	movne	r5, r0
   127f8:	bl	10f78 <__errno_location@plt>
   127fc:	ldr	r2, [r5, #40]	; 0x28
   12800:	ldr	r3, [r5, #44]	; 0x2c
   12804:	mov	r4, r0
   12808:	ldm	r5, {r0, r1}
   1280c:	add	r5, r5, #8
   12810:	ldr	r6, [r4]
   12814:	stm	sp, {r0, r1, r5}
   12818:	mov	r0, r7
   1281c:	mov	r1, sl
   12820:	str	r2, [sp, #12]
   12824:	str	r3, [sp, #16]
   12828:	mov	r2, r9
   1282c:	mov	r3, r8
   12830:	bl	12840 <__assert_fail@plt+0x17e4>
   12834:	str	r6, [r4]
   12838:	sub	sp, fp, #28
   1283c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12844:	add	fp, sp, #28
   12848:	sub	sp, sp, #156	; 0x9c
   1284c:	mov	r5, r0
   12850:	add	r0, r2, #1
   12854:	mov	r6, r1
   12858:	mov	sl, r3
   1285c:	str	r2, [fp, #-80]	; 0xffffffb0
   12860:	str	r0, [sp, #72]	; 0x48
   12864:	ldr	r0, [fp, #12]
   12868:	and	r1, r0, #1
   1286c:	str	r1, [sp, #32]
   12870:	and	r1, r0, #4
   12874:	str	r1, [sp, #28]
   12878:	ubfx	r9, r0, #1, #1
   1287c:	bl	10ed0 <__ctype_get_mb_cur_max@plt>
   12880:	str	r0, [sp, #40]	; 0x28
   12884:	ldr	r0, [fp, #24]
   12888:	ldr	r7, [fp, #8]
   1288c:	mov	r1, #0
   12890:	mov	lr, #0
   12894:	str	r5, [fp, #-84]	; 0xffffffac
   12898:	str	r1, [sp, #60]	; 0x3c
   1289c:	mov	r1, #1
   128a0:	str	r1, [fp, #-48]	; 0xffffffd0
   128a4:	str	r0, [sp, #80]	; 0x50
   128a8:	ldr	r0, [fp, #20]
   128ac:	str	r0, [sp, #76]	; 0x4c
   128b0:	mov	r0, #0
   128b4:	str	r0, [sp, #56]	; 0x38
   128b8:	mov	r0, #0
   128bc:	str	r0, [fp, #-88]	; 0xffffffa8
   128c0:	mov	r0, #0
   128c4:	str	r0, [fp, #-72]	; 0xffffffb8
   128c8:	mov	r0, #0
   128cc:	cmp	r7, #10
   128d0:	bhi	138ac <__assert_fail@plt+0x2850>
   128d4:	add	r1, pc, #24
   128d8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128dc:	mov	ip, r6
   128e0:	mov	r8, #0
   128e4:	mov	r2, #1
   128e8:	mov	r6, #0
   128ec:	mov	r3, sl
   128f0:	ldr	pc, [r1, r7, lsl #2]
   128f4:	andeq	r2, r1, r0, ror #19
   128f8:	andeq	r2, r1, r4, lsr sl
   128fc:	strdeq	r2, [r1], -r4
   12900:	ldrdeq	r2, [r1], -r8
   12904:	andeq	r2, r1, r8, lsr #20
   12908:	andeq	r2, r1, ip, asr sl
   1290c:	andeq	r2, r1, r4, lsl #20
   12910:	andeq	r2, r1, r0, ror #21
   12914:	andeq	r2, r1, r0, lsr #18
   12918:	andeq	r2, r1, r0, lsr #18
   1291c:	andeq	r2, r1, r0, ror #18
   12920:	movw	r0, #22630	; 0x5866
   12924:	mov	r1, r7
   12928:	mov	r6, r5
   1292c:	mov	r4, ip
   12930:	mov	r5, lr
   12934:	movt	r0, #1
   12938:	bl	14010 <__assert_fail@plt+0x2fb4>
   1293c:	str	r0, [sp, #76]	; 0x4c
   12940:	movw	r0, #22460	; 0x57bc
   12944:	mov	r1, r7
   12948:	movt	r0, #1
   1294c:	bl	14010 <__assert_fail@plt+0x2fb4>
   12950:	mov	lr, r5
   12954:	mov	r5, r6
   12958:	mov	ip, r4
   1295c:	str	r0, [sp, #80]	; 0x50
   12960:	mov	r8, #0
   12964:	tst	r9, #1
   12968:	str	lr, [sp, #44]	; 0x2c
   1296c:	bne	129a4 <__assert_fail@plt+0x1948>
   12970:	ldr	r0, [sp, #76]	; 0x4c
   12974:	ldrb	r0, [r0]
   12978:	cmp	r0, #0
   1297c:	beq	129a4 <__assert_fail@plt+0x1948>
   12980:	ldr	r1, [sp, #76]	; 0x4c
   12984:	mov	r8, #0
   12988:	add	r1, r1, #1
   1298c:	cmp	r8, ip
   12990:	strbcc	r0, [r5, r8]
   12994:	ldrb	r0, [r1, r8]
   12998:	add	r8, r8, #1
   1299c:	cmp	r0, #0
   129a0:	bne	1298c <__assert_fail@plt+0x1930>
   129a4:	ldr	r6, [sp, #80]	; 0x50
   129a8:	mov	r4, ip
   129ac:	mov	r0, r6
   129b0:	bl	10f6c <strlen@plt>
   129b4:	mov	ip, r4
   129b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129bc:	ldr	lr, [sp, #44]	; 0x2c
   129c0:	str	r6, [fp, #-88]	; 0xffffffa8
   129c4:	str	r0, [fp, #-72]	; 0xffffffb8
   129c8:	mov	r2, #1
   129cc:	mov	r6, r9
   129d0:	mov	r3, sl
   129d4:	b	12ae0 <__assert_fail@plt+0x1a84>
   129d8:	mov	r0, #1
   129dc:	b	12a34 <__assert_fail@plt+0x19d8>
   129e0:	mov	r7, #0
   129e4:	mov	r8, #0
   129e8:	mov	r2, r0
   129ec:	mov	r6, #0
   129f0:	b	12ae0 <__assert_fail@plt+0x1a84>
   129f4:	tst	r9, #1
   129f8:	bne	12a34 <__assert_fail@plt+0x19d8>
   129fc:	mov	r2, r0
   12a00:	b	12a8c <__assert_fail@plt+0x1a30>
   12a04:	mov	r0, #1
   12a08:	mov	r8, #0
   12a0c:	mov	r7, #5
   12a10:	mov	r2, #1
   12a14:	str	r0, [fp, #-72]	; 0xffffffb8
   12a18:	movw	r0, #22628	; 0x5864
   12a1c:	movt	r0, #1
   12a20:	str	r0, [fp, #-88]	; 0xffffffa8
   12a24:	b	12a54 <__assert_fail@plt+0x19f8>
   12a28:	mov	r2, #1
   12a2c:	tst	r9, #1
   12a30:	beq	12a8c <__assert_fail@plt+0x1a30>
   12a34:	mov	r1, #1
   12a38:	mov	r8, #0
   12a3c:	mov	r7, #2
   12a40:	mov	r2, r0
   12a44:	str	r1, [fp, #-72]	; 0xffffffb8
   12a48:	movw	r1, #22460	; 0x57bc
   12a4c:	movt	r1, #1
   12a50:	str	r1, [fp, #-88]	; 0xffffffa8
   12a54:	mov	r6, #1
   12a58:	b	12ae0 <__assert_fail@plt+0x1a84>
   12a5c:	tst	r9, #1
   12a60:	beq	12ab0 <__assert_fail@plt+0x1a54>
   12a64:	mov	r0, #1
   12a68:	mov	r8, #0
   12a6c:	mov	r2, #1
   12a70:	mov	r6, #1
   12a74:	mov	r7, #5
   12a78:	str	r0, [fp, #-72]	; 0xffffffb8
   12a7c:	movw	r0, #22628	; 0x5864
   12a80:	movt	r0, #1
   12a84:	str	r0, [fp, #-88]	; 0xffffffa8
   12a88:	b	12ae0 <__assert_fail@plt+0x1a84>
   12a8c:	cmp	ip, #0
   12a90:	mov	r8, #1
   12a94:	mov	r6, #0
   12a98:	mov	r7, #2
   12a9c:	movne	r0, #39	; 0x27
   12aa0:	strbne	r0, [r5]
   12aa4:	movw	r0, #22460	; 0x57bc
   12aa8:	movt	r0, #1
   12aac:	b	12ad4 <__assert_fail@plt+0x1a78>
   12ab0:	cmp	ip, #0
   12ab4:	mov	r8, #1
   12ab8:	mov	r2, #1
   12abc:	mov	r7, #5
   12ac0:	mov	r6, #0
   12ac4:	movne	r0, #34	; 0x22
   12ac8:	strbne	r0, [r5]
   12acc:	movw	r0, #22628	; 0x5864
   12ad0:	movt	r0, #1
   12ad4:	str	r0, [fp, #-88]	; 0xffffffa8
   12ad8:	mov	r0, #1
   12adc:	str	r0, [fp, #-72]	; 0xffffffb8
   12ae0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ae4:	str	r7, [fp, #-68]	; 0xffffffbc
   12ae8:	str	r6, [fp, #-76]	; 0xffffffb4
   12aec:	str	r2, [sp, #84]	; 0x54
   12af0:	cmp	r0, #0
   12af4:	movwne	r0, #1
   12af8:	and	r1, r0, r6
   12afc:	and	r1, r2, r1
   12b00:	str	r1, [sp, #48]	; 0x30
   12b04:	sub	r1, r7, #2
   12b08:	clz	r1, r1
   12b0c:	lsr	r1, r1, #5
   12b10:	and	r1, r1, r6
   12b14:	str	r1, [sp, #64]	; 0x40
   12b18:	subs	r1, r7, #2
   12b1c:	eor	r7, r6, #1
   12b20:	movwne	r1, #1
   12b24:	str	r7, [sp, #92]	; 0x5c
   12b28:	orr	r7, r1, r7
   12b2c:	and	r1, r1, r2
   12b30:	and	r0, r0, r1
   12b34:	str	r7, [sp, #68]	; 0x44
   12b38:	mov	r7, #0
   12b3c:	str	r0, [fp, #-60]	; 0xffffffc4
   12b40:	orr	r0, r1, r6
   12b44:	ldr	r1, [fp, #16]
   12b48:	eor	r0, r0, #1
   12b4c:	clz	r1, r1
   12b50:	lsr	r1, r1, #5
   12b54:	orr	r0, r1, r0
   12b58:	str	r0, [fp, #-64]	; 0xffffffc0
   12b5c:	eor	r0, r2, #1
   12b60:	str	r0, [sp, #52]	; 0x34
   12b64:	cmn	r3, #1
   12b68:	beq	12b78 <__assert_fail@plt+0x1b1c>
   12b6c:	cmp	r7, r3
   12b70:	bne	12b84 <__assert_fail@plt+0x1b28>
   12b74:	b	136e0 <__assert_fail@plt+0x2684>
   12b78:	ldrb	r0, [r4, r7]
   12b7c:	cmp	r0, #0
   12b80:	beq	136e8 <__assert_fail@plt+0x268c>
   12b84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b88:	cmp	r0, #0
   12b8c:	beq	12bd4 <__assert_fail@plt+0x1b78>
   12b90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b94:	add	r5, r7, r0
   12b98:	cmp	r0, #2
   12b9c:	bcc	12be8 <__assert_fail@plt+0x1b8c>
   12ba0:	mov	r0, #0
   12ba4:	cmn	r3, #1
   12ba8:	str	r0, [fp, #-56]	; 0xffffffc8
   12bac:	bne	12bf0 <__assert_fail@plt+0x1b94>
   12bb0:	mov	r0, r4
   12bb4:	mov	r4, ip
   12bb8:	mov	r6, lr
   12bbc:	bl	10f6c <strlen@plt>
   12bc0:	mov	ip, r4
   12bc4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12bc8:	mov	lr, r6
   12bcc:	mov	r3, r0
   12bd0:	b	12bf0 <__assert_fail@plt+0x1b94>
   12bd4:	mov	r0, #0
   12bd8:	mov	sl, r3
   12bdc:	str	r0, [fp, #-56]	; 0xffffffc8
   12be0:	mov	r0, #0
   12be4:	b	12c5c <__assert_fail@plt+0x1c00>
   12be8:	mov	r0, #0
   12bec:	str	r0, [fp, #-56]	; 0xffffffc8
   12bf0:	cmp	r5, r3
   12bf4:	bls	12c08 <__assert_fail@plt+0x1bac>
   12bf8:	ldr	r5, [fp, #-84]	; 0xffffffac
   12bfc:	mov	r0, #0
   12c00:	mov	sl, r3
   12c04:	b	12c5c <__assert_fail@plt+0x1c00>
   12c08:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12c0c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12c10:	add	r0, r4, r7
   12c14:	mov	r5, lr
   12c18:	mov	r6, ip
   12c1c:	mov	sl, r3
   12c20:	bl	10f60 <bcmp@plt>
   12c24:	ldr	r2, [sp, #92]	; 0x5c
   12c28:	cmp	r0, #0
   12c2c:	ldr	r3, [fp, #-84]	; 0xffffffac
   12c30:	mov	r1, r0
   12c34:	movwne	r1, #1
   12c38:	orr	r1, r1, r2
   12c3c:	tst	r1, #1
   12c40:	beq	1376c <__assert_fail@plt+0x2710>
   12c44:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12c48:	clz	r0, r0
   12c4c:	mov	lr, r5
   12c50:	mov	ip, r6
   12c54:	mov	r5, r3
   12c58:	lsr	r0, r0, #5
   12c5c:	str	r0, [fp, #-52]	; 0xffffffcc
   12c60:	ldrb	r6, [r4, r7]
   12c64:	cmp	r6, #126	; 0x7e
   12c68:	bhi	13190 <__assert_fail@plt+0x2134>
   12c6c:	add	r3, pc, #16
   12c70:	mov	r9, #1
   12c74:	mov	r2, #110	; 0x6e
   12c78:	mov	r0, #97	; 0x61
   12c7c:	mov	r1, #0
   12c80:	ldr	pc, [r3, r6, lsl #2]
   12c84:	strdeq	r2, [r1], -r4
   12c88:	muleq	r1, r0, r1
   12c8c:	muleq	r1, r0, r1
   12c90:	muleq	r1, r0, r1
   12c94:	muleq	r1, r0, r1
   12c98:	muleq	r1, r0, r1
   12c9c:	muleq	r1, r0, r1
   12ca0:	andeq	r3, r1, r0, lsl r2
   12ca4:	ldrdeq	r2, [r1], -r4
   12ca8:	andeq	r2, r1, ip, asr #31
   12cac:	andeq	r2, r1, r0, ror #31
   12cb0:	strdeq	r3, [r1], -r8
   12cb4:	andeq	r2, r1, r4, asr #31
   12cb8:	ldrdeq	r2, [r1], -ip
   12cbc:	muleq	r1, r0, r1
   12cc0:	muleq	r1, r0, r1
   12cc4:	muleq	r1, r0, r1
   12cc8:	muleq	r1, r0, r1
   12ccc:	muleq	r1, r0, r1
   12cd0:	muleq	r1, r0, r1
   12cd4:	muleq	r1, r0, r1
   12cd8:	muleq	r1, r0, r1
   12cdc:	muleq	r1, r0, r1
   12ce0:	muleq	r1, r0, r1
   12ce4:	muleq	r1, r0, r1
   12ce8:	muleq	r1, r0, r1
   12cec:	muleq	r1, r0, r1
   12cf0:	muleq	r1, r0, r1
   12cf4:	muleq	r1, r0, r1
   12cf8:	muleq	r1, r0, r1
   12cfc:	muleq	r1, r0, r1
   12d00:	muleq	r1, r0, r1
   12d04:	andeq	r2, r1, r4, ror pc
   12d08:	andeq	r2, r1, r8, ror pc
   12d0c:	andeq	r2, r1, r8, ror pc
   12d10:	andeq	r2, r1, ip, asr pc
   12d14:	andeq	r2, r1, r8, ror pc
   12d18:	andeq	r2, r1, r0, lsl #29
   12d1c:	andeq	r2, r1, r8, ror pc
   12d20:	andeq	r3, r1, r0, lsl #2
   12d24:	andeq	r2, r1, r8, ror pc
   12d28:	andeq	r2, r1, r8, ror pc
   12d2c:	andeq	r2, r1, r8, ror pc
   12d30:	andeq	r2, r1, r0, lsl #29
   12d34:	andeq	r2, r1, r0, lsl #29
   12d38:	andeq	r2, r1, r0, lsl #29
   12d3c:	andeq	r2, r1, r0, lsl #29
   12d40:	andeq	r2, r1, r0, lsl #29
   12d44:	andeq	r2, r1, r0, lsl #29
   12d48:	andeq	r2, r1, r0, lsl #29
   12d4c:	andeq	r2, r1, r0, lsl #29
   12d50:	andeq	r2, r1, r0, lsl #29
   12d54:	andeq	r2, r1, r0, lsl #29
   12d58:	andeq	r2, r1, r0, lsl #29
   12d5c:	andeq	r2, r1, r0, lsl #29
   12d60:	andeq	r2, r1, r0, lsl #29
   12d64:	andeq	r2, r1, r0, lsl #29
   12d68:	andeq	r2, r1, r0, lsl #29
   12d6c:	andeq	r2, r1, r0, lsl #29
   12d70:	andeq	r2, r1, r8, ror pc
   12d74:	andeq	r2, r1, r8, ror pc
   12d78:	andeq	r2, r1, r8, ror pc
   12d7c:	andeq	r2, r1, r8, ror pc
   12d80:	andeq	r3, r1, ip, asr #1
   12d84:	muleq	r1, r0, r1
   12d88:	andeq	r2, r1, r0, lsl #29
   12d8c:	andeq	r2, r1, r0, lsl #29
   12d90:	andeq	r2, r1, r0, lsl #29
   12d94:	andeq	r2, r1, r0, lsl #29
   12d98:	andeq	r2, r1, r0, lsl #29
   12d9c:	andeq	r2, r1, r0, lsl #29
   12da0:	andeq	r2, r1, r0, lsl #29
   12da4:	andeq	r2, r1, r0, lsl #29
   12da8:	andeq	r2, r1, r0, lsl #29
   12dac:	andeq	r2, r1, r0, lsl #29
   12db0:	andeq	r2, r1, r0, lsl #29
   12db4:	andeq	r2, r1, r0, lsl #29
   12db8:	andeq	r2, r1, r0, lsl #29
   12dbc:	andeq	r2, r1, r0, lsl #29
   12dc0:	andeq	r2, r1, r0, lsl #29
   12dc4:	andeq	r2, r1, r0, lsl #29
   12dc8:	andeq	r2, r1, r0, lsl #29
   12dcc:	andeq	r2, r1, r0, lsl #29
   12dd0:	andeq	r2, r1, r0, lsl #29
   12dd4:	andeq	r2, r1, r0, lsl #29
   12dd8:	andeq	r2, r1, r0, lsl #29
   12ddc:	andeq	r2, r1, r0, lsl #29
   12de0:	andeq	r2, r1, r0, lsl #29
   12de4:	andeq	r2, r1, r0, lsl #29
   12de8:	andeq	r2, r1, r0, lsl #29
   12dec:	andeq	r2, r1, r0, lsl #29
   12df0:	andeq	r2, r1, r8, ror pc
   12df4:	andeq	r2, r1, r0, lsr #31
   12df8:	andeq	r2, r1, r0, lsl #29
   12dfc:	andeq	r2, r1, r8, ror pc
   12e00:	andeq	r2, r1, r0, lsl #29
   12e04:	andeq	r2, r1, r8, ror pc
   12e08:	andeq	r2, r1, r0, lsl #29
   12e0c:	andeq	r2, r1, r0, lsl #29
   12e10:	andeq	r2, r1, r0, lsl #29
   12e14:	andeq	r2, r1, r0, lsl #29
   12e18:	andeq	r2, r1, r0, lsl #29
   12e1c:	andeq	r2, r1, r0, lsl #29
   12e20:	andeq	r2, r1, r0, lsl #29
   12e24:	andeq	r2, r1, r0, lsl #29
   12e28:	andeq	r2, r1, r0, lsl #29
   12e2c:	andeq	r2, r1, r0, lsl #29
   12e30:	andeq	r2, r1, r0, lsl #29
   12e34:	andeq	r2, r1, r0, lsl #29
   12e38:	andeq	r2, r1, r0, lsl #29
   12e3c:	andeq	r2, r1, r0, lsl #29
   12e40:	andeq	r2, r1, r0, lsl #29
   12e44:	andeq	r2, r1, r0, lsl #29
   12e48:	andeq	r2, r1, r0, lsl #29
   12e4c:	andeq	r2, r1, r0, lsl #29
   12e50:	andeq	r2, r1, r0, lsl #29
   12e54:	andeq	r2, r1, r0, lsl #29
   12e58:	andeq	r2, r1, r0, lsl #29
   12e5c:	andeq	r2, r1, r0, lsl #29
   12e60:	andeq	r2, r1, r0, lsl #29
   12e64:	andeq	r2, r1, r0, lsl #29
   12e68:	andeq	r2, r1, r0, lsl #29
   12e6c:	andeq	r2, r1, r0, lsl #29
   12e70:	andeq	r2, r1, r4, lsr pc
   12e74:	andeq	r2, r1, r8, ror pc
   12e78:	andeq	r2, r1, r4, lsr pc
   12e7c:	andeq	r2, r1, ip, asr pc
   12e80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e84:	tst	r0, #1
   12e88:	bne	12eb4 <__assert_fail@plt+0x1e58>
   12e8c:	ldr	r1, [fp, #16]
   12e90:	ubfx	r0, r6, #5, #3
   12e94:	mov	r2, #1
   12e98:	ldr	r0, [r1, r0, lsl #2]
   12e9c:	and	r1, r6, #31
   12ea0:	tst	r0, r2, lsl r1
   12ea4:	beq	12eb4 <__assert_fail@plt+0x1e58>
   12ea8:	mov	r0, r6
   12eac:	mov	r1, r9
   12eb0:	b	12ec8 <__assert_fail@plt+0x1e6c>
   12eb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12eb8:	mov	r1, r9
   12ebc:	cmp	r0, #0
   12ec0:	mov	r0, r6
   12ec4:	beq	13614 <__assert_fail@plt+0x25b8>
   12ec8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ecc:	tst	r2, #1
   12ed0:	bne	137b0 <__assert_fail@plt+0x2754>
   12ed4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12ed8:	subs	r2, r2, #2
   12edc:	movwne	r2, #1
   12ee0:	orr	r2, r2, lr
   12ee4:	tst	r2, #1
   12ee8:	bne	12f20 <__assert_fail@plt+0x1ec4>
   12eec:	cmp	r8, ip
   12ef0:	mov	lr, #1
   12ef4:	movcc	r2, #39	; 0x27
   12ef8:	strbcc	r2, [r5, r8]
   12efc:	add	r2, r8, #1
   12f00:	cmp	r2, ip
   12f04:	movcc	r3, #36	; 0x24
   12f08:	strbcc	r3, [r5, r2]
   12f0c:	add	r2, r8, #2
   12f10:	add	r8, r8, #3
   12f14:	cmp	r2, ip
   12f18:	movcc	r3, #39	; 0x27
   12f1c:	strbcc	r3, [r5, r2]
   12f20:	cmp	r8, ip
   12f24:	movcc	r2, #92	; 0x5c
   12f28:	strbcc	r2, [r5, r8]
   12f2c:	add	r8, r8, #1
   12f30:	b	13654 <__assert_fail@plt+0x25f8>
   12f34:	cmp	sl, #1
   12f38:	beq	12f5c <__assert_fail@plt+0x1f00>
   12f3c:	mov	r9, #0
   12f40:	cmn	sl, #1
   12f44:	bne	12f68 <__assert_fail@plt+0x1f0c>
   12f48:	ldrb	r0, [r4, #1]
   12f4c:	cmp	r0, #0
   12f50:	beq	12f5c <__assert_fail@plt+0x1f00>
   12f54:	mvn	sl, #0
   12f58:	b	12f68 <__assert_fail@plt+0x1f0c>
   12f5c:	mov	r9, #0
   12f60:	cmp	r7, #0
   12f64:	beq	12f74 <__assert_fail@plt+0x1f18>
   12f68:	mov	r0, #0
   12f6c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f70:	b	12e80 <__assert_fail@plt+0x1e24>
   12f74:	mov	r1, #1
   12f78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f7c:	cmp	r0, #2
   12f80:	bne	12f98 <__assert_fail@plt+0x1f3c>
   12f84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f88:	mov	r9, r1
   12f8c:	tst	r0, #1
   12f90:	beq	12e80 <__assert_fail@plt+0x1e24>
   12f94:	b	137b0 <__assert_fail@plt+0x2754>
   12f98:	mov	r9, r1
   12f9c:	b	12e80 <__assert_fail@plt+0x1e24>
   12fa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fa4:	cmp	r0, #2
   12fa8:	bne	131ec <__assert_fail@plt+0x2190>
   12fac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fb0:	tst	r0, #1
   12fb4:	bne	137b0 <__assert_fail@plt+0x2754>
   12fb8:	mov	r0, #0
   12fbc:	str	r0, [fp, #-56]	; 0xffffffc8
   12fc0:	b	13204 <__assert_fail@plt+0x21a8>
   12fc4:	mov	r0, #102	; 0x66
   12fc8:	b	13210 <__assert_fail@plt+0x21b4>
   12fcc:	mov	r2, #116	; 0x74
   12fd0:	b	12fe0 <__assert_fail@plt+0x1f84>
   12fd4:	mov	r0, #98	; 0x62
   12fd8:	b	13210 <__assert_fail@plt+0x21b4>
   12fdc:	mov	r2, #114	; 0x72
   12fe0:	ldr	r0, [sp, #68]	; 0x44
   12fe4:	tst	r0, #1
   12fe8:	mov	r0, r2
   12fec:	bne	13210 <__assert_fail@plt+0x21b4>
   12ff0:	b	137b0 <__assert_fail@plt+0x2754>
   12ff4:	ldr	r0, [sp, #84]	; 0x54
   12ff8:	tst	r0, #1
   12ffc:	beq	13230 <__assert_fail@plt+0x21d4>
   13000:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13004:	tst	r0, #1
   13008:	bne	1389c <__assert_fail@plt+0x2840>
   1300c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13010:	mov	r2, sl
   13014:	subs	r0, r0, #2
   13018:	movwne	r0, #1
   1301c:	orr	r0, r0, lr
   13020:	tst	r0, #1
   13024:	bne	1305c <__assert_fail@plt+0x2000>
   13028:	cmp	r8, ip
   1302c:	mov	lr, #1
   13030:	movcc	r0, #39	; 0x27
   13034:	strbcc	r0, [r5, r8]
   13038:	add	r0, r8, #1
   1303c:	cmp	r0, ip
   13040:	movcc	r1, #36	; 0x24
   13044:	strbcc	r1, [r5, r0]
   13048:	add	r0, r8, #2
   1304c:	add	r8, r8, #3
   13050:	cmp	r0, ip
   13054:	movcc	r1, #39	; 0x27
   13058:	strbcc	r1, [r5, r0]
   1305c:	mov	r1, #1
   13060:	cmp	r8, ip
   13064:	mov	r9, #0
   13068:	mov	r6, #48	; 0x30
   1306c:	str	r1, [fp, #-56]	; 0xffffffc8
   13070:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13074:	movcc	r0, #92	; 0x5c
   13078:	strbcc	r0, [r5, r8]
   1307c:	add	r0, r8, #1
   13080:	cmp	r1, #2
   13084:	beq	1338c <__assert_fail@plt+0x2330>
   13088:	add	r1, r7, #1
   1308c:	cmp	r1, r2
   13090:	bcs	1338c <__assert_fail@plt+0x2330>
   13094:	ldrb	r1, [r4, r1]
   13098:	sub	r1, r1, #48	; 0x30
   1309c:	uxtb	r1, r1
   130a0:	cmp	r1, #9
   130a4:	bhi	1338c <__assert_fail@plt+0x2330>
   130a8:	cmp	r0, ip
   130ac:	movcc	r1, #48	; 0x30
   130b0:	strbcc	r1, [r5, r0]
   130b4:	add	r0, r8, #2
   130b8:	add	r8, r8, #3
   130bc:	cmp	r0, ip
   130c0:	movcc	r1, #48	; 0x30
   130c4:	strbcc	r1, [r5, r0]
   130c8:	b	12e80 <__assert_fail@plt+0x1e24>
   130cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130d0:	mov	r6, #63	; 0x3f
   130d4:	cmp	r0, #5
   130d8:	beq	13394 <__assert_fail@plt+0x2338>
   130dc:	mov	r1, #0
   130e0:	cmp	r0, #2
   130e4:	str	r1, [fp, #-56]	; 0xffffffc8
   130e8:	bne	13448 <__assert_fail@plt+0x23ec>
   130ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130f0:	mov	r9, #0
   130f4:	b	12f8c <__assert_fail@plt+0x1f30>
   130f8:	mov	r0, #118	; 0x76
   130fc:	b	13210 <__assert_fail@plt+0x21b4>
   13100:	mov	r0, #1
   13104:	mov	r6, #39	; 0x27
   13108:	str	r0, [sp, #60]	; 0x3c
   1310c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13110:	cmp	r0, #2
   13114:	bne	13188 <__assert_fail@plt+0x212c>
   13118:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1311c:	tst	r0, #1
   13120:	bne	137b0 <__assert_fail@plt+0x2754>
   13124:	ldr	r2, [sp, #56]	; 0x38
   13128:	clz	r1, ip
   1312c:	mov	lr, #0
   13130:	lsr	r1, r1, #5
   13134:	cmp	r2, #0
   13138:	mov	r0, r2
   1313c:	movwne	r0, #1
   13140:	orrs	r0, r0, r1
   13144:	moveq	r2, ip
   13148:	moveq	ip, r0
   1314c:	cmp	r8, ip
   13150:	str	r2, [sp, #56]	; 0x38
   13154:	movcc	r0, #39	; 0x27
   13158:	strbcc	r0, [r5, r8]
   1315c:	add	r0, r8, #1
   13160:	cmp	r0, ip
   13164:	movcc	r1, #92	; 0x5c
   13168:	strbcc	r1, [r5, r0]
   1316c:	add	r0, r8, #2
   13170:	add	r8, r8, #3
   13174:	cmp	r0, ip
   13178:	movcc	r1, #39	; 0x27
   1317c:	strbcc	r1, [r5, r0]
   13180:	mov	r0, #0
   13184:	str	r0, [fp, #-56]	; 0xffffffc8
   13188:	mov	r9, #1
   1318c:	b	12e80 <__assert_fail@plt+0x1e24>
   13190:	ldr	r0, [sp, #40]	; 0x28
   13194:	str	lr, [sp, #44]	; 0x2c
   13198:	str	ip, [sp, #88]	; 0x58
   1319c:	cmp	r0, #1
   131a0:	bne	13250 <__assert_fail@plt+0x21f4>
   131a4:	str	sl, [sp, #36]	; 0x24
   131a8:	bl	10f48 <__ctype_b_loc@plt>
   131ac:	ldr	r0, [r0]
   131b0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   131b4:	mov	r1, #1
   131b8:	add	r0, r0, r6, lsl #1
   131bc:	ldrb	r0, [r0, #1]
   131c0:	ubfx	r9, r0, #6, #1
   131c4:	ldr	r0, [sp, #52]	; 0x34
   131c8:	ldr	lr, [sp, #44]	; 0x2c
   131cc:	cmp	r1, #1
   131d0:	orr	r3, r9, r0
   131d4:	bhi	13450 <__assert_fail@plt+0x23f4>
   131d8:	tst	r3, #1
   131dc:	beq	13450 <__assert_fail@plt+0x23f4>
   131e0:	ldr	sl, [sp, #36]	; 0x24
   131e4:	ldr	ip, [sp, #88]	; 0x58
   131e8:	b	12e80 <__assert_fail@plt+0x1e24>
   131ec:	ldr	r1, [sp, #48]	; 0x30
   131f0:	mov	r0, #0
   131f4:	str	r0, [fp, #-56]	; 0xffffffc8
   131f8:	mov	r0, #92	; 0x5c
   131fc:	cmp	r1, #0
   13200:	beq	13210 <__assert_fail@plt+0x21b4>
   13204:	mov	r6, #92	; 0x5c
   13208:	mov	r9, #0
   1320c:	b	13614 <__assert_fail@plt+0x25b8>
   13210:	mov	r1, #0
   13214:	mov	r9, #0
   13218:	str	r1, [fp, #-56]	; 0xffffffc8
   1321c:	ldr	r1, [sp, #84]	; 0x54
   13220:	tst	r1, #1
   13224:	mov	r1, #0
   13228:	beq	12e80 <__assert_fail@plt+0x1e24>
   1322c:	b	12ec8 <__assert_fail@plt+0x1e6c>
   13230:	ldr	r0, [sp, #32]
   13234:	mov	r6, #0
   13238:	mov	r9, #0
   1323c:	cmp	r0, #0
   13240:	mov	r0, #0
   13244:	str	r0, [fp, #-56]	; 0xffffffc8
   13248:	beq	12e80 <__assert_fail@plt+0x1e24>
   1324c:	b	1366c <__assert_fail@plt+0x2610>
   13250:	mov	r0, #0
   13254:	cmn	sl, #1
   13258:	sub	r3, fp, #40	; 0x28
   1325c:	str	r0, [fp, #-36]	; 0xffffffdc
   13260:	str	r0, [fp, #-40]	; 0xffffffd8
   13264:	bne	1327c <__assert_fail@plt+0x2220>
   13268:	mov	r0, r4
   1326c:	bl	10f6c <strlen@plt>
   13270:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13274:	sub	r3, fp, #40	; 0x28
   13278:	mov	sl, r0
   1327c:	ldr	r0, [sp, #72]	; 0x48
   13280:	mov	r9, #1
   13284:	mov	r1, #0
   13288:	str	sl, [sp, #36]	; 0x24
   1328c:	add	r0, r0, r7
   13290:	str	r0, [sp, #20]
   13294:	add	r0, r1, r7
   13298:	str	r1, [sp, #24]
   1329c:	add	r1, r4, r0
   132a0:	mov	r4, r0
   132a4:	sub	r2, sl, r0
   132a8:	sub	r0, fp, #44	; 0x2c
   132ac:	bl	14c00 <__assert_fail@plt+0x3ba4>
   132b0:	cmp	r0, #0
   132b4:	beq	136c0 <__assert_fail@plt+0x2664>
   132b8:	cmn	r0, #1
   132bc:	beq	13678 <__assert_fail@plt+0x261c>
   132c0:	ldr	r2, [sp, #36]	; 0x24
   132c4:	cmn	r0, #2
   132c8:	beq	13680 <__assert_fail@plt+0x2624>
   132cc:	ldr	r2, [sp, #64]	; 0x40
   132d0:	ldr	ip, [sp, #88]	; 0x58
   132d4:	ldr	r4, [sp, #84]	; 0x54
   132d8:	ldr	lr, [fp, #-48]	; 0xffffffd0
   132dc:	cmp	r0, #2
   132e0:	mov	r1, #0
   132e4:	movwcc	r1, #1
   132e8:	eor	r2, r2, #1
   132ec:	orrs	r1, r2, r1
   132f0:	bne	13340 <__assert_fail@plt+0x22e4>
   132f4:	ldr	r1, [sp, #24]
   132f8:	ldr	r2, [sp, #20]
   132fc:	add	r1, r2, r1
   13300:	sub	r2, r0, #1
   13304:	ldrb	r3, [r1]
   13308:	sub	r5, r3, #94	; 0x5e
   1330c:	cmp	r5, #30
   13310:	bhi	13328 <__assert_fail@plt+0x22cc>
   13314:	mov	r4, #1
   13318:	mov	sl, #1073741829	; 0x40000005
   1331c:	tst	sl, r4, lsl r5
   13320:	ldr	r4, [sp, #84]	; 0x54
   13324:	bne	13788 <__assert_fail@plt+0x272c>
   13328:	sub	r3, r3, #91	; 0x5b
   1332c:	cmp	r3, #2
   13330:	bcc	13788 <__assert_fail@plt+0x272c>
   13334:	add	r1, r1, #1
   13338:	subs	r2, r2, #1
   1333c:	bne	13304 <__assert_fail@plt+0x22a8>
   13340:	ldr	r5, [sp, #24]
   13344:	str	lr, [fp, #-48]	; 0xffffffd0
   13348:	add	r5, r0, r5
   1334c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13350:	bl	10eb8 <iswprint@plt>
   13354:	cmp	r0, #0
   13358:	sub	r4, fp, #40	; 0x28
   1335c:	movwne	r0, #1
   13360:	and	r9, r9, r0
   13364:	mov	r0, r4
   13368:	bl	10e70 <mbsinit@plt>
   1336c:	mov	r1, r5
   13370:	mov	r3, r4
   13374:	ldr	sl, [sp, #36]	; 0x24
   13378:	ldr	r5, [fp, #-84]	; 0xffffffac
   1337c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13380:	cmp	r0, #0
   13384:	beq	13294 <__assert_fail@plt+0x2238>
   13388:	b	131c4 <__assert_fail@plt+0x2168>
   1338c:	mov	r8, r0
   13390:	b	12e80 <__assert_fail@plt+0x1e24>
   13394:	mov	r0, #0
   13398:	str	r0, [fp, #-56]	; 0xffffffc8
   1339c:	ldr	r0, [sp, #28]
   133a0:	cmp	r0, #0
   133a4:	beq	13448 <__assert_fail@plt+0x23ec>
   133a8:	add	r0, r7, #2
   133ac:	mov	r1, sl
   133b0:	cmp	r0, sl
   133b4:	bcs	13448 <__assert_fail@plt+0x23ec>
   133b8:	add	r1, r7, r4
   133bc:	ldrb	r1, [r1, #1]
   133c0:	cmp	r1, #63	; 0x3f
   133c4:	bne	13448 <__assert_fail@plt+0x23ec>
   133c8:	ldrb	r9, [r4, r0]
   133cc:	sub	r2, r9, #33	; 0x21
   133d0:	cmp	r2, #29
   133d4:	bhi	13448 <__assert_fail@plt+0x23ec>
   133d8:	mov	r1, r4
   133dc:	movw	r4, #20929	; 0x51c1
   133e0:	mov	r3, #1
   133e4:	movt	r4, #14336	; 0x3800
   133e8:	tst	r4, r3, lsl r2
   133ec:	beq	136d4 <__assert_fail@plt+0x2678>
   133f0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   133f4:	tst	r2, #1
   133f8:	bne	138a4 <__assert_fail@plt+0x2848>
   133fc:	cmp	r8, ip
   13400:	mov	r4, r1
   13404:	mov	r7, r0
   13408:	mov	r6, r9
   1340c:	movcc	r2, #63	; 0x3f
   13410:	strbcc	r2, [r5, r8]
   13414:	add	r2, r8, #1
   13418:	cmp	r2, ip
   1341c:	movcc	r3, #34	; 0x22
   13420:	strbcc	r3, [r5, r2]
   13424:	add	r2, r8, #2
   13428:	cmp	r2, ip
   1342c:	movcc	r3, #34	; 0x22
   13430:	strbcc	r3, [r5, r2]
   13434:	add	r2, r8, #3
   13438:	add	r8, r8, #4
   1343c:	cmp	r2, ip
   13440:	movcc	r3, #63	; 0x3f
   13444:	strbcc	r3, [r5, r2]
   13448:	mov	r9, #0
   1344c:	b	12e80 <__assert_fail@plt+0x1e24>
   13450:	ldr	sl, [sp, #36]	; 0x24
   13454:	add	r0, r1, r7
   13458:	mov	r2, #0
   1345c:	str	r3, [sp, #24]
   13460:	str	r0, [fp, #-56]	; 0xffffffc8
   13464:	tst	r3, #1
   13468:	beq	13494 <__assert_fail@plt+0x2438>
   1346c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13470:	tst	r0, #1
   13474:	beq	1355c <__assert_fail@plt+0x2500>
   13478:	ldr	r1, [sp, #88]	; 0x58
   1347c:	mov	r0, r3
   13480:	cmp	r8, r1
   13484:	movcc	r1, #92	; 0x5c
   13488:	strbcc	r1, [r5, r8]
   1348c:	add	r8, r8, #1
   13490:	b	13560 <__assert_fail@plt+0x2504>
   13494:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13498:	tst	r1, #1
   1349c:	bne	137ac <__assert_fail@plt+0x2750>
   134a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   134a4:	subs	r2, r1, #2
   134a8:	movwne	r2, #1
   134ac:	orr	r2, r2, lr
   134b0:	tst	r2, #1
   134b4:	bne	134f8 <__assert_fail@plt+0x249c>
   134b8:	ldr	r1, [sp, #88]	; 0x58
   134bc:	add	r2, r8, #1
   134c0:	mov	lr, #1
   134c4:	cmp	r8, r1
   134c8:	movcc	r1, #39	; 0x27
   134cc:	strbcc	r1, [r5, r8]
   134d0:	ldr	r1, [sp, #88]	; 0x58
   134d4:	cmp	r2, r1
   134d8:	movcc	r1, #36	; 0x24
   134dc:	strbcc	r1, [r5, r2]
   134e0:	ldr	r1, [sp, #88]	; 0x58
   134e4:	add	r2, r8, #2
   134e8:	add	r8, r8, #3
   134ec:	cmp	r2, r1
   134f0:	movcc	r1, #39	; 0x27
   134f4:	strbcc	r1, [r5, r2]
   134f8:	ldr	r1, [sp, #88]	; 0x58
   134fc:	add	r2, r8, #1
   13500:	mov	r0, r3
   13504:	cmp	r8, r1
   13508:	movcc	r1, #92	; 0x5c
   1350c:	strbcc	r1, [r5, r8]
   13510:	ldr	r1, [sp, #88]	; 0x58
   13514:	cmp	r2, r1
   13518:	bcs	1352c <__assert_fail@plt+0x24d0>
   1351c:	uxtb	r3, r6
   13520:	mov	r1, #48	; 0x30
   13524:	orr	r3, r1, r3, lsr #6
   13528:	strb	r3, [r5, r2]
   1352c:	ldr	r1, [sp, #88]	; 0x58
   13530:	add	r2, r8, #2
   13534:	add	r8, r8, #3
   13538:	cmp	r2, r1
   1353c:	lsrcc	r3, r6, #3
   13540:	movcc	r1, #6
   13544:	bficc	r3, r1, #3, #29
   13548:	mov	r1, #6
   1354c:	bfi	r6, r1, #3, #29
   13550:	strbcc	r3, [r5, r2]
   13554:	mov	r2, #1
   13558:	b	13568 <__assert_fail@plt+0x250c>
   1355c:	mov	r0, r3
   13560:	mov	r1, #0
   13564:	str	r1, [fp, #-52]	; 0xffffffcc
   13568:	mov	ip, r2
   1356c:	and	r1, r2, #1
   13570:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13574:	add	r3, r7, #1
   13578:	cmp	r2, r3
   1357c:	bls	13604 <__assert_fail@plt+0x25a8>
   13580:	cmp	r1, #0
   13584:	mvn	r5, lr
   13588:	movwne	r1, #1
   1358c:	orr	r5, r5, r1
   13590:	tst	r5, #1
   13594:	bne	135d8 <__assert_fail@plt+0x257c>
   13598:	ldr	r1, [sp, #88]	; 0x58
   1359c:	ldr	r5, [fp, #-84]	; 0xffffffac
   135a0:	mov	r2, r4
   135a4:	ldr	r4, [sp, #88]	; 0x58
   135a8:	ldr	r0, [sp, #24]
   135ac:	mov	lr, #0
   135b0:	cmp	r8, r1
   135b4:	movcc	r1, #39	; 0x27
   135b8:	strbcc	r1, [r5, r8]
   135bc:	add	r1, r8, #1
   135c0:	add	r8, r8, #2
   135c4:	cmp	r1, r4
   135c8:	movcc	r4, #39	; 0x27
   135cc:	strbcc	r4, [r5, r1]
   135d0:	mov	r4, r2
   135d4:	b	135dc <__assert_fail@plt+0x2580>
   135d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   135dc:	ldr	r1, [sp, #88]	; 0x58
   135e0:	mov	r2, ip
   135e4:	cmp	r8, r1
   135e8:	ldr	r1, [sp, #72]	; 0x48
   135ec:	strbcc	r6, [r5, r8]
   135f0:	add	r8, r8, #1
   135f4:	ldrb	r6, [r1, r7]
   135f8:	mov	r7, r3
   135fc:	mov	r3, r0
   13600:	b	13464 <__assert_fail@plt+0x2408>
   13604:	ldr	ip, [sp, #88]	; 0x58
   13608:	cmp	r1, #0
   1360c:	movwne	r1, #1
   13610:	str	r1, [fp, #-56]	; 0xffffffc8
   13614:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13618:	cmp	r0, #0
   1361c:	bne	1364c <__assert_fail@plt+0x25f0>
   13620:	tst	lr, #1
   13624:	beq	1364c <__assert_fail@plt+0x25f0>
   13628:	cmp	r8, ip
   1362c:	mov	lr, #0
   13630:	movcc	r0, #39	; 0x27
   13634:	strbcc	r0, [r5, r8]
   13638:	add	r0, r8, #1
   1363c:	add	r8, r8, #2
   13640:	cmp	r0, ip
   13644:	movcc	r1, #39	; 0x27
   13648:	strbcc	r1, [r5, r0]
   1364c:	mov	r1, r9
   13650:	mov	r0, r6
   13654:	cmp	r8, ip
   13658:	strbcc	r0, [r5, r8]
   1365c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13660:	add	r8, r8, #1
   13664:	and	r0, r0, r1
   13668:	str	r0, [fp, #-48]	; 0xffffffd0
   1366c:	mov	r3, sl
   13670:	add	r7, r7, #1
   13674:	b	12b64 <__assert_fail@plt+0x1b08>
   13678:	mov	r9, #0
   1367c:	b	136c0 <__assert_fail@plt+0x2664>
   13680:	mov	r9, #0
   13684:	cmp	r2, r4
   13688:	bls	136c0 <__assert_fail@plt+0x2664>
   1368c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13690:	ldr	r1, [sp, #24]
   13694:	add	r0, r4, r7
   13698:	mov	r3, r1
   1369c:	ldrb	r1, [r0, r1]
   136a0:	cmp	r1, #0
   136a4:	beq	136cc <__assert_fail@plt+0x2670>
   136a8:	add	r3, r3, #1
   136ac:	add	r1, r7, r3
   136b0:	cmp	r1, r2
   136b4:	mov	r1, r3
   136b8:	bcc	13698 <__assert_fail@plt+0x263c>
   136bc:	b	131c4 <__assert_fail@plt+0x2168>
   136c0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   136c4:	ldr	r1, [sp, #24]
   136c8:	b	131c4 <__assert_fail@plt+0x2168>
   136cc:	mov	r1, r3
   136d0:	b	131c4 <__assert_fail@plt+0x2168>
   136d4:	mov	r9, #0
   136d8:	mov	r4, r1
   136dc:	b	12e80 <__assert_fail@plt+0x1e24>
   136e0:	mov	sl, r7
   136e4:	b	136ec <__assert_fail@plt+0x2690>
   136e8:	mvn	sl, #0
   136ec:	ldr	r1, [fp, #-68]	; 0xffffffbc
   136f0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   136f4:	eor	r0, r1, #2
   136f8:	orr	r0, r0, r8
   136fc:	clz	r0, r0
   13700:	lsr	r0, r0, #5
   13704:	tst	r2, r0
   13708:	bne	137b0 <__assert_fail@plt+0x2754>
   1370c:	subs	r0, r1, #2
   13710:	movwne	r0, #1
   13714:	orr	r0, r2, r0
   13718:	tst	r0, #1
   1371c:	ldreq	r0, [sp, #60]	; 0x3c
   13720:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13724:	eoreq	r0, r0, #1
   13728:	tsteq	r0, #1
   1372c:	bne	13844 <__assert_fail@plt+0x27e8>
   13730:	tst	r1, #1
   13734:	bne	13810 <__assert_fail@plt+0x27b4>
   13738:	ldr	r6, [sp, #56]	; 0x38
   1373c:	mov	r9, #0
   13740:	cmp	r6, #0
   13744:	beq	1383c <__assert_fail@plt+0x27e0>
   13748:	ldr	r0, [sp, #84]	; 0x54
   1374c:	mov	r1, #0
   13750:	mov	r7, #2
   13754:	cmp	ip, #0
   13758:	str	r1, [fp, #-48]	; 0xffffffd0
   1375c:	mov	r1, #0
   13760:	str	r1, [fp, #-76]	; 0xffffffb4
   13764:	beq	128cc <__assert_fail@plt+0x1870>
   13768:	b	13844 <__assert_fail@plt+0x27e8>
   1376c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13770:	ldr	r1, [fp, #12]
   13774:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13778:	mov	r5, r3
   1377c:	mov	ip, r6
   13780:	mov	r3, sl
   13784:	b	137d4 <__assert_fail@plt+0x2778>
   13788:	tst	r4, #1
   1378c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13790:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13794:	ldr	r1, [fp, #12]
   13798:	ldr	r3, [sp, #36]	; 0x24
   1379c:	mov	r0, #2
   137a0:	movwne	r0, #4
   137a4:	mov	r2, r0
   137a8:	b	137d4 <__assert_fail@plt+0x2778>
   137ac:	ldr	ip, [sp, #88]	; 0x58
   137b0:	ldr	r1, [sp, #84]	; 0x54
   137b4:	mov	r0, #2
   137b8:	tst	r1, #1
   137bc:	movwne	r0, #4
   137c0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   137c4:	ldr	r1, [fp, #12]
   137c8:	mov	r3, sl
   137cc:	cmp	r2, #2
   137d0:	moveq	r2, r0
   137d4:	mov	r0, #0
   137d8:	bic	r1, r1, #2
   137dc:	str	r2, [sp]
   137e0:	mov	r2, r4
   137e4:	str	r0, [sp, #8]
   137e8:	ldr	r0, [sp, #76]	; 0x4c
   137ec:	str	r1, [sp, #4]
   137f0:	mov	r1, ip
   137f4:	str	r0, [sp, #12]
   137f8:	ldr	r0, [sp, #80]	; 0x50
   137fc:	str	r0, [sp, #16]
   13800:	mov	r0, r5
   13804:	bl	12840 <__assert_fail@plt+0x17e4>
   13808:	mov	r8, r0
   1380c:	b	13890 <__assert_fail@plt+0x2834>
   13810:	mov	r0, #5
   13814:	ldr	r1, [sp, #56]	; 0x38
   13818:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1381c:	mov	r3, sl
   13820:	str	r0, [sp]
   13824:	ldr	r0, [fp, #12]
   13828:	str	r0, [sp, #4]
   1382c:	ldr	r0, [fp, #16]
   13830:	str	r0, [sp, #8]
   13834:	ldr	r0, [sp, #76]	; 0x4c
   13838:	b	137f4 <__assert_fail@plt+0x2798>
   1383c:	mov	r0, #0
   13840:	str	r0, [fp, #-76]	; 0xffffffb4
   13844:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13848:	cmp	r1, #0
   1384c:	beq	13884 <__assert_fail@plt+0x2828>
   13850:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13854:	tst	r0, #1
   13858:	bne	13884 <__assert_fail@plt+0x2828>
   1385c:	ldrb	r0, [r1]
   13860:	cmp	r0, #0
   13864:	beq	13884 <__assert_fail@plt+0x2828>
   13868:	add	r1, r1, #1
   1386c:	cmp	r8, ip
   13870:	strbcc	r0, [r5, r8]
   13874:	add	r8, r8, #1
   13878:	ldrb	r0, [r1], #1
   1387c:	cmp	r0, #0
   13880:	bne	1386c <__assert_fail@plt+0x2810>
   13884:	cmp	r8, ip
   13888:	movcc	r0, #0
   1388c:	strbcc	r0, [r5, r8]
   13890:	mov	r0, r8
   13894:	sub	sp, fp, #28
   13898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1389c:	mov	r0, #4
   138a0:	b	137c0 <__assert_fail@plt+0x2764>
   138a4:	mov	r4, r1
   138a8:	b	137b0 <__assert_fail@plt+0x2754>
   138ac:	bl	11038 <abort@plt>
   138b0:	mov	r3, r2
   138b4:	mov	r2, #0
   138b8:	b	138bc <__assert_fail@plt+0x2860>
   138bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138c0:	add	fp, sp, #28
   138c4:	sub	sp, sp, #36	; 0x24
   138c8:	movw	r8, #25000	; 0x61a8
   138cc:	cmp	r3, #0
   138d0:	mov	r4, r2
   138d4:	str	r2, [sp, #24]
   138d8:	mov	r5, r1
   138dc:	mov	r6, r0
   138e0:	str	r0, [sp, #20]
   138e4:	movt	r8, #2
   138e8:	movne	r8, r3
   138ec:	bl	10f78 <__errno_location@plt>
   138f0:	str	r0, [sp, #28]
   138f4:	ldr	r1, [r8, #40]	; 0x28
   138f8:	ldr	r2, [r8, #44]	; 0x2c
   138fc:	ldr	r7, [r0]
   13900:	cmp	r4, #0
   13904:	add	sl, r8, #8
   13908:	mov	r0, #0
   1390c:	ldm	r8, {r3, r9}
   13910:	orreq	r9, r9, #1
   13914:	stm	sp, {r3, r9, sl}
   13918:	str	r1, [sp, #12]
   1391c:	str	r2, [sp, #16]
   13920:	mov	r1, #0
   13924:	mov	r2, r6
   13928:	mov	r3, r5
   1392c:	str	r7, [sp, #32]
   13930:	mov	r7, r5
   13934:	bl	12840 <__assert_fail@plt+0x17e4>
   13938:	add	r4, r0, #1
   1393c:	mov	r5, r0
   13940:	mov	r0, r4
   13944:	bl	14634 <__assert_fail@plt+0x35d8>
   13948:	mov	r6, r0
   1394c:	ldr	r0, [r8]
   13950:	ldr	r2, [r8, #44]	; 0x2c
   13954:	ldr	r1, [r8, #40]	; 0x28
   13958:	mov	r3, r7
   1395c:	stm	sp, {r0, r9, sl}
   13960:	str	r2, [sp, #16]
   13964:	ldr	r2, [sp, #20]
   13968:	str	r1, [sp, #12]
   1396c:	mov	r0, r6
   13970:	mov	r1, r4
   13974:	bl	12840 <__assert_fail@plt+0x17e4>
   13978:	ldr	r0, [sp, #24]
   1397c:	ldr	r1, [sp, #32]
   13980:	ldr	r2, [sp, #28]
   13984:	cmp	r0, #0
   13988:	str	r1, [r2]
   1398c:	strne	r5, [r0]
   13990:	mov	r0, r6
   13994:	sub	sp, fp, #28
   13998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1399c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   139a0:	add	fp, sp, #24
   139a4:	movw	r5, #24828	; 0x60fc
   139a8:	movw	r8, #24824	; 0x60f8
   139ac:	movt	r5, #2
   139b0:	movt	r8, #2
   139b4:	ldr	r0, [r5]
   139b8:	ldr	r4, [r8]
   139bc:	cmp	r0, #2
   139c0:	blt	139ec <__assert_fail@plt+0x2990>
   139c4:	add	r7, r4, #12
   139c8:	mov	r6, #0
   139cc:	ldr	r0, [r7, r6, lsl #3]
   139d0:	bl	12540 <__assert_fail@plt+0x14e4>
   139d4:	ldr	r1, [r5]
   139d8:	add	r2, r6, #2
   139dc:	add	r0, r6, #1
   139e0:	mov	r6, r0
   139e4:	cmp	r2, r1
   139e8:	blt	139cc <__assert_fail@plt+0x2970>
   139ec:	ldr	r0, [r4, #4]
   139f0:	movw	r9, #25048	; 0x61d8
   139f4:	movw	r7, #24832	; 0x6100
   139f8:	movt	r9, #2
   139fc:	movt	r7, #2
   13a00:	cmp	r0, r9
   13a04:	beq	13a14 <__assert_fail@plt+0x29b8>
   13a08:	bl	12540 <__assert_fail@plt+0x14e4>
   13a0c:	mov	r0, #256	; 0x100
   13a10:	stm	r7, {r0, r9}
   13a14:	cmp	r4, r7
   13a18:	beq	13a28 <__assert_fail@plt+0x29cc>
   13a1c:	mov	r0, r4
   13a20:	bl	12540 <__assert_fail@plt+0x14e4>
   13a24:	str	r7, [r8]
   13a28:	mov	r0, #1
   13a2c:	str	r0, [r5]
   13a30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a34:	movw	r3, #25000	; 0x61a8
   13a38:	mvn	r2, #0
   13a3c:	movt	r3, #2
   13a40:	b	13a44 <__assert_fail@plt+0x29e8>
   13a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a48:	add	fp, sp, #28
   13a4c:	sub	sp, sp, #44	; 0x2c
   13a50:	mov	r7, r3
   13a54:	str	r2, [sp, #36]	; 0x24
   13a58:	str	r1, [sp, #32]
   13a5c:	mov	r5, r0
   13a60:	bl	10f78 <__errno_location@plt>
   13a64:	cmp	r5, #0
   13a68:	bmi	13bd8 <__assert_fail@plt+0x2b7c>
   13a6c:	cmn	r5, #-2147483647	; 0x80000001
   13a70:	beq	13bd8 <__assert_fail@plt+0x2b7c>
   13a74:	movw	r8, #24828	; 0x60fc
   13a78:	movw	r4, #24824	; 0x60f8
   13a7c:	str	r0, [sp, #28]
   13a80:	ldr	r0, [r0]
   13a84:	movt	r8, #2
   13a88:	movt	r4, #2
   13a8c:	ldr	r1, [r8]
   13a90:	ldr	r6, [r4]
   13a94:	str	r0, [sp, #24]
   13a98:	cmp	r1, r5
   13a9c:	ble	13aa8 <__assert_fail@plt+0x2a4c>
   13aa0:	mov	sl, r6
   13aa4:	b	13b14 <__assert_fail@plt+0x2ab8>
   13aa8:	movw	r9, #24832	; 0x6100
   13aac:	mov	r0, #8
   13ab0:	str	r1, [fp, #-32]	; 0xffffffe0
   13ab4:	sub	r1, r5, r1
   13ab8:	mvn	r3, #-2147483648	; 0x80000000
   13abc:	movt	r9, #2
   13ac0:	str	r0, [sp]
   13ac4:	add	r2, r1, #1
   13ac8:	sub	r1, fp, #32
   13acc:	subs	r0, r6, r9
   13ad0:	movne	r0, r6
   13ad4:	bl	14764 <__assert_fail@plt+0x3708>
   13ad8:	mov	sl, r0
   13adc:	cmp	r6, r9
   13ae0:	str	r0, [r4]
   13ae4:	bne	13af0 <__assert_fail@plt+0x2a94>
   13ae8:	ldrd	r0, [r9]
   13aec:	stm	sl, {r0, r1}
   13af0:	ldr	r1, [r8]
   13af4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13af8:	add	r0, sl, r1, lsl #3
   13afc:	sub	r1, r2, r1
   13b00:	lsl	r2, r1, #3
   13b04:	mov	r1, #0
   13b08:	bl	10f90 <memset@plt>
   13b0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b10:	str	r0, [r8]
   13b14:	mov	r9, sl
   13b18:	ldm	r7, {r0, r1}
   13b1c:	orr	r8, r1, #1
   13b20:	add	r1, r7, #8
   13b24:	ldr	r2, [r7, #40]	; 0x28
   13b28:	ldr	r3, [r7, #44]	; 0x2c
   13b2c:	ldr	r6, [r9, r5, lsl #3]!
   13b30:	str	r1, [sp, #20]
   13b34:	ldr	r4, [r9, #4]!
   13b38:	stm	sp, {r0, r8}
   13b3c:	add	r0, sp, #8
   13b40:	stm	r0, {r1, r2, r3}
   13b44:	ldr	r2, [sp, #32]
   13b48:	ldr	r3, [sp, #36]	; 0x24
   13b4c:	mov	r1, r6
   13b50:	mov	r0, r4
   13b54:	bl	12840 <__assert_fail@plt+0x17e4>
   13b58:	cmp	r6, r0
   13b5c:	bhi	13bc0 <__assert_fail@plt+0x2b64>
   13b60:	add	r6, r0, #1
   13b64:	movw	r0, #25048	; 0x61d8
   13b68:	movt	r0, #2
   13b6c:	str	r6, [sl, r5, lsl #3]
   13b70:	cmp	r4, r0
   13b74:	beq	13b80 <__assert_fail@plt+0x2b24>
   13b78:	mov	r0, r4
   13b7c:	bl	12540 <__assert_fail@plt+0x14e4>
   13b80:	mov	r0, r6
   13b84:	bl	14634 <__assert_fail@plt+0x35d8>
   13b88:	str	r0, [r9]
   13b8c:	mov	r4, r0
   13b90:	add	r3, sp, #8
   13b94:	ldr	r0, [r7]
   13b98:	ldr	r1, [r7, #40]	; 0x28
   13b9c:	ldr	r2, [r7, #44]	; 0x2c
   13ba0:	stm	sp, {r0, r8}
   13ba4:	ldr	r0, [sp, #20]
   13ba8:	stm	r3, {r0, r1, r2}
   13bac:	ldr	r2, [sp, #32]
   13bb0:	ldr	r3, [sp, #36]	; 0x24
   13bb4:	mov	r0, r4
   13bb8:	mov	r1, r6
   13bbc:	bl	12840 <__assert_fail@plt+0x17e4>
   13bc0:	ldr	r0, [sp, #28]
   13bc4:	ldr	r1, [sp, #24]
   13bc8:	str	r1, [r0]
   13bcc:	mov	r0, r4
   13bd0:	sub	sp, fp, #28
   13bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd8:	bl	11038 <abort@plt>
   13bdc:	movw	r3, #25000	; 0x61a8
   13be0:	movt	r3, #2
   13be4:	b	13a44 <__assert_fail@plt+0x29e8>
   13be8:	movw	r3, #25000	; 0x61a8
   13bec:	mov	r1, r0
   13bf0:	mov	r0, #0
   13bf4:	mvn	r2, #0
   13bf8:	movt	r3, #2
   13bfc:	b	13a44 <__assert_fail@plt+0x29e8>
   13c00:	movw	r3, #25000	; 0x61a8
   13c04:	mov	r2, r1
   13c08:	mov	r1, r0
   13c0c:	mov	r0, #0
   13c10:	movt	r3, #2
   13c14:	b	13a44 <__assert_fail@plt+0x29e8>
   13c18:	push	{fp, lr}
   13c1c:	mov	fp, sp
   13c20:	sub	sp, sp, #48	; 0x30
   13c24:	vmov.i32	q8, #0	; 0x00000000
   13c28:	mov	ip, #32
   13c2c:	mov	r3, sp
   13c30:	mov	lr, r2
   13c34:	cmp	r1, #10
   13c38:	add	r2, r3, #16
   13c3c:	vst1.64	{d16-d17}, [r3], ip
   13c40:	vst1.64	{d16-d17}, [r2]
   13c44:	vst1.64	{d16-d17}, [r3]
   13c48:	beq	13c68 <__assert_fail@plt+0x2c0c>
   13c4c:	str	r1, [sp]
   13c50:	mov	r3, sp
   13c54:	mov	r1, lr
   13c58:	mvn	r2, #0
   13c5c:	bl	13a44 <__assert_fail@plt+0x29e8>
   13c60:	mov	sp, fp
   13c64:	pop	{fp, pc}
   13c68:	bl	11038 <abort@plt>
   13c6c:	push	{r4, sl, fp, lr}
   13c70:	add	fp, sp, #8
   13c74:	sub	sp, sp, #48	; 0x30
   13c78:	vmov.i32	q8, #0	; 0x00000000
   13c7c:	mov	ip, r3
   13c80:	mov	r3, sp
   13c84:	mov	lr, #32
   13c88:	cmp	r1, #10
   13c8c:	add	r4, r3, #16
   13c90:	vst1.64	{d16-d17}, [r3], lr
   13c94:	vst1.64	{d16-d17}, [r4]
   13c98:	vst1.64	{d16-d17}, [r3]
   13c9c:	beq	13cbc <__assert_fail@plt+0x2c60>
   13ca0:	str	r1, [sp]
   13ca4:	mov	r1, r2
   13ca8:	mov	r3, sp
   13cac:	mov	r2, ip
   13cb0:	bl	13a44 <__assert_fail@plt+0x29e8>
   13cb4:	sub	sp, fp, #8
   13cb8:	pop	{r4, sl, fp, pc}
   13cbc:	bl	11038 <abort@plt>
   13cc0:	mov	r2, r1
   13cc4:	mov	r1, r0
   13cc8:	mov	r0, #0
   13ccc:	b	13c18 <__assert_fail@plt+0x2bbc>
   13cd0:	mov	r3, r2
   13cd4:	mov	r2, r1
   13cd8:	mov	r1, r0
   13cdc:	mov	r0, #0
   13ce0:	b	13c6c <__assert_fail@plt+0x2c10>
   13ce4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ce8:	add	fp, sp, #24
   13cec:	sub	sp, sp, #48	; 0x30
   13cf0:	movw	r8, #25000	; 0x61a8
   13cf4:	mov	lr, r0
   13cf8:	mov	r3, sp
   13cfc:	mov	ip, r1
   13d00:	movt	r8, #2
   13d04:	mov	r1, r3
   13d08:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13d0c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13d10:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13d14:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13d18:	ubfx	r0, r2, #5, #3
   13d1c:	and	r2, r2, #31
   13d20:	mov	r4, #1
   13d24:	add	r0, r3, r0, lsl #2
   13d28:	ldr	r1, [r0, #8]
   13d2c:	bic	r4, r4, r1, lsr r2
   13d30:	eor	r1, r1, r4, lsl r2
   13d34:	mov	r2, ip
   13d38:	str	r1, [r0, #8]
   13d3c:	mov	r0, #0
   13d40:	mov	r1, lr
   13d44:	bl	13a44 <__assert_fail@plt+0x29e8>
   13d48:	sub	sp, fp, #24
   13d4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d54:	add	fp, sp, #24
   13d58:	sub	sp, sp, #48	; 0x30
   13d5c:	movw	lr, #25000	; 0x61a8
   13d60:	mov	ip, r0
   13d64:	mov	r3, sp
   13d68:	movt	lr, #2
   13d6c:	mov	r2, r3
   13d70:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13d74:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13d78:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13d7c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13d80:	ubfx	r0, r1, #5, #3
   13d84:	and	r1, r1, #31
   13d88:	mov	r7, #1
   13d8c:	add	r0, r3, r0, lsl #2
   13d90:	ldr	r2, [r0, #8]
   13d94:	bic	r7, r7, r2, lsr r1
   13d98:	eor	r1, r2, r7, lsl r1
   13d9c:	mvn	r2, #0
   13da0:	str	r1, [r0, #8]
   13da4:	mov	r0, #0
   13da8:	mov	r1, ip
   13dac:	bl	13a44 <__assert_fail@plt+0x29e8>
   13db0:	sub	sp, fp, #24
   13db4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13db8:	push	{r4, r5, r6, r7, fp, lr}
   13dbc:	add	fp, sp, #16
   13dc0:	sub	sp, sp, #48	; 0x30
   13dc4:	movw	lr, #25000	; 0x61a8
   13dc8:	mov	ip, r0
   13dcc:	mov	r3, sp
   13dd0:	movt	lr, #2
   13dd4:	mov	r2, r3
   13dd8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13ddc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13de0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13de4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13de8:	mov	r1, ip
   13dec:	mvn	r2, #0
   13df0:	ldr	r0, [sp, #12]
   13df4:	orr	r0, r0, #67108864	; 0x4000000
   13df8:	str	r0, [sp, #12]
   13dfc:	mov	r0, #0
   13e00:	bl	13a44 <__assert_fail@plt+0x29e8>
   13e04:	sub	sp, fp, #16
   13e08:	pop	{r4, r5, r6, r7, fp, pc}
   13e0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e10:	add	fp, sp, #24
   13e14:	sub	sp, sp, #48	; 0x30
   13e18:	movw	r8, #25000	; 0x61a8
   13e1c:	mov	ip, r1
   13e20:	mov	lr, r0
   13e24:	mov	r3, sp
   13e28:	movt	r8, #2
   13e2c:	mov	r2, r3
   13e30:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13e34:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13e38:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13e3c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13e40:	mov	r1, lr
   13e44:	mov	r2, ip
   13e48:	ldr	r0, [sp, #12]
   13e4c:	orr	r0, r0, #67108864	; 0x4000000
   13e50:	str	r0, [sp, #12]
   13e54:	mov	r0, #0
   13e58:	bl	13a44 <__assert_fail@plt+0x29e8>
   13e5c:	sub	sp, fp, #24
   13e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e68:	add	fp, sp, #24
   13e6c:	sub	sp, sp, #96	; 0x60
   13e70:	vmov.i32	q8, #0	; 0x00000000
   13e74:	mov	lr, sp
   13e78:	mov	ip, r2
   13e7c:	cmp	r1, #10
   13e80:	add	r3, lr, #16
   13e84:	mov	r2, lr
   13e88:	vst1.64	{d16-d17}, [r3]
   13e8c:	mov	r3, #28
   13e90:	vst1.64	{d16-d17}, [r2], r3
   13e94:	vst1.32	{d16-d17}, [r2]
   13e98:	beq	13ed8 <__assert_fail@plt+0x2e7c>
   13e9c:	str	r1, [sp, #48]	; 0x30
   13ea0:	add	r3, sp, #48	; 0x30
   13ea4:	ldm	lr!, {r2, r4, r5, r6, r7}
   13ea8:	add	r1, r3, #4
   13eac:	stmia	r1!, {r2, r4, r5, r6, r7}
   13eb0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13eb4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13eb8:	mvn	r2, #0
   13ebc:	ldr	r1, [sp, #60]	; 0x3c
   13ec0:	orr	r1, r1, #67108864	; 0x4000000
   13ec4:	str	r1, [sp, #60]	; 0x3c
   13ec8:	mov	r1, ip
   13ecc:	bl	13a44 <__assert_fail@plt+0x29e8>
   13ed0:	sub	sp, fp, #24
   13ed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ed8:	bl	11038 <abort@plt>
   13edc:	push	{fp, lr}
   13ee0:	mov	fp, sp
   13ee4:	sub	sp, sp, #8
   13ee8:	mvn	ip, #0
   13eec:	str	ip, [sp]
   13ef0:	bl	13efc <__assert_fail@plt+0x2ea0>
   13ef4:	mov	sp, fp
   13ef8:	pop	{fp, pc}
   13efc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f00:	add	fp, sp, #24
   13f04:	sub	sp, sp, #48	; 0x30
   13f08:	movw	ip, #25000	; 0x61a8
   13f0c:	mov	lr, r3
   13f10:	mov	r3, sp
   13f14:	cmp	r1, #0
   13f18:	movt	ip, #2
   13f1c:	cmpne	r2, #0
   13f20:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13f24:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13f28:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13f2c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13f30:	mov	r3, #10
   13f34:	str	r3, [sp]
   13f38:	bne	13f40 <__assert_fail@plt+0x2ee4>
   13f3c:	bl	11038 <abort@plt>
   13f40:	ldr	ip, [fp, #8]
   13f44:	str	r2, [sp, #44]	; 0x2c
   13f48:	str	r1, [sp, #40]	; 0x28
   13f4c:	mov	r3, sp
   13f50:	mov	r1, lr
   13f54:	mov	r2, ip
   13f58:	bl	13a44 <__assert_fail@plt+0x29e8>
   13f5c:	sub	sp, fp, #24
   13f60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f64:	push	{fp, lr}
   13f68:	mov	fp, sp
   13f6c:	sub	sp, sp, #8
   13f70:	mov	r3, r2
   13f74:	mov	r2, r1
   13f78:	mov	r1, r0
   13f7c:	mvn	r0, #0
   13f80:	str	r0, [sp]
   13f84:	mov	r0, #0
   13f88:	bl	13efc <__assert_fail@plt+0x2ea0>
   13f8c:	mov	sp, fp
   13f90:	pop	{fp, pc}
   13f94:	push	{fp, lr}
   13f98:	mov	fp, sp
   13f9c:	sub	sp, sp, #8
   13fa0:	mov	ip, r2
   13fa4:	mov	r2, r1
   13fa8:	mov	r1, r0
   13fac:	str	r3, [sp]
   13fb0:	mov	r0, #0
   13fb4:	mov	r3, ip
   13fb8:	bl	13efc <__assert_fail@plt+0x2ea0>
   13fbc:	mov	sp, fp
   13fc0:	pop	{fp, pc}
   13fc4:	movw	r3, #24840	; 0x6108
   13fc8:	movt	r3, #2
   13fcc:	b	13a44 <__assert_fail@plt+0x29e8>
   13fd0:	movw	r3, #24840	; 0x6108
   13fd4:	mov	r2, r1
   13fd8:	mov	r1, r0
   13fdc:	mov	r0, #0
   13fe0:	movt	r3, #2
   13fe4:	b	13a44 <__assert_fail@plt+0x29e8>
   13fe8:	movw	r3, #24840	; 0x6108
   13fec:	mvn	r2, #0
   13ff0:	movt	r3, #2
   13ff4:	b	13a44 <__assert_fail@plt+0x29e8>
   13ff8:	movw	r3, #24840	; 0x6108
   13ffc:	mov	r1, r0
   14000:	mov	r0, #0
   14004:	mvn	r2, #0
   14008:	movt	r3, #2
   1400c:	b	13a44 <__assert_fail@plt+0x29e8>
   14010:	push	{r4, r5, fp, lr}
   14014:	add	fp, sp, #8
   14018:	mov	r5, r0
   1401c:	mov	r4, r1
   14020:	mov	r0, #0
   14024:	mov	r2, #5
   14028:	mov	r1, r5
   1402c:	bl	10e94 <dcgettext@plt>
   14030:	cmp	r0, r5
   14034:	popne	{r4, r5, fp, pc}
   14038:	bl	14bc8 <__assert_fail@plt+0x3b6c>
   1403c:	ldrb	r1, [r0]
   14040:	and	r1, r1, #223	; 0xdf
   14044:	cmp	r1, #71	; 0x47
   14048:	beq	140b0 <__assert_fail@plt+0x3054>
   1404c:	cmp	r1, #85	; 0x55
   14050:	bne	14108 <__assert_fail@plt+0x30ac>
   14054:	ldrb	r1, [r0, #1]
   14058:	and	r1, r1, #223	; 0xdf
   1405c:	cmp	r1, #84	; 0x54
   14060:	bne	14108 <__assert_fail@plt+0x30ac>
   14064:	ldrb	r1, [r0, #2]
   14068:	and	r1, r1, #223	; 0xdf
   1406c:	cmp	r1, #70	; 0x46
   14070:	bne	14108 <__assert_fail@plt+0x30ac>
   14074:	ldrb	r1, [r0, #3]
   14078:	cmp	r1, #45	; 0x2d
   1407c:	bne	14108 <__assert_fail@plt+0x30ac>
   14080:	ldrb	r1, [r0, #4]
   14084:	cmp	r1, #56	; 0x38
   14088:	bne	14108 <__assert_fail@plt+0x30ac>
   1408c:	ldrb	r0, [r0, #5]
   14090:	cmp	r0, #0
   14094:	bne	14108 <__assert_fail@plt+0x30ac>
   14098:	ldrb	r1, [r5]
   1409c:	movw	r2, #22632	; 0x5868
   140a0:	movw	r0, #22636	; 0x586c
   140a4:	movt	r2, #1
   140a8:	movt	r0, #1
   140ac:	b	14138 <__assert_fail@plt+0x30dc>
   140b0:	ldrb	r1, [r0, #1]
   140b4:	and	r1, r1, #223	; 0xdf
   140b8:	cmp	r1, #66	; 0x42
   140bc:	bne	14108 <__assert_fail@plt+0x30ac>
   140c0:	ldrb	r1, [r0, #2]
   140c4:	cmp	r1, #49	; 0x31
   140c8:	bne	14108 <__assert_fail@plt+0x30ac>
   140cc:	ldrb	r1, [r0, #3]
   140d0:	cmp	r1, #56	; 0x38
   140d4:	bne	14108 <__assert_fail@plt+0x30ac>
   140d8:	ldrb	r1, [r0, #4]
   140dc:	cmp	r1, #48	; 0x30
   140e0:	bne	14108 <__assert_fail@plt+0x30ac>
   140e4:	ldrb	r1, [r0, #5]
   140e8:	cmp	r1, #51	; 0x33
   140ec:	bne	14108 <__assert_fail@plt+0x30ac>
   140f0:	ldrb	r1, [r0, #6]
   140f4:	cmp	r1, #48	; 0x30
   140f8:	bne	14108 <__assert_fail@plt+0x30ac>
   140fc:	ldrb	r0, [r0, #7]
   14100:	cmp	r0, #0
   14104:	beq	14124 <__assert_fail@plt+0x30c8>
   14108:	movw	r1, #22628	; 0x5864
   1410c:	movw	r0, #22460	; 0x57bc
   14110:	cmp	r4, #9
   14114:	movt	r1, #1
   14118:	movt	r0, #1
   1411c:	moveq	r0, r1
   14120:	pop	{r4, r5, fp, pc}
   14124:	ldrb	r1, [r5]
   14128:	movw	r2, #22640	; 0x5870
   1412c:	movw	r0, #22644	; 0x5874
   14130:	movt	r2, #1
   14134:	movt	r0, #1
   14138:	cmp	r1, #96	; 0x60
   1413c:	moveq	r0, r2
   14140:	pop	{r4, r5, fp, pc}
   14144:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14148:	add	fp, sp, #24
   1414c:	sub	sp, sp, #32
   14150:	ldr	r6, [fp, #12]
   14154:	ldr	r7, [fp, #8]
   14158:	mov	r4, r2
   1415c:	mov	r8, r0
   14160:	cmp	r1, #0
   14164:	beq	1418c <__assert_fail@plt+0x3130>
   14168:	movw	r2, #22732	; 0x58cc
   1416c:	mov	r5, r1
   14170:	str	r3, [sp, #4]
   14174:	str	r4, [sp]
   14178:	mov	r0, r8
   1417c:	mov	r1, #1
   14180:	movt	r2, #1
   14184:	mov	r3, r5
   14188:	b	141a4 <__assert_fail@plt+0x3148>
   1418c:	movw	r2, #22744	; 0x58d8
   14190:	str	r3, [sp]
   14194:	mov	r0, r8
   14198:	mov	r1, #1
   1419c:	mov	r3, r4
   141a0:	movt	r2, #1
   141a4:	bl	10fb4 <__fprintf_chk@plt>
   141a8:	movw	r1, #22751	; 0x58df
   141ac:	mov	r0, #0
   141b0:	mov	r2, #5
   141b4:	movt	r1, #1
   141b8:	bl	10e94 <dcgettext@plt>
   141bc:	movw	r2, #23469	; 0x5bad
   141c0:	mov	r3, r0
   141c4:	movw	r0, #2022	; 0x7e6
   141c8:	mov	r1, #1
   141cc:	movt	r2, #1
   141d0:	str	r0, [sp]
   141d4:	mov	r0, r8
   141d8:	bl	10fb4 <__fprintf_chk@plt>
   141dc:	movw	r4, #21384	; 0x5388
   141e0:	mov	r1, r8
   141e4:	movt	r4, #1
   141e8:	mov	r0, r4
   141ec:	bl	10e10 <fputs_unlocked@plt>
   141f0:	movw	r1, #22755	; 0x58e3
   141f4:	mov	r0, #0
   141f8:	mov	r2, #5
   141fc:	movt	r1, #1
   14200:	bl	10e94 <dcgettext@plt>
   14204:	movw	r3, #22926	; 0x598e
   14208:	mov	r2, r0
   1420c:	mov	r0, r8
   14210:	mov	r1, #1
   14214:	movt	r3, #1
   14218:	bl	10fb4 <__fprintf_chk@plt>
   1421c:	mov	r0, r4
   14220:	mov	r1, r8
   14224:	bl	10e10 <fputs_unlocked@plt>
   14228:	cmp	r6, #9
   1422c:	bhi	14290 <__assert_fail@plt+0x3234>
   14230:	add	r0, pc, #0
   14234:	ldr	pc, [r0, r6, lsl #2]
   14238:	andeq	r4, r1, r8, ror #8
   1423c:	andeq	r4, r1, r0, ror #4
   14240:	muleq	r1, ip, r2
   14244:	andeq	r4, r1, r4, asr #5
   14248:	andeq	r4, r1, ip, ror #5
   1424c:	andeq	r4, r1, r4, lsl r3
   14250:	andeq	r4, r1, ip, lsr r3
   14254:	andeq	r4, r1, r4, ror r3
   14258:	andeq	r4, r1, r4, lsl r4
   1425c:			; <UNDEFINED> instruction: 0x000143bc
   14260:	movw	r1, #22960	; 0x59b0
   14264:	mov	r0, #0
   14268:	mov	r2, #5
   1426c:	movt	r1, #1
   14270:	bl	10e94 <dcgettext@plt>
   14274:	ldr	r3, [r7]
   14278:	mov	r2, r0
   1427c:	mov	r0, r8
   14280:	mov	r1, #1
   14284:	sub	sp, fp, #24
   14288:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1428c:	b	10fb4 <__fprintf_chk@plt>
   14290:	movw	r1, #23279	; 0x5aef
   14294:	movt	r1, #1
   14298:	b	143c4 <__assert_fail@plt+0x3368>
   1429c:	movw	r1, #22976	; 0x59c0
   142a0:	mov	r0, #0
   142a4:	mov	r2, #5
   142a8:	movt	r1, #1
   142ac:	bl	10e94 <dcgettext@plt>
   142b0:	mov	r2, r0
   142b4:	ldr	r3, [r7]
   142b8:	ldr	r0, [r7, #4]
   142bc:	str	r0, [sp]
   142c0:	b	143b0 <__assert_fail@plt+0x3354>
   142c4:	movw	r1, #22999	; 0x59d7
   142c8:	mov	r0, #0
   142cc:	mov	r2, #5
   142d0:	movt	r1, #1
   142d4:	bl	10e94 <dcgettext@plt>
   142d8:	mov	r2, r0
   142dc:	ldr	r3, [r7]
   142e0:	ldmib	r7, {r0, r1}
   142e4:	stm	sp, {r0, r1}
   142e8:	b	143b0 <__assert_fail@plt+0x3354>
   142ec:	movw	r1, #23027	; 0x59f3
   142f0:	mov	r0, #0
   142f4:	mov	r2, #5
   142f8:	movt	r1, #1
   142fc:	bl	10e94 <dcgettext@plt>
   14300:	ldr	r3, [r7]
   14304:	mov	r2, r0
   14308:	ldmib	r7, {r0, r1, r7}
   1430c:	stm	sp, {r0, r1, r7}
   14310:	b	143b0 <__assert_fail@plt+0x3354>
   14314:	movw	r1, #23059	; 0x5a13
   14318:	mov	r0, #0
   1431c:	mov	r2, #5
   14320:	movt	r1, #1
   14324:	bl	10e94 <dcgettext@plt>
   14328:	ldr	r3, [r7]
   1432c:	mov	r2, r0
   14330:	ldmib	r7, {r0, r1, r6, r7}
   14334:	stm	sp, {r0, r1, r6, r7}
   14338:	b	143b0 <__assert_fail@plt+0x3354>
   1433c:	movw	r1, #23095	; 0x5a37
   14340:	mov	r0, #0
   14344:	mov	r2, #5
   14348:	movt	r1, #1
   1434c:	bl	10e94 <dcgettext@plt>
   14350:	mov	r2, r0
   14354:	ldr	r3, [r7]
   14358:	ldmib	r7, {r0, r1, r6}
   1435c:	ldr	r5, [r7, #16]
   14360:	ldr	r7, [r7, #20]
   14364:	stm	sp, {r0, r1, r6}
   14368:	str	r5, [sp, #12]
   1436c:	str	r7, [sp, #16]
   14370:	b	143b0 <__assert_fail@plt+0x3354>
   14374:	movw	r1, #23135	; 0x5a5f
   14378:	mov	r0, #0
   1437c:	mov	r2, #5
   14380:	movt	r1, #1
   14384:	bl	10e94 <dcgettext@plt>
   14388:	mov	r2, r0
   1438c:	ldr	r3, [r7]
   14390:	ldmib	r7, {r0, r1, r6}
   14394:	ldr	r5, [r7, #16]
   14398:	ldr	r4, [r7, #20]
   1439c:	ldr	r7, [r7, #24]
   143a0:	stm	sp, {r0, r1, r6}
   143a4:	str	r5, [sp, #12]
   143a8:	str	r4, [sp, #16]
   143ac:	str	r7, [sp, #20]
   143b0:	mov	r0, r8
   143b4:	mov	r1, #1
   143b8:	b	14464 <__assert_fail@plt+0x3408>
   143bc:	movw	r1, #23227	; 0x5abb
   143c0:	movt	r1, #1
   143c4:	mov	r0, #0
   143c8:	mov	r2, #5
   143cc:	bl	10e94 <dcgettext@plt>
   143d0:	mov	ip, r0
   143d4:	ldr	r3, [r7]
   143d8:	ldr	r0, [r7, #4]
   143dc:	ldr	r1, [r7, #8]
   143e0:	ldr	r6, [r7, #12]
   143e4:	ldr	r5, [r7, #16]
   143e8:	ldr	r4, [r7, #20]
   143ec:	ldr	r2, [r7, #24]
   143f0:	ldr	lr, [r7, #28]
   143f4:	ldr	r7, [r7, #32]
   143f8:	stm	sp, {r0, r1, r6}
   143fc:	str	r5, [sp, #12]
   14400:	str	r4, [sp, #16]
   14404:	str	r2, [sp, #20]
   14408:	str	lr, [sp, #24]
   1440c:	str	r7, [sp, #28]
   14410:	b	14458 <__assert_fail@plt+0x33fc>
   14414:	movw	r1, #23179	; 0x5a8b
   14418:	mov	r0, #0
   1441c:	mov	r2, #5
   14420:	movt	r1, #1
   14424:	bl	10e94 <dcgettext@plt>
   14428:	mov	ip, r0
   1442c:	ldr	r3, [r7]
   14430:	ldmib	r7, {r0, r1, r6}
   14434:	ldr	r5, [r7, #16]
   14438:	ldr	r4, [r7, #20]
   1443c:	ldr	r2, [r7, #24]
   14440:	ldr	r7, [r7, #28]
   14444:	stm	sp, {r0, r1, r6}
   14448:	str	r5, [sp, #12]
   1444c:	str	r4, [sp, #16]
   14450:	str	r2, [sp, #20]
   14454:	str	r7, [sp, #24]
   14458:	mov	r0, r8
   1445c:	mov	r1, #1
   14460:	mov	r2, ip
   14464:	bl	10fb4 <__fprintf_chk@plt>
   14468:	sub	sp, fp, #24
   1446c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14470:	push	{r4, sl, fp, lr}
   14474:	add	fp, sp, #8
   14478:	sub	sp, sp, #8
   1447c:	ldr	ip, [fp, #8]
   14480:	mov	lr, #0
   14484:	ldr	r4, [ip, lr, lsl #2]
   14488:	add	lr, lr, #1
   1448c:	cmp	r4, #0
   14490:	bne	14484 <__assert_fail@plt+0x3428>
   14494:	sub	r4, lr, #1
   14498:	str	ip, [sp]
   1449c:	str	r4, [sp, #4]
   144a0:	bl	14144 <__assert_fail@plt+0x30e8>
   144a4:	sub	sp, fp, #8
   144a8:	pop	{r4, sl, fp, pc}
   144ac:	push	{r4, r5, fp, lr}
   144b0:	add	fp, sp, #8
   144b4:	sub	sp, sp, #48	; 0x30
   144b8:	ldr	r4, [fp, #8]
   144bc:	mov	ip, #0
   144c0:	add	lr, sp, #8
   144c4:	ldr	r5, [r4]
   144c8:	cmp	r5, #0
   144cc:	str	r5, [lr, ip, lsl #2]
   144d0:	beq	144e8 <__assert_fail@plt+0x348c>
   144d4:	add	ip, ip, #1
   144d8:	add	r4, r4, #4
   144dc:	cmp	ip, #10
   144e0:	bne	144c4 <__assert_fail@plt+0x3468>
   144e4:	mov	ip, #10
   144e8:	str	lr, [sp]
   144ec:	str	ip, [sp, #4]
   144f0:	bl	14144 <__assert_fail@plt+0x30e8>
   144f4:	sub	sp, fp, #8
   144f8:	pop	{r4, r5, fp, pc}
   144fc:	push	{fp, lr}
   14500:	mov	fp, sp
   14504:	sub	sp, sp, #8
   14508:	add	ip, fp, #8
   1450c:	str	ip, [sp, #4]
   14510:	str	ip, [sp]
   14514:	bl	144ac <__assert_fail@plt+0x3450>
   14518:	mov	sp, fp
   1451c:	pop	{fp, pc}
   14520:	push	{fp, lr}
   14524:	mov	fp, sp
   14528:	movw	r0, #24916	; 0x6154
   1452c:	movt	r0, #2
   14530:	ldr	r1, [r0]
   14534:	movw	r0, #21384	; 0x5388
   14538:	movt	r0, #1
   1453c:	bl	10e10 <fputs_unlocked@plt>
   14540:	movw	r1, #23339	; 0x5b2b
   14544:	mov	r0, #0
   14548:	mov	r2, #5
   1454c:	movt	r1, #1
   14550:	bl	10e94 <dcgettext@plt>
   14554:	movw	r2, #23359	; 0x5b3f
   14558:	mov	r1, r0
   1455c:	mov	r0, #1
   14560:	movt	r2, #1
   14564:	bl	10f9c <__printf_chk@plt>
   14568:	movw	r1, #23381	; 0x5b55
   1456c:	mov	r0, #0
   14570:	mov	r2, #5
   14574:	movt	r1, #1
   14578:	bl	10e94 <dcgettext@plt>
   1457c:	movw	r2, #20886	; 0x5196
   14580:	movw	r3, #21193	; 0x52c9
   14584:	mov	r1, r0
   14588:	mov	r0, #1
   1458c:	movt	r2, #1
   14590:	movt	r3, #1
   14594:	bl	10f9c <__printf_chk@plt>
   14598:	movw	r1, #23401	; 0x5b69
   1459c:	mov	r0, #0
   145a0:	mov	r2, #5
   145a4:	movt	r1, #1
   145a8:	bl	10e94 <dcgettext@plt>
   145ac:	movw	r2, #23440	; 0x5b90
   145b0:	mov	r1, r0
   145b4:	mov	r0, #1
   145b8:	movt	r2, #1
   145bc:	pop	{fp, lr}
   145c0:	b	10f9c <__printf_chk@plt>
   145c4:	b	145c8 <__assert_fail@plt+0x356c>
   145c8:	push	{r4, r5, r6, sl, fp, lr}
   145cc:	add	fp, sp, #16
   145d0:	mov	r4, r2
   145d4:	mov	r5, r1
   145d8:	mov	r6, r0
   145dc:	bl	14c64 <__assert_fail@plt+0x3c08>
   145e0:	cmp	r0, #0
   145e4:	popne	{r4, r5, r6, sl, fp, pc}
   145e8:	cmp	r6, #0
   145ec:	beq	14600 <__assert_fail@plt+0x35a4>
   145f0:	cmp	r5, #0
   145f4:	cmpne	r4, #0
   145f8:	bne	14600 <__assert_fail@plt+0x35a4>
   145fc:	pop	{r4, r5, r6, sl, fp, pc}
   14600:	bl	14a30 <__assert_fail@plt+0x39d4>
   14604:	push	{fp, lr}
   14608:	mov	fp, sp
   1460c:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   14610:	cmp	r0, #0
   14614:	popne	{fp, pc}
   14618:	bl	14a30 <__assert_fail@plt+0x39d4>
   1461c:	push	{fp, lr}
   14620:	mov	fp, sp
   14624:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   14628:	cmp	r0, #0
   1462c:	popne	{fp, pc}
   14630:	bl	14a30 <__assert_fail@plt+0x39d4>
   14634:	push	{fp, lr}
   14638:	mov	fp, sp
   1463c:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   14640:	cmp	r0, #0
   14644:	popne	{fp, pc}
   14648:	bl	14a30 <__assert_fail@plt+0x39d4>
   1464c:	push	{r4, r5, fp, lr}
   14650:	add	fp, sp, #8
   14654:	mov	r4, r1
   14658:	mov	r5, r0
   1465c:	bl	14af8 <__assert_fail@plt+0x3a9c>
   14660:	cmp	r0, #0
   14664:	popne	{r4, r5, fp, pc}
   14668:	cmp	r5, #0
   1466c:	beq	1467c <__assert_fail@plt+0x3620>
   14670:	cmp	r4, #0
   14674:	bne	1467c <__assert_fail@plt+0x3620>
   14678:	pop	{r4, r5, fp, pc}
   1467c:	bl	14a30 <__assert_fail@plt+0x39d4>
   14680:	push	{fp, lr}
   14684:	mov	fp, sp
   14688:	cmp	r1, #0
   1468c:	orreq	r1, r1, #1
   14690:	bl	14af8 <__assert_fail@plt+0x3a9c>
   14694:	cmp	r0, #0
   14698:	popne	{fp, pc}
   1469c:	bl	14a30 <__assert_fail@plt+0x39d4>
   146a0:	push	{fp, lr}
   146a4:	mov	fp, sp
   146a8:	clz	r3, r2
   146ac:	lsr	ip, r3, #5
   146b0:	clz	r3, r1
   146b4:	lsr	r3, r3, #5
   146b8:	orrs	r3, r3, ip
   146bc:	movwne	r1, #1
   146c0:	movwne	r2, #1
   146c4:	bl	14c64 <__assert_fail@plt+0x3c08>
   146c8:	cmp	r0, #0
   146cc:	popne	{fp, pc}
   146d0:	bl	14a30 <__assert_fail@plt+0x39d4>
   146d4:	push	{fp, lr}
   146d8:	mov	fp, sp
   146dc:	mov	r2, r1
   146e0:	mov	r1, r0
   146e4:	mov	r0, #0
   146e8:	bl	14c64 <__assert_fail@plt+0x3c08>
   146ec:	cmp	r0, #0
   146f0:	popne	{fp, pc}
   146f4:	bl	14a30 <__assert_fail@plt+0x39d4>
   146f8:	mov	r2, r1
   146fc:	mov	r1, r0
   14700:	mov	r0, #0
   14704:	b	146a0 <__assert_fail@plt+0x3644>
   14708:	mov	r2, #1
   1470c:	b	14710 <__assert_fail@plt+0x36b4>
   14710:	push	{r4, r5, fp, lr}
   14714:	add	fp, sp, #8
   14718:	ldr	r5, [r1]
   1471c:	mov	r4, r1
   14720:	cmp	r0, #0
   14724:	beq	1473c <__assert_fail@plt+0x36e0>
   14728:	mov	r1, #1
   1472c:	add	r1, r1, r5, lsr #1
   14730:	adds	r5, r5, r1
   14734:	bcc	14754 <__assert_fail@plt+0x36f8>
   14738:	bl	14a30 <__assert_fail@plt+0x39d4>
   1473c:	cmp	r5, #0
   14740:	bne	14754 <__assert_fail@plt+0x36f8>
   14744:	mov	r1, #64	; 0x40
   14748:	cmp	r2, #64	; 0x40
   1474c:	udiv	r5, r1, r2
   14750:	addhi	r5, r5, #1
   14754:	mov	r1, r5
   14758:	bl	145c8 <__assert_fail@plt+0x356c>
   1475c:	str	r5, [r4]
   14760:	pop	{r4, r5, fp, pc}
   14764:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14768:	add	fp, sp, #24
   1476c:	ldr	r6, [r1]
   14770:	mov	r8, r1
   14774:	ldr	r4, [fp, #8]
   14778:	add	r1, r6, r6, asr #1
   1477c:	cmp	r1, r6
   14780:	mvnvs	r1, #-2147483648	; 0x80000000
   14784:	cmp	r1, r3
   14788:	mov	r5, r1
   1478c:	movgt	r5, r3
   14790:	cmn	r3, #1
   14794:	movle	r5, r1
   14798:	cmn	r4, #1
   1479c:	ble	147bc <__assert_fail@plt+0x3760>
   147a0:	cmp	r4, #0
   147a4:	beq	14810 <__assert_fail@plt+0x37b4>
   147a8:	cmn	r5, #1
   147ac:	ble	147e4 <__assert_fail@plt+0x3788>
   147b0:	mvn	r7, #-2147483648	; 0x80000000
   147b4:	udiv	r1, r7, r4
   147b8:	b	147d8 <__assert_fail@plt+0x377c>
   147bc:	cmn	r5, #1
   147c0:	ble	14800 <__assert_fail@plt+0x37a4>
   147c4:	cmn	r4, #1
   147c8:	beq	14810 <__assert_fail@plt+0x37b4>
   147cc:	mov	r1, #-2147483648	; 0x80000000
   147d0:	mvn	r7, #-2147483648	; 0x80000000
   147d4:	sdiv	r1, r1, r4
   147d8:	cmp	r1, r5
   147dc:	bge	14810 <__assert_fail@plt+0x37b4>
   147e0:	b	14820 <__assert_fail@plt+0x37c4>
   147e4:	beq	14810 <__assert_fail@plt+0x37b4>
   147e8:	mov	r1, #-2147483648	; 0x80000000
   147ec:	mvn	r7, #-2147483648	; 0x80000000
   147f0:	sdiv	r1, r1, r5
   147f4:	cmp	r1, r4
   147f8:	bge	14810 <__assert_fail@plt+0x37b4>
   147fc:	b	14820 <__assert_fail@plt+0x37c4>
   14800:	mvn	r7, #-2147483648	; 0x80000000
   14804:	sdiv	r1, r7, r4
   14808:	cmp	r5, r1
   1480c:	blt	14820 <__assert_fail@plt+0x37c4>
   14810:	mul	r1, r5, r4
   14814:	mov	r7, #64	; 0x40
   14818:	cmp	r1, #63	; 0x3f
   1481c:	bgt	14828 <__assert_fail@plt+0x37cc>
   14820:	sdiv	r5, r7, r4
   14824:	mul	r1, r5, r4
   14828:	cmp	r0, #0
   1482c:	moveq	r7, #0
   14830:	streq	r7, [r8]
   14834:	sub	r7, r5, r6
   14838:	cmp	r7, r2
   1483c:	bge	148e0 <__assert_fail@plt+0x3884>
   14840:	add	r5, r6, r2
   14844:	mov	r2, #0
   14848:	mov	r1, #0
   1484c:	cmp	r5, r3
   14850:	movwgt	r2, #1
   14854:	cmn	r3, #1
   14858:	movwgt	r1, #1
   1485c:	cmp	r5, r6
   14860:	bvs	148c8 <__assert_fail@plt+0x386c>
   14864:	ands	r1, r1, r2
   14868:	bne	148c8 <__assert_fail@plt+0x386c>
   1486c:	cmn	r4, #1
   14870:	ble	14890 <__assert_fail@plt+0x3834>
   14874:	cmp	r4, #0
   14878:	beq	148dc <__assert_fail@plt+0x3880>
   1487c:	cmn	r5, #1
   14880:	ble	148b4 <__assert_fail@plt+0x3858>
   14884:	mvn	r1, #-2147483648	; 0x80000000
   14888:	udiv	r1, r1, r4
   1488c:	b	148a8 <__assert_fail@plt+0x384c>
   14890:	cmn	r5, #1
   14894:	ble	148cc <__assert_fail@plt+0x3870>
   14898:	cmn	r4, #1
   1489c:	beq	148dc <__assert_fail@plt+0x3880>
   148a0:	mov	r1, #-2147483648	; 0x80000000
   148a4:	sdiv	r1, r1, r4
   148a8:	cmp	r1, r5
   148ac:	bge	148dc <__assert_fail@plt+0x3880>
   148b0:	b	148c8 <__assert_fail@plt+0x386c>
   148b4:	beq	148dc <__assert_fail@plt+0x3880>
   148b8:	mov	r1, #-2147483648	; 0x80000000
   148bc:	sdiv	r1, r1, r5
   148c0:	cmp	r1, r4
   148c4:	bge	148dc <__assert_fail@plt+0x3880>
   148c8:	bl	14a30 <__assert_fail@plt+0x39d4>
   148cc:	mvn	r1, #-2147483648	; 0x80000000
   148d0:	sdiv	r1, r1, r4
   148d4:	cmp	r5, r1
   148d8:	blt	148c8 <__assert_fail@plt+0x386c>
   148dc:	mul	r1, r5, r4
   148e0:	bl	1464c <__assert_fail@plt+0x35f0>
   148e4:	str	r5, [r8]
   148e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148ec:	push	{fp, lr}
   148f0:	mov	fp, sp
   148f4:	mov	r1, #1
   148f8:	bl	14a74 <__assert_fail@plt+0x3a18>
   148fc:	cmp	r0, #0
   14900:	popne	{fp, pc}
   14904:	bl	14a30 <__assert_fail@plt+0x39d4>
   14908:	push	{fp, lr}
   1490c:	mov	fp, sp
   14910:	bl	14a74 <__assert_fail@plt+0x3a18>
   14914:	cmp	r0, #0
   14918:	popne	{fp, pc}
   1491c:	bl	14a30 <__assert_fail@plt+0x39d4>
   14920:	push	{fp, lr}
   14924:	mov	fp, sp
   14928:	mov	r1, #1
   1492c:	bl	14a74 <__assert_fail@plt+0x3a18>
   14930:	cmp	r0, #0
   14934:	popne	{fp, pc}
   14938:	bl	14a30 <__assert_fail@plt+0x39d4>
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	bl	14a74 <__assert_fail@plt+0x3a18>
   14948:	cmp	r0, #0
   1494c:	popne	{fp, pc}
   14950:	bl	14a30 <__assert_fail@plt+0x39d4>
   14954:	push	{r4, r5, fp, lr}
   14958:	add	fp, sp, #8
   1495c:	mov	r5, r0
   14960:	mov	r0, r1
   14964:	mov	r4, r1
   14968:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   1496c:	cmp	r0, #0
   14970:	beq	14984 <__assert_fail@plt+0x3928>
   14974:	mov	r1, r5
   14978:	mov	r2, r4
   1497c:	pop	{r4, r5, fp, lr}
   14980:	b	10e64 <memcpy@plt>
   14984:	bl	14a30 <__assert_fail@plt+0x39d4>
   14988:	push	{r4, r5, fp, lr}
   1498c:	add	fp, sp, #8
   14990:	mov	r5, r0
   14994:	mov	r0, r1
   14998:	mov	r4, r1
   1499c:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   149a0:	cmp	r0, #0
   149a4:	beq	149b8 <__assert_fail@plt+0x395c>
   149a8:	mov	r1, r5
   149ac:	mov	r2, r4
   149b0:	pop	{r4, r5, fp, lr}
   149b4:	b	10e64 <memcpy@plt>
   149b8:	bl	14a30 <__assert_fail@plt+0x39d4>
   149bc:	push	{r4, r5, fp, lr}
   149c0:	add	fp, sp, #8
   149c4:	mov	r5, r0
   149c8:	add	r0, r1, #1
   149cc:	mov	r4, r1
   149d0:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   149d4:	cmp	r0, #0
   149d8:	beq	149f4 <__assert_fail@plt+0x3998>
   149dc:	mov	r1, #0
   149e0:	mov	r2, r4
   149e4:	strb	r1, [r0, r4]
   149e8:	mov	r1, r5
   149ec:	pop	{r4, r5, fp, lr}
   149f0:	b	10e64 <memcpy@plt>
   149f4:	bl	14a30 <__assert_fail@plt+0x39d4>
   149f8:	push	{r4, r5, fp, lr}
   149fc:	add	fp, sp, #8
   14a00:	mov	r4, r0
   14a04:	bl	10f6c <strlen@plt>
   14a08:	add	r5, r0, #1
   14a0c:	mov	r0, r5
   14a10:	bl	14ac8 <__assert_fail@plt+0x3a6c>
   14a14:	cmp	r0, #0
   14a18:	beq	14a2c <__assert_fail@plt+0x39d0>
   14a1c:	mov	r1, r4
   14a20:	mov	r2, r5
   14a24:	pop	{r4, r5, fp, lr}
   14a28:	b	10e64 <memcpy@plt>
   14a2c:	bl	14a30 <__assert_fail@plt+0x39d4>
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	movw	r0, #24820	; 0x60f4
   14a3c:	movw	r1, #23516	; 0x5bdc
   14a40:	mov	r2, #5
   14a44:	movt	r0, #2
   14a48:	movt	r1, #1
   14a4c:	ldr	r4, [r0]
   14a50:	mov	r0, #0
   14a54:	bl	10e94 <dcgettext@plt>
   14a58:	movw	r2, #21789	; 0x551d
   14a5c:	mov	r3, r0
   14a60:	mov	r0, r4
   14a64:	mov	r1, #0
   14a68:	movt	r2, #1
   14a6c:	bl	10f00 <error@plt>
   14a70:	bl	11038 <abort@plt>
   14a74:	clz	r2, r1
   14a78:	clz	r3, r0
   14a7c:	lsr	r2, r2, #5
   14a80:	lsr	r3, r3, #5
   14a84:	orrs	r2, r3, r2
   14a88:	movwne	r1, #1
   14a8c:	movwne	r0, #1
   14a90:	cmp	r1, #0
   14a94:	beq	14ac4 <__assert_fail@plt+0x3a68>
   14a98:	mvn	r2, #-2147483648	; 0x80000000
   14a9c:	udiv	r2, r2, r1
   14aa0:	cmp	r2, r0
   14aa4:	bcs	14ac4 <__assert_fail@plt+0x3a68>
   14aa8:	push	{fp, lr}
   14aac:	mov	fp, sp
   14ab0:	bl	10f78 <__errno_location@plt>
   14ab4:	mov	r1, #12
   14ab8:	str	r1, [r0]
   14abc:	mov	r0, #0
   14ac0:	pop	{fp, pc}
   14ac4:	b	10e04 <calloc@plt>
   14ac8:	cmp	r0, #0
   14acc:	movweq	r0, #1
   14ad0:	cmn	r0, #1
   14ad4:	ble	14adc <__assert_fail@plt+0x3a80>
   14ad8:	b	10f0c <malloc@plt>
   14adc:	push	{fp, lr}
   14ae0:	mov	fp, sp
   14ae4:	bl	10f78 <__errno_location@plt>
   14ae8:	mov	r1, #12
   14aec:	str	r1, [r0]
   14af0:	mov	r0, #0
   14af4:	pop	{fp, pc}
   14af8:	push	{fp, lr}
   14afc:	mov	fp, sp
   14b00:	cmp	r0, #0
   14b04:	beq	14b20 <__assert_fail@plt+0x3ac4>
   14b08:	cmp	r1, #0
   14b0c:	beq	14b2c <__assert_fail@plt+0x3ad0>
   14b10:	cmn	r1, #1
   14b14:	ble	14b34 <__assert_fail@plt+0x3ad8>
   14b18:	pop	{fp, lr}
   14b1c:	b	10ea0 <realloc@plt>
   14b20:	mov	r0, r1
   14b24:	pop	{fp, lr}
   14b28:	b	14ac8 <__assert_fail@plt+0x3a6c>
   14b2c:	bl	12540 <__assert_fail@plt+0x14e4>
   14b30:	b	14b40 <__assert_fail@plt+0x3ae4>
   14b34:	bl	10f78 <__errno_location@plt>
   14b38:	mov	r1, #12
   14b3c:	str	r1, [r0]
   14b40:	mov	r0, #0
   14b44:	pop	{fp, pc}
   14b48:	push	{r4, r5, r6, sl, fp, lr}
   14b4c:	add	fp, sp, #16
   14b50:	mov	r4, r0
   14b54:	bl	10edc <__fpending@plt>
   14b58:	mov	r5, r0
   14b5c:	mov	r0, r4
   14b60:	bl	10ee8 <ferror_unlocked@plt>
   14b64:	mov	r6, r0
   14b68:	mov	r0, r4
   14b6c:	bl	12448 <__assert_fail@plt+0x13ec>
   14b70:	cmp	r6, #0
   14b74:	beq	14b94 <__assert_fail@plt+0x3b38>
   14b78:	mvn	r4, #0
   14b7c:	cmp	r0, #0
   14b80:	bne	14bc0 <__assert_fail@plt+0x3b64>
   14b84:	bl	10f78 <__errno_location@plt>
   14b88:	mov	r1, #0
   14b8c:	str	r1, [r0]
   14b90:	b	14bc0 <__assert_fail@plt+0x3b64>
   14b94:	cmp	r0, #0
   14b98:	mov	r4, r0
   14b9c:	mvnne	r4, #0
   14ba0:	cmp	r5, #0
   14ba4:	bne	14bc0 <__assert_fail@plt+0x3b64>
   14ba8:	cmp	r0, #0
   14bac:	beq	14bc0 <__assert_fail@plt+0x3b64>
   14bb0:	bl	10f78 <__errno_location@plt>
   14bb4:	ldr	r0, [r0]
   14bb8:	subs	r4, r0, #9
   14bbc:	mvnne	r4, #0
   14bc0:	mov	r0, r4
   14bc4:	pop	{r4, r5, r6, sl, fp, pc}
   14bc8:	push	{fp, lr}
   14bcc:	mov	fp, sp
   14bd0:	mov	r0, #14
   14bd4:	bl	10ff0 <nl_langinfo@plt>
   14bd8:	movw	r1, #21385	; 0x5389
   14bdc:	cmp	r0, #0
   14be0:	movt	r1, #1
   14be4:	movne	r1, r0
   14be8:	movw	r0, #23533	; 0x5bed
   14bec:	ldrb	r2, [r1]
   14bf0:	movt	r0, #1
   14bf4:	cmp	r2, #0
   14bf8:	movne	r0, r1
   14bfc:	pop	{fp, pc}
   14c00:	push	{r4, r5, r6, r7, fp, lr}
   14c04:	add	fp, sp, #16
   14c08:	sub	sp, sp, #8
   14c0c:	cmp	r0, #0
   14c10:	add	r5, sp, #4
   14c14:	mov	r7, r2
   14c18:	mov	r4, r1
   14c1c:	movne	r5, r0
   14c20:	mov	r0, r5
   14c24:	bl	10ef4 <mbrtowc@plt>
   14c28:	mov	r6, r0
   14c2c:	cmp	r7, #0
   14c30:	beq	14c58 <__assert_fail@plt+0x3bfc>
   14c34:	cmn	r6, #2
   14c38:	bcc	14c58 <__assert_fail@plt+0x3bfc>
   14c3c:	mov	r0, #0
   14c40:	bl	14ca0 <__assert_fail@plt+0x3c44>
   14c44:	cmp	r0, #0
   14c48:	bne	14c58 <__assert_fail@plt+0x3bfc>
   14c4c:	ldrb	r0, [r4]
   14c50:	mov	r6, #1
   14c54:	str	r0, [r5]
   14c58:	mov	r0, r6
   14c5c:	sub	sp, fp, #16
   14c60:	pop	{r4, r5, r6, r7, fp, pc}
   14c64:	cmp	r2, #0
   14c68:	beq	14c98 <__assert_fail@plt+0x3c3c>
   14c6c:	mvn	r3, #0
   14c70:	udiv	r3, r3, r2
   14c74:	cmp	r3, r1
   14c78:	bcs	14c98 <__assert_fail@plt+0x3c3c>
   14c7c:	push	{fp, lr}
   14c80:	mov	fp, sp
   14c84:	bl	10f78 <__errno_location@plt>
   14c88:	mov	r1, #12
   14c8c:	str	r1, [r0]
   14c90:	mov	r0, #0
   14c94:	pop	{fp, pc}
   14c98:	mul	r1, r2, r1
   14c9c:	b	14af8 <__assert_fail@plt+0x3a9c>
   14ca0:	push	{r4, sl, fp, lr}
   14ca4:	add	fp, sp, #8
   14ca8:	sub	sp, sp, #264	; 0x108
   14cac:	add	r1, sp, #7
   14cb0:	movw	r2, #257	; 0x101
   14cb4:	bl	14d0c <__assert_fail@plt+0x3cb0>
   14cb8:	mov	r4, #0
   14cbc:	cmp	r0, #0
   14cc0:	bne	14d00 <__assert_fail@plt+0x3ca4>
   14cc4:	movw	r1, #23539	; 0x5bf3
   14cc8:	add	r0, sp, #7
   14ccc:	mov	r2, #2
   14cd0:	movt	r1, #1
   14cd4:	bl	10f60 <bcmp@plt>
   14cd8:	cmp	r0, #0
   14cdc:	beq	14d00 <__assert_fail@plt+0x3ca4>
   14ce0:	movw	r1, #23541	; 0x5bf5
   14ce4:	add	r0, sp, #7
   14ce8:	mov	r2, #6
   14cec:	movt	r1, #1
   14cf0:	bl	10f60 <bcmp@plt>
   14cf4:	cmp	r0, #0
   14cf8:	mov	r4, r0
   14cfc:	movwne	r4, #1
   14d00:	mov	r0, r4
   14d04:	sub	sp, fp, #8
   14d08:	pop	{r4, sl, fp, pc}
   14d0c:	push	{r4, r5, r6, r7, fp, lr}
   14d10:	add	fp, sp, #16
   14d14:	mov	r4, r1
   14d18:	mov	r1, #0
   14d1c:	mov	r6, r2
   14d20:	bl	10fd8 <setlocale@plt>
   14d24:	cmp	r0, #0
   14d28:	beq	14d54 <__assert_fail@plt+0x3cf8>
   14d2c:	mov	r7, r0
   14d30:	bl	10f6c <strlen@plt>
   14d34:	cmp	r0, r6
   14d38:	bcs	14d68 <__assert_fail@plt+0x3d0c>
   14d3c:	add	r2, r0, #1
   14d40:	mov	r0, r4
   14d44:	mov	r1, r7
   14d48:	bl	10e64 <memcpy@plt>
   14d4c:	mov	r5, #0
   14d50:	b	14d90 <__assert_fail@plt+0x3d34>
   14d54:	cmp	r6, #0
   14d58:	mov	r5, #22
   14d5c:	movne	r0, #0
   14d60:	strbne	r0, [r4]
   14d64:	b	14d90 <__assert_fail@plt+0x3d34>
   14d68:	mov	r5, #34	; 0x22
   14d6c:	cmp	r6, #0
   14d70:	beq	14d90 <__assert_fail@plt+0x3d34>
   14d74:	sub	r6, r6, #1
   14d78:	mov	r0, r4
   14d7c:	mov	r1, r7
   14d80:	mov	r2, r6
   14d84:	bl	10e64 <memcpy@plt>
   14d88:	mov	r0, #0
   14d8c:	strb	r0, [r4, r6]
   14d90:	mov	r0, r5
   14d94:	pop	{r4, r5, r6, r7, fp, pc}
   14d98:	mov	r1, #0
   14d9c:	b	10fd8 <setlocale@plt>
   14da0:	cmp	r3, #0
   14da4:	cmpeq	r2, #0
   14da8:	bne	14dc0 <__assert_fail@plt+0x3d64>
   14dac:	cmp	r1, #0
   14db0:	cmpeq	r0, #0
   14db4:	mvnne	r1, #0
   14db8:	mvnne	r0, #0
   14dbc:	b	14ddc <__assert_fail@plt+0x3d80>
   14dc0:	sub	sp, sp, #8
   14dc4:	push	{sp, lr}
   14dc8:	bl	14dec <__assert_fail@plt+0x3d90>
   14dcc:	ldr	lr, [sp, #4]
   14dd0:	add	sp, sp, #8
   14dd4:	pop	{r2, r3}
   14dd8:	bx	lr
   14ddc:	push	{r1, lr}
   14de0:	mov	r0, #8
   14de4:	bl	10e1c <raise@plt>
   14de8:	pop	{r1, pc}
   14dec:	cmp	r1, r3
   14df0:	cmpeq	r0, r2
   14df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df8:	mov	r4, r0
   14dfc:	movcc	r0, #0
   14e00:	mov	r5, r1
   14e04:	ldr	lr, [sp, #36]	; 0x24
   14e08:	movcc	r1, r0
   14e0c:	bcc	14f08 <__assert_fail@plt+0x3eac>
   14e10:	cmp	r3, #0
   14e14:	clzeq	ip, r2
   14e18:	clzne	ip, r3
   14e1c:	addeq	ip, ip, #32
   14e20:	cmp	r5, #0
   14e24:	clzeq	r1, r4
   14e28:	addeq	r1, r1, #32
   14e2c:	clzne	r1, r5
   14e30:	sub	ip, ip, r1
   14e34:	sub	sl, ip, #32
   14e38:	lsl	r9, r3, ip
   14e3c:	rsb	fp, ip, #32
   14e40:	orr	r9, r9, r2, lsl sl
   14e44:	orr	r9, r9, r2, lsr fp
   14e48:	lsl	r8, r2, ip
   14e4c:	cmp	r5, r9
   14e50:	cmpeq	r4, r8
   14e54:	movcc	r0, #0
   14e58:	movcc	r1, r0
   14e5c:	bcc	14e78 <__assert_fail@plt+0x3e1c>
   14e60:	mov	r0, #1
   14e64:	subs	r4, r4, r8
   14e68:	lsl	r1, r0, sl
   14e6c:	orr	r1, r1, r0, lsr fp
   14e70:	lsl	r0, r0, ip
   14e74:	sbc	r5, r5, r9
   14e78:	cmp	ip, #0
   14e7c:	beq	14f08 <__assert_fail@plt+0x3eac>
   14e80:	lsr	r6, r8, #1
   14e84:	orr	r6, r6, r9, lsl #31
   14e88:	lsr	r7, r9, #1
   14e8c:	mov	r2, ip
   14e90:	b	14eb4 <__assert_fail@plt+0x3e58>
   14e94:	subs	r3, r4, r6
   14e98:	sbc	r8, r5, r7
   14e9c:	adds	r3, r3, r3
   14ea0:	adc	r8, r8, r8
   14ea4:	adds	r4, r3, #1
   14ea8:	adc	r5, r8, #0
   14eac:	subs	r2, r2, #1
   14eb0:	beq	14ed0 <__assert_fail@plt+0x3e74>
   14eb4:	cmp	r5, r7
   14eb8:	cmpeq	r4, r6
   14ebc:	bcs	14e94 <__assert_fail@plt+0x3e38>
   14ec0:	adds	r4, r4, r4
   14ec4:	adc	r5, r5, r5
   14ec8:	subs	r2, r2, #1
   14ecc:	bne	14eb4 <__assert_fail@plt+0x3e58>
   14ed0:	lsr	r3, r4, ip
   14ed4:	orr	r3, r3, r5, lsl fp
   14ed8:	lsr	r2, r5, ip
   14edc:	orr	r3, r3, r5, lsr sl
   14ee0:	adds	r0, r0, r4
   14ee4:	mov	r4, r3
   14ee8:	lsl	r3, r2, ip
   14eec:	orr	r3, r3, r4, lsl sl
   14ef0:	lsl	ip, r4, ip
   14ef4:	orr	r3, r3, r4, lsr fp
   14ef8:	adc	r1, r1, r5
   14efc:	subs	r0, r0, ip
   14f00:	mov	r5, r2
   14f04:	sbc	r1, r1, r3
   14f08:	cmp	lr, #0
   14f0c:	strdne	r4, [lr]
   14f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f18:	mov	r7, r0
   14f1c:	ldr	r6, [pc, #72]	; 14f6c <__assert_fail@plt+0x3f10>
   14f20:	ldr	r5, [pc, #72]	; 14f70 <__assert_fail@plt+0x3f14>
   14f24:	add	r6, pc, r6
   14f28:	add	r5, pc, r5
   14f2c:	sub	r6, r6, r5
   14f30:	mov	r8, r1
   14f34:	mov	r9, r2
   14f38:	bl	10de4 <calloc@plt-0x20>
   14f3c:	asrs	r6, r6, #2
   14f40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f44:	mov	r4, #0
   14f48:	add	r4, r4, #1
   14f4c:	ldr	r3, [r5], #4
   14f50:	mov	r2, r9
   14f54:	mov	r1, r8
   14f58:	mov	r0, r7
   14f5c:	blx	r3
   14f60:	cmp	r6, r4
   14f64:	bne	14f48 <__assert_fail@plt+0x3eec>
   14f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f6c:	andeq	r0, r1, r0, ror #31
   14f70:	ldrdeq	r0, [r1], -r8
   14f74:	bx	lr
   14f78:	ldr	r3, [pc, #12]	; 14f8c <__assert_fail@plt+0x3f30>
   14f7c:	mov	r1, #0
   14f80:	add	r3, pc, r3
   14f84:	ldr	r2, [r3]
   14f88:	b	10f84 <__cxa_atexit@plt>
   14f8c:	andeq	r1, r1, ip, asr r1

Disassembly of section .fini:

00014f90 <.fini>:
   14f90:	push	{r3, lr}
   14f94:	pop	{r3, pc}
