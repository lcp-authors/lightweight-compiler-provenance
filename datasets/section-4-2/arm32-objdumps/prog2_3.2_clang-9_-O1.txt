
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

0001075c <.init>:
   1075c:	push	{r3, lr}
   10760:	bl	1080c <_start@@Base+0x3c>
   10764:	pop	{r3, pc}

Disassembly of section .plt:

00010768 <printf@plt-0x14>:
   10768:	push	{lr}		; (str lr, [sp, #-4]!)
   1076c:	ldr	lr, [pc, #4]	; 10778 <printf@plt-0x4>
   10770:	add	lr, pc, lr
   10774:	ldr	pc, [lr, #8]!
   10778:	andeq	r1, r1, r8, lsl #17

0001077c <printf@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #69632	; 0x11000
   10784:	ldr	pc, [ip, #2184]!	; 0x888

00010788 <puts@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #69632	; 0x11000
   10790:	ldr	pc, [ip, #2176]!	; 0x880

00010794 <__libc_start_main@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #69632	; 0x11000
   1079c:	ldr	pc, [ip, #2168]!	; 0x878

000107a0 <__gmon_start__@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #69632	; 0x11000
   107a8:	ldr	pc, [ip, #2160]!	; 0x870

000107ac <strlen@plt>:
   107ac:	add	ip, pc, #0, 12
   107b0:	add	ip, ip, #69632	; 0x11000
   107b4:	ldr	pc, [ip, #2152]!	; 0x868

000107b8 <putchar@plt>:
   107b8:	add	ip, pc, #0, 12
   107bc:	add	ip, ip, #69632	; 0x11000
   107c0:	ldr	pc, [ip, #2144]!	; 0x860

000107c4 <abort@plt>:
   107c4:	add	ip, pc, #0, 12
   107c8:	add	ip, ip, #69632	; 0x11000
   107cc:	ldr	pc, [ip, #2136]!	; 0x858

Disassembly of section .text:

000107d0 <_start@@Base>:
   107d0:	mov	fp, #0
   107d4:	mov	lr, #0
   107d8:	pop	{r1}		; (ldr r1, [sp], #4)
   107dc:	mov	r2, sp
   107e0:	push	{r2}		; (str r2, [sp, #-4]!)
   107e4:	push	{r0}		; (str r0, [sp, #-4]!)
   107e8:	ldr	ip, [pc, #16]	; 10800 <_start@@Base+0x30>
   107ec:	push	{ip}		; (str ip, [sp, #-4]!)
   107f0:	ldr	r0, [pc, #12]	; 10804 <_start@@Base+0x34>
   107f4:	ldr	r3, [pc, #12]	; 10808 <_start@@Base+0x38>
   107f8:	bl	10794 <__libc_start_main@plt>
   107fc:	bl	107c4 <abort@plt>
   10800:	muleq	r1, r4, lr
   10804:	andeq	r0, r1, r4, ror fp
   10808:	andeq	r0, r1, r4, lsr lr
   1080c:	ldr	r3, [pc, #20]	; 10828 <_start@@Base+0x58>
   10810:	ldr	r2, [pc, #20]	; 1082c <_start@@Base+0x5c>
   10814:	add	r3, pc, r3
   10818:	ldr	r2, [r3, r2]
   1081c:	cmp	r2, #0
   10820:	bxeq	lr
   10824:	b	107a0 <__gmon_start__@plt>
   10828:	andeq	r1, r1, r4, ror #15
   1082c:	andeq	r0, r0, r8, lsr #32
   10830:	ldr	r0, [pc, #24]	; 10850 <_start@@Base+0x80>
   10834:	ldr	r3, [pc, #24]	; 10854 <_start@@Base+0x84>
   10838:	cmp	r3, r0
   1083c:	bxeq	lr
   10840:	ldr	r3, [pc, #16]	; 10858 <_start@@Base+0x88>
   10844:	cmp	r3, #0
   10848:	bxeq	lr
   1084c:	bx	r3
   10850:	andeq	r2, r2, r4, lsr r0
   10854:	andeq	r2, r2, r4, lsr r0
   10858:	andeq	r0, r0, r0
   1085c:	ldr	r0, [pc, #36]	; 10888 <_start@@Base+0xb8>
   10860:	ldr	r1, [pc, #36]	; 1088c <_start@@Base+0xbc>
   10864:	sub	r1, r1, r0
   10868:	asr	r1, r1, #2
   1086c:	add	r1, r1, r1, lsr #31
   10870:	asrs	r1, r1, #1
   10874:	bxeq	lr
   10878:	ldr	r3, [pc, #16]	; 10890 <_start@@Base+0xc0>
   1087c:	cmp	r3, #0
   10880:	bxeq	lr
   10884:	bx	r3
   10888:	andeq	r2, r2, r4, lsr r0
   1088c:	andeq	r2, r2, r4, lsr r0
   10890:	andeq	r0, r0, r0
   10894:	push	{r4, lr}
   10898:	ldr	r4, [pc, #24]	; 108b8 <_start@@Base+0xe8>
   1089c:	ldrb	r3, [r4]
   108a0:	cmp	r3, #0
   108a4:	popne	{r4, pc}
   108a8:	bl	10830 <_start@@Base+0x60>
   108ac:	mov	r3, #1
   108b0:	strb	r3, [r4]
   108b4:	pop	{r4, pc}
   108b8:	andeq	r2, r2, r4, lsr r0
   108bc:	b	1085c <_start@@Base+0x8c>

000108c0 <comp_int_asc@@Base>:
   108c0:	ldr	r1, [r1]
   108c4:	ldr	r2, [r0]
   108c8:	mov	r0, #0
   108cc:	cmp	r2, r1
   108d0:	movwgt	r0, #1
   108d4:	cmp	r1, r2
   108d8:	mvngt	r0, #0
   108dc:	bx	lr

000108e0 <get_elem@@Base>:
   108e0:	mla	r0, r2, r1, r0
   108e4:	bx	lr

000108e8 <swap@@Base>:
   108e8:	cmp	r2, #1
   108ec:	bxlt	lr
   108f0:	ldrb	ip, [r0]
   108f4:	ldrb	r3, [r1]
   108f8:	strb	r3, [r0], #1
   108fc:	strb	ip, [r1], #1
   10900:	subs	r2, r2, #1
   10904:	bne	108f0 <swap@@Base+0x8>
   10908:	bx	lr

0001090c <sort@@Base>:
   1090c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10910:	add	fp, sp, #28
   10914:	sub	sp, sp, #12
   10918:	cmp	r1, #1
   1091c:	blt	109b4 <sort@@Base+0xa8>
   10920:	mov	sl, r3
   10924:	mov	r5, r2
   10928:	mov	r6, r1
   1092c:	mov	r7, r0
   10930:	mov	r4, #0
   10934:	b	10954 <sort@@Base+0x48>
   10938:	mov	r0, r4
   1093c:	ldr	r1, [sp, #4]
   10940:	mov	r2, r5
   10944:	bl	108e8 <swap@@Base>
   10948:	ldr	r4, [sp, #8]
   1094c:	cmp	r4, r6
   10950:	beq	109b4 <sort@@Base+0xa8>
   10954:	mov	r0, r7
   10958:	mov	r1, r4
   1095c:	mov	r2, r5
   10960:	bl	108e0 <get_elem@@Base>
   10964:	add	r4, r4, #1
   10968:	str	r4, [sp, #8]
   1096c:	cmp	r4, r6
   10970:	str	r0, [sp, #4]
   10974:	mov	r4, r0
   10978:	bge	10938 <sort@@Base+0x2c>
   1097c:	ldmib	sp, {r4, r8}
   10980:	mov	r0, r7
   10984:	mov	r1, r8
   10988:	mov	r2, r5
   1098c:	bl	108e0 <get_elem@@Base>
   10990:	mov	r9, r0
   10994:	mov	r1, r4
   10998:	blx	sl
   1099c:	cmp	r0, #0
   109a0:	movmi	r4, r9
   109a4:	add	r8, r8, #1
   109a8:	cmp	r6, r8
   109ac:	bne	10980 <sort@@Base+0x74>
   109b0:	b	10938 <sort@@Base+0x2c>
   109b4:	sub	sp, fp, #28
   109b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000109bc <linear_search@@Base>:
   109bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   109c0:	add	fp, sp, #24
   109c4:	cmp	r2, #1
   109c8:	blt	10a10 <linear_search@@Base+0x54>
   109cc:	mov	r8, r3
   109d0:	mov	r6, r2
   109d4:	mov	r9, r1
   109d8:	mov	r7, r0
   109dc:	ldr	r5, [fp, #8]
   109e0:	mov	r4, #0
   109e4:	mov	r0, r9
   109e8:	mov	r1, r4
   109ec:	mov	r2, r6
   109f0:	bl	108e0 <get_elem@@Base>
   109f4:	mov	r1, r7
   109f8:	blx	r5
   109fc:	cmp	r0, #0
   10a00:	beq	10a18 <linear_search@@Base+0x5c>
   10a04:	add	r4, r4, #1
   10a08:	cmp	r6, r4
   10a0c:	bne	109e4 <linear_search@@Base+0x28>
   10a10:	mov	r0, #0
   10a14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10a18:	mov	r0, r9
   10a1c:	mov	r1, r4
   10a20:	mov	r2, r8
   10a24:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10a28:	b	108e0 <get_elem@@Base>

00010a2c <binary_search@@Base>:
   10a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a30:	add	fp, sp, #28
   10a34:	push	{r3}		; (str r3, [sp, #-4]!)
   10a38:	cmp	r2, #1
   10a3c:	blt	10aa8 <binary_search@@Base+0x7c>
   10a40:	mov	sl, r1
   10a44:	mov	r6, r0
   10a48:	ldr	r9, [fp, #8]
   10a4c:	sub	r5, r2, #1
   10a50:	mov	r8, #0
   10a54:	add	r0, r5, r8
   10a58:	add	r0, r0, r0, lsr #31
   10a5c:	asr	r7, r0, #1
   10a60:	mov	r0, sl
   10a64:	mov	r1, r7
   10a68:	ldr	r2, [sp]
   10a6c:	bl	108e0 <get_elem@@Base>
   10a70:	mov	r4, r0
   10a74:	mov	r0, r6
   10a78:	mov	r1, r4
   10a7c:	blx	r9
   10a80:	cmp	r0, #0
   10a84:	bne	10aac <binary_search@@Base+0x80>
   10a88:	mov	r0, r6
   10a8c:	mov	r1, r4
   10a90:	blx	r9
   10a94:	cmn	r0, #1
   10a98:	subeq	r5, r7, #1
   10a9c:	addne	r8, r7, #1
   10aa0:	cmp	r8, r5
   10aa4:	ble	10a54 <binary_search@@Base+0x28>
   10aa8:	mov	r4, #0
   10aac:	mov	r0, r4
   10ab0:	sub	sp, fp, #28
   10ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010ab8 <insertion_sort@@Base>:
   10ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10abc:	add	fp, sp, #28
   10ac0:	push	{r1}		; (str r1, [sp, #-4]!)
   10ac4:	cmp	r1, #2
   10ac8:	blt	10b50 <insertion_sort@@Base+0x98>
   10acc:	mov	r9, r3
   10ad0:	mov	r5, r2
   10ad4:	mov	sl, r0
   10ad8:	mov	r8, #1
   10adc:	b	10af0 <insertion_sort@@Base+0x38>
   10ae0:	add	r8, r8, #1
   10ae4:	ldr	r0, [sp]
   10ae8:	cmp	r8, r0
   10aec:	beq	10b50 <insertion_sort@@Base+0x98>
   10af0:	mov	r6, r8
   10af4:	mov	r0, sl
   10af8:	mov	r1, r6
   10afc:	mov	r2, r5
   10b00:	bl	108e0 <get_elem@@Base>
   10b04:	mov	r4, r0
   10b08:	sub	r6, r6, #1
   10b0c:	mov	r0, sl
   10b10:	mov	r1, r6
   10b14:	mov	r2, r5
   10b18:	bl	108e0 <get_elem@@Base>
   10b1c:	mov	r7, r0
   10b20:	mov	r0, r4
   10b24:	mov	r1, r7
   10b28:	blx	r9
   10b2c:	cmn	r0, #1
   10b30:	bne	10ae0 <insertion_sort@@Base+0x28>
   10b34:	mov	r0, r4
   10b38:	mov	r1, r7
   10b3c:	mov	r2, r5
   10b40:	bl	108e8 <swap@@Base>
   10b44:	cmp	r6, #0
   10b48:	bgt	10af4 <insertion_sort@@Base+0x3c>
   10b4c:	b	10ae0 <insertion_sort@@Base+0x28>
   10b50:	sub	sp, fp, #28
   10b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010b58 <comp_char_desc@@Base>:
   10b58:	ldrb	r1, [r1]
   10b5c:	ldrb	r2, [r0]
   10b60:	mov	r0, #0
   10b64:	cmp	r2, r1
   10b68:	mvnhi	r0, #0
   10b6c:	movwcc	r0, #1
   10b70:	bx	lr

00010b74 <main@@Base>:
   10b74:	push	{r4, r5, r6, r7, fp, lr}
   10b78:	add	fp, sp, #16
   10b7c:	vpush	{d8-d10}
   10b80:	sub	sp, sp, #40	; 0x28
   10b84:	movw	r0, #3752	; 0xea8
   10b88:	movt	r0, #1
   10b8c:	vld1.64	{d8-d9}, [r0]!
   10b90:	vldr	d10, [r0]
   10b94:	add	r4, sp, #16
   10b98:	mov	r0, r4
   10b9c:	vst1.64	{d8-d9}, [r0]!
   10ba0:	vstr	d10, [r0]
   10ba4:	movw	r0, #3776	; 0xec0
   10ba8:	movt	r0, #1
   10bac:	bl	10788 <puts@plt>
   10bb0:	movw	r0, #3790	; 0xece
   10bb4:	movt	r0, #1
   10bb8:	bl	1077c <printf@plt>
   10bbc:	mov	r6, #0
   10bc0:	movw	r5, #3797	; 0xed5
   10bc4:	movt	r5, #1
   10bc8:	ldr	r1, [r4, -r6, lsl #2]
   10bcc:	mov	r0, r5
   10bd0:	bl	1077c <printf@plt>
   10bd4:	sub	r6, r6, #1
   10bd8:	cmn	r6, #6
   10bdc:	bne	10bc8 <main@@Base+0x54>
   10be0:	mov	r0, #10
   10be4:	bl	107b8 <putchar@plt>
   10be8:	movw	r5, #2240	; 0x8c0
   10bec:	movt	r5, #1
   10bf0:	mov	r0, r4
   10bf4:	mov	r1, #6
   10bf8:	mov	r2, #4
   10bfc:	mov	r3, r5
   10c00:	bl	1090c <sort@@Base>
   10c04:	movw	r0, #3801	; 0xed9
   10c08:	movt	r0, #1
   10c0c:	bl	1077c <printf@plt>
   10c10:	mov	r7, #0
   10c14:	movw	r6, #3797	; 0xed5
   10c18:	movt	r6, #1
   10c1c:	ldr	r1, [r4, -r7, lsl #2]
   10c20:	mov	r0, r6
   10c24:	bl	1077c <printf@plt>
   10c28:	sub	r7, r7, #1
   10c2c:	cmn	r7, #6
   10c30:	bne	10c1c <main@@Base+0xa8>
   10c34:	mov	r0, #10
   10c38:	bl	107b8 <putchar@plt>
   10c3c:	mov	r0, r4
   10c40:	vst1.64	{d8-d9}, [r0]!
   10c44:	vstr	d10, [r0]
   10c48:	movw	r0, #3809	; 0xee1
   10c4c:	movt	r0, #1
   10c50:	bl	10788 <puts@plt>
   10c54:	mov	r0, #4
   10c58:	str	r0, [sp, #12]
   10c5c:	str	r5, [sp]
   10c60:	add	r0, sp, #12
   10c64:	mov	r1, r4
   10c68:	mov	r2, #6
   10c6c:	mov	r3, #4
   10c70:	bl	109bc <linear_search@@Base>
   10c74:	ldr	r1, [sp, #12]
   10c78:	cmp	r0, #0
   10c7c:	beq	10c98 <main@@Base+0x124>
   10c80:	sub	r0, r0, r4
   10c84:	asr	r2, r0, #2
   10c88:	movw	r0, #3819	; 0xeeb
   10c8c:	movt	r0, #1
   10c90:	bl	1077c <printf@plt>
   10c94:	b	10ca4 <main@@Base+0x130>
   10c98:	movw	r0, #3864	; 0xf18
   10c9c:	movt	r0, #1
   10ca0:	bl	1077c <printf@plt>
   10ca4:	mov	r0, r4
   10ca8:	vst1.64	{d8-d9}, [r0]!
   10cac:	vstr	d10, [r0]
   10cb0:	mov	r0, r4
   10cb4:	mov	r1, #6
   10cb8:	mov	r2, #4
   10cbc:	mov	r3, r5
   10cc0:	bl	1090c <sort@@Base>
   10cc4:	movw	r0, #3898	; 0xf3a
   10cc8:	movt	r0, #1
   10ccc:	bl	10788 <puts@plt>
   10cd0:	str	r5, [sp]
   10cd4:	add	r0, sp, #12
   10cd8:	mov	r1, r4
   10cdc:	mov	r2, #6
   10ce0:	mov	r3, #4
   10ce4:	bl	10a2c <binary_search@@Base>
   10ce8:	ldr	r1, [sp, #12]
   10cec:	cmp	r0, #0
   10cf0:	beq	10d0c <main@@Base+0x198>
   10cf4:	sub	r0, r0, r4
   10cf8:	asr	r2, r0, #2
   10cfc:	movw	r0, #3819	; 0xeeb
   10d00:	movt	r0, #1
   10d04:	bl	1077c <printf@plt>
   10d08:	b	10d18 <main@@Base+0x1a4>
   10d0c:	movw	r0, #3864	; 0xf18
   10d10:	movt	r0, #1
   10d14:	bl	1077c <printf@plt>
   10d18:	mov	r0, r4
   10d1c:	vst1.64	{d8-d9}, [r0]!
   10d20:	vstr	d10, [r0]
   10d24:	movw	r0, #3908	; 0xf44
   10d28:	movt	r0, #1
   10d2c:	bl	10788 <puts@plt>
   10d30:	movw	r0, #3790	; 0xece
   10d34:	movt	r0, #1
   10d38:	bl	1077c <printf@plt>
   10d3c:	mov	r6, #0
   10d40:	movw	r5, #3797	; 0xed5
   10d44:	movt	r5, #1
   10d48:	ldr	r1, [r4, -r6, lsl #2]
   10d4c:	mov	r0, r5
   10d50:	bl	1077c <printf@plt>
   10d54:	sub	r6, r6, #1
   10d58:	cmn	r6, #6
   10d5c:	bne	10d48 <main@@Base+0x1d4>
   10d60:	mov	r0, #10
   10d64:	bl	107b8 <putchar@plt>
   10d68:	movw	r3, #2240	; 0x8c0
   10d6c:	movt	r3, #1
   10d70:	mov	r0, r4
   10d74:	mov	r1, #6
   10d78:	mov	r2, #4
   10d7c:	bl	10ab8 <insertion_sort@@Base>
   10d80:	movw	r0, #3801	; 0xed9
   10d84:	movt	r0, #1
   10d88:	bl	1077c <printf@plt>
   10d8c:	mov	r6, #0
   10d90:	movw	r5, #3797	; 0xed5
   10d94:	movt	r5, #1
   10d98:	ldr	r1, [r4, -r6, lsl #2]
   10d9c:	mov	r0, r5
   10da0:	bl	1077c <printf@plt>
   10da4:	sub	r6, r6, #1
   10da8:	cmn	r6, #6
   10dac:	bne	10d98 <main@@Base+0x224>
   10db0:	mov	r0, #10
   10db4:	bl	107b8 <putchar@plt>
   10db8:	movw	r0, #3918	; 0xf4e
   10dbc:	movt	r0, #1
   10dc0:	bl	10788 <puts@plt>
   10dc4:	mov	r0, #0
   10dc8:	strb	r0, [sp, #8]
   10dcc:	movw	r0, #25153	; 0x6241
   10dd0:	movt	r0, #24922	; 0x615a
   10dd4:	str	r0, [sp, #4]
   10dd8:	movw	r0, #3790	; 0xece
   10ddc:	movt	r0, #1
   10de0:	bl	1077c <printf@plt>
   10de4:	add	r4, sp, #4
   10de8:	mov	r0, r4
   10dec:	bl	10788 <puts@plt>
   10df0:	mov	r0, r4
   10df4:	bl	107ac <strlen@plt>
   10df8:	mov	r1, r0
   10dfc:	movw	r3, #2904	; 0xb58
   10e00:	movt	r3, #1
   10e04:	mov	r0, r4
   10e08:	mov	r2, #1
   10e0c:	bl	1090c <sort@@Base>
   10e10:	movw	r0, #3801	; 0xed9
   10e14:	movt	r0, #1
   10e18:	bl	1077c <printf@plt>
   10e1c:	mov	r0, r4
   10e20:	bl	10788 <puts@plt>
   10e24:	mov	r0, #0
   10e28:	sub	sp, fp, #40	; 0x28
   10e2c:	vpop	{d8-d10}
   10e30:	pop	{r4, r5, r6, r7, fp, pc}

00010e34 <__libc_csu_init@@Base>:
   10e34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e38:	mov	r7, r0
   10e3c:	ldr	r6, [pc, #72]	; 10e8c <__libc_csu_init@@Base+0x58>
   10e40:	ldr	r5, [pc, #72]	; 10e90 <__libc_csu_init@@Base+0x5c>
   10e44:	add	r6, pc, r6
   10e48:	add	r5, pc, r5
   10e4c:	sub	r6, r6, r5
   10e50:	mov	r8, r1
   10e54:	mov	r9, r2
   10e58:	bl	1075c <printf@plt-0x20>
   10e5c:	asrs	r6, r6, #2
   10e60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e64:	mov	r4, #0
   10e68:	add	r4, r4, #1
   10e6c:	ldr	r3, [r5], #4
   10e70:	mov	r2, r9
   10e74:	mov	r1, r8
   10e78:	mov	r0, r7
   10e7c:	blx	r3
   10e80:	cmp	r6, r4
   10e84:	bne	10e68 <__libc_csu_init@@Base+0x34>
   10e88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e8c:	andeq	r1, r1, r0, asr #1
   10e90:	strheq	r1, [r1], -r8

00010e94 <__libc_csu_fini@@Base>:
   10e94:	bx	lr

Disassembly of section .fini:

00010e98 <.fini>:
   10e98:	push	{r3, lr}
   10e9c:	pop	{r3, pc}
