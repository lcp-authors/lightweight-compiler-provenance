
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012de8 <.init>:
   12de8:	push	{r3, lr}
   12dec:	bl	12f4c <_start@@Base+0x3c>
   12df0:	pop	{r3, pc}

Disassembly of section .plt:

00012df4 <strcmp@plt-0x14>:
   12df4:	push	{lr}		; (str lr, [sp, #-4]!)
   12df8:	ldr	lr, [pc, #4]	; 12e04 <strcmp@plt-0x4>
   12dfc:	add	lr, pc, lr
   12e00:	ldr	pc, [lr, #8]!
   12e04:	strdeq	r8, [r2], -ip

00012e08 <strcmp@plt>:
   12e08:	add	ip, pc, #0, 12
   12e0c:	add	ip, ip, #40, 20	; 0x28000
   12e10:	ldr	pc, [ip, #508]!	; 0x1fc

00012e14 <printf@plt>:
   12e14:	add	ip, pc, #0, 12
   12e18:	add	ip, ip, #40, 20	; 0x28000
   12e1c:	ldr	pc, [ip, #500]!	; 0x1f4

00012e20 <free@plt>:
   12e20:	add	ip, pc, #0, 12
   12e24:	add	ip, ip, #40, 20	; 0x28000
   12e28:	ldr	pc, [ip, #492]!	; 0x1ec

00012e2c <memcpy@plt>:
   12e2c:	add	ip, pc, #0, 12
   12e30:	add	ip, ip, #40, 20	; 0x28000
   12e34:	ldr	pc, [ip, #484]!	; 0x1e4

00012e38 <memcmp@plt>:
   12e38:	add	ip, pc, #0, 12
   12e3c:	add	ip, ip, #40, 20	; 0x28000
   12e40:	ldr	pc, [ip, #476]!	; 0x1dc

00012e44 <realloc@plt>:
   12e44:	add	ip, pc, #0, 12
   12e48:	add	ip, ip, #40, 20	; 0x28000
   12e4c:	ldr	pc, [ip, #468]!	; 0x1d4

00012e50 <fwrite@plt>:
   12e50:	add	ip, pc, #0, 12
   12e54:	add	ip, ip, #40, 20	; 0x28000
   12e58:	ldr	pc, [ip, #460]!	; 0x1cc

00012e5c <gettimeofday@plt>:
   12e5c:	add	ip, pc, #0, 12
   12e60:	add	ip, ip, #40, 20	; 0x28000
   12e64:	ldr	pc, [ip, #452]!	; 0x1c4

00012e68 <puts@plt>:
   12e68:	add	ip, pc, #0, 12
   12e6c:	add	ip, ip, #40, 20	; 0x28000
   12e70:	ldr	pc, [ip, #444]!	; 0x1bc

00012e74 <malloc@plt>:
   12e74:	add	ip, pc, #0, 12
   12e78:	add	ip, ip, #40, 20	; 0x28000
   12e7c:	ldr	pc, [ip, #436]!	; 0x1b4

00012e80 <__libc_start_main@plt>:
   12e80:	add	ip, pc, #0, 12
   12e84:	add	ip, ip, #40, 20	; 0x28000
   12e88:	ldr	pc, [ip, #428]!	; 0x1ac

00012e8c <__gmon_start__@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #40, 20	; 0x28000
   12e94:	ldr	pc, [ip, #420]!	; 0x1a4

00012e98 <strlen@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #40, 20	; 0x28000
   12ea0:	ldr	pc, [ip, #412]!	; 0x19c

00012ea4 <fprintf@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #40, 20	; 0x28000
   12eac:	ldr	pc, [ip, #404]!	; 0x194

00012eb0 <posix_memalign@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #40, 20	; 0x28000
   12eb8:	ldr	pc, [ip, #396]!	; 0x18c

00012ebc <memset@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #40, 20	; 0x28000
   12ec4:	ldr	pc, [ip, #388]!	; 0x184

00012ec8 <strncpy@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #40, 20	; 0x28000
   12ed0:	ldr	pc, [ip, #380]!	; 0x17c

00012ed4 <memchr@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #40, 20	; 0x28000
   12edc:	ldr	pc, [ip, #372]!	; 0x174

00012ee0 <fputc@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #40, 20	; 0x28000
   12ee8:	ldr	pc, [ip, #364]!	; 0x16c

00012eec <strncmp@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #40, 20	; 0x28000
   12ef4:	ldr	pc, [ip, #356]!	; 0x164

00012ef8 <abort@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #40, 20	; 0x28000
   12f00:	ldr	pc, [ip, #348]!	; 0x15c

00012f04 <__assert_fail@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #40, 20	; 0x28000
   12f0c:	ldr	pc, [ip, #340]!	; 0x154

Disassembly of section .text:

00012f10 <_start@@Base>:
   12f10:	mov	fp, #0
   12f14:	mov	lr, #0
   12f18:	pop	{r1}		; (ldr r1, [sp], #4)
   12f1c:	mov	r2, sp
   12f20:	push	{r2}		; (str r2, [sp, #-4]!)
   12f24:	push	{r0}		; (str r0, [sp, #-4]!)
   12f28:	ldr	ip, [pc, #16]	; 12f40 <_start@@Base+0x30>
   12f2c:	push	{ip}		; (str ip, [sp, #-4]!)
   12f30:	ldr	r0, [pc, #12]	; 12f44 <_start@@Base+0x34>
   12f34:	ldr	r3, [pc, #12]	; 12f48 <_start@@Base+0x38>
   12f38:	bl	12e80 <__libc_start_main@plt>
   12f3c:	bl	12ef8 <abort@plt>
   12f40:	muleq	r2, ip, sp
   12f44:	andeq	sp, r1, ip, lsl #4
   12f48:	andeq	r4, r2, ip, lsr sp
   12f4c:	ldr	r3, [pc, #20]	; 12f68 <_start@@Base+0x58>
   12f50:	ldr	r2, [pc, #20]	; 12f6c <_start@@Base+0x5c>
   12f54:	add	r3, pc, r3
   12f58:	ldr	r2, [r3, r2]
   12f5c:	cmp	r2, #0
   12f60:	bxeq	lr
   12f64:	b	12e8c <__gmon_start__@plt>
   12f68:	andeq	r8, r2, r4, lsr #1
   12f6c:	andeq	r0, r0, ip, rrx
   12f70:	ldr	r0, [pc, #24]	; 12f90 <_start@@Base+0x80>
   12f74:	ldr	r3, [pc, #24]	; 12f94 <_start@@Base+0x84>
   12f78:	cmp	r3, r0
   12f7c:	bxeq	lr
   12f80:	ldr	r3, [pc, #16]	; 12f98 <_start@@Base+0x88>
   12f84:	cmp	r3, #0
   12f88:	bxeq	lr
   12f8c:	bx	r3
   12f90:	andeq	fp, r3, r0, lsl #1
   12f94:	andeq	fp, r3, r0, lsl #1
   12f98:	andeq	r0, r0, r0
   12f9c:	ldr	r0, [pc, #36]	; 12fc8 <_start@@Base+0xb8>
   12fa0:	ldr	r1, [pc, #36]	; 12fcc <_start@@Base+0xbc>
   12fa4:	sub	r1, r1, r0
   12fa8:	asr	r1, r1, #2
   12fac:	add	r1, r1, r1, lsr #31
   12fb0:	asrs	r1, r1, #1
   12fb4:	bxeq	lr
   12fb8:	ldr	r3, [pc, #16]	; 12fd0 <_start@@Base+0xc0>
   12fbc:	cmp	r3, #0
   12fc0:	bxeq	lr
   12fc4:	bx	r3
   12fc8:	andeq	fp, r3, r0, lsl #1
   12fcc:	andeq	fp, r3, r0, lsl #1
   12fd0:	andeq	r0, r0, r0
   12fd4:	push	{r4, lr}
   12fd8:	ldr	r4, [pc, #24]	; 12ff8 <_start@@Base+0xe8>
   12fdc:	ldrb	r3, [r4]
   12fe0:	cmp	r3, #0
   12fe4:	popne	{r4, pc}
   12fe8:	bl	12f70 <_start@@Base+0x60>
   12fec:	mov	r3, #1
   12ff0:	strb	r3, [r4]
   12ff4:	pop	{r4, pc}
   12ff8:	andeq	fp, r3, r0, lsl #1
   12ffc:	b	12f9c <_start@@Base+0x8c>

00013000 <verify_empty_monster@@Base>:
   13000:	push	{fp, lr}
   13004:	mov	fp, sp
   13008:	cmp	r0, #0
   1300c:	beq	13064 <verify_empty_monster@@Base+0x64>
   13010:	ldr	r1, [r0, #4]
   13014:	movw	r2, #20301	; 0x4f4d
   13018:	movt	r2, #21326	; 0x534e
   1301c:	cmp	r1, r2
   13020:	bne	13064 <verify_empty_monster@@Base+0x64>
   13024:	ldr	r1, [r0]
   13028:	ldr	r2, [r0, r1]!
   1302c:	mov	r1, r0
   13030:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13034:	cmp	r2, #9
   13038:	bls	13070 <verify_empty_monster@@Base+0x70>
   1303c:	ldrh	r2, [r1, #8]
   13040:	cmp	r2, #0
   13044:	beq	1307c <verify_empty_monster@@Base+0x7c>
   13048:	add	r0, r0, r2
   1304c:	ldrh	r0, [r0]
   13050:	cmp	r0, #100	; 0x64
   13054:	bne	130a0 <verify_empty_monster@@Base+0xa0>
   13058:	ldr	r0, [pc, #80]	; 130b0 <verify_empty_monster@@Base+0xb0>
   1305c:	add	r0, pc, r0
   13060:	b	13094 <verify_empty_monster@@Base+0x94>
   13064:	ldr	r0, [pc, #76]	; 130b8 <verify_empty_monster@@Base+0xb8>
   13068:	add	r0, pc, r0
   1306c:	b	13094 <verify_empty_monster@@Base+0x94>
   13070:	mov	r0, #0
   13074:	cmp	r2, #6
   13078:	popcc	{fp, pc}
   1307c:	ldrh	r0, [r1, #4]
   13080:	cmp	r0, #0
   13084:	moveq	r0, #0
   13088:	popeq	{fp, pc}
   1308c:	ldr	r0, [pc, #32]	; 130b4 <verify_empty_monster@@Base+0xb4>
   13090:	add	r0, pc, r0
   13094:	bl	12e68 <puts@plt>
   13098:	mvn	r0, #0
   1309c:	pop	{fp, pc}
   130a0:	ldr	r0, [pc, #4]	; 130ac <verify_empty_monster@@Base+0xac>
   130a4:	add	r0, pc, r0
   130a8:	b	13094 <verify_empty_monster@@Base+0x94>
   130ac:	andeq	r4, r1, r4, asr #7
   130b0:	andeq	r3, r1, ip, lsl sp
   130b4:	andeq	r3, r1, r8, asr #30
   130b8:	strdeq	r3, [r1], -r0

000130bc <test_enums@@Base>:
   130bc:	mov	r0, #0
   130c0:	bx	lr
   130c4:	nop	{0}

000130c8 <test_type_aliases@@Base>:
   130c8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   130cc:	add	fp, sp, #24
   130d0:	sub	sp, sp, #16
   130d4:	mov	r4, r0
   130d8:	bl	1e4f0 <flatcc_builder_reset@@Base>
   130dc:	mvn	r0, #0
   130e0:	mov	r1, #1
   130e4:	mov	r2, #0
   130e8:	mov	r3, #1
   130ec:	mov	r8, #0
   130f0:	str	r1, [sp]
   130f4:	str	r0, [sp, #4]
   130f8:	mov	r0, r4
   130fc:	mov	r1, #0
   13100:	bl	212bc <flatcc_builder_create_vector@@Base>
   13104:	mov	r6, r0
   13108:	mvn	r0, #-536870912	; 0xe0000000
   1310c:	mov	r1, #8
   13110:	mov	r2, #0
   13114:	mov	r3, #8
   13118:	str	r1, [sp]
   1311c:	str	r0, [sp, #4]
   13120:	mov	r0, r4
   13124:	mov	r1, #0
   13128:	bl	212bc <flatcc_builder_create_vector@@Base>
   1312c:	ldr	r1, [pc, #1200]	; 135e4 <test_type_aliases@@Base+0x51c>
   13130:	mov	r5, r0
   13134:	mov	r0, r4
   13138:	mov	r2, #0
   1313c:	mov	r3, #0
   13140:	add	r1, pc, r1
   13144:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   13148:	cmp	r0, #0
   1314c:	bne	13170 <test_type_aliases@@Base+0xa8>
   13150:	mov	r0, r4
   13154:	mov	r1, #12
   13158:	bl	206c8 <flatcc_builder_start_table@@Base>
   1315c:	cmp	r0, #0
   13160:	beq	132dc <test_type_aliases@@Base+0x214>
   13164:	mov	r0, r4
   13168:	mov	r1, r8
   1316c:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   13170:	add	r1, sp, #12
   13174:	mov	r0, r4
   13178:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   1317c:	ldr	r1, [sp, #12]
   13180:	ldr	r2, [pc, #1124]	; 135ec <test_type_aliases@@Base+0x524>
   13184:	ldr	r3, [pc, #1124]	; 135f0 <test_type_aliases@@Base+0x528>
   13188:	mov	r4, r0
   1318c:	add	r2, pc, r2
   13190:	add	r3, pc, r3
   13194:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13198:	cmp	r0, #0
   1319c:	beq	131e0 <test_type_aliases@@Base+0x118>
   131a0:	mov	r5, r0
   131a4:	ldr	r0, [pc, #1096]	; 135f4 <test_type_aliases@@Base+0x52c>
   131a8:	mov	r1, r4
   131ac:	ldr	r0, [pc, r0]
   131b0:	ldr	r2, [sp, #12]
   131b4:	ldr	r3, [r0]
   131b8:	ldr	r0, [pc, #1080]	; 135f8 <test_type_aliases@@Base+0x530>
   131bc:	add	r0, pc, r0
   131c0:	bl	1361c <test_type_aliases@@Base+0x554>
   131c4:	mov	r0, r5
   131c8:	bl	234bc <flatcc_verify_error_string@@Base>
   131cc:	mov	r1, r0
   131d0:	ldr	r0, [pc, #1060]	; 135fc <test_type_aliases@@Base+0x534>
   131d4:	add	r0, pc, r0
   131d8:	bl	12e14 <printf@plt>
   131dc:	b	132c8 <test_type_aliases@@Base+0x200>
   131e0:	cmp	r4, #0
   131e4:	beq	13598 <test_type_aliases@@Base+0x4d0>
   131e8:	ldr	r0, [r4, #4]
   131ec:	movw	r1, #20301	; 0x4f4d
   131f0:	movt	r1, #21326	; 0x534e
   131f4:	cmp	r0, r1
   131f8:	bne	13598 <test_type_aliases@@Base+0x4d0>
   131fc:	ldr	r1, [r4]
   13200:	mov	r6, r4
   13204:	ldr	r2, [r6, r1]!
   13208:	mov	r1, r6
   1320c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13210:	cmp	r2, #5
   13214:	bls	132b8 <test_type_aliases@@Base+0x1f0>
   13218:	ldrh	r3, [r1, #4]
   1321c:	cmp	r3, #0
   13220:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13224:	cmp	r2, #10
   13228:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   1322c:	ldrb	r3, [r6, r3]
   13230:	cmp	r3, #128	; 0x80
   13234:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   13238:	ldrh	r3, [r1, #8]
   1323c:	cmp	r3, #0
   13240:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13244:	cmp	r2, #14
   13248:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   1324c:	add	r3, r6, r3
   13250:	ldrh	r3, [r3]
   13254:	cmp	r3, #32768	; 0x8000
   13258:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1325c:	ldrh	r3, [r1, #12]
   13260:	cmp	r3, #0
   13264:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13268:	cmp	r2, #18
   1326c:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13270:	ldr	r3, [r6, r3]
   13274:	cmp	r3, #-2147483648	; 0x80000000
   13278:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1327c:	ldrh	r3, [r1, #16]
   13280:	cmp	r3, #0
   13284:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13288:	mov	r0, r6
   1328c:	ldr	r3, [r0, r3]!
   13290:	ldr	r0, [r0, #4]
   13294:	eor	r0, r0, #-2147483648	; 0x80000000
   13298:	orrs	r0, r3, r0
   1329c:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   132a0:	ldrh	r3, [r1, #6]
   132a4:	cmp	r3, #0
   132a8:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   132ac:	ldrb	r0, [r6, r3]
   132b0:	cmp	r0, #255	; 0xff
   132b4:	beq	134cc <test_type_aliases@@Base+0x404>
   132b8:	ldr	r0, [pc, #832]	; 13600 <test_type_aliases@@Base+0x538>
   132bc:	add	r0, pc, r0
   132c0:	bl	12e68 <puts@plt>
   132c4:	mvn	r5, #0
   132c8:	mov	r0, r4
   132cc:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   132d0:	mov	r0, r5
   132d4:	sub	sp, fp, #24
   132d8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   132dc:	mov	r0, r4
   132e0:	mov	r1, #6
   132e4:	mov	r2, #8
   132e8:	mov	r3, #8
   132ec:	bl	21b6c <flatcc_builder_table_add@@Base>
   132f0:	cmp	r0, #0
   132f4:	beq	13164 <test_type_aliases@@Base+0x9c>
   132f8:	mov	r9, #-2147483648	; 0x80000000
   132fc:	mov	r8, #0
   13300:	mov	r1, #7
   13304:	mov	r2, #8
   13308:	mov	r3, #8
   1330c:	strd	r8, [r0]
   13310:	mov	r0, r4
   13314:	bl	21b6c <flatcc_builder_table_add@@Base>
   13318:	cmp	r0, #0
   1331c:	beq	13164 <test_type_aliases@@Base+0x9c>
   13320:	mvn	r1, #0
   13324:	mov	r2, #8
   13328:	mov	r3, #8
   1332c:	str	r1, [r0]
   13330:	str	r1, [r0, #4]
   13334:	mov	r0, r4
   13338:	mov	r1, #9
   1333c:	bl	21b6c <flatcc_builder_table_add@@Base>
   13340:	cmp	r0, #0
   13344:	beq	13164 <test_type_aliases@@Base+0x9c>
   13348:	movw	r1, #26214	; 0x6666
   1334c:	movw	r2, #26214	; 0x6666
   13350:	mov	r3, #4
   13354:	movt	r2, #26214	; 0x6666
   13358:	movt	r1, #16386	; 0x4002
   1335c:	str	r2, [r0]
   13360:	str	r1, [r0, #4]
   13364:	mov	r0, r4
   13368:	mov	r1, #4
   1336c:	mov	r2, #4
   13370:	bl	21b6c <flatcc_builder_table_add@@Base>
   13374:	cmp	r0, #0
   13378:	beq	13164 <test_type_aliases@@Base+0x9c>
   1337c:	mov	r1, #-2147483648	; 0x80000000
   13380:	mov	r2, #4
   13384:	mov	r3, #4
   13388:	str	r1, [r0]
   1338c:	mov	r0, r4
   13390:	mov	r1, #5
   13394:	bl	21b6c <flatcc_builder_table_add@@Base>
   13398:	cmp	r0, #0
   1339c:	beq	13164 <test_type_aliases@@Base+0x9c>
   133a0:	mvn	r1, #0
   133a4:	mov	r2, #4
   133a8:	mov	r3, #4
   133ac:	str	r1, [r0]
   133b0:	mov	r0, r4
   133b4:	mov	r1, #8
   133b8:	bl	21b6c <flatcc_builder_table_add@@Base>
   133bc:	cmp	r0, #0
   133c0:	beq	13164 <test_type_aliases@@Base+0x9c>
   133c4:	movw	r1, #13107	; 0x3333
   133c8:	cmp	r6, #0
   133cc:	movt	r1, #16403	; 0x4013
   133d0:	str	r1, [r0]
   133d4:	beq	13164 <test_type_aliases@@Base+0x9c>
   133d8:	mov	r0, r4
   133dc:	mov	r1, #10
   133e0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   133e4:	cmp	r0, #0
   133e8:	strne	r6, [r0]
   133ec:	cmpne	r5, #0
   133f0:	beq	13164 <test_type_aliases@@Base+0x9c>
   133f4:	mov	r0, r4
   133f8:	mov	r1, #11
   133fc:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   13400:	cmp	r0, #0
   13404:	beq	13164 <test_type_aliases@@Base+0x9c>
   13408:	str	r5, [r0]
   1340c:	mov	r0, r4
   13410:	mov	r1, #2
   13414:	mov	r2, #2
   13418:	mov	r3, #2
   1341c:	bl	21b6c <flatcc_builder_table_add@@Base>
   13420:	cmp	r0, #0
   13424:	beq	13164 <test_type_aliases@@Base+0x9c>
   13428:	mov	r1, #32768	; 0x8000
   1342c:	mov	r2, #2
   13430:	mov	r3, #2
   13434:	strh	r1, [r0]
   13438:	mov	r0, r4
   1343c:	mov	r1, #3
   13440:	bl	21b6c <flatcc_builder_table_add@@Base>
   13444:	cmp	r0, #0
   13448:	beq	13164 <test_type_aliases@@Base+0x9c>
   1344c:	movw	r1, #65535	; 0xffff
   13450:	mov	r2, #1
   13454:	mov	r3, #1
   13458:	mov	r8, #0
   1345c:	strh	r1, [r0]
   13460:	mov	r0, r4
   13464:	mov	r1, #0
   13468:	bl	21b6c <flatcc_builder_table_add@@Base>
   1346c:	cmp	r0, #0
   13470:	beq	13164 <test_type_aliases@@Base+0x9c>
   13474:	mov	r1, #128	; 0x80
   13478:	mov	r2, #1
   1347c:	mov	r3, #1
   13480:	strb	r1, [r0]
   13484:	mov	r0, r4
   13488:	mov	r1, #1
   1348c:	bl	21b6c <flatcc_builder_table_add@@Base>
   13490:	cmp	r0, #0
   13494:	beq	13164 <test_type_aliases@@Base+0x9c>
   13498:	mov	r1, #255	; 0xff
   1349c:	mov	r2, #0
   134a0:	strb	r1, [r0]
   134a4:	mov	r0, r4
   134a8:	ldr	r1, [pc, #312]	; 135e8 <test_type_aliases@@Base+0x520>
   134ac:	add	r1, pc, r1
   134b0:	bl	2105c <flatcc_builder_check_required@@Base>
   134b4:	cmp	r0, #0
   134b8:	beq	135b8 <test_type_aliases@@Base+0x4f0>
   134bc:	mov	r0, r4
   134c0:	bl	210f8 <flatcc_builder_end_table@@Base>
   134c4:	mov	r8, r0
   134c8:	b	13164 <test_type_aliases@@Base+0x9c>
   134cc:	ldrh	r3, [r1, #10]
   134d0:	cmp	r3, #0
   134d4:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   134d8:	add	r0, r6, r3
   134dc:	movw	r3, #65535	; 0xffff
   134e0:	ldrh	r0, [r0]
   134e4:	cmp	r0, r3
   134e8:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   134ec:	ldrh	r3, [r1, #14]
   134f0:	cmp	r3, #0
   134f4:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   134f8:	cmp	r2, #20
   134fc:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13500:	ldr	r0, [r6, r3]
   13504:	cmn	r0, #1
   13508:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1350c:	ldrh	r3, [r1, #18]
   13510:	cmp	r3, #0
   13514:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13518:	cmp	r2, #22
   1351c:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13520:	mov	r0, r6
   13524:	mvn	r5, #0
   13528:	ldr	r3, [r0, r3]!
   1352c:	ldr	r0, [r0, #4]
   13530:	eor	r3, r3, r5
   13534:	eor	r0, r0, r5
   13538:	orrs	r0, r3, r0
   1353c:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   13540:	ldrh	r3, [r1, #20]
   13544:	cmp	r3, #0
   13548:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   1354c:	cmp	r2, #24
   13550:	bcc	132b8 <test_type_aliases@@Base+0x1f0>
   13554:	add	r0, r6, r3
   13558:	vldr	s2, [pc, #128]	; 135e0 <test_type_aliases@@Base+0x518>
   1355c:	vldr	s0, [r0]
   13560:	vcmp.f32	s0, s2
   13564:	vmrs	APSR_nzcv, fpscr
   13568:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   1356c:	ldrh	r1, [r1, #22]
   13570:	cmp	r1, #0
   13574:	beq	132b8 <test_type_aliases@@Base+0x1f0>
   13578:	add	r0, r6, r1
   1357c:	vldr	d16, [pc, #84]	; 135d8 <test_type_aliases@@Base+0x510>
   13580:	vldr	d17, [r0]
   13584:	vcmp.f64	d17, d16
   13588:	vmrs	APSR_nzcv, fpscr
   1358c:	bne	132b8 <test_type_aliases@@Base+0x1f0>
   13590:	mov	r5, #0
   13594:	b	132c8 <test_type_aliases@@Base+0x200>
   13598:	ldr	r0, [pc, #112]	; 13610 <test_type_aliases@@Base+0x548>
   1359c:	ldr	r1, [pc, #112]	; 13614 <test_type_aliases@@Base+0x54c>
   135a0:	ldr	r3, [pc, #112]	; 13618 <test_type_aliases@@Base+0x550>
   135a4:	movw	r2, #749	; 0x2ed
   135a8:	add	r0, pc, r0
   135ac:	add	r1, pc, r1
   135b0:	add	r3, pc, r3
   135b4:	bl	12f04 <__assert_fail@plt>
   135b8:	ldr	r0, [pc, #68]	; 13604 <test_type_aliases@@Base+0x53c>
   135bc:	ldr	r1, [pc, #68]	; 13608 <test_type_aliases@@Base+0x540>
   135c0:	ldr	r3, [pc, #68]	; 1360c <test_type_aliases@@Base+0x544>
   135c4:	mov	r2, #237	; 0xed
   135c8:	add	r0, pc, r0
   135cc:	add	r1, pc, r1
   135d0:	add	r3, pc, r3
   135d4:	bl	12f04 <__assert_fail@plt>
   135d8:	strbtvs	r6, [r6], -r6, ror #12
   135dc:	andmi	r6, r2, r6, ror #12
   135e0:	andsmi	r3, r3, r3, lsr r3
   135e4:	andeq	r1, r1, ip, ror #24
   135e8:	andeq	r3, r1, lr, lsr #17
   135ec:	andeq	r1, r1, r0, lsr #24
   135f0:	andeq	sl, r0, ip, lsl r2
   135f4:			; <UNDEFINED> instruction: 0x00027eb4
   135f8:	strdeq	r1, [r1], -r5
   135fc:	strdeq	r1, [r1], -r0
   13600:	ldrdeq	r3, [r1], -ip
   13604:	andeq	r2, r1, r9, lsr #12
   13608:	ldrdeq	r2, [r1], -r3
   1360c:	andeq	r2, r1, r9, asr #14
   13610:	andeq	r2, r1, pc, lsl r5
   13614:	andeq	r2, r1, r1, asr #10
   13618:	ldrdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   1361c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13620:	add	fp, sp, #28
   13624:	sub	sp, sp, #20
   13628:	mov	r4, r3
   1362c:	mov	r5, r2
   13630:	mov	r6, r1
   13634:	cmp	r0, #0
   13638:	beq	13650 <test_type_aliases@@Base+0x588>
   1363c:	ldr	r1, [pc, #264]	; 1374c <test_type_aliases@@Base+0x684>
   13640:	mov	r2, r0
   13644:	mov	r0, r4
   13648:	add	r1, pc, r1
   1364c:	bl	12ea4 <fprintf@plt>
   13650:	cmp	r5, #0
   13654:	beq	13730 <test_type_aliases@@Base+0x668>
   13658:	ldr	sl, [pc, #240]	; 13750 <test_type_aliases@@Base+0x688>
   1365c:	add	r7, sp, #3
   13660:	mov	r8, #0
   13664:	add	sl, pc, sl
   13668:	ands	r9, r8, #15
   1366c:	beq	13688 <test_type_aliases@@Base+0x5c0>
   13670:	tst	r8, #7
   13674:	bne	136b8 <test_type_aliases@@Base+0x5f0>
   13678:	mov	r0, #32
   1367c:	mov	r1, r4
   13680:	bl	12ee0 <fputc@plt>
   13684:	b	136b8 <test_type_aliases@@Base+0x5f0>
   13688:	cmp	r8, #0
   1368c:	beq	136a4 <test_type_aliases@@Base+0x5dc>
   13690:	ldr	r1, [pc, #188]	; 13754 <test_type_aliases@@Base+0x68c>
   13694:	mov	r0, r4
   13698:	mov	r2, r7
   1369c:	add	r1, pc, r1
   136a0:	bl	12ea4 <fprintf@plt>
   136a4:	ldr	r1, [pc, #172]	; 13758 <test_type_aliases@@Base+0x690>
   136a8:	mov	r0, r4
   136ac:	mov	r2, r8
   136b0:	add	r1, pc, r1
   136b4:	bl	12ea4 <fprintf@plt>
   136b8:	ldrb	r2, [r6, r8]
   136bc:	mov	r0, r4
   136c0:	mov	r1, sl
   136c4:	bl	12ea4 <fprintf@plt>
   136c8:	ldrb	r0, [r6, r8]
   136cc:	add	r8, r8, #1
   136d0:	sub	r1, r0, #32
   136d4:	uxtb	r1, r1
   136d8:	cmp	r1, #94	; 0x5e
   136dc:	mov	r1, #0
   136e0:	movwhi	r0, #46	; 0x2e
   136e4:	cmp	r5, r8
   136e8:	strb	r0, [r7, r9]
   136ec:	add	r0, r7, r9
   136f0:	strb	r1, [r0, #1]
   136f4:	bne	13668 <test_type_aliases@@Base+0x5a0>
   136f8:	tst	r5, #15
   136fc:	beq	13730 <test_type_aliases@@Base+0x668>
   13700:	add	r6, r5, #1
   13704:	ldr	r5, [pc, #80]	; 1375c <test_type_aliases@@Base+0x694>
   13708:	add	r5, pc, r5
   1370c:	mov	r0, r5
   13710:	mov	r1, #3
   13714:	mov	r2, #1
   13718:	mov	r3, r4
   1371c:	bl	12e50 <fwrite@plt>
   13720:	add	r0, r6, #1
   13724:	tst	r6, #15
   13728:	mov	r6, r0
   1372c:	bne	1370c <test_type_aliases@@Base+0x644>
   13730:	ldr	r1, [pc, #40]	; 13760 <test_type_aliases@@Base+0x698>
   13734:	add	r2, sp, #3
   13738:	mov	r0, r4
   1373c:	add	r1, pc, r1
   13740:	bl	12ea4 <fprintf@plt>
   13744:	sub	sp, fp, #28
   13748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1374c:	andeq	r2, r1, sl, lsr #14
   13750:	andeq	r2, r1, r1, lsr #14
   13754:	ldrdeq	r2, [r1], -fp
   13758:	andeq	r2, r1, sp, asr #13
   1375c:	andeq	r2, r1, r3, lsl #13
   13760:	andeq	r2, r1, fp, lsr r6

00013764 <test_empty_monster@@Base>:
   13764:	push	{r4, r5, fp, lr}
   13768:	add	fp, sp, #8
   1376c:	sub	sp, sp, #8
   13770:	mov	r4, r0
   13774:	bl	1e4f0 <flatcc_builder_reset@@Base>
   13778:	ldr	r1, [pc, #504]	; 13978 <test_empty_monster@@Base+0x214>
   1377c:	mov	r0, r4
   13780:	mov	r2, #0
   13784:	mov	r3, #0
   13788:	add	r1, pc, r1
   1378c:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   13790:	mov	r0, r4
   13794:	mov	r1, #36	; 0x24
   13798:	bl	206c8 <flatcc_builder_start_table@@Base>
   1379c:	ldr	r1, [pc, #472]	; 1397c <test_empty_monster@@Base+0x218>
   137a0:	mov	r0, r4
   137a4:	add	r1, pc, r1
   137a8:	bl	22950 <flatcc_builder_create_string_str@@Base>
   137ac:	cmp	r0, #0
   137b0:	beq	137cc <test_empty_monster@@Base+0x68>
   137b4:	mov	r5, r0
   137b8:	mov	r0, r4
   137bc:	mov	r1, #3
   137c0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   137c4:	cmp	r0, #0
   137c8:	strne	r5, [r0]
   137cc:	ldr	r1, [pc, #428]	; 13980 <test_empty_monster@@Base+0x21c>
   137d0:	mov	r0, r4
   137d4:	mov	r2, #1
   137d8:	add	r1, pc, r1
   137dc:	bl	2105c <flatcc_builder_check_required@@Base>
   137e0:	cmp	r0, #0
   137e4:	beq	13958 <test_empty_monster@@Base+0x1f4>
   137e8:	mov	r0, r4
   137ec:	bl	210f8 <flatcc_builder_end_table@@Base>
   137f0:	mov	r1, r0
   137f4:	mov	r0, r4
   137f8:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   137fc:	add	r1, sp, #4
   13800:	mov	r0, r4
   13804:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   13808:	mov	r4, r0
   1380c:	ldr	r0, [pc, #368]	; 13984 <test_empty_monster@@Base+0x220>
   13810:	mov	r1, r4
   13814:	ldr	r0, [pc, r0]
   13818:	ldr	r2, [sp, #4]
   1381c:	ldr	r3, [r0]
   13820:	ldr	r0, [pc, #352]	; 13988 <test_empty_monster@@Base+0x224>
   13824:	add	r0, pc, r0
   13828:	bl	1361c <test_type_aliases@@Base+0x554>
   1382c:	cmp	r4, #0
   13830:	beq	1388c <test_empty_monster@@Base+0x128>
   13834:	ldr	r0, [r4, #4]
   13838:	movw	r1, #20301	; 0x4f4d
   1383c:	movt	r1, #21326	; 0x534e
   13840:	cmp	r0, r1
   13844:	bne	1388c <test_empty_monster@@Base+0x128>
   13848:	ldr	r0, [r4]
   1384c:	mov	r1, r4
   13850:	ldr	r2, [r1, r0]!
   13854:	mov	r0, r1
   13858:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   1385c:	cmp	r2, #9
   13860:	bls	138b0 <test_empty_monster@@Base+0x14c>
   13864:	ldrh	r2, [r0, #8]
   13868:	cmp	r2, #0
   1386c:	beq	138b8 <test_empty_monster@@Base+0x154>
   13870:	add	r0, r1, r2
   13874:	ldrh	r0, [r0]
   13878:	cmp	r0, #100	; 0x64
   1387c:	bne	13910 <test_empty_monster@@Base+0x1ac>
   13880:	ldr	r0, [pc, #268]	; 13994 <test_empty_monster@@Base+0x230>
   13884:	add	r0, pc, r0
   13888:	b	13894 <test_empty_monster@@Base+0x130>
   1388c:	ldr	r0, [pc, #252]	; 13990 <test_empty_monster@@Base+0x22c>
   13890:	add	r0, pc, r0
   13894:	bl	12e68 <puts@plt>
   13898:	mvn	r5, #0
   1389c:	mov	r0, r4
   138a0:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   138a4:	mov	r0, r5
   138a8:	sub	sp, fp, #8
   138ac:	pop	{r4, r5, fp, pc}
   138b0:	cmp	r2, #6
   138b4:	bcc	138d0 <test_empty_monster@@Base+0x16c>
   138b8:	ldrh	r0, [r0, #4]
   138bc:	cmp	r0, #0
   138c0:	beq	138d0 <test_empty_monster@@Base+0x16c>
   138c4:	ldr	r0, [pc, #204]	; 13998 <test_empty_monster@@Base+0x234>
   138c8:	add	r0, pc, r0
   138cc:	b	13894 <test_empty_monster@@Base+0x130>
   138d0:	ldr	r1, [sp, #4]
   138d4:	ldr	r2, [pc, #192]	; 1399c <test_empty_monster@@Base+0x238>
   138d8:	ldr	r3, [pc, #192]	; 139a0 <test_empty_monster@@Base+0x23c>
   138dc:	mov	r0, r4
   138e0:	add	r2, pc, r2
   138e4:	add	r3, pc, r3
   138e8:	bl	24128 <flatcc_verify_table_as_root@@Base>
   138ec:	cmp	r0, #0
   138f0:	beq	1391c <test_empty_monster@@Base+0x1b8>
   138f4:	bl	234bc <flatcc_verify_error_string@@Base>
   138f8:	mov	r1, r0
   138fc:	ldr	r0, [pc, #160]	; 139a4 <test_empty_monster@@Base+0x240>
   13900:	add	r0, pc, r0
   13904:	bl	12e14 <printf@plt>
   13908:	mvn	r5, #0
   1390c:	b	138a4 <test_empty_monster@@Base+0x140>
   13910:	ldr	r0, [pc, #116]	; 1398c <test_empty_monster@@Base+0x228>
   13914:	add	r0, pc, r0
   13918:	b	13894 <test_empty_monster@@Base+0x130>
   1391c:	ldr	r0, [sp, #4]
   13920:	ldr	r2, [pc, #128]	; 139a8 <test_empty_monster@@Base+0x244>
   13924:	ldr	r3, [pc, #128]	; 139ac <test_empty_monster@@Base+0x248>
   13928:	sub	r1, r0, #1
   1392c:	add	r2, pc, r2
   13930:	add	r3, pc, r3
   13934:	mov	r0, r4
   13938:	bl	24128 <flatcc_verify_table_as_root@@Base>
   1393c:	mov	r5, #0
   13940:	cmp	r0, #0
   13944:	bne	1389c <test_empty_monster@@Base+0x138>
   13948:	ldr	r0, [pc, #96]	; 139b0 <test_empty_monster@@Base+0x24c>
   1394c:	add	r0, pc, r0
   13950:	bl	12e68 <puts@plt>
   13954:	b	13908 <test_empty_monster@@Base+0x1a4>
   13958:	ldr	r0, [pc, #84]	; 139b4 <test_empty_monster@@Base+0x250>
   1395c:	ldr	r1, [pc, #84]	; 139b8 <test_empty_monster@@Base+0x254>
   13960:	ldr	r3, [pc, #84]	; 139bc <test_empty_monster@@Base+0x258>
   13964:	mov	r2, #235	; 0xeb
   13968:	add	r0, pc, r0
   1396c:	add	r1, pc, r1
   13970:	add	r3, pc, r3
   13974:	bl	12f04 <__assert_fail@plt>
   13978:	andeq	r1, r1, r4, lsr #12
   1397c:	andeq	r1, r1, ip, asr #12
   13980:	andeq	r3, r1, r4, lsl #11
   13984:	andeq	r7, r2, ip, asr #16
   13988:	ldrdeq	r1, [r1], -r6
   1398c:	andeq	r3, r1, r4, asr fp
   13990:	andeq	r3, r1, r8, asr #13
   13994:	strdeq	r3, [r1], -r4
   13998:	andeq	r3, r1, r0, lsl r7
   1399c:	andeq	r1, r1, ip, asr #9
   139a0:	andeq	r9, r0, r4, asr #24
   139a4:	andeq	r1, r1, lr, lsl #10
   139a8:	andeq	r1, r1, r0, lsl #9
   139ac:	strdeq	r9, [r0], -r8
   139b0:	andeq	r3, r1, ip, ror r4
   139b4:	andeq	r2, r1, r0, ror r4
   139b8:	andeq	r2, r1, r3, lsr r3
   139bc:	andeq	r2, r1, sl, lsl #10

000139c0 <test_typed_empty_monster@@Base>:
   139c0:	push	{r4, r5, r6, sl, fp, lr}
   139c4:	add	fp, sp, #16
   139c8:	sub	sp, sp, #8
   139cc:	mov	r4, r0
   139d0:	mov	r0, #0
   139d4:	str	r0, [sp]
   139d8:	mov	r0, r4
   139dc:	bl	1e4f0 <flatcc_builder_reset@@Base>
   139e0:	ldr	r1, [pc, #584]	; 13c30 <test_typed_empty_monster@@Base+0x270>
   139e4:	mov	r0, r4
   139e8:	mov	r2, #0
   139ec:	mov	r3, #0
   139f0:	add	r1, pc, r1
   139f4:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   139f8:	mov	r0, r4
   139fc:	mov	r1, #36	; 0x24
   13a00:	bl	206c8 <flatcc_builder_start_table@@Base>
   13a04:	ldr	r1, [pc, #552]	; 13c34 <test_typed_empty_monster@@Base+0x274>
   13a08:	mov	r0, r4
   13a0c:	add	r1, pc, r1
   13a10:	bl	22950 <flatcc_builder_create_string_str@@Base>
   13a14:	cmp	r0, #0
   13a18:	beq	13a34 <test_typed_empty_monster@@Base+0x74>
   13a1c:	mov	r5, r0
   13a20:	mov	r0, r4
   13a24:	mov	r1, #3
   13a28:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   13a2c:	cmp	r0, #0
   13a30:	strne	r5, [r0]
   13a34:	ldr	r1, [pc, #508]	; 13c38 <test_typed_empty_monster@@Base+0x278>
   13a38:	mov	r0, r4
   13a3c:	mov	r2, #1
   13a40:	add	r1, pc, r1
   13a44:	bl	2105c <flatcc_builder_check_required@@Base>
   13a48:	cmp	r0, #0
   13a4c:	beq	13c10 <test_typed_empty_monster@@Base+0x250>
   13a50:	mov	r0, r4
   13a54:	bl	210f8 <flatcc_builder_end_table@@Base>
   13a58:	mov	r1, r0
   13a5c:	mov	r0, r4
   13a60:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   13a64:	add	r1, sp, #4
   13a68:	mov	r0, r4
   13a6c:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   13a70:	mov	r4, r0
   13a74:	ldr	r0, [pc, #448]	; 13c3c <test_typed_empty_monster@@Base+0x27c>
   13a78:	mov	r1, r4
   13a7c:	ldr	r0, [pc, r0]
   13a80:	ldr	r2, [sp, #4]
   13a84:	ldr	r3, [r0]
   13a88:	ldr	r0, [pc, #432]	; 13c40 <test_typed_empty_monster@@Base+0x280>
   13a8c:	add	r0, pc, r0
   13a90:	bl	1361c <test_type_aliases@@Base+0x554>
   13a94:	ldr	r1, [r4, #4]
   13a98:	movw	r6, #62593	; 0xf481
   13a9c:	movt	r6, #13070	; 0x330e
   13aa0:	cmp	r1, r6
   13aa4:	bne	13b18 <test_typed_empty_monster@@Base+0x158>
   13aa8:	ldr	r0, [pc, #408]	; 13c48 <test_typed_empty_monster@@Base+0x288>
   13aac:	add	r0, pc, r0
   13ab0:	bl	12e68 <puts@plt>
   13ab4:	ldr	r1, [sp, #4]
   13ab8:	ldr	r2, [pc, #396]	; 13c4c <test_typed_empty_monster@@Base+0x28c>
   13abc:	ldr	r3, [pc, #396]	; 13c50 <test_typed_empty_monster@@Base+0x290>
   13ac0:	mov	r0, r4
   13ac4:	add	r2, pc, r2
   13ac8:	add	r3, pc, r3
   13acc:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13ad0:	cmp	r0, #0
   13ad4:	bne	13afc <test_typed_empty_monster@@Base+0x13c>
   13ad8:	ldr	r1, [sp, #4]
   13adc:	ldr	r2, [pc, #372]	; 13c58 <test_typed_empty_monster@@Base+0x298>
   13ae0:	ldr	r3, [pc, #372]	; 13c5c <test_typed_empty_monster@@Base+0x29c>
   13ae4:	mov	r0, r4
   13ae8:	add	r2, pc, r2
   13aec:	add	r3, pc, r3
   13af0:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13af4:	cmp	r0, #0
   13af8:	beq	13b3c <test_typed_empty_monster@@Base+0x17c>
   13afc:	mov	r5, r0
   13b00:	bl	234bc <flatcc_verify_error_string@@Base>
   13b04:	mov	r1, r0
   13b08:	ldr	r0, [pc, #324]	; 13c54 <test_typed_empty_monster@@Base+0x294>
   13b0c:	add	r0, pc, r0
   13b10:	bl	12e14 <printf@plt>
   13b14:	b	13b28 <test_typed_empty_monster@@Base+0x168>
   13b18:	ldr	r0, [pc, #292]	; 13c44 <test_typed_empty_monster@@Base+0x284>
   13b1c:	add	r0, pc, r0
   13b20:	bl	12e14 <printf@plt>
   13b24:	mvn	r5, #0
   13b28:	mov	r0, r4
   13b2c:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   13b30:	mov	r0, r5
   13b34:	sub	sp, fp, #16
   13b38:	pop	{r4, r5, r6, sl, fp, pc}
   13b3c:	ldr	r1, [sp, #4]
   13b40:	ldr	r3, [pc, #280]	; 13c60 <test_typed_empty_monster@@Base+0x2a0>
   13b44:	mov	r0, r4
   13b48:	mov	r2, r6
   13b4c:	add	r3, pc, r3
   13b50:	bl	2428c <flatcc_verify_table_as_typed_root@@Base>
   13b54:	cmp	r0, #0
   13b58:	beq	13b78 <test_typed_empty_monster@@Base+0x1b8>
   13b5c:	mov	r5, r0
   13b60:	bl	234bc <flatcc_verify_error_string@@Base>
   13b64:	mov	r1, r0
   13b68:	ldr	r0, [pc, #244]	; 13c64 <test_typed_empty_monster@@Base+0x2a4>
   13b6c:	add	r0, pc, r0
   13b70:	bl	12e14 <printf@plt>
   13b74:	b	13b28 <test_typed_empty_monster@@Base+0x168>
   13b78:	ldr	r1, [sp, #4]
   13b7c:	ldr	r3, [pc, #228]	; 13c68 <test_typed_empty_monster@@Base+0x2a8>
   13b80:	mov	r0, r4
   13b84:	mov	r2, r6
   13b88:	add	r3, pc, r3
   13b8c:	bl	2428c <flatcc_verify_table_as_typed_root@@Base>
   13b90:	cmp	r0, #0
   13b94:	beq	13bb4 <test_typed_empty_monster@@Base+0x1f4>
   13b98:	mov	r5, r0
   13b9c:	bl	234bc <flatcc_verify_error_string@@Base>
   13ba0:	mov	r1, r0
   13ba4:	ldr	r0, [pc, #192]	; 13c6c <test_typed_empty_monster@@Base+0x2ac>
   13ba8:	add	r0, pc, r0
   13bac:	bl	12e14 <printf@plt>
   13bb0:	b	13b28 <test_typed_empty_monster@@Base+0x168>
   13bb4:	str	r6, [sp]
   13bb8:	ldr	r1, [sp, #4]
   13bbc:	mov	r2, sp
   13bc0:	mov	r0, r4
   13bc4:	ldr	r3, [pc, #164]	; 13c70 <test_typed_empty_monster@@Base+0x2b0>
   13bc8:	add	r3, pc, r3
   13bcc:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13bd0:	cmp	r0, #0
   13bd4:	bne	13afc <test_typed_empty_monster@@Base+0x13c>
   13bd8:	ldr	r1, [sp, #4]
   13bdc:	ldr	r2, [pc, #144]	; 13c74 <test_typed_empty_monster@@Base+0x2b4>
   13be0:	ldr	r3, [pc, #144]	; 13c78 <test_typed_empty_monster@@Base+0x2b8>
   13be4:	mov	r0, r4
   13be8:	add	r2, pc, r2
   13bec:	add	r3, pc, r3
   13bf0:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13bf4:	mov	r5, #0
   13bf8:	cmp	r0, #0
   13bfc:	bne	13b28 <test_typed_empty_monster@@Base+0x168>
   13c00:	ldr	r0, [pc, #116]	; 13c7c <test_typed_empty_monster@@Base+0x2bc>
   13c04:	add	r0, pc, r0
   13c08:	bl	12e68 <puts@plt>
   13c0c:	b	13b28 <test_typed_empty_monster@@Base+0x168>
   13c10:	ldr	r0, [pc, #104]	; 13c80 <test_typed_empty_monster@@Base+0x2c0>
   13c14:	ldr	r1, [pc, #104]	; 13c84 <test_typed_empty_monster@@Base+0x2c4>
   13c18:	ldr	r3, [pc, #104]	; 13c88 <test_typed_empty_monster@@Base+0x2c8>
   13c1c:	mov	r2, #235	; 0xeb
   13c20:	add	r0, pc, r0
   13c24:	add	r1, pc, r1
   13c28:	add	r3, pc, r3
   13c2c:	bl	12f04 <__assert_fail@plt>
   13c30:	andeq	r1, r1, r6, asr #8
   13c34:	andeq	r1, r1, r4, ror #7
   13c38:	andeq	r3, r1, ip, lsl r3
   13c3c:	andeq	r7, r2, r4, ror #11
   13c40:	andeq	r1, r1, pc, lsr #7
   13c44:	andeq	r1, r1, r9, lsr r3
   13c48:	andeq	r3, r1, ip, lsr #9
   13c4c:	andeq	r1, r1, r2, ror r3
   13c50:	andeq	r9, r0, r0, ror #20
   13c54:	andeq	r1, r1, fp, ror r3
   13c58:	andeq	r1, r1, lr, asr #6
   13c5c:	andeq	r9, r0, ip, lsr sl
   13c60:	ldrdeq	r9, [r0], -ip
   13c64:	andeq	r1, r1, r9, asr #6
   13c68:	andeq	r9, r0, r0, lsr #19
   13c6c:	andeq	r1, r1, r4, asr #6
   13c70:	andeq	r9, r0, r0, ror #18
   13c74:	andeq	r1, r1, r4, asr #3
   13c78:	andeq	r9, r0, ip, lsr r9
   13c7c:	strdeq	r3, [r1], -r4
   13c80:			; <UNDEFINED> instruction: 0x000121b8
   13c84:	andeq	r2, r1, fp, ror r0
   13c88:	andeq	r2, r1, r2, asr r2

00013c8c <verify_table_with_emptystruct@@Base>:
   13c8c:	push	{fp, lr}
   13c90:	mov	fp, sp
   13c94:	cmp	r0, #0
   13c98:	beq	13cec <verify_table_with_emptystruct@@Base+0x60>
   13c9c:	ldr	r1, [r0, #4]
   13ca0:	movw	r2, #20301	; 0x4f4d
   13ca4:	movt	r2, #21326	; 0x534e
   13ca8:	cmp	r1, r2
   13cac:	bne	13cec <verify_table_with_emptystruct@@Base+0x60>
   13cb0:	ldr	r1, [r0]
   13cb4:	ldr	r2, [r0, r1]!
   13cb8:	mov	r1, r0
   13cbc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13cc0:	cmp	r2, #5
   13cc4:	bls	13ce0 <verify_table_with_emptystruct@@Base+0x54>
   13cc8:	ldrh	r1, [r1, #4]
   13ccc:	cmp	r1, #0
   13cd0:	beq	13ce0 <verify_table_with_emptystruct@@Base+0x54>
   13cd4:	adds	r0, r0, r1
   13cd8:	mov	r0, #0
   13cdc:	popne	{fp, pc}
   13ce0:	ldr	r0, [pc, #24]	; 13d00 <verify_table_with_emptystruct@@Base+0x74>
   13ce4:	add	r0, pc, r0
   13ce8:	b	13cf4 <verify_table_with_emptystruct@@Base+0x68>
   13cec:	ldr	r0, [pc, #16]	; 13d04 <verify_table_with_emptystruct@@Base+0x78>
   13cf0:	add	r0, pc, r0
   13cf4:	bl	12e68 <puts@plt>
   13cf8:	mvn	r0, #0
   13cfc:	pop	{fp, pc}
   13d00:	muleq	r1, r4, r1
   13d04:	andeq	r3, r1, r8, asr r1

00013d08 <test_table_with_emptystruct@@Base>:
   13d08:	push	{r4, r5, fp, lr}
   13d0c:	add	fp, sp, #8
   13d10:	sub	sp, sp, #8
   13d14:	mov	r4, r0
   13d18:	bl	1e4f0 <flatcc_builder_reset@@Base>
   13d1c:	ldr	r1, [pc, #340]	; 13e78 <test_table_with_emptystruct@@Base+0x170>
   13d20:	mov	r0, r4
   13d24:	mov	r2, #0
   13d28:	mov	r3, #0
   13d2c:	mov	r5, #0
   13d30:	add	r1, pc, r1
   13d34:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   13d38:	cmp	r0, #0
   13d3c:	bne	13da8 <test_table_with_emptystruct@@Base+0xa0>
   13d40:	mov	r0, r4
   13d44:	mov	r1, #1
   13d48:	bl	206c8 <flatcc_builder_start_table@@Base>
   13d4c:	cmp	r0, #0
   13d50:	bne	13d9c <test_table_with_emptystruct@@Base+0x94>
   13d54:	mov	r0, r4
   13d58:	mov	r1, #0
   13d5c:	mov	r2, #0
   13d60:	mov	r3, #1
   13d64:	mov	r5, #0
   13d68:	bl	21b6c <flatcc_builder_table_add@@Base>
   13d6c:	cmp	r0, #0
   13d70:	beq	13d9c <test_table_with_emptystruct@@Base+0x94>
   13d74:	ldr	r1, [pc, #256]	; 13e7c <test_table_with_emptystruct@@Base+0x174>
   13d78:	mov	r0, r4
   13d7c:	mov	r2, #0
   13d80:	add	r1, pc, r1
   13d84:	bl	2105c <flatcc_builder_check_required@@Base>
   13d88:	cmp	r0, #0
   13d8c:	beq	13e58 <test_table_with_emptystruct@@Base+0x150>
   13d90:	mov	r0, r4
   13d94:	bl	210f8 <flatcc_builder_end_table@@Base>
   13d98:	mov	r5, r0
   13d9c:	mov	r0, r4
   13da0:	mov	r1, r5
   13da4:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   13da8:	add	r1, sp, #4
   13dac:	mov	r0, r4
   13db0:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   13db4:	mov	r4, r0
   13db8:	ldr	r0, [pc, #192]	; 13e80 <test_table_with_emptystruct@@Base+0x178>
   13dbc:	mov	r1, r4
   13dc0:	ldr	r0, [pc, r0]
   13dc4:	ldr	r2, [sp, #4]
   13dc8:	ldr	r3, [r0]
   13dcc:	ldr	r0, [pc, #176]	; 13e84 <test_table_with_emptystruct@@Base+0x17c>
   13dd0:	add	r0, pc, r0
   13dd4:	bl	1361c <test_type_aliases@@Base+0x554>
   13dd8:	cmp	r4, #0
   13ddc:	beq	13e34 <test_table_with_emptystruct@@Base+0x12c>
   13de0:	ldr	r0, [r4, #4]
   13de4:	movw	r1, #20301	; 0x4f4d
   13de8:	movt	r1, #21326	; 0x534e
   13dec:	cmp	r0, r1
   13df0:	bne	13e34 <test_table_with_emptystruct@@Base+0x12c>
   13df4:	ldr	r1, [r4]
   13df8:	mov	r0, r4
   13dfc:	ldr	r2, [r0, r1]!
   13e00:	mov	r1, r0
   13e04:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13e08:	cmp	r2, #5
   13e0c:	bls	13e28 <test_table_with_emptystruct@@Base+0x120>
   13e10:	ldrh	r1, [r1, #4]
   13e14:	cmp	r1, #0
   13e18:	beq	13e28 <test_table_with_emptystruct@@Base+0x120>
   13e1c:	adds	r0, r0, r1
   13e20:	mov	r5, #0
   13e24:	bne	13e44 <test_table_with_emptystruct@@Base+0x13c>
   13e28:	ldr	r0, [pc, #88]	; 13e88 <test_table_with_emptystruct@@Base+0x180>
   13e2c:	add	r0, pc, r0
   13e30:	b	13e3c <test_table_with_emptystruct@@Base+0x134>
   13e34:	ldr	r0, [pc, #92]	; 13e98 <test_table_with_emptystruct@@Base+0x190>
   13e38:	add	r0, pc, r0
   13e3c:	bl	12e68 <puts@plt>
   13e40:	mvn	r5, #0
   13e44:	mov	r0, r4
   13e48:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   13e4c:	mov	r0, r5
   13e50:	sub	sp, fp, #8
   13e54:	pop	{r4, r5, fp, pc}
   13e58:	ldr	r0, [pc, #44]	; 13e8c <test_table_with_emptystruct@@Base+0x184>
   13e5c:	ldr	r1, [pc, #44]	; 13e90 <test_table_with_emptystruct@@Base+0x188>
   13e60:	ldr	r3, [pc, #44]	; 13e94 <test_table_with_emptystruct@@Base+0x18c>
   13e64:	mov	r2, #215	; 0xd7
   13e68:	add	r0, pc, r0
   13e6c:	add	r1, pc, r1
   13e70:	add	r3, pc, r3
   13e74:	bl	12f04 <__assert_fail@plt>
   13e78:	andeq	r1, r1, ip, ror r0
   13e7c:	andeq	r2, r1, r0, ror #31
   13e80:	andeq	r7, r2, r0, lsr #5
   13e84:	andeq	r1, r1, r2, ror #2
   13e88:	andeq	r3, r1, ip, asr #32
   13e8c:	andeq	r2, r1, r3, rrx
   13e90:	andeq	r1, r1, r3, lsr lr
   13e94:	andeq	r2, r1, r8, lsl r1
   13e98:	andeq	r3, r1, r0, lsl r0

00013e9c <test_typed_table_with_emptystruct@@Base>:
   13e9c:	push	{r4, r5, fp, lr}
   13ea0:	add	fp, sp, #8
   13ea4:	sub	sp, sp, #8
   13ea8:	mov	r4, r0
   13eac:	bl	1e4f0 <flatcc_builder_reset@@Base>
   13eb0:	ldr	r1, [pc, #420]	; 1405c <test_typed_table_with_emptystruct@@Base+0x1c0>
   13eb4:	mov	r0, r4
   13eb8:	mov	r2, #0
   13ebc:	mov	r3, #0
   13ec0:	mov	r5, #0
   13ec4:	add	r1, pc, r1
   13ec8:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   13ecc:	cmp	r0, #0
   13ed0:	bne	13f3c <test_typed_table_with_emptystruct@@Base+0xa0>
   13ed4:	mov	r0, r4
   13ed8:	mov	r1, #1
   13edc:	bl	206c8 <flatcc_builder_start_table@@Base>
   13ee0:	cmp	r0, #0
   13ee4:	bne	13f30 <test_typed_table_with_emptystruct@@Base+0x94>
   13ee8:	mov	r0, r4
   13eec:	mov	r1, #0
   13ef0:	mov	r2, #0
   13ef4:	mov	r3, #1
   13ef8:	mov	r5, #0
   13efc:	bl	21b6c <flatcc_builder_table_add@@Base>
   13f00:	cmp	r0, #0
   13f04:	beq	13f30 <test_typed_table_with_emptystruct@@Base+0x94>
   13f08:	ldr	r1, [pc, #336]	; 14060 <test_typed_table_with_emptystruct@@Base+0x1c4>
   13f0c:	mov	r0, r4
   13f10:	mov	r2, #0
   13f14:	add	r1, pc, r1
   13f18:	bl	2105c <flatcc_builder_check_required@@Base>
   13f1c:	cmp	r0, #0
   13f20:	beq	1403c <test_typed_table_with_emptystruct@@Base+0x1a0>
   13f24:	mov	r0, r4
   13f28:	bl	210f8 <flatcc_builder_end_table@@Base>
   13f2c:	mov	r5, r0
   13f30:	mov	r0, r4
   13f34:	mov	r1, r5
   13f38:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   13f3c:	add	r1, sp, #4
   13f40:	mov	r0, r4
   13f44:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   13f48:	mov	r4, r0
   13f4c:	ldr	r0, [pc, #272]	; 14064 <test_typed_table_with_emptystruct@@Base+0x1c8>
   13f50:	mov	r1, r4
   13f54:	ldr	r0, [pc, r0]
   13f58:	ldr	r2, [sp, #4]
   13f5c:	ldr	r3, [r0]
   13f60:	ldr	r0, [pc, #256]	; 14068 <test_typed_table_with_emptystruct@@Base+0x1cc>
   13f64:	add	r0, pc, r0
   13f68:	bl	1361c <test_type_aliases@@Base+0x554>
   13f6c:	ldr	r1, [sp, #4]
   13f70:	ldr	r2, [pc, #244]	; 1406c <test_typed_table_with_emptystruct@@Base+0x1d0>
   13f74:	ldr	r3, [pc, #244]	; 14070 <test_typed_table_with_emptystruct@@Base+0x1d4>
   13f78:	mov	r0, r4
   13f7c:	add	r2, pc, r2
   13f80:	add	r3, pc, r3
   13f84:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13f88:	cmp	r0, #0
   13f8c:	beq	13f9c <test_typed_table_with_emptystruct@@Base+0x100>
   13f90:	ldr	r0, [pc, #220]	; 14074 <test_typed_table_with_emptystruct@@Base+0x1d8>
   13f94:	add	r0, pc, r0
   13f98:	b	13ffc <test_typed_table_with_emptystruct@@Base+0x160>
   13f9c:	ldr	r1, [sp, #4]
   13fa0:	ldr	r2, [pc, #208]	; 14078 <test_typed_table_with_emptystruct@@Base+0x1dc>
   13fa4:	ldr	r3, [pc, #208]	; 1407c <test_typed_table_with_emptystruct@@Base+0x1e0>
   13fa8:	mov	r0, r4
   13fac:	add	r2, pc, r2
   13fb0:	add	r3, pc, r3
   13fb4:	bl	24128 <flatcc_verify_table_as_root@@Base>
   13fb8:	cmp	r0, #0
   13fbc:	beq	13fcc <test_typed_table_with_emptystruct@@Base+0x130>
   13fc0:	ldr	r0, [pc, #184]	; 14080 <test_typed_table_with_emptystruct@@Base+0x1e4>
   13fc4:	add	r0, pc, r0
   13fc8:	b	13ffc <test_typed_table_with_emptystruct@@Base+0x160>
   13fcc:	ldr	r1, [sp, #4]
   13fd0:	ldr	r3, [pc, #172]	; 14084 <test_typed_table_with_emptystruct@@Base+0x1e8>
   13fd4:	movw	r5, #14262	; 0x37b6
   13fd8:	mov	r0, r4
   13fdc:	movt	r5, #45277	; 0xb0dd
   13fe0:	mov	r2, r5
   13fe4:	add	r3, pc, r3
   13fe8:	bl	2428c <flatcc_verify_table_as_typed_root@@Base>
   13fec:	cmp	r0, #0
   13ff0:	beq	1400c <test_typed_table_with_emptystruct@@Base+0x170>
   13ff4:	ldr	r0, [pc, #140]	; 14088 <test_typed_table_with_emptystruct@@Base+0x1ec>
   13ff8:	add	r0, pc, r0
   13ffc:	bl	12e68 <puts@plt>
   14000:	mvn	r0, #0
   14004:	sub	sp, fp, #8
   14008:	pop	{r4, r5, fp, pc}
   1400c:	cmp	r4, #0
   14010:	beq	14030 <test_typed_table_with_emptystruct@@Base+0x194>
   14014:	ldr	r1, [r4, #4]
   14018:	mov	r0, #0
   1401c:	cmp	r1, r5
   14020:	beq	14004 <test_typed_table_with_emptystruct@@Base+0x168>
   14024:	ldr	r0, [pc, #100]	; 14090 <test_typed_table_with_emptystruct@@Base+0x1f4>
   14028:	add	r0, pc, r0
   1402c:	b	13ffc <test_typed_table_with_emptystruct@@Base+0x160>
   14030:	ldr	r0, [pc, #84]	; 1408c <test_typed_table_with_emptystruct@@Base+0x1f0>
   14034:	add	r0, pc, r0
   14038:	b	13ffc <test_typed_table_with_emptystruct@@Base+0x160>
   1403c:	ldr	r0, [pc, #80]	; 14094 <test_typed_table_with_emptystruct@@Base+0x1f8>
   14040:	ldr	r1, [pc, #80]	; 14098 <test_typed_table_with_emptystruct@@Base+0x1fc>
   14044:	ldr	r3, [pc, #80]	; 1409c <test_typed_table_with_emptystruct@@Base+0x200>
   14048:	mov	r2, #215	; 0xd7
   1404c:	add	r0, pc, r0
   14050:	add	r1, pc, r1
   14054:	add	r3, pc, r3
   14058:	bl	12f04 <__assert_fail@plt>
   1405c:	andeq	r1, r1, r6, lsl #1
   14060:	andeq	r2, r1, ip, asr #28
   14064:	andeq	r7, r2, ip, lsl #2
   14068:	andeq	r0, r1, r8, asr #31
   1406c:	andeq	r0, r1, lr, asr #31
   14070:	andeq	r9, r0, r0, ror #30
   14074:	andeq	r2, r1, r4, ror pc
   14078:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   1407c:	andeq	r9, r0, r0, lsr pc
   14080:	andeq	r2, r1, r4, lsr #30
   14084:	strdeq	r9, [r0], -ip
   14088:	andeq	r2, r1, r0, asr #29
   1408c:	andeq	r2, r1, r4, ror #28
   14090:	andeq	r2, r1, fp, asr ip
   14094:	andeq	r1, r1, pc, ror lr
   14098:	andeq	r1, r1, pc, asr #24
   1409c:	andeq	r1, r1, r4, lsr pc

000140a0 <verify_monster@@Base>:
   140a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   140a4:	add	fp, sp, #24
   140a8:	ldr	r1, [r0, #4]
   140ac:	movw	r2, #20301	; 0x4f4d
   140b0:	movt	r2, #21326	; 0x534e
   140b4:	cmp	r1, r2
   140b8:	bne	14114 <verify_monster@@Base+0x74>
   140bc:	ldr	r1, [r0]
   140c0:	adds	r5, r0, r1
   140c4:	beq	1412c <verify_monster@@Base+0x8c>
   140c8:	ldr	r1, [r5]
   140cc:	mov	r0, r5
   140d0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   140d4:	cmp	r1, #10
   140d8:	bcc	14120 <verify_monster@@Base+0x80>
   140dc:	ldrh	r1, [r0, #8]
   140e0:	cmp	r1, #0
   140e4:	beq	14120 <verify_monster@@Base+0x80>
   140e8:	add	r1, r5, r1
   140ec:	ldrh	r1, [r1]
   140f0:	cmp	r1, #80	; 0x50
   140f4:	bne	14120 <verify_monster@@Base+0x80>
   140f8:	ldrh	r0, [r0, #4]
   140fc:	cmp	r0, #0
   14100:	addsne	r4, r5, r0
   14104:	bne	14140 <verify_monster@@Base+0xa0>
   14108:	ldr	r0, [pc, #2940]	; 14c8c <verify_monster@@Base+0xbec>
   1410c:	add	r0, pc, r0
   14110:	b	14134 <verify_monster@@Base+0x94>
   14114:	ldr	r0, [pc, #2916]	; 14c80 <verify_monster@@Base+0xbe0>
   14118:	add	r0, pc, r0
   1411c:	b	14134 <verify_monster@@Base+0x94>
   14120:	ldr	r0, [pc, #2912]	; 14c88 <verify_monster@@Base+0xbe8>
   14124:	add	r0, pc, r0
   14128:	b	14134 <verify_monster@@Base+0x94>
   1412c:	ldr	r0, [pc, #2896]	; 14c84 <verify_monster@@Base+0xbe4>
   14130:	add	r0, pc, r0
   14134:	bl	12e68 <puts@plt>
   14138:	mvn	r0, #0
   1413c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14140:	tst	r4, #15
   14144:	beq	14154 <verify_monster@@Base+0xb4>
   14148:	ldr	r0, [pc, #2880]	; 14c90 <verify_monster@@Base+0xbf0>
   1414c:	add	r0, pc, r0
   14150:	bl	12e68 <puts@plt>
   14154:	vldr	s0, [pc, #992]	; 1453c <verify_monster@@Base+0x49c>
   14158:	vldr	s2, [r4, #8]
   1415c:	vcmp.f32	s2, s0
   14160:	vmrs	APSR_nzcv, fpscr
   14164:	beq	14174 <verify_monster@@Base+0xd4>
   14168:	ldr	r0, [pc, #2852]	; 14c94 <verify_monster@@Base+0xbf4>
   1416c:	add	r0, pc, r0
   14170:	b	14134 <verify_monster@@Base+0x94>
   14174:	vldr	s0, [r4]
   14178:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1417c:	vcmp.f32	s0, s2
   14180:	vmrs	APSR_nzcv, fpscr
   14184:	bne	1419c <verify_monster@@Base+0xfc>
   14188:	vldr	s0, [r4, #4]
   1418c:	vmov.f32	s2, #0	; 0x40000000  2.0
   14190:	vcmp.f32	s0, s2
   14194:	vmrs	APSR_nzcv, fpscr
   14198:	beq	141a8 <verify_monster@@Base+0x108>
   1419c:	ldr	r0, [pc, #2804]	; 14c98 <verify_monster@@Base+0xbf8>
   141a0:	add	r0, pc, r0
   141a4:	b	14134 <verify_monster@@Base+0x94>
   141a8:	vldr	d16, [r4, #16]
   141ac:	vcmp.f64	d16, #0.0
   141b0:	vmrs	APSR_nzcv, fpscr
   141b4:	bne	141c4 <verify_monster@@Base+0x124>
   141b8:	ldr	r0, [r4, #26]
   141bc:	cmp	r0, #0
   141c0:	beq	141d0 <verify_monster@@Base+0x130>
   141c4:	ldr	r0, [pc, #2768]	; 14c9c <verify_monster@@Base+0xbfc>
   141c8:	add	r0, pc, r0
   141cc:	b	14134 <verify_monster@@Base+0x94>
   141d0:	ldr	r0, [r5]
   141d4:	mov	r6, r5
   141d8:	ldrh	r7, [r6, -r0]!
   141dc:	cmp	r7, #12
   141e0:	bcc	14ba4 <verify_monster@@Base+0xb04>
   141e4:	ldrh	r0, [r6, #10]
   141e8:	cmp	r0, #0
   141ec:	beq	14ba4 <verify_monster@@Base+0xb04>
   141f0:	mov	r1, r5
   141f4:	ldr	r0, [r1, r0]!
   141f8:	add	r0, r1, r0
   141fc:	ldr	r1, [pc, #2728]	; 14cac <verify_monster@@Base+0xc0c>
   14200:	add	r4, r0, #4
   14204:	mov	r0, r4
   14208:	add	r1, pc, r1
   1420c:	bl	12e08 <strcmp@plt>
   14210:	cmp	r0, #0
   14214:	beq	14224 <verify_monster@@Base+0x184>
   14218:	ldr	r0, [pc, #2704]	; 14cb0 <verify_monster@@Base+0xc10>
   1421c:	add	r0, pc, r0
   14220:	b	14134 <verify_monster@@Base+0x94>
   14224:	ldr	r0, [r4, #-4]
   14228:	cmp	r0, #9
   1422c:	bne	14344 <verify_monster@@Base+0x2a4>
   14230:	cmp	r7, #18
   14234:	bcc	14350 <verify_monster@@Base+0x2b0>
   14238:	ldrh	r0, [r6, #16]
   1423c:	cmp	r0, #0
   14240:	beq	14350 <verify_monster@@Base+0x2b0>
   14244:	ldrb	r0, [r5, r0]
   14248:	cmp	r0, #2
   1424c:	bne	14350 <verify_monster@@Base+0x2b0>
   14250:	ldrh	r1, [r6, #14]
   14254:	cmp	r1, #0
   14258:	beq	1435c <verify_monster@@Base+0x2bc>
   1425c:	mov	r0, r5
   14260:	ldr	r1, [r0, r1]!
   14264:	ldr	r1, [r0, r1]!
   14268:	cmp	r1, #10
   1426c:	bne	1435c <verify_monster@@Base+0x2bc>
   14270:	add	r0, r0, #4
   14274:	mov	r1, #0
   14278:	ldrb	r2, [r0]
   1427c:	cmp	r2, #0
   14280:	bne	14368 <verify_monster@@Base+0x2c8>
   14284:	ldrb	r2, [r0, #1]
   14288:	mov	r1, #1
   1428c:	cmp	r2, #1
   14290:	bne	14368 <verify_monster@@Base+0x2c8>
   14294:	ldrb	r2, [r0, #2]
   14298:	mov	r1, #2
   1429c:	cmp	r2, #2
   142a0:	bne	14368 <verify_monster@@Base+0x2c8>
   142a4:	ldrb	r2, [r0, #3]
   142a8:	mov	r1, #3
   142ac:	cmp	r2, #3
   142b0:	bne	14368 <verify_monster@@Base+0x2c8>
   142b4:	ldrb	r2, [r0, #4]
   142b8:	mov	r1, #4
   142bc:	cmp	r2, #4
   142c0:	bne	14368 <verify_monster@@Base+0x2c8>
   142c4:	ldrb	r2, [r0, #5]
   142c8:	mov	r1, #5
   142cc:	cmp	r2, #5
   142d0:	bne	14368 <verify_monster@@Base+0x2c8>
   142d4:	ldrb	r2, [r0, #6]
   142d8:	mov	r1, #6
   142dc:	cmp	r2, #6
   142e0:	bne	14368 <verify_monster@@Base+0x2c8>
   142e4:	ldrb	r2, [r0, #7]
   142e8:	mov	r1, #7
   142ec:	cmp	r2, #7
   142f0:	bne	14368 <verify_monster@@Base+0x2c8>
   142f4:	ldrb	r2, [r0, #8]
   142f8:	mov	r1, #8
   142fc:	cmp	r2, #8
   14300:	bne	14368 <verify_monster@@Base+0x2c8>
   14304:	ldrb	r0, [r0, #9]
   14308:	mov	r1, #9
   1430c:	cmp	r0, #9
   14310:	bne	14368 <verify_monster@@Base+0x2c8>
   14314:	cmp	r7, #7
   14318:	bls	144f0 <verify_monster@@Base+0x450>
   1431c:	ldrh	r0, [r6, #6]
   14320:	cmp	r0, #0
   14324:	beq	14378 <verify_monster@@Base+0x2d8>
   14328:	add	r0, r5, r0
   1432c:	ldrh	r0, [r0]
   14330:	cmp	r0, #150	; 0x96
   14334:	bne	144fc <verify_monster@@Base+0x45c>
   14338:	ldr	r0, [pc, #2440]	; 14cc8 <verify_monster@@Base+0xc28>
   1433c:	add	r0, pc, r0
   14340:	b	14134 <verify_monster@@Base+0x94>
   14344:	ldr	r0, [pc, #2408]	; 14cb4 <verify_monster@@Base+0xc14>
   14348:	add	r0, pc, r0
   1434c:	b	14134 <verify_monster@@Base+0x94>
   14350:	ldr	r0, [pc, #2400]	; 14cb8 <verify_monster@@Base+0xc18>
   14354:	add	r0, pc, r0
   14358:	b	14134 <verify_monster@@Base+0x94>
   1435c:	ldr	r0, [pc, #2392]	; 14cbc <verify_monster@@Base+0xc1c>
   14360:	add	r0, pc, r0
   14364:	b	14134 <verify_monster@@Base+0x94>
   14368:	ldr	r0, [pc, #2384]	; 14cc0 <verify_monster@@Base+0xc20>
   1436c:	add	r0, pc, r0
   14370:	bl	12e14 <printf@plt>
   14374:	b	14138 <verify_monster@@Base+0x98>
   14378:	cmp	r7, #10
   1437c:	bcc	144f0 <verify_monster@@Base+0x450>
   14380:	ldrh	r0, [r6, #8]
   14384:	cmp	r0, #0
   14388:	beq	144f0 <verify_monster@@Base+0x450>
   1438c:	ldrh	r0, [r6, #4]
   14390:	cmp	r0, #0
   14394:	beq	14514 <verify_monster@@Base+0x474>
   14398:	cmp	r7, #24
   1439c:	bcc	14508 <verify_monster@@Base+0x468>
   143a0:	ldrh	r1, [r6, #22]
   143a4:	cmp	r1, #0
   143a8:	beq	14508 <verify_monster@@Base+0x468>
   143ac:	mov	r0, r5
   143b0:	ldr	r1, [r0, r1]!
   143b4:	ldr	r1, [r0, r1]!
   143b8:	cmp	r1, #5
   143bc:	bne	14508 <verify_monster@@Base+0x468>
   143c0:	add	r0, r0, #4
   143c4:	mov	r1, #0
   143c8:	ldrh	r2, [r0]
   143cc:	cmp	r2, #16
   143d0:	bne	14520 <verify_monster@@Base+0x480>
   143d4:	ldrb	r2, [r0, #2]
   143d8:	mov	r1, #0
   143dc:	cmp	r2, #32
   143e0:	bne	14520 <verify_monster@@Base+0x480>
   143e4:	ldrh	r2, [r0, #4]
   143e8:	mov	r1, #1
   143ec:	cmp	r2, #48	; 0x30
   143f0:	bne	14520 <verify_monster@@Base+0x480>
   143f4:	ldrb	r2, [r0, #6]
   143f8:	mov	r1, #1
   143fc:	cmp	r2, #64	; 0x40
   14400:	bne	14520 <verify_monster@@Base+0x480>
   14404:	ldrh	r2, [r0, #8]
   14408:	mov	r1, #2
   1440c:	cmp	r2, #80	; 0x50
   14410:	bne	14520 <verify_monster@@Base+0x480>
   14414:	ldrb	r2, [r0, #10]
   14418:	mov	r1, #2
   1441c:	cmp	r2, #96	; 0x60
   14420:	bne	14520 <verify_monster@@Base+0x480>
   14424:	ldrh	r2, [r0, #12]
   14428:	mov	r1, #3
   1442c:	cmp	r2, #112	; 0x70
   14430:	bne	14520 <verify_monster@@Base+0x480>
   14434:	ldrb	r2, [r0, #14]
   14438:	mov	r1, #3
   1443c:	cmp	r2, #128	; 0x80
   14440:	bne	14520 <verify_monster@@Base+0x480>
   14444:	ldrh	r2, [r0, #16]
   14448:	movw	r3, #401	; 0x191
   1444c:	mov	r1, #4
   14450:	cmp	r2, r3
   14454:	bne	14520 <verify_monster@@Base+0x480>
   14458:	ldrb	r0, [r0, #18]
   1445c:	mov	r1, #4
   14460:	cmp	r0, #145	; 0x91
   14464:	bne	14520 <verify_monster@@Base+0x480>
   14468:	cmp	r7, #27
   1446c:	bls	14530 <verify_monster@@Base+0x490>
   14470:	ldrh	r1, [r6, #26]
   14474:	cmp	r1, #0
   14478:	beq	14530 <verify_monster@@Base+0x490>
   1447c:	mov	r0, r5
   14480:	ldr	r1, [r0, r1]!
   14484:	ldr	r1, [r0, r1]!
   14488:	cmp	r1, #8
   1448c:	bne	14530 <verify_monster@@Base+0x490>
   14490:	add	r9, r0, #4
   14494:	mov	r4, r9
   14498:	ldr	r0, [r4, #20]!
   1449c:	ldr	r8, [r4, r0]!
   144a0:	mov	r0, r4
   144a4:	ldrh	r1, [r0, -r8]!
   144a8:	cmp	r1, #12
   144ac:	bcc	14ba4 <verify_monster@@Base+0xb04>
   144b0:	ldrh	r0, [r0, #10]
   144b4:	cmp	r0, #0
   144b8:	beq	14ba4 <verify_monster@@Base+0xb04>
   144bc:	mov	r1, r4
   144c0:	ldr	r0, [r1, r0]!
   144c4:	add	r0, r1, r0
   144c8:	ldr	r1, [pc, #2064]	; 14ce0 <verify_monster@@Base+0xc40>
   144cc:	add	r0, r0, #4
   144d0:	add	r1, pc, r1
   144d4:	bl	12e08 <strcmp@plt>
   144d8:	cmp	r0, #0
   144dc:	beq	14540 <verify_monster@@Base+0x4a0>
   144e0:	ldr	r0, [pc, #2044]	; 14ce4 <verify_monster@@Base+0xc44>
   144e4:	add	r0, pc, r0
   144e8:	bl	12e14 <printf@plt>
   144ec:	b	14138 <verify_monster@@Base+0x98>
   144f0:	ldr	r0, [pc, #2004]	; 14ccc <verify_monster@@Base+0xc2c>
   144f4:	add	r0, pc, r0
   144f8:	b	14134 <verify_monster@@Base+0x94>
   144fc:	ldr	r0, [pc, #1984]	; 14cc4 <verify_monster@@Base+0xc24>
   14500:	add	r0, pc, r0
   14504:	b	14134 <verify_monster@@Base+0x94>
   14508:	ldr	r0, [pc, #1988]	; 14cd4 <verify_monster@@Base+0xc34>
   1450c:	add	r0, pc, r0
   14510:	b	14134 <verify_monster@@Base+0x94>
   14514:	ldr	r0, [pc, #1972]	; 14cd0 <verify_monster@@Base+0xc30>
   14518:	add	r0, pc, r0
   1451c:	b	14134 <verify_monster@@Base+0x94>
   14520:	ldr	r0, [pc, #1968]	; 14cd8 <verify_monster@@Base+0xc38>
   14524:	add	r0, pc, r0
   14528:	bl	12e14 <printf@plt>
   1452c:	b	14138 <verify_monster@@Base+0x98>
   14530:	ldr	r0, [pc, #1956]	; 14cdc <verify_monster@@Base+0xc3c>
   14534:	add	r0, pc, r0
   14538:	b	14134 <verify_monster@@Base+0x94>
   1453c:	subgt	ip, ip, sp, asr #25
   14540:	mov	r0, r9
   14544:	ldr	r1, [r0, #4]!
   14548:	add	r0, r0, r1
   1454c:	cmp	r0, r4
   14550:	beq	14560 <verify_monster@@Base+0x4c0>
   14554:	ldr	r0, [pc, #1932]	; 14ce8 <verify_monster@@Base+0xc48>
   14558:	add	r0, pc, r0
   1455c:	b	14134 <verify_monster@@Base+0x94>
   14560:	rsb	r2, r8, #0
   14564:	mov	r1, r0
   14568:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
   1456c:	cmp	r2, #12
   14570:	bcc	14ba4 <verify_monster@@Base+0xb04>
   14574:	ldrh	r1, [r1, #10]
   14578:	cmp	r1, #0
   1457c:	beq	14ba4 <verify_monster@@Base+0xb04>
   14580:	ldr	r1, [r0, r1]!
   14584:	add	r0, r0, r1
   14588:	ldr	r1, [pc, #1884]	; 14cec <verify_monster@@Base+0xc4c>
   1458c:	add	r8, r0, #4
   14590:	mov	r0, r8
   14594:	add	r1, pc, r1
   14598:	bl	12e08 <strcmp@plt>
   1459c:	cmp	r0, #0
   145a0:	beq	145b0 <verify_monster@@Base+0x510>
   145a4:	ldr	r0, [pc, #1860]	; 14cf0 <verify_monster@@Base+0xc50>
   145a8:	add	r0, pc, r0
   145ac:	b	14764 <verify_monster@@Base+0x6c4>
   145b0:	mov	r0, r9
   145b4:	ldr	r1, [r0, #8]!
   145b8:	ldr	r2, [r0, r1]!
   145bc:	mov	r1, r0
   145c0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   145c4:	cmp	r2, #12
   145c8:	bcc	14ba4 <verify_monster@@Base+0xb04>
   145cc:	ldrh	r1, [r1, #10]
   145d0:	cmp	r1, #0
   145d4:	beq	14ba4 <verify_monster@@Base+0xb04>
   145d8:	ldr	r1, [r0, r1]!
   145dc:	add	r0, r0, r1
   145e0:	ldr	r1, [pc, #1804]	; 14cf4 <verify_monster@@Base+0xc54>
   145e4:	add	r8, r0, #4
   145e8:	mov	r0, r8
   145ec:	add	r1, pc, r1
   145f0:	bl	12e08 <strcmp@plt>
   145f4:	cmp	r0, #0
   145f8:	beq	14608 <verify_monster@@Base+0x568>
   145fc:	ldr	r0, [pc, #1780]	; 14cf8 <verify_monster@@Base+0xc58>
   14600:	add	r0, pc, r0
   14604:	b	14764 <verify_monster@@Base+0x6c4>
   14608:	ldr	r1, [r9]
   1460c:	mov	r0, r9
   14610:	ldr	r2, [r0, r1]!
   14614:	mov	r1, r0
   14618:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1461c:	cmp	r2, #12
   14620:	bcc	14ba4 <verify_monster@@Base+0xb04>
   14624:	ldrh	r1, [r1, #10]
   14628:	cmp	r1, #0
   1462c:	beq	14ba4 <verify_monster@@Base+0xb04>
   14630:	ldr	r1, [r0, r1]!
   14634:	add	r0, r0, r1
   14638:	ldr	r1, [pc, #1724]	; 14cfc <verify_monster@@Base+0xc5c>
   1463c:	add	r8, r0, #4
   14640:	mov	r0, r8
   14644:	add	r1, pc, r1
   14648:	bl	12e08 <strcmp@plt>
   1464c:	cmp	r0, #0
   14650:	beq	14660 <verify_monster@@Base+0x5c0>
   14654:	ldr	r0, [pc, #1700]	; 14d00 <verify_monster@@Base+0xc60>
   14658:	add	r0, pc, r0
   1465c:	b	14764 <verify_monster@@Base+0x6c4>
   14660:	mov	r0, r9
   14664:	ldr	r1, [r0, #12]!
   14668:	ldr	r2, [r0, r1]!
   1466c:	mov	r1, r0
   14670:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14674:	cmp	r2, #12
   14678:	bcc	14ba4 <verify_monster@@Base+0xb04>
   1467c:	ldrh	r1, [r1, #10]
   14680:	cmp	r1, #0
   14684:	beq	14ba4 <verify_monster@@Base+0xb04>
   14688:	ldr	r1, [r0, r1]!
   1468c:	add	r0, r0, r1
   14690:	ldr	r1, [pc, #1644]	; 14d04 <verify_monster@@Base+0xc64>
   14694:	add	r8, r0, #4
   14698:	mov	r0, r8
   1469c:	add	r1, pc, r1
   146a0:	bl	12e08 <strcmp@plt>
   146a4:	cmp	r0, #0
   146a8:	beq	146b8 <verify_monster@@Base+0x618>
   146ac:	ldr	r0, [pc, #1620]	; 14d08 <verify_monster@@Base+0xc68>
   146b0:	add	r0, pc, r0
   146b4:	b	14764 <verify_monster@@Base+0x6c4>
   146b8:	mov	r0, r9
   146bc:	ldr	r1, [r0, #16]!
   146c0:	ldr	r2, [r0, r1]!
   146c4:	mov	r1, r0
   146c8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   146cc:	cmp	r2, #12
   146d0:	bcc	14ba4 <verify_monster@@Base+0xb04>
   146d4:	ldrh	r1, [r1, #10]
   146d8:	cmp	r1, #0
   146dc:	beq	14ba4 <verify_monster@@Base+0xb04>
   146e0:	ldr	r1, [r0, r1]!
   146e4:	add	r0, r0, r1
   146e8:	ldr	r1, [pc, #1564]	; 14d0c <verify_monster@@Base+0xc6c>
   146ec:	add	r8, r0, #4
   146f0:	mov	r0, r8
   146f4:	add	r1, pc, r1
   146f8:	bl	12e08 <strcmp@plt>
   146fc:	cmp	r0, #0
   14700:	beq	14710 <verify_monster@@Base+0x670>
   14704:	ldr	r0, [pc, #1540]	; 14d10 <verify_monster@@Base+0xc70>
   14708:	add	r0, pc, r0
   1470c:	b	14764 <verify_monster@@Base+0x6c4>
   14710:	mov	r0, r9
   14714:	ldr	r1, [r0, #24]!
   14718:	ldr	r2, [r0, r1]!
   1471c:	mov	r1, r0
   14720:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14724:	cmp	r2, #12
   14728:	bcc	14ba4 <verify_monster@@Base+0xb04>
   1472c:	ldrh	r1, [r1, #10]
   14730:	cmp	r1, #0
   14734:	beq	14ba4 <verify_monster@@Base+0xb04>
   14738:	ldr	r1, [r0, r1]!
   1473c:	add	r0, r0, r1
   14740:	ldr	r1, [pc, #1484]	; 14d14 <verify_monster@@Base+0xc74>
   14744:	add	r8, r0, #4
   14748:	mov	r0, r8
   1474c:	add	r1, pc, r1
   14750:	bl	12e08 <strcmp@plt>
   14754:	cmp	r0, #0
   14758:	beq	14770 <verify_monster@@Base+0x6d0>
   1475c:	ldr	r0, [pc, #1460]	; 14d18 <verify_monster@@Base+0xc78>
   14760:	add	r0, pc, r0
   14764:	mov	r1, r8
   14768:	bl	12e14 <printf@plt>
   1476c:	b	14138 <verify_monster@@Base+0x98>
   14770:	ldr	r0, [r9, #28]!
   14774:	ldr	r1, [r9, r0]!
   14778:	mov	r0, r9
   1477c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   14780:	cmp	r1, #12
   14784:	bcc	14ba4 <verify_monster@@Base+0xb04>
   14788:	ldrh	r0, [r0, #10]
   1478c:	cmp	r0, #0
   14790:	beq	14ba4 <verify_monster@@Base+0xb04>
   14794:	ldr	r0, [r9, r0]!
   14798:	ldr	r1, [pc, #1404]	; 14d1c <verify_monster@@Base+0xc7c>
   1479c:	add	r0, r9, r0
   147a0:	add	r1, pc, r1
   147a4:	add	r4, r0, #4
   147a8:	mov	r0, r4
   147ac:	bl	12e08 <strcmp@plt>
   147b0:	cmp	r0, #0
   147b4:	beq	147cc <verify_monster@@Base+0x72c>
   147b8:	ldr	r0, [pc, #1376]	; 14d20 <verify_monster@@Base+0xc80>
   147bc:	mov	r1, r4
   147c0:	add	r0, pc, r0
   147c4:	bl	12e14 <printf@plt>
   147c8:	b	14138 <verify_monster@@Base+0x98>
   147cc:	ldrh	r1, [r6, #24]
   147d0:	cmp	r1, #0
   147d4:	beq	1481c <verify_monster@@Base+0x77c>
   147d8:	mov	r0, r5
   147dc:	ldr	r1, [r0, r1]!
   147e0:	ldr	r1, [r0, r1]!
   147e4:	cmp	r1, #3
   147e8:	bne	1481c <verify_monster@@Base+0x77c>
   147ec:	add	r4, r0, #4
   147f0:	ldr	r0, [r4]
   147f4:	ldr	r1, [pc, #1324]	; 14d28 <verify_monster@@Base+0xc88>
   147f8:	add	r0, r4, r0
   147fc:	add	r1, pc, r1
   14800:	add	r0, r0, #4
   14804:	bl	12e08 <strcmp@plt>
   14808:	cmp	r0, #0
   1480c:	beq	14828 <verify_monster@@Base+0x788>
   14810:	ldr	r0, [pc, #1300]	; 14d2c <verify_monster@@Base+0xc8c>
   14814:	add	r0, pc, r0
   14818:	b	14134 <verify_monster@@Base+0x94>
   1481c:	ldr	r0, [pc, #1280]	; 14d24 <verify_monster@@Base+0xc84>
   14820:	add	r0, pc, r0
   14824:	b	14134 <verify_monster@@Base+0x94>
   14828:	mov	r0, r4
   1482c:	ldr	r1, [r0, #4]!
   14830:	ldr	r1, [r0, r1]!
   14834:	cmp	r1, #2
   14838:	bne	14858 <verify_monster@@Base+0x7b8>
   1483c:	add	r0, r0, #4
   14840:	ldrh	r0, [r0]
   14844:	cmp	r0, #44	; 0x2c
   14848:	beq	14868 <verify_monster@@Base+0x7c8>
   1484c:	ldr	r0, [pc, #1248]	; 14d34 <verify_monster@@Base+0xc94>
   14850:	add	r0, pc, r0
   14854:	b	14134 <verify_monster@@Base+0x94>
   14858:	ldr	r0, [pc, #1232]	; 14d30 <verify_monster@@Base+0xc90>
   1485c:	add	r0, pc, r0
   14860:	bl	12e14 <printf@plt>
   14864:	b	14138 <verify_monster@@Base+0x98>
   14868:	ldr	r0, [r4, #8]!
   1486c:	ldr	r1, [pc, #1220]	; 14d38 <verify_monster@@Base+0xc98>
   14870:	add	r0, r4, r0
   14874:	add	r1, pc, r1
   14878:	add	r0, r0, #4
   1487c:	bl	12e08 <strcmp@plt>
   14880:	cmp	r0, #0
   14884:	beq	14894 <verify_monster@@Base+0x7f4>
   14888:	ldr	r0, [pc, #1196]	; 14d3c <verify_monster@@Base+0xc9c>
   1488c:	add	r0, pc, r0
   14890:	b	14134 <verify_monster@@Base+0x94>
   14894:	cmp	r7, #54	; 0x36
   14898:	bcc	14910 <verify_monster@@Base+0x870>
   1489c:	ldrh	r1, [r6, #52]	; 0x34
   148a0:	cmp	r1, #0
   148a4:	beq	14910 <verify_monster@@Base+0x870>
   148a8:	mov	r0, r5
   148ac:	ldr	r1, [r0, r1]!
   148b0:	ldr	r1, [r0, r1]!
   148b4:	cmp	r1, #4
   148b8:	bne	1491c <verify_monster@@Base+0x87c>
   148bc:	add	r0, r0, #4
   148c0:	mov	r1, #0
   148c4:	ldrb	r2, [r0]
   148c8:	cmp	r2, #0
   148cc:	bne	14900 <verify_monster@@Base+0x860>
   148d0:	ldrb	r2, [r0, #1]
   148d4:	mov	r1, #1
   148d8:	cmp	r2, #1
   148dc:	bne	14900 <verify_monster@@Base+0x860>
   148e0:	ldrb	r2, [r0, #2]
   148e4:	mov	r1, #2
   148e8:	cmp	r2, #1
   148ec:	bne	14900 <verify_monster@@Base+0x860>
   148f0:	ldrb	r0, [r0, #3]
   148f4:	mov	r1, #3
   148f8:	cmp	r0, #0
   148fc:	beq	14928 <verify_monster@@Base+0x888>
   14900:	ldr	r0, [pc, #1088]	; 14d48 <verify_monster@@Base+0xca8>
   14904:	add	r0, pc, r0
   14908:	bl	12e14 <printf@plt>
   1490c:	b	14138 <verify_monster@@Base+0x98>
   14910:	ldr	r0, [pc, #1064]	; 14d40 <verify_monster@@Base+0xca0>
   14914:	add	r0, pc, r0
   14918:	b	14134 <verify_monster@@Base+0x94>
   1491c:	ldr	r0, [pc, #1056]	; 14d44 <verify_monster@@Base+0xca4>
   14920:	add	r0, pc, r0
   14924:	b	14134 <verify_monster@@Base+0x94>
   14928:	ldrh	r0, [r6, #18]
   1492c:	cmp	r0, #0
   14930:	beq	149a4 <verify_monster@@Base+0x904>
   14934:	ldrb	r0, [r5, r0]
   14938:	cmp	r0, #1
   1493c:	bne	149a4 <verify_monster@@Base+0x904>
   14940:	ldrh	r0, [r6, #20]
   14944:	cmp	r0, #0
   14948:	movne	r1, r5
   1494c:	ldrne	r0, [r1, r0]!
   14950:	addsne	r0, r1, r0
   14954:	beq	14b20 <verify_monster@@Base+0xa80>
   14958:	ldr	r2, [r0]
   1495c:	mov	r1, r0
   14960:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14964:	cmp	r2, #12
   14968:	bcc	14ba4 <verify_monster@@Base+0xb04>
   1496c:	ldrh	r1, [r1, #10]
   14970:	cmp	r1, #0
   14974:	beq	14ba4 <verify_monster@@Base+0xb04>
   14978:	ldr	r1, [r0, r1]!
   1497c:	add	r0, r0, r1
   14980:	ldr	r1, [pc, #972]	; 14d54 <verify_monster@@Base+0xcb4>
   14984:	add	r0, r0, #4
   14988:	add	r1, pc, r1
   1498c:	bl	12e08 <strcmp@plt>
   14990:	cmp	r0, #0
   14994:	beq	149b0 <verify_monster@@Base+0x910>
   14998:	ldr	r0, [pc, #952]	; 14d58 <verify_monster@@Base+0xcb8>
   1499c:	add	r0, pc, r0
   149a0:	b	14134 <verify_monster@@Base+0x94>
   149a4:	ldr	r0, [pc, #928]	; 14d4c <verify_monster@@Base+0xcac>
   149a8:	add	r0, pc, r0
   149ac:	b	14134 <verify_monster@@Base+0x94>
   149b0:	ldrh	r0, [r6, #28]
   149b4:	cmp	r0, #0
   149b8:	movne	r1, r5
   149bc:	ldrne	r0, [r1, r0]!
   149c0:	addsne	r4, r1, r0
   149c4:	beq	14b20 <verify_monster@@Base+0xa80>
   149c8:	ldr	r0, [r4]
   149cc:	mov	r7, r4
   149d0:	ldrh	r8, [r7, -r0]!
   149d4:	cmp	r8, #12
   149d8:	bcc	14ba4 <verify_monster@@Base+0xb04>
   149dc:	ldrh	r0, [r7, #10]
   149e0:	cmp	r0, #0
   149e4:	beq	14ba4 <verify_monster@@Base+0xb04>
   149e8:	mov	r1, r4
   149ec:	ldr	r0, [r1, r0]!
   149f0:	add	r0, r1, r0
   149f4:	ldr	r1, [pc, #864]	; 14d5c <verify_monster@@Base+0xcbc>
   149f8:	add	r0, r0, #4
   149fc:	add	r1, pc, r1
   14a00:	bl	12e08 <strcmp@plt>
   14a04:	cmp	r0, #0
   14a08:	beq	14a18 <verify_monster@@Base+0x978>
   14a0c:	ldr	r0, [pc, #844]	; 14d60 <verify_monster@@Base+0xcc0>
   14a10:	add	r0, pc, r0
   14a14:	b	14134 <verify_monster@@Base+0x94>
   14a18:	cmp	r8, #20
   14a1c:	bcc	14a34 <verify_monster@@Base+0x994>
   14a20:	ldrh	r0, [r7, #18]
   14a24:	cmp	r0, #0
   14a28:	ldrbne	r0, [r4, r0]
   14a2c:	cmpne	r0, #0
   14a30:	bne	14a78 <verify_monster@@Base+0x9d8>
   14a34:	ldrh	r2, [r6, #20]
   14a38:	mov	r1, #0
   14a3c:	mov	r0, #0
   14a40:	cmp	r2, #0
   14a44:	movne	r1, r5
   14a48:	ldrne	r2, [r1, r2]!
   14a4c:	addne	r1, r1, r2
   14a50:	ldrh	r2, [r6, #20]
   14a54:	cmp	r2, #0
   14a58:	movne	r0, r5
   14a5c:	ldrne	r2, [r0, r2]!
   14a60:	addne	r0, r0, r2
   14a64:	cmp	r1, r0
   14a68:	beq	14a84 <verify_monster@@Base+0x9e4>
   14a6c:	ldr	r0, [pc, #756]	; 14d68 <verify_monster@@Base+0xcc8>
   14a70:	add	r0, pc, r0
   14a74:	b	14134 <verify_monster@@Base+0x94>
   14a78:	ldr	r0, [pc, #740]	; 14d64 <verify_monster@@Base+0xcc4>
   14a7c:	add	r0, pc, r0
   14a80:	b	14134 <verify_monster@@Base+0x94>
   14a84:	cmp	r8, #28
   14a88:	bcc	14aa4 <verify_monster@@Base+0xa04>
   14a8c:	ldrh	r0, [r7, #26]
   14a90:	cmp	r0, #0
   14a94:	ldrne	r0, [r4, r0]!
   14a98:	ldrne	r0, [r4, r0]!
   14a9c:	cmpne	r0, #0
   14aa0:	bne	14ac4 <verify_monster@@Base+0xa24>
   14aa4:	ldr	r0, [pc, #728]	; 14d84 <verify_monster@@Base+0xce4>
   14aa8:	ldr	r1, [pc, #728]	; 14d88 <verify_monster@@Base+0xce8>
   14aac:	ldr	r3, [pc, #728]	; 14d8c <verify_monster@@Base+0xcec>
   14ab0:	movw	r2, #693	; 0x2b5
   14ab4:	add	r0, pc, r0
   14ab8:	add	r1, pc, r1
   14abc:	add	r3, pc, r3
   14ac0:	bl	12f04 <__assert_fail@plt>
   14ac4:	add	r1, r4, #4
   14ac8:	add	r0, r1, r0, lsl #2
   14acc:	ldr	r1, [r0, #-4]!
   14ad0:	adds	r0, r0, r1
   14ad4:	beq	14b2c <verify_monster@@Base+0xa8c>
   14ad8:	ldr	r2, [r0]
   14adc:	mov	r1, r0
   14ae0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14ae4:	cmp	r2, #20
   14ae8:	bcc	14b4c <verify_monster@@Base+0xaac>
   14aec:	ldrh	r3, [r1, #18]
   14af0:	cmp	r3, #0
   14af4:	beq	14b4c <verify_monster@@Base+0xaac>
   14af8:	ldrb	r3, [r0, r3]
   14afc:	cmp	r3, #1
   14b00:	bne	14b4c <verify_monster@@Base+0xaac>
   14b04:	cmp	r2, #22
   14b08:	bcc	14b20 <verify_monster@@Base+0xa80>
   14b0c:	ldrh	r1, [r1, #20]
   14b10:	cmp	r1, #0
   14b14:	ldrne	r1, [r0, r1]!
   14b18:	addsne	r0, r0, r1
   14b1c:	bne	14b58 <verify_monster@@Base+0xab8>
   14b20:	ldr	r0, [pc, #552]	; 14d50 <verify_monster@@Base+0xcb0>
   14b24:	add	r0, pc, r0
   14b28:	b	14bac <verify_monster@@Base+0xb0c>
   14b2c:	ldr	r0, [pc, #604]	; 14d90 <verify_monster@@Base+0xcf0>
   14b30:	ldr	r1, [pc, #604]	; 14d94 <verify_monster@@Base+0xcf4>
   14b34:	ldr	r3, [pc, #604]	; 14d98 <verify_monster@@Base+0xcf8>
   14b38:	movw	r2, #717	; 0x2cd
   14b3c:	add	r0, pc, r0
   14b40:	add	r1, pc, r1
   14b44:	add	r3, pc, r3
   14b48:	bl	12f04 <__assert_fail@plt>
   14b4c:	ldr	r0, [pc, #536]	; 14d6c <verify_monster@@Base+0xccc>
   14b50:	add	r0, pc, r0
   14b54:	b	14134 <verify_monster@@Base+0x94>
   14b58:	ldr	r2, [r0]
   14b5c:	mov	r1, r0
   14b60:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14b64:	cmp	r2, #12
   14b68:	bcc	14ba4 <verify_monster@@Base+0xb04>
   14b6c:	ldrh	r1, [r1, #10]
   14b70:	cmp	r1, #0
   14b74:	beq	14ba4 <verify_monster@@Base+0xb04>
   14b78:	ldr	r1, [r0, r1]!
   14b7c:	add	r0, r0, r1
   14b80:	ldr	r1, [pc, #488]	; 14d70 <verify_monster@@Base+0xcd0>
   14b84:	add	r0, r0, #4
   14b88:	add	r1, pc, r1
   14b8c:	bl	12e08 <strcmp@plt>
   14b90:	cmp	r0, #0
   14b94:	beq	14bc4 <verify_monster@@Base+0xb24>
   14b98:	ldr	r0, [pc, #468]	; 14d74 <verify_monster@@Base+0xcd4>
   14b9c:	add	r0, pc, r0
   14ba0:	b	14134 <verify_monster@@Base+0x94>
   14ba4:	ldr	r0, [pc, #244]	; 14ca0 <verify_monster@@Base+0xc00>
   14ba8:	add	r0, pc, r0
   14bac:	ldr	r1, [pc, #240]	; 14ca4 <verify_monster@@Base+0xc04>
   14bb0:	ldr	r3, [pc, #240]	; 14ca8 <verify_monster@@Base+0xc08>
   14bb4:	movw	r2, #699	; 0x2bb
   14bb8:	add	r1, pc, r1
   14bbc:	add	r3, pc, r3
   14bc0:	bl	12f04 <__assert_fail@plt>
   14bc4:	ldrh	r0, [r6, #34]	; 0x22
   14bc8:	cmp	r0, #0
   14bcc:	beq	14bdc <verify_monster@@Base+0xb3c>
   14bd0:	ldrb	r0, [r5, r0]
   14bd4:	cmp	r0, #0
   14bd8:	beq	14be8 <verify_monster@@Base+0xb48>
   14bdc:	ldr	r0, [pc, #404]	; 14d78 <verify_monster@@Base+0xcd8>
   14be0:	add	r0, pc, r0
   14be4:	b	14134 <verify_monster@@Base+0x94>
   14be8:	ldrh	r0, [r6, #32]
   14bec:	cmp	r0, #0
   14bf0:	beq	14c54 <verify_monster@@Base+0xbb4>
   14bf4:	ldr	r0, [r5, r0]!
   14bf8:	adds	r1, r5, r0
   14bfc:	beq	14c60 <verify_monster@@Base+0xbc0>
   14c00:	ldr	r0, [r1]
   14c04:	ldrh	r2, [r1, -r0]!
   14c08:	mov	r0, #0
   14c0c:	cmp	r2, #6
   14c10:	bcc	1413c <verify_monster@@Base+0x9c>
   14c14:	ldrh	r3, [r1, #4]
   14c18:	cmp	r3, #0
   14c1c:	bne	14c48 <verify_monster@@Base+0xba8>
   14c20:	cmp	r2, #8
   14c24:	bcc	1413c <verify_monster@@Base+0x9c>
   14c28:	ldrh	r3, [r1, #6]
   14c2c:	cmp	r3, #0
   14c30:	bne	14c48 <verify_monster@@Base+0xba8>
   14c34:	cmp	r2, #10
   14c38:	bcc	1413c <verify_monster@@Base+0x9c>
   14c3c:	ldrh	r1, [r1, #8]
   14c40:	cmp	r1, #0
   14c44:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c48:	ldr	r0, [pc, #304]	; 14d80 <verify_monster@@Base+0xce0>
   14c4c:	add	r0, pc, r0
   14c50:	b	14134 <verify_monster@@Base+0x94>
   14c54:	ldr	r0, [pc, #288]	; 14d7c <verify_monster@@Base+0xcdc>
   14c58:	add	r0, pc, r0
   14c5c:	b	14134 <verify_monster@@Base+0x94>
   14c60:	ldr	r0, [pc, #308]	; 14d9c <verify_monster@@Base+0xcfc>
   14c64:	ldr	r1, [pc, #308]	; 14da0 <verify_monster@@Base+0xd00>
   14c68:	ldr	r3, [pc, #308]	; 14da4 <verify_monster@@Base+0xd04>
   14c6c:	movw	r2, #607	; 0x25f
   14c70:	add	r0, pc, r0
   14c74:	add	r1, pc, r1
   14c78:	add	r3, pc, r3
   14c7c:	bl	12f04 <__assert_fail@plt>
   14c80:	andeq	r2, r1, r0, lsl lr
   14c84:	andeq	r2, r1, r8, lsr #28
   14c88:	andeq	r3, r1, r4, asr #6
   14c8c:	andeq	r2, r1, ip, ror #28
   14c90:	andeq	r3, r1, ip, ror #5
   14c94:	muleq	r1, ip, r2
   14c98:	andeq	r3, r1, r8, asr #4
   14c9c:	strdeq	r3, [r1], -r0
   14ca0:	muleq	r1, r4, r4
   14ca4:	andeq	r0, r1, r5, lsr pc
   14ca8:	andeq	r1, r1, pc, lsr #8
   14cac:	andeq	r0, r1, r8, ror #23
   14cb0:	andeq	r2, r1, ip, ror sp
   14cb4:	andeq	r3, r1, r0, asr r0
   14cb8:	andeq	r3, r1, r4, lsr #32
   14cbc:	strdeq	r2, [r1], -r8
   14cc0:	andeq	r0, r1, r3, ror #23
   14cc4:	andeq	r2, r1, r8, lsr lr
   14cc8:	ldrdeq	r2, [r1], -ip
   14ccc:	andeq	r2, r1, r4, asr #21
   14cd0:	andeq	r2, r1, r0, asr #21
   14cd4:	ldrdeq	r2, [r1], -ip
   14cd8:	andeq	r0, r1, r8, asr #20
   14cdc:	andeq	r2, r1, r4, lsl #27
   14ce0:	andeq	r0, r1, r0, asr #22
   14ce4:	andeq	r0, r1, ip, lsl fp
   14ce8:	andeq	r2, r1, r0, lsr #26
   14cec:	andeq	r0, r1, ip, ror sl
   14cf0:	andeq	r0, r1, r0, ror sl
   14cf4:	andeq	r0, r1, lr, asr #20
   14cf8:	andeq	r0, r1, r0, asr #20
   14cfc:	andeq	r0, r1, lr, lsl sl
   14d00:	andeq	r0, r1, r3, lsl sl
   14d04:	andeq	r0, r1, r4, ror r9
   14d08:	andeq	r0, r1, r0, ror #19
   14d0c:	andeq	r0, r1, r6, asr #18
   14d10:	andeq	r0, r1, ip, lsr #19
   14d14:	andeq	r0, r1, r6, lsl r9
   14d18:	andeq	r0, r1, r6, ror r9
   14d1c:	muleq	r1, sl, r8
   14d20:	andeq	r0, r1, fp, lsr r9
   14d24:	andeq	r2, r1, r8, lsr #20
   14d28:	andeq	r0, r1, r4, lsr #18
   14d2c:	andeq	r2, r1, r4, lsl sl
   14d30:	andeq	r0, r1, sl, asr #17
   14d34:			; <UNDEFINED> instruction: 0x000129b8
   14d38:	andeq	r0, r1, ip, asr #17
   14d3c:	andeq	r2, r1, ip, asr r9
   14d40:	andeq	r2, r1, r4, ror #13
   14d44:	andeq	r2, r1, r8, lsr #17
   14d48:	andeq	r0, r1, r3, asr #16
   14d4c:	strdeq	r2, [r1], -r0
   14d50:	andeq	r0, r1, r3, lsr #31
   14d54:	andeq	r0, r1, r8, lsl #13
   14d58:	ldrdeq	r2, [r1], -ip
   14d5c:	andeq	r0, r1, sl, ror #14
   14d60:	andeq	r2, r1, r8, asr #14
   14d64:	andeq	r2, r1, ip, lsr #13
   14d68:	muleq	r1, r8, r6
   14d6c:	andeq	r2, r1, r8, ror #10
   14d70:	andeq	r0, r1, r8, lsl #9
   14d74:	ldrdeq	r2, [r1], -ip
   14d78:	andeq	r2, r1, r8, ror r4
   14d7c:	andeq	r2, r1, r0, asr #7
   14d80:	andeq	r2, r1, ip, ror #7
   14d84:	andeq	r1, r1, r2, lsl #12
   14d88:	andeq	r1, r1, r5, lsr r0
   14d8c:	andeq	r1, r1, r8, asr r7
   14d90:	andeq	r0, r1, fp, lsl #31
   14d94:	andeq	r0, r1, sp, lsr #31
   14d98:	andeq	r1, r1, r4, lsl #15
   14d9c:	andeq	r0, r1, r7, asr lr
   14da0:	andeq	r0, r1, r9, ror lr
   14da4:			; <UNDEFINED> instruction: 0x000116b1

00014da8 <gen_monster@@Base>:
   14da8:	push	{r4, r5, r6, sl, fp, lr}
   14dac:	add	fp, sp, #16
   14db0:	sub	sp, sp, #48	; 0x30
   14db4:	mov	r4, r0
   14db8:	ldr	r0, [pc, #2472]	; 15768 <gen_monster@@Base+0x9c0>
   14dbc:	mov	r5, r1
   14dc0:	add	r0, pc, r0
   14dc4:	vldr	d16, [r0]
   14dc8:	movw	r0, #2312	; 0x908
   14dcc:	strh	r0, [sp, #40]	; 0x28
   14dd0:	movw	r0, #256	; 0x100
   14dd4:	movt	r0, #1
   14dd8:	str	r0, [sp, #8]
   14ddc:	mov	r0, r4
   14de0:	vstr	d16, [sp, #32]
   14de4:	bl	1e4f0 <flatcc_builder_reset@@Base>
   14de8:	ldr	r1, [pc, #2428]	; 1576c <gen_monster@@Base+0x9c4>
   14dec:	cmp	r5, #0
   14df0:	mov	r0, r4
   14df4:	mov	r2, #0
   14df8:	moveq	r3, #0
   14dfc:	movne	r3, #2
   14e00:	add	r1, pc, r1
   14e04:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   14e08:	cmp	r0, #0
   14e0c:	bne	14e1c <gen_monster@@Base+0x74>
   14e10:	mov	r0, r4
   14e14:	mov	r1, #36	; 0x24
   14e18:	bl	206c8 <flatcc_builder_start_table@@Base>
   14e1c:	mov	r0, r4
   14e20:	mov	r1, #2
   14e24:	mov	r2, #2
   14e28:	mov	r3, #2
   14e2c:	bl	21b6c <flatcc_builder_table_add@@Base>
   14e30:	cmp	r0, #0
   14e34:	mov	r2, #32
   14e38:	mov	r3, #16
   14e3c:	movne	r1, #80	; 0x50
   14e40:	strhne	r1, [r0]
   14e44:	mov	r0, r4
   14e48:	mov	r1, #0
   14e4c:	bl	21b6c <flatcc_builder_table_add@@Base>
   14e50:	movw	r3, #52429	; 0xcccd
   14e54:	mov	r1, #1065353216	; 0x3f800000
   14e58:	mov	r2, #1073741824	; 0x40000000
   14e5c:	movt	r3, #49228	; 0xc04c
   14e60:	stm	r0, {r1, r2, r3}
   14e64:	mov	r0, r4
   14e68:	ldr	r1, [pc, #2304]	; 15770 <gen_monster@@Base+0x9c8>
   14e6c:	add	r1, pc, r1
   14e70:	bl	22950 <flatcc_builder_create_string_str@@Base>
   14e74:	cmp	r0, #0
   14e78:	beq	14e94 <gen_monster@@Base+0xec>
   14e7c:	mov	r5, r0
   14e80:	mov	r0, r4
   14e84:	mov	r1, #3
   14e88:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   14e8c:	cmp	r0, #0
   14e90:	strne	r5, [r0]
   14e94:	mov	r0, r4
   14e98:	mov	r1, #6
   14e9c:	mov	r2, #1
   14ea0:	mov	r3, #1
   14ea4:	mov	r5, #1
   14ea8:	bl	21b6c <flatcc_builder_table_add@@Base>
   14eac:	cmp	r0, #0
   14eb0:	mov	r2, #10
   14eb4:	mov	r3, #1
   14eb8:	movne	r1, #2
   14ebc:	strbne	r1, [r0]
   14ec0:	mvn	r0, #0
   14ec4:	add	r1, sp, #32
   14ec8:	str	r5, [sp]
   14ecc:	str	r0, [sp, #4]
   14ed0:	mov	r0, r4
   14ed4:	bl	212bc <flatcc_builder_create_vector@@Base>
   14ed8:	cmp	r0, #0
   14edc:	beq	14ef8 <gen_monster@@Base+0x150>
   14ee0:	mov	r5, r0
   14ee4:	mov	r0, r4
   14ee8:	mov	r1, #5
   14eec:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   14ef0:	cmp	r0, #0
   14ef4:	strne	r5, [r0]
   14ef8:	mov	r0, r4
   14efc:	mov	r1, #4
   14f00:	mov	r2, #2
   14f04:	mvn	r3, #-1073741824	; 0xc0000000
   14f08:	bl	201bc <flatcc_builder_start_vector@@Base>
   14f0c:	mov	r0, r4
   14f10:	mov	r1, #1
   14f14:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   14f18:	mov	r1, #16
   14f1c:	strh	r1, [r0]
   14f20:	mov	r1, #32
   14f24:	strb	r1, [r0, #2]
   14f28:	mov	r0, r4
   14f2c:	mov	r1, #2
   14f30:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   14f34:	mov	r1, #48	; 0x30
   14f38:	strh	r1, [r0]
   14f3c:	mov	r1, #64	; 0x40
   14f40:	strb	r1, [r0, #2]
   14f44:	mov	r1, #80	; 0x50
   14f48:	strh	r1, [r0, #4]
   14f4c:	mov	r1, #96	; 0x60
   14f50:	strb	r1, [r0, #6]
   14f54:	mov	r0, r4
   14f58:	mov	r1, #1
   14f5c:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   14f60:	cmp	r0, #0
   14f64:	movne	r1, #128	; 0x80
   14f68:	strbne	r1, [r0, #2]
   14f6c:	movne	r1, #112	; 0x70
   14f70:	strhne	r1, [r0]
   14f74:	mov	r0, r4
   14f78:	mov	r1, #1
   14f7c:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   14f80:	movw	r5, #400	; 0x190
   14f84:	cmp	r0, #0
   14f88:	mov	r1, #1
   14f8c:	movt	r5, #145	; 0x91
   14f90:	strne	r5, [r0]
   14f94:	mov	r0, r4
   14f98:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   14f9c:	cmp	r0, #0
   14fa0:	mov	r1, #1
   14fa4:	strne	r5, [r0]
   14fa8:	mov	r0, r4
   14fac:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   14fb0:	cmp	r0, #0
   14fb4:	strne	r5, [r0]
   14fb8:	mov	r0, r4
   14fbc:	bl	21538 <flatcc_builder_vector_count@@Base>
   14fc0:	cmp	r0, #7
   14fc4:	bne	156c8 <gen_monster@@Base+0x920>
   14fc8:	mov	r0, r4
   14fcc:	mov	r1, #2
   14fd0:	bl	1ffa8 <flatcc_builder_truncate_vector@@Base>
   14fd4:	mov	r0, r4
   14fd8:	bl	21538 <flatcc_builder_vector_count@@Base>
   14fdc:	cmp	r0, #5
   14fe0:	bne	156e8 <gen_monster@@Base+0x940>
   14fe4:	mov	r0, r4
   14fe8:	bl	21544 <flatcc_builder_vector_edit@@Base>
   14fec:	ldrh	r1, [r0, #16]
   14ff0:	add	r1, r1, #1
   14ff4:	strh	r1, [r0, #16]
   14ff8:	mov	r0, r4
   14ffc:	bl	2143c <flatcc_builder_end_vector@@Base>
   15000:	cmp	r0, #0
   15004:	beq	15020 <gen_monster@@Base+0x278>
   15008:	mov	r5, r0
   1500c:	mov	r0, r4
   15010:	mov	r1, #9
   15014:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15018:	cmp	r0, #0
   1501c:	strne	r5, [r0]
   15020:	mov	r0, r4
   15024:	mov	r1, #36	; 0x24
   15028:	bl	206c8 <flatcc_builder_start_table@@Base>
   1502c:	ldr	r1, [pc, #1856]	; 15774 <gen_monster@@Base+0x9cc>
   15030:	mov	r0, r4
   15034:	mov	r2, #7
   15038:	add	r1, pc, r1
   1503c:	bl	22830 <flatcc_builder_create_string@@Base>
   15040:	cmp	r0, #0
   15044:	beq	15060 <gen_monster@@Base+0x2b8>
   15048:	mov	r5, r0
   1504c:	mov	r0, r4
   15050:	mov	r1, #3
   15054:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15058:	cmp	r0, #0
   1505c:	strne	r5, [r0]
   15060:	ldr	r1, [pc, #1808]	; 15778 <gen_monster@@Base+0x9d0>
   15064:	mov	r0, r4
   15068:	mov	r2, #1
   1506c:	add	r1, pc, r1
   15070:	bl	2105c <flatcc_builder_check_required@@Base>
   15074:	cmp	r0, #0
   15078:	beq	156a8 <gen_monster@@Base+0x900>
   1507c:	mov	r0, r4
   15080:	bl	210f8 <flatcc_builder_end_table@@Base>
   15084:	mov	r5, r0
   15088:	mov	r0, r4
   1508c:	bl	20248 <flatcc_builder_start_offset_vector@@Base>
   15090:	mov	r0, r4
   15094:	mov	r1, #2
   15098:	bl	1f9a0 <flatcc_builder_extend_offset_vector@@Base>
   1509c:	str	r5, [r0]
   150a0:	str	r5, [r0, #4]
   150a4:	mov	r0, r4
   150a8:	mov	r1, #36	; 0x24
   150ac:	bl	206c8 <flatcc_builder_start_table@@Base>
   150b0:	ldr	r1, [pc, #1732]	; 1577c <gen_monster@@Base+0x9d4>
   150b4:	mov	r0, r4
   150b8:	mov	r2, #30
   150bc:	add	r1, pc, r1
   150c0:	bl	2297c <flatcc_builder_create_string_strn@@Base>
   150c4:	cmp	r0, #0
   150c8:	beq	150e4 <gen_monster@@Base+0x33c>
   150cc:	mov	r6, r0
   150d0:	mov	r0, r4
   150d4:	mov	r1, #3
   150d8:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   150dc:	cmp	r0, #0
   150e0:	strne	r6, [r0]
   150e4:	ldr	r1, [pc, #1684]	; 15780 <gen_monster@@Base+0x9d8>
   150e8:	mov	r0, r4
   150ec:	mov	r2, #1
   150f0:	add	r1, pc, r1
   150f4:	bl	2105c <flatcc_builder_check_required@@Base>
   150f8:	cmp	r0, #0
   150fc:	beq	156a8 <gen_monster@@Base+0x900>
   15100:	mov	r0, r4
   15104:	bl	210f8 <flatcc_builder_end_table@@Base>
   15108:	mov	r1, r0
   1510c:	mov	r0, r4
   15110:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15114:	ldr	r6, [r0]
   15118:	mov	r0, r4
   1511c:	mov	r1, #3
   15120:	bl	1f9a0 <flatcc_builder_extend_offset_vector@@Base>
   15124:	stm	r0, {r5, r6}
   15128:	mov	r0, r4
   1512c:	mov	r1, #1
   15130:	bl	2005c <flatcc_builder_truncate_offset_vector@@Base>
   15134:	mov	r0, r4
   15138:	bl	2187c <flatcc_builder_offset_vector_count@@Base>
   1513c:	cmp	r0, #5
   15140:	bne	15708 <gen_monster@@Base+0x960>
   15144:	mov	r0, r4
   15148:	mov	r1, #36	; 0x24
   1514c:	bl	206c8 <flatcc_builder_start_table@@Base>
   15150:	ldr	r1, [pc, #1580]	; 15784 <gen_monster@@Base+0x9dc>
   15154:	mov	r0, r4
   15158:	mov	r2, #8
   1515c:	add	r1, pc, r1
   15160:	bl	2297c <flatcc_builder_create_string_strn@@Base>
   15164:	cmp	r0, #0
   15168:	beq	15184 <gen_monster@@Base+0x3dc>
   1516c:	mov	r6, r0
   15170:	mov	r0, r4
   15174:	mov	r1, #3
   15178:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1517c:	cmp	r0, #0
   15180:	strne	r6, [r0]
   15184:	ldr	r1, [pc, #1532]	; 15788 <gen_monster@@Base+0x9e0>
   15188:	mov	r0, r4
   1518c:	mov	r2, #1
   15190:	add	r1, pc, r1
   15194:	bl	2105c <flatcc_builder_check_required@@Base>
   15198:	cmp	r0, #0
   1519c:	beq	156a8 <gen_monster@@Base+0x900>
   151a0:	mov	r0, r4
   151a4:	bl	210f8 <flatcc_builder_end_table@@Base>
   151a8:	mov	r1, r0
   151ac:	mov	r0, r4
   151b0:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   151b4:	ldr	r0, [r0]
   151b8:	str	r0, [sp, #24]
   151bc:	mov	r0, r4
   151c0:	bl	2187c <flatcc_builder_offset_vector_count@@Base>
   151c4:	cmp	r0, #6
   151c8:	bne	15728 <gen_monster@@Base+0x980>
   151cc:	mov	r0, r4
   151d0:	bl	21874 <flatcc_builder_offset_vector_edit@@Base>
   151d4:	ldr	r1, [r0, #8]
   151d8:	ldr	r2, [r0, #20]
   151dc:	str	r1, [sp, #28]
   151e0:	str	r2, [r0]
   151e4:	str	r5, [r0, #20]
   151e8:	add	r1, sp, #24
   151ec:	mov	r0, r4
   151f0:	mov	r2, #2
   151f4:	bl	1fb90 <flatcc_builder_append_offset_vector@@Base>
   151f8:	mov	r0, r4
   151fc:	bl	20430 <flatcc_builder_end_offset_vector@@Base>
   15200:	cmp	r0, #0
   15204:	beq	15220 <gen_monster@@Base+0x478>
   15208:	mov	r6, r0
   1520c:	mov	r0, r4
   15210:	mov	r1, #11
   15214:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15218:	cmp	r0, #0
   1521c:	strne	r6, [r0]
   15220:	ldr	r1, [pc, #1380]	; 1578c <gen_monster@@Base+0x9e4>
   15224:	mov	r0, r4
   15228:	add	r1, pc, r1
   1522c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15230:	str	r0, [sp, #12]
   15234:	mov	r0, r4
   15238:	mov	r2, #2
   1523c:	ldr	r1, [pc, #1356]	; 15790 <gen_monster@@Base+0x9e8>
   15240:	add	r1, pc, r1
   15244:	bl	22830 <flatcc_builder_create_string@@Base>
   15248:	str	r0, [sp, #16]
   1524c:	mov	r0, r4
   15250:	ldr	r1, [pc, #1340]	; 15794 <gen_monster@@Base+0x9ec>
   15254:	add	r1, pc, r1
   15258:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1525c:	str	r0, [sp, #20]
   15260:	add	r1, sp, #12
   15264:	mov	r0, r4
   15268:	mov	r2, #3
   1526c:	bl	202c0 <flatcc_builder_create_offset_vector@@Base>
   15270:	cmp	r0, #0
   15274:	beq	15290 <gen_monster@@Base+0x4e8>
   15278:	mov	r6, r0
   1527c:	mov	r0, r4
   15280:	mov	r1, #10
   15284:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15288:	cmp	r0, #0
   1528c:	strne	r6, [r0]
   15290:	mov	r0, r4
   15294:	mov	r1, #1
   15298:	mov	r2, #1
   1529c:	mvn	r3, #0
   152a0:	bl	201bc <flatcc_builder_start_vector@@Base>
   152a4:	add	r6, sp, #8
   152a8:	mov	r0, r4
   152ac:	mov	r2, #1
   152b0:	mov	r1, r6
   152b4:	bl	1f848 <flatcc_builder_append_vector@@Base>
   152b8:	orr	r1, r6, #1
   152bc:	mov	r0, r4
   152c0:	mov	r2, #3
   152c4:	bl	1f848 <flatcc_builder_append_vector@@Base>
   152c8:	mov	r0, r4
   152cc:	bl	2143c <flatcc_builder_end_vector@@Base>
   152d0:	cmp	r0, #0
   152d4:	beq	152f0 <gen_monster@@Base+0x548>
   152d8:	mov	r6, r0
   152dc:	mov	r0, r4
   152e0:	mov	r1, #24
   152e4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   152e8:	cmp	r0, #0
   152ec:	strne	r6, [r0]
   152f0:	cmp	r5, #0
   152f4:	beq	15334 <gen_monster@@Base+0x58c>
   152f8:	mov	r0, r4
   152fc:	mov	r1, #7
   15300:	mov	r2, #1
   15304:	mov	r3, #1
   15308:	bl	21b6c <flatcc_builder_table_add@@Base>
   1530c:	cmp	r0, #0
   15310:	beq	15334 <gen_monster@@Base+0x58c>
   15314:	mov	r6, r0
   15318:	mov	r0, r4
   1531c:	mov	r1, #8
   15320:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15324:	cmp	r0, #0
   15328:	movne	r1, #1
   1532c:	strbne	r1, [r6]
   15330:	strne	r5, [r0]
   15334:	mov	r0, r4
   15338:	mov	r1, #36	; 0x24
   1533c:	bl	206c8 <flatcc_builder_start_table@@Base>
   15340:	ldr	r1, [pc, #1104]	; 15798 <gen_monster@@Base+0x9f0>
   15344:	mov	r0, r4
   15348:	add	r1, pc, r1
   1534c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15350:	cmp	r0, #0
   15354:	beq	15370 <gen_monster@@Base+0x5c8>
   15358:	mov	r6, r0
   1535c:	mov	r0, r4
   15360:	mov	r1, #3
   15364:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15368:	cmp	r0, #0
   1536c:	strne	r6, [r0]
   15370:	mov	r0, r4
   15374:	bl	20248 <flatcc_builder_start_offset_vector@@Base>
   15378:	mov	r0, r4
   1537c:	mov	r1, #36	; 0x24
   15380:	bl	206c8 <flatcc_builder_start_table@@Base>
   15384:	cmp	r5, #0
   15388:	beq	153c8 <gen_monster@@Base+0x620>
   1538c:	mov	r0, r4
   15390:	mov	r1, #7
   15394:	mov	r2, #1
   15398:	mov	r3, #1
   1539c:	bl	21b6c <flatcc_builder_table_add@@Base>
   153a0:	cmp	r0, #0
   153a4:	beq	153c8 <gen_monster@@Base+0x620>
   153a8:	mov	r6, r0
   153ac:	mov	r0, r4
   153b0:	mov	r1, #8
   153b4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   153b8:	cmp	r0, #0
   153bc:	movne	r1, #1
   153c0:	strbne	r1, [r6]
   153c4:	strne	r5, [r0]
   153c8:	ldr	r1, [pc, #972]	; 1579c <gen_monster@@Base+0x9f4>
   153cc:	mov	r0, r4
   153d0:	add	r1, pc, r1
   153d4:	bl	22950 <flatcc_builder_create_string_str@@Base>
   153d8:	cmp	r0, #0
   153dc:	beq	153f8 <gen_monster@@Base+0x650>
   153e0:	mov	r6, r0
   153e4:	mov	r0, r4
   153e8:	mov	r1, #3
   153ec:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   153f0:	cmp	r0, #0
   153f4:	strne	r6, [r0]
   153f8:	ldr	r1, [pc, #928]	; 157a0 <gen_monster@@Base+0x9f8>
   153fc:	mov	r0, r4
   15400:	mov	r2, #1
   15404:	add	r1, pc, r1
   15408:	bl	2105c <flatcc_builder_check_required@@Base>
   1540c:	cmp	r0, #0
   15410:	beq	156a8 <gen_monster@@Base+0x900>
   15414:	mov	r0, r4
   15418:	bl	210f8 <flatcc_builder_end_table@@Base>
   1541c:	cmp	r0, #0
   15420:	beq	15430 <gen_monster@@Base+0x688>
   15424:	mov	r1, r0
   15428:	mov	r0, r4
   1542c:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15430:	mov	r0, r4
   15434:	mov	r1, #36	; 0x24
   15438:	bl	206c8 <flatcc_builder_start_table@@Base>
   1543c:	cmp	r5, #0
   15440:	beq	15480 <gen_monster@@Base+0x6d8>
   15444:	mov	r0, r4
   15448:	mov	r1, #7
   1544c:	mov	r2, #1
   15450:	mov	r3, #1
   15454:	bl	21b6c <flatcc_builder_table_add@@Base>
   15458:	cmp	r0, #0
   1545c:	beq	15480 <gen_monster@@Base+0x6d8>
   15460:	mov	r6, r0
   15464:	mov	r0, r4
   15468:	mov	r1, #8
   1546c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15470:	cmp	r0, #0
   15474:	movne	r1, #1
   15478:	strbne	r1, [r6]
   1547c:	strne	r5, [r0]
   15480:	ldr	r1, [pc, #796]	; 157a4 <gen_monster@@Base+0x9fc>
   15484:	mov	r0, r4
   15488:	add	r1, pc, r1
   1548c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15490:	cmp	r0, #0
   15494:	beq	154b0 <gen_monster@@Base+0x708>
   15498:	mov	r6, r0
   1549c:	mov	r0, r4
   154a0:	mov	r1, #3
   154a4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   154a8:	cmp	r0, #0
   154ac:	strne	r6, [r0]
   154b0:	ldr	r1, [pc, #752]	; 157a8 <gen_monster@@Base+0xa00>
   154b4:	mov	r0, r4
   154b8:	mov	r2, #1
   154bc:	add	r1, pc, r1
   154c0:	bl	2105c <flatcc_builder_check_required@@Base>
   154c4:	cmp	r0, #0
   154c8:	beq	156a8 <gen_monster@@Base+0x900>
   154cc:	mov	r0, r4
   154d0:	bl	210f8 <flatcc_builder_end_table@@Base>
   154d4:	cmp	r0, #0
   154d8:	beq	154e8 <gen_monster@@Base+0x740>
   154dc:	mov	r1, r0
   154e0:	mov	r0, r4
   154e4:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   154e8:	mov	r0, r4
   154ec:	mov	r1, #36	; 0x24
   154f0:	bl	206c8 <flatcc_builder_start_table@@Base>
   154f4:	mov	r0, r4
   154f8:	mov	r1, #8
   154fc:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15500:	cmp	r0, #0
   15504:	strne	r5, [r0]
   15508:	mov	r0, r4
   1550c:	ldr	r1, [pc, #664]	; 157ac <gen_monster@@Base+0xa04>
   15510:	add	r1, pc, r1
   15514:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15518:	cmp	r0, #0
   1551c:	beq	15538 <gen_monster@@Base+0x790>
   15520:	mov	r5, r0
   15524:	mov	r0, r4
   15528:	mov	r1, #3
   1552c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15530:	cmp	r0, #0
   15534:	strne	r5, [r0]
   15538:	mov	r0, r4
   1553c:	mov	r1, #7
   15540:	mov	r2, #1
   15544:	mov	r3, #1
   15548:	mov	r5, #1
   1554c:	bl	21b6c <flatcc_builder_table_add@@Base>
   15550:	cmp	r0, #0
   15554:	mov	r2, #1
   15558:	strbne	r5, [r0]
   1555c:	mov	r0, r4
   15560:	ldr	r1, [pc, #584]	; 157b0 <gen_monster@@Base+0xa08>
   15564:	add	r1, pc, r1
   15568:	bl	2105c <flatcc_builder_check_required@@Base>
   1556c:	cmp	r0, #0
   15570:	beq	156a8 <gen_monster@@Base+0x900>
   15574:	mov	r0, r4
   15578:	bl	210f8 <flatcc_builder_end_table@@Base>
   1557c:	cmp	r0, #0
   15580:	beq	15590 <gen_monster@@Base+0x7e8>
   15584:	mov	r1, r0
   15588:	mov	r0, r4
   1558c:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15590:	mov	r0, r4
   15594:	bl	20430 <flatcc_builder_end_offset_vector@@Base>
   15598:	cmp	r0, #0
   1559c:	beq	155b8 <gen_monster@@Base+0x810>
   155a0:	mov	r5, r0
   155a4:	mov	r0, r4
   155a8:	mov	r1, #11
   155ac:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   155b0:	cmp	r0, #0
   155b4:	strne	r5, [r0]
   155b8:	ldr	r1, [pc, #500]	; 157b4 <gen_monster@@Base+0xa0c>
   155bc:	mov	r0, r4
   155c0:	mov	r2, #1
   155c4:	add	r1, pc, r1
   155c8:	bl	2105c <flatcc_builder_check_required@@Base>
   155cc:	cmp	r0, #0
   155d0:	beq	156a8 <gen_monster@@Base+0x900>
   155d4:	mov	r0, r4
   155d8:	bl	210f8 <flatcc_builder_end_table@@Base>
   155dc:	cmp	r0, #0
   155e0:	beq	155fc <gen_monster@@Base+0x854>
   155e4:	mov	r5, r0
   155e8:	mov	r0, r4
   155ec:	mov	r1, #12
   155f0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   155f4:	cmp	r0, #0
   155f8:	strne	r5, [r0]
   155fc:	mov	r0, r4
   15600:	mov	r1, #15
   15604:	mov	r2, #1
   15608:	mov	r3, #1
   1560c:	bl	21b6c <flatcc_builder_table_add@@Base>
   15610:	cmp	r0, #0
   15614:	movne	r1, #0
   15618:	strbne	r1, [r0]
   1561c:	mov	r0, r4
   15620:	mov	r1, #3
   15624:	bl	206c8 <flatcc_builder_start_table@@Base>
   15628:	ldr	r1, [pc, #392]	; 157b8 <gen_monster@@Base+0xa10>
   1562c:	mov	r0, r4
   15630:	mov	r2, #0
   15634:	add	r1, pc, r1
   15638:	bl	2105c <flatcc_builder_check_required@@Base>
   1563c:	cmp	r0, #0
   15640:	beq	15748 <gen_monster@@Base+0x9a0>
   15644:	mov	r0, r4
   15648:	bl	210f8 <flatcc_builder_end_table@@Base>
   1564c:	cmp	r0, #0
   15650:	beq	1566c <gen_monster@@Base+0x8c4>
   15654:	mov	r5, r0
   15658:	mov	r0, r4
   1565c:	mov	r1, #14
   15660:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15664:	cmp	r0, #0
   15668:	strne	r5, [r0]
   1566c:	ldr	r1, [pc, #328]	; 157bc <gen_monster@@Base+0xa14>
   15670:	mov	r0, r4
   15674:	mov	r2, #1
   15678:	add	r1, pc, r1
   1567c:	bl	2105c <flatcc_builder_check_required@@Base>
   15680:	cmp	r0, #0
   15684:	beq	156a8 <gen_monster@@Base+0x900>
   15688:	mov	r0, r4
   1568c:	bl	210f8 <flatcc_builder_end_table@@Base>
   15690:	mov	r1, r0
   15694:	mov	r0, r4
   15698:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1569c:	mov	r0, #0
   156a0:	sub	sp, fp, #16
   156a4:	pop	{r4, r5, r6, sl, fp, pc}
   156a8:	ldr	r0, [pc, #296]	; 157d8 <gen_monster@@Base+0xa30>
   156ac:	ldr	r1, [pc, #296]	; 157dc <gen_monster@@Base+0xa34>
   156b0:	ldr	r3, [pc, #296]	; 157e0 <gen_monster@@Base+0xa38>
   156b4:	mov	r2, #235	; 0xeb
   156b8:	add	r0, pc, r0
   156bc:	add	r1, pc, r1
   156c0:	add	r3, pc, r3
   156c4:	bl	12f04 <__assert_fail@plt>
   156c8:	ldr	r0, [pc, #240]	; 157c0 <gen_monster@@Base+0xa18>
   156cc:	ldr	r1, [pc, #240]	; 157c4 <gen_monster@@Base+0xa1c>
   156d0:	ldr	r3, [pc, #240]	; 157c8 <gen_monster@@Base+0xa20>
   156d4:	movw	r2, #881	; 0x371
   156d8:	add	r0, pc, r0
   156dc:	add	r1, pc, r1
   156e0:	add	r3, pc, r3
   156e4:	bl	12f04 <__assert_fail@plt>
   156e8:	ldr	r0, [pc, #220]	; 157cc <gen_monster@@Base+0xa24>
   156ec:	ldr	r1, [pc, #220]	; 157d0 <gen_monster@@Base+0xa28>
   156f0:	ldr	r3, [pc, #220]	; 157d4 <gen_monster@@Base+0xa2c>
   156f4:	movw	r2, #883	; 0x373
   156f8:	add	r0, pc, r0
   156fc:	add	r1, pc, r1
   15700:	add	r3, pc, r3
   15704:	bl	12f04 <__assert_fail@plt>
   15708:	ldr	r0, [pc, #212]	; 157e4 <gen_monster@@Base+0xa3c>
   1570c:	ldr	r1, [pc, #212]	; 157e8 <gen_monster@@Base+0xa40>
   15710:	ldr	r3, [pc, #212]	; 157ec <gen_monster@@Base+0xa44>
   15714:	movw	r2, #923	; 0x39b
   15718:	add	r0, pc, r0
   1571c:	add	r1, pc, r1
   15720:	add	r3, pc, r3
   15724:	bl	12f04 <__assert_fail@plt>
   15728:	ldr	r0, [pc, #192]	; 157f0 <gen_monster@@Base+0xa48>
   1572c:	ldr	r1, [pc, #192]	; 157f4 <gen_monster@@Base+0xa4c>
   15730:	ldr	r3, [pc, #192]	; 157f8 <gen_monster@@Base+0xa50>
   15734:	movw	r2, #929	; 0x3a1
   15738:	add	r0, pc, r0
   1573c:	add	r1, pc, r1
   15740:	add	r3, pc, r3
   15744:	bl	12f04 <__assert_fail@plt>
   15748:	ldr	r0, [pc, #172]	; 157fc <gen_monster@@Base+0xa54>
   1574c:	ldr	r1, [pc, #172]	; 15800 <gen_monster@@Base+0xa58>
   15750:	ldr	r3, [pc, #172]	; 15804 <gen_monster@@Base+0xa5c>
   15754:	mov	r2, #221	; 0xdd
   15758:	add	r0, pc, r0
   1575c:	add	r1, pc, r1
   15760:	add	r3, pc, r3
   15764:	bl	12f04 <__assert_fail@plt>
   15768:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1576c:	andeq	pc, r0, ip, lsr #31
   15770:	andeq	pc, r0, r4, lsl #31
   15774:	ldrdeq	pc, [r0], -r8
   15778:	strdeq	r1, [r1], -r0
   1577c:	andeq	pc, r0, lr, ror pc	; <UNPREDICTABLE>
   15780:	andeq	r1, r1, ip, ror #24
   15784:	strheq	r0, [r1], -lr
   15788:	andeq	r1, r1, ip, asr #23
   1578c:	strdeq	pc, [r0], -r8
   15790:	strdeq	r1, [r1], -r4
   15794:	andeq	pc, r0, ip, ror #29
   15798:	andeq	pc, r0, lr, lsl lr	; <UNPREDICTABLE>
   1579c:	muleq	r0, r9, lr
   157a0:	andeq	r1, r1, r8, asr r9
   157a4:	andeq	pc, r0, r1, ror #27
   157a8:	andeq	r1, r1, r0, lsr #17
   157ac:	andeq	pc, r0, r9, asr sp	; <UNPREDICTABLE>
   157b0:	strdeq	r1, [r1], -r8
   157b4:	muleq	r1, r8, r7
   157b8:	andeq	r1, r1, lr, lsr #14
   157bc:	andeq	r1, r1, r4, ror #13
   157c0:	muleq	r0, r8, sl
   157c4:			; <UNDEFINED> instruction: 0x0000f8bc
   157c8:			; <UNDEFINED> instruction: 0x0000fab7
   157cc:	andeq	pc, r0, r8, asr #21
   157d0:	muleq	r0, ip, r8
   157d4:	muleq	r0, r7, sl
   157d8:	andeq	r0, r1, r0, lsr #14
   157dc:	andeq	r0, r1, r3, ror #11
   157e0:			; <UNDEFINED> instruction: 0x000107ba
   157e4:	andeq	pc, r0, pc, asr #21
   157e8:	andeq	pc, r0, ip, ror r8	; <UNPREDICTABLE>
   157ec:	andeq	pc, r0, r7, ror sl	; <UNPREDICTABLE>
   157f0:	strdeq	pc, [r0], -lr
   157f4:	andeq	pc, r0, ip, asr r8	; <UNPREDICTABLE>
   157f8:	andeq	pc, r0, r7, asr sl	; <UNPREDICTABLE>
   157fc:	andeq	r0, r1, r4, lsl ip
   15800:	andeq	r0, r1, r3, asr #10
   15804:	andeq	r0, r1, r5, lsr #25

00015808 <test_monster@@Base>:
   15808:	push	{r4, r5, fp, lr}
   1580c:	add	fp, sp, #8
   15810:	sub	sp, sp, #8
   15814:	mov	r1, #0
   15818:	mov	r4, r0
   1581c:	bl	14da8 <gen_monster@@Base>
   15820:	add	r1, sp, #4
   15824:	mov	r0, r4
   15828:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   1582c:	mov	r4, r0
   15830:	ldr	r0, [pc, #120]	; 158b0 <test_monster@@Base+0xa8>
   15834:	mov	r1, r4
   15838:	ldr	r0, [pc, r0]
   1583c:	ldr	r2, [sp, #4]
   15840:	ldr	r3, [r0]
   15844:	ldr	r0, [pc, #104]	; 158b4 <test_monster@@Base+0xac>
   15848:	add	r0, pc, r0
   1584c:	bl	1361c <test_type_aliases@@Base+0x554>
   15850:	ldr	r1, [sp, #4]
   15854:	ldr	r2, [pc, #92]	; 158b8 <test_monster@@Base+0xb0>
   15858:	ldr	r3, [pc, #92]	; 158bc <test_monster@@Base+0xb4>
   1585c:	mov	r0, r4
   15860:	add	r2, pc, r2
   15864:	add	r3, pc, r3
   15868:	bl	24128 <flatcc_verify_table_as_root@@Base>
   1586c:	cmp	r0, #0
   15870:	beq	15890 <test_monster@@Base+0x88>
   15874:	bl	234bc <flatcc_verify_error_string@@Base>
   15878:	mov	r1, r0
   1587c:	ldr	r0, [pc, #60]	; 158c0 <test_monster@@Base+0xb8>
   15880:	add	r0, pc, r0
   15884:	bl	12e14 <printf@plt>
   15888:	mvn	r5, #0
   1588c:	b	158a4 <test_monster@@Base+0x9c>
   15890:	mov	r0, r4
   15894:	bl	140a0 <verify_monster@@Base>
   15898:	mov	r5, r0
   1589c:	mov	r0, r4
   158a0:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   158a4:	mov	r0, r5
   158a8:	sub	sp, fp, #8
   158ac:	pop	{r4, r5, fp, pc}
   158b0:	andeq	r5, r2, r8, lsr #16
   158b4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   158b8:	andeq	pc, r0, ip, asr #10
   158bc:	andeq	r7, r0, r4, asr #25
   158c0:	strdeq	pc, [r0], -r2

000158c4 <test_monster_with_size@@Base>:
   158c4:	push	{r4, r5, fp, lr}
   158c8:	add	fp, sp, #8
   158cc:	sub	sp, sp, #8
   158d0:	mov	r1, #1
   158d4:	mov	r4, r0
   158d8:	bl	14da8 <gen_monster@@Base>
   158dc:	add	r1, sp, #4
   158e0:	mov	r0, r4
   158e4:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   158e8:	mov	r4, r0
   158ec:	ldr	r0, [pc, #196]	; 159b8 <test_monster_with_size@@Base+0xf4>
   158f0:	mov	r1, r4
   158f4:	ldr	r0, [pc, r0]
   158f8:	ldr	r2, [sp, #4]
   158fc:	ldr	r3, [r0]
   15900:	ldr	r0, [pc, #180]	; 159bc <test_monster_with_size@@Base+0xf8>
   15904:	add	r0, pc, r0
   15908:	bl	1361c <test_type_aliases@@Base+0x554>
   1590c:	tst	r4, #15
   15910:	beq	15938 <test_monster_with_size@@Base+0x74>
   15914:	ldr	r0, [pc, #164]	; 159c0 <test_monster_with_size@@Base+0xfc>
   15918:	add	r0, pc, r0
   1591c:	bl	12e14 <printf@plt>
   15920:	ldr	r0, [pc, #156]	; 159c4 <test_monster_with_size@@Base+0x100>
   15924:	mov	r1, r4
   15928:	add	r0, pc, r0
   1592c:	bl	12e14 <printf@plt>
   15930:	mvn	r5, #0
   15934:	b	159ac <test_monster_with_size@@Base+0xe8>
   15938:	mov	r5, r4
   1593c:	ldr	r0, [sp, #4]
   15940:	ldr	r1, [r5], #4
   15944:	sub	r2, r0, #4
   15948:	cmp	r1, r2
   1594c:	bne	15984 <test_monster_with_size@@Base+0xc0>
   15950:	ldr	r2, [pc, #116]	; 159cc <test_monster_with_size@@Base+0x108>
   15954:	ldr	r3, [pc, #116]	; 159d0 <test_monster_with_size@@Base+0x10c>
   15958:	mov	r0, r5
   1595c:	add	r2, pc, r2
   15960:	add	r3, pc, r3
   15964:	bl	24128 <flatcc_verify_table_as_root@@Base>
   15968:	cmp	r0, #0
   1596c:	beq	15998 <test_monster_with_size@@Base+0xd4>
   15970:	bl	234bc <flatcc_verify_error_string@@Base>
   15974:	mov	r1, r0
   15978:	ldr	r0, [pc, #84]	; 159d4 <test_monster_with_size@@Base+0x110>
   1597c:	add	r0, pc, r0
   15980:	b	1592c <test_monster_with_size@@Base+0x68>
   15984:	ldr	r0, [pc, #60]	; 159c8 <test_monster_with_size@@Base+0x104>
   15988:	add	r0, pc, r0
   1598c:	bl	12e14 <printf@plt>
   15990:	mvn	r5, #0
   15994:	b	159ac <test_monster_with_size@@Base+0xe8>
   15998:	mov	r0, r5
   1599c:	bl	140a0 <verify_monster@@Base>
   159a0:	mov	r5, r0
   159a4:	mov	r0, r4
   159a8:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   159ac:	mov	r0, r5
   159b0:	sub	sp, fp, #8
   159b4:	pop	{r4, r5, fp, pc}
   159b8:	andeq	r5, r2, ip, ror #14
   159bc:	muleq	r0, r8, r9
   159c0:	muleq	r0, ip, r9
   159c4:	ldrdeq	pc, [r0], -sp
   159c8:	muleq	r0, r1, r9
   159cc:	andeq	pc, r0, r0, asr r4	; <UNPREDICTABLE>
   159d0:	andeq	r7, r0, r8, asr #23
   159d4:	ldrdeq	pc, [r0], -r3

000159d8 <test_string@@Base>:
   159d8:	push	{r4, r5, fp, lr}
   159dc:	add	fp, sp, #8
   159e0:	mov	r4, r0
   159e4:	bl	1e4f0 <flatcc_builder_reset@@Base>
   159e8:	ldr	r1, [pc, #676]	; 15c94 <test_string@@Base+0x2bc>
   159ec:	mov	r0, r4
   159f0:	mov	r2, #0
   159f4:	mov	r3, #0
   159f8:	add	r1, pc, r1
   159fc:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   15a00:	cmp	r0, #0
   15a04:	bne	15a14 <test_string@@Base+0x3c>
   15a08:	mov	r0, r4
   15a0c:	mov	r1, #36	; 0x24
   15a10:	bl	206c8 <flatcc_builder_start_table@@Base>
   15a14:	mov	r0, r4
   15a18:	bl	20514 <flatcc_builder_start_string@@Base>
   15a1c:	mov	r0, r4
   15a20:	mov	r1, #3
   15a24:	bl	1fcd8 <flatcc_builder_extend_string@@Base>
   15a28:	movw	r1, #12849	; 0x3231
   15a2c:	strh	r1, [r0]
   15a30:	mov	r1, #51	; 0x33
   15a34:	strb	r1, [r0, #2]
   15a38:	mov	r0, r4
   15a3c:	ldr	r1, [pc, #596]	; 15c98 <test_string@@Base+0x2c0>
   15a40:	add	r1, pc, r1
   15a44:	bl	1ff40 <flatcc_builder_append_string_str@@Base>
   15a48:	mov	r0, r4
   15a4c:	bl	22ad8 <flatcc_builder_string_len@@Base>
   15a50:	cmp	r0, #4
   15a54:	bne	15bb4 <test_string@@Base+0x1dc>
   15a58:	ldr	r1, [pc, #572]	; 15c9c <test_string@@Base+0x2c4>
   15a5c:	mov	r0, r4
   15a60:	mov	r2, #30
   15a64:	add	r1, pc, r1
   15a68:	bl	1ff6c <flatcc_builder_append_string_strn@@Base>
   15a6c:	mov	r0, r4
   15a70:	bl	22ad8 <flatcc_builder_string_len@@Base>
   15a74:	cmp	r0, #8
   15a78:	bne	15bd4 <test_string@@Base+0x1fc>
   15a7c:	ldr	r1, [pc, #540]	; 15ca0 <test_string@@Base+0x2c8>
   15a80:	mov	r0, r4
   15a84:	mov	r2, #2
   15a88:	add	r1, pc, r1
   15a8c:	bl	1fdfc <flatcc_builder_append_string@@Base>
   15a90:	mov	r0, r4
   15a94:	bl	22ad8 <flatcc_builder_string_len@@Base>
   15a98:	cmp	r0, #10
   15a9c:	bne	15bf4 <test_string@@Base+0x21c>
   15aa0:	mov	r0, r4
   15aa4:	mov	r1, #3
   15aa8:	bl	20110 <flatcc_builder_truncate_string@@Base>
   15aac:	mov	r0, r4
   15ab0:	bl	22ad8 <flatcc_builder_string_len@@Base>
   15ab4:	cmp	r0, #7
   15ab8:	bne	15c14 <test_string@@Base+0x23c>
   15abc:	mov	r0, r4
   15ac0:	bl	22ad0 <flatcc_builder_string_edit@@Base>
   15ac4:	mov	r1, #46	; 0x2e
   15ac8:	strb	r1, [r0, #4]
   15acc:	mov	r0, r4
   15ad0:	bl	229b8 <flatcc_builder_end_string@@Base>
   15ad4:	cmp	r0, #0
   15ad8:	beq	15af4 <test_string@@Base+0x11c>
   15adc:	mov	r5, r0
   15ae0:	mov	r0, r4
   15ae4:	mov	r1, #3
   15ae8:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15aec:	cmp	r0, #0
   15af0:	strne	r5, [r0]
   15af4:	ldr	r1, [pc, #424]	; 15ca4 <test_string@@Base+0x2cc>
   15af8:	mov	r0, r4
   15afc:	mov	r2, #1
   15b00:	add	r1, pc, r1
   15b04:	bl	2105c <flatcc_builder_check_required@@Base>
   15b08:	cmp	r0, #0
   15b0c:	beq	15c34 <test_string@@Base+0x25c>
   15b10:	mov	r0, r4
   15b14:	bl	210f8 <flatcc_builder_end_table@@Base>
   15b18:	mov	r1, r0
   15b1c:	mov	r0, r4
   15b20:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   15b24:	mov	r0, r4
   15b28:	mov	r1, #0
   15b2c:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   15b30:	cmp	r0, #0
   15b34:	beq	15c54 <test_string@@Base+0x27c>
   15b38:	ldr	r1, [r0, #4]
   15b3c:	movw	r2, #20301	; 0x4f4d
   15b40:	movt	r2, #21326	; 0x534e
   15b44:	cmp	r1, r2
   15b48:	bne	15c74 <test_string@@Base+0x29c>
   15b4c:	ldr	r1, [r0]
   15b50:	ldr	r2, [r0, r1]!
   15b54:	mov	r1, r0
   15b58:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15b5c:	cmp	r2, #11
   15b60:	bls	15ba8 <test_string@@Base+0x1d0>
   15b64:	ldrh	r1, [r1, #10]
   15b68:	cmp	r1, #0
   15b6c:	beq	15ba8 <test_string@@Base+0x1d0>
   15b70:	ldr	r1, [r0, r1]!
   15b74:	add	r0, r0, r1
   15b78:	ldr	r1, [pc, #312]	; 15cb8 <test_string@@Base+0x2e0>
   15b7c:	add	r0, r0, #4
   15b80:	add	r1, pc, r1
   15b84:	bl	12e08 <strcmp@plt>
   15b88:	cmp	r0, #0
   15b8c:	moveq	r0, #0
   15b90:	popeq	{r4, r5, fp, pc}
   15b94:	ldr	r0, [pc, #288]	; 15cbc <test_string@@Base+0x2e4>
   15b98:	add	r0, pc, r0
   15b9c:	bl	12e68 <puts@plt>
   15ba0:	mvn	r0, #0
   15ba4:	pop	{r4, r5, fp, pc}
   15ba8:	ldr	r0, [pc, #248]	; 15ca8 <test_string@@Base+0x2d0>
   15bac:	add	r0, pc, r0
   15bb0:	b	15c7c <test_string@@Base+0x2a4>
   15bb4:	ldr	r0, [pc, #260]	; 15cc0 <test_string@@Base+0x2e8>
   15bb8:	ldr	r1, [pc, #260]	; 15cc4 <test_string@@Base+0x2ec>
   15bbc:	ldr	r3, [pc, #260]	; 15cc8 <test_string@@Base+0x2f0>
   15bc0:	movw	r2, #1080	; 0x438
   15bc4:	add	r0, pc, r0
   15bc8:	add	r1, pc, r1
   15bcc:	add	r3, pc, r3
   15bd0:	bl	12f04 <__assert_fail@plt>
   15bd4:	ldr	r0, [pc, #240]	; 15ccc <test_string@@Base+0x2f4>
   15bd8:	ldr	r1, [pc, #240]	; 15cd0 <test_string@@Base+0x2f8>
   15bdc:	ldr	r3, [pc, #240]	; 15cd4 <test_string@@Base+0x2fc>
   15be0:	movw	r2, #1082	; 0x43a
   15be4:	add	r0, pc, r0
   15be8:	add	r1, pc, r1
   15bec:	add	r3, pc, r3
   15bf0:	bl	12f04 <__assert_fail@plt>
   15bf4:	ldr	r0, [pc, #220]	; 15cd8 <test_string@@Base+0x300>
   15bf8:	ldr	r1, [pc, #220]	; 15cdc <test_string@@Base+0x304>
   15bfc:	ldr	r3, [pc, #220]	; 15ce0 <test_string@@Base+0x308>
   15c00:	movw	r2, #1084	; 0x43c
   15c04:	add	r0, pc, r0
   15c08:	add	r1, pc, r1
   15c0c:	add	r3, pc, r3
   15c10:	bl	12f04 <__assert_fail@plt>
   15c14:	ldr	r0, [pc, #200]	; 15ce4 <test_string@@Base+0x30c>
   15c18:	ldr	r1, [pc, #200]	; 15ce8 <test_string@@Base+0x310>
   15c1c:	ldr	r3, [pc, #200]	; 15cec <test_string@@Base+0x314>
   15c20:	movw	r2, #1086	; 0x43e
   15c24:	add	r0, pc, r0
   15c28:	add	r1, pc, r1
   15c2c:	add	r3, pc, r3
   15c30:	bl	12f04 <__assert_fail@plt>
   15c34:	ldr	r0, [pc, #180]	; 15cf0 <test_string@@Base+0x318>
   15c38:	ldr	r1, [pc, #180]	; 15cf4 <test_string@@Base+0x31c>
   15c3c:	ldr	r3, [pc, #180]	; 15cf8 <test_string@@Base+0x320>
   15c40:	mov	r2, #235	; 0xeb
   15c44:	add	r0, pc, r0
   15c48:	add	r1, pc, r1
   15c4c:	add	r3, pc, r3
   15c50:	bl	12f04 <__assert_fail@plt>
   15c54:	ldr	r0, [pc, #160]	; 15cfc <test_string@@Base+0x324>
   15c58:	ldr	r1, [pc, #160]	; 15d00 <test_string@@Base+0x328>
   15c5c:	ldr	r3, [pc, #160]	; 15d04 <test_string@@Base+0x32c>
   15c60:	movw	r2, #1093	; 0x445
   15c64:	add	r0, pc, r0
   15c68:	add	r1, pc, r1
   15c6c:	add	r3, pc, r3
   15c70:	bl	12f04 <__assert_fail@plt>
   15c74:	ldr	r0, [pc, #48]	; 15cac <test_string@@Base+0x2d4>
   15c78:	add	r0, pc, r0
   15c7c:	ldr	r1, [pc, #44]	; 15cb0 <test_string@@Base+0x2d8>
   15c80:	ldr	r3, [pc, #44]	; 15cb4 <test_string@@Base+0x2dc>
   15c84:	movw	r2, #699	; 0x2bb
   15c88:	add	r1, pc, r1
   15c8c:	add	r3, pc, r3
   15c90:	bl	12f04 <__assert_fail@plt>
   15c94:			; <UNDEFINED> instruction: 0x0000f3b4
   15c98:	andeq	pc, r0, lr, ror #18
   15c9c:	andeq	pc, r0, r0, ror r9	; <UNPREDICTABLE>
   15ca0:	andeq	pc, r0, r7, ror r9	; <UNPREDICTABLE>
   15ca4:	andeq	r1, r1, ip, asr r2
   15ca8:	muleq	r1, r0, r4
   15cac:	andeq	pc, r0, pc, asr #28
   15cb0:	andeq	pc, r0, r5, ror #28
   15cb4:	andeq	r0, r1, pc, asr r3
   15cb8:	andeq	pc, r0, pc, asr #17
   15cbc:	andeq	r1, r1, r0, lsl #18
   15cc0:	andeq	pc, r0, r6, asr #15
   15cc4:	ldrdeq	pc, [r0], -r0
   15cc8:	andeq	pc, r0, r4, ror #15
   15ccc:	strdeq	pc, [r0], -r5
   15cd0:			; <UNDEFINED> instruction: 0x0000f3b0
   15cd4:	andeq	pc, r0, r4, asr #15
   15cd8:	strdeq	pc, [r0], -lr
   15cdc:	muleq	r0, r0, r3
   15ce0:	andeq	pc, r0, r4, lsr #15
   15ce4:	andeq	pc, r0, r5, lsl #16
   15ce8:	andeq	pc, r0, r0, ror r3	; <UNPREDICTABLE>
   15cec:	andeq	pc, r0, r4, lsl #15
   15cf0:	muleq	r1, r4, r1
   15cf4:	andeq	r0, r1, r7, asr r0
   15cf8:	andeq	r0, r1, lr, lsr #4
   15cfc:	andeq	pc, r0, fp, lsl #18
   15d00:	andeq	pc, r0, r0, lsr r3	; <UNPREDICTABLE>
   15d04:	andeq	pc, r0, r4, asr #14

00015d08 <test_sort_find@@Base>:
   15d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d0c:	add	fp, sp, #28
   15d10:	sub	sp, sp, #20
   15d14:	mov	r4, r0
   15d18:	bl	1e4f0 <flatcc_builder_reset@@Base>
   15d1c:	ldr	r1, [pc, #2912]	; 16884 <test_sort_find@@Base+0xb7c>
   15d20:	mov	r0, r4
   15d24:	mov	r2, #0
   15d28:	mov	r3, #0
   15d2c:	add	r1, pc, r1
   15d30:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   15d34:	cmp	r0, #0
   15d38:	bne	15d48 <test_sort_find@@Base+0x40>
   15d3c:	mov	r0, r4
   15d40:	mov	r1, #36	; 0x24
   15d44:	bl	206c8 <flatcc_builder_start_table@@Base>
   15d48:	ldr	r1, [pc, #2872]	; 16888 <test_sort_find@@Base+0xb80>
   15d4c:	mov	r0, r4
   15d50:	add	r1, pc, r1
   15d54:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15d58:	cmp	r0, #0
   15d5c:	beq	15d78 <test_sort_find@@Base+0x70>
   15d60:	mov	r5, r0
   15d64:	mov	r0, r4
   15d68:	mov	r1, #3
   15d6c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15d70:	cmp	r0, #0
   15d74:	strne	r5, [r0]
   15d78:	mov	r0, r4
   15d7c:	bl	20248 <flatcc_builder_start_offset_vector@@Base>
   15d80:	mov	r0, r4
   15d84:	mov	r1, #36	; 0x24
   15d88:	bl	206c8 <flatcc_builder_start_table@@Base>
   15d8c:	ldr	r1, [pc, #2808]	; 1688c <test_sort_find@@Base+0xb84>
   15d90:	mov	r0, r4
   15d94:	add	r1, pc, r1
   15d98:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15d9c:	cmp	r0, #0
   15da0:	beq	15dbc <test_sort_find@@Base+0xb4>
   15da4:	mov	r5, r0
   15da8:	mov	r0, r4
   15dac:	mov	r1, #3
   15db0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15db4:	cmp	r0, #0
   15db8:	strne	r5, [r0]
   15dbc:	ldr	r1, [pc, #2764]	; 16890 <test_sort_find@@Base+0xb88>
   15dc0:	mov	r0, r4
   15dc4:	mov	r2, #1
   15dc8:	add	r1, pc, r1
   15dcc:	bl	2105c <flatcc_builder_check_required@@Base>
   15dd0:	cmp	r0, #0
   15dd4:	beq	167d8 <test_sort_find@@Base+0xad0>
   15dd8:	mov	r0, r4
   15ddc:	bl	210f8 <flatcc_builder_end_table@@Base>
   15de0:	cmp	r0, #0
   15de4:	beq	15df4 <test_sort_find@@Base+0xec>
   15de8:	mov	r1, r0
   15dec:	mov	r0, r4
   15df0:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15df4:	mov	r0, r4
   15df8:	mov	r1, #36	; 0x24
   15dfc:	bl	206c8 <flatcc_builder_start_table@@Base>
   15e00:	ldr	r1, [pc, #2700]	; 16894 <test_sort_find@@Base+0xb8c>
   15e04:	mov	r0, r4
   15e08:	add	r1, pc, r1
   15e0c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15e10:	cmp	r0, #0
   15e14:	beq	15e30 <test_sort_find@@Base+0x128>
   15e18:	mov	r5, r0
   15e1c:	mov	r0, r4
   15e20:	mov	r1, #3
   15e24:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15e28:	cmp	r0, #0
   15e2c:	strne	r5, [r0]
   15e30:	ldr	r1, [pc, #2656]	; 16898 <test_sort_find@@Base+0xb90>
   15e34:	mov	r0, r4
   15e38:	mov	r2, #1
   15e3c:	add	r1, pc, r1
   15e40:	bl	2105c <flatcc_builder_check_required@@Base>
   15e44:	cmp	r0, #0
   15e48:	beq	167d8 <test_sort_find@@Base+0xad0>
   15e4c:	mov	r0, r4
   15e50:	bl	210f8 <flatcc_builder_end_table@@Base>
   15e54:	cmp	r0, #0
   15e58:	beq	15e68 <test_sort_find@@Base+0x160>
   15e5c:	mov	r1, r0
   15e60:	mov	r0, r4
   15e64:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15e68:	mov	r0, r4
   15e6c:	mov	r1, #36	; 0x24
   15e70:	bl	206c8 <flatcc_builder_start_table@@Base>
   15e74:	ldr	r1, [pc, #2592]	; 1689c <test_sort_find@@Base+0xb94>
   15e78:	mov	r0, r4
   15e7c:	add	r1, pc, r1
   15e80:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15e84:	cmp	r0, #0
   15e88:	beq	15ea4 <test_sort_find@@Base+0x19c>
   15e8c:	mov	r5, r0
   15e90:	mov	r0, r4
   15e94:	mov	r1, #3
   15e98:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15e9c:	cmp	r0, #0
   15ea0:	strne	r5, [r0]
   15ea4:	ldr	r1, [pc, #2548]	; 168a0 <test_sort_find@@Base+0xb98>
   15ea8:	mov	r0, r4
   15eac:	mov	r2, #1
   15eb0:	add	r1, pc, r1
   15eb4:	bl	2105c <flatcc_builder_check_required@@Base>
   15eb8:	cmp	r0, #0
   15ebc:	beq	167d8 <test_sort_find@@Base+0xad0>
   15ec0:	mov	r0, r4
   15ec4:	bl	210f8 <flatcc_builder_end_table@@Base>
   15ec8:	cmp	r0, #0
   15ecc:	beq	15edc <test_sort_find@@Base+0x1d4>
   15ed0:	mov	r1, r0
   15ed4:	mov	r0, r4
   15ed8:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15edc:	mov	r0, r4
   15ee0:	mov	r1, #36	; 0x24
   15ee4:	bl	206c8 <flatcc_builder_start_table@@Base>
   15ee8:	ldr	r1, [pc, #2484]	; 168a4 <test_sort_find@@Base+0xb9c>
   15eec:	mov	r0, r4
   15ef0:	add	r1, pc, r1
   15ef4:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15ef8:	cmp	r0, #0
   15efc:	beq	15f18 <test_sort_find@@Base+0x210>
   15f00:	mov	r5, r0
   15f04:	mov	r0, r4
   15f08:	mov	r1, #3
   15f0c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15f10:	cmp	r0, #0
   15f14:	strne	r5, [r0]
   15f18:	ldr	r1, [pc, #2440]	; 168a8 <test_sort_find@@Base+0xba0>
   15f1c:	mov	r0, r4
   15f20:	mov	r2, #1
   15f24:	add	r1, pc, r1
   15f28:	bl	2105c <flatcc_builder_check_required@@Base>
   15f2c:	cmp	r0, #0
   15f30:	beq	167d8 <test_sort_find@@Base+0xad0>
   15f34:	mov	r0, r4
   15f38:	bl	210f8 <flatcc_builder_end_table@@Base>
   15f3c:	cmp	r0, #0
   15f40:	beq	15f50 <test_sort_find@@Base+0x248>
   15f44:	mov	r1, r0
   15f48:	mov	r0, r4
   15f4c:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15f50:	mov	r0, r4
   15f54:	mov	r1, #36	; 0x24
   15f58:	bl	206c8 <flatcc_builder_start_table@@Base>
   15f5c:	ldr	r1, [pc, #2376]	; 168ac <test_sort_find@@Base+0xba4>
   15f60:	mov	r0, r4
   15f64:	add	r1, pc, r1
   15f68:	bl	22950 <flatcc_builder_create_string_str@@Base>
   15f6c:	cmp	r0, #0
   15f70:	beq	15f8c <test_sort_find@@Base+0x284>
   15f74:	mov	r5, r0
   15f78:	mov	r0, r4
   15f7c:	mov	r1, #3
   15f80:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15f84:	cmp	r0, #0
   15f88:	strne	r5, [r0]
   15f8c:	ldr	r1, [pc, #2332]	; 168b0 <test_sort_find@@Base+0xba8>
   15f90:	mov	r0, r4
   15f94:	mov	r2, #1
   15f98:	add	r1, pc, r1
   15f9c:	bl	2105c <flatcc_builder_check_required@@Base>
   15fa0:	cmp	r0, #0
   15fa4:	beq	167d8 <test_sort_find@@Base+0xad0>
   15fa8:	mov	r0, r4
   15fac:	bl	210f8 <flatcc_builder_end_table@@Base>
   15fb0:	cmp	r0, #0
   15fb4:	beq	15fc4 <test_sort_find@@Base+0x2bc>
   15fb8:	mov	r1, r0
   15fbc:	mov	r0, r4
   15fc0:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   15fc4:	mov	r0, r4
   15fc8:	bl	20430 <flatcc_builder_end_offset_vector@@Base>
   15fcc:	cmp	r0, #0
   15fd0:	beq	15fec <test_sort_find@@Base+0x2e4>
   15fd4:	mov	r5, r0
   15fd8:	mov	r0, r4
   15fdc:	mov	r1, #11
   15fe0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   15fe4:	cmp	r0, #0
   15fe8:	strne	r5, [r0]
   15fec:	ldr	r1, [pc, #2240]	; 168b4 <test_sort_find@@Base+0xbac>
   15ff0:	mov	r0, r4
   15ff4:	mov	r2, #1
   15ff8:	add	r1, pc, r1
   15ffc:	bl	2105c <flatcc_builder_check_required@@Base>
   16000:	cmp	r0, #0
   16004:	beq	167d8 <test_sort_find@@Base+0xad0>
   16008:	mov	r0, r4
   1600c:	bl	210f8 <flatcc_builder_end_table@@Base>
   16010:	mov	r1, r0
   16014:	mov	r0, r4
   16018:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1601c:	add	r1, sp, #16
   16020:	mov	r0, r4
   16024:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   16028:	ldr	r9, [pc, #2184]	; 168b8 <test_sort_find@@Base+0xbb0>
   1602c:	mov	r4, r0
   16030:	mov	r1, r4
   16034:	ldr	r9, [pc, r9]
   16038:	ldr	r2, [sp, #16]
   1603c:	ldr	r3, [r9]
   16040:	ldr	r0, [pc, #2164]	; 168bc <test_sort_find@@Base+0xbb4>
   16044:	add	r0, pc, r0
   16048:	bl	1361c <test_type_aliases@@Base+0x554>
   1604c:	cmp	r4, #0
   16050:	beq	167f8 <test_sort_find@@Base+0xaf0>
   16054:	ldr	r0, [r4, #4]
   16058:	movw	r1, #20301	; 0x4f4d
   1605c:	movt	r1, #21326	; 0x534e
   16060:	cmp	r0, r1
   16064:	bne	167f8 <test_sort_find@@Base+0xaf0>
   16068:	ldr	r1, [r4]
   1606c:	str	r4, [sp, #12]
   16070:	ldr	r2, [r4, r1]!
   16074:	str	r1, [sp, #8]
   16078:	mov	r1, r4
   1607c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16080:	cmp	r2, #27
   16084:	bls	16818 <test_sort_find@@Base+0xb10>
   16088:	ldrh	r1, [r1, #26]
   1608c:	cmp	r1, #0
   16090:	beq	16818 <test_sort_find@@Base+0xb10>
   16094:	str	r1, [sp, #4]
   16098:	ldr	r1, [r4, r1]!
   1609c:	ldr	sl, [r4, r1]!
   160a0:	str	r1, [sp]
   160a4:	add	r5, r4, #4
   160a8:	cmp	sl, #0
   160ac:	beq	1614c <test_sort_find@@Base+0x444>
   160b0:	lsr	r7, sl, #1
   160b4:	sub	r6, sl, #1
   160b8:	mov	r0, r5
   160bc:	mov	r1, r7
   160c0:	mov	r2, r6
   160c4:	bl	1def8 <main@@Base+0xcec>
   160c8:	sub	r7, r7, #1
   160cc:	cmn	r7, #1
   160d0:	bne	160b8 <test_sort_find@@Base+0x3b0>
   160d4:	cmp	r6, #0
   160d8:	beq	1614c <test_sort_find@@Base+0x444>
   160dc:	mvn	r0, #3
   160e0:	ldr	r1, [sp]
   160e4:	sub	r6, sl, #2
   160e8:	add	r7, r0, sl, lsl #2
   160ec:	mov	r0, #4
   160f0:	sub	r8, r0, sl, lsl #2
   160f4:	ldr	r0, [sp, #8]
   160f8:	add	r0, r1, r0
   160fc:	ldr	r1, [sp, #4]
   16100:	add	r0, r0, sl, lsl #2
   16104:	add	r0, r0, r1
   16108:	ldr	r1, [sp, #12]
   1610c:	add	r4, r1, r0
   16110:	ldr	r0, [r4]
   16114:	ldr	r1, [r5]
   16118:	mov	r2, r6
   1611c:	add	r0, r7, r0
   16120:	str	r0, [r5]
   16124:	add	r0, r8, r1
   16128:	mov	r1, #0
   1612c:	str	r0, [r4], #-4
   16130:	mov	r0, r5
   16134:	bl	1def8 <main@@Base+0xcec>
   16138:	sub	r6, r6, #1
   1613c:	sub	r7, r7, #4
   16140:	add	r8, r8, #4
   16144:	cmn	r6, #1
   16148:	bne	16110 <test_sort_find@@Base+0x408>
   1614c:	ldr	r3, [r9]
   16150:	ldr	r2, [sp, #16]
   16154:	ldr	r0, [pc, #1892]	; 168c0 <test_sort_find@@Base+0xbb8>
   16158:	ldr	r4, [sp, #12]
   1615c:	add	r0, pc, r0
   16160:	mov	r1, r4
   16164:	bl	1361c <test_type_aliases@@Base+0x554>
   16168:	ldr	r0, [r5, #-4]
   1616c:	cmp	r0, #5
   16170:	bne	161c8 <test_sort_find@@Base+0x4c0>
   16174:	ldr	r1, [r5]
   16178:	mov	r0, r5
   1617c:	ldr	r2, [r0, r1]!
   16180:	mov	r1, r0
   16184:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16188:	cmp	r2, #12
   1618c:	bcc	16838 <test_sort_find@@Base+0xb30>
   16190:	ldrh	r1, [r1, #10]
   16194:	cmp	r1, #0
   16198:	beq	16838 <test_sort_find@@Base+0xb30>
   1619c:	ldr	r1, [r0, r1]!
   161a0:	add	r0, r0, r1
   161a4:	ldr	r1, [pc, #1832]	; 168d4 <test_sort_find@@Base+0xbcc>
   161a8:	add	r0, r0, #4
   161ac:	add	r1, pc, r1
   161b0:	bl	12e08 <strcmp@plt>
   161b4:	cmp	r0, #0
   161b8:	beq	161ec <test_sort_find@@Base+0x4e4>
   161bc:	ldr	r0, [pc, #1812]	; 168d8 <test_sort_find@@Base+0xbd0>
   161c0:	add	r0, pc, r0
   161c4:	b	161d0 <test_sort_find@@Base+0x4c8>
   161c8:	ldr	r0, [pc, #1780]	; 168c4 <test_sort_find@@Base+0xbbc>
   161cc:	add	r0, pc, r0
   161d0:	bl	12e68 <puts@plt>
   161d4:	mvn	r6, #0
   161d8:	mov	r0, r4
   161dc:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   161e0:	mov	r0, r6
   161e4:	sub	sp, fp, #28
   161e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161ec:	mov	r6, r5
   161f0:	ldr	r0, [r6, #4]!
   161f4:	ldr	r1, [r6, r0]!
   161f8:	mov	r0, r6
   161fc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   16200:	cmp	r1, #12
   16204:	bcc	16838 <test_sort_find@@Base+0xb30>
   16208:	ldrh	r0, [r0, #10]
   1620c:	cmp	r0, #0
   16210:	beq	16838 <test_sort_find@@Base+0xb30>
   16214:	mov	r1, r6
   16218:	ldr	r0, [r1, r0]!
   1621c:	add	r0, r1, r0
   16220:	ldr	r1, [pc, #1716]	; 168dc <test_sort_find@@Base+0xbd4>
   16224:	add	r0, r0, #4
   16228:	add	r1, pc, r1
   1622c:	bl	12e08 <strcmp@plt>
   16230:	cmp	r0, #0
   16234:	beq	16244 <test_sort_find@@Base+0x53c>
   16238:	ldr	r0, [pc, #1696]	; 168e0 <test_sort_find@@Base+0xbd8>
   1623c:	add	r0, pc, r0
   16240:	b	161d0 <test_sort_find@@Base+0x4c8>
   16244:	mov	r7, r5
   16248:	ldr	r0, [r7, #8]!
   1624c:	ldr	r1, [r7, r0]!
   16250:	mov	r0, r7
   16254:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   16258:	cmp	r1, #12
   1625c:	bcc	16838 <test_sort_find@@Base+0xb30>
   16260:	ldrh	r0, [r0, #10]
   16264:	cmp	r0, #0
   16268:	beq	16838 <test_sort_find@@Base+0xb30>
   1626c:	mov	r1, r7
   16270:	ldr	r0, [r1, r0]!
   16274:	add	r0, r1, r0
   16278:	ldr	r1, [pc, #1636]	; 168e4 <test_sort_find@@Base+0xbdc>
   1627c:	add	r0, r0, #4
   16280:	add	r1, pc, r1
   16284:	bl	12e08 <strcmp@plt>
   16288:	cmp	r0, #0
   1628c:	beq	1629c <test_sort_find@@Base+0x594>
   16290:	ldr	r0, [pc, #1616]	; 168e8 <test_sort_find@@Base+0xbe0>
   16294:	add	r0, pc, r0
   16298:	b	161d0 <test_sort_find@@Base+0x4c8>
   1629c:	mov	r0, r5
   162a0:	ldr	r1, [r0, #12]!
   162a4:	ldr	r2, [r0, r1]!
   162a8:	mov	r1, r0
   162ac:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   162b0:	cmp	r2, #12
   162b4:	bcc	16838 <test_sort_find@@Base+0xb30>
   162b8:	ldrh	r1, [r1, #10]
   162bc:	cmp	r1, #0
   162c0:	beq	16838 <test_sort_find@@Base+0xb30>
   162c4:	ldr	r1, [r0, r1]!
   162c8:	add	r0, r0, r1
   162cc:	ldr	r1, [pc, #1560]	; 168ec <test_sort_find@@Base+0xbe4>
   162d0:	add	r0, r0, #4
   162d4:	add	r1, pc, r1
   162d8:	bl	12e08 <strcmp@plt>
   162dc:	cmp	r0, #0
   162e0:	beq	162f0 <test_sort_find@@Base+0x5e8>
   162e4:	ldr	r0, [pc, #1540]	; 168f0 <test_sort_find@@Base+0xbe8>
   162e8:	add	r0, pc, r0
   162ec:	b	161d0 <test_sort_find@@Base+0x4c8>
   162f0:	mov	r0, r5
   162f4:	ldr	r1, [r0, #16]!
   162f8:	ldr	r2, [r0, r1]!
   162fc:	mov	r1, r0
   16300:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16304:	cmp	r2, #12
   16308:	bcc	16838 <test_sort_find@@Base+0xb30>
   1630c:	ldrh	r1, [r1, #10]
   16310:	cmp	r1, #0
   16314:	beq	16838 <test_sort_find@@Base+0xb30>
   16318:	ldr	r1, [r0, r1]!
   1631c:	add	r0, r0, r1
   16320:	ldr	r1, [pc, #1484]	; 168f4 <test_sort_find@@Base+0xbec>
   16324:	add	r0, r0, #4
   16328:	add	r1, pc, r1
   1632c:	bl	12e08 <strcmp@plt>
   16330:	cmp	r0, #0
   16334:	beq	16344 <test_sort_find@@Base+0x63c>
   16338:	ldr	r0, [pc, #1464]	; 168f8 <test_sort_find@@Base+0xbf0>
   1633c:	add	r0, pc, r0
   16340:	b	161d0 <test_sort_find@@Base+0x4c8>
   16344:	cmp	r6, r7
   16348:	beq	164c4 <test_sort_find@@Base+0x7bc>
   1634c:	ldr	r1, [pc, #1452]	; 16900 <test_sort_find@@Base+0xbf8>
   16350:	mov	r0, r5
   16354:	add	r1, pc, r1
   16358:	bl	16980 <test_sort_find@@Base+0xc78>
   1635c:	cmp	r0, #3
   16360:	bne	164d0 <test_sort_find@@Base+0x7c8>
   16364:	ldr	r8, [r5, #-4]
   16368:	cmp	r8, #0
   1636c:	beq	164b8 <test_sort_find@@Base+0x7b0>
   16370:	mov	r7, #0
   16374:	subs	r9, r8, #1
   16378:	beq	1642c <test_sort_find@@Base+0x724>
   1637c:	ldr	sl, [pc, #1412]	; 16908 <test_sort_find@@Base+0xc00>
   16380:	add	sl, pc, sl
   16384:	sub	r0, r9, r7
   16388:	add	r6, r7, r0, lsr #1
   1638c:	cmp	r8, r6
   16390:	bls	16858 <test_sort_find@@Base+0xb50>
   16394:	mov	r0, r5
   16398:	ldr	r1, [r0, r6, lsl #2]!
   1639c:	adds	r0, r0, r1
   163a0:	beq	16878 <test_sort_find@@Base+0xb70>
   163a4:	ldr	r2, [r0]
   163a8:	mov	r1, r0
   163ac:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   163b0:	cmp	r2, #12
   163b4:	bcc	16838 <test_sort_find@@Base+0xb30>
   163b8:	ldrh	r1, [r1, #10]
   163bc:	cmp	r1, #0
   163c0:	beq	16838 <test_sort_find@@Base+0xb30>
   163c4:	ldr	r1, [r0, r1]!
   163c8:	ldr	r4, [r0, r1]!
   163cc:	mov	r1, sl
   163d0:	cmp	r4, #5
   163d4:	mov	r2, r4
   163d8:	add	r0, r0, #4
   163dc:	movcs	r2, #5
   163e0:	bl	12eec <strncmp@plt>
   163e4:	cmp	r0, #1
   163e8:	mov	r1, #0
   163ec:	mov	r2, #0
   163f0:	movwlt	r1, #1
   163f4:	cmp	r0, #0
   163f8:	movwne	r0, #1
   163fc:	cmp	r4, #5
   16400:	ldr	r4, [sp, #12]
   16404:	movwcc	r2, #1
   16408:	orr	r0, r2, r0
   1640c:	ands	r0, r0, r1
   16410:	moveq	r9, r6
   16414:	addne	r7, r6, #1
   16418:	cmp	r9, r7
   1641c:	bhi	16384 <test_sort_find@@Base+0x67c>
   16420:	bne	164b8 <test_sort_find@@Base+0x7b0>
   16424:	cmp	r8, r7
   16428:	bls	16858 <test_sort_find@@Base+0xb50>
   1642c:	mov	r0, r5
   16430:	ldr	r1, [r0, r7, lsl #2]!
   16434:	adds	r0, r0, r1
   16438:	beq	16878 <test_sort_find@@Base+0xb70>
   1643c:	ldr	r2, [r0]
   16440:	mov	r1, r0
   16444:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16448:	cmp	r2, #12
   1644c:	bcc	16838 <test_sort_find@@Base+0xb30>
   16450:	ldrh	r1, [r1, #10]
   16454:	cmp	r1, #0
   16458:	beq	16838 <test_sort_find@@Base+0xb30>
   1645c:	ldr	r1, [r0, r1]!
   16460:	ldr	r4, [r0, r1]!
   16464:	ldr	r1, [pc, #1188]	; 16910 <test_sort_find@@Base+0xc08>
   16468:	cmp	r4, #5
   1646c:	mov	r2, r4
   16470:	add	r0, r0, #4
   16474:	add	r1, pc, r1
   16478:	movcs	r2, #5
   1647c:	bl	12eec <strncmp@plt>
   16480:	cmp	r0, #0
   16484:	mov	r2, r0
   16488:	mov	r1, #0
   1648c:	mvneq	r2, #0
   16490:	cmp	r4, #5
   16494:	movwhi	r1, #1
   16498:	cmp	r0, #0
   1649c:	movne	r1, r2
   164a0:	cmp	r4, #5
   164a4:	ldr	r4, [sp, #12]
   164a8:	movcc	r1, r2
   164ac:	cmp	r7, #3
   164b0:	cmpeq	r1, #0
   164b4:	beq	164dc <test_sort_find@@Base+0x7d4>
   164b8:	ldr	r0, [pc, #1108]	; 16914 <test_sort_find@@Base+0xc0c>
   164bc:	add	r0, pc, r0
   164c0:	b	161d0 <test_sort_find@@Base+0x4c8>
   164c4:	ldr	r0, [pc, #1072]	; 168fc <test_sort_find@@Base+0xbf4>
   164c8:	add	r0, pc, r0
   164cc:	b	161d0 <test_sort_find@@Base+0x4c8>
   164d0:	ldr	r0, [pc, #1068]	; 16904 <test_sort_find@@Base+0xbfc>
   164d4:	add	r0, pc, r0
   164d8:	b	161d0 <test_sort_find@@Base+0x4c8>
   164dc:	ldr	r1, [pc, #1076]	; 16918 <test_sort_find@@Base+0xc10>
   164e0:	mov	r0, r5
   164e4:	add	r1, pc, r1
   164e8:	bl	16980 <test_sort_find@@Base+0xc78>
   164ec:	cmp	r0, #3
   164f0:	bne	16654 <test_sort_find@@Base+0x94c>
   164f4:	ldr	r8, [r5, #-4]
   164f8:	cmp	r8, #0
   164fc:	beq	16648 <test_sort_find@@Base+0x940>
   16500:	mov	r7, #0
   16504:	subs	r9, r8, #1
   16508:	beq	165bc <test_sort_find@@Base+0x8b4>
   1650c:	ldr	sl, [pc, #1036]	; 16920 <test_sort_find@@Base+0xc18>
   16510:	add	sl, pc, sl
   16514:	sub	r0, r9, r7
   16518:	add	r6, r7, r0, lsr #1
   1651c:	cmp	r8, r6
   16520:	bls	16858 <test_sort_find@@Base+0xb50>
   16524:	mov	r0, r5
   16528:	ldr	r1, [r0, r6, lsl #2]!
   1652c:	adds	r0, r0, r1
   16530:	beq	16878 <test_sort_find@@Base+0xb70>
   16534:	ldr	r2, [r0]
   16538:	mov	r1, r0
   1653c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16540:	cmp	r2, #12
   16544:	bcc	16838 <test_sort_find@@Base+0xb30>
   16548:	ldrh	r1, [r1, #10]
   1654c:	cmp	r1, #0
   16550:	beq	16838 <test_sort_find@@Base+0xb30>
   16554:	ldr	r1, [r0, r1]!
   16558:	ldr	r4, [r0, r1]!
   1655c:	mov	r1, sl
   16560:	cmp	r4, #5
   16564:	mov	r2, r4
   16568:	add	r0, r0, #4
   1656c:	movcs	r2, #5
   16570:	bl	12eec <strncmp@plt>
   16574:	cmp	r0, #1
   16578:	mov	r1, #0
   1657c:	mov	r2, #0
   16580:	movwlt	r1, #1
   16584:	cmp	r0, #0
   16588:	movwne	r0, #1
   1658c:	cmp	r4, #5
   16590:	movwcc	r2, #1
   16594:	orr	r0, r2, r0
   16598:	ands	r0, r0, r1
   1659c:	moveq	r9, r6
   165a0:	addne	r7, r6, #1
   165a4:	cmp	r9, r7
   165a8:	bhi	16514 <test_sort_find@@Base+0x80c>
   165ac:	ldr	r4, [sp, #12]
   165b0:	bne	16648 <test_sort_find@@Base+0x940>
   165b4:	cmp	r8, r7
   165b8:	bls	16858 <test_sort_find@@Base+0xb50>
   165bc:	mov	r0, r5
   165c0:	ldr	r1, [r0, r7, lsl #2]!
   165c4:	adds	r0, r0, r1
   165c8:	beq	16878 <test_sort_find@@Base+0xb70>
   165cc:	ldr	r2, [r0]
   165d0:	mov	r1, r0
   165d4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   165d8:	cmp	r2, #12
   165dc:	bcc	16838 <test_sort_find@@Base+0xb30>
   165e0:	ldrh	r1, [r1, #10]
   165e4:	cmp	r1, #0
   165e8:	beq	16838 <test_sort_find@@Base+0xb30>
   165ec:	ldr	r1, [r0, r1]!
   165f0:	ldr	r4, [r0, r1]!
   165f4:	ldr	r1, [pc, #808]	; 16924 <test_sort_find@@Base+0xc1c>
   165f8:	cmp	r4, #5
   165fc:	mov	r2, r4
   16600:	add	r0, r0, #4
   16604:	add	r1, pc, r1
   16608:	movcs	r2, #5
   1660c:	bl	12eec <strncmp@plt>
   16610:	cmp	r0, #0
   16614:	mov	r2, r0
   16618:	mov	r1, #0
   1661c:	mvneq	r2, #0
   16620:	cmp	r4, #5
   16624:	movwhi	r1, #1
   16628:	cmp	r0, #0
   1662c:	movne	r1, r2
   16630:	cmp	r4, #5
   16634:	ldr	r4, [sp, #12]
   16638:	movcc	r1, r2
   1663c:	cmp	r7, #3
   16640:	cmpeq	r1, #0
   16644:	beq	16660 <test_sort_find@@Base+0x958>
   16648:	ldr	r0, [pc, #728]	; 16928 <test_sort_find@@Base+0xc20>
   1664c:	add	r0, pc, r0
   16650:	b	161d0 <test_sort_find@@Base+0x4c8>
   16654:	ldr	r0, [pc, #704]	; 1691c <test_sort_find@@Base+0xc14>
   16658:	add	r0, pc, r0
   1665c:	b	161d0 <test_sort_find@@Base+0x4c8>
   16660:	ldr	r1, [pc, #708]	; 1692c <test_sort_find@@Base+0xc24>
   16664:	mov	r0, r5
   16668:	add	r1, pc, r1
   1666c:	bl	16980 <test_sort_find@@Base+0xc78>
   16670:	cmn	r0, #1
   16674:	beq	16684 <test_sort_find@@Base+0x97c>
   16678:	ldr	r0, [pc, #688]	; 16930 <test_sort_find@@Base+0xc28>
   1667c:	add	r0, pc, r0
   16680:	b	166a4 <test_sort_find@@Base+0x99c>
   16684:	ldr	r1, [pc, #680]	; 16934 <test_sort_find@@Base+0xc2c>
   16688:	mov	r0, r5
   1668c:	add	r1, pc, r1
   16690:	bl	16980 <test_sort_find@@Base+0xc78>
   16694:	cmp	r0, #0
   16698:	beq	166b0 <test_sort_find@@Base+0x9a8>
   1669c:	ldr	r0, [pc, #660]	; 16938 <test_sort_find@@Base+0xc30>
   166a0:	add	r0, pc, r0
   166a4:	bl	12e68 <puts@plt>
   166a8:	ldr	r4, [sp, #12]
   166ac:	b	161d4 <test_sort_find@@Base+0x4cc>
   166b0:	ldr	r1, [pc, #644]	; 1693c <test_sort_find@@Base+0xc34>
   166b4:	mov	r0, r5
   166b8:	add	r1, pc, r1
   166bc:	bl	16980 <test_sort_find@@Base+0xc78>
   166c0:	cmp	r0, #1
   166c4:	bne	1679c <test_sort_find@@Base+0xa94>
   166c8:	ldr	r1, [pc, #632]	; 16948 <test_sort_find@@Base+0xc40>
   166cc:	mov	r0, r5
   166d0:	add	r1, pc, r1
   166d4:	bl	16980 <test_sort_find@@Base+0xc78>
   166d8:	cmp	r0, #4
   166dc:	bne	167ac <test_sort_find@@Base+0xaa4>
   166e0:	ldr	sl, [r5, #-4]
   166e4:	mov	r6, #0
   166e8:	cmp	sl, #0
   166ec:	beq	167d0 <test_sort_find@@Base+0xac8>
   166f0:	lsr	r7, sl, #1
   166f4:	sub	r4, sl, #1
   166f8:	mov	r0, r5
   166fc:	mov	r1, r7
   16700:	mov	r2, r4
   16704:	bl	1def8 <main@@Base+0xcec>
   16708:	sub	r7, r7, #1
   1670c:	cmn	r7, #1
   16710:	bne	166f8 <test_sort_find@@Base+0x9f0>
   16714:	cmp	r4, #0
   16718:	ldr	r4, [sp, #12]
   1671c:	beq	161d8 <test_sort_find@@Base+0x4d0>
   16720:	mvn	r0, #3
   16724:	ldr	r1, [sp]
   16728:	sub	r7, sl, #2
   1672c:	mov	r6, #0
   16730:	add	r2, r0, sl, lsl #2
   16734:	mov	r0, #4
   16738:	sub	r9, r0, sl, lsl #2
   1673c:	ldr	r0, [sp, #8]
   16740:	add	r0, r1, r0
   16744:	ldr	r1, [sp, #4]
   16748:	add	r0, r0, sl, lsl #2
   1674c:	add	r0, r0, r1
   16750:	add	r8, r4, r0
   16754:	ldr	r0, [r8]
   16758:	ldr	r1, [r5]
   1675c:	mov	sl, r2
   16760:	add	r0, r2, r0
   16764:	mov	r2, r7
   16768:	str	r0, [r5]
   1676c:	add	r0, r9, r1
   16770:	mov	r1, #0
   16774:	str	r0, [r8], #-4
   16778:	mov	r0, r5
   1677c:	bl	1def8 <main@@Base+0xcec>
   16780:	sub	sl, sl, #4
   16784:	sub	r7, r7, #1
   16788:	add	r9, r9, #4
   1678c:	mov	r2, sl
   16790:	cmn	r7, #1
   16794:	bne	16754 <test_sort_find@@Base+0xa4c>
   16798:	b	161d8 <test_sort_find@@Base+0x4d0>
   1679c:	mov	r6, r0
   167a0:	ldr	r0, [pc, #408]	; 16940 <test_sort_find@@Base+0xc38>
   167a4:	add	r0, pc, r0
   167a8:	b	167b8 <test_sort_find@@Base+0xab0>
   167ac:	mov	r6, r0
   167b0:	ldr	r0, [pc, #404]	; 1694c <test_sort_find@@Base+0xc44>
   167b4:	add	r0, pc, r0
   167b8:	bl	12e68 <puts@plt>
   167bc:	ldr	r0, [pc, #384]	; 16944 <test_sort_find@@Base+0xc3c>
   167c0:	mov	r1, r6
   167c4:	add	r0, pc, r0
   167c8:	bl	12e14 <printf@plt>
   167cc:	b	166a8 <test_sort_find@@Base+0x9a0>
   167d0:	ldr	r4, [sp, #12]
   167d4:	b	161d8 <test_sort_find@@Base+0x4d0>
   167d8:	ldr	r0, [pc, #368]	; 16950 <test_sort_find@@Base+0xc48>
   167dc:	ldr	r1, [pc, #368]	; 16954 <test_sort_find@@Base+0xc4c>
   167e0:	ldr	r3, [pc, #368]	; 16958 <test_sort_find@@Base+0xc50>
   167e4:	mov	r2, #235	; 0xeb
   167e8:	add	r0, pc, r0
   167ec:	add	r1, pc, r1
   167f0:	add	r3, pc, r3
   167f4:	bl	12f04 <__assert_fail@plt>
   167f8:	ldr	r0, [pc, #348]	; 1695c <test_sort_find@@Base+0xc54>
   167fc:	ldr	r1, [pc, #348]	; 16960 <test_sort_find@@Base+0xc58>
   16800:	ldr	r3, [pc, #348]	; 16964 <test_sort_find@@Base+0xc5c>
   16804:	movw	r2, #711	; 0x2c7
   16808:	add	r0, pc, r0
   1680c:	add	r1, pc, r1
   16810:	add	r3, pc, r3
   16814:	bl	12f04 <__assert_fail@plt>
   16818:	ldr	r0, [pc, #328]	; 16968 <test_sort_find@@Base+0xc60>
   1681c:	ldr	r1, [pc, #328]	; 1696c <test_sort_find@@Base+0xc64>
   16820:	ldr	r3, [pc, #328]	; 16970 <test_sort_find@@Base+0xc68>
   16824:	movw	r2, #1147	; 0x47b
   16828:	add	r0, pc, r0
   1682c:	add	r1, pc, r1
   16830:	add	r3, pc, r3
   16834:	bl	12f04 <__assert_fail@plt>
   16838:	ldr	r0, [pc, #136]	; 168c8 <test_sort_find@@Base+0xbc0>
   1683c:	add	r0, pc, r0
   16840:	ldr	r1, [pc, #132]	; 168cc <test_sort_find@@Base+0xbc4>
   16844:	ldr	r3, [pc, #132]	; 168d0 <test_sort_find@@Base+0xbc8>
   16848:	movw	r2, #699	; 0x2bb
   1684c:	add	r1, pc, r1
   16850:	add	r3, pc, r3
   16854:	bl	12f04 <__assert_fail@plt>
   16858:	ldr	r0, [pc, #276]	; 16974 <test_sort_find@@Base+0xc6c>
   1685c:	ldr	r1, [pc, #276]	; 16978 <test_sort_find@@Base+0xc70>
   16860:	ldr	r3, [pc, #276]	; 1697c <test_sort_find@@Base+0xc74>
   16864:	movw	r2, #693	; 0x2b5
   16868:	add	r0, pc, r0
   1686c:	add	r1, pc, r1
   16870:	add	r3, pc, r3
   16874:	bl	12f04 <__assert_fail@plt>
   16878:	ldr	r0, [pc, #140]	; 1690c <test_sort_find@@Base+0xc04>
   1687c:	add	r0, pc, r0
   16880:	b	16840 <test_sort_find@@Base+0xb38>
   16884:	andeq	pc, r0, r0, lsl #1
   16888:	andeq	pc, r0, r0, lsr #1
   1688c:	andeq	pc, r0, ip, ror r2	; <UNPREDICTABLE>
   16890:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16894:	andeq	pc, r0, r2, lsr r2	; <UNPREDICTABLE>
   16898:	andeq	r0, r1, r0, lsr #30
   1689c:	andeq	pc, r0, r6, ror #3
   168a0:	andeq	r0, r1, ip, lsr #29
   168a4:	andeq	pc, r0, r7, ror #10
   168a8:	andeq	r0, r1, r8, lsr lr
   168ac:	strdeq	pc, [r0], -lr
   168b0:	andeq	r0, r1, r4, asr #27
   168b4:	andeq	r0, r1, r4, ror #26
   168b8:	andeq	r5, r2, ip, lsr #32
   168bc:	andeq	pc, r0, r9, lsl r4	; <UNPREDICTABLE>
   168c0:	andeq	pc, r0, r3, lsl #6
   168c4:	muleq	r1, ip, r4
   168c8:	andeq	pc, r0, r0, lsl #16
   168cc:	andeq	pc, r0, r1, lsr #5
   168d0:	muleq	r0, fp, r7
   168d4:	andeq	pc, r0, fp, lsr #5
   168d8:	andeq	r1, r1, r8, lsl #9
   168dc:	andeq	lr, r0, sl, lsr lr
   168e0:	andeq	r1, r1, ip, ror #7
   168e4:	andeq	lr, r0, r2, ror #27
   168e8:	andeq	r1, r1, r4, ror r3
   168ec:	andeq	lr, r0, r6, ror #26
   168f0:	andeq	r1, r1, r0, lsl #6
   168f4:	andeq	lr, r0, r8, ror #25
   168f8:	andeq	r1, r1, ip, lsl #5
   168fc:	strheq	r1, [r1], -r0
   16900:	andeq	lr, r0, r6, ror #25
   16904:	andeq	r1, r1, r4, ror r0
   16908:	andeq	pc, r0, r5, lsr #2
   1690c:	andeq	pc, r0, fp, asr #4
   16910:	andeq	pc, r0, r1, lsr r0	; <UNPREDICTABLE>
   16914:	andeq	r1, r1, ip, asr #32
   16918:	andeq	lr, r0, r6, asr fp
   1691c:	muleq	r1, r0, lr
   16920:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   16924:	andeq	lr, r0, r8, lsr #29
   16928:	andeq	r0, r1, ip, ror #28
   1692c:	andeq	lr, r0, fp, asr #28
   16930:	andeq	r1, r1, ip, ror #10
   16934:	andeq	lr, r0, fp, asr #27
   16938:	strdeq	r0, [r1], -r3
   1693c:	andeq	lr, r0, sl, lsr #19
   16940:	andeq	r1, r1, r4, lsl #8
   16944:	strdeq	lr, [r0], -r6
   16948:	andeq	lr, r0, r0, asr #18
   1694c:	andeq	r1, r1, r4, lsl r4
   16950:	strdeq	pc, [r0], -r0
   16954:			; <UNDEFINED> instruction: 0x0000f4b3
   16958:	andeq	pc, r0, sl, lsl #13
   1695c:			; <UNDEFINED> instruction: 0x0000f2bf
   16960:	andeq	pc, r0, r1, ror #5
   16964:	muleq	r0, lr, r9
   16968:	andeq	lr, r0, sp, asr #24
   1696c:	andeq	lr, r0, ip, ror #14
   16970:	andeq	lr, r0, lr, asr #24
   16974:	andeq	pc, r0, lr, asr #16
   16978:	andeq	pc, r0, r1, lsl #5
   1697c:	andeq	pc, r0, r4, lsr #19
   16980:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16984:	add	fp, sp, #24
   16988:	mvn	r4, #0
   1698c:	cmp	r0, #0
   16990:	beq	16a70 <test_sort_find@@Base+0xd68>
   16994:	ldr	r7, [r0, #-4]
   16998:	mov	r9, r0
   1699c:	cmp	r7, #0
   169a0:	beq	16a70 <test_sort_find@@Base+0xd68>
   169a4:	mov	r8, r1
   169a8:	mov	r4, #0
   169ac:	subs	r5, r7, #1
   169b0:	beq	16a28 <test_sort_find@@Base+0xd20>
   169b4:	sub	r0, r5, r4
   169b8:	add	r6, r4, r0, lsr #1
   169bc:	cmp	r7, r6
   169c0:	bls	16a90 <test_sort_find@@Base+0xd88>
   169c4:	mov	r0, r9
   169c8:	ldr	r1, [r0, r6, lsl #2]!
   169cc:	adds	r0, r0, r1
   169d0:	beq	16ab0 <test_sort_find@@Base+0xda8>
   169d4:	ldr	r2, [r0]
   169d8:	mov	r1, r0
   169dc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   169e0:	cmp	r2, #12
   169e4:	bcc	16a84 <test_sort_find@@Base+0xd7c>
   169e8:	ldrh	r1, [r1, #10]
   169ec:	cmp	r1, #0
   169f0:	beq	16a84 <test_sort_find@@Base+0xd7c>
   169f4:	ldr	r1, [r0, r1]!
   169f8:	add	r0, r0, r1
   169fc:	mov	r1, r8
   16a00:	add	r0, r0, #4
   16a04:	bl	12e08 <strcmp@plt>
   16a08:	cmp	r0, #0
   16a0c:	movge	r5, r6
   16a10:	addlt	r4, r6, #1
   16a14:	cmp	r5, r4
   16a18:	bhi	169b4 <test_sort_find@@Base+0xcac>
   16a1c:	bne	16a78 <test_sort_find@@Base+0xd70>
   16a20:	cmp	r7, r4
   16a24:	bls	16a90 <test_sort_find@@Base+0xd88>
   16a28:	ldr	r0, [r9, r4, lsl #2]!
   16a2c:	adds	r0, r9, r0
   16a30:	beq	16ab0 <test_sort_find@@Base+0xda8>
   16a34:	ldr	r2, [r0]
   16a38:	mov	r1, r0
   16a3c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16a40:	cmp	r2, #12
   16a44:	bcc	16a84 <test_sort_find@@Base+0xd7c>
   16a48:	ldrh	r1, [r1, #10]
   16a4c:	cmp	r1, #0
   16a50:	beq	16a84 <test_sort_find@@Base+0xd7c>
   16a54:	ldr	r1, [r0, r1]!
   16a58:	add	r0, r0, r1
   16a5c:	mov	r1, r8
   16a60:	add	r0, r0, #4
   16a64:	bl	12e08 <strcmp@plt>
   16a68:	cmp	r0, #0
   16a6c:	mvnne	r4, #0
   16a70:	mov	r0, r4
   16a74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a78:	mvn	r4, #0
   16a7c:	mov	r0, r4
   16a80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a84:	ldr	r0, [pc, #80]	; 16adc <test_sort_find@@Base+0xdd4>
   16a88:	add	r0, pc, r0
   16a8c:	b	16ab8 <test_sort_find@@Base+0xdb0>
   16a90:	ldr	r0, [pc, #72]	; 16ae0 <test_sort_find@@Base+0xdd8>
   16a94:	ldr	r1, [pc, #72]	; 16ae4 <test_sort_find@@Base+0xddc>
   16a98:	ldr	r3, [pc, #72]	; 16ae8 <test_sort_find@@Base+0xde0>
   16a9c:	movw	r2, #693	; 0x2b5
   16aa0:	add	r0, pc, r0
   16aa4:	add	r1, pc, r1
   16aa8:	add	r3, pc, r3
   16aac:	bl	12f04 <__assert_fail@plt>
   16ab0:	ldr	r0, [pc, #24]	; 16ad0 <test_sort_find@@Base+0xdc8>
   16ab4:	add	r0, pc, r0
   16ab8:	ldr	r1, [pc, #20]	; 16ad4 <test_sort_find@@Base+0xdcc>
   16abc:	ldr	r3, [pc, #20]	; 16ad8 <test_sort_find@@Base+0xdd0>
   16ac0:	movw	r2, #699	; 0x2bb
   16ac4:	add	r1, pc, r1
   16ac8:	add	r3, pc, r3
   16acc:	bl	12f04 <__assert_fail@plt>
   16ad0:	andeq	pc, r0, r3, lsl r0	; <UNPREDICTABLE>
   16ad4:	andeq	pc, r0, r9, lsr #32
   16ad8:	andeq	pc, r0, r3, lsr #10
   16adc:			; <UNDEFINED> instruction: 0x0000f5b4
   16ae0:	andeq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
   16ae4:	andeq	pc, r0, r9, asr #32
   16ae8:	andeq	pc, r0, ip, ror #14

00016aec <test_scan@@Base>:
   16aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16af0:	add	fp, sp, #28
   16af4:	sub	sp, sp, #76	; 0x4c
   16af8:	mov	r4, r0
   16afc:	mov	r0, #2
   16b00:	strb	r0, [fp, #-34]	; 0xffffffde
   16b04:	mov	r0, #772	; 0x304
   16b08:	strh	r0, [fp, #-36]	; 0xffffffdc
   16b0c:	movw	r0, #1798	; 0x706
   16b10:	movt	r0, #769	; 0x301
   16b14:	str	r0, [fp, #-40]	; 0xffffffd8
   16b18:	mov	r0, r4
   16b1c:	bl	1e4f0 <flatcc_builder_reset@@Base>
   16b20:	ldr	r1, [pc, #3608]	; 17940 <test_scan@@Base+0xe54>
   16b24:	mov	r0, r4
   16b28:	mov	r2, #0
   16b2c:	mov	r3, #0
   16b30:	add	r1, pc, r1
   16b34:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   16b38:	cmp	r0, #0
   16b3c:	bne	16b4c <test_scan@@Base+0x60>
   16b40:	mov	r0, r4
   16b44:	mov	r1, #36	; 0x24
   16b48:	bl	206c8 <flatcc_builder_start_table@@Base>
   16b4c:	ldr	r1, [pc, #4076]	; 17b40 <test_scan@@Base+0x1054>
   16b50:	mov	r0, r4
   16b54:	add	r1, pc, r1
   16b58:	bl	22950 <flatcc_builder_create_string_str@@Base>
   16b5c:	cmp	r0, #0
   16b60:	beq	16b7c <test_scan@@Base+0x90>
   16b64:	mov	r5, r0
   16b68:	mov	r0, r4
   16b6c:	mov	r1, #3
   16b70:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16b74:	cmp	r0, #0
   16b78:	strne	r5, [r0]
   16b7c:	mvn	r0, #0
   16b80:	mov	r1, #1
   16b84:	mov	r2, #7
   16b88:	mov	r3, #1
   16b8c:	str	r1, [sp]
   16b90:	str	r0, [sp, #4]
   16b94:	sub	r1, fp, #40	; 0x28
   16b98:	mov	r0, r4
   16b9c:	bl	212bc <flatcc_builder_create_vector@@Base>
   16ba0:	cmp	r0, #0
   16ba4:	beq	16bc0 <test_scan@@Base+0xd4>
   16ba8:	mov	r5, r0
   16bac:	mov	r0, r4
   16bb0:	mov	r1, #5
   16bb4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16bb8:	cmp	r0, #0
   16bbc:	strne	r5, [r0]
   16bc0:	mov	r0, r4
   16bc4:	bl	20248 <flatcc_builder_start_offset_vector@@Base>
   16bc8:	mov	r0, r4
   16bcc:	bl	20430 <flatcc_builder_end_offset_vector@@Base>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16bf0 <test_scan@@Base+0x104>
   16bd8:	mov	r5, r0
   16bdc:	mov	r0, r4
   16be0:	mov	r1, #10
   16be4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16be8:	cmp	r0, #0
   16bec:	strne	r5, [r0]
   16bf0:	mov	r0, r4
   16bf4:	bl	20248 <flatcc_builder_start_offset_vector@@Base>
   16bf8:	mov	r0, r4
   16bfc:	mov	r1, #36	; 0x24
   16c00:	bl	206c8 <flatcc_builder_start_table@@Base>
   16c04:	ldr	r1, [pc, #4080]	; 17bfc <test_scan@@Base+0x1110>
   16c08:	mov	r0, r4
   16c0c:	add	r1, pc, r1
   16c10:	bl	22950 <flatcc_builder_create_string_str@@Base>
   16c14:	cmp	r0, #0
   16c18:	beq	16c34 <test_scan@@Base+0x148>
   16c1c:	mov	r5, r0
   16c20:	mov	r0, r4
   16c24:	mov	r1, #3
   16c28:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16c2c:	cmp	r0, #0
   16c30:	strne	r5, [r0]
   16c34:	ldr	r1, [pc, #4056]	; 17c14 <test_scan@@Base+0x1128>
   16c38:	mov	r0, r4
   16c3c:	mov	r2, #1
   16c40:	add	r1, pc, r1
   16c44:	bl	2105c <flatcc_builder_check_required@@Base>
   16c48:	cmp	r0, #0
   16c4c:	beq	17b44 <test_scan@@Base+0x1058>
   16c50:	mov	r0, r4
   16c54:	bl	210f8 <flatcc_builder_end_table@@Base>
   16c58:	cmp	r0, #0
   16c5c:	beq	16c6c <test_scan@@Base+0x180>
   16c60:	mov	r1, r0
   16c64:	mov	r0, r4
   16c68:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   16c6c:	mov	r0, r4
   16c70:	mov	r1, #36	; 0x24
   16c74:	bl	206c8 <flatcc_builder_start_table@@Base>
   16c78:	ldr	r1, [pc, #3992]	; 17c18 <test_scan@@Base+0x112c>
   16c7c:	mov	r0, r4
   16c80:	add	r1, pc, r1
   16c84:	bl	22950 <flatcc_builder_create_string_str@@Base>
   16c88:	cmp	r0, #0
   16c8c:	beq	16ca8 <test_scan@@Base+0x1bc>
   16c90:	mov	r5, r0
   16c94:	mov	r0, r4
   16c98:	mov	r1, #3
   16c9c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16ca0:	cmp	r0, #0
   16ca4:	strne	r5, [r0]
   16ca8:	ldr	r1, [pc, #3948]	; 17c1c <test_scan@@Base+0x1130>
   16cac:	mov	r0, r4
   16cb0:	mov	r2, #1
   16cb4:	add	r1, pc, r1
   16cb8:	bl	2105c <flatcc_builder_check_required@@Base>
   16cbc:	cmp	r0, #0
   16cc0:	beq	17b44 <test_scan@@Base+0x1058>
   16cc4:	mov	r0, r4
   16cc8:	bl	210f8 <flatcc_builder_end_table@@Base>
   16ccc:	cmp	r0, #0
   16cd0:	beq	16ce0 <test_scan@@Base+0x1f4>
   16cd4:	mov	r1, r0
   16cd8:	mov	r0, r4
   16cdc:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   16ce0:	mov	r0, r4
   16ce4:	mov	r1, #36	; 0x24
   16ce8:	bl	206c8 <flatcc_builder_start_table@@Base>
   16cec:	ldr	r1, [pc, #4056]	; 17ccc <test_scan@@Base+0x11e0>
   16cf0:	mov	r0, r4
   16cf4:	add	r1, pc, r1
   16cf8:	bl	22950 <flatcc_builder_create_string_str@@Base>
   16cfc:	cmp	r0, #0
   16d00:	beq	16d1c <test_scan@@Base+0x230>
   16d04:	mov	r5, r0
   16d08:	mov	r0, r4
   16d0c:	mov	r1, #3
   16d10:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16d14:	cmp	r0, #0
   16d18:	strne	r5, [r0]
   16d1c:	ldr	r1, [pc, #4012]	; 17cd0 <test_scan@@Base+0x11e4>
   16d20:	mov	r0, r4
   16d24:	mov	r2, #1
   16d28:	add	r1, pc, r1
   16d2c:	bl	2105c <flatcc_builder_check_required@@Base>
   16d30:	cmp	r0, #0
   16d34:	beq	17b44 <test_scan@@Base+0x1058>
   16d38:	mov	r0, r4
   16d3c:	bl	210f8 <flatcc_builder_end_table@@Base>
   16d40:	cmp	r0, #0
   16d44:	beq	16d54 <test_scan@@Base+0x268>
   16d48:	mov	r1, r0
   16d4c:	mov	r0, r4
   16d50:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   16d54:	mov	r0, r4
   16d58:	mov	r1, #36	; 0x24
   16d5c:	bl	206c8 <flatcc_builder_start_table@@Base>
   16d60:	ldr	r1, [pc, #3948]	; 17cd4 <test_scan@@Base+0x11e8>
   16d64:	mov	r0, r4
   16d68:	add	r1, pc, r1
   16d6c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   16d70:	cmp	r0, #0
   16d74:	beq	16d90 <test_scan@@Base+0x2a4>
   16d78:	mov	r5, r0
   16d7c:	mov	r0, r4
   16d80:	mov	r1, #3
   16d84:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16d88:	cmp	r0, #0
   16d8c:	strne	r5, [r0]
   16d90:	ldr	r1, [pc, #3904]	; 17cd8 <test_scan@@Base+0x11ec>
   16d94:	mov	r0, r4
   16d98:	mov	r2, #1
   16d9c:	add	r1, pc, r1
   16da0:	bl	2105c <flatcc_builder_check_required@@Base>
   16da4:	cmp	r0, #0
   16da8:	beq	17b44 <test_scan@@Base+0x1058>
   16dac:	mov	r0, r4
   16db0:	bl	210f8 <flatcc_builder_end_table@@Base>
   16db4:	cmp	r0, #0
   16db8:	beq	16dc8 <test_scan@@Base+0x2dc>
   16dbc:	mov	r1, r0
   16dc0:	mov	r0, r4
   16dc4:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   16dc8:	mov	r0, r4
   16dcc:	mov	r1, #36	; 0x24
   16dd0:	bl	206c8 <flatcc_builder_start_table@@Base>
   16dd4:	ldr	r1, [pc, #3840]	; 17cdc <test_scan@@Base+0x11f0>
   16dd8:	mov	r0, r4
   16ddc:	add	r1, pc, r1
   16de0:	bl	22950 <flatcc_builder_create_string_str@@Base>
   16de4:	cmp	r0, #0
   16de8:	beq	16e04 <test_scan@@Base+0x318>
   16dec:	mov	r5, r0
   16df0:	mov	r0, r4
   16df4:	mov	r1, #3
   16df8:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16dfc:	cmp	r0, #0
   16e00:	strne	r5, [r0]
   16e04:	ldr	r1, [pc, #3796]	; 17ce0 <test_scan@@Base+0x11f4>
   16e08:	mov	r0, r4
   16e0c:	mov	r2, #1
   16e10:	add	r1, pc, r1
   16e14:	bl	2105c <flatcc_builder_check_required@@Base>
   16e18:	cmp	r0, #0
   16e1c:	beq	17b44 <test_scan@@Base+0x1058>
   16e20:	mov	r0, r4
   16e24:	bl	210f8 <flatcc_builder_end_table@@Base>
   16e28:	cmp	r0, #0
   16e2c:	beq	16e3c <test_scan@@Base+0x350>
   16e30:	mov	r1, r0
   16e34:	mov	r0, r4
   16e38:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   16e3c:	mov	r0, r4
   16e40:	bl	20430 <flatcc_builder_end_offset_vector@@Base>
   16e44:	cmp	r0, #0
   16e48:	beq	16e64 <test_scan@@Base+0x378>
   16e4c:	mov	r5, r0
   16e50:	mov	r0, r4
   16e54:	mov	r1, #11
   16e58:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   16e5c:	cmp	r0, #0
   16e60:	strne	r5, [r0]
   16e64:	ldr	r1, [pc, #4036]	; 17e30 <test_scan@@Base+0x1344>
   16e68:	mov	r0, r4
   16e6c:	mov	r2, #1
   16e70:	add	r1, pc, r1
   16e74:	bl	2105c <flatcc_builder_check_required@@Base>
   16e78:	cmp	r0, #0
   16e7c:	beq	17b44 <test_scan@@Base+0x1058>
   16e80:	mov	r0, r4
   16e84:	bl	210f8 <flatcc_builder_end_table@@Base>
   16e88:	mov	r1, r0
   16e8c:	mov	r0, r4
   16e90:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   16e94:	sub	r1, fp, #32
   16e98:	mov	r0, r4
   16e9c:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   16ea0:	cmp	r0, #0
   16ea4:	beq	17b64 <test_scan@@Base+0x1078>
   16ea8:	ldr	r2, [r0, #4]
   16eac:	movw	r1, #20301	; 0x4f4d
   16eb0:	movt	r1, #21326	; 0x534e
   16eb4:	cmp	r2, r1
   16eb8:	bne	17b64 <test_scan@@Base+0x1078>
   16ebc:	ldr	r1, [r0]
   16ec0:	mov	r3, r0
   16ec4:	ldr	r2, [r3, r1]!
   16ec8:	str	r1, [fp, #-48]	; 0xffffffd0
   16ecc:	mov	r1, r3
   16ed0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16ed4:	cmp	r2, #27
   16ed8:	bls	17b84 <test_scan@@Base+0x1098>
   16edc:	ldrh	r7, [r1, #26]
   16ee0:	cmp	r7, #0
   16ee4:	beq	17b84 <test_scan@@Base+0x1098>
   16ee8:	ldrh	r6, [r1, #14]
   16eec:	cmp	r6, #0
   16ef0:	mov	r2, r6
   16ef4:	str	r6, [sp, #48]	; 0x30
   16ef8:	beq	17ba4 <test_scan@@Base+0x10b8>
   16efc:	ldrh	r1, [r1, #24]
   16f00:	str	r0, [fp, #-44]	; 0xffffffd4
   16f04:	cmp	r1, #0
   16f08:	mov	r0, r1
   16f0c:	str	r1, [sp, #52]	; 0x34
   16f10:	beq	17bc4 <test_scan@@Base+0x10d8>
   16f14:	mov	r2, r3
   16f18:	ldr	r1, [r2, r7]!
   16f1c:	add	r2, r2, r1
   16f20:	add	r8, r2, #4
   16f24:	ldr	sl, [r8, #-4]!
   16f28:	cmp	sl, #0
   16f2c:	beq	170ac <test_scan@@Base+0x5c0>
   16f30:	ldr	r0, [sp, #48]	; 0x30
   16f34:	mov	r2, r3
   16f38:	mov	r6, #0
   16f3c:	ldr	r0, [r2, r0]!
   16f40:	str	r0, [sp, #28]
   16f44:	ldr	r0, [sp, #52]	; 0x34
   16f48:	str	r2, [sp, #24]
   16f4c:	ldr	r0, [r3, r0]!
   16f50:	str	r0, [sp, #36]	; 0x24
   16f54:	add	r0, r3, r0
   16f58:	add	r0, r0, #4
   16f5c:	str	r0, [sp, #32]
   16f60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16f64:	add	r9, r1, r0
   16f68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16f6c:	add	r1, r9, r7
   16f70:	str	r1, [sp, #40]	; 0x28
   16f74:	add	r0, r0, r1
   16f78:	str	r0, [sp, #44]	; 0x2c
   16f7c:	add	r4, r0, #8
   16f80:	ldr	r5, [pc, #3916]	; 17ed4 <test_scan@@Base+0x13e8>
   16f84:	add	r5, pc, r5
   16f88:	cmp	sl, r6
   16f8c:	bls	18f54 <test_scan@@Base+0x2468>
   16f90:	ldr	r0, [r4, #-4]
   16f94:	add	r1, r4, r0
   16f98:	cmp	r1, #4
   16f9c:	beq	18654 <test_scan@@Base+0x1b68>
   16fa0:	ldr	r1, [r1, #-4]
   16fa4:	sub	r1, r0, r1
   16fa8:	add	r1, r4, r1
   16fac:	ldrh	r2, [r1, #-4]
   16fb0:	cmp	r2, #12
   16fb4:	bcc	18644 <test_scan@@Base+0x1b58>
   16fb8:	ldrh	r1, [r1, #6]
   16fbc:	cmp	r1, #0
   16fc0:	beq	18644 <test_scan@@Base+0x1b58>
   16fc4:	add	r2, r0, r1
   16fc8:	add	r2, r4, r2
   16fcc:	ldr	r2, [r2, #-4]
   16fd0:	add	r0, r2, r0
   16fd4:	add	r0, r0, r1
   16fd8:	mov	r1, r5
   16fdc:	add	r0, r4, r0
   16fe0:	bl	12e08 <strcmp@plt>
   16fe4:	cmp	r0, #0
   16fe8:	beq	17000 <test_scan@@Base+0x514>
   16fec:	add	r6, r6, #1
   16ff0:	add	r4, r4, #4
   16ff4:	cmp	r6, sl
   16ff8:	bcc	16f88 <test_scan@@Base+0x49c>
   16ffc:	b	170ac <test_scan@@Base+0x5c0>
   17000:	cmp	r6, #1
   17004:	bne	170ac <test_scan@@Base+0x5c0>
   17008:	add	r0, r9, sl, lsl #2
   1700c:	sub	r4, sl, #1
   17010:	add	r9, r0, r7
   17014:	ldr	r7, [fp, #-44]	; 0xffffffd4
   17018:	ldr	r5, [pc, #3948]	; 17f8c <test_scan@@Base+0x14a0>
   1701c:	add	r6, r7, r9
   17020:	add	r5, pc, r5
   17024:	cmn	r4, #1
   17028:	beq	1709c <test_scan@@Base+0x5b0>
   1702c:	cmp	sl, r4
   17030:	bls	18f54 <test_scan@@Base+0x2468>
   17034:	ldr	r0, [r6]
   17038:	adds	r1, r6, r0
   1703c:	beq	18654 <test_scan@@Base+0x1b68>
   17040:	ldr	r1, [r6, r0]
   17044:	sub	r1, r0, r1
   17048:	add	r1, r6, r1
   1704c:	ldrh	r2, [r1]
   17050:	cmp	r2, #12
   17054:	bcc	18644 <test_scan@@Base+0x1b58>
   17058:	ldrh	r1, [r1, #10]
   1705c:	cmp	r1, #0
   17060:	beq	18644 <test_scan@@Base+0x1b58>
   17064:	add	r2, r0, r1
   17068:	ldr	r2, [r6, r2]
   1706c:	add	r0, r2, r0
   17070:	add	r0, r0, r1
   17074:	mov	r1, r5
   17078:	add	r0, r6, r0
   1707c:	add	r0, r0, #4
   17080:	bl	12e08 <strcmp@plt>
   17084:	sub	r6, r6, #4
   17088:	sub	r4, r4, #1
   1708c:	cmp	r0, #0
   17090:	bne	17024 <test_scan@@Base+0x538>
   17094:	cmp	r4, #0
   17098:	beq	170d4 <test_scan@@Base+0x5e8>
   1709c:	ldr	r0, [pc, #3820]	; 17f90 <test_scan@@Base+0x14a4>
   170a0:	add	r0, pc, r0
   170a4:	bl	12e68 <puts@plt>
   170a8:	b	170bc <test_scan@@Base+0x5d0>
   170ac:	ldr	r0, [pc, #3808]	; 17f94 <test_scan@@Base+0x14a8>
   170b0:	add	r0, pc, r0
   170b4:	bl	12e68 <puts@plt>
   170b8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   170bc:	mvn	r5, #0
   170c0:	mov	r0, r7
   170c4:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   170c8:	mov	r0, r5
   170cc:	sub	sp, fp, #28
   170d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d4:	str	r9, [sp, #20]
   170d8:	ldr	r0, [sp, #44]	; 0x2c
   170dc:	mov	r7, #0
   170e0:	ldr	r5, [pc, #4088]	; 180e0 <test_scan@@Base+0x15f4>
   170e4:	add	r9, r0, #8
   170e8:	add	r5, pc, r5
   170ec:	cmp	sl, r7
   170f0:	bls	18f54 <test_scan@@Base+0x2468>
   170f4:	ldr	r0, [r9, #-4]
   170f8:	add	r1, r9, r0
   170fc:	cmp	r1, #4
   17100:	beq	18654 <test_scan@@Base+0x1b68>
   17104:	ldr	r1, [r1, #-4]
   17108:	sub	r1, r0, r1
   1710c:	add	r1, r9, r1
   17110:	ldrh	r2, [r1, #-4]
   17114:	cmp	r2, #12
   17118:	bcc	18644 <test_scan@@Base+0x1b58>
   1711c:	ldrh	r1, [r1, #6]
   17120:	cmp	r1, #0
   17124:	beq	18644 <test_scan@@Base+0x1b58>
   17128:	add	r2, r0, r1
   1712c:	add	r2, r9, r2
   17130:	ldr	r2, [r2, #-4]
   17134:	add	r0, r2, r0
   17138:	add	r0, r0, r1
   1713c:	mov	r1, r5
   17140:	add	r0, r9, r0
   17144:	ldr	r4, [r0, #-4]
   17148:	cmp	r4, #5
   1714c:	mov	r2, r4
   17150:	movcs	r2, #5
   17154:	bl	12eec <strncmp@plt>
   17158:	cmp	r0, #0
   1715c:	mov	r1, r0
   17160:	mov	r2, #0
   17164:	mvneq	r1, #0
   17168:	cmp	r4, #5
   1716c:	movwhi	r2, #1
   17170:	cmp	r0, #0
   17174:	movne	r2, r1
   17178:	cmp	r4, #5
   1717c:	movcc	r2, r1
   17180:	cmp	r2, #0
   17184:	beq	1719c <test_scan@@Base+0x6b0>
   17188:	add	r7, r7, #1
   1718c:	add	r9, r9, #4
   17190:	cmp	r7, sl
   17194:	bcc	170ec <test_scan@@Base+0x600>
   17198:	b	1726c <test_scan@@Base+0x780>
   1719c:	cmp	r7, #1
   171a0:	bne	1726c <test_scan@@Base+0x780>
   171a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   171a8:	ldr	r1, [sp, #20]
   171ac:	ldr	r9, [pc, #4048]	; 18184 <test_scan@@Base+0x1698>
   171b0:	sub	r7, sl, #1
   171b4:	add	r5, r0, r1
   171b8:	add	r9, pc, r9
   171bc:	cmn	r7, #1
   171c0:	beq	1726c <test_scan@@Base+0x780>
   171c4:	cmp	sl, r7
   171c8:	bls	18f54 <test_scan@@Base+0x2468>
   171cc:	ldr	r0, [r5]
   171d0:	adds	r1, r5, r0
   171d4:	beq	18654 <test_scan@@Base+0x1b68>
   171d8:	ldr	r1, [r5, r0]
   171dc:	sub	r1, r0, r1
   171e0:	add	r1, r5, r1
   171e4:	ldrh	r2, [r1]
   171e8:	cmp	r2, #12
   171ec:	bcc	18644 <test_scan@@Base+0x1b58>
   171f0:	ldrh	r1, [r1, #10]
   171f4:	cmp	r1, #0
   171f8:	beq	18644 <test_scan@@Base+0x1b58>
   171fc:	add	r2, r0, r1
   17200:	ldr	r2, [r5, r2]
   17204:	add	r0, r2, r0
   17208:	add	r0, r0, r1
   1720c:	mov	r1, r5
   17210:	ldr	r4, [r1, r0]!
   17214:	cmp	r4, #5
   17218:	mov	r2, r4
   1721c:	add	r0, r1, #4
   17220:	mov	r1, r9
   17224:	movcs	r2, #5
   17228:	bl	12eec <strncmp@plt>
   1722c:	cmp	r0, #0
   17230:	mov	r1, r0
   17234:	mov	r2, #0
   17238:	sub	r5, r5, #4
   1723c:	sub	r7, r7, #1
   17240:	mvneq	r1, #0
   17244:	cmp	r4, #5
   17248:	movwhi	r2, #1
   1724c:	cmp	r0, #0
   17250:	movne	r2, r1
   17254:	cmp	r4, #5
   17258:	movcc	r2, r1
   1725c:	cmp	r2, #0
   17260:	bne	171bc <test_scan@@Base+0x6d0>
   17264:	cmp	r7, #0
   17268:	beq	17278 <test_scan@@Base+0x78c>
   1726c:	ldr	r0, [pc, #4016]	; 18224 <test_scan@@Base+0x1738>
   17270:	add	r0, pc, r0
   17274:	b	170b4 <test_scan@@Base+0x5c8>
   17278:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1727c:	cmp	sl, #3
   17280:	bcc	17308 <test_scan@@Base+0x81c>
   17284:	ldr	r0, [sp, #44]	; 0x2c
   17288:	ldr	r5, [pc, #3992]	; 18228 <test_scan@@Base+0x173c>
   1728c:	mov	r6, #2
   17290:	add	r4, r0, #12
   17294:	add	r5, pc, r5
   17298:	cmp	sl, r6
   1729c:	bls	18f54 <test_scan@@Base+0x2468>
   172a0:	ldr	r0, [r4]
   172a4:	adds	r1, r4, r0
   172a8:	beq	18654 <test_scan@@Base+0x1b68>
   172ac:	ldr	r1, [r4, r0]
   172b0:	sub	r1, r0, r1
   172b4:	add	r1, r4, r1
   172b8:	ldrh	r2, [r1]
   172bc:	cmp	r2, #12
   172c0:	bcc	18644 <test_scan@@Base+0x1b58>
   172c4:	ldrh	r1, [r1, #10]
   172c8:	cmp	r1, #0
   172cc:	beq	18644 <test_scan@@Base+0x1b58>
   172d0:	add	r2, r0, r1
   172d4:	ldr	r2, [r4, r2]
   172d8:	add	r0, r2, r0
   172dc:	add	r0, r0, r1
   172e0:	mov	r1, r5
   172e4:	add	r0, r4, r0
   172e8:	add	r0, r0, #4
   172ec:	bl	12e08 <strcmp@plt>
   172f0:	cmp	r0, #0
   172f4:	beq	17428 <test_scan@@Base+0x93c>
   172f8:	add	r6, r6, #1
   172fc:	add	r4, r4, #4
   17300:	cmp	r6, sl
   17304:	bcc	17298 <test_scan@@Base+0x7ac>
   17308:	ldr	r0, [sp, #44]	; 0x2c
   1730c:	ldr	r5, [pc, #4008]	; 182bc <test_scan@@Base+0x17d0>
   17310:	mov	r6, #0
   17314:	add	r4, r0, #8
   17318:	add	r5, pc, r5
   1731c:	cmp	sl, r6
   17320:	bls	18f54 <test_scan@@Base+0x2468>
   17324:	ldr	r0, [r4, #-4]
   17328:	add	r1, r4, r0
   1732c:	cmp	r1, #4
   17330:	beq	18654 <test_scan@@Base+0x1b68>
   17334:	ldr	r1, [r1, #-4]
   17338:	sub	r1, r0, r1
   1733c:	add	r1, r4, r1
   17340:	ldrh	r2, [r1, #-4]
   17344:	cmp	r2, #12
   17348:	bcc	18644 <test_scan@@Base+0x1b58>
   1734c:	ldrh	r1, [r1, #6]
   17350:	cmp	r1, #0
   17354:	beq	18644 <test_scan@@Base+0x1b58>
   17358:	add	r2, r0, r1
   1735c:	add	r2, r4, r2
   17360:	ldr	r2, [r2, #-4]
   17364:	add	r0, r2, r0
   17368:	add	r0, r0, r1
   1736c:	mov	r1, r5
   17370:	add	r0, r4, r0
   17374:	bl	12e08 <strcmp@plt>
   17378:	cmp	r0, #0
   1737c:	beq	1741c <test_scan@@Base+0x930>
   17380:	add	r6, r6, #1
   17384:	add	r4, r4, #4
   17388:	cmp	r6, sl
   1738c:	bcc	1731c <test_scan@@Base+0x830>
   17390:	ldr	r0, [sp, #44]	; 0x2c
   17394:	ldr	r5, [pc, #4016]	; 1834c <test_scan@@Base+0x1860>
   17398:	mov	r4, #0
   1739c:	add	r6, r0, #8
   173a0:	add	r5, pc, r5
   173a4:	cmp	sl, r4
   173a8:	bls	18f54 <test_scan@@Base+0x2468>
   173ac:	ldr	r0, [r6, #-4]
   173b0:	add	r1, r6, r0
   173b4:	cmp	r1, #4
   173b8:	beq	18654 <test_scan@@Base+0x1b68>
   173bc:	ldr	r1, [r1, #-4]
   173c0:	sub	r1, r0, r1
   173c4:	add	r1, r6, r1
   173c8:	ldrh	r2, [r1, #-4]
   173cc:	cmp	r2, #12
   173d0:	bcc	18644 <test_scan@@Base+0x1b58>
   173d4:	ldrh	r1, [r1, #6]
   173d8:	cmp	r1, #0
   173dc:	beq	18644 <test_scan@@Base+0x1b58>
   173e0:	add	r2, r0, r1
   173e4:	add	r2, r6, r2
   173e8:	ldr	r2, [r2, #-4]
   173ec:	add	r0, r2, r0
   173f0:	add	r0, r0, r1
   173f4:	mov	r1, r5
   173f8:	add	r0, r6, r0
   173fc:	bl	12e08 <strcmp@plt>
   17400:	cmp	r0, #0
   17404:	beq	17434 <test_scan@@Base+0x948>
   17408:	add	r4, r4, #1
   1740c:	add	r6, r6, #4
   17410:	cmp	r4, sl
   17414:	bcc	173a4 <test_scan@@Base+0x8b8>
   17418:	b	1743c <test_scan@@Base+0x950>
   1741c:	ldr	r0, [pc, #4044]	; 183f0 <test_scan@@Base+0x1904>
   17420:	add	r0, pc, r0
   17424:	b	170a4 <test_scan@@Base+0x5b8>
   17428:	ldr	r0, [pc, #4036]	; 183f4 <test_scan@@Base+0x1908>
   1742c:	add	r0, pc, r0
   17430:	b	170a4 <test_scan@@Base+0x5b8>
   17434:	cmp	r4, #0
   17438:	beq	17448 <test_scan@@Base+0x95c>
   1743c:	ldr	r0, [pc, #4020]	; 183f8 <test_scan@@Base+0x190c>
   17440:	add	r0, pc, r0
   17444:	b	170a4 <test_scan@@Base+0x5b8>
   17448:	ldr	r0, [sp, #44]	; 0x2c
   1744c:	ldr	r5, [pc, #4008]	; 183fc <test_scan@@Base+0x1910>
   17450:	mov	r4, #0
   17454:	add	r6, r0, #8
   17458:	add	r5, pc, r5
   1745c:	cmp	sl, r4
   17460:	bls	18f54 <test_scan@@Base+0x2468>
   17464:	ldr	r0, [r6, #-4]
   17468:	add	r1, r6, r0
   1746c:	cmp	r1, #4
   17470:	beq	18654 <test_scan@@Base+0x1b68>
   17474:	ldr	r1, [r1, #-4]
   17478:	sub	r1, r0, r1
   1747c:	add	r1, r6, r1
   17480:	ldrh	r2, [r1, #-4]
   17484:	cmp	r2, #12
   17488:	bcc	18644 <test_scan@@Base+0x1b58>
   1748c:	ldrh	r1, [r1, #6]
   17490:	cmp	r1, #0
   17494:	beq	18644 <test_scan@@Base+0x1b58>
   17498:	add	r2, r0, r1
   1749c:	add	r2, r6, r2
   174a0:	ldr	r2, [r2, #-4]
   174a4:	add	r0, r2, r0
   174a8:	add	r0, r0, r1
   174ac:	mov	r1, r5
   174b0:	add	r0, r6, r0
   174b4:	bl	12e08 <strcmp@plt>
   174b8:	cmp	r0, #0
   174bc:	beq	174d4 <test_scan@@Base+0x9e8>
   174c0:	add	r4, r4, #1
   174c4:	add	r6, r6, #4
   174c8:	cmp	r4, sl
   174cc:	bcc	1745c <test_scan@@Base+0x970>
   174d0:	b	177b0 <test_scan@@Base+0xcc4>
   174d4:	cmp	r4, #2
   174d8:	bne	177b0 <test_scan@@Base+0xcc4>
   174dc:	ldr	r0, [sp, #20]
   174e0:	ldr	r5, [pc, #4020]	; 1849c <test_scan@@Base+0x19b0>
   174e4:	sub	r4, sl, #1
   174e8:	add	r6, r7, r0
   174ec:	add	r5, pc, r5
   174f0:	cmn	r4, #1
   174f4:	beq	177bc <test_scan@@Base+0xcd0>
   174f8:	cmp	sl, r4
   174fc:	bls	18f54 <test_scan@@Base+0x2468>
   17500:	ldr	r0, [r6]
   17504:	adds	r1, r6, r0
   17508:	beq	18654 <test_scan@@Base+0x1b68>
   1750c:	ldr	r1, [r6, r0]
   17510:	sub	r1, r0, r1
   17514:	add	r1, r6, r1
   17518:	ldrh	r2, [r1]
   1751c:	cmp	r2, #12
   17520:	bcc	18644 <test_scan@@Base+0x1b58>
   17524:	ldrh	r1, [r1, #10]
   17528:	cmp	r1, #0
   1752c:	beq	18644 <test_scan@@Base+0x1b58>
   17530:	add	r2, r0, r1
   17534:	ldr	r2, [r6, r2]
   17538:	add	r0, r2, r0
   1753c:	add	r0, r0, r1
   17540:	mov	r1, r5
   17544:	add	r0, r6, r0
   17548:	add	r0, r0, #4
   1754c:	bl	12e08 <strcmp@plt>
   17550:	sub	r6, r6, #4
   17554:	sub	r4, r4, #1
   17558:	cmp	r0, #0
   1755c:	bne	174f0 <test_scan@@Base+0xa04>
   17560:	cmp	r4, #3
   17564:	bne	177bc <test_scan@@Base+0xcd0>
   17568:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1756c:	ldr	r1, [sp, #20]
   17570:	ldr	r9, [pc, #4024]	; 18530 <test_scan@@Base+0x1a44>
   17574:	sub	r7, sl, #1
   17578:	add	r5, r0, r1
   1757c:	add	r9, pc, r9
   17580:	cmn	r7, #1
   17584:	beq	177c8 <test_scan@@Base+0xcdc>
   17588:	cmp	sl, r7
   1758c:	bls	18f54 <test_scan@@Base+0x2468>
   17590:	ldr	r0, [r5]
   17594:	adds	r1, r5, r0
   17598:	beq	18654 <test_scan@@Base+0x1b68>
   1759c:	ldr	r1, [r5, r0]
   175a0:	sub	r1, r0, r1
   175a4:	add	r1, r5, r1
   175a8:	ldrh	r2, [r1]
   175ac:	cmp	r2, #12
   175b0:	bcc	18644 <test_scan@@Base+0x1b58>
   175b4:	ldrh	r1, [r1, #10]
   175b8:	cmp	r1, #0
   175bc:	beq	18644 <test_scan@@Base+0x1b58>
   175c0:	add	r2, r0, r1
   175c4:	ldr	r2, [r5, r2]
   175c8:	add	r0, r2, r0
   175cc:	add	r0, r0, r1
   175d0:	mov	r1, r5
   175d4:	ldr	r4, [r1, r0]!
   175d8:	cmp	r4, #8
   175dc:	mov	r2, r4
   175e0:	add	r0, r1, #4
   175e4:	mov	r1, r9
   175e8:	movcs	r2, #8
   175ec:	bl	12eec <strncmp@plt>
   175f0:	cmp	r0, #0
   175f4:	mov	r1, r0
   175f8:	mov	r2, #0
   175fc:	sub	r5, r5, #4
   17600:	sub	r7, r7, #1
   17604:	mvneq	r1, #0
   17608:	cmp	r4, #8
   1760c:	movwhi	r2, #1
   17610:	cmp	r0, #0
   17614:	movne	r2, r1
   17618:	cmp	r4, #8
   1761c:	movcc	r2, r1
   17620:	cmp	r2, #0
   17624:	bne	17580 <test_scan@@Base+0xa94>
   17628:	cmp	r7, #3
   1762c:	bne	177c8 <test_scan@@Base+0xcdc>
   17630:	ldr	r1, [sp, #40]	; 0x28
   17634:	mvn	r0, sl
   17638:	mov	r5, sl
   1763c:	cmn	r0, #4
   17640:	str	r0, [sp, #16]
   17644:	mvnls	r0, #3
   17648:	cmp	sl, #3
   1764c:	movcs	r5, #3
   17650:	sub	r1, r1, #4
   17654:	str	r1, [sp, #12]
   17658:	sub	r0, r1, r0, lsl #2
   1765c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17660:	ldr	r9, [pc, #4072]	; 18650 <test_scan@@Base+0x1b64>
   17664:	str	r5, [sp, #40]	; 0x28
   17668:	add	r7, r1, r0
   1766c:	add	r9, pc, r9
   17670:	cmp	r5, #2
   17674:	bcc	177c8 <test_scan@@Base+0xcdc>
   17678:	sub	r5, r5, #1
   1767c:	cmp	sl, r5
   17680:	bls	18f54 <test_scan@@Base+0x2468>
   17684:	ldr	r0, [r7]
   17688:	adds	r1, r7, r0
   1768c:	beq	18654 <test_scan@@Base+0x1b68>
   17690:	ldr	r1, [r7, r0]
   17694:	sub	r1, r0, r1
   17698:	add	r1, r7, r1
   1769c:	ldrh	r2, [r1]
   176a0:	cmp	r2, #12
   176a4:	bcc	18644 <test_scan@@Base+0x1b58>
   176a8:	ldrh	r1, [r1, #10]
   176ac:	cmp	r1, #0
   176b0:	beq	18644 <test_scan@@Base+0x1b58>
   176b4:	add	r2, r0, r1
   176b8:	ldr	r2, [r7, r2]
   176bc:	add	r0, r2, r0
   176c0:	add	r0, r0, r1
   176c4:	mov	r1, r7
   176c8:	ldr	r4, [r1, r0]!
   176cc:	cmp	r4, #8
   176d0:	mov	r2, r4
   176d4:	add	r0, r1, #4
   176d8:	mov	r1, r9
   176dc:	movcs	r2, #8
   176e0:	bl	12eec <strncmp@plt>
   176e4:	cmp	r0, #0
   176e8:	mov	r1, r0
   176ec:	mov	r2, #0
   176f0:	sub	r7, r7, #4
   176f4:	mvneq	r1, #0
   176f8:	cmp	r4, #8
   176fc:	movwhi	r2, #1
   17700:	cmp	r0, #0
   17704:	movne	r2, r1
   17708:	cmp	r4, #8
   1770c:	movcc	r2, r1
   17710:	cmp	r2, #0
   17714:	bne	17670 <test_scan@@Base+0xb84>
   17718:	cmp	r5, #2
   1771c:	bne	177c8 <test_scan@@Base+0xcdc>
   17720:	cmp	sl, #3
   17724:	bcc	17934 <test_scan@@Base+0xe48>
   17728:	ldr	r0, [sp, #44]	; 0x2c
   1772c:	ldr	r5, [pc, #4076]	; 18720 <test_scan@@Base+0x1c34>
   17730:	mov	r4, #2
   17734:	add	r6, r0, #12
   17738:	add	r5, pc, r5
   1773c:	cmp	sl, r4
   17740:	bls	18f54 <test_scan@@Base+0x2468>
   17744:	ldr	r0, [r6]
   17748:	adds	r1, r6, r0
   1774c:	beq	18654 <test_scan@@Base+0x1b68>
   17750:	ldr	r1, [r6, r0]
   17754:	sub	r1, r0, r1
   17758:	add	r1, r6, r1
   1775c:	ldrh	r2, [r1]
   17760:	cmp	r2, #12
   17764:	bcc	18644 <test_scan@@Base+0x1b58>
   17768:	ldrh	r1, [r1, #10]
   1776c:	cmp	r1, #0
   17770:	beq	18644 <test_scan@@Base+0x1b58>
   17774:	add	r2, r0, r1
   17778:	ldr	r2, [r6, r2]
   1777c:	add	r0, r2, r0
   17780:	add	r0, r0, r1
   17784:	mov	r1, r5
   17788:	add	r0, r6, r0
   1778c:	add	r0, r0, #4
   17790:	bl	12e08 <strcmp@plt>
   17794:	cmp	r0, #0
   17798:	beq	177d4 <test_scan@@Base+0xce8>
   1779c:	add	r4, r4, #1
   177a0:	add	r6, r6, #4
   177a4:	cmp	r4, sl
   177a8:	bcc	1773c <test_scan@@Base+0xc50>
   177ac:	b	17934 <test_scan@@Base+0xe48>
   177b0:	ldr	r0, [pc, #4092]	; 187b4 <test_scan@@Base+0x1cc8>
   177b4:	add	r0, pc, r0
   177b8:	b	170a4 <test_scan@@Base+0x5b8>
   177bc:	ldr	r0, [pc, #4084]	; 187b8 <test_scan@@Base+0x1ccc>
   177c0:	add	r0, pc, r0
   177c4:	b	170b4 <test_scan@@Base+0x5c8>
   177c8:	ldr	r0, [pc, #4088]	; 187c8 <test_scan@@Base+0x1cdc>
   177cc:	add	r0, pc, r0
   177d0:	b	170b4 <test_scan@@Base+0x5c8>
   177d4:	cmp	r4, #2
   177d8:	bne	17934 <test_scan@@Base+0xe48>
   177dc:	ldr	r0, [sp, #44]	; 0x2c
   177e0:	ldr	r9, [pc, #4080]	; 187d8 <test_scan@@Base+0x1cec>
   177e4:	mov	r7, #2
   177e8:	add	r5, r0, #12
   177ec:	add	r9, pc, r9
   177f0:	cmp	sl, r7
   177f4:	bls	18f54 <test_scan@@Base+0x2468>
   177f8:	ldr	r0, [r5]
   177fc:	adds	r1, r5, r0
   17800:	beq	18654 <test_scan@@Base+0x1b68>
   17804:	ldr	r1, [r5, r0]
   17808:	sub	r1, r0, r1
   1780c:	add	r1, r5, r1
   17810:	ldrh	r2, [r1]
   17814:	cmp	r2, #12
   17818:	bcc	18644 <test_scan@@Base+0x1b58>
   1781c:	ldrh	r1, [r1, #10]
   17820:	cmp	r1, #0
   17824:	beq	18644 <test_scan@@Base+0x1b58>
   17828:	add	r2, r0, r1
   1782c:	ldr	r2, [r5, r2]
   17830:	add	r0, r2, r0
   17834:	add	r0, r0, r1
   17838:	mov	r1, r5
   1783c:	ldr	r4, [r1, r0]!
   17840:	cmp	r4, #8
   17844:	mov	r2, r4
   17848:	add	r0, r1, #4
   1784c:	mov	r1, r9
   17850:	movcs	r2, #8
   17854:	bl	12eec <strncmp@plt>
   17858:	cmp	r0, #0
   1785c:	mov	r1, r0
   17860:	mov	r2, #0
   17864:	mvneq	r1, #0
   17868:	cmp	r4, #8
   1786c:	movwhi	r2, #1
   17870:	cmp	r0, #0
   17874:	movne	r2, r1
   17878:	cmp	r4, #8
   1787c:	movcc	r2, r1
   17880:	cmp	r2, #0
   17884:	beq	1789c <test_scan@@Base+0xdb0>
   17888:	add	r7, r7, #1
   1788c:	add	r5, r5, #4
   17890:	cmp	r7, sl
   17894:	bcc	177f0 <test_scan@@Base+0xd04>
   17898:	b	17934 <test_scan@@Base+0xe48>
   1789c:	cmp	r7, #2
   178a0:	bne	17934 <test_scan@@Base+0xe48>
   178a4:	cmp	sl, #4
   178a8:	bcc	17b34 <test_scan@@Base+0x1048>
   178ac:	ldr	r0, [sp, #44]	; 0x2c
   178b0:	ldr	r5, [pc, #4040]	; 18880 <test_scan@@Base+0x1d94>
   178b4:	mov	r4, #3
   178b8:	add	r6, r0, #16
   178bc:	add	r5, pc, r5
   178c0:	cmp	sl, r4
   178c4:	bls	18f54 <test_scan@@Base+0x2468>
   178c8:	ldr	r0, [r6]
   178cc:	adds	r1, r6, r0
   178d0:	beq	18654 <test_scan@@Base+0x1b68>
   178d4:	ldr	r1, [r6, r0]
   178d8:	sub	r1, r0, r1
   178dc:	add	r1, r6, r1
   178e0:	ldrh	r2, [r1]
   178e4:	cmp	r2, #12
   178e8:	bcc	18644 <test_scan@@Base+0x1b58>
   178ec:	ldrh	r1, [r1, #10]
   178f0:	cmp	r1, #0
   178f4:	beq	18644 <test_scan@@Base+0x1b58>
   178f8:	add	r2, r0, r1
   178fc:	ldr	r2, [r6, r2]
   17900:	add	r0, r2, r0
   17904:	add	r0, r0, r1
   17908:	mov	r1, r5
   1790c:	add	r0, r6, r0
   17910:	add	r0, r0, #4
   17914:	bl	12e08 <strcmp@plt>
   17918:	cmp	r0, #0
   1791c:	beq	17944 <test_scan@@Base+0xe58>
   17920:	add	r4, r4, #1
   17924:	add	r6, r6, #4
   17928:	cmp	r4, sl
   1792c:	bcc	178c0 <test_scan@@Base+0xdd4>
   17930:	b	17b34 <test_scan@@Base+0x1048>
   17934:	ldr	r0, [pc, #3976]	; 188c4 <test_scan@@Base+0x1dd8>
   17938:	add	r0, pc, r0
   1793c:	b	170b4 <test_scan@@Base+0x5c8>
   17940:	andeq	lr, r0, ip, ror r2
   17944:	cmp	r4, #4
   17948:	bne	17b34 <test_scan@@Base+0x1048>
   1794c:	cmp	sl, #2
   17950:	bcc	17c08 <test_scan@@Base+0x111c>
   17954:	ldr	r0, [sp, #44]	; 0x2c
   17958:	ldr	r5, [pc, #3944]	; 188c8 <test_scan@@Base+0x1ddc>
   1795c:	mov	r6, #1
   17960:	add	r4, r0, #12
   17964:	add	r5, pc, r5
   17968:	cmp	sl, r6
   1796c:	bls	18f54 <test_scan@@Base+0x2468>
   17970:	ldr	r0, [r4, #-4]
   17974:	add	r1, r4, r0
   17978:	cmp	r1, #4
   1797c:	beq	18654 <test_scan@@Base+0x1b68>
   17980:	ldr	r1, [r1, #-4]
   17984:	sub	r1, r0, r1
   17988:	add	r1, r4, r1
   1798c:	ldrh	r2, [r1, #-4]
   17990:	cmp	r2, #12
   17994:	bcc	18644 <test_scan@@Base+0x1b58>
   17998:	ldrh	r1, [r1, #6]
   1799c:	cmp	r1, #0
   179a0:	beq	18644 <test_scan@@Base+0x1b58>
   179a4:	add	r2, r0, r1
   179a8:	add	r2, r4, r2
   179ac:	ldr	r2, [r2, #-4]
   179b0:	add	r0, r2, r0
   179b4:	add	r0, r0, r1
   179b8:	mov	r1, r5
   179bc:	add	r0, r4, r0
   179c0:	bl	12e08 <strcmp@plt>
   179c4:	cmp	r0, #0
   179c8:	beq	17be4 <test_scan@@Base+0x10f8>
   179cc:	ldr	r0, [sp, #40]	; 0x28
   179d0:	add	r6, r6, #1
   179d4:	add	r4, r4, #4
   179d8:	cmp	r6, r0
   179dc:	bcc	17968 <test_scan@@Base+0xe7c>
   179e0:	cmp	sl, #2
   179e4:	bcc	17c08 <test_scan@@Base+0x111c>
   179e8:	ldr	r0, [sp, #44]	; 0x2c
   179ec:	ldr	r5, [pc, #3800]	; 188cc <test_scan@@Base+0x1de0>
   179f0:	mov	r6, #1
   179f4:	add	r4, r0, #12
   179f8:	add	r5, pc, r5
   179fc:	cmp	sl, r6
   17a00:	bls	18f54 <test_scan@@Base+0x2468>
   17a04:	ldr	r0, [r4, #-4]
   17a08:	add	r1, r4, r0
   17a0c:	cmp	r1, #4
   17a10:	beq	18654 <test_scan@@Base+0x1b68>
   17a14:	ldr	r1, [r1, #-4]
   17a18:	sub	r1, r0, r1
   17a1c:	add	r1, r4, r1
   17a20:	ldrh	r2, [r1, #-4]
   17a24:	cmp	r2, #12
   17a28:	bcc	18644 <test_scan@@Base+0x1b58>
   17a2c:	ldrh	r1, [r1, #6]
   17a30:	cmp	r1, #0
   17a34:	beq	18644 <test_scan@@Base+0x1b58>
   17a38:	add	r2, r0, r1
   17a3c:	add	r2, r4, r2
   17a40:	ldr	r2, [r2, #-4]
   17a44:	add	r0, r2, r0
   17a48:	add	r0, r0, r1
   17a4c:	mov	r1, r5
   17a50:	add	r0, r4, r0
   17a54:	bl	12e08 <strcmp@plt>
   17a58:	cmp	r0, #0
   17a5c:	beq	17bf0 <test_scan@@Base+0x1104>
   17a60:	ldr	r0, [sp, #40]	; 0x28
   17a64:	add	r6, r6, #1
   17a68:	add	r4, r4, #4
   17a6c:	cmp	r6, r0
   17a70:	bcc	179fc <test_scan@@Base+0xf10>
   17a74:	cmp	sl, #2
   17a78:	bcc	17c08 <test_scan@@Base+0x111c>
   17a7c:	ldr	r0, [sp, #44]	; 0x2c
   17a80:	ldr	r5, [pc, #3656]	; 188d0 <test_scan@@Base+0x1de4>
   17a84:	mov	r4, #1
   17a88:	mov	r7, #0
   17a8c:	add	r9, r0, #8
   17a90:	add	r5, pc, r5
   17a94:	cmp	sl, r4
   17a98:	bls	18f54 <test_scan@@Base+0x2468>
   17a9c:	add	r0, r8, r7
   17aa0:	ldr	r0, [r0, #8]
   17aa4:	add	r1, r7, r0
   17aa8:	adds	r1, r9, r1
   17aac:	beq	18654 <test_scan@@Base+0x1b68>
   17ab0:	add	r1, r8, r0
   17ab4:	ldr	r2, [sp, #44]	; 0x2c
   17ab8:	add	r1, r1, r7
   17abc:	ldr	r1, [r1, #8]
   17ac0:	sub	r1, r0, r1
   17ac4:	add	r1, r2, r1
   17ac8:	add	r1, r1, r7
   17acc:	ldrh	r2, [r1, #8]
   17ad0:	cmp	r2, #12
   17ad4:	bcc	18644 <test_scan@@Base+0x1b58>
   17ad8:	ldrh	r1, [r1, #18]
   17adc:	cmp	r1, #0
   17ae0:	beq	18644 <test_scan@@Base+0x1b58>
   17ae4:	add	r2, r0, r1
   17ae8:	add	r2, r8, r2
   17aec:	add	r2, r2, r7
   17af0:	ldr	r2, [r2, #8]
   17af4:	add	r0, r2, r0
   17af8:	add	r0, r0, r1
   17afc:	ldr	r1, [sp, #44]	; 0x2c
   17b00:	add	r0, r7, r0
   17b04:	add	r0, r1, r0
   17b08:	mov	r1, r5
   17b0c:	add	r0, r0, #12
   17b10:	bl	12e08 <strcmp@plt>
   17b14:	cmp	r0, #0
   17b18:	beq	17c00 <test_scan@@Base+0x1114>
   17b1c:	ldr	r0, [sp, #40]	; 0x28
   17b20:	add	r4, r4, #1
   17b24:	add	r7, r7, #4
   17b28:	cmp	r4, r0
   17b2c:	bcc	17a94 <test_scan@@Base+0xfa8>
   17b30:	b	17c08 <test_scan@@Base+0x111c>
   17b34:	ldr	r0, [pc, #3480]	; 188d4 <test_scan@@Base+0x1de8>
   17b38:	add	r0, pc, r0
   17b3c:	b	170b4 <test_scan@@Base+0x5c8>
   17b40:	muleq	r0, ip, r2
   17b44:	ldr	r0, [pc, #3468]	; 188d8 <test_scan@@Base+0x1dec>
   17b48:	ldr	r1, [pc, #3468]	; 188dc <test_scan@@Base+0x1df0>
   17b4c:	ldr	r3, [pc, #3468]	; 188e0 <test_scan@@Base+0x1df4>
   17b50:	mov	r2, #235	; 0xeb
   17b54:	add	r0, pc, r0
   17b58:	add	r1, pc, r1
   17b5c:	add	r3, pc, r3
   17b60:	bl	12f04 <__assert_fail@plt>
   17b64:	ldr	r0, [pc, #3448]	; 188e4 <test_scan@@Base+0x1df8>
   17b68:	ldr	r1, [pc, #3448]	; 188e8 <test_scan@@Base+0x1dfc>
   17b6c:	ldr	r3, [pc, #3448]	; 188ec <test_scan@@Base+0x1e00>
   17b70:	movw	r2, #711	; 0x2c7
   17b74:	add	r0, pc, r0
   17b78:	add	r1, pc, r1
   17b7c:	add	r3, pc, r3
   17b80:	bl	12f04 <__assert_fail@plt>
   17b84:	ldr	r0, [pc, #3428]	; 188f0 <test_scan@@Base+0x1e04>
   17b88:	ldr	r1, [pc, #3428]	; 188f4 <test_scan@@Base+0x1e08>
   17b8c:	ldr	r3, [pc, #3428]	; 188f8 <test_scan@@Base+0x1e0c>
   17b90:	movw	r2, #1305	; 0x519
   17b94:	add	r0, pc, r0
   17b98:	add	r1, pc, r1
   17b9c:	add	r3, pc, r3
   17ba0:	bl	12f04 <__assert_fail@plt>
   17ba4:	ldr	r0, [pc, #3408]	; 188fc <test_scan@@Base+0x1e10>
   17ba8:	ldr	r1, [pc, #3408]	; 18900 <test_scan@@Base+0x1e14>
   17bac:	ldr	r3, [pc, #3408]	; 18904 <test_scan@@Base+0x1e18>
   17bb0:	movw	r2, #1307	; 0x51b
   17bb4:	add	r0, pc, r0
   17bb8:	add	r1, pc, r1
   17bbc:	add	r3, pc, r3
   17bc0:	bl	12f04 <__assert_fail@plt>
   17bc4:	ldr	r0, [pc, #3388]	; 18908 <test_scan@@Base+0x1e1c>
   17bc8:	ldr	r1, [pc, #3388]	; 1890c <test_scan@@Base+0x1e20>
   17bcc:	ldr	r3, [pc, #3388]	; 18910 <test_scan@@Base+0x1e24>
   17bd0:	movw	r2, #1309	; 0x51d
   17bd4:	add	r0, pc, r0
   17bd8:	add	r1, pc, r1
   17bdc:	add	r3, pc, r3
   17be0:	bl	12f04 <__assert_fail@plt>
   17be4:	ldr	r0, [pc, #3368]	; 18914 <test_scan@@Base+0x1e28>
   17be8:	add	r0, pc, r0
   17bec:	b	170b4 <test_scan@@Base+0x5c8>
   17bf0:	ldr	r0, [pc, #3360]	; 18918 <test_scan@@Base+0x1e2c>
   17bf4:	add	r0, pc, r0
   17bf8:	b	170b4 <test_scan@@Base+0x5c8>
   17bfc:	andeq	lr, r0, r4, lsl #8
   17c00:	cmp	r7, #0
   17c04:	beq	17c20 <test_scan@@Base+0x1134>
   17c08:	ldr	r0, [pc, #3340]	; 1891c <test_scan@@Base+0x1e30>
   17c0c:	add	r0, pc, r0
   17c10:	b	170b4 <test_scan@@Base+0x5c8>
   17c14:	andeq	r0, r1, ip, lsl r1
   17c18:			; <UNDEFINED> instruction: 0x0000e3ba
   17c1c:	andeq	r0, r1, r8, lsr #1
   17c20:	ldr	r5, [pc, #3320]	; 18920 <test_scan@@Base+0x1e34>
   17c24:	mov	r4, #1
   17c28:	mov	r7, #0
   17c2c:	add	r5, pc, r5
   17c30:	cmp	sl, r4
   17c34:	bls	18f54 <test_scan@@Base+0x2468>
   17c38:	add	r0, r8, r7
   17c3c:	ldr	r0, [r0, #8]
   17c40:	add	r1, r7, r0
   17c44:	adds	r1, r9, r1
   17c48:	beq	18654 <test_scan@@Base+0x1b68>
   17c4c:	add	r1, r8, r0
   17c50:	add	r1, r1, r7
   17c54:	ldr	r1, [r1, #8]
   17c58:	sub	r1, r0, r1
   17c5c:	add	r1, r8, r1
   17c60:	add	r1, r1, r7
   17c64:	ldrh	r2, [r1, #8]
   17c68:	cmp	r2, #12
   17c6c:	bcc	18644 <test_scan@@Base+0x1b58>
   17c70:	ldrh	r1, [r1, #18]
   17c74:	cmp	r1, #0
   17c78:	beq	18644 <test_scan@@Base+0x1b58>
   17c7c:	add	r2, r0, r1
   17c80:	add	r2, r8, r2
   17c84:	add	r2, r2, r7
   17c88:	ldr	r2, [r2, #8]
   17c8c:	add	r0, r2, r0
   17c90:	add	r0, r0, r1
   17c94:	ldr	r1, [sp, #44]	; 0x2c
   17c98:	add	r0, r7, r0
   17c9c:	add	r0, r1, r0
   17ca0:	mov	r1, r5
   17ca4:	add	r0, r0, #12
   17ca8:	bl	12e08 <strcmp@plt>
   17cac:	cmp	r0, #0
   17cb0:	beq	17ce4 <test_scan@@Base+0x11f8>
   17cb4:	ldr	r0, [sp, #40]	; 0x28
   17cb8:	add	r4, r4, #1
   17cbc:	add	r7, r7, #4
   17cc0:	cmp	r4, r0
   17cc4:	bcc	17c30 <test_scan@@Base+0x1144>
   17cc8:	b	17e18 <test_scan@@Base+0x132c>
   17ccc:	andeq	lr, r0, lr, ror #6
   17cd0:	andeq	r0, r1, r4, lsr r0
   17cd4:	andeq	lr, r0, pc, ror #13
   17cd8:	andeq	pc, r0, r0, asr #31
   17cdc:	andeq	lr, r0, r6, lsl #5
   17ce0:	andeq	pc, r0, ip, asr #30
   17ce4:	cmp	r7, #4
   17ce8:	bne	17e18 <test_scan@@Base+0x132c>
   17cec:	ldr	r0, [sp, #44]	; 0x2c
   17cf0:	ldr	r5, [pc, #3116]	; 18924 <test_scan@@Base+0x1e38>
   17cf4:	mov	r6, #1
   17cf8:	add	r4, r0, #12
   17cfc:	add	r5, pc, r5
   17d00:	cmp	sl, r6
   17d04:	bls	18f54 <test_scan@@Base+0x2468>
   17d08:	ldr	r0, [r4, #-4]
   17d0c:	add	r1, r4, r0
   17d10:	cmp	r1, #4
   17d14:	beq	18654 <test_scan@@Base+0x1b68>
   17d18:	ldr	r1, [r1, #-4]
   17d1c:	sub	r1, r0, r1
   17d20:	add	r1, r4, r1
   17d24:	ldrh	r2, [r1, #-4]
   17d28:	cmp	r2, #12
   17d2c:	bcc	18644 <test_scan@@Base+0x1b58>
   17d30:	ldrh	r1, [r1, #6]
   17d34:	cmp	r1, #0
   17d38:	beq	18644 <test_scan@@Base+0x1b58>
   17d3c:	add	r2, r0, r1
   17d40:	add	r2, r4, r2
   17d44:	ldr	r2, [r2, #-4]
   17d48:	add	r0, r2, r0
   17d4c:	add	r0, r0, r1
   17d50:	mov	r1, r5
   17d54:	add	r0, r4, r0
   17d58:	bl	12e08 <strcmp@plt>
   17d5c:	cmp	r0, #0
   17d60:	beq	17e24 <test_scan@@Base+0x1338>
   17d64:	ldr	r0, [sp, #40]	; 0x28
   17d68:	add	r6, r6, #1
   17d6c:	add	r4, r4, #4
   17d70:	cmp	r6, r0
   17d74:	bcc	17d00 <test_scan@@Base+0x1214>
   17d78:	ldr	r0, [sp, #16]
   17d7c:	ldr	r1, [sp, #12]
   17d80:	cmn	r0, #4
   17d84:	mvnls	r0, #3
   17d88:	sub	r0, r1, r0, lsl #2
   17d8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17d90:	ldr	r5, [pc, #2960]	; 18928 <test_scan@@Base+0x1e3c>
   17d94:	ldr	r6, [sp, #40]	; 0x28
   17d98:	add	r4, r1, r0
   17d9c:	add	r5, pc, r5
   17da0:	subs	r6, r6, #1
   17da4:	bls	17e34 <test_scan@@Base+0x1348>
   17da8:	cmp	sl, r6
   17dac:	bls	18f54 <test_scan@@Base+0x2468>
   17db0:	ldr	r0, [r4]
   17db4:	adds	r1, r4, r0
   17db8:	beq	18654 <test_scan@@Base+0x1b68>
   17dbc:	ldr	r1, [r4, r0]
   17dc0:	sub	r1, r0, r1
   17dc4:	add	r1, r4, r1
   17dc8:	ldrh	r2, [r1]
   17dcc:	cmp	r2, #12
   17dd0:	bcc	18644 <test_scan@@Base+0x1b58>
   17dd4:	ldrh	r1, [r1, #10]
   17dd8:	cmp	r1, #0
   17ddc:	beq	18644 <test_scan@@Base+0x1b58>
   17de0:	add	r2, r0, r1
   17de4:	ldr	r2, [r4, r2]
   17de8:	add	r0, r2, r0
   17dec:	add	r0, r0, r1
   17df0:	mov	r1, r5
   17df4:	add	r0, r4, r0
   17df8:	add	r0, r0, #4
   17dfc:	bl	12e08 <strcmp@plt>
   17e00:	sub	r4, r4, #4
   17e04:	cmp	r0, #0
   17e08:	bne	17da0 <test_scan@@Base+0x12b4>
   17e0c:	ldr	r0, [pc, #2840]	; 1892c <test_scan@@Base+0x1e40>
   17e10:	add	r0, pc, r0
   17e14:	b	170b4 <test_scan@@Base+0x5c8>
   17e18:	ldr	r0, [pc, #2832]	; 18930 <test_scan@@Base+0x1e44>
   17e1c:	add	r0, pc, r0
   17e20:	b	170b4 <test_scan@@Base+0x5c8>
   17e24:	ldr	r0, [pc, #2824]	; 18934 <test_scan@@Base+0x1e48>
   17e28:	add	r0, pc, r0
   17e2c:	b	170b4 <test_scan@@Base+0x5c8>
   17e30:	andeq	pc, r0, ip, ror #29
   17e34:	ldr	r0, [sp, #16]
   17e38:	ldr	r1, [sp, #12]
   17e3c:	cmn	r0, #4
   17e40:	mvnls	r0, #3
   17e44:	sub	r0, r1, r0, lsl #2
   17e48:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17e4c:	ldr	r5, [pc, #2788]	; 18938 <test_scan@@Base+0x1e4c>
   17e50:	ldr	r6, [sp, #40]	; 0x28
   17e54:	add	r4, r1, r0
   17e58:	add	r5, pc, r5
   17e5c:	subs	r6, r6, #1
   17e60:	bls	17ed8 <test_scan@@Base+0x13ec>
   17e64:	cmp	sl, r6
   17e68:	bls	18f54 <test_scan@@Base+0x2468>
   17e6c:	ldr	r0, [r4]
   17e70:	adds	r1, r4, r0
   17e74:	beq	18654 <test_scan@@Base+0x1b68>
   17e78:	ldr	r1, [r4, r0]
   17e7c:	sub	r1, r0, r1
   17e80:	add	r1, r4, r1
   17e84:	ldrh	r2, [r1]
   17e88:	cmp	r2, #12
   17e8c:	bcc	18644 <test_scan@@Base+0x1b58>
   17e90:	ldrh	r1, [r1, #10]
   17e94:	cmp	r1, #0
   17e98:	beq	18644 <test_scan@@Base+0x1b58>
   17e9c:	add	r2, r0, r1
   17ea0:	ldr	r2, [r4, r2]
   17ea4:	add	r0, r2, r0
   17ea8:	add	r0, r0, r1
   17eac:	mov	r1, r5
   17eb0:	add	r0, r4, r0
   17eb4:	add	r0, r0, #4
   17eb8:	bl	12e08 <strcmp@plt>
   17ebc:	sub	r4, r4, #4
   17ec0:	cmp	r0, #0
   17ec4:	bne	17e5c <test_scan@@Base+0x1370>
   17ec8:	ldr	r0, [pc, #2668]	; 1893c <test_scan@@Base+0x1e50>
   17ecc:	add	r0, pc, r0
   17ed0:	b	170b4 <test_scan@@Base+0x5c8>
   17ed4:	strheq	lr, [r0], -r6
   17ed8:	ldr	r0, [sp, #16]
   17edc:	ldr	r1, [sp, #12]
   17ee0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17ee4:	ldr	r5, [pc, #2644]	; 18940 <test_scan@@Base+0x1e54>
   17ee8:	cmn	r0, #4
   17eec:	add	r5, pc, r5
   17ef0:	mvnls	r0, #3
   17ef4:	sub	r1, r1, r0, lsl #2
   17ef8:	add	r4, r2, r1
   17efc:	mvn	r1, #1
   17f00:	sub	r7, r1, r0
   17f04:	add	r0, r7, #1
   17f08:	cmp	r0, #2
   17f0c:	bcc	17f80 <test_scan@@Base+0x1494>
   17f10:	cmp	sl, r7
   17f14:	bls	18f54 <test_scan@@Base+0x2468>
   17f18:	ldr	r0, [r4]
   17f1c:	adds	r1, r4, r0
   17f20:	beq	18654 <test_scan@@Base+0x1b68>
   17f24:	ldr	r1, [r4, r0]
   17f28:	sub	r1, r0, r1
   17f2c:	add	r1, r4, r1
   17f30:	ldrh	r2, [r1]
   17f34:	cmp	r2, #12
   17f38:	bcc	18644 <test_scan@@Base+0x1b58>
   17f3c:	ldrh	r1, [r1, #10]
   17f40:	cmp	r1, #0
   17f44:	beq	18644 <test_scan@@Base+0x1b58>
   17f48:	add	r2, r0, r1
   17f4c:	ldr	r2, [r4, r2]
   17f50:	add	r0, r2, r0
   17f54:	add	r0, r0, r1
   17f58:	mov	r1, r5
   17f5c:	add	r0, r4, r0
   17f60:	add	r0, r0, #4
   17f64:	bl	12e08 <strcmp@plt>
   17f68:	sub	r4, r4, #4
   17f6c:	sub	r7, r7, #1
   17f70:	cmp	r0, #0
   17f74:	bne	17f04 <test_scan@@Base+0x1418>
   17f78:	cmp	r7, #0
   17f7c:	beq	17f98 <test_scan@@Base+0x14ac>
   17f80:	ldr	r0, [pc, #4088]	; 18f80 <test_scan@@Base+0x2494>
   17f84:	add	r0, pc, r0
   17f88:	b	170b4 <test_scan@@Base+0x5c8>
   17f8c:	andeq	lr, r0, sl, lsl r0
   17f90:	andeq	r0, r1, r8, asr #23
   17f94:	ldrdeq	r0, [r1], -r8
   17f98:	ldr	r0, [sp, #16]
   17f9c:	ldr	r1, [sp, #12]
   17fa0:	cmn	r0, #4
   17fa4:	mvnls	r0, #3
   17fa8:	sub	r0, r1, r0, lsl #2
   17fac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17fb0:	ldr	r5, [pc, #4088]	; 18fb0 <test_scan@@Base+0x24c4>
   17fb4:	ldr	r6, [sp, #40]	; 0x28
   17fb8:	add	r4, r1, r0
   17fbc:	add	r5, pc, r5
   17fc0:	cmp	r6, #2
   17fc4:	bcc	180e4 <test_scan@@Base+0x15f8>
   17fc8:	sub	r6, r6, #1
   17fcc:	cmp	sl, r6
   17fd0:	bls	18f54 <test_scan@@Base+0x2468>
   17fd4:	ldr	r0, [r4]
   17fd8:	adds	r1, r4, r0
   17fdc:	beq	18654 <test_scan@@Base+0x1b68>
   17fe0:	ldr	r1, [r4, r0]
   17fe4:	sub	r1, r0, r1
   17fe8:	add	r1, r4, r1
   17fec:	ldrh	r2, [r1]
   17ff0:	cmp	r2, #12
   17ff4:	bcc	18644 <test_scan@@Base+0x1b58>
   17ff8:	ldrh	r1, [r1, #10]
   17ffc:	cmp	r1, #0
   18000:	beq	18644 <test_scan@@Base+0x1b58>
   18004:	add	r2, r0, r1
   18008:	ldr	r2, [r4, r2]
   1800c:	add	r0, r2, r0
   18010:	add	r0, r0, r1
   18014:	mov	r1, r5
   18018:	add	r0, r4, r0
   1801c:	add	r0, r0, #4
   18020:	bl	12e08 <strcmp@plt>
   18024:	sub	r4, r4, #4
   18028:	cmp	r0, #0
   1802c:	bne	17fc0 <test_scan@@Base+0x14d4>
   18030:	cmp	r6, #2
   18034:	bne	180e4 <test_scan@@Base+0x15f8>
   18038:	ldr	r0, [sp, #16]
   1803c:	ldr	r1, [sp, #12]
   18040:	cmn	r0, #4
   18044:	mvnls	r0, #3
   18048:	sub	r0, r1, r0, lsl #2
   1804c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18050:	ldr	r5, [pc, #4032]	; 19018 <test_scan@@Base+0x252c>
   18054:	add	r4, r1, r0
   18058:	add	r5, pc, r5
   1805c:	ldr	r0, [sp, #40]	; 0x28
   18060:	subs	r0, r0, #1
   18064:	str	r0, [sp, #40]	; 0x28
   18068:	bls	180f0 <test_scan@@Base+0x1604>
   1806c:	ldr	r0, [sp, #40]	; 0x28
   18070:	cmp	sl, r0
   18074:	bls	18f54 <test_scan@@Base+0x2468>
   18078:	ldr	r0, [r4]
   1807c:	cmn	r4, r0
   18080:	beq	18654 <test_scan@@Base+0x1b68>
   18084:	ldr	r1, [r4, r0]
   18088:	sub	r1, r0, r1
   1808c:	add	r1, r4, r1
   18090:	ldrh	r2, [r1]
   18094:	cmp	r2, #12
   18098:	bcc	18644 <test_scan@@Base+0x1b58>
   1809c:	ldrh	r1, [r1, #10]
   180a0:	cmp	r1, #0
   180a4:	beq	18644 <test_scan@@Base+0x1b58>
   180a8:	add	r2, r0, r1
   180ac:	ldr	r2, [r4, r2]
   180b0:	add	r0, r2, r0
   180b4:	add	r0, r0, r1
   180b8:	mov	r1, r5
   180bc:	add	r0, r4, r0
   180c0:	add	r0, r0, #4
   180c4:	bl	12e08 <strcmp@plt>
   180c8:	sub	r4, r4, #4
   180cc:	cmp	r0, #0
   180d0:	bne	1805c <test_scan@@Base+0x1570>
   180d4:	ldr	r0, [pc, #3912]	; 19024 <test_scan@@Base+0x2538>
   180d8:	add	r0, pc, r0
   180dc:	b	170b4 <test_scan@@Base+0x5c8>
   180e0:	andeq	lr, r0, r4, asr #7
   180e4:	ldr	r0, [pc, #4020]	; 190a0 <test_scan@@Base+0x25b4>
   180e8:	add	r0, pc, r0
   180ec:	b	170b4 <test_scan@@Base+0x5c8>
   180f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   180f4:	ldr	r1, [sp, #20]
   180f8:	ldr	r5, [pc, #3868]	; 1901c <test_scan@@Base+0x2530>
   180fc:	mov	r6, sl
   18100:	add	r4, r0, r1
   18104:	add	r5, pc, r5
   18108:	cmp	r6, sl
   1810c:	bls	18188 <test_scan@@Base+0x169c>
   18110:	sub	r6, r6, #1
   18114:	cmp	sl, r6
   18118:	bls	18f54 <test_scan@@Base+0x2468>
   1811c:	ldr	r0, [r4]
   18120:	adds	r1, r4, r0
   18124:	beq	18654 <test_scan@@Base+0x1b68>
   18128:	ldr	r1, [r4, r0]
   1812c:	sub	r1, r0, r1
   18130:	add	r1, r4, r1
   18134:	ldrh	r2, [r1]
   18138:	cmp	r2, #12
   1813c:	bcc	18644 <test_scan@@Base+0x1b58>
   18140:	ldrh	r1, [r1, #10]
   18144:	cmp	r1, #0
   18148:	beq	18644 <test_scan@@Base+0x1b58>
   1814c:	add	r2, r0, r1
   18150:	ldr	r2, [r4, r2]
   18154:	add	r0, r2, r0
   18158:	add	r0, r0, r1
   1815c:	mov	r1, r5
   18160:	add	r0, r4, r0
   18164:	add	r0, r0, #4
   18168:	bl	12e08 <strcmp@plt>
   1816c:	sub	r4, r4, #4
   18170:	cmp	r0, #0
   18174:	bne	18108 <test_scan@@Base+0x161c>
   18178:	ldr	r0, [pc, #3752]	; 19028 <test_scan@@Base+0x253c>
   1817c:	add	r0, pc, r0
   18180:	b	170b4 <test_scan@@Base+0x5c8>
   18184:	strdeq	lr, [r0], -r4
   18188:	ldr	r5, [pc, #3728]	; 19020 <test_scan@@Base+0x2534>
   1818c:	mov	r8, #0
   18190:	add	r5, pc, r5
   18194:	cmp	sl, r8
   18198:	bls	18f54 <test_scan@@Base+0x2468>
   1819c:	ldr	r0, [r9, #-4]
   181a0:	add	r1, r9, r0
   181a4:	cmp	r1, #4
   181a8:	beq	18654 <test_scan@@Base+0x1b68>
   181ac:	ldr	r1, [r1, #-4]
   181b0:	sub	r1, r0, r1
   181b4:	add	r1, r9, r1
   181b8:	ldrh	r2, [r1, #-4]
   181bc:	cmp	r2, #12
   181c0:	bcc	18644 <test_scan@@Base+0x1b58>
   181c4:	ldrh	r1, [r1, #6]
   181c8:	cmp	r1, #0
   181cc:	beq	18644 <test_scan@@Base+0x1b58>
   181d0:	add	r2, r0, r1
   181d4:	add	r2, r9, r2
   181d8:	ldr	r2, [r2, #-4]
   181dc:	add	r0, r2, r0
   181e0:	add	r0, r0, r1
   181e4:	mov	r1, r5
   181e8:	add	r0, r9, r0
   181ec:	bl	12e08 <strcmp@plt>
   181f0:	cmp	r0, #0
   181f4:	beq	1820c <test_scan@@Base+0x1720>
   181f8:	add	r8, r8, #1
   181fc:	add	r9, r9, #4
   18200:	cmp	r8, sl
   18204:	bcc	18194 <test_scan@@Base+0x16a8>
   18208:	b	182b0 <test_scan@@Base+0x17c4>
   1820c:	ldr	r0, [sp, #44]	; 0x2c
   18210:	ldr	r5, [pc, #3604]	; 1902c <test_scan@@Base+0x2540>
   18214:	mov	r4, #0
   18218:	add	r9, r0, #12
   1821c:	add	r5, pc, r5
   18220:	b	18230 <test_scan@@Base+0x1744>
   18224:	andeq	r0, r1, r8, asr #19
   18228:	andeq	sp, r0, r6, lsr #27
   1822c:	mov	r4, r6
   18230:	add	r7, r9, r8, lsl #2
   18234:	add	r6, r4, #1
   18238:	add	r8, r8, #1
   1823c:	cmp	r8, sl
   18240:	bcs	182a8 <test_scan@@Base+0x17bc>
   18244:	ldr	r0, [r7, #-4]
   18248:	add	r1, r7, r0
   1824c:	cmp	r1, #4
   18250:	beq	18654 <test_scan@@Base+0x1b68>
   18254:	ldr	r1, [r1, #-4]
   18258:	sub	r1, r0, r1
   1825c:	add	r1, r7, r1
   18260:	ldrh	r2, [r1, #-4]
   18264:	cmp	r2, #12
   18268:	bcc	18644 <test_scan@@Base+0x1b58>
   1826c:	ldrh	r1, [r1, #6]
   18270:	cmp	r1, #0
   18274:	beq	18644 <test_scan@@Base+0x1b58>
   18278:	add	r2, r0, r1
   1827c:	add	r2, r7, r2
   18280:	ldr	r2, [r2, #-4]
   18284:	add	r0, r2, r0
   18288:	add	r0, r0, r1
   1828c:	mov	r1, r5
   18290:	add	r0, r7, r0
   18294:	bl	12e08 <strcmp@plt>
   18298:	add	r7, r7, #4
   1829c:	cmp	r0, #0
   182a0:	bne	18238 <test_scan@@Base+0x174c>
   182a4:	b	1822c <test_scan@@Base+0x1740>
   182a8:	cmp	r4, #0
   182ac:	beq	182c0 <test_scan@@Base+0x17d4>
   182b0:	ldr	r0, [pc, #3564]	; 190a4 <test_scan@@Base+0x25b8>
   182b4:	add	r0, pc, r0
   182b8:	b	170b4 <test_scan@@Base+0x5c8>
   182bc:	muleq	r0, fp, r1
   182c0:	ldr	r0, [sp, #44]	; 0x2c
   182c4:	ldr	r8, [pc, #3428]	; 19030 <test_scan@@Base+0x2544>
   182c8:	mov	r5, #0
   182cc:	add	r4, r0, #8
   182d0:	add	r8, pc, r8
   182d4:	cmp	sl, r5
   182d8:	bls	18f54 <test_scan@@Base+0x2468>
   182dc:	ldr	r0, [r4, #-4]
   182e0:	add	r1, r4, r0
   182e4:	cmp	r1, #4
   182e8:	beq	18654 <test_scan@@Base+0x1b68>
   182ec:	ldr	r1, [r1, #-4]
   182f0:	sub	r1, r0, r1
   182f4:	add	r1, r4, r1
   182f8:	ldrh	r2, [r1, #-4]
   182fc:	cmp	r2, #12
   18300:	bcc	18644 <test_scan@@Base+0x1b58>
   18304:	ldrh	r1, [r1, #6]
   18308:	cmp	r1, #0
   1830c:	beq	18644 <test_scan@@Base+0x1b58>
   18310:	add	r2, r0, r1
   18314:	add	r2, r4, r2
   18318:	ldr	r2, [r2, #-4]
   1831c:	add	r0, r2, r0
   18320:	add	r0, r0, r1
   18324:	mov	r1, r8
   18328:	add	r0, r4, r0
   1832c:	bl	12e08 <strcmp@plt>
   18330:	cmp	r0, #0
   18334:	beq	18350 <test_scan@@Base+0x1864>
   18338:	add	r5, r5, #1
   1833c:	add	r4, r4, #4
   18340:	cmp	r5, sl
   18344:	bcc	182d4 <test_scan@@Base+0x17e8>
   18348:	b	18400 <test_scan@@Base+0x1914>
   1834c:	andeq	sp, r0, r0, ror ip
   18350:	ldr	r0, [sp, #44]	; 0x2c
   18354:	ldr	r8, [pc, #3288]	; 19034 <test_scan@@Base+0x2548>
   18358:	mov	r7, #0
   1835c:	add	r4, r0, #12
   18360:	add	r8, pc, r8
   18364:	add	r6, r4, r5, lsl #2
   18368:	add	r7, r7, #1
   1836c:	add	r5, r5, #1
   18370:	cmp	r5, sl
   18374:	bcs	183dc <test_scan@@Base+0x18f0>
   18378:	ldr	r0, [r6, #-4]
   1837c:	add	r1, r6, r0
   18380:	cmp	r1, #4
   18384:	beq	18654 <test_scan@@Base+0x1b68>
   18388:	ldr	r1, [r1, #-4]
   1838c:	sub	r1, r0, r1
   18390:	add	r1, r6, r1
   18394:	ldrh	r2, [r1, #-4]
   18398:	cmp	r2, #12
   1839c:	bcc	18644 <test_scan@@Base+0x1b58>
   183a0:	ldrh	r1, [r1, #6]
   183a4:	cmp	r1, #0
   183a8:	beq	18644 <test_scan@@Base+0x1b58>
   183ac:	add	r2, r0, r1
   183b0:	add	r2, r6, r2
   183b4:	ldr	r2, [r2, #-4]
   183b8:	add	r0, r2, r0
   183bc:	add	r0, r0, r1
   183c0:	mov	r1, r8
   183c4:	add	r0, r6, r0
   183c8:	bl	12e08 <strcmp@plt>
   183cc:	add	r6, r6, #4
   183d0:	cmp	r0, #0
   183d4:	bne	1836c <test_scan@@Base+0x1880>
   183d8:	b	18364 <test_scan@@Base+0x1878>
   183dc:	cmp	r7, #0
   183e0:	beq	18400 <test_scan@@Base+0x1914>
   183e4:	ldr	r0, [pc, #3260]	; 190a8 <test_scan@@Base+0x25bc>
   183e8:	add	r0, pc, r0
   183ec:	b	170b4 <test_scan@@Base+0x5c8>
   183f0:	andeq	r0, r1, r8, asr #15
   183f4:	ldrdeq	r0, [r1], -ip
   183f8:	andeq	r0, r1, r8, lsl #15
   183fc:	andeq	sp, r0, sl, lsl #24
   18400:	ldr	r0, [sp, #44]	; 0x2c
   18404:	ldr	r8, [pc, #3116]	; 19038 <test_scan@@Base+0x254c>
   18408:	mov	r5, #0
   1840c:	add	r4, r0, #8
   18410:	add	r8, pc, r8
   18414:	cmp	sl, r5
   18418:	bls	18f54 <test_scan@@Base+0x2468>
   1841c:	ldr	r0, [r4, #-4]
   18420:	add	r1, r4, r0
   18424:	cmp	r1, #4
   18428:	beq	18654 <test_scan@@Base+0x1b68>
   1842c:	ldr	r1, [r1, #-4]
   18430:	sub	r1, r0, r1
   18434:	add	r1, r4, r1
   18438:	ldrh	r2, [r1, #-4]
   1843c:	cmp	r2, #12
   18440:	bcc	18644 <test_scan@@Base+0x1b58>
   18444:	ldrh	r1, [r1, #6]
   18448:	cmp	r1, #0
   1844c:	beq	18644 <test_scan@@Base+0x1b58>
   18450:	add	r2, r0, r1
   18454:	add	r2, r4, r2
   18458:	ldr	r2, [r2, #-4]
   1845c:	add	r0, r2, r0
   18460:	add	r0, r0, r1
   18464:	mov	r1, r8
   18468:	add	r0, r4, r0
   1846c:	bl	12e08 <strcmp@plt>
   18470:	cmp	r0, #0
   18474:	beq	1848c <test_scan@@Base+0x19a0>
   18478:	add	r5, r5, #1
   1847c:	add	r4, r4, #4
   18480:	cmp	r5, sl
   18484:	bcc	18414 <test_scan@@Base+0x1928>
   18488:	b	18524 <test_scan@@Base+0x1a38>
   1848c:	ldr	r8, [pc, #2984]	; 1903c <test_scan@@Base+0x2550>
   18490:	mov	r4, #0
   18494:	add	r8, pc, r8
   18498:	b	184a4 <test_scan@@Base+0x19b8>
   1849c:	andeq	sp, r0, r6, ror fp
   184a0:	mov	r4, r6
   184a4:	add	r7, r9, r5, lsl #2
   184a8:	add	r6, r4, #1
   184ac:	add	r5, r5, #1
   184b0:	cmp	r5, sl
   184b4:	bcs	1851c <test_scan@@Base+0x1a30>
   184b8:	ldr	r0, [r7, #-4]
   184bc:	add	r1, r7, r0
   184c0:	cmp	r1, #4
   184c4:	beq	18654 <test_scan@@Base+0x1b68>
   184c8:	ldr	r1, [r1, #-4]
   184cc:	sub	r1, r0, r1
   184d0:	add	r1, r7, r1
   184d4:	ldrh	r2, [r1, #-4]
   184d8:	cmp	r2, #12
   184dc:	bcc	18644 <test_scan@@Base+0x1b58>
   184e0:	ldrh	r1, [r1, #6]
   184e4:	cmp	r1, #0
   184e8:	beq	18644 <test_scan@@Base+0x1b58>
   184ec:	add	r2, r0, r1
   184f0:	add	r2, r7, r2
   184f4:	ldr	r2, [r2, #-4]
   184f8:	add	r0, r2, r0
   184fc:	add	r0, r0, r1
   18500:	mov	r1, r8
   18504:	add	r0, r7, r0
   18508:	bl	12e08 <strcmp@plt>
   1850c:	add	r7, r7, #4
   18510:	cmp	r0, #0
   18514:	bne	184ac <test_scan@@Base+0x19c0>
   18518:	b	184a0 <test_scan@@Base+0x19b4>
   1851c:	cmp	r4, #0
   18520:	beq	18534 <test_scan@@Base+0x1a48>
   18524:	ldr	r0, [pc, #2840]	; 19044 <test_scan@@Base+0x2558>
   18528:	add	r0, pc, r0
   1852c:	b	170b4 <test_scan@@Base+0x5c8>
   18530:	andeq	sp, r0, r4, ror pc
   18534:	ldr	r0, [sp, #44]	; 0x2c
   18538:	ldr	r8, [pc, #2816]	; 19040 <test_scan@@Base+0x2554>
   1853c:	mov	r5, #0
   18540:	add	r4, r0, #8
   18544:	add	r8, pc, r8
   18548:	cmp	sl, r5
   1854c:	bls	18f54 <test_scan@@Base+0x2468>
   18550:	ldr	r0, [r4, #-4]
   18554:	add	r1, r4, r0
   18558:	cmp	r1, #4
   1855c:	beq	18654 <test_scan@@Base+0x1b68>
   18560:	ldr	r1, [r1, #-4]
   18564:	sub	r1, r0, r1
   18568:	add	r1, r4, r1
   1856c:	ldrh	r2, [r1, #-4]
   18570:	cmp	r2, #12
   18574:	bcc	18644 <test_scan@@Base+0x1b58>
   18578:	ldrh	r1, [r1, #6]
   1857c:	cmp	r1, #0
   18580:	beq	18644 <test_scan@@Base+0x1b58>
   18584:	add	r2, r0, r1
   18588:	add	r2, r4, r2
   1858c:	ldr	r2, [r2, #-4]
   18590:	add	r0, r2, r0
   18594:	add	r0, r0, r1
   18598:	mov	r1, r8
   1859c:	add	r0, r4, r0
   185a0:	bl	12e08 <strcmp@plt>
   185a4:	cmp	r0, #0
   185a8:	beq	185c0 <test_scan@@Base+0x1ad4>
   185ac:	add	r5, r5, #1
   185b0:	add	r4, r4, #4
   185b4:	cmp	r5, sl
   185b8:	bcc	18548 <test_scan@@Base+0x1a5c>
   185bc:	b	186d8 <test_scan@@Base+0x1bec>
   185c0:	ldr	r8, [pc, #2688]	; 19048 <test_scan@@Base+0x255c>
   185c4:	mov	r7, #0
   185c8:	add	r8, pc, r8
   185cc:	add	r4, r9, r5, lsl #2
   185d0:	add	r7, r7, #1
   185d4:	add	r5, r5, #1
   185d8:	cmp	r5, sl
   185dc:	bcs	18674 <test_scan@@Base+0x1b88>
   185e0:	ldr	r0, [r4, #-4]
   185e4:	add	r1, r4, r0
   185e8:	cmp	r1, #4
   185ec:	beq	18654 <test_scan@@Base+0x1b68>
   185f0:	ldr	r1, [r1, #-4]
   185f4:	sub	r1, r0, r1
   185f8:	add	r1, r4, r1
   185fc:	ldrh	r2, [r1, #-4]
   18600:	cmp	r2, #12
   18604:	bcc	18644 <test_scan@@Base+0x1b58>
   18608:	ldrh	r1, [r1, #6]
   1860c:	cmp	r1, #0
   18610:	beq	18644 <test_scan@@Base+0x1b58>
   18614:	add	r2, r0, r1
   18618:	add	r2, r4, r2
   1861c:	ldr	r2, [r2, #-4]
   18620:	add	r0, r2, r0
   18624:	add	r0, r0, r1
   18628:	mov	r1, r8
   1862c:	add	r0, r4, r0
   18630:	bl	12e08 <strcmp@plt>
   18634:	add	r4, r4, #4
   18638:	cmp	r0, #0
   1863c:	bne	185d4 <test_scan@@Base+0x1ae8>
   18640:	b	185cc <test_scan@@Base+0x1ae0>
   18644:	ldr	r0, [pc, #2504]	; 19014 <test_scan@@Base+0x2528>
   18648:	add	r0, pc, r0
   1864c:	b	1865c <test_scan@@Base+0x1b70>
   18650:	andeq	sp, r0, r4, lsl #29
   18654:	ldr	r0, [pc, #2476]	; 19008 <test_scan@@Base+0x251c>
   18658:	add	r0, pc, r0
   1865c:	ldr	r1, [pc, #2472]	; 1900c <test_scan@@Base+0x2520>
   18660:	ldr	r3, [pc, #2472]	; 19010 <test_scan@@Base+0x2524>
   18664:	movw	r2, #699	; 0x2bb
   18668:	add	r1, pc, r1
   1866c:	add	r3, pc, r3
   18670:	bl	12f04 <__assert_fail@plt>
   18674:	cmp	r7, #2
   18678:	bne	186d8 <test_scan@@Base+0x1bec>
   1867c:	ldr	r0, [sp, #28]
   18680:	ldr	r1, [sp, #24]
   18684:	ldr	r0, [r1, r0]
   18688:	cmp	r0, #0
   1868c:	beq	186ec <test_scan@@Base+0x1c00>
   18690:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18694:	ldr	r2, [sp, #28]
   18698:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1869c:	mov	r7, #0
   186a0:	add	r2, r1, r2
   186a4:	ldr	r1, [sp, #48]	; 0x30
   186a8:	add	r1, r2, r1
   186ac:	add	r3, r3, r1
   186b0:	add	r5, r3, #4
   186b4:	cmp	r0, r7
   186b8:	bls	18f90 <test_scan@@Base+0x24a4>
   186bc:	ldrb	r6, [r5, r7]
   186c0:	cmp	r6, #6
   186c4:	beq	186e4 <test_scan@@Base+0x1bf8>
   186c8:	add	r7, r7, #1
   186cc:	cmp	r7, r0
   186d0:	bcc	186b4 <test_scan@@Base+0x1bc8>
   186d4:	b	186ec <test_scan@@Base+0x1c00>
   186d8:	ldr	r0, [pc, #2412]	; 1904c <test_scan@@Base+0x2560>
   186dc:	add	r0, pc, r0
   186e0:	b	170b4 <test_scan@@Base+0x5c8>
   186e4:	cmp	r7, #0
   186e8:	beq	186f8 <test_scan@@Base+0x1c0c>
   186ec:	ldr	r0, [pc, #2396]	; 19050 <test_scan@@Base+0x2564>
   186f0:	add	r0, pc, r0
   186f4:	b	170b4 <test_scan@@Base+0x5c8>
   186f8:	mov	r7, #0
   186fc:	cmp	r0, r7
   18700:	bls	18f90 <test_scan@@Base+0x24a4>
   18704:	ldrb	r6, [r5, r7]
   18708:	cmp	r6, #1
   1870c:	beq	18724 <test_scan@@Base+0x1c38>
   18710:	add	r7, r7, #1
   18714:	cmp	r7, r0
   18718:	bcc	186fc <test_scan@@Base+0x1c10>
   1871c:	b	187bc <test_scan@@Base+0x1cd0>
   18720:	andeq	sp, r0, sl, lsr #18
   18724:	cmp	r7, #2
   18728:	bne	187bc <test_scan@@Base+0x1cd0>
   1872c:	cmp	r0, #4
   18730:	bcc	18768 <test_scan@@Base+0x1c7c>
   18734:	add	r7, r3, #7
   18738:	mov	r6, #0
   1873c:	add	r4, r6, #3
   18740:	cmp	r0, r4
   18744:	bls	18f90 <test_scan@@Base+0x24a4>
   18748:	ldrb	r4, [r7, r6]
   1874c:	cmp	r4, #1
   18750:	beq	187cc <test_scan@@Base+0x1ce0>
   18754:	add	r4, r6, #1
   18758:	add	r6, r6, #4
   1875c:	cmp	r6, r0
   18760:	mov	r6, r4
   18764:	bcc	1873c <test_scan@@Base+0x1c50>
   18768:	mov	r7, #0
   1876c:	cmp	r0, r7
   18770:	bls	18f90 <test_scan@@Base+0x24a4>
   18774:	ldrb	r6, [r5, r7]
   18778:	cmp	r6, #5
   1877c:	beq	18860 <test_scan@@Base+0x1d74>
   18780:	add	r7, r7, #1
   18784:	cmp	r7, r0
   18788:	bcc	1876c <test_scan@@Base+0x1c80>
   1878c:	mov	r7, #0
   18790:	cmp	r0, r7
   18794:	bls	18f90 <test_scan@@Base+0x24a4>
   18798:	ldrb	r6, [r5, r7]
   1879c:	cmp	r6, #2
   187a0:	beq	187dc <test_scan@@Base+0x1cf0>
   187a4:	add	r7, r7, #1
   187a8:	cmp	r7, r0
   187ac:	bcc	18790 <test_scan@@Base+0x1ca4>
   187b0:	b	1880c <test_scan@@Base+0x1d20>
   187b4:	strdeq	r0, [r1], -r4
   187b8:	andeq	r0, r1, r8, ror #7
   187bc:	ldr	r0, [pc, #2192]	; 19054 <test_scan@@Base+0x2568>
   187c0:	add	r0, pc, r0
   187c4:	b	170b4 <test_scan@@Base+0x5c8>
   187c8:			; <UNDEFINED> instruction: 0x000103bc
   187cc:	ldr	r0, [pc, #2180]	; 19058 <test_scan@@Base+0x256c>
   187d0:	add	r0, pc, r0
   187d4:	b	170b4 <test_scan@@Base+0x5c8>
   187d8:	andeq	sp, r0, r4, lsl #26
   187dc:	cmp	r7, #6
   187e0:	bne	1880c <test_scan@@Base+0x1d20>
   187e4:	mov	r7, #0
   187e8:	cmp	r0, r7
   187ec:	bls	18f90 <test_scan@@Base+0x24a4>
   187f0:	ldrb	r6, [r5, r7]
   187f4:	cmp	r6, #3
   187f8:	beq	18818 <test_scan@@Base+0x1d2c>
   187fc:	add	r7, r7, #1
   18800:	cmp	r7, r0
   18804:	bcc	187e8 <test_scan@@Base+0x1cfc>
   18808:	b	18860 <test_scan@@Base+0x1d74>
   1880c:	ldr	r0, [pc, #2120]	; 1905c <test_scan@@Base+0x2570>
   18810:	add	r0, pc, r0
   18814:	b	170b4 <test_scan@@Base+0x5c8>
   18818:	cmp	r7, #3
   1881c:	bne	18860 <test_scan@@Base+0x1d74>
   18820:	cmp	r0, #4
   18824:	bcc	18874 <test_scan@@Base+0x1d88>
   18828:	add	r7, r3, #7
   1882c:	mov	r6, #0
   18830:	add	r5, r6, #3
   18834:	cmp	r0, r5
   18838:	bls	18f90 <test_scan@@Base+0x24a4>
   1883c:	ldrb	r5, [r7, r6]
   18840:	cmp	r5, #3
   18844:	beq	1886c <test_scan@@Base+0x1d80>
   18848:	add	r5, r6, #1
   1884c:	add	r6, r6, #4
   18850:	cmp	r6, r0
   18854:	mov	r6, r5
   18858:	bcc	18830 <test_scan@@Base+0x1d44>
   1885c:	b	18874 <test_scan@@Base+0x1d88>
   18860:	ldr	r0, [pc, #2040]	; 19060 <test_scan@@Base+0x2574>
   18864:	add	r0, pc, r0
   18868:	b	170b4 <test_scan@@Base+0x5c8>
   1886c:	cmp	r6, #0
   18870:	beq	18884 <test_scan@@Base+0x1d98>
   18874:	ldr	r0, [pc, #2024]	; 19064 <test_scan@@Base+0x2578>
   18878:	add	r0, pc, r0
   1887c:	b	170b4 <test_scan@@Base+0x5c8>
   18880:	andeq	sp, r0, r6, lsr #15
   18884:	cmp	r0, #5
   18888:	bcc	18f74 <test_scan@@Base+0x2488>
   1888c:	add	r3, r3, #8
   18890:	mov	r7, #0
   18894:	add	r6, r7, #4
   18898:	cmp	r0, r6
   1889c:	bls	18f90 <test_scan@@Base+0x24a4>
   188a0:	ldrb	r6, [r3, r7]
   188a4:	cmp	r6, #3
   188a8:	beq	18944 <test_scan@@Base+0x1e58>
   188ac:	add	r6, r7, #1
   188b0:	add	r7, r7, #5
   188b4:	cmp	r7, r0
   188b8:	mov	r7, r6
   188bc:	bcc	18894 <test_scan@@Base+0x1da8>
   188c0:	b	18f74 <test_scan@@Base+0x2488>
   188c4:	andeq	r0, r1, r0, lsr #4
   188c8:	andeq	sp, r0, pc, asr #22
   188cc:	andeq	sp, r0, r8, lsl r6
   188d0:	andeq	sp, r0, sl, lsr #11
   188d4:	andeq	r0, r1, r0
   188d8:	andeq	lr, r0, r4, lsl #5
   188dc:	andeq	lr, r0, r7, asr #2
   188e0:	andeq	lr, r0, lr, lsl r3
   188e4:	andeq	sp, r0, r3, asr pc
   188e8:	andeq	sp, r0, r5, ror pc
   188ec:	andeq	lr, r0, r2, lsr r6
   188f0:	andeq	sp, r0, r1, ror #17
   188f4:	andeq	sp, r0, r0, lsl #8
   188f8:	andeq	sp, r0, r6, lsr #18
   188fc:	andeq	sp, r0, r0, lsr r9
   18900:	andeq	sp, r0, r0, ror #7
   18904:	andeq	sp, r0, r6, lsl #18
   18908:	andeq	sp, r0, r4, lsl r9
   1890c:	andeq	sp, r0, r0, asr #7
   18910:	andeq	sp, r0, r6, ror #17
   18914:	andeq	pc, r0, r0, lsr #30
   18918:	andeq	pc, r0, r4, ror #29
   1891c:	muleq	r0, ip, lr
   18920:	andeq	sp, r0, r6, lsr r4
   18924:	andeq	sp, r0, fp, asr r7
   18928:	andeq	sp, r0, r7, lsl r7
   1892c:	andeq	pc, r0, r8, lsl #24
   18930:	andeq	pc, r0, ip, asr ip	; <UNPREDICTABLE>
   18934:	andeq	pc, r0, r0, lsr #24
   18938:			; <UNDEFINED> instruction: 0x0000d1b8
   1893c:	andeq	pc, r0, ip, lsl fp	; <UNPREDICTABLE>
   18940:	andeq	sp, r0, lr, asr #2
   18944:	cmp	r7, #1
   18948:	bne	18f74 <test_scan@@Base+0x2488>
   1894c:	ldr	r3, [sp, #48]	; 0x30
   18950:	add	r2, r2, r0
   18954:	add	r2, r2, r3
   18958:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1895c:	add	r2, r3, r2
   18960:	add	r3, r2, #3
   18964:	sub	r2, r0, #1
   18968:	cmn	r2, #1
   1896c:	beq	18f84 <test_scan@@Base+0x2498>
   18970:	cmp	r0, r2
   18974:	bls	18f90 <test_scan@@Base+0x24a4>
   18978:	ldrb	r7, [r3], #-1
   1897c:	sub	r2, r2, #1
   18980:	cmp	r7, #3
   18984:	bne	18968 <test_scan@@Base+0x1e7c>
   18988:	cmp	r2, #4
   1898c:	bne	18f84 <test_scan@@Base+0x2498>
   18990:	mvn	r2, r0
   18994:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18998:	add	r1, r1, #2
   1899c:	cmn	r2, #5
   189a0:	mvnls	r2, #4
   189a4:	sub	r1, r1, r2
   189a8:	add	r1, r3, r1
   189ac:	mvn	r3, #1
   189b0:	sub	r2, r3, r2
   189b4:	add	r3, r2, #1
   189b8:	cmp	r3, #2
   189bc:	bcc	18fb4 <test_scan@@Base+0x24c8>
   189c0:	cmp	r0, r2
   189c4:	bls	18f90 <test_scan@@Base+0x24a4>
   189c8:	ldrb	r3, [r1], #-1
   189cc:	sub	r2, r2, #1
   189d0:	cmp	r3, #3
   189d4:	bne	189b4 <test_scan@@Base+0x1ec8>
   189d8:	cmp	r2, #2
   189dc:	bne	18fb4 <test_scan@@Base+0x24c8>
   189e0:	ldr	r0, [sp, #32]
   189e4:	mov	r6, #0
   189e8:	ldr	r1, [r0, #-4]
   189ec:	str	r1, [sp, #48]	; 0x30
   189f0:	ldr	r4, [pc, #1660]	; 19074 <test_scan@@Base+0x2588>
   189f4:	add	r4, pc, r4
   189f8:	ldr	r1, [sp, #48]	; 0x30
   189fc:	cmp	r6, r1
   18a00:	bcs	18a2c <test_scan@@Base+0x1f40>
   18a04:	mov	r7, r0
   18a08:	ldr	r1, [r7], #4
   18a0c:	add	r0, r0, r1
   18a10:	mov	r1, r4
   18a14:	add	r0, r0, #4
   18a18:	bl	12e08 <strcmp@plt>
   18a1c:	cmp	r0, #0
   18a20:	add	r6, r6, #1
   18a24:	mov	r0, r7
   18a28:	bne	189f8 <test_scan@@Base+0x1f0c>
   18a2c:	ldr	r4, [pc, #1604]	; 19078 <test_scan@@Base+0x258c>
   18a30:	ldr	r0, [sp, #32]
   18a34:	mov	r6, #0
   18a38:	add	r4, pc, r4
   18a3c:	ldr	r1, [sp, #48]	; 0x30
   18a40:	cmp	r6, r1
   18a44:	bcs	18a70 <test_scan@@Base+0x1f84>
   18a48:	mov	r7, r0
   18a4c:	ldr	r1, [r7], #4
   18a50:	add	r0, r0, r1
   18a54:	mov	r1, r4
   18a58:	add	r0, r0, #4
   18a5c:	bl	12e08 <strcmp@plt>
   18a60:	cmp	r0, #0
   18a64:	add	r6, r6, #1
   18a68:	mov	r0, r7
   18a6c:	bne	18a3c <test_scan@@Base+0x1f50>
   18a70:	ldr	r8, [pc, #1540]	; 1907c <test_scan@@Base+0x2590>
   18a74:	ldr	r0, [sp, #32]
   18a78:	mov	r6, #0
   18a7c:	add	r8, pc, r8
   18a80:	ldr	r1, [sp, #48]	; 0x30
   18a84:	cmp	r6, r1
   18a88:	bcs	18ae8 <test_scan@@Base+0x1ffc>
   18a8c:	mov	r7, r0
   18a90:	ldr	r1, [r7], #4
   18a94:	ldr	r4, [r0, r1]!
   18a98:	mov	r1, r8
   18a9c:	cmp	r4, #4
   18aa0:	mov	r2, r4
   18aa4:	add	r0, r0, #4
   18aa8:	movcs	r2, #4
   18aac:	bl	12eec <strncmp@plt>
   18ab0:	cmp	r0, #0
   18ab4:	mov	r1, r0
   18ab8:	mov	r2, #0
   18abc:	add	r6, r6, #1
   18ac0:	mvneq	r1, #0
   18ac4:	cmp	r4, #4
   18ac8:	movwhi	r2, #1
   18acc:	cmp	r0, #0
   18ad0:	mov	r0, r7
   18ad4:	movne	r2, r1
   18ad8:	cmp	r4, #4
   18adc:	movcc	r2, r1
   18ae0:	cmp	r2, #0
   18ae4:	bne	18a80 <test_scan@@Base+0x1f94>
   18ae8:	ldr	r8, [pc, #1424]	; 19080 <test_scan@@Base+0x2594>
   18aec:	mov	r6, #0
   18af0:	add	r8, pc, r8
   18af4:	ldr	r0, [sp, #48]	; 0x30
   18af8:	cmp	r6, r0
   18afc:	bcs	18b60 <test_scan@@Base+0x2074>
   18b00:	ldr	r1, [sp, #32]
   18b04:	mov	r7, r1
   18b08:	ldr	r0, [r7], #4
   18b0c:	ldr	r4, [r1, r0]!
   18b10:	cmp	r4, #4
   18b14:	mov	r2, r4
   18b18:	add	r0, r1, #4
   18b1c:	mov	r1, r8
   18b20:	movcs	r2, #4
   18b24:	bl	12eec <strncmp@plt>
   18b28:	cmp	r0, #0
   18b2c:	mov	r1, r0
   18b30:	mov	r2, #0
   18b34:	add	r6, r6, #1
   18b38:	str	r7, [sp, #32]
   18b3c:	mvneq	r1, #0
   18b40:	cmp	r4, #4
   18b44:	movwhi	r2, #1
   18b48:	cmp	r0, #0
   18b4c:	movne	r2, r1
   18b50:	cmp	r4, #4
   18b54:	movcc	r2, r1
   18b58:	cmp	r2, #0
   18b5c:	bne	18af4 <test_scan@@Base+0x2008>
   18b60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18b64:	ldr	r1, [sp, #36]	; 0x24
   18b68:	mov	r6, #0
   18b6c:	mvn	r4, #0
   18b70:	add	r0, r1, r0
   18b74:	ldr	r1, [sp, #48]	; 0x30
   18b78:	add	r0, r0, r1, lsl #2
   18b7c:	ldr	r1, [sp, #52]	; 0x34
   18b80:	add	r0, r0, r1
   18b84:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18b88:	ldr	r5, [pc, #1268]	; 19084 <test_scan@@Base+0x2598>
   18b8c:	add	r7, r1, r0
   18b90:	add	r5, pc, r5
   18b94:	add	r0, r7, #4
   18b98:	ldr	r1, [sp, #48]	; 0x30
   18b9c:	cmp	r1, r6
   18ba0:	beq	18bd8 <test_scan@@Base+0x20ec>
   18ba4:	ldr	r1, [sp, #48]	; 0x30
   18ba8:	adds	r1, r1, r4
   18bac:	bcc	18fc0 <test_scan@@Base+0x24d4>
   18bb0:	mov	r8, r0
   18bb4:	ldr	r1, [r8, #-4]!
   18bb8:	add	r0, r0, r1
   18bbc:	mov	r1, r5
   18bc0:	bl	12e08 <strcmp@plt>
   18bc4:	cmp	r0, #0
   18bc8:	sub	r4, r4, #1
   18bcc:	add	r6, r6, #1
   18bd0:	mov	r0, r8
   18bd4:	bne	18b98 <test_scan@@Base+0x20ac>
   18bd8:	ldr	r5, [pc, #1192]	; 19088 <test_scan@@Base+0x259c>
   18bdc:	add	r0, r7, #4
   18be0:	mov	r6, #0
   18be4:	mvn	r4, #0
   18be8:	add	r5, pc, r5
   18bec:	ldr	r1, [sp, #48]	; 0x30
   18bf0:	cmp	r1, r6
   18bf4:	beq	18c2c <test_scan@@Base+0x2140>
   18bf8:	ldr	r1, [sp, #48]	; 0x30
   18bfc:	adds	r1, r1, r4
   18c00:	bcc	18fc0 <test_scan@@Base+0x24d4>
   18c04:	mov	r8, r0
   18c08:	ldr	r1, [r8, #-4]!
   18c0c:	add	r0, r0, r1
   18c10:	mov	r1, r5
   18c14:	bl	12e08 <strcmp@plt>
   18c18:	cmp	r0, #0
   18c1c:	sub	r4, r4, #1
   18c20:	add	r6, r6, #1
   18c24:	mov	r0, r8
   18c28:	bne	18bec <test_scan@@Base+0x2100>
   18c2c:	ldr	r0, [sp, #48]	; 0x30
   18c30:	add	r6, r7, #4
   18c34:	mov	r4, #0
   18c38:	sub	r0, r0, #1
   18c3c:	str	r0, [fp, #-48]	; 0xffffffd0
   18c40:	ldr	r8, [pc, #1092]	; 1908c <test_scan@@Base+0x25a0>
   18c44:	add	r8, pc, r8
   18c48:	ldr	r0, [sp, #48]	; 0x30
   18c4c:	adds	r0, r0, r4
   18c50:	beq	18cc4 <test_scan@@Base+0x21d8>
   18c54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18c58:	ldr	r1, [sp, #48]	; 0x30
   18c5c:	add	r0, r0, r4
   18c60:	cmp	r1, r0
   18c64:	bls	18fc0 <test_scan@@Base+0x24d4>
   18c68:	ldr	r1, [r7, r4, lsl #2]
   18c6c:	add	r0, r6, r1
   18c70:	add	r1, r7, r1
   18c74:	ldr	r5, [r1, r4, lsl #2]
   18c78:	mov	r1, r8
   18c7c:	cmp	r5, #4
   18c80:	mov	r2, r5
   18c84:	movcs	r2, #4
   18c88:	bl	12eec <strncmp@plt>
   18c8c:	cmp	r0, #0
   18c90:	mov	r1, r0
   18c94:	mov	r2, #0
   18c98:	sub	r4, r4, #1
   18c9c:	sub	r6, r6, #4
   18ca0:	mvneq	r1, #0
   18ca4:	cmp	r5, #4
   18ca8:	movwhi	r2, #1
   18cac:	cmp	r0, #0
   18cb0:	movne	r2, r1
   18cb4:	cmp	r5, #4
   18cb8:	movcc	r2, r1
   18cbc:	cmp	r2, #0
   18cc0:	bne	18c48 <test_scan@@Base+0x215c>
   18cc4:	ldr	r0, [sp, #48]	; 0x30
   18cc8:	add	r6, r7, #4
   18ccc:	mov	r8, #0
   18cd0:	rsb	r4, r0, #0
   18cd4:	cmp	r4, r8
   18cd8:	beq	18d50 <test_scan@@Base+0x2264>
   18cdc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18ce0:	ldr	r1, [sp, #48]	; 0x30
   18ce4:	add	r0, r0, r8
   18ce8:	cmp	r1, r0
   18cec:	bls	18fc0 <test_scan@@Base+0x24d4>
   18cf0:	ldr	r1, [r7, r8, lsl #2]
   18cf4:	add	r0, r6, r1
   18cf8:	add	r1, r7, r1
   18cfc:	ldr	r5, [r1, r8, lsl #2]
   18d00:	ldr	r1, [pc, #904]	; 19090 <test_scan@@Base+0x25a4>
   18d04:	cmp	r5, #4
   18d08:	mov	r2, r5
   18d0c:	add	r1, pc, r1
   18d10:	movcs	r2, #4
   18d14:	bl	12eec <strncmp@plt>
   18d18:	cmp	r0, #0
   18d1c:	mov	r1, r0
   18d20:	mov	r2, #0
   18d24:	sub	r8, r8, #1
   18d28:	sub	r6, r6, #4
   18d2c:	mvneq	r1, #0
   18d30:	cmp	r5, #4
   18d34:	movwhi	r2, #1
   18d38:	cmp	r0, #0
   18d3c:	movne	r2, r1
   18d40:	cmp	r5, #4
   18d44:	movcc	r2, r1
   18d48:	cmp	r2, #0
   18d4c:	bne	18cd4 <test_scan@@Base+0x21e8>
   18d50:	mov	r0, #0
   18d54:	cmp	sl, r0
   18d58:	bls	18f54 <test_scan@@Base+0x2468>
   18d5c:	ldr	r1, [r9, #-8]
   18d60:	add	r2, r9, r1
   18d64:	cmp	r2, #8
   18d68:	beq	18fe8 <test_scan@@Base+0x24fc>
   18d6c:	ldr	r2, [r2, #-8]
   18d70:	sub	r2, r1, r2
   18d74:	add	r2, r9, r2
   18d78:	ldrh	r3, [r2, #-8]
   18d7c:	cmp	r3, #10
   18d80:	bcc	18da4 <test_scan@@Base+0x22b8>
   18d84:	ldrh	r2, [r2]
   18d88:	cmp	r2, #0
   18d8c:	beq	18da4 <test_scan@@Base+0x22b8>
   18d90:	add	r1, r1, r2
   18d94:	add	r1, r9, r1
   18d98:	ldrh	r1, [r1, #-8]
   18d9c:	cmp	r1, #13
   18da0:	beq	18db4 <test_scan@@Base+0x22c8>
   18da4:	add	r0, r0, #1
   18da8:	add	r9, r9, #4
   18dac:	cmp	r0, sl
   18db0:	bcc	18d54 <test_scan@@Base+0x2268>
   18db4:	ldr	r0, [sp, #44]	; 0x2c
   18db8:	mov	r1, #1
   18dbc:	add	r0, r0, #8
   18dc0:	cmp	sl, r1
   18dc4:	bls	18f54 <test_scan@@Base+0x2468>
   18dc8:	ldr	r2, [r0]
   18dcc:	adds	r3, r0, r2
   18dd0:	beq	18fe8 <test_scan@@Base+0x24fc>
   18dd4:	ldr	r3, [r0, r2]
   18dd8:	sub	r3, r2, r3
   18ddc:	add	r3, r0, r3
   18de0:	ldrh	r7, [r3]
   18de4:	cmp	r7, #10
   18de8:	bcc	18e0c <test_scan@@Base+0x2320>
   18dec:	ldrh	r3, [r3, #8]
   18df0:	cmp	r3, #0
   18df4:	beq	18e0c <test_scan@@Base+0x2320>
   18df8:	add	r2, r2, r3
   18dfc:	add	r2, r0, r2
   18e00:	ldrh	r2, [r2]
   18e04:	cmp	r2, #42	; 0x2a
   18e08:	beq	18e1c <test_scan@@Base+0x2330>
   18e0c:	add	r1, r1, #1
   18e10:	add	r0, r0, #4
   18e14:	cmp	r1, sl
   18e18:	bcc	18dc0 <test_scan@@Base+0x22d4>
   18e1c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18e20:	ldr	r1, [sp, #20]
   18e24:	mvn	r2, #0
   18e28:	add	r0, r0, r1
   18e2c:	sub	r1, sl, #1
   18e30:	cmn	r1, #1
   18e34:	beq	18ea8 <test_scan@@Base+0x23bc>
   18e38:	cmp	sl, r1
   18e3c:	bls	18f54 <test_scan@@Base+0x2468>
   18e40:	ldr	r7, [r0]
   18e44:	adds	r3, r0, r7
   18e48:	beq	18fe8 <test_scan@@Base+0x24fc>
   18e4c:	ldr	r3, [r0, r7]
   18e50:	sub	r3, r7, r3
   18e54:	add	r6, r0, r3
   18e58:	mov	r3, #1
   18e5c:	ldrh	r5, [r6]
   18e60:	cmp	r5, #10
   18e64:	bcc	18e98 <test_scan@@Base+0x23ac>
   18e68:	ldrh	r6, [r6, #8]
   18e6c:	cmp	r6, #0
   18e70:	beq	18e98 <test_scan@@Base+0x23ac>
   18e74:	add	r3, r7, r6
   18e78:	add	r3, r0, r3
   18e7c:	ldrsh	r7, [r3]
   18e80:	uxth	r6, r7
   18e84:	uxtah	r3, r2, r7
   18e88:	cmp	r6, #1
   18e8c:	movwne	r3, #1
   18e90:	cmp	r7, #1
   18e94:	mvnlt	r3, #0
   18e98:	sub	r0, r0, #4
   18e9c:	sub	r1, r1, #1
   18ea0:	cmp	r3, #0
   18ea4:	bne	18e30 <test_scan@@Base+0x2344>
   18ea8:	ldr	r2, [sp, #16]
   18eac:	ldr	r0, [sp, #12]
   18eb0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18eb4:	mov	r5, #0
   18eb8:	cmn	r2, #3
   18ebc:	mvnls	r2, #2
   18ec0:	sub	r0, r0, r2, lsl #2
   18ec4:	add	r0, r1, r0
   18ec8:	mvn	r1, #1
   18ecc:	sub	r1, r1, r2
   18ed0:	mvn	r2, #41	; 0x29
   18ed4:	cmn	r1, #1
   18ed8:	beq	18fe0 <test_scan@@Base+0x24f4>
   18edc:	cmp	sl, r1
   18ee0:	bls	18f54 <test_scan@@Base+0x2468>
   18ee4:	ldr	r7, [r0]
   18ee8:	cmn	r0, r7
   18eec:	beq	18fe8 <test_scan@@Base+0x24fc>
   18ef0:	ldr	r3, [r0, r7]
   18ef4:	sub	r3, r7, r3
   18ef8:	add	r6, r0, r3
   18efc:	mov	r3, #1
   18f00:	ldrh	r4, [r6]
   18f04:	cmp	r4, #10
   18f08:	bcc	18f3c <test_scan@@Base+0x2450>
   18f0c:	ldrh	r6, [r6, #8]
   18f10:	cmp	r6, #0
   18f14:	beq	18f3c <test_scan@@Base+0x2450>
   18f18:	add	r3, r7, r6
   18f1c:	add	r3, r0, r3
   18f20:	ldrsh	r7, [r3]
   18f24:	uxth	r6, r7
   18f28:	uxtah	r3, r2, r7
   18f2c:	cmp	r6, #42	; 0x2a
   18f30:	movwne	r3, #1
   18f34:	cmp	r7, #42	; 0x2a
   18f38:	mvnlt	r3, #0
   18f3c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   18f40:	sub	r0, r0, #4
   18f44:	sub	r1, r1, #1
   18f48:	cmp	r3, #0
   18f4c:	bne	18ed4 <test_scan@@Base+0x23e8>
   18f50:	b	170c0 <test_scan@@Base+0x5d4>
   18f54:	ldr	r0, [pc, #312]	; 19094 <test_scan@@Base+0x25a8>
   18f58:	ldr	r1, [pc, #312]	; 19098 <test_scan@@Base+0x25ac>
   18f5c:	ldr	r3, [pc, #312]	; 1909c <test_scan@@Base+0x25b0>
   18f60:	movw	r2, #693	; 0x2b5
   18f64:	add	r0, pc, r0
   18f68:	add	r1, pc, r1
   18f6c:	add	r3, pc, r3
   18f70:	bl	12f04 <__assert_fail@plt>
   18f74:	ldr	r0, [pc, #236]	; 19068 <test_scan@@Base+0x257c>
   18f78:	add	r0, pc, r0
   18f7c:	b	170b4 <test_scan@@Base+0x5c8>
   18f80:	andeq	pc, r0, r4, lsr sl	; <UNPREDICTABLE>
   18f84:	ldr	r0, [pc, #224]	; 1906c <test_scan@@Base+0x2580>
   18f88:	add	r0, pc, r0
   18f8c:	b	170b4 <test_scan@@Base+0x5c8>
   18f90:	ldr	r0, [pc, #276]	; 190ac <test_scan@@Base+0x25c0>
   18f94:	ldr	r1, [pc, #276]	; 190b0 <test_scan@@Base+0x25c4>
   18f98:	ldr	r3, [pc, #276]	; 190b4 <test_scan@@Base+0x25c8>
   18f9c:	movw	r2, #395	; 0x18b
   18fa0:	add	r0, pc, r0
   18fa4:	add	r1, pc, r1
   18fa8:	add	r3, pc, r3
   18fac:	bl	12f04 <__assert_fail@plt>
   18fb0:	andeq	sp, r0, r6, lsr #1
   18fb4:	ldr	r0, [pc, #180]	; 19070 <test_scan@@Base+0x2584>
   18fb8:	add	r0, pc, r0
   18fbc:	b	170b4 <test_scan@@Base+0x5c8>
   18fc0:	ldr	r0, [pc, #240]	; 190b8 <test_scan@@Base+0x25cc>
   18fc4:	ldr	r1, [pc, #240]	; 190bc <test_scan@@Base+0x25d0>
   18fc8:	ldr	r3, [pc, #240]	; 190c0 <test_scan@@Base+0x25d4>
   18fcc:	mov	r2, #108	; 0x6c
   18fd0:	add	r0, pc, r0
   18fd4:	add	r1, pc, r1
   18fd8:	add	r3, pc, r3
   18fdc:	bl	12f04 <__assert_fail@plt>
   18fe0:	ldr	r7, [fp, #-44]	; 0xffffffd4
   18fe4:	b	170c0 <test_scan@@Base+0x5d4>
   18fe8:	ldr	r0, [pc, #212]	; 190c4 <test_scan@@Base+0x25d8>
   18fec:	ldr	r1, [pc, #212]	; 190c8 <test_scan@@Base+0x25dc>
   18ff0:	ldr	r3, [pc, #212]	; 190cc <test_scan@@Base+0x25e0>
   18ff4:	movw	r2, #697	; 0x2b9
   18ff8:	add	r0, pc, r0
   18ffc:	add	r1, pc, r1
   19000:	add	r3, pc, r3
   19004:	bl	12f04 <__assert_fail@plt>
   19008:	andeq	sp, r0, pc, ror #8
   1900c:	andeq	sp, r0, r5, lsl #9
   19010:	andeq	sp, r0, pc, ror r9
   19014:	strdeq	sp, [r0], -r4
   19018:	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
   1901c:	andeq	ip, r0, ip, lsl #30
   19020:	andeq	ip, r0, sl, lsr #29
   19024:	andeq	pc, r0, r0, lsl #17
   19028:	andeq	pc, r0, ip, lsr #15
   1902c:	andeq	ip, r0, lr, lsl lr
   19030:	andeq	sp, r0, r3, ror #3
   19034:	andeq	sp, r0, r3, asr r1
   19038:	andeq	ip, r0, r0, lsl #24
   1903c:	andeq	ip, r0, ip, ror fp
   19040:	andeq	ip, r0, lr, lsl fp
   19044:	andeq	pc, r0, r0, lsr #7
   19048:	muleq	r0, sl, sl
   1904c:	andeq	pc, r0, ip, asr #3
   19050:	andeq	pc, r0, r8, lsl #3
   19054:	andeq	pc, r0, r8, lsl #1
   19058:	andeq	pc, r0, r8, lsr r0	; <UNPREDICTABLE>
   1905c:	andeq	lr, r0, r8, lsl #31
   19060:	andeq	lr, r0, r4, ror #30
   19064:	andeq	lr, r0, r0, ror #29
   19068:	andeq	lr, r0, r0, lsr #15
   1906c:	andeq	lr, r0, r0, asr r7
   19070:	andeq	lr, r0, r0, ror #13
   19074:	andeq	ip, r0, ip, lsr #14
   19078:	andeq	ip, r0, r8, ror #13
   1907c:	andeq	ip, r0, r4, lsr #13
   19080:	andeq	ip, r0, r0, lsr r6
   19084:	muleq	r0, r0, r5
   19088:	andeq	ip, r0, r8, lsr r5
   1908c:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19090:	andeq	ip, r0, r4, lsl r4
   19094:	andeq	sp, r0, r2, asr r1
   19098:	andeq	ip, r0, r5, lsl #23
   1909c:	andeq	sp, r0, r8, lsr #5
   190a0:	andeq	pc, r0, r0, lsr #17
   190a4:	andeq	pc, r0, r4, asr r6	; <UNPREDICTABLE>
   190a8:	andeq	pc, r0, r0, lsl #10
   190ac:	andeq	sp, r0, r6, lsl r1
   190b0:	andeq	sp, r0, r9, asr #2
   190b4:	andeq	sp, r0, r4, asr #3
   190b8:	andeq	sp, r0, r6, ror #1
   190bc:	andeq	sp, r0, r9, lsl r1
   190c0:	muleq	r0, pc, r2	; <UNPREDICTABLE>
   190c4:	andeq	ip, r0, pc, asr #21
   190c8:	strdeq	ip, [r0], -r1
   190cc:	andeq	ip, r0, r6, ror #22

000190d0 <test_basic_sort@@Base>:
   190d0:	push	{r4, r5, r6, sl, fp, lr}
   190d4:	add	fp, sp, #16
   190d8:	sub	sp, sp, #24
   190dc:	mov	r4, r0
   190e0:	mov	r0, #2
   190e4:	strb	r0, [sp, #18]
   190e8:	mov	r0, #772	; 0x304
   190ec:	strh	r0, [sp, #16]
   190f0:	movw	r0, #1798	; 0x706
   190f4:	movt	r0, #769	; 0x301
   190f8:	str	r0, [sp, #12]
   190fc:	mov	r0, r4
   19100:	bl	1e4f0 <flatcc_builder_reset@@Base>
   19104:	ldr	r1, [pc, #924]	; 194a8 <test_basic_sort@@Base+0x3d8>
   19108:	mov	r0, r4
   1910c:	mov	r2, #0
   19110:	mov	r3, #0
   19114:	add	r1, pc, r1
   19118:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1911c:	cmp	r0, #0
   19120:	bne	19130 <test_basic_sort@@Base+0x60>
   19124:	mov	r0, r4
   19128:	mov	r1, #36	; 0x24
   1912c:	bl	206c8 <flatcc_builder_start_table@@Base>
   19130:	ldr	r1, [pc, #884]	; 194ac <test_basic_sort@@Base+0x3dc>
   19134:	mov	r0, r4
   19138:	add	r1, pc, r1
   1913c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   19140:	cmp	r0, #0
   19144:	beq	19160 <test_basic_sort@@Base+0x90>
   19148:	mov	r5, r0
   1914c:	mov	r0, r4
   19150:	mov	r1, #3
   19154:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19158:	cmp	r0, #0
   1915c:	strne	r5, [r0]
   19160:	mvn	r0, #0
   19164:	mov	r1, #1
   19168:	mov	r2, #7
   1916c:	mov	r3, #1
   19170:	str	r1, [sp]
   19174:	str	r0, [sp, #4]
   19178:	add	r1, sp, #12
   1917c:	mov	r0, r4
   19180:	bl	212bc <flatcc_builder_create_vector@@Base>
   19184:	cmp	r0, #0
   19188:	beq	191a4 <test_basic_sort@@Base+0xd4>
   1918c:	mov	r5, r0
   19190:	mov	r0, r4
   19194:	mov	r1, #5
   19198:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1919c:	cmp	r0, #0
   191a0:	strne	r5, [r0]
   191a4:	ldr	r1, [pc, #772]	; 194b0 <test_basic_sort@@Base+0x3e0>
   191a8:	mov	r0, r4
   191ac:	mov	r2, #1
   191b0:	add	r1, pc, r1
   191b4:	bl	2105c <flatcc_builder_check_required@@Base>
   191b8:	cmp	r0, #0
   191bc:	beq	19488 <test_basic_sort@@Base+0x3b8>
   191c0:	mov	r0, r4
   191c4:	bl	210f8 <flatcc_builder_end_table@@Base>
   191c8:	mov	r1, r0
   191cc:	mov	r0, r4
   191d0:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   191d4:	add	r1, sp, #20
   191d8:	mov	r0, r4
   191dc:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   191e0:	cmp	r0, #0
   191e4:	beq	19468 <test_basic_sort@@Base+0x398>
   191e8:	ldr	r1, [r0, #4]
   191ec:	movw	r2, #20301	; 0x4f4d
   191f0:	movt	r2, #21326	; 0x534e
   191f4:	cmp	r1, r2
   191f8:	bne	19468 <test_basic_sort@@Base+0x398>
   191fc:	ldr	r1, [r0]
   19200:	ldr	r2, [r0, r1]!
   19204:	mov	r1, r0
   19208:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1920c:	cmp	r2, #15
   19210:	bls	1922c <test_basic_sort@@Base+0x15c>
   19214:	ldrh	r1, [r1, #14]
   19218:	cmp	r1, #0
   1921c:	ldrne	r1, [r0, r1]!
   19220:	ldrne	r1, [r0, r1]!
   19224:	cmpne	r1, #0
   19228:	bne	1924c <test_basic_sort@@Base+0x17c>
   1922c:	ldr	r0, [pc, #648]	; 194bc <test_basic_sort@@Base+0x3ec>
   19230:	ldr	r1, [pc, #648]	; 194c0 <test_basic_sort@@Base+0x3f0>
   19234:	ldr	r3, [pc, #648]	; 194c4 <test_basic_sort@@Base+0x3f4>
   19238:	mov	r2, #1552	; 0x610
   1923c:	add	r0, pc, r0
   19240:	add	r1, pc, r1
   19244:	add	r3, pc, r3
   19248:	bl	12f04 <__assert_fail@plt>
   1924c:	add	r0, r0, #4
   19250:	lsr	r2, r1, #1
   19254:	sub	lr, r1, #1
   19258:	b	192cc <test_basic_sort@@Base+0x1fc>
   1925c:	lsl	r2, ip, #1
   19260:	mov	r3, ip
   19264:	ldr	r4, [r0, #-4]
   19268:	cmp	r2, lr
   1926c:	bcs	19290 <test_basic_sort@@Base+0x1c0>
   19270:	cmp	r4, r2
   19274:	orrhi	r5, r2, #1
   19278:	cmphi	r4, r5
   1927c:	bls	19424 <test_basic_sort@@Base+0x354>
   19280:	ldrb	r1, [r0, r5]
   19284:	ldrb	r6, [r0, r2]
   19288:	cmp	r6, r1
   1928c:	movcc	r2, r5
   19290:	mov	r5, r2
   19294:	cmp	r4, r3
   19298:	cmphi	r4, r5
   1929c:	bls	19424 <test_basic_sort@@Base+0x354>
   192a0:	ldrb	r2, [r0, r3]
   192a4:	ldrb	r4, [r0, r5]
   192a8:	cmp	r2, r4
   192ac:	bcs	192d8 <test_basic_sort@@Base+0x208>
   192b0:	strb	r2, [r0, r5]
   192b4:	strb	r4, [r0, r3]
   192b8:	lsl	r2, r5, #1
   192bc:	cmp	lr, r5, lsl #1
   192c0:	mov	r3, r5
   192c4:	bcs	19264 <test_basic_sort@@Base+0x194>
   192c8:	b	192d8 <test_basic_sort@@Base+0x208>
   192cc:	mov	ip, r2
   192d0:	cmp	lr, r2, lsl #1
   192d4:	bcs	1925c <test_basic_sort@@Base+0x18c>
   192d8:	sub	r2, ip, #1
   192dc:	cmp	ip, #0
   192e0:	bne	192cc <test_basic_sort@@Base+0x1fc>
   192e4:	b	19368 <test_basic_sort@@Base+0x298>
   192e8:	ldrb	r2, [r0]
   192ec:	ldrb	r1, [r0, lr]
   192f0:	mov	r4, #0
   192f4:	strb	r2, [r0, lr]
   192f8:	sub	lr, lr, #1
   192fc:	mov	r2, #0
   19300:	strb	r1, [r0]
   19304:	ldr	r5, [r0, #-4]
   19308:	cmp	r4, lr
   1930c:	bcs	19330 <test_basic_sort@@Base+0x260>
   19310:	cmp	r5, r4
   19314:	orrhi	r3, r4, #1
   19318:	cmphi	r5, r3
   1931c:	bls	19424 <test_basic_sort@@Base+0x354>
   19320:	ldrb	r1, [r0, r3]
   19324:	ldrb	r6, [r0, r4]
   19328:	cmp	r6, r1
   1932c:	movcc	r4, r3
   19330:	mov	r3, r4
   19334:	cmp	r5, r2
   19338:	cmphi	r5, r3
   1933c:	bls	19424 <test_basic_sort@@Base+0x354>
   19340:	ldrb	r5, [r0, r2]
   19344:	ldrb	r4, [r0, r3]
   19348:	cmp	r5, r4
   1934c:	bcs	19368 <test_basic_sort@@Base+0x298>
   19350:	strb	r5, [r0, r3]
   19354:	strb	r4, [r0, r2]
   19358:	lsl	r4, r3, #1
   1935c:	cmp	lr, r3, lsl #1
   19360:	mov	r2, r3
   19364:	bcs	19304 <test_basic_sort@@Base+0x234>
   19368:	cmp	lr, #0
   1936c:	bne	192e8 <test_basic_sort@@Base+0x218>
   19370:	ldr	r1, [r0, #-4]
   19374:	cmp	r1, #7
   19378:	bne	1922c <test_basic_sort@@Base+0x15c>
   1937c:	ldr	ip, [pc, #304]	; 194b4 <test_basic_sort@@Base+0x3e4>
   19380:	mov	r3, #0
   19384:	mov	r2, #0
   19388:	add	ip, pc, ip
   1938c:	cmp	r3, #7
   19390:	bcs	19424 <test_basic_sort@@Base+0x354>
   19394:	ldrb	r5, [r0, r3]
   19398:	ldrb	r1, [ip, r3]
   1939c:	cmp	r5, r1
   193a0:	bne	19450 <test_basic_sort@@Base+0x380>
   193a4:	mov	r3, #0
   193a8:	mov	r4, #6
   193ac:	sub	r1, r4, r3
   193b0:	add	r1, r3, r1, lsr #1
   193b4:	cmp	r1, #7
   193b8:	bcs	19424 <test_basic_sort@@Base+0x354>
   193bc:	ldrb	r6, [r0, r1]
   193c0:	cmp	r6, r5
   193c4:	movcs	r4, r1
   193c8:	addcc	r3, r1, #1
   193cc:	cmp	r4, r3
   193d0:	bhi	193ac <test_basic_sort@@Base+0x2dc>
   193d4:	bne	19444 <test_basic_sort@@Base+0x374>
   193d8:	cmp	r3, #7
   193dc:	bcs	19424 <test_basic_sort@@Base+0x354>
   193e0:	ldrb	r1, [r0, r3]
   193e4:	cmp	r1, r5
   193e8:	bne	19444 <test_basic_sort@@Base+0x374>
   193ec:	uxtb	r1, r2
   193f0:	cmp	r1, #3
   193f4:	mov	r1, r2
   193f8:	movweq	r1, #2
   193fc:	uxtb	r1, r1
   19400:	cmp	r3, r1
   19404:	bne	19444 <test_basic_sort@@Base+0x374>
   19408:	add	r2, r2, #1
   1940c:	uxtb	r3, r2
   19410:	cmp	r3, #6
   19414:	bls	1938c <test_basic_sort@@Base+0x2bc>
   19418:	mov	r0, #0
   1941c:	sub	sp, fp, #16
   19420:	pop	{r4, r5, r6, sl, fp, pc}
   19424:	ldr	r0, [pc, #180]	; 194e0 <test_basic_sort@@Base+0x410>
   19428:	ldr	r1, [pc, #180]	; 194e4 <test_basic_sort@@Base+0x414>
   1942c:	ldr	r3, [pc, #180]	; 194e8 <test_basic_sort@@Base+0x418>
   19430:	movw	r2, #395	; 0x18b
   19434:	add	r0, pc, r0
   19438:	add	r1, pc, r1
   1943c:	add	r3, pc, r3
   19440:	bl	12f04 <__assert_fail@plt>
   19444:	ldr	r0, [pc, #108]	; 194b8 <test_basic_sort@@Base+0x3e8>
   19448:	add	r0, pc, r0
   1944c:	b	19458 <test_basic_sort@@Base+0x388>
   19450:	ldr	r0, [pc, #148]	; 194ec <test_basic_sort@@Base+0x41c>
   19454:	add	r0, pc, r0
   19458:	bl	12e68 <puts@plt>
   1945c:	mvn	r0, #0
   19460:	sub	sp, fp, #16
   19464:	pop	{r4, r5, r6, sl, fp, pc}
   19468:	ldr	r0, [pc, #100]	; 194d4 <test_basic_sort@@Base+0x404>
   1946c:	ldr	r1, [pc, #100]	; 194d8 <test_basic_sort@@Base+0x408>
   19470:	ldr	r3, [pc, #100]	; 194dc <test_basic_sort@@Base+0x40c>
   19474:	movw	r2, #706	; 0x2c2
   19478:	add	r0, pc, r0
   1947c:	add	r1, pc, r1
   19480:	add	r3, pc, r3
   19484:	bl	12f04 <__assert_fail@plt>
   19488:	ldr	r0, [pc, #56]	; 194c8 <test_basic_sort@@Base+0x3f8>
   1948c:	ldr	r1, [pc, #56]	; 194cc <test_basic_sort@@Base+0x3fc>
   19490:	ldr	r3, [pc, #56]	; 194d0 <test_basic_sort@@Base+0x400>
   19494:	mov	r2, #235	; 0xeb
   19498:	add	r0, pc, r0
   1949c:	add	r1, pc, r1
   194a0:	add	r3, pc, r3
   194a4:	bl	12f04 <__assert_fail@plt>
   194a8:	muleq	r0, r8, ip
   194ac:			; <UNDEFINED> instruction: 0x0000bcb8
   194b0:	andeq	sp, r0, ip, lsr #23
   194b4:			; <UNDEFINED> instruction: 0x0000d9b6
   194b8:	andeq	lr, r0, r0, ror #16
   194bc:			; <UNDEFINED> instruction: 0x0000c2bf
   194c0:	andeq	fp, r0, r8, asr sp
   194c4:	andeq	ip, r0, r5, ror #5
   194c8:	andeq	ip, r0, r0, asr #18
   194cc:	andeq	ip, r0, r3, lsl #16
   194d0:	ldrdeq	ip, [r0], -sl
   194d4:	andeq	ip, r0, pc, asr #12
   194d8:	andeq	ip, r0, r1, ror r6
   194dc:	ldrdeq	ip, [r0], -sp
   194e0:	andeq	ip, r0, r2, lsl #25
   194e4:			; <UNDEFINED> instruction: 0x0000ccb5
   194e8:	andeq	ip, r0, r0, lsr sp
   194ec:	andeq	lr, r0, r4, ror r8

000194f0 <test_clone_slice@@Base>:
   194f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194f4:	add	fp, sp, #28
   194f8:	sub	sp, sp, #36	; 0x24
   194fc:	mov	r5, r0
   19500:	mov	r0, #0
   19504:	strb	r0, [sp, #30]
   19508:	mov	r0, #1
   1950c:	strh	r0, [sp, #28]
   19510:	mov	r0, #256	; 0x100
   19514:	str	r0, [sp, #24]
   19518:	mov	r0, r5
   1951c:	bl	1e4f0 <flatcc_builder_reset@@Base>
   19520:	ldr	r1, [pc, #2556]	; 19f24 <test_clone_slice@@Base+0xa34>
   19524:	mov	r0, r5
   19528:	mov	r2, #0
   1952c:	mov	r3, #0
   19530:	add	r1, pc, r1
   19534:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   19538:	cmp	r0, #0
   1953c:	bne	1954c <test_clone_slice@@Base+0x5c>
   19540:	mov	r0, r5
   19544:	mov	r1, #36	; 0x24
   19548:	bl	206c8 <flatcc_builder_start_table@@Base>
   1954c:	ldr	r1, [pc, #2516]	; 19f28 <test_clone_slice@@Base+0xa38>
   19550:	mov	r0, r5
   19554:	add	r1, pc, r1
   19558:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1955c:	cmp	r0, #0
   19560:	beq	1957c <test_clone_slice@@Base+0x8c>
   19564:	mov	r4, r0
   19568:	mov	r0, r5
   1956c:	mov	r1, #3
   19570:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19574:	cmp	r0, #0
   19578:	strne	r4, [r0]
   1957c:	mvn	r0, #0
   19580:	mov	r1, #1
   19584:	mov	r2, #7
   19588:	mov	r3, #1
   1958c:	str	r1, [sp]
   19590:	str	r0, [sp, #4]
   19594:	add	r1, sp, #24
   19598:	mov	r0, r5
   1959c:	bl	212bc <flatcc_builder_create_vector@@Base>
   195a0:	cmp	r0, #0
   195a4:	beq	195c0 <test_clone_slice@@Base+0xd0>
   195a8:	mov	r4, r0
   195ac:	mov	r0, r5
   195b0:	mov	r1, #24
   195b4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   195b8:	cmp	r0, #0
   195bc:	strne	r4, [r0]
   195c0:	mov	r0, r5
   195c4:	mov	r1, #4
   195c8:	mov	r2, #2
   195cc:	mvn	r3, #-1073741824	; 0xc0000000
   195d0:	bl	201bc <flatcc_builder_start_vector@@Base>
   195d4:	mov	r0, r5
   195d8:	mov	r1, #2
   195dc:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   195e0:	mov	r1, #22
   195e4:	strh	r1, [r0]
   195e8:	mov	r1, #44	; 0x2c
   195ec:	strh	r1, [r0, #4]
   195f0:	mov	r0, r5
   195f4:	bl	2143c <flatcc_builder_end_vector@@Base>
   195f8:	cmp	r0, #0
   195fc:	beq	19618 <test_clone_slice@@Base+0x128>
   19600:	mov	r4, r0
   19604:	mov	r0, r5
   19608:	mov	r1, #9
   1960c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19610:	cmp	r0, #0
   19614:	strne	r4, [r0]
   19618:	mov	r0, r5
   1961c:	mov	r1, #0
   19620:	mov	r2, #32
   19624:	mov	r3, #16
   19628:	mov	r8, #0
   1962c:	bl	21b6c <flatcc_builder_table_add@@Base>
   19630:	movw	r1, #13107	; 0x3333
   19634:	mov	r2, #1
   19638:	movt	r1, #49705	; 0xc229
   1963c:	str	r1, [r0]
   19640:	mov	r0, r5
   19644:	ldr	r1, [pc, #2272]	; 19f2c <test_clone_slice@@Base+0xa3c>
   19648:	add	r1, pc, r1
   1964c:	bl	2105c <flatcc_builder_check_required@@Base>
   19650:	cmp	r0, #0
   19654:	beq	19ea0 <test_clone_slice@@Base+0x9b0>
   19658:	mov	r0, r5
   1965c:	bl	210f8 <flatcc_builder_end_table@@Base>
   19660:	mov	r1, r0
   19664:	mov	r0, r5
   19668:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1966c:	add	r1, sp, #32
   19670:	mov	r0, r5
   19674:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   19678:	mov	r4, r0
   1967c:	ldr	r0, [pc, #2220]	; 19f30 <test_clone_slice@@Base+0xa40>
   19680:	mov	r1, r4
   19684:	ldr	r0, [pc, r0]
   19688:	ldr	r2, [sp, #32]
   1968c:	ldr	r3, [r0]
   19690:	ldr	r0, [pc, #2204]	; 19f34 <test_clone_slice@@Base+0xa44>
   19694:	add	r0, pc, r0
   19698:	bl	1361c <test_type_aliases@@Base+0x554>
   1969c:	movw	r1, #20301	; 0x4f4d
   196a0:	cmp	r4, #0
   196a4:	movt	r1, #21326	; 0x534e
   196a8:	beq	196bc <test_clone_slice@@Base+0x1cc>
   196ac:	ldr	r0, [r4, #4]
   196b0:	cmp	r0, r1
   196b4:	ldreq	r0, [r4]
   196b8:	addeq	r8, r4, r0
   196bc:	mov	r0, r5
   196c0:	bl	1e4f0 <flatcc_builder_reset@@Base>
   196c4:	ldr	r1, [pc, #2156]	; 19f38 <test_clone_slice@@Base+0xa48>
   196c8:	mov	r0, r5
   196cc:	mov	r2, #0
   196d0:	mov	r3, #0
   196d4:	add	r1, pc, r1
   196d8:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   196dc:	cmp	r0, #0
   196e0:	bne	196f0 <test_clone_slice@@Base+0x200>
   196e4:	mov	r0, r5
   196e8:	mov	r1, #36	; 0x24
   196ec:	bl	206c8 <flatcc_builder_start_table@@Base>
   196f0:	cmp	r8, #0
   196f4:	beq	19ec0 <test_clone_slice@@Base+0x9d0>
   196f8:	ldr	r1, [r8]
   196fc:	mov	r0, r8
   19700:	ldrh	r2, [r0, -r1]!
   19704:	cmp	r2, #12
   19708:	bcc	19e94 <test_clone_slice@@Base+0x9a4>
   1970c:	ldrh	r1, [r0, #10]
   19710:	cmp	r1, #0
   19714:	beq	19e94 <test_clone_slice@@Base+0x9a4>
   19718:	cmp	r2, #54	; 0x36
   1971c:	bcc	19ee0 <test_clone_slice@@Base+0x9f0>
   19720:	ldrh	r2, [r0, #52]	; 0x34
   19724:	cmp	r2, #0
   19728:	beq	19ee0 <test_clone_slice@@Base+0x9f0>
   1972c:	ldrh	r0, [r0, #22]
   19730:	str	r4, [sp, #20]
   19734:	cmp	r0, #0
   19738:	beq	19f00 <test_clone_slice@@Base+0xa10>
   1973c:	mov	r3, r8
   19740:	mov	sl, r8
   19744:	str	r8, [sp, #16]
   19748:	ldr	r0, [r8, r0]!
   1974c:	ldr	r1, [r3, r1]!
   19750:	ldr	r9, [sl, r2]!
   19754:	str	r0, [sp, #12]
   19758:	mov	r0, r5
   1975c:	add	r1, r3, r1
   19760:	add	r6, r1, #4
   19764:	ldr	r2, [r6, #-4]
   19768:	mov	r1, r6
   1976c:	bl	22830 <flatcc_builder_create_string@@Base>
   19770:	cmp	r0, #0
   19774:	beq	19790 <test_clone_slice@@Base+0x2a0>
   19778:	mov	r4, r0
   1977c:	mov	r0, r5
   19780:	mov	r1, #3
   19784:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19788:	cmp	r0, #0
   1978c:	strne	r4, [r0]
   19790:	mov	r0, r5
   19794:	bl	20248 <flatcc_builder_start_offset_vector@@Base>
   19798:	ldr	r2, [r6, #-4]
   1979c:	mov	r0, r5
   197a0:	mov	r1, r6
   197a4:	bl	22830 <flatcc_builder_create_string@@Base>
   197a8:	cmp	r0, #0
   197ac:	beq	197bc <test_clone_slice@@Base+0x2cc>
   197b0:	mov	r1, r0
   197b4:	mov	r0, r5
   197b8:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   197bc:	ldr	r0, [r6, #-4]
   197c0:	cmp	r0, #4
   197c4:	mov	r2, r0
   197c8:	movcs	r2, #4
   197cc:	add	r1, r6, r2
   197d0:	sub	r2, r0, r2
   197d4:	mov	r0, r5
   197d8:	cmp	r2, #20
   197dc:	movcs	r2, #20
   197e0:	bl	22830 <flatcc_builder_create_string@@Base>
   197e4:	cmp	r0, #0
   197e8:	beq	197f8 <test_clone_slice@@Base+0x308>
   197ec:	mov	r1, r0
   197f0:	mov	r0, r5
   197f4:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   197f8:	ldr	r2, [r6, #-4]
   197fc:	mov	r0, r5
   19800:	mov	r1, r6
   19804:	cmp	r2, #3
   19808:	movcs	r2, #3
   1980c:	bl	22830 <flatcc_builder_create_string@@Base>
   19810:	cmp	r0, #0
   19814:	beq	19824 <test_clone_slice@@Base+0x334>
   19818:	mov	r1, r0
   1981c:	mov	r0, r5
   19820:	bl	1fa90 <flatcc_builder_offset_vector_push@@Base>
   19824:	mov	r0, r5
   19828:	add	r7, sl, r9
   1982c:	bl	20430 <flatcc_builder_end_offset_vector@@Base>
   19830:	cmp	r0, #0
   19834:	beq	19850 <test_clone_slice@@Base+0x360>
   19838:	mov	r4, r0
   1983c:	mov	r0, r5
   19840:	mov	r1, #10
   19844:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19848:	cmp	r0, #0
   1984c:	strne	r4, [r0]
   19850:	ldr	r0, [sp, #12]
   19854:	mov	r1, #36	; 0x24
   19858:	add	sl, r7, #4
   1985c:	add	r8, r8, r0
   19860:	mov	r0, r5
   19864:	bl	206c8 <flatcc_builder_start_table@@Base>
   19868:	ldr	r0, [r6, #-4]
   1986c:	cmp	r0, #2
   19870:	mov	r2, r0
   19874:	movcs	r2, #2
   19878:	add	r1, r6, r2
   1987c:	sub	r2, r0, r2
   19880:	mov	r0, r5
   19884:	cmp	r2, #20
   19888:	movcs	r2, #20
   1988c:	bl	22830 <flatcc_builder_create_string@@Base>
   19890:	cmp	r0, #0
   19894:	beq	198b0 <test_clone_slice@@Base+0x3c0>
   19898:	mov	r4, r0
   1989c:	mov	r0, r5
   198a0:	mov	r1, #3
   198a4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   198a8:	cmp	r0, #0
   198ac:	strne	r4, [r0]
   198b0:	ldr	r2, [sl, #-4]
   198b4:	mvn	r0, #0
   198b8:	mov	r1, #1
   198bc:	mov	r3, #1
   198c0:	add	r9, r8, #4
   198c4:	str	r1, [sp]
   198c8:	str	r0, [sp, #4]
   198cc:	mov	r0, r5
   198d0:	mov	r1, sl
   198d4:	bl	212bc <flatcc_builder_create_vector@@Base>
   198d8:	cmp	r0, #0
   198dc:	beq	198f8 <test_clone_slice@@Base+0x408>
   198e0:	mov	r4, r0
   198e4:	mov	r0, r5
   198e8:	mov	r1, #24
   198ec:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   198f0:	cmp	r0, #0
   198f4:	strne	r4, [r0]
   198f8:	ldr	r0, [r9, #-4]
   198fc:	mvn	r1, #-1073741824	; 0xc0000000
   19900:	mov	r2, #2
   19904:	str	r2, [sp]
   19908:	str	r1, [sp, #4]
   1990c:	cmp	r0, #0
   19910:	mov	r3, r0
   19914:	movwne	r3, #1
   19918:	sub	r0, r0, r3
   1991c:	add	r1, r9, r3, lsl #2
   19920:	mov	r3, #4
   19924:	cmp	r0, #2
   19928:	movcc	r2, r0
   1992c:	mov	r0, r5
   19930:	bl	212bc <flatcc_builder_create_vector@@Base>
   19934:	ldr	r7, [sp, #16]
   19938:	cmp	r0, #0
   1993c:	beq	19958 <test_clone_slice@@Base+0x468>
   19940:	mov	r4, r0
   19944:	mov	r0, r5
   19948:	mov	r1, #9
   1994c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19950:	cmp	r0, #0
   19954:	strne	r4, [r0]
   19958:	ldr	r1, [pc, #1516]	; 19f4c <test_clone_slice@@Base+0xa5c>
   1995c:	mov	r0, r5
   19960:	mov	r2, #1
   19964:	add	r1, pc, r1
   19968:	bl	2105c <flatcc_builder_check_required@@Base>
   1996c:	cmp	r0, #0
   19970:	beq	19ea0 <test_clone_slice@@Base+0x9b0>
   19974:	mov	r0, r5
   19978:	bl	210f8 <flatcc_builder_end_table@@Base>
   1997c:	cmp	r0, #0
   19980:	beq	199c4 <test_clone_slice@@Base+0x4d4>
   19984:	mov	r4, r0
   19988:	mov	r0, r5
   1998c:	mov	r1, #7
   19990:	mov	r2, #1
   19994:	mov	r3, #1
   19998:	bl	21b6c <flatcc_builder_table_add@@Base>
   1999c:	cmp	r0, #0
   199a0:	beq	199c4 <test_clone_slice@@Base+0x4d4>
   199a4:	mov	r6, r0
   199a8:	mov	r0, r5
   199ac:	mov	r1, #8
   199b0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   199b4:	cmp	r0, #0
   199b8:	movne	r1, #1
   199bc:	strbne	r1, [r6]
   199c0:	strne	r4, [r0]
   199c4:	ldr	r0, [sl, #-4]
   199c8:	mov	r2, #1
   199cc:	mvn	r1, #0
   199d0:	mov	r3, #1
   199d4:	str	r2, [sp]
   199d8:	str	r1, [sp, #4]
   199dc:	cmp	r0, #3
   199e0:	mov	r2, r0
   199e4:	movcs	r2, #3
   199e8:	add	r1, sl, r2
   199ec:	sub	r2, r0, r2
   199f0:	mov	r0, r5
   199f4:	bl	212bc <flatcc_builder_create_vector@@Base>
   199f8:	cmp	r0, #0
   199fc:	beq	19a18 <test_clone_slice@@Base+0x528>
   19a00:	mov	r4, r0
   19a04:	mov	r0, r5
   19a08:	mov	r1, #24
   19a0c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19a10:	cmp	r0, #0
   19a14:	strne	r4, [r0]
   19a18:	ldr	r1, [r7]
   19a1c:	mov	r0, r7
   19a20:	movw	r6, #20301	; 0x4f4d
   19a24:	movt	r6, #21326	; 0x534e
   19a28:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   19a2c:	cmp	r1, #6
   19a30:	bcc	19a48 <test_clone_slice@@Base+0x558>
   19a34:	ldrh	r0, [r0, #4]
   19a38:	cmp	r0, #0
   19a3c:	beq	19a48 <test_clone_slice@@Base+0x558>
   19a40:	add	r2, r7, r0
   19a44:	b	19a4c <test_clone_slice@@Base+0x55c>
   19a48:	mov	r2, #0
   19a4c:	mov	r0, #16
   19a50:	mov	r1, #0
   19a54:	mov	r3, #32
   19a58:	str	r0, [sp]
   19a5c:	mov	r0, r5
   19a60:	bl	22b38 <flatcc_builder_table_add_copy@@Base>
   19a64:	ldr	r2, [r9, #-4]
   19a68:	mvn	r0, #-1073741824	; 0xc0000000
   19a6c:	mov	r1, #2
   19a70:	mov	r3, #4
   19a74:	str	r1, [sp]
   19a78:	str	r0, [sp, #4]
   19a7c:	mov	r0, r5
   19a80:	mov	r1, r9
   19a84:	bl	212bc <flatcc_builder_create_vector@@Base>
   19a88:	cmp	r0, #0
   19a8c:	beq	19aa8 <test_clone_slice@@Base+0x5b8>
   19a90:	mov	r4, r0
   19a94:	mov	r0, r5
   19a98:	mov	r1, #9
   19a9c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   19aa0:	cmp	r0, #0
   19aa4:	strne	r4, [r0]
   19aa8:	ldr	r1, [pc, #1184]	; 19f50 <test_clone_slice@@Base+0xa60>
   19aac:	mov	r0, r5
   19ab0:	mov	r2, #1
   19ab4:	add	r1, pc, r1
   19ab8:	bl	2105c <flatcc_builder_check_required@@Base>
   19abc:	cmp	r0, #0
   19ac0:	beq	19ea0 <test_clone_slice@@Base+0x9b0>
   19ac4:	mov	r0, r5
   19ac8:	bl	210f8 <flatcc_builder_end_table@@Base>
   19acc:	mov	r1, r0
   19ad0:	mov	r0, r5
   19ad4:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   19ad8:	add	r1, sp, #32
   19adc:	mov	r0, r5
   19ae0:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   19ae4:	mov	r5, r0
   19ae8:	ldr	r0, [pc, #1124]	; 19f54 <test_clone_slice@@Base+0xa64>
   19aec:	mov	r1, r5
   19af0:	ldr	r0, [pc, r0]
   19af4:	ldr	r2, [sp, #32]
   19af8:	ldr	r3, [r0]
   19afc:	ldr	r0, [pc, #1108]	; 19f58 <test_clone_slice@@Base+0xa68>
   19b00:	add	r0, pc, r0
   19b04:	bl	1361c <test_type_aliases@@Base+0x554>
   19b08:	cmp	r5, #0
   19b0c:	beq	19ec0 <test_clone_slice@@Base+0x9d0>
   19b10:	ldr	r0, [r5, #4]
   19b14:	cmp	r0, r6
   19b18:	bne	19ec0 <test_clone_slice@@Base+0x9d0>
   19b1c:	ldr	r0, [r5]
   19b20:	ldr	r0, [r5, r0]!
   19b24:	mov	r4, r5
   19b28:	ldrh	r8, [r4, -r0]!
   19b2c:	cmp	r8, #11
   19b30:	bls	19e94 <test_clone_slice@@Base+0x9a4>
   19b34:	ldrh	r0, [r4, #10]
   19b38:	cmp	r0, #0
   19b3c:	beq	19e94 <test_clone_slice@@Base+0x9a4>
   19b40:	mov	r1, r5
   19b44:	ldr	r0, [r1, r0]!
   19b48:	add	r0, r1, r0
   19b4c:	ldr	r1, [pc, #1032]	; 19f5c <test_clone_slice@@Base+0xa6c>
   19b50:	add	r0, r0, #4
   19b54:	add	r1, pc, r1
   19b58:	bl	12e08 <strcmp@plt>
   19b5c:	cmp	r0, #0
   19b60:	beq	19b88 <test_clone_slice@@Base+0x698>
   19b64:	ldr	r0, [pc, #1012]	; 19f60 <test_clone_slice@@Base+0xa70>
   19b68:	add	r0, pc, r0
   19b6c:	bl	12e68 <puts@plt>
   19b70:	mvn	r5, #0
   19b74:	ldr	r0, [sp, #20]
   19b78:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   19b7c:	mov	r0, r5
   19b80:	sub	sp, fp, #28
   19b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b88:	cmp	r8, #26
   19b8c:	bcc	19bac <test_clone_slice@@Base+0x6bc>
   19b90:	ldrh	r1, [r4, #24]
   19b94:	cmp	r1, #0
   19b98:	movne	r0, r5
   19b9c:	ldrne	r1, [r0, r1]!
   19ba0:	ldrne	r6, [r0, r1]!
   19ba4:	cmpne	r6, #0
   19ba8:	bne	19bcc <test_clone_slice@@Base+0x6dc>
   19bac:	ldr	r0, [pc, #1060]	; 19fd8 <test_clone_slice@@Base+0xae8>
   19bb0:	ldr	r1, [pc, #1060]	; 19fdc <test_clone_slice@@Base+0xaec>
   19bb4:	ldr	r3, [pc, #1060]	; 19fe0 <test_clone_slice@@Base+0xaf0>
   19bb8:	mov	r2, #108	; 0x6c
   19bbc:	add	r0, pc, r0
   19bc0:	add	r1, pc, r1
   19bc4:	add	r3, pc, r3
   19bc8:	bl	12f04 <__assert_fail@plt>
   19bcc:	add	r7, r0, #4
   19bd0:	ldr	r0, [r7]
   19bd4:	ldr	r1, [pc, #904]	; 19f64 <test_clone_slice@@Base+0xa74>
   19bd8:	add	r0, r7, r0
   19bdc:	add	r1, pc, r1
   19be0:	add	r0, r0, #4
   19be4:	bl	12e08 <strcmp@plt>
   19be8:	cmp	r0, #0
   19bec:	beq	19bfc <test_clone_slice@@Base+0x70c>
   19bf0:	ldr	r0, [pc, #880]	; 19f68 <test_clone_slice@@Base+0xa78>
   19bf4:	add	r0, pc, r0
   19bf8:	b	19b6c <test_clone_slice@@Base+0x67c>
   19bfc:	cmp	r6, #1
   19c00:	bls	19bac <test_clone_slice@@Base+0x6bc>
   19c04:	mov	r0, r7
   19c08:	ldr	r1, [r0, #4]!
   19c0c:	ldr	r1, [r0, r1]!
   19c10:	cmp	r1, #6
   19c14:	bne	19c3c <test_clone_slice@@Base+0x74c>
   19c18:	ldr	r1, [pc, #848]	; 19f70 <test_clone_slice@@Base+0xa80>
   19c1c:	add	r0, r0, #4
   19c20:	add	r1, pc, r1
   19c24:	bl	12e08 <strcmp@plt>
   19c28:	cmp	r0, #0
   19c2c:	beq	19c48 <test_clone_slice@@Base+0x758>
   19c30:	ldr	r0, [pc, #828]	; 19f74 <test_clone_slice@@Base+0xa84>
   19c34:	add	r0, pc, r0
   19c38:	b	19b6c <test_clone_slice@@Base+0x67c>
   19c3c:	ldr	r0, [pc, #808]	; 19f6c <test_clone_slice@@Base+0xa7c>
   19c40:	add	r0, pc, r0
   19c44:	b	19b6c <test_clone_slice@@Base+0x67c>
   19c48:	cmp	r6, #2
   19c4c:	bls	19bac <test_clone_slice@@Base+0x6bc>
   19c50:	ldr	r0, [r7, #8]!
   19c54:	ldr	r0, [r7, r0]!
   19c58:	cmp	r0, #3
   19c5c:	bne	19c84 <test_clone_slice@@Base+0x794>
   19c60:	ldr	r1, [pc, #788]	; 19f7c <test_clone_slice@@Base+0xa8c>
   19c64:	add	r0, r7, #4
   19c68:	add	r1, pc, r1
   19c6c:	bl	12e08 <strcmp@plt>
   19c70:	cmp	r0, #0
   19c74:	beq	19c90 <test_clone_slice@@Base+0x7a0>
   19c78:	ldr	r0, [pc, #768]	; 19f80 <test_clone_slice@@Base+0xa90>
   19c7c:	add	r0, pc, r0
   19c80:	b	19b6c <test_clone_slice@@Base+0x67c>
   19c84:	ldr	r0, [pc, #748]	; 19f78 <test_clone_slice@@Base+0xa88>
   19c88:	add	r0, pc, r0
   19c8c:	b	19b6c <test_clone_slice@@Base+0x67c>
   19c90:	ldrh	r0, [r4, #20]
   19c94:	cmp	r0, #0
   19c98:	movne	r1, r5
   19c9c:	ldrne	r0, [r1, r0]!
   19ca0:	addsne	r9, r1, r0
   19ca4:	bne	19cc8 <test_clone_slice@@Base+0x7d8>
   19ca8:	ldr	r0, [pc, #820]	; 19fe4 <test_clone_slice@@Base+0xaf4>
   19cac:	ldr	r1, [pc, #820]	; 19fe8 <test_clone_slice@@Base+0xaf8>
   19cb0:	ldr	r3, [pc, #820]	; 19fec <test_clone_slice@@Base+0xafc>
   19cb4:	mov	r2, #1664	; 0x680
   19cb8:	add	r0, pc, r0
   19cbc:	add	r1, pc, r1
   19cc0:	add	r3, pc, r3
   19cc4:	bl	12f04 <__assert_fail@plt>
   19cc8:	ldr	r0, [r9]
   19ccc:	mov	r7, r9
   19cd0:	ldrh	r6, [r7, -r0]!
   19cd4:	cmp	r6, #12
   19cd8:	bcc	19e94 <test_clone_slice@@Base+0x9a4>
   19cdc:	ldrh	r0, [r7, #10]
   19ce0:	cmp	r0, #0
   19ce4:	beq	19e94 <test_clone_slice@@Base+0x9a4>
   19ce8:	mov	r1, r9
   19cec:	ldr	r0, [r1, r0]!
   19cf0:	add	r0, r1, r0
   19cf4:	ldr	r1, [pc, #648]	; 19f84 <test_clone_slice@@Base+0xa94>
   19cf8:	add	r0, r0, #4
   19cfc:	add	r1, pc, r1
   19d00:	bl	12e08 <strcmp@plt>
   19d04:	cmp	r0, #0
   19d08:	beq	19d1c <test_clone_slice@@Base+0x82c>
   19d0c:	ldr	r0, [pc, #628]	; 19f88 <test_clone_slice@@Base+0xa98>
   19d10:	add	r0, pc, r0
   19d14:	bl	12e14 <printf@plt>
   19d18:	b	19b70 <test_clone_slice@@Base+0x680>
   19d1c:	cmp	r6, #54	; 0x36
   19d20:	bcc	19d68 <test_clone_slice@@Base+0x878>
   19d24:	ldrh	r1, [r7, #52]	; 0x34
   19d28:	cmp	r1, #0
   19d2c:	beq	19d68 <test_clone_slice@@Base+0x878>
   19d30:	mov	r0, r9
   19d34:	ldr	r1, [r0, r1]!
   19d38:	ldr	r1, [r0, r1]!
   19d3c:	cmp	r1, #7
   19d40:	bne	19d68 <test_clone_slice@@Base+0x878>
   19d44:	add	r0, r0, #4
   19d48:	add	r1, sp, #24
   19d4c:	mov	r2, #7
   19d50:	bl	12e38 <memcmp@plt>
   19d54:	cmp	r0, #0
   19d58:	beq	19d74 <test_clone_slice@@Base+0x884>
   19d5c:	ldr	r0, [pc, #556]	; 19f90 <test_clone_slice@@Base+0xaa0>
   19d60:	add	r0, pc, r0
   19d64:	b	19b6c <test_clone_slice@@Base+0x67c>
   19d68:	ldr	r0, [pc, #540]	; 19f8c <test_clone_slice@@Base+0xa9c>
   19d6c:	add	r0, pc, r0
   19d70:	b	19b6c <test_clone_slice@@Base+0x67c>
   19d74:	cmp	r8, #54	; 0x36
   19d78:	bcc	19dbc <test_clone_slice@@Base+0x8cc>
   19d7c:	ldrh	r1, [r4, #52]	; 0x34
   19d80:	cmp	r1, #0
   19d84:	beq	19dbc <test_clone_slice@@Base+0x8cc>
   19d88:	mov	r0, r5
   19d8c:	ldr	r1, [r0, r1]!
   19d90:	ldr	r1, [r0, r1]!
   19d94:	cmp	r1, #4
   19d98:	bne	19dbc <test_clone_slice@@Base+0x8cc>
   19d9c:	add	r0, r0, #4
   19da0:	ldr	r1, [sp, #27]
   19da4:	ldr	r0, [r0]
   19da8:	cmp	r0, r1
   19dac:	beq	19dc8 <test_clone_slice@@Base+0x8d8>
   19db0:	ldr	r0, [pc, #480]	; 19f98 <test_clone_slice@@Base+0xaa8>
   19db4:	add	r0, pc, r0
   19db8:	b	19b6c <test_clone_slice@@Base+0x67c>
   19dbc:	ldr	r0, [pc, #464]	; 19f94 <test_clone_slice@@Base+0xaa4>
   19dc0:	add	r0, pc, r0
   19dc4:	b	19b6c <test_clone_slice@@Base+0x67c>
   19dc8:	ldrh	r0, [r4, #4]
   19dcc:	vldr	s0, [pc, #332]	; 19f20 <test_clone_slice@@Base+0xa30>
   19dd0:	add	r0, r5, r0
   19dd4:	vldr	s2, [r0]
   19dd8:	vcmp.f32	s2, s0
   19ddc:	vmrs	APSR_nzcv, fpscr
   19de0:	beq	19df0 <test_clone_slice@@Base+0x900>
   19de4:	ldr	r0, [pc, #432]	; 19f9c <test_clone_slice@@Base+0xaac>
   19de8:	add	r0, pc, r0
   19dec:	b	19b6c <test_clone_slice@@Base+0x67c>
   19df0:	ldrh	r0, [r4, #22]
   19df4:	cmp	r0, #0
   19df8:	beq	19e64 <test_clone_slice@@Base+0x974>
   19dfc:	ldr	r0, [r5, r0]!
   19e00:	ldr	r0, [r5, r0]!
   19e04:	cmp	r0, #2
   19e08:	bne	19e64 <test_clone_slice@@Base+0x974>
   19e0c:	add	r0, r5, #4
   19e10:	ldrh	r1, [r0]
   19e14:	cmp	r1, #22
   19e18:	bne	19e70 <test_clone_slice@@Base+0x980>
   19e1c:	ldrh	r0, [r0, #4]
   19e20:	cmp	r0, #44	; 0x2c
   19e24:	bne	19e7c <test_clone_slice@@Base+0x98c>
   19e28:	ldrh	r0, [r7, #22]
   19e2c:	cmp	r0, #0
   19e30:	beq	19e88 <test_clone_slice@@Base+0x998>
   19e34:	ldr	r0, [r9, r0]!
   19e38:	ldr	r0, [r9, r0]!
   19e3c:	cmp	r0, #1
   19e40:	bne	19e88 <test_clone_slice@@Base+0x998>
   19e44:	add	r0, r9, #4
   19e48:	mov	r5, #0
   19e4c:	ldrh	r0, [r0]
   19e50:	cmp	r0, #44	; 0x2c
   19e54:	beq	19b74 <test_clone_slice@@Base+0x684>
   19e58:	ldr	r0, [pc, #336]	; 19fb0 <test_clone_slice@@Base+0xac0>
   19e5c:	add	r0, pc, r0
   19e60:	b	19b6c <test_clone_slice@@Base+0x67c>
   19e64:	ldr	r0, [pc, #308]	; 19fa0 <test_clone_slice@@Base+0xab0>
   19e68:	add	r0, pc, r0
   19e6c:	b	19b6c <test_clone_slice@@Base+0x67c>
   19e70:	ldr	r0, [pc, #300]	; 19fa4 <test_clone_slice@@Base+0xab4>
   19e74:	add	r0, pc, r0
   19e78:	b	19b6c <test_clone_slice@@Base+0x67c>
   19e7c:	ldr	r0, [pc, #292]	; 19fa8 <test_clone_slice@@Base+0xab8>
   19e80:	add	r0, pc, r0
   19e84:	b	19b6c <test_clone_slice@@Base+0x67c>
   19e88:	ldr	r0, [pc, #284]	; 19fac <test_clone_slice@@Base+0xabc>
   19e8c:	add	r0, pc, r0
   19e90:	b	19b6c <test_clone_slice@@Base+0x67c>
   19e94:	ldr	r0, [pc, #172]	; 19f48 <test_clone_slice@@Base+0xa58>
   19e98:	add	r0, pc, r0
   19e9c:	b	19ec8 <test_clone_slice@@Base+0x9d8>
   19ea0:	ldr	r0, [pc, #268]	; 19fb4 <test_clone_slice@@Base+0xac4>
   19ea4:	ldr	r1, [pc, #268]	; 19fb8 <test_clone_slice@@Base+0xac8>
   19ea8:	ldr	r3, [pc, #268]	; 19fbc <test_clone_slice@@Base+0xacc>
   19eac:	mov	r2, #235	; 0xeb
   19eb0:	add	r0, pc, r0
   19eb4:	add	r1, pc, r1
   19eb8:	add	r3, pc, r3
   19ebc:	bl	12f04 <__assert_fail@plt>
   19ec0:	ldr	r0, [pc, #116]	; 19f3c <test_clone_slice@@Base+0xa4c>
   19ec4:	add	r0, pc, r0
   19ec8:	ldr	r1, [pc, #112]	; 19f40 <test_clone_slice@@Base+0xa50>
   19ecc:	ldr	r3, [pc, #112]	; 19f44 <test_clone_slice@@Base+0xa54>
   19ed0:	movw	r2, #699	; 0x2bb
   19ed4:	add	r1, pc, r1
   19ed8:	add	r3, pc, r3
   19edc:	bl	12f04 <__assert_fail@plt>
   19ee0:	ldr	r0, [pc, #216]	; 19fc0 <test_clone_slice@@Base+0xad0>
   19ee4:	ldr	r1, [pc, #216]	; 19fc4 <test_clone_slice@@Base+0xad4>
   19ee8:	ldr	r3, [pc, #216]	; 19fc8 <test_clone_slice@@Base+0xad8>
   19eec:	movw	r2, #1606	; 0x646
   19ef0:	add	r0, pc, r0
   19ef4:	add	r1, pc, r1
   19ef8:	add	r3, pc, r3
   19efc:	bl	12f04 <__assert_fail@plt>
   19f00:	ldr	r0, [pc, #196]	; 19fcc <test_clone_slice@@Base+0xadc>
   19f04:	ldr	r1, [pc, #196]	; 19fd0 <test_clone_slice@@Base+0xae0>
   19f08:	ldr	r3, [pc, #196]	; 19fd4 <test_clone_slice@@Base+0xae4>
   19f0c:	movw	r2, #1608	; 0x648
   19f10:	add	r0, pc, r0
   19f14:	add	r1, pc, r1
   19f18:	add	r3, pc, r3
   19f1c:	bl	12f04 <__assert_fail@plt>
   19f20:	eorgt	r3, r9, #-872415232	; 0xcc000000
   19f24:	andeq	fp, r0, ip, ror r8
   19f28:	strdeq	fp, [r0], -sp
   19f2c:	andeq	sp, r0, r4, lsl r7
   19f30:	ldrdeq	r1, [r2], -ip
   19f34:	andeq	fp, r0, r8, asr #29
   19f38:	ldrdeq	fp, [r0], -r8
   19f3c:	andeq	fp, r0, r3, lsl #24
   19f40:	andeq	fp, r0, r9, lsl ip
   19f44:	andeq	ip, r0, r3, lsl r1
   19f48:	andeq	ip, r0, r4, lsr #3
   19f4c:	strdeq	sp, [r0], -r8
   19f50:	andeq	sp, r0, r8, lsr #5
   19f54:	andeq	r1, r2, r0, ror r5
   19f58:	andeq	fp, r0, fp, lsr #21
   19f5c:	strdeq	fp, [r0], -sp
   19f60:	andeq	lr, r0, r0, lsr #7
   19f64:	andeq	fp, r0, r5, ror r9
   19f68:	strdeq	lr, [r0], -r4
   19f6c:	andeq	lr, r0, r8, ror r2
   19f70:	andeq	fp, r0, r5, lsr r9
   19f74:	andeq	lr, r0, r4, ror #4
   19f78:	strdeq	lr, [r0], -r0
   19f7c:	andeq	fp, r0, sl, asr r9
   19f80:	ldrdeq	lr, [r0], -ip
   19f84:	andeq	fp, r0, r7, asr r8
   19f88:			; <UNDEFINED> instruction: 0x0000b8b6
   19f8c:	andeq	lr, r0, ip, asr #1
   19f90:	strheq	lr, [r0], -r8
   19f94:	andeq	lr, r0, r8, lsr r0
   19f98:	andeq	lr, r0, r4, lsr #32
   19f9c:	ldrdeq	sp, [r0], -r0
   19fa0:	andeq	sp, r0, r0, lsl pc
   19fa4:	andeq	sp, r0, r4, ror #29
   19fa8:			; <UNDEFINED> instruction: 0x0000deb8
   19fac:	andeq	sp, r0, ip, lsl #29
   19fb0:	andeq	sp, r0, ip, lsl #29
   19fb4:	andeq	fp, r0, r8, lsr #30
   19fb8:	andeq	fp, r0, fp, ror #27
   19fbc:	andeq	fp, r0, r2, asr #31
   19fc0:	andeq	fp, r0, pc, lsr #13
   19fc4:	andeq	fp, r0, r4, lsr #1
   19fc8:	andeq	fp, r0, lr, ror r6
   19fcc:	muleq	r0, r5, r6
   19fd0:	andeq	fp, r0, r4, lsl #1
   19fd4:	andeq	fp, r0, lr, asr r6
   19fd8:	strdeq	ip, [r0], -sl
   19fdc:	andeq	ip, r0, sp, lsr #10
   19fe0:			; <UNDEFINED> instruction: 0x0000c6b3
   19fe4:	ldrdeq	fp, [r0], -ip
   19fe8:	ldrdeq	fp, [r0], -ip
   19fec:			; <UNDEFINED> instruction: 0x0000b8b6

00019ff0 <test_create_add_field@@Base>:
   19ff0:	push	{r4, r5, fp, lr}
   19ff4:	add	fp, sp, #8
   19ff8:	sub	sp, sp, #8
   19ffc:	mov	r4, r0
   1a000:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1a004:	ldr	r1, [pc, #708]	; 1a2d0 <test_create_add_field@@Base+0x2e0>
   1a008:	mov	r0, r4
   1a00c:	mov	r2, #0
   1a010:	mov	r3, #0
   1a014:	add	r1, pc, r1
   1a018:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1a01c:	cmp	r0, #0
   1a020:	bne	1a030 <test_create_add_field@@Base+0x40>
   1a024:	mov	r0, r4
   1a028:	mov	r1, #36	; 0x24
   1a02c:	bl	206c8 <flatcc_builder_start_table@@Base>
   1a030:	ldr	r1, [pc, #668]	; 1a2d4 <test_create_add_field@@Base+0x2e4>
   1a034:	mov	r0, r4
   1a038:	add	r1, pc, r1
   1a03c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1a040:	cmp	r0, #0
   1a044:	beq	1a060 <test_create_add_field@@Base+0x70>
   1a048:	mov	r5, r0
   1a04c:	mov	r0, r4
   1a050:	mov	r1, #3
   1a054:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a058:	cmp	r0, #0
   1a05c:	strne	r5, [r0]
   1a060:	ldr	r1, [pc, #624]	; 1a2d8 <test_create_add_field@@Base+0x2e8>
   1a064:	mov	r0, r4
   1a068:	add	r1, pc, r1
   1a06c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1a070:	mov	r5, r0
   1a074:	mov	r0, r4
   1a078:	mov	r1, #3
   1a07c:	bl	206c8 <flatcc_builder_start_table@@Base>
   1a080:	cmp	r0, #0
   1a084:	beq	1a118 <test_create_add_field@@Base+0x128>
   1a088:	ldr	r1, [pc, #592]	; 1a2e0 <test_create_add_field@@Base+0x2f0>
   1a08c:	mov	r0, r4
   1a090:	mov	r2, #1
   1a094:	add	r1, pc, r1
   1a098:	bl	2105c <flatcc_builder_check_required@@Base>
   1a09c:	cmp	r0, #0
   1a0a0:	beq	1a290 <test_create_add_field@@Base+0x2a0>
   1a0a4:	mov	r0, r4
   1a0a8:	bl	210f8 <flatcc_builder_end_table@@Base>
   1a0ac:	mov	r1, r0
   1a0b0:	mov	r0, r4
   1a0b4:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1a0b8:	add	r1, sp, #4
   1a0bc:	mov	r0, r4
   1a0c0:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a270 <test_create_add_field@@Base+0x280>
   1a0cc:	mov	r4, r0
   1a0d0:	ldr	r0, [r0, #4]
   1a0d4:	movw	r1, #20301	; 0x4f4d
   1a0d8:	movt	r1, #21326	; 0x534e
   1a0dc:	cmp	r0, r1
   1a0e0:	bne	1a270 <test_create_add_field@@Base+0x280>
   1a0e4:	ldr	r1, [r4]
   1a0e8:	mov	r0, r4
   1a0ec:	ldr	r2, [r0, r1]!
   1a0f0:	mov	r1, r0
   1a0f4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1a0f8:	cmp	r2, #29
   1a0fc:	bls	1a1ec <test_create_add_field@@Base+0x1fc>
   1a100:	ldrh	r3, [r1, #28]
   1a104:	cmp	r3, #0
   1a108:	beq	1a1d0 <test_create_add_field@@Base+0x1e0>
   1a10c:	ldr	r0, [pc, #464]	; 1a2e4 <test_create_add_field@@Base+0x2f4>
   1a110:	add	r0, pc, r0
   1a114:	b	1a254 <test_create_add_field@@Base+0x264>
   1a118:	mov	r0, r4
   1a11c:	mov	r1, #1
   1a120:	mov	r2, #8
   1a124:	mov	r3, #8
   1a128:	bl	21b6c <flatcc_builder_table_add@@Base>
   1a12c:	cmp	r0, #0
   1a130:	beq	1a088 <test_create_add_field@@Base+0x98>
   1a134:	mvn	r2, #99	; 0x63
   1a138:	cmp	r5, #0
   1a13c:	mvn	r1, #0
   1a140:	str	r2, [r0]
   1a144:	str	r1, [r0, #4]
   1a148:	beq	1a088 <test_create_add_field@@Base+0x98>
   1a14c:	mov	r0, r4
   1a150:	mov	r1, #0
   1a154:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a158:	cmp	r0, #0
   1a15c:	beq	1a088 <test_create_add_field@@Base+0x98>
   1a160:	str	r5, [r0]
   1a164:	mov	r0, r4
   1a168:	mov	r1, #2
   1a16c:	mov	r2, #2
   1a170:	mov	r3, #2
   1a174:	mov	r5, #2
   1a178:	bl	21b6c <flatcc_builder_table_add@@Base>
   1a17c:	cmp	r0, #0
   1a180:	beq	1a088 <test_create_add_field@@Base+0x98>
   1a184:	strh	r5, [r0]
   1a188:	mov	r0, r4
   1a18c:	mov	r2, #0
   1a190:	ldr	r1, [pc, #324]	; 1a2dc <test_create_add_field@@Base+0x2ec>
   1a194:	add	r1, pc, r1
   1a198:	bl	2105c <flatcc_builder_check_required@@Base>
   1a19c:	cmp	r0, #0
   1a1a0:	beq	1a2b0 <test_create_add_field@@Base+0x2c0>
   1a1a4:	mov	r0, r4
   1a1a8:	bl	210f8 <flatcc_builder_end_table@@Base>
   1a1ac:	cmp	r0, #0
   1a1b0:	beq	1a088 <test_create_add_field@@Base+0x98>
   1a1b4:	mov	r5, r0
   1a1b8:	mov	r0, r4
   1a1bc:	mov	r1, #14
   1a1c0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a1c4:	cmp	r0, #0
   1a1c8:	strne	r5, [r0]
   1a1cc:	b	1a088 <test_create_add_field@@Base+0x98>
   1a1d0:	cmp	r2, #34	; 0x22
   1a1d4:	bcc	1a1ec <test_create_add_field@@Base+0x1fc>
   1a1d8:	ldrh	r1, [r1, #32]
   1a1dc:	cmp	r1, #0
   1a1e0:	ldrne	r1, [r0, r1]!
   1a1e4:	addsne	r0, r0, r1
   1a1e8:	bne	1a20c <test_create_add_field@@Base+0x21c>
   1a1ec:	ldr	r0, [pc, #284]	; 1a310 <test_create_add_field@@Base+0x320>
   1a1f0:	ldr	r1, [pc, #284]	; 1a314 <test_create_add_field@@Base+0x324>
   1a1f4:	ldr	r3, [pc, #284]	; 1a318 <test_create_add_field@@Base+0x328>
   1a1f8:	mov	r2, #608	; 0x260
   1a1fc:	add	r0, pc, r0
   1a200:	add	r1, pc, r1
   1a204:	add	r3, pc, r3
   1a208:	bl	12f04 <__assert_fail@plt>
   1a20c:	ldr	r2, [r0]
   1a210:	mov	r1, r0
   1a214:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1a218:	cmp	r2, #8
   1a21c:	bcc	1a24c <test_create_add_field@@Base+0x25c>
   1a220:	ldrh	r1, [r1, #6]
   1a224:	cmp	r1, #0
   1a228:	beq	1a24c <test_create_add_field@@Base+0x25c>
   1a22c:	ldr	r1, [r0, r1]!
   1a230:	mvn	r2, #99	; 0x63
   1a234:	mov	r5, #0
   1a238:	ldr	r0, [r0, #4]
   1a23c:	eor	r1, r1, r2
   1a240:	mvn	r0, r0
   1a244:	orrs	r0, r1, r0
   1a248:	beq	1a25c <test_create_add_field@@Base+0x26c>
   1a24c:	ldr	r0, [pc, #148]	; 1a2e8 <test_create_add_field@@Base+0x2f8>
   1a250:	add	r0, pc, r0
   1a254:	bl	12e68 <puts@plt>
   1a258:	mvn	r5, #0
   1a25c:	mov	r0, r4
   1a260:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   1a264:	mov	r0, r5
   1a268:	sub	sp, fp, #8
   1a26c:	pop	{r4, r5, fp, pc}
   1a270:	ldr	r0, [pc, #140]	; 1a304 <test_create_add_field@@Base+0x314>
   1a274:	ldr	r1, [pc, #140]	; 1a308 <test_create_add_field@@Base+0x318>
   1a278:	ldr	r3, [pc, #140]	; 1a30c <test_create_add_field@@Base+0x31c>
   1a27c:	mov	r2, #716	; 0x2cc
   1a280:	add	r0, pc, r0
   1a284:	add	r1, pc, r1
   1a288:	add	r3, pc, r3
   1a28c:	bl	12f04 <__assert_fail@plt>
   1a290:	ldr	r0, [pc, #96]	; 1a2f8 <test_create_add_field@@Base+0x308>
   1a294:	ldr	r1, [pc, #96]	; 1a2fc <test_create_add_field@@Base+0x30c>
   1a298:	ldr	r3, [pc, #96]	; 1a300 <test_create_add_field@@Base+0x310>
   1a29c:	mov	r2, #235	; 0xeb
   1a2a0:	add	r0, pc, r0
   1a2a4:	add	r1, pc, r1
   1a2a8:	add	r3, pc, r3
   1a2ac:	bl	12f04 <__assert_fail@plt>
   1a2b0:	ldr	r0, [pc, #52]	; 1a2ec <test_create_add_field@@Base+0x2fc>
   1a2b4:	ldr	r1, [pc, #52]	; 1a2f0 <test_create_add_field@@Base+0x300>
   1a2b8:	ldr	r3, [pc, #52]	; 1a2f4 <test_create_add_field@@Base+0x304>
   1a2bc:	mov	r2, #221	; 0xdd
   1a2c0:	add	r0, pc, r0
   1a2c4:	add	r1, pc, r1
   1a2c8:	add	r3, pc, r3
   1a2cc:	bl	12f04 <__assert_fail@plt>
   1a2d0:	muleq	r0, r8, sp
   1a2d4:			; <UNDEFINED> instruction: 0x0000adb8
   1a2d8:	andeq	fp, r0, lr, lsl #11
   1a2dc:	andeq	ip, r0, lr, asr #23
   1a2e0:	andeq	ip, r0, r8, asr #25
   1a2e4:	andeq	sp, r0, r8, lsr lr
   1a2e8:	ldrdeq	sp, [r0], -r8
   1a2ec:	andeq	ip, r0, ip, lsr #1
   1a2f0:	ldrdeq	fp, [r0], -fp	; <UNPREDICTABLE>
   1a2f4:	andeq	ip, r0, sp, lsr r1
   1a2f8:	andeq	fp, r0, r8, lsr fp
   1a2fc:	strdeq	fp, [r0], -fp	; <UNPREDICTABLE>
   1a300:	ldrdeq	fp, [r0], -r2
   1a304:	andeq	fp, r0, r7, asr #16
   1a308:	andeq	fp, r0, r9, ror #16
   1a30c:	andeq	ip, r0, r8, asr #3
   1a310:	andeq	fp, r0, fp, asr #17
   1a314:	andeq	fp, r0, sp, ror #17
   1a318:	muleq	r0, r8, r2

0001a31c <test_union_vector@@Base>:
   1a31c:	push	{r4, r5, r6, sl, fp, lr}
   1a320:	add	fp, sp, #16
   1a324:	sub	sp, sp, #16
   1a328:	mov	r4, r0
   1a32c:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1a330:	ldr	r1, [pc, #1344]	; 1a878 <test_union_vector@@Base+0x55c>
   1a334:	mov	r0, r4
   1a338:	mov	r2, #0
   1a33c:	mov	r3, #0
   1a340:	add	r1, pc, r1
   1a344:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1a348:	cmp	r0, #0
   1a34c:	bne	1a35c <test_union_vector@@Base+0x40>
   1a350:	mov	r0, r4
   1a354:	mov	r1, #36	; 0x24
   1a358:	bl	206c8 <flatcc_builder_start_table@@Base>
   1a35c:	ldr	r1, [pc, #1304]	; 1a87c <test_union_vector@@Base+0x560>
   1a360:	mov	r0, r4
   1a364:	add	r1, pc, r1
   1a368:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1a36c:	cmp	r0, #0
   1a370:	beq	1a38c <test_union_vector@@Base+0x70>
   1a374:	mov	r5, r0
   1a378:	mov	r0, r4
   1a37c:	mov	r1, #3
   1a380:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a384:	cmp	r0, #0
   1a388:	strne	r5, [r0]
   1a38c:	mov	r0, r4
   1a390:	mov	r1, #4
   1a394:	bl	206c8 <flatcc_builder_start_table@@Base>
   1a398:	mov	r5, #0
   1a39c:	cmp	r0, #0
   1a3a0:	bne	1a3cc <test_union_vector@@Base+0xb0>
   1a3a4:	ldr	r1, [pc, #1236]	; 1a880 <test_union_vector@@Base+0x564>
   1a3a8:	mov	r0, r4
   1a3ac:	mov	r2, #0
   1a3b0:	add	r1, pc, r1
   1a3b4:	bl	2105c <flatcc_builder_check_required@@Base>
   1a3b8:	cmp	r0, #0
   1a3bc:	beq	1a838 <test_union_vector@@Base+0x51c>
   1a3c0:	mov	r0, r4
   1a3c4:	bl	210f8 <flatcc_builder_end_table@@Base>
   1a3c8:	mov	r5, r0
   1a3cc:	mov	r0, r4
   1a3d0:	bl	221b4 <flatcc_builder_start_union_vector@@Base>
   1a3d4:	mov	r0, r4
   1a3d8:	mov	r1, #2
   1a3dc:	mov	r2, r5
   1a3e0:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1a3e4:	add	r0, sp, #4
   1a3e8:	mov	r1, r4
   1a3ec:	bl	2222c <flatcc_builder_end_union_vector@@Base>
   1a3f0:	ldr	r6, [sp, #4]
   1a3f4:	ldr	r5, [sp, #8]
   1a3f8:	mov	r0, r4
   1a3fc:	mov	r1, #4
   1a400:	bl	206c8 <flatcc_builder_start_table@@Base>
   1a404:	cmp	r6, #0
   1a408:	cmpne	r5, #0
   1a40c:	bne	1a578 <test_union_vector@@Base+0x25c>
   1a410:	ldr	r1, [pc, #1132]	; 1a884 <test_union_vector@@Base+0x568>
   1a414:	mov	r0, r4
   1a418:	mov	r2, #0
   1a41c:	add	r1, pc, r1
   1a420:	bl	2105c <flatcc_builder_check_required@@Base>
   1a424:	cmp	r0, #0
   1a428:	beq	1a7d8 <test_union_vector@@Base+0x4bc>
   1a42c:	mov	r0, r4
   1a430:	bl	210f8 <flatcc_builder_end_table@@Base>
   1a434:	cmp	r0, #0
   1a438:	beq	1a47c <test_union_vector@@Base+0x160>
   1a43c:	mov	r5, r0
   1a440:	mov	r0, r4
   1a444:	mov	r1, #7
   1a448:	mov	r2, #1
   1a44c:	mov	r3, #1
   1a450:	bl	21b6c <flatcc_builder_table_add@@Base>
   1a454:	cmp	r0, #0
   1a458:	beq	1a47c <test_union_vector@@Base+0x160>
   1a45c:	mov	r6, r0
   1a460:	mov	r0, r4
   1a464:	mov	r1, #8
   1a468:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a46c:	cmp	r0, #0
   1a470:	movne	r1, #4
   1a474:	strbne	r1, [r6]
   1a478:	strne	r5, [r0]
   1a47c:	ldr	r1, [pc, #1028]	; 1a888 <test_union_vector@@Base+0x56c>
   1a480:	mov	r0, r4
   1a484:	mov	r2, #1
   1a488:	add	r1, pc, r1
   1a48c:	bl	2105c <flatcc_builder_check_required@@Base>
   1a490:	cmp	r0, #0
   1a494:	beq	1a7f8 <test_union_vector@@Base+0x4dc>
   1a498:	mov	r0, r4
   1a49c:	bl	210f8 <flatcc_builder_end_table@@Base>
   1a4a0:	mov	r1, r0
   1a4a4:	mov	r0, r4
   1a4a8:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1a4ac:	add	r1, sp, #12
   1a4b0:	mov	r0, r4
   1a4b4:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a4b8:	ldr	r1, [sp, #12]
   1a4bc:	ldr	r2, [pc, #968]	; 1a88c <test_union_vector@@Base+0x570>
   1a4c0:	ldr	r3, [pc, #968]	; 1a890 <test_union_vector@@Base+0x574>
   1a4c4:	mov	r4, r0
   1a4c8:	add	r2, pc, r2
   1a4cc:	add	r3, pc, r3
   1a4d0:	bl	24128 <flatcc_verify_table_as_root@@Base>
   1a4d4:	cmp	r0, #0
   1a4d8:	beq	1a4fc <test_union_vector@@Base+0x1e0>
   1a4dc:	bl	234bc <flatcc_verify_error_string@@Base>
   1a4e0:	mov	r1, r0
   1a4e4:	ldr	r0, [pc, #936]	; 1a894 <test_union_vector@@Base+0x578>
   1a4e8:	add	r0, pc, r0
   1a4ec:	bl	12e14 <printf@plt>
   1a4f0:	mvn	r0, #0
   1a4f4:	sub	sp, fp, #16
   1a4f8:	pop	{r4, r5, r6, sl, fp, pc}
   1a4fc:	cmp	r4, #0
   1a500:	beq	1a818 <test_union_vector@@Base+0x4fc>
   1a504:	ldr	r0, [r4, #4]
   1a508:	movw	r1, #20301	; 0x4f4d
   1a50c:	movt	r1, #21326	; 0x534e
   1a510:	cmp	r0, r1
   1a514:	bne	1a818 <test_union_vector@@Base+0x4fc>
   1a518:	ldr	r1, [r4]
   1a51c:	mov	r0, r4
   1a520:	ldr	r2, [r0, r1]!
   1a524:	mov	r1, r0
   1a528:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1a52c:	cmp	r2, #19
   1a530:	bls	1a5a8 <test_union_vector@@Base+0x28c>
   1a534:	ldrh	r3, [r1, #18]
   1a538:	cmp	r3, #0
   1a53c:	beq	1a5a8 <test_union_vector@@Base+0x28c>
   1a540:	ldrb	r3, [r0, r3]
   1a544:	cmp	r3, #4
   1a548:	bne	1a5a8 <test_union_vector@@Base+0x28c>
   1a54c:	cmp	r2, #22
   1a550:	bcc	1a568 <test_union_vector@@Base+0x24c>
   1a554:	ldrh	r1, [r1, #20]
   1a558:	cmp	r1, #0
   1a55c:	ldrne	r1, [r0, r1]!
   1a560:	addsne	r5, r0, r1
   1a564:	bne	1a5c8 <test_union_vector@@Base+0x2ac>
   1a568:	ldr	r0, [pc, #812]	; 1a89c <test_union_vector@@Base+0x580>
   1a56c:	add	r0, pc, r0
   1a570:	bl	12e68 <puts@plt>
   1a574:	b	1a5b4 <test_union_vector@@Base+0x298>
   1a578:	mov	r0, r4
   1a57c:	mov	r1, #2
   1a580:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a584:	cmp	r0, #0
   1a588:	beq	1a410 <test_union_vector@@Base+0xf4>
   1a58c:	str	r6, [r0]
   1a590:	mov	r0, r4
   1a594:	mov	r1, #3
   1a598:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1a59c:	cmp	r0, #0
   1a5a0:	strne	r5, [r0]
   1a5a4:	b	1a410 <test_union_vector@@Base+0xf4>
   1a5a8:	ldr	r0, [pc, #744]	; 1a898 <test_union_vector@@Base+0x57c>
   1a5ac:	add	r0, pc, r0
   1a5b0:	bl	12e14 <printf@plt>
   1a5b4:	mov	r0, r4
   1a5b8:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   1a5bc:	mov	r0, #0
   1a5c0:	sub	sp, fp, #16
   1a5c4:	pop	{r4, r5, r6, sl, fp, pc}
   1a5c8:	ldr	r1, [r5]
   1a5cc:	mov	r2, r5
   1a5d0:	ldrh	r3, [r2, -r1]!
   1a5d4:	cmp	r3, #12
   1a5d8:	bcc	1a5ec <test_union_vector@@Base+0x2d0>
   1a5dc:	ldrh	r1, [r2, #10]
   1a5e0:	cmp	r1, #0
   1a5e4:	bne	1a568 <test_union_vector@@Base+0x24c>
   1a5e8:	b	1a5f4 <test_union_vector@@Base+0x2d8>
   1a5ec:	cmp	r3, #10
   1a5f0:	bcc	1a698 <test_union_vector@@Base+0x37c>
   1a5f4:	ldrh	lr, [r2, #8]
   1a5f8:	mov	r6, #0
   1a5fc:	mov	r1, #0
   1a600:	cmp	lr, #0
   1a604:	movne	r0, r5
   1a608:	ldrne	r6, [r0, lr]!
   1a60c:	addne	r0, r0, r6
   1a610:	addne	r6, r0, #4
   1a614:	cmp	r3, #12
   1a618:	bcc	1a648 <test_union_vector@@Base+0x32c>
   1a61c:	ldrh	r1, [r2, #10]
   1a620:	cmp	r1, #0
   1a624:	beq	1a644 <test_union_vector@@Base+0x328>
   1a628:	mov	r0, r5
   1a62c:	ldr	r1, [r0, r1]!
   1a630:	add	r0, r0, r1
   1a634:	add	r1, r0, #4
   1a638:	cmp	r6, #0
   1a63c:	bne	1a650 <test_union_vector@@Base+0x334>
   1a640:	b	1a698 <test_union_vector@@Base+0x37c>
   1a644:	mov	r1, #0
   1a648:	cmp	r6, #0
   1a64c:	beq	1a698 <test_union_vector@@Base+0x37c>
   1a650:	ldr	r0, [r6, #-4]
   1a654:	cmp	r0, #1
   1a658:	bne	1a698 <test_union_vector@@Base+0x37c>
   1a65c:	ldrb	r0, [r6]
   1a660:	cmp	r0, #2
   1a664:	bne	1a6a4 <test_union_vector@@Base+0x388>
   1a668:	cmp	r1, #0
   1a66c:	ldrne	r0, [r1, #-4]
   1a670:	cmpne	r0, #0
   1a674:	bne	1a6b0 <test_union_vector@@Base+0x394>
   1a678:	ldr	r0, [pc, #620]	; 1a8ec <test_union_vector@@Base+0x5d0>
   1a67c:	ldr	r1, [pc, #620]	; 1a8f0 <test_union_vector@@Base+0x5d4>
   1a680:	ldr	r3, [pc, #620]	; 1a8f4 <test_union_vector@@Base+0x5d8>
   1a684:	mov	r2, #117	; 0x75
   1a688:	add	r0, pc, r0
   1a68c:	add	r1, pc, r1
   1a690:	add	r3, pc, r3
   1a694:	bl	12f04 <__assert_fail@plt>
   1a698:	ldr	r0, [pc, #512]	; 1a8a0 <test_union_vector@@Base+0x584>
   1a69c:	add	r0, pc, r0
   1a6a0:	b	1a570 <test_union_vector@@Base+0x254>
   1a6a4:	ldr	r0, [pc, #504]	; 1a8a4 <test_union_vector@@Base+0x588>
   1a6a8:	add	r0, pc, r0
   1a6ac:	b	1a570 <test_union_vector@@Base+0x254>
   1a6b0:	ldr	r0, [r1]
   1a6b4:	adds	ip, r1, r0
   1a6b8:	beq	1a72c <test_union_vector@@Base+0x410>
   1a6bc:	ldr	r0, [ip]
   1a6c0:	mov	r1, ip
   1a6c4:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
   1a6c8:	cmp	r0, #6
   1a6cc:	bcc	1a6ec <test_union_vector@@Base+0x3d0>
   1a6d0:	ldrh	r1, [r1, #4]
   1a6d4:	cmp	r1, #0
   1a6d8:	beq	1a6ec <test_union_vector@@Base+0x3d0>
   1a6dc:	add	r0, ip, r1
   1a6e0:	ldrsb	r1, [r0]
   1a6e4:	cmp	r1, #2
   1a6e8:	bne	1a7bc <test_union_vector@@Base+0x4a0>
   1a6ec:	cmp	lr, #0
   1a6f0:	mov	r6, #0
   1a6f4:	mov	r1, #0
   1a6f8:	movne	r0, r5
   1a6fc:	ldrne	r6, [r0, lr]!
   1a700:	addne	r0, r0, r6
   1a704:	addne	r6, r0, #4
   1a708:	cmp	r3, #12
   1a70c:	bcc	1a73c <test_union_vector@@Base+0x420>
   1a710:	ldrh	r1, [r2, #10]
   1a714:	cmp	r1, #0
   1a718:	beq	1a738 <test_union_vector@@Base+0x41c>
   1a71c:	ldr	r0, [r5, r1]!
   1a720:	add	r0, r5, r0
   1a724:	add	r1, r0, #4
   1a728:	b	1a73c <test_union_vector@@Base+0x420>
   1a72c:	ldr	r0, [pc, #372]	; 1a8a8 <test_union_vector@@Base+0x58c>
   1a730:	add	r0, pc, r0
   1a734:	b	1a570 <test_union_vector@@Base+0x254>
   1a738:	mov	r1, #0
   1a73c:	cmp	r6, #0
   1a740:	mov	r2, #0
   1a744:	mov	r0, #0
   1a748:	ldrne	r2, [r6, #-4]
   1a74c:	cmp	r1, #0
   1a750:	ldrne	r0, [r1, #-4]
   1a754:	cmp	r2, r0
   1a758:	bne	1a858 <test_union_vector@@Base+0x53c>
   1a75c:	cmp	r6, #0
   1a760:	beq	1a7b0 <test_union_vector@@Base+0x494>
   1a764:	ldr	r0, [r6, #-4]
   1a768:	cmp	r0, #1
   1a76c:	bne	1a7b0 <test_union_vector@@Base+0x494>
   1a770:	ldrb	r0, [r6]
   1a774:	cmp	r0, #0
   1a778:	beq	1a7cc <test_union_vector@@Base+0x4b0>
   1a77c:	cmp	r1, #0
   1a780:	ldrne	r2, [r1, #-4]
   1a784:	cmpne	r2, #0
   1a788:	beq	1a678 <test_union_vector@@Base+0x35c>
   1a78c:	cmp	r0, #2
   1a790:	bne	1a7cc <test_union_vector@@Base+0x4b0>
   1a794:	ldr	r0, [r1]
   1a798:	add	r0, r1, r0
   1a79c:	cmp	r0, ip
   1a7a0:	beq	1a5b4 <test_union_vector@@Base+0x298>
   1a7a4:	ldr	r0, [pc, #268]	; 1a8b8 <test_union_vector@@Base+0x59c>
   1a7a8:	add	r0, pc, r0
   1a7ac:	b	1a570 <test_union_vector@@Base+0x254>
   1a7b0:	ldr	r0, [pc, #248]	; 1a8b0 <test_union_vector@@Base+0x594>
   1a7b4:	add	r0, pc, r0
   1a7b8:	b	1a570 <test_union_vector@@Base+0x254>
   1a7bc:	ldr	r0, [pc, #232]	; 1a8ac <test_union_vector@@Base+0x590>
   1a7c0:	add	r0, pc, r0
   1a7c4:	bl	12e14 <printf@plt>
   1a7c8:	b	1a5b4 <test_union_vector@@Base+0x298>
   1a7cc:	ldr	r0, [pc, #224]	; 1a8b4 <test_union_vector@@Base+0x598>
   1a7d0:	add	r0, pc, r0
   1a7d4:	b	1a570 <test_union_vector@@Base+0x254>
   1a7d8:	ldr	r0, [pc, #232]	; 1a8c8 <test_union_vector@@Base+0x5ac>
   1a7dc:	ldr	r1, [pc, #232]	; 1a8cc <test_union_vector@@Base+0x5b0>
   1a7e0:	ldr	r3, [pc, #232]	; 1a8d0 <test_union_vector@@Base+0x5b4>
   1a7e4:	mov	r2, #223	; 0xdf
   1a7e8:	add	r0, pc, r0
   1a7ec:	add	r1, pc, r1
   1a7f0:	add	r3, pc, r3
   1a7f4:	bl	12f04 <__assert_fail@plt>
   1a7f8:	ldr	r0, [pc, #212]	; 1a8d4 <test_union_vector@@Base+0x5b8>
   1a7fc:	ldr	r1, [pc, #212]	; 1a8d8 <test_union_vector@@Base+0x5bc>
   1a800:	ldr	r3, [pc, #212]	; 1a8dc <test_union_vector@@Base+0x5c0>
   1a804:	mov	r2, #235	; 0xeb
   1a808:	add	r0, pc, r0
   1a80c:	add	r1, pc, r1
   1a810:	add	r3, pc, r3
   1a814:	bl	12f04 <__assert_fail@plt>
   1a818:	ldr	r0, [pc, #192]	; 1a8e0 <test_union_vector@@Base+0x5c4>
   1a81c:	ldr	r1, [pc, #192]	; 1a8e4 <test_union_vector@@Base+0x5c8>
   1a820:	ldr	r3, [pc, #192]	; 1a8e8 <test_union_vector@@Base+0x5cc>
   1a824:	movw	r2, #717	; 0x2cd
   1a828:	add	r0, pc, r0
   1a82c:	add	r1, pc, r1
   1a830:	add	r3, pc, r3
   1a834:	bl	12f04 <__assert_fail@plt>
   1a838:	ldr	r0, [pc, #124]	; 1a8bc <test_union_vector@@Base+0x5a0>
   1a83c:	ldr	r1, [pc, #124]	; 1a8c0 <test_union_vector@@Base+0x5a4>
   1a840:	ldr	r3, [pc, #124]	; 1a8c4 <test_union_vector@@Base+0x5a8>
   1a844:	mov	r2, #217	; 0xd9
   1a848:	add	r0, pc, r0
   1a84c:	add	r1, pc, r1
   1a850:	add	r3, pc, r3
   1a854:	bl	12f04 <__assert_fail@plt>
   1a858:	ldr	r0, [pc, #152]	; 1a8f8 <test_union_vector@@Base+0x5dc>
   1a85c:	ldr	r1, [pc, #152]	; 1a8fc <test_union_vector@@Base+0x5e0>
   1a860:	ldr	r3, [pc, #152]	; 1a900 <test_union_vector@@Base+0x5e4>
   1a864:	movw	r2, #621	; 0x26d
   1a868:	add	r0, pc, r0
   1a86c:	add	r1, pc, r1
   1a870:	add	r3, pc, r3
   1a874:	bl	12f04 <__assert_fail@plt>
   1a878:	andeq	sl, r0, ip, ror #20
   1a87c:	muleq	r0, r8, r2
   1a880:			; <UNDEFINED> instruction: 0x0000c9b4
   1a884:	andeq	ip, r0, sl, asr #18
   1a888:	ldrdeq	ip, [r0], -r4
   1a88c:	andeq	sl, r0, r4, ror #17
   1a890:	andeq	r3, r0, ip, asr r0
   1a894:	andeq	fp, r0, fp, lsl r1
   1a898:	muleq	r0, r3, r0
   1a89c:	andeq	sp, r0, ip, lsl #20
   1a8a0:	andeq	sp, r0, ip, asr #19
   1a8a4:	muleq	r0, r0, r9
   1a8a8:	andeq	ip, r0, r3, ror r5
   1a8ac:	andeq	sl, r0, r1, lsr #29
   1a8b0:	andeq	sp, r0, r4, lsr r8
   1a8b4:	strdeq	sp, [r0], -r8
   1a8b8:	andeq	sp, r0, r0, lsl #16
   1a8bc:	muleq	r0, r1, ip
   1a8c0:	andeq	fp, r0, r3, asr r4
   1a8c4:	andeq	fp, r0, fp, asr sp
   1a8c8:	andeq	fp, r0, r4, lsr lr
   1a8cc:			; <UNDEFINED> instruction: 0x0000b4b3
   1a8d0:	andeq	fp, r0, r2, asr #29
   1a8d4:	ldrdeq	fp, [r0], -r0
   1a8d8:	muleq	r0, r3, r4
   1a8dc:	andeq	fp, r0, sl, ror #12
   1a8e0:	muleq	r0, pc, r2	; <UNPREDICTABLE>
   1a8e4:	andeq	fp, r0, r1, asr #5
   1a8e8:	muleq	r0, r8, sl
   1a8ec:	andeq	fp, r0, lr, lsr #20
   1a8f0:	andeq	fp, r0, r1, ror #20
   1a8f4:	andeq	ip, r0, r8, asr #1
   1a8f8:	andeq	fp, r0, r4, asr #30
   1a8fc:	andeq	fp, r0, r1, lsl #5
   1a900:	andeq	fp, r0, r1, lsr #31

0001a904 <test_mixed_type_union@@Base>:
   1a904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a908:	add	fp, sp, #24
   1a90c:	sub	sp, sp, #16
   1a910:	mov	r4, r0
   1a914:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1a918:	ldr	r1, [pc, #3064]	; 1b518 <test_mixed_type_union@@Base+0xc14>
   1a91c:	mov	r0, r4
   1a920:	mov	r2, #0
   1a924:	mov	r3, #0
   1a928:	mov	r8, #0
   1a92c:	add	r1, pc, r1
   1a930:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1a934:	cmp	r0, #0
   1a938:	bne	1a948 <test_mixed_type_union@@Base+0x44>
   1a93c:	mov	r0, r4
   1a940:	mov	r1, #10
   1a944:	bl	206c8 <flatcc_builder_start_table@@Base>
   1a948:	mov	r0, r4
   1a94c:	mov	r1, #4
   1a950:	mov	r2, #4
   1a954:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1a958:	cmp	r0, #0
   1a95c:	beq	1a974 <test_mixed_type_union@@Base+0x70>
   1a960:	mov	r1, #10
   1a964:	str	r1, [r0]
   1a968:	mov	r0, r4
   1a96c:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1a970:	mov	r8, r0
   1a974:	mov	r0, r4
   1a978:	mov	r1, #2
   1a97c:	mov	r2, #2
   1a980:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1a984:	cmp	r0, #0
   1a988:	beq	1a9a4 <test_mixed_type_union@@Base+0xa0>
   1a98c:	mov	r1, #22
   1a990:	strh	r1, [r0]
   1a994:	mov	r0, r4
   1a998:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1a99c:	mov	r9, r0
   1a9a0:	b	1a9a8 <test_mixed_type_union@@Base+0xa4>
   1a9a4:	mov	r9, #0
   1a9a8:	mov	r0, r4
   1a9ac:	mov	r1, #2
   1a9b0:	mov	r2, #2
   1a9b4:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1aa18 <test_mixed_type_union@@Base+0x114>
   1a9c0:	mov	r1, #19
   1a9c4:	strh	r1, [r0]
   1a9c8:	mov	r0, r4
   1a9cc:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1a9d0:	cmp	r0, #0
   1a9d4:	beq	1aa18 <test_mixed_type_union@@Base+0x114>
   1a9d8:	mov	r5, r0
   1a9dc:	mov	r0, r4
   1a9e0:	mov	r1, #0
   1a9e4:	mov	r2, #1
   1a9e8:	mov	r3, #1
   1a9ec:	bl	21b6c <flatcc_builder_table_add@@Base>
   1a9f0:	cmp	r0, #0
   1a9f4:	beq	1aa18 <test_mixed_type_union@@Base+0x114>
   1a9f8:	mov	r7, r0
   1a9fc:	mov	r0, r4
   1aa00:	mov	r1, #1
   1aa04:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1aa08:	cmp	r0, #0
   1aa0c:	movne	r1, #8
   1aa10:	strbne	r1, [r7]
   1aa14:	strne	r5, [r0]
   1aa18:	cmp	r9, #0
   1aa1c:	beq	1aa5c <test_mixed_type_union@@Base+0x158>
   1aa20:	mov	r0, r4
   1aa24:	mov	r1, #6
   1aa28:	mov	r2, #1
   1aa2c:	mov	r3, #1
   1aa30:	bl	21b6c <flatcc_builder_table_add@@Base>
   1aa34:	cmp	r0, #0
   1aa38:	beq	1aa5c <test_mixed_type_union@@Base+0x158>
   1aa3c:	mov	r5, r0
   1aa40:	mov	r0, r4
   1aa44:	mov	r1, #7
   1aa48:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1aa4c:	cmp	r0, #0
   1aa50:	movne	r1, #8
   1aa54:	strbne	r1, [r5]
   1aa58:	strne	r9, [r0]
   1aa5c:	mov	r0, r4
   1aa60:	mov	r1, #1
   1aa64:	bl	206c8 <flatcc_builder_start_table@@Base>
   1aa68:	mov	r7, #0
   1aa6c:	cmp	r0, #0
   1aa70:	beq	1ac3c <test_mixed_type_union@@Base+0x338>
   1aa74:	ldr	r1, [pc, #2724]	; 1b520 <test_mixed_type_union@@Base+0xc1c>
   1aa78:	mov	r0, r4
   1aa7c:	add	r1, pc, r1
   1aa80:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1aa84:	cmp	r0, #0
   1aa88:	beq	1aacc <test_mixed_type_union@@Base+0x1c8>
   1aa8c:	mov	r5, r0
   1aa90:	mov	r0, r4
   1aa94:	mov	r1, #4
   1aa98:	mov	r2, #1
   1aa9c:	mov	r3, #1
   1aaa0:	bl	21b6c <flatcc_builder_table_add@@Base>
   1aaa4:	cmp	r0, #0
   1aaa8:	beq	1aacc <test_mixed_type_union@@Base+0x1c8>
   1aaac:	mov	r6, r0
   1aab0:	mov	r0, r4
   1aab4:	mov	r1, #5
   1aab8:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1aabc:	cmp	r0, #0
   1aac0:	movne	r1, #11
   1aac4:	strbne	r1, [r6]
   1aac8:	strne	r5, [r0]
   1aacc:	mov	r0, r4
   1aad0:	bl	221b4 <flatcc_builder_start_union_vector@@Base>
   1aad4:	mov	r0, r4
   1aad8:	mov	r1, #8
   1aadc:	mov	r2, r9
   1aae0:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1aae4:	mov	r0, r4
   1aae8:	mov	r1, #2
   1aaec:	mov	r2, r7
   1aaf0:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1aaf4:	mov	r0, r4
   1aaf8:	mov	r1, #1
   1aafc:	bl	206c8 <flatcc_builder_start_table@@Base>
   1ab00:	mov	r6, #0
   1ab04:	cmp	r0, #0
   1ab08:	mov	r5, #0
   1ab0c:	bne	1ab60 <test_mixed_type_union@@Base+0x25c>
   1ab10:	mov	r0, r4
   1ab14:	mov	r1, #0
   1ab18:	mov	r2, #4
   1ab1c:	mov	r3, #4
   1ab20:	mov	r5, #0
   1ab24:	bl	21b6c <flatcc_builder_table_add@@Base>
   1ab28:	cmp	r0, #0
   1ab2c:	beq	1ab60 <test_mixed_type_union@@Base+0x25c>
   1ab30:	mov	r1, #1
   1ab34:	mov	r2, #0
   1ab38:	str	r1, [r0]
   1ab3c:	mov	r0, r4
   1ab40:	ldr	r1, [pc, #2524]	; 1b524 <test_mixed_type_union@@Base+0xc20>
   1ab44:	add	r1, pc, r1
   1ab48:	bl	2105c <flatcc_builder_check_required@@Base>
   1ab4c:	cmp	r0, #0
   1ab50:	beq	1b29c <test_mixed_type_union@@Base+0x998>
   1ab54:	mov	r0, r4
   1ab58:	bl	210f8 <flatcc_builder_end_table@@Base>
   1ab5c:	mov	r5, r0
   1ab60:	mov	r0, r4
   1ab64:	mov	r1, #2
   1ab68:	mov	r2, r5
   1ab6c:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1ab70:	ldr	r1, [pc, #2480]	; 1b528 <test_mixed_type_union@@Base+0xc24>
   1ab74:	mov	r0, r4
   1ab78:	add	r1, pc, r1
   1ab7c:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1ab80:	mov	r2, r0
   1ab84:	mov	r0, r4
   1ab88:	mov	r1, #11
   1ab8c:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1ab90:	mov	r0, r4
   1ab94:	mov	r1, #9
   1ab98:	mov	r2, r8
   1ab9c:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1aba0:	mov	r0, r4
   1aba4:	mov	r1, #4
   1aba8:	mov	r2, #4
   1abac:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1abb0:	mov	r1, #3
   1abb4:	str	r1, [r0]
   1abb8:	mov	r0, r4
   1abbc:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1abc0:	mov	r2, r0
   1abc4:	mov	r0, r4
   1abc8:	mov	r1, #9
   1abcc:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1abd0:	mov	r0, r4
   1abd4:	mov	r1, #4
   1abd8:	mov	r2, #4
   1abdc:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1abfc <test_mixed_type_union@@Base+0x2f8>
   1abe8:	mov	r1, #1
   1abec:	str	r1, [r0]
   1abf0:	mov	r0, r4
   1abf4:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1abf8:	mov	r6, r0
   1abfc:	mov	r0, r4
   1ac00:	mov	r1, #9
   1ac04:	mov	r2, r6
   1ac08:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1ac0c:	mov	r0, r4
   1ac10:	mov	r1, #4
   1ac14:	mov	r2, #4
   1ac18:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1ac1c:	cmp	r0, #0
   1ac20:	beq	1acdc <test_mixed_type_union@@Base+0x3d8>
   1ac24:	mov	r1, #2
   1ac28:	str	r1, [r0]
   1ac2c:	mov	r0, r4
   1ac30:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1ac34:	mov	r2, r0
   1ac38:	b	1ace0 <test_mixed_type_union@@Base+0x3dc>
   1ac3c:	mov	r0, r4
   1ac40:	mov	r1, #0
   1ac44:	mov	r2, #4
   1ac48:	mov	r3, #4
   1ac4c:	mov	r7, #0
   1ac50:	bl	21b6c <flatcc_builder_table_add@@Base>
   1ac54:	cmp	r0, #0
   1ac58:	beq	1aa74 <test_mixed_type_union@@Base+0x170>
   1ac5c:	mov	r1, #42	; 0x2a
   1ac60:	mov	r2, #0
   1ac64:	mov	r7, #0
   1ac68:	str	r1, [r0]
   1ac6c:	mov	r0, r4
   1ac70:	ldr	r1, [pc, #2212]	; 1b51c <test_mixed_type_union@@Base+0xc18>
   1ac74:	add	r1, pc, r1
   1ac78:	bl	2105c <flatcc_builder_check_required@@Base>
   1ac7c:	cmp	r0, #0
   1ac80:	beq	1b29c <test_mixed_type_union@@Base+0x998>
   1ac84:	mov	r0, r4
   1ac88:	bl	210f8 <flatcc_builder_end_table@@Base>
   1ac8c:	cmp	r0, #0
   1ac90:	beq	1aa74 <test_mixed_type_union@@Base+0x170>
   1ac94:	mov	r5, r0
   1ac98:	mov	r0, r4
   1ac9c:	mov	r1, #2
   1aca0:	mov	r2, #1
   1aca4:	mov	r3, #1
   1aca8:	bl	21b6c <flatcc_builder_table_add@@Base>
   1acac:	cmp	r0, #0
   1acb0:	beq	1acd4 <test_mixed_type_union@@Base+0x3d0>
   1acb4:	mov	r6, r0
   1acb8:	mov	r0, r4
   1acbc:	mov	r1, #3
   1acc0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1acc4:	cmp	r0, #0
   1acc8:	movne	r1, #2
   1accc:	strbne	r1, [r6]
   1acd0:	strne	r5, [r0]
   1acd4:	mov	r7, r5
   1acd8:	b	1aa74 <test_mixed_type_union@@Base+0x170>
   1acdc:	mov	r2, #0
   1ace0:	mov	r0, r4
   1ace4:	mov	r1, #9
   1ace8:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1acec:	ldr	r1, [pc, #2104]	; 1b52c <test_mixed_type_union@@Base+0xc28>
   1acf0:	mov	r0, r4
   1acf4:	add	r1, pc, r1
   1acf8:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1acfc:	mov	r2, r0
   1ad00:	mov	r0, r4
   1ad04:	mov	r1, #11
   1ad08:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1ad0c:	ldr	r1, [pc, #2076]	; 1b530 <test_mixed_type_union@@Base+0xc2c>
   1ad10:	mov	r0, r4
   1ad14:	add	r1, pc, r1
   1ad18:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1ad1c:	mov	r2, r0
   1ad20:	mov	r0, r4
   1ad24:	mov	r1, #11
   1ad28:	bl	225e0 <flatcc_builder_union_vector_push@@Base>
   1ad2c:	add	r0, sp, #8
   1ad30:	mov	r1, r4
   1ad34:	bl	2222c <flatcc_builder_end_union_vector@@Base>
   1ad38:	ldr	r6, [sp, #8]
   1ad3c:	cmp	r6, #0
   1ad40:	ldrne	r5, [sp, #12]
   1ad44:	cmpne	r5, #0
   1ad48:	bne	1ae64 <test_mixed_type_union@@Base+0x560>
   1ad4c:	ldr	r1, [pc, #2016]	; 1b534 <test_mixed_type_union@@Base+0xc30>
   1ad50:	mov	r0, r4
   1ad54:	mov	r2, #0
   1ad58:	add	r1, pc, r1
   1ad5c:	bl	2105c <flatcc_builder_check_required@@Base>
   1ad60:	cmp	r0, #0
   1ad64:	beq	1b24c <test_mixed_type_union@@Base+0x948>
   1ad68:	mov	r0, r4
   1ad6c:	bl	210f8 <flatcc_builder_end_table@@Base>
   1ad70:	mov	r1, r0
   1ad74:	mov	r0, r4
   1ad78:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1ad7c:	add	r1, sp, #4
   1ad80:	mov	r0, r4
   1ad84:	bl	22de8 <flatcc_builder_finalize_aligned_buffer@@Base>
   1ad88:	mov	r4, r0
   1ad8c:	ldr	r0, [pc, #1956]	; 1b538 <test_mixed_type_union@@Base+0xc34>
   1ad90:	mov	r1, r4
   1ad94:	ldr	r0, [pc, r0]
   1ad98:	ldr	r2, [sp, #4]
   1ad9c:	ldr	r3, [r0]
   1ada0:	ldr	r0, [pc, #1940]	; 1b53c <test_mixed_type_union@@Base+0xc38>
   1ada4:	add	r0, pc, r0
   1ada8:	bl	1361c <test_type_aliases@@Base+0x554>
   1adac:	ldr	r1, [sp, #4]
   1adb0:	ldr	r2, [pc, #1928]	; 1b540 <test_mixed_type_union@@Base+0xc3c>
   1adb4:	ldr	r3, [pc, #1928]	; 1b544 <test_mixed_type_union@@Base+0xc40>
   1adb8:	mov	r0, r4
   1adbc:	add	r2, pc, r2
   1adc0:	add	r3, pc, r3
   1adc4:	bl	24128 <flatcc_verify_table_as_root@@Base>
   1adc8:	cmp	r0, #0
   1adcc:	beq	1adec <test_mixed_type_union@@Base+0x4e8>
   1add0:	bl	234bc <flatcc_verify_error_string@@Base>
   1add4:	mov	r1, r0
   1add8:	ldr	r0, [pc, #1896]	; 1b548 <test_mixed_type_union@@Base+0xc44>
   1addc:	add	r0, pc, r0
   1ade0:	bl	12e14 <printf@plt>
   1ade4:	mvn	r5, #0
   1ade8:	b	1aeb8 <test_mixed_type_union@@Base+0x5b4>
   1adec:	cmp	r4, #0
   1adf0:	beq	1b27c <test_mixed_type_union@@Base+0x978>
   1adf4:	ldr	r0, [r4, #4]
   1adf8:	movw	r1, #20301	; 0x4f4d
   1adfc:	movt	r1, #21326	; 0x534e
   1ae00:	cmp	r0, r1
   1ae04:	bne	1b27c <test_mixed_type_union@@Base+0x978>
   1ae08:	ldr	r0, [r4]
   1ae0c:	mov	r5, r4
   1ae10:	ldr	r0, [r5, r0]!
   1ae14:	mov	r7, r5
   1ae18:	ldrh	r1, [r7, -r0]!
   1ae1c:	cmp	r1, #7
   1ae20:	bls	1ae94 <test_mixed_type_union@@Base+0x590>
   1ae24:	ldrh	r0, [r7, #6]
   1ae28:	cmp	r0, #0
   1ae2c:	beq	1ae94 <test_mixed_type_union@@Base+0x590>
   1ae30:	cmp	r1, #24
   1ae34:	bcc	1aea0 <test_mixed_type_union@@Base+0x59c>
   1ae38:	ldrh	r6, [r7, #22]
   1ae3c:	cmp	r6, #0
   1ae40:	beq	1aea0 <test_mixed_type_union@@Base+0x59c>
   1ae44:	ldrh	r1, [r7, #4]
   1ae48:	cmp	r1, #0
   1ae4c:	ldrbne	r1, [r5, r1]
   1ae50:	cmpne	r1, #0
   1ae54:	bne	1aec4 <test_mixed_type_union@@Base+0x5c0>
   1ae58:	ldr	r0, [pc, #1780]	; 1b554 <test_mixed_type_union@@Base+0xc50>
   1ae5c:	add	r0, pc, r0
   1ae60:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1ae64:	mov	r0, r4
   1ae68:	mov	r1, #8
   1ae6c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1ae70:	cmp	r0, #0
   1ae74:	beq	1ad4c <test_mixed_type_union@@Base+0x448>
   1ae78:	str	r6, [r0]
   1ae7c:	mov	r0, r4
   1ae80:	mov	r1, #9
   1ae84:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1ae88:	cmp	r0, #0
   1ae8c:	strne	r5, [r0]
   1ae90:	b	1ad4c <test_mixed_type_union@@Base+0x448>
   1ae94:	ldr	r0, [pc, #1712]	; 1b54c <test_mixed_type_union@@Base+0xc48>
   1ae98:	add	r0, pc, r0
   1ae9c:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1aea0:	ldr	r0, [pc, #1704]	; 1b550 <test_mixed_type_union@@Base+0xc4c>
   1aea4:	add	r0, pc, r0
   1aea8:	bl	12e68 <puts@plt>
   1aeac:	mvn	r5, #0
   1aeb0:	mov	r0, r4
   1aeb4:	bl	22f28 <flatcc_builder_aligned_free@@Base>
   1aeb8:	mov	r0, r5
   1aebc:	sub	sp, fp, #24
   1aec0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aec4:	cmp	r1, #8
   1aec8:	bne	1ae58 <test_mixed_type_union@@Base+0x554>
   1aecc:	mov	r1, r5
   1aed0:	ldr	r0, [r1, r0]!
   1aed4:	adds	r0, r1, r0
   1aed8:	beq	1aef4 <test_mixed_type_union@@Base+0x5f0>
   1aedc:	ldrh	r0, [r0]
   1aee0:	cmp	r0, #20
   1aee4:	bcc	1af04 <test_mixed_type_union@@Base+0x600>
   1aee8:	ldr	r0, [pc, #1644]	; 1b55c <test_mixed_type_union@@Base+0xc58>
   1aeec:	add	r0, pc, r0
   1aef0:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1aef4:	ldr	r0, [pc, #1628]	; 1b558 <test_mixed_type_union@@Base+0xc54>
   1aef8:	add	r0, pc, r0
   1aefc:	bl	12e68 <puts@plt>
   1af00:	b	1af48 <test_mixed_type_union@@Base+0x644>
   1af04:	cmp	r0, #19
   1af08:	bne	1af48 <test_mixed_type_union@@Base+0x644>
   1af0c:	ldrh	r0, [r7, #16]
   1af10:	cmp	r0, #0
   1af14:	beq	1af54 <test_mixed_type_union@@Base+0x650>
   1af18:	ldrb	r0, [r5, r0]
   1af1c:	cmp	r0, #8
   1af20:	bne	1af54 <test_mixed_type_union@@Base+0x650>
   1af24:	ldrh	r0, [r7, #18]
   1af28:	cmp	r0, #0
   1af2c:	movne	r1, r5
   1af30:	ldrne	r0, [r1, r0]!
   1af34:	addsne	r0, r1, r0
   1af38:	bne	1af60 <test_mixed_type_union@@Base+0x65c>
   1af3c:	ldr	r0, [pc, #1572]	; 1b568 <test_mixed_type_union@@Base+0xc64>
   1af40:	add	r0, pc, r0
   1af44:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1af48:	ldr	r0, [pc, #1552]	; 1b560 <test_mixed_type_union@@Base+0xc5c>
   1af4c:	add	r0, pc, r0
   1af50:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1af54:	ldr	r0, [pc, #1544]	; 1b564 <test_mixed_type_union@@Base+0xc60>
   1af58:	add	r0, pc, r0
   1af5c:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1af60:	ldrh	r0, [r0]
   1af64:	cmp	r0, #22
   1af68:	bne	1afa8 <test_mixed_type_union@@Base+0x6a4>
   1af6c:	ldrh	r0, [r7, #8]
   1af70:	cmp	r0, #0
   1af74:	beq	1afb4 <test_mixed_type_union@@Base+0x6b0>
   1af78:	ldrb	r0, [r5, r0]
   1af7c:	cmp	r0, #2
   1af80:	bne	1afb4 <test_mixed_type_union@@Base+0x6b0>
   1af84:	ldrh	r0, [r7, #10]
   1af88:	cmp	r0, #0
   1af8c:	movne	r1, r5
   1af90:	ldrne	r0, [r1, r0]!
   1af94:	addsne	r0, r1, r0
   1af98:	bne	1afc0 <test_mixed_type_union@@Base+0x6bc>
   1af9c:	ldr	r0, [pc, #1488]	; 1b574 <test_mixed_type_union@@Base+0xc70>
   1afa0:	add	r0, pc, r0
   1afa4:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1afa8:	ldr	r0, [pc, #1468]	; 1b56c <test_mixed_type_union@@Base+0xc68>
   1afac:	add	r0, pc, r0
   1afb0:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1afb4:	ldr	r0, [pc, #1460]	; 1b570 <test_mixed_type_union@@Base+0xc6c>
   1afb8:	add	r0, pc, r0
   1afbc:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1afc0:	ldr	r2, [r0]
   1afc4:	mov	r1, r0
   1afc8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1afcc:	cmp	r2, #6
   1afd0:	bcc	1af9c <test_mixed_type_union@@Base+0x698>
   1afd4:	ldrh	r1, [r1, #4]
   1afd8:	cmp	r1, #0
   1afdc:	beq	1af9c <test_mixed_type_union@@Base+0x698>
   1afe0:	ldr	r0, [r0, r1]
   1afe4:	cmp	r0, #42	; 0x2a
   1afe8:	bne	1af9c <test_mixed_type_union@@Base+0x698>
   1afec:	ldrh	r0, [r7, #12]
   1aff0:	cmp	r0, #0
   1aff4:	beq	1b054 <test_mixed_type_union@@Base+0x750>
   1aff8:	ldrb	r0, [r5, r0]
   1affc:	cmp	r0, #11
   1b000:	bne	1b054 <test_mixed_type_union@@Base+0x750>
   1b004:	ldrh	r0, [r7, #14]
   1b008:	cmp	r0, #0
   1b00c:	beq	1b060 <test_mixed_type_union@@Base+0x75c>
   1b010:	mov	r1, r5
   1b014:	ldr	r0, [r1, r0]!
   1b018:	adds	r9, r1, r0
   1b01c:	add	r8, r9, #4
   1b020:	movne	r9, r8
   1b024:	beq	1b060 <test_mixed_type_union@@Base+0x75c>
   1b028:	ldr	r1, [pc, #1360]	; 1b580 <test_mixed_type_union@@Base+0xc7c>
   1b02c:	mov	r0, r9
   1b030:	add	r1, pc, r1
   1b034:	bl	12e08 <strcmp@plt>
   1b038:	cmp	r0, #0
   1b03c:	beq	1b06c <test_mixed_type_union@@Base+0x768>
   1b040:	ldr	r0, [pc, #1340]	; 1b584 <test_mixed_type_union@@Base+0xc80>
   1b044:	mov	r1, r9
   1b048:	add	r0, pc, r0
   1b04c:	bl	12e14 <printf@plt>
   1b050:	b	1aeac <test_mixed_type_union@@Base+0x5a8>
   1b054:	ldr	r0, [pc, #1308]	; 1b578 <test_mixed_type_union@@Base+0xc74>
   1b058:	add	r0, pc, r0
   1b05c:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1b060:	ldr	r0, [pc, #1300]	; 1b57c <test_mixed_type_union@@Base+0xc78>
   1b064:	add	r0, pc, r0
   1b068:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1b06c:	ldr	r1, [pc, #1300]	; 1b588 <test_mixed_type_union@@Base+0xc84>
   1b070:	mov	r0, r8
   1b074:	add	r1, pc, r1
   1b078:	bl	12e08 <strcmp@plt>
   1b07c:	cmp	r0, #0
   1b080:	beq	1b090 <test_mixed_type_union@@Base+0x78c>
   1b084:	ldr	r0, [pc, #1280]	; 1b58c <test_mixed_type_union@@Base+0xc88>
   1b088:	add	r0, pc, r0
   1b08c:	b	1b0b0 <test_mixed_type_union@@Base+0x7ac>
   1b090:	ldr	r1, [pc, #1272]	; 1b590 <test_mixed_type_union@@Base+0xc8c>
   1b094:	mov	r0, r8
   1b098:	add	r1, pc, r1
   1b09c:	bl	12e08 <strcmp@plt>
   1b0a0:	cmp	r0, #0
   1b0a4:	beq	1b0bc <test_mixed_type_union@@Base+0x7b8>
   1b0a8:	ldr	r0, [pc, #1252]	; 1b594 <test_mixed_type_union@@Base+0xc90>
   1b0ac:	add	r0, pc, r0
   1b0b0:	mov	r1, r8
   1b0b4:	bl	12e14 <printf@plt>
   1b0b8:	b	1aeac <test_mixed_type_union@@Base+0x5a8>
   1b0bc:	ldrh	r1, [r7, #20]
   1b0c0:	mov	r0, r5
   1b0c4:	cmp	r1, #0
   1b0c8:	beq	1b0f0 <test_mixed_type_union@@Base+0x7ec>
   1b0cc:	ldr	r2, [r0, r6]!
   1b0d0:	add	r0, r0, r2
   1b0d4:	mov	r2, r5
   1b0d8:	ldr	r3, [r2, r1]!
   1b0dc:	add	r0, r0, #4
   1b0e0:	ldr	r3, [r2, r3]!
   1b0e4:	add	r6, r2, #4
   1b0e8:	mov	r2, #0
   1b0ec:	b	1b108 <test_mixed_type_union@@Base+0x804>
   1b0f0:	ldr	r2, [r0, r6]!
   1b0f4:	mov	r6, #0
   1b0f8:	mov	r3, #0
   1b0fc:	add	r0, r0, r2
   1b100:	mov	r2, #1
   1b104:	add	r0, r0, #4
   1b108:	ldr	r7, [r0, #-4]
   1b10c:	cmp	r3, r7
   1b110:	bne	1b4d8 <test_mixed_type_union@@Base+0xbd4>
   1b114:	cmp	r2, #0
   1b118:	bne	1b498 <test_mixed_type_union@@Base+0xb94>
   1b11c:	ldr	r8, [r6, #-4]
   1b120:	cmp	r8, #0
   1b124:	beq	1b498 <test_mixed_type_union@@Base+0xb94>
   1b128:	ldrb	r2, [r6]
   1b12c:	cmp	r2, #0
   1b130:	beq	1b234 <test_mixed_type_union@@Base+0x930>
   1b134:	ldr	r9, [r0, #-4]
   1b138:	cmp	r9, #0
   1b13c:	beq	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b140:	cmp	r2, #8
   1b144:	bne	1b234 <test_mixed_type_union@@Base+0x930>
   1b148:	cmp	r8, #1
   1b14c:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b150:	ldrb	r2, [r6, #1]
   1b154:	cmp	r2, #0
   1b158:	beq	1b240 <test_mixed_type_union@@Base+0x93c>
   1b15c:	cmp	r9, #1
   1b160:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b164:	cmp	r2, #2
   1b168:	bne	1b240 <test_mixed_type_union@@Base+0x93c>
   1b16c:	mov	r2, r0
   1b170:	ldr	r3, [r2, #4]!
   1b174:	add	r2, r2, r3
   1b178:	ldr	r7, [r2]
   1b17c:	mov	r3, r2
   1b180:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
   1b184:	cmp	r7, #6
   1b188:	bcc	1b26c <test_mixed_type_union@@Base+0x968>
   1b18c:	ldrh	r3, [r3, #4]
   1b190:	cmp	r3, #0
   1b194:	beq	1b26c <test_mixed_type_union@@Base+0x968>
   1b198:	ldr	r2, [r2, r3]
   1b19c:	cmp	r2, #42	; 0x2a
   1b1a0:	bne	1b26c <test_mixed_type_union@@Base+0x968>
   1b1a4:	cmp	r8, #2
   1b1a8:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b1ac:	ldrb	r2, [r6, #2]
   1b1b0:	cmp	r2, #0
   1b1b4:	beq	1b2bc <test_mixed_type_union@@Base+0x9b8>
   1b1b8:	cmp	r9, #2
   1b1bc:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b1c0:	cmp	r2, #2
   1b1c4:	bne	1b2bc <test_mixed_type_union@@Base+0x9b8>
   1b1c8:	mov	r2, r0
   1b1cc:	ldr	r3, [r2, #8]!
   1b1d0:	add	r2, r2, r3
   1b1d4:	ldr	r7, [r2]
   1b1d8:	mov	r3, r2
   1b1dc:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
   1b1e0:	cmp	r7, #6
   1b1e4:	bcc	1b2c8 <test_mixed_type_union@@Base+0x9c4>
   1b1e8:	ldrh	r3, [r3, #4]
   1b1ec:	cmp	r3, #0
   1b1f0:	beq	1b2c8 <test_mixed_type_union@@Base+0x9c4>
   1b1f4:	ldr	r2, [r2, r3]
   1b1f8:	cmp	r2, #1
   1b1fc:	bne	1b2c8 <test_mixed_type_union@@Base+0x9c4>
   1b200:	cmp	r1, #0
   1b204:	ldrne	r1, [r5, r1]!
   1b208:	ldrne	r1, [r5, r1]!
   1b20c:	cmpne	r1, #3
   1b210:	bhi	1b2d4 <test_mixed_type_union@@Base+0x9d0>
   1b214:	ldr	r0, [pc, #1032]	; 1b624 <test_mixed_type_union@@Base+0xd20>
   1b218:	ldr	r1, [pc, #1032]	; 1b628 <test_mixed_type_union@@Base+0xd24>
   1b21c:	ldr	r3, [pc, #1032]	; 1b62c <test_mixed_type_union@@Base+0xd28>
   1b220:	movw	r2, #405	; 0x195
   1b224:	add	r0, pc, r0
   1b228:	add	r1, pc, r1
   1b22c:	add	r3, pc, r3
   1b230:	bl	12f04 <__assert_fail@plt>
   1b234:	ldr	r0, [pc, #860]	; 1b598 <test_mixed_type_union@@Base+0xc94>
   1b238:	add	r0, pc, r0
   1b23c:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b240:	ldr	r0, [pc, #852]	; 1b59c <test_mixed_type_union@@Base+0xc98>
   1b244:	add	r0, pc, r0
   1b248:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b24c:	ldr	r0, [pc, #916]	; 1b5e8 <test_mixed_type_union@@Base+0xce4>
   1b250:	ldr	r1, [pc, #916]	; 1b5ec <test_mixed_type_union@@Base+0xce8>
   1b254:	ldr	r3, [pc, #916]	; 1b5f0 <test_mixed_type_union@@Base+0xcec>
   1b258:	mov	r2, #241	; 0xf1
   1b25c:	add	r0, pc, r0
   1b260:	add	r1, pc, r1
   1b264:	add	r3, pc, r3
   1b268:	bl	12f04 <__assert_fail@plt>
   1b26c:	ldr	r0, [pc, #812]	; 1b5a0 <test_mixed_type_union@@Base+0xc9c>
   1b270:	add	r0, pc, r0
   1b274:	bl	12e14 <printf@plt>
   1b278:	b	1aeac <test_mixed_type_union@@Base+0x5a8>
   1b27c:	ldr	r0, [pc, #880]	; 1b5f4 <test_mixed_type_union@@Base+0xcf0>
   1b280:	ldr	r1, [pc, #880]	; 1b5f8 <test_mixed_type_union@@Base+0xcf4>
   1b284:	ldr	r3, [pc, #880]	; 1b5fc <test_mixed_type_union@@Base+0xcf8>
   1b288:	movw	r2, #819	; 0x333
   1b28c:	add	r0, pc, r0
   1b290:	add	r1, pc, r1
   1b294:	add	r3, pc, r3
   1b298:	bl	12f04 <__assert_fail@plt>
   1b29c:	ldr	r0, [pc, #824]	; 1b5dc <test_mixed_type_union@@Base+0xcd8>
   1b2a0:	ldr	r1, [pc, #824]	; 1b5e0 <test_mixed_type_union@@Base+0xcdc>
   1b2a4:	ldr	r3, [pc, #824]	; 1b5e4 <test_mixed_type_union@@Base+0xce0>
   1b2a8:	mov	r2, #239	; 0xef
   1b2ac:	add	r0, pc, r0
   1b2b0:	add	r1, pc, r1
   1b2b4:	add	r3, pc, r3
   1b2b8:	bl	12f04 <__assert_fail@plt>
   1b2bc:	ldr	r0, [pc, #736]	; 1b5a4 <test_mixed_type_union@@Base+0xca0>
   1b2c0:	add	r0, pc, r0
   1b2c4:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b2c8:	ldr	r0, [pc, #728]	; 1b5a8 <test_mixed_type_union@@Base+0xca4>
   1b2cc:	add	r0, pc, r0
   1b2d0:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b2d4:	add	r1, r5, #4
   1b2d8:	ldrb	r1, [r1, #3]
   1b2dc:	cmp	r1, #11
   1b2e0:	bne	1b31c <test_mixed_type_union@@Base+0xa18>
   1b2e4:	cmp	r9, #3
   1b2e8:	bls	1b4f8 <test_mixed_type_union@@Base+0xbf4>
   1b2ec:	ldr	r1, [r0, #12]!
   1b2f0:	add	r0, r0, r1
   1b2f4:	ldr	r1, [pc, #692]	; 1b5b0 <test_mixed_type_union@@Base+0xcac>
   1b2f8:	add	r5, r0, #4
   1b2fc:	mov	r0, r5
   1b300:	add	r1, pc, r1
   1b304:	bl	12e08 <strcmp@plt>
   1b308:	cmp	r0, #0
   1b30c:	beq	1b328 <test_mixed_type_union@@Base+0xa24>
   1b310:	ldr	r0, [pc, #668]	; 1b5b4 <test_mixed_type_union@@Base+0xcb0>
   1b314:	add	r0, pc, r0
   1b318:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1b31c:	ldr	r0, [pc, #648]	; 1b5ac <test_mixed_type_union@@Base+0xca8>
   1b320:	add	r0, pc, r0
   1b324:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1b328:	cmp	r8, #3
   1b32c:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b330:	ldrb	r0, [r6, #3]
   1b334:	cmp	r0, #11
   1b338:	bne	1b360 <test_mixed_type_union@@Base+0xa5c>
   1b33c:	ldr	r1, [pc, #632]	; 1b5bc <test_mixed_type_union@@Base+0xcb8>
   1b340:	mov	r0, r5
   1b344:	add	r1, pc, r1
   1b348:	bl	12e08 <strcmp@plt>
   1b34c:	cmp	r0, #0
   1b350:	beq	1b36c <test_mixed_type_union@@Base+0xa68>
   1b354:	ldr	r0, [pc, #612]	; 1b5c0 <test_mixed_type_union@@Base+0xcbc>
   1b358:	add	r0, pc, r0
   1b35c:	b	1aea8 <test_mixed_type_union@@Base+0x5a4>
   1b360:	ldr	r0, [pc, #592]	; 1b5b8 <test_mixed_type_union@@Base+0xcb4>
   1b364:	add	r0, pc, r0
   1b368:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b36c:	cmp	r8, #4
   1b370:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b374:	ldrb	r0, [r6, #4]
   1b378:	cmp	r0, #0
   1b37c:	beq	1b45c <test_mixed_type_union@@Base+0xb58>
   1b380:	cmp	r9, #4
   1b384:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b388:	cmp	r0, #9
   1b38c:	bne	1b45c <test_mixed_type_union@@Base+0xb58>
   1b390:	cmp	r8, #5
   1b394:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b398:	ldrb	r0, [r6, #5]
   1b39c:	cmp	r0, #0
   1b3a0:	beq	1b468 <test_mixed_type_union@@Base+0xb64>
   1b3a4:	cmp	r9, #5
   1b3a8:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b3ac:	cmp	r0, #9
   1b3b0:	bne	1b468 <test_mixed_type_union@@Base+0xb64>
   1b3b4:	cmp	r8, #6
   1b3b8:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b3bc:	ldrb	r0, [r6, #6]
   1b3c0:	cmp	r0, #0
   1b3c4:	beq	1b474 <test_mixed_type_union@@Base+0xb70>
   1b3c8:	cmp	r9, #6
   1b3cc:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b3d0:	cmp	r0, #9
   1b3d4:	bne	1b474 <test_mixed_type_union@@Base+0xb70>
   1b3d8:	cmp	r8, #7
   1b3dc:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b3e0:	ldrb	r0, [r6, #7]
   1b3e4:	cmp	r0, #0
   1b3e8:	beq	1b480 <test_mixed_type_union@@Base+0xb7c>
   1b3ec:	cmp	r9, #7
   1b3f0:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b3f4:	cmp	r0, #9
   1b3f8:	bne	1b480 <test_mixed_type_union@@Base+0xb7c>
   1b3fc:	cmp	r8, #8
   1b400:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b404:	ldrb	r0, [r6, #8]
   1b408:	cmp	r0, #0
   1b40c:	beq	1b48c <test_mixed_type_union@@Base+0xb88>
   1b410:	cmp	r9, #8
   1b414:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b418:	cmp	r0, #11
   1b41c:	bne	1b48c <test_mixed_type_union@@Base+0xb88>
   1b420:	cmp	r8, #9
   1b424:	bls	1b498 <test_mixed_type_union@@Base+0xb94>
   1b428:	ldrb	r0, [r6, #9]
   1b42c:	cmp	r0, #0
   1b430:	beq	1b48c <test_mixed_type_union@@Base+0xb88>
   1b434:	cmp	r9, #9
   1b438:	bls	1b4b8 <test_mixed_type_union@@Base+0xbb4>
   1b43c:	cmp	r0, #11
   1b440:	bne	1b48c <test_mixed_type_union@@Base+0xb88>
   1b444:	mov	r5, #0
   1b448:	cmp	r8, #10
   1b44c:	beq	1aeb0 <test_mixed_type_union@@Base+0x5ac>
   1b450:	ldr	r0, [pc, #384]	; 1b5d8 <test_mixed_type_union@@Base+0xcd4>
   1b454:	add	r0, pc, r0
   1b458:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b45c:	ldr	r0, [pc, #352]	; 1b5c4 <test_mixed_type_union@@Base+0xcc0>
   1b460:	add	r0, pc, r0
   1b464:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b468:	ldr	r0, [pc, #344]	; 1b5c8 <test_mixed_type_union@@Base+0xcc4>
   1b46c:	add	r0, pc, r0
   1b470:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b474:	ldr	r0, [pc, #336]	; 1b5cc <test_mixed_type_union@@Base+0xcc8>
   1b478:	add	r0, pc, r0
   1b47c:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b480:	ldr	r0, [pc, #328]	; 1b5d0 <test_mixed_type_union@@Base+0xccc>
   1b484:	add	r0, pc, r0
   1b488:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b48c:	ldr	r0, [pc, #320]	; 1b5d4 <test_mixed_type_union@@Base+0xcd0>
   1b490:	add	r0, pc, r0
   1b494:	b	1b274 <test_mixed_type_union@@Base+0x970>
   1b498:	ldr	r0, [pc, #364]	; 1b60c <test_mixed_type_union@@Base+0xd08>
   1b49c:	ldr	r1, [pc, #364]	; 1b610 <test_mixed_type_union@@Base+0xd0c>
   1b4a0:	ldr	r3, [pc, #364]	; 1b614 <test_mixed_type_union@@Base+0xd10>
   1b4a4:	movw	r2, #773	; 0x305
   1b4a8:	add	r0, pc, r0
   1b4ac:	add	r1, pc, r1
   1b4b0:	add	r3, pc, r3
   1b4b4:	bl	12f04 <__assert_fail@plt>
   1b4b8:	ldr	r0, [pc, #344]	; 1b618 <test_mixed_type_union@@Base+0xd14>
   1b4bc:	ldr	r1, [pc, #344]	; 1b61c <test_mixed_type_union@@Base+0xd18>
   1b4c0:	ldr	r3, [pc, #344]	; 1b620 <test_mixed_type_union@@Base+0xd1c>
   1b4c4:	mov	r2, #117	; 0x75
   1b4c8:	add	r0, pc, r0
   1b4cc:	add	r1, pc, r1
   1b4d0:	add	r3, pc, r3
   1b4d4:	bl	12f04 <__assert_fail@plt>
   1b4d8:	ldr	r0, [pc, #288]	; 1b600 <test_mixed_type_union@@Base+0xcfc>
   1b4dc:	ldr	r1, [pc, #288]	; 1b604 <test_mixed_type_union@@Base+0xd00>
   1b4e0:	ldr	r3, [pc, #288]	; 1b608 <test_mixed_type_union@@Base+0xd04>
   1b4e4:	movw	r2, #823	; 0x337
   1b4e8:	add	r0, pc, r0
   1b4ec:	add	r1, pc, r1
   1b4f0:	add	r3, pc, r3
   1b4f4:	bl	12f04 <__assert_fail@plt>
   1b4f8:	ldr	r0, [pc, #304]	; 1b630 <test_mixed_type_union@@Base+0xd2c>
   1b4fc:	ldr	r1, [pc, #304]	; 1b634 <test_mixed_type_union@@Base+0xd30>
   1b500:	ldr	r3, [pc, #304]	; 1b638 <test_mixed_type_union@@Base+0xd34>
   1b504:	mov	r2, #119	; 0x77
   1b508:	add	r0, pc, r0
   1b50c:	add	r1, pc, r1
   1b510:	add	r3, pc, r3
   1b514:	bl	12f04 <__assert_fail@plt>
   1b518:	andeq	sl, r0, r0, lsl #9
   1b51c:	strdeq	ip, [r0], -r4
   1b520:	andeq	sl, r0, r2, lsl #24
   1b524:	andeq	ip, r0, r4, lsr #4
   1b528:	andeq	sl, r0, r1, lsl fp
   1b52c:	muleq	r0, r3, r9
   1b530:	andeq	sl, r0, pc, ror #18
   1b534:	andeq	ip, r0, r2, lsl r0
   1b538:	andeq	r0, r2, ip, asr #5
   1b53c:	andeq	sl, r0, fp, ror #17
   1b540:	strdeq	r9, [r0], -r0
   1b544:	andeq	r2, r0, r4, ror #28
   1b548:	andeq	sl, r0, r0, asr #17
   1b54c:	andeq	sp, r0, r0, lsl #4
   1b550:	andeq	sp, r0, r4, lsr #4
   1b554:	strdeq	sp, [r0], -ip
   1b558:	andeq	sp, r0, r0, lsl #4
   1b55c:	andeq	sp, r0, ip, lsr r4
   1b560:	andeq	sp, r0, ip, lsr #7
   1b564:	andeq	sp, r0, r0, ror #6
   1b568:	ldrdeq	sp, [r0], -r8
   1b56c:	ldrdeq	sp, [r0], -ip
   1b570:			; <UNDEFINED> instruction: 0x0000d2b0
   1b574:	andeq	sp, r0, r8, lsr #3
   1b578:	strdeq	sp, [r0], -r0
   1b57c:	andeq	sp, r0, r4, lsl r1
   1b580:	andeq	sl, r0, lr, asr #12
   1b584:	andeq	sl, r0, r3, lsr #13
   1b588:	andeq	sl, r0, sl, lsl #12
   1b58c:	andeq	sl, r0, r7, lsl #13
   1b590:	andeq	sl, r0, r6, ror #11
   1b594:	muleq	r0, r0, r6
   1b598:	andeq	sl, r0, r1, lsr r5
   1b59c:	andeq	sl, r0, sl, asr #10
   1b5a0:	andeq	sl, r0, r1, asr #10
   1b5a4:	andeq	sl, r0, r3, lsr #10
   1b5a8:	andeq	sl, r0, r9, lsr r5
   1b5ac:	strdeq	ip, [r0], -r8
   1b5b0:	andeq	sl, r0, r9, lsl #7
   1b5b4:	andeq	ip, r0, r4, lsl #29
   1b5b8:	ldrdeq	sl, [r0], -r2
   1b5bc:	andeq	sl, r0, r5, asr #6
   1b5c0:	andeq	ip, r0, r0, lsl #29
   1b5c4:	andeq	sl, r0, lr, lsl #8
   1b5c8:	andeq	sl, r0, r4, lsr #8
   1b5cc:	andeq	sl, r0, sl, lsr r4
   1b5d0:	andeq	sl, r0, r2, asr r4
   1b5d4:	andeq	sl, r0, r9, ror #8
   1b5d8:	ldrdeq	sl, [r0], -r1
   1b5dc:	andeq	fp, r0, r1, ror #11
   1b5e0:	andeq	sl, r0, pc, ror #19
   1b5e4:	andeq	fp, r0, r9, ror #12
   1b5e8:	andeq	fp, r0, r6, lsl #14
   1b5ec:	andeq	sl, r0, pc, lsr sl
   1b5f0:	andeq	fp, r0, r5, lsl #15
   1b5f4:	andeq	sl, r0, fp, lsr r8
   1b5f8:	andeq	sl, r0, sp, asr r8
   1b5fc:	muleq	r0, r4, r7
   1b600:	andeq	fp, r0, r4, asr #5
   1b604:	andeq	sl, r0, r1, lsl #12
   1b608:	andeq	fp, r0, fp, ror r5
   1b60c:	andeq	fp, r0, r5, asr #7
   1b610:	andeq	sl, r0, r1, asr #12
   1b614:	andeq	fp, r0, pc, lsl #12
   1b618:	andeq	sl, r0, lr, ror #23
   1b61c:	andeq	sl, r0, r1, lsr #24
   1b620:	andeq	fp, r0, r8, lsl #5
   1b624:	muleq	r0, r2, lr
   1b628:	andeq	sl, r0, r5, asr #29
   1b62c:	andeq	fp, r0, pc, asr #9
   1b630:	andeq	sl, r0, lr, lsr #23
   1b634:	andeq	sl, r0, r1, ror #23
   1b638:	andeq	fp, r0, pc, lsl #12

0001b63c <test_add_set_defaults@@Base>:
   1b63c:	push	{r4, r5, r6, sl, fp, lr}
   1b640:	add	fp, sp, #16
   1b644:	sub	sp, sp, #8
   1b648:	mov	r4, r0
   1b64c:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1b650:	ldr	r1, [pc, #768]	; 1b958 <test_add_set_defaults@@Base+0x31c>
   1b654:	mov	r0, r4
   1b658:	mov	r2, #0
   1b65c:	mov	r3, #0
   1b660:	add	r1, pc, r1
   1b664:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1b668:	cmp	r0, #0
   1b66c:	bne	1b67c <test_add_set_defaults@@Base+0x40>
   1b670:	mov	r0, r4
   1b674:	mov	r1, #36	; 0x24
   1b678:	bl	206c8 <flatcc_builder_start_table@@Base>
   1b67c:	ldr	r1, [pc, #728]	; 1b95c <test_add_set_defaults@@Base+0x320>
   1b680:	mov	r0, r4
   1b684:	add	r1, pc, r1
   1b688:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1b68c:	cmp	r0, #0
   1b690:	beq	1b6ac <test_add_set_defaults@@Base+0x70>
   1b694:	mov	r5, r0
   1b698:	mov	r0, r4
   1b69c:	mov	r1, #3
   1b6a0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1b6a4:	cmp	r0, #0
   1b6a8:	strne	r5, [r0]
   1b6ac:	mov	r0, r4
   1b6b0:	mov	r1, #1
   1b6b4:	mov	r2, #2
   1b6b8:	mov	r3, #2
   1b6bc:	bl	21b6c <flatcc_builder_table_add@@Base>
   1b6c0:	cmp	r0, #0
   1b6c4:	mov	r2, #1
   1b6c8:	movne	r1, #100	; 0x64
   1b6cc:	strhne	r1, [r0]
   1b6d0:	mov	r0, r4
   1b6d4:	ldr	r1, [pc, #644]	; 1b960 <test_add_set_defaults@@Base+0x324>
   1b6d8:	add	r1, pc, r1
   1b6dc:	bl	2105c <flatcc_builder_check_required@@Base>
   1b6e0:	cmp	r0, #0
   1b6e4:	beq	1b938 <test_add_set_defaults@@Base+0x2fc>
   1b6e8:	mov	r0, r4
   1b6ec:	bl	210f8 <flatcc_builder_end_table@@Base>
   1b6f0:	mov	r1, r0
   1b6f4:	mov	r0, r4
   1b6f8:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1b6fc:	add	r1, sp, #4
   1b700:	mov	r0, r4
   1b704:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   1b708:	cmp	r0, #0
   1b70c:	beq	1b918 <test_add_set_defaults@@Base+0x2dc>
   1b710:	ldr	r1, [r0, #4]
   1b714:	movw	r6, #20301	; 0x4f4d
   1b718:	movt	r6, #21326	; 0x534e
   1b71c:	cmp	r1, r6
   1b720:	bne	1b918 <test_add_set_defaults@@Base+0x2dc>
   1b724:	ldr	r1, [r0]
   1b728:	ldr	r1, [r0, r1]!
   1b72c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1b730:	cmp	r1, #9
   1b734:	bls	1b750 <test_add_set_defaults@@Base+0x114>
   1b738:	ldrh	r2, [r0, #8]
   1b73c:	cmp	r2, #0
   1b740:	beq	1b758 <test_add_set_defaults@@Base+0x11c>
   1b744:	ldr	r0, [pc, #536]	; 1b964 <test_add_set_defaults@@Base+0x328>
   1b748:	add	r0, pc, r0
   1b74c:	b	1b8fc <test_add_set_defaults@@Base+0x2c0>
   1b750:	cmp	r1, #8
   1b754:	bcc	1b784 <test_add_set_defaults@@Base+0x148>
   1b758:	ldrh	r2, [r0, #6]
   1b75c:	cmp	r2, #0
   1b760:	beq	1b784 <test_add_set_defaults@@Base+0x148>
   1b764:	cmp	r1, #18
   1b768:	bcc	1b790 <test_add_set_defaults@@Base+0x154>
   1b76c:	ldrh	r0, [r0, #16]
   1b770:	cmp	r0, #0
   1b774:	beq	1b790 <test_add_set_defaults@@Base+0x154>
   1b778:	ldr	r0, [pc, #492]	; 1b96c <test_add_set_defaults@@Base+0x330>
   1b77c:	add	r0, pc, r0
   1b780:	b	1b8fc <test_add_set_defaults@@Base+0x2c0>
   1b784:	ldr	r0, [pc, #476]	; 1b968 <test_add_set_defaults@@Base+0x32c>
   1b788:	add	r0, pc, r0
   1b78c:	b	1b8fc <test_add_set_defaults@@Base+0x2c0>
   1b790:	mov	r0, r4
   1b794:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1b798:	ldr	r1, [pc, #464]	; 1b970 <test_add_set_defaults@@Base+0x334>
   1b79c:	mov	r0, r4
   1b7a0:	mov	r2, #0
   1b7a4:	mov	r3, #0
   1b7a8:	add	r1, pc, r1
   1b7ac:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1b7b0:	cmp	r0, #0
   1b7b4:	bne	1b7c4 <test_add_set_defaults@@Base+0x188>
   1b7b8:	mov	r0, r4
   1b7bc:	mov	r1, #36	; 0x24
   1b7c0:	bl	206c8 <flatcc_builder_start_table@@Base>
   1b7c4:	ldr	r1, [pc, #424]	; 1b974 <test_add_set_defaults@@Base+0x338>
   1b7c8:	mov	r0, r4
   1b7cc:	add	r1, pc, r1
   1b7d0:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1b7d4:	cmp	r0, #0
   1b7d8:	beq	1b7f4 <test_add_set_defaults@@Base+0x1b8>
   1b7dc:	mov	r5, r0
   1b7e0:	mov	r0, r4
   1b7e4:	mov	r1, #3
   1b7e8:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1b7ec:	cmp	r0, #0
   1b7f0:	strne	r5, [r0]
   1b7f4:	mov	r0, r4
   1b7f8:	mov	r1, #2
   1b7fc:	mov	r2, #2
   1b800:	mov	r3, #2
   1b804:	bl	21b6c <flatcc_builder_table_add@@Base>
   1b808:	cmp	r0, #0
   1b80c:	mov	r2, #2
   1b810:	mov	r3, #2
   1b814:	movne	r1, #100	; 0x64
   1b818:	strhne	r1, [r0]
   1b81c:	mov	r0, r4
   1b820:	mov	r1, #1
   1b824:	bl	21b6c <flatcc_builder_table_add@@Base>
   1b828:	cmp	r0, #0
   1b82c:	mov	r2, #1
   1b830:	mov	r3, #1
   1b834:	movne	r1, #100	; 0x64
   1b838:	strhne	r1, [r0]
   1b83c:	mov	r0, r4
   1b840:	mov	r1, #6
   1b844:	bl	21b6c <flatcc_builder_table_add@@Base>
   1b848:	cmp	r0, #0
   1b84c:	mov	r2, #1
   1b850:	movne	r1, #8
   1b854:	strbne	r1, [r0]
   1b858:	mov	r0, r4
   1b85c:	ldr	r1, [pc, #276]	; 1b978 <test_add_set_defaults@@Base+0x33c>
   1b860:	add	r1, pc, r1
   1b864:	bl	2105c <flatcc_builder_check_required@@Base>
   1b868:	cmp	r0, #0
   1b86c:	beq	1b938 <test_add_set_defaults@@Base+0x2fc>
   1b870:	mov	r0, r4
   1b874:	bl	210f8 <flatcc_builder_end_table@@Base>
   1b878:	mov	r1, r0
   1b87c:	mov	r0, r4
   1b880:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1b884:	add	r1, sp, #4
   1b888:	mov	r0, r4
   1b88c:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   1b890:	cmp	r0, #0
   1b894:	beq	1b918 <test_add_set_defaults@@Base+0x2dc>
   1b898:	ldr	r1, [r0, #4]
   1b89c:	cmp	r1, r6
   1b8a0:	bne	1b918 <test_add_set_defaults@@Base+0x2dc>
   1b8a4:	ldr	r1, [r0]
   1b8a8:	ldr	r1, [r0, r1]!
   1b8ac:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1b8b0:	cmp	r1, #9
   1b8b4:	bls	1b8f4 <test_add_set_defaults@@Base+0x2b8>
   1b8b8:	ldrh	r2, [r0, #8]
   1b8bc:	cmp	r2, #0
   1b8c0:	beq	1b8f4 <test_add_set_defaults@@Base+0x2b8>
   1b8c4:	ldrh	r2, [r0, #6]
   1b8c8:	cmp	r2, #0
   1b8cc:	beq	1b90c <test_add_set_defaults@@Base+0x2d0>
   1b8d0:	cmp	r1, #18
   1b8d4:	bcc	1b8e8 <test_add_set_defaults@@Base+0x2ac>
   1b8d8:	ldrh	r1, [r0, #16]
   1b8dc:	mov	r0, #0
   1b8e0:	cmp	r1, #0
   1b8e4:	bne	1b904 <test_add_set_defaults@@Base+0x2c8>
   1b8e8:	ldr	r0, [pc, #148]	; 1b984 <test_add_set_defaults@@Base+0x348>
   1b8ec:	add	r0, pc, r0
   1b8f0:	b	1b8fc <test_add_set_defaults@@Base+0x2c0>
   1b8f4:	ldr	r0, [pc, #128]	; 1b97c <test_add_set_defaults@@Base+0x340>
   1b8f8:	add	r0, pc, r0
   1b8fc:	bl	12e68 <puts@plt>
   1b900:	mvn	r0, #0
   1b904:	sub	sp, fp, #16
   1b908:	pop	{r4, r5, r6, sl, fp, pc}
   1b90c:	ldr	r0, [pc, #108]	; 1b980 <test_add_set_defaults@@Base+0x344>
   1b910:	add	r0, pc, r0
   1b914:	b	1b8fc <test_add_set_defaults@@Base+0x2c0>
   1b918:	ldr	r0, [pc, #116]	; 1b994 <test_add_set_defaults@@Base+0x358>
   1b91c:	ldr	r1, [pc, #116]	; 1b998 <test_add_set_defaults@@Base+0x35c>
   1b920:	ldr	r3, [pc, #116]	; 1b99c <test_add_set_defaults@@Base+0x360>
   1b924:	movw	r2, #697	; 0x2b9
   1b928:	add	r0, pc, r0
   1b92c:	add	r1, pc, r1
   1b930:	add	r3, pc, r3
   1b934:	bl	12f04 <__assert_fail@plt>
   1b938:	ldr	r0, [pc, #72]	; 1b988 <test_add_set_defaults@@Base+0x34c>
   1b93c:	ldr	r1, [pc, #72]	; 1b98c <test_add_set_defaults@@Base+0x350>
   1b940:	ldr	r3, [pc, #72]	; 1b990 <test_add_set_defaults@@Base+0x354>
   1b944:	mov	r2, #235	; 0xeb
   1b948:	add	r0, pc, r0
   1b94c:	add	r1, pc, r1
   1b950:	add	r3, pc, r3
   1b954:	bl	12f04 <__assert_fail@plt>
   1b958:	andeq	r9, r0, ip, asr #14
   1b95c:	andeq	r9, r0, ip, ror #14
   1b960:	andeq	fp, r0, r4, lsl #13
   1b964:	andeq	ip, r0, r0, asr sp
   1b968:	strdeq	ip, [r0], -r0
   1b96c:	andeq	ip, r0, ip, ror #25
   1b970:	andeq	r9, r0, r4, lsl #12
   1b974:	andeq	r9, r0, r4, lsr #12
   1b978:	strdeq	fp, [r0], -ip
   1b97c:			; <UNDEFINED> instruction: 0x0000cab0
   1b980:	ldrdeq	ip, [r0], -r8
   1b984:	andeq	ip, r0, ip, lsr fp
   1b988:	muleq	r0, r0, r4
   1b98c:	andeq	sl, r0, r3, asr r3
   1b990:	andeq	sl, r0, sl, lsr #10
   1b994:	muleq	r0, pc, r1	; <UNPREDICTABLE>
   1b998:	andeq	sl, r0, r1, asr #3
   1b99c:	andeq	sl, r0, r8, ror r2

0001b9a0 <test_nested_buffer@@Base>:
   1b9a0:	push	{r4, r5, r6, r7, fp, lr}
   1b9a4:	add	fp, sp, #16
   1b9a8:	sub	sp, sp, #8
   1b9ac:	mov	r4, r0
   1b9b0:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1b9b4:	ldr	r1, [pc, #772]	; 1bcc0 <test_nested_buffer@@Base+0x320>
   1b9b8:	mov	r0, r4
   1b9bc:	mov	r2, #0
   1b9c0:	mov	r3, #0
   1b9c4:	add	r1, pc, r1
   1b9c8:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1b9cc:	cmp	r0, #0
   1b9d0:	bne	1b9e0 <test_nested_buffer@@Base+0x40>
   1b9d4:	mov	r0, r4
   1b9d8:	mov	r1, #36	; 0x24
   1b9dc:	bl	206c8 <flatcc_builder_start_table@@Base>
   1b9e0:	ldr	r1, [pc, #732]	; 1bcc4 <test_nested_buffer@@Base+0x324>
   1b9e4:	mov	r0, r4
   1b9e8:	add	r1, pc, r1
   1b9ec:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1b9f0:	cmp	r0, #0
   1b9f4:	beq	1ba10 <test_nested_buffer@@Base+0x70>
   1b9f8:	mov	r5, r0
   1b9fc:	mov	r0, r4
   1ba00:	mov	r1, #3
   1ba04:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1ba08:	cmp	r0, #0
   1ba0c:	strne	r5, [r0]
   1ba10:	ldr	r1, [pc, #688]	; 1bcc8 <test_nested_buffer@@Base+0x328>
   1ba14:	mov	r0, r4
   1ba18:	mov	r2, #0
   1ba1c:	mov	r3, #0
   1ba20:	add	r1, pc, r1
   1ba24:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1ba28:	cmp	r0, #0
   1ba2c:	bne	1ba3c <test_nested_buffer@@Base+0x9c>
   1ba30:	mov	r0, r4
   1ba34:	mov	r1, #36	; 0x24
   1ba38:	bl	206c8 <flatcc_builder_start_table@@Base>
   1ba3c:	ldr	r1, [pc, #648]	; 1bccc <test_nested_buffer@@Base+0x32c>
   1ba40:	mov	r0, r4
   1ba44:	add	r1, pc, r1
   1ba48:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1ba4c:	cmp	r0, #0
   1ba50:	beq	1ba6c <test_nested_buffer@@Base+0xcc>
   1ba54:	mov	r5, r0
   1ba58:	mov	r0, r4
   1ba5c:	mov	r1, #3
   1ba60:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1ba64:	cmp	r0, #0
   1ba68:	strne	r5, [r0]
   1ba6c:	ldr	r1, [pc, #604]	; 1bcd0 <test_nested_buffer@@Base+0x330>
   1ba70:	mov	r0, r4
   1ba74:	mov	r2, #1
   1ba78:	add	r1, pc, r1
   1ba7c:	bl	2105c <flatcc_builder_check_required@@Base>
   1ba80:	cmp	r0, #0
   1ba84:	beq	1bca0 <test_nested_buffer@@Base+0x300>
   1ba88:	mov	r0, r4
   1ba8c:	bl	210f8 <flatcc_builder_end_table@@Base>
   1ba90:	mov	r1, r0
   1ba94:	mov	r0, r4
   1ba98:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1ba9c:	cmp	r0, #0
   1baa0:	beq	1babc <test_nested_buffer@@Base+0x11c>
   1baa4:	mov	r5, r0
   1baa8:	mov	r0, r4
   1baac:	mov	r1, #13
   1bab0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1bab4:	cmp	r0, #0
   1bab8:	strne	r5, [r0]
   1babc:	mov	r0, r4
   1bac0:	mov	r1, #2
   1bac4:	mov	r2, #2
   1bac8:	mov	r3, #2
   1bacc:	bl	21b6c <flatcc_builder_table_add@@Base>
   1bad0:	cmp	r0, #0
   1bad4:	mov	r2, #1
   1bad8:	movne	r1, #10
   1badc:	strhne	r1, [r0]
   1bae0:	mov	r0, r4
   1bae4:	ldr	r1, [pc, #488]	; 1bcd4 <test_nested_buffer@@Base+0x334>
   1bae8:	add	r1, pc, r1
   1baec:	bl	2105c <flatcc_builder_check_required@@Base>
   1baf0:	cmp	r0, #0
   1baf4:	beq	1bca0 <test_nested_buffer@@Base+0x300>
   1baf8:	mov	r0, r4
   1bafc:	bl	210f8 <flatcc_builder_end_table@@Base>
   1bb00:	mov	r1, r0
   1bb04:	mov	r0, r4
   1bb08:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1bb0c:	add	r1, sp, #4
   1bb10:	mov	r0, r4
   1bb14:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   1bb18:	mov	r4, r0
   1bb1c:	ldr	r0, [pc, #436]	; 1bcd8 <test_nested_buffer@@Base+0x338>
   1bb20:	mov	r1, r4
   1bb24:	ldr	r0, [pc, r0]
   1bb28:	ldr	r2, [sp, #4]
   1bb2c:	ldr	r3, [r0]
   1bb30:	ldr	r0, [pc, #420]	; 1bcdc <test_nested_buffer@@Base+0x33c>
   1bb34:	add	r0, pc, r0
   1bb38:	bl	1361c <test_type_aliases@@Base+0x554>
   1bb3c:	cmp	r4, #0
   1bb40:	beq	1bc74 <test_nested_buffer@@Base+0x2d4>
   1bb44:	ldr	r0, [r4, #4]
   1bb48:	movw	r6, #20301	; 0x4f4d
   1bb4c:	movt	r6, #21326	; 0x534e
   1bb50:	cmp	r0, r6
   1bb54:	bne	1bc74 <test_nested_buffer@@Base+0x2d4>
   1bb58:	ldr	r0, [r4]
   1bb5c:	ldr	r0, [r4, r0]!
   1bb60:	mov	r5, r4
   1bb64:	ldrh	r7, [r5, -r0]!
   1bb68:	cmp	r7, #11
   1bb6c:	bls	1bc80 <test_nested_buffer@@Base+0x2e0>
   1bb70:	ldrh	r0, [r5, #10]
   1bb74:	cmp	r0, #0
   1bb78:	beq	1bc80 <test_nested_buffer@@Base+0x2e0>
   1bb7c:	mov	r1, r4
   1bb80:	ldr	r0, [r1, r0]!
   1bb84:	add	r0, r1, r0
   1bb88:	ldr	r1, [pc, #352]	; 1bcf0 <test_nested_buffer@@Base+0x350>
   1bb8c:	add	r0, r0, #4
   1bb90:	add	r1, pc, r1
   1bb94:	bl	12e08 <strcmp@plt>
   1bb98:	cmp	r0, #0
   1bb9c:	beq	1bbac <test_nested_buffer@@Base+0x20c>
   1bba0:	ldr	r0, [pc, #332]	; 1bcf4 <test_nested_buffer@@Base+0x354>
   1bba4:	add	r0, pc, r0
   1bba8:	b	1bc64 <test_nested_buffer@@Base+0x2c4>
   1bbac:	mov	r0, #0
   1bbb0:	cmp	r7, #32
   1bbb4:	bcc	1bbe4 <test_nested_buffer@@Base+0x244>
   1bbb8:	ldrh	r1, [r5, #30]
   1bbbc:	cmp	r1, #0
   1bbc0:	beq	1bbe4 <test_nested_buffer@@Base+0x244>
   1bbc4:	mov	r2, r4
   1bbc8:	ldr	r1, [r2, r1]!
   1bbcc:	add	r1, r2, r1
   1bbd0:	ldr	r2, [r1, #8]
   1bbd4:	cmp	r2, r6
   1bbd8:	addeq	r0, r1, #4
   1bbdc:	ldreq	r1, [r0]
   1bbe0:	addeq	r0, r0, r1
   1bbe4:	ldrh	r1, [r5, #8]
   1bbe8:	cmp	r1, #0
   1bbec:	beq	1bc5c <test_nested_buffer@@Base+0x2bc>
   1bbf0:	add	r1, r4, r1
   1bbf4:	ldrh	r1, [r1]
   1bbf8:	cmp	r1, #10
   1bbfc:	bne	1bc5c <test_nested_buffer@@Base+0x2bc>
   1bc00:	cmp	r0, #0
   1bc04:	beq	1bc74 <test_nested_buffer@@Base+0x2d4>
   1bc08:	ldr	r2, [r0]
   1bc0c:	mov	r1, r0
   1bc10:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1bc14:	cmp	r2, #12
   1bc18:	bcc	1bc80 <test_nested_buffer@@Base+0x2e0>
   1bc1c:	ldrh	r1, [r1, #10]
   1bc20:	cmp	r1, #0
   1bc24:	beq	1bc80 <test_nested_buffer@@Base+0x2e0>
   1bc28:	ldr	r1, [r0, r1]!
   1bc2c:	add	r0, r0, r1
   1bc30:	ldr	r1, [pc, #196]	; 1bcfc <test_nested_buffer@@Base+0x35c>
   1bc34:	add	r0, r0, #4
   1bc38:	add	r1, pc, r1
   1bc3c:	bl	12e08 <strcmp@plt>
   1bc40:	cmp	r0, #0
   1bc44:	moveq	r0, #0
   1bc48:	subeq	sp, fp, #16
   1bc4c:	popeq	{r4, r5, r6, r7, fp, pc}
   1bc50:	ldr	r0, [pc, #168]	; 1bd00 <test_nested_buffer@@Base+0x360>
   1bc54:	add	r0, pc, r0
   1bc58:	b	1bc64 <test_nested_buffer@@Base+0x2c4>
   1bc5c:	ldr	r0, [pc, #148]	; 1bcf8 <test_nested_buffer@@Base+0x358>
   1bc60:	add	r0, pc, r0
   1bc64:	bl	12e68 <puts@plt>
   1bc68:	mvn	r0, #0
   1bc6c:	sub	sp, fp, #16
   1bc70:	pop	{r4, r5, r6, r7, fp, pc}
   1bc74:	ldr	r0, [pc, #104]	; 1bce4 <test_nested_buffer@@Base+0x344>
   1bc78:	add	r0, pc, r0
   1bc7c:	b	1bc88 <test_nested_buffer@@Base+0x2e8>
   1bc80:	ldr	r0, [pc, #88]	; 1bce0 <test_nested_buffer@@Base+0x340>
   1bc84:	add	r0, pc, r0
   1bc88:	ldr	r1, [pc, #88]	; 1bce8 <test_nested_buffer@@Base+0x348>
   1bc8c:	ldr	r3, [pc, #88]	; 1bcec <test_nested_buffer@@Base+0x34c>
   1bc90:	movw	r2, #699	; 0x2bb
   1bc94:	add	r1, pc, r1
   1bc98:	add	r3, pc, r3
   1bc9c:	bl	12f04 <__assert_fail@plt>
   1bca0:	ldr	r0, [pc, #92]	; 1bd04 <test_nested_buffer@@Base+0x364>
   1bca4:	ldr	r1, [pc, #92]	; 1bd08 <test_nested_buffer@@Base+0x368>
   1bca8:	ldr	r3, [pc, #92]	; 1bd0c <test_nested_buffer@@Base+0x36c>
   1bcac:	mov	r2, #235	; 0xeb
   1bcb0:	add	r0, pc, r0
   1bcb4:	add	r1, pc, r1
   1bcb8:	add	r3, pc, r3
   1bcbc:	bl	12f04 <__assert_fail@plt>
   1bcc0:	andeq	r9, r0, r8, ror #7
   1bcc4:	andeq	r9, r0, r8, lsl #8
   1bcc8:	andeq	r9, r0, ip, lsl #7
   1bccc:	andeq	r9, r0, r7, lsl #30
   1bcd0:	andeq	fp, r0, r4, ror #5
   1bcd4:	andeq	fp, r0, r4, ror r2
   1bcd8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1bcdc:	andeq	r9, r0, r7, lsr #28
   1bce0:			; <UNDEFINED> instruction: 0x0000a3b8
   1bce4:	andeq	r9, r0, pc, asr #28
   1bce8:	andeq	r9, r0, r9, asr lr
   1bcec:	andeq	sl, r0, r3, asr r3
   1bcf0:	andeq	r9, r0, r0, ror #4
   1bcf4:	andeq	ip, r0, r4, asr #19
   1bcf8:	ldrdeq	ip, [r0], -r8
   1bcfc:	andeq	r9, r0, r3, lsl sp
   1bd00:	andeq	ip, r0, r4, asr #17
   1bd04:	andeq	sl, r0, r8, lsr #2
   1bd08:	andeq	r9, r0, fp, ror #31
   1bd0c:	andeq	sl, r0, r2, asr #3

0001bd10 <test_nested_buffer_first@@Base>:
   1bd10:	push	{r4, r5, r6, r7, fp, lr}
   1bd14:	add	fp, sp, #16
   1bd18:	sub	sp, sp, #8
   1bd1c:	mov	r4, r0
   1bd20:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1bd24:	ldr	r1, [pc, #772]	; 1c030 <test_nested_buffer_first@@Base+0x320>
   1bd28:	mov	r0, r4
   1bd2c:	mov	r2, #0
   1bd30:	mov	r3, #0
   1bd34:	add	r1, pc, r1
   1bd38:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1bd3c:	cmp	r0, #0
   1bd40:	bne	1bd50 <test_nested_buffer_first@@Base+0x40>
   1bd44:	mov	r0, r4
   1bd48:	mov	r1, #36	; 0x24
   1bd4c:	bl	206c8 <flatcc_builder_start_table@@Base>
   1bd50:	ldr	r1, [pc, #732]	; 1c034 <test_nested_buffer_first@@Base+0x324>
   1bd54:	mov	r0, r4
   1bd58:	mov	r2, #0
   1bd5c:	mov	r3, #0
   1bd60:	add	r1, pc, r1
   1bd64:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1bd68:	cmp	r0, #0
   1bd6c:	bne	1bd7c <test_nested_buffer_first@@Base+0x6c>
   1bd70:	mov	r0, r4
   1bd74:	mov	r1, #36	; 0x24
   1bd78:	bl	206c8 <flatcc_builder_start_table@@Base>
   1bd7c:	ldr	r1, [pc, #692]	; 1c038 <test_nested_buffer_first@@Base+0x328>
   1bd80:	mov	r0, r4
   1bd84:	add	r1, pc, r1
   1bd88:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1bd8c:	cmp	r0, #0
   1bd90:	beq	1bdac <test_nested_buffer_first@@Base+0x9c>
   1bd94:	mov	r5, r0
   1bd98:	mov	r0, r4
   1bd9c:	mov	r1, #3
   1bda0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1bda4:	cmp	r0, #0
   1bda8:	strne	r5, [r0]
   1bdac:	ldr	r1, [pc, #648]	; 1c03c <test_nested_buffer_first@@Base+0x32c>
   1bdb0:	mov	r0, r4
   1bdb4:	mov	r2, #1
   1bdb8:	add	r1, pc, r1
   1bdbc:	bl	2105c <flatcc_builder_check_required@@Base>
   1bdc0:	cmp	r0, #0
   1bdc4:	beq	1c010 <test_nested_buffer_first@@Base+0x300>
   1bdc8:	mov	r0, r4
   1bdcc:	bl	210f8 <flatcc_builder_end_table@@Base>
   1bdd0:	mov	r1, r0
   1bdd4:	mov	r0, r4
   1bdd8:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1bddc:	cmp	r0, #0
   1bde0:	beq	1bdfc <test_nested_buffer_first@@Base+0xec>
   1bde4:	mov	r5, r0
   1bde8:	mov	r0, r4
   1bdec:	mov	r1, #13
   1bdf0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1bdf4:	cmp	r0, #0
   1bdf8:	strne	r5, [r0]
   1bdfc:	mov	r0, r4
   1be00:	mov	r1, #2
   1be04:	mov	r2, #2
   1be08:	mov	r3, #2
   1be0c:	bl	21b6c <flatcc_builder_table_add@@Base>
   1be10:	cmp	r0, #0
   1be14:	movne	r1, #10
   1be18:	strhne	r1, [r0]
   1be1c:	mov	r0, r4
   1be20:	ldr	r1, [pc, #536]	; 1c040 <test_nested_buffer_first@@Base+0x330>
   1be24:	add	r1, pc, r1
   1be28:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1be2c:	cmp	r0, #0
   1be30:	beq	1be4c <test_nested_buffer_first@@Base+0x13c>
   1be34:	mov	r5, r0
   1be38:	mov	r0, r4
   1be3c:	mov	r1, #3
   1be40:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1be44:	cmp	r0, #0
   1be48:	strne	r5, [r0]
   1be4c:	ldr	r1, [pc, #496]	; 1c044 <test_nested_buffer_first@@Base+0x334>
   1be50:	mov	r0, r4
   1be54:	mov	r2, #1
   1be58:	add	r1, pc, r1
   1be5c:	bl	2105c <flatcc_builder_check_required@@Base>
   1be60:	cmp	r0, #0
   1be64:	beq	1c010 <test_nested_buffer_first@@Base+0x300>
   1be68:	mov	r0, r4
   1be6c:	bl	210f8 <flatcc_builder_end_table@@Base>
   1be70:	mov	r1, r0
   1be74:	mov	r0, r4
   1be78:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1be7c:	add	r1, sp, #4
   1be80:	mov	r0, r4
   1be84:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   1be88:	mov	r4, r0
   1be8c:	ldr	r0, [pc, #436]	; 1c048 <test_nested_buffer_first@@Base+0x338>
   1be90:	mov	r1, r4
   1be94:	ldr	r0, [pc, r0]
   1be98:	ldr	r2, [sp, #4]
   1be9c:	ldr	r3, [r0]
   1bea0:	ldr	r0, [pc, #420]	; 1c04c <test_nested_buffer_first@@Base+0x33c>
   1bea4:	add	r0, pc, r0
   1bea8:	bl	1361c <test_type_aliases@@Base+0x554>
   1beac:	cmp	r4, #0
   1beb0:	beq	1bfe4 <test_nested_buffer_first@@Base+0x2d4>
   1beb4:	ldr	r0, [r4, #4]
   1beb8:	movw	r6, #20301	; 0x4f4d
   1bebc:	movt	r6, #21326	; 0x534e
   1bec0:	cmp	r0, r6
   1bec4:	bne	1bfe4 <test_nested_buffer_first@@Base+0x2d4>
   1bec8:	ldr	r0, [r4]
   1becc:	ldr	r0, [r4, r0]!
   1bed0:	mov	r5, r4
   1bed4:	ldrh	r7, [r5, -r0]!
   1bed8:	cmp	r7, #11
   1bedc:	bls	1bff0 <test_nested_buffer_first@@Base+0x2e0>
   1bee0:	ldrh	r0, [r5, #10]
   1bee4:	cmp	r0, #0
   1bee8:	beq	1bff0 <test_nested_buffer_first@@Base+0x2e0>
   1beec:	mov	r1, r4
   1bef0:	ldr	r0, [r1, r0]!
   1bef4:	add	r0, r1, r0
   1bef8:	ldr	r1, [pc, #352]	; 1c060 <test_nested_buffer_first@@Base+0x350>
   1befc:	add	r0, r0, #4
   1bf00:	add	r1, pc, r1
   1bf04:	bl	12e08 <strcmp@plt>
   1bf08:	cmp	r0, #0
   1bf0c:	beq	1bf1c <test_nested_buffer_first@@Base+0x20c>
   1bf10:	ldr	r0, [pc, #332]	; 1c064 <test_nested_buffer_first@@Base+0x354>
   1bf14:	add	r0, pc, r0
   1bf18:	b	1bfd4 <test_nested_buffer_first@@Base+0x2c4>
   1bf1c:	mov	r0, #0
   1bf20:	cmp	r7, #32
   1bf24:	bcc	1bf54 <test_nested_buffer_first@@Base+0x244>
   1bf28:	ldrh	r1, [r5, #30]
   1bf2c:	cmp	r1, #0
   1bf30:	beq	1bf54 <test_nested_buffer_first@@Base+0x244>
   1bf34:	mov	r2, r4
   1bf38:	ldr	r1, [r2, r1]!
   1bf3c:	add	r1, r2, r1
   1bf40:	ldr	r2, [r1, #8]
   1bf44:	cmp	r2, r6
   1bf48:	addeq	r0, r1, #4
   1bf4c:	ldreq	r1, [r0]
   1bf50:	addeq	r0, r0, r1
   1bf54:	ldrh	r1, [r5, #8]
   1bf58:	cmp	r1, #0
   1bf5c:	beq	1bfcc <test_nested_buffer_first@@Base+0x2bc>
   1bf60:	add	r1, r4, r1
   1bf64:	ldrh	r1, [r1]
   1bf68:	cmp	r1, #10
   1bf6c:	bne	1bfcc <test_nested_buffer_first@@Base+0x2bc>
   1bf70:	cmp	r0, #0
   1bf74:	beq	1bfe4 <test_nested_buffer_first@@Base+0x2d4>
   1bf78:	ldr	r2, [r0]
   1bf7c:	mov	r1, r0
   1bf80:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1bf84:	cmp	r2, #12
   1bf88:	bcc	1bff0 <test_nested_buffer_first@@Base+0x2e0>
   1bf8c:	ldrh	r1, [r1, #10]
   1bf90:	cmp	r1, #0
   1bf94:	beq	1bff0 <test_nested_buffer_first@@Base+0x2e0>
   1bf98:	ldr	r1, [r0, r1]!
   1bf9c:	add	r0, r0, r1
   1bfa0:	ldr	r1, [pc, #196]	; 1c06c <test_nested_buffer_first@@Base+0x35c>
   1bfa4:	add	r0, r0, #4
   1bfa8:	add	r1, pc, r1
   1bfac:	bl	12e08 <strcmp@plt>
   1bfb0:	cmp	r0, #0
   1bfb4:	moveq	r0, #0
   1bfb8:	subeq	sp, fp, #16
   1bfbc:	popeq	{r4, r5, r6, r7, fp, pc}
   1bfc0:	ldr	r0, [pc, #168]	; 1c070 <test_nested_buffer_first@@Base+0x360>
   1bfc4:	add	r0, pc, r0
   1bfc8:	b	1bfd4 <test_nested_buffer_first@@Base+0x2c4>
   1bfcc:	ldr	r0, [pc, #148]	; 1c068 <test_nested_buffer_first@@Base+0x358>
   1bfd0:	add	r0, pc, r0
   1bfd4:	bl	12e68 <puts@plt>
   1bfd8:	mvn	r0, #0
   1bfdc:	sub	sp, fp, #16
   1bfe0:	pop	{r4, r5, r6, r7, fp, pc}
   1bfe4:	ldr	r0, [pc, #104]	; 1c054 <test_nested_buffer_first@@Base+0x344>
   1bfe8:	add	r0, pc, r0
   1bfec:	b	1bff8 <test_nested_buffer_first@@Base+0x2e8>
   1bff0:	ldr	r0, [pc, #88]	; 1c050 <test_nested_buffer_first@@Base+0x340>
   1bff4:	add	r0, pc, r0
   1bff8:	ldr	r1, [pc, #88]	; 1c058 <test_nested_buffer_first@@Base+0x348>
   1bffc:	ldr	r3, [pc, #88]	; 1c05c <test_nested_buffer_first@@Base+0x34c>
   1c000:	movw	r2, #699	; 0x2bb
   1c004:	add	r1, pc, r1
   1c008:	add	r3, pc, r3
   1c00c:	bl	12f04 <__assert_fail@plt>
   1c010:	ldr	r0, [pc, #92]	; 1c074 <test_nested_buffer_first@@Base+0x364>
   1c014:	ldr	r1, [pc, #92]	; 1c078 <test_nested_buffer_first@@Base+0x368>
   1c018:	ldr	r3, [pc, #92]	; 1c07c <test_nested_buffer_first@@Base+0x36c>
   1c01c:	mov	r2, #235	; 0xeb
   1c020:	add	r0, pc, r0
   1c024:	add	r1, pc, r1
   1c028:	add	r3, pc, r3
   1c02c:	bl	12f04 <__assert_fail@plt>
   1c030:	andeq	r9, r0, r8, ror r0
   1c034:	andeq	r9, r0, ip, asr #32
   1c038:	andeq	r9, r0, r7, asr #23
   1c03c:	andeq	sl, r0, r4, lsr #31
   1c040:	andeq	r8, r0, ip, asr #31
   1c044:	andeq	sl, r0, r4, lsl #30
   1c048:	andeq	pc, r1, ip, asr #3
   1c04c:			; <UNDEFINED> instruction: 0x00009ab7
   1c050:	andeq	sl, r0, r8, asr #32
   1c054:	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>
   1c058:	andeq	r9, r0, r9, ror #21
   1c05c:	andeq	r9, r0, r3, ror #31
   1c060:	strdeq	r8, [r0], -r0
   1c064:	andeq	ip, r0, r4, asr r6
   1c068:	andeq	ip, r0, r8, ror #10
   1c06c:	andeq	r9, r0, r3, lsr #19
   1c070:	andeq	ip, r0, r4, asr r5
   1c074:			; <UNDEFINED> instruction: 0x00009db8
   1c078:	andeq	r9, r0, fp, ror ip
   1c07c:	andeq	r9, r0, r2, asr lr

0001c080 <test_nested_buffer_using_nest@@Base>:
   1c080:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c084:	add	fp, sp, #24
   1c088:	sub	sp, sp, #1040	; 0x410
   1c08c:	mov	r4, r0
   1c090:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1c094:	ldr	r1, [pc, #932]	; 1c440 <test_nested_buffer_using_nest@@Base+0x3c0>
   1c098:	mov	r0, r4
   1c09c:	mov	r2, #0
   1c0a0:	mov	r3, #0
   1c0a4:	add	r1, pc, r1
   1c0a8:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1c0ac:	cmp	r0, #0
   1c0b0:	bne	1c0c0 <test_nested_buffer_using_nest@@Base+0x40>
   1c0b4:	mov	r0, r4
   1c0b8:	mov	r1, #36	; 0x24
   1c0bc:	bl	206c8 <flatcc_builder_start_table@@Base>
   1c0c0:	ldr	r1, [pc, #892]	; 1c444 <test_nested_buffer_using_nest@@Base+0x3c4>
   1c0c4:	mov	r0, r4
   1c0c8:	add	r1, pc, r1
   1c0cc:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1c0d0:	cmp	r0, #0
   1c0d4:	beq	1c0f0 <test_nested_buffer_using_nest@@Base+0x70>
   1c0d8:	mov	r5, r0
   1c0dc:	mov	r0, r4
   1c0e0:	mov	r1, #3
   1c0e4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1c0e8:	cmp	r0, #0
   1c0ec:	strne	r5, [r0]
   1c0f0:	mov	r0, r4
   1c0f4:	mov	r1, #1
   1c0f8:	mov	r2, #2
   1c0fc:	mov	r3, #2
   1c100:	bl	21b6c <flatcc_builder_table_add@@Base>
   1c104:	cmp	r0, #0
   1c108:	mov	r2, #1
   1c10c:	movne	r1, #42	; 0x2a
   1c110:	strhne	r1, [r0]
   1c114:	mov	r0, r4
   1c118:	ldr	r1, [pc, #808]	; 1c448 <test_nested_buffer_using_nest@@Base+0x3c8>
   1c11c:	add	r1, pc, r1
   1c120:	bl	2105c <flatcc_builder_check_required@@Base>
   1c124:	cmp	r0, #0
   1c128:	beq	1c3f4 <test_nested_buffer_using_nest@@Base+0x374>
   1c12c:	mov	r0, r4
   1c130:	bl	210f8 <flatcc_builder_end_table@@Base>
   1c134:	mov	r1, r0
   1c138:	mov	r0, r4
   1c13c:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1c140:	mov	r0, r4
   1c144:	bl	22bd8 <flatcc_builder_get_buffer_size@@Base>
   1c148:	mov	r5, r0
   1c14c:	add	r1, sp, #16
   1c150:	mov	r0, r4
   1c154:	mov	r2, #1024	; 0x400
   1c158:	bl	22cb0 <flatcc_builder_copy_buffer@@Base>
   1c15c:	cmp	r0, #0
   1c160:	beq	1c2fc <test_nested_buffer_using_nest@@Base+0x27c>
   1c164:	mov	r0, r4
   1c168:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1c16c:	ldr	r1, [pc, #732]	; 1c450 <test_nested_buffer_using_nest@@Base+0x3d0>
   1c170:	mov	r0, r4
   1c174:	mov	r2, #0
   1c178:	mov	r3, #0
   1c17c:	add	r1, pc, r1
   1c180:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1c184:	cmp	r0, #0
   1c188:	bne	1c198 <test_nested_buffer_using_nest@@Base+0x118>
   1c18c:	mov	r0, r4
   1c190:	mov	r1, #36	; 0x24
   1c194:	bl	206c8 <flatcc_builder_start_table@@Base>
   1c198:	mvn	r0, #0
   1c19c:	mov	r1, #8
   1c1a0:	mov	r2, r5
   1c1a4:	mov	r3, #1
   1c1a8:	str	r1, [sp]
   1c1ac:	str	r0, [sp, #4]
   1c1b0:	add	r1, sp, #16
   1c1b4:	mov	r0, r4
   1c1b8:	bl	212bc <flatcc_builder_create_vector@@Base>
   1c1bc:	cmp	r0, #0
   1c1c0:	beq	1c1dc <test_nested_buffer_using_nest@@Base+0x15c>
   1c1c4:	mov	r5, r0
   1c1c8:	mov	r0, r4
   1c1cc:	mov	r1, #13
   1c1d0:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1c1d4:	cmp	r0, #0
   1c1d8:	strne	r5, [r0]
   1c1dc:	mov	r0, r4
   1c1e0:	mov	r1, #2
   1c1e4:	mov	r2, #2
   1c1e8:	mov	r3, #2
   1c1ec:	bl	21b6c <flatcc_builder_table_add@@Base>
   1c1f0:	cmp	r0, #0
   1c1f4:	movne	r1, #10
   1c1f8:	strhne	r1, [r0]
   1c1fc:	mov	r0, r4
   1c200:	ldr	r1, [pc, #588]	; 1c454 <test_nested_buffer_using_nest@@Base+0x3d4>
   1c204:	add	r1, pc, r1
   1c208:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1c20c:	cmp	r0, #0
   1c210:	beq	1c22c <test_nested_buffer_using_nest@@Base+0x1ac>
   1c214:	mov	r5, r0
   1c218:	mov	r0, r4
   1c21c:	mov	r1, #3
   1c220:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1c224:	cmp	r0, #0
   1c228:	strne	r5, [r0]
   1c22c:	ldr	r1, [pc, #548]	; 1c458 <test_nested_buffer_using_nest@@Base+0x3d8>
   1c230:	mov	r0, r4
   1c234:	mov	r2, #1
   1c238:	add	r1, pc, r1
   1c23c:	bl	2105c <flatcc_builder_check_required@@Base>
   1c240:	cmp	r0, #0
   1c244:	beq	1c3f4 <test_nested_buffer_using_nest@@Base+0x374>
   1c248:	mov	r0, r4
   1c24c:	bl	210f8 <flatcc_builder_end_table@@Base>
   1c250:	mov	r1, r0
   1c254:	mov	r0, r4
   1c258:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1c25c:	add	r1, sp, #12
   1c260:	mov	r0, r4
   1c264:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   1c268:	mov	r4, r0
   1c26c:	ldr	r0, [pc, #488]	; 1c45c <test_nested_buffer_using_nest@@Base+0x3dc>
   1c270:	mov	r1, r4
   1c274:	ldr	r0, [pc, r0]
   1c278:	ldr	r2, [sp, #12]
   1c27c:	ldr	r3, [r0]
   1c280:	ldr	r0, [pc, #472]	; 1c460 <test_nested_buffer_using_nest@@Base+0x3e0>
   1c284:	add	r0, pc, r0
   1c288:	bl	1361c <test_type_aliases@@Base+0x554>
   1c28c:	cmp	r4, #0
   1c290:	beq	1c414 <test_nested_buffer_using_nest@@Base+0x394>
   1c294:	ldr	r0, [r4, #4]
   1c298:	movw	r7, #20301	; 0x4f4d
   1c29c:	movt	r7, #21326	; 0x534e
   1c2a0:	cmp	r0, r7
   1c2a4:	bne	1c414 <test_nested_buffer_using_nest@@Base+0x394>
   1c2a8:	ldr	r0, [r4]
   1c2ac:	ldr	r0, [r4, r0]!
   1c2b0:	mov	r6, r4
   1c2b4:	ldrh	r5, [r6, -r0]!
   1c2b8:	cmp	r5, #11
   1c2bc:	bls	1c420 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c2c0:	ldrh	r0, [r6, #10]
   1c2c4:	cmp	r0, #0
   1c2c8:	beq	1c420 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c2cc:	mov	r1, r4
   1c2d0:	ldr	r0, [r1, r0]!
   1c2d4:	add	r0, r1, r0
   1c2d8:	ldr	r1, [pc, #404]	; 1c474 <test_nested_buffer_using_nest@@Base+0x3f4>
   1c2dc:	add	r0, r0, #4
   1c2e0:	add	r1, pc, r1
   1c2e4:	bl	12e08 <strcmp@plt>
   1c2e8:	cmp	r0, #0
   1c2ec:	beq	1c308 <test_nested_buffer_using_nest@@Base+0x288>
   1c2f0:	ldr	r0, [pc, #384]	; 1c478 <test_nested_buffer_using_nest@@Base+0x3f8>
   1c2f4:	add	r0, pc, r0
   1c2f8:	b	1c3b8 <test_nested_buffer_using_nest@@Base+0x338>
   1c2fc:	ldr	r0, [pc, #328]	; 1c44c <test_nested_buffer_using_nest@@Base+0x3cc>
   1c300:	add	r0, pc, r0
   1c304:	b	1c3b8 <test_nested_buffer_using_nest@@Base+0x338>
   1c308:	mov	r8, #0
   1c30c:	cmp	r5, #32
   1c310:	bcc	1c33c <test_nested_buffer_using_nest@@Base+0x2bc>
   1c314:	ldrh	r0, [r6, #30]
   1c318:	cmp	r0, #0
   1c31c:	beq	1c33c <test_nested_buffer_using_nest@@Base+0x2bc>
   1c320:	mov	r1, r4
   1c324:	ldr	r0, [r1, r0]!
   1c328:	add	r0, r1, r0
   1c32c:	ldr	r1, [r0, #8]
   1c330:	cmp	r1, r7
   1c334:	ldreq	r1, [r0, #4]!
   1c338:	addeq	r8, r0, r1
   1c33c:	ldrh	r0, [r6, #8]
   1c340:	cmp	r0, #0
   1c344:	beq	1c3b0 <test_nested_buffer_using_nest@@Base+0x330>
   1c348:	add	r0, r4, r0
   1c34c:	ldrh	r0, [r0]
   1c350:	cmp	r0, #10
   1c354:	bne	1c3b0 <test_nested_buffer_using_nest@@Base+0x330>
   1c358:	cmp	r8, #0
   1c35c:	beq	1c414 <test_nested_buffer_using_nest@@Base+0x394>
   1c360:	ldr	r0, [r8]
   1c364:	mov	r4, r8
   1c368:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
   1c36c:	cmp	r0, #12
   1c370:	bcc	1c420 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c374:	ldrh	r0, [r4, #10]
   1c378:	cmp	r0, #0
   1c37c:	beq	1c420 <test_nested_buffer_using_nest@@Base+0x3a0>
   1c380:	mov	r1, r8
   1c384:	ldr	r0, [r1, r0]!
   1c388:	add	r0, r1, r0
   1c38c:	ldr	r1, [pc, #236]	; 1c480 <test_nested_buffer_using_nest@@Base+0x400>
   1c390:	add	r0, r0, #4
   1c394:	add	r1, pc, r1
   1c398:	bl	12e08 <strcmp@plt>
   1c39c:	cmp	r0, #0
   1c3a0:	beq	1c3c8 <test_nested_buffer_using_nest@@Base+0x348>
   1c3a4:	ldr	r0, [pc, #216]	; 1c484 <test_nested_buffer_using_nest@@Base+0x404>
   1c3a8:	add	r0, pc, r0
   1c3ac:	b	1c3b8 <test_nested_buffer_using_nest@@Base+0x338>
   1c3b0:	ldr	r0, [pc, #196]	; 1c47c <test_nested_buffer_using_nest@@Base+0x3fc>
   1c3b4:	add	r0, pc, r0
   1c3b8:	bl	12e68 <puts@plt>
   1c3bc:	mvn	r0, #0
   1c3c0:	sub	sp, fp, #24
   1c3c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c3c8:	ldrh	r0, [r4, #6]
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c3e8 <test_nested_buffer_using_nest@@Base+0x368>
   1c3d4:	add	r0, r8, r0
   1c3d8:	ldrh	r1, [r0]
   1c3dc:	mov	r0, #0
   1c3e0:	cmp	r1, #42	; 0x2a
   1c3e4:	beq	1c3c0 <test_nested_buffer_using_nest@@Base+0x340>
   1c3e8:	ldr	r0, [pc, #152]	; 1c488 <test_nested_buffer_using_nest@@Base+0x408>
   1c3ec:	add	r0, pc, r0
   1c3f0:	b	1c3b8 <test_nested_buffer_using_nest@@Base+0x338>
   1c3f4:	ldr	r0, [pc, #144]	; 1c48c <test_nested_buffer_using_nest@@Base+0x40c>
   1c3f8:	ldr	r1, [pc, #144]	; 1c490 <test_nested_buffer_using_nest@@Base+0x410>
   1c3fc:	ldr	r3, [pc, #144]	; 1c494 <test_nested_buffer_using_nest@@Base+0x414>
   1c400:	mov	r2, #235	; 0xeb
   1c404:	add	r0, pc, r0
   1c408:	add	r1, pc, r1
   1c40c:	add	r3, pc, r3
   1c410:	bl	12f04 <__assert_fail@plt>
   1c414:	ldr	r0, [pc, #76]	; 1c468 <test_nested_buffer_using_nest@@Base+0x3e8>
   1c418:	add	r0, pc, r0
   1c41c:	b	1c428 <test_nested_buffer_using_nest@@Base+0x3a8>
   1c420:	ldr	r0, [pc, #60]	; 1c464 <test_nested_buffer_using_nest@@Base+0x3e4>
   1c424:	add	r0, pc, r0
   1c428:	ldr	r1, [pc, #60]	; 1c46c <test_nested_buffer_using_nest@@Base+0x3ec>
   1c42c:	ldr	r3, [pc, #60]	; 1c470 <test_nested_buffer_using_nest@@Base+0x3f0>
   1c430:	movw	r2, #699	; 0x2bb
   1c434:	add	r1, pc, r1
   1c438:	add	r3, pc, r3
   1c43c:	bl	12f04 <__assert_fail@plt>
   1c440:	andeq	r8, r0, r8, lsl #26
   1c444:	andeq	r9, r0, r3, lsl #17
   1c448:	andeq	sl, r0, r0, asr #24
   1c44c:	andeq	ip, r0, r8, asr #3
   1c450:	andeq	r8, r0, r0, lsr ip
   1c454:	andeq	r8, r0, ip, ror #23
   1c458:	andeq	sl, r0, r4, lsr #22
   1c45c:	andeq	lr, r1, ip, ror #27
   1c460:	andeq	r9, r0, r9, ror #13
   1c464:	andeq	r9, r0, r8, lsl ip
   1c468:	andeq	r9, r0, pc, lsr #13
   1c46c:			; <UNDEFINED> instruction: 0x000096b9
   1c470:			; <UNDEFINED> instruction: 0x00009bb3
   1c474:	andeq	r8, r0, r0, lsl fp
   1c478:	andeq	ip, r0, r4, ror r2
   1c47c:	andeq	ip, r0, r4, lsl #3
   1c480:			; <UNDEFINED> instruction: 0x000095b7
   1c484:	andeq	ip, r0, r0, ror r1
   1c488:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   1c48c:	ldrdeq	r9, [r0], -r4
   1c490:	muleq	r0, r7, r8
   1c494:	andeq	r9, r0, lr, ror #20

0001c498 <verify_include@@Base>:
   1c498:	mov	r0, #0
   1c49c:	bx	lr

0001c4a0 <test_struct_buffer@@Base>:
   1c4a0:	push	{r4, r5, r6, sl, fp, lr}
   1c4a4:	add	fp, sp, #16
   1c4a8:	sub	sp, sp, #112	; 0x70
   1c4ac:	mov	r4, r0
   1c4b0:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1c4b4:	mov	r0, r4
   1c4b8:	mov	r1, #32
   1c4bc:	mov	r2, #16
   1c4c0:	mov	r5, #16
   1c4c4:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1c4c8:	mov	r6, #0
   1c4cc:	cmp	r0, #0
   1c4d0:	mov	r3, #0
   1c4d4:	beq	1c52c <test_struct_buffer@@Base+0x8c>
   1c4d8:	movw	r1, #52428	; 0xcccc
   1c4dc:	movw	r2, #52429	; 0xcccd
   1c4e0:	movw	r3, #0
   1c4e4:	movt	r2, #52428	; 0xcccc
   1c4e8:	movt	r1, #16400	; 0x4010
   1c4ec:	movt	r3, #16448	; 0x4040
   1c4f0:	str	r2, [r0, #16]
   1c4f4:	str	r1, [r0, #20]
   1c4f8:	mov	r2, #1065353216	; 0x3f800000
   1c4fc:	mov	r1, #1073741824	; 0x40000000
   1c500:	str	r2, [r0]
   1c504:	stmib	r0, {r1, r3}
   1c508:	mov	r1, #8
   1c50c:	strb	r1, [r0, #24]
   1c510:	movw	r1, #2730	; 0xaaa
   1c514:	strh	r1, [r0, #26]
   1c518:	mov	r1, #239	; 0xef
   1c51c:	strb	r1, [r0, #28]
   1c520:	mov	r0, r4
   1c524:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1c528:	mov	r3, r0
   1c52c:	stm	sp, {r5, r6}
   1c530:	mov	r0, r4
   1c534:	mov	r2, #0
   1c538:	ldr	r1, [pc, #392]	; 1c6c8 <test_struct_buffer@@Base+0x228>
   1c53c:	add	r1, pc, r1
   1c540:	bl	1ed5c <flatcc_builder_create_buffer@@Base>
   1c544:	mov	r0, r4
   1c548:	bl	22bd8 <flatcc_builder_get_buffer_size@@Base>
   1c54c:	cmp	r0, #48	; 0x30
   1c550:	bne	1c67c <test_struct_buffer@@Base+0x1dc>
   1c554:	ldr	r0, [pc, #368]	; 1c6cc <test_struct_buffer@@Base+0x22c>
   1c558:	mov	r1, #48	; 0x30
   1c55c:	add	r0, pc, r0
   1c560:	bl	12e14 <printf@plt>
   1c564:	mov	r0, r4
   1c568:	bl	22f2c <flatcc_builder_get_emit_context@@Base>
   1c56c:	ldr	r0, [r0, #24]
   1c570:	cmp	r0, #48	; 0x30
   1c574:	bne	1c69c <test_struct_buffer@@Base+0x1fc>
   1c578:	add	r1, sp, #12
   1c57c:	mov	r0, r4
   1c580:	mov	r2, #100	; 0x64
   1c584:	bl	22cb0 <flatcc_builder_copy_buffer@@Base>
   1c588:	cmp	r0, #0
   1c58c:	beq	1c658 <test_struct_buffer@@Base+0x1b8>
   1c590:	ldr	r0, [pc, #316]	; 1c6d4 <test_struct_buffer@@Base+0x234>
   1c594:	add	r4, sp, #12
   1c598:	mov	r2, #48	; 0x30
   1c59c:	mov	r1, r4
   1c5a0:	ldr	r0, [pc, r0]
   1c5a4:	ldr	r3, [r0]
   1c5a8:	ldr	r0, [pc, #296]	; 1c6d8 <test_struct_buffer@@Base+0x238>
   1c5ac:	add	r0, pc, r0
   1c5b0:	bl	1361c <test_type_aliases@@Base+0x554>
   1c5b4:	ldr	r0, [sp, #16]
   1c5b8:	movw	r1, #20301	; 0x4f4d
   1c5bc:	movt	r1, #21326	; 0x534e
   1c5c0:	cmp	r0, r1
   1c5c4:	bne	1c664 <test_struct_buffer@@Base+0x1c4>
   1c5c8:	ldr	r0, [sp, #12]
   1c5cc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c5d0:	add	r0, r4, r0
   1c5d4:	vldr	s0, [r0]
   1c5d8:	vcmp.f32	s0, s2
   1c5dc:	vmrs	APSR_nzcv, fpscr
   1c5e0:	bne	1c64c <test_struct_buffer@@Base+0x1ac>
   1c5e4:	vldr	s0, [r0, #4]
   1c5e8:	vmov.f32	s2, #0	; 0x40000000  2.0
   1c5ec:	vcmp.f32	s0, s2
   1c5f0:	vmrs	APSR_nzcv, fpscr
   1c5f4:	bne	1c64c <test_struct_buffer@@Base+0x1ac>
   1c5f8:	vldr	s0, [r0, #8]
   1c5fc:	vmov.f32	s2, #8	; 0x40400000  3.0
   1c600:	vcmp.f32	s0, s2
   1c604:	vmrs	APSR_nzcv, fpscr
   1c608:	bne	1c64c <test_struct_buffer@@Base+0x1ac>
   1c60c:	vldr	d16, [pc, #172]	; 1c6c0 <test_struct_buffer@@Base+0x220>
   1c610:	vldr	d17, [r0, #16]
   1c614:	vcmp.f64	d17, d16
   1c618:	vmrs	APSR_nzcv, fpscr
   1c61c:	bne	1c64c <test_struct_buffer@@Base+0x1ac>
   1c620:	ldrb	r1, [r0, #24]
   1c624:	cmp	r1, #8
   1c628:	bne	1c64c <test_struct_buffer@@Base+0x1ac>
   1c62c:	ldrh	r1, [r0, #26]
   1c630:	movw	r2, #2730	; 0xaaa
   1c634:	cmp	r1, r2
   1c638:	bne	1c64c <test_struct_buffer@@Base+0x1ac>
   1c63c:	ldrb	r1, [r0, #28]
   1c640:	mov	r0, #0
   1c644:	cmp	r1, #239	; 0xef
   1c648:	beq	1c674 <test_struct_buffer@@Base+0x1d4>
   1c64c:	ldr	r0, [pc, #140]	; 1c6e0 <test_struct_buffer@@Base+0x240>
   1c650:	add	r0, pc, r0
   1c654:	b	1c66c <test_struct_buffer@@Base+0x1cc>
   1c658:	ldr	r0, [pc, #112]	; 1c6d0 <test_struct_buffer@@Base+0x230>
   1c65c:	add	r0, pc, r0
   1c660:	b	1c66c <test_struct_buffer@@Base+0x1cc>
   1c664:	ldr	r0, [pc, #112]	; 1c6dc <test_struct_buffer@@Base+0x23c>
   1c668:	add	r0, pc, r0
   1c66c:	bl	12e68 <puts@plt>
   1c670:	mvn	r0, #0
   1c674:	sub	sp, fp, #16
   1c678:	pop	{r4, r5, r6, sl, fp, pc}
   1c67c:	ldr	r0, [pc, #96]	; 1c6e4 <test_struct_buffer@@Base+0x244>
   1c680:	ldr	r1, [pc, #96]	; 1c6e8 <test_struct_buffer@@Base+0x248>
   1c684:	ldr	r3, [pc, #96]	; 1c6ec <test_struct_buffer@@Base+0x24c>
   1c688:	movw	r2, #2339	; 0x923
   1c68c:	add	r0, pc, r0
   1c690:	add	r1, pc, r1
   1c694:	add	r3, pc, r3
   1c698:	bl	12f04 <__assert_fail@plt>
   1c69c:	ldr	r0, [pc, #76]	; 1c6f0 <test_struct_buffer@@Base+0x250>
   1c6a0:	ldr	r1, [pc, #76]	; 1c6f4 <test_struct_buffer@@Base+0x254>
   1c6a4:	ldr	r3, [pc, #76]	; 1c6f8 <test_struct_buffer@@Base+0x258>
   1c6a8:	movw	r2, #2341	; 0x925
   1c6ac:	add	r0, pc, r0
   1c6b0:	add	r1, pc, r1
   1c6b4:	add	r3, pc, r3
   1c6b8:	bl	12f04 <__assert_fail@plt>
   1c6bc:	nop	{0}
   1c6c0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c6c4:	andsmi	ip, r0, ip, asr #25
   1c6c8:	andeq	r8, r0, r0, ror r8
   1c6cc:	andeq	r9, r0, r9, ror #8
   1c6d0:	andeq	sl, r0, r7, asr r6
   1c6d4:	andeq	lr, r1, r0, asr #21
   1c6d8:			; <UNDEFINED> instruction: 0x000094b8
   1c6dc:	andeq	fp, r0, r0, lsr #30
   1c6e0:	andeq	fp, r0, r8, lsl #31
   1c6e4:	andeq	r9, r0, r3, lsl #6
   1c6e8:	andeq	r8, r0, r8, lsl #18
   1c6ec:	andeq	r9, r0, r6, lsl #6
   1c6f0:	andeq	r9, r0, r6, lsr r3
   1c6f4:	andeq	r8, r0, r8, ror #17
   1c6f8:	andeq	r9, r0, r6, ror #5
   1c6fc:	nop	{0}

0001c700 <test_typed_struct_buffer@@Base>:
   1c700:	push	{r4, r5, r6, sl, fp, lr}
   1c704:	add	fp, sp, #16
   1c708:	sub	sp, sp, #112	; 0x70
   1c70c:	mov	r4, r0
   1c710:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1c714:	mov	r0, r4
   1c718:	mov	r1, #32
   1c71c:	mov	r2, #16
   1c720:	mov	r5, #16
   1c724:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1c728:	mov	r6, #0
   1c72c:	cmp	r0, #0
   1c730:	mov	r3, #0
   1c734:	beq	1c78c <test_typed_struct_buffer@@Base+0x8c>
   1c738:	movw	r1, #52428	; 0xcccc
   1c73c:	movw	r2, #52429	; 0xcccd
   1c740:	movw	r3, #0
   1c744:	movt	r2, #52428	; 0xcccc
   1c748:	movt	r1, #16400	; 0x4010
   1c74c:	movt	r3, #16448	; 0x4040
   1c750:	str	r2, [r0, #16]
   1c754:	str	r1, [r0, #20]
   1c758:	mov	r2, #1065353216	; 0x3f800000
   1c75c:	mov	r1, #1073741824	; 0x40000000
   1c760:	str	r2, [r0]
   1c764:	stmib	r0, {r1, r3}
   1c768:	mov	r1, #8
   1c76c:	strb	r1, [r0, #24]
   1c770:	movw	r1, #2730	; 0xaaa
   1c774:	strh	r1, [r0, #26]
   1c778:	mov	r1, #239	; 0xef
   1c77c:	strb	r1, [r0, #28]
   1c780:	mov	r0, r4
   1c784:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1c788:	mov	r3, r0
   1c78c:	stm	sp, {r5, r6}
   1c790:	mov	r0, r4
   1c794:	mov	r2, #0
   1c798:	ldr	r1, [pc, #512]	; 1c9a0 <test_typed_struct_buffer@@Base+0x2a0>
   1c79c:	add	r1, pc, r1
   1c7a0:	bl	1ed5c <flatcc_builder_create_buffer@@Base>
   1c7a4:	mov	r0, r4
   1c7a8:	bl	22bd8 <flatcc_builder_get_buffer_size@@Base>
   1c7ac:	cmp	r0, #48	; 0x30
   1c7b0:	bne	1c954 <test_typed_struct_buffer@@Base+0x254>
   1c7b4:	ldr	r0, [pc, #488]	; 1c9a4 <test_typed_struct_buffer@@Base+0x2a4>
   1c7b8:	mov	r1, #48	; 0x30
   1c7bc:	add	r0, pc, r0
   1c7c0:	bl	12e14 <printf@plt>
   1c7c4:	mov	r0, r4
   1c7c8:	bl	22f2c <flatcc_builder_get_emit_context@@Base>
   1c7cc:	ldr	r0, [r0, #24]
   1c7d0:	cmp	r0, #48	; 0x30
   1c7d4:	bne	1c974 <test_typed_struct_buffer@@Base+0x274>
   1c7d8:	add	r1, sp, #12
   1c7dc:	mov	r0, r4
   1c7e0:	mov	r2, #100	; 0x64
   1c7e4:	bl	22cb0 <flatcc_builder_copy_buffer@@Base>
   1c7e8:	cmp	r0, #0
   1c7ec:	beq	1c858 <test_typed_struct_buffer@@Base+0x158>
   1c7f0:	ldr	r0, [pc, #436]	; 1c9ac <test_typed_struct_buffer@@Base+0x2ac>
   1c7f4:	add	r1, sp, #12
   1c7f8:	mov	r2, #48	; 0x30
   1c7fc:	ldr	r0, [pc, r0]
   1c800:	ldr	r3, [r0]
   1c804:	ldr	r0, [pc, #420]	; 1c9b0 <test_typed_struct_buffer@@Base+0x2b0>
   1c808:	add	r0, pc, r0
   1c80c:	bl	1361c <test_type_aliases@@Base+0x554>
   1c810:	ldr	r0, [sp, #16]
   1c814:	movw	r4, #16082	; 0x3ed2
   1c818:	movt	r4, #43253	; 0xa8f5
   1c81c:	cmp	r0, r4
   1c820:	bne	1c864 <test_typed_struct_buffer@@Base+0x164>
   1c824:	mov	r0, #16
   1c828:	add	r5, sp, #12
   1c82c:	mov	r1, #48	; 0x30
   1c830:	mov	r2, r4
   1c834:	mov	r3, #32
   1c838:	str	r0, [sp]
   1c83c:	mov	r0, r5
   1c840:	bl	240a0 <flatcc_verify_struct_as_typed_root@@Base>
   1c844:	cmp	r0, #0
   1c848:	beq	1c87c <test_typed_struct_buffer@@Base+0x17c>
   1c84c:	ldr	r0, [pc, #356]	; 1c9b8 <test_typed_struct_buffer@@Base+0x2b8>
   1c850:	add	r0, pc, r0
   1c854:	b	1c86c <test_typed_struct_buffer@@Base+0x16c>
   1c858:	ldr	r0, [pc, #328]	; 1c9a8 <test_typed_struct_buffer@@Base+0x2a8>
   1c85c:	add	r0, pc, r0
   1c860:	b	1c86c <test_typed_struct_buffer@@Base+0x16c>
   1c864:	ldr	r0, [pc, #328]	; 1c9b4 <test_typed_struct_buffer@@Base+0x2b4>
   1c868:	add	r0, pc, r0
   1c86c:	bl	12e68 <puts@plt>
   1c870:	mvn	r0, #0
   1c874:	sub	sp, fp, #16
   1c878:	pop	{r4, r5, r6, sl, fp, pc}
   1c87c:	ldr	r0, [sp, #16]
   1c880:	cmp	r0, r4
   1c884:	bne	1c8bc <test_typed_struct_buffer@@Base+0x1bc>
   1c888:	ldr	r6, [sp, #12]
   1c88c:	mov	r0, #16
   1c890:	mov	r1, #48	; 0x30
   1c894:	mov	r2, r4
   1c898:	mov	r3, #32
   1c89c:	str	r0, [sp]
   1c8a0:	mov	r0, r5
   1c8a4:	bl	240a0 <flatcc_verify_struct_as_typed_root@@Base>
   1c8a8:	cmp	r0, #0
   1c8ac:	beq	1c8c8 <test_typed_struct_buffer@@Base+0x1c8>
   1c8b0:	ldr	r0, [pc, #264]	; 1c9c0 <test_typed_struct_buffer@@Base+0x2c0>
   1c8b4:	add	r0, pc, r0
   1c8b8:	b	1c86c <test_typed_struct_buffer@@Base+0x16c>
   1c8bc:	ldr	r0, [pc, #248]	; 1c9bc <test_typed_struct_buffer@@Base+0x2bc>
   1c8c0:	add	r0, pc, r0
   1c8c4:	b	1c86c <test_typed_struct_buffer@@Base+0x16c>
   1c8c8:	add	r0, r5, r6
   1c8cc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c8d0:	vldr	s0, [r0]
   1c8d4:	vcmp.f32	s0, s2
   1c8d8:	vmrs	APSR_nzcv, fpscr
   1c8dc:	bne	1c948 <test_typed_struct_buffer@@Base+0x248>
   1c8e0:	vldr	s0, [r0, #4]
   1c8e4:	vmov.f32	s2, #0	; 0x40000000  2.0
   1c8e8:	vcmp.f32	s0, s2
   1c8ec:	vmrs	APSR_nzcv, fpscr
   1c8f0:	bne	1c948 <test_typed_struct_buffer@@Base+0x248>
   1c8f4:	vldr	s0, [r0, #8]
   1c8f8:	vmov.f32	s2, #8	; 0x40400000  3.0
   1c8fc:	vcmp.f32	s0, s2
   1c900:	vmrs	APSR_nzcv, fpscr
   1c904:	bne	1c948 <test_typed_struct_buffer@@Base+0x248>
   1c908:	vldr	d16, [pc, #136]	; 1c998 <test_typed_struct_buffer@@Base+0x298>
   1c90c:	vldr	d17, [r0, #16]
   1c910:	vcmp.f64	d17, d16
   1c914:	vmrs	APSR_nzcv, fpscr
   1c918:	bne	1c948 <test_typed_struct_buffer@@Base+0x248>
   1c91c:	ldrb	r1, [r0, #24]
   1c920:	cmp	r1, #8
   1c924:	bne	1c948 <test_typed_struct_buffer@@Base+0x248>
   1c928:	ldrh	r1, [r0, #26]
   1c92c:	movw	r2, #2730	; 0xaaa
   1c930:	cmp	r1, r2
   1c934:	bne	1c948 <test_typed_struct_buffer@@Base+0x248>
   1c938:	ldrb	r1, [r0, #28]
   1c93c:	mov	r0, #0
   1c940:	cmp	r1, #239	; 0xef
   1c944:	beq	1c874 <test_typed_struct_buffer@@Base+0x174>
   1c948:	ldr	r0, [pc, #116]	; 1c9c4 <test_typed_struct_buffer@@Base+0x2c4>
   1c94c:	add	r0, pc, r0
   1c950:	b	1c86c <test_typed_struct_buffer@@Base+0x16c>
   1c954:	ldr	r0, [pc, #108]	; 1c9c8 <test_typed_struct_buffer@@Base+0x2c8>
   1c958:	ldr	r1, [pc, #108]	; 1c9cc <test_typed_struct_buffer@@Base+0x2cc>
   1c95c:	ldr	r3, [pc, #108]	; 1c9d0 <test_typed_struct_buffer@@Base+0x2d0>
   1c960:	movw	r2, #2388	; 0x954
   1c964:	add	r0, pc, r0
   1c968:	add	r1, pc, r1
   1c96c:	add	r3, pc, r3
   1c970:	bl	12f04 <__assert_fail@plt>
   1c974:	ldr	r0, [pc, #88]	; 1c9d4 <test_typed_struct_buffer@@Base+0x2d4>
   1c978:	ldr	r1, [pc, #88]	; 1c9d8 <test_typed_struct_buffer@@Base+0x2d8>
   1c97c:	ldr	r3, [pc, #88]	; 1c9dc <test_typed_struct_buffer@@Base+0x2dc>
   1c980:	movw	r2, #2390	; 0x956
   1c984:	add	r0, pc, r0
   1c988:	add	r1, pc, r1
   1c98c:	add	r3, pc, r3
   1c990:	bl	12f04 <__assert_fail@plt>
   1c994:	nop	{0}
   1c998:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c99c:	andsmi	ip, r0, ip, asr #25
   1c9a0:	ldrdeq	r9, [r0], -fp
   1c9a4:	andeq	r9, r0, r9, lsl #4
   1c9a8:	andeq	sl, r0, r7, asr r4
   1c9ac:	andeq	lr, r1, r4, ror #16
   1c9b0:	andeq	r9, r0, r6, asr r2
   1c9b4:	andeq	fp, r0, r0, lsr #26
   1c9b8:	ldrdeq	fp, [r0], -r8
   1c9bc:	strdeq	fp, [r0], -r8
   1c9c0:	andeq	fp, r0, r4, asr #26
   1c9c4:	andeq	fp, r0, ip, lsl #25
   1c9c8:	andeq	r9, r0, fp, lsr #32
   1c9cc:	andeq	r8, r0, r0, lsr r6
   1c9d0:	andeq	r9, r0, r1, asr #1
   1c9d4:	andeq	r9, r0, lr, asr r0
   1c9d8:	andeq	r8, r0, r0, lsl r6
   1c9dc:	andeq	r9, r0, r1, lsr #1

0001c9e0 <gen_monster_benchmark@@Base>:
   1c9e0:	push	{r4, r5, fp, lr}
   1c9e4:	add	fp, sp, #8
   1c9e8:	sub	sp, sp, #24
   1c9ec:	mov	r4, r0
   1c9f0:	ldr	r0, [pc, #540]	; 1cc14 <gen_monster_benchmark@@Base+0x234>
   1c9f4:	add	r0, pc, r0
   1c9f8:	vldr	d16, [r0]
   1c9fc:	movw	r0, #2312	; 0x908
   1ca00:	strh	r0, [sp, #16]
   1ca04:	mov	r0, r4
   1ca08:	vstr	d16, [sp, #8]
   1ca0c:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1ca10:	ldr	r1, [pc, #512]	; 1cc18 <gen_monster_benchmark@@Base+0x238>
   1ca14:	mov	r0, r4
   1ca18:	mov	r2, #0
   1ca1c:	mov	r3, #0
   1ca20:	add	r1, pc, r1
   1ca24:	bl	1f0f0 <flatcc_builder_start_buffer@@Base>
   1ca28:	cmp	r0, #0
   1ca2c:	bne	1ca3c <gen_monster_benchmark@@Base+0x5c>
   1ca30:	mov	r0, r4
   1ca34:	mov	r1, #36	; 0x24
   1ca38:	bl	206c8 <flatcc_builder_start_table@@Base>
   1ca3c:	mov	r0, r4
   1ca40:	mov	r1, #2
   1ca44:	mov	r2, #2
   1ca48:	mov	r3, #2
   1ca4c:	bl	21b6c <flatcc_builder_table_add@@Base>
   1ca50:	cmp	r0, #0
   1ca54:	mov	r2, #32
   1ca58:	mov	r3, #16
   1ca5c:	movne	r1, #80	; 0x50
   1ca60:	strhne	r1, [r0]
   1ca64:	mov	r0, r4
   1ca68:	mov	r1, #0
   1ca6c:	bl	21b6c <flatcc_builder_table_add@@Base>
   1ca70:	movw	r3, #52429	; 0xcccd
   1ca74:	mov	r1, #1065353216	; 0x3f800000
   1ca78:	mov	r2, #1073741824	; 0x40000000
   1ca7c:	movt	r3, #49228	; 0xc04c
   1ca80:	stm	r0, {r1, r2, r3}
   1ca84:	mov	r0, r4
   1ca88:	ldr	r1, [pc, #396]	; 1cc1c <gen_monster_benchmark@@Base+0x23c>
   1ca8c:	add	r1, pc, r1
   1ca90:	bl	22950 <flatcc_builder_create_string_str@@Base>
   1ca94:	cmp	r0, #0
   1ca98:	beq	1cab4 <gen_monster_benchmark@@Base+0xd4>
   1ca9c:	mov	r5, r0
   1caa0:	mov	r0, r4
   1caa4:	mov	r1, #3
   1caa8:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1caac:	cmp	r0, #0
   1cab0:	strne	r5, [r0]
   1cab4:	mvn	r0, #0
   1cab8:	mov	r1, #1
   1cabc:	mov	r2, #10
   1cac0:	mov	r3, #1
   1cac4:	str	r1, [sp]
   1cac8:	str	r0, [sp, #4]
   1cacc:	add	r1, sp, #8
   1cad0:	mov	r0, r4
   1cad4:	bl	212bc <flatcc_builder_create_vector@@Base>
   1cad8:	cmp	r0, #0
   1cadc:	beq	1caf8 <gen_monster_benchmark@@Base+0x118>
   1cae0:	mov	r5, r0
   1cae4:	mov	r0, r4
   1cae8:	mov	r1, #5
   1caec:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1caf0:	cmp	r0, #0
   1caf4:	strne	r5, [r0]
   1caf8:	mov	r0, r4
   1cafc:	mov	r1, #4
   1cb00:	mov	r2, #2
   1cb04:	mvn	r3, #-1073741824	; 0xc0000000
   1cb08:	bl	201bc <flatcc_builder_start_vector@@Base>
   1cb0c:	mov	r0, r4
   1cb10:	mov	r1, #1
   1cb14:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   1cb18:	mov	r1, #16
   1cb1c:	strh	r1, [r0]
   1cb20:	mov	r1, #32
   1cb24:	strb	r1, [r0, #2]
   1cb28:	mov	r0, r4
   1cb2c:	mov	r1, #2
   1cb30:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   1cb34:	mov	r1, #48	; 0x30
   1cb38:	strh	r1, [r0]
   1cb3c:	mov	r1, #64	; 0x40
   1cb40:	strb	r1, [r0, #2]
   1cb44:	mov	r1, #80	; 0x50
   1cb48:	strh	r1, [r0, #4]
   1cb4c:	mov	r1, #96	; 0x60
   1cb50:	strb	r1, [r0, #6]
   1cb54:	mov	r0, r4
   1cb58:	mov	r1, #1
   1cb5c:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   1cb60:	cmp	r0, #0
   1cb64:	movne	r1, #128	; 0x80
   1cb68:	strbne	r1, [r0, #2]
   1cb6c:	movne	r1, #112	; 0x70
   1cb70:	strhne	r1, [r0]
   1cb74:	mov	r0, r4
   1cb78:	mov	r1, #1
   1cb7c:	bl	1f5f8 <flatcc_builder_extend_vector@@Base>
   1cb80:	cmp	r0, #0
   1cb84:	movwne	r1, #401	; 0x191
   1cb88:	movtne	r1, #145	; 0x91
   1cb8c:	strne	r1, [r0]
   1cb90:	mov	r0, r4
   1cb94:	bl	2143c <flatcc_builder_end_vector@@Base>
   1cb98:	cmp	r0, #0
   1cb9c:	beq	1cbb8 <gen_monster_benchmark@@Base+0x1d8>
   1cba0:	mov	r5, r0
   1cba4:	mov	r0, r4
   1cba8:	mov	r1, #9
   1cbac:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   1cbb0:	cmp	r0, #0
   1cbb4:	strne	r5, [r0]
   1cbb8:	ldr	r1, [pc, #96]	; 1cc20 <gen_monster_benchmark@@Base+0x240>
   1cbbc:	mov	r0, r4
   1cbc0:	mov	r2, #1
   1cbc4:	add	r1, pc, r1
   1cbc8:	bl	2105c <flatcc_builder_check_required@@Base>
   1cbcc:	cmp	r0, #0
   1cbd0:	beq	1cbf4 <gen_monster_benchmark@@Base+0x214>
   1cbd4:	mov	r0, r4
   1cbd8:	bl	210f8 <flatcc_builder_end_table@@Base>
   1cbdc:	mov	r1, r0
   1cbe0:	mov	r0, r4
   1cbe4:	bl	1f2f0 <flatcc_builder_end_buffer@@Base>
   1cbe8:	mov	r0, #0
   1cbec:	sub	sp, fp, #8
   1cbf0:	pop	{r4, r5, fp, pc}
   1cbf4:	ldr	r0, [pc, #40]	; 1cc24 <gen_monster_benchmark@@Base+0x244>
   1cbf8:	ldr	r1, [pc, #40]	; 1cc28 <gen_monster_benchmark@@Base+0x248>
   1cbfc:	ldr	r3, [pc, #40]	; 1cc2c <gen_monster_benchmark@@Base+0x24c>
   1cc00:	mov	r2, #235	; 0xeb
   1cc04:	add	r0, pc, r0
   1cc08:	add	r1, pc, r1
   1cc0c:	add	r3, pc, r3
   1cc10:	bl	12f04 <__assert_fail@plt>
   1cc14:	andeq	sl, r0, ip, asr r3
   1cc18:	andeq	r8, r0, ip, lsl #7
   1cc1c:	andeq	r8, r0, r4, ror #6
   1cc20:	muleq	r0, r8, r1
   1cc24:	ldrdeq	r9, [r0], -r4
   1cc28:	muleq	r0, r7, r0
   1cc2c:	andeq	r9, r0, lr, ror #4

0001cc30 <time_monster@@Base>:
   1cc30:	push	{r4, r5, r6, sl, fp, lr}
   1cc34:	add	fp, sp, #16
   1cc38:	vpush	{d8-d9}
   1cc3c:	sub	sp, sp, #8
   1cc40:	mov	r4, r0
   1cc44:	ldr	r0, [pc, #292]	; 1cd70 <time_monster@@Base+0x140>
   1cc48:	add	r0, pc, r0
   1cc4c:	bl	12e68 <puts@plt>
   1cc50:	mov	r0, sp
   1cc54:	mov	r1, #0
   1cc58:	bl	12e5c <gettimeofday@plt>
   1cc5c:	ldr	r0, [pc, #272]	; 1cd74 <time_monster@@Base+0x144>
   1cc60:	ldr	r0, [pc, r0]
   1cc64:	cmp	r0, #0
   1cc68:	beq	1cc80 <time_monster@@Base+0x50>
   1cc6c:	ldr	r1, [pc, #260]	; 1cd78 <time_monster@@Base+0x148>
   1cc70:	ldr	r2, [sp]
   1cc74:	add	r1, pc, r1
   1cc78:	ldr	r1, [r1, #4]
   1cc7c:	b	1cc94 <time_monster@@Base+0x64>
   1cc80:	ldm	sp, {r0, r1}
   1cc84:	ldr	r2, [pc, #240]	; 1cd7c <time_monster@@Base+0x14c>
   1cc88:	add	r2, pc, r2
   1cc8c:	strd	r0, [r2]
   1cc90:	mov	r2, r0
   1cc94:	ldr	r3, [sp, #4]
   1cc98:	vldr	d8, [pc, #200]	; 1cd68 <time_monster@@Base+0x138>
   1cc9c:	movw	r6, #16960	; 0x4240
   1cca0:	sub	r5, r2, r0
   1cca4:	movt	r6, #15
   1cca8:	sub	r1, r3, r1
   1ccac:	vmov	s0, r1
   1ccb0:	vcvt.f64.s32	d16, s0
   1ccb4:	vdiv.f64	d9, d16, d8
   1ccb8:	mov	r0, r4
   1ccbc:	bl	1c9e0 <gen_monster_benchmark@@Base>
   1ccc0:	subs	r6, r6, #1
   1ccc4:	bne	1ccb8 <time_monster@@Base+0x88>
   1ccc8:	mov	r0, r4
   1cccc:	bl	22bd8 <flatcc_builder_get_buffer_size@@Base>
   1ccd0:	mov	r4, r0
   1ccd4:	mov	r0, sp
   1ccd8:	mov	r1, #0
   1ccdc:	bl	12e5c <gettimeofday@plt>
   1cce0:	vmov	s0, r5
   1cce4:	vcvt.f64.s32	d16, s0
   1cce8:	ldr	r0, [pc, #144]	; 1cd80 <time_monster@@Base+0x150>
   1ccec:	vadd.f64	d0, d9, d16
   1ccf0:	ldr	r0, [pc, r0]
   1ccf4:	cmp	r0, #0
   1ccf8:	beq	1cd10 <time_monster@@Base+0xe0>
   1ccfc:	ldr	r1, [pc, #128]	; 1cd84 <time_monster@@Base+0x154>
   1cd00:	ldr	r2, [sp]
   1cd04:	add	r1, pc, r1
   1cd08:	ldr	r1, [r1, #4]
   1cd0c:	b	1cd24 <time_monster@@Base+0xf4>
   1cd10:	ldm	sp, {r0, r1}
   1cd14:	ldr	r2, [pc, #108]	; 1cd88 <time_monster@@Base+0x158>
   1cd18:	add	r2, pc, r2
   1cd1c:	strd	r0, [r2]
   1cd20:	mov	r2, r0
   1cd24:	sub	r0, r2, r0
   1cd28:	ldr	r2, [sp, #4]
   1cd2c:	vmov	s4, r0
   1cd30:	sub	r1, r2, r1
   1cd34:	vmov	s2, r1
   1cd38:	mov	r1, r4
   1cd3c:	vcvt.f64.s32	d16, s2
   1cd40:	vcvt.f64.s32	d17, s4
   1cd44:	ldr	r0, [pc, #64]	; 1cd8c <time_monster@@Base+0x15c>
   1cd48:	vdiv.f64	d16, d16, d8
   1cd4c:	vadd.f64	d1, d16, d17
   1cd50:	add	r0, pc, r0
   1cd54:	bl	1cd90 <time_monster@@Base+0x160>
   1cd58:	mov	r0, #0
   1cd5c:	sub	sp, fp, #32
   1cd60:	vpop	{d8-d9}
   1cd64:	pop	{r4, r5, r6, sl, fp, pc}
   1cd68:	andeq	r0, r0, r0
   1cd6c:	smlawbmi	lr, r0, r4, r8
   1cd70:	andeq	fp, r0, r0, lsl sl
   1cd74:	andeq	lr, r1, r0, lsr #8
   1cd78:	andeq	lr, r1, ip, lsl #8
   1cd7c:	strdeq	lr, [r1], -r8
   1cd80:	muleq	r1, r0, r3
   1cd84:	andeq	lr, r1, ip, ror r3
   1cd88:	andeq	lr, r1, r8, ror #6
   1cd8c:	andeq	r8, r0, ip, lsr #26
   1cd90:	push	{r4, sl, fp, lr}
   1cd94:	add	fp, sp, #8
   1cd98:	vpush	{d8-d9}
   1cd9c:	mov	r4, r1
   1cda0:	mov	r1, r0
   1cda4:	ldr	r0, [pc, #324]	; 1cef0 <time_monster@@Base+0x2c0>
   1cda8:	vmov.f64	d8, d1
   1cdac:	vmov.f64	d9, d0
   1cdb0:	add	r0, pc, r0
   1cdb4:	bl	12e14 <printf@plt>
   1cdb8:	ldr	r0, [pc, #308]	; 1cef4 <time_monster@@Base+0x2c4>
   1cdbc:	vsub.f64	d9, d8, d9
   1cdc0:	vmov	r2, r3, d9
   1cdc4:	add	r0, pc, r0
   1cdc8:	bl	12e14 <printf@plt>
   1cdcc:	ldr	r0, [pc, #292]	; 1cef8 <time_monster@@Base+0x2c8>
   1cdd0:	movw	r1, #16960	; 0x4240
   1cdd4:	movt	r1, #15
   1cdd8:	add	r0, pc, r0
   1cddc:	bl	12e14 <printf@plt>
   1cde0:	ldr	r0, [pc, #276]	; 1cefc <time_monster@@Base+0x2cc>
   1cde4:	mov	r1, r4
   1cde8:	add	r0, pc, r0
   1cdec:	bl	12e14 <printf@plt>
   1cdf0:	vldr	d8, [pc, #224]	; 1ced8 <time_monster@@Base+0x2a8>
   1cdf4:	vmov	s0, r4
   1cdf8:	vcvt.f64.u32	d16, s0
   1cdfc:	ldr	r0, [pc, #252]	; 1cf00 <time_monster@@Base+0x2d0>
   1ce00:	vmul.f64	d16, d16, d8
   1ce04:	vdiv.f64	d16, d16, d8
   1ce08:	add	r0, pc, r0
   1ce0c:	vdiv.f64	d16, d16, d9
   1ce10:	vmov	r2, r3, d16
   1ce14:	bl	12e14 <printf@plt>
   1ce18:	ldr	r0, [pc, #228]	; 1cf04 <time_monster@@Base+0x2d4>
   1ce1c:	vdiv.f64	d16, d8, d9
   1ce20:	vmov	r2, r3, d16
   1ce24:	add	r0, pc, r0
   1ce28:	bl	12e14 <printf@plt>
   1ce2c:	ldr	r0, [pc, #212]	; 1cf08 <time_monster@@Base+0x2d8>
   1ce30:	ldr	r1, [pc, #212]	; 1cf0c <time_monster@@Base+0x2dc>
   1ce34:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1ce38:	vdiv.f64	d16, d16, d9
   1ce3c:	vmov	r2, r3, d16
   1ce40:	add	r0, pc, r0
   1ce44:	add	r1, pc, r1
   1ce48:	bl	12e14 <printf@plt>
   1ce4c:	vldr	d17, [pc, #140]	; 1cee0 <time_monster@@Base+0x2b0>
   1ce50:	vldr	d18, [pc, #144]	; 1cee8 <time_monster@@Base+0x2b8>
   1ce54:	vmul.f64	d16, d9, d17
   1ce58:	vdiv.f64	d16, d16, d8
   1ce5c:	vcmpe.f64	d16, d18
   1ce60:	vmrs	APSR_nzcv, fpscr
   1ce64:	bpl	1ce78 <time_monster@@Base+0x248>
   1ce68:	ldr	r0, [pc, #160]	; 1cf10 <time_monster@@Base+0x2e0>
   1ce6c:	vmov	r2, r3, d16
   1ce70:	add	r0, pc, r0
   1ce74:	b	1cec8 <time_monster@@Base+0x298>
   1ce78:	vcmpe.f64	d16, d8
   1ce7c:	vmrs	APSR_nzcv, fpscr
   1ce80:	bpl	1ce98 <time_monster@@Base+0x268>
   1ce84:	ldr	r0, [pc, #136]	; 1cf14 <time_monster@@Base+0x2e4>
   1ce88:	vdiv.f64	d16, d16, d18
   1ce8c:	vmov	r2, r3, d16
   1ce90:	add	r0, pc, r0
   1ce94:	b	1cec8 <time_monster@@Base+0x298>
   1ce98:	vcmpe.f64	d16, d17
   1ce9c:	vmrs	APSR_nzcv, fpscr
   1cea0:	bpl	1ceb8 <time_monster@@Base+0x288>
   1cea4:	ldr	r0, [pc, #108]	; 1cf18 <time_monster@@Base+0x2e8>
   1cea8:	vdiv.f64	d16, d16, d8
   1ceac:	vmov	r2, r3, d16
   1ceb0:	add	r0, pc, r0
   1ceb4:	b	1cec8 <time_monster@@Base+0x298>
   1ceb8:	ldr	r0, [pc, #92]	; 1cf1c <time_monster@@Base+0x2ec>
   1cebc:	vdiv.f64	d16, d16, d17
   1cec0:	vmov	r2, r3, d16
   1cec4:	add	r0, pc, r0
   1cec8:	vpop	{d8-d9}
   1cecc:	pop	{r4, sl, fp, lr}
   1ced0:	b	12e14 <printf@plt>
   1ced4:	nop	{0}
   1ced8:	andeq	r0, r0, r0
   1cedc:	smlawbmi	lr, r0, r4, r8
   1cee0:	andeq	r0, r0, r0
   1cee4:	bicmi	ip, sp, r5, ror #26
   1cee8:	andeq	r0, r0, r0
   1ceec:	addmi	r4, pc, r0
   1cef0:	andeq	r9, r0, sp, asr #27
   1cef4:	andeq	r9, r0, r8, asr #27
   1cef8:	andeq	r9, r0, ip, asr #27
   1cefc:	andeq	r9, r0, ip, asr #27
   1cf00:			; <UNDEFINED> instruction: 0x00009dbf
   1cf04:			; <UNDEFINED> instruction: 0x00009dbb
   1cf08:	andeq	r9, r0, r0, asr #27
   1cf0c:	andeq	r8, r0, lr, asr #24
   1cf10:			; <UNDEFINED> instruction: 0x00009db4
   1cf14:	andeq	r9, r0, ip, lsr #27
   1cf18:	andeq	r9, r0, r4, lsr #27
   1cf1c:	andeq	r9, r0, r8, lsr #27

0001cf20 <gen_struct_buffer_benchmark@@Base>:
   1cf20:	push	{r4, r5, r6, sl, fp, lr}
   1cf24:	add	fp, sp, #16
   1cf28:	sub	sp, sp, #8
   1cf2c:	mov	r4, r0
   1cf30:	bl	1e4f0 <flatcc_builder_reset@@Base>
   1cf34:	mov	r0, r4
   1cf38:	mov	r1, #32
   1cf3c:	mov	r2, #16
   1cf40:	mov	r5, #16
   1cf44:	bl	1f42c <flatcc_builder_start_struct@@Base>
   1cf48:	mov	r6, #0
   1cf4c:	cmp	r0, #0
   1cf50:	mov	r3, #0
   1cf54:	beq	1cfac <gen_struct_buffer_benchmark@@Base+0x8c>
   1cf58:	movw	r1, #52428	; 0xcccc
   1cf5c:	movw	r2, #52429	; 0xcccd
   1cf60:	movw	r3, #0
   1cf64:	movt	r2, #52428	; 0xcccc
   1cf68:	movt	r1, #16400	; 0x4010
   1cf6c:	movt	r3, #16448	; 0x4040
   1cf70:	str	r2, [r0, #16]
   1cf74:	str	r1, [r0, #20]
   1cf78:	mov	r2, #1065353216	; 0x3f800000
   1cf7c:	mov	r1, #1073741824	; 0x40000000
   1cf80:	str	r2, [r0]
   1cf84:	stmib	r0, {r1, r3}
   1cf88:	mov	r1, #8
   1cf8c:	strb	r1, [r0, #24]
   1cf90:	movw	r1, #2730	; 0xaaa
   1cf94:	strh	r1, [r0, #26]
   1cf98:	mov	r1, #239	; 0xef
   1cf9c:	strb	r1, [r0, #28]
   1cfa0:	mov	r0, r4
   1cfa4:	bl	1f514 <flatcc_builder_end_struct@@Base>
   1cfa8:	mov	r3, r0
   1cfac:	stm	sp, {r5, r6}
   1cfb0:	mov	r0, r4
   1cfb4:	mov	r2, #0
   1cfb8:	ldr	r1, [pc, #184]	; 1d078 <gen_struct_buffer_benchmark@@Base+0x158>
   1cfbc:	add	r1, pc, r1
   1cfc0:	bl	1ed5c <flatcc_builder_create_buffer@@Base>
   1cfc4:	mov	r0, r4
   1cfc8:	mov	r1, #0
   1cfcc:	bl	22c68 <flatcc_builder_get_direct_buffer@@Base>
   1cfd0:	cmp	r0, #0
   1cfd4:	beq	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1cfd8:	ldr	r1, [r0]
   1cfdc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1cfe0:	add	r0, r0, r1
   1cfe4:	vldr	s0, [r0]
   1cfe8:	vcmp.f32	s0, s2
   1cfec:	vmrs	APSR_nzcv, fpscr
   1cff0:	bne	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1cff4:	vldr	s0, [r0, #4]
   1cff8:	vmov.f32	s2, #0	; 0x40000000  2.0
   1cffc:	vcmp.f32	s0, s2
   1d000:	vmrs	APSR_nzcv, fpscr
   1d004:	bne	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1d008:	vldr	s0, [r0, #8]
   1d00c:	vmov.f32	s2, #8	; 0x40400000  3.0
   1d010:	vcmp.f32	s0, s2
   1d014:	vmrs	APSR_nzcv, fpscr
   1d018:	bne	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1d01c:	vldr	d16, [pc, #76]	; 1d070 <gen_struct_buffer_benchmark@@Base+0x150>
   1d020:	vldr	d17, [r0, #16]
   1d024:	vcmp.f64	d17, d16
   1d028:	vmrs	APSR_nzcv, fpscr
   1d02c:	bne	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1d030:	ldrb	r1, [r0, #24]
   1d034:	cmp	r1, #8
   1d038:	bne	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1d03c:	ldrh	r1, [r0, #26]
   1d040:	movw	r2, #2730	; 0xaaa
   1d044:	cmp	r1, r2
   1d048:	bne	1d060 <gen_struct_buffer_benchmark@@Base+0x140>
   1d04c:	ldrb	r0, [r0, #28]
   1d050:	subs	r0, r0, #239	; 0xef
   1d054:	mvnne	r0, #0
   1d058:	sub	sp, fp, #16
   1d05c:	pop	{r4, r5, r6, sl, fp, pc}
   1d060:	mvn	r0, #0
   1d064:	sub	sp, fp, #16
   1d068:	pop	{r4, r5, r6, sl, fp, pc}
   1d06c:	nop	{0}
   1d070:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d074:	andsmi	ip, r0, ip, asr #25
   1d078:	strdeq	r7, [r0], -r0
   1d07c:	nop	{0}

0001d080 <time_struct_buffer@@Base>:
   1d080:	push	{r4, r5, r6, r7, fp, lr}
   1d084:	add	fp, sp, #16
   1d088:	vpush	{d8-d9}
   1d08c:	sub	sp, sp, #8
   1d090:	mov	r4, r0
   1d094:	ldr	r0, [pc, #332]	; 1d1e8 <time_struct_buffer@@Base+0x168>
   1d098:	add	r0, pc, r0
   1d09c:	bl	12e68 <puts@plt>
   1d0a0:	mov	r0, sp
   1d0a4:	mov	r1, #0
   1d0a8:	bl	12e5c <gettimeofday@plt>
   1d0ac:	ldr	r0, [pc, #312]	; 1d1ec <time_struct_buffer@@Base+0x16c>
   1d0b0:	ldr	r0, [pc, r0]
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d0d0 <time_struct_buffer@@Base+0x50>
   1d0bc:	ldr	r1, [pc, #300]	; 1d1f0 <time_struct_buffer@@Base+0x170>
   1d0c0:	ldr	r2, [sp]
   1d0c4:	add	r1, pc, r1
   1d0c8:	ldr	r1, [r1, #4]
   1d0cc:	b	1d0e4 <time_struct_buffer@@Base+0x64>
   1d0d0:	ldm	sp, {r0, r1}
   1d0d4:	ldr	r2, [pc, #280]	; 1d1f4 <time_struct_buffer@@Base+0x174>
   1d0d8:	add	r2, pc, r2
   1d0dc:	strd	r0, [r2]
   1d0e0:	mov	r2, r0
   1d0e4:	ldr	r3, [sp, #4]
   1d0e8:	vldr	d9, [pc, #240]	; 1d1e0 <time_struct_buffer@@Base+0x160>
   1d0ec:	movw	r7, #16960	; 0x4240
   1d0f0:	sub	r6, r2, r0
   1d0f4:	mov	r5, #0
   1d0f8:	movt	r7, #15
   1d0fc:	sub	r1, r3, r1
   1d100:	vmov	s0, r1
   1d104:	vcvt.f64.s32	d16, s0
   1d108:	vdiv.f64	d8, d16, d9
   1d10c:	mov	r0, r4
   1d110:	bl	1cf20 <gen_struct_buffer_benchmark@@Base>
   1d114:	orr	r5, r0, r5
   1d118:	subs	r7, r7, #1
   1d11c:	bne	1d10c <time_struct_buffer@@Base+0x8c>
   1d120:	mov	r0, sp
   1d124:	mov	r1, #0
   1d128:	bl	12e5c <gettimeofday@plt>
   1d12c:	vmov	s0, r6
   1d130:	vcvt.f64.s32	d16, s0
   1d134:	ldr	r0, [pc, #188]	; 1d1f8 <time_struct_buffer@@Base+0x178>
   1d138:	ldr	r0, [pc, r0]
   1d13c:	cmp	r0, #0
   1d140:	beq	1d158 <time_struct_buffer@@Base+0xd8>
   1d144:	ldr	r1, [pc, #176]	; 1d1fc <time_struct_buffer@@Base+0x17c>
   1d148:	ldr	r2, [sp]
   1d14c:	add	r1, pc, r1
   1d150:	ldr	r1, [r1, #4]
   1d154:	b	1d16c <time_struct_buffer@@Base+0xec>
   1d158:	ldm	sp, {r0, r1}
   1d15c:	ldr	r2, [pc, #156]	; 1d200 <time_struct_buffer@@Base+0x180>
   1d160:	add	r2, pc, r2
   1d164:	strd	r0, [r2]
   1d168:	mov	r2, r0
   1d16c:	sub	r0, r2, r0
   1d170:	ldr	r2, [sp, #4]
   1d174:	vadd.f64	d8, d8, d16
   1d178:	vmov	s2, r0
   1d17c:	mov	r0, r4
   1d180:	sub	r1, r2, r1
   1d184:	vmov	s0, r1
   1d188:	vcvt.f64.s32	d16, s0
   1d18c:	vcvt.f64.s32	d17, s2
   1d190:	vdiv.f64	d16, d16, d9
   1d194:	vadd.f64	d9, d16, d17
   1d198:	bl	22bd8 <flatcc_builder_get_buffer_size@@Base>
   1d19c:	mov	r4, r0
   1d1a0:	cmp	r5, #0
   1d1a4:	beq	1d1b4 <time_struct_buffer@@Base+0x134>
   1d1a8:	ldr	r0, [pc, #84]	; 1d204 <time_struct_buffer@@Base+0x184>
   1d1ac:	add	r0, pc, r0
   1d1b0:	bl	12e68 <puts@plt>
   1d1b4:	ldr	r0, [pc, #76]	; 1d208 <time_struct_buffer@@Base+0x188>
   1d1b8:	vmov.f64	d0, d8
   1d1bc:	vmov.f64	d1, d9
   1d1c0:	mov	r1, r4
   1d1c4:	add	r0, pc, r0
   1d1c8:	bl	1cd90 <time_monster@@Base+0x160>
   1d1cc:	mov	r0, r5
   1d1d0:	sub	sp, fp, #32
   1d1d4:	vpop	{d8-d9}
   1d1d8:	pop	{r4, r5, r6, r7, fp, pc}
   1d1dc:	nop	{0}
   1d1e0:	andeq	r0, r0, r0
   1d1e4:	smlawbmi	lr, r0, r4, r8
   1d1e8:	andeq	fp, r0, r0, asr #11
   1d1ec:	ldrdeq	sp, [r1], -r0
   1d1f0:			; <UNDEFINED> instruction: 0x0001dfbc
   1d1f4:	andeq	sp, r1, r8, lsr #31
   1d1f8:	andeq	sp, r1, r8, asr #30
   1d1fc:	andeq	sp, r1, r4, lsr pc
   1d200:	andeq	sp, r1, r0, lsr #30
   1d204:	andeq	fp, r0, ip, asr #9
   1d208:	ldrdeq	r8, [r0], -r6

0001d20c <main@@Base>:
   1d20c:	push	{r4, sl, fp, lr}
   1d210:	add	fp, sp, #8
   1d214:	sub	sp, sp, #232	; 0xe8
   1d218:	mov	r4, sp
   1d21c:	mov	r0, r4
   1d220:	bl	1e34c <flatcc_builder_init@@Base>
   1d224:	ldr	r0, [pc, #384]	; 1d3ac <main@@Base+0x1a0>
   1d228:	add	r0, pc, r0
   1d22c:	bl	12e68 <puts@plt>
   1d230:	mov	r0, r4
   1d234:	bl	13d08 <test_table_with_emptystruct@@Base>
   1d238:	cmp	r0, #0
   1d23c:	bne	1d380 <main@@Base+0x174>
   1d240:	mov	r0, sp
   1d244:	bl	13764 <test_empty_monster@@Base>
   1d248:	cmp	r0, #0
   1d24c:	bne	1d380 <main@@Base+0x174>
   1d250:	mov	r0, sp
   1d254:	bl	15808 <test_monster@@Base>
   1d258:	cmp	r0, #0
   1d25c:	bne	1d380 <main@@Base+0x174>
   1d260:	mov	r0, sp
   1d264:	bl	158c4 <test_monster_with_size@@Base>
   1d268:	cmp	r0, #0
   1d26c:	bne	1d380 <main@@Base+0x174>
   1d270:	mov	r0, sp
   1d274:	bl	159d8 <test_string@@Base>
   1d278:	cmp	r0, #0
   1d27c:	bne	1d380 <main@@Base+0x174>
   1d280:	mov	r0, sp
   1d284:	bl	1c4a0 <test_struct_buffer@@Base>
   1d288:	cmp	r0, #0
   1d28c:	bne	1d380 <main@@Base+0x174>
   1d290:	mov	r0, sp
   1d294:	bl	139c0 <test_typed_empty_monster@@Base>
   1d298:	cmp	r0, #0
   1d29c:	bne	1d380 <main@@Base+0x174>
   1d2a0:	mov	r0, sp
   1d2a4:	bl	13e9c <test_typed_table_with_emptystruct@@Base>
   1d2a8:	cmp	r0, #0
   1d2ac:	bne	1d380 <main@@Base+0x174>
   1d2b0:	mov	r0, sp
   1d2b4:	bl	1c700 <test_typed_struct_buffer@@Base>
   1d2b8:	cmp	r0, #0
   1d2bc:	bne	1d380 <main@@Base+0x174>
   1d2c0:	mov	r0, sp
   1d2c4:	bl	194f0 <test_clone_slice@@Base>
   1d2c8:	cmp	r0, #0
   1d2cc:	bne	1d380 <main@@Base+0x174>
   1d2d0:	mov	r0, sp
   1d2d4:	bl	1b63c <test_add_set_defaults@@Base>
   1d2d8:	cmp	r0, #0
   1d2dc:	bne	1d380 <main@@Base+0x174>
   1d2e0:	mov	r0, sp
   1d2e4:	bl	19ff0 <test_create_add_field@@Base>
   1d2e8:	cmp	r0, #0
   1d2ec:	bne	1d380 <main@@Base+0x174>
   1d2f0:	mov	r0, sp
   1d2f4:	bl	1a31c <test_union_vector@@Base>
   1d2f8:	cmp	r0, #0
   1d2fc:	bne	1d380 <main@@Base+0x174>
   1d300:	mov	r0, sp
   1d304:	bl	190d0 <test_basic_sort@@Base>
   1d308:	cmp	r0, #0
   1d30c:	bne	1d380 <main@@Base+0x174>
   1d310:	mov	r0, sp
   1d314:	bl	15d08 <test_sort_find@@Base>
   1d318:	cmp	r0, #0
   1d31c:	bne	1d380 <main@@Base+0x174>
   1d320:	mov	r0, sp
   1d324:	bl	16aec <test_scan@@Base>
   1d328:	cmp	r0, #0
   1d32c:	bne	1d380 <main@@Base+0x174>
   1d330:	mov	r0, sp
   1d334:	bl	1b9a0 <test_nested_buffer@@Base>
   1d338:	cmp	r0, #0
   1d33c:	bne	1d380 <main@@Base+0x174>
   1d340:	mov	r0, sp
   1d344:	bl	1bd10 <test_nested_buffer_first@@Base>
   1d348:	cmp	r0, #0
   1d34c:	bne	1d380 <main@@Base+0x174>
   1d350:	mov	r0, sp
   1d354:	bl	1c080 <test_nested_buffer_using_nest@@Base>
   1d358:	cmp	r0, #0
   1d35c:	bne	1d380 <main@@Base+0x174>
   1d360:	mov	r0, sp
   1d364:	bl	130c8 <test_type_aliases@@Base>
   1d368:	cmp	r0, #0
   1d36c:	bne	1d380 <main@@Base+0x174>
   1d370:	mov	r0, sp
   1d374:	bl	1a904 <test_mixed_type_union@@Base>
   1d378:	cmp	r0, #0
   1d37c:	beq	1d398 <main@@Base+0x18c>
   1d380:	ldr	r0, [pc, #40]	; 1d3b0 <main@@Base+0x1a4>
   1d384:	add	r0, pc, r0
   1d388:	bl	12e68 <puts@plt>
   1d38c:	mvn	r0, #0
   1d390:	sub	sp, fp, #8
   1d394:	pop	{r4, sl, fp, pc}
   1d398:	mov	r0, sp
   1d39c:	bl	1e6b4 <flatcc_builder_clear@@Base>
   1d3a0:	mov	r0, #0
   1d3a4:	sub	sp, fp, #8
   1d3a8:	pop	{r4, sl, fp, pc}
   1d3ac:	andeq	fp, r0, r0, ror r4
   1d3b0:	andeq	r9, r0, fp, lsr r9
   1d3b4:	push	{r4, sl, fp, lr}
   1d3b8:	add	fp, sp, #8
   1d3bc:	sub	sp, sp, #8
   1d3c0:	mov	r1, #0
   1d3c4:	mov	r2, #1
   1d3c8:	mov	r3, #1
   1d3cc:	mov	r4, r0
   1d3d0:	bl	234e4 <flatcc_verify_field@@Base>
   1d3d4:	cmp	r0, #0
   1d3d8:	bne	1d528 <main@@Base+0x31c>
   1d3dc:	mov	r0, r4
   1d3e0:	mov	r1, #1
   1d3e4:	mov	r2, #1
   1d3e8:	mov	r3, #1
   1d3ec:	bl	234e4 <flatcc_verify_field@@Base>
   1d3f0:	cmp	r0, #0
   1d3f4:	bne	1d528 <main@@Base+0x31c>
   1d3f8:	mov	r0, r4
   1d3fc:	mov	r1, #2
   1d400:	mov	r2, #2
   1d404:	mov	r3, #2
   1d408:	bl	234e4 <flatcc_verify_field@@Base>
   1d40c:	cmp	r0, #0
   1d410:	bne	1d528 <main@@Base+0x31c>
   1d414:	mov	r0, r4
   1d418:	mov	r1, #3
   1d41c:	mov	r2, #2
   1d420:	mov	r3, #2
   1d424:	bl	234e4 <flatcc_verify_field@@Base>
   1d428:	cmp	r0, #0
   1d42c:	bne	1d528 <main@@Base+0x31c>
   1d430:	mov	r0, r4
   1d434:	mov	r1, #4
   1d438:	mov	r2, #4
   1d43c:	mov	r3, #4
   1d440:	bl	234e4 <flatcc_verify_field@@Base>
   1d444:	cmp	r0, #0
   1d448:	bne	1d528 <main@@Base+0x31c>
   1d44c:	mov	r0, r4
   1d450:	mov	r1, #5
   1d454:	mov	r2, #4
   1d458:	mov	r3, #4
   1d45c:	bl	234e4 <flatcc_verify_field@@Base>
   1d460:	cmp	r0, #0
   1d464:	bne	1d528 <main@@Base+0x31c>
   1d468:	mov	r0, r4
   1d46c:	mov	r1, #6
   1d470:	mov	r2, #8
   1d474:	mov	r3, #8
   1d478:	bl	234e4 <flatcc_verify_field@@Base>
   1d47c:	cmp	r0, #0
   1d480:	bne	1d528 <main@@Base+0x31c>
   1d484:	mov	r0, r4
   1d488:	mov	r1, #7
   1d48c:	mov	r2, #8
   1d490:	mov	r3, #8
   1d494:	bl	234e4 <flatcc_verify_field@@Base>
   1d498:	cmp	r0, #0
   1d49c:	bne	1d528 <main@@Base+0x31c>
   1d4a0:	mov	r0, r4
   1d4a4:	mov	r1, #8
   1d4a8:	mov	r2, #4
   1d4ac:	mov	r3, #4
   1d4b0:	bl	234e4 <flatcc_verify_field@@Base>
   1d4b4:	cmp	r0, #0
   1d4b8:	bne	1d528 <main@@Base+0x31c>
   1d4bc:	mov	r0, r4
   1d4c0:	mov	r1, #9
   1d4c4:	mov	r2, #8
   1d4c8:	mov	r3, #8
   1d4cc:	bl	234e4 <flatcc_verify_field@@Base>
   1d4d0:	cmp	r0, #0
   1d4d4:	bne	1d528 <main@@Base+0x31c>
   1d4d8:	mvn	r0, #0
   1d4dc:	mov	r1, #1
   1d4e0:	mov	r2, #0
   1d4e4:	mov	r3, #1
   1d4e8:	str	r1, [sp]
   1d4ec:	str	r0, [sp, #4]
   1d4f0:	mov	r0, r4
   1d4f4:	mov	r1, #10
   1d4f8:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d4fc:	cmp	r0, #0
   1d500:	bne	1d528 <main@@Base+0x31c>
   1d504:	mvn	r0, #-536870912	; 0xe0000000
   1d508:	mov	r1, #8
   1d50c:	mov	r2, #0
   1d510:	mov	r3, #8
   1d514:	str	r1, [sp]
   1d518:	str	r0, [sp, #4]
   1d51c:	mov	r0, r4
   1d520:	mov	r1, #11
   1d524:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d528:	sub	sp, fp, #8
   1d52c:	pop	{r4, sl, fp, pc}
   1d530:	push	{r4, r5, r6, r7, fp, lr}
   1d534:	add	fp, sp, #16
   1d538:	sub	sp, sp, #8
   1d53c:	mov	r1, #0
   1d540:	mov	r2, #32
   1d544:	mov	r3, #16
   1d548:	mov	r4, r0
   1d54c:	bl	234e4 <flatcc_verify_field@@Base>
   1d550:	cmp	r0, #0
   1d554:	bne	1d95c <main@@Base+0x750>
   1d558:	mov	r0, r4
   1d55c:	mov	r1, #2
   1d560:	mov	r2, #2
   1d564:	mov	r3, #2
   1d568:	bl	234e4 <flatcc_verify_field@@Base>
   1d56c:	cmp	r0, #0
   1d570:	bne	1d95c <main@@Base+0x750>
   1d574:	mov	r0, r4
   1d578:	mov	r1, #1
   1d57c:	mov	r2, #2
   1d580:	mov	r3, #2
   1d584:	bl	234e4 <flatcc_verify_field@@Base>
   1d588:	cmp	r0, #0
   1d58c:	bne	1d95c <main@@Base+0x750>
   1d590:	mov	r0, r4
   1d594:	mov	r1, #3
   1d598:	mov	r2, #1
   1d59c:	bl	23568 <flatcc_verify_string_field@@Base>
   1d5a0:	cmp	r0, #0
   1d5a4:	bne	1d95c <main@@Base+0x750>
   1d5a8:	mov	r0, r4
   1d5ac:	mov	r1, #6
   1d5b0:	mov	r2, #1
   1d5b4:	mov	r3, #1
   1d5b8:	mov	r5, #1
   1d5bc:	bl	234e4 <flatcc_verify_field@@Base>
   1d5c0:	cmp	r0, #0
   1d5c4:	bne	1d95c <main@@Base+0x750>
   1d5c8:	mvn	r0, #0
   1d5cc:	mov	r1, #5
   1d5d0:	mov	r2, #0
   1d5d4:	mov	r3, #1
   1d5d8:	str	r5, [sp]
   1d5dc:	str	r0, [sp, #4]
   1d5e0:	mov	r0, r4
   1d5e4:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d5e8:	cmp	r0, #0
   1d5ec:	bne	1d95c <main@@Base+0x750>
   1d5f0:	ldr	r3, [pc, #908]	; 1d984 <main@@Base+0x778>
   1d5f4:	mov	r0, r4
   1d5f8:	mov	r1, #11
   1d5fc:	mov	r2, #0
   1d600:	add	r3, pc, r3
   1d604:	bl	23a3c <flatcc_verify_table_vector_field@@Base>
   1d608:	cmp	r0, #0
   1d60c:	bne	1d95c <main@@Base+0x750>
   1d610:	mov	r0, r4
   1d614:	mov	r1, #10
   1d618:	mov	r2, #0
   1d61c:	bl	23744 <flatcc_verify_string_vector_field@@Base>
   1d620:	cmp	r0, #0
   1d624:	bne	1d95c <main@@Base+0x750>
   1d628:	mov	r0, r4
   1d62c:	mov	r1, #28
   1d630:	mov	r2, #0
   1d634:	bl	23744 <flatcc_verify_string_vector_field@@Base>
   1d638:	cmp	r0, #0
   1d63c:	bne	1d95c <main@@Base+0x750>
   1d640:	mvn	r0, #0
   1d644:	mov	r1, #1
   1d648:	mov	r2, #0
   1d64c:	mov	r3, #1
   1d650:	str	r1, [sp]
   1d654:	str	r0, [sp, #4]
   1d658:	mov	r0, r4
   1d65c:	mov	r1, #24
   1d660:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d664:	cmp	r0, #0
   1d668:	bne	1d95c <main@@Base+0x750>
   1d66c:	mvn	r0, #-536870912	; 0xe0000000
   1d670:	mov	r1, #4
   1d674:	mov	r2, #0
   1d678:	mov	r3, #8
   1d67c:	str	r1, [sp]
   1d680:	str	r0, [sp, #4]
   1d684:	mov	r0, r4
   1d688:	mov	r1, #29
   1d68c:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d690:	cmp	r0, #0
   1d694:	bne	1d95c <main@@Base+0x750>
   1d698:	ldr	r5, [pc, #744]	; 1d988 <main@@Base+0x77c>
   1d69c:	mov	r0, r4
   1d6a0:	mov	r1, #12
   1d6a4:	mov	r2, #0
   1d6a8:	add	r5, pc, r5
   1d6ac:	mov	r3, r5
   1d6b0:	bl	238e8 <flatcc_verify_table_field@@Base>
   1d6b4:	cmp	r0, #0
   1d6b8:	bne	1d95c <main@@Base+0x750>
   1d6bc:	ldr	r3, [pc, #712]	; 1d98c <main@@Base+0x780>
   1d6c0:	mov	r0, r4
   1d6c4:	mov	r1, #8
   1d6c8:	mov	r2, #0
   1d6cc:	add	r3, pc, r3
   1d6d0:	bl	2486c <flatcc_verify_union_field@@Base>
   1d6d4:	cmp	r0, #0
   1d6d8:	bne	1d95c <main@@Base+0x750>
   1d6dc:	mvn	r6, #-1073741824	; 0xc0000000
   1d6e0:	mov	r7, #2
   1d6e4:	mov	r0, r4
   1d6e8:	mov	r1, #9
   1d6ec:	mov	r2, #0
   1d6f0:	mov	r3, #4
   1d6f4:	str	r7, [sp]
   1d6f8:	str	r6, [sp, #4]
   1d6fc:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d700:	cmp	r0, #0
   1d704:	bne	1d95c <main@@Base+0x750>
   1d708:	mov	r0, r4
   1d70c:	mov	r1, #31
   1d710:	mov	r2, #0
   1d714:	mov	r3, #4
   1d718:	str	r7, [sp]
   1d71c:	str	r6, [sp, #4]
   1d720:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d724:	cmp	r0, #0
   1d728:	bne	1d95c <main@@Base+0x750>
   1d72c:	mov	r0, #1
   1d730:	mov	r1, #13
   1d734:	mov	r2, #0
   1d738:	mov	r3, #0
   1d73c:	stm	sp, {r0, r5}
   1d740:	mov	r0, r4
   1d744:	bl	2455c <flatcc_verify_table_as_nested_root@@Base>
   1d748:	cmp	r0, #0
   1d74c:	bne	1d95c <main@@Base+0x750>
   1d750:	ldr	r3, [pc, #568]	; 1d990 <main@@Base+0x784>
   1d754:	mov	r0, r4
   1d758:	mov	r1, #14
   1d75c:	mov	r2, #0
   1d760:	add	r3, pc, r3
   1d764:	bl	238e8 <flatcc_verify_table_field@@Base>
   1d768:	cmp	r0, #0
   1d76c:	bne	1d95c <main@@Base+0x750>
   1d770:	mov	r0, r4
   1d774:	mov	r1, #15
   1d778:	mov	r2, #1
   1d77c:	mov	r3, #1
   1d780:	bl	234e4 <flatcc_verify_field@@Base>
   1d784:	cmp	r0, #0
   1d788:	bne	1d95c <main@@Base+0x750>
   1d78c:	mov	r0, r4
   1d790:	mov	r1, #16
   1d794:	mov	r2, #4
   1d798:	mov	r3, #4
   1d79c:	bl	234e4 <flatcc_verify_field@@Base>
   1d7a0:	cmp	r0, #0
   1d7a4:	bne	1d95c <main@@Base+0x750>
   1d7a8:	mov	r0, r4
   1d7ac:	mov	r1, #17
   1d7b0:	mov	r2, #4
   1d7b4:	mov	r3, #4
   1d7b8:	bl	234e4 <flatcc_verify_field@@Base>
   1d7bc:	cmp	r0, #0
   1d7c0:	bne	1d95c <main@@Base+0x750>
   1d7c4:	mov	r0, r4
   1d7c8:	mov	r1, #18
   1d7cc:	mov	r2, #8
   1d7d0:	mov	r3, #8
   1d7d4:	bl	234e4 <flatcc_verify_field@@Base>
   1d7d8:	cmp	r0, #0
   1d7dc:	bne	1d95c <main@@Base+0x750>
   1d7e0:	mov	r0, r4
   1d7e4:	mov	r1, #19
   1d7e8:	mov	r2, #8
   1d7ec:	mov	r3, #8
   1d7f0:	bl	234e4 <flatcc_verify_field@@Base>
   1d7f4:	cmp	r0, #0
   1d7f8:	bne	1d95c <main@@Base+0x750>
   1d7fc:	mov	r0, r4
   1d800:	mov	r1, #20
   1d804:	mov	r2, #4
   1d808:	mov	r3, #4
   1d80c:	bl	234e4 <flatcc_verify_field@@Base>
   1d810:	cmp	r0, #0
   1d814:	bne	1d95c <main@@Base+0x750>
   1d818:	mov	r0, r4
   1d81c:	mov	r1, #21
   1d820:	mov	r2, #4
   1d824:	mov	r3, #4
   1d828:	bl	234e4 <flatcc_verify_field@@Base>
   1d82c:	cmp	r0, #0
   1d830:	bne	1d95c <main@@Base+0x750>
   1d834:	mov	r0, r4
   1d838:	mov	r1, #22
   1d83c:	mov	r2, #8
   1d840:	mov	r3, #8
   1d844:	bl	234e4 <flatcc_verify_field@@Base>
   1d848:	cmp	r0, #0
   1d84c:	bne	1d95c <main@@Base+0x750>
   1d850:	mov	r0, r4
   1d854:	mov	r1, #23
   1d858:	mov	r2, #8
   1d85c:	mov	r3, #8
   1d860:	bl	234e4 <flatcc_verify_field@@Base>
   1d864:	cmp	r0, #0
   1d868:	bne	1d95c <main@@Base+0x750>
   1d86c:	mov	r0, r4
   1d870:	mov	r1, #25
   1d874:	mov	r2, #4
   1d878:	mov	r3, #4
   1d87c:	bl	234e4 <flatcc_verify_field@@Base>
   1d880:	cmp	r0, #0
   1d884:	bne	1d95c <main@@Base+0x750>
   1d888:	mov	r0, r4
   1d88c:	mov	r1, #26
   1d890:	mov	r2, #4
   1d894:	mov	r3, #4
   1d898:	bl	234e4 <flatcc_verify_field@@Base>
   1d89c:	cmp	r0, #0
   1d8a0:	bne	1d95c <main@@Base+0x750>
   1d8a4:	mov	r0, r4
   1d8a8:	mov	r1, #27
   1d8ac:	mov	r2, #4
   1d8b0:	mov	r3, #4
   1d8b4:	bl	234e4 <flatcc_verify_field@@Base>
   1d8b8:	cmp	r0, #0
   1d8bc:	bne	1d95c <main@@Base+0x750>
   1d8c0:	mvn	r0, #0
   1d8c4:	mov	r1, #1
   1d8c8:	mov	r2, #0
   1d8cc:	mov	r3, #1
   1d8d0:	str	r1, [sp]
   1d8d4:	str	r0, [sp, #4]
   1d8d8:	mov	r0, r4
   1d8dc:	mov	r1, #30
   1d8e0:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d8e4:	cmp	r0, #0
   1d8e8:	bne	1d95c <main@@Base+0x750>
   1d8ec:	mvn	r5, #-536870912	; 0xe0000000
   1d8f0:	mov	r6, #8
   1d8f4:	mov	r0, r4
   1d8f8:	mov	r1, #32
   1d8fc:	mov	r2, #0
   1d900:	mov	r3, #8
   1d904:	str	r6, [sp]
   1d908:	str	r5, [sp, #4]
   1d90c:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d910:	cmp	r0, #0
   1d914:	bne	1d95c <main@@Base+0x750>
   1d918:	mov	r0, r4
   1d91c:	mov	r1, #33	; 0x21
   1d920:	mov	r2, #0
   1d924:	mov	r3, #8
   1d928:	str	r6, [sp]
   1d92c:	str	r5, [sp, #4]
   1d930:	bl	2364c <flatcc_verify_vector_field@@Base>
   1d934:	cmp	r0, #0
   1d938:	bne	1d95c <main@@Base+0x750>
   1d93c:	ldr	r3, [pc, #80]	; 1d994 <main@@Base+0x788>
   1d940:	mov	r0, r4
   1d944:	mov	r1, #34	; 0x22
   1d948:	mov	r2, #0
   1d94c:	add	r3, pc, r3
   1d950:	bl	238e8 <flatcc_verify_table_field@@Base>
   1d954:	cmp	r0, #0
   1d958:	beq	1d964 <main@@Base+0x758>
   1d95c:	sub	sp, fp, #16
   1d960:	pop	{r4, r5, r6, r7, fp, pc}
   1d964:	ldr	r3, [pc, #44]	; 1d998 <main@@Base+0x78c>
   1d968:	mov	r0, r4
   1d96c:	mov	r1, #35	; 0x23
   1d970:	mov	r2, #0
   1d974:	add	r3, pc, r3
   1d978:	sub	sp, fp, #16
   1d97c:	pop	{r4, r5, r6, r7, fp, lr}
   1d980:	b	238e8 <flatcc_verify_table_field@@Base>
   1d984:			; <UNDEFINED> instruction: 0xffffff28
   1d988:			; <UNDEFINED> instruction: 0xfffffe80
   1d98c:	andeq	r0, r0, r8, asr #5
   1d990:	andeq	r0, r0, r4, ror #4
   1d994:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1d998:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1d99c:	ldrb	r1, [r0, #12]
   1d9a0:	sub	r1, r1, #1
   1d9a4:	uxtb	r2, r1
   1d9a8:	cmp	r2, #3
   1d9ac:	movhi	r0, #0
   1d9b0:	bxhi	lr
   1d9b4:	ldr	r2, [pc, #12]	; 1d9c8 <main@@Base+0x7bc>
   1d9b8:	sxtb	r1, r1
   1d9bc:	add	r2, pc, r2
   1d9c0:	ldr	r1, [r2, r1, lsl #2]
   1d9c4:	b	23d34 <flatcc_verify_union_table@@Base>
   1d9c8:	muleq	r1, ip, r4
   1d9cc:	push	{r4, sl, fp, lr}
   1d9d0:	add	fp, sp, #8
   1d9d4:	mov	r1, #0
   1d9d8:	mov	r2, #0
   1d9dc:	mov	r4, r0
   1d9e0:	bl	23568 <flatcc_verify_string_field@@Base>
   1d9e4:	cmp	r0, #0
   1d9e8:	popne	{r4, sl, fp, pc}
   1d9ec:	mov	r0, r4
   1d9f0:	mov	r1, #1
   1d9f4:	mov	r2, #8
   1d9f8:	mov	r3, #8
   1d9fc:	bl	234e4 <flatcc_verify_field@@Base>
   1da00:	cmp	r0, #0
   1da04:	beq	1da0c <main@@Base+0x800>
   1da08:	pop	{r4, sl, fp, pc}
   1da0c:	mov	r0, r4
   1da10:	mov	r1, #2
   1da14:	mov	r2, #2
   1da18:	mov	r3, #2
   1da1c:	pop	{r4, sl, fp, lr}
   1da20:	b	234e4 <flatcc_verify_field@@Base>
   1da24:	mov	r0, #0
   1da28:	bx	lr
   1da2c:	push	{r4, r5, r6, sl, fp, lr}
   1da30:	add	fp, sp, #16
   1da34:	sub	sp, sp, #8
   1da38:	mvn	r5, #0
   1da3c:	mov	r6, #1
   1da40:	mov	r1, #0
   1da44:	mov	r2, #0
   1da48:	mov	r3, #1
   1da4c:	mov	r4, r0
   1da50:	str	r6, [sp]
   1da54:	str	r5, [sp, #4]
   1da58:	bl	2364c <flatcc_verify_vector_field@@Base>
   1da5c:	cmp	r0, #0
   1da60:	bne	1da88 <main@@Base+0x87c>
   1da64:	mov	r0, r4
   1da68:	mov	r1, #1
   1da6c:	mov	r2, #0
   1da70:	mov	r3, #1
   1da74:	str	r6, [sp]
   1da78:	str	r5, [sp, #4]
   1da7c:	bl	2364c <flatcc_verify_vector_field@@Base>
   1da80:	cmp	r0, #0
   1da84:	beq	1da90 <main@@Base+0x884>
   1da88:	sub	sp, fp, #16
   1da8c:	pop	{r4, r5, r6, sl, fp, pc}
   1da90:	ldr	r0, [pc, #40]	; 1dac0 <main@@Base+0x8b4>
   1da94:	mov	r1, #1
   1da98:	mov	r2, #0
   1da9c:	mov	r3, #0
   1daa0:	str	r1, [sp]
   1daa4:	mov	r1, #2
   1daa8:	add	r0, pc, r0
   1daac:	str	r0, [sp, #4]
   1dab0:	mov	r0, r4
   1dab4:	bl	2455c <flatcc_verify_table_as_nested_root@@Base>
   1dab8:	sub	sp, fp, #16
   1dabc:	pop	{r4, r5, r6, sl, fp, pc}
   1dac0:			; <UNDEFINED> instruction: 0xfffffa80
   1dac4:	push	{r4, sl, fp, lr}
   1dac8:	add	fp, sp, #8
   1dacc:	mov	r1, #0
   1dad0:	mov	r2, #1
   1dad4:	mov	r3, #1
   1dad8:	mov	r4, r0
   1dadc:	bl	234e4 <flatcc_verify_field@@Base>
   1dae0:	cmp	r0, #0
   1dae4:	bne	1db20 <main@@Base+0x914>
   1dae8:	mov	r0, r4
   1daec:	mov	r1, #1
   1daf0:	mov	r2, #1
   1daf4:	mov	r3, #1
   1daf8:	bl	234e4 <flatcc_verify_field@@Base>
   1dafc:	cmp	r0, #0
   1db00:	popne	{r4, sl, fp, pc}
   1db04:	mov	r0, r4
   1db08:	mov	r1, #2
   1db0c:	mov	r2, #1
   1db10:	mov	r3, #1
   1db14:	bl	234e4 <flatcc_verify_field@@Base>
   1db18:	cmp	r0, #0
   1db1c:	beq	1db24 <main@@Base+0x918>
   1db20:	pop	{r4, sl, fp, pc}
   1db24:	mov	r0, r4
   1db28:	mov	r1, #3
   1db2c:	mov	r2, #1
   1db30:	mov	r3, #1
   1db34:	pop	{r4, sl, fp, lr}
   1db38:	b	234e4 <flatcc_verify_field@@Base>
   1db3c:	mov	r0, #0
   1db40:	bx	lr
   1db44:	push	{r4, sl, fp, lr}
   1db48:	add	fp, sp, #8
   1db4c:	ldr	r3, [pc, #88]	; 1dbac <main@@Base+0x9a0>
   1db50:	mov	r1, #0
   1db54:	mov	r2, #0
   1db58:	mov	r4, r0
   1db5c:	add	r3, pc, r3
   1db60:	bl	238e8 <flatcc_verify_table_field@@Base>
   1db64:	cmp	r0, #0
   1db68:	popne	{r4, sl, fp, pc}
   1db6c:	ldr	r3, [pc, #60]	; 1dbb0 <main@@Base+0x9a4>
   1db70:	mov	r0, r4
   1db74:	mov	r1, #1
   1db78:	mov	r2, #0
   1db7c:	add	r3, pc, r3
   1db80:	bl	238e8 <flatcc_verify_table_field@@Base>
   1db84:	cmp	r0, #0
   1db88:	beq	1db90 <main@@Base+0x984>
   1db8c:	pop	{r4, sl, fp, pc}
   1db90:	ldr	r3, [pc, #28]	; 1dbb4 <main@@Base+0x9a8>
   1db94:	mov	r0, r4
   1db98:	mov	r1, #3
   1db9c:	mov	r2, #0
   1dba0:	add	r3, pc, r3
   1dba4:	pop	{r4, sl, fp, lr}
   1dba8:	b	249d0 <flatcc_verify_union_vector_field@@Base>
   1dbac:	andeq	r0, r0, r4, asr r0
   1dbb0:	andeq	r0, r0, r8, lsr #1
   1dbb4:			; <UNDEFINED> instruction: 0xfffffdf4
   1dbb8:	push	{r4, sl, fp, lr}
   1dbbc:	add	fp, sp, #8
   1dbc0:	ldr	r3, [pc, #88]	; 1dc20 <main@@Base+0xa14>
   1dbc4:	mov	r1, #0
   1dbc8:	mov	r2, #0
   1dbcc:	mov	r4, r0
   1dbd0:	add	r3, pc, r3
   1dbd4:	bl	238e8 <flatcc_verify_table_field@@Base>
   1dbd8:	cmp	r0, #0
   1dbdc:	popne	{r4, sl, fp, pc}
   1dbe0:	ldr	r3, [pc, #60]	; 1dc24 <main@@Base+0xa18>
   1dbe4:	mov	r0, r4
   1dbe8:	mov	r1, #1
   1dbec:	mov	r2, #0
   1dbf0:	add	r3, pc, r3
   1dbf4:	bl	238e8 <flatcc_verify_table_field@@Base>
   1dbf8:	cmp	r0, #0
   1dbfc:	beq	1dc04 <main@@Base+0x9f8>
   1dc00:	pop	{r4, sl, fp, pc}
   1dc04:	ldr	r3, [pc, #28]	; 1dc28 <main@@Base+0xa1c>
   1dc08:	mov	r0, r4
   1dc0c:	mov	r1, #2
   1dc10:	mov	r2, #0
   1dc14:	add	r3, pc, r3
   1dc18:	pop	{r4, sl, fp, lr}
   1dc1c:	b	238e8 <flatcc_verify_table_field@@Base>
   1dc20:	andeq	r0, r0, r0, lsl r1
   1dc24:	andeq	r0, r0, r8, ror #3
   1dc28:	andeq	r0, r0, r0, lsl #4
   1dc2c:	push	{r4, sl, fp, lr}
   1dc30:	add	fp, sp, #8
   1dc34:	ldr	r3, [pc, #152]	; 1dcd4 <main@@Base+0xac8>
   1dc38:	mov	r1, #1
   1dc3c:	mov	r2, #0
   1dc40:	mov	r4, r0
   1dc44:	add	r3, pc, r3
   1dc48:	bl	2486c <flatcc_verify_union_field@@Base>
   1dc4c:	cmp	r0, #0
   1dc50:	bne	1dcb4 <main@@Base+0xaa8>
   1dc54:	ldr	r3, [pc, #124]	; 1dcd8 <main@@Base+0xacc>
   1dc58:	mov	r0, r4
   1dc5c:	mov	r1, #3
   1dc60:	mov	r2, #0
   1dc64:	add	r3, pc, r3
   1dc68:	bl	2486c <flatcc_verify_union_field@@Base>
   1dc6c:	cmp	r0, #0
   1dc70:	bne	1dcb4 <main@@Base+0xaa8>
   1dc74:	ldr	r3, [pc, #96]	; 1dcdc <main@@Base+0xad0>
   1dc78:	mov	r0, r4
   1dc7c:	mov	r1, #5
   1dc80:	mov	r2, #0
   1dc84:	add	r3, pc, r3
   1dc88:	bl	2486c <flatcc_verify_union_field@@Base>
   1dc8c:	cmp	r0, #0
   1dc90:	popne	{r4, sl, fp, pc}
   1dc94:	ldr	r3, [pc, #68]	; 1dce0 <main@@Base+0xad4>
   1dc98:	mov	r0, r4
   1dc9c:	mov	r1, #7
   1dca0:	mov	r2, #0
   1dca4:	add	r3, pc, r3
   1dca8:	bl	2486c <flatcc_verify_union_field@@Base>
   1dcac:	cmp	r0, #0
   1dcb0:	beq	1dcb8 <main@@Base+0xaac>
   1dcb4:	pop	{r4, sl, fp, pc}
   1dcb8:	ldr	r3, [pc, #36]	; 1dce4 <main@@Base+0xad8>
   1dcbc:	mov	r0, r4
   1dcc0:	mov	r1, #9
   1dcc4:	mov	r2, #0
   1dcc8:	add	r3, pc, r3
   1dccc:	pop	{r4, sl, fp, lr}
   1dcd0:	b	249d0 <flatcc_verify_union_vector_field@@Base>
   1dcd4:	andeq	r0, r0, ip, lsl #4
   1dcd8:	andeq	r0, r0, ip, ror #3
   1dcdc:	andeq	r0, r0, ip, asr #3
   1dce0:	andeq	r0, r0, ip, lsr #3
   1dce4:	andeq	r0, r0, r8, lsl #3
   1dce8:	push	{r4, sl, fp, lr}
   1dcec:	add	fp, sp, #8
   1dcf0:	mov	r1, #0
   1dcf4:	mov	r2, #0
   1dcf8:	mov	r4, r0
   1dcfc:	bl	23568 <flatcc_verify_string_field@@Base>
   1dd00:	cmp	r0, #0
   1dd04:	bne	1ddc4 <main@@Base+0xbb8>
   1dd08:	mov	r0, r4
   1dd0c:	mov	r1, #1
   1dd10:	mov	r2, #4
   1dd14:	mov	r3, #4
   1dd18:	bl	234e4 <flatcc_verify_field@@Base>
   1dd1c:	cmp	r0, #0
   1dd20:	bne	1ddc4 <main@@Base+0xbb8>
   1dd24:	mov	r0, r4
   1dd28:	mov	r1, #2
   1dd2c:	mov	r2, #0
   1dd30:	bl	23568 <flatcc_verify_string_field@@Base>
   1dd34:	cmp	r0, #0
   1dd38:	bne	1ddc4 <main@@Base+0xbb8>
   1dd3c:	mov	r0, r4
   1dd40:	mov	r1, #3
   1dd44:	mov	r2, #8
   1dd48:	mov	r3, #8
   1dd4c:	bl	234e4 <flatcc_verify_field@@Base>
   1dd50:	cmp	r0, #0
   1dd54:	bne	1ddc4 <main@@Base+0xbb8>
   1dd58:	mov	r0, r4
   1dd5c:	mov	r1, #4
   1dd60:	mov	r2, #0
   1dd64:	bl	23568 <flatcc_verify_string_field@@Base>
   1dd68:	cmp	r0, #0
   1dd6c:	bne	1ddc4 <main@@Base+0xbb8>
   1dd70:	mov	r0, r4
   1dd74:	mov	r1, #5
   1dd78:	mov	r2, #8
   1dd7c:	mov	r3, #8
   1dd80:	bl	234e4 <flatcc_verify_field@@Base>
   1dd84:	cmp	r0, #0
   1dd88:	bne	1ddc4 <main@@Base+0xbb8>
   1dd8c:	mov	r0, r4
   1dd90:	mov	r1, #6
   1dd94:	mov	r2, #4
   1dd98:	mov	r3, #4
   1dd9c:	bl	234e4 <flatcc_verify_field@@Base>
   1dda0:	cmp	r0, #0
   1dda4:	popne	{r4, sl, fp, pc}
   1dda8:	mov	r0, r4
   1ddac:	mov	r1, #7
   1ddb0:	mov	r2, #8
   1ddb4:	mov	r3, #8
   1ddb8:	bl	234e4 <flatcc_verify_field@@Base>
   1ddbc:	cmp	r0, #0
   1ddc0:	beq	1ddc8 <main@@Base+0xbbc>
   1ddc4:	pop	{r4, sl, fp, pc}
   1ddc8:	mov	r0, r4
   1ddcc:	mov	r1, #8
   1ddd0:	mov	r2, #4
   1ddd4:	mov	r3, #4
   1ddd8:	pop	{r4, sl, fp, lr}
   1dddc:	b	234e4 <flatcc_verify_field@@Base>
   1dde0:	push	{r4, sl, fp, lr}
   1dde4:	add	fp, sp, #8
   1dde8:	mov	r1, #0
   1ddec:	mov	r2, #8
   1ddf0:	mov	r3, #8
   1ddf4:	mov	r4, r0
   1ddf8:	bl	234e4 <flatcc_verify_field@@Base>
   1ddfc:	cmp	r0, #0
   1de00:	popne	{r4, sl, fp, pc}
   1de04:	mov	r0, r4
   1de08:	mov	r1, #1
   1de0c:	mov	r2, #4
   1de10:	mov	r3, #4
   1de14:	pop	{r4, sl, fp, lr}
   1de18:	b	234e4 <flatcc_verify_field@@Base>
   1de1c:	push	{r4, sl, fp, lr}
   1de20:	add	fp, sp, #8
   1de24:	mov	r1, #0
   1de28:	mov	r2, #8
   1de2c:	mov	r3, #8
   1de30:	mov	r4, r0
   1de34:	bl	234e4 <flatcc_verify_field@@Base>
   1de38:	cmp	r0, #0
   1de3c:	popne	{r4, sl, fp, pc}
   1de40:	mov	r0, r4
   1de44:	mov	r1, #1
   1de48:	mov	r2, #4
   1de4c:	mov	r3, #4
   1de50:	pop	{r4, sl, fp, lr}
   1de54:	b	234e4 <flatcc_verify_field@@Base>
   1de58:	ldrb	r2, [r0, #12]
   1de5c:	sub	r1, r2, #2
   1de60:	cmp	r1, #9
   1de64:	bhi	1dea8 <main@@Base+0xc9c>
   1de68:	add	r2, pc, #4
   1de6c:	ldr	r1, [r2, r1, lsl #2]
   1de70:	add	pc, r2, r1
   1de74:	andeq	r0, r0, r8, asr #32
   1de78:	andeq	r0, r0, r0, asr #32
   1de7c:	andeq	r0, r0, r0, asr #32
   1de80:	andeq	r0, r0, r0, asr #32
   1de84:	andeq	r0, r0, r0, asr #32
   1de88:	andeq	r0, r0, r0, asr #32
   1de8c:	andeq	r0, r0, r4, asr r0
   1de90:	andeq	r0, r0, r8, lsr #32
   1de94:	andeq	r0, r0, r8, lsr #32
   1de98:	andeq	r0, r0, ip, lsr r0
   1de9c:	mov	r1, #4
   1dea0:	mov	r2, #4
   1dea4:	b	23e1c <flatcc_verify_union_struct@@Base>
   1dea8:	cmp	r2, #255	; 0xff
   1deac:	bne	1deb4 <main@@Base+0xca8>
   1deb0:	b	23e74 <flatcc_verify_union_string@@Base>
   1deb4:	mov	r0, #0
   1deb8:	bx	lr
   1debc:	ldr	r1, [pc, #16]	; 1ded4 <main@@Base+0xcc8>
   1dec0:	add	r1, pc, r1
   1dec4:	b	23d34 <flatcc_verify_union_table@@Base>
   1dec8:	mov	r1, #2
   1decc:	mov	r2, #2
   1ded0:	b	23e1c <flatcc_verify_union_struct@@Base>
   1ded4:	andeq	r0, r0, r0, lsl r0
   1ded8:	mov	r1, #0
   1dedc:	mov	r2, #4
   1dee0:	mov	r3, #4
   1dee4:	b	234e4 <flatcc_verify_field@@Base>
   1dee8:	mov	r1, #0
   1deec:	mov	r2, #0
   1def0:	mov	r3, #1
   1def4:	b	234e4 <flatcc_verify_field@@Base>
   1def8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1defc:	add	fp, sp, #28
   1df00:	sub	sp, sp, #12
   1df04:	cmp	r2, r1, lsl #1
   1df08:	bcs	1df14 <main@@Base+0xd08>
   1df0c:	sub	sp, fp, #28
   1df10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df14:	mov	r9, r2
   1df18:	mov	sl, r0
   1df1c:	lsl	r4, r1, #1
   1df20:	str	r0, [sp]
   1df24:	cmp	r4, r9
   1df28:	bcs	1e004 <main@@Base+0xdf8>
   1df2c:	cmp	sl, #0
   1df30:	ldrne	r8, [sl, #-4]
   1df34:	cmpne	r8, r4
   1df38:	bls	1e120 <main@@Base+0xf14>
   1df3c:	mov	r0, sl
   1df40:	ldr	r2, [r0, r4, lsl #2]!
   1df44:	adds	r0, r0, r2
   1df48:	beq	1e14c <main@@Base+0xf40>
   1df4c:	ldr	r2, [r0]
   1df50:	mov	r3, r0
   1df54:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1df58:	cmp	r2, #12
   1df5c:	bcc	1e140 <main@@Base+0xf34>
   1df60:	ldrh	ip, [r3, #10]
   1df64:	cmp	ip, #0
   1df68:	beq	1e140 <main@@Base+0xf34>
   1df6c:	orr	r7, r4, #1
   1df70:	cmp	r8, r7
   1df74:	bls	1e120 <main@@Base+0xf14>
   1df78:	mov	r2, sl
   1df7c:	ldr	r3, [r2, r7, lsl #2]!
   1df80:	adds	r3, r2, r3
   1df84:	beq	1e14c <main@@Base+0xf40>
   1df88:	ldr	r6, [r3]
   1df8c:	mov	r2, r3
   1df90:	str	r1, [sp, #8]
   1df94:	ldrh	r6, [r2, -r6]!	; <UNPREDICTABLE>
   1df98:	cmp	r6, #12
   1df9c:	bcc	1e140 <main@@Base+0xf34>
   1dfa0:	ldrh	r2, [r2, #10]
   1dfa4:	cmp	r2, #0
   1dfa8:	beq	1e140 <main@@Base+0xf34>
   1dfac:	ldr	r1, [r0, ip]!
   1dfb0:	mov	r5, r9
   1dfb4:	add	r0, r0, r1
   1dfb8:	ldr	r1, [r3, r2]!
   1dfbc:	add	r0, r0, #4
   1dfc0:	ldr	r6, [r0, #-4]
   1dfc4:	ldr	r9, [r3, r1]!
   1dfc8:	cmp	r6, r9
   1dfcc:	mov	r2, r9
   1dfd0:	add	r1, r3, #4
   1dfd4:	movcc	r2, r6
   1dfd8:	bl	12eec <strncmp@plt>
   1dfdc:	cmp	r0, #0
   1dfe0:	mov	r0, r7
   1dfe4:	ldr	r1, [sp, #8]
   1dfe8:	movne	r0, r4
   1dfec:	movlt	r0, r7
   1dff0:	movne	r4, r0
   1dff4:	cmp	r6, r9
   1dff8:	mov	r9, r5
   1dffc:	movcc	r4, r0
   1e000:	b	1e010 <main@@Base+0xe04>
   1e004:	cmp	sl, #0
   1e008:	beq	1e120 <main@@Base+0xf14>
   1e00c:	ldr	r8, [sl, #-4]
   1e010:	mov	r6, r4
   1e014:	cmp	r8, r1
   1e018:	bls	1e120 <main@@Base+0xf14>
   1e01c:	mov	r4, sl
   1e020:	ldr	r5, [r4, r1, lsl #2]!
   1e024:	adds	r0, r4, r5
   1e028:	beq	1e14c <main@@Base+0xf40>
   1e02c:	ldr	r2, [r0]
   1e030:	mov	r3, r0
   1e034:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1e038:	cmp	r2, #12
   1e03c:	bcc	1e140 <main@@Base+0xf34>
   1e040:	ldrh	ip, [r3, #10]
   1e044:	cmp	ip, #0
   1e048:	beq	1e140 <main@@Base+0xf34>
   1e04c:	cmp	r8, r6
   1e050:	bls	1e120 <main@@Base+0xf14>
   1e054:	mov	r7, sl
   1e058:	ldr	r8, [r7, r6, lsl #2]!
   1e05c:	adds	r3, r7, r8
   1e060:	beq	1e14c <main@@Base+0xf40>
   1e064:	stmib	sp, {r5, r6}
   1e068:	mov	r2, r3
   1e06c:	ldr	r5, [r3]
   1e070:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
   1e074:	cmp	r5, #12
   1e078:	bcc	1e140 <main@@Base+0xf34>
   1e07c:	ldrh	r2, [r2, #10]
   1e080:	cmp	r2, #0
   1e084:	beq	1e140 <main@@Base+0xf34>
   1e088:	mov	r6, r1
   1e08c:	ldr	r1, [r0, ip]!
   1e090:	add	r0, r0, r1
   1e094:	ldr	r1, [r3, r2]!
   1e098:	add	r0, r0, #4
   1e09c:	ldr	sl, [r0, #-4]
   1e0a0:	ldr	r5, [r3, r1]!
   1e0a4:	cmp	sl, r5
   1e0a8:	mov	r2, r5
   1e0ac:	add	r1, r3, #4
   1e0b0:	movcc	r2, sl
   1e0b4:	bl	12eec <strncmp@plt>
   1e0b8:	cmp	r0, #1
   1e0bc:	mov	r1, #0
   1e0c0:	mov	r2, #0
   1e0c4:	movwlt	r1, #1
   1e0c8:	cmp	r0, #0
   1e0cc:	movwne	r0, #1
   1e0d0:	cmp	sl, r5
   1e0d4:	ldr	sl, [sp]
   1e0d8:	movwcc	r2, #1
   1e0dc:	orr	r0, r2, r0
   1e0e0:	cmp	r0, #1
   1e0e4:	bne	1df0c <main@@Base+0xd00>
   1e0e8:	cmp	r1, #0
   1e0ec:	beq	1df0c <main@@Base+0xd00>
   1e0f0:	ldr	r2, [sp, #8]
   1e0f4:	sub	r0, r6, r2
   1e0f8:	cmp	r9, r2, lsl #1
   1e0fc:	sub	r1, r8, r0, lsl #2
   1e100:	str	r1, [r4]
   1e104:	ldr	r1, [sp, #4]
   1e108:	lsl	r4, r2, #1
   1e10c:	add	r0, r1, r0, lsl #2
   1e110:	mov	r1, r2
   1e114:	str	r0, [r7]
   1e118:	bcs	1df24 <main@@Base+0xd18>
   1e11c:	b	1df0c <main@@Base+0xd00>
   1e120:	ldr	r0, [pc, #84]	; 1e17c <main@@Base+0xf70>
   1e124:	ldr	r1, [pc, #84]	; 1e180 <main@@Base+0xf74>
   1e128:	ldr	r3, [pc, #84]	; 1e184 <main@@Base+0xf78>
   1e12c:	movw	r2, #693	; 0x2b5
   1e130:	add	r0, pc, r0
   1e134:	add	r1, pc, r1
   1e138:	add	r3, pc, r3
   1e13c:	bl	12f04 <__assert_fail@plt>
   1e140:	ldr	r0, [pc, #48]	; 1e178 <main@@Base+0xf6c>
   1e144:	add	r0, pc, r0
   1e148:	b	1e154 <main@@Base+0xf48>
   1e14c:	ldr	r0, [pc, #24]	; 1e16c <main@@Base+0xf60>
   1e150:	add	r0, pc, r0
   1e154:	ldr	r1, [pc, #20]	; 1e170 <main@@Base+0xf64>
   1e158:	ldr	r3, [pc, #20]	; 1e174 <main@@Base+0xf68>
   1e15c:	movw	r2, #699	; 0x2bb
   1e160:	add	r1, pc, r1
   1e164:	add	r3, pc, r3
   1e168:	bl	12f04 <__assert_fail@plt>
   1e16c:	andeq	r7, r0, r7, ror r9
   1e170:	andeq	r7, r0, sp, lsl #19
   1e174:	andeq	r7, r0, r7, lsl #29
   1e178:	strdeq	r7, [r0], -r8
   1e17c:	andeq	r7, r0, r6, lsl #31
   1e180:			; <UNDEFINED> instruction: 0x000079b9
   1e184:	ldrdeq	r8, [r0], -ip

0001e188 <flatcc_builder_default_alloc@@Base>:
   1e188:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e18c:	add	fp, sp, #24
   1e190:	mov	r4, r1
   1e194:	cmp	r2, #0
   1e198:	beq	1e1e4 <flatcc_builder_default_alloc@@Base+0x5c>
   1e19c:	ldr	r0, [fp, #8]
   1e1a0:	mov	r8, r3
   1e1a4:	sub	r1, r0, #1
   1e1a8:	cmp	r1, #6
   1e1ac:	bhi	1e210 <flatcc_builder_default_alloc@@Base+0x88>
   1e1b0:	add	r3, pc, #8
   1e1b4:	mov	r0, #256	; 0x100
   1e1b8:	ldr	r1, [r3, r1, lsl #2]
   1e1bc:	add	pc, r3, r1
   1e1c0:	andeq	r0, r0, r4, rrx
   1e1c4:	andeq	r0, r0, r0, asr r0
   1e1c8:	andeq	r0, r0, r0, asr r0
   1e1cc:	andeq	r0, r0, ip, lsl r0
   1e1d0:	andeq	r0, r0, r8, asr r0
   1e1d4:	andeq	r0, r0, r0, asr r0
   1e1d8:	andeq	r0, r0, r0, rrx
   1e1dc:	mov	r0, #288	; 0x120
   1e1e0:	b	1e224 <flatcc_builder_default_alloc@@Base+0x9c>
   1e1e4:	ldr	r0, [r4]
   1e1e8:	cmp	r0, #0
   1e1ec:	moveq	r6, #0
   1e1f0:	moveq	r0, r6
   1e1f4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e1f8:	bl	12e20 <free@plt>
   1e1fc:	mov	r6, #0
   1e200:	mov	r0, r6
   1e204:	str	r6, [r4]
   1e208:	str	r6, [r4, #4]
   1e20c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e210:	mov	r0, #32
   1e214:	b	1e224 <flatcc_builder_default_alloc@@Base+0x9c>
   1e218:	mov	r0, r2
   1e21c:	b	1e224 <flatcc_builder_default_alloc@@Base+0x9c>
   1e220:	mov	r0, #64	; 0x40
   1e224:	mov	r7, r0
   1e228:	lsl	r0, r0, #1
   1e22c:	cmp	r7, r2
   1e230:	bcc	1e224 <flatcc_builder_default_alloc@@Base+0x9c>
   1e234:	ldr	r0, [r4, #4]
   1e238:	mov	r6, #0
   1e23c:	cmp	r0, r2
   1e240:	lsrcs	r0, r0, #1
   1e244:	cmpcs	r0, r7
   1e248:	bcs	1e280 <flatcc_builder_default_alloc@@Base+0xf8>
   1e24c:	ldr	r0, [r4]
   1e250:	mov	r1, r7
   1e254:	bl	12e44 <realloc@plt>
   1e258:	cmp	r0, #0
   1e25c:	mvneq	r6, #0
   1e260:	moveq	r0, r6
   1e264:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e268:	cmp	r8, #0
   1e26c:	mov	r5, r0
   1e270:	ldrne	r1, [r4, #4]
   1e274:	cmpne	r7, r1
   1e278:	bhi	1e288 <flatcc_builder_default_alloc@@Base+0x100>
   1e27c:	stm	r4, {r5, r7}
   1e280:	mov	r0, r6
   1e284:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e288:	add	r0, r5, r1
   1e28c:	sub	r2, r7, r1
   1e290:	mov	r1, #0
   1e294:	bl	12ebc <memset@plt>
   1e298:	b	1e27c <flatcc_builder_default_alloc@@Base+0xf4>

0001e29c <flatcc_builder_flush_vtable_cache@@Base>:
   1e29c:	push	{r4, r5, fp, lr}
   1e2a0:	add	fp, sp, #8
   1e2a4:	mov	r4, r0
   1e2a8:	ldr	r0, [r0, #116]	; 0x74
   1e2ac:	cmp	r0, #0
   1e2b0:	popeq	{r4, r5, fp, pc}
   1e2b4:	ldr	r0, [r4, #92]	; 0x5c
   1e2b8:	ldr	r2, [r4, #96]	; 0x60
   1e2bc:	mov	r1, #0
   1e2c0:	mov	r5, #0
   1e2c4:	bl	12ebc <memset@plt>
   1e2c8:	mov	r0, #16
   1e2cc:	str	r5, [r4, #120]	; 0x78
   1e2d0:	str	r0, [r4, #124]	; 0x7c
   1e2d4:	pop	{r4, r5, fp, pc}

0001e2d8 <flatcc_builder_custom_init@@Base>:
   1e2d8:	push	{r4, r5, r6, r7, fp, lr}
   1e2dc:	add	fp, sp, #16
   1e2e0:	mov	r6, r2
   1e2e4:	mov	r7, r1
   1e2e8:	mov	r1, #0
   1e2ec:	mov	r2, #232	; 0xe8
   1e2f0:	mov	r5, r3
   1e2f4:	mov	r4, r0
   1e2f8:	bl	12ebc <memset@plt>
   1e2fc:	ldr	r0, [fp, #8]
   1e300:	cmp	r7, #0
   1e304:	bne	1e31c <flatcc_builder_custom_init@@Base+0x44>
   1e308:	mov	r1, #1
   1e30c:	add	r6, r4, #188	; 0xbc
   1e310:	str	r1, [r4, #184]	; 0xb8
   1e314:	ldr	r7, [pc, #40]	; 1e344 <flatcc_builder_custom_init@@Base+0x6c>
   1e318:	ldr	r7, [pc, r7]
   1e31c:	ldr	r1, [pc, #36]	; 1e348 <flatcc_builder_custom_init@@Base+0x70>
   1e320:	cmp	r5, #0
   1e324:	ldr	r1, [pc, r1]
   1e328:	str	r6, [r4, #36]	; 0x24
   1e32c:	str	r0, [r4, #40]	; 0x28
   1e330:	mov	r0, #0
   1e334:	str	r7, [r4, #44]	; 0x2c
   1e338:	movne	r1, r5
   1e33c:	str	r1, [r4, #48]	; 0x30
   1e340:	pop	{r4, r5, r6, r7, fp, pc}
   1e344:	andeq	ip, r1, r4, asr sp
   1e348:	andeq	ip, r1, r4, asr #26

0001e34c <flatcc_builder_init@@Base>:
   1e34c:	push	{r4, r5, fp, lr}
   1e350:	add	fp, sp, #8
   1e354:	mov	r1, #0
   1e358:	mov	r2, #232	; 0xe8
   1e35c:	mov	r4, r0
   1e360:	mov	r5, #0
   1e364:	bl	12ebc <memset@plt>
   1e368:	mov	r0, #1
   1e36c:	str	r0, [r4, #184]	; 0xb8
   1e370:	add	r0, r4, #188	; 0xbc
   1e374:	ldr	r1, [pc, #32]	; 1e39c <flatcc_builder_init@@Base+0x50>
   1e378:	ldr	r1, [pc, r1]
   1e37c:	ldr	r2, [pc, #28]	; 1e3a0 <flatcc_builder_init@@Base+0x54>
   1e380:	ldr	r2, [pc, r2]
   1e384:	str	r0, [r4, #36]	; 0x24
   1e388:	mov	r0, #0
   1e38c:	str	r5, [r4, #40]	; 0x28
   1e390:	str	r2, [r4, #44]	; 0x2c
   1e394:	str	r1, [r4, #48]	; 0x30
   1e398:	pop	{r4, r5, fp, pc}
   1e39c:	strdeq	ip, [r1], -r0
   1e3a0:	andeq	ip, r1, ip, ror #25

0001e3a4 <flatcc_builder_custom_reset@@Base>:
   1e3a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e3a8:	add	fp, sp, #24
   1e3ac:	sub	sp, sp, #8
   1e3b0:	mov	r9, r2
   1e3b4:	mov	r8, r1
   1e3b8:	mov	r4, r0
   1e3bc:	add	r7, r0, #52	; 0x34
   1e3c0:	mov	r5, #0
   1e3c4:	ldr	r0, [r7]
   1e3c8:	cmp	r0, #0
   1e3cc:	beq	1e414 <flatcc_builder_custom_reset@@Base+0x70>
   1e3d0:	cmp	r9, #0
   1e3d4:	cmpne	r5, #5
   1e3d8:	beq	1e404 <flatcc_builder_custom_reset@@Base+0x60>
   1e3dc:	ldr	r0, [r4, #40]	; 0x28
   1e3e0:	ldr	r6, [r4, #48]	; 0x30
   1e3e4:	mov	r1, r7
   1e3e8:	mov	r2, #1
   1e3ec:	mov	r3, #1
   1e3f0:	str	r5, [sp]
   1e3f4:	blx	r6
   1e3f8:	cmp	r0, #0
   1e3fc:	bne	1e4b4 <flatcc_builder_custom_reset@@Base+0x110>
   1e400:	ldr	r0, [r7]
   1e404:	ldr	r2, [r7, #4]
   1e408:	mov	r1, #0
   1e40c:	bl	12ebc <memset@plt>
   1e410:	b	1e420 <flatcc_builder_custom_reset@@Base+0x7c>
   1e414:	ldr	r0, [r7, #4]
   1e418:	cmp	r0, #0
   1e41c:	bne	1e4c4 <flatcc_builder_custom_reset@@Base+0x120>
   1e420:	add	r5, r5, #1
   1e424:	add	r7, r7, #8
   1e428:	cmp	r5, #8
   1e42c:	bcc	1e3c4 <flatcc_builder_custom_reset@@Base+0x20>
   1e430:	mov	r0, #0
   1e434:	vmov.i32	q8, #0	; 0x00000000
   1e438:	mov	r5, #0
   1e43c:	str	r0, [r4, #120]	; 0x78
   1e440:	ldr	r1, [r4, #124]	; 0x7c
   1e444:	cmp	r1, #0
   1e448:	movne	r1, #16
   1e44c:	strne	r1, [r4, #124]	; 0x7c
   1e450:	add	r1, r4, #148	; 0x94
   1e454:	strh	r0, [r4, #128]	; 0x80
   1e458:	str	r0, [r4, #136]	; 0x88
   1e45c:	str	r0, [r4, #140]	; 0x8c
   1e460:	str	r0, [r4, #32]
   1e464:	cmp	r8, #0
   1e468:	vst1.32	{d16-d17}, [r1]
   1e46c:	ldr	r2, [r4, #60]	; 0x3c
   1e470:	ldr	r1, [r4, #52]	; 0x34
   1e474:	ldr	r3, [r4, #76]	; 0x4c
   1e478:	str	r2, [r4, #16]
   1e47c:	str	r0, [r4, #20]
   1e480:	str	r0, [r4, #24]
   1e484:	movne	r0, #0
   1e488:	str	r3, [r4]
   1e48c:	str	r1, [r4, #4]
   1e490:	strne	r0, [r4, #172]	; 0xac
   1e494:	strne	r0, [r4, #176]	; 0xb0
   1e498:	strne	r0, [r4, #180]	; 0xb4
   1e49c:	ldr	r0, [r4, #184]	; 0xb8
   1e4a0:	cmp	r0, #0
   1e4a4:	beq	1e4b8 <flatcc_builder_custom_reset@@Base+0x114>
   1e4a8:	add	r0, r4, #188	; 0xbc
   1e4ac:	bl	22f88 <flatcc_emitter_reset@@Base>
   1e4b0:	b	1e4b8 <flatcc_builder_custom_reset@@Base+0x114>
   1e4b4:	mvn	r5, #0
   1e4b8:	mov	r0, r5
   1e4bc:	sub	sp, fp, #24
   1e4c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e4c4:	ldr	r0, [pc, #24]	; 1e4e4 <flatcc_builder_custom_reset@@Base+0x140>
   1e4c8:	ldr	r1, [pc, #24]	; 1e4e8 <flatcc_builder_custom_reset@@Base+0x144>
   1e4cc:	ldr	r3, [pc, #24]	; 1e4ec <flatcc_builder_custom_reset@@Base+0x148>
   1e4d0:	movw	r2, #434	; 0x1b2
   1e4d4:	add	r0, pc, r0
   1e4d8:	add	r1, pc, r1
   1e4dc:	add	r3, pc, r3
   1e4e0:	bl	12f04 <__assert_fail@plt>
   1e4e4:	andeq	sl, r0, r4, ror #7
   1e4e8:	strdeq	sl, [r0], -r2
   1e4ec:	andeq	sl, r0, fp, asr #8

0001e4f0 <flatcc_builder_reset@@Base>:
   1e4f0:	push	{r4, sl, fp, lr}
   1e4f4:	add	fp, sp, #8
   1e4f8:	mov	r4, r0
   1e4fc:	ldr	r0, [r0, #52]	; 0x34
   1e500:	ldr	r2, [r4, #56]	; 0x38
   1e504:	cmp	r0, #0
   1e508:	beq	1e518 <flatcc_builder_reset@@Base+0x28>
   1e50c:	mov	r1, #0
   1e510:	bl	12ebc <memset@plt>
   1e514:	b	1e520 <flatcc_builder_reset@@Base+0x30>
   1e518:	cmp	r2, #0
   1e51c:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e520:	ldr	r0, [r4, #60]	; 0x3c
   1e524:	ldr	r2, [r4, #64]	; 0x40
   1e528:	cmp	r0, #0
   1e52c:	beq	1e53c <flatcc_builder_reset@@Base+0x4c>
   1e530:	mov	r1, #0
   1e534:	bl	12ebc <memset@plt>
   1e538:	b	1e544 <flatcc_builder_reset@@Base+0x54>
   1e53c:	cmp	r2, #0
   1e540:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e544:	ldr	r0, [r4, #68]	; 0x44
   1e548:	ldr	r2, [r4, #72]	; 0x48
   1e54c:	cmp	r0, #0
   1e550:	beq	1e560 <flatcc_builder_reset@@Base+0x70>
   1e554:	mov	r1, #0
   1e558:	bl	12ebc <memset@plt>
   1e55c:	b	1e568 <flatcc_builder_reset@@Base+0x78>
   1e560:	cmp	r2, #0
   1e564:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e568:	ldr	r0, [r4, #76]	; 0x4c
   1e56c:	ldr	r2, [r4, #80]	; 0x50
   1e570:	cmp	r0, #0
   1e574:	beq	1e584 <flatcc_builder_reset@@Base+0x94>
   1e578:	mov	r1, #0
   1e57c:	bl	12ebc <memset@plt>
   1e580:	b	1e58c <flatcc_builder_reset@@Base+0x9c>
   1e584:	cmp	r2, #0
   1e588:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e58c:	ldr	r0, [r4, #84]	; 0x54
   1e590:	ldr	r2, [r4, #88]	; 0x58
   1e594:	cmp	r0, #0
   1e598:	beq	1e5a8 <flatcc_builder_reset@@Base+0xb8>
   1e59c:	mov	r1, #0
   1e5a0:	bl	12ebc <memset@plt>
   1e5a4:	b	1e5b0 <flatcc_builder_reset@@Base+0xc0>
   1e5a8:	cmp	r2, #0
   1e5ac:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e5b0:	ldr	r0, [r4, #92]	; 0x5c
   1e5b4:	ldr	r2, [r4, #96]	; 0x60
   1e5b8:	cmp	r0, #0
   1e5bc:	beq	1e5cc <flatcc_builder_reset@@Base+0xdc>
   1e5c0:	mov	r1, #0
   1e5c4:	bl	12ebc <memset@plt>
   1e5c8:	b	1e5d4 <flatcc_builder_reset@@Base+0xe4>
   1e5cc:	cmp	r2, #0
   1e5d0:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e5d4:	ldr	r0, [r4, #100]	; 0x64
   1e5d8:	ldr	r2, [r4, #104]	; 0x68
   1e5dc:	cmp	r0, #0
   1e5e0:	beq	1e5f0 <flatcc_builder_reset@@Base+0x100>
   1e5e4:	mov	r1, #0
   1e5e8:	bl	12ebc <memset@plt>
   1e5ec:	b	1e5f8 <flatcc_builder_reset@@Base+0x108>
   1e5f0:	cmp	r2, #0
   1e5f4:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e5f8:	ldr	r0, [r4, #108]	; 0x6c
   1e5fc:	ldr	r2, [r4, #112]	; 0x70
   1e600:	cmp	r0, #0
   1e604:	beq	1e614 <flatcc_builder_reset@@Base+0x124>
   1e608:	mov	r1, #0
   1e60c:	bl	12ebc <memset@plt>
   1e610:	b	1e61c <flatcc_builder_reset@@Base+0x12c>
   1e614:	cmp	r2, #0
   1e618:	bne	1e688 <flatcc_builder_reset@@Base+0x198>
   1e61c:	mov	r0, #0
   1e620:	str	r0, [r4, #120]	; 0x78
   1e624:	ldr	r1, [r4, #124]	; 0x7c
   1e628:	cmp	r1, #0
   1e62c:	movne	r1, #16
   1e630:	strne	r1, [r4, #124]	; 0x7c
   1e634:	vmov.i32	q8, #0	; 0x00000000
   1e638:	add	r1, r4, #148	; 0x94
   1e63c:	strh	r0, [r4, #128]	; 0x80
   1e640:	str	r0, [r4, #136]	; 0x88
   1e644:	str	r0, [r4, #140]	; 0x8c
   1e648:	str	r0, [r4, #32]
   1e64c:	vst1.32	{d16-d17}, [r1]
   1e650:	ldr	r1, [r4, #184]	; 0xb8
   1e654:	ldr	ip, [r4, #52]	; 0x34
   1e658:	ldr	r2, [r4, #60]	; 0x3c
   1e65c:	ldr	r3, [r4, #76]	; 0x4c
   1e660:	cmp	r1, #0
   1e664:	str	r2, [r4, #16]
   1e668:	str	r0, [r4, #20]
   1e66c:	str	r0, [r4, #24]
   1e670:	stm	r4, {r3, ip}
   1e674:	beq	1e680 <flatcc_builder_reset@@Base+0x190>
   1e678:	add	r0, r4, #188	; 0xbc
   1e67c:	bl	22f88 <flatcc_emitter_reset@@Base>
   1e680:	mov	r0, #0
   1e684:	pop	{r4, sl, fp, pc}
   1e688:	ldr	r0, [pc, #24]	; 1e6a8 <flatcc_builder_reset@@Base+0x1b8>
   1e68c:	ldr	r1, [pc, #24]	; 1e6ac <flatcc_builder_reset@@Base+0x1bc>
   1e690:	ldr	r3, [pc, #24]	; 1e6b0 <flatcc_builder_reset@@Base+0x1c0>
   1e694:	movw	r2, #434	; 0x1b2
   1e698:	add	r0, pc, r0
   1e69c:	add	r1, pc, r1
   1e6a0:	add	r3, pc, r3
   1e6a4:	bl	12f04 <__assert_fail@plt>
   1e6a8:	andeq	sl, r0, r0, lsr #4
   1e6ac:	andeq	sl, r0, lr, lsr #4
   1e6b0:	andeq	sl, r0, r7, lsl #5

0001e6b4 <flatcc_builder_clear@@Base>:
   1e6b4:	push	{r4, sl, fp, lr}
   1e6b8:	add	fp, sp, #8
   1e6bc:	sub	sp, sp, #8
   1e6c0:	mov	r4, r0
   1e6c4:	ldr	r0, [r0, #40]	; 0x28
   1e6c8:	mov	r1, #0
   1e6cc:	mov	r2, #0
   1e6d0:	mov	r3, #0
   1e6d4:	ldr	ip, [r4, #48]	; 0x30
   1e6d8:	str	r1, [sp]
   1e6dc:	add	r1, r4, #52	; 0x34
   1e6e0:	blx	ip
   1e6e4:	ldr	r0, [r4, #40]	; 0x28
   1e6e8:	ldr	ip, [r4, #48]	; 0x30
   1e6ec:	mov	r1, #1
   1e6f0:	mov	r2, #0
   1e6f4:	mov	r3, #0
   1e6f8:	str	r1, [sp]
   1e6fc:	add	r1, r4, #60	; 0x3c
   1e700:	blx	ip
   1e704:	ldr	r0, [r4, #40]	; 0x28
   1e708:	ldr	ip, [r4, #48]	; 0x30
   1e70c:	mov	r1, #2
   1e710:	mov	r2, #0
   1e714:	mov	r3, #0
   1e718:	str	r1, [sp]
   1e71c:	add	r1, r4, #68	; 0x44
   1e720:	blx	ip
   1e724:	ldr	r0, [r4, #40]	; 0x28
   1e728:	ldr	ip, [r4, #48]	; 0x30
   1e72c:	mov	r1, #3
   1e730:	mov	r2, #0
   1e734:	mov	r3, #0
   1e738:	str	r1, [sp]
   1e73c:	add	r1, r4, #76	; 0x4c
   1e740:	blx	ip
   1e744:	ldr	r0, [r4, #40]	; 0x28
   1e748:	ldr	ip, [r4, #48]	; 0x30
   1e74c:	mov	r1, #4
   1e750:	mov	r2, #0
   1e754:	mov	r3, #0
   1e758:	str	r1, [sp]
   1e75c:	add	r1, r4, #84	; 0x54
   1e760:	blx	ip
   1e764:	ldr	r0, [r4, #40]	; 0x28
   1e768:	ldr	ip, [r4, #48]	; 0x30
   1e76c:	mov	r1, #5
   1e770:	mov	r2, #0
   1e774:	mov	r3, #0
   1e778:	str	r1, [sp]
   1e77c:	add	r1, r4, #92	; 0x5c
   1e780:	blx	ip
   1e784:	ldr	r0, [r4, #40]	; 0x28
   1e788:	ldr	ip, [r4, #48]	; 0x30
   1e78c:	mov	r1, #6
   1e790:	mov	r2, #0
   1e794:	mov	r3, #0
   1e798:	str	r1, [sp]
   1e79c:	add	r1, r4, #100	; 0x64
   1e7a0:	blx	ip
   1e7a4:	ldr	r0, [r4, #40]	; 0x28
   1e7a8:	ldr	ip, [r4, #48]	; 0x30
   1e7ac:	mov	r1, #7
   1e7b0:	mov	r2, #0
   1e7b4:	mov	r3, #0
   1e7b8:	str	r1, [sp]
   1e7bc:	add	r1, r4, #108	; 0x6c
   1e7c0:	blx	ip
   1e7c4:	ldr	r0, [r4, #184]	; 0xb8
   1e7c8:	cmp	r0, #0
   1e7cc:	beq	1e7d8 <flatcc_builder_clear@@Base+0x124>
   1e7d0:	add	r0, r4, #188	; 0xbc
   1e7d4:	bl	23054 <flatcc_emitter_clear@@Base>
   1e7d8:	mov	r0, r4
   1e7dc:	mov	r1, #0
   1e7e0:	mov	r2, #232	; 0xe8
   1e7e4:	sub	sp, fp, #8
   1e7e8:	pop	{r4, sl, fp, lr}
   1e7ec:	b	12ebc <memset@plt>

0001e7f0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1e7f0:	push	{r4, r5, r6, r7, fp, lr}
   1e7f4:	add	fp, sp, #16
   1e7f8:	sub	sp, sp, #8
   1e7fc:	mov	r4, r0
   1e800:	ldr	r0, [r0, #112]	; 0x70
   1e804:	add	r1, r1, #7
   1e808:	ldr	r7, [r4, #228]	; 0xe4
   1e80c:	bic	r5, r1, #3
   1e810:	add	r6, r4, #108	; 0x6c
   1e814:	add	r2, r7, r5
   1e818:	cmp	r2, r0
   1e81c:	bls	1e844 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1e820:	ldr	r0, [r4, #40]	; 0x28
   1e824:	ldr	ip, [r4, #48]	; 0x30
   1e828:	mov	r1, #7
   1e82c:	mov	r3, #0
   1e830:	str	r1, [sp]
   1e834:	mov	r1, r6
   1e838:	blx	ip
   1e83c:	cmp	r0, #0
   1e840:	bne	1e890 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   1e844:	ldr	r0, [r6]
   1e848:	adds	r6, r0, r7
   1e84c:	beq	1e880 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   1e850:	mov	r0, r6
   1e854:	mov	r1, #0
   1e858:	mov	r2, r5
   1e85c:	bl	12ebc <memset@plt>
   1e860:	ldr	r0, [r4, #224]	; 0xe0
   1e864:	str	r0, [r6], #4
   1e868:	ldr	r0, [r4, #228]	; 0xe4
   1e86c:	add	r1, r0, #4
   1e870:	add	r0, r0, r5
   1e874:	str	r1, [r4, #224]	; 0xe0
   1e878:	str	r0, [r4, #228]	; 0xe4
   1e87c:	b	1e884 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   1e880:	mov	r6, #0
   1e884:	mov	r0, r6
   1e888:	sub	sp, fp, #16
   1e88c:	pop	{r4, r5, r6, r7, fp, pc}
   1e890:	ldr	r0, [pc, #24]	; 1e8b0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   1e894:	ldr	r1, [pc, #24]	; 1e8b4 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   1e898:	ldr	r3, [pc, #24]	; 1e8b8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   1e89c:	mov	r2, #308	; 0x134
   1e8a0:	add	r0, pc, r0
   1e8a4:	add	r1, pc, r1
   1e8a8:	add	r3, pc, r3
   1e8ac:	bl	12f04 <__assert_fail@plt>
   1e8b0:	andeq	fp, r0, r7, ror #3
   1e8b4:	andeq	sl, r0, r6, lsr #32
   1e8b8:	andeq	fp, r0, r9, lsl r0

0001e8bc <flatcc_builder_enter_user_frame@@Base>:
   1e8bc:	push	{r4, r5, r6, r7, fp, lr}
   1e8c0:	add	fp, sp, #16
   1e8c4:	sub	sp, sp, #8
   1e8c8:	mov	r4, r0
   1e8cc:	ldr	r0, [r0, #112]	; 0x70
   1e8d0:	add	r1, r1, #7
   1e8d4:	ldr	r7, [r4, #228]	; 0xe4
   1e8d8:	bic	r5, r1, #3
   1e8dc:	add	r6, r4, #108	; 0x6c
   1e8e0:	add	r2, r7, r5
   1e8e4:	cmp	r2, r0
   1e8e8:	bls	1e910 <flatcc_builder_enter_user_frame@@Base+0x54>
   1e8ec:	ldr	r0, [r4, #40]	; 0x28
   1e8f0:	ldr	ip, [r4, #48]	; 0x30
   1e8f4:	mov	r1, #7
   1e8f8:	mov	r3, #0
   1e8fc:	str	r1, [sp]
   1e900:	mov	r1, r6
   1e904:	blx	ip
   1e908:	cmp	r0, #0
   1e90c:	bne	1e958 <flatcc_builder_enter_user_frame@@Base+0x9c>
   1e910:	ldr	r0, [r6]
   1e914:	adds	r6, r0, r7
   1e918:	moveq	r0, #0
   1e91c:	subeq	sp, fp, #16
   1e920:	popeq	{r4, r5, r6, r7, fp, pc}
   1e924:	mov	r0, r6
   1e928:	mov	r1, #0
   1e92c:	mov	r2, r5
   1e930:	bl	12ebc <memset@plt>
   1e934:	ldr	r0, [r4, #224]	; 0xe0
   1e938:	str	r0, [r6]
   1e93c:	ldr	r1, [r4, #228]	; 0xe4
   1e940:	add	r0, r1, #4
   1e944:	add	r1, r1, r5
   1e948:	str	r0, [r4, #224]	; 0xe0
   1e94c:	str	r1, [r4, #228]	; 0xe4
   1e950:	sub	sp, fp, #16
   1e954:	pop	{r4, r5, r6, r7, fp, pc}
   1e958:	ldr	r0, [pc, #24]	; 1e978 <flatcc_builder_enter_user_frame@@Base+0xbc>
   1e95c:	ldr	r1, [pc, #24]	; 1e97c <flatcc_builder_enter_user_frame@@Base+0xc0>
   1e960:	ldr	r3, [pc, #24]	; 1e980 <flatcc_builder_enter_user_frame@@Base+0xc4>
   1e964:	mov	r2, #308	; 0x134
   1e968:	add	r0, pc, r0
   1e96c:	add	r1, pc, r1
   1e970:	add	r3, pc, r3
   1e974:	bl	12f04 <__assert_fail@plt>
   1e978:	andeq	fp, r0, pc, lsl r1
   1e97c:	andeq	r9, r0, lr, asr pc
   1e980:	andeq	sl, r0, r1, asr pc

0001e984 <flatcc_builder_exit_user_frame@@Base>:
   1e984:	ldr	r1, [r0, #224]	; 0xe0
   1e988:	cmp	r1, #0
   1e98c:	subne	r2, r1, #4
   1e990:	strne	r2, [r0, #228]	; 0xe4
   1e994:	ldrne	r2, [r0, #108]	; 0x6c
   1e998:	addne	r1, r2, r1
   1e99c:	ldrne	r1, [r1, #-4]
   1e9a0:	strne	r1, [r0, #224]	; 0xe0
   1e9a4:	movne	r0, r1
   1e9a8:	bxne	lr
   1e9ac:	push	{fp, lr}
   1e9b0:	mov	fp, sp
   1e9b4:	ldr	r0, [pc, #24]	; 1e9d4 <flatcc_builder_exit_user_frame@@Base+0x50>
   1e9b8:	ldr	r1, [pc, #24]	; 1e9d8 <flatcc_builder_exit_user_frame@@Base+0x54>
   1e9bc:	ldr	r3, [pc, #24]	; 1e9dc <flatcc_builder_exit_user_frame@@Base+0x58>
   1e9c0:	movw	r2, #542	; 0x21e
   1e9c4:	add	r0, pc, r0
   1e9c8:	add	r1, pc, r1
   1e9cc:	add	r3, pc, r3
   1e9d0:	bl	12f04 <__assert_fail@plt>
   1e9d4:	andeq	r9, r0, r1, lsr #31
   1e9d8:	andeq	r9, r0, r2, lsl #30
   1e9dc:			; <UNDEFINED> instruction: 0x00009fb2

0001e9e0 <flatcc_builder_exit_user_frame_at@@Base>:
   1e9e0:	push	{fp, lr}
   1e9e4:	mov	fp, sp
   1e9e8:	ldr	r2, [r0, #224]	; 0xe0
   1e9ec:	cmp	r2, r1
   1e9f0:	bcc	1ea3c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   1e9f4:	cmp	r1, #0
   1e9f8:	str	r1, [r0, #224]	; 0xe0
   1e9fc:	subne	r2, r1, #4
   1ea00:	strne	r2, [r0, #228]	; 0xe4
   1ea04:	ldrne	r2, [r0, #108]	; 0x6c
   1ea08:	addne	r1, r2, r1
   1ea0c:	ldrne	r1, [r1, #-4]
   1ea10:	strne	r1, [r0, #224]	; 0xe0
   1ea14:	movne	r0, r1
   1ea18:	popne	{fp, pc}
   1ea1c:	ldr	r0, [pc, #68]	; 1ea68 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   1ea20:	ldr	r1, [pc, #68]	; 1ea6c <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   1ea24:	ldr	r3, [pc, #68]	; 1ea70 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   1ea28:	movw	r2, #542	; 0x21e
   1ea2c:	add	r0, pc, r0
   1ea30:	add	r1, pc, r1
   1ea34:	add	r3, pc, r3
   1ea38:	bl	12f04 <__assert_fail@plt>
   1ea3c:	ldr	r0, [pc, #24]	; 1ea5c <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   1ea40:	ldr	r1, [pc, #24]	; 1ea60 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   1ea44:	ldr	r3, [pc, #24]	; 1ea64 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   1ea48:	movw	r2, #551	; 0x227
   1ea4c:	add	r0, pc, r0
   1ea50:	add	r1, pc, r1
   1ea54:	add	r3, pc, r3
   1ea58:	bl	12f04 <__assert_fail@plt>
   1ea5c:	andeq	r9, r0, ip, ror #30
   1ea60:	andeq	r9, r0, sl, ror lr
   1ea64:	andeq	r9, r0, r3, lsl #31
   1ea68:	andeq	r9, r0, r9, lsr pc
   1ea6c:	muleq	r0, sl, lr
   1ea70:	andeq	r9, r0, sl, asr #30

0001ea74 <flatcc_builder_get_current_user_frame@@Base>:
   1ea74:	ldr	r0, [r0, #224]	; 0xe0
   1ea78:	bx	lr

0001ea7c <flatcc_builder_get_user_frame_ptr@@Base>:
   1ea7c:	ldr	r0, [r0, #108]	; 0x6c
   1ea80:	add	r0, r0, r1
   1ea84:	bx	lr

0001ea88 <flatcc_builder_embed_buffer@@Base>:
   1ea88:	push	{r4, r5, r6, r7, fp, lr}
   1ea8c:	add	fp, sp, #16
   1ea90:	sub	sp, sp, #88	; 0x58
   1ea94:	mov	r4, r0
   1ea98:	ldr	r0, [fp, #8]
   1ea9c:	mov	r5, r3
   1eaa0:	mov	r7, r2
   1eaa4:	mov	r2, r1
   1eaa8:	sub	r1, fp, #18
   1eaac:	strh	r0, [fp, #-18]	; 0xffffffee
   1eab0:	mov	r0, r4
   1eab4:	ldr	r3, [r4, #152]	; 0x98
   1eab8:	cmp	r3, #0
   1eabc:	movwne	r3, #1
   1eac0:	bl	1ec14 <flatcc_builder_embed_buffer@@Base+0x18c>
   1eac4:	ldr	r1, [fp, #12]
   1eac8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1eacc:	ldr	r0, [r4, #136]	; 0x88
   1ead0:	mov	r2, #0
   1ead4:	str	r2, [sp, #8]
   1ead8:	str	r2, [sp, #12]
   1eadc:	and	r1, r1, #2
   1eae0:	sub	r3, r3, #1
   1eae4:	add	r1, r5, r1, lsl #1
   1eae8:	sub	r1, r0, r1
   1eaec:	and	r3, r1, r3
   1eaf0:	add	r1, r3, r5
   1eaf4:	str	r1, [fp, #-24]	; 0xffffffe8
   1eaf8:	ldr	r1, [r4, #152]	; 0x98
   1eafc:	cmp	r1, #0
   1eb00:	mov	r1, #0
   1eb04:	beq	1eb24 <flatcc_builder_embed_buffer@@Base+0x9c>
   1eb08:	sub	r1, fp, #24
   1eb0c:	mov	r2, #1
   1eb10:	str	r1, [sp, #16]
   1eb14:	mov	r1, #4
   1eb18:	str	r1, [sp, #8]
   1eb1c:	str	r1, [sp, #20]
   1eb20:	str	r2, [sp, #12]
   1eb24:	cmp	r5, #0
   1eb28:	beq	1eb4c <flatcc_builder_embed_buffer@@Base+0xc4>
   1eb2c:	add	r6, sp, #8
   1eb30:	add	r1, r1, r5
   1eb34:	add	r6, r6, r2, lsl #3
   1eb38:	add	r2, r2, #1
   1eb3c:	str	r1, [sp, #8]
   1eb40:	str	r7, [r6, #8]
   1eb44:	str	r5, [r6, #12]
   1eb48:	str	r2, [sp, #12]
   1eb4c:	cmp	r3, #0
   1eb50:	beq	1eb7c <flatcc_builder_embed_buffer@@Base+0xf4>
   1eb54:	add	r1, r1, r3
   1eb58:	add	r7, sp, #8
   1eb5c:	str	r1, [sp, #8]
   1eb60:	add	r7, r7, r2, lsl #3
   1eb64:	add	r2, r2, #1
   1eb68:	ldr	r6, [pc, #136]	; 1ebf8 <flatcc_builder_embed_buffer@@Base+0x170>
   1eb6c:	ldr	r6, [pc, r6]
   1eb70:	str	r6, [r7, #8]
   1eb74:	str	r3, [r7, #12]
   1eb78:	str	r2, [sp, #12]
   1eb7c:	cmp	r1, #0
   1eb80:	ble	1ebd8 <flatcc_builder_embed_buffer@@Base+0x150>
   1eb84:	sub	r5, r0, r1
   1eb88:	ldr	r0, [r4, #36]	; 0x24
   1eb8c:	ldr	r7, [r4, #44]	; 0x2c
   1eb90:	str	r1, [sp]
   1eb94:	add	r1, sp, #8
   1eb98:	add	r1, r1, #8
   1eb9c:	mov	r3, r5
   1eba0:	blx	r7
   1eba4:	cmp	r0, #0
   1eba8:	streq	r5, [r4, #136]	; 0x88
   1ebac:	moveq	r0, r5
   1ebb0:	subeq	sp, fp, #16
   1ebb4:	popeq	{r4, r5, r6, r7, fp, pc}
   1ebb8:	ldr	r0, [pc, #72]	; 1ec08 <flatcc_builder_embed_buffer@@Base+0x180>
   1ebbc:	ldr	r1, [pc, #72]	; 1ec0c <flatcc_builder_embed_buffer@@Base+0x184>
   1ebc0:	ldr	r3, [pc, #72]	; 1ec10 <flatcc_builder_embed_buffer@@Base+0x188>
   1ebc4:	movw	r2, #651	; 0x28b
   1ebc8:	add	r0, pc, r0
   1ebcc:	add	r1, pc, r1
   1ebd0:	add	r3, pc, r3
   1ebd4:	bl	12f04 <__assert_fail@plt>
   1ebd8:	ldr	r0, [pc, #28]	; 1ebfc <flatcc_builder_embed_buffer@@Base+0x174>
   1ebdc:	ldr	r1, [pc, #28]	; 1ec00 <flatcc_builder_embed_buffer@@Base+0x178>
   1ebe0:	ldr	r3, [pc, #28]	; 1ec04 <flatcc_builder_embed_buffer@@Base+0x17c>
   1ebe4:	movw	r2, #647	; 0x287
   1ebe8:	add	r0, pc, r0
   1ebec:	add	r1, pc, r1
   1ebf0:	add	r3, pc, r3
   1ebf4:	bl	12f04 <__assert_fail@plt>
   1ebf8:	strdeq	ip, [r1], -r0
   1ebfc:	muleq	r0, pc, lr	; <UNPREDICTABLE>
   1ec00:	ldrdeq	r9, [r0], -lr
   1ec04:	andeq	sl, r0, r6, asr sp
   1ec08:			; <UNDEFINED> instruction: 0x0000aebf
   1ec0c:	strdeq	r9, [r0], -lr
   1ec10:	andeq	sl, r0, r6, ror sp
   1ec14:	push	{r4, sl, fp, lr}
   1ec18:	add	fp, sp, #8
   1ec1c:	sub	sp, sp, #80	; 0x50
   1ec20:	cmp	r2, #0
   1ec24:	bne	1ec34 <flatcc_builder_embed_buffer@@Base+0x1ac>
   1ec28:	ldrh	r2, [r0, #132]	; 0x84
   1ec2c:	cmp	r2, #0
   1ec30:	movweq	r2, #1
   1ec34:	ldrh	r4, [r1]
   1ec38:	cmp	r4, #4
   1ec3c:	movwcc	r4, #4
   1ec40:	cmpcs	r4, r2
   1ec44:	bcs	1ec54 <flatcc_builder_embed_buffer@@Base+0x1cc>
   1ec48:	cmp	r4, r2
   1ec4c:	movcc	r4, r2
   1ec50:	strh	r4, [r1]
   1ec54:	cmp	r3, #0
   1ec58:	bne	1eccc <flatcc_builder_embed_buffer@@Base+0x244>
   1ec5c:	ldr	r4, [r0, #140]	; 0x8c
   1ec60:	sub	r1, r2, #1
   1ec64:	ands	r1, r4, r1
   1ec68:	beq	1eccc <flatcc_builder_embed_buffer@@Base+0x244>
   1ec6c:	mov	r2, #1
   1ec70:	str	r1, [sp, #8]
   1ec74:	str	r1, [sp, #20]
   1ec78:	cmn	r1, #1
   1ec7c:	str	r2, [sp, #12]
   1ec80:	ldr	r2, [pc, #172]	; 1ed34 <flatcc_builder_embed_buffer@@Base+0x2ac>
   1ec84:	ldr	r2, [pc, r2]
   1ec88:	str	r2, [sp, #16]
   1ec8c:	add	r2, r1, r4
   1ec90:	str	r2, [r0, #140]	; 0x8c
   1ec94:	ble	1ecd4 <flatcc_builder_embed_buffer@@Base+0x24c>
   1ec98:	ldr	r2, [r0, #36]	; 0x24
   1ec9c:	ldr	ip, [r0, #44]	; 0x2c
   1eca0:	add	r0, sp, #8
   1eca4:	str	r1, [sp]
   1eca8:	mov	r3, r4
   1ecac:	add	r1, r0, #8
   1ecb0:	mov	r0, r2
   1ecb4:	mov	r2, #1
   1ecb8:	blx	ip
   1ecbc:	cmp	r0, #0
   1ecc0:	bne	1ecf4 <flatcc_builder_embed_buffer@@Base+0x26c>
   1ecc4:	cmn	r4, #1
   1ecc8:	beq	1ed14 <flatcc_builder_embed_buffer@@Base+0x28c>
   1eccc:	sub	sp, fp, #8
   1ecd0:	pop	{r4, sl, fp, pc}
   1ecd4:	ldr	r0, [pc, #92]	; 1ed38 <flatcc_builder_embed_buffer@@Base+0x2b0>
   1ecd8:	ldr	r1, [pc, #92]	; 1ed3c <flatcc_builder_embed_buffer@@Base+0x2b4>
   1ecdc:	ldr	r3, [pc, #92]	; 1ed40 <flatcc_builder_embed_buffer@@Base+0x2b8>
   1ece0:	movw	r2, #673	; 0x2a1
   1ece4:	add	r0, pc, r0
   1ece8:	add	r1, pc, r1
   1ecec:	add	r3, pc, r3
   1ecf0:	bl	12f04 <__assert_fail@plt>
   1ecf4:	ldr	r0, [pc, #72]	; 1ed44 <flatcc_builder_embed_buffer@@Base+0x2bc>
   1ecf8:	ldr	r1, [pc, #72]	; 1ed48 <flatcc_builder_embed_buffer@@Base+0x2c0>
   1ecfc:	ldr	r3, [pc, #72]	; 1ed4c <flatcc_builder_embed_buffer@@Base+0x2c4>
   1ed00:	movw	r2, #677	; 0x2a5
   1ed04:	add	r0, pc, r0
   1ed08:	add	r1, pc, r1
   1ed0c:	add	r3, pc, r3
   1ed10:	bl	12f04 <__assert_fail@plt>
   1ed14:	ldr	r0, [pc, #52]	; 1ed50 <flatcc_builder_embed_buffer@@Base+0x2c8>
   1ed18:	ldr	r1, [pc, #52]	; 1ed54 <flatcc_builder_embed_buffer@@Base+0x2cc>
   1ed1c:	ldr	r3, [pc, #52]	; 1ed58 <flatcc_builder_embed_buffer@@Base+0x2d0>
   1ed20:	movw	r2, #702	; 0x2be
   1ed24:	add	r0, pc, r0
   1ed28:	add	r1, pc, r1
   1ed2c:	add	r3, pc, r3
   1ed30:	bl	12f04 <__assert_fail@plt>
   1ed34:	ldrdeq	ip, [r1], -r8
   1ed38:	andeq	sl, r0, r3, lsr #27
   1ed3c:	andeq	r9, r0, r2, ror #23
   1ed40:	andeq	sl, r0, r6, lsl sp
   1ed44:	andeq	sl, r0, r3, lsl #27
   1ed48:	andeq	r9, r0, r2, asr #23
   1ed4c:	strdeq	sl, [r0], -r6
   1ed50:	andeq	sl, r0, r3, ror #26
   1ed54:	andeq	r9, r0, r2, lsr #23
   1ed58:	ldrdeq	sl, [r0], -r8

0001ed5c <flatcc_builder_create_buffer@@Base>:
   1ed5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed60:	add	fp, sp, #28
   1ed64:	sub	sp, sp, #100	; 0x64
   1ed68:	ldr	r8, [fp, #12]
   1ed6c:	mov	r4, r0
   1ed70:	ldr	r0, [fp, #8]
   1ed74:	mov	r7, r1
   1ed78:	mov	r5, #0
   1ed7c:	mov	r9, r3
   1ed80:	sub	r1, fp, #30
   1ed84:	str	r5, [sp, #12]
   1ed88:	and	r6, r8, #1
   1ed8c:	strh	r0, [fp, #-30]	; 0xffffffe2
   1ed90:	mov	r0, r4
   1ed94:	mov	r3, r6
   1ed98:	bl	1ec14 <flatcc_builder_embed_buffer@@Base+0x18c>
   1ed9c:	ldrh	r0, [r4, #128]	; 0x80
   1eda0:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1eda4:	cmp	r0, r1
   1eda8:	strhcc	r1, [r4, #128]	; 0x80
   1edac:	cmp	r7, #0
   1edb0:	stmib	sp, {r6, r9}
   1edb4:	beq	1edd0 <flatcc_builder_create_buffer@@Base+0x74>
   1edb8:	ldr	r5, [r7]
   1edbc:	cmp	r5, #0
   1edc0:	str	r5, [sp, #12]
   1edc4:	movwne	r5, #1
   1edc8:	lsl	r7, r5, #2
   1edcc:	b	1edd4 <flatcc_builder_create_buffer@@Base+0x78>
   1edd0:	mov	r7, #0
   1edd4:	ldr	r9, [r4, #136]	; 0x88
   1edd8:	mov	sl, #4
   1eddc:	mvn	r6, #3
   1ede0:	mov	r3, #0
   1ede4:	ands	ip, r8, #3
   1ede8:	and	r2, sl, r8, lsl #1
   1edec:	str	r3, [sp, #20]
   1edf0:	str	r3, [sp, #16]
   1edf4:	sub	r2, r6, r2
   1edf8:	sub	r6, r1, #1
   1edfc:	mov	r1, #4
   1ee00:	add	r2, r2, r9
   1ee04:	sub	r2, r2, r7
   1ee08:	beq	1ee2c <flatcc_builder_create_buffer@@Base+0xd0>
   1ee0c:	sub	r1, fp, #40	; 0x28
   1ee10:	mov	r3, #1
   1ee14:	str	r1, [sp, #24]
   1ee18:	mov	r1, #4
   1ee1c:	str	r1, [sp, #16]
   1ee20:	str	r1, [sp, #28]
   1ee24:	mov	r1, #8
   1ee28:	str	r3, [sp, #20]
   1ee2c:	add	lr, sp, #16
   1ee30:	and	r6, r2, r6
   1ee34:	sub	r0, fp, #36	; 0x24
   1ee38:	str	r1, [sp, #16]
   1ee3c:	cmp	r5, #0
   1ee40:	add	r2, lr, r3, lsl #3
   1ee44:	str	r0, [r2, #8]
   1ee48:	str	sl, [r2, #12]
   1ee4c:	add	r2, r3, #1
   1ee50:	str	r2, [sp, #20]
   1ee54:	beq	1ee78 <flatcc_builder_create_buffer@@Base+0x11c>
   1ee58:	add	r1, r1, r7
   1ee5c:	add	r0, lr, r2, lsl #3
   1ee60:	add	r2, sp, #12
   1ee64:	str	r1, [sp, #16]
   1ee68:	str	r2, [r0, #8]
   1ee6c:	orr	r2, r3, #2
   1ee70:	str	r7, [r0, #12]
   1ee74:	str	r2, [sp, #20]
   1ee78:	cmp	r6, #0
   1ee7c:	beq	1eea4 <flatcc_builder_create_buffer@@Base+0x148>
   1ee80:	add	r1, r1, r6
   1ee84:	add	r0, lr, r2, lsl #3
   1ee88:	add	r2, r2, #1
   1ee8c:	str	r1, [sp, #16]
   1ee90:	ldr	r3, [pc, #224]	; 1ef78 <flatcc_builder_create_buffer@@Base+0x21c>
   1ee94:	ldr	r3, [pc, r3]
   1ee98:	str	r3, [r0, #8]
   1ee9c:	str	r6, [r0, #12]
   1eea0:	str	r2, [sp, #20]
   1eea4:	ldr	r5, [sp, #4]
   1eea8:	sub	r7, r9, r1
   1eeac:	cmp	ip, #0
   1eeb0:	mov	r6, #144	; 0x90
   1eeb4:	ldr	r3, [sp, #8]
   1eeb8:	mov	r0, r7
   1eebc:	addne	r0, r0, #4
   1eec0:	cmp	r5, #0
   1eec4:	sub	r3, r3, r0
   1eec8:	movweq	r6, #140	; 0x8c
   1eecc:	cmp	r1, #0
   1eed0:	ldr	r6, [r4, r6]
   1eed4:	str	r3, [fp, #-36]	; 0xffffffdc
   1eed8:	sub	r0, r6, r0
   1eedc:	str	r0, [fp, #-40]	; 0xffffffd8
   1eee0:	ble	1ef38 <flatcc_builder_create_buffer@@Base+0x1dc>
   1eee4:	ldr	r0, [r4, #36]	; 0x24
   1eee8:	ldr	r6, [r4, #44]	; 0x2c
   1eeec:	str	r1, [sp]
   1eef0:	add	r1, lr, #8
   1eef4:	mov	r3, r7
   1eef8:	blx	r6
   1eefc:	cmp	r0, #0
   1ef00:	bne	1ef58 <flatcc_builder_create_buffer@@Base+0x1fc>
   1ef04:	cmp	r7, #0
   1ef08:	str	r7, [r4, #136]	; 0x88
   1ef0c:	movne	r0, r7
   1ef10:	subne	sp, fp, #28
   1ef14:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef18:	ldr	r0, [pc, #116]	; 1ef94 <flatcc_builder_create_buffer@@Base+0x238>
   1ef1c:	ldr	r1, [pc, #116]	; 1ef98 <flatcc_builder_create_buffer@@Base+0x23c>
   1ef20:	ldr	r3, [pc, #116]	; 1ef9c <flatcc_builder_create_buffer@@Base+0x240>
   1ef24:	mov	r2, #772	; 0x304
   1ef28:	add	r0, pc, r0
   1ef2c:	add	r1, pc, r1
   1ef30:	add	r3, pc, r3
   1ef34:	bl	12f04 <__assert_fail@plt>
   1ef38:	ldr	r0, [pc, #60]	; 1ef7c <flatcc_builder_create_buffer@@Base+0x220>
   1ef3c:	ldr	r1, [pc, #60]	; 1ef80 <flatcc_builder_create_buffer@@Base+0x224>
   1ef40:	ldr	r3, [pc, #60]	; 1ef84 <flatcc_builder_create_buffer@@Base+0x228>
   1ef44:	movw	r2, #647	; 0x287
   1ef48:	add	r0, pc, r0
   1ef4c:	add	r1, pc, r1
   1ef50:	add	r3, pc, r3
   1ef54:	bl	12f04 <__assert_fail@plt>
   1ef58:	ldr	r0, [pc, #40]	; 1ef88 <flatcc_builder_create_buffer@@Base+0x22c>
   1ef5c:	ldr	r1, [pc, #40]	; 1ef8c <flatcc_builder_create_buffer@@Base+0x230>
   1ef60:	ldr	r3, [pc, #40]	; 1ef90 <flatcc_builder_create_buffer@@Base+0x234>
   1ef64:	movw	r2, #651	; 0x28b
   1ef68:	add	r0, pc, r0
   1ef6c:	add	r1, pc, r1
   1ef70:	add	r3, pc, r3
   1ef74:	bl	12f04 <__assert_fail@plt>
   1ef78:	andeq	ip, r1, r8, asr #3
   1ef7c:	andeq	sl, r0, pc, lsr fp
   1ef80:	andeq	r9, r0, lr, ror r9
   1ef84:	strdeq	sl, [r0], -r6
   1ef88:	andeq	sl, r0, pc, lsl fp
   1ef8c:	andeq	r9, r0, lr, asr r9
   1ef90:	ldrdeq	sl, [r0], -r6
   1ef94:	andeq	sl, r0, pc, asr fp
   1ef98:	muleq	r0, lr, r9
   1ef9c:	andeq	r9, r0, ip, ror #21

0001efa0 <flatcc_builder_create_struct@@Base>:
   1efa0:	push	{r4, r5, r6, sl, fp, lr}
   1efa4:	add	fp, sp, #16
   1efa8:	sub	sp, sp, #80	; 0x50
   1efac:	cmp	r3, #0
   1efb0:	beq	1f088 <flatcc_builder_create_struct@@Base+0xe8>
   1efb4:	mov	r5, r0
   1efb8:	ldrh	r0, [r0, #128]	; 0x80
   1efbc:	mov	r4, #0
   1efc0:	cmp	r0, r3
   1efc4:	strhcc	r3, [r5, #128]	; 0x80
   1efc8:	sub	r3, r3, #1
   1efcc:	cmp	r2, #0
   1efd0:	ldr	r0, [r5, #136]	; 0x88
   1efd4:	str	r4, [sp, #12]
   1efd8:	str	r4, [sp, #8]
   1efdc:	movne	r4, #1
   1efe0:	strne	r1, [sp, #16]
   1efe4:	strne	r2, [sp, #8]
   1efe8:	strne	r2, [sp, #20]
   1efec:	strne	r4, [sp, #12]
   1eff0:	sub	r6, r0, r2
   1eff4:	and	r3, r6, r3
   1eff8:	cmp	r3, #0
   1effc:	beq	1f028 <flatcc_builder_create_struct@@Base+0x88>
   1f000:	add	r2, r3, r2
   1f004:	add	r1, sp, #8
   1f008:	str	r2, [sp, #8]
   1f00c:	add	r1, r1, r4, lsl #3
   1f010:	add	r4, r4, #1
   1f014:	ldr	r6, [pc, #172]	; 1f0c8 <flatcc_builder_create_struct@@Base+0x128>
   1f018:	ldr	r6, [pc, r6]
   1f01c:	str	r6, [r1, #8]
   1f020:	str	r3, [r1, #12]
   1f024:	str	r4, [sp, #12]
   1f028:	cmp	r2, #0
   1f02c:	ble	1f0a8 <flatcc_builder_create_struct@@Base+0x108>
   1f030:	sub	r6, r0, r2
   1f034:	ldr	r0, [r5, #36]	; 0x24
   1f038:	ldr	ip, [r5, #44]	; 0x2c
   1f03c:	add	r1, sp, #8
   1f040:	str	r2, [sp]
   1f044:	mov	r2, r4
   1f048:	add	r1, r1, #8
   1f04c:	mov	r3, r6
   1f050:	blx	ip
   1f054:	cmp	r0, #0
   1f058:	streq	r6, [r5, #136]	; 0x88
   1f05c:	moveq	r0, r6
   1f060:	subeq	sp, fp, #16
   1f064:	popeq	{r4, r5, r6, sl, fp, pc}
   1f068:	ldr	r0, [pc, #116]	; 1f0e4 <flatcc_builder_create_struct@@Base+0x144>
   1f06c:	ldr	r1, [pc, #116]	; 1f0e8 <flatcc_builder_create_struct@@Base+0x148>
   1f070:	ldr	r3, [pc, #116]	; 1f0ec <flatcc_builder_create_struct@@Base+0x14c>
   1f074:	movw	r2, #651	; 0x28b
   1f078:	add	r0, pc, r0
   1f07c:	add	r1, pc, r1
   1f080:	add	r3, pc, r3
   1f084:	bl	12f04 <__assert_fail@plt>
   1f088:	ldr	r0, [pc, #60]	; 1f0cc <flatcc_builder_create_struct@@Base+0x12c>
   1f08c:	ldr	r1, [pc, #60]	; 1f0d0 <flatcc_builder_create_struct@@Base+0x130>
   1f090:	ldr	r3, [pc, #60]	; 1f0d4 <flatcc_builder_create_struct@@Base+0x134>
   1f094:	movw	r2, #783	; 0x30f
   1f098:	add	r0, pc, r0
   1f09c:	add	r1, pc, r1
   1f0a0:	add	r3, pc, r3
   1f0a4:	bl	12f04 <__assert_fail@plt>
   1f0a8:	ldr	r0, [pc, #40]	; 1f0d8 <flatcc_builder_create_struct@@Base+0x138>
   1f0ac:	ldr	r1, [pc, #40]	; 1f0dc <flatcc_builder_create_struct@@Base+0x13c>
   1f0b0:	ldr	r3, [pc, #40]	; 1f0e0 <flatcc_builder_create_struct@@Base+0x140>
   1f0b4:	movw	r2, #647	; 0x287
   1f0b8:	add	r0, pc, r0
   1f0bc:	add	r1, pc, r1
   1f0c0:	add	r3, pc, r3
   1f0c4:	bl	12f04 <__assert_fail@plt>
   1f0c8:	andeq	ip, r1, r4, asr #32
   1f0cc:	andeq	r9, r0, r7, lsl #20
   1f0d0:	andeq	r9, r0, lr, lsr #16
   1f0d4:	andeq	r9, r0, sl, lsl #20
   1f0d8:	andeq	sl, r0, pc, asr #19
   1f0dc:	andeq	r9, r0, lr, lsl #16
   1f0e0:	andeq	sl, r0, r6, lsl #17
   1f0e4:	andeq	sl, r0, pc, lsl #20
   1f0e8:	andeq	r9, r0, lr, asr #16
   1f0ec:	andeq	sl, r0, r6, asr #17

0001f0f0 <flatcc_builder_start_buffer@@Base>:
   1f0f0:	push	{r4, r5, r6, r7, fp, lr}
   1f0f4:	add	fp, sp, #16
   1f0f8:	mov	r5, r1
   1f0fc:	ldrh	r1, [r0, #128]	; 0x80
   1f100:	mov	r6, r3
   1f104:	mov	r7, r2
   1f108:	mov	r4, r0
   1f10c:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   1f110:	mov	r1, r0
   1f114:	mvn	r0, #0
   1f118:	cmp	r1, #0
   1f11c:	popne	{r4, r5, r6, r7, fp, pc}
   1f120:	mov	r0, #1
   1f124:	cmp	r5, #0
   1f128:	strh	r0, [r4, #128]	; 0x80
   1f12c:	ldrh	r1, [r4, #132]	; 0x84
   1f130:	ldr	r2, [r4, #32]
   1f134:	strh	r1, [r2, #34]	; 0x22
   1f138:	strh	r7, [r4, #132]	; 0x84
   1f13c:	ldrh	r1, [r4, #164]	; 0xa4
   1f140:	ldr	r2, [r4, #32]
   1f144:	strh	r1, [r2, #32]
   1f148:	strh	r6, [r4, #164]	; 0xa4
   1f14c:	ldr	r1, [r4, #32]
   1f150:	ldr	r2, [r4, #144]	; 0x90
   1f154:	str	r2, [r1, #20]
   1f158:	ldr	r1, [r4, #32]
   1f15c:	ldr	r2, [r4, #152]	; 0x98
   1f160:	str	r2, [r1, #28]
   1f164:	ldr	r3, [r4, #148]	; 0x94
   1f168:	ldr	r1, [r4, #32]
   1f16c:	ldr	r2, [r4, #136]	; 0x88
   1f170:	ldr	r7, [r4, #168]	; 0xa8
   1f174:	add	r6, r3, #1
   1f178:	str	r2, [r4, #144]	; 0x90
   1f17c:	str	r6, [r4, #148]	; 0x94
   1f180:	str	r3, [r4, #152]	; 0x98
   1f184:	str	r7, [r1, #16]
   1f188:	ldr	r1, [pc, #28]	; 1f1ac <flatcc_builder_start_buffer@@Base+0xbc>
   1f18c:	ldr	r1, [pc, r1]
   1f190:	movne	r1, r5
   1f194:	ldr	r1, [r1]
   1f198:	str	r1, [r4, #168]	; 0xa8
   1f19c:	ldr	r1, [r4, #32]
   1f1a0:	strh	r0, [r1, #14]
   1f1a4:	mov	r0, #0
   1f1a8:	pop	{r4, r5, r6, r7, fp, pc}
   1f1ac:	ldrdeq	fp, [r1], -r0
   1f1b0:	push	{r4, r5, r6, r7, fp, lr}
   1f1b4:	add	fp, sp, #16
   1f1b8:	sub	sp, sp, #8
   1f1bc:	mov	r5, r1
   1f1c0:	ldr	r1, [r0, #156]	; 0x9c
   1f1c4:	ldr	r2, [r0, #160]	; 0xa0
   1f1c8:	mov	r4, r0
   1f1cc:	add	r0, r1, #1
   1f1d0:	cmp	r1, r2
   1f1d4:	str	r0, [r4, #156]	; 0x9c
   1f1d8:	bge	1f1ec <flatcc_builder_start_buffer@@Base+0xfc>
   1f1dc:	ldr	r0, [r4, #32]
   1f1e0:	add	r0, r0, #36	; 0x24
   1f1e4:	str	r0, [r4, #32]
   1f1e8:	b	1f280 <flatcc_builder_start_buffer@@Base+0x190>
   1f1ec:	ldr	r2, [r4, #176]	; 0xb0
   1f1f0:	mvn	r6, #0
   1f1f4:	cmp	r2, #1
   1f1f8:	cmpge	r1, r2
   1f1fc:	bge	1f2b8 <flatcc_builder_start_buffer@@Base+0x1c8>
   1f200:	add	r7, r0, r0, lsl #3
   1f204:	ldr	r0, [r4, #88]	; 0x58
   1f208:	lsl	r2, r7, #2
   1f20c:	cmp	r2, r0
   1f210:	bls	1f238 <flatcc_builder_start_buffer@@Base+0x148>
   1f214:	ldr	r0, [r4, #40]	; 0x28
   1f218:	ldr	ip, [r4, #48]	; 0x30
   1f21c:	mov	r3, #4
   1f220:	add	r1, r4, #84	; 0x54
   1f224:	str	r3, [sp]
   1f228:	mov	r3, #0
   1f22c:	blx	ip
   1f230:	cmp	r0, #0
   1f234:	bne	1f2c4 <flatcc_builder_start_buffer@@Base+0x1d4>
   1f238:	ldr	r1, [r4, #84]	; 0x54
   1f23c:	mvn	r0, #35	; 0x23
   1f240:	add	r0, r0, r7, lsl #2
   1f244:	adds	r0, r0, r1
   1f248:	str	r0, [r4, #32]
   1f24c:	beq	1f2b8 <flatcc_builder_start_buffer@@Base+0x1c8>
   1f250:	ldr	r1, [r4, #88]	; 0x58
   1f254:	movw	r3, #36409	; 0x8e39
   1f258:	ldr	r2, [r4, #176]	; 0xb0
   1f25c:	movt	r3, #14563	; 0x38e3
   1f260:	umull	r1, r3, r1, r3
   1f264:	lsr	r1, r3, #3
   1f268:	cmp	r2, r3, lsr #3
   1f26c:	mov	r3, r1
   1f270:	movlt	r3, r2
   1f274:	cmp	r2, #0
   1f278:	movle	r3, r1
   1f27c:	str	r3, [r4, #160]	; 0xa0
   1f280:	ldr	r1, [r4, #20]
   1f284:	mvn	r3, #3
   1f288:	mov	r6, #0
   1f28c:	str	r1, [r0, #8]
   1f290:	ldrh	r2, [r4, #130]	; 0x82
   1f294:	strh	r2, [r0, #12]
   1f298:	strh	r5, [r4, #130]	; 0x82
   1f29c:	ldr	r2, [r4, #28]
   1f2a0:	stm	r0, {r2, r3}
   1f2a4:	add	r0, r1, r2
   1f2a8:	str	r6, [r4, #20]
   1f2ac:	add	r0, r0, #7
   1f2b0:	bic	r0, r0, #7
   1f2b4:	str	r0, [r4, #28]
   1f2b8:	mov	r0, r6
   1f2bc:	sub	sp, fp, #16
   1f2c0:	pop	{r4, r5, r6, r7, fp, pc}
   1f2c4:	ldr	r0, [pc, #24]	; 1f2e4 <flatcc_builder_start_buffer@@Base+0x1f4>
   1f2c8:	ldr	r1, [pc, #24]	; 1f2e8 <flatcc_builder_start_buffer@@Base+0x1f8>
   1f2cc:	ldr	r3, [pc, #24]	; 1f2ec <flatcc_builder_start_buffer@@Base+0x1fc>
   1f2d0:	mov	r2, #308	; 0x134
   1f2d4:	add	r0, pc, r0
   1f2d8:	add	r1, pc, r1
   1f2dc:	add	r3, pc, r3
   1f2e0:	bl	12f04 <__assert_fail@plt>
   1f2e4:			; <UNDEFINED> instruction: 0x0000a7b3
   1f2e8:	strdeq	r9, [r0], -r2
   1f2ec:	andeq	sl, r0, r5, ror #11

0001f2f0 <flatcc_builder_end_buffer@@Base>:
   1f2f0:	push	{r4, r5, r6, sl, fp, lr}
   1f2f4:	add	fp, sp, #16
   1f2f8:	sub	sp, sp, #8
   1f2fc:	mov	r4, r0
   1f300:	ldr	r0, [r0, #32]
   1f304:	ldrh	r0, [r0, #14]
   1f308:	cmp	r0, #1
   1f30c:	bne	1f400 <flatcc_builder_end_buffer@@Base+0x110>
   1f310:	mov	r3, r1
   1f314:	ldr	r1, [r4, #152]	; 0x98
   1f318:	ldrh	r0, [r4, #164]	; 0xa4
   1f31c:	ldrh	r2, [r4, #132]	; 0x84
   1f320:	cmp	r1, #0
   1f324:	ldrh	r1, [r4, #128]	; 0x80
   1f328:	and	r0, r0, #2
   1f32c:	orrne	r0, r0, #1
   1f330:	cmp	r1, r2
   1f334:	movcc	r1, r2
   1f338:	strhcc	r2, [r4, #128]	; 0x80
   1f33c:	str	r0, [sp, #4]
   1f340:	mov	r0, r4
   1f344:	str	r1, [sp]
   1f348:	add	r1, r4, #168	; 0xa8
   1f34c:	bl	1ed5c <flatcc_builder_create_buffer@@Base>
   1f350:	mov	r6, r0
   1f354:	cmp	r0, #0
   1f358:	beq	1f3f4 <flatcc_builder_end_buffer@@Base+0x104>
   1f35c:	ldr	r1, [r4, #32]
   1f360:	ldr	r0, [r4, #16]
   1f364:	ldr	r2, [r4, #20]
   1f368:	ldr	r3, [r1, #20]
   1f36c:	str	r3, [r4, #144]	; 0x90
   1f370:	ldr	r3, [r1, #28]
   1f374:	str	r3, [r4, #152]	; 0x98
   1f378:	ldr	r3, [r1, #16]
   1f37c:	str	r3, [r4, #168]	; 0xa8
   1f380:	ldrh	r1, [r1, #32]
   1f384:	strh	r1, [r4, #164]	; 0xa4
   1f388:	mov	r1, #0
   1f38c:	bl	12ebc <memset@plt>
   1f390:	ldr	r0, [r4, #32]
   1f394:	ldr	r1, [r4, #60]	; 0x3c
   1f398:	ldr	r2, [r4, #64]	; 0x40
   1f39c:	ldr	r3, [r0, #8]
   1f3a0:	str	r3, [r4, #20]
   1f3a4:	ldr	r3, [r0]
   1f3a8:	str	r3, [r4, #28]
   1f3ac:	add	r1, r1, r3
   1f3b0:	ldr	r5, [r0, #4]
   1f3b4:	str	r1, [r4, #16]
   1f3b8:	sub	r1, r2, r3
   1f3bc:	cmp	r1, r5
   1f3c0:	movhi	r1, r5
   1f3c4:	str	r1, [r4, #24]
   1f3c8:	ldrh	r1, [r4, #130]	; 0x82
   1f3cc:	ldrh	r2, [r4, #128]	; 0x80
   1f3d0:	cmp	r2, r1
   1f3d4:	strhcc	r1, [r4, #128]	; 0x80
   1f3d8:	ldrh	r1, [r0, #12]
   1f3dc:	sub	r0, r0, #36	; 0x24
   1f3e0:	str	r0, [r4, #32]
   1f3e4:	strh	r1, [r4, #130]	; 0x82
   1f3e8:	ldr	r0, [r4, #156]	; 0x9c
   1f3ec:	sub	r0, r0, #1
   1f3f0:	str	r0, [r4, #156]	; 0x9c
   1f3f4:	mov	r0, r6
   1f3f8:	sub	sp, fp, #16
   1f3fc:	pop	{r4, r5, r6, sl, fp, pc}
   1f400:	ldr	r0, [pc, #24]	; 1f420 <flatcc_builder_end_buffer@@Base+0x130>
   1f404:	ldr	r1, [pc, #24]	; 1f424 <flatcc_builder_end_buffer@@Base+0x134>
   1f408:	ldr	r3, [pc, #24]	; 1f428 <flatcc_builder_end_buffer@@Base+0x138>
   1f40c:	movw	r2, #838	; 0x346
   1f410:	add	r0, pc, r0
   1f414:	add	r1, pc, r1
   1f418:	add	r3, pc, r3
   1f41c:	bl	12f04 <__assert_fail@plt>
   1f420:	andeq	r9, r0, r0, lsl #14
   1f424:			; <UNDEFINED> instruction: 0x000094b6
   1f428:	andeq	r9, r0, r4, lsr #14

0001f42c <flatcc_builder_start_struct@@Base>:
   1f42c:	push	{r4, r5, r6, r7, fp, lr}
   1f430:	add	fp, sp, #16
   1f434:	sub	sp, sp, #8
   1f438:	mov	r6, r1
   1f43c:	mov	r1, r2
   1f440:	mov	r4, r0
   1f444:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   1f448:	mov	r5, #0
   1f44c:	cmp	r0, #0
   1f450:	bne	1f500 <flatcc_builder_start_struct@@Base+0xd4>
   1f454:	ldr	r2, [r4, #32]
   1f458:	mov	r0, #2
   1f45c:	mvn	r7, #3
   1f460:	strh	r0, [r2, #14]
   1f464:	ldr	r1, [r4, #28]
   1f468:	ldr	r3, [r4, #64]	; 0x40
   1f46c:	ldr	r0, [r4, #60]	; 0x3c
   1f470:	sub	r3, r3, r1
   1f474:	add	r0, r0, r1
   1f478:	cmn	r3, #4
   1f47c:	str	r0, [r4, #16]
   1f480:	movcs	r3, r7
   1f484:	str	r3, [r4, #24]
   1f488:	str	r7, [r2, #4]
   1f48c:	ldr	r7, [r4, #20]
   1f490:	add	r2, r7, r6
   1f494:	cmp	r2, r3
   1f498:	str	r2, [r4, #20]
   1f49c:	bcc	1f4fc <flatcc_builder_start_struct@@Base+0xd0>
   1f4a0:	ldr	r0, [r4, #40]	; 0x28
   1f4a4:	ldr	r6, [r4, #48]	; 0x30
   1f4a8:	add	r1, r1, r2
   1f4ac:	mov	r3, #1
   1f4b0:	str	r3, [sp]
   1f4b4:	add	r2, r1, #1
   1f4b8:	add	r1, r4, #60	; 0x3c
   1f4bc:	mov	r3, #1
   1f4c0:	blx	r6
   1f4c4:	cmp	r0, #0
   1f4c8:	bne	1f500 <flatcc_builder_start_struct@@Base+0xd4>
   1f4cc:	ldr	r1, [r4, #28]
   1f4d0:	ldr	r0, [r4, #60]	; 0x3c
   1f4d4:	ldr	r3, [r4, #64]	; 0x40
   1f4d8:	ldr	r2, [r4, #32]
   1f4dc:	add	r0, r0, r1
   1f4e0:	sub	r1, r3, r1
   1f4e4:	mvn	r3, #3
   1f4e8:	cmn	r1, #4
   1f4ec:	str	r0, [r4, #16]
   1f4f0:	movcs	r1, r3
   1f4f4:	str	r1, [r4, #24]
   1f4f8:	str	r3, [r2, #4]
   1f4fc:	add	r5, r0, r7
   1f500:	mov	r0, r5
   1f504:	sub	sp, fp, #16
   1f508:	pop	{r4, r5, r6, r7, fp, pc}

0001f50c <flatcc_builder_struct_edit@@Base>:
   1f50c:	ldr	r0, [r0, #16]
   1f510:	bx	lr

0001f514 <flatcc_builder_end_struct@@Base>:
   1f514:	push	{r4, r5, fp, lr}
   1f518:	add	fp, sp, #8
   1f51c:	mov	r4, r0
   1f520:	ldr	r0, [r0, #32]
   1f524:	ldrh	r0, [r0, #14]
   1f528:	cmp	r0, #2
   1f52c:	bne	1f5cc <flatcc_builder_end_struct@@Base+0xb8>
   1f530:	ldrh	r3, [r4, #130]	; 0x82
   1f534:	ldr	r1, [r4, #16]
   1f538:	ldr	r2, [r4, #20]
   1f53c:	mov	r0, r4
   1f540:	bl	1efa0 <flatcc_builder_create_struct@@Base>
   1f544:	mov	r5, r0
   1f548:	cmp	r0, #0
   1f54c:	beq	1f5c4 <flatcc_builder_end_struct@@Base+0xb0>
   1f550:	ldr	r0, [r4, #16]
   1f554:	ldr	r2, [r4, #20]
   1f558:	mov	r1, #0
   1f55c:	bl	12ebc <memset@plt>
   1f560:	ldr	r0, [r4, #32]
   1f564:	ldr	r1, [r4, #60]	; 0x3c
   1f568:	ldr	ip, [r4, #64]	; 0x40
   1f56c:	ldr	r3, [r0, #8]
   1f570:	str	r3, [r4, #20]
   1f574:	ldr	r3, [r0]
   1f578:	str	r3, [r4, #28]
   1f57c:	add	r1, r1, r3
   1f580:	ldr	r2, [r0, #4]
   1f584:	str	r1, [r4, #16]
   1f588:	sub	r1, ip, r3
   1f58c:	cmp	r1, r2
   1f590:	movhi	r1, r2
   1f594:	str	r1, [r4, #24]
   1f598:	ldrh	r1, [r4, #130]	; 0x82
   1f59c:	ldrh	r2, [r4, #128]	; 0x80
   1f5a0:	cmp	r2, r1
   1f5a4:	strhcc	r1, [r4, #128]	; 0x80
   1f5a8:	ldrh	r1, [r0, #12]
   1f5ac:	sub	r0, r0, #36	; 0x24
   1f5b0:	str	r0, [r4, #32]
   1f5b4:	strh	r1, [r4, #130]	; 0x82
   1f5b8:	ldr	r0, [r4, #156]	; 0x9c
   1f5bc:	sub	r0, r0, #1
   1f5c0:	str	r0, [r4, #156]	; 0x9c
   1f5c4:	mov	r0, r5
   1f5c8:	pop	{r4, r5, fp, pc}
   1f5cc:	ldr	r0, [pc, #24]	; 1f5ec <flatcc_builder_end_struct@@Base+0xd8>
   1f5d0:	ldr	r1, [pc, #24]	; 1f5f0 <flatcc_builder_end_struct@@Base+0xdc>
   1f5d4:	ldr	r3, [pc, #24]	; 1f5f4 <flatcc_builder_end_struct@@Base+0xe0>
   1f5d8:	mov	r2, #872	; 0x368
   1f5dc:	add	r0, pc, r0
   1f5e0:	add	r1, pc, r1
   1f5e4:	add	r3, pc, r3
   1f5e8:	bl	12f04 <__assert_fail@plt>
   1f5ec:			; <UNDEFINED> instruction: 0x000095b9
   1f5f0:	andeq	r9, r0, sl, ror #5
   1f5f4:	ldrdeq	r9, [r0], -sp

0001f5f8 <flatcc_builder_extend_vector@@Base>:
   1f5f8:	push	{r4, r5, fp, lr}
   1f5fc:	add	fp, sp, #8
   1f600:	sub	sp, sp, #8
   1f604:	mov	r4, r0
   1f608:	ldr	r0, [r0, #32]
   1f60c:	ldr	r2, [r0, #20]
   1f610:	adds	r2, r2, r1
   1f614:	bcs	1f6cc <flatcc_builder_extend_vector@@Base+0xd4>
   1f618:	ldr	r3, [r0, #24]
   1f61c:	cmp	r2, r3
   1f620:	bhi	1f6cc <flatcc_builder_extend_vector@@Base+0xd4>
   1f624:	str	r2, [r0, #20]
   1f628:	ldr	r2, [r4, #32]
   1f62c:	ldr	r5, [r4, #20]
   1f630:	ldr	r0, [r4, #24]
   1f634:	ldr	r2, [r2, #16]
   1f638:	mla	r1, r2, r1, r5
   1f63c:	cmp	r1, r0
   1f640:	str	r1, [r4, #20]
   1f644:	bcs	1f650 <flatcc_builder_extend_vector@@Base+0x58>
   1f648:	ldr	r0, [r4, #16]
   1f64c:	b	1f6c0 <flatcc_builder_extend_vector@@Base+0xc8>
   1f650:	ldr	r2, [r4, #28]
   1f654:	ldr	r0, [r4, #40]	; 0x28
   1f658:	ldr	ip, [r4, #48]	; 0x30
   1f65c:	mov	r3, #1
   1f660:	str	r3, [sp]
   1f664:	mov	r3, #1
   1f668:	add	r1, r1, r2
   1f66c:	add	r2, r1, #1
   1f670:	add	r1, r4, #60	; 0x3c
   1f674:	blx	ip
   1f678:	mov	r1, r0
   1f67c:	mov	r0, #0
   1f680:	cmp	r1, #0
   1f684:	beq	1f690 <flatcc_builder_extend_vector@@Base+0x98>
   1f688:	sub	sp, fp, #8
   1f68c:	pop	{r4, r5, fp, pc}
   1f690:	ldr	r1, [r4, #28]
   1f694:	ldr	r0, [r4, #60]	; 0x3c
   1f698:	ldr	r3, [r4, #64]	; 0x40
   1f69c:	ldr	r2, [r4, #32]
   1f6a0:	add	r0, r0, r1
   1f6a4:	sub	r1, r3, r1
   1f6a8:	mvn	r3, #3
   1f6ac:	cmn	r1, #4
   1f6b0:	str	r0, [r4, #16]
   1f6b4:	movcs	r1, r3
   1f6b8:	str	r1, [r4, #24]
   1f6bc:	str	r3, [r2, #4]
   1f6c0:	add	r0, r0, r5
   1f6c4:	sub	sp, fp, #8
   1f6c8:	pop	{r4, r5, fp, pc}
   1f6cc:	ldr	r0, [pc, #24]	; 1f6ec <flatcc_builder_extend_vector@@Base+0xf4>
   1f6d0:	ldr	r1, [pc, #24]	; 1f6f0 <flatcc_builder_extend_vector@@Base+0xf8>
   1f6d4:	ldr	r3, [pc, #24]	; 1f6f4 <flatcc_builder_extend_vector@@Base+0xfc>
   1f6d8:	mov	r2, #892	; 0x37c
   1f6dc:	add	r0, pc, r0
   1f6e0:	add	r1, pc, r1
   1f6e4:	add	r3, pc, r3
   1f6e8:	bl	12f04 <__assert_fail@plt>
   1f6ec:			; <UNDEFINED> instruction: 0x0000a2b4
   1f6f0:	andeq	r9, r0, sl, ror #3
   1f6f4:	andeq	sl, r0, r7, asr #5

0001f6f8 <flatcc_builder_vector_push@@Base>:
   1f6f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f6fc:	add	fp, sp, #24
   1f700:	sub	sp, sp, #8
   1f704:	mov	r5, r0
   1f708:	ldr	r0, [r0, #32]
   1f70c:	mov	r8, r1
   1f710:	ldrh	r1, [r0, #14]
   1f714:	cmp	r1, #4
   1f718:	bne	1f7f0 <flatcc_builder_vector_push@@Base+0xf8>
   1f71c:	ldr	r1, [r0, #20]
   1f720:	ldr	r2, [r0, #24]
   1f724:	cmp	r1, r2
   1f728:	bhi	1f810 <flatcc_builder_vector_push@@Base+0x118>
   1f72c:	add	r1, r1, #1
   1f730:	str	r1, [r0, #20]
   1f734:	ldr	r1, [r5, #32]
   1f738:	ldr	r4, [r5, #20]
   1f73c:	ldr	r0, [r5, #24]
   1f740:	ldr	r6, [r1, #16]
   1f744:	add	r1, r4, r6
   1f748:	cmp	r1, r0
   1f74c:	str	r1, [r5, #20]
   1f750:	bcs	1f774 <flatcc_builder_vector_push@@Base+0x7c>
   1f754:	ldr	r0, [r5, #16]
   1f758:	adds	r7, r0, r4
   1f75c:	beq	1f7e0 <flatcc_builder_vector_push@@Base+0xe8>
   1f760:	mov	r0, r7
   1f764:	mov	r1, r8
   1f768:	mov	r2, r6
   1f76c:	bl	12e2c <memcpy@plt>
   1f770:	b	1f7e4 <flatcc_builder_vector_push@@Base+0xec>
   1f774:	ldr	r2, [r5, #28]
   1f778:	ldr	r0, [r5, #40]	; 0x28
   1f77c:	ldr	r7, [r5, #48]	; 0x30
   1f780:	mov	r3, #1
   1f784:	str	r3, [sp]
   1f788:	mov	r3, #1
   1f78c:	add	r1, r1, r2
   1f790:	add	r2, r1, #1
   1f794:	add	r1, r5, #60	; 0x3c
   1f798:	blx	r7
   1f79c:	mov	r7, #0
   1f7a0:	cmp	r0, #0
   1f7a4:	bne	1f7e4 <flatcc_builder_vector_push@@Base+0xec>
   1f7a8:	ldr	r1, [r5, #28]
   1f7ac:	ldr	r0, [r5, #60]	; 0x3c
   1f7b0:	ldr	r3, [r5, #64]	; 0x40
   1f7b4:	ldr	r2, [r5, #32]
   1f7b8:	add	r0, r0, r1
   1f7bc:	sub	r1, r3, r1
   1f7c0:	mvn	r3, #3
   1f7c4:	cmn	r1, #4
   1f7c8:	str	r0, [r5, #16]
   1f7cc:	movcs	r1, r3
   1f7d0:	str	r1, [r5, #24]
   1f7d4:	str	r3, [r2, #4]
   1f7d8:	adds	r7, r0, r4
   1f7dc:	bne	1f760 <flatcc_builder_vector_push@@Base+0x68>
   1f7e0:	mov	r7, #0
   1f7e4:	mov	r0, r7
   1f7e8:	sub	sp, fp, #24
   1f7ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f7f0:	ldr	r0, [pc, #56]	; 1f830 <flatcc_builder_vector_push@@Base+0x138>
   1f7f4:	ldr	r1, [pc, #56]	; 1f834 <flatcc_builder_vector_push@@Base+0x13c>
   1f7f8:	ldr	r3, [pc, #56]	; 1f838 <flatcc_builder_vector_push@@Base+0x140>
   1f7fc:	movw	r2, #907	; 0x38b
   1f800:	add	r0, pc, r0
   1f804:	add	r1, pc, r1
   1f808:	add	r3, pc, r3
   1f80c:	bl	12f04 <__assert_fail@plt>
   1f810:	ldr	r0, [pc, #36]	; 1f83c <flatcc_builder_vector_push@@Base+0x144>
   1f814:	ldr	r1, [pc, #36]	; 1f840 <flatcc_builder_vector_push@@Base+0x148>
   1f818:	ldr	r3, [pc, #36]	; 1f844 <flatcc_builder_vector_push@@Base+0x14c>
   1f81c:	mov	r2, #908	; 0x38c
   1f820:	add	r0, pc, r0
   1f824:	add	r1, pc, r1
   1f828:	add	r3, pc, r3
   1f82c:	bl	12f04 <__assert_fail@plt>
   1f830:	andeq	r9, r0, r4, lsl #8
   1f834:	andeq	r9, r0, r6, asr #1
   1f838:	andeq	r9, r0, r8, lsr #8
   1f83c:	andeq	r9, r0, r3, asr r4
   1f840:	andeq	r9, r0, r6, lsr #1
   1f844:	andeq	r9, r0, r8, lsl #8

0001f848 <flatcc_builder_append_vector@@Base>:
   1f848:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f84c:	add	fp, sp, #24
   1f850:	sub	sp, sp, #8
   1f854:	mov	r6, r0
   1f858:	ldr	r0, [r0, #32]
   1f85c:	mov	r8, r1
   1f860:	ldrh	r1, [r0, #14]
   1f864:	cmp	r1, #4
   1f868:	bne	1f968 <flatcc_builder_append_vector@@Base+0x120>
   1f86c:	ldr	r1, [r0, #20]
   1f870:	mov	r5, r2
   1f874:	adds	r1, r1, r2
   1f878:	bcs	1f948 <flatcc_builder_append_vector@@Base+0x100>
   1f87c:	ldr	r2, [r0, #24]
   1f880:	cmp	r1, r2
   1f884:	bhi	1f948 <flatcc_builder_append_vector@@Base+0x100>
   1f888:	str	r1, [r0, #20]
   1f88c:	ldr	r1, [r6, #32]
   1f890:	ldr	r4, [r6, #20]
   1f894:	ldr	r0, [r6, #24]
   1f898:	ldr	r9, [r1, #16]
   1f89c:	mla	r1, r9, r5, r4
   1f8a0:	cmp	r1, r0
   1f8a4:	str	r1, [r6, #20]
   1f8a8:	bcs	1f8cc <flatcc_builder_append_vector@@Base+0x84>
   1f8ac:	ldr	r0, [r6, #16]
   1f8b0:	adds	r7, r0, r4
   1f8b4:	beq	1f938 <flatcc_builder_append_vector@@Base+0xf0>
   1f8b8:	mul	r2, r9, r5
   1f8bc:	mov	r0, r7
   1f8c0:	mov	r1, r8
   1f8c4:	bl	12e2c <memcpy@plt>
   1f8c8:	b	1f93c <flatcc_builder_append_vector@@Base+0xf4>
   1f8cc:	ldr	r2, [r6, #28]
   1f8d0:	ldr	r0, [r6, #40]	; 0x28
   1f8d4:	ldr	r7, [r6, #48]	; 0x30
   1f8d8:	mov	r3, #1
   1f8dc:	str	r3, [sp]
   1f8e0:	mov	r3, #1
   1f8e4:	add	r1, r1, r2
   1f8e8:	add	r2, r1, #1
   1f8ec:	add	r1, r6, #60	; 0x3c
   1f8f0:	blx	r7
   1f8f4:	mov	r7, #0
   1f8f8:	cmp	r0, #0
   1f8fc:	bne	1f93c <flatcc_builder_append_vector@@Base+0xf4>
   1f900:	ldr	r1, [r6, #28]
   1f904:	ldr	r0, [r6, #60]	; 0x3c
   1f908:	ldr	r3, [r6, #64]	; 0x40
   1f90c:	ldr	r2, [r6, #32]
   1f910:	add	r0, r0, r1
   1f914:	sub	r1, r3, r1
   1f918:	mvn	r3, #3
   1f91c:	cmn	r1, #4
   1f920:	str	r0, [r6, #16]
   1f924:	movcs	r1, r3
   1f928:	str	r1, [r6, #24]
   1f92c:	str	r3, [r2, #4]
   1f930:	adds	r7, r0, r4
   1f934:	bne	1f8b8 <flatcc_builder_append_vector@@Base+0x70>
   1f938:	mov	r7, #0
   1f93c:	mov	r0, r7
   1f940:	sub	sp, fp, #24
   1f944:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f948:	ldr	r0, [pc, #68]	; 1f994 <flatcc_builder_append_vector@@Base+0x14c>
   1f94c:	ldr	r1, [pc, #68]	; 1f998 <flatcc_builder_append_vector@@Base+0x150>
   1f950:	ldr	r3, [pc, #68]	; 1f99c <flatcc_builder_append_vector@@Base+0x154>
   1f954:	mov	r2, #892	; 0x37c
   1f958:	add	r0, pc, r0
   1f95c:	add	r1, pc, r1
   1f960:	add	r3, pc, r3
   1f964:	bl	12f04 <__assert_fail@plt>
   1f968:	ldr	r0, [pc, #24]	; 1f988 <flatcc_builder_append_vector@@Base+0x140>
   1f96c:	ldr	r1, [pc, #24]	; 1f98c <flatcc_builder_append_vector@@Base+0x144>
   1f970:	ldr	r3, [pc, #24]	; 1f990 <flatcc_builder_append_vector@@Base+0x148>
   1f974:	movw	r2, #915	; 0x393
   1f978:	add	r0, pc, r0
   1f97c:	add	r1, pc, r1
   1f980:	add	r3, pc, r3
   1f984:	bl	12f04 <__assert_fail@plt>
   1f988:	andeq	r9, r0, ip, lsl #5
   1f98c:	andeq	r8, r0, lr, asr #30
   1f990:	andeq	r9, r0, r0, lsr r3
   1f994:	andeq	sl, r0, r8, lsr r0
   1f998:	andeq	r8, r0, lr, ror #30
   1f99c:	andeq	sl, r0, fp, asr #32

0001f9a0 <flatcc_builder_extend_offset_vector@@Base>:
   1f9a0:	push	{r4, r5, fp, lr}
   1f9a4:	add	fp, sp, #8
   1f9a8:	sub	sp, sp, #8
   1f9ac:	mov	r4, r0
   1f9b0:	ldr	r0, [r0, #32]
   1f9b4:	ldr	r2, [r0, #20]
   1f9b8:	adds	r2, r2, r1
   1f9bc:	cmpcc	r2, #1073741824	; 0x40000000
   1f9c0:	bcc	1f9e4 <flatcc_builder_extend_offset_vector@@Base+0x44>
   1f9c4:	ldr	r0, [pc, #184]	; 1fa84 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   1f9c8:	ldr	r1, [pc, #184]	; 1fa88 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   1f9cc:	ldr	r3, [pc, #184]	; 1fa8c <flatcc_builder_extend_offset_vector@@Base+0xec>
   1f9d0:	mov	r2, #892	; 0x37c
   1f9d4:	add	r0, pc, r0
   1f9d8:	add	r1, pc, r1
   1f9dc:	add	r3, pc, r3
   1f9e0:	bl	12f04 <__assert_fail@plt>
   1f9e4:	str	r2, [r0, #20]
   1f9e8:	ldr	r5, [r4, #20]
   1f9ec:	ldr	r0, [r4, #24]
   1f9f0:	add	r1, r5, r1, lsl #2
   1f9f4:	cmp	r1, r0
   1f9f8:	str	r1, [r4, #20]
   1f9fc:	bcs	1fa08 <flatcc_builder_extend_offset_vector@@Base+0x68>
   1fa00:	ldr	r0, [r4, #16]
   1fa04:	b	1fa78 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   1fa08:	ldr	r2, [r4, #28]
   1fa0c:	ldr	r0, [r4, #40]	; 0x28
   1fa10:	ldr	ip, [r4, #48]	; 0x30
   1fa14:	mov	r3, #1
   1fa18:	str	r3, [sp]
   1fa1c:	mov	r3, #1
   1fa20:	add	r1, r1, r2
   1fa24:	add	r2, r1, #1
   1fa28:	add	r1, r4, #60	; 0x3c
   1fa2c:	blx	ip
   1fa30:	mov	r1, r0
   1fa34:	mov	r0, #0
   1fa38:	cmp	r1, #0
   1fa3c:	beq	1fa48 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   1fa40:	sub	sp, fp, #8
   1fa44:	pop	{r4, r5, fp, pc}
   1fa48:	ldr	r1, [r4, #28]
   1fa4c:	ldr	r0, [r4, #60]	; 0x3c
   1fa50:	ldr	r3, [r4, #64]	; 0x40
   1fa54:	ldr	r2, [r4, #32]
   1fa58:	add	r0, r0, r1
   1fa5c:	sub	r1, r3, r1
   1fa60:	mvn	r3, #3
   1fa64:	cmn	r1, #4
   1fa68:	str	r0, [r4, #16]
   1fa6c:	movcs	r1, r3
   1fa70:	str	r1, [r4, #24]
   1fa74:	str	r3, [r2, #4]
   1fa78:	add	r0, r0, r5
   1fa7c:	sub	sp, fp, #8
   1fa80:	pop	{r4, r5, fp, pc}
   1fa84:			; <UNDEFINED> instruction: 0x00009fbc
   1fa88:	strdeq	r8, [r0], -r2
   1fa8c:	andeq	r9, r0, pc, asr #31

0001fa90 <flatcc_builder_offset_vector_push@@Base>:
   1fa90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fa94:	add	fp, sp, #24
   1fa98:	sub	sp, sp, #8
   1fa9c:	mov	r6, r0
   1faa0:	ldr	r0, [r0, #32]
   1faa4:	mov	r8, r1
   1faa8:	ldrh	r1, [r0, #14]
   1faac:	cmp	r1, #5
   1fab0:	bne	1fb64 <flatcc_builder_offset_vector_push@@Base+0xd4>
   1fab4:	ldr	r1, [r0, #20]
   1fab8:	mov	r5, #0
   1fabc:	cmn	r1, #-1073741823	; 0xc0000001
   1fac0:	beq	1fb58 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1fac4:	add	r1, r1, #1
   1fac8:	str	r1, [r0, #20]
   1facc:	ldr	r7, [r6, #20]
   1fad0:	ldr	r0, [r6, #24]
   1fad4:	add	r1, r7, #4
   1fad8:	cmp	r1, r0
   1fadc:	str	r1, [r6, #20]
   1fae0:	bcs	1faec <flatcc_builder_offset_vector_push@@Base+0x5c>
   1fae4:	ldr	r0, [r6, #16]
   1fae8:	b	1fb4c <flatcc_builder_offset_vector_push@@Base+0xbc>
   1faec:	ldr	r1, [r6, #28]
   1faf0:	ldr	r0, [r6, #40]	; 0x28
   1faf4:	ldr	r4, [r6, #48]	; 0x30
   1faf8:	mov	r2, #1
   1fafc:	mov	r3, #1
   1fb00:	str	r2, [sp]
   1fb04:	add	r1, r7, r1
   1fb08:	add	r2, r1, #5
   1fb0c:	add	r1, r6, #60	; 0x3c
   1fb10:	blx	r4
   1fb14:	cmp	r0, #0
   1fb18:	bne	1fb58 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1fb1c:	ldr	r1, [r6, #28]
   1fb20:	ldr	r0, [r6, #60]	; 0x3c
   1fb24:	ldr	r3, [r6, #64]	; 0x40
   1fb28:	ldr	r2, [r6, #32]
   1fb2c:	add	r0, r0, r1
   1fb30:	sub	r1, r3, r1
   1fb34:	mvn	r3, #3
   1fb38:	cmn	r1, #4
   1fb3c:	str	r0, [r6, #16]
   1fb40:	movcs	r1, r3
   1fb44:	str	r1, [r6, #24]
   1fb48:	str	r3, [r2, #4]
   1fb4c:	adds	r0, r0, r7
   1fb50:	movne	r5, r0
   1fb54:	strne	r8, [r0]
   1fb58:	mov	r0, r5
   1fb5c:	sub	sp, fp, #24
   1fb60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fb64:	ldr	r0, [pc, #24]	; 1fb84 <flatcc_builder_offset_vector_push@@Base+0xf4>
   1fb68:	ldr	r1, [pc, #24]	; 1fb88 <flatcc_builder_offset_vector_push@@Base+0xf8>
   1fb6c:	ldr	r3, [pc, #24]	; 1fb8c <flatcc_builder_offset_vector_push@@Base+0xfc>
   1fb70:	movw	r2, #934	; 0x3a6
   1fb74:	add	r0, pc, r0
   1fb78:	add	r1, pc, r1
   1fb7c:	add	r3, pc, r3
   1fb80:	bl	12f04 <__assert_fail@plt>
   1fb84:	andeq	r9, r0, r9, lsl #3
   1fb88:	andeq	r8, r0, r2, asr sp
   1fb8c:			; <UNDEFINED> instruction: 0x000091b4

0001fb90 <flatcc_builder_append_offset_vector@@Base>:
   1fb90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fb94:	add	fp, sp, #24
   1fb98:	sub	sp, sp, #8
   1fb9c:	mov	r6, r0
   1fba0:	ldr	r0, [r0, #32]
   1fba4:	mov	r8, r1
   1fba8:	ldrh	r1, [r0, #14]
   1fbac:	cmp	r1, #5
   1fbb0:	bne	1fca0 <flatcc_builder_append_offset_vector@@Base+0x110>
   1fbb4:	ldr	r1, [r0, #20]
   1fbb8:	mov	r5, r2
   1fbbc:	adds	r1, r1, r2
   1fbc0:	cmpcc	r1, #1073741824	; 0x40000000
   1fbc4:	bcc	1fbe8 <flatcc_builder_append_offset_vector@@Base+0x58>
   1fbc8:	ldr	r0, [pc, #252]	; 1fccc <flatcc_builder_append_offset_vector@@Base+0x13c>
   1fbcc:	ldr	r1, [pc, #252]	; 1fcd0 <flatcc_builder_append_offset_vector@@Base+0x140>
   1fbd0:	ldr	r3, [pc, #252]	; 1fcd4 <flatcc_builder_append_offset_vector@@Base+0x144>
   1fbd4:	mov	r2, #892	; 0x37c
   1fbd8:	add	r0, pc, r0
   1fbdc:	add	r1, pc, r1
   1fbe0:	add	r3, pc, r3
   1fbe4:	bl	12f04 <__assert_fail@plt>
   1fbe8:	str	r1, [r0, #20]
   1fbec:	ldr	r4, [r6, #20]
   1fbf0:	ldr	r0, [r6, #24]
   1fbf4:	add	r1, r4, r5, lsl #2
   1fbf8:	cmp	r1, r0
   1fbfc:	str	r1, [r6, #20]
   1fc00:	bcs	1fc24 <flatcc_builder_append_offset_vector@@Base+0x94>
   1fc04:	ldr	r0, [r6, #16]
   1fc08:	adds	r7, r0, r4
   1fc0c:	beq	1fc90 <flatcc_builder_append_offset_vector@@Base+0x100>
   1fc10:	lsl	r2, r5, #2
   1fc14:	mov	r0, r7
   1fc18:	mov	r1, r8
   1fc1c:	bl	12e2c <memcpy@plt>
   1fc20:	b	1fc94 <flatcc_builder_append_offset_vector@@Base+0x104>
   1fc24:	ldr	r2, [r6, #28]
   1fc28:	ldr	r0, [r6, #40]	; 0x28
   1fc2c:	ldr	r7, [r6, #48]	; 0x30
   1fc30:	mov	r3, #1
   1fc34:	str	r3, [sp]
   1fc38:	mov	r3, #1
   1fc3c:	add	r1, r1, r2
   1fc40:	add	r2, r1, #1
   1fc44:	add	r1, r6, #60	; 0x3c
   1fc48:	blx	r7
   1fc4c:	mov	r7, #0
   1fc50:	cmp	r0, #0
   1fc54:	bne	1fc94 <flatcc_builder_append_offset_vector@@Base+0x104>
   1fc58:	ldr	r1, [r6, #28]
   1fc5c:	ldr	r0, [r6, #60]	; 0x3c
   1fc60:	ldr	r3, [r6, #64]	; 0x40
   1fc64:	ldr	r2, [r6, #32]
   1fc68:	add	r0, r0, r1
   1fc6c:	sub	r1, r3, r1
   1fc70:	mvn	r3, #3
   1fc74:	cmn	r1, #4
   1fc78:	str	r0, [r6, #16]
   1fc7c:	movcs	r1, r3
   1fc80:	str	r1, [r6, #24]
   1fc84:	str	r3, [r2, #4]
   1fc88:	adds	r7, r0, r4
   1fc8c:	bne	1fc10 <flatcc_builder_append_offset_vector@@Base+0x80>
   1fc90:	mov	r7, #0
   1fc94:	mov	r0, r7
   1fc98:	sub	sp, fp, #24
   1fc9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fca0:	ldr	r0, [pc, #24]	; 1fcc0 <flatcc_builder_append_offset_vector@@Base+0x130>
   1fca4:	ldr	r1, [pc, #24]	; 1fcc4 <flatcc_builder_append_offset_vector@@Base+0x134>
   1fca8:	ldr	r3, [pc, #24]	; 1fcc8 <flatcc_builder_append_offset_vector@@Base+0x138>
   1fcac:	mov	r2, #948	; 0x3b4
   1fcb0:	add	r0, pc, r0
   1fcb4:	add	r1, pc, r1
   1fcb8:	add	r3, pc, r3
   1fcbc:	bl	12f04 <__assert_fail@plt>
   1fcc0:	andeq	r9, r0, sp, asr #32
   1fcc4:	andeq	r8, r0, r6, lsl ip
   1fcc8:	ldrdeq	r9, [r0], -sl
   1fccc:			; <UNDEFINED> instruction: 0x00009db8
   1fcd0:	andeq	r8, r0, lr, ror #25
   1fcd4:	andeq	r9, r0, fp, asr #27

0001fcd8 <flatcc_builder_extend_string@@Base>:
   1fcd8:	push	{r4, r5, fp, lr}
   1fcdc:	add	fp, sp, #8
   1fce0:	sub	sp, sp, #8
   1fce4:	mov	r4, r0
   1fce8:	ldr	r0, [r0, #32]
   1fcec:	ldrh	r2, [r0, #14]
   1fcf0:	cmp	r2, #6
   1fcf4:	bne	1fda4 <flatcc_builder_extend_string@@Base+0xcc>
   1fcf8:	ldr	r2, [r0, #20]
   1fcfc:	adds	r2, r2, r1
   1fd00:	bcs	1fdc4 <flatcc_builder_extend_string@@Base+0xec>
   1fd04:	str	r2, [r0, #20]
   1fd08:	ldr	r5, [r4, #20]
   1fd0c:	ldr	r0, [r4, #24]
   1fd10:	add	r1, r5, r1
   1fd14:	cmp	r1, r0
   1fd18:	str	r1, [r4, #20]
   1fd1c:	bcs	1fd28 <flatcc_builder_extend_string@@Base+0x50>
   1fd20:	ldr	r0, [r4, #16]
   1fd24:	b	1fd98 <flatcc_builder_extend_string@@Base+0xc0>
   1fd28:	ldr	r2, [r4, #28]
   1fd2c:	ldr	r0, [r4, #40]	; 0x28
   1fd30:	ldr	ip, [r4, #48]	; 0x30
   1fd34:	mov	r3, #1
   1fd38:	str	r3, [sp]
   1fd3c:	mov	r3, #1
   1fd40:	add	r1, r1, r2
   1fd44:	add	r2, r1, #1
   1fd48:	add	r1, r4, #60	; 0x3c
   1fd4c:	blx	ip
   1fd50:	mov	r1, r0
   1fd54:	mov	r0, #0
   1fd58:	cmp	r1, #0
   1fd5c:	beq	1fd68 <flatcc_builder_extend_string@@Base+0x90>
   1fd60:	sub	sp, fp, #8
   1fd64:	pop	{r4, r5, fp, pc}
   1fd68:	ldr	r1, [r4, #28]
   1fd6c:	ldr	r0, [r4, #60]	; 0x3c
   1fd70:	ldr	r3, [r4, #64]	; 0x40
   1fd74:	ldr	r2, [r4, #32]
   1fd78:	add	r0, r0, r1
   1fd7c:	sub	r1, r3, r1
   1fd80:	mvn	r3, #3
   1fd84:	cmn	r1, #4
   1fd88:	str	r0, [r4, #16]
   1fd8c:	movcs	r1, r3
   1fd90:	str	r1, [r4, #24]
   1fd94:	str	r3, [r2, #4]
   1fd98:	add	r0, r0, r5
   1fd9c:	sub	sp, fp, #8
   1fda0:	pop	{r4, r5, fp, pc}
   1fda4:	ldr	r0, [pc, #56]	; 1fde4 <flatcc_builder_extend_string@@Base+0x10c>
   1fda8:	ldr	r1, [pc, #56]	; 1fde8 <flatcc_builder_extend_string@@Base+0x110>
   1fdac:	ldr	r3, [pc, #56]	; 1fdec <flatcc_builder_extend_string@@Base+0x114>
   1fdb0:	movw	r2, #957	; 0x3bd
   1fdb4:	add	r0, pc, r0
   1fdb8:	add	r1, pc, r1
   1fdbc:	add	r3, pc, r3
   1fdc0:	bl	12f04 <__assert_fail@plt>
   1fdc4:	ldr	r0, [pc, #36]	; 1fdf0 <flatcc_builder_extend_string@@Base+0x118>
   1fdc8:	ldr	r1, [pc, #36]	; 1fdf4 <flatcc_builder_extend_string@@Base+0x11c>
   1fdcc:	ldr	r3, [pc, #36]	; 1fdf8 <flatcc_builder_extend_string@@Base+0x120>
   1fdd0:	mov	r2, #892	; 0x37c
   1fdd4:	add	r0, pc, r0
   1fdd8:	add	r1, pc, r1
   1fddc:	add	r3, pc, r3
   1fde0:	bl	12f04 <__assert_fail@plt>
   1fde4:	andeq	r9, r0, r2, asr r0
   1fde8:	andeq	r8, r0, r2, lsl fp
   1fdec:	andeq	r9, r0, r6, ror r0
   1fdf0:			; <UNDEFINED> instruction: 0x00009bbc
   1fdf4:	strdeq	r8, [r0], -r2
   1fdf8:	andeq	r9, r0, pc, asr #23

0001fdfc <flatcc_builder_append_string@@Base>:
   1fdfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fe00:	add	fp, sp, #24
   1fe04:	sub	sp, sp, #8
   1fe08:	mov	r6, r0
   1fe0c:	ldr	r0, [r0, #32]
   1fe10:	mov	r8, r1
   1fe14:	ldrh	r1, [r0, #14]
   1fe18:	cmp	r1, #6
   1fe1c:	bne	1fee8 <flatcc_builder_append_string@@Base+0xec>
   1fe20:	ldr	r1, [r0, #20]
   1fe24:	mov	r4, r2
   1fe28:	adds	r1, r1, r2
   1fe2c:	bcs	1ff08 <flatcc_builder_append_string@@Base+0x10c>
   1fe30:	str	r1, [r0, #20]
   1fe34:	ldr	r5, [r6, #20]
   1fe38:	ldr	r0, [r6, #24]
   1fe3c:	add	r1, r5, r4
   1fe40:	cmp	r1, r0
   1fe44:	str	r1, [r6, #20]
   1fe48:	bcs	1fe6c <flatcc_builder_append_string@@Base+0x70>
   1fe4c:	ldr	r0, [r6, #16]
   1fe50:	adds	r7, r0, r5
   1fe54:	beq	1fed8 <flatcc_builder_append_string@@Base+0xdc>
   1fe58:	mov	r0, r7
   1fe5c:	mov	r1, r8
   1fe60:	mov	r2, r4
   1fe64:	bl	12e2c <memcpy@plt>
   1fe68:	b	1fedc <flatcc_builder_append_string@@Base+0xe0>
   1fe6c:	ldr	r2, [r6, #28]
   1fe70:	ldr	r0, [r6, #40]	; 0x28
   1fe74:	ldr	r7, [r6, #48]	; 0x30
   1fe78:	mov	r3, #1
   1fe7c:	str	r3, [sp]
   1fe80:	mov	r3, #1
   1fe84:	add	r1, r1, r2
   1fe88:	add	r2, r1, #1
   1fe8c:	add	r1, r6, #60	; 0x3c
   1fe90:	blx	r7
   1fe94:	mov	r7, #0
   1fe98:	cmp	r0, #0
   1fe9c:	bne	1fedc <flatcc_builder_append_string@@Base+0xe0>
   1fea0:	ldr	r1, [r6, #28]
   1fea4:	ldr	r0, [r6, #60]	; 0x3c
   1fea8:	ldr	r3, [r6, #64]	; 0x40
   1feac:	ldr	r2, [r6, #32]
   1feb0:	add	r0, r0, r1
   1feb4:	sub	r1, r3, r1
   1feb8:	mvn	r3, #3
   1febc:	cmn	r1, #4
   1fec0:	str	r0, [r6, #16]
   1fec4:	movcs	r1, r3
   1fec8:	str	r1, [r6, #24]
   1fecc:	str	r3, [r2, #4]
   1fed0:	adds	r7, r0, r5
   1fed4:	bne	1fe58 <flatcc_builder_append_string@@Base+0x5c>
   1fed8:	mov	r7, #0
   1fedc:	mov	r0, r7
   1fee0:	sub	sp, fp, #24
   1fee4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fee8:	ldr	r0, [pc, #56]	; 1ff28 <flatcc_builder_append_string@@Base+0x12c>
   1feec:	ldr	r1, [pc, #56]	; 1ff2c <flatcc_builder_append_string@@Base+0x130>
   1fef0:	ldr	r3, [pc, #56]	; 1ff30 <flatcc_builder_append_string@@Base+0x134>
   1fef4:	movw	r2, #966	; 0x3c6
   1fef8:	add	r0, pc, r0
   1fefc:	add	r1, pc, r1
   1ff00:	add	r3, pc, r3
   1ff04:	bl	12f04 <__assert_fail@plt>
   1ff08:	ldr	r0, [pc, #36]	; 1ff34 <flatcc_builder_append_string@@Base+0x138>
   1ff0c:	ldr	r1, [pc, #36]	; 1ff38 <flatcc_builder_append_string@@Base+0x13c>
   1ff10:	ldr	r3, [pc, #36]	; 1ff3c <flatcc_builder_append_string@@Base+0x140>
   1ff14:	mov	r2, #892	; 0x37c
   1ff18:	add	r0, pc, r0
   1ff1c:	add	r1, pc, r1
   1ff20:	add	r3, pc, r3
   1ff24:	bl	12f04 <__assert_fail@plt>
   1ff28:	andeq	r8, r0, lr, lsl #30
   1ff2c:	andeq	r8, r0, lr, asr #19
   1ff30:	andeq	r8, r0, r1, ror pc
   1ff34:	andeq	r9, r0, r8, ror sl
   1ff38:	andeq	r8, r0, lr, lsr #19
   1ff3c:	andeq	r9, r0, fp, lsl #21

0001ff40 <flatcc_builder_append_string_str@@Base>:
   1ff40:	push	{r4, r5, fp, lr}
   1ff44:	add	fp, sp, #8
   1ff48:	mov	r5, r0
   1ff4c:	mov	r0, r1
   1ff50:	mov	r4, r1
   1ff54:	bl	12e98 <strlen@plt>
   1ff58:	mov	r2, r0
   1ff5c:	mov	r0, r5
   1ff60:	mov	r1, r4
   1ff64:	pop	{r4, r5, fp, lr}
   1ff68:	b	1fdfc <flatcc_builder_append_string@@Base>

0001ff6c <flatcc_builder_append_string_strn@@Base>:
   1ff6c:	push	{r4, r5, r6, sl, fp, lr}
   1ff70:	add	fp, sp, #16
   1ff74:	mov	r6, r0
   1ff78:	mov	r5, r1
   1ff7c:	mov	r0, r1
   1ff80:	mov	r1, #0
   1ff84:	mov	r4, r2
   1ff88:	bl	12ed4 <memchr@plt>
   1ff8c:	cmp	r0, #0
   1ff90:	mov	r1, r5
   1ff94:	subne	r4, r0, r5
   1ff98:	mov	r0, r6
   1ff9c:	mov	r2, r4
   1ffa0:	pop	{r4, r5, r6, sl, fp, lr}
   1ffa4:	b	1fdfc <flatcc_builder_append_string@@Base>

0001ffa8 <flatcc_builder_truncate_vector@@Base>:
   1ffa8:	push	{fp, lr}
   1ffac:	mov	fp, sp
   1ffb0:	ldr	r2, [r0, #32]
   1ffb4:	ldrh	r3, [r2, #14]
   1ffb8:	cmp	r3, #4
   1ffbc:	bne	20004 <flatcc_builder_truncate_vector@@Base+0x5c>
   1ffc0:	ldr	r3, [r2, #20]
   1ffc4:	cmp	r3, r1
   1ffc8:	bcc	20024 <flatcc_builder_truncate_vector@@Base+0x7c>
   1ffcc:	sub	r3, r3, r1
   1ffd0:	str	r3, [r2, #20]
   1ffd4:	ldr	r2, [r0, #32]
   1ffd8:	ldr	r3, [r0, #20]
   1ffdc:	ldr	ip, [r0, #16]
   1ffe0:	ldr	r2, [r2, #16]
   1ffe4:	mls	r3, r2, r1, r3
   1ffe8:	mul	r2, r2, r1
   1ffec:	mov	r1, #0
   1fff0:	str	r3, [r0, #20]
   1fff4:	add	r0, ip, r3
   1fff8:	bl	12ebc <memset@plt>
   1fffc:	mov	r0, #0
   20000:	pop	{fp, pc}
   20004:	ldr	r0, [pc, #56]	; 20044 <flatcc_builder_truncate_vector@@Base+0x9c>
   20008:	ldr	r1, [pc, #56]	; 20048 <flatcc_builder_truncate_vector@@Base+0xa0>
   2000c:	ldr	r3, [pc, #56]	; 2004c <flatcc_builder_truncate_vector@@Base+0xa4>
   20010:	movw	r2, #985	; 0x3d9
   20014:	add	r0, pc, r0
   20018:	add	r1, pc, r1
   2001c:	add	r3, pc, r3
   20020:	bl	12f04 <__assert_fail@plt>
   20024:	ldr	r0, [pc, #36]	; 20050 <flatcc_builder_truncate_vector@@Base+0xa8>
   20028:	ldr	r1, [pc, #36]	; 20054 <flatcc_builder_truncate_vector@@Base+0xac>
   2002c:	ldr	r3, [pc, #36]	; 20058 <flatcc_builder_truncate_vector@@Base+0xb0>
   20030:	movw	r2, #986	; 0x3da
   20034:	add	r0, pc, r0
   20038:	add	r1, pc, r1
   2003c:	add	r3, pc, r3
   20040:	bl	12f04 <__assert_fail@plt>
   20044:	strdeq	r8, [r0], -r0
   20048:			; <UNDEFINED> instruction: 0x000088b2
   2004c:	andeq	r8, r0, r2, lsr #29
   20050:	andeq	r8, r0, r9, asr #29
   20054:	muleq	r0, r2, r8
   20058:	andeq	r8, r0, r2, lsl #29

0002005c <flatcc_builder_truncate_offset_vector@@Base>:
   2005c:	push	{fp, lr}
   20060:	mov	fp, sp
   20064:	ldr	r2, [r0, #32]
   20068:	ldrh	r3, [r2, #14]
   2006c:	cmp	r3, #5
   20070:	bne	200b8 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   20074:	ldr	r3, [r2, #20]
   20078:	cmp	r3, r1
   2007c:	bcc	200d8 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   20080:	sub	r3, r3, r1
   20084:	str	r3, [r2, #20]
   20088:	ldr	r2, [r0, #32]
   2008c:	ldr	r3, [r0, #20]
   20090:	ldr	ip, [r0, #16]
   20094:	ldr	r2, [r2, #16]
   20098:	mls	r3, r2, r1, r3
   2009c:	mul	r2, r2, r1
   200a0:	mov	r1, #0
   200a4:	str	r3, [r0, #20]
   200a8:	add	r0, ip, r3
   200ac:	bl	12ebc <memset@plt>
   200b0:	mov	r0, #0
   200b4:	pop	{fp, pc}
   200b8:	ldr	r0, [pc, #56]	; 200f8 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   200bc:	ldr	r1, [pc, #56]	; 200fc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   200c0:	ldr	r3, [pc, #56]	; 20100 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   200c4:	movw	r2, #994	; 0x3e2
   200c8:	add	r0, pc, r0
   200cc:	add	r1, pc, r1
   200d0:	add	r3, pc, r3
   200d4:	bl	12f04 <__assert_fail@plt>
   200d8:	ldr	r0, [pc, #36]	; 20104 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   200dc:	ldr	r1, [pc, #36]	; 20108 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   200e0:	ldr	r3, [pc, #36]	; 2010c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   200e4:	movw	r2, #995	; 0x3e3
   200e8:	add	r0, pc, r0
   200ec:	add	r1, pc, r1
   200f0:	add	r3, pc, r3
   200f4:	bl	12f04 <__assert_fail@plt>
   200f8:	andeq	r8, r0, r5, lsr ip
   200fc:	strdeq	r8, [r0], -lr
   20100:	andeq	r8, r0, r1, asr lr
   20104:	andeq	r8, r0, pc, ror lr
   20108:	ldrdeq	r8, [r0], -lr
   2010c:	andeq	r8, r0, r1, lsr lr

00020110 <flatcc_builder_truncate_string@@Base>:
   20110:	push	{fp, lr}
   20114:	mov	fp, sp
   20118:	mov	r2, r1
   2011c:	ldr	r1, [r0, #32]
   20120:	ldrh	r3, [r1, #14]
   20124:	cmp	r3, #6
   20128:	bne	20164 <flatcc_builder_truncate_string@@Base+0x54>
   2012c:	ldr	r3, [r1, #20]
   20130:	cmp	r3, r2
   20134:	bcc	20184 <flatcc_builder_truncate_string@@Base+0x74>
   20138:	sub	r3, r3, r2
   2013c:	str	r3, [r1, #20]
   20140:	ldr	r3, [r0, #20]
   20144:	ldr	r1, [r0, #16]
   20148:	sub	r3, r3, r2
   2014c:	str	r3, [r0, #20]
   20150:	add	r0, r1, r3
   20154:	mov	r1, #0
   20158:	bl	12ebc <memset@plt>
   2015c:	mov	r0, #0
   20160:	pop	{fp, pc}
   20164:	ldr	r0, [pc, #56]	; 201a4 <flatcc_builder_truncate_string@@Base+0x94>
   20168:	ldr	r1, [pc, #56]	; 201a8 <flatcc_builder_truncate_string@@Base+0x98>
   2016c:	ldr	r3, [pc, #56]	; 201ac <flatcc_builder_truncate_string@@Base+0x9c>
   20170:	movw	r2, #1003	; 0x3eb
   20174:	add	r0, pc, r0
   20178:	add	r1, pc, r1
   2017c:	add	r3, pc, r3
   20180:	bl	12f04 <__assert_fail@plt>
   20184:	ldr	r0, [pc, #36]	; 201b0 <flatcc_builder_truncate_string@@Base+0xa0>
   20188:	ldr	r1, [pc, #36]	; 201b4 <flatcc_builder_truncate_string@@Base+0xa4>
   2018c:	ldr	r3, [pc, #36]	; 201b8 <flatcc_builder_truncate_string@@Base+0xa8>
   20190:	mov	r2, #1004	; 0x3ec
   20194:	add	r0, pc, r0
   20198:	add	r1, pc, r1
   2019c:	add	r3, pc, r3
   201a0:	bl	12f04 <__assert_fail@plt>
   201a4:	muleq	r0, r2, ip
   201a8:	andeq	r8, r0, r2, asr r7
   201ac:	andeq	r8, r0, r6, lsr #28
   201b0:	andeq	r8, r0, sp, asr #28
   201b4:	andeq	r8, r0, r2, lsr r7
   201b8:	andeq	r8, r0, r6, lsl #28

000201bc <flatcc_builder_start_vector@@Base>:
   201bc:	push	{r4, r5, r6, r7, fp, lr}
   201c0:	add	fp, sp, #16
   201c4:	mov	r7, #4
   201c8:	cmp	r2, #4
   201cc:	mov	r6, r1
   201d0:	mov	r5, r3
   201d4:	mov	r4, r0
   201d8:	movls	r2, r7
   201dc:	mov	r1, r2
   201e0:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   201e4:	mov	r1, r0
   201e8:	mvn	r0, #0
   201ec:	cmp	r1, #0
   201f0:	popne	{r4, r5, r6, r7, fp, pc}
   201f4:	ldr	r0, [r4, #32]
   201f8:	str	r6, [r0, #16]
   201fc:	mov	r0, #0
   20200:	ldr	r1, [r4, #32]
   20204:	str	r0, [r1, #20]
   20208:	ldr	r1, [r4, #32]
   2020c:	str	r5, [r1, #24]
   20210:	ldr	r1, [r4, #32]
   20214:	strh	r7, [r1, #14]
   20218:	ldr	r2, [r4, #28]
   2021c:	ldr	r3, [r4, #60]	; 0x3c
   20220:	ldr	r7, [r4, #64]	; 0x40
   20224:	add	r3, r3, r2
   20228:	sub	r2, r7, r2
   2022c:	str	r3, [r4, #16]
   20230:	mvn	r3, #3
   20234:	cmn	r2, #4
   20238:	movcs	r2, r3
   2023c:	str	r2, [r4, #24]
   20240:	str	r3, [r1, #4]
   20244:	pop	{r4, r5, r6, r7, fp, pc}

00020248 <flatcc_builder_start_offset_vector@@Base>:
   20248:	push	{r4, r5, fp, lr}
   2024c:	add	fp, sp, #8
   20250:	mov	r1, #4
   20254:	mov	r4, r0
   20258:	mov	r5, #4
   2025c:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   20260:	mov	r1, r0
   20264:	mvn	r0, #0
   20268:	cmp	r1, #0
   2026c:	popne	{r4, r5, fp, pc}
   20270:	ldr	r0, [r4, #32]
   20274:	mov	r2, #5
   20278:	str	r5, [r0, #16]
   2027c:	mov	r0, #0
   20280:	ldr	r1, [r4, #32]
   20284:	str	r0, [r1, #20]
   20288:	ldr	r1, [r4, #32]
   2028c:	strh	r2, [r1, #14]
   20290:	ldr	r2, [r4, #28]
   20294:	ldr	r3, [r4, #60]	; 0x3c
   20298:	ldr	r5, [r4, #64]	; 0x40
   2029c:	add	r3, r3, r2
   202a0:	sub	r2, r5, r2
   202a4:	str	r3, [r4, #16]
   202a8:	mvn	r3, #3
   202ac:	cmn	r2, #4
   202b0:	movcs	r2, r3
   202b4:	str	r2, [r4, #24]
   202b8:	str	r3, [r1, #4]
   202bc:	pop	{r4, r5, fp, pc}

000202c0 <flatcc_builder_create_offset_vector@@Base>:
   202c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   202c4:	add	fp, sp, #24
   202c8:	sub	sp, sp, #8
   202cc:	mov	r8, r1
   202d0:	mov	r1, #4
   202d4:	mov	r6, r2
   202d8:	mov	r4, r0
   202dc:	mov	r7, #4
   202e0:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   202e4:	cmp	r0, #0
   202e8:	beq	202f8 <flatcc_builder_create_offset_vector@@Base+0x38>
   202ec:	mov	r0, #0
   202f0:	sub	sp, fp, #24
   202f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   202f8:	ldr	r0, [r4, #32]
   202fc:	mov	r1, #0
   20300:	str	r7, [r0, #16]
   20304:	ldr	r0, [r4, #32]
   20308:	str	r1, [r0, #20]
   2030c:	mov	r1, #5
   20310:	ldr	r0, [r4, #32]
   20314:	strh	r1, [r0, #14]
   20318:	ldr	r1, [r4, #28]
   2031c:	ldr	r2, [r4, #60]	; 0x3c
   20320:	ldr	r3, [r4, #64]	; 0x40
   20324:	add	r2, r2, r1
   20328:	sub	r1, r3, r1
   2032c:	str	r2, [r4, #16]
   20330:	mvn	r2, #3
   20334:	cmn	r1, #4
   20338:	movcs	r1, r2
   2033c:	str	r1, [r4, #24]
   20340:	str	r2, [r0, #4]
   20344:	ldr	r1, [r0, #20]
   20348:	adds	r1, r1, r6
   2034c:	cmpcc	r1, #1073741824	; 0x40000000
   20350:	bcc	20374 <flatcc_builder_create_offset_vector@@Base+0xb4>
   20354:	ldr	r0, [pc, #200]	; 20424 <flatcc_builder_create_offset_vector@@Base+0x164>
   20358:	ldr	r1, [pc, #200]	; 20428 <flatcc_builder_create_offset_vector@@Base+0x168>
   2035c:	ldr	r3, [pc, #200]	; 2042c <flatcc_builder_create_offset_vector@@Base+0x16c>
   20360:	mov	r2, #892	; 0x37c
   20364:	add	r0, pc, r0
   20368:	add	r1, pc, r1
   2036c:	add	r3, pc, r3
   20370:	bl	12f04 <__assert_fail@plt>
   20374:	str	r1, [r0, #20]
   20378:	ldr	r7, [r4, #20]
   2037c:	ldr	r0, [r4, #24]
   20380:	add	r1, r7, r6, lsl #2
   20384:	cmp	r1, r0
   20388:	str	r1, [r4, #20]
   2038c:	bcs	203a0 <flatcc_builder_create_offset_vector@@Base+0xe0>
   20390:	ldr	r0, [r4, #16]
   20394:	adds	r0, r0, r7
   20398:	bne	20408 <flatcc_builder_create_offset_vector@@Base+0x148>
   2039c:	b	202ec <flatcc_builder_create_offset_vector@@Base+0x2c>
   203a0:	ldr	r2, [r4, #28]
   203a4:	ldr	r0, [r4, #40]	; 0x28
   203a8:	ldr	r5, [r4, #48]	; 0x30
   203ac:	mov	r3, #1
   203b0:	str	r3, [sp]
   203b4:	mov	r3, #1
   203b8:	add	r1, r1, r2
   203bc:	add	r2, r1, #1
   203c0:	add	r1, r4, #60	; 0x3c
   203c4:	blx	r5
   203c8:	cmp	r0, #0
   203cc:	bne	202ec <flatcc_builder_create_offset_vector@@Base+0x2c>
   203d0:	ldr	r1, [r4, #28]
   203d4:	ldr	r0, [r4, #60]	; 0x3c
   203d8:	ldr	r3, [r4, #64]	; 0x40
   203dc:	ldr	r2, [r4, #32]
   203e0:	add	r0, r0, r1
   203e4:	sub	r1, r3, r1
   203e8:	mvn	r3, #3
   203ec:	cmn	r1, #4
   203f0:	str	r0, [r4, #16]
   203f4:	movcs	r1, r3
   203f8:	str	r1, [r4, #24]
   203fc:	str	r3, [r2, #4]
   20400:	adds	r0, r0, r7
   20404:	beq	202ec <flatcc_builder_create_offset_vector@@Base+0x2c>
   20408:	lsl	r2, r6, #2
   2040c:	mov	r1, r8
   20410:	bl	12e2c <memcpy@plt>
   20414:	mov	r0, r4
   20418:	sub	sp, fp, #24
   2041c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   20420:	b	20430 <flatcc_builder_end_offset_vector@@Base>
   20424:	andeq	r9, r0, ip, lsr #12
   20428:	andeq	r8, r0, r2, ror #10
   2042c:	andeq	r9, r0, pc, lsr r6

00020430 <flatcc_builder_end_offset_vector@@Base>:
   20430:	push	{r4, r5, fp, lr}
   20434:	add	fp, sp, #8
   20438:	mov	r4, r0
   2043c:	ldr	r0, [r0, #32]
   20440:	ldrh	r1, [r0, #14]
   20444:	cmp	r1, #5
   20448:	bne	204e8 <flatcc_builder_end_offset_vector@@Base+0xb8>
   2044c:	ldr	r2, [r0, #20]
   20450:	ldr	r1, [r4, #16]
   20454:	mov	r0, r4
   20458:	mov	r3, #0
   2045c:	bl	21554 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   20460:	mov	r5, r0
   20464:	cmp	r0, #0
   20468:	beq	204e0 <flatcc_builder_end_offset_vector@@Base+0xb0>
   2046c:	ldr	r0, [r4, #16]
   20470:	ldr	r2, [r4, #20]
   20474:	mov	r1, #0
   20478:	bl	12ebc <memset@plt>
   2047c:	ldr	r0, [r4, #32]
   20480:	ldr	r1, [r4, #60]	; 0x3c
   20484:	ldr	ip, [r4, #64]	; 0x40
   20488:	ldr	r3, [r0, #8]
   2048c:	str	r3, [r4, #20]
   20490:	ldr	r3, [r0]
   20494:	str	r3, [r4, #28]
   20498:	add	r1, r1, r3
   2049c:	ldr	r2, [r0, #4]
   204a0:	str	r1, [r4, #16]
   204a4:	sub	r1, ip, r3
   204a8:	cmp	r1, r2
   204ac:	movhi	r1, r2
   204b0:	str	r1, [r4, #24]
   204b4:	ldrh	r1, [r4, #130]	; 0x82
   204b8:	ldrh	r2, [r4, #128]	; 0x80
   204bc:	cmp	r2, r1
   204c0:	strhcc	r1, [r4, #128]	; 0x80
   204c4:	ldrh	r1, [r0, #12]
   204c8:	sub	r0, r0, #36	; 0x24
   204cc:	str	r0, [r4, #32]
   204d0:	strh	r1, [r4, #130]	; 0x82
   204d4:	ldr	r0, [r4, #156]	; 0x9c
   204d8:	sub	r0, r0, #1
   204dc:	str	r0, [r4, #156]	; 0x9c
   204e0:	mov	r0, r5
   204e4:	pop	{r4, r5, fp, pc}
   204e8:	ldr	r0, [pc, #24]	; 20508 <flatcc_builder_end_offset_vector@@Base+0xd8>
   204ec:	ldr	r1, [pc, #24]	; 2050c <flatcc_builder_end_offset_vector@@Base+0xdc>
   204f0:	ldr	r3, [pc, #24]	; 20510 <flatcc_builder_end_offset_vector@@Base+0xe0>
   204f4:	movw	r2, #1480	; 0x5c8
   204f8:	add	r0, pc, r0
   204fc:	add	r1, pc, r1
   20500:	add	r3, pc, r3
   20504:	bl	12f04 <__assert_fail@plt>
   20508:	andeq	r8, r0, r5, lsl #16
   2050c:	andeq	r8, r0, lr, asr #7
   20510:	andeq	r8, r0, ip, lsr #28

00020514 <flatcc_builder_start_string@@Base>:
   20514:	push	{r4, r5, fp, lr}
   20518:	add	fp, sp, #8
   2051c:	mov	r1, #1
   20520:	mov	r4, r0
   20524:	mov	r5, #1
   20528:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   2052c:	mov	r1, r0
   20530:	mvn	r0, #0
   20534:	cmp	r1, #0
   20538:	popne	{r4, r5, fp, pc}
   2053c:	ldr	r0, [r4, #32]
   20540:	mov	r2, #6
   20544:	str	r5, [r0, #16]
   20548:	mov	r0, #0
   2054c:	ldr	r1, [r4, #32]
   20550:	str	r0, [r1, #20]
   20554:	ldr	r1, [r4, #32]
   20558:	strh	r2, [r1, #14]
   2055c:	ldr	r2, [r4, #28]
   20560:	ldr	r3, [r4, #60]	; 0x3c
   20564:	ldr	r5, [r4, #64]	; 0x40
   20568:	add	r3, r3, r2
   2056c:	sub	r2, r5, r2
   20570:	str	r3, [r4, #16]
   20574:	mvn	r3, #3
   20578:	cmn	r2, #4
   2057c:	movcs	r2, r3
   20580:	str	r2, [r4, #24]
   20584:	str	r3, [r1, #4]
   20588:	pop	{r4, r5, fp, pc}

0002058c <flatcc_builder_reserve_table@@Base>:
   2058c:	push	{r4, r5, r6, sl, fp, lr}
   20590:	add	fp, sp, #16
   20594:	sub	sp, sp, #8
   20598:	cmn	r1, #1
   2059c:	ble	20670 <flatcc_builder_reserve_table@@Base+0xe4>
   205a0:	mov	r4, r0
   205a4:	ldr	r0, [r0, #32]
   205a8:	mov	r5, r1
   205ac:	ldr	r1, [r4, #56]	; 0x38
   205b0:	ldrh	r2, [r0, #28]
   205b4:	ldr	r0, [r0, #16]
   205b8:	add	r6, r0, r2, lsl #1
   205bc:	add	r0, r6, r5, lsl #1
   205c0:	add	r2, r0, #4
   205c4:	cmp	r2, r1
   205c8:	bls	205f0 <flatcc_builder_reserve_table@@Base+0x64>
   205cc:	ldr	r0, [r4, #40]	; 0x28
   205d0:	ldr	ip, [r4, #48]	; 0x30
   205d4:	mov	r3, #0
   205d8:	add	r1, r4, #52	; 0x34
   205dc:	str	r3, [sp]
   205e0:	mov	r3, #1
   205e4:	blx	ip
   205e8:	cmp	r0, #0
   205ec:	bne	20690 <flatcc_builder_reserve_table@@Base+0x104>
   205f0:	ldr	r0, [r4, #52]	; 0x34
   205f4:	adds	r0, r0, r6
   205f8:	str	r0, [r4, #4]
   205fc:	mvneq	r0, #0
   20600:	subeq	sp, fp, #16
   20604:	popeq	{r4, r5, r6, sl, fp, pc}
   20608:	add	r0, r0, #4
   2060c:	lsl	r1, r5, #1
   20610:	str	r0, [r4, #4]
   20614:	ldr	r0, [r4, #32]
   20618:	ldr	r3, [r4, #80]	; 0x50
   2061c:	ldr	r5, [r0, #20]
   20620:	orr	r0, r1, #1
   20624:	add	r2, r5, r0
   20628:	cmp	r2, r3
   2062c:	bls	20654 <flatcc_builder_reserve_table@@Base+0xc8>
   20630:	ldr	r0, [r4, #40]	; 0x28
   20634:	ldr	r6, [r4, #48]	; 0x30
   20638:	mov	r3, #3
   2063c:	add	r1, r4, #76	; 0x4c
   20640:	str	r3, [sp]
   20644:	mov	r3, #0
   20648:	blx	r6
   2064c:	cmp	r0, #0
   20650:	bne	20690 <flatcc_builder_reserve_table@@Base+0x104>
   20654:	ldr	r0, [r4, #76]	; 0x4c
   20658:	adds	r0, r0, r5
   2065c:	str	r0, [r4]
   20660:	mov	r0, #0
   20664:	mvneq	r0, #0
   20668:	sub	sp, fp, #16
   2066c:	pop	{r4, r5, r6, sl, fp, pc}
   20670:	ldr	r0, [pc, #56]	; 206b0 <flatcc_builder_reserve_table@@Base+0x124>
   20674:	ldr	r1, [pc, #56]	; 206b4 <flatcc_builder_reserve_table@@Base+0x128>
   20678:	ldr	r3, [pc, #56]	; 206b8 <flatcc_builder_reserve_table@@Base+0x12c>
   2067c:	movw	r2, #1065	; 0x429
   20680:	add	r0, pc, r0
   20684:	add	r1, pc, r1
   20688:	add	r3, pc, r3
   2068c:	bl	12f04 <__assert_fail@plt>
   20690:	ldr	r0, [pc, #36]	; 206bc <flatcc_builder_reserve_table@@Base+0x130>
   20694:	ldr	r1, [pc, #36]	; 206c0 <flatcc_builder_reserve_table@@Base+0x134>
   20698:	ldr	r3, [pc, #36]	; 206c4 <flatcc_builder_reserve_table@@Base+0x138>
   2069c:	mov	r2, #308	; 0x134
   206a0:	add	r0, pc, r0
   206a4:	add	r1, pc, r1
   206a8:	add	r3, pc, r3
   206ac:	bl	12f04 <__assert_fail@plt>
   206b0:	andeq	r8, r0, r4, asr #19
   206b4:	andeq	r8, r0, r6, asr #4
   206b8:	andeq	r8, r0, fp, ror r9
   206bc:	andeq	r9, r0, r7, ror #7
   206c0:	andeq	r8, r0, r6, lsr #4
   206c4:	andeq	r9, r0, r9, lsl r2

000206c8 <flatcc_builder_start_table@@Base>:
   206c8:	push	{r4, r5, r6, r7, fp, lr}
   206cc:	add	fp, sp, #16
   206d0:	sub	sp, sp, #8
   206d4:	mov	r6, r1
   206d8:	mov	r1, #4
   206dc:	mov	r4, r0
   206e0:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   206e4:	mvn	r5, #0
   206e8:	cmp	r0, #0
   206ec:	beq	206fc <flatcc_builder_start_table@@Base+0x34>
   206f0:	mov	r0, r5
   206f4:	sub	sp, fp, #16
   206f8:	pop	{r4, r5, r6, r7, fp, pc}
   206fc:	mov	r1, r4
   20700:	ldr	r2, [r4, #4]
   20704:	ldr	r3, [r4, #32]
   20708:	ldr	r0, [r1, #52]!	; 0x34
   2070c:	sub	r0, r2, r0
   20710:	str	r0, [r3, #16]
   20714:	ldr	r0, [r4]
   20718:	ldr	r3, [r4, #76]	; 0x4c
   2071c:	ldr	r2, [r4, #32]
   20720:	sub	r0, r0, r3
   20724:	mov	r3, #0
   20728:	str	r0, [r2, #20]
   2072c:	ldr	r0, [r4, #12]
   20730:	ldr	r2, [r4, #32]
   20734:	str	r0, [r2, #24]
   20738:	ldr	r0, [r4, #32]
   2073c:	ldrh	r2, [r4, #8]
   20740:	strh	r2, [r0, #28]
   20744:	movw	r0, #15186	; 0x3b52
   20748:	strh	r3, [r4, #8]
   2074c:	mov	r2, #3
   20750:	movt	r0, #12137	; 0x2f69
   20754:	str	r0, [r4, #12]
   20758:	ldr	r0, [r4, #32]
   2075c:	strh	r2, [r0, #14]
   20760:	ldrh	r2, [r0, #28]
   20764:	ldr	r0, [r0, #16]
   20768:	add	r7, r0, r2, lsl #1
   2076c:	add	r0, r7, r6, lsl #1
   20770:	add	r2, r0, #4
   20774:	ldr	r0, [r4, #56]	; 0x38
   20778:	cmp	r2, r0
   2077c:	bls	2079c <flatcc_builder_start_table@@Base+0xd4>
   20780:	ldr	r0, [r4, #40]	; 0x28
   20784:	ldr	ip, [r4, #48]	; 0x30
   20788:	str	r3, [sp]
   2078c:	mov	r3, #1
   20790:	blx	ip
   20794:	cmp	r0, #0
   20798:	bne	20840 <flatcc_builder_start_table@@Base+0x178>
   2079c:	ldr	r0, [r4, #52]	; 0x34
   207a0:	adds	r0, r0, r7
   207a4:	str	r0, [r4, #4]
   207a8:	beq	206f0 <flatcc_builder_start_table@@Base+0x28>
   207ac:	add	r0, r0, #4
   207b0:	lsl	r1, r6, #1
   207b4:	str	r0, [r4, #4]
   207b8:	ldr	r0, [r4, #32]
   207bc:	ldr	r3, [r4, #80]	; 0x50
   207c0:	ldr	r6, [r0, #20]
   207c4:	orr	r0, r1, #1
   207c8:	add	r2, r6, r0
   207cc:	cmp	r2, r3
   207d0:	bls	207f8 <flatcc_builder_start_table@@Base+0x130>
   207d4:	ldr	r0, [r4, #40]	; 0x28
   207d8:	ldr	r7, [r4, #48]	; 0x30
   207dc:	mov	r3, #3
   207e0:	add	r1, r4, #76	; 0x4c
   207e4:	str	r3, [sp]
   207e8:	mov	r3, #0
   207ec:	blx	r7
   207f0:	cmp	r0, #0
   207f4:	bne	20840 <flatcc_builder_start_table@@Base+0x178>
   207f8:	ldr	r0, [r4, #76]	; 0x4c
   207fc:	adds	r0, r0, r6
   20800:	str	r0, [r4]
   20804:	beq	206f0 <flatcc_builder_start_table@@Base+0x28>
   20808:	ldr	r0, [r4, #28]
   2080c:	ldr	r2, [r4, #60]	; 0x3c
   20810:	ldr	r3, [r4, #64]	; 0x40
   20814:	ldr	r1, [r4, #32]
   20818:	mov	r5, #0
   2081c:	add	r2, r2, r0
   20820:	sub	r0, r3, r0
   20824:	str	r2, [r4, #16]
   20828:	movw	r2, #65532	; 0xfffc
   2082c:	cmp	r0, r2
   20830:	movcs	r0, r2
   20834:	str	r0, [r4, #24]
   20838:	str	r2, [r1, #4]
   2083c:	b	206f0 <flatcc_builder_start_table@@Base+0x28>
   20840:	ldr	r0, [pc, #24]	; 20860 <flatcc_builder_start_table@@Base+0x198>
   20844:	ldr	r1, [pc, #24]	; 20864 <flatcc_builder_start_table@@Base+0x19c>
   20848:	ldr	r3, [pc, #24]	; 20868 <flatcc_builder_start_table@@Base+0x1a0>
   2084c:	mov	r2, #308	; 0x134
   20850:	add	r0, pc, r0
   20854:	add	r1, pc, r1
   20858:	add	r3, pc, r3
   2085c:	bl	12f04 <__assert_fail@plt>
   20860:	andeq	r9, r0, r7, lsr r2
   20864:	andeq	r8, r0, r6, ror r0
   20868:	andeq	r9, r0, r9, rrx

0002086c <flatcc_builder_create_vtable@@Base>:
   2086c:	push	{r4, r5, fp, lr}
   20870:	add	fp, sp, #8
   20874:	sub	sp, sp, #80	; 0x50
   20878:	mov	r3, r2
   2087c:	mov	r2, #0
   20880:	mov	r4, r0
   20884:	cmp	r3, #0
   20888:	str	r2, [sp, #12]
   2088c:	str	r2, [sp, #8]
   20890:	movne	r2, #1
   20894:	strne	r1, [sp, #16]
   20898:	strne	r3, [sp, #8]
   2089c:	strne	r3, [sp, #20]
   208a0:	strne	r2, [sp, #12]
   208a4:	ldr	r0, [r4, #152]	; 0x98
   208a8:	cmp	r0, #0
   208ac:	bne	208bc <flatcc_builder_create_vtable@@Base+0x50>
   208b0:	ldr	r0, [r4, #180]	; 0xb4
   208b4:	cmp	r0, #0
   208b8:	beq	20908 <flatcc_builder_create_vtable@@Base+0x9c>
   208bc:	cmp	r3, #0
   208c0:	beq	2094c <flatcc_builder_create_vtable@@Base+0xe0>
   208c4:	ldr	r0, [r4, #136]	; 0x88
   208c8:	ldr	ip, [r4, #44]	; 0x2c
   208cc:	add	r1, sp, #8
   208d0:	add	r1, r1, #8
   208d4:	sub	r5, r0, r3
   208d8:	ldr	r0, [r4, #36]	; 0x24
   208dc:	str	r3, [sp]
   208e0:	mov	r3, r5
   208e4:	blx	ip
   208e8:	cmp	r0, #0
   208ec:	bne	2096c <flatcc_builder_create_vtable@@Base+0x100>
   208f0:	cmp	r5, #0
   208f4:	str	r5, [r4, #136]	; 0x88
   208f8:	beq	20940 <flatcc_builder_create_vtable@@Base+0xd4>
   208fc:	add	r0, r5, #1
   20900:	sub	sp, fp, #8
   20904:	pop	{r4, r5, fp, pc}
   20908:	ldr	r5, [r4, #140]	; 0x8c
   2090c:	ldr	r0, [r4, #36]	; 0x24
   20910:	ldr	ip, [r4, #44]	; 0x2c
   20914:	add	r1, r5, r3
   20918:	str	r1, [r4, #140]	; 0x8c
   2091c:	add	r1, sp, #8
   20920:	str	r3, [sp]
   20924:	mov	r3, r5
   20928:	add	r1, r1, #8
   2092c:	blx	ip
   20930:	cmp	r0, #0
   20934:	bne	2098c <flatcc_builder_create_vtable@@Base+0x120>
   20938:	adds	r0, r5, #1
   2093c:	bne	20900 <flatcc_builder_create_vtable@@Base+0x94>
   20940:	mov	r0, #0
   20944:	sub	sp, fp, #8
   20948:	pop	{r4, r5, fp, pc}
   2094c:	ldr	r0, [pc, #100]	; 209b8 <flatcc_builder_create_vtable@@Base+0x14c>
   20950:	ldr	r1, [pc, #100]	; 209bc <flatcc_builder_create_vtable@@Base+0x150>
   20954:	ldr	r3, [pc, #100]	; 209c0 <flatcc_builder_create_vtable@@Base+0x154>
   20958:	movw	r2, #647	; 0x287
   2095c:	add	r0, pc, r0
   20960:	add	r1, pc, r1
   20964:	add	r3, pc, r3
   20968:	bl	12f04 <__assert_fail@plt>
   2096c:	ldr	r0, [pc, #80]	; 209c4 <flatcc_builder_create_vtable@@Base+0x158>
   20970:	ldr	r1, [pc, #80]	; 209c8 <flatcc_builder_create_vtable@@Base+0x15c>
   20974:	ldr	r3, [pc, #80]	; 209cc <flatcc_builder_create_vtable@@Base+0x160>
   20978:	movw	r2, #651	; 0x28b
   2097c:	add	r0, pc, r0
   20980:	add	r1, pc, r1
   20984:	add	r3, pc, r3
   20988:	bl	12f04 <__assert_fail@plt>
   2098c:	ldr	r0, [pc, #24]	; 209ac <flatcc_builder_create_vtable@@Base+0x140>
   20990:	ldr	r1, [pc, #24]	; 209b0 <flatcc_builder_create_vtable@@Base+0x144>
   20994:	ldr	r3, [pc, #24]	; 209b4 <flatcc_builder_create_vtable@@Base+0x148>
   20998:	movw	r2, #677	; 0x2a5
   2099c:	add	r0, pc, r0
   209a0:	add	r1, pc, r1
   209a4:	add	r3, pc, r3
   209a8:	bl	12f04 <__assert_fail@plt>
   209ac:	andeq	r9, r0, fp, ror #1
   209b0:	andeq	r7, r0, sl, lsr #30
   209b4:	andeq	r9, r0, lr, asr r0
   209b8:	andeq	r9, r0, fp, lsr #2
   209bc:	andeq	r7, r0, sl, ror #30
   209c0:	andeq	r8, r0, r2, ror #31
   209c4:	andeq	r9, r0, fp, lsl #2
   209c8:	andeq	r7, r0, sl, asr #30
   209cc:	andeq	r8, r0, r2, asr #31

000209d0 <flatcc_builder_create_cached_vtable@@Base>:
   209d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209d4:	add	fp, sp, #28
   209d8:	sub	sp, sp, #20
   209dc:	mov	sl, r0
   209e0:	ldr	r0, [r0, #116]	; 0x74
   209e4:	mov	r8, r3
   209e8:	mov	r5, r2
   209ec:	str	r1, [sp, #16]
   209f0:	cmp	r0, #0
   209f4:	beq	20a98 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   209f8:	ldr	r1, [sl, #92]	; 0x5c
   209fc:	rsb	r0, r0, #32
   20a00:	lsr	r0, r8, r0
   20a04:	add	r6, r1, r0, lsl #2
   20a08:	cmp	r6, #0
   20a0c:	beq	20b5c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   20a10:	ldr	r7, [r6]
   20a14:	str	r6, [sp, #12]
   20a18:	cmp	r7, #0
   20a1c:	beq	20b64 <flatcc_builder_create_cached_vtable@@Base+0x194>
   20a20:	ldr	r4, [sl, #68]	; 0x44
   20a24:	ldr	r8, [sl, #100]	; 0x64
   20a28:	mov	r0, #0
   20a2c:	str	r0, [sp, #8]
   20a30:	add	r9, r8, r7
   20a34:	mov	r1, r4
   20a38:	ldr	r0, [r9, #8]
   20a3c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   20a40:	cmp	r0, r5
   20a44:	bne	20a5c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   20a48:	ldr	r0, [sp, #16]
   20a4c:	mov	r2, r5
   20a50:	bl	12e38 <memcmp@plt>
   20a54:	cmp	r0, #0
   20a58:	beq	20a70 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   20a5c:	ldr	r7, [r9, #12]!
   20a60:	cmp	r7, #0
   20a64:	mov	r6, r9
   20a68:	bne	20a30 <flatcc_builder_create_cached_vtable@@Base+0x60>
   20a6c:	b	20b54 <flatcc_builder_create_cached_vtable@@Base+0x184>
   20a70:	ldr	r0, [sl, #152]	; 0x98
   20a74:	ldr	r1, [r9, #4]
   20a78:	cmp	r1, r0
   20a7c:	beq	20cc8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   20a80:	mov	r6, r9
   20a84:	mov	r0, r9
   20a88:	ldr	r7, [r6, #12]!
   20a8c:	cmp	r7, #0
   20a90:	bne	20a2c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   20a94:	b	20b68 <flatcc_builder_create_cached_vtable@@Base+0x198>
   20a98:	ldr	r0, [sl, #124]	; 0x7c
   20a9c:	cmp	r0, #0
   20aa0:	bne	20d14 <flatcc_builder_create_cached_vtable@@Base+0x344>
   20aa4:	ldr	r0, [sl, #104]	; 0x68
   20aa8:	add	r7, sl, #100	; 0x64
   20aac:	cmp	r0, #15
   20ab0:	bhi	20adc <flatcc_builder_create_cached_vtable@@Base+0x10c>
   20ab4:	ldr	r0, [sl, #40]	; 0x28
   20ab8:	ldr	r6, [sl, #48]	; 0x30
   20abc:	mov	r1, #6
   20ac0:	mov	r2, #16
   20ac4:	mov	r3, #0
   20ac8:	str	r1, [sp]
   20acc:	mov	r1, r7
   20ad0:	blx	r6
   20ad4:	cmp	r0, #0
   20ad8:	bne	20cf4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   20adc:	ldr	r0, [r7]
   20ae0:	mov	r7, #0
   20ae4:	cmp	r0, #0
   20ae8:	beq	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20aec:	mov	r0, #16
   20af0:	mov	r2, #5
   20af4:	add	r1, sl, #92	; 0x5c
   20af8:	mov	r3, #1
   20afc:	mov	r4, #256	; 0x100
   20b00:	str	r0, [sl, #124]	; 0x7c
   20b04:	ldr	r0, [sl, #40]	; 0x28
   20b08:	ldr	r6, [sl, #48]	; 0x30
   20b0c:	str	r2, [sp]
   20b10:	mov	r2, #256	; 0x100
   20b14:	blx	r6
   20b18:	cmp	r0, #0
   20b1c:	bne	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20b20:	ldr	r0, [sl, #96]	; 0x60
   20b24:	mov	r1, r4
   20b28:	lsl	r4, r4, #1
   20b2c:	cmp	r0, r1, lsl #1
   20b30:	bcs	20b24 <flatcc_builder_create_cached_vtable@@Base+0x154>
   20b34:	lsr	r1, r1, #2
   20b38:	mvn	r0, #0
   20b3c:	mov	r2, #1
   20b40:	add	r0, r0, #1
   20b44:	cmp	r1, r2, lsl r0
   20b48:	bhi	20b40 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20b4c:	str	r0, [sl, #116]	; 0x74
   20b50:	b	209f8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   20b54:	ldr	r9, [sp, #8]
   20b58:	b	20b68 <flatcc_builder_create_cached_vtable@@Base+0x198>
   20b5c:	mov	r7, #0
   20b60:	b	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20b64:	mov	r9, #0
   20b68:	ldr	r4, [sl, #124]	; 0x7c
   20b6c:	ldr	r0, [sl, #104]	; 0x68
   20b70:	add	r7, sl, #100	; 0x64
   20b74:	add	r2, r4, #16
   20b78:	cmp	r2, r0
   20b7c:	bls	20ba4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   20b80:	ldr	r0, [sl, #40]	; 0x28
   20b84:	ldr	r6, [sl, #48]	; 0x30
   20b88:	mov	r1, #6
   20b8c:	mov	r3, #0
   20b90:	str	r1, [sp]
   20b94:	mov	r1, r7
   20b98:	blx	r6
   20b9c:	cmp	r0, #0
   20ba0:	bne	20cf4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   20ba4:	ldr	r0, [r7]
   20ba8:	mov	r7, #0
   20bac:	adds	r4, r0, r4
   20bb0:	beq	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20bb4:	ldr	r0, [sl, #124]	; 0x7c
   20bb8:	ldr	r1, [sl, #152]	; 0x98
   20bbc:	add	r2, r0, #16
   20bc0:	str	r2, [sl, #124]	; 0x7c
   20bc4:	ldr	r2, [sp, #12]
   20bc8:	str	r1, [r4, #4]
   20bcc:	ldr	r1, [r2]
   20bd0:	str	r1, [r4, #12]
   20bd4:	ldr	r1, [sp, #16]
   20bd8:	str	r0, [r2]
   20bdc:	mov	r0, sl
   20be0:	mov	r2, r5
   20be4:	bl	2086c <flatcc_builder_create_vtable@@Base>
   20be8:	cmp	r0, #0
   20bec:	str	r0, [r4]
   20bf0:	beq	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20bf4:	cmp	r9, #0
   20bf8:	beq	20c14 <flatcc_builder_create_cached_vtable@@Base+0x244>
   20bfc:	ldr	r0, [r9, #8]
   20c00:	str	r0, [r4, #8]
   20c04:	ldr	r7, [r4]
   20c08:	mov	r0, r7
   20c0c:	sub	sp, fp, #28
   20c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c14:	ldr	r6, [sl, #120]	; 0x78
   20c18:	ldr	r0, [sl, #172]	; 0xac
   20c1c:	add	r2, r6, r5
   20c20:	cmp	r0, #0
   20c24:	beq	20c60 <flatcc_builder_create_cached_vtable@@Base+0x290>
   20c28:	cmp	r0, r2
   20c2c:	bcs	20c60 <flatcc_builder_create_cached_vtable@@Base+0x290>
   20c30:	ldr	r0, [sl, #116]	; 0x74
   20c34:	cmp	r0, #0
   20c38:	beq	20c04 <flatcc_builder_create_cached_vtable@@Base+0x234>
   20c3c:	ldr	r0, [sl, #92]	; 0x5c
   20c40:	ldr	r2, [sl, #96]	; 0x60
   20c44:	mov	r1, #0
   20c48:	mov	r5, #0
   20c4c:	bl	12ebc <memset@plt>
   20c50:	mov	r0, #16
   20c54:	str	r5, [sl, #120]	; 0x78
   20c58:	str	r0, [sl, #124]	; 0x7c
   20c5c:	b	20c04 <flatcc_builder_create_cached_vtable@@Base+0x234>
   20c60:	ldr	r0, [sl, #72]	; 0x48
   20c64:	add	r7, sl, #68	; 0x44
   20c68:	cmp	r2, r0
   20c6c:	bls	20c94 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   20c70:	ldr	r0, [sl, #40]	; 0x28
   20c74:	ldr	ip, [sl, #48]	; 0x30
   20c78:	mov	r1, #2
   20c7c:	mov	r3, #0
   20c80:	str	r1, [sp]
   20c84:	mov	r1, r7
   20c88:	blx	ip
   20c8c:	cmp	r0, #0
   20c90:	bne	20cf4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   20c94:	ldr	r0, [r7]
   20c98:	adds	r0, r0, r6
   20c9c:	beq	20cc0 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   20ca0:	ldr	r1, [sl, #120]	; 0x78
   20ca4:	mov	r2, r5
   20ca8:	str	r1, [r4, #8]
   20cac:	add	r1, r1, r5
   20cb0:	str	r1, [sl, #120]	; 0x78
   20cb4:	ldr	r1, [sp, #16]
   20cb8:	bl	12e2c <memcpy@plt>
   20cbc:	b	20c04 <flatcc_builder_create_cached_vtable@@Base+0x234>
   20cc0:	mvn	r7, #0
   20cc4:	b	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20cc8:	ldr	r0, [sp, #12]
   20ccc:	cmp	r6, r0
   20cd0:	beq	20cec <flatcc_builder_create_cached_vtable@@Base+0x31c>
   20cd4:	mov	r1, r0
   20cd8:	ldr	r0, [r9, #12]
   20cdc:	str	r0, [r6]
   20ce0:	ldr	r0, [r1]
   20ce4:	str	r0, [r9, #12]
   20ce8:	str	r7, [r1]
   20cec:	ldr	r7, [r9]
   20cf0:	b	20c08 <flatcc_builder_create_cached_vtable@@Base+0x238>
   20cf4:	ldr	r0, [pc, #68]	; 20d40 <flatcc_builder_create_cached_vtable@@Base+0x370>
   20cf8:	ldr	r1, [pc, #68]	; 20d44 <flatcc_builder_create_cached_vtable@@Base+0x374>
   20cfc:	ldr	r3, [pc, #68]	; 20d48 <flatcc_builder_create_cached_vtable@@Base+0x378>
   20d00:	mov	r2, #308	; 0x134
   20d04:	add	r0, pc, r0
   20d08:	add	r1, pc, r1
   20d0c:	add	r3, pc, r3
   20d10:	bl	12f04 <__assert_fail@plt>
   20d14:	ldr	r0, [pc, #24]	; 20d34 <flatcc_builder_create_cached_vtable@@Base+0x364>
   20d18:	ldr	r1, [pc, #24]	; 20d38 <flatcc_builder_create_cached_vtable@@Base+0x368>
   20d1c:	ldr	r3, [pc, #24]	; 20d3c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   20d20:	movw	r2, #342	; 0x156
   20d24:	add	r0, pc, r0
   20d28:	add	r1, pc, r1
   20d2c:	add	r3, pc, r3
   20d30:	bl	12f04 <__assert_fail@plt>
   20d34:	andeq	r8, r0, r7, lsr #26
   20d38:	andeq	r7, r0, r2, lsr #23
   20d3c:	andeq	r8, r0, lr, lsr #26
   20d40:	andeq	r8, r0, r3, lsl #27
   20d44:	andeq	r7, r0, r2, asr #23
   20d48:			; <UNDEFINED> instruction: 0x00008bb5

00020d4c <flatcc_builder_create_table@@Base>:
   20d4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20d50:	add	fp, sp, #24
   20d54:	sub	sp, sp, #80	; 0x50
   20d58:	ldr	r5, [fp, #12]
   20d5c:	cmn	r5, #1
   20d60:	ble	20eb4 <flatcc_builder_create_table@@Base+0x168>
   20d64:	ldr	ip, [fp, #16]
   20d68:	tst	ip, #1
   20d6c:	beq	20ed4 <flatcc_builder_create_table@@Base+0x188>
   20d70:	mov	r8, r0
   20d74:	ldrh	r0, [r0, #128]	; 0x80
   20d78:	cmp	r3, #4
   20d7c:	movls	r3, #4
   20d80:	cmp	r0, r3
   20d84:	strhcc	r3, [r8, #128]	; 0x80
   20d88:	sub	r3, r3, #1
   20d8c:	cmp	r5, #1
   20d90:	ldr	r4, [r8, #136]	; 0x88
   20d94:	sub	r0, r4, r2
   20d98:	and	r0, r0, r3
   20d9c:	add	r3, ip, r0
   20da0:	mvn	ip, #3
   20da4:	sub	r6, ip, r2
   20da8:	add	r4, r6, r4
   20dac:	add	r6, r4, #1
   20db0:	sub	r3, r6, r3
   20db4:	str	r3, [fp, #-28]	; 0xffffffe4
   20db8:	blt	20de4 <flatcc_builder_create_table@@Base+0x98>
   20dbc:	ldr	r3, [fp, #8]
   20dc0:	sub	r6, r4, r0
   20dc4:	sub	r4, ip, r6
   20dc8:	ldrh	r6, [r3], #2
   20dcc:	subs	r5, r5, #1
   20dd0:	ldr	r7, [r6, r1]
   20dd4:	add	r7, r4, r7
   20dd8:	sub	r7, r7, r6
   20ddc:	str	r7, [r6, r1]
   20de0:	bne	20dc8 <flatcc_builder_create_table@@Base+0x7c>
   20de4:	sub	r3, fp, #28
   20de8:	mov	r4, #4
   20dec:	cmp	r2, #0
   20df0:	str	r3, [sp, #12]
   20df4:	mov	r3, #1
   20df8:	str	r4, [sp, #4]
   20dfc:	str	r4, [sp, #16]
   20e00:	str	r3, [sp, #8]
   20e04:	beq	20e20 <flatcc_builder_create_table@@Base+0xd4>
   20e08:	mov	r3, #2
   20e0c:	add	r4, r2, #4
   20e10:	str	r1, [sp, #20]
   20e14:	str	r2, [sp, #24]
   20e18:	str	r3, [sp, #8]
   20e1c:	str	r4, [sp, #4]
   20e20:	cmp	r0, #0
   20e24:	beq	20e50 <flatcc_builder_create_table@@Base+0x104>
   20e28:	add	r4, r4, r0
   20e2c:	add	r1, sp, #4
   20e30:	str	r4, [sp, #4]
   20e34:	add	r1, r1, r3, lsl #3
   20e38:	add	r3, r3, #1
   20e3c:	ldr	r2, [pc, #208]	; 20f14 <flatcc_builder_create_table@@Base+0x1c8>
   20e40:	ldr	r2, [pc, r2]
   20e44:	str	r2, [r1, #8]
   20e48:	str	r0, [r1, #12]
   20e4c:	str	r3, [sp, #8]
   20e50:	cmp	r4, #0
   20e54:	ble	20ef4 <flatcc_builder_create_table@@Base+0x1a8>
   20e58:	ldr	r0, [r8, #136]	; 0x88
   20e5c:	ldr	r7, [r8, #44]	; 0x2c
   20e60:	add	r1, sp, #4
   20e64:	mov	r2, r3
   20e68:	add	r1, r1, #8
   20e6c:	sub	r5, r0, r4
   20e70:	ldr	r0, [r8, #36]	; 0x24
   20e74:	str	r4, [sp]
   20e78:	mov	r3, r5
   20e7c:	blx	r7
   20e80:	cmp	r0, #0
   20e84:	streq	r5, [r8, #136]	; 0x88
   20e88:	moveq	r0, r5
   20e8c:	subeq	sp, fp, #24
   20e90:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e94:	ldr	r0, [pc, #160]	; 20f3c <flatcc_builder_create_table@@Base+0x1f0>
   20e98:	ldr	r1, [pc, #160]	; 20f40 <flatcc_builder_create_table@@Base+0x1f4>
   20e9c:	ldr	r3, [pc, #160]	; 20f44 <flatcc_builder_create_table@@Base+0x1f8>
   20ea0:	movw	r2, #651	; 0x28b
   20ea4:	add	r0, pc, r0
   20ea8:	add	r1, pc, r1
   20eac:	add	r3, pc, r3
   20eb0:	bl	12f04 <__assert_fail@plt>
   20eb4:	ldr	r0, [pc, #92]	; 20f18 <flatcc_builder_create_table@@Base+0x1cc>
   20eb8:	ldr	r1, [pc, #92]	; 20f1c <flatcc_builder_create_table@@Base+0x1d0>
   20ebc:	ldr	r3, [pc, #92]	; 20f20 <flatcc_builder_create_table@@Base+0x1d4>
   20ec0:	movw	r2, #1237	; 0x4d5
   20ec4:	add	r0, pc, r0
   20ec8:	add	r1, pc, r1
   20ecc:	add	r3, pc, r3
   20ed0:	bl	12f04 <__assert_fail@plt>
   20ed4:	ldr	r0, [pc, #72]	; 20f24 <flatcc_builder_create_table@@Base+0x1d8>
   20ed8:	ldr	r1, [pc, #72]	; 20f28 <flatcc_builder_create_table@@Base+0x1dc>
   20edc:	ldr	r3, [pc, #72]	; 20f2c <flatcc_builder_create_table@@Base+0x1e0>
   20ee0:	movw	r2, #1243	; 0x4db
   20ee4:	add	r0, pc, r0
   20ee8:	add	r1, pc, r1
   20eec:	add	r3, pc, r3
   20ef0:	bl	12f04 <__assert_fail@plt>
   20ef4:	ldr	r0, [pc, #52]	; 20f30 <flatcc_builder_create_table@@Base+0x1e4>
   20ef8:	ldr	r1, [pc, #52]	; 20f34 <flatcc_builder_create_table@@Base+0x1e8>
   20efc:	ldr	r3, [pc, #52]	; 20f38 <flatcc_builder_create_table@@Base+0x1ec>
   20f00:	movw	r2, #647	; 0x287
   20f04:	add	r0, pc, r0
   20f08:	add	r1, pc, r1
   20f0c:	add	r3, pc, r3
   20f10:	bl	12f04 <__assert_fail@plt>
   20f14:	andeq	sl, r1, ip, lsl r2
   20f18:	andeq	r8, r0, r9, ror r1
   20f1c:	andeq	r7, r0, r2, lsl #20
   20f20:	andeq	r8, r0, r3, lsl #3
   20f24:	andeq	r8, r0, r7, lsl #4
   20f28:	andeq	r7, r0, r2, ror #19
   20f2c:	andeq	r8, r0, r3, ror #2
   20f30:	andeq	r8, r0, r3, lsl #23
   20f34:	andeq	r7, r0, r2, asr #19
   20f38:	andeq	r8, r0, sl, lsr sl
   20f3c:	andeq	r8, r0, r3, ror #23
   20f40:	andeq	r7, r0, r2, lsr #20
   20f44:	muleq	r0, sl, sl

00020f48 <flatcc_builder_check_required_field@@Base>:
   20f48:	ldr	r2, [r0, #32]
   20f4c:	ldrh	r2, [r2, #14]
   20f50:	cmp	r2, #3
   20f54:	bne	20f84 <flatcc_builder_check_required_field@@Base+0x3c>
   20f58:	ldrh	r3, [r0, #8]
   20f5c:	mov	r2, #0
   20f60:	cmp	r3, r1
   20f64:	bls	20f7c <flatcc_builder_check_required_field@@Base+0x34>
   20f68:	ldr	r0, [r0, #4]
   20f6c:	add	r0, r0, r1, lsl #1
   20f70:	ldrh	r2, [r0]
   20f74:	cmp	r2, #0
   20f78:	movwne	r2, #1
   20f7c:	mov	r0, r2
   20f80:	bx	lr
   20f84:	push	{fp, lr}
   20f88:	mov	fp, sp
   20f8c:	ldr	r0, [pc, #24]	; 20fac <flatcc_builder_check_required_field@@Base+0x64>
   20f90:	ldr	r1, [pc, #24]	; 20fb0 <flatcc_builder_check_required_field@@Base+0x68>
   20f94:	ldr	r3, [pc, #24]	; 20fb4 <flatcc_builder_check_required_field@@Base+0x6c>
   20f98:	movw	r2, #1272	; 0x4f8
   20f9c:	add	r0, pc, r0
   20fa0:	add	r1, pc, r1
   20fa4:	add	r3, pc, r3
   20fa8:	bl	12f04 <__assert_fail@plt>
   20fac:	andeq	r8, r0, sl, asr r1
   20fb0:	andeq	r7, r0, sl, lsr #18
   20fb4:	andeq	r8, r0, sp, ror r1

00020fb8 <flatcc_builder_check_union_field@@Base>:
   20fb8:	mov	r2, r0
   20fbc:	ldr	r0, [r0, #32]
   20fc0:	ldrh	r0, [r0, #14]
   20fc4:	cmp	r0, #3
   20fc8:	bne	21028 <flatcc_builder_check_union_field@@Base+0x70>
   20fcc:	cmp	r1, #0
   20fd0:	mov	r0, #0
   20fd4:	ldrhne	r3, [r2, #8]
   20fd8:	cmpne	r3, r1
   20fdc:	bhi	20fe4 <flatcc_builder_check_union_field@@Base+0x2c>
   20fe0:	bx	lr
   20fe4:	ldr	r0, [r2, #4]
   20fe8:	add	r0, r0, r1, lsl #1
   20fec:	ldrh	r1, [r0, #-2]
   20ff0:	cmp	r1, #0
   20ff4:	beq	21018 <flatcc_builder_check_union_field@@Base+0x60>
   20ff8:	ldr	r2, [r2, #16]
   20ffc:	ldrh	r0, [r0]
   21000:	ldrb	r1, [r2, r1]
   21004:	cmp	r1, #0
   21008:	beq	2101c <flatcc_builder_check_union_field@@Base+0x64>
   2100c:	cmp	r0, #0
   21010:	movwne	r0, #1
   21014:	bx	lr
   21018:	ldrh	r0, [r0]
   2101c:	clz	r0, r0
   21020:	lsr	r0, r0, #5
   21024:	bx	lr
   21028:	push	{fp, lr}
   2102c:	mov	fp, sp
   21030:	ldr	r0, [pc, #24]	; 21050 <flatcc_builder_check_union_field@@Base+0x98>
   21034:	ldr	r1, [pc, #24]	; 21054 <flatcc_builder_check_union_field@@Base+0x9c>
   21038:	ldr	r3, [pc, #24]	; 21058 <flatcc_builder_check_union_field@@Base+0xa0>
   2103c:	movw	r2, #1279	; 0x4ff
   21040:	add	r0, pc, r0
   21044:	add	r1, pc, r1
   21048:	add	r3, pc, r3
   2104c:	bl	12f04 <__assert_fail@plt>
   21050:	strheq	r8, [r0], -r6
   21054:	andeq	r7, r0, r6, lsl #17
   21058:	andeq	r8, r0, ip, lsr #2

0002105c <flatcc_builder_check_required@@Base>:
   2105c:	push	{fp, lr}
   21060:	mov	fp, sp
   21064:	mov	r3, r0
   21068:	ldr	r0, [r0, #32]
   2106c:	ldrh	r0, [r0, #14]
   21070:	cmp	r0, #3
   21074:	bne	210cc <flatcc_builder_check_required@@Base+0x70>
   21078:	ldrh	ip, [r3, #8]
   2107c:	mov	r0, #0
   21080:	cmp	ip, r2
   21084:	movge	r0, #1
   21088:	cmpge	r2, #1
   2108c:	bge	21094 <flatcc_builder_check_required@@Base+0x38>
   21090:	pop	{fp, pc}
   21094:	ldr	ip, [r3, #4]
   21098:	mov	lr, #0
   2109c:	b	210b0 <flatcc_builder_check_required@@Base+0x54>
   210a0:	add	lr, lr, #1
   210a4:	add	r1, r1, #2
   210a8:	cmp	lr, r2
   210ac:	popge	{fp, pc}
   210b0:	ldrh	r3, [r1]
   210b4:	add	r3, ip, r3, lsl #1
   210b8:	ldrh	r3, [r3]
   210bc:	cmp	r3, #0
   210c0:	bne	210a0 <flatcc_builder_check_required@@Base+0x44>
   210c4:	mov	r0, #0
   210c8:	pop	{fp, pc}
   210cc:	ldr	r0, [pc, #24]	; 210ec <flatcc_builder_check_required@@Base+0x90>
   210d0:	ldr	r1, [pc, #24]	; 210f0 <flatcc_builder_check_required@@Base+0x94>
   210d4:	ldr	r3, [pc, #24]	; 210f4 <flatcc_builder_check_required@@Base+0x98>
   210d8:	movw	r2, #1297	; 0x511
   210dc:	add	r0, pc, r0
   210e0:	add	r1, pc, r1
   210e4:	add	r3, pc, r3
   210e8:	bl	12f04 <__assert_fail@plt>
   210ec:	andeq	r8, r0, sl, lsl r0
   210f0:	andeq	r7, r0, sl, ror #15
   210f4:	andeq	r8, r0, r0, ror #1

000210f8 <flatcc_builder_end_table@@Base>:
   210f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   210fc:	add	fp, sp, #24
   21100:	sub	sp, sp, #16
   21104:	mov	r4, r0
   21108:	ldr	r0, [r0, #32]
   2110c:	ldrh	r0, [r0, #14]
   21110:	cmp	r0, #3
   21114:	bne	21290 <flatcc_builder_end_table@@Base+0x198>
   21118:	ldrh	r0, [r4, #8]
   2111c:	ldr	r5, [r4, #4]
   21120:	mov	r1, #4
   21124:	movw	r2, #31153	; 0x79b1
   21128:	movt	r2, #40503	; 0x9e37
   2112c:	add	r0, r1, r0, lsl #1
   21130:	strh	r0, [r5, #-4]!
   21134:	ldrh	r1, [r4, #20]
   21138:	uxth	r6, r0
   2113c:	add	r1, r1, #4
   21140:	strh	r1, [r5, #2]
   21144:	uxth	r1, r1
   21148:	ldr	r0, [r4, #12]
   2114c:	eor	r0, r0, r6
   21150:	mul	r0, r0, r2
   21154:	eor	r0, r0, r1
   21158:	mov	r1, r5
   2115c:	mul	r3, r0, r2
   21160:	mov	r0, r4
   21164:	mov	r2, r6
   21168:	str	r3, [r4, #12]
   2116c:	bl	209d0 <flatcc_builder_create_cached_vtable@@Base>
   21170:	cmp	r0, #0
   21174:	beq	21280 <flatcc_builder_end_table@@Base+0x188>
   21178:	mov	r7, r0
   2117c:	mov	r0, r5
   21180:	mov	r1, #0
   21184:	mov	r2, r6
   21188:	mov	r8, #0
   2118c:	bl	12ebc <memset@plt>
   21190:	ldr	r5, [r4, #32]
   21194:	ldr	r0, [r4, #76]	; 0x4c
   21198:	ldr	r6, [r4]
   2119c:	ldrh	r3, [r4, #130]	; 0x82
   211a0:	ldr	r1, [r4, #16]
   211a4:	ldr	r2, [r4, #20]
   211a8:	ldr	r5, [r5, #20]
   211ac:	add	r0, r0, r5
   211b0:	sub	r6, r6, r0
   211b4:	asr	r6, r6, #1
   211b8:	stm	sp, {r0, r6, r7}
   211bc:	mov	r0, r4
   211c0:	bl	20d4c <flatcc_builder_create_table@@Base>
   211c4:	cmp	r0, #0
   211c8:	beq	21284 <flatcc_builder_end_table@@Base+0x18c>
   211cc:	ldr	r1, [r4, #32]
   211d0:	mov	r5, r0
   211d4:	ldr	r0, [r4, #16]
   211d8:	ldr	r2, [r4, #20]
   211dc:	ldr	r3, [r4, #52]	; 0x34
   211e0:	ldr	r7, [r1, #24]
   211e4:	str	r7, [r4, #12]
   211e8:	ldrh	r7, [r1, #28]
   211ec:	strh	r7, [r4, #8]
   211f0:	ldr	r7, [r1, #16]
   211f4:	add	r3, r3, r7
   211f8:	str	r3, [r4, #4]
   211fc:	ldr	r3, [r4, #76]	; 0x4c
   21200:	ldr	r1, [r1, #20]
   21204:	add	r1, r3, r1
   21208:	str	r1, [r4]
   2120c:	mov	r1, #0
   21210:	bl	12ebc <memset@plt>
   21214:	ldr	r0, [r4, #32]
   21218:	ldr	r1, [r4, #60]	; 0x3c
   2121c:	ldr	r2, [r4, #64]	; 0x40
   21220:	mov	r8, r5
   21224:	ldr	r3, [r0, #8]
   21228:	str	r3, [r4, #20]
   2122c:	ldr	r3, [r0]
   21230:	str	r3, [r4, #28]
   21234:	add	r1, r1, r3
   21238:	ldr	r7, [r0, #4]
   2123c:	str	r1, [r4, #16]
   21240:	sub	r1, r2, r3
   21244:	cmp	r1, r7
   21248:	movhi	r1, r7
   2124c:	str	r1, [r4, #24]
   21250:	ldrh	r1, [r4, #130]	; 0x82
   21254:	ldrh	r2, [r4, #128]	; 0x80
   21258:	cmp	r2, r1
   2125c:	strhcc	r1, [r4, #128]	; 0x80
   21260:	ldrh	r1, [r0, #12]
   21264:	sub	r0, r0, #36	; 0x24
   21268:	str	r0, [r4, #32]
   2126c:	strh	r1, [r4, #130]	; 0x82
   21270:	ldr	r0, [r4, #156]	; 0x9c
   21274:	sub	r0, r0, #1
   21278:	str	r0, [r4, #156]	; 0x9c
   2127c:	b	21284 <flatcc_builder_end_table@@Base+0x18c>
   21280:	mov	r8, #0
   21284:	mov	r0, r8
   21288:	sub	sp, fp, #24
   2128c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21290:	ldr	r0, [pc, #24]	; 212b0 <flatcc_builder_end_table@@Base+0x1b8>
   21294:	ldr	r1, [pc, #24]	; 212b4 <flatcc_builder_end_table@@Base+0x1bc>
   21298:	ldr	r3, [pc, #24]	; 212b8 <flatcc_builder_end_table@@Base+0x1c0>
   2129c:	movw	r2, #1317	; 0x525
   212a0:	add	r0, pc, r0
   212a4:	add	r1, pc, r1
   212a8:	add	r3, pc, r3
   212ac:	bl	12f04 <__assert_fail@plt>
   212b0:	andeq	r7, r0, r6, asr lr
   212b4:	andeq	r7, r0, r6, lsr #12
   212b8:	andeq	r7, r0, r6, ror pc

000212bc <flatcc_builder_create_vector@@Base>:
   212bc:	push	{r4, r5, r6, r7, fp, lr}
   212c0:	add	fp, sp, #16
   212c4:	sub	sp, sp, #80	; 0x50
   212c8:	mov	r7, r0
   212cc:	ldr	r0, [fp, #12]
   212d0:	cmp	r2, r0
   212d4:	bhi	213d4 <flatcc_builder_create_vector@@Base+0x118>
   212d8:	ldr	r0, [fp, #8]
   212dc:	mov	r4, r2
   212e0:	ldrh	r2, [r7, #128]	; 0x80
   212e4:	mov	r5, #4
   212e8:	cmp	r0, #4
   212ec:	movls	r0, r5
   212f0:	cmp	r2, r0
   212f4:	sub	r2, fp, #20
   212f8:	strhcc	r0, [r7, #128]	; 0x80
   212fc:	str	r4, [fp, #-20]	; 0xffffffec
   21300:	sub	r0, r0, #1
   21304:	ldr	ip, [r7, #136]	; 0x88
   21308:	str	r2, [sp, #12]
   2130c:	mov	r2, #1
   21310:	str	r5, [sp, #4]
   21314:	str	r5, [sp, #16]
   21318:	str	r2, [sp, #8]
   2131c:	mls	r6, r3, r4, ip
   21320:	mul	r3, r3, r4
   21324:	and	r0, r6, r0
   21328:	cmp	r3, #0
   2132c:	beq	21348 <flatcc_builder_create_vector@@Base+0x8c>
   21330:	mov	r2, #2
   21334:	add	r5, r3, #4
   21338:	str	r1, [sp, #20]
   2133c:	str	r3, [sp, #24]
   21340:	str	r2, [sp, #8]
   21344:	str	r5, [sp, #4]
   21348:	cmp	r0, #0
   2134c:	beq	21378 <flatcc_builder_create_vector@@Base+0xbc>
   21350:	add	r5, r5, r0
   21354:	add	r1, sp, #4
   21358:	str	r5, [sp, #4]
   2135c:	add	r1, r1, r2, lsl #3
   21360:	add	r2, r2, #1
   21364:	ldr	r3, [pc, #168]	; 21414 <flatcc_builder_create_vector@@Base+0x158>
   21368:	ldr	r3, [pc, r3]
   2136c:	str	r3, [r1, #8]
   21370:	str	r0, [r1, #12]
   21374:	str	r2, [sp, #8]
   21378:	cmp	r5, #0
   2137c:	ble	213f4 <flatcc_builder_create_vector@@Base+0x138>
   21380:	ldr	r0, [r7, #36]	; 0x24
   21384:	ldr	r6, [r7, #44]	; 0x2c
   21388:	add	r1, sp, #4
   2138c:	sub	r4, ip, r5
   21390:	str	r5, [sp]
   21394:	add	r1, r1, #8
   21398:	mov	r3, r4
   2139c:	blx	r6
   213a0:	cmp	r0, #0
   213a4:	streq	r4, [r7, #136]	; 0x88
   213a8:	moveq	r0, r4
   213ac:	subeq	sp, fp, #16
   213b0:	popeq	{r4, r5, r6, r7, fp, pc}
   213b4:	ldr	r0, [pc, #116]	; 21430 <flatcc_builder_create_vector@@Base+0x174>
   213b8:	ldr	r1, [pc, #116]	; 21434 <flatcc_builder_create_vector@@Base+0x178>
   213bc:	ldr	r3, [pc, #116]	; 21438 <flatcc_builder_create_vector@@Base+0x17c>
   213c0:	movw	r2, #651	; 0x28b
   213c4:	add	r0, pc, r0
   213c8:	add	r1, pc, r1
   213cc:	add	r3, pc, r3
   213d0:	bl	12f04 <__assert_fail@plt>
   213d4:	ldr	r0, [pc, #60]	; 21418 <flatcc_builder_create_vector@@Base+0x15c>
   213d8:	ldr	r1, [pc, #60]	; 2141c <flatcc_builder_create_vector@@Base+0x160>
   213dc:	ldr	r3, [pc, #60]	; 21420 <flatcc_builder_create_vector@@Base+0x164>
   213e0:	movw	r2, #1365	; 0x555
   213e4:	add	r0, pc, r0
   213e8:	add	r1, pc, r1
   213ec:	add	r3, pc, r3
   213f0:	bl	12f04 <__assert_fail@plt>
   213f4:	ldr	r0, [pc, #40]	; 21424 <flatcc_builder_create_vector@@Base+0x168>
   213f8:	ldr	r1, [pc, #40]	; 21428 <flatcc_builder_create_vector@@Base+0x16c>
   213fc:	ldr	r3, [pc, #40]	; 2142c <flatcc_builder_create_vector@@Base+0x170>
   21400:	movw	r2, #647	; 0x287
   21404:	add	r0, pc, r0
   21408:	add	r1, pc, r1
   2140c:	add	r3, pc, r3
   21410:	bl	12f04 <__assert_fail@plt>
   21414:	strdeq	r9, [r1], -r4
   21418:	andeq	r7, r0, ip, ror lr
   2141c:	andeq	r7, r0, r2, ror #9
   21420:	andeq	r7, r0, r7, lsl #29
   21424:	andeq	r8, r0, r3, lsl #13
   21428:	andeq	r7, r0, r2, asr #9
   2142c:	andeq	r8, r0, sl, lsr r5
   21430:	andeq	r8, r0, r3, asr #13
   21434:	andeq	r7, r0, r2, lsl #10
   21438:	andeq	r8, r0, sl, ror r5

0002143c <flatcc_builder_end_vector@@Base>:
   2143c:	push	{r4, r5, fp, lr}
   21440:	add	fp, sp, #8
   21444:	sub	sp, sp, #8
   21448:	mov	r4, r0
   2144c:	ldr	r0, [r0, #32]
   21450:	ldrh	r1, [r0, #14]
   21454:	cmp	r1, #4
   21458:	bne	2150c <flatcc_builder_end_vector@@Base+0xd0>
   2145c:	ldr	r3, [r0, #16]
   21460:	ldr	r2, [r0, #20]
   21464:	ldr	r0, [r0, #24]
   21468:	ldr	r1, [r4, #16]
   2146c:	ldrh	r5, [r4, #130]	; 0x82
   21470:	str	r0, [sp, #4]
   21474:	mov	r0, r4
   21478:	str	r5, [sp]
   2147c:	bl	212bc <flatcc_builder_create_vector@@Base>
   21480:	mov	r5, r0
   21484:	cmp	r0, #0
   21488:	beq	21500 <flatcc_builder_end_vector@@Base+0xc4>
   2148c:	ldr	r0, [r4, #16]
   21490:	ldr	r2, [r4, #20]
   21494:	mov	r1, #0
   21498:	bl	12ebc <memset@plt>
   2149c:	ldr	r0, [r4, #32]
   214a0:	ldr	r1, [r4, #60]	; 0x3c
   214a4:	ldr	ip, [r4, #64]	; 0x40
   214a8:	ldr	r3, [r0, #8]
   214ac:	str	r3, [r4, #20]
   214b0:	ldr	r3, [r0]
   214b4:	str	r3, [r4, #28]
   214b8:	add	r1, r1, r3
   214bc:	ldr	r2, [r0, #4]
   214c0:	str	r1, [r4, #16]
   214c4:	sub	r1, ip, r3
   214c8:	cmp	r1, r2
   214cc:	movhi	r1, r2
   214d0:	str	r1, [r4, #24]
   214d4:	ldrh	r1, [r4, #130]	; 0x82
   214d8:	ldrh	r2, [r4, #128]	; 0x80
   214dc:	cmp	r2, r1
   214e0:	strhcc	r1, [r4, #128]	; 0x80
   214e4:	ldrh	r1, [r0, #12]
   214e8:	sub	r0, r0, #36	; 0x24
   214ec:	str	r0, [r4, #32]
   214f0:	strh	r1, [r4, #130]	; 0x82
   214f4:	ldr	r0, [r4, #156]	; 0x9c
   214f8:	sub	r0, r0, #1
   214fc:	str	r0, [r4, #156]	; 0x9c
   21500:	mov	r0, r5
   21504:	sub	sp, fp, #8
   21508:	pop	{r4, r5, fp, pc}
   2150c:	ldr	r0, [pc, #24]	; 2152c <flatcc_builder_end_vector@@Base+0xf0>
   21510:	ldr	r1, [pc, #24]	; 21530 <flatcc_builder_end_vector@@Base+0xf4>
   21514:	ldr	r3, [pc, #24]	; 21534 <flatcc_builder_end_vector@@Base+0xf8>
   21518:	movw	r2, #1400	; 0x578
   2151c:	add	r0, pc, r0
   21520:	add	r1, pc, r1
   21524:	add	r3, pc, r3
   21528:	bl	12f04 <__assert_fail@plt>
   2152c:	andeq	r7, r0, r8, ror #13
   21530:	andeq	r7, r0, sl, lsr #7
   21534:	andeq	r7, r0, r5, asr #27

00021538 <flatcc_builder_vector_count@@Base>:
   21538:	ldr	r0, [r0, #32]
   2153c:	ldr	r0, [r0, #20]
   21540:	bx	lr

00021544 <flatcc_builder_vector_edit@@Base>:
   21544:	ldr	r0, [r0, #16]
   21548:	bx	lr

0002154c <flatcc_builder_create_offset_vector_direct@@Base>:
   2154c:	mov	r3, #0
   21550:	b	21554 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   21554:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21558:	add	fp, sp, #24
   2155c:	sub	sp, sp, #80	; 0x50
   21560:	mov	r6, #0
   21564:	cmn	r2, #-1073741823	; 0xc0000001
   21568:	bhi	216a4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   2156c:	mov	r8, r0
   21570:	ldrh	r0, [r0, #128]	; 0x80
   21574:	sub	r7, fp, #28
   21578:	mov	r5, #4
   2157c:	mov	r4, #1
   21580:	cmp	r0, #3
   21584:	movls	r0, #4
   21588:	strhls	r0, [r8, #128]	; 0x80
   2158c:	str	r2, [fp, #-28]	; 0xffffffe4
   21590:	ldr	ip, [r8, #136]	; 0x88
   21594:	str	r7, [sp, #12]
   21598:	mov	r7, #0
   2159c:	str	r5, [sp, #4]
   215a0:	str	r5, [sp, #16]
   215a4:	str	r4, [sp, #8]
   215a8:	cmp	r7, r2, lsl #2
   215ac:	and	r6, ip, #3
   215b0:	beq	215d0 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   215b4:	lsl	r7, r2, #2
   215b8:	mov	r4, #2
   215bc:	str	r1, [sp, #20]
   215c0:	add	r5, r7, #4
   215c4:	str	r7, [sp, #24]
   215c8:	str	r4, [sp, #8]
   215cc:	str	r5, [sp, #4]
   215d0:	cmp	r6, #0
   215d4:	beq	21600 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   215d8:	add	r5, r5, r6
   215dc:	add	r7, sp, #4
   215e0:	str	r5, [sp, #4]
   215e4:	add	r7, r7, r4, lsl #3
   215e8:	add	r4, r4, #1
   215ec:	ldr	r0, [pc, #348]	; 21750 <flatcc_builder_create_offset_vector_direct@@Base+0x204>
   215f0:	ldr	r0, [pc, r0]
   215f4:	str	r0, [r7, #8]
   215f8:	str	r6, [r7, #12]
   215fc:	str	r4, [sp, #8]
   21600:	cmp	r2, #0
   21604:	beq	2166c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   21608:	mvn	r0, #3
   2160c:	mov	r6, #0
   21610:	sub	r0, r0, ip
   21614:	add	r0, r0, r5
   21618:	ldr	r7, [r1, r6, lsl #2]
   2161c:	cmp	r7, #0
   21620:	beq	21644 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   21624:	add	r7, r0, r7
   21628:	cmp	r3, #0
   2162c:	str	r7, [r1, r6, lsl #2]
   21630:	beq	21658 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   21634:	ldrb	r7, [r3, r6]
   21638:	cmp	r7, #0
   2163c:	bne	21658 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   21640:	b	216b0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   21644:	cmp	r3, #0
   21648:	beq	216f0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   2164c:	ldrb	r7, [r3, r6]
   21650:	cmp	r7, #0
   21654:	bne	216d0 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   21658:	add	r6, r6, #1
   2165c:	sub	r0, r0, #4
   21660:	cmp	r6, r2
   21664:	bcc	21618 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   21668:	ldr	ip, [r8, #136]	; 0x88
   2166c:	cmp	r5, #0
   21670:	ble	21710 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   21674:	ldr	r0, [r8, #36]	; 0x24
   21678:	ldr	r7, [r8, #44]	; 0x2c
   2167c:	add	r1, sp, #4
   21680:	sub	r6, ip, r5
   21684:	mov	r2, r4
   21688:	str	r5, [sp]
   2168c:	add	r1, r1, #8
   21690:	mov	r3, r6
   21694:	blx	r7
   21698:	cmp	r0, #0
   2169c:	bne	21730 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   216a0:	str	r6, [r8, #136]	; 0x88
   216a4:	mov	r0, r6
   216a8:	sub	sp, fp, #24
   216ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   216b0:	ldr	r0, [pc, #156]	; 21754 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   216b4:	ldr	r1, [pc, #156]	; 21758 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   216b8:	ldr	r3, [pc, #156]	; 2175c <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   216bc:	movw	r2, #1457	; 0x5b1
   216c0:	add	r0, pc, r0
   216c4:	add	r1, pc, r1
   216c8:	add	r3, pc, r3
   216cc:	bl	12f04 <__assert_fail@plt>
   216d0:	ldr	r0, [pc, #136]	; 21760 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   216d4:	ldr	r1, [pc, #136]	; 21764 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   216d8:	ldr	r3, [pc, #136]	; 21768 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   216dc:	movw	r2, #1461	; 0x5b5
   216e0:	add	r0, pc, r0
   216e4:	add	r1, pc, r1
   216e8:	add	r3, pc, r3
   216ec:	bl	12f04 <__assert_fail@plt>
   216f0:	ldr	r0, [pc, #116]	; 2176c <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   216f4:	ldr	r1, [pc, #116]	; 21770 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   216f8:	ldr	r3, [pc, #116]	; 21774 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   216fc:	movw	r2, #1463	; 0x5b7
   21700:	add	r0, pc, r0
   21704:	add	r1, pc, r1
   21708:	add	r3, pc, r3
   2170c:	bl	12f04 <__assert_fail@plt>
   21710:	ldr	r0, [pc, #96]	; 21778 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   21714:	ldr	r1, [pc, #96]	; 2177c <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   21718:	ldr	r3, [pc, #96]	; 21780 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   2171c:	movw	r2, #647	; 0x287
   21720:	add	r0, pc, r0
   21724:	add	r1, pc, r1
   21728:	add	r3, pc, r3
   2172c:	bl	12f04 <__assert_fail@plt>
   21730:	ldr	r0, [pc, #76]	; 21784 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   21734:	ldr	r1, [pc, #76]	; 21788 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   21738:	ldr	r3, [pc, #76]	; 2178c <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   2173c:	movw	r2, #651	; 0x28b
   21740:	add	r0, pc, r0
   21744:	add	r1, pc, r1
   21748:	add	r3, pc, r3
   2174c:	bl	12f04 <__assert_fail@plt>
   21750:	andeq	r9, r1, ip, ror #20
   21754:			; <UNDEFINED> instruction: 0x000083bb
   21758:	andeq	r7, r0, r6, lsl #4
   2175c:	andeq	r8, r0, r1, asr #7
   21760:	andeq	r8, r0, ip, lsr #8
   21764:	andeq	r7, r0, r6, ror #3
   21768:	andeq	r8, r0, r1, lsr #7
   2176c:	andeq	r8, r0, r7, lsl #7
   21770:	andeq	r7, r0, r6, asr #3
   21774:	andeq	r8, r0, r1, lsl #7
   21778:	andeq	r8, r0, r7, ror #6
   2177c:	andeq	r7, r0, r6, lsr #3
   21780:	andeq	r8, r0, lr, lsl r2
   21784:	andeq	r8, r0, r7, asr #6
   21788:	andeq	r7, r0, r6, lsl #3
   2178c:	strdeq	r8, [r0], -lr

00021790 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   21790:	push	{r4, r5, fp, lr}
   21794:	add	fp, sp, #8
   21798:	mov	r4, r0
   2179c:	ldr	r0, [r0, #32]
   217a0:	mov	r3, r1
   217a4:	ldrh	r1, [r0, #14]
   217a8:	cmp	r1, #5
   217ac:	bne	21848 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   217b0:	ldr	r2, [r0, #20]
   217b4:	ldr	r1, [r4, #16]
   217b8:	mov	r0, r4
   217bc:	bl	21554 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   217c0:	mov	r5, r0
   217c4:	cmp	r0, #0
   217c8:	beq	21840 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   217cc:	ldr	r0, [r4, #16]
   217d0:	ldr	r2, [r4, #20]
   217d4:	mov	r1, #0
   217d8:	bl	12ebc <memset@plt>
   217dc:	ldr	r0, [r4, #32]
   217e0:	ldr	r1, [r4, #60]	; 0x3c
   217e4:	ldr	ip, [r4, #64]	; 0x40
   217e8:	ldr	r3, [r0, #8]
   217ec:	str	r3, [r4, #20]
   217f0:	ldr	r3, [r0]
   217f4:	str	r3, [r4, #28]
   217f8:	add	r1, r1, r3
   217fc:	ldr	r2, [r0, #4]
   21800:	str	r1, [r4, #16]
   21804:	sub	r1, ip, r3
   21808:	cmp	r1, r2
   2180c:	movhi	r1, r2
   21810:	str	r1, [r4, #24]
   21814:	ldrh	r1, [r4, #130]	; 0x82
   21818:	ldrh	r2, [r4, #128]	; 0x80
   2181c:	cmp	r2, r1
   21820:	strhcc	r1, [r4, #128]	; 0x80
   21824:	ldrh	r1, [r0, #12]
   21828:	sub	r0, r0, #36	; 0x24
   2182c:	str	r0, [r4, #32]
   21830:	strh	r1, [r4, #130]	; 0x82
   21834:	ldr	r0, [r4, #156]	; 0x9c
   21838:	sub	r0, r0, #1
   2183c:	str	r0, [r4, #156]	; 0x9c
   21840:	mov	r0, r5
   21844:	pop	{r4, r5, fp, pc}
   21848:	ldr	r0, [pc, #24]	; 21868 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   2184c:	ldr	r1, [pc, #24]	; 2186c <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   21850:	ldr	r3, [pc, #24]	; 21870 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   21854:	movw	r2, #1493	; 0x5d5
   21858:	add	r0, pc, r0
   2185c:	add	r1, pc, r1
   21860:	add	r3, pc, r3
   21864:	bl	12f04 <__assert_fail@plt>
   21868:	andeq	r7, r0, r5, lsr #9
   2186c:	andeq	r7, r0, lr, rrx
   21870:	andeq	r7, r0, r6, lsl fp

00021874 <flatcc_builder_offset_vector_edit@@Base>:
   21874:	ldr	r0, [r0, #16]
   21878:	bx	lr

0002187c <flatcc_builder_offset_vector_count@@Base>:
   2187c:	ldr	r0, [r0, #32]
   21880:	ldr	r0, [r0, #20]
   21884:	bx	lr

00021888 <flatcc_builder_table_add_union@@Base>:
   21888:	push	{r4, r5, r6, r7, fp, lr}
   2188c:	add	fp, sp, #16
   21890:	mov	r5, r0
   21894:	ldr	r0, [r0, #32]
   21898:	ldrh	r0, [r0, #14]
   2189c:	cmp	r0, #3
   218a0:	bne	21928 <flatcc_builder_table_add_union@@Base+0xa0>
   218a4:	mov	r7, r3
   218a8:	mov	r4, r2
   218ac:	mov	r6, r1
   218b0:	cmp	r3, #0
   218b4:	beq	218c4 <flatcc_builder_table_add_union@@Base+0x3c>
   218b8:	uxtb	r0, r4
   218bc:	cmp	r0, #0
   218c0:	beq	21948 <flatcc_builder_table_add_union@@Base+0xc0>
   218c4:	cmp	r7, #0
   218c8:	beq	218e4 <flatcc_builder_table_add_union@@Base+0x5c>
   218cc:	mov	r0, r5
   218d0:	mov	r1, r6
   218d4:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   218d8:	cmp	r0, #0
   218dc:	beq	21968 <flatcc_builder_table_add_union@@Base+0xe0>
   218e0:	str	r7, [r0]
   218e4:	sub	r1, r6, #1
   218e8:	mov	r0, r5
   218ec:	mov	r2, #1
   218f0:	mov	r3, #1
   218f4:	bl	21b6c <flatcc_builder_table_add@@Base>
   218f8:	cmp	r0, #0
   218fc:	strbne	r4, [r0]
   21900:	movne	r0, #0
   21904:	popne	{r4, r5, r6, r7, fp, pc}
   21908:	ldr	r0, [pc, #156]	; 219ac <flatcc_builder_table_add_union@@Base+0x124>
   2190c:	ldr	r1, [pc, #156]	; 219b0 <flatcc_builder_table_add_union@@Base+0x128>
   21910:	ldr	r3, [pc, #156]	; 219b4 <flatcc_builder_table_add_union@@Base+0x12c>
   21914:	movw	r2, #1526	; 0x5f6
   21918:	add	r0, pc, r0
   2191c:	add	r1, pc, r1
   21920:	add	r3, pc, r3
   21924:	bl	12f04 <__assert_fail@plt>
   21928:	ldr	r0, [pc, #88]	; 21988 <flatcc_builder_table_add_union@@Base+0x100>
   2192c:	ldr	r1, [pc, #88]	; 2198c <flatcc_builder_table_add_union@@Base+0x104>
   21930:	ldr	r3, [pc, #88]	; 21990 <flatcc_builder_table_add_union@@Base+0x108>
   21934:	movw	r2, #1518	; 0x5ee
   21938:	add	r0, pc, r0
   2193c:	add	r1, pc, r1
   21940:	add	r3, pc, r3
   21944:	bl	12f04 <__assert_fail@plt>
   21948:	ldr	r0, [pc, #68]	; 21994 <flatcc_builder_table_add_union@@Base+0x10c>
   2194c:	ldr	r1, [pc, #68]	; 21998 <flatcc_builder_table_add_union@@Base+0x110>
   21950:	ldr	r3, [pc, #68]	; 2199c <flatcc_builder_table_add_union@@Base+0x114>
   21954:	movw	r2, #1519	; 0x5ef
   21958:	add	r0, pc, r0
   2195c:	add	r1, pc, r1
   21960:	add	r3, pc, r3
   21964:	bl	12f04 <__assert_fail@plt>
   21968:	ldr	r0, [pc, #48]	; 219a0 <flatcc_builder_table_add_union@@Base+0x118>
   2196c:	ldr	r1, [pc, #48]	; 219a4 <flatcc_builder_table_add_union@@Base+0x11c>
   21970:	ldr	r3, [pc, #48]	; 219a8 <flatcc_builder_table_add_union@@Base+0x120>
   21974:	movw	r2, #1522	; 0x5f2
   21978:	add	r0, pc, r0
   2197c:	add	r1, pc, r1
   21980:	add	r3, pc, r3
   21984:	bl	12f04 <__assert_fail@plt>
   21988:			; <UNDEFINED> instruction: 0x000077be
   2198c:	andeq	r6, r0, lr, lsl #31
   21990:	andeq	r7, r0, r8, lsr #21
   21994:	andeq	r7, r0, r8, ror #21
   21998:	andeq	r6, r0, lr, ror #30
   2199c:	andeq	r7, r0, r8, lsl #21
   219a0:	andeq	r7, r0, sl, ror #21
   219a4:	andeq	r6, r0, lr, asr #30
   219a8:	andeq	r7, r0, r8, ror #20
   219ac:	andeq	r7, r0, r4, asr fp
   219b0:	andeq	r6, r0, lr, lsr #31
   219b4:	andeq	r7, r0, r8, asr #21

000219b8 <flatcc_builder_table_add_offset@@Base>:
   219b8:	push	{r4, r5, r6, r7, fp, lr}
   219bc:	add	fp, sp, #16
   219c0:	sub	sp, sp, #8
   219c4:	mov	r4, r0
   219c8:	ldr	r0, [r0, #32]
   219cc:	ldrh	r0, [r0, #14]
   219d0:	cmp	r0, #3
   219d4:	bne	21ae8 <flatcc_builder_table_add_offset@@Base+0x130>
   219d8:	movw	r0, #32765	; 0x7ffd
   219dc:	mov	r5, r1
   219e0:	cmp	r1, r0
   219e4:	bcs	21b08 <flatcc_builder_table_add_offset@@Base+0x150>
   219e8:	ldr	r0, [r4, #4]
   219ec:	add	r1, r0, r5, lsl #1
   219f0:	ldrh	r1, [r1]
   219f4:	cmp	r1, #0
   219f8:	bne	21b28 <flatcc_builder_table_add_offset@@Base+0x170>
   219fc:	ldr	r2, [r4, #20]
   21a00:	ldr	r1, [r4, #12]
   21a04:	ldr	r3, [r4, #24]
   21a08:	add	r2, r2, #3
   21a0c:	eor	r1, r1, r5
   21a10:	bic	r6, r2, #3
   21a14:	movw	r2, #31153	; 0x79b1
   21a18:	movt	r2, #40503	; 0x9e37
   21a1c:	add	r7, r6, #4
   21a20:	mul	r1, r1, r2
   21a24:	cmp	r7, r3
   21a28:	str	r7, [r4, #20]
   21a2c:	eor	r1, r1, #4
   21a30:	mul	r1, r1, r2
   21a34:	str	r1, [r4, #12]
   21a38:	bls	21aac <flatcc_builder_table_add_offset@@Base+0xf4>
   21a3c:	ldr	r1, [r4, #28]
   21a40:	ldr	r0, [r4, #40]	; 0x28
   21a44:	ldr	ip, [r4, #48]	; 0x30
   21a48:	mov	r2, #1
   21a4c:	mov	r3, #1
   21a50:	str	r2, [sp]
   21a54:	add	r2, r1, r7
   21a58:	add	r1, r4, #60	; 0x3c
   21a5c:	blx	ip
   21a60:	mov	r1, r0
   21a64:	mov	r0, #0
   21a68:	cmp	r1, #0
   21a6c:	beq	21a78 <flatcc_builder_table_add_offset@@Base+0xc0>
   21a70:	sub	sp, fp, #16
   21a74:	pop	{r4, r5, r6, r7, fp, pc}
   21a78:	ldr	r0, [r4, #28]
   21a7c:	ldr	r2, [r4, #60]	; 0x3c
   21a80:	ldr	r3, [r4, #64]	; 0x40
   21a84:	ldr	r1, [r4, #32]
   21a88:	add	r2, r2, r0
   21a8c:	sub	r0, r3, r0
   21a90:	str	r2, [r4, #16]
   21a94:	movw	r2, #65532	; 0xfffc
   21a98:	cmp	r0, r2
   21a9c:	movcs	r0, r2
   21aa0:	str	r0, [r4, #24]
   21aa4:	str	r2, [r1, #4]
   21aa8:	ldr	r0, [r4, #4]
   21aac:	uxth	r1, r5
   21ab0:	add	r0, r0, r1, lsl #1
   21ab4:	strh	r7, [r0]
   21ab8:	ldrh	r0, [r4, #8]
   21abc:	cmp	r0, r1
   21ac0:	addls	r0, r5, #1
   21ac4:	strhls	r0, [r4, #8]
   21ac8:	ldr	r0, [r4]
   21acc:	add	r1, r0, #2
   21ad0:	str	r1, [r4]
   21ad4:	strh	r6, [r0]
   21ad8:	ldr	r0, [r4, #16]
   21adc:	add	r0, r0, r6
   21ae0:	sub	sp, fp, #16
   21ae4:	pop	{r4, r5, r6, r7, fp, pc}
   21ae8:	ldr	r0, [pc, #88]	; 21b48 <flatcc_builder_table_add_offset@@Base+0x190>
   21aec:	ldr	r1, [pc, #88]	; 21b4c <flatcc_builder_table_add_offset@@Base+0x194>
   21af0:	ldr	r3, [pc, #88]	; 21b50 <flatcc_builder_table_add_offset@@Base+0x198>
   21af4:	movw	r2, #1811	; 0x713
   21af8:	add	r0, pc, r0
   21afc:	add	r1, pc, r1
   21b00:	add	r3, pc, r3
   21b04:	bl	12f04 <__assert_fail@plt>
   21b08:	ldr	r0, [pc, #68]	; 21b54 <flatcc_builder_table_add_offset@@Base+0x19c>
   21b0c:	ldr	r1, [pc, #68]	; 21b58 <flatcc_builder_table_add_offset@@Base+0x1a0>
   21b10:	ldr	r3, [pc, #68]	; 21b5c <flatcc_builder_table_add_offset@@Base+0x1a4>
   21b14:	movw	r2, #1812	; 0x714
   21b18:	add	r0, pc, r0
   21b1c:	add	r1, pc, r1
   21b20:	add	r3, pc, r3
   21b24:	bl	12f04 <__assert_fail@plt>
   21b28:	ldr	r0, [pc, #48]	; 21b60 <flatcc_builder_table_add_offset@@Base+0x1a8>
   21b2c:	ldr	r1, [pc, #48]	; 21b64 <flatcc_builder_table_add_offset@@Base+0x1ac>
   21b30:	ldr	r3, [pc, #48]	; 21b68 <flatcc_builder_table_add_offset@@Base+0x1b0>
   21b34:	movw	r2, #1819	; 0x71b
   21b38:	add	r0, pc, r0
   21b3c:	add	r1, pc, r1
   21b40:	add	r3, pc, r3
   21b44:	bl	12f04 <__assert_fail@plt>
   21b48:	strdeq	r7, [r0], -lr
   21b4c:	andeq	r6, r0, lr, asr #27
   21b50:	andeq	r7, r0, sl, ror #25
   21b54:	andeq	r7, r0, r2, asr ip
   21b58:	andeq	r6, r0, lr, lsr #27
   21b5c:	andeq	r7, r0, sl, asr #25
   21b60:	andeq	r7, r0, pc, asr #30
   21b64:	andeq	r6, r0, lr, lsl #27
   21b68:	andeq	r7, r0, sl, lsr #25

00021b6c <flatcc_builder_table_add@@Base>:
   21b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21b70:	add	fp, sp, #24
   21b74:	sub	sp, sp, #8
   21b78:	mov	r4, r0
   21b7c:	ldr	r0, [r0, #32]
   21b80:	ldrh	r0, [r0, #14]
   21b84:	cmp	r0, #3
   21b88:	bne	21ca8 <flatcc_builder_table_add@@Base+0x13c>
   21b8c:	movw	r0, #32765	; 0x7ffd
   21b90:	mov	r8, r1
   21b94:	cmp	r1, r0
   21b98:	bcs	21cc8 <flatcc_builder_table_add@@Base+0x15c>
   21b9c:	ldrh	r0, [r4, #130]	; 0x82
   21ba0:	cmp	r0, r3
   21ba4:	strhcc	r3, [r4, #130]	; 0x82
   21ba8:	ldr	r0, [r4, #4]
   21bac:	add	r1, r0, r8, lsl #1
   21bb0:	ldrh	r1, [r1]
   21bb4:	cmp	r1, #0
   21bb8:	bne	21ce8 <flatcc_builder_table_add@@Base+0x17c>
   21bbc:	ldr	r1, [r4, #12]
   21bc0:	movw	r7, #31153	; 0x79b1
   21bc4:	ldr	r6, [r4, #20]
   21bc8:	ldr	r5, [r4, #24]
   21bcc:	movt	r7, #40503	; 0x9e37
   21bd0:	eor	r1, r1, r8
   21bd4:	mul	r1, r1, r7
   21bd8:	eor	r1, r1, r2
   21bdc:	mul	r1, r1, r7
   21be0:	str	r1, [r4, #12]
   21be4:	add	r1, r3, r6
   21be8:	rsb	r3, r3, #0
   21bec:	sub	r1, r1, #1
   21bf0:	and	r6, r1, r3
   21bf4:	add	r1, r6, r2
   21bf8:	cmp	r1, r5
   21bfc:	str	r1, [r4, #20]
   21c00:	bcc	21c78 <flatcc_builder_table_add@@Base+0x10c>
   21c04:	ldr	r2, [r4, #28]
   21c08:	ldr	r0, [r4, #40]	; 0x28
   21c0c:	ldr	r7, [r4, #48]	; 0x30
   21c10:	mov	r3, #1
   21c14:	str	r3, [sp]
   21c18:	mov	r3, #1
   21c1c:	add	r1, r1, r2
   21c20:	add	r2, r1, #1
   21c24:	add	r1, r4, #60	; 0x3c
   21c28:	blx	r7
   21c2c:	mov	r1, r0
   21c30:	mov	r0, #0
   21c34:	cmp	r1, #0
   21c38:	beq	21c44 <flatcc_builder_table_add@@Base+0xd8>
   21c3c:	sub	sp, fp, #24
   21c40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21c44:	ldr	r0, [r4, #28]
   21c48:	ldr	r2, [r4, #60]	; 0x3c
   21c4c:	ldr	r3, [r4, #64]	; 0x40
   21c50:	ldr	r1, [r4, #32]
   21c54:	add	r2, r2, r0
   21c58:	sub	r0, r3, r0
   21c5c:	str	r2, [r4, #16]
   21c60:	movw	r2, #65532	; 0xfffc
   21c64:	cmp	r0, r2
   21c68:	movcs	r0, r2
   21c6c:	str	r0, [r4, #24]
   21c70:	str	r2, [r1, #4]
   21c74:	ldr	r0, [r4, #4]
   21c78:	uxth	r1, r8
   21c7c:	add	r2, r6, #4
   21c80:	add	r0, r0, r1, lsl #1
   21c84:	strh	r2, [r0]
   21c88:	ldrh	r0, [r4, #8]
   21c8c:	cmp	r0, r1
   21c90:	addls	r0, r8, #1
   21c94:	strhls	r0, [r4, #8]
   21c98:	ldr	r0, [r4, #16]
   21c9c:	add	r0, r0, r6
   21ca0:	sub	sp, fp, #24
   21ca4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21ca8:	ldr	r0, [pc, #88]	; 21d08 <flatcc_builder_table_add@@Base+0x19c>
   21cac:	ldr	r1, [pc, #88]	; 21d0c <flatcc_builder_table_add@@Base+0x1a0>
   21cb0:	ldr	r3, [pc, #88]	; 21d10 <flatcc_builder_table_add@@Base+0x1a4>
   21cb4:	movw	r2, #1773	; 0x6ed
   21cb8:	add	r0, pc, r0
   21cbc:	add	r1, pc, r1
   21cc0:	add	r3, pc, r3
   21cc4:	bl	12f04 <__assert_fail@plt>
   21cc8:	ldr	r0, [pc, #68]	; 21d14 <flatcc_builder_table_add@@Base+0x1a8>
   21ccc:	ldr	r1, [pc, #68]	; 21d18 <flatcc_builder_table_add@@Base+0x1ac>
   21cd0:	ldr	r3, [pc, #68]	; 21d1c <flatcc_builder_table_add@@Base+0x1b0>
   21cd4:	movw	r2, #1774	; 0x6ee
   21cd8:	add	r0, pc, r0
   21cdc:	add	r1, pc, r1
   21ce0:	add	r3, pc, r3
   21ce4:	bl	12f04 <__assert_fail@plt>
   21ce8:	ldr	r0, [pc, #48]	; 21d20 <flatcc_builder_table_add@@Base+0x1b4>
   21cec:	ldr	r1, [pc, #48]	; 21d24 <flatcc_builder_table_add@@Base+0x1b8>
   21cf0:	ldr	r3, [pc, #48]	; 21d28 <flatcc_builder_table_add@@Base+0x1bc>
   21cf4:	movw	r2, #1784	; 0x6f8
   21cf8:	add	r0, pc, r0
   21cfc:	add	r1, pc, r1
   21d00:	add	r3, pc, r3
   21d04:	bl	12f04 <__assert_fail@plt>
   21d08:	andeq	r7, r0, lr, lsr r4
   21d0c:	andeq	r6, r0, lr, lsl #24
   21d10:	andeq	r7, r0, r0, ror #20
   21d14:	muleq	r0, r2, sl
   21d18:	andeq	r6, r0, lr, ror #23
   21d1c:	andeq	r7, r0, r0, asr #20
   21d20:	andeq	r7, r0, pc, lsl #27
   21d24:	andeq	r6, r0, lr, asr #23
   21d28:	andeq	r7, r0, r0, lsr #20

00021d2c <flatcc_builder_table_add_union_vector@@Base>:
   21d2c:	push	{r4, r5, r6, r7, fp, lr}
   21d30:	add	fp, sp, #16
   21d34:	mov	r6, r0
   21d38:	ldr	r0, [r0, #32]
   21d3c:	ldrh	r0, [r0, #14]
   21d40:	cmp	r0, #3
   21d44:	bne	21dac <flatcc_builder_table_add_union_vector@@Base+0x80>
   21d48:	clz	r0, r3
   21d4c:	mov	r5, r1
   21d50:	clz	r1, r2
   21d54:	mov	r4, r3
   21d58:	mov	r7, r2
   21d5c:	lsr	r0, r0, #5
   21d60:	lsr	r1, r1, #5
   21d64:	cmp	r1, r0
   21d68:	bne	21dcc <flatcc_builder_table_add_union_vector@@Base+0xa0>
   21d6c:	cmp	r7, #0
   21d70:	beq	21da4 <flatcc_builder_table_add_union_vector@@Base+0x78>
   21d74:	sub	r1, r5, #1
   21d78:	mov	r0, r6
   21d7c:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   21d80:	cmp	r0, #0
   21d84:	beq	21dec <flatcc_builder_table_add_union_vector@@Base+0xc0>
   21d88:	str	r7, [r0]
   21d8c:	mov	r0, r6
   21d90:	mov	r1, r5
   21d94:	bl	219b8 <flatcc_builder_table_add_offset@@Base>
   21d98:	cmp	r0, #0
   21d9c:	beq	21e0c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   21da0:	str	r4, [r0]
   21da4:	mov	r0, #0
   21da8:	pop	{r4, r5, r6, r7, fp, pc}
   21dac:	ldr	r0, [pc, #120]	; 21e2c <flatcc_builder_table_add_union_vector@@Base+0x100>
   21db0:	ldr	r1, [pc, #120]	; 21e30 <flatcc_builder_table_add_union_vector@@Base+0x104>
   21db4:	ldr	r3, [pc, #120]	; 21e34 <flatcc_builder_table_add_union_vector@@Base+0x108>
   21db8:	mov	r2, #1536	; 0x600
   21dbc:	add	r0, pc, r0
   21dc0:	add	r1, pc, r1
   21dc4:	add	r3, pc, r3
   21dc8:	bl	12f04 <__assert_fail@plt>
   21dcc:	ldr	r0, [pc, #100]	; 21e38 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   21dd0:	ldr	r1, [pc, #100]	; 21e3c <flatcc_builder_table_add_union_vector@@Base+0x110>
   21dd4:	ldr	r3, [pc, #100]	; 21e40 <flatcc_builder_table_add_union_vector@@Base+0x114>
   21dd8:	movw	r2, #1537	; 0x601
   21ddc:	add	r0, pc, r0
   21de0:	add	r1, pc, r1
   21de4:	add	r3, pc, r3
   21de8:	bl	12f04 <__assert_fail@plt>
   21dec:	ldr	r0, [pc, #80]	; 21e44 <flatcc_builder_table_add_union_vector@@Base+0x118>
   21df0:	ldr	r1, [pc, #80]	; 21e48 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   21df4:	ldr	r3, [pc, #80]	; 21e4c <flatcc_builder_table_add_union_vector@@Base+0x120>
   21df8:	movw	r2, #1540	; 0x604
   21dfc:	add	r0, pc, r0
   21e00:	add	r1, pc, r1
   21e04:	add	r3, pc, r3
   21e08:	bl	12f04 <__assert_fail@plt>
   21e0c:	ldr	r0, [pc, #60]	; 21e50 <flatcc_builder_table_add_union_vector@@Base+0x124>
   21e10:	ldr	r1, [pc, #60]	; 21e54 <flatcc_builder_table_add_union_vector@@Base+0x128>
   21e14:	ldr	r3, [pc, #60]	; 21e58 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   21e18:	movw	r2, #1544	; 0x608
   21e1c:	add	r0, pc, r0
   21e20:	add	r1, pc, r1
   21e24:	add	r3, pc, r3
   21e28:	bl	12f04 <__assert_fail@plt>
   21e2c:	andeq	r7, r0, sl, lsr r3
   21e30:	andeq	r6, r0, sl, lsl #22
   21e34:			; <UNDEFINED> instruction: 0x000076b4
   21e38:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   21e3c:	andeq	r6, r0, sl, ror #21
   21e40:	muleq	r0, r4, r6
   21e44:	andeq	r7, r0, r6, ror #12
   21e48:	andeq	r6, r0, sl, asr #21
   21e4c:	andeq	r7, r0, r4, ror r6
   21e50:	andeq	r7, r0, r6, asr #12
   21e54:	andeq	r6, r0, sl, lsr #21
   21e58:	andeq	r7, r0, r4, asr r6

00021e5c <flatcc_builder_create_union_vector@@Base>:
   21e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e60:	add	fp, sp, #28
   21e64:	sub	sp, sp, #12
   21e68:	mov	r7, #0
   21e6c:	mov	r4, r1
   21e70:	mov	r5, r0
   21e74:	mov	sl, r3
   21e78:	mov	r9, r2
   21e7c:	mov	r6, #4
   21e80:	str	r7, [r0]
   21e84:	str	r7, [r0, #4]
   21e88:	mov	r0, r1
   21e8c:	mov	r1, #4
   21e90:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   21e94:	cmp	r0, #0
   21e98:	beq	21ea4 <flatcc_builder_create_union_vector@@Base+0x48>
   21e9c:	sub	sp, fp, #28
   21ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ea4:	ldr	r0, [r4, #32]
   21ea8:	mov	r1, #5
   21eac:	str	r6, [r0, #16]
   21eb0:	ldr	r0, [r4, #32]
   21eb4:	str	r7, [r0, #20]
   21eb8:	ldr	r0, [r4, #32]
   21ebc:	strh	r1, [r0, #14]
   21ec0:	ldr	r1, [r4, #28]
   21ec4:	ldr	r2, [r4, #60]	; 0x3c
   21ec8:	ldr	r3, [r4, #64]	; 0x40
   21ecc:	add	r2, r2, r1
   21ed0:	sub	r1, r3, r1
   21ed4:	str	r2, [r4, #16]
   21ed8:	mvn	r2, #3
   21edc:	cmn	r1, #4
   21ee0:	movcs	r1, r2
   21ee4:	str	r1, [r4, #24]
   21ee8:	str	r2, [r0, #4]
   21eec:	ldr	r1, [r0, #20]
   21ef0:	adds	r1, r1, sl
   21ef4:	cmpcc	r1, #1073741824	; 0x40000000
   21ef8:	bcc	21f1c <flatcc_builder_create_union_vector@@Base+0xc0>
   21efc:	ldr	r0, [pc, #556]	; 22130 <flatcc_builder_create_union_vector@@Base+0x2d4>
   21f00:	ldr	r1, [pc, #556]	; 22134 <flatcc_builder_create_union_vector@@Base+0x2d8>
   21f04:	ldr	r3, [pc, #556]	; 22138 <flatcc_builder_create_union_vector@@Base+0x2dc>
   21f08:	mov	r2, #892	; 0x37c
   21f0c:	add	r0, pc, r0
   21f10:	add	r1, pc, r1
   21f14:	add	r3, pc, r3
   21f18:	bl	12f04 <__assert_fail@plt>
   21f1c:	str	r1, [r0, #20]
   21f20:	ldr	r7, [r4, #20]
   21f24:	ldr	r0, [r4, #24]
   21f28:	add	r1, r7, sl, lsl #2
   21f2c:	cmp	r1, r0
   21f30:	str	r1, [r4, #20]
   21f34:	bcs	21f48 <flatcc_builder_create_union_vector@@Base+0xec>
   21f38:	ldr	r1, [r4, #16]
   21f3c:	adds	r2, r1, r7
   21f40:	bne	21fb0 <flatcc_builder_create_union_vector@@Base+0x154>
   21f44:	b	21e9c <flatcc_builder_create_union_vector@@Base+0x40>
   21f48:	ldr	r2, [r4, #28]
   21f4c:	ldr	r0, [r4, #40]	; 0x28
   21f50:	ldr	r6, [r4, #48]	; 0x30
   21f54:	mov	r3, #1
   21f58:	str	r3, [sp]
   21f5c:	mov	r3, #1
   21f60:	add	r1, r1, r2
   21f64:	add	r2, r1, #1
   21f68:	add	r1, r4, #60	; 0x3c
   21f6c:	blx	r6
   21f70:	cmp	r0, #0
   21f74:	bne	21e9c <flatcc_builder_create_union_vector@@Base+0x40>
   21f78:	ldr	r0, [r4, #28]
   21f7c:	ldr	r1, [r4, #60]	; 0x3c
   21f80:	ldr	r3, [r4, #64]	; 0x40
   21f84:	ldr	r2, [r4, #32]
   21f88:	add	r1, r1, r0
   21f8c:	sub	r0, r3, r0
   21f90:	mvn	r3, #3
   21f94:	cmn	r0, #4
   21f98:	str	r1, [r4, #16]
   21f9c:	movcs	r0, r3
   21fa0:	str	r0, [r4, #24]
   21fa4:	str	r3, [r2, #4]
   21fa8:	adds	r2, r1, r7
   21fac:	beq	21e9c <flatcc_builder_create_union_vector@@Base+0x40>
   21fb0:	ldr	r7, [r4, #20]
   21fb4:	add	r2, r7, sl
   21fb8:	cmp	r2, r0
   21fbc:	str	r2, [r4, #20]
   21fc0:	bcc	22024 <flatcc_builder_create_union_vector@@Base+0x1c8>
   21fc4:	ldr	r1, [r4, #28]
   21fc8:	ldr	r0, [r4, #40]	; 0x28
   21fcc:	ldr	r6, [r4, #48]	; 0x30
   21fd0:	mov	r3, #1
   21fd4:	str	r3, [sp]
   21fd8:	mov	r3, #1
   21fdc:	add	r1, r2, r1
   21fe0:	add	r2, r1, #1
   21fe4:	add	r1, r4, #60	; 0x3c
   21fe8:	blx	r6
   21fec:	cmp	r0, #0
   21ff0:	bne	21e9c <flatcc_builder_create_union_vector@@Base+0x40>
   21ff4:	ldr	r0, [r4, #28]
   21ff8:	ldr	r1, [r4, #60]	; 0x3c
   21ffc:	ldr	r3, [r4, #64]	; 0x40
   22000:	ldr	r2, [r4, #32]
   22004:	add	r1, r1, r0
   22008:	sub	r0, r3, r0
   2200c:	mvn	r3, #3
   22010:	cmn	r0, #4
   22014:	str	r1, [r4, #16]
   22018:	movcs	r0, r3
   2201c:	str	r0, [r4, #24]
   22020:	str	r3, [r2, #4]
   22024:	adds	r8, r1, r7
   22028:	beq	21e9c <flatcc_builder_create_union_vector@@Base+0x40>
   2202c:	cmp	sl, #0
   22030:	beq	22060 <flatcc_builder_create_union_vector@@Base+0x204>
   22034:	add	r0, r9, #4
   22038:	mov	r2, sl
   2203c:	mov	r3, r1
   22040:	mov	r7, r8
   22044:	ldrb	r6, [r0, #-4]
   22048:	subs	r2, r2, #1
   2204c:	strb	r6, [r7], #1
   22050:	ldr	r6, [r0]
   22054:	add	r0, r0, #8
   22058:	str	r6, [r3], #4
   2205c:	bne	22044 <flatcc_builder_create_union_vector@@Base+0x1e8>
   22060:	mov	r0, r4
   22064:	mov	r2, sl
   22068:	mov	r3, r8
   2206c:	bl	21554 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   22070:	mov	r7, r0
   22074:	mov	r9, #0
   22078:	cmp	r0, #0
   2207c:	beq	220a8 <flatcc_builder_create_union_vector@@Base+0x24c>
   22080:	mvn	r0, #0
   22084:	mov	r1, #1
   22088:	mov	r2, sl
   2208c:	mov	r3, #1
   22090:	str	r1, [sp]
   22094:	str	r0, [sp, #4]
   22098:	mov	r0, r4
   2209c:	mov	r1, r8
   220a0:	bl	212bc <flatcc_builder_create_vector@@Base>
   220a4:	b	220ac <flatcc_builder_create_union_vector@@Base+0x250>
   220a8:	mov	r0, #0
   220ac:	orr	r1, r9, r7
   220b0:	stm	r5, {r0, r1}
   220b4:	mov	r1, #0
   220b8:	ldr	r0, [r4, #16]
   220bc:	ldr	r2, [r4, #20]
   220c0:	bl	12ebc <memset@plt>
   220c4:	ldr	r0, [r4, #32]
   220c8:	ldr	r1, [r4, #60]	; 0x3c
   220cc:	ldr	r2, [r4, #64]	; 0x40
   220d0:	ldr	r3, [r0, #8]
   220d4:	str	r3, [r4, #20]
   220d8:	ldr	r3, [r0]
   220dc:	str	r3, [r4, #28]
   220e0:	add	r1, r1, r3
   220e4:	ldr	r7, [r0, #4]
   220e8:	str	r1, [r4, #16]
   220ec:	sub	r1, r2, r3
   220f0:	cmp	r1, r7
   220f4:	movhi	r1, r7
   220f8:	str	r1, [r4, #24]
   220fc:	ldrh	r1, [r4, #130]	; 0x82
   22100:	ldrh	r2, [r4, #128]	; 0x80
   22104:	cmp	r2, r1
   22108:	strhcc	r1, [r4, #128]	; 0x80
   2210c:	ldrh	r1, [r0, #12]
   22110:	sub	r0, r0, #36	; 0x24
   22114:	str	r0, [r4, #32]
   22118:	strh	r1, [r4, #130]	; 0x82
   2211c:	ldr	r0, [r4, #156]	; 0x9c
   22120:	sub	r0, r0, #1
   22124:	str	r0, [r4, #156]	; 0x9c
   22128:	sub	sp, fp, #28
   2212c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22130:	andeq	r7, r0, r4, lsl #21
   22134:			; <UNDEFINED> instruction: 0x000069ba
   22138:	muleq	r0, r7, sl

0002213c <flatcc_builder_create_union_vector_direct@@Base>:
   2213c:	push	{r4, r5, r6, r7, fp, lr}
   22140:	add	fp, sp, #16
   22144:	sub	sp, sp, #8
   22148:	ldr	r7, [fp, #8]
   2214c:	mov	r5, r2
   22150:	mov	r4, r0
   22154:	mov	r0, #0
   22158:	mov	r6, r1
   2215c:	str	r0, [r4]
   22160:	str	r0, [r4, #4]
   22164:	mov	r0, r1
   22168:	mov	r1, r3
   2216c:	mov	r3, r5
   22170:	mov	r2, r7
   22174:	bl	21554 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   22178:	cmp	r0, #0
   2217c:	str	r0, [r4, #4]
   22180:	beq	221ac <flatcc_builder_create_union_vector_direct@@Base+0x70>
   22184:	mvn	r0, #0
   22188:	mov	r1, #1
   2218c:	mov	r2, r7
   22190:	mov	r3, #1
   22194:	str	r1, [sp]
   22198:	str	r0, [sp, #4]
   2219c:	mov	r0, r6
   221a0:	mov	r1, r5
   221a4:	bl	212bc <flatcc_builder_create_vector@@Base>
   221a8:	str	r0, [r4]
   221ac:	sub	sp, fp, #16
   221b0:	pop	{r4, r5, r6, r7, fp, pc}

000221b4 <flatcc_builder_start_union_vector@@Base>:
   221b4:	push	{r4, sl, fp, lr}
   221b8:	add	fp, sp, #8
   221bc:	mov	r1, #4
   221c0:	mov	r4, r0
   221c4:	bl	1f1b0 <flatcc_builder_start_buffer@@Base+0xc0>
   221c8:	mov	r1, r0
   221cc:	mvn	r0, #0
   221d0:	cmp	r1, #0
   221d4:	popne	{r4, sl, fp, pc}
   221d8:	ldr	r0, [r4, #32]
   221dc:	mov	r1, #8
   221e0:	mov	r2, #7
   221e4:	str	r1, [r0, #16]
   221e8:	mov	r0, #0
   221ec:	ldr	r1, [r4, #32]
   221f0:	str	r0, [r1, #20]
   221f4:	ldr	r1, [r4, #32]
   221f8:	strh	r2, [r1, #14]
   221fc:	ldr	r2, [r4, #28]
   22200:	ldr	r3, [r4, #60]	; 0x3c
   22204:	ldr	ip, [r4, #64]	; 0x40
   22208:	add	r3, r3, r2
   2220c:	sub	r2, ip, r2
   22210:	str	r3, [r4, #16]
   22214:	mvn	r3, #3
   22218:	cmn	r2, #4
   2221c:	movcs	r2, r3
   22220:	str	r2, [r4, #24]
   22224:	str	r3, [r1, #4]
   22228:	pop	{r4, sl, fp, pc}

0002222c <flatcc_builder_end_union_vector@@Base>:
   2222c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22230:	add	fp, sp, #28
   22234:	sub	sp, sp, #12
   22238:	mov	sl, r0
   2223c:	mov	r0, #0
   22240:	mov	r4, r1
   22244:	str	r0, [sl]
   22248:	str	r0, [sl, #4]
   2224c:	ldr	r0, [r1, #32]
   22250:	ldrh	r1, [r0, #14]
   22254:	cmp	r1, #7
   22258:	bne	223fc <flatcc_builder_end_union_vector@@Base+0x1d0>
   2225c:	ldr	r6, [r0, #20]
   22260:	ldr	r7, [r4, #20]
   22264:	ldr	r2, [r4, #24]
   22268:	add	r0, r6, r6, lsl #2
   2226c:	add	r1, r7, r0
   22270:	cmp	r1, r2
   22274:	str	r1, [r4, #20]
   22278:	bcs	2228c <flatcc_builder_end_union_vector@@Base+0x60>
   2227c:	ldr	r0, [r4, #16]
   22280:	adds	r1, r0, r7
   22284:	bne	222f4 <flatcc_builder_end_union_vector@@Base+0xc8>
   22288:	b	223f4 <flatcc_builder_end_union_vector@@Base+0x1c8>
   2228c:	ldr	r2, [r4, #28]
   22290:	ldr	r0, [r4, #40]	; 0x28
   22294:	ldr	r5, [r4, #48]	; 0x30
   22298:	mov	r3, #1
   2229c:	str	r3, [sp]
   222a0:	mov	r3, #1
   222a4:	add	r1, r1, r2
   222a8:	add	r2, r1, #1
   222ac:	add	r1, r4, #60	; 0x3c
   222b0:	blx	r5
   222b4:	cmp	r0, #0
   222b8:	bne	223f4 <flatcc_builder_end_union_vector@@Base+0x1c8>
   222bc:	ldr	r1, [r4, #28]
   222c0:	ldr	r0, [r4, #60]	; 0x3c
   222c4:	ldr	r3, [r4, #64]	; 0x40
   222c8:	ldr	r2, [r4, #32]
   222cc:	add	r0, r0, r1
   222d0:	sub	r1, r3, r1
   222d4:	mvn	r3, #3
   222d8:	cmn	r1, #4
   222dc:	str	r0, [r4, #16]
   222e0:	movcs	r1, r3
   222e4:	str	r1, [r4, #24]
   222e8:	str	r3, [r2, #4]
   222ec:	adds	r1, r0, r7
   222f0:	beq	223f4 <flatcc_builder_end_union_vector@@Base+0x1c8>
   222f4:	add	r8, r1, r6, lsl #2
   222f8:	cmp	r6, #0
   222fc:	beq	2232c <flatcc_builder_end_union_vector@@Base+0x100>
   22300:	add	r0, r0, #4
   22304:	mov	r2, r6
   22308:	mov	r3, r1
   2230c:	mov	r7, r8
   22310:	ldrb	r5, [r0, #-4]
   22314:	subs	r2, r2, #1
   22318:	strb	r5, [r7], #1
   2231c:	ldr	r5, [r0]
   22320:	add	r0, r0, #8
   22324:	str	r5, [r3], #4
   22328:	bne	22310 <flatcc_builder_end_union_vector@@Base+0xe4>
   2232c:	mov	r0, r4
   22330:	mov	r2, r6
   22334:	mov	r3, r8
   22338:	bl	21554 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   2233c:	mov	r7, r0
   22340:	mov	r9, #0
   22344:	cmp	r0, #0
   22348:	beq	22374 <flatcc_builder_end_union_vector@@Base+0x148>
   2234c:	mvn	r0, #0
   22350:	mov	r1, #1
   22354:	mov	r2, r6
   22358:	mov	r3, #1
   2235c:	str	r1, [sp]
   22360:	str	r0, [sp, #4]
   22364:	mov	r0, r4
   22368:	mov	r1, r8
   2236c:	bl	212bc <flatcc_builder_create_vector@@Base>
   22370:	b	22378 <flatcc_builder_end_union_vector@@Base+0x14c>
   22374:	mov	r0, #0
   22378:	orr	r1, r9, r7
   2237c:	stm	sl, {r0, r1}
   22380:	mov	r1, #0
   22384:	ldr	r0, [r4, #16]
   22388:	ldr	r2, [r4, #20]
   2238c:	bl	12ebc <memset@plt>
   22390:	ldr	r0, [r4, #32]
   22394:	ldr	r1, [r4, #60]	; 0x3c
   22398:	ldr	r2, [r4, #64]	; 0x40
   2239c:	ldr	r3, [r0, #8]
   223a0:	str	r3, [r4, #20]
   223a4:	ldr	r3, [r0]
   223a8:	str	r3, [r4, #28]
   223ac:	add	r1, r1, r3
   223b0:	ldr	r7, [r0, #4]
   223b4:	str	r1, [r4, #16]
   223b8:	sub	r1, r2, r3
   223bc:	cmp	r1, r7
   223c0:	movhi	r1, r7
   223c4:	str	r1, [r4, #24]
   223c8:	ldrh	r1, [r4, #130]	; 0x82
   223cc:	ldrh	r2, [r4, #128]	; 0x80
   223d0:	cmp	r2, r1
   223d4:	strhcc	r1, [r4, #128]	; 0x80
   223d8:	ldrh	r1, [r0, #12]
   223dc:	sub	r0, r0, #36	; 0x24
   223e0:	str	r0, [r4, #32]
   223e4:	strh	r1, [r4, #130]	; 0x82
   223e8:	ldr	r0, [r4, #156]	; 0x9c
   223ec:	sub	r0, r0, #1
   223f0:	str	r0, [r4, #156]	; 0x9c
   223f4:	sub	sp, fp, #28
   223f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223fc:	ldr	r0, [pc, #24]	; 2241c <flatcc_builder_end_union_vector@@Base+0x1f0>
   22400:	ldr	r1, [pc, #24]	; 22420 <flatcc_builder_end_union_vector@@Base+0x1f4>
   22404:	ldr	r3, [pc, #24]	; 22424 <flatcc_builder_end_union_vector@@Base+0x1f8>
   22408:	movw	r2, #1617	; 0x651
   2240c:	add	r0, pc, r0
   22410:	add	r1, pc, r1
   22414:	add	r3, pc, r3
   22418:	bl	12f04 <__assert_fail@plt>
   2241c:	strdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   22420:			; <UNDEFINED> instruction: 0x000064ba
   22424:	andeq	r7, r0, r1, lsr #2

00022428 <flatcc_builder_union_vector_count@@Base>:
   22428:	ldr	r0, [r0, #32]
   2242c:	ldr	r0, [r0, #20]
   22430:	bx	lr

00022434 <flatcc_builder_union_vector_edit@@Base>:
   22434:	ldr	r0, [r0, #16]
   22438:	bx	lr

0002243c <flatcc_builder_extend_union_vector@@Base>:
   2243c:	push	{r4, r5, fp, lr}
   22440:	add	fp, sp, #8
   22444:	sub	sp, sp, #8
   22448:	mov	r4, r0
   2244c:	ldr	r0, [r0, #32]
   22450:	ldr	r2, [r0, #20]
   22454:	adds	r2, r2, r1
   22458:	cmpcc	r2, #536870912	; 0x20000000
   2245c:	bcc	22480 <flatcc_builder_extend_union_vector@@Base+0x44>
   22460:	ldr	r0, [pc, #184]	; 22520 <flatcc_builder_extend_union_vector@@Base+0xe4>
   22464:	ldr	r1, [pc, #184]	; 22524 <flatcc_builder_extend_union_vector@@Base+0xe8>
   22468:	ldr	r3, [pc, #184]	; 22528 <flatcc_builder_extend_union_vector@@Base+0xec>
   2246c:	mov	r2, #892	; 0x37c
   22470:	add	r0, pc, r0
   22474:	add	r1, pc, r1
   22478:	add	r3, pc, r3
   2247c:	bl	12f04 <__assert_fail@plt>
   22480:	str	r2, [r0, #20]
   22484:	ldr	r5, [r4, #20]
   22488:	ldr	r0, [r4, #24]
   2248c:	add	r1, r5, r1, lsl #3
   22490:	cmp	r1, r0
   22494:	str	r1, [r4, #20]
   22498:	bcs	224a4 <flatcc_builder_extend_union_vector@@Base+0x68>
   2249c:	ldr	r0, [r4, #16]
   224a0:	b	22514 <flatcc_builder_extend_union_vector@@Base+0xd8>
   224a4:	ldr	r2, [r4, #28]
   224a8:	ldr	r0, [r4, #40]	; 0x28
   224ac:	ldr	ip, [r4, #48]	; 0x30
   224b0:	mov	r3, #1
   224b4:	str	r3, [sp]
   224b8:	mov	r3, #1
   224bc:	add	r1, r1, r2
   224c0:	add	r2, r1, #1
   224c4:	add	r1, r4, #60	; 0x3c
   224c8:	blx	ip
   224cc:	mov	r1, r0
   224d0:	mov	r0, #0
   224d4:	cmp	r1, #0
   224d8:	beq	224e4 <flatcc_builder_extend_union_vector@@Base+0xa8>
   224dc:	sub	sp, fp, #8
   224e0:	pop	{r4, r5, fp, pc}
   224e4:	ldr	r1, [r4, #28]
   224e8:	ldr	r0, [r4, #60]	; 0x3c
   224ec:	ldr	r3, [r4, #64]	; 0x40
   224f0:	ldr	r2, [r4, #32]
   224f4:	add	r0, r0, r1
   224f8:	sub	r1, r3, r1
   224fc:	mvn	r3, #3
   22500:	cmn	r1, #4
   22504:	str	r0, [r4, #16]
   22508:	movcs	r1, r3
   2250c:	str	r1, [r4, #24]
   22510:	str	r3, [r2, #4]
   22514:	add	r0, r0, r5
   22518:	sub	sp, fp, #8
   2251c:	pop	{r4, r5, fp, pc}
   22520:	andeq	r7, r0, r0, lsr #10
   22524:	andeq	r6, r0, r6, asr r4
   22528:	andeq	r7, r0, r3, lsr r5

0002252c <flatcc_builder_truncate_union_vector@@Base>:
   2252c:	push	{fp, lr}
   22530:	mov	fp, sp
   22534:	ldr	r2, [r0, #32]
   22538:	ldrh	r3, [r2, #14]
   2253c:	cmp	r3, #7
   22540:	bne	22588 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   22544:	ldr	r3, [r2, #20]
   22548:	cmp	r3, r1
   2254c:	bcc	225a8 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   22550:	sub	r3, r3, r1
   22554:	str	r3, [r2, #20]
   22558:	ldr	r2, [r0, #32]
   2255c:	ldr	r3, [r0, #20]
   22560:	ldr	ip, [r0, #16]
   22564:	ldr	r2, [r2, #16]
   22568:	mls	r3, r2, r1, r3
   2256c:	mul	r2, r2, r1
   22570:	mov	r1, #0
   22574:	str	r3, [r0, #20]
   22578:	add	r0, ip, r3
   2257c:	bl	12ebc <memset@plt>
   22580:	mov	r0, #0
   22584:	pop	{fp, pc}
   22588:	ldr	r0, [pc, #56]	; 225c8 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   2258c:	ldr	r1, [pc, #56]	; 225cc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   22590:	ldr	r3, [pc, #56]	; 225d0 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   22594:	movw	r2, #1665	; 0x681
   22598:	add	r0, pc, r0
   2259c:	add	r1, pc, r1
   225a0:	add	r3, pc, r3
   225a4:	bl	12f04 <__assert_fail@plt>
   225a8:	ldr	r0, [pc, #36]	; 225d4 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   225ac:	ldr	r1, [pc, #36]	; 225d8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   225b0:	ldr	r3, [pc, #36]	; 225dc <flatcc_builder_truncate_union_vector@@Base+0xb0>
   225b4:	movw	r2, #1666	; 0x682
   225b8:	add	r0, pc, r0
   225bc:	add	r1, pc, r1
   225c0:	add	r3, pc, r3
   225c4:	bl	12f04 <__assert_fail@plt>
   225c8:	andeq	r6, r0, fp, ror #30
   225cc:	andeq	r6, r0, lr, lsr #6
   225d0:	andeq	r6, r0, r8, ror #31
   225d4:	andeq	r6, r0, pc, lsr #19
   225d8:	andeq	r6, r0, lr, lsl #6
   225dc:	andeq	r6, r0, r8, asr #31

000225e0 <flatcc_builder_union_vector_push@@Base>:
   225e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   225e4:	add	fp, sp, #24
   225e8:	sub	sp, sp, #8
   225ec:	mov	r7, r0
   225f0:	ldr	r0, [r0, #32]
   225f4:	mov	r9, r1
   225f8:	ldrh	r1, [r0, #14]
   225fc:	cmp	r1, #7
   22600:	bne	226bc <flatcc_builder_union_vector_push@@Base+0xdc>
   22604:	ldr	r1, [r0, #20]
   22608:	mov	r6, #0
   2260c:	cmn	r1, #-536870911	; 0xe0000001
   22610:	beq	226b0 <flatcc_builder_union_vector_push@@Base+0xd0>
   22614:	add	r1, r1, #1
   22618:	mov	r8, r2
   2261c:	str	r1, [r0, #20]
   22620:	ldr	r4, [r7, #20]
   22624:	ldr	r0, [r7, #24]
   22628:	add	r1, r4, #8
   2262c:	cmp	r1, r0
   22630:	str	r1, [r7, #20]
   22634:	bcs	22640 <flatcc_builder_union_vector_push@@Base+0x60>
   22638:	ldr	r0, [r7, #16]
   2263c:	b	226a0 <flatcc_builder_union_vector_push@@Base+0xc0>
   22640:	ldr	r1, [r7, #28]
   22644:	ldr	r0, [r7, #40]	; 0x28
   22648:	ldr	r5, [r7, #48]	; 0x30
   2264c:	mov	r2, #1
   22650:	mov	r3, #1
   22654:	str	r2, [sp]
   22658:	add	r1, r4, r1
   2265c:	add	r2, r1, #9
   22660:	add	r1, r7, #60	; 0x3c
   22664:	blx	r5
   22668:	cmp	r0, #0
   2266c:	bne	226b0 <flatcc_builder_union_vector_push@@Base+0xd0>
   22670:	ldr	r1, [r7, #28]
   22674:	ldr	r0, [r7, #60]	; 0x3c
   22678:	ldr	r3, [r7, #64]	; 0x40
   2267c:	ldr	r2, [r7, #32]
   22680:	add	r0, r0, r1
   22684:	sub	r1, r3, r1
   22688:	mvn	r3, #3
   2268c:	cmn	r1, #4
   22690:	str	r0, [r7, #16]
   22694:	movcs	r1, r3
   22698:	str	r1, [r7, #24]
   2269c:	str	r3, [r2, #4]
   226a0:	adds	r0, r0, r4
   226a4:	movne	r6, r0
   226a8:	strne	r9, [r0]
   226ac:	strne	r8, [r0, #4]
   226b0:	mov	r0, r6
   226b4:	sub	sp, fp, #24
   226b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   226bc:	ldr	r0, [pc, #24]	; 226dc <flatcc_builder_union_vector_push@@Base+0xfc>
   226c0:	ldr	r1, [pc, #24]	; 226e0 <flatcc_builder_union_vector_push@@Base+0x100>
   226c4:	ldr	r3, [pc, #24]	; 226e4 <flatcc_builder_union_vector_push@@Base+0x104>
   226c8:	movw	r2, #1677	; 0x68d
   226cc:	add	r0, pc, r0
   226d0:	add	r1, pc, r1
   226d4:	add	r3, pc, r3
   226d8:	bl	12f04 <__assert_fail@plt>
   226dc:	andeq	r6, r0, r7, lsr lr
   226e0:	strdeq	r6, [r0], -sl
   226e4:	strdeq	r6, [r0], -r9

000226e8 <flatcc_builder_append_union_vector@@Base>:
   226e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   226ec:	add	fp, sp, #24
   226f0:	sub	sp, sp, #8
   226f4:	mov	r6, r0
   226f8:	ldr	r0, [r0, #32]
   226fc:	mov	r8, r1
   22700:	ldrh	r1, [r0, #14]
   22704:	cmp	r1, #7
   22708:	bne	227f8 <flatcc_builder_append_union_vector@@Base+0x110>
   2270c:	ldr	r1, [r0, #20]
   22710:	mov	r5, r2
   22714:	adds	r1, r1, r2
   22718:	cmpcc	r1, #536870912	; 0x20000000
   2271c:	bcc	22740 <flatcc_builder_append_union_vector@@Base+0x58>
   22720:	ldr	r0, [pc, #252]	; 22824 <flatcc_builder_append_union_vector@@Base+0x13c>
   22724:	ldr	r1, [pc, #252]	; 22828 <flatcc_builder_append_union_vector@@Base+0x140>
   22728:	ldr	r3, [pc, #252]	; 2282c <flatcc_builder_append_union_vector@@Base+0x144>
   2272c:	mov	r2, #892	; 0x37c
   22730:	add	r0, pc, r0
   22734:	add	r1, pc, r1
   22738:	add	r3, pc, r3
   2273c:	bl	12f04 <__assert_fail@plt>
   22740:	str	r1, [r0, #20]
   22744:	ldr	r4, [r6, #20]
   22748:	ldr	r0, [r6, #24]
   2274c:	add	r1, r4, r5, lsl #3
   22750:	cmp	r1, r0
   22754:	str	r1, [r6, #20]
   22758:	bcs	2277c <flatcc_builder_append_union_vector@@Base+0x94>
   2275c:	ldr	r0, [r6, #16]
   22760:	adds	r7, r0, r4
   22764:	beq	227e8 <flatcc_builder_append_union_vector@@Base+0x100>
   22768:	lsl	r2, r5, #3
   2276c:	mov	r0, r7
   22770:	mov	r1, r8
   22774:	bl	12e2c <memcpy@plt>
   22778:	b	227ec <flatcc_builder_append_union_vector@@Base+0x104>
   2277c:	ldr	r2, [r6, #28]
   22780:	ldr	r0, [r6, #40]	; 0x28
   22784:	ldr	r7, [r6, #48]	; 0x30
   22788:	mov	r3, #1
   2278c:	str	r3, [sp]
   22790:	mov	r3, #1
   22794:	add	r1, r1, r2
   22798:	add	r2, r1, #1
   2279c:	add	r1, r6, #60	; 0x3c
   227a0:	blx	r7
   227a4:	mov	r7, #0
   227a8:	cmp	r0, #0
   227ac:	bne	227ec <flatcc_builder_append_union_vector@@Base+0x104>
   227b0:	ldr	r1, [r6, #28]
   227b4:	ldr	r0, [r6, #60]	; 0x3c
   227b8:	ldr	r3, [r6, #64]	; 0x40
   227bc:	ldr	r2, [r6, #32]
   227c0:	add	r0, r0, r1
   227c4:	sub	r1, r3, r1
   227c8:	mvn	r3, #3
   227cc:	cmn	r1, #4
   227d0:	str	r0, [r6, #16]
   227d4:	movcs	r1, r3
   227d8:	str	r1, [r6, #24]
   227dc:	str	r3, [r2, #4]
   227e0:	adds	r7, r0, r4
   227e4:	bne	22768 <flatcc_builder_append_union_vector@@Base+0x80>
   227e8:	mov	r7, #0
   227ec:	mov	r0, r7
   227f0:	sub	sp, fp, #24
   227f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   227f8:	ldr	r0, [pc, #24]	; 22818 <flatcc_builder_append_union_vector@@Base+0x130>
   227fc:	ldr	r1, [pc, #24]	; 2281c <flatcc_builder_append_union_vector@@Base+0x134>
   22800:	ldr	r3, [pc, #24]	; 22820 <flatcc_builder_append_union_vector@@Base+0x138>
   22804:	movw	r2, #1692	; 0x69c
   22808:	add	r0, pc, r0
   2280c:	add	r1, pc, r1
   22810:	add	r3, pc, r3
   22814:	bl	12f04 <__assert_fail@plt>
   22818:	strdeq	r6, [r0], -fp
   2281c:	strheq	r6, [r0], -lr
   22820:	andeq	r6, r0, sl, lsr #28
   22824:	andeq	r7, r0, r0, ror #4
   22828:	muleq	r0, r6, r1
   2282c:	andeq	r7, r0, r3, ror r2

00022830 <flatcc_builder_create_string@@Base>:
   22830:	push	{r4, r5, r6, sl, fp, lr}
   22834:	add	fp, sp, #16
   22838:	sub	sp, sp, #80	; 0x50
   2283c:	str	r2, [fp, #-20]	; 0xffffffec
   22840:	mvn	r5, r2
   22844:	mov	r6, r0
   22848:	mov	r3, #1
   2284c:	cmp	r2, #0
   22850:	ldr	ip, [r0, #136]	; 0x88
   22854:	sub	r0, fp, #20
   22858:	str	r0, [sp, #12]
   2285c:	mov	r0, #4
   22860:	str	r0, [sp, #4]
   22864:	str	r0, [sp, #16]
   22868:	str	r3, [sp, #8]
   2286c:	add	r5, ip, r5
   22870:	and	r5, r5, #3
   22874:	add	r5, r5, #1
   22878:	beq	22894 <flatcc_builder_create_string@@Base+0x64>
   2287c:	mov	r3, #2
   22880:	add	r0, r2, #4
   22884:	str	r1, [sp, #20]
   22888:	str	r2, [sp, #24]
   2288c:	str	r3, [sp, #8]
   22890:	str	r0, [sp, #4]
   22894:	add	r1, r0, r5
   22898:	add	lr, sp, #4
   2289c:	str	r1, [sp, #4]
   228a0:	add	r0, lr, r3, lsl #3
   228a4:	cmp	r1, #0
   228a8:	ldr	r2, [pc, #132]	; 22934 <flatcc_builder_create_string@@Base+0x104>
   228ac:	ldr	r2, [pc, r2]
   228b0:	str	r2, [r0, #8]
   228b4:	add	r2, r3, #1
   228b8:	str	r5, [r0, #12]
   228bc:	str	r2, [sp, #8]
   228c0:	ble	22914 <flatcc_builder_create_string@@Base+0xe4>
   228c4:	ldr	r0, [r6, #36]	; 0x24
   228c8:	ldr	r4, [r6, #44]	; 0x2c
   228cc:	sub	r5, ip, r1
   228d0:	str	r1, [sp]
   228d4:	add	r1, lr, #8
   228d8:	mov	r3, r5
   228dc:	blx	r4
   228e0:	cmp	r0, #0
   228e4:	streq	r5, [r6, #136]	; 0x88
   228e8:	moveq	r0, r5
   228ec:	subeq	sp, fp, #16
   228f0:	popeq	{r4, r5, r6, sl, fp, pc}
   228f4:	ldr	r0, [pc, #72]	; 22944 <flatcc_builder_create_string@@Base+0x114>
   228f8:	ldr	r1, [pc, #72]	; 22948 <flatcc_builder_create_string@@Base+0x118>
   228fc:	ldr	r3, [pc, #72]	; 2294c <flatcc_builder_create_string@@Base+0x11c>
   22900:	movw	r2, #651	; 0x28b
   22904:	add	r0, pc, r0
   22908:	add	r1, pc, r1
   2290c:	add	r3, pc, r3
   22910:	bl	12f04 <__assert_fail@plt>
   22914:	ldr	r0, [pc, #28]	; 22938 <flatcc_builder_create_string@@Base+0x108>
   22918:	ldr	r1, [pc, #28]	; 2293c <flatcc_builder_create_string@@Base+0x10c>
   2291c:	ldr	r3, [pc, #28]	; 22940 <flatcc_builder_create_string@@Base+0x110>
   22920:	movw	r2, #647	; 0x287
   22924:	add	r0, pc, r0
   22928:	add	r1, pc, r1
   2292c:	add	r3, pc, r3
   22930:	bl	12f04 <__assert_fail@plt>
   22934:			; <UNDEFINED> instruction: 0x000187b0
   22938:	andeq	r7, r0, r3, ror #2
   2293c:	andeq	r5, r0, r2, lsr #31
   22940:	andeq	r7, r0, sl, lsl r0
   22944:	andeq	r7, r0, r3, lsl #3
   22948:	andeq	r5, r0, r2, asr #31
   2294c:	andeq	r7, r0, sl, lsr r0

00022950 <flatcc_builder_create_string_str@@Base>:
   22950:	push	{r4, r5, fp, lr}
   22954:	add	fp, sp, #8
   22958:	mov	r5, r0
   2295c:	mov	r0, r1
   22960:	mov	r4, r1
   22964:	bl	12e98 <strlen@plt>
   22968:	mov	r2, r0
   2296c:	mov	r0, r5
   22970:	mov	r1, r4
   22974:	pop	{r4, r5, fp, lr}
   22978:	b	22830 <flatcc_builder_create_string@@Base>

0002297c <flatcc_builder_create_string_strn@@Base>:
   2297c:	push	{r4, r5, r6, sl, fp, lr}
   22980:	add	fp, sp, #16
   22984:	mov	r6, r0
   22988:	mov	r5, r1
   2298c:	mov	r0, r1
   22990:	mov	r1, #0
   22994:	mov	r4, r2
   22998:	bl	12ed4 <memchr@plt>
   2299c:	cmp	r0, #0
   229a0:	mov	r1, r5
   229a4:	subne	r4, r0, r5
   229a8:	mov	r0, r6
   229ac:	mov	r2, r4
   229b0:	pop	{r4, r5, r6, sl, fp, lr}
   229b4:	b	22830 <flatcc_builder_create_string@@Base>

000229b8 <flatcc_builder_end_string@@Base>:
   229b8:	push	{r4, r5, fp, lr}
   229bc:	add	fp, sp, #8
   229c0:	mov	r4, r0
   229c4:	ldr	r0, [r0, #32]
   229c8:	ldrh	r1, [r0, #14]
   229cc:	cmp	r1, #6
   229d0:	bne	22a78 <flatcc_builder_end_string@@Base+0xc0>
   229d4:	ldr	r2, [r0, #20]
   229d8:	ldr	r0, [r4, #20]
   229dc:	cmp	r2, r0
   229e0:	bne	22a98 <flatcc_builder_end_string@@Base+0xe0>
   229e4:	ldr	r1, [r4, #16]
   229e8:	mov	r0, r4
   229ec:	bl	22830 <flatcc_builder_create_string@@Base>
   229f0:	mov	r5, r0
   229f4:	cmp	r0, #0
   229f8:	beq	22a70 <flatcc_builder_end_string@@Base+0xb8>
   229fc:	ldr	r0, [r4, #16]
   22a00:	ldr	r2, [r4, #20]
   22a04:	mov	r1, #0
   22a08:	bl	12ebc <memset@plt>
   22a0c:	ldr	r0, [r4, #32]
   22a10:	ldr	r1, [r4, #60]	; 0x3c
   22a14:	ldr	ip, [r4, #64]	; 0x40
   22a18:	ldr	r3, [r0, #8]
   22a1c:	str	r3, [r4, #20]
   22a20:	ldr	r3, [r0]
   22a24:	str	r3, [r4, #28]
   22a28:	add	r1, r1, r3
   22a2c:	ldr	r2, [r0, #4]
   22a30:	str	r1, [r4, #16]
   22a34:	sub	r1, ip, r3
   22a38:	cmp	r1, r2
   22a3c:	movhi	r1, r2
   22a40:	str	r1, [r4, #24]
   22a44:	ldrh	r1, [r4, #130]	; 0x82
   22a48:	ldrh	r2, [r4, #128]	; 0x80
   22a4c:	cmp	r2, r1
   22a50:	strhcc	r1, [r4, #128]	; 0x80
   22a54:	ldrh	r1, [r0, #12]
   22a58:	sub	r0, r0, #36	; 0x24
   22a5c:	str	r0, [r4, #32]
   22a60:	strh	r1, [r4, #130]	; 0x82
   22a64:	ldr	r0, [r4, #156]	; 0x9c
   22a68:	sub	r0, r0, #1
   22a6c:	str	r0, [r4, #156]	; 0x9c
   22a70:	mov	r0, r5
   22a74:	pop	{r4, r5, fp, pc}
   22a78:	ldr	r0, [pc, #56]	; 22ab8 <flatcc_builder_end_string@@Base+0x100>
   22a7c:	ldr	r1, [pc, #56]	; 22abc <flatcc_builder_end_string@@Base+0x104>
   22a80:	ldr	r3, [pc, #56]	; 22ac0 <flatcc_builder_end_string@@Base+0x108>
   22a84:	movw	r2, #1732	; 0x6c4
   22a88:	add	r0, pc, r0
   22a8c:	add	r1, pc, r1
   22a90:	add	r3, pc, r3
   22a94:	bl	12f04 <__assert_fail@plt>
   22a98:	ldr	r0, [pc, #36]	; 22ac4 <flatcc_builder_end_string@@Base+0x10c>
   22a9c:	ldr	r1, [pc, #36]	; 22ac8 <flatcc_builder_end_string@@Base+0x110>
   22aa0:	ldr	r3, [pc, #36]	; 22acc <flatcc_builder_end_string@@Base+0x114>
   22aa4:	movw	r2, #1733	; 0x6c5
   22aa8:	add	r0, pc, r0
   22aac:	add	r1, pc, r1
   22ab0:	add	r3, pc, r3
   22ab4:	bl	12f04 <__assert_fail@plt>
   22ab8:	andeq	r6, r0, lr, ror r3
   22abc:	andeq	r5, r0, lr, lsr lr
   22ac0:	andeq	r6, r0, r9, lsr #24
   22ac4:	andeq	r6, r0, r4, asr ip
   22ac8:	andeq	r5, r0, lr, lsl lr
   22acc:	andeq	r6, r0, r9, lsl #24

00022ad0 <flatcc_builder_string_edit@@Base>:
   22ad0:	ldr	r0, [r0, #16]
   22ad4:	bx	lr

00022ad8 <flatcc_builder_string_len@@Base>:
   22ad8:	ldr	r0, [r0, #32]
   22adc:	ldr	r0, [r0, #20]
   22ae0:	bx	lr

00022ae4 <flatcc_builder_table_edit@@Base>:
   22ae4:	ldr	r2, [r0, #32]
   22ae8:	ldrh	r2, [r2, #14]
   22aec:	cmp	r2, #3
   22af0:	ldreq	r2, [r0, #16]
   22af4:	ldreq	r0, [r0, #20]
   22af8:	addeq	r0, r2, r0
   22afc:	subeq	r0, r0, r1
   22b00:	bxeq	lr
   22b04:	push	{fp, lr}
   22b08:	mov	fp, sp
   22b0c:	ldr	r0, [pc, #24]	; 22b2c <flatcc_builder_table_edit@@Base+0x48>
   22b10:	ldr	r1, [pc, #24]	; 22b30 <flatcc_builder_table_edit@@Base+0x4c>
   22b14:	ldr	r3, [pc, #24]	; 22b34 <flatcc_builder_table_edit@@Base+0x50>
   22b18:	movw	r2, #1794	; 0x702
   22b1c:	add	r0, pc, r0
   22b20:	add	r1, pc, r1
   22b24:	add	r3, pc, r3
   22b28:	bl	12f04 <__assert_fail@plt>
   22b2c:	ldrdeq	r6, [r0], -sl
   22b30:	andeq	r5, r0, sl, lsr #27
   22b34:	andeq	r6, r0, sl, lsl #25

00022b38 <flatcc_builder_table_add_copy@@Base>:
   22b38:	push	{r4, r5, r6, sl, fp, lr}
   22b3c:	add	fp, sp, #16
   22b40:	mov	r4, r3
   22b44:	ldr	r3, [fp, #8]
   22b48:	mov	r5, r2
   22b4c:	mov	r2, r4
   22b50:	bl	21b6c <flatcc_builder_table_add@@Base>
   22b54:	mov	r6, r0
   22b58:	cmp	r0, #0
   22b5c:	beq	22b70 <flatcc_builder_table_add_copy@@Base+0x38>
   22b60:	mov	r0, r6
   22b64:	mov	r1, r5
   22b68:	mov	r2, r4
   22b6c:	bl	12e2c <memcpy@plt>
   22b70:	mov	r0, r6
   22b74:	pop	{r4, r5, r6, sl, fp, pc}

00022b78 <flatcc_builder_push_buffer_alignment@@Base>:
   22b78:	ldrh	r1, [r0, #128]	; 0x80
   22b7c:	mov	r2, #4
   22b80:	strh	r2, [r0, #128]	; 0x80
   22b84:	mov	r0, r1
   22b88:	bx	lr

00022b8c <flatcc_builder_pop_buffer_alignment@@Base>:
   22b8c:	ldrh	r2, [r0, #128]	; 0x80
   22b90:	cmp	r2, r1
   22b94:	strhcc	r1, [r0, #128]	; 0x80
   22b98:	bx	lr

00022b9c <flatcc_builder_get_buffer_alignment@@Base>:
   22b9c:	ldrh	r0, [r0, #128]	; 0x80
   22ba0:	bx	lr

00022ba4 <flatcc_builder_set_vtable_clustering@@Base>:
   22ba4:	clz	r1, r1
   22ba8:	lsr	r1, r1, #5
   22bac:	str	r1, [r0, #180]	; 0xb4
   22bb0:	bx	lr

00022bb4 <flatcc_builder_set_block_align@@Base>:
   22bb4:	strh	r1, [r0, #132]	; 0x84
   22bb8:	bx	lr

00022bbc <flatcc_builder_get_level@@Base>:
   22bbc:	ldr	r0, [r0, #156]	; 0x9c
   22bc0:	bx	lr

00022bc4 <flatcc_builder_set_max_level@@Base>:
   22bc4:	str	r1, [r0, #176]	; 0xb0
   22bc8:	ldr	r2, [r0, #160]	; 0xa0
   22bcc:	cmp	r2, r1
   22bd0:	strlt	r1, [r0, #160]	; 0xa0
   22bd4:	bx	lr

00022bd8 <flatcc_builder_get_buffer_size@@Base>:
   22bd8:	ldr	r1, [r0, #136]	; 0x88
   22bdc:	ldr	r0, [r0, #140]	; 0x8c
   22be0:	sub	r0, r0, r1
   22be4:	bx	lr

00022be8 <flatcc_builder_get_buffer_start@@Base>:
   22be8:	ldr	r0, [r0, #136]	; 0x88
   22bec:	bx	lr

00022bf0 <flatcc_builder_get_buffer_end@@Base>:
   22bf0:	ldr	r0, [r0, #140]	; 0x8c
   22bf4:	bx	lr

00022bf8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22bf8:	str	r1, [r0, #172]	; 0xac
   22bfc:	bx	lr

00022c00 <flatcc_builder_set_identifier@@Base>:
   22c00:	ldr	r2, [pc, #20]	; 22c1c <flatcc_builder_set_identifier@@Base+0x1c>
   22c04:	cmp	r1, #0
   22c08:	ldr	r2, [pc, r2]
   22c0c:	movne	r2, r1
   22c10:	ldr	r1, [r2]
   22c14:	str	r1, [r0, #168]	; 0xa8
   22c18:	bx	lr
   22c1c:	andeq	r8, r1, r4, asr r4

00022c20 <flatcc_builder_get_type@@Base>:
   22c20:	ldr	r0, [r0, #32]
   22c24:	cmp	r0, #0
   22c28:	ldrhne	r0, [r0, #14]
   22c2c:	moveq	r0, #0
   22c30:	bx	lr

00022c34 <flatcc_builder_get_type_at@@Base>:
   22c34:	mov	r2, r0
   22c38:	cmp	r1, #1
   22c3c:	mov	r0, #0
   22c40:	ldrge	r3, [r2, #156]	; 0x9c
   22c44:	cmpge	r3, r1
   22c48:	bge	22c50 <flatcc_builder_get_type_at@@Base+0x1c>
   22c4c:	bx	lr
   22c50:	sub	r0, r1, r3
   22c54:	ldr	r1, [r2, #32]
   22c58:	add	r0, r0, r0, lsl #3
   22c5c:	add	r0, r1, r0, lsl #2
   22c60:	ldrh	r0, [r0, #14]
   22c64:	bx	lr

00022c68 <flatcc_builder_get_direct_buffer@@Base>:
   22c68:	ldr	r2, [r0, #184]	; 0xb8
   22c6c:	cmp	r2, #0
   22c70:	beq	22c84 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   22c74:	ldr	r2, [r0, #188]	; 0xbc
   22c78:	ldr	r3, [r0, #192]	; 0xc0
   22c7c:	cmp	r2, r3
   22c80:	beq	22c9c <flatcc_builder_get_direct_buffer@@Base+0x34>
   22c84:	cmp	r1, #0
   22c88:	moveq	r0, #0
   22c8c:	bxeq	lr
   22c90:	mov	r0, #0
   22c94:	str	r0, [r1]
   22c98:	bx	lr
   22c9c:	cmp	r1, #0
   22ca0:	ldrne	r2, [r0, #212]	; 0xd4
   22ca4:	strne	r2, [r1]
   22ca8:	ldr	r0, [r0, #196]	; 0xc4
   22cac:	bx	lr

00022cb0 <flatcc_builder_copy_buffer@@Base>:
   22cb0:	push	{fp, lr}
   22cb4:	mov	fp, sp
   22cb8:	ldr	r3, [r0, #184]	; 0xb8
   22cbc:	cmp	r3, #0
   22cc0:	beq	22cf4 <flatcc_builder_copy_buffer@@Base+0x44>
   22cc4:	add	r0, r0, #188	; 0xbc
   22cc8:	bl	23400 <flatcc_emitter_copy_buffer@@Base>
   22ccc:	cmp	r0, #0
   22cd0:	popne	{fp, pc}
   22cd4:	ldr	r0, [pc, #32]	; 22cfc <flatcc_builder_copy_buffer@@Base+0x4c>
   22cd8:	ldr	r1, [pc, #32]	; 22d00 <flatcc_builder_copy_buffer@@Base+0x50>
   22cdc:	ldr	r3, [pc, #32]	; 22d04 <flatcc_builder_copy_buffer@@Base+0x54>
   22ce0:	movw	r2, #1926	; 0x786
   22ce4:	add	r0, pc, r0
   22ce8:	add	r1, pc, r1
   22cec:	add	r3, pc, r3
   22cf0:	bl	12f04 <__assert_fail@plt>
   22cf4:	mov	r0, #0
   22cf8:	pop	{fp, pc}
   22cfc:	andeq	r2, r0, fp, lsl #17
   22d00:	andeq	r5, r0, r2, ror #23
   22d04:	andeq	r6, r0, sp, asr #22

00022d08 <flatcc_builder_finalize_buffer@@Base>:
   22d08:	push	{r4, r5, r6, sl, fp, lr}
   22d0c:	add	fp, sp, #16
   22d10:	mov	r5, r0
   22d14:	ldr	r0, [r0, #136]	; 0x88
   22d18:	cmp	r1, #0
   22d1c:	ldr	r2, [r5, #140]	; 0x8c
   22d20:	sub	r4, r2, r0
   22d24:	mov	r0, r4
   22d28:	strne	r4, [r1]
   22d2c:	bl	12e74 <malloc@plt>
   22d30:	cmp	r0, #0
   22d34:	beq	22d84 <flatcc_builder_finalize_buffer@@Base+0x7c>
   22d38:	mov	r6, r0
   22d3c:	ldr	r0, [r5, #184]	; 0xb8
   22d40:	cmp	r0, #0
   22d44:	beq	22da4 <flatcc_builder_finalize_buffer@@Base+0x9c>
   22d48:	add	r0, r5, #188	; 0xbc
   22d4c:	mov	r1, r6
   22d50:	mov	r2, r4
   22d54:	bl	23400 <flatcc_emitter_copy_buffer@@Base>
   22d58:	cmp	r0, #0
   22d5c:	movne	r0, r6
   22d60:	popne	{r4, r5, r6, sl, fp, pc}
   22d64:	ldr	r0, [pc, #88]	; 22dc4 <flatcc_builder_finalize_buffer@@Base+0xbc>
   22d68:	ldr	r1, [pc, #88]	; 22dc8 <flatcc_builder_finalize_buffer@@Base+0xc0>
   22d6c:	ldr	r3, [pc, #88]	; 22dcc <flatcc_builder_finalize_buffer@@Base+0xc4>
   22d70:	movw	r2, #1926	; 0x786
   22d74:	add	r0, pc, r0
   22d78:	add	r1, pc, r1
   22d7c:	add	r3, pc, r3
   22d80:	bl	12f04 <__assert_fail@plt>
   22d84:	ldr	r0, [pc, #80]	; 22ddc <flatcc_builder_finalize_buffer@@Base+0xd4>
   22d88:	ldr	r1, [pc, #80]	; 22de0 <flatcc_builder_finalize_buffer@@Base+0xd8>
   22d8c:	ldr	r3, [pc, #80]	; 22de4 <flatcc_builder_finalize_buffer@@Base+0xdc>
   22d90:	movw	r2, #1944	; 0x798
   22d94:	add	r0, pc, r0
   22d98:	add	r1, pc, r1
   22d9c:	add	r3, pc, r3
   22da0:	bl	12f04 <__assert_fail@plt>
   22da4:	ldr	r0, [pc, #36]	; 22dd0 <flatcc_builder_finalize_buffer@@Base+0xc8>
   22da8:	ldr	r1, [pc, #36]	; 22dd4 <flatcc_builder_finalize_buffer@@Base+0xcc>
   22dac:	ldr	r3, [pc, #36]	; 22dd8 <flatcc_builder_finalize_buffer@@Base+0xd0>
   22db0:	movw	r2, #1948	; 0x79c
   22db4:	add	r0, pc, r0
   22db8:	add	r1, pc, r1
   22dbc:	add	r3, pc, r3
   22dc0:	bl	12f04 <__assert_fail@plt>
   22dc4:	strdeq	r2, [r0], -fp
   22dc8:	andeq	r5, r0, r2, asr fp
   22dcc:			; <UNDEFINED> instruction: 0x00006abd
   22dd0:	ldrdeq	r6, [r0], -r3
   22dd4:	andeq	r5, r0, r2, lsl fp
   22dd8:	andeq	r6, r0, r2, asr #21
   22ddc:	strdeq	r6, [r0], -r3
   22de0:	andeq	r5, r0, r2, lsr fp
   22de4:	andeq	r6, r0, r2, ror #21

00022de8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   22de8:	push	{r4, r5, r6, r7, fp, lr}
   22dec:	add	fp, sp, #16
   22df0:	sub	sp, sp, #8
   22df4:	mov	r5, r0
   22df8:	mov	r4, r1
   22dfc:	ldr	r0, [r0, #136]	; 0x88
   22e00:	ldr	r1, [r5, #140]	; 0x8c
   22e04:	cmp	r4, #0
   22e08:	sub	r0, r1, r0
   22e0c:	mov	r1, #0
   22e10:	strne	r0, [r4]
   22e14:	ldrh	r2, [r5, #128]	; 0x80
   22e18:	str	r1, [sp, #4]
   22e1c:	add	r0, r0, r2
   22e20:	cmp	r2, #4
   22e24:	mov	r1, r2
   22e28:	rsb	r2, r2, #0
   22e2c:	sub	r0, r0, #1
   22e30:	movls	r1, #4
   22e34:	and	r7, r0, r2
   22e38:	add	r0, sp, #4
   22e3c:	mov	r2, r7
   22e40:	bl	12eb0 <posix_memalign@plt>
   22e44:	ldr	r6, [sp, #4]
   22e48:	cmp	r0, #0
   22e4c:	cmpne	r6, #0
   22e50:	bne	22ea0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   22e54:	cmp	r6, #0
   22e58:	beq	22ea8 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   22e5c:	ldr	r0, [r5, #184]	; 0xb8
   22e60:	cmp	r0, #0
   22e64:	beq	22ea0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   22e68:	add	r0, r5, #188	; 0xbc
   22e6c:	mov	r1, r6
   22e70:	mov	r2, r7
   22e74:	bl	23400 <flatcc_emitter_copy_buffer@@Base>
   22e78:	cmp	r0, #0
   22e7c:	bne	22eb4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   22e80:	ldr	r0, [pc, #56]	; 22ec0 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   22e84:	ldr	r1, [pc, #56]	; 22ec4 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   22e88:	ldr	r3, [pc, #56]	; 22ec8 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   22e8c:	movw	r2, #1926	; 0x786
   22e90:	add	r0, pc, r0
   22e94:	add	r1, pc, r1
   22e98:	add	r3, pc, r3
   22e9c:	bl	12f04 <__assert_fail@plt>
   22ea0:	mov	r0, r6
   22ea4:	bl	12e20 <free@plt>
   22ea8:	mov	r6, #0
   22eac:	cmp	r4, #0
   22eb0:	strne	r6, [r4]
   22eb4:	mov	r0, r6
   22eb8:	sub	sp, fp, #16
   22ebc:	pop	{r4, r5, r6, r7, fp, pc}
   22ec0:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   22ec4:	andeq	r5, r0, r6, lsr sl
   22ec8:	andeq	r6, r0, r1, lsr #19

00022ecc <flatcc_builder_aligned_alloc@@Base>:
   22ecc:	push	{fp, lr}
   22ed0:	mov	fp, sp
   22ed4:	sub	sp, sp, #8
   22ed8:	mov	r2, r1
   22edc:	mov	r1, r0
   22ee0:	mov	r0, #0
   22ee4:	cmp	r1, #4
   22ee8:	str	r0, [sp, #4]
   22eec:	add	r0, sp, #4
   22ef0:	movls	r1, #4
   22ef4:	bl	12eb0 <posix_memalign@plt>
   22ef8:	mov	r1, r0
   22efc:	ldr	r0, [sp, #4]
   22f00:	cmp	r1, #0
   22f04:	cmpne	r0, #0
   22f08:	bne	22f14 <flatcc_builder_aligned_alloc@@Base+0x48>
   22f0c:	mov	sp, fp
   22f10:	pop	{fp, pc}
   22f14:	bl	12e20 <free@plt>
   22f18:	mov	r0, #0
   22f1c:	str	r0, [sp, #4]
   22f20:	mov	sp, fp
   22f24:	pop	{fp, pc}

00022f28 <flatcc_builder_aligned_free@@Base>:
   22f28:	b	12e20 <free@plt>

00022f2c <flatcc_builder_get_emit_context@@Base>:
   22f2c:	ldr	r0, [r0, #36]	; 0x24
   22f30:	bx	lr

00022f34 <flatcc_emitter_recycle_page@@Base>:
   22f34:	ldr	r3, [r0]
   22f38:	mov	r2, r0
   22f3c:	mvn	r0, #0
   22f40:	cmp	r3, r1
   22f44:	ldrne	r2, [r2, #4]
   22f48:	cmpne	r2, r1
   22f4c:	bne	22f54 <flatcc_emitter_recycle_page@@Base+0x20>
   22f50:	bx	lr
   22f54:	ldr	r0, [r1, #2944]	; 0xb80
   22f58:	ldr	r2, [r1, #2948]	; 0xb84
   22f5c:	str	r2, [r0, #2948]	; 0xb84
   22f60:	ldr	r2, [r1, #2948]	; 0xb84
   22f64:	str	r0, [r2, #2944]	; 0xb80
   22f68:	ldr	r0, [r3, #2948]	; 0xb84
   22f6c:	str	r3, [r1, #2944]	; 0xb80
   22f70:	str	r0, [r1, #2948]	; 0xb84
   22f74:	str	r1, [r0, #2944]	; 0xb80
   22f78:	ldr	r0, [r1, #2944]	; 0xb80
   22f7c:	str	r1, [r0, #2948]	; 0xb84
   22f80:	mov	r0, #0
   22f84:	bx	lr

00022f88 <flatcc_emitter_reset@@Base>:
   22f88:	push	{r4, sl, fp, lr}
   22f8c:	add	fp, sp, #8
   22f90:	ldr	r1, [r0]
   22f94:	cmp	r1, #0
   22f98:	beq	23050 <flatcc_emitter_reset@@Base+0xc8>
   22f9c:	mov	r4, r0
   22fa0:	add	r2, r1, #1472	; 0x5c0
   22fa4:	mov	r0, #1472	; 0x5c0
   22fa8:	mov	r3, #0
   22fac:	stmib	r4, {r1, r2}
   22fb0:	str	r0, [r4, #12]
   22fb4:	str	r2, [r4, #16]
   22fb8:	str	r0, [r4, #20]
   22fbc:	movw	r0, #64064	; 0xfa40
   22fc0:	movt	r0, #65535	; 0xffff
   22fc4:	str	r0, [r1, #2952]	; 0xb88
   22fc8:	ldr	r2, [r4, #32]
   22fcc:	ldr	r0, [r4, #24]
   22fd0:	cmp	r2, #0
   22fd4:	moveq	r2, r0
   22fd8:	streq	r0, [r4, #32]
   22fdc:	str	r3, [r4, #24]
   22fe0:	add	r2, r2, r2, lsl #1
   22fe4:	lsr	r2, r2, #2
   22fe8:	add	r0, r2, r0, lsr #2
   22fec:	str	r0, [r4, #32]
   22ff0:	ldr	r2, [r4, #28]
   22ff4:	cmp	r2, r0, lsl #1
   22ff8:	bls	23050 <flatcc_emitter_reset@@Base+0xc8>
   22ffc:	mov	r2, r1
   23000:	ldr	r0, [r2, #2944]!	; 0xb80
   23004:	cmp	r0, r1
   23008:	beq	23050 <flatcc_emitter_reset@@Base+0xc8>
   2300c:	ldr	r3, [r0, #2944]	; 0xb80
   23010:	str	r3, [r2]
   23014:	ldr	r2, [r0, #2944]	; 0xb80
   23018:	str	r1, [r2, #2948]	; 0xb84
   2301c:	bl	12e20 <free@plt>
   23020:	ldr	r0, [r4, #28]
   23024:	ldr	r1, [r4, #32]
   23028:	sub	r0, r0, #2944	; 0xb80
   2302c:	cmp	r0, r1, lsl #1
   23030:	str	r0, [r4, #28]
   23034:	popls	{r4, sl, fp, pc}
   23038:	ldr	r1, [r4, #4]
   2303c:	ldr	r3, [r4]
   23040:	mov	r2, r1
   23044:	ldr	r0, [r2, #2944]!	; 0xb80
   23048:	cmp	r0, r3
   2304c:	bne	2300c <flatcc_emitter_reset@@Base+0x84>
   23050:	pop	{r4, sl, fp, pc}

00023054 <flatcc_emitter_clear@@Base>:
   23054:	push	{r4, r5, r6, sl, fp, lr}
   23058:	add	fp, sp, #16
   2305c:	ldr	r5, [r0]
   23060:	cmp	r5, #0
   23064:	popeq	{r4, r5, r6, sl, fp, pc}
   23068:	mov	r4, r0
   2306c:	ldr	r0, [r5, #2948]	; 0xb84
   23070:	mov	r6, #0
   23074:	str	r6, [r0, #2944]	; 0xb80
   23078:	b	23088 <flatcc_emitter_clear@@Base+0x34>
   2307c:	mov	r5, r0
   23080:	ldr	r0, [r0, #2948]	; 0xb84
   23084:	bl	12e20 <free@plt>
   23088:	ldr	r0, [r5, #2944]	; 0xb80
   2308c:	cmp	r0, #0
   23090:	bne	2307c <flatcc_emitter_clear@@Base+0x28>
   23094:	mov	r0, r5
   23098:	bl	12e20 <free@plt>
   2309c:	vmov.i32	q8, #0	; 0x00000000
   230a0:	add	r0, r4, #16
   230a4:	vst1.32	{d16-d17}, [r0]
   230a8:	mov	r0, #32
   230ac:	vst1.32	{d16-d17}, [r4], r0
   230b0:	str	r6, [r4]
   230b4:	pop	{r4, r5, r6, sl, fp, pc}

000230b8 <flatcc_emitter@@Base>:
   230b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230bc:	add	fp, sp, #28
   230c0:	sub	sp, sp, #4
   230c4:	mov	r6, r0
   230c8:	mov	r7, r1
   230cc:	ldr	r0, [r0, #24]
   230d0:	ldr	r1, [fp, #8]
   230d4:	mov	r4, r2
   230d8:	cmn	r3, #1
   230dc:	mov	r9, r6
   230e0:	add	r0, r0, r1
   230e4:	str	r0, [r6, #24]
   230e8:	ble	23228 <flatcc_emitter@@Base+0x170>
   230ec:	ldr	r0, [r9, #20]!
   230f0:	cmp	r0, r1
   230f4:	bcs	2339c <flatcc_emitter@@Base+0x2e4>
   230f8:	mov	r8, #0
   230fc:	cmp	r4, #0
   23100:	beq	233f4 <flatcc_emitter@@Base+0x33c>
   23104:	movw	sl, #64064	; 0xfa40
   23108:	movt	sl, #65535	; 0xffff
   2310c:	ldr	r8, [r7, #4]
   23110:	cmp	r8, #0
   23114:	beq	23218 <flatcc_emitter@@Base+0x160>
   23118:	ldr	r9, [r7]
   2311c:	cmp	r8, r0
   23120:	mov	r5, r8
   23124:	bls	231e4 <flatcc_emitter@@Base+0x12c>
   23128:	mov	r5, r0
   2312c:	cmp	r5, #0
   23130:	bne	231e4 <flatcc_emitter@@Base+0x12c>
   23134:	ldr	r5, [r6, #4]
   23138:	cmp	r5, #0
   2313c:	beq	23150 <flatcc_emitter@@Base+0x98>
   23140:	ldr	r0, [r5, #2944]	; 0xb80
   23144:	ldr	r1, [r6]
   23148:	cmp	r0, r1
   2314c:	bne	23188 <flatcc_emitter@@Base+0xd0>
   23150:	movw	r0, #2956	; 0xb8c
   23154:	bl	12e74 <malloc@plt>
   23158:	cmp	r0, #0
   2315c:	beq	233ac <flatcc_emitter@@Base+0x2f4>
   23160:	ldr	r1, [r6, #28]
   23164:	cmp	r5, #0
   23168:	add	r1, r1, #2944	; 0xb80
   2316c:	str	r1, [r6, #28]
   23170:	beq	231b4 <flatcc_emitter@@Base+0xfc>
   23174:	ldr	r1, [r6]
   23178:	str	r1, [r0, #2944]	; 0xb80
   2317c:	str	r5, [r0, #2948]	; 0xb84
   23180:	str	r0, [r1, #2948]	; 0xb84
   23184:	str	r0, [r5, #2944]	; 0xb80
   23188:	mov	r5, #2944	; 0xb80
   2318c:	str	r0, [r6, #4]
   23190:	str	r0, [r6, #16]
   23194:	str	r5, [r6, #20]
   23198:	ldr	r1, [r0, #2948]	; 0xb84
   2319c:	ldr	r1, [r1, #2952]	; 0xb88
   231a0:	add	r1, r1, #2944	; 0xb80
   231a4:	str	r1, [r0, #2952]	; 0xb88
   231a8:	cmp	r8, r5
   231ac:	bhi	2312c <flatcc_emitter@@Base+0x74>
   231b0:	b	231e0 <flatcc_emitter@@Base+0x128>
   231b4:	add	r1, r0, #1472	; 0x5c0
   231b8:	mov	r5, #1472	; 0x5c0
   231bc:	str	r0, [r6]
   231c0:	stmib	r6, {r0, r1, r5}
   231c4:	str	r1, [r6, #16]
   231c8:	str	r5, [r6, #20]
   231cc:	str	r0, [r0, #2944]	; 0xb80
   231d0:	str	r0, [r0, #2948]	; 0xb84
   231d4:	str	sl, [r0, #2952]	; 0xb88
   231d8:	cmp	r8, r5
   231dc:	bhi	2312c <flatcc_emitter@@Base+0x74>
   231e0:	mov	r5, r8
   231e4:	ldr	r0, [r6, #16]
   231e8:	mov	r1, r9
   231ec:	mov	r2, r5
   231f0:	bl	12e2c <memcpy@plt>
   231f4:	ldr	r0, [r6, #16]
   231f8:	ldr	r1, [r6, #20]
   231fc:	add	r9, r9, r5
   23200:	subs	r8, r8, r5
   23204:	add	r2, r0, r5
   23208:	sub	r0, r1, r5
   2320c:	str	r2, [r6, #16]
   23210:	str	r0, [r6, #20]
   23214:	bne	2311c <flatcc_emitter@@Base+0x64>
   23218:	subs	r4, r4, #1
   2321c:	add	r7, r7, #8
   23220:	bne	2310c <flatcc_emitter@@Base+0x54>
   23224:	b	23394 <flatcc_emitter@@Base+0x2dc>
   23228:	ldr	r0, [r9, #12]!
   2322c:	cmp	r0, r1
   23230:	bcs	233b4 <flatcc_emitter@@Base+0x2fc>
   23234:	mov	r8, #0
   23238:	cmp	r4, #0
   2323c:	beq	233f4 <flatcc_emitter@@Base+0x33c>
   23240:	add	r0, r7, r4, lsl #3
   23244:	movw	sl, #2952	; 0xb88
   23248:	ldr	r8, [r0, #-4]
   2324c:	sub	r1, r0, #8
   23250:	str	r1, [sp]
   23254:	cmp	r8, #0
   23258:	beq	23388 <flatcc_emitter@@Base+0x2d0>
   2325c:	ldr	r0, [sp]
   23260:	ldr	r0, [r0]
   23264:	add	r7, r0, r8
   23268:	ldr	r1, [r9]
   2326c:	cmp	r8, r1
   23270:	bls	23358 <flatcc_emitter@@Base+0x2a0>
   23274:	cmp	r1, #0
   23278:	mov	r5, r1
   2327c:	bne	2335c <flatcc_emitter@@Base+0x2a4>
   23280:	ldr	r5, [r6]
   23284:	cmp	r5, #0
   23288:	beq	232b4 <flatcc_emitter@@Base+0x1fc>
   2328c:	ldr	r0, [r5, #2948]	; 0xb84
   23290:	ldr	r1, [r6, #4]
   23294:	cmp	r0, r1
   23298:	beq	232b4 <flatcc_emitter@@Base+0x1fc>
   2329c:	ldr	r1, [r5, #2952]	; 0xb88
   232a0:	mov	r2, r0
   232a4:	sub	r1, r1, #2944	; 0xb80
   232a8:	str	r1, [r2, #2952]!	; 0xb88
   232ac:	str	r0, [r6]
   232b0:	b	232f4 <flatcc_emitter@@Base+0x23c>
   232b4:	movw	r0, #2956	; 0xb8c
   232b8:	bl	12e74 <malloc@plt>
   232bc:	cmp	r0, #0
   232c0:	beq	233ac <flatcc_emitter@@Base+0x2f4>
   232c4:	ldr	r1, [r6, #28]
   232c8:	cmp	r5, #0
   232cc:	add	r1, r1, #2944	; 0xb80
   232d0:	str	r1, [r6, #28]
   232d4:	beq	23320 <flatcc_emitter@@Base+0x268>
   232d8:	ldr	r1, [r6, #4]
   232dc:	add	r2, r0, sl
   232e0:	str	r5, [r0, #2944]	; 0xb80
   232e4:	str	r1, [r0, #2948]	; 0xb84
   232e8:	str	r0, [r5, #2948]	; 0xb84
   232ec:	str	r0, [r1, #2944]	; 0xb80
   232f0:	str	r0, [r6]
   232f4:	add	r3, r0, #2944	; 0xb80
   232f8:	mov	r1, #2944	; 0xb80
   232fc:	str	r3, [r6, #8]
   23300:	str	r1, [r6, #12]
   23304:	ldr	r0, [r0, #2944]	; 0xb80
   23308:	ldr	r0, [r0, #2952]	; 0xb88
   2330c:	sub	r0, r0, #2944	; 0xb80
   23310:	str	r0, [r2]
   23314:	cmp	r8, r1
   23318:	bhi	23274 <flatcc_emitter@@Base+0x1bc>
   2331c:	b	23358 <flatcc_emitter@@Base+0x2a0>
   23320:	add	r2, r0, #1472	; 0x5c0
   23324:	mov	r1, #1472	; 0x5c0
   23328:	str	r0, [r6]
   2332c:	stmib	r6, {r0, r2}
   23330:	str	r1, [r6, #12]
   23334:	str	r2, [r6, #16]
   23338:	movw	r2, #64064	; 0xfa40
   2333c:	str	r1, [r6, #20]
   23340:	str	r0, [r0, #2944]	; 0xb80
   23344:	str	r0, [r0, #2948]	; 0xb84
   23348:	movt	r2, #65535	; 0xffff
   2334c:	str	r2, [r0, #2952]	; 0xb88
   23350:	cmp	r8, r1
   23354:	bhi	23274 <flatcc_emitter@@Base+0x1bc>
   23358:	mov	r5, r8
   2335c:	sub	r0, r1, r5
   23360:	sub	r7, r7, r5
   23364:	mov	r2, r5
   23368:	str	r0, [r6, #12]
   2336c:	mov	r1, r7
   23370:	ldr	r0, [r6, #8]
   23374:	sub	r0, r0, r5
   23378:	str	r0, [r6, #8]
   2337c:	bl	12e2c <memcpy@plt>
   23380:	subs	r8, r8, r5
   23384:	bne	23268 <flatcc_emitter@@Base+0x1b0>
   23388:	ldr	r0, [sp]
   2338c:	subs	r4, r4, #1
   23390:	bne	23248 <flatcc_emitter@@Base+0x190>
   23394:	mov	r8, #0
   23398:	b	233f4 <flatcc_emitter@@Base+0x33c>
   2339c:	ldr	r5, [r6, #16]
   233a0:	add	r2, r5, r1
   233a4:	str	r2, [r6, #16]
   233a8:	b	233c0 <flatcc_emitter@@Base+0x308>
   233ac:	mvn	r8, #0
   233b0:	b	233f4 <flatcc_emitter@@Base+0x33c>
   233b4:	ldr	r2, [r6, #8]
   233b8:	sub	r5, r2, r1
   233bc:	str	r5, [r6, #8]
   233c0:	sub	r0, r0, r1
   233c4:	mov	r8, #0
   233c8:	cmp	r4, #0
   233cc:	str	r0, [r9]
   233d0:	beq	233f4 <flatcc_emitter@@Base+0x33c>
   233d4:	ldm	r7, {r1, r2}
   233d8:	mov	r0, r5
   233dc:	bl	12e2c <memcpy@plt>
   233e0:	ldr	r0, [r7, #4]
   233e4:	add	r7, r7, #8
   233e8:	subs	r4, r4, #1
   233ec:	add	r5, r5, r0
   233f0:	bne	233d4 <flatcc_emitter@@Base+0x31c>
   233f4:	mov	r0, r8
   233f8:	sub	sp, fp, #28
   233fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023400 <flatcc_emitter_copy_buffer@@Base>:
   23400:	push	{r4, r5, r6, sl, fp, lr}
   23404:	add	fp, sp, #16
   23408:	mov	r3, r2
   2340c:	ldr	r2, [r0, #24]
   23410:	mov	r5, #0
   23414:	cmp	r2, r3
   23418:	bhi	234a0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   2341c:	mov	r4, r0
   23420:	ldr	r0, [r0]
   23424:	cmp	r0, #0
   23428:	beq	234a0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   2342c:	mov	r6, r1
   23430:	ldr	r1, [r4, #4]
   23434:	cmp	r0, r1
   23438:	beq	234a8 <flatcc_emitter_copy_buffer@@Base+0xa8>
   2343c:	ldr	r0, [r4, #12]
   23440:	ldr	r1, [r4, #8]
   23444:	rsb	r5, r0, #2944	; 0xb80
   23448:	mov	r0, r6
   2344c:	mov	r2, r5
   23450:	bl	12e2c <memcpy@plt>
   23454:	ldm	r4, {r0, r1}
   23458:	add	r5, r6, r5
   2345c:	ldr	r6, [r0, #2944]	; 0xb80
   23460:	cmp	r6, r1
   23464:	beq	2348c <flatcc_emitter_copy_buffer@@Base+0x8c>
   23468:	mov	r0, r5
   2346c:	mov	r1, r6
   23470:	mov	r2, #2944	; 0xb80
   23474:	bl	12e2c <memcpy@plt>
   23478:	ldr	r6, [r6, #2944]	; 0xb80
   2347c:	ldr	r0, [r4, #4]
   23480:	add	r5, r5, #2944	; 0xb80
   23484:	cmp	r6, r0
   23488:	bne	23468 <flatcc_emitter_copy_buffer@@Base+0x68>
   2348c:	ldr	r0, [r4, #20]
   23490:	mov	r1, r6
   23494:	rsb	r2, r0, #2944	; 0xb80
   23498:	mov	r0, r5
   2349c:	bl	12e2c <memcpy@plt>
   234a0:	mov	r0, r5
   234a4:	pop	{r4, r5, r6, sl, fp, pc}
   234a8:	ldr	r1, [r4, #8]
   234ac:	mov	r0, r6
   234b0:	bl	12e2c <memcpy@plt>
   234b4:	mov	r0, r6
   234b8:	pop	{r4, r5, r6, sl, fp, pc}

000234bc <flatcc_verify_error_string@@Base>:
   234bc:	cmp	r0, #36	; 0x24
   234c0:	ldrhi	r0, [pc, #24]	; 234e0 <flatcc_verify_error_string@@Base+0x24>
   234c4:	addhi	r0, pc, r0
   234c8:	bxhi	lr
   234cc:	ldr	r1, [pc, #8]	; 234dc <flatcc_verify_error_string@@Base+0x20>
   234d0:	add	r1, pc, r1
   234d4:	ldr	r0, [r1, r0, lsl #2]
   234d8:	bx	lr
   234dc:	muleq	r1, r8, r9
   234e0:	andeq	r6, r0, r1, lsl #21

000234e4 <flatcc_verify_field@@Base>:
   234e4:	push	{r4, sl, fp, lr}
   234e8:	add	fp, sp, #8
   234ec:	ldrh	r4, [r0, #22]
   234f0:	mov	ip, #4
   234f4:	mov	lr, #0
   234f8:	add	r1, ip, r1, lsl #1
   234fc:	uxth	ip, r1
   23500:	cmp	ip, r4
   23504:	bcs	23560 <flatcc_verify_field@@Base+0x7c>
   23508:	ldr	r4, [r0, #12]
   2350c:	uxtah	r1, r4, r1
   23510:	ldrh	ip, [r1]
   23514:	cmp	ip, #0
   23518:	beq	23560 <flatcc_verify_field@@Base+0x7c>
   2351c:	add	r1, ip, r2
   23520:	ldrh	r2, [r0, #20]
   23524:	mov	lr, #13
   23528:	cmp	r1, r2
   2352c:	bhi	23560 <flatcc_verify_field@@Base+0x7c>
   23530:	ldr	r1, [r0]
   23534:	mov	lr, #0
   23538:	add	r2, r1, ip
   2353c:	ldr	r1, [r0, #16]
   23540:	add	r4, r2, r1
   23544:	sub	r1, r3, #1
   23548:	tst	r4, r1
   2354c:	beq	23560 <flatcc_verify_field@@Base+0x7c>
   23550:	ldr	r0, [r0, #16]
   23554:	add	r0, r2, r0
   23558:	ands	lr, r0, r1
   2355c:	movwne	lr, #12
   23560:	mov	r0, lr
   23564:	pop	{r4, sl, fp, pc}

00023568 <flatcc_verify_string_field@@Base>:
   23568:	push	{fp, lr}
   2356c:	mov	fp, sp
   23570:	mov	lr, r2
   23574:	ldrh	r2, [r0, #22]
   23578:	mov	r3, #4
   2357c:	add	r1, r3, r1, lsl #1
   23580:	uxth	r3, r1
   23584:	cmp	r3, r2
   23588:	bcs	23624 <flatcc_verify_string_field@@Base+0xbc>
   2358c:	ldr	r2, [r0, #12]
   23590:	uxtah	r1, r2, r1
   23594:	ldrh	r1, [r1]
   23598:	cmp	r1, #0
   2359c:	beq	23624 <flatcc_verify_string_field@@Base+0xbc>
   235a0:	ldrh	r2, [r0, #20]
   235a4:	add	r3, r1, #4
   235a8:	mov	lr, #13
   235ac:	cmp	r3, r2
   235b0:	bhi	2361c <flatcc_verify_string_field@@Base+0xb4>
   235b4:	ldr	r2, [r0, #16]
   235b8:	mov	lr, #12
   235bc:	add	r3, r2, r1
   235c0:	tst	r3, #3
   235c4:	bne	2361c <flatcc_verify_string_field@@Base+0xb4>
   235c8:	cmp	r3, #0
   235cc:	moveq	lr, #0
   235d0:	moveq	r0, lr
   235d4:	popeq	{fp, pc}
   235d8:	ldr	ip, [r0]
   235dc:	mov	lr, #17
   235e0:	ldr	r1, [ip, r3]
   235e4:	add	r1, r1, r3
   235e8:	tst	r1, #3
   235ec:	bne	2361c <flatcc_verify_string_field@@Base+0xb4>
   235f0:	cmp	r1, r3
   235f4:	bls	2361c <flatcc_verify_string_field@@Base+0xb4>
   235f8:	ldr	r3, [r0, #4]
   235fc:	add	r0, r1, #4
   23600:	cmp	r3, r0
   23604:	ldrcs	r1, [ip, r1]
   23608:	subcs	r2, r3, r0
   2360c:	movcs	lr, #8
   23610:	addcs	r3, r1, #1
   23614:	cmpcs	r2, r3
   23618:	bcs	23634 <flatcc_verify_string_field@@Base+0xcc>
   2361c:	mov	r0, lr
   23620:	pop	{fp, pc}
   23624:	cmp	lr, #0
   23628:	movwne	lr, #4
   2362c:	mov	r0, lr
   23630:	pop	{fp, pc}
   23634:	add	r0, ip, r0
   23638:	ldrb	lr, [r0, r1]
   2363c:	cmp	lr, #0
   23640:	movwne	lr, #7
   23644:	mov	r0, lr
   23648:	pop	{fp, pc}

0002364c <flatcc_verify_vector_field@@Base>:
   2364c:	push	{r4, r5, fp, lr}
   23650:	add	fp, sp, #8
   23654:	mov	r5, r2
   23658:	ldrh	r2, [r0, #22]
   2365c:	mov	r4, #4
   23660:	add	r1, r4, r1, lsl #1
   23664:	uxth	r4, r1
   23668:	cmp	r4, r2
   2366c:	bcs	23734 <flatcc_verify_vector_field@@Base+0xe8>
   23670:	ldr	r2, [r0, #12]
   23674:	uxtah	r1, r2, r1
   23678:	ldrh	r1, [r1]
   2367c:	cmp	r1, #0
   23680:	beq	23734 <flatcc_verify_vector_field@@Base+0xe8>
   23684:	ldrh	r2, [r0, #20]
   23688:	add	r4, r1, #4
   2368c:	mov	r5, #13
   23690:	cmp	r4, r2
   23694:	bhi	2372c <flatcc_verify_vector_field@@Base+0xe0>
   23698:	ldr	r2, [r0, #16]
   2369c:	mov	r5, #12
   236a0:	add	r1, r2, r1
   236a4:	tst	r1, #3
   236a8:	bne	2372c <flatcc_verify_vector_field@@Base+0xe0>
   236ac:	cmp	r1, #0
   236b0:	moveq	r5, #0
   236b4:	moveq	r0, r5
   236b8:	popeq	{r4, r5, fp, pc}
   236bc:	ldr	ip, [r0]
   236c0:	ldr	r4, [fp, #8]
   236c4:	mov	r5, #16
   236c8:	ldr	r2, [ip, r1]
   236cc:	cmp	r4, #4
   236d0:	movls	r4, #4
   236d4:	add	lr, r2, r1
   236d8:	cmp	lr, r1
   236dc:	bls	2372c <flatcc_verify_vector_field@@Base+0xe0>
   236e0:	ldr	r0, [r0, #4]
   236e4:	add	r1, lr, #4
   236e8:	cmp	r1, r0
   236ec:	bhi	2372c <flatcc_verify_vector_field@@Base+0xe0>
   236f0:	sub	r2, r4, #1
   236f4:	orr	r2, r2, #3
   236f8:	tst	r1, r2
   236fc:	bne	2372c <flatcc_verify_vector_field@@Base+0xe0>
   23700:	ldr	r2, [fp, #12]
   23704:	ldr	r1, [ip, lr]
   23708:	mov	r5, #25
   2370c:	cmp	r1, r2
   23710:	bhi	2372c <flatcc_verify_vector_field@@Base+0xe0>
   23714:	sub	r0, r0, #4
   23718:	mul	r1, r1, r3
   2371c:	mov	r5, #0
   23720:	sub	r0, r0, lr
   23724:	cmp	r0, r1
   23728:	movwcc	r5, #26
   2372c:	mov	r0, r5
   23730:	pop	{r4, r5, fp, pc}
   23734:	cmp	r5, #0
   23738:	movwne	r5, #4
   2373c:	mov	r0, r5
   23740:	pop	{r4, r5, fp, pc}

00023744 <flatcc_verify_string_vector_field@@Base>:
   23744:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23748:	add	fp, sp, #24
   2374c:	ldrh	r7, [r0, #22]
   23750:	mov	r3, #4
   23754:	add	r1, r3, r1, lsl #1
   23758:	uxth	r3, r1
   2375c:	cmp	r3, r7
   23760:	bcs	237a8 <flatcc_verify_string_vector_field@@Base+0x64>
   23764:	ldr	r3, [r0, #12]
   23768:	uxtah	r1, r3, r1
   2376c:	ldrh	r1, [r1]
   23770:	cmp	r1, #0
   23774:	beq	237a8 <flatcc_verify_string_vector_field@@Base+0x64>
   23778:	ldrh	r3, [r0, #20]
   2377c:	add	r7, r1, #4
   23780:	mov	r2, #13
   23784:	cmp	r7, r3
   23788:	bhi	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   2378c:	ldr	r4, [r0, #16]
   23790:	mov	r2, #12
   23794:	add	r6, r4, r1
   23798:	tst	r6, #3
   2379c:	beq	237b8 <flatcc_verify_string_vector_field@@Base+0x74>
   237a0:	mov	r0, r2
   237a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   237a8:	cmp	r2, #0
   237ac:	movwne	r2, #4
   237b0:	mov	r0, r2
   237b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   237b8:	mov	r2, #0
   237bc:	cmp	r6, #0
   237c0:	beq	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   237c4:	ldr	r5, [r0]
   237c8:	mov	r2, #16
   237cc:	ldr	r7, [r5, r6]
   237d0:	add	r3, r7, r6
   237d4:	cmp	r3, r6
   237d8:	bls	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   237dc:	ldr	lr, [r0, #4]
   237e0:	add	r0, r3, #4
   237e4:	cmp	r0, lr
   237e8:	bhi	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   237ec:	ands	r0, r0, #3
   237f0:	bne	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   237f4:	ldr	ip, [r5, r3]
   237f8:	mov	r2, #25
   237fc:	cmn	ip, #-1073741823	; 0xc0000001
   23800:	bhi	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   23804:	sub	r0, lr, #4
   23808:	mov	r2, #26
   2380c:	sub	r0, r0, r3
   23810:	cmp	r0, ip, lsl #2
   23814:	bcc	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   23818:	cmp	ip, #0
   2381c:	mov	r2, #0
   23820:	beq	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   23824:	sub	r0, lr, #8
   23828:	add	r9, r7, r4
   2382c:	sub	r0, r0, r1
   23830:	sub	r0, r0, r7
   23834:	sub	r8, r0, r4
   23838:	add	r0, r5, r9
   2383c:	mov	r5, #0
   23840:	rsb	r4, r0, #0
   23844:	sub	r0, r1, r4
   23848:	add	r3, r1, r9
   2384c:	mov	r2, #17
   23850:	ldr	r6, [r0, #4]
   23854:	add	r7, r3, r6
   23858:	add	r0, r7, #4
   2385c:	tst	r0, #3
   23860:	bne	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   23864:	add	r3, r3, #4
   23868:	cmp	r0, r3
   2386c:	bls	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   23870:	add	r0, r7, #8
   23874:	cmp	lr, r0
   23878:	bcc	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   2387c:	add	r0, r1, r6
   23880:	sub	r2, r8, r6
   23884:	sub	r0, r0, r4
   23888:	ldr	r0, [r0, #4]
   2388c:	add	r3, r0, #1
   23890:	cmp	r2, r3
   23894:	bcc	238d0 <flatcc_verify_string_vector_field@@Base+0x18c>
   23898:	add	r0, r6, r0
   2389c:	add	r0, r1, r0
   238a0:	sub	r0, r0, r4
   238a4:	ldrb	r0, [r0, #8]
   238a8:	cmp	r0, #0
   238ac:	bne	238dc <flatcc_verify_string_vector_field@@Base+0x198>
   238b0:	add	r5, r5, #1
   238b4:	sub	r8, r8, #4
   238b8:	add	r9, r9, #4
   238bc:	sub	r4, r4, #4
   238c0:	mov	r2, #0
   238c4:	cmp	r5, ip
   238c8:	bcc	23844 <flatcc_verify_string_vector_field@@Base+0x100>
   238cc:	b	237a0 <flatcc_verify_string_vector_field@@Base+0x5c>
   238d0:	mov	r2, #8
   238d4:	mov	r0, r2
   238d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   238dc:	mov	r2, #7
   238e0:	mov	r0, r2
   238e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000238e8 <flatcc_verify_table_field@@Base>:
   238e8:	push	{r4, r5, r6, sl, fp, lr}
   238ec:	add	fp, sp, #16
   238f0:	sub	sp, sp, #24
   238f4:	ldrh	r5, [r0, #22]
   238f8:	mov	r6, #4
   238fc:	add	r1, r6, r1, lsl #1
   23900:	uxth	r6, r1
   23904:	cmp	r6, r5
   23908:	bcs	23a18 <flatcc_verify_table_field@@Base+0x130>
   2390c:	ldr	r6, [r0, #12]
   23910:	uxtah	r1, r6, r1
   23914:	ldrh	r1, [r1]
   23918:	cmp	r1, #0
   2391c:	beq	23a18 <flatcc_verify_table_field@@Base+0x130>
   23920:	ldrh	r6, [r0, #20]
   23924:	add	r5, r1, #4
   23928:	mov	r2, #13
   2392c:	cmp	r5, r6
   23930:	bhi	23a20 <flatcc_verify_table_field@@Base+0x138>
   23934:	ldr	r2, [r0, #16]
   23938:	add	r4, r2, r1
   2393c:	mov	r2, #12
   23940:	tst	r4, #3
   23944:	bne	23a20 <flatcc_verify_table_field@@Base+0x138>
   23948:	cmp	r4, #0
   2394c:	beq	23a2c <flatcc_verify_table_field@@Base+0x144>
   23950:	ldm	r0, {r1, ip}
   23954:	ldr	r2, [r0, #8]
   23958:	ldr	r0, [r1, r4]
   2395c:	subs	r2, r2, #1
   23960:	str	r2, [sp, #8]
   23964:	beq	23a34 <flatcc_verify_table_field@@Base+0x14c>
   23968:	add	r0, r0, r4
   2396c:	mov	r2, #15
   23970:	tst	r0, #3
   23974:	bne	23a20 <flatcc_verify_table_field@@Base+0x138>
   23978:	cmp	r0, r4
   2397c:	bls	23a20 <flatcc_verify_table_field@@Base+0x138>
   23980:	add	r6, r0, #4
   23984:	cmp	r6, ip
   23988:	bhi	23a20 <flatcc_verify_table_field@@Base+0x138>
   2398c:	str	r0, [sp, #16]
   23990:	ldr	r2, [r1, r0]
   23994:	sub	r5, r0, r2
   23998:	mov	r2, #29
   2399c:	tst	r5, #-2147483647	; 0x80000001
   239a0:	bne	23a20 <flatcc_verify_table_field@@Base+0x138>
   239a4:	add	r4, r5, #2
   239a8:	mov	r2, #27
   239ac:	cmp	r4, ip
   239b0:	bhi	23a20 <flatcc_verify_table_field@@Base+0x138>
   239b4:	mov	lr, r1
   239b8:	mov	r2, #30
   239bc:	ldrh	r6, [lr, r5]!
   239c0:	tst	r6, #1
   239c4:	strh	r6, [sp, #22]
   239c8:	bne	23a20 <flatcc_verify_table_field@@Base+0x138>
   239cc:	add	r5, r5, r6
   239d0:	cmp	r5, ip
   239d4:	bhi	23a20 <flatcc_verify_table_field@@Base+0x138>
   239d8:	mov	r2, #28
   239dc:	cmp	r6, #4
   239e0:	bcc	23a20 <flatcc_verify_table_field@@Base+0x138>
   239e4:	add	r2, r1, r4
   239e8:	sub	r0, ip, r0
   239ec:	ldrh	r4, [r2]
   239f0:	mov	r2, #20
   239f4:	cmp	r0, r4
   239f8:	strh	r4, [sp, #20]
   239fc:	bcc	23a20 <flatcc_verify_table_field@@Base+0x138>
   23a00:	mov	r0, sp
   23a04:	str	lr, [sp, #12]
   23a08:	stm	sp, {r1, ip}
   23a0c:	blx	r3
   23a10:	mov	r2, r0
   23a14:	b	23a20 <flatcc_verify_table_field@@Base+0x138>
   23a18:	cmp	r2, #0
   23a1c:	movwne	r2, #4
   23a20:	mov	r0, r2
   23a24:	sub	sp, fp, #16
   23a28:	pop	{r4, r5, r6, sl, fp, pc}
   23a2c:	mov	r2, #0
   23a30:	b	23a20 <flatcc_verify_table_field@@Base+0x138>
   23a34:	mov	r2, #3
   23a38:	b	23a20 <flatcc_verify_table_field@@Base+0x138>

00023a3c <flatcc_verify_table_vector_field@@Base>:
   23a3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a40:	add	fp, sp, #28
   23a44:	sub	sp, sp, #36	; 0x24
   23a48:	ldrh	r7, [r0, #22]
   23a4c:	mov	r4, r3
   23a50:	mov	r3, #4
   23a54:	add	r1, r3, r1, lsl #1
   23a58:	uxth	r3, r1
   23a5c:	cmp	r3, r7
   23a60:	bcs	23c34 <flatcc_verify_table_vector_field@@Base+0x1f8>
   23a64:	ldr	r3, [r0, #12]
   23a68:	uxtah	r1, r3, r1
   23a6c:	ldrh	r1, [r1]
   23a70:	cmp	r1, #0
   23a74:	beq	23c34 <flatcc_verify_table_vector_field@@Base+0x1f8>
   23a78:	ldrh	r3, [r0, #20]
   23a7c:	add	r7, r1, #4
   23a80:	mov	r2, #13
   23a84:	cmp	r7, r3
   23a88:	bhi	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23a8c:	ldr	r3, [r0, #16]
   23a90:	mov	r2, #12
   23a94:	add	r5, r3, r1
   23a98:	tst	r5, #3
   23a9c:	bne	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23aa0:	mov	r2, #0
   23aa4:	cmp	r5, #0
   23aa8:	beq	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23aac:	ldr	r7, [r0, #8]
   23ab0:	cmp	r7, #1
   23ab4:	blt	23c48 <flatcc_verify_table_vector_field@@Base+0x20c>
   23ab8:	ldr	sl, [r0]
   23abc:	mov	r2, #16
   23ac0:	ldr	ip, [sl, r5]
   23ac4:	add	r6, ip, r5
   23ac8:	cmp	r6, r5
   23acc:	bls	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23ad0:	ldr	lr, [r0, #4]
   23ad4:	add	r0, r6, #4
   23ad8:	cmp	r0, lr
   23adc:	bhi	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23ae0:	ands	r0, r0, #3
   23ae4:	bne	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23ae8:	ldr	r9, [sl, r6]
   23aec:	mov	r2, #25
   23af0:	cmn	r9, #-1073741823	; 0xc0000001
   23af4:	bhi	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23af8:	sub	r0, lr, #4
   23afc:	mov	r2, #26
   23b00:	sub	r6, r0, r6
   23b04:	cmp	r6, r9, lsl #2
   23b08:	bcc	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23b0c:	cmp	r9, #0
   23b10:	mov	r2, #0
   23b14:	beq	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23b18:	sub	r0, r0, r1
   23b1c:	str	r9, [sp]
   23b20:	sub	r0, r0, ip
   23b24:	ldr	r9, [sp]
   23b28:	sub	r8, r0, r3
   23b2c:	add	r0, ip, r3
   23b30:	add	r0, r0, r1
   23b34:	mov	r1, #0
   23b38:	add	r5, r0, #4
   23b3c:	sub	r0, r7, #2
   23b40:	str	r0, [sp, #4]
   23b44:	ldr	r0, [sp, #4]
   23b48:	ldr	r2, [sl, r5]
   23b4c:	cmp	r0, #0
   23b50:	str	r0, [sp, #20]
   23b54:	beq	23d08 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23b58:	add	r0, r5, r2
   23b5c:	str	r1, [sp, #8]
   23b60:	add	ip, r0, #4
   23b64:	tst	r0, #3
   23b68:	bne	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23b6c:	cmp	r0, r5
   23b70:	bls	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23b74:	cmp	ip, lr
   23b78:	bhi	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23b7c:	str	r0, [sp, #28]
   23b80:	add	r3, sl, r2
   23b84:	ldr	r7, [r3, r5]
   23b88:	sub	r6, r2, r7
   23b8c:	add	r3, r5, r6
   23b90:	tst	r3, #-2147483647	; 0x80000001
   23b94:	bne	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23b98:	add	r1, r3, #2
   23b9c:	cmp	r1, lr
   23ba0:	bhi	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23ba4:	add	r1, sl, r6
   23ba8:	add	r1, r1, r5
   23bac:	ldrh	r6, [r1]
   23bb0:	cmp	r6, #4
   23bb4:	strh	r6, [sp, #34]	; 0x22
   23bb8:	bcc	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23bbc:	ands	r1, r6, #1
   23bc0:	bne	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23bc4:	add	r1, r2, r6
   23bc8:	sub	r1, r1, r7
   23bcc:	add	r1, r5, r1
   23bd0:	cmp	r1, lr
   23bd4:	bhi	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23bd8:	add	r3, sl, r3
   23bdc:	sub	r2, r8, r2
   23be0:	ldrh	r1, [r3, #2]
   23be4:	cmp	r2, r1
   23be8:	strh	r1, [sp, #32]
   23bec:	bcc	23c50 <flatcc_verify_table_vector_field@@Base+0x214>
   23bf0:	add	r0, sp, #12
   23bf4:	str	sl, [sp, #12]
   23bf8:	str	r3, [sp, #24]
   23bfc:	mov	r6, lr
   23c00:	str	lr, [sp, #16]
   23c04:	blx	r4
   23c08:	cmp	r0, #0
   23c0c:	bne	23d18 <flatcc_verify_table_vector_field@@Base+0x2dc>
   23c10:	ldr	r1, [sp, #8]
   23c14:	sub	r8, r8, #4
   23c18:	add	r5, r5, #4
   23c1c:	mov	r2, #0
   23c20:	mov	lr, r6
   23c24:	add	r1, r1, #1
   23c28:	cmp	r1, r9
   23c2c:	bcc	23b44 <flatcc_verify_table_vector_field@@Base+0x108>
   23c30:	b	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c34:	cmp	r2, #0
   23c38:	movwne	r2, #4
   23c3c:	mov	r0, r2
   23c40:	sub	sp, fp, #28
   23c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c48:	mov	r2, #3
   23c4c:	b	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c50:	ldr	r1, [sp, #4]
   23c54:	str	r1, [sp, #20]
   23c58:	mov	r2, #15
   23c5c:	tst	r0, #3
   23c60:	bne	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c64:	cmp	r0, r5
   23c68:	bls	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c6c:	cmp	ip, lr
   23c70:	bhi	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c74:	str	r0, [sp, #28]
   23c78:	mov	r2, #29
   23c7c:	ldr	r1, [sl, r0]
   23c80:	sub	r7, r0, r1
   23c84:	tst	r7, #-2147483647	; 0x80000001
   23c88:	bne	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c8c:	add	r3, r7, #2
   23c90:	mov	r2, #27
   23c94:	cmp	r3, lr
   23c98:	bhi	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23c9c:	mov	r1, sl
   23ca0:	mov	r2, #30
   23ca4:	ldrh	r6, [r1, r7]!
   23ca8:	tst	r6, #1
   23cac:	strh	r6, [sp, #34]	; 0x22
   23cb0:	bne	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23cb4:	add	r7, r7, r6
   23cb8:	cmp	r7, lr
   23cbc:	bhi	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23cc0:	mov	r2, #28
   23cc4:	cmp	r6, #4
   23cc8:	bcc	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23ccc:	add	r2, sl, r3
   23cd0:	sub	r0, lr, r0
   23cd4:	mov	r5, lr
   23cd8:	ldrh	r3, [r2]
   23cdc:	mov	r2, #20
   23ce0:	cmp	r0, r3
   23ce4:	strh	r3, [sp, #32]
   23ce8:	bcc	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23cec:	add	r0, sp, #12
   23cf0:	str	sl, [sp, #12]
   23cf4:	str	r1, [sp, #24]
   23cf8:	str	r5, [sp, #16]
   23cfc:	blx	r4
   23d00:	mov	r2, r0
   23d04:	b	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23d08:	mov	r0, #0
   23d0c:	mov	r2, #3
   23d10:	str	r0, [sp, #20]
   23d14:	b	23c3c <flatcc_verify_table_vector_field@@Base+0x200>
   23d18:	ldr	r0, [sl, r5]
   23d1c:	ldr	r1, [sp, #4]
   23d20:	mov	lr, r6
   23d24:	add	r0, r0, r5
   23d28:	str	r1, [sp, #20]
   23d2c:	add	ip, r0, #4
   23d30:	b	23c58 <flatcc_verify_table_vector_field@@Base+0x21c>

00023d34 <flatcc_verify_union_table@@Base>:
   23d34:	push	{r4, r5, r6, sl, fp, lr}
   23d38:	add	fp, sp, #16
   23d3c:	sub	sp, sp, #24
   23d40:	ldr	r5, [r0, #16]
   23d44:	ldr	r3, [r0, #20]
   23d48:	ldr	ip, [r0]
   23d4c:	ldr	r2, [r0, #4]
   23d50:	ldr	r0, [r0, #8]
   23d54:	subs	r0, r0, #1
   23d58:	str	r0, [sp, #8]
   23d5c:	moveq	r0, #3
   23d60:	subeq	sp, fp, #16
   23d64:	popeq	{r4, r5, r6, sl, fp, pc}
   23d68:	add	r3, r3, r5
   23d6c:	mov	r0, #15
   23d70:	tst	r3, #3
   23d74:	bne	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23d78:	cmp	r3, r5
   23d7c:	bls	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23d80:	add	r6, r3, #4
   23d84:	cmp	r6, r2
   23d88:	bhi	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23d8c:	str	r3, [sp, #16]
   23d90:	ldr	r0, [ip, r3]
   23d94:	sub	r5, r3, r0
   23d98:	mov	r0, #29
   23d9c:	tst	r5, #-2147483647	; 0x80000001
   23da0:	bne	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23da4:	add	r4, r5, #2
   23da8:	mov	r0, #27
   23dac:	cmp	r4, r2
   23db0:	bhi	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23db4:	mov	lr, ip
   23db8:	mov	r0, #30
   23dbc:	ldrh	r6, [lr, r5]!
   23dc0:	tst	r6, #1
   23dc4:	strh	r6, [sp, #22]
   23dc8:	bne	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23dcc:	add	r5, r5, r6
   23dd0:	cmp	r5, r2
   23dd4:	bhi	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23dd8:	mov	r0, #28
   23ddc:	cmp	r6, #4
   23de0:	bcc	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23de4:	add	r0, ip, r4
   23de8:	sub	r3, r2, r3
   23dec:	ldrh	r4, [r0]
   23df0:	mov	r0, #20
   23df4:	cmp	r3, r4
   23df8:	strh	r4, [sp, #20]
   23dfc:	bcc	23e14 <flatcc_verify_union_table@@Base+0xe0>
   23e00:	mov	r0, sp
   23e04:	str	ip, [sp]
   23e08:	str	lr, [sp, #12]
   23e0c:	str	r2, [sp, #4]
   23e10:	blx	r1
   23e14:	sub	sp, fp, #16
   23e18:	pop	{r4, r5, r6, sl, fp, pc}

00023e1c <flatcc_verify_union_struct@@Base>:
   23e1c:	push	{fp, lr}
   23e20:	mov	fp, sp
   23e24:	ldr	lr, [r0, #20]
   23e28:	mov	r3, r0
   23e2c:	mov	r0, #18
   23e30:	cmp	lr, #0
   23e34:	beq	23e70 <flatcc_verify_union_struct@@Base+0x54>
   23e38:	ldr	ip, [r3, #4]
   23e3c:	ldr	r3, [r3, #16]
   23e40:	add	r3, r3, lr
   23e44:	cmp	r3, ip
   23e48:	bhi	23e70 <flatcc_verify_union_struct@@Base+0x54>
   23e4c:	adds	r1, r3, r1
   23e50:	mov	r0, #10
   23e54:	bcs	23e70 <flatcc_verify_union_struct@@Base+0x54>
   23e58:	mov	r0, #9
   23e5c:	cmp	r1, ip
   23e60:	pophi	{fp, pc}
   23e64:	sub	r0, r2, #1
   23e68:	ands	r0, r3, r0
   23e6c:	movwne	r0, #11
   23e70:	pop	{fp, pc}

00023e74 <flatcc_verify_union_string@@Base>:
   23e74:	mov	r1, r0
   23e78:	ldr	r3, [r0, #16]
   23e7c:	ldr	r0, [r0, #20]
   23e80:	add	r2, r0, r3
   23e84:	mov	r0, #17
   23e88:	tst	r2, #3
   23e8c:	bne	23ee0 <flatcc_verify_union_string@@Base+0x6c>
   23e90:	cmp	r2, r3
   23e94:	bls	23ee0 <flatcc_verify_union_string@@Base+0x6c>
   23e98:	ldr	r3, [r1, #4]
   23e9c:	add	ip, r2, #4
   23ea0:	cmp	r3, ip
   23ea4:	bcc	23ee0 <flatcc_verify_union_string@@Base+0x6c>
   23ea8:	push	{fp, lr}
   23eac:	mov	fp, sp
   23eb0:	ldr	r1, [r1]
   23eb4:	sub	lr, r3, ip
   23eb8:	mov	r0, #8
   23ebc:	ldr	r2, [r1, r2]
   23ec0:	add	r3, r2, #1
   23ec4:	cmp	lr, r3
   23ec8:	pop	{fp, lr}
   23ecc:	bxcc	lr
   23ed0:	add	r0, r1, ip
   23ed4:	ldrb	r0, [r0, r2]
   23ed8:	cmp	r0, #0
   23edc:	movwne	r0, #7
   23ee0:	bx	lr

00023ee4 <flatcc_verify_buffer_header@@Base>:
   23ee4:	push	{r4, sl, fp, lr}
   23ee8:	add	fp, sp, #8
   23eec:	sub	sp, sp, #8
   23ef0:	mov	r4, r0
   23ef4:	mov	r0, #5
   23ef8:	tst	r4, #3
   23efc:	bne	23f50 <flatcc_verify_buffer_header@@Base+0x6c>
   23f00:	mov	r0, #6
   23f04:	cmn	r1, #9
   23f08:	bhi	23f50 <flatcc_verify_buffer_header@@Base+0x6c>
   23f0c:	mov	r0, #1
   23f10:	cmp	r1, #8
   23f14:	bcc	23f50 <flatcc_verify_buffer_header@@Base+0x6c>
   23f18:	cmp	r2, #0
   23f1c:	beq	23f58 <flatcc_verify_buffer_header@@Base+0x74>
   23f20:	mov	r0, #0
   23f24:	mov	r1, r2
   23f28:	mov	r2, #4
   23f2c:	str	r0, [sp, #4]
   23f30:	add	r0, sp, #4
   23f34:	bl	12ec8 <strncpy@plt>
   23f38:	ldr	r1, [sp, #4]
   23f3c:	cmp	r1, #0
   23f40:	ldrne	r2, [r4, #4]
   23f44:	movne	r0, #2
   23f48:	cmpne	r2, r1
   23f4c:	moveq	r0, #0
   23f50:	sub	sp, fp, #8
   23f54:	pop	{r4, sl, fp, pc}
   23f58:	mov	r0, #0
   23f5c:	sub	sp, fp, #8
   23f60:	pop	{r4, sl, fp, pc}

00023f64 <flatcc_verify_typed_buffer_header@@Base>:
   23f64:	mov	r3, r0
   23f68:	mov	r0, #5
   23f6c:	tst	r3, #3
   23f70:	bne	23fa4 <flatcc_verify_typed_buffer_header@@Base+0x40>
   23f74:	mov	r0, #6
   23f78:	cmn	r1, #9
   23f7c:	bhi	23fa4 <flatcc_verify_typed_buffer_header@@Base+0x40>
   23f80:	mov	r0, #1
   23f84:	cmp	r1, #8
   23f88:	bxcc	lr
   23f8c:	cmp	r2, #0
   23f90:	beq	23fa8 <flatcc_verify_typed_buffer_header@@Base+0x44>
   23f94:	ldr	r1, [r3, #4]
   23f98:	mov	r0, #2
   23f9c:	cmp	r1, r2
   23fa0:	moveq	r0, #0
   23fa4:	bx	lr
   23fa8:	mov	r0, #0
   23fac:	bx	lr

00023fb0 <flatcc_verify_struct_as_root@@Base>:
   23fb0:	push	{r4, r5, r6, r7, fp, lr}
   23fb4:	add	fp, sp, #16
   23fb8:	sub	sp, sp, #8
   23fbc:	mov	r5, r0
   23fc0:	mov	r0, #5
   23fc4:	tst	r5, #3
   23fc8:	bne	24060 <flatcc_verify_struct_as_root@@Base+0xb0>
   23fcc:	mov	r4, r1
   23fd0:	mov	r0, #6
   23fd4:	cmn	r1, #9
   23fd8:	bhi	24060 <flatcc_verify_struct_as_root@@Base+0xb0>
   23fdc:	mov	r0, #1
   23fe0:	cmp	r4, #8
   23fe4:	bcc	24060 <flatcc_verify_struct_as_root@@Base+0xb0>
   23fe8:	mov	r6, r3
   23fec:	mov	r7, r2
   23ff0:	cmp	r2, #0
   23ff4:	beq	24024 <flatcc_verify_struct_as_root@@Base+0x74>
   23ff8:	mov	r0, #0
   23ffc:	mov	r1, r7
   24000:	mov	r2, #4
   24004:	str	r0, [sp]
   24008:	mov	r0, sp
   2400c:	bl	12ec8 <strncpy@plt>
   24010:	ldr	r0, [sp]
   24014:	cmp	r0, #0
   24018:	ldrne	r1, [r5, #4]
   2401c:	cmpne	r1, r0
   24020:	bne	24068 <flatcc_verify_struct_as_root@@Base+0xb8>
   24024:	ldr	r1, [r5]
   24028:	mov	r0, #18
   2402c:	sub	r2, r1, #1
   24030:	cmp	r2, r4
   24034:	bcs	24060 <flatcc_verify_struct_as_root@@Base+0xb0>
   24038:	adds	r2, r1, r6
   2403c:	mov	r0, #10
   24040:	bcs	24060 <flatcc_verify_struct_as_root@@Base+0xb0>
   24044:	mov	r0, #9
   24048:	cmp	r2, r4
   2404c:	bhi	24060 <flatcc_verify_struct_as_root@@Base+0xb0>
   24050:	ldr	r0, [fp, #8]
   24054:	sub	r0, r0, #1
   24058:	ands	r0, r1, r0
   2405c:	movwne	r0, #11
   24060:	sub	sp, fp, #16
   24064:	pop	{r4, r5, r6, r7, fp, pc}
   24068:	mov	r0, #0
   2406c:	mov	r1, r7
   24070:	mov	r2, #4
   24074:	str	r0, [sp, #4]
   24078:	add	r0, sp, #4
   2407c:	bl	12ec8 <strncpy@plt>
   24080:	ldr	r1, [sp, #4]
   24084:	ldr	r0, [r5, #4]
   24088:	subs	r0, r0, r1
   2408c:	movwne	r0, #2
   24090:	cmp	r1, #0
   24094:	moveq	r0, r1
   24098:	sub	sp, fp, #16
   2409c:	pop	{r4, r5, r6, r7, fp, pc}

000240a0 <flatcc_verify_struct_as_typed_root@@Base>:
   240a0:	push	{fp, lr}
   240a4:	mov	fp, sp
   240a8:	mov	ip, r0
   240ac:	mov	r0, #5
   240b0:	tst	ip, #3
   240b4:	bne	24124 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   240b8:	mov	r0, #6
   240bc:	cmn	r1, #9
   240c0:	bhi	24124 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   240c4:	mov	r0, #1
   240c8:	cmp	r1, #8
   240cc:	bcc	24124 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   240d0:	cmp	r2, #0
   240d4:	beq	240e8 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   240d8:	ldr	lr, [ip, #4]
   240dc:	mov	r0, #2
   240e0:	cmp	lr, r2
   240e4:	bne	24124 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   240e8:	ldr	ip, [ip]
   240ec:	mov	r0, #18
   240f0:	sub	r2, ip, #1
   240f4:	cmp	r2, r1
   240f8:	bcs	24124 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   240fc:	adds	r3, ip, r3
   24100:	mov	r0, #10
   24104:	bcs	24124 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   24108:	mov	r0, #9
   2410c:	cmp	r3, r1
   24110:	pophi	{fp, pc}
   24114:	ldr	r0, [fp, #8]
   24118:	sub	r0, r0, #1
   2411c:	ands	r0, ip, r0
   24120:	movwne	r0, #11
   24124:	pop	{fp, pc}

00024128 <flatcc_verify_table_as_root@@Base>:
   24128:	push	{r4, r5, r6, r7, fp, lr}
   2412c:	add	fp, sp, #16
   24130:	sub	sp, sp, #24
   24134:	mov	r4, r0
   24138:	mov	r0, #5
   2413c:	tst	r4, #3
   24140:	bne	2424c <flatcc_verify_table_as_root@@Base+0x124>
   24144:	mov	r6, r1
   24148:	mov	r0, #6
   2414c:	cmn	r1, #9
   24150:	bhi	2424c <flatcc_verify_table_as_root@@Base+0x124>
   24154:	mov	r0, #1
   24158:	cmp	r6, #8
   2415c:	bcc	2424c <flatcc_verify_table_as_root@@Base+0x124>
   24160:	mov	r5, r3
   24164:	mov	r7, r2
   24168:	cmp	r2, #0
   2416c:	beq	2419c <flatcc_verify_table_as_root@@Base+0x74>
   24170:	mov	r0, #0
   24174:	mov	r1, r7
   24178:	mov	r2, #4
   2417c:	str	r0, [sp]
   24180:	mov	r0, sp
   24184:	bl	12ec8 <strncpy@plt>
   24188:	ldr	r0, [sp]
   2418c:	cmp	r0, #0
   24190:	ldrne	r1, [r4, #4]
   24194:	cmpne	r1, r0
   24198:	bne	24254 <flatcc_verify_table_as_root@@Base+0x12c>
   2419c:	ldr	r1, [r4]
   241a0:	mov	r0, #99	; 0x63
   241a4:	str	r0, [sp, #8]
   241a8:	mov	r0, #15
   241ac:	tst	r1, #3
   241b0:	bne	2424c <flatcc_verify_table_as_root@@Base+0x124>
   241b4:	cmp	r1, #0
   241b8:	beq	2424c <flatcc_verify_table_as_root@@Base+0x124>
   241bc:	add	r2, r1, #4
   241c0:	cmp	r2, r6
   241c4:	bhi	2424c <flatcc_verify_table_as_root@@Base+0x124>
   241c8:	str	r1, [sp, #16]
   241cc:	ldr	r0, [r4, r1]
   241d0:	sub	r7, r1, r0
   241d4:	mov	r0, #29
   241d8:	tst	r7, #-2147483647	; 0x80000001
   241dc:	bne	2424c <flatcc_verify_table_as_root@@Base+0x124>
   241e0:	add	r3, r7, #2
   241e4:	mov	r0, #27
   241e8:	cmp	r3, r6
   241ec:	bhi	2424c <flatcc_verify_table_as_root@@Base+0x124>
   241f0:	mov	ip, r4
   241f4:	mov	r0, #30
   241f8:	ldrh	r2, [ip, r7]!
   241fc:	tst	r2, #1
   24200:	strh	r2, [sp, #22]
   24204:	bne	2424c <flatcc_verify_table_as_root@@Base+0x124>
   24208:	add	r7, r7, r2
   2420c:	cmp	r7, r6
   24210:	bhi	2424c <flatcc_verify_table_as_root@@Base+0x124>
   24214:	mov	r0, #28
   24218:	cmp	r2, #4
   2421c:	bcc	2424c <flatcc_verify_table_as_root@@Base+0x124>
   24220:	add	r0, r4, r3
   24224:	sub	r1, r6, r1
   24228:	ldrh	r2, [r0]
   2422c:	mov	r0, #20
   24230:	cmp	r1, r2
   24234:	strh	r2, [sp, #20]
   24238:	bcc	2424c <flatcc_verify_table_as_root@@Base+0x124>
   2423c:	mov	r0, sp
   24240:	str	ip, [sp, #12]
   24244:	stm	sp, {r4, r6}
   24248:	blx	r5
   2424c:	sub	sp, fp, #16
   24250:	pop	{r4, r5, r6, r7, fp, pc}
   24254:	mov	r0, #0
   24258:	mov	r1, r7
   2425c:	mov	r2, #4
   24260:	str	r0, [sp]
   24264:	mov	r0, sp
   24268:	bl	12ec8 <strncpy@plt>
   2426c:	ldr	r1, [sp]
   24270:	ldr	r0, [r4, #4]
   24274:	subs	r0, r0, r1
   24278:	movwne	r0, #2
   2427c:	cmp	r1, #0
   24280:	moveq	r0, r1
   24284:	sub	sp, fp, #16
   24288:	pop	{r4, r5, r6, r7, fp, pc}

0002428c <flatcc_verify_table_as_typed_root@@Base>:
   2428c:	push	{r4, r5, r6, sl, fp, lr}
   24290:	add	fp, sp, #16
   24294:	sub	sp, sp, #24
   24298:	mov	ip, #5
   2429c:	tst	r0, #3
   242a0:	bne	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   242a4:	mov	ip, #6
   242a8:	cmn	r1, #9
   242ac:	bhi	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   242b0:	mov	ip, #1
   242b4:	cmp	r1, #8
   242b8:	bcc	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   242bc:	cmp	r2, #0
   242c0:	beq	242d4 <flatcc_verify_table_as_typed_root@@Base+0x48>
   242c4:	ldr	r6, [r0, #4]
   242c8:	mov	ip, #2
   242cc:	cmp	r6, r2
   242d0:	bne	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   242d4:	ldr	r2, [r0]
   242d8:	mov	r6, #99	; 0x63
   242dc:	mov	ip, #15
   242e0:	str	r6, [sp, #8]
   242e4:	tst	r2, #3
   242e8:	bne	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   242ec:	cmp	r2, #0
   242f0:	beq	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   242f4:	add	r6, r2, #4
   242f8:	cmp	r6, r1
   242fc:	bhi	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24300:	str	r2, [sp, #16]
   24304:	mov	ip, #29
   24308:	ldr	r6, [r0, r2]
   2430c:	sub	r5, r2, r6
   24310:	tst	r5, #-2147483647	; 0x80000001
   24314:	bne	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24318:	add	r4, r5, #2
   2431c:	mov	ip, #27
   24320:	cmp	r4, r1
   24324:	bhi	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24328:	mov	lr, r0
   2432c:	mov	ip, #30
   24330:	ldrh	r6, [lr, r5]!
   24334:	tst	r6, #1
   24338:	strh	r6, [sp, #22]
   2433c:	bne	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24340:	add	r5, r5, r6
   24344:	cmp	r5, r1
   24348:	bhi	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2434c:	mov	ip, #28
   24350:	cmp	r6, #4
   24354:	bcc	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24358:	add	r6, r0, r4
   2435c:	sub	r2, r1, r2
   24360:	mov	ip, #20
   24364:	ldrh	r4, [r6]
   24368:	cmp	r2, r4
   2436c:	strh	r4, [sp, #20]
   24370:	bcc	24388 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   24374:	str	lr, [sp, #12]
   24378:	stm	sp, {r0, r1}
   2437c:	mov	r0, sp
   24380:	blx	r3
   24384:	mov	ip, r0
   24388:	mov	r0, ip
   2438c:	sub	sp, fp, #16
   24390:	pop	{r4, r5, r6, sl, fp, pc}

00024394 <flatcc_verify_struct_as_nested_root@@Base>:
   24394:	push	{r4, r5, r6, sl, fp, lr}
   24398:	add	fp, sp, #16
   2439c:	sub	sp, sp, #8
   243a0:	ldrh	r5, [r0, #22]
   243a4:	mov	r6, #4
   243a8:	ldr	lr, [fp, #12]
   243ac:	add	r1, r6, r1, lsl #1
   243b0:	uxth	r4, r1
   243b4:	cmp	r4, r5
   243b8:	bcs	2443c <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   243bc:	ldr	ip, [r0, #12]
   243c0:	ldrh	r6, [ip, r4]!
   243c4:	cmp	r6, #0
   243c8:	beq	2443c <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   243cc:	ldrh	r1, [r0, #20]
   243d0:	add	r4, r6, #4
   243d4:	cmp	r4, r1
   243d8:	bhi	24454 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   243dc:	ldr	r1, [r0, #16]
   243e0:	add	r5, r1, r6
   243e4:	tst	r5, #3
   243e8:	bne	24454 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   243ec:	cmp	r5, #0
   243f0:	beq	24500 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   243f4:	ldr	r1, [r0]
   243f8:	ldr	r4, [r1, r5]
   243fc:	add	r4, r4, r5
   24400:	cmp	r4, r5
   24404:	bls	24454 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24408:	ldr	r5, [r0, #4]
   2440c:	add	r6, r4, #4
   24410:	cmp	r6, r5
   24414:	bhi	24454 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24418:	ands	r6, r6, #3
   2441c:	bne	24454 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24420:	ldr	r1, [r1, r4]
   24424:	sub	r5, r5, #4
   24428:	sub	r5, r5, r4
   2442c:	mul	r1, r1, lr
   24430:	cmp	r5, r1
   24434:	bcc	24454 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   24438:	b	24500 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   2443c:	cmp	r2, #0
   24440:	beq	244ec <flatcc_verify_struct_as_nested_root@@Base+0x158>
   24444:	cmp	r4, r5
   24448:	bcs	244e0 <flatcc_verify_struct_as_nested_root@@Base+0x14c>
   2444c:	ldr	r3, [r0, #12]
   24450:	uxtah	ip, r3, r1
   24454:	ldrh	r1, [ip]
   24458:	cmp	r1, #0
   2445c:	beq	244e0 <flatcc_verify_struct_as_nested_root@@Base+0x14c>
   24460:	ldrh	r3, [r0, #20]
   24464:	add	r6, r1, #4
   24468:	mov	r2, #13
   2446c:	cmp	r6, r3
   24470:	bhi	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   24474:	ldr	r2, [r0, #16]
   24478:	add	r6, r2, r1
   2447c:	mov	r2, #12
   24480:	tst	r6, #3
   24484:	bne	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   24488:	cmp	r6, #0
   2448c:	beq	24554 <flatcc_verify_struct_as_nested_root@@Base+0x1c0>
   24490:	ldr	r1, [r0]
   24494:	ldr	r2, [r1, r6]
   24498:	add	r3, r2, r6
   2449c:	mov	r2, #16
   244a0:	cmp	r3, r6
   244a4:	bls	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   244a8:	ldr	r0, [r0, #4]
   244ac:	add	r6, r3, #4
   244b0:	cmp	r6, r0
   244b4:	bhi	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   244b8:	ands	r6, r6, #3
   244bc:	bne	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   244c0:	ldr	r1, [r1, r3]
   244c4:	sub	r0, r0, #4
   244c8:	mov	r2, #0
   244cc:	sub	r0, r0, r3
   244d0:	mul	r1, r1, lr
   244d4:	cmp	r0, r1
   244d8:	movwcc	r2, #26
   244dc:	b	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   244e0:	cmp	r2, #0
   244e4:	movwne	r2, #4
   244e8:	b	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   244ec:	mov	r2, #0
   244f0:	cmp	r4, r5
   244f4:	bcs	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   244f8:	ldr	r2, [r0, #12]
   244fc:	uxtah	ip, r2, r1
   24500:	ldrh	r1, [ip]
   24504:	mov	r2, #0
   24508:	cmp	r1, #0
   2450c:	ldrne	r6, [r0]
   24510:	ldrne	r0, [r0, #16]
   24514:	addne	r0, r6, r0
   24518:	addsne	r0, r0, r1
   2451c:	bne	2452c <flatcc_verify_struct_as_nested_root@@Base+0x198>
   24520:	mov	r0, r2
   24524:	sub	sp, fp, #16
   24528:	pop	{r4, r5, r6, sl, fp, pc}
   2452c:	ldr	r2, [r0]
   24530:	ldr	ip, [fp, #8]
   24534:	ldr	r1, [r2, r0]!
   24538:	str	lr, [sp]
   2453c:	add	r0, r2, #4
   24540:	mov	r2, r3
   24544:	mov	r3, ip
   24548:	bl	23fb0 <flatcc_verify_struct_as_root@@Base>
   2454c:	sub	sp, fp, #16
   24550:	pop	{r4, r5, r6, sl, fp, pc}
   24554:	mov	r2, #0
   24558:	b	24520 <flatcc_verify_struct_as_nested_root@@Base+0x18c>

0002455c <flatcc_verify_table_as_nested_root@@Base>:
   2455c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24560:	add	fp, sp, #24
   24564:	sub	sp, sp, #24
   24568:	mov	r4, r0
   2456c:	mov	r0, #4
   24570:	ldr	ip, [fp, #8]
   24574:	mov	r5, r3
   24578:	ldrh	r6, [r4, #22]
   2457c:	add	r3, r0, r1, lsl #1
   24580:	uxth	r7, r3
   24584:	cmp	r7, r6
   24588:	bcs	2460c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   2458c:	ldr	r1, [r4, #12]
   24590:	ldrh	r0, [r1, r7]!
   24594:	cmp	r0, #0
   24598:	beq	2460c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   2459c:	ldrh	r3, [r4, #20]
   245a0:	add	r7, r0, #4
   245a4:	cmp	r7, r3
   245a8:	bhi	24624 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   245ac:	ldr	r3, [r4, #16]
   245b0:	add	r0, r3, r0
   245b4:	tst	r0, #3
   245b8:	bne	24624 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   245bc:	cmp	r0, #0
   245c0:	beq	246d0 <flatcc_verify_table_as_nested_root@@Base+0x174>
   245c4:	ldr	r3, [r4]
   245c8:	ldr	r7, [r3, r0]
   245cc:	add	r7, r7, r0
   245d0:	cmp	r7, r0
   245d4:	bls	24624 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   245d8:	ldr	r0, [r4, #4]
   245dc:	add	r6, r7, #4
   245e0:	cmp	r6, r0
   245e4:	bhi	24624 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   245e8:	ands	r6, r6, #3
   245ec:	bne	24624 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   245f0:	ldr	r3, [r3, r7]
   245f4:	sub	r0, r0, #4
   245f8:	sub	r0, r0, r7
   245fc:	mul	r3, r3, ip
   24600:	cmp	r0, r3
   24604:	bcc	24624 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   24608:	b	246d0 <flatcc_verify_table_as_nested_root@@Base+0x174>
   2460c:	cmp	r2, #0
   24610:	beq	246bc <flatcc_verify_table_as_nested_root@@Base+0x160>
   24614:	cmp	r7, r6
   24618:	bcs	246b0 <flatcc_verify_table_as_nested_root@@Base+0x154>
   2461c:	ldr	r0, [r4, #12]
   24620:	uxtah	r1, r0, r3
   24624:	ldrh	r0, [r1]
   24628:	cmp	r0, #0
   2462c:	beq	246b0 <flatcc_verify_table_as_nested_root@@Base+0x154>
   24630:	ldrh	r1, [r4, #20]
   24634:	add	r3, r0, #4
   24638:	mov	r2, #13
   2463c:	cmp	r3, r1
   24640:	bhi	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24644:	ldr	r1, [r4, #16]
   24648:	mov	r2, #12
   2464c:	add	r0, r1, r0
   24650:	tst	r0, #3
   24654:	bne	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24658:	cmp	r0, #0
   2465c:	beq	24824 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   24660:	ldr	r1, [r4]
   24664:	ldr	r2, [r1, r0]
   24668:	add	r3, r2, r0
   2466c:	mov	r2, #16
   24670:	cmp	r3, r0
   24674:	bls	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24678:	ldr	r0, [r4, #4]
   2467c:	add	r7, r3, #4
   24680:	cmp	r7, r0
   24684:	bhi	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24688:	ands	r7, r7, #3
   2468c:	bne	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24690:	ldr	r1, [r1, r3]
   24694:	sub	r0, r0, #4
   24698:	mov	r2, #0
   2469c:	sub	r0, r0, r3
   246a0:	mul	r1, r1, ip
   246a4:	cmp	r0, r1
   246a8:	movwcc	r2, #26
   246ac:	b	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   246b0:	cmp	r2, #0
   246b4:	movwne	r2, #4
   246b8:	b	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   246bc:	mov	r2, #0
   246c0:	cmp	r7, r6
   246c4:	bcs	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   246c8:	ldr	r0, [r4, #12]
   246cc:	uxtah	r1, r0, r3
   246d0:	ldrh	r0, [r1]
   246d4:	mov	r2, #0
   246d8:	cmp	r0, #0
   246dc:	ldrne	r1, [r4]
   246e0:	ldrne	r3, [r4, #16]
   246e4:	addne	r1, r1, r3
   246e8:	addsne	r0, r1, r0
   246ec:	bne	246fc <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   246f0:	mov	r0, r2
   246f4:	sub	sp, fp, #24
   246f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   246fc:	ldr	r6, [r0]
   24700:	mov	r2, #5
   24704:	ldr	r8, [r6, r0]!
   24708:	add	r7, r6, #4
   2470c:	tst	r7, #3
   24710:	bne	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24714:	mov	r2, #6
   24718:	cmn	r8, #9
   2471c:	bhi	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24720:	mov	r2, #1
   24724:	cmp	r8, #8
   24728:	bcc	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   2472c:	cmp	r5, #0
   24730:	beq	24760 <flatcc_verify_table_as_nested_root@@Base+0x204>
   24734:	mov	r0, #0
   24738:	mov	r1, r5
   2473c:	mov	r2, #4
   24740:	str	r0, [sp]
   24744:	mov	r0, sp
   24748:	bl	12ec8 <strncpy@plt>
   2474c:	ldr	r0, [sp]
   24750:	cmp	r0, #0
   24754:	ldrne	r1, [r6, #8]
   24758:	cmpne	r1, r0
   2475c:	bne	2482c <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   24760:	ldr	r1, [r4, #8]
   24764:	ldr	r0, [r7]
   24768:	subs	r1, r1, #1
   2476c:	str	r1, [sp, #8]
   24770:	beq	24864 <flatcc_verify_table_as_nested_root@@Base+0x308>
   24774:	mov	r2, #15
   24778:	tst	r0, #3
   2477c:	bne	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24780:	cmp	r0, #0
   24784:	beq	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24788:	add	r1, r0, #4
   2478c:	cmp	r1, r8
   24790:	bhi	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24794:	str	r0, [sp, #16]
   24798:	mov	r2, #29
   2479c:	ldr	r1, [r7, r0]
   247a0:	sub	r6, r0, r1
   247a4:	tst	r6, #-2147483647	; 0x80000001
   247a8:	bne	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   247ac:	add	r3, r6, #2
   247b0:	mov	r2, #27
   247b4:	cmp	r3, r8
   247b8:	bhi	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   247bc:	mov	r1, r7
   247c0:	mov	r2, #30
   247c4:	ldrh	r5, [r1, r6]!
   247c8:	tst	r5, #1
   247cc:	strh	r5, [sp, #22]
   247d0:	bne	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   247d4:	add	r6, r6, r5
   247d8:	cmp	r6, r8
   247dc:	bhi	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   247e0:	mov	r2, #28
   247e4:	cmp	r5, #4
   247e8:	bcc	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   247ec:	add	r2, r7, r3
   247f0:	sub	r0, r8, r0
   247f4:	ldrh	r3, [r2]
   247f8:	mov	r2, #20
   247fc:	cmp	r0, r3
   24800:	strh	r3, [sp, #20]
   24804:	bcc	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24808:	ldr	r2, [fp, #12]
   2480c:	mov	r0, sp
   24810:	str	r1, [sp, #12]
   24814:	stm	sp, {r7, r8}
   24818:	blx	r2
   2481c:	mov	r2, r0
   24820:	b	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   24824:	mov	r2, #0
   24828:	b	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>
   2482c:	mov	r0, #0
   24830:	mov	r1, r5
   24834:	mov	r2, #4
   24838:	str	r0, [sp]
   2483c:	mov	r0, sp
   24840:	bl	12ec8 <strncpy@plt>
   24844:	ldr	r1, [sp]
   24848:	ldr	r0, [r6, #8]
   2484c:	subs	r0, r0, r1
   24850:	movwne	r0, #2
   24854:	cmp	r1, #0
   24858:	moveq	r0, r1
   2485c:	sub	sp, fp, #24
   24860:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24864:	mov	r2, #3
   24868:	b	246f0 <flatcc_verify_table_as_nested_root@@Base+0x194>

0002486c <flatcc_verify_union_field@@Base>:
   2486c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24870:	add	fp, sp, #28
   24874:	sub	sp, sp, #28
   24878:	ldrh	r4, [r0, #22]
   2487c:	mov	r7, #2
   24880:	lsl	r5, r1, #1
   24884:	add	r7, r7, r1, lsl #1
   24888:	uxth	r6, r7
   2488c:	cmp	r6, r4
   24890:	bcs	24984 <flatcc_verify_union_field@@Base+0x118>
   24894:	ldr	r6, [r0, #12]
   24898:	uxtah	r1, r6, r7
   2489c:	ldrh	ip, [r1]
   248a0:	cmp	ip, #0
   248a4:	beq	24984 <flatcc_verify_union_field@@Base+0x118>
   248a8:	ldrh	r7, [r0, #20]
   248ac:	mov	r1, #13
   248b0:	cmp	ip, r7
   248b4:	bcs	249b8 <flatcc_verify_union_field@@Base+0x14c>
   248b8:	add	r7, r5, #4
   248bc:	ldr	lr, [r0]
   248c0:	ldr	r9, [r0, #16]
   248c4:	mov	r1, #1
   248c8:	uxth	sl, r7
   248cc:	cmp	sl, r4
   248d0:	uxtahcc	r1, r6, r7
   248d4:	ldrhcc	r1, [r1]
   248d8:	add	r8, lr, r9
   248dc:	ldrb	r5, [r8, ip]
   248e0:	clzcc	r1, r1
   248e4:	lsrcc	r1, r1, #5
   248e8:	cmp	r1, #0
   248ec:	moveq	r1, #24
   248f0:	cmpeq	r5, #0
   248f4:	beq	249b8 <flatcc_verify_union_field@@Base+0x14c>
   248f8:	mov	r1, #0
   248fc:	cmp	r5, #0
   24900:	beq	249b8 <flatcc_verify_union_field@@Base+0x14c>
   24904:	cmp	sl, r4
   24908:	bcs	249c4 <flatcc_verify_union_field@@Base+0x158>
   2490c:	uxtah	r1, r6, r7
   24910:	ldrh	r4, [r1]
   24914:	cmp	r4, #0
   24918:	beq	249c4 <flatcc_verify_union_field@@Base+0x158>
   2491c:	ldrh	r1, [r0, #20]
   24920:	add	r2, r4, #4
   24924:	cmp	r2, r1
   24928:	mov	r1, #13
   2492c:	bhi	249b8 <flatcc_verify_union_field@@Base+0x14c>
   24930:	add	r2, r9, r4
   24934:	mov	r1, #12
   24938:	tst	r2, #3
   2493c:	bne	249b8 <flatcc_verify_union_field@@Base+0x14c>
   24940:	cmp	r2, #0
   24944:	mov	r1, #0
   24948:	beq	249b8 <flatcc_verify_union_field@@Base+0x14c>
   2494c:	str	lr, [sp, #4]
   24950:	ldr	r1, [r0, #4]
   24954:	ldr	r0, [r0, #8]
   24958:	str	r1, [sp, #8]
   2495c:	str	r2, [sp, #20]
   24960:	str	r0, [sp, #12]
   24964:	ldr	r0, [lr, r2]
   24968:	str	r0, [sp, #24]
   2496c:	ldrb	r0, [r8, ip]
   24970:	strb	r0, [sp, #16]
   24974:	add	r0, sp, #4
   24978:	blx	r3
   2497c:	mov	r1, r0
   24980:	b	249b8 <flatcc_verify_union_field@@Base+0x14c>
   24984:	add	r1, r5, #4
   24988:	uxth	r3, r1
   2498c:	cmp	r3, r4
   24990:	bcs	249ac <flatcc_verify_union_field@@Base+0x140>
   24994:	ldr	r0, [r0, #12]
   24998:	uxtah	r0, r0, r1
   2499c:	mov	r1, #23
   249a0:	ldrh	r0, [r0]
   249a4:	cmp	r0, #0
   249a8:	bne	249b8 <flatcc_verify_union_field@@Base+0x14c>
   249ac:	cmp	r2, #0
   249b0:	movwne	r2, #21
   249b4:	mov	r1, r2
   249b8:	mov	r0, r1
   249bc:	sub	sp, fp, #28
   249c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249c4:	cmp	r2, #0
   249c8:	movwne	r2, #4
   249cc:	b	249b4 <flatcc_verify_union_field@@Base+0x148>

000249d0 <flatcc_verify_union_vector_field@@Base>:
   249d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249d4:	add	fp, sp, #28
   249d8:	sub	sp, sp, #28
   249dc:	mov	r9, r3
   249e0:	mov	r3, #2
   249e4:	lsl	lr, r1, #1
   249e8:	add	r6, r3, r1, lsl #1
   249ec:	ldrh	r3, [r0, #22]
   249f0:	uxth	r4, r6
   249f4:	cmp	r4, r3
   249f8:	bcs	24a10 <flatcc_verify_union_vector_field@@Base+0x40>
   249fc:	ldr	r7, [r0, #12]
   24a00:	mov	r1, r7
   24a04:	ldrh	r5, [r1, r4]!
   24a08:	cmp	r5, #0
   24a0c:	bne	24a5c <flatcc_verify_union_vector_field@@Base+0x8c>
   24a10:	add	r1, lr, #4
   24a14:	uxth	r7, r1
   24a18:	cmp	r7, r3
   24a1c:	bcs	24ac8 <flatcc_verify_union_vector_field@@Base+0xf8>
   24a20:	cmp	r2, #0
   24a24:	beq	24a40 <flatcc_verify_union_vector_field@@Base+0x70>
   24a28:	ldr	r7, [r0, #12]
   24a2c:	uxtah	r1, r7, r1
   24a30:	ldrh	r7, [r1]
   24a34:	mov	r1, #22
   24a38:	cmp	r7, #0
   24a3c:	beq	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24a40:	cmp	r4, r3
   24a44:	bcs	24ad8 <flatcc_verify_union_vector_field@@Base+0x108>
   24a48:	ldr	r7, [r0, #12]
   24a4c:	mov	r1, r7
   24a50:	ldrh	r5, [r1, r4]!
   24a54:	cmp	r5, #0
   24a58:	beq	24ad8 <flatcc_verify_union_vector_field@@Base+0x108>
   24a5c:	ldrh	r6, [r0, #20]
   24a60:	add	r4, r5, #4
   24a64:	cmp	r4, r6
   24a68:	bhi	24af0 <flatcc_verify_union_vector_field@@Base+0x120>
   24a6c:	ldr	r6, [r0, #16]
   24a70:	add	r4, r6, r5
   24a74:	tst	r4, #3
   24a78:	bne	24af0 <flatcc_verify_union_vector_field@@Base+0x120>
   24a7c:	cmp	r4, #0
   24a80:	beq	24b8c <flatcc_verify_union_vector_field@@Base+0x1bc>
   24a84:	ldr	r6, [r0]
   24a88:	ldr	r5, [r6, r4]
   24a8c:	add	r5, r5, r4
   24a90:	cmp	r5, r4
   24a94:	bls	24af0 <flatcc_verify_union_vector_field@@Base+0x120>
   24a98:	ldr	ip, [r0, #4]
   24a9c:	add	r4, r5, #4
   24aa0:	cmp	r4, ip
   24aa4:	bhi	24af0 <flatcc_verify_union_vector_field@@Base+0x120>
   24aa8:	ands	r4, r4, #3
   24aac:	bne	24af0 <flatcc_verify_union_vector_field@@Base+0x120>
   24ab0:	ldr	r4, [r6, r5]
   24ab4:	sub	r6, ip, #4
   24ab8:	sub	r6, r6, r5
   24abc:	cmp	r6, r4
   24ac0:	bcc	24af0 <flatcc_verify_union_vector_field@@Base+0x120>
   24ac4:	b	24b8c <flatcc_verify_union_vector_field@@Base+0x1bc>
   24ac8:	mov	r1, #22
   24acc:	cmp	r2, #0
   24ad0:	bne	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24ad4:	b	24a40 <flatcc_verify_union_vector_field@@Base+0x70>
   24ad8:	cmp	r2, #0
   24adc:	beq	24b78 <flatcc_verify_union_vector_field@@Base+0x1a8>
   24ae0:	cmp	r4, r3
   24ae4:	bcs	24cf4 <flatcc_verify_union_vector_field@@Base+0x324>
   24ae8:	ldr	r1, [r0, #12]
   24aec:	uxtah	r1, r1, r6
   24af0:	ldrh	r3, [r1]
   24af4:	cmp	r3, #0
   24af8:	beq	24cf4 <flatcc_verify_union_vector_field@@Base+0x324>
   24afc:	ldrh	r2, [r0, #20]
   24b00:	add	r7, r3, #4
   24b04:	mov	r1, #13
   24b08:	cmp	r7, r2
   24b0c:	bhi	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b10:	ldr	r1, [r0, #16]
   24b14:	add	r7, r1, r3
   24b18:	mov	r1, #12
   24b1c:	tst	r7, #3
   24b20:	bne	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b24:	cmp	r7, #0
   24b28:	beq	24d0c <flatcc_verify_union_vector_field@@Base+0x33c>
   24b2c:	ldr	r2, [r0]
   24b30:	ldr	r1, [r2, r7]
   24b34:	add	r3, r1, r7
   24b38:	mov	r1, #16
   24b3c:	cmp	r3, r7
   24b40:	bls	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b44:	ldr	r0, [r0, #4]
   24b48:	add	r7, r3, #4
   24b4c:	cmp	r7, r0
   24b50:	bhi	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b54:	ands	r7, r7, #3
   24b58:	bne	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b5c:	ldr	r2, [r2, r3]
   24b60:	sub	r0, r0, #4
   24b64:	mov	r1, #0
   24b68:	sub	r0, r0, r3
   24b6c:	cmp	r0, r2
   24b70:	movwcc	r1, #26
   24b74:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b78:	mov	r1, #0
   24b7c:	cmp	r4, r3
   24b80:	bcs	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24b84:	ldr	r7, [r0, #12]
   24b88:	uxtah	r1, r7, r6
   24b8c:	ldrh	r5, [r1]
   24b90:	mov	r1, #0
   24b94:	cmp	r5, #0
   24b98:	ldrne	r8, [r0]
   24b9c:	ldrne	r6, [r0, #16]
   24ba0:	addne	r4, r8, r6
   24ba4:	addsne	ip, r4, r5
   24ba8:	beq	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24bac:	add	r1, lr, #4
   24bb0:	uxth	r5, r1
   24bb4:	cmp	r5, r3
   24bb8:	bcs	24cf4 <flatcc_verify_union_vector_field@@Base+0x324>
   24bbc:	uxtah	r1, r7, r1
   24bc0:	ldrh	r3, [r1]
   24bc4:	cmp	r3, #0
   24bc8:	beq	24cf4 <flatcc_verify_union_vector_field@@Base+0x324>
   24bcc:	ldrh	r2, [r0, #20]
   24bd0:	add	r7, r3, #4
   24bd4:	mov	r1, #13
   24bd8:	cmp	r7, r2
   24bdc:	bhi	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24be0:	add	r4, r6, r3
   24be4:	mov	r1, #12
   24be8:	tst	r4, #3
   24bec:	bne	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24bf0:	cmp	r4, #0
   24bf4:	mov	r1, #0
   24bf8:	beq	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24bfc:	ldr	r7, [r0, #8]
   24c00:	cmp	r7, #1
   24c04:	blt	24d14 <flatcc_verify_union_vector_field@@Base+0x344>
   24c08:	ldr	r2, [r8, r4]
   24c0c:	mov	r1, #16
   24c10:	add	r5, r2, r4
   24c14:	cmp	r5, r4
   24c18:	bls	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24c1c:	ldr	r0, [r0, #4]
   24c20:	add	r4, r5, #4
   24c24:	cmp	r4, r0
   24c28:	bhi	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24c2c:	ands	r4, r4, #3
   24c30:	bne	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24c34:	ldr	r4, [r8, r5]
   24c38:	mov	r1, #25
   24c3c:	cmn	r4, #-1073741823	; 0xc0000001
   24c40:	bhi	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24c44:	sub	r1, r0, #4
   24c48:	sub	r5, r1, r5
   24c4c:	mov	r1, #26
   24c50:	cmp	r5, r4, lsl #2
   24c54:	bcc	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24c58:	ldr	r5, [ip]
   24c5c:	mov	r1, #34	; 0x22
   24c60:	ldr	sl, [r5, ip]!
   24c64:	cmp	r4, sl
   24c68:	bne	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24c6c:	cmp	sl, #0
   24c70:	sub	r1, r7, #1
   24c74:	str	r0, [sp, #8]
   24c78:	str	r8, [sp, #4]
   24c7c:	str	r1, [sp, #12]
   24c80:	beq	24d0c <flatcc_verify_union_vector_field@@Base+0x33c>
   24c84:	add	r0, r2, r6
   24c88:	add	r7, r5, #4
   24c8c:	mov	r5, #0
   24c90:	add	r4, sp, #4
   24c94:	add	r0, r0, r3
   24c98:	add	r6, r0, #4
   24c9c:	ldr	r1, [r8, r6]
   24ca0:	ldrb	r0, [r7, r5]
   24ca4:	cmp	r1, #0
   24ca8:	beq	24cd4 <flatcc_verify_union_vector_field@@Base+0x304>
   24cac:	cmp	r0, #0
   24cb0:	beq	24d1c <flatcc_verify_union_vector_field@@Base+0x34c>
   24cb4:	str	r6, [sp, #20]
   24cb8:	strb	r0, [sp, #16]
   24cbc:	mov	r0, r4
   24cc0:	str	r1, [sp, #24]
   24cc4:	blx	r9
   24cc8:	cmp	r0, #0
   24ccc:	beq	24cdc <flatcc_verify_union_vector_field@@Base+0x30c>
   24cd0:	b	24d24 <flatcc_verify_union_vector_field@@Base+0x354>
   24cd4:	cmp	r0, #0
   24cd8:	bne	24d34 <flatcc_verify_union_vector_field@@Base+0x364>
   24cdc:	add	r5, r5, #1
   24ce0:	add	r6, r6, #4
   24ce4:	mov	r1, #0
   24ce8:	cmp	r5, sl
   24cec:	bcc	24c9c <flatcc_verify_union_vector_field@@Base+0x2cc>
   24cf0:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24cf4:	cmp	r2, #0
   24cf8:	movwne	r2, #4
   24cfc:	mov	r1, r2
   24d00:	mov	r0, r1
   24d04:	sub	sp, fp, #28
   24d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d0c:	mov	r1, #0
   24d10:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24d14:	mov	r1, #3
   24d18:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24d1c:	mov	r1, #33	; 0x21
   24d20:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24d24:	add	r0, sp, #4
   24d28:	blx	r9
   24d2c:	mov	r1, r0
   24d30:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>
   24d34:	mov	r1, #32
   24d38:	b	24d00 <flatcc_verify_union_vector_field@@Base+0x330>

00024d3c <__libc_csu_init@@Base>:
   24d3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24d40:	mov	r7, r0
   24d44:	ldr	r6, [pc, #72]	; 24d94 <__libc_csu_init@@Base+0x58>
   24d48:	ldr	r5, [pc, #72]	; 24d98 <__libc_csu_init@@Base+0x5c>
   24d4c:	add	r6, pc, r6
   24d50:	add	r5, pc, r5
   24d54:	sub	r6, r6, r5
   24d58:	mov	r8, r1
   24d5c:	mov	r9, r2
   24d60:	bl	12de8 <strcmp@plt-0x20>
   24d64:	asrs	r6, r6, #2
   24d68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24d6c:	mov	r4, #0
   24d70:	add	r4, r4, #1
   24d74:	ldr	r3, [r5], #4
   24d78:	mov	r2, r9
   24d7c:	mov	r1, r8
   24d80:	mov	r0, r7
   24d84:	blx	r3
   24d88:	cmp	r6, r4
   24d8c:	bne	24d70 <__libc_csu_init@@Base+0x34>
   24d90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24d94:	andeq	r6, r1, r8, lsl #2
   24d98:	andeq	r6, r1, r0, lsl #2

00024d9c <__libc_csu_fini@@Base>:
   24d9c:	bx	lr

Disassembly of section .fini:

00024da0 <.fini>:
   24da0:	push	{r3, lr}
   24da4:	pop	{r3, pc}
