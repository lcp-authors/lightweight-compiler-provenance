
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	1124c <__assert_fail@plt+0x48>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	sl, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #106496	; 0x1a000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <fputs_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #106496	; 0x1a000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <raise@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #106496	; 0x1a000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <strcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #106496	; 0x1a000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <fflush@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #106496	; 0x1a000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #106496	; 0x1a000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <ferror@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #106496	; 0x1a000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <_exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #106496	; 0x1a000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <memcpy@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #106496	; 0x1a000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <__strtoull_internal@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #106496	; 0x1a000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <mbsinit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #106496	; 0x1a000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <strtold@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #106496	; 0x1a000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <fwrite_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #106496	; 0x1a000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <memcmp@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #106496	; 0x1a000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <fputc_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #106496	; 0x1a000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #106496	; 0x1a000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #106496	; 0x1a000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #106496	; 0x1a000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <iswprint@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #106496	; 0x1a000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <__fxstat64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #106496	; 0x1a000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #106496	; 0x1a000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #106496	; 0x1a000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #106496	; 0x1a000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__fpending@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #106496	; 0x1a000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <mbrtowc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #106496	; 0x1a000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <error@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <strtof@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <puts@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #28]!

00011060 <malloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #20]!

0001106c <__libc_start_main@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #12]!

00011078 <__vfprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4]!

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #102400	; 0x19000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #102400	; 0x19000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #102400	; 0x19000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #102400	; 0x19000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #102400	; 0x19000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #102400	; 0x19000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <strchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #102400	; 0x19000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #102400	; 0x19000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <__sprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #102400	; 0x19000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <__cxa_atexit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #102400	; 0x19000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <setvbuf@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #102400	; 0x19000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <memset@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #102400	; 0x19000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <fgetc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #102400	; 0x19000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__printf_chk@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #102400	; 0x19000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <strtod@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #102400	; 0x19000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <__overflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <__fread_unlocked_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <localeconv@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <clearerr_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <fopen64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <bindtextdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <fread_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <strncmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <abort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <__snprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <__assert_fail@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

Disassembly of section .text:

00011210 <.text>:
   11210:	mov	fp, #0
   11214:	mov	lr, #0
   11218:	pop	{r1}		; (ldr r1, [sp], #4)
   1121c:	mov	r2, sp
   11220:	push	{r2}		; (str r2, [sp, #-4]!)
   11224:	push	{r0}		; (str r0, [sp, #-4]!)
   11228:	ldr	ip, [pc, #16]	; 11240 <__assert_fail@plt+0x3c>
   1122c:	push	{ip}		; (str ip, [sp, #-4]!)
   11230:	ldr	r0, [pc, #12]	; 11244 <__assert_fail@plt+0x40>
   11234:	ldr	r3, [pc, #12]	; 11248 <__assert_fail@plt+0x44>
   11238:	bl	1106c <__libc_start_main@plt>
   1123c:	bl	111ec <abort@plt>
   11240:	muleq	r1, ip, r0
   11244:	andeq	r3, r1, r8, asr #16
   11248:	andeq	r9, r1, ip, lsr r0
   1124c:	ldr	r3, [pc, #20]	; 11268 <__assert_fail@plt+0x64>
   11250:	ldr	r2, [pc, #20]	; 1126c <__assert_fail@plt+0x68>
   11254:	add	r3, pc, r3
   11258:	ldr	r2, [r3, r2]
   1125c:	cmp	r2, #0
   11260:	bxeq	lr
   11264:	b	11090 <__gmon_start__@plt>
   11268:	andeq	r9, r1, r4, lsr #27
   1126c:	andeq	r0, r0, ip, lsl #2
   11270:	ldr	r3, [pc, #28]	; 11294 <__assert_fail@plt+0x90>
   11274:	ldr	r0, [pc, #28]	; 11298 <__assert_fail@plt+0x94>
   11278:	sub	r3, r3, r0
   1127c:	cmp	r3, #6
   11280:	bxls	lr
   11284:	ldr	r3, [pc, #16]	; 1129c <__assert_fail@plt+0x98>
   11288:	cmp	r3, #0
   1128c:	bxeq	lr
   11290:	bx	r3
   11294:	andeq	fp, r2, fp, ror #2
   11298:	andeq	fp, r2, r8, ror #2
   1129c:	andeq	r0, r0, r0
   112a0:	ldr	r1, [pc, #36]	; 112cc <__assert_fail@plt+0xc8>
   112a4:	ldr	r0, [pc, #36]	; 112d0 <__assert_fail@plt+0xcc>
   112a8:	sub	r1, r1, r0
   112ac:	asr	r1, r1, #2
   112b0:	add	r1, r1, r1, lsr #31
   112b4:	asrs	r1, r1, #1
   112b8:	bxeq	lr
   112bc:	ldr	r3, [pc, #16]	; 112d4 <__assert_fail@plt+0xd0>
   112c0:	cmp	r3, #0
   112c4:	bxeq	lr
   112c8:	bx	r3
   112cc:	andeq	fp, r2, r8, ror #2
   112d0:	andeq	fp, r2, r8, ror #2
   112d4:	andeq	r0, r0, r0
   112d8:	push	{r4, lr}
   112dc:	ldr	r4, [pc, #24]	; 112fc <__assert_fail@plt+0xf8>
   112e0:	ldrb	r3, [r4]
   112e4:	cmp	r3, #0
   112e8:	popne	{r4, pc}
   112ec:	bl	11270 <__assert_fail@plt+0x6c>
   112f0:	mov	r3, #1
   112f4:	strb	r3, [r4]
   112f8:	pop	{r4, pc}
   112fc:	andeq	fp, r2, ip, lsl #3
   11300:	ldr	r0, [pc, #40]	; 11330 <__assert_fail@plt+0x12c>
   11304:	ldr	r3, [r0]
   11308:	cmp	r3, #0
   1130c:	bne	11314 <__assert_fail@plt+0x110>
   11310:	b	112a0 <__assert_fail@plt+0x9c>
   11314:	ldr	r3, [pc, #24]	; 11334 <__assert_fail@plt+0x130>
   11318:	cmp	r3, #0
   1131c:	beq	11310 <__assert_fail@plt+0x10c>
   11320:	push	{r4, lr}
   11324:	blx	r3
   11328:	pop	{r4, lr}
   1132c:	b	112a0 <__assert_fail@plt+0x9c>
   11330:	andeq	sl, r2, r4, lsl pc
   11334:	andeq	r0, r0, r0
   11338:	bx	lr
   1133c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11340:	ldr	r3, [pc, #112]	; 113b8 <__assert_fail@plt+0x1b4>
   11344:	ldr	r8, [r3]
   11348:	cmp	r8, #0
   1134c:	beq	113b0 <__assert_fail@plt+0x1ac>
   11350:	ldr	r5, [r3, #4]
   11354:	add	r8, r5, r8, lsl #5
   11358:	mov	r0, #1
   1135c:	ldr	r9, [pc, #88]	; 113bc <__assert_fail@plt+0x1b8>
   11360:	b	11398 <__assert_fail@plt+0x194>
   11364:	mov	r4, r1
   11368:	mov	r1, r4
   1136c:	bl	18c68 <__assert_fail@plt+0x7a64>
   11370:	mov	r0, r4
   11374:	cmp	r1, #0
   11378:	bne	11364 <__assert_fail@plt+0x160>
   1137c:	mov	r1, r4
   11380:	mov	r0, r6
   11384:	bl	18a7c <__assert_fail@plt+0x7878>
   11388:	mul	r0, r7, r0
   1138c:	add	r5, r5, #32
   11390:	cmp	r5, r8
   11394:	beq	113ac <__assert_fail@plt+0x1a8>
   11398:	mov	r7, r0
   1139c:	ldr	r3, [r5, #4]
   113a0:	ldr	r6, [r9, r3, lsl #2]
   113a4:	mov	r4, r6
   113a8:	b	11368 <__assert_fail@plt+0x164>
   113ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   113b0:	mov	r0, #1
   113b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   113b8:	muleq	r2, r0, r1
   113bc:	andeq	r9, r1, r4, asr #1
   113c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   113c4:	sub	sp, sp, #36	; 0x24
   113c8:	mov	r4, r0
   113cc:	mov	r5, r1
   113d0:	mov	r3, #0
   113d4:	strb	r3, [sp, #28]
   113d8:	add	r7, sp, #32
   113dc:	strb	r2, [r7, #-5]!
   113e0:	ldr	r3, [pc, #276]	; 114fc <__assert_fail@plt+0x2f8>
   113e4:	ldr	r2, [r3, #8]
   113e8:	sub	r7, r7, r2
   113ec:	ldr	r3, [r3, #12]
   113f0:	cmp	r3, #10
   113f4:	beq	11474 <__assert_fail@plt+0x270>
   113f8:	cmp	r3, #16
   113fc:	beq	114c4 <__assert_fail@plt+0x2c0>
   11400:	cmp	r3, #8
   11404:	beq	11444 <__assert_fail@plt+0x240>
   11408:	add	r6, sp, #27
   1140c:	cmp	r7, r6
   11410:	movcc	r0, r6
   11414:	movcc	r3, #48	; 0x30
   11418:	bcs	1142c <__assert_fail@plt+0x228>
   1141c:	strb	r3, [r0, #-1]!
   11420:	cmp	r7, r0
   11424:	bne	1141c <__assert_fail@plt+0x218>
   11428:	mov	r6, r0
   1142c:	ldr	r3, [pc, #204]	; 11500 <__assert_fail@plt+0x2fc>
   11430:	ldr	r1, [r3]
   11434:	mov	r0, r6
   11438:	bl	10f1c <fputs_unlocked@plt>
   1143c:	add	sp, sp, #36	; 0x24
   11440:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11444:	add	r6, sp, #27
   11448:	and	r3, r4, #7
   1144c:	add	r3, r3, #48	; 0x30
   11450:	strb	r3, [r6, #-1]!
   11454:	lsr	r3, r4, #3
   11458:	orr	r3, r3, r5, lsl #29
   1145c:	lsr	r2, r5, #3
   11460:	mov	r4, r3
   11464:	mov	r5, r2
   11468:	orrs	r3, r4, r5
   1146c:	bne	11448 <__assert_fail@plt+0x244>
   11470:	b	1140c <__assert_fail@plt+0x208>
   11474:	add	r6, sp, #27
   11478:	mov	r8, #10
   1147c:	mov	r9, #0
   11480:	mov	r2, r8
   11484:	mov	r3, r9
   11488:	mov	r0, r4
   1148c:	mov	r1, r5
   11490:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11494:	add	r2, r2, #48	; 0x30
   11498:	strb	r2, [r6, #-1]!
   1149c:	mov	r2, r8
   114a0:	mov	r3, r9
   114a4:	mov	r0, r4
   114a8:	mov	r1, r5
   114ac:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   114b0:	mov	r4, r0
   114b4:	mov	r5, r1
   114b8:	orrs	r3, r4, r5
   114bc:	bne	11480 <__assert_fail@plt+0x27c>
   114c0:	b	1140c <__assert_fail@plt+0x208>
   114c4:	add	r6, sp, #27
   114c8:	ldr	r1, [pc, #52]	; 11504 <__assert_fail@plt+0x300>
   114cc:	and	r2, r4, #15
   114d0:	add	r2, r1, r2
   114d4:	ldrb	r3, [r2]
   114d8:	strb	r3, [r6, #-1]!
   114dc:	lsr	r3, r4, #4
   114e0:	orr	r3, r3, r5, lsl #28
   114e4:	lsr	r2, r5, #4
   114e8:	mov	r4, r3
   114ec:	mov	r5, r2
   114f0:	orrs	r3, r4, r5
   114f4:	bne	114cc <__assert_fail@plt+0x2c8>
   114f8:	b	1140c <__assert_fail@plt+0x208>
   114fc:	muleq	r2, r0, r1
   11500:	andeq	fp, r2, r4, lsl #3
   11504:	andeq	r9, r1, r4, lsl #8
   11508:	push	{r4, r6, r7, lr}
   1150c:	mov	r6, r0
   11510:	mov	r7, r1
   11514:	mov	r4, r2
   11518:	ldr	r3, [pc, #120]	; 11598 <__assert_fail@plt+0x394>
   1151c:	ldr	r0, [r3]
   11520:	ldr	r3, [r0, #20]
   11524:	ldr	r2, [r0, #24]
   11528:	cmp	r3, r2
   1152c:	addcc	r2, r3, #1
   11530:	strcc	r2, [r0, #20]
   11534:	movcc	r2, #40	; 0x28
   11538:	strbcc	r2, [r3]
   1153c:	bcs	11580 <__assert_fail@plt+0x37c>
   11540:	mov	r2, #41	; 0x29
   11544:	mov	r0, r6
   11548:	mov	r1, r7
   1154c:	bl	113c0 <__assert_fail@plt+0x1bc>
   11550:	cmp	r4, #0
   11554:	popeq	{r4, r6, r7, pc}
   11558:	ldr	r3, [pc, #56]	; 11598 <__assert_fail@plt+0x394>
   1155c:	ldr	r0, [r3]
   11560:	ldr	r3, [r0, #20]
   11564:	ldr	r2, [r0, #24]
   11568:	cmp	r3, r2
   1156c:	bcs	1158c <__assert_fail@plt+0x388>
   11570:	add	r2, r3, #1
   11574:	str	r2, [r0, #20]
   11578:	strb	r4, [r3]
   1157c:	pop	{r4, r6, r7, pc}
   11580:	mov	r1, #40	; 0x28
   11584:	bl	11168 <__overflow@plt>
   11588:	b	11540 <__assert_fail@plt+0x33c>
   1158c:	mov	r1, r4
   11590:	bl	11168 <__overflow@plt>
   11594:	pop	{r4, r6, r7, pc}
   11598:	andeq	fp, r2, r4, lsl #3
   1159c:	push	{r4, r5, r6, lr}
   115a0:	mov	r4, r0
   115a4:	mov	r5, r1
   115a8:	mov	r6, r2
   115ac:	mov	r2, #32
   115b0:	bl	113c0 <__assert_fail@plt+0x1bc>
   115b4:	ldr	r3, [pc, #20]	; 115d0 <__assert_fail@plt+0x3cc>
   115b8:	ldrd	r0, [r3, #16]
   115bc:	mov	r2, r6
   115c0:	adds	r0, r0, r4
   115c4:	adc	r1, r1, r5
   115c8:	bl	11508 <__assert_fail@plt+0x304>
   115cc:	pop	{r4, r5, r6, pc}
   115d0:	muleq	r2, r0, r1
   115d4:	ldrb	r3, [r0]
   115d8:	cmp	r3, #0
   115dc:	beq	11660 <__assert_fail@plt+0x45c>
   115e0:	push	{r4, r5, lr}
   115e4:	sub	sp, sp, #12
   115e8:	mov	r4, r0
   115ec:	mov	r5, r1
   115f0:	cmp	r3, #43	; 0x2b
   115f4:	addeq	r4, r0, #1
   115f8:	mov	r1, #46	; 0x2e
   115fc:	mov	r0, r4
   11600:	bl	110cc <strchr@plt>
   11604:	cmp	r0, #0
   11608:	movne	r2, #10
   1160c:	beq	11638 <__assert_fail@plt+0x434>
   11610:	ldr	r3, [pc, #80]	; 11668 <__assert_fail@plt+0x464>
   11614:	str	r3, [sp]
   11618:	mov	r3, r5
   1161c:	mov	r1, #0
   11620:	mov	r0, r4
   11624:	bl	182d4 <__assert_fail@plt+0x70d0>
   11628:	clz	r0, r0
   1162c:	lsr	r0, r0, #5
   11630:	add	sp, sp, #12
   11634:	pop	{r4, r5, pc}
   11638:	ldrb	r3, [r4]
   1163c:	cmp	r3, #48	; 0x30
   11640:	movne	r2, #8
   11644:	bne	11610 <__assert_fail@plt+0x40c>
   11648:	ldrb	r2, [r4, #1]
   1164c:	and	r2, r2, #223	; 0xdf
   11650:	cmp	r2, #88	; 0x58
   11654:	movne	r2, #8
   11658:	moveq	r2, #16
   1165c:	b	11610 <__assert_fail@plt+0x40c>
   11660:	mov	r0, #0
   11664:	bx	lr
   11668:	andeq	r9, r1, r8, lsl r4
   1166c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11670:	sub	sp, sp, #36	; 0x24
   11674:	ldr	fp, [sp, #72]	; 0x48
   11678:	ldr	r4, [sp, #76]	; 0x4c
   1167c:	mov	r6, r0
   11680:	mov	r7, #0
   11684:	strd	r6, [sp]
   11688:	mov	r8, r1
   1168c:	mov	r9, #0
   11690:	strd	r8, [sp, #8]
   11694:	cmp	r7, r9
   11698:	cmpeq	r0, r1
   1169c:	bls	1175c <__assert_fail@plt+0x558>
   116a0:	mov	r0, r4
   116a4:	asr	r1, r4, #31
   116a8:	strd	r0, [sp, #16]
   116ac:	mov	r8, r6
   116b0:	mov	r9, r7
   116b4:	subs	r6, r6, #1
   116b8:	sbc	r7, r7, #0
   116bc:	mul	r3, r6, r1
   116c0:	mla	r3, r4, r7, r3
   116c4:	umull	r6, r7, r6, r4
   116c8:	add	r7, r3, r7
   116cc:	mov	sl, r2
   116d0:	b	11710 <__assert_fail@plt+0x50c>
   116d4:	ldr	r2, [pc, #136]	; 11764 <__assert_fail@plt+0x560>
   116d8:	sub	r1, r4, r5
   116dc:	add	r1, r1, fp
   116e0:	ldr	r0, [pc, #128]	; 11768 <__assert_fail@plt+0x564>
   116e4:	bl	1806c <__assert_fail@plt+0x6e68>
   116e8:	ldrd	r2, [sp, #16]
   116ec:	subs	r2, r6, r2
   116f0:	sbc	r3, r7, r3
   116f4:	mov	r6, r2
   116f8:	mov	r7, r3
   116fc:	mov	r4, r5
   11700:	ldrd	r2, [sp, #8]
   11704:	cmp	r9, r3
   11708:	cmpeq	r8, r2
   1170c:	bls	1175c <__assert_fail@plt+0x558>
   11710:	subs	r8, r8, #1
   11714:	sbc	r9, r9, #0
   11718:	ldrd	r2, [sp]
   1171c:	mov	r0, r6
   11720:	mov	r1, r7
   11724:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11728:	mov	r5, r0
   1172c:	ldrb	r2, [sl], #1
   11730:	and	r2, r2, #127	; 0x7f
   11734:	cmp	r2, #127	; 0x7f
   11738:	beq	116d4 <__assert_fail@plt+0x4d0>
   1173c:	cmp	r2, #32
   11740:	ldrle	r3, [pc, #36]	; 1176c <__assert_fail@plt+0x568>
   11744:	addle	r2, r3, r2, lsl #2
   11748:	strbgt	r2, [sp, #28]
   1174c:	movgt	r3, #0
   11750:	strbgt	r3, [sp, #29]
   11754:	addgt	r2, sp, #28
   11758:	b	116d8 <__assert_fail@plt+0x4d4>
   1175c:	add	sp, sp, #36	; 0x24
   11760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11764:	andeq	r9, r1, ip, lsl r4
   11768:	andeq	r9, r1, r0, lsr #8
   1176c:	andeq	r9, r1, r8, ror #1
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11774:	sub	sp, sp, #44	; 0x2c
   11778:	ldr	r9, [sp, #80]	; 0x50
   1177c:	ldr	r4, [sp, #84]	; 0x54
   11780:	mov	r6, r0
   11784:	mov	r7, #0
   11788:	strd	r6, [sp]
   1178c:	mov	sl, r1
   11790:	mov	fp, #0
   11794:	strd	sl, [sp, #8]
   11798:	cmp	r7, fp
   1179c:	cmpeq	r0, r1
   117a0:	bls	1186c <__assert_fail@plt+0x668>
   117a4:	str	r3, [sp, #28]
   117a8:	mov	r0, r4
   117ac:	asr	r1, r4, #31
   117b0:	strd	r0, [sp, #16]
   117b4:	subs	sl, r6, #1
   117b8:	sbc	fp, r7, #0
   117bc:	mul	r3, sl, r1
   117c0:	mla	r3, r4, fp, r3
   117c4:	umull	sl, fp, sl, r4
   117c8:	add	fp, r3, fp
   117cc:	mov	r5, r2
   117d0:	mov	r8, r9
   117d4:	b	11810 <__assert_fail@plt+0x60c>
   117d8:	ldrd	r2, [sp, #32]
   117dc:	add	r5, r5, #8
   117e0:	ldr	r0, [sp, #28]
   117e4:	bl	1806c <__assert_fail@plt+0x6e68>
   117e8:	ldrd	r2, [sp, #16]
   117ec:	subs	r2, sl, r2
   117f0:	sbc	r3, fp, r3
   117f4:	mov	sl, r2
   117f8:	mov	fp, r3
   117fc:	mov	r4, r9
   11800:	ldrd	r2, [sp, #8]
   11804:	cmp	r7, r3
   11808:	cmpeq	r6, r2
   1180c:	bls	1186c <__assert_fail@plt+0x668>
   11810:	subs	r6, r6, #1
   11814:	sbc	r7, r7, #0
   11818:	ldrd	r2, [sp]
   1181c:	mov	r0, sl
   11820:	mov	r1, fp
   11824:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11828:	mov	r9, r0
   1182c:	sub	r1, r4, r0
   11830:	add	r1, r1, r8
   11834:	ldr	r3, [pc, #56]	; 11874 <__assert_fail@plt+0x670>
   11838:	ldrb	r3, [r3, #24]
   1183c:	cmp	r3, #0
   11840:	beq	11864 <__assert_fail@plt+0x660>
   11844:	add	r3, r5, #8
   11848:	add	r2, sp, #32
   1184c:	mov	ip, r5
   11850:	ldrb	r0, [r3, #-1]!
   11854:	strb	r0, [r2], #1
   11858:	cmp	ip, r3
   1185c:	bne	11850 <__assert_fail@plt+0x64c>
   11860:	b	117d8 <__assert_fail@plt+0x5d4>
   11864:	ldrd	r2, [r5]
   11868:	b	117dc <__assert_fail@plt+0x5d8>
   1186c:	add	sp, sp, #44	; 0x2c
   11870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11874:	muleq	r2, r0, r1
   11878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1187c:	sub	sp, sp, #44	; 0x2c
   11880:	ldr	r4, [sp, #84]	; 0x54
   11884:	mov	r7, #0
   11888:	mov	sl, r0
   1188c:	mov	fp, r7
   11890:	strd	sl, [sp]
   11894:	mov	r6, r1
   11898:	mov	r7, #0
   1189c:	strd	r6, [sp, #8]
   118a0:	cmp	fp, r7
   118a4:	cmpeq	r0, r1
   118a8:	bls	11994 <__assert_fail@plt+0x790>
   118ac:	str	r3, [sp, #24]
   118b0:	mov	r8, r2
   118b4:	mov	r9, r0
   118b8:	mov	r2, r4
   118bc:	asr	r3, r4, #31
   118c0:	strd	r2, [sp, #16]
   118c4:	mov	r6, r0
   118c8:	mov	r7, fp
   118cc:	subs	sl, r0, #1
   118d0:	sbc	fp, fp, #0
   118d4:	mul	r3, sl, r3
   118d8:	mla	r3, r4, fp, r3
   118dc:	umull	sl, fp, sl, r4
   118e0:	add	fp, r3, fp
   118e4:	add	r3, r0, #1
   118e8:	str	r3, [sp, #28]
   118ec:	b	1192c <__assert_fail@plt+0x728>
   118f0:	ldr	r2, [sp, #36]	; 0x24
   118f4:	ldr	r0, [sp, #24]
   118f8:	bl	1806c <__assert_fail@plt+0x6e68>
   118fc:	subs	r6, r6, #1
   11900:	sbc	r7, r7, #0
   11904:	ldrd	r2, [sp, #16]
   11908:	subs	r2, sl, r2
   1190c:	sbc	r3, fp, r3
   11910:	mov	sl, r2
   11914:	mov	fp, r3
   11918:	mov	r4, r5
   1191c:	ldrd	r2, [sp, #8]
   11920:	cmp	r7, r3
   11924:	cmpeq	r6, r2
   11928:	bls	11994 <__assert_fail@plt+0x790>
   1192c:	ldrd	r2, [sp]
   11930:	mov	r0, sl
   11934:	mov	r1, fp
   11938:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   1193c:	mov	r5, r0
   11940:	sub	r1, r4, r0
   11944:	ldr	r3, [sp, #80]	; 0x50
   11948:	add	r1, r1, r3
   1194c:	ldr	r3, [pc, #72]	; 1199c <__assert_fail@plt+0x798>
   11950:	ldrb	r3, [r3, #24]
   11954:	cmp	r3, #0
   11958:	beq	11988 <__assert_fail@plt+0x784>
   1195c:	ldr	r3, [sp, #28]
   11960:	sub	r3, r3, r6
   11964:	add	r3, r8, r3, lsl #2
   11968:	add	r2, sp, #36	; 0x24
   1196c:	sub	ip, r9, r6
   11970:	add	ip, r8, ip, lsl #2
   11974:	ldrb	r0, [r3, #-1]!
   11978:	strb	r0, [r2], #1
   1197c:	cmp	r3, ip
   11980:	bne	11974 <__assert_fail@plt+0x770>
   11984:	b	118f0 <__assert_fail@plt+0x6ec>
   11988:	sub	r3, r9, r6
   1198c:	ldr	r2, [r8, r3, lsl #2]
   11990:	b	118f4 <__assert_fail@plt+0x6f0>
   11994:	add	sp, sp, #44	; 0x2c
   11998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	muleq	r2, r0, r1
   119a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a4:	sub	sp, sp, #44	; 0x2c
   119a8:	ldr	r4, [sp, #84]	; 0x54
   119ac:	mov	r7, #0
   119b0:	mov	sl, r0
   119b4:	mov	fp, r7
   119b8:	strd	sl, [sp]
   119bc:	mov	r6, r1
   119c0:	mov	r7, #0
   119c4:	strd	r6, [sp, #8]
   119c8:	cmp	fp, r7
   119cc:	cmpeq	r0, r1
   119d0:	bls	11abc <__assert_fail@plt+0x8b8>
   119d4:	str	r3, [sp, #24]
   119d8:	mov	r8, r2
   119dc:	mov	r9, r0
   119e0:	mov	r2, r4
   119e4:	asr	r3, r4, #31
   119e8:	strd	r2, [sp, #16]
   119ec:	mov	r6, r0
   119f0:	mov	r7, fp
   119f4:	subs	sl, r0, #1
   119f8:	sbc	fp, fp, #0
   119fc:	mul	r3, sl, r3
   11a00:	mla	r3, r4, fp, r3
   11a04:	umull	sl, fp, sl, r4
   11a08:	add	fp, r3, fp
   11a0c:	add	r3, r0, #1
   11a10:	str	r3, [sp, #28]
   11a14:	b	11a54 <__assert_fail@plt+0x850>
   11a18:	ldr	r2, [sp, #36]	; 0x24
   11a1c:	ldr	r0, [sp, #24]
   11a20:	bl	1806c <__assert_fail@plt+0x6e68>
   11a24:	subs	r6, r6, #1
   11a28:	sbc	r7, r7, #0
   11a2c:	ldrd	r2, [sp, #16]
   11a30:	subs	r2, sl, r2
   11a34:	sbc	r3, fp, r3
   11a38:	mov	sl, r2
   11a3c:	mov	fp, r3
   11a40:	mov	r4, r5
   11a44:	ldrd	r2, [sp, #8]
   11a48:	cmp	r7, r3
   11a4c:	cmpeq	r6, r2
   11a50:	bls	11abc <__assert_fail@plt+0x8b8>
   11a54:	ldrd	r2, [sp]
   11a58:	mov	r0, sl
   11a5c:	mov	r1, fp
   11a60:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11a64:	mov	r5, r0
   11a68:	sub	r1, r4, r0
   11a6c:	ldr	r3, [sp, #80]	; 0x50
   11a70:	add	r1, r1, r3
   11a74:	ldr	r3, [pc, #72]	; 11ac4 <__assert_fail@plt+0x8c0>
   11a78:	ldrb	r3, [r3, #24]
   11a7c:	cmp	r3, #0
   11a80:	beq	11ab0 <__assert_fail@plt+0x8ac>
   11a84:	ldr	r3, [sp, #28]
   11a88:	sub	r3, r3, r6
   11a8c:	add	r3, r8, r3, lsl #2
   11a90:	add	r2, sp, #36	; 0x24
   11a94:	sub	ip, r9, r6
   11a98:	add	ip, r8, ip, lsl #2
   11a9c:	ldrb	r0, [r3, #-1]!
   11aa0:	strb	r0, [r2], #1
   11aa4:	cmp	r3, ip
   11aa8:	bne	11a9c <__assert_fail@plt+0x898>
   11aac:	b	11a18 <__assert_fail@plt+0x814>
   11ab0:	sub	r3, r9, r6
   11ab4:	ldr	r2, [r8, r3, lsl #2]
   11ab8:	b	11a1c <__assert_fail@plt+0x818>
   11abc:	add	sp, sp, #44	; 0x2c
   11ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac4:	muleq	r2, r0, r1
   11ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11acc:	sub	sp, sp, #36	; 0x24
   11ad0:	ldr	r5, [sp, #76]	; 0x4c
   11ad4:	mov	r6, r0
   11ad8:	mov	r7, #0
   11adc:	strd	r6, [sp]
   11ae0:	mov	r8, r1
   11ae4:	mov	r9, #0
   11ae8:	strd	r8, [sp, #8]
   11aec:	cmp	r7, r9
   11af0:	cmpeq	r0, r1
   11af4:	bls	11bb0 <__assert_fail@plt+0x9ac>
   11af8:	str	r3, [sp, #28]
   11afc:	mov	r0, r5
   11b00:	asr	r1, r5, #31
   11b04:	strd	r0, [sp, #16]
   11b08:	subs	sl, r6, #1
   11b0c:	sbc	fp, r7, #0
   11b10:	mul	r3, sl, r1
   11b14:	mla	r3, r5, fp, r3
   11b18:	umull	sl, fp, sl, r5
   11b1c:	add	fp, r3, fp
   11b20:	mov	r8, r2
   11b24:	subs	r6, r6, #1
   11b28:	sbc	r7, r7, #0
   11b2c:	ldrd	r2, [sp]
   11b30:	mov	r0, sl
   11b34:	mov	r1, fp
   11b38:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11b3c:	mov	r9, r0
   11b40:	sub	r1, r5, r0
   11b44:	ldr	r3, [sp, #72]	; 0x48
   11b48:	add	r1, r1, r3
   11b4c:	ldr	r3, [pc, #100]	; 11bb8 <__assert_fail@plt+0x9b4>
   11b50:	ldrb	r3, [r3, #24]
   11b54:	cmp	r3, #0
   11b58:	ldrbne	r2, [r8, #1]
   11b5c:	bicne	r4, r4, #255	; 0xff
   11b60:	orrne	r2, r2, r4
   11b64:	ldrbne	r4, [r8]
   11b68:	bicne	r2, r2, #65280	; 0xff00
   11b6c:	orrne	r2, r2, r4, lsl #8
   11b70:	movne	r4, r2
   11b74:	uxthne	r2, r2
   11b78:	ldrheq	r2, [r8]
   11b7c:	add	r8, r8, #2
   11b80:	ldr	r0, [sp, #28]
   11b84:	bl	1806c <__assert_fail@plt+0x6e68>
   11b88:	ldrd	r2, [sp, #16]
   11b8c:	subs	r2, sl, r2
   11b90:	sbc	r3, fp, r3
   11b94:	mov	sl, r2
   11b98:	mov	fp, r3
   11b9c:	mov	r5, r9
   11ba0:	ldrd	r2, [sp, #8]
   11ba4:	cmp	r7, r3
   11ba8:	cmpeq	r6, r2
   11bac:	bhi	11b24 <__assert_fail@plt+0x920>
   11bb0:	add	sp, sp, #36	; 0x24
   11bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb8:	muleq	r2, r0, r1
   11bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc0:	sub	sp, sp, #36	; 0x24
   11bc4:	ldr	r5, [sp, #76]	; 0x4c
   11bc8:	mov	r6, r0
   11bcc:	mov	r7, #0
   11bd0:	strd	r6, [sp]
   11bd4:	mov	r8, r1
   11bd8:	mov	r9, #0
   11bdc:	strd	r8, [sp, #8]
   11be0:	cmp	r7, r9
   11be4:	cmpeq	r0, r1
   11be8:	bls	11ca4 <__assert_fail@plt+0xaa0>
   11bec:	str	r3, [sp, #28]
   11bf0:	mov	r0, r5
   11bf4:	asr	r1, r5, #31
   11bf8:	strd	r0, [sp, #16]
   11bfc:	subs	sl, r6, #1
   11c00:	sbc	fp, r7, #0
   11c04:	mul	r3, sl, r1
   11c08:	mla	r3, r5, fp, r3
   11c0c:	umull	sl, fp, sl, r5
   11c10:	add	fp, r3, fp
   11c14:	mov	r8, r2
   11c18:	subs	r6, r6, #1
   11c1c:	sbc	r7, r7, #0
   11c20:	ldrd	r2, [sp]
   11c24:	mov	r0, sl
   11c28:	mov	r1, fp
   11c2c:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11c30:	mov	r9, r0
   11c34:	sub	r1, r5, r0
   11c38:	ldr	r3, [sp, #72]	; 0x48
   11c3c:	add	r1, r1, r3
   11c40:	ldr	r3, [pc, #100]	; 11cac <__assert_fail@plt+0xaa8>
   11c44:	ldrb	r3, [r3, #24]
   11c48:	cmp	r3, #0
   11c4c:	ldrbne	r2, [r8, #1]
   11c50:	bicne	r4, r4, #255	; 0xff
   11c54:	orrne	r2, r2, r4
   11c58:	ldrbne	r4, [r8]
   11c5c:	bicne	r2, r2, #65280	; 0xff00
   11c60:	orrne	r2, r2, r4, lsl #8
   11c64:	movne	r4, r2
   11c68:	sxthne	r2, r2
   11c6c:	ldrsheq	r2, [r8]
   11c70:	add	r8, r8, #2
   11c74:	ldr	r0, [sp, #28]
   11c78:	bl	1806c <__assert_fail@plt+0x6e68>
   11c7c:	ldrd	r2, [sp, #16]
   11c80:	subs	r2, sl, r2
   11c84:	sbc	r3, fp, r3
   11c88:	mov	sl, r2
   11c8c:	mov	fp, r3
   11c90:	mov	r5, r9
   11c94:	ldrd	r2, [sp, #8]
   11c98:	cmp	r7, r3
   11c9c:	cmpeq	r6, r2
   11ca0:	bhi	11c18 <__assert_fail@plt+0xa14>
   11ca4:	add	sp, sp, #36	; 0x24
   11ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cac:	muleq	r2, r0, r1
   11cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cb4:	sub	sp, sp, #36	; 0x24
   11cb8:	ldr	fp, [sp, #72]	; 0x48
   11cbc:	ldr	r4, [sp, #76]	; 0x4c
   11cc0:	mov	r7, #0
   11cc4:	mov	r8, r0
   11cc8:	mov	r9, r7
   11ccc:	strd	r8, [sp, #8]
   11cd0:	mov	r6, r1
   11cd4:	mov	r7, #0
   11cd8:	strd	r6, [sp, #16]
   11cdc:	cmp	r9, r7
   11ce0:	cmpeq	r0, r1
   11ce4:	bls	11d88 <__assert_fail@plt+0xb84>
   11ce8:	str	r3, [sp, #28]
   11cec:	mov	r6, r4
   11cf0:	asr	r7, r4, #31
   11cf4:	strd	r6, [sp]
   11cf8:	mov	r6, r0
   11cfc:	mov	r7, r9
   11d00:	subs	r8, r0, #1
   11d04:	sbc	r9, r9, #0
   11d08:	ldr	r3, [sp, #4]
   11d0c:	mul	r3, r8, r3
   11d10:	mla	r3, r4, r9, r3
   11d14:	umull	r8, r9, r8, r4
   11d18:	add	r9, r3, r9
   11d1c:	add	sl, r2, r0
   11d20:	mov	r3, sl
   11d24:	mov	sl, fp
   11d28:	mov	fp, r3
   11d2c:	ldrd	r2, [sp, #8]
   11d30:	mov	r0, r8
   11d34:	mov	r1, r9
   11d38:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11d3c:	mov	r5, r0
   11d40:	rsb	r3, r6, #0
   11d44:	sub	r1, r4, r0
   11d48:	ldrb	r2, [fp, r3]
   11d4c:	add	r1, r1, sl
   11d50:	ldr	r0, [sp, #28]
   11d54:	bl	1806c <__assert_fail@plt+0x6e68>
   11d58:	subs	r6, r6, #1
   11d5c:	sbc	r7, r7, #0
   11d60:	ldrd	r2, [sp]
   11d64:	subs	r2, r8, r2
   11d68:	sbc	r3, r9, r3
   11d6c:	mov	r8, r2
   11d70:	mov	r9, r3
   11d74:	mov	r4, r5
   11d78:	ldrd	r2, [sp, #16]
   11d7c:	cmp	r7, r3
   11d80:	cmpeq	r6, r2
   11d84:	bhi	11d2c <__assert_fail@plt+0xb28>
   11d88:	add	sp, sp, #36	; 0x24
   11d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d94:	sub	sp, sp, #36	; 0x24
   11d98:	ldr	fp, [sp, #72]	; 0x48
   11d9c:	ldr	r4, [sp, #76]	; 0x4c
   11da0:	mov	r7, #0
   11da4:	mov	r8, r0
   11da8:	mov	r9, r7
   11dac:	strd	r8, [sp, #8]
   11db0:	mov	r6, r1
   11db4:	mov	r7, #0
   11db8:	strd	r6, [sp, #16]
   11dbc:	cmp	r9, r7
   11dc0:	cmpeq	r0, r1
   11dc4:	bls	11e68 <__assert_fail@plt+0xc64>
   11dc8:	str	r3, [sp, #28]
   11dcc:	mov	r6, r4
   11dd0:	asr	r7, r4, #31
   11dd4:	strd	r6, [sp]
   11dd8:	mov	r6, r0
   11ddc:	mov	r7, r9
   11de0:	subs	r8, r0, #1
   11de4:	sbc	r9, r9, #0
   11de8:	ldr	r3, [sp, #4]
   11dec:	mul	r3, r8, r3
   11df0:	mla	r3, r4, r9, r3
   11df4:	umull	r8, r9, r8, r4
   11df8:	add	r9, r3, r9
   11dfc:	add	sl, r2, r0
   11e00:	mov	r3, sl
   11e04:	mov	sl, fp
   11e08:	mov	fp, r3
   11e0c:	ldrd	r2, [sp, #8]
   11e10:	mov	r0, r8
   11e14:	mov	r1, r9
   11e18:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11e1c:	mov	r5, r0
   11e20:	rsb	r3, r6, #0
   11e24:	sub	r1, r4, r0
   11e28:	ldrsb	r2, [fp, r3]
   11e2c:	add	r1, r1, sl
   11e30:	ldr	r0, [sp, #28]
   11e34:	bl	1806c <__assert_fail@plt+0x6e68>
   11e38:	subs	r6, r6, #1
   11e3c:	sbc	r7, r7, #0
   11e40:	ldrd	r2, [sp]
   11e44:	subs	r2, r8, r2
   11e48:	sbc	r3, r9, r3
   11e4c:	mov	r8, r2
   11e50:	mov	r9, r3
   11e54:	mov	r4, r5
   11e58:	ldrd	r2, [sp, #16]
   11e5c:	cmp	r7, r3
   11e60:	cmpeq	r6, r2
   11e64:	bhi	11e0c <__assert_fail@plt+0xc08>
   11e68:	add	sp, sp, #36	; 0x24
   11e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	sub	sp, sp, #68	; 0x44
   11e78:	ldr	r9, [sp, #104]	; 0x68
   11e7c:	ldr	r4, [sp, #108]	; 0x6c
   11e80:	mov	r6, r0
   11e84:	mov	r7, #0
   11e88:	strd	r6, [sp]
   11e8c:	mov	sl, r1
   11e90:	mov	fp, #0
   11e94:	strd	sl, [sp, #8]
   11e98:	cmp	r7, fp
   11e9c:	cmpeq	r0, r1
   11ea0:	bls	11f8c <__assert_fail@plt+0xd88>
   11ea4:	mov	r0, r4
   11ea8:	asr	r1, r4, #31
   11eac:	strd	r0, [sp, #16]
   11eb0:	mov	sl, r6
   11eb4:	mov	fp, r7
   11eb8:	subs	r6, r6, #1
   11ebc:	sbc	r7, r7, #0
   11ec0:	mul	r3, r6, r1
   11ec4:	mla	r3, r4, r7, r3
   11ec8:	umull	r6, r7, r6, r4
   11ecc:	add	r7, r3, r7
   11ed0:	mov	r5, r2
   11ed4:	mov	r8, r9
   11ed8:	b	11f30 <__assert_fail@plt+0xd2c>
   11edc:	vldr	d0, [sp, #24]
   11ee0:	add	r5, r5, #8
   11ee4:	mov	r3, #0
   11ee8:	mov	r2, r3
   11eec:	mov	r1, #40	; 0x28
   11ef0:	add	r0, sp, #24
   11ef4:	bl	157c8 <__assert_fail@plt+0x45c4>
   11ef8:	add	r2, sp, #24
   11efc:	mov	r1, r4
   11f00:	ldr	r0, [pc, #140]	; 11f94 <__assert_fail@plt+0xd90>
   11f04:	bl	1806c <__assert_fail@plt+0x6e68>
   11f08:	ldrd	r2, [sp, #16]
   11f0c:	subs	r2, r6, r2
   11f10:	sbc	r3, r7, r3
   11f14:	mov	r6, r2
   11f18:	mov	r7, r3
   11f1c:	mov	r4, r9
   11f20:	ldrd	r2, [sp, #8]
   11f24:	cmp	fp, r3
   11f28:	cmpeq	sl, r2
   11f2c:	bls	11f8c <__assert_fail@plt+0xd88>
   11f30:	subs	sl, sl, #1
   11f34:	sbc	fp, fp, #0
   11f38:	ldrd	r2, [sp]
   11f3c:	mov	r0, r6
   11f40:	mov	r1, r7
   11f44:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   11f48:	mov	r9, r0
   11f4c:	sub	r4, r4, r0
   11f50:	add	r4, r4, r8
   11f54:	ldr	r3, [pc, #60]	; 11f98 <__assert_fail@plt+0xd94>
   11f58:	ldrb	r3, [r3, #24]
   11f5c:	cmp	r3, #0
   11f60:	beq	11f84 <__assert_fail@plt+0xd80>
   11f64:	add	r3, r5, #8
   11f68:	add	r2, sp, #24
   11f6c:	mov	r0, r5
   11f70:	ldrb	r1, [r3, #-1]!
   11f74:	strb	r1, [r2], #1
   11f78:	cmp	r0, r3
   11f7c:	bne	11f70 <__assert_fail@plt+0xd6c>
   11f80:	b	11edc <__assert_fail@plt+0xcd8>
   11f84:	vldr	d0, [r5]
   11f88:	b	11ee0 <__assert_fail@plt+0xcdc>
   11f8c:	add	sp, sp, #68	; 0x44
   11f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f94:	andeq	r9, r1, r0, lsr #8
   11f98:	muleq	r2, r0, r1
   11f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa0:	sub	sp, sp, #68	; 0x44
   11fa4:	ldr	r9, [sp, #104]	; 0x68
   11fa8:	ldr	r4, [sp, #108]	; 0x6c
   11fac:	mov	r6, r0
   11fb0:	mov	r7, #0
   11fb4:	strd	r6, [sp]
   11fb8:	mov	sl, r1
   11fbc:	mov	fp, #0
   11fc0:	strd	sl, [sp, #8]
   11fc4:	cmp	r7, fp
   11fc8:	cmpeq	r0, r1
   11fcc:	bls	120b8 <__assert_fail@plt+0xeb4>
   11fd0:	mov	r0, r4
   11fd4:	asr	r1, r4, #31
   11fd8:	strd	r0, [sp, #16]
   11fdc:	mov	sl, r6
   11fe0:	mov	fp, r7
   11fe4:	subs	r6, r6, #1
   11fe8:	sbc	r7, r7, #0
   11fec:	mul	r3, r6, r1
   11ff0:	mla	r3, r4, r7, r3
   11ff4:	umull	r6, r7, r6, r4
   11ff8:	add	r7, r3, r7
   11ffc:	mov	r5, r2
   12000:	mov	r8, r9
   12004:	b	1205c <__assert_fail@plt+0xe58>
   12008:	vldr	d0, [sp, #24]
   1200c:	add	r5, r5, #8
   12010:	mov	r3, #0
   12014:	mov	r2, r3
   12018:	mov	r1, #40	; 0x28
   1201c:	add	r0, sp, #24
   12020:	bl	15318 <__assert_fail@plt+0x4114>
   12024:	add	r2, sp, #24
   12028:	mov	r1, r4
   1202c:	ldr	r0, [pc, #140]	; 120c0 <__assert_fail@plt+0xebc>
   12030:	bl	1806c <__assert_fail@plt+0x6e68>
   12034:	ldrd	r2, [sp, #16]
   12038:	subs	r2, r6, r2
   1203c:	sbc	r3, r7, r3
   12040:	mov	r6, r2
   12044:	mov	r7, r3
   12048:	mov	r4, r9
   1204c:	ldrd	r2, [sp, #8]
   12050:	cmp	fp, r3
   12054:	cmpeq	sl, r2
   12058:	bls	120b8 <__assert_fail@plt+0xeb4>
   1205c:	subs	sl, sl, #1
   12060:	sbc	fp, fp, #0
   12064:	ldrd	r2, [sp]
   12068:	mov	r0, r6
   1206c:	mov	r1, r7
   12070:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   12074:	mov	r9, r0
   12078:	sub	r4, r4, r0
   1207c:	add	r4, r4, r8
   12080:	ldr	r3, [pc, #60]	; 120c4 <__assert_fail@plt+0xec0>
   12084:	ldrb	r3, [r3, #24]
   12088:	cmp	r3, #0
   1208c:	beq	120b0 <__assert_fail@plt+0xeac>
   12090:	add	r3, r5, #8
   12094:	add	r2, sp, #24
   12098:	mov	r0, r5
   1209c:	ldrb	r1, [r3, #-1]!
   120a0:	strb	r1, [r2], #1
   120a4:	cmp	r0, r3
   120a8:	bne	1209c <__assert_fail@plt+0xe98>
   120ac:	b	12008 <__assert_fail@plt+0xe04>
   120b0:	vldr	d0, [r5]
   120b4:	b	1200c <__assert_fail@plt+0xe08>
   120b8:	add	sp, sp, #68	; 0x44
   120bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c0:	andeq	r9, r1, r0, lsr #8
   120c4:	muleq	r2, r0, r1
   120c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120cc:	sub	sp, sp, #60	; 0x3c
   120d0:	ldr	r9, [sp, #96]	; 0x60
   120d4:	ldr	r4, [sp, #100]	; 0x64
   120d8:	mov	r6, r0
   120dc:	mov	r7, #0
   120e0:	strd	r6, [sp]
   120e4:	mov	sl, r1
   120e8:	mov	fp, #0
   120ec:	strd	sl, [sp, #8]
   120f0:	cmp	r7, fp
   120f4:	cmpeq	r0, r1
   120f8:	bls	121e4 <__assert_fail@plt+0xfe0>
   120fc:	mov	r0, r4
   12100:	asr	r1, r4, #31
   12104:	strd	r0, [sp, #16]
   12108:	mov	sl, r6
   1210c:	mov	fp, r7
   12110:	subs	r6, r6, #1
   12114:	sbc	r7, r7, #0
   12118:	mul	r3, r6, r1
   1211c:	mla	r3, r4, r7, r3
   12120:	umull	r6, r7, r6, r4
   12124:	add	r7, r3, r7
   12128:	mov	r5, r2
   1212c:	mov	r8, r9
   12130:	b	12188 <__assert_fail@plt+0xf84>
   12134:	vldr	s0, [sp, #24]
   12138:	add	r5, r5, #4
   1213c:	mov	r3, #0
   12140:	mov	r2, r3
   12144:	mov	r1, #31
   12148:	add	r0, sp, #24
   1214c:	bl	15674 <__assert_fail@plt+0x4470>
   12150:	add	r2, sp, #24
   12154:	mov	r1, r4
   12158:	ldr	r0, [pc, #140]	; 121ec <__assert_fail@plt+0xfe8>
   1215c:	bl	1806c <__assert_fail@plt+0x6e68>
   12160:	ldrd	r2, [sp, #16]
   12164:	subs	r2, r6, r2
   12168:	sbc	r3, r7, r3
   1216c:	mov	r6, r2
   12170:	mov	r7, r3
   12174:	mov	r4, r9
   12178:	ldrd	r2, [sp, #8]
   1217c:	cmp	fp, r3
   12180:	cmpeq	sl, r2
   12184:	bls	121e4 <__assert_fail@plt+0xfe0>
   12188:	subs	sl, sl, #1
   1218c:	sbc	fp, fp, #0
   12190:	ldrd	r2, [sp]
   12194:	mov	r0, r6
   12198:	mov	r1, r7
   1219c:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   121a0:	mov	r9, r0
   121a4:	sub	r4, r4, r0
   121a8:	add	r4, r4, r8
   121ac:	ldr	r3, [pc, #60]	; 121f0 <__assert_fail@plt+0xfec>
   121b0:	ldrb	r3, [r3, #24]
   121b4:	cmp	r3, #0
   121b8:	beq	121dc <__assert_fail@plt+0xfd8>
   121bc:	add	r3, r5, #4
   121c0:	add	r2, sp, #24
   121c4:	mov	r0, r5
   121c8:	ldrb	r1, [r3, #-1]!
   121cc:	strb	r1, [r2], #1
   121d0:	cmp	r0, r3
   121d4:	bne	121c8 <__assert_fail@plt+0xfc4>
   121d8:	b	12134 <__assert_fail@plt+0xf30>
   121dc:	vldr	s0, [r5]
   121e0:	b	12138 <__assert_fail@plt+0xf34>
   121e4:	add	sp, sp, #60	; 0x3c
   121e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121ec:	andeq	r9, r1, r0, lsr #8
   121f0:	muleq	r2, r0, r1
   121f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121f8:	sub	sp, sp, #44	; 0x2c
   121fc:	ldr	r4, [sp, #84]	; 0x54
   12200:	mov	r6, r0
   12204:	mov	r7, #0
   12208:	strd	r6, [sp, #8]
   1220c:	mov	r8, r1
   12210:	mov	r9, #0
   12214:	strd	r8, [sp, #16]
   12218:	cmp	r7, r9
   1221c:	cmpeq	r0, r1
   12220:	bls	12370 <__assert_fail@plt+0x116c>
   12224:	mov	r0, r4
   12228:	asr	r1, r4, #31
   1222c:	strd	r0, [sp, #24]
   12230:	subs	sl, r6, #1
   12234:	sbc	fp, r7, #0
   12238:	mul	r3, sl, r1
   1223c:	mla	r3, r4, fp, r3
   12240:	umull	sl, fp, sl, r4
   12244:	add	fp, r3, fp
   12248:	mov	r9, r2
   1224c:	b	1230c <__assert_fail@plt+0x1108>
   12250:	ldr	r2, [pc, #288]	; 12378 <__assert_fail@plt+0x1174>
   12254:	b	122d0 <__assert_fail@plt+0x10cc>
   12258:	ldr	r2, [pc, #284]	; 1237c <__assert_fail@plt+0x1178>
   1225c:	b	122d0 <__assert_fail@plt+0x10cc>
   12260:	ldr	r2, [pc, #280]	; 12380 <__assert_fail@plt+0x117c>
   12264:	b	122d0 <__assert_fail@plt+0x10cc>
   12268:	ldr	r2, [pc, #276]	; 12384 <__assert_fail@plt+0x1180>
   1226c:	b	122d0 <__assert_fail@plt+0x10cc>
   12270:	ldr	r2, [pc, #272]	; 12388 <__assert_fail@plt+0x1184>
   12274:	b	122d0 <__assert_fail@plt+0x10cc>
   12278:	ldr	r2, [pc, #268]	; 1238c <__assert_fail@plt+0x1188>
   1227c:	b	122d0 <__assert_fail@plt+0x10cc>
   12280:	ldr	r2, [pc, #264]	; 12390 <__assert_fail@plt+0x118c>
   12284:	b	122d0 <__assert_fail@plt+0x10cc>
   12288:	bl	110a8 <__ctype_b_loc@plt>
   1228c:	ldr	r2, [r0]
   12290:	lsl	r3, r5, #1
   12294:	ldrh	r3, [r2, r3]
   12298:	and	r3, r3, #16384	; 0x4000
   1229c:	str	r5, [sp]
   122a0:	ldr	r2, [pc, #236]	; 12394 <__assert_fail@plt+0x1190>
   122a4:	ldr	r1, [pc, #236]	; 12398 <__assert_fail@plt+0x1194>
   122a8:	cmp	r3, #0
   122ac:	moveq	r2, r1
   122b0:	mov	r3, r2
   122b4:	mov	r2, #4
   122b8:	mov	r1, #1
   122bc:	add	r0, sp, #36	; 0x24
   122c0:	bl	110e4 <__sprintf_chk@plt>
   122c4:	add	r2, sp, #36	; 0x24
   122c8:	b	122d0 <__assert_fail@plt+0x10cc>
   122cc:	ldr	r2, [pc, #200]	; 1239c <__assert_fail@plt+0x1198>
   122d0:	sub	r1, r4, r8
   122d4:	ldr	r3, [sp, #80]	; 0x50
   122d8:	add	r1, r1, r3
   122dc:	ldr	r0, [pc, #188]	; 123a0 <__assert_fail@plt+0x119c>
   122e0:	bl	1806c <__assert_fail@plt+0x6e68>
   122e4:	ldrd	r2, [sp, #24]
   122e8:	subs	r2, sl, r2
   122ec:	sbc	r3, fp, r3
   122f0:	mov	sl, r2
   122f4:	mov	fp, r3
   122f8:	mov	r4, r8
   122fc:	ldrd	r2, [sp, #16]
   12300:	cmp	r7, r3
   12304:	cmpeq	r6, r2
   12308:	bls	12370 <__assert_fail@plt+0x116c>
   1230c:	subs	r6, r6, #1
   12310:	sbc	r7, r7, #0
   12314:	ldrd	r2, [sp, #8]
   12318:	mov	r0, sl
   1231c:	mov	r1, fp
   12320:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   12324:	mov	r8, r0
   12328:	ldrb	r5, [r9], #1
   1232c:	cmp	r5, #13
   12330:	ldrls	pc, [pc, r5, lsl #2]
   12334:	b	12288 <__assert_fail@plt+0x1084>
   12338:	andeq	r2, r1, ip, asr #5
   1233c:	andeq	r2, r1, r8, lsl #5
   12340:	andeq	r2, r1, r8, lsl #5
   12344:	andeq	r2, r1, r8, lsl #5
   12348:	andeq	r2, r1, r8, lsl #5
   1234c:	andeq	r2, r1, r8, lsl #5
   12350:	andeq	r2, r1, r8, lsl #5
   12354:	andeq	r2, r1, r0, asr r2
   12358:	andeq	r2, r1, r8, asr r2
   1235c:	andeq	r2, r1, r8, ror r2
   12360:	andeq	r2, r1, r8, ror #4
   12364:	andeq	r2, r1, r0, lsl #5
   12368:	andeq	r2, r1, r0, ror #4
   1236c:	andeq	r2, r1, r0, ror r2
   12370:	add	sp, sp, #44	; 0x2c
   12374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12378:	andeq	r9, r1, r4, lsr r4
   1237c:	andeq	r9, r1, r8, lsr r4
   12380:	andeq	r9, r1, ip, lsr r4
   12384:	andeq	r9, r1, r0, asr #8
   12388:	andeq	r9, r1, r4, asr #8
   1238c:	andeq	r9, r1, r8, asr #8
   12390:	andeq	r9, r1, ip, asr #8
   12394:	andeq	r9, r1, r4, lsr #8
   12398:	andeq	r9, r1, r8, lsr #8
   1239c:	andeq	r9, r1, r0, lsr r4
   123a0:	andeq	r9, r1, r0, lsr #8
   123a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123a8:	mov	sl, #1
   123ac:	ldr	r4, [pc, #244]	; 124a8 <__assert_fail@plt+0x12a4>
   123b0:	ldr	r6, [pc, #244]	; 124ac <__assert_fail@plt+0x12a8>
   123b4:	ldr	r9, [pc, #244]	; 124b0 <__assert_fail@plt+0x12ac>
   123b8:	ldr	fp, [pc, #244]	; 124b4 <__assert_fail@plt+0x12b0>
   123bc:	ldr	r8, [pc, #244]	; 124b8 <__assert_fail@plt+0x12b4>
   123c0:	ldr	r7, [pc, #244]	; 124bc <__assert_fail@plt+0x12b8>
   123c4:	b	12444 <__assert_fail@plt+0x1240>
   123c8:	mov	r1, r9
   123cc:	mov	r0, r5
   123d0:	bl	111bc <fopen64@plt>
   123d4:	str	r0, [r4, #36]	; 0x24
   123d8:	cmp	r0, #0
   123dc:	beq	12408 <__assert_fail@plt+0x1204>
   123e0:	ldr	r3, [pc, #192]	; 124a8 <__assert_fail@plt+0x12a4>
   123e4:	ldrb	r3, [r3, #41]	; 0x29
   123e8:	cmp	r3, #0
   123ec:	beq	12400 <__assert_fail@plt+0x11fc>
   123f0:	ldr	r3, [pc, #176]	; 124a8 <__assert_fail@plt+0x12a4>
   123f4:	ldrb	r3, [r3, #42]	; 0x2a
   123f8:	cmp	r3, #0
   123fc:	beq	12498 <__assert_fail@plt+0x1294>
   12400:	mov	r0, sl
   12404:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12408:	bl	110d8 <__errno_location@plt>
   1240c:	ldr	r5, [r0]
   12410:	ldr	r2, [r4, #32]
   12414:	mov	r1, #3
   12418:	mov	r0, #0
   1241c:	bl	17308 <__assert_fail@plt+0x6104>
   12420:	mov	r3, r0
   12424:	mov	r2, fp
   12428:	mov	r1, r5
   1242c:	mov	r0, #0
   12430:	bl	1103c <error@plt>
   12434:	mov	sl, #0
   12438:	ldr	r0, [r4, #36]	; 0x24
   1243c:	cmp	r0, #0
   12440:	bne	123e0 <__assert_fail@plt+0x11dc>
   12444:	ldr	r3, [r4, #28]
   12448:	ldr	r5, [r3]
   1244c:	str	r5, [r4, #32]
   12450:	cmp	r5, #0
   12454:	beq	12400 <__assert_fail@plt+0x11fc>
   12458:	add	r3, r3, #4
   1245c:	str	r3, [r4, #28]
   12460:	mov	r1, r6
   12464:	mov	r0, r5
   12468:	bl	10f34 <strcmp@plt>
   1246c:	cmp	r0, #0
   12470:	bne	123c8 <__assert_fail@plt+0x11c4>
   12474:	mov	r2, #5
   12478:	mov	r1, r8
   1247c:	bl	10fc4 <dcgettext@plt>
   12480:	str	r0, [r4, #32]
   12484:	ldr	r3, [r7]
   12488:	str	r3, [r4, #36]	; 0x24
   1248c:	mov	r3, #1
   12490:	strb	r3, [r4, #40]	; 0x28
   12494:	b	12438 <__assert_fail@plt+0x1234>
   12498:	mov	r2, #2
   1249c:	mov	r1, r3
   124a0:	bl	110fc <setvbuf@plt>
   124a4:	b	12400 <__assert_fail@plt+0x11fc>
   124a8:	muleq	r2, r0, r1
   124ac:	andeq	r9, r1, r0, asr r4
   124b0:	andeq	r9, r1, r4, ror #8
   124b4:	andeq	sl, r1, ip, asr #15
   124b8:	andeq	r9, r1, r4, asr r4
   124bc:	andeq	fp, r2, r0, lsl #3
   124c0:	push	{r4, r5, r6, lr}
   124c4:	ldr	r3, [pc, #248]	; 125c4 <__assert_fail@plt+0x13c0>
   124c8:	ldr	r5, [r3, #36]	; 0x24
   124cc:	cmp	r5, #0
   124d0:	moveq	r0, #1
   124d4:	beq	12528 <__assert_fail@plt+0x1324>
   124d8:	mov	r4, r0
   124dc:	ldr	r3, [r5]
   124e0:	and	r3, r3, #32
   124e4:	cmp	r3, #0
   124e8:	moveq	r4, #0
   124ec:	ldr	r3, [pc, #208]	; 125c4 <__assert_fail@plt+0x13c0>
   124f0:	ldr	r3, [r3, #28]
   124f4:	ldr	r1, [pc, #204]	; 125c8 <__assert_fail@plt+0x13c4>
   124f8:	ldr	r0, [r3, #-4]
   124fc:	bl	10f34 <strcmp@plt>
   12500:	cmp	r0, #0
   12504:	bne	12564 <__assert_fail@plt+0x1360>
   12508:	mov	r0, r5
   1250c:	bl	111b0 <clearerr_unlocked@plt>
   12510:	cmp	r4, #0
   12514:	moveq	r0, #1
   12518:	bne	12594 <__assert_fail@plt+0x1390>
   1251c:	mov	r2, #0
   12520:	ldr	r3, [pc, #156]	; 125c4 <__assert_fail@plt+0x13c0>
   12524:	str	r2, [r3, #36]	; 0x24
   12528:	ldr	r3, [pc, #156]	; 125cc <__assert_fail@plt+0x13c8>
   1252c:	ldr	r3, [r3]
   12530:	ldr	r3, [r3]
   12534:	tst	r3, #32
   12538:	popeq	{r4, r5, r6, pc}
   1253c:	mov	r2, #5
   12540:	ldr	r1, [pc, #136]	; 125d0 <__assert_fail@plt+0x13cc>
   12544:	mov	r0, #0
   12548:	bl	10fc4 <dcgettext@plt>
   1254c:	mov	r2, r0
   12550:	mov	r1, #0
   12554:	mov	r0, r1
   12558:	bl	1103c <error@plt>
   1255c:	mov	r0, #0
   12560:	pop	{r4, r5, r6, pc}
   12564:	mov	r0, r5
   12568:	bl	15468 <__assert_fail@plt+0x4264>
   1256c:	clz	r3, r4
   12570:	lsr	r3, r3, #5
   12574:	cmp	r0, #0
   12578:	moveq	r3, #0
   1257c:	mov	r0, r3
   12580:	cmp	r3, #0
   12584:	beq	12510 <__assert_fail@plt+0x130c>
   12588:	bl	110d8 <__errno_location@plt>
   1258c:	ldr	r4, [r0]
   12590:	b	12510 <__assert_fail@plt+0x130c>
   12594:	ldr	r3, [pc, #40]	; 125c4 <__assert_fail@plt+0x13c0>
   12598:	ldr	r2, [r3, #32]
   1259c:	mov	r1, #3
   125a0:	mov	r0, #0
   125a4:	bl	17308 <__assert_fail@plt+0x6104>
   125a8:	mov	r3, r0
   125ac:	ldr	r2, [pc, #32]	; 125d4 <__assert_fail@plt+0x13d0>
   125b0:	mov	r1, r4
   125b4:	mov	r0, #0
   125b8:	bl	1103c <error@plt>
   125bc:	mov	r0, #0
   125c0:	b	1251c <__assert_fail@plt+0x1318>
   125c4:	muleq	r2, r0, r1
   125c8:	andeq	r9, r1, r0, asr r4
   125cc:	andeq	fp, r2, r4, lsl #3
   125d0:	andeq	r9, r1, r8, ror #8
   125d4:	andeq	sl, r1, ip, asr #15
   125d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125dc:	sub	sp, sp, #8256	; 0x2040
   125e0:	sub	sp, sp, #52	; 0x34
   125e4:	mov	r6, r0
   125e8:	mov	r7, r1
   125ec:	orrs	r3, r6, r7
   125f0:	beq	127dc <__assert_fail@plt+0x15d8>
   125f4:	ldr	r3, [pc, #500]	; 127f0 <__assert_fail@plt+0x15ec>
   125f8:	ldr	r4, [r3, #36]	; 0x24
   125fc:	cmp	r4, #0
   12600:	beq	127bc <__assert_fail@plt+0x15b8>
   12604:	mov	fp, #0
   12608:	mov	sl, #1
   1260c:	mov	r5, r3
   12610:	b	126b0 <__assert_fail@plt+0x14ac>
   12614:	mov	r3, #1
   12618:	str	r3, [sp]
   1261c:	mov	r2, r6
   12620:	mov	r3, r7
   12624:	mov	r0, r4
   12628:	bl	155cc <__assert_fail@plt+0x43c8>
   1262c:	cmp	r0, #0
   12630:	movne	sl, #0
   12634:	b	127e0 <__assert_fail@plt+0x15dc>
   12638:	mov	r3, #1
   1263c:	str	r3, [sp]
   12640:	mov	r2, r6
   12644:	mov	r3, r7
   12648:	mov	r0, r4
   1264c:	bl	155cc <__assert_fail@plt+0x43c8>
   12650:	cmp	r0, #0
   12654:	beq	127e0 <__assert_fail@plt+0x15dc>
   12658:	orrs	r3, r6, r7
   1265c:	movne	r4, #8192	; 0x2000
   12660:	movne	r9, #1
   12664:	movne	r8, r4
   12668:	bne	12728 <__assert_fail@plt+0x1524>
   1266c:	b	12684 <__assert_fail@plt+0x1480>
   12670:	bl	110d8 <__errno_location@plt>
   12674:	ldr	fp, [r0]
   12678:	mov	sl, #0
   1267c:	mov	r6, #0
   12680:	mov	r7, #0
   12684:	orrs	r3, r6, r7
   12688:	beq	127e0 <__assert_fail@plt+0x15dc>
   1268c:	mov	r0, fp
   12690:	bl	124c0 <__assert_fail@plt+0x12bc>
   12694:	and	sl, sl, r0
   12698:	uxtb	sl, sl
   1269c:	bl	123a4 <__assert_fail@plt+0x11a0>
   126a0:	and	sl, sl, r0
   126a4:	ldr	r4, [r5, #36]	; 0x24
   126a8:	cmp	r4, #0
   126ac:	beq	127b4 <__assert_fail@plt+0x15b0>
   126b0:	mov	r0, r4
   126b4:	bl	11138 <fileno@plt>
   126b8:	add	r2, sp, #8
   126bc:	mov	r1, r0
   126c0:	mov	r0, #3
   126c4:	bl	10ff4 <__fxstat64@plt>
   126c8:	cmp	r0, #0
   126cc:	bne	12780 <__assert_fail@plt+0x157c>
   126d0:	ldr	r3, [sp, #24]
   126d4:	and	r3, r3, #53248	; 0xd000
   126d8:	cmp	r3, #32768	; 0x8000
   126dc:	bne	12638 <__assert_fail@plt+0x1434>
   126e0:	ldr	r2, [sp, #64]	; 0x40
   126e4:	sub	r3, r2, #1
   126e8:	cmn	r3, #-536870911	; 0xe0000001
   126ec:	movhi	r2, #512	; 0x200
   126f0:	ldrd	r0, [sp, #56]	; 0x38
   126f4:	asr	r3, r2, #31
   126f8:	cmp	r2, r0
   126fc:	sbcs	r3, r3, r1
   12700:	bge	12658 <__assert_fail@plt+0x1454>
   12704:	cmp	r1, r7
   12708:	cmpeq	r0, r6
   1270c:	bcs	12614 <__assert_fail@plt+0x1410>
   12710:	subs	r6, r6, r0
   12714:	sbc	r7, r7, r1
   12718:	b	12684 <__assert_fail@plt+0x1480>
   1271c:	mov	r4, r0
   12720:	orrs	r3, r6, r7
   12724:	beq	12684 <__assert_fail@plt+0x1480>
   12728:	mov	r3, #0
   1272c:	cmp	r3, r7
   12730:	cmpeq	r4, r6
   12734:	movhi	r4, r6
   12738:	ldr	r3, [r5, #36]	; 0x24
   1273c:	str	r3, [sp]
   12740:	mov	r3, r4
   12744:	mov	r2, r9
   12748:	mov	r1, r8
   1274c:	add	r0, sp, #112	; 0x70
   12750:	bl	11198 <__fread_unlocked_chk@plt>
   12754:	subs	r6, r6, r0
   12758:	sbc	r7, r7, #0
   1275c:	cmp	r4, r0
   12760:	beq	1271c <__assert_fail@plt+0x1518>
   12764:	ldr	r3, [r5, #36]	; 0x24
   12768:	ldr	r3, [r3]
   1276c:	tst	r3, #32
   12770:	bne	12670 <__assert_fail@plt+0x146c>
   12774:	tst	r3, #16
   12778:	beq	12720 <__assert_fail@plt+0x151c>
   1277c:	b	12684 <__assert_fail@plt+0x1480>
   12780:	bl	110d8 <__errno_location@plt>
   12784:	ldr	r4, [r0]
   12788:	ldr	r2, [r5, #32]
   1278c:	mov	r1, #3
   12790:	mov	r0, #0
   12794:	bl	17308 <__assert_fail@plt+0x6104>
   12798:	mov	r3, r0
   1279c:	ldr	r2, [pc, #80]	; 127f4 <__assert_fail@plt+0x15f0>
   127a0:	mov	r1, r4
   127a4:	mov	r0, #0
   127a8:	bl	1103c <error@plt>
   127ac:	mov	sl, #0
   127b0:	b	1268c <__assert_fail@plt+0x1488>
   127b4:	orrs	r3, r6, r7
   127b8:	beq	127e0 <__assert_fail@plt+0x15dc>
   127bc:	mov	r2, #5
   127c0:	ldr	r1, [pc, #48]	; 127f8 <__assert_fail@plt+0x15f4>
   127c4:	mov	r0, #0
   127c8:	bl	10fc4 <dcgettext@plt>
   127cc:	mov	r2, r0
   127d0:	mov	r1, #0
   127d4:	mov	r0, #1
   127d8:	bl	1103c <error@plt>
   127dc:	mov	sl, #1
   127e0:	mov	r0, sl
   127e4:	add	sp, sp, #8256	; 0x2040
   127e8:	add	sp, sp, #52	; 0x34
   127ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f0:	muleq	r2, r0, r1
   127f4:	andeq	sl, r1, ip, asr #15
   127f8:	andeq	r9, r1, r4, ror r4
   127fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12800:	subs	r7, r0, #0
   12804:	beq	128a0 <__assert_fail@plt+0x169c>
   12808:	mov	r8, r1
   1280c:	mov	r4, r2
   12810:	ldr	r3, [pc, #164]	; 128bc <__assert_fail@plt+0x16b8>
   12814:	ldr	r3, [r3, #44]	; 0x2c
   12818:	cmp	r7, r3
   1281c:	bhi	128a0 <__assert_fail@plt+0x169c>
   12820:	mov	r3, #0
   12824:	str	r3, [r2]
   12828:	ldr	r3, [pc, #140]	; 128bc <__assert_fail@plt+0x16b8>
   1282c:	ldr	r3, [r3, #36]	; 0x24
   12830:	cmp	r3, #0
   12834:	beq	128b4 <__assert_fail@plt+0x16b0>
   12838:	mov	r6, #1
   1283c:	mov	r9, r6
   12840:	ldr	sl, [pc, #116]	; 128bc <__assert_fail@plt+0x16b8>
   12844:	ldr	r0, [r4]
   12848:	sub	r5, r7, r0
   1284c:	mov	r2, r5
   12850:	mov	r1, r9
   12854:	add	r0, r8, r0
   12858:	bl	111d4 <fread_unlocked@plt>
   1285c:	ldr	r3, [r4]
   12860:	add	r3, r3, r0
   12864:	str	r3, [r4]
   12868:	cmp	r5, r0
   1286c:	beq	12898 <__assert_fail@plt+0x1694>
   12870:	bl	110d8 <__errno_location@plt>
   12874:	ldr	r0, [r0]
   12878:	bl	124c0 <__assert_fail@plt+0x12bc>
   1287c:	mov	r5, r0
   12880:	bl	123a4 <__assert_fail@plt+0x11a0>
   12884:	and	r0, r0, r5
   12888:	and	r6, r6, r0
   1288c:	ldr	r3, [sl, #36]	; 0x24
   12890:	cmp	r3, #0
   12894:	bne	12844 <__assert_fail@plt+0x1640>
   12898:	mov	r0, r6
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128a0:	ldr	r3, [pc, #24]	; 128c0 <__assert_fail@plt+0x16bc>
   128a4:	ldr	r2, [pc, #24]	; 128c4 <__assert_fail@plt+0x16c0>
   128a8:	ldr	r1, [pc, #24]	; 128c8 <__assert_fail@plt+0x16c4>
   128ac:	ldr	r0, [pc, #24]	; 128cc <__assert_fail@plt+0x16c8>
   128b0:	bl	11204 <__assert_fail@plt>
   128b4:	mov	r6, #1
   128b8:	b	12898 <__assert_fail@plt+0x1694>
   128bc:	muleq	r2, r0, r1
   128c0:	andeq	r9, r1, ip, ror #2
   128c4:	andeq	r0, r0, sp, lsl #10
   128c8:	muleq	r1, ip, r4
   128cc:	andeq	r9, r1, r8, lsr #9
   128d0:	push	{r4, r5, r6, r7, r8, lr}
   128d4:	mov	r6, r0
   128d8:	mvn	r3, #0
   128dc:	str	r3, [r0]
   128e0:	ldr	r3, [pc, #88]	; 12940 <__assert_fail@plt+0x173c>
   128e4:	ldr	r0, [r3, #36]	; 0x24
   128e8:	cmp	r0, #0
   128ec:	beq	12938 <__assert_fail@plt+0x1734>
   128f0:	mov	r5, #1
   128f4:	mov	r7, r3
   128f8:	bl	11114 <fgetc@plt>
   128fc:	str	r0, [r6]
   12900:	cmn	r0, #1
   12904:	bne	12930 <__assert_fail@plt+0x172c>
   12908:	bl	110d8 <__errno_location@plt>
   1290c:	ldr	r0, [r0]
   12910:	bl	124c0 <__assert_fail@plt+0x12bc>
   12914:	mov	r4, r0
   12918:	bl	123a4 <__assert_fail@plt+0x11a0>
   1291c:	and	r0, r0, r4
   12920:	and	r5, r5, r0
   12924:	ldr	r0, [r7, #36]	; 0x24
   12928:	cmp	r0, #0
   1292c:	bne	128f8 <__assert_fail@plt+0x16f4>
   12930:	mov	r0, r5
   12934:	pop	{r4, r5, r6, r7, r8, pc}
   12938:	mov	r5, #1
   1293c:	b	12930 <__assert_fail@plt+0x172c>
   12940:	muleq	r2, r0, r1
   12944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12948:	sub	sp, sp, #28
   1294c:	strd	r0, [sp, #16]
   12950:	mov	fp, r2
   12954:	ldr	r2, [pc, #616]	; 12bc4 <__assert_fail@plt+0x19c0>
   12958:	ldrb	r2, [r2]
   1295c:	cmp	r2, #0
   12960:	beq	12984 <__assert_fail@plt+0x1780>
   12964:	ldr	r2, [pc, #600]	; 12bc4 <__assert_fail@plt+0x19c0>
   12968:	ldrb	r2, [r2, #1]
   1296c:	cmp	r2, #0
   12970:	bne	12984 <__assert_fail@plt+0x1780>
   12974:	ldr	r2, [pc, #588]	; 12bc8 <__assert_fail@plt+0x19c4>
   12978:	ldr	r2, [r2, #44]	; 0x2c
   1297c:	cmp	r2, fp
   12980:	beq	129b0 <__assert_fail@plt+0x17ac>
   12984:	ldr	r3, [pc, #572]	; 12bc8 <__assert_fail@plt+0x19c4>
   12988:	mov	r2, #0
   1298c:	strb	r2, [r3, #48]	; 0x30
   12990:	ldr	r3, [r3]
   12994:	cmp	r3, r2
   12998:	beq	129d4 <__assert_fail@plt+0x17d0>
   1299c:	mov	r6, r2
   129a0:	ldr	r5, [pc, #544]	; 12bc8 <__assert_fail@plt+0x19c4>
   129a4:	ldr	sl, [pc, #544]	; 12bcc <__assert_fail@plt+0x19c8>
   129a8:	ldr	r7, [pc, #544]	; 12bd0 <__assert_fail@plt+0x19cc>
   129ac:	b	12a8c <__assert_fail@plt+0x1888>
   129b0:	ldr	r1, [sp, #64]	; 0x40
   129b4:	mov	r0, r3
   129b8:	bl	10fac <memcmp@plt>
   129bc:	cmp	r0, #0
   129c0:	bne	12984 <__assert_fail@plt+0x1780>
   129c4:	ldr	r3, [pc, #508]	; 12bc8 <__assert_fail@plt+0x19c4>
   129c8:	ldrb	r3, [r3, #48]	; 0x30
   129cc:	cmp	r3, #0
   129d0:	beq	129e8 <__assert_fail@plt+0x17e4>
   129d4:	mov	r2, #0
   129d8:	ldr	r3, [pc, #484]	; 12bc4 <__assert_fail@plt+0x19c0>
   129dc:	strb	r2, [r3, #1]
   129e0:	add	sp, sp, #28
   129e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e8:	ldr	r0, [pc, #484]	; 12bd4 <__assert_fail@plt+0x19d0>
   129ec:	bl	11054 <puts@plt>
   129f0:	mov	r2, #1
   129f4:	ldr	r3, [pc, #460]	; 12bc8 <__assert_fail@plt+0x19c4>
   129f8:	strb	r2, [r3, #48]	; 0x30
   129fc:	b	129d4 <__assert_fail@plt+0x17d0>
   12a00:	ldr	r3, [pc, #464]	; 12bd8 <__assert_fail@plt+0x19d4>
   12a04:	ldr	r2, [r5, #8]
   12a08:	ldr	r1, [pc, #460]	; 12bdc <__assert_fail@plt+0x19d8>
   12a0c:	mov	r0, #1
   12a10:	bl	11120 <__printf_chk@plt>
   12a14:	ldr	r3, [r5, #4]
   12a18:	add	r3, r3, r4
   12a1c:	ldr	r2, [r3, #28]
   12a20:	str	r2, [sp, #4]
   12a24:	ldr	r2, [r3, #24]
   12a28:	str	r2, [sp]
   12a2c:	ldr	r9, [r3, #8]
   12a30:	add	r3, r3, #12
   12a34:	ldr	r2, [sp, #64]	; 0x40
   12a38:	mov	r1, r8
   12a3c:	ldr	r0, [sp, #12]
   12a40:	blx	r9
   12a44:	ldr	r3, [r5, #4]
   12a48:	add	r4, r3, r4
   12a4c:	ldrb	r3, [r4, #21]
   12a50:	cmp	r3, #0
   12a54:	bne	12ae0 <__assert_fail@plt+0x18dc>
   12a58:	ldr	r0, [r7]
   12a5c:	ldr	r3, [r0, #20]
   12a60:	ldr	r2, [r0, #24]
   12a64:	cmp	r3, r2
   12a68:	addcc	r2, r3, #1
   12a6c:	strcc	r2, [r0, #20]
   12a70:	movcc	r2, #10
   12a74:	strbcc	r2, [r3]
   12a78:	bcs	12bb8 <__assert_fail@plt+0x19b4>
   12a7c:	add	r6, r6, #1
   12a80:	ldr	r3, [r5]
   12a84:	cmp	r3, r6
   12a88:	bls	129d4 <__assert_fail@plt+0x17d0>
   12a8c:	lsl	r4, r6, #5
   12a90:	ldr	r8, [r5, #44]	; 0x2c
   12a94:	ldr	r3, [r5, #4]
   12a98:	add	r3, r3, r4
   12a9c:	ldr	r3, [r3, #4]
   12aa0:	ldr	r9, [sl, r3, lsl #2]
   12aa4:	mov	r1, r9
   12aa8:	mov	r0, r8
   12aac:	bl	18a7c <__assert_fail@plt+0x7878>
   12ab0:	str	r0, [sp, #12]
   12ab4:	mov	r1, r9
   12ab8:	sub	r0, r8, fp
   12abc:	bl	18a7c <__assert_fail@plt+0x7878>
   12ac0:	mov	r8, r0
   12ac4:	cmp	r6, #0
   12ac8:	bne	12a00 <__assert_fail@plt+0x17fc>
   12acc:	ldr	r3, [r5, #52]	; 0x34
   12ad0:	mov	r2, #0
   12ad4:	ldrd	r0, [sp, #16]
   12ad8:	blx	r3
   12adc:	b	12a14 <__assert_fail@plt+0x1810>
   12ae0:	ldr	r0, [r4, #28]
   12ae4:	ldr	r1, [sp, #12]
   12ae8:	mul	r0, r0, r8
   12aec:	bl	18c88 <__assert_fail@plt+0x7a84>
   12af0:	ldr	r2, [r4, #24]
   12af4:	ldr	r3, [pc, #220]	; 12bd8 <__assert_fail@plt+0x19d4>
   12af8:	mla	r2, r2, r8, r0
   12afc:	ldr	r1, [pc, #216]	; 12bdc <__assert_fail@plt+0x19d8>
   12b00:	mov	r0, #1
   12b04:	bl	11120 <__printf_chk@plt>
   12b08:	ldr	r3, [r7]
   12b0c:	mov	r2, #3
   12b10:	mov	r1, #1
   12b14:	ldr	r0, [pc, #196]	; 12be0 <__assert_fail@plt+0x19dc>
   12b18:	bl	10fa0 <fwrite_unlocked@plt>
   12b1c:	cmp	fp, #0
   12b20:	beq	12b88 <__assert_fail@plt+0x1984>
   12b24:	bl	110a8 <__ctype_b_loc@plt>
   12b28:	mov	r9, r0
   12b2c:	ldr	r3, [sp, #64]	; 0x40
   12b30:	add	r8, r3, fp
   12b34:	mov	r4, r3
   12b38:	b	12b44 <__assert_fail@plt+0x1940>
   12b3c:	cmp	r8, r4
   12b40:	beq	12b88 <__assert_fail@plt+0x1984>
   12b44:	ldrb	r1, [r4], #1
   12b48:	ldr	r2, [r9]
   12b4c:	lsl	r3, r1, #1
   12b50:	ldrh	r3, [r2, r3]
   12b54:	and	r3, r3, #16384	; 0x4000
   12b58:	cmp	r3, #0
   12b5c:	moveq	r1, #46	; 0x2e
   12b60:	ldr	r0, [r7]
   12b64:	ldr	r3, [r0, #20]
   12b68:	ldr	r2, [r0, #24]
   12b6c:	cmp	r3, r2
   12b70:	addcc	r2, r3, #1
   12b74:	strcc	r2, [r0, #20]
   12b78:	strbcc	r1, [r3]
   12b7c:	bcc	12b3c <__assert_fail@plt+0x1938>
   12b80:	bl	11168 <__overflow@plt>
   12b84:	b	12b3c <__assert_fail@plt+0x1938>
   12b88:	ldr	r0, [r7]
   12b8c:	ldr	r3, [r0, #20]
   12b90:	ldr	r2, [r0, #24]
   12b94:	cmp	r3, r2
   12b98:	addcc	r2, r3, #1
   12b9c:	strcc	r2, [r0, #20]
   12ba0:	movcc	r2, #60	; 0x3c
   12ba4:	strbcc	r2, [r3]
   12ba8:	bcc	12a58 <__assert_fail@plt+0x1854>
   12bac:	mov	r1, #60	; 0x3c
   12bb0:	bl	11168 <__overflow@plt>
   12bb4:	b	12a58 <__assert_fail@plt+0x1854>
   12bb8:	mov	r1, #10
   12bbc:	bl	11168 <__overflow@plt>
   12bc0:	b	12a7c <__assert_fail@plt+0x1878>
   12bc4:	andeq	fp, r2, r8, lsl r1
   12bc8:	muleq	r2, r0, r1
   12bcc:	andeq	r9, r1, r4, asr #1
   12bd0:	andeq	fp, r2, r4, lsl #3
   12bd4:	andeq	r9, r1, r8, asr #9
   12bd8:	andeq	sl, r1, r8, lsl #3
   12bdc:	andeq	r9, r1, r0, lsr #8
   12be0:	andeq	r9, r1, ip, asr #9
   12be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be8:	sub	sp, sp, #28
   12bec:	subs	r3, r0, #0
   12bf0:	str	r3, [sp, #16]
   12bf4:	beq	12c1c <__assert_fail@plt+0x1a18>
   12bf8:	ldrb	r3, [r3]
   12bfc:	cmp	r3, #0
   12c00:	moveq	r0, #1
   12c04:	beq	13254 <__assert_fail@plt+0x2050>
   12c08:	ldr	fp, [sp, #16]
   12c0c:	ldr	r4, [pc, #1828]	; 13338 <__assert_fail@plt+0x2134>
   12c10:	add	r3, r4, #56	; 0x38
   12c14:	str	r3, [sp, #20]
   12c18:	b	13168 <__assert_fail@plt+0x1f64>
   12c1c:	ldr	r3, [pc, #1816]	; 1333c <__assert_fail@plt+0x2138>
   12c20:	ldr	r2, [pc, #1816]	; 13340 <__assert_fail@plt+0x213c>
   12c24:	ldr	r1, [pc, #1816]	; 13344 <__assert_fail@plt+0x2140>
   12c28:	ldr	r0, [pc, #1816]	; 13348 <__assert_fail@plt+0x2144>
   12c2c:	bl	11204 <__assert_fail@plt>
   12c30:	mov	r2, #32
   12c34:	ldr	r1, [sp, #20]
   12c38:	ldr	r0, [r4, #4]
   12c3c:	bl	17b30 <__assert_fail@plt+0x692c>
   12c40:	str	r0, [r4, #4]
   12c44:	b	13178 <__assert_fail@plt+0x1f74>
   12c48:	ldr	r3, [pc, #1788]	; 1334c <__assert_fail@plt+0x2148>
   12c4c:	mov	r2, #648	; 0x288
   12c50:	ldr	r1, [pc, #1772]	; 13344 <__assert_fail@plt+0x2140>
   12c54:	ldr	r0, [pc, #1780]	; 13350 <__assert_fail@plt+0x214c>
   12c58:	bl	11204 <__assert_fail@plt>
   12c5c:	ldrb	r3, [fp, #1]
   12c60:	sub	r2, r3, #67	; 0x43
   12c64:	cmp	r2, #16
   12c68:	ldrls	pc, [pc, r2, lsl #2]
   12c6c:	b	12cb4 <__assert_fail@plt+0x1ab0>
   12c70:	andeq	r2, r1, r8, lsr sp
   12c74:			; <UNDEFINED> instruction: 0x00012cb4
   12c78:			; <UNDEFINED> instruction: 0x00012cb4
   12c7c:			; <UNDEFINED> instruction: 0x00012cb4
   12c80:			; <UNDEFINED> instruction: 0x00012cb4
   12c84:			; <UNDEFINED> instruction: 0x00012cb4
   12c88:			; <UNDEFINED> instruction: 0x00012db8
   12c8c:			; <UNDEFINED> instruction: 0x00012cb4
   12c90:			; <UNDEFINED> instruction: 0x00012cb4
   12c94:	andeq	r2, r1, r4, asr #27
   12c98:			; <UNDEFINED> instruction: 0x00012cb4
   12c9c:			; <UNDEFINED> instruction: 0x00012cb4
   12ca0:			; <UNDEFINED> instruction: 0x00012cb4
   12ca4:			; <UNDEFINED> instruction: 0x00012cb4
   12ca8:			; <UNDEFINED> instruction: 0x00012cb4
   12cac:			; <UNDEFINED> instruction: 0x00012cb4
   12cb0:	andeq	r2, r1, ip, lsr #27
   12cb4:	add	r0, fp, #1
   12cb8:	sub	r2, r3, #48	; 0x30
   12cbc:	cmp	r2, #9
   12cc0:	bhi	12dd0 <__assert_fail@plt+0x1bcc>
   12cc4:	mov	r3, r2
   12cc8:	add	ip, fp, #2
   12ccc:	mov	sl, #0
   12cd0:	mov	r5, ip
   12cd4:	add	sl, sl, sl, lsl #2
   12cd8:	add	sl, r3, sl, lsl #1
   12cdc:	ldrb	r3, [ip], #1
   12ce0:	sub	r2, r3, #48	; 0x30
   12ce4:	cmp	r2, #9
   12ce8:	bhi	13288 <__assert_fail@plt+0x2084>
   12cec:	sub	r3, r3, #48	; 0x30
   12cf0:	mvn	r2, r3
   12cf4:	ldr	lr, [pc, #1624]	; 13354 <__assert_fail@plt+0x2150>
   12cf8:	umull	lr, r2, lr, r2
   12cfc:	cmp	sl, r2, lsr #3
   12d00:	bls	12cd0 <__assert_fail@plt+0x1acc>
   12d04:	mov	r2, #5
   12d08:	ldr	r1, [pc, #1608]	; 13358 <__assert_fail@plt+0x2154>
   12d0c:	mov	r0, #0
   12d10:	bl	10fc4 <dcgettext@plt>
   12d14:	mov	r4, r0
   12d18:	ldr	r0, [sp, #16]
   12d1c:	bl	17470 <__assert_fail@plt+0x626c>
   12d20:	mov	r3, r0
   12d24:	mov	r2, r4
   12d28:	mov	r1, #0
   12d2c:	mov	r0, r1
   12d30:	bl	1103c <error@plt>
   12d34:	b	13250 <__assert_fail@plt+0x204c>
   12d38:	add	r5, fp, #2
   12d3c:	mov	sl, #1
   12d40:	add	r3, r4, sl, lsl #2
   12d44:	ldr	r9, [r3, #60]	; 0x3c
   12d48:	sub	r1, r1, #100	; 0x64
   12d4c:	cmp	r1, #20
   12d50:	ldrls	pc, [pc, r1, lsl #2]
   12d54:	b	12f5c <__assert_fail@plt+0x1d58>
   12d58:	andeq	r2, r1, r4, ror #27
   12d5c:	andeq	r2, r1, ip, asr pc
   12d60:	andeq	r2, r1, ip, asr pc
   12d64:	andeq	r2, r1, ip, asr pc
   12d68:	andeq	r2, r1, ip, asr pc
   12d6c:	andeq	r2, r1, ip, asr pc
   12d70:	andeq	r2, r1, ip, asr pc
   12d74:	andeq	r2, r1, ip, asr pc
   12d78:	andeq	r2, r1, ip, asr pc
   12d7c:	andeq	r2, r1, ip, asr pc
   12d80:	andeq	r2, r1, ip, asr pc
   12d84:	andeq	r2, r1, r4, ror #28
   12d88:	andeq	r2, r1, ip, asr pc
   12d8c:	andeq	r2, r1, ip, asr pc
   12d90:	andeq	r2, r1, ip, asr pc
   12d94:	andeq	r2, r1, ip, asr pc
   12d98:	andeq	r2, r1, ip, asr pc
   12d9c:			; <UNDEFINED> instruction: 0x00012eb8
   12da0:	andeq	r2, r1, ip, asr pc
   12da4:	andeq	r2, r1, ip, asr pc
   12da8:	andeq	r2, r1, r8, lsl #30
   12dac:	add	r5, fp, #2
   12db0:	mov	sl, #2
   12db4:	b	12d40 <__assert_fail@plt+0x1b3c>
   12db8:	add	r5, fp, #2
   12dbc:	mov	sl, #4
   12dc0:	b	12d40 <__assert_fail@plt+0x1b3c>
   12dc4:	add	r5, fp, #2
   12dc8:	mov	sl, #4
   12dcc:	b	12d40 <__assert_fail@plt+0x1b3c>
   12dd0:	mov	r5, r0
   12dd4:	mov	sl, #4
   12dd8:	b	12d40 <__assert_fail@plt+0x1b3c>
   12ddc:	mov	sl, #4
   12de0:	b	12d40 <__assert_fail@plt+0x1b3c>
   12de4:	ldr	r3, [pc, #1392]	; 1335c <__assert_fail@plt+0x2158>
   12de8:	add	sl, r3, sl, lsl #2
   12dec:	ldr	sl, [sl, #224]	; 0xe0
   12df0:	add	r0, r6, #12
   12df4:	cmp	r9, #5
   12df8:	beq	12e5c <__assert_fail@plt+0x1c58>
   12dfc:	ldr	r2, [pc, #1372]	; 13360 <__assert_fail@plt+0x215c>
   12e00:	ldr	r3, [pc, #1372]	; 13364 <__assert_fail@plt+0x2160>
   12e04:	cmp	r9, #4
   12e08:	movne	r3, r2
   12e0c:	str	r3, [sp]
   12e10:	ldr	r3, [pc, #1360]	; 13368 <__assert_fail@plt+0x2164>
   12e14:	mov	r2, #9
   12e18:	mov	r1, #1
   12e1c:	bl	110e4 <__sprintf_chk@plt>
   12e20:	mov	r3, #0
   12e24:	str	r3, [sp, #12]
   12e28:	add	r0, r6, #12
   12e2c:	bl	110c0 <strlen@plt>
   12e30:	cmp	r0, #8
   12e34:	bhi	12f60 <__assert_fail@plt+0x1d5c>
   12e38:	sub	r3, r9, #1
   12e3c:	cmp	r3, #4
   12e40:	ldrls	pc, [pc, r3, lsl #2]
   12e44:	b	12fac <__assert_fail@plt+0x1da8>
   12e48:	andeq	r2, r1, ip, ror pc
   12e4c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12e50:	andeq	r3, r1, ip, asr r2
   12e54:	andeq	r2, r1, r4, ror pc
   12e58:	andeq	r3, r1, r4, ror #4
   12e5c:	ldr	r3, [pc, #1288]	; 1336c <__assert_fail@plt+0x2168>
   12e60:	b	12e0c <__assert_fail@plt+0x1c08>
   12e64:	add	r0, r6, #12
   12e68:	ldr	r3, [pc, #1260]	; 1335c <__assert_fail@plt+0x2158>
   12e6c:	add	sl, r3, sl, lsl #2
   12e70:	ldr	sl, [sl, #292]	; 0x124
   12e74:	cmp	r9, #5
   12e78:	beq	12eb0 <__assert_fail@plt+0x1cac>
   12e7c:	ldr	r2, [pc, #1260]	; 13370 <__assert_fail@plt+0x216c>
   12e80:	ldr	r3, [pc, #1260]	; 13374 <__assert_fail@plt+0x2170>
   12e84:	cmp	r9, #4
   12e88:	movne	r3, r2
   12e8c:	str	r3, [sp, #4]
   12e90:	str	sl, [sp]
   12e94:	ldr	r3, [pc, #1244]	; 13378 <__assert_fail@plt+0x2174>
   12e98:	mov	r2, #9
   12e9c:	mov	r1, #1
   12ea0:	bl	110e4 <__sprintf_chk@plt>
   12ea4:	mov	r3, #2
   12ea8:	str	r3, [sp, #12]
   12eac:	b	12e28 <__assert_fail@plt+0x1c24>
   12eb0:	ldr	r3, [pc, #1220]	; 1337c <__assert_fail@plt+0x2178>
   12eb4:	b	12e8c <__assert_fail@plt+0x1c88>
   12eb8:	ldr	r3, [pc, #1180]	; 1335c <__assert_fail@plt+0x2158>
   12ebc:	add	sl, r3, sl, lsl #2
   12ec0:	ldr	sl, [sl, #360]	; 0x168
   12ec4:	add	r0, r6, #12
   12ec8:	cmp	r9, #5
   12ecc:	beq	12f00 <__assert_fail@plt+0x1cfc>
   12ed0:	ldr	r2, [pc, #1192]	; 13380 <__assert_fail@plt+0x217c>
   12ed4:	ldr	r3, [pc, #1192]	; 13384 <__assert_fail@plt+0x2180>
   12ed8:	cmp	r9, #4
   12edc:	movne	r3, r2
   12ee0:	str	r3, [sp]
   12ee4:	ldr	r3, [pc, #1148]	; 13368 <__assert_fail@plt+0x2164>
   12ee8:	mov	r2, #9
   12eec:	mov	r1, #1
   12ef0:	bl	110e4 <__sprintf_chk@plt>
   12ef4:	mov	r3, #1
   12ef8:	str	r3, [sp, #12]
   12efc:	b	12e28 <__assert_fail@plt+0x1c24>
   12f00:	ldr	r3, [pc, #1152]	; 13388 <__assert_fail@plt+0x2184>
   12f04:	b	12ee0 <__assert_fail@plt+0x1cdc>
   12f08:	add	r0, r6, #12
   12f0c:	ldr	r3, [pc, #1096]	; 1335c <__assert_fail@plt+0x2158>
   12f10:	add	sl, r3, sl, lsl #2
   12f14:	ldr	sl, [sl, #428]	; 0x1ac
   12f18:	cmp	r9, #5
   12f1c:	beq	12f54 <__assert_fail@plt+0x1d50>
   12f20:	ldr	r2, [pc, #1124]	; 1338c <__assert_fail@plt+0x2188>
   12f24:	ldr	r3, [pc, #1124]	; 13390 <__assert_fail@plt+0x218c>
   12f28:	cmp	r9, #4
   12f2c:	movne	r3, r2
   12f30:	str	r3, [sp, #4]
   12f34:	str	sl, [sp]
   12f38:	ldr	r3, [pc, #1080]	; 13378 <__assert_fail@plt+0x2174>
   12f3c:	mov	r2, #9
   12f40:	mov	r1, #1
   12f44:	bl	110e4 <__sprintf_chk@plt>
   12f48:	mov	r3, #3
   12f4c:	str	r3, [sp, #12]
   12f50:	b	12e28 <__assert_fail@plt+0x1c24>
   12f54:	ldr	r3, [pc, #1080]	; 13394 <__assert_fail@plt+0x2190>
   12f58:	b	12f30 <__assert_fail@plt+0x1d2c>
   12f5c:	bl	111ec <abort@plt>
   12f60:	ldr	r3, [pc, #996]	; 1334c <__assert_fail@plt+0x2148>
   12f64:	ldr	r2, [pc, #1068]	; 13398 <__assert_fail@plt+0x2194>
   12f68:	ldr	r1, [pc, #980]	; 13344 <__assert_fail@plt+0x2140>
   12f6c:	ldr	r0, [pc, #1064]	; 1339c <__assert_fail@plt+0x2198>
   12f70:	bl	11204 <__assert_fail@plt>
   12f74:	ldr	r3, [pc, #1060]	; 133a0 <__assert_fail@plt+0x219c>
   12f78:	b	13118 <__assert_fail@plt+0x1f14>
   12f7c:	ldr	r2, [pc, #1056]	; 133a4 <__assert_fail@plt+0x21a0>
   12f80:	ldr	r3, [pc, #1056]	; 133a8 <__assert_fail@plt+0x21a4>
   12f84:	ldr	r1, [sp, #12]
   12f88:	cmp	r1, #0
   12f8c:	movne	r3, r2
   12f90:	b	13118 <__assert_fail@plt+0x1f14>
   12f94:	ldr	r2, [pc, #1040]	; 133ac <__assert_fail@plt+0x21a8>
   12f98:	ldr	r3, [pc, #1040]	; 133b0 <__assert_fail@plt+0x21ac>
   12f9c:	ldr	r1, [sp, #12]
   12fa0:	cmp	r1, #0
   12fa4:	movne	r3, r2
   12fa8:	b	13118 <__assert_fail@plt+0x1f14>
   12fac:	bl	111ec <abort@plt>
   12fb0:	ldrb	r3, [fp, #1]
   12fb4:	cmp	r3, #70	; 0x46
   12fb8:	beq	13050 <__assert_fail@plt+0x1e4c>
   12fbc:	cmp	r3, #76	; 0x4c
   12fc0:	beq	130a4 <__assert_fail@plt+0x1ea0>
   12fc4:	cmp	r3, #68	; 0x44
   12fc8:	beq	13098 <__assert_fail@plt+0x1e94>
   12fcc:	add	r0, fp, #1
   12fd0:	sub	r2, r3, #48	; 0x30
   12fd4:	cmp	r2, #9
   12fd8:	bhi	130b0 <__assert_fail@plt+0x1eac>
   12fdc:	mov	r3, r2
   12fe0:	add	r1, fp, #2
   12fe4:	mov	r9, #0
   12fe8:	mov	r5, r1
   12fec:	add	r9, r9, r9, lsl #2
   12ff0:	add	r9, r3, r9, lsl #1
   12ff4:	ldrb	r3, [r1], #1
   12ff8:	sub	r2, r3, #48	; 0x30
   12ffc:	cmp	r2, #9
   13000:	bhi	132e0 <__assert_fail@plt+0x20dc>
   13004:	sub	r3, r3, #48	; 0x30
   13008:	mvn	r2, r3
   1300c:	ldr	ip, [pc, #832]	; 13354 <__assert_fail@plt+0x2150>
   13010:	umull	ip, r2, ip, r2
   13014:	cmp	r9, r2, lsr #3
   13018:	bls	12fe8 <__assert_fail@plt+0x1de4>
   1301c:	mov	r2, #5
   13020:	ldr	r1, [pc, #816]	; 13358 <__assert_fail@plt+0x2154>
   13024:	mov	r0, #0
   13028:	bl	10fc4 <dcgettext@plt>
   1302c:	mov	r4, r0
   13030:	ldr	r0, [sp, #16]
   13034:	bl	17470 <__assert_fail@plt+0x626c>
   13038:	mov	r3, r0
   1303c:	mov	r2, r4
   13040:	mov	r1, #0
   13044:	mov	r0, r1
   13048:	bl	1103c <error@plt>
   1304c:	b	13250 <__assert_fail@plt+0x204c>
   13050:	add	r5, fp, #2
   13054:	mov	r9, #4
   13058:	add	r9, r4, r9, lsl #2
   1305c:	ldr	r9, [r9, #96]	; 0x60
   13060:	bl	111a4 <localeconv@plt>
   13064:	ldr	r0, [r0]
   13068:	ldrb	r3, [r0]
   1306c:	cmp	r3, #0
   13070:	moveq	r0, #1
   13074:	beq	1307c <__assert_fail@plt+0x1e78>
   13078:	bl	110c0 <strlen@plt>
   1307c:	cmp	r9, #7
   13080:	beq	130d8 <__assert_fail@plt+0x1ed4>
   13084:	cmp	r9, #8
   13088:	beq	130ec <__assert_fail@plt+0x1ee8>
   1308c:	cmp	r9, #6
   13090:	beq	130c4 <__assert_fail@plt+0x1ec0>
   13094:	bl	111ec <abort@plt>
   13098:	add	r5, fp, #2
   1309c:	mov	r9, #8
   130a0:	b	13058 <__assert_fail@plt+0x1e54>
   130a4:	add	r5, fp, #2
   130a8:	mov	r9, #8
   130ac:	b	13058 <__assert_fail@plt+0x1e54>
   130b0:	mov	r5, r0
   130b4:	mov	r9, #8
   130b8:	b	13058 <__assert_fail@plt+0x1e54>
   130bc:	mov	r9, #8
   130c0:	b	13058 <__assert_fail@plt+0x1e54>
   130c4:	add	sl, r0, #14
   130c8:	ldr	r3, [pc, #740]	; 133b4 <__assert_fail@plt+0x21b0>
   130cc:	mov	r2, #4
   130d0:	str	r2, [sp, #12]
   130d4:	b	13118 <__assert_fail@plt+0x1f14>
   130d8:	add	sl, r0, #23
   130dc:	ldr	r3, [pc, #724]	; 133b8 <__assert_fail@plt+0x21b4>
   130e0:	mov	r2, #4
   130e4:	str	r2, [sp, #12]
   130e8:	b	13118 <__assert_fail@plt+0x1f14>
   130ec:	add	sl, r0, #23
   130f0:	ldr	r3, [pc, #708]	; 133bc <__assert_fail@plt+0x21b8>
   130f4:	mov	r2, #4
   130f8:	str	r2, [sp, #12]
   130fc:	b	13118 <__assert_fail@plt+0x1f14>
   13100:	add	r5, fp, #1
   13104:	mov	sl, #3
   13108:	ldr	r3, [pc, #688]	; 133c0 <__assert_fail@plt+0x21bc>
   1310c:	mov	r2, #5
   13110:	str	r2, [sp, #12]
   13114:	mov	r9, #1
   13118:	str	r9, [r6, #4]
   1311c:	ldr	r2, [sp, #12]
   13120:	str	r2, [r8, r7, lsl #5]
   13124:	str	r3, [r6, #8]
   13128:	str	sl, [r6, #24]
   1312c:	ldrb	r3, [r5]
   13130:	cmp	r3, #122	; 0x7a
   13134:	moveq	r3, #1
   13138:	movne	r3, #0
   1313c:	strb	r3, [r6, #21]
   13140:	addeq	r5, r5, #1
   13144:	cmp	r5, fp
   13148:	beq	1326c <__assert_fail@plt+0x2068>
   1314c:	ldr	r3, [r4]
   13150:	add	r3, r3, #1
   13154:	str	r3, [r4]
   13158:	mov	fp, r5
   1315c:	ldrb	r3, [r5]
   13160:	cmp	r3, #0
   13164:	beq	13280 <__assert_fail@plt+0x207c>
   13168:	ldr	r2, [r4, #56]	; 0x38
   1316c:	ldr	r3, [r4]
   13170:	cmp	r2, r3
   13174:	bls	12c30 <__assert_fail@plt+0x1a2c>
   13178:	ldr	r7, [r4]
   1317c:	ldr	r8, [r4, #4]
   13180:	adds	r6, r8, r7, lsl #5
   13184:	beq	12c48 <__assert_fail@plt+0x1a44>
   13188:	ldrb	r1, [fp]
   1318c:	sub	r3, r1, #97	; 0x61
   13190:	cmp	r3, #23
   13194:	ldrls	pc, [pc, r3, lsl #2]
   13198:	b	13218 <__assert_fail@plt+0x2014>
   1319c:	andeq	r3, r1, r0, lsl #2
   131a0:	andeq	r3, r1, r8, lsl r2
   131a4:	strdeq	r3, [r1], -ip
   131a8:	andeq	r2, r1, ip, asr ip
   131ac:	andeq	r3, r1, r8, lsl r2
   131b0:			; <UNDEFINED> instruction: 0x00012fb0
   131b4:	andeq	r3, r1, r8, lsl r2
   131b8:	andeq	r3, r1, r8, lsl r2
   131bc:	andeq	r3, r1, r8, lsl r2
   131c0:	andeq	r3, r1, r8, lsl r2
   131c4:	andeq	r3, r1, r8, lsl r2
   131c8:	andeq	r3, r1, r8, lsl r2
   131cc:	andeq	r3, r1, r8, lsl r2
   131d0:	andeq	r3, r1, r8, lsl r2
   131d4:	andeq	r2, r1, ip, asr ip
   131d8:	andeq	r3, r1, r8, lsl r2
   131dc:	andeq	r3, r1, r8, lsl r2
   131e0:	andeq	r3, r1, r8, lsl r2
   131e4:	andeq	r3, r1, r8, lsl r2
   131e8:	andeq	r3, r1, r8, lsl r2
   131ec:	andeq	r2, r1, ip, asr ip
   131f0:	andeq	r3, r1, r8, lsl r2
   131f4:	andeq	r3, r1, r8, lsl r2
   131f8:	andeq	r2, r1, ip, asr ip
   131fc:	add	r5, fp, #1
   13200:	mov	sl, #3
   13204:	ldr	r3, [pc, #440]	; 133c4 <__assert_fail@plt+0x21c0>
   13208:	mov	r2, #6
   1320c:	str	r2, [sp, #12]
   13210:	mov	r9, #1
   13214:	b	13118 <__assert_fail@plt+0x1f14>
   13218:	mov	r2, #5
   1321c:	ldr	r1, [pc, #420]	; 133c8 <__assert_fail@plt+0x21c4>
   13220:	mov	r0, #0
   13224:	bl	10fc4 <dcgettext@plt>
   13228:	mov	r4, r0
   1322c:	ldrb	r5, [fp]
   13230:	ldr	r0, [sp, #16]
   13234:	bl	17470 <__assert_fail@plt+0x626c>
   13238:	str	r0, [sp]
   1323c:	mov	r3, r5
   13240:	mov	r2, r4
   13244:	mov	r1, #0
   13248:	mov	r0, r1
   1324c:	bl	1103c <error@plt>
   13250:	mov	r0, #0
   13254:	add	sp, sp, #28
   13258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1325c:	ldr	r3, [pc, #360]	; 133cc <__assert_fail@plt+0x21c8>
   13260:	b	13118 <__assert_fail@plt+0x1f14>
   13264:	ldr	r3, [pc, #356]	; 133d0 <__assert_fail@plt+0x21cc>
   13268:	b	13118 <__assert_fail@plt+0x1f14>
   1326c:	ldr	r3, [pc, #200]	; 1333c <__assert_fail@plt+0x2138>
   13270:	ldr	r2, [pc, #348]	; 133d4 <__assert_fail@plt+0x21d0>
   13274:	ldr	r1, [pc, #200]	; 13344 <__assert_fail@plt+0x2140>
   13278:	ldr	r0, [pc, #344]	; 133d8 <__assert_fail@plt+0x21d4>
   1327c:	bl	11204 <__assert_fail@plt>
   13280:	mov	r0, #1
   13284:	b	13254 <__assert_fail@plt+0x2050>
   13288:	cmp	r0, r5
   1328c:	beq	12ddc <__assert_fail@plt+0x1bd8>
   13290:	cmp	sl, #8
   13294:	bhi	132a8 <__assert_fail@plt+0x20a4>
   13298:	add	r3, r4, sl, lsl #2
   1329c:	ldr	r3, [r3, #60]	; 0x3c
   132a0:	cmp	r3, #0
   132a4:	bne	12d40 <__assert_fail@plt+0x1b3c>
   132a8:	mov	r2, #5
   132ac:	ldr	r1, [pc, #296]	; 133dc <__assert_fail@plt+0x21d8>
   132b0:	mov	r0, #0
   132b4:	bl	10fc4 <dcgettext@plt>
   132b8:	mov	r4, r0
   132bc:	ldr	r0, [sp, #16]
   132c0:	bl	17470 <__assert_fail@plt+0x626c>
   132c4:	str	sl, [sp]
   132c8:	mov	r3, r0
   132cc:	mov	r2, r4
   132d0:	mov	r1, #0
   132d4:	mov	r0, r1
   132d8:	bl	1103c <error@plt>
   132dc:	b	13250 <__assert_fail@plt+0x204c>
   132e0:	cmp	r0, r5
   132e4:	beq	130bc <__assert_fail@plt+0x1eb8>
   132e8:	cmp	r9, #8
   132ec:	bhi	13300 <__assert_fail@plt+0x20fc>
   132f0:	add	r3, r4, r9, lsl #2
   132f4:	ldr	r3, [r3, #96]	; 0x60
   132f8:	cmp	r3, #0
   132fc:	bne	13058 <__assert_fail@plt+0x1e54>
   13300:	mov	r2, #5
   13304:	ldr	r1, [pc, #212]	; 133e0 <__assert_fail@plt+0x21dc>
   13308:	mov	r0, #0
   1330c:	bl	10fc4 <dcgettext@plt>
   13310:	mov	r4, r0
   13314:	ldr	r0, [sp, #16]
   13318:	bl	17470 <__assert_fail@plt+0x626c>
   1331c:	str	r9, [sp]
   13320:	mov	r3, r0
   13324:	mov	r2, r4
   13328:	mov	r1, #0
   1332c:	mov	r0, r1
   13330:	bl	1103c <error@plt>
   13334:	b	13250 <__assert_fail@plt+0x204c>
   13338:	muleq	r2, r0, r1
   1333c:	andeq	r9, r1, r8, ror r1
   13340:	ldrdeq	r0, [r0], -r9
   13344:	muleq	r1, ip, r4
   13348:	strdeq	r9, [r1], -ip
   1334c:	muleq	r1, r0, r1
   13350:	andeq	r9, r1, r8, lsl #10
   13354:	stclgt	12, cr12, [ip], {205}	; 0xcd
   13358:	andeq	r9, r1, ip, lsr r6
   1335c:	andeq	r9, r1, r4, asr #1
   13360:	ldrdeq	r9, [r1], -r8
   13364:	ldrdeq	r9, [r1], -r4
   13368:	andeq	r9, r1, r8, ror #10
   1336c:	ldrdeq	r9, [r1], -r0
   13370:	andeq	r9, r1, r4, ror #9
   13374:	andeq	r9, r1, r0, ror #9
   13378:	andeq	r9, r1, r0, ror r5
   1337c:	ldrdeq	r9, [r1], -ip
   13380:	strdeq	r9, [r1], -r0
   13384:	andeq	r9, r1, ip, ror #9
   13388:	andeq	r9, r1, r8, ror #9
   1338c:	andeq	sl, r1, r8, ror #13
   13390:	strdeq	r9, [r1], -r8
   13394:	strdeq	r9, [r1], -r4
   13398:	andeq	r0, r0, fp, ror #5
   1339c:	andeq	r9, r1, ip, ror r5
   133a0:	andeq	r1, r1, r8, ror r8
   133a4:			; <UNDEFINED> instruction: 0x00011cb0
   133a8:	muleq	r1, r0, sp
   133ac:	andeq	r1, r1, r8, asr #21
   133b0:			; <UNDEFINED> instruction: 0x00011bbc
   133b4:	andeq	r2, r1, r8, asr #1
   133b8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   133bc:	andeq	r1, r1, r0, ror lr
   133c0:	andeq	r1, r1, ip, ror #12
   133c4:	strdeq	r2, [r1], -r4
   133c8:	andeq	r9, r1, r4, lsl #12
   133cc:	andeq	r1, r1, r0, lsr #19
   133d0:	andeq	r1, r1, r0, ror r7
   133d4:	andeq	r0, r0, r5, ror #7
   133d8:	andeq	r9, r1, r0, lsr r6
   133dc:	andeq	r9, r1, r8, lsl r5
   133e0:			; <UNDEFINED> instruction: 0x000195b0
   133e4:	push	{lr}		; (str lr, [sp, #-4]!)
   133e8:	sub	sp, sp, #68	; 0x44
   133ec:	subs	r6, r0, #0
   133f0:	beq	1342c <__assert_fail@plt+0x2228>
   133f4:	ldr	r3, [pc, #976]	; 137cc <__assert_fail@plt+0x25c8>
   133f8:	ldr	r4, [r3]
   133fc:	mov	r2, #5
   13400:	ldr	r1, [pc, #968]	; 137d0 <__assert_fail@plt+0x25cc>
   13404:	mov	r0, #0
   13408:	bl	10fc4 <dcgettext@plt>
   1340c:	ldr	r3, [pc, #960]	; 137d4 <__assert_fail@plt+0x25d0>
   13410:	ldr	r3, [r3]
   13414:	mov	r2, r0
   13418:	mov	r1, #1
   1341c:	mov	r0, r4
   13420:	bl	11144 <__fprintf_chk@plt>
   13424:	mov	r0, r6
   13428:	bl	110b4 <exit@plt>
   1342c:	mov	r2, #5
   13430:	ldr	r1, [pc, #928]	; 137d8 <__assert_fail@plt+0x25d4>
   13434:	mov	r0, #0
   13438:	bl	10fc4 <dcgettext@plt>
   1343c:	ldr	r3, [pc, #912]	; 137d4 <__assert_fail@plt+0x25d0>
   13440:	ldr	r2, [r3]
   13444:	str	r2, [sp]
   13448:	mov	r3, r2
   1344c:	mov	r1, r0
   13450:	mov	r0, #1
   13454:	bl	11120 <__printf_chk@plt>
   13458:	mov	r2, #5
   1345c:	ldr	r1, [pc, #888]	; 137dc <__assert_fail@plt+0x25d8>
   13460:	mov	r0, #0
   13464:	bl	10fc4 <dcgettext@plt>
   13468:	ldr	r4, [pc, #880]	; 137e0 <__assert_fail@plt+0x25dc>
   1346c:	ldr	r1, [r4]
   13470:	bl	10f1c <fputs_unlocked@plt>
   13474:	mov	r2, #5
   13478:	ldr	r1, [pc, #868]	; 137e4 <__assert_fail@plt+0x25e0>
   1347c:	mov	r0, #0
   13480:	bl	10fc4 <dcgettext@plt>
   13484:	ldr	r1, [r4]
   13488:	bl	10f1c <fputs_unlocked@plt>
   1348c:	mov	r2, #5
   13490:	ldr	r1, [pc, #848]	; 137e8 <__assert_fail@plt+0x25e4>
   13494:	mov	r0, #0
   13498:	bl	10fc4 <dcgettext@plt>
   1349c:	ldr	r1, [r4]
   134a0:	bl	10f1c <fputs_unlocked@plt>
   134a4:	mov	r2, #5
   134a8:	ldr	r1, [pc, #828]	; 137ec <__assert_fail@plt+0x25e8>
   134ac:	mov	r0, #0
   134b0:	bl	10fc4 <dcgettext@plt>
   134b4:	ldr	r1, [r4]
   134b8:	bl	10f1c <fputs_unlocked@plt>
   134bc:	mov	r2, #5
   134c0:	ldr	r1, [pc, #808]	; 137f0 <__assert_fail@plt+0x25ec>
   134c4:	mov	r0, #0
   134c8:	bl	10fc4 <dcgettext@plt>
   134cc:	ldr	r1, [r4]
   134d0:	bl	10f1c <fputs_unlocked@plt>
   134d4:	mov	r2, #5
   134d8:	ldr	r1, [pc, #788]	; 137f4 <__assert_fail@plt+0x25f0>
   134dc:	mov	r0, #0
   134e0:	bl	10fc4 <dcgettext@plt>
   134e4:	ldr	r1, [r4]
   134e8:	bl	10f1c <fputs_unlocked@plt>
   134ec:	mov	r2, #5
   134f0:	ldr	r1, [pc, #768]	; 137f8 <__assert_fail@plt+0x25f4>
   134f4:	mov	r0, #0
   134f8:	bl	10fc4 <dcgettext@plt>
   134fc:	ldr	r1, [r4]
   13500:	bl	10f1c <fputs_unlocked@plt>
   13504:	mov	r2, #5
   13508:	ldr	r1, [pc, #748]	; 137fc <__assert_fail@plt+0x25f8>
   1350c:	mov	r0, #0
   13510:	bl	10fc4 <dcgettext@plt>
   13514:	ldr	r1, [r4]
   13518:	bl	10f1c <fputs_unlocked@plt>
   1351c:	mov	r2, #5
   13520:	ldr	r1, [pc, #728]	; 13800 <__assert_fail@plt+0x25fc>
   13524:	mov	r0, #0
   13528:	bl	10fc4 <dcgettext@plt>
   1352c:	ldr	r1, [r4]
   13530:	bl	10f1c <fputs_unlocked@plt>
   13534:	mov	r2, #5
   13538:	ldr	r1, [pc, #708]	; 13804 <__assert_fail@plt+0x2600>
   1353c:	mov	r0, #0
   13540:	bl	10fc4 <dcgettext@plt>
   13544:	ldr	r1, [r4]
   13548:	bl	10f1c <fputs_unlocked@plt>
   1354c:	mov	r2, #5
   13550:	ldr	r1, [pc, #688]	; 13808 <__assert_fail@plt+0x2604>
   13554:	mov	r0, #0
   13558:	bl	10fc4 <dcgettext@plt>
   1355c:	ldr	r1, [r4]
   13560:	bl	10f1c <fputs_unlocked@plt>
   13564:	mov	r2, #5
   13568:	ldr	r1, [pc, #668]	; 1380c <__assert_fail@plt+0x2608>
   1356c:	mov	r0, #0
   13570:	bl	10fc4 <dcgettext@plt>
   13574:	ldr	r1, [r4]
   13578:	bl	10f1c <fputs_unlocked@plt>
   1357c:	mov	r2, #5
   13580:	ldr	r1, [pc, #648]	; 13810 <__assert_fail@plt+0x260c>
   13584:	mov	r0, #0
   13588:	bl	10fc4 <dcgettext@plt>
   1358c:	ldr	r1, [r4]
   13590:	bl	10f1c <fputs_unlocked@plt>
   13594:	mov	r2, #5
   13598:	ldr	r1, [pc, #628]	; 13814 <__assert_fail@plt+0x2610>
   1359c:	mov	r0, #0
   135a0:	bl	10fc4 <dcgettext@plt>
   135a4:	ldr	r1, [r4]
   135a8:	bl	10f1c <fputs_unlocked@plt>
   135ac:	mov	r2, #5
   135b0:	ldr	r1, [pc, #608]	; 13818 <__assert_fail@plt+0x2614>
   135b4:	mov	r0, #0
   135b8:	bl	10fc4 <dcgettext@plt>
   135bc:	ldr	r1, [r4]
   135c0:	bl	10f1c <fputs_unlocked@plt>
   135c4:	add	ip, sp, #8
   135c8:	ldr	lr, [pc, #588]	; 1381c <__assert_fail@plt+0x2618>
   135cc:	ldm	lr!, {r0, r1, r2, r3}
   135d0:	stmia	ip!, {r0, r1, r2, r3}
   135d4:	ldm	lr!, {r0, r1, r2, r3}
   135d8:	stmia	ip!, {r0, r1, r2, r3}
   135dc:	ldm	lr!, {r0, r1, r2, r3}
   135e0:	stmia	ip!, {r0, r1, r2, r3}
   135e4:	ldm	lr, {r0, r1}
   135e8:	stm	ip, {r0, r1}
   135ec:	ldr	r1, [sp, #8]
   135f0:	cmp	r1, #0
   135f4:	addeq	r4, sp, #8
   135f8:	beq	13620 <__assert_fail@plt+0x241c>
   135fc:	add	r4, sp, #8
   13600:	ldr	r5, [pc, #536]	; 13820 <__assert_fail@plt+0x261c>
   13604:	mov	r0, r5
   13608:	bl	10f34 <strcmp@plt>
   1360c:	cmp	r0, #0
   13610:	beq	13620 <__assert_fail@plt+0x241c>
   13614:	ldr	r1, [r4, #8]!
   13618:	cmp	r1, #0
   1361c:	bne	13604 <__assert_fail@plt+0x2400>
   13620:	ldr	r4, [r4, #4]
   13624:	cmp	r4, #0
   13628:	beq	1373c <__assert_fail@plt+0x2538>
   1362c:	mov	r2, #5
   13630:	ldr	r1, [pc, #492]	; 13824 <__assert_fail@plt+0x2620>
   13634:	mov	r0, #0
   13638:	bl	10fc4 <dcgettext@plt>
   1363c:	ldr	r3, [pc, #484]	; 13828 <__assert_fail@plt+0x2624>
   13640:	ldr	r2, [pc, #484]	; 1382c <__assert_fail@plt+0x2628>
   13644:	mov	r1, r0
   13648:	mov	r0, #1
   1364c:	bl	11120 <__printf_chk@plt>
   13650:	mov	r1, #0
   13654:	mov	r0, #5
   13658:	bl	11174 <setlocale@plt>
   1365c:	cmp	r0, #0
   13660:	beq	13678 <__assert_fail@plt+0x2474>
   13664:	mov	r2, #3
   13668:	ldr	r1, [pc, #448]	; 13830 <__assert_fail@plt+0x262c>
   1366c:	bl	111e0 <strncmp@plt>
   13670:	cmp	r0, #0
   13674:	bne	136d8 <__assert_fail@plt+0x24d4>
   13678:	mov	r2, #5
   1367c:	ldr	r1, [pc, #432]	; 13834 <__assert_fail@plt+0x2630>
   13680:	mov	r0, #0
   13684:	bl	10fc4 <dcgettext@plt>
   13688:	ldr	r5, [pc, #400]	; 13820 <__assert_fail@plt+0x261c>
   1368c:	mov	r3, r5
   13690:	ldr	r2, [pc, #400]	; 13828 <__assert_fail@plt+0x2624>
   13694:	mov	r1, r0
   13698:	mov	r0, #1
   1369c:	bl	11120 <__printf_chk@plt>
   136a0:	mov	r2, #5
   136a4:	ldr	r1, [pc, #396]	; 13838 <__assert_fail@plt+0x2634>
   136a8:	mov	r0, #0
   136ac:	bl	10fc4 <dcgettext@plt>
   136b0:	mov	r1, r0
   136b4:	ldr	r2, [pc, #384]	; 1383c <__assert_fail@plt+0x2638>
   136b8:	ldr	r3, [pc, #384]	; 13840 <__assert_fail@plt+0x263c>
   136bc:	cmp	r4, r5
   136c0:	movne	r3, r2
   136c4:	mov	r2, r4
   136c8:	mov	r0, #1
   136cc:	bl	11120 <__printf_chk@plt>
   136d0:	b	13424 <__assert_fail@plt+0x2220>
   136d4:	ldr	r4, [pc, #324]	; 13820 <__assert_fail@plt+0x261c>
   136d8:	mov	r2, #5
   136dc:	ldr	r1, [pc, #352]	; 13844 <__assert_fail@plt+0x2640>
   136e0:	mov	r0, #0
   136e4:	bl	10fc4 <dcgettext@plt>
   136e8:	ldr	r3, [pc, #240]	; 137e0 <__assert_fail@plt+0x25dc>
   136ec:	ldr	r1, [r3]
   136f0:	bl	10f1c <fputs_unlocked@plt>
   136f4:	b	13678 <__assert_fail@plt+0x2474>
   136f8:	mov	r2, #5
   136fc:	ldr	r1, [pc, #304]	; 13834 <__assert_fail@plt+0x2630>
   13700:	mov	r0, #0
   13704:	bl	10fc4 <dcgettext@plt>
   13708:	ldr	r4, [pc, #272]	; 13820 <__assert_fail@plt+0x261c>
   1370c:	mov	r3, r4
   13710:	ldr	r2, [pc, #272]	; 13828 <__assert_fail@plt+0x2624>
   13714:	mov	r1, r0
   13718:	mov	r0, #1
   1371c:	bl	11120 <__printf_chk@plt>
   13720:	mov	r2, #5
   13724:	ldr	r1, [pc, #268]	; 13838 <__assert_fail@plt+0x2634>
   13728:	mov	r0, #0
   1372c:	bl	10fc4 <dcgettext@plt>
   13730:	mov	r1, r0
   13734:	ldr	r3, [pc, #260]	; 13840 <__assert_fail@plt+0x263c>
   13738:	b	136c4 <__assert_fail@plt+0x24c0>
   1373c:	mov	r2, #5
   13740:	ldr	r1, [pc, #220]	; 13824 <__assert_fail@plt+0x2620>
   13744:	mov	r0, #0
   13748:	bl	10fc4 <dcgettext@plt>
   1374c:	ldr	r3, [pc, #212]	; 13828 <__assert_fail@plt+0x2624>
   13750:	ldr	r2, [pc, #212]	; 1382c <__assert_fail@plt+0x2628>
   13754:	mov	r1, r0
   13758:	mov	r0, #1
   1375c:	bl	11120 <__printf_chk@plt>
   13760:	mov	r1, #0
   13764:	mov	r0, #5
   13768:	bl	11174 <setlocale@plt>
   1376c:	cmp	r0, #0
   13770:	beq	136f8 <__assert_fail@plt+0x24f4>
   13774:	mov	r2, #3
   13778:	ldr	r1, [pc, #176]	; 13830 <__assert_fail@plt+0x262c>
   1377c:	bl	111e0 <strncmp@plt>
   13780:	cmp	r0, #0
   13784:	bne	136d4 <__assert_fail@plt+0x24d0>
   13788:	mov	r2, #5
   1378c:	ldr	r1, [pc, #160]	; 13834 <__assert_fail@plt+0x2630>
   13790:	mov	r0, #0
   13794:	bl	10fc4 <dcgettext@plt>
   13798:	ldr	r4, [pc, #128]	; 13820 <__assert_fail@plt+0x261c>
   1379c:	mov	r3, r4
   137a0:	ldr	r2, [pc, #128]	; 13828 <__assert_fail@plt+0x2624>
   137a4:	mov	r1, r0
   137a8:	mov	r0, #1
   137ac:	bl	11120 <__printf_chk@plt>
   137b0:	mov	r2, #5
   137b4:	ldr	r1, [pc, #124]	; 13838 <__assert_fail@plt+0x2634>
   137b8:	mov	r0, #0
   137bc:	bl	10fc4 <dcgettext@plt>
   137c0:	mov	r1, r0
   137c4:	ldr	r3, [pc, #116]	; 13840 <__assert_fail@plt+0x263c>
   137c8:	b	136c4 <__assert_fail@plt+0x24c0>
   137cc:	andeq	fp, r2, r8, ror r1
   137d0:	andeq	r9, r1, r8, asr r6
   137d4:	andeq	fp, r2, r0, asr #4
   137d8:	andeq	r9, r1, r0, lsl #13
   137dc:	andeq	r9, r1, r4, lsr #14
   137e0:	andeq	fp, r2, r4, lsl #3
   137e4:	ldrdeq	r9, [r1], -ip
   137e8:	andeq	r9, r1, r4, lsl r8
   137ec:	muleq	r1, ip, r9
   137f0:	andeq	r9, r1, r8, ror #19
   137f4:	andeq	r9, r1, r8, lsl #22
   137f8:	andeq	r9, r1, r0, lsr sp
   137fc:	andeq	r9, r1, r0, ror #26
   13800:	muleq	r1, r8, sp
   13804:	ldrdeq	r9, [r1], -r4
   13808:	andeq	r9, r1, r8, ror #31
   1380c:	muleq	r1, r0, r0
   13810:	andeq	sl, r1, ip, lsl #3
   13814:	andeq	sl, r1, r0, lsl #5
   13818:	andeq	sl, r1, r0, ror #5
   1381c:			; <UNDEFINED> instruction: 0x000192b4
   13820:	andeq	r9, r1, r4, asr r6
   13824:	andeq	sl, r1, r8, asr #7
   13828:	andeq	sl, r1, r0, ror #7
   1382c:	andeq	sl, r1, r8, lsl #8
   13830:	andeq	sl, r1, r8, lsl r4
   13834:	andeq	sl, r1, r4, ror #8
   13838:	andeq	sl, r1, r0, lsl #9
   1383c:	andeq	sl, r1, r8, lsl #3
   13840:	andeq	sl, r1, ip, ror #12
   13844:	andeq	sl, r1, ip, lsl r4
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	sub	sp, sp, #52	; 0x34
   13850:	str	r0, [sp, #20]
   13854:	mov	r6, r1
   13858:	ldr	r0, [r1]
   1385c:	bl	15920 <__assert_fail@plt+0x471c>
   13860:	ldr	r1, [pc, #3876]	; 1478c <__assert_fail@plt+0x3588>
   13864:	mov	r0, #6
   13868:	bl	11174 <setlocale@plt>
   1386c:	ldr	r4, [pc, #3868]	; 14790 <__assert_fail@plt+0x358c>
   13870:	ldr	r1, [pc, #3868]	; 14794 <__assert_fail@plt+0x3590>
   13874:	mov	r0, r4
   13878:	bl	111c8 <bindtextdomain@plt>
   1387c:	mov	r0, r4
   13880:	bl	10fdc <textdomain@plt>
   13884:	ldr	r0, [pc, #3852]	; 14798 <__assert_fail@plt+0x3594>
   13888:	bl	190a0 <__assert_fail@plt+0x7e9c>
   1388c:	ldr	r2, [pc, #3848]	; 1479c <__assert_fail@plt+0x3598>
   13890:	add	r3, r2, #56	; 0x38
   13894:	add	r2, r2, #92	; 0x5c
   13898:	mov	r1, #0
   1389c:	str	r1, [r3, #4]!
   138a0:	cmp	r3, r2
   138a4:	bne	1389c <__assert_fail@plt+0x2698>
   138a8:	ldr	r2, [pc, #3820]	; 1479c <__assert_fail@plt+0x3598>
   138ac:	mov	r3, #1
   138b0:	str	r3, [r2, #64]	; 0x40
   138b4:	mov	r3, #2
   138b8:	str	r3, [r2, #68]	; 0x44
   138bc:	mov	r3, #4
   138c0:	str	r3, [r2, #76]	; 0x4c
   138c4:	mov	r3, r2
   138c8:	mov	r1, #5
   138cc:	str	r1, [r3, #92]!	; 0x5c
   138d0:	add	r2, r2, #128	; 0x80
   138d4:	mov	r1, #0
   138d8:	str	r1, [r3, #4]!
   138dc:	cmp	r3, r2
   138e0:	bne	138d8 <__assert_fail@plt+0x26d4>
   138e4:	ldr	r3, [pc, #3760]	; 1479c <__assert_fail@plt+0x3598>
   138e8:	mov	r2, #6
   138ec:	str	r2, [r3, #112]	; 0x70
   138f0:	mov	r1, #7
   138f4:	str	r1, [r3, #128]	; 0x80
   138f8:	mov	r2, #0
   138fc:	str	r2, [r3]
   13900:	str	r2, [r3, #56]	; 0x38
   13904:	str	r2, [r3, #4]
   13908:	ldr	r0, [pc, #3728]	; 147a0 <__assert_fail@plt+0x359c>
   1390c:	str	r0, [r3, #52]	; 0x34
   13910:	mov	r0, #8
   13914:	str	r0, [r3, #12]
   13918:	str	r1, [r3, #8]
   1391c:	strb	r2, [r3, #42]	; 0x2a
   13920:	mov	r4, #1
   13924:	str	r2, [sp, #24]
   13928:	mov	r9, r2
   1392c:	str	r2, [sp, #28]
   13930:	ldr	r5, [pc, #3692]	; 147a4 <__assert_fail@plt+0x35a0>
   13934:	ldr	sl, [pc, #3692]	; 147a8 <__assert_fail@plt+0x35a4>
   13938:	add	fp, r5, #796	; 0x31c
   1393c:	mov	r8, r3
   13940:	add	r7, r3, #144	; 0x90
   13944:	add	r3, sp, #48	; 0x30
   13948:	mvn	r2, #0
   1394c:	str	r2, [r3, #-16]!
   13950:	str	r3, [sp]
   13954:	add	r3, r5, #552	; 0x228
   13958:	add	r2, r5, #744	; 0x2e8
   1395c:	mov	r1, r6
   13960:	ldr	r0, [sp, #20]
   13964:	bl	1109c <getopt_long@plt>
   13968:	cmn	r0, #1
   1396c:	beq	1424c <__assert_fail@plt+0x3048>
   13970:	add	r0, r0, #3
   13974:	cmp	r0, #260	; 0x104
   13978:	ldrls	pc, [pc, r0, lsl #2]
   1397c:	b	1422c <__assert_fail@plt+0x3028>
   13980:	strdeq	r4, [r1], -r8
   13984:	strdeq	r4, [r1], -r0
   13988:	andeq	r4, r1, ip, lsr #4
   1398c:	andeq	r4, r1, ip, lsr #4
   13990:	andeq	r4, r1, ip, lsr #4
   13994:	andeq	r4, r1, ip, lsr #4
   13998:	andeq	r4, r1, ip, lsr #4
   1399c:	andeq	r4, r1, ip, lsr #4
   139a0:	andeq	r4, r1, ip, lsr #4
   139a4:	andeq	r4, r1, ip, lsr #4
   139a8:	andeq	r4, r1, ip, lsr #4
   139ac:	andeq	r4, r1, ip, lsr #4
   139b0:	andeq	r4, r1, ip, lsr #4
   139b4:	andeq	r4, r1, ip, lsr #4
   139b8:	andeq	r4, r1, ip, lsr #4
   139bc:	andeq	r4, r1, ip, lsr #4
   139c0:	andeq	r4, r1, ip, lsr #4
   139c4:	andeq	r4, r1, ip, lsr #4
   139c8:	andeq	r4, r1, ip, lsr #4
   139cc:	andeq	r4, r1, ip, lsr #4
   139d0:	andeq	r4, r1, ip, lsr #4
   139d4:	andeq	r4, r1, ip, lsr #4
   139d8:	andeq	r4, r1, ip, lsr #4
   139dc:	andeq	r4, r1, ip, lsr #4
   139e0:	andeq	r4, r1, ip, lsr #4
   139e4:	andeq	r4, r1, ip, lsr #4
   139e8:	andeq	r4, r1, ip, lsr #4
   139ec:	andeq	r4, r1, ip, lsr #4
   139f0:	andeq	r4, r1, ip, lsr #4
   139f4:	andeq	r4, r1, ip, lsr #4
   139f8:	andeq	r4, r1, ip, lsr #4
   139fc:	andeq	r4, r1, ip, lsr #4
   13a00:	andeq	r4, r1, ip, lsr #4
   13a04:	andeq	r4, r1, ip, lsr #4
   13a08:	andeq	r4, r1, ip, lsr #4
   13a0c:	andeq	r4, r1, ip, lsr #4
   13a10:	andeq	r4, r1, ip, lsr #4
   13a14:	andeq	r4, r1, ip, lsr #4
   13a18:	andeq	r4, r1, ip, lsr #4
   13a1c:	andeq	r4, r1, ip, lsr #4
   13a20:	andeq	r4, r1, ip, lsr #4
   13a24:	andeq	r4, r1, ip, lsr #4
   13a28:	andeq	r4, r1, ip, lsr #4
   13a2c:	andeq	r4, r1, ip, lsr #4
   13a30:	andeq	r4, r1, ip, lsr #4
   13a34:	andeq	r4, r1, ip, lsr #4
   13a38:	andeq	r4, r1, ip, lsr #4
   13a3c:	andeq	r4, r1, ip, lsr #4
   13a40:	andeq	r4, r1, ip, lsr #4
   13a44:	andeq	r4, r1, ip, lsr #4
   13a48:	andeq	r4, r1, ip, lsr #4
   13a4c:	andeq	r4, r1, ip, lsr #4
   13a50:	andeq	r4, r1, ip, lsr #4
   13a54:	andeq	r4, r1, ip, lsr #4
   13a58:	andeq	r4, r1, ip, lsr #4
   13a5c:	andeq	r4, r1, ip, lsr #4
   13a60:	andeq	r4, r1, ip, lsr #4
   13a64:	andeq	r4, r1, ip, lsr #4
   13a68:	andeq	r4, r1, ip, lsr #4
   13a6c:	andeq	r4, r1, ip, lsr #4
   13a70:	andeq	r4, r1, ip, lsr #4
   13a74:	andeq	r4, r1, ip, lsr #4
   13a78:	andeq	r4, r1, ip, lsr #4
   13a7c:	andeq	r4, r1, ip, lsr #4
   13a80:	andeq	r4, r1, ip, lsr #4
   13a84:	andeq	r4, r1, ip, lsr #4
   13a88:	andeq	r4, r1, ip, lsr #4
   13a8c:	andeq	r4, r1, ip, lsr #4
   13a90:	muleq	r1, r4, sp
   13a94:	andeq	r4, r1, ip, lsl #2
   13a98:	andeq	r4, r1, ip, lsr #4
   13a9c:	andeq	r4, r1, ip, rrx
   13aa0:	andeq	r4, r1, ip, lsr #4
   13aa4:	muleq	r1, r4, r0
   13aa8:	andeq	r4, r1, ip, lsr #4
   13aac:	strheq	r4, [r1], -ip
   13ab0:	andeq	r4, r1, r4, ror #1
   13ab4:	andeq	r4, r1, ip, lsr #4
   13ab8:	andeq	r4, r1, ip, lsr #4
   13abc:	andeq	r4, r1, r4, ror #1
   13ac0:	andeq	r4, r1, ip, lsr #4
   13ac4:	andeq	r3, r1, r8, lsr #29
   13ac8:	strdeq	r4, [r1], -r8
   13acc:	andeq	r4, r1, ip, lsr #4
   13ad0:	andeq	r4, r1, ip, lsr #4
   13ad4:	andeq	r4, r1, ip, lsr #4
   13ad8:	strdeq	r3, [r1], -r4
   13adc:	andeq	r4, r1, ip, lsr #4
   13ae0:	andeq	r4, r1, ip, lsr #4
   13ae4:	andeq	r4, r1, ip, lsr #4
   13ae8:	andeq	r4, r1, ip, lsr #4
   13aec:	strheq	r4, [r1], -ip
   13af0:	andeq	r4, r1, ip, lsr #4
   13af4:	andeq	r4, r1, ip, lsr #4
   13af8:	andeq	r4, r1, ip, lsr #4
   13afc:	andeq	r4, r1, ip, lsr #4
   13b00:	andeq	r4, r1, ip, lsr #4
   13b04:	andeq	r4, r1, ip, lsr #4
   13b08:	andeq	r4, r1, ip, lsr #4
   13b0c:	andeq	r4, r1, ip, lsr #4
   13b10:	andeq	r4, r1, r0, lsr r0
   13b14:	andeq	r4, r1, r4, asr #32
   13b18:	andeq	r4, r1, r8, asr r0
   13b1c:	andeq	r4, r1, r0, lsl #1
   13b20:	muleq	r1, r4, r0
   13b24:	andeq	r4, r1, r8, lsr #1
   13b28:	andeq	r4, r1, ip, lsr #4
   13b2c:	andeq	r4, r1, r4, lsr r1
   13b30:	ldrdeq	r4, [r1], -r0
   13b34:	andeq	r3, r1, r4, ror #28
   13b38:	andeq	r4, r1, ip, lsr #4
   13b3c:	andeq	r4, r1, r4, ror #1
   13b40:	andeq	r4, r1, ip, lsr #4
   13b44:	andeq	r4, r1, ip, lsr #4
   13b48:	andeq	r4, r1, ip, lsl #2
   13b4c:	andeq	r4, r1, ip, lsr #4
   13b50:	andeq	r4, r1, ip, lsr #4
   13b54:	andeq	r4, r1, ip, lsr #4
   13b58:	andeq	r4, r1, r0, lsr #2
   13b5c:	andeq	r3, r1, r0, lsr #31
   13b60:	andeq	r4, r1, ip, lsr #4
   13b64:			; <UNDEFINED> instruction: 0x00013fb8
   13b68:	andeq	r4, r1, r8, asr #2
   13b6c:	andeq	r4, r1, r4, lsr r1
   13b70:	andeq	r4, r1, ip, lsr #4
   13b74:	andeq	r4, r1, ip, lsr #4
   13b78:	andeq	r4, r1, ip, lsr #4
   13b7c:	andeq	r4, r1, ip, lsr #4
   13b80:	andeq	r4, r1, ip, lsr #4
   13b84:	andeq	r4, r1, ip, lsr #4
   13b88:	andeq	r4, r1, ip, lsr #4
   13b8c:	andeq	r4, r1, ip, lsr #4
   13b90:	andeq	r4, r1, ip, lsr #4
   13b94:	andeq	r4, r1, ip, lsr #4
   13b98:	andeq	r4, r1, ip, lsr #4
   13b9c:	andeq	r4, r1, ip, lsr #4
   13ba0:	andeq	r4, r1, ip, lsr #4
   13ba4:	andeq	r4, r1, ip, lsr #4
   13ba8:	andeq	r4, r1, ip, lsr #4
   13bac:	andeq	r4, r1, ip, lsr #4
   13bb0:	andeq	r4, r1, ip, lsr #4
   13bb4:	andeq	r4, r1, ip, lsr #4
   13bb8:	andeq	r4, r1, ip, lsr #4
   13bbc:	andeq	r4, r1, ip, lsr #4
   13bc0:	andeq	r4, r1, ip, lsr #4
   13bc4:	andeq	r4, r1, ip, lsr #4
   13bc8:	andeq	r4, r1, ip, lsr #4
   13bcc:	andeq	r4, r1, ip, lsr #4
   13bd0:	andeq	r4, r1, ip, lsr #4
   13bd4:	andeq	r4, r1, ip, lsr #4
   13bd8:	andeq	r4, r1, ip, lsr #4
   13bdc:	andeq	r4, r1, ip, lsr #4
   13be0:	andeq	r4, r1, ip, lsr #4
   13be4:	andeq	r4, r1, ip, lsr #4
   13be8:	andeq	r4, r1, ip, lsr #4
   13bec:	andeq	r4, r1, ip, lsr #4
   13bf0:	andeq	r4, r1, ip, lsr #4
   13bf4:	andeq	r4, r1, ip, lsr #4
   13bf8:	andeq	r4, r1, ip, lsr #4
   13bfc:	andeq	r4, r1, ip, lsr #4
   13c00:	andeq	r4, r1, ip, lsr #4
   13c04:	andeq	r4, r1, ip, lsr #4
   13c08:	andeq	r4, r1, ip, lsr #4
   13c0c:	andeq	r4, r1, ip, lsr #4
   13c10:	andeq	r4, r1, ip, lsr #4
   13c14:	andeq	r4, r1, ip, lsr #4
   13c18:	andeq	r4, r1, ip, lsr #4
   13c1c:	andeq	r4, r1, ip, lsr #4
   13c20:	andeq	r4, r1, ip, lsr #4
   13c24:	andeq	r4, r1, ip, lsr #4
   13c28:	andeq	r4, r1, ip, lsr #4
   13c2c:	andeq	r4, r1, ip, lsr #4
   13c30:	andeq	r4, r1, ip, lsr #4
   13c34:	andeq	r4, r1, ip, lsr #4
   13c38:	andeq	r4, r1, ip, lsr #4
   13c3c:	andeq	r4, r1, ip, lsr #4
   13c40:	andeq	r4, r1, ip, lsr #4
   13c44:	andeq	r4, r1, ip, lsr #4
   13c48:	andeq	r4, r1, ip, lsr #4
   13c4c:	andeq	r4, r1, ip, lsr #4
   13c50:	andeq	r4, r1, ip, lsr #4
   13c54:	andeq	r4, r1, ip, lsr #4
   13c58:	andeq	r4, r1, ip, lsr #4
   13c5c:	andeq	r4, r1, ip, lsr #4
   13c60:	andeq	r4, r1, ip, lsr #4
   13c64:	andeq	r4, r1, ip, lsr #4
   13c68:	andeq	r4, r1, ip, lsr #4
   13c6c:	andeq	r4, r1, ip, lsr #4
   13c70:	andeq	r4, r1, ip, lsr #4
   13c74:	andeq	r4, r1, ip, lsr #4
   13c78:	andeq	r4, r1, ip, lsr #4
   13c7c:	andeq	r4, r1, ip, lsr #4
   13c80:	andeq	r4, r1, ip, lsr #4
   13c84:	andeq	r4, r1, ip, lsr #4
   13c88:	andeq	r4, r1, ip, lsr #4
   13c8c:	andeq	r4, r1, ip, lsr #4
   13c90:	andeq	r4, r1, ip, lsr #4
   13c94:	andeq	r4, r1, ip, lsr #4
   13c98:	andeq	r4, r1, ip, lsr #4
   13c9c:	andeq	r4, r1, ip, lsr #4
   13ca0:	andeq	r4, r1, ip, lsr #4
   13ca4:	andeq	r4, r1, ip, lsr #4
   13ca8:	andeq	r4, r1, ip, lsr #4
   13cac:	andeq	r4, r1, ip, lsr #4
   13cb0:	andeq	r4, r1, ip, lsr #4
   13cb4:	andeq	r4, r1, ip, lsr #4
   13cb8:	andeq	r4, r1, ip, lsr #4
   13cbc:	andeq	r4, r1, ip, lsr #4
   13cc0:	andeq	r4, r1, ip, lsr #4
   13cc4:	andeq	r4, r1, ip, lsr #4
   13cc8:	andeq	r4, r1, ip, lsr #4
   13ccc:	andeq	r4, r1, ip, lsr #4
   13cd0:	andeq	r4, r1, ip, lsr #4
   13cd4:	andeq	r4, r1, ip, lsr #4
   13cd8:	andeq	r4, r1, ip, lsr #4
   13cdc:	andeq	r4, r1, ip, lsr #4
   13ce0:	andeq	r4, r1, ip, lsr #4
   13ce4:	andeq	r4, r1, ip, lsr #4
   13ce8:	andeq	r4, r1, ip, lsr #4
   13cec:	andeq	r4, r1, ip, lsr #4
   13cf0:	andeq	r4, r1, ip, lsr #4
   13cf4:	andeq	r4, r1, ip, lsr #4
   13cf8:	andeq	r4, r1, ip, lsr #4
   13cfc:	andeq	r4, r1, ip, lsr #4
   13d00:	andeq	r4, r1, ip, lsr #4
   13d04:	andeq	r4, r1, ip, lsr #4
   13d08:	andeq	r4, r1, ip, lsr #4
   13d0c:	andeq	r4, r1, ip, lsr #4
   13d10:	andeq	r4, r1, ip, lsr #4
   13d14:	andeq	r4, r1, ip, lsr #4
   13d18:	andeq	r4, r1, ip, lsr #4
   13d1c:	andeq	r4, r1, ip, lsr #4
   13d20:	andeq	r4, r1, ip, lsr #4
   13d24:	andeq	r4, r1, ip, lsr #4
   13d28:	andeq	r4, r1, ip, lsr #4
   13d2c:	andeq	r4, r1, ip, lsr #4
   13d30:	andeq	r4, r1, ip, lsr #4
   13d34:	andeq	r4, r1, ip, lsr #4
   13d38:	andeq	r4, r1, ip, lsr #4
   13d3c:	andeq	r4, r1, ip, lsr #4
   13d40:	andeq	r4, r1, ip, lsr #4
   13d44:	andeq	r4, r1, ip, lsr #4
   13d48:	andeq	r4, r1, ip, lsr #4
   13d4c:	andeq	r4, r1, ip, lsr #4
   13d50:	andeq	r4, r1, ip, lsr #4
   13d54:	andeq	r4, r1, ip, lsr #4
   13d58:	andeq	r4, r1, ip, lsr #4
   13d5c:	andeq	r4, r1, ip, lsr #4
   13d60:	andeq	r4, r1, ip, lsr #4
   13d64:	andeq	r4, r1, ip, lsr #4
   13d68:	andeq	r4, r1, ip, lsr #4
   13d6c:	andeq	r4, r1, ip, lsr #4
   13d70:	andeq	r4, r1, ip, lsr #4
   13d74:	andeq	r4, r1, ip, lsr #4
   13d78:	andeq	r4, r1, ip, lsr #4
   13d7c:	andeq	r4, r1, ip, lsr #4
   13d80:	andeq	r4, r1, ip, lsr #4
   13d84:	andeq	r4, r1, ip, lsr #4
   13d88:	andeq	r4, r1, ip, lsr #4
   13d8c:	andeq	r3, r1, ip, asr #31
   13d90:	ldrdeq	r3, [r1], -r8
   13d94:	ldr	r3, [sl]
   13d98:	ldrb	r3, [r3]
   13d9c:	cmp	r3, #110	; 0x6e
   13da0:	beq	13e20 <__assert_fail@plt+0x2c1c>
   13da4:	bls	13dd8 <__assert_fail@plt+0x2bd4>
   13da8:	cmp	r3, #111	; 0x6f
   13dac:	beq	13e00 <__assert_fail@plt+0x2bfc>
   13db0:	cmp	r3, #120	; 0x78
   13db4:	bne	13e38 <__assert_fail@plt+0x2c34>
   13db8:	ldr	r3, [pc, #2528]	; 147a0 <__assert_fail@plt+0x359c>
   13dbc:	str	r3, [r8, #52]	; 0x34
   13dc0:	mov	r3, #16
   13dc4:	str	r3, [r8, #12]
   13dc8:	mov	r3, #6
   13dcc:	str	r3, [r8, #8]
   13dd0:	mov	r9, #1
   13dd4:	b	13944 <__assert_fail@plt+0x2740>
   13dd8:	cmp	r3, #100	; 0x64
   13ddc:	bne	13e38 <__assert_fail@plt+0x2c34>
   13de0:	ldr	r3, [pc, #2488]	; 147a0 <__assert_fail@plt+0x359c>
   13de4:	str	r3, [r8, #52]	; 0x34
   13de8:	mov	r3, #10
   13dec:	str	r3, [r8, #12]
   13df0:	mov	r3, #7
   13df4:	str	r3, [r8, #8]
   13df8:	mov	r9, #1
   13dfc:	b	13944 <__assert_fail@plt+0x2740>
   13e00:	ldr	r3, [pc, #2456]	; 147a0 <__assert_fail@plt+0x359c>
   13e04:	str	r3, [r8, #52]	; 0x34
   13e08:	mov	r3, #8
   13e0c:	str	r3, [r8, #12]
   13e10:	mov	r3, #7
   13e14:	str	r3, [r8, #8]
   13e18:	mov	r9, #1
   13e1c:	b	13944 <__assert_fail@plt+0x2740>
   13e20:	ldr	r3, [pc, #2436]	; 147ac <__assert_fail@plt+0x35a8>
   13e24:	str	r3, [r8, #52]	; 0x34
   13e28:	mov	r3, #0
   13e2c:	str	r3, [r8, #8]
   13e30:	mov	r9, #1
   13e34:	b	13944 <__assert_fail@plt+0x2740>
   13e38:	mov	r2, #5
   13e3c:	ldr	r1, [pc, #2412]	; 147b0 <__assert_fail@plt+0x35ac>
   13e40:	mov	r0, #0
   13e44:	bl	10fc4 <dcgettext@plt>
   13e48:	ldr	r3, [pc, #2392]	; 147a8 <__assert_fail@plt+0x35a4>
   13e4c:	ldr	r3, [r3]
   13e50:	ldrb	r3, [r3]
   13e54:	mov	r2, r0
   13e58:	mov	r1, #0
   13e5c:	mov	r0, #1
   13e60:	bl	1103c <error@plt>
   13e64:	add	r3, r5, #780	; 0x30c
   13e68:	str	r3, [sp]
   13e6c:	add	r3, r8, #136	; 0x88
   13e70:	mov	r2, #0
   13e74:	mov	r1, r2
   13e78:	ldr	r0, [sl]
   13e7c:	bl	182d4 <__assert_fail@plt+0x70d0>
   13e80:	cmp	r0, #0
   13e84:	moveq	r9, #1
   13e88:	beq	13944 <__assert_fail@plt+0x2740>
   13e8c:	ldr	r3, [pc, #2324]	; 147a8 <__assert_fail@plt+0x35a4>
   13e90:	ldr	r3, [r3]
   13e94:	str	r3, [sp]
   13e98:	ldr	r3, [pc, #2324]	; 147b4 <__assert_fail@plt+0x35b0>
   13e9c:	mov	r2, #106	; 0x6a
   13ea0:	ldr	r1, [sp, #32]
   13ea4:	bl	18138 <__assert_fail@plt+0x6f34>
   13ea8:	mov	r3, #1
   13eac:	strb	r3, [r8, #41]	; 0x29
   13eb0:	add	r3, r5, #780	; 0x30c
   13eb4:	str	r3, [sp]
   13eb8:	mov	r3, r7
   13ebc:	mov	r2, #0
   13ec0:	mov	r1, r2
   13ec4:	ldr	r0, [sl]
   13ec8:	bl	182d4 <__assert_fail@plt+0x70d0>
   13ecc:	cmp	r0, #0
   13ed0:	moveq	r9, #1
   13ed4:	beq	13944 <__assert_fail@plt+0x2740>
   13ed8:	ldr	r3, [pc, #2248]	; 147a8 <__assert_fail@plt+0x35a4>
   13edc:	ldr	r3, [r3]
   13ee0:	str	r3, [sp]
   13ee4:	ldr	r3, [pc, #2248]	; 147b4 <__assert_fail@plt+0x35b0>
   13ee8:	mov	r2, #78	; 0x4e
   13eec:	ldr	r1, [sp, #32]
   13ef0:	bl	18138 <__assert_fail@plt+0x6f34>
   13ef4:	ldr	r0, [sl]
   13ef8:	cmp	r0, #0
   13efc:	moveq	r3, #3
   13f00:	streq	r3, [r8, #152]	; 0x98
   13f04:	beq	13f44 <__assert_fail@plt+0x2d40>
   13f08:	add	r3, r5, #780	; 0x30c
   13f0c:	str	r3, [sp]
   13f10:	add	r3, sp, #40	; 0x28
   13f14:	mov	r2, #0
   13f18:	mov	r1, r2
   13f1c:	bl	182d4 <__assert_fail@plt+0x70d0>
   13f20:	cmp	r0, #0
   13f24:	bne	13f50 <__assert_fail@plt+0x2d4c>
   13f28:	ldrd	r2, [sp, #40]	; 0x28
   13f2c:	mvn	r0, #0
   13f30:	mov	r1, #0
   13f34:	cmp	r3, r1
   13f38:	cmpeq	r2, r0
   13f3c:	bhi	13f6c <__assert_fail@plt+0x2d68>
   13f40:	str	r2, [r8, #152]	; 0x98
   13f44:	mov	r9, #1
   13f48:	strb	r9, [r8, #42]	; 0x2a
   13f4c:	b	13944 <__assert_fail@plt+0x2740>
   13f50:	ldr	r3, [pc, #2128]	; 147a8 <__assert_fail@plt+0x35a4>
   13f54:	ldr	r3, [r3]
   13f58:	str	r3, [sp]
   13f5c:	ldr	r3, [pc, #2128]	; 147b4 <__assert_fail@plt+0x35b0>
   13f60:	mov	r2, #83	; 0x53
   13f64:	ldr	r1, [sp, #32]
   13f68:	bl	18138 <__assert_fail@plt+0x6f34>
   13f6c:	mov	r2, #5
   13f70:	ldr	r1, [pc, #2112]	; 147b8 <__assert_fail@plt+0x35b4>
   13f74:	mov	r0, #0
   13f78:	bl	10fc4 <dcgettext@plt>
   13f7c:	mov	r4, r0
   13f80:	ldr	r3, [pc, #2080]	; 147a8 <__assert_fail@plt+0x35a4>
   13f84:	ldr	r0, [r3]
   13f88:	bl	17470 <__assert_fail@plt+0x626c>
   13f8c:	mov	r3, r0
   13f90:	mov	r2, r4
   13f94:	mov	r1, #0
   13f98:	mov	r0, #1
   13f9c:	bl	1103c <error@plt>
   13fa0:	ldr	r0, [sl]
   13fa4:	bl	12be4 <__assert_fail@plt+0x19e0>
   13fa8:	and	r4, r4, r0
   13fac:	uxtb	r4, r4
   13fb0:	mov	r9, #1
   13fb4:	b	13944 <__assert_fail@plt+0x2740>
   13fb8:	mov	r2, #0
   13fbc:	ldr	r3, [pc, #2040]	; 147bc <__assert_fail@plt+0x35b8>
   13fc0:	strb	r2, [r3]
   13fc4:	mov	r9, #1
   13fc8:	b	13944 <__assert_fail@plt+0x2740>
   13fcc:	mov	r3, #1
   13fd0:	strb	r3, [r8, #156]	; 0x9c
   13fd4:	b	13944 <__assert_fail@plt+0x2740>
   13fd8:	mov	r3, #1
   13fdc:	str	r3, [sp, #8]
   13fe0:	ldr	r3, [pc, #2008]	; 147c0 <__assert_fail@plt+0x35bc>
   13fe4:	ldr	r3, [r3]
   13fe8:	str	r3, [sp, #4]
   13fec:	mov	r3, #4
   13ff0:	str	r3, [sp]
   13ff4:	mov	r3, fp
   13ff8:	add	r2, r5, #804	; 0x324
   13ffc:	ldr	r1, [sl]
   14000:	ldr	r0, [pc, #1980]	; 147c4 <__assert_fail@plt+0x35c0>
   14004:	bl	15130 <__assert_fail@plt+0x3f2c>
   14008:	add	r0, r5, r0, lsl #2
   1400c:	ldr	r3, [r0, #796]	; 0x31c
   14010:	cmp	r3, #0
   14014:	beq	14024 <__assert_fail@plt+0x2e20>
   14018:	cmp	r3, #1
   1401c:	strbeq	r3, [r8, #24]
   14020:	b	13944 <__assert_fail@plt+0x2740>
   14024:	mov	r3, #0
   14028:	strb	r3, [r8, #24]
   1402c:	b	13944 <__assert_fail@plt+0x2740>
   14030:	ldr	r0, [pc, #1936]	; 147c8 <__assert_fail@plt+0x35c4>
   14034:	bl	12be4 <__assert_fail@plt+0x19e0>
   14038:	and	r4, r4, r0
   1403c:	uxtb	r4, r4
   14040:	b	13944 <__assert_fail@plt+0x2740>
   14044:	ldr	r0, [pc, #1920]	; 147cc <__assert_fail@plt+0x35c8>
   14048:	bl	12be4 <__assert_fail@plt+0x19e0>
   1404c:	and	r4, r4, r0
   14050:	uxtb	r4, r4
   14054:	b	13944 <__assert_fail@plt+0x2740>
   14058:	ldr	r0, [pc, #1904]	; 147d0 <__assert_fail@plt+0x35cc>
   1405c:	bl	12be4 <__assert_fail@plt+0x19e0>
   14060:	and	r4, r4, r0
   14064:	uxtb	r4, r4
   14068:	b	13944 <__assert_fail@plt+0x2740>
   1406c:	ldr	r0, [pc, #1888]	; 147d4 <__assert_fail@plt+0x35d0>
   14070:	bl	12be4 <__assert_fail@plt+0x19e0>
   14074:	and	r4, r4, r0
   14078:	uxtb	r4, r4
   1407c:	b	13944 <__assert_fail@plt+0x2740>
   14080:	ldr	r0, [pc, #1872]	; 147d8 <__assert_fail@plt+0x35d4>
   14084:	bl	12be4 <__assert_fail@plt+0x19e0>
   14088:	and	r4, r4, r0
   1408c:	uxtb	r4, r4
   14090:	b	13944 <__assert_fail@plt+0x2740>
   14094:	ldr	r0, [pc, #1856]	; 147dc <__assert_fail@plt+0x35d8>
   14098:	bl	12be4 <__assert_fail@plt+0x19e0>
   1409c:	and	r4, r4, r0
   140a0:	uxtb	r4, r4
   140a4:	b	13944 <__assert_fail@plt+0x2740>
   140a8:	ldr	r0, [pc, #1840]	; 147e0 <__assert_fail@plt+0x35dc>
   140ac:	bl	12be4 <__assert_fail@plt+0x19e0>
   140b0:	and	r4, r4, r0
   140b4:	uxtb	r4, r4
   140b8:	b	13944 <__assert_fail@plt+0x2740>
   140bc:	ldr	r0, [pc, #1824]	; 147e4 <__assert_fail@plt+0x35e0>
   140c0:	bl	12be4 <__assert_fail@plt+0x19e0>
   140c4:	and	r4, r4, r0
   140c8:	uxtb	r4, r4
   140cc:	b	13944 <__assert_fail@plt+0x2740>
   140d0:	ldr	r0, [pc, #1808]	; 147e8 <__assert_fail@plt+0x35e4>
   140d4:	bl	12be4 <__assert_fail@plt+0x19e0>
   140d8:	and	r4, r4, r0
   140dc:	uxtb	r4, r4
   140e0:	b	13944 <__assert_fail@plt+0x2740>
   140e4:	ldr	r0, [pc, #1792]	; 147ec <__assert_fail@plt+0x35e8>
   140e8:	bl	12be4 <__assert_fail@plt+0x19e0>
   140ec:	and	r4, r4, r0
   140f0:	uxtb	r4, r4
   140f4:	b	13944 <__assert_fail@plt+0x2740>
   140f8:	ldr	r0, [pc, #1776]	; 147f0 <__assert_fail@plt+0x35ec>
   140fc:	bl	12be4 <__assert_fail@plt+0x19e0>
   14100:	and	r4, r4, r0
   14104:	uxtb	r4, r4
   14108:	b	13944 <__assert_fail@plt+0x2740>
   1410c:	ldr	r0, [pc, #1760]	; 147f4 <__assert_fail@plt+0x35f0>
   14110:	bl	12be4 <__assert_fail@plt+0x19e0>
   14114:	and	r4, r4, r0
   14118:	uxtb	r4, r4
   1411c:	b	13944 <__assert_fail@plt+0x2740>
   14120:	ldr	r0, [pc, #1744]	; 147f8 <__assert_fail@plt+0x35f4>
   14124:	bl	12be4 <__assert_fail@plt+0x19e0>
   14128:	and	r4, r4, r0
   1412c:	uxtb	r4, r4
   14130:	b	13944 <__assert_fail@plt+0x2740>
   14134:	ldr	r0, [pc, #1728]	; 147fc <__assert_fail@plt+0x35f8>
   14138:	bl	12be4 <__assert_fail@plt+0x19e0>
   1413c:	and	r4, r4, r0
   14140:	uxtb	r4, r4
   14144:	b	13944 <__assert_fail@plt+0x2740>
   14148:	ldr	r0, [sl]
   1414c:	cmp	r0, #0
   14150:	beq	14234 <__assert_fail@plt+0x3030>
   14154:	ldr	r3, [pc, #1584]	; 1478c <__assert_fail@plt+0x3588>
   14158:	str	r3, [sp]
   1415c:	add	r3, sp, #40	; 0x28
   14160:	mov	r2, #10
   14164:	mov	r1, #0
   14168:	bl	182d4 <__assert_fail@plt+0x70d0>
   1416c:	cmp	r0, #0
   14170:	bne	141a0 <__assert_fail@plt+0x2f9c>
   14174:	ldrd	r2, [sp, #40]	; 0x28
   14178:	mvn	r0, #0
   1417c:	mov	r1, #0
   14180:	cmp	r3, r1
   14184:	cmpeq	r2, r0
   14188:	bhi	141bc <__assert_fail@plt+0x2fb8>
   1418c:	str	r2, [sp, #28]
   14190:	mov	r3, #1
   14194:	str	r3, [sp, #24]
   14198:	mov	r9, r3
   1419c:	b	13944 <__assert_fail@plt+0x2740>
   141a0:	ldr	r3, [pc, #1536]	; 147a8 <__assert_fail@plt+0x35a4>
   141a4:	ldr	r3, [r3]
   141a8:	str	r3, [sp]
   141ac:	ldr	r3, [pc, #1536]	; 147b4 <__assert_fail@plt+0x35b0>
   141b0:	mov	r2, #119	; 0x77
   141b4:	ldr	r1, [sp, #32]
   141b8:	bl	18138 <__assert_fail@plt+0x6f34>
   141bc:	mov	r2, #5
   141c0:	ldr	r1, [pc, #1520]	; 147b8 <__assert_fail@plt+0x35b4>
   141c4:	mov	r0, #0
   141c8:	bl	10fc4 <dcgettext@plt>
   141cc:	mov	r4, r0
   141d0:	ldr	r3, [pc, #1488]	; 147a8 <__assert_fail@plt+0x35a4>
   141d4:	ldr	r0, [r3]
   141d8:	bl	17470 <__assert_fail@plt+0x626c>
   141dc:	mov	r3, r0
   141e0:	mov	r2, r4
   141e4:	mov	r1, #0
   141e8:	mov	r0, #1
   141ec:	bl	1103c <error@plt>
   141f0:	mov	r0, #0
   141f4:	bl	133e4 <__assert_fail@plt+0x21e0>
   141f8:	mov	r4, #0
   141fc:	str	r4, [sp, #4]
   14200:	ldr	r3, [pc, #1528]	; 14800 <__assert_fail@plt+0x35fc>
   14204:	str	r3, [sp]
   14208:	ldr	r3, [pc, #1524]	; 14804 <__assert_fail@plt+0x3600>
   1420c:	ldr	r3, [r3]
   14210:	ldr	r2, [pc, #1520]	; 14808 <__assert_fail@plt+0x3604>
   14214:	ldr	r1, [pc, #1520]	; 1480c <__assert_fail@plt+0x3608>
   14218:	ldr	r0, [pc, #1564]	; 1483c <__assert_fail@plt+0x3638>
   1421c:	ldr	r0, [r0]
   14220:	bl	1793c <__assert_fail@plt+0x6738>
   14224:	mov	r0, r4
   14228:	bl	110b4 <exit@plt>
   1422c:	mov	r0, #1
   14230:	bl	133e4 <__assert_fail@plt+0x21e0>
   14234:	mov	r3, #1
   14238:	str	r3, [sp, #24]
   1423c:	mov	r9, r3
   14240:	mov	r3, #32
   14244:	str	r3, [sp, #28]
   14248:	b	13944 <__assert_fail@plt+0x2740>
   1424c:	cmp	r4, #0
   14250:	beq	14e4c <__assert_fail@plt+0x3c48>
   14254:	ldr	r3, [pc, #1344]	; 1479c <__assert_fail@plt+0x3598>
   14258:	ldrb	r3, [r3, #42]	; 0x2a
   1425c:	cmp	r3, #0
   14260:	beq	14274 <__assert_fail@plt+0x3070>
   14264:	ldr	r3, [pc, #1328]	; 1479c <__assert_fail@plt+0x3598>
   14268:	ldr	r3, [r3]
   1426c:	cmp	r3, #0
   14270:	bne	142c0 <__assert_fail@plt+0x30bc>
   14274:	ldr	r3, [pc, #1428]	; 14810 <__assert_fail@plt+0x360c>
   14278:	ldr	r3, [r3]
   1427c:	ldr	r2, [sp, #20]
   14280:	sub	r7, r2, r3
   14284:	cmp	r9, #0
   14288:	beq	142e0 <__assert_fail@plt+0x30dc>
   1428c:	ldr	r2, [pc, #1288]	; 1479c <__assert_fail@plt+0x3598>
   14290:	ldrb	r2, [r2, #156]	; 0x9c
   14294:	cmp	r2, #0
   14298:	moveq	r8, #0
   1429c:	moveq	r9, #0
   142a0:	beq	1431c <__assert_fail@plt+0x3118>
   142a4:	cmp	r7, #2
   142a8:	beq	144c8 <__assert_fail@plt+0x32c4>
   142ac:	cmp	r7, #3
   142b0:	beq	14594 <__assert_fail@plt+0x3390>
   142b4:	cmp	r7, #1
   142b8:	bne	142f8 <__assert_fail@plt+0x30f4>
   142bc:	b	14494 <__assert_fail@plt+0x3290>
   142c0:	mov	r2, #5
   142c4:	ldr	r1, [pc, #1352]	; 14814 <__assert_fail@plt+0x3610>
   142c8:	mov	r0, #0
   142cc:	bl	10fc4 <dcgettext@plt>
   142d0:	mov	r2, r0
   142d4:	mov	r1, #0
   142d8:	mov	r0, #1
   142dc:	bl	1103c <error@plt>
   142e0:	cmp	r7, #2
   142e4:	beq	144c8 <__assert_fail@plt+0x32c4>
   142e8:	cmp	r7, #3
   142ec:	beq	14594 <__assert_fail@plt+0x3390>
   142f0:	cmp	r7, #1
   142f4:	beq	1446c <__assert_fail@plt+0x3268>
   142f8:	ldr	r3, [pc, #1180]	; 1479c <__assert_fail@plt+0x3598>
   142fc:	ldrb	r3, [r3, #156]	; 0x9c
   14300:	cmp	r7, #1
   14304:	movle	r3, #0
   14308:	andgt	r3, r3, #1
   1430c:	cmp	r3, #0
   14310:	moveq	r8, #0
   14314:	moveq	r9, #0
   14318:	bne	14630 <__assert_fail@plt+0x342c>
   1431c:	ldr	r3, [pc, #1144]	; 1479c <__assert_fail@plt+0x3598>
   14320:	ldrb	r3, [r3, #157]	; 0x9d
   14324:	cmp	r3, #0
   14328:	beq	14360 <__assert_fail@plt+0x315c>
   1432c:	ldr	r3, [pc, #1128]	; 1479c <__assert_fail@plt+0x3598>
   14330:	ldr	r2, [r3, #52]	; 0x34
   14334:	ldr	r3, [pc, #1136]	; 147ac <__assert_fail@plt+0x35a8>
   14338:	cmp	r2, r3
   1433c:	ldreq	r3, [pc, #1112]	; 1479c <__assert_fail@plt+0x3598>
   14340:	moveq	r2, #8
   14344:	streq	r2, [r3, #12]
   14348:	moveq	r2, #7
   1434c:	streq	r2, [r3, #8]
   14350:	ldreq	r2, [pc, #1216]	; 14818 <__assert_fail@plt+0x3614>
   14354:	ldrne	r2, [pc, #1216]	; 1481c <__assert_fail@plt+0x3618>
   14358:	ldrne	r3, [pc, #1084]	; 1479c <__assert_fail@plt+0x3598>
   1435c:	str	r2, [r3, #52]	; 0x34
   14360:	ldr	r3, [pc, #1076]	; 1479c <__assert_fail@plt+0x3598>
   14364:	ldrb	r3, [r3, #41]	; 0x29
   14368:	cmp	r3, #0
   1436c:	beq	14394 <__assert_fail@plt+0x3190>
   14370:	ldr	ip, [pc, #1060]	; 1479c <__assert_fail@plt+0x3598>
   14374:	ldrd	r0, [ip, #136]	; 0x88
   14378:	ldrd	r2, [ip, #144]	; 0x90
   1437c:	adds	r2, r2, r0
   14380:	adc	r3, r3, r1
   14384:	strd	r2, [ip, #160]	; 0xa0
   14388:	cmp	r1, r3
   1438c:	cmpeq	r0, r2
   14390:	bhi	14698 <__assert_fail@plt+0x3494>
   14394:	ldr	r3, [pc, #1024]	; 1479c <__assert_fail@plt+0x3598>
   14398:	ldr	r3, [r3]
   1439c:	cmp	r3, #0
   143a0:	beq	146b8 <__assert_fail@plt+0x34b4>
   143a4:	cmp	r7, #0
   143a8:	ldrgt	r3, [pc, #1120]	; 14810 <__assert_fail@plt+0x360c>
   143ac:	ldrgt	r3, [r3]
   143b0:	addgt	r6, r6, r3, lsl #2
   143b4:	ldrgt	r3, [pc, #992]	; 1479c <__assert_fail@plt+0x3598>
   143b8:	strgt	r6, [r3, #28]
   143bc:	ldrle	r2, [pc, #1116]	; 14820 <__assert_fail@plt+0x361c>
   143c0:	ldrle	r3, [pc, #980]	; 1479c <__assert_fail@plt+0x3598>
   143c4:	strle	r2, [r3, #28]
   143c8:	bl	123a4 <__assert_fail@plt+0x11a0>
   143cc:	mov	r5, r0
   143d0:	ldr	r3, [pc, #964]	; 1479c <__assert_fail@plt+0x3598>
   143d4:	ldr	r3, [r3, #36]	; 0x24
   143d8:	cmp	r3, #0
   143dc:	beq	14940 <__assert_fail@plt+0x373c>
   143e0:	ldr	r6, [pc, #948]	; 1479c <__assert_fail@plt+0x3598>
   143e4:	ldrd	r0, [r6, #136]	; 0x88
   143e8:	bl	125d8 <__assert_fail@plt+0x13d4>
   143ec:	and	r5, r5, r0
   143f0:	uxtb	r5, r5
   143f4:	str	r5, [sp, #20]
   143f8:	ldr	r3, [r6, #36]	; 0x24
   143fc:	cmp	r3, #0
   14400:	beq	14940 <__assert_fail@plt+0x373c>
   14404:	ldrb	r3, [r6, #157]	; 0x9d
   14408:	cmp	r3, #0
   1440c:	moveq	r8, #0
   14410:	moveq	r9, #0
   14414:	beq	14424 <__assert_fail@plt+0x3220>
   14418:	ldrd	r2, [r6, #136]	; 0x88
   1441c:	subs	r8, r8, r2
   14420:	sbc	r9, r9, r3
   14424:	ldr	r3, [pc, #880]	; 1479c <__assert_fail@plt+0x3598>
   14428:	strd	r8, [r3, #16]
   1442c:	bl	1133c <__assert_fail@plt+0x138>
   14430:	mov	r5, r0
   14434:	ldr	r3, [sp, #24]
   14438:	cmp	r3, #0
   1443c:	beq	1471c <__assert_fail@plt+0x3518>
   14440:	ldr	r6, [sp, #28]
   14444:	cmp	r6, #0
   14448:	beq	146c4 <__assert_fail@plt+0x34c0>
   1444c:	mov	r1, r0
   14450:	mov	r0, r6
   14454:	bl	18c68 <__assert_fail@plt+0x7a64>
   14458:	cmp	r1, #0
   1445c:	bne	146c4 <__assert_fail@plt+0x34c0>
   14460:	ldr	r3, [pc, #820]	; 1479c <__assert_fail@plt+0x3598>
   14464:	str	r6, [r3, #44]	; 0x2c
   14468:	b	146f4 <__assert_fail@plt+0x34f0>
   1446c:	ldr	r2, [pc, #808]	; 1479c <__assert_fail@plt+0x3598>
   14470:	ldrb	r2, [r2, #156]	; 0x9c
   14474:	cmp	r2, #0
   14478:	bne	14494 <__assert_fail@plt+0x3290>
   1447c:	ldr	r2, [r6, r3, lsl #2]
   14480:	ldrb	r2, [r2]
   14484:	cmp	r2, #43	; 0x2b
   14488:	movne	r8, #0
   1448c:	movne	r9, #0
   14490:	bne	1431c <__assert_fail@plt+0x3118>
   14494:	add	r1, sp, #32
   14498:	ldr	r0, [r6, r3, lsl #2]
   1449c:	bl	115d4 <__assert_fail@plt+0x3d0>
   144a0:	cmp	r0, #0
   144a4:	beq	14e54 <__assert_fail@plt+0x3c50>
   144a8:	ldrd	r2, [sp, #32]
   144ac:	ldr	r1, [pc, #744]	; 1479c <__assert_fail@plt+0x3598>
   144b0:	strd	r2, [r1, #136]	; 0x88
   144b4:	add	r6, r6, #4
   144b8:	mov	r8, #0
   144bc:	mov	r9, #0
   144c0:	mov	r7, #0
   144c4:	b	1431c <__assert_fail@plt+0x3118>
   144c8:	ldr	r2, [pc, #716]	; 1479c <__assert_fail@plt+0x3598>
   144cc:	ldrb	r2, [r2, #156]	; 0x9c
   144d0:	cmp	r2, #0
   144d4:	bne	144f8 <__assert_fail@plt+0x32f4>
   144d8:	add	r2, r3, #1
   144dc:	ldr	r2, [r6, r2, lsl #2]
   144e0:	ldrb	r2, [r2]
   144e4:	cmp	r2, #43	; 0x2b
   144e8:	beq	144f8 <__assert_fail@plt+0x32f4>
   144ec:	sub	r2, r2, #48	; 0x30
   144f0:	cmp	r2, #9
   144f4:	bhi	14e64 <__assert_fail@plt+0x3c60>
   144f8:	add	r3, r3, #1
   144fc:	add	r1, sp, #40	; 0x28
   14500:	ldr	r0, [r6, r3, lsl #2]
   14504:	bl	115d4 <__assert_fail@plt+0x3d0>
   14508:	cmp	r0, #0
   1450c:	beq	14620 <__assert_fail@plt+0x341c>
   14510:	ldr	r3, [pc, #644]	; 1479c <__assert_fail@plt+0x3598>
   14514:	ldrb	r3, [r3, #156]	; 0x9c
   14518:	cmp	r3, #0
   1451c:	bne	14554 <__assert_fail@plt+0x3350>
   14520:	ldrd	r2, [sp, #40]	; 0x28
   14524:	ldr	r1, [pc, #624]	; 1479c <__assert_fail@plt+0x3598>
   14528:	strd	r2, [r1, #136]	; 0x88
   1452c:	ldr	r3, [pc, #732]	; 14810 <__assert_fail@plt+0x360c>
   14530:	ldr	r3, [r3]
   14534:	add	r2, r3, #1
   14538:	ldr	r3, [r6, r3, lsl #2]
   1453c:	str	r3, [r6, r2, lsl #2]
   14540:	add	r6, r6, #4
   14544:	mov	r8, #0
   14548:	mov	r9, #0
   1454c:	mov	r7, #1
   14550:	b	1431c <__assert_fail@plt+0x3118>
   14554:	ldr	r3, [pc, #692]	; 14810 <__assert_fail@plt+0x360c>
   14558:	ldr	r3, [r3]
   1455c:	add	r1, sp, #32
   14560:	ldr	r0, [r6, r3, lsl #2]
   14564:	bl	115d4 <__assert_fail@plt+0x3d0>
   14568:	cmp	r0, #0
   1456c:	beq	14520 <__assert_fail@plt+0x331c>
   14570:	ldr	r1, [pc, #548]	; 1479c <__assert_fail@plt+0x3598>
   14574:	ldrd	r2, [sp, #32]
   14578:	strd	r2, [r1, #136]	; 0x88
   1457c:	mov	r3, #1
   14580:	strb	r3, [r1, #157]	; 0x9d
   14584:	ldrd	r8, [sp, #40]	; 0x28
   14588:	add	r6, r6, #8
   1458c:	mov	r7, #0
   14590:	b	1431c <__assert_fail@plt+0x3118>
   14594:	ldr	r2, [pc, #512]	; 1479c <__assert_fail@plt+0x3598>
   14598:	ldrb	r2, [r2, #156]	; 0x9c
   1459c:	cmp	r2, #0
   145a0:	moveq	r8, #0
   145a4:	moveq	r9, #0
   145a8:	moveq	r7, #3
   145ac:	beq	1431c <__assert_fail@plt+0x3118>
   145b0:	add	r3, r3, #1
   145b4:	add	r1, sp, #32
   145b8:	ldr	r0, [r6, r3, lsl #2]
   145bc:	bl	115d4 <__assert_fail@plt+0x3d0>
   145c0:	cmp	r0, #0
   145c4:	moveq	r7, #3
   145c8:	beq	142f8 <__assert_fail@plt+0x30f4>
   145cc:	ldr	r3, [pc, #572]	; 14810 <__assert_fail@plt+0x360c>
   145d0:	ldr	r3, [r3]
   145d4:	add	r3, r3, #2
   145d8:	add	r1, sp, #40	; 0x28
   145dc:	ldr	r0, [r6, r3, lsl #2]
   145e0:	bl	115d4 <__assert_fail@plt+0x3d0>
   145e4:	cmp	r0, #0
   145e8:	beq	14628 <__assert_fail@plt+0x3424>
   145ec:	ldr	r1, [pc, #424]	; 1479c <__assert_fail@plt+0x3598>
   145f0:	ldrd	r2, [sp, #32]
   145f4:	strd	r2, [r1, #136]	; 0x88
   145f8:	mov	r7, #1
   145fc:	strb	r7, [r1, #157]	; 0x9d
   14600:	ldrd	r8, [sp, #40]	; 0x28
   14604:	ldr	r3, [pc, #516]	; 14810 <__assert_fail@plt+0x360c>
   14608:	ldr	r3, [r3]
   1460c:	add	r2, r3, #2
   14610:	ldr	r3, [r6, r3, lsl #2]
   14614:	str	r3, [r6, r2, lsl #2]
   14618:	add	r6, r6, #8
   1461c:	b	1431c <__assert_fail@plt+0x3118>
   14620:	mov	r7, #2
   14624:	b	142f8 <__assert_fail@plt+0x30f4>
   14628:	mov	r7, #3
   1462c:	b	142f8 <__assert_fail@plt+0x30f4>
   14630:	mov	r2, #5
   14634:	ldr	r1, [pc, #488]	; 14824 <__assert_fail@plt+0x3620>
   14638:	mov	r0, #0
   1463c:	bl	10fc4 <dcgettext@plt>
   14640:	mov	r4, r0
   14644:	ldr	r3, [pc, #452]	; 14810 <__assert_fail@plt+0x360c>
   14648:	ldr	r3, [r3]
   1464c:	add	r3, r3, #1
   14650:	ldr	r0, [r6, r3, lsl #2]
   14654:	bl	17470 <__assert_fail@plt+0x626c>
   14658:	mov	r3, r0
   1465c:	mov	r2, r4
   14660:	mov	r1, #0
   14664:	mov	r0, r1
   14668:	bl	1103c <error@plt>
   1466c:	mov	r2, #5
   14670:	ldr	r1, [pc, #432]	; 14828 <__assert_fail@plt+0x3624>
   14674:	mov	r0, #0
   14678:	bl	10fc4 <dcgettext@plt>
   1467c:	mov	r3, r0
   14680:	ldr	r2, [pc, #420]	; 1482c <__assert_fail@plt+0x3628>
   14684:	mov	r1, #0
   14688:	mov	r0, r1
   1468c:	bl	1103c <error@plt>
   14690:	mov	r0, #1
   14694:	bl	133e4 <__assert_fail@plt+0x21e0>
   14698:	mov	r2, #5
   1469c:	ldr	r1, [pc, #396]	; 14830 <__assert_fail@plt+0x362c>
   146a0:	mov	r0, #0
   146a4:	bl	10fc4 <dcgettext@plt>
   146a8:	mov	r2, r0
   146ac:	mov	r1, #0
   146b0:	mov	r0, #1
   146b4:	bl	1103c <error@plt>
   146b8:	ldr	r0, [pc, #372]	; 14834 <__assert_fail@plt+0x3630>
   146bc:	bl	12be4 <__assert_fail@plt+0x19e0>
   146c0:	b	143a4 <__assert_fail@plt+0x31a0>
   146c4:	mov	r2, #5
   146c8:	ldr	r1, [pc, #360]	; 14838 <__assert_fail@plt+0x3634>
   146cc:	mov	r0, #0
   146d0:	bl	10fc4 <dcgettext@plt>
   146d4:	str	r5, [sp]
   146d8:	ldr	r3, [sp, #28]
   146dc:	mov	r2, r0
   146e0:	mov	r1, #0
   146e4:	mov	r0, r1
   146e8:	bl	1103c <error@plt>
   146ec:	ldr	r3, [pc, #168]	; 1479c <__assert_fail@plt+0x3598>
   146f0:	str	r5, [r3, #44]	; 0x2c
   146f4:	ldr	r3, [pc, #160]	; 1479c <__assert_fail@plt+0x3598>
   146f8:	ldr	sl, [r3]
   146fc:	ldr	r9, [r3, #44]	; 0x2c
   14700:	ldr	r5, [r3, #4]
   14704:	add	r5, r5, #4
   14708:	mov	r7, r5
   1470c:	mov	r8, #0
   14710:	mov	r6, r8
   14714:	ldr	fp, [pc, #136]	; 147a4 <__assert_fail@plt+0x35a0>
   14718:	b	14774 <__assert_fail@plt+0x3570>
   1471c:	cmp	r0, #15
   14720:	bgt	14740 <__assert_fail@plt+0x353c>
   14724:	mov	r1, r0
   14728:	mov	r0, #16
   1472c:	bl	18c88 <__assert_fail@plt+0x7a84>
   14730:	mul	r0, r5, r0
   14734:	ldr	r3, [pc, #96]	; 1479c <__assert_fail@plt+0x3598>
   14738:	str	r0, [r3, #44]	; 0x2c
   1473c:	b	146f4 <__assert_fail@plt+0x34f0>
   14740:	ldr	r3, [pc, #84]	; 1479c <__assert_fail@plt+0x3598>
   14744:	str	r0, [r3, #44]	; 0x2c
   14748:	b	146f4 <__assert_fail@plt+0x34f0>
   1474c:	ldr	r3, [r7, #-32]	; 0xffffffe0
   14750:	ldr	r1, [fp, r3, lsl #2]
   14754:	mov	r0, r9
   14758:	bl	18a7c <__assert_fail@plt+0x7878>
   1475c:	ldr	r3, [r7, #-12]
   14760:	add	r3, r3, #1
   14764:	mul	r0, r3, r0
   14768:	cmp	r8, r0
   1476c:	movcc	r8, r0
   14770:	add	r6, r6, #1
   14774:	add	r7, r7, #32
   14778:	cmp	r6, sl
   1477c:	bne	1474c <__assert_fail@plt+0x3548>
   14780:	mov	r7, #0
   14784:	ldr	sl, [pc, #24]	; 147a4 <__assert_fail@plt+0x35a0>
   14788:	b	148a0 <__assert_fail@plt+0x369c>
   1478c:	andeq	sl, r1, r8, lsl #3
   14790:	andeq	sl, r1, ip, lsl #8
   14794:			; <UNDEFINED> instruction: 0x0001a4b4
   14798:	andeq	r5, r1, r4, lsr #4
   1479c:	muleq	r2, r0, r1
   147a0:	andeq	r1, r1, r0, asr #7
   147a4:	andeq	r9, r1, r4, asr #1
   147a8:	andeq	fp, r2, r8, lsl #3
   147ac:	andeq	r1, r1, r8, lsr r3
   147b0:	andeq	sl, r1, ip, asr #9
   147b4:	andeq	r9, r1, ip, ror #5
   147b8:	andeq	sl, r1, r4, lsl r5
   147bc:	andeq	fp, r2, r8, lsl r1
   147c0:	andeq	fp, r2, r0, lsr #2
   147c4:	andeq	sl, r1, r4, lsr #10
   147c8:	andeq	sl, r1, r0, lsr r5
   147cc:	andeq	sl, r1, r4, lsr r5
   147d0:			; <UNDEFINED> instruction: 0x0001acb8
   147d4:	andeq	sl, r1, r8, lsr r5
   147d8:	andeq	sl, r1, ip, lsr r5
   147dc:	andeq	sl, r1, r0, asr #10
   147e0:	andeq	sl, r1, r4, asr #10
   147e4:	andeq	sl, r1, r8, asr #10
   147e8:	andeq	sl, r1, ip, asr #10
   147ec:	andeq	sl, r1, r0, asr r5
   147f0:	andeq	sl, r1, r4, asr r5
   147f4:	andeq	sl, r1, r8, asr r5
   147f8:	andeq	sl, r1, ip, asr r5
   147fc:	andeq	sl, r1, r0, ror #10
   14800:	andeq	sl, r1, r4, ror #10
   14804:	andeq	fp, r2, ip, lsl r1
   14808:	andeq	sl, r1, r8, lsl #8
   1480c:	andeq	r9, r1, r4, asr r6
   14810:	andeq	fp, r2, r0, ror r1
   14814:	andeq	sl, r1, r4, ror r5
   14818:	andeq	r1, r1, r8, lsl #10
   1481c:	muleq	r1, ip, r5
   14820:	strdeq	r9, [r1], -r4
   14824:	andeq	sl, r1, r4, lsr #11
   14828:			; <UNDEFINED> instruction: 0x0001a5b8
   1482c:	andeq	sl, r1, ip, asr #15
   14830:	andeq	sl, r1, r8, ror #11
   14834:	andeq	sl, r1, r0, lsl r6
   14838:	andeq	sl, r1, r4, lsl r6
   1483c:	andeq	fp, r2, r4, lsl #3
   14840:	andeq	r9, r1, r8, asr #8
   14844:	andeq	r9, r1, r4, lsr r4
   14848:	andeq	r9, r1, r8, lsr r4
   1484c:	andeq	r9, r1, ip, lsr r4
   14850:	andeq	r9, r1, r0, asr #8
   14854:	andeq	r9, r1, r4, asr #8
   14858:	andeq	r9, r1, ip, asr #8
   1485c:	andeq	r0, r0, ip, ror r5
   14860:	strdeq	r9, [r1], -ip
   14864:	andeq	r0, r0, sl, lsl #11
   14868:	andeq	sl, r1, r4, asr #12
   1486c:	muleq	r1, ip, r4
   14870:	muleq	r2, r0, r1
   14874:	andeq	fp, r2, r0, lsl #3
   14878:	andeq	r9, r1, r4, asr r4
   1487c:	ldr	r3, [r5, #-32]	; 0xffffffe0
   14880:	ldr	r1, [sl, r3, lsl #2]
   14884:	mov	r0, r9
   14888:	bl	18a7c <__assert_fail@plt+0x7878>
   1488c:	ldr	r3, [r5, #-12]
   14890:	mul	r3, r3, r0
   14894:	sub	r3, r8, r3
   14898:	str	r3, [r5, #-8]
   1489c:	add	r7, r7, #1
   148a0:	add	r5, r5, #32
   148a4:	cmp	r6, r7
   148a8:	bne	1487c <__assert_fail@plt+0x3678>
   148ac:	ldr	r3, [pc, #-68]	; 14870 <__assert_fail@plt+0x366c>
   148b0:	ldrb	r5, [r3, #42]	; 0x2a
   148b4:	cmp	r5, #0
   148b8:	beq	14bc8 <__assert_fail@plt+0x39c4>
   148bc:	mov	r4, r3
   148c0:	ldr	r0, [r3, #152]	; 0x98
   148c4:	cmp	r0, #100	; 0x64
   148c8:	movcc	r0, #100	; 0x64
   148cc:	str	r0, [sp, #32]
   148d0:	bl	17a08 <__assert_fail@plt+0x6804>
   148d4:	mov	r8, r0
   148d8:	ldrd	r6, [r4, #136]	; 0x88
   148dc:	ldr	fp, [pc, #-168]	; 1483c <__assert_fail@plt+0x3638>
   148e0:	ldrb	r3, [r4, #41]	; 0x29
   148e4:	cmp	r3, #0
   148e8:	beq	14960 <__assert_fail@plt+0x375c>
   148ec:	ldr	r2, [r4, #152]	; 0x98
   148f0:	mov	r0, r2
   148f4:	mov	r1, #0
   148f8:	ldrd	r2, [r4, #160]	; 0xa0
   148fc:	cmp	r1, r3
   14900:	cmpeq	r0, r2
   14904:	bhi	14bb0 <__assert_fail@plt+0x39ac>
   14908:	subs	r2, r2, r0
   1490c:	sbc	r3, r3, r1
   14910:	cmp	r3, r7
   14914:	cmpeq	r2, r6
   14918:	bls	14bb0 <__assert_fail@plt+0x39ac>
   1491c:	mov	r9, #0
   14920:	b	14964 <__assert_fail@plt+0x3760>
   14924:	mov	r0, r8
   14928:	bl	15574 <__assert_fail@plt+0x4370>
   1492c:	mov	r0, r5
   14930:	ldr	r3, [sp, #20]
   14934:	tst	r0, r3
   14938:	movne	r5, #1
   1493c:	moveq	r5, #0
   14940:	ldr	r3, [pc, #-216]	; 14870 <__assert_fail@plt+0x366c>
   14944:	ldrb	r3, [r3, #40]	; 0x28
   14948:	cmp	r3, #0
   1494c:	bne	14e10 <__assert_fail@plt+0x3c0c>
   14950:	eor	r0, r5, #1
   14954:	uxtb	r0, r0
   14958:	add	sp, sp, #52	; 0x34
   1495c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14960:	mov	r9, #0
   14964:	ldr	r3, [r4, #152]	; 0x98
   14968:	cmp	r9, r3
   1496c:	bcs	14a08 <__assert_fail@plt+0x3804>
   14970:	add	r0, sp, #40	; 0x28
   14974:	bl	128d0 <__assert_fail@plt+0x16cc>
   14978:	and	r5, r5, r0
   1497c:	adds	r6, r6, #1
   14980:	adc	r7, r7, #0
   14984:	ldr	sl, [sp, #40]	; 0x28
   14988:	cmp	sl, #0
   1498c:	blt	14924 <__assert_fail@plt+0x3720>
   14990:	bl	110a8 <__ctype_b_loc@plt>
   14994:	ldr	r2, [r0]
   14998:	lsl	r3, sl, #1
   1499c:	ldrh	r3, [r2, r3]
   149a0:	tst	r3, #16384	; 0x4000
   149a4:	beq	148e0 <__assert_fail@plt+0x36dc>
   149a8:	strb	sl, [r8, r9]
   149ac:	add	r9, r9, #1
   149b0:	b	14964 <__assert_fail@plt+0x3760>
   149b4:	ldr	r3, [sp, #32]
   149b8:	cmp	r3, r9
   149bc:	beq	14a58 <__assert_fail@plt+0x3854>
   149c0:	add	r0, sp, #40	; 0x28
   149c4:	bl	128d0 <__assert_fail@plt+0x16cc>
   149c8:	and	r5, r5, r0
   149cc:	adds	r6, r6, #1
   149d0:	adc	r7, r7, #0
   149d4:	ldr	sl, [sp, #40]	; 0x28
   149d8:	cmp	sl, #0
   149dc:	blt	14a6c <__assert_fail@plt+0x3868>
   149e0:	cmp	sl, #0
   149e4:	beq	14a24 <__assert_fail@plt+0x3820>
   149e8:	bl	110a8 <__ctype_b_loc@plt>
   149ec:	ldr	r2, [r0]
   149f0:	lsl	r3, sl, #1
   149f4:	ldrh	r3, [r2, r3]
   149f8:	tst	r3, #16384	; 0x4000
   149fc:	beq	148e0 <__assert_fail@plt+0x36dc>
   14a00:	strb	sl, [r8, r9]
   14a04:	add	r9, r9, #1
   14a08:	ldrb	r3, [r4, #41]	; 0x29
   14a0c:	cmp	r3, #0
   14a10:	beq	149b4 <__assert_fail@plt+0x37b0>
   14a14:	ldrd	r2, [r4, #160]	; 0xa0
   14a18:	cmp	r7, r3
   14a1c:	cmpeq	r6, r2
   14a20:	bcc	149b4 <__assert_fail@plt+0x37b0>
   14a24:	mov	r3, #0
   14a28:	strb	r3, [r8, r9]
   14a2c:	mov	r1, #0
   14a30:	mvn	r0, r9
   14a34:	mvn	r1, r1
   14a38:	ldr	r3, [r4, #52]	; 0x34
   14a3c:	mov	r2, #32
   14a40:	adds	r0, r0, r6
   14a44:	adc	r1, r1, r7
   14a48:	blx	r3
   14a4c:	sub	r9, r8, #1
   14a50:	ldr	sl, [pc, #-536]	; 14840 <__assert_fail@plt+0x363c>
   14a54:	b	14a8c <__assert_fail@plt+0x3888>
   14a58:	add	r1, sp, #32
   14a5c:	mov	r0, r8
   14a60:	bl	17ba4 <__assert_fail@plt+0x69a0>
   14a64:	mov	r8, r0
   14a68:	b	149c0 <__assert_fail@plt+0x37bc>
   14a6c:	mov	r0, r8
   14a70:	bl	15574 <__assert_fail@plt+0x4370>
   14a74:	b	1492c <__assert_fail@plt+0x3728>
   14a78:	ldr	r3, [fp]
   14a7c:	mov	r2, #2
   14a80:	mov	r1, #1
   14a84:	ldr	r0, [pc, #-584]	; 14844 <__assert_fail@plt+0x3640>
   14a88:	bl	10fa0 <fwrite_unlocked@plt>
   14a8c:	ldrb	r1, [r9, #1]!
   14a90:	str	r1, [sp, #40]	; 0x28
   14a94:	cmp	r1, #0
   14a98:	beq	14b80 <__assert_fail@plt+0x397c>
   14a9c:	sub	r3, r1, #7
   14aa0:	cmp	r3, #6
   14aa4:	ldrls	pc, [pc, r3, lsl #2]
   14aa8:	b	14b58 <__assert_fail@plt+0x3954>
   14aac:	andeq	r4, r1, r8, ror sl
   14ab0:	andeq	r4, r1, r8, asr #21
   14ab4:	andeq	r4, r1, r8, lsr #22
   14ab8:	strdeq	r4, [r1], -r8
   14abc:	andeq	r4, r1, r0, asr #22
   14ac0:	andeq	r4, r1, r0, ror #21
   14ac4:	andeq	r4, r1, r0, lsl fp
   14ac8:	ldr	r3, [fp]
   14acc:	mov	r2, #2
   14ad0:	mov	r1, #1
   14ad4:	ldr	r0, [pc, #-660]	; 14848 <__assert_fail@plt+0x3644>
   14ad8:	bl	10fa0 <fwrite_unlocked@plt>
   14adc:	b	14a8c <__assert_fail@plt+0x3888>
   14ae0:	ldr	r3, [fp]
   14ae4:	mov	r2, #2
   14ae8:	mov	r1, #1
   14aec:	ldr	r0, [pc, #-680]	; 1484c <__assert_fail@plt+0x3648>
   14af0:	bl	10fa0 <fwrite_unlocked@plt>
   14af4:	b	14a8c <__assert_fail@plt+0x3888>
   14af8:	ldr	r3, [fp]
   14afc:	mov	r2, #2
   14b00:	mov	r1, #1
   14b04:	ldr	r0, [pc, #-700]	; 14850 <__assert_fail@plt+0x364c>
   14b08:	bl	10fa0 <fwrite_unlocked@plt>
   14b0c:	b	14a8c <__assert_fail@plt+0x3888>
   14b10:	ldr	r3, [fp]
   14b14:	mov	r2, #2
   14b18:	mov	r1, #1
   14b1c:	ldr	r0, [pc, #-720]	; 14854 <__assert_fail@plt+0x3650>
   14b20:	bl	10fa0 <fwrite_unlocked@plt>
   14b24:	b	14a8c <__assert_fail@plt+0x3888>
   14b28:	ldr	r3, [fp]
   14b2c:	mov	r2, #2
   14b30:	mov	r1, #1
   14b34:	mov	r0, sl
   14b38:	bl	10fa0 <fwrite_unlocked@plt>
   14b3c:	b	14a8c <__assert_fail@plt+0x3888>
   14b40:	ldr	r3, [fp]
   14b44:	mov	r2, #2
   14b48:	mov	r1, #1
   14b4c:	ldr	r0, [pc, #-764]	; 14858 <__assert_fail@plt+0x3654>
   14b50:	bl	10fa0 <fwrite_unlocked@plt>
   14b54:	b	14a8c <__assert_fail@plt+0x3888>
   14b58:	ldr	r0, [fp]
   14b5c:	ldr	r3, [r0, #20]
   14b60:	ldr	r2, [r0, #24]
   14b64:	cmp	r3, r2
   14b68:	addcc	r2, r3, #1
   14b6c:	strcc	r2, [r0, #20]
   14b70:	strbcc	r1, [r3]
   14b74:	bcc	14a8c <__assert_fail@plt+0x3888>
   14b78:	bl	11168 <__overflow@plt>
   14b7c:	b	14a8c <__assert_fail@plt+0x3888>
   14b80:	ldr	r0, [fp]
   14b84:	ldr	r3, [r0, #20]
   14b88:	ldr	r2, [r0, #24]
   14b8c:	cmp	r3, r2
   14b90:	addcc	r2, r3, #1
   14b94:	strcc	r2, [r0, #20]
   14b98:	movcc	r2, #10
   14b9c:	strbcc	r2, [r3]
   14ba0:	bcc	148e0 <__assert_fail@plt+0x36dc>
   14ba4:	mov	r1, #10
   14ba8:	bl	11168 <__overflow@plt>
   14bac:	b	148e0 <__assert_fail@plt+0x36dc>
   14bb0:	mov	r0, r8
   14bb4:	bl	15574 <__assert_fail@plt+0x4370>
   14bb8:	mov	r0, #0
   14bbc:	bl	124c0 <__assert_fail@plt+0x12bc>
   14bc0:	and	r5, r5, r0
   14bc4:	b	1492c <__assert_fail@plt+0x3728>
   14bc8:	mov	r1, r9
   14bcc:	mov	r0, #2
   14bd0:	bl	17b00 <__assert_fail@plt+0x68fc>
   14bd4:	str	r0, [sp, #40]	; 0x28
   14bd8:	ldr	r3, [pc, #-880]	; 14870 <__assert_fail@plt+0x366c>
   14bdc:	ldr	r2, [r3, #44]	; 0x2c
   14be0:	add	r0, r0, r2
   14be4:	str	r0, [sp, #44]	; 0x2c
   14be8:	ldrd	r8, [r3, #136]	; 0x88
   14bec:	ldrb	r6, [r3, #41]	; 0x29
   14bf0:	cmp	r6, #0
   14bf4:	beq	14cb0 <__assert_fail@plt+0x3aac>
   14bf8:	mov	r7, r3
   14bfc:	mov	fp, #0
   14c00:	ldrd	r2, [r7, #160]	; 0xa0
   14c04:	cmp	r3, r9
   14c08:	cmpeq	r2, r8
   14c0c:	bls	14c8c <__assert_fail@plt+0x3a88>
   14c10:	add	r1, sp, #48	; 0x30
   14c14:	add	r1, r1, r5, lsl #2
   14c18:	ldr	sl, [r1, #-8]
   14c1c:	subs	r2, r2, r8
   14c20:	sbc	r3, r3, r9
   14c24:	ldr	r0, [r7, #44]	; 0x2c
   14c28:	cmp	fp, r3
   14c2c:	cmpeq	r0, r2
   14c30:	movhi	r0, r2
   14c34:	add	r2, sp, #32
   14c38:	mov	r1, sl
   14c3c:	bl	127fc <__assert_fail@plt+0x15f8>
   14c40:	and	r6, r6, r0
   14c44:	uxtb	r6, r6
   14c48:	ldr	r2, [sp, #32]
   14c4c:	ldr	r3, [r7, #44]	; 0x2c
   14c50:	cmp	r2, r3
   14c54:	bcc	14d34 <__assert_fail@plt+0x3b30>
   14c58:	bne	14c9c <__assert_fail@plt+0x3a98>
   14c5c:	eor	r5, r5, #1
   14c60:	add	r3, sp, #48	; 0x30
   14c64:	add	r3, r3, r5, lsl #2
   14c68:	str	sl, [sp]
   14c6c:	ldr	r3, [r3, #-8]
   14c70:	mov	r0, r8
   14c74:	mov	r1, r9
   14c78:	bl	12944 <__assert_fail@plt+0x1740>
   14c7c:	ldr	r3, [sp, #32]
   14c80:	adds	r8, r8, r3
   14c84:	adc	r9, r9, #0
   14c88:	b	14c00 <__assert_fail@plt+0x39fc>
   14c8c:	mov	r3, #0
   14c90:	str	r3, [sp, #32]
   14c94:	mov	r4, r6
   14c98:	b	14d48 <__assert_fail@plt+0x3b44>
   14c9c:	ldr	r3, [pc, #-1092]	; 14860 <__assert_fail@plt+0x365c>
   14ca0:	ldr	r2, [pc, #-1100]	; 1485c <__assert_fail@plt+0x3658>
   14ca4:	ldr	r1, [pc, #-1088]	; 1486c <__assert_fail@plt+0x3668>
   14ca8:	ldr	r0, [pc, #-1096]	; 14868 <__assert_fail@plt+0x3664>
   14cac:	bl	11204 <__assert_fail@plt>
   14cb0:	ldr	r7, [pc, #-1096]	; 14870 <__assert_fail@plt+0x366c>
   14cb4:	add	r3, sp, #48	; 0x30
   14cb8:	add	r3, r3, r6, lsl #2
   14cbc:	ldr	r5, [r3, #-8]
   14cc0:	add	r2, sp, #32
   14cc4:	mov	r1, r5
   14cc8:	ldr	r0, [r7, #44]	; 0x2c
   14ccc:	bl	127fc <__assert_fail@plt+0x15f8>
   14cd0:	and	r4, r4, r0
   14cd4:	uxtb	r4, r4
   14cd8:	ldr	r2, [sp, #32]
   14cdc:	ldr	r3, [r7, #44]	; 0x2c
   14ce0:	cmp	r2, r3
   14ce4:	bcc	14d3c <__assert_fail@plt+0x3b38>
   14ce8:	bne	14d20 <__assert_fail@plt+0x3b1c>
   14cec:	eor	r6, r6, #1
   14cf0:	uxtb	r6, r6
   14cf4:	add	r3, sp, #48	; 0x30
   14cf8:	add	r3, r3, r6, lsl #2
   14cfc:	str	r5, [sp]
   14d00:	ldr	r3, [r3, #-8]
   14d04:	mov	r0, r8
   14d08:	mov	r1, r9
   14d0c:	bl	12944 <__assert_fail@plt+0x1740>
   14d10:	ldr	r3, [sp, #32]
   14d14:	adds	r8, r8, r3
   14d18:	adc	r9, r9, #0
   14d1c:	b	14cb4 <__assert_fail@plt+0x3ab0>
   14d20:	ldr	r3, [pc, #-1224]	; 14860 <__assert_fail@plt+0x365c>
   14d24:	ldr	r2, [pc, #-1224]	; 14864 <__assert_fail@plt+0x3660>
   14d28:	ldr	r1, [pc, #-1220]	; 1486c <__assert_fail@plt+0x3668>
   14d2c:	ldr	r0, [pc, #-1228]	; 14868 <__assert_fail@plt+0x3664>
   14d30:	bl	11204 <__assert_fail@plt>
   14d34:	mov	r4, r6
   14d38:	mov	r6, r5
   14d3c:	ldr	r5, [sp, #32]
   14d40:	cmp	r5, #0
   14d44:	bne	14d8c <__assert_fail@plt+0x3b88>
   14d48:	ldr	r5, [pc, #-1248]	; 14870 <__assert_fail@plt+0x366c>
   14d4c:	ldr	r3, [r5, #52]	; 0x34
   14d50:	mov	r2, #10
   14d54:	mov	r0, r8
   14d58:	mov	r1, r9
   14d5c:	blx	r3
   14d60:	ldrb	r3, [r5, #41]	; 0x29
   14d64:	cmp	r3, #0
   14d68:	beq	14d7c <__assert_fail@plt+0x3b78>
   14d6c:	ldrd	r2, [r5, #160]	; 0xa0
   14d70:	cmp	r9, r3
   14d74:	cmpeq	r8, r2
   14d78:	bcs	14dfc <__assert_fail@plt+0x3bf8>
   14d7c:	ldr	r0, [sp, #40]	; 0x28
   14d80:	bl	15574 <__assert_fail@plt+0x4370>
   14d84:	mov	r0, r4
   14d88:	b	14930 <__assert_fail@plt+0x372c>
   14d8c:	bl	1133c <__assert_fail@plt+0x138>
   14d90:	mov	sl, r0
   14d94:	add	r3, sp, #48	; 0x30
   14d98:	add	r3, r3, r6, lsl #2
   14d9c:	ldr	r7, [r3, #-8]
   14da0:	sub	r0, r5, #1
   14da4:	mov	r1, sl
   14da8:	add	r0, r0, sl
   14dac:	bl	18a7c <__assert_fail@plt+0x7878>
   14db0:	mul	r2, sl, r0
   14db4:	sub	r2, r2, r5
   14db8:	mov	r1, #0
   14dbc:	add	r0, r7, r5
   14dc0:	bl	11108 <memset@plt>
   14dc4:	eor	r3, r6, #1
   14dc8:	uxtb	r3, r3
   14dcc:	add	r2, sp, #48	; 0x30
   14dd0:	add	r3, r2, r3, lsl #2
   14dd4:	str	r7, [sp]
   14dd8:	ldr	r3, [r3, #-8]
   14ddc:	mov	r2, r5
   14de0:	mov	r0, r8
   14de4:	mov	r1, r9
   14de8:	bl	12944 <__assert_fail@plt+0x1740>
   14dec:	ldr	r3, [sp, #32]
   14df0:	adds	r8, r8, r3
   14df4:	adc	r9, r9, #0
   14df8:	b	14d48 <__assert_fail@plt+0x3b44>
   14dfc:	mov	r0, #0
   14e00:	bl	124c0 <__assert_fail@plt+0x12bc>
   14e04:	and	r4, r4, r0
   14e08:	uxtb	r4, r4
   14e0c:	b	14d7c <__assert_fail@plt+0x3b78>
   14e10:	ldr	r3, [pc, #-1444]	; 14874 <__assert_fail@plt+0x3670>
   14e14:	ldr	r0, [r3]
   14e18:	bl	15468 <__assert_fail@plt+0x4264>
   14e1c:	cmn	r0, #1
   14e20:	bne	14950 <__assert_fail@plt+0x374c>
   14e24:	bl	110d8 <__errno_location@plt>
   14e28:	ldr	r4, [r0]
   14e2c:	mov	r2, #5
   14e30:	ldr	r1, [pc, #-1472]	; 14878 <__assert_fail@plt+0x3674>
   14e34:	mov	r0, #0
   14e38:	bl	10fc4 <dcgettext@plt>
   14e3c:	mov	r2, r0
   14e40:	mov	r1, r4
   14e44:	mov	r0, #1
   14e48:	bl	1103c <error@plt>
   14e4c:	mov	r0, #1
   14e50:	b	14958 <__assert_fail@plt+0x3754>
   14e54:	mov	r8, #0
   14e58:	mov	r9, #0
   14e5c:	mov	r7, #1
   14e60:	b	1431c <__assert_fail@plt+0x3118>
   14e64:	mov	r8, #0
   14e68:	mov	r9, #0
   14e6c:	mov	r7, #2
   14e70:	b	1431c <__assert_fail@plt+0x3118>
   14e74:	push	{r4, lr}
   14e78:	mov	r0, #1
   14e7c:	bl	133e4 <__assert_fail@plt+0x21e0>
   14e80:	pop	{r4, pc}
   14e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e88:	sub	sp, sp, #12
   14e8c:	str	r0, [sp, #4]
   14e90:	mov	r6, r1
   14e94:	mov	fp, r2
   14e98:	mov	r8, r3
   14e9c:	bl	110c0 <strlen@plt>
   14ea0:	str	r0, [sp]
   14ea4:	ldr	r4, [r6]
   14ea8:	cmp	r4, #0
   14eac:	beq	14f54 <__assert_fail@plt+0x3d50>
   14eb0:	mov	r5, fp
   14eb4:	mov	sl, #0
   14eb8:	mvn	r9, #0
   14ebc:	mov	r7, sl
   14ec0:	b	14ee0 <__assert_fail@plt+0x3cdc>
   14ec4:	mov	r9, r7
   14ec8:	b	14f48 <__assert_fail@plt+0x3d44>
   14ecc:	add	r7, r7, #1
   14ed0:	ldr	r4, [r6, #4]!
   14ed4:	add	r5, r5, r8
   14ed8:	cmp	r4, #0
   14edc:	beq	14f40 <__assert_fail@plt+0x3d3c>
   14ee0:	ldr	r2, [sp]
   14ee4:	ldr	r1, [sp, #4]
   14ee8:	mov	r0, r4
   14eec:	bl	111e0 <strncmp@plt>
   14ef0:	cmp	r0, #0
   14ef4:	bne	14ecc <__assert_fail@plt+0x3cc8>
   14ef8:	mov	r0, r4
   14efc:	bl	110c0 <strlen@plt>
   14f00:	ldr	r3, [sp]
   14f04:	cmp	r3, r0
   14f08:	beq	14ec4 <__assert_fail@plt+0x3cc0>
   14f0c:	cmn	r9, #1
   14f10:	moveq	r9, r7
   14f14:	beq	14ecc <__assert_fail@plt+0x3cc8>
   14f18:	cmp	fp, #0
   14f1c:	moveq	sl, #1
   14f20:	beq	14ecc <__assert_fail@plt+0x3cc8>
   14f24:	mov	r2, r8
   14f28:	mov	r1, r5
   14f2c:	mla	r0, r8, r9, fp
   14f30:	bl	10fac <memcmp@plt>
   14f34:	cmp	r0, #0
   14f38:	movne	sl, #1
   14f3c:	b	14ecc <__assert_fail@plt+0x3cc8>
   14f40:	cmp	sl, #0
   14f44:	mvnne	r9, #1
   14f48:	mov	r0, r9
   14f4c:	add	sp, sp, #12
   14f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f54:	mvn	r9, #0
   14f58:	b	14f48 <__assert_fail@plt+0x3d44>
   14f5c:	push	{r4, r5, r6, lr}
   14f60:	mov	r6, r0
   14f64:	ldr	r0, [r1]
   14f68:	cmp	r0, #0
   14f6c:	beq	14fa8 <__assert_fail@plt+0x3da4>
   14f70:	mov	r4, r1
   14f74:	mov	r5, #0
   14f78:	mov	r1, r6
   14f7c:	bl	10f34 <strcmp@plt>
   14f80:	cmp	r0, #0
   14f84:	beq	14fa0 <__assert_fail@plt+0x3d9c>
   14f88:	add	r5, r5, #1
   14f8c:	ldr	r0, [r4, #4]!
   14f90:	cmp	r0, #0
   14f94:	bne	14f78 <__assert_fail@plt+0x3d74>
   14f98:	mvn	r0, #0
   14f9c:	pop	{r4, r5, r6, pc}
   14fa0:	mov	r0, r5
   14fa4:	pop	{r4, r5, r6, pc}
   14fa8:	mvn	r0, #0
   14fac:	pop	{r4, r5, r6, pc}
   14fb0:	push	{r4, r5, r6, lr}
   14fb4:	sub	sp, sp, #8
   14fb8:	mov	r5, r0
   14fbc:	mov	r4, r1
   14fc0:	cmn	r2, #1
   14fc4:	mov	r2, #5
   14fc8:	ldreq	r1, [pc, #76]	; 1501c <__assert_fail@plt+0x3e18>
   14fcc:	ldrne	r1, [pc, #76]	; 15020 <__assert_fail@plt+0x3e1c>
   14fd0:	mov	r0, #0
   14fd4:	bl	10fc4 <dcgettext@plt>
   14fd8:	mov	r6, r0
   14fdc:	mov	r2, r4
   14fe0:	mov	r1, #8
   14fe4:	mov	r0, #0
   14fe8:	bl	171d0 <__assert_fail@plt+0x5fcc>
   14fec:	mov	r4, r0
   14ff0:	mov	r1, r5
   14ff4:	mov	r0, #1
   14ff8:	bl	17460 <__assert_fail@plt+0x625c>
   14ffc:	str	r0, [sp]
   15000:	mov	r3, r4
   15004:	mov	r2, r6
   15008:	mov	r1, #0
   1500c:	mov	r0, r1
   15010:	bl	1103c <error@plt>
   15014:	add	sp, sp, #8
   15018:	pop	{r4, r5, r6, pc}
   1501c:	andeq	sl, r1, r4, ror #14
   15020:	andeq	sl, r1, r0, lsl #15
   15024:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15028:	mov	r7, r0
   1502c:	mov	r4, r1
   15030:	mov	r8, r2
   15034:	mov	r2, #5
   15038:	ldr	r1, [pc, #224]	; 15120 <__assert_fail@plt+0x3f1c>
   1503c:	mov	r0, #0
   15040:	bl	10fc4 <dcgettext@plt>
   15044:	ldr	r3, [pc, #216]	; 15124 <__assert_fail@plt+0x3f20>
   15048:	ldr	r1, [r3]
   1504c:	bl	10f1c <fputs_unlocked@plt>
   15050:	ldr	r5, [r7]
   15054:	cmp	r5, #0
   15058:	beq	150e8 <__assert_fail@plt+0x3ee4>
   1505c:	mov	r9, #0
   15060:	mov	r6, r9
   15064:	ldr	sl, [pc, #184]	; 15124 <__assert_fail@plt+0x3f20>
   15068:	b	150a4 <__assert_fail@plt+0x3ea0>
   1506c:	ldr	r9, [sl]
   15070:	mov	r0, r5
   15074:	bl	17470 <__assert_fail@plt+0x626c>
   15078:	mov	r3, r0
   1507c:	ldr	r2, [pc, #164]	; 15128 <__assert_fail@plt+0x3f24>
   15080:	mov	r1, #1
   15084:	mov	r0, r9
   15088:	bl	11144 <__fprintf_chk@plt>
   1508c:	mov	r9, r4
   15090:	add	r6, r6, #1
   15094:	ldr	r5, [r7, #4]!
   15098:	add	r4, r4, r8
   1509c:	cmp	r5, #0
   150a0:	beq	150e8 <__assert_fail@plt+0x3ee4>
   150a4:	cmp	r6, #0
   150a8:	beq	1506c <__assert_fail@plt+0x3e68>
   150ac:	mov	r2, r8
   150b0:	mov	r1, r4
   150b4:	mov	r0, r9
   150b8:	bl	10fac <memcmp@plt>
   150bc:	cmp	r0, #0
   150c0:	bne	1506c <__assert_fail@plt+0x3e68>
   150c4:	ldr	fp, [sl]
   150c8:	mov	r0, r5
   150cc:	bl	17470 <__assert_fail@plt+0x626c>
   150d0:	mov	r3, r0
   150d4:	ldr	r2, [pc, #80]	; 1512c <__assert_fail@plt+0x3f28>
   150d8:	mov	r1, #1
   150dc:	mov	r0, fp
   150e0:	bl	11144 <__fprintf_chk@plt>
   150e4:	b	15090 <__assert_fail@plt+0x3e8c>
   150e8:	ldr	r3, [pc, #52]	; 15124 <__assert_fail@plt+0x3f20>
   150ec:	ldr	r0, [r3]
   150f0:	ldr	r3, [r0, #20]
   150f4:	ldr	r2, [r0, #24]
   150f8:	cmp	r3, r2
   150fc:	bcs	15114 <__assert_fail@plt+0x3f10>
   15100:	add	r2, r3, #1
   15104:	str	r2, [r0, #20]
   15108:	mov	r2, #10
   1510c:	strb	r2, [r3]
   15110:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15114:	mov	r1, #10
   15118:	bl	11168 <__overflow@plt>
   1511c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15120:	andeq	sl, r1, r0, lsr #15
   15124:	andeq	fp, r2, r8, ror r1
   15128:			; <UNDEFINED> instruction: 0x0001a7b8
   1512c:	andeq	sl, r1, r0, asr #15
   15130:	push	{r4, r5, r6, r7, r8, lr}
   15134:	mov	r7, r0
   15138:	mov	r5, r1
   1513c:	mov	r4, r2
   15140:	mov	r6, r3
   15144:	ldrb	r3, [sp, #32]
   15148:	cmp	r3, #0
   1514c:	beq	1519c <__assert_fail@plt+0x3f98>
   15150:	ldr	r3, [sp, #24]
   15154:	mov	r2, r6
   15158:	mov	r1, r4
   1515c:	mov	r0, r5
   15160:	bl	14e84 <__assert_fail@plt+0x3c80>
   15164:	cmp	r0, #0
   15168:	popge	{r4, r5, r6, r7, r8, pc}
   1516c:	mov	r2, r0
   15170:	mov	r1, r5
   15174:	mov	r0, r7
   15178:	bl	14fb0 <__assert_fail@plt+0x3dac>
   1517c:	ldr	r2, [sp, #24]
   15180:	mov	r1, r6
   15184:	mov	r0, r4
   15188:	bl	15024 <__assert_fail@plt+0x3e20>
   1518c:	ldr	r3, [sp, #28]
   15190:	blx	r3
   15194:	mvn	r0, #0
   15198:	pop	{r4, r5, r6, r7, r8, pc}
   1519c:	mov	r1, r2
   151a0:	mov	r0, r5
   151a4:	bl	14f5c <__assert_fail@plt+0x3d58>
   151a8:	b	15164 <__assert_fail@plt+0x3f60>
   151ac:	push	{r4, r5, r6, r7, r8, lr}
   151b0:	ldr	r6, [r1]
   151b4:	cmp	r6, #0
   151b8:	beq	151fc <__assert_fail@plt+0x3ff8>
   151bc:	mov	r7, r3
   151c0:	mov	r8, r0
   151c4:	mov	r4, r2
   151c8:	mov	r5, r1
   151cc:	mov	r2, r7
   151d0:	mov	r1, r4
   151d4:	mov	r0, r8
   151d8:	bl	10fac <memcmp@plt>
   151dc:	cmp	r0, #0
   151e0:	beq	151f4 <__assert_fail@plt+0x3ff0>
   151e4:	ldr	r6, [r5, #4]!
   151e8:	add	r4, r4, r7
   151ec:	cmp	r6, #0
   151f0:	bne	151cc <__assert_fail@plt+0x3fc8>
   151f4:	mov	r0, r6
   151f8:	pop	{r4, r5, r6, r7, r8, pc}
   151fc:	mov	r6, #0
   15200:	b	151f4 <__assert_fail@plt+0x3ff0>
   15204:	ldr	r3, [pc, #4]	; 15210 <__assert_fail@plt+0x400c>
   15208:	str	r0, [r3]
   1520c:	bx	lr
   15210:	andeq	fp, r2, r8, lsr r2
   15214:	ldr	r3, [pc, #4]	; 15220 <__assert_fail@plt+0x401c>
   15218:	strb	r0, [r3, #4]
   1521c:	bx	lr
   15220:	andeq	fp, r2, r8, lsr r2
   15224:	push	{r4, r5, r6, lr}
   15228:	sub	sp, sp, #8
   1522c:	ldr	r3, [pc, #200]	; 152fc <__assert_fail@plt+0x40f8>
   15230:	ldr	r0, [r3]
   15234:	bl	18824 <__assert_fail@plt+0x7620>
   15238:	cmp	r0, #0
   1523c:	beq	15260 <__assert_fail@plt+0x405c>
   15240:	ldr	r3, [pc, #184]	; 15300 <__assert_fail@plt+0x40fc>
   15244:	ldrb	r3, [r3, #4]
   15248:	cmp	r3, #0
   1524c:	beq	1527c <__assert_fail@plt+0x4078>
   15250:	bl	110d8 <__errno_location@plt>
   15254:	ldr	r3, [r0]
   15258:	cmp	r3, #32
   1525c:	bne	1527c <__assert_fail@plt+0x4078>
   15260:	ldr	r3, [pc, #156]	; 15304 <__assert_fail@plt+0x4100>
   15264:	ldr	r0, [r3]
   15268:	bl	18824 <__assert_fail@plt+0x7620>
   1526c:	cmp	r0, #0
   15270:	bne	152f0 <__assert_fail@plt+0x40ec>
   15274:	add	sp, sp, #8
   15278:	pop	{r4, r5, r6, pc}
   1527c:	mov	r2, #5
   15280:	ldr	r1, [pc, #128]	; 15308 <__assert_fail@plt+0x4104>
   15284:	mov	r0, #0
   15288:	bl	10fc4 <dcgettext@plt>
   1528c:	mov	r4, r0
   15290:	ldr	r3, [pc, #104]	; 15300 <__assert_fail@plt+0x40fc>
   15294:	ldr	r5, [r3]
   15298:	cmp	r5, #0
   1529c:	beq	152d4 <__assert_fail@plt+0x40d0>
   152a0:	bl	110d8 <__errno_location@plt>
   152a4:	ldr	r6, [r0]
   152a8:	mov	r0, r5
   152ac:	bl	172e8 <__assert_fail@plt+0x60e4>
   152b0:	str	r4, [sp]
   152b4:	mov	r3, r0
   152b8:	ldr	r2, [pc, #76]	; 1530c <__assert_fail@plt+0x4108>
   152bc:	mov	r1, r6
   152c0:	mov	r0, #0
   152c4:	bl	1103c <error@plt>
   152c8:	ldr	r3, [pc, #64]	; 15310 <__assert_fail@plt+0x410c>
   152cc:	ldr	r0, [r3]
   152d0:	bl	10f64 <_exit@plt>
   152d4:	bl	110d8 <__errno_location@plt>
   152d8:	mov	r3, r4
   152dc:	ldr	r2, [pc, #48]	; 15314 <__assert_fail@plt+0x4110>
   152e0:	ldr	r1, [r0]
   152e4:	mov	r0, #0
   152e8:	bl	1103c <error@plt>
   152ec:	b	152c8 <__assert_fail@plt+0x40c4>
   152f0:	ldr	r3, [pc, #24]	; 15310 <__assert_fail@plt+0x410c>
   152f4:	ldr	r0, [r3]
   152f8:	bl	10f64 <_exit@plt>
   152fc:	andeq	fp, r2, r4, lsl #3
   15300:	andeq	fp, r2, r8, lsr r2
   15304:	andeq	fp, r2, r8, ror r1
   15308:	andeq	r9, r1, r8, ror #8
   1530c:	andeq	sl, r1, r8, asr #15
   15310:	andeq	fp, r2, r4, lsr #2
   15314:	andeq	sl, r1, ip, asr #15
   15318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1531c:	vpush	{d8}
   15320:	sub	sp, sp, #44	; 0x2c
   15324:	mov	r7, r0
   15328:	mov	r6, r1
   1532c:	mov	fp, r3
   15330:	vmov.f64	d8, d0
   15334:	vcmpe.f64	d0, #0.0
   15338:	vmrs	APSR_nzcv, fpscr
   1533c:	vnegmi.f64	d6, d0
   15340:	vmovpl.f64	d6, d0
   15344:	mov	r3, #37	; 0x25
   15348:	strb	r3, [sp, #28]
   1534c:	add	r3, sp, #40	; 0x28
   15350:	mov	r1, #45	; 0x2d
   15354:	strb	r1, [r3, #-11]!
   15358:	and	r1, r2, #1
   1535c:	add	r0, r3, r1
   15360:	mov	ip, #43	; 0x2b
   15364:	strb	ip, [r3, r1]
   15368:	lsr	r3, r2, #1
   1536c:	and	r3, r3, #1
   15370:	add	r1, r0, r3
   15374:	mov	ip, #32
   15378:	strb	ip, [r0, r3]
   1537c:	lsr	r3, r2, #2
   15380:	and	r3, r3, #1
   15384:	add	ip, r1, r3
   15388:	mov	r0, #48	; 0x30
   1538c:	strb	r0, [r1, r3]
   15390:	lsr	r1, r2, #3
   15394:	and	r1, r1, #1
   15398:	add	r3, ip, r1
   1539c:	mov	r0, #42	; 0x2a
   153a0:	strb	r0, [ip, r1]
   153a4:	mov	r1, #46	; 0x2e
   153a8:	strb	r1, [r3, #1]
   153ac:	strb	r0, [r3, #2]
   153b0:	and	r2, r2, #16
   153b4:	cmp	r2, #0
   153b8:	movne	r2, #71	; 0x47
   153bc:	moveq	r2, #103	; 0x67
   153c0:	strb	r2, [r3, #3]
   153c4:	mov	r2, #0
   153c8:	strb	r2, [r3, #4]
   153cc:	vldr	d7, [pc, #140]	; 15460 <__assert_fail@plt+0x425c>
   153d0:	vcmpe.f64	d6, d7
   153d4:	vmrs	APSR_nzcv, fpscr
   153d8:	movmi	r4, #1
   153dc:	movpl	r4, #15
   153e0:	add	sl, sp, #28
   153e4:	mvn	r9, #0
   153e8:	mov	r8, #1
   153ec:	b	153f4 <__assert_fail@plt+0x41f0>
   153f0:	add	r4, r4, #1
   153f4:	vstr	d8, [sp, #16]
   153f8:	str	r4, [sp, #8]
   153fc:	str	fp, [sp, #4]
   15400:	str	sl, [sp]
   15404:	mov	r3, r9
   15408:	mov	r2, r8
   1540c:	mov	r1, r6
   15410:	mov	r0, r7
   15414:	bl	111f8 <__snprintf_chk@plt>
   15418:	mov	r5, r0
   1541c:	cmp	r4, #16
   15420:	movle	r3, #0
   15424:	movgt	r3, #1
   15428:	orrs	r3, r3, r0, lsr #31
   1542c:	bne	15450 <__assert_fail@plt+0x424c>
   15430:	cmp	r6, r0
   15434:	bls	153f0 <__assert_fail@plt+0x41ec>
   15438:	mov	r1, #0
   1543c:	mov	r0, r7
   15440:	bl	1112c <strtod@plt>
   15444:	vcmp.f64	d8, d0
   15448:	vmrs	APSR_nzcv, fpscr
   1544c:	bne	153f0 <__assert_fail@plt+0x41ec>
   15450:	mov	r0, r5
   15454:	add	sp, sp, #44	; 0x2c
   15458:	vpop	{d8}
   1545c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15460:	andeq	r0, r0, r0
   15464:	andseq	r0, r0, r0
   15468:	push	{r4, r5, r6, lr}
   1546c:	sub	sp, sp, #8
   15470:	mov	r4, r0
   15474:	bl	11138 <fileno@plt>
   15478:	cmp	r0, #0
   1547c:	blt	154f4 <__assert_fail@plt+0x42f0>
   15480:	mov	r0, r4
   15484:	bl	11084 <__freading@plt>
   15488:	cmp	r0, #0
   1548c:	beq	154c0 <__assert_fail@plt+0x42bc>
   15490:	mov	r0, r4
   15494:	bl	11138 <fileno@plt>
   15498:	mov	r3, #1
   1549c:	str	r3, [sp]
   154a0:	mov	r2, #0
   154a4:	mov	r3, #0
   154a8:	bl	1100c <lseek64@plt>
   154ac:	mvn	r2, #0
   154b0:	mvn	r3, #0
   154b4:	cmp	r1, r3
   154b8:	cmpeq	r0, r2
   154bc:	beq	15500 <__assert_fail@plt+0x42fc>
   154c0:	mov	r0, r4
   154c4:	bl	15510 <__assert_fail@plt+0x430c>
   154c8:	cmp	r0, #0
   154cc:	beq	15500 <__assert_fail@plt+0x42fc>
   154d0:	bl	110d8 <__errno_location@plt>
   154d4:	mov	r5, r0
   154d8:	ldr	r6, [r0]
   154dc:	mov	r0, r4
   154e0:	bl	11150 <fclose@plt>
   154e4:	cmp	r6, #0
   154e8:	strne	r6, [r5]
   154ec:	mvnne	r0, #0
   154f0:	b	15508 <__assert_fail@plt+0x4304>
   154f4:	mov	r0, r4
   154f8:	bl	11150 <fclose@plt>
   154fc:	b	15508 <__assert_fail@plt+0x4304>
   15500:	mov	r0, r4
   15504:	bl	11150 <fclose@plt>
   15508:	add	sp, sp, #8
   1550c:	pop	{r4, r5, r6, pc}
   15510:	push	{r4, lr}
   15514:	sub	sp, sp, #8
   15518:	subs	r4, r0, #0
   1551c:	beq	15530 <__assert_fail@plt+0x432c>
   15520:	mov	r0, r4
   15524:	bl	11084 <__freading@plt>
   15528:	cmp	r0, #0
   1552c:	bne	15540 <__assert_fail@plt+0x433c>
   15530:	mov	r0, r4
   15534:	bl	10f40 <fflush@plt>
   15538:	add	sp, sp, #8
   1553c:	pop	{r4, pc}
   15540:	ldr	r3, [r4]
   15544:	tst	r3, #256	; 0x100
   15548:	bne	15558 <__assert_fail@plt+0x4354>
   1554c:	mov	r0, r4
   15550:	bl	10f40 <fflush@plt>
   15554:	b	15538 <__assert_fail@plt+0x4334>
   15558:	mov	r3, #1
   1555c:	str	r3, [sp]
   15560:	mov	r2, #0
   15564:	mov	r3, #0
   15568:	mov	r0, r4
   1556c:	bl	155cc <__assert_fail@plt+0x43c8>
   15570:	b	1554c <__assert_fail@plt+0x4348>
   15574:	push	{r4, r5, lr}
   15578:	sub	sp, sp, #12
   1557c:	mov	r5, r0
   15580:	bl	110d8 <__errno_location@plt>
   15584:	mov	r4, r0
   15588:	ldr	r3, [r0]
   1558c:	str	r3, [sp]
   15590:	str	r3, [sp, #4]
   15594:	mov	r3, #0
   15598:	str	r3, [r0]
   1559c:	mov	r0, r5
   155a0:	bl	10f4c <free@plt>
   155a4:	ldr	r3, [r4]
   155a8:	cmp	r3, #0
   155ac:	moveq	r3, #4
   155b0:	movne	r3, #0
   155b4:	add	r2, sp, #8
   155b8:	add	r3, r2, r3
   155bc:	ldr	r3, [r3, #-8]
   155c0:	str	r3, [r4]
   155c4:	add	sp, sp, #12
   155c8:	pop	{r4, r5, pc}
   155cc:	push	{r4, r5, r6, r7, lr}
   155d0:	sub	sp, sp, #12
   155d4:	mov	r4, r0
   155d8:	mov	r6, r2
   155dc:	mov	r7, r3
   155e0:	ldr	r5, [sp, #32]
   155e4:	ldr	r2, [r0, #8]
   155e8:	ldr	r3, [r0, #4]
   155ec:	cmp	r2, r3
   155f0:	beq	15610 <__assert_fail@plt+0x440c>
   155f4:	str	r5, [sp]
   155f8:	mov	r2, r6
   155fc:	mov	r3, r7
   15600:	mov	r0, r4
   15604:	bl	1115c <fseeko64@plt>
   15608:	add	sp, sp, #12
   1560c:	pop	{r4, r5, r6, r7, pc}
   15610:	ldr	r2, [r0, #20]
   15614:	ldr	r3, [r0, #16]
   15618:	cmp	r2, r3
   1561c:	bne	155f4 <__assert_fail@plt+0x43f0>
   15620:	ldr	r3, [r0, #36]	; 0x24
   15624:	cmp	r3, #0
   15628:	bne	155f4 <__assert_fail@plt+0x43f0>
   1562c:	bl	11138 <fileno@plt>
   15630:	str	r5, [sp]
   15634:	mov	r2, r6
   15638:	mov	r3, r7
   1563c:	bl	1100c <lseek64@plt>
   15640:	mvn	r2, #0
   15644:	mvn	r3, #0
   15648:	cmp	r1, r3
   1564c:	cmpeq	r0, r2
   15650:	beq	1566c <__assert_fail@plt+0x4468>
   15654:	ldr	r3, [r4]
   15658:	bic	r3, r3, #16
   1565c:	str	r3, [r4]
   15660:	strd	r0, [r4, #80]	; 0x50
   15664:	mov	r0, #0
   15668:	b	15608 <__assert_fail@plt+0x4404>
   1566c:	mvn	r0, #0
   15670:	b	15608 <__assert_fail@plt+0x4404>
   15674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15678:	vpush	{d8-d9}
   1567c:	sub	sp, sp, #44	; 0x2c
   15680:	mov	r7, r0
   15684:	mov	r6, r1
   15688:	mov	fp, r3
   1568c:	vmov.f32	s18, s0
   15690:	vcvt.f64.f32	d8, s0
   15694:	vcmpe.f32	s0, #0.0
   15698:	vmrs	APSR_nzcv, fpscr
   1569c:	vnegmi.f32	s14, s0
   156a0:	vmovpl.f32	s14, s0
   156a4:	mov	r3, #37	; 0x25
   156a8:	strb	r3, [sp, #28]
   156ac:	add	r3, sp, #40	; 0x28
   156b0:	mov	r1, #45	; 0x2d
   156b4:	strb	r1, [r3, #-11]!
   156b8:	and	r1, r2, #1
   156bc:	add	r0, r3, r1
   156c0:	mov	ip, #43	; 0x2b
   156c4:	strb	ip, [r3, r1]
   156c8:	lsr	r3, r2, #1
   156cc:	and	r3, r3, #1
   156d0:	add	r1, r0, r3
   156d4:	mov	ip, #32
   156d8:	strb	ip, [r0, r3]
   156dc:	lsr	r3, r2, #2
   156e0:	and	r3, r3, #1
   156e4:	add	ip, r1, r3
   156e8:	mov	r0, #48	; 0x30
   156ec:	strb	r0, [r1, r3]
   156f0:	lsr	r1, r2, #3
   156f4:	and	r1, r1, #1
   156f8:	add	r3, ip, r1
   156fc:	mov	r0, #42	; 0x2a
   15700:	strb	r0, [ip, r1]
   15704:	mov	r1, #46	; 0x2e
   15708:	strb	r1, [r3, #1]
   1570c:	strb	r0, [r3, #2]
   15710:	and	r2, r2, #16
   15714:	cmp	r2, #0
   15718:	movne	r2, #71	; 0x47
   1571c:	moveq	r2, #103	; 0x67
   15720:	strb	r2, [r3, #3]
   15724:	mov	r2, #0
   15728:	strb	r2, [r3, #4]
   1572c:	vldr	s15, [pc, #140]	; 157c0 <__assert_fail@plt+0x45bc>
   15730:	vcmpe.f32	s14, s15
   15734:	vmrs	APSR_nzcv, fpscr
   15738:	movmi	r4, #1
   1573c:	movpl	r4, #6
   15740:	add	sl, sp, #28
   15744:	mvn	r9, #0
   15748:	mov	r8, #1
   1574c:	b	15754 <__assert_fail@plt+0x4550>
   15750:	add	r4, r4, #1
   15754:	vstr	d8, [sp, #16]
   15758:	str	r4, [sp, #8]
   1575c:	str	fp, [sp, #4]
   15760:	str	sl, [sp]
   15764:	mov	r3, r9
   15768:	mov	r2, r8
   1576c:	mov	r1, r6
   15770:	mov	r0, r7
   15774:	bl	111f8 <__snprintf_chk@plt>
   15778:	mov	r5, r0
   1577c:	cmp	r4, #8
   15780:	movle	r3, #0
   15784:	movgt	r3, #1
   15788:	orrs	r3, r3, r0, lsr #31
   1578c:	bne	157b0 <__assert_fail@plt+0x45ac>
   15790:	cmp	r6, r0
   15794:	bls	15750 <__assert_fail@plt+0x454c>
   15798:	mov	r1, #0
   1579c:	mov	r0, r7
   157a0:	bl	11048 <strtof@plt>
   157a4:	vcmp.f32	s18, s0
   157a8:	vmrs	APSR_nzcv, fpscr
   157ac:	bne	15750 <__assert_fail@plt+0x454c>
   157b0:	mov	r0, r5
   157b4:	add	sp, sp, #44	; 0x2c
   157b8:	vpop	{d8-d9}
   157bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157c0:	addeq	r0, r0, r0
   157c4:	andeq	r0, r0, r0
   157c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157cc:	vpush	{d8}
   157d0:	sub	sp, sp, #44	; 0x2c
   157d4:	mov	r7, r0
   157d8:	mov	r6, r1
   157dc:	mov	fp, r3
   157e0:	vmov.f64	d8, d0
   157e4:	vcmpe.f64	d0, #0.0
   157e8:	vmrs	APSR_nzcv, fpscr
   157ec:	vnegmi.f64	d6, d0
   157f0:	vmovpl.f64	d6, d0
   157f4:	mov	r3, #37	; 0x25
   157f8:	strb	r3, [sp, #28]
   157fc:	add	r3, sp, #40	; 0x28
   15800:	mov	r1, #45	; 0x2d
   15804:	strb	r1, [r3, #-11]!
   15808:	and	r1, r2, #1
   1580c:	add	r0, r3, r1
   15810:	mov	ip, #43	; 0x2b
   15814:	strb	ip, [r3, r1]
   15818:	lsr	r3, r2, #1
   1581c:	and	r3, r3, #1
   15820:	add	r1, r0, r3
   15824:	mov	ip, #32
   15828:	strb	ip, [r0, r3]
   1582c:	lsr	r3, r2, #2
   15830:	and	r3, r3, #1
   15834:	add	ip, r1, r3
   15838:	mov	r0, #48	; 0x30
   1583c:	strb	r0, [r1, r3]
   15840:	lsr	r1, r2, #3
   15844:	and	r1, r1, #1
   15848:	add	r3, ip, r1
   1584c:	mov	r0, #42	; 0x2a
   15850:	strb	r0, [ip, r1]
   15854:	mov	r1, #46	; 0x2e
   15858:	strb	r1, [r3, #1]
   1585c:	strb	r0, [r3, #2]
   15860:	mov	r1, #76	; 0x4c
   15864:	strb	r1, [r3, #3]
   15868:	and	r2, r2, #16
   1586c:	cmp	r2, #0
   15870:	movne	r2, #71	; 0x47
   15874:	moveq	r2, #103	; 0x67
   15878:	strb	r2, [r3, #4]
   1587c:	mov	r2, #0
   15880:	strb	r2, [r3, #5]
   15884:	vldr	d7, [pc, #140]	; 15918 <__assert_fail@plt+0x4714>
   15888:	vcmpe.f64	d6, d7
   1588c:	vmrs	APSR_nzcv, fpscr
   15890:	movmi	r4, #1
   15894:	movpl	r4, #15
   15898:	add	sl, sp, #28
   1589c:	mvn	r9, #0
   158a0:	mov	r8, #1
   158a4:	b	158ac <__assert_fail@plt+0x46a8>
   158a8:	add	r4, r4, #1
   158ac:	vstr	d8, [sp, #16]
   158b0:	str	r4, [sp, #8]
   158b4:	str	fp, [sp, #4]
   158b8:	str	sl, [sp]
   158bc:	mov	r3, r9
   158c0:	mov	r2, r8
   158c4:	mov	r1, r6
   158c8:	mov	r0, r7
   158cc:	bl	111f8 <__snprintf_chk@plt>
   158d0:	mov	r5, r0
   158d4:	cmp	r4, #16
   158d8:	movle	r3, #0
   158dc:	movgt	r3, #1
   158e0:	orrs	r3, r3, r0, lsr #31
   158e4:	bne	15908 <__assert_fail@plt+0x4704>
   158e8:	cmp	r6, r0
   158ec:	bls	158a8 <__assert_fail@plt+0x46a4>
   158f0:	mov	r1, #0
   158f4:	mov	r0, r7
   158f8:	bl	10f94 <strtold@plt>
   158fc:	vcmp.f64	d8, d0
   15900:	vmrs	APSR_nzcv, fpscr
   15904:	bne	158a8 <__assert_fail@plt+0x46a4>
   15908:	mov	r0, r5
   1590c:	add	sp, sp, #44	; 0x2c
   15910:	vpop	{d8}
   15914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15918:	andeq	r0, r0, r0
   1591c:	andseq	r0, r0, r0
   15920:	push	{r4, r5, r6, lr}
   15924:	subs	r4, r0, #0
   15928:	beq	159a0 <__assert_fail@plt+0x479c>
   1592c:	mov	r1, #47	; 0x2f
   15930:	mov	r0, r4
   15934:	bl	11180 <strrchr@plt>
   15938:	cmp	r0, #0
   1593c:	addne	r5, r0, #1
   15940:	moveq	r5, r4
   15944:	sub	r3, r5, r4
   15948:	cmp	r3, #6
   1594c:	ble	1598c <__assert_fail@plt+0x4788>
   15950:	mov	r2, #7
   15954:	ldr	r1, [pc, #96]	; 159bc <__assert_fail@plt+0x47b8>
   15958:	sub	r0, r5, #7
   1595c:	bl	111e0 <strncmp@plt>
   15960:	cmp	r0, #0
   15964:	bne	1598c <__assert_fail@plt+0x4788>
   15968:	mov	r2, #3
   1596c:	ldr	r1, [pc, #76]	; 159c0 <__assert_fail@plt+0x47bc>
   15970:	mov	r0, r5
   15974:	bl	111e0 <strncmp@plt>
   15978:	cmp	r0, #0
   1597c:	addeq	r4, r5, #3
   15980:	ldreq	r3, [pc, #60]	; 159c4 <__assert_fail@plt+0x47c0>
   15984:	streq	r4, [r3]
   15988:	movne	r4, r5
   1598c:	ldr	r3, [pc, #52]	; 159c8 <__assert_fail@plt+0x47c4>
   15990:	str	r4, [r3]
   15994:	ldr	r3, [pc, #48]	; 159cc <__assert_fail@plt+0x47c8>
   15998:	str	r4, [r3]
   1599c:	pop	{r4, r5, r6, pc}
   159a0:	ldr	r3, [pc, #40]	; 159d0 <__assert_fail@plt+0x47cc>
   159a4:	ldr	r3, [r3]
   159a8:	mov	r2, #55	; 0x37
   159ac:	mov	r1, #1
   159b0:	ldr	r0, [pc, #28]	; 159d4 <__assert_fail@plt+0x47d0>
   159b4:	bl	11000 <fwrite@plt>
   159b8:	bl	111ec <abort@plt>
   159bc:	andeq	sl, r1, r8, lsl #16
   159c0:	andeq	sl, r1, r0, lsl r8
   159c4:	andeq	fp, r2, r8, ror #2
   159c8:	andeq	fp, r2, r0, asr #4
   159cc:	andeq	fp, r2, ip, ror #2
   159d0:	andeq	fp, r2, r8, ror r1
   159d4:	ldrdeq	sl, [r1], -r0
   159d8:	push	{r4, r5, r6, lr}
   159dc:	mov	r5, r0
   159e0:	mov	r4, r1
   159e4:	mov	r2, #48	; 0x30
   159e8:	mov	r1, #0
   159ec:	bl	11108 <memset@plt>
   159f0:	cmp	r4, #10
   159f4:	beq	15a04 <__assert_fail@plt+0x4800>
   159f8:	str	r4, [r5]
   159fc:	mov	r0, r5
   15a00:	pop	{r4, r5, r6, pc}
   15a04:	bl	111ec <abort@plt>
   15a08:	push	{r4, r5, r6, lr}
   15a0c:	mov	r4, r0
   15a10:	mov	r5, r1
   15a14:	mov	r2, #5
   15a18:	mov	r1, r0
   15a1c:	mov	r0, #0
   15a20:	bl	10fc4 <dcgettext@plt>
   15a24:	cmp	r4, r0
   15a28:	popne	{r4, r5, r6, pc}
   15a2c:	bl	1889c <__assert_fail@plt+0x7698>
   15a30:	ldrb	r3, [r0]
   15a34:	bic	r3, r3, #32
   15a38:	cmp	r3, #85	; 0x55
   15a3c:	beq	15ab8 <__assert_fail@plt+0x48b4>
   15a40:	cmp	r3, #71	; 0x47
   15a44:	bne	15b14 <__assert_fail@plt+0x4910>
   15a48:	ldrb	r3, [r0, #1]
   15a4c:	bic	r3, r3, #32
   15a50:	cmp	r3, #66	; 0x42
   15a54:	bne	15b14 <__assert_fail@plt+0x4910>
   15a58:	ldrb	r3, [r0, #2]
   15a5c:	cmp	r3, #49	; 0x31
   15a60:	bne	15b14 <__assert_fail@plt+0x4910>
   15a64:	ldrb	r3, [r0, #3]
   15a68:	cmp	r3, #56	; 0x38
   15a6c:	bne	15b14 <__assert_fail@plt+0x4910>
   15a70:	ldrb	r3, [r0, #4]
   15a74:	cmp	r3, #48	; 0x30
   15a78:	bne	15b14 <__assert_fail@plt+0x4910>
   15a7c:	ldrb	r3, [r0, #5]
   15a80:	cmp	r3, #51	; 0x33
   15a84:	bne	15b14 <__assert_fail@plt+0x4910>
   15a88:	ldrb	r3, [r0, #6]
   15a8c:	cmp	r3, #48	; 0x30
   15a90:	bne	15b14 <__assert_fail@plt+0x4910>
   15a94:	ldrb	r3, [r0, #7]
   15a98:	cmp	r3, #0
   15a9c:	bne	15b14 <__assert_fail@plt+0x4910>
   15aa0:	ldrb	r2, [r4]
   15aa4:	ldr	r3, [pc, #124]	; 15b28 <__assert_fail@plt+0x4924>
   15aa8:	ldr	r0, [pc, #124]	; 15b2c <__assert_fail@plt+0x4928>
   15aac:	cmp	r2, #96	; 0x60
   15ab0:	movne	r0, r3
   15ab4:	pop	{r4, r5, r6, pc}
   15ab8:	ldrb	r3, [r0, #1]
   15abc:	bic	r3, r3, #32
   15ac0:	cmp	r3, #84	; 0x54
   15ac4:	bne	15b14 <__assert_fail@plt+0x4910>
   15ac8:	ldrb	r3, [r0, #2]
   15acc:	bic	r3, r3, #32
   15ad0:	cmp	r3, #70	; 0x46
   15ad4:	bne	15b14 <__assert_fail@plt+0x4910>
   15ad8:	ldrb	r3, [r0, #3]
   15adc:	cmp	r3, #45	; 0x2d
   15ae0:	bne	15b14 <__assert_fail@plt+0x4910>
   15ae4:	ldrb	r3, [r0, #4]
   15ae8:	cmp	r3, #56	; 0x38
   15aec:	bne	15b14 <__assert_fail@plt+0x4910>
   15af0:	ldrb	r3, [r0, #5]
   15af4:	cmp	r3, #0
   15af8:	bne	15b14 <__assert_fail@plt+0x4910>
   15afc:	ldrb	r2, [r4]
   15b00:	ldr	r3, [pc, #40]	; 15b30 <__assert_fail@plt+0x492c>
   15b04:	ldr	r0, [pc, #40]	; 15b34 <__assert_fail@plt+0x4930>
   15b08:	cmp	r2, #96	; 0x60
   15b0c:	movne	r0, r3
   15b10:	pop	{r4, r5, r6, pc}
   15b14:	ldr	r3, [pc, #28]	; 15b38 <__assert_fail@plt+0x4934>
   15b18:	ldr	r0, [pc, #28]	; 15b3c <__assert_fail@plt+0x4938>
   15b1c:	cmp	r5, #9
   15b20:	movne	r0, r3
   15b24:	pop	{r4, r5, r6, pc}
   15b28:	andeq	sl, r1, ip, ror #16
   15b2c:	andeq	sl, r1, r8, ror r8
   15b30:	andeq	sl, r1, r8, ror #16
   15b34:	andeq	sl, r1, ip, ror r8
   15b38:	andeq	sl, r1, r0, ror r8
   15b3c:	andeq	sl, r1, r4, ror r8
   15b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b44:	sub	sp, sp, #116	; 0x74
   15b48:	str	r0, [sp, #36]	; 0x24
   15b4c:	mov	sl, r1
   15b50:	str	r2, [sp, #52]	; 0x34
   15b54:	str	r3, [sp, #28]
   15b58:	ldr	r8, [sp, #152]	; 0x98
   15b5c:	bl	11018 <__ctype_get_mb_cur_max@plt>
   15b60:	str	r0, [sp, #84]	; 0x54
   15b64:	ldr	r3, [sp, #156]	; 0x9c
   15b68:	lsr	r3, r3, #1
   15b6c:	and	r3, r3, #1
   15b70:	str	r3, [sp, #32]
   15b74:	mov	r3, #1
   15b78:	str	r3, [sp, #40]	; 0x28
   15b7c:	mov	r3, #0
   15b80:	str	r3, [sp, #80]	; 0x50
   15b84:	str	r3, [sp, #44]	; 0x2c
   15b88:	str	r3, [sp, #48]	; 0x30
   15b8c:	str	r3, [sp, #60]	; 0x3c
   15b90:	str	r3, [sp, #72]	; 0x48
   15b94:	str	r3, [sp, #76]	; 0x4c
   15b98:	mov	r7, sl
   15b9c:	mov	sl, r8
   15ba0:	cmp	sl, #10
   15ba4:	ldrls	pc, [pc, sl, lsl #2]
   15ba8:	b	15d60 <__assert_fail@plt+0x4b5c>
   15bac:	andeq	r5, r1, r0, lsl ip
   15bb0:	andeq	r5, r1, r0, ror #23
   15bb4:	andeq	r5, r1, ip, lsr sp
   15bb8:	ldrdeq	r5, [r1], -r8
   15bbc:	strdeq	r5, [r1], -r0
   15bc0:	andeq	r5, r1, r0, lsr #24
   15bc4:	andeq	r6, r1, ip, lsl #25
   15bc8:	andeq	r5, r1, r4, ror #26
   15bcc:	andeq	r5, r1, ip, asr ip
   15bd0:	andeq	r5, r1, ip, asr ip
   15bd4:	andeq	r5, r1, ip, asr ip
   15bd8:	mov	r3, #1
   15bdc:	str	r3, [sp, #48]	; 0x30
   15be0:	mov	r3, #1
   15be4:	str	r3, [sp, #32]
   15be8:	str	r3, [sp, #60]	; 0x3c
   15bec:	ldr	r3, [pc, #4068]	; 16bd8 <__assert_fail@plt+0x59d4>
   15bf0:	str	r3, [sp, #72]	; 0x48
   15bf4:	mov	fp, #0
   15bf8:	mov	sl, #2
   15bfc:	mov	r6, #0
   15c00:	ldr	r3, [sp, #48]	; 0x30
   15c04:	eor	r3, r3, #1
   15c08:	str	r3, [sp, #68]	; 0x44
   15c0c:	b	164f4 <__assert_fail@plt+0x52f0>
   15c10:	mov	r3, #0
   15c14:	str	r3, [sp, #32]
   15c18:	mov	fp, r3
   15c1c:	b	15bfc <__assert_fail@plt+0x49f8>
   15c20:	ldr	r3, [sp, #32]
   15c24:	cmp	r3, #0
   15c28:	bne	15d7c <__assert_fail@plt+0x4b78>
   15c2c:	cmp	r7, #0
   15c30:	beq	15d9c <__assert_fail@plt+0x4b98>
   15c34:	ldr	r3, [sp, #36]	; 0x24
   15c38:	mov	r2, #34	; 0x22
   15c3c:	strb	r2, [r3]
   15c40:	mov	r3, #1
   15c44:	str	r3, [sp, #48]	; 0x30
   15c48:	str	r3, [sp, #60]	; 0x3c
   15c4c:	ldr	r3, [pc, #3980]	; 16be0 <__assert_fail@plt+0x59dc>
   15c50:	str	r3, [sp, #72]	; 0x48
   15c54:	mov	fp, #1
   15c58:	b	15bfc <__assert_fail@plt+0x49f8>
   15c5c:	cmp	sl, #10
   15c60:	beq	15c84 <__assert_fail@plt+0x4a80>
   15c64:	mov	r1, sl
   15c68:	ldr	r0, [pc, #3948]	; 16bdc <__assert_fail@plt+0x59d8>
   15c6c:	bl	15a08 <__assert_fail@plt+0x4804>
   15c70:	str	r0, [sp, #164]	; 0xa4
   15c74:	mov	r1, sl
   15c78:	ldr	r0, [pc, #3928]	; 16bd8 <__assert_fail@plt+0x59d4>
   15c7c:	bl	15a08 <__assert_fail@plt+0x4804>
   15c80:	str	r0, [sp, #168]	; 0xa8
   15c84:	ldr	r3, [sp, #32]
   15c88:	cmp	r3, #0
   15c8c:	movne	fp, #0
   15c90:	bne	15cc8 <__assert_fail@plt+0x4ac4>
   15c94:	ldr	r3, [sp, #164]	; 0xa4
   15c98:	ldrb	r3, [r3]
   15c9c:	cmp	r3, #0
   15ca0:	beq	15ce8 <__assert_fail@plt+0x4ae4>
   15ca4:	ldr	r2, [sp, #164]	; 0xa4
   15ca8:	mov	fp, #0
   15cac:	ldr	r1, [sp, #36]	; 0x24
   15cb0:	cmp	r7, fp
   15cb4:	strbhi	r3, [r1, fp]
   15cb8:	add	fp, fp, #1
   15cbc:	ldrb	r3, [r2, #1]!
   15cc0:	cmp	r3, #0
   15cc4:	bne	15cb0 <__assert_fail@plt+0x4aac>
   15cc8:	ldr	r0, [sp, #168]	; 0xa8
   15ccc:	bl	110c0 <strlen@plt>
   15cd0:	str	r0, [sp, #60]	; 0x3c
   15cd4:	ldr	r3, [sp, #168]	; 0xa8
   15cd8:	str	r3, [sp, #72]	; 0x48
   15cdc:	mov	r3, #1
   15ce0:	str	r3, [sp, #48]	; 0x30
   15ce4:	b	15bfc <__assert_fail@plt+0x49f8>
   15ce8:	mov	fp, #0
   15cec:	b	15cc8 <__assert_fail@plt+0x4ac4>
   15cf0:	ldr	r3, [sp, #32]
   15cf4:	cmp	r3, #0
   15cf8:	bne	15db8 <__assert_fail@plt+0x4bb4>
   15cfc:	mov	r3, #1
   15d00:	str	r3, [sp, #48]	; 0x30
   15d04:	cmp	r7, #0
   15d08:	beq	15dd4 <__assert_fail@plt+0x4bd0>
   15d0c:	ldr	r3, [sp, #36]	; 0x24
   15d10:	mov	r2, #39	; 0x27
   15d14:	strb	r2, [r3]
   15d18:	mov	r3, #0
   15d1c:	str	r3, [sp, #32]
   15d20:	mov	r3, #1
   15d24:	str	r3, [sp, #60]	; 0x3c
   15d28:	ldr	r3, [pc, #3752]	; 16bd8 <__assert_fail@plt+0x59d4>
   15d2c:	str	r3, [sp, #72]	; 0x48
   15d30:	mov	fp, #1
   15d34:	mov	sl, #2
   15d38:	b	15bfc <__assert_fail@plt+0x49f8>
   15d3c:	ldr	r3, [sp, #32]
   15d40:	cmp	r3, #0
   15d44:	beq	15d04 <__assert_fail@plt+0x4b00>
   15d48:	mov	r3, #1
   15d4c:	str	r3, [sp, #60]	; 0x3c
   15d50:	ldr	r3, [pc, #3712]	; 16bd8 <__assert_fail@plt+0x59d4>
   15d54:	str	r3, [sp, #72]	; 0x48
   15d58:	mov	fp, #0
   15d5c:	b	15bfc <__assert_fail@plt+0x49f8>
   15d60:	bl	111ec <abort@plt>
   15d64:	mov	r3, #0
   15d68:	str	r3, [sp, #32]
   15d6c:	mov	r3, #1
   15d70:	str	r3, [sp, #48]	; 0x30
   15d74:	mov	fp, #0
   15d78:	b	15bfc <__assert_fail@plt+0x49f8>
   15d7c:	ldr	r3, [sp, #32]
   15d80:	str	r3, [sp, #48]	; 0x30
   15d84:	mov	r3, #1
   15d88:	str	r3, [sp, #60]	; 0x3c
   15d8c:	ldr	r3, [pc, #3660]	; 16be0 <__assert_fail@plt+0x59dc>
   15d90:	str	r3, [sp, #72]	; 0x48
   15d94:	mov	fp, #0
   15d98:	b	15bfc <__assert_fail@plt+0x49f8>
   15d9c:	mov	r3, #1
   15da0:	str	r3, [sp, #48]	; 0x30
   15da4:	str	r3, [sp, #60]	; 0x3c
   15da8:	ldr	r3, [pc, #3632]	; 16be0 <__assert_fail@plt+0x59dc>
   15dac:	str	r3, [sp, #72]	; 0x48
   15db0:	mov	fp, #1
   15db4:	b	15bfc <__assert_fail@plt+0x49f8>
   15db8:	mov	r3, #1
   15dbc:	str	r3, [sp, #60]	; 0x3c
   15dc0:	ldr	r3, [pc, #3600]	; 16bd8 <__assert_fail@plt+0x59d4>
   15dc4:	str	r3, [sp, #72]	; 0x48
   15dc8:	mov	fp, #0
   15dcc:	mov	sl, #2
   15dd0:	b	15bfc <__assert_fail@plt+0x49f8>
   15dd4:	mov	r3, #0
   15dd8:	str	r3, [sp, #32]
   15ddc:	mov	r3, #1
   15de0:	str	r3, [sp, #60]	; 0x3c
   15de4:	ldr	r3, [pc, #3564]	; 16bd8 <__assert_fail@plt+0x59d4>
   15de8:	str	r3, [sp, #72]	; 0x48
   15dec:	mov	fp, #1
   15df0:	mov	sl, #2
   15df4:	b	15bfc <__assert_fail@plt+0x49f8>
   15df8:	mov	r3, #0
   15dfc:	str	r3, [sp, #56]	; 0x38
   15e00:	ldr	r3, [sp, #52]	; 0x34
   15e04:	add	r2, r3, r6
   15e08:	str	r2, [sp, #64]	; 0x40
   15e0c:	ldrb	r4, [r3, r6]
   15e10:	cmp	r4, #126	; 0x7e
   15e14:	ldrls	pc, [pc, r4, lsl #2]
   15e18:	b	16654 <__assert_fail@plt+0x5450>
   15e1c:	andeq	r6, r1, r4, lsr r0
   15e20:	andeq	r6, r1, r4, asr r6
   15e24:	andeq	r6, r1, r4, asr r6
   15e28:	andeq	r6, r1, r4, asr r6
   15e2c:	andeq	r6, r1, r4, asr r6
   15e30:	andeq	r6, r1, r4, asr r6
   15e34:	andeq	r6, r1, r4, asr r6
   15e38:	muleq	r1, r0, r3
   15e3c:	andeq	r6, r1, ip, lsr #32
   15e40:	andeq	r6, r1, r8, asr #6
   15e44:	andeq	r6, r1, r0, asr #6
   15e48:			; <UNDEFINED> instruction: 0x000162b0
   15e4c:	andeq	r6, r1, r8, lsr #5
   15e50:	andeq	r6, r1, r4, lsr #32
   15e54:	andeq	r6, r1, r4, asr r6
   15e58:	andeq	r6, r1, r4, asr r6
   15e5c:	andeq	r6, r1, r4, asr r6
   15e60:	andeq	r6, r1, r4, asr r6
   15e64:	andeq	r6, r1, r4, asr r6
   15e68:	andeq	r6, r1, r4, asr r6
   15e6c:	andeq	r6, r1, r4, asr r6
   15e70:	andeq	r6, r1, r4, asr r6
   15e74:	andeq	r6, r1, r4, asr r6
   15e78:	andeq	r6, r1, r4, asr r6
   15e7c:	andeq	r6, r1, r4, asr r6
   15e80:	andeq	r6, r1, r4, asr r6
   15e84:	andeq	r6, r1, r4, asr r6
   15e88:	andeq	r6, r1, r4, asr r6
   15e8c:	andeq	r6, r1, r4, asr r6
   15e90:	andeq	r6, r1, r4, asr r6
   15e94:	andeq	r6, r1, r4, asr r6
   15e98:	andeq	r6, r1, r4, asr r6
   15e9c:	andeq	r6, r1, r4, ror #7
   15ea0:	andeq	r6, r1, r0, ror #7
   15ea4:	andeq	r6, r1, r0, ror #7
   15ea8:			; <UNDEFINED> instruction: 0x000163b8
   15eac:	andeq	r6, r1, r0, ror #7
   15eb0:	andeq	r6, r1, r8, lsr #20
   15eb4:	andeq	r6, r1, r0, ror #7
   15eb8:			; <UNDEFINED> instruction: 0x000165b8
   15ebc:	andeq	r6, r1, r0, ror #7
   15ec0:	andeq	r6, r1, r0, ror #7
   15ec4:	andeq	r6, r1, r0, ror #7
   15ec8:	andeq	r6, r1, r8, lsr #20
   15ecc:	andeq	r6, r1, r8, lsr #20
   15ed0:	andeq	r6, r1, r8, lsr #20
   15ed4:	andeq	r6, r1, r8, lsr #20
   15ed8:	andeq	r6, r1, r8, lsr #20
   15edc:	andeq	r6, r1, r8, lsr #20
   15ee0:	andeq	r6, r1, r8, lsr #20
   15ee4:	andeq	r6, r1, r8, lsr #20
   15ee8:	andeq	r6, r1, r8, lsr #20
   15eec:	andeq	r6, r1, r8, lsr #20
   15ef0:	andeq	r6, r1, r8, lsr #20
   15ef4:	andeq	r6, r1, r8, lsr #20
   15ef8:	andeq	r6, r1, r8, lsr #20
   15efc:	andeq	r6, r1, r8, lsr #20
   15f00:	andeq	r6, r1, r8, lsr #20
   15f04:	andeq	r6, r1, r8, lsr #20
   15f08:	andeq	r6, r1, r0, ror #7
   15f0c:	andeq	r6, r1, r0, ror #7
   15f10:	andeq	r6, r1, r0, ror #7
   15f14:	andeq	r6, r1, r0, ror #7
   15f18:	andeq	r6, r1, ip, lsr r1
   15f1c:	andeq	r6, r1, r4, asr r6
   15f20:	andeq	r6, r1, r8, lsr #20
   15f24:	andeq	r6, r1, r8, lsr #20
   15f28:	andeq	r6, r1, r8, lsr #20
   15f2c:	andeq	r6, r1, r8, lsr #20
   15f30:	andeq	r6, r1, r8, lsr #20
   15f34:	andeq	r6, r1, r8, lsr #20
   15f38:	andeq	r6, r1, r8, lsr #20
   15f3c:	andeq	r6, r1, r8, lsr #20
   15f40:	andeq	r6, r1, r8, lsr #20
   15f44:	andeq	r6, r1, r8, lsr #20
   15f48:	andeq	r6, r1, r8, lsr #20
   15f4c:	andeq	r6, r1, r8, lsr #20
   15f50:	andeq	r6, r1, r8, lsr #20
   15f54:	andeq	r6, r1, r8, lsr #20
   15f58:	andeq	r6, r1, r8, lsr #20
   15f5c:	andeq	r6, r1, r8, lsr #20
   15f60:	andeq	r6, r1, r8, lsr #20
   15f64:	andeq	r6, r1, r8, lsr #20
   15f68:	andeq	r6, r1, r8, lsr #20
   15f6c:	andeq	r6, r1, r8, lsr #20
   15f70:	andeq	r6, r1, r8, lsr #20
   15f74:	andeq	r6, r1, r8, lsr #20
   15f78:	andeq	r6, r1, r8, lsr #20
   15f7c:	andeq	r6, r1, r8, lsr #20
   15f80:	andeq	r6, r1, r8, lsr #20
   15f84:	andeq	r6, r1, r8, lsr #20
   15f88:	andeq	r6, r1, r0, ror #7
   15f8c:			; <UNDEFINED> instruction: 0x000162b8
   15f90:	andeq	r6, r1, r8, lsr #20
   15f94:	andeq	r6, r1, r0, ror #7
   15f98:	andeq	r6, r1, r8, lsr #20
   15f9c:	andeq	r6, r1, r0, ror #7
   15fa0:	andeq	r6, r1, r8, lsr #20
   15fa4:	andeq	r6, r1, r8, lsr #20
   15fa8:	andeq	r6, r1, r8, lsr #20
   15fac:	andeq	r6, r1, r8, lsr #20
   15fb0:	andeq	r6, r1, r8, lsr #20
   15fb4:	andeq	r6, r1, r8, lsr #20
   15fb8:	andeq	r6, r1, r8, lsr #20
   15fbc:	andeq	r6, r1, r8, lsr #20
   15fc0:	andeq	r6, r1, r8, lsr #20
   15fc4:	andeq	r6, r1, r8, lsr #20
   15fc8:	andeq	r6, r1, r8, lsr #20
   15fcc:	andeq	r6, r1, r8, lsr #20
   15fd0:	andeq	r6, r1, r8, lsr #20
   15fd4:	andeq	r6, r1, r8, lsr #20
   15fd8:	andeq	r6, r1, r8, lsr #20
   15fdc:	andeq	r6, r1, r8, lsr #20
   15fe0:	andeq	r6, r1, r8, lsr #20
   15fe4:	andeq	r6, r1, r8, lsr #20
   15fe8:	andeq	r6, r1, r8, lsr #20
   15fec:	andeq	r6, r1, r8, lsr #20
   15ff0:	andeq	r6, r1, r8, lsr #20
   15ff4:	andeq	r6, r1, r8, lsr #20
   15ff8:	andeq	r6, r1, r8, lsr #20
   15ffc:	andeq	r6, r1, r8, lsr #20
   16000:	andeq	r6, r1, r8, lsr #20
   16004:	andeq	r6, r1, r8, lsr #20
   16008:	muleq	r1, r8, r3
   1600c:	andeq	r6, r1, r0, ror #7
   16010:	muleq	r1, r8, r3
   16014:			; <UNDEFINED> instruction: 0x000163b8
   16018:	mov	r3, #0
   1601c:	str	r3, [sp, #56]	; 0x38
   16020:	b	15e00 <__assert_fail@plt+0x4bfc>
   16024:	mov	r3, #114	; 0x72
   16028:	b	1634c <__assert_fail@plt+0x5148>
   1602c:	mov	r3, #98	; 0x62
   16030:	b	16364 <__assert_fail@plt+0x5160>
   16034:	ldr	r3, [sp, #48]	; 0x30
   16038:	cmp	r3, #0
   1603c:	beq	16124 <__assert_fail@plt+0x4f20>
   16040:	ldr	r3, [sp, #32]
   16044:	cmp	r3, #0
   16048:	bne	16bac <__assert_fail@plt+0x59a8>
   1604c:	ldr	r3, [sp, #44]	; 0x2c
   16050:	eor	r3, r3, #1
   16054:	cmp	sl, #2
   16058:	movne	r3, #0
   1605c:	andeq	r3, r3, #1
   16060:	cmp	r3, #0
   16064:	moveq	r2, fp
   16068:	beq	160ac <__assert_fail@plt+0x4ea8>
   1606c:	cmp	r7, fp
   16070:	ldrhi	r2, [sp, #36]	; 0x24
   16074:	movhi	r1, #39	; 0x27
   16078:	strbhi	r1, [r2, fp]
   1607c:	add	r2, fp, #1
   16080:	cmp	r7, r2
   16084:	ldrhi	r1, [sp, #36]	; 0x24
   16088:	movhi	r0, #36	; 0x24
   1608c:	strbhi	r0, [r1, r2]
   16090:	add	r2, fp, #2
   16094:	cmp	r7, r2
   16098:	ldrhi	r1, [sp, #36]	; 0x24
   1609c:	movhi	r0, #39	; 0x27
   160a0:	strbhi	r0, [r1, r2]
   160a4:	add	r2, fp, #3
   160a8:	str	r3, [sp, #44]	; 0x2c
   160ac:	cmp	r7, r2
   160b0:	ldrhi	r3, [sp, #36]	; 0x24
   160b4:	movhi	r1, #92	; 0x5c
   160b8:	strbhi	r1, [r3, r2]
   160bc:	add	fp, r2, #1
   160c0:	cmp	r5, #0
   160c4:	beq	16a30 <__assert_fail@plt+0x582c>
   160c8:	add	r3, r6, #1
   160cc:	ldr	r1, [sp, #28]
   160d0:	cmp	r1, r3
   160d4:	bls	16a40 <__assert_fail@plt+0x583c>
   160d8:	ldr	r1, [sp, #52]	; 0x34
   160dc:	ldrb	r3, [r1, r3]
   160e0:	sub	r3, r3, #48	; 0x30
   160e4:	uxtb	r3, r3
   160e8:	cmp	r3, #9
   160ec:	bhi	16a4c <__assert_fail@plt+0x5848>
   160f0:	cmp	r7, fp
   160f4:	movhi	r3, #48	; 0x30
   160f8:	ldrhi	r1, [sp, #36]	; 0x24
   160fc:	strbhi	r3, [r1, fp]
   16100:	add	r3, r2, #2
   16104:	cmp	r7, r3
   16108:	movhi	r1, #48	; 0x30
   1610c:	ldrhi	r0, [sp, #36]	; 0x24
   16110:	strbhi	r1, [r0, r3]
   16114:	add	fp, r2, #3
   16118:	ldr	r8, [sp, #32]
   1611c:	mov	r4, #48	; 0x30
   16120:	b	163fc <__assert_fail@plt+0x51f8>
   16124:	ldr	r3, [sp, #156]	; 0x9c
   16128:	tst	r3, #1
   1612c:	bne	164f0 <__assert_fail@plt+0x52ec>
   16130:	ldr	r5, [sp, #48]	; 0x30
   16134:	mov	r8, r5
   16138:	b	163fc <__assert_fail@plt+0x51f8>
   1613c:	cmp	sl, #2
   16140:	beq	16158 <__assert_fail@plt+0x4f54>
   16144:	cmp	sl, #5
   16148:	beq	16170 <__assert_fail@plt+0x4f6c>
   1614c:	mov	r8, #0
   16150:	mov	r5, r8
   16154:	b	163fc <__assert_fail@plt+0x51f8>
   16158:	ldr	r3, [sp, #32]
   1615c:	cmp	r3, #0
   16160:	bne	16bc0 <__assert_fail@plt+0x59bc>
   16164:	mov	r8, r3
   16168:	mov	r5, r3
   1616c:	b	163fc <__assert_fail@plt+0x51f8>
   16170:	ldr	r3, [sp, #156]	; 0x9c
   16174:	tst	r3, #4
   16178:	beq	16a58 <__assert_fail@plt+0x5854>
   1617c:	add	r3, r6, #2
   16180:	ldr	r2, [sp, #28]
   16184:	cmp	r2, r3
   16188:	bls	16a64 <__assert_fail@plt+0x5860>
   1618c:	ldr	r2, [sp, #52]	; 0x34
   16190:	add	r2, r2, r6
   16194:	ldrb	r2, [r2, #1]
   16198:	cmp	r2, #63	; 0x3f
   1619c:	movne	r8, #0
   161a0:	movne	r5, r8
   161a4:	bne	163fc <__assert_fail@plt+0x51f8>
   161a8:	ldr	r2, [sp, #52]	; 0x34
   161ac:	ldrb	r2, [r2, r3]
   161b0:	sub	r1, r2, #33	; 0x21
   161b4:	cmp	r1, #29
   161b8:	ldrls	pc, [pc, r1, lsl #2]
   161bc:	b	16a70 <__assert_fail@plt+0x586c>
   161c0:	andeq	r6, r1, r8, lsr r2
   161c4:	andeq	r6, r1, r0, ror sl
   161c8:	andeq	r6, r1, r0, ror sl
   161cc:	andeq	r6, r1, r0, ror sl
   161d0:	andeq	r6, r1, r0, ror sl
   161d4:	andeq	r6, r1, r0, ror sl
   161d8:	andeq	r6, r1, r8, lsr r2
   161dc:	andeq	r6, r1, r8, lsr r2
   161e0:	andeq	r6, r1, r8, lsr r2
   161e4:	andeq	r6, r1, r0, ror sl
   161e8:	andeq	r6, r1, r0, ror sl
   161ec:	andeq	r6, r1, r0, ror sl
   161f0:	andeq	r6, r1, r8, lsr r2
   161f4:	andeq	r6, r1, r0, ror sl
   161f8:	andeq	r6, r1, r8, lsr r2
   161fc:	andeq	r6, r1, r0, ror sl
   16200:	andeq	r6, r1, r0, ror sl
   16204:	andeq	r6, r1, r0, ror sl
   16208:	andeq	r6, r1, r0, ror sl
   1620c:	andeq	r6, r1, r0, ror sl
   16210:	andeq	r6, r1, r0, ror sl
   16214:	andeq	r6, r1, r0, ror sl
   16218:	andeq	r6, r1, r0, ror sl
   1621c:	andeq	r6, r1, r0, ror sl
   16220:	andeq	r6, r1, r0, ror sl
   16224:	andeq	r6, r1, r0, ror sl
   16228:	andeq	r6, r1, r0, ror sl
   1622c:	andeq	r6, r1, r8, lsr r2
   16230:	andeq	r6, r1, r8, lsr r2
   16234:	andeq	r6, r1, r8, lsr r2
   16238:	ldr	r1, [sp, #32]
   1623c:	cmp	r1, #0
   16240:	bne	16c80 <__assert_fail@plt+0x5a7c>
   16244:	cmp	r7, fp
   16248:	movhi	r1, #63	; 0x3f
   1624c:	ldrhi	r0, [sp, #36]	; 0x24
   16250:	strbhi	r1, [r0, fp]
   16254:	add	r1, fp, #1
   16258:	cmp	r7, r1
   1625c:	ldrhi	r0, [sp, #36]	; 0x24
   16260:	movhi	ip, #34	; 0x22
   16264:	strbhi	ip, [r0, r1]
   16268:	add	r1, fp, #2
   1626c:	cmp	r7, r1
   16270:	ldrhi	r0, [sp, #36]	; 0x24
   16274:	movhi	ip, #34	; 0x22
   16278:	strbhi	ip, [r0, r1]
   1627c:	add	r1, fp, #3
   16280:	cmp	r7, r1
   16284:	movhi	r0, #63	; 0x3f
   16288:	ldrhi	ip, [sp, #36]	; 0x24
   1628c:	strbhi	r0, [ip, r1]
   16290:	add	fp, fp, #4
   16294:	ldr	r5, [sp, #32]
   16298:	mov	r8, r5
   1629c:	mov	r4, r2
   162a0:	mov	r6, r3
   162a4:	b	163fc <__assert_fail@plt+0x51f8>
   162a8:	mov	r3, #102	; 0x66
   162ac:	b	16364 <__assert_fail@plt+0x5160>
   162b0:	mov	r3, #118	; 0x76
   162b4:	b	16364 <__assert_fail@plt+0x5160>
   162b8:	cmp	sl, #2
   162bc:	beq	16328 <__assert_fail@plt+0x5124>
   162c0:	ldr	r3, [sp, #48]	; 0x30
   162c4:	ldr	r2, [sp, #32]
   162c8:	and	r3, r3, r2
   162cc:	tst	r9, r3
   162d0:	moveq	r3, r4
   162d4:	beq	16364 <__assert_fail@plt+0x5160>
   162d8:	mov	r8, #0
   162dc:	mov	r5, r8
   162e0:	eor	r5, r5, #1
   162e4:	ldr	r3, [sp, #44]	; 0x2c
   162e8:	and	r5, r5, r3
   162ec:	tst	r5, #255	; 0xff
   162f0:	beq	164d0 <__assert_fail@plt+0x52cc>
   162f4:	cmp	r7, fp
   162f8:	ldrhi	r3, [sp, #36]	; 0x24
   162fc:	movhi	r2, #39	; 0x27
   16300:	strbhi	r2, [r3, fp]
   16304:	add	r3, fp, #1
   16308:	cmp	r7, r3
   1630c:	ldrhi	r2, [sp, #36]	; 0x24
   16310:	movhi	r1, #39	; 0x27
   16314:	strbhi	r1, [r2, r3]
   16318:	add	fp, fp, #2
   1631c:	mov	r3, #0
   16320:	str	r3, [sp, #44]	; 0x2c
   16324:	b	164d0 <__assert_fail@plt+0x52cc>
   16328:	ldr	r3, [sp, #32]
   1632c:	cmp	r3, #0
   16330:	bne	16bcc <__assert_fail@plt+0x59c8>
   16334:	mov	r8, r3
   16338:	mov	r5, r3
   1633c:	b	162e0 <__assert_fail@plt+0x50dc>
   16340:	mov	r3, #110	; 0x6e
   16344:	b	1634c <__assert_fail@plt+0x5148>
   16348:	mov	r3, #116	; 0x74
   1634c:	ldr	r2, [sp, #32]
   16350:	cmp	sl, #2
   16354:	movne	r2, #0
   16358:	andeq	r2, r2, #1
   1635c:	cmp	r2, #0
   16360:	bne	16384 <__assert_fail@plt+0x5180>
   16364:	ldr	r2, [sp, #48]	; 0x30
   16368:	cmp	r2, #0
   1636c:	moveq	r8, r2
   16370:	moveq	r5, r2
   16374:	beq	163fc <__assert_fail@plt+0x51f8>
   16378:	mov	r4, r3
   1637c:	mov	r8, #0
   16380:	b	16454 <__assert_fail@plt+0x5250>
   16384:	mov	r8, sl
   16388:	mov	sl, r7
   1638c:	b	16bf8 <__assert_fail@plt+0x59f4>
   16390:	mov	r3, #97	; 0x61
   16394:	b	16364 <__assert_fail@plt+0x5160>
   16398:	ldr	r3, [sp, #28]
   1639c:	cmn	r3, #1
   163a0:	beq	163cc <__assert_fail@plt+0x51c8>
   163a4:	ldr	r3, [sp, #28]
   163a8:	subs	r3, r3, #1
   163ac:	movne	r3, #1
   163b0:	cmp	r3, #0
   163b4:	bne	16a7c <__assert_fail@plt+0x5878>
   163b8:	cmp	r6, #0
   163bc:	beq	163e4 <__assert_fail@plt+0x51e0>
   163c0:	mov	r8, #0
   163c4:	mov	r5, r8
   163c8:	b	163fc <__assert_fail@plt+0x51f8>
   163cc:	ldr	r3, [sp, #52]	; 0x34
   163d0:	ldrb	r3, [r3, #1]
   163d4:	adds	r3, r3, #0
   163d8:	movne	r3, #1
   163dc:	b	163b0 <__assert_fail@plt+0x51ac>
   163e0:	mov	r8, #0
   163e4:	ldr	r5, [sp, #32]
   163e8:	cmp	sl, #2
   163ec:	movne	r5, #0
   163f0:	andeq	r5, r5, #1
   163f4:	cmp	r5, #0
   163f8:	bne	165ac <__assert_fail@plt+0x53a8>
   163fc:	ldr	r3, [sp, #68]	; 0x44
   16400:	cmp	sl, #2
   16404:	orreq	r3, r3, #1
   16408:	eor	r3, r3, #1
   1640c:	ldr	r2, [sp, #32]
   16410:	orr	r3, r2, r3
   16414:	tst	r3, #255	; 0xff
   16418:	beq	16448 <__assert_fail@plt+0x5244>
   1641c:	ldr	r3, [sp, #160]	; 0xa0
   16420:	cmp	r3, #0
   16424:	beq	16448 <__assert_fail@plt+0x5244>
   16428:	lsr	r2, r4, #5
   1642c:	uxtb	r2, r2
   16430:	and	r3, r4, #31
   16434:	ldr	r1, [sp, #160]	; 0xa0
   16438:	ldr	r2, [r1, r2, lsl #2]
   1643c:	lsr	r3, r2, r3
   16440:	tst	r3, #1
   16444:	bne	16454 <__assert_fail@plt+0x5250>
   16448:	ldr	r3, [sp, #56]	; 0x38
   1644c:	cmp	r3, #0
   16450:	beq	162e0 <__assert_fail@plt+0x50dc>
   16454:	ldr	r3, [sp, #32]
   16458:	cmp	r3, #0
   1645c:	bne	16c68 <__assert_fail@plt+0x5a64>
   16460:	ldr	r3, [sp, #44]	; 0x2c
   16464:	eor	r3, r3, #1
   16468:	cmp	sl, #2
   1646c:	movne	r3, #0
   16470:	andeq	r3, r3, #1
   16474:	cmp	r3, #0
   16478:	beq	164bc <__assert_fail@plt+0x52b8>
   1647c:	cmp	r7, fp
   16480:	ldrhi	r2, [sp, #36]	; 0x24
   16484:	movhi	r1, #39	; 0x27
   16488:	strbhi	r1, [r2, fp]
   1648c:	add	r2, fp, #1
   16490:	cmp	r7, r2
   16494:	ldrhi	r1, [sp, #36]	; 0x24
   16498:	movhi	r0, #36	; 0x24
   1649c:	strbhi	r0, [r1, r2]
   164a0:	add	r2, fp, #2
   164a4:	cmp	r7, r2
   164a8:	ldrhi	r1, [sp, #36]	; 0x24
   164ac:	movhi	r0, #39	; 0x27
   164b0:	strbhi	r0, [r1, r2]
   164b4:	add	fp, fp, #3
   164b8:	str	r3, [sp, #44]	; 0x2c
   164bc:	cmp	r7, fp
   164c0:	ldrhi	r3, [sp, #36]	; 0x24
   164c4:	movhi	r2, #92	; 0x5c
   164c8:	strbhi	r2, [r3, fp]
   164cc:	add	fp, fp, #1
   164d0:	cmp	fp, r7
   164d4:	ldrcc	r3, [sp, #36]	; 0x24
   164d8:	strbcc	r4, [r3, fp]
   164dc:	add	fp, fp, #1
   164e0:	ldr	r3, [sp, #40]	; 0x28
   164e4:	cmp	r8, #0
   164e8:	moveq	r3, #0
   164ec:	str	r3, [sp, #40]	; 0x28
   164f0:	add	r6, r6, #1
   164f4:	ldr	r3, [sp, #28]
   164f8:	cmn	r3, #1
   164fc:	beq	16a88 <__assert_fail@plt+0x5884>
   16500:	ldr	r3, [sp, #28]
   16504:	subs	r8, r3, r6
   16508:	movne	r8, #1
   1650c:	cmp	r8, #0
   16510:	beq	16a9c <__assert_fail@plt+0x5898>
   16514:	ldr	r5, [sp, #48]	; 0x30
   16518:	cmp	sl, #2
   1651c:	moveq	r5, #0
   16520:	andne	r5, r5, #1
   16524:	ldr	r3, [sp, #60]	; 0x3c
   16528:	adds	r9, r3, #0
   1652c:	movne	r9, #1
   16530:	ands	r2, r5, r9
   16534:	str	r2, [sp, #56]	; 0x38
   16538:	beq	15e00 <__assert_fail@plt+0x4bfc>
   1653c:	add	r4, r6, r3
   16540:	ldr	r2, [sp, #28]
   16544:	cmp	r3, #1
   16548:	movls	r3, #0
   1654c:	movhi	r3, #1
   16550:	cmn	r2, #1
   16554:	movne	r3, #0
   16558:	cmp	r3, #0
   1655c:	beq	1656c <__assert_fail@plt+0x5368>
   16560:	ldr	r0, [sp, #52]	; 0x34
   16564:	bl	110c0 <strlen@plt>
   16568:	str	r0, [sp, #28]
   1656c:	ldr	r3, [sp, #28]
   16570:	cmp	r3, r4
   16574:	bcc	15df8 <__assert_fail@plt+0x4bf4>
   16578:	ldr	r2, [sp, #60]	; 0x3c
   1657c:	ldr	r1, [sp, #72]	; 0x48
   16580:	ldr	r3, [sp, #52]	; 0x34
   16584:	add	r0, r3, r6
   16588:	bl	10fac <memcmp@plt>
   1658c:	cmp	r0, #0
   16590:	bne	16018 <__assert_fail@plt+0x4e14>
   16594:	ldr	r3, [sp, #32]
   16598:	cmp	r3, #0
   1659c:	beq	15e00 <__assert_fail@plt+0x4bfc>
   165a0:	mov	r8, sl
   165a4:	mov	sl, r7
   165a8:	b	16bf8 <__assert_fail@plt+0x59f4>
   165ac:	mov	r8, sl
   165b0:	mov	sl, r7
   165b4:	b	16bf8 <__assert_fail@plt+0x59f4>
   165b8:	cmp	sl, #2
   165bc:	strne	r8, [sp, #80]	; 0x50
   165c0:	movne	r5, #0
   165c4:	bne	163fc <__assert_fail@plt+0x51f8>
   165c8:	ldr	r3, [sp, #32]
   165cc:	cmp	r3, #0
   165d0:	bne	16be4 <__assert_fail@plt+0x59e0>
   165d4:	ldr	r2, [sp, #76]	; 0x4c
   165d8:	adds	r3, r7, #0
   165dc:	movne	r3, #1
   165e0:	cmp	r2, #0
   165e4:	movne	r3, #0
   165e8:	cmp	r3, #0
   165ec:	movne	r3, #0
   165f0:	bne	16620 <__assert_fail@plt+0x541c>
   165f4:	cmp	r7, fp
   165f8:	ldrhi	r3, [sp, #36]	; 0x24
   165fc:	movhi	r2, #39	; 0x27
   16600:	strbhi	r2, [r3, fp]
   16604:	add	r3, fp, #1
   16608:	cmp	r7, r3
   1660c:	ldrhi	r2, [sp, #36]	; 0x24
   16610:	movhi	r1, #92	; 0x5c
   16614:	strbhi	r1, [r2, r3]
   16618:	mov	r3, r7
   1661c:	ldr	r7, [sp, #76]	; 0x4c
   16620:	add	r2, fp, #2
   16624:	cmp	r2, r3
   16628:	ldrcc	r1, [sp, #36]	; 0x24
   1662c:	movcc	r0, #39	; 0x27
   16630:	strbcc	r0, [r1, r2]
   16634:	add	fp, fp, #3
   16638:	ldr	r2, [sp, #32]
   1663c:	mov	r5, r2
   16640:	str	r8, [sp, #80]	; 0x50
   16644:	str	r2, [sp, #44]	; 0x2c
   16648:	str	r7, [sp, #76]	; 0x4c
   1664c:	mov	r7, r3
   16650:	b	163fc <__assert_fail@plt+0x51f8>
   16654:	ldr	r5, [sp, #84]	; 0x54
   16658:	cmp	r5, #1
   1665c:	beq	1668c <__assert_fail@plt+0x5488>
   16660:	mov	r3, #0
   16664:	str	r3, [sp, #104]	; 0x68
   16668:	str	r3, [sp, #108]	; 0x6c
   1666c:	ldr	r3, [sp, #28]
   16670:	cmn	r3, #1
   16674:	beq	166c0 <__assert_fail@plt+0x54bc>
   16678:	mov	r3, #0
   1667c:	str	r4, [sp, #88]	; 0x58
   16680:	str	fp, [sp, #92]	; 0x5c
   16684:	mov	fp, r3
   16688:	b	167e8 <__assert_fail@plt+0x55e4>
   1668c:	bl	110a8 <__ctype_b_loc@plt>
   16690:	ldr	r2, [r0]
   16694:	lsl	r3, r4, #1
   16698:	ldrh	r8, [r2, r3]
   1669c:	lsr	r8, r8, #14
   166a0:	and	r8, r8, #1
   166a4:	mov	r2, r5
   166a8:	eor	r5, r8, #1
   166ac:	ldr	r3, [sp, #48]	; 0x30
   166b0:	and	r5, r5, r3
   166b4:	ands	r5, r5, #255	; 0xff
   166b8:	beq	163fc <__assert_fail@plt+0x51f8>
   166bc:	b	16880 <__assert_fail@plt+0x567c>
   166c0:	ldr	r0, [sp, #52]	; 0x34
   166c4:	bl	110c0 <strlen@plt>
   166c8:	str	r0, [sp, #28]
   166cc:	b	16678 <__assert_fail@plt+0x5474>
   166d0:	mov	r2, fp
   166d4:	mov	r1, r4
   166d8:	ldr	r4, [sp, #88]	; 0x58
   166dc:	ldr	fp, [sp, #92]	; 0x5c
   166e0:	ldr	r0, [sp, #28]
   166e4:	cmp	r0, r5
   166e8:	bls	168b4 <__assert_fail@plt+0x56b0>
   166ec:	ldrb	r3, [r1]
   166f0:	cmp	r3, #0
   166f4:	beq	168bc <__assert_fail@plt+0x56b8>
   166f8:	mov	r3, r1
   166fc:	add	r2, r2, #1
   16700:	add	r1, r6, r2
   16704:	cmp	r0, r1
   16708:	bls	168c4 <__assert_fail@plt+0x56c0>
   1670c:	ldrb	r1, [r3, #1]!
   16710:	cmp	r1, #0
   16714:	bne	166fc <__assert_fail@plt+0x54f8>
   16718:	mov	r8, #0
   1671c:	b	16878 <__assert_fail@plt+0x5674>
   16720:	cmp	r4, r5
   16724:	beq	167c4 <__assert_fail@plt+0x55c0>
   16728:	ldrb	r3, [r4, #1]!
   1672c:	sub	r3, r3, #91	; 0x5b
   16730:	cmp	r3, #33	; 0x21
   16734:	ldrls	pc, [pc, r3, lsl #2]
   16738:	b	16720 <__assert_fail@plt+0x551c>
   1673c:	strdeq	r6, [r1], -r0
   16740:	strdeq	r6, [r1], -r0
   16744:	andeq	r6, r1, r0, lsr #14
   16748:	strdeq	r6, [r1], -r0
   1674c:	andeq	r6, r1, r0, lsr #14
   16750:	strdeq	r6, [r1], -r0
   16754:	andeq	r6, r1, r0, lsr #14
   16758:	andeq	r6, r1, r0, lsr #14
   1675c:	andeq	r6, r1, r0, lsr #14
   16760:	andeq	r6, r1, r0, lsr #14
   16764:	andeq	r6, r1, r0, lsr #14
   16768:	andeq	r6, r1, r0, lsr #14
   1676c:	andeq	r6, r1, r0, lsr #14
   16770:	andeq	r6, r1, r0, lsr #14
   16774:	andeq	r6, r1, r0, lsr #14
   16778:	andeq	r6, r1, r0, lsr #14
   1677c:	andeq	r6, r1, r0, lsr #14
   16780:	andeq	r6, r1, r0, lsr #14
   16784:	andeq	r6, r1, r0, lsr #14
   16788:	andeq	r6, r1, r0, lsr #14
   1678c:	andeq	r6, r1, r0, lsr #14
   16790:	andeq	r6, r1, r0, lsr #14
   16794:	andeq	r6, r1, r0, lsr #14
   16798:	andeq	r6, r1, r0, lsr #14
   1679c:	andeq	r6, r1, r0, lsr #14
   167a0:	andeq	r6, r1, r0, lsr #14
   167a4:	andeq	r6, r1, r0, lsr #14
   167a8:	andeq	r6, r1, r0, lsr #14
   167ac:	andeq	r6, r1, r0, lsr #14
   167b0:	andeq	r6, r1, r0, lsr #14
   167b4:	andeq	r6, r1, r0, lsr #14
   167b8:	andeq	r6, r1, r0, lsr #14
   167bc:	andeq	r6, r1, r0, lsr #14
   167c0:	strdeq	r6, [r1], -r0
   167c4:	ldr	r0, [sp, #100]	; 0x64
   167c8:	bl	10fe8 <iswprint@plt>
   167cc:	cmp	r0, #0
   167d0:	moveq	r8, #0
   167d4:	add	fp, fp, r9
   167d8:	add	r0, sp, #104	; 0x68
   167dc:	bl	10f88 <mbsinit@plt>
   167e0:	cmp	r0, #0
   167e4:	bne	16858 <__assert_fail@plt+0x5654>
   167e8:	add	r5, r6, fp
   167ec:	ldr	r3, [sp, #52]	; 0x34
   167f0:	add	r4, r3, r5
   167f4:	add	r3, sp, #104	; 0x68
   167f8:	ldr	r2, [sp, #28]
   167fc:	sub	r2, r2, r5
   16800:	mov	r1, r4
   16804:	add	r0, sp, #100	; 0x64
   16808:	bl	188d0 <__assert_fail@plt+0x76cc>
   1680c:	subs	r9, r0, #0
   16810:	beq	168cc <__assert_fail@plt+0x56c8>
   16814:	cmn	r9, #1
   16818:	beq	16868 <__assert_fail@plt+0x5664>
   1681c:	cmn	r9, #2
   16820:	beq	166d0 <__assert_fail@plt+0x54cc>
   16824:	ldr	r3, [sp, #32]
   16828:	cmp	sl, #2
   1682c:	movne	r3, #0
   16830:	andeq	r3, r3, #1
   16834:	cmp	r3, #0
   16838:	beq	167c4 <__assert_fail@plt+0x55c0>
   1683c:	cmp	r9, #1
   16840:	bls	167c4 <__assert_fail@plt+0x55c0>
   16844:	sub	r3, r9, #1
   16848:	add	r5, r3, r5
   1684c:	ldr	r3, [sp, #52]	; 0x34
   16850:	add	r5, r3, r5
   16854:	b	16728 <__assert_fail@plt+0x5524>
   16858:	ldr	r4, [sp, #88]	; 0x58
   1685c:	mov	r2, fp
   16860:	ldr	fp, [sp, #92]	; 0x5c
   16864:	b	16878 <__assert_fail@plt+0x5674>
   16868:	ldr	r4, [sp, #88]	; 0x58
   1686c:	mov	r2, fp
   16870:	ldr	fp, [sp, #92]	; 0x5c
   16874:	mov	r8, #0
   16878:	cmp	r2, #1
   1687c:	bls	166a8 <__assert_fail@plt+0x54a4>
   16880:	add	r1, r6, r2
   16884:	ldr	ip, [sp, #64]	; 0x40
   16888:	mov	r5, #0
   1688c:	eor	r3, r8, #1
   16890:	ldr	r2, [sp, #48]	; 0x30
   16894:	and	r3, r3, r2
   16898:	uxtb	r3, r3
   1689c:	ldr	r9, [sp, #32]
   168a0:	ldr	lr, [sp, #44]	; 0x2c
   168a4:	ldr	r2, [sp, #56]	; 0x38
   168a8:	str	r8, [sp, #56]	; 0x38
   168ac:	ldr	r0, [sp, #36]	; 0x24
   168b0:	b	1694c <__assert_fail@plt+0x5748>
   168b4:	mov	r8, #0
   168b8:	b	16878 <__assert_fail@plt+0x5674>
   168bc:	mov	r8, #0
   168c0:	b	16878 <__assert_fail@plt+0x5674>
   168c4:	mov	r8, #0
   168c8:	b	16878 <__assert_fail@plt+0x5674>
   168cc:	ldr	r4, [sp, #88]	; 0x58
   168d0:	mov	r2, fp
   168d4:	ldr	fp, [sp, #92]	; 0x5c
   168d8:	b	16878 <__assert_fail@plt+0x5674>
   168dc:	cmp	r2, #0
   168e0:	beq	168f4 <__assert_fail@plt+0x56f0>
   168e4:	cmp	r7, fp
   168e8:	movhi	r2, #92	; 0x5c
   168ec:	strbhi	r2, [r0, fp]
   168f0:	add	fp, fp, #1
   168f4:	add	r8, r6, #1
   168f8:	cmp	r1, r8
   168fc:	bls	16a04 <__assert_fail@plt+0x5800>
   16900:	eor	r2, r5, #1
   16904:	and	r2, r2, lr
   16908:	ands	r2, r2, #255	; 0xff
   1690c:	beq	16a20 <__assert_fail@plt+0x581c>
   16910:	cmp	r7, fp
   16914:	movhi	r2, #39	; 0x27
   16918:	strbhi	r2, [r0, fp]
   1691c:	add	r2, fp, #1
   16920:	cmp	r7, r2
   16924:	movhi	lr, #39	; 0x27
   16928:	strbhi	lr, [r0, r2]
   1692c:	add	fp, fp, #2
   16930:	mov	r6, r8
   16934:	mov	r2, r3
   16938:	mov	lr, r3
   1693c:	cmp	r7, fp
   16940:	strbhi	r4, [r0, fp]
   16944:	add	fp, fp, #1
   16948:	ldrb	r4, [ip, #1]!
   1694c:	cmp	r3, #0
   16950:	beq	168dc <__assert_fail@plt+0x56d8>
   16954:	cmp	r9, #0
   16958:	bne	16c5c <__assert_fail@plt+0x5a58>
   1695c:	eor	r5, lr, #1
   16960:	cmp	sl, #2
   16964:	movne	r5, #0
   16968:	andeq	r5, r5, #1
   1696c:	cmp	r5, #0
   16970:	beq	169a8 <__assert_fail@plt+0x57a4>
   16974:	cmp	r7, fp
   16978:	movhi	lr, #39	; 0x27
   1697c:	strbhi	lr, [r0, fp]
   16980:	add	lr, fp, #1
   16984:	cmp	r7, lr
   16988:	movhi	r8, #36	; 0x24
   1698c:	strbhi	r8, [r0, lr]
   16990:	add	lr, fp, #2
   16994:	cmp	r7, lr
   16998:	movhi	r8, #39	; 0x27
   1699c:	strbhi	r8, [r0, lr]
   169a0:	add	fp, fp, #3
   169a4:	mov	lr, r5
   169a8:	cmp	r7, fp
   169ac:	movhi	r5, #92	; 0x5c
   169b0:	strbhi	r5, [r0, fp]
   169b4:	add	r5, fp, #1
   169b8:	cmp	r7, r5
   169bc:	lsrhi	r8, r4, #6
   169c0:	addhi	r8, r8, #48	; 0x30
   169c4:	strbhi	r8, [r0, r5]
   169c8:	add	r8, fp, #2
   169cc:	cmp	r7, r8
   169d0:	lsrhi	r5, r4, #3
   169d4:	andhi	r5, r5, #7
   169d8:	addhi	r5, r5, #48	; 0x30
   169dc:	strbhi	r5, [r0, r8]
   169e0:	add	fp, fp, #3
   169e4:	and	r4, r4, #7
   169e8:	add	r4, r4, #48	; 0x30
   169ec:	add	r5, r6, #1
   169f0:	cmp	r1, r5
   169f4:	bls	16a10 <__assert_fail@plt+0x580c>
   169f8:	mov	r6, r5
   169fc:	mov	r5, r3
   16a00:	b	1693c <__assert_fail@plt+0x5738>
   16a04:	str	lr, [sp, #44]	; 0x2c
   16a08:	ldr	r8, [sp, #56]	; 0x38
   16a0c:	b	162e0 <__assert_fail@plt+0x50dc>
   16a10:	str	lr, [sp, #44]	; 0x2c
   16a14:	ldr	r8, [sp, #56]	; 0x38
   16a18:	mov	r5, r3
   16a1c:	b	162e0 <__assert_fail@plt+0x50dc>
   16a20:	mov	r6, r8
   16a24:	b	1693c <__assert_fail@plt+0x5738>
   16a28:	mov	r5, #0
   16a2c:	b	163fc <__assert_fail@plt+0x51f8>
   16a30:	mov	r8, r5
   16a34:	ldr	r5, [sp, #48]	; 0x30
   16a38:	mov	r4, #48	; 0x30
   16a3c:	b	163fc <__assert_fail@plt+0x51f8>
   16a40:	ldr	r8, [sp, #32]
   16a44:	mov	r4, #48	; 0x30
   16a48:	b	163fc <__assert_fail@plt+0x51f8>
   16a4c:	ldr	r8, [sp, #32]
   16a50:	mov	r4, #48	; 0x30
   16a54:	b	163fc <__assert_fail@plt+0x51f8>
   16a58:	mov	r8, #0
   16a5c:	mov	r5, r8
   16a60:	b	163fc <__assert_fail@plt+0x51f8>
   16a64:	mov	r8, #0
   16a68:	mov	r5, r8
   16a6c:	b	163fc <__assert_fail@plt+0x51f8>
   16a70:	mov	r8, #0
   16a74:	mov	r5, r8
   16a78:	b	163fc <__assert_fail@plt+0x51f8>
   16a7c:	mov	r8, #0
   16a80:	mov	r5, r8
   16a84:	b	163fc <__assert_fail@plt+0x51f8>
   16a88:	ldr	r3, [sp, #52]	; 0x34
   16a8c:	ldrb	r8, [r3, r6]
   16a90:	adds	r8, r8, #0
   16a94:	movne	r8, #1
   16a98:	b	1650c <__assert_fail@plt+0x5308>
   16a9c:	cmp	sl, #2
   16aa0:	movne	r3, #0
   16aa4:	moveq	r3, #1
   16aa8:	ldr	r1, [sp, #32]
   16aac:	mov	r2, r1
   16ab0:	and	r2, r2, r3
   16ab4:	cmp	fp, #0
   16ab8:	movne	r2, #0
   16abc:	andeq	r2, r2, #1
   16ac0:	cmp	r2, #0
   16ac4:	bne	16c74 <__assert_fail@plt+0x5a70>
   16ac8:	eor	r2, r1, #1
   16acc:	and	r3, r3, r2
   16ad0:	ldr	r1, [sp, #80]	; 0x50
   16ad4:	tst	r1, r3
   16ad8:	beq	16b50 <__assert_fail@plt+0x594c>
   16adc:	ldr	r3, [sp, #40]	; 0x28
   16ae0:	cmp	r3, #0
   16ae4:	bne	16b0c <__assert_fail@plt+0x5908>
   16ae8:	ldr	r1, [sp, #76]	; 0x4c
   16aec:	clz	r3, r7
   16af0:	lsr	r3, r3, #5
   16af4:	cmp	r1, #0
   16af8:	moveq	r3, #0
   16afc:	cmp	r3, #0
   16b00:	beq	16b50 <__assert_fail@plt+0x594c>
   16b04:	ldr	r7, [sp, #76]	; 0x4c
   16b08:	b	15ba0 <__assert_fail@plt+0x499c>
   16b0c:	ldr	r3, [sp, #168]	; 0xa8
   16b10:	str	r3, [sp, #16]
   16b14:	ldr	r3, [sp, #164]	; 0xa4
   16b18:	str	r3, [sp, #12]
   16b1c:	ldr	r3, [sp, #160]	; 0xa0
   16b20:	str	r3, [sp, #8]
   16b24:	ldr	r3, [sp, #156]	; 0x9c
   16b28:	str	r3, [sp, #4]
   16b2c:	mov	r3, #5
   16b30:	str	r3, [sp]
   16b34:	ldr	r3, [sp, #28]
   16b38:	ldr	r2, [sp, #52]	; 0x34
   16b3c:	ldr	r1, [sp, #76]	; 0x4c
   16b40:	ldr	r0, [sp, #36]	; 0x24
   16b44:	bl	15b40 <__assert_fail@plt+0x493c>
   16b48:	mov	fp, r0
   16b4c:	b	16c50 <__assert_fail@plt+0x5a4c>
   16b50:	mov	sl, r7
   16b54:	ldr	r3, [sp, #72]	; 0x48
   16b58:	cmp	r3, #0
   16b5c:	moveq	r2, #0
   16b60:	andne	r2, r2, #1
   16b64:	cmp	r2, #0
   16b68:	beq	16b98 <__assert_fail@plt+0x5994>
   16b6c:	mov	r2, r3
   16b70:	ldrb	r3, [r3]
   16b74:	cmp	r3, #0
   16b78:	beq	16b98 <__assert_fail@plt+0x5994>
   16b7c:	ldr	r1, [sp, #36]	; 0x24
   16b80:	cmp	sl, fp
   16b84:	strbhi	r3, [r1, fp]
   16b88:	add	fp, fp, #1
   16b8c:	ldrb	r3, [r2, #1]!
   16b90:	cmp	r3, #0
   16b94:	bne	16b80 <__assert_fail@plt+0x597c>
   16b98:	cmp	sl, fp
   16b9c:	movhi	r3, #0
   16ba0:	ldrhi	r2, [sp, #36]	; 0x24
   16ba4:	strbhi	r3, [r2, fp]
   16ba8:	b	16c50 <__assert_fail@plt+0x5a4c>
   16bac:	mov	r8, sl
   16bb0:	mov	sl, r7
   16bb4:	ldr	r3, [sp, #32]
   16bb8:	str	r3, [sp, #48]	; 0x30
   16bbc:	b	16bf8 <__assert_fail@plt+0x59f4>
   16bc0:	mov	r8, sl
   16bc4:	mov	sl, r7
   16bc8:	b	16bf8 <__assert_fail@plt+0x59f4>
   16bcc:	mov	r8, sl
   16bd0:	mov	sl, r7
   16bd4:	b	16bf8 <__assert_fail@plt+0x59f4>
   16bd8:	andeq	sl, r1, r0, ror r8
   16bdc:	andeq	sl, r1, r0, lsl #17
   16be0:	andeq	sl, r1, r4, ror r8
   16be4:	mov	r8, sl
   16be8:	mov	sl, r7
   16bec:	b	16bf8 <__assert_fail@plt+0x59f4>
   16bf0:	mov	r8, sl
   16bf4:	mov	sl, r7
   16bf8:	ldr	r3, [sp, #48]	; 0x30
   16bfc:	cmp	r8, #2
   16c00:	movne	r3, #0
   16c04:	andeq	r3, r3, #1
   16c08:	cmp	r3, #0
   16c0c:	movne	r8, #4
   16c10:	ldr	r3, [sp, #168]	; 0xa8
   16c14:	str	r3, [sp, #16]
   16c18:	ldr	r3, [sp, #164]	; 0xa4
   16c1c:	str	r3, [sp, #12]
   16c20:	mov	r3, #0
   16c24:	str	r3, [sp, #8]
   16c28:	ldr	r3, [sp, #156]	; 0x9c
   16c2c:	bic	r3, r3, #2
   16c30:	str	r3, [sp, #4]
   16c34:	str	r8, [sp]
   16c38:	ldr	r3, [sp, #28]
   16c3c:	ldr	r2, [sp, #52]	; 0x34
   16c40:	mov	r1, sl
   16c44:	ldr	r0, [sp, #36]	; 0x24
   16c48:	bl	15b40 <__assert_fail@plt+0x493c>
   16c4c:	mov	fp, r0
   16c50:	mov	r0, fp
   16c54:	add	sp, sp, #116	; 0x74
   16c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c5c:	mov	r8, sl
   16c60:	mov	sl, r7
   16c64:	b	16bf8 <__assert_fail@plt+0x59f4>
   16c68:	mov	r8, sl
   16c6c:	mov	sl, r7
   16c70:	b	16bf8 <__assert_fail@plt+0x59f4>
   16c74:	mov	r8, sl
   16c78:	mov	sl, r7
   16c7c:	b	16bf8 <__assert_fail@plt+0x59f4>
   16c80:	mov	r8, sl
   16c84:	mov	sl, r7
   16c88:	b	16c10 <__assert_fail@plt+0x5a0c>
   16c8c:	mov	r3, #1
   16c90:	str	r3, [sp, #32]
   16c94:	str	r3, [sp, #48]	; 0x30
   16c98:	str	r3, [sp, #60]	; 0x3c
   16c9c:	ldr	r3, [pc, #-196]	; 16be0 <__assert_fail@plt+0x59dc>
   16ca0:	str	r3, [sp, #72]	; 0x48
   16ca4:	mov	fp, #0
   16ca8:	mov	sl, #5
   16cac:	b	15bfc <__assert_fail@plt+0x49f8>
   16cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cb4:	sub	sp, sp, #52	; 0x34
   16cb8:	mov	r5, r0
   16cbc:	str	r1, [sp, #24]
   16cc0:	str	r2, [sp, #28]
   16cc4:	mov	r4, r3
   16cc8:	bl	110d8 <__errno_location@plt>
   16ccc:	str	r0, [sp, #32]
   16cd0:	ldr	r3, [r0]
   16cd4:	str	r3, [sp, #36]	; 0x24
   16cd8:	ldr	r3, [pc, #396]	; 16e6c <__assert_fail@plt+0x5c68>
   16cdc:	ldr	r6, [r3]
   16ce0:	cmn	r5, #-2147483647	; 0x80000001
   16ce4:	movne	r3, #0
   16ce8:	moveq	r3, #1
   16cec:	orrs	r3, r3, r5, lsr #31
   16cf0:	bne	16e30 <__assert_fail@plt+0x5c2c>
   16cf4:	ldr	r3, [pc, #368]	; 16e6c <__assert_fail@plt+0x5c68>
   16cf8:	ldr	r2, [r3, #4]
   16cfc:	cmp	r5, r2
   16d00:	blt	16d68 <__assert_fail@plt+0x5b64>
   16d04:	str	r2, [sp, #44]	; 0x2c
   16d08:	add	r3, r3, #8
   16d0c:	cmp	r6, r3
   16d10:	beq	16e34 <__assert_fail@plt+0x5c30>
   16d14:	sub	r2, r5, r2
   16d18:	mov	r3, #8
   16d1c:	str	r3, [sp]
   16d20:	mvn	r3, #-2147483648	; 0x80000000
   16d24:	add	r2, r2, #1
   16d28:	add	r1, sp, #44	; 0x2c
   16d2c:	mov	r0, r6
   16d30:	bl	17bb4 <__assert_fail@plt+0x69b0>
   16d34:	mov	r6, r0
   16d38:	ldr	r3, [pc, #300]	; 16e6c <__assert_fail@plt+0x5c68>
   16d3c:	str	r0, [r3]
   16d40:	ldr	r7, [pc, #292]	; 16e6c <__assert_fail@plt+0x5c68>
   16d44:	ldr	r0, [r7, #4]
   16d48:	ldr	r2, [sp, #44]	; 0x2c
   16d4c:	sub	r2, r2, r0
   16d50:	lsl	r2, r2, #3
   16d54:	mov	r1, #0
   16d58:	add	r0, r6, r0, lsl #3
   16d5c:	bl	11108 <memset@plt>
   16d60:	ldr	r3, [sp, #44]	; 0x2c
   16d64:	str	r3, [r7, #4]
   16d68:	add	fp, r6, r5, lsl #3
   16d6c:	ldr	r8, [r6, r5, lsl #3]
   16d70:	ldr	r7, [fp, #4]
   16d74:	ldr	r9, [r4, #4]
   16d78:	orr	r9, r9, #1
   16d7c:	add	sl, r4, #8
   16d80:	ldr	r3, [r4, #44]	; 0x2c
   16d84:	str	r3, [sp, #16]
   16d88:	ldr	r3, [r4, #40]	; 0x28
   16d8c:	str	r3, [sp, #12]
   16d90:	str	sl, [sp, #8]
   16d94:	str	r9, [sp, #4]
   16d98:	ldr	r3, [r4]
   16d9c:	str	r3, [sp]
   16da0:	ldr	r3, [sp, #28]
   16da4:	ldr	r2, [sp, #24]
   16da8:	mov	r1, r8
   16dac:	mov	r0, r7
   16db0:	bl	15b40 <__assert_fail@plt+0x493c>
   16db4:	cmp	r8, r0
   16db8:	bhi	16e18 <__assert_fail@plt+0x5c14>
   16dbc:	add	r8, r0, #1
   16dc0:	str	r8, [r6, r5, lsl #3]
   16dc4:	ldr	r3, [pc, #164]	; 16e70 <__assert_fail@plt+0x5c6c>
   16dc8:	cmp	r7, r3
   16dcc:	beq	16dd8 <__assert_fail@plt+0x5bd4>
   16dd0:	mov	r0, r7
   16dd4:	bl	15574 <__assert_fail@plt+0x4370>
   16dd8:	mov	r0, r8
   16ddc:	bl	17a30 <__assert_fail@plt+0x682c>
   16de0:	mov	r7, r0
   16de4:	str	r0, [fp, #4]
   16de8:	ldr	r3, [r4, #44]	; 0x2c
   16dec:	str	r3, [sp, #16]
   16df0:	ldr	r3, [r4, #40]	; 0x28
   16df4:	str	r3, [sp, #12]
   16df8:	str	sl, [sp, #8]
   16dfc:	str	r9, [sp, #4]
   16e00:	ldr	r3, [r4]
   16e04:	str	r3, [sp]
   16e08:	ldr	r3, [sp, #28]
   16e0c:	ldr	r2, [sp, #24]
   16e10:	mov	r1, r8
   16e14:	bl	15b40 <__assert_fail@plt+0x493c>
   16e18:	ldr	r3, [sp, #32]
   16e1c:	ldr	r2, [sp, #36]	; 0x24
   16e20:	str	r2, [r3]
   16e24:	mov	r0, r7
   16e28:	add	sp, sp, #52	; 0x34
   16e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e30:	bl	111ec <abort@plt>
   16e34:	sub	r2, r5, r2
   16e38:	mov	r3, #8
   16e3c:	str	r3, [sp]
   16e40:	mvn	r3, #-2147483648	; 0x80000000
   16e44:	add	r2, r2, #1
   16e48:	add	r1, sp, #44	; 0x2c
   16e4c:	mov	r0, #0
   16e50:	bl	17bb4 <__assert_fail@plt+0x69b0>
   16e54:	mov	r6, r0
   16e58:	ldr	r3, [pc, #12]	; 16e6c <__assert_fail@plt+0x5c68>
   16e5c:	str	r0, [r3], #8
   16e60:	ldm	r3, {r0, r1}
   16e64:	stm	r6, {r0, r1}
   16e68:	b	16d40 <__assert_fail@plt+0x5b3c>
   16e6c:	andeq	fp, r2, r8, lsr #2
   16e70:	andeq	fp, r2, r4, asr #4
   16e74:	push	{r4, r5, r6, lr}
   16e78:	mov	r4, r0
   16e7c:	bl	110d8 <__errno_location@plt>
   16e80:	mov	r5, r0
   16e84:	ldr	r6, [r0]
   16e88:	cmp	r4, #0
   16e8c:	ldr	r3, [pc, #20]	; 16ea8 <__assert_fail@plt+0x5ca4>
   16e90:	moveq	r4, r3
   16e94:	mov	r1, #48	; 0x30
   16e98:	mov	r0, r4
   16e9c:	bl	17f1c <__assert_fail@plt+0x6d18>
   16ea0:	str	r6, [r5]
   16ea4:	pop	{r4, r5, r6, pc}
   16ea8:	andeq	fp, r2, r4, asr #6
   16eac:	subs	r3, r0, #0
   16eb0:	ldr	r2, [pc, #8]	; 16ec0 <__assert_fail@plt+0x5cbc>
   16eb4:	moveq	r3, r2
   16eb8:	ldr	r0, [r3]
   16ebc:	bx	lr
   16ec0:	andeq	fp, r2, r4, asr #6
   16ec4:	subs	r3, r0, #0
   16ec8:	ldr	r2, [pc, #8]	; 16ed8 <__assert_fail@plt+0x5cd4>
   16ecc:	moveq	r3, r2
   16ed0:	str	r1, [r3]
   16ed4:	bx	lr
   16ed8:	andeq	fp, r2, r4, asr #6
   16edc:	push	{lr}		; (str lr, [sp, #-4]!)
   16ee0:	subs	r3, r0, #0
   16ee4:	ldr	r0, [pc, #44]	; 16f18 <__assert_fail@plt+0x5d14>
   16ee8:	moveq	r3, r0
   16eec:	add	r3, r3, #8
   16ef0:	lsr	lr, r1, #5
   16ef4:	and	r1, r1, #31
   16ef8:	ldr	ip, [r3, lr, lsl #2]
   16efc:	lsr	r0, ip, r1
   16f00:	eor	r2, r2, r0
   16f04:	and	r2, r2, #1
   16f08:	eor	r1, ip, r2, lsl r1
   16f0c:	str	r1, [r3, lr, lsl #2]
   16f10:	and	r0, r0, #1
   16f14:	pop	{pc}		; (ldr pc, [sp], #4)
   16f18:	andeq	fp, r2, r4, asr #6
   16f1c:	subs	r3, r0, #0
   16f20:	ldr	r2, [pc, #12]	; 16f34 <__assert_fail@plt+0x5d30>
   16f24:	moveq	r3, r2
   16f28:	ldr	r0, [r3, #4]
   16f2c:	str	r1, [r3, #4]
   16f30:	bx	lr
   16f34:	andeq	fp, r2, r4, asr #6
   16f38:	subs	r3, r0, #0
   16f3c:	ldr	r0, [pc, #40]	; 16f6c <__assert_fail@plt+0x5d68>
   16f40:	moveq	r3, r0
   16f44:	mov	r0, #10
   16f48:	str	r0, [r3]
   16f4c:	cmp	r2, #0
   16f50:	cmpne	r1, #0
   16f54:	beq	16f64 <__assert_fail@plt+0x5d60>
   16f58:	str	r1, [r3, #40]	; 0x28
   16f5c:	str	r2, [r3, #44]	; 0x2c
   16f60:	bx	lr
   16f64:	push	{r4, lr}
   16f68:	bl	111ec <abort@plt>
   16f6c:	andeq	fp, r2, r4, asr #6
   16f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f74:	sub	sp, sp, #24
   16f78:	mov	r7, r0
   16f7c:	mov	r8, r1
   16f80:	mov	r9, r2
   16f84:	mov	sl, r3
   16f88:	ldr	r4, [sp, #56]	; 0x38
   16f8c:	cmp	r4, #0
   16f90:	ldr	r3, [pc, #84]	; 16fec <__assert_fail@plt+0x5de8>
   16f94:	moveq	r4, r3
   16f98:	bl	110d8 <__errno_location@plt>
   16f9c:	mov	r5, r0
   16fa0:	ldr	r6, [r0]
   16fa4:	ldr	r3, [r4, #44]	; 0x2c
   16fa8:	str	r3, [sp, #16]
   16fac:	ldr	r3, [r4, #40]	; 0x28
   16fb0:	str	r3, [sp, #12]
   16fb4:	add	r3, r4, #8
   16fb8:	str	r3, [sp, #8]
   16fbc:	ldr	r3, [r4, #4]
   16fc0:	str	r3, [sp, #4]
   16fc4:	ldr	r3, [r4]
   16fc8:	str	r3, [sp]
   16fcc:	mov	r3, sl
   16fd0:	mov	r2, r9
   16fd4:	mov	r1, r8
   16fd8:	mov	r0, r7
   16fdc:	bl	15b40 <__assert_fail@plt+0x493c>
   16fe0:	str	r6, [r5]
   16fe4:	add	sp, sp, #24
   16fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fec:	andeq	fp, r2, r4, asr #6
   16ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ff4:	sub	sp, sp, #44	; 0x2c
   16ff8:	str	r0, [sp, #28]
   16ffc:	str	r1, [sp, #32]
   17000:	mov	r6, r2
   17004:	subs	r4, r3, #0
   17008:	ldr	r3, [pc, #172]	; 170bc <__assert_fail@plt+0x5eb8>
   1700c:	moveq	r4, r3
   17010:	bl	110d8 <__errno_location@plt>
   17014:	mov	r7, r0
   17018:	ldr	fp, [r0]
   1701c:	ldr	r5, [r4, #4]
   17020:	cmp	r6, #0
   17024:	orreq	r5, r5, #1
   17028:	add	r9, r4, #8
   1702c:	ldr	r3, [r4, #44]	; 0x2c
   17030:	str	r3, [sp, #16]
   17034:	ldr	r3, [r4, #40]	; 0x28
   17038:	str	r3, [sp, #12]
   1703c:	str	r9, [sp, #8]
   17040:	str	r5, [sp, #4]
   17044:	ldr	r3, [r4]
   17048:	str	r3, [sp]
   1704c:	ldr	r3, [sp, #32]
   17050:	ldr	r2, [sp, #28]
   17054:	mov	r1, #0
   17058:	mov	r0, r1
   1705c:	bl	15b40 <__assert_fail@plt+0x493c>
   17060:	mov	sl, r0
   17064:	add	r8, r0, #1
   17068:	mov	r0, r8
   1706c:	bl	17a30 <__assert_fail@plt+0x682c>
   17070:	str	r0, [sp, #36]	; 0x24
   17074:	ldr	r3, [r4, #44]	; 0x2c
   17078:	str	r3, [sp, #16]
   1707c:	ldr	r3, [r4, #40]	; 0x28
   17080:	str	r3, [sp, #12]
   17084:	str	r9, [sp, #8]
   17088:	str	r5, [sp, #4]
   1708c:	ldr	r3, [r4]
   17090:	str	r3, [sp]
   17094:	ldr	r3, [sp, #32]
   17098:	ldr	r2, [sp, #28]
   1709c:	mov	r1, r8
   170a0:	bl	15b40 <__assert_fail@plt+0x493c>
   170a4:	str	fp, [r7]
   170a8:	cmp	r6, #0
   170ac:	strne	sl, [r6]
   170b0:	ldr	r0, [sp, #36]	; 0x24
   170b4:	add	sp, sp, #44	; 0x2c
   170b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170bc:	andeq	fp, r2, r4, asr #6
   170c0:	push	{r4, lr}
   170c4:	mov	r3, r2
   170c8:	mov	r2, #0
   170cc:	bl	16ff0 <__assert_fail@plt+0x5dec>
   170d0:	pop	{r4, pc}
   170d4:	push	{r4, r5, r6, r7, r8, lr}
   170d8:	ldr	r3, [pc, #140]	; 1716c <__assert_fail@plt+0x5f68>
   170dc:	ldr	r7, [r3]
   170e0:	ldr	r3, [r3, #4]
   170e4:	cmp	r3, #1
   170e8:	ble	17114 <__assert_fail@plt+0x5f10>
   170ec:	mov	r5, r7
   170f0:	mov	r4, #1
   170f4:	ldr	r6, [pc, #112]	; 1716c <__assert_fail@plt+0x5f68>
   170f8:	ldr	r0, [r5, #12]
   170fc:	bl	15574 <__assert_fail@plt+0x4370>
   17100:	add	r4, r4, #1
   17104:	add	r5, r5, #8
   17108:	ldr	r3, [r6, #4]
   1710c:	cmp	r3, r4
   17110:	bgt	170f8 <__assert_fail@plt+0x5ef4>
   17114:	ldr	r0, [r7, #4]
   17118:	ldr	r3, [pc, #80]	; 17170 <__assert_fail@plt+0x5f6c>
   1711c:	cmp	r0, r3
   17120:	beq	1713c <__assert_fail@plt+0x5f38>
   17124:	bl	15574 <__assert_fail@plt+0x4370>
   17128:	ldr	r3, [pc, #60]	; 1716c <__assert_fail@plt+0x5f68>
   1712c:	mov	r2, #256	; 0x100
   17130:	str	r2, [r3, #8]
   17134:	ldr	r2, [pc, #52]	; 17170 <__assert_fail@plt+0x5f6c>
   17138:	str	r2, [r3, #12]
   1713c:	ldr	r3, [pc, #48]	; 17174 <__assert_fail@plt+0x5f70>
   17140:	cmp	r7, r3
   17144:	beq	1715c <__assert_fail@plt+0x5f58>
   17148:	mov	r0, r7
   1714c:	bl	15574 <__assert_fail@plt+0x4370>
   17150:	ldr	r3, [pc, #20]	; 1716c <__assert_fail@plt+0x5f68>
   17154:	add	r2, r3, #8
   17158:	str	r2, [r3]
   1715c:	mov	r2, #1
   17160:	ldr	r3, [pc, #4]	; 1716c <__assert_fail@plt+0x5f68>
   17164:	str	r2, [r3, #4]
   17168:	pop	{r4, r5, r6, r7, r8, pc}
   1716c:	andeq	fp, r2, r8, lsr #2
   17170:	andeq	fp, r2, r4, asr #4
   17174:	andeq	fp, r2, r0, lsr r1
   17178:	push	{r4, lr}
   1717c:	ldr	r3, [pc, #8]	; 1718c <__assert_fail@plt+0x5f88>
   17180:	mvn	r2, #0
   17184:	bl	16cb0 <__assert_fail@plt+0x5aac>
   17188:	pop	{r4, pc}
   1718c:	andeq	fp, r2, r4, asr #6
   17190:	push	{r4, lr}
   17194:	ldr	r3, [pc, #4]	; 171a0 <__assert_fail@plt+0x5f9c>
   17198:	bl	16cb0 <__assert_fail@plt+0x5aac>
   1719c:	pop	{r4, pc}
   171a0:	andeq	fp, r2, r4, asr #6
   171a4:	push	{r4, lr}
   171a8:	mov	r1, r0
   171ac:	mov	r0, #0
   171b0:	bl	17178 <__assert_fail@plt+0x5f74>
   171b4:	pop	{r4, pc}
   171b8:	push	{r4, lr}
   171bc:	mov	r2, r1
   171c0:	mov	r1, r0
   171c4:	mov	r0, #0
   171c8:	bl	17190 <__assert_fail@plt+0x5f8c>
   171cc:	pop	{r4, pc}
   171d0:	push	{r4, r5, lr}
   171d4:	sub	sp, sp, #52	; 0x34
   171d8:	mov	r4, r0
   171dc:	mov	r5, r2
   171e0:	mov	r0, sp
   171e4:	bl	159d8 <__assert_fail@plt+0x47d4>
   171e8:	mov	r3, sp
   171ec:	mvn	r2, #0
   171f0:	mov	r1, r5
   171f4:	mov	r0, r4
   171f8:	bl	16cb0 <__assert_fail@plt+0x5aac>
   171fc:	add	sp, sp, #52	; 0x34
   17200:	pop	{r4, r5, pc}
   17204:	push	{r4, r5, r6, lr}
   17208:	sub	sp, sp, #48	; 0x30
   1720c:	mov	r4, r0
   17210:	mov	r5, r2
   17214:	mov	r6, r3
   17218:	mov	r0, sp
   1721c:	bl	159d8 <__assert_fail@plt+0x47d4>
   17220:	mov	r3, sp
   17224:	mov	r2, r6
   17228:	mov	r1, r5
   1722c:	mov	r0, r4
   17230:	bl	16cb0 <__assert_fail@plt+0x5aac>
   17234:	add	sp, sp, #48	; 0x30
   17238:	pop	{r4, r5, r6, pc}
   1723c:	push	{r4, lr}
   17240:	mov	r2, r1
   17244:	mov	r1, r0
   17248:	mov	r0, #0
   1724c:	bl	171d0 <__assert_fail@plt+0x5fcc>
   17250:	pop	{r4, pc}
   17254:	push	{r4, lr}
   17258:	mov	r3, r2
   1725c:	mov	r2, r1
   17260:	mov	r1, r0
   17264:	mov	r0, #0
   17268:	bl	17204 <__assert_fail@plt+0x6000>
   1726c:	pop	{r4, pc}
   17270:	push	{r4, r5, r6, lr}
   17274:	sub	sp, sp, #48	; 0x30
   17278:	mov	r4, r0
   1727c:	mov	r5, r1
   17280:	mov	r6, r2
   17284:	mov	ip, sp
   17288:	ldr	lr, [pc, #64]	; 172d0 <__assert_fail@plt+0x60cc>
   1728c:	ldm	lr!, {r0, r1, r2, r3}
   17290:	stmia	ip!, {r0, r1, r2, r3}
   17294:	ldm	lr!, {r0, r1, r2, r3}
   17298:	stmia	ip!, {r0, r1, r2, r3}
   1729c:	ldm	lr, {r0, r1, r2, r3}
   172a0:	stm	ip, {r0, r1, r2, r3}
   172a4:	mov	r2, #1
   172a8:	mov	r1, r6
   172ac:	mov	r0, sp
   172b0:	bl	16edc <__assert_fail@plt+0x5cd8>
   172b4:	mov	r3, sp
   172b8:	mov	r2, r5
   172bc:	mov	r1, r4
   172c0:	mov	r0, #0
   172c4:	bl	16cb0 <__assert_fail@plt+0x5aac>
   172c8:	add	sp, sp, #48	; 0x30
   172cc:	pop	{r4, r5, r6, pc}
   172d0:	andeq	fp, r2, r4, asr #6
   172d4:	push	{r4, lr}
   172d8:	mov	r2, r1
   172dc:	mvn	r1, #0
   172e0:	bl	17270 <__assert_fail@plt+0x606c>
   172e4:	pop	{r4, pc}
   172e8:	push	{r4, lr}
   172ec:	mov	r1, #58	; 0x3a
   172f0:	bl	172d4 <__assert_fail@plt+0x60d0>
   172f4:	pop	{r4, pc}
   172f8:	push	{r4, lr}
   172fc:	mov	r2, #58	; 0x3a
   17300:	bl	17270 <__assert_fail@plt+0x606c>
   17304:	pop	{r4, pc}
   17308:	push	{r4, r5, lr}
   1730c:	sub	sp, sp, #100	; 0x64
   17310:	mov	r4, r0
   17314:	mov	r5, r2
   17318:	mov	r0, sp
   1731c:	bl	159d8 <__assert_fail@plt+0x47d4>
   17320:	add	lr, sp, #48	; 0x30
   17324:	mov	ip, sp
   17328:	ldm	ip!, {r0, r1, r2, r3}
   1732c:	stmia	lr!, {r0, r1, r2, r3}
   17330:	ldm	ip!, {r0, r1, r2, r3}
   17334:	stmia	lr!, {r0, r1, r2, r3}
   17338:	ldm	ip, {r0, r1, r2, r3}
   1733c:	stm	lr, {r0, r1, r2, r3}
   17340:	mov	r2, #1
   17344:	mov	r1, #58	; 0x3a
   17348:	add	r0, sp, #48	; 0x30
   1734c:	bl	16edc <__assert_fail@plt+0x5cd8>
   17350:	add	r3, sp, #48	; 0x30
   17354:	mvn	r2, #0
   17358:	mov	r1, r5
   1735c:	mov	r0, r4
   17360:	bl	16cb0 <__assert_fail@plt+0x5aac>
   17364:	add	sp, sp, #100	; 0x64
   17368:	pop	{r4, r5, pc}
   1736c:	push	{r4, r5, r6, r7, lr}
   17370:	sub	sp, sp, #52	; 0x34
   17374:	mov	r4, r0
   17378:	mov	r6, r1
   1737c:	mov	r7, r2
   17380:	mov	r5, r3
   17384:	mov	ip, sp
   17388:	ldr	lr, [pc, #64]	; 173d0 <__assert_fail@plt+0x61cc>
   1738c:	ldm	lr!, {r0, r1, r2, r3}
   17390:	stmia	ip!, {r0, r1, r2, r3}
   17394:	ldm	lr!, {r0, r1, r2, r3}
   17398:	stmia	ip!, {r0, r1, r2, r3}
   1739c:	ldm	lr, {r0, r1, r2, r3}
   173a0:	stm	ip, {r0, r1, r2, r3}
   173a4:	mov	r2, r7
   173a8:	mov	r1, r6
   173ac:	mov	r0, sp
   173b0:	bl	16f38 <__assert_fail@plt+0x5d34>
   173b4:	mov	r3, sp
   173b8:	ldr	r2, [sp, #72]	; 0x48
   173bc:	mov	r1, r5
   173c0:	mov	r0, r4
   173c4:	bl	16cb0 <__assert_fail@plt+0x5aac>
   173c8:	add	sp, sp, #52	; 0x34
   173cc:	pop	{r4, r5, r6, r7, pc}
   173d0:	andeq	fp, r2, r4, asr #6
   173d4:	push	{lr}		; (str lr, [sp, #-4]!)
   173d8:	sub	sp, sp, #12
   173dc:	mvn	ip, #0
   173e0:	str	ip, [sp]
   173e4:	bl	1736c <__assert_fail@plt+0x6168>
   173e8:	add	sp, sp, #12
   173ec:	pop	{pc}		; (ldr pc, [sp], #4)
   173f0:	push	{r4, lr}
   173f4:	mov	r3, r2
   173f8:	mov	r2, r1
   173fc:	mov	r1, r0
   17400:	mov	r0, #0
   17404:	bl	173d4 <__assert_fail@plt+0x61d0>
   17408:	pop	{r4, pc}
   1740c:	push	{lr}		; (str lr, [sp, #-4]!)
   17410:	sub	sp, sp, #12
   17414:	str	r3, [sp]
   17418:	mov	r3, r2
   1741c:	mov	r2, r1
   17420:	mov	r1, r0
   17424:	mov	r0, #0
   17428:	bl	1736c <__assert_fail@plt+0x6168>
   1742c:	add	sp, sp, #12
   17430:	pop	{pc}		; (ldr pc, [sp], #4)
   17434:	push	{r4, lr}
   17438:	ldr	r3, [pc, #4]	; 17444 <__assert_fail@plt+0x6240>
   1743c:	bl	16cb0 <__assert_fail@plt+0x5aac>
   17440:	pop	{r4, pc}
   17444:	andeq	fp, r2, r8, lsr r1
   17448:	push	{r4, lr}
   1744c:	mov	r2, r1
   17450:	mov	r1, r0
   17454:	mov	r0, #0
   17458:	bl	17434 <__assert_fail@plt+0x6230>
   1745c:	pop	{r4, pc}
   17460:	push	{r4, lr}
   17464:	mvn	r2, #0
   17468:	bl	17434 <__assert_fail@plt+0x6230>
   1746c:	pop	{r4, pc}
   17470:	push	{r4, lr}
   17474:	mov	r1, r0
   17478:	mov	r0, #0
   1747c:	bl	17460 <__assert_fail@plt+0x625c>
   17480:	pop	{r4, pc}
   17484:	push	{r4, r5, r6, lr}
   17488:	sub	sp, sp, #32
   1748c:	mov	r4, r0
   17490:	ldr	r5, [sp, #48]	; 0x30
   17494:	ldr	r6, [sp, #52]	; 0x34
   17498:	cmp	r1, #0
   1749c:	beq	17554 <__assert_fail@plt+0x6350>
   174a0:	str	r3, [sp, #4]
   174a4:	str	r2, [sp]
   174a8:	mov	r3, r1
   174ac:	ldr	r2, [pc, #940]	; 17860 <__assert_fail@plt+0x665c>
   174b0:	mov	r1, #1
   174b4:	bl	11144 <__fprintf_chk@plt>
   174b8:	mov	r2, #5
   174bc:	ldr	r1, [pc, #928]	; 17864 <__assert_fail@plt+0x6660>
   174c0:	mov	r0, #0
   174c4:	bl	10fc4 <dcgettext@plt>
   174c8:	ldr	r3, [pc, #920]	; 17868 <__assert_fail@plt+0x6664>
   174cc:	str	r3, [sp]
   174d0:	mov	r3, r0
   174d4:	ldr	r2, [pc, #912]	; 1786c <__assert_fail@plt+0x6668>
   174d8:	mov	r1, #1
   174dc:	mov	r0, r4
   174e0:	bl	11144 <__fprintf_chk@plt>
   174e4:	mov	r1, r4
   174e8:	mov	r0, #10
   174ec:	bl	10fb8 <fputc_unlocked@plt>
   174f0:	mov	r2, #5
   174f4:	ldr	r1, [pc, #884]	; 17870 <__assert_fail@plt+0x666c>
   174f8:	mov	r0, #0
   174fc:	bl	10fc4 <dcgettext@plt>
   17500:	ldr	r3, [pc, #876]	; 17874 <__assert_fail@plt+0x6670>
   17504:	mov	r2, r0
   17508:	mov	r1, #1
   1750c:	mov	r0, r4
   17510:	bl	11144 <__fprintf_chk@plt>
   17514:	mov	r1, r4
   17518:	mov	r0, #10
   1751c:	bl	10fb8 <fputc_unlocked@plt>
   17520:	cmp	r6, #9
   17524:	ldrls	pc, [pc, r6, lsl #2]
   17528:	b	177f8 <__assert_fail@plt+0x65f4>
   1752c:	muleq	r1, r0, r5
   17530:	andeq	r7, r1, ip, ror #10
   17534:	muleq	r1, r8, r5
   17538:	andeq	r7, r1, r8, asr #11
   1753c:	andeq	r7, r1, r0, lsl #12
   17540:	andeq	r7, r1, r0, asr #12
   17544:	andeq	r7, r1, r8, lsl #13
   17548:	ldrdeq	r7, [r1], -r8
   1754c:	andeq	r7, r1, r0, lsr r7
   17550:	muleq	r1, r0, r7
   17554:	str	r3, [sp]
   17558:	mov	r3, r2
   1755c:	ldr	r2, [pc, #788]	; 17878 <__assert_fail@plt+0x6674>
   17560:	mov	r1, #1
   17564:	bl	11144 <__fprintf_chk@plt>
   17568:	b	174b8 <__assert_fail@plt+0x62b4>
   1756c:	mov	r2, #5
   17570:	ldr	r1, [pc, #772]	; 1787c <__assert_fail@plt+0x6678>
   17574:	mov	r0, #0
   17578:	bl	10fc4 <dcgettext@plt>
   1757c:	ldr	r3, [r5]
   17580:	mov	r2, r0
   17584:	mov	r1, #1
   17588:	mov	r0, r4
   1758c:	bl	11144 <__fprintf_chk@plt>
   17590:	add	sp, sp, #32
   17594:	pop	{r4, r5, r6, pc}
   17598:	mov	r2, #5
   1759c:	ldr	r1, [pc, #732]	; 17880 <__assert_fail@plt+0x667c>
   175a0:	mov	r0, #0
   175a4:	bl	10fc4 <dcgettext@plt>
   175a8:	ldr	r3, [r5]
   175ac:	ldr	r2, [r5, #4]
   175b0:	str	r2, [sp]
   175b4:	mov	r2, r0
   175b8:	mov	r1, #1
   175bc:	mov	r0, r4
   175c0:	bl	11144 <__fprintf_chk@plt>
   175c4:	b	17590 <__assert_fail@plt+0x638c>
   175c8:	mov	r2, #5
   175cc:	ldr	r1, [pc, #688]	; 17884 <__assert_fail@plt+0x6680>
   175d0:	mov	r0, #0
   175d4:	bl	10fc4 <dcgettext@plt>
   175d8:	ldr	r3, [r5]
   175dc:	ldr	r2, [r5, #8]
   175e0:	str	r2, [sp, #4]
   175e4:	ldr	r2, [r5, #4]
   175e8:	str	r2, [sp]
   175ec:	mov	r2, r0
   175f0:	mov	r1, #1
   175f4:	mov	r0, r4
   175f8:	bl	11144 <__fprintf_chk@plt>
   175fc:	b	17590 <__assert_fail@plt+0x638c>
   17600:	mov	r2, #5
   17604:	ldr	r1, [pc, #636]	; 17888 <__assert_fail@plt+0x6684>
   17608:	mov	r0, #0
   1760c:	bl	10fc4 <dcgettext@plt>
   17610:	ldr	r3, [r5]
   17614:	ldr	r2, [r5, #12]
   17618:	str	r2, [sp, #8]
   1761c:	ldr	r2, [r5, #8]
   17620:	str	r2, [sp, #4]
   17624:	ldr	r2, [r5, #4]
   17628:	str	r2, [sp]
   1762c:	mov	r2, r0
   17630:	mov	r1, #1
   17634:	mov	r0, r4
   17638:	bl	11144 <__fprintf_chk@plt>
   1763c:	b	17590 <__assert_fail@plt+0x638c>
   17640:	mov	r2, #5
   17644:	ldr	r1, [pc, #576]	; 1788c <__assert_fail@plt+0x6688>
   17648:	mov	r0, #0
   1764c:	bl	10fc4 <dcgettext@plt>
   17650:	ldr	r3, [r5]
   17654:	ldr	r2, [r5, #16]
   17658:	str	r2, [sp, #12]
   1765c:	ldr	r2, [r5, #12]
   17660:	str	r2, [sp, #8]
   17664:	ldr	r2, [r5, #8]
   17668:	str	r2, [sp, #4]
   1766c:	ldr	r2, [r5, #4]
   17670:	str	r2, [sp]
   17674:	mov	r2, r0
   17678:	mov	r1, #1
   1767c:	mov	r0, r4
   17680:	bl	11144 <__fprintf_chk@plt>
   17684:	b	17590 <__assert_fail@plt+0x638c>
   17688:	mov	r2, #5
   1768c:	ldr	r1, [pc, #508]	; 17890 <__assert_fail@plt+0x668c>
   17690:	mov	r0, #0
   17694:	bl	10fc4 <dcgettext@plt>
   17698:	ldr	r3, [r5]
   1769c:	ldr	r2, [r5, #20]
   176a0:	str	r2, [sp, #16]
   176a4:	ldr	r2, [r5, #16]
   176a8:	str	r2, [sp, #12]
   176ac:	ldr	r2, [r5, #12]
   176b0:	str	r2, [sp, #8]
   176b4:	ldr	r2, [r5, #8]
   176b8:	str	r2, [sp, #4]
   176bc:	ldr	r2, [r5, #4]
   176c0:	str	r2, [sp]
   176c4:	mov	r2, r0
   176c8:	mov	r1, #1
   176cc:	mov	r0, r4
   176d0:	bl	11144 <__fprintf_chk@plt>
   176d4:	b	17590 <__assert_fail@plt+0x638c>
   176d8:	mov	r2, #5
   176dc:	ldr	r1, [pc, #432]	; 17894 <__assert_fail@plt+0x6690>
   176e0:	mov	r0, #0
   176e4:	bl	10fc4 <dcgettext@plt>
   176e8:	ldr	r3, [r5]
   176ec:	ldr	r2, [r5, #24]
   176f0:	str	r2, [sp, #20]
   176f4:	ldr	r2, [r5, #20]
   176f8:	str	r2, [sp, #16]
   176fc:	ldr	r2, [r5, #16]
   17700:	str	r2, [sp, #12]
   17704:	ldr	r2, [r5, #12]
   17708:	str	r2, [sp, #8]
   1770c:	ldr	r2, [r5, #8]
   17710:	str	r2, [sp, #4]
   17714:	ldr	r2, [r5, #4]
   17718:	str	r2, [sp]
   1771c:	mov	r2, r0
   17720:	mov	r1, #1
   17724:	mov	r0, r4
   17728:	bl	11144 <__fprintf_chk@plt>
   1772c:	b	17590 <__assert_fail@plt+0x638c>
   17730:	mov	r2, #5
   17734:	ldr	r1, [pc, #348]	; 17898 <__assert_fail@plt+0x6694>
   17738:	mov	r0, #0
   1773c:	bl	10fc4 <dcgettext@plt>
   17740:	ldr	r3, [r5]
   17744:	ldr	r2, [r5, #28]
   17748:	str	r2, [sp, #24]
   1774c:	ldr	r2, [r5, #24]
   17750:	str	r2, [sp, #20]
   17754:	ldr	r2, [r5, #20]
   17758:	str	r2, [sp, #16]
   1775c:	ldr	r2, [r5, #16]
   17760:	str	r2, [sp, #12]
   17764:	ldr	r2, [r5, #12]
   17768:	str	r2, [sp, #8]
   1776c:	ldr	r2, [r5, #8]
   17770:	str	r2, [sp, #4]
   17774:	ldr	r2, [r5, #4]
   17778:	str	r2, [sp]
   1777c:	mov	r2, r0
   17780:	mov	r1, #1
   17784:	mov	r0, r4
   17788:	bl	11144 <__fprintf_chk@plt>
   1778c:	b	17590 <__assert_fail@plt+0x638c>
   17790:	mov	r2, #5
   17794:	ldr	r1, [pc, #256]	; 1789c <__assert_fail@plt+0x6698>
   17798:	mov	r0, #0
   1779c:	bl	10fc4 <dcgettext@plt>
   177a0:	ldr	r3, [r5]
   177a4:	ldr	r2, [r5, #32]
   177a8:	str	r2, [sp, #28]
   177ac:	ldr	r2, [r5, #28]
   177b0:	str	r2, [sp, #24]
   177b4:	ldr	r2, [r5, #24]
   177b8:	str	r2, [sp, #20]
   177bc:	ldr	r2, [r5, #20]
   177c0:	str	r2, [sp, #16]
   177c4:	ldr	r2, [r5, #16]
   177c8:	str	r2, [sp, #12]
   177cc:	ldr	r2, [r5, #12]
   177d0:	str	r2, [sp, #8]
   177d4:	ldr	r2, [r5, #8]
   177d8:	str	r2, [sp, #4]
   177dc:	ldr	r2, [r5, #4]
   177e0:	str	r2, [sp]
   177e4:	mov	r2, r0
   177e8:	mov	r1, #1
   177ec:	mov	r0, r4
   177f0:	bl	11144 <__fprintf_chk@plt>
   177f4:	b	17590 <__assert_fail@plt+0x638c>
   177f8:	mov	r2, #5
   177fc:	ldr	r1, [pc, #156]	; 178a0 <__assert_fail@plt+0x669c>
   17800:	mov	r0, #0
   17804:	bl	10fc4 <dcgettext@plt>
   17808:	ldr	r3, [r5]
   1780c:	ldr	r2, [r5, #32]
   17810:	str	r2, [sp, #28]
   17814:	ldr	r2, [r5, #28]
   17818:	str	r2, [sp, #24]
   1781c:	ldr	r2, [r5, #24]
   17820:	str	r2, [sp, #20]
   17824:	ldr	r2, [r5, #20]
   17828:	str	r2, [sp, #16]
   1782c:	ldr	r2, [r5, #16]
   17830:	str	r2, [sp, #12]
   17834:	ldr	r2, [r5, #12]
   17838:	str	r2, [sp, #8]
   1783c:	ldr	r2, [r5, #8]
   17840:	str	r2, [sp, #4]
   17844:	ldr	r2, [r5, #4]
   17848:	str	r2, [sp]
   1784c:	mov	r2, r0
   17850:	mov	r1, #1
   17854:	mov	r0, r4
   17858:	bl	11144 <__fprintf_chk@plt>
   1785c:	b	17590 <__assert_fail@plt+0x638c>
   17860:	andeq	sl, r1, r8, ror #17
   17864:	strdeq	sl, [r1], -ip
   17868:	andeq	r0, r0, r6, ror #15
   1786c:	ldrdeq	sl, [r1], -r4
   17870:	andeq	sl, r1, r0, lsl #18
   17874:	andeq	sl, r1, ip, lsr #19
   17878:	strdeq	sl, [r1], -r4
   1787c:	ldrdeq	sl, [r1], -r0
   17880:	andeq	sl, r1, r0, ror #19
   17884:	strdeq	sl, [r1], -r8
   17888:	andeq	sl, r1, r4, lsl sl
   1788c:	andeq	sl, r1, r4, lsr sl
   17890:	andeq	sl, r1, r8, asr sl
   17894:	andeq	sl, r1, r0, lsl #21
   17898:	andeq	sl, r1, ip, lsr #21
   1789c:	ldrdeq	sl, [r1], -ip
   178a0:	andeq	sl, r1, r0, lsl fp
   178a4:	push	{r4, r5, lr}
   178a8:	sub	sp, sp, #12
   178ac:	ldr	r5, [sp, #24]
   178b0:	ldr	ip, [r5]
   178b4:	cmp	ip, #0
   178b8:	beq	178e8 <__assert_fail@plt+0x66e4>
   178bc:	mov	lr, r5
   178c0:	mov	ip, #0
   178c4:	add	ip, ip, #1
   178c8:	ldr	r4, [lr, #4]!
   178cc:	cmp	r4, #0
   178d0:	bne	178c4 <__assert_fail@plt+0x66c0>
   178d4:	str	ip, [sp, #4]
   178d8:	str	r5, [sp]
   178dc:	bl	17484 <__assert_fail@plt+0x6280>
   178e0:	add	sp, sp, #12
   178e4:	pop	{r4, r5, pc}
   178e8:	mov	ip, #0
   178ec:	b	178d4 <__assert_fail@plt+0x66d0>
   178f0:	push	{r4, r5, lr}
   178f4:	sub	sp, sp, #52	; 0x34
   178f8:	ldr	r4, [sp, #64]	; 0x40
   178fc:	sub	r4, r4, #4
   17900:	add	r5, sp, #4
   17904:	mov	ip, #0
   17908:	ldr	lr, [r4, #4]!
   1790c:	str	lr, [r5, #4]!
   17910:	cmp	lr, #0
   17914:	beq	17924 <__assert_fail@plt+0x6720>
   17918:	add	ip, ip, #1
   1791c:	cmp	ip, #10
   17920:	bne	17908 <__assert_fail@plt+0x6704>
   17924:	str	ip, [sp, #4]
   17928:	add	ip, sp, #8
   1792c:	str	ip, [sp]
   17930:	bl	17484 <__assert_fail@plt+0x6280>
   17934:	add	sp, sp, #52	; 0x34
   17938:	pop	{r4, r5, pc}
   1793c:	push	{r3}		; (str r3, [sp, #-4]!)
   17940:	push	{lr}		; (str lr, [sp, #-4]!)
   17944:	sub	sp, sp, #16
   17948:	add	r3, sp, #24
   1794c:	str	r3, [sp, #12]
   17950:	str	r3, [sp]
   17954:	ldr	r3, [sp, #20]
   17958:	bl	178f0 <__assert_fail@plt+0x66ec>
   1795c:	add	sp, sp, #16
   17960:	pop	{lr}		; (ldr lr, [sp], #4)
   17964:	add	sp, sp, #4
   17968:	bx	lr
   1796c:	push	{r4, lr}
   17970:	ldr	r3, [pc, #112]	; 179e8 <__assert_fail@plt+0x67e4>
   17974:	ldr	r1, [r3]
   17978:	mov	r0, #10
   1797c:	bl	10fb8 <fputc_unlocked@plt>
   17980:	mov	r2, #5
   17984:	ldr	r1, [pc, #96]	; 179ec <__assert_fail@plt+0x67e8>
   17988:	mov	r0, #0
   1798c:	bl	10fc4 <dcgettext@plt>
   17990:	ldr	r2, [pc, #88]	; 179f0 <__assert_fail@plt+0x67ec>
   17994:	mov	r1, r0
   17998:	mov	r0, #1
   1799c:	bl	11120 <__printf_chk@plt>
   179a0:	mov	r2, #5
   179a4:	ldr	r1, [pc, #72]	; 179f4 <__assert_fail@plt+0x67f0>
   179a8:	mov	r0, #0
   179ac:	bl	10fc4 <dcgettext@plt>
   179b0:	ldr	r3, [pc, #64]	; 179f8 <__assert_fail@plt+0x67f4>
   179b4:	ldr	r2, [pc, #64]	; 179fc <__assert_fail@plt+0x67f8>
   179b8:	mov	r1, r0
   179bc:	mov	r0, #1
   179c0:	bl	11120 <__printf_chk@plt>
   179c4:	mov	r2, #5
   179c8:	ldr	r1, [pc, #48]	; 17a00 <__assert_fail@plt+0x67fc>
   179cc:	mov	r0, #0
   179d0:	bl	10fc4 <dcgettext@plt>
   179d4:	ldr	r2, [pc, #40]	; 17a04 <__assert_fail@plt+0x6800>
   179d8:	mov	r1, r0
   179dc:	mov	r0, #1
   179e0:	bl	11120 <__printf_chk@plt>
   179e4:	pop	{r4, pc}
   179e8:	andeq	fp, r2, r4, lsl #3
   179ec:	andeq	sl, r1, ip, asr #22
   179f0:	andeq	sl, r1, r0, ror #22
   179f4:	andeq	sl, r1, r8, ror fp
   179f8:	andeq	sl, r1, r0, ror #7
   179fc:	andeq	sl, r1, r8, lsl #8
   17a00:	andeq	sl, r1, ip, lsl #23
   17a04:			; <UNDEFINED> instruction: 0x0001abb4
   17a08:	push	{r4, lr}
   17a0c:	bl	187a4 <__assert_fail@plt+0x75a0>
   17a10:	cmp	r0, #0
   17a14:	popne	{r4, pc}
   17a18:	bl	17fac <__assert_fail@plt+0x6da8>
   17a1c:	push	{r4, lr}
   17a20:	bl	187a4 <__assert_fail@plt+0x75a0>
   17a24:	cmp	r0, #0
   17a28:	popne	{r4, pc}
   17a2c:	bl	17fac <__assert_fail@plt+0x6da8>
   17a30:	push	{r4, lr}
   17a34:	bl	17a08 <__assert_fail@plt+0x6804>
   17a38:	pop	{r4, pc}
   17a3c:	push	{r4, r5, r6, lr}
   17a40:	mov	r5, r0
   17a44:	mov	r4, r1
   17a48:	bl	187d4 <__assert_fail@plt+0x75d0>
   17a4c:	cmp	r0, #0
   17a50:	popne	{r4, r5, r6, pc}
   17a54:	adds	r4, r4, #0
   17a58:	movne	r4, #1
   17a5c:	cmp	r5, #0
   17a60:	orreq	r4, r4, #1
   17a64:	cmp	r4, #0
   17a68:	popeq	{r4, r5, r6, pc}
   17a6c:	bl	17fac <__assert_fail@plt+0x6da8>
   17a70:	push	{r4, lr}
   17a74:	cmp	r1, #0
   17a78:	orreq	r1, r1, #1
   17a7c:	bl	187d4 <__assert_fail@plt+0x75d0>
   17a80:	cmp	r0, #0
   17a84:	popne	{r4, pc}
   17a88:	bl	17fac <__assert_fail@plt+0x6da8>
   17a8c:	push	{r4, r5, r6, lr}
   17a90:	mov	r6, r0
   17a94:	mov	r5, r1
   17a98:	mov	r4, r2
   17a9c:	bl	18928 <__assert_fail@plt+0x7724>
   17aa0:	cmp	r0, #0
   17aa4:	popne	{r4, r5, r6, pc}
   17aa8:	cmp	r6, #0
   17aac:	beq	17abc <__assert_fail@plt+0x68b8>
   17ab0:	cmp	r5, #0
   17ab4:	cmpne	r4, #0
   17ab8:	popeq	{r4, r5, r6, pc}
   17abc:	bl	17fac <__assert_fail@plt+0x6da8>
   17ac0:	push	{r4, lr}
   17ac4:	bl	17a8c <__assert_fail@plt+0x6888>
   17ac8:	pop	{r4, pc}
   17acc:	push	{r4, lr}
   17ad0:	mov	ip, r1
   17ad4:	mov	r3, r2
   17ad8:	cmp	r2, #0
   17adc:	cmpne	r1, #0
   17ae0:	moveq	r3, #1
   17ae4:	moveq	ip, r3
   17ae8:	mov	r2, r3
   17aec:	mov	r1, ip
   17af0:	bl	18928 <__assert_fail@plt+0x7724>
   17af4:	cmp	r0, #0
   17af8:	popne	{r4, pc}
   17afc:	bl	17fac <__assert_fail@plt+0x6da8>
   17b00:	push	{r4, lr}
   17b04:	mov	r2, r1
   17b08:	mov	r1, r0
   17b0c:	mov	r0, #0
   17b10:	bl	17a8c <__assert_fail@plt+0x6888>
   17b14:	pop	{r4, pc}
   17b18:	push	{r4, lr}
   17b1c:	mov	r2, r1
   17b20:	mov	r1, r0
   17b24:	mov	r0, #0
   17b28:	bl	17acc <__assert_fail@plt+0x68c8>
   17b2c:	pop	{r4, pc}
   17b30:	push	{r4, r5, r6, r7, r8, lr}
   17b34:	mov	r5, r1
   17b38:	mov	r6, r2
   17b3c:	ldr	r4, [r1]
   17b40:	subs	r7, r0, #0
   17b44:	beq	17b60 <__assert_fail@plt+0x695c>
   17b48:	lsr	r2, r4, #1
   17b4c:	add	r3, r2, #1
   17b50:	mvn	r3, r3
   17b54:	cmp	r4, r3
   17b58:	bls	17b84 <__assert_fail@plt+0x6980>
   17b5c:	bl	17fac <__assert_fail@plt+0x6da8>
   17b60:	cmp	r4, #0
   17b64:	bne	17b8c <__assert_fail@plt+0x6988>
   17b68:	mov	r1, r2
   17b6c:	mov	r0, #64	; 0x40
   17b70:	bl	18a7c <__assert_fail@plt+0x7878>
   17b74:	cmp	r0, #0
   17b78:	movne	r4, r0
   17b7c:	addeq	r4, r0, #1
   17b80:	b	17b8c <__assert_fail@plt+0x6988>
   17b84:	add	r4, r4, #1
   17b88:	add	r4, r4, r2
   17b8c:	mov	r2, r6
   17b90:	mov	r1, r4
   17b94:	mov	r0, r7
   17b98:	bl	17a8c <__assert_fail@plt+0x6888>
   17b9c:	str	r4, [r5]
   17ba0:	pop	{r4, r5, r6, r7, r8, pc}
   17ba4:	push	{r4, lr}
   17ba8:	mov	r2, #1
   17bac:	bl	17b30 <__assert_fail@plt+0x692c>
   17bb0:	pop	{r4, pc}
   17bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb8:	sub	sp, sp, #12
   17bbc:	mov	fp, r0
   17bc0:	mov	sl, r1
   17bc4:	mov	r9, r2
   17bc8:	mov	r7, r3
   17bcc:	ldr	r6, [sp, #48]	; 0x30
   17bd0:	ldr	r5, [r1]
   17bd4:	asrs	r4, r5, #1
   17bd8:	bmi	17d34 <__assert_fail@plt+0x6b30>
   17bdc:	cmp	r5, #0
   17be0:	blt	17d48 <__assert_fail@plt+0x6b44>
   17be4:	mvn	r3, #-2147483648	; 0x80000000
   17be8:	sub	r3, r3, r4
   17bec:	cmp	r5, r3
   17bf0:	movle	r3, #0
   17bf4:	movgt	r3, #1
   17bf8:	cmp	r3, #0
   17bfc:	addeq	r4, r4, r5
   17c00:	mvnne	r4, #-2147483648	; 0x80000000
   17c04:	mvn	r8, r7
   17c08:	lsr	r8, r8, #31
   17c0c:	cmp	r7, r4
   17c10:	movge	r3, #0
   17c14:	andlt	r3, r8, #1
   17c18:	cmp	r3, #0
   17c1c:	movne	r4, r7
   17c20:	cmp	r6, #0
   17c24:	blt	17d5c <__assert_fail@plt+0x6b58>
   17c28:	cmp	r6, #0
   17c2c:	beq	17e08 <__assert_fail@plt+0x6c04>
   17c30:	cmp	r4, #0
   17c34:	blt	17db8 <__assert_fail@plt+0x6bb4>
   17c38:	mov	r1, r6
   17c3c:	mvn	r0, #-2147483648	; 0x80000000
   17c40:	bl	18c88 <__assert_fail@plt+0x7a84>
   17c44:	cmp	r0, r4
   17c48:	movge	r0, #0
   17c4c:	movlt	r0, #1
   17c50:	cmp	r0, #0
   17c54:	mvnne	r3, #-2147483648	; 0x80000000
   17c58:	strne	r3, [sp, #4]
   17c5c:	beq	17df0 <__assert_fail@plt+0x6bec>
   17c60:	mov	r1, r6
   17c64:	ldr	r0, [sp, #4]
   17c68:	bl	18c88 <__assert_fail@plt+0x7a84>
   17c6c:	mov	r4, r0
   17c70:	mov	r1, r6
   17c74:	ldr	r0, [sp, #4]
   17c78:	bl	18ea8 <__assert_fail@plt+0x7ca4>
   17c7c:	ldr	r3, [sp, #4]
   17c80:	sub	r1, r3, r1
   17c84:	cmp	fp, #0
   17c88:	moveq	r3, #0
   17c8c:	streq	r3, [sl]
   17c90:	sub	r3, r4, r5
   17c94:	cmp	r3, r9
   17c98:	bge	17d20 <__assert_fail@plt+0x6b1c>
   17c9c:	cmp	r9, #0
   17ca0:	blt	17e14 <__assert_fail@plt+0x6c10>
   17ca4:	cmp	r5, #0
   17ca8:	blt	17e28 <__assert_fail@plt+0x6c24>
   17cac:	mvn	r3, #-2147483648	; 0x80000000
   17cb0:	sub	r3, r3, r9
   17cb4:	cmp	r5, r3
   17cb8:	movle	r3, #0
   17cbc:	movgt	r3, #1
   17cc0:	cmp	r3, #0
   17cc4:	bne	17ed0 <__assert_fail@plt+0x6ccc>
   17cc8:	add	r5, r5, r9
   17ccc:	mov	r4, r5
   17cd0:	cmp	r7, r5
   17cd4:	movge	r7, #0
   17cd8:	andlt	r7, r8, #1
   17cdc:	cmp	r7, #0
   17ce0:	bne	17ed0 <__assert_fail@plt+0x6ccc>
   17ce4:	cmp	r6, #0
   17ce8:	blt	17e3c <__assert_fail@plt+0x6c38>
   17cec:	cmp	r6, #0
   17cf0:	beq	17d1c <__assert_fail@plt+0x6b18>
   17cf4:	cmp	r5, #0
   17cf8:	blt	17e98 <__assert_fail@plt+0x6c94>
   17cfc:	mov	r1, r6
   17d00:	mvn	r0, #-2147483648	; 0x80000000
   17d04:	bl	18c88 <__assert_fail@plt+0x7a84>
   17d08:	cmp	r5, r0
   17d0c:	movle	r0, #0
   17d10:	movgt	r0, #1
   17d14:	cmp	r0, #0
   17d18:	bne	17ed0 <__assert_fail@plt+0x6ccc>
   17d1c:	mul	r1, r5, r6
   17d20:	mov	r0, fp
   17d24:	bl	17a3c <__assert_fail@plt+0x6838>
   17d28:	str	r4, [sl]
   17d2c:	add	sp, sp, #12
   17d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d34:	rsb	r3, r4, #-2147483648	; 0x80000000
   17d38:	cmp	r5, r3
   17d3c:	movge	r3, #0
   17d40:	movlt	r3, #1
   17d44:	b	17bf8 <__assert_fail@plt+0x69f4>
   17d48:	rsb	r3, r5, #-2147483648	; 0x80000000
   17d4c:	cmp	r4, r3
   17d50:	movge	r3, #0
   17d54:	movlt	r3, #1
   17d58:	b	17bf8 <__assert_fail@plt+0x69f4>
   17d5c:	cmp	r4, #0
   17d60:	blt	17d88 <__assert_fail@plt+0x6b84>
   17d64:	cmn	r6, #1
   17d68:	beq	17da4 <__assert_fail@plt+0x6ba0>
   17d6c:	mov	r1, r6
   17d70:	mov	r0, #-2147483648	; 0x80000000
   17d74:	bl	18c88 <__assert_fail@plt+0x7a84>
   17d78:	cmp	r0, r4
   17d7c:	movge	r0, #0
   17d80:	movlt	r0, #1
   17d84:	b	17c50 <__assert_fail@plt+0x6a4c>
   17d88:	mov	r1, r6
   17d8c:	mvn	r0, #-2147483648	; 0x80000000
   17d90:	bl	18c88 <__assert_fail@plt+0x7a84>
   17d94:	cmp	r0, r4
   17d98:	movle	r0, #0
   17d9c:	movgt	r0, #1
   17da0:	b	17c50 <__assert_fail@plt+0x6a4c>
   17da4:	add	r0, r4, #-2147483648	; 0x80000000
   17da8:	cmp	r0, #0
   17dac:	movle	r0, #0
   17db0:	movgt	r0, #1
   17db4:	b	17c50 <__assert_fail@plt+0x6a4c>
   17db8:	cmn	r4, #1
   17dbc:	beq	17ddc <__assert_fail@plt+0x6bd8>
   17dc0:	mov	r1, r4
   17dc4:	mov	r0, #-2147483648	; 0x80000000
   17dc8:	bl	18c88 <__assert_fail@plt+0x7a84>
   17dcc:	cmp	r6, r0
   17dd0:	movle	r0, #0
   17dd4:	movgt	r0, #1
   17dd8:	b	17c50 <__assert_fail@plt+0x6a4c>
   17ddc:	add	r0, r6, #-2147483648	; 0x80000000
   17de0:	cmp	r0, #0
   17de4:	movle	r0, #0
   17de8:	movgt	r0, #1
   17dec:	b	17c50 <__assert_fail@plt+0x6a4c>
   17df0:	mul	r1, r6, r4
   17df4:	cmp	r1, #63	; 0x3f
   17df8:	movle	r3, #64	; 0x40
   17dfc:	strle	r3, [sp, #4]
   17e00:	bgt	17c84 <__assert_fail@plt+0x6a80>
   17e04:	b	17c60 <__assert_fail@plt+0x6a5c>
   17e08:	mov	r3, #64	; 0x40
   17e0c:	str	r3, [sp, #4]
   17e10:	b	17c60 <__assert_fail@plt+0x6a5c>
   17e14:	rsb	r3, r9, #-2147483648	; 0x80000000
   17e18:	cmp	r5, r3
   17e1c:	movge	r3, #0
   17e20:	movlt	r3, #1
   17e24:	b	17cc0 <__assert_fail@plt+0x6abc>
   17e28:	rsb	r3, r5, #-2147483648	; 0x80000000
   17e2c:	cmp	r9, r3
   17e30:	movge	r3, #0
   17e34:	movlt	r3, #1
   17e38:	b	17cc0 <__assert_fail@plt+0x6abc>
   17e3c:	cmp	r5, #0
   17e40:	blt	17e68 <__assert_fail@plt+0x6c64>
   17e44:	cmn	r6, #1
   17e48:	beq	17e84 <__assert_fail@plt+0x6c80>
   17e4c:	mov	r1, r6
   17e50:	mov	r0, #-2147483648	; 0x80000000
   17e54:	bl	18c88 <__assert_fail@plt+0x7a84>
   17e58:	cmp	r5, r0
   17e5c:	movle	r0, #0
   17e60:	movgt	r0, #1
   17e64:	b	17d14 <__assert_fail@plt+0x6b10>
   17e68:	mov	r1, r6
   17e6c:	mvn	r0, #-2147483648	; 0x80000000
   17e70:	bl	18c88 <__assert_fail@plt+0x7a84>
   17e74:	cmp	r5, r0
   17e78:	movge	r0, #0
   17e7c:	movlt	r0, #1
   17e80:	b	17d14 <__assert_fail@plt+0x6b10>
   17e84:	add	r0, r5, #-2147483648	; 0x80000000
   17e88:	cmp	r0, #0
   17e8c:	movle	r0, #0
   17e90:	movgt	r0, #1
   17e94:	b	17d14 <__assert_fail@plt+0x6b10>
   17e98:	cmn	r5, #1
   17e9c:	beq	17ebc <__assert_fail@plt+0x6cb8>
   17ea0:	mov	r1, r5
   17ea4:	mov	r0, #-2147483648	; 0x80000000
   17ea8:	bl	18c88 <__assert_fail@plt+0x7a84>
   17eac:	cmp	r6, r0
   17eb0:	movle	r0, #0
   17eb4:	movgt	r0, #1
   17eb8:	b	17d14 <__assert_fail@plt+0x6b10>
   17ebc:	add	r0, r6, #-2147483648	; 0x80000000
   17ec0:	cmp	r0, #0
   17ec4:	movle	r0, #0
   17ec8:	movgt	r0, #1
   17ecc:	b	17d14 <__assert_fail@plt+0x6b10>
   17ed0:	bl	17fac <__assert_fail@plt+0x6da8>
   17ed4:	push	{r4, lr}
   17ed8:	bl	18754 <__assert_fail@plt+0x7550>
   17edc:	cmp	r0, #0
   17ee0:	popne	{r4, pc}
   17ee4:	bl	17fac <__assert_fail@plt+0x6da8>
   17ee8:	push	{r4, lr}
   17eec:	mov	r1, #1
   17ef0:	bl	17ed4 <__assert_fail@plt+0x6cd0>
   17ef4:	pop	{r4, pc}
   17ef8:	push	{r4, lr}
   17efc:	bl	18754 <__assert_fail@plt+0x7550>
   17f00:	cmp	r0, #0
   17f04:	popne	{r4, pc}
   17f08:	bl	17fac <__assert_fail@plt+0x6da8>
   17f0c:	push	{r4, lr}
   17f10:	mov	r1, #1
   17f14:	bl	17ef8 <__assert_fail@plt+0x6cf4>
   17f18:	pop	{r4, pc}
   17f1c:	push	{r4, r5, r6, lr}
   17f20:	mov	r5, r0
   17f24:	mov	r4, r1
   17f28:	mov	r0, r1
   17f2c:	bl	17a08 <__assert_fail@plt+0x6804>
   17f30:	mov	r2, r4
   17f34:	mov	r1, r5
   17f38:	bl	10f70 <memcpy@plt>
   17f3c:	pop	{r4, r5, r6, pc}
   17f40:	push	{r4, r5, r6, lr}
   17f44:	mov	r5, r0
   17f48:	mov	r4, r1
   17f4c:	mov	r0, r1
   17f50:	bl	17a1c <__assert_fail@plt+0x6818>
   17f54:	mov	r2, r4
   17f58:	mov	r1, r5
   17f5c:	bl	10f70 <memcpy@plt>
   17f60:	pop	{r4, r5, r6, pc}
   17f64:	push	{r4, r5, r6, lr}
   17f68:	mov	r5, r0
   17f6c:	mov	r4, r1
   17f70:	add	r0, r1, #1
   17f74:	bl	17a1c <__assert_fail@plt+0x6818>
   17f78:	mov	r2, #0
   17f7c:	strb	r2, [r0, r4]
   17f80:	mov	r2, r4
   17f84:	mov	r1, r5
   17f88:	bl	10f70 <memcpy@plt>
   17f8c:	pop	{r4, r5, r6, pc}
   17f90:	push	{r4, lr}
   17f94:	mov	r4, r0
   17f98:	bl	110c0 <strlen@plt>
   17f9c:	add	r1, r0, #1
   17fa0:	mov	r0, r4
   17fa4:	bl	17f1c <__assert_fail@plt+0x6d18>
   17fa8:	pop	{r4, pc}
   17fac:	push	{r4, lr}
   17fb0:	ldr	r3, [pc, #40]	; 17fe0 <__assert_fail@plt+0x6ddc>
   17fb4:	ldr	r4, [r3]
   17fb8:	mov	r2, #5
   17fbc:	ldr	r1, [pc, #32]	; 17fe4 <__assert_fail@plt+0x6de0>
   17fc0:	mov	r0, #0
   17fc4:	bl	10fc4 <dcgettext@plt>
   17fc8:	mov	r3, r0
   17fcc:	ldr	r2, [pc, #20]	; 17fe8 <__assert_fail@plt+0x6de4>
   17fd0:	mov	r1, #0
   17fd4:	mov	r0, r4
   17fd8:	bl	1103c <error@plt>
   17fdc:	bl	111ec <abort@plt>
   17fe0:	andeq	fp, r2, r4, lsr #2
   17fe4:	andeq	sl, r1, r4, lsl #24
   17fe8:	andeq	sl, r1, ip, asr #15
   17fec:	push	{r4, r5, r6, lr}
   17ff0:	mov	r3, r1
   17ff4:	mov	r2, r0
   17ff8:	mov	r1, #1
   17ffc:	ldr	r0, [pc, #92]	; 18060 <__assert_fail@plt+0x6e5c>
   18000:	ldr	r0, [r0]
   18004:	bl	11078 <__vfprintf_chk@plt>
   18008:	subs	r4, r0, #0
   1800c:	blt	18018 <__assert_fail@plt+0x6e14>
   18010:	mov	r0, r4
   18014:	pop	{r4, r5, r6, pc}
   18018:	ldr	r3, [pc, #64]	; 18060 <__assert_fail@plt+0x6e5c>
   1801c:	ldr	r0, [r3]
   18020:	bl	10f58 <ferror@plt>
   18024:	cmp	r0, #0
   18028:	bne	18010 <__assert_fail@plt+0x6e0c>
   1802c:	ldr	r3, [pc, #48]	; 18064 <__assert_fail@plt+0x6e60>
   18030:	ldr	r5, [r3]
   18034:	bl	110d8 <__errno_location@plt>
   18038:	ldr	r6, [r0]
   1803c:	mov	r2, #5
   18040:	ldr	r1, [pc, #32]	; 18068 <__assert_fail@plt+0x6e64>
   18044:	mov	r0, #0
   18048:	bl	10fc4 <dcgettext@plt>
   1804c:	mov	r2, r0
   18050:	mov	r1, r6
   18054:	mov	r0, r5
   18058:	bl	1103c <error@plt>
   1805c:	b	18010 <__assert_fail@plt+0x6e0c>
   18060:	andeq	fp, r2, r4, lsl #3
   18064:	andeq	fp, r2, r4, lsr #2
   18068:	andeq	sl, r1, r8, lsl ip
   1806c:	push	{r0, r1, r2, r3}
   18070:	push	{lr}		; (str lr, [sp, #-4]!)
   18074:	sub	sp, sp, #12
   18078:	add	r1, sp, #20
   1807c:	str	r1, [sp, #4]
   18080:	ldr	r0, [sp, #16]
   18084:	bl	17fec <__assert_fail@plt+0x6de8>
   18088:	add	sp, sp, #12
   1808c:	pop	{lr}		; (ldr lr, [sp], #4)
   18090:	add	sp, sp, #16
   18094:	bx	lr
   18098:	push	{r4, r5, r6, lr}
   1809c:	mov	r5, r0
   180a0:	mov	r3, r2
   180a4:	mov	r2, r1
   180a8:	mov	r1, #1
   180ac:	bl	11078 <__vfprintf_chk@plt>
   180b0:	subs	r4, r0, #0
   180b4:	blt	180c0 <__assert_fail@plt+0x6ebc>
   180b8:	mov	r0, r4
   180bc:	pop	{r4, r5, r6, pc}
   180c0:	mov	r0, r5
   180c4:	bl	10f58 <ferror@plt>
   180c8:	cmp	r0, #0
   180cc:	bne	180b8 <__assert_fail@plt+0x6eb4>
   180d0:	ldr	r3, [pc, #44]	; 18104 <__assert_fail@plt+0x6f00>
   180d4:	ldr	r5, [r3]
   180d8:	bl	110d8 <__errno_location@plt>
   180dc:	ldr	r6, [r0]
   180e0:	mov	r2, #5
   180e4:	ldr	r1, [pc, #28]	; 18108 <__assert_fail@plt+0x6f04>
   180e8:	mov	r0, #0
   180ec:	bl	10fc4 <dcgettext@plt>
   180f0:	mov	r2, r0
   180f4:	mov	r1, r6
   180f8:	mov	r0, r5
   180fc:	bl	1103c <error@plt>
   18100:	b	180b8 <__assert_fail@plt+0x6eb4>
   18104:	andeq	fp, r2, r4, lsr #2
   18108:	andeq	sl, r1, r8, lsl ip
   1810c:	push	{r1, r2, r3}
   18110:	push	{lr}		; (str lr, [sp, #-4]!)
   18114:	sub	sp, sp, #8
   18118:	add	r2, sp, #16
   1811c:	str	r2, [sp, #4]
   18120:	ldr	r1, [sp, #12]
   18124:	bl	18098 <__assert_fail@plt+0x6e94>
   18128:	add	sp, sp, #8
   1812c:	pop	{lr}		; (ldr lr, [sp], #4)
   18130:	add	sp, sp, #12
   18134:	bx	lr
   18138:	push	{lr}		; (str lr, [sp, #-4]!)
   1813c:	sub	sp, sp, #20
   18140:	ldr	ip, [pc, #144]	; 181d8 <__assert_fail@plt+0x6fd4>
   18144:	ldr	r5, [ip]
   18148:	sub	r0, r0, #1
   1814c:	cmp	r0, #3
   18150:	ldrls	pc, [pc, r0, lsl #2]
   18154:	b	18170 <__assert_fail@plt+0x6f6c>
   18158:	andeq	r8, r1, r4, ror r1
   1815c:	andeq	r8, r1, r8, ror #2
   18160:	andeq	r8, r1, r8, ror #2
   18164:	andeq	r8, r1, ip, ror r1
   18168:	ldr	r0, [pc, #108]	; 181dc <__assert_fail@plt+0x6fd8>
   1816c:	b	18180 <__assert_fail@plt+0x6f7c>
   18170:	bl	111ec <abort@plt>
   18174:	ldr	r0, [pc, #100]	; 181e0 <__assert_fail@plt+0x6fdc>
   18178:	b	18180 <__assert_fail@plt+0x6f7c>
   1817c:	ldr	r0, [pc, #96]	; 181e4 <__assert_fail@plt+0x6fe0>
   18180:	cmp	r1, #0
   18184:	ldrlt	r4, [pc, #92]	; 181e8 <__assert_fail@plt+0x6fe4>
   18188:	sublt	r4, r4, r1
   1818c:	strblt	r2, [sp, #12]
   18190:	movlt	r3, #0
   18194:	strblt	r3, [sp, #13]
   18198:	addlt	r6, sp, #12
   1819c:	ldrge	r6, [r3, r1, lsl #4]
   181a0:	ldrge	r4, [pc, #64]	; 181e8 <__assert_fail@plt+0x6fe4>
   181a4:	mov	r2, #5
   181a8:	mov	r1, r0
   181ac:	mov	r0, #0
   181b0:	bl	10fc4 <dcgettext@plt>
   181b4:	ldr	r3, [sp, #24]
   181b8:	str	r3, [sp, #4]
   181bc:	str	r6, [sp]
   181c0:	mov	r3, r4
   181c4:	mov	r2, r0
   181c8:	mov	r1, #0
   181cc:	mov	r0, r5
   181d0:	bl	1103c <error@plt>
   181d4:	bl	111ec <abort@plt>
   181d8:	andeq	fp, r2, r4, lsr #2
   181dc:	andeq	sl, r1, r4, asr ip
   181e0:	andeq	sl, r1, ip, ror ip
   181e4:	andeq	sl, r1, r8, lsr ip
   181e8:	muleq	r1, ip, ip
   181ec:	push	{r4, r5, r6, lr}
   181f0:	mov	r5, r0
   181f4:	subs	r4, r1, #0
   181f8:	blt	1824c <__assert_fail@plt+0x7048>
   181fc:	cmp	r4, #0
   18200:	moveq	r3, #0
   18204:	beq	18230 <__assert_fail@plt+0x702c>
   18208:	mov	r2, r4
   1820c:	asr	r3, r4, #31
   18210:	mvn	r0, #0
   18214:	mvn	r1, #0
   18218:	bl	18ec8 <__assert_fail@plt+0x7cc4>
   1821c:	ldrd	r2, [r5]
   18220:	cmp	r1, r3
   18224:	cmpeq	r0, r2
   18228:	movcc	r3, #1
   1822c:	movcs	r3, #0
   18230:	cmp	r3, #0
   18234:	beq	1826c <__assert_fail@plt+0x7068>
   18238:	mvn	r2, #0
   1823c:	mvn	r3, #0
   18240:	strd	r2, [r5]
   18244:	mov	r0, #1
   18248:	pop	{r4, r5, r6, pc}
   1824c:	mov	r1, r4
   18250:	mov	r0, #0
   18254:	bl	18c88 <__assert_fail@plt+0x7a84>
   18258:	ldrd	r2, [r5]
   1825c:	orrs	r3, r2, r3
   18260:	movne	r3, #1
   18264:	moveq	r3, #0
   18268:	b	18230 <__assert_fail@plt+0x702c>
   1826c:	asr	r3, r4, #31
   18270:	ldr	r1, [r5, #4]
   18274:	ldr	r2, [r5]
   18278:	mul	r3, r3, r2
   1827c:	mla	r1, r4, r1, r3
   18280:	umull	r2, r3, r2, r4
   18284:	add	r3, r1, r3
   18288:	strd	r2, [r5]
   1828c:	mov	r0, #0
   18290:	pop	{r4, r5, r6, pc}
   18294:	push	{r4, r5, r6, r7, r8, lr}
   18298:	subs	r4, r2, #0
   1829c:	beq	182cc <__assert_fail@plt+0x70c8>
   182a0:	mov	r7, r1
   182a4:	mov	r6, r0
   182a8:	mov	r5, #0
   182ac:	mov	r1, r7
   182b0:	mov	r0, r6
   182b4:	bl	181ec <__assert_fail@plt+0x6fe8>
   182b8:	orr	r5, r5, r0
   182bc:	subs	r4, r4, #1
   182c0:	bne	182ac <__assert_fail@plt+0x70a8>
   182c4:	mov	r0, r5
   182c8:	pop	{r4, r5, r6, r7, r8, pc}
   182cc:	mov	r5, #0
   182d0:	b	182c4 <__assert_fail@plt+0x70c0>
   182d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   182d8:	sub	sp, sp, #20
   182dc:	cmp	r2, #36	; 0x24
   182e0:	bhi	18320 <__assert_fail@plt+0x711c>
   182e4:	mov	r5, r0
   182e8:	mov	r6, r1
   182ec:	mov	r7, r2
   182f0:	mov	r9, r3
   182f4:	cmp	r1, #0
   182f8:	addeq	r6, sp, #12
   182fc:	bl	110d8 <__errno_location@plt>
   18300:	mov	r8, r0
   18304:	mov	r3, #0
   18308:	str	r3, [r0]
   1830c:	ldrb	r4, [r5]
   18310:	bl	110a8 <__ctype_b_loc@plt>
   18314:	ldr	r1, [r0]
   18318:	mov	r2, r5
   1831c:	b	18338 <__assert_fail@plt+0x7134>
   18320:	ldr	r3, [pc, #1056]	; 18748 <__assert_fail@plt+0x7544>
   18324:	mov	r2, #85	; 0x55
   18328:	ldr	r1, [pc, #1052]	; 1874c <__assert_fail@plt+0x7548>
   1832c:	ldr	r0, [pc, #1052]	; 18750 <__assert_fail@plt+0x754c>
   18330:	bl	11204 <__assert_fail@plt>
   18334:	ldrb	r4, [r2, #1]!
   18338:	lsl	r3, r4, #1
   1833c:	ldrh	r3, [r1, r3]
   18340:	tst	r3, #8192	; 0x2000
   18344:	bne	18334 <__assert_fail@plt+0x7130>
   18348:	cmp	r4, #45	; 0x2d
   1834c:	moveq	r4, #4
   18350:	bne	18360 <__assert_fail@plt+0x715c>
   18354:	mov	r0, r4
   18358:	add	sp, sp, #20
   1835c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18360:	mov	r3, #0
   18364:	mov	r2, r7
   18368:	mov	r1, r6
   1836c:	mov	r0, r5
   18370:	bl	10f7c <__strtoull_internal@plt>
   18374:	strd	r0, [sp]
   18378:	ldr	r7, [r6]
   1837c:	cmp	r5, r7
   18380:	beq	183a4 <__assert_fail@plt+0x71a0>
   18384:	ldr	r3, [r8]
   18388:	cmp	r3, #0
   1838c:	beq	183ec <__assert_fail@plt+0x71e8>
   18390:	cmp	r3, #34	; 0x22
   18394:	moveq	r4, #1
   18398:	beq	183f0 <__assert_fail@plt+0x71ec>
   1839c:	mov	r4, #4
   183a0:	b	18354 <__assert_fail@plt+0x7150>
   183a4:	ldr	r3, [sp, #48]	; 0x30
   183a8:	cmp	r3, #0
   183ac:	moveq	r4, #4
   183b0:	beq	18354 <__assert_fail@plt+0x7150>
   183b4:	ldrb	r1, [r7]
   183b8:	cmp	r1, #0
   183bc:	moveq	r4, #4
   183c0:	beq	18354 <__assert_fail@plt+0x7150>
   183c4:	mov	r0, r3
   183c8:	bl	110cc <strchr@plt>
   183cc:	cmp	r0, #0
   183d0:	moveq	r4, #4
   183d4:	beq	18354 <__assert_fail@plt+0x7150>
   183d8:	mov	r2, #1
   183dc:	mov	r3, #0
   183e0:	strd	r2, [sp]
   183e4:	mov	r4, #0
   183e8:	b	183fc <__assert_fail@plt+0x71f8>
   183ec:	mov	r4, #0
   183f0:	ldr	r3, [sp, #48]	; 0x30
   183f4:	cmp	r3, #0
   183f8:	beq	184ec <__assert_fail@plt+0x72e8>
   183fc:	ldrb	r5, [r7]
   18400:	cmp	r5, #0
   18404:	beq	18684 <__assert_fail@plt+0x7480>
   18408:	mov	r1, r5
   1840c:	ldr	r0, [sp, #48]	; 0x30
   18410:	bl	110cc <strchr@plt>
   18414:	cmp	r0, #0
   18418:	beq	184f4 <__assert_fail@plt+0x72f0>
   1841c:	sub	r3, r5, #69	; 0x45
   18420:	cmp	r3, #47	; 0x2f
   18424:	ldrls	pc, [pc, r3, lsl #2]
   18428:	b	18560 <__assert_fail@plt+0x735c>
   1842c:	andeq	r8, r1, r4, lsl #10
   18430:	andeq	r8, r1, r0, ror #10
   18434:	andeq	r8, r1, r4, lsl #10
   18438:	andeq	r8, r1, r0, ror #10
   1843c:	andeq	r8, r1, r0, ror #10
   18440:	andeq	r8, r1, r0, ror #10
   18444:	andeq	r8, r1, r4, lsl #10
   18448:	andeq	r8, r1, r0, ror #10
   1844c:	andeq	r8, r1, r4, lsl #10
   18450:	andeq	r8, r1, r0, ror #10
   18454:	andeq	r8, r1, r0, ror #10
   18458:	andeq	r8, r1, r4, lsl #10
   1845c:	andeq	r8, r1, r0, ror #10
   18460:	andeq	r8, r1, r0, ror #10
   18464:	andeq	r8, r1, r0, ror #10
   18468:	andeq	r8, r1, r4, lsl #10
   1846c:	andeq	r8, r1, r0, ror #10
   18470:	andeq	r8, r1, r0, ror #10
   18474:	andeq	r8, r1, r0, ror #10
   18478:	andeq	r8, r1, r0, ror #10
   1847c:	andeq	r8, r1, r4, lsl #10
   18480:	andeq	r8, r1, r4, lsl #10
   18484:	andeq	r8, r1, r0, ror #10
   18488:	andeq	r8, r1, r0, ror #10
   1848c:	andeq	r8, r1, r0, ror #10
   18490:	andeq	r8, r1, r0, ror #10
   18494:	andeq	r8, r1, r0, ror #10
   18498:	andeq	r8, r1, r0, ror #10
   1849c:	andeq	r8, r1, r0, ror #10
   184a0:	andeq	r8, r1, r0, ror #10
   184a4:	andeq	r8, r1, r0, ror #10
   184a8:	andeq	r8, r1, r0, ror #10
   184ac:	andeq	r8, r1, r0, ror #10
   184b0:	andeq	r8, r1, r0, ror #10
   184b4:	andeq	r8, r1, r4, lsl #10
   184b8:	andeq	r8, r1, r0, ror #10
   184bc:	andeq	r8, r1, r0, ror #10
   184c0:	andeq	r8, r1, r0, ror #10
   184c4:	andeq	r8, r1, r4, lsl #10
   184c8:	andeq	r8, r1, r0, ror #10
   184cc:	andeq	r8, r1, r4, lsl #10
   184d0:	andeq	r8, r1, r0, ror #10
   184d4:	andeq	r8, r1, r0, ror #10
   184d8:	andeq	r8, r1, r0, ror #10
   184dc:	andeq	r8, r1, r0, ror #10
   184e0:	andeq	r8, r1, r0, ror #10
   184e4:	andeq	r8, r1, r0, ror #10
   184e8:	andeq	r8, r1, r4, lsl #10
   184ec:	strd	r0, [r9]
   184f0:	b	18354 <__assert_fail@plt+0x7150>
   184f4:	ldrd	r2, [sp]
   184f8:	strd	r2, [r9]
   184fc:	orr	r4, r4, #2
   18500:	b	18354 <__assert_fail@plt+0x7150>
   18504:	mov	r1, #48	; 0x30
   18508:	ldr	r0, [sp, #48]	; 0x30
   1850c:	bl	110cc <strchr@plt>
   18510:	cmp	r0, #0
   18514:	beq	18650 <__assert_fail@plt+0x744c>
   18518:	ldrb	r3, [r7, #1]
   1851c:	cmp	r3, #68	; 0x44
   18520:	beq	1853c <__assert_fail@plt+0x7338>
   18524:	cmp	r3, #105	; 0x69
   18528:	beq	18548 <__assert_fail@plt+0x7344>
   1852c:	cmp	r3, #66	; 0x42
   18530:	movne	r7, #1
   18534:	movne	r1, #1024	; 0x400
   18538:	bne	18568 <__assert_fail@plt+0x7364>
   1853c:	mov	r7, #2
   18540:	mov	r1, #1000	; 0x3e8
   18544:	b	18568 <__assert_fail@plt+0x7364>
   18548:	ldrb	r7, [r7, #2]
   1854c:	cmp	r7, #66	; 0x42
   18550:	movne	r7, #1
   18554:	moveq	r7, #3
   18558:	mov	r1, #1024	; 0x400
   1855c:	b	18568 <__assert_fail@plt+0x7364>
   18560:	mov	r7, #1
   18564:	mov	r1, #1024	; 0x400
   18568:	sub	r5, r5, #66	; 0x42
   1856c:	cmp	r5, #53	; 0x35
   18570:	ldrls	pc, [pc, r5, lsl #2]
   18574:	b	18730 <__assert_fail@plt+0x752c>
   18578:	muleq	r1, r0, r6
   1857c:	andeq	r8, r1, r0, lsr r7
   18580:	andeq	r8, r1, r0, lsr r7
   18584:	andeq	r8, r1, r0, lsr #13
   18588:	andeq	r8, r1, r0, lsr r7
   1858c:			; <UNDEFINED> instruction: 0x000186b0
   18590:	andeq	r8, r1, r0, lsr r7
   18594:	andeq	r8, r1, r0, lsr r7
   18598:	andeq	r8, r1, r0, lsr r7
   1859c:	andeq	r8, r1, r0, asr #13
   185a0:	andeq	r8, r1, r0, lsr r7
   185a4:	ldrdeq	r8, [r1], -r0
   185a8:	andeq	r8, r1, r0, lsr r7
   185ac:	andeq	r8, r1, r0, lsr r7
   185b0:	andeq	r8, r1, r0, ror #13
   185b4:	andeq	r8, r1, r0, lsr r7
   185b8:	andeq	r8, r1, r0, lsr r7
   185bc:	andeq	r8, r1, r0, lsr r7
   185c0:	strdeq	r8, [r1], -r0
   185c4:	andeq	r8, r1, r0, lsr r7
   185c8:	andeq	r8, r1, r0, lsr r7
   185cc:	andeq	r8, r1, r0, lsr r7
   185d0:	andeq	r8, r1, r0, lsr r7
   185d4:	andeq	r8, r1, r0, lsl r7
   185d8:	andeq	r8, r1, r0, lsr #14
   185dc:	andeq	r8, r1, r0, lsr r7
   185e0:	andeq	r8, r1, r0, lsr r7
   185e4:	andeq	r8, r1, r0, lsr r7
   185e8:	andeq	r8, r1, r0, lsr r7
   185ec:	andeq	r8, r1, r0, lsr r7
   185f0:	andeq	r8, r1, r0, lsr r7
   185f4:	andeq	r8, r1, r0, lsr r7
   185f8:	andeq	r8, r1, ip, asr r6
   185fc:	andeq	r8, r1, r0, asr #14
   18600:	andeq	r8, r1, r0, lsr r7
   18604:	andeq	r8, r1, r0, lsr r7
   18608:	andeq	r8, r1, r0, lsr r7
   1860c:			; <UNDEFINED> instruction: 0x000186b0
   18610:	andeq	r8, r1, r0, lsr r7
   18614:	andeq	r8, r1, r0, lsr r7
   18618:	andeq	r8, r1, r0, lsr r7
   1861c:	andeq	r8, r1, r0, asr #13
   18620:	andeq	r8, r1, r0, lsr r7
   18624:	ldrdeq	r8, [r1], -r0
   18628:	andeq	r8, r1, r0, lsr r7
   1862c:	andeq	r8, r1, r0, lsr r7
   18630:	andeq	r8, r1, r0, lsr r7
   18634:	andeq	r8, r1, r0, lsr r7
   18638:	andeq	r8, r1, r0, lsr r7
   1863c:	andeq	r8, r1, r0, lsr r7
   18640:	strdeq	r8, [r1], -r0
   18644:	andeq	r8, r1, r0, lsr r7
   18648:	andeq	r8, r1, r0, lsr r7
   1864c:	andeq	r8, r1, r0, lsl #14
   18650:	mov	r7, #1
   18654:	mov	r1, #1024	; 0x400
   18658:	b	18568 <__assert_fail@plt+0x7364>
   1865c:	mov	r1, #512	; 0x200
   18660:	mov	r0, sp
   18664:	bl	181ec <__assert_fail@plt+0x6fe8>
   18668:	orr	r4, r4, r0
   1866c:	ldr	r3, [r6]
   18670:	add	r2, r3, r7
   18674:	str	r2, [r6]
   18678:	ldrb	r3, [r3, r7]
   1867c:	cmp	r3, #0
   18680:	orrne	r4, r4, #2
   18684:	ldrd	r2, [sp]
   18688:	strd	r2, [r9]
   1868c:	b	18354 <__assert_fail@plt+0x7150>
   18690:	mov	r1, #1024	; 0x400
   18694:	mov	r0, sp
   18698:	bl	181ec <__assert_fail@plt+0x6fe8>
   1869c:	b	18668 <__assert_fail@plt+0x7464>
   186a0:	mov	r2, #6
   186a4:	mov	r0, sp
   186a8:	bl	18294 <__assert_fail@plt+0x7090>
   186ac:	b	18668 <__assert_fail@plt+0x7464>
   186b0:	mov	r2, #3
   186b4:	mov	r0, sp
   186b8:	bl	18294 <__assert_fail@plt+0x7090>
   186bc:	b	18668 <__assert_fail@plt+0x7464>
   186c0:	mov	r2, #1
   186c4:	mov	r0, sp
   186c8:	bl	18294 <__assert_fail@plt+0x7090>
   186cc:	b	18668 <__assert_fail@plt+0x7464>
   186d0:	mov	r2, #2
   186d4:	mov	r0, sp
   186d8:	bl	18294 <__assert_fail@plt+0x7090>
   186dc:	b	18668 <__assert_fail@plt+0x7464>
   186e0:	mov	r2, #5
   186e4:	mov	r0, sp
   186e8:	bl	18294 <__assert_fail@plt+0x7090>
   186ec:	b	18668 <__assert_fail@plt+0x7464>
   186f0:	mov	r2, #4
   186f4:	mov	r0, sp
   186f8:	bl	18294 <__assert_fail@plt+0x7090>
   186fc:	b	18668 <__assert_fail@plt+0x7464>
   18700:	mov	r1, #2
   18704:	mov	r0, sp
   18708:	bl	181ec <__assert_fail@plt+0x6fe8>
   1870c:	b	18668 <__assert_fail@plt+0x7464>
   18710:	mov	r2, #8
   18714:	mov	r0, sp
   18718:	bl	18294 <__assert_fail@plt+0x7090>
   1871c:	b	18668 <__assert_fail@plt+0x7464>
   18720:	mov	r2, #7
   18724:	mov	r0, sp
   18728:	bl	18294 <__assert_fail@plt+0x7090>
   1872c:	b	18668 <__assert_fail@plt+0x7464>
   18730:	ldrd	r2, [sp]
   18734:	strd	r2, [r9]
   18738:	orr	r4, r4, #2
   1873c:	b	18354 <__assert_fail@plt+0x7150>
   18740:	mov	r0, #0
   18744:	b	18668 <__assert_fail@plt+0x7464>
   18748:	andeq	sl, r1, r0, lsr #25
   1874c:	andeq	sl, r1, ip, lsr #25
   18750:			; <UNDEFINED> instruction: 0x0001acbc
   18754:	push	{r4, lr}
   18758:	mov	r2, r0
   1875c:	mov	r3, r1
   18760:	cmp	r1, #0
   18764:	cmpne	r0, #0
   18768:	moveq	r3, #1
   1876c:	moveq	r2, r3
   18770:	umull	r0, r1, r2, r3
   18774:	cmp	r0, #0
   18778:	cmpge	r1, #0
   1877c:	bne	18790 <__assert_fail@plt+0x758c>
   18780:	mov	r1, r3
   18784:	mov	r0, r2
   18788:	bl	10f10 <calloc@plt>
   1878c:	pop	{r4, pc}
   18790:	bl	110d8 <__errno_location@plt>
   18794:	mov	r3, #12
   18798:	str	r3, [r0]
   1879c:	mov	r0, #0
   187a0:	pop	{r4, pc}
   187a4:	push	{r4, lr}
   187a8:	cmp	r0, #0
   187ac:	moveq	r0, #1
   187b0:	cmp	r0, #0
   187b4:	blt	187c0 <__assert_fail@plt+0x75bc>
   187b8:	bl	11060 <malloc@plt>
   187bc:	pop	{r4, pc}
   187c0:	bl	110d8 <__errno_location@plt>
   187c4:	mov	r3, #12
   187c8:	str	r3, [r0]
   187cc:	mov	r0, #0
   187d0:	pop	{r4, pc}
   187d4:	push	{r4, lr}
   187d8:	cmp	r0, #0
   187dc:	beq	187f8 <__assert_fail@plt+0x75f4>
   187e0:	cmp	r1, #0
   187e4:	beq	18804 <__assert_fail@plt+0x7600>
   187e8:	cmp	r1, #0
   187ec:	blt	18810 <__assert_fail@plt+0x760c>
   187f0:	bl	10fd0 <realloc@plt>
   187f4:	pop	{r4, pc}
   187f8:	mov	r0, r1
   187fc:	bl	187a4 <__assert_fail@plt+0x75a0>
   18800:	pop	{r4, pc}
   18804:	bl	15574 <__assert_fail@plt+0x4370>
   18808:	mov	r0, #0
   1880c:	pop	{r4, pc}
   18810:	bl	110d8 <__errno_location@plt>
   18814:	mov	r3, #12
   18818:	str	r3, [r0]
   1881c:	mov	r0, #0
   18820:	pop	{r4, pc}
   18824:	push	{r4, r5, r6, lr}
   18828:	mov	r5, r0
   1882c:	bl	11024 <__fpending@plt>
   18830:	mov	r6, r0
   18834:	ldr	r4, [r5]
   18838:	and	r4, r4, #32
   1883c:	mov	r0, r5
   18840:	bl	15468 <__assert_fail@plt+0x4264>
   18844:	cmp	r4, #0
   18848:	bne	18870 <__assert_fail@plt+0x766c>
   1884c:	cmp	r0, #0
   18850:	popeq	{r4, r5, r6, pc}
   18854:	cmp	r6, #0
   18858:	bne	1888c <__assert_fail@plt+0x7688>
   1885c:	bl	110d8 <__errno_location@plt>
   18860:	ldr	r0, [r0]
   18864:	subs	r0, r0, #9
   18868:	mvnne	r0, #0
   1886c:	pop	{r4, r5, r6, pc}
   18870:	cmp	r0, #0
   18874:	bne	18894 <__assert_fail@plt+0x7690>
   18878:	bl	110d8 <__errno_location@plt>
   1887c:	mov	r3, #0
   18880:	str	r3, [r0]
   18884:	mvn	r0, #0
   18888:	pop	{r4, r5, r6, pc}
   1888c:	mvn	r0, #0
   18890:	pop	{r4, r5, r6, pc}
   18894:	mvn	r0, #0
   18898:	pop	{r4, r5, r6, pc}
   1889c:	push	{r4, lr}
   188a0:	mov	r0, #14
   188a4:	bl	1118c <nl_langinfo@plt>
   188a8:	cmp	r0, #0
   188ac:	beq	188c4 <__assert_fail@plt+0x76c0>
   188b0:	ldrb	r2, [r0]
   188b4:	ldr	r3, [pc, #16]	; 188cc <__assert_fail@plt+0x76c8>
   188b8:	cmp	r2, #0
   188bc:	moveq	r0, r3
   188c0:	pop	{r4, pc}
   188c4:	ldr	r0, [pc]	; 188cc <__assert_fail@plt+0x76c8>
   188c8:	pop	{r4, pc}
   188cc:	andeq	sl, r1, r4, ror #25
   188d0:	push	{r4, r5, r6, r7, lr}
   188d4:	sub	sp, sp, #12
   188d8:	mov	r7, r1
   188dc:	mov	r5, r2
   188e0:	subs	r6, r0, #0
   188e4:	addeq	r6, sp, #4
   188e8:	mov	r0, r6
   188ec:	bl	11030 <mbrtowc@plt>
   188f0:	mov	r4, r0
   188f4:	cmp	r5, #0
   188f8:	cmnne	r0, #3
   188fc:	bhi	1890c <__assert_fail@plt+0x7708>
   18900:	mov	r0, r4
   18904:	add	sp, sp, #12
   18908:	pop	{r4, r5, r6, r7, pc}
   1890c:	mov	r0, #0
   18910:	bl	18974 <__assert_fail@plt+0x7770>
   18914:	cmp	r0, #0
   18918:	ldrbeq	r3, [r7]
   1891c:	streq	r3, [r6]
   18920:	moveq	r4, #1
   18924:	b	18900 <__assert_fail@plt+0x76fc>
   18928:	push	{r4, r5, r6, lr}
   1892c:	mov	r6, r0
   18930:	mov	r5, r1
   18934:	subs	r4, r2, #0
   18938:	beq	18964 <__assert_fail@plt+0x7760>
   1893c:	mov	r1, r4
   18940:	mvn	r0, #0
   18944:	bl	18a7c <__assert_fail@plt+0x7878>
   18948:	cmp	r0, r5
   1894c:	bcs	18964 <__assert_fail@plt+0x7760>
   18950:	bl	110d8 <__errno_location@plt>
   18954:	mov	r3, #12
   18958:	str	r3, [r0]
   1895c:	mov	r0, #0
   18960:	pop	{r4, r5, r6, pc}
   18964:	mul	r1, r5, r4
   18968:	mov	r0, r6
   1896c:	bl	187d4 <__assert_fail@plt+0x75d0>
   18970:	pop	{r4, r5, r6, pc}
   18974:	push	{lr}		; (str lr, [sp, #-4]!)
   18978:	sub	sp, sp, #268	; 0x10c
   1897c:	ldr	r2, [pc, #68]	; 189c8 <__assert_fail@plt+0x77c4>
   18980:	add	r1, sp, #4
   18984:	bl	189d4 <__assert_fail@plt+0x77d0>
   18988:	cmp	r0, #0
   1898c:	movne	r0, #0
   18990:	bne	189c0 <__assert_fail@plt+0x77bc>
   18994:	ldr	r1, [pc, #48]	; 189cc <__assert_fail@plt+0x77c8>
   18998:	add	r0, sp, #4
   1899c:	bl	10f34 <strcmp@plt>
   189a0:	cmp	r0, #0
   189a4:	moveq	r0, #0
   189a8:	beq	189c0 <__assert_fail@plt+0x77bc>
   189ac:	ldr	r1, [pc, #28]	; 189d0 <__assert_fail@plt+0x77cc>
   189b0:	add	r0, sp, #4
   189b4:	bl	10f34 <strcmp@plt>
   189b8:	adds	r0, r0, #0
   189bc:	movne	r0, #1
   189c0:	add	sp, sp, #268	; 0x10c
   189c4:	pop	{pc}		; (ldr pc, [sp], #4)
   189c8:	andeq	r0, r0, r1, lsl #2
   189cc:	andeq	sl, r1, ip, ror #25
   189d0:	strdeq	sl, [r1], -r0
   189d4:	push	{r4, r5, r6, lr}
   189d8:	mov	r6, r1
   189dc:	mov	r4, r2
   189e0:	mov	r1, #0
   189e4:	bl	11174 <setlocale@plt>
   189e8:	subs	r5, r0, #0
   189ec:	beq	18a10 <__assert_fail@plt+0x780c>
   189f0:	mov	r0, r5
   189f4:	bl	110c0 <strlen@plt>
   189f8:	cmp	r4, r0
   189fc:	bhi	18a28 <__assert_fail@plt+0x7824>
   18a00:	cmp	r4, #0
   18a04:	bne	18a40 <__assert_fail@plt+0x783c>
   18a08:	mov	r0, #34	; 0x22
   18a0c:	pop	{r4, r5, r6, pc}
   18a10:	cmp	r4, #0
   18a14:	beq	18a64 <__assert_fail@plt+0x7860>
   18a18:	mov	r3, #0
   18a1c:	strb	r3, [r6]
   18a20:	mov	r0, #22
   18a24:	pop	{r4, r5, r6, pc}
   18a28:	add	r2, r0, #1
   18a2c:	mov	r1, r5
   18a30:	mov	r0, r6
   18a34:	bl	10f70 <memcpy@plt>
   18a38:	mov	r0, #0
   18a3c:	pop	{r4, r5, r6, pc}
   18a40:	sub	r4, r4, #1
   18a44:	mov	r2, r4
   18a48:	mov	r1, r5
   18a4c:	mov	r0, r6
   18a50:	bl	10f70 <memcpy@plt>
   18a54:	mov	r3, #0
   18a58:	strb	r3, [r6, r4]
   18a5c:	mov	r0, #34	; 0x22
   18a60:	pop	{r4, r5, r6, pc}
   18a64:	mov	r0, #22
   18a68:	pop	{r4, r5, r6, pc}
   18a6c:	push	{r4, lr}
   18a70:	mov	r1, #0
   18a74:	bl	11174 <setlocale@plt>
   18a78:	pop	{r4, pc}
   18a7c:	subs	r2, r1, #1
   18a80:	bxeq	lr
   18a84:	bcc	18c5c <__assert_fail@plt+0x7a58>
   18a88:	cmp	r0, r1
   18a8c:	bls	18c40 <__assert_fail@plt+0x7a3c>
   18a90:	tst	r1, r2
   18a94:	beq	18c4c <__assert_fail@plt+0x7a48>
   18a98:	clz	r3, r0
   18a9c:	clz	r2, r1
   18aa0:	sub	r3, r2, r3
   18aa4:	rsbs	r3, r3, #31
   18aa8:	addne	r3, r3, r3, lsl #1
   18aac:	mov	r2, #0
   18ab0:	addne	pc, pc, r3, lsl #2
   18ab4:	nop			; (mov r0, r0)
   18ab8:	cmp	r0, r1, lsl #31
   18abc:	adc	r2, r2, r2
   18ac0:	subcs	r0, r0, r1, lsl #31
   18ac4:	cmp	r0, r1, lsl #30
   18ac8:	adc	r2, r2, r2
   18acc:	subcs	r0, r0, r1, lsl #30
   18ad0:	cmp	r0, r1, lsl #29
   18ad4:	adc	r2, r2, r2
   18ad8:	subcs	r0, r0, r1, lsl #29
   18adc:	cmp	r0, r1, lsl #28
   18ae0:	adc	r2, r2, r2
   18ae4:	subcs	r0, r0, r1, lsl #28
   18ae8:	cmp	r0, r1, lsl #27
   18aec:	adc	r2, r2, r2
   18af0:	subcs	r0, r0, r1, lsl #27
   18af4:	cmp	r0, r1, lsl #26
   18af8:	adc	r2, r2, r2
   18afc:	subcs	r0, r0, r1, lsl #26
   18b00:	cmp	r0, r1, lsl #25
   18b04:	adc	r2, r2, r2
   18b08:	subcs	r0, r0, r1, lsl #25
   18b0c:	cmp	r0, r1, lsl #24
   18b10:	adc	r2, r2, r2
   18b14:	subcs	r0, r0, r1, lsl #24
   18b18:	cmp	r0, r1, lsl #23
   18b1c:	adc	r2, r2, r2
   18b20:	subcs	r0, r0, r1, lsl #23
   18b24:	cmp	r0, r1, lsl #22
   18b28:	adc	r2, r2, r2
   18b2c:	subcs	r0, r0, r1, lsl #22
   18b30:	cmp	r0, r1, lsl #21
   18b34:	adc	r2, r2, r2
   18b38:	subcs	r0, r0, r1, lsl #21
   18b3c:	cmp	r0, r1, lsl #20
   18b40:	adc	r2, r2, r2
   18b44:	subcs	r0, r0, r1, lsl #20
   18b48:	cmp	r0, r1, lsl #19
   18b4c:	adc	r2, r2, r2
   18b50:	subcs	r0, r0, r1, lsl #19
   18b54:	cmp	r0, r1, lsl #18
   18b58:	adc	r2, r2, r2
   18b5c:	subcs	r0, r0, r1, lsl #18
   18b60:	cmp	r0, r1, lsl #17
   18b64:	adc	r2, r2, r2
   18b68:	subcs	r0, r0, r1, lsl #17
   18b6c:	cmp	r0, r1, lsl #16
   18b70:	adc	r2, r2, r2
   18b74:	subcs	r0, r0, r1, lsl #16
   18b78:	cmp	r0, r1, lsl #15
   18b7c:	adc	r2, r2, r2
   18b80:	subcs	r0, r0, r1, lsl #15
   18b84:	cmp	r0, r1, lsl #14
   18b88:	adc	r2, r2, r2
   18b8c:	subcs	r0, r0, r1, lsl #14
   18b90:	cmp	r0, r1, lsl #13
   18b94:	adc	r2, r2, r2
   18b98:	subcs	r0, r0, r1, lsl #13
   18b9c:	cmp	r0, r1, lsl #12
   18ba0:	adc	r2, r2, r2
   18ba4:	subcs	r0, r0, r1, lsl #12
   18ba8:	cmp	r0, r1, lsl #11
   18bac:	adc	r2, r2, r2
   18bb0:	subcs	r0, r0, r1, lsl #11
   18bb4:	cmp	r0, r1, lsl #10
   18bb8:	adc	r2, r2, r2
   18bbc:	subcs	r0, r0, r1, lsl #10
   18bc0:	cmp	r0, r1, lsl #9
   18bc4:	adc	r2, r2, r2
   18bc8:	subcs	r0, r0, r1, lsl #9
   18bcc:	cmp	r0, r1, lsl #8
   18bd0:	adc	r2, r2, r2
   18bd4:	subcs	r0, r0, r1, lsl #8
   18bd8:	cmp	r0, r1, lsl #7
   18bdc:	adc	r2, r2, r2
   18be0:	subcs	r0, r0, r1, lsl #7
   18be4:	cmp	r0, r1, lsl #6
   18be8:	adc	r2, r2, r2
   18bec:	subcs	r0, r0, r1, lsl #6
   18bf0:	cmp	r0, r1, lsl #5
   18bf4:	adc	r2, r2, r2
   18bf8:	subcs	r0, r0, r1, lsl #5
   18bfc:	cmp	r0, r1, lsl #4
   18c00:	adc	r2, r2, r2
   18c04:	subcs	r0, r0, r1, lsl #4
   18c08:	cmp	r0, r1, lsl #3
   18c0c:	adc	r2, r2, r2
   18c10:	subcs	r0, r0, r1, lsl #3
   18c14:	cmp	r0, r1, lsl #2
   18c18:	adc	r2, r2, r2
   18c1c:	subcs	r0, r0, r1, lsl #2
   18c20:	cmp	r0, r1, lsl #1
   18c24:	adc	r2, r2, r2
   18c28:	subcs	r0, r0, r1, lsl #1
   18c2c:	cmp	r0, r1
   18c30:	adc	r2, r2, r2
   18c34:	subcs	r0, r0, r1
   18c38:	mov	r0, r2
   18c3c:	bx	lr
   18c40:	moveq	r0, #1
   18c44:	movne	r0, #0
   18c48:	bx	lr
   18c4c:	clz	r2, r1
   18c50:	rsb	r2, r2, #31
   18c54:	lsr	r0, r0, r2
   18c58:	bx	lr
   18c5c:	cmp	r0, #0
   18c60:	mvnne	r0, #0
   18c64:	b	18f04 <__assert_fail@plt+0x7d00>
   18c68:	cmp	r1, #0
   18c6c:	beq	18c5c <__assert_fail@plt+0x7a58>
   18c70:	push	{r0, r1, lr}
   18c74:	bl	18a7c <__assert_fail@plt+0x7878>
   18c78:	pop	{r1, r2, lr}
   18c7c:	mul	r3, r2, r0
   18c80:	sub	r1, r1, r3
   18c84:	bx	lr
   18c88:	cmp	r1, #0
   18c8c:	beq	18e98 <__assert_fail@plt+0x7c94>
   18c90:	eor	ip, r0, r1
   18c94:	rsbmi	r1, r1, #0
   18c98:	subs	r2, r1, #1
   18c9c:	beq	18e64 <__assert_fail@plt+0x7c60>
   18ca0:	movs	r3, r0
   18ca4:	rsbmi	r3, r0, #0
   18ca8:	cmp	r3, r1
   18cac:	bls	18e70 <__assert_fail@plt+0x7c6c>
   18cb0:	tst	r1, r2
   18cb4:	beq	18e80 <__assert_fail@plt+0x7c7c>
   18cb8:	clz	r2, r3
   18cbc:	clz	r0, r1
   18cc0:	sub	r2, r0, r2
   18cc4:	rsbs	r2, r2, #31
   18cc8:	addne	r2, r2, r2, lsl #1
   18ccc:	mov	r0, #0
   18cd0:	addne	pc, pc, r2, lsl #2
   18cd4:	nop			; (mov r0, r0)
   18cd8:	cmp	r3, r1, lsl #31
   18cdc:	adc	r0, r0, r0
   18ce0:	subcs	r3, r3, r1, lsl #31
   18ce4:	cmp	r3, r1, lsl #30
   18ce8:	adc	r0, r0, r0
   18cec:	subcs	r3, r3, r1, lsl #30
   18cf0:	cmp	r3, r1, lsl #29
   18cf4:	adc	r0, r0, r0
   18cf8:	subcs	r3, r3, r1, lsl #29
   18cfc:	cmp	r3, r1, lsl #28
   18d00:	adc	r0, r0, r0
   18d04:	subcs	r3, r3, r1, lsl #28
   18d08:	cmp	r3, r1, lsl #27
   18d0c:	adc	r0, r0, r0
   18d10:	subcs	r3, r3, r1, lsl #27
   18d14:	cmp	r3, r1, lsl #26
   18d18:	adc	r0, r0, r0
   18d1c:	subcs	r3, r3, r1, lsl #26
   18d20:	cmp	r3, r1, lsl #25
   18d24:	adc	r0, r0, r0
   18d28:	subcs	r3, r3, r1, lsl #25
   18d2c:	cmp	r3, r1, lsl #24
   18d30:	adc	r0, r0, r0
   18d34:	subcs	r3, r3, r1, lsl #24
   18d38:	cmp	r3, r1, lsl #23
   18d3c:	adc	r0, r0, r0
   18d40:	subcs	r3, r3, r1, lsl #23
   18d44:	cmp	r3, r1, lsl #22
   18d48:	adc	r0, r0, r0
   18d4c:	subcs	r3, r3, r1, lsl #22
   18d50:	cmp	r3, r1, lsl #21
   18d54:	adc	r0, r0, r0
   18d58:	subcs	r3, r3, r1, lsl #21
   18d5c:	cmp	r3, r1, lsl #20
   18d60:	adc	r0, r0, r0
   18d64:	subcs	r3, r3, r1, lsl #20
   18d68:	cmp	r3, r1, lsl #19
   18d6c:	adc	r0, r0, r0
   18d70:	subcs	r3, r3, r1, lsl #19
   18d74:	cmp	r3, r1, lsl #18
   18d78:	adc	r0, r0, r0
   18d7c:	subcs	r3, r3, r1, lsl #18
   18d80:	cmp	r3, r1, lsl #17
   18d84:	adc	r0, r0, r0
   18d88:	subcs	r3, r3, r1, lsl #17
   18d8c:	cmp	r3, r1, lsl #16
   18d90:	adc	r0, r0, r0
   18d94:	subcs	r3, r3, r1, lsl #16
   18d98:	cmp	r3, r1, lsl #15
   18d9c:	adc	r0, r0, r0
   18da0:	subcs	r3, r3, r1, lsl #15
   18da4:	cmp	r3, r1, lsl #14
   18da8:	adc	r0, r0, r0
   18dac:	subcs	r3, r3, r1, lsl #14
   18db0:	cmp	r3, r1, lsl #13
   18db4:	adc	r0, r0, r0
   18db8:	subcs	r3, r3, r1, lsl #13
   18dbc:	cmp	r3, r1, lsl #12
   18dc0:	adc	r0, r0, r0
   18dc4:	subcs	r3, r3, r1, lsl #12
   18dc8:	cmp	r3, r1, lsl #11
   18dcc:	adc	r0, r0, r0
   18dd0:	subcs	r3, r3, r1, lsl #11
   18dd4:	cmp	r3, r1, lsl #10
   18dd8:	adc	r0, r0, r0
   18ddc:	subcs	r3, r3, r1, lsl #10
   18de0:	cmp	r3, r1, lsl #9
   18de4:	adc	r0, r0, r0
   18de8:	subcs	r3, r3, r1, lsl #9
   18dec:	cmp	r3, r1, lsl #8
   18df0:	adc	r0, r0, r0
   18df4:	subcs	r3, r3, r1, lsl #8
   18df8:	cmp	r3, r1, lsl #7
   18dfc:	adc	r0, r0, r0
   18e00:	subcs	r3, r3, r1, lsl #7
   18e04:	cmp	r3, r1, lsl #6
   18e08:	adc	r0, r0, r0
   18e0c:	subcs	r3, r3, r1, lsl #6
   18e10:	cmp	r3, r1, lsl #5
   18e14:	adc	r0, r0, r0
   18e18:	subcs	r3, r3, r1, lsl #5
   18e1c:	cmp	r3, r1, lsl #4
   18e20:	adc	r0, r0, r0
   18e24:	subcs	r3, r3, r1, lsl #4
   18e28:	cmp	r3, r1, lsl #3
   18e2c:	adc	r0, r0, r0
   18e30:	subcs	r3, r3, r1, lsl #3
   18e34:	cmp	r3, r1, lsl #2
   18e38:	adc	r0, r0, r0
   18e3c:	subcs	r3, r3, r1, lsl #2
   18e40:	cmp	r3, r1, lsl #1
   18e44:	adc	r0, r0, r0
   18e48:	subcs	r3, r3, r1, lsl #1
   18e4c:	cmp	r3, r1
   18e50:	adc	r0, r0, r0
   18e54:	subcs	r3, r3, r1
   18e58:	cmp	ip, #0
   18e5c:	rsbmi	r0, r0, #0
   18e60:	bx	lr
   18e64:	teq	ip, r0
   18e68:	rsbmi	r0, r0, #0
   18e6c:	bx	lr
   18e70:	movcc	r0, #0
   18e74:	asreq	r0, ip, #31
   18e78:	orreq	r0, r0, #1
   18e7c:	bx	lr
   18e80:	clz	r2, r1
   18e84:	rsb	r2, r2, #31
   18e88:	cmp	ip, #0
   18e8c:	lsr	r0, r3, r2
   18e90:	rsbmi	r0, r0, #0
   18e94:	bx	lr
   18e98:	cmp	r0, #0
   18e9c:	mvngt	r0, #-2147483648	; 0x80000000
   18ea0:	movlt	r0, #-2147483648	; 0x80000000
   18ea4:	b	18f04 <__assert_fail@plt+0x7d00>
   18ea8:	cmp	r1, #0
   18eac:	beq	18e98 <__assert_fail@plt+0x7c94>
   18eb0:	push	{r0, r1, lr}
   18eb4:	bl	18c90 <__assert_fail@plt+0x7a8c>
   18eb8:	pop	{r1, r2, lr}
   18ebc:	mul	r3, r2, r0
   18ec0:	sub	r1, r1, r3
   18ec4:	bx	lr
   18ec8:	cmp	r3, #0
   18ecc:	cmpeq	r2, #0
   18ed0:	bne	18ee8 <__assert_fail@plt+0x7ce4>
   18ed4:	cmp	r1, #0
   18ed8:	cmpeq	r0, #0
   18edc:	mvnne	r1, #0
   18ee0:	mvnne	r0, #0
   18ee4:	b	18f04 <__assert_fail@plt+0x7d00>
   18ee8:	sub	sp, sp, #8
   18eec:	push	{sp, lr}
   18ef0:	bl	18f14 <__assert_fail@plt+0x7d10>
   18ef4:	ldr	lr, [sp, #4]
   18ef8:	add	sp, sp, #8
   18efc:	pop	{r2, r3}
   18f00:	bx	lr
   18f04:	push	{r1, lr}
   18f08:	mov	r0, #8
   18f0c:	bl	10f28 <raise@plt>
   18f10:	pop	{r1, pc}
   18f14:	cmp	r1, r3
   18f18:	push	{r4, r5, r6, r7, r8, r9, lr}
   18f1c:	cmpeq	r0, r2
   18f20:	mov	r4, r0
   18f24:	mov	r5, r1
   18f28:	ldr	r9, [sp, #28]
   18f2c:	movcc	r0, #0
   18f30:	movcc	r1, #0
   18f34:	bcc	1902c <__assert_fail@plt+0x7e28>
   18f38:	cmp	r3, #0
   18f3c:	clzeq	ip, r2
   18f40:	clzne	ip, r3
   18f44:	addeq	ip, ip, #32
   18f48:	cmp	r5, #0
   18f4c:	clzeq	r1, r4
   18f50:	addeq	r1, r1, #32
   18f54:	clzne	r1, r5
   18f58:	sub	ip, ip, r1
   18f5c:	sub	lr, ip, #32
   18f60:	lsl	r7, r3, ip
   18f64:	rsb	r8, ip, #32
   18f68:	orr	r7, r7, r2, lsl lr
   18f6c:	orr	r7, r7, r2, lsr r8
   18f70:	lsl	r6, r2, ip
   18f74:	cmp	r5, r7
   18f78:	cmpeq	r4, r6
   18f7c:	movcc	r0, #0
   18f80:	movcc	r1, #0
   18f84:	bcc	18fa0 <__assert_fail@plt+0x7d9c>
   18f88:	mov	r3, #1
   18f8c:	subs	r4, r4, r6
   18f90:	lsl	r1, r3, lr
   18f94:	lsl	r0, r3, ip
   18f98:	orr	r1, r1, r3, lsr r8
   18f9c:	sbc	r5, r5, r7
   18fa0:	cmp	ip, #0
   18fa4:	beq	1902c <__assert_fail@plt+0x7e28>
   18fa8:	lsrs	r3, r7, #1
   18fac:	rrx	r2, r6
   18fb0:	mov	r6, ip
   18fb4:	b	18fd8 <__assert_fail@plt+0x7dd4>
   18fb8:	subs	r4, r4, r2
   18fbc:	sbc	r5, r5, r3
   18fc0:	adds	r4, r4, r4
   18fc4:	adc	r5, r5, r5
   18fc8:	adds	r4, r4, #1
   18fcc:	adc	r5, r5, #0
   18fd0:	subs	r6, r6, #1
   18fd4:	beq	18ff4 <__assert_fail@plt+0x7df0>
   18fd8:	cmp	r5, r3
   18fdc:	cmpeq	r4, r2
   18fe0:	bcs	18fb8 <__assert_fail@plt+0x7db4>
   18fe4:	adds	r4, r4, r4
   18fe8:	adc	r5, r5, r5
   18fec:	subs	r6, r6, #1
   18ff0:	bne	18fd8 <__assert_fail@plt+0x7dd4>
   18ff4:	lsr	r6, r4, ip
   18ff8:	lsr	r7, r5, ip
   18ffc:	orr	r6, r6, r5, lsl r8
   19000:	adds	r2, r0, r4
   19004:	orr	r6, r6, r5, lsr lr
   19008:	adc	r3, r1, r5
   1900c:	lsl	r1, r7, ip
   19010:	orr	r1, r1, r6, lsl lr
   19014:	lsl	r0, r6, ip
   19018:	orr	r1, r1, r6, lsr r8
   1901c:	subs	r0, r2, r0
   19020:	mov	r4, r6
   19024:	mov	r5, r7
   19028:	sbc	r1, r3, r1
   1902c:	cmp	r9, #0
   19030:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19034:	strd	r4, [r9]
   19038:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1903c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19040:	mov	r7, r0
   19044:	ldr	r6, [pc, #72]	; 19094 <__assert_fail@plt+0x7e90>
   19048:	ldr	r5, [pc, #72]	; 19098 <__assert_fail@plt+0x7e94>
   1904c:	add	r6, pc, r6
   19050:	add	r5, pc, r5
   19054:	sub	r6, r6, r5
   19058:	mov	r8, r1
   1905c:	mov	r9, r2
   19060:	bl	10ef0 <calloc@plt-0x20>
   19064:	asrs	r6, r6, #2
   19068:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1906c:	mov	r4, #0
   19070:	add	r4, r4, #1
   19074:	ldr	r3, [r5], #4
   19078:	mov	r2, r9
   1907c:	mov	r1, r8
   19080:	mov	r0, r7
   19084:	blx	r3
   19088:	cmp	r6, r4
   1908c:	bne	19070 <__assert_fail@plt+0x7e6c>
   19090:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19094:			; <UNDEFINED> instruction: 0x00011ebc
   19098:			; <UNDEFINED> instruction: 0x00011eb4
   1909c:	bx	lr
   190a0:	ldr	r3, [pc, #12]	; 190b4 <__assert_fail@plt+0x7eb0>
   190a4:	mov	r1, #0
   190a8:	add	r3, pc, r3
   190ac:	ldr	r2, [r3]
   190b0:	b	110f0 <__cxa_atexit@plt>
   190b4:	andeq	r2, r1, r4, rrx

Disassembly of section .fini:

000190b8 <.fini>:
   190b8:	push	{r3, lr}
   190bc:	pop	{r3, pc}
