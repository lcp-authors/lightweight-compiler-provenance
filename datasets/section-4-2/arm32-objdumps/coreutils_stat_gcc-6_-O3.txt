
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

000113d4 <.init>:
   113d4:	push	{r3, lr}
   113d8:	bl	121a8 <__assert_fail@plt+0x988>
   113dc:	pop	{r3, pc}

Disassembly of section .plt:

000113e0 <calloc@plt-0x14>:
   113e0:	push	{lr}		; (str lr, [sp, #-4]!)
   113e4:	ldr	lr, [pc, #4]	; 113f0 <calloc@plt-0x4>
   113e8:	add	lr, pc, lr
   113ec:	ldr	pc, [lr, #8]!
   113f0:	andeq	r5, r2, r0, lsl ip

000113f4 <calloc@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #151552	; 0x25000
   113fc:	ldr	pc, [ip, #3088]!	; 0xc10

00011400 <fputs_unlocked@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #151552	; 0x25000
   11408:	ldr	pc, [ip, #3080]!	; 0xc08

0001140c <raise@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #151552	; 0x25000
   11414:	ldr	pc, [ip, #3072]!	; 0xc00

00011418 <gmtime_r@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #151552	; 0x25000
   11420:	ldr	pc, [ip, #3064]!	; 0xbf8

00011424 <__getdelim@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #151552	; 0x25000
   1142c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011430 <is_selinux_enabled@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #151552	; 0x25000
   11438:	ldr	pc, [ip, #3048]!	; 0xbe8

0001143c <strcmp@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #151552	; 0x25000
   11444:	ldr	pc, [ip, #3040]!	; 0xbe0

00011448 <strtol@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #151552	; 0x25000
   11450:	ldr	pc, [ip, #3032]!	; 0xbd8

00011454 <getpwuid@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #151552	; 0x25000
   1145c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011460 <mktime@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #151552	; 0x25000
   11468:	ldr	pc, [ip, #3016]!	; 0xbc8

0001146c <fflush@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #151552	; 0x25000
   11474:	ldr	pc, [ip, #3008]!	; 0xbc0

00011478 <free@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #151552	; 0x25000
   11480:	ldr	pc, [ip, #3000]!	; 0xbb8

00011484 <_exit@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #151552	; 0x25000
   1148c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011490 <memcpy@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #151552	; 0x25000
   11498:	ldr	pc, [ip, #2984]!	; 0xba8

0001149c <mbsinit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #151552	; 0x25000
   114a4:	ldr	pc, [ip, #2976]!	; 0xba0

000114a8 <memcmp@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #151552	; 0x25000
   114b0:	ldr	pc, [ip, #2968]!	; 0xb98

000114b4 <fputc_unlocked@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #151552	; 0x25000
   114bc:	ldr	pc, [ip, #2960]!	; 0xb90

000114c0 <dcgettext@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #151552	; 0x25000
   114c8:	ldr	pc, [ip, #2952]!	; 0xb88

000114cc <realloc@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #151552	; 0x25000
   114d4:	ldr	pc, [ip, #2944]!	; 0xb80

000114d8 <fgetfilecon@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #151552	; 0x25000
   114e0:	ldr	pc, [ip, #2936]!	; 0xb78

000114e4 <localtime_r@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #151552	; 0x25000
   114ec:	ldr	pc, [ip, #2928]!	; 0xb70

000114f0 <textdomain@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #151552	; 0x25000
   114f8:	ldr	pc, [ip, #2920]!	; 0xb68

000114fc <chdir@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #151552	; 0x25000
   11504:	ldr	pc, [ip, #2912]!	; 0xb60

00011508 <iswprint@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #151552	; 0x25000
   11510:	ldr	pc, [ip, #2904]!	; 0xb58

00011514 <tzset@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #151552	; 0x25000
   1151c:	ldr	pc, [ip, #2896]!	; 0xb50

00011520 <readlink@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #151552	; 0x25000
   11528:	ldr	pc, [ip, #2888]!	; 0xb48

0001152c <fwrite@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #151552	; 0x25000
   11534:	ldr	pc, [ip, #2880]!	; 0xb40

00011538 <lseek64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #151552	; 0x25000
   11540:	ldr	pc, [ip, #2872]!	; 0xb38

00011544 <__ctype_get_mb_cur_max@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #151552	; 0x25000
   1154c:	ldr	pc, [ip, #2864]!	; 0xb30

00011550 <hasmntopt@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #151552	; 0x25000
   11558:	ldr	pc, [ip, #2856]!	; 0xb28

0001155c <__fpending@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #151552	; 0x25000
   11564:	ldr	pc, [ip, #2848]!	; 0xb20

00011568 <mbrtowc@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #151552	; 0x25000
   11570:	ldr	pc, [ip, #2840]!	; 0xb18

00011574 <error@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #151552	; 0x25000
   1157c:	ldr	pc, [ip, #2832]!	; 0xb10

00011580 <getmntent@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #151552	; 0x25000
   11588:	ldr	pc, [ip, #2824]!	; 0xb08

0001158c <open64@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #151552	; 0x25000
   11594:	ldr	pc, [ip, #2816]!	; 0xb00

00011598 <getenv@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #151552	; 0x25000
   115a0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115a4 <lgetfilecon@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #151552	; 0x25000
   115ac:	ldr	pc, [ip, #2800]!	; 0xaf0

000115b0 <malloc@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #151552	; 0x25000
   115b8:	ldr	pc, [ip, #2792]!	; 0xae8

000115bc <__libc_start_main@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #151552	; 0x25000
   115c4:	ldr	pc, [ip, #2784]!	; 0xae0

000115c8 <strftime@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #151552	; 0x25000
   115d0:	ldr	pc, [ip, #2776]!	; 0xad8

000115d4 <__freading@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #151552	; 0x25000
   115dc:	ldr	pc, [ip, #2768]!	; 0xad0

000115e0 <__ctype_tolower_loc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #151552	; 0x25000
   115e8:	ldr	pc, [ip, #2760]!	; 0xac8

000115ec <__ctype_toupper_loc@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #151552	; 0x25000
   115f4:	ldr	pc, [ip, #2752]!	; 0xac0

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #151552	; 0x25000
   11600:	ldr	pc, [ip, #2744]!	; 0xab8

00011604 <getopt_long@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #151552	; 0x25000
   1160c:	ldr	pc, [ip, #2736]!	; 0xab0

00011610 <__ctype_b_loc@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #151552	; 0x25000
   11618:	ldr	pc, [ip, #2728]!	; 0xaa8

0001161c <getcwd@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #151552	; 0x25000
   11624:	ldr	pc, [ip, #2720]!	; 0xaa0

00011628 <exit@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #151552	; 0x25000
   11630:	ldr	pc, [ip, #2712]!	; 0xa98

00011634 <getfilecon@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #151552	; 0x25000
   1163c:	ldr	pc, [ip, #2704]!	; 0xa90

00011640 <strlen@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #151552	; 0x25000
   11648:	ldr	pc, [ip, #2696]!	; 0xa88

0001164c <strchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #151552	; 0x25000
   11654:	ldr	pc, [ip, #2688]!	; 0xa80

00011658 <setenv@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #151552	; 0x25000
   11660:	ldr	pc, [ip, #2680]!	; 0xa78

00011664 <openat64@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #151552	; 0x25000
   1166c:	ldr	pc, [ip, #2672]!	; 0xa70

00011670 <memrchr@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #151552	; 0x25000
   11678:	ldr	pc, [ip, #2664]!	; 0xa68

0001167c <__errno_location@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #151552	; 0x25000
   11684:	ldr	pc, [ip, #2656]!	; 0xa60

00011688 <__sprintf_chk@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #151552	; 0x25000
   11690:	ldr	pc, [ip, #2648]!	; 0xa58

00011694 <__cxa_atexit@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #151552	; 0x25000
   1169c:	ldr	pc, [ip, #2640]!	; 0xa50

000116a0 <__vasprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #151552	; 0x25000
   116a8:	ldr	pc, [ip, #2632]!	; 0xa48

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #151552	; 0x25000
   116b4:	ldr	pc, [ip, #2624]!	; 0xa40

000116b8 <__printf_chk@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #151552	; 0x25000
   116c0:	ldr	pc, [ip, #2616]!	; 0xa38

000116c4 <fileno@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #151552	; 0x25000
   116cc:	ldr	pc, [ip, #2608]!	; 0xa30

000116d0 <__fprintf_chk@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #151552	; 0x25000
   116d8:	ldr	pc, [ip, #2600]!	; 0xa28

000116dc <memchr@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #151552	; 0x25000
   116e4:	ldr	pc, [ip, #2592]!	; 0xa20

000116e8 <fclose@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #151552	; 0x25000
   116f0:	ldr	pc, [ip, #2584]!	; 0xa18

000116f4 <fseeko64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #151552	; 0x25000
   116fc:	ldr	pc, [ip, #2576]!	; 0xa10

00011700 <statx@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #151552	; 0x25000
   11708:	ldr	pc, [ip, #2568]!	; 0xa08

0001170c <endmntent@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #151552	; 0x25000
   11714:	ldr	pc, [ip, #2560]!	; 0xa00

00011718 <fcntl64@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #151552	; 0x25000
   11720:	ldr	pc, [ip, #2552]!	; 0x9f8

00011724 <__overflow@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #151552	; 0x25000
   1172c:	ldr	pc, [ip, #2544]!	; 0x9f0

00011730 <setlocale@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #151552	; 0x25000
   11738:	ldr	pc, [ip, #2536]!	; 0x9e8

0001173c <strrchr@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #151552	; 0x25000
   11744:	ldr	pc, [ip, #2528]!	; 0x9e0

00011748 <statfs64@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #151552	; 0x25000
   11750:	ldr	pc, [ip, #2520]!	; 0x9d8

00011754 <nl_langinfo@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #151552	; 0x25000
   1175c:	ldr	pc, [ip, #2512]!	; 0x9d0

00011760 <sscanf@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #151552	; 0x25000
   11768:	ldr	pc, [ip, #2504]!	; 0x9c8

0001176c <localeconv@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #151552	; 0x25000
   11774:	ldr	pc, [ip, #2496]!	; 0x9c0

00011778 <timegm@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #151552	; 0x25000
   11780:	ldr	pc, [ip, #2488]!	; 0x9b8

00011784 <fchdir@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #151552	; 0x25000
   1178c:	ldr	pc, [ip, #2480]!	; 0x9b0

00011790 <canonicalize_file_name@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #151552	; 0x25000
   11798:	ldr	pc, [ip, #2472]!	; 0x9a8

0001179c <fopen64@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #151552	; 0x25000
   117a4:	ldr	pc, [ip, #2464]!	; 0x9a0

000117a8 <freecon@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #151552	; 0x25000
   117b0:	ldr	pc, [ip, #2456]!	; 0x998

000117b4 <setmntent@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #151552	; 0x25000
   117bc:	ldr	pc, [ip, #2448]!	; 0x990

000117c0 <bindtextdomain@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #151552	; 0x25000
   117c8:	ldr	pc, [ip, #2440]!	; 0x988

000117cc <__xstat64@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #151552	; 0x25000
   117d4:	ldr	pc, [ip, #2432]!	; 0x980

000117d8 <unsetenv@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #151552	; 0x25000
   117e0:	ldr	pc, [ip, #2424]!	; 0x978

000117e4 <strncmp@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #151552	; 0x25000
   117ec:	ldr	pc, [ip, #2416]!	; 0x970

000117f0 <abort@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #151552	; 0x25000
   117f8:	ldr	pc, [ip, #2408]!	; 0x968

000117fc <close@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #151552	; 0x25000
   11804:	ldr	pc, [ip, #2400]!	; 0x960

00011808 <getgrgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #151552	; 0x25000
   11810:	ldr	pc, [ip, #2392]!	; 0x958

00011814 <strspn@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #151552	; 0x25000
   1181c:	ldr	pc, [ip, #2384]!	; 0x950

00011820 <__assert_fail@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #151552	; 0x25000
   11828:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

00011830 <.text>:
   11830:	push	{r4, lr}
   11834:	mov	r2, #64	; 0x40
   11838:	ldr	r3, [pc, #8]	; 11848 <__assert_fail@plt+0x28>
   1183c:	ldr	r1, [pc, #8]	; 1184c <__assert_fail@plt+0x2c>
   11840:	ldr	r0, [pc, #8]	; 11850 <__assert_fail@plt+0x30>
   11844:	bl	11820 <__assert_fail@plt>
   11848:	andeq	r6, r2, ip, asr #14
   1184c:	andeq	r6, r2, r4, ror #14
   11850:	andeq	r6, r2, r8, ror r7
   11854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11858:	mov	r8, r0
   1185c:	sub	sp, sp, #140	; 0x8c
   11860:	ldr	r0, [r1]
   11864:	mov	sl, r1
   11868:	bl	1d01c <__assert_fail@plt+0xb7fc>
   1186c:	ldr	r1, [pc, #2160]	; 120e4 <__assert_fail@plt+0x8c4>
   11870:	mov	r0, #6
   11874:	bl	11730 <setlocale@plt>
   11878:	ldr	r1, [pc, #2152]	; 120e8 <__assert_fail@plt+0x8c8>
   1187c:	ldr	r0, [pc, #2152]	; 120ec <__assert_fail@plt+0x8cc>
   11880:	bl	117c0 <bindtextdomain@plt>
   11884:	ldr	r0, [pc, #2144]	; 120ec <__assert_fail@plt+0x8cc>
   11888:	bl	114f0 <textdomain@plt>
   1188c:	bl	1176c <localeconv@plt>
   11890:	ldr	r3, [pc, #2136]	; 120f0 <__assert_fail@plt+0x8d0>
   11894:	mov	r9, #0
   11898:	add	r7, r3, #360	; 0x168
   1189c:	ldr	r2, [pc, #2128]	; 120f4 <__assert_fail@plt+0x8d4>
   118a0:	ldr	fp, [pc, #2128]	; 120f8 <__assert_fail@plt+0x8d8>
   118a4:	str	r9, [sp, #24]
   118a8:	str	r9, [sp, #20]
   118ac:	ldr	r6, [pc, #2120]	; 120fc <__assert_fail@plt+0x8dc>
   118b0:	ldr	r3, [r0]
   118b4:	ldrb	r1, [r3]
   118b8:	cmp	r1, r9
   118bc:	moveq	r3, r2
   118c0:	mov	r0, r3
   118c4:	str	r3, [fp, #12]
   118c8:	bl	11640 <strlen@plt>
   118cc:	str	r0, [fp, #8]
   118d0:	ldr	r0, [pc, #2088]	; 12100 <__assert_fail@plt+0x8e0>
   118d4:	bl	2457c <__assert_fail@plt+0x12d5c>
   118d8:	mov	r5, #0
   118dc:	str	r5, [sp]
   118e0:	mov	r3, r7
   118e4:	mov	r2, r6
   118e8:	mov	r1, sl
   118ec:	mov	r0, r8
   118f0:	bl	11604 <getopt_long@plt>
   118f4:	cmn	r0, #1
   118f8:	mov	r4, r0
   118fc:	beq	11a5c <__assert_fail@plt+0x23c>
   11900:	cmp	r4, #76	; 0x4c
   11904:	beq	11a38 <__assert_fail@plt+0x218>
   11908:	ble	11948 <__assert_fail@plt+0x128>
   1190c:	cmp	r4, #102	; 0x66
   11910:	beq	119f4 <__assert_fail@plt+0x1d4>
   11914:	ble	119d0 <__assert_fail@plt+0x1b0>
   11918:	cmp	r4, #116	; 0x74
   1191c:	beq	119c4 <__assert_fail@plt+0x1a4>
   11920:	cmp	r4, #256	; 0x100
   11924:	bne	11960 <__assert_fail@plt+0x140>
   11928:	mov	r3, #1
   1192c:	ldr	r2, [pc, #2000]	; 12104 <__assert_fail@plt+0x8e4>
   11930:	strb	r3, [fp, #123]	; 0x7b
   11934:	ldr	r3, [pc, #1996]	; 12108 <__assert_fail@plt+0x8e8>
   11938:	ldr	r1, [pc, #1956]	; 120e4 <__assert_fail@plt+0x8c4>
   1193c:	ldr	r9, [r3]
   11940:	str	r1, [r2]
   11944:	b	118d8 <__assert_fail@plt+0xb8>
   11948:	cmn	r4, #2
   1194c:	beq	11a00 <__assert_fail@plt+0x1e0>
   11950:	cmp	r4, #0
   11954:	beq	11968 <__assert_fail@plt+0x148>
   11958:	cmn	r4, #3
   1195c:	beq	11a08 <__assert_fail@plt+0x1e8>
   11960:	mov	r0, #1
   11964:	bl	1937c <__assert_fail@plt+0x7b5c>
   11968:	ldr	r2, [pc, #1948]	; 1210c <__assert_fail@plt+0x8ec>
   1196c:	mov	r1, #4
   11970:	ldr	r3, [pc, #1944]	; 12110 <__assert_fail@plt+0x8f0>
   11974:	ldr	r2, [r2]
   11978:	str	r1, [sp]
   1197c:	ldr	r1, [pc, #1924]	; 12108 <__assert_fail@plt+0x8e8>
   11980:	mov	r5, #1
   11984:	str	r2, [sp, #4]
   11988:	str	r5, [sp, #8]
   1198c:	add	r2, r3, #12
   11990:	ldr	r1, [r1]
   11994:	ldr	r0, [pc, #1912]	; 12114 <__assert_fail@plt+0x8f4>
   11998:	bl	19f0c <__assert_fail@plt+0x86ec>
   1199c:	ldr	r3, [pc, #1868]	; 120f0 <__assert_fail@plt+0x8d0>
   119a0:	add	r0, r3, r0, lsl #2
   119a4:	ldr	r3, [r0, #332]	; 0x14c
   119a8:	cmp	r3, r5
   119ac:	beq	11a50 <__assert_fail@plt+0x230>
   119b0:	bcc	11a44 <__assert_fail@plt+0x224>
   119b4:	cmp	r3, #2
   119b8:	strbeq	r4, [fp, #122]	; 0x7a
   119bc:	strbeq	r5, [fp, #121]	; 0x79
   119c0:	b	118d8 <__assert_fail@plt+0xb8>
   119c4:	mov	r3, #1
   119c8:	str	r3, [sp, #24]
   119cc:	b	118d8 <__assert_fail@plt+0xb8>
   119d0:	cmp	r4, #99	; 0x63
   119d4:	bne	11960 <__assert_fail@plt+0x140>
   119d8:	ldr	r3, [pc, #1828]	; 12104 <__assert_fail@plt+0x8e4>
   119dc:	ldr	r2, [pc, #1844]	; 12118 <__assert_fail@plt+0x8f8>
   119e0:	strb	r5, [fp, #123]	; 0x7b
   119e4:	str	r2, [r3]
   119e8:	ldr	r3, [pc, #1816]	; 12108 <__assert_fail@plt+0x8e8>
   119ec:	ldr	r9, [r3]
   119f0:	b	118d8 <__assert_fail@plt+0xb8>
   119f4:	mov	r3, #1
   119f8:	str	r3, [sp, #20]
   119fc:	b	118d8 <__assert_fail@plt+0xb8>
   11a00:	mov	r0, r5
   11a04:	bl	1937c <__assert_fail@plt+0x7b5c>
   11a08:	ldr	r1, [pc, #1804]	; 1211c <__assert_fail@plt+0x8fc>
   11a0c:	ldr	r3, [pc, #1804]	; 12120 <__assert_fail@plt+0x900>
   11a10:	ldr	r2, [pc, #1804]	; 12124 <__assert_fail@plt+0x904>
   11a14:	str	r5, [sp, #4]
   11a18:	ldr	r0, [r1]
   11a1c:	ldr	r3, [r3]
   11a20:	ldr	r1, [pc, #1792]	; 12128 <__assert_fail@plt+0x908>
   11a24:	str	r2, [sp]
   11a28:	ldr	r2, [pc, #1788]	; 1212c <__assert_fail@plt+0x90c>
   11a2c:	bl	2204c <__assert_fail@plt+0x1082c>
   11a30:	mov	r0, r5
   11a34:	bl	11628 <exit@plt>
   11a38:	mov	r3, #1
   11a3c:	strb	r3, [fp, #52]	; 0x34
   11a40:	b	118d8 <__assert_fail@plt+0xb8>
   11a44:	strb	r4, [fp, #122]	; 0x7a
   11a48:	strb	r4, [fp, #121]	; 0x79
   11a4c:	b	118d8 <__assert_fail@plt+0xb8>
   11a50:	strb	r3, [fp, #122]	; 0x7a
   11a54:	strb	r4, [fp, #121]	; 0x79
   11a58:	b	118d8 <__assert_fail@plt+0xb8>
   11a5c:	ldr	r4, [pc, #1740]	; 12130 <__assert_fail@plt+0x910>
   11a60:	ldr	r3, [r4]
   11a64:	cmp	r8, r3
   11a68:	beq	12028 <__assert_fail@plt+0x808>
   11a6c:	cmp	r9, #0
   11a70:	beq	12054 <__assert_fail@plt+0x834>
   11a74:	ldr	r1, [pc, #1720]	; 12134 <__assert_fail@plt+0x914>
   11a78:	mov	r0, r9
   11a7c:	bl	22e9c <__assert_fail@plt+0x1167c>
   11a80:	cmp	r0, #0
   11a84:	streq	r9, [sp, #40]	; 0x28
   11a88:	beq	11ac8 <__assert_fail@plt+0x2a8>
   11a8c:	ldr	r0, [pc, #1700]	; 12138 <__assert_fail@plt+0x918>
   11a90:	bl	11598 <getenv@plt>
   11a94:	subs	r7, r0, #0
   11a98:	beq	12094 <__assert_fail@plt+0x874>
   11a9c:	ldr	r6, [pc, #1688]	; 1213c <__assert_fail@plt+0x91c>
   11aa0:	mov	r3, #4
   11aa4:	mov	r2, r6
   11aa8:	ldr	r1, [pc, #1680]	; 12140 <__assert_fail@plt+0x920>
   11aac:	bl	19bfc <__assert_fail@plt+0x83dc>
   11ab0:	cmp	r0, #0
   11ab4:	blt	11fe4 <__assert_fail@plt+0x7c4>
   11ab8:	ldr	r1, [r6, r0, lsl #2]
   11abc:	mov	r0, r5
   11ac0:	bl	1e7c0 <__assert_fail@plt+0xcfa0>
   11ac4:	str	r9, [sp, #40]	; 0x28
   11ac8:	ldr	r3, [r4]
   11acc:	str	r8, [sp, #28]
   11ad0:	mov	r8, r3
   11ad4:	mov	r2, #1
   11ad8:	str	r2, [sp, #24]
   11adc:	str	r9, [sp, #36]	; 0x24
   11ae0:	str	sl, [sp, #32]
   11ae4:	ldr	r3, [sp, #28]
   11ae8:	cmp	r8, r3
   11aec:	bge	11e48 <__assert_fail@plt+0x628>
   11af0:	ldr	r3, [sp, #20]
   11af4:	cmp	r3, #0
   11af8:	beq	11d78 <__assert_fail@plt+0x558>
   11afc:	ldr	r3, [sp, #32]
   11b00:	ldr	r1, [pc, #1596]	; 12144 <__assert_fail@plt+0x924>
   11b04:	ldr	sl, [r3, r8, lsl #2]
   11b08:	mov	r0, sl
   11b0c:	bl	1143c <strcmp@plt>
   11b10:	subs	r6, r0, #0
   11b14:	beq	11da0 <__assert_fail@plt+0x580>
   11b18:	add	r1, sp, #48	; 0x30
   11b1c:	mov	r0, sl
   11b20:	bl	11748 <statfs64@plt>
   11b24:	subs	r6, r0, #0
   11b28:	bne	11e04 <__assert_fail@plt+0x5e4>
   11b2c:	ldr	r4, [sp, #36]	; 0x24
   11b30:	mov	r0, r4
   11b34:	bl	11640 <strlen@plt>
   11b38:	add	r0, r0, #4
   11b3c:	bl	22234 <__assert_fail@plt+0x10a14>
   11b40:	ldrb	r5, [r4]
   11b44:	mov	r3, r4
   11b48:	cmp	r5, #0
   11b4c:	mov	r9, r0
   11b50:	beq	1204c <__assert_fail@plt+0x82c>
   11b54:	mov	r2, r6
   11b58:	str	r8, [sp, #44]	; 0x2c
   11b5c:	mov	r6, r2
   11b60:	mov	r8, r4
   11b64:	b	11bfc <__assert_fail@plt+0x3dc>
   11b68:	ldrb	r2, [fp, #123]	; 0x7b
   11b6c:	cmp	r2, #0
   11b70:	beq	11bc4 <__assert_fail@plt+0x3a4>
   11b74:	ldrb	r7, [r8, #1]
   11b78:	add	r4, r8, #1
   11b7c:	sub	r1, r7, #48	; 0x30
   11b80:	uxtb	r2, r1
   11b84:	cmp	r2, #7
   11b88:	addls	r2, r8, #2
   11b8c:	addls	r3, r8, #4
   11b90:	bls	11c44 <__assert_fail@plt+0x424>
   11b94:	cmp	r7, #120	; 0x78
   11b98:	beq	11eb8 <__assert_fail@plt+0x698>
   11b9c:	cmp	r7, #0
   11ba0:	bne	11e54 <__assert_fail@plt+0x634>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #1432]	; 12148 <__assert_fail@plt+0x928>
   11bac:	mov	r0, r7
   11bb0:	bl	114c0 <dcgettext@plt>
   11bb4:	mov	r1, r7
   11bb8:	mov	r2, r0
   11bbc:	mov	r0, r7
   11bc0:	bl	11574 <error@plt>
   11bc4:	ldr	r3, [pc, #1360]	; 1211c <__assert_fail@plt+0x8fc>
   11bc8:	ldr	r0, [r3]
   11bcc:	ldr	r2, [r0, #20]
   11bd0:	ldr	r1, [r0, #24]
   11bd4:	cmp	r2, r1
   11bd8:	bcs	11c34 <__assert_fail@plt+0x414>
   11bdc:	mov	r4, r8
   11be0:	add	r1, r2, #1
   11be4:	str	r1, [r0, #20]
   11be8:	strb	r5, [r2]
   11bec:	ldrb	r5, [r4, #1]
   11bf0:	add	r8, r4, #1
   11bf4:	cmp	r5, #0
   11bf8:	beq	11dd8 <__assert_fail@plt+0x5b8>
   11bfc:	cmp	r5, #37	; 0x25
   11c00:	beq	11c98 <__assert_fail@plt+0x478>
   11c04:	cmp	r5, #92	; 0x5c
   11c08:	beq	11b68 <__assert_fail@plt+0x348>
   11c0c:	ldr	r3, [pc, #1288]	; 1211c <__assert_fail@plt+0x8fc>
   11c10:	ldr	r0, [r3]
   11c14:	ldr	r2, [r0, #20]
   11c18:	ldr	r1, [r0, #24]
   11c1c:	cmp	r2, r1
   11c20:	addcc	r3, r2, #1
   11c24:	strcc	r3, [r0, #20]
   11c28:	movcc	r4, r8
   11c2c:	strbcc	r5, [r2]
   11c30:	bcc	11bec <__assert_fail@plt+0x3cc>
   11c34:	mov	r1, r5
   11c38:	bl	11724 <__overflow@plt>
   11c3c:	mov	r4, r8
   11c40:	b	11bec <__assert_fail@plt+0x3cc>
   11c44:	mov	r4, r2
   11c48:	ldrb	r0, [r2], #1
   11c4c:	sub	r0, r0, #48	; 0x30
   11c50:	uxtb	ip, r0
   11c54:	cmp	ip, #7
   11c58:	bhi	11c6c <__assert_fail@plt+0x44c>
   11c5c:	cmp	r2, r3
   11c60:	add	r1, r0, r1, lsl #3
   11c64:	mov	r4, r2
   11c68:	bne	11c44 <__assert_fail@plt+0x424>
   11c6c:	ldr	r3, [pc, #1192]	; 1211c <__assert_fail@plt+0x8fc>
   11c70:	ldr	r0, [r3]
   11c74:	ldr	r3, [r0, #20]
   11c78:	ldr	r2, [r0, #24]
   11c7c:	cmp	r3, r2
   11c80:	addcc	r2, r3, #1
   11c84:	strcc	r2, [r0, #20]
   11c88:	strbcc	r1, [r3]
   11c8c:	bcs	11fbc <__assert_fail@plt+0x79c>
   11c90:	sub	r4, r4, #1
   11c94:	b	11bec <__assert_fail@plt+0x3cc>
   11c98:	ldr	r1, [pc, #1196]	; 1214c <__assert_fail@plt+0x92c>
   11c9c:	add	r0, r8, #1
   11ca0:	bl	11814 <strspn@plt>
   11ca4:	ldr	r1, [pc, #1188]	; 12150 <__assert_fail@plt+0x930>
   11ca8:	add	r0, r0, #1
   11cac:	add	r5, r8, r0
   11cb0:	mov	r0, r5
   11cb4:	bl	11814 <strspn@plt>
   11cb8:	ldrb	r2, [r5, r0]
   11cbc:	add	r4, r5, r0
   11cc0:	cmp	r2, #46	; 0x2e
   11cc4:	bne	11cdc <__assert_fail@plt+0x4bc>
   11cc8:	add	r0, r4, #1
   11ccc:	ldr	r1, [pc, #1148]	; 12150 <__assert_fail@plt+0x930>
   11cd0:	bl	11814 <strspn@plt>
   11cd4:	add	r0, r0, #1
   11cd8:	add	r4, r4, r0
   11cdc:	ldrb	r7, [r4]
   11ce0:	sub	r5, r4, r8
   11ce4:	mov	r1, r8
   11ce8:	mov	r2, r5
   11cec:	mov	r0, r9
   11cf0:	bl	11490 <memcpy@plt>
   11cf4:	cmp	r7, #0
   11cf8:	beq	11d38 <__assert_fail@plt+0x518>
   11cfc:	cmp	r7, #37	; 0x25
   11d00:	beq	11d3c <__assert_fail@plt+0x51c>
   11d04:	add	r3, sp, #48	; 0x30
   11d08:	str	r3, [sp, #8]
   11d0c:	mvn	r3, #0
   11d10:	str	r3, [sp]
   11d14:	str	sl, [sp, #4]
   11d18:	mov	r3, r7
   11d1c:	mov	r1, r5
   11d20:	mov	r2, #0
   11d24:	mov	r0, r9
   11d28:	bl	12bb4 <__assert_fail@plt+0x1394>
   11d2c:	orr	r6, r0, r6
   11d30:	uxtb	r6, r6
   11d34:	b	11bec <__assert_fail@plt+0x3cc>
   11d38:	sub	r4, r4, #1
   11d3c:	cmp	r5, #1
   11d40:	bhi	120a4 <__assert_fail@plt+0x884>
   11d44:	ldr	r3, [pc, #976]	; 1211c <__assert_fail@plt+0x8fc>
   11d48:	ldr	r0, [r3]
   11d4c:	ldr	r2, [r0, #24]
   11d50:	ldr	r3, [r0, #20]
   11d54:	cmp	r3, r2
   11d58:	addcc	r2, r3, #1
   11d5c:	strcc	r2, [r0, #20]
   11d60:	movcc	r2, #37	; 0x25
   11d64:	strbcc	r2, [r3]
   11d68:	bcc	11bec <__assert_fail@plt+0x3cc>
   11d6c:	mov	r1, #37	; 0x25
   11d70:	bl	11724 <__overflow@plt>
   11d74:	b	11bec <__assert_fail@plt+0x3cc>
   11d78:	ldr	r3, [sp, #32]
   11d7c:	ldr	r2, [sp, #40]	; 0x28
   11d80:	ldr	r1, [sp, #36]	; 0x24
   11d84:	ldr	r0, [r3, r8, lsl #2]
   11d88:	bl	18890 <__assert_fail@plt+0x7070>
   11d8c:	ldr	r3, [sp, #24]
   11d90:	add	r8, r8, #1
   11d94:	and	r3, r3, r0
   11d98:	str	r3, [sp, #24]
   11d9c:	b	11ae4 <__assert_fail@plt+0x2c4>
   11da0:	mov	r2, #5
   11da4:	ldr	r1, [pc, #936]	; 12154 <__assert_fail@plt+0x934>
   11da8:	bl	114c0 <dcgettext@plt>
   11dac:	mov	r1, sl
   11db0:	mov	r4, r0
   11db4:	mov	r0, #4
   11db8:	bl	1f578 <__assert_fail@plt+0xdd58>
   11dbc:	mov	r2, r4
   11dc0:	mov	r1, r6
   11dc4:	mov	r3, r0
   11dc8:	mov	r0, r6
   11dcc:	bl	11574 <error@plt>
   11dd0:	mov	r0, r6
   11dd4:	b	11d8c <__assert_fail@plt+0x56c>
   11dd8:	ldr	r8, [sp, #44]	; 0x2c
   11ddc:	mov	r4, r6
   11de0:	mov	r0, r9
   11de4:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   11de8:	ldr	r3, [pc, #812]	; 1211c <__assert_fail@plt+0x8fc>
   11dec:	ldr	r1, [r3]
   11df0:	ldr	r3, [pc, #780]	; 12104 <__assert_fail@plt+0x8e4>
   11df4:	ldr	r0, [r3]
   11df8:	bl	11400 <fputs_unlocked@plt>
   11dfc:	eor	r0, r4, #1
   11e00:	b	11d8c <__assert_fail@plt+0x56c>
   11e04:	bl	1167c <__errno_location@plt>
   11e08:	mov	r2, #5
   11e0c:	ldr	r1, [pc, #836]	; 12158 <__assert_fail@plt+0x938>
   11e10:	ldr	r4, [r0]
   11e14:	mov	r0, #0
   11e18:	bl	114c0 <dcgettext@plt>
   11e1c:	mov	r1, sl
   11e20:	mov	r5, r0
   11e24:	mov	r0, #4
   11e28:	bl	1f578 <__assert_fail@plt+0xdd58>
   11e2c:	mov	r2, r5
   11e30:	mov	r1, r4
   11e34:	mov	r3, r0
   11e38:	mov	r0, #0
   11e3c:	bl	11574 <error@plt>
   11e40:	mov	r0, #0
   11e44:	b	11d8c <__assert_fail@plt+0x56c>
   11e48:	ldr	r3, [sp, #24]
   11e4c:	eor	r0, r3, #1
   11e50:	bl	11628 <exit@plt>
   11e54:	cmp	r7, #101	; 0x65
   11e58:	beq	11fb4 <__assert_fail@plt+0x794>
   11e5c:	bls	11f68 <__assert_fail@plt+0x748>
   11e60:	cmp	r7, #114	; 0x72
   11e64:	moveq	r7, #13
   11e68:	beq	11e88 <__assert_fail@plt+0x668>
   11e6c:	bhi	11fc8 <__assert_fail@plt+0x7a8>
   11e70:	cmp	r7, #102	; 0x66
   11e74:	moveq	r7, #12
   11e78:	beq	11e88 <__assert_fail@plt+0x668>
   11e7c:	cmp	r7, #110	; 0x6e
   11e80:	moveq	r7, #10
   11e84:	bne	11f8c <__assert_fail@plt+0x76c>
   11e88:	ldr	r3, [pc, #652]	; 1211c <__assert_fail@plt+0x8fc>
   11e8c:	ldr	r0, [r3]
   11e90:	ldr	r3, [r0, #20]
   11e94:	ldr	r2, [r0, #24]
   11e98:	cmp	r3, r2
   11e9c:	addcc	r2, r3, #1
   11ea0:	strcc	r2, [r0, #20]
   11ea4:	strbcc	r7, [r3]
   11ea8:	bcc	11bec <__assert_fail@plt+0x3cc>
   11eac:	mov	r1, r7
   11eb0:	bl	11724 <__overflow@plt>
   11eb4:	b	11bec <__assert_fail@plt+0x3cc>
   11eb8:	bl	11610 <__ctype_b_loc@plt>
   11ebc:	ldrb	r1, [r8, #2]
   11ec0:	lsl	ip, r1, #1
   11ec4:	ldr	r2, [r0]
   11ec8:	ldrh	r0, [r2, ip]
   11ecc:	tst	r0, #4096	; 0x1000
   11ed0:	beq	11f8c <__assert_fail@plt+0x76c>
   11ed4:	sub	r0, r1, #97	; 0x61
   11ed8:	cmp	r0, #5
   11edc:	subls	r1, r1, #87	; 0x57
   11ee0:	bls	11ef4 <__assert_fail@plt+0x6d4>
   11ee4:	sub	r0, r1, #65	; 0x41
   11ee8:	cmp	r0, #5
   11eec:	subls	r1, r1, #55	; 0x37
   11ef0:	subhi	r1, r1, #48	; 0x30
   11ef4:	ldrb	r0, [r8, #3]
   11ef8:	lsl	ip, r0, #1
   11efc:	ldrh	r2, [r2, ip]
   11f00:	tst	r2, #4096	; 0x1000
   11f04:	addeq	r4, r8, #2
   11f08:	beq	11f38 <__assert_fail@plt+0x718>
   11f0c:	sub	r2, r0, #97	; 0x61
   11f10:	cmp	r2, #5
   11f14:	add	r4, r8, #3
   11f18:	lsl	r1, r1, #4
   11f1c:	subls	r0, r0, #87	; 0x57
   11f20:	bls	11f34 <__assert_fail@plt+0x714>
   11f24:	sub	r3, r0, #65	; 0x41
   11f28:	cmp	r3, #5
   11f2c:	subls	r0, r0, #55	; 0x37
   11f30:	subhi	r0, r0, #48	; 0x30
   11f34:	add	r1, r1, r0
   11f38:	ldr	r3, [pc, #476]	; 1211c <__assert_fail@plt+0x8fc>
   11f3c:	ldr	r0, [r3]
   11f40:	ldr	r3, [r0, #20]
   11f44:	ldr	r2, [r0, #24]
   11f48:	cmp	r3, r2
   11f4c:	addcc	r2, r3, #1
   11f50:	strcc	r2, [r0, #20]
   11f54:	strbcc	r1, [r3]
   11f58:	bcc	11bec <__assert_fail@plt+0x3cc>
   11f5c:	uxtb	r1, r1
   11f60:	bl	11724 <__overflow@plt>
   11f64:	b	11bec <__assert_fail@plt+0x3cc>
   11f68:	cmp	r7, #92	; 0x5c
   11f6c:	beq	11e88 <__assert_fail@plt+0x668>
   11f70:	bls	12088 <__assert_fail@plt+0x868>
   11f74:	cmp	r7, #97	; 0x61
   11f78:	moveq	r7, #7
   11f7c:	beq	11e88 <__assert_fail@plt+0x668>
   11f80:	cmp	r7, #98	; 0x62
   11f84:	moveq	r7, #8
   11f88:	beq	11e88 <__assert_fail@plt+0x668>
   11f8c:	mov	r2, #5
   11f90:	ldr	r1, [pc, #452]	; 1215c <__assert_fail@plt+0x93c>
   11f94:	mov	r0, #0
   11f98:	bl	114c0 <dcgettext@plt>
   11f9c:	mov	r1, #0
   11fa0:	mov	r3, r7
   11fa4:	mov	r2, r0
   11fa8:	mov	r0, r1
   11fac:	bl	11574 <error@plt>
   11fb0:	b	11e88 <__assert_fail@plt+0x668>
   11fb4:	mov	r7, #27
   11fb8:	b	11e88 <__assert_fail@plt+0x668>
   11fbc:	uxtb	r1, r1
   11fc0:	bl	11724 <__overflow@plt>
   11fc4:	b	11c90 <__assert_fail@plt+0x470>
   11fc8:	cmp	r7, #116	; 0x74
   11fcc:	moveq	r7, #9
   11fd0:	beq	11e88 <__assert_fail@plt+0x668>
   11fd4:	cmp	r7, #118	; 0x76
   11fd8:	moveq	r7, #11
   11fdc:	beq	11e88 <__assert_fail@plt+0x668>
   11fe0:	b	11f8c <__assert_fail@plt+0x76c>
   11fe4:	mov	r1, #4
   11fe8:	mov	r0, r5
   11fec:	bl	1e7c0 <__assert_fail@plt+0xcfa0>
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #356]	; 12160 <__assert_fail@plt+0x940>
   11ff8:	mov	r0, r5
   11ffc:	bl	114c0 <dcgettext@plt>
   12000:	mov	r6, r0
   12004:	mov	r0, r7
   12008:	bl	20ee8 <__assert_fail@plt+0xf6c8>
   1200c:	mov	r2, r6
   12010:	mov	r1, r5
   12014:	mov	r3, r0
   12018:	mov	r0, r5
   1201c:	bl	11574 <error@plt>
   12020:	str	r9, [sp, #40]	; 0x28
   12024:	b	11ac8 <__assert_fail@plt+0x2a8>
   12028:	mov	r2, #5
   1202c:	ldr	r1, [pc, #304]	; 12164 <__assert_fail@plt+0x944>
   12030:	mov	r0, r5
   12034:	bl	114c0 <dcgettext@plt>
   12038:	mov	r1, r5
   1203c:	mov	r2, r0
   12040:	mov	r0, r5
   12044:	bl	11574 <error@plt>
   12048:	b	11960 <__assert_fail@plt+0x140>
   1204c:	mov	r4, r5
   12050:	b	11de0 <__assert_fail@plt+0x5c0>
   12054:	ldr	r6, [sp, #24]
   12058:	ldr	r5, [sp, #20]
   1205c:	mov	r2, r9
   12060:	mov	r1, r6
   12064:	mov	r0, r5
   12068:	bl	123cc <__assert_fail@plt+0xbac>
   1206c:	mov	r1, r6
   12070:	mov	r2, #1
   12074:	mov	r9, r0
   12078:	mov	r0, r5
   1207c:	bl	123cc <__assert_fail@plt+0xbac>
   12080:	str	r0, [sp, #40]	; 0x28
   12084:	b	11ac8 <__assert_fail@plt+0x2a8>
   12088:	cmp	r7, #34	; 0x22
   1208c:	beq	11e88 <__assert_fail@plt+0x668>
   12090:	b	11f8c <__assert_fail@plt+0x76c>
   12094:	mov	r1, #4
   12098:	bl	1e7c0 <__assert_fail@plt+0xcfa0>
   1209c:	str	r9, [sp, #40]	; 0x28
   120a0:	b	11ac8 <__assert_fail@plt+0x2a8>
   120a4:	mov	r3, r9
   120a8:	mov	r4, #0
   120ac:	strb	r7, [r3, r5]!
   120b0:	mov	r2, #5
   120b4:	ldr	r1, [pc, #172]	; 12168 <__assert_fail@plt+0x948>
   120b8:	strb	r4, [r3, #1]
   120bc:	mov	r0, r4
   120c0:	bl	114c0 <dcgettext@plt>
   120c4:	mov	r5, r0
   120c8:	mov	r0, r9
   120cc:	bl	20ee8 <__assert_fail@plt+0xf6c8>
   120d0:	mov	r2, r5
   120d4:	mov	r1, r4
   120d8:	mov	r3, r0
   120dc:	mov	r0, #1
   120e0:	bl	11574 <error@plt>
   120e4:	andeq	r4, r2, r8, asr r9
   120e8:	andeq	r5, r2, r4, lsr #29
   120ec:	strdeq	r5, [r2], -r8
   120f0:	andeq	r4, r2, r0, lsr #11
   120f4:	andeq	r5, r2, r0, lsr #29
   120f8:	strdeq	r7, [r3], -r0
   120fc:	ldrdeq	r5, [r2], -r8
   12100:	ldrdeq	sl, [r1], -r4
   12104:	andeq	r7, r3, r0, lsl #3
   12108:	andeq	r7, r3, r8, ror #3
   1210c:	andeq	r7, r3, r8, lsl #3
   12110:	andeq	r4, r2, ip, ror #13
   12114:			; <UNDEFINED> instruction: 0x00025ebc
   12118:	andeq	r5, r2, r8, lsl #21
   1211c:	andeq	r7, r3, r4, ror #3
   12120:	andeq	r7, r3, r4, lsl #3
   12124:	andeq	r5, r2, r8, asr #29
   12128:	andeq	r4, r2, ip, asr pc
   1212c:	strdeq	r5, [r2], -r4
   12130:	ldrdeq	r7, [r3], -r8
   12134:	strdeq	r5, [r2], -r0
   12138:	strdeq	r5, [r2], -r4
   1213c:	andeq	r6, r2, r8, lsr r3
   12140:	andeq	r6, r2, r0, ror #6
   12144:	andeq	r4, r2, ip, lsl #28
   12148:	andeq	r4, r2, r4, lsl pc
   1214c:	andeq	r4, r2, ip, lsr #12
   12150:	andeq	r4, r2, r4, lsr r6
   12154:	andeq	r5, r2, r8, asr #30
   12158:	andeq	r5, r2, ip, lsl #31
   1215c:	andeq	r4, r2, r8, lsr pc
   12160:	andeq	r5, r2, r4, lsl #30
   12164:	andeq	r5, r2, r0, ror #29
   12168:	strdeq	r4, [r2], -ip
   1216c:	mov	fp, #0
   12170:	mov	lr, #0
   12174:	pop	{r1}		; (ldr r1, [sp], #4)
   12178:	mov	r2, sp
   1217c:	push	{r2}		; (str r2, [sp, #-4]!)
   12180:	push	{r0}		; (str r0, [sp, #-4]!)
   12184:	ldr	ip, [pc, #16]	; 1219c <__assert_fail@plt+0x97c>
   12188:	push	{ip}		; (str ip, [sp, #-4]!)
   1218c:	ldr	r0, [pc, #12]	; 121a0 <__assert_fail@plt+0x980>
   12190:	ldr	r3, [pc, #12]	; 121a4 <__assert_fail@plt+0x984>
   12194:	bl	115bc <__libc_start_main@plt>
   12198:	bl	117f0 <abort@plt>
   1219c:	andeq	r4, r2, r8, ror r5
   121a0:	andeq	r1, r1, r4, asr r8
   121a4:	andeq	r4, r2, r8, lsl r5
   121a8:	ldr	r3, [pc, #20]	; 121c4 <__assert_fail@plt+0x9a4>
   121ac:	ldr	r2, [pc, #20]	; 121c8 <__assert_fail@plt+0x9a8>
   121b0:	add	r3, pc, r3
   121b4:	ldr	r2, [r3, r2]
   121b8:	cmp	r2, #0
   121bc:	bxeq	lr
   121c0:	b	115f8 <__gmon_start__@plt>
   121c4:	andeq	r4, r2, r8, asr #28
   121c8:	andeq	r0, r0, r4, ror r1
   121cc:	ldr	r3, [pc, #28]	; 121f0 <__assert_fail@plt+0x9d0>
   121d0:	ldr	r0, [pc, #28]	; 121f4 <__assert_fail@plt+0x9d4>
   121d4:	sub	r3, r3, r0
   121d8:	cmp	r3, #6
   121dc:	bxls	lr
   121e0:	ldr	r3, [pc, #16]	; 121f8 <__assert_fail@plt+0x9d8>
   121e4:	cmp	r3, #0
   121e8:	bxeq	lr
   121ec:	bx	r3
   121f0:	ldrdeq	r7, [r3], -r3
   121f4:	ldrdeq	r7, [r3], -r0
   121f8:	andeq	r0, r0, r0
   121fc:	ldr	r1, [pc, #36]	; 12228 <__assert_fail@plt+0xa08>
   12200:	ldr	r0, [pc, #36]	; 1222c <__assert_fail@plt+0xa0c>
   12204:	sub	r1, r1, r0
   12208:	asr	r1, r1, #2
   1220c:	add	r1, r1, r1, lsr #31
   12210:	asrs	r1, r1, #1
   12214:	bxeq	lr
   12218:	ldr	r3, [pc, #16]	; 12230 <__assert_fail@plt+0xa10>
   1221c:	cmp	r3, #0
   12220:	bxeq	lr
   12224:	bx	r3
   12228:	ldrdeq	r7, [r3], -r0
   1222c:	ldrdeq	r7, [r3], -r0
   12230:	andeq	r0, r0, r0
   12234:	push	{r4, lr}
   12238:	ldr	r4, [pc, #24]	; 12258 <__assert_fail@plt+0xa38>
   1223c:	ldrb	r3, [r4]
   12240:	cmp	r3, #0
   12244:	popne	{r4, pc}
   12248:	bl	121cc <__assert_fail@plt+0x9ac>
   1224c:	mov	r3, #1
   12250:	strb	r3, [r4]
   12254:	pop	{r4, pc}
   12258:	andeq	r7, r3, ip, ror #3
   1225c:	ldr	r0, [pc, #40]	; 1228c <__assert_fail@plt+0xa6c>
   12260:	ldr	r3, [r0]
   12264:	cmp	r3, #0
   12268:	bne	12270 <__assert_fail@plt+0xa50>
   1226c:	b	121fc <__assert_fail@plt+0x9dc>
   12270:	ldr	r3, [pc, #24]	; 12290 <__assert_fail@plt+0xa70>
   12274:	cmp	r3, #0
   12278:	beq	1226c <__assert_fail@plt+0xa4c>
   1227c:	push	{r4, lr}
   12280:	blx	r3
   12284:	pop	{r4, lr}
   12288:	b	121fc <__assert_fail@plt+0x9dc>
   1228c:	andeq	r6, r3, ip, lsl #30
	...
   12298:	push	{r4, r5, r6, r7, lr}
   1229c:	mov	r5, r0
   122a0:	ldr	r4, [pc, #280]	; 123c0 <__assert_fail@plt+0xba0>
   122a4:	sub	sp, sp, #212	; 0xd4
   122a8:	ldrb	r0, [r4]
   122ac:	cmp	r0, #0
   122b0:	beq	12370 <__assert_fail@plt+0xb50>
   122b4:	mov	r2, sp
   122b8:	mov	r1, r5
   122bc:	mov	r0, #3
   122c0:	bl	117cc <__xstat64@plt>
   122c4:	cmp	r0, #0
   122c8:	bne	12364 <__assert_fail@plt+0xb44>
   122cc:	ldr	r4, [r4, #4]
   122d0:	cmp	r4, #0
   122d4:	beq	12364 <__assert_fail@plt+0xb44>
   122d8:	mov	r6, #3
   122dc:	b	122ec <__assert_fail@plt+0xacc>
   122e0:	ldr	r4, [r4, #28]
   122e4:	cmp	r4, #0
   122e8:	beq	12364 <__assert_fail@plt+0xb44>
   122ec:	ldrb	r3, [r4, #24]
   122f0:	tst	r3, #1
   122f4:	beq	122e0 <__assert_fail@plt+0xac0>
   122f8:	ldr	r7, [r4]
   122fc:	ldrb	r3, [r7]
   12300:	cmp	r3, #47	; 0x2f
   12304:	bne	122e0 <__assert_fail@plt+0xac0>
   12308:	mov	r1, r5
   1230c:	ldr	r0, [r4, #4]
   12310:	bl	1143c <strcmp@plt>
   12314:	cmp	r0, #0
   12318:	bne	122e0 <__assert_fail@plt+0xac0>
   1231c:	mov	r1, r7
   12320:	add	r2, sp, #104	; 0x68
   12324:	mov	r0, r6
   12328:	bl	117cc <__xstat64@plt>
   1232c:	cmp	r0, #0
   12330:	bne	122e0 <__assert_fail@plt+0xac0>
   12334:	ldrd	r0, [sp, #96]	; 0x60
   12338:	ldrd	r2, [sp, #200]	; 0xc8
   1233c:	cmp	r1, r3
   12340:	cmpeq	r0, r2
   12344:	bne	122e0 <__assert_fail@plt+0xac0>
   12348:	ldrd	r0, [sp]
   1234c:	ldrd	r2, [sp, #104]	; 0x68
   12350:	cmp	r1, r3
   12354:	cmpeq	r0, r2
   12358:	bne	122e0 <__assert_fail@plt+0xac0>
   1235c:	ldr	r0, [r4]
   12360:	b	12368 <__assert_fail@plt+0xb48>
   12364:	mov	r0, #0
   12368:	add	sp, sp, #212	; 0xd4
   1236c:	pop	{r4, r5, r6, r7, pc}
   12370:	bl	1a978 <__assert_fail@plt+0x9158>
   12374:	cmp	r0, #0
   12378:	mov	r6, r0
   1237c:	str	r0, [r4, #4]
   12380:	beq	12390 <__assert_fail@plt+0xb70>
   12384:	mov	r3, #1
   12388:	strb	r3, [r4]
   1238c:	b	122b4 <__assert_fail@plt+0xa94>
   12390:	bl	1167c <__errno_location@plt>
   12394:	mov	r2, #5
   12398:	ldr	r1, [pc, #36]	; 123c4 <__assert_fail@plt+0xba4>
   1239c:	ldr	r7, [r0]
   123a0:	mov	r0, r6
   123a4:	bl	114c0 <dcgettext@plt>
   123a8:	mov	r1, r7
   123ac:	ldr	r2, [pc, #20]	; 123c8 <__assert_fail@plt+0xba8>
   123b0:	mov	r3, r0
   123b4:	mov	r0, r6
   123b8:	bl	11574 <error@plt>
   123bc:	b	12384 <__assert_fail@plt+0xb64>
   123c0:	strdeq	r7, [r3], -r0
   123c4:	muleq	r2, r8, r7
   123c8:	andeq	r5, r2, ip, lsr #25
   123cc:	cmp	r0, #0
   123d0:	push	{r4, r5, r6, lr}
   123d4:	mov	r4, r1
   123d8:	beq	123f0 <__assert_fail@plt+0xbd0>
   123dc:	cmp	r1, #0
   123e0:	beq	12500 <__assert_fail@plt+0xce0>
   123e4:	ldr	r0, [pc, #312]	; 12524 <__assert_fail@plt+0xd04>
   123e8:	pop	{r4, r5, r6, lr}
   123ec:	b	22844 <__assert_fail@plt+0x11024>
   123f0:	cmp	r1, #0
   123f4:	beq	12410 <__assert_fail@plt+0xbf0>
   123f8:	bl	11430 <is_selinux_enabled@plt>
   123fc:	cmp	r0, #0
   12400:	ble	12518 <__assert_fail@plt+0xcf8>
   12404:	ldr	r0, [pc, #284]	; 12528 <__assert_fail@plt+0xd08>
   12408:	pop	{r4, r5, r6, lr}
   1240c:	b	22844 <__assert_fail@plt+0x11024>
   12410:	ldr	r1, [pc, #276]	; 1252c <__assert_fail@plt+0xd0c>
   12414:	mov	r5, r2
   12418:	mov	r2, #5
   1241c:	bl	114c0 <dcgettext@plt>
   12420:	bl	22844 <__assert_fail@plt+0x11024>
   12424:	cmp	r5, #0
   12428:	movne	r2, #5
   1242c:	ldrne	r1, [pc, #252]	; 12530 <__assert_fail@plt+0xd10>
   12430:	moveq	r2, #5
   12434:	ldreq	r1, [pc, #248]	; 12534 <__assert_fail@plt+0xd14>
   12438:	mov	r6, r0
   1243c:	movne	r0, r4
   12440:	moveq	r0, r5
   12444:	bl	114c0 <dcgettext@plt>
   12448:	mov	r1, r6
   1244c:	mov	r2, r0
   12450:	ldr	r0, [pc, #224]	; 12538 <__assert_fail@plt+0xd18>
   12454:	bl	228f0 <__assert_fail@plt+0x110d0>
   12458:	mov	r5, r0
   1245c:	mov	r0, r6
   12460:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   12464:	mov	r2, #5
   12468:	ldr	r1, [pc, #204]	; 1253c <__assert_fail@plt+0xd1c>
   1246c:	mov	r0, #0
   12470:	bl	114c0 <dcgettext@plt>
   12474:	mov	r1, r5
   12478:	mov	r2, r0
   1247c:	ldr	r0, [pc, #180]	; 12538 <__assert_fail@plt+0xd18>
   12480:	bl	228f0 <__assert_fail@plt+0x110d0>
   12484:	mov	r4, r0
   12488:	mov	r0, r5
   1248c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   12490:	bl	11430 <is_selinux_enabled@plt>
   12494:	cmp	r0, #0
   12498:	ble	124cc <__assert_fail@plt+0xcac>
   1249c:	mov	r2, #5
   124a0:	ldr	r1, [pc, #152]	; 12540 <__assert_fail@plt+0xd20>
   124a4:	mov	r0, #0
   124a8:	bl	114c0 <dcgettext@plt>
   124ac:	mov	r1, r4
   124b0:	mov	r2, r0
   124b4:	ldr	r0, [pc, #124]	; 12538 <__assert_fail@plt+0xd18>
   124b8:	bl	228f0 <__assert_fail@plt+0x110d0>
   124bc:	mov	r5, r0
   124c0:	mov	r0, r4
   124c4:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   124c8:	mov	r4, r5
   124cc:	mov	r2, #5
   124d0:	ldr	r1, [pc, #108]	; 12544 <__assert_fail@plt+0xd24>
   124d4:	mov	r0, #0
   124d8:	bl	114c0 <dcgettext@plt>
   124dc:	mov	r1, r4
   124e0:	mov	r2, r0
   124e4:	ldr	r0, [pc, #76]	; 12538 <__assert_fail@plt+0xd18>
   124e8:	bl	228f0 <__assert_fail@plt+0x110d0>
   124ec:	mov	r5, r0
   124f0:	mov	r0, r4
   124f4:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   124f8:	mov	r0, r5
   124fc:	pop	{r4, r5, r6, pc}
   12500:	mov	r0, r1
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #56]	; 12548 <__assert_fail@plt+0xd28>
   1250c:	bl	114c0 <dcgettext@plt>
   12510:	pop	{r4, r5, r6, lr}
   12514:	b	22844 <__assert_fail@plt+0x11024>
   12518:	ldr	r0, [pc, #44]	; 1254c <__assert_fail@plt+0xd2c>
   1251c:	pop	{r4, r5, r6, lr}
   12520:	b	22844 <__assert_fail@plt+0x11024>
   12524:	andeq	r4, r2, r0, lsr #11
   12528:	andeq	r4, r2, r4, asr #11
   1252c:	andeq	r4, r2, r0, ror r8
   12530:	andeq	r4, r2, ip, lsr #17
   12534:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   12538:	andeq	r4, r2, ip, ror #17
   1253c:	andeq	r4, r2, r0, lsr #18
   12540:	andeq	r4, r2, ip, asr r9
   12544:	andeq	r4, r2, ip, ror #18
   12548:	andeq	r4, r2, r4, asr #15
   1254c:	strdeq	r4, [r2], -r8
   12550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12554:	sub	sp, sp, #52	; 0x34
   12558:	mov	r4, r1
   1255c:	add	r1, sp, #48	; 0x30
   12560:	mov	r8, r0
   12564:	stmdb	r1, {r2, r3}
   12568:	mov	r1, #46	; 0x2e
   1256c:	mov	r2, r4
   12570:	str	r0, [sp, #20]
   12574:	bl	116dc <memchr@plt>
   12578:	ldr	r7, [sp, #40]	; 0x28
   1257c:	ldr	r6, [sp, #44]	; 0x2c
   12580:	subs	r5, r0, #0
   12584:	beq	12910 <__assert_fail@plt+0x10f0>
   12588:	mov	sl, #0
   1258c:	strb	sl, [r8, r4]
   12590:	ldrb	r3, [r5, #1]
   12594:	sub	r4, r5, r8
   12598:	sub	r3, r3, #48	; 0x30
   1259c:	cmp	r3, #9
   125a0:	bls	128f8 <__assert_fail@plt+0x10d8>
   125a4:	ldrb	r3, [r5, #-1]
   125a8:	sub	r3, r3, #48	; 0x30
   125ac:	cmp	r3, #9
   125b0:	movls	r3, #9
   125b4:	strls	r3, [sp, #16]
   125b8:	bhi	12ae8 <__assert_fail@plt+0x12c8>
   125bc:	mov	r2, r5
   125c0:	mov	r3, #0
   125c4:	strb	r3, [r2], #-1
   125c8:	mov	r5, r2
   125cc:	ldrb	r3, [r2, #-1]!
   125d0:	sub	r3, r3, #48	; 0x30
   125d4:	cmp	r3, #9
   125d8:	bls	125c8 <__assert_fail@plt+0xda8>
   125dc:	mov	r2, #10
   125e0:	mov	r1, #0
   125e4:	mov	r0, r5
   125e8:	bl	11448 <strtol@plt>
   125ec:	cmp	r0, #1
   125f0:	mov	sl, r0
   125f4:	ble	12afc <__assert_fail@plt+0x12dc>
   125f8:	ldr	r2, [pc, #1424]	; 12b90 <__assert_fail@plt+0x1370>
   125fc:	ldrb	r3, [r5]
   12600:	ldr	r1, [sp, #20]
   12604:	ldr	r2, [r2, #8]
   12608:	cmp	r3, #48	; 0x30
   1260c:	movne	r3, r5
   12610:	addeq	r3, r5, #1
   12614:	cmp	r2, r0
   12618:	sub	r4, r3, r1
   1261c:	bcs	12afc <__assert_fail@plt+0x12dc>
   12620:	sub	r2, r0, r2
   12624:	cmp	r2, #1
   12628:	ble	12afc <__assert_fail@plt+0x12dc>
   1262c:	ldr	r0, [sp, #16]
   12630:	sub	ip, r2, r0
   12634:	cmp	ip, #1
   12638:	ble	12b64 <__assert_fail@plt+0x1344>
   1263c:	cmp	r1, r3
   12640:	bcs	12b70 <__assert_fail@plt+0x1350>
   12644:	sub	r3, r3, #1
   12648:	sub	r2, r1, #1
   1264c:	mov	r0, r1
   12650:	mov	lr, #0
   12654:	mov	r4, #1
   12658:	ldrb	r1, [r2, #1]!
   1265c:	cmp	r1, #45	; 0x2d
   12660:	strbne	r1, [r0]
   12664:	moveq	lr, r4
   12668:	addne	r0, r0, #1
   1266c:	cmp	r2, r3
   12670:	bne	12658 <__assert_fail@plt+0xe38>
   12674:	ldr	r3, [sp, #20]
   12678:	cmp	lr, #0
   1267c:	sub	r4, r0, r3
   12680:	movne	r0, #0
   12684:	beq	12b78 <__assert_fail@plt+0x1358>
   12688:	ldr	r3, [sp, #16]
   1268c:	add	r4, r0, r4
   12690:	str	sl, [sp, #28]
   12694:	cmp	r3, #8
   12698:	movgt	r5, #1
   1269c:	ble	1291c <__assert_fail@plt+0x10fc>
   126a0:	mov	r1, r5
   126a4:	mov	r0, r6
   126a8:	bl	240cc <__assert_fail@plt+0x128ac>
   126ac:	adds	r3, r6, #0
   126b0:	movne	r3, #1
   126b4:	ands	r3, r3, r7, lsr #31
   126b8:	mov	r8, r0
   126bc:	str	r0, [sp, #24]
   126c0:	beq	12938 <__assert_fail@plt+0x1118>
   126c4:	mov	r1, r5
   126c8:	ldr	r0, [pc, #1220]	; 12b94 <__assert_fail@plt+0x1374>
   126cc:	bl	240cc <__assert_fail@plt+0x128ac>
   126d0:	mov	r1, r5
   126d4:	sub	r5, r0, r8
   126d8:	mov	r0, r6
   126dc:	bl	242ec <__assert_fail@plt+0x12acc>
   126e0:	cmp	r1, #0
   126e4:	subne	r5, r5, #1
   126e8:	cmp	r5, #0
   126ec:	addne	r7, r7, #1
   126f0:	cmp	r7, #0
   126f4:	str	r5, [sp, #24]
   126f8:	bne	12938 <__assert_fail@plt+0x1118>
   126fc:	ldr	r3, [sp, #20]
   12700:	add	r4, r3, r4
   12704:	add	r6, r3, #1
   12708:	cmp	r6, r4
   1270c:	bcs	12868 <__assert_fail@plt+0x1048>
   12710:	ldr	fp, [pc, #1152]	; 12b98 <__assert_fail@plt+0x1378>
   12714:	ldr	sl, [pc, #1152]	; 12b9c <__assert_fail@plt+0x137c>
   12718:	mov	r9, r6
   1271c:	b	1273c <__assert_fail@plt+0xf1c>
   12720:	bl	1164c <strchr@plt>
   12724:	mov	r9, r8
   12728:	cmp	r0, #0
   1272c:	strbne	r5, [r6]
   12730:	addne	r6, r6, #1
   12734:	cmp	r4, r8
   12738:	bls	12868 <__assert_fail@plt+0x1048>
   1273c:	mov	r8, r9
   12740:	mov	r0, fp
   12744:	ldrb	r5, [r8], #1
   12748:	mov	r7, r9
   1274c:	mov	r1, r5
   12750:	bl	1164c <strchr@plt>
   12754:	mov	r1, r5
   12758:	cmp	r0, #0
   1275c:	mov	r0, sl
   12760:	bne	12720 <__assert_fail@plt+0xf00>
   12764:	cmp	r4, r9
   12768:	bls	12868 <__assert_fail@plt+0x1048>
   1276c:	add	r1, r6, #4
   12770:	cmp	r1, r9
   12774:	movhi	ip, #0
   12778:	movls	ip, #1
   1277c:	add	r1, r9, #4
   12780:	sub	r0, r4, r8
   12784:	cmp	r6, r1
   12788:	movcc	r1, ip
   1278c:	orrcs	r1, ip, #1
   12790:	add	r0, r0, #1
   12794:	cmp	r0, #11
   12798:	movls	r1, #0
   1279c:	andhi	r1, r1, #1
   127a0:	cmp	r1, #0
   127a4:	mov	sl, r8
   127a8:	beq	12b20 <__assert_fail@plt+0x1300>
   127ac:	rsb	r1, r9, #0
   127b0:	ands	r1, r1, #3
   127b4:	beq	12b08 <__assert_fail@plt+0x12e8>
   127b8:	cmp	r1, #1
   127bc:	strb	r5, [r6]
   127c0:	add	r7, r6, #1
   127c4:	beq	127ec <__assert_fail@plt+0xfcc>
   127c8:	ldrb	ip, [r9, #1]
   127cc:	cmp	r1, #3
   127d0:	add	r7, r6, #2
   127d4:	strb	ip, [r6, #1]
   127d8:	add	sl, r9, #2
   127dc:	ldrbeq	ip, [r9, #2]
   127e0:	addeq	r7, r6, #3
   127e4:	addeq	sl, r9, #3
   127e8:	strbeq	ip, [r6, #2]
   127ec:	sub	r0, r0, r1
   127f0:	sub	ip, r0, #4
   127f4:	add	r3, r9, r1
   127f8:	lsr	ip, ip, #2
   127fc:	add	ip, ip, #1
   12800:	add	r1, r6, r1
   12804:	lsl	lr, ip, #2
   12808:	mov	r5, #0
   1280c:	add	r5, r5, #1
   12810:	ldr	r2, [r3], #4
   12814:	cmp	ip, r5
   12818:	str	r2, [r1], #4
   1281c:	bhi	1280c <__assert_fail@plt+0xfec>
   12820:	cmp	r0, lr
   12824:	add	r3, r7, lr
   12828:	add	lr, sl, lr
   1282c:	beq	1285c <__assert_fail@plt+0x103c>
   12830:	ldrb	r1, [sl, ip, lsl #2]
   12834:	add	r0, lr, #1
   12838:	cmp	r4, r0
   1283c:	strb	r1, [r7, ip, lsl #2]
   12840:	bls	1285c <__assert_fail@plt+0x103c>
   12844:	ldrb	r1, [lr, #1]
   12848:	add	r0, lr, #2
   1284c:	cmp	r4, r0
   12850:	strb	r1, [r3, #1]
   12854:	ldrbhi	r1, [lr, #2]
   12858:	strbhi	r1, [r3, #2]
   1285c:	add	r4, r4, #1
   12860:	sub	r2, r4, r8
   12864:	add	r6, r6, r2
   12868:	ldr	r0, [pc, #816]	; 12ba0 <__assert_fail@plt+0x1380>
   1286c:	ldr	r1, [sp, #20]
   12870:	mov	r2, #0
   12874:	ldr	r0, [r0]
   12878:	ldr	r3, [pc, #804]	; 12ba4 <__assert_fail@plt+0x1384>
   1287c:	str	r0, [r6]
   12880:	mov	r0, #1
   12884:	bl	116b8 <__printf_chk@plt>
   12888:	ldr	r2, [sp, #16]
   1288c:	cmp	r2, #0
   12890:	mov	r3, r2
   12894:	beq	128f0 <__assert_fail@plt+0x10d0>
   12898:	bic	r0, r0, r0, asr #31
   1289c:	ldr	r1, [sp, #28]
   128a0:	cmp	r2, #9
   128a4:	movge	r3, #9
   128a8:	cmp	r0, r1
   128ac:	sub	r8, r2, r3
   128b0:	bge	12ad0 <__assert_fail@plt+0x12b0>
   128b4:	ldr	r2, [pc, #724]	; 12b90 <__assert_fail@plt+0x1370>
   128b8:	sub	r0, r1, r0
   128bc:	ldr	r1, [r2, #8]
   128c0:	cmp	r0, r1
   128c4:	movls	r1, #0
   128c8:	bhi	12adc <__assert_fail@plt+0x12bc>
   128cc:	ldr	r2, [r2, #12]
   128d0:	stmib	sp, {r1, r8}
   128d4:	ldr	r1, [sp, #24]
   128d8:	mov	r0, #0
   128dc:	str	r1, [sp]
   128e0:	str	r0, [sp, #12]
   128e4:	ldr	r1, [pc, #700]	; 12ba8 <__assert_fail@plt+0x1388>
   128e8:	mov	r0, #1
   128ec:	bl	116b8 <__printf_chk@plt>
   128f0:	add	sp, sp, #52	; 0x34
   128f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128f8:	mov	r2, #10
   128fc:	mov	r1, sl
   12900:	add	r0, r5, #1
   12904:	bl	11448 <strtol@plt>
   12908:	cmp	r0, #0
   1290c:	bne	12b50 <__assert_fail@plt+0x1330>
   12910:	mov	r3, #0
   12914:	str	r3, [sp, #16]
   12918:	str	r3, [sp, #28]
   1291c:	mov	r5, #1
   12920:	add	r5, r5, r5, lsl #2
   12924:	add	r3, r3, #1
   12928:	cmp	r3, #9
   1292c:	lsl	r5, r5, #1
   12930:	bne	12920 <__assert_fail@plt+0x1100>
   12934:	b	126a0 <__assert_fail@plt+0xe80>
   12938:	ldr	r3, [sp, #20]
   1293c:	mov	r2, r7
   12940:	add	r4, r3, r4
   12944:	add	r6, r3, #1
   12948:	asr	r3, r7, #31
   1294c:	cmp	r6, r4
   12950:	strd	r2, [sp, #32]
   12954:	bcs	12ab0 <__assert_fail@plt+0x1290>
   12958:	ldr	fp, [pc, #568]	; 12b98 <__assert_fail@plt+0x1378>
   1295c:	ldr	sl, [pc, #568]	; 12b9c <__assert_fail@plt+0x137c>
   12960:	mov	r9, r6
   12964:	b	12984 <__assert_fail@plt+0x1164>
   12968:	bl	1164c <strchr@plt>
   1296c:	mov	r9, r8
   12970:	cmp	r0, #0
   12974:	strbne	r5, [r6]
   12978:	addne	r6, r6, #1
   1297c:	cmp	r4, r8
   12980:	bls	12ab0 <__assert_fail@plt+0x1290>
   12984:	mov	r8, r9
   12988:	mov	r0, fp
   1298c:	ldrb	r5, [r8], #1
   12990:	mov	r7, r9
   12994:	mov	r1, r5
   12998:	bl	1164c <strchr@plt>
   1299c:	mov	r1, r5
   129a0:	cmp	r0, #0
   129a4:	mov	r0, sl
   129a8:	bne	12968 <__assert_fail@plt+0x1148>
   129ac:	cmp	r4, r9
   129b0:	bls	12ab0 <__assert_fail@plt+0x1290>
   129b4:	add	r1, r6, #4
   129b8:	add	ip, r9, #4
   129bc:	mov	r0, r1
   129c0:	cmp	ip, r6
   129c4:	cmphi	r0, r9
   129c8:	sub	fp, r4, r8
   129cc:	mov	r1, ip
   129d0:	add	fp, fp, #1
   129d4:	movls	r1, #1
   129d8:	movhi	r1, #0
   129dc:	cmp	fp, #11
   129e0:	movls	r1, #0
   129e4:	andhi	r1, r1, #1
   129e8:	cmp	r1, #0
   129ec:	mov	ip, r8
   129f0:	beq	12b38 <__assert_fail@plt+0x1318>
   129f4:	rsb	r1, r9, #0
   129f8:	ands	r1, r1, #3
   129fc:	beq	12b14 <__assert_fail@plt+0x12f4>
   12a00:	cmp	r1, #1
   12a04:	strb	r5, [r6]
   12a08:	add	sl, r6, #1
   12a0c:	beq	12a34 <__assert_fail@plt+0x1214>
   12a10:	ldrb	r0, [r9, #1]
   12a14:	cmp	r1, #3
   12a18:	add	sl, r6, #2
   12a1c:	strb	r0, [r6, #1]
   12a20:	add	ip, r9, #2
   12a24:	ldrbeq	r0, [r9, #2]
   12a28:	addeq	sl, r6, #3
   12a2c:	addeq	ip, r9, #3
   12a30:	strbeq	r0, [r6, #2]
   12a34:	sub	fp, fp, r1
   12a38:	sub	r0, fp, #4
   12a3c:	add	r3, r9, r1
   12a40:	lsr	r0, r0, #2
   12a44:	add	r0, r0, #1
   12a48:	add	r1, r6, r1
   12a4c:	lsl	lr, r0, #2
   12a50:	mov	r5, #0
   12a54:	add	r5, r5, #1
   12a58:	ldr	r2, [r3], #4
   12a5c:	cmp	r0, r5
   12a60:	str	r2, [r1], #4
   12a64:	bhi	12a54 <__assert_fail@plt+0x1234>
   12a68:	cmp	fp, lr
   12a6c:	add	r3, sl, lr
   12a70:	add	lr, ip, lr
   12a74:	beq	12aa4 <__assert_fail@plt+0x1284>
   12a78:	ldrb	r1, [ip, r0, lsl #2]
   12a7c:	add	ip, lr, #1
   12a80:	cmp	r4, ip
   12a84:	strb	r1, [sl, r0, lsl #2]
   12a88:	bls	12aa4 <__assert_fail@plt+0x1284>
   12a8c:	ldrb	r1, [lr, #1]
   12a90:	add	r0, lr, #2
   12a94:	cmp	r4, r0
   12a98:	strb	r1, [r3, #1]
   12a9c:	ldrbhi	r1, [lr, #2]
   12aa0:	strbhi	r1, [r3, #2]
   12aa4:	add	r4, r4, #1
   12aa8:	sub	r2, r4, r8
   12aac:	add	r6, r6, r2
   12ab0:	ldr	r0, [pc, #244]	; 12bac <__assert_fail@plt+0x138c>
   12ab4:	ldrd	r2, [sp, #32]
   12ab8:	ldr	r1, [sp, #20]
   12abc:	ldr	r0, [r0]
   12ac0:	str	r0, [r6]
   12ac4:	mov	r0, #1
   12ac8:	bl	116b8 <__printf_chk@plt>
   12acc:	b	12888 <__assert_fail@plt+0x1068>
   12ad0:	mov	r1, #0
   12ad4:	ldr	r2, [pc, #180]	; 12b90 <__assert_fail@plt+0x1370>
   12ad8:	b	128cc <__assert_fail@plt+0x10ac>
   12adc:	sub	r0, r0, r1
   12ae0:	sub	r1, r0, r3
   12ae4:	b	128cc <__assert_fail@plt+0x10ac>
   12ae8:	mov	r3, #9
   12aec:	str	sl, [sp, #28]
   12af0:	str	r3, [sp, #16]
   12af4:	mov	r5, #1
   12af8:	b	126a0 <__assert_fail@plt+0xe80>
   12afc:	str	sl, [sp, #28]
   12b00:	ldr	r3, [sp, #16]
   12b04:	b	12694 <__assert_fail@plt+0xe74>
   12b08:	mov	sl, r9
   12b0c:	mov	r7, r6
   12b10:	b	127ec <__assert_fail@plt+0xfcc>
   12b14:	mov	ip, r9
   12b18:	mov	sl, r6
   12b1c:	b	12a34 <__assert_fail@plt+0x1214>
   12b20:	sub	r3, r6, #1
   12b24:	ldrb	r2, [r7], #1
   12b28:	cmp	r4, r7
   12b2c:	strb	r2, [r3, #1]!
   12b30:	bne	12b24 <__assert_fail@plt+0x1304>
   12b34:	b	1285c <__assert_fail@plt+0x103c>
   12b38:	sub	r3, r6, #1
   12b3c:	ldrb	r2, [r7], #1
   12b40:	cmp	r4, r7
   12b44:	strb	r2, [r3, #1]!
   12b48:	bne	12b3c <__assert_fail@plt+0x131c>
   12b4c:	b	12aa4 <__assert_fail@plt+0x1284>
   12b50:	ldrb	r3, [r5, #-1]
   12b54:	str	r0, [sp, #16]
   12b58:	sub	r3, r3, #48	; 0x30
   12b5c:	cmp	r3, #9
   12b60:	bls	125bc <__assert_fail@plt+0xd9c>
   12b64:	str	sl, [sp, #28]
   12b68:	mov	r3, r0
   12b6c:	b	12694 <__assert_fail@plt+0xe74>
   12b70:	mov	r0, r1
   12b74:	mov	r4, #0
   12b78:	str	ip, [sp]
   12b7c:	ldr	r3, [pc, #44]	; 12bb0 <__assert_fail@plt+0x1390>
   12b80:	mvn	r2, #0
   12b84:	mov	r1, #1
   12b88:	bl	11688 <__sprintf_chk@plt>
   12b8c:	b	12688 <__assert_fail@plt+0xe68>
   12b90:	strdeq	r7, [r3], -r0
   12b94:	blcc	fe6c539c <optarg@@GLIBC_2.4+0xfe68e1b4>
   12b98:	andeq	r4, r2, ip, lsr #12
   12b9c:	andeq	r4, r2, r0, lsr #19
   12ba0:	andeq	r4, r2, r8, lsr #19
   12ba4:	svclt	0x00d00000
   12ba8:			; <UNDEFINED> instruction: 0x000249b0
   12bac:	andeq	r4, r2, ip, lsr #19
   12bb0:	muleq	r2, ip, r9
   12bb4:	sub	r3, r3, #83	; 0x53
   12bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bbc:	mov	r5, r0
   12bc0:	sub	sp, sp, #20
   12bc4:	mov	r4, r1
   12bc8:	cmp	r3, #33	; 0x21
   12bcc:	ldrls	pc, [pc, r3, lsl #2]
   12bd0:	b	140f0 <__assert_fail@plt+0x28d0>
   12bd4:	andeq	r3, r1, ip, asr #6
   12bd8:	muleq	r1, ip, r4
   12bdc:	strdeq	r4, [r1], -r0
   12be0:	strdeq	r4, [r1], -r0
   12be4:	strdeq	r4, [r1], -r0
   12be8:	strdeq	r4, [r1], -r0
   12bec:	strdeq	r4, [r1], -r0
   12bf0:	strdeq	r4, [r1], -r0
   12bf4:	strdeq	r4, [r1], -r0
   12bf8:	strdeq	r4, [r1], -r0
   12bfc:	strdeq	r4, [r1], -r0
   12c00:	strdeq	r4, [r1], -r0
   12c04:	strdeq	r4, [r1], -r0
   12c08:	strdeq	r4, [r1], -r0
   12c0c:	andeq	r3, r1, r4, lsr #13
   12c10:	andeq	r3, r1, ip, lsr r8
   12c14:	andeq	r3, r1, r0, asr #23
   12c18:	andeq	r3, r1, r8, ror #18
   12c1c:	strdeq	r4, [r1], -r0
   12c20:	muleq	r1, r4, sl
   12c24:	strdeq	r4, [r1], -r0
   12c28:	strdeq	r4, [r1], -r0
   12c2c:	andeq	r2, r1, ip, asr ip
   12c30:	strdeq	r4, [r1], -r0
   12c34:	strdeq	r4, [r1], -r0
   12c38:	andeq	r2, r1, r0, ror #27
   12c3c:	strdeq	r4, [r1], -r0
   12c40:	andeq	r2, r1, r0, ror #30
   12c44:	strdeq	r4, [r1], -r0
   12c48:	strdeq	r4, [r1], -r0
   12c4c:	strdeq	r4, [r1], -r0
   12c50:	strdeq	r4, [r1], -r0
   12c54:	andeq	r3, r1, r4, ror #1
   12c58:	andeq	r3, r1, r8, lsl r2
   12c5c:	add	r4, r0, r1
   12c60:	ldr	r1, [sp, #64]	; 0x40
   12c64:	mov	r2, #0
   12c68:	add	r8, r0, #1
   12c6c:	ldr	r3, [r1, #48]	; 0x30
   12c70:	ldr	r1, [r1, #52]	; 0x34
   12c74:	cmp	r8, r4
   12c78:	orr	r2, r2, r1
   12c7c:	strd	r2, [sp, #8]
   12c80:	bcs	12dd8 <__assert_fail@plt+0x15b8>
   12c84:	mov	r6, r8
   12c88:	ldr	sl, [pc, #3928]	; 13be8 <__assert_fail@plt+0x23c8>
   12c8c:	b	12cac <__assert_fail@plt+0x148c>
   12c90:	bl	1164c <strchr@plt>
   12c94:	mov	r6, fp
   12c98:	cmp	r0, #0
   12c9c:	strbne	r7, [r8]
   12ca0:	addne	r8, r8, #1
   12ca4:	cmp	r4, fp
   12ca8:	bls	12dd8 <__assert_fail@plt+0x15b8>
   12cac:	mov	fp, r6
   12cb0:	ldr	r0, [pc, #3892]	; 13bec <__assert_fail@plt+0x23cc>
   12cb4:	ldrb	r7, [fp], #1
   12cb8:	mov	r9, r6
   12cbc:	mov	r1, r7
   12cc0:	bl	1164c <strchr@plt>
   12cc4:	mov	r1, r7
   12cc8:	cmp	r0, #0
   12ccc:	mov	r0, sl
   12cd0:	bne	12c90 <__assert_fail@plt+0x1470>
   12cd4:	cmp	r4, r6
   12cd8:	bls	12dd8 <__assert_fail@plt+0x15b8>
   12cdc:	add	r2, r8, #4
   12ce0:	add	ip, r6, #4
   12ce4:	mov	r0, r2
   12ce8:	cmp	ip, r8
   12cec:	cmphi	r0, r6
   12cf0:	sub	r1, r4, fp
   12cf4:	mov	r2, ip
   12cf8:	add	r1, r1, #1
   12cfc:	movls	r2, #1
   12d00:	movhi	r2, #0
   12d04:	cmp	r1, #11
   12d08:	movls	r2, #0
   12d0c:	andhi	r2, r2, #1
   12d10:	cmp	r2, #0
   12d14:	mov	sl, fp
   12d18:	beq	14538 <__assert_fail@plt+0x2d18>
   12d1c:	rsb	r2, r6, #0
   12d20:	ands	r2, r2, #3
   12d24:	beq	142e4 <__assert_fail@plt+0x2ac4>
   12d28:	cmp	r2, #1
   12d2c:	strb	r7, [r8]
   12d30:	add	r9, r8, #1
   12d34:	beq	12d5c <__assert_fail@plt+0x153c>
   12d38:	ldrb	r0, [r6, #1]
   12d3c:	cmp	r2, #3
   12d40:	add	r9, r8, #2
   12d44:	strb	r0, [r8, #1]
   12d48:	add	sl, r6, #2
   12d4c:	ldrbeq	r0, [r6, #2]
   12d50:	addeq	r9, r8, #3
   12d54:	addeq	sl, r6, #3
   12d58:	strbeq	r0, [r8, #2]
   12d5c:	sub	r1, r1, r2
   12d60:	sub	r0, r1, #4
   12d64:	add	r6, r6, r2
   12d68:	lsr	r0, r0, #2
   12d6c:	add	r0, r0, #1
   12d70:	add	r2, r8, r2
   12d74:	lsl	ip, r0, #2
   12d78:	mov	lr, #0
   12d7c:	add	lr, lr, #1
   12d80:	ldr	r3, [r6], #4
   12d84:	cmp	r0, lr
   12d88:	str	r3, [r2], #4
   12d8c:	bhi	12d7c <__assert_fail@plt+0x155c>
   12d90:	cmp	r1, ip
   12d94:	add	r2, r9, ip
   12d98:	add	ip, sl, ip
   12d9c:	beq	12dcc <__assert_fail@plt+0x15ac>
   12da0:	ldrb	r1, [sl, r0, lsl #2]
   12da4:	add	lr, ip, #1
   12da8:	cmp	r4, lr
   12dac:	strb	r1, [r9, r0, lsl #2]
   12db0:	bls	12dcc <__assert_fail@plt+0x15ac>
   12db4:	ldrb	r1, [ip, #1]
   12db8:	add	r0, ip, #2
   12dbc:	cmp	r4, r0
   12dc0:	strb	r1, [r2, #1]
   12dc4:	ldrbhi	r1, [ip, #2]
   12dc8:	strbhi	r1, [r2, #2]
   12dcc:	add	r4, r4, #1
   12dd0:	sub	r3, r4, fp
   12dd4:	add	r8, r8, r3
   12dd8:	ldr	r0, [pc, #3600]	; 13bf0 <__assert_fail@plt+0x23d0>
   12ddc:	b	13818 <__assert_fail@plt+0x1ff8>
   12de0:	ldr	r3, [sp, #64]	; 0x40
   12de4:	add	r4, r0, r1
   12de8:	add	r8, r0, #1
   12dec:	ldr	r3, [r3, #56]	; 0x38
   12df0:	cmp	r8, r4
   12df4:	mov	r0, r3
   12df8:	asr	r1, r3, #31
   12dfc:	strd	r0, [sp, #8]
   12e00:	bcs	12f58 <__assert_fail@plt+0x1738>
   12e04:	mov	r6, r8
   12e08:	ldr	sl, [pc, #3556]	; 13bf4 <__assert_fail@plt+0x23d4>
   12e0c:	b	12e2c <__assert_fail@plt+0x160c>
   12e10:	bl	1164c <strchr@plt>
   12e14:	mov	r6, fp
   12e18:	cmp	r0, #0
   12e1c:	strbne	r7, [r8]
   12e20:	addne	r8, r8, #1
   12e24:	cmp	r4, fp
   12e28:	bls	12f58 <__assert_fail@plt+0x1738>
   12e2c:	mov	fp, r6
   12e30:	ldr	r0, [pc, #3508]	; 13bec <__assert_fail@plt+0x23cc>
   12e34:	ldrb	r7, [fp], #1
   12e38:	mov	r9, r6
   12e3c:	mov	r1, r7
   12e40:	bl	1164c <strchr@plt>
   12e44:	mov	r1, r7
   12e48:	cmp	r0, #0
   12e4c:	mov	r0, sl
   12e50:	bne	12e10 <__assert_fail@plt+0x15f0>
   12e54:	cmp	r4, r6
   12e58:	bls	12f58 <__assert_fail@plt+0x1738>
   12e5c:	add	r2, r8, #4
   12e60:	add	ip, r6, #4
   12e64:	mov	r0, r2
   12e68:	cmp	ip, r8
   12e6c:	cmphi	r0, r6
   12e70:	sub	r1, r4, fp
   12e74:	mov	r2, ip
   12e78:	add	r1, r1, #1
   12e7c:	movls	r2, #1
   12e80:	movhi	r2, #0
   12e84:	cmp	r1, #11
   12e88:	movls	r2, #0
   12e8c:	andhi	r2, r2, #1
   12e90:	cmp	r2, #0
   12e94:	mov	sl, fp
   12e98:	beq	14478 <__assert_fail@plt+0x2c58>
   12e9c:	rsb	r2, r6, #0
   12ea0:	ands	r2, r2, #3
   12ea4:	beq	14284 <__assert_fail@plt+0x2a64>
   12ea8:	cmp	r2, #1
   12eac:	strb	r7, [r8]
   12eb0:	add	r9, r8, #1
   12eb4:	beq	12edc <__assert_fail@plt+0x16bc>
   12eb8:	ldrb	r0, [r6, #1]
   12ebc:	cmp	r2, #3
   12ec0:	add	r9, r8, #2
   12ec4:	strb	r0, [r8, #1]
   12ec8:	add	sl, r6, #2
   12ecc:	ldrbeq	r0, [r6, #2]
   12ed0:	addeq	r9, r8, #3
   12ed4:	addeq	sl, r6, #3
   12ed8:	strbeq	r0, [r8, #2]
   12edc:	sub	r1, r1, r2
   12ee0:	sub	r0, r1, #4
   12ee4:	add	r6, r6, r2
   12ee8:	lsr	r0, r0, #2
   12eec:	add	r0, r0, #1
   12ef0:	add	r2, r8, r2
   12ef4:	lsl	ip, r0, #2
   12ef8:	mov	lr, #0
   12efc:	add	lr, lr, #1
   12f00:	ldr	r3, [r6], #4
   12f04:	cmp	r0, lr
   12f08:	str	r3, [r2], #4
   12f0c:	bhi	12efc <__assert_fail@plt+0x16dc>
   12f10:	cmp	r1, ip
   12f14:	add	r2, r9, ip
   12f18:	add	ip, sl, ip
   12f1c:	beq	12f4c <__assert_fail@plt+0x172c>
   12f20:	ldrb	r1, [sl, r0, lsl #2]
   12f24:	add	lr, ip, #1
   12f28:	cmp	r4, lr
   12f2c:	strb	r1, [r9, r0, lsl #2]
   12f30:	bls	12f4c <__assert_fail@plt+0x172c>
   12f34:	ldrb	r1, [ip, #1]
   12f38:	add	r0, ip, #2
   12f3c:	cmp	r4, r0
   12f40:	strb	r1, [r2, #1]
   12f44:	ldrbhi	r1, [ip, #2]
   12f48:	strbhi	r1, [r2, #2]
   12f4c:	add	r4, r4, #1
   12f50:	sub	r3, r4, fp
   12f54:	add	r8, r8, r3
   12f58:	ldr	r0, [pc, #3224]	; 13bf8 <__assert_fail@plt+0x23d8>
   12f5c:	b	13818 <__assert_fail@plt+0x1ff8>
   12f60:	add	r4, r0, r1
   12f64:	add	r8, r0, #1
   12f68:	cmp	r8, r4
   12f6c:	bcs	130c4 <__assert_fail@plt+0x18a4>
   12f70:	mov	r6, r8
   12f74:	ldr	sl, [pc, #3200]	; 13bfc <__assert_fail@plt+0x23dc>
   12f78:	b	12f98 <__assert_fail@plt+0x1778>
   12f7c:	bl	1164c <strchr@plt>
   12f80:	mov	r6, fp
   12f84:	cmp	r0, #0
   12f88:	strbne	r7, [r8]
   12f8c:	addne	r8, r8, #1
   12f90:	cmp	r4, fp
   12f94:	bls	130c4 <__assert_fail@plt+0x18a4>
   12f98:	mov	fp, r6
   12f9c:	ldr	r0, [pc, #3144]	; 13bec <__assert_fail@plt+0x23cc>
   12fa0:	ldrb	r7, [fp], #1
   12fa4:	mov	r9, r6
   12fa8:	mov	r1, r7
   12fac:	bl	1164c <strchr@plt>
   12fb0:	mov	r1, r7
   12fb4:	cmp	r0, #0
   12fb8:	mov	r0, sl
   12fbc:	bne	12f7c <__assert_fail@plt+0x175c>
   12fc0:	cmp	r4, r6
   12fc4:	bls	130c4 <__assert_fail@plt+0x18a4>
   12fc8:	add	r2, r8, #4
   12fcc:	add	ip, r6, #4
   12fd0:	mov	r1, r2
   12fd4:	cmp	ip, r8
   12fd8:	cmphi	r1, r6
   12fdc:	sub	r0, r4, fp
   12fe0:	mov	r2, ip
   12fe4:	add	r0, r0, #1
   12fe8:	movls	r2, #1
   12fec:	movhi	r2, #0
   12ff0:	cmp	r0, #11
   12ff4:	movls	r2, #0
   12ff8:	andhi	r2, r2, #1
   12ffc:	cmp	r2, #0
   13000:	mov	lr, fp
   13004:	beq	14490 <__assert_fail@plt+0x2c70>
   13008:	rsb	r2, r6, #0
   1300c:	ands	r2, r2, #3
   13010:	beq	142cc <__assert_fail@plt+0x2aac>
   13014:	cmp	r2, #1
   13018:	strb	r7, [r8]
   1301c:	add	r9, r8, #1
   13020:	beq	13048 <__assert_fail@plt+0x1828>
   13024:	ldrb	r1, [r6, #1]
   13028:	cmp	r2, #3
   1302c:	add	r9, r8, #2
   13030:	strb	r1, [r8, #1]
   13034:	add	lr, r6, #2
   13038:	ldrbeq	r1, [r6, #2]
   1303c:	addeq	r9, r8, #3
   13040:	addeq	lr, r6, #3
   13044:	strbeq	r1, [r8, #2]
   13048:	sub	r0, r0, r2
   1304c:	sub	r1, r0, #4
   13050:	add	r6, r6, r2
   13054:	lsr	r1, r1, #2
   13058:	add	r1, r1, #1
   1305c:	add	r2, r8, r2
   13060:	lsl	ip, r1, #2
   13064:	mov	r7, #0
   13068:	add	r7, r7, #1
   1306c:	ldr	r3, [r6], #4
   13070:	cmp	r1, r7
   13074:	str	r3, [r2], #4
   13078:	bhi	13068 <__assert_fail@plt+0x1848>
   1307c:	cmp	r0, ip
   13080:	add	r2, r9, ip
   13084:	add	ip, lr, ip
   13088:	beq	130b8 <__assert_fail@plt+0x1898>
   1308c:	ldrb	r0, [lr, r1, lsl #2]
   13090:	add	lr, ip, #1
   13094:	cmp	r4, lr
   13098:	strb	r0, [r9, r1, lsl #2]
   1309c:	bls	130b8 <__assert_fail@plt+0x1898>
   130a0:	ldrb	r1, [ip, #1]
   130a4:	add	r0, ip, #2
   130a8:	cmp	r4, r0
   130ac:	strb	r1, [r2, #1]
   130b0:	ldrbhi	r1, [ip, #2]
   130b4:	strbhi	r1, [r2, #2]
   130b8:	add	r4, r4, #1
   130bc:	sub	r3, r4, fp
   130c0:	add	r8, r8, r3
   130c4:	ldr	r3, [pc, #2868]	; 13c00 <__assert_fail@plt+0x23e0>
   130c8:	mov	r1, r5
   130cc:	ldr	r2, [sp, #60]	; 0x3c
   130d0:	ldrh	r3, [r3]
   130d4:	mov	r0, #1
   130d8:	strh	r3, [r8]
   130dc:	bl	116b8 <__printf_chk@plt>
   130e0:	b	14118 <__assert_fail@plt+0x28f8>
   130e4:	ldr	r3, [sp, #64]	; 0x40
   130e8:	add	r4, r0, r1
   130ec:	add	r8, r0, #1
   130f0:	ldr	r3, [r3, #4]
   130f4:	cmp	r8, r4
   130f8:	mov	r0, r3
   130fc:	asr	r1, r3, #31
   13100:	strd	r0, [sp, #8]
   13104:	bcs	12f58 <__assert_fail@plt+0x1738>
   13108:	mov	r6, r8
   1310c:	ldr	sl, [pc, #2784]	; 13bf4 <__assert_fail@plt+0x23d4>
   13110:	b	13130 <__assert_fail@plt+0x1910>
   13114:	bl	1164c <strchr@plt>
   13118:	mov	r6, fp
   1311c:	cmp	r0, #0
   13120:	strbne	r7, [r8]
   13124:	addne	r8, r8, #1
   13128:	cmp	r4, fp
   1312c:	bls	12f58 <__assert_fail@plt+0x1738>
   13130:	mov	fp, r6
   13134:	ldr	r0, [pc, #2736]	; 13bec <__assert_fail@plt+0x23cc>
   13138:	ldrb	r7, [fp], #1
   1313c:	mov	r9, r6
   13140:	mov	r1, r7
   13144:	bl	1164c <strchr@plt>
   13148:	mov	r1, r7
   1314c:	cmp	r0, #0
   13150:	mov	r0, sl
   13154:	bne	13114 <__assert_fail@plt+0x18f4>
   13158:	cmp	r6, r4
   1315c:	bcs	12f58 <__assert_fail@plt+0x1738>
   13160:	add	r2, r8, #4
   13164:	add	ip, r6, #4
   13168:	mov	r0, r2
   1316c:	cmp	ip, r8
   13170:	cmphi	r0, r6
   13174:	sub	r1, r4, fp
   13178:	mov	r2, ip
   1317c:	add	r1, r1, #1
   13180:	movls	r2, #1
   13184:	movhi	r2, #0
   13188:	cmp	r1, #11
   1318c:	movls	r2, #0
   13190:	andhi	r2, r2, #1
   13194:	cmp	r2, #0
   13198:	mov	sl, fp
   1319c:	beq	14460 <__assert_fail@plt+0x2c40>
   131a0:	rsb	r2, r6, #0
   131a4:	ands	r2, r2, #3
   131a8:	beq	142d8 <__assert_fail@plt+0x2ab8>
   131ac:	cmp	r2, #1
   131b0:	strb	r7, [r8]
   131b4:	add	r9, r8, #1
   131b8:	beq	131e0 <__assert_fail@plt+0x19c0>
   131bc:	ldrb	r0, [r6, #1]
   131c0:	cmp	r2, #3
   131c4:	add	r9, r8, #2
   131c8:	strb	r0, [r8, #1]
   131cc:	add	sl, r6, #2
   131d0:	ldrbeq	r0, [r6, #2]
   131d4:	addeq	r9, r8, #3
   131d8:	addeq	sl, r6, #3
   131dc:	strbeq	r0, [r8, #2]
   131e0:	sub	r1, r1, r2
   131e4:	sub	r0, r1, #4
   131e8:	add	r6, r6, r2
   131ec:	lsr	r0, r0, #2
   131f0:	add	r0, r0, #1
   131f4:	add	r2, r8, r2
   131f8:	lsl	ip, r0, #2
   131fc:	mov	lr, #0
   13200:	add	lr, lr, #1
   13204:	ldr	r3, [r6], #4
   13208:	cmp	r0, lr
   1320c:	str	r3, [r2], #4
   13210:	bhi	13200 <__assert_fail@plt+0x19e0>
   13214:	b	12f10 <__assert_fail@plt+0x16f0>
   13218:	ldr	r3, [sp, #64]	; 0x40
   1321c:	add	r4, r0, r1
   13220:	add	r8, r0, #1
   13224:	ldr	r3, [r3]
   13228:	cmp	r8, r4
   1322c:	mov	r0, r3
   13230:	asr	r1, r3, #31
   13234:	strd	r0, [sp, #8]
   13238:	bcs	12dd8 <__assert_fail@plt+0x15b8>
   1323c:	mov	r6, r8
   13240:	ldr	sl, [pc, #2464]	; 13be8 <__assert_fail@plt+0x23c8>
   13244:	b	13264 <__assert_fail@plt+0x1a44>
   13248:	bl	1164c <strchr@plt>
   1324c:	mov	r6, fp
   13250:	cmp	r0, #0
   13254:	strbne	r7, [r8]
   13258:	addne	r8, r8, #1
   1325c:	cmp	r4, fp
   13260:	bls	12dd8 <__assert_fail@plt+0x15b8>
   13264:	mov	fp, r6
   13268:	ldr	r0, [pc, #2428]	; 13bec <__assert_fail@plt+0x23cc>
   1326c:	ldrb	r7, [fp], #1
   13270:	mov	r9, r6
   13274:	mov	r1, r7
   13278:	bl	1164c <strchr@plt>
   1327c:	mov	r1, r7
   13280:	cmp	r0, #0
   13284:	mov	r0, sl
   13288:	bne	13248 <__assert_fail@plt+0x1a28>
   1328c:	cmp	r4, r6
   13290:	bls	12dd8 <__assert_fail@plt+0x15b8>
   13294:	add	r2, r8, #4
   13298:	add	ip, r6, #4
   1329c:	mov	r0, r2
   132a0:	cmp	ip, r8
   132a4:	cmphi	r0, r6
   132a8:	sub	r1, r4, fp
   132ac:	mov	r2, ip
   132b0:	add	r1, r1, #1
   132b4:	movls	r2, #1
   132b8:	movhi	r2, #0
   132bc:	cmp	r1, #11
   132c0:	movls	r2, #0
   132c4:	andhi	r2, r2, #1
   132c8:	cmp	r2, #0
   132cc:	mov	sl, fp
   132d0:	beq	144a8 <__assert_fail@plt+0x2c88>
   132d4:	rsb	r2, r6, #0
   132d8:	ands	r2, r2, #3
   132dc:	beq	142fc <__assert_fail@plt+0x2adc>
   132e0:	cmp	r2, #1
   132e4:	strb	r7, [r8]
   132e8:	add	r9, r8, #1
   132ec:	beq	13314 <__assert_fail@plt+0x1af4>
   132f0:	ldrb	r0, [r6, #1]
   132f4:	cmp	r2, #3
   132f8:	add	r9, r8, #2
   132fc:	strb	r0, [r8, #1]
   13300:	add	sl, r6, #2
   13304:	ldrbeq	r0, [r6, #2]
   13308:	addeq	r9, r8, #3
   1330c:	addeq	sl, r6, #3
   13310:	strbeq	r0, [r8, #2]
   13314:	sub	r1, r1, r2
   13318:	sub	r0, r1, #4
   1331c:	add	r6, r6, r2
   13320:	lsr	r0, r0, #2
   13324:	add	r0, r0, #1
   13328:	add	r2, r8, r2
   1332c:	lsl	ip, r0, #2
   13330:	mov	lr, #0
   13334:	add	lr, lr, #1
   13338:	ldr	r3, [r6], #4
   1333c:	cmp	r0, lr
   13340:	str	r3, [r2], #4
   13344:	bhi	13334 <__assert_fail@plt+0x1b14>
   13348:	b	12d90 <__assert_fail@plt+0x1570>
   1334c:	ldr	r3, [sp, #64]	; 0x40
   13350:	ldr	r3, [r3, #60]	; 0x3c
   13354:	mov	r0, r3
   13358:	asr	r1, r3, #31
   1335c:	orrs	r3, r0, r1
   13360:	strd	r0, [sp, #8]
   13364:	bne	1337c <__assert_fail@plt+0x1b5c>
   13368:	ldr	r3, [sp, #64]	; 0x40
   1336c:	ldr	r3, [r3, #4]
   13370:	mov	r0, r3
   13374:	asr	r1, r3, #31
   13378:	strd	r0, [sp, #8]
   1337c:	add	r4, r5, r4
   13380:	add	r8, r5, #1
   13384:	cmp	r8, r4
   13388:	bcs	12f58 <__assert_fail@plt+0x1738>
   1338c:	mov	r6, r8
   13390:	ldr	sl, [pc, #2140]	; 13bf4 <__assert_fail@plt+0x23d4>
   13394:	b	133b4 <__assert_fail@plt+0x1b94>
   13398:	bl	1164c <strchr@plt>
   1339c:	mov	r6, fp
   133a0:	cmp	r0, #0
   133a4:	strbne	r7, [r8]
   133a8:	addne	r8, r8, #1
   133ac:	cmp	r4, fp
   133b0:	bls	12f58 <__assert_fail@plt+0x1738>
   133b4:	mov	fp, r6
   133b8:	ldr	r0, [pc, #2092]	; 13bec <__assert_fail@plt+0x23cc>
   133bc:	ldrb	r7, [fp], #1
   133c0:	mov	r9, r6
   133c4:	mov	r1, r7
   133c8:	bl	1164c <strchr@plt>
   133cc:	mov	r1, r7
   133d0:	cmp	r0, #0
   133d4:	mov	r0, sl
   133d8:	bne	13398 <__assert_fail@plt+0x1b78>
   133dc:	cmp	r6, r4
   133e0:	bcs	12f58 <__assert_fail@plt+0x1738>
   133e4:	add	r2, r8, #4
   133e8:	cmp	r2, r6
   133ec:	movhi	r0, #0
   133f0:	movls	r0, #1
   133f4:	add	r2, r6, #4
   133f8:	sub	r1, r4, fp
   133fc:	cmp	r8, r2
   13400:	movcc	r2, r0
   13404:	orrcs	r2, r0, #1
   13408:	add	r1, r1, #1
   1340c:	cmp	r1, #11
   13410:	movls	r2, #0
   13414:	andhi	r2, r2, #1
   13418:	cmp	r2, #0
   1341c:	mov	sl, fp
   13420:	beq	14568 <__assert_fail@plt+0x2d48>
   13424:	rsb	r2, r6, #0
   13428:	ands	r2, r2, #3
   1342c:	beq	142b4 <__assert_fail@plt+0x2a94>
   13430:	cmp	r2, #1
   13434:	strb	r7, [r8]
   13438:	add	r9, r8, #1
   1343c:	beq	13464 <__assert_fail@plt+0x1c44>
   13440:	ldrb	r0, [r6, #1]
   13444:	cmp	r2, #3
   13448:	add	r9, r8, #2
   1344c:	strb	r0, [r8, #1]
   13450:	add	sl, r6, #2
   13454:	ldrbeq	r0, [r6, #2]
   13458:	addeq	r9, r8, #3
   1345c:	addeq	sl, r6, #3
   13460:	strbeq	r0, [r8, #2]
   13464:	sub	r1, r1, r2
   13468:	sub	r0, r1, #4
   1346c:	add	r6, r6, r2
   13470:	lsr	r0, r0, #2
   13474:	add	r0, r0, #1
   13478:	add	r2, r8, r2
   1347c:	lsl	ip, r0, #2
   13480:	mov	lr, #0
   13484:	add	lr, lr, #1
   13488:	ldr	r3, [r6], #4
   1348c:	cmp	r0, lr
   13490:	str	r3, [r2], #4
   13494:	bhi	13484 <__assert_fail@plt+0x1c64>
   13498:	b	12f10 <__assert_fail@plt+0x16f0>
   1349c:	ldr	r3, [sp, #64]	; 0x40
   134a0:	ldr	r2, [pc, #1884]	; 13c04 <__assert_fail@plt+0x23e4>
   134a4:	ldr	r3, [r3]
   134a8:	cmp	r3, r2
   134ac:	beq	14e44 <__assert_fail@plt+0x3624>
   134b0:	ble	14124 <__assert_fail@plt+0x2904>
   134b4:	ldr	r2, [pc, #1868]	; 13c08 <__assert_fail@plt+0x23e8>
   134b8:	cmp	r3, r2
   134bc:	beq	14c40 <__assert_fail@plt+0x3420>
   134c0:	bgt	14194 <__assert_fail@plt+0x2974>
   134c4:	ldr	r2, [pc, #1856]	; 13c0c <__assert_fail@plt+0x23ec>
   134c8:	cmp	r3, r2
   134cc:	beq	14dd8 <__assert_fail@plt+0x35b8>
   134d0:	bgt	14400 <__assert_fail@plt+0x2be0>
   134d4:	ldr	r2, [pc, #1844]	; 13c10 <__assert_fail@plt+0x23f0>
   134d8:	cmp	r3, r2
   134dc:	beq	14ab4 <__assert_fail@plt+0x3294>
   134e0:	bgt	146fc <__assert_fail@plt+0x2edc>
   134e4:	ldr	r2, [pc, #1832]	; 13c14 <__assert_fail@plt+0x23f4>
   134e8:	cmp	r3, r2
   134ec:	beq	14b98 <__assert_fail@plt+0x3378>
   134f0:	bgt	147ac <__assert_fail@plt+0x2f8c>
   134f4:	ldr	r2, [pc, #1820]	; 13c18 <__assert_fail@plt+0x23f8>
   134f8:	cmp	r3, r2
   134fc:	beq	14c58 <__assert_fail@plt+0x3438>
   13500:	ldr	r2, [pc, #1812]	; 13c1c <__assert_fail@plt+0x23fc>
   13504:	cmp	r3, r2
   13508:	beq	14c4c <__assert_fail@plt+0x342c>
   1350c:	ldr	r2, [pc, #1804]	; 13c20 <__assert_fail@plt+0x2400>
   13510:	cmp	r3, r2
   13514:	bne	141f4 <__assert_fail@plt+0x29d4>
   13518:	ldr	r3, [pc, #1796]	; 13c24 <__assert_fail@plt+0x2404>
   1351c:	str	r3, [sp, #8]
   13520:	add	r4, r5, r4
   13524:	add	r7, r5, #1
   13528:	cmp	r7, r4
   1352c:	bcs	13684 <__assert_fail@plt+0x1e64>
   13530:	mov	sl, r7
   13534:	ldr	r9, [pc, #1728]	; 13bfc <__assert_fail@plt+0x23dc>
   13538:	b	13558 <__assert_fail@plt+0x1d38>
   1353c:	bl	1164c <strchr@plt>
   13540:	mov	sl, fp
   13544:	cmp	r0, #0
   13548:	strbne	r6, [r7]
   1354c:	addne	r7, r7, #1
   13550:	cmp	r4, fp
   13554:	bls	13684 <__assert_fail@plt+0x1e64>
   13558:	mov	fp, sl
   1355c:	ldr	r0, [pc, #1672]	; 13bec <__assert_fail@plt+0x23cc>
   13560:	ldrb	r6, [fp], #1
   13564:	mov	r8, sl
   13568:	mov	r1, r6
   1356c:	bl	1164c <strchr@plt>
   13570:	mov	r1, r6
   13574:	cmp	r0, #0
   13578:	mov	r0, r9
   1357c:	bne	1353c <__assert_fail@plt+0x1d1c>
   13580:	cmp	r4, sl
   13584:	bls	13684 <__assert_fail@plt+0x1e64>
   13588:	add	r1, r7, #4
   1358c:	add	lr, sl, #4
   13590:	mov	r0, r1
   13594:	cmp	lr, r7
   13598:	cmphi	r0, sl
   1359c:	sub	ip, r4, fp
   135a0:	mov	r1, lr
   135a4:	add	ip, ip, #1
   135a8:	movls	r1, #1
   135ac:	movhi	r1, #0
   135b0:	cmp	ip, #11
   135b4:	movls	r1, #0
   135b8:	andhi	r1, r1, #1
   135bc:	cmp	r1, #0
   135c0:	mov	r9, fp
   135c4:	beq	144f0 <__assert_fail@plt+0x2cd0>
   135c8:	rsb	r1, sl, #0
   135cc:	ands	r1, r1, #3
   135d0:	beq	142c0 <__assert_fail@plt+0x2aa0>
   135d4:	cmp	r1, #1
   135d8:	strb	r6, [r7]
   135dc:	add	r6, r7, #1
   135e0:	beq	13608 <__assert_fail@plt+0x1de8>
   135e4:	ldrb	r0, [sl, #1]
   135e8:	cmp	r1, #3
   135ec:	add	r6, r7, #2
   135f0:	strb	r0, [r7, #1]
   135f4:	add	r9, sl, #2
   135f8:	ldrbeq	r0, [sl, #2]
   135fc:	addeq	r6, r7, #3
   13600:	addeq	r9, sl, #3
   13604:	strbeq	r0, [r7, #2]
   13608:	sub	ip, ip, r1
   1360c:	sub	r0, ip, #4
   13610:	add	r3, sl, r1
   13614:	lsr	r0, r0, #2
   13618:	add	r0, r0, #1
   1361c:	add	r1, r7, r1
   13620:	lsl	lr, r0, #2
   13624:	mov	r8, #0
   13628:	add	r8, r8, #1
   1362c:	ldr	r2, [r3], #4
   13630:	cmp	r0, r8
   13634:	str	r2, [r1], #4
   13638:	bhi	13628 <__assert_fail@plt+0x1e08>
   1363c:	cmp	ip, lr
   13640:	add	r3, r6, lr
   13644:	add	lr, r9, lr
   13648:	beq	13678 <__assert_fail@plt+0x1e58>
   1364c:	ldrb	r1, [r9, r0, lsl #2]
   13650:	add	ip, lr, #1
   13654:	cmp	r4, ip
   13658:	strb	r1, [r6, r0, lsl #2]
   1365c:	bls	13678 <__assert_fail@plt+0x1e58>
   13660:	ldrb	r1, [lr, #1]
   13664:	add	r0, lr, #2
   13668:	cmp	r4, r0
   1366c:	strb	r1, [r3, #1]
   13670:	ldrbhi	r1, [lr, #2]
   13674:	strbhi	r1, [r3, #2]
   13678:	add	r4, r4, #1
   1367c:	sub	r2, r4, fp
   13680:	add	r7, r7, r2
   13684:	ldr	r3, [pc, #1396]	; 13c00 <__assert_fail@plt+0x23e0>
   13688:	ldr	r2, [sp, #8]
   1368c:	mov	r1, r5
   13690:	ldrh	r3, [r3]
   13694:	mov	r0, #1
   13698:	strh	r3, [r7]
   1369c:	bl	116b8 <__printf_chk@plt>
   136a0:	b	14118 <__assert_fail@plt+0x28f8>
   136a4:	ldr	r3, [sp, #64]	; 0x40
   136a8:	add	r4, r0, r1
   136ac:	add	r8, r0, #1
   136b0:	ldrd	r2, [r3, #24]
   136b4:	cmp	r8, r4
   136b8:	strd	r2, [sp, #8]
   136bc:	bcs	13814 <__assert_fail@plt+0x1ff4>
   136c0:	mov	r6, r8
   136c4:	ldr	sl, [pc, #1372]	; 13c28 <__assert_fail@plt+0x2408>
   136c8:	b	136e8 <__assert_fail@plt+0x1ec8>
   136cc:	bl	1164c <strchr@plt>
   136d0:	mov	r6, fp
   136d4:	cmp	r0, #0
   136d8:	strbne	r7, [r8]
   136dc:	addne	r8, r8, #1
   136e0:	cmp	r4, fp
   136e4:	bls	13814 <__assert_fail@plt+0x1ff4>
   136e8:	mov	fp, r6
   136ec:	ldr	r0, [pc, #1272]	; 13bec <__assert_fail@plt+0x23cc>
   136f0:	ldrb	r7, [fp], #1
   136f4:	mov	r9, r6
   136f8:	mov	r1, r7
   136fc:	bl	1164c <strchr@plt>
   13700:	mov	r1, r7
   13704:	cmp	r0, #0
   13708:	mov	r0, sl
   1370c:	bne	136cc <__assert_fail@plt+0x1eac>
   13710:	cmp	r6, r4
   13714:	bcs	13814 <__assert_fail@plt+0x1ff4>
   13718:	add	r2, r8, #4
   1371c:	add	ip, r6, #4
   13720:	mov	r0, r2
   13724:	cmp	ip, r8
   13728:	cmphi	r0, r6
   1372c:	sub	r1, r4, fp
   13730:	mov	r2, ip
   13734:	add	r1, r1, #1
   13738:	movls	r2, #1
   1373c:	movhi	r2, #0
   13740:	cmp	r1, #11
   13744:	movls	r2, #0
   13748:	andhi	r2, r2, #1
   1374c:	cmp	r2, #0
   13750:	mov	sl, fp
   13754:	beq	14550 <__assert_fail@plt+0x2d30>
   13758:	rsb	r2, r6, #0
   1375c:	ands	r2, r2, #3
   13760:	beq	142f0 <__assert_fail@plt+0x2ad0>
   13764:	cmp	r2, #1
   13768:	strb	r7, [r8]
   1376c:	add	r9, r8, #1
   13770:	beq	13798 <__assert_fail@plt+0x1f78>
   13774:	ldrb	r0, [r6, #1]
   13778:	cmp	r2, #3
   1377c:	add	r9, r8, #2
   13780:	strb	r0, [r8, #1]
   13784:	add	sl, r6, #2
   13788:	ldrbeq	r0, [r6, #2]
   1378c:	addeq	r9, r8, #3
   13790:	addeq	sl, r6, #3
   13794:	strbeq	r0, [r8, #2]
   13798:	sub	r1, r1, r2
   1379c:	sub	r0, r1, #4
   137a0:	add	r6, r6, r2
   137a4:	lsr	r0, r0, #2
   137a8:	add	r0, r0, #1
   137ac:	add	r2, r8, r2
   137b0:	lsl	ip, r0, #2
   137b4:	mov	lr, #0
   137b8:	add	lr, lr, #1
   137bc:	ldr	r3, [r6], #4
   137c0:	cmp	r0, lr
   137c4:	str	r3, [r2], #4
   137c8:	bhi	137b8 <__assert_fail@plt+0x1f98>
   137cc:	cmp	r1, ip
   137d0:	add	r2, r9, ip
   137d4:	add	ip, sl, ip
   137d8:	beq	13808 <__assert_fail@plt+0x1fe8>
   137dc:	ldrb	r1, [sl, r0, lsl #2]
   137e0:	add	lr, ip, #1
   137e4:	cmp	r4, lr
   137e8:	strb	r1, [r9, r0, lsl #2]
   137ec:	bls	13808 <__assert_fail@plt+0x1fe8>
   137f0:	ldrb	r1, [ip, #1]
   137f4:	add	r0, ip, #2
   137f8:	cmp	r4, r0
   137fc:	strb	r1, [r2, #1]
   13800:	ldrbhi	r1, [ip, #2]
   13804:	strbhi	r1, [r2, #2]
   13808:	add	r4, r4, #1
   1380c:	sub	r3, r4, fp
   13810:	add	r8, r8, r3
   13814:	ldr	r0, [pc, #1040]	; 13c2c <__assert_fail@plt+0x240c>
   13818:	ldr	r0, [r0]
   1381c:	ldrd	r2, [sp, #8]
   13820:	mov	r1, r5
   13824:	str	r0, [r8]
   13828:	mov	r0, #1
   1382c:	bl	116b8 <__printf_chk@plt>
   13830:	mov	r0, #0
   13834:	add	sp, sp, #20
   13838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1383c:	ldr	r3, [sp, #64]	; 0x40
   13840:	add	r4, r0, r1
   13844:	add	r8, r0, #1
   13848:	ldrd	r2, [r3, #8]
   1384c:	cmp	r8, r4
   13850:	strd	r2, [sp, #8]
   13854:	bcs	13814 <__assert_fail@plt+0x1ff4>
   13858:	mov	r6, r8
   1385c:	ldr	sl, [pc, #964]	; 13c28 <__assert_fail@plt+0x2408>
   13860:	b	13880 <__assert_fail@plt+0x2060>
   13864:	bl	1164c <strchr@plt>
   13868:	mov	r6, fp
   1386c:	cmp	r0, #0
   13870:	strbne	r7, [r8]
   13874:	addne	r8, r8, #1
   13878:	cmp	r4, fp
   1387c:	bls	13814 <__assert_fail@plt+0x1ff4>
   13880:	mov	fp, r6
   13884:	ldr	r0, [pc, #864]	; 13bec <__assert_fail@plt+0x23cc>
   13888:	ldrb	r7, [fp], #1
   1388c:	mov	r9, r6
   13890:	mov	r1, r7
   13894:	bl	1164c <strchr@plt>
   13898:	mov	r1, r7
   1389c:	cmp	r0, #0
   138a0:	mov	r0, sl
   138a4:	bne	13864 <__assert_fail@plt+0x2044>
   138a8:	cmp	r6, r4
   138ac:	bcs	13814 <__assert_fail@plt+0x1ff4>
   138b0:	add	r2, r8, #4
   138b4:	add	ip, r6, #4
   138b8:	mov	r0, r2
   138bc:	cmp	ip, r8
   138c0:	cmphi	r0, r6
   138c4:	sub	r1, r4, fp
   138c8:	mov	r2, ip
   138cc:	add	r1, r1, #1
   138d0:	movls	r2, #1
   138d4:	movhi	r2, #0
   138d8:	cmp	r1, #11
   138dc:	movls	r2, #0
   138e0:	andhi	r2, r2, #1
   138e4:	cmp	r2, #0
   138e8:	mov	sl, fp
   138ec:	beq	14508 <__assert_fail@plt+0x2ce8>
   138f0:	rsb	r2, r6, #0
   138f4:	ands	r2, r2, #3
   138f8:	beq	1429c <__assert_fail@plt+0x2a7c>
   138fc:	cmp	r2, #1
   13900:	strb	r7, [r8]
   13904:	add	r9, r8, #1
   13908:	beq	13930 <__assert_fail@plt+0x2110>
   1390c:	ldrb	r0, [r6, #1]
   13910:	cmp	r2, #3
   13914:	add	r9, r8, #2
   13918:	strb	r0, [r8, #1]
   1391c:	add	sl, r6, #2
   13920:	ldrbeq	r0, [r6, #2]
   13924:	addeq	r9, r8, #3
   13928:	addeq	sl, r6, #3
   1392c:	strbeq	r0, [r8, #2]
   13930:	sub	r1, r1, r2
   13934:	sub	r0, r1, #4
   13938:	add	r6, r6, r2
   1393c:	lsr	r0, r0, #2
   13940:	add	r0, r0, #1
   13944:	add	r2, r8, r2
   13948:	lsl	ip, r0, #2
   1394c:	mov	lr, #0
   13950:	add	lr, lr, #1
   13954:	ldr	r3, [r6], #4
   13958:	cmp	r0, lr
   1395c:	str	r3, [r2], #4
   13960:	bhi	13950 <__assert_fail@plt+0x2130>
   13964:	b	137cc <__assert_fail@plt+0x1fac>
   13968:	ldr	r3, [sp, #64]	; 0x40
   1396c:	add	r4, r0, r1
   13970:	add	r8, r0, #1
   13974:	ldrd	r2, [r3, #40]	; 0x28
   13978:	cmp	r8, r4
   1397c:	strd	r2, [sp, #8]
   13980:	bcs	13814 <__assert_fail@plt+0x1ff4>
   13984:	mov	r6, r8
   13988:	ldr	sl, [pc, #664]	; 13c28 <__assert_fail@plt+0x2408>
   1398c:	b	139ac <__assert_fail@plt+0x218c>
   13990:	bl	1164c <strchr@plt>
   13994:	mov	r6, fp
   13998:	cmp	r0, #0
   1399c:	strbne	r7, [r8]
   139a0:	addne	r8, r8, #1
   139a4:	cmp	r4, fp
   139a8:	bls	13814 <__assert_fail@plt+0x1ff4>
   139ac:	mov	fp, r6
   139b0:	ldr	r0, [pc, #564]	; 13bec <__assert_fail@plt+0x23cc>
   139b4:	ldrb	r7, [fp], #1
   139b8:	mov	r9, r6
   139bc:	mov	r1, r7
   139c0:	bl	1164c <strchr@plt>
   139c4:	mov	r1, r7
   139c8:	cmp	r0, #0
   139cc:	mov	r0, sl
   139d0:	bne	13990 <__assert_fail@plt+0x2170>
   139d4:	cmp	r4, r6
   139d8:	bls	13814 <__assert_fail@plt+0x1ff4>
   139dc:	add	r2, r8, #4
   139e0:	add	ip, r6, #4
   139e4:	mov	r0, r2
   139e8:	cmp	ip, r8
   139ec:	cmphi	r0, r6
   139f0:	sub	r1, r4, fp
   139f4:	mov	r2, ip
   139f8:	add	r1, r1, #1
   139fc:	movls	r2, #1
   13a00:	movhi	r2, #0
   13a04:	cmp	r1, #11
   13a08:	movls	r2, #0
   13a0c:	andhi	r2, r2, #1
   13a10:	cmp	r2, #0
   13a14:	mov	sl, fp
   13a18:	beq	14520 <__assert_fail@plt+0x2d00>
   13a1c:	rsb	r2, r6, #0
   13a20:	ands	r2, r2, #3
   13a24:	beq	142a8 <__assert_fail@plt+0x2a88>
   13a28:	cmp	r2, #1
   13a2c:	strb	r7, [r8]
   13a30:	add	r9, r8, #1
   13a34:	beq	13a5c <__assert_fail@plt+0x223c>
   13a38:	ldrb	r0, [r6, #1]
   13a3c:	cmp	r2, #3
   13a40:	add	r9, r8, #2
   13a44:	strb	r0, [r8, #1]
   13a48:	add	sl, r6, #2
   13a4c:	ldrbeq	r0, [r6, #2]
   13a50:	addeq	r9, r8, #3
   13a54:	addeq	sl, r6, #3
   13a58:	strbeq	r0, [r8, #2]
   13a5c:	sub	r1, r1, r2
   13a60:	sub	r0, r1, #4
   13a64:	add	r6, r6, r2
   13a68:	lsr	r0, r0, #2
   13a6c:	add	r0, r0, #1
   13a70:	add	r2, r8, r2
   13a74:	lsl	ip, r0, #2
   13a78:	mov	lr, #0
   13a7c:	add	lr, lr, #1
   13a80:	ldr	r3, [r6], #4
   13a84:	cmp	r0, lr
   13a88:	str	r3, [r2], #4
   13a8c:	bhi	13a7c <__assert_fail@plt+0x225c>
   13a90:	b	137cc <__assert_fail@plt+0x1fac>
   13a94:	ldr	r3, [sp, #64]	; 0x40
   13a98:	add	r4, r0, r1
   13a9c:	add	r8, r0, #1
   13aa0:	ldrd	r2, [r3, #16]
   13aa4:	cmp	r8, r4
   13aa8:	strd	r2, [sp, #8]
   13aac:	bcs	13814 <__assert_fail@plt+0x1ff4>
   13ab0:	mov	r6, r8
   13ab4:	ldr	sl, [pc, #364]	; 13c28 <__assert_fail@plt+0x2408>
   13ab8:	b	13ad8 <__assert_fail@plt+0x22b8>
   13abc:	bl	1164c <strchr@plt>
   13ac0:	mov	r6, fp
   13ac4:	cmp	r0, #0
   13ac8:	strbne	r7, [r8]
   13acc:	addne	r8, r8, #1
   13ad0:	cmp	r4, fp
   13ad4:	bls	13814 <__assert_fail@plt+0x1ff4>
   13ad8:	mov	fp, r6
   13adc:	ldr	r0, [pc, #264]	; 13bec <__assert_fail@plt+0x23cc>
   13ae0:	ldrb	r7, [fp], #1
   13ae4:	mov	r9, r6
   13ae8:	mov	r1, r7
   13aec:	bl	1164c <strchr@plt>
   13af0:	mov	r1, r7
   13af4:	cmp	r0, #0
   13af8:	mov	r0, sl
   13afc:	bne	13abc <__assert_fail@plt+0x229c>
   13b00:	cmp	r6, r4
   13b04:	bcs	13814 <__assert_fail@plt+0x1ff4>
   13b08:	add	r2, r8, #4
   13b0c:	add	ip, r6, #4
   13b10:	mov	r0, r2
   13b14:	cmp	ip, r8
   13b18:	cmphi	r0, r6
   13b1c:	sub	r1, r4, fp
   13b20:	mov	r2, ip
   13b24:	add	r1, r1, #1
   13b28:	movls	r2, #1
   13b2c:	movhi	r2, #0
   13b30:	cmp	r1, #11
   13b34:	movls	r2, #0
   13b38:	andhi	r2, r2, #1
   13b3c:	cmp	r2, #0
   13b40:	mov	sl, fp
   13b44:	beq	144d8 <__assert_fail@plt+0x2cb8>
   13b48:	rsb	r2, r6, #0
   13b4c:	ands	r2, r2, #3
   13b50:	beq	14278 <__assert_fail@plt+0x2a58>
   13b54:	cmp	r2, #1
   13b58:	strb	r7, [r8]
   13b5c:	add	r9, r8, #1
   13b60:	beq	13b88 <__assert_fail@plt+0x2368>
   13b64:	ldrb	r0, [r6, #1]
   13b68:	cmp	r2, #3
   13b6c:	add	r9, r8, #2
   13b70:	strb	r0, [r8, #1]
   13b74:	add	sl, r6, #2
   13b78:	ldrbeq	r0, [r6, #2]
   13b7c:	addeq	r9, r8, #3
   13b80:	addeq	sl, r6, #3
   13b84:	strbeq	r0, [r8, #2]
   13b88:	sub	r1, r1, r2
   13b8c:	sub	r0, r1, #4
   13b90:	add	r6, r6, r2
   13b94:	lsr	r0, r0, #2
   13b98:	add	r0, r0, #1
   13b9c:	add	r2, r8, r2
   13ba0:	lsl	ip, r0, #2
   13ba4:	mov	lr, #0
   13ba8:	add	lr, lr, #1
   13bac:	ldr	r3, [r6], #4
   13bb0:	cmp	r0, lr
   13bb4:	str	r3, [r2], #4
   13bb8:	bhi	13ba8 <__assert_fail@plt+0x2388>
   13bbc:	b	137cc <__assert_fail@plt+0x1fac>
   13bc0:	ldr	r3, [sp, #64]	; 0x40
   13bc4:	add	r4, r0, r1
   13bc8:	add	r8, r0, #1
   13bcc:	ldrd	r2, [r3, #32]
   13bd0:	cmp	r8, r4
   13bd4:	strd	r2, [sp, #8]
   13bd8:	bcs	12f58 <__assert_fail@plt+0x1738>
   13bdc:	mov	r6, r8
   13be0:	ldr	sl, [pc, #12]	; 13bf4 <__assert_fail@plt+0x23d4>
   13be4:	b	14008 <__assert_fail@plt+0x27e8>
   13be8:	andeq	r4, r2, r0, lsl lr
   13bec:	andeq	r4, r2, ip, lsr #12
   13bf0:	andeq	r4, r2, r4, lsl lr
   13bf4:	andeq	r4, r2, r8, lsl lr
   13bf8:	andeq	r4, r2, ip, lsl lr
   13bfc:	andeq	r4, r2, ip, lsl #28
   13c00:	andeq	r4, r2, r0, lsl #29
   13c04:	msreq	SP_hyp, r7
   13c08:	movtpl	r4, #62283	; 0xf34b
   13c0c:	svccs	0x00c12fc1
   13c10:	strne	r3, [r1, #-838]	; 0xfffffcba
   13c14:	bleq	feb5b3c4 <optarg@@GLIBC_2.4+0xfeb241dc>
   13c18:	strbeq	r5, [r5, -r1, lsr #16]!
   13c1c:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   13c20:	teqeq	r1, r8, lsr #3
   13c24:	andeq	r4, r2, ip, lsr #23
   13c28:	andeq	r4, r2, r0, lsr #19
   13c2c:	andeq	r4, r2, ip, lsr #19
   13c30:	andeq	r4, r2, ip, lsr #12
   13c34:	andeq	r7, r3, r4, ror #3
   13c38:	andeq	r4, r0, r6
   13c3c:			; <UNDEFINED> instruction: 0xf995e849
   13c40:	cdplt	14, 14, cr13, cr15, cr13, {5}
   13c44:	strge	pc, [r1, #-3317]	; 0xfffff30b
   13c48:			; <UNDEFINED> instruction: 0x9123683e
   13c4c:	strls	r5, [r4, #2294]	; 0x8f6
   13c50:	ldrdeq	r4, [r2], -ip
   13c54:	ldrbvs	r5, [r3, #-1347]!	; 0xfffffabd
   13c58:	smcvs	13923	; 0x3663
   13c5c:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   13c60:	cmnvs	r7, #112, 4
   13c64:	strbtvs	r6, [r2], #-1824	; 0xfffff8e0
   13c68:	strbtvs	r6, [r4], #-376	; 0xfffffe88
   13c6c:			; <UNDEFINED> instruction: 0x00024ab0
   13c70:	andeq	r4, r2, r0, lsr #28
   13c74:	andeq	r7, r3, r0, lsl #4
   13c78:	strdeq	sl, [r0], -r5
   13c7c:	andeq	r4, r0, r4, asr #26
   13c80:	andeq	r4, r0, fp, lsr #16
   13c84:	andeq	r4, r0, r4, asr #4
   13c88:	andeq	r4, r2, r4, ror fp
   13c8c:	cmnvc	r3, #120586240	; 0x7300000
   13c90:	strbtvc	r6, [r1], #-879	; 0xfffffc91
   13c94:	stmdavc	pc!, {r1, r2, r4, r6, r9, lr}^	; <UNPREDICTABLE>
   13c98:	stmdbvc	ip, {r4, r5, r9, sl, ip, sp, lr}^
   13c9c:	ldclvc	6, cr6, [ip], #-460	; 0xfffffe34
   13ca0:			; <UNDEFINED> instruction: 0x00024cb0
   13ca4:	sbceq	pc, r0, lr, ror #31
   13ca8:	tsteq	r6, r0, ror r9
   13cac:	msreq	SP_hyp, r4
   13cb0:	msreq	SP_hyp, r5
   13cb4:	andeq	r4, r2, ip, ror #26
   13cb8:	andeq	r1, r0, sp, ror r3
   13cbc:	andeq	r2, r0, r8, ror #8
   13cc0:	andeq	r3, r0, r4, lsr r4
   13cc4:	andeq	r4, r0, r4
   13cc8:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   13ccc:	movtpl	r4, #21325	; 0x534d
   13cd0:	movtpl	r4, #24911	; 0x614f
   13cd4:	movtpl	r4, #26694	; 0x6846
   13cd8:	movtpl	r5, #25678	; 0x644e
   13cdc:	andeq	r4, r2, r4, ror ip
   13ce0:	movtmi	r5, #7507	; 0x1d53
   13ce4:	submi	r5, r6, #-1006632960	; 0xc4000000
   13ce8:	cmpcc	r3, sl, asr #12
   13cec:	ldrdeq	r4, [r2], -r8
   13cf0:			; <UNDEFINED> instruction: 0xff534d42
   13cf4:	andeq	r4, r2, r0, asr #26
   13cf8:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   13cfc:			; <UNDEFINED> instruction: 0x565a4653
   13d00:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   13d04:	ldrpl	r0, [r9], #-256	; 0xffffff00
   13d08:	logle<illegal precision>z	f0, f4
   13d0c:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   13d10:	bgt	fffa655c <optarg@@GLIBC_2.4+0xfff6f374>
   13d14:			; <UNDEFINED> instruction: 0xc7571590
   13d18:	andeq	r4, r2, r4, lsr #25
   13d1c:	blvs	1065670 <optarg@@GLIBC_2.4+0x102e488>
   13d20:	ldrbvs	r6, [r9, -r9, ror #18]
   13d24:	ldmdavs	r9, {r1, r5, r8, ip}
   13d28:	ldrbvs	r5, [r3, #-1350]!	; 0xfffffaba
   13d2c:	andeq	r4, r2, r8, asr #22
   13d30:	andeq	pc, r0, pc, asr r1	; <UNPREDICTABLE>
   13d34:	andeq	lr, r0, r1, asr pc
   13d38:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   13d3c:	ldrdeq	r4, [r2], -r8
   13d40:			; <UNDEFINED> instruction: 0x2011bab0
   13d44:	stmibne	r3, {r1, r2, r5, r8, r9}
   13d48:	blne	feb92888 <optarg@@GLIBC_2.4+0xfeb5b6a0>
   13d4c:	stmibne	r0, {r1, r9}
   13d50:	andeq	r4, r2, r0, asr #24
   13d54:	andeq	r9, r0, r0, ror #12
   13d58:	andeq	r7, r0, r5, ror r2
   13d5c:	andeq	r6, r0, r9, ror #18
   13d60:	andeq	r4, r2, r8, asr ip
   13d64:	blge	fee9a33c <optarg@@GLIBC_2.4+0xfee63154>
   13d68:	blt	ff2ff060 <optarg@@GLIBC_2.4+0xff2c7e78>
   13d6c:	bge	ff5fe91c <optarg@@GLIBC_2.4+0xff5c7734>
   13d70:	muleq	r2, ip, ip
   13d74:	teqne	r0, r4, asr r8
   13d78:	cmnne	r6, #-1744830463	; 0x98000001
   13d7c:	bleq	ff416cc4 <optarg@@GLIBC_2.4+0xff3dfadc>
   13d80:	andeq	r4, r2, ip, ror #23
   13d84:	andeq	r1, r0, r3, ror r3
   13d88:	andeq	r0, r0, r7, lsl #3
   13d8c:	strdeq	r4, [r2], -ip
   13d90:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   13d94:	strbmi	r4, [sp, #-1101]	; 0xfffffbb3
   13d98:	strbmi	r4, [sp], #-322	; 0xfffffebe
   13d9c:	ldrdeq	r4, [r2], -r8
   13da0:	bpl	13e56f4 <optarg@@GLIBC_2.4+0x13ae50c>
   13da4:	stclpl	13, cr2, [sl, #980]	; 0x3d4
   13da8:	bpl	f2e570 <optarg@@GLIBC_2.4+0xef7388>
   13dac:	andeq	r4, r2, r0, asr #19
   13db0:	andeq	r5, r0, fp, ror r1
   13db4:	andeq	r5, r0, ip, asr #12
   13db8:	andeq	r4, r0, sl, asr sp
   13dbc:	andeq	r4, r2, r8, lsr ip
   13dc0:	vshr.s32	d18, d0, #11
   13dc4:			; <UNDEFINED> instruction: 0xf97cff8c
   13dc8:	rscs	lr, r5, r2, ror #3
   13dcc:	strdeq	r4, [r2], -ip
   13dd0:	eoreq	lr, r7, fp, ror #1
   13dd4:	subeq	r4, r1, r3, asr sl
   13dd8:	andeq	r1, r1, r4, asr r9
   13ddc:	muleq	r2, r8, sp
   13de0:	cdpvs	3, 6, cr7, cr6, cr4, {3}
   13de4:	mrcvs	6, 3, r6, cr3, cr3, {3}
   13de8:	stclvs	15, cr6, [pc], #-448	; 13c30 <__assert_fail@plt+0x2410>
   13dec:	andeq	r4, r2, r8, lsr #20
   13df0:			; <UNDEFINED> instruction: 0x01021994
   13df4:	sbceq	r6, r3, r0, lsl #8
   13df8:	andeq	r4, r2, ip, asr sl
   13dfc:	cmnvc	r2, #-1879048185	; 0x90000007
   13e00:	cmnvc	r1, #104, 6	; 0xa0000001
   13e04:	andeq	r4, r2, r8, asr sp
   13e08:	andeq	r9, r0, r1, lsr #31
   13e0c:			; <UNDEFINED> instruction: 0x00024cb8
   13e10:	andeq	r1, r0, pc, lsl #7
   13e14:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   13e18:	andeq	r1, r0, pc, ror r3
   13e1c:	strdeq	r4, [r2], -ip
   13e20:	cmnvs	r5, r3, ror r6
   13e24:	cmnvs	r5, ip, ror #14
   13e28:	andeq	r4, r2, r0, asr #25
   13e2c:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   13e30:	blcs	feb5b5e0 <optarg@@GLIBC_2.4+0xfeb243f8>
   13e34:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   13e38:	andeq	r4, r2, ip, lsl #27
   13e3c:	subpl	r5, r9, r5, asr #32
   13e40:	rsbpl	r4, r5, #1884160	; 0x1cc000
   13e44:			; <UNDEFINED> instruction: 0x47504653
   13e48:	andeq	r4, r2, ip, ror #22
   13e4c:	andeq	r4, r2, r4, lsl #22
   13e50:	andeq	r4, r2, r4, lsl sp
   13e54:	andeq	r4, r2, r8, ror #25
   13e58:	andeq	r4, r2, r0, lsl #26
   13e5c:	muleq	r2, r4, sp
   13e60:	andeq	r4, r2, r4, lsl fp
   13e64:	muleq	r2, r8, fp
   13e68:	andeq	r4, r2, r8, asr #20
   13e6c:			; <UNDEFINED> instruction: 0x00024db8
   13e70:	ldrdeq	r4, [r2], -r8
   13e74:	andeq	r4, r2, r8, lsr #27
   13e78:	andeq	r4, r2, ip, ror sp
   13e7c:	andeq	r4, r2, r0, lsr #26
   13e80:	andeq	r4, r2, r8, lsl #23
   13e84:	andeq	r4, r2, ip, ror #24
   13e88:	andeq	r4, r2, ip, asr ip
   13e8c:	ldrdeq	r4, [r2], -r0
   13e90:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13e94:	andeq	r4, r2, r4, lsl #21
   13e98:	andeq	r4, r2, r0, asr sl
   13e9c:	muleq	r2, r0, sl
   13ea0:	andeq	r4, r2, r8, asr #26
   13ea4:	andeq	r4, r2, r0, asr #27
   13ea8:	andeq	r4, r2, r8, asr fp
   13eac:	andeq	r4, r2, ip, ror #27
   13eb0:	andeq	r4, r2, r4, lsr sp
   13eb4:	andeq	r4, r2, ip, asr fp
   13eb8:	andeq	r4, r2, r8, asr #24
   13ebc:	strdeq	r4, [r2], -r0
   13ec0:	andeq	r4, r2, r4, ror #21
   13ec4:	ldrdeq	r4, [r2], -ip
   13ec8:	andeq	r4, r2, r0, ror #22
   13ecc:	andeq	r4, r2, r8, lsl #25
   13ed0:	andeq	r4, r2, r8, lsl ip
   13ed4:	andeq	r4, r2, r0, ror sl
   13ed8:	andeq	r4, r2, r0, asr fp
   13edc:	andeq	r4, r2, r0, asr sp
   13ee0:	andeq	r4, r2, r4, ror #19
   13ee4:	andeq	r4, r2, r4, ror #25
   13ee8:	andeq	r4, r2, ip, asr #25
   13eec:	andeq	r4, r2, ip, ror sl
   13ef0:	andeq	r4, r2, r4, lsl #20
   13ef4:	andeq	r4, r2, r4, lsr #23
   13ef8:	ldrdeq	r4, [r2], -r0
   13efc:	muleq	r2, r0, ip
   13f00:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   13f04:	andeq	r4, r2, r4, lsl #27
   13f08:			; <UNDEFINED> instruction: 0x00024db0
   13f0c:	andeq	r4, r2, r4, lsr sl
   13f10:	andeq	r4, r2, r4, ror #23
   13f14:	andeq	r4, r2, r0, asr ip
   13f18:	andeq	r4, r2, ip, lsr sp
   13f1c:	muleq	r2, r0, fp
   13f20:	andeq	r4, r2, r4, ror sp
   13f24:			; <UNDEFINED> instruction: 0x012fd16d
   13f28:	andeq	r4, r2, r8, ror #27
   13f2c:	andeq	r4, r2, r0, ror #27
   13f30:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13f34:	strdeq	r4, [r2], -ip
   13f38:	andeq	r4, r2, r8, lsl #27
   13f3c:	andeq	r4, r2, r4, ror #20
   13f40:	andeq	r4, r2, r0, lsl #28
   13f44:	andeq	r4, r2, r8, asr #27
   13f48:	andeq	r4, r2, r8, asr #21
   13f4c:	andeq	r4, r2, r4, lsr #21
   13f50:			; <UNDEFINED> instruction: 0x00024ab8
   13f54:	rsbvs	r6, r5, #478150656	; 0x1c800000
   13f58:	andeq	r4, r2, r4, ror #26
   13f5c:	ldrdeq	r4, [r2], -r0
   13f60:	andeq	r4, r2, r4, lsl #24
   13f64:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13f68:	andeq	r4, r2, r0, asr #23
   13f6c:	andeq	r2, r0, r8, ror r4
   13f70:	andeq	r4, r2, r4, lsr #24
   13f74:	andeq	r4, r2, r4, ror #24
   13f78:	andeq	r4, r2, ip, lsr sl
   13f7c:	andeq	r4, r2, r4, lsl sl
   13f80:	andeq	r4, r2, r0, asr #21
   13f84:	andeq	r4, r2, r8, asr #23
   13f88:	andeq	r4, r2, ip, lsl #21
   13f8c:	ldrdeq	r4, [r2], -r0
   13f90:	movtpl	r3, #24909	; 0x614d
   13f94:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13f98:	andeq	r4, r2, r0, ror #19
   13f9c:	andeq	r4, r2, r0, lsr #22
   13fa0:	andeq	r4, r2, ip, lsr #22
   13fa4:	andeq	r4, r2, ip, lsr #26
   13fa8:	andeq	r4, r2, r4, lsr fp
   13fac:	andeq	r4, r2, r0, lsl #23
   13fb0:	andeq	r4, r2, r8, ror fp
   13fb4:	andeq	r4, r2, r8, lsl #26
   13fb8:	strdeq	r4, [r2], -r8
   13fbc:	andeq	r4, r2, r4, lsr #20
   13fc0:	andeq	r4, r2, r0, asr #22
   13fc4:	andeq	r4, r2, ip, lsl sl
   13fc8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13fcc:	andeq	r4, r2, ip, lsl #22
   13fd0:	andeq	r4, r2, ip, lsl fp
   13fd4:	muleq	r2, ip, sp
   13fd8:	andeq	r4, r2, ip, ror ip
   13fdc:	andeq	r4, r2, ip, lsr fp
   13fe0:	andeq	r4, r2, r8, asr #19
   13fe4:			; <UNDEFINED> instruction: 0x00024bb4
   13fe8:	muleq	r2, ip, sl
   13fec:	bl	1164c <strchr@plt>
   13ff0:	mov	r6, fp
   13ff4:	cmp	r0, #0
   13ff8:	strbne	r7, [r8]
   13ffc:	addne	r8, r8, #1
   14000:	cmp	r4, fp
   14004:	bls	12f58 <__assert_fail@plt+0x1738>
   14008:	mov	fp, r6
   1400c:	ldr	r0, [pc, #-996]	; 13c30 <__assert_fail@plt+0x2410>
   14010:	ldrb	r7, [fp], #1
   14014:	mov	r9, r6
   14018:	mov	r1, r7
   1401c:	bl	1164c <strchr@plt>
   14020:	mov	r1, r7
   14024:	cmp	r0, #0
   14028:	mov	r0, sl
   1402c:	bne	13fec <__assert_fail@plt+0x27cc>
   14030:	cmp	r4, r6
   14034:	bls	12f58 <__assert_fail@plt+0x1738>
   14038:	add	r2, r8, #4
   1403c:	add	ip, r6, #4
   14040:	mov	r0, r2
   14044:	cmp	ip, r8
   14048:	cmphi	r0, r6
   1404c:	sub	r1, r4, fp
   14050:	mov	r2, ip
   14054:	add	r1, r1, #1
   14058:	movls	r2, #1
   1405c:	movhi	r2, #0
   14060:	cmp	r1, #11
   14064:	movls	r2, #0
   14068:	andhi	r2, r2, #1
   1406c:	cmp	r2, #0
   14070:	mov	sl, fp
   14074:	beq	144c0 <__assert_fail@plt+0x2ca0>
   14078:	rsb	r2, r6, #0
   1407c:	ands	r2, r2, #3
   14080:	beq	14290 <__assert_fail@plt+0x2a70>
   14084:	cmp	r2, #1
   14088:	strb	r7, [r8]
   1408c:	add	r9, r8, #1
   14090:	beq	140b8 <__assert_fail@plt+0x2898>
   14094:	ldrb	r0, [r6, #1]
   14098:	cmp	r2, #3
   1409c:	add	r9, r8, #2
   140a0:	strb	r0, [r8, #1]
   140a4:	add	sl, r6, #2
   140a8:	ldrbeq	r0, [r6, #2]
   140ac:	addeq	r9, r8, #3
   140b0:	addeq	sl, r6, #3
   140b4:	strbeq	r0, [r8, #2]
   140b8:	sub	r1, r1, r2
   140bc:	sub	r0, r1, #4
   140c0:	add	r6, r6, r2
   140c4:	lsr	r0, r0, #2
   140c8:	add	r0, r0, #1
   140cc:	add	r2, r8, r2
   140d0:	lsl	ip, r0, #2
   140d4:	mov	lr, #0
   140d8:	add	lr, lr, #1
   140dc:	ldr	r3, [r6], #4
   140e0:	cmp	r0, lr
   140e4:	str	r3, [r2], #4
   140e8:	bhi	140d8 <__assert_fail@plt+0x28b8>
   140ec:	b	12f10 <__assert_fail@plt+0x16f0>
   140f0:	ldr	r3, [pc, #-1220]	; 13c34 <__assert_fail@plt+0x2414>
   140f4:	ldr	r0, [r3]
   140f8:	ldr	r3, [r0, #20]
   140fc:	ldr	r2, [r0, #24]
   14100:	cmp	r3, r2
   14104:	addcc	r1, r3, #1
   14108:	movcc	r2, #63	; 0x3f
   1410c:	strcc	r1, [r0, #20]
   14110:	strbcc	r2, [r3]
   14114:	bcs	14454 <__assert_fail@plt+0x2c34>
   14118:	mov	r0, #0
   1411c:	add	sp, sp, #20
   14120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14124:	ldr	r2, [pc, #-1268]	; 13c38 <__assert_fail@plt+0x2418>
   14128:	cmp	r3, r2
   1412c:	beq	14f40 <__assert_fail@plt+0x3720>
   14130:	bgt	14218 <__assert_fail@plt+0x29f8>
   14134:	ldr	r2, [pc, #-1280]	; 13c3c <__assert_fail@plt+0x241c>
   14138:	cmp	r3, r2
   1413c:	beq	14d00 <__assert_fail@plt+0x34e0>
   14140:	bgt	143b0 <__assert_fail@plt+0x2b90>
   14144:	ldr	r2, [pc, #-1292]	; 13c40 <__assert_fail@plt+0x2420>
   14148:	cmp	r3, r2
   1414c:	beq	14b80 <__assert_fail@plt+0x3360>
   14150:	bgt	1463c <__assert_fail@plt+0x2e1c>
   14154:	ldr	r2, [pc, #-1304]	; 13c44 <__assert_fail@plt+0x2424>
   14158:	cmp	r3, r2
   1415c:	beq	14b8c <__assert_fail@plt+0x336c>
   14160:	bgt	1477c <__assert_fail@plt+0x2f5c>
   14164:	ldr	r2, [pc, #-1316]	; 13c48 <__assert_fail@plt+0x2428>
   14168:	cmp	r3, r2
   1416c:	beq	14ad8 <__assert_fail@plt+0x32b8>
   14170:	ldr	r2, [pc, #-1324]	; 13c4c <__assert_fail@plt+0x242c>
   14174:	cmp	r3, r2
   14178:	beq	14acc <__assert_fail@plt+0x32ac>
   1417c:	add	r2, r2, #-268435456	; 0xf0000000
   14180:	cmp	r3, r2
   14184:	bne	141f4 <__assert_fail@plt+0x29d4>
   14188:	ldr	r3, [pc, #-1344]	; 13c50 <__assert_fail@plt+0x2430>
   1418c:	str	r3, [sp, #8]
   14190:	b	13520 <__assert_fail@plt+0x1d00>
   14194:	ldr	r2, [pc, #-1352]	; 13c54 <__assert_fail@plt+0x2434>
   14198:	cmp	r3, r2
   1419c:	beq	14c34 <__assert_fail@plt+0x3414>
   141a0:	bgt	14308 <__assert_fail@plt+0x2ae8>
   141a4:	ldr	r2, [pc, #-1364]	; 13c58 <__assert_fail@plt+0x2438>
   141a8:	cmp	r3, r2
   141ac:	beq	14f4c <__assert_fail@plt+0x372c>
   141b0:	ble	145fc <__assert_fail@plt+0x2ddc>
   141b4:	ldr	r2, [pc, #-1376]	; 13c5c <__assert_fail@plt+0x243c>
   141b8:	cmp	r3, r2
   141bc:	beq	14b74 <__assert_fail@plt+0x3354>
   141c0:	ble	149ec <__assert_fail@plt+0x31cc>
   141c4:	ldr	r2, [pc, #-1388]	; 13c60 <__assert_fail@plt+0x2440>
   141c8:	cmp	r3, r2
   141cc:	beq	14c28 <__assert_fail@plt+0x3408>
   141d0:	ble	14da8 <__assert_fail@plt+0x3588>
   141d4:	ldr	r2, [pc, #-1400]	; 13c64 <__assert_fail@plt+0x2444>
   141d8:	cmp	r3, r2
   141dc:	beq	14d9c <__assert_fail@plt+0x357c>
   141e0:	ldr	r2, [pc, #-1408]	; 13c68 <__assert_fail@plt+0x2448>
   141e4:	cmp	r3, r2
   141e8:	ldreq	r3, [pc, #-1412]	; 13c6c <__assert_fail@plt+0x244c>
   141ec:	streq	r3, [sp, #8]
   141f0:	beq	13520 <__assert_fail@plt+0x1d00>
   141f4:	str	r3, [sp]
   141f8:	mov	r2, #21
   141fc:	ldr	r3, [pc, #-1428]	; 13c70 <__assert_fail@plt+0x2450>
   14200:	mov	r1, #1
   14204:	ldr	r0, [pc, #-1432]	; 13c74 <__assert_fail@plt+0x2454>
   14208:	bl	11688 <__sprintf_chk@plt>
   1420c:	ldr	r3, [pc, #-1440]	; 13c74 <__assert_fail@plt+0x2454>
   14210:	str	r3, [sp, #8]
   14214:	b	13520 <__assert_fail@plt+0x1d00>
   14218:	ldr	r2, [pc, #-1448]	; 13c78 <__assert_fail@plt+0x2458>
   1421c:	cmp	r3, r2
   14220:	beq	14c94 <__assert_fail@plt+0x3474>
   14224:	bgt	1435c <__assert_fail@plt+0x2b3c>
   14228:	sub	r2, r2, #20480	; 0x5000
   1422c:	cmp	r3, r2
   14230:	beq	14ac0 <__assert_fail@plt+0x32a0>
   14234:	bgt	1473c <__assert_fail@plt+0x2f1c>
   14238:	ldr	r2, [pc, #-1476]	; 13c7c <__assert_fail@plt+0x245c>
   1423c:	cmp	r3, r2
   14240:	beq	14bc8 <__assert_fail@plt+0x33a8>
   14244:	bgt	14868 <__assert_fail@plt+0x3048>
   14248:	ldr	r2, [pc, #-1488]	; 13c80 <__assert_fail@plt+0x2460>
   1424c:	cmp	r3, r2
   14250:	beq	14ebc <__assert_fail@plt+0x369c>
   14254:	add	r2, r2, #45	; 0x2d
   14258:	cmp	r3, r2
   1425c:	beq	14eb0 <__assert_fail@plt+0x3690>
   14260:	ldr	r2, [pc, #-1508]	; 13c84 <__assert_fail@plt+0x2464>
   14264:	cmp	r3, r2
   14268:	bne	141f4 <__assert_fail@plt+0x29d4>
   1426c:	ldr	r3, [pc, #-1516]	; 13c88 <__assert_fail@plt+0x2468>
   14270:	str	r3, [sp, #8]
   14274:	b	13520 <__assert_fail@plt+0x1d00>
   14278:	mov	sl, r6
   1427c:	mov	r9, r8
   14280:	b	13b88 <__assert_fail@plt+0x2368>
   14284:	mov	sl, r6
   14288:	mov	r9, r8
   1428c:	b	12edc <__assert_fail@plt+0x16bc>
   14290:	mov	sl, r6
   14294:	mov	r9, r8
   14298:	b	140b8 <__assert_fail@plt+0x2898>
   1429c:	mov	sl, r6
   142a0:	mov	r9, r8
   142a4:	b	13930 <__assert_fail@plt+0x2110>
   142a8:	mov	sl, r6
   142ac:	mov	r9, r8
   142b0:	b	13a5c <__assert_fail@plt+0x223c>
   142b4:	mov	sl, r6
   142b8:	mov	r9, r8
   142bc:	b	13464 <__assert_fail@plt+0x1c44>
   142c0:	mov	r9, sl
   142c4:	mov	r6, r7
   142c8:	b	13608 <__assert_fail@plt+0x1de8>
   142cc:	mov	lr, r6
   142d0:	mov	r9, r8
   142d4:	b	13048 <__assert_fail@plt+0x1828>
   142d8:	mov	sl, r6
   142dc:	mov	r9, r8
   142e0:	b	131e0 <__assert_fail@plt+0x19c0>
   142e4:	mov	sl, r6
   142e8:	mov	r9, r8
   142ec:	b	12d5c <__assert_fail@plt+0x153c>
   142f0:	mov	sl, r6
   142f4:	mov	r9, r8
   142f8:	b	13798 <__assert_fail@plt+0x1f78>
   142fc:	mov	sl, r6
   14300:	mov	r9, r8
   14304:	b	13314 <__assert_fail@plt+0x1af4>
   14308:	ldr	r2, [pc, #-1668]	; 13c8c <__assert_fail@plt+0x246c>
   1430c:	cmp	r3, r2
   14310:	beq	14b14 <__assert_fail@plt+0x32f4>
   14314:	ble	1467c <__assert_fail@plt+0x2e5c>
   14318:	ldr	r2, [pc, #-1680]	; 13c90 <__assert_fail@plt+0x2470>
   1431c:	cmp	r3, r2
   14320:	beq	14c04 <__assert_fail@plt+0x33e4>
   14324:	ble	14958 <__assert_fail@plt+0x3138>
   14328:	ldr	r2, [pc, #-1692]	; 13c94 <__assert_fail@plt+0x2474>
   1432c:	cmp	r3, r2
   14330:	beq	14cc4 <__assert_fail@plt+0x34a4>
   14334:	ble	14cac <__assert_fail@plt+0x348c>
   14338:	ldr	r2, [pc, #-1704]	; 13c98 <__assert_fail@plt+0x2478>
   1433c:	cmp	r3, r2
   14340:	beq	14ca0 <__assert_fail@plt+0x3480>
   14344:	ldr	r2, [pc, #-1712]	; 13c9c <__assert_fail@plt+0x247c>
   14348:	cmp	r3, r2
   1434c:	ldreq	r3, [pc, #-1716]	; 13ca0 <__assert_fail@plt+0x2480>
   14350:	streq	r3, [sp, #8]
   14354:	beq	13520 <__assert_fail@plt+0x1d00>
   14358:	b	141f4 <__assert_fail@plt+0x29d4>
   1435c:	ldr	r2, [pc, #-1728]	; 13ca4 <__assert_fail@plt+0x2484>
   14360:	cmp	r3, r2
   14364:	beq	14b20 <__assert_fail@plt+0x3300>
   14368:	ble	146bc <__assert_fail@plt+0x2e9c>
   1436c:	ldr	r2, [pc, #-1740]	; 13ca8 <__assert_fail@plt+0x2488>
   14370:	cmp	r3, r2
   14374:	beq	14bf8 <__assert_fail@plt+0x33d8>
   14378:	ble	14928 <__assert_fail@plt+0x3108>
   1437c:	ldr	r2, [pc, #-1752]	; 13cac <__assert_fail@plt+0x248c>
   14380:	cmp	r3, r2
   14384:	beq	14d30 <__assert_fail@plt+0x3510>
   14388:	ble	14d18 <__assert_fail@plt+0x34f8>
   1438c:	ldr	r2, [pc, #-1764]	; 13cb0 <__assert_fail@plt+0x2490>
   14390:	cmp	r3, r2
   14394:	beq	14d0c <__assert_fail@plt+0x34ec>
   14398:	add	r2, r2, #1
   1439c:	cmp	r3, r2
   143a0:	ldreq	r3, [pc, #-1780]	; 13cb4 <__assert_fail@plt+0x2494>
   143a4:	streq	r3, [sp, #8]
   143a8:	beq	13520 <__assert_fail@plt+0x1d00>
   143ac:	b	141f4 <__assert_fail@plt+0x29d4>
   143b0:	ldr	r2, [pc, #-1792]	; 13cb8 <__assert_fail@plt+0x2498>
   143b4:	cmp	r3, r2
   143b8:	beq	14f1c <__assert_fail@plt+0x36fc>
   143bc:	ble	145c4 <__assert_fail@plt+0x2da4>
   143c0:	ldr	r2, [pc, #-1804]	; 13cbc <__assert_fail@plt+0x249c>
   143c4:	cmp	r3, r2
   143c8:	beq	14c1c <__assert_fail@plt+0x33fc>
   143cc:	ble	149bc <__assert_fail@plt+0x319c>
   143d0:	ldr	r2, [pc, #-1816]	; 13cc0 <__assert_fail@plt+0x24a0>
   143d4:	cmp	r3, r2
   143d8:	beq	14e08 <__assert_fail@plt+0x35e8>
   143dc:	ble	14df0 <__assert_fail@plt+0x35d0>
   143e0:	cmp	r3, #16384	; 0x4000
   143e4:	beq	14de4 <__assert_fail@plt+0x35c4>
   143e8:	ldr	r2, [pc, #-1836]	; 13cc4 <__assert_fail@plt+0x24a4>
   143ec:	cmp	r3, r2
   143f0:	ldreq	r3, [pc, #-1168]	; 13f68 <__assert_fail@plt+0x2748>
   143f4:	streq	r3, [sp, #8]
   143f8:	beq	13520 <__assert_fail@plt+0x1d00>
   143fc:	b	141f4 <__assert_fail@plt+0x29d4>
   14400:	ldr	r2, [pc, #-1856]	; 13cc8 <__assert_fail@plt+0x24a8>
   14404:	cmp	r3, r2
   14408:	beq	14f10 <__assert_fail@plt+0x36f0>
   1440c:	ble	14580 <__assert_fail@plt+0x2d60>
   14410:	ldr	r2, [pc, #-1868]	; 13ccc <__assert_fail@plt+0x24ac>
   14414:	cmp	r3, r2
   14418:	beq	14a90 <__assert_fail@plt+0x3270>
   1441c:	ble	14a54 <__assert_fail@plt+0x3234>
   14420:	ldr	r2, [pc, #-1880]	; 13cd0 <__assert_fail@plt+0x24b0>
   14424:	cmp	r3, r2
   14428:	beq	14e74 <__assert_fail@plt+0x3654>
   1442c:	ble	14e5c <__assert_fail@plt+0x363c>
   14430:	ldr	r2, [pc, #-1892]	; 13cd4 <__assert_fail@plt+0x24b4>
   14434:	cmp	r3, r2
   14438:	beq	14e50 <__assert_fail@plt+0x3630>
   1443c:	ldr	r2, [pc, #-1900]	; 13cd8 <__assert_fail@plt+0x24b8>
   14440:	cmp	r3, r2
   14444:	ldreq	r3, [pc, #-1904]	; 13cdc <__assert_fail@plt+0x24bc>
   14448:	streq	r3, [sp, #8]
   1444c:	beq	13520 <__assert_fail@plt+0x1d00>
   14450:	b	141f4 <__assert_fail@plt+0x29d4>
   14454:	mov	r1, #63	; 0x3f
   14458:	bl	11724 <__overflow@plt>
   1445c:	b	14118 <__assert_fail@plt+0x28f8>
   14460:	sub	r2, r8, #1
   14464:	ldrb	r3, [r9], #1
   14468:	cmp	r4, r9
   1446c:	strb	r3, [r2, #1]!
   14470:	bne	14464 <__assert_fail@plt+0x2c44>
   14474:	b	12f4c <__assert_fail@plt+0x172c>
   14478:	sub	r2, r8, #1
   1447c:	ldrb	r3, [r9], #1
   14480:	cmp	r4, r9
   14484:	strb	r3, [r2, #1]!
   14488:	bne	1447c <__assert_fail@plt+0x2c5c>
   1448c:	b	12f4c <__assert_fail@plt+0x172c>
   14490:	sub	r2, r8, #1
   14494:	ldrb	r3, [r9], #1
   14498:	cmp	r4, r9
   1449c:	strb	r3, [r2, #1]!
   144a0:	bne	14494 <__assert_fail@plt+0x2c74>
   144a4:	b	130b8 <__assert_fail@plt+0x1898>
   144a8:	sub	r2, r8, #1
   144ac:	ldrb	r3, [r9], #1
   144b0:	cmp	r4, r9
   144b4:	strb	r3, [r2, #1]!
   144b8:	bne	144ac <__assert_fail@plt+0x2c8c>
   144bc:	b	12dcc <__assert_fail@plt+0x15ac>
   144c0:	sub	r2, r8, #1
   144c4:	ldrb	r3, [r9], #1
   144c8:	cmp	r4, r9
   144cc:	strb	r3, [r2, #1]!
   144d0:	bne	144c4 <__assert_fail@plt+0x2ca4>
   144d4:	b	12f4c <__assert_fail@plt+0x172c>
   144d8:	sub	r2, r8, #1
   144dc:	ldrb	r3, [r9], #1
   144e0:	cmp	r4, r9
   144e4:	strb	r3, [r2, #1]!
   144e8:	bne	144dc <__assert_fail@plt+0x2cbc>
   144ec:	b	13808 <__assert_fail@plt+0x1fe8>
   144f0:	sub	r3, r7, #1
   144f4:	ldrb	r2, [r8], #1
   144f8:	cmp	r4, r8
   144fc:	strb	r2, [r3, #1]!
   14500:	bne	144f4 <__assert_fail@plt+0x2cd4>
   14504:	b	13678 <__assert_fail@plt+0x1e58>
   14508:	sub	r2, r8, #1
   1450c:	ldrb	r3, [r9], #1
   14510:	cmp	r4, r9
   14514:	strb	r3, [r2, #1]!
   14518:	bne	1450c <__assert_fail@plt+0x2cec>
   1451c:	b	13808 <__assert_fail@plt+0x1fe8>
   14520:	sub	r2, r8, #1
   14524:	ldrb	r3, [r9], #1
   14528:	cmp	r4, r9
   1452c:	strb	r3, [r2, #1]!
   14530:	bne	14524 <__assert_fail@plt+0x2d04>
   14534:	b	13808 <__assert_fail@plt+0x1fe8>
   14538:	sub	r2, r8, #1
   1453c:	ldrb	r3, [r9], #1
   14540:	cmp	r4, r9
   14544:	strb	r3, [r2, #1]!
   14548:	bne	1453c <__assert_fail@plt+0x2d1c>
   1454c:	b	12dcc <__assert_fail@plt+0x15ac>
   14550:	sub	r2, r8, #1
   14554:	ldrb	r3, [r9], #1
   14558:	cmp	r4, r9
   1455c:	strb	r3, [r2, #1]!
   14560:	bne	14554 <__assert_fail@plt+0x2d34>
   14564:	b	13808 <__assert_fail@plt+0x1fe8>
   14568:	sub	r2, r8, #1
   1456c:	ldrb	r3, [r9], #1
   14570:	cmp	r4, r9
   14574:	strb	r3, [r2, #1]!
   14578:	bne	1456c <__assert_fail@plt+0x2d4c>
   1457c:	b	12f4c <__assert_fail@plt+0x172c>
   14580:	ldr	r2, [pc, #-2216]	; 13ce0 <__assert_fail@plt+0x24c0>
   14584:	cmp	r3, r2
   14588:	beq	14bb0 <__assert_fail@plt+0x3390>
   1458c:	bgt	14808 <__assert_fail@plt+0x2fe8>
   14590:	ldr	r2, [pc, #-2228]	; 13ce4 <__assert_fail@plt+0x24c4>
   14594:	cmp	r3, r2
   14598:	beq	14e20 <__assert_fail@plt+0x3600>
   1459c:	add	r2, r2, #194560	; 0x2f800
   145a0:	add	r2, r2, #796	; 0x31c
   145a4:	cmp	r3, r2
   145a8:	beq	14e14 <__assert_fail@plt+0x35f4>
   145ac:	ldr	r2, [pc, #-2252]	; 13ce8 <__assert_fail@plt+0x24c8>
   145b0:	cmp	r3, r2
   145b4:	bne	141f4 <__assert_fail@plt+0x29d4>
   145b8:	ldr	r3, [pc, #-2260]	; 13cec <__assert_fail@plt+0x24cc>
   145bc:	str	r3, [sp, #8]
   145c0:	b	13520 <__assert_fail@plt+0x1d00>
   145c4:	cmp	r3, #51	; 0x33
   145c8:	beq	14ba4 <__assert_fail@plt+0x3384>
   145cc:	bgt	147dc <__assert_fail@plt+0x2fbc>
   145d0:	ldr	r2, [pc, #-2280]	; 13cf0 <__assert_fail@plt+0x24d0>
   145d4:	cmp	r3, r2
   145d8:	beq	14c70 <__assert_fail@plt+0x3450>
   145dc:	cmp	r3, #47	; 0x2f
   145e0:	beq	14c64 <__assert_fail@plt+0x3444>
   145e4:	add	r2, r2, #-16777216	; 0xff000000
   145e8:	cmp	r3, r2
   145ec:	bne	141f4 <__assert_fail@plt+0x29d4>
   145f0:	ldr	r3, [pc, #-2308]	; 13cf4 <__assert_fail@plt+0x24d4>
   145f4:	str	r3, [sp, #8]
   145f8:	b	13520 <__assert_fail@plt+0x1d00>
   145fc:	ldr	r2, [pc, #-2316]	; 13cf8 <__assert_fail@plt+0x24d8>
   14600:	cmp	r3, r2
   14604:	beq	14bbc <__assert_fail@plt+0x339c>
   14608:	bgt	14838 <__assert_fail@plt+0x3018>
   1460c:	ldr	r2, [pc, #-2328]	; 13cfc <__assert_fail@plt+0x24dc>
   14610:	cmp	r3, r2
   14614:	beq	14d78 <__assert_fail@plt+0x3558>
   14618:	ldr	r2, [pc, #-2336]	; 13d00 <__assert_fail@plt+0x24e0>
   1461c:	cmp	r3, r2
   14620:	beq	14d6c <__assert_fail@plt+0x354c>
   14624:	ldr	r2, [pc, #-2344]	; 13d04 <__assert_fail@plt+0x24e4>
   14628:	cmp	r3, r2
   1462c:	bne	141f4 <__assert_fail@plt+0x29d4>
   14630:	ldr	r3, [pc, #-2140]	; 13ddc <__assert_fail@plt+0x25bc>
   14634:	str	r3, [sp, #8]
   14638:	b	13520 <__assert_fail@plt+0x1d00>
   1463c:	ldr	r2, [pc, #-2364]	; 13d08 <__assert_fail@plt+0x24e8>
   14640:	cmp	r3, r2
   14644:	beq	14bd4 <__assert_fail@plt+0x33b4>
   14648:	bgt	14898 <__assert_fail@plt+0x3078>
   1464c:	ldr	r2, [pc, #-2376]	; 13d0c <__assert_fail@plt+0x24ec>
   14650:	cmp	r3, r2
   14654:	beq	14cdc <__assert_fail@plt+0x34bc>
   14658:	ldr	r2, [pc, #-2384]	; 13d10 <__assert_fail@plt+0x24f0>
   1465c:	cmp	r3, r2
   14660:	beq	14cd0 <__assert_fail@plt+0x34b0>
   14664:	ldr	r2, [pc, #-2392]	; 13d14 <__assert_fail@plt+0x24f4>
   14668:	cmp	r3, r2
   1466c:	bne	141f4 <__assert_fail@plt+0x29d4>
   14670:	ldr	r3, [pc, #-2400]	; 13d18 <__assert_fail@plt+0x24f8>
   14674:	str	r3, [sp, #8]
   14678:	b	13520 <__assert_fail@plt+0x1d00>
   1467c:	ldr	r2, [pc, #-2408]	; 13d1c <__assert_fail@plt+0x24fc>
   14680:	cmp	r3, r2
   14684:	beq	14bec <__assert_fail@plt+0x33cc>
   14688:	bgt	148f8 <__assert_fail@plt+0x30d8>
   1468c:	ldr	r2, [pc, #-2420]	; 13d20 <__assert_fail@plt+0x2500>
   14690:	cmp	r3, r2
   14694:	beq	14d48 <__assert_fail@plt+0x3528>
   14698:	ldr	r2, [pc, #-2428]	; 13d24 <__assert_fail@plt+0x2504>
   1469c:	cmp	r3, r2
   146a0:	beq	14d3c <__assert_fail@plt+0x351c>
   146a4:	ldr	r2, [pc, #-2436]	; 13d28 <__assert_fail@plt+0x2508>
   146a8:	cmp	r3, r2
   146ac:	bne	141f4 <__assert_fail@plt+0x29d4>
   146b0:	ldr	r3, [pc, #-2444]	; 13d2c <__assert_fail@plt+0x250c>
   146b4:	str	r3, [sp, #8]
   146b8:	b	13520 <__assert_fail@plt+0x1d00>
   146bc:	ldr	r2, [pc, #-2452]	; 13d30 <__assert_fail@plt+0x2510>
   146c0:	cmp	r3, r2
   146c4:	beq	14be0 <__assert_fail@plt+0x33c0>
   146c8:	bgt	148c8 <__assert_fail@plt+0x30a8>
   146cc:	ldr	r2, [pc, #-2464]	; 13d34 <__assert_fail@plt+0x2514>
   146d0:	cmp	r3, r2
   146d4:	beq	14e8c <__assert_fail@plt+0x366c>
   146d8:	add	r2, r2, #2
   146dc:	cmp	r3, r2
   146e0:	beq	14e80 <__assert_fail@plt+0x3660>
   146e4:	ldr	r2, [pc, #-2484]	; 13d38 <__assert_fail@plt+0x2518>
   146e8:	cmp	r3, r2
   146ec:	bne	141f4 <__assert_fail@plt+0x29d4>
   146f0:	ldr	r3, [pc, #-2492]	; 13d3c <__assert_fail@plt+0x251c>
   146f4:	str	r3, [sp, #8]
   146f8:	b	13520 <__assert_fail@plt+0x1d00>
   146fc:	ldr	r2, [pc, #-2500]	; 13d40 <__assert_fail@plt+0x2520>
   14700:	cmp	r3, r2
   14704:	beq	14a84 <__assert_fail@plt+0x3264>
   14708:	bgt	14a24 <__assert_fail@plt+0x3204>
   1470c:	ldr	r2, [pc, #-2512]	; 13d44 <__assert_fail@plt+0x2524>
   14710:	cmp	r3, r2
   14714:	beq	14eec <__assert_fail@plt+0x36cc>
   14718:	ldr	r2, [pc, #-2520]	; 13d48 <__assert_fail@plt+0x2528>
   1471c:	cmp	r3, r2
   14720:	beq	14ee0 <__assert_fail@plt+0x36c0>
   14724:	ldr	r2, [pc, #-2528]	; 13d4c <__assert_fail@plt+0x252c>
   14728:	cmp	r3, r2
   1472c:	bne	141f4 <__assert_fail@plt+0x29d4>
   14730:	ldr	r3, [pc, #-2536]	; 13d50 <__assert_fail@plt+0x2530>
   14734:	str	r3, [sp, #8]
   14738:	b	13520 <__assert_fail@plt+0x1d00>
   1473c:	ldr	r2, [pc, #-2544]	; 13d54 <__assert_fail@plt+0x2534>
   14740:	cmp	r3, r2
   14744:	beq	14c10 <__assert_fail@plt+0x33f0>
   14748:	bgt	1498c <__assert_fail@plt+0x316c>
   1474c:	ldr	r2, [pc, #-2556]	; 13d58 <__assert_fail@plt+0x2538>
   14750:	cmp	r3, r2
   14754:	beq	14b50 <__assert_fail@plt+0x3330>
   14758:	add	r2, r2, #65	; 0x41
   1475c:	cmp	r3, r2
   14760:	beq	14b44 <__assert_fail@plt+0x3324>
   14764:	ldr	r2, [pc, #-2576]	; 13d5c <__assert_fail@plt+0x253c>
   14768:	cmp	r3, r2
   1476c:	bne	141f4 <__assert_fail@plt+0x29d4>
   14770:	ldr	r3, [pc, #-2584]	; 13d60 <__assert_fail@plt+0x2540>
   14774:	str	r3, [sp, #8]
   14778:	b	13520 <__assert_fail@plt+0x1d00>
   1477c:	ldr	r2, [pc, #-2592]	; 13d64 <__assert_fail@plt+0x2544>
   14780:	cmp	r3, r2
   14784:	beq	14af0 <__assert_fail@plt+0x32d0>
   14788:	ldr	r2, [pc, #-2600]	; 13d68 <__assert_fail@plt+0x2548>
   1478c:	cmp	r3, r2
   14790:	beq	14ae4 <__assert_fail@plt+0x32c4>
   14794:	ldr	r2, [pc, #-2608]	; 13d6c <__assert_fail@plt+0x254c>
   14798:	cmp	r3, r2
   1479c:	bne	141f4 <__assert_fail@plt+0x29d4>
   147a0:	ldr	r3, [pc, #-2616]	; 13d70 <__assert_fail@plt+0x2550>
   147a4:	str	r3, [sp, #8]
   147a8:	b	13520 <__assert_fail@plt+0x1d00>
   147ac:	ldr	r2, [pc, #-2624]	; 13d74 <__assert_fail@plt+0x2554>
   147b0:	cmp	r3, r2
   147b4:	beq	14c88 <__assert_fail@plt+0x3468>
   147b8:	ldr	r2, [pc, #-2632]	; 13d78 <__assert_fail@plt+0x2558>
   147bc:	cmp	r3, r2
   147c0:	beq	14c7c <__assert_fail@plt+0x345c>
   147c4:	ldr	r2, [pc, #-2640]	; 13d7c <__assert_fail@plt+0x255c>
   147c8:	cmp	r3, r2
   147cc:	bne	141f4 <__assert_fail@plt+0x29d4>
   147d0:	ldr	r3, [pc, #-2648]	; 13d80 <__assert_fail@plt+0x2560>
   147d4:	str	r3, [sp, #8]
   147d8:	b	13520 <__assert_fail@plt+0x1d00>
   147dc:	cmp	r3, #1984	; 0x7c0
   147e0:	beq	14e38 <__assert_fail@plt+0x3618>
   147e4:	ldr	r2, [pc, #-2664]	; 13d84 <__assert_fail@plt+0x2564>
   147e8:	cmp	r3, r2
   147ec:	beq	14e2c <__assert_fail@plt+0x360c>
   147f0:	ldr	r2, [pc, #-2672]	; 13d88 <__assert_fail@plt+0x2568>
   147f4:	cmp	r3, r2
   147f8:	bne	141f4 <__assert_fail@plt+0x29d4>
   147fc:	ldr	r3, [pc, #-2680]	; 13d8c <__assert_fail@plt+0x256c>
   14800:	str	r3, [sp, #8]
   14804:	b	13520 <__assert_fail@plt+0x1d00>
   14808:	ldr	r2, [pc, #-2688]	; 13d90 <__assert_fail@plt+0x2570>
   1480c:	cmp	r3, r2
   14810:	beq	14d90 <__assert_fail@plt+0x3570>
   14814:	ldr	r2, [pc, #-2696]	; 13d94 <__assert_fail@plt+0x2574>
   14818:	cmp	r3, r2
   1481c:	beq	14d84 <__assert_fail@plt+0x3564>
   14820:	ldr	r2, [pc, #-2704]	; 13d98 <__assert_fail@plt+0x2578>
   14824:	cmp	r3, r2
   14828:	bne	141f4 <__assert_fail@plt+0x29d4>
   1482c:	ldr	r3, [pc, #-2712]	; 13d9c <__assert_fail@plt+0x257c>
   14830:	str	r3, [sp, #8]
   14834:	b	13520 <__assert_fail@plt+0x1d00>
   14838:	ldr	r2, [pc, #-2720]	; 13da0 <__assert_fail@plt+0x2580>
   1483c:	cmp	r3, r2
   14840:	beq	14ed4 <__assert_fail@plt+0x36b4>
   14844:	ldr	r2, [pc, #-2728]	; 13da4 <__assert_fail@plt+0x2584>
   14848:	cmp	r3, r2
   1484c:	beq	14ec8 <__assert_fail@plt+0x36a8>
   14850:	ldr	r2, [pc, #-2736]	; 13da8 <__assert_fail@plt+0x2588>
   14854:	cmp	r3, r2
   14858:	bne	141f4 <__assert_fail@plt+0x29d4>
   1485c:	ldr	r3, [pc, #-2744]	; 13dac <__assert_fail@plt+0x258c>
   14860:	str	r3, [sp, #8]
   14864:	b	13520 <__assert_fail@plt+0x1d00>
   14868:	ldr	r2, [pc, #-2752]	; 13db0 <__assert_fail@plt+0x2590>
   1486c:	cmp	r3, r2
   14870:	beq	14cf4 <__assert_fail@plt+0x34d4>
   14874:	ldr	r2, [pc, #-2760]	; 13db4 <__assert_fail@plt+0x2594>
   14878:	cmp	r3, r2
   1487c:	beq	14ce8 <__assert_fail@plt+0x34c8>
   14880:	ldr	r2, [pc, #-2768]	; 13db8 <__assert_fail@plt+0x2598>
   14884:	cmp	r3, r2
   14888:	bne	141f4 <__assert_fail@plt+0x29d4>
   1488c:	ldr	r3, [pc, #-2776]	; 13dbc <__assert_fail@plt+0x259c>
   14890:	str	r3, [sp, #8]
   14894:	b	13520 <__assert_fail@plt+0x1d00>
   14898:	ldr	r2, [pc, #-2784]	; 13dc0 <__assert_fail@plt+0x25a0>
   1489c:	cmp	r3, r2
   148a0:	beq	14ea4 <__assert_fail@plt+0x3684>
   148a4:	ldr	r2, [pc, #-2792]	; 13dc4 <__assert_fail@plt+0x25a4>
   148a8:	cmp	r3, r2
   148ac:	beq	14e98 <__assert_fail@plt+0x3678>
   148b0:	ldr	r2, [pc, #-2800]	; 13dc8 <__assert_fail@plt+0x25a8>
   148b4:	cmp	r3, r2
   148b8:	bne	141f4 <__assert_fail@plt+0x29d4>
   148bc:	ldr	r3, [pc, #-2808]	; 13dcc <__assert_fail@plt+0x25ac>
   148c0:	str	r3, [sp, #8]
   148c4:	b	13520 <__assert_fail@plt+0x1d00>
   148c8:	ldr	r2, [pc, #-2816]	; 13dd0 <__assert_fail@plt+0x25b0>
   148cc:	cmp	r3, r2
   148d0:	beq	14d60 <__assert_fail@plt+0x3540>
   148d4:	ldr	r2, [pc, #-2824]	; 13dd4 <__assert_fail@plt+0x25b4>
   148d8:	cmp	r3, r2
   148dc:	beq	14d54 <__assert_fail@plt+0x3534>
   148e0:	ldr	r2, [pc, #-2832]	; 13dd8 <__assert_fail@plt+0x25b8>
   148e4:	cmp	r3, r2
   148e8:	bne	141f4 <__assert_fail@plt+0x29d4>
   148ec:	ldr	r3, [pc, #-2840]	; 13ddc <__assert_fail@plt+0x25bc>
   148f0:	str	r3, [sp, #8]
   148f4:	b	13520 <__assert_fail@plt+0x1d00>
   148f8:	ldr	r2, [pc, #-2848]	; 13de0 <__assert_fail@plt+0x25c0>
   148fc:	cmp	r3, r2
   14900:	beq	14b38 <__assert_fail@plt+0x3318>
   14904:	ldr	r2, [pc, #-2856]	; 13de4 <__assert_fail@plt+0x25c4>
   14908:	cmp	r3, r2
   1490c:	beq	14b2c <__assert_fail@plt+0x330c>
   14910:	ldr	r2, [pc, #-2864]	; 13de8 <__assert_fail@plt+0x25c8>
   14914:	cmp	r3, r2
   14918:	bne	141f4 <__assert_fail@plt+0x29d4>
   1491c:	ldr	r3, [pc, #-2872]	; 13dec <__assert_fail@plt+0x25cc>
   14920:	str	r3, [sp, #8]
   14924:	b	13520 <__assert_fail@plt+0x1d00>
   14928:	ldr	r2, [pc, #-2880]	; 13df0 <__assert_fail@plt+0x25d0>
   1492c:	cmp	r3, r2
   14930:	beq	14b08 <__assert_fail@plt+0x32e8>
   14934:	add	r2, r2, #3
   14938:	cmp	r3, r2
   1493c:	beq	14afc <__assert_fail@plt+0x32dc>
   14940:	ldr	r2, [pc, #-2900]	; 13df4 <__assert_fail@plt+0x25d4>
   14944:	cmp	r3, r2
   14948:	bne	141f4 <__assert_fail@plt+0x29d4>
   1494c:	ldr	r3, [pc, #-2908]	; 13df8 <__assert_fail@plt+0x25d8>
   14950:	str	r3, [sp, #8]
   14954:	b	13520 <__assert_fail@plt+0x1d00>
   14958:	ldr	r2, [pc, #-2916]	; 13dfc <__assert_fail@plt+0x25dc>
   1495c:	cmp	r3, r2
   14960:	beq	14b68 <__assert_fail@plt+0x3348>
   14964:	add	r2, r2, #195584	; 0x2fc00
   14968:	add	r2, r2, #972	; 0x3cc
   1496c:	cmp	r3, r2
   14970:	beq	14b5c <__assert_fail@plt+0x333c>
   14974:	ldr	r2, [pc, #-2940]	; 13e00 <__assert_fail@plt+0x25e0>
   14978:	cmp	r3, r2
   1497c:	bne	141f4 <__assert_fail@plt+0x29d4>
   14980:	ldr	r3, [pc, #-2948]	; 13e04 <__assert_fail@plt+0x25e4>
   14984:	str	r3, [sp, #8]
   14988:	b	13520 <__assert_fail@plt+0x1d00>
   1498c:	ldr	r2, [pc, #-2956]	; 13e08 <__assert_fail@plt+0x25e8>
   14990:	cmp	r3, r2
   14994:	beq	14f34 <__assert_fail@plt+0x3714>
   14998:	add	r2, r2, #1
   1499c:	cmp	r3, r2
   149a0:	beq	14f28 <__assert_fail@plt+0x3708>
   149a4:	sub	r2, r2, #2
   149a8:	cmp	r3, r2
   149ac:	bne	141f4 <__assert_fail@plt+0x29d4>
   149b0:	ldr	r3, [pc, #-2988]	; 13e0c <__assert_fail@plt+0x25ec>
   149b4:	str	r3, [sp, #8]
   149b8:	b	13520 <__assert_fail@plt+0x1d00>
   149bc:	ldr	r2, [pc, #-2996]	; 13e10 <__assert_fail@plt+0x25f0>
   149c0:	cmp	r3, r2
   149c4:	beq	14dcc <__assert_fail@plt+0x35ac>
   149c8:	ldr	r2, [pc, #-3004]	; 13e14 <__assert_fail@plt+0x25f4>
   149cc:	cmp	r3, r2
   149d0:	beq	14dc0 <__assert_fail@plt+0x35a0>
   149d4:	ldr	r2, [pc, #-3012]	; 13e18 <__assert_fail@plt+0x25f8>
   149d8:	cmp	r3, r2
   149dc:	bne	141f4 <__assert_fail@plt+0x29d4>
   149e0:	ldr	r3, [pc, #-3020]	; 13e1c <__assert_fail@plt+0x25fc>
   149e4:	str	r3, [sp, #8]
   149e8:	b	13520 <__assert_fail@plt+0x1d00>
   149ec:	ldr	r2, [pc, #-3028]	; 13e20 <__assert_fail@plt+0x2600>
   149f0:	cmp	r3, r2
   149f4:	beq	14f04 <__assert_fail@plt+0x36e4>
   149f8:	add	r2, r2, #15597568	; 0xee0000
   149fc:	add	r2, r2, #65280	; 0xff00
   14a00:	add	r2, r2, #3
   14a04:	cmp	r3, r2
   14a08:	beq	14ef8 <__assert_fail@plt+0x36d8>
   14a0c:	ldr	r2, [pc, #-3056]	; 13e24 <__assert_fail@plt+0x2604>
   14a10:	cmp	r3, r2
   14a14:	bne	141f4 <__assert_fail@plt+0x29d4>
   14a18:	ldr	r3, [pc, #-3064]	; 13e28 <__assert_fail@plt+0x2608>
   14a1c:	str	r3, [sp, #8]
   14a20:	b	13520 <__assert_fail@plt+0x1d00>
   14a24:	ldr	r2, [pc, #-3072]	; 13e2c <__assert_fail@plt+0x260c>
   14a28:	cmp	r3, r2
   14a2c:	beq	14f64 <__assert_fail@plt+0x3744>
   14a30:	ldr	r2, [pc, #-3080]	; 13e30 <__assert_fail@plt+0x2610>
   14a34:	cmp	r3, r2
   14a38:	beq	14f58 <__assert_fail@plt+0x3738>
   14a3c:	ldr	r2, [pc, #-3088]	; 13e34 <__assert_fail@plt+0x2614>
   14a40:	cmp	r3, r2
   14a44:	bne	141f4 <__assert_fail@plt+0x29d4>
   14a48:	ldr	r3, [pc, #-3096]	; 13e38 <__assert_fail@plt+0x2618>
   14a4c:	str	r3, [sp, #8]
   14a50:	b	13520 <__assert_fail@plt+0x1d00>
   14a54:	ldr	r2, [pc, #-3104]	; 13e3c <__assert_fail@plt+0x261c>
   14a58:	cmp	r3, r2
   14a5c:	beq	14aa8 <__assert_fail@plt+0x3288>
   14a60:	ldr	r2, [pc, #-3112]	; 13e40 <__assert_fail@plt+0x2620>
   14a64:	cmp	r3, r2
   14a68:	beq	14a9c <__assert_fail@plt+0x327c>
   14a6c:	ldr	r2, [pc, #-3120]	; 13e44 <__assert_fail@plt+0x2624>
   14a70:	cmp	r3, r2
   14a74:	bne	141f4 <__assert_fail@plt+0x29d4>
   14a78:	ldr	r3, [pc, #-3128]	; 13e48 <__assert_fail@plt+0x2628>
   14a7c:	str	r3, [sp, #8]
   14a80:	b	13520 <__assert_fail@plt+0x1d00>
   14a84:	ldr	r3, [pc, #-3136]	; 13e4c <__assert_fail@plt+0x262c>
   14a88:	str	r3, [sp, #8]
   14a8c:	b	13520 <__assert_fail@plt+0x1d00>
   14a90:	ldr	r3, [pc, #-3144]	; 13e50 <__assert_fail@plt+0x2630>
   14a94:	str	r3, [sp, #8]
   14a98:	b	13520 <__assert_fail@plt+0x1d00>
   14a9c:	ldr	r3, [pc, #-3152]	; 13e54 <__assert_fail@plt+0x2634>
   14aa0:	str	r3, [sp, #8]
   14aa4:	b	13520 <__assert_fail@plt+0x1d00>
   14aa8:	ldr	r3, [pc, #-3160]	; 13e58 <__assert_fail@plt+0x2638>
   14aac:	str	r3, [sp, #8]
   14ab0:	b	13520 <__assert_fail@plt+0x1d00>
   14ab4:	ldr	r3, [pc, #-3168]	; 13e5c <__assert_fail@plt+0x263c>
   14ab8:	str	r3, [sp, #8]
   14abc:	b	13520 <__assert_fail@plt+0x1d00>
   14ac0:	ldr	r3, [pc, #-3176]	; 13e60 <__assert_fail@plt+0x2640>
   14ac4:	str	r3, [sp, #8]
   14ac8:	b	13520 <__assert_fail@plt+0x1d00>
   14acc:	ldr	r3, [pc, #-3184]	; 13e64 <__assert_fail@plt+0x2644>
   14ad0:	str	r3, [sp, #8]
   14ad4:	b	13520 <__assert_fail@plt+0x1d00>
   14ad8:	ldr	r3, [pc, #-3192]	; 13e68 <__assert_fail@plt+0x2648>
   14adc:	str	r3, [sp, #8]
   14ae0:	b	13520 <__assert_fail@plt+0x1d00>
   14ae4:	ldr	r3, [pc, #-3200]	; 13e6c <__assert_fail@plt+0x264c>
   14ae8:	str	r3, [sp, #8]
   14aec:	b	13520 <__assert_fail@plt+0x1d00>
   14af0:	ldr	r3, [pc, #-3208]	; 13e70 <__assert_fail@plt+0x2650>
   14af4:	str	r3, [sp, #8]
   14af8:	b	13520 <__assert_fail@plt+0x1d00>
   14afc:	ldr	r3, [pc, #-3216]	; 13e74 <__assert_fail@plt+0x2654>
   14b00:	str	r3, [sp, #8]
   14b04:	b	13520 <__assert_fail@plt+0x1d00>
   14b08:	ldr	r3, [pc, #-3224]	; 13e78 <__assert_fail@plt+0x2658>
   14b0c:	str	r3, [sp, #8]
   14b10:	b	13520 <__assert_fail@plt+0x1d00>
   14b14:	ldr	r3, [pc, #-3232]	; 13e7c <__assert_fail@plt+0x265c>
   14b18:	str	r3, [sp, #8]
   14b1c:	b	13520 <__assert_fail@plt+0x1d00>
   14b20:	ldr	r3, [pc, #-3240]	; 13e80 <__assert_fail@plt+0x2660>
   14b24:	str	r3, [sp, #8]
   14b28:	b	13520 <__assert_fail@plt+0x1d00>
   14b2c:	ldr	r3, [pc, #-3248]	; 13e84 <__assert_fail@plt+0x2664>
   14b30:	str	r3, [sp, #8]
   14b34:	b	13520 <__assert_fail@plt+0x1d00>
   14b38:	ldr	r3, [pc, #-3256]	; 13e88 <__assert_fail@plt+0x2668>
   14b3c:	str	r3, [sp, #8]
   14b40:	b	13520 <__assert_fail@plt+0x1d00>
   14b44:	ldr	r3, [pc, #-3264]	; 13e8c <__assert_fail@plt+0x266c>
   14b48:	str	r3, [sp, #8]
   14b4c:	b	13520 <__assert_fail@plt+0x1d00>
   14b50:	ldr	r3, [pc, #-3272]	; 13e90 <__assert_fail@plt+0x2670>
   14b54:	str	r3, [sp, #8]
   14b58:	b	13520 <__assert_fail@plt+0x1d00>
   14b5c:	ldr	r3, [pc, #-3280]	; 13e94 <__assert_fail@plt+0x2674>
   14b60:	str	r3, [sp, #8]
   14b64:	b	13520 <__assert_fail@plt+0x1d00>
   14b68:	ldr	r3, [pc, #-3288]	; 13e98 <__assert_fail@plt+0x2678>
   14b6c:	str	r3, [sp, #8]
   14b70:	b	13520 <__assert_fail@plt+0x1d00>
   14b74:	ldr	r3, [pc, #-3296]	; 13e9c <__assert_fail@plt+0x267c>
   14b78:	str	r3, [sp, #8]
   14b7c:	b	13520 <__assert_fail@plt+0x1d00>
   14b80:	ldr	r3, [pc, #-3304]	; 13ea0 <__assert_fail@plt+0x2680>
   14b84:	str	r3, [sp, #8]
   14b88:	b	13520 <__assert_fail@plt+0x1d00>
   14b8c:	ldr	r3, [pc, #-3312]	; 13ea4 <__assert_fail@plt+0x2684>
   14b90:	str	r3, [sp, #8]
   14b94:	b	13520 <__assert_fail@plt+0x1d00>
   14b98:	ldr	r3, [pc, #-3320]	; 13ea8 <__assert_fail@plt+0x2688>
   14b9c:	str	r3, [sp, #8]
   14ba0:	b	13520 <__assert_fail@plt+0x1d00>
   14ba4:	ldr	r3, [pc, #-3328]	; 13eac <__assert_fail@plt+0x268c>
   14ba8:	str	r3, [sp, #8]
   14bac:	b	13520 <__assert_fail@plt+0x1d00>
   14bb0:	ldr	r3, [pc, #-3336]	; 13eb0 <__assert_fail@plt+0x2690>
   14bb4:	str	r3, [sp, #8]
   14bb8:	b	13520 <__assert_fail@plt+0x1d00>
   14bbc:	ldr	r3, [pc, #-3344]	; 13eb4 <__assert_fail@plt+0x2694>
   14bc0:	str	r3, [sp, #8]
   14bc4:	b	13520 <__assert_fail@plt+0x1d00>
   14bc8:	ldr	r3, [pc, #-3352]	; 13eb8 <__assert_fail@plt+0x2698>
   14bcc:	str	r3, [sp, #8]
   14bd0:	b	13520 <__assert_fail@plt+0x1d00>
   14bd4:	ldr	r3, [pc, #-3360]	; 13ebc <__assert_fail@plt+0x269c>
   14bd8:	str	r3, [sp, #8]
   14bdc:	b	13520 <__assert_fail@plt+0x1d00>
   14be0:	ldr	r3, [pc, #-3368]	; 13ec0 <__assert_fail@plt+0x26a0>
   14be4:	str	r3, [sp, #8]
   14be8:	b	13520 <__assert_fail@plt+0x1d00>
   14bec:	ldr	r3, [pc, #-3376]	; 13ec4 <__assert_fail@plt+0x26a4>
   14bf0:	str	r3, [sp, #8]
   14bf4:	b	13520 <__assert_fail@plt+0x1d00>
   14bf8:	ldr	r3, [pc, #-3384]	; 13ec8 <__assert_fail@plt+0x26a8>
   14bfc:	str	r3, [sp, #8]
   14c00:	b	13520 <__assert_fail@plt+0x1d00>
   14c04:	ldr	r3, [pc, #-3392]	; 13ecc <__assert_fail@plt+0x26ac>
   14c08:	str	r3, [sp, #8]
   14c0c:	b	13520 <__assert_fail@plt+0x1d00>
   14c10:	ldr	r3, [pc, #-3248]	; 13f68 <__assert_fail@plt+0x2748>
   14c14:	str	r3, [sp, #8]
   14c18:	b	13520 <__assert_fail@plt+0x1d00>
   14c1c:	ldr	r3, [pc, #-3412]	; 13ed0 <__assert_fail@plt+0x26b0>
   14c20:	str	r3, [sp, #8]
   14c24:	b	13520 <__assert_fail@plt+0x1d00>
   14c28:	ldr	r3, [pc, #-3420]	; 13ed4 <__assert_fail@plt+0x26b4>
   14c2c:	str	r3, [sp, #8]
   14c30:	b	13520 <__assert_fail@plt+0x1d00>
   14c34:	ldr	r3, [pc, #-3428]	; 13ed8 <__assert_fail@plt+0x26b8>
   14c38:	str	r3, [sp, #8]
   14c3c:	b	13520 <__assert_fail@plt+0x1d00>
   14c40:	ldr	r3, [pc, #-3436]	; 13edc <__assert_fail@plt+0x26bc>
   14c44:	str	r3, [sp, #8]
   14c48:	b	13520 <__assert_fail@plt+0x1d00>
   14c4c:	ldr	r3, [pc, #-3444]	; 13ee0 <__assert_fail@plt+0x26c0>
   14c50:	str	r3, [sp, #8]
   14c54:	b	13520 <__assert_fail@plt+0x1d00>
   14c58:	ldr	r3, [pc, #-3452]	; 13ee4 <__assert_fail@plt+0x26c4>
   14c5c:	str	r3, [sp, #8]
   14c60:	b	13520 <__assert_fail@plt+0x1d00>
   14c64:	ldr	r3, [pc, #-3460]	; 13ee8 <__assert_fail@plt+0x26c8>
   14c68:	str	r3, [sp, #8]
   14c6c:	b	13520 <__assert_fail@plt+0x1d00>
   14c70:	ldr	r3, [pc, #-3468]	; 13eec <__assert_fail@plt+0x26cc>
   14c74:	str	r3, [sp, #8]
   14c78:	b	13520 <__assert_fail@plt+0x1d00>
   14c7c:	ldr	r3, [pc, #-3476]	; 13ef0 <__assert_fail@plt+0x26d0>
   14c80:	str	r3, [sp, #8]
   14c84:	b	13520 <__assert_fail@plt+0x1d00>
   14c88:	ldr	r3, [pc, #-3484]	; 13ef4 <__assert_fail@plt+0x26d4>
   14c8c:	str	r3, [sp, #8]
   14c90:	b	13520 <__assert_fail@plt+0x1d00>
   14c94:	ldr	r3, [pc, #-3492]	; 13ef8 <__assert_fail@plt+0x26d8>
   14c98:	str	r3, [sp, #8]
   14c9c:	b	13520 <__assert_fail@plt+0x1d00>
   14ca0:	ldr	r3, [pc, #-3500]	; 13efc <__assert_fail@plt+0x26dc>
   14ca4:	str	r3, [sp, #8]
   14ca8:	b	13520 <__assert_fail@plt+0x1d00>
   14cac:	ldr	r2, [pc, #-3508]	; 13f00 <__assert_fail@plt+0x26e0>
   14cb0:	cmp	r3, r2
   14cb4:	ldreq	r3, [pc, #-3512]	; 13f04 <__assert_fail@plt+0x26e4>
   14cb8:	streq	r3, [sp, #8]
   14cbc:	beq	13520 <__assert_fail@plt+0x1d00>
   14cc0:	b	141f4 <__assert_fail@plt+0x29d4>
   14cc4:	ldr	r3, [pc, #-3524]	; 13f08 <__assert_fail@plt+0x26e8>
   14cc8:	str	r3, [sp, #8]
   14ccc:	b	13520 <__assert_fail@plt+0x1d00>
   14cd0:	ldr	r3, [pc, #-3532]	; 13f0c <__assert_fail@plt+0x26ec>
   14cd4:	str	r3, [sp, #8]
   14cd8:	b	13520 <__assert_fail@plt+0x1d00>
   14cdc:	ldr	r3, [pc, #-3540]	; 13f10 <__assert_fail@plt+0x26f0>
   14ce0:	str	r3, [sp, #8]
   14ce4:	b	13520 <__assert_fail@plt+0x1d00>
   14ce8:	ldr	r3, [pc, #-3548]	; 13f14 <__assert_fail@plt+0x26f4>
   14cec:	str	r3, [sp, #8]
   14cf0:	b	13520 <__assert_fail@plt+0x1d00>
   14cf4:	ldr	r3, [pc, #-3556]	; 13f18 <__assert_fail@plt+0x26f8>
   14cf8:	str	r3, [sp, #8]
   14cfc:	b	13520 <__assert_fail@plt+0x1d00>
   14d00:	ldr	r3, [pc, #-3564]	; 13f1c <__assert_fail@plt+0x26fc>
   14d04:	str	r3, [sp, #8]
   14d08:	b	13520 <__assert_fail@plt+0x1d00>
   14d0c:	ldr	r3, [pc, #-3572]	; 13f20 <__assert_fail@plt+0x2700>
   14d10:	str	r3, [sp, #8]
   14d14:	b	13520 <__assert_fail@plt+0x1d00>
   14d18:	ldr	r2, [pc, #-3580]	; 13f24 <__assert_fail@plt+0x2704>
   14d1c:	cmp	r3, r2
   14d20:	ldreq	r3, [pc, #-3584]	; 13f28 <__assert_fail@plt+0x2708>
   14d24:	streq	r3, [sp, #8]
   14d28:	beq	13520 <__assert_fail@plt+0x1d00>
   14d2c:	b	141f4 <__assert_fail@plt+0x29d4>
   14d30:	ldr	r3, [pc, #-3596]	; 13f2c <__assert_fail@plt+0x270c>
   14d34:	str	r3, [sp, #8]
   14d38:	b	13520 <__assert_fail@plt+0x1d00>
   14d3c:	ldr	r3, [pc, #-3604]	; 13f30 <__assert_fail@plt+0x2710>
   14d40:	str	r3, [sp, #8]
   14d44:	b	13520 <__assert_fail@plt+0x1d00>
   14d48:	ldr	r3, [pc, #-3612]	; 13f34 <__assert_fail@plt+0x2714>
   14d4c:	str	r3, [sp, #8]
   14d50:	b	13520 <__assert_fail@plt+0x1d00>
   14d54:	ldr	r3, [pc, #-3620]	; 13f38 <__assert_fail@plt+0x2718>
   14d58:	str	r3, [sp, #8]
   14d5c:	b	13520 <__assert_fail@plt+0x1d00>
   14d60:	ldr	r3, [pc, #-3628]	; 13f3c <__assert_fail@plt+0x271c>
   14d64:	str	r3, [sp, #8]
   14d68:	b	13520 <__assert_fail@plt+0x1d00>
   14d6c:	ldr	r3, [pc, #-3636]	; 13f40 <__assert_fail@plt+0x2720>
   14d70:	str	r3, [sp, #8]
   14d74:	b	13520 <__assert_fail@plt+0x1d00>
   14d78:	ldr	r3, [pc, #-3644]	; 13f44 <__assert_fail@plt+0x2724>
   14d7c:	str	r3, [sp, #8]
   14d80:	b	13520 <__assert_fail@plt+0x1d00>
   14d84:	ldr	r3, [pc, #-3652]	; 13f48 <__assert_fail@plt+0x2728>
   14d88:	str	r3, [sp, #8]
   14d8c:	b	13520 <__assert_fail@plt+0x1d00>
   14d90:	ldr	r3, [pc, #-3660]	; 13f4c <__assert_fail@plt+0x272c>
   14d94:	str	r3, [sp, #8]
   14d98:	b	13520 <__assert_fail@plt+0x1d00>
   14d9c:	ldr	r3, [pc, #-3668]	; 13f50 <__assert_fail@plt+0x2730>
   14da0:	str	r3, [sp, #8]
   14da4:	b	13520 <__assert_fail@plt+0x1d00>
   14da8:	ldr	r2, [pc, #-3676]	; 13f54 <__assert_fail@plt+0x2734>
   14dac:	cmp	r3, r2
   14db0:	ldreq	r3, [pc, #-3680]	; 13f58 <__assert_fail@plt+0x2738>
   14db4:	streq	r3, [sp, #8]
   14db8:	beq	13520 <__assert_fail@plt+0x1d00>
   14dbc:	b	141f4 <__assert_fail@plt+0x29d4>
   14dc0:	ldr	r3, [pc, #-3692]	; 13f5c <__assert_fail@plt+0x273c>
   14dc4:	str	r3, [sp, #8]
   14dc8:	b	13520 <__assert_fail@plt+0x1d00>
   14dcc:	ldr	r3, [pc, #-3700]	; 13f60 <__assert_fail@plt+0x2740>
   14dd0:	str	r3, [sp, #8]
   14dd4:	b	13520 <__assert_fail@plt+0x1d00>
   14dd8:	ldr	r3, [pc, #-3708]	; 13f64 <__assert_fail@plt+0x2744>
   14ddc:	str	r3, [sp, #8]
   14de0:	b	13520 <__assert_fail@plt+0x1d00>
   14de4:	ldr	r3, [pc, #-3716]	; 13f68 <__assert_fail@plt+0x2748>
   14de8:	str	r3, [sp, #8]
   14dec:	b	13520 <__assert_fail@plt+0x1d00>
   14df0:	ldr	r2, [pc, #-3724]	; 13f6c <__assert_fail@plt+0x274c>
   14df4:	cmp	r3, r2
   14df8:	ldreq	r3, [pc, #-3728]	; 13f70 <__assert_fail@plt+0x2750>
   14dfc:	streq	r3, [sp, #8]
   14e00:	beq	13520 <__assert_fail@plt+0x1d00>
   14e04:	b	141f4 <__assert_fail@plt+0x29d4>
   14e08:	ldr	r3, [pc, #-3740]	; 13f74 <__assert_fail@plt+0x2754>
   14e0c:	str	r3, [sp, #8]
   14e10:	b	13520 <__assert_fail@plt+0x1d00>
   14e14:	ldr	r3, [pc, #-3748]	; 13f78 <__assert_fail@plt+0x2758>
   14e18:	str	r3, [sp, #8]
   14e1c:	b	13520 <__assert_fail@plt+0x1d00>
   14e20:	ldr	r3, [pc, #-3756]	; 13f7c <__assert_fail@plt+0x275c>
   14e24:	str	r3, [sp, #8]
   14e28:	b	13520 <__assert_fail@plt+0x1d00>
   14e2c:	ldr	r3, [pc, #-3764]	; 13f80 <__assert_fail@plt+0x2760>
   14e30:	str	r3, [sp, #8]
   14e34:	b	13520 <__assert_fail@plt+0x1d00>
   14e38:	ldr	r3, [pc, #-3772]	; 13f84 <__assert_fail@plt+0x2764>
   14e3c:	str	r3, [sp, #8]
   14e40:	b	13520 <__assert_fail@plt+0x1d00>
   14e44:	ldr	r3, [pc, #-3780]	; 13f88 <__assert_fail@plt+0x2768>
   14e48:	str	r3, [sp, #8]
   14e4c:	b	13520 <__assert_fail@plt+0x1d00>
   14e50:	ldr	r3, [pc, #-3788]	; 13f8c <__assert_fail@plt+0x276c>
   14e54:	str	r3, [sp, #8]
   14e58:	b	13520 <__assert_fail@plt+0x1d00>
   14e5c:	ldr	r2, [pc, #-3796]	; 13f90 <__assert_fail@plt+0x2770>
   14e60:	cmp	r3, r2
   14e64:	ldreq	r3, [pc, #-3800]	; 13f94 <__assert_fail@plt+0x2774>
   14e68:	streq	r3, [sp, #8]
   14e6c:	beq	13520 <__assert_fail@plt+0x1d00>
   14e70:	b	141f4 <__assert_fail@plt+0x29d4>
   14e74:	ldr	r3, [pc, #-3812]	; 13f98 <__assert_fail@plt+0x2778>
   14e78:	str	r3, [sp, #8]
   14e7c:	b	13520 <__assert_fail@plt+0x1d00>
   14e80:	ldr	r3, [pc, #-3820]	; 13f9c <__assert_fail@plt+0x277c>
   14e84:	str	r3, [sp, #8]
   14e88:	b	13520 <__assert_fail@plt+0x1d00>
   14e8c:	ldr	r3, [pc, #-3828]	; 13fa0 <__assert_fail@plt+0x2780>
   14e90:	str	r3, [sp, #8]
   14e94:	b	13520 <__assert_fail@plt+0x1d00>
   14e98:	ldr	r3, [pc, #-3836]	; 13fa4 <__assert_fail@plt+0x2784>
   14e9c:	str	r3, [sp, #8]
   14ea0:	b	13520 <__assert_fail@plt+0x1d00>
   14ea4:	ldr	r3, [pc, #-3844]	; 13fa8 <__assert_fail@plt+0x2788>
   14ea8:	str	r3, [sp, #8]
   14eac:	b	13520 <__assert_fail@plt+0x1d00>
   14eb0:	ldr	r3, [pc, #-3852]	; 13fac <__assert_fail@plt+0x278c>
   14eb4:	str	r3, [sp, #8]
   14eb8:	b	13520 <__assert_fail@plt+0x1d00>
   14ebc:	ldr	r3, [pc, #-3860]	; 13fb0 <__assert_fail@plt+0x2790>
   14ec0:	str	r3, [sp, #8]
   14ec4:	b	13520 <__assert_fail@plt+0x1d00>
   14ec8:	ldr	r3, [pc, #-3868]	; 13fb4 <__assert_fail@plt+0x2794>
   14ecc:	str	r3, [sp, #8]
   14ed0:	b	13520 <__assert_fail@plt+0x1d00>
   14ed4:	ldr	r3, [pc, #-3876]	; 13fb8 <__assert_fail@plt+0x2798>
   14ed8:	str	r3, [sp, #8]
   14edc:	b	13520 <__assert_fail@plt+0x1d00>
   14ee0:	ldr	r3, [pc, #-3884]	; 13fbc <__assert_fail@plt+0x279c>
   14ee4:	str	r3, [sp, #8]
   14ee8:	b	13520 <__assert_fail@plt+0x1d00>
   14eec:	ldr	r3, [pc, #-3892]	; 13fc0 <__assert_fail@plt+0x27a0>
   14ef0:	str	r3, [sp, #8]
   14ef4:	b	13520 <__assert_fail@plt+0x1d00>
   14ef8:	ldr	r3, [pc, #-3900]	; 13fc4 <__assert_fail@plt+0x27a4>
   14efc:	str	r3, [sp, #8]
   14f00:	b	13520 <__assert_fail@plt+0x1d00>
   14f04:	ldr	r3, [pc, #-3908]	; 13fc8 <__assert_fail@plt+0x27a8>
   14f08:	str	r3, [sp, #8]
   14f0c:	b	13520 <__assert_fail@plt+0x1d00>
   14f10:	ldr	r3, [pc, #-3916]	; 13fcc <__assert_fail@plt+0x27ac>
   14f14:	str	r3, [sp, #8]
   14f18:	b	13520 <__assert_fail@plt+0x1d00>
   14f1c:	ldr	r3, [pc, #-3924]	; 13fd0 <__assert_fail@plt+0x27b0>
   14f20:	str	r3, [sp, #8]
   14f24:	b	13520 <__assert_fail@plt+0x1d00>
   14f28:	ldr	r3, [pc, #-3932]	; 13fd4 <__assert_fail@plt+0x27b4>
   14f2c:	str	r3, [sp, #8]
   14f30:	b	13520 <__assert_fail@plt+0x1d00>
   14f34:	ldr	r3, [pc, #-3940]	; 13fd8 <__assert_fail@plt+0x27b8>
   14f38:	str	r3, [sp, #8]
   14f3c:	b	13520 <__assert_fail@plt+0x1d00>
   14f40:	ldr	r3, [pc, #-3948]	; 13fdc <__assert_fail@plt+0x27bc>
   14f44:	str	r3, [sp, #8]
   14f48:	b	13520 <__assert_fail@plt+0x1d00>
   14f4c:	ldr	r3, [pc, #-3956]	; 13fe0 <__assert_fail@plt+0x27c0>
   14f50:	str	r3, [sp, #8]
   14f54:	b	13520 <__assert_fail@plt+0x1d00>
   14f58:	ldr	r3, [pc, #-3964]	; 13fe4 <__assert_fail@plt+0x27c4>
   14f5c:	str	r3, [sp, #8]
   14f60:	b	13520 <__assert_fail@plt+0x1d00>
   14f64:	ldr	r3, [pc, #-3972]	; 13fe8 <__assert_fail@plt+0x27c8>
   14f68:	str	r3, [sp, #8]
   14f6c:	b	13520 <__assert_fail@plt+0x1d00>
   14f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f74:	sub	sp, sp, #156	; 0x9c
   14f78:	sub	r3, r3, #65	; 0x41
   14f7c:	ldr	ip, [sp, #200]	; 0xc8
   14f80:	mov	r5, r0
   14f84:	mov	r4, r1
   14f88:	ldm	ip, {r6, lr}
   14f8c:	ldr	r7, [ip, #8]
   14f90:	cmp	r3, #57	; 0x39
   14f94:	ldrls	pc, [pc, r3, lsl #2]
   14f98:	b	17a58 <__assert_fail@plt+0x6238>
   14f9c:	andeq	r7, r1, ip, asr #17
   14fa0:	andeq	r7, r1, ip, lsl r3
   14fa4:	muleq	r1, r4, r4
   14fa8:	andeq	r6, r1, ip, lsl #18
   14fac:	andeq	r7, r1, r8, asr sl
   14fb0:	andeq	r7, r1, r0, lsr r6
   14fb4:	andeq	r7, r1, r0, ror r0
   14fb8:	andeq	r7, r1, r8, asr sl
   14fbc:	andeq	r7, r1, r8, asr sl
   14fc0:	andeq	r7, r1, r8, asr sl
   14fc4:	andeq	r7, r1, r8, asr sl
   14fc8:	andeq	r7, r1, r8, asr sl
   14fcc:	andeq	r7, r1, r8, asr sl
   14fd0:	andeq	r5, r1, r4, ror #28
   14fd4:	andeq	r7, r1, r8, asr sl
   14fd8:	andeq	r7, r1, r8, asr sl
   14fdc:	andeq	r7, r1, r8, asr sl
   14fe0:	strdeq	r5, [r1], -r0
   14fe4:	andeq	r7, r1, r8, asr sl
   14fe8:	andeq	r6, r1, r8, asr #26
   14fec:	andeq	r6, r1, r8, lsr #23
   14ff0:	andeq	r7, r1, r8, asr sl
   14ff4:	andeq	r6, r1, ip, ror #10
   14ff8:	andeq	r6, r1, r0, ror #10
   14ffc:	andeq	r5, r1, r4, lsr sl
   15000:	andeq	r5, r1, r4, lsl #20
   15004:	andeq	r7, r1, r8, asr sl
   15008:	andeq	r7, r1, r8, asr sl
   1500c:	andeq	r7, r1, r8, asr sl
   15010:	andeq	r7, r1, r8, asr sl
   15014:	andeq	r7, r1, r8, asr sl
   15018:	andeq	r7, r1, r8, asr sl
   1501c:	andeq	r5, r1, r8, lsl #17
   15020:	strdeq	r5, [r1], -r0
   15024:	andeq	r7, r1, r8, asr sl
   15028:	strdeq	r7, [r1], -r8
   1502c:	andeq	r7, r1, r8, asr sl
   15030:	andeq	r6, r1, r4, ror #15
   15034:			; <UNDEFINED> instruction: 0x000166bc
   15038:	muleq	r1, r4, r5
   1503c:	andeq	r7, r1, r4, lsr #15
   15040:	andeq	r7, r1, r8, asr sl
   15044:	andeq	r7, r1, r8, asr sl
   15048:	andeq	r7, r1, r8, asr sl
   1504c:	andeq	r6, r1, r8, lsl #29
   15050:	andeq	r5, r1, ip, ror fp
   15054:	andeq	r5, r1, r0, asr #20
   15058:	andeq	r7, r1, r8, asr sl
   1505c:	andeq	r7, r1, r8, asr sl
   15060:	andeq	r7, r1, r8, lsr #3
   15064:	andeq	r6, r1, r4, lsr sl
   15068:			; <UNDEFINED> instruction: 0x000163b0
   1506c:	andeq	r6, r1, ip, lsr r2
   15070:	andeq	r7, r1, r8, asr sl
   15074:	andeq	r5, r1, r4, asr #10
   15078:	ldrdeq	r5, [r1], -r4
   1507c:	andeq	r5, r1, r4, ror #4
   15080:	andeq	r5, r1, r4, lsl #1
   15084:	ldr	r8, [pc, #3596]	; 15e98 <__assert_fail@plt+0x4678>
   15088:	ldr	r7, [r6, #92]	; 0x5c
   1508c:	ldr	r3, [r6, #88]	; 0x58
   15090:	ldr	r0, [r8, #56]	; 0x38
   15094:	str	r7, [sp, #80]	; 0x50
   15098:	cmp	r0, #0
   1509c:	str	r3, [sp, #76]	; 0x4c
   150a0:	beq	1870c <__assert_fail@plt+0x6eec>
   150a4:	add	r2, sp, #108	; 0x6c
   150a8:	add	r1, sp, #76	; 0x4c
   150ac:	bl	215a0 <__assert_fail@plt+0xfd80>
   150b0:	cmp	r0, #0
   150b4:	beq	17fdc <__assert_fail@plt+0x67bc>
   150b8:	ldr	r3, [r8, #56]	; 0x38
   150bc:	ldr	r2, [pc, #3544]	; 15e9c <__assert_fail@plt+0x467c>
   150c0:	mov	r1, #61	; 0x3d
   150c4:	stm	sp, {r3, r7}
   150c8:	ldr	r0, [pc, #3536]	; 15ea0 <__assert_fail@plt+0x4680>
   150cc:	add	r3, sp, #108	; 0x6c
   150d0:	bl	1cfd8 <__assert_fail@plt+0xb7b8>
   150d4:	add	r8, r5, #1
   150d8:	add	r4, r5, r4
   150dc:	cmp	r8, r4
   150e0:	movcc	r6, r8
   150e4:	ldrcc	sl, [pc, #3544]	; 15ec4 <__assert_fail@plt+0x46a4>
   150e8:	bcc	1510c <__assert_fail@plt+0x38ec>
   150ec:	b	15238 <__assert_fail@plt+0x3a18>
   150f0:	bl	1164c <strchr@plt>
   150f4:	mov	r6, fp
   150f8:	cmp	r0, #0
   150fc:	strbne	r7, [r8]
   15100:	addne	r8, r8, #1
   15104:	cmp	r4, fp
   15108:	bls	15238 <__assert_fail@plt+0x3a18>
   1510c:	mov	fp, r6
   15110:	ldr	r0, [pc, #3508]	; 15ecc <__assert_fail@plt+0x46ac>
   15114:	ldrb	r7, [fp], #1
   15118:	mov	r9, r6
   1511c:	mov	r1, r7
   15120:	bl	1164c <strchr@plt>
   15124:	mov	r1, r7
   15128:	cmp	r0, #0
   1512c:	mov	r0, sl
   15130:	bne	150f0 <__assert_fail@plt+0x38d0>
   15134:	cmp	r4, r6
   15138:	bls	15238 <__assert_fail@plt+0x3a18>
   1513c:	add	r2, r8, #4
   15140:	add	ip, r6, #4
   15144:	mov	r1, r2
   15148:	cmp	ip, r8
   1514c:	cmphi	r1, r6
   15150:	sub	r0, r4, fp
   15154:	mov	r2, ip
   15158:	add	r0, r0, #1
   1515c:	movls	r2, #1
   15160:	movhi	r2, #0
   15164:	cmp	r0, #11
   15168:	movls	r2, #0
   1516c:	andhi	r2, r2, #1
   15170:	cmp	r2, #0
   15174:	mov	lr, fp
   15178:	beq	181dc <__assert_fail@plt+0x69bc>
   1517c:	rsb	r2, r6, #0
   15180:	ands	r2, r2, #3
   15184:	beq	18060 <__assert_fail@plt+0x6840>
   15188:	cmp	r2, #1
   1518c:	strb	r7, [r8]
   15190:	add	r9, r8, #1
   15194:	beq	151bc <__assert_fail@plt+0x399c>
   15198:	ldrb	r1, [r6, #1]
   1519c:	cmp	r2, #3
   151a0:	add	r9, r8, #2
   151a4:	strb	r1, [r8, #1]
   151a8:	add	lr, r6, #2
   151ac:	ldrbeq	r1, [r6, #2]
   151b0:	addeq	r9, r8, #3
   151b4:	addeq	lr, r6, #3
   151b8:	strbeq	r1, [r8, #2]
   151bc:	sub	r0, r0, r2
   151c0:	sub	r7, r0, #4
   151c4:	add	r6, r6, r2
   151c8:	lsr	r7, r7, #2
   151cc:	add	r7, r7, #1
   151d0:	add	r2, r8, r2
   151d4:	lsl	r1, r7, #2
   151d8:	mov	ip, #0
   151dc:	add	ip, ip, #1
   151e0:	ldr	r3, [r6], #4
   151e4:	cmp	r7, ip
   151e8:	str	r3, [r2], #4
   151ec:	bhi	151dc <__assert_fail@plt+0x39bc>
   151f0:	cmp	r0, r1
   151f4:	add	r2, r9, r1
   151f8:	add	r1, lr, r1
   151fc:	beq	1522c <__assert_fail@plt+0x3a0c>
   15200:	ldrb	r0, [lr, r7, lsl #2]
   15204:	add	ip, r1, #1
   15208:	cmp	r4, ip
   1520c:	strb	r0, [r9, r7, lsl #2]
   15210:	bls	1522c <__assert_fail@plt+0x3a0c>
   15214:	ldrb	r0, [r1, #1]
   15218:	add	ip, r1, #2
   1521c:	cmp	r4, ip
   15220:	strb	r0, [r2, #1]
   15224:	ldrbhi	r1, [r1, #2]
   15228:	strbhi	r1, [r2, #2]
   1522c:	add	r4, r4, #1
   15230:	sub	r3, r4, fp
   15234:	add	r8, r8, r3
   15238:	ldr	r3, [pc, #3208]	; 15ec8 <__assert_fail@plt+0x46a8>
   1523c:	ldr	r2, [pc, #3164]	; 15ea0 <__assert_fail@plt+0x4680>
   15240:	mov	r1, r5
   15244:	ldrh	r3, [r3]
   15248:	mov	r0, #1
   1524c:	mov	r6, #0
   15250:	strh	r3, [r8]
   15254:	bl	116b8 <__printf_chk@plt>
   15258:	mov	r0, r6
   1525c:	add	sp, sp, #156	; 0x9c
   15260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15264:	ldr	r8, [pc, #3116]	; 15e98 <__assert_fail@plt+0x4678>
   15268:	ldr	r7, [r6, #84]	; 0x54
   1526c:	ldr	r3, [r6, #80]	; 0x50
   15270:	ldr	r0, [r8, #56]	; 0x38
   15274:	str	r7, [sp, #72]	; 0x48
   15278:	cmp	r0, #0
   1527c:	str	r3, [sp, #68]	; 0x44
   15280:	beq	186f4 <__assert_fail@plt+0x6ed4>
   15284:	add	r2, sp, #108	; 0x6c
   15288:	add	r1, sp, #68	; 0x44
   1528c:	bl	215a0 <__assert_fail@plt+0xfd80>
   15290:	cmp	r0, #0
   15294:	beq	17fac <__assert_fail@plt+0x678c>
   15298:	ldr	r3, [r8, #56]	; 0x38
   1529c:	ldr	r2, [pc, #3064]	; 15e9c <__assert_fail@plt+0x467c>
   152a0:	mov	r1, #61	; 0x3d
   152a4:	stm	sp, {r3, r7}
   152a8:	ldr	r0, [pc, #3056]	; 15ea0 <__assert_fail@plt+0x4680>
   152ac:	add	r3, sp, #108	; 0x6c
   152b0:	bl	1cfd8 <__assert_fail@plt+0xb7b8>
   152b4:	add	r8, r5, #1
   152b8:	add	r4, r5, r4
   152bc:	cmp	r8, r4
   152c0:	movcc	r6, r8
   152c4:	ldrcc	sl, [pc, #3064]	; 15ec4 <__assert_fail@plt+0x46a4>
   152c8:	bcc	152ec <__assert_fail@plt+0x3acc>
   152cc:	b	15238 <__assert_fail@plt+0x3a18>
   152d0:	bl	1164c <strchr@plt>
   152d4:	mov	r6, fp
   152d8:	cmp	r0, #0
   152dc:	strbne	r7, [r8]
   152e0:	addne	r8, r8, #1
   152e4:	cmp	r4, fp
   152e8:	bls	15238 <__assert_fail@plt+0x3a18>
   152ec:	mov	fp, r6
   152f0:	ldr	r0, [pc, #3028]	; 15ecc <__assert_fail@plt+0x46ac>
   152f4:	ldrb	r7, [fp], #1
   152f8:	mov	r9, r6
   152fc:	mov	r1, r7
   15300:	bl	1164c <strchr@plt>
   15304:	mov	r1, r7
   15308:	cmp	r0, #0
   1530c:	mov	r0, sl
   15310:	bne	152d0 <__assert_fail@plt+0x3ab0>
   15314:	cmp	r4, r6
   15318:	bls	15238 <__assert_fail@plt+0x3a18>
   1531c:	add	r2, r8, #4
   15320:	add	ip, r6, #4
   15324:	mov	r1, r2
   15328:	cmp	ip, r8
   1532c:	cmphi	r1, r6
   15330:	sub	r0, r4, fp
   15334:	mov	r2, ip
   15338:	add	r0, r0, #1
   1533c:	movls	r2, #1
   15340:	movhi	r2, #0
   15344:	cmp	r0, #11
   15348:	movls	r2, #0
   1534c:	andhi	r2, r2, #1
   15350:	cmp	r2, #0
   15354:	mov	lr, fp
   15358:	beq	18284 <__assert_fail@plt+0x6a64>
   1535c:	rsb	r2, r6, #0
   15360:	ands	r2, r2, #3
   15364:	beq	18138 <__assert_fail@plt+0x6918>
   15368:	cmp	r2, #1
   1536c:	strb	r7, [r8]
   15370:	add	r9, r8, #1
   15374:	beq	1539c <__assert_fail@plt+0x3b7c>
   15378:	ldrb	r1, [r6, #1]
   1537c:	cmp	r2, #3
   15380:	add	r9, r8, #2
   15384:	strb	r1, [r8, #1]
   15388:	add	lr, r6, #2
   1538c:	ldrbeq	r1, [r6, #2]
   15390:	addeq	r9, r8, #3
   15394:	addeq	lr, r6, #3
   15398:	strbeq	r1, [r8, #2]
   1539c:	sub	r0, r0, r2
   153a0:	sub	r7, r0, #4
   153a4:	add	r6, r6, r2
   153a8:	lsr	r7, r7, #2
   153ac:	add	r7, r7, #1
   153b0:	add	r2, r8, r2
   153b4:	lsl	r1, r7, #2
   153b8:	mov	ip, #0
   153bc:	add	ip, ip, #1
   153c0:	ldr	r3, [r6], #4
   153c4:	cmp	r7, ip
   153c8:	str	r3, [r2], #4
   153cc:	bhi	153bc <__assert_fail@plt+0x3b9c>
   153d0:	b	151f0 <__assert_fail@plt+0x39d0>
   153d4:	ldr	r8, [pc, #2748]	; 15e98 <__assert_fail@plt+0x4678>
   153d8:	ldr	r7, [r6, #76]	; 0x4c
   153dc:	ldr	r3, [r6, #72]	; 0x48
   153e0:	ldr	r0, [r8, #56]	; 0x38
   153e4:	str	r7, [sp, #64]	; 0x40
   153e8:	cmp	r0, #0
   153ec:	str	r3, [sp, #60]	; 0x3c
   153f0:	beq	186dc <__assert_fail@plt+0x6ebc>
   153f4:	add	r2, sp, #108	; 0x6c
   153f8:	add	r1, sp, #60	; 0x3c
   153fc:	bl	215a0 <__assert_fail@plt+0xfd80>
   15400:	cmp	r0, #0
   15404:	beq	17f7c <__assert_fail@plt+0x675c>
   15408:	ldr	r3, [r8, #56]	; 0x38
   1540c:	ldr	r2, [pc, #2696]	; 15e9c <__assert_fail@plt+0x467c>
   15410:	mov	r1, #61	; 0x3d
   15414:	stm	sp, {r3, r7}
   15418:	ldr	r0, [pc, #2688]	; 15ea0 <__assert_fail@plt+0x4680>
   1541c:	add	r3, sp, #108	; 0x6c
   15420:	bl	1cfd8 <__assert_fail@plt+0xb7b8>
   15424:	add	r8, r5, #1
   15428:	add	r4, r5, r4
   1542c:	cmp	r8, r4
   15430:	movcc	r6, r8
   15434:	ldrcc	sl, [pc, #2696]	; 15ec4 <__assert_fail@plt+0x46a4>
   15438:	bcc	1545c <__assert_fail@plt+0x3c3c>
   1543c:	b	15238 <__assert_fail@plt+0x3a18>
   15440:	bl	1164c <strchr@plt>
   15444:	mov	r6, fp
   15448:	cmp	r0, #0
   1544c:	strbne	r7, [r8]
   15450:	addne	r8, r8, #1
   15454:	cmp	r4, fp
   15458:	bls	15238 <__assert_fail@plt+0x3a18>
   1545c:	mov	fp, r6
   15460:	ldr	r0, [pc, #2660]	; 15ecc <__assert_fail@plt+0x46ac>
   15464:	ldrb	r7, [fp], #1
   15468:	mov	r9, r6
   1546c:	mov	r1, r7
   15470:	bl	1164c <strchr@plt>
   15474:	mov	r1, r7
   15478:	cmp	r0, #0
   1547c:	mov	r0, sl
   15480:	bne	15440 <__assert_fail@plt+0x3c20>
   15484:	cmp	r4, r6
   15488:	bls	15238 <__assert_fail@plt+0x3a18>
   1548c:	add	r2, r8, #4
   15490:	add	ip, r6, #4
   15494:	mov	r1, r2
   15498:	cmp	ip, r8
   1549c:	cmphi	r1, r6
   154a0:	sub	r0, r4, fp
   154a4:	mov	r2, ip
   154a8:	add	r0, r0, #1
   154ac:	movls	r2, #1
   154b0:	movhi	r2, #0
   154b4:	cmp	r0, #11
   154b8:	movls	r2, #0
   154bc:	andhi	r2, r2, #1
   154c0:	cmp	r2, #0
   154c4:	mov	lr, fp
   154c8:	beq	1826c <__assert_fail@plt+0x6a4c>
   154cc:	rsb	r2, r6, #0
   154d0:	ands	r2, r2, #3
   154d4:	beq	1812c <__assert_fail@plt+0x690c>
   154d8:	cmp	r2, #1
   154dc:	strb	r7, [r8]
   154e0:	add	r9, r8, #1
   154e4:	beq	1550c <__assert_fail@plt+0x3cec>
   154e8:	ldrb	r1, [r6, #1]
   154ec:	cmp	r2, #3
   154f0:	add	r9, r8, #2
   154f4:	strb	r1, [r8, #1]
   154f8:	add	lr, r6, #2
   154fc:	ldrbeq	r1, [r6, #2]
   15500:	addeq	r9, r8, #3
   15504:	addeq	lr, r6, #3
   15508:	strbeq	r1, [r8, #2]
   1550c:	sub	r0, r0, r2
   15510:	sub	r7, r0, #4
   15514:	add	r6, r6, r2
   15518:	lsr	r7, r7, #2
   1551c:	add	r7, r7, #1
   15520:	add	r2, r8, r2
   15524:	lsl	r1, r7, #2
   15528:	mov	ip, #0
   1552c:	add	ip, ip, #1
   15530:	ldr	r3, [r6], #4
   15534:	cmp	r7, ip
   15538:	str	r3, [r2], #4
   1553c:	bhi	1552c <__assert_fail@plt+0x3d0c>
   15540:	b	151f0 <__assert_fail@plt+0x39d0>
   15544:	cmp	r7, #0
   15548:	blt	17b24 <__assert_fail@plt+0x6304>
   1554c:	ldr	r8, [pc, #2372]	; 15e98 <__assert_fail@plt+0x4678>
   15550:	str	lr, [sp, #52]	; 0x34
   15554:	str	r7, [sp, #56]	; 0x38
   15558:	ldr	r0, [r8, #56]	; 0x38
   1555c:	cmp	r0, #0
   15560:	beq	18754 <__assert_fail@plt+0x6f34>
   15564:	add	r2, sp, #108	; 0x6c
   15568:	add	r1, sp, #52	; 0x34
   1556c:	bl	215a0 <__assert_fail@plt+0xfd80>
   15570:	cmp	r0, #0
   15574:	beq	1800c <__assert_fail@plt+0x67ec>
   15578:	ldr	r3, [r8, #56]	; 0x38
   1557c:	ldr	r2, [pc, #2328]	; 15e9c <__assert_fail@plt+0x467c>
   15580:	mov	r1, #61	; 0x3d
   15584:	stm	sp, {r3, r7}
   15588:	ldr	r0, [pc, #2320]	; 15ea0 <__assert_fail@plt+0x4680>
   1558c:	add	r3, sp, #108	; 0x6c
   15590:	bl	1cfd8 <__assert_fail@plt+0xb7b8>
   15594:	add	r8, r5, #1
   15598:	add	r4, r5, r4
   1559c:	cmp	r8, r4
   155a0:	movcc	r6, r8
   155a4:	ldrcc	sl, [pc, #2328]	; 15ec4 <__assert_fail@plt+0x46a4>
   155a8:	bcc	155cc <__assert_fail@plt+0x3dac>
   155ac:	b	15238 <__assert_fail@plt+0x3a18>
   155b0:	bl	1164c <strchr@plt>
   155b4:	mov	r6, fp
   155b8:	cmp	r0, #0
   155bc:	strbne	r7, [r8]
   155c0:	addne	r8, r8, #1
   155c4:	cmp	r4, fp
   155c8:	bls	15238 <__assert_fail@plt+0x3a18>
   155cc:	mov	fp, r6
   155d0:	ldr	r0, [pc, #2292]	; 15ecc <__assert_fail@plt+0x46ac>
   155d4:	ldrb	r7, [fp], #1
   155d8:	mov	r9, r6
   155dc:	mov	r1, r7
   155e0:	bl	1164c <strchr@plt>
   155e4:	mov	r1, r7
   155e8:	cmp	r0, #0
   155ec:	mov	r0, sl
   155f0:	bne	155b0 <__assert_fail@plt+0x3d90>
   155f4:	cmp	r4, r6
   155f8:	bls	15238 <__assert_fail@plt+0x3a18>
   155fc:	add	r2, r8, #4
   15600:	add	ip, r6, #4
   15604:	mov	r1, r2
   15608:	cmp	ip, r8
   1560c:	cmphi	r1, r6
   15610:	sub	r0, r4, fp
   15614:	mov	r2, ip
   15618:	add	r0, r0, #1
   1561c:	movls	r2, #1
   15620:	movhi	r2, #0
   15624:	cmp	r0, #11
   15628:	movls	r2, #0
   1562c:	andhi	r2, r2, #1
   15630:	cmp	r2, #0
   15634:	mov	sl, fp
   15638:	beq	186c4 <__assert_fail@plt+0x6ea4>
   1563c:	rsb	r2, r6, #0
   15640:	ands	r2, r2, #3
   15644:	beq	183fc <__assert_fail@plt+0x6bdc>
   15648:	cmp	r2, #1
   1564c:	strb	r7, [r8]
   15650:	add	r7, r8, #1
   15654:	beq	1567c <__assert_fail@plt+0x3e5c>
   15658:	ldrb	r1, [r6, #1]
   1565c:	cmp	r2, #3
   15660:	add	r7, r8, #2
   15664:	strb	r1, [r8, #1]
   15668:	add	sl, r6, #2
   1566c:	ldrbeq	r1, [r6, #2]
   15670:	addeq	r7, r8, #3
   15674:	addeq	sl, r6, #3
   15678:	strbeq	r1, [r8, #2]
   1567c:	sub	r0, r0, r2
   15680:	sub	r1, r0, #4
   15684:	add	r6, r6, r2
   15688:	lsr	r1, r1, #2
   1568c:	add	r1, r1, #1
   15690:	add	r2, r8, r2
   15694:	lsl	lr, r1, #2
   15698:	mov	ip, #0
   1569c:	add	ip, ip, #1
   156a0:	ldr	r3, [r6], #4
   156a4:	cmp	r1, ip
   156a8:	str	r3, [r2], #4
   156ac:	bhi	1569c <__assert_fail@plt+0x3e7c>
   156b0:	cmp	r0, lr
   156b4:	add	r2, r7, lr
   156b8:	add	lr, sl, lr
   156bc:	beq	1522c <__assert_fail@plt+0x3a0c>
   156c0:	ldrb	r0, [sl, r1, lsl #2]
   156c4:	add	ip, lr, #1
   156c8:	cmp	r4, ip
   156cc:	strb	r0, [r7, r1, lsl #2]
   156d0:	bls	1522c <__assert_fail@plt+0x3a0c>
   156d4:	ldrb	r1, [lr, #1]
   156d8:	add	r0, lr, #2
   156dc:	cmp	r4, r0
   156e0:	strb	r1, [r2, #1]
   156e4:	ldrbhi	r1, [lr, #2]
   156e8:	strbhi	r1, [r2, #2]
   156ec:	b	1522c <__assert_fail@plt+0x3a0c>
   156f0:	add	r8, r0, #1
   156f4:	ldrd	r2, [r6, #64]	; 0x40
   156f8:	add	r4, r0, r1
   156fc:	cmp	r8, r4
   15700:	strd	r2, [sp, #8]
   15704:	ldrcc	sl, [pc, #1960]	; 15eb4 <__assert_fail@plt+0x4694>
   15708:	movcc	r6, r8
   1570c:	bcc	15730 <__assert_fail@plt+0x3f10>
   15710:	b	1585c <__assert_fail@plt+0x403c>
   15714:	bl	1164c <strchr@plt>
   15718:	mov	r6, fp
   1571c:	cmp	r0, #0
   15720:	strbne	r7, [r8]
   15724:	addne	r8, r8, #1
   15728:	cmp	r4, fp
   1572c:	bls	1585c <__assert_fail@plt+0x403c>
   15730:	mov	fp, r6
   15734:	ldr	r0, [pc, #1936]	; 15ecc <__assert_fail@plt+0x46ac>
   15738:	ldrb	r7, [fp], #1
   1573c:	mov	r9, r6
   15740:	mov	r1, r7
   15744:	bl	1164c <strchr@plt>
   15748:	mov	r1, r7
   1574c:	cmp	r0, #0
   15750:	mov	r0, sl
   15754:	bne	15714 <__assert_fail@plt+0x3ef4>
   15758:	cmp	r4, r6
   1575c:	bls	1585c <__assert_fail@plt+0x403c>
   15760:	add	r2, r8, #4
   15764:	add	ip, r6, #4
   15768:	mov	r0, r2
   1576c:	cmp	ip, r8
   15770:	cmphi	r0, r6
   15774:	sub	r1, r4, fp
   15778:	mov	r2, ip
   1577c:	add	r1, r1, #1
   15780:	movls	r2, #1
   15784:	movhi	r2, #0
   15788:	cmp	r1, #11
   1578c:	movls	r2, #0
   15790:	andhi	r2, r2, #1
   15794:	cmp	r2, #0
   15798:	mov	sl, fp
   1579c:	beq	182b4 <__assert_fail@plt+0x6a94>
   157a0:	rsb	r2, r6, #0
   157a4:	ands	r2, r2, #3
   157a8:	beq	180f0 <__assert_fail@plt+0x68d0>
   157ac:	cmp	r2, #1
   157b0:	strb	r7, [r8]
   157b4:	add	r9, r8, #1
   157b8:	beq	157e0 <__assert_fail@plt+0x3fc0>
   157bc:	ldrb	r0, [r6, #1]
   157c0:	cmp	r2, #3
   157c4:	add	r9, r8, #2
   157c8:	strb	r0, [r8, #1]
   157cc:	add	sl, r6, #2
   157d0:	ldrbeq	r0, [r6, #2]
   157d4:	addeq	r9, r8, #3
   157d8:	addeq	sl, r6, #3
   157dc:	strbeq	r0, [r8, #2]
   157e0:	sub	r1, r1, r2
   157e4:	sub	r0, r1, #4
   157e8:	add	r6, r6, r2
   157ec:	lsr	r0, r0, #2
   157f0:	add	r0, r0, #1
   157f4:	add	r2, r8, r2
   157f8:	lsl	ip, r0, #2
   157fc:	mov	lr, #0
   15800:	add	lr, lr, #1
   15804:	ldr	r3, [r6], #4
   15808:	cmp	lr, r0
   1580c:	str	r3, [r2], #4
   15810:	bcc	15800 <__assert_fail@plt+0x3fe0>
   15814:	cmp	r1, ip
   15818:	add	r2, r9, ip
   1581c:	add	ip, sl, ip
   15820:	beq	15850 <__assert_fail@plt+0x4030>
   15824:	ldrb	r1, [sl, r0, lsl #2]
   15828:	add	lr, ip, #1
   1582c:	cmp	r4, lr
   15830:	strb	r1, [r9, r0, lsl #2]
   15834:	bls	15850 <__assert_fail@plt+0x4030>
   15838:	ldrb	r1, [ip, #1]
   1583c:	add	r0, ip, #2
   15840:	cmp	r4, r0
   15844:	strb	r1, [r2, #1]
   15848:	ldrbhi	r1, [ip, #2]
   1584c:	strbhi	r1, [r2, #2]
   15850:	add	r4, r4, #1
   15854:	sub	r3, r4, fp
   15858:	add	r8, r8, r3
   1585c:	ldr	r0, [pc, #1608]	; 15eac <__assert_fail@plt+0x468c>
   15860:	ldrd	r2, [sp, #8]
   15864:	mov	r1, r5
   15868:	ldr	r0, [r0]
   1586c:	mov	r6, #0
   15870:	str	r0, [r8]
   15874:	mov	r0, #1
   15878:	bl	116b8 <__printf_chk@plt>
   1587c:	mov	r0, r6
   15880:	add	sp, sp, #156	; 0x9c
   15884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15888:	ldr	fp, [r6, #16]
   1588c:	add	r7, r0, #1
   15890:	add	r4, r0, r1
   15894:	lsl	r3, fp, #20
   15898:	cmp	r7, r4
   1589c:	lsr	r3, r3, #20
   158a0:	str	r3, [sp, #8]
   158a4:	ldrcc	sl, [pc, #1568]	; 15ecc <__assert_fail@plt+0x46ac>
   158a8:	movcc	r9, r7
   158ac:	bcc	158d0 <__assert_fail@plt+0x40b0>
   158b0:	b	159fc <__assert_fail@plt+0x41dc>
   158b4:	bl	1164c <strchr@plt>
   158b8:	mov	r9, fp
   158bc:	cmp	r0, #0
   158c0:	strbne	r6, [r7]
   158c4:	addne	r7, r7, #1
   158c8:	cmp	r4, fp
   158cc:	bls	159fc <__assert_fail@plt+0x41dc>
   158d0:	mov	fp, r9
   158d4:	mov	r0, sl
   158d8:	ldrb	r6, [fp], #1
   158dc:	mov	r8, r9
   158e0:	mov	r1, r6
   158e4:	bl	1164c <strchr@plt>
   158e8:	mov	r1, r6
   158ec:	cmp	r0, #0
   158f0:	ldr	r0, [pc, #1496]	; 15ed0 <__assert_fail@plt+0x46b0>
   158f4:	bne	158b4 <__assert_fail@plt+0x4094>
   158f8:	cmp	r4, r9
   158fc:	bls	159fc <__assert_fail@plt+0x41dc>
   15900:	add	r1, r7, #4
   15904:	add	lr, r9, #4
   15908:	mov	r0, r1
   1590c:	cmp	lr, r7
   15910:	cmphi	r0, r9
   15914:	sub	ip, r4, fp
   15918:	mov	r1, lr
   1591c:	add	ip, ip, #1
   15920:	movls	r1, #1
   15924:	movhi	r1, #0
   15928:	cmp	ip, #11
   1592c:	movls	r1, #0
   15930:	andhi	r1, r1, #1
   15934:	cmp	r1, #0
   15938:	mov	lr, fp
   1593c:	beq	1820c <__assert_fail@plt+0x69ec>
   15940:	rsb	r1, r9, #0
   15944:	ands	r1, r1, #3
   15948:	beq	18048 <__assert_fail@plt+0x6828>
   1594c:	cmp	r1, #1
   15950:	strb	r6, [r7]
   15954:	add	r8, r7, #1
   15958:	beq	15980 <__assert_fail@plt+0x4160>
   1595c:	ldrb	r0, [r9, #1]
   15960:	cmp	r1, #3
   15964:	add	r8, r7, #2
   15968:	strb	r0, [r7, #1]
   1596c:	add	lr, r9, #2
   15970:	ldrbeq	r0, [r9, #2]
   15974:	addeq	r8, r7, #3
   15978:	addeq	lr, r9, #3
   1597c:	strbeq	r0, [r7, #2]
   15980:	sub	ip, ip, r1
   15984:	sub	r6, ip, #4
   15988:	add	r9, r9, r1
   1598c:	lsr	r6, r6, #2
   15990:	add	r6, r6, #1
   15994:	add	r1, r7, r1
   15998:	lsl	r3, r6, #2
   1599c:	mov	r0, #0
   159a0:	add	r0, r0, #1
   159a4:	ldr	r2, [r9], #4
   159a8:	cmp	r6, r0
   159ac:	str	r2, [r1], #4
   159b0:	bhi	159a0 <__assert_fail@plt+0x4180>
   159b4:	cmp	ip, r3
   159b8:	add	r1, r8, r3
   159bc:	add	r3, lr, r3
   159c0:	beq	159f0 <__assert_fail@plt+0x41d0>
   159c4:	ldrb	r0, [lr, r6, lsl #2]
   159c8:	add	ip, r3, #1
   159cc:	cmp	r4, ip
   159d0:	strb	r0, [r8, r6, lsl #2]
   159d4:	bls	159f0 <__assert_fail@plt+0x41d0>
   159d8:	ldrb	r0, [r3, #1]
   159dc:	add	ip, r3, #2
   159e0:	cmp	r4, ip
   159e4:	strb	r0, [r1, #1]
   159e8:	ldrbhi	r3, [r3, #2]
   159ec:	strbhi	r3, [r1, #2]
   159f0:	add	r4, r4, #1
   159f4:	sub	r2, r4, fp
   159f8:	add	r7, r7, r2
   159fc:	ldr	r3, [pc, #1184]	; 15ea4 <__assert_fail@plt+0x4684>
   15a00:	b	16534 <__assert_fail@plt+0x4d14>
   15a04:	add	r6, r6, #88	; 0x58
   15a08:	add	r3, sp, #108	; 0x6c
   15a0c:	ldm	r6, {r0, r1}
   15a10:	mov	r6, #0
   15a14:	stm	r3, {r0, r1}
   15a18:	mov	r1, r4
   15a1c:	mov	r0, r5
   15a20:	ldm	r3, {r2, r3}
   15a24:	bl	12550 <__assert_fail@plt+0xd30>
   15a28:	mov	r0, r6
   15a2c:	add	sp, sp, #156	; 0x9c
   15a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a34:	add	r6, r6, #80	; 0x50
   15a38:	add	r3, sp, #84	; 0x54
   15a3c:	b	15a0c <__assert_fail@plt+0x41ec>
   15a40:	ldr	r3, [r6, #56]	; 0x38
   15a44:	add	r4, r0, r1
   15a48:	sub	r2, r3, #1
   15a4c:	cmn	r2, #-536870911	; 0xe0000001
   15a50:	movhi	r3, #512	; 0x200
   15a54:	add	r8, r0, #1
   15a58:	cmp	r8, r4
   15a5c:	mov	r0, r3
   15a60:	asr	r1, r3, #31
   15a64:	ldrcc	sl, [pc, #1096]	; 15eb4 <__assert_fail@plt+0x4694>
   15a68:	strd	r0, [sp, #8]
   15a6c:	movcc	r6, r8
   15a70:	bcc	15a94 <__assert_fail@plt+0x4274>
   15a74:	b	1585c <__assert_fail@plt+0x403c>
   15a78:	bl	1164c <strchr@plt>
   15a7c:	mov	r6, fp
   15a80:	cmp	r0, #0
   15a84:	strbne	r7, [r8]
   15a88:	addne	r8, r8, #1
   15a8c:	cmp	r4, fp
   15a90:	bls	1585c <__assert_fail@plt+0x403c>
   15a94:	mov	fp, r6
   15a98:	ldr	r0, [pc, #1068]	; 15ecc <__assert_fail@plt+0x46ac>
   15a9c:	ldrb	r7, [fp], #1
   15aa0:	mov	r9, r6
   15aa4:	mov	r1, r7
   15aa8:	bl	1164c <strchr@plt>
   15aac:	mov	r1, r7
   15ab0:	cmp	r0, #0
   15ab4:	mov	r0, sl
   15ab8:	bne	15a78 <__assert_fail@plt+0x4258>
   15abc:	cmp	r4, r6
   15ac0:	bls	1585c <__assert_fail@plt+0x403c>
   15ac4:	add	r2, r8, #4
   15ac8:	add	ip, r6, #4
   15acc:	mov	r0, r2
   15ad0:	cmp	ip, r8
   15ad4:	cmphi	r0, r6
   15ad8:	sub	r1, r4, fp
   15adc:	mov	r2, ip
   15ae0:	add	r1, r1, #1
   15ae4:	movls	r2, #1
   15ae8:	movhi	r2, #0
   15aec:	cmp	r1, #11
   15af0:	movls	r2, #0
   15af4:	andhi	r2, r2, #1
   15af8:	cmp	r2, #0
   15afc:	mov	sl, fp
   15b00:	beq	1832c <__assert_fail@plt+0x6b0c>
   15b04:	rsb	r2, r6, #0
   15b08:	ands	r2, r2, #3
   15b0c:	beq	1809c <__assert_fail@plt+0x687c>
   15b10:	cmp	r2, #1
   15b14:	strb	r7, [r8]
   15b18:	add	r9, r8, #1
   15b1c:	beq	15b44 <__assert_fail@plt+0x4324>
   15b20:	ldrb	r0, [r6, #1]
   15b24:	cmp	r2, #3
   15b28:	add	r9, r8, #2
   15b2c:	strb	r0, [r8, #1]
   15b30:	add	sl, r6, #2
   15b34:	ldrbeq	r0, [r6, #2]
   15b38:	addeq	r9, r8, #3
   15b3c:	addeq	sl, r6, #3
   15b40:	strbeq	r0, [r8, #2]
   15b44:	sub	r1, r1, r2
   15b48:	sub	r0, r1, #4
   15b4c:	add	r6, r6, r2
   15b50:	lsr	r0, r0, #2
   15b54:	add	r0, r0, #1
   15b58:	add	r2, r8, r2
   15b5c:	lsl	ip, r0, #2
   15b60:	mov	lr, #0
   15b64:	add	lr, lr, #1
   15b68:	ldr	r3, [r6], #4
   15b6c:	cmp	r0, lr
   15b70:	str	r3, [r2], #4
   15b74:	bhi	15b64 <__assert_fail@plt+0x4344>
   15b78:	b	15814 <__assert_fail@plt+0x3ff4>
   15b7c:	add	r8, r0, #1
   15b80:	add	r4, r0, r1
   15b84:	cmp	r8, r4
   15b88:	movcc	r6, r8
   15b8c:	ldrcc	sl, [pc, #816]	; 15ec4 <__assert_fail@plt+0x46a4>
   15b90:	bcc	15bb4 <__assert_fail@plt+0x4394>
   15b94:	b	15ce0 <__assert_fail@plt+0x44c0>
   15b98:	bl	1164c <strchr@plt>
   15b9c:	mov	r6, fp
   15ba0:	cmp	r0, #0
   15ba4:	strbne	r7, [r8]
   15ba8:	addne	r8, r8, #1
   15bac:	cmp	r4, fp
   15bb0:	bls	15ce0 <__assert_fail@plt+0x44c0>
   15bb4:	mov	fp, r6
   15bb8:	ldr	r0, [pc, #780]	; 15ecc <__assert_fail@plt+0x46ac>
   15bbc:	ldrb	r7, [fp], #1
   15bc0:	mov	r9, r6
   15bc4:	mov	r1, r7
   15bc8:	bl	1164c <strchr@plt>
   15bcc:	mov	r1, r7
   15bd0:	cmp	r0, #0
   15bd4:	mov	r0, sl
   15bd8:	bne	15b98 <__assert_fail@plt+0x4378>
   15bdc:	cmp	r4, r6
   15be0:	bls	15ce0 <__assert_fail@plt+0x44c0>
   15be4:	add	r2, r8, #4
   15be8:	add	ip, r6, #4
   15bec:	mov	r1, r2
   15bf0:	cmp	ip, r8
   15bf4:	cmphi	r1, r6
   15bf8:	sub	r0, r4, fp
   15bfc:	mov	r2, ip
   15c00:	add	r0, r0, #1
   15c04:	movls	r2, #1
   15c08:	movhi	r2, #0
   15c0c:	cmp	r0, #11
   15c10:	movls	r2, #0
   15c14:	andhi	r2, r2, #1
   15c18:	cmp	r2, #0
   15c1c:	mov	lr, fp
   15c20:	beq	18314 <__assert_fail@plt+0x6af4>
   15c24:	rsb	r2, r6, #0
   15c28:	ands	r2, r2, #3
   15c2c:	beq	18090 <__assert_fail@plt+0x6870>
   15c30:	cmp	r2, #1
   15c34:	strb	r7, [r8]
   15c38:	add	r9, r8, #1
   15c3c:	beq	15c64 <__assert_fail@plt+0x4444>
   15c40:	ldrb	r1, [r6, #1]
   15c44:	cmp	r2, #3
   15c48:	add	r9, r8, #2
   15c4c:	strb	r1, [r8, #1]
   15c50:	add	lr, r6, #2
   15c54:	ldrbeq	r1, [r6, #2]
   15c58:	addeq	r9, r8, #3
   15c5c:	addeq	lr, r6, #3
   15c60:	strbeq	r1, [r8, #2]
   15c64:	sub	r0, r0, r2
   15c68:	sub	r7, r0, #4
   15c6c:	add	r6, r6, r2
   15c70:	lsr	r7, r7, #2
   15c74:	add	r7, r7, #1
   15c78:	add	r2, r8, r2
   15c7c:	lsl	r1, r7, #2
   15c80:	mov	ip, #0
   15c84:	add	ip, ip, #1
   15c88:	ldr	r3, [r6], #4
   15c8c:	cmp	r7, ip
   15c90:	str	r3, [r2], #4
   15c94:	bhi	15c84 <__assert_fail@plt+0x4464>
   15c98:	cmp	r0, r1
   15c9c:	add	r2, r9, r1
   15ca0:	add	r1, lr, r1
   15ca4:	beq	15cd4 <__assert_fail@plt+0x44b4>
   15ca8:	ldrb	r0, [lr, r7, lsl #2]
   15cac:	add	ip, r1, #1
   15cb0:	cmp	r4, ip
   15cb4:	strb	r0, [r9, r7, lsl #2]
   15cb8:	bls	15cd4 <__assert_fail@plt+0x44b4>
   15cbc:	ldrb	r0, [r1, #1]
   15cc0:	add	ip, r1, #2
   15cc4:	cmp	r4, ip
   15cc8:	strb	r0, [r2, #1]
   15ccc:	ldrbhi	r1, [r1, #2]
   15cd0:	strbhi	r1, [r2, #2]
   15cd4:	add	r4, r4, #1
   15cd8:	sub	r3, r4, fp
   15cdc:	add	r8, r8, r3
   15ce0:	ldr	r3, [pc, #480]	; 15ec8 <__assert_fail@plt+0x46a8>
   15ce4:	mov	r1, r5
   15ce8:	ldr	r2, [sp, #196]	; 0xc4
   15cec:	b	15244 <__assert_fail@plt+0x3a24>
   15cf0:	add	r8, r0, #1
   15cf4:	ldrd	r2, [r6, #32]
   15cf8:	add	r4, r0, r1
   15cfc:	cmp	r8, r4
   15d00:	strd	r2, [sp, #8]
   15d04:	ldrcc	sl, [pc, #452]	; 15ed0 <__assert_fail@plt+0x46b0>
   15d08:	movcc	r6, r8
   15d0c:	bcc	15d30 <__assert_fail@plt+0x4510>
   15d10:	b	15e5c <__assert_fail@plt+0x463c>
   15d14:	bl	1164c <strchr@plt>
   15d18:	mov	r6, fp
   15d1c:	cmp	r0, #0
   15d20:	strbne	r7, [r8]
   15d24:	addne	r8, r8, #1
   15d28:	cmp	r4, fp
   15d2c:	bls	15e5c <__assert_fail@plt+0x463c>
   15d30:	mov	fp, r6
   15d34:	ldr	r0, [pc, #400]	; 15ecc <__assert_fail@plt+0x46ac>
   15d38:	ldrb	r7, [fp], #1
   15d3c:	mov	r9, r6
   15d40:	mov	r1, r7
   15d44:	bl	1164c <strchr@plt>
   15d48:	mov	r1, r7
   15d4c:	cmp	r0, #0
   15d50:	mov	r0, sl
   15d54:	bne	15d14 <__assert_fail@plt+0x44f4>
   15d58:	cmp	r4, r6
   15d5c:	bls	15e5c <__assert_fail@plt+0x463c>
   15d60:	add	r2, r8, #4
   15d64:	add	ip, r6, #4
   15d68:	mov	r0, r2
   15d6c:	cmp	ip, r8
   15d70:	cmphi	r0, r6
   15d74:	sub	r1, r4, fp
   15d78:	mov	r2, ip
   15d7c:	add	r1, r1, #1
   15d80:	movls	r2, #1
   15d84:	movhi	r2, #0
   15d88:	cmp	r1, #11
   15d8c:	movls	r2, #0
   15d90:	andhi	r2, r2, #1
   15d94:	cmp	r2, #0
   15d98:	mov	sl, fp
   15d9c:	beq	18224 <__assert_fail@plt+0x6a04>
   15da0:	rsb	r2, r6, #0
   15da4:	ands	r2, r2, #3
   15da8:	beq	180d8 <__assert_fail@plt+0x68b8>
   15dac:	cmp	r2, #1
   15db0:	strb	r7, [r8]
   15db4:	add	r9, r8, #1
   15db8:	beq	15de0 <__assert_fail@plt+0x45c0>
   15dbc:	ldrb	r0, [r6, #1]
   15dc0:	cmp	r2, #3
   15dc4:	add	r9, r8, #2
   15dc8:	strb	r0, [r8, #1]
   15dcc:	add	sl, r6, #2
   15dd0:	ldrbeq	r0, [r6, #2]
   15dd4:	addeq	r9, r8, #3
   15dd8:	addeq	sl, r6, #3
   15ddc:	strbeq	r0, [r8, #2]
   15de0:	sub	r1, r1, r2
   15de4:	sub	r0, r1, #4
   15de8:	add	r6, r6, r2
   15dec:	lsr	r0, r0, #2
   15df0:	add	r0, r0, #1
   15df4:	add	r2, r8, r2
   15df8:	lsl	ip, r0, #2
   15dfc:	mov	lr, #0
   15e00:	add	lr, lr, #1
   15e04:	ldr	r3, [r6], #4
   15e08:	cmp	r0, lr
   15e0c:	str	r3, [r2], #4
   15e10:	bhi	15e00 <__assert_fail@plt+0x45e0>
   15e14:	cmp	r1, ip
   15e18:	add	r2, r9, ip
   15e1c:	add	ip, sl, ip
   15e20:	beq	15e50 <__assert_fail@plt+0x4630>
   15e24:	ldrb	r1, [sl, r0, lsl #2]
   15e28:	add	lr, ip, #1
   15e2c:	cmp	r4, lr
   15e30:	strb	r1, [r9, r0, lsl #2]
   15e34:	bls	15e50 <__assert_fail@plt+0x4630>
   15e38:	ldrb	r1, [ip, #1]
   15e3c:	add	r0, ip, #2
   15e40:	cmp	r4, r0
   15e44:	strb	r1, [r2, #1]
   15e48:	ldrbhi	r1, [ip, #2]
   15e4c:	strbhi	r1, [r2, #2]
   15e50:	add	r4, r4, #1
   15e54:	sub	r3, r4, fp
   15e58:	add	r8, r8, r3
   15e5c:	ldr	r0, [pc, #76]	; 15eb0 <__assert_fail@plt+0x4690>
   15e60:	b	15860 <__assert_fail@plt+0x4040>
   15e64:	mov	r0, #0
   15e68:	add	r4, r5, r1
   15e6c:	add	r7, r5, #1
   15e70:	bl	1e7a8 <__assert_fail@plt+0xcf88>
   15e74:	ldr	r1, [sp, #196]	; 0xc4
   15e78:	str	r7, [sp, #8]
   15e7c:	bl	1f578 <__assert_fail@plt+0xdd58>
   15e80:	ldr	r8, [sp, #8]
   15e84:	cmp	r7, r4
   15e88:	movcc	fp, r8
   15e8c:	str	r0, [sp, #20]
   15e90:	bcc	15ef0 <__assert_fail@plt+0x46d0>
   15e94:	b	16024 <__assert_fail@plt+0x4804>
   15e98:	strdeq	r7, [r3], -r0
   15e9c:	andeq	r4, r2, r8, lsl #29
   15ea0:	andeq	r7, r3, ip, lsr #4
   15ea4:	andeq	r4, r2, r4, ror #28
   15ea8:	andeq	r4, r2, ip, asr lr
   15eac:	andeq	r4, r2, ip, lsl lr
   15eb0:	andeq	r4, r2, r4, lsl lr
   15eb4:	andeq	r4, r2, r8, lsl lr
   15eb8:	andeq	r4, r2, r0, lsr #19
   15ebc:	andeq	r4, r2, ip, lsr #19
   15ec0:	andeq	r4, r2, r0, lsr lr
   15ec4:	andeq	r4, r2, ip, lsl #28
   15ec8:	andeq	r4, r2, r0, lsl #29
   15ecc:	andeq	r4, r2, ip, lsr #12
   15ed0:	andeq	r4, r2, r0, lsl lr
   15ed4:	bl	1164c <strchr@plt>
   15ed8:	mov	fp, sl
   15edc:	cmp	r0, #0
   15ee0:	strbne	r7, [r8]
   15ee4:	addne	r8, r8, #1
   15ee8:	cmp	r4, sl
   15eec:	bls	16024 <__assert_fail@plt+0x4804>
   15ef0:	mov	sl, fp
   15ef4:	ldr	r0, [pc, #-48]	; 15ecc <__assert_fail@plt+0x46ac>
   15ef8:	ldrb	r7, [sl], #1
   15efc:	mov	r9, fp
   15f00:	mov	r1, r7
   15f04:	bl	1164c <strchr@plt>
   15f08:	mov	r1, r7
   15f0c:	cmp	r0, #0
   15f10:	ldr	r0, [pc, #-84]	; 15ec4 <__assert_fail@plt+0x46a4>
   15f14:	bne	15ed4 <__assert_fail@plt+0x46b4>
   15f18:	cmp	r4, fp
   15f1c:	bls	16024 <__assert_fail@plt+0x4804>
   15f20:	add	r1, r8, #4
   15f24:	add	ip, fp, #4
   15f28:	mov	r0, r1
   15f2c:	cmp	ip, r8
   15f30:	cmphi	r0, fp
   15f34:	sub	r3, r4, sl
   15f38:	mov	r1, ip
   15f3c:	add	r3, r3, #1
   15f40:	movls	r1, #1
   15f44:	movhi	r1, #0
   15f48:	cmp	r3, #11
   15f4c:	movls	r1, #0
   15f50:	andhi	r1, r1, #1
   15f54:	cmp	r1, #0
   15f58:	mov	ip, sl
   15f5c:	beq	183b4 <__assert_fail@plt+0x6b94>
   15f60:	rsb	r1, fp, #0
   15f64:	ands	r1, r1, #3
   15f68:	beq	180cc <__assert_fail@plt+0x68ac>
   15f6c:	cmp	r1, #1
   15f70:	strb	r7, [r8]
   15f74:	add	r2, r8, #1
   15f78:	beq	15fa0 <__assert_fail@plt+0x4780>
   15f7c:	ldrb	r0, [fp, #1]
   15f80:	cmp	r1, #3
   15f84:	add	r2, r8, #2
   15f88:	strb	r0, [r8, #1]
   15f8c:	add	ip, fp, #2
   15f90:	ldrbeq	r0, [fp, #2]
   15f94:	addeq	r2, r8, #3
   15f98:	addeq	ip, fp, #3
   15f9c:	strbeq	r0, [r8, #2]
   15fa0:	sub	r3, r3, r1
   15fa4:	sub	r0, r3, #4
   15fa8:	str	r3, [sp, #24]
   15fac:	lsr	r0, r0, #2
   15fb0:	add	r0, r0, #1
   15fb4:	add	r3, fp, r1
   15fb8:	lsl	lr, r0, #2
   15fbc:	add	r1, r8, r1
   15fc0:	mov	r7, #0
   15fc4:	add	r7, r7, #1
   15fc8:	ldr	r9, [r3], #4
   15fcc:	cmp	r0, r7
   15fd0:	str	r9, [r1], #4
   15fd4:	bhi	15fc4 <__assert_fail@plt+0x47a4>
   15fd8:	ldr	r3, [sp, #24]
   15fdc:	cmp	r3, lr
   15fe0:	add	r3, r2, lr
   15fe4:	add	lr, ip, lr
   15fe8:	beq	16018 <__assert_fail@plt+0x47f8>
   15fec:	ldrb	r1, [ip, r0, lsl #2]
   15ff0:	add	ip, lr, #1
   15ff4:	cmp	r4, ip
   15ff8:	strb	r1, [r2, r0, lsl #2]
   15ffc:	bls	16018 <__assert_fail@plt+0x47f8>
   16000:	ldrb	r1, [lr, #1]
   16004:	add	r0, lr, #2
   16008:	cmp	r4, r0
   1600c:	strb	r1, [r3, #1]
   16010:	ldrbhi	r1, [lr, #2]
   16014:	strbhi	r1, [r3, #2]
   16018:	add	r3, r4, #1
   1601c:	sub	r2, r3, sl
   16020:	add	r8, r8, r2
   16024:	ldr	r7, [pc, #-356]	; 15ec8 <__assert_fail@plt+0x46a8>
   16028:	ldr	r2, [sp, #20]
   1602c:	mov	r1, r5
   16030:	ldrh	r3, [r7]
   16034:	mov	r0, #1
   16038:	strh	r3, [r8]
   1603c:	bl	116b8 <__printf_chk@plt>
   16040:	ldr	r3, [r6, #16]
   16044:	and	r3, r3, #61440	; 0xf000
   16048:	cmp	r3, #40960	; 0xa000
   1604c:	movne	r6, #0
   16050:	bne	15a28 <__assert_fail@plt+0x4208>
   16054:	ldr	r1, [r6, #48]	; 0x30
   16058:	ldr	r0, [sp, #196]	; 0xc4
   1605c:	bl	19aac <__assert_fail@plt+0x828c>
   16060:	subs	r3, r0, #0
   16064:	str	r3, [sp, #20]
   16068:	beq	18790 <__assert_fail@plt+0x6f70>
   1606c:	ldr	r1, [pc, #-460]	; 15ea8 <__assert_fail@plt+0x4688>
   16070:	mov	r0, #1
   16074:	bl	116b8 <__printf_chk@plt>
   16078:	mov	r0, #0
   1607c:	bl	1e7a8 <__assert_fail@plt+0xcf88>
   16080:	ldr	r1, [sp, #20]
   16084:	bl	1f578 <__assert_fail@plt+0xdd58>
   16088:	ldr	r3, [sp, #8]
   1608c:	cmp	r3, r4
   16090:	str	r0, [sp, #24]
   16094:	bcs	16210 <__assert_fail@plt+0x49f0>
   16098:	str	r5, [sp, #28]
   1609c:	mov	r8, r3
   160a0:	ldr	sl, [pc, #-476]	; 15ecc <__assert_fail@plt+0x46ac>
   160a4:	mov	r5, r3
   160a8:	mov	r9, r4
   160ac:	b	160cc <__assert_fail@plt+0x48ac>
   160b0:	bl	1164c <strchr@plt>
   160b4:	mov	r5, fp
   160b8:	cmp	r0, #0
   160bc:	strbne	r6, [r8]
   160c0:	addne	r8, r8, #1
   160c4:	cmp	r9, fp
   160c8:	bls	186b8 <__assert_fail@plt+0x6e98>
   160cc:	mov	fp, r5
   160d0:	mov	r0, sl
   160d4:	ldrb	r6, [fp], #1
   160d8:	mov	r1, r6
   160dc:	bl	1164c <strchr@plt>
   160e0:	mov	r1, r6
   160e4:	cmp	r0, #0
   160e8:	ldr	r0, [pc, #-556]	; 15ec4 <__assert_fail@plt+0x46a4>
   160ec:	bne	160b0 <__assert_fail@plt+0x4890>
   160f0:	mov	r4, r9
   160f4:	mov	r3, r8
   160f8:	str	r8, [sp, #8]
   160fc:	mov	r8, r5
   16100:	cmp	r4, r8
   16104:	mov	r9, r5
   16108:	ldr	r5, [sp, #28]
   1610c:	bls	16210 <__assert_fail@plt+0x49f0>
   16110:	add	r1, r3, #4
   16114:	add	r0, r8, #4
   16118:	cmp	r0, r3
   1611c:	cmphi	r1, r8
   16120:	sub	sl, r4, fp
   16124:	movls	r1, #1
   16128:	movhi	r1, #0
   1612c:	add	sl, sl, #1
   16130:	cmp	sl, #11
   16134:	movls	r1, #0
   16138:	andhi	r1, r1, #1
   1613c:	cmp	r1, #0
   16140:	mov	ip, fp
   16144:	beq	1882c <__assert_fail@plt+0x700c>
   16148:	rsb	r1, r8, #0
   1614c:	ands	r1, r1, #3
   16150:	beq	18820 <__assert_fail@plt+0x7000>
   16154:	cmp	r1, #1
   16158:	strb	r6, [r3]
   1615c:	add	r6, r3, #1
   16160:	beq	16188 <__assert_fail@plt+0x4968>
   16164:	ldrb	r0, [r8, #1]
   16168:	cmp	r1, #3
   1616c:	add	r6, r3, #2
   16170:	strb	r0, [r3, #1]
   16174:	add	ip, r8, #2
   16178:	ldrbeq	r0, [r8, #2]
   1617c:	addeq	r6, r3, #3
   16180:	addeq	ip, r8, #3
   16184:	strbeq	r0, [r3, #2]
   16188:	sub	sl, sl, r1
   1618c:	sub	lr, sl, #4
   16190:	ldr	r2, [sp, #8]
   16194:	lsr	lr, lr, #2
   16198:	add	lr, lr, #1
   1619c:	add	r3, r9, r1
   161a0:	mov	r0, #0
   161a4:	add	r1, r2, r1
   161a8:	lsl	r9, lr, #2
   161ac:	add	r0, r0, #1
   161b0:	ldr	r2, [r3], #4
   161b4:	cmp	lr, r0
   161b8:	str	r2, [r1], #4
   161bc:	bhi	161ac <__assert_fail@plt+0x498c>
   161c0:	cmp	sl, r9
   161c4:	add	r3, r6, r9
   161c8:	add	r9, ip, r9
   161cc:	beq	161fc <__assert_fail@plt+0x49dc>
   161d0:	ldrb	r1, [ip, lr, lsl #2]
   161d4:	add	r0, r9, #1
   161d8:	cmp	r4, r0
   161dc:	strb	r1, [r6, lr, lsl #2]
   161e0:	bls	161fc <__assert_fail@plt+0x49dc>
   161e4:	ldrb	r1, [r9, #1]
   161e8:	add	r0, r9, #2
   161ec:	cmp	r4, r0
   161f0:	strb	r1, [r3, #1]
   161f4:	ldrbhi	r1, [r9, #2]
   161f8:	strbhi	r1, [r3, #2]
   161fc:	ldr	r3, [sp, #8]
   16200:	add	r4, r4, #1
   16204:	sub	r2, r4, fp
   16208:	add	r3, r3, r2
   1620c:	str	r3, [sp, #8]
   16210:	ldrh	r3, [r7]
   16214:	ldr	r0, [sp, #8]
   16218:	ldr	r2, [sp, #24]
   1621c:	mov	r1, r5
   16220:	strh	r3, [r0]
   16224:	mov	r0, #1
   16228:	bl	116b8 <__printf_chk@plt>
   1622c:	ldr	r0, [sp, #20]
   16230:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   16234:	mov	r6, #0
   16238:	b	15a28 <__assert_fail@plt+0x4208>
   1623c:	add	r7, r0, #1
   16240:	add	r4, r0, r1
   16244:	cmp	r7, r4
   16248:	ldr	r3, [r6, #24]
   1624c:	ldrcc	sl, [pc, #-904]	; 15ecc <__assert_fail@plt+0x46ac>
   16250:	str	r3, [sp, #8]
   16254:	movcc	r9, r7
   16258:	bcc	1627c <__assert_fail@plt+0x4a5c>
   1625c:	b	163a8 <__assert_fail@plt+0x4b88>
   16260:	bl	1164c <strchr@plt>
   16264:	mov	r9, fp
   16268:	cmp	r0, #0
   1626c:	strbne	r6, [r7]
   16270:	addne	r7, r7, #1
   16274:	cmp	r4, fp
   16278:	bls	163a8 <__assert_fail@plt+0x4b88>
   1627c:	mov	fp, r9
   16280:	mov	r0, sl
   16284:	ldrb	r6, [fp], #1
   16288:	mov	r8, r9
   1628c:	mov	r1, r6
   16290:	bl	1164c <strchr@plt>
   16294:	mov	r1, r6
   16298:	cmp	r0, #0
   1629c:	ldr	r0, [pc, #-1008]	; 15eb4 <__assert_fail@plt+0x4694>
   162a0:	bne	16260 <__assert_fail@plt+0x4a40>
   162a4:	cmp	r4, r9
   162a8:	bls	163a8 <__assert_fail@plt+0x4b88>
   162ac:	add	r1, r7, #4
   162b0:	add	lr, r9, #4
   162b4:	mov	r0, r1
   162b8:	cmp	lr, r7
   162bc:	cmphi	r0, r9
   162c0:	sub	ip, r4, fp
   162c4:	mov	r1, lr
   162c8:	add	ip, ip, #1
   162cc:	movls	r1, #1
   162d0:	movhi	r1, #0
   162d4:	cmp	ip, #11
   162d8:	movls	r1, #0
   162dc:	andhi	r1, r1, #1
   162e0:	cmp	r1, #0
   162e4:	mov	lr, fp
   162e8:	beq	183cc <__assert_fail@plt+0x6bac>
   162ec:	rsb	r1, r9, #0
   162f0:	ands	r1, r1, #3
   162f4:	beq	180a8 <__assert_fail@plt+0x6888>
   162f8:	cmp	r1, #1
   162fc:	strb	r6, [r7]
   16300:	add	r8, r7, #1
   16304:	beq	1632c <__assert_fail@plt+0x4b0c>
   16308:	ldrb	r0, [r9, #1]
   1630c:	cmp	r1, #3
   16310:	add	r8, r7, #2
   16314:	strb	r0, [r7, #1]
   16318:	add	lr, r9, #2
   1631c:	ldrbeq	r0, [r9, #2]
   16320:	addeq	r8, r7, #3
   16324:	addeq	lr, r9, #3
   16328:	strbeq	r0, [r7, #2]
   1632c:	sub	ip, ip, r1
   16330:	sub	r6, ip, #4
   16334:	add	r9, r9, r1
   16338:	lsr	r6, r6, #2
   1633c:	add	r6, r6, #1
   16340:	add	r1, r7, r1
   16344:	lsl	r3, r6, #2
   16348:	mov	r0, #0
   1634c:	add	r0, r0, #1
   16350:	ldr	r2, [r9], #4
   16354:	cmp	r6, r0
   16358:	str	r2, [r1], #4
   1635c:	bhi	1634c <__assert_fail@plt+0x4b2c>
   16360:	cmp	ip, r3
   16364:	add	r1, r8, r3
   16368:	add	r3, lr, r3
   1636c:	beq	1639c <__assert_fail@plt+0x4b7c>
   16370:	ldrb	r0, [lr, r6, lsl #2]
   16374:	add	ip, r3, #1
   16378:	cmp	r4, ip
   1637c:	strb	r0, [r8, r6, lsl #2]
   16380:	bls	1639c <__assert_fail@plt+0x4b7c>
   16384:	ldrb	r0, [r3, #1]
   16388:	add	ip, r3, #2
   1638c:	cmp	r4, ip
   16390:	strb	r0, [r1, #1]
   16394:	ldrbhi	r3, [r3, #2]
   16398:	strbhi	r3, [r1, #2]
   1639c:	add	r4, r4, #1
   163a0:	sub	r2, r4, fp
   163a4:	add	r7, r7, r2
   163a8:	ldr	r3, [pc, #-1284]	; 15eac <__assert_fail@plt+0x468c>
   163ac:	b	16534 <__assert_fail@plt+0x4d14>
   163b0:	ldr	r3, [r6, #32]
   163b4:	ldr	fp, [r6, #36]	; 0x24
   163b8:	add	r7, r0, #1
   163bc:	add	r4, r0, r1
   163c0:	bic	fp, fp, #4080	; 0xff0
   163c4:	lsl	r3, r3, #12
   163c8:	cmp	r7, r4
   163cc:	bic	fp, fp, #15
   163d0:	orr	r3, fp, r3, lsr #20
   163d4:	str	r3, [sp, #8]
   163d8:	ldrcc	sl, [pc, #-1300]	; 15ecc <__assert_fail@plt+0x46ac>
   163dc:	movcc	r9, r7
   163e0:	bcc	16404 <__assert_fail@plt+0x4be4>
   163e4:	b	16530 <__assert_fail@plt+0x4d10>
   163e8:	bl	1164c <strchr@plt>
   163ec:	mov	r9, fp
   163f0:	cmp	r0, #0
   163f4:	strbne	r6, [r7]
   163f8:	addne	r7, r7, #1
   163fc:	cmp	r4, fp
   16400:	bls	16530 <__assert_fail@plt+0x4d10>
   16404:	mov	fp, r9
   16408:	mov	r0, sl
   1640c:	ldrb	r6, [fp], #1
   16410:	mov	r8, r9
   16414:	mov	r1, r6
   16418:	bl	1164c <strchr@plt>
   1641c:	mov	r1, r6
   16420:	cmp	r0, #0
   16424:	ldr	r0, [pc, #-1372]	; 15ed0 <__assert_fail@plt+0x46b0>
   16428:	bne	163e8 <__assert_fail@plt+0x4bc8>
   1642c:	cmp	r4, r9
   16430:	bls	16530 <__assert_fail@plt+0x4d10>
   16434:	add	r1, r7, #4
   16438:	add	lr, r9, #4
   1643c:	mov	r0, r1
   16440:	cmp	lr, r7
   16444:	cmphi	r0, r9
   16448:	sub	ip, r4, fp
   1644c:	mov	r1, lr
   16450:	add	ip, ip, #1
   16454:	movls	r1, #1
   16458:	movhi	r1, #0
   1645c:	cmp	ip, #11
   16460:	movls	r1, #0
   16464:	andhi	r1, r1, #1
   16468:	cmp	r1, #0
   1646c:	mov	lr, fp
   16470:	beq	1829c <__assert_fail@plt+0x6a7c>
   16474:	rsb	r1, r9, #0
   16478:	ands	r1, r1, #3
   1647c:	beq	180e4 <__assert_fail@plt+0x68c4>
   16480:	cmp	r1, #1
   16484:	strb	r6, [r7]
   16488:	add	r8, r7, #1
   1648c:	beq	164b4 <__assert_fail@plt+0x4c94>
   16490:	ldrb	r0, [r9, #1]
   16494:	cmp	r1, #3
   16498:	add	r8, r7, #2
   1649c:	strb	r0, [r7, #1]
   164a0:	add	lr, r9, #2
   164a4:	ldrbeq	r0, [r9, #2]
   164a8:	addeq	r8, r7, #3
   164ac:	addeq	lr, r9, #3
   164b0:	strbeq	r0, [r7, #2]
   164b4:	sub	ip, ip, r1
   164b8:	sub	r6, ip, #4
   164bc:	add	r9, r9, r1
   164c0:	lsr	r6, r6, #2
   164c4:	add	r6, r6, #1
   164c8:	add	r1, r7, r1
   164cc:	lsl	r3, r6, #2
   164d0:	mov	r0, #0
   164d4:	add	r0, r0, #1
   164d8:	ldr	r2, [r9], #4
   164dc:	cmp	r6, r0
   164e0:	str	r2, [r1], #4
   164e4:	bhi	164d4 <__assert_fail@plt+0x4cb4>
   164e8:	cmp	ip, r3
   164ec:	add	r1, r8, r3
   164f0:	add	r3, lr, r3
   164f4:	beq	16524 <__assert_fail@plt+0x4d04>
   164f8:	ldrb	r0, [lr, r6, lsl #2]
   164fc:	add	ip, r3, #1
   16500:	cmp	r4, ip
   16504:	strb	r0, [r8, r6, lsl #2]
   16508:	bls	16524 <__assert_fail@plt+0x4d04>
   1650c:	ldrb	r0, [r3, #1]
   16510:	add	ip, r3, #2
   16514:	cmp	r4, ip
   16518:	strb	r0, [r1, #1]
   1651c:	ldrbhi	r3, [r3, #2]
   16520:	strbhi	r3, [r1, #2]
   16524:	add	r4, r4, #1
   16528:	sub	r2, r4, fp
   1652c:	add	r7, r7, r2
   16530:	ldr	r3, [pc, #-1672]	; 15eb0 <__assert_fail@plt+0x4690>
   16534:	ldr	r0, [r3]
   16538:	ldr	r2, [sp, #8]
   1653c:	mov	r1, r5
   16540:	str	r0, [r7]
   16544:	mov	r3, #0
   16548:	mov	r0, #1
   1654c:	bl	116b8 <__printf_chk@plt>
   16550:	mov	r6, #0
   16554:	mov	r0, r6
   16558:	add	sp, sp, #156	; 0x9c
   1655c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16560:	add	r6, r6, #72	; 0x48
   16564:	add	r3, sp, #44	; 0x2c
   16568:	b	15a0c <__assert_fail@plt+0x41ec>
   1656c:	cmp	r7, #0
   16570:	movlt	r7, #0
   16574:	add	r3, sp, #152	; 0x98
   16578:	movlt	lr, r7
   1657c:	str	r7, [sp, #40]	; 0x28
   16580:	str	lr, [r3, #-116]!	; 0xffffff8c
   16584:	ldm	r3, {r2, r3}
   16588:	bl	12550 <__assert_fail@plt+0xd30>
   1658c:	mov	r6, #0
   16590:	b	15a28 <__assert_fail@plt+0x4208>
   16594:	add	r7, r0, #1
   16598:	add	r4, r0, r1
   1659c:	cmp	r7, r4
   165a0:	ldr	r3, [r6, #20]
   165a4:	ldrcc	sl, [pc, #-1760]	; 15ecc <__assert_fail@plt+0x46ac>
   165a8:	str	r3, [sp, #8]
   165ac:	movcc	r9, r7
   165b0:	bcc	165d4 <__assert_fail@plt+0x4db4>
   165b4:	b	163a8 <__assert_fail@plt+0x4b88>
   165b8:	bl	1164c <strchr@plt>
   165bc:	mov	r9, fp
   165c0:	cmp	r0, #0
   165c4:	strbne	r6, [r7]
   165c8:	addne	r7, r7, #1
   165cc:	cmp	r4, fp
   165d0:	bls	163a8 <__assert_fail@plt+0x4b88>
   165d4:	mov	fp, r9
   165d8:	mov	r0, sl
   165dc:	ldrb	r6, [fp], #1
   165e0:	mov	r8, r9
   165e4:	mov	r1, r6
   165e8:	bl	1164c <strchr@plt>
   165ec:	mov	r1, r6
   165f0:	cmp	r0, #0
   165f4:	ldr	r0, [pc, #-1864]	; 15eb4 <__assert_fail@plt+0x4694>
   165f8:	bne	165b8 <__assert_fail@plt+0x4d98>
   165fc:	cmp	r4, r9
   16600:	bls	163a8 <__assert_fail@plt+0x4b88>
   16604:	add	r1, r7, #4
   16608:	add	lr, r9, #4
   1660c:	mov	r0, r1
   16610:	cmp	lr, r7
   16614:	cmphi	r0, r9
   16618:	sub	ip, r4, fp
   1661c:	mov	r1, lr
   16620:	add	ip, ip, #1
   16624:	movls	r1, #1
   16628:	movhi	r1, #0
   1662c:	cmp	ip, #11
   16630:	movls	r1, #0
   16634:	andhi	r1, r1, #1
   16638:	cmp	r1, #0
   1663c:	mov	lr, fp
   16640:	beq	18384 <__assert_fail@plt+0x6b64>
   16644:	rsb	r1, r9, #0
   16648:	ands	r1, r1, #3
   1664c:	beq	18054 <__assert_fail@plt+0x6834>
   16650:	cmp	r1, #1
   16654:	strb	r6, [r7]
   16658:	add	r8, r7, #1
   1665c:	beq	16684 <__assert_fail@plt+0x4e64>
   16660:	ldrb	r0, [r9, #1]
   16664:	cmp	r1, #3
   16668:	add	r8, r7, #2
   1666c:	strb	r0, [r7, #1]
   16670:	add	lr, r9, #2
   16674:	ldrbeq	r0, [r9, #2]
   16678:	addeq	r8, r7, #3
   1667c:	addeq	lr, r9, #3
   16680:	strbeq	r0, [r7, #2]
   16684:	sub	ip, ip, r1
   16688:	sub	r6, ip, #4
   1668c:	add	r9, r9, r1
   16690:	lsr	r6, r6, #2
   16694:	add	r6, r6, #1
   16698:	add	r1, r7, r1
   1669c:	lsl	r3, r6, #2
   166a0:	mov	r0, #0
   166a4:	add	r0, r0, #1
   166a8:	ldr	r2, [r9], #4
   166ac:	cmp	r6, r0
   166b0:	str	r2, [r1], #4
   166b4:	bhi	166a4 <__assert_fail@plt+0x4e84>
   166b8:	b	16360 <__assert_fail@plt+0x4b40>
   166bc:	add	r7, r0, #1
   166c0:	add	r4, r0, r1
   166c4:	cmp	r7, r4
   166c8:	ldr	r3, [r6, #28]
   166cc:	ldrcc	sl, [pc, #-2056]	; 15ecc <__assert_fail@plt+0x46ac>
   166d0:	str	r3, [sp, #8]
   166d4:	movcc	r9, r7
   166d8:	bcc	166fc <__assert_fail@plt+0x4edc>
   166dc:	b	163a8 <__assert_fail@plt+0x4b88>
   166e0:	bl	1164c <strchr@plt>
   166e4:	mov	r9, fp
   166e8:	cmp	r0, #0
   166ec:	strbne	r6, [r7]
   166f0:	addne	r7, r7, #1
   166f4:	cmp	r4, fp
   166f8:	bls	163a8 <__assert_fail@plt+0x4b88>
   166fc:	mov	fp, r9
   16700:	mov	r0, sl
   16704:	ldrb	r6, [fp], #1
   16708:	mov	r8, r9
   1670c:	mov	r1, r6
   16710:	bl	1164c <strchr@plt>
   16714:	mov	r1, r6
   16718:	cmp	r0, #0
   1671c:	ldr	r0, [pc, #-2160]	; 15eb4 <__assert_fail@plt+0x4694>
   16720:	bne	166e0 <__assert_fail@plt+0x4ec0>
   16724:	cmp	r4, r9
   16728:	bls	163a8 <__assert_fail@plt+0x4b88>
   1672c:	add	r1, r7, #4
   16730:	add	lr, r9, #4
   16734:	mov	r0, r1
   16738:	cmp	lr, r7
   1673c:	cmphi	r0, r9
   16740:	sub	ip, r4, fp
   16744:	mov	r1, lr
   16748:	add	ip, ip, #1
   1674c:	movls	r1, #1
   16750:	movhi	r1, #0
   16754:	cmp	ip, #11
   16758:	movls	r1, #0
   1675c:	andhi	r1, r1, #1
   16760:	cmp	r1, #0
   16764:	mov	lr, fp
   16768:	beq	181ac <__assert_fail@plt+0x698c>
   1676c:	rsb	r1, r9, #0
   16770:	ands	r1, r1, #3
   16774:	beq	18144 <__assert_fail@plt+0x6924>
   16778:	cmp	r1, #1
   1677c:	strb	r6, [r7]
   16780:	add	r8, r7, #1
   16784:	beq	167ac <__assert_fail@plt+0x4f8c>
   16788:	ldrb	r0, [r9, #1]
   1678c:	cmp	r1, #3
   16790:	add	r8, r7, #2
   16794:	strb	r0, [r7, #1]
   16798:	add	lr, r9, #2
   1679c:	ldrbeq	r0, [r9, #2]
   167a0:	addeq	r8, r7, #3
   167a4:	addeq	lr, r9, #3
   167a8:	strbeq	r0, [r7, #2]
   167ac:	sub	ip, ip, r1
   167b0:	sub	r6, ip, #4
   167b4:	add	r9, r9, r1
   167b8:	lsr	r6, r6, #2
   167bc:	add	r6, r6, #1
   167c0:	add	r1, r7, r1
   167c4:	lsl	r3, r6, #2
   167c8:	mov	r0, #0
   167cc:	add	r0, r0, #1
   167d0:	ldr	r2, [r9], #4
   167d4:	cmp	r6, r0
   167d8:	str	r2, [r1], #4
   167dc:	bhi	167cc <__assert_fail@plt+0x4fac>
   167e0:	b	16360 <__assert_fail@plt+0x4b40>
   167e4:	add	r7, r0, #1
   167e8:	add	r4, r0, r1
   167ec:	cmp	r7, r4
   167f0:	ldr	r3, [r6, #16]
   167f4:	ldrcc	sl, [pc, #-2352]	; 15ecc <__assert_fail@plt+0x46ac>
   167f8:	str	r3, [sp, #8]
   167fc:	movcc	r9, r7
   16800:	bcc	16824 <__assert_fail@plt+0x5004>
   16804:	b	16530 <__assert_fail@plt+0x4d10>
   16808:	bl	1164c <strchr@plt>
   1680c:	mov	r9, fp
   16810:	cmp	r0, #0
   16814:	strbne	r6, [r7]
   16818:	addne	r7, r7, #1
   1681c:	cmp	r4, fp
   16820:	bls	16530 <__assert_fail@plt+0x4d10>
   16824:	mov	fp, r9
   16828:	mov	r0, sl
   1682c:	ldrb	r6, [fp], #1
   16830:	mov	r8, r9
   16834:	mov	r1, r6
   16838:	bl	1164c <strchr@plt>
   1683c:	mov	r1, r6
   16840:	cmp	r0, #0
   16844:	ldr	r0, [pc, #-2428]	; 15ed0 <__assert_fail@plt+0x46b0>
   16848:	bne	16808 <__assert_fail@plt+0x4fe8>
   1684c:	cmp	r4, r9
   16850:	bls	16530 <__assert_fail@plt+0x4d10>
   16854:	add	r1, r7, #4
   16858:	add	lr, r9, #4
   1685c:	mov	r0, r1
   16860:	cmp	lr, r7
   16864:	cmphi	r0, r9
   16868:	sub	ip, r4, fp
   1686c:	mov	r1, lr
   16870:	add	ip, ip, #1
   16874:	movls	r1, #1
   16878:	movhi	r1, #0
   1687c:	cmp	ip, #11
   16880:	movls	r1, #0
   16884:	andhi	r1, r1, #1
   16888:	cmp	r1, #0
   1688c:	mov	lr, fp
   16890:	beq	182fc <__assert_fail@plt+0x6adc>
   16894:	rsb	r1, r9, #0
   16898:	ands	r1, r1, #3
   1689c:	beq	18084 <__assert_fail@plt+0x6864>
   168a0:	cmp	r1, #1
   168a4:	strb	r6, [r7]
   168a8:	add	r8, r7, #1
   168ac:	beq	168d4 <__assert_fail@plt+0x50b4>
   168b0:	ldrb	r0, [r9, #1]
   168b4:	cmp	r1, #3
   168b8:	add	r8, r7, #2
   168bc:	strb	r0, [r7, #1]
   168c0:	add	lr, r9, #2
   168c4:	ldrbeq	r0, [r9, #2]
   168c8:	addeq	r8, r7, #3
   168cc:	addeq	lr, r9, #3
   168d0:	strbeq	r0, [r7, #2]
   168d4:	sub	ip, ip, r1
   168d8:	sub	r6, ip, #4
   168dc:	add	r9, r9, r1
   168e0:	lsr	r6, r6, #2
   168e4:	add	r6, r6, #1
   168e8:	add	r1, r7, r1
   168ec:	lsl	r3, r6, #2
   168f0:	mov	r0, #0
   168f4:	add	r0, r0, #1
   168f8:	ldr	r2, [r9], #4
   168fc:	cmp	r6, r0
   16900:	str	r2, [r1], #4
   16904:	bhi	168f4 <__assert_fail@plt+0x50d4>
   16908:	b	164e8 <__assert_fail@plt+0x4cc8>
   1690c:	add	r8, r0, #1
   16910:	ldrd	r2, [r6]
   16914:	add	r4, r0, r1
   16918:	cmp	r8, r4
   1691c:	strd	r2, [sp, #8]
   16920:	ldrcc	sl, [pc, #-2648]	; 15ed0 <__assert_fail@plt+0x46b0>
   16924:	movcc	r6, r8
   16928:	bcc	1694c <__assert_fail@plt+0x512c>
   1692c:	b	15e5c <__assert_fail@plt+0x463c>
   16930:	bl	1164c <strchr@plt>
   16934:	mov	r6, fp
   16938:	cmp	r0, #0
   1693c:	strbne	r7, [r8]
   16940:	addne	r8, r8, #1
   16944:	cmp	r4, fp
   16948:	bls	15e5c <__assert_fail@plt+0x463c>
   1694c:	mov	fp, r6
   16950:	ldr	r0, [pc, #-2700]	; 15ecc <__assert_fail@plt+0x46ac>
   16954:	ldrb	r7, [fp], #1
   16958:	mov	r9, r6
   1695c:	mov	r1, r7
   16960:	bl	1164c <strchr@plt>
   16964:	mov	r1, r7
   16968:	cmp	r0, #0
   1696c:	mov	r0, sl
   16970:	bne	16930 <__assert_fail@plt+0x5110>
   16974:	cmp	r4, r6
   16978:	bls	15e5c <__assert_fail@plt+0x463c>
   1697c:	add	r2, r8, #4
   16980:	add	ip, r6, #4
   16984:	mov	r0, r2
   16988:	cmp	ip, r8
   1698c:	cmphi	r0, r6
   16990:	sub	r1, r4, fp
   16994:	mov	r2, ip
   16998:	add	r1, r1, #1
   1699c:	movls	r2, #1
   169a0:	movhi	r2, #0
   169a4:	cmp	r1, #11
   169a8:	movls	r2, #0
   169ac:	andhi	r2, r2, #1
   169b0:	cmp	r2, #0
   169b4:	mov	sl, fp
   169b8:	beq	1839c <__assert_fail@plt+0x6b7c>
   169bc:	rsb	r2, r6, #0
   169c0:	ands	r2, r2, #3
   169c4:	beq	180c0 <__assert_fail@plt+0x68a0>
   169c8:	cmp	r2, #1
   169cc:	strb	r7, [r8]
   169d0:	add	r9, r8, #1
   169d4:	beq	169fc <__assert_fail@plt+0x51dc>
   169d8:	ldrb	r0, [r6, #1]
   169dc:	cmp	r2, #3
   169e0:	add	r9, r8, #2
   169e4:	strb	r0, [r8, #1]
   169e8:	add	sl, r6, #2
   169ec:	ldrbeq	r0, [r6, #2]
   169f0:	addeq	r9, r8, #3
   169f4:	addeq	sl, r6, #3
   169f8:	strbeq	r0, [r8, #2]
   169fc:	sub	r1, r1, r2
   16a00:	sub	r0, r1, #4
   16a04:	add	r6, r6, r2
   16a08:	lsr	r0, r0, #2
   16a0c:	add	r0, r0, #1
   16a10:	add	r2, r8, r2
   16a14:	lsl	ip, r0, #2
   16a18:	mov	lr, #0
   16a1c:	add	lr, lr, #1
   16a20:	ldr	r3, [r6], #4
   16a24:	cmp	r0, lr
   16a28:	str	r3, [r2], #4
   16a2c:	bhi	16a1c <__assert_fail@plt+0x51fc>
   16a30:	b	15e14 <__assert_fail@plt+0x45f4>
   16a34:	add	r8, r0, #1
   16a38:	ldrd	r2, [r6, #48]	; 0x30
   16a3c:	add	r4, r0, r1
   16a40:	cmp	r8, r4
   16a44:	strd	r2, [sp, #8]
   16a48:	ldrcc	sl, [pc, #-2968]	; 15eb8 <__assert_fail@plt+0x4698>
   16a4c:	movcc	r6, r8
   16a50:	bcc	16a74 <__assert_fail@plt+0x5254>
   16a54:	b	16ba0 <__assert_fail@plt+0x5380>
   16a58:	bl	1164c <strchr@plt>
   16a5c:	mov	r6, fp
   16a60:	cmp	r0, #0
   16a64:	strbne	r7, [r8]
   16a68:	addne	r8, r8, #1
   16a6c:	cmp	r4, fp
   16a70:	bls	16ba0 <__assert_fail@plt+0x5380>
   16a74:	mov	fp, r6
   16a78:	ldr	r0, [pc, #-2996]	; 15ecc <__assert_fail@plt+0x46ac>
   16a7c:	ldrb	r7, [fp], #1
   16a80:	mov	r9, r6
   16a84:	mov	r1, r7
   16a88:	bl	1164c <strchr@plt>
   16a8c:	mov	r1, r7
   16a90:	cmp	r0, #0
   16a94:	mov	r0, sl
   16a98:	bne	16a58 <__assert_fail@plt+0x5238>
   16a9c:	cmp	r4, r6
   16aa0:	bls	16ba0 <__assert_fail@plt+0x5380>
   16aa4:	add	r2, r8, #4
   16aa8:	add	ip, r6, #4
   16aac:	mov	r0, r2
   16ab0:	cmp	ip, r8
   16ab4:	cmphi	r0, r6
   16ab8:	sub	r1, r4, fp
   16abc:	mov	r2, ip
   16ac0:	add	r1, r1, #1
   16ac4:	movls	r2, #1
   16ac8:	movhi	r2, #0
   16acc:	cmp	r1, #11
   16ad0:	movls	r2, #0
   16ad4:	andhi	r2, r2, #1
   16ad8:	cmp	r2, #0
   16adc:	mov	sl, fp
   16ae0:	beq	18254 <__assert_fail@plt+0x6a34>
   16ae4:	rsb	r2, r6, #0
   16ae8:	ands	r2, r2, #3
   16aec:	beq	18120 <__assert_fail@plt+0x6900>
   16af0:	cmp	r2, #1
   16af4:	strb	r7, [r8]
   16af8:	add	r9, r8, #1
   16afc:	beq	16b24 <__assert_fail@plt+0x5304>
   16b00:	ldrb	r0, [r6, #1]
   16b04:	cmp	r2, #3
   16b08:	add	r9, r8, #2
   16b0c:	strb	r0, [r8, #1]
   16b10:	add	sl, r6, #2
   16b14:	ldrbeq	r0, [r6, #2]
   16b18:	addeq	r9, r8, #3
   16b1c:	addeq	sl, r6, #3
   16b20:	strbeq	r0, [r8, #2]
   16b24:	sub	r1, r1, r2
   16b28:	sub	r0, r1, #4
   16b2c:	add	r6, r6, r2
   16b30:	lsr	r0, r0, #2
   16b34:	add	r0, r0, #1
   16b38:	add	r2, r8, r2
   16b3c:	lsl	ip, r0, #2
   16b40:	mov	lr, #0
   16b44:	add	lr, lr, #1
   16b48:	ldr	r3, [r6], #4
   16b4c:	cmp	r0, lr
   16b50:	str	r3, [r2], #4
   16b54:	bhi	16b44 <__assert_fail@plt+0x5324>
   16b58:	cmp	r1, ip
   16b5c:	add	r2, r9, ip
   16b60:	add	ip, sl, ip
   16b64:	beq	16b94 <__assert_fail@plt+0x5374>
   16b68:	ldrb	r1, [sl, r0, lsl #2]
   16b6c:	add	lr, ip, #1
   16b70:	cmp	r4, lr
   16b74:	strb	r1, [r9, r0, lsl #2]
   16b78:	bls	16b94 <__assert_fail@plt+0x5374>
   16b7c:	ldrb	r1, [ip, #1]
   16b80:	add	r0, ip, #2
   16b84:	cmp	r4, r0
   16b88:	strb	r1, [r2, #1]
   16b8c:	ldrbhi	r1, [ip, #2]
   16b90:	strbhi	r1, [r2, #2]
   16b94:	add	r4, r4, #1
   16b98:	sub	r3, r4, fp
   16b9c:	add	r8, r8, r3
   16ba0:	ldr	r0, [pc, #-3308]	; 15ebc <__assert_fail@plt+0x469c>
   16ba4:	b	15860 <__assert_fail@plt+0x4040>
   16ba8:	ldr	r0, [r6, #24]
   16bac:	bl	11454 <getpwuid@plt>
   16bb0:	add	r7, r5, #1
   16bb4:	add	r4, r5, r4
   16bb8:	cmp	r0, #0
   16bbc:	ldrne	r3, [r0]
   16bc0:	ldreq	r3, [pc, #-3336]	; 15ec0 <__assert_fail@plt+0x46a0>
   16bc4:	cmp	r7, r4
   16bc8:	str	r3, [sp, #8]
   16bcc:	ldrcc	fp, [pc, #-3336]	; 15ecc <__assert_fail@plt+0x46ac>
   16bd0:	movcc	r9, r7
   16bd4:	bcc	16bf8 <__assert_fail@plt+0x53d8>
   16bd8:	b	16d24 <__assert_fail@plt+0x5504>
   16bdc:	bl	1164c <strchr@plt>
   16be0:	mov	r9, sl
   16be4:	cmp	r0, #0
   16be8:	strbne	r6, [r7]
   16bec:	addne	r7, r7, #1
   16bf0:	cmp	r4, sl
   16bf4:	bls	16d24 <__assert_fail@plt+0x5504>
   16bf8:	mov	sl, r9
   16bfc:	mov	r0, fp
   16c00:	ldrb	r6, [sl], #1
   16c04:	mov	r8, r9
   16c08:	mov	r1, r6
   16c0c:	bl	1164c <strchr@plt>
   16c10:	mov	r1, r6
   16c14:	cmp	r0, #0
   16c18:	ldr	r0, [pc, #-3420]	; 15ec4 <__assert_fail@plt+0x46a4>
   16c1c:	bne	16bdc <__assert_fail@plt+0x53bc>
   16c20:	cmp	r4, r9
   16c24:	bls	16d24 <__assert_fail@plt+0x5504>
   16c28:	add	r1, r7, #4
   16c2c:	add	lr, r9, #4
   16c30:	mov	r0, r1
   16c34:	cmp	lr, r7
   16c38:	cmphi	r0, r9
   16c3c:	sub	ip, r4, sl
   16c40:	mov	r1, lr
   16c44:	add	ip, ip, #1
   16c48:	movls	r1, #1
   16c4c:	movhi	r1, #0
   16c50:	cmp	ip, #11
   16c54:	movls	r1, #0
   16c58:	andhi	r1, r1, #1
   16c5c:	cmp	r1, #0
   16c60:	mov	lr, sl
   16c64:	beq	18354 <__assert_fail@plt+0x6b34>
   16c68:	rsb	r1, r9, #0
   16c6c:	ands	r1, r1, #3
   16c70:	beq	18078 <__assert_fail@plt+0x6858>
   16c74:	cmp	r1, #1
   16c78:	strb	r6, [r7]
   16c7c:	add	r8, r7, #1
   16c80:	beq	16ca8 <__assert_fail@plt+0x5488>
   16c84:	ldrb	r0, [r9, #1]
   16c88:	cmp	r1, #3
   16c8c:	add	r8, r7, #2
   16c90:	strb	r0, [r7, #1]
   16c94:	add	lr, r9, #2
   16c98:	ldrbeq	r0, [r9, #2]
   16c9c:	addeq	r8, r7, #3
   16ca0:	addeq	lr, r9, #3
   16ca4:	strbeq	r0, [r7, #2]
   16ca8:	sub	ip, ip, r1
   16cac:	sub	r6, ip, #4
   16cb0:	add	r9, r9, r1
   16cb4:	lsr	r6, r6, #2
   16cb8:	add	r6, r6, #1
   16cbc:	add	r1, r7, r1
   16cc0:	lsl	r3, r6, #2
   16cc4:	mov	r0, #0
   16cc8:	add	r0, r0, #1
   16ccc:	ldr	r2, [r9], #4
   16cd0:	cmp	r6, r0
   16cd4:	str	r2, [r1], #4
   16cd8:	bhi	16cc8 <__assert_fail@plt+0x54a8>
   16cdc:	cmp	ip, r3
   16ce0:	add	r1, r8, r3
   16ce4:	add	r3, lr, r3
   16ce8:	beq	16d18 <__assert_fail@plt+0x54f8>
   16cec:	ldrb	r0, [lr, r6, lsl #2]
   16cf0:	add	ip, r3, #1
   16cf4:	cmp	r4, ip
   16cf8:	strb	r0, [r8, r6, lsl #2]
   16cfc:	bls	16d18 <__assert_fail@plt+0x54f8>
   16d00:	ldrb	r0, [r3, #1]
   16d04:	add	ip, r3, #2
   16d08:	cmp	r4, ip
   16d0c:	strb	r0, [r1, #1]
   16d10:	ldrbhi	r3, [r3, #2]
   16d14:	strbhi	r3, [r1, #2]
   16d18:	add	r4, r4, #1
   16d1c:	sub	r2, r4, sl
   16d20:	add	r7, r7, r2
   16d24:	ldr	r3, [pc, #-3684]	; 15ec8 <__assert_fail@plt+0x46a8>
   16d28:	ldr	r2, [sp, #8]
   16d2c:	mov	r1, r5
   16d30:	ldrh	r3, [r3]
   16d34:	mov	r0, #1
   16d38:	mov	r6, #0
   16d3c:	strh	r3, [r7]
   16d40:	bl	116b8 <__printf_chk@plt>
   16d44:	b	15a28 <__assert_fail@plt+0x4208>
   16d48:	ldr	fp, [r6, #32]
   16d4c:	ldr	r2, [r6, #36]	; 0x24
   16d50:	add	r7, r0, #1
   16d54:	lsr	r3, fp, #12
   16d58:	add	r4, r0, r1
   16d5c:	orr	r3, r3, r2, lsl #20
   16d60:	cmp	r7, r4
   16d64:	bic	r3, r3, #255	; 0xff
   16d68:	uxtb	fp, fp
   16d6c:	orr	r3, r3, fp
   16d70:	str	r3, [sp, #8]
   16d74:	ldrcc	sl, [pc, #-3760]	; 15ecc <__assert_fail@plt+0x46ac>
   16d78:	movcc	r9, r7
   16d7c:	bcc	16da0 <__assert_fail@plt+0x5580>
   16d80:	b	16530 <__assert_fail@plt+0x4d10>
   16d84:	bl	1164c <strchr@plt>
   16d88:	mov	r9, fp
   16d8c:	cmp	r0, #0
   16d90:	strbne	r6, [r7]
   16d94:	addne	r7, r7, #1
   16d98:	cmp	r4, fp
   16d9c:	bls	16530 <__assert_fail@plt+0x4d10>
   16da0:	mov	fp, r9
   16da4:	mov	r0, sl
   16da8:	ldrb	r6, [fp], #1
   16dac:	mov	r8, r9
   16db0:	mov	r1, r6
   16db4:	bl	1164c <strchr@plt>
   16db8:	mov	r1, r6
   16dbc:	cmp	r0, #0
   16dc0:	ldr	r0, [pc, #-3832]	; 15ed0 <__assert_fail@plt+0x46b0>
   16dc4:	bne	16d84 <__assert_fail@plt+0x5564>
   16dc8:	cmp	r4, r9
   16dcc:	bls	16530 <__assert_fail@plt+0x4d10>
   16dd0:	add	r1, r7, #4
   16dd4:	add	lr, r9, #4
   16dd8:	mov	r0, r1
   16ddc:	cmp	lr, r7
   16de0:	cmphi	r0, r9
   16de4:	sub	ip, r4, fp
   16de8:	mov	r1, lr
   16dec:	add	ip, ip, #1
   16df0:	movls	r1, #1
   16df4:	movhi	r1, #0
   16df8:	cmp	ip, #11
   16dfc:	movls	r1, #0
   16e00:	andhi	r1, r1, #1
   16e04:	cmp	r1, #0
   16e08:	mov	lr, fp
   16e0c:	beq	1823c <__assert_fail@plt+0x6a1c>
   16e10:	rsb	r1, r9, #0
   16e14:	ands	r1, r1, #3
   16e18:	beq	1806c <__assert_fail@plt+0x684c>
   16e1c:	cmp	r1, #1
   16e20:	strb	r6, [r7]
   16e24:	add	r8, r7, #1
   16e28:	beq	16e50 <__assert_fail@plt+0x5630>
   16e2c:	ldrb	r0, [r9, #1]
   16e30:	cmp	r1, #3
   16e34:	add	r8, r7, #2
   16e38:	strb	r0, [r7, #1]
   16e3c:	add	lr, r9, #2
   16e40:	ldrbeq	r0, [r9, #2]
   16e44:	addeq	r8, r7, #3
   16e48:	addeq	lr, r9, #3
   16e4c:	strbeq	r0, [r7, #2]
   16e50:	sub	ip, ip, r1
   16e54:	sub	r6, ip, #4
   16e58:	add	r9, r9, r1
   16e5c:	lsr	r6, r6, #2
   16e60:	add	r6, r6, #1
   16e64:	add	r1, r7, r1
   16e68:	lsl	r3, r6, #2
   16e6c:	mov	r0, #0
   16e70:	add	r0, r0, #1
   16e74:	ldr	r2, [r9], #4
   16e78:	cmp	r6, r0
   16e7c:	str	r2, [r1], #4
   16e80:	bhi	16e70 <__assert_fail@plt+0x5650>
   16e84:	b	164e8 <__assert_fail@plt+0x4cc8>
   16e88:	ldr	r3, [pc, #3956]	; 17e04 <__assert_fail@plt+0x65e4>
   16e8c:	ldrb	r3, [r3, #52]	; 0x34
   16e90:	cmp	r3, #0
   16e94:	bne	16ea8 <__assert_fail@plt+0x5688>
   16e98:	ldr	r3, [r6, #16]
   16e9c:	and	r3, r3, #61440	; 0xf000
   16ea0:	cmp	r3, #40960	; 0xa000
   16ea4:	beq	17a94 <__assert_fail@plt+0x6274>
   16ea8:	ldr	r0, [sp, #196]	; 0xc4
   16eac:	bl	11790 <canonicalize_file_name@plt>
   16eb0:	subs	r3, r0, #0
   16eb4:	str	r3, [sp, #8]
   16eb8:	beq	1815c <__assert_fail@plt+0x693c>
   16ebc:	bl	12298 <__assert_fail@plt+0xa78>
   16ec0:	mov	r7, r0
   16ec4:	str	r0, [sp, #20]
   16ec8:	ldr	r0, [sp, #8]
   16ecc:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   16ed0:	cmp	r7, #0
   16ed4:	movne	r6, #0
   16ed8:	strne	r6, [sp, #8]
   16edc:	beq	17a94 <__assert_fail@plt+0x6274>
   16ee0:	add	r8, r5, #1
   16ee4:	add	r4, r5, r4
   16ee8:	cmp	r8, r4
   16eec:	movcc	fp, r8
   16ef0:	bcc	16f14 <__assert_fail@plt+0x56f4>
   16ef4:	b	17048 <__assert_fail@plt+0x5828>
   16ef8:	bl	1164c <strchr@plt>
   16efc:	mov	fp, sl
   16f00:	cmp	r0, #0
   16f04:	strbne	r7, [r8]
   16f08:	addne	r8, r8, #1
   16f0c:	cmp	r4, sl
   16f10:	bls	17048 <__assert_fail@plt+0x5828>
   16f14:	mov	sl, fp
   16f18:	ldr	r0, [pc, #3856]	; 17e30 <__assert_fail@plt+0x6610>
   16f1c:	ldrb	r7, [sl], #1
   16f20:	mov	r9, fp
   16f24:	mov	r1, r7
   16f28:	bl	1164c <strchr@plt>
   16f2c:	mov	r1, r7
   16f30:	cmp	r0, #0
   16f34:	ldr	r0, [pc, #3788]	; 17e08 <__assert_fail@plt+0x65e8>
   16f38:	bne	16ef8 <__assert_fail@plt+0x56d8>
   16f3c:	cmp	r4, fp
   16f40:	bls	17048 <__assert_fail@plt+0x5828>
   16f44:	add	r1, r8, #4
   16f48:	add	ip, fp, #4
   16f4c:	mov	r0, r1
   16f50:	cmp	ip, r8
   16f54:	cmphi	r0, fp
   16f58:	sub	r3, r4, sl
   16f5c:	mov	r1, ip
   16f60:	add	r3, r3, #1
   16f64:	movls	r1, #1
   16f68:	movhi	r1, #0
   16f6c:	cmp	r3, #11
   16f70:	movls	r1, #0
   16f74:	andhi	r1, r1, #1
   16f78:	cmp	r1, #0
   16f7c:	mov	ip, sl
   16f80:	beq	181f4 <__assert_fail@plt+0x69d4>
   16f84:	rsb	r1, fp, #0
   16f88:	ands	r1, r1, #3
   16f8c:	beq	1803c <__assert_fail@plt+0x681c>
   16f90:	cmp	r1, #1
   16f94:	strb	r7, [r8]
   16f98:	add	r2, r8, #1
   16f9c:	beq	16fc4 <__assert_fail@plt+0x57a4>
   16fa0:	ldrb	r0, [fp, #1]
   16fa4:	cmp	r1, #3
   16fa8:	add	r2, r8, #2
   16fac:	strb	r0, [r8, #1]
   16fb0:	add	ip, fp, #2
   16fb4:	ldrbeq	r0, [fp, #2]
   16fb8:	addeq	r2, r8, #3
   16fbc:	addeq	ip, fp, #3
   16fc0:	strbeq	r0, [r8, #2]
   16fc4:	sub	r3, r3, r1
   16fc8:	sub	r0, r3, #4
   16fcc:	str	r3, [sp, #24]
   16fd0:	lsr	r0, r0, #2
   16fd4:	add	r0, r0, #1
   16fd8:	add	r3, fp, r1
   16fdc:	lsl	lr, r0, #2
   16fe0:	add	r1, r8, r1
   16fe4:	mov	r7, #0
   16fe8:	add	r7, r7, #1
   16fec:	ldr	r9, [r3], #4
   16ff0:	cmp	r0, r7
   16ff4:	str	r9, [r1], #4
   16ff8:	bhi	16fe8 <__assert_fail@plt+0x57c8>
   16ffc:	ldr	r3, [sp, #24]
   17000:	cmp	r3, lr
   17004:	add	r3, r2, lr
   17008:	add	lr, ip, lr
   1700c:	beq	1703c <__assert_fail@plt+0x581c>
   17010:	ldrb	r1, [ip, r0, lsl #2]
   17014:	add	ip, lr, #1
   17018:	cmp	r4, ip
   1701c:	strb	r1, [r2, r0, lsl #2]
   17020:	bls	1703c <__assert_fail@plt+0x581c>
   17024:	ldrb	r1, [lr, #1]
   17028:	add	r0, lr, #2
   1702c:	cmp	r4, r0
   17030:	strb	r1, [r3, #1]
   17034:	ldrbhi	r1, [lr, #2]
   17038:	strbhi	r1, [r3, #2]
   1703c:	add	r4, r4, #1
   17040:	sub	r2, r4, sl
   17044:	add	r8, r8, r2
   17048:	ldr	r3, [pc, #3516]	; 17e0c <__assert_fail@plt+0x65ec>
   1704c:	ldr	r2, [sp, #20]
   17050:	mov	r1, r5
   17054:	ldrh	r3, [r3]
   17058:	mov	r0, #1
   1705c:	strh	r3, [r8]
   17060:	bl	116b8 <__printf_chk@plt>
   17064:	ldr	r0, [sp, #8]
   17068:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1706c:	b	15a28 <__assert_fail@plt+0x4208>
   17070:	ldr	r0, [r6, #28]
   17074:	bl	11808 <getgrgid@plt>
   17078:	add	r7, r5, #1
   1707c:	add	r4, r5, r4
   17080:	cmp	r0, #0
   17084:	ldrne	r3, [r0]
   17088:	ldreq	r3, [pc, #3456]	; 17e10 <__assert_fail@plt+0x65f0>
   1708c:	cmp	r7, r4
   17090:	str	r3, [sp, #8]
   17094:	ldrcc	fp, [pc, #3476]	; 17e30 <__assert_fail@plt+0x6610>
   17098:	movcc	r9, r7
   1709c:	bcc	170c0 <__assert_fail@plt+0x58a0>
   170a0:	b	16d24 <__assert_fail@plt+0x5504>
   170a4:	bl	1164c <strchr@plt>
   170a8:	mov	r9, sl
   170ac:	cmp	r0, #0
   170b0:	strbne	r6, [r7]
   170b4:	addne	r7, r7, #1
   170b8:	cmp	r4, sl
   170bc:	bls	16d24 <__assert_fail@plt+0x5504>
   170c0:	mov	sl, r9
   170c4:	mov	r0, fp
   170c8:	ldrb	r6, [sl], #1
   170cc:	mov	r8, r9
   170d0:	mov	r1, r6
   170d4:	bl	1164c <strchr@plt>
   170d8:	mov	r1, r6
   170dc:	cmp	r0, #0
   170e0:	ldr	r0, [pc, #3360]	; 17e08 <__assert_fail@plt+0x65e8>
   170e4:	bne	170a4 <__assert_fail@plt+0x5884>
   170e8:	cmp	r4, r9
   170ec:	bls	16d24 <__assert_fail@plt+0x5504>
   170f0:	add	r1, r7, #4
   170f4:	add	lr, r9, #4
   170f8:	mov	r0, r1
   170fc:	cmp	lr, r7
   17100:	cmphi	r0, r9
   17104:	sub	ip, r4, sl
   17108:	mov	r1, lr
   1710c:	add	ip, ip, #1
   17110:	movls	r1, #1
   17114:	movhi	r1, #0
   17118:	cmp	ip, #11
   1711c:	movls	r1, #0
   17120:	andhi	r1, r1, #1
   17124:	cmp	r1, #0
   17128:	mov	lr, sl
   1712c:	beq	183e4 <__assert_fail@plt+0x6bc4>
   17130:	rsb	r1, r9, #0
   17134:	ands	r1, r1, #3
   17138:	beq	180b4 <__assert_fail@plt+0x6894>
   1713c:	cmp	r1, #1
   17140:	strb	r6, [r7]
   17144:	add	r8, r7, #1
   17148:	beq	17170 <__assert_fail@plt+0x5950>
   1714c:	ldrb	r0, [r9, #1]
   17150:	cmp	r1, #3
   17154:	add	r8, r7, #2
   17158:	strb	r0, [r7, #1]
   1715c:	add	lr, r9, #2
   17160:	ldrbeq	r0, [r9, #2]
   17164:	addeq	r8, r7, #3
   17168:	addeq	lr, r9, #3
   1716c:	strbeq	r0, [r7, #2]
   17170:	sub	ip, ip, r1
   17174:	sub	r6, ip, #4
   17178:	add	r9, r9, r1
   1717c:	lsr	r6, r6, #2
   17180:	add	r6, r6, #1
   17184:	add	r1, r7, r1
   17188:	lsl	r3, r6, #2
   1718c:	mov	r0, #0
   17190:	add	r0, r0, #1
   17194:	ldr	r2, [r9], #4
   17198:	cmp	r6, r0
   1719c:	str	r2, [r1], #4
   171a0:	bhi	17190 <__assert_fail@plt+0x5970>
   171a4:	b	16cdc <__assert_fail@plt+0x54bc>
   171a8:	cmp	r2, #72	; 0x48
   171ac:	beq	18408 <__assert_fail@plt+0x6be8>
   171b0:	cmp	r2, #76	; 0x4c
   171b4:	beq	17e44 <__assert_fail@plt+0x6624>
   171b8:	add	r8, r0, #1
   171bc:	ldrd	r2, [r6, #32]
   171c0:	add	r4, r0, r1
   171c4:	cmp	r8, r4
   171c8:	strd	r2, [sp, #8]
   171cc:	ldrcc	sl, [pc, #3168]	; 17e34 <__assert_fail@plt+0x6614>
   171d0:	movcc	r6, r8
   171d4:	bcc	171f8 <__assert_fail@plt+0x59d8>
   171d8:	b	1585c <__assert_fail@plt+0x403c>
   171dc:	bl	1164c <strchr@plt>
   171e0:	mov	r6, fp
   171e4:	cmp	r0, #0
   171e8:	strbne	r7, [r8]
   171ec:	addne	r8, r8, #1
   171f0:	cmp	r4, fp
   171f4:	bls	1585c <__assert_fail@plt+0x403c>
   171f8:	mov	fp, r6
   171fc:	ldr	r0, [pc, #3116]	; 17e30 <__assert_fail@plt+0x6610>
   17200:	ldrb	r7, [fp], #1
   17204:	mov	r9, r6
   17208:	mov	r1, r7
   1720c:	bl	1164c <strchr@plt>
   17210:	mov	r1, r7
   17214:	cmp	r0, #0
   17218:	mov	r0, sl
   1721c:	bne	171dc <__assert_fail@plt+0x59bc>
   17220:	cmp	r4, r6
   17224:	bls	1585c <__assert_fail@plt+0x403c>
   17228:	add	r2, r8, #4
   1722c:	add	ip, r6, #4
   17230:	mov	r0, r2
   17234:	cmp	ip, r8
   17238:	cmphi	r0, r6
   1723c:	sub	r1, r4, fp
   17240:	mov	r2, ip
   17244:	add	r1, r1, #1
   17248:	movls	r2, #1
   1724c:	movhi	r2, #0
   17250:	cmp	r1, #11
   17254:	movls	r2, #0
   17258:	andhi	r2, r2, #1
   1725c:	cmp	r2, #0
   17260:	mov	sl, fp
   17264:	beq	1873c <__assert_fail@plt+0x6f1c>
   17268:	rsb	r2, r6, #0
   1726c:	ands	r2, r2, #3
   17270:	beq	186ac <__assert_fail@plt+0x6e8c>
   17274:	cmp	r2, #1
   17278:	strb	r7, [r8]
   1727c:	add	r9, r8, #1
   17280:	beq	172a8 <__assert_fail@plt+0x5a88>
   17284:	ldrb	r0, [r6, #1]
   17288:	cmp	r2, #3
   1728c:	add	r9, r8, #2
   17290:	strb	r0, [r8, #1]
   17294:	add	sl, r6, #2
   17298:	ldrbeq	r0, [r6, #2]
   1729c:	addeq	r9, r8, #3
   172a0:	addeq	sl, r6, #3
   172a4:	strbeq	r0, [r8, #2]
   172a8:	sub	r1, r1, r2
   172ac:	sub	r0, r1, #4
   172b0:	add	r6, r6, r2
   172b4:	lsr	r0, r0, #2
   172b8:	add	r0, r0, #1
   172bc:	add	r2, r8, r2
   172c0:	lsl	lr, r0, #2
   172c4:	mov	ip, #0
   172c8:	add	ip, ip, #1
   172cc:	ldr	r3, [r6], #4
   172d0:	cmp	r0, ip
   172d4:	str	r3, [r2], #4
   172d8:	bhi	172c8 <__assert_fail@plt+0x5aa8>
   172dc:	cmp	r1, lr
   172e0:	add	r2, r9, lr
   172e4:	add	lr, sl, lr
   172e8:	beq	15850 <__assert_fail@plt+0x4030>
   172ec:	ldrb	r1, [sl, r0, lsl #2]
   172f0:	add	ip, lr, #1
   172f4:	cmp	r4, ip
   172f8:	strb	r1, [r9, r0, lsl #2]
   172fc:	bls	15850 <__assert_fail@plt+0x4030>
   17300:	ldrb	r1, [lr, #1]
   17304:	add	r0, lr, #2
   17308:	cmp	r4, r0
   1730c:	strb	r1, [r2, #1]
   17310:	ldrbhi	r1, [lr, #2]
   17314:	strbhi	r1, [r2, #2]
   17318:	b	15850 <__assert_fail@plt+0x4030>
   1731c:	add	r8, r0, #1
   17320:	add	r4, r0, r1
   17324:	cmp	r8, r4
   17328:	movcc	r6, r8
   1732c:	ldrcc	sl, [pc, #2816]	; 17e34 <__assert_fail@plt+0x6614>
   17330:	bcc	17354 <__assert_fail@plt+0x5b34>
   17334:	b	17480 <__assert_fail@plt+0x5c60>
   17338:	bl	1164c <strchr@plt>
   1733c:	mov	r6, fp
   17340:	cmp	r0, #0
   17344:	strbne	r7, [r8]
   17348:	addne	r8, r8, #1
   1734c:	cmp	r4, fp
   17350:	bls	17480 <__assert_fail@plt+0x5c60>
   17354:	mov	fp, r6
   17358:	ldr	r0, [pc, #2768]	; 17e30 <__assert_fail@plt+0x6610>
   1735c:	ldrb	r7, [fp], #1
   17360:	mov	r9, r6
   17364:	mov	r1, r7
   17368:	bl	1164c <strchr@plt>
   1736c:	mov	r1, r7
   17370:	cmp	r0, #0
   17374:	mov	r0, sl
   17378:	bne	17338 <__assert_fail@plt+0x5b18>
   1737c:	cmp	r4, r6
   17380:	bls	17480 <__assert_fail@plt+0x5c60>
   17384:	add	r2, r8, #4
   17388:	add	ip, r6, #4
   1738c:	mov	r1, r2
   17390:	cmp	ip, r8
   17394:	cmphi	r1, r6
   17398:	sub	r0, r4, fp
   1739c:	mov	r2, ip
   173a0:	add	r0, r0, #1
   173a4:	movls	r2, #1
   173a8:	movhi	r2, #0
   173ac:	cmp	r0, #11
   173b0:	movls	r2, #0
   173b4:	andhi	r2, r2, #1
   173b8:	cmp	r2, #0
   173bc:	mov	lr, fp
   173c0:	beq	1836c <__assert_fail@plt+0x6b4c>
   173c4:	rsb	r2, r6, #0
   173c8:	ands	r2, r2, #3
   173cc:	beq	18150 <__assert_fail@plt+0x6930>
   173d0:	cmp	r2, #1
   173d4:	strb	r7, [r8]
   173d8:	add	r9, r8, #1
   173dc:	beq	17404 <__assert_fail@plt+0x5be4>
   173e0:	ldrb	r1, [r6, #1]
   173e4:	cmp	r2, #3
   173e8:	add	r9, r8, #2
   173ec:	strb	r1, [r8, #1]
   173f0:	add	lr, r6, #2
   173f4:	ldrbeq	r1, [r6, #2]
   173f8:	addeq	r9, r8, #3
   173fc:	addeq	lr, r6, #3
   17400:	strbeq	r1, [r8, #2]
   17404:	sub	r0, r0, r2
   17408:	sub	r7, r0, #4
   1740c:	add	r6, r6, r2
   17410:	lsr	r7, r7, #2
   17414:	add	r7, r7, #1
   17418:	add	r2, r8, r2
   1741c:	lsl	r1, r7, #2
   17420:	mov	ip, #0
   17424:	add	ip, ip, #1
   17428:	ldr	r3, [r6], #4
   1742c:	cmp	r7, ip
   17430:	str	r3, [r2], #4
   17434:	bhi	17424 <__assert_fail@plt+0x5c04>
   17438:	cmp	r0, r1
   1743c:	add	r2, r9, r1
   17440:	add	r1, lr, r1
   17444:	beq	17474 <__assert_fail@plt+0x5c54>
   17448:	ldrb	r0, [lr, r7, lsl #2]
   1744c:	add	ip, r1, #1
   17450:	cmp	r4, ip
   17454:	strb	r0, [r9, r7, lsl #2]
   17458:	bls	17474 <__assert_fail@plt+0x5c54>
   1745c:	ldrb	r0, [r1, #1]
   17460:	add	ip, r1, #2
   17464:	cmp	r4, ip
   17468:	strb	r0, [r2, #1]
   1746c:	ldrbhi	r1, [r1, #2]
   17470:	strbhi	r1, [r2, #2]
   17474:	add	r4, r4, #1
   17478:	sub	r3, r4, fp
   1747c:	add	r8, r8, r3
   17480:	ldr	r0, [pc, #2444]	; 17e14 <__assert_fail@plt+0x65f4>
   17484:	mov	r1, r5
   17488:	mov	r2, #512	; 0x200
   1748c:	mov	r3, #0
   17490:	b	15868 <__assert_fail@plt+0x4048>
   17494:	ldr	r3, [pc, #2408]	; 17e04 <__assert_fail@plt+0x65e4>
   17498:	add	r1, sp, #108	; 0x6c
   1749c:	ldr	r0, [sp, #196]	; 0xc4
   174a0:	ldrb	r3, [r3, #52]	; 0x34
   174a4:	cmp	r3, #0
   174a8:	beq	17a88 <__assert_fail@plt+0x6268>
   174ac:	bl	210fc <__assert_fail@plt+0xf8dc>
   174b0:	lsr	r6, r0, #31
   174b4:	cmp	r6, #0
   174b8:	bne	17acc <__assert_fail@plt+0x62ac>
   174bc:	ldr	r3, [pc, #2376]	; 17e0c <__assert_fail@plt+0x65ec>
   174c0:	ldr	r2, [sp, #108]	; 0x6c
   174c4:	ldr	r1, [pc, #2412]	; 17e38 <__assert_fail@plt+0x6618>
   174c8:	ldrh	r3, [r3]
   174cc:	cmp	r2, #0
   174d0:	moveq	r2, r1
   174d4:	strh	r3, [r5, r4]
   174d8:	mov	r1, r5
   174dc:	mov	r0, #1
   174e0:	bl	116b8 <__printf_chk@plt>
   174e4:	ldr	r0, [sp, #108]	; 0x6c
   174e8:	cmp	r0, #0
   174ec:	beq	15a28 <__assert_fail@plt+0x4208>
   174f0:	bl	117a8 <freecon@plt>
   174f4:	b	15a28 <__assert_fail@plt+0x4208>
   174f8:	cmp	r2, #72	; 0x48
   174fc:	beq	18560 <__assert_fail@plt+0x6d40>
   17500:	cmp	r2, #76	; 0x4c
   17504:	beq	17c90 <__assert_fail@plt+0x6470>
   17508:	add	r8, r0, #1
   1750c:	ldrd	r2, [r6]
   17510:	add	r4, r0, r1
   17514:	cmp	r8, r4
   17518:	strd	r2, [sp, #8]
   1751c:	ldrcc	sl, [pc, #2320]	; 17e34 <__assert_fail@plt+0x6614>
   17520:	movcc	r6, r8
   17524:	bcc	17548 <__assert_fail@plt+0x5d28>
   17528:	b	1585c <__assert_fail@plt+0x403c>
   1752c:	bl	1164c <strchr@plt>
   17530:	mov	r6, fp
   17534:	cmp	r0, #0
   17538:	strbne	r7, [r8]
   1753c:	addne	r8, r8, #1
   17540:	cmp	r4, fp
   17544:	bls	1585c <__assert_fail@plt+0x403c>
   17548:	mov	fp, r6
   1754c:	ldr	r0, [pc, #2268]	; 17e30 <__assert_fail@plt+0x6610>
   17550:	ldrb	r7, [fp], #1
   17554:	mov	r9, r6
   17558:	mov	r1, r7
   1755c:	bl	1164c <strchr@plt>
   17560:	mov	r1, r7
   17564:	cmp	r0, #0
   17568:	mov	r0, sl
   1756c:	bne	1752c <__assert_fail@plt+0x5d0c>
   17570:	cmp	r4, r6
   17574:	bls	1585c <__assert_fail@plt+0x403c>
   17578:	add	r2, r8, #4
   1757c:	add	ip, r6, #4
   17580:	mov	r0, r2
   17584:	cmp	ip, r8
   17588:	cmphi	r0, r6
   1758c:	sub	r1, r4, fp
   17590:	mov	r2, ip
   17594:	add	r1, r1, #1
   17598:	movls	r2, #1
   1759c:	movhi	r2, #0
   175a0:	cmp	r1, #11
   175a4:	movls	r2, #0
   175a8:	andhi	r2, r2, #1
   175ac:	cmp	r2, #0
   175b0:	mov	sl, fp
   175b4:	beq	18724 <__assert_fail@plt+0x6f04>
   175b8:	rsb	r2, r6, #0
   175bc:	ands	r2, r2, #3
   175c0:	beq	186a0 <__assert_fail@plt+0x6e80>
   175c4:	cmp	r2, #1
   175c8:	strb	r7, [r8]
   175cc:	add	r9, r8, #1
   175d0:	beq	175f8 <__assert_fail@plt+0x5dd8>
   175d4:	ldrb	r0, [r6, #1]
   175d8:	cmp	r2, #3
   175dc:	add	r9, r8, #2
   175e0:	strb	r0, [r8, #1]
   175e4:	add	sl, r6, #2
   175e8:	ldrbeq	r0, [r6, #2]
   175ec:	addeq	r9, r8, #3
   175f0:	addeq	sl, r6, #3
   175f4:	strbeq	r0, [r8, #2]
   175f8:	sub	r1, r1, r2
   175fc:	sub	r0, r1, #4
   17600:	add	r6, r6, r2
   17604:	lsr	r0, r0, #2
   17608:	add	r0, r0, #1
   1760c:	add	r2, r8, r2
   17610:	lsl	lr, r0, #2
   17614:	mov	ip, #0
   17618:	add	ip, ip, #1
   1761c:	ldr	r3, [r6], #4
   17620:	cmp	r0, ip
   17624:	str	r3, [r2], #4
   17628:	bhi	17618 <__assert_fail@plt+0x5df8>
   1762c:	b	172dc <__assert_fail@plt+0x5abc>
   17630:	mov	r0, r6
   17634:	add	r4, r5, r1
   17638:	bl	1a42c <__assert_fail@plt+0x8c0c>
   1763c:	add	r7, r5, #1
   17640:	cmp	r7, r4
   17644:	movcc	r9, r7
   17648:	ldrcc	sl, [pc, #2016]	; 17e30 <__assert_fail@plt+0x6610>
   1764c:	str	r0, [sp, #8]
   17650:	bcc	17674 <__assert_fail@plt+0x5e54>
   17654:	b	16d24 <__assert_fail@plt+0x5504>
   17658:	bl	1164c <strchr@plt>
   1765c:	mov	r9, fp
   17660:	cmp	r0, #0
   17664:	strbne	r6, [r7]
   17668:	addne	r7, r7, #1
   1766c:	cmp	r4, fp
   17670:	bls	16d24 <__assert_fail@plt+0x5504>
   17674:	mov	fp, r9
   17678:	mov	r0, sl
   1767c:	ldrb	r6, [fp], #1
   17680:	mov	r8, r9
   17684:	mov	r1, r6
   17688:	bl	1164c <strchr@plt>
   1768c:	mov	r1, r6
   17690:	cmp	r0, #0
   17694:	ldr	r0, [pc, #1900]	; 17e08 <__assert_fail@plt+0x65e8>
   17698:	bne	17658 <__assert_fail@plt+0x5e38>
   1769c:	cmp	r4, r9
   176a0:	bls	16d24 <__assert_fail@plt+0x5504>
   176a4:	add	r1, r7, #4
   176a8:	add	lr, r9, #4
   176ac:	mov	r0, r1
   176b0:	cmp	lr, r7
   176b4:	cmphi	r0, r9
   176b8:	sub	ip, r4, fp
   176bc:	mov	r1, lr
   176c0:	add	ip, ip, #1
   176c4:	movls	r1, #1
   176c8:	movhi	r1, #0
   176cc:	cmp	ip, #11
   176d0:	movls	r1, #0
   176d4:	andhi	r1, r1, #1
   176d8:	cmp	r1, #0
   176dc:	mov	lr, fp
   176e0:	beq	182cc <__assert_fail@plt+0x6aac>
   176e4:	rsb	r1, r9, #0
   176e8:	ands	r1, r1, #3
   176ec:	beq	180fc <__assert_fail@plt+0x68dc>
   176f0:	cmp	r1, #1
   176f4:	strb	r6, [r7]
   176f8:	add	r8, r7, #1
   176fc:	beq	17724 <__assert_fail@plt+0x5f04>
   17700:	ldrb	r0, [r9, #1]
   17704:	cmp	r1, #3
   17708:	add	r8, r7, #2
   1770c:	strb	r0, [r7, #1]
   17710:	add	lr, r9, #2
   17714:	ldrbeq	r0, [r9, #2]
   17718:	addeq	r8, r7, #3
   1771c:	addeq	lr, r9, #3
   17720:	strbeq	r0, [r7, #2]
   17724:	sub	ip, ip, r1
   17728:	sub	r6, ip, #4
   1772c:	add	r9, r9, r1
   17730:	lsr	r6, r6, #2
   17734:	add	r6, r6, #1
   17738:	add	r1, r7, r1
   1773c:	lsl	r3, r6, #2
   17740:	mov	r0, #0
   17744:	add	r0, r0, #1
   17748:	ldr	r2, [r9], #4
   1774c:	cmp	r6, r0
   17750:	str	r2, [r1], #4
   17754:	bhi	17744 <__assert_fail@plt+0x5f24>
   17758:	cmp	ip, r3
   1775c:	add	r1, r8, r3
   17760:	add	r3, lr, r3
   17764:	beq	17794 <__assert_fail@plt+0x5f74>
   17768:	ldrb	r0, [lr, r6, lsl #2]
   1776c:	add	ip, r3, #1
   17770:	cmp	r4, ip
   17774:	strb	r0, [r8, r6, lsl #2]
   17778:	bls	17794 <__assert_fail@plt+0x5f74>
   1777c:	ldrb	r0, [r3, #1]
   17780:	add	ip, r3, #2
   17784:	cmp	r4, ip
   17788:	strb	r0, [r1, #1]
   1778c:	ldrbhi	r3, [r3, #2]
   17790:	strbhi	r3, [r1, #2]
   17794:	add	r4, r4, #1
   17798:	sub	r2, r4, fp
   1779c:	add	r7, r7, r2
   177a0:	b	16d24 <__assert_fail@plt+0x5504>
   177a4:	add	r8, r0, #1
   177a8:	ldrd	r2, [r6, #96]	; 0x60
   177ac:	add	r4, r0, r1
   177b0:	cmp	r8, r4
   177b4:	strd	r2, [sp, #8]
   177b8:	ldrcc	sl, [pc, #1652]	; 17e34 <__assert_fail@plt+0x6614>
   177bc:	movcc	r6, r8
   177c0:	bcc	177e4 <__assert_fail@plt+0x5fc4>
   177c4:	b	1585c <__assert_fail@plt+0x403c>
   177c8:	bl	1164c <strchr@plt>
   177cc:	mov	r6, fp
   177d0:	cmp	r0, #0
   177d4:	strbne	r7, [r8]
   177d8:	addne	r8, r8, #1
   177dc:	cmp	r4, fp
   177e0:	bls	1585c <__assert_fail@plt+0x403c>
   177e4:	mov	fp, r6
   177e8:	ldr	r0, [pc, #1600]	; 17e30 <__assert_fail@plt+0x6610>
   177ec:	ldrb	r7, [fp], #1
   177f0:	mov	r9, r6
   177f4:	mov	r1, r7
   177f8:	bl	1164c <strchr@plt>
   177fc:	mov	r1, r7
   17800:	cmp	r0, #0
   17804:	mov	r0, sl
   17808:	bne	177c8 <__assert_fail@plt+0x5fa8>
   1780c:	cmp	r4, r6
   17810:	bls	1585c <__assert_fail@plt+0x403c>
   17814:	add	r2, r8, #4
   17818:	add	ip, r6, #4
   1781c:	mov	r0, r2
   17820:	cmp	ip, r8
   17824:	cmphi	r0, r6
   17828:	sub	r1, r4, fp
   1782c:	mov	r2, ip
   17830:	add	r1, r1, #1
   17834:	movls	r2, #1
   17838:	movhi	r2, #0
   1783c:	cmp	r1, #11
   17840:	movls	r2, #0
   17844:	andhi	r2, r2, #1
   17848:	cmp	r2, #0
   1784c:	mov	sl, fp
   17850:	beq	182e4 <__assert_fail@plt+0x6ac4>
   17854:	rsb	r2, r6, #0
   17858:	ands	r2, r2, #3
   1785c:	beq	18114 <__assert_fail@plt+0x68f4>
   17860:	cmp	r2, #1
   17864:	strb	r7, [r8]
   17868:	add	r9, r8, #1
   1786c:	beq	17894 <__assert_fail@plt+0x6074>
   17870:	ldrb	r0, [r6, #1]
   17874:	cmp	r2, #3
   17878:	add	r9, r8, #2
   1787c:	strb	r0, [r8, #1]
   17880:	add	sl, r6, #2
   17884:	ldrbeq	r0, [r6, #2]
   17888:	addeq	r9, r8, #3
   1788c:	addeq	sl, r6, #3
   17890:	strbeq	r0, [r8, #2]
   17894:	sub	r1, r1, r2
   17898:	sub	r0, r1, #4
   1789c:	add	r6, r6, r2
   178a0:	lsr	r0, r0, #2
   178a4:	add	r0, r0, #1
   178a8:	add	r2, r8, r2
   178ac:	lsl	ip, r0, #2
   178b0:	mov	lr, #0
   178b4:	add	lr, lr, #1
   178b8:	ldr	r3, [r6], #4
   178bc:	cmp	r0, lr
   178c0:	str	r3, [r2], #4
   178c4:	bhi	178b4 <__assert_fail@plt+0x6094>
   178c8:	b	15814 <__assert_fail@plt+0x3ff4>
   178cc:	ldr	r7, [pc, #1328]	; 17e04 <__assert_fail@plt+0x65e4>
   178d0:	mov	r0, r6
   178d4:	add	r4, r5, r1
   178d8:	add	r8, r5, #1
   178dc:	add	r1, r7, #40	; 0x28
   178e0:	bl	1a658 <__assert_fail@plt+0x8e38>
   178e4:	cmp	r8, r4
   178e8:	mov	r3, #0
   178ec:	strb	r3, [r7, #50]	; 0x32
   178f0:	ldrcc	sl, [pc, #1296]	; 17e08 <__assert_fail@plt+0x65e8>
   178f4:	movcc	r6, r8
   178f8:	bcc	1791c <__assert_fail@plt+0x60fc>
   178fc:	b	17a48 <__assert_fail@plt+0x6228>
   17900:	bl	1164c <strchr@plt>
   17904:	mov	r6, fp
   17908:	cmp	r0, #0
   1790c:	strbne	r7, [r8]
   17910:	addne	r8, r8, #1
   17914:	cmp	r4, fp
   17918:	bls	17a48 <__assert_fail@plt+0x6228>
   1791c:	mov	fp, r6
   17920:	ldr	r0, [pc, #1288]	; 17e30 <__assert_fail@plt+0x6610>
   17924:	ldrb	r7, [fp], #1
   17928:	mov	r9, r6
   1792c:	mov	r1, r7
   17930:	bl	1164c <strchr@plt>
   17934:	mov	r1, r7
   17938:	cmp	r0, #0
   1793c:	mov	r0, sl
   17940:	bne	17900 <__assert_fail@plt+0x60e0>
   17944:	cmp	r4, r6
   17948:	bls	17a48 <__assert_fail@plt+0x6228>
   1794c:	add	r2, r8, #4
   17950:	add	ip, r6, #4
   17954:	mov	r1, r2
   17958:	cmp	ip, r8
   1795c:	cmphi	r1, r6
   17960:	sub	r0, r4, fp
   17964:	mov	r2, ip
   17968:	add	r0, r0, #1
   1796c:	movls	r2, #1
   17970:	movhi	r2, #0
   17974:	cmp	r0, #11
   17978:	movls	r2, #0
   1797c:	andhi	r2, r2, #1
   17980:	cmp	r2, #0
   17984:	mov	lr, fp
   17988:	beq	181c4 <__assert_fail@plt+0x69a4>
   1798c:	rsb	r2, r6, #0
   17990:	ands	r2, r2, #3
   17994:	beq	18108 <__assert_fail@plt+0x68e8>
   17998:	cmp	r2, #1
   1799c:	strb	r7, [r8]
   179a0:	add	r9, r8, #1
   179a4:	beq	179cc <__assert_fail@plt+0x61ac>
   179a8:	ldrb	r1, [r6, #1]
   179ac:	cmp	r2, #3
   179b0:	add	r9, r8, #2
   179b4:	strb	r1, [r8, #1]
   179b8:	add	lr, r6, #2
   179bc:	ldrbeq	r1, [r6, #2]
   179c0:	addeq	r9, r8, #3
   179c4:	addeq	lr, r6, #3
   179c8:	strbeq	r1, [r8, #2]
   179cc:	sub	r0, r0, r2
   179d0:	sub	r7, r0, #4
   179d4:	add	r6, r6, r2
   179d8:	lsr	r7, r7, #2
   179dc:	add	r7, r7, #1
   179e0:	add	r2, r8, r2
   179e4:	lsl	r1, r7, #2
   179e8:	mov	ip, #0
   179ec:	add	ip, ip, #1
   179f0:	ldr	r3, [r6], #4
   179f4:	cmp	r7, ip
   179f8:	str	r3, [r2], #4
   179fc:	bhi	179ec <__assert_fail@plt+0x61cc>
   17a00:	cmp	r0, r1
   17a04:	add	r2, r9, r1
   17a08:	add	r1, lr, r1
   17a0c:	beq	17a3c <__assert_fail@plt+0x621c>
   17a10:	ldrb	r0, [lr, r7, lsl #2]
   17a14:	add	ip, r1, #1
   17a18:	cmp	r4, ip
   17a1c:	strb	r0, [r9, r7, lsl #2]
   17a20:	bls	17a3c <__assert_fail@plt+0x621c>
   17a24:	ldrb	r0, [r1, #1]
   17a28:	add	ip, r1, #2
   17a2c:	cmp	r4, ip
   17a30:	strb	r0, [r2, #1]
   17a34:	ldrbhi	r1, [r1, #2]
   17a38:	strbhi	r1, [r2, #2]
   17a3c:	add	r4, r4, #1
   17a40:	sub	r3, r4, fp
   17a44:	add	r8, r8, r3
   17a48:	ldr	r3, [pc, #956]	; 17e0c <__assert_fail@plt+0x65ec>
   17a4c:	mov	r1, r5
   17a50:	ldr	r2, [pc, #960]	; 17e18 <__assert_fail@plt+0x65f8>
   17a54:	b	15244 <__assert_fail@plt+0x3a24>
   17a58:	ldr	r3, [pc, #956]	; 17e1c <__assert_fail@plt+0x65fc>
   17a5c:	ldr	r0, [r3]
   17a60:	ldr	r3, [r0, #20]
   17a64:	ldr	r2, [r0, #24]
   17a68:	cmp	r3, r2
   17a6c:	bcs	18344 <__assert_fail@plt+0x6b24>
   17a70:	add	r1, r3, #1
   17a74:	mov	r2, #63	; 0x3f
   17a78:	str	r1, [r0, #20]
   17a7c:	mov	r6, #0
   17a80:	strb	r2, [r3]
   17a84:	b	15a28 <__assert_fail@plt+0x4208>
   17a88:	bl	21170 <__assert_fail@plt+0xf950>
   17a8c:	lsr	r6, r0, #31
   17a90:	b	174b4 <__assert_fail@plt+0x5c94>
   17a94:	mov	r1, r6
   17a98:	ldr	r0, [sp, #196]	; 0xc4
   17a9c:	bl	197ec <__assert_fail@plt+0x7fcc>
   17aa0:	subs	r3, r0, #0
   17aa4:	str	r3, [sp, #8]
   17aa8:	beq	18690 <__assert_fail@plt+0x6e70>
   17aac:	bl	12298 <__assert_fail@plt+0xa78>
   17ab0:	ldr	r2, [sp, #8]
   17ab4:	subs	r3, r0, #0
   17ab8:	moveq	r3, r2
   17abc:	str	r3, [sp, #20]
   17ac0:	moveq	r6, r0
   17ac4:	movne	r6, #0
   17ac8:	b	16ee0 <__assert_fail@plt+0x56c0>
   17acc:	bl	1167c <__errno_location@plt>
   17ad0:	mov	r2, #5
   17ad4:	ldr	r1, [pc, #836]	; 17e20 <__assert_fail@plt+0x6600>
   17ad8:	ldr	r7, [r0]
   17adc:	mov	r0, #0
   17ae0:	bl	114c0 <dcgettext@plt>
   17ae4:	ldr	r1, [sp, #196]	; 0xc4
   17ae8:	mov	r8, r0
   17aec:	mov	r0, #4
   17af0:	bl	1f578 <__assert_fail@plt+0xdd58>
   17af4:	mov	r2, r8
   17af8:	mov	r1, r7
   17afc:	mov	r3, r0
   17b00:	mov	r0, #0
   17b04:	bl	11574 <error@plt>
   17b08:	ldr	r3, [pc, #764]	; 17e0c <__assert_fail@plt+0x65ec>
   17b0c:	mov	r1, #0
   17b10:	str	r1, [sp, #108]	; 0x6c
   17b14:	ldrh	r3, [r3]
   17b18:	ldr	r2, [pc, #792]	; 17e38 <__assert_fail@plt+0x6618>
   17b1c:	strh	r3, [r5, r4]
   17b20:	b	174d8 <__assert_fail@plt+0x5cb8>
   17b24:	add	r8, r0, #1
   17b28:	add	r4, r0, r1
   17b2c:	cmp	r8, r4
   17b30:	movcc	r6, r8
   17b34:	ldrcc	sl, [pc, #716]	; 17e08 <__assert_fail@plt+0x65e8>
   17b38:	bcc	17b5c <__assert_fail@plt+0x633c>
   17b3c:	b	17c80 <__assert_fail@plt+0x6460>
   17b40:	bl	1164c <strchr@plt>
   17b44:	mov	r6, fp
   17b48:	cmp	r0, #0
   17b4c:	strbne	r7, [r8]
   17b50:	addne	r8, r8, #1
   17b54:	cmp	r4, fp
   17b58:	bls	17c80 <__assert_fail@plt+0x6460>
   17b5c:	mov	fp, r6
   17b60:	ldr	r0, [pc, #712]	; 17e30 <__assert_fail@plt+0x6610>
   17b64:	ldrb	r7, [fp], #1
   17b68:	mov	r9, r6
   17b6c:	mov	r1, r7
   17b70:	bl	1164c <strchr@plt>
   17b74:	mov	r1, r7
   17b78:	cmp	r0, #0
   17b7c:	mov	r0, sl
   17b80:	bne	17b40 <__assert_fail@plt+0x6320>
   17b84:	cmp	r4, r6
   17b88:	bls	17c80 <__assert_fail@plt+0x6460>
   17b8c:	add	r2, r8, #4
   17b90:	add	r0, r6, #4
   17b94:	cmp	r0, r8
   17b98:	cmphi	r2, r6
   17b9c:	sub	r1, r4, fp
   17ba0:	movls	r2, #1
   17ba4:	movhi	r2, #0
   17ba8:	add	r1, r1, #1
   17bac:	cmp	r1, #11
   17bb0:	movls	r2, #0
   17bb4:	andhi	r2, r2, #1
   17bb8:	cmp	r2, #0
   17bbc:	mov	lr, fp
   17bc0:	beq	187d8 <__assert_fail@plt+0x6fb8>
   17bc4:	rsb	r2, r6, #0
   17bc8:	ands	r2, r2, #3
   17bcc:	beq	1876c <__assert_fail@plt+0x6f4c>
   17bd0:	cmp	r2, #1
   17bd4:	strb	r7, [r8]
   17bd8:	add	r9, r8, #1
   17bdc:	beq	17c04 <__assert_fail@plt+0x63e4>
   17be0:	ldrb	r0, [r6, #1]
   17be4:	cmp	r2, #3
   17be8:	add	r9, r8, #2
   17bec:	strb	r0, [r8, #1]
   17bf0:	add	lr, r6, #2
   17bf4:	ldrbeq	r0, [r6, #2]
   17bf8:	addeq	r9, r8, #3
   17bfc:	addeq	lr, r6, #3
   17c00:	strbeq	r0, [r8, #2]
   17c04:	sub	r1, r1, r2
   17c08:	sub	sl, r1, #4
   17c0c:	add	r6, r6, r2
   17c10:	lsr	sl, sl, #2
   17c14:	add	sl, sl, #1
   17c18:	add	r2, r8, r2
   17c1c:	lsl	ip, sl, #2
   17c20:	mov	r0, #0
   17c24:	add	r0, r0, #1
   17c28:	ldr	r3, [r6], #4
   17c2c:	cmp	sl, r0
   17c30:	str	r3, [r2], #4
   17c34:	bhi	17c24 <__assert_fail@plt+0x6404>
   17c38:	cmp	r1, ip
   17c3c:	add	r2, r9, ip
   17c40:	add	ip, lr, ip
   17c44:	beq	17c74 <__assert_fail@plt+0x6454>
   17c48:	ldrb	r1, [lr, sl, lsl #2]
   17c4c:	add	r0, ip, #1
   17c50:	cmp	r4, r0
   17c54:	strb	r1, [r9, sl, lsl #2]
   17c58:	bls	17c74 <__assert_fail@plt+0x6454>
   17c5c:	ldrb	r1, [ip, #1]
   17c60:	add	r0, ip, #2
   17c64:	cmp	r4, r0
   17c68:	strb	r1, [r2, #1]
   17c6c:	ldrbhi	r1, [ip, #2]
   17c70:	strbhi	r1, [r2, #2]
   17c74:	add	r4, r4, #1
   17c78:	sub	r3, r4, fp
   17c7c:	add	r8, r8, r3
   17c80:	ldr	r3, [pc, #388]	; 17e0c <__assert_fail@plt+0x65ec>
   17c84:	mov	r1, r5
   17c88:	ldr	r2, [pc, #376]	; 17e08 <__assert_fail@plt+0x65e8>
   17c8c:	b	15244 <__assert_fail@plt+0x3a24>
   17c90:	ldr	r2, [r6]
   17c94:	ldr	r1, [r6, #4]
   17c98:	add	r7, r0, #1
   17c9c:	lsr	r3, r2, #12
   17ca0:	add	r4, r0, r4
   17ca4:	orr	r3, r3, r1, lsl #20
   17ca8:	cmp	r7, r4
   17cac:	bic	r3, r3, #255	; 0xff
   17cb0:	uxtb	r2, r2
   17cb4:	orr	r3, r3, r2
   17cb8:	str	r3, [sp, #8]
   17cbc:	ldrcc	r9, [pc, #368]	; 17e34 <__assert_fail@plt+0x6614>
   17cc0:	movcc	sl, r7
   17cc4:	bcc	17ce8 <__assert_fail@plt+0x64c8>
   17cc8:	b	163a8 <__assert_fail@plt+0x4b88>
   17ccc:	bl	1164c <strchr@plt>
   17cd0:	mov	sl, fp
   17cd4:	cmp	r0, #0
   17cd8:	strbne	r6, [r7]
   17cdc:	addne	r7, r7, #1
   17ce0:	cmp	r4, fp
   17ce4:	bls	163a8 <__assert_fail@plt+0x4b88>
   17ce8:	mov	fp, sl
   17cec:	ldr	r0, [pc, #316]	; 17e30 <__assert_fail@plt+0x6610>
   17cf0:	ldrb	r6, [fp], #1
   17cf4:	mov	r8, sl
   17cf8:	mov	r1, r6
   17cfc:	bl	1164c <strchr@plt>
   17d00:	mov	r1, r6
   17d04:	cmp	r0, #0
   17d08:	mov	r0, r9
   17d0c:	bne	17ccc <__assert_fail@plt+0x64ac>
   17d10:	cmp	r4, sl
   17d14:	bls	163a8 <__assert_fail@plt+0x4b88>
   17d18:	add	r1, r7, #4
   17d1c:	add	ip, sl, #4
   17d20:	cmp	ip, r7
   17d24:	cmphi	r1, sl
   17d28:	sub	r0, r4, fp
   17d2c:	movls	r1, #1
   17d30:	movhi	r1, #0
   17d34:	add	r0, r0, #1
   17d38:	cmp	r0, #11
   17d3c:	movls	r1, #0
   17d40:	andhi	r1, r1, #1
   17d44:	cmp	r1, #0
   17d48:	mov	r9, fp
   17d4c:	beq	187f0 <__assert_fail@plt+0x6fd0>
   17d50:	rsb	r1, sl, #0
   17d54:	ands	r1, r1, #3
   17d58:	beq	18778 <__assert_fail@plt+0x6f58>
   17d5c:	cmp	r1, #1
   17d60:	strb	r6, [r7]
   17d64:	add	r8, r7, #1
   17d68:	beq	17d90 <__assert_fail@plt+0x6570>
   17d6c:	ldrb	ip, [sl, #1]
   17d70:	cmp	r1, #3
   17d74:	add	r8, r7, #2
   17d78:	strb	ip, [r7, #1]
   17d7c:	add	r9, sl, #2
   17d80:	ldrbeq	ip, [sl, #2]
   17d84:	addeq	r8, r7, #3
   17d88:	addeq	r9, sl, #3
   17d8c:	strbeq	ip, [r7, #2]
   17d90:	sub	r0, r0, r1
   17d94:	sub	ip, r0, #4
   17d98:	add	r3, sl, r1
   17d9c:	lsr	ip, ip, #2
   17da0:	add	ip, ip, #1
   17da4:	add	r1, r7, r1
   17da8:	lsl	r6, ip, #2
   17dac:	mov	lr, #0
   17db0:	add	lr, lr, #1
   17db4:	ldr	r2, [r3], #4
   17db8:	cmp	ip, lr
   17dbc:	str	r2, [r1], #4
   17dc0:	bhi	17db0 <__assert_fail@plt+0x6590>
   17dc4:	cmp	r0, r6
   17dc8:	add	r3, r8, r6
   17dcc:	add	r6, r9, r6
   17dd0:	beq	1639c <__assert_fail@plt+0x4b7c>
   17dd4:	ldrb	r1, [r9, ip, lsl #2]
   17dd8:	add	r0, r6, #1
   17ddc:	cmp	r4, r0
   17de0:	strb	r1, [r8, ip, lsl #2]
   17de4:	bls	1639c <__assert_fail@plt+0x4b7c>
   17de8:	ldrb	r1, [r6, #1]
   17dec:	add	r0, r6, #2
   17df0:	cmp	r4, r0
   17df4:	strb	r1, [r3, #1]
   17df8:	ldrbhi	r1, [r6, #2]
   17dfc:	strbhi	r1, [r3, #2]
   17e00:	b	1639c <__assert_fail@plt+0x4b7c>
   17e04:	strdeq	r7, [r3], -r0
   17e08:	andeq	r4, r2, ip, lsl #28
   17e0c:	andeq	r4, r2, r0, lsl #29
   17e10:	andeq	r4, r2, r0, lsr lr
   17e14:	andeq	r4, r2, ip, lsl lr
   17e18:	andeq	r7, r3, r8, lsl r2
   17e1c:	andeq	r7, r3, r4, ror #3
   17e20:	andeq	r4, r2, r8, lsr #29
   17e24:	andeq	r4, r2, r0, lsr #29
   17e28:	andeq	r7, r3, ip, lsr #4
   17e2c:	andeq	r4, r2, r8, ror #28
   17e30:	andeq	r4, r2, ip, lsr #12
   17e34:	andeq	r4, r2, r8, lsl lr
   17e38:	andeq	r4, r2, r8, lsr lr
   17e3c:	andeq	r4, r2, r4, lsl #29
   17e40:	andeq	r4, r2, ip, lsr lr
   17e44:	ldr	r2, [r6, #32]
   17e48:	ldr	r1, [r6, #36]	; 0x24
   17e4c:	add	r7, r0, #1
   17e50:	lsr	r3, r2, #12
   17e54:	add	r4, r0, r4
   17e58:	orr	r3, r3, r1, lsl #20
   17e5c:	cmp	r7, r4
   17e60:	bic	r3, r3, #255	; 0xff
   17e64:	uxtb	r2, r2
   17e68:	orr	r3, r3, r2
   17e6c:	str	r3, [sp, #8]
   17e70:	ldrcc	r9, [pc, #-68]	; 17e34 <__assert_fail@plt+0x6614>
   17e74:	movcc	sl, r7
   17e78:	bcc	17e9c <__assert_fail@plt+0x667c>
   17e7c:	b	163a8 <__assert_fail@plt+0x4b88>
   17e80:	bl	1164c <strchr@plt>
   17e84:	mov	sl, fp
   17e88:	cmp	r0, #0
   17e8c:	strbne	r6, [r7]
   17e90:	addne	r7, r7, #1
   17e94:	cmp	r4, fp
   17e98:	bls	163a8 <__assert_fail@plt+0x4b88>
   17e9c:	mov	fp, sl
   17ea0:	ldr	r0, [pc, #-120]	; 17e30 <__assert_fail@plt+0x6610>
   17ea4:	ldrb	r6, [fp], #1
   17ea8:	mov	r8, sl
   17eac:	mov	r1, r6
   17eb0:	bl	1164c <strchr@plt>
   17eb4:	mov	r1, r6
   17eb8:	cmp	r0, #0
   17ebc:	mov	r0, r9
   17ec0:	bne	17e80 <__assert_fail@plt+0x6660>
   17ec4:	cmp	r4, sl
   17ec8:	bls	163a8 <__assert_fail@plt+0x4b88>
   17ecc:	add	r1, r7, #4
   17ed0:	add	ip, sl, #4
   17ed4:	cmp	ip, r7
   17ed8:	cmphi	r1, sl
   17edc:	sub	r0, r4, fp
   17ee0:	movls	r1, #1
   17ee4:	movhi	r1, #0
   17ee8:	add	r0, r0, #1
   17eec:	cmp	r0, #11
   17ef0:	movls	r1, #0
   17ef4:	andhi	r1, r1, #1
   17ef8:	cmp	r1, #0
   17efc:	mov	r9, fp
   17f00:	beq	18808 <__assert_fail@plt+0x6fe8>
   17f04:	rsb	r1, sl, #0
   17f08:	ands	r1, r1, #3
   17f0c:	beq	18784 <__assert_fail@plt+0x6f64>
   17f10:	cmp	r1, #1
   17f14:	strb	r6, [r7]
   17f18:	add	r8, r7, #1
   17f1c:	beq	17f44 <__assert_fail@plt+0x6724>
   17f20:	ldrb	ip, [sl, #1]
   17f24:	cmp	r1, #3
   17f28:	add	r8, r7, #2
   17f2c:	strb	ip, [r7, #1]
   17f30:	add	r9, sl, #2
   17f34:	ldrbeq	ip, [sl, #2]
   17f38:	addeq	r8, r7, #3
   17f3c:	addeq	r9, sl, #3
   17f40:	strbeq	ip, [r7, #2]
   17f44:	sub	r0, r0, r1
   17f48:	sub	ip, r0, #4
   17f4c:	add	r3, sl, r1
   17f50:	lsr	ip, ip, #2
   17f54:	add	ip, ip, #1
   17f58:	add	r1, r7, r1
   17f5c:	lsl	r6, ip, #2
   17f60:	mov	lr, #0
   17f64:	add	lr, lr, #1
   17f68:	ldr	r2, [r3], #4
   17f6c:	cmp	ip, lr
   17f70:	str	r2, [r1], #4
   17f74:	bhi	17f64 <__assert_fail@plt+0x6744>
   17f78:	b	17dc4 <__assert_fail@plt+0x65a4>
   17f7c:	ldr	r0, [sp, #60]	; 0x3c
   17f80:	add	r2, sp, #84	; 0x54
   17f84:	asr	r1, r0, #31
   17f88:	bl	1a7fc <__assert_fail@plt+0x8fdc>
   17f8c:	str	r7, [sp, #4]
   17f90:	ldr	r3, [pc, #-372]	; 17e24 <__assert_fail@plt+0x6604>
   17f94:	mov	r2, #61	; 0x3d
   17f98:	mov	r1, #1
   17f9c:	str	r0, [sp]
   17fa0:	ldr	r0, [pc, #-384]	; 17e28 <__assert_fail@plt+0x6608>
   17fa4:	bl	11688 <__sprintf_chk@plt>
   17fa8:	b	15424 <__assert_fail@plt+0x3c04>
   17fac:	ldr	r0, [sp, #68]	; 0x44
   17fb0:	add	r2, sp, #84	; 0x54
   17fb4:	asr	r1, r0, #31
   17fb8:	bl	1a7fc <__assert_fail@plt+0x8fdc>
   17fbc:	str	r7, [sp, #4]
   17fc0:	ldr	r3, [pc, #-420]	; 17e24 <__assert_fail@plt+0x6604>
   17fc4:	mov	r2, #61	; 0x3d
   17fc8:	mov	r1, #1
   17fcc:	str	r0, [sp]
   17fd0:	ldr	r0, [pc, #-432]	; 17e28 <__assert_fail@plt+0x6608>
   17fd4:	bl	11688 <__sprintf_chk@plt>
   17fd8:	b	152b4 <__assert_fail@plt+0x3a94>
   17fdc:	ldr	r0, [sp, #76]	; 0x4c
   17fe0:	add	r2, sp, #84	; 0x54
   17fe4:	asr	r1, r0, #31
   17fe8:	bl	1a7fc <__assert_fail@plt+0x8fdc>
   17fec:	str	r7, [sp, #4]
   17ff0:	ldr	r3, [pc, #-468]	; 17e24 <__assert_fail@plt+0x6604>
   17ff4:	mov	r2, #61	; 0x3d
   17ff8:	mov	r1, #1
   17ffc:	str	r0, [sp]
   18000:	ldr	r0, [pc, #-480]	; 17e28 <__assert_fail@plt+0x6608>
   18004:	bl	11688 <__sprintf_chk@plt>
   18008:	b	150d4 <__assert_fail@plt+0x38b4>
   1800c:	ldr	r0, [sp, #52]	; 0x34
   18010:	add	r2, sp, #84	; 0x54
   18014:	asr	r1, r0, #31
   18018:	bl	1a7fc <__assert_fail@plt+0x8fdc>
   1801c:	str	r7, [sp, #4]
   18020:	ldr	r3, [pc, #-516]	; 17e24 <__assert_fail@plt+0x6604>
   18024:	mov	r2, #61	; 0x3d
   18028:	mov	r1, #1
   1802c:	str	r0, [sp]
   18030:	ldr	r0, [pc, #-528]	; 17e28 <__assert_fail@plt+0x6608>
   18034:	bl	11688 <__sprintf_chk@plt>
   18038:	b	15594 <__assert_fail@plt+0x3d74>
   1803c:	mov	ip, fp
   18040:	mov	r2, r8
   18044:	b	16fc4 <__assert_fail@plt+0x57a4>
   18048:	mov	lr, r9
   1804c:	mov	r8, r7
   18050:	b	15980 <__assert_fail@plt+0x4160>
   18054:	mov	lr, r9
   18058:	mov	r8, r7
   1805c:	b	16684 <__assert_fail@plt+0x4e64>
   18060:	mov	lr, r6
   18064:	mov	r9, r8
   18068:	b	151bc <__assert_fail@plt+0x399c>
   1806c:	mov	lr, r9
   18070:	mov	r8, r7
   18074:	b	16e50 <__assert_fail@plt+0x5630>
   18078:	mov	lr, r9
   1807c:	mov	r8, r7
   18080:	b	16ca8 <__assert_fail@plt+0x5488>
   18084:	mov	lr, r9
   18088:	mov	r8, r7
   1808c:	b	168d4 <__assert_fail@plt+0x50b4>
   18090:	mov	lr, r6
   18094:	mov	r9, r8
   18098:	b	15c64 <__assert_fail@plt+0x4444>
   1809c:	mov	sl, r6
   180a0:	mov	r9, r8
   180a4:	b	15b44 <__assert_fail@plt+0x4324>
   180a8:	mov	lr, r9
   180ac:	mov	r8, r7
   180b0:	b	1632c <__assert_fail@plt+0x4b0c>
   180b4:	mov	lr, r9
   180b8:	mov	r8, r7
   180bc:	b	17170 <__assert_fail@plt+0x5950>
   180c0:	mov	sl, r6
   180c4:	mov	r9, r8
   180c8:	b	169fc <__assert_fail@plt+0x51dc>
   180cc:	mov	ip, fp
   180d0:	mov	r2, r8
   180d4:	b	15fa0 <__assert_fail@plt+0x4780>
   180d8:	mov	sl, r6
   180dc:	mov	r9, r8
   180e0:	b	15de0 <__assert_fail@plt+0x45c0>
   180e4:	mov	lr, r9
   180e8:	mov	r8, r7
   180ec:	b	164b4 <__assert_fail@plt+0x4c94>
   180f0:	mov	sl, r6
   180f4:	mov	r9, r8
   180f8:	b	157e0 <__assert_fail@plt+0x3fc0>
   180fc:	mov	lr, r9
   18100:	mov	r8, r7
   18104:	b	17724 <__assert_fail@plt+0x5f04>
   18108:	mov	lr, r6
   1810c:	mov	r9, r8
   18110:	b	179cc <__assert_fail@plt+0x61ac>
   18114:	mov	sl, r6
   18118:	mov	r9, r8
   1811c:	b	17894 <__assert_fail@plt+0x6074>
   18120:	mov	sl, r6
   18124:	mov	r9, r8
   18128:	b	16b24 <__assert_fail@plt+0x5304>
   1812c:	mov	lr, r6
   18130:	mov	r9, r8
   18134:	b	1550c <__assert_fail@plt+0x3cec>
   18138:	mov	lr, r6
   1813c:	mov	r9, r8
   18140:	b	1539c <__assert_fail@plt+0x3b7c>
   18144:	mov	lr, r9
   18148:	mov	r8, r7
   1814c:	b	167ac <__assert_fail@plt+0x4f8c>
   18150:	mov	lr, r6
   18154:	mov	r9, r8
   18158:	b	17404 <__assert_fail@plt+0x5be4>
   1815c:	mov	r9, r3
   18160:	bl	1167c <__errno_location@plt>
   18164:	ldr	r3, [pc, #-820]	; 17e38 <__assert_fail@plt+0x6618>
   18168:	mov	r2, #5
   1816c:	ldr	r1, [pc, #-840]	; 17e2c <__assert_fail@plt+0x660c>
   18170:	str	r3, [sp, #20]
   18174:	mov	r6, #1
   18178:	ldr	r7, [r0]
   1817c:	mov	r0, r9
   18180:	bl	114c0 <dcgettext@plt>
   18184:	ldr	r1, [sp, #196]	; 0xc4
   18188:	mov	r8, r0
   1818c:	mov	r0, #4
   18190:	bl	1f578 <__assert_fail@plt+0xdd58>
   18194:	mov	r2, r8
   18198:	mov	r1, r7
   1819c:	mov	r3, r0
   181a0:	mov	r0, r9
   181a4:	bl	11574 <error@plt>
   181a8:	b	16ee0 <__assert_fail@plt+0x56c0>
   181ac:	sub	r3, r7, #1
   181b0:	ldrb	r2, [r8], #1
   181b4:	cmp	r4, r8
   181b8:	strb	r2, [r3, #1]!
   181bc:	bne	181b0 <__assert_fail@plt+0x6990>
   181c0:	b	1639c <__assert_fail@plt+0x4b7c>
   181c4:	sub	r2, r8, #1
   181c8:	ldrb	r3, [r9], #1
   181cc:	cmp	r4, r9
   181d0:	strb	r3, [r2, #1]!
   181d4:	bne	181c8 <__assert_fail@plt+0x69a8>
   181d8:	b	17a3c <__assert_fail@plt+0x621c>
   181dc:	sub	r2, r8, #1
   181e0:	ldrb	r3, [r9], #1
   181e4:	cmp	r4, r9
   181e8:	strb	r3, [r2, #1]!
   181ec:	bne	181e0 <__assert_fail@plt+0x69c0>
   181f0:	b	1522c <__assert_fail@plt+0x3a0c>
   181f4:	sub	r3, r8, #1
   181f8:	ldrb	r2, [r9], #1
   181fc:	cmp	r4, r9
   18200:	strb	r2, [r3, #1]!
   18204:	bne	181f8 <__assert_fail@plt+0x69d8>
   18208:	b	1703c <__assert_fail@plt+0x581c>
   1820c:	sub	r3, r7, #1
   18210:	ldrb	r2, [r8], #1
   18214:	cmp	r4, r8
   18218:	strb	r2, [r3, #1]!
   1821c:	bne	18210 <__assert_fail@plt+0x69f0>
   18220:	b	159f0 <__assert_fail@plt+0x41d0>
   18224:	sub	r2, r8, #1
   18228:	ldrb	r3, [r9], #1
   1822c:	cmp	r4, r9
   18230:	strb	r3, [r2, #1]!
   18234:	bne	18228 <__assert_fail@plt+0x6a08>
   18238:	b	15e50 <__assert_fail@plt+0x4630>
   1823c:	sub	r3, r7, #1
   18240:	ldrb	r2, [r8], #1
   18244:	cmp	r4, r8
   18248:	strb	r2, [r3, #1]!
   1824c:	bne	18240 <__assert_fail@plt+0x6a20>
   18250:	b	16524 <__assert_fail@plt+0x4d04>
   18254:	sub	r2, r8, #1
   18258:	ldrb	r3, [r9], #1
   1825c:	cmp	r4, r9
   18260:	strb	r3, [r2, #1]!
   18264:	bne	18258 <__assert_fail@plt+0x6a38>
   18268:	b	16b94 <__assert_fail@plt+0x5374>
   1826c:	sub	r2, r8, #1
   18270:	ldrb	r3, [r9], #1
   18274:	cmp	r4, r9
   18278:	strb	r3, [r2, #1]!
   1827c:	bne	18270 <__assert_fail@plt+0x6a50>
   18280:	b	1522c <__assert_fail@plt+0x3a0c>
   18284:	sub	r2, r8, #1
   18288:	ldrb	r3, [r9], #1
   1828c:	cmp	r4, r9
   18290:	strb	r3, [r2, #1]!
   18294:	bne	18288 <__assert_fail@plt+0x6a68>
   18298:	b	1522c <__assert_fail@plt+0x3a0c>
   1829c:	sub	r3, r7, #1
   182a0:	ldrb	r2, [r8], #1
   182a4:	cmp	r4, r8
   182a8:	strb	r2, [r3, #1]!
   182ac:	bne	182a0 <__assert_fail@plt+0x6a80>
   182b0:	b	16524 <__assert_fail@plt+0x4d04>
   182b4:	sub	r2, r8, #1
   182b8:	ldrb	r3, [r9], #1
   182bc:	cmp	r4, r9
   182c0:	strb	r3, [r2, #1]!
   182c4:	bne	182b8 <__assert_fail@plt+0x6a98>
   182c8:	b	15850 <__assert_fail@plt+0x4030>
   182cc:	sub	r3, r7, #1
   182d0:	ldrb	r2, [r8], #1
   182d4:	cmp	r4, r8
   182d8:	strb	r2, [r3, #1]!
   182dc:	bne	182d0 <__assert_fail@plt+0x6ab0>
   182e0:	b	17794 <__assert_fail@plt+0x5f74>
   182e4:	sub	r2, r8, #1
   182e8:	ldrb	r3, [r9], #1
   182ec:	cmp	r4, r9
   182f0:	strb	r3, [r2, #1]!
   182f4:	bne	182e8 <__assert_fail@plt+0x6ac8>
   182f8:	b	15850 <__assert_fail@plt+0x4030>
   182fc:	sub	r3, r7, #1
   18300:	ldrb	r2, [r8], #1
   18304:	cmp	r4, r8
   18308:	strb	r2, [r3, #1]!
   1830c:	bne	18300 <__assert_fail@plt+0x6ae0>
   18310:	b	16524 <__assert_fail@plt+0x4d04>
   18314:	sub	r2, r8, #1
   18318:	ldrb	r3, [r9], #1
   1831c:	cmp	r4, r9
   18320:	strb	r3, [r2, #1]!
   18324:	bne	18318 <__assert_fail@plt+0x6af8>
   18328:	b	15cd4 <__assert_fail@plt+0x44b4>
   1832c:	sub	r2, r8, #1
   18330:	ldrb	r3, [r9], #1
   18334:	cmp	r4, r9
   18338:	strb	r3, [r2, #1]!
   1833c:	bne	18330 <__assert_fail@plt+0x6b10>
   18340:	b	15850 <__assert_fail@plt+0x4030>
   18344:	mov	r1, #63	; 0x3f
   18348:	bl	11724 <__overflow@plt>
   1834c:	mov	r6, #0
   18350:	b	15a28 <__assert_fail@plt+0x4208>
   18354:	sub	r3, r7, #1
   18358:	ldrb	r2, [r8], #1
   1835c:	cmp	r4, r8
   18360:	strb	r2, [r3, #1]!
   18364:	bne	18358 <__assert_fail@plt+0x6b38>
   18368:	b	16d18 <__assert_fail@plt+0x54f8>
   1836c:	sub	r2, r8, #1
   18370:	ldrb	r3, [r9], #1
   18374:	cmp	r4, r9
   18378:	strb	r3, [r2, #1]!
   1837c:	bne	18370 <__assert_fail@plt+0x6b50>
   18380:	b	17474 <__assert_fail@plt+0x5c54>
   18384:	sub	r3, r7, #1
   18388:	ldrb	r2, [r8], #1
   1838c:	cmp	r4, r8
   18390:	strb	r2, [r3, #1]!
   18394:	bne	18388 <__assert_fail@plt+0x6b68>
   18398:	b	1639c <__assert_fail@plt+0x4b7c>
   1839c:	sub	r2, r8, #1
   183a0:	ldrb	r3, [r9], #1
   183a4:	cmp	r4, r9
   183a8:	strb	r3, [r2, #1]!
   183ac:	bne	183a0 <__assert_fail@plt+0x6b80>
   183b0:	b	15e50 <__assert_fail@plt+0x4630>
   183b4:	sub	r3, r8, #1
   183b8:	ldrb	r2, [r9], #1
   183bc:	cmp	r4, r9
   183c0:	strb	r2, [r3, #1]!
   183c4:	bne	183b8 <__assert_fail@plt+0x6b98>
   183c8:	b	16018 <__assert_fail@plt+0x47f8>
   183cc:	sub	r3, r7, #1
   183d0:	ldrb	r2, [r8], #1
   183d4:	cmp	r4, r8
   183d8:	strb	r2, [r3, #1]!
   183dc:	bne	183d0 <__assert_fail@plt+0x6bb0>
   183e0:	b	1639c <__assert_fail@plt+0x4b7c>
   183e4:	sub	r3, r7, #1
   183e8:	ldrb	r2, [r8], #1
   183ec:	cmp	r4, r8
   183f0:	strb	r2, [r3, #1]!
   183f4:	bne	183e8 <__assert_fail@plt+0x6bc8>
   183f8:	b	16d18 <__assert_fail@plt+0x54f8>
   183fc:	mov	sl, r6
   18400:	mov	r7, r8
   18404:	b	1567c <__assert_fail@plt+0x3e5c>
   18408:	ldr	r3, [r6, #32]
   1840c:	ldr	fp, [r6, #36]	; 0x24
   18410:	add	r7, r0, #1
   18414:	add	r4, r0, r1
   18418:	bic	fp, fp, #4080	; 0xff0
   1841c:	lsl	r3, r3, #12
   18420:	cmp	r7, r4
   18424:	bic	fp, fp, #15
   18428:	orr	r3, fp, r3, lsr #20
   1842c:	str	r3, [sp, #8]
   18430:	ldrcc	sl, [pc, #-1544]	; 17e30 <__assert_fail@plt+0x6610>
   18434:	movcc	r9, r7
   18438:	bcc	1845c <__assert_fail@plt+0x6c3c>
   1843c:	b	163a8 <__assert_fail@plt+0x4b88>
   18440:	bl	1164c <strchr@plt>
   18444:	mov	r9, fp
   18448:	cmp	r0, #0
   1844c:	strbne	r6, [r7]
   18450:	addne	r7, r7, #1
   18454:	cmp	r4, fp
   18458:	bls	163a8 <__assert_fail@plt+0x4b88>
   1845c:	mov	fp, r9
   18460:	mov	r0, sl
   18464:	ldrb	r6, [fp], #1
   18468:	mov	r8, r9
   1846c:	mov	r1, r6
   18470:	bl	1164c <strchr@plt>
   18474:	mov	r1, r6
   18478:	cmp	r0, #0
   1847c:	ldr	r0, [pc, #-1616]	; 17e34 <__assert_fail@plt+0x6614>
   18480:	bne	18440 <__assert_fail@plt+0x6c20>
   18484:	cmp	r4, r9
   18488:	bls	163a8 <__assert_fail@plt+0x4b88>
   1848c:	add	r1, r7, #4
   18490:	add	ip, r9, #4
   18494:	cmp	ip, r7
   18498:	cmphi	r1, r9
   1849c:	sub	r0, r4, fp
   184a0:	movls	r1, #1
   184a4:	movhi	r1, #0
   184a8:	add	r0, r0, #1
   184ac:	cmp	r0, #11
   184b0:	movls	r1, #0
   184b4:	andhi	r1, r1, #1
   184b8:	cmp	r1, #0
   184bc:	mov	ip, fp
   184c0:	beq	18860 <__assert_fail@plt+0x7040>
   184c4:	rsb	r1, r9, #0
   184c8:	ands	r1, r1, #3
   184cc:	beq	18848 <__assert_fail@plt+0x7028>
   184d0:	cmp	r1, #1
   184d4:	strb	r6, [r7]
   184d8:	add	lr, r7, #1
   184dc:	beq	18504 <__assert_fail@plt+0x6ce4>
   184e0:	ldrb	ip, [r9, #1]
   184e4:	cmp	r1, #3
   184e8:	add	lr, r7, #2
   184ec:	strb	ip, [r7, #1]
   184f0:	add	ip, r9, #2
   184f4:	ldrbeq	r6, [r9, #2]
   184f8:	addeq	lr, r7, #3
   184fc:	addeq	ip, r9, #3
   18500:	strbeq	r6, [r7, #2]
   18504:	sub	r8, r0, r1
   18508:	sub	r0, r8, #4
   1850c:	add	r9, r9, r1
   18510:	lsr	r0, r0, #2
   18514:	add	r0, r0, #1
   18518:	add	r1, r7, r1
   1851c:	lsl	r3, r0, #2
   18520:	mov	r6, #0
   18524:	add	r6, r6, #1
   18528:	ldr	r2, [r9], #4
   1852c:	cmp	r0, r6
   18530:	str	r2, [r1], #4
   18534:	bhi	18524 <__assert_fail@plt+0x6d04>
   18538:	cmp	r8, r3
   1853c:	add	r1, lr, r3
   18540:	add	r3, ip, r3
   18544:	beq	1639c <__assert_fail@plt+0x4b7c>
   18548:	ldrb	ip, [ip, r0, lsl #2]
   1854c:	add	r6, r3, #1
   18550:	cmp	r4, r6
   18554:	strb	ip, [lr, r0, lsl #2]
   18558:	bhi	16384 <__assert_fail@plt+0x4b64>
   1855c:	b	1639c <__assert_fail@plt+0x4b7c>
   18560:	ldm	r6, {r3, fp}
   18564:	add	r7, r0, #1
   18568:	add	r4, r0, r1
   1856c:	bic	fp, fp, #4080	; 0xff0
   18570:	lsl	r3, r3, #12
   18574:	cmp	r7, r4
   18578:	bic	fp, fp, #15
   1857c:	orr	r3, fp, r3, lsr #20
   18580:	str	r3, [sp, #8]
   18584:	ldrcc	sl, [pc, #-1884]	; 17e30 <__assert_fail@plt+0x6610>
   18588:	movcc	r9, r7
   1858c:	bcc	185b0 <__assert_fail@plt+0x6d90>
   18590:	b	163a8 <__assert_fail@plt+0x4b88>
   18594:	bl	1164c <strchr@plt>
   18598:	mov	r9, fp
   1859c:	cmp	r0, #0
   185a0:	strbne	r6, [r7]
   185a4:	addne	r7, r7, #1
   185a8:	cmp	r4, fp
   185ac:	bls	163a8 <__assert_fail@plt+0x4b88>
   185b0:	mov	fp, r9
   185b4:	mov	r0, sl
   185b8:	ldrb	r6, [fp], #1
   185bc:	mov	r8, r9
   185c0:	mov	r1, r6
   185c4:	bl	1164c <strchr@plt>
   185c8:	mov	r1, r6
   185cc:	cmp	r0, #0
   185d0:	ldr	r0, [pc, #-1956]	; 17e34 <__assert_fail@plt+0x6614>
   185d4:	bne	18594 <__assert_fail@plt+0x6d74>
   185d8:	cmp	r4, r9
   185dc:	bls	163a8 <__assert_fail@plt+0x4b88>
   185e0:	add	r1, r7, #4
   185e4:	add	ip, r9, #4
   185e8:	cmp	ip, r7
   185ec:	cmphi	r1, r9
   185f0:	sub	r0, r4, fp
   185f4:	movls	r1, #1
   185f8:	movhi	r1, #0
   185fc:	add	r0, r0, #1
   18600:	cmp	r0, #11
   18604:	movls	r1, #0
   18608:	andhi	r1, r1, #1
   1860c:	cmp	r1, #0
   18610:	mov	ip, fp
   18614:	beq	18878 <__assert_fail@plt+0x7058>
   18618:	rsb	r1, r9, #0
   1861c:	ands	r1, r1, #3
   18620:	beq	18854 <__assert_fail@plt+0x7034>
   18624:	cmp	r1, #1
   18628:	strb	r6, [r7]
   1862c:	add	lr, r7, #1
   18630:	beq	18658 <__assert_fail@plt+0x6e38>
   18634:	ldrb	ip, [r9, #1]
   18638:	cmp	r1, #3
   1863c:	add	lr, r7, #2
   18640:	strb	ip, [r7, #1]
   18644:	add	ip, r9, #2
   18648:	ldrbeq	r6, [r9, #2]
   1864c:	addeq	lr, r7, #3
   18650:	addeq	ip, r9, #3
   18654:	strbeq	r6, [r7, #2]
   18658:	sub	r8, r0, r1
   1865c:	sub	r0, r8, #4
   18660:	add	r9, r9, r1
   18664:	lsr	r0, r0, #2
   18668:	add	r0, r0, #1
   1866c:	add	r1, r7, r1
   18670:	lsl	r3, r0, #2
   18674:	mov	r6, #0
   18678:	add	r6, r6, #1
   1867c:	ldr	r2, [r9], #4
   18680:	cmp	r6, r0
   18684:	str	r2, [r1], #4
   18688:	bcc	18678 <__assert_fail@plt+0x6e58>
   1868c:	b	18538 <__assert_fail@plt+0x6d18>
   18690:	ldr	r3, [pc, #-2144]	; 17e38 <__assert_fail@plt+0x6618>
   18694:	mov	r6, #1
   18698:	str	r3, [sp, #20]
   1869c:	b	16ee0 <__assert_fail@plt+0x56c0>
   186a0:	mov	sl, r6
   186a4:	mov	r9, r8
   186a8:	b	175f8 <__assert_fail@plt+0x5dd8>
   186ac:	mov	sl, r6
   186b0:	mov	r9, r8
   186b4:	b	172a8 <__assert_fail@plt+0x5a88>
   186b8:	str	r8, [sp, #8]
   186bc:	ldr	r5, [sp, #28]
   186c0:	b	16210 <__assert_fail@plt+0x49f0>
   186c4:	sub	r2, r8, #1
   186c8:	ldrb	r3, [r9], #1
   186cc:	cmp	r4, r9
   186d0:	strb	r3, [r2, #1]!
   186d4:	bne	186c8 <__assert_fail@plt+0x6ea8>
   186d8:	b	1522c <__assert_fail@plt+0x3a0c>
   186dc:	ldr	r0, [pc, #-2216]	; 17e3c <__assert_fail@plt+0x661c>
   186e0:	bl	11598 <getenv@plt>
   186e4:	bl	214ec <__assert_fail@plt+0xfccc>
   186e8:	ldr	r7, [sp, #64]	; 0x40
   186ec:	str	r0, [r8, #56]	; 0x38
   186f0:	b	153f4 <__assert_fail@plt+0x3bd4>
   186f4:	ldr	r0, [pc, #-2240]	; 17e3c <__assert_fail@plt+0x661c>
   186f8:	bl	11598 <getenv@plt>
   186fc:	bl	214ec <__assert_fail@plt+0xfccc>
   18700:	ldr	r7, [sp, #72]	; 0x48
   18704:	str	r0, [r8, #56]	; 0x38
   18708:	b	15284 <__assert_fail@plt+0x3a64>
   1870c:	ldr	r0, [pc, #-2264]	; 17e3c <__assert_fail@plt+0x661c>
   18710:	bl	11598 <getenv@plt>
   18714:	bl	214ec <__assert_fail@plt+0xfccc>
   18718:	ldr	r7, [sp, #80]	; 0x50
   1871c:	str	r0, [r8, #56]	; 0x38
   18720:	b	150a4 <__assert_fail@plt+0x3884>
   18724:	sub	r2, r8, #1
   18728:	ldrb	r3, [r9], #1
   1872c:	cmp	r4, r9
   18730:	strb	r3, [r2, #1]!
   18734:	bne	18728 <__assert_fail@plt+0x6f08>
   18738:	b	15850 <__assert_fail@plt+0x4030>
   1873c:	sub	r2, r8, #1
   18740:	ldrb	r3, [r9], #1
   18744:	cmp	r4, r9
   18748:	strb	r3, [r2, #1]!
   1874c:	bne	18740 <__assert_fail@plt+0x6f20>
   18750:	b	15850 <__assert_fail@plt+0x4030>
   18754:	ldr	r0, [pc, #-2336]	; 17e3c <__assert_fail@plt+0x661c>
   18758:	bl	11598 <getenv@plt>
   1875c:	bl	214ec <__assert_fail@plt+0xfccc>
   18760:	ldr	r7, [sp, #56]	; 0x38
   18764:	str	r0, [r8, #56]	; 0x38
   18768:	b	15564 <__assert_fail@plt+0x3d44>
   1876c:	mov	lr, r6
   18770:	mov	r9, r8
   18774:	b	17c04 <__assert_fail@plt+0x63e4>
   18778:	mov	r9, sl
   1877c:	mov	r8, r7
   18780:	b	17d90 <__assert_fail@plt+0x6570>
   18784:	mov	r9, sl
   18788:	mov	r8, r7
   1878c:	b	17f44 <__assert_fail@plt+0x6724>
   18790:	bl	1167c <__errno_location@plt>
   18794:	ldr	r7, [sp, #20]
   18798:	mov	r2, #5
   1879c:	ldr	r1, [pc, #-2404]	; 17e40 <__assert_fail@plt+0x6620>
   187a0:	mov	r6, #1
   187a4:	ldr	r4, [r0]
   187a8:	mov	r0, r7
   187ac:	bl	114c0 <dcgettext@plt>
   187b0:	ldr	r1, [sp, #196]	; 0xc4
   187b4:	mov	r5, r0
   187b8:	mov	r0, #4
   187bc:	bl	1f578 <__assert_fail@plt+0xdd58>
   187c0:	mov	r2, r5
   187c4:	mov	r1, r4
   187c8:	mov	r3, r0
   187cc:	mov	r0, r7
   187d0:	bl	11574 <error@plt>
   187d4:	b	15a28 <__assert_fail@plt+0x4208>
   187d8:	sub	r2, r8, #1
   187dc:	ldrb	r3, [r9], #1
   187e0:	cmp	r4, r9
   187e4:	strb	r3, [r2, #1]!
   187e8:	bne	187dc <__assert_fail@plt+0x6fbc>
   187ec:	b	17c74 <__assert_fail@plt+0x6454>
   187f0:	sub	r3, r7, #1
   187f4:	ldrb	r2, [r8], #1
   187f8:	cmp	r4, r8
   187fc:	strb	r2, [r3, #1]!
   18800:	bne	187f4 <__assert_fail@plt+0x6fd4>
   18804:	b	1639c <__assert_fail@plt+0x4b7c>
   18808:	sub	r3, r7, #1
   1880c:	ldrb	r2, [r8], #1
   18810:	cmp	r4, r8
   18814:	strb	r2, [r3, #1]!
   18818:	bne	1880c <__assert_fail@plt+0x6fec>
   1881c:	b	1639c <__assert_fail@plt+0x4b7c>
   18820:	mov	ip, r8
   18824:	ldr	r6, [sp, #8]
   18828:	b	16188 <__assert_fail@plt+0x4968>
   1882c:	ldr	r3, [sp, #8]
   18830:	sub	r3, r3, #1
   18834:	ldrb	r2, [r8], #1
   18838:	cmp	r4, r8
   1883c:	strb	r2, [r3, #1]!
   18840:	bne	18834 <__assert_fail@plt+0x7014>
   18844:	b	161fc <__assert_fail@plt+0x49dc>
   18848:	mov	ip, r9
   1884c:	mov	lr, r7
   18850:	b	18504 <__assert_fail@plt+0x6ce4>
   18854:	mov	ip, r9
   18858:	mov	lr, r7
   1885c:	b	18658 <__assert_fail@plt+0x6e38>
   18860:	sub	r3, r7, #1
   18864:	ldrb	r2, [r8], #1
   18868:	cmp	r4, r8
   1886c:	strb	r2, [r3, #1]!
   18870:	bne	18864 <__assert_fail@plt+0x7044>
   18874:	b	1639c <__assert_fail@plt+0x4b7c>
   18878:	sub	r3, r7, #1
   1887c:	ldrb	r2, [r8], #1
   18880:	cmp	r4, r8
   18884:	strb	r2, [r3, #1]!
   18888:	bne	1887c <__assert_fail@plt+0x705c>
   1888c:	b	1639c <__assert_fail@plt+0x4b7c>
   18890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18894:	sub	sp, sp, #436	; 0x1b4
   18898:	str	r1, [sp, #48]	; 0x30
   1889c:	ldr	r1, [pc, #1436]	; 18e40 <__assert_fail@plt+0x7620>
   188a0:	str	r2, [sp, #20]
   188a4:	str	r0, [sp, #32]
   188a8:	bl	1143c <strcmp@plt>
   188ac:	subs	r3, r0, #0
   188b0:	str	r3, [sp, #24]
   188b4:	bne	18eec <__assert_fail@plt+0x76cc>
   188b8:	add	r6, sp, #176	; 0xb0
   188bc:	mov	r1, r3
   188c0:	mov	r2, #256	; 0x100
   188c4:	mov	r0, r6
   188c8:	bl	116ac <memset@plt>
   188cc:	mov	r3, #4096	; 0x1000
   188d0:	mov	r1, r3
   188d4:	str	r3, [sp, #52]	; 0x34
   188d8:	mvn	r3, #0
   188dc:	str	r3, [sp, #64]	; 0x40
   188e0:	str	r3, [sp, #68]	; 0x44
   188e4:	mov	r3, #20480	; 0x5000
   188e8:	str	r3, [sp, #36]	; 0x24
   188ec:	ldr	r3, [pc, #1360]	; 18e44 <__assert_fail@plt+0x7624>
   188f0:	add	r2, sp, #72	; 0x48
   188f4:	str	r3, [sp, #40]	; 0x28
   188f8:	ldr	r3, [pc, #1376]	; 18e60 <__assert_fail@plt+0x7640>
   188fc:	str	r2, [sp, #60]	; 0x3c
   18900:	mov	r0, r3
   18904:	mov	r2, #12288	; 0x3000
   18908:	str	r3, [sp, #16]
   1890c:	ldrb	r3, [r0, #121]	; 0x79
   18910:	cmp	r3, #0
   18914:	bne	18928 <__assert_fail@plt+0x7108>
   18918:	ldrb	r3, [r0, #122]	; 0x7a
   1891c:	cmp	r3, #0
   18920:	moveq	r2, r1
   18924:	str	r2, [sp, #36]	; 0x24
   18928:	ldr	r3, [sp, #48]	; 0x30
   1892c:	ldrb	r2, [r3]
   18930:	cmp	r2, #0
   18934:	beq	1932c <__assert_fail@plt+0x7b0c>
   18938:	ldr	r7, [pc, #1288]	; 18e48 <__assert_fail@plt+0x7628>
   1893c:	mov	r5, #0
   18940:	add	r8, r7, #8
   18944:	sub	sl, r7, #140	; 0x8c
   18948:	mov	fp, r3
   1894c:	ldr	r4, [sp, #20]
   18950:	b	18964 <__assert_fail@plt+0x7144>
   18954:	ldrb	r2, [fp, #1]
   18958:	add	fp, fp, #1
   1895c:	cmp	r2, #0
   18960:	beq	189e4 <__assert_fail@plt+0x71c4>
   18964:	cmp	r2, #37	; 0x25
   18968:	bne	18954 <__assert_fail@plt+0x7134>
   1896c:	mov	r1, r7
   18970:	add	r0, fp, #1
   18974:	bl	11814 <strspn@plt>
   18978:	mov	r1, r8
   1897c:	add	r0, r0, #1
   18980:	add	r9, fp, r0
   18984:	mov	r0, r9
   18988:	bl	11814 <strspn@plt>
   1898c:	ldrb	r3, [r9, r0]
   18990:	add	fp, r9, r0
   18994:	cmp	r3, #46	; 0x2e
   18998:	bne	189b0 <__assert_fail@plt+0x7190>
   1899c:	add	r0, fp, #1
   189a0:	mov	r1, r8
   189a4:	bl	11814 <strspn@plt>
   189a8:	add	r0, r0, #1
   189ac:	ldrb	r3, [fp, r0]!
   189b0:	cmp	r3, #0
   189b4:	beq	189e4 <__assert_fail@plt+0x71c4>
   189b8:	sub	r3, r3, #65	; 0x41
   189bc:	ldrb	r2, [fp, #1]
   189c0:	uxtb	r3, r3
   189c4:	cmp	r3, #57	; 0x39
   189c8:	addls	r3, sl, r3, lsl #1
   189cc:	movhi	r3, #0
   189d0:	ldrhls	r3, [r3, #160]	; 0xa0
   189d4:	cmp	r2, #0
   189d8:	add	fp, fp, #1
   189dc:	orr	r5, r5, r3
   189e0:	bne	18964 <__assert_fail@plt+0x7144>
   189e4:	str	r4, [sp, #20]
   189e8:	mov	r3, r5
   189ec:	str	r6, [sp]
   189f0:	ldr	r2, [sp, #36]	; 0x24
   189f4:	ldr	r1, [sp, #40]	; 0x28
   189f8:	ldr	r0, [sp, #24]
   189fc:	bl	11700 <statx@plt>
   18a00:	subs	r3, r0, #0
   18a04:	str	r3, [sp, #36]	; 0x24
   18a08:	blt	19168 <__assert_fail@plt+0x7948>
   18a0c:	ldr	lr, [sp, #312]	; 0x138
   18a10:	mov	r5, #0
   18a14:	ldr	r4, [pc, #1072]	; 18e4c <__assert_fail@plt+0x762c>
   18a18:	lsr	r1, lr, #24
   18a1c:	and	r5, r5, r1
   18a20:	ldr	ip, [sp, #304]	; 0x130
   18a24:	lsl	r0, lr, #8
   18a28:	mov	r1, r5
   18a2c:	ldr	r5, [pc, #1052]	; 18e50 <__assert_fail@plt+0x7630>
   18a30:	and	r4, r4, r0
   18a34:	mov	r3, #0
   18a38:	mov	r0, r4
   18a3c:	and	r5, r5, lr
   18a40:	mov	r4, #0
   18a44:	lsr	fp, ip, #24
   18a48:	and	r4, r4, r3
   18a4c:	mov	r9, r5
   18a50:	mov	r5, #0
   18a54:	mov	r8, r4
   18a58:	and	r5, r5, fp
   18a5c:	ldr	r4, [pc, #1000]	; 18e4c <__assert_fail@plt+0x762c>
   18a60:	ldr	r2, [sp, #316]	; 0x13c
   18a64:	lsl	sl, ip, #8
   18a68:	mov	fp, r5
   18a6c:	orr	r5, r9, r1
   18a70:	ldr	r9, [pc, #984]	; 18e50 <__assert_fail@plt+0x7630>
   18a74:	and	r4, r4, sl
   18a78:	mov	sl, r4
   18a7c:	and	r9, r9, ip
   18a80:	orr	r4, r8, r0
   18a84:	mov	r8, #0
   18a88:	lsr	lr, r2, #20
   18a8c:	and	r8, r8, r3
   18a90:	mov	r1, r9
   18a94:	lsl	r3, r2, #12
   18a98:	str	lr, [sp, #28]
   18a9c:	str	r3, [sp, #24]
   18aa0:	uxtb	lr, r2
   18aa4:	orr	r3, r1, fp
   18aa8:	orr	r2, r8, sl
   18aac:	add	fp, pc, #900	; 0x384
   18ab0:	ldrd	sl, [fp]
   18ab4:	strd	r2, [sp, #40]	; 0x28
   18ab8:	ldrd	r2, [sp, #24]
   18abc:	ldr	ip, [sp, #308]	; 0x134
   18ac0:	mov	r0, r4
   18ac4:	mov	r1, r5
   18ac8:	and	sl, sl, r2
   18acc:	and	fp, fp, r3
   18ad0:	add	r5, pc, #864	; 0x360
   18ad4:	ldrd	r4, [r5]
   18ad8:	ldrd	r2, [sp, #40]	; 0x28
   18adc:	orr	r0, r0, lr
   18ae0:	lsr	r9, ip, #20
   18ae4:	lsl	r8, ip, #12
   18ae8:	uxtb	ip, ip
   18aec:	orr	r2, r2, ip
   18af0:	orr	sl, sl, r0
   18af4:	orr	fp, fp, r1
   18af8:	and	r4, r4, r8
   18afc:	ldrd	r0, [r6, #40]	; 0x28
   18b00:	and	r5, r5, r9
   18b04:	orr	r8, r4, r2
   18b08:	orr	r9, r5, r3
   18b0c:	ldrd	r2, [r6, #48]	; 0x30
   18b10:	ldrh	ip, [r6, #28]
   18b14:	strd	sl, [sp, #72]	; 0x48
   18b18:	ldrd	sl, [r6, #32]
   18b1c:	ldr	lr, [sp, #192]	; 0xc0
   18b20:	strd	r8, [sp, #104]	; 0x68
   18b24:	strd	r0, [sp, #120]	; 0x78
   18b28:	ldr	r8, [sp, #180]	; 0xb4
   18b2c:	ldr	r1, [sp, #296]	; 0x128
   18b30:	ldr	r5, [sp, #196]	; 0xc4
   18b34:	ldr	r7, [sp, #200]	; 0xc8
   18b38:	ldr	r9, [sp, #248]	; 0xf8
   18b3c:	ldr	r0, [r6, #112]	; 0x70
   18b40:	strd	r2, [sp, #136]	; 0x88
   18b44:	ldr	r3, [r6, #96]	; 0x60
   18b48:	strd	sl, [sp, #168]	; 0xa8
   18b4c:	str	lr, [sp, #92]	; 0x5c
   18b50:	ldr	sl, [r6, #64]	; 0x40
   18b54:	str	ip, [sp, #88]	; 0x58
   18b58:	str	r8, [sp, #128]	; 0x80
   18b5c:	and	ip, ip, #45056	; 0xb000
   18b60:	str	r5, [sp, #96]	; 0x60
   18b64:	str	r7, [sp, #100]	; 0x64
   18b68:	str	r9, [sp, #148]	; 0x94
   18b6c:	str	r1, [sp, #156]	; 0x9c
   18b70:	ldr	r1, [sp, #48]	; 0x30
   18b74:	cmp	ip, #8192	; 0x2000
   18b78:	str	r0, [sp, #152]	; 0x98
   18b7c:	str	r3, [sp, #160]	; 0xa0
   18b80:	ldr	r0, [sp, #20]
   18b84:	ldr	r3, [sp, #176]	; 0xb0
   18b88:	movne	r0, r1
   18b8c:	ldr	r2, [sp, #280]	; 0x118
   18b90:	tst	r3, #2048	; 0x800
   18b94:	str	r0, [sp, #20]
   18b98:	ldr	r4, [sp, #20]
   18b9c:	ldrne	r3, [sp, #264]	; 0x108
   18ba0:	str	r2, [sp, #164]	; 0xa4
   18ba4:	ldrne	r2, [r6, #80]	; 0x50
   18ba8:	mov	r0, r4
   18bac:	strne	r2, [sp, #64]	; 0x40
   18bb0:	strne	r3, [sp, #68]	; 0x44
   18bb4:	str	sl, [sp, #144]	; 0x90
   18bb8:	bl	11640 <strlen@plt>
   18bbc:	add	r0, r0, #4
   18bc0:	bl	22234 <__assert_fail@plt+0x10a14>
   18bc4:	ldrb	fp, [r4]
   18bc8:	cmp	fp, #0
   18bcc:	mov	r8, r0
   18bd0:	beq	19334 <__assert_fail@plt+0x7b14>
   18bd4:	ldr	sl, [pc, #620]	; 18e48 <__assert_fail@plt+0x7628>
   18bd8:	mov	r3, #0
   18bdc:	ldr	r6, [pc, #624]	; 18e54 <__assert_fail@plt+0x7634>
   18be0:	add	r9, sl, #8
   18be4:	str	r3, [sp, #20]
   18be8:	b	18c38 <__assert_fail@plt+0x7418>
   18bec:	cmp	fp, #92	; 0x5c
   18bf0:	bne	18d1c <__assert_fail@plt+0x74fc>
   18bf4:	ldr	r3, [sp, #16]
   18bf8:	ldrb	r3, [r3, #123]	; 0x7b
   18bfc:	cmp	r3, #0
   18c00:	bne	18d48 <__assert_fail@plt+0x7528>
   18c04:	ldr	r0, [r6]
   18c08:	ldr	r3, [r0, #20]
   18c0c:	ldr	r2, [r0, #24]
   18c10:	cmp	r3, r2
   18c14:	bcs	18ed8 <__assert_fail@plt+0x76b8>
   18c18:	mov	r5, r4
   18c1c:	add	r4, r4, #1
   18c20:	add	r2, r3, #1
   18c24:	str	r2, [r0, #20]
   18c28:	strb	fp, [r3]
   18c2c:	ldrb	fp, [r5, #1]
   18c30:	cmp	fp, #0
   18c34:	beq	18cec <__assert_fail@plt+0x74cc>
   18c38:	cmp	fp, #37	; 0x25
   18c3c:	bne	18bec <__assert_fail@plt+0x73cc>
   18c40:	mov	r1, sl
   18c44:	add	r0, r4, #1
   18c48:	bl	11814 <strspn@plt>
   18c4c:	mov	r1, r9
   18c50:	add	r0, r0, #1
   18c54:	add	r7, r4, r0
   18c58:	mov	r0, r7
   18c5c:	bl	11814 <strspn@plt>
   18c60:	ldrb	fp, [r7, r0]
   18c64:	add	r5, r7, r0
   18c68:	cmp	fp, #46	; 0x2e
   18c6c:	bne	18c84 <__assert_fail@plt+0x7464>
   18c70:	add	r0, r5, #1
   18c74:	mov	r1, r9
   18c78:	bl	11814 <strspn@plt>
   18c7c:	add	r0, r0, #1
   18c80:	ldrb	fp, [r5, r0]!
   18c84:	sub	r7, r5, r4
   18c88:	mov	r1, r4
   18c8c:	mov	r2, r7
   18c90:	mov	r0, r8
   18c94:	bl	11490 <memcpy@plt>
   18c98:	cmp	fp, #37	; 0x25
   18c9c:	beq	18cb0 <__assert_fail@plt+0x7490>
   18ca0:	bhi	18dbc <__assert_fail@plt+0x759c>
   18ca4:	cmp	fp, #0
   18ca8:	subeq	r5, r5, #1
   18cac:	bne	18e2c <__assert_fail@plt+0x760c>
   18cb0:	cmp	r7, #1
   18cb4:	bhi	1933c <__assert_fail@plt+0x7b1c>
   18cb8:	ldr	r0, [r6]
   18cbc:	ldr	r3, [r0, #20]
   18cc0:	ldr	r2, [r0, #24]
   18cc4:	cmp	r3, r2
   18cc8:	bcs	191ac <__assert_fail@plt+0x798c>
   18ccc:	add	r2, r3, #1
   18cd0:	str	r2, [r0, #20]
   18cd4:	mov	r2, #37	; 0x25
   18cd8:	strb	r2, [r3]
   18cdc:	ldrb	fp, [r5, #1]
   18ce0:	add	r4, r5, #1
   18ce4:	cmp	fp, #0
   18ce8:	bne	18c38 <__assert_fail@plt+0x7418>
   18cec:	ldr	r3, [sp, #20]
   18cf0:	eor	r4, r3, #1
   18cf4:	mov	r0, r8
   18cf8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   18cfc:	ldr	r2, [pc, #336]	; 18e54 <__assert_fail@plt+0x7634>
   18d00:	ldr	r3, [pc, #336]	; 18e58 <__assert_fail@plt+0x7638>
   18d04:	ldr	r1, [r2]
   18d08:	ldr	r0, [r3]
   18d0c:	bl	11400 <fputs_unlocked@plt>
   18d10:	mov	r0, r4
   18d14:	add	sp, sp, #436	; 0x1b4
   18d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d1c:	ldr	r0, [r6]
   18d20:	ldr	r3, [r0, #20]
   18d24:	ldr	r2, [r0, #24]
   18d28:	cmp	r3, r2
   18d2c:	bcs	18ed8 <__assert_fail@plt+0x76b8>
   18d30:	add	r2, r3, #1
   18d34:	mov	r5, r4
   18d38:	str	r2, [r0, #20]
   18d3c:	add	r4, r4, #1
   18d40:	strb	fp, [r3]
   18d44:	b	18c2c <__assert_fail@plt+0x740c>
   18d48:	ldrb	r7, [r4, #1]
   18d4c:	sub	r1, r7, #48	; 0x30
   18d50:	uxtb	r3, r1
   18d54:	cmp	r3, #7
   18d58:	bhi	18e74 <__assert_fail@plt+0x7654>
   18d5c:	ldrb	r3, [r4, #2]
   18d60:	sub	r3, r3, #48	; 0x30
   18d64:	uxtb	r2, r3
   18d68:	cmp	r2, #7
   18d6c:	addhi	r4, r4, #2
   18d70:	bhi	18d94 <__assert_fail@plt+0x7574>
   18d74:	ldrb	r2, [r4, #3]
   18d78:	add	r1, r3, r1, lsl #3
   18d7c:	sub	r3, r2, #48	; 0x30
   18d80:	uxtb	r2, r3
   18d84:	cmp	r2, #7
   18d88:	addhi	r4, r4, #3
   18d8c:	addls	r1, r3, r1, lsl #3
   18d90:	addls	r4, r4, #4
   18d94:	ldr	r0, [r6]
   18d98:	ldr	r3, [r0, #20]
   18d9c:	ldr	r2, [r0, #24]
   18da0:	cmp	r3, r2
   18da4:	addcc	r2, r3, #1
   18da8:	strcc	r2, [r0, #20]
   18dac:	strbcc	r1, [r3]
   18db0:	bcs	19300 <__assert_fail@plt+0x7ae0>
   18db4:	sub	r5, r4, #1
   18db8:	b	18c2c <__assert_fail@plt+0x740c>
   18dbc:	cmp	fp, #72	; 0x48
   18dc0:	beq	18dcc <__assert_fail@plt+0x75ac>
   18dc4:	cmp	fp, #76	; 0x4c
   18dc8:	bne	18e2c <__assert_fail@plt+0x760c>
   18dcc:	ldrb	r3, [r5, #1]
   18dd0:	cmp	r3, #114	; 0x72
   18dd4:	cmpne	r3, #100	; 0x64
   18dd8:	moveq	r2, #1
   18ddc:	movne	r2, #0
   18de0:	moveq	r2, fp
   18de4:	addeq	r5, r5, #1
   18de8:	moveq	fp, r3
   18dec:	ldr	r3, [sp, #32]
   18df0:	add	r0, sp, #60	; 0x3c
   18df4:	str	r3, [sp, #4]
   18df8:	ldr	r3, [sp, #36]	; 0x24
   18dfc:	str	r0, [sp, #8]
   18e00:	str	r3, [sp]
   18e04:	mov	r1, r7
   18e08:	mov	r3, fp
   18e0c:	mov	r0, r8
   18e10:	bl	14f70 <__assert_fail@plt+0x3750>
   18e14:	ldr	r3, [sp, #20]
   18e18:	add	r4, r5, #1
   18e1c:	orr	r0, r0, r3
   18e20:	uxtb	r3, r0
   18e24:	str	r3, [sp, #20]
   18e28:	b	18c2c <__assert_fail@plt+0x740c>
   18e2c:	mov	r2, #0
   18e30:	b	18dec <__assert_fail@plt+0x75cc>
   18e34:	nop			; (mov r0, r0)
   18e38:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   18e3c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18e40:	andeq	r4, r2, ip, lsl #28
   18e44:	andeq	r4, r2, r8, asr r9
   18e48:	andeq	r4, r2, ip, lsr #12
   18e4c:	andeq	pc, pc, r0, lsl #30
   18e50:			; <UNDEFINED> instruction: 0xfffff000
   18e54:	andeq	r7, r3, r4, ror #3
   18e58:	andeq	r7, r3, r0, lsl #3
   18e5c:	andeq	r4, r2, r4, lsl pc
   18e60:	strdeq	r7, [r3], -r0
   18e64:	andeq	r4, r2, r8, lsr pc
   18e68:	ldrdeq	r4, [r2], -r0
   18e6c:	andeq	r4, r2, ip, ror #29
   18e70:	strdeq	r4, [r2], -ip
   18e74:	cmp	r7, #120	; 0x78
   18e78:	add	r5, r4, #1
   18e7c:	beq	190f0 <__assert_fail@plt+0x78d0>
   18e80:	cmp	r7, #0
   18e84:	bne	18f88 <__assert_fail@plt+0x7768>
   18e88:	mov	r2, #5
   18e8c:	ldr	r1, [pc, #-56]	; 18e5c <__assert_fail@plt+0x763c>
   18e90:	mov	r0, r7
   18e94:	bl	114c0 <dcgettext@plt>
   18e98:	mov	r1, r7
   18e9c:	mov	r2, r0
   18ea0:	mov	r0, r7
   18ea4:	bl	11574 <error@plt>
   18ea8:	ldr	r0, [r6]
   18eac:	ldr	r3, [r0, #20]
   18eb0:	ldr	r2, [r0, #24]
   18eb4:	cmp	r3, r2
   18eb8:	bcs	19294 <__assert_fail@plt+0x7a74>
   18ebc:	mov	r2, r5
   18ec0:	add	r1, r3, #1
   18ec4:	mov	r5, r4
   18ec8:	str	r1, [r0, #20]
   18ecc:	mov	r4, r2
   18ed0:	strb	fp, [r3]
   18ed4:	b	18c2c <__assert_fail@plt+0x740c>
   18ed8:	mov	r1, fp
   18edc:	mov	r5, r4
   18ee0:	bl	11724 <__overflow@plt>
   18ee4:	add	r4, r4, #1
   18ee8:	b	18c2c <__assert_fail@plt+0x740c>
   18eec:	ldr	r3, [pc, #-148]	; 18e60 <__assert_fail@plt+0x7640>
   18ef0:	add	r6, sp, #176	; 0xb0
   18ef4:	mov	r4, r3
   18ef8:	mov	r2, #256	; 0x100
   18efc:	mov	r1, #0
   18f00:	mov	r0, r6
   18f04:	str	r3, [sp, #16]
   18f08:	bl	116ac <memset@plt>
   18f0c:	ldrb	r2, [r4, #52]	; 0x34
   18f10:	mvn	r3, #0
   18f14:	add	r1, sp, #72	; 0x48
   18f18:	cmp	r2, #0
   18f1c:	str	r1, [sp, #60]	; 0x3c
   18f20:	str	r3, [sp, #64]	; 0x40
   18f24:	str	r3, [sp, #68]	; 0x44
   18f28:	bne	18f58 <__assert_fail@plt+0x7738>
   18f2c:	ldr	r3, [sp, #32]
   18f30:	str	r2, [sp, #52]	; 0x34
   18f34:	str	r3, [sp, #40]	; 0x28
   18f38:	mov	r3, #16640	; 0x4100
   18f3c:	str	r3, [sp, #36]	; 0x24
   18f40:	mvn	r3, #99	; 0x63
   18f44:	mov	r2, #8448	; 0x2100
   18f48:	str	r3, [sp, #24]
   18f4c:	mov	r1, #256	; 0x100
   18f50:	ldr	r0, [sp, #16]
   18f54:	b	1890c <__assert_fail@plt+0x70ec>
   18f58:	mov	r3, #0
   18f5c:	str	r3, [sp, #52]	; 0x34
   18f60:	mov	r1, r3
   18f64:	ldr	r3, [sp, #32]
   18f68:	mov	r2, #8192	; 0x2000
   18f6c:	str	r3, [sp, #40]	; 0x28
   18f70:	mov	r3, #16384	; 0x4000
   18f74:	str	r3, [sp, #36]	; 0x24
   18f78:	mvn	r3, #99	; 0x63
   18f7c:	str	r3, [sp, #24]
   18f80:	ldr	r0, [sp, #16]
   18f84:	b	1890c <__assert_fail@plt+0x70ec>
   18f88:	sub	r3, r7, #34	; 0x22
   18f8c:	mov	fp, r7
   18f90:	cmp	r3, #84	; 0x54
   18f94:	ldrls	pc, [pc, r3, lsl #2]
   18f98:	b	19110 <__assert_fail@plt+0x78f0>
   18f9c:	andeq	r9, r1, r4, lsr r1
   18fa0:	andeq	r9, r1, r0, lsl r1
   18fa4:	andeq	r9, r1, r0, lsl r1
   18fa8:	andeq	r9, r1, r0, lsl r1
   18fac:	andeq	r9, r1, r0, lsl r1
   18fb0:	andeq	r9, r1, r0, lsl r1
   18fb4:	andeq	r9, r1, r0, lsl r1
   18fb8:	andeq	r9, r1, r0, lsl r1
   18fbc:	andeq	r9, r1, r0, lsl r1
   18fc0:	andeq	r9, r1, r0, lsl r1
   18fc4:	andeq	r9, r1, r0, lsl r1
   18fc8:	andeq	r9, r1, r0, lsl r1
   18fcc:	andeq	r9, r1, r0, lsl r1
   18fd0:	andeq	r9, r1, r0, lsl r1
   18fd4:	andeq	r9, r1, r0, lsl r1
   18fd8:	andeq	r9, r1, r0, lsl r1
   18fdc:	andeq	r9, r1, r0, lsl r1
   18fe0:	andeq	r9, r1, r0, lsl r1
   18fe4:	andeq	r9, r1, r0, lsl r1
   18fe8:	andeq	r9, r1, r0, lsl r1
   18fec:	andeq	r9, r1, r0, lsl r1
   18ff0:	andeq	r9, r1, r0, lsl r1
   18ff4:	andeq	r9, r1, r0, lsl r1
   18ff8:	andeq	r9, r1, r0, lsl r1
   18ffc:	andeq	r9, r1, r0, lsl r1
   19000:	andeq	r9, r1, r0, lsl r1
   19004:	andeq	r9, r1, r0, lsl r1
   19008:	andeq	r9, r1, r0, lsl r1
   1900c:	andeq	r9, r1, r0, lsl r1
   19010:	andeq	r9, r1, r0, lsl r1
   19014:	andeq	r9, r1, r0, lsl r1
   19018:	andeq	r9, r1, r0, lsl r1
   1901c:	andeq	r9, r1, r0, lsl r1
   19020:	andeq	r9, r1, r0, lsl r1
   19024:	andeq	r9, r1, r0, lsl r1
   19028:	andeq	r9, r1, r0, lsl r1
   1902c:	andeq	r9, r1, r0, lsl r1
   19030:	andeq	r9, r1, r0, lsl r1
   19034:	andeq	r9, r1, r0, lsl r1
   19038:	andeq	r9, r1, r0, lsl r1
   1903c:	andeq	r9, r1, r0, lsl r1
   19040:	andeq	r9, r1, r0, lsl r1
   19044:	andeq	r9, r1, r0, lsl r1
   19048:	andeq	r9, r1, r0, lsl r1
   1904c:	andeq	r9, r1, r0, lsl r1
   19050:	andeq	r9, r1, r0, lsl r1
   19054:	andeq	r9, r1, r0, lsl r1
   19058:	andeq	r9, r1, r0, lsl r1
   1905c:	andeq	r9, r1, r0, lsl r1
   19060:	andeq	r9, r1, r0, lsl r1
   19064:	andeq	r9, r1, r0, lsl r1
   19068:	andeq	r9, r1, r0, lsl r1
   1906c:	andeq	r9, r1, r0, lsl r1
   19070:	andeq	r9, r1, r0, lsl r1
   19074:	andeq	r9, r1, r0, lsl r1
   19078:	andeq	r9, r1, r0, lsl r1
   1907c:	andeq	r9, r1, r0, lsl r1
   19080:	andeq	r9, r1, r0, lsl r1
   19084:	andeq	r9, r1, r4, lsr r1
   19088:	andeq	r9, r1, r0, lsl r1
   1908c:	andeq	r9, r1, r0, lsl r1
   19090:	andeq	r9, r1, r0, lsl r1
   19094:	andeq	r9, r1, r0, lsl r1
   19098:	andeq	r9, r1, r0, lsr #6
   1909c:	strdeq	r9, [r1], -r4
   190a0:	andeq	r9, r1, r0, lsl r1
   190a4:	andeq	r9, r1, r0, lsl r1
   190a8:	andeq	r9, r1, r8, ror #5
   190ac:	ldrdeq	r9, [r1], -ip
   190b0:	andeq	r9, r1, r0, lsl r1
   190b4:	andeq	r9, r1, r0, lsl r1
   190b8:	andeq	r9, r1, r0, lsl r1
   190bc:	andeq	r9, r1, r0, lsl r1
   190c0:	andeq	r9, r1, r0, lsl r1
   190c4:	andeq	r9, r1, r0, lsl r1
   190c8:	andeq	r9, r1, r0, lsl r1
   190cc:	ldrdeq	r9, [r1], -r0
   190d0:	andeq	r9, r1, r0, lsl r1
   190d4:	andeq	r9, r1, r0, lsl r1
   190d8:	andeq	r9, r1, r0, lsl r1
   190dc:	andeq	r9, r1, r4, asr #5
   190e0:	andeq	r9, r1, r0, lsl r1
   190e4:			; <UNDEFINED> instruction: 0x000192b8
   190e8:	andeq	r9, r1, r0, lsl r1
   190ec:	andeq	r9, r1, ip, lsr #5
   190f0:	bl	11610 <__ctype_b_loc@plt>
   190f4:	ldrb	r1, [r4, #2]
   190f8:	lsl	r2, r1, #1
   190fc:	ldr	r3, [r0]
   19100:	ldrh	r2, [r3, r2]
   19104:	tst	r2, #4096	; 0x1000
   19108:	bne	191bc <__assert_fail@plt+0x799c>
   1910c:	mov	fp, r7
   19110:	mov	r2, #5
   19114:	ldr	r1, [pc, #-696]	; 18e64 <__assert_fail@plt+0x7644>
   19118:	mov	r0, #0
   1911c:	bl	114c0 <dcgettext@plt>
   19120:	mov	r1, #0
   19124:	mov	r3, r7
   19128:	mov	r2, r0
   1912c:	mov	r0, r1
   19130:	bl	11574 <error@plt>
   19134:	ldr	r0, [r6]
   19138:	ldr	r3, [r0, #20]
   1913c:	ldr	r2, [r0, #24]
   19140:	cmp	r3, r2
   19144:	addcc	r2, r3, #1
   19148:	strcc	r2, [r0, #20]
   1914c:	addcc	r4, r4, #2
   19150:	strbcc	r7, [r3]
   19154:	bcc	18c2c <__assert_fail@plt+0x740c>
   19158:	mov	r1, fp
   1915c:	bl	11724 <__overflow@plt>
   19160:	add	r4, r4, #2
   19164:	b	18c2c <__assert_fail@plt+0x740c>
   19168:	ldr	r3, [sp, #52]	; 0x34
   1916c:	cmp	r3, #0
   19170:	beq	19244 <__assert_fail@plt+0x7a24>
   19174:	bl	1167c <__errno_location@plt>
   19178:	mov	r4, #0
   1917c:	mov	r2, #5
   19180:	ldr	r1, [pc, #-800]	; 18e68 <__assert_fail@plt+0x7648>
   19184:	ldr	r5, [r0]
   19188:	mov	r0, r4
   1918c:	bl	114c0 <dcgettext@plt>
   19190:	mov	r1, r5
   19194:	mov	r2, r0
   19198:	mov	r0, r4
   1919c:	bl	11574 <error@plt>
   191a0:	mov	r0, r4
   191a4:	add	sp, sp, #436	; 0x1b4
   191a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191ac:	mov	r1, #37	; 0x25
   191b0:	bl	11724 <__overflow@plt>
   191b4:	add	r4, r5, #1
   191b8:	b	18c2c <__assert_fail@plt+0x740c>
   191bc:	sub	r2, r1, #97	; 0x61
   191c0:	cmp	r2, #5
   191c4:	subls	r1, r1, #87	; 0x57
   191c8:	bls	191dc <__assert_fail@plt+0x79bc>
   191cc:	sub	r2, r1, #65	; 0x41
   191d0:	cmp	r2, #5
   191d4:	subls	r1, r1, #55	; 0x37
   191d8:	subhi	r1, r1, #48	; 0x30
   191dc:	ldrb	r2, [r4, #3]
   191e0:	lsl	r0, r2, #1
   191e4:	ldrh	r3, [r3, r0]
   191e8:	tst	r3, #4096	; 0x1000
   191ec:	addeq	r5, r4, #2
   191f0:	beq	19210 <__assert_fail@plt+0x79f0>
   191f4:	sub	r3, r2, #97	; 0x61
   191f8:	cmp	r3, #5
   191fc:	add	r5, r4, #3
   19200:	lsl	r1, r1, #4
   19204:	subls	r2, r2, #87	; 0x57
   19208:	bhi	1930c <__assert_fail@plt+0x7aec>
   1920c:	add	r1, r1, r2
   19210:	ldr	r0, [r6]
   19214:	ldr	r3, [r0, #20]
   19218:	ldr	r2, [r0, #24]
   1921c:	cmp	r3, r2
   19220:	addcc	r2, r3, #1
   19224:	strcc	r2, [r0, #20]
   19228:	addcc	r4, r5, #1
   1922c:	strbcc	r1, [r3]
   19230:	bcc	18c2c <__assert_fail@plt+0x740c>
   19234:	uxtb	r1, r1
   19238:	bl	11724 <__overflow@plt>
   1923c:	add	r4, r5, #1
   19240:	b	18c2c <__assert_fail@plt+0x740c>
   19244:	mov	r7, r3
   19248:	bl	1167c <__errno_location@plt>
   1924c:	mov	r2, #5
   19250:	ldr	r1, [pc, #-1004]	; 18e6c <__assert_fail@plt+0x764c>
   19254:	mov	r4, r7
   19258:	ldr	r5, [r0]
   1925c:	mov	r0, r7
   19260:	bl	114c0 <dcgettext@plt>
   19264:	ldr	r1, [sp, #32]
   19268:	mov	r6, r0
   1926c:	mov	r0, #4
   19270:	bl	1f578 <__assert_fail@plt+0xdd58>
   19274:	mov	r2, r6
   19278:	mov	r1, r5
   1927c:	mov	r3, r0
   19280:	mov	r0, r7
   19284:	bl	11574 <error@plt>
   19288:	mov	r0, r4
   1928c:	add	sp, sp, #436	; 0x1b4
   19290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19294:	mov	r1, fp
   19298:	bl	11724 <__overflow@plt>
   1929c:	mov	r3, r5
   192a0:	mov	r5, r4
   192a4:	mov	r4, r3
   192a8:	b	18c2c <__assert_fail@plt+0x740c>
   192ac:	mov	fp, #11
   192b0:	mov	r7, fp
   192b4:	b	19134 <__assert_fail@plt+0x7914>
   192b8:	mov	fp, #9
   192bc:	mov	r7, fp
   192c0:	b	19134 <__assert_fail@plt+0x7914>
   192c4:	mov	fp, #13
   192c8:	mov	r7, fp
   192cc:	b	19134 <__assert_fail@plt+0x7914>
   192d0:	mov	fp, #10
   192d4:	mov	r7, fp
   192d8:	b	19134 <__assert_fail@plt+0x7914>
   192dc:	mov	fp, #12
   192e0:	mov	r7, fp
   192e4:	b	19134 <__assert_fail@plt+0x7914>
   192e8:	mov	fp, #27
   192ec:	mov	r7, fp
   192f0:	b	19134 <__assert_fail@plt+0x7914>
   192f4:	mov	fp, #8
   192f8:	mov	r7, fp
   192fc:	b	19134 <__assert_fail@plt+0x7914>
   19300:	uxtb	r1, r1
   19304:	bl	11724 <__overflow@plt>
   19308:	b	18db4 <__assert_fail@plt+0x7594>
   1930c:	sub	r3, r2, #65	; 0x41
   19310:	cmp	r3, #5
   19314:	subls	r2, r2, #55	; 0x37
   19318:	subhi	r2, r2, #48	; 0x30
   1931c:	b	1920c <__assert_fail@plt+0x79ec>
   19320:	mov	fp, #7
   19324:	mov	r7, fp
   19328:	b	19134 <__assert_fail@plt+0x7914>
   1932c:	mov	r5, r2
   19330:	b	189e8 <__assert_fail@plt+0x71c8>
   19334:	mov	r4, #1
   19338:	b	18cf4 <__assert_fail@plt+0x74d4>
   1933c:	mov	r3, r8
   19340:	mov	r4, #0
   19344:	strb	fp, [r3, r7]!
   19348:	mov	r2, #5
   1934c:	ldr	r1, [pc, #-1252]	; 18e70 <__assert_fail@plt+0x7650>
   19350:	strb	r4, [r3, #1]
   19354:	mov	r0, r4
   19358:	bl	114c0 <dcgettext@plt>
   1935c:	mov	r5, r0
   19360:	mov	r0, r8
   19364:	bl	20ee8 <__assert_fail@plt+0xf6c8>
   19368:	mov	r2, r5
   1936c:	mov	r1, r4
   19370:	mov	r3, r0
   19374:	mov	r0, #1
   19378:	bl	11574 <error@plt>
   1937c:	subs	r5, r0, #0
   19380:	push	{r7, lr}
   19384:	sub	sp, sp, #56	; 0x38
   19388:	beq	193c4 <__assert_fail@plt+0x7ba4>
   1938c:	ldr	r3, [pc, #972]	; 19760 <__assert_fail@plt+0x7f40>
   19390:	mov	r2, #5
   19394:	ldr	r1, [pc, #968]	; 19764 <__assert_fail@plt+0x7f44>
   19398:	mov	r0, #0
   1939c:	ldr	r4, [r3]
   193a0:	bl	114c0 <dcgettext@plt>
   193a4:	ldr	r3, [pc, #956]	; 19768 <__assert_fail@plt+0x7f48>
   193a8:	mov	r1, #1
   193ac:	ldr	r3, [r3]
   193b0:	mov	r2, r0
   193b4:	mov	r0, r4
   193b8:	bl	116d0 <__fprintf_chk@plt>
   193bc:	mov	r0, r5
   193c0:	bl	11628 <exit@plt>
   193c4:	mov	r2, #5
   193c8:	ldr	r1, [pc, #924]	; 1976c <__assert_fail@plt+0x7f4c>
   193cc:	bl	114c0 <dcgettext@plt>
   193d0:	ldr	r3, [pc, #912]	; 19768 <__assert_fail@plt+0x7f48>
   193d4:	ldr	r6, [pc, #916]	; 19770 <__assert_fail@plt+0x7f50>
   193d8:	ldr	r4, [pc, #916]	; 19774 <__assert_fail@plt+0x7f54>
   193dc:	ldr	r2, [r3]
   193e0:	mov	r1, r0
   193e4:	mov	r0, #1
   193e8:	bl	116b8 <__printf_chk@plt>
   193ec:	mov	r2, #5
   193f0:	ldr	r1, [pc, #896]	; 19778 <__assert_fail@plt+0x7f58>
   193f4:	mov	r0, r5
   193f8:	bl	114c0 <dcgettext@plt>
   193fc:	ldr	r1, [r6]
   19400:	bl	11400 <fputs_unlocked@plt>
   19404:	mov	r2, #5
   19408:	ldr	r1, [pc, #876]	; 1977c <__assert_fail@plt+0x7f5c>
   1940c:	mov	r0, r5
   19410:	bl	114c0 <dcgettext@plt>
   19414:	ldr	r1, [r6]
   19418:	bl	11400 <fputs_unlocked@plt>
   1941c:	mov	r2, #5
   19420:	ldr	r1, [pc, #856]	; 19780 <__assert_fail@plt+0x7f60>
   19424:	mov	r0, r5
   19428:	bl	114c0 <dcgettext@plt>
   1942c:	ldr	r1, [r6]
   19430:	bl	11400 <fputs_unlocked@plt>
   19434:	mov	r2, #5
   19438:	ldr	r1, [pc, #836]	; 19784 <__assert_fail@plt+0x7f64>
   1943c:	mov	r0, r5
   19440:	bl	114c0 <dcgettext@plt>
   19444:	ldr	r1, [r6]
   19448:	bl	11400 <fputs_unlocked@plt>
   1944c:	mov	r2, #5
   19450:	ldr	r1, [pc, #816]	; 19788 <__assert_fail@plt+0x7f68>
   19454:	mov	r0, r5
   19458:	bl	114c0 <dcgettext@plt>
   1945c:	ldr	r1, [r6]
   19460:	bl	11400 <fputs_unlocked@plt>
   19464:	mov	r2, #5
   19468:	ldr	r1, [pc, #796]	; 1978c <__assert_fail@plt+0x7f6c>
   1946c:	mov	r0, r5
   19470:	bl	114c0 <dcgettext@plt>
   19474:	ldr	r1, [r6]
   19478:	bl	11400 <fputs_unlocked@plt>
   1947c:	mov	r2, #5
   19480:	ldr	r1, [pc, #776]	; 19790 <__assert_fail@plt+0x7f70>
   19484:	mov	r0, r5
   19488:	bl	114c0 <dcgettext@plt>
   1948c:	ldr	r1, [r6]
   19490:	bl	11400 <fputs_unlocked@plt>
   19494:	mov	r2, #5
   19498:	ldr	r1, [pc, #756]	; 19794 <__assert_fail@plt+0x7f74>
   1949c:	mov	r0, r5
   194a0:	bl	114c0 <dcgettext@plt>
   194a4:	ldr	r1, [r6]
   194a8:	bl	11400 <fputs_unlocked@plt>
   194ac:	mov	r2, #5
   194b0:	ldr	r1, [pc, #736]	; 19798 <__assert_fail@plt+0x7f78>
   194b4:	mov	r0, r5
   194b8:	bl	114c0 <dcgettext@plt>
   194bc:	ldr	r1, [r6]
   194c0:	bl	11400 <fputs_unlocked@plt>
   194c4:	mov	r2, #5
   194c8:	ldr	r1, [pc, #716]	; 1979c <__assert_fail@plt+0x7f7c>
   194cc:	mov	r0, r5
   194d0:	bl	114c0 <dcgettext@plt>
   194d4:	ldr	r1, [r6]
   194d8:	bl	11400 <fputs_unlocked@plt>
   194dc:	mov	r2, #5
   194e0:	ldr	r1, [pc, #696]	; 197a0 <__assert_fail@plt+0x7f80>
   194e4:	mov	r0, r5
   194e8:	bl	114c0 <dcgettext@plt>
   194ec:	ldr	r1, [r6]
   194f0:	bl	11400 <fputs_unlocked@plt>
   194f4:	mov	r2, #5
   194f8:	ldr	r1, [pc, #676]	; 197a4 <__assert_fail@plt+0x7f84>
   194fc:	mov	r0, r5
   19500:	bl	114c0 <dcgettext@plt>
   19504:	ldr	r1, [r6]
   19508:	bl	11400 <fputs_unlocked@plt>
   1950c:	mov	r2, #5
   19510:	ldr	r1, [pc, #656]	; 197a8 <__assert_fail@plt+0x7f88>
   19514:	mov	r0, r5
   19518:	bl	114c0 <dcgettext@plt>
   1951c:	ldr	r1, [r6]
   19520:	bl	11400 <fputs_unlocked@plt>
   19524:	mov	r2, #5
   19528:	ldr	r1, [pc, #636]	; 197ac <__assert_fail@plt+0x7f8c>
   1952c:	mov	r0, r5
   19530:	bl	114c0 <dcgettext@plt>
   19534:	ldr	r1, [r6]
   19538:	bl	11400 <fputs_unlocked@plt>
   1953c:	mov	r2, #5
   19540:	ldr	r1, [pc, #616]	; 197b0 <__assert_fail@plt+0x7f90>
   19544:	mov	r0, r5
   19548:	bl	114c0 <dcgettext@plt>
   1954c:	ldr	r2, [pc, #608]	; 197b4 <__assert_fail@plt+0x7f94>
   19550:	mov	r1, r0
   19554:	mov	r0, #1
   19558:	bl	116b8 <__printf_chk@plt>
   1955c:	mov	r2, #5
   19560:	ldr	r1, [pc, #592]	; 197b8 <__assert_fail@plt+0x7f98>
   19564:	mov	r0, r5
   19568:	bl	114c0 <dcgettext@plt>
   1956c:	ldr	r2, [pc, #584]	; 197bc <__assert_fail@plt+0x7f9c>
   19570:	mov	r1, r0
   19574:	mov	r0, #1
   19578:	bl	116b8 <__printf_chk@plt>
   1957c:	mov	r2, #5
   19580:	ldr	r1, [pc, #568]	; 197c0 <__assert_fail@plt+0x7fa0>
   19584:	mov	r0, r5
   19588:	bl	114c0 <dcgettext@plt>
   1958c:	ldr	r2, [pc, #560]	; 197c4 <__assert_fail@plt+0x7fa4>
   19590:	mov	r1, r0
   19594:	mov	r0, #1
   19598:	bl	116b8 <__printf_chk@plt>
   1959c:	ldm	r4!, {r0, r1, r2, r3}
   195a0:	mov	lr, sp
   195a4:	stmia	lr!, {r0, r1, r2, r3}
   195a8:	ldm	r4!, {r0, r1, r2, r3}
   195ac:	ldr	ip, [sp]
   195b0:	stmia	lr!, {r0, r1, r2, r3}
   195b4:	cmp	ip, #0
   195b8:	ldm	r4!, {r0, r1, r2, r3}
   195bc:	stmia	lr!, {r0, r1, r2, r3}
   195c0:	ldm	r4, {r0, r1}
   195c4:	moveq	r4, sp
   195c8:	stm	lr, {r0, r1}
   195cc:	beq	195fc <__assert_fail@plt+0x7ddc>
   195d0:	ldr	r7, [pc, #492]	; 197c4 <__assert_fail@plt+0x7fa4>
   195d4:	mov	r4, sp
   195d8:	b	195e8 <__assert_fail@plt+0x7dc8>
   195dc:	ldr	ip, [r4, #8]!
   195e0:	cmp	ip, #0
   195e4:	beq	195fc <__assert_fail@plt+0x7ddc>
   195e8:	mov	r1, ip
   195ec:	mov	r0, r7
   195f0:	bl	1143c <strcmp@plt>
   195f4:	cmp	r0, #0
   195f8:	bne	195dc <__assert_fail@plt+0x7dbc>
   195fc:	ldr	r4, [r4, #4]
   19600:	mov	r2, #5
   19604:	cmp	r4, #0
   19608:	ldr	r1, [pc, #440]	; 197c8 <__assert_fail@plt+0x7fa8>
   1960c:	beq	196b4 <__assert_fail@plt+0x7e94>
   19610:	mov	r0, #0
   19614:	bl	114c0 <dcgettext@plt>
   19618:	ldr	r3, [pc, #428]	; 197cc <__assert_fail@plt+0x7fac>
   1961c:	ldr	r2, [pc, #428]	; 197d0 <__assert_fail@plt+0x7fb0>
   19620:	mov	r1, r0
   19624:	mov	r0, #1
   19628:	bl	116b8 <__printf_chk@plt>
   1962c:	mov	r1, #0
   19630:	mov	r0, #5
   19634:	bl	11730 <setlocale@plt>
   19638:	cmp	r0, #0
   1963c:	ldreq	r7, [pc, #384]	; 197c4 <__assert_fail@plt+0x7fa4>
   19640:	beq	1965c <__assert_fail@plt+0x7e3c>
   19644:	mov	r2, #3
   19648:	ldr	r1, [pc, #388]	; 197d4 <__assert_fail@plt+0x7fb4>
   1964c:	bl	117e4 <strncmp@plt>
   19650:	ldr	r7, [pc, #364]	; 197c4 <__assert_fail@plt+0x7fa4>
   19654:	cmp	r0, #0
   19658:	bne	19744 <__assert_fail@plt+0x7f24>
   1965c:	mov	r2, #5
   19660:	ldr	r1, [pc, #368]	; 197d8 <__assert_fail@plt+0x7fb8>
   19664:	mov	r0, #0
   19668:	bl	114c0 <dcgettext@plt>
   1966c:	ldr	r3, [pc, #336]	; 197c4 <__assert_fail@plt+0x7fa4>
   19670:	ldr	r2, [pc, #340]	; 197cc <__assert_fail@plt+0x7fac>
   19674:	mov	r1, r0
   19678:	mov	r0, #1
   1967c:	bl	116b8 <__printf_chk@plt>
   19680:	mov	r2, #5
   19684:	ldr	r1, [pc, #336]	; 197dc <__assert_fail@plt+0x7fbc>
   19688:	mov	r0, #0
   1968c:	bl	114c0 <dcgettext@plt>
   19690:	ldr	r2, [pc, #328]	; 197e0 <__assert_fail@plt+0x7fc0>
   19694:	cmp	r4, r7
   19698:	ldr	r3, [pc, #324]	; 197e4 <__assert_fail@plt+0x7fc4>
   1969c:	movne	r3, r2
   196a0:	mov	r1, r0
   196a4:	mov	r2, r4
   196a8:	mov	r0, #1
   196ac:	bl	116b8 <__printf_chk@plt>
   196b0:	b	193bc <__assert_fail@plt+0x7b9c>
   196b4:	mov	r0, r4
   196b8:	bl	114c0 <dcgettext@plt>
   196bc:	ldr	r3, [pc, #264]	; 197cc <__assert_fail@plt+0x7fac>
   196c0:	ldr	r2, [pc, #264]	; 197d0 <__assert_fail@plt+0x7fb0>
   196c4:	mov	r1, r0
   196c8:	mov	r0, #1
   196cc:	bl	116b8 <__printf_chk@plt>
   196d0:	mov	r1, r4
   196d4:	mov	r0, #5
   196d8:	bl	11730 <setlocale@plt>
   196dc:	cmp	r0, #0
   196e0:	beq	196f8 <__assert_fail@plt+0x7ed8>
   196e4:	mov	r2, #3
   196e8:	ldr	r1, [pc, #228]	; 197d4 <__assert_fail@plt+0x7fb4>
   196ec:	bl	117e4 <strncmp@plt>
   196f0:	cmp	r0, #0
   196f4:	bne	1973c <__assert_fail@plt+0x7f1c>
   196f8:	mov	r2, #5
   196fc:	ldr	r1, [pc, #212]	; 197d8 <__assert_fail@plt+0x7fb8>
   19700:	mov	r0, #0
   19704:	bl	114c0 <dcgettext@plt>
   19708:	ldr	r3, [pc, #180]	; 197c4 <__assert_fail@plt+0x7fa4>
   1970c:	ldr	r2, [pc, #184]	; 197cc <__assert_fail@plt+0x7fac>
   19710:	mov	r4, r3
   19714:	mov	r1, r0
   19718:	mov	r0, #1
   1971c:	bl	116b8 <__printf_chk@plt>
   19720:	ldr	r1, [pc, #180]	; 197dc <__assert_fail@plt+0x7fbc>
   19724:	mov	r2, #5
   19728:	mov	r0, #0
   1972c:	bl	114c0 <dcgettext@plt>
   19730:	ldr	r3, [pc, #172]	; 197e4 <__assert_fail@plt+0x7fc4>
   19734:	mov	r1, r0
   19738:	b	196a4 <__assert_fail@plt+0x7e84>
   1973c:	ldr	r7, [pc, #128]	; 197c4 <__assert_fail@plt+0x7fa4>
   19740:	mov	r4, r7
   19744:	mov	r2, #5
   19748:	ldr	r1, [pc, #152]	; 197e8 <__assert_fail@plt+0x7fc8>
   1974c:	mov	r0, #0
   19750:	bl	114c0 <dcgettext@plt>
   19754:	ldr	r1, [r6]
   19758:	bl	11400 <fputs_unlocked@plt>
   1975c:	b	1965c <__assert_fail@plt+0x7e3c>
   19760:	andeq	r7, r3, r0, ror #3
   19764:	andeq	r4, r2, r4, ror #30
   19768:	andeq	r7, r3, r4, ror r2
   1976c:	andeq	r4, r2, ip, lsl #31
   19770:	andeq	r7, r3, r4, ror #3
   19774:			; <UNDEFINED> instruction: 0x000246b4
   19778:	andeq	r4, r2, ip, lsr #31
   1977c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   19780:	andeq	r5, r2, r0, lsr #32
   19784:	muleq	r2, r0, r0
   19788:	andeq	r5, r2, r8, lsl r1
   1978c:			; <UNDEFINED> instruction: 0x000252bc
   19790:	andeq	r5, r2, ip, ror #5
   19794:	andeq	r5, r2, r4, lsr #6
   19798:	andeq	r5, r2, ip, lsl r4
   1979c:	andeq	r5, r2, r4, ror #10
   197a0:	andeq	r5, r2, ip, asr r6
   197a4:	andeq	r5, r2, ip, lsr #17
   197a8:	andeq	r5, r2, ip, lsl #21
   197ac:	andeq	r5, r2, ip, ror fp
   197b0:	andeq	r5, r2, r8, ror ip
   197b4:	andeq	r4, r2, r4, asr #11
   197b8:			; <UNDEFINED> instruction: 0x00025cb0
   197bc:	andeq	r4, r2, r0, lsr #11
   197c0:	strdeq	r5, [r2], -r4
   197c4:	andeq	r4, r2, ip, asr pc
   197c8:			; <UNDEFINED> instruction: 0x00025db4
   197cc:	andeq	r5, r2, ip, asr #27
   197d0:	strdeq	r5, [r2], -r4
   197d4:	andeq	r5, r2, r4, lsl #28
   197d8:	andeq	r5, r2, r0, asr lr
   197dc:	andeq	r5, r2, ip, ror #28
   197e0:	andeq	r4, r2, r8, asr r9
   197e4:	andeq	r5, r2, r0, asr #31
   197e8:	andeq	r5, r2, r8, lsl #28
   197ec:	push	{r4, r5, r6, r7, r8, fp, lr}
   197f0:	add	fp, sp, #24
   197f4:	mov	r7, r0
   197f8:	sub	sp, sp, #220	; 0xdc
   197fc:	sub	r0, fp, #244	; 0xf4
   19800:	mov	r4, r1
   19804:	bl	21068 <__assert_fail@plt+0xf848>
   19808:	subs	r6, r0, #0
   1980c:	bne	19a3c <__assert_fail@plt+0x821c>
   19810:	ldr	r3, [r4, #16]
   19814:	and	r3, r3, #61440	; 0xf000
   19818:	cmp	r3, #16384	; 0x4000
   1981c:	beq	19978 <__assert_fail@plt+0x8158>
   19820:	mov	r0, r7
   19824:	bl	1a2b8 <__assert_fail@plt+0x8a98>
   19828:	mov	r4, r0
   1982c:	bl	11640 <strlen@plt>
   19830:	mov	r1, r4
   19834:	add	r3, r0, #15
   19838:	bic	r3, r3, #7
   1983c:	sub	sp, sp, r3
   19840:	add	r2, r0, #1
   19844:	mov	r0, sp
   19848:	bl	11490 <memcpy@plt>
   1984c:	mov	r7, r0
   19850:	mov	r0, r4
   19854:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   19858:	mov	r0, r7
   1985c:	bl	114fc <chdir@plt>
   19860:	cmp	r0, #0
   19864:	blt	1999c <__assert_fail@plt+0x817c>
   19868:	sub	r5, fp, #236	; 0xec
   1986c:	mov	r2, r5
   19870:	ldr	r1, [pc, #536]	; 19a90 <__assert_fail@plt+0x8270>
   19874:	mov	r0, #3
   19878:	bl	117cc <__xstat64@plt>
   1987c:	cmp	r0, #0
   19880:	blt	199f4 <__assert_fail@plt+0x81d4>
   19884:	ldr	r4, [pc, #520]	; 19a94 <__assert_fail@plt+0x8274>
   19888:	mov	r6, #3
   1988c:	mov	r7, #104	; 0x68
   19890:	b	198dc <__assert_fail@plt+0x80bc>
   19894:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   19898:	ldrd	r2, [fp, #-236]	; 0xffffff14
   1989c:	cmp	r1, r3
   198a0:	cmpeq	r0, r2
   198a4:	bne	19964 <__assert_fail@plt+0x8144>
   198a8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   198ac:	ldrd	r2, [fp, #-140]	; 0xffffff74
   198b0:	cmp	r1, r3
   198b4:	cmpeq	r0, r2
   198b8:	beq	19964 <__assert_fail@plt+0x8144>
   198bc:	mov	r0, r4
   198c0:	bl	114fc <chdir@plt>
   198c4:	cmp	r0, #0
   198c8:	blt	199e0 <__assert_fail@plt+0x81c0>
   198cc:	mov	r2, r7
   198d0:	sub	r1, fp, #132	; 0x84
   198d4:	mov	r0, r5
   198d8:	bl	11490 <memcpy@plt>
   198dc:	sub	r2, fp, #132	; 0x84
   198e0:	mov	r1, r4
   198e4:	mov	r0, r6
   198e8:	bl	117cc <__xstat64@plt>
   198ec:	cmp	r0, #0
   198f0:	bge	19894 <__assert_fail@plt+0x8074>
   198f4:	bl	1167c <__errno_location@plt>
   198f8:	ldr	r1, [pc, #408]	; 19a98 <__assert_fail@plt+0x8278>
   198fc:	mov	r2, #5
   19900:	mov	r4, r0
   19904:	mov	r0, #0
   19908:	ldr	r5, [r4]
   1990c:	bl	114c0 <dcgettext@plt>
   19910:	ldr	r1, [pc, #380]	; 19a94 <__assert_fail@plt+0x8274>
   19914:	mov	r6, r0
   19918:	mov	r0, #4
   1991c:	bl	1f578 <__assert_fail@plt+0xdd58>
   19920:	mov	r1, r5
   19924:	mov	r2, r6
   19928:	mov	r5, #0
   1992c:	mov	r3, r0
   19930:	mov	r0, #0
   19934:	bl	11574 <error@plt>
   19938:	sub	r0, fp, #244	; 0xf4
   1993c:	ldr	r6, [r4]
   19940:	bl	210bc <__assert_fail@plt+0xf89c>
   19944:	cmp	r0, #0
   19948:	bne	19a6c <__assert_fail@plt+0x824c>
   1994c:	sub	r0, fp, #244	; 0xf4
   19950:	bl	210d8 <__assert_fail@plt+0xf8b8>
   19954:	str	r6, [r4]
   19958:	mov	r0, r5
   1995c:	sub	sp, fp, #24
   19960:	pop	{r4, r5, r6, r7, r8, fp, pc}
   19964:	bl	228bc <__assert_fail@plt+0x1109c>
   19968:	mov	r5, r0
   1996c:	bl	1167c <__errno_location@plt>
   19970:	mov	r4, r0
   19974:	b	19938 <__assert_fail@plt+0x8118>
   19978:	sub	r5, fp, #236	; 0xec
   1997c:	mov	r1, r4
   19980:	mov	r2, #104	; 0x68
   19984:	mov	r0, r5
   19988:	bl	11490 <memcpy@plt>
   1998c:	mov	r0, r7
   19990:	bl	114fc <chdir@plt>
   19994:	cmp	r0, #0
   19998:	bge	19884 <__assert_fail@plt+0x8064>
   1999c:	bl	1167c <__errno_location@plt>
   199a0:	mov	r2, #5
   199a4:	ldr	r1, [pc, #240]	; 19a9c <__assert_fail@plt+0x827c>
   199a8:	mov	r5, r6
   199ac:	ldr	r4, [r0]
   199b0:	mov	r0, r6
   199b4:	bl	114c0 <dcgettext@plt>
   199b8:	mov	r1, r7
   199bc:	mov	r8, r0
   199c0:	mov	r0, #4
   199c4:	bl	1f578 <__assert_fail@plt+0xdd58>
   199c8:	mov	r2, r8
   199cc:	mov	r1, r4
   199d0:	mov	r3, r0
   199d4:	mov	r0, r6
   199d8:	bl	11574 <error@plt>
   199dc:	b	19958 <__assert_fail@plt+0x8138>
   199e0:	bl	1167c <__errno_location@plt>
   199e4:	mov	r2, #5
   199e8:	ldr	r1, [pc, #172]	; 19a9c <__assert_fail@plt+0x827c>
   199ec:	mov	r4, r0
   199f0:	b	19904 <__assert_fail@plt+0x80e4>
   199f4:	bl	1167c <__errno_location@plt>
   199f8:	mov	r2, #5
   199fc:	ldr	r1, [pc, #156]	; 19aa0 <__assert_fail@plt+0x8280>
   19a00:	mov	r4, r0
   19a04:	mov	r0, r6
   19a08:	ldr	r5, [r4]
   19a0c:	bl	114c0 <dcgettext@plt>
   19a10:	mov	r1, r7
   19a14:	mov	r8, r0
   19a18:	mov	r0, #4
   19a1c:	bl	1f578 <__assert_fail@plt+0xdd58>
   19a20:	mov	r1, r5
   19a24:	mov	r2, r8
   19a28:	mov	r5, r6
   19a2c:	mov	r3, r0
   19a30:	mov	r0, r6
   19a34:	bl	11574 <error@plt>
   19a38:	b	19938 <__assert_fail@plt+0x8118>
   19a3c:	bl	1167c <__errno_location@plt>
   19a40:	mov	r5, #0
   19a44:	mov	r2, #5
   19a48:	ldr	r1, [pc, #84]	; 19aa4 <__assert_fail@plt+0x8284>
   19a4c:	ldr	r4, [r0]
   19a50:	mov	r0, r5
   19a54:	bl	114c0 <dcgettext@plt>
   19a58:	mov	r1, r4
   19a5c:	mov	r2, r0
   19a60:	mov	r0, r5
   19a64:	bl	11574 <error@plt>
   19a68:	b	19958 <__assert_fail@plt+0x8138>
   19a6c:	mov	r2, #5
   19a70:	ldr	r1, [pc, #48]	; 19aa8 <__assert_fail@plt+0x8288>
   19a74:	mov	r0, #0
   19a78:	ldr	r4, [r4]
   19a7c:	bl	114c0 <dcgettext@plt>
   19a80:	mov	r1, r4
   19a84:	mov	r2, r0
   19a88:	mov	r0, #1
   19a8c:	bl	11574 <error@plt>
   19a90:	andeq	r5, r2, r0, lsr #29
   19a94:	andeq	r6, r2, ip, ror #1
   19a98:	strdeq	r6, [r2], -r0
   19a9c:	andeq	r6, r2, r4, lsr #1
   19aa0:	andeq	r6, r2, r4, asr #1
   19aa4:	andeq	r6, r2, r4, lsl #1
   19aa8:	andeq	r6, r2, r0, lsl #2
   19aac:	push	{r4, r5, r6, r7, r8, lr}
   19ab0:	subs	r7, r1, #0
   19ab4:	sub	sp, sp, #128	; 0x80
   19ab8:	mov	r8, r0
   19abc:	moveq	r4, #128	; 0x80
   19ac0:	beq	19ad4 <__assert_fail@plt+0x82b4>
   19ac4:	cmp	r7, #1024	; 0x400
   19ac8:	addls	r4, r7, #1
   19acc:	ldrhi	r4, [pc, #284]	; 19bf0 <__assert_fail@plt+0x83d0>
   19ad0:	mov	r7, #1
   19ad4:	cmp	r4, #128	; 0x80
   19ad8:	moveq	r0, r7
   19adc:	orrne	r0, r7, #1
   19ae0:	cmp	r0, #0
   19ae4:	moveq	r5, r0
   19ae8:	moveq	r6, sp
   19aec:	bne	19b34 <__assert_fail@plt+0x8314>
   19af0:	mov	r1, r6
   19af4:	mov	r2, r4
   19af8:	mov	r0, r8
   19afc:	bl	11520 <readlink@plt>
   19b00:	subs	r1, r0, #0
   19b04:	mov	r0, r5
   19b08:	blt	19b60 <__assert_fail@plt+0x8340>
   19b0c:	cmp	r4, r1
   19b10:	bhi	19b74 <__assert_fail@plt+0x8354>
   19b14:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   19b18:	cmn	r4, #-1073741823	; 0xc0000001
   19b1c:	lslls	r4, r4, #1
   19b20:	bls	19ad4 <__assert_fail@plt+0x82b4>
   19b24:	cmn	r4, #-2147483646	; 0x80000002
   19b28:	bhi	19bac <__assert_fail@plt+0x838c>
   19b2c:	mvn	r4, #-2147483648	; 0x80000000
   19b30:	b	19ad4 <__assert_fail@plt+0x82b4>
   19b34:	mov	r0, r4
   19b38:	bl	22968 <__assert_fail@plt+0x11148>
   19b3c:	subs	r6, r0, #0
   19b40:	mov	r5, r6
   19b44:	bne	19af0 <__assert_fail@plt+0x82d0>
   19b48:	bl	1167c <__errno_location@plt>
   19b4c:	mov	r3, #12
   19b50:	str	r3, [r0]
   19b54:	mov	r0, r5
   19b58:	add	sp, sp, #128	; 0x80
   19b5c:	pop	{r4, r5, r6, r7, r8, pc}
   19b60:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   19b64:	mov	r5, #0
   19b68:	mov	r0, r5
   19b6c:	add	sp, sp, #128	; 0x80
   19b70:	pop	{r4, r5, r6, r7, r8, pc}
   19b74:	mov	r3, #0
   19b78:	cmp	r5, #0
   19b7c:	strb	r3, [r6, r1]
   19b80:	beq	19bc8 <__assert_fail@plt+0x83a8>
   19b84:	add	r1, r1, #1
   19b88:	cmp	r4, r1
   19b8c:	bls	19b68 <__assert_fail@plt+0x8348>
   19b90:	mov	r0, r5
   19b94:	bl	22994 <__assert_fail@plt+0x11174>
   19b98:	cmp	r0, #0
   19b9c:	movne	r5, r0
   19ba0:	mov	r0, r5
   19ba4:	add	sp, sp, #128	; 0x80
   19ba8:	pop	{r4, r5, r6, r7, r8, pc}
   19bac:	bl	1167c <__errno_location@plt>
   19bb0:	mov	r5, #0
   19bb4:	mov	r3, #12
   19bb8:	str	r3, [r0]
   19bbc:	mov	r0, r5
   19bc0:	add	sp, sp, #128	; 0x80
   19bc4:	pop	{r4, r5, r6, r7, r8, pc}
   19bc8:	add	r4, r1, #1
   19bcc:	mov	r0, r4
   19bd0:	bl	22968 <__assert_fail@plt+0x11148>
   19bd4:	subs	r5, r0, #0
   19bd8:	beq	19b68 <__assert_fail@plt+0x8348>
   19bdc:	mov	r2, r4
   19be0:	mov	r1, r6
   19be4:	bl	11490 <memcpy@plt>
   19be8:	mov	r5, r0
   19bec:	b	19b68 <__assert_fail@plt+0x8348>
   19bf0:	andeq	r0, r0, r1, lsl #8
   19bf4:	mov	r0, #1
   19bf8:	b	1937c <__assert_fail@plt+0x7b5c>
   19bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c00:	mov	r4, r1
   19c04:	sub	sp, sp, #12
   19c08:	mov	r5, r2
   19c0c:	str	r2, [sp, #4]
   19c10:	mov	r7, r3
   19c14:	mov	sl, r0
   19c18:	bl	11640 <strlen@plt>
   19c1c:	ldr	fp, [r4]
   19c20:	cmp	fp, #0
   19c24:	beq	19d38 <__assert_fail@plt+0x8518>
   19c28:	cmp	r5, #0
   19c2c:	mov	r8, r0
   19c30:	mov	r3, r5
   19c34:	beq	19ce0 <__assert_fail@plt+0x84c0>
   19c38:	mov	r2, #0
   19c3c:	mov	r5, r2
   19c40:	mov	r6, r3
   19c44:	mvn	r9, #0
   19c48:	str	r2, [sp]
   19c4c:	mov	r2, r8
   19c50:	mov	r1, sl
   19c54:	mov	r0, fp
   19c58:	bl	117e4 <strncmp@plt>
   19c5c:	cmp	r0, #0
   19c60:	mov	r0, fp
   19c64:	bne	19ca4 <__assert_fail@plt+0x8484>
   19c68:	bl	11640 <strlen@plt>
   19c6c:	ldr	r3, [sp, #4]
   19c70:	mov	r2, r7
   19c74:	mov	r1, r6
   19c78:	cmp	r8, r0
   19c7c:	mla	r0, r7, r9, r3
   19c80:	beq	19cd0 <__assert_fail@plt+0x84b0>
   19c84:	cmn	r9, #1
   19c88:	moveq	r9, r5
   19c8c:	beq	19ca4 <__assert_fail@plt+0x8484>
   19c90:	bl	114a8 <memcmp@plt>
   19c94:	ldr	r3, [sp]
   19c98:	cmp	r0, #0
   19c9c:	movne	r3, #1
   19ca0:	str	r3, [sp]
   19ca4:	ldr	fp, [r4, #4]!
   19ca8:	add	r5, r5, #1
   19cac:	cmp	fp, #0
   19cb0:	add	r6, r6, r7
   19cb4:	bne	19c4c <__assert_fail@plt+0x842c>
   19cb8:	ldr	r3, [sp]
   19cbc:	cmp	r3, #0
   19cc0:	mvnne	r9, #1
   19cc4:	mov	r0, r9
   19cc8:	add	sp, sp, #12
   19ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cd0:	mov	r9, r5
   19cd4:	mov	r0, r9
   19cd8:	add	sp, sp, #12
   19cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ce0:	mov	r6, r5
   19ce4:	mvn	r9, #0
   19ce8:	mov	r2, r8
   19cec:	mov	r1, sl
   19cf0:	mov	r0, fp
   19cf4:	bl	117e4 <strncmp@plt>
   19cf8:	cmp	r0, #0
   19cfc:	mov	r0, fp
   19d00:	bne	19d1c <__assert_fail@plt+0x84fc>
   19d04:	bl	11640 <strlen@plt>
   19d08:	cmp	r8, r0
   19d0c:	beq	19cd0 <__assert_fail@plt+0x84b0>
   19d10:	cmn	r9, #1
   19d14:	moveq	r9, r5
   19d18:	movne	r6, #1
   19d1c:	ldr	fp, [r4, #4]!
   19d20:	add	r5, r5, #1
   19d24:	cmp	fp, #0
   19d28:	bne	19ce8 <__assert_fail@plt+0x84c8>
   19d2c:	str	r6, [sp]
   19d30:	mov	r3, r6
   19d34:	b	19cbc <__assert_fail@plt+0x849c>
   19d38:	mvn	r9, #0
   19d3c:	b	19cc4 <__assert_fail@plt+0x84a4>
   19d40:	push	{r4, r5, r6, lr}
   19d44:	mov	r6, r0
   19d48:	ldr	r0, [r1]
   19d4c:	cmp	r0, #0
   19d50:	beq	19d88 <__assert_fail@plt+0x8568>
   19d54:	mov	r4, r1
   19d58:	mov	r5, #0
   19d5c:	b	19d70 <__assert_fail@plt+0x8550>
   19d60:	ldr	r0, [r4, #4]!
   19d64:	add	r5, r5, #1
   19d68:	cmp	r0, #0
   19d6c:	beq	19d88 <__assert_fail@plt+0x8568>
   19d70:	mov	r1, r6
   19d74:	bl	1143c <strcmp@plt>
   19d78:	cmp	r0, #0
   19d7c:	bne	19d60 <__assert_fail@plt+0x8540>
   19d80:	mov	r0, r5
   19d84:	pop	{r4, r5, r6, pc}
   19d88:	mvn	r0, #0
   19d8c:	pop	{r4, r5, r6, pc}
   19d90:	cmn	r2, #1
   19d94:	push	{r4, r5, r6, lr}
   19d98:	mov	r2, #5
   19d9c:	sub	sp, sp, #8
   19da0:	mov	r4, r1
   19da4:	mov	r5, r0
   19da8:	ldreq	r1, [pc, #76]	; 19dfc <__assert_fail@plt+0x85dc>
   19dac:	ldrne	r1, [pc, #76]	; 19e00 <__assert_fail@plt+0x85e0>
   19db0:	mov	r0, #0
   19db4:	bl	114c0 <dcgettext@plt>
   19db8:	mov	r2, r4
   19dbc:	mov	r1, #8
   19dc0:	mov	r6, r0
   19dc4:	mov	r0, #0
   19dc8:	bl	1f198 <__assert_fail@plt+0xd978>
   19dcc:	mov	r1, r5
   19dd0:	mov	r4, r0
   19dd4:	mov	r0, #1
   19dd8:	bl	20d34 <__assert_fail@plt+0xf514>
   19ddc:	mov	r1, #0
   19de0:	mov	r3, r4
   19de4:	mov	r2, r6
   19de8:	str	r0, [sp]
   19dec:	mov	r0, r1
   19df0:	bl	11574 <error@plt>
   19df4:	add	sp, sp, #8
   19df8:	pop	{r4, r5, r6, pc}
   19dfc:	andeq	r6, r2, r0, asr #2
   19e00:	andeq	r6, r2, ip, asr r1
   19e04:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e08:	mov	r6, r0
   19e0c:	ldr	r9, [pc, #232]	; 19efc <__assert_fail@plt+0x86dc>
   19e10:	mov	r4, r1
   19e14:	mov	r7, r2
   19e18:	ldr	r1, [pc, #224]	; 19f00 <__assert_fail@plt+0x86e0>
   19e1c:	mov	r2, #5
   19e20:	mov	r0, #0
   19e24:	bl	114c0 <dcgettext@plt>
   19e28:	ldr	r1, [r9]
   19e2c:	bl	11400 <fputs_unlocked@plt>
   19e30:	ldr	fp, [r6]
   19e34:	cmp	fp, #0
   19e38:	movne	r8, #0
   19e3c:	movne	r5, r8
   19e40:	movne	sl, #1
   19e44:	bne	19e84 <__assert_fail@plt+0x8664>
   19e48:	b	19ec8 <__assert_fail@plt+0x86a8>
   19e4c:	mov	r0, fp
   19e50:	ldr	r8, [r9]
   19e54:	bl	20ee8 <__assert_fail@plt+0xf6c8>
   19e58:	ldr	r2, [pc, #164]	; 19f04 <__assert_fail@plt+0x86e4>
   19e5c:	mov	r1, sl
   19e60:	mov	r3, r0
   19e64:	mov	r0, r8
   19e68:	bl	116d0 <__fprintf_chk@plt>
   19e6c:	mov	r8, r4
   19e70:	ldr	fp, [r6, #4]!
   19e74:	add	r5, r5, #1
   19e78:	cmp	fp, #0
   19e7c:	add	r4, r4, r7
   19e80:	beq	19ec8 <__assert_fail@plt+0x86a8>
   19e84:	cmp	r5, #0
   19e88:	mov	r1, r4
   19e8c:	mov	r2, r7
   19e90:	mov	r0, r8
   19e94:	beq	19e4c <__assert_fail@plt+0x862c>
   19e98:	bl	114a8 <memcmp@plt>
   19e9c:	cmp	r0, #0
   19ea0:	bne	19e4c <__assert_fail@plt+0x862c>
   19ea4:	mov	r0, fp
   19ea8:	ldr	fp, [r9]
   19eac:	bl	20ee8 <__assert_fail@plt+0xf6c8>
   19eb0:	ldr	r2, [pc, #80]	; 19f08 <__assert_fail@plt+0x86e8>
   19eb4:	mov	r1, sl
   19eb8:	mov	r3, r0
   19ebc:	mov	r0, fp
   19ec0:	bl	116d0 <__fprintf_chk@plt>
   19ec4:	b	19e70 <__assert_fail@plt+0x8650>
   19ec8:	ldr	r0, [r9]
   19ecc:	ldr	r3, [r0, #20]
   19ed0:	ldr	r2, [r0, #24]
   19ed4:	cmp	r3, r2
   19ed8:	bcs	19ef0 <__assert_fail@plt+0x86d0>
   19edc:	add	r1, r3, #1
   19ee0:	mov	r2, #10
   19ee4:	str	r1, [r0, #20]
   19ee8:	strb	r2, [r3]
   19eec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef0:	mov	r1, #10
   19ef4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef8:	b	11724 <__overflow@plt>
   19efc:	andeq	r7, r3, r0, ror #3
   19f00:	andeq	r6, r2, ip, ror r1
   19f04:	muleq	r2, r4, r1
   19f08:	muleq	r2, ip, r1
   19f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f10:	sub	sp, sp, #36	; 0x24
   19f14:	mov	r6, r1
   19f18:	ldrb	ip, [sp, #80]	; 0x50
   19f1c:	str	r0, [sp, #28]
   19f20:	str	r2, [sp, #24]
   19f24:	cmp	ip, #0
   19f28:	str	ip, [sp, #20]
   19f2c:	str	r3, [sp, #12]
   19f30:	ldr	r7, [sp, #72]	; 0x48
   19f34:	bne	19fec <__assert_fail@plt+0x87cc>
   19f38:	ldr	r0, [r2]
   19f3c:	cmp	r0, #0
   19f40:	movne	sl, ip
   19f44:	movne	r4, r2
   19f48:	bne	19fd0 <__assert_fail@plt+0x87b0>
   19f4c:	mov	r2, #5
   19f50:	ldr	r1, [pc, #512]	; 1a158 <__assert_fail@plt+0x8938>
   19f54:	mov	r0, #0
   19f58:	bl	114c0 <dcgettext@plt>
   19f5c:	mov	r4, r0
   19f60:	mov	r2, r6
   19f64:	mov	r1, #8
   19f68:	mov	r0, #0
   19f6c:	bl	1f198 <__assert_fail@plt+0xd978>
   19f70:	ldr	r1, [sp, #28]
   19f74:	mvn	sl, #0
   19f78:	mov	r5, r0
   19f7c:	mov	r0, #1
   19f80:	bl	20d34 <__assert_fail@plt+0xf514>
   19f84:	mov	r1, #0
   19f88:	mov	r3, r5
   19f8c:	mov	r2, r4
   19f90:	str	r0, [sp]
   19f94:	mov	r0, r1
   19f98:	bl	11574 <error@plt>
   19f9c:	ldr	r0, [sp, #24]
   19fa0:	mov	r2, r7
   19fa4:	ldr	r1, [sp, #12]
   19fa8:	bl	19e04 <__assert_fail@plt+0x85e4>
   19fac:	ldr	r3, [sp, #76]	; 0x4c
   19fb0:	blx	r3
   19fb4:	mov	r0, sl
   19fb8:	add	sp, sp, #36	; 0x24
   19fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc0:	ldr	r0, [r4, #4]!
   19fc4:	add	sl, sl, #1
   19fc8:	cmp	r0, #0
   19fcc:	beq	19f4c <__assert_fail@plt+0x872c>
   19fd0:	mov	r1, r6
   19fd4:	bl	1143c <strcmp@plt>
   19fd8:	cmp	r0, #0
   19fdc:	bne	19fc0 <__assert_fail@plt+0x87a0>
   19fe0:	mov	r0, sl
   19fe4:	add	sp, sp, #36	; 0x24
   19fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fec:	mov	r0, r1
   19ff0:	bl	11640 <strlen@plt>
   19ff4:	ldr	r3, [sp, #24]
   19ff8:	ldr	fp, [r3]
   19ffc:	cmp	fp, #0
   1a000:	mov	r9, r0
   1a004:	beq	19f4c <__assert_fail@plt+0x872c>
   1a008:	ldr	r2, [sp, #12]
   1a00c:	cmp	r2, #0
   1a010:	beq	1a0cc <__assert_fail@plt+0x88ac>
   1a014:	mov	r1, #0
   1a018:	mov	r4, r1
   1a01c:	mov	r8, r3
   1a020:	mov	r5, r2
   1a024:	mvn	sl, #0
   1a028:	str	r1, [sp, #16]
   1a02c:	mov	r2, r9
   1a030:	mov	r1, r6
   1a034:	mov	r0, fp
   1a038:	bl	117e4 <strncmp@plt>
   1a03c:	cmp	r0, #0
   1a040:	mov	r0, fp
   1a044:	bne	1a088 <__assert_fail@plt+0x8868>
   1a048:	bl	11640 <strlen@plt>
   1a04c:	ldr	r3, [sp, #12]
   1a050:	mov	r2, r7
   1a054:	mov	r1, r5
   1a058:	cmp	r9, r0
   1a05c:	mla	r0, r7, sl, r3
   1a060:	beq	1a0bc <__assert_fail@plt+0x889c>
   1a064:	cmn	sl, #1
   1a068:	moveq	sl, r4
   1a06c:	beq	1a088 <__assert_fail@plt+0x8868>
   1a070:	bl	114a8 <memcmp@plt>
   1a074:	ldr	r2, [sp, #20]
   1a078:	ldr	r3, [sp, #16]
   1a07c:	cmp	r0, #0
   1a080:	movne	r3, r2
   1a084:	str	r3, [sp, #16]
   1a088:	ldr	fp, [r8, #4]!
   1a08c:	add	r4, r4, #1
   1a090:	cmp	fp, #0
   1a094:	add	r5, r5, r7
   1a098:	bne	1a02c <__assert_fail@plt+0x880c>
   1a09c:	ldr	r3, [sp, #16]
   1a0a0:	cmp	r3, #0
   1a0a4:	bne	1a140 <__assert_fail@plt+0x8920>
   1a0a8:	cmn	sl, #1
   1a0ac:	beq	19f4c <__assert_fail@plt+0x872c>
   1a0b0:	mov	r0, sl
   1a0b4:	add	sp, sp, #36	; 0x24
   1a0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0bc:	mov	sl, r4
   1a0c0:	mov	r0, sl
   1a0c4:	add	sp, sp, #36	; 0x24
   1a0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0cc:	mov	r5, r3
   1a0d0:	ldr	r3, [sp, #12]
   1a0d4:	str	r7, [sp, #72]	; 0x48
   1a0d8:	mov	r7, fp
   1a0dc:	ldr	fp, [sp, #20]
   1a0e0:	mov	r8, r3
   1a0e4:	mvn	sl, #0
   1a0e8:	mov	r4, r3
   1a0ec:	mov	r2, r9
   1a0f0:	mov	r1, r6
   1a0f4:	mov	r0, r7
   1a0f8:	bl	117e4 <strncmp@plt>
   1a0fc:	cmp	r0, #0
   1a100:	mov	r0, r7
   1a104:	bne	1a120 <__assert_fail@plt+0x8900>
   1a108:	bl	11640 <strlen@plt>
   1a10c:	cmp	r9, r0
   1a110:	beq	1a0bc <__assert_fail@plt+0x889c>
   1a114:	cmn	sl, #1
   1a118:	moveq	sl, r4
   1a11c:	movne	r8, fp
   1a120:	ldr	r7, [r5, #4]!
   1a124:	add	r4, r4, #1
   1a128:	cmp	r7, #0
   1a12c:	bne	1a0ec <__assert_fail@plt+0x88cc>
   1a130:	str	r8, [sp, #16]
   1a134:	ldr	r7, [sp, #72]	; 0x48
   1a138:	mov	r3, r8
   1a13c:	b	1a0a0 <__assert_fail@plt+0x8880>
   1a140:	mov	r2, #5
   1a144:	ldr	r1, [pc, #16]	; 1a15c <__assert_fail@plt+0x893c>
   1a148:	mov	r0, #0
   1a14c:	bl	114c0 <dcgettext@plt>
   1a150:	mov	r4, r0
   1a154:	b	19f60 <__assert_fail@plt+0x8740>
   1a158:	andeq	r6, r2, r0, asr #2
   1a15c:	andeq	r6, r2, ip, asr r1
   1a160:	push	{r4, r5, r6, r7, r8, lr}
   1a164:	ldr	r7, [r1]
   1a168:	cmp	r7, #0
   1a16c:	beq	1a1ac <__assert_fail@plt+0x898c>
   1a170:	mov	r6, r3
   1a174:	mov	r8, r0
   1a178:	mov	r4, r2
   1a17c:	mov	r5, r1
   1a180:	b	1a190 <__assert_fail@plt+0x8970>
   1a184:	ldr	r7, [r5, #4]!
   1a188:	cmp	r7, #0
   1a18c:	beq	1a1ac <__assert_fail@plt+0x898c>
   1a190:	mov	r1, r4
   1a194:	mov	r2, r6
   1a198:	mov	r0, r8
   1a19c:	bl	114a8 <memcmp@plt>
   1a1a0:	add	r4, r4, r6
   1a1a4:	cmp	r0, #0
   1a1a8:	bne	1a184 <__assert_fail@plt+0x8964>
   1a1ac:	mov	r0, r7
   1a1b0:	pop	{r4, r5, r6, r7, r8, pc}
   1a1b4:	ldr	r3, [pc, #4]	; 1a1c0 <__assert_fail@plt+0x89a0>
   1a1b8:	str	r0, [r3]
   1a1bc:	bx	lr
   1a1c0:	andeq	r7, r3, ip, ror #4
   1a1c4:	ldr	r3, [pc, #4]	; 1a1d0 <__assert_fail@plt+0x89b0>
   1a1c8:	strb	r0, [r3, #4]
   1a1cc:	bx	lr
   1a1d0:	andeq	r7, r3, ip, ror #4
   1a1d4:	ldr	r3, [pc, #192]	; 1a29c <__assert_fail@plt+0x8a7c>
   1a1d8:	push	{r4, r5, r6, lr}
   1a1dc:	sub	sp, sp, #8
   1a1e0:	ldr	r0, [r3]
   1a1e4:	bl	23720 <__assert_fail@plt+0x11f00>
   1a1e8:	cmp	r0, #0
   1a1ec:	beq	1a210 <__assert_fail@plt+0x89f0>
   1a1f0:	ldr	r4, [pc, #168]	; 1a2a0 <__assert_fail@plt+0x8a80>
   1a1f4:	ldrb	r3, [r4, #4]
   1a1f8:	cmp	r3, #0
   1a1fc:	beq	1a22c <__assert_fail@plt+0x8a0c>
   1a200:	bl	1167c <__errno_location@plt>
   1a204:	ldr	r3, [r0]
   1a208:	cmp	r3, #32
   1a20c:	bne	1a22c <__assert_fail@plt+0x8a0c>
   1a210:	ldr	r3, [pc, #140]	; 1a2a4 <__assert_fail@plt+0x8a84>
   1a214:	ldr	r0, [r3]
   1a218:	bl	23720 <__assert_fail@plt+0x11f00>
   1a21c:	cmp	r0, #0
   1a220:	bne	1a274 <__assert_fail@plt+0x8a54>
   1a224:	add	sp, sp, #8
   1a228:	pop	{r4, r5, r6, pc}
   1a22c:	mov	r2, #5
   1a230:	ldr	r1, [pc, #112]	; 1a2a8 <__assert_fail@plt+0x8a88>
   1a234:	mov	r0, #0
   1a238:	bl	114c0 <dcgettext@plt>
   1a23c:	ldr	r4, [r4]
   1a240:	cmp	r4, #0
   1a244:	mov	r5, r0
   1a248:	beq	1a280 <__assert_fail@plt+0x8a60>
   1a24c:	bl	1167c <__errno_location@plt>
   1a250:	ldr	r6, [r0]
   1a254:	mov	r0, r4
   1a258:	bl	1fc88 <__assert_fail@plt+0xe468>
   1a25c:	mov	r1, r6
   1a260:	str	r5, [sp]
   1a264:	ldr	r2, [pc, #64]	; 1a2ac <__assert_fail@plt+0x8a8c>
   1a268:	mov	r3, r0
   1a26c:	mov	r0, #0
   1a270:	bl	11574 <error@plt>
   1a274:	ldr	r3, [pc, #52]	; 1a2b0 <__assert_fail@plt+0x8a90>
   1a278:	ldr	r0, [r3]
   1a27c:	bl	11484 <_exit@plt>
   1a280:	bl	1167c <__errno_location@plt>
   1a284:	mov	r3, r5
   1a288:	ldr	r2, [pc, #36]	; 1a2b4 <__assert_fail@plt+0x8a94>
   1a28c:	ldr	r1, [r0]
   1a290:	mov	r0, r4
   1a294:	bl	11574 <error@plt>
   1a298:	b	1a274 <__assert_fail@plt+0x8a54>
   1a29c:	andeq	r7, r3, r4, ror #3
   1a2a0:	andeq	r7, r3, ip, ror #4
   1a2a4:	andeq	r7, r3, r0, ror #3
   1a2a8:	andeq	r6, r2, r4, lsr #3
   1a2ac:			; <UNDEFINED> instruction: 0x000261b0
   1a2b0:	andeq	r7, r3, ip, lsl #3
   1a2b4:	andeq	r5, r2, ip, lsr #25
   1a2b8:	push	{r4, lr}
   1a2bc:	bl	1a344 <__assert_fail@plt+0x8b24>
   1a2c0:	cmp	r0, #0
   1a2c4:	popne	{r4, pc}
   1a2c8:	bl	2287c <__assert_fail@plt+0x1105c>
   1a2cc:	push	{r4, r5, r6, lr}
   1a2d0:	mov	r5, r0
   1a2d4:	ldrb	r4, [r0]
   1a2d8:	bl	23348 <__assert_fail@plt+0x11b28>
   1a2dc:	sub	r4, r4, #47	; 0x2f
   1a2e0:	clz	r4, r4
   1a2e4:	lsr	r4, r4, #5
   1a2e8:	sub	r0, r0, r5
   1a2ec:	cmp	r0, r4
   1a2f0:	bls	1a33c <__assert_fail@plt+0x8b1c>
   1a2f4:	sub	r3, r0, #1
   1a2f8:	add	r2, r5, r3
   1a2fc:	ldrb	r1, [r5, r3]
   1a300:	cmp	r1, #47	; 0x2f
   1a304:	beq	1a320 <__assert_fail@plt+0x8b00>
   1a308:	b	1a33c <__assert_fail@plt+0x8b1c>
   1a30c:	ldrb	r1, [r2, #-1]!
   1a310:	sub	r0, r3, #1
   1a314:	cmp	r1, #47	; 0x2f
   1a318:	bne	1a330 <__assert_fail@plt+0x8b10>
   1a31c:	mov	r3, r0
   1a320:	cmp	r4, r3
   1a324:	bne	1a30c <__assert_fail@plt+0x8aec>
   1a328:	mov	r0, r4
   1a32c:	pop	{r4, r5, r6, pc}
   1a330:	mov	r4, r3
   1a334:	mov	r0, r4
   1a338:	pop	{r4, r5, r6, pc}
   1a33c:	mov	r4, r0
   1a340:	b	1a328 <__assert_fail@plt+0x8b08>
   1a344:	push	{r4, r5, r6, r7, r8, lr}
   1a348:	mov	r6, r0
   1a34c:	ldrb	r4, [r0]
   1a350:	bl	23348 <__assert_fail@plt+0x11b28>
   1a354:	sub	r4, r4, #47	; 0x2f
   1a358:	clz	r4, r4
   1a35c:	lsr	r4, r4, #5
   1a360:	sub	r5, r0, r6
   1a364:	cmp	r5, r4
   1a368:	bls	1a424 <__assert_fail@plt+0x8c04>
   1a36c:	sub	r3, r5, #1
   1a370:	add	r2, r6, r3
   1a374:	ldrb	r1, [r6, r3]
   1a378:	cmp	r1, #47	; 0x2f
   1a37c:	beq	1a398 <__assert_fail@plt+0x8b78>
   1a380:	b	1a3f4 <__assert_fail@plt+0x8bd4>
   1a384:	ldrb	r0, [r2, #-1]!
   1a388:	sub	ip, r3, #1
   1a38c:	cmp	r0, #47	; 0x2f
   1a390:	bne	1a3f0 <__assert_fail@plt+0x8bd0>
   1a394:	mov	r3, ip
   1a398:	cmp	r4, r3
   1a39c:	bne	1a384 <__assert_fail@plt+0x8b64>
   1a3a0:	eor	r3, r4, #1
   1a3a4:	and	r3, r3, #1
   1a3a8:	add	r0, r4, #1
   1a3ac:	add	r0, r0, r3
   1a3b0:	uxtb	r5, r3
   1a3b4:	bl	22968 <__assert_fail@plt+0x11148>
   1a3b8:	subs	r7, r0, #0
   1a3bc:	beq	1a41c <__assert_fail@plt+0x8bfc>
   1a3c0:	mov	r1, r6
   1a3c4:	mov	r2, r4
   1a3c8:	bl	11490 <memcpy@plt>
   1a3cc:	cmp	r5, #0
   1a3d0:	movne	r5, #1
   1a3d4:	moveq	r5, r4
   1a3d8:	movne	r3, #46	; 0x2e
   1a3dc:	strbne	r3, [r7]
   1a3e0:	mov	r3, #0
   1a3e4:	strb	r3, [r7, r5]
   1a3e8:	mov	r0, r7
   1a3ec:	pop	{r4, r5, r6, r7, r8, pc}
   1a3f0:	mov	r5, r3
   1a3f4:	add	r0, r5, #1
   1a3f8:	cmp	r5, #0
   1a3fc:	addeq	r0, r0, #1
   1a400:	bl	22968 <__assert_fail@plt+0x11148>
   1a404:	subs	r7, r0, #0
   1a408:	beq	1a41c <__assert_fail@plt+0x8bfc>
   1a40c:	mov	r1, r6
   1a410:	mov	r2, r5
   1a414:	bl	11490 <memcpy@plt>
   1a418:	b	1a3e0 <__assert_fail@plt+0x8bc0>
   1a41c:	mov	r7, #0
   1a420:	b	1a3e8 <__assert_fail@plt+0x8bc8>
   1a424:	mov	r4, r5
   1a428:	b	1a3a0 <__assert_fail@plt+0x8b80>
   1a42c:	ldr	r3, [r0, #16]
   1a430:	and	r3, r3, #61440	; 0xf000
   1a434:	cmp	r3, #32768	; 0x8000
   1a438:	beq	1a47c <__assert_fail@plt+0x8c5c>
   1a43c:	cmp	r3, #16384	; 0x4000
   1a440:	mov	r2, #5
   1a444:	beq	1a4b0 <__assert_fail@plt+0x8c90>
   1a448:	cmp	r3, #40960	; 0xa000
   1a44c:	beq	1a4bc <__assert_fail@plt+0x8c9c>
   1a450:	cmp	r3, #24576	; 0x6000
   1a454:	beq	1a4c8 <__assert_fail@plt+0x8ca8>
   1a458:	cmp	r3, #8192	; 0x2000
   1a45c:	beq	1a4d4 <__assert_fail@plt+0x8cb4>
   1a460:	cmp	r3, #4096	; 0x1000
   1a464:	beq	1a4e0 <__assert_fail@plt+0x8cc0>
   1a468:	cmp	r3, #49152	; 0xc000
   1a46c:	beq	1a4a4 <__assert_fail@plt+0x8c84>
   1a470:	ldr	r1, [pc, #116]	; 1a4ec <__assert_fail@plt+0x8ccc>
   1a474:	mov	r0, #0
   1a478:	b	114c0 <dcgettext@plt>
   1a47c:	ldrd	r2, [r0, #48]	; 0x30
   1a480:	orrs	r3, r2, r3
   1a484:	mov	r2, #5
   1a488:	bne	1a498 <__assert_fail@plt+0x8c78>
   1a48c:	ldr	r1, [pc, #92]	; 1a4f0 <__assert_fail@plt+0x8cd0>
   1a490:	mov	r0, #0
   1a494:	b	114c0 <dcgettext@plt>
   1a498:	ldr	r1, [pc, #84]	; 1a4f4 <__assert_fail@plt+0x8cd4>
   1a49c:	mov	r0, #0
   1a4a0:	b	114c0 <dcgettext@plt>
   1a4a4:	ldr	r1, [pc, #76]	; 1a4f8 <__assert_fail@plt+0x8cd8>
   1a4a8:	mov	r0, #0
   1a4ac:	b	114c0 <dcgettext@plt>
   1a4b0:	ldr	r1, [pc, #68]	; 1a4fc <__assert_fail@plt+0x8cdc>
   1a4b4:	mov	r0, #0
   1a4b8:	b	114c0 <dcgettext@plt>
   1a4bc:	ldr	r1, [pc, #60]	; 1a500 <__assert_fail@plt+0x8ce0>
   1a4c0:	mov	r0, #0
   1a4c4:	b	114c0 <dcgettext@plt>
   1a4c8:	ldr	r1, [pc, #52]	; 1a504 <__assert_fail@plt+0x8ce4>
   1a4cc:	mov	r0, #0
   1a4d0:	b	114c0 <dcgettext@plt>
   1a4d4:	ldr	r1, [pc, #44]	; 1a508 <__assert_fail@plt+0x8ce8>
   1a4d8:	mov	r0, #0
   1a4dc:	b	114c0 <dcgettext@plt>
   1a4e0:	ldr	r1, [pc, #36]	; 1a50c <__assert_fail@plt+0x8cec>
   1a4e4:	mov	r0, #0
   1a4e8:	b	114c0 <dcgettext@plt>
   1a4ec:	andeq	r6, r2, r8, lsr #4
   1a4f0:			; <UNDEFINED> instruction: 0x000261b8
   1a4f4:	andeq	r6, r2, ip, asr #3
   1a4f8:	andeq	r6, r2, r0, lsr #4
   1a4fc:	andeq	r6, r2, r4, lsr #2
   1a500:	ldrdeq	r6, [r2], -ip
   1a504:	andeq	r6, r2, ip, ror #3
   1a508:	andeq	r6, r2, r0, lsl #4
   1a50c:	andeq	r6, r2, r8, lsl r2
   1a510:	and	r3, r0, #61440	; 0xf000
   1a514:	cmp	r3, #32768	; 0x8000
   1a518:	moveq	r3, #45	; 0x2d
   1a51c:	beq	1a568 <__assert_fail@plt+0x8d48>
   1a520:	cmp	r3, #16384	; 0x4000
   1a524:	moveq	r3, #100	; 0x64
   1a528:	beq	1a568 <__assert_fail@plt+0x8d48>
   1a52c:	cmp	r3, #24576	; 0x6000
   1a530:	moveq	r3, #98	; 0x62
   1a534:	beq	1a568 <__assert_fail@plt+0x8d48>
   1a538:	cmp	r3, #8192	; 0x2000
   1a53c:	moveq	r3, #99	; 0x63
   1a540:	beq	1a568 <__assert_fail@plt+0x8d48>
   1a544:	cmp	r3, #40960	; 0xa000
   1a548:	moveq	r3, #108	; 0x6c
   1a54c:	beq	1a568 <__assert_fail@plt+0x8d48>
   1a550:	cmp	r3, #4096	; 0x1000
   1a554:	moveq	r3, #112	; 0x70
   1a558:	beq	1a568 <__assert_fail@plt+0x8d48>
   1a55c:	cmp	r3, #49152	; 0xc000
   1a560:	moveq	r3, #115	; 0x73
   1a564:	movne	r3, #63	; 0x3f
   1a568:	tst	r0, #256	; 0x100
   1a56c:	movne	ip, #114	; 0x72
   1a570:	moveq	ip, #45	; 0x2d
   1a574:	tst	r0, #128	; 0x80
   1a578:	movne	r2, #119	; 0x77
   1a57c:	moveq	r2, #45	; 0x2d
   1a580:	tst	r0, #2048	; 0x800
   1a584:	strb	r3, [r1]
   1a588:	strb	ip, [r1, #1]
   1a58c:	strb	r2, [r1, #2]
   1a590:	beq	1a628 <__assert_fail@plt+0x8e08>
   1a594:	tst	r0, #64	; 0x40
   1a598:	movne	ip, #115	; 0x73
   1a59c:	moveq	ip, #83	; 0x53
   1a5a0:	tst	r0, #32
   1a5a4:	movne	r2, #114	; 0x72
   1a5a8:	moveq	r2, #45	; 0x2d
   1a5ac:	tst	r0, #16
   1a5b0:	movne	r3, #119	; 0x77
   1a5b4:	moveq	r3, #45	; 0x2d
   1a5b8:	tst	r0, #1024	; 0x400
   1a5bc:	strb	ip, [r1, #3]
   1a5c0:	strb	r2, [r1, #4]
   1a5c4:	strb	r3, [r1, #5]
   1a5c8:	beq	1a648 <__assert_fail@plt+0x8e28>
   1a5cc:	tst	r0, #8
   1a5d0:	movne	ip, #115	; 0x73
   1a5d4:	moveq	ip, #83	; 0x53
   1a5d8:	tst	r0, #4
   1a5dc:	movne	r2, #114	; 0x72
   1a5e0:	moveq	r2, #45	; 0x2d
   1a5e4:	tst	r0, #2
   1a5e8:	movne	r3, #119	; 0x77
   1a5ec:	moveq	r3, #45	; 0x2d
   1a5f0:	tst	r0, #512	; 0x200
   1a5f4:	strb	ip, [r1, #6]
   1a5f8:	strb	r2, [r1, #7]
   1a5fc:	strb	r3, [r1, #8]
   1a600:	beq	1a638 <__assert_fail@plt+0x8e18>
   1a604:	tst	r0, #1
   1a608:	movne	r0, #116	; 0x74
   1a60c:	moveq	r0, #84	; 0x54
   1a610:	mov	r2, #32
   1a614:	mov	r3, #0
   1a618:	strb	r0, [r1, #9]
   1a61c:	strb	r2, [r1, #10]
   1a620:	strb	r3, [r1, #11]
   1a624:	bx	lr
   1a628:	tst	r0, #64	; 0x40
   1a62c:	movne	ip, #120	; 0x78
   1a630:	moveq	ip, #45	; 0x2d
   1a634:	b	1a5a0 <__assert_fail@plt+0x8d80>
   1a638:	tst	r0, #1
   1a63c:	movne	r0, #120	; 0x78
   1a640:	moveq	r0, #45	; 0x2d
   1a644:	b	1a610 <__assert_fail@plt+0x8df0>
   1a648:	tst	r0, #8
   1a64c:	movne	ip, #120	; 0x78
   1a650:	moveq	ip, #45	; 0x2d
   1a654:	b	1a5d8 <__assert_fail@plt+0x8db8>
   1a658:	ldr	r3, [r0, #16]
   1a65c:	and	r2, r3, #61440	; 0xf000
   1a660:	cmp	r2, #32768	; 0x8000
   1a664:	moveq	r2, #45	; 0x2d
   1a668:	beq	1a6b4 <__assert_fail@plt+0x8e94>
   1a66c:	cmp	r2, #16384	; 0x4000
   1a670:	moveq	r2, #100	; 0x64
   1a674:	beq	1a6b4 <__assert_fail@plt+0x8e94>
   1a678:	cmp	r2, #24576	; 0x6000
   1a67c:	moveq	r2, #98	; 0x62
   1a680:	beq	1a6b4 <__assert_fail@plt+0x8e94>
   1a684:	cmp	r2, #8192	; 0x2000
   1a688:	moveq	r2, #99	; 0x63
   1a68c:	beq	1a6b4 <__assert_fail@plt+0x8e94>
   1a690:	cmp	r2, #40960	; 0xa000
   1a694:	moveq	r2, #108	; 0x6c
   1a698:	beq	1a6b4 <__assert_fail@plt+0x8e94>
   1a69c:	cmp	r2, #4096	; 0x1000
   1a6a0:	moveq	r2, #112	; 0x70
   1a6a4:	beq	1a6b4 <__assert_fail@plt+0x8e94>
   1a6a8:	cmp	r2, #49152	; 0xc000
   1a6ac:	moveq	r2, #115	; 0x73
   1a6b0:	movne	r2, #63	; 0x3f
   1a6b4:	tst	r3, #256	; 0x100
   1a6b8:	movne	ip, #114	; 0x72
   1a6bc:	moveq	ip, #45	; 0x2d
   1a6c0:	tst	r3, #128	; 0x80
   1a6c4:	movne	r0, #119	; 0x77
   1a6c8:	moveq	r0, #45	; 0x2d
   1a6cc:	tst	r3, #2048	; 0x800
   1a6d0:	strb	r2, [r1]
   1a6d4:	strb	ip, [r1, #1]
   1a6d8:	strb	r0, [r1, #2]
   1a6dc:	beq	1a774 <__assert_fail@plt+0x8f54>
   1a6e0:	tst	r3, #64	; 0x40
   1a6e4:	movne	ip, #115	; 0x73
   1a6e8:	moveq	ip, #83	; 0x53
   1a6ec:	tst	r3, #32
   1a6f0:	movne	r0, #114	; 0x72
   1a6f4:	moveq	r0, #45	; 0x2d
   1a6f8:	tst	r3, #16
   1a6fc:	movne	r2, #119	; 0x77
   1a700:	moveq	r2, #45	; 0x2d
   1a704:	tst	r3, #1024	; 0x400
   1a708:	strb	ip, [r1, #3]
   1a70c:	strb	r0, [r1, #4]
   1a710:	strb	r2, [r1, #5]
   1a714:	beq	1a794 <__assert_fail@plt+0x8f74>
   1a718:	tst	r3, #8
   1a71c:	movne	ip, #115	; 0x73
   1a720:	moveq	ip, #83	; 0x53
   1a724:	tst	r3, #4
   1a728:	movne	r0, #114	; 0x72
   1a72c:	moveq	r0, #45	; 0x2d
   1a730:	tst	r3, #2
   1a734:	movne	r2, #119	; 0x77
   1a738:	moveq	r2, #45	; 0x2d
   1a73c:	tst	r3, #512	; 0x200
   1a740:	strb	ip, [r1, #6]
   1a744:	strb	r0, [r1, #7]
   1a748:	strb	r2, [r1, #8]
   1a74c:	beq	1a784 <__assert_fail@plt+0x8f64>
   1a750:	tst	r3, #1
   1a754:	movne	r0, #116	; 0x74
   1a758:	moveq	r0, #84	; 0x54
   1a75c:	mov	r2, #32
   1a760:	mov	r3, #0
   1a764:	strb	r0, [r1, #9]
   1a768:	strb	r2, [r1, #10]
   1a76c:	strb	r3, [r1, #11]
   1a770:	bx	lr
   1a774:	tst	r3, #64	; 0x40
   1a778:	movne	ip, #120	; 0x78
   1a77c:	moveq	ip, #45	; 0x2d
   1a780:	b	1a6ec <__assert_fail@plt+0x8ecc>
   1a784:	tst	r3, #1
   1a788:	movne	r0, #120	; 0x78
   1a78c:	moveq	r0, #45	; 0x2d
   1a790:	b	1a75c <__assert_fail@plt+0x8f3c>
   1a794:	tst	r3, #8
   1a798:	movne	ip, #120	; 0x78
   1a79c:	moveq	ip, #45	; 0x2d
   1a7a0:	b	1a724 <__assert_fail@plt+0x8f04>
   1a7a4:	push	{r4, r5, lr}
   1a7a8:	sub	sp, sp, #12
   1a7ac:	mov	r5, r0
   1a7b0:	bl	1167c <__errno_location@plt>
   1a7b4:	mov	r2, #0
   1a7b8:	mov	r4, r0
   1a7bc:	ldr	r3, [r0]
   1a7c0:	str	r2, [r4]
   1a7c4:	mov	r0, r5
   1a7c8:	str	r3, [sp]
   1a7cc:	str	r3, [sp, #4]
   1a7d0:	bl	11478 <free@plt>
   1a7d4:	ldr	r3, [r4]
   1a7d8:	add	r2, sp, #8
   1a7dc:	cmp	r3, #0
   1a7e0:	moveq	r3, #4
   1a7e4:	movne	r3, #0
   1a7e8:	add	r3, r2, r3
   1a7ec:	ldr	r3, [r3, #-8]
   1a7f0:	str	r3, [r4]
   1a7f4:	add	sp, sp, #12
   1a7f8:	pop	{r4, r5, pc}
   1a7fc:	cmp	r0, #0
   1a800:	sbcs	r3, r1, #0
   1a804:	mov	r3, #0
   1a808:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a80c:	mov	r4, r0
   1a810:	mov	r5, r1
   1a814:	strb	r3, [r2, #20]
   1a818:	add	r6, r2, #20
   1a81c:	mov	r8, #10
   1a820:	mov	r9, #0
   1a824:	blt	1a874 <__assert_fail@plt+0x9054>
   1a828:	mov	r0, r4
   1a82c:	mov	r1, r5
   1a830:	mov	r2, r8
   1a834:	mov	r3, r9
   1a838:	bl	2430c <__assert_fail@plt+0x12aec>
   1a83c:	mov	r0, r4
   1a840:	mov	r1, r5
   1a844:	mov	r3, r9
   1a848:	add	r2, r2, #48	; 0x30
   1a84c:	strb	r2, [r6, #-1]!
   1a850:	mov	r2, r8
   1a854:	bl	2430c <__assert_fail@plt+0x12aec>
   1a858:	mov	r4, r0
   1a85c:	mov	r5, r1
   1a860:	orrs	r3, r4, r5
   1a864:	bne	1a828 <__assert_fail@plt+0x9008>
   1a868:	mov	r0, r6
   1a86c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a870:	mov	r6, r7
   1a874:	mov	r0, r4
   1a878:	mov	r1, r5
   1a87c:	mov	r2, r8
   1a880:	mov	r3, r9
   1a884:	bl	2430c <__assert_fail@plt+0x12aec>
   1a888:	mov	r0, r4
   1a88c:	mov	r1, r5
   1a890:	mov	r3, r9
   1a894:	sub	r7, r6, #1
   1a898:	rsb	r2, r2, #48	; 0x30
   1a89c:	strb	r2, [r6, #-1]
   1a8a0:	mov	r2, r8
   1a8a4:	bl	2430c <__assert_fail@plt+0x12aec>
   1a8a8:	mov	r4, r0
   1a8ac:	mov	r5, r1
   1a8b0:	orrs	r3, r4, r5
   1a8b4:	bne	1a870 <__assert_fail@plt+0x9050>
   1a8b8:	mov	r3, #45	; 0x2d
   1a8bc:	sub	r6, r6, #2
   1a8c0:	strb	r3, [r7, #-1]
   1a8c4:	mov	r0, r6
   1a8c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8cc:	andeq	r0, r0, r0
   1a8d0:	push	{r4, r5, r6, r7, r8, lr}
   1a8d4:	mov	r4, r0
   1a8d8:	bl	11640 <strlen@plt>
   1a8dc:	adds	r0, r0, #1
   1a8e0:	popeq	{r4, r5, r6, r7, r8, pc}
   1a8e4:	mov	r2, r4
   1a8e8:	mov	r3, #0
   1a8ec:	b	1a904 <__assert_fail@plt+0x90e4>
   1a8f0:	mov	r3, ip
   1a8f4:	strb	r1, [r2]
   1a8f8:	cmp	r0, r3
   1a8fc:	add	r2, r2, #1
   1a900:	bls	1a974 <__assert_fail@plt+0x9154>
   1a904:	ldrb	r1, [r4, r3]
   1a908:	add	ip, r3, #1
   1a90c:	cmp	r1, #92	; 0x5c
   1a910:	bne	1a8f0 <__assert_fail@plt+0x90d0>
   1a914:	add	lr, r3, #4
   1a918:	cmp	r0, lr
   1a91c:	bls	1a8f0 <__assert_fail@plt+0x90d0>
   1a920:	ldrb	r5, [r4, ip]
   1a924:	add	r3, r4, r3
   1a928:	sub	r5, r5, #48	; 0x30
   1a92c:	uxtb	r6, r5
   1a930:	cmp	r6, #3
   1a934:	bhi	1a8f0 <__assert_fail@plt+0x90d0>
   1a938:	ldrb	r6, [r3, #2]
   1a93c:	sub	r6, r6, #48	; 0x30
   1a940:	uxtb	r7, r6
   1a944:	cmp	r7, #7
   1a948:	bhi	1a8f0 <__assert_fail@plt+0x90d0>
   1a94c:	ldrb	r7, [r3, #3]
   1a950:	mov	r3, lr
   1a954:	add	r5, r6, r5, lsl #3
   1a958:	sub	lr, r7, #48	; 0x30
   1a95c:	uxtb	lr, lr
   1a960:	cmp	lr, #7
   1a964:	add	r5, lr, r5, lsl #3
   1a968:	strbls	r5, [r2]
   1a96c:	bls	1a8f8 <__assert_fail@plt+0x90d8>
   1a970:	b	1a8f0 <__assert_fail@plt+0x90d0>
   1a974:	pop	{r4, r5, r6, r7, r8, pc}
   1a978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a97c:	sub	sp, sp, #68	; 0x44
   1a980:	ldr	r1, [pc, #1312]	; 1aea8 <__assert_fail@plt+0x9688>
   1a984:	ldr	r0, [pc, #1312]	; 1aeac <__assert_fail@plt+0x968c>
   1a988:	bl	1179c <fopen64@plt>
   1a98c:	subs	r7, r0, #0
   1a990:	beq	1af38 <__assert_fail@plt+0x9718>
   1a994:	add	sl, sp, #40	; 0x28
   1a998:	ldr	r9, [pc, #1296]	; 1aeb0 <__assert_fail@plt+0x9690>
   1a99c:	mov	r5, sl
   1a9a0:	mov	r3, #0
   1a9a4:	str	r3, [sp, #44]	; 0x2c
   1a9a8:	str	r3, [sp, #48]	; 0x30
   1a9ac:	mov	r3, r7
   1a9b0:	mov	r2, #10
   1a9b4:	add	r1, sp, #48	; 0x30
   1a9b8:	add	r0, sp, #44	; 0x2c
   1a9bc:	bl	11424 <__getdelim@plt>
   1a9c0:	cmn	r0, #1
   1a9c4:	beq	1ac14 <__assert_fail@plt+0x93f4>
   1a9c8:	add	r3, sp, #60	; 0x3c
   1a9cc:	str	r3, [sp]
   1a9d0:	ldr	r0, [sp, #44]	; 0x2c
   1a9d4:	add	r3, sp, #56	; 0x38
   1a9d8:	add	r2, sp, #52	; 0x34
   1a9dc:	mov	r1, r9
   1a9e0:	bl	11760 <sscanf@plt>
   1a9e4:	sub	r0, r0, #2
   1a9e8:	cmp	r0, #1
   1a9ec:	bhi	1a9ac <__assert_fail@plt+0x918c>
   1a9f0:	ldr	r3, [sp, #60]	; 0x3c
   1a9f4:	ldr	sl, [sp, #44]	; 0x2c
   1a9f8:	mov	r1, #32
   1a9fc:	add	sl, sl, r3
   1aa00:	mov	r0, sl
   1aa04:	bl	1164c <strchr@plt>
   1aa08:	subs	r6, r0, #0
   1aa0c:	beq	1a9ac <__assert_fail@plt+0x918c>
   1aa10:	mov	r8, #0
   1aa14:	strb	r8, [r6], #1
   1aa18:	mov	r1, #32
   1aa1c:	mov	r0, r6
   1aa20:	bl	1164c <strchr@plt>
   1aa24:	cmp	r0, #0
   1aa28:	beq	1a9ac <__assert_fail@plt+0x918c>
   1aa2c:	ldr	r1, [pc, #1152]	; 1aeb4 <__assert_fail@plt+0x9694>
   1aa30:	strb	r8, [r0], #1
   1aa34:	bl	22e9c <__assert_fail@plt+0x1167c>
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1a9ac <__assert_fail@plt+0x918c>
   1aa40:	add	fp, r0, #3
   1aa44:	mov	r0, fp
   1aa48:	mov	r1, #32
   1aa4c:	bl	1164c <strchr@plt>
   1aa50:	subs	r3, r0, #0
   1aa54:	beq	1a9ac <__assert_fail@plt+0x918c>
   1aa58:	strb	r8, [r3], #1
   1aa5c:	mov	r1, #32
   1aa60:	mov	r0, r3
   1aa64:	str	r3, [sp, #32]
   1aa68:	bl	1164c <strchr@plt>
   1aa6c:	cmp	r0, #0
   1aa70:	beq	1a9ac <__assert_fail@plt+0x918c>
   1aa74:	ldr	r3, [sp, #32]
   1aa78:	strb	r8, [r0]
   1aa7c:	mov	r0, r3
   1aa80:	bl	1a8d0 <__assert_fail@plt+0x90b0>
   1aa84:	mov	r0, r6
   1aa88:	bl	1a8d0 <__assert_fail@plt+0x90b0>
   1aa8c:	mov	r0, sl
   1aa90:	bl	1a8d0 <__assert_fail@plt+0x90b0>
   1aa94:	mov	r0, fp
   1aa98:	bl	1a8d0 <__assert_fail@plt+0x90b0>
   1aa9c:	mov	r0, #32
   1aaa0:	bl	22234 <__assert_fail@plt+0x10a14>
   1aaa4:	ldr	r3, [sp, #32]
   1aaa8:	mov	r4, r0
   1aaac:	mov	r0, r3
   1aab0:	bl	22844 <__assert_fail@plt+0x11024>
   1aab4:	str	r8, [sp, #12]
   1aab8:	str	r8, [sp, #20]
   1aabc:	str	r0, [r4]
   1aac0:	mov	r0, r6
   1aac4:	bl	22844 <__assert_fail@plt+0x11024>
   1aac8:	str	r0, [r4, #4]
   1aacc:	mov	r0, sl
   1aad0:	bl	22844 <__assert_fail@plt+0x11024>
   1aad4:	ldr	sl, [pc, #988]	; 1aeb8 <__assert_fail@plt+0x9698>
   1aad8:	str	r0, [r4, #8]
   1aadc:	mov	r0, fp
   1aae0:	bl	22844 <__assert_fail@plt+0x11024>
   1aae4:	ldr	r3, [sp, #52]	; 0x34
   1aae8:	mov	fp, #0
   1aaec:	str	r3, [sp, #28]
   1aaf0:	lsr	r2, r3, #24
   1aaf4:	lsl	r3, r3, #8
   1aaf8:	str	r2, [sp, #12]
   1aafc:	str	r3, [sp, #8]
   1ab00:	ldrd	r2, [sp, #8]
   1ab04:	str	r8, [sp, #24]
   1ab08:	ldr	r1, [sp, #56]	; 0x38
   1ab0c:	and	r2, r2, sl
   1ab10:	and	r3, r3, fp
   1ab14:	ldr	fp, [pc, #928]	; 1aebc <__assert_fail@plt+0x969c>
   1ab18:	strd	r2, [sp, #32]
   1ab1c:	ldrd	r2, [sp, #24]
   1ab20:	mov	sl, #0
   1ab24:	lsr	ip, r1, #20
   1ab28:	and	sl, sl, r2
   1ab2c:	and	fp, fp, r3
   1ab30:	mov	r2, sl
   1ab34:	mov	r3, fp
   1ab38:	ldrd	sl, [sp, #32]
   1ab3c:	str	ip, [sp, #20]
   1ab40:	ldrb	ip, [r4, #24]
   1ab44:	orr	sl, sl, r2
   1ab48:	orr	fp, fp, r3
   1ab4c:	lsl	r3, r1, #12
   1ab50:	uxtb	r1, r1
   1ab54:	orr	sl, sl, r1
   1ab58:	str	r3, [sp, #16]
   1ab5c:	strd	sl, [sp, #32]
   1ab60:	add	r3, pc, #824	; 0x338
   1ab64:	ldrd	r2, [r3]
   1ab68:	ldrd	sl, [sp, #16]
   1ab6c:	orr	ip, ip, #4
   1ab70:	strb	ip, [r4, #24]
   1ab74:	and	sl, sl, r2
   1ab78:	and	fp, fp, r3
   1ab7c:	mov	r2, sl
   1ab80:	mov	r3, fp
   1ab84:	ldrd	sl, [sp, #32]
   1ab88:	ldr	r1, [pc, #828]	; 1aecc <__assert_fail@plt+0x96ac>
   1ab8c:	str	r0, [r4, #12]
   1ab90:	orr	sl, sl, r2
   1ab94:	orr	fp, fp, r3
   1ab98:	mov	r2, sl
   1ab9c:	mov	r3, fp
   1aba0:	mov	r6, r0
   1aba4:	strd	r2, [r4, #16]
   1aba8:	bl	1143c <strcmp@plt>
   1abac:	cmp	r0, r8
   1abb0:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1abb4:	ldr	r1, [pc, #788]	; 1aed0 <__assert_fail@plt+0x96b0>
   1abb8:	mov	r0, r6
   1abbc:	bl	1143c <strcmp@plt>
   1abc0:	cmp	r0, r8
   1abc4:	bne	1ac50 <__assert_fail@plt+0x9430>
   1abc8:	mov	r0, #1
   1abcc:	ldrb	r3, [r4, #24]
   1abd0:	ldr	r8, [r4]
   1abd4:	mov	r1, #58	; 0x3a
   1abd8:	bic	r3, r3, #1
   1abdc:	orr	r3, r0, r3
   1abe0:	strb	r3, [r4, #24]
   1abe4:	mov	r0, r8
   1abe8:	bl	1164c <strchr@plt>
   1abec:	cmp	r0, #0
   1abf0:	beq	1ad44 <__assert_fail@plt+0x9524>
   1abf4:	mov	r3, #1
   1abf8:	ldrb	r0, [r4, #24]
   1abfc:	bic	r0, r0, #2
   1ac00:	orr	r0, r0, r3, lsl #1
   1ac04:	strb	r0, [r4, #24]
   1ac08:	str	r4, [r5]
   1ac0c:	add	r5, r4, #28
   1ac10:	b	1a9ac <__assert_fail@plt+0x918c>
   1ac14:	ldr	r0, [sp, #44]	; 0x2c
   1ac18:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ac1c:	ldr	r3, [r7]
   1ac20:	mov	sl, r5
   1ac24:	tst	r3, #32
   1ac28:	bne	1ae1c <__assert_fail@plt+0x95fc>
   1ac2c:	mov	r0, r7
   1ac30:	bl	2379c <__assert_fail@plt+0x11f7c>
   1ac34:	cmn	r0, #1
   1ac38:	beq	1b21c <__assert_fail@plt+0x99fc>
   1ac3c:	mov	r3, #0
   1ac40:	str	r3, [sl]
   1ac44:	ldr	r0, [sp, #40]	; 0x28
   1ac48:	add	sp, sp, #68	; 0x44
   1ac4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac50:	ldr	r1, [pc, #636]	; 1aed4 <__assert_fail@plt+0x96b4>
   1ac54:	mov	r0, r6
   1ac58:	bl	1143c <strcmp@plt>
   1ac5c:	cmp	r0, r8
   1ac60:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1ac64:	ldr	r1, [pc, #620]	; 1aed8 <__assert_fail@plt+0x96b8>
   1ac68:	mov	r0, r6
   1ac6c:	bl	1143c <strcmp@plt>
   1ac70:	cmp	r0, r8
   1ac74:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1ac78:	ldr	r1, [pc, #604]	; 1aedc <__assert_fail@plt+0x96bc>
   1ac7c:	mov	r0, r6
   1ac80:	bl	1143c <strcmp@plt>
   1ac84:	cmp	r0, r8
   1ac88:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1ac8c:	ldr	r1, [pc, #588]	; 1aee0 <__assert_fail@plt+0x96c0>
   1ac90:	mov	r0, r6
   1ac94:	bl	1143c <strcmp@plt>
   1ac98:	cmp	r0, r8
   1ac9c:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1aca0:	ldr	r1, [pc, #572]	; 1aee4 <__assert_fail@plt+0x96c4>
   1aca4:	mov	r0, r6
   1aca8:	bl	1143c <strcmp@plt>
   1acac:	cmp	r0, r8
   1acb0:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1acb4:	ldr	r1, [pc, #556]	; 1aee8 <__assert_fail@plt+0x96c8>
   1acb8:	mov	r0, r6
   1acbc:	bl	1143c <strcmp@plt>
   1acc0:	cmp	r0, r8
   1acc4:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1acc8:	ldr	r1, [pc, #540]	; 1aeec <__assert_fail@plt+0x96cc>
   1accc:	mov	r0, r6
   1acd0:	bl	1143c <strcmp@plt>
   1acd4:	cmp	r0, r8
   1acd8:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1acdc:	ldr	r1, [pc, #524]	; 1aef0 <__assert_fail@plt+0x96d0>
   1ace0:	mov	r0, r6
   1ace4:	bl	1143c <strcmp@plt>
   1ace8:	cmp	r0, r8
   1acec:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1acf0:	ldr	r1, [pc, #508]	; 1aef4 <__assert_fail@plt+0x96d4>
   1acf4:	mov	r0, r6
   1acf8:	bl	1143c <strcmp@plt>
   1acfc:	cmp	r0, r8
   1ad00:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1ad04:	ldr	r1, [pc, #492]	; 1aef8 <__assert_fail@plt+0x96d8>
   1ad08:	mov	r0, r6
   1ad0c:	bl	1143c <strcmp@plt>
   1ad10:	cmp	r0, r8
   1ad14:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1ad18:	ldr	r1, [pc, #476]	; 1aefc <__assert_fail@plt+0x96dc>
   1ad1c:	mov	r0, r6
   1ad20:	bl	1143c <strcmp@plt>
   1ad24:	cmp	r0, r8
   1ad28:	beq	1abc8 <__assert_fail@plt+0x93a8>
   1ad2c:	ldr	r1, [pc, #460]	; 1af00 <__assert_fail@plt+0x96e0>
   1ad30:	mov	r0, r6
   1ad34:	bl	1143c <strcmp@plt>
   1ad38:	clz	r0, r0
   1ad3c:	lsr	r0, r0, #5
   1ad40:	b	1abcc <__assert_fail@plt+0x93ac>
   1ad44:	ldrb	r3, [r8]
   1ad48:	cmp	r3, #47	; 0x2f
   1ad4c:	beq	1b22c <__assert_fail@plt+0x9a0c>
   1ad50:	ldr	r1, [pc, #428]	; 1af04 <__assert_fail@plt+0x96e4>
   1ad54:	mov	r0, r6
   1ad58:	bl	1143c <strcmp@plt>
   1ad5c:	cmp	r0, #0
   1ad60:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1ad64:	ldr	r1, [pc, #412]	; 1af08 <__assert_fail@plt+0x96e8>
   1ad68:	mov	r0, r6
   1ad6c:	bl	1143c <strcmp@plt>
   1ad70:	cmp	r0, #0
   1ad74:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1ad78:	ldr	r1, [pc, #396]	; 1af0c <__assert_fail@plt+0x96ec>
   1ad7c:	mov	r0, r6
   1ad80:	bl	1143c <strcmp@plt>
   1ad84:	cmp	r0, #0
   1ad88:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1ad8c:	ldr	r1, [pc, #380]	; 1af10 <__assert_fail@plt+0x96f0>
   1ad90:	mov	r0, r6
   1ad94:	bl	1143c <strcmp@plt>
   1ad98:	cmp	r0, #0
   1ad9c:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1ada0:	ldr	r1, [pc, #364]	; 1af14 <__assert_fail@plt+0x96f4>
   1ada4:	mov	r0, r6
   1ada8:	bl	1143c <strcmp@plt>
   1adac:	cmp	r0, #0
   1adb0:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1adb4:	ldr	r1, [pc, #348]	; 1af18 <__assert_fail@plt+0x96f8>
   1adb8:	mov	r0, r6
   1adbc:	bl	1143c <strcmp@plt>
   1adc0:	cmp	r0, #0
   1adc4:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1adc8:	ldr	r1, [pc, #332]	; 1af1c <__assert_fail@plt+0x96fc>
   1adcc:	mov	r0, r6
   1add0:	bl	1143c <strcmp@plt>
   1add4:	cmp	r0, #0
   1add8:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1addc:	ldr	r1, [pc, #316]	; 1af20 <__assert_fail@plt+0x9700>
   1ade0:	mov	r0, r6
   1ade4:	bl	1143c <strcmp@plt>
   1ade8:	cmp	r0, #0
   1adec:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1adf0:	mov	r0, r6
   1adf4:	ldr	r1, [pc, #296]	; 1af24 <__assert_fail@plt+0x9704>
   1adf8:	bl	1143c <strcmp@plt>
   1adfc:	cmp	r0, #0
   1ae00:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1ae04:	mov	r1, r8
   1ae08:	ldr	r0, [pc, #280]	; 1af28 <__assert_fail@plt+0x9708>
   1ae0c:	bl	1143c <strcmp@plt>
   1ae10:	clz	r3, r0
   1ae14:	lsr	r3, r3, #5
   1ae18:	b	1abf8 <__assert_fail@plt+0x93d8>
   1ae1c:	bl	1167c <__errno_location@plt>
   1ae20:	mov	r6, r0
   1ae24:	mov	r0, r7
   1ae28:	ldr	r7, [r6]
   1ae2c:	bl	2379c <__assert_fail@plt+0x11f7c>
   1ae30:	str	r7, [r6]
   1ae34:	mov	r3, #0
   1ae38:	str	r3, [sl]
   1ae3c:	ldr	r4, [sp, #40]	; 0x28
   1ae40:	cmp	r4, r3
   1ae44:	beq	1ae8c <__assert_fail@plt+0x966c>
   1ae48:	ldr	r0, [r4]
   1ae4c:	ldr	r5, [r4, #28]
   1ae50:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ae54:	ldr	r0, [r4, #4]
   1ae58:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ae5c:	ldr	r0, [r4, #8]
   1ae60:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ae64:	ldrb	r3, [r4, #24]
   1ae68:	tst	r3, #4
   1ae6c:	beq	1ae78 <__assert_fail@plt+0x9658>
   1ae70:	ldr	r0, [r4, #12]
   1ae74:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ae78:	mov	r0, r4
   1ae7c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ae80:	subs	r4, r5, #0
   1ae84:	str	r5, [sp, #40]	; 0x28
   1ae88:	bne	1ae48 <__assert_fail@plt+0x9628>
   1ae8c:	mov	r0, #0
   1ae90:	str	r7, [r6]
   1ae94:	add	sp, sp, #68	; 0x44
   1ae98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae9c:	nop			; (mov r0, r0)
   1aea0:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1aea4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1aea8:	andeq	r6, r2, r4, lsl #5
   1aeac:	andeq	r6, r2, r4, lsr r2
   1aeb0:	andeq	r6, r2, ip, asr #4
   1aeb4:	andeq	r6, r2, r0, ror #4
   1aeb8:	andeq	pc, pc, r0, lsl #30
   1aebc:			; <UNDEFINED> instruction: 0xfffff000
   1aec0:	andeq	r6, r2, r8, ror r0
   1aec4:			; <UNDEFINED> instruction: 0x000262b4
   1aec8:	andeq	r6, r2, r0, asr #5
   1aecc:	strdeq	r4, [r2], -ip
   1aed0:			; <UNDEFINED> instruction: 0x00024cb8
   1aed4:	andeq	r6, r2, r4, ror #4
   1aed8:			; <UNDEFINED> instruction: 0x00024ab8
   1aedc:	ldrdeq	r4, [r2], -r0
   1aee0:	andeq	r4, r2, r0, asr fp
   1aee4:	andeq	r6, r2, ip, ror #4
   1aee8:	andeq	r4, r2, r0, asr #24
   1aeec:	strdeq	r4, [r2], -ip
   1aef0:	andeq	r4, r2, r4, ror #26
   1aef4:	andeq	r4, r2, r0, asr #21
   1aef8:	andeq	r6, r2, r8, ror r2
   1aefc:	andeq	r6, r2, r0, lsl #5
   1af00:	andeq	r6, r2, r8, lsl #5
   1af04:	andeq	r4, r2, r8, asr #19
   1af08:	andeq	r4, r2, r0, ror #19
   1af0c:	andeq	r4, r2, r4, lsl #21
   1af10:	andeq	r6, r2, r0, lsr #5
   1af14:	andeq	r4, r2, r0, asr #22
   1af18:	andeq	r4, r2, ip, ror #22
   1af1c:	andeq	r4, r2, ip, lsr #23
   1af20:	andeq	r4, r2, r8, lsl #25
   1af24:	andeq	r4, r2, r0, asr #27
   1af28:	andeq	r6, r2, ip, lsr #5
   1af2c:	muleq	r2, r0, r2
   1af30:	muleq	r2, r8, r2
   1af34:	andeq	r4, r2, ip, ror sl
   1af38:	ldr	r1, [pc, #-128]	; 1aec0 <__assert_fail@plt+0x96a0>
   1af3c:	ldr	r0, [pc, #-128]	; 1aec4 <__assert_fail@plt+0x96a4>
   1af40:	bl	117b4 <setmntent@plt>
   1af44:	subs	r5, r0, #0
   1af48:	beq	1b2c4 <__assert_fail@plt+0x9aa4>
   1af4c:	ldr	r8, [pc, #-140]	; 1aec8 <__assert_fail@plt+0x96a8>
   1af50:	ldr	r7, [pc, #-140]	; 1aecc <__assert_fail@plt+0x96ac>
   1af54:	ldr	r9, [pc, #-140]	; 1aed0 <__assert_fail@plt+0x96b0>
   1af58:	add	sl, sp, #40	; 0x28
   1af5c:	mov	r0, r5
   1af60:	bl	11580 <getmntent@plt>
   1af64:	subs	r6, r0, #0
   1af68:	beq	1b20c <__assert_fail@plt+0x99ec>
   1af6c:	mov	r1, r8
   1af70:	bl	11550 <hasmntopt@plt>
   1af74:	mov	fp, r0
   1af78:	mov	r0, #32
   1af7c:	bl	22234 <__assert_fail@plt+0x10a14>
   1af80:	mov	r4, r0
   1af84:	ldr	r0, [r6]
   1af88:	bl	22844 <__assert_fail@plt+0x11024>
   1af8c:	str	r0, [r4]
   1af90:	ldr	r0, [r6, #4]
   1af94:	bl	22844 <__assert_fail@plt+0x11024>
   1af98:	mov	r3, #0
   1af9c:	stmib	r4, {r0, r3}
   1afa0:	ldr	r0, [r6, #8]
   1afa4:	bl	22844 <__assert_fail@plt+0x11024>
   1afa8:	ldrb	r3, [r4, #24]
   1afac:	mov	r1, r7
   1afb0:	orr	r3, r3, #4
   1afb4:	strb	r3, [r4, #24]
   1afb8:	str	r0, [r4, #12]
   1afbc:	mov	r6, r0
   1afc0:	bl	1143c <strcmp@plt>
   1afc4:	cmp	r0, #0
   1afc8:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1afcc:	mov	r1, r9
   1afd0:	mov	r0, r6
   1afd4:	bl	1143c <strcmp@plt>
   1afd8:	cmp	r0, #0
   1afdc:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1afe0:	ldr	r1, [pc, #-276]	; 1aed4 <__assert_fail@plt+0x96b4>
   1afe4:	mov	r0, r6
   1afe8:	bl	1143c <strcmp@plt>
   1afec:	cmp	r0, #0
   1aff0:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1aff4:	ldr	r1, [pc, #-292]	; 1aed8 <__assert_fail@plt+0x96b8>
   1aff8:	mov	r0, r6
   1affc:	bl	1143c <strcmp@plt>
   1b000:	cmp	r0, #0
   1b004:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b008:	ldr	r1, [pc, #-308]	; 1aedc <__assert_fail@plt+0x96bc>
   1b00c:	mov	r0, r6
   1b010:	bl	1143c <strcmp@plt>
   1b014:	cmp	r0, #0
   1b018:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b01c:	ldr	r1, [pc, #-324]	; 1aee0 <__assert_fail@plt+0x96c0>
   1b020:	mov	r0, r6
   1b024:	bl	1143c <strcmp@plt>
   1b028:	cmp	r0, #0
   1b02c:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b030:	ldr	r1, [pc, #-340]	; 1aee4 <__assert_fail@plt+0x96c4>
   1b034:	mov	r0, r6
   1b038:	bl	1143c <strcmp@plt>
   1b03c:	cmp	r0, #0
   1b040:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b044:	ldr	r1, [pc, #-356]	; 1aee8 <__assert_fail@plt+0x96c8>
   1b048:	mov	r0, r6
   1b04c:	bl	1143c <strcmp@plt>
   1b050:	cmp	r0, #0
   1b054:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b058:	ldr	r1, [pc, #-372]	; 1aeec <__assert_fail@plt+0x96cc>
   1b05c:	mov	r0, r6
   1b060:	bl	1143c <strcmp@plt>
   1b064:	cmp	r0, #0
   1b068:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b06c:	ldr	r1, [pc, #-388]	; 1aef0 <__assert_fail@plt+0x96d0>
   1b070:	mov	r0, r6
   1b074:	bl	1143c <strcmp@plt>
   1b078:	cmp	r0, #0
   1b07c:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b080:	ldr	r1, [pc, #-404]	; 1aef4 <__assert_fail@plt+0x96d4>
   1b084:	mov	r0, r6
   1b088:	bl	1143c <strcmp@plt>
   1b08c:	cmp	r0, #0
   1b090:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b094:	ldr	r1, [pc, #-420]	; 1aef8 <__assert_fail@plt+0x96d8>
   1b098:	mov	r0, r6
   1b09c:	bl	1143c <strcmp@plt>
   1b0a0:	cmp	r0, #0
   1b0a4:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b0a8:	ldr	r1, [pc, #-436]	; 1aefc <__assert_fail@plt+0x96dc>
   1b0ac:	mov	r0, r6
   1b0b0:	bl	1143c <strcmp@plt>
   1b0b4:	cmp	r0, #0
   1b0b8:	beq	1b0dc <__assert_fail@plt+0x98bc>
   1b0bc:	ldr	r1, [pc, #-452]	; 1af00 <__assert_fail@plt+0x96e0>
   1b0c0:	mov	r0, r6
   1b0c4:	bl	1143c <strcmp@plt>
   1b0c8:	cmp	r0, #0
   1b0cc:	cmpeq	fp, #0
   1b0d0:	moveq	r0, #1
   1b0d4:	movne	r0, #0
   1b0d8:	b	1b0e0 <__assert_fail@plt+0x98c0>
   1b0dc:	mov	r0, #1
   1b0e0:	ldrb	r3, [r4, #24]
   1b0e4:	ldr	fp, [r4]
   1b0e8:	mov	r1, #58	; 0x3a
   1b0ec:	bic	r3, r3, #1
   1b0f0:	orr	r3, r0, r3
   1b0f4:	strb	r3, [r4, #24]
   1b0f8:	mov	r0, fp
   1b0fc:	bl	1164c <strchr@plt>
   1b100:	cmp	r0, #0
   1b104:	beq	1b134 <__assert_fail@plt+0x9914>
   1b108:	mov	r1, #1
   1b10c:	ldrb	r0, [r4, #24]
   1b110:	mvn	r2, #0
   1b114:	mvn	r3, #0
   1b118:	bic	r0, r0, #2
   1b11c:	orr	r0, r0, r1, lsl #1
   1b120:	strb	r0, [r4, #24]
   1b124:	strd	r2, [r4, #16]
   1b128:	str	r4, [sl]
   1b12c:	add	sl, r4, #28
   1b130:	b	1af5c <__assert_fail@plt+0x973c>
   1b134:	ldrb	r3, [fp]
   1b138:	cmp	r3, #47	; 0x2f
   1b13c:	beq	1b278 <__assert_fail@plt+0x9a58>
   1b140:	ldr	r1, [pc, #-580]	; 1af04 <__assert_fail@plt+0x96e4>
   1b144:	mov	r0, r6
   1b148:	bl	1143c <strcmp@plt>
   1b14c:	cmp	r0, #0
   1b150:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b154:	ldr	r1, [pc, #-596]	; 1af08 <__assert_fail@plt+0x96e8>
   1b158:	mov	r0, r6
   1b15c:	bl	1143c <strcmp@plt>
   1b160:	cmp	r0, #0
   1b164:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b168:	ldr	r1, [pc, #-612]	; 1af0c <__assert_fail@plt+0x96ec>
   1b16c:	mov	r0, r6
   1b170:	bl	1143c <strcmp@plt>
   1b174:	cmp	r0, #0
   1b178:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b17c:	ldr	r1, [pc, #-628]	; 1af10 <__assert_fail@plt+0x96f0>
   1b180:	mov	r0, r6
   1b184:	bl	1143c <strcmp@plt>
   1b188:	cmp	r0, #0
   1b18c:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b190:	ldr	r1, [pc, #-644]	; 1af14 <__assert_fail@plt+0x96f4>
   1b194:	mov	r0, r6
   1b198:	bl	1143c <strcmp@plt>
   1b19c:	cmp	r0, #0
   1b1a0:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b1a4:	ldr	r1, [pc, #-660]	; 1af18 <__assert_fail@plt+0x96f8>
   1b1a8:	mov	r0, r6
   1b1ac:	bl	1143c <strcmp@plt>
   1b1b0:	cmp	r0, #0
   1b1b4:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b1b8:	ldr	r1, [pc, #-676]	; 1af1c <__assert_fail@plt+0x96fc>
   1b1bc:	mov	r0, r6
   1b1c0:	bl	1143c <strcmp@plt>
   1b1c4:	cmp	r0, #0
   1b1c8:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b1cc:	ldr	r1, [pc, #-692]	; 1af20 <__assert_fail@plt+0x9700>
   1b1d0:	mov	r0, r6
   1b1d4:	bl	1143c <strcmp@plt>
   1b1d8:	cmp	r0, #0
   1b1dc:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b1e0:	mov	r0, r6
   1b1e4:	ldr	r1, [pc, #-712]	; 1af24 <__assert_fail@plt+0x9704>
   1b1e8:	bl	1143c <strcmp@plt>
   1b1ec:	cmp	r0, #0
   1b1f0:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b1f4:	mov	r1, fp
   1b1f8:	ldr	r0, [pc, #-728]	; 1af28 <__assert_fail@plt+0x9708>
   1b1fc:	bl	1143c <strcmp@plt>
   1b200:	clz	r1, r0
   1b204:	lsr	r1, r1, #5
   1b208:	b	1b10c <__assert_fail@plt+0x98ec>
   1b20c:	mov	r0, r5
   1b210:	bl	1170c <endmntent@plt>
   1b214:	cmp	r0, #0
   1b218:	bne	1ac3c <__assert_fail@plt+0x941c>
   1b21c:	bl	1167c <__errno_location@plt>
   1b220:	mov	r6, r0
   1b224:	ldr	r7, [r0]
   1b228:	b	1ae34 <__assert_fail@plt+0x9614>
   1b22c:	ldrb	r3, [r8, #1]
   1b230:	cmp	r3, #47	; 0x2f
   1b234:	bne	1ad50 <__assert_fail@plt+0x9530>
   1b238:	ldr	r1, [pc, #-788]	; 1af2c <__assert_fail@plt+0x970c>
   1b23c:	mov	r0, r6
   1b240:	bl	1143c <strcmp@plt>
   1b244:	cmp	r0, #0
   1b248:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1b24c:	ldr	r1, [pc, #-804]	; 1af30 <__assert_fail@plt+0x9710>
   1b250:	mov	r0, r6
   1b254:	bl	1143c <strcmp@plt>
   1b258:	cmp	r0, #0
   1b25c:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1b260:	ldr	r1, [pc, #-820]	; 1af34 <__assert_fail@plt+0x9714>
   1b264:	mov	r0, r6
   1b268:	bl	1143c <strcmp@plt>
   1b26c:	cmp	r0, #0
   1b270:	beq	1abf4 <__assert_fail@plt+0x93d4>
   1b274:	b	1ad50 <__assert_fail@plt+0x9530>
   1b278:	ldrb	r3, [fp, #1]
   1b27c:	cmp	r3, #47	; 0x2f
   1b280:	bne	1b140 <__assert_fail@plt+0x9920>
   1b284:	ldr	r1, [pc, #-864]	; 1af2c <__assert_fail@plt+0x970c>
   1b288:	mov	r0, r6
   1b28c:	bl	1143c <strcmp@plt>
   1b290:	cmp	r0, #0
   1b294:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b298:	ldr	r1, [pc, #-880]	; 1af30 <__assert_fail@plt+0x9710>
   1b29c:	mov	r0, r6
   1b2a0:	bl	1143c <strcmp@plt>
   1b2a4:	cmp	r0, #0
   1b2a8:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b2ac:	ldr	r1, [pc, #-896]	; 1af34 <__assert_fail@plt+0x9714>
   1b2b0:	mov	r0, r6
   1b2b4:	bl	1143c <strcmp@plt>
   1b2b8:	cmp	r0, #0
   1b2bc:	beq	1b108 <__assert_fail@plt+0x98e8>
   1b2c0:	b	1b140 <__assert_fail@plt+0x9920>
   1b2c4:	mov	r0, r5
   1b2c8:	b	1ac48 <__assert_fail@plt+0x9428>
   1b2cc:	push	{r4, lr}
   1b2d0:	mov	r4, r0
   1b2d4:	ldr	r0, [r0]
   1b2d8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1b2dc:	ldr	r0, [r4, #4]
   1b2e0:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1b2e4:	ldr	r0, [r4, #8]
   1b2e8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1b2ec:	ldrb	r3, [r4, #24]
   1b2f0:	tst	r3, #4
   1b2f4:	beq	1b300 <__assert_fail@plt+0x9ae0>
   1b2f8:	ldr	r0, [r4, #12]
   1b2fc:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1b300:	mov	r0, r4
   1b304:	pop	{r4, lr}
   1b308:	b	1a7a4 <__assert_fail@plt+0x8f84>
   1b30c:	push	{r4, r5, r6, lr}
   1b310:	subs	r4, r2, #0
   1b314:	mov	r6, r0
   1b318:	beq	1b344 <__assert_fail@plt+0x9b24>
   1b31c:	mov	r5, r1
   1b320:	bl	115ec <__ctype_toupper_loc@plt>
   1b324:	add	r3, r5, r4
   1b328:	add	r2, r6, r4
   1b32c:	ldrb	lr, [r3, #-1]!
   1b330:	ldr	ip, [r0]
   1b334:	cmp	r5, r3
   1b338:	ldr	ip, [ip, lr, lsl #2]
   1b33c:	strb	ip, [r2, #-1]!
   1b340:	bne	1b32c <__assert_fail@plt+0x9b0c>
   1b344:	mov	r0, r6
   1b348:	pop	{r4, r5, r6, pc}
   1b34c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b350:	sub	sp, sp, #1120	; 0x460
   1b354:	sub	sp, sp, #4
   1b358:	mov	r4, r3
   1b35c:	str	r3, [sp, #40]	; 0x28
   1b360:	str	r1, [sp, #36]	; 0x24
   1b364:	mov	sl, r2
   1b368:	mov	r6, r0
   1b36c:	bl	1167c <__errno_location@plt>
   1b370:	ldr	r3, [r4, #40]	; 0x28
   1b374:	ldr	r2, [r4, #8]
   1b378:	mov	r1, r3
   1b37c:	ldr	r3, [pc, #4040]	; 1c34c <__assert_fail@plt+0xab2c>
   1b380:	mov	ip, r2
   1b384:	str	r2, [sp, #56]	; 0x38
   1b388:	subs	r2, r1, #0
   1b38c:	moveq	r2, r3
   1b390:	cmp	ip, #12
   1b394:	str	r2, [sp, #60]	; 0x3c
   1b398:	ldr	r5, [sp, #1168]	; 0x490
   1b39c:	ldr	r3, [r0]
   1b3a0:	str	r0, [sp, #48]	; 0x30
   1b3a4:	str	r3, [sp, #68]	; 0x44
   1b3a8:	ldrb	r3, [sp, #1160]	; 0x488
   1b3ac:	str	r3, [sp, #64]	; 0x40
   1b3b0:	subgt	r3, ip, #12
   1b3b4:	strgt	r3, [sp, #56]	; 0x38
   1b3b8:	bgt	1b3c8 <__assert_fail@plt+0x9ba8>
   1b3bc:	subs	r3, ip, #0
   1b3c0:	moveq	r3, #12
   1b3c4:	str	r3, [sp, #56]	; 0x38
   1b3c8:	ldrb	r3, [sl]
   1b3cc:	cmp	r3, #0
   1b3d0:	beq	1cc3c <__assert_fail@plt+0xb41c>
   1b3d4:	ldr	fp, [pc, #3956]	; 1c350 <__assert_fail@plt+0xab30>
   1b3d8:	mov	r2, #0
   1b3dc:	str	r2, [sp, #28]
   1b3e0:	str	sl, [sp, #32]
   1b3e4:	cmp	r3, #37	; 0x25
   1b3e8:	beq	1b4d8 <__assert_fail@plt+0x9cb8>
   1b3ec:	bic	r5, r5, r5, asr #31
   1b3f0:	ldr	r2, [sp, #36]	; 0x24
   1b3f4:	ldr	r1, [sp, #28]
   1b3f8:	cmp	r5, #1
   1b3fc:	movcs	r4, r5
   1b400:	movcc	r4, #1
   1b404:	sub	r2, r2, r1
   1b408:	cmp	r4, r2
   1b40c:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1b410:	cmp	r6, #0
   1b414:	beq	1b444 <__assert_fail@plt+0x9c24>
   1b418:	cmp	r5, #1
   1b41c:	ble	1b440 <__assert_fail@plt+0x9c20>
   1b420:	sub	r5, r5, #1
   1b424:	mov	r0, r6
   1b428:	mov	r2, r5
   1b42c:	mov	r1, #32
   1b430:	bl	116ac <memset@plt>
   1b434:	ldr	r3, [sp, #32]
   1b438:	add	r6, r6, r5
   1b43c:	ldrb	r3, [r3]
   1b440:	strb	r3, [r6], #1
   1b444:	ldr	r3, [sp, #28]
   1b448:	add	r3, r3, r4
   1b44c:	ldr	r4, [sp, #32]
   1b450:	str	r3, [sp, #28]
   1b454:	ldrb	r3, [r4, #1]
   1b458:	add	r2, r4, #1
   1b45c:	str	r2, [sp, #32]
   1b460:	cmp	r3, #0
   1b464:	mvn	r5, #0
   1b468:	bne	1b3e4 <__assert_fail@plt+0x9bc4>
   1b46c:	ldr	r3, [sp, #36]	; 0x24
   1b470:	ldr	r2, [sp, #68]	; 0x44
   1b474:	cmp	r6, #0
   1b478:	cmpne	r3, #0
   1b47c:	movne	r3, #0
   1b480:	strbne	r3, [r6]
   1b484:	ldr	r3, [sp, #48]	; 0x30
   1b488:	ldr	r0, [sp, #28]
   1b48c:	str	r2, [r3]
   1b490:	b	1b4cc <__assert_fail@plt+0x9cac>
   1b494:	ldr	r3, [sp, #28]
   1b498:	ldr	r2, [sp, #36]	; 0x24
   1b49c:	add	r3, r3, r8
   1b4a0:	str	r3, [sp, #28]
   1b4a4:	sub	r3, r2, r3
   1b4a8:	cmp	r3, #1
   1b4ac:	sub	r5, r5, r8
   1b4b0:	bhi	1bd90 <__assert_fail@plt+0xa570>
   1b4b4:	ldr	r2, [sp, #48]	; 0x30
   1b4b8:	mov	r3, #34	; 0x22
   1b4bc:	str	r3, [r2]
   1b4c0:	mov	r3, #0
   1b4c4:	mov	r0, r3
   1b4c8:	str	r3, [sp, #28]
   1b4cc:	add	sp, sp, #1120	; 0x460
   1b4d0:	add	sp, sp, #4
   1b4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4d8:	mov	r7, #0
   1b4dc:	ldr	r4, [sp, #32]
   1b4e0:	ldr	r3, [sp, #64]	; 0x40
   1b4e4:	mov	sl, r7
   1b4e8:	str	r3, [sp, #44]	; 0x2c
   1b4ec:	ldrb	r1, [r4, #1]!
   1b4f0:	sub	r3, r1, #35	; 0x23
   1b4f4:	mov	r9, r1
   1b4f8:	cmp	r3, #60	; 0x3c
   1b4fc:	ldrls	pc, [pc, r3, lsl #2]
   1b500:	b	1b614 <__assert_fail@plt+0x9df4>
   1b504:	andeq	fp, r1, ip, lsl #12
   1b508:	andeq	fp, r1, r4, lsl r6
   1b50c:	andeq	fp, r1, r4, lsl r6
   1b510:	andeq	fp, r1, r4, lsl r6
   1b514:	andeq	fp, r1, r4, lsl r6
   1b518:	andeq	fp, r1, r4, lsl r6
   1b51c:	andeq	fp, r1, r4, lsl r6
   1b520:	andeq	fp, r1, r4, lsl r6
   1b524:	andeq	fp, r1, r4, lsl #12
   1b528:	andeq	fp, r1, r4, lsl r6
   1b52c:	andeq	fp, r1, r4, lsl #12
   1b530:	andeq	fp, r1, r4, lsl r6
   1b534:	andeq	fp, r1, r4, lsl r6
   1b538:	andeq	fp, r1, r4, lsl #12
   1b53c:	andeq	fp, r1, r4, lsl r6
   1b540:	andeq	fp, r1, r4, lsl r6
   1b544:	andeq	fp, r1, r4, lsl r6
   1b548:	andeq	fp, r1, r4, lsl r6
   1b54c:	andeq	fp, r1, r4, lsl r6
   1b550:	andeq	fp, r1, r4, lsl r6
   1b554:	andeq	fp, r1, r4, lsl r6
   1b558:	andeq	fp, r1, r4, lsl r6
   1b55c:	andeq	fp, r1, r4, lsl r6
   1b560:	andeq	fp, r1, r4, lsl r6
   1b564:	andeq	fp, r1, r4, lsl r6
   1b568:	andeq	fp, r1, r4, lsl r6
   1b56c:	andeq	fp, r1, r4, lsl r6
   1b570:	andeq	fp, r1, r4, lsl r6
   1b574:	andeq	fp, r1, r4, lsl r6
   1b578:	andeq	fp, r1, r4, lsl r6
   1b57c:	andeq	fp, r1, r4, lsl r6
   1b580:	andeq	fp, r1, r4, lsl r6
   1b584:	andeq	fp, r1, r4, lsl r6
   1b588:	andeq	fp, r1, r4, lsl r6
   1b58c:	andeq	fp, r1, r4, lsl r6
   1b590:	andeq	fp, r1, r4, lsl r6
   1b594:	andeq	fp, r1, r4, lsl r6
   1b598:	andeq	fp, r1, r4, lsl r6
   1b59c:	andeq	fp, r1, r4, lsl r6
   1b5a0:	andeq	fp, r1, r4, lsl r6
   1b5a4:	andeq	fp, r1, r4, lsl r6
   1b5a8:	andeq	fp, r1, r4, lsl r6
   1b5ac:	andeq	fp, r1, r4, lsl r6
   1b5b0:	andeq	fp, r1, r4, lsl r6
   1b5b4:	andeq	fp, r1, r4, lsl r6
   1b5b8:	andeq	fp, r1, r4, lsl r6
   1b5bc:	andeq	fp, r1, r4, lsl r6
   1b5c0:	andeq	fp, r1, r4, lsl r6
   1b5c4:	andeq	fp, r1, r4, lsl r6
   1b5c8:	andeq	fp, r1, r4, lsl r6
   1b5cc:	andeq	fp, r1, r4, lsl r6
   1b5d0:	andeq	fp, r1, r4, lsl r6
   1b5d4:	andeq	fp, r1, r4, lsl r6
   1b5d8:	andeq	fp, r1, r4, lsl r6
   1b5dc:	andeq	fp, r1, r4, lsl r6
   1b5e0:	andeq	fp, r1, r4, lsl r6
   1b5e4:	andeq	fp, r1, r4, lsl r6
   1b5e8:	andeq	fp, r1, r4, lsl r6
   1b5ec:	andeq	fp, r1, r4, lsl r6
   1b5f0:	strdeq	fp, [r1], -r8
   1b5f4:	andeq	fp, r1, r4, lsl #12
   1b5f8:	mov	r3, #1
   1b5fc:	str	r3, [sp, #44]	; 0x2c
   1b600:	b	1b4ec <__assert_fail@plt+0x9ccc>
   1b604:	mov	sl, r1
   1b608:	b	1b4ec <__assert_fail@plt+0x9ccc>
   1b60c:	mov	r7, #1
   1b610:	b	1b4ec <__assert_fail@plt+0x9ccc>
   1b614:	sub	r3, r1, #48	; 0x30
   1b618:	cmp	r3, #9
   1b61c:	bhi	1b660 <__assert_fail@plt+0x9e40>
   1b620:	ldr	r9, [pc, #3372]	; 1c354 <__assert_fail@plt+0xab34>
   1b624:	mov	r5, #0
   1b628:	mvn	r8, #-2147483648	; 0x80000000
   1b62c:	cmp	r5, #0
   1b630:	blt	1b948 <__assert_fail@plt+0xa128>
   1b634:	cmp	r5, r9
   1b638:	ble	1b964 <__assert_fail@plt+0xa144>
   1b63c:	mov	r3, r4
   1b640:	ldrb	r1, [r3, #1]
   1b644:	add	r4, r3, #1
   1b648:	mov	r3, r4
   1b64c:	sub	r2, r1, #48	; 0x30
   1b650:	cmp	r2, #9
   1b654:	bls	1b640 <__assert_fail@plt+0x9e20>
   1b658:	mov	r9, r1
   1b65c:	mvn	r5, #-2147483648	; 0x80000000
   1b660:	cmp	r1, #69	; 0x45
   1b664:	beq	1b86c <__assert_fail@plt+0xa04c>
   1b668:	cmp	r1, #79	; 0x4f
   1b66c:	movne	r9, #0
   1b670:	beq	1b86c <__assert_fail@plt+0xa04c>
   1b674:	cmp	r1, #122	; 0x7a
   1b678:	ldrls	pc, [pc, r1, lsl #2]
   1b67c:	b	1b87c <__assert_fail@plt+0xa05c>
   1b680:	andeq	fp, r1, r8, ror r8
   1b684:	andeq	fp, r1, ip, ror r8
   1b688:	andeq	fp, r1, ip, ror r8
   1b68c:	andeq	fp, r1, ip, ror r8
   1b690:	andeq	fp, r1, ip, ror r8
   1b694:	andeq	fp, r1, ip, ror r8
   1b698:	andeq	fp, r1, ip, ror r8
   1b69c:	andeq	fp, r1, ip, ror r8
   1b6a0:	andeq	fp, r1, ip, ror r8
   1b6a4:	andeq	fp, r1, ip, ror r8
   1b6a8:	andeq	fp, r1, ip, ror r8
   1b6ac:	andeq	fp, r1, ip, ror r8
   1b6b0:	andeq	fp, r1, ip, ror r8
   1b6b4:	andeq	fp, r1, ip, ror r8
   1b6b8:	andeq	fp, r1, ip, ror r8
   1b6bc:	andeq	fp, r1, ip, ror r8
   1b6c0:	andeq	fp, r1, ip, ror r8
   1b6c4:	andeq	fp, r1, ip, ror r8
   1b6c8:	andeq	fp, r1, ip, ror r8
   1b6cc:	andeq	fp, r1, ip, ror r8
   1b6d0:	andeq	fp, r1, ip, ror r8
   1b6d4:	andeq	fp, r1, ip, ror r8
   1b6d8:	andeq	fp, r1, ip, ror r8
   1b6dc:	andeq	fp, r1, ip, ror r8
   1b6e0:	andeq	fp, r1, ip, ror r8
   1b6e4:	andeq	fp, r1, ip, ror r8
   1b6e8:	andeq	fp, r1, ip, ror r8
   1b6ec:	andeq	fp, r1, ip, ror r8
   1b6f0:	andeq	fp, r1, ip, ror r8
   1b6f4:	andeq	fp, r1, ip, ror r8
   1b6f8:	andeq	fp, r1, ip, ror r8
   1b6fc:	andeq	fp, r1, ip, ror r8
   1b700:	andeq	fp, r1, ip, ror r8
   1b704:	andeq	fp, r1, ip, ror r8
   1b708:	andeq	fp, r1, ip, ror r8
   1b70c:	andeq	fp, r1, ip, ror r8
   1b710:	andeq	fp, r1, ip, ror r8
   1b714:			; <UNDEFINED> instruction: 0x0001c3b4
   1b718:	andeq	fp, r1, ip, ror r8
   1b71c:	andeq	fp, r1, ip, ror r8
   1b720:	andeq	fp, r1, ip, ror r8
   1b724:	andeq	fp, r1, ip, ror r8
   1b728:	andeq	fp, r1, ip, ror r8
   1b72c:	andeq	fp, r1, ip, ror r8
   1b730:	andeq	fp, r1, ip, ror r8
   1b734:	andeq	fp, r1, ip, ror r8
   1b738:	andeq	fp, r1, ip, ror r8
   1b73c:	andeq	fp, r1, ip, ror r8
   1b740:	andeq	fp, r1, ip, ror r8
   1b744:	andeq	fp, r1, ip, ror r8
   1b748:	andeq	fp, r1, ip, ror r8
   1b74c:	andeq	fp, r1, ip, ror r8
   1b750:	andeq	fp, r1, ip, ror r8
   1b754:	andeq	fp, r1, ip, ror r8
   1b758:	andeq	fp, r1, ip, ror r8
   1b75c:	andeq	fp, r1, ip, ror r8
   1b760:	andeq	fp, r1, ip, ror r8
   1b764:	andeq	fp, r1, ip, ror r8
   1b768:	andeq	ip, r1, r4, ror #10
   1b76c:	andeq	fp, r1, ip, ror r8
   1b770:	andeq	fp, r1, ip, ror r8
   1b774:	andeq	fp, r1, ip, ror r8
   1b778:	andeq	fp, r1, ip, ror r8
   1b77c:	andeq	fp, r1, ip, ror r8
   1b780:	andeq	fp, r1, ip, ror r8
   1b784:	andeq	fp, r1, ip, lsr #23
   1b788:	andeq	fp, r1, ip, lsl #20
   1b78c:	andeq	fp, r1, ip, ror #23
   1b790:	andeq	ip, r1, r0, lsr #32
   1b794:	andeq	fp, r1, ip, ror r8
   1b798:	andeq	fp, r1, ip, lsl #30
   1b79c:	andeq	ip, r1, r4, lsr r0
   1b7a0:	andeq	ip, r1, ip, asr #10
   1b7a4:	andeq	ip, r1, r8, lsr r5
   1b7a8:	andeq	fp, r1, ip, ror r8
   1b7ac:	andeq	fp, r1, ip, ror r8
   1b7b0:	andeq	fp, r1, ip, ror r8
   1b7b4:	andeq	ip, r1, r0, lsr #10
   1b7b8:	andeq	ip, r1, r8, lsl #12
   1b7bc:	andeq	fp, r1, ip, ror r8
   1b7c0:	andeq	ip, r1, r8, ror #11
   1b7c4:	andeq	fp, r1, ip, ror r8
   1b7c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b7cc:	andeq	ip, r1, r4, asr #11
   1b7d0:	andeq	ip, r1, r0, asr #6
   1b7d4:	andeq	ip, r1, r8, lsl #6
   1b7d8:	andeq	ip, r1, r4, lsr r0
   1b7dc:	andeq	ip, r1, r8, lsl #11
   1b7e0:	andeq	fp, r1, r0, lsr #23
   1b7e4:	andeq	ip, r1, r8, lsl fp
   1b7e8:	andeq	ip, r1, r4, ror #20
   1b7ec:	andeq	fp, r1, ip, ror r8
   1b7f0:	andeq	fp, r1, ip, ror r8
   1b7f4:	andeq	fp, r1, ip, ror r8
   1b7f8:	andeq	fp, r1, ip, ror r8
   1b7fc:	andeq	fp, r1, ip, ror r8
   1b800:	andeq	fp, r1, ip, ror r8
   1b804:	andeq	fp, r1, ip, lsr #23
   1b808:	andeq	ip, r1, r0, lsr #5
   1b80c:	andeq	fp, r1, r0, lsr #23
   1b810:			; <UNDEFINED> instruction: 0x0001c1b0
   1b814:	andeq	ip, r1, r0, lsr r9
   1b818:	andeq	fp, r1, ip, ror r8
   1b81c:	andeq	ip, r1, r4, lsr r0
   1b820:	andeq	ip, r1, r0, lsr #5
   1b824:	andeq	fp, r1, ip, ror r8
   1b828:	strdeq	ip, [r1], -r4
   1b82c:	andeq	ip, r1, r4, lsl sl
   1b830:	andeq	ip, r1, r4, lsl #20
   1b834:	andeq	ip, r1, r8, asr #19
   1b838:	andeq	ip, r1, r0, asr r9
   1b83c:	andeq	fp, r1, ip, ror r8
   1b840:	andeq	ip, r1, ip, asr sl
   1b844:	andeq	ip, r1, r8, lsr #20
   1b848:	andeq	fp, r1, r0, lsr #20
   1b84c:	andeq	fp, r1, r0, asr lr
   1b850:	muleq	r1, ip, r4
   1b854:	andeq	ip, r1, r8, ror #8
   1b858:	andeq	fp, r1, ip, ror r8
   1b85c:	andeq	ip, r1, r0, asr r4
   1b860:	andeq	fp, r1, r0, lsr #23
   1b864:	andeq	ip, r1, r4, asr #5
   1b868:	andeq	ip, r1, r8, ror #3
   1b86c:	ldrb	r1, [r4, #1]
   1b870:	add	r4, r4, #1
   1b874:	b	1b674 <__assert_fail@plt+0x9e54>
   1b878:	sub	r4, r4, #1
   1b87c:	ldr	r3, [sp, #32]
   1b880:	ldr	r2, [sp, #28]
   1b884:	sub	r8, r4, r3
   1b888:	subs	r3, sl, #45	; 0x2d
   1b88c:	movne	r3, #1
   1b890:	cmp	r5, #0
   1b894:	movlt	r3, #0
   1b898:	cmp	r3, #0
   1b89c:	add	r7, r8, #1
   1b8a0:	moveq	r5, #0
   1b8a4:	ldr	r3, [sp, #36]	; 0x24
   1b8a8:	cmp	r7, r5
   1b8ac:	movcs	r9, r7
   1b8b0:	movcc	r9, r5
   1b8b4:	sub	r3, r3, r2
   1b8b8:	cmp	r9, r3
   1b8bc:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1b8c0:	cmp	r6, #0
   1b8c4:	beq	1b938 <__assert_fail@plt+0xa118>
   1b8c8:	cmp	r7, r5
   1b8cc:	bcs	1b8f4 <__assert_fail@plt+0xa0d4>
   1b8d0:	cmp	sl, #43	; 0x2b
   1b8d4:	cmpne	sl, #48	; 0x30
   1b8d8:	sub	r5, r5, r7
   1b8dc:	mov	r0, r6
   1b8e0:	mov	r2, r5
   1b8e4:	moveq	r1, #48	; 0x30
   1b8e8:	movne	r1, #32
   1b8ec:	bl	116ac <memset@plt>
   1b8f0:	add	r6, r6, r5
   1b8f4:	ldr	r3, [sp, #44]	; 0x2c
   1b8f8:	cmp	r3, #0
   1b8fc:	beq	1bb54 <__assert_fail@plt+0xa334>
   1b900:	cmp	r7, #0
   1b904:	beq	1b934 <__assert_fail@plt+0xa114>
   1b908:	bl	115ec <__ctype_toupper_loc@plt>
   1b90c:	ldr	r3, [sp, #32]
   1b910:	add	r8, r6, r8
   1b914:	sub	sl, r3, #1
   1b918:	mov	r3, r4
   1b91c:	ldrb	r1, [r3], #-1
   1b920:	ldr	r2, [r0]
   1b924:	cmp	r3, sl
   1b928:	ldr	r2, [r2, r1, lsl #2]
   1b92c:	strb	r2, [r8], #-1
   1b930:	bne	1b91c <__assert_fail@plt+0xa0fc>
   1b934:	add	r6, r6, r7
   1b938:	ldr	r3, [sp, #28]
   1b93c:	add	r3, r3, r9
   1b940:	str	r3, [sp, #28]
   1b944:	b	1b454 <__assert_fail@plt+0x9c34>
   1b948:	cmn	r5, #1
   1b94c:	beq	1b9e0 <__assert_fail@plt+0xa1c0>
   1b950:	mov	r1, r5
   1b954:	mov	r0, #-2147483648	; 0x80000000
   1b958:	bl	240cc <__assert_fail@plt+0x128ac>
   1b95c:	cmp	r0, #9
   1b960:	ble	1b63c <__assert_fail@plt+0x9e1c>
   1b964:	ldrb	r0, [r4]
   1b968:	add	r5, r5, r5, lsl #2
   1b96c:	cmp	r0, #47	; 0x2f
   1b970:	lsl	r3, r5, #1
   1b974:	mov	r1, r3
   1b978:	ble	1b9f8 <__assert_fail@plt+0xa1d8>
   1b97c:	cmp	r3, #0
   1b980:	blt	1b9bc <__assert_fail@plt+0xa19c>
   1b984:	sub	r2, r0, #48	; 0x30
   1b988:	sub	r2, r8, r2
   1b98c:	cmp	r3, r2
   1b990:	movle	r2, #0
   1b994:	movgt	r2, #1
   1b998:	cmp	r2, #0
   1b99c:	beq	1b9bc <__assert_fail@plt+0xa19c>
   1b9a0:	ldrb	r1, [r4, #1]
   1b9a4:	add	r3, r4, #1
   1b9a8:	sub	r2, r1, #48	; 0x30
   1b9ac:	cmp	r2, #9
   1b9b0:	bls	1b640 <__assert_fail@plt+0x9e20>
   1b9b4:	mov	r4, r3
   1b9b8:	b	1b658 <__assert_fail@plt+0x9e38>
   1b9bc:	ldrb	r1, [r4, #1]
   1b9c0:	add	r3, r0, r3
   1b9c4:	sub	r5, r3, #48	; 0x30
   1b9c8:	sub	r3, r1, #48	; 0x30
   1b9cc:	cmp	r3, #9
   1b9d0:	add	r4, r4, #1
   1b9d4:	bls	1b62c <__assert_fail@plt+0x9e0c>
   1b9d8:	mov	r9, r1
   1b9dc:	b	1b660 <__assert_fail@plt+0x9e40>
   1b9e0:	ldrb	r0, [r4]
   1b9e4:	cmp	r0, #47	; 0x2f
   1b9e8:	mvngt	r3, #9
   1b9ec:	bgt	1b9bc <__assert_fail@plt+0xa19c>
   1b9f0:	mvn	r1, #9
   1b9f4:	mov	r3, r1
   1b9f8:	rsb	r2, r0, #-2147483600	; 0x80000030
   1b9fc:	cmp	r2, r1
   1ba00:	movle	r2, #0
   1ba04:	movgt	r2, #1
   1ba08:	b	1b998 <__assert_fail@plt+0xa178>
   1ba0c:	cmp	r9, #69	; 0x45
   1ba10:	beq	1b87c <__assert_fail@plt+0xa05c>
   1ba14:	cmp	r7, #0
   1ba18:	beq	1ba24 <__assert_fail@plt+0xa204>
   1ba1c:	str	r7, [sp, #44]	; 0x2c
   1ba20:	mov	r7, #0
   1ba24:	cmp	r9, #0
   1ba28:	mov	r3, #37	; 0x25
   1ba2c:	mov	r2, #32
   1ba30:	strb	r3, [sp, #81]	; 0x51
   1ba34:	addeq	r3, sp, #80	; 0x50
   1ba38:	strb	r2, [sp, #80]	; 0x50
   1ba3c:	streq	r3, [sp, #32]
   1ba40:	addeq	ip, sp, #82	; 0x52
   1ba44:	moveq	r2, r3
   1ba48:	bne	1bb3c <__assert_fail@plt+0xa31c>
   1ba4c:	mov	lr, #0
   1ba50:	strb	r1, [ip]
   1ba54:	add	r0, sp, #96	; 0x60
   1ba58:	ldr	r3, [sp, #40]	; 0x28
   1ba5c:	strb	lr, [ip, #1]
   1ba60:	mov	r1, #1024	; 0x400
   1ba64:	bl	115c8 <strftime@plt>
   1ba68:	subs	r9, r0, #0
   1ba6c:	beq	1b454 <__assert_fail@plt+0x9c34>
   1ba70:	mvn	r3, r5
   1ba74:	cmp	sl, #45	; 0x2d
   1ba78:	lsr	r3, r3, #31
   1ba7c:	moveq	r3, #0
   1ba80:	cmp	r3, #0
   1ba84:	moveq	r5, #0
   1ba88:	sub	r8, r9, #1
   1ba8c:	cmp	r8, r5
   1ba90:	movcs	r3, r8
   1ba94:	movcc	r3, r5
   1ba98:	mov	r2, r3
   1ba9c:	str	r3, [sp, #32]
   1baa0:	ldr	r1, [sp, #28]
   1baa4:	ldr	r3, [sp, #36]	; 0x24
   1baa8:	sub	r3, r3, r1
   1baac:	cmp	r2, r3
   1bab0:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1bab4:	cmp	r6, #0
   1bab8:	beq	1bb18 <__assert_fail@plt+0xa2f8>
   1babc:	cmp	r8, r5
   1bac0:	bcs	1bae8 <__assert_fail@plt+0xa2c8>
   1bac4:	cmp	sl, #43	; 0x2b
   1bac8:	cmpne	sl, #48	; 0x30
   1bacc:	sub	r5, r5, r8
   1bad0:	mov	r0, r6
   1bad4:	mov	r2, r5
   1bad8:	moveq	r1, #48	; 0x30
   1badc:	movne	r1, #32
   1bae0:	bl	116ac <memset@plt>
   1bae4:	add	r6, r6, r5
   1bae8:	cmp	r7, #0
   1baec:	bne	1cb9c <__assert_fail@plt+0xb37c>
   1baf0:	ldr	r3, [sp, #44]	; 0x2c
   1baf4:	cmp	r3, #0
   1baf8:	bne	1bb68 <__assert_fail@plt+0xa348>
   1bafc:	mov	r2, r8
   1bb00:	add	r1, sp, #97	; 0x61
   1bb04:	mov	r0, r6
   1bb08:	bl	11490 <memcpy@plt>
   1bb0c:	add	r8, r6, r8
   1bb10:	ldr	r2, [sp, #32]
   1bb14:	mov	r6, r8
   1bb18:	ldr	r3, [sp, #28]
   1bb1c:	add	r3, r3, r2
   1bb20:	str	r3, [sp, #28]
   1bb24:	b	1b454 <__assert_fail@plt+0x9c34>
   1bb28:	mov	r7, #0
   1bb2c:	mov	r2, #32
   1bb30:	mov	r3, #37	; 0x25
   1bb34:	strb	r2, [sp, #80]	; 0x50
   1bb38:	strb	r3, [sp, #81]	; 0x51
   1bb3c:	add	r3, sp, #80	; 0x50
   1bb40:	str	r3, [sp, #32]
   1bb44:	strb	r9, [sp, #82]	; 0x52
   1bb48:	add	ip, sp, #83	; 0x53
   1bb4c:	mov	r2, r3
   1bb50:	b	1ba4c <__assert_fail@plt+0xa22c>
   1bb54:	ldr	r1, [sp, #32]
   1bb58:	mov	r2, r7
   1bb5c:	mov	r0, r6
   1bb60:	bl	11490 <memcpy@plt>
   1bb64:	b	1b934 <__assert_fail@plt+0xa114>
   1bb68:	cmp	r8, #0
   1bb6c:	beq	1cdb8 <__assert_fail@plt+0xb598>
   1bb70:	bl	115ec <__ctype_toupper_loc@plt>
   1bb74:	add	r8, r6, r8
   1bb78:	add	r3, sp, #96	; 0x60
   1bb7c:	add	r9, r3, r9
   1bb80:	mov	r3, r8
   1bb84:	ldrb	r1, [r9, #-1]!
   1bb88:	ldr	r2, [r0]
   1bb8c:	ldr	r2, [r2, r1, lsl #2]
   1bb90:	strb	r2, [r3, #-1]!
   1bb94:	cmp	r6, r3
   1bb98:	bne	1bb84 <__assert_fail@plt+0xa364>
   1bb9c:	b	1bb10 <__assert_fail@plt+0xa2f0>
   1bba0:	cmp	r9, #79	; 0x4f
   1bba4:	bne	1ba20 <__assert_fail@plt+0xa200>
   1bba8:	b	1b87c <__assert_fail@plt+0xa05c>
   1bbac:	cmp	r9, #0
   1bbb0:	bne	1b87c <__assert_fail@plt+0xa05c>
   1bbb4:	ldr	r3, [sp, #44]	; 0x2c
   1bbb8:	cmp	r7, #0
   1bbbc:	moveq	r7, r3
   1bbc0:	mov	r2, #32
   1bbc4:	add	r0, sp, #80	; 0x50
   1bbc8:	mov	r3, #37	; 0x25
   1bbcc:	str	r7, [sp, #44]	; 0x2c
   1bbd0:	strb	r2, [sp, #80]	; 0x50
   1bbd4:	str	r0, [sp, #32]
   1bbd8:	strb	r3, [sp, #81]	; 0x51
   1bbdc:	add	ip, sp, #82	; 0x52
   1bbe0:	mov	r7, #0
   1bbe4:	mov	r2, r0
   1bbe8:	b	1ba4c <__assert_fail@plt+0xa22c>
   1bbec:	cmp	r9, #69	; 0x45
   1bbf0:	beq	1bb28 <__assert_fail@plt+0xa308>
   1bbf4:	ldr	r3, [sp, #40]	; 0x28
   1bbf8:	ldr	r0, [pc, #1880]	; 1c358 <__assert_fail@plt+0xab38>
   1bbfc:	mvn	ip, #98	; 0x62
   1bc00:	ldr	r2, [r3, #20]
   1bc04:	add	r3, r2, #1888	; 0x760
   1bc08:	add	r3, r3, #12
   1bc0c:	cmp	r3, r0
   1bc10:	ldr	r0, [pc, #1912]	; 1c390 <__assert_fail@plt+0xab70>
   1bc14:	movhi	r3, #0
   1bc18:	movls	r3, #1
   1bc1c:	cmp	r2, r0
   1bc20:	mla	r3, ip, r3, r2
   1bc24:	movge	ip, #0
   1bc28:	movlt	ip, #1
   1bc2c:	str	ip, [sp, #52]	; 0x34
   1bc30:	ldr	ip, [pc, #1896]	; 1c3a0 <__assert_fail@plt+0xab80>
   1bc34:	cmp	sl, #0
   1bc38:	smull	lr, ip, ip, r3
   1bc3c:	asr	r3, r3, #31
   1bc40:	rsb	r3, r3, ip, asr #5
   1bc44:	add	r3, r3, #19
   1bc48:	bne	1cc64 <__assert_fail@plt+0xb444>
   1bc4c:	ldr	ip, [sp, #1164]	; 0x48c
   1bc50:	cmp	r2, r0
   1bc54:	movlt	r2, #0
   1bc58:	movge	r2, #1
   1bc5c:	cmp	ip, #43	; 0x2b
   1bc60:	beq	1ccac <__assert_fail@plt+0xb48c>
   1bc64:	mov	sl, ip
   1bc68:	mov	lr, #0
   1bc6c:	mov	ip, #2
   1bc70:	mov	r0, #0
   1bc74:	cmp	r9, #79	; 0x4f
   1bc78:	movne	r2, #0
   1bc7c:	andeq	r2, r2, #1
   1bc80:	cmp	r2, #0
   1bc84:	uxtbne	r1, r1
   1bc88:	bne	1bb28 <__assert_fail@plt+0xa308>
   1bc8c:	ldr	r2, [sp, #52]	; 0x34
   1bc90:	cmp	r2, #0
   1bc94:	rsbne	r3, r3, #0
   1bc98:	add	r2, sp, #80	; 0x50
   1bc9c:	add	r7, sp, #94	; 0x5e
   1bca0:	str	r2, [sp, #32]
   1bca4:	ldr	r9, [pc, #1712]	; 1c35c <__assert_fail@plt+0xab3c>
   1bca8:	mov	r2, r7
   1bcac:	mov	r7, r3
   1bcb0:	mov	r3, r2
   1bcb4:	tst	r0, #1
   1bcb8:	movne	r2, #58	; 0x3a
   1bcbc:	mov	r8, r3
   1bcc0:	strbne	r2, [r3, #-1]
   1bcc4:	subne	r8, r3, #1
   1bcc8:	umull	r3, r2, r9, r7
   1bccc:	asrs	r0, r0, #1
   1bcd0:	lsr	r2, r2, #3
   1bcd4:	movne	r1, #1
   1bcd8:	add	r3, r2, r2, lsl #2
   1bcdc:	moveq	r1, #0
   1bce0:	sub	r3, r7, r3, lsl #1
   1bce4:	cmp	r2, #0
   1bce8:	orrne	r1, r1, #1
   1bcec:	add	r3, r3, #48	; 0x30
   1bcf0:	cmp	r1, #0
   1bcf4:	strb	r3, [r8, #-1]
   1bcf8:	mov	r7, r2
   1bcfc:	sub	r3, r8, #1
   1bd00:	bne	1bcb4 <__assert_fail@plt+0xa494>
   1bd04:	mov	r7, r3
   1bd08:	cmp	sl, #0
   1bd0c:	moveq	r9, #1
   1bd10:	moveq	sl, #48	; 0x30
   1bd14:	beq	1bd20 <__assert_fail@plt+0xa500>
   1bd18:	subs	r9, sl, #45	; 0x2d
   1bd1c:	movne	r9, #1
   1bd20:	ldr	r3, [sp, #52]	; 0x34
   1bd24:	cmp	r5, #0
   1bd28:	movlt	r5, ip
   1bd2c:	cmp	r3, #0
   1bd30:	bne	1cb7c <__assert_fail@plt+0xb35c>
   1bd34:	cmp	lr, #0
   1bd38:	beq	1cbd4 <__assert_fail@plt+0xb3b4>
   1bd3c:	mov	r3, #43	; 0x2b
   1bd40:	ldr	r2, [sp, #32]
   1bd44:	add	r8, r2, #14
   1bd48:	sub	r2, r8, r7
   1bd4c:	sub	r8, r5, #1
   1bd50:	sub	r8, r8, r2
   1bd54:	str	r2, [sp, #32]
   1bd58:	cmp	r8, #0
   1bd5c:	movle	r2, #0
   1bd60:	andgt	r2, r9, #1
   1bd64:	cmp	r2, #0
   1bd68:	moveq	r8, #0
   1bd6c:	cmp	sl, #95	; 0x5f
   1bd70:	beq	1cc04 <__assert_fail@plt+0xb3e4>
   1bd74:	ldr	r2, [sp, #36]	; 0x24
   1bd78:	ldr	r1, [sp, #28]
   1bd7c:	sub	r2, r2, r1
   1bd80:	cmp	r2, #1
   1bd84:	bls	1b4b4 <__assert_fail@plt+0x9c94>
   1bd88:	cmp	r6, #0
   1bd8c:	strbne	r3, [r6], #1
   1bd90:	ldr	r3, [sp, #28]
   1bd94:	sub	r5, r5, #1
   1bd98:	cmp	r5, #0
   1bd9c:	movlt	r9, #0
   1bda0:	andge	r9, r9, #1
   1bda4:	add	r3, r3, #1
   1bda8:	cmp	r9, #0
   1bdac:	str	r3, [sp, #28]
   1bdb0:	ldr	r8, [sp, #32]
   1bdb4:	bne	1bdbc <__assert_fail@plt+0xa59c>
   1bdb8:	mov	r5, r9
   1bdbc:	ldr	r3, [sp, #36]	; 0x24
   1bdc0:	ldr	r2, [sp, #28]
   1bdc4:	cmp	r5, r8
   1bdc8:	movcs	r9, r5
   1bdcc:	movcc	r9, r8
   1bdd0:	sub	r3, r3, r2
   1bdd4:	cmp	r9, r3
   1bdd8:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1bddc:	cmp	r6, #0
   1bde0:	beq	1b938 <__assert_fail@plt+0xa118>
   1bde4:	cmp	r5, r8
   1bde8:	bls	1be10 <__assert_fail@plt+0xa5f0>
   1bdec:	cmp	sl, #43	; 0x2b
   1bdf0:	cmpne	sl, #48	; 0x30
   1bdf4:	sub	r5, r5, r8
   1bdf8:	mov	r0, r6
   1bdfc:	mov	r2, r5
   1be00:	moveq	r1, #48	; 0x30
   1be04:	movne	r1, #32
   1be08:	bl	116ac <memset@plt>
   1be0c:	add	r6, r6, r5
   1be10:	ldr	r3, [sp, #44]	; 0x2c
   1be14:	cmp	r3, #0
   1be18:	beq	1cb84 <__assert_fail@plt+0xb364>
   1be1c:	cmp	r8, #0
   1be20:	beq	1b938 <__assert_fail@plt+0xa118>
   1be24:	add	r6, r6, r8
   1be28:	bl	115ec <__ctype_toupper_loc@plt>
   1be2c:	add	r8, r7, r8
   1be30:	mov	r3, r6
   1be34:	ldrb	r1, [r8, #-1]!
   1be38:	ldr	r2, [r0]
   1be3c:	cmp	r7, r8
   1be40:	ldr	r2, [r2, r1, lsl #2]
   1be44:	strb	r2, [r3, #-1]!
   1be48:	bne	1be34 <__assert_fail@plt+0xa614>
   1be4c:	b	1b938 <__assert_fail@plt+0xa118>
   1be50:	ldr	lr, [sp, #40]	; 0x28
   1be54:	add	ip, sp, #96	; 0x60
   1be58:	mvn	r7, #0
   1be5c:	ldm	lr!, {r0, r1, r2, r3}
   1be60:	stmia	ip!, {r0, r1, r2, r3}
   1be64:	ldm	lr!, {r0, r1, r2, r3}
   1be68:	stmia	ip!, {r0, r1, r2, r3}
   1be6c:	ldm	lr, {r0, r1, r2}
   1be70:	str	r7, [sp, #124]	; 0x7c
   1be74:	stm	ip, {r0, r1, r2}
   1be78:	add	r1, sp, #96	; 0x60
   1be7c:	ldr	r0, [sp, #1176]	; 0x498
   1be80:	bl	21694 <__assert_fail@plt+0xfe74>
   1be84:	ldr	r3, [sp, #124]	; 0x7c
   1be88:	cmp	r3, #0
   1be8c:	blt	1cd3c <__assert_fail@plt+0xb51c>
   1be90:	lsr	r3, r0, #31
   1be94:	str	r3, [sp, #52]	; 0x34
   1be98:	cmp	r0, #0
   1be9c:	add	r3, sp, #80	; 0x50
   1bea0:	str	r3, [sp, #32]
   1bea4:	add	r7, sp, #94	; 0x5e
   1bea8:	blt	1bee0 <__assert_fail@plt+0xa6c0>
   1beac:	smull	r3, r2, fp, r0
   1beb0:	asr	r3, r0, #31
   1beb4:	rsb	r3, r3, r2, asr #2
   1beb8:	mov	r2, r3
   1bebc:	add	r3, r3, r3, lsl #2
   1bec0:	sub	r3, r0, r3, lsl #1
   1bec4:	add	r3, r3, #48	; 0x30
   1bec8:	subs	r0, r2, #0
   1becc:	strb	r3, [r7, #-1]!
   1bed0:	bne	1beac <__assert_fail@plt+0xa68c>
   1bed4:	mov	lr, #0
   1bed8:	mov	ip, #1
   1bedc:	b	1bd08 <__assert_fail@plt+0xa4e8>
   1bee0:	smull	r3, r2, fp, r0
   1bee4:	asr	r3, r0, #31
   1bee8:	rsb	r3, r3, r2, asr #2
   1beec:	mov	r2, r3
   1bef0:	add	r3, r3, r3, lsl #2
   1bef4:	sub	r3, r0, r3, lsl #1
   1bef8:	rsb	r3, r3, #48	; 0x30
   1befc:	subs	r0, r2, #0
   1bf00:	strb	r3, [r7, #-1]!
   1bf04:	bne	1bee0 <__assert_fail@plt+0xa6c0>
   1bf08:	b	1bed4 <__assert_fail@plt+0xa6b4>
   1bf0c:	cmp	r9, #0
   1bf10:	bne	1b87c <__assert_fail@plt+0xa05c>
   1bf14:	clz	r3, sl
   1bf18:	lsr	r3, r3, #5
   1bf1c:	ands	r3, r3, r5, lsr #31
   1bf20:	bne	1cce4 <__assert_fail@plt+0xb4c4>
   1bf24:	sub	r7, r5, #6
   1bf28:	ldr	r9, [pc, #1124]	; 1c394 <__assert_fail@plt+0xab74>
   1bf2c:	bic	r7, r7, r7, asr #31
   1bf30:	ldr	r3, [sp, #1180]	; 0x49c
   1bf34:	str	r7, [sp, #8]
   1bf38:	str	r3, [sp, #20]
   1bf3c:	ldr	r3, [sp, #1176]	; 0x498
   1bf40:	str	sl, [sp, #4]
   1bf44:	str	r3, [sp, #16]
   1bf48:	ldr	r3, [sp, #1172]	; 0x494
   1bf4c:	mov	r2, r9
   1bf50:	str	r3, [sp, #12]
   1bf54:	ldr	r3, [sp, #44]	; 0x2c
   1bf58:	mvn	r1, #0
   1bf5c:	str	r3, [sp]
   1bf60:	mov	r0, #0
   1bf64:	ldr	r3, [sp, #40]	; 0x28
   1bf68:	bl	1b34c <__assert_fail@plt+0x9b2c>
   1bf6c:	cmp	sl, #45	; 0x2d
   1bf70:	moveq	r3, #0
   1bf74:	bicne	r3, r5, r5, asr #31
   1bf78:	mov	r8, r0
   1bf7c:	ldr	r1, [sp, #36]	; 0x24
   1bf80:	ldr	r0, [sp, #28]
   1bf84:	cmp	r3, r8
   1bf88:	movcs	r2, r3
   1bf8c:	movcc	r2, r8
   1bf90:	sub	r1, r1, r0
   1bf94:	cmp	r2, r1
   1bf98:	str	r2, [sp, #32]
   1bf9c:	str	r1, [sp, #52]	; 0x34
   1bfa0:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1bfa4:	cmp	r6, #0
   1bfa8:	beq	1bb18 <__assert_fail@plt+0xa2f8>
   1bfac:	cmp	r3, r8
   1bfb0:	bls	1bfdc <__assert_fail@plt+0xa7bc>
   1bfb4:	cmp	sl, #43	; 0x2b
   1bfb8:	cmpne	sl, #48	; 0x30
   1bfbc:	sub	r5, r3, r8
   1bfc0:	moveq	r1, #48	; 0x30
   1bfc4:	movne	r1, #32
   1bfc8:	mov	r0, r6
   1bfcc:	mov	r2, r5
   1bfd0:	bl	116ac <memset@plt>
   1bfd4:	ldr	r1, [sp, #52]	; 0x34
   1bfd8:	add	r6, r6, r5
   1bfdc:	ldr	r3, [sp, #1180]	; 0x49c
   1bfe0:	mov	r2, r9
   1bfe4:	str	r3, [sp, #20]
   1bfe8:	ldr	r3, [sp, #1176]	; 0x498
   1bfec:	mov	r0, r6
   1bff0:	str	r3, [sp, #16]
   1bff4:	ldr	r3, [sp, #1172]	; 0x494
   1bff8:	str	r7, [sp, #8]
   1bffc:	str	r3, [sp, #12]
   1c000:	ldr	r3, [sp, #44]	; 0x2c
   1c004:	str	sl, [sp, #4]
   1c008:	str	r3, [sp]
   1c00c:	ldr	r3, [sp, #40]	; 0x28
   1c010:	bl	1b34c <__assert_fail@plt+0x9b2c>
   1c014:	add	r6, r6, r8
   1c018:	ldr	r2, [sp, #32]
   1c01c:	b	1bb18 <__assert_fail@plt+0xa2f8>
   1c020:	cmp	r9, #0
   1c024:	bne	1b87c <__assert_fail@plt+0xa05c>
   1c028:	mvn	r7, #0
   1c02c:	ldr	r9, [pc, #812]	; 1c360 <__assert_fail@plt+0xab40>
   1c030:	b	1bf30 <__assert_fail@plt+0xa710>
   1c034:	cmp	r9, #69	; 0x45
   1c038:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c03c:	ldr	r3, [sp, #40]	; 0x28
   1c040:	ldr	r8, [r3, #28]
   1c044:	ldr	r2, [r3, #24]
   1c048:	ldr	r7, [r3, #20]
   1c04c:	str	r2, [sp, #32]
   1c050:	sub	r2, r8, r2
   1c054:	add	r2, r2, #380	; 0x17c
   1c058:	ldr	r3, [pc, #844]	; 1c3ac <__assert_fail@plt+0xab8c>
   1c05c:	add	r2, r2, #2
   1c060:	cmp	r7, #0
   1c064:	smull	r0, r3, r3, r2
   1c068:	add	r3, r3, r2
   1c06c:	asr	r0, r2, #31
   1c070:	rsb	r0, r0, r3, asr #2
   1c074:	mvnge	r3, #99	; 0x63
   1c078:	rsb	r0, r0, r0, lsl #3
   1c07c:	sub	r2, r2, r0
   1c080:	sub	r2, r8, r2
   1c084:	movlt	r3, #300	; 0x12c
   1c088:	adds	r2, r2, #3
   1c08c:	str	r2, [sp, #52]	; 0x34
   1c090:	add	r3, r3, r7
   1c094:	bmi	1cee4 <__assert_fail@plt+0xb6c4>
   1c098:	tst	r3, #3
   1c09c:	ldrne	r3, [pc, #772]	; 1c3a8 <__assert_fail@plt+0xab88>
   1c0a0:	bne	1c0e8 <__assert_fail@plt+0xa8c8>
   1c0a4:	ldr	r2, [pc, #756]	; 1c3a0 <__assert_fail@plt+0xab80>
   1c0a8:	mov	r0, #100	; 0x64
   1c0ac:	smull	r2, ip, r2, r3
   1c0b0:	asr	r2, r3, #31
   1c0b4:	rsb	lr, r2, ip, asr #5
   1c0b8:	mul	r0, r0, lr
   1c0bc:	cmp	r3, r0
   1c0c0:	ldrne	r3, [pc, #732]	; 1c3a4 <__assert_fail@plt+0xab84>
   1c0c4:	bne	1c0e8 <__assert_fail@plt+0xa8c8>
   1c0c8:	rsb	r2, r2, ip, asr #7
   1c0cc:	mov	ip, #400	; 0x190
   1c0d0:	ldr	r0, [pc, #720]	; 1c3a8 <__assert_fail@plt+0xab88>
   1c0d4:	mul	r2, ip, r2
   1c0d8:	sub	ip, ip, #34	; 0x22
   1c0dc:	cmp	r3, r2
   1c0e0:	movne	r3, r0
   1c0e4:	moveq	r3, ip
   1c0e8:	ldr	r2, [sp, #32]
   1c0ec:	sub	r3, r8, r3
   1c0f0:	sub	r2, r3, r2
   1c0f4:	ldr	r0, [pc, #688]	; 1c3ac <__assert_fail@plt+0xab8c>
   1c0f8:	add	r2, r2, #380	; 0x17c
   1c0fc:	add	r2, r2, #2
   1c100:	smull	r0, ip, r0, r2
   1c104:	add	ip, ip, r2
   1c108:	asr	r0, r2, #31
   1c10c:	rsb	r0, r0, ip, asr #2
   1c110:	rsb	r0, r0, r0, lsl #3
   1c114:	sub	r2, r2, r0
   1c118:	sub	r3, r3, r2
   1c11c:	adds	r3, r3, #3
   1c120:	movmi	r0, #0
   1c124:	movpl	r0, #1
   1c128:	ldrmi	r3, [sp, #52]	; 0x34
   1c12c:	ldrmi	lr, [pc, #604]	; 1c390 <__assert_fail@plt+0xab70>
   1c130:	ldrpl	lr, [pc, #556]	; 1c364 <__assert_fail@plt+0xab44>
   1c134:	movmi	r8, r0
   1c138:	movpl	r8, r0
   1c13c:	cmp	r1, #71	; 0x47
   1c140:	beq	1cd6c <__assert_fail@plt+0xb54c>
   1c144:	cmp	r1, #103	; 0x67
   1c148:	bne	1cd4c <__assert_fail@plt+0xb52c>
   1c14c:	ldr	r3, [pc, #588]	; 1c3a0 <__assert_fail@plt+0xab80>
   1c150:	mov	r0, #100	; 0x64
   1c154:	smull	r2, r3, r3, r7
   1c158:	asr	r2, r7, #31
   1c15c:	rsb	r2, r2, r3, asr #5
   1c160:	ldr	r3, [pc, #568]	; 1c3a0 <__assert_fail@plt+0xab80>
   1c164:	mul	r2, r0, r2
   1c168:	sub	r2, r7, r2
   1c16c:	add	r2, r2, r8
   1c170:	smull	r3, ip, r3, r2
   1c174:	asr	r3, r2, #31
   1c178:	rsb	r3, r3, ip, asr #5
   1c17c:	mul	r3, r0, r3
   1c180:	subs	r3, r2, r3
   1c184:	bmi	1cc74 <__assert_fail@plt+0xb454>
   1c188:	cmp	sl, #0
   1c18c:	beq	1cc88 <__assert_fail@plt+0xb468>
   1c190:	mov	r2, #1
   1c194:	mov	r0, #0
   1c198:	str	r0, [sp, #52]	; 0x34
   1c19c:	cmp	sl, #43	; 0x2b
   1c1a0:	beq	1ccac <__assert_fail@plt+0xb48c>
   1c1a4:	mov	lr, #0
   1c1a8:	mov	ip, #2
   1c1ac:	b	1bc70 <__assert_fail@plt+0xa450>
   1c1b0:	cmp	r9, #69	; 0x45
   1c1b4:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c1b8:	ldr	r3, [sp, #40]	; 0x28
   1c1bc:	mov	ip, #2
   1c1c0:	ldr	r2, [r3, #12]
   1c1c4:	mov	r3, r2
   1c1c8:	mov	r0, #0
   1c1cc:	lsr	r2, r2, #31
   1c1d0:	cmp	r3, r0
   1c1d4:	str	r2, [sp, #52]	; 0x34
   1c1d8:	mov	lr, r0
   1c1dc:	movlt	r2, #0
   1c1e0:	movge	r2, #1
   1c1e4:	b	1bc74 <__assert_fail@plt+0xa454>
   1c1e8:	mov	r8, #0
   1c1ec:	ldr	r2, [sp, #40]	; 0x28
   1c1f0:	ldr	r3, [r2, #32]
   1c1f4:	cmp	r3, #0
   1c1f8:	blt	1b454 <__assert_fail@plt+0x9c34>
   1c1fc:	ldr	lr, [r2, #36]	; 0x24
   1c200:	cmp	lr, #0
   1c204:	blt	1cdfc <__assert_fail@plt+0xb5dc>
   1c208:	bne	1ccd4 <__assert_fail@plt+0xb4b4>
   1c20c:	ldr	r3, [sp, #60]	; 0x3c
   1c210:	ldrb	r3, [r3]
   1c214:	cmp	r3, #45	; 0x2d
   1c218:	moveq	r2, lr
   1c21c:	movne	r2, #1
   1c220:	movne	r3, lr
   1c224:	moveq	r3, #1
   1c228:	str	r3, [sp, #52]	; 0x34
   1c22c:	ldr	r3, [pc, #308]	; 1c368 <__assert_fail@plt+0xab48>
   1c230:	ldr	r7, [pc, #304]	; 1c368 <__assert_fail@plt+0xab48>
   1c234:	smull	r3, ip, r3, lr
   1c238:	ldr	r3, [pc, #300]	; 1c36c <__assert_fail@plt+0xab4c>
   1c23c:	add	ip, ip, lr
   1c240:	smull	r0, r3, r3, lr
   1c244:	asr	r0, lr, #31
   1c248:	rsb	ip, r0, ip, asr #5
   1c24c:	str	r0, [sp, #72]	; 0x48
   1c250:	smull	r7, r0, r7, ip
   1c254:	add	r0, r0, ip
   1c258:	asr	r7, ip, #31
   1c25c:	rsb	r0, r7, r0, asr #5
   1c260:	add	r3, r3, lr
   1c264:	rsb	r0, r0, r0, lsl #4
   1c268:	str	r0, [sp, #76]	; 0x4c
   1c26c:	ldr	r0, [sp, #72]	; 0x48
   1c270:	rsb	r7, ip, ip, lsl #4
   1c274:	rsb	r3, r0, r3, asr #11
   1c278:	ldr	r0, [sp, #76]	; 0x4c
   1c27c:	sub	r7, lr, r7, lsl #2
   1c280:	sub	r0, ip, r0, lsl #2
   1c284:	cmp	r8, #3
   1c288:	ldrls	pc, [pc, r8, lsl #2]
   1c28c:	b	1b87c <__assert_fail@plt+0xa05c>
   1c290:	andeq	ip, r1, ip, asr #28
   1c294:	andeq	ip, r1, r4, lsr lr
   1c298:	andeq	ip, r1, r8, lsr #29
   1c29c:	andeq	ip, r1, ip, lsl lr
   1c2a0:	ldr	r3, [sp, #44]	; 0x2c
   1c2a4:	cmp	r7, #0
   1c2a8:	movne	r3, r7
   1c2ac:	cmp	r9, #69	; 0x45
   1c2b0:	str	r3, [sp, #44]	; 0x2c
   1c2b4:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c2b8:	uxtb	r1, r1
   1c2bc:	mov	r7, #0
   1c2c0:	b	1ba24 <__assert_fail@plt+0xa204>
   1c2c4:	cmp	r9, #69	; 0x45
   1c2c8:	beq	1bb28 <__assert_fail@plt+0xa308>
   1c2cc:	ldr	r3, [sp, #40]	; 0x28
   1c2d0:	mov	r0, #100	; 0x64
   1c2d4:	ldr	r2, [r3, #20]
   1c2d8:	ldr	r3, [pc, #192]	; 1c3a0 <__assert_fail@plt+0xab80>
   1c2dc:	smull	r3, ip, r3, r2
   1c2e0:	asr	r3, r2, #31
   1c2e4:	rsb	r3, r3, ip, asr #5
   1c2e8:	mul	r3, r0, r3
   1c2ec:	subs	r3, r2, r3
   1c2f0:	bpl	1c188 <__assert_fail@plt+0xa968>
   1c2f4:	sub	r0, r0, #2000	; 0x7d0
   1c2f8:	cmp	r2, r0
   1c2fc:	rsblt	r3, r3, #0
   1c300:	addge	r3, r3, #100	; 0x64
   1c304:	b	1c188 <__assert_fail@plt+0xa968>
   1c308:	cmp	r9, #69	; 0x45
   1c30c:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c310:	ldr	r2, [sp, #40]	; 0x28
   1c314:	mov	ip, #2
   1c318:	ldr	r3, [r2, #28]
   1c31c:	ldr	r2, [r2, #24]
   1c320:	sub	r3, r3, r2
   1c324:	ldr	r2, [pc, #128]	; 1c3ac <__assert_fail@plt+0xab8c>
   1c328:	add	r3, r3, #7
   1c32c:	smull	r0, r2, r2, r3
   1c330:	add	r2, r2, r3
   1c334:	asr	r3, r3, #31
   1c338:	rsb	r2, r3, r2, asr ip
   1c33c:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c340:	ldr	r9, [pc, #40]	; 1c370 <__assert_fail@plt+0xab50>
   1c344:	mvn	r7, #0
   1c348:	b	1bf30 <__assert_fail@plt+0xa710>
   1c34c:	andeq	r4, r2, r8, asr r9
   1c350:	strbtvs	r6, [r6], -r7, ror #12
   1c354:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1c358:	andeq	r0, r0, fp, ror #14
   1c35c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c360:	ldrdeq	r6, [r2], -r0
   1c364:			; <UNDEFINED> instruction: 0xfffff893
   1c368:	stmhi	r8, {r0, r3, r7, fp, pc}
   1c36c:			; <UNDEFINED> instruction: 0x91a2b3c5
   1c370:	ldrdeq	r6, [r2], -ip
   1c374:	andeq	r6, r2, r8, asr #5
   1c378:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   1c37c:	ldmvs	fp, {r0, r2, r3, r5, r7, r8, r9, fp, pc}^
   1c380:	ldrbtne	fp, [r8], #1417	; 0x589
   1c384:	tstmi	fp, #2096	; 0x830
   1c388:	blvs	180ed3c <optarg@@GLIBC_2.4+0x17d7b54>
   1c38c:	strbpl	r3, [r6, #2953]!	; 0xb89
   1c390:			; <UNDEFINED> instruction: 0xfffff894
   1c394:	andeq	r6, r2, r8, ror #5
   1c398:	andeq	r2, r0, pc, lsl #14
   1c39c:	andeq	r2, r0, r0, lsl r7
   1c3a0:	mvnpl	r8, pc, lsl r5
   1c3a4:	andeq	r0, r0, lr, ror #2
   1c3a8:	andeq	r0, r0, sp, ror #2
   1c3ac:	subls	r2, r9, #-1828716544	; 0x93000000
   1c3b0:			; <UNDEFINED> instruction: 0xfffff895
   1c3b4:	ldr	r2, [sp, #32]
   1c3b8:	sub	r3, r4, #1
   1c3bc:	cmp	r3, r2
   1c3c0:	movne	r4, r3
   1c3c4:	bne	1b87c <__assert_fail@plt+0xa05c>
   1c3c8:	mvn	r3, r5
   1c3cc:	cmp	sl, #45	; 0x2d
   1c3d0:	lsr	r3, r3, #31
   1c3d4:	moveq	r3, #0
   1c3d8:	cmp	r3, #0
   1c3dc:	moveq	r5, #1
   1c3e0:	beq	1c3f0 <__assert_fail@plt+0xabd0>
   1c3e4:	cmp	r5, #1
   1c3e8:	mov	r3, r5
   1c3ec:	movcc	r5, #1
   1c3f0:	ldr	r2, [sp, #36]	; 0x24
   1c3f4:	ldr	r0, [sp, #28]
   1c3f8:	sub	r2, r2, r0
   1c3fc:	cmp	r2, r5
   1c400:	bls	1b4b4 <__assert_fail@plt+0x9c94>
   1c404:	cmp	r6, #0
   1c408:	beq	1c440 <__assert_fail@plt+0xac20>
   1c40c:	cmp	r3, #1
   1c410:	bls	1c43c <__assert_fail@plt+0xac1c>
   1c414:	sub	r7, r3, #1
   1c418:	cmp	sl, #43	; 0x2b
   1c41c:	cmpne	sl, #48	; 0x30
   1c420:	mov	r2, r7
   1c424:	bne	1cecc <__assert_fail@plt+0xb6ac>
   1c428:	mov	r1, #48	; 0x30
   1c42c:	mov	r0, r6
   1c430:	bl	116ac <memset@plt>
   1c434:	ldrb	r1, [r4]
   1c438:	add	r6, r6, r7
   1c43c:	strb	r1, [r6], #1
   1c440:	ldr	r3, [sp, #28]
   1c444:	add	r3, r3, r5
   1c448:	str	r3, [sp, #28]
   1c44c:	b	1b454 <__assert_fail@plt+0x9c34>
   1c450:	cmp	r9, #69	; 0x45
   1c454:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c458:	ldr	r3, [sp, #40]	; 0x28
   1c45c:	mov	ip, #1
   1c460:	ldr	r2, [r3, #24]
   1c464:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c468:	ldr	r3, [sp, #40]	; 0x28
   1c46c:	ldr	r2, [pc, #-200]	; 1c3ac <__assert_fail@plt+0xab8c>
   1c470:	mov	ip, #1
   1c474:	ldr	r3, [r3, #24]
   1c478:	add	r3, r3, #6
   1c47c:	smull	r0, r2, r2, r3
   1c480:	add	r0, r2, r3
   1c484:	asr	r2, r3, #31
   1c488:	rsb	r2, r2, r0, asr #2
   1c48c:	rsb	r2, r2, r2, lsl #3
   1c490:	sub	r3, r3, r2
   1c494:	add	r2, r3, ip
   1c498:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c49c:	subs	r3, sl, #45	; 0x2d
   1c4a0:	movne	r3, #1
   1c4a4:	cmp	r5, #0
   1c4a8:	movlt	r3, #0
   1c4ac:	cmp	r3, #0
   1c4b0:	beq	1cf80 <__assert_fail@plt+0xb760>
   1c4b4:	cmp	r5, #1
   1c4b8:	movcs	r7, r5
   1c4bc:	movcc	r7, #1
   1c4c0:	ldr	r3, [sp, #36]	; 0x24
   1c4c4:	ldr	r2, [sp, #28]
   1c4c8:	sub	r3, r3, r2
   1c4cc:	cmp	r3, r7
   1c4d0:	bls	1b4b4 <__assert_fail@plt+0x9c94>
   1c4d4:	cmp	r6, #0
   1c4d8:	beq	1c510 <__assert_fail@plt+0xacf0>
   1c4dc:	cmp	r5, #1
   1c4e0:	bls	1c508 <__assert_fail@plt+0xace8>
   1c4e4:	cmp	sl, #43	; 0x2b
   1c4e8:	cmpne	sl, #48	; 0x30
   1c4ec:	sub	r5, r5, #1
   1c4f0:	mov	r0, r6
   1c4f4:	mov	r2, r5
   1c4f8:	moveq	r1, #48	; 0x30
   1c4fc:	movne	r1, #32
   1c500:	bl	116ac <memset@plt>
   1c504:	add	r6, r6, r5
   1c508:	mov	r3, #9
   1c50c:	strb	r3, [r6], #1
   1c510:	ldr	r3, [sp, #28]
   1c514:	add	r3, r3, r7
   1c518:	str	r3, [sp, #28]
   1c51c:	b	1b454 <__assert_fail@plt+0x9c34>
   1c520:	cmp	r9, #69	; 0x45
   1c524:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c528:	ldr	r3, [sp, #40]	; 0x28
   1c52c:	mov	ip, #2
   1c530:	ldr	r2, [r3, #4]
   1c534:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c538:	cmp	r9, #69	; 0x45
   1c53c:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c540:	ldr	r2, [sp, #56]	; 0x38
   1c544:	mov	ip, #2
   1c548:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c54c:	cmp	r9, #69	; 0x45
   1c550:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c554:	ldr	r3, [sp, #40]	; 0x28
   1c558:	mov	ip, #2
   1c55c:	ldr	r2, [r3, #8]
   1c560:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c564:	ldrb	r3, [r4, #1]
   1c568:	add	r0, r4, #1
   1c56c:	cmp	r3, #58	; 0x3a
   1c570:	movne	r8, #1
   1c574:	beq	1cf8c <__assert_fail@plt+0xb76c>
   1c578:	cmp	r3, #122	; 0x7a
   1c57c:	moveq	r4, r0
   1c580:	bne	1b87c <__assert_fail@plt+0xa05c>
   1c584:	b	1c1ec <__assert_fail@plt+0xa9cc>
   1c588:	cmp	r9, #69	; 0x45
   1c58c:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c590:	ldr	r3, [sp, #40]	; 0x28
   1c594:	ldr	r0, [pc, #-496]	; 1c3ac <__assert_fail@plt+0xab8c>
   1c598:	ldr	r2, [r3, #24]
   1c59c:	ldr	r3, [r3, #28]
   1c5a0:	add	r2, r2, #6
   1c5a4:	smull	ip, r0, r0, r2
   1c5a8:	add	ip, r0, r2
   1c5ac:	asr	r0, r2, #31
   1c5b0:	rsb	r0, r0, ip, asr #2
   1c5b4:	mov	ip, #2
   1c5b8:	rsb	r0, r0, r0, lsl #3
   1c5bc:	sub	r2, r2, r0
   1c5c0:	b	1c320 <__assert_fail@plt+0xab00>
   1c5c4:	cmp	r9, #69	; 0x45
   1c5c8:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c5cc:	ldr	r3, [sp, #40]	; 0x28
   1c5d0:	mov	ip, #2
   1c5d4:	ldr	r2, [r3]
   1c5d8:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c5dc:	mvn	r7, #0
   1c5e0:	ldr	r9, [pc, #-628]	; 1c374 <__assert_fail@plt+0xab54>
   1c5e4:	b	1bf30 <__assert_fail@plt+0xa710>
   1c5e8:	mov	r3, #1
   1c5ec:	cmp	r7, #0
   1c5f0:	moveq	r7, r3
   1c5f4:	moveq	r1, #112	; 0x70
   1c5f8:	movne	r3, #0
   1c5fc:	movne	r1, #112	; 0x70
   1c600:	strne	r3, [sp, #44]	; 0x2c
   1c604:	b	1ba24 <__assert_fail@plt+0xa204>
   1c608:	cmp	r9, #69	; 0x45
   1c60c:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c610:	cmp	r5, #0
   1c614:	movle	r5, #9
   1c618:	ldr	r3, [sp, #1180]	; 0x49c
   1c61c:	mov	r8, #9
   1c620:	b	1c634 <__assert_fail@plt+0xae14>
   1c624:	asr	r2, r3, #31
   1c628:	smull	r1, r3, fp, r3
   1c62c:	sub	r8, r8, #1
   1c630:	rsb	r3, r2, r3, asr #2
   1c634:	cmp	r8, r5
   1c638:	bgt	1c624 <__assert_fail@plt+0xae04>
   1c63c:	smull	r2, r1, fp, r3
   1c640:	asr	r2, r3, #31
   1c644:	rsb	r1, r2, r1, asr #2
   1c648:	cmp	r8, #1
   1c64c:	add	r0, r1, r1, lsl #2
   1c650:	mov	lr, r1
   1c654:	ble	1cfc8 <__assert_fail@plt+0xb7a8>
   1c658:	subs	r1, r3, r0, lsl #1
   1c65c:	beq	1c628 <__assert_fail@plt+0xae08>
   1c660:	sub	r0, r8, #1
   1c664:	add	ip, sp, #1120	; 0x460
   1c668:	add	ip, ip, r0
   1c66c:	add	r1, r1, #48	; 0x30
   1c670:	cmp	r0, #0
   1c674:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1c678:	beq	1cfc0 <__assert_fail@plt+0xb7a0>
   1c67c:	smull	r1, ip, fp, lr
   1c680:	ldr	r1, [pc, #-744]	; 1c3a0 <__assert_fail@plt+0xab80>
   1c684:	smull	r1, r0, r1, r3
   1c688:	asr	r1, lr, #31
   1c68c:	rsb	r1, r1, ip, asr #2
   1c690:	sub	ip, r8, #2
   1c694:	add	r1, r1, r1, lsl #2
   1c698:	cmp	ip, #0
   1c69c:	sub	r1, lr, r1, lsl #1
   1c6a0:	add	lr, sp, #1120	; 0x460
   1c6a4:	add	lr, lr, ip
   1c6a8:	add	r1, r1, #48	; 0x30
   1c6ac:	rsb	r0, r2, r0, asr #5
   1c6b0:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   1c6b4:	beq	1c840 <__assert_fail@plt+0xb020>
   1c6b8:	smull	r1, lr, fp, r0
   1c6bc:	ldr	r1, [pc, #-844]	; 1c378 <__assert_fail@plt+0xab58>
   1c6c0:	smull	r1, ip, r1, r3
   1c6c4:	asr	r1, r0, #31
   1c6c8:	rsb	r1, r1, lr, asr #2
   1c6cc:	rsb	lr, r2, ip, asr #6
   1c6d0:	add	r1, r1, r1, lsl #2
   1c6d4:	sub	ip, r8, #3
   1c6d8:	sub	r0, r0, r1, lsl #1
   1c6dc:	add	r1, sp, #1120	; 0x460
   1c6e0:	add	r1, r1, ip
   1c6e4:	add	r0, r0, #48	; 0x30
   1c6e8:	cmp	ip, #0
   1c6ec:	strb	r0, [r1, #-1040]	; 0xfffffbf0
   1c6f0:	ble	1c840 <__assert_fail@plt+0xb020>
   1c6f4:	smull	r1, ip, fp, lr
   1c6f8:	ldr	r1, [pc, #-900]	; 1c37c <__assert_fail@plt+0xab5c>
   1c6fc:	asr	r0, lr, #31
   1c700:	rsb	r0, r0, ip, asr #2
   1c704:	smull	ip, r1, r1, r3
   1c708:	add	r0, r0, r0, lsl #2
   1c70c:	sub	ip, r8, #4
   1c710:	sub	r0, lr, r0, lsl #1
   1c714:	add	lr, sp, #1120	; 0x460
   1c718:	add	lr, lr, ip
   1c71c:	add	r0, r0, #48	; 0x30
   1c720:	cmp	ip, #0
   1c724:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   1c728:	rsb	ip, r2, r1, asr #12
   1c72c:	ble	1c840 <__assert_fail@plt+0xb020>
   1c730:	smull	r1, lr, fp, ip
   1c734:	ldr	r0, [pc, #-956]	; 1c380 <__assert_fail@plt+0xab60>
   1c738:	asr	r1, ip, #31
   1c73c:	rsb	r1, r1, lr, asr #2
   1c740:	smull	lr, r0, r0, r3
   1c744:	add	r1, r1, r1, lsl #2
   1c748:	sub	lr, r8, #5
   1c74c:	sub	r1, ip, r1, lsl #1
   1c750:	add	ip, sp, #1120	; 0x460
   1c754:	add	ip, ip, lr
   1c758:	add	r1, r1, #48	; 0x30
   1c75c:	cmp	lr, #0
   1c760:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1c764:	rsb	lr, r2, r0, asr #13
   1c768:	ble	1c840 <__assert_fail@plt+0xb020>
   1c76c:	smull	r1, ip, fp, lr
   1c770:	ldr	r1, [pc, #-1012]	; 1c384 <__assert_fail@plt+0xab64>
   1c774:	asr	r0, lr, #31
   1c778:	rsb	r0, r0, ip, asr #2
   1c77c:	smull	ip, r1, r1, r3
   1c780:	add	r0, r0, r0, lsl #2
   1c784:	sub	ip, r8, #6
   1c788:	sub	r0, lr, r0, lsl #1
   1c78c:	add	lr, sp, #1120	; 0x460
   1c790:	add	lr, lr, ip
   1c794:	add	r0, r0, #48	; 0x30
   1c798:	cmp	ip, #0
   1c79c:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   1c7a0:	rsb	ip, r2, r1, asr #18
   1c7a4:	ble	1c840 <__assert_fail@plt+0xb020>
   1c7a8:	smull	r1, lr, fp, ip
   1c7ac:	ldr	r0, [pc, #-1068]	; 1c388 <__assert_fail@plt+0xab68>
   1c7b0:	asr	r1, ip, #31
   1c7b4:	rsb	r1, r1, lr, asr #2
   1c7b8:	smull	lr, r0, r0, r3
   1c7bc:	add	r1, r1, r1, lsl #2
   1c7c0:	sub	lr, r8, #7
   1c7c4:	sub	r1, ip, r1, lsl #1
   1c7c8:	add	ip, sp, #1120	; 0x460
   1c7cc:	add	ip, ip, lr
   1c7d0:	add	r1, r1, #48	; 0x30
   1c7d4:	cmp	lr, #0
   1c7d8:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1c7dc:	rsb	ip, r2, r0, asr #22
   1c7e0:	ble	1c840 <__assert_fail@plt+0xb020>
   1c7e4:	smull	r1, lr, fp, ip
   1c7e8:	ldr	r1, [pc, #-1124]	; 1c38c <__assert_fail@plt+0xab6c>
   1c7ec:	asr	r0, ip, #31
   1c7f0:	rsb	r0, r0, lr, asr #2
   1c7f4:	smull	r1, r3, r1, r3
   1c7f8:	add	r0, r0, r0, lsl #2
   1c7fc:	sub	r1, r8, #8
   1c800:	sub	r0, ip, r0, lsl #1
   1c804:	add	ip, sp, #1120	; 0x460
   1c808:	add	lr, ip, r1
   1c80c:	add	r0, r0, #48	; 0x30
   1c810:	cmp	r1, #1
   1c814:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   1c818:	rsb	r2, r2, r3, asr #25
   1c81c:	bne	1c840 <__assert_fail@plt+0xb020>
   1c820:	smull	r3, r1, fp, r2
   1c824:	asr	r3, r2, #31
   1c828:	rsb	r3, r3, r1, asr #2
   1c82c:	mov	r8, #9
   1c830:	add	r3, r3, r3, lsl #2
   1c834:	sub	r2, r2, r3, lsl #1
   1c838:	add	r3, r2, #48	; 0x30
   1c83c:	strb	r3, [sp, #80]	; 0x50
   1c840:	cmp	sl, #0
   1c844:	ldr	r3, [sp, #36]	; 0x24
   1c848:	ldr	r2, [sp, #28]
   1c84c:	moveq	sl, #48	; 0x30
   1c850:	cmp	r8, #0
   1c854:	movcs	r7, r8
   1c858:	movcc	r7, #0
   1c85c:	sub	r3, r3, r2
   1c860:	cmp	r7, r3
   1c864:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1c868:	cmp	r6, #0
   1c86c:	beq	1c890 <__assert_fail@plt+0xb070>
   1c870:	ldr	r3, [sp, #44]	; 0x2c
   1c874:	mov	r2, r8
   1c878:	cmp	r3, #0
   1c87c:	add	r1, sp, #80	; 0x50
   1c880:	mov	r0, r6
   1c884:	beq	1cfb8 <__assert_fail@plt+0xb798>
   1c888:	bl	1b30c <__assert_fail@plt+0x9aec>
   1c88c:	add	r6, r6, r8
   1c890:	cmp	sl, #45	; 0x2d
   1c894:	ldr	r3, [sp, #28]
   1c898:	subne	r5, r5, r8
   1c89c:	add	r7, r7, r3
   1c8a0:	ldr	r3, [sp, #36]	; 0x24
   1c8a4:	bicne	r5, r5, r5, asr #31
   1c8a8:	moveq	r5, #0
   1c8ac:	sub	r3, r3, r7
   1c8b0:	cmp	r5, r3
   1c8b4:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1c8b8:	cmp	r6, #0
   1c8bc:	beq	1c8e8 <__assert_fail@plt+0xb0c8>
   1c8c0:	cmp	r5, #0
   1c8c4:	beq	1c8e8 <__assert_fail@plt+0xb0c8>
   1c8c8:	cmp	sl, #43	; 0x2b
   1c8cc:	cmpne	sl, #48	; 0x30
   1c8d0:	mov	r0, r6
   1c8d4:	mov	r2, r5
   1c8d8:	moveq	r1, #48	; 0x30
   1c8dc:	movne	r1, #32
   1c8e0:	bl	116ac <memset@plt>
   1c8e4:	add	r6, r6, r5
   1c8e8:	add	r3, r5, r7
   1c8ec:	str	r3, [sp, #28]
   1c8f0:	b	1b454 <__assert_fail@plt+0x9c34>
   1c8f4:	cmp	r9, #69	; 0x45
   1c8f8:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c8fc:	ldr	r3, [sp, #40]	; 0x28
   1c900:	mov	r0, #0
   1c904:	mov	lr, r0
   1c908:	ldr	r3, [r3, #28]
   1c90c:	mov	ip, #3
   1c910:	cmn	r3, #1
   1c914:	movlt	r2, #1
   1c918:	movge	r2, r0
   1c91c:	str	r2, [sp, #52]	; 0x34
   1c920:	add	r3, r3, #1
   1c924:	movge	r2, #1
   1c928:	movlt	r2, r0
   1c92c:	b	1bc74 <__assert_fail@plt+0xa454>
   1c930:	cmp	r9, #69	; 0x45
   1c934:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c938:	ldr	r3, [sp, #40]	; 0x28
   1c93c:	ldr	r2, [r3, #12]
   1c940:	cmp	sl, #0
   1c944:	mov	ip, #2
   1c948:	moveq	sl, #95	; 0x5f
   1c94c:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1c950:	mvn	r3, r5
   1c954:	cmp	sl, #45	; 0x2d
   1c958:	lsr	r3, r3, #31
   1c95c:	moveq	r3, #0
   1c960:	cmp	r3, #0
   1c964:	beq	1cfac <__assert_fail@plt+0xb78c>
   1c968:	cmp	r5, #1
   1c96c:	movcs	r7, r5
   1c970:	movcc	r7, #1
   1c974:	ldr	r3, [sp, #36]	; 0x24
   1c978:	ldr	r2, [sp, #28]
   1c97c:	sub	r3, r3, r2
   1c980:	cmp	r3, r7
   1c984:	bls	1b4b4 <__assert_fail@plt+0x9c94>
   1c988:	cmp	r6, #0
   1c98c:	beq	1c510 <__assert_fail@plt+0xacf0>
   1c990:	cmp	r5, #1
   1c994:	bls	1c9bc <__assert_fail@plt+0xb19c>
   1c998:	cmp	sl, #43	; 0x2b
   1c99c:	cmpne	sl, #48	; 0x30
   1c9a0:	sub	r5, r5, #1
   1c9a4:	mov	r0, r6
   1c9a8:	mov	r2, r5
   1c9ac:	moveq	r1, #48	; 0x30
   1c9b0:	movne	r1, #32
   1c9b4:	bl	116ac <memset@plt>
   1c9b8:	add	r6, r6, r5
   1c9bc:	mov	r3, #10
   1c9c0:	strb	r3, [r6], #1
   1c9c4:	b	1c510 <__assert_fail@plt+0xacf0>
   1c9c8:	cmp	r9, #69	; 0x45
   1c9cc:	beq	1b87c <__assert_fail@plt+0xa05c>
   1c9d0:	ldr	r3, [sp, #40]	; 0x28
   1c9d4:	mov	r0, #0
   1c9d8:	mov	lr, r0
   1c9dc:	ldr	r3, [r3, #16]
   1c9e0:	mov	ip, #2
   1c9e4:	cmn	r3, #1
   1c9e8:	movlt	r2, #1
   1c9ec:	movge	r2, r0
   1c9f0:	str	r2, [sp, #52]	; 0x34
   1c9f4:	add	r3, r3, #1
   1c9f8:	movge	r2, #1
   1c9fc:	movlt	r2, r0
   1ca00:	b	1bc74 <__assert_fail@plt+0xa454>
   1ca04:	cmp	r9, #69	; 0x45
   1ca08:	beq	1b87c <__assert_fail@plt+0xa05c>
   1ca0c:	ldr	r2, [sp, #56]	; 0x38
   1ca10:	b	1c940 <__assert_fail@plt+0xb120>
   1ca14:	cmp	r9, #69	; 0x45
   1ca18:	beq	1b87c <__assert_fail@plt+0xa05c>
   1ca1c:	ldr	r3, [sp, #40]	; 0x28
   1ca20:	ldr	r2, [r3, #8]
   1ca24:	b	1c940 <__assert_fail@plt+0xb120>
   1ca28:	ldr	r3, [sp, #40]	; 0x28
   1ca2c:	cmp	r9, #79	; 0x4f
   1ca30:	ldr	r3, [r3, #16]
   1ca34:	beq	1bb28 <__assert_fail@plt+0xa308>
   1ca38:	add	r2, r3, r3, lsl #2
   1ca3c:	mov	lr, #0
   1ca40:	add	r3, r3, r2, lsl #1
   1ca44:	str	lr, [sp, #52]	; 0x34
   1ca48:	asr	r3, r3, #5
   1ca4c:	add	r3, r3, #1
   1ca50:	mov	r0, lr
   1ca54:	mov	ip, #1
   1ca58:	b	1bc98 <__assert_fail@plt+0xa478>
   1ca5c:	mov	r3, #0
   1ca60:	b	1c5ec <__assert_fail@plt+0xadcc>
   1ca64:	ldr	r0, [sp, #60]	; 0x3c
   1ca68:	bl	11640 <strlen@plt>
   1ca6c:	mvn	r3, r5
   1ca70:	cmp	sl, #45	; 0x2d
   1ca74:	lsr	r3, r3, #31
   1ca78:	moveq	r3, #0
   1ca7c:	cmp	r3, #0
   1ca80:	moveq	r5, #0
   1ca84:	ldr	r3, [sp, #44]	; 0x2c
   1ca88:	cmp	r7, #0
   1ca8c:	movne	r3, #0
   1ca90:	str	r3, [sp, #44]	; 0x2c
   1ca94:	ldr	r2, [sp, #28]
   1ca98:	ldr	r3, [sp, #36]	; 0x24
   1ca9c:	sub	r3, r3, r2
   1caa0:	cmp	r0, r5
   1caa4:	movcs	r9, r0
   1caa8:	movcc	r9, r5
   1caac:	cmp	r9, r3
   1cab0:	mov	r8, r0
   1cab4:	bcs	1b4b4 <__assert_fail@plt+0x9c94>
   1cab8:	cmp	r6, #0
   1cabc:	beq	1b938 <__assert_fail@plt+0xa118>
   1cac0:	cmp	r0, r5
   1cac4:	bcs	1caec <__assert_fail@plt+0xb2cc>
   1cac8:	cmp	sl, #43	; 0x2b
   1cacc:	cmpne	sl, #48	; 0x30
   1cad0:	sub	r5, r5, r0
   1cad4:	mov	r2, r5
   1cad8:	mov	r0, r6
   1cadc:	moveq	r1, #48	; 0x30
   1cae0:	movne	r1, #32
   1cae4:	bl	116ac <memset@plt>
   1cae8:	add	r6, r6, r5
   1caec:	cmp	r7, #0
   1caf0:	bne	1ce6c <__assert_fail@plt+0xb64c>
   1caf4:	ldr	r3, [sp, #44]	; 0x2c
   1caf8:	mov	r2, r8
   1cafc:	cmp	r3, #0
   1cb00:	ldr	r1, [sp, #60]	; 0x3c
   1cb04:	mov	r0, r6
   1cb08:	beq	1ce60 <__assert_fail@plt+0xb640>
   1cb0c:	bl	1b30c <__assert_fail@plt+0x9aec>
   1cb10:	add	r6, r6, r8
   1cb14:	b	1b938 <__assert_fail@plt+0xa118>
   1cb18:	cmp	r9, #69	; 0x45
   1cb1c:	beq	1bb28 <__assert_fail@plt+0xa308>
   1cb20:	cmp	r9, #79	; 0x4f
   1cb24:	beq	1b87c <__assert_fail@plt+0xa05c>
   1cb28:	ldr	r3, [sp, #40]	; 0x28
   1cb2c:	ldr	r0, [pc, #-1956]	; 1c390 <__assert_fail@plt+0xab70>
   1cb30:	ldr	r2, [r3, #20]
   1cb34:	cmp	r2, r0
   1cb38:	movge	ip, #0
   1cb3c:	movlt	ip, #1
   1cb40:	add	r3, r2, #1888	; 0x760
   1cb44:	cmp	sl, #0
   1cb48:	str	ip, [sp, #52]	; 0x34
   1cb4c:	add	r3, r3, #12
   1cb50:	bne	1cc44 <__assert_fail@plt+0xb424>
   1cb54:	ldr	ip, [sp, #1164]	; 0x48c
   1cb58:	cmp	r2, r0
   1cb5c:	movlt	r2, #0
   1cb60:	movge	r2, #1
   1cb64:	cmp	ip, #43	; 0x2b
   1cb68:	beq	1cdf0 <__assert_fail@plt+0xb5d0>
   1cb6c:	mov	sl, ip
   1cb70:	mov	lr, #0
   1cb74:	mov	ip, #4
   1cb78:	b	1bc70 <__assert_fail@plt+0xa450>
   1cb7c:	mov	r3, #45	; 0x2d
   1cb80:	b	1bd40 <__assert_fail@plt+0xa520>
   1cb84:	mov	r0, r6
   1cb88:	mov	r1, r7
   1cb8c:	mov	r2, r8
   1cb90:	bl	11490 <memcpy@plt>
   1cb94:	add	r6, r6, r8
   1cb98:	b	1b938 <__assert_fail@plt+0xa118>
   1cb9c:	cmp	r8, #0
   1cba0:	beq	1cdb8 <__assert_fail@plt+0xb598>
   1cba4:	bl	115e0 <__ctype_tolower_loc@plt>
   1cba8:	add	r8, r6, r8
   1cbac:	add	r3, sp, #96	; 0x60
   1cbb0:	add	r9, r3, r9
   1cbb4:	mov	r3, r8
   1cbb8:	ldrb	r1, [r9, #-1]!
   1cbbc:	ldr	r2, [r0]
   1cbc0:	ldr	r2, [r2, r1, lsl #2]
   1cbc4:	strb	r2, [r3, #-1]!
   1cbc8:	cmp	r6, r3
   1cbcc:	bne	1cbb8 <__assert_fail@plt+0xb398>
   1cbd0:	b	1bb10 <__assert_fail@plt+0xa2f0>
   1cbd4:	ldr	r3, [sp, #32]
   1cbd8:	add	r8, r3, #14
   1cbdc:	sub	r8, r8, r7
   1cbe0:	sub	r3, r5, r8
   1cbe4:	cmp	r3, #0
   1cbe8:	movle	r3, #0
   1cbec:	andgt	r3, r9, #1
   1cbf0:	cmp	r3, #0
   1cbf4:	bne	1bdbc <__assert_fail@plt+0xa59c>
   1cbf8:	cmp	r9, #0
   1cbfc:	bne	1bdbc <__assert_fail@plt+0xa59c>
   1cc00:	b	1bdb8 <__assert_fail@plt+0xa598>
   1cc04:	cmp	r6, #0
   1cc08:	beq	1b494 <__assert_fail@plt+0x9c74>
   1cc0c:	mov	r0, r6
   1cc10:	mov	r2, r8
   1cc14:	mov	r1, #32
   1cc18:	str	r3, [sp, #52]	; 0x34
   1cc1c:	bl	116ac <memset@plt>
   1cc20:	ldr	r3, [sp, #28]
   1cc24:	sub	r5, r5, r8
   1cc28:	add	r3, r3, r8
   1cc2c:	str	r3, [sp, #28]
   1cc30:	add	r6, r6, r8
   1cc34:	ldr	r3, [sp, #52]	; 0x34
   1cc38:	b	1bd74 <__assert_fail@plt+0xa554>
   1cc3c:	str	r3, [sp, #28]
   1cc40:	b	1b46c <__assert_fail@plt+0x9c4c>
   1cc44:	ldr	r2, [sp, #52]	; 0x34
   1cc48:	cmp	sl, #43	; 0x2b
   1cc4c:	eor	r2, r2, #1
   1cc50:	beq	1cdc0 <__assert_fail@plt+0xb5a0>
   1cc54:	mov	lr, #0
   1cc58:	uxtb	r2, r2
   1cc5c:	mov	ip, #4
   1cc60:	b	1bc70 <__assert_fail@plt+0xa450>
   1cc64:	cmp	r2, r0
   1cc68:	movlt	r2, #0
   1cc6c:	movge	r2, #1
   1cc70:	b	1c19c <__assert_fail@plt+0xa97c>
   1cc74:	cmp	r7, lr
   1cc78:	bge	1ce0c <__assert_fail@plt+0xb5ec>
   1cc7c:	cmp	sl, #0
   1cc80:	rsb	r3, r3, #0
   1cc84:	bne	1c190 <__assert_fail@plt+0xa970>
   1cc88:	ldr	r2, [sp, #1164]	; 0x48c
   1cc8c:	cmp	r2, #43	; 0x2b
   1cc90:	beq	1cdd0 <__assert_fail@plt+0xb5b0>
   1cc94:	mov	lr, #0
   1cc98:	mov	sl, r2
   1cc9c:	str	lr, [sp, #52]	; 0x34
   1cca0:	mov	r2, #1
   1cca4:	mov	ip, #2
   1cca8:	b	1bc70 <__assert_fail@plt+0xa450>
   1ccac:	mov	ip, #2
   1ccb0:	mov	r0, #99	; 0x63
   1ccb4:	cmp	r0, r3
   1ccb8:	movcs	r0, #0
   1ccbc:	movcc	r0, #1
   1ccc0:	cmp	r5, ip
   1ccc4:	movle	lr, r0
   1ccc8:	orrgt	lr, r0, #1
   1cccc:	mov	sl, #43	; 0x2b
   1ccd0:	b	1bc70 <__assert_fail@plt+0xa450>
   1ccd4:	mov	r3, #0
   1ccd8:	mov	r2, #1
   1ccdc:	str	r3, [sp, #52]	; 0x34
   1cce0:	b	1c22c <__assert_fail@plt+0xaa0c>
   1cce4:	ldr	r3, [sp, #1180]	; 0x49c
   1cce8:	mov	ip, #43	; 0x2b
   1ccec:	str	r3, [sp, #20]
   1ccf0:	ldr	r3, [sp, #1176]	; 0x498
   1ccf4:	mov	r7, #4
   1ccf8:	str	r3, [sp, #16]
   1ccfc:	ldr	r3, [sp, #1172]	; 0x494
   1cd00:	mov	r0, r9
   1cd04:	str	r3, [sp, #12]
   1cd08:	ldr	r3, [sp, #44]	; 0x2c
   1cd0c:	str	r7, [sp, #8]
   1cd10:	str	r3, [sp]
   1cd14:	str	ip, [sp, #4]
   1cd18:	ldr	r3, [sp, #40]	; 0x28
   1cd1c:	ldr	r2, [pc, #-2448]	; 1c394 <__assert_fail@plt+0xab74>
   1cd20:	mvn	r1, #0
   1cd24:	mov	sl, ip
   1cd28:	bl	1b34c <__assert_fail@plt+0x9b2c>
   1cd2c:	mov	r3, r9
   1cd30:	ldr	r9, [pc, #-2468]	; 1c394 <__assert_fail@plt+0xab74>
   1cd34:	mov	r8, r0
   1cd38:	b	1bf7c <__assert_fail@plt+0xa75c>
   1cd3c:	ldr	r2, [sp, #48]	; 0x30
   1cd40:	mov	r3, #75	; 0x4b
   1cd44:	str	r3, [r2]
   1cd48:	b	1b4c0 <__assert_fail@plt+0x9ca0>
   1cd4c:	ldr	r2, [pc, #-2472]	; 1c3ac <__assert_fail@plt+0xab8c>
   1cd50:	mov	ip, #2
   1cd54:	smull	r0, r2, r2, r3
   1cd58:	add	r0, r2, r3
   1cd5c:	asr	r2, r3, #31
   1cd60:	rsb	r2, r2, r0, asr #2
   1cd64:	add	r2, r2, #1
   1cd68:	b	1c1c4 <__assert_fail@plt+0xa9a4>
   1cd6c:	cmp	r7, lr
   1cd70:	add	r3, r7, #1888	; 0x760
   1cd74:	movge	r2, #0
   1cd78:	movlt	r2, #1
   1cd7c:	add	r3, r3, #12
   1cd80:	cmp	sl, #0
   1cd84:	str	r2, [sp, #52]	; 0x34
   1cd88:	add	r3, r3, r0
   1cd8c:	bne	1cc44 <__assert_fail@plt+0xb424>
   1cd90:	ldr	r2, [sp, #1164]	; 0x48c
   1cd94:	cmp	r2, #43	; 0x2b
   1cd98:	beq	1cde4 <__assert_fail@plt+0xb5c4>
   1cd9c:	cmp	r7, lr
   1cda0:	mov	sl, r2
   1cda4:	mov	lr, #0
   1cda8:	movlt	r2, #0
   1cdac:	movge	r2, #1
   1cdb0:	mov	ip, #4
   1cdb4:	b	1bc70 <__assert_fail@plt+0xa450>
   1cdb8:	mov	r8, r6
   1cdbc:	b	1bb10 <__assert_fail@plt+0xa2f0>
   1cdc0:	mov	ip, #4
   1cdc4:	uxtb	r2, r2
   1cdc8:	ldr	r0, [pc, #-2616]	; 1c398 <__assert_fail@plt+0xab78>
   1cdcc:	b	1ccb4 <__assert_fail@plt+0xb494>
   1cdd0:	str	sl, [sp, #52]	; 0x34
   1cdd4:	mov	r2, #1
   1cdd8:	mov	ip, #2
   1cddc:	mov	r0, #99	; 0x63
   1cde0:	b	1ccb4 <__assert_fail@plt+0xb494>
   1cde4:	cmp	r7, lr
   1cde8:	movlt	r2, #0
   1cdec:	movge	r2, #1
   1cdf0:	mov	ip, #4
   1cdf4:	ldr	r0, [pc, #-2660]	; 1c398 <__assert_fail@plt+0xab78>
   1cdf8:	b	1ccb4 <__assert_fail@plt+0xb494>
   1cdfc:	mov	r3, #1
   1ce00:	mov	r2, #0
   1ce04:	str	r3, [sp, #52]	; 0x34
   1ce08:	b	1c22c <__assert_fail@plt+0xaa0c>
   1ce0c:	cmp	sl, #0
   1ce10:	add	r3, r3, #100	; 0x64
   1ce14:	beq	1cc88 <__assert_fail@plt+0xb468>
   1ce18:	b	1c190 <__assert_fail@plt+0xa970>
   1ce1c:	cmp	r7, #0
   1ce20:	bne	1cea8 <__assert_fail@plt+0xb688>
   1ce24:	cmp	r0, #0
   1ce28:	moveq	lr, #1
   1ce2c:	moveq	ip, #3
   1ce30:	beq	1bc74 <__assert_fail@plt+0xa454>
   1ce34:	mov	ip, #100	; 0x64
   1ce38:	mov	lr, #1
   1ce3c:	mla	r3, ip, r3, r0
   1ce40:	mov	ip, #6
   1ce44:	mov	r0, #4
   1ce48:	b	1bc74 <__assert_fail@plt+0xa454>
   1ce4c:	mov	ip, #100	; 0x64
   1ce50:	mov	lr, #1
   1ce54:	mla	r3, ip, r3, r0
   1ce58:	mov	ip, #5
   1ce5c:	b	1bc70 <__assert_fail@plt+0xa450>
   1ce60:	bl	11490 <memcpy@plt>
   1ce64:	add	r6, r6, r8
   1ce68:	b	1b938 <__assert_fail@plt+0xa118>
   1ce6c:	cmp	r8, #0
   1ce70:	beq	1b938 <__assert_fail@plt+0xa118>
   1ce74:	bl	115e0 <__ctype_tolower_loc@plt>
   1ce78:	ldr	r3, [sp, #60]	; 0x3c
   1ce7c:	add	r6, r6, r8
   1ce80:	ldr	ip, [sp, #60]	; 0x3c
   1ce84:	add	r8, r3, r8
   1ce88:	mov	r3, r6
   1ce8c:	ldrb	r1, [r8, #-1]!
   1ce90:	ldr	r2, [r0]
   1ce94:	cmp	ip, r8
   1ce98:	ldr	r2, [r2, r1, lsl #2]
   1ce9c:	strb	r2, [r3, #-1]!
   1cea0:	bne	1ce8c <__assert_fail@plt+0xb66c>
   1cea4:	b	1b938 <__assert_fail@plt+0xa118>
   1cea8:	mov	lr, #100	; 0x64
   1ceac:	ldr	ip, [pc, #-2840]	; 1c39c <__assert_fail@plt+0xab7c>
   1ceb0:	mul	r0, lr, r0
   1ceb4:	mov	lr, #1
   1ceb8:	mla	r3, ip, r3, r0
   1cebc:	mov	r0, #20
   1cec0:	add	r3, r3, r7
   1cec4:	mov	ip, #9
   1cec8:	b	1bc74 <__assert_fail@plt+0xa454>
   1cecc:	mov	r1, #32
   1ced0:	mov	r0, r6
   1ced4:	bl	116ac <memset@plt>
   1ced8:	add	r6, r6, r7
   1cedc:	ldrb	r1, [r4]
   1cee0:	b	1c43c <__assert_fail@plt+0xac1c>
   1cee4:	sub	r3, r3, #1
   1cee8:	tst	r3, #3
   1ceec:	ldrne	r3, [pc, #-2892]	; 1c3a8 <__assert_fail@plt+0xab88>
   1cef0:	bne	1cf38 <__assert_fail@plt+0xb718>
   1cef4:	ldr	r2, [pc, #-2908]	; 1c3a0 <__assert_fail@plt+0xab80>
   1cef8:	mov	r0, #100	; 0x64
   1cefc:	smull	r2, ip, r2, r3
   1cf00:	asr	r2, r3, #31
   1cf04:	rsb	lr, r2, ip, asr #5
   1cf08:	mul	r0, r0, lr
   1cf0c:	cmp	r3, r0
   1cf10:	ldrne	r3, [pc, #-2932]	; 1c3a4 <__assert_fail@plt+0xab84>
   1cf14:	bne	1cf38 <__assert_fail@plt+0xb718>
   1cf18:	rsb	r2, r2, ip, asr #7
   1cf1c:	mov	ip, #400	; 0x190
   1cf20:	ldr	r0, [pc, #-2944]	; 1c3a8 <__assert_fail@plt+0xab88>
   1cf24:	mul	r2, ip, r2
   1cf28:	sub	ip, ip, #34	; 0x22
   1cf2c:	cmp	r3, r2
   1cf30:	movne	r3, r0
   1cf34:	moveq	r3, ip
   1cf38:	ldr	r2, [sp, #32]
   1cf3c:	add	r3, r8, r3
   1cf40:	sub	r2, r3, r2
   1cf44:	ldr	ip, [pc, #-2976]	; 1c3ac <__assert_fail@plt+0xab8c>
   1cf48:	add	r2, r2, #380	; 0x17c
   1cf4c:	add	r2, r2, #2
   1cf50:	mvn	r0, #0
   1cf54:	smull	ip, lr, ip, r2
   1cf58:	add	lr, lr, r2
   1cf5c:	asr	ip, r2, #31
   1cf60:	rsb	ip, ip, lr, asr #2
   1cf64:	mov	r8, r0
   1cf68:	rsb	ip, ip, ip, lsl #3
   1cf6c:	sub	ip, r2, ip
   1cf70:	sub	r3, r3, ip
   1cf74:	add	r3, r3, #3
   1cf78:	ldr	lr, [pc, #-3024]	; 1c3b0 <__assert_fail@plt+0xab90>
   1cf7c:	b	1c13c <__assert_fail@plt+0xa91c>
   1cf80:	mov	r5, r3
   1cf84:	mov	r7, #1
   1cf88:	b	1c4c0 <__assert_fail@plt+0xaca0>
   1cf8c:	add	r2, r4, #2
   1cf90:	mov	r8, #1
   1cf94:	mov	r0, r2
   1cf98:	ldrb	r3, [r2], #1
   1cf9c:	add	r8, r8, #1
   1cfa0:	cmp	r3, #58	; 0x3a
   1cfa4:	bne	1c578 <__assert_fail@plt+0xad58>
   1cfa8:	b	1cf94 <__assert_fail@plt+0xb774>
   1cfac:	mov	r5, r3
   1cfb0:	mov	r7, #1
   1cfb4:	b	1c974 <__assert_fail@plt+0xb154>
   1cfb8:	bl	11490 <memcpy@plt>
   1cfbc:	b	1c88c <__assert_fail@plt+0xb06c>
   1cfc0:	mov	r8, #1
   1cfc4:	b	1c840 <__assert_fail@plt+0xb020>
   1cfc8:	subeq	r3, r3, r0, lsl #1
   1cfcc:	addeq	r3, r3, #48	; 0x30
   1cfd0:	strbeq	r3, [sp, #80]	; 0x50
   1cfd4:	b	1c840 <__assert_fail@plt+0xb020>
   1cfd8:	push	{r4, r5, lr}
   1cfdc:	sub	sp, sp, #36	; 0x24
   1cfe0:	add	lr, sp, #32
   1cfe4:	mov	ip, #0
   1cfe8:	ldr	r5, [sp, #48]	; 0x30
   1cfec:	ldr	r4, [sp, #52]	; 0x34
   1cff0:	strb	ip, [lr, #-1]!
   1cff4:	str	lr, [sp, #12]
   1cff8:	mvn	lr, #0
   1cffc:	str	ip, [sp, #4]
   1d000:	str	ip, [sp]
   1d004:	str	r5, [sp, #16]
   1d008:	str	r4, [sp, #20]
   1d00c:	str	lr, [sp, #8]
   1d010:	bl	1b34c <__assert_fail@plt+0x9b2c>
   1d014:	add	sp, sp, #36	; 0x24
   1d018:	pop	{r4, r5, pc}
   1d01c:	push	{r4, r5, r6, lr}
   1d020:	subs	r4, r0, #0
   1d024:	beq	1d098 <__assert_fail@plt+0xb878>
   1d028:	mov	r1, #47	; 0x2f
   1d02c:	bl	1173c <strrchr@plt>
   1d030:	subs	r5, r0, #0
   1d034:	beq	1d084 <__assert_fail@plt+0xb864>
   1d038:	add	r6, r5, #1
   1d03c:	sub	r3, r6, r4
   1d040:	cmp	r3, #6
   1d044:	ble	1d084 <__assert_fail@plt+0xb864>
   1d048:	mov	r2, #7
   1d04c:	ldr	r1, [pc, #96]	; 1d0b4 <__assert_fail@plt+0xb894>
   1d050:	sub	r0, r5, #6
   1d054:	bl	117e4 <strncmp@plt>
   1d058:	cmp	r0, #0
   1d05c:	bne	1d084 <__assert_fail@plt+0xb864>
   1d060:	mov	r2, #3
   1d064:	ldr	r1, [pc, #76]	; 1d0b8 <__assert_fail@plt+0xb898>
   1d068:	mov	r0, r6
   1d06c:	bl	117e4 <strncmp@plt>
   1d070:	cmp	r0, #0
   1d074:	movne	r4, r6
   1d078:	ldreq	r3, [pc, #60]	; 1d0bc <__assert_fail@plt+0xb89c>
   1d07c:	addeq	r4, r5, #4
   1d080:	streq	r4, [r3]
   1d084:	ldr	r2, [pc, #52]	; 1d0c0 <__assert_fail@plt+0xb8a0>
   1d088:	ldr	r3, [pc, #52]	; 1d0c4 <__assert_fail@plt+0xb8a4>
   1d08c:	str	r4, [r2]
   1d090:	str	r4, [r3]
   1d094:	pop	{r4, r5, r6, pc}
   1d098:	ldr	r3, [pc, #40]	; 1d0c8 <__assert_fail@plt+0xb8a8>
   1d09c:	mov	r2, #55	; 0x37
   1d0a0:	mov	r1, #1
   1d0a4:	ldr	r3, [r3]
   1d0a8:	ldr	r0, [pc, #28]	; 1d0cc <__assert_fail@plt+0xb8ac>
   1d0ac:	bl	1152c <fwrite@plt>
   1d0b0:	bl	117f0 <abort@plt>
   1d0b4:	andeq	r6, r2, ip, lsr #6
   1d0b8:	andeq	r6, r2, r4, lsr r3
   1d0bc:	ldrdeq	r7, [r3], -r0
   1d0c0:	andeq	r7, r3, r4, ror r2
   1d0c4:	ldrdeq	r7, [r3], -r4
   1d0c8:	andeq	r7, r3, r0, ror #3
   1d0cc:	strdeq	r6, [r2], -r4
   1d0d0:	push	{r4, r5, r6, lr}
   1d0d4:	mov	r4, r0
   1d0d8:	mov	r5, r1
   1d0dc:	bl	23974 <__assert_fail@plt+0x12154>
   1d0e0:	ldrb	r3, [r0]
   1d0e4:	bic	r3, r3, #32
   1d0e8:	cmp	r3, #85	; 0x55
   1d0ec:	bne	1d14c <__assert_fail@plt+0xb92c>
   1d0f0:	ldrb	r3, [r0, #1]
   1d0f4:	bic	r3, r3, #32
   1d0f8:	cmp	r3, #84	; 0x54
   1d0fc:	bne	1d188 <__assert_fail@plt+0xb968>
   1d100:	ldrb	r3, [r0, #2]
   1d104:	bic	r3, r3, #32
   1d108:	cmp	r3, #70	; 0x46
   1d10c:	bne	1d188 <__assert_fail@plt+0xb968>
   1d110:	ldrb	r3, [r0, #3]
   1d114:	cmp	r3, #45	; 0x2d
   1d118:	bne	1d188 <__assert_fail@plt+0xb968>
   1d11c:	ldrb	r3, [r0, #4]
   1d120:	cmp	r3, #56	; 0x38
   1d124:	bne	1d188 <__assert_fail@plt+0xb968>
   1d128:	ldrb	r3, [r0, #5]
   1d12c:	cmp	r3, #0
   1d130:	bne	1d188 <__assert_fail@plt+0xb968>
   1d134:	ldrb	r2, [r4]
   1d138:	ldr	r3, [pc, #152]	; 1d1d8 <__assert_fail@plt+0xb9b8>
   1d13c:	ldr	r0, [pc, #152]	; 1d1dc <__assert_fail@plt+0xb9bc>
   1d140:	cmp	r2, #96	; 0x60
   1d144:	movne	r0, r3
   1d148:	pop	{r4, r5, r6, pc}
   1d14c:	cmp	r3, #71	; 0x47
   1d150:	bne	1d188 <__assert_fail@plt+0xb968>
   1d154:	ldrb	r3, [r0, #1]
   1d158:	bic	r3, r3, #32
   1d15c:	cmp	r3, #66	; 0x42
   1d160:	bne	1d188 <__assert_fail@plt+0xb968>
   1d164:	ldrb	r3, [r0, #2]
   1d168:	cmp	r3, #49	; 0x31
   1d16c:	bne	1d188 <__assert_fail@plt+0xb968>
   1d170:	ldrb	r3, [r0, #3]
   1d174:	cmp	r3, #56	; 0x38
   1d178:	bne	1d188 <__assert_fail@plt+0xb968>
   1d17c:	ldrb	r3, [r0, #4]
   1d180:	cmp	r3, #48	; 0x30
   1d184:	beq	1d19c <__assert_fail@plt+0xb97c>
   1d188:	ldr	r3, [pc, #80]	; 1d1e0 <__assert_fail@plt+0xb9c0>
   1d18c:	cmp	r5, #9
   1d190:	ldr	r0, [pc, #76]	; 1d1e4 <__assert_fail@plt+0xb9c4>
   1d194:	movne	r0, r3
   1d198:	pop	{r4, r5, r6, pc}
   1d19c:	ldrb	r3, [r0, #5]
   1d1a0:	cmp	r3, #51	; 0x33
   1d1a4:	bne	1d188 <__assert_fail@plt+0xb968>
   1d1a8:	ldrb	r3, [r0, #6]
   1d1ac:	cmp	r3, #48	; 0x30
   1d1b0:	bne	1d188 <__assert_fail@plt+0xb968>
   1d1b4:	ldrb	r3, [r0, #7]
   1d1b8:	cmp	r3, #0
   1d1bc:	bne	1d188 <__assert_fail@plt+0xb968>
   1d1c0:	ldrb	r2, [r4]
   1d1c4:	ldr	r3, [pc, #28]	; 1d1e8 <__assert_fail@plt+0xb9c8>
   1d1c8:	ldr	r0, [pc, #28]	; 1d1ec <__assert_fail@plt+0xb9cc>
   1d1cc:	cmp	r2, #96	; 0x60
   1d1d0:	movne	r0, r3
   1d1d4:	pop	{r4, r5, r6, pc}
   1d1d8:	muleq	r2, r0, r3
   1d1dc:	andeq	r6, r2, ip, lsl #7
   1d1e0:	andeq	r6, r2, r0, lsr #7
   1d1e4:	muleq	r2, ip, r3
   1d1e8:	muleq	r2, r8, r3
   1d1ec:	muleq	r2, r4, r3
   1d1f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1f4:	sub	sp, sp, #140	; 0x8c
   1d1f8:	mov	r9, r1
   1d1fc:	str	r3, [sp, #24]
   1d200:	mov	r3, #1
   1d204:	mov	sl, r0
   1d208:	str	r2, [sp, #44]	; 0x2c
   1d20c:	str	r3, [sp, #28]
   1d210:	bl	11544 <__ctype_get_mb_cur_max@plt>
   1d214:	ldr	r3, [sp, #180]	; 0xb4
   1d218:	mov	fp, r9
   1d21c:	mov	r9, sl
   1d220:	lsr	r3, r3, #1
   1d224:	and	r3, r3, #1
   1d228:	str	r3, [sp, #40]	; 0x28
   1d22c:	ldr	r3, [sp, #180]	; 0xb4
   1d230:	mov	r2, #0
   1d234:	and	r3, r3, #4
   1d238:	str	r3, [sp, #100]	; 0x64
   1d23c:	ldr	r3, [sp, #180]	; 0xb4
   1d240:	str	r2, [sp, #76]	; 0x4c
   1d244:	and	r3, r3, #1
   1d248:	str	r3, [sp, #96]	; 0x60
   1d24c:	str	r2, [sp, #36]	; 0x24
   1d250:	str	r2, [sp, #56]	; 0x38
   1d254:	str	r2, [sp, #68]	; 0x44
   1d258:	str	r2, [sp, #72]	; 0x48
   1d25c:	str	r2, [sp, #84]	; 0x54
   1d260:	str	r0, [sp, #80]	; 0x50
   1d264:	ldr	r3, [sp, #176]	; 0xb0
   1d268:	cmp	r3, #10
   1d26c:	ldrls	pc, [pc, r3, lsl #2]
   1d270:	b	1e448 <__assert_fail@plt+0xcc28>
   1d274:	andeq	sp, r1, r0, lsr #5
   1d278:	andeq	sp, r1, r0, asr #11
   1d27c:	andeq	sp, r1, r8, lsl r7
   1d280:	strdeq	sp, [r1], -r4
   1d284:	andeq	sp, r1, ip, ror #14
   1d288:	andeq	sp, r1, ip, asr #14
   1d28c:	andeq	sp, r1, r4, lsl r6
   1d290:	andeq	sp, r1, r8, lsr r6
   1d294:	andeq	sp, r1, r0, ror #12
   1d298:	andeq	sp, r1, r0, ror #12
   1d29c:	andeq	sp, r1, r0, ror #12
   1d2a0:	mov	r3, #0
   1d2a4:	ldr	r1, [sp, #56]	; 0x38
   1d2a8:	ldr	r2, [sp, #176]	; 0xb0
   1d2ac:	ldr	lr, [sp, #176]	; 0xb0
   1d2b0:	mov	r8, r3
   1d2b4:	mov	ip, r3
   1d2b8:	str	r3, [sp, #40]	; 0x28
   1d2bc:	mov	r3, r1
   1d2c0:	cmp	r2, #2
   1d2c4:	moveq	r3, #0
   1d2c8:	andne	r3, r3, #1
   1d2cc:	mov	r0, r3
   1d2d0:	str	r3, [sp, #92]	; 0x5c
   1d2d4:	ldr	r3, [sp, #68]	; 0x44
   1d2d8:	sub	lr, lr, #2
   1d2dc:	adds	r2, r3, #0
   1d2e0:	movne	r2, #1
   1d2e4:	and	r3, r1, ip
   1d2e8:	and	r3, r2, r3
   1d2ec:	clz	lr, lr
   1d2f0:	str	r3, [sp, #88]	; 0x58
   1d2f4:	lsr	lr, lr, #5
   1d2f8:	mov	r3, ip
   1d2fc:	and	r3, r3, lr
   1d300:	mov	sl, #0
   1d304:	and	r0, r2, r0
   1d308:	str	r3, [sp, #64]	; 0x40
   1d30c:	eor	r3, r1, #1
   1d310:	str	lr, [sp, #52]	; 0x34
   1d314:	str	r0, [sp, #48]	; 0x30
   1d318:	str	r3, [sp, #60]	; 0x3c
   1d31c:	ldr	r3, [sp, #24]
   1d320:	cmn	r3, #1
   1d324:	beq	1d854 <__assert_fail@plt+0xc034>
   1d328:	subs	r7, r3, sl
   1d32c:	movne	r7, #1
   1d330:	cmp	r7, #0
   1d334:	beq	1d86c <__assert_fail@plt+0xc04c>
   1d338:	ldr	r3, [sp, #48]	; 0x30
   1d33c:	cmp	r3, #0
   1d340:	beq	1dbd8 <__assert_fail@plt+0xc3b8>
   1d344:	ldr	r2, [sp, #68]	; 0x44
   1d348:	ldr	r1, [sp, #24]
   1d34c:	cmp	r2, #1
   1d350:	mov	r3, r2
   1d354:	movls	r3, #0
   1d358:	movhi	r3, #1
   1d35c:	cmn	r1, #1
   1d360:	movne	r3, #0
   1d364:	cmp	r3, #0
   1d368:	add	r4, sl, r2
   1d36c:	beq	1d37c <__assert_fail@plt+0xbb5c>
   1d370:	ldr	r0, [sp, #44]	; 0x2c
   1d374:	bl	11640 <strlen@plt>
   1d378:	str	r0, [sp, #24]
   1d37c:	ldr	r3, [sp, #24]
   1d380:	cmp	r3, r4
   1d384:	ldr	r3, [sp, #44]	; 0x2c
   1d388:	add	r5, r3, sl
   1d38c:	bcc	1dbe0 <__assert_fail@plt+0xc3c0>
   1d390:	mov	r0, r5
   1d394:	ldr	r2, [sp, #68]	; 0x44
   1d398:	ldr	r1, [sp, #72]	; 0x48
   1d39c:	bl	114a8 <memcmp@plt>
   1d3a0:	cmp	r0, #0
   1d3a4:	bne	1dbe0 <__assert_fail@plt+0xc3c0>
   1d3a8:	ldr	r3, [sp, #40]	; 0x28
   1d3ac:	cmp	r3, #0
   1d3b0:	bne	1e59c <__assert_fail@plt+0xcd7c>
   1d3b4:	ldrb	r4, [r5]
   1d3b8:	cmp	r4, #126	; 0x7e
   1d3bc:	ldrls	pc, [pc, r4, lsl #2]
   1d3c0:	b	1e4d8 <__assert_fail@plt+0xccb8>
   1d3c4:	muleq	r1, r8, sl
   1d3c8:	ldrdeq	lr, [r1], -r8
   1d3cc:	ldrdeq	lr, [r1], -r8
   1d3d0:	ldrdeq	lr, [r1], -r8
   1d3d4:	ldrdeq	lr, [r1], -r8
   1d3d8:	ldrdeq	lr, [r1], -r8
   1d3dc:	ldrdeq	lr, [r1], -r8
   1d3e0:	andeq	sp, r1, r4, lsl #21
   1d3e4:	andeq	sp, r1, r0, ror sl
   1d3e8:	andeq	sp, r1, ip, asr #20
   1d3ec:	andeq	sp, r1, ip, lsr #20
   1d3f0:	andeq	sp, r1, ip, asr sl
   1d3f4:	muleq	r1, r4, r9
   1d3f8:	andeq	sp, r1, r8, asr #23
   1d3fc:	ldrdeq	lr, [r1], -r8
   1d400:	ldrdeq	lr, [r1], -r8
   1d404:	ldrdeq	lr, [r1], -r8
   1d408:	ldrdeq	lr, [r1], -r8
   1d40c:	ldrdeq	lr, [r1], -r8
   1d410:	ldrdeq	lr, [r1], -r8
   1d414:	ldrdeq	lr, [r1], -r8
   1d418:	ldrdeq	lr, [r1], -r8
   1d41c:	ldrdeq	lr, [r1], -r8
   1d420:	ldrdeq	lr, [r1], -r8
   1d424:	ldrdeq	lr, [r1], -r8
   1d428:	ldrdeq	lr, [r1], -r8
   1d42c:	ldrdeq	lr, [r1], -r8
   1d430:	ldrdeq	lr, [r1], -r8
   1d434:	ldrdeq	lr, [r1], -r8
   1d438:	ldrdeq	lr, [r1], -r8
   1d43c:	ldrdeq	lr, [r1], -r8
   1d440:	ldrdeq	lr, [r1], -r8
   1d444:			; <UNDEFINED> instruction: 0x0001dbb8
   1d448:	muleq	r1, r8, fp
   1d44c:	muleq	r1, r8, fp
   1d450:	andeq	sp, r1, r8, ror fp
   1d454:	muleq	r1, r8, fp
   1d458:	andeq	sp, r1, r4, lsl #19
   1d45c:	muleq	r1, r8, fp
   1d460:	andeq	sp, r1, r0, ror #18
   1d464:	muleq	r1, r8, fp
   1d468:	muleq	r1, r8, fp
   1d46c:	muleq	r1, r8, fp
   1d470:	andeq	sp, r1, r4, lsl #19
   1d474:	andeq	sp, r1, r4, lsl #19
   1d478:	andeq	sp, r1, r4, lsl #19
   1d47c:	andeq	sp, r1, r4, lsl #19
   1d480:	andeq	sp, r1, r4, lsl #19
   1d484:	andeq	sp, r1, r4, lsl #19
   1d488:	andeq	sp, r1, r4, lsl #19
   1d48c:	andeq	sp, r1, r4, lsl #19
   1d490:	andeq	sp, r1, r4, lsl #19
   1d494:	andeq	sp, r1, r4, lsl #19
   1d498:	andeq	sp, r1, r4, lsl #19
   1d49c:	andeq	sp, r1, r4, lsl #19
   1d4a0:	andeq	sp, r1, r4, lsl #19
   1d4a4:	andeq	sp, r1, r4, lsl #19
   1d4a8:	andeq	sp, r1, r4, lsl #19
   1d4ac:	andeq	sp, r1, r4, lsl #19
   1d4b0:	muleq	r1, r8, fp
   1d4b4:	muleq	r1, r8, fp
   1d4b8:	muleq	r1, r8, fp
   1d4bc:	muleq	r1, r8, fp
   1d4c0:	andeq	sp, r1, r0, lsl r9
   1d4c4:	ldrdeq	lr, [r1], -r8
   1d4c8:	andeq	sp, r1, r4, lsl #19
   1d4cc:	andeq	sp, r1, r4, lsl #19
   1d4d0:	andeq	sp, r1, r4, lsl #19
   1d4d4:	andeq	sp, r1, r4, lsl #19
   1d4d8:	andeq	sp, r1, r4, lsl #19
   1d4dc:	andeq	sp, r1, r4, lsl #19
   1d4e0:	andeq	sp, r1, r4, lsl #19
   1d4e4:	andeq	sp, r1, r4, lsl #19
   1d4e8:	andeq	sp, r1, r4, lsl #19
   1d4ec:	andeq	sp, r1, r4, lsl #19
   1d4f0:	andeq	sp, r1, r4, lsl #19
   1d4f4:	andeq	sp, r1, r4, lsl #19
   1d4f8:	andeq	sp, r1, r4, lsl #19
   1d4fc:	andeq	sp, r1, r4, lsl #19
   1d500:	andeq	sp, r1, r4, lsl #19
   1d504:	andeq	sp, r1, r4, lsl #19
   1d508:	andeq	sp, r1, r4, lsl #19
   1d50c:	andeq	sp, r1, r4, lsl #19
   1d510:	andeq	sp, r1, r4, lsl #19
   1d514:	andeq	sp, r1, r4, lsl #19
   1d518:	andeq	sp, r1, r4, lsl #19
   1d51c:	andeq	sp, r1, r4, lsl #19
   1d520:	andeq	sp, r1, r4, lsl #19
   1d524:	andeq	sp, r1, r4, lsl #19
   1d528:	andeq	sp, r1, r4, lsl #19
   1d52c:	andeq	sp, r1, r4, lsl #19
   1d530:	muleq	r1, r8, fp
   1d534:	ldrdeq	sp, [r1], -ip
   1d538:	andeq	sp, r1, r4, lsl #19
   1d53c:	muleq	r1, r8, fp
   1d540:	andeq	sp, r1, r4, lsl #19
   1d544:	muleq	r1, r8, fp
   1d548:	andeq	sp, r1, r4, lsl #19
   1d54c:	andeq	sp, r1, r4, lsl #19
   1d550:	andeq	sp, r1, r4, lsl #19
   1d554:	andeq	sp, r1, r4, lsl #19
   1d558:	andeq	sp, r1, r4, lsl #19
   1d55c:	andeq	sp, r1, r4, lsl #19
   1d560:	andeq	sp, r1, r4, lsl #19
   1d564:	andeq	sp, r1, r4, lsl #19
   1d568:	andeq	sp, r1, r4, lsl #19
   1d56c:	andeq	sp, r1, r4, lsl #19
   1d570:	andeq	sp, r1, r4, lsl #19
   1d574:	andeq	sp, r1, r4, lsl #19
   1d578:	andeq	sp, r1, r4, lsl #19
   1d57c:	andeq	sp, r1, r4, lsl #19
   1d580:	andeq	sp, r1, r4, lsl #19
   1d584:	andeq	sp, r1, r4, lsl #19
   1d588:	andeq	sp, r1, r4, lsl #19
   1d58c:	andeq	sp, r1, r4, lsl #19
   1d590:	andeq	sp, r1, r4, lsl #19
   1d594:	andeq	sp, r1, r4, lsl #19
   1d598:	andeq	sp, r1, r4, lsl #19
   1d59c:	andeq	sp, r1, r4, lsl #19
   1d5a0:	andeq	sp, r1, r4, lsl #19
   1d5a4:	andeq	sp, r1, r4, lsl #19
   1d5a8:	andeq	sp, r1, r4, lsl #19
   1d5ac:	andeq	sp, r1, r4, lsl #19
   1d5b0:	muleq	r1, r4, r7
   1d5b4:	muleq	r1, r8, fp
   1d5b8:	muleq	r1, r4, r7
   1d5bc:	andeq	sp, r1, r8, ror fp
   1d5c0:	mov	r3, #1
   1d5c4:	str	r3, [sp, #40]	; 0x28
   1d5c8:	str	r3, [sp, #68]	; 0x44
   1d5cc:	mov	r8, #0
   1d5d0:	ldr	r3, [pc, #4056]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1d5d4:	str	r3, [sp, #72]	; 0x48
   1d5d8:	mov	r3, #2
   1d5dc:	str	r3, [sp, #176]	; 0xb0
   1d5e0:	ldr	r1, [sp, #56]	; 0x38
   1d5e4:	mov	r2, r3
   1d5e8:	ldr	ip, [sp, #40]	; 0x28
   1d5ec:	mov	lr, r3
   1d5f0:	b	1d2bc <__assert_fail@plt+0xba9c>
   1d5f4:	mov	r3, #1
   1d5f8:	str	r3, [sp, #56]	; 0x38
   1d5fc:	str	r3, [sp, #68]	; 0x44
   1d600:	str	r3, [sp, #40]	; 0x28
   1d604:	ldr	r3, [pc, #4004]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1d608:	mov	r8, #0
   1d60c:	str	r3, [sp, #72]	; 0x48
   1d610:	b	1d5d8 <__assert_fail@plt+0xbdb8>
   1d614:	mov	r3, #1
   1d618:	str	r3, [sp, #56]	; 0x38
   1d61c:	str	r3, [sp, #68]	; 0x44
   1d620:	str	r3, [sp, #40]	; 0x28
   1d624:	ldr	r3, [pc, #3976]	; 1e5b4 <__assert_fail@plt+0xcd94>
   1d628:	mov	r8, #0
   1d62c:	str	r3, [sp, #72]	; 0x48
   1d630:	mov	r3, #5
   1d634:	b	1d5dc <__assert_fail@plt+0xbdbc>
   1d638:	mov	r3, #0
   1d63c:	str	r3, [sp, #40]	; 0x28
   1d640:	mov	r3, #1
   1d644:	str	r3, [sp, #56]	; 0x38
   1d648:	mov	r8, #0
   1d64c:	mov	r1, r3
   1d650:	ldr	r2, [sp, #176]	; 0xb0
   1d654:	ldr	ip, [sp, #40]	; 0x28
   1d658:	ldr	lr, [sp, #176]	; 0xb0
   1d65c:	b	1d2bc <__assert_fail@plt+0xba9c>
   1d660:	ldr	r3, [sp, #176]	; 0xb0
   1d664:	cmp	r3, #10
   1d668:	beq	1d6ac <__assert_fail@plt+0xbe8c>
   1d66c:	mov	r2, #5
   1d670:	ldr	r1, [pc, #3904]	; 1e5b8 <__assert_fail@plt+0xcd98>
   1d674:	mov	r0, #0
   1d678:	bl	114c0 <dcgettext@plt>
   1d67c:	ldr	r2, [pc, #3892]	; 1e5b8 <__assert_fail@plt+0xcd98>
   1d680:	cmp	r0, r2
   1d684:	str	r0, [sp, #188]	; 0xbc
   1d688:	beq	1e744 <__assert_fail@plt+0xcf24>
   1d68c:	mov	r2, #5
   1d690:	ldr	r1, [pc, #3864]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1d694:	mov	r0, #0
   1d698:	bl	114c0 <dcgettext@plt>
   1d69c:	ldr	r2, [pc, #3852]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1d6a0:	cmp	r0, r2
   1d6a4:	str	r0, [sp, #192]	; 0xc0
   1d6a8:	beq	1e734 <__assert_fail@plt+0xcf14>
   1d6ac:	ldr	r8, [sp, #40]	; 0x28
   1d6b0:	cmp	r8, #0
   1d6b4:	movne	r8, #0
   1d6b8:	bne	1d6e8 <__assert_fail@plt+0xbec8>
   1d6bc:	ldr	r3, [sp, #188]	; 0xbc
   1d6c0:	ldrb	r3, [r3]
   1d6c4:	cmp	r3, #0
   1d6c8:	beq	1d6e8 <__assert_fail@plt+0xbec8>
   1d6cc:	ldr	r2, [sp, #188]	; 0xbc
   1d6d0:	cmp	fp, r8
   1d6d4:	strbhi	r3, [r9, r8]
   1d6d8:	ldrb	r3, [r2, #1]!
   1d6dc:	add	r8, r8, #1
   1d6e0:	cmp	r3, #0
   1d6e4:	bne	1d6d0 <__assert_fail@plt+0xbeb0>
   1d6e8:	ldr	r0, [sp, #192]	; 0xc0
   1d6ec:	bl	11640 <strlen@plt>
   1d6f0:	ldr	r3, [sp, #192]	; 0xc0
   1d6f4:	ldr	r2, [sp, #176]	; 0xb0
   1d6f8:	str	r3, [sp, #72]	; 0x48
   1d6fc:	mov	r3, #1
   1d700:	str	r3, [sp, #56]	; 0x38
   1d704:	mov	r1, r3
   1d708:	ldr	ip, [sp, #40]	; 0x28
   1d70c:	ldr	lr, [sp, #176]	; 0xb0
   1d710:	str	r0, [sp, #68]	; 0x44
   1d714:	b	1d2bc <__assert_fail@plt+0xba9c>
   1d718:	ldr	r3, [sp, #40]	; 0x28
   1d71c:	cmp	r3, #0
   1d720:	beq	1e3c8 <__assert_fail@plt+0xcba8>
   1d724:	mov	r3, #1
   1d728:	str	r3, [sp, #68]	; 0x44
   1d72c:	ldr	r3, [pc, #3708]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1d730:	str	r3, [sp, #72]	; 0x48
   1d734:	mov	r8, #0
   1d738:	ldr	r1, [sp, #56]	; 0x38
   1d73c:	ldr	r2, [sp, #176]	; 0xb0
   1d740:	ldr	ip, [sp, #40]	; 0x28
   1d744:	ldr	lr, [sp, #176]	; 0xb0
   1d748:	b	1d2bc <__assert_fail@plt+0xba9c>
   1d74c:	ldr	r3, [sp, #40]	; 0x28
   1d750:	cmp	r3, #0
   1d754:	beq	1e44c <__assert_fail@plt+0xcc2c>
   1d758:	str	r3, [sp, #56]	; 0x38
   1d75c:	mov	r3, #1
   1d760:	str	r3, [sp, #68]	; 0x44
   1d764:	ldr	r3, [pc, #3656]	; 1e5b4 <__assert_fail@plt+0xcd94>
   1d768:	b	1d730 <__assert_fail@plt+0xbf10>
   1d76c:	ldr	r3, [sp, #40]	; 0x28
   1d770:	cmp	r3, #0
   1d774:	mov	r3, #1
   1d778:	streq	r3, [sp, #56]	; 0x38
   1d77c:	beq	1e3c8 <__assert_fail@plt+0xcba8>
   1d780:	str	r3, [sp, #68]	; 0x44
   1d784:	ldr	r3, [pc, #3620]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1d788:	mov	r8, #0
   1d78c:	str	r3, [sp, #72]	; 0x48
   1d790:	b	1d5d8 <__assert_fail@plt+0xbdb8>
   1d794:	ldr	r3, [sp, #24]
   1d798:	ldr	r6, [sp, #48]	; 0x30
   1d79c:	cmn	r3, #1
   1d7a0:	beq	1ddfc <__assert_fail@plt+0xc5dc>
   1d7a4:	subs	r3, r3, #1
   1d7a8:	movne	r3, #1
   1d7ac:	cmp	r3, #0
   1d7b0:	beq	1db7c <__assert_fail@plt+0xc35c>
   1d7b4:	ldr	r1, [sp, #52]	; 0x34
   1d7b8:	mov	r7, r3
   1d7bc:	mov	r3, #0
   1d7c0:	str	r3, [sp, #32]
   1d7c4:	ldr	r3, [sp, #60]	; 0x3c
   1d7c8:	orr	r2, r1, r3
   1d7cc:	ldr	r3, [sp, #40]	; 0x28
   1d7d0:	eor	r2, r2, #1
   1d7d4:	orr	r2, r3, r2
   1d7d8:	tst	r2, #255	; 0xff
   1d7dc:	bne	1e100 <__assert_fail@plt+0xc8e0>
   1d7e0:	cmp	r6, #0
   1d7e4:	bne	1d9c0 <__assert_fail@plt+0xc1a0>
   1d7e8:	ldr	r3, [sp, #36]	; 0x24
   1d7ec:	add	sl, sl, #1
   1d7f0:	and	r3, r3, r7
   1d7f4:	uxtb	r6, r3
   1d7f8:	cmp	r6, #0
   1d7fc:	beq	1d828 <__assert_fail@plt+0xc008>
   1d800:	cmp	fp, r8
   1d804:	movhi	r3, #39	; 0x27
   1d808:	strbhi	r3, [r9, r8]
   1d80c:	add	r3, r8, #1
   1d810:	cmp	fp, r3
   1d814:	movhi	r2, #39	; 0x27
   1d818:	add	r8, r8, #2
   1d81c:	strbhi	r2, [r9, r3]
   1d820:	mov	r3, #0
   1d824:	str	r3, [sp, #36]	; 0x24
   1d828:	ldr	r2, [sp, #32]
   1d82c:	cmp	r8, fp
   1d830:	ldr	r3, [sp, #28]
   1d834:	strbcc	r4, [r9, r8]
   1d838:	cmp	r2, #0
   1d83c:	moveq	r3, #0
   1d840:	str	r3, [sp, #28]
   1d844:	ldr	r3, [sp, #24]
   1d848:	add	r8, r8, #1
   1d84c:	cmn	r3, #1
   1d850:	bne	1d328 <__assert_fail@plt+0xbb08>
   1d854:	ldr	r3, [sp, #44]	; 0x2c
   1d858:	ldrb	r3, [r3, sl]
   1d85c:	adds	r7, r3, #0
   1d860:	movne	r7, #1
   1d864:	cmp	r7, #0
   1d868:	bne	1d338 <__assert_fail@plt+0xbb18>
   1d86c:	ldr	r3, [sp, #64]	; 0x40
   1d870:	cmp	r8, #0
   1d874:	movne	r3, #0
   1d878:	andeq	r3, r3, #1
   1d87c:	cmp	r3, #0
   1d880:	str	r3, [sp, #64]	; 0x40
   1d884:	bne	1e328 <__assert_fail@plt+0xcb08>
   1d888:	ldr	r3, [sp, #40]	; 0x28
   1d88c:	ldr	r2, [sp, #52]	; 0x34
   1d890:	eor	r3, r3, #1
   1d894:	ands	r2, r2, r3
   1d898:	beq	1e754 <__assert_fail@plt+0xcf34>
   1d89c:	ldr	r3, [sp, #76]	; 0x4c
   1d8a0:	cmp	r3, #0
   1d8a4:	beq	1e724 <__assert_fail@plt+0xcf04>
   1d8a8:	ldr	r3, [sp, #28]
   1d8ac:	cmp	r3, #0
   1d8b0:	bne	1e6e0 <__assert_fail@plt+0xcec0>
   1d8b4:	ldr	r2, [sp, #84]	; 0x54
   1d8b8:	clz	r3, fp
   1d8bc:	cmp	r2, #0
   1d8c0:	lsr	r3, r3, #5
   1d8c4:	moveq	r3, #0
   1d8c8:	cmp	r3, #0
   1d8cc:	beq	1e680 <__assert_fail@plt+0xce60>
   1d8d0:	mov	fp, r2
   1d8d4:	str	r3, [sp, #76]	; 0x4c
   1d8d8:	b	1d264 <__assert_fail@plt+0xba44>
   1d8dc:	ldr	r3, [sp, #176]	; 0xb0
   1d8e0:	ldr	r6, [sp, #48]	; 0x30
   1d8e4:	cmp	r3, #2
   1d8e8:	beq	1de20 <__assert_fail@plt+0xc600>
   1d8ec:	ldr	r3, [sp, #88]	; 0x58
   1d8f0:	cmp	r3, #0
   1d8f4:	beq	1e3a4 <__assert_fail@plt+0xcb84>
   1d8f8:	mov	r3, #0
   1d8fc:	add	sl, sl, #1
   1d900:	ldr	r6, [sp, #36]	; 0x24
   1d904:	str	r3, [sp, #32]
   1d908:	mov	r4, #92	; 0x5c
   1d90c:	b	1d7f8 <__assert_fail@plt+0xbfd8>
   1d910:	ldr	r3, [sp, #176]	; 0xb0
   1d914:	ldr	r6, [sp, #48]	; 0x30
   1d918:	cmp	r3, #2
   1d91c:	beq	1de50 <__assert_fail@plt+0xc630>
   1d920:	cmp	r3, #5
   1d924:	bne	1e3b4 <__assert_fail@plt+0xcb94>
   1d928:	ldr	r3, [sp, #100]	; 0x64
   1d92c:	cmp	r3, #0
   1d930:	beq	1e418 <__assert_fail@plt+0xcbf8>
   1d934:	ldr	r2, [sp, #24]
   1d938:	add	r3, sl, #2
   1d93c:	cmp	r2, r3
   1d940:	bls	1d950 <__assert_fail@plt+0xc130>
   1d944:	ldrb	r4, [r5, #1]
   1d948:	cmp	r4, #63	; 0x3f
   1d94c:	beq	1e5c0 <__assert_fail@plt+0xcda0>
   1d950:	mov	r1, #0
   1d954:	str	r1, [sp, #32]
   1d958:	mov	r4, #63	; 0x3f
   1d95c:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1d960:	ldr	r3, [sp, #176]	; 0xb0
   1d964:	ldr	r6, [sp, #48]	; 0x30
   1d968:	cmp	r3, #2
   1d96c:	beq	1de7c <__assert_fail@plt+0xc65c>
   1d970:	str	r7, [sp, #32]
   1d974:	str	r7, [sp, #76]	; 0x4c
   1d978:	mov	r1, #0
   1d97c:	mov	r4, #39	; 0x27
   1d980:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1d984:	ldr	r6, [sp, #48]	; 0x30
   1d988:	ldr	r1, [sp, #52]	; 0x34
   1d98c:	str	r7, [sp, #32]
   1d990:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1d994:	ldr	r6, [sp, #48]	; 0x30
   1d998:	ldr	r1, [sp, #52]	; 0x34
   1d99c:	mov	r4, #12
   1d9a0:	mov	r3, #102	; 0x66
   1d9a4:	ldr	r2, [sp, #56]	; 0x38
   1d9a8:	cmp	r2, #0
   1d9ac:	streq	r2, [sp, #32]
   1d9b0:	beq	1d7c4 <__assert_fail@plt+0xbfa4>
   1d9b4:	mov	r4, r3
   1d9b8:	mov	r3, #0
   1d9bc:	str	r3, [sp, #32]
   1d9c0:	ldr	r3, [sp, #40]	; 0x28
   1d9c4:	cmp	r3, #0
   1d9c8:	bne	1e138 <__assert_fail@plt+0xc918>
   1d9cc:	ldr	r3, [sp, #36]	; 0x24
   1d9d0:	eor	r3, r3, #1
   1d9d4:	and	r3, r3, r1
   1d9d8:	ands	r3, r3, #255	; 0xff
   1d9dc:	beq	1da14 <__assert_fail@plt+0xc1f4>
   1d9e0:	cmp	fp, r8
   1d9e4:	movhi	r2, #39	; 0x27
   1d9e8:	strbhi	r2, [r9, r8]
   1d9ec:	add	r2, r8, #1
   1d9f0:	cmp	fp, r2
   1d9f4:	movhi	r1, #36	; 0x24
   1d9f8:	strbhi	r1, [r9, r2]
   1d9fc:	add	r2, r8, #2
   1da00:	cmp	fp, r2
   1da04:	add	r8, r8, #3
   1da08:	movhi	r1, #39	; 0x27
   1da0c:	strbhi	r1, [r9, r2]
   1da10:	str	r3, [sp, #36]	; 0x24
   1da14:	cmp	fp, r8
   1da18:	movhi	r3, #92	; 0x5c
   1da1c:	strbhi	r3, [r9, r8]
   1da20:	add	sl, sl, #1
   1da24:	add	r8, r8, #1
   1da28:	b	1d828 <__assert_fail@plt+0xc008>
   1da2c:	ldr	r6, [sp, #48]	; 0x30
   1da30:	mov	r4, #10
   1da34:	mov	r3, #110	; 0x6e
   1da38:	ldr	r2, [sp, #64]	; 0x40
   1da3c:	cmp	r2, #0
   1da40:	bne	1e4c0 <__assert_fail@plt+0xcca0>
   1da44:	ldr	r1, [sp, #52]	; 0x34
   1da48:	b	1d9a4 <__assert_fail@plt+0xc184>
   1da4c:	ldr	r6, [sp, #48]	; 0x30
   1da50:	ldr	r1, [sp, #52]	; 0x34
   1da54:	mov	r3, #116	; 0x74
   1da58:	b	1d9a4 <__assert_fail@plt+0xc184>
   1da5c:	ldr	r6, [sp, #48]	; 0x30
   1da60:	ldr	r1, [sp, #52]	; 0x34
   1da64:	mov	r4, #11
   1da68:	mov	r3, #118	; 0x76
   1da6c:	b	1d9a4 <__assert_fail@plt+0xc184>
   1da70:	ldr	r6, [sp, #48]	; 0x30
   1da74:	ldr	r1, [sp, #52]	; 0x34
   1da78:	mov	r4, #8
   1da7c:	mov	r3, #98	; 0x62
   1da80:	b	1d9a4 <__assert_fail@plt+0xc184>
   1da84:	ldr	r6, [sp, #48]	; 0x30
   1da88:	ldr	r1, [sp, #52]	; 0x34
   1da8c:	mov	r4, #7
   1da90:	mov	r3, #97	; 0x61
   1da94:	b	1d9a4 <__assert_fail@plt+0xc184>
   1da98:	ldr	r3, [sp, #56]	; 0x38
   1da9c:	ldr	r6, [sp, #48]	; 0x30
   1daa0:	cmp	r3, #0
   1daa4:	beq	1df68 <__assert_fail@plt+0xc748>
   1daa8:	ldr	r3, [sp, #40]	; 0x28
   1daac:	cmp	r3, #0
   1dab0:	bne	1e59c <__assert_fail@plt+0xcd7c>
   1dab4:	ldr	r3, [sp, #36]	; 0x24
   1dab8:	ldr	r2, [sp, #52]	; 0x34
   1dabc:	eor	r3, r3, #1
   1dac0:	ands	r3, r2, r3
   1dac4:	moveq	r2, r8
   1dac8:	beq	1db00 <__assert_fail@plt+0xc2e0>
   1dacc:	cmp	fp, r8
   1dad0:	movhi	r2, #39	; 0x27
   1dad4:	strbhi	r2, [r9, r8]
   1dad8:	add	r2, r8, #1
   1dadc:	cmp	fp, r2
   1dae0:	movhi	r1, #36	; 0x24
   1dae4:	strbhi	r1, [r9, r2]
   1dae8:	add	r2, r8, #2
   1daec:	cmp	fp, r2
   1daf0:	movhi	r1, #39	; 0x27
   1daf4:	strbhi	r1, [r9, r2]
   1daf8:	add	r2, r8, #3
   1dafc:	str	r3, [sp, #36]	; 0x24
   1db00:	cmp	fp, r2
   1db04:	movhi	r3, #92	; 0x5c
   1db08:	strbhi	r3, [r9, r2]
   1db0c:	ldr	r3, [sp, #92]	; 0x5c
   1db10:	add	r8, r2, #1
   1db14:	cmp	r3, #0
   1db18:	beq	1e49c <__assert_fail@plt+0xcc7c>
   1db1c:	ldr	r1, [sp, #24]
   1db20:	add	r3, sl, #1
   1db24:	cmp	r1, r3
   1db28:	bls	1db60 <__assert_fail@plt+0xc340>
   1db2c:	ldr	r1, [sp, #44]	; 0x2c
   1db30:	ldrb	r3, [r1, r3]
   1db34:	sub	r3, r3, #48	; 0x30
   1db38:	cmp	r3, #9
   1db3c:	bhi	1db60 <__assert_fail@plt+0xc340>
   1db40:	cmp	fp, r8
   1db44:	movhi	r3, #48	; 0x30
   1db48:	strbhi	r3, [r9, r8]
   1db4c:	add	r3, r2, #2
   1db50:	cmp	fp, r3
   1db54:	add	r8, r2, #3
   1db58:	movhi	r1, #48	; 0x30
   1db5c:	strbhi	r1, [r9, r3]
   1db60:	ldr	r3, [sp, #40]	; 0x28
   1db64:	ldr	r1, [sp, #52]	; 0x34
   1db68:	mov	r7, r3
   1db6c:	str	r3, [sp, #32]
   1db70:	mov	r4, #48	; 0x30
   1db74:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1db78:	ldr	r6, [sp, #48]	; 0x30
   1db7c:	cmp	sl, #0
   1db80:	streq	r7, [sp, #32]
   1db84:	beq	1dba4 <__assert_fail@plt+0xc384>
   1db88:	mov	r3, #0
   1db8c:	ldr	r1, [sp, #52]	; 0x34
   1db90:	str	r3, [sp, #32]
   1db94:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1db98:	ldr	r6, [sp, #48]	; 0x30
   1db9c:	mov	r3, #0
   1dba0:	str	r3, [sp, #32]
   1dba4:	ldr	r3, [sp, #64]	; 0x40
   1dba8:	cmp	r3, #0
   1dbac:	bne	1e328 <__assert_fail@plt+0xcb08>
   1dbb0:	ldr	r1, [sp, #52]	; 0x34
   1dbb4:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1dbb8:	ldr	r3, [sp, #48]	; 0x30
   1dbbc:	mov	r6, r3
   1dbc0:	str	r3, [sp, #32]
   1dbc4:	b	1dba4 <__assert_fail@plt+0xc384>
   1dbc8:	ldr	r6, [sp, #48]	; 0x30
   1dbcc:	mov	r4, #13
   1dbd0:	mov	r3, #114	; 0x72
   1dbd4:	b	1da38 <__assert_fail@plt+0xc218>
   1dbd8:	ldr	r3, [sp, #44]	; 0x2c
   1dbdc:	add	r5, r3, sl
   1dbe0:	ldrb	r4, [r5]
   1dbe4:	cmp	r4, #126	; 0x7e
   1dbe8:	ldrls	pc, [pc, r4, lsl #2]
   1dbec:	b	1df88 <__assert_fail@plt+0xc768>
   1dbf0:	andeq	sp, r1, r8, asr pc
   1dbf4:	andeq	sp, r1, r8, lsl #31
   1dbf8:	andeq	sp, r1, r8, lsl #31
   1dbfc:	andeq	sp, r1, r8, lsl #31
   1dc00:	andeq	sp, r1, r8, lsl #31
   1dc04:	andeq	sp, r1, r8, lsl #31
   1dc08:	andeq	sp, r1, r8, lsl #31
   1dc0c:	andeq	sp, r1, r0, asr pc
   1dc10:	andeq	sp, r1, r8, asr #30
   1dc14:	andeq	sp, r1, ip, lsr pc
   1dc18:	andeq	sp, r1, r4, lsr pc
   1dc1c:	andeq	sp, r1, ip, lsr #30
   1dc20:	andeq	sp, r1, r4, lsr #30
   1dc24:	andeq	sp, r1, ip, lsl pc
   1dc28:	andeq	sp, r1, r8, lsl #31
   1dc2c:	andeq	sp, r1, r8, lsl #31
   1dc30:	andeq	sp, r1, r8, lsl #31
   1dc34:	andeq	sp, r1, r8, lsl #31
   1dc38:	andeq	sp, r1, r8, lsl #31
   1dc3c:	andeq	sp, r1, r8, lsl #31
   1dc40:	andeq	sp, r1, r8, lsl #31
   1dc44:	andeq	sp, r1, r8, lsl #31
   1dc48:	andeq	sp, r1, r8, lsl #31
   1dc4c:	andeq	sp, r1, r8, lsl #31
   1dc50:	andeq	sp, r1, r8, lsl #31
   1dc54:	andeq	sp, r1, r8, lsl #31
   1dc58:	andeq	sp, r1, r8, lsl #31
   1dc5c:	andeq	sp, r1, r8, lsl #31
   1dc60:	andeq	sp, r1, r8, lsl #31
   1dc64:	andeq	sp, r1, r8, lsl #31
   1dc68:	andeq	sp, r1, r8, lsl #31
   1dc6c:	andeq	sp, r1, r8, lsl #31
   1dc70:	andeq	sp, r1, r0, lsl pc
   1dc74:	andeq	sp, r1, r8, lsl #30
   1dc78:	andeq	sp, r1, r8, lsl #30
   1dc7c:	andeq	sp, r1, r0, lsl #30
   1dc80:	andeq	sp, r1, r8, lsl #30
   1dc84:	strdeq	sp, [r1], -r8
   1dc88:	andeq	sp, r1, r8, lsl #30
   1dc8c:	andeq	sp, r1, ip, ror #28
   1dc90:	andeq	sp, r1, r8, lsl #30
   1dc94:	andeq	sp, r1, r8, lsl #30
   1dc98:	andeq	sp, r1, r8, lsl #30
   1dc9c:	strdeq	sp, [r1], -r8
   1dca0:	strdeq	sp, [r1], -r8
   1dca4:	strdeq	sp, [r1], -r8
   1dca8:	strdeq	sp, [r1], -r8
   1dcac:	strdeq	sp, [r1], -r8
   1dcb0:	strdeq	sp, [r1], -r8
   1dcb4:	strdeq	sp, [r1], -r8
   1dcb8:	strdeq	sp, [r1], -r8
   1dcbc:	strdeq	sp, [r1], -r8
   1dcc0:	strdeq	sp, [r1], -r8
   1dcc4:	strdeq	sp, [r1], -r8
   1dcc8:	strdeq	sp, [r1], -r8
   1dccc:	strdeq	sp, [r1], -r8
   1dcd0:	strdeq	sp, [r1], -r8
   1dcd4:	strdeq	sp, [r1], -r8
   1dcd8:	strdeq	sp, [r1], -r8
   1dcdc:	andeq	sp, r1, r8, lsl #30
   1dce0:	andeq	sp, r1, r8, lsl #30
   1dce4:	andeq	sp, r1, r8, lsl #30
   1dce8:	andeq	sp, r1, r8, lsl #30
   1dcec:	andeq	sp, r1, r0, asr #28
   1dcf0:	andeq	sp, r1, r8, lsl #31
   1dcf4:	strdeq	sp, [r1], -r8
   1dcf8:	strdeq	sp, [r1], -r8
   1dcfc:	strdeq	sp, [r1], -r8
   1dd00:	strdeq	sp, [r1], -r8
   1dd04:	strdeq	sp, [r1], -r8
   1dd08:	strdeq	sp, [r1], -r8
   1dd0c:	strdeq	sp, [r1], -r8
   1dd10:	strdeq	sp, [r1], -r8
   1dd14:	strdeq	sp, [r1], -r8
   1dd18:	strdeq	sp, [r1], -r8
   1dd1c:	strdeq	sp, [r1], -r8
   1dd20:	strdeq	sp, [r1], -r8
   1dd24:	strdeq	sp, [r1], -r8
   1dd28:	strdeq	sp, [r1], -r8
   1dd2c:	strdeq	sp, [r1], -r8
   1dd30:	strdeq	sp, [r1], -r8
   1dd34:	strdeq	sp, [r1], -r8
   1dd38:	strdeq	sp, [r1], -r8
   1dd3c:	strdeq	sp, [r1], -r8
   1dd40:	strdeq	sp, [r1], -r8
   1dd44:	strdeq	sp, [r1], -r8
   1dd48:	strdeq	sp, [r1], -r8
   1dd4c:	strdeq	sp, [r1], -r8
   1dd50:	strdeq	sp, [r1], -r8
   1dd54:	strdeq	sp, [r1], -r8
   1dd58:	strdeq	sp, [r1], -r8
   1dd5c:	andeq	sp, r1, r8, lsl #30
   1dd60:	andeq	sp, r1, r0, lsl lr
   1dd64:	strdeq	sp, [r1], -r8
   1dd68:	andeq	sp, r1, r8, lsl #30
   1dd6c:	strdeq	sp, [r1], -r8
   1dd70:	andeq	sp, r1, r8, lsl #30
   1dd74:	strdeq	sp, [r1], -r8
   1dd78:	strdeq	sp, [r1], -r8
   1dd7c:	strdeq	sp, [r1], -r8
   1dd80:	strdeq	sp, [r1], -r8
   1dd84:	strdeq	sp, [r1], -r8
   1dd88:	strdeq	sp, [r1], -r8
   1dd8c:	strdeq	sp, [r1], -r8
   1dd90:	strdeq	sp, [r1], -r8
   1dd94:	strdeq	sp, [r1], -r8
   1dd98:	strdeq	sp, [r1], -r8
   1dd9c:	strdeq	sp, [r1], -r8
   1dda0:	strdeq	sp, [r1], -r8
   1dda4:	strdeq	sp, [r1], -r8
   1dda8:	strdeq	sp, [r1], -r8
   1ddac:	strdeq	sp, [r1], -r8
   1ddb0:	strdeq	sp, [r1], -r8
   1ddb4:	strdeq	sp, [r1], -r8
   1ddb8:	strdeq	sp, [r1], -r8
   1ddbc:	strdeq	sp, [r1], -r8
   1ddc0:	strdeq	sp, [r1], -r8
   1ddc4:	strdeq	sp, [r1], -r8
   1ddc8:	strdeq	sp, [r1], -r8
   1ddcc:	strdeq	sp, [r1], -r8
   1ddd0:	strdeq	sp, [r1], -r8
   1ddd4:	strdeq	sp, [r1], -r8
   1ddd8:	strdeq	sp, [r1], -r8
   1dddc:	andeq	sp, r1, ip, ror #27
   1dde0:	andeq	sp, r1, r8, lsl #30
   1dde4:	andeq	sp, r1, ip, ror #27
   1dde8:	andeq	sp, r1, r0, lsl #30
   1ddec:	ldr	r3, [sp, #24]
   1ddf0:	mov	r6, #0
   1ddf4:	cmn	r3, #1
   1ddf8:	bne	1d7a4 <__assert_fail@plt+0xbf84>
   1ddfc:	ldr	r3, [sp, #44]	; 0x2c
   1de00:	ldrb	r3, [r3, #1]
   1de04:	adds	r3, r3, #0
   1de08:	movne	r3, #1
   1de0c:	b	1d7ac <__assert_fail@plt+0xbf8c>
   1de10:	ldr	r3, [sp, #176]	; 0xb0
   1de14:	mov	r6, #0
   1de18:	cmp	r3, #2
   1de1c:	bne	1d8ec <__assert_fail@plt+0xc0cc>
   1de20:	ldr	r3, [sp, #64]	; 0x40
   1de24:	cmp	r3, #0
   1de28:	bne	1e660 <__assert_fail@plt+0xce40>
   1de2c:	add	sl, sl, #1
   1de30:	ldr	r6, [sp, #36]	; 0x24
   1de34:	str	r3, [sp, #32]
   1de38:	mov	r4, #92	; 0x5c
   1de3c:	b	1d7f8 <__assert_fail@plt+0xbfd8>
   1de40:	ldr	r3, [sp, #176]	; 0xb0
   1de44:	mov	r6, #0
   1de48:	cmp	r3, #2
   1de4c:	bne	1d920 <__assert_fail@plt+0xc100>
   1de50:	ldr	r3, [sp, #40]	; 0x28
   1de54:	cmp	r3, #0
   1de58:	bne	1e13c <__assert_fail@plt+0xc91c>
   1de5c:	mov	r1, r7
   1de60:	str	r3, [sp, #32]
   1de64:	mov	r4, #63	; 0x3f
   1de68:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1de6c:	ldr	r3, [sp, #176]	; 0xb0
   1de70:	mov	r6, #0
   1de74:	cmp	r3, #2
   1de78:	bne	1d970 <__assert_fail@plt+0xc150>
   1de7c:	ldr	r3, [sp, #64]	; 0x40
   1de80:	cmp	r3, #0
   1de84:	bne	1e660 <__assert_fail@plt+0xce40>
   1de88:	ldr	r2, [sp, #84]	; 0x54
   1de8c:	adds	r3, fp, #0
   1de90:	movne	r3, #1
   1de94:	cmp	r2, #0
   1de98:	movne	r3, #0
   1de9c:	cmp	r3, #0
   1dea0:	strne	fp, [sp, #84]	; 0x54
   1dea4:	movne	fp, #0
   1dea8:	bne	1ded8 <__assert_fail@plt+0xc6b8>
   1deac:	cmp	fp, r8
   1deb0:	movhi	r3, #39	; 0x27
   1deb4:	strbhi	r3, [r9, r8]
   1deb8:	add	r3, r8, #1
   1debc:	cmp	fp, r3
   1dec0:	movhi	r2, #92	; 0x5c
   1dec4:	strbhi	r2, [r9, r3]
   1dec8:	add	r3, r8, #2
   1decc:	cmp	fp, r3
   1ded0:	movhi	r2, #39	; 0x27
   1ded4:	strbhi	r2, [r9, r3]
   1ded8:	ldr	r3, [sp, #64]	; 0x40
   1dedc:	add	r8, r8, #3
   1dee0:	mov	r1, r7
   1dee4:	str	r7, [sp, #32]
   1dee8:	str	r7, [sp, #76]	; 0x4c
   1deec:	str	r3, [sp, #36]	; 0x24
   1def0:	mov	r4, #39	; 0x27
   1def4:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1def8:	mov	r6, #0
   1defc:	b	1d988 <__assert_fail@plt+0xc168>
   1df00:	mov	r6, #0
   1df04:	b	1db7c <__assert_fail@plt+0xc35c>
   1df08:	mov	r6, #0
   1df0c:	b	1db9c <__assert_fail@plt+0xc37c>
   1df10:	str	r7, [sp, #32]
   1df14:	mov	r6, #0
   1df18:	b	1dba4 <__assert_fail@plt+0xc384>
   1df1c:	mov	r6, #0
   1df20:	b	1dbcc <__assert_fail@plt+0xc3ac>
   1df24:	mov	r6, #0
   1df28:	b	1d998 <__assert_fail@plt+0xc178>
   1df2c:	mov	r6, #0
   1df30:	b	1da60 <__assert_fail@plt+0xc240>
   1df34:	mov	r6, #0
   1df38:	b	1da30 <__assert_fail@plt+0xc210>
   1df3c:	mov	r6, #0
   1df40:	mov	r3, #116	; 0x74
   1df44:	b	1da38 <__assert_fail@plt+0xc218>
   1df48:	mov	r6, #0
   1df4c:	b	1da74 <__assert_fail@plt+0xc254>
   1df50:	mov	r6, #0
   1df54:	b	1da88 <__assert_fail@plt+0xc268>
   1df58:	ldr	r3, [sp, #56]	; 0x38
   1df5c:	mov	r6, #0
   1df60:	cmp	r3, #0
   1df64:	bne	1daa8 <__assert_fail@plt+0xc288>
   1df68:	ldr	r3, [sp, #96]	; 0x60
   1df6c:	cmp	r3, #0
   1df70:	addne	sl, sl, #1
   1df74:	bne	1d31c <__assert_fail@plt+0xbafc>
   1df78:	ldr	r1, [sp, #52]	; 0x34
   1df7c:	str	r3, [sp, #32]
   1df80:	mov	r4, r3
   1df84:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1df88:	mov	r6, #0
   1df8c:	ldr	r3, [sp, #80]	; 0x50
   1df90:	cmp	r3, #1
   1df94:	bne	1e184 <__assert_fail@plt+0xc964>
   1df98:	bl	11610 <__ctype_b_loc@plt>
   1df9c:	ldr	r2, [sp, #80]	; 0x50
   1dfa0:	sxth	r3, r4
   1dfa4:	mov	r1, r2
   1dfa8:	lsl	r3, r3, #1
   1dfac:	ldr	r2, [r0]
   1dfb0:	ldrh	r3, [r2, r3]
   1dfb4:	and	r3, r3, #16384	; 0x4000
   1dfb8:	cmp	r3, #0
   1dfbc:	movne	r3, #1
   1dfc0:	moveq	r3, #0
   1dfc4:	str	r3, [sp, #32]
   1dfc8:	moveq	r3, #1
   1dfcc:	movne	r3, #0
   1dfd0:	ldr	r2, [sp, #56]	; 0x38
   1dfd4:	and	r3, r3, r2
   1dfd8:	ands	r3, r3, #255	; 0xff
   1dfdc:	beq	1dbb0 <__assert_fail@plt+0xc390>
   1dfe0:	add	r1, sl, r1
   1dfe4:	mov	r0, #0
   1dfe8:	ldr	r7, [sp, #40]	; 0x28
   1dfec:	ldr	r2, [sp, #36]	; 0x24
   1dff0:	ldr	lr, [sp, #52]	; 0x34
   1dff4:	b	1e0a4 <__assert_fail@plt+0xc884>
   1dff8:	cmp	r7, #0
   1dffc:	bne	1e3f8 <__assert_fail@plt+0xcbd8>
   1e000:	eor	r0, r2, #1
   1e004:	ands	r0, lr, r0
   1e008:	beq	1e040 <__assert_fail@plt+0xc820>
   1e00c:	cmp	fp, r8
   1e010:	movhi	r2, #39	; 0x27
   1e014:	strbhi	r2, [r9, r8]
   1e018:	add	r2, r8, #1
   1e01c:	cmp	fp, r2
   1e020:	movhi	ip, #36	; 0x24
   1e024:	strbhi	ip, [r9, r2]
   1e028:	add	r2, r8, #2
   1e02c:	cmp	fp, r2
   1e030:	movhi	ip, #39	; 0x27
   1e034:	strbhi	ip, [r9, r2]
   1e038:	add	r8, r8, #3
   1e03c:	mov	r2, r0
   1e040:	cmp	fp, r8
   1e044:	movhi	r0, #92	; 0x5c
   1e048:	strbhi	r0, [r9, r8]
   1e04c:	add	r0, r8, #1
   1e050:	cmp	fp, r0
   1e054:	lsrhi	ip, r4, #6
   1e058:	addhi	ip, ip, #48	; 0x30
   1e05c:	strbhi	ip, [r9, r0]
   1e060:	add	ip, r8, #2
   1e064:	cmp	fp, ip
   1e068:	lsrhi	r0, r4, #3
   1e06c:	andhi	r0, r0, #7
   1e070:	addhi	r0, r0, #48	; 0x30
   1e074:	add	sl, sl, #1
   1e078:	strbhi	r0, [r9, ip]
   1e07c:	and	r4, r4, #7
   1e080:	cmp	sl, r1
   1e084:	add	r4, r4, #48	; 0x30
   1e088:	add	r8, r8, #3
   1e08c:	bcs	1e410 <__assert_fail@plt+0xcbf0>
   1e090:	mov	r0, r3
   1e094:	cmp	fp, r8
   1e098:	strbhi	r4, [r9, r8]
   1e09c:	ldrb	r4, [r5, #1]!
   1e0a0:	add	r8, r8, #1
   1e0a4:	cmp	r3, #0
   1e0a8:	bne	1dff8 <__assert_fail@plt+0xc7d8>
   1e0ac:	cmp	r6, #0
   1e0b0:	bne	1e154 <__assert_fail@plt+0xc934>
   1e0b4:	eor	r6, r0, #1
   1e0b8:	and	r6, r6, r2
   1e0bc:	add	sl, sl, #1
   1e0c0:	cmp	r1, sl
   1e0c4:	uxtb	r6, r6
   1e0c8:	bls	1e17c <__assert_fail@plt+0xc95c>
   1e0cc:	cmp	r6, #0
   1e0d0:	beq	1e094 <__assert_fail@plt+0xc874>
   1e0d4:	cmp	fp, r8
   1e0d8:	movhi	r2, #39	; 0x27
   1e0dc:	strbhi	r2, [r9, r8]
   1e0e0:	add	r2, r8, #1
   1e0e4:	cmp	fp, r2
   1e0e8:	movhi	ip, #39	; 0x27
   1e0ec:	strbhi	ip, [r9, r2]
   1e0f0:	add	r8, r8, #2
   1e0f4:	mov	r6, r3
   1e0f8:	mov	r2, r3
   1e0fc:	b	1e094 <__assert_fail@plt+0xc874>
   1e100:	ldr	r3, [sp, #184]	; 0xb8
   1e104:	cmp	r3, #0
   1e108:	beq	1d7e0 <__assert_fail@plt+0xbfc0>
   1e10c:	lsr	r2, r4, #5
   1e110:	mov	r0, r3
   1e114:	uxtb	r2, r2
   1e118:	and	r3, r4, #31
   1e11c:	ldr	r2, [r0, r2, lsl #2]
   1e120:	lsr	r3, r2, r3
   1e124:	tst	r3, #1
   1e128:	beq	1d7e0 <__assert_fail@plt+0xbfc0>
   1e12c:	ldr	r3, [sp, #40]	; 0x28
   1e130:	cmp	r3, #0
   1e134:	beq	1d9cc <__assert_fail@plt+0xc1ac>
   1e138:	mov	r3, r1
   1e13c:	str	r3, [sp, #64]	; 0x40
   1e140:	mov	sl, r9
   1e144:	ldr	r3, [sp, #56]	; 0x38
   1e148:	mov	r9, fp
   1e14c:	ldr	r2, [sp, #64]	; 0x40
   1e150:	b	1e340 <__assert_fail@plt+0xcb20>
   1e154:	cmp	fp, r8
   1e158:	eor	r6, r0, #1
   1e15c:	movhi	ip, #92	; 0x5c
   1e160:	and	r6, r6, r2
   1e164:	add	sl, sl, #1
   1e168:	strbhi	ip, [r9, r8]
   1e16c:	cmp	r1, sl
   1e170:	add	r8, r8, #1
   1e174:	uxtb	r6, r6
   1e178:	bhi	1e0cc <__assert_fail@plt+0xc8ac>
   1e17c:	str	r2, [sp, #36]	; 0x24
   1e180:	b	1d7f8 <__assert_fail@plt+0xbfd8>
   1e184:	ldr	r3, [sp, #24]
   1e188:	cmn	r3, #1
   1e18c:	mov	r3, #0
   1e190:	str	r3, [sp, #128]	; 0x80
   1e194:	str	r3, [sp, #132]	; 0x84
   1e198:	beq	1e48c <__assert_fail@plt+0xcc6c>
   1e19c:	mov	r2, r7
   1e1a0:	mov	r3, #0
   1e1a4:	str	r7, [sp, #104]	; 0x68
   1e1a8:	str	r5, [sp, #116]	; 0x74
   1e1ac:	mov	r7, r3
   1e1b0:	mov	r5, r2
   1e1b4:	str	r4, [sp, #32]
   1e1b8:	str	r6, [sp, #108]	; 0x6c
   1e1bc:	str	r8, [sp, #112]	; 0x70
   1e1c0:	ldr	r3, [sp, #44]	; 0x2c
   1e1c4:	add	r6, sl, r7
   1e1c8:	add	r4, r3, r6
   1e1cc:	ldr	r3, [sp, #24]
   1e1d0:	mov	r1, r4
   1e1d4:	sub	r2, r3, r6
   1e1d8:	add	r0, sp, #124	; 0x7c
   1e1dc:	add	r3, sp, #128	; 0x80
   1e1e0:	bl	239a8 <__assert_fail@plt+0x12188>
   1e1e4:	subs	r8, r0, #0
   1e1e8:	beq	1e570 <__assert_fail@plt+0xcd50>
   1e1ec:	cmn	r8, #1
   1e1f0:	beq	1e548 <__assert_fail@plt+0xcd28>
   1e1f4:	cmn	r8, #2
   1e1f8:	beq	1e4e0 <__assert_fail@plt+0xccc0>
   1e1fc:	ldr	r3, [sp, #64]	; 0x40
   1e200:	cmp	r3, #0
   1e204:	beq	1e2c4 <__assert_fail@plt+0xcaa4>
   1e208:	cmp	r8, #1
   1e20c:	beq	1e2c4 <__assert_fail@plt+0xcaa4>
   1e210:	sub	r3, r8, #1
   1e214:	add	r6, r3, r6
   1e218:	ldr	r3, [sp, #44]	; 0x2c
   1e21c:	add	r6, r3, r6
   1e220:	ldrb	r3, [r4, #1]!
   1e224:	sub	r3, r3, #91	; 0x5b
   1e228:	cmp	r3, #33	; 0x21
   1e22c:	ldrls	pc, [pc, r3, lsl #2]
   1e230:	b	1e2bc <__assert_fail@plt+0xca9c>
   1e234:	andeq	lr, r1, r8, lsr #6
   1e238:	andeq	lr, r1, r8, lsr #6
   1e23c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e240:	andeq	lr, r1, r8, lsr #6
   1e244:			; <UNDEFINED> instruction: 0x0001e2bc
   1e248:	andeq	lr, r1, r8, lsr #6
   1e24c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e250:			; <UNDEFINED> instruction: 0x0001e2bc
   1e254:			; <UNDEFINED> instruction: 0x0001e2bc
   1e258:			; <UNDEFINED> instruction: 0x0001e2bc
   1e25c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e260:			; <UNDEFINED> instruction: 0x0001e2bc
   1e264:			; <UNDEFINED> instruction: 0x0001e2bc
   1e268:			; <UNDEFINED> instruction: 0x0001e2bc
   1e26c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e270:			; <UNDEFINED> instruction: 0x0001e2bc
   1e274:			; <UNDEFINED> instruction: 0x0001e2bc
   1e278:			; <UNDEFINED> instruction: 0x0001e2bc
   1e27c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e280:			; <UNDEFINED> instruction: 0x0001e2bc
   1e284:			; <UNDEFINED> instruction: 0x0001e2bc
   1e288:			; <UNDEFINED> instruction: 0x0001e2bc
   1e28c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e290:			; <UNDEFINED> instruction: 0x0001e2bc
   1e294:			; <UNDEFINED> instruction: 0x0001e2bc
   1e298:			; <UNDEFINED> instruction: 0x0001e2bc
   1e29c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2a0:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2a4:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2a8:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2ac:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2b0:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2b4:			; <UNDEFINED> instruction: 0x0001e2bc
   1e2b8:	andeq	lr, r1, r8, lsr #6
   1e2bc:	cmp	r6, r4
   1e2c0:	bne	1e220 <__assert_fail@plt+0xca00>
   1e2c4:	ldr	r0, [sp, #124]	; 0x7c
   1e2c8:	bl	11508 <iswprint@plt>
   1e2cc:	add	r7, r7, r8
   1e2d0:	cmp	r0, #0
   1e2d4:	add	r0, sp, #128	; 0x80
   1e2d8:	moveq	r5, #0
   1e2dc:	bl	1149c <mbsinit@plt>
   1e2e0:	cmp	r0, #0
   1e2e4:	beq	1e1c0 <__assert_fail@plt+0xc9a0>
   1e2e8:	ldr	r4, [sp, #32]
   1e2ec:	str	r5, [sp, #32]
   1e2f0:	ldr	r3, [sp, #32]
   1e2f4:	mov	r1, r7
   1e2f8:	eor	r3, r3, #1
   1e2fc:	ldr	r7, [sp, #104]	; 0x68
   1e300:	ldr	r6, [sp, #108]	; 0x6c
   1e304:	ldr	r8, [sp, #112]	; 0x70
   1e308:	ldr	r5, [sp, #116]	; 0x74
   1e30c:	uxtb	r3, r3
   1e310:	cmp	r1, #1
   1e314:	bls	1dfd0 <__assert_fail@plt+0xc7b0>
   1e318:	ldr	r2, [sp, #56]	; 0x38
   1e31c:	and	r3, r3, r2
   1e320:	uxtb	r3, r3
   1e324:	b	1dfe0 <__assert_fail@plt+0xc7c0>
   1e328:	mov	r3, #2
   1e32c:	str	r3, [sp, #176]	; 0xb0
   1e330:	ldr	r2, [sp, #64]	; 0x40
   1e334:	ldr	r3, [sp, #56]	; 0x38
   1e338:	mov	sl, r9
   1e33c:	mov	r9, fp
   1e340:	and	r3, r3, r2
   1e344:	tst	r3, #255	; 0xff
   1e348:	ldr	r3, [sp, #176]	; 0xb0
   1e34c:	movne	r3, #4
   1e350:	str	r3, [sp, #176]	; 0xb0
   1e354:	ldr	r3, [sp, #180]	; 0xb4
   1e358:	mov	ip, #0
   1e35c:	bic	r3, r3, #2
   1e360:	str	r3, [sp, #4]
   1e364:	ldr	r3, [sp, #192]	; 0xc0
   1e368:	ldr	r2, [sp, #44]	; 0x2c
   1e36c:	str	r3, [sp, #16]
   1e370:	ldr	r3, [sp, #188]	; 0xbc
   1e374:	mov	r1, r9
   1e378:	str	r3, [sp, #12]
   1e37c:	ldr	r3, [sp, #176]	; 0xb0
   1e380:	mov	r0, sl
   1e384:	str	r3, [sp]
   1e388:	str	ip, [sp, #8]
   1e38c:	ldr	r3, [sp, #24]
   1e390:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1e394:	mov	fp, r0
   1e398:	mov	r0, fp
   1e39c:	add	sp, sp, #140	; 0x8c
   1e3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3a4:	mov	r4, #92	; 0x5c
   1e3a8:	mov	r1, #0
   1e3ac:	mov	r3, r4
   1e3b0:	b	1d9a4 <__assert_fail@plt+0xc184>
   1e3b4:	mov	r3, #0
   1e3b8:	ldr	r1, [sp, #52]	; 0x34
   1e3bc:	str	r3, [sp, #32]
   1e3c0:	mov	r4, #63	; 0x3f
   1e3c4:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1e3c8:	cmp	fp, #0
   1e3cc:	beq	1e428 <__assert_fail@plt+0xcc08>
   1e3d0:	mov	r3, #39	; 0x27
   1e3d4:	strb	r3, [r9]
   1e3d8:	mov	r3, #0
   1e3dc:	str	r3, [sp, #40]	; 0x28
   1e3e0:	mov	r3, #1
   1e3e4:	str	r3, [sp, #68]	; 0x44
   1e3e8:	ldr	r3, [pc, #448]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1e3ec:	mov	r8, #1
   1e3f0:	str	r3, [sp, #72]	; 0x48
   1e3f4:	b	1d5d8 <__assert_fail@plt+0xbdb8>
   1e3f8:	ldr	r3, [sp, #40]	; 0x28
   1e3fc:	mov	sl, r9
   1e400:	str	r3, [sp, #56]	; 0x38
   1e404:	mov	r9, fp
   1e408:	ldr	r2, [sp, #64]	; 0x40
   1e40c:	b	1e340 <__assert_fail@plt+0xcb20>
   1e410:	str	r2, [sp, #36]	; 0x24
   1e414:	b	1d828 <__assert_fail@plt+0xc008>
   1e418:	mov	r1, #0
   1e41c:	str	r3, [sp, #32]
   1e420:	mov	r4, #63	; 0x3f
   1e424:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1e428:	ldr	r3, [pc, #384]	; 1e5b0 <__assert_fail@plt+0xcd90>
   1e42c:	str	r3, [sp, #72]	; 0x48
   1e430:	mov	r3, #0
   1e434:	str	r3, [sp, #40]	; 0x28
   1e438:	mov	r3, #1
   1e43c:	str	r3, [sp, #68]	; 0x44
   1e440:	mov	r8, r3
   1e444:	b	1d5d8 <__assert_fail@plt+0xbdb8>
   1e448:	bl	117f0 <abort@plt>
   1e44c:	cmp	fp, #0
   1e450:	beq	1e4b0 <__assert_fail@plt+0xcc90>
   1e454:	mov	r2, #1
   1e458:	mov	r3, #34	; 0x22
   1e45c:	strb	r3, [r9]
   1e460:	mov	r8, r2
   1e464:	mov	r3, r2
   1e468:	str	r2, [sp, #68]	; 0x44
   1e46c:	str	r3, [sp, #56]	; 0x38
   1e470:	ldr	r3, [pc, #316]	; 1e5b4 <__assert_fail@plt+0xcd94>
   1e474:	ldr	r1, [sp, #56]	; 0x38
   1e478:	str	r3, [sp, #72]	; 0x48
   1e47c:	ldr	r2, [sp, #176]	; 0xb0
   1e480:	ldr	ip, [sp, #40]	; 0x28
   1e484:	ldr	lr, [sp, #176]	; 0xb0
   1e488:	b	1d2bc <__assert_fail@plt+0xba9c>
   1e48c:	ldr	r0, [sp, #44]	; 0x2c
   1e490:	bl	11640 <strlen@plt>
   1e494:	str	r0, [sp, #24]
   1e498:	b	1e19c <__assert_fail@plt+0xc97c>
   1e49c:	mov	r7, #0
   1e4a0:	ldr	r1, [sp, #52]	; 0x34
   1e4a4:	str	r3, [sp, #32]
   1e4a8:	mov	r4, #48	; 0x30
   1e4ac:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1e4b0:	mov	r3, #1
   1e4b4:	str	r3, [sp, #68]	; 0x44
   1e4b8:	mov	r8, r3
   1e4bc:	b	1e46c <__assert_fail@plt+0xcc4c>
   1e4c0:	mov	r3, #2
   1e4c4:	mov	sl, r9
   1e4c8:	str	r3, [sp, #176]	; 0xb0
   1e4cc:	mov	r9, fp
   1e4d0:	ldr	r3, [sp, #56]	; 0x38
   1e4d4:	b	1e340 <__assert_fail@plt+0xcb20>
   1e4d8:	ldr	r6, [sp, #48]	; 0x30
   1e4dc:	b	1df8c <__assert_fail@plt+0xc76c>
   1e4e0:	ldr	r0, [sp, #24]
   1e4e4:	mov	ip, r6
   1e4e8:	cmp	r0, ip
   1e4ec:	mov	r1, r7
   1e4f0:	mov	r2, r4
   1e4f4:	ldr	r7, [sp, #104]	; 0x68
   1e4f8:	ldr	r4, [sp, #32]
   1e4fc:	ldr	r6, [sp, #108]	; 0x6c
   1e500:	ldr	r8, [sp, #112]	; 0x70
   1e504:	ldr	r5, [sp, #116]	; 0x74
   1e508:	bls	1e538 <__assert_fail@plt+0xcd18>
   1e50c:	ldrb	r3, [r2]
   1e510:	cmp	r3, #0
   1e514:	bne	1e528 <__assert_fail@plt+0xcd08>
   1e518:	b	1e648 <__assert_fail@plt+0xce28>
   1e51c:	ldrb	r3, [r2, #1]!
   1e520:	cmp	r3, #0
   1e524:	beq	1e648 <__assert_fail@plt+0xce28>
   1e528:	add	r1, r1, #1
   1e52c:	add	r3, sl, r1
   1e530:	cmp	r0, r3
   1e534:	bhi	1e51c <__assert_fail@plt+0xccfc>
   1e538:	mov	r2, #0
   1e53c:	mov	r3, r7
   1e540:	str	r2, [sp, #32]
   1e544:	b	1e310 <__assert_fail@plt+0xcaf0>
   1e548:	mov	r1, r7
   1e54c:	ldr	r7, [sp, #104]	; 0x68
   1e550:	mov	r2, #0
   1e554:	ldr	r4, [sp, #32]
   1e558:	ldr	r6, [sp, #108]	; 0x6c
   1e55c:	ldr	r8, [sp, #112]	; 0x70
   1e560:	ldr	r5, [sp, #116]	; 0x74
   1e564:	mov	r3, r7
   1e568:	str	r2, [sp, #32]
   1e56c:	b	1e310 <__assert_fail@plt+0xcaf0>
   1e570:	mov	r3, r5
   1e574:	eor	r3, r3, #1
   1e578:	ldr	r4, [sp, #32]
   1e57c:	mov	r1, r7
   1e580:	str	r5, [sp, #32]
   1e584:	ldr	r7, [sp, #104]	; 0x68
   1e588:	ldr	r6, [sp, #108]	; 0x6c
   1e58c:	ldr	r8, [sp, #112]	; 0x70
   1e590:	ldr	r5, [sp, #116]	; 0x74
   1e594:	uxtb	r3, r3
   1e598:	b	1e310 <__assert_fail@plt+0xcaf0>
   1e59c:	mov	sl, r9
   1e5a0:	str	r3, [sp, #56]	; 0x38
   1e5a4:	mov	r9, fp
   1e5a8:	ldr	r2, [sp, #64]	; 0x40
   1e5ac:	b	1e340 <__assert_fail@plt+0xcb20>
   1e5b0:	andeq	r6, r2, r0, lsr #7
   1e5b4:	muleq	r2, ip, r3
   1e5b8:	andeq	r6, r2, r4, lsr #7
   1e5bc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1e5c0:	ldr	r2, [sp, #44]	; 0x2c
   1e5c4:	ldrb	r1, [r2, r3]
   1e5c8:	sub	r2, r1, #33	; 0x21
   1e5cc:	uxtb	r2, r2
   1e5d0:	cmp	r2, #29
   1e5d4:	bhi	1e654 <__assert_fail@plt+0xce34>
   1e5d8:	ldr	r0, [pc, #-36]	; 1e5bc <__assert_fail@plt+0xcd9c>
   1e5dc:	mov	ip, #1
   1e5e0:	ands	r2, r0, ip, lsl r2
   1e5e4:	beq	1e674 <__assert_fail@plt+0xce54>
   1e5e8:	ldr	r2, [sp, #40]	; 0x28
   1e5ec:	cmp	r2, #0
   1e5f0:	bne	1e768 <__assert_fail@plt+0xcf48>
   1e5f4:	add	r2, r8, #1
   1e5f8:	cmp	fp, r8
   1e5fc:	strbhi	r4, [r9, r8]
   1e600:	cmp	fp, r2
   1e604:	movhi	r0, #34	; 0x22
   1e608:	strbhi	r0, [r9, r2]
   1e60c:	add	r2, r8, #2
   1e610:	cmp	fp, r2
   1e614:	movhi	r0, #34	; 0x22
   1e618:	strbhi	r0, [r9, r2]
   1e61c:	add	r2, r8, #3
   1e620:	cmp	fp, r2
   1e624:	mov	sl, r3
   1e628:	ldr	r3, [sp, #40]	; 0x28
   1e62c:	movhi	r0, #63	; 0x3f
   1e630:	mov	r4, r1
   1e634:	strbhi	r0, [r9, r2]
   1e638:	add	r8, r8, #4
   1e63c:	mov	r1, r3
   1e640:	str	r3, [sp, #32]
   1e644:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1e648:	str	r3, [sp, #32]
   1e64c:	mov	r3, r7
   1e650:	b	1e310 <__assert_fail@plt+0xcaf0>
   1e654:	mov	r1, #0
   1e658:	str	r1, [sp, #32]
   1e65c:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1e660:	mov	sl, r9
   1e664:	ldr	r3, [sp, #56]	; 0x38
   1e668:	mov	r9, fp
   1e66c:	ldr	r2, [sp, #64]	; 0x40
   1e670:	b	1e340 <__assert_fail@plt+0xcb20>
   1e674:	str	r2, [sp, #32]
   1e678:	mov	r1, #0
   1e67c:	b	1d7c4 <__assert_fail@plt+0xbfa4>
   1e680:	ldr	r2, [sp, #76]	; 0x4c
   1e684:	mov	sl, r9
   1e688:	mov	r9, fp
   1e68c:	mov	fp, r8
   1e690:	ldr	r1, [sp, #72]	; 0x48
   1e694:	cmp	r1, #0
   1e698:	moveq	r3, #0
   1e69c:	andne	r3, r2, #1
   1e6a0:	cmp	r3, #0
   1e6a4:	beq	1e6d0 <__assert_fail@plt+0xceb0>
   1e6a8:	ldrb	r3, [r1]
   1e6ac:	cmp	r3, #0
   1e6b0:	beq	1e6d0 <__assert_fail@plt+0xceb0>
   1e6b4:	mov	r2, r1
   1e6b8:	cmp	r9, fp
   1e6bc:	strbhi	r3, [sl, fp]
   1e6c0:	ldrb	r3, [r2, #1]!
   1e6c4:	add	fp, fp, #1
   1e6c8:	cmp	r3, #0
   1e6cc:	bne	1e6b8 <__assert_fail@plt+0xce98>
   1e6d0:	cmp	r9, fp
   1e6d4:	movhi	r3, #0
   1e6d8:	strbhi	r3, [sl, fp]
   1e6dc:	b	1e398 <__assert_fail@plt+0xcb78>
   1e6e0:	ldr	r3, [sp, #192]	; 0xc0
   1e6e4:	mov	ip, #5
   1e6e8:	str	r3, [sp, #16]
   1e6ec:	ldr	r3, [sp, #188]	; 0xbc
   1e6f0:	ldr	r2, [sp, #44]	; 0x2c
   1e6f4:	str	r3, [sp, #12]
   1e6f8:	ldr	r3, [sp, #184]	; 0xb8
   1e6fc:	ldr	r1, [sp, #84]	; 0x54
   1e700:	str	r3, [sp, #8]
   1e704:	ldr	r3, [sp, #180]	; 0xb4
   1e708:	mov	r0, r9
   1e70c:	str	r3, [sp, #4]
   1e710:	str	ip, [sp]
   1e714:	ldr	r3, [sp, #24]
   1e718:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1e71c:	mov	fp, r0
   1e720:	b	1e398 <__assert_fail@plt+0xcb78>
   1e724:	mov	sl, r9
   1e728:	mov	r9, fp
   1e72c:	mov	fp, r8
   1e730:	b	1e690 <__assert_fail@plt+0xce70>
   1e734:	ldr	r1, [sp, #176]	; 0xb0
   1e738:	bl	1d0d0 <__assert_fail@plt+0xb8b0>
   1e73c:	str	r0, [sp, #192]	; 0xc0
   1e740:	b	1d6ac <__assert_fail@plt+0xbe8c>
   1e744:	ldr	r1, [sp, #176]	; 0xb0
   1e748:	bl	1d0d0 <__assert_fail@plt+0xb8b0>
   1e74c:	str	r0, [sp, #188]	; 0xbc
   1e750:	b	1d68c <__assert_fail@plt+0xbe6c>
   1e754:	mov	sl, r9
   1e758:	mov	r2, r3
   1e75c:	mov	r9, fp
   1e760:	mov	fp, r8
   1e764:	b	1e690 <__assert_fail@plt+0xce70>
   1e768:	mov	sl, r9
   1e76c:	mov	r9, fp
   1e770:	b	1e354 <__assert_fail@plt+0xcb34>
   1e774:	push	{r4, r5, r6, lr}
   1e778:	mov	r5, r0
   1e77c:	bl	1167c <__errno_location@plt>
   1e780:	cmp	r5, #0
   1e784:	mov	r1, #48	; 0x30
   1e788:	mov	r4, r0
   1e78c:	ldr	r0, [pc, #16]	; 1e7a4 <__assert_fail@plt+0xcf84>
   1e790:	ldr	r6, [r4]
   1e794:	movne	r0, r5
   1e798:	bl	227a0 <__assert_fail@plt+0x10f80>
   1e79c:	str	r6, [r4]
   1e7a0:	pop	{r4, r5, r6, pc}
   1e7a4:	andeq	r7, r3, r8, ror r2
   1e7a8:	ldr	r3, [pc, #12]	; 1e7bc <__assert_fail@plt+0xcf9c>
   1e7ac:	cmp	r0, #0
   1e7b0:	moveq	r0, r3
   1e7b4:	ldr	r0, [r0]
   1e7b8:	bx	lr
   1e7bc:	andeq	r7, r3, r8, ror r2
   1e7c0:	ldr	r3, [pc, #12]	; 1e7d4 <__assert_fail@plt+0xcfb4>
   1e7c4:	cmp	r0, #0
   1e7c8:	moveq	r0, r3
   1e7cc:	str	r1, [r0]
   1e7d0:	bx	lr
   1e7d4:	andeq	r7, r3, r8, ror r2
   1e7d8:	ldr	r3, [pc, #52]	; 1e814 <__assert_fail@plt+0xcff4>
   1e7dc:	cmp	r0, #0
   1e7e0:	moveq	r0, r3
   1e7e4:	add	r3, r0, #8
   1e7e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e7ec:	lsr	lr, r1, #5
   1e7f0:	and	r1, r1, #31
   1e7f4:	ldr	ip, [r3, lr, lsl #2]
   1e7f8:	lsr	r0, ip, r1
   1e7fc:	eor	r2, r2, r0
   1e800:	and	r2, r2, #1
   1e804:	and	r0, r0, #1
   1e808:	eor	r1, ip, r2, lsl r1
   1e80c:	str	r1, [r3, lr, lsl #2]
   1e810:	pop	{pc}		; (ldr pc, [sp], #4)
   1e814:	andeq	r7, r3, r8, ror r2
   1e818:	ldr	r3, [pc, #16]	; 1e830 <__assert_fail@plt+0xd010>
   1e81c:	cmp	r0, #0
   1e820:	movne	r3, r0
   1e824:	ldr	r0, [r3, #4]
   1e828:	str	r1, [r3, #4]
   1e82c:	bx	lr
   1e830:	andeq	r7, r3, r8, ror r2
   1e834:	ldr	r3, [pc, #44]	; 1e868 <__assert_fail@plt+0xd048>
   1e838:	cmp	r0, #0
   1e83c:	moveq	r0, r3
   1e840:	mov	ip, #10
   1e844:	cmp	r2, #0
   1e848:	cmpne	r1, #0
   1e84c:	str	ip, [r0]
   1e850:	beq	1e860 <__assert_fail@plt+0xd040>
   1e854:	str	r1, [r0, #40]	; 0x28
   1e858:	str	r2, [r0, #44]	; 0x2c
   1e85c:	bx	lr
   1e860:	push	{r4, lr}
   1e864:	bl	117f0 <abort@plt>
   1e868:	andeq	r7, r3, r8, ror r2
   1e86c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e870:	sub	sp, sp, #24
   1e874:	ldr	ip, [pc, #108]	; 1e8e8 <__assert_fail@plt+0xd0c8>
   1e878:	ldr	r4, [sp, #56]	; 0x38
   1e87c:	mov	r9, r2
   1e880:	cmp	r4, #0
   1e884:	moveq	r4, ip
   1e888:	mov	sl, r3
   1e88c:	mov	r7, r0
   1e890:	mov	r8, r1
   1e894:	bl	1167c <__errno_location@plt>
   1e898:	ldr	r3, [r4, #44]	; 0x2c
   1e89c:	mov	r1, r8
   1e8a0:	ldr	r6, [r0]
   1e8a4:	str	r3, [sp, #16]
   1e8a8:	ldr	r2, [r4, #40]	; 0x28
   1e8ac:	add	r3, r4, #8
   1e8b0:	str	r3, [sp, #8]
   1e8b4:	str	r2, [sp, #12]
   1e8b8:	ldr	r2, [r4, #4]
   1e8bc:	mov	r5, r0
   1e8c0:	str	r2, [sp, #4]
   1e8c4:	ldr	ip, [r4]
   1e8c8:	mov	r3, sl
   1e8cc:	mov	r2, r9
   1e8d0:	mov	r0, r7
   1e8d4:	str	ip, [sp]
   1e8d8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1e8dc:	str	r6, [r5]
   1e8e0:	add	sp, sp, #24
   1e8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e8e8:	andeq	r7, r3, r8, ror r2
   1e8ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8f0:	cmp	r2, #0
   1e8f4:	sub	sp, sp, #36	; 0x24
   1e8f8:	ldr	r4, [pc, #164]	; 1e9a4 <__assert_fail@plt+0xd184>
   1e8fc:	mov	r8, r1
   1e900:	movne	r4, r2
   1e904:	mov	r7, r0
   1e908:	bl	1167c <__errno_location@plt>
   1e90c:	ldr	r3, [r4, #44]	; 0x2c
   1e910:	ldr	r5, [r4, #4]
   1e914:	add	r9, r4, #8
   1e918:	orr	r5, r5, #1
   1e91c:	mov	r1, #0
   1e920:	mov	r2, r7
   1e924:	ldr	fp, [r0]
   1e928:	str	r3, [sp, #16]
   1e92c:	ldr	r3, [r4, #40]	; 0x28
   1e930:	stmib	sp, {r5, r9}
   1e934:	str	r3, [sp, #12]
   1e938:	ldr	r3, [r4]
   1e93c:	mov	r6, r0
   1e940:	str	r3, [sp]
   1e944:	mov	r0, r1
   1e948:	mov	r3, r8
   1e94c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1e950:	add	r1, r0, #1
   1e954:	mov	r0, r1
   1e958:	str	r1, [sp, #28]
   1e95c:	bl	2225c <__assert_fail@plt+0x10a3c>
   1e960:	ldr	r3, [r4, #44]	; 0x2c
   1e964:	ldr	r1, [sp, #28]
   1e968:	str	r3, [sp, #16]
   1e96c:	ldr	r3, [r4, #40]	; 0x28
   1e970:	str	r5, [sp, #4]
   1e974:	str	r3, [sp, #12]
   1e978:	str	r9, [sp, #8]
   1e97c:	ldr	ip, [r4]
   1e980:	mov	r3, r8
   1e984:	mov	r2, r7
   1e988:	str	ip, [sp]
   1e98c:	mov	sl, r0
   1e990:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1e994:	mov	r0, sl
   1e998:	str	fp, [r6]
   1e99c:	add	sp, sp, #36	; 0x24
   1e9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9a4:	andeq	r7, r3, r8, ror r2
   1e9a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9ac:	cmp	r3, #0
   1e9b0:	sub	sp, sp, #44	; 0x2c
   1e9b4:	ldr	r4, [pc, #192]	; 1ea7c <__assert_fail@plt+0xd25c>
   1e9b8:	mov	r6, r2
   1e9bc:	movne	r4, r3
   1e9c0:	mov	r9, r1
   1e9c4:	mov	r8, r0
   1e9c8:	bl	1167c <__errno_location@plt>
   1e9cc:	ldr	r3, [r4, #44]	; 0x2c
   1e9d0:	ldr	r5, [r4, #4]
   1e9d4:	add	sl, r4, #8
   1e9d8:	cmp	r6, #0
   1e9dc:	orreq	r5, r5, #1
   1e9e0:	mov	r1, #0
   1e9e4:	ldr	r2, [r0]
   1e9e8:	str	r3, [sp, #16]
   1e9ec:	ldr	r3, [r4, #40]	; 0x28
   1e9f0:	stmib	sp, {r5, sl}
   1e9f4:	str	r3, [sp, #12]
   1e9f8:	ldr	r3, [r4]
   1e9fc:	mov	r7, r0
   1ea00:	str	r2, [sp, #28]
   1ea04:	str	r3, [sp]
   1ea08:	mov	r2, r8
   1ea0c:	mov	r3, r9
   1ea10:	mov	r0, r1
   1ea14:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ea18:	add	r1, r0, #1
   1ea1c:	mov	fp, r0
   1ea20:	mov	r0, r1
   1ea24:	str	r1, [sp, #36]	; 0x24
   1ea28:	bl	2225c <__assert_fail@plt+0x10a3c>
   1ea2c:	ldr	r3, [r4, #44]	; 0x2c
   1ea30:	mov	r2, r8
   1ea34:	str	r3, [sp, #16]
   1ea38:	ldr	r3, [r4, #40]	; 0x28
   1ea3c:	str	r5, [sp, #4]
   1ea40:	str	r3, [sp, #12]
   1ea44:	str	sl, [sp, #8]
   1ea48:	ldr	ip, [r4]
   1ea4c:	ldr	r1, [sp, #36]	; 0x24
   1ea50:	mov	r3, r9
   1ea54:	str	ip, [sp]
   1ea58:	str	r0, [sp, #32]
   1ea5c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ea60:	ldr	r2, [sp, #28]
   1ea64:	cmp	r6, #0
   1ea68:	str	r2, [r7]
   1ea6c:	ldr	r0, [sp, #32]
   1ea70:	strne	fp, [r6]
   1ea74:	add	sp, sp, #44	; 0x2c
   1ea78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea7c:	andeq	r7, r3, r8, ror r2
   1ea80:	push	{r4, r5, r6, r7, r8, lr}
   1ea84:	ldr	r6, [pc, #116]	; 1eb00 <__assert_fail@plt+0xd2e0>
   1ea88:	ldr	r3, [r6, #4]
   1ea8c:	ldr	r7, [r6]
   1ea90:	cmp	r3, #1
   1ea94:	movgt	r5, r7
   1ea98:	movgt	r4, #1
   1ea9c:	ble	1eabc <__assert_fail@plt+0xd29c>
   1eaa0:	ldr	r0, [r5, #12]
   1eaa4:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1eaa8:	ldr	r3, [r6, #4]
   1eaac:	add	r4, r4, #1
   1eab0:	cmp	r3, r4
   1eab4:	add	r5, r5, #8
   1eab8:	bgt	1eaa0 <__assert_fail@plt+0xd280>
   1eabc:	ldr	r0, [r7, #4]
   1eac0:	ldr	r4, [pc, #60]	; 1eb04 <__assert_fail@plt+0xd2e4>
   1eac4:	cmp	r0, r4
   1eac8:	beq	1eadc <__assert_fail@plt+0xd2bc>
   1eacc:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ead0:	mov	r3, #256	; 0x100
   1ead4:	str	r4, [r6, #12]
   1ead8:	str	r3, [r6, #8]
   1eadc:	ldr	r4, [pc, #36]	; 1eb08 <__assert_fail@plt+0xd2e8>
   1eae0:	cmp	r7, r4
   1eae4:	beq	1eaf4 <__assert_fail@plt+0xd2d4>
   1eae8:	mov	r0, r7
   1eaec:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1eaf0:	str	r4, [r6]
   1eaf4:	mov	r3, #1
   1eaf8:	str	r3, [r6, #4]
   1eafc:	pop	{r4, r5, r6, r7, r8, pc}
   1eb00:	muleq	r3, r0, r1
   1eb04:	andeq	r7, r3, r8, lsr #5
   1eb08:	muleq	r3, r8, r1
   1eb0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb10:	sub	sp, sp, #44	; 0x2c
   1eb14:	mov	r5, r0
   1eb18:	mov	sl, r1
   1eb1c:	bl	1167c <__errno_location@plt>
   1eb20:	ldr	r4, [pc, #400]	; 1ecb8 <__assert_fail@plt+0xd498>
   1eb24:	cmn	r5, #-2147483647	; 0x80000001
   1eb28:	ldr	r6, [r4]
   1eb2c:	mov	r8, r0
   1eb30:	movne	r0, #0
   1eb34:	moveq	r0, #1
   1eb38:	ldr	r3, [r8]
   1eb3c:	orrs	r0, r0, r5, lsr #31
   1eb40:	str	r3, [sp, #24]
   1eb44:	bne	1ecb4 <__assert_fail@plt+0xd494>
   1eb48:	ldr	r2, [r4, #4]
   1eb4c:	cmp	r5, r2
   1eb50:	blt	1ebb0 <__assert_fail@plt+0xd390>
   1eb54:	add	r7, r4, #8
   1eb58:	cmp	r6, r7
   1eb5c:	str	r2, [sp, #36]	; 0x24
   1eb60:	beq	1ec84 <__assert_fail@plt+0xd464>
   1eb64:	mov	r3, #8
   1eb68:	sub	r2, r5, r2
   1eb6c:	mov	r0, r6
   1eb70:	str	r3, [sp]
   1eb74:	add	r2, r2, #1
   1eb78:	mvn	r3, #-2147483648	; 0x80000000
   1eb7c:	add	r1, sp, #36	; 0x24
   1eb80:	bl	22478 <__assert_fail@plt+0x10c58>
   1eb84:	mov	r6, r0
   1eb88:	str	r0, [r4]
   1eb8c:	ldr	r0, [r4, #4]
   1eb90:	ldr	r2, [sp, #36]	; 0x24
   1eb94:	mov	r1, #0
   1eb98:	sub	r2, r2, r0
   1eb9c:	add	r0, r6, r0, lsl #3
   1eba0:	lsl	r2, r2, #3
   1eba4:	bl	116ac <memset@plt>
   1eba8:	ldr	r3, [sp, #36]	; 0x24
   1ebac:	str	r3, [r4, #4]
   1ebb0:	ldr	r4, [pc, #260]	; 1ecbc <__assert_fail@plt+0xd49c>
   1ebb4:	add	fp, r6, r5, lsl #3
   1ebb8:	ldr	r9, [r6, r5, lsl #3]
   1ebbc:	ldr	r0, [r4, #4]
   1ebc0:	ldr	r3, [r4]
   1ebc4:	ldr	r7, [fp, #4]
   1ebc8:	ldr	r1, [r4, #44]	; 0x2c
   1ebcc:	ldr	r2, [r4, #40]	; 0x28
   1ebd0:	orr	r0, r0, #1
   1ebd4:	str	r3, [sp]
   1ebd8:	add	r3, r4, #8
   1ebdc:	str	r0, [sp, #28]
   1ebe0:	str	r0, [sp, #4]
   1ebe4:	str	r1, [sp, #16]
   1ebe8:	str	r2, [sp, #12]
   1ebec:	str	r3, [sp, #8]
   1ebf0:	mov	r0, r7
   1ebf4:	mov	r1, r9
   1ebf8:	mvn	r3, #0
   1ebfc:	mov	r2, sl
   1ec00:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ec04:	cmp	r9, r0
   1ec08:	bhi	1ec70 <__assert_fail@plt+0xd450>
   1ec0c:	add	r3, r4, #48	; 0x30
   1ec10:	add	r9, r0, #1
   1ec14:	cmp	r7, r3
   1ec18:	str	r9, [r6, r5, lsl #3]
   1ec1c:	beq	1ec28 <__assert_fail@plt+0xd408>
   1ec20:	mov	r0, r7
   1ec24:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ec28:	mov	r0, r9
   1ec2c:	bl	2225c <__assert_fail@plt+0x10a3c>
   1ec30:	ldr	ip, [r4, #44]	; 0x2c
   1ec34:	ldr	r3, [r4]
   1ec38:	ldr	lr, [r4, #40]	; 0x28
   1ec3c:	ldr	r4, [pc, #124]	; 1ecc0 <__assert_fail@plt+0xd4a0>
   1ec40:	mov	r2, sl
   1ec44:	mov	r1, r9
   1ec48:	str	r0, [fp, #4]
   1ec4c:	str	r4, [sp, #8]
   1ec50:	ldr	r4, [sp, #28]
   1ec54:	str	r3, [sp]
   1ec58:	str	r4, [sp, #4]
   1ec5c:	str	ip, [sp, #16]
   1ec60:	str	lr, [sp, #12]
   1ec64:	mvn	r3, #0
   1ec68:	mov	r7, r0
   1ec6c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ec70:	ldr	r3, [sp, #24]
   1ec74:	mov	r0, r7
   1ec78:	str	r3, [r8]
   1ec7c:	add	sp, sp, #44	; 0x2c
   1ec80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec84:	mov	r3, #8
   1ec88:	sub	r2, r5, r2
   1ec8c:	str	r3, [sp]
   1ec90:	add	r1, sp, #36	; 0x24
   1ec94:	add	r2, r2, #1
   1ec98:	mvn	r3, #-2147483648	; 0x80000000
   1ec9c:	bl	22478 <__assert_fail@plt+0x10c58>
   1eca0:	mov	r6, r0
   1eca4:	ldm	r7, {r0, r1}
   1eca8:	str	r6, [r4]
   1ecac:	stm	r6, {r0, r1}
   1ecb0:	b	1eb8c <__assert_fail@plt+0xd36c>
   1ecb4:	bl	117f0 <abort@plt>
   1ecb8:	muleq	r3, r0, r1
   1ecbc:	andeq	r7, r3, r8, ror r2
   1ecc0:	andeq	r7, r3, r0, lsl #5
   1ecc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecc8:	sub	sp, sp, #52	; 0x34
   1eccc:	mov	r5, r0
   1ecd0:	mov	sl, r1
   1ecd4:	mov	fp, r2
   1ecd8:	bl	1167c <__errno_location@plt>
   1ecdc:	ldr	r4, [pc, #408]	; 1ee7c <__assert_fail@plt+0xd65c>
   1ece0:	cmn	r5, #-2147483647	; 0x80000001
   1ece4:	ldr	r6, [r4]
   1ece8:	mov	r8, r0
   1ecec:	movne	r0, #0
   1ecf0:	moveq	r0, #1
   1ecf4:	ldr	r3, [r8]
   1ecf8:	orrs	r0, r0, r5, lsr #31
   1ecfc:	str	r3, [sp, #28]
   1ed00:	bne	1ee78 <__assert_fail@plt+0xd658>
   1ed04:	ldr	r2, [r4, #4]
   1ed08:	cmp	r5, r2
   1ed0c:	blt	1ed6c <__assert_fail@plt+0xd54c>
   1ed10:	add	r7, r4, #8
   1ed14:	cmp	r6, r7
   1ed18:	str	r2, [sp, #44]	; 0x2c
   1ed1c:	beq	1ee48 <__assert_fail@plt+0xd628>
   1ed20:	mov	r3, #8
   1ed24:	sub	r2, r5, r2
   1ed28:	mov	r0, r6
   1ed2c:	str	r3, [sp]
   1ed30:	add	r2, r2, #1
   1ed34:	mvn	r3, #-2147483648	; 0x80000000
   1ed38:	add	r1, sp, #44	; 0x2c
   1ed3c:	bl	22478 <__assert_fail@plt+0x10c58>
   1ed40:	mov	r6, r0
   1ed44:	str	r0, [r4]
   1ed48:	ldr	r0, [r4, #4]
   1ed4c:	ldr	r2, [sp, #44]	; 0x2c
   1ed50:	mov	r1, #0
   1ed54:	sub	r2, r2, r0
   1ed58:	add	r0, r6, r0, lsl #3
   1ed5c:	lsl	r2, r2, #3
   1ed60:	bl	116ac <memset@plt>
   1ed64:	ldr	r3, [sp, #44]	; 0x2c
   1ed68:	str	r3, [r4, #4]
   1ed6c:	ldr	r4, [pc, #268]	; 1ee80 <__assert_fail@plt+0xd660>
   1ed70:	add	r3, r6, r5, lsl #3
   1ed74:	str	r3, [sp, #32]
   1ed78:	ldr	r7, [r3, #4]
   1ed7c:	ldr	r0, [r4, #4]
   1ed80:	ldr	r3, [r4]
   1ed84:	ldr	r9, [r6, r5, lsl #3]
   1ed88:	ldr	r1, [r4, #44]	; 0x2c
   1ed8c:	ldr	r2, [r4, #40]	; 0x28
   1ed90:	orr	r0, r0, #1
   1ed94:	str	r3, [sp]
   1ed98:	add	r3, r4, #8
   1ed9c:	str	r0, [sp, #36]	; 0x24
   1eda0:	str	r0, [sp, #4]
   1eda4:	str	r1, [sp, #16]
   1eda8:	str	r2, [sp, #12]
   1edac:	str	r3, [sp, #8]
   1edb0:	mov	r0, r7
   1edb4:	mov	r1, r9
   1edb8:	mov	r3, fp
   1edbc:	mov	r2, sl
   1edc0:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1edc4:	cmp	r9, r0
   1edc8:	bhi	1ee34 <__assert_fail@plt+0xd614>
   1edcc:	add	r3, r4, #48	; 0x30
   1edd0:	add	r9, r0, #1
   1edd4:	cmp	r7, r3
   1edd8:	str	r9, [r6, r5, lsl #3]
   1eddc:	beq	1ede8 <__assert_fail@plt+0xd5c8>
   1ede0:	mov	r0, r7
   1ede4:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ede8:	mov	r0, r9
   1edec:	bl	2225c <__assert_fail@plt+0x10a3c>
   1edf0:	ldr	ip, [sp, #32]
   1edf4:	ldr	lr, [r4, #44]	; 0x2c
   1edf8:	ldr	r5, [r4, #40]	; 0x28
   1edfc:	mov	r3, fp
   1ee00:	mov	r2, sl
   1ee04:	mov	r1, r9
   1ee08:	str	r0, [ip, #4]
   1ee0c:	ldr	ip, [r4]
   1ee10:	ldr	r4, [pc, #108]	; 1ee84 <__assert_fail@plt+0xd664>
   1ee14:	str	lr, [sp, #16]
   1ee18:	str	r4, [sp, #8]
   1ee1c:	ldr	r4, [sp, #36]	; 0x24
   1ee20:	str	r5, [sp, #12]
   1ee24:	str	r4, [sp, #4]
   1ee28:	str	ip, [sp]
   1ee2c:	mov	r7, r0
   1ee30:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ee34:	ldr	r3, [sp, #28]
   1ee38:	mov	r0, r7
   1ee3c:	str	r3, [r8]
   1ee40:	add	sp, sp, #52	; 0x34
   1ee44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee48:	mov	r3, #8
   1ee4c:	sub	r2, r5, r2
   1ee50:	str	r3, [sp]
   1ee54:	add	r1, sp, #44	; 0x2c
   1ee58:	add	r2, r2, #1
   1ee5c:	mvn	r3, #-2147483648	; 0x80000000
   1ee60:	bl	22478 <__assert_fail@plt+0x10c58>
   1ee64:	mov	r6, r0
   1ee68:	ldm	r7, {r0, r1}
   1ee6c:	str	r6, [r4]
   1ee70:	stm	r6, {r0, r1}
   1ee74:	b	1ed48 <__assert_fail@plt+0xd528>
   1ee78:	bl	117f0 <abort@plt>
   1ee7c:	muleq	r3, r0, r1
   1ee80:	andeq	r7, r3, r8, ror r2
   1ee84:	andeq	r7, r3, r0, lsl #5
   1ee88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee8c:	sub	sp, sp, #44	; 0x2c
   1ee90:	mov	sl, r0
   1ee94:	bl	1167c <__errno_location@plt>
   1ee98:	ldr	r4, [pc, #352]	; 1f000 <__assert_fail@plt+0xd7e0>
   1ee9c:	ldr	r2, [r4, #4]
   1eea0:	ldr	r5, [r4]
   1eea4:	cmp	r2, #0
   1eea8:	ldr	r3, [r0]
   1eeac:	mov	r8, r0
   1eeb0:	str	r3, [sp, #28]
   1eeb4:	bgt	1ef10 <__assert_fail@plt+0xd6f0>
   1eeb8:	add	r6, r4, #8
   1eebc:	cmp	r5, r6
   1eec0:	str	r2, [sp, #36]	; 0x24
   1eec4:	beq	1efd0 <__assert_fail@plt+0xd7b0>
   1eec8:	mov	r3, #8
   1eecc:	mov	r0, r5
   1eed0:	str	r3, [sp]
   1eed4:	rsb	r2, r2, #1
   1eed8:	mvn	r3, #-2147483648	; 0x80000000
   1eedc:	add	r1, sp, #36	; 0x24
   1eee0:	bl	22478 <__assert_fail@plt+0x10c58>
   1eee4:	mov	r5, r0
   1eee8:	str	r0, [r4]
   1eeec:	ldr	r0, [r4, #4]
   1eef0:	ldr	r2, [sp, #36]	; 0x24
   1eef4:	mov	r1, #0
   1eef8:	sub	r2, r2, r0
   1eefc:	add	r0, r5, r0, lsl #3
   1ef00:	lsl	r2, r2, #3
   1ef04:	bl	116ac <memset@plt>
   1ef08:	ldr	r3, [sp, #36]	; 0x24
   1ef0c:	str	r3, [r4, #4]
   1ef10:	ldr	r4, [pc, #236]	; 1f004 <__assert_fail@plt+0xd7e4>
   1ef14:	ldr	r9, [r5]
   1ef18:	ldr	r6, [r5, #4]
   1ef1c:	ldr	r7, [r4, #4]
   1ef20:	ldr	r1, [r4, #44]	; 0x2c
   1ef24:	ldr	r2, [r4, #40]	; 0x28
   1ef28:	ldr	r3, [r4]
   1ef2c:	orr	r7, r7, #1
   1ef30:	add	fp, r4, #8
   1ef34:	str	r1, [sp, #16]
   1ef38:	str	r2, [sp, #12]
   1ef3c:	str	r3, [sp]
   1ef40:	str	r7, [sp, #4]
   1ef44:	str	fp, [sp, #8]
   1ef48:	mov	r1, r9
   1ef4c:	mov	r0, r6
   1ef50:	mvn	r3, #0
   1ef54:	mov	r2, sl
   1ef58:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ef5c:	cmp	r9, r0
   1ef60:	bhi	1efbc <__assert_fail@plt+0xd79c>
   1ef64:	add	r3, r4, #48	; 0x30
   1ef68:	add	r9, r0, #1
   1ef6c:	cmp	r6, r3
   1ef70:	str	r9, [r5]
   1ef74:	beq	1ef80 <__assert_fail@plt+0xd760>
   1ef78:	mov	r0, r6
   1ef7c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ef80:	mov	r0, r9
   1ef84:	bl	2225c <__assert_fail@plt+0x10a3c>
   1ef88:	ldr	ip, [r4, #44]	; 0x2c
   1ef8c:	ldr	r3, [r4]
   1ef90:	ldr	lr, [r4, #40]	; 0x28
   1ef94:	mov	r2, sl
   1ef98:	mov	r1, r9
   1ef9c:	str	r0, [r5, #4]
   1efa0:	str	r3, [sp]
   1efa4:	stmib	sp, {r7, fp}
   1efa8:	str	ip, [sp, #16]
   1efac:	str	lr, [sp, #12]
   1efb0:	mvn	r3, #0
   1efb4:	mov	r6, r0
   1efb8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1efbc:	ldr	r3, [sp, #28]
   1efc0:	mov	r0, r6
   1efc4:	str	r3, [r8]
   1efc8:	add	sp, sp, #44	; 0x2c
   1efcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efd0:	mov	r3, #8
   1efd4:	str	r3, [sp]
   1efd8:	add	r1, sp, #36	; 0x24
   1efdc:	rsb	r2, r2, #1
   1efe0:	mvn	r3, #-2147483648	; 0x80000000
   1efe4:	mov	r0, #0
   1efe8:	bl	22478 <__assert_fail@plt+0x10c58>
   1efec:	mov	r5, r0
   1eff0:	ldm	r6, {r0, r1}
   1eff4:	str	r5, [r4]
   1eff8:	stm	r5, {r0, r1}
   1effc:	b	1eeec <__assert_fail@plt+0xd6cc>
   1f000:	muleq	r3, r0, r1
   1f004:	andeq	r7, r3, r8, ror r2
   1f008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f00c:	sub	sp, sp, #44	; 0x2c
   1f010:	mov	r9, r0
   1f014:	mov	sl, r1
   1f018:	bl	1167c <__errno_location@plt>
   1f01c:	ldr	r4, [pc, #364]	; 1f190 <__assert_fail@plt+0xd970>
   1f020:	ldr	r2, [r4, #4]
   1f024:	ldr	r5, [r4]
   1f028:	cmp	r2, #0
   1f02c:	ldr	r3, [r0]
   1f030:	mov	r7, r0
   1f034:	str	r3, [sp, #24]
   1f038:	bgt	1f094 <__assert_fail@plt+0xd874>
   1f03c:	add	r6, r4, #8
   1f040:	cmp	r5, r6
   1f044:	str	r2, [sp, #36]	; 0x24
   1f048:	beq	1f160 <__assert_fail@plt+0xd940>
   1f04c:	mov	r3, #8
   1f050:	mov	r0, r5
   1f054:	str	r3, [sp]
   1f058:	rsb	r2, r2, #1
   1f05c:	mvn	r3, #-2147483648	; 0x80000000
   1f060:	add	r1, sp, #36	; 0x24
   1f064:	bl	22478 <__assert_fail@plt+0x10c58>
   1f068:	mov	r5, r0
   1f06c:	str	r0, [r4]
   1f070:	ldr	r0, [r4, #4]
   1f074:	ldr	r2, [sp, #36]	; 0x24
   1f078:	mov	r1, #0
   1f07c:	sub	r2, r2, r0
   1f080:	add	r0, r5, r0, lsl #3
   1f084:	lsl	r2, r2, #3
   1f088:	bl	116ac <memset@plt>
   1f08c:	ldr	r3, [sp, #36]	; 0x24
   1f090:	str	r3, [r4, #4]
   1f094:	ldr	r4, [pc, #248]	; 1f194 <__assert_fail@plt+0xd974>
   1f098:	ldr	r8, [r5]
   1f09c:	ldr	r6, [r5, #4]
   1f0a0:	ldr	r0, [r4, #4]
   1f0a4:	ldr	r1, [r4, #44]	; 0x2c
   1f0a8:	ldr	r2, [r4, #40]	; 0x28
   1f0ac:	ldr	r3, [r4]
   1f0b0:	orr	r0, r0, #1
   1f0b4:	add	fp, r4, #8
   1f0b8:	str	r0, [sp, #28]
   1f0bc:	str	r0, [sp, #4]
   1f0c0:	str	r1, [sp, #16]
   1f0c4:	str	r2, [sp, #12]
   1f0c8:	str	r3, [sp]
   1f0cc:	str	fp, [sp, #8]
   1f0d0:	mov	r1, r8
   1f0d4:	mov	r0, r6
   1f0d8:	mov	r3, sl
   1f0dc:	mov	r2, r9
   1f0e0:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f0e4:	cmp	r8, r0
   1f0e8:	bhi	1f14c <__assert_fail@plt+0xd92c>
   1f0ec:	add	r3, r4, #48	; 0x30
   1f0f0:	add	r8, r0, #1
   1f0f4:	cmp	r6, r3
   1f0f8:	str	r8, [r5]
   1f0fc:	beq	1f108 <__assert_fail@plt+0xd8e8>
   1f100:	mov	r0, r6
   1f104:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1f108:	mov	r0, r8
   1f10c:	bl	2225c <__assert_fail@plt+0x10a3c>
   1f110:	ldr	lr, [r4, #44]	; 0x2c
   1f114:	ldr	ip, [r4]
   1f118:	mov	r3, sl
   1f11c:	mov	r2, r9
   1f120:	mov	r1, r8
   1f124:	str	r0, [r5, #4]
   1f128:	ldr	r5, [r4, #40]	; 0x28
   1f12c:	ldr	r4, [sp, #28]
   1f130:	str	fp, [sp, #8]
   1f134:	str	r4, [sp, #4]
   1f138:	str	lr, [sp, #16]
   1f13c:	str	r5, [sp, #12]
   1f140:	str	ip, [sp]
   1f144:	mov	r6, r0
   1f148:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f14c:	ldr	r3, [sp, #24]
   1f150:	mov	r0, r6
   1f154:	str	r3, [r7]
   1f158:	add	sp, sp, #44	; 0x2c
   1f15c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f160:	mov	r3, #8
   1f164:	str	r3, [sp]
   1f168:	add	r1, sp, #36	; 0x24
   1f16c:	rsb	r2, r2, #1
   1f170:	mvn	r3, #-2147483648	; 0x80000000
   1f174:	mov	r0, #0
   1f178:	bl	22478 <__assert_fail@plt+0x10c58>
   1f17c:	mov	r5, r0
   1f180:	ldm	r6, {r0, r1}
   1f184:	str	r5, [r4]
   1f188:	stm	r5, {r0, r1}
   1f18c:	b	1f070 <__assert_fail@plt+0xd850>
   1f190:	muleq	r3, r0, r1
   1f194:	andeq	r7, r3, r8, ror r2
   1f198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f19c:	sub	sp, sp, #132	; 0x84
   1f1a0:	mov	r5, r1
   1f1a4:	mov	r4, r0
   1f1a8:	mov	r9, r2
   1f1ac:	add	r0, sp, #80	; 0x50
   1f1b0:	mov	r2, #48	; 0x30
   1f1b4:	mov	r1, #0
   1f1b8:	bl	116ac <memset@plt>
   1f1bc:	cmp	r5, #10
   1f1c0:	beq	1f378 <__assert_fail@plt+0xdb58>
   1f1c4:	add	lr, sp, #80	; 0x50
   1f1c8:	str	r5, [sp, #80]	; 0x50
   1f1cc:	ldm	lr!, {r0, r1, r2, r3}
   1f1d0:	add	ip, sp, #32
   1f1d4:	ldr	r6, [pc, #416]	; 1f37c <__assert_fail@plt+0xdb5c>
   1f1d8:	stmia	ip!, {r0, r1, r2, r3}
   1f1dc:	ldm	lr!, {r0, r1, r2, r3}
   1f1e0:	stmia	ip!, {r0, r1, r2, r3}
   1f1e4:	ldm	lr, {r0, r1, r2, r3}
   1f1e8:	stm	ip, {r0, r1, r2, r3}
   1f1ec:	bl	1167c <__errno_location@plt>
   1f1f0:	cmn	r4, #-2147483647	; 0x80000001
   1f1f4:	ldr	r5, [r6]
   1f1f8:	mov	r7, r0
   1f1fc:	movne	r0, #0
   1f200:	moveq	r0, #1
   1f204:	ldr	r3, [r7]
   1f208:	orrs	r0, r0, r4, lsr #31
   1f20c:	str	r3, [sp, #24]
   1f210:	bne	1f378 <__assert_fail@plt+0xdb58>
   1f214:	ldr	r2, [r6, #4]
   1f218:	cmp	r4, r2
   1f21c:	blt	1f27c <__assert_fail@plt+0xda5c>
   1f220:	add	r8, r6, #8
   1f224:	cmp	r5, r8
   1f228:	str	r2, [sp, #80]	; 0x50
   1f22c:	beq	1f348 <__assert_fail@plt+0xdb28>
   1f230:	mov	r3, #8
   1f234:	sub	r2, r4, r2
   1f238:	mov	r0, r5
   1f23c:	str	r3, [sp]
   1f240:	add	r2, r2, #1
   1f244:	add	r1, sp, #80	; 0x50
   1f248:	mvn	r3, #-2147483648	; 0x80000000
   1f24c:	bl	22478 <__assert_fail@plt+0x10c58>
   1f250:	mov	r5, r0
   1f254:	str	r0, [r6]
   1f258:	ldr	r0, [r6, #4]
   1f25c:	ldr	r2, [sp, #80]	; 0x50
   1f260:	mov	r1, #0
   1f264:	sub	r2, r2, r0
   1f268:	add	r0, r5, r0, lsl #3
   1f26c:	lsl	r2, r2, #3
   1f270:	bl	116ac <memset@plt>
   1f274:	ldr	r3, [sp, #80]	; 0x50
   1f278:	str	r3, [r6, #4]
   1f27c:	add	fp, r5, r4, lsl #3
   1f280:	ldr	r1, [sp, #36]	; 0x24
   1f284:	ldr	r8, [r5, r4, lsl #3]
   1f288:	ldr	r6, [fp, #4]
   1f28c:	ldr	r2, [sp, #72]	; 0x48
   1f290:	ldr	r3, [sp, #32]
   1f294:	ldr	ip, [sp, #76]	; 0x4c
   1f298:	orr	r1, r1, #1
   1f29c:	add	sl, sp, #40	; 0x28
   1f2a0:	str	r1, [sp, #28]
   1f2a4:	str	r1, [sp, #4]
   1f2a8:	str	r2, [sp, #12]
   1f2ac:	str	r3, [sp]
   1f2b0:	mov	r0, r6
   1f2b4:	mov	r1, r8
   1f2b8:	str	ip, [sp, #16]
   1f2bc:	str	sl, [sp, #8]
   1f2c0:	mvn	r3, #0
   1f2c4:	mov	r2, r9
   1f2c8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f2cc:	cmp	r8, r0
   1f2d0:	bhi	1f334 <__assert_fail@plt+0xdb14>
   1f2d4:	ldr	r3, [pc, #164]	; 1f380 <__assert_fail@plt+0xdb60>
   1f2d8:	add	r8, r0, #1
   1f2dc:	cmp	r6, r3
   1f2e0:	str	r8, [r5, r4, lsl #3]
   1f2e4:	beq	1f2f0 <__assert_fail@plt+0xdad0>
   1f2e8:	mov	r0, r6
   1f2ec:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1f2f0:	mov	r0, r8
   1f2f4:	bl	2225c <__assert_fail@plt+0x10a3c>
   1f2f8:	ldr	lr, [sp, #76]	; 0x4c
   1f2fc:	ldr	r3, [sp, #32]
   1f300:	ldr	ip, [sp, #72]	; 0x48
   1f304:	ldr	r4, [sp, #28]
   1f308:	mov	r2, r9
   1f30c:	mov	r1, r8
   1f310:	str	r0, [fp, #4]
   1f314:	str	r3, [sp]
   1f318:	str	sl, [sp, #8]
   1f31c:	str	r4, [sp, #4]
   1f320:	str	lr, [sp, #16]
   1f324:	str	ip, [sp, #12]
   1f328:	mvn	r3, #0
   1f32c:	mov	r6, r0
   1f330:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f334:	ldr	r3, [sp, #24]
   1f338:	mov	r0, r6
   1f33c:	str	r3, [r7]
   1f340:	add	sp, sp, #132	; 0x84
   1f344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f348:	mov	r3, #8
   1f34c:	sub	r2, r4, r2
   1f350:	add	r1, sp, #80	; 0x50
   1f354:	str	r3, [sp]
   1f358:	add	r2, r2, #1
   1f35c:	mvn	r3, #-2147483648	; 0x80000000
   1f360:	bl	22478 <__assert_fail@plt+0x10c58>
   1f364:	mov	r5, r0
   1f368:	ldm	r8, {r0, r1}
   1f36c:	str	r5, [r6]
   1f370:	stm	r5, {r0, r1}
   1f374:	b	1f258 <__assert_fail@plt+0xda38>
   1f378:	bl	117f0 <abort@plt>
   1f37c:	muleq	r3, r0, r1
   1f380:	andeq	r7, r3, r8, lsr #5
   1f384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f388:	sub	sp, sp, #132	; 0x84
   1f38c:	mov	r5, r1
   1f390:	mov	r4, r0
   1f394:	mov	r9, r2
   1f398:	add	r0, sp, #80	; 0x50
   1f39c:	mov	r2, #48	; 0x30
   1f3a0:	mov	r1, #0
   1f3a4:	mov	sl, r3
   1f3a8:	bl	116ac <memset@plt>
   1f3ac:	cmp	r5, #10
   1f3b0:	beq	1f56c <__assert_fail@plt+0xdd4c>
   1f3b4:	add	lr, sp, #80	; 0x50
   1f3b8:	str	r5, [sp, #80]	; 0x50
   1f3bc:	ldm	lr!, {r0, r1, r2, r3}
   1f3c0:	add	ip, sp, #32
   1f3c4:	ldr	r6, [pc, #420]	; 1f570 <__assert_fail@plt+0xdd50>
   1f3c8:	stmia	ip!, {r0, r1, r2, r3}
   1f3cc:	ldm	lr!, {r0, r1, r2, r3}
   1f3d0:	stmia	ip!, {r0, r1, r2, r3}
   1f3d4:	ldm	lr, {r0, r1, r2, r3}
   1f3d8:	stm	ip, {r0, r1, r2, r3}
   1f3dc:	bl	1167c <__errno_location@plt>
   1f3e0:	cmn	r4, #-2147483647	; 0x80000001
   1f3e4:	ldr	r5, [r6]
   1f3e8:	mov	r7, r0
   1f3ec:	movne	r0, #0
   1f3f0:	moveq	r0, #1
   1f3f4:	ldr	r3, [r7]
   1f3f8:	orrs	r0, r0, r4, lsr #31
   1f3fc:	str	r3, [sp, #24]
   1f400:	bne	1f56c <__assert_fail@plt+0xdd4c>
   1f404:	ldr	r2, [r6, #4]
   1f408:	cmp	r4, r2
   1f40c:	blt	1f46c <__assert_fail@plt+0xdc4c>
   1f410:	add	r8, r6, #8
   1f414:	cmp	r5, r8
   1f418:	str	r2, [sp, #80]	; 0x50
   1f41c:	beq	1f53c <__assert_fail@plt+0xdd1c>
   1f420:	mov	r3, #8
   1f424:	sub	r2, r4, r2
   1f428:	mov	r0, r5
   1f42c:	str	r3, [sp]
   1f430:	add	r2, r2, #1
   1f434:	add	r1, sp, #80	; 0x50
   1f438:	mvn	r3, #-2147483648	; 0x80000000
   1f43c:	bl	22478 <__assert_fail@plt+0x10c58>
   1f440:	mov	r5, r0
   1f444:	str	r0, [r6]
   1f448:	ldr	r0, [r6, #4]
   1f44c:	ldr	r2, [sp, #80]	; 0x50
   1f450:	mov	r1, #0
   1f454:	sub	r2, r2, r0
   1f458:	add	r0, r5, r0, lsl #3
   1f45c:	lsl	r2, r2, #3
   1f460:	bl	116ac <memset@plt>
   1f464:	ldr	r3, [sp, #80]	; 0x50
   1f468:	str	r3, [r6, #4]
   1f46c:	add	fp, r5, r4, lsl #3
   1f470:	ldr	r3, [sp, #32]
   1f474:	ldr	r1, [sp, #36]	; 0x24
   1f478:	ldr	r8, [r5, r4, lsl #3]
   1f47c:	ldr	r6, [fp, #4]
   1f480:	ldr	r2, [sp, #72]	; 0x48
   1f484:	ldr	ip, [sp, #76]	; 0x4c
   1f488:	orr	r1, r1, #1
   1f48c:	str	r3, [sp]
   1f490:	add	r3, sp, #40	; 0x28
   1f494:	str	r1, [sp, #28]
   1f498:	str	r1, [sp, #4]
   1f49c:	str	r2, [sp, #12]
   1f4a0:	str	r3, [sp, #8]
   1f4a4:	mov	r0, r6
   1f4a8:	mov	r1, r8
   1f4ac:	str	ip, [sp, #16]
   1f4b0:	mov	r3, sl
   1f4b4:	mov	r2, r9
   1f4b8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f4bc:	cmp	r8, r0
   1f4c0:	bhi	1f528 <__assert_fail@plt+0xdd08>
   1f4c4:	ldr	r3, [pc, #168]	; 1f574 <__assert_fail@plt+0xdd54>
   1f4c8:	add	r8, r0, #1
   1f4cc:	cmp	r6, r3
   1f4d0:	str	r8, [r5, r4, lsl #3]
   1f4d4:	beq	1f4e0 <__assert_fail@plt+0xdcc0>
   1f4d8:	mov	r0, r6
   1f4dc:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1f4e0:	mov	r0, r8
   1f4e4:	bl	2225c <__assert_fail@plt+0x10a3c>
   1f4e8:	add	lr, sp, #40	; 0x28
   1f4ec:	ldr	ip, [sp, #76]	; 0x4c
   1f4f0:	ldr	r4, [sp, #72]	; 0x48
   1f4f4:	ldr	r5, [sp, #28]
   1f4f8:	mov	r3, sl
   1f4fc:	mov	r2, r9
   1f500:	mov	r1, r8
   1f504:	str	r0, [fp, #4]
   1f508:	str	lr, [sp, #8]
   1f50c:	ldr	lr, [sp, #32]
   1f510:	str	r5, [sp, #4]
   1f514:	str	ip, [sp, #16]
   1f518:	str	r4, [sp, #12]
   1f51c:	str	lr, [sp]
   1f520:	mov	r6, r0
   1f524:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f528:	ldr	r3, [sp, #24]
   1f52c:	mov	r0, r6
   1f530:	str	r3, [r7]
   1f534:	add	sp, sp, #132	; 0x84
   1f538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f53c:	mov	r3, #8
   1f540:	sub	r2, r4, r2
   1f544:	add	r1, sp, #80	; 0x50
   1f548:	str	r3, [sp]
   1f54c:	add	r2, r2, #1
   1f550:	mvn	r3, #-2147483648	; 0x80000000
   1f554:	bl	22478 <__assert_fail@plt+0x10c58>
   1f558:	mov	r5, r0
   1f55c:	ldm	r8, {r0, r1}
   1f560:	str	r5, [r6]
   1f564:	stm	r5, {r0, r1}
   1f568:	b	1f448 <__assert_fail@plt+0xdc28>
   1f56c:	bl	117f0 <abort@plt>
   1f570:	muleq	r3, r0, r1
   1f574:	andeq	r7, r3, r8, lsr #5
   1f578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f57c:	sub	sp, sp, #124	; 0x7c
   1f580:	mov	r4, r0
   1f584:	mov	r9, r1
   1f588:	add	r0, sp, #72	; 0x48
   1f58c:	mov	r2, #48	; 0x30
   1f590:	mov	r1, #0
   1f594:	bl	116ac <memset@plt>
   1f598:	cmp	r4, #10
   1f59c:	beq	1f728 <__assert_fail@plt+0xdf08>
   1f5a0:	add	lr, sp, #72	; 0x48
   1f5a4:	str	r4, [sp, #72]	; 0x48
   1f5a8:	ldm	lr!, {r0, r1, r2, r3}
   1f5ac:	add	ip, sp, #24
   1f5b0:	ldr	r5, [pc, #372]	; 1f72c <__assert_fail@plt+0xdf0c>
   1f5b4:	stmia	ip!, {r0, r1, r2, r3}
   1f5b8:	ldm	lr!, {r0, r1, r2, r3}
   1f5bc:	stmia	ip!, {r0, r1, r2, r3}
   1f5c0:	ldm	lr, {r0, r1, r2, r3}
   1f5c4:	stm	ip, {r0, r1, r2, r3}
   1f5c8:	bl	1167c <__errno_location@plt>
   1f5cc:	ldr	r2, [r5, #4]
   1f5d0:	ldr	r4, [r5]
   1f5d4:	cmp	r2, #0
   1f5d8:	mov	r7, r0
   1f5dc:	ldr	fp, [r0]
   1f5e0:	bgt	1f63c <__assert_fail@plt+0xde1c>
   1f5e4:	add	r6, r5, #8
   1f5e8:	cmp	r4, r6
   1f5ec:	str	r2, [sp, #72]	; 0x48
   1f5f0:	beq	1f6f8 <__assert_fail@plt+0xded8>
   1f5f4:	mov	r3, #8
   1f5f8:	mov	r0, r4
   1f5fc:	str	r3, [sp]
   1f600:	rsb	r2, r2, #1
   1f604:	add	r1, sp, #72	; 0x48
   1f608:	mvn	r3, #-2147483648	; 0x80000000
   1f60c:	bl	22478 <__assert_fail@plt+0x10c58>
   1f610:	mov	r4, r0
   1f614:	str	r0, [r5]
   1f618:	ldr	r0, [r5, #4]
   1f61c:	ldr	r2, [sp, #72]	; 0x48
   1f620:	mov	r1, #0
   1f624:	sub	r2, r2, r0
   1f628:	add	r0, r4, r0, lsl #3
   1f62c:	lsl	r2, r2, #3
   1f630:	bl	116ac <memset@plt>
   1f634:	ldr	r3, [sp, #72]	; 0x48
   1f638:	str	r3, [r5, #4]
   1f63c:	ldr	r6, [sp, #28]
   1f640:	ldr	r8, [r4]
   1f644:	ldr	r5, [r4, #4]
   1f648:	ldr	r2, [sp, #64]	; 0x40
   1f64c:	ldr	r3, [sp, #24]
   1f650:	ldr	ip, [sp, #68]	; 0x44
   1f654:	orr	r6, r6, #1
   1f658:	add	sl, sp, #32
   1f65c:	str	r2, [sp, #12]
   1f660:	str	r3, [sp]
   1f664:	str	r6, [sp, #4]
   1f668:	mov	r1, r8
   1f66c:	mov	r0, r5
   1f670:	str	ip, [sp, #16]
   1f674:	str	sl, [sp, #8]
   1f678:	mvn	r3, #0
   1f67c:	mov	r2, r9
   1f680:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f684:	cmp	r8, r0
   1f688:	bhi	1f6e8 <__assert_fail@plt+0xdec8>
   1f68c:	ldr	r3, [pc, #156]	; 1f730 <__assert_fail@plt+0xdf10>
   1f690:	add	r8, r0, #1
   1f694:	cmp	r5, r3
   1f698:	str	r8, [r4]
   1f69c:	beq	1f6a8 <__assert_fail@plt+0xde88>
   1f6a0:	mov	r0, r5
   1f6a4:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1f6a8:	mov	r0, r8
   1f6ac:	bl	2225c <__assert_fail@plt+0x10a3c>
   1f6b0:	ldr	lr, [sp, #68]	; 0x44
   1f6b4:	ldr	r3, [sp, #24]
   1f6b8:	ldr	ip, [sp, #64]	; 0x40
   1f6bc:	mov	r2, r9
   1f6c0:	mov	r1, r8
   1f6c4:	str	r0, [r4, #4]
   1f6c8:	str	r3, [sp]
   1f6cc:	str	sl, [sp, #8]
   1f6d0:	str	r6, [sp, #4]
   1f6d4:	str	lr, [sp, #16]
   1f6d8:	str	ip, [sp, #12]
   1f6dc:	mvn	r3, #0
   1f6e0:	mov	r5, r0
   1f6e4:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f6e8:	mov	r0, r5
   1f6ec:	str	fp, [r7]
   1f6f0:	add	sp, sp, #124	; 0x7c
   1f6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6f8:	mov	r3, #8
   1f6fc:	add	r1, sp, #72	; 0x48
   1f700:	str	r3, [sp]
   1f704:	rsb	r2, r2, #1
   1f708:	mvn	r3, #-2147483648	; 0x80000000
   1f70c:	mov	r0, #0
   1f710:	bl	22478 <__assert_fail@plt+0x10c58>
   1f714:	mov	r4, r0
   1f718:	ldm	r6, {r0, r1}
   1f71c:	str	r4, [r5]
   1f720:	stm	r4, {r0, r1}
   1f724:	b	1f618 <__assert_fail@plt+0xddf8>
   1f728:	bl	117f0 <abort@plt>
   1f72c:	muleq	r3, r0, r1
   1f730:	andeq	r7, r3, r8, lsr #5
   1f734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f738:	sub	sp, sp, #132	; 0x84
   1f73c:	mov	r4, r0
   1f740:	mov	r9, r1
   1f744:	mov	sl, r2
   1f748:	add	r0, sp, #80	; 0x50
   1f74c:	mov	r2, #48	; 0x30
   1f750:	mov	r1, #0
   1f754:	bl	116ac <memset@plt>
   1f758:	cmp	r4, #10
   1f75c:	beq	1f8f0 <__assert_fail@plt+0xe0d0>
   1f760:	add	lr, sp, #80	; 0x50
   1f764:	str	r4, [sp, #80]	; 0x50
   1f768:	ldm	lr!, {r0, r1, r2, r3}
   1f76c:	add	ip, sp, #32
   1f770:	ldr	r5, [pc, #380]	; 1f8f4 <__assert_fail@plt+0xe0d4>
   1f774:	stmia	ip!, {r0, r1, r2, r3}
   1f778:	ldm	lr!, {r0, r1, r2, r3}
   1f77c:	stmia	ip!, {r0, r1, r2, r3}
   1f780:	ldm	lr, {r0, r1, r2, r3}
   1f784:	stm	ip, {r0, r1, r2, r3}
   1f788:	bl	1167c <__errno_location@plt>
   1f78c:	ldr	r2, [r5, #4]
   1f790:	ldr	r4, [r5]
   1f794:	cmp	r2, #0
   1f798:	ldr	r3, [r0]
   1f79c:	mov	r7, r0
   1f7a0:	str	r3, [sp, #28]
   1f7a4:	bgt	1f800 <__assert_fail@plt+0xdfe0>
   1f7a8:	add	r6, r5, #8
   1f7ac:	cmp	r4, r6
   1f7b0:	str	r2, [sp, #80]	; 0x50
   1f7b4:	beq	1f8c0 <__assert_fail@plt+0xe0a0>
   1f7b8:	mov	r3, #8
   1f7bc:	mov	r0, r4
   1f7c0:	str	r3, [sp]
   1f7c4:	rsb	r2, r2, #1
   1f7c8:	add	r1, sp, #80	; 0x50
   1f7cc:	mvn	r3, #-2147483648	; 0x80000000
   1f7d0:	bl	22478 <__assert_fail@plt+0x10c58>
   1f7d4:	mov	r4, r0
   1f7d8:	str	r0, [r5]
   1f7dc:	ldr	r0, [r5, #4]
   1f7e0:	ldr	r2, [sp, #80]	; 0x50
   1f7e4:	mov	r1, #0
   1f7e8:	sub	r2, r2, r0
   1f7ec:	add	r0, r4, r0, lsl #3
   1f7f0:	lsl	r2, r2, #3
   1f7f4:	bl	116ac <memset@plt>
   1f7f8:	ldr	r3, [sp, #80]	; 0x50
   1f7fc:	str	r3, [r5, #4]
   1f800:	ldr	r6, [sp, #36]	; 0x24
   1f804:	ldr	r8, [r4]
   1f808:	ldr	r5, [r4, #4]
   1f80c:	ldr	r2, [sp, #72]	; 0x48
   1f810:	ldr	r3, [sp, #32]
   1f814:	ldr	ip, [sp, #76]	; 0x4c
   1f818:	orr	r6, r6, #1
   1f81c:	add	fp, sp, #40	; 0x28
   1f820:	str	r2, [sp, #12]
   1f824:	str	r3, [sp]
   1f828:	str	r6, [sp, #4]
   1f82c:	mov	r1, r8
   1f830:	mov	r0, r5
   1f834:	str	ip, [sp, #16]
   1f838:	str	fp, [sp, #8]
   1f83c:	mov	r3, sl
   1f840:	mov	r2, r9
   1f844:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f848:	cmp	r8, r0
   1f84c:	bhi	1f8ac <__assert_fail@plt+0xe08c>
   1f850:	ldr	r3, [pc, #160]	; 1f8f8 <__assert_fail@plt+0xe0d8>
   1f854:	add	r8, r0, #1
   1f858:	cmp	r5, r3
   1f85c:	str	r8, [r4]
   1f860:	beq	1f86c <__assert_fail@plt+0xe04c>
   1f864:	mov	r0, r5
   1f868:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1f86c:	mov	r0, r8
   1f870:	bl	2225c <__assert_fail@plt+0x10a3c>
   1f874:	ldr	ip, [sp, #76]	; 0x4c
   1f878:	ldr	lr, [sp, #32]
   1f87c:	mov	r3, sl
   1f880:	mov	r2, r9
   1f884:	mov	r1, r8
   1f888:	str	r0, [r4, #4]
   1f88c:	ldr	r4, [sp, #72]	; 0x48
   1f890:	str	fp, [sp, #8]
   1f894:	str	r6, [sp, #4]
   1f898:	str	ip, [sp, #16]
   1f89c:	str	r4, [sp, #12]
   1f8a0:	str	lr, [sp]
   1f8a4:	mov	r5, r0
   1f8a8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1f8ac:	ldr	r3, [sp, #28]
   1f8b0:	mov	r0, r5
   1f8b4:	str	r3, [r7]
   1f8b8:	add	sp, sp, #132	; 0x84
   1f8bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8c0:	mov	r3, #8
   1f8c4:	add	r1, sp, #80	; 0x50
   1f8c8:	str	r3, [sp]
   1f8cc:	rsb	r2, r2, #1
   1f8d0:	mvn	r3, #-2147483648	; 0x80000000
   1f8d4:	mov	r0, #0
   1f8d8:	bl	22478 <__assert_fail@plt+0x10c58>
   1f8dc:	mov	r4, r0
   1f8e0:	ldm	r6, {r0, r1}
   1f8e4:	str	r4, [r5]
   1f8e8:	stm	r4, {r0, r1}
   1f8ec:	b	1f7dc <__assert_fail@plt+0xdfbc>
   1f8f0:	bl	117f0 <abort@plt>
   1f8f4:	muleq	r3, r0, r1
   1f8f8:	andeq	r7, r3, r8, lsr #5
   1f8fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f900:	mov	r4, r2
   1f904:	ldr	lr, [pc, #432]	; 1fabc <__assert_fail@plt+0xe29c>
   1f908:	mov	sl, r0
   1f90c:	mov	fp, r1
   1f910:	ldm	lr!, {r0, r1, r2, r3}
   1f914:	sub	sp, sp, #92	; 0x5c
   1f918:	add	ip, sp, #40	; 0x28
   1f91c:	lsr	r7, r4, #5
   1f920:	stmia	ip!, {r0, r1, r2, r3}
   1f924:	add	r6, sp, #48	; 0x30
   1f928:	ldm	lr!, {r0, r1, r2, r3}
   1f92c:	and	r4, r4, #31
   1f930:	ldr	r5, [pc, #392]	; 1fac0 <__assert_fail@plt+0xe2a0>
   1f934:	stmia	ip!, {r0, r1, r2, r3}
   1f938:	ldm	lr, {r0, r1, r2, r3}
   1f93c:	stm	ip, {r0, r1, r2, r3}
   1f940:	ldr	r2, [r6, r7, lsl #2]
   1f944:	lsr	r3, r2, r4
   1f948:	eor	r3, r3, #1
   1f94c:	and	r3, r3, #1
   1f950:	eor	r4, r2, r3, lsl r4
   1f954:	str	r4, [r6, r7, lsl #2]
   1f958:	bl	1167c <__errno_location@plt>
   1f95c:	ldr	r2, [r5, #4]
   1f960:	ldr	r4, [r5]
   1f964:	cmp	r2, #0
   1f968:	ldr	r3, [r0]
   1f96c:	mov	r8, r0
   1f970:	str	r3, [sp, #28]
   1f974:	bgt	1f9d0 <__assert_fail@plt+0xe1b0>
   1f978:	add	r7, r5, #8
   1f97c:	cmp	r4, r7
   1f980:	str	r2, [sp, #36]	; 0x24
   1f984:	beq	1fa8c <__assert_fail@plt+0xe26c>
   1f988:	mov	r3, #8
   1f98c:	mov	r0, r4
   1f990:	str	r3, [sp]
   1f994:	rsb	r2, r2, #1
   1f998:	mvn	r3, #-2147483648	; 0x80000000
   1f99c:	add	r1, sp, #36	; 0x24
   1f9a0:	bl	22478 <__assert_fail@plt+0x10c58>
   1f9a4:	mov	r4, r0
   1f9a8:	str	r0, [r5]
   1f9ac:	ldr	r0, [r5, #4]
   1f9b0:	ldr	r2, [sp, #36]	; 0x24
   1f9b4:	mov	r1, #0
   1f9b8:	sub	r2, r2, r0
   1f9bc:	add	r0, r4, r0, lsl #3
   1f9c0:	lsl	r2, r2, #3
   1f9c4:	bl	116ac <memset@plt>
   1f9c8:	ldr	r3, [sp, #36]	; 0x24
   1f9cc:	str	r3, [r5, #4]
   1f9d0:	ldr	r7, [sp, #44]	; 0x2c
   1f9d4:	ldr	r9, [r4]
   1f9d8:	ldr	r5, [r4, #4]
   1f9dc:	ldr	r2, [sp, #80]	; 0x50
   1f9e0:	ldr	r3, [sp, #40]	; 0x28
   1f9e4:	ldr	ip, [sp, #84]	; 0x54
   1f9e8:	orr	r7, r7, #1
   1f9ec:	str	r2, [sp, #12]
   1f9f0:	str	r3, [sp]
   1f9f4:	str	r7, [sp, #4]
   1f9f8:	str	r6, [sp, #8]
   1f9fc:	mov	r1, r9
   1fa00:	mov	r0, r5
   1fa04:	str	ip, [sp, #16]
   1fa08:	mov	r3, fp
   1fa0c:	mov	r2, sl
   1fa10:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1fa14:	cmp	r9, r0
   1fa18:	bhi	1fa78 <__assert_fail@plt+0xe258>
   1fa1c:	ldr	r3, [pc, #160]	; 1fac4 <__assert_fail@plt+0xe2a4>
   1fa20:	add	r9, r0, #1
   1fa24:	cmp	r5, r3
   1fa28:	str	r9, [r4]
   1fa2c:	beq	1fa38 <__assert_fail@plt+0xe218>
   1fa30:	mov	r0, r5
   1fa34:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1fa38:	mov	r0, r9
   1fa3c:	bl	2225c <__assert_fail@plt+0x10a3c>
   1fa40:	ldr	ip, [sp, #84]	; 0x54
   1fa44:	ldr	lr, [sp, #40]	; 0x28
   1fa48:	mov	r3, fp
   1fa4c:	mov	r2, sl
   1fa50:	mov	r1, r9
   1fa54:	str	r0, [r4, #4]
   1fa58:	ldr	r4, [sp, #80]	; 0x50
   1fa5c:	str	r6, [sp, #8]
   1fa60:	str	r7, [sp, #4]
   1fa64:	str	ip, [sp, #16]
   1fa68:	str	r4, [sp, #12]
   1fa6c:	str	lr, [sp]
   1fa70:	mov	r5, r0
   1fa74:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1fa78:	ldr	r3, [sp, #28]
   1fa7c:	mov	r0, r5
   1fa80:	str	r3, [r8]
   1fa84:	add	sp, sp, #92	; 0x5c
   1fa88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa8c:	mov	r3, #8
   1fa90:	str	r3, [sp]
   1fa94:	add	r1, sp, #36	; 0x24
   1fa98:	rsb	r2, r2, #1
   1fa9c:	mvn	r3, #-2147483648	; 0x80000000
   1faa0:	mov	r0, #0
   1faa4:	bl	22478 <__assert_fail@plt+0x10c58>
   1faa8:	mov	r4, r0
   1faac:	ldm	r7, {r0, r1}
   1fab0:	str	r4, [r5]
   1fab4:	stm	r4, {r0, r1}
   1fab8:	b	1f9ac <__assert_fail@plt+0xe18c>
   1fabc:	andeq	r7, r3, r8, ror r2
   1fac0:	muleq	r3, r0, r1
   1fac4:	andeq	r7, r3, r8, lsr #5
   1fac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1facc:	mov	r4, r1
   1fad0:	ldr	lr, [pc, #420]	; 1fc7c <__assert_fail@plt+0xe45c>
   1fad4:	mov	r6, r0
   1fad8:	sub	sp, sp, #84	; 0x54
   1fadc:	ldm	lr!, {r0, r1, r2, r3}
   1fae0:	add	ip, sp, #32
   1fae4:	lsr	r8, r4, #5
   1fae8:	add	r5, sp, #40	; 0x28
   1faec:	stmia	ip!, {r0, r1, r2, r3}
   1faf0:	and	r4, r4, #31
   1faf4:	ldm	lr!, {r0, r1, r2, r3}
   1faf8:	ldr	r7, [pc, #384]	; 1fc80 <__assert_fail@plt+0xe460>
   1fafc:	stmia	ip!, {r0, r1, r2, r3}
   1fb00:	ldm	lr, {r0, r1, r2, r3}
   1fb04:	stm	ip, {r0, r1, r2, r3}
   1fb08:	ldr	r2, [r5, r8, lsl #2]
   1fb0c:	lsr	r3, r2, r4
   1fb10:	eor	r3, r3, #1
   1fb14:	and	r3, r3, #1
   1fb18:	eor	r4, r2, r3, lsl r4
   1fb1c:	str	r4, [r5, r8, lsl #2]
   1fb20:	bl	1167c <__errno_location@plt>
   1fb24:	ldr	r2, [r7, #4]
   1fb28:	ldr	r4, [r7]
   1fb2c:	cmp	r2, #0
   1fb30:	mov	r9, r0
   1fb34:	ldr	sl, [r0]
   1fb38:	bgt	1fb94 <__assert_fail@plt+0xe374>
   1fb3c:	add	r8, r7, #8
   1fb40:	cmp	r4, r8
   1fb44:	str	r2, [sp, #28]
   1fb48:	beq	1fc4c <__assert_fail@plt+0xe42c>
   1fb4c:	mov	r3, #8
   1fb50:	mov	r0, r4
   1fb54:	str	r3, [sp]
   1fb58:	rsb	r2, r2, #1
   1fb5c:	mvn	r3, #-2147483648	; 0x80000000
   1fb60:	add	r1, sp, #28
   1fb64:	bl	22478 <__assert_fail@plt+0x10c58>
   1fb68:	mov	r4, r0
   1fb6c:	str	r0, [r7]
   1fb70:	ldr	r0, [r7, #4]
   1fb74:	ldr	r2, [sp, #28]
   1fb78:	mov	r1, #0
   1fb7c:	sub	r2, r2, r0
   1fb80:	add	r0, r4, r0, lsl #3
   1fb84:	lsl	r2, r2, #3
   1fb88:	bl	116ac <memset@plt>
   1fb8c:	ldr	r3, [sp, #28]
   1fb90:	str	r3, [r7, #4]
   1fb94:	ldr	r8, [sp, #36]	; 0x24
   1fb98:	ldr	fp, [r4]
   1fb9c:	ldr	r7, [r4, #4]
   1fba0:	ldr	r2, [sp, #72]	; 0x48
   1fba4:	ldr	r3, [sp, #32]
   1fba8:	ldr	ip, [sp, #76]	; 0x4c
   1fbac:	orr	r8, r8, #1
   1fbb0:	str	r2, [sp, #12]
   1fbb4:	str	r3, [sp]
   1fbb8:	str	r8, [sp, #4]
   1fbbc:	str	r5, [sp, #8]
   1fbc0:	mov	r1, fp
   1fbc4:	mov	r0, r7
   1fbc8:	str	ip, [sp, #16]
   1fbcc:	mvn	r3, #0
   1fbd0:	mov	r2, r6
   1fbd4:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1fbd8:	cmp	fp, r0
   1fbdc:	bhi	1fc3c <__assert_fail@plt+0xe41c>
   1fbe0:	ldr	r3, [pc, #156]	; 1fc84 <__assert_fail@plt+0xe464>
   1fbe4:	add	fp, r0, #1
   1fbe8:	cmp	r7, r3
   1fbec:	str	fp, [r4]
   1fbf0:	beq	1fbfc <__assert_fail@plt+0xe3dc>
   1fbf4:	mov	r0, r7
   1fbf8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1fbfc:	mov	r0, fp
   1fc00:	bl	2225c <__assert_fail@plt+0x10a3c>
   1fc04:	ldr	lr, [sp, #76]	; 0x4c
   1fc08:	ldr	r3, [sp, #32]
   1fc0c:	ldr	ip, [sp, #72]	; 0x48
   1fc10:	mov	r2, r6
   1fc14:	mov	r1, fp
   1fc18:	str	r0, [r4, #4]
   1fc1c:	str	r3, [sp]
   1fc20:	str	r5, [sp, #8]
   1fc24:	str	r8, [sp, #4]
   1fc28:	str	lr, [sp, #16]
   1fc2c:	str	ip, [sp, #12]
   1fc30:	mvn	r3, #0
   1fc34:	mov	r7, r0
   1fc38:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1fc3c:	mov	r0, r7
   1fc40:	str	sl, [r9]
   1fc44:	add	sp, sp, #84	; 0x54
   1fc48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc4c:	mov	r3, #8
   1fc50:	str	r3, [sp]
   1fc54:	add	r1, sp, #28
   1fc58:	rsb	r2, r2, #1
   1fc5c:	mvn	r3, #-2147483648	; 0x80000000
   1fc60:	mov	r0, #0
   1fc64:	bl	22478 <__assert_fail@plt+0x10c58>
   1fc68:	mov	r4, r0
   1fc6c:	ldm	r8, {r0, r1}
   1fc70:	str	r4, [r7]
   1fc74:	stm	r4, {r0, r1}
   1fc78:	b	1fb70 <__assert_fail@plt+0xe350>
   1fc7c:	andeq	r7, r3, r8, ror r2
   1fc80:	muleq	r3, r0, r1
   1fc84:	andeq	r7, r3, r8, lsr #5
   1fc88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc8c:	mov	r6, r0
   1fc90:	ldr	lr, [pc, #404]	; 1fe2c <__assert_fail@plt+0xe60c>
   1fc94:	sub	sp, sp, #84	; 0x54
   1fc98:	add	ip, sp, #32
   1fc9c:	ldm	lr!, {r0, r1, r2, r3}
   1fca0:	ldr	r5, [pc, #392]	; 1fe30 <__assert_fail@plt+0xe610>
   1fca4:	stmia	ip!, {r0, r1, r2, r3}
   1fca8:	ldm	lr!, {r0, r1, r2, r3}
   1fcac:	ldr	r4, [sp, #44]	; 0x2c
   1fcb0:	stmia	ip!, {r0, r1, r2, r3}
   1fcb4:	ldm	lr, {r0, r1, r2, r3}
   1fcb8:	mvn	lr, r4
   1fcbc:	and	lr, lr, #67108864	; 0x4000000
   1fcc0:	eor	lr, lr, r4
   1fcc4:	stm	ip, {r0, r1, r2, r3}
   1fcc8:	str	lr, [sp, #44]	; 0x2c
   1fccc:	bl	1167c <__errno_location@plt>
   1fcd0:	ldr	r2, [r5, #4]
   1fcd4:	ldr	r4, [r5]
   1fcd8:	cmp	r2, #0
   1fcdc:	mov	r8, r0
   1fce0:	ldr	sl, [r0]
   1fce4:	bgt	1fd40 <__assert_fail@plt+0xe520>
   1fce8:	add	r7, r5, #8
   1fcec:	cmp	r4, r7
   1fcf0:	str	r2, [sp, #28]
   1fcf4:	beq	1fdfc <__assert_fail@plt+0xe5dc>
   1fcf8:	mov	r3, #8
   1fcfc:	mov	r0, r4
   1fd00:	str	r3, [sp]
   1fd04:	rsb	r2, r2, #1
   1fd08:	mvn	r3, #-2147483648	; 0x80000000
   1fd0c:	add	r1, sp, #28
   1fd10:	bl	22478 <__assert_fail@plt+0x10c58>
   1fd14:	mov	r4, r0
   1fd18:	str	r0, [r5]
   1fd1c:	ldr	r0, [r5, #4]
   1fd20:	ldr	r2, [sp, #28]
   1fd24:	mov	r1, #0
   1fd28:	sub	r2, r2, r0
   1fd2c:	add	r0, r4, r0, lsl #3
   1fd30:	lsl	r2, r2, #3
   1fd34:	bl	116ac <memset@plt>
   1fd38:	ldr	r3, [sp, #28]
   1fd3c:	str	r3, [r5, #4]
   1fd40:	ldr	r7, [sp, #36]	; 0x24
   1fd44:	ldr	r9, [r4]
   1fd48:	ldr	r5, [r4, #4]
   1fd4c:	ldr	r2, [sp, #72]	; 0x48
   1fd50:	ldr	r3, [sp, #32]
   1fd54:	ldr	ip, [sp, #76]	; 0x4c
   1fd58:	orr	r7, r7, #1
   1fd5c:	add	fp, sp, #40	; 0x28
   1fd60:	str	r2, [sp, #12]
   1fd64:	str	r3, [sp]
   1fd68:	str	r7, [sp, #4]
   1fd6c:	mov	r1, r9
   1fd70:	mov	r0, r5
   1fd74:	str	ip, [sp, #16]
   1fd78:	str	fp, [sp, #8]
   1fd7c:	mvn	r3, #0
   1fd80:	mov	r2, r6
   1fd84:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1fd88:	cmp	r9, r0
   1fd8c:	bhi	1fdec <__assert_fail@plt+0xe5cc>
   1fd90:	ldr	r3, [pc, #156]	; 1fe34 <__assert_fail@plt+0xe614>
   1fd94:	add	r9, r0, #1
   1fd98:	cmp	r5, r3
   1fd9c:	str	r9, [r4]
   1fda0:	beq	1fdac <__assert_fail@plt+0xe58c>
   1fda4:	mov	r0, r5
   1fda8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1fdac:	mov	r0, r9
   1fdb0:	bl	2225c <__assert_fail@plt+0x10a3c>
   1fdb4:	ldr	lr, [sp, #76]	; 0x4c
   1fdb8:	ldr	r3, [sp, #32]
   1fdbc:	ldr	ip, [sp, #72]	; 0x48
   1fdc0:	mov	r2, r6
   1fdc4:	mov	r1, r9
   1fdc8:	str	r0, [r4, #4]
   1fdcc:	str	r3, [sp]
   1fdd0:	str	fp, [sp, #8]
   1fdd4:	str	r7, [sp, #4]
   1fdd8:	str	lr, [sp, #16]
   1fddc:	str	ip, [sp, #12]
   1fde0:	mvn	r3, #0
   1fde4:	mov	r5, r0
   1fde8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1fdec:	mov	r0, r5
   1fdf0:	str	sl, [r8]
   1fdf4:	add	sp, sp, #84	; 0x54
   1fdf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdfc:	mov	r3, #8
   1fe00:	str	r3, [sp]
   1fe04:	add	r1, sp, #28
   1fe08:	rsb	r2, r2, #1
   1fe0c:	mvn	r3, #-2147483648	; 0x80000000
   1fe10:	mov	r0, #0
   1fe14:	bl	22478 <__assert_fail@plt+0x10c58>
   1fe18:	mov	r4, r0
   1fe1c:	ldm	r7, {r0, r1}
   1fe20:	str	r4, [r5]
   1fe24:	stm	r4, {r0, r1}
   1fe28:	b	1fd1c <__assert_fail@plt+0xe4fc>
   1fe2c:	andeq	r7, r3, r8, ror r2
   1fe30:	muleq	r3, r0, r1
   1fe34:	andeq	r7, r3, r8, lsr #5
   1fe38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe3c:	mov	r9, r0
   1fe40:	ldr	lr, [pc, #416]	; 1ffe8 <__assert_fail@plt+0xe7c8>
   1fe44:	mov	sl, r1
   1fe48:	sub	sp, sp, #92	; 0x5c
   1fe4c:	ldm	lr!, {r0, r1, r2, r3}
   1fe50:	add	ip, sp, #40	; 0x28
   1fe54:	ldr	r5, [pc, #400]	; 1ffec <__assert_fail@plt+0xe7cc>
   1fe58:	stmia	ip!, {r0, r1, r2, r3}
   1fe5c:	ldm	lr!, {r0, r1, r2, r3}
   1fe60:	ldr	r4, [sp, #52]	; 0x34
   1fe64:	stmia	ip!, {r0, r1, r2, r3}
   1fe68:	ldm	lr, {r0, r1, r2, r3}
   1fe6c:	mvn	lr, r4
   1fe70:	and	lr, lr, #67108864	; 0x4000000
   1fe74:	eor	lr, lr, r4
   1fe78:	stm	ip, {r0, r1, r2, r3}
   1fe7c:	str	lr, [sp, #52]	; 0x34
   1fe80:	bl	1167c <__errno_location@plt>
   1fe84:	ldr	r2, [r5, #4]
   1fe88:	ldr	r4, [r5]
   1fe8c:	cmp	r2, #0
   1fe90:	ldr	r3, [r0]
   1fe94:	mov	r7, r0
   1fe98:	str	r3, [sp, #28]
   1fe9c:	bgt	1fef8 <__assert_fail@plt+0xe6d8>
   1fea0:	add	r6, r5, #8
   1fea4:	cmp	r4, r6
   1fea8:	str	r2, [sp, #36]	; 0x24
   1feac:	beq	1ffb8 <__assert_fail@plt+0xe798>
   1feb0:	mov	r3, #8
   1feb4:	mov	r0, r4
   1feb8:	str	r3, [sp]
   1febc:	rsb	r2, r2, #1
   1fec0:	mvn	r3, #-2147483648	; 0x80000000
   1fec4:	add	r1, sp, #36	; 0x24
   1fec8:	bl	22478 <__assert_fail@plt+0x10c58>
   1fecc:	mov	r4, r0
   1fed0:	str	r0, [r5]
   1fed4:	ldr	r0, [r5, #4]
   1fed8:	ldr	r2, [sp, #36]	; 0x24
   1fedc:	mov	r1, #0
   1fee0:	sub	r2, r2, r0
   1fee4:	add	r0, r4, r0, lsl #3
   1fee8:	lsl	r2, r2, #3
   1feec:	bl	116ac <memset@plt>
   1fef0:	ldr	r3, [sp, #36]	; 0x24
   1fef4:	str	r3, [r5, #4]
   1fef8:	ldr	r6, [sp, #44]	; 0x2c
   1fefc:	ldr	r8, [r4]
   1ff00:	ldr	r5, [r4, #4]
   1ff04:	ldr	r2, [sp, #80]	; 0x50
   1ff08:	ldr	r3, [sp, #40]	; 0x28
   1ff0c:	ldr	ip, [sp, #84]	; 0x54
   1ff10:	orr	r6, r6, #1
   1ff14:	add	fp, sp, #48	; 0x30
   1ff18:	str	r2, [sp, #12]
   1ff1c:	str	r3, [sp]
   1ff20:	str	r6, [sp, #4]
   1ff24:	mov	r1, r8
   1ff28:	mov	r0, r5
   1ff2c:	str	ip, [sp, #16]
   1ff30:	str	fp, [sp, #8]
   1ff34:	mov	r3, sl
   1ff38:	mov	r2, r9
   1ff3c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ff40:	cmp	r8, r0
   1ff44:	bhi	1ffa4 <__assert_fail@plt+0xe784>
   1ff48:	ldr	r3, [pc, #160]	; 1fff0 <__assert_fail@plt+0xe7d0>
   1ff4c:	add	r8, r0, #1
   1ff50:	cmp	r5, r3
   1ff54:	str	r8, [r4]
   1ff58:	beq	1ff64 <__assert_fail@plt+0xe744>
   1ff5c:	mov	r0, r5
   1ff60:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   1ff64:	mov	r0, r8
   1ff68:	bl	2225c <__assert_fail@plt+0x10a3c>
   1ff6c:	ldr	ip, [sp, #84]	; 0x54
   1ff70:	ldr	lr, [sp, #40]	; 0x28
   1ff74:	mov	r3, sl
   1ff78:	mov	r2, r9
   1ff7c:	mov	r1, r8
   1ff80:	str	r0, [r4, #4]
   1ff84:	ldr	r4, [sp, #80]	; 0x50
   1ff88:	str	fp, [sp, #8]
   1ff8c:	str	r6, [sp, #4]
   1ff90:	str	ip, [sp, #16]
   1ff94:	str	r4, [sp, #12]
   1ff98:	str	lr, [sp]
   1ff9c:	mov	r5, r0
   1ffa0:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   1ffa4:	ldr	r3, [sp, #28]
   1ffa8:	mov	r0, r5
   1ffac:	str	r3, [r7]
   1ffb0:	add	sp, sp, #92	; 0x5c
   1ffb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffb8:	mov	r3, #8
   1ffbc:	str	r3, [sp]
   1ffc0:	add	r1, sp, #36	; 0x24
   1ffc4:	rsb	r2, r2, #1
   1ffc8:	mvn	r3, #-2147483648	; 0x80000000
   1ffcc:	mov	r0, #0
   1ffd0:	bl	22478 <__assert_fail@plt+0x10c58>
   1ffd4:	mov	r4, r0
   1ffd8:	ldm	r6, {r0, r1}
   1ffdc:	str	r4, [r5]
   1ffe0:	stm	r4, {r0, r1}
   1ffe4:	b	1fed4 <__assert_fail@plt+0xe6b4>
   1ffe8:	andeq	r7, r3, r8, ror r2
   1ffec:	muleq	r3, r0, r1
   1fff0:	andeq	r7, r3, r8, lsr #5
   1fff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fff8:	sub	sp, sp, #180	; 0xb4
   1fffc:	mov	r6, r1
   20000:	mov	r4, r0
   20004:	mov	r9, r2
   20008:	add	r0, sp, #80	; 0x50
   2000c:	mov	r2, #48	; 0x30
   20010:	mov	r1, #0
   20014:	bl	116ac <memset@plt>
   20018:	cmp	r6, #10
   2001c:	beq	201fc <__assert_fail@plt+0xe9dc>
   20020:	add	r5, sp, #80	; 0x50
   20024:	str	r6, [sp, #80]	; 0x50
   20028:	ldm	r5!, {r0, r1, r2, r3}
   2002c:	add	ip, sp, #128	; 0x80
   20030:	mov	r7, ip
   20034:	add	lr, sp, #32
   20038:	stmia	ip!, {r0, r1, r2, r3}
   2003c:	mov	r8, #67108864	; 0x4000000
   20040:	ldm	r5!, {r0, r1, r2, r3}
   20044:	ldr	r6, [pc, #436]	; 20200 <__assert_fail@plt+0xe9e0>
   20048:	stmia	ip!, {r0, r1, r2, r3}
   2004c:	ldm	r5, {r0, r1, r2, r3}
   20050:	stm	ip, {r0, r1, r2, r3}
   20054:	ldm	r7!, {r0, r1, r2, r3}
   20058:	stmia	lr!, {r0, r1, r2, r3}
   2005c:	ldm	r7!, {r0, r1, r2, r3}
   20060:	str	r8, [sp, #44]	; 0x2c
   20064:	stmia	lr!, {r0, r1, r2, r3}
   20068:	ldm	ip, {r0, r1, r2, r3}
   2006c:	stm	lr, {r0, r1, r2, r3}
   20070:	bl	1167c <__errno_location@plt>
   20074:	cmn	r4, #-2147483647	; 0x80000001
   20078:	ldr	r5, [r6]
   2007c:	mov	r7, r0
   20080:	movne	r0, #0
   20084:	moveq	r0, #1
   20088:	ldr	r3, [r7]
   2008c:	orrs	r0, r0, r4, lsr #31
   20090:	str	r3, [sp, #24]
   20094:	bne	201fc <__assert_fail@plt+0xe9dc>
   20098:	ldr	r2, [r6, #4]
   2009c:	cmp	r4, r2
   200a0:	blt	20100 <__assert_fail@plt+0xe8e0>
   200a4:	add	r8, r6, #8
   200a8:	cmp	r5, r8
   200ac:	str	r2, [sp, #80]	; 0x50
   200b0:	beq	201cc <__assert_fail@plt+0xe9ac>
   200b4:	mov	r3, #8
   200b8:	sub	r2, r4, r2
   200bc:	mov	r0, r5
   200c0:	str	r3, [sp]
   200c4:	add	r2, r2, #1
   200c8:	add	r1, sp, #80	; 0x50
   200cc:	mvn	r3, #-2147483648	; 0x80000000
   200d0:	bl	22478 <__assert_fail@plt+0x10c58>
   200d4:	mov	r5, r0
   200d8:	str	r0, [r6]
   200dc:	ldr	r0, [r6, #4]
   200e0:	ldr	r2, [sp, #80]	; 0x50
   200e4:	mov	r1, #0
   200e8:	sub	r2, r2, r0
   200ec:	add	r0, r5, r0, lsl #3
   200f0:	lsl	r2, r2, #3
   200f4:	bl	116ac <memset@plt>
   200f8:	ldr	r3, [sp, #80]	; 0x50
   200fc:	str	r3, [r6, #4]
   20100:	add	fp, r5, r4, lsl #3
   20104:	ldr	r1, [sp, #36]	; 0x24
   20108:	ldr	r8, [r5, r4, lsl #3]
   2010c:	ldr	r6, [fp, #4]
   20110:	ldr	r2, [sp, #72]	; 0x48
   20114:	ldr	r3, [sp, #32]
   20118:	ldr	ip, [sp, #76]	; 0x4c
   2011c:	orr	r1, r1, #1
   20120:	add	sl, sp, #40	; 0x28
   20124:	str	r1, [sp, #28]
   20128:	str	r1, [sp, #4]
   2012c:	str	r2, [sp, #12]
   20130:	str	r3, [sp]
   20134:	mov	r0, r6
   20138:	mov	r1, r8
   2013c:	str	ip, [sp, #16]
   20140:	str	sl, [sp, #8]
   20144:	mvn	r3, #0
   20148:	mov	r2, r9
   2014c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20150:	cmp	r8, r0
   20154:	bhi	201b8 <__assert_fail@plt+0xe998>
   20158:	ldr	r3, [pc, #164]	; 20204 <__assert_fail@plt+0xe9e4>
   2015c:	add	r8, r0, #1
   20160:	cmp	r6, r3
   20164:	str	r8, [r5, r4, lsl #3]
   20168:	beq	20174 <__assert_fail@plt+0xe954>
   2016c:	mov	r0, r6
   20170:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20174:	mov	r0, r8
   20178:	bl	2225c <__assert_fail@plt+0x10a3c>
   2017c:	ldr	lr, [sp, #76]	; 0x4c
   20180:	ldr	r3, [sp, #32]
   20184:	ldr	ip, [sp, #72]	; 0x48
   20188:	ldr	r4, [sp, #28]
   2018c:	mov	r2, r9
   20190:	mov	r1, r8
   20194:	str	r0, [fp, #4]
   20198:	str	r3, [sp]
   2019c:	str	sl, [sp, #8]
   201a0:	str	r4, [sp, #4]
   201a4:	str	lr, [sp, #16]
   201a8:	str	ip, [sp, #12]
   201ac:	mvn	r3, #0
   201b0:	mov	r6, r0
   201b4:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   201b8:	ldr	r3, [sp, #24]
   201bc:	mov	r0, r6
   201c0:	str	r3, [r7]
   201c4:	add	sp, sp, #180	; 0xb4
   201c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201cc:	mov	r3, #8
   201d0:	sub	r2, r4, r2
   201d4:	add	r1, sp, #80	; 0x50
   201d8:	str	r3, [sp]
   201dc:	add	r2, r2, #1
   201e0:	mvn	r3, #-2147483648	; 0x80000000
   201e4:	bl	22478 <__assert_fail@plt+0x10c58>
   201e8:	mov	r5, r0
   201ec:	ldm	r8, {r0, r1}
   201f0:	str	r5, [r6]
   201f4:	stm	r5, {r0, r1}
   201f8:	b	200dc <__assert_fail@plt+0xe8bc>
   201fc:	bl	117f0 <abort@plt>
   20200:	muleq	r3, r0, r1
   20204:	andeq	r7, r3, r8, lsr #5
   20208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2020c:	mov	r7, r1
   20210:	ldr	lr, [pc, #492]	; 20404 <__assert_fail@plt+0xebe4>
   20214:	mov	r8, r2
   20218:	mov	r4, r0
   2021c:	mov	fp, r3
   20220:	ldm	lr!, {r0, r1, r2, r3}
   20224:	sub	sp, sp, #100	; 0x64
   20228:	add	ip, sp, #48	; 0x30
   2022c:	mov	sl, #10
   20230:	stmia	ip!, {r0, r1, r2, r3}
   20234:	cmp	r8, #0
   20238:	cmpne	r7, #0
   2023c:	ldm	lr!, {r0, r1, r2, r3}
   20240:	str	sl, [sp, #48]	; 0x30
   20244:	stmia	ip!, {r0, r1, r2, r3}
   20248:	ldm	lr, {r0, r1, r2, r3}
   2024c:	stm	ip, {r0, r1, r2, r3}
   20250:	beq	20400 <__assert_fail@plt+0xebe0>
   20254:	str	r7, [sp, #88]	; 0x58
   20258:	str	r8, [sp, #92]	; 0x5c
   2025c:	bl	1167c <__errno_location@plt>
   20260:	ldr	r6, [pc, #416]	; 20408 <__assert_fail@plt+0xebe8>
   20264:	cmn	r4, #-2147483647	; 0x80000001
   20268:	ldr	r5, [r6]
   2026c:	mov	r9, r0
   20270:	movne	r0, #0
   20274:	moveq	r0, #1
   20278:	ldr	r3, [r9]
   2027c:	orrs	r0, r0, r4, lsr #31
   20280:	str	r3, [sp, #28]
   20284:	bne	20400 <__assert_fail@plt+0xebe0>
   20288:	ldr	r2, [r6, #4]
   2028c:	cmp	r4, r2
   20290:	movlt	r3, sl
   20294:	blt	20300 <__assert_fail@plt+0xeae0>
   20298:	add	r7, r6, #8
   2029c:	cmp	r5, r7
   202a0:	str	r2, [sp, #44]	; 0x2c
   202a4:	beq	203d0 <__assert_fail@plt+0xebb0>
   202a8:	mov	r3, #8
   202ac:	sub	r2, r4, r2
   202b0:	mov	r0, r5
   202b4:	str	r3, [sp]
   202b8:	add	r2, r2, #1
   202bc:	mvn	r3, #-2147483648	; 0x80000000
   202c0:	add	r1, sp, #44	; 0x2c
   202c4:	bl	22478 <__assert_fail@plt+0x10c58>
   202c8:	mov	r5, r0
   202cc:	str	r0, [r6]
   202d0:	ldr	r0, [r6, #4]
   202d4:	ldr	r2, [sp, #44]	; 0x2c
   202d8:	mov	r1, #0
   202dc:	sub	r2, r2, r0
   202e0:	add	r0, r5, r0, lsl #3
   202e4:	lsl	r2, r2, #3
   202e8:	bl	116ac <memset@plt>
   202ec:	ldr	r3, [sp, #48]	; 0x30
   202f0:	ldr	r7, [sp, #88]	; 0x58
   202f4:	ldr	r8, [sp, #92]	; 0x5c
   202f8:	ldr	r2, [sp, #44]	; 0x2c
   202fc:	str	r2, [r6, #4]
   20300:	add	r2, r5, r4, lsl #3
   20304:	mov	r1, r2
   20308:	str	r2, [sp, #32]
   2030c:	ldr	r2, [sp, #52]	; 0x34
   20310:	ldr	r6, [r1, #4]
   20314:	ldr	sl, [r5, r4, lsl #3]
   20318:	orr	r2, r2, #1
   2031c:	str	r3, [sp]
   20320:	add	r3, sp, #56	; 0x38
   20324:	str	r2, [sp, #36]	; 0x24
   20328:	str	r2, [sp, #4]
   2032c:	str	r3, [sp, #8]
   20330:	mov	r0, r6
   20334:	str	r8, [sp, #16]
   20338:	str	r7, [sp, #12]
   2033c:	mov	r1, sl
   20340:	mvn	r3, #0
   20344:	mov	r2, fp
   20348:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   2034c:	cmp	sl, r0
   20350:	bhi	203bc <__assert_fail@plt+0xeb9c>
   20354:	ldr	r3, [pc, #176]	; 2040c <__assert_fail@plt+0xebec>
   20358:	add	r7, r0, #1
   2035c:	cmp	r6, r3
   20360:	str	r7, [r5, r4, lsl #3]
   20364:	beq	20370 <__assert_fail@plt+0xeb50>
   20368:	mov	r0, r6
   2036c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20370:	mov	r0, r7
   20374:	bl	2225c <__assert_fail@plt+0x10a3c>
   20378:	ldr	r3, [sp, #32]
   2037c:	ldr	lr, [sp, #92]	; 0x5c
   20380:	ldr	ip, [sp, #88]	; 0x58
   20384:	ldr	r4, [sp, #36]	; 0x24
   20388:	mov	r2, fp
   2038c:	mov	r1, r7
   20390:	str	r0, [r3, #4]
   20394:	add	r3, sp, #56	; 0x38
   20398:	str	r3, [sp, #8]
   2039c:	ldr	r3, [sp, #48]	; 0x30
   203a0:	str	r4, [sp, #4]
   203a4:	str	r3, [sp]
   203a8:	str	lr, [sp, #16]
   203ac:	str	ip, [sp, #12]
   203b0:	mvn	r3, #0
   203b4:	mov	r6, r0
   203b8:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   203bc:	ldr	r3, [sp, #28]
   203c0:	mov	r0, r6
   203c4:	str	r3, [r9]
   203c8:	add	sp, sp, #100	; 0x64
   203cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203d0:	mov	r3, #8
   203d4:	sub	r2, r4, r2
   203d8:	str	r3, [sp]
   203dc:	add	r1, sp, #44	; 0x2c
   203e0:	add	r2, r2, #1
   203e4:	mvn	r3, #-2147483648	; 0x80000000
   203e8:	bl	22478 <__assert_fail@plt+0x10c58>
   203ec:	mov	r5, r0
   203f0:	ldm	r7, {r0, r1}
   203f4:	str	r5, [r6]
   203f8:	stm	r5, {r0, r1}
   203fc:	b	202d0 <__assert_fail@plt+0xeab0>
   20400:	bl	117f0 <abort@plt>
   20404:	andeq	r7, r3, r8, ror r2
   20408:	muleq	r3, r0, r1
   2040c:	andeq	r7, r3, r8, lsr #5
   20410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20414:	mov	r7, r1
   20418:	ldr	lr, [pc, #492]	; 2060c <__assert_fail@plt+0xedec>
   2041c:	mov	r8, r2
   20420:	mov	r4, r0
   20424:	mov	fp, r3
   20428:	ldm	lr!, {r0, r1, r2, r3}
   2042c:	sub	sp, sp, #100	; 0x64
   20430:	add	ip, sp, #48	; 0x30
   20434:	mov	sl, #10
   20438:	stmia	ip!, {r0, r1, r2, r3}
   2043c:	cmp	r8, #0
   20440:	cmpne	r7, #0
   20444:	ldm	lr!, {r0, r1, r2, r3}
   20448:	str	sl, [sp, #48]	; 0x30
   2044c:	stmia	ip!, {r0, r1, r2, r3}
   20450:	ldm	lr, {r0, r1, r2, r3}
   20454:	stm	ip, {r0, r1, r2, r3}
   20458:	beq	20608 <__assert_fail@plt+0xede8>
   2045c:	str	r7, [sp, #88]	; 0x58
   20460:	str	r8, [sp, #92]	; 0x5c
   20464:	bl	1167c <__errno_location@plt>
   20468:	ldr	r6, [pc, #416]	; 20610 <__assert_fail@plt+0xedf0>
   2046c:	cmn	r4, #-2147483647	; 0x80000001
   20470:	ldr	r5, [r6]
   20474:	mov	r9, r0
   20478:	movne	r0, #0
   2047c:	moveq	r0, #1
   20480:	ldr	r3, [r9]
   20484:	orrs	r0, r0, r4, lsr #31
   20488:	str	r3, [sp, #28]
   2048c:	bne	20608 <__assert_fail@plt+0xede8>
   20490:	ldr	r2, [r6, #4]
   20494:	cmp	r4, r2
   20498:	movlt	r3, sl
   2049c:	blt	20508 <__assert_fail@plt+0xece8>
   204a0:	add	r7, r6, #8
   204a4:	cmp	r5, r7
   204a8:	str	r2, [sp, #44]	; 0x2c
   204ac:	beq	205d8 <__assert_fail@plt+0xedb8>
   204b0:	mov	r3, #8
   204b4:	sub	r2, r4, r2
   204b8:	mov	r0, r5
   204bc:	str	r3, [sp]
   204c0:	add	r2, r2, #1
   204c4:	mvn	r3, #-2147483648	; 0x80000000
   204c8:	add	r1, sp, #44	; 0x2c
   204cc:	bl	22478 <__assert_fail@plt+0x10c58>
   204d0:	mov	r5, r0
   204d4:	str	r0, [r6]
   204d8:	ldr	r0, [r6, #4]
   204dc:	ldr	r2, [sp, #44]	; 0x2c
   204e0:	mov	r1, #0
   204e4:	sub	r2, r2, r0
   204e8:	add	r0, r5, r0, lsl #3
   204ec:	lsl	r2, r2, #3
   204f0:	bl	116ac <memset@plt>
   204f4:	ldr	r3, [sp, #48]	; 0x30
   204f8:	ldr	r7, [sp, #88]	; 0x58
   204fc:	ldr	r8, [sp, #92]	; 0x5c
   20500:	ldr	r2, [sp, #44]	; 0x2c
   20504:	str	r2, [r6, #4]
   20508:	add	r2, r5, r4, lsl #3
   2050c:	mov	r1, r2
   20510:	str	r2, [sp, #32]
   20514:	ldr	r2, [sp, #52]	; 0x34
   20518:	ldr	r6, [r1, #4]
   2051c:	ldr	sl, [r5, r4, lsl #3]
   20520:	orr	r2, r2, #1
   20524:	str	r3, [sp]
   20528:	add	r3, sp, #56	; 0x38
   2052c:	str	r2, [sp, #36]	; 0x24
   20530:	str	r2, [sp, #4]
   20534:	str	r3, [sp, #8]
   20538:	mov	r0, r6
   2053c:	str	r8, [sp, #16]
   20540:	str	r7, [sp, #12]
   20544:	mov	r1, sl
   20548:	ldr	r3, [sp, #136]	; 0x88
   2054c:	mov	r2, fp
   20550:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20554:	cmp	sl, r0
   20558:	bhi	205c4 <__assert_fail@plt+0xeda4>
   2055c:	ldr	r3, [pc, #176]	; 20614 <__assert_fail@plt+0xedf4>
   20560:	add	r7, r0, #1
   20564:	cmp	r6, r3
   20568:	str	r7, [r5, r4, lsl #3]
   2056c:	beq	20578 <__assert_fail@plt+0xed58>
   20570:	mov	r0, r6
   20574:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20578:	mov	r0, r7
   2057c:	bl	2225c <__assert_fail@plt+0x10a3c>
   20580:	ldr	r3, [sp, #32]
   20584:	ldr	lr, [sp, #92]	; 0x5c
   20588:	ldr	ip, [sp, #88]	; 0x58
   2058c:	ldr	r4, [sp, #36]	; 0x24
   20590:	mov	r2, fp
   20594:	mov	r1, r7
   20598:	str	r0, [r3, #4]
   2059c:	add	r3, sp, #56	; 0x38
   205a0:	str	r3, [sp, #8]
   205a4:	ldr	r3, [sp, #48]	; 0x30
   205a8:	str	r4, [sp, #4]
   205ac:	str	r3, [sp]
   205b0:	str	lr, [sp, #16]
   205b4:	str	ip, [sp, #12]
   205b8:	ldr	r3, [sp, #136]	; 0x88
   205bc:	mov	r6, r0
   205c0:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   205c4:	ldr	r3, [sp, #28]
   205c8:	mov	r0, r6
   205cc:	str	r3, [r9]
   205d0:	add	sp, sp, #100	; 0x64
   205d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205d8:	mov	r3, #8
   205dc:	sub	r2, r4, r2
   205e0:	str	r3, [sp]
   205e4:	add	r1, sp, #44	; 0x2c
   205e8:	add	r2, r2, #1
   205ec:	mvn	r3, #-2147483648	; 0x80000000
   205f0:	bl	22478 <__assert_fail@plt+0x10c58>
   205f4:	mov	r5, r0
   205f8:	ldm	r7, {r0, r1}
   205fc:	str	r5, [r6]
   20600:	stm	r5, {r0, r1}
   20604:	b	204d8 <__assert_fail@plt+0xecb8>
   20608:	bl	117f0 <abort@plt>
   2060c:	andeq	r7, r3, r8, ror r2
   20610:	muleq	r3, r0, r1
   20614:	andeq	r7, r3, r8, lsr #5
   20618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2061c:	mov	r5, r0
   20620:	ldr	lr, [pc, #452]	; 207ec <__assert_fail@plt+0xefcc>
   20624:	mov	r6, r1
   20628:	mov	sl, r2
   2062c:	ldm	lr!, {r0, r1, r2, r3}
   20630:	sub	sp, sp, #92	; 0x5c
   20634:	add	ip, sp, #40	; 0x28
   20638:	cmp	r6, #0
   2063c:	cmpne	r5, #0
   20640:	stmia	ip!, {r0, r1, r2, r3}
   20644:	mov	r9, #10
   20648:	ldm	lr!, {r0, r1, r2, r3}
   2064c:	moveq	fp, #1
   20650:	movne	fp, #0
   20654:	str	r9, [sp, #40]	; 0x28
   20658:	stmia	ip!, {r0, r1, r2, r3}
   2065c:	ldm	lr, {r0, r1, r2, r3}
   20660:	stm	ip, {r0, r1, r2, r3}
   20664:	beq	207e8 <__assert_fail@plt+0xefc8>
   20668:	str	r5, [sp, #80]	; 0x50
   2066c:	str	r6, [sp, #84]	; 0x54
   20670:	bl	1167c <__errno_location@plt>
   20674:	ldr	r7, [pc, #372]	; 207f0 <__assert_fail@plt+0xefd0>
   20678:	ldr	r2, [r7, #4]
   2067c:	ldr	r4, [r7]
   20680:	cmp	r2, #0
   20684:	ldr	r3, [r0]
   20688:	mov	r8, r0
   2068c:	str	r3, [sp, #24]
   20690:	movgt	r3, r9
   20694:	bgt	206fc <__assert_fail@plt+0xeedc>
   20698:	add	r5, r7, #8
   2069c:	cmp	r4, r5
   206a0:	str	r2, [sp, #36]	; 0x24
   206a4:	beq	207b8 <__assert_fail@plt+0xef98>
   206a8:	mov	r3, #8
   206ac:	mov	r0, r4
   206b0:	str	r3, [sp]
   206b4:	rsb	r2, r2, #1
   206b8:	mvn	r3, #-2147483648	; 0x80000000
   206bc:	add	r1, sp, #36	; 0x24
   206c0:	bl	22478 <__assert_fail@plt+0x10c58>
   206c4:	mov	r4, r0
   206c8:	str	r0, [r7]
   206cc:	ldr	r0, [r7, #4]
   206d0:	ldr	r2, [sp, #36]	; 0x24
   206d4:	mov	r1, #0
   206d8:	sub	r2, r2, r0
   206dc:	add	r0, r4, r0, lsl #3
   206e0:	lsl	r2, r2, #3
   206e4:	bl	116ac <memset@plt>
   206e8:	ldr	r3, [sp, #40]	; 0x28
   206ec:	ldr	r5, [sp, #80]	; 0x50
   206f0:	ldr	r6, [sp, #84]	; 0x54
   206f4:	ldr	r2, [sp, #36]	; 0x24
   206f8:	str	r2, [r7, #4]
   206fc:	ldr	r2, [sp, #44]	; 0x2c
   20700:	ldr	r9, [r4]
   20704:	ldr	r7, [r4, #4]
   20708:	orr	r2, r2, #1
   2070c:	add	fp, sp, #48	; 0x30
   20710:	str	r2, [sp, #28]
   20714:	str	r2, [sp, #4]
   20718:	str	r3, [sp]
   2071c:	str	r6, [sp, #16]
   20720:	str	r5, [sp, #12]
   20724:	mov	r1, r9
   20728:	mov	r0, r7
   2072c:	str	fp, [sp, #8]
   20730:	mvn	r3, #0
   20734:	mov	r2, sl
   20738:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   2073c:	cmp	r9, r0
   20740:	bhi	207a4 <__assert_fail@plt+0xef84>
   20744:	ldr	r3, [pc, #168]	; 207f4 <__assert_fail@plt+0xefd4>
   20748:	add	r5, r0, #1
   2074c:	cmp	r7, r3
   20750:	str	r5, [r4]
   20754:	beq	20760 <__assert_fail@plt+0xef40>
   20758:	mov	r0, r7
   2075c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20760:	mov	r0, r5
   20764:	bl	2225c <__assert_fail@plt+0x10a3c>
   20768:	ldr	lr, [sp, #84]	; 0x54
   2076c:	ldr	r3, [sp, #40]	; 0x28
   20770:	ldr	ip, [sp, #80]	; 0x50
   20774:	mov	r2, sl
   20778:	mov	r1, r5
   2077c:	str	r0, [r4, #4]
   20780:	ldr	r4, [sp, #28]
   20784:	str	r3, [sp]
   20788:	str	fp, [sp, #8]
   2078c:	str	r4, [sp, #4]
   20790:	str	lr, [sp, #16]
   20794:	str	ip, [sp, #12]
   20798:	mvn	r3, #0
   2079c:	mov	r7, r0
   207a0:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   207a4:	ldr	r3, [sp, #24]
   207a8:	mov	r0, r7
   207ac:	str	r3, [r8]
   207b0:	add	sp, sp, #92	; 0x5c
   207b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207b8:	mov	r3, #8
   207bc:	str	r3, [sp]
   207c0:	add	r1, sp, #36	; 0x24
   207c4:	rsb	r2, r2, #1
   207c8:	mov	r0, fp
   207cc:	mvn	r3, #-2147483648	; 0x80000000
   207d0:	bl	22478 <__assert_fail@plt+0x10c58>
   207d4:	mov	r4, r0
   207d8:	ldm	r5, {r0, r1}
   207dc:	str	r4, [r7]
   207e0:	stm	r4, {r0, r1}
   207e4:	b	206cc <__assert_fail@plt+0xeeac>
   207e8:	bl	117f0 <abort@plt>
   207ec:	andeq	r7, r3, r8, ror r2
   207f0:	muleq	r3, r0, r1
   207f4:	andeq	r7, r3, r8, lsr #5
   207f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207fc:	mov	r5, r0
   20800:	ldr	lr, [pc, #464]	; 209d8 <__assert_fail@plt+0xf1b8>
   20804:	mov	r6, r1
   20808:	mov	sl, r2
   2080c:	mov	fp, r3
   20810:	ldm	lr!, {r0, r1, r2, r3}
   20814:	sub	sp, sp, #92	; 0x5c
   20818:	add	ip, sp, #40	; 0x28
   2081c:	cmp	r6, #0
   20820:	cmpne	r5, #0
   20824:	stmia	ip!, {r0, r1, r2, r3}
   20828:	moveq	r4, #1
   2082c:	ldm	lr!, {r0, r1, r2, r3}
   20830:	movne	r4, #0
   20834:	mov	r9, #10
   20838:	str	r4, [sp, #28]
   2083c:	stmia	ip!, {r0, r1, r2, r3}
   20840:	ldm	lr, {r0, r1, r2, r3}
   20844:	str	r9, [sp, #40]	; 0x28
   20848:	stm	ip, {r0, r1, r2, r3}
   2084c:	beq	209d4 <__assert_fail@plt+0xf1b4>
   20850:	str	r5, [sp, #80]	; 0x50
   20854:	str	r6, [sp, #84]	; 0x54
   20858:	bl	1167c <__errno_location@plt>
   2085c:	ldr	r7, [pc, #376]	; 209dc <__assert_fail@plt+0xf1bc>
   20860:	ldr	r2, [r7, #4]
   20864:	ldr	r4, [r7]
   20868:	cmp	r2, #0
   2086c:	ldr	r3, [r0]
   20870:	mov	r8, r0
   20874:	str	r3, [sp, #24]
   20878:	movgt	r3, r9
   2087c:	bgt	208e4 <__assert_fail@plt+0xf0c4>
   20880:	add	r5, r7, #8
   20884:	cmp	r4, r5
   20888:	str	r2, [sp, #36]	; 0x24
   2088c:	beq	209a4 <__assert_fail@plt+0xf184>
   20890:	mov	r3, #8
   20894:	mov	r0, r4
   20898:	str	r3, [sp]
   2089c:	rsb	r2, r2, #1
   208a0:	mvn	r3, #-2147483648	; 0x80000000
   208a4:	add	r1, sp, #36	; 0x24
   208a8:	bl	22478 <__assert_fail@plt+0x10c58>
   208ac:	mov	r4, r0
   208b0:	str	r0, [r7]
   208b4:	ldr	r0, [r7, #4]
   208b8:	ldr	r2, [sp, #36]	; 0x24
   208bc:	mov	r1, #0
   208c0:	sub	r2, r2, r0
   208c4:	add	r0, r4, r0, lsl #3
   208c8:	lsl	r2, r2, #3
   208cc:	bl	116ac <memset@plt>
   208d0:	ldr	r3, [sp, #40]	; 0x28
   208d4:	ldr	r5, [sp, #80]	; 0x50
   208d8:	ldr	r6, [sp, #84]	; 0x54
   208dc:	ldr	r2, [sp, #36]	; 0x24
   208e0:	str	r2, [r7, #4]
   208e4:	ldr	r2, [sp, #44]	; 0x2c
   208e8:	ldr	r9, [r4]
   208ec:	ldr	r7, [r4, #4]
   208f0:	orr	r2, r2, #1
   208f4:	str	r3, [sp]
   208f8:	add	r3, sp, #48	; 0x30
   208fc:	str	r2, [sp, #28]
   20900:	str	r2, [sp, #4]
   20904:	str	r3, [sp, #8]
   20908:	str	r6, [sp, #16]
   2090c:	str	r5, [sp, #12]
   20910:	mov	r1, r9
   20914:	mov	r0, r7
   20918:	mov	r3, fp
   2091c:	mov	r2, sl
   20920:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20924:	cmp	r9, r0
   20928:	bhi	20990 <__assert_fail@plt+0xf170>
   2092c:	ldr	r3, [pc, #172]	; 209e0 <__assert_fail@plt+0xf1c0>
   20930:	add	r5, r0, #1
   20934:	cmp	r7, r3
   20938:	str	r5, [r4]
   2093c:	beq	20948 <__assert_fail@plt+0xf128>
   20940:	mov	r0, r7
   20944:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20948:	mov	r0, r5
   2094c:	bl	2225c <__assert_fail@plt+0x10a3c>
   20950:	add	lr, sp, #48	; 0x30
   20954:	ldr	ip, [sp, #84]	; 0x54
   20958:	mov	r1, r5
   2095c:	ldr	r5, [sp, #28]
   20960:	mov	r3, fp
   20964:	mov	r2, sl
   20968:	str	r0, [r4, #4]
   2096c:	ldr	r4, [sp, #80]	; 0x50
   20970:	str	lr, [sp, #8]
   20974:	ldr	lr, [sp, #40]	; 0x28
   20978:	str	r5, [sp, #4]
   2097c:	str	ip, [sp, #16]
   20980:	str	r4, [sp, #12]
   20984:	str	lr, [sp]
   20988:	mov	r7, r0
   2098c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20990:	ldr	r3, [sp, #24]
   20994:	mov	r0, r7
   20998:	str	r3, [r8]
   2099c:	add	sp, sp, #92	; 0x5c
   209a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209a4:	mov	r3, #8
   209a8:	str	r3, [sp]
   209ac:	add	r1, sp, #36	; 0x24
   209b0:	rsb	r2, r2, #1
   209b4:	ldr	r0, [sp, #28]
   209b8:	mvn	r3, #-2147483648	; 0x80000000
   209bc:	bl	22478 <__assert_fail@plt+0x10c58>
   209c0:	mov	r4, r0
   209c4:	ldm	r5, {r0, r1}
   209c8:	str	r4, [r7]
   209cc:	stm	r4, {r0, r1}
   209d0:	b	208b4 <__assert_fail@plt+0xf094>
   209d4:	bl	117f0 <abort@plt>
   209d8:	andeq	r7, r3, r8, ror r2
   209dc:	muleq	r3, r0, r1
   209e0:	andeq	r7, r3, r8, lsr #5
   209e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209e8:	sub	sp, sp, #52	; 0x34
   209ec:	mov	r5, r0
   209f0:	mov	sl, r1
   209f4:	mov	fp, r2
   209f8:	bl	1167c <__errno_location@plt>
   209fc:	ldr	r4, [pc, #404]	; 20b98 <__assert_fail@plt+0xf378>
   20a00:	cmn	r5, #-2147483647	; 0x80000001
   20a04:	ldr	r6, [r4]
   20a08:	mov	r8, r0
   20a0c:	movne	r0, #0
   20a10:	moveq	r0, #1
   20a14:	ldr	r3, [r8]
   20a18:	orrs	r0, r0, r5, lsr #31
   20a1c:	str	r3, [sp, #28]
   20a20:	bne	20b94 <__assert_fail@plt+0xf374>
   20a24:	ldr	r2, [r4, #4]
   20a28:	cmp	r5, r2
   20a2c:	blt	20a8c <__assert_fail@plt+0xf26c>
   20a30:	add	r7, r4, #8
   20a34:	cmp	r6, r7
   20a38:	str	r2, [sp, #44]	; 0x2c
   20a3c:	beq	20b64 <__assert_fail@plt+0xf344>
   20a40:	mov	r3, #8
   20a44:	sub	r2, r5, r2
   20a48:	mov	r0, r6
   20a4c:	str	r3, [sp]
   20a50:	add	r2, r2, #1
   20a54:	mvn	r3, #-2147483648	; 0x80000000
   20a58:	add	r1, sp, #44	; 0x2c
   20a5c:	bl	22478 <__assert_fail@plt+0x10c58>
   20a60:	mov	r6, r0
   20a64:	str	r0, [r4]
   20a68:	ldr	r0, [r4, #4]
   20a6c:	ldr	r2, [sp, #44]	; 0x2c
   20a70:	mov	r1, #0
   20a74:	sub	r2, r2, r0
   20a78:	add	r0, r6, r0, lsl #3
   20a7c:	lsl	r2, r2, #3
   20a80:	bl	116ac <memset@plt>
   20a84:	ldr	r3, [sp, #44]	; 0x2c
   20a88:	str	r3, [r4, #4]
   20a8c:	ldr	r2, [r4, #56]	; 0x38
   20a90:	add	r3, r6, r5, lsl #3
   20a94:	ldr	r1, [r4, #20]
   20a98:	ldr	r7, [r3, #4]
   20a9c:	ldr	r9, [r6, r5, lsl #3]
   20aa0:	ldr	ip, [r4, #60]	; 0x3c
   20aa4:	str	r3, [sp, #32]
   20aa8:	ldr	r3, [r4, #16]
   20aac:	str	r2, [sp, #12]
   20ab0:	ldr	r2, [pc, #228]	; 20b9c <__assert_fail@plt+0xf37c>
   20ab4:	orr	r1, r1, #1
   20ab8:	str	r1, [sp, #36]	; 0x24
   20abc:	str	r1, [sp, #4]
   20ac0:	str	r2, [sp, #8]
   20ac4:	str	r3, [sp]
   20ac8:	mov	r0, r7
   20acc:	mov	r1, r9
   20ad0:	str	ip, [sp, #16]
   20ad4:	mov	r3, fp
   20ad8:	mov	r2, sl
   20adc:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20ae0:	cmp	r9, r0
   20ae4:	bhi	20b50 <__assert_fail@plt+0xf330>
   20ae8:	ldr	r3, [pc, #176]	; 20ba0 <__assert_fail@plt+0xf380>
   20aec:	add	r9, r0, #1
   20af0:	cmp	r7, r3
   20af4:	str	r9, [r6, r5, lsl #3]
   20af8:	beq	20b04 <__assert_fail@plt+0xf2e4>
   20afc:	mov	r0, r7
   20b00:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20b04:	mov	r0, r9
   20b08:	bl	2225c <__assert_fail@plt+0x10a3c>
   20b0c:	ldr	ip, [sp, #32]
   20b10:	ldr	lr, [r4, #60]	; 0x3c
   20b14:	ldr	r5, [r4, #56]	; 0x38
   20b18:	mov	r3, fp
   20b1c:	mov	r2, sl
   20b20:	mov	r1, r9
   20b24:	str	r0, [ip, #4]
   20b28:	ldr	ip, [r4, #16]
   20b2c:	ldr	r4, [pc, #104]	; 20b9c <__assert_fail@plt+0xf37c>
   20b30:	str	lr, [sp, #16]
   20b34:	str	r4, [sp, #8]
   20b38:	ldr	r4, [sp, #36]	; 0x24
   20b3c:	str	r5, [sp, #12]
   20b40:	str	r4, [sp, #4]
   20b44:	str	ip, [sp]
   20b48:	mov	r7, r0
   20b4c:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20b50:	ldr	r3, [sp, #28]
   20b54:	mov	r0, r7
   20b58:	str	r3, [r8]
   20b5c:	add	sp, sp, #52	; 0x34
   20b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b64:	mov	r3, #8
   20b68:	sub	r2, r5, r2
   20b6c:	str	r3, [sp]
   20b70:	add	r1, sp, #44	; 0x2c
   20b74:	add	r2, r2, #1
   20b78:	mvn	r3, #-2147483648	; 0x80000000
   20b7c:	bl	22478 <__assert_fail@plt+0x10c58>
   20b80:	mov	r6, r0
   20b84:	ldm	r7, {r0, r1}
   20b88:	str	r6, [r4]
   20b8c:	stm	r6, {r0, r1}
   20b90:	b	20a68 <__assert_fail@plt+0xf248>
   20b94:	bl	117f0 <abort@plt>
   20b98:	muleq	r3, r0, r1
   20b9c:	andeq	r7, r3, r8, lsr #3
   20ba0:	andeq	r7, r3, r8, lsr #5
   20ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ba8:	sub	sp, sp, #44	; 0x2c
   20bac:	mov	r9, r0
   20bb0:	mov	sl, r1
   20bb4:	bl	1167c <__errno_location@plt>
   20bb8:	ldr	r4, [pc, #360]	; 20d28 <__assert_fail@plt+0xf508>
   20bbc:	ldr	r2, [r4, #4]
   20bc0:	ldr	r5, [r4]
   20bc4:	cmp	r2, #0
   20bc8:	ldr	r3, [r0]
   20bcc:	mov	r7, r0
   20bd0:	str	r3, [sp, #24]
   20bd4:	bgt	20c30 <__assert_fail@plt+0xf410>
   20bd8:	add	r6, r4, #8
   20bdc:	cmp	r5, r6
   20be0:	str	r2, [sp, #36]	; 0x24
   20be4:	beq	20cf8 <__assert_fail@plt+0xf4d8>
   20be8:	mov	r3, #8
   20bec:	mov	r0, r5
   20bf0:	str	r3, [sp]
   20bf4:	rsb	r2, r2, #1
   20bf8:	mvn	r3, #-2147483648	; 0x80000000
   20bfc:	add	r1, sp, #36	; 0x24
   20c00:	bl	22478 <__assert_fail@plt+0x10c58>
   20c04:	mov	r5, r0
   20c08:	str	r0, [r4]
   20c0c:	ldr	r0, [r4, #4]
   20c10:	ldr	r2, [sp, #36]	; 0x24
   20c14:	mov	r1, #0
   20c18:	sub	r2, r2, r0
   20c1c:	add	r0, r5, r0, lsl #3
   20c20:	lsl	r2, r2, #3
   20c24:	bl	116ac <memset@plt>
   20c28:	ldr	r3, [sp, #36]	; 0x24
   20c2c:	str	r3, [r4, #4]
   20c30:	ldr	r1, [r4, #20]
   20c34:	ldr	r8, [r5]
   20c38:	ldr	r6, [r5, #4]
   20c3c:	ldr	r2, [r4, #56]	; 0x38
   20c40:	ldr	r3, [r4, #16]
   20c44:	ldr	ip, [r4, #60]	; 0x3c
   20c48:	ldr	fp, [pc, #220]	; 20d2c <__assert_fail@plt+0xf50c>
   20c4c:	orr	r1, r1, #1
   20c50:	str	r1, [sp, #28]
   20c54:	str	r1, [sp, #4]
   20c58:	str	r2, [sp, #12]
   20c5c:	str	r3, [sp]
   20c60:	mov	r1, r8
   20c64:	mov	r0, r6
   20c68:	str	ip, [sp, #16]
   20c6c:	str	fp, [sp, #8]
   20c70:	mov	r3, sl
   20c74:	mov	r2, r9
   20c78:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20c7c:	cmp	r8, r0
   20c80:	bhi	20ce4 <__assert_fail@plt+0xf4c4>
   20c84:	ldr	r3, [pc, #164]	; 20d30 <__assert_fail@plt+0xf510>
   20c88:	add	r8, r0, #1
   20c8c:	cmp	r6, r3
   20c90:	str	r8, [r5]
   20c94:	beq	20ca0 <__assert_fail@plt+0xf480>
   20c98:	mov	r0, r6
   20c9c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20ca0:	mov	r0, r8
   20ca4:	bl	2225c <__assert_fail@plt+0x10a3c>
   20ca8:	ldr	lr, [r4, #60]	; 0x3c
   20cac:	ldr	ip, [r4, #16]
   20cb0:	mov	r3, sl
   20cb4:	mov	r2, r9
   20cb8:	mov	r1, r8
   20cbc:	str	r0, [r5, #4]
   20cc0:	ldr	r5, [r4, #56]	; 0x38
   20cc4:	ldr	r4, [sp, #28]
   20cc8:	str	fp, [sp, #8]
   20ccc:	str	r4, [sp, #4]
   20cd0:	str	lr, [sp, #16]
   20cd4:	str	r5, [sp, #12]
   20cd8:	str	ip, [sp]
   20cdc:	mov	r6, r0
   20ce0:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20ce4:	ldr	r3, [sp, #24]
   20ce8:	mov	r0, r6
   20cec:	str	r3, [r7]
   20cf0:	add	sp, sp, #44	; 0x2c
   20cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cf8:	mov	r3, #8
   20cfc:	str	r3, [sp]
   20d00:	add	r1, sp, #36	; 0x24
   20d04:	rsb	r2, r2, #1
   20d08:	mvn	r3, #-2147483648	; 0x80000000
   20d0c:	mov	r0, #0
   20d10:	bl	22478 <__assert_fail@plt+0x10c58>
   20d14:	mov	r5, r0
   20d18:	ldm	r6, {r0, r1}
   20d1c:	str	r5, [r4]
   20d20:	stm	r5, {r0, r1}
   20d24:	b	20c0c <__assert_fail@plt+0xf3ec>
   20d28:	muleq	r3, r0, r1
   20d2c:	andeq	r7, r3, r8, lsr #3
   20d30:	andeq	r7, r3, r8, lsr #5
   20d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d38:	sub	sp, sp, #44	; 0x2c
   20d3c:	mov	r5, r0
   20d40:	mov	sl, r1
   20d44:	bl	1167c <__errno_location@plt>
   20d48:	ldr	r4, [pc, #396]	; 20edc <__assert_fail@plt+0xf6bc>
   20d4c:	cmn	r5, #-2147483647	; 0x80000001
   20d50:	ldr	r6, [r4]
   20d54:	mov	r8, r0
   20d58:	movne	r0, #0
   20d5c:	moveq	r0, #1
   20d60:	ldr	r3, [r8]
   20d64:	orrs	r0, r0, r5, lsr #31
   20d68:	str	r3, [sp, #24]
   20d6c:	bne	20ed8 <__assert_fail@plt+0xf6b8>
   20d70:	ldr	r2, [r4, #4]
   20d74:	cmp	r5, r2
   20d78:	blt	20dd8 <__assert_fail@plt+0xf5b8>
   20d7c:	add	r7, r4, #8
   20d80:	cmp	r6, r7
   20d84:	str	r2, [sp, #36]	; 0x24
   20d88:	beq	20ea8 <__assert_fail@plt+0xf688>
   20d8c:	mov	r3, #8
   20d90:	sub	r2, r5, r2
   20d94:	mov	r0, r6
   20d98:	str	r3, [sp]
   20d9c:	add	r2, r2, #1
   20da0:	mvn	r3, #-2147483648	; 0x80000000
   20da4:	add	r1, sp, #36	; 0x24
   20da8:	bl	22478 <__assert_fail@plt+0x10c58>
   20dac:	mov	r6, r0
   20db0:	str	r0, [r4]
   20db4:	ldr	r0, [r4, #4]
   20db8:	ldr	r2, [sp, #36]	; 0x24
   20dbc:	mov	r1, #0
   20dc0:	sub	r2, r2, r0
   20dc4:	add	r0, r6, r0, lsl #3
   20dc8:	lsl	r2, r2, #3
   20dcc:	bl	116ac <memset@plt>
   20dd0:	ldr	r3, [sp, #36]	; 0x24
   20dd4:	str	r3, [r4, #4]
   20dd8:	ldr	r2, [r4, #56]	; 0x38
   20ddc:	add	fp, r6, r5, lsl #3
   20de0:	ldr	r1, [r4, #20]
   20de4:	ldr	r9, [r6, r5, lsl #3]
   20de8:	ldr	r7, [fp, #4]
   20dec:	ldr	r3, [r4, #16]
   20df0:	ldr	ip, [r4, #60]	; 0x3c
   20df4:	str	r2, [sp, #12]
   20df8:	ldr	r2, [pc, #224]	; 20ee0 <__assert_fail@plt+0xf6c0>
   20dfc:	orr	r1, r1, #1
   20e00:	str	r1, [sp, #28]
   20e04:	str	r1, [sp, #4]
   20e08:	str	r2, [sp, #8]
   20e0c:	str	r3, [sp]
   20e10:	mov	r0, r7
   20e14:	mov	r1, r9
   20e18:	str	ip, [sp, #16]
   20e1c:	mvn	r3, #0
   20e20:	mov	r2, sl
   20e24:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20e28:	cmp	r9, r0
   20e2c:	bhi	20e94 <__assert_fail@plt+0xf674>
   20e30:	ldr	r3, [pc, #172]	; 20ee4 <__assert_fail@plt+0xf6c4>
   20e34:	add	r9, r0, #1
   20e38:	cmp	r7, r3
   20e3c:	str	r9, [r6, r5, lsl #3]
   20e40:	beq	20e4c <__assert_fail@plt+0xf62c>
   20e44:	mov	r0, r7
   20e48:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20e4c:	mov	r0, r9
   20e50:	bl	2225c <__assert_fail@plt+0x10a3c>
   20e54:	ldr	ip, [r4, #60]	; 0x3c
   20e58:	ldr	r3, [r4, #16]
   20e5c:	ldr	lr, [r4, #56]	; 0x38
   20e60:	ldr	r4, [pc, #120]	; 20ee0 <__assert_fail@plt+0xf6c0>
   20e64:	mov	r2, sl
   20e68:	mov	r1, r9
   20e6c:	str	r0, [fp, #4]
   20e70:	str	r4, [sp, #8]
   20e74:	ldr	r4, [sp, #28]
   20e78:	str	r3, [sp]
   20e7c:	str	r4, [sp, #4]
   20e80:	str	ip, [sp, #16]
   20e84:	str	lr, [sp, #12]
   20e88:	mvn	r3, #0
   20e8c:	mov	r7, r0
   20e90:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20e94:	ldr	r3, [sp, #24]
   20e98:	mov	r0, r7
   20e9c:	str	r3, [r8]
   20ea0:	add	sp, sp, #44	; 0x2c
   20ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ea8:	mov	r3, #8
   20eac:	sub	r2, r5, r2
   20eb0:	str	r3, [sp]
   20eb4:	add	r1, sp, #36	; 0x24
   20eb8:	add	r2, r2, #1
   20ebc:	mvn	r3, #-2147483648	; 0x80000000
   20ec0:	bl	22478 <__assert_fail@plt+0x10c58>
   20ec4:	mov	r6, r0
   20ec8:	ldm	r7, {r0, r1}
   20ecc:	str	r6, [r4]
   20ed0:	stm	r6, {r0, r1}
   20ed4:	b	20db4 <__assert_fail@plt+0xf594>
   20ed8:	bl	117f0 <abort@plt>
   20edc:	muleq	r3, r0, r1
   20ee0:	andeq	r7, r3, r8, lsr #3
   20ee4:	andeq	r7, r3, r8, lsr #5
   20ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20eec:	sub	sp, sp, #44	; 0x2c
   20ef0:	mov	sl, r0
   20ef4:	bl	1167c <__errno_location@plt>
   20ef8:	ldr	r4, [pc, #348]	; 2105c <__assert_fail@plt+0xf83c>
   20efc:	ldr	r2, [r4, #4]
   20f00:	ldr	r5, [r4]
   20f04:	cmp	r2, #0
   20f08:	ldr	r3, [r0]
   20f0c:	mov	r8, r0
   20f10:	str	r3, [sp, #28]
   20f14:	bgt	20f70 <__assert_fail@plt+0xf750>
   20f18:	add	r6, r4, #8
   20f1c:	cmp	r5, r6
   20f20:	str	r2, [sp, #36]	; 0x24
   20f24:	beq	2102c <__assert_fail@plt+0xf80c>
   20f28:	mov	r3, #8
   20f2c:	mov	r0, r5
   20f30:	str	r3, [sp]
   20f34:	rsb	r2, r2, #1
   20f38:	mvn	r3, #-2147483648	; 0x80000000
   20f3c:	add	r1, sp, #36	; 0x24
   20f40:	bl	22478 <__assert_fail@plt+0x10c58>
   20f44:	mov	r5, r0
   20f48:	str	r0, [r4]
   20f4c:	ldr	r0, [r4, #4]
   20f50:	ldr	r2, [sp, #36]	; 0x24
   20f54:	mov	r1, #0
   20f58:	sub	r2, r2, r0
   20f5c:	add	r0, r5, r0, lsl #3
   20f60:	lsl	r2, r2, #3
   20f64:	bl	116ac <memset@plt>
   20f68:	ldr	r3, [sp, #36]	; 0x24
   20f6c:	str	r3, [r4, #4]
   20f70:	ldr	r7, [r4, #20]
   20f74:	ldr	r9, [r5]
   20f78:	ldr	r6, [r5, #4]
   20f7c:	ldr	r2, [r4, #56]	; 0x38
   20f80:	ldr	r3, [r4, #16]
   20f84:	ldr	ip, [r4, #60]	; 0x3c
   20f88:	ldr	fp, [pc, #208]	; 21060 <__assert_fail@plt+0xf840>
   20f8c:	orr	r7, r7, #1
   20f90:	str	r2, [sp, #12]
   20f94:	str	r3, [sp]
   20f98:	str	r7, [sp, #4]
   20f9c:	mov	r1, r9
   20fa0:	mov	r0, r6
   20fa4:	str	ip, [sp, #16]
   20fa8:	str	fp, [sp, #8]
   20fac:	mvn	r3, #0
   20fb0:	mov	r2, sl
   20fb4:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   20fb8:	cmp	r9, r0
   20fbc:	bhi	21018 <__assert_fail@plt+0xf7f8>
   20fc0:	ldr	r3, [pc, #156]	; 21064 <__assert_fail@plt+0xf844>
   20fc4:	add	r9, r0, #1
   20fc8:	cmp	r6, r3
   20fcc:	str	r9, [r5]
   20fd0:	beq	20fdc <__assert_fail@plt+0xf7bc>
   20fd4:	mov	r0, r6
   20fd8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   20fdc:	mov	r0, r9
   20fe0:	bl	2225c <__assert_fail@plt+0x10a3c>
   20fe4:	ldr	ip, [r4, #60]	; 0x3c
   20fe8:	ldr	r3, [r4, #16]
   20fec:	ldr	lr, [r4, #56]	; 0x38
   20ff0:	mov	r2, sl
   20ff4:	mov	r1, r9
   20ff8:	str	r0, [r5, #4]
   20ffc:	str	r3, [sp]
   21000:	stmib	sp, {r7, fp}
   21004:	str	ip, [sp, #16]
   21008:	str	lr, [sp, #12]
   2100c:	mvn	r3, #0
   21010:	mov	r6, r0
   21014:	bl	1d1f0 <__assert_fail@plt+0xb9d0>
   21018:	ldr	r3, [sp, #28]
   2101c:	mov	r0, r6
   21020:	str	r3, [r8]
   21024:	add	sp, sp, #44	; 0x2c
   21028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2102c:	mov	r3, #8
   21030:	str	r3, [sp]
   21034:	add	r1, sp, #36	; 0x24
   21038:	rsb	r2, r2, #1
   2103c:	mvn	r3, #-2147483648	; 0x80000000
   21040:	mov	r0, #0
   21044:	bl	22478 <__assert_fail@plt+0x10c58>
   21048:	mov	r5, r0
   2104c:	ldm	r6, {r0, r1}
   21050:	str	r5, [r4]
   21054:	stm	r5, {r0, r1}
   21058:	b	20f4c <__assert_fail@plt+0xf72c>
   2105c:	muleq	r3, r0, r1
   21060:	andeq	r7, r3, r8, lsr #3
   21064:	andeq	r7, r3, r8, lsr #5
   21068:	push	{r4, r5, r6, lr}
   2106c:	mov	r4, #0
   21070:	mov	r5, r0
   21074:	str	r4, [r0, #4]
   21078:	mov	r1, #524288	; 0x80000
   2107c:	ldr	r0, [pc, #52]	; 210b8 <__assert_fail@plt+0xf898>
   21080:	bl	2383c <__assert_fail@plt+0x1201c>
   21084:	cmp	r0, r4
   21088:	str	r0, [r5]
   2108c:	blt	21098 <__assert_fail@plt+0xf878>
   21090:	mov	r0, r4
   21094:	pop	{r4, r5, r6, pc}
   21098:	mov	r1, r4
   2109c:	mov	r0, r4
   210a0:	bl	1161c <getcwd@plt>
   210a4:	cmp	r0, r4
   210a8:	str	r0, [r5, #4]
   210ac:	movne	r0, #0
   210b0:	mvneq	r0, #0
   210b4:	pop	{r4, r5, r6, pc}
   210b8:	andeq	r5, r2, r0, lsr #29
   210bc:	ldr	r3, [r0]
   210c0:	cmp	r3, #0
   210c4:	blt	210d0 <__assert_fail@plt+0xf8b0>
   210c8:	mov	r0, r3
   210cc:	b	11784 <fchdir@plt>
   210d0:	ldr	r0, [r0, #4]
   210d4:	b	233f4 <__assert_fail@plt+0x11bd4>
   210d8:	push	{r4, lr}
   210dc:	mov	r4, r0
   210e0:	ldr	r0, [r0]
   210e4:	cmp	r0, #0
   210e8:	blt	210f0 <__assert_fail@plt+0xf8d0>
   210ec:	bl	117fc <close@plt>
   210f0:	ldr	r0, [r4, #4]
   210f4:	pop	{r4, lr}
   210f8:	b	1a7a4 <__assert_fail@plt+0x8f84>
   210fc:	push	{r4, r5, r6, r7, r8, lr}
   21100:	mov	r5, r1
   21104:	bl	11634 <getfilecon@plt>
   21108:	subs	r4, r0, #0
   2110c:	beq	21158 <__assert_fail@plt+0xf938>
   21110:	cmp	r4, #10
   21114:	beq	21120 <__assert_fail@plt+0xf900>
   21118:	mov	r0, r4
   2111c:	pop	{r4, r5, r6, r7, r8, pc}
   21120:	ldr	r6, [r5]
   21124:	ldr	r1, [pc, #64]	; 2116c <__assert_fail@plt+0xf94c>
   21128:	mov	r0, r6
   2112c:	bl	1143c <strcmp@plt>
   21130:	subs	r7, r0, #0
   21134:	bne	21118 <__assert_fail@plt+0xf8f8>
   21138:	mov	r0, r6
   2113c:	bl	117a8 <freecon@plt>
   21140:	str	r7, [r5]
   21144:	bl	1167c <__errno_location@plt>
   21148:	mov	r3, #61	; 0x3d
   2114c:	mvn	r4, #0
   21150:	str	r3, [r0]
   21154:	b	21118 <__assert_fail@plt+0xf8f8>
   21158:	bl	1167c <__errno_location@plt>
   2115c:	mov	r3, #95	; 0x5f
   21160:	mvn	r4, #0
   21164:	str	r3, [r0]
   21168:	b	21118 <__assert_fail@plt+0xf8f8>
   2116c:	andeq	r6, r2, r0, lsl r4
   21170:	push	{r4, r5, r6, r7, r8, lr}
   21174:	mov	r5, r1
   21178:	bl	115a4 <lgetfilecon@plt>
   2117c:	subs	r4, r0, #0
   21180:	beq	211cc <__assert_fail@plt+0xf9ac>
   21184:	cmp	r4, #10
   21188:	beq	21194 <__assert_fail@plt+0xf974>
   2118c:	mov	r0, r4
   21190:	pop	{r4, r5, r6, r7, r8, pc}
   21194:	ldr	r6, [r5]
   21198:	ldr	r1, [pc, #64]	; 211e0 <__assert_fail@plt+0xf9c0>
   2119c:	mov	r0, r6
   211a0:	bl	1143c <strcmp@plt>
   211a4:	subs	r7, r0, #0
   211a8:	bne	2118c <__assert_fail@plt+0xf96c>
   211ac:	mov	r0, r6
   211b0:	bl	117a8 <freecon@plt>
   211b4:	str	r7, [r5]
   211b8:	bl	1167c <__errno_location@plt>
   211bc:	mov	r3, #61	; 0x3d
   211c0:	mvn	r4, #0
   211c4:	str	r3, [r0]
   211c8:	b	2118c <__assert_fail@plt+0xf96c>
   211cc:	bl	1167c <__errno_location@plt>
   211d0:	mov	r3, #95	; 0x5f
   211d4:	mvn	r4, #0
   211d8:	str	r3, [r0]
   211dc:	b	2118c <__assert_fail@plt+0xf96c>
   211e0:	andeq	r6, r2, r0, lsl r4
   211e4:	push	{r4, r5, r6, r7, r8, lr}
   211e8:	mov	r5, r1
   211ec:	bl	114d8 <fgetfilecon@plt>
   211f0:	subs	r4, r0, #0
   211f4:	beq	21240 <__assert_fail@plt+0xfa20>
   211f8:	cmp	r4, #10
   211fc:	beq	21208 <__assert_fail@plt+0xf9e8>
   21200:	mov	r0, r4
   21204:	pop	{r4, r5, r6, r7, r8, pc}
   21208:	ldr	r6, [r5]
   2120c:	ldr	r1, [pc, #64]	; 21254 <__assert_fail@plt+0xfa34>
   21210:	mov	r0, r6
   21214:	bl	1143c <strcmp@plt>
   21218:	subs	r7, r0, #0
   2121c:	bne	21200 <__assert_fail@plt+0xf9e0>
   21220:	mov	r0, r6
   21224:	bl	117a8 <freecon@plt>
   21228:	str	r7, [r5]
   2122c:	bl	1167c <__errno_location@plt>
   21230:	mov	r3, #61	; 0x3d
   21234:	mvn	r4, #0
   21238:	str	r3, [r0]
   2123c:	b	21200 <__assert_fail@plt+0xf9e0>
   21240:	bl	1167c <__errno_location@plt>
   21244:	mov	r3, #95	; 0x5f
   21248:	mvn	r4, #0
   2124c:	str	r3, [r0]
   21250:	b	21200 <__assert_fail@plt+0xf9e0>
   21254:	andeq	r6, r2, r0, lsl r4
   21258:	push	{r4, r5, r6, r7, r8, lr}
   2125c:	mov	r5, r0
   21260:	ldr	r0, [pc, #296]	; 21390 <__assert_fail@plt+0xfb70>
   21264:	bl	11598 <getenv@plt>
   21268:	ldrb	r3, [r5, #4]
   2126c:	subs	r6, r0, #0
   21270:	beq	21364 <__assert_fail@plt+0xfb44>
   21274:	cmp	r3, #0
   21278:	beq	2129c <__assert_fail@plt+0xfa7c>
   2127c:	mov	r1, r6
   21280:	add	r0, r5, #5
   21284:	bl	1143c <strcmp@plt>
   21288:	cmp	r0, #0
   2128c:	bne	2129c <__assert_fail@plt+0xfa7c>
   21290:	mov	r4, #1
   21294:	mov	r0, r4
   21298:	pop	{r4, r5, r6, r7, r8, pc}
   2129c:	mov	r0, r6
   212a0:	bl	11640 <strlen@plt>
   212a4:	add	r7, r0, #1
   212a8:	cmp	r7, #58	; 0x3a
   212ac:	movls	r0, #64	; 0x40
   212b0:	addhi	r0, r0, #10
   212b4:	bichi	r0, r0, #3
   212b8:	bl	22968 <__assert_fail@plt+0x11148>
   212bc:	subs	r4, r0, #0
   212c0:	beq	21388 <__assert_fail@plt+0xfb68>
   212c4:	mov	r3, r4
   212c8:	mov	r8, #0
   212cc:	mov	r2, #1
   212d0:	strb	r2, [r4, #4]
   212d4:	str	r8, [r4]
   212d8:	mov	r1, r6
   212dc:	strb	r8, [r3, #5]!
   212e0:	mov	r2, r7
   212e4:	mov	r0, r3
   212e8:	bl	11490 <memcpy@plt>
   212ec:	strb	r8, [r0, r7]
   212f0:	ldrb	r3, [r5, #4]
   212f4:	cmp	r3, #0
   212f8:	beq	21348 <__assert_fail@plt+0xfb28>
   212fc:	add	r1, r5, #5
   21300:	mov	r2, #1
   21304:	ldr	r0, [pc, #132]	; 21390 <__assert_fail@plt+0xfb70>
   21308:	bl	11658 <setenv@plt>
   2130c:	cmp	r0, #0
   21310:	beq	21358 <__assert_fail@plt+0xfb38>
   21314:	bl	1167c <__errno_location@plt>
   21318:	cmp	r4, #1
   2131c:	mov	r6, r0
   21320:	ldr	r7, [r0]
   21324:	beq	2133c <__assert_fail@plt+0xfb1c>
   21328:	ldr	r5, [r4]
   2132c:	mov	r0, r4
   21330:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   21334:	subs	r4, r5, #0
   21338:	bne	21328 <__assert_fail@plt+0xfb08>
   2133c:	str	r7, [r6]
   21340:	mov	r4, #0
   21344:	b	21294 <__assert_fail@plt+0xfa74>
   21348:	ldr	r0, [pc, #64]	; 21390 <__assert_fail@plt+0xfb70>
   2134c:	bl	117d8 <unsetenv@plt>
   21350:	cmp	r0, #0
   21354:	bne	21314 <__assert_fail@plt+0xfaf4>
   21358:	bl	11514 <tzset@plt>
   2135c:	mov	r0, r4
   21360:	pop	{r4, r5, r6, r7, r8, pc}
   21364:	cmp	r3, #0
   21368:	beq	21290 <__assert_fail@plt+0xfa70>
   2136c:	mov	r0, #64	; 0x40
   21370:	bl	22968 <__assert_fail@plt+0x11148>
   21374:	subs	r4, r0, #0
   21378:	strne	r6, [r4]
   2137c:	strbne	r6, [r4, #4]
   21380:	strbne	r6, [r4, #5]
   21384:	bne	212f0 <__assert_fail@plt+0xfad0>
   21388:	mov	r4, #0
   2138c:	b	21294 <__assert_fail@plt+0xfa74>
   21390:	andeq	r4, r2, r4, lsl #29
   21394:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21398:	ldr	r6, [r1, #40]	; 0x28
   2139c:	cmp	r6, #0
   213a0:	beq	2149c <__assert_fail@plt+0xfc7c>
   213a4:	cmp	r1, r6
   213a8:	mov	r7, r1
   213ac:	mov	r5, r0
   213b0:	bhi	213c0 <__assert_fail@plt+0xfba0>
   213b4:	add	r3, r1, #44	; 0x2c
   213b8:	cmp	r6, r3
   213bc:	bcc	2149c <__assert_fail@plt+0xfc7c>
   213c0:	ldrb	r3, [r6]
   213c4:	cmp	r3, #0
   213c8:	addne	r4, r5, #5
   213cc:	beq	21494 <__assert_fail@plt+0xfc74>
   213d0:	mov	r1, r6
   213d4:	mov	r0, r4
   213d8:	bl	1143c <strcmp@plt>
   213dc:	add	r2, r5, #5
   213e0:	cmp	r0, #0
   213e4:	mov	r0, r4
   213e8:	beq	21488 <__assert_fail@plt+0xfc68>
   213ec:	ldrb	r3, [r4]
   213f0:	cmp	r3, #0
   213f4:	bne	2140c <__assert_fail@plt+0xfbec>
   213f8:	cmp	r4, r2
   213fc:	bne	214a4 <__assert_fail@plt+0xfc84>
   21400:	ldrb	r3, [r5, #4]
   21404:	cmp	r3, #0
   21408:	beq	214a4 <__assert_fail@plt+0xfc84>
   2140c:	bl	11640 <strlen@plt>
   21410:	add	r0, r0, #1
   21414:	ldrb	r3, [r4, r0]!
   21418:	cmp	r3, #0
   2141c:	bne	213d0 <__assert_fail@plt+0xfbb0>
   21420:	ldr	r3, [r5]
   21424:	cmp	r3, #0
   21428:	addne	r4, r3, #5
   2142c:	movne	r5, r3
   21430:	b	213d0 <__assert_fail@plt+0xfbb0>
   21434:	cmp	r8, #58	; 0x3a
   21438:	addhi	r0, r0, #10
   2143c:	bichi	r0, r0, #3
   21440:	movls	r0, #64	; 0x40
   21444:	bl	22968 <__assert_fail@plt+0x11148>
   21448:	subs	r9, r0, #0
   2144c:	beq	214dc <__assert_fail@plt+0xfcbc>
   21450:	mov	r3, r9
   21454:	mov	sl, #0
   21458:	mov	r2, #1
   2145c:	strb	r2, [r9, #4]
   21460:	str	sl, [r9]
   21464:	mov	r1, r6
   21468:	strb	sl, [r3, #5]!
   2146c:	mov	r2, r8
   21470:	mov	r0, r3
   21474:	bl	11490 <memcpy@plt>
   21478:	mov	r4, r0
   2147c:	strb	sl, [r0, r8]
   21480:	str	r9, [r5]
   21484:	strb	sl, [r9, #4]
   21488:	str	r4, [r7, #40]	; 0x28
   2148c:	mov	r0, #1
   21490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21494:	ldr	r4, [pc, #76]	; 214e8 <__assert_fail@plt+0xfcc8>
   21498:	b	21488 <__assert_fail@plt+0xfc68>
   2149c:	mov	r0, #1
   214a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   214a4:	mov	r0, r6
   214a8:	bl	11640 <strlen@plt>
   214ac:	add	r3, r5, #64	; 0x40
   214b0:	sub	r3, r3, r4
   214b4:	add	r8, r0, #1
   214b8:	cmp	r8, r3
   214bc:	bge	21434 <__assert_fail@plt+0xfc14>
   214c0:	mov	r1, r6
   214c4:	mov	r2, r8
   214c8:	mov	r0, r4
   214cc:	bl	11490 <memcpy@plt>
   214d0:	mov	r3, #0
   214d4:	strb	r3, [r4, r8]
   214d8:	b	21488 <__assert_fail@plt+0xfc68>
   214dc:	mov	r0, r9
   214e0:	str	r9, [r5]
   214e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   214e8:	andeq	r4, r2, r8, asr r9
   214ec:	push	{r4, r5, r6, r7, r8, lr}
   214f0:	subs	r7, r0, #0
   214f4:	beq	21550 <__assert_fail@plt+0xfd30>
   214f8:	bl	11640 <strlen@plt>
   214fc:	add	r5, r0, #1
   21500:	cmp	r5, #58	; 0x3a
   21504:	addhi	r0, r0, #10
   21508:	bichi	r0, r0, #3
   2150c:	movls	r0, #64	; 0x40
   21510:	bl	22968 <__assert_fail@plt+0x11148>
   21514:	subs	r4, r0, #0
   21518:	beq	21548 <__assert_fail@plt+0xfd28>
   2151c:	mov	r3, r4
   21520:	mov	r6, #0
   21524:	mov	r2, #1
   21528:	strb	r2, [r4, #4]
   2152c:	str	r6, [r4]
   21530:	mov	r1, r7
   21534:	strb	r6, [r3, #5]!
   21538:	mov	r2, r5
   2153c:	mov	r0, r3
   21540:	bl	11490 <memcpy@plt>
   21544:	strb	r6, [r0, r5]
   21548:	mov	r0, r4
   2154c:	pop	{r4, r5, r6, r7, r8, pc}
   21550:	mov	r0, #64	; 0x40
   21554:	bl	22968 <__assert_fail@plt+0x11148>
   21558:	subs	r4, r0, #0
   2155c:	beq	21548 <__assert_fail@plt+0xfd28>
   21560:	str	r7, [r4]
   21564:	strb	r7, [r4, #4]
   21568:	strb	r7, [r4, #5]
   2156c:	mov	r0, r4
   21570:	pop	{r4, r5, r6, r7, r8, pc}
   21574:	cmp	r0, #1
   21578:	bxeq	lr
   2157c:	cmp	r0, #0
   21580:	beq	2159c <__assert_fail@plt+0xfd7c>
   21584:	push	{r4, lr}
   21588:	ldr	r4, [r0]
   2158c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   21590:	subs	r0, r4, #0
   21594:	bne	21588 <__assert_fail@plt+0xfd68>
   21598:	pop	{r4, pc}
   2159c:	bx	lr
   215a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   215a4:	subs	r8, r0, #0
   215a8:	mov	r5, r1
   215ac:	mov	r6, r2
   215b0:	beq	21680 <__assert_fail@plt+0xfe60>
   215b4:	bl	21258 <__assert_fail@plt+0xfa38>
   215b8:	subs	r4, r0, #0
   215bc:	beq	21668 <__assert_fail@plt+0xfe48>
   215c0:	mov	r0, r5
   215c4:	mov	r1, r6
   215c8:	bl	114e4 <localtime_r@plt>
   215cc:	subs	r7, r0, #0
   215d0:	beq	21660 <__assert_fail@plt+0xfe40>
   215d4:	mov	r0, r8
   215d8:	mov	r1, r6
   215dc:	bl	21394 <__assert_fail@plt+0xfb74>
   215e0:	cmp	r4, #1
   215e4:	mov	r7, r0
   215e8:	beq	21644 <__assert_fail@plt+0xfe24>
   215ec:	bl	1167c <__errno_location@plt>
   215f0:	ldrb	r3, [r4, #4]
   215f4:	cmp	r3, #0
   215f8:	mov	r8, r0
   215fc:	ldr	r9, [r0]
   21600:	beq	21674 <__assert_fail@plt+0xfe54>
   21604:	mov	r2, #1
   21608:	add	r1, r4, #5
   2160c:	ldr	r0, [pc, #124]	; 21690 <__assert_fail@plt+0xfe70>
   21610:	bl	11658 <setenv@plt>
   21614:	cmp	r0, #0
   21618:	beq	21654 <__assert_fail@plt+0xfe34>
   2161c:	ldr	r9, [r8]
   21620:	mov	sl, #0
   21624:	ldr	r5, [r4]
   21628:	mov	r0, r4
   2162c:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   21630:	subs	r4, r5, #0
   21634:	bne	21624 <__assert_fail@plt+0xfe04>
   21638:	cmp	sl, #0
   2163c:	str	r9, [r8]
   21640:	beq	21668 <__assert_fail@plt+0xfe48>
   21644:	cmp	r7, #0
   21648:	beq	21668 <__assert_fail@plt+0xfe48>
   2164c:	mov	r0, r6
   21650:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21654:	bl	11514 <tzset@plt>
   21658:	mov	sl, #1
   2165c:	b	21624 <__assert_fail@plt+0xfe04>
   21660:	cmp	r4, #1
   21664:	bne	215ec <__assert_fail@plt+0xfdcc>
   21668:	mov	r6, #0
   2166c:	mov	r0, r6
   21670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21674:	ldr	r0, [pc, #20]	; 21690 <__assert_fail@plt+0xfe70>
   21678:	bl	117d8 <unsetenv@plt>
   2167c:	b	21614 <__assert_fail@plt+0xfdf4>
   21680:	mov	r0, r5
   21684:	mov	r1, r2
   21688:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2168c:	b	11418 <gmtime_r@plt>
   21690:	andeq	r4, r2, r4, lsl #29
   21694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21698:	subs	r5, r0, #0
   2169c:	sub	sp, sp, #52	; 0x34
   216a0:	mov	r6, r1
   216a4:	beq	217d4 <__assert_fail@plt+0xffb4>
   216a8:	bl	21258 <__assert_fail@plt+0xfa38>
   216ac:	subs	r4, r0, #0
   216b0:	beq	217ec <__assert_fail@plt+0xffcc>
   216b4:	ldm	r6, {r1, r2, ip}
   216b8:	ldr	r0, [r6, #12]
   216bc:	ldr	r3, [r6, #16]
   216c0:	str	r1, [sp, #4]
   216c4:	str	r2, [sp, #8]
   216c8:	ldr	r1, [r6, #20]
   216cc:	ldr	r2, [r6, #32]
   216d0:	str	r0, [sp, #16]
   216d4:	str	r3, [sp, #20]
   216d8:	add	r0, sp, #4
   216dc:	mvn	r3, #0
   216e0:	str	r3, [sp, #32]
   216e4:	str	ip, [sp, #12]
   216e8:	str	r1, [sp, #24]
   216ec:	str	r2, [sp, #36]	; 0x24
   216f0:	bl	11460 <mktime@plt>
   216f4:	ldr	r3, [sp, #32]
   216f8:	cmp	r3, #0
   216fc:	mov	r8, r0
   21700:	blt	217a0 <__assert_fail@plt+0xff80>
   21704:	mov	r0, r5
   21708:	add	r1, sp, #4
   2170c:	bl	21394 <__assert_fail@plt+0xfb74>
   21710:	cmp	r4, #1
   21714:	mov	sl, r0
   21718:	beq	2176c <__assert_fail@plt+0xff4c>
   2171c:	bl	1167c <__errno_location@plt>
   21720:	ldrb	r3, [r4, #4]
   21724:	cmp	r3, #0
   21728:	mov	r7, r0
   2172c:	ldr	r9, [r0]
   21730:	bne	217b0 <__assert_fail@plt+0xff90>
   21734:	ldr	r0, [pc, #184]	; 217f4 <__assert_fail@plt+0xffd4>
   21738:	bl	117d8 <unsetenv@plt>
   2173c:	cmp	r0, #0
   21740:	beq	217c8 <__assert_fail@plt+0xffa8>
   21744:	ldr	r9, [r7]
   21748:	mov	fp, #0
   2174c:	ldr	r5, [r4]
   21750:	mov	r0, r4
   21754:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   21758:	subs	r4, r5, #0
   2175c:	bne	2174c <__assert_fail@plt+0xff2c>
   21760:	cmp	fp, #0
   21764:	str	r9, [r7]
   21768:	beq	217ec <__assert_fail@plt+0xffcc>
   2176c:	cmp	sl, #0
   21770:	beq	217ec <__assert_fail@plt+0xffcc>
   21774:	add	lr, sp, #4
   21778:	mov	ip, r6
   2177c:	ldm	lr!, {r0, r1, r2, r3}
   21780:	stmia	ip!, {r0, r1, r2, r3}
   21784:	ldm	lr!, {r0, r1, r2, r3}
   21788:	stmia	ip!, {r0, r1, r2, r3}
   2178c:	ldm	lr, {r0, r1, r2}
   21790:	stm	ip, {r0, r1, r2}
   21794:	mov	r0, r8
   21798:	add	sp, sp, #52	; 0x34
   2179c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217a0:	cmp	r4, #1
   217a4:	beq	217ec <__assert_fail@plt+0xffcc>
   217a8:	mov	sl, #0
   217ac:	b	2171c <__assert_fail@plt+0xfefc>
   217b0:	mov	r2, #1
   217b4:	add	r1, r4, #5
   217b8:	ldr	r0, [pc, #52]	; 217f4 <__assert_fail@plt+0xffd4>
   217bc:	bl	11658 <setenv@plt>
   217c0:	cmp	r0, #0
   217c4:	bne	21744 <__assert_fail@plt+0xff24>
   217c8:	bl	11514 <tzset@plt>
   217cc:	mov	fp, #1
   217d0:	b	2174c <__assert_fail@plt+0xff2c>
   217d4:	mov	r0, r1
   217d8:	bl	11778 <timegm@plt>
   217dc:	mov	r8, r0
   217e0:	mov	r0, r8
   217e4:	add	sp, sp, #52	; 0x34
   217e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217ec:	mvn	r8, #0
   217f0:	b	21794 <__assert_fail@plt+0xff74>
   217f4:	andeq	r4, r2, r4, lsl #29
   217f8:	push	{r4, r5, r6, lr}
   217fc:	sub	sp, sp, #32
   21800:	cmp	r1, #0
   21804:	mov	r4, r0
   21808:	ldr	r5, [sp, #48]	; 0x30
   2180c:	ldr	r6, [sp, #52]	; 0x34
   21810:	beq	21b28 <__assert_fail@plt+0x10308>
   21814:	stm	sp, {r2, r3}
   21818:	mov	r3, r1
   2181c:	ldr	r2, [pc, #808]	; 21b4c <__assert_fail@plt+0x1032c>
   21820:	mov	r1, #1
   21824:	bl	116d0 <__fprintf_chk@plt>
   21828:	mov	r2, #5
   2182c:	ldr	r1, [pc, #796]	; 21b50 <__assert_fail@plt+0x10330>
   21830:	mov	r0, #0
   21834:	bl	114c0 <dcgettext@plt>
   21838:	ldr	r3, [pc, #788]	; 21b54 <__assert_fail@plt+0x10334>
   2183c:	ldr	r2, [pc, #788]	; 21b58 <__assert_fail@plt+0x10338>
   21840:	str	r3, [sp]
   21844:	mov	r1, #1
   21848:	mov	r3, r0
   2184c:	mov	r0, r4
   21850:	bl	116d0 <__fprintf_chk@plt>
   21854:	mov	r1, r4
   21858:	mov	r0, #10
   2185c:	bl	114b4 <fputc_unlocked@plt>
   21860:	mov	r2, #5
   21864:	ldr	r1, [pc, #752]	; 21b5c <__assert_fail@plt+0x1033c>
   21868:	mov	r0, #0
   2186c:	bl	114c0 <dcgettext@plt>
   21870:	mov	r1, #1
   21874:	ldr	r3, [pc, #740]	; 21b60 <__assert_fail@plt+0x10340>
   21878:	mov	r2, r0
   2187c:	mov	r0, r4
   21880:	bl	116d0 <__fprintf_chk@plt>
   21884:	mov	r1, r4
   21888:	mov	r0, #10
   2188c:	bl	114b4 <fputc_unlocked@plt>
   21890:	cmp	r6, #9
   21894:	ldrls	pc, [pc, r6, lsl #2]
   21898:	b	21b40 <__assert_fail@plt+0x10320>
   2189c:	andeq	r1, r2, r0, lsr #18
   218a0:	andeq	r1, r2, r8, lsr #18
   218a4:	andeq	r1, r2, r4, asr r9
   218a8:	andeq	r1, r2, r8, lsl #19
   218ac:	andeq	r1, r2, r4, asr #19
   218b0:	andeq	r1, r2, r0, lsl #20
   218b4:	andeq	r1, r2, ip, lsr sl
   218b8:	andeq	r1, r2, r0, lsl #21
   218bc:	ldrdeq	r1, [r2], -r0
   218c0:	andeq	r1, r2, r4, asr #17
   218c4:	ldr	r1, [pc, #664]	; 21b64 <__assert_fail@plt+0x10344>
   218c8:	mov	r2, #5
   218cc:	mov	r0, #0
   218d0:	bl	114c0 <dcgettext@plt>
   218d4:	ldr	ip, [r5, #32]
   218d8:	ldr	r1, [r5, #28]
   218dc:	ldr	r2, [r5, #24]
   218e0:	ldr	r3, [r5]
   218e4:	ldr	r6, [r5, #20]
   218e8:	str	ip, [sp, #28]
   218ec:	ldr	lr, [r5, #16]
   218f0:	str	r1, [sp, #24]
   218f4:	ldr	ip, [r5, #12]
   218f8:	str	r2, [sp, #20]
   218fc:	ldr	r1, [r5, #8]
   21900:	ldr	r2, [r5, #4]
   21904:	str	r6, [sp, #16]
   21908:	stmib	sp, {r1, ip, lr}
   2190c:	mov	r1, #1
   21910:	str	r2, [sp]
   21914:	mov	r2, r0
   21918:	mov	r0, r4
   2191c:	bl	116d0 <__fprintf_chk@plt>
   21920:	add	sp, sp, #32
   21924:	pop	{r4, r5, r6, pc}
   21928:	mov	r2, #5
   2192c:	ldr	r1, [pc, #564]	; 21b68 <__assert_fail@plt+0x10348>
   21930:	mov	r0, #0
   21934:	bl	114c0 <dcgettext@plt>
   21938:	ldr	r3, [r5]
   2193c:	mov	r1, #1
   21940:	mov	r2, r0
   21944:	mov	r0, r4
   21948:	add	sp, sp, #32
   2194c:	pop	{r4, r5, r6, lr}
   21950:	b	116d0 <__fprintf_chk@plt>
   21954:	mov	r2, #5
   21958:	ldr	r1, [pc, #524]	; 21b6c <__assert_fail@plt+0x1034c>
   2195c:	mov	r0, #0
   21960:	bl	114c0 <dcgettext@plt>
   21964:	ldr	r2, [r5, #4]
   21968:	ldr	r3, [r5]
   2196c:	mov	r1, #1
   21970:	str	r2, [sp, #48]	; 0x30
   21974:	mov	r2, r0
   21978:	mov	r0, r4
   2197c:	add	sp, sp, #32
   21980:	pop	{r4, r5, r6, lr}
   21984:	b	116d0 <__fprintf_chk@plt>
   21988:	mov	r2, #5
   2198c:	ldr	r1, [pc, #476]	; 21b70 <__assert_fail@plt+0x10350>
   21990:	mov	r0, #0
   21994:	bl	114c0 <dcgettext@plt>
   21998:	ldr	r1, [r5, #8]
   2199c:	ldr	r2, [r5, #4]
   219a0:	ldr	r3, [r5]
   219a4:	str	r1, [sp, #52]	; 0x34
   219a8:	str	r2, [sp, #48]	; 0x30
   219ac:	mov	r1, #1
   219b0:	mov	r2, r0
   219b4:	mov	r0, r4
   219b8:	add	sp, sp, #32
   219bc:	pop	{r4, r5, r6, lr}
   219c0:	b	116d0 <__fprintf_chk@plt>
   219c4:	mov	r2, #5
   219c8:	ldr	r1, [pc, #420]	; 21b74 <__assert_fail@plt+0x10354>
   219cc:	mov	r0, #0
   219d0:	bl	114c0 <dcgettext@plt>
   219d4:	ldr	r1, [r5, #8]
   219d8:	ldr	ip, [r5, #12]
   219dc:	ldr	r2, [r5, #4]
   219e0:	ldr	r3, [r5]
   219e4:	stmib	sp, {r1, ip}
   219e8:	str	r2, [sp]
   219ec:	mov	r1, #1
   219f0:	mov	r2, r0
   219f4:	mov	r0, r4
   219f8:	bl	116d0 <__fprintf_chk@plt>
   219fc:	b	21920 <__assert_fail@plt+0x10100>
   21a00:	mov	r2, #5
   21a04:	ldr	r1, [pc, #364]	; 21b78 <__assert_fail@plt+0x10358>
   21a08:	mov	r0, #0
   21a0c:	bl	114c0 <dcgettext@plt>
   21a10:	add	r1, r5, #8
   21a14:	ldr	r2, [r5, #4]
   21a18:	ldm	r1, {r1, ip, lr}
   21a1c:	ldr	r3, [r5]
   21a20:	str	r2, [sp]
   21a24:	stmib	sp, {r1, ip, lr}
   21a28:	mov	r1, #1
   21a2c:	mov	r2, r0
   21a30:	mov	r0, r4
   21a34:	bl	116d0 <__fprintf_chk@plt>
   21a38:	b	21920 <__assert_fail@plt+0x10100>
   21a3c:	mov	r2, #5
   21a40:	ldr	r1, [pc, #308]	; 21b7c <__assert_fail@plt+0x1035c>
   21a44:	mov	r0, #0
   21a48:	bl	114c0 <dcgettext@plt>
   21a4c:	add	r1, r5, #8
   21a50:	ldr	r2, [r5, #4]
   21a54:	ldm	r1, {r1, ip, lr}
   21a58:	ldr	r6, [r5, #20]
   21a5c:	ldr	r3, [r5]
   21a60:	stmib	sp, {r1, ip, lr}
   21a64:	mov	r1, #1
   21a68:	str	r2, [sp]
   21a6c:	str	r6, [sp, #16]
   21a70:	mov	r2, r0
   21a74:	mov	r0, r4
   21a78:	bl	116d0 <__fprintf_chk@plt>
   21a7c:	b	21920 <__assert_fail@plt+0x10100>
   21a80:	mov	r2, #5
   21a84:	ldr	r1, [pc, #244]	; 21b80 <__assert_fail@plt+0x10360>
   21a88:	mov	r0, #0
   21a8c:	bl	114c0 <dcgettext@plt>
   21a90:	ldr	r2, [r5, #24]
   21a94:	ldr	r3, [r5]
   21a98:	ldr	r6, [r5, #20]
   21a9c:	ldr	lr, [r5, #16]
   21aa0:	ldr	ip, [r5, #12]
   21aa4:	str	r2, [sp, #20]
   21aa8:	ldr	r1, [r5, #8]
   21aac:	ldr	r2, [r5, #4]
   21ab0:	str	r6, [sp, #16]
   21ab4:	stmib	sp, {r1, ip, lr}
   21ab8:	mov	r1, #1
   21abc:	str	r2, [sp]
   21ac0:	mov	r2, r0
   21ac4:	mov	r0, r4
   21ac8:	bl	116d0 <__fprintf_chk@plt>
   21acc:	b	21920 <__assert_fail@plt+0x10100>
   21ad0:	mov	r2, #5
   21ad4:	ldr	r1, [pc, #168]	; 21b84 <__assert_fail@plt+0x10364>
   21ad8:	mov	r0, #0
   21adc:	bl	114c0 <dcgettext@plt>
   21ae0:	ldr	r1, [r5, #28]
   21ae4:	ldr	r2, [r5, #24]
   21ae8:	ldr	r3, [r5]
   21aec:	ldr	r6, [r5, #20]
   21af0:	ldr	lr, [r5, #16]
   21af4:	str	r1, [sp, #24]
   21af8:	ldr	ip, [r5, #12]
   21afc:	str	r2, [sp, #20]
   21b00:	ldr	r1, [r5, #8]
   21b04:	ldr	r2, [r5, #4]
   21b08:	str	r6, [sp, #16]
   21b0c:	stmib	sp, {r1, ip, lr}
   21b10:	mov	r1, #1
   21b14:	str	r2, [sp]
   21b18:	mov	r2, r0
   21b1c:	mov	r0, r4
   21b20:	bl	116d0 <__fprintf_chk@plt>
   21b24:	b	21920 <__assert_fail@plt+0x10100>
   21b28:	str	r3, [sp]
   21b2c:	mov	r1, #1
   21b30:	mov	r3, r2
   21b34:	ldr	r2, [pc, #76]	; 21b88 <__assert_fail@plt+0x10368>
   21b38:	bl	116d0 <__fprintf_chk@plt>
   21b3c:	b	21828 <__assert_fail@plt+0x10008>
   21b40:	mov	r2, #5
   21b44:	ldr	r1, [pc, #64]	; 21b8c <__assert_fail@plt+0x1036c>
   21b48:	b	218cc <__assert_fail@plt+0x100ac>
   21b4c:	andeq	r6, r2, ip, lsl r4
   21b50:	andeq	r6, r2, r0, lsr r4
   21b54:	andeq	r0, r0, r6, ror #15
   21b58:	andeq	r6, r2, r8, lsl #14
   21b5c:	andeq	r6, r2, r4, lsr r4
   21b60:	andeq	r6, r2, r0, ror #9
   21b64:	andeq	r6, r2, r0, lsl r6
   21b68:	andeq	r6, r2, r4, lsl #10
   21b6c:	andeq	r6, r2, r4, lsl r5
   21b70:	andeq	r6, r2, ip, lsr #10
   21b74:	andeq	r6, r2, r8, asr #10
   21b78:	andeq	r6, r2, r8, ror #10
   21b7c:	andeq	r6, r2, ip, lsl #11
   21b80:			; <UNDEFINED> instruction: 0x000265b4
   21b84:	andeq	r6, r2, r0, ror #11
   21b88:	andeq	r6, r2, r8, lsr #8
   21b8c:	andeq	r6, r2, r4, asr #12
   21b90:	push	{r4, r5, lr}
   21b94:	sub	sp, sp, #12
   21b98:	ldr	r5, [sp, #24]
   21b9c:	ldr	ip, [r5]
   21ba0:	cmp	ip, #0
   21ba4:	beq	21bc0 <__assert_fail@plt+0x103a0>
   21ba8:	mov	lr, r5
   21bac:	mov	ip, #0
   21bb0:	ldr	r4, [lr, #4]!
   21bb4:	add	ip, ip, #1
   21bb8:	cmp	r4, #0
   21bbc:	bne	21bb0 <__assert_fail@plt+0x10390>
   21bc0:	stm	sp, {r5, ip}
   21bc4:	bl	217f8 <__assert_fail@plt+0xffd8>
   21bc8:	add	sp, sp, #12
   21bcc:	pop	{r4, r5, pc}
   21bd0:	push	{r4, r5, lr}
   21bd4:	sub	sp, sp, #76	; 0x4c
   21bd8:	mov	r5, r0
   21bdc:	ldr	ip, [sp, #88]	; 0x58
   21be0:	ldr	r0, [ip]
   21be4:	cmp	r0, #0
   21be8:	str	r0, [sp, #32]
   21bec:	beq	21fc0 <__assert_fail@plt+0x107a0>
   21bf0:	ldr	r0, [ip, #4]
   21bf4:	cmp	r0, #0
   21bf8:	str	r0, [sp, #36]	; 0x24
   21bfc:	beq	21fc8 <__assert_fail@plt+0x107a8>
   21c00:	ldr	r0, [ip, #8]
   21c04:	cmp	r0, #0
   21c08:	str	r0, [sp, #40]	; 0x28
   21c0c:	beq	21fd0 <__assert_fail@plt+0x107b0>
   21c10:	ldr	r0, [ip, #12]
   21c14:	cmp	r0, #0
   21c18:	str	r0, [sp, #44]	; 0x2c
   21c1c:	beq	21fd8 <__assert_fail@plt+0x107b8>
   21c20:	ldr	r0, [ip, #16]
   21c24:	cmp	r0, #0
   21c28:	str	r0, [sp, #48]	; 0x30
   21c2c:	beq	21fe0 <__assert_fail@plt+0x107c0>
   21c30:	ldr	r0, [ip, #20]
   21c34:	cmp	r0, #0
   21c38:	str	r0, [sp, #52]	; 0x34
   21c3c:	beq	21fe8 <__assert_fail@plt+0x107c8>
   21c40:	ldr	r0, [ip, #24]
   21c44:	cmp	r0, #0
   21c48:	str	r0, [sp, #56]	; 0x38
   21c4c:	beq	21ff0 <__assert_fail@plt+0x107d0>
   21c50:	ldr	r0, [ip, #28]
   21c54:	cmp	r0, #0
   21c58:	str	r0, [sp, #60]	; 0x3c
   21c5c:	beq	21ff8 <__assert_fail@plt+0x107d8>
   21c60:	ldr	r0, [ip, #32]
   21c64:	cmp	r0, #0
   21c68:	str	r0, [sp, #64]	; 0x40
   21c6c:	beq	22000 <__assert_fail@plt+0x107e0>
   21c70:	ldr	r0, [ip, #36]	; 0x24
   21c74:	cmp	r0, #0
   21c78:	movne	r4, #10
   21c7c:	moveq	r4, #9
   21c80:	cmp	r1, #0
   21c84:	beq	21f98 <__assert_fail@plt+0x10778>
   21c88:	stm	sp, {r2, r3}
   21c8c:	mov	r0, r5
   21c90:	mov	r3, r1
   21c94:	ldr	r2, [pc, #876]	; 22008 <__assert_fail@plt+0x107e8>
   21c98:	mov	r1, #1
   21c9c:	bl	116d0 <__fprintf_chk@plt>
   21ca0:	mov	r2, #5
   21ca4:	ldr	r1, [pc, #864]	; 2200c <__assert_fail@plt+0x107ec>
   21ca8:	mov	r0, #0
   21cac:	bl	114c0 <dcgettext@plt>
   21cb0:	ldr	r3, [pc, #856]	; 22010 <__assert_fail@plt+0x107f0>
   21cb4:	ldr	r2, [pc, #856]	; 22014 <__assert_fail@plt+0x107f4>
   21cb8:	str	r3, [sp]
   21cbc:	mov	r1, #1
   21cc0:	mov	r3, r0
   21cc4:	mov	r0, r5
   21cc8:	bl	116d0 <__fprintf_chk@plt>
   21ccc:	mov	r1, r5
   21cd0:	mov	r0, #10
   21cd4:	bl	114b4 <fputc_unlocked@plt>
   21cd8:	mov	r2, #5
   21cdc:	ldr	r1, [pc, #820]	; 22018 <__assert_fail@plt+0x107f8>
   21ce0:	mov	r0, #0
   21ce4:	bl	114c0 <dcgettext@plt>
   21ce8:	mov	r1, #1
   21cec:	ldr	r3, [pc, #808]	; 2201c <__assert_fail@plt+0x107fc>
   21cf0:	mov	r2, r0
   21cf4:	mov	r0, r5
   21cf8:	bl	116d0 <__fprintf_chk@plt>
   21cfc:	mov	r1, r5
   21d00:	mov	r0, #10
   21d04:	bl	114b4 <fputc_unlocked@plt>
   21d08:	cmp	r4, #9
   21d0c:	ldrls	pc, [pc, r4, lsl #2]
   21d10:	b	21fb4 <__assert_fail@plt+0x10794>
   21d14:	muleq	r2, r8, sp
   21d18:	andeq	r1, r2, r0, lsr #27
   21d1c:	andeq	r1, r2, ip, asr #27
   21d20:	andeq	r1, r2, r0, lsl #28
   21d24:	andeq	r1, r2, r8, lsr lr
   21d28:	andeq	r1, r2, r4, ror lr
   21d2c:			; <UNDEFINED> instruction: 0x00021eb0
   21d30:	strdeq	r1, [r2], -r4
   21d34:	andeq	r1, r2, r0, asr #30
   21d38:	andeq	r1, r2, ip, lsr sp
   21d3c:	ldr	r1, [pc, #732]	; 22020 <__assert_fail@plt+0x10800>
   21d40:	mov	r2, #5
   21d44:	mov	r0, #0
   21d48:	bl	114c0 <dcgettext@plt>
   21d4c:	ldr	ip, [sp, #64]	; 0x40
   21d50:	ldr	r1, [sp, #60]	; 0x3c
   21d54:	ldr	r2, [sp, #56]	; 0x38
   21d58:	ldr	lr, [sp, #48]	; 0x30
   21d5c:	str	ip, [sp, #28]
   21d60:	str	r1, [sp, #24]
   21d64:	ldr	ip, [sp, #44]	; 0x2c
   21d68:	ldr	r1, [sp, #40]	; 0x28
   21d6c:	ldr	r4, [sp, #52]	; 0x34
   21d70:	str	r2, [sp, #20]
   21d74:	ldr	r2, [sp, #36]	; 0x24
   21d78:	stmib	sp, {r1, ip, lr}
   21d7c:	mov	r1, #1
   21d80:	str	r2, [sp]
   21d84:	ldr	r3, [sp, #32]
   21d88:	str	r4, [sp, #16]
   21d8c:	mov	r2, r0
   21d90:	mov	r0, r5
   21d94:	bl	116d0 <__fprintf_chk@plt>
   21d98:	add	sp, sp, #76	; 0x4c
   21d9c:	pop	{r4, r5, pc}
   21da0:	mov	r2, #5
   21da4:	ldr	r1, [pc, #632]	; 22024 <__assert_fail@plt+0x10804>
   21da8:	mov	r0, #0
   21dac:	bl	114c0 <dcgettext@plt>
   21db0:	ldr	r3, [sp, #32]
   21db4:	mov	r1, #1
   21db8:	mov	r2, r0
   21dbc:	mov	r0, r5
   21dc0:	add	sp, sp, #76	; 0x4c
   21dc4:	pop	{r4, r5, lr}
   21dc8:	b	116d0 <__fprintf_chk@plt>
   21dcc:	mov	r2, #5
   21dd0:	ldr	r1, [pc, #592]	; 22028 <__assert_fail@plt+0x10808>
   21dd4:	mov	r0, #0
   21dd8:	bl	114c0 <dcgettext@plt>
   21ddc:	ldr	r2, [sp, #36]	; 0x24
   21de0:	ldr	r3, [sp, #32]
   21de4:	str	r2, [sp, #88]	; 0x58
   21de8:	mov	r1, #1
   21dec:	mov	r2, r0
   21df0:	mov	r0, r5
   21df4:	add	sp, sp, #76	; 0x4c
   21df8:	pop	{r4, r5, lr}
   21dfc:	b	116d0 <__fprintf_chk@plt>
   21e00:	mov	r2, #5
   21e04:	ldr	r1, [pc, #544]	; 2202c <__assert_fail@plt+0x1080c>
   21e08:	mov	r0, #0
   21e0c:	bl	114c0 <dcgettext@plt>
   21e10:	ldr	r1, [sp, #40]	; 0x28
   21e14:	ldr	r2, [sp, #36]	; 0x24
   21e18:	str	r1, [sp, #4]
   21e1c:	str	r2, [sp]
   21e20:	ldr	r3, [sp, #32]
   21e24:	mov	r1, #1
   21e28:	mov	r2, r0
   21e2c:	mov	r0, r5
   21e30:	bl	116d0 <__fprintf_chk@plt>
   21e34:	b	21d98 <__assert_fail@plt+0x10578>
   21e38:	mov	r2, #5
   21e3c:	ldr	r1, [pc, #492]	; 22030 <__assert_fail@plt+0x10810>
   21e40:	mov	r0, #0
   21e44:	bl	114c0 <dcgettext@plt>
   21e48:	ldr	r1, [sp, #40]	; 0x28
   21e4c:	ldr	ip, [sp, #44]	; 0x2c
   21e50:	ldr	r2, [sp, #36]	; 0x24
   21e54:	ldr	r3, [sp, #32]
   21e58:	stmib	sp, {r1, ip}
   21e5c:	str	r2, [sp]
   21e60:	mov	r1, #1
   21e64:	mov	r2, r0
   21e68:	mov	r0, r5
   21e6c:	bl	116d0 <__fprintf_chk@plt>
   21e70:	b	21d98 <__assert_fail@plt+0x10578>
   21e74:	mov	r2, #5
   21e78:	ldr	r1, [pc, #436]	; 22034 <__assert_fail@plt+0x10814>
   21e7c:	mov	r0, #0
   21e80:	bl	114c0 <dcgettext@plt>
   21e84:	add	r1, sp, #40	; 0x28
   21e88:	ldr	r2, [sp, #36]	; 0x24
   21e8c:	ldm	r1, {r1, ip, lr}
   21e90:	ldr	r3, [sp, #32]
   21e94:	str	r2, [sp]
   21e98:	stmib	sp, {r1, ip, lr}
   21e9c:	mov	r1, #1
   21ea0:	mov	r2, r0
   21ea4:	mov	r0, r5
   21ea8:	bl	116d0 <__fprintf_chk@plt>
   21eac:	b	21d98 <__assert_fail@plt+0x10578>
   21eb0:	mov	r2, #5
   21eb4:	ldr	r1, [pc, #380]	; 22038 <__assert_fail@plt+0x10818>
   21eb8:	mov	r0, #0
   21ebc:	bl	114c0 <dcgettext@plt>
   21ec0:	add	r1, sp, #40	; 0x28
   21ec4:	ldr	r2, [sp, #36]	; 0x24
   21ec8:	ldm	r1, {r1, ip, lr}
   21ecc:	ldr	r4, [sp, #52]	; 0x34
   21ed0:	str	r2, [sp]
   21ed4:	stmib	sp, {r1, ip, lr}
   21ed8:	mov	r1, #1
   21edc:	ldr	r3, [sp, #32]
   21ee0:	str	r4, [sp, #16]
   21ee4:	mov	r2, r0
   21ee8:	mov	r0, r5
   21eec:	bl	116d0 <__fprintf_chk@plt>
   21ef0:	b	21d98 <__assert_fail@plt+0x10578>
   21ef4:	mov	r2, #5
   21ef8:	ldr	r1, [pc, #316]	; 2203c <__assert_fail@plt+0x1081c>
   21efc:	mov	r0, #0
   21f00:	bl	114c0 <dcgettext@plt>
   21f04:	add	r1, sp, #40	; 0x28
   21f08:	ldr	r2, [sp, #56]	; 0x38
   21f0c:	ldm	r1, {r1, ip, lr}
   21f10:	ldr	r4, [sp, #52]	; 0x34
   21f14:	str	r2, [sp, #20]
   21f18:	ldr	r2, [sp, #36]	; 0x24
   21f1c:	stmib	sp, {r1, ip, lr}
   21f20:	mov	r1, #1
   21f24:	str	r2, [sp]
   21f28:	ldr	r3, [sp, #32]
   21f2c:	str	r4, [sp, #16]
   21f30:	mov	r2, r0
   21f34:	mov	r0, r5
   21f38:	bl	116d0 <__fprintf_chk@plt>
   21f3c:	b	21d98 <__assert_fail@plt+0x10578>
   21f40:	mov	r2, #5
   21f44:	ldr	r1, [pc, #244]	; 22040 <__assert_fail@plt+0x10820>
   21f48:	mov	r0, #0
   21f4c:	bl	114c0 <dcgettext@plt>
   21f50:	ldr	r1, [sp, #60]	; 0x3c
   21f54:	ldr	r2, [sp, #56]	; 0x38
   21f58:	ldr	lr, [sp, #48]	; 0x30
   21f5c:	ldr	ip, [sp, #44]	; 0x2c
   21f60:	str	r1, [sp, #24]
   21f64:	ldr	r1, [sp, #40]	; 0x28
   21f68:	ldr	r4, [sp, #52]	; 0x34
   21f6c:	str	r2, [sp, #20]
   21f70:	ldr	r2, [sp, #36]	; 0x24
   21f74:	stmib	sp, {r1, ip, lr}
   21f78:	mov	r1, #1
   21f7c:	str	r2, [sp]
   21f80:	ldr	r3, [sp, #32]
   21f84:	str	r4, [sp, #16]
   21f88:	mov	r2, r0
   21f8c:	mov	r0, r5
   21f90:	bl	116d0 <__fprintf_chk@plt>
   21f94:	b	21d98 <__assert_fail@plt+0x10578>
   21f98:	str	r3, [sp]
   21f9c:	mov	r1, #1
   21fa0:	mov	r3, r2
   21fa4:	mov	r0, r5
   21fa8:	ldr	r2, [pc, #148]	; 22044 <__assert_fail@plt+0x10824>
   21fac:	bl	116d0 <__fprintf_chk@plt>
   21fb0:	b	21ca0 <__assert_fail@plt+0x10480>
   21fb4:	mov	r2, #5
   21fb8:	ldr	r1, [pc, #136]	; 22048 <__assert_fail@plt+0x10828>
   21fbc:	b	21d44 <__assert_fail@plt+0x10524>
   21fc0:	mov	r4, r0
   21fc4:	b	21c80 <__assert_fail@plt+0x10460>
   21fc8:	mov	r4, #1
   21fcc:	b	21c80 <__assert_fail@plt+0x10460>
   21fd0:	mov	r4, #2
   21fd4:	b	21c80 <__assert_fail@plt+0x10460>
   21fd8:	mov	r4, #3
   21fdc:	b	21c80 <__assert_fail@plt+0x10460>
   21fe0:	mov	r4, #4
   21fe4:	b	21c80 <__assert_fail@plt+0x10460>
   21fe8:	mov	r4, #5
   21fec:	b	21c80 <__assert_fail@plt+0x10460>
   21ff0:	mov	r4, #6
   21ff4:	b	21c80 <__assert_fail@plt+0x10460>
   21ff8:	mov	r4, #7
   21ffc:	b	21c80 <__assert_fail@plt+0x10460>
   22000:	mov	r4, #8
   22004:	b	21c80 <__assert_fail@plt+0x10460>
   22008:	andeq	r6, r2, ip, lsl r4
   2200c:	andeq	r6, r2, r0, lsr r4
   22010:	andeq	r0, r0, r6, ror #15
   22014:	andeq	r6, r2, r8, lsl #14
   22018:	andeq	r6, r2, r4, lsr r4
   2201c:	andeq	r6, r2, r0, ror #9
   22020:	andeq	r6, r2, r0, lsl r6
   22024:	andeq	r6, r2, r4, lsl #10
   22028:	andeq	r6, r2, r4, lsl r5
   2202c:	andeq	r6, r2, ip, lsr #10
   22030:	andeq	r6, r2, r8, asr #10
   22034:	andeq	r6, r2, r8, ror #10
   22038:	andeq	r6, r2, ip, lsl #11
   2203c:			; <UNDEFINED> instruction: 0x000265b4
   22040:	andeq	r6, r2, r0, ror #11
   22044:	andeq	r6, r2, r8, lsr #8
   22048:	andeq	r6, r2, r4, asr #12
   2204c:	push	{r3}		; (str r3, [sp, #-4]!)
   22050:	push	{lr}		; (str lr, [sp, #-4]!)
   22054:	sub	sp, sp, #56	; 0x38
   22058:	add	r3, sp, #64	; 0x40
   2205c:	ldr	ip, [sp, #64]	; 0x40
   22060:	str	r3, [sp, #12]
   22064:	cmp	ip, #0
   22068:	str	ip, [sp, #16]
   2206c:	beq	22104 <__assert_fail@plt+0x108e4>
   22070:	ldr	ip, [sp, #68]	; 0x44
   22074:	cmp	ip, #0
   22078:	str	ip, [sp, #20]
   2207c:	beq	22124 <__assert_fail@plt+0x10904>
   22080:	ldr	ip, [sp, #72]	; 0x48
   22084:	cmp	ip, #0
   22088:	str	ip, [sp, #24]
   2208c:	beq	2212c <__assert_fail@plt+0x1090c>
   22090:	ldr	ip, [sp, #76]	; 0x4c
   22094:	cmp	ip, #0
   22098:	str	ip, [sp, #28]
   2209c:	beq	22134 <__assert_fail@plt+0x10914>
   220a0:	ldr	ip, [sp, #80]	; 0x50
   220a4:	cmp	ip, #0
   220a8:	str	ip, [sp, #32]
   220ac:	beq	2213c <__assert_fail@plt+0x1091c>
   220b0:	ldr	ip, [sp, #84]	; 0x54
   220b4:	cmp	ip, #0
   220b8:	str	ip, [sp, #36]	; 0x24
   220bc:	beq	22144 <__assert_fail@plt+0x10924>
   220c0:	ldr	ip, [sp, #88]	; 0x58
   220c4:	cmp	ip, #0
   220c8:	str	ip, [sp, #40]	; 0x28
   220cc:	beq	2214c <__assert_fail@plt+0x1092c>
   220d0:	ldr	ip, [sp, #92]	; 0x5c
   220d4:	cmp	ip, #0
   220d8:	str	ip, [sp, #44]	; 0x2c
   220dc:	beq	22154 <__assert_fail@plt+0x10934>
   220e0:	ldr	ip, [sp, #96]	; 0x60
   220e4:	cmp	ip, #0
   220e8:	str	ip, [sp, #48]	; 0x30
   220ec:	beq	2215c <__assert_fail@plt+0x1093c>
   220f0:	ldr	ip, [sp, #100]	; 0x64
   220f4:	cmp	ip, #0
   220f8:	str	ip, [sp, #52]	; 0x34
   220fc:	movne	ip, #10
   22100:	moveq	ip, #9
   22104:	add	r3, sp, #16
   22108:	stm	sp, {r3, ip}
   2210c:	ldr	r3, [sp, #60]	; 0x3c
   22110:	bl	217f8 <__assert_fail@plt+0xffd8>
   22114:	add	sp, sp, #56	; 0x38
   22118:	pop	{lr}		; (ldr lr, [sp], #4)
   2211c:	add	sp, sp, #4
   22120:	bx	lr
   22124:	mov	ip, #1
   22128:	b	22104 <__assert_fail@plt+0x108e4>
   2212c:	mov	ip, #2
   22130:	b	22104 <__assert_fail@plt+0x108e4>
   22134:	mov	ip, #3
   22138:	b	22104 <__assert_fail@plt+0x108e4>
   2213c:	mov	ip, #4
   22140:	b	22104 <__assert_fail@plt+0x108e4>
   22144:	mov	ip, #5
   22148:	b	22104 <__assert_fail@plt+0x108e4>
   2214c:	mov	ip, #6
   22150:	b	22104 <__assert_fail@plt+0x108e4>
   22154:	mov	ip, #7
   22158:	b	22104 <__assert_fail@plt+0x108e4>
   2215c:	mov	ip, #8
   22160:	b	22104 <__assert_fail@plt+0x108e4>
   22164:	ldr	r3, [pc, #116]	; 221e0 <__assert_fail@plt+0x109c0>
   22168:	push	{r4, lr}
   2216c:	mov	r0, #10
   22170:	ldr	r1, [r3]
   22174:	bl	114b4 <fputc_unlocked@plt>
   22178:	mov	r2, #5
   2217c:	ldr	r1, [pc, #96]	; 221e4 <__assert_fail@plt+0x109c4>
   22180:	mov	r0, #0
   22184:	bl	114c0 <dcgettext@plt>
   22188:	ldr	r2, [pc, #88]	; 221e8 <__assert_fail@plt+0x109c8>
   2218c:	mov	r1, r0
   22190:	mov	r0, #1
   22194:	bl	116b8 <__printf_chk@plt>
   22198:	mov	r2, #5
   2219c:	ldr	r1, [pc, #72]	; 221ec <__assert_fail@plt+0x109cc>
   221a0:	mov	r0, #0
   221a4:	bl	114c0 <dcgettext@plt>
   221a8:	ldr	r3, [pc, #64]	; 221f0 <__assert_fail@plt+0x109d0>
   221ac:	ldr	r2, [pc, #64]	; 221f4 <__assert_fail@plt+0x109d4>
   221b0:	mov	r1, r0
   221b4:	mov	r0, #1
   221b8:	bl	116b8 <__printf_chk@plt>
   221bc:	mov	r2, #5
   221c0:	ldr	r1, [pc, #48]	; 221f8 <__assert_fail@plt+0x109d8>
   221c4:	mov	r0, #0
   221c8:	bl	114c0 <dcgettext@plt>
   221cc:	ldr	r2, [pc, #40]	; 221fc <__assert_fail@plt+0x109dc>
   221d0:	pop	{r4, lr}
   221d4:	mov	r1, r0
   221d8:	mov	r0, #1
   221dc:	b	116b8 <__printf_chk@plt>
   221e0:	andeq	r7, r3, r4, ror #3
   221e4:	andeq	r6, r2, r0, lsl #13
   221e8:	muleq	r2, r4, r6
   221ec:	andeq	r6, r2, ip, lsr #13
   221f0:	andeq	r5, r2, ip, asr #27
   221f4:	strdeq	r5, [r2], -r4
   221f8:	andeq	r6, r2, r0, asr #13
   221fc:	andeq	r6, r2, r8, ror #13
   22200:	push	{r4, r5, r6, lr}
   22204:	mov	r6, r0
   22208:	mov	r5, r1
   2220c:	mov	r4, r2
   22210:	bl	239fc <__assert_fail@plt+0x121dc>
   22214:	cmp	r0, #0
   22218:	popne	{r4, r5, r6, pc}
   2221c:	cmp	r6, #0
   22220:	beq	22230 <__assert_fail@plt+0x10a10>
   22224:	cmp	r5, #0
   22228:	cmpne	r4, #0
   2222c:	popeq	{r4, r5, r6, pc}
   22230:	bl	2287c <__assert_fail@plt+0x1105c>
   22234:	push	{r4, lr}
   22238:	bl	22968 <__assert_fail@plt+0x11148>
   2223c:	cmp	r0, #0
   22240:	popne	{r4, pc}
   22244:	bl	2287c <__assert_fail@plt+0x1105c>
   22248:	push	{r4, lr}
   2224c:	bl	22968 <__assert_fail@plt+0x11148>
   22250:	cmp	r0, #0
   22254:	popne	{r4, pc}
   22258:	bl	2287c <__assert_fail@plt+0x1105c>
   2225c:	push	{r4, lr}
   22260:	bl	22968 <__assert_fail@plt+0x11148>
   22264:	cmp	r0, #0
   22268:	popne	{r4, pc}
   2226c:	bl	2287c <__assert_fail@plt+0x1105c>
   22270:	push	{r4, r5, r6, lr}
   22274:	mov	r5, r0
   22278:	mov	r4, r1
   2227c:	bl	22994 <__assert_fail@plt+0x11174>
   22280:	cmp	r0, #0
   22284:	popne	{r4, r5, r6, pc}
   22288:	adds	r4, r4, #0
   2228c:	movne	r4, #1
   22290:	cmp	r5, #0
   22294:	orreq	r4, r4, #1
   22298:	cmp	r4, #0
   2229c:	popeq	{r4, r5, r6, pc}
   222a0:	bl	2287c <__assert_fail@plt+0x1105c>
   222a4:	push	{r4, lr}
   222a8:	cmp	r1, #0
   222ac:	orreq	r1, r1, #1
   222b0:	bl	22994 <__assert_fail@plt+0x11174>
   222b4:	cmp	r0, #0
   222b8:	popne	{r4, pc}
   222bc:	bl	2287c <__assert_fail@plt+0x1105c>
   222c0:	push	{r4, r5, r6, lr}
   222c4:	mov	r6, r0
   222c8:	mov	r5, r1
   222cc:	mov	r4, r2
   222d0:	bl	239fc <__assert_fail@plt+0x121dc>
   222d4:	cmp	r0, #0
   222d8:	popne	{r4, r5, r6, pc}
   222dc:	cmp	r6, #0
   222e0:	beq	222f0 <__assert_fail@plt+0x10ad0>
   222e4:	cmp	r5, #0
   222e8:	cmpne	r4, #0
   222ec:	popeq	{r4, r5, r6, pc}
   222f0:	bl	2287c <__assert_fail@plt+0x1105c>
   222f4:	cmp	r2, #0
   222f8:	cmpne	r1, #0
   222fc:	moveq	r2, #1
   22300:	moveq	r1, r2
   22304:	push	{r4, lr}
   22308:	bl	239fc <__assert_fail@plt+0x121dc>
   2230c:	cmp	r0, #0
   22310:	popne	{r4, pc}
   22314:	bl	2287c <__assert_fail@plt+0x1105c>
   22318:	push	{r4, lr}
   2231c:	mov	r2, r1
   22320:	mov	r1, r0
   22324:	mov	r0, #0
   22328:	bl	239fc <__assert_fail@plt+0x121dc>
   2232c:	cmp	r0, #0
   22330:	popne	{r4, pc}
   22334:	bl	2287c <__assert_fail@plt+0x1105c>
   22338:	cmp	r1, #0
   2233c:	cmpne	r0, #0
   22340:	moveq	r2, #1
   22344:	movne	r2, r1
   22348:	moveq	r1, r2
   2234c:	movne	r1, r0
   22350:	push	{r4, lr}
   22354:	mov	r0, #0
   22358:	bl	239fc <__assert_fail@plt+0x121dc>
   2235c:	cmp	r0, #0
   22360:	popne	{r4, pc}
   22364:	bl	2287c <__assert_fail@plt+0x1105c>
   22368:	cmp	r0, #0
   2236c:	push	{r4, r5, r6, lr}
   22370:	mov	r5, r1
   22374:	ldr	r4, [r1]
   22378:	beq	223b4 <__assert_fail@plt+0x10b94>
   2237c:	lsr	r2, r4, #1
   22380:	add	r3, r2, #1
   22384:	mvn	r3, r3
   22388:	cmp	r4, r3
   2238c:	bhi	223d0 <__assert_fail@plt+0x10bb0>
   22390:	add	r4, r4, #1
   22394:	add	r4, r4, r2
   22398:	mov	r1, r4
   2239c:	mov	r2, #1
   223a0:	bl	239fc <__assert_fail@plt+0x121dc>
   223a4:	cmp	r0, #0
   223a8:	beq	223d4 <__assert_fail@plt+0x10bb4>
   223ac:	str	r4, [r5]
   223b0:	pop	{r4, r5, r6, pc}
   223b4:	cmp	r4, #0
   223b8:	moveq	r4, #64	; 0x40
   223bc:	mov	r1, r4
   223c0:	mov	r2, #1
   223c4:	bl	239fc <__assert_fail@plt+0x121dc>
   223c8:	cmp	r0, #0
   223cc:	bne	223ac <__assert_fail@plt+0x10b8c>
   223d0:	bl	2287c <__assert_fail@plt+0x1105c>
   223d4:	cmp	r4, #0
   223d8:	bne	223d0 <__assert_fail@plt+0x10bb0>
   223dc:	str	r4, [r5]
   223e0:	pop	{r4, r5, r6, pc}
   223e4:	cmp	r0, #0
   223e8:	push	{r4, r5, r6, lr}
   223ec:	mov	r5, r1
   223f0:	ldr	r4, [r1]
   223f4:	mov	r6, r2
   223f8:	beq	2243c <__assert_fail@plt+0x10c1c>
   223fc:	lsr	r1, r4, #1
   22400:	add	r3, r1, #1
   22404:	mvn	r3, r3
   22408:	cmp	r4, r3
   2240c:	bhi	22474 <__assert_fail@plt+0x10c54>
   22410:	add	r4, r4, #1
   22414:	add	r4, r4, r1
   22418:	mov	r1, r4
   2241c:	bl	239fc <__assert_fail@plt+0x121dc>
   22420:	cmp	r0, #0
   22424:	bne	22434 <__assert_fail@plt+0x10c14>
   22428:	cmp	r4, #0
   2242c:	cmpne	r6, #0
   22430:	bne	22474 <__assert_fail@plt+0x10c54>
   22434:	str	r4, [r5]
   22438:	pop	{r4, r5, r6, pc}
   2243c:	cmp	r4, #0
   22440:	bne	2245c <__assert_fail@plt+0x10c3c>
   22444:	mov	r1, r2
   22448:	mov	r0, #64	; 0x40
   2244c:	bl	23ec0 <__assert_fail@plt+0x126a0>
   22450:	cmp	r0, #0
   22454:	movne	r4, r0
   22458:	addeq	r4, r0, #1
   2245c:	mov	r2, r6
   22460:	mov	r1, r4
   22464:	mov	r0, #0
   22468:	bl	239fc <__assert_fail@plt+0x121dc>
   2246c:	cmp	r0, #0
   22470:	bne	22434 <__assert_fail@plt+0x10c14>
   22474:	bl	2287c <__assert_fail@plt+0x1105c>
   22478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2247c:	sub	sp, sp, #12
   22480:	ldr	r6, [r1]
   22484:	mov	r8, r1
   22488:	mov	r9, r0
   2248c:	asrs	r4, r6, #1
   22490:	mov	sl, r2
   22494:	mov	fp, r3
   22498:	ldr	r7, [sp, #48]	; 0x30
   2249c:	bmi	22618 <__assert_fail@plt+0x10df8>
   224a0:	mvn	r1, #-2147483648	; 0x80000000
   224a4:	sub	r1, r1, r4
   224a8:	cmp	r6, r1
   224ac:	movle	r1, #0
   224b0:	movgt	r1, #1
   224b4:	mvn	r3, fp
   224b8:	cmp	r1, #0
   224bc:	addeq	r4, r4, r6
   224c0:	mvnne	r4, #-2147483648	; 0x80000000
   224c4:	lsr	r3, r3, #31
   224c8:	cmp	fp, r4
   224cc:	movge	r2, #0
   224d0:	andlt	r2, r3, #1
   224d4:	cmp	r2, #0
   224d8:	beq	225c8 <__assert_fail@plt+0x10da8>
   224dc:	cmp	r7, #0
   224e0:	blt	226b0 <__assert_fail@plt+0x10e90>
   224e4:	bne	226a8 <__assert_fail@plt+0x10e88>
   224e8:	mov	r5, #64	; 0x40
   224ec:	mov	r1, r7
   224f0:	mov	r0, r5
   224f4:	str	r3, [sp, #4]
   224f8:	bl	240cc <__assert_fail@plt+0x128ac>
   224fc:	mov	r1, r7
   22500:	mov	r4, r0
   22504:	mov	r0, r5
   22508:	bl	242ec <__assert_fail@plt+0x12acc>
   2250c:	ldr	r3, [sp, #4]
   22510:	sub	r5, r5, r1
   22514:	cmp	r9, #0
   22518:	sub	r2, r4, r6
   2251c:	streq	r9, [r8]
   22520:	cmp	r2, sl
   22524:	bge	225a8 <__assert_fail@plt+0x10d88>
   22528:	cmp	sl, #0
   2252c:	blt	22648 <__assert_fail@plt+0x10e28>
   22530:	cmp	r6, #0
   22534:	blt	22554 <__assert_fail@plt+0x10d34>
   22538:	mvn	r2, #-2147483648	; 0x80000000
   2253c:	sub	r2, r2, sl
   22540:	cmp	r6, r2
   22544:	movle	r2, #0
   22548:	movgt	r2, #1
   2254c:	cmp	r2, #0
   22550:	bne	22644 <__assert_fail@plt+0x10e24>
   22554:	add	r6, r6, sl
   22558:	cmp	fp, r6
   2255c:	movge	r3, #0
   22560:	andlt	r3, r3, #1
   22564:	cmp	r3, #0
   22568:	mov	r4, r6
   2256c:	bne	22644 <__assert_fail@plt+0x10e24>
   22570:	cmp	r7, #0
   22574:	blt	2265c <__assert_fail@plt+0x10e3c>
   22578:	beq	225a4 <__assert_fail@plt+0x10d84>
   2257c:	cmp	r6, #0
   22580:	blt	22700 <__assert_fail@plt+0x10ee0>
   22584:	mov	r1, r7
   22588:	mvn	r0, #-2147483648	; 0x80000000
   2258c:	bl	240cc <__assert_fail@plt+0x128ac>
   22590:	cmp	r6, r0
   22594:	movle	r0, #0
   22598:	movgt	r0, #1
   2259c:	cmp	r0, #0
   225a0:	bne	22644 <__assert_fail@plt+0x10e24>
   225a4:	mul	r5, r6, r7
   225a8:	mov	r1, r5
   225ac:	mov	r0, r9
   225b0:	bl	22994 <__assert_fail@plt+0x11174>
   225b4:	cmp	r0, #0
   225b8:	beq	2262c <__assert_fail@plt+0x10e0c>
   225bc:	str	r4, [r8]
   225c0:	add	sp, sp, #12
   225c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225c8:	cmp	r7, #0
   225cc:	blt	22688 <__assert_fail@plt+0x10e68>
   225d0:	beq	224e8 <__assert_fail@plt+0x10cc8>
   225d4:	cmp	r4, #0
   225d8:	blt	226b8 <__assert_fail@plt+0x10e98>
   225dc:	mov	r1, r7
   225e0:	mvn	r0, #-2147483648	; 0x80000000
   225e4:	str	r3, [sp, #4]
   225e8:	bl	240cc <__assert_fail@plt+0x128ac>
   225ec:	ldr	r3, [sp, #4]
   225f0:	cmp	r0, r4
   225f4:	movge	r0, #0
   225f8:	movlt	r0, #1
   225fc:	cmp	r0, #0
   22600:	mvnne	r5, #-2147483648	; 0x80000000
   22604:	bne	224ec <__assert_fail@plt+0x10ccc>
   22608:	mul	r5, r7, r4
   2260c:	cmp	r5, #63	; 0x3f
   22610:	bgt	22514 <__assert_fail@plt+0x10cf4>
   22614:	b	224e8 <__assert_fail@plt+0x10cc8>
   22618:	rsb	r1, r4, #-2147483648	; 0x80000000
   2261c:	cmp	r6, r1
   22620:	movge	r1, #0
   22624:	movlt	r1, #1
   22628:	b	224b4 <__assert_fail@plt+0x10c94>
   2262c:	adds	r5, r5, #0
   22630:	movne	r5, #1
   22634:	cmp	r9, #0
   22638:	orreq	r5, r5, #1
   2263c:	cmp	r5, #0
   22640:	beq	225bc <__assert_fail@plt+0x10d9c>
   22644:	bl	2287c <__assert_fail@plt+0x1105c>
   22648:	rsb	r2, sl, #-2147483648	; 0x80000000
   2264c:	cmp	r6, r2
   22650:	movge	r2, #0
   22654:	movlt	r2, #1
   22658:	b	2254c <__assert_fail@plt+0x10d2c>
   2265c:	cmp	r6, #0
   22660:	blt	226e4 <__assert_fail@plt+0x10ec4>
   22664:	cmn	r7, #1
   22668:	beq	225a4 <__assert_fail@plt+0x10d84>
   2266c:	mov	r1, r7
   22670:	mov	r0, #-2147483648	; 0x80000000
   22674:	bl	240cc <__assert_fail@plt+0x128ac>
   22678:	cmp	r6, r0
   2267c:	movle	r0, #0
   22680:	movgt	r0, #1
   22684:	b	2259c <__assert_fail@plt+0x10d7c>
   22688:	cmp	r4, #0
   2268c:	blt	22724 <__assert_fail@plt+0x10f04>
   22690:	cmn	r7, #1
   22694:	beq	22608 <__assert_fail@plt+0x10de8>
   22698:	str	r3, [sp, #4]
   2269c:	mov	r1, r7
   226a0:	mov	r0, #-2147483648	; 0x80000000
   226a4:	b	225e8 <__assert_fail@plt+0x10dc8>
   226a8:	mov	r4, fp
   226ac:	b	225dc <__assert_fail@plt+0x10dbc>
   226b0:	mov	r4, fp
   226b4:	b	22690 <__assert_fail@plt+0x10e70>
   226b8:	cmn	r4, #1
   226bc:	beq	22608 <__assert_fail@plt+0x10de8>
   226c0:	mov	r1, r4
   226c4:	mov	r0, #-2147483648	; 0x80000000
   226c8:	str	r3, [sp, #4]
   226cc:	bl	240cc <__assert_fail@plt+0x128ac>
   226d0:	ldr	r3, [sp, #4]
   226d4:	cmp	r7, r0
   226d8:	movle	r0, #0
   226dc:	movgt	r0, #1
   226e0:	b	225fc <__assert_fail@plt+0x10ddc>
   226e4:	mov	r1, r7
   226e8:	mvn	r0, #-2147483648	; 0x80000000
   226ec:	bl	240cc <__assert_fail@plt+0x128ac>
   226f0:	cmp	r6, r0
   226f4:	movge	r0, #0
   226f8:	movlt	r0, #1
   226fc:	b	2259c <__assert_fail@plt+0x10d7c>
   22700:	cmn	r6, #1
   22704:	beq	225a4 <__assert_fail@plt+0x10d84>
   22708:	mov	r1, r6
   2270c:	mov	r0, #-2147483648	; 0x80000000
   22710:	bl	240cc <__assert_fail@plt+0x128ac>
   22714:	cmp	r7, r0
   22718:	movle	r0, #0
   2271c:	movgt	r0, #1
   22720:	b	2259c <__assert_fail@plt+0x10d7c>
   22724:	mov	r1, r7
   22728:	mvn	r0, #-2147483648	; 0x80000000
   2272c:	str	r3, [sp, #4]
   22730:	bl	240cc <__assert_fail@plt+0x128ac>
   22734:	ldr	r3, [sp, #4]
   22738:	cmp	r0, r4
   2273c:	movle	r0, #0
   22740:	movgt	r0, #1
   22744:	b	225fc <__assert_fail@plt+0x10ddc>
   22748:	push	{r4, lr}
   2274c:	mov	r1, #1
   22750:	bl	22920 <__assert_fail@plt+0x11100>
   22754:	cmp	r0, #0
   22758:	popne	{r4, pc}
   2275c:	bl	2287c <__assert_fail@plt+0x1105c>
   22760:	push	{r4, lr}
   22764:	mov	r1, #1
   22768:	bl	22920 <__assert_fail@plt+0x11100>
   2276c:	cmp	r0, #0
   22770:	popne	{r4, pc}
   22774:	bl	2287c <__assert_fail@plt+0x1105c>
   22778:	push	{r4, lr}
   2277c:	bl	22920 <__assert_fail@plt+0x11100>
   22780:	cmp	r0, #0
   22784:	popne	{r4, pc}
   22788:	bl	2287c <__assert_fail@plt+0x1105c>
   2278c:	push	{r4, lr}
   22790:	bl	22920 <__assert_fail@plt+0x11100>
   22794:	cmp	r0, #0
   22798:	popne	{r4, pc}
   2279c:	bl	2287c <__assert_fail@plt+0x1105c>
   227a0:	push	{r4, r5, r6, lr}
   227a4:	mov	r6, r0
   227a8:	mov	r0, r1
   227ac:	mov	r4, r1
   227b0:	bl	22968 <__assert_fail@plt+0x11148>
   227b4:	subs	r5, r0, #0
   227b8:	beq	227d0 <__assert_fail@plt+0x10fb0>
   227bc:	mov	r2, r4
   227c0:	mov	r1, r6
   227c4:	bl	11490 <memcpy@plt>
   227c8:	mov	r0, r5
   227cc:	pop	{r4, r5, r6, pc}
   227d0:	bl	2287c <__assert_fail@plt+0x1105c>
   227d4:	push	{r4, r5, r6, lr}
   227d8:	mov	r6, r0
   227dc:	mov	r0, r1
   227e0:	mov	r4, r1
   227e4:	bl	22968 <__assert_fail@plt+0x11148>
   227e8:	subs	r5, r0, #0
   227ec:	beq	22804 <__assert_fail@plt+0x10fe4>
   227f0:	mov	r2, r4
   227f4:	mov	r1, r6
   227f8:	bl	11490 <memcpy@plt>
   227fc:	mov	r0, r5
   22800:	pop	{r4, r5, r6, pc}
   22804:	bl	2287c <__assert_fail@plt+0x1105c>
   22808:	push	{r4, r5, r6, lr}
   2280c:	mov	r6, r0
   22810:	add	r0, r1, #1
   22814:	mov	r4, r1
   22818:	bl	22968 <__assert_fail@plt+0x11148>
   2281c:	subs	r5, r0, #0
   22820:	beq	22840 <__assert_fail@plt+0x11020>
   22824:	mov	r3, #0
   22828:	mov	r1, r6
   2282c:	strb	r3, [r5, r4]
   22830:	mov	r2, r4
   22834:	bl	11490 <memcpy@plt>
   22838:	mov	r0, r5
   2283c:	pop	{r4, r5, r6, pc}
   22840:	bl	2287c <__assert_fail@plt+0x1105c>
   22844:	push	{r4, r5, r6, lr}
   22848:	mov	r6, r0
   2284c:	bl	11640 <strlen@plt>
   22850:	add	r4, r0, #1
   22854:	mov	r0, r4
   22858:	bl	22968 <__assert_fail@plt+0x11148>
   2285c:	subs	r5, r0, #0
   22860:	beq	22878 <__assert_fail@plt+0x11058>
   22864:	mov	r2, r4
   22868:	mov	r1, r6
   2286c:	bl	11490 <memcpy@plt>
   22870:	mov	r0, r5
   22874:	pop	{r4, r5, r6, pc}
   22878:	bl	2287c <__assert_fail@plt+0x1105c>
   2287c:	ldr	r3, [pc, #44]	; 228b0 <__assert_fail@plt+0x11090>
   22880:	push	{r4, lr}
   22884:	mov	r2, #5
   22888:	ldr	r1, [pc, #36]	; 228b4 <__assert_fail@plt+0x11094>
   2288c:	mov	r0, #0
   22890:	ldr	r4, [r3]
   22894:	bl	114c0 <dcgettext@plt>
   22898:	ldr	r2, [pc, #24]	; 228b8 <__assert_fail@plt+0x11098>
   2289c:	mov	r1, #0
   228a0:	mov	r3, r0
   228a4:	mov	r0, r4
   228a8:	bl	11574 <error@plt>
   228ac:	bl	117f0 <abort@plt>
   228b0:	andeq	r7, r3, ip, lsl #3
   228b4:	andeq	r6, r2, r8, lsr r7
   228b8:	andeq	r5, r2, ip, lsr #25
   228bc:	mov	r1, #0
   228c0:	push	{r4, lr}
   228c4:	mov	r0, r1
   228c8:	bl	1161c <getcwd@plt>
   228cc:	subs	r4, r0, #0
   228d0:	beq	228dc <__assert_fail@plt+0x110bc>
   228d4:	mov	r0, r4
   228d8:	pop	{r4, pc}
   228dc:	bl	1167c <__errno_location@plt>
   228e0:	ldr	r3, [r0]
   228e4:	cmp	r3, #12
   228e8:	bne	228d4 <__assert_fail@plt+0x110b4>
   228ec:	bl	2287c <__assert_fail@plt+0x1105c>
   228f0:	push	{r0, r1, r2, r3}
   228f4:	push	{lr}		; (str lr, [sp, #-4]!)
   228f8:	sub	sp, sp, #12
   228fc:	add	r3, sp, #20
   22900:	mov	r1, r3
   22904:	ldr	r0, [sp, #16]
   22908:	str	r3, [sp, #4]
   2290c:	bl	23b48 <__assert_fail@plt+0x12328>
   22910:	add	sp, sp, #12
   22914:	pop	{lr}		; (ldr lr, [sp], #4)
   22918:	add	sp, sp, #16
   2291c:	bx	lr
   22920:	cmp	r1, #0
   22924:	cmpne	r0, #0
   22928:	moveq	r1, #1
   2292c:	moveq	r0, r1
   22930:	umull	r2, r3, r0, r1
   22934:	adds	r3, r3, #0
   22938:	movne	r3, #1
   2293c:	cmp	r2, #0
   22940:	blt	22950 <__assert_fail@plt+0x11130>
   22944:	cmp	r3, #0
   22948:	bne	22950 <__assert_fail@plt+0x11130>
   2294c:	b	113f4 <calloc@plt>
   22950:	push	{r4, lr}
   22954:	bl	1167c <__errno_location@plt>
   22958:	mov	r3, #12
   2295c:	str	r3, [r0]
   22960:	mov	r0, #0
   22964:	pop	{r4, pc}
   22968:	cmp	r0, #0
   2296c:	moveq	r0, #1
   22970:	cmp	r0, #0
   22974:	blt	2297c <__assert_fail@plt+0x1115c>
   22978:	b	115b0 <malloc@plt>
   2297c:	push	{r4, lr}
   22980:	bl	1167c <__errno_location@plt>
   22984:	mov	r3, #12
   22988:	str	r3, [r0]
   2298c:	mov	r0, #0
   22990:	pop	{r4, pc}
   22994:	cmp	r0, #0
   22998:	beq	229bc <__assert_fail@plt+0x1119c>
   2299c:	cmp	r1, #0
   229a0:	push	{lr}		; (str lr, [sp, #-4]!)
   229a4:	sub	sp, sp, #12
   229a8:	beq	229c4 <__assert_fail@plt+0x111a4>
   229ac:	blt	229dc <__assert_fail@plt+0x111bc>
   229b0:	add	sp, sp, #12
   229b4:	pop	{lr}		; (ldr lr, [sp], #4)
   229b8:	b	114cc <realloc@plt>
   229bc:	mov	r0, r1
   229c0:	b	22968 <__assert_fail@plt+0x11148>
   229c4:	str	r1, [sp, #4]
   229c8:	bl	1a7a4 <__assert_fail@plt+0x8f84>
   229cc:	ldr	r3, [sp, #4]
   229d0:	mov	r0, r3
   229d4:	add	sp, sp, #12
   229d8:	pop	{pc}		; (ldr pc, [sp], #4)
   229dc:	bl	1167c <__errno_location@plt>
   229e0:	mov	r2, #12
   229e4:	mov	r3, #0
   229e8:	str	r2, [r0]
   229ec:	b	229d0 <__assert_fail@plt+0x111b0>
   229f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229f4:	cmp	r3, #2
   229f8:	sub	sp, sp, #1040	; 0x410
   229fc:	sub	sp, sp, #12
   22a00:	mov	r4, r3
   22a04:	mov	r5, r0
   22a08:	mov	fp, r1
   22a0c:	mov	r6, r2
   22a10:	bhi	22d6c <__assert_fail@plt+0x1154c>
   22a14:	sub	r3, r3, #1
   22a18:	mov	r7, r3
   22a1c:	mov	r3, #1
   22a20:	str	r3, [sp]
   22a24:	add	r2, sp, #1040	; 0x410
   22a28:	add	r3, sp, #20
   22a2c:	add	r2, r2, #4
   22a30:	str	r4, [r3, #4]!
   22a34:	cmp	r2, r3
   22a38:	bne	22a30 <__assert_fail@plt+0x11210>
   22a3c:	cmp	r4, #0
   22a40:	subne	r3, r4, #1
   22a44:	subne	r1, r6, #1
   22a48:	beq	22a68 <__assert_fail@plt+0x11248>
   22a4c:	ldrb	r2, [r1, #1]!
   22a50:	add	r0, sp, #1040	; 0x410
   22a54:	add	r0, r0, #8
   22a58:	add	r2, r0, r2, lsl #2
   22a5c:	str	r3, [r2, #-1024]	; 0xfffffc00
   22a60:	subs	r3, r3, #1
   22a64:	bcs	22a4c <__assert_fail@plt+0x1122c>
   22a68:	ldr	r8, [sp]
   22a6c:	mov	r2, r7
   22a70:	add	r1, r6, r8
   22a74:	mov	r0, r6
   22a78:	bl	114a8 <memcmp@plt>
   22a7c:	subs	sl, r0, #0
   22a80:	bne	22c00 <__assert_fail@plt+0x113e0>
   22a84:	sub	r2, r7, #1
   22a88:	str	r2, [sp, #4]
   22a8c:	add	r2, r6, r2
   22a90:	mov	r3, r7
   22a94:	str	r2, [sp, #16]
   22a98:	sub	r2, r4, r8
   22a9c:	str	r2, [sp, #12]
   22aa0:	rsb	r2, r3, #1
   22aa4:	str	r6, [sp, #8]
   22aa8:	mov	r9, sl
   22aac:	sub	r7, r4, #1
   22ab0:	str	r2, [sp, #20]
   22ab4:	mov	r0, fp
   22ab8:	mov	r6, r3
   22abc:	b	22adc <__assert_fail@plt+0x112bc>
   22ac0:	ldr	r3, [sp]
   22ac4:	cmp	sl, #0
   22ac8:	cmpne	ip, r3
   22acc:	mov	sl, #0
   22ad0:	ldrcc	ip, [sp, #12]
   22ad4:	add	r9, r9, ip
   22ad8:	mov	r0, r8
   22adc:	add	r8, r9, r4
   22ae0:	sub	r2, r8, r0
   22ae4:	mov	r1, #0
   22ae8:	add	r0, r5, r0
   22aec:	bl	116dc <memchr@plt>
   22af0:	cmp	r8, #0
   22af4:	clz	r0, r0
   22af8:	lsr	r0, r0, #5
   22afc:	moveq	r0, #0
   22b00:	cmp	r0, #0
   22b04:	beq	22d40 <__assert_fail@plt+0x11520>
   22b08:	add	r3, r5, r8
   22b0c:	add	r2, sp, #1040	; 0x410
   22b10:	ldrb	r3, [r3, #-1]
   22b14:	add	r2, r2, #8
   22b18:	add	r3, r2, r3, lsl #2
   22b1c:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   22b20:	cmp	ip, #0
   22b24:	bne	22ac0 <__assert_fail@plt+0x112a0>
   22b28:	cmp	sl, r6
   22b2c:	movcs	r3, sl
   22b30:	movcc	r3, r6
   22b34:	cmp	r7, r3
   22b38:	bls	22b7c <__assert_fail@plt+0x1135c>
   22b3c:	ldr	r1, [sp, #8]
   22b40:	add	r2, r9, r3
   22b44:	ldrb	lr, [r1, r3]
   22b48:	ldrb	r0, [r5, r2]
   22b4c:	add	r1, r1, r3
   22b50:	add	r2, r5, r2
   22b54:	cmp	lr, r0
   22b58:	beq	22b70 <__assert_fail@plt+0x11350>
   22b5c:	b	22bec <__assert_fail@plt+0x113cc>
   22b60:	ldrb	lr, [r1, #1]!
   22b64:	ldrb	r0, [r2, #1]!
   22b68:	cmp	lr, r0
   22b6c:	bne	22bec <__assert_fail@plt+0x113cc>
   22b70:	add	r3, r3, #1
   22b74:	cmp	r7, r3
   22b78:	bhi	22b60 <__assert_fail@plt+0x11340>
   22b7c:	cmp	sl, r6
   22b80:	ldr	r1, [sp, #4]
   22b84:	bcs	22e94 <__assert_fail@plt+0x11674>
   22b88:	ldr	ip, [sp, #16]
   22b8c:	add	r2, r9, r1
   22b90:	ldrb	r3, [ip]
   22b94:	ldrb	r0, [r5, r2]
   22b98:	add	r2, r5, r2
   22b9c:	cmp	r0, r3
   22ba0:	bne	22e94 <__assert_fail@plt+0x11674>
   22ba4:	mov	r0, ip
   22ba8:	sub	fp, sl, #1
   22bac:	b	22bc4 <__assert_fail@plt+0x113a4>
   22bb0:	ldrb	lr, [r0, #-1]!
   22bb4:	ldrb	ip, [r2, #-1]!
   22bb8:	cmp	lr, ip
   22bbc:	bne	22bd0 <__assert_fail@plt+0x113b0>
   22bc0:	mov	r1, r3
   22bc4:	sub	r3, r1, #1
   22bc8:	cmp	r3, fp
   22bcc:	bne	22bb0 <__assert_fail@plt+0x11390>
   22bd0:	add	sl, sl, #1
   22bd4:	cmp	sl, r1
   22bd8:	bhi	22d3c <__assert_fail@plt+0x1151c>
   22bdc:	ldr	r3, [sp]
   22be0:	ldr	sl, [sp, #12]
   22be4:	add	r9, r9, r3
   22be8:	b	22ad8 <__assert_fail@plt+0x112b8>
   22bec:	ldr	r2, [sp, #20]
   22bf0:	mov	sl, ip
   22bf4:	add	r9, r2, r9
   22bf8:	add	r9, r3, r9
   22bfc:	b	22ad8 <__assert_fail@plt+0x112b8>
   22c00:	sub	r3, r4, r7
   22c04:	cmp	r3, r7
   22c08:	movcc	r3, r7
   22c0c:	sub	r1, r7, #1
   22c10:	add	r3, r3, #1
   22c14:	mov	r2, r7
   22c18:	mov	r9, #0
   22c1c:	str	r3, [sp, #8]
   22c20:	add	r3, r6, r1
   22c24:	str	r3, [sp, #12]
   22c28:	sub	r7, r4, #1
   22c2c:	add	r3, r6, r2
   22c30:	mov	r0, fp
   22c34:	mov	sl, r9
   22c38:	mov	fp, r6
   22c3c:	mov	r6, r4
   22c40:	mov	r4, r2
   22c44:	str	r3, [sp]
   22c48:	rsb	r3, r2, #1
   22c4c:	str	r1, [sp, #4]
   22c50:	str	r3, [sp, #16]
   22c54:	add	r8, r9, r6
   22c58:	sub	r2, r8, r0
   22c5c:	mov	r1, sl
   22c60:	add	r0, r5, r0
   22c64:	bl	116dc <memchr@plt>
   22c68:	adds	r3, r8, #0
   22c6c:	movne	r3, #1
   22c70:	cmp	r0, #0
   22c74:	movne	r3, #0
   22c78:	cmp	r3, #0
   22c7c:	mov	r0, r3
   22c80:	beq	22d40 <__assert_fail@plt+0x11520>
   22c84:	add	r2, r5, r8
   22c88:	add	r3, sp, #1040	; 0x410
   22c8c:	ldrb	r2, [r2, #-1]
   22c90:	add	r3, r3, #8
   22c94:	add	r2, r3, r2, lsl #2
   22c98:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   22c9c:	cmp	r2, #0
   22ca0:	bne	22d54 <__assert_fail@plt+0x11534>
   22ca4:	cmp	r4, r7
   22ca8:	bcs	22cf4 <__assert_fail@plt+0x114d4>
   22cac:	ldr	r3, [sp]
   22cb0:	add	r1, r9, r4
   22cb4:	ldrb	r0, [r3]
   22cb8:	ldrb	r2, [r5, r1]
   22cbc:	add	r1, r5, r1
   22cc0:	cmp	r0, r2
   22cc4:	movne	r2, r4
   22cc8:	bne	22d4c <__assert_fail@plt+0x1152c>
   22ccc:	mov	r0, r3
   22cd0:	mov	r2, r4
   22cd4:	b	22ce8 <__assert_fail@plt+0x114c8>
   22cd8:	ldrb	ip, [r0, #1]!
   22cdc:	ldrb	r3, [r1, #1]!
   22ce0:	cmp	ip, r3
   22ce4:	bne	22d4c <__assert_fail@plt+0x1152c>
   22ce8:	add	r2, r2, #1
   22cec:	cmp	r2, r7
   22cf0:	bcc	22cd8 <__assert_fail@plt+0x114b8>
   22cf4:	ldr	r3, [sp, #4]
   22cf8:	cmn	r3, #1
   22cfc:	beq	22d3c <__assert_fail@plt+0x1151c>
   22d00:	add	r1, r9, r3
   22d04:	ldr	r3, [sp, #12]
   22d08:	ldrb	r2, [r5, r1]
   22d0c:	add	r1, r5, r1
   22d10:	ldrb	r0, [r3]
   22d14:	cmp	r0, r2
   22d18:	bne	22d60 <__assert_fail@plt+0x11540>
   22d1c:	mov	r2, r3
   22d20:	b	22d34 <__assert_fail@plt+0x11514>
   22d24:	ldrb	r0, [r2, #-1]!
   22d28:	ldrb	r3, [r1, #-1]!
   22d2c:	cmp	r0, r3
   22d30:	bne	22d60 <__assert_fail@plt+0x11540>
   22d34:	cmp	fp, r2
   22d38:	bne	22d24 <__assert_fail@plt+0x11504>
   22d3c:	add	r0, r5, r9
   22d40:	add	sp, sp, #1040	; 0x410
   22d44:	add	sp, sp, #12
   22d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d4c:	ldr	r3, [sp, #16]
   22d50:	add	r9, r3, r9
   22d54:	add	r9, r2, r9
   22d58:	mov	r0, r8
   22d5c:	b	22c54 <__assert_fail@plt+0x11434>
   22d60:	ldr	r3, [sp, #8]
   22d64:	add	r9, r9, r3
   22d68:	b	22d58 <__assert_fail@plt+0x11538>
   22d6c:	mov	ip, #1
   22d70:	mov	r2, ip
   22d74:	mov	r8, ip
   22d78:	mov	r1, #0
   22d7c:	mvn	r0, #0
   22d80:	add	r3, r2, r1
   22d84:	cmp	r4, r3
   22d88:	add	lr, r6, r0
   22d8c:	bls	22dbc <__assert_fail@plt+0x1159c>
   22d90:	ldrb	lr, [lr, r2]
   22d94:	ldrb	r7, [r6, r3]
   22d98:	cmp	r7, lr
   22d9c:	bcs	22e50 <__assert_fail@plt+0x11630>
   22da0:	mov	r1, r3
   22da4:	mov	r2, #1
   22da8:	sub	ip, r3, r0
   22dac:	add	r3, r2, r1
   22db0:	cmp	r4, r3
   22db4:	add	lr, r6, r0
   22db8:	bhi	22d90 <__assert_fail@plt+0x11570>
   22dbc:	mov	r3, #1
   22dc0:	mov	r8, r3
   22dc4:	mov	r2, r3
   22dc8:	mov	r1, #0
   22dcc:	mvn	r7, #0
   22dd0:	str	r3, [sp]
   22dd4:	add	r3, r2, r1
   22dd8:	cmp	r4, r3
   22ddc:	add	lr, r6, r7
   22de0:	bls	22e14 <__assert_fail@plt+0x115f4>
   22de4:	ldrb	lr, [lr, r2]
   22de8:	ldrb	r9, [r6, r3]
   22dec:	cmp	r9, lr
   22df0:	bls	22e38 <__assert_fail@plt+0x11618>
   22df4:	sub	r2, r3, r7
   22df8:	str	r2, [sp]
   22dfc:	mov	r1, r3
   22e00:	mov	r2, #1
   22e04:	add	r3, r2, r1
   22e08:	cmp	r4, r3
   22e0c:	add	lr, r6, r7
   22e10:	bhi	22de4 <__assert_fail@plt+0x115c4>
   22e14:	add	r3, r7, #1
   22e18:	add	r0, r0, #1
   22e1c:	cmp	r3, r0
   22e20:	ldr	r2, [sp]
   22e24:	movcc	r3, r0
   22e28:	movcc	r2, ip
   22e2c:	str	r2, [sp]
   22e30:	mov	r7, r3
   22e34:	b	22a24 <__assert_fail@plt+0x11204>
   22e38:	beq	22e68 <__assert_fail@plt+0x11648>
   22e3c:	mov	r7, r1
   22e40:	str	r8, [sp]
   22e44:	add	r1, r1, #1
   22e48:	mov	r2, #1
   22e4c:	b	22dd4 <__assert_fail@plt+0x115b4>
   22e50:	beq	22e80 <__assert_fail@plt+0x11660>
   22e54:	mov	r0, r1
   22e58:	mov	ip, r8
   22e5c:	add	r1, r1, #1
   22e60:	mov	r2, #1
   22e64:	b	22d80 <__assert_fail@plt+0x11560>
   22e68:	ldr	lr, [sp]
   22e6c:	cmp	r2, lr
   22e70:	addne	r2, r2, #1
   22e74:	moveq	r1, r3
   22e78:	moveq	r2, #1
   22e7c:	b	22dd4 <__assert_fail@plt+0x115b4>
   22e80:	cmp	r2, ip
   22e84:	addne	r2, r2, #1
   22e88:	moveq	r1, r3
   22e8c:	moveq	r2, #1
   22e90:	b	22d80 <__assert_fail@plt+0x11560>
   22e94:	mov	r1, r6
   22e98:	b	22bd0 <__assert_fail@plt+0x113b0>
   22e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ea0:	sub	sp, sp, #28
   22ea4:	ldrb	r2, [r0]
   22ea8:	cmp	r2, #0
   22eac:	beq	23334 <__assert_fail@plt+0x11b14>
   22eb0:	ldrb	ip, [r1]
   22eb4:	cmp	ip, #0
   22eb8:	beq	22f6c <__assert_fail@plt+0x1174c>
   22ebc:	mov	r8, r0
   22ec0:	add	lr, r1, #1
   22ec4:	mov	sl, #1
   22ec8:	b	22ed8 <__assert_fail@plt+0x116b8>
   22ecc:	ldrb	ip, [lr], #1
   22ed0:	cmp	ip, #0
   22ed4:	beq	22f00 <__assert_fail@plt+0x116e0>
   22ed8:	cmp	ip, r2
   22edc:	movne	sl, #0
   22ee0:	andeq	sl, sl, #1
   22ee4:	ldrb	r2, [r8, #1]!
   22ee8:	mov	r6, lr
   22eec:	cmp	r2, #0
   22ef0:	bne	22ecc <__assert_fail@plt+0x116ac>
   22ef4:	ldrb	r3, [r6]
   22ef8:	cmp	r3, #0
   22efc:	bne	22f68 <__assert_fail@plt+0x11748>
   22f00:	cmp	sl, #0
   22f04:	bne	22f6c <__assert_fail@plt+0x1174c>
   22f08:	mov	r4, r1
   22f0c:	mov	r5, r0
   22f10:	ldrb	r1, [r1]
   22f14:	add	r0, r0, #1
   22f18:	bl	1164c <strchr@plt>
   22f1c:	sub	r4, r6, r4
   22f20:	subs	r7, r0, #0
   22f24:	beq	22f68 <__assert_fail@plt+0x11748>
   22f28:	cmp	r4, #1
   22f2c:	beq	2332c <__assert_fail@plt+0x11b0c>
   22f30:	add	r0, r5, r4
   22f34:	cmp	r7, r0
   22f38:	subls	r1, r0, r7
   22f3c:	movhi	r1, #1
   22f40:	cmp	r4, #31
   22f44:	sub	r6, r6, r4
   22f48:	mov	r9, r1
   22f4c:	bls	22f74 <__assert_fail@plt+0x11754>
   22f50:	mov	r3, r4
   22f54:	mov	r2, r6
   22f58:	mov	r0, r7
   22f5c:	add	sp, sp, #28
   22f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f64:	b	229f0 <__assert_fail@plt+0x111d0>
   22f68:	mov	r0, #0
   22f6c:	add	sp, sp, #28
   22f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f74:	cmp	r4, #2
   22f78:	bhi	231fc <__assert_fail@plt+0x119dc>
   22f7c:	mov	r3, #1
   22f80:	sub	r8, r4, #1
   22f84:	mov	r5, r3
   22f88:	str	r3, [sp, #4]
   22f8c:	mov	r2, r8
   22f90:	add	r1, r6, r5
   22f94:	mov	r0, r6
   22f98:	bl	114a8 <memcmp@plt>
   22f9c:	subs	fp, r0, #0
   22fa0:	bne	230d8 <__assert_fail@plt+0x118b8>
   22fa4:	sub	r3, r8, #1
   22fa8:	str	r3, [sp, #8]
   22fac:	add	r3, r6, r3
   22fb0:	str	r3, [sp, #20]
   22fb4:	mov	sl, fp
   22fb8:	sub	r3, r4, r5
   22fbc:	mov	r0, r9
   22fc0:	str	r3, [sp, #16]
   22fc4:	rsb	r3, r8, #1
   22fc8:	str	r3, [sp, #12]
   22fcc:	add	r5, r4, sl
   22fd0:	sub	r2, r5, r0
   22fd4:	mov	r1, #0
   22fd8:	add	r0, r7, r0
   22fdc:	bl	116dc <memchr@plt>
   22fe0:	adds	r3, r5, #0
   22fe4:	movne	r3, #1
   22fe8:	cmp	r0, #0
   22fec:	movne	r3, #0
   22ff0:	cmp	r3, #0
   22ff4:	mov	r0, r3
   22ff8:	beq	22f6c <__assert_fail@plt+0x1174c>
   22ffc:	cmp	r8, fp
   23000:	movcs	r3, r8
   23004:	movcc	r3, fp
   23008:	cmp	r4, r3
   2300c:	bls	2304c <__assert_fail@plt+0x1182c>
   23010:	add	r2, r3, sl
   23014:	ldrb	r1, [r6, r3]
   23018:	ldrb	r0, [r7, r2]
   2301c:	add	ip, r6, r3
   23020:	add	r2, r7, r2
   23024:	cmp	r1, r0
   23028:	beq	23040 <__assert_fail@plt+0x11820>
   2302c:	b	230c4 <__assert_fail@plt+0x118a4>
   23030:	ldrb	r0, [ip, #1]!
   23034:	ldrb	r1, [r2, #1]!
   23038:	cmp	r0, r1
   2303c:	bne	230c4 <__assert_fail@plt+0x118a4>
   23040:	add	r3, r3, #1
   23044:	cmp	r4, r3
   23048:	bne	23030 <__assert_fail@plt+0x11810>
   2304c:	ldr	r3, [sp, #8]
   23050:	cmp	r8, fp
   23054:	mov	r1, r3
   23058:	bls	23324 <__assert_fail@plt+0x11b04>
   2305c:	ldr	ip, [sp, #20]
   23060:	add	r2, sl, r3
   23064:	ldrb	r3, [ip]
   23068:	ldrb	r0, [r7, r2]
   2306c:	add	r2, r7, r2
   23070:	cmp	r0, r3
   23074:	bne	23324 <__assert_fail@plt+0x11b04>
   23078:	mov	r0, ip
   2307c:	sub	r9, fp, #1
   23080:	b	23098 <__assert_fail@plt+0x11878>
   23084:	ldrb	lr, [r0, #-1]!
   23088:	ldrb	ip, [r2, #-1]!
   2308c:	cmp	lr, ip
   23090:	bne	230a4 <__assert_fail@plt+0x11884>
   23094:	mov	r1, r3
   23098:	sub	r3, r1, #1
   2309c:	cmp	r3, r9
   230a0:	bne	23084 <__assert_fail@plt+0x11864>
   230a4:	add	fp, fp, #1
   230a8:	cmp	fp, r1
   230ac:	bhi	23340 <__assert_fail@plt+0x11b20>
   230b0:	ldr	r3, [sp, #4]
   230b4:	ldr	fp, [sp, #16]
   230b8:	add	sl, sl, r3
   230bc:	mov	r0, r5
   230c0:	b	22fcc <__assert_fail@plt+0x117ac>
   230c4:	ldr	r2, [sp, #12]
   230c8:	mov	fp, #0
   230cc:	add	sl, r2, sl
   230d0:	add	sl, sl, r3
   230d4:	b	230bc <__assert_fail@plt+0x1189c>
   230d8:	sub	r3, r4, r8
   230dc:	cmp	r3, r8
   230e0:	movcc	r3, r8
   230e4:	sub	r2, r8, #1
   230e8:	add	r3, r3, #1
   230ec:	str	r3, [sp, #8]
   230f0:	add	r3, r6, r2
   230f4:	str	r3, [sp, #12]
   230f8:	add	sl, r6, r8
   230fc:	rsb	r3, r8, #1
   23100:	mov	r0, r9
   23104:	mov	r5, #0
   23108:	mov	r9, r8
   2310c:	mov	r8, r2
   23110:	str	r3, [sp, #4]
   23114:	add	fp, r4, r5
   23118:	sub	r2, fp, r0
   2311c:	mov	r1, #0
   23120:	add	r0, r7, r0
   23124:	bl	116dc <memchr@plt>
   23128:	cmp	fp, #0
   2312c:	clz	r0, r0
   23130:	lsr	r0, r0, #5
   23134:	moveq	r0, #0
   23138:	cmp	r0, #0
   2313c:	beq	22f6c <__assert_fail@plt+0x1174c>
   23140:	cmp	r4, r9
   23144:	bls	2318c <__assert_fail@plt+0x1196c>
   23148:	add	r1, r9, r5
   2314c:	ldrb	r0, [sl]
   23150:	ldrb	r2, [r7, r1]
   23154:	add	r1, r7, r1
   23158:	cmp	r0, r2
   2315c:	movne	r2, r9
   23160:	bne	231dc <__assert_fail@plt+0x119bc>
   23164:	mov	r0, sl
   23168:	mov	r2, r9
   2316c:	b	23180 <__assert_fail@plt+0x11960>
   23170:	ldrb	ip, [r0, #1]!
   23174:	ldrb	r3, [r1, #1]!
   23178:	cmp	ip, r3
   2317c:	bne	231dc <__assert_fail@plt+0x119bc>
   23180:	add	r2, r2, #1
   23184:	cmp	r4, r2
   23188:	bhi	23170 <__assert_fail@plt+0x11950>
   2318c:	cmn	r8, #1
   23190:	beq	231d0 <__assert_fail@plt+0x119b0>
   23194:	ldr	r3, [sp, #12]
   23198:	add	r1, r5, r8
   2319c:	ldrb	r2, [r3]
   231a0:	ldrb	r0, [r7, r1]
   231a4:	add	r1, r7, r1
   231a8:	cmp	r0, r2
   231ac:	bne	231f0 <__assert_fail@plt+0x119d0>
   231b0:	mov	r2, r3
   231b4:	b	231c8 <__assert_fail@plt+0x119a8>
   231b8:	ldrb	r0, [r2, #-1]!
   231bc:	ldrb	r3, [r1, #-1]!
   231c0:	cmp	r0, r3
   231c4:	bne	231f0 <__assert_fail@plt+0x119d0>
   231c8:	cmp	r6, r2
   231cc:	bne	231b8 <__assert_fail@plt+0x11998>
   231d0:	add	r0, r7, r5
   231d4:	add	sp, sp, #28
   231d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231dc:	ldr	r3, [sp, #4]
   231e0:	add	r5, r3, r5
   231e4:	add	r5, r5, r2
   231e8:	mov	r0, fp
   231ec:	b	23114 <__assert_fail@plt+0x118f4>
   231f0:	ldr	r3, [sp, #8]
   231f4:	add	r5, r5, r3
   231f8:	b	231e8 <__assert_fail@plt+0x119c8>
   231fc:	mov	ip, #1
   23200:	mov	r2, ip
   23204:	mov	r8, ip
   23208:	mov	r1, #0
   2320c:	mvn	r0, #0
   23210:	add	r3, r2, r1
   23214:	cmp	r4, r3
   23218:	add	lr, r6, r2
   2321c:	bls	2324c <__assert_fail@plt+0x11a2c>
   23220:	ldrb	lr, [lr, r0]
   23224:	ldrb	r5, [r6, r3]
   23228:	cmp	r5, lr
   2322c:	bcs	232e0 <__assert_fail@plt+0x11ac0>
   23230:	mov	r2, #1
   23234:	mov	r1, r3
   23238:	sub	ip, r3, r0
   2323c:	add	r3, r2, r1
   23240:	cmp	r4, r3
   23244:	add	lr, r6, r2
   23248:	bhi	23220 <__assert_fail@plt+0x11a00>
   2324c:	mov	r3, #1
   23250:	mov	r5, r3
   23254:	mov	r2, r3
   23258:	mov	r1, #0
   2325c:	mvn	r8, #0
   23260:	str	r3, [sp, #4]
   23264:	add	r3, r2, r1
   23268:	cmp	r4, r3
   2326c:	add	lr, r6, r8
   23270:	bls	232a4 <__assert_fail@plt+0x11a84>
   23274:	ldrb	lr, [lr, r2]
   23278:	ldrb	sl, [r6, r3]
   2327c:	cmp	sl, lr
   23280:	bls	232c8 <__assert_fail@plt+0x11aa8>
   23284:	sub	r2, r3, r8
   23288:	str	r2, [sp, #4]
   2328c:	mov	r1, r3
   23290:	mov	r2, #1
   23294:	add	r3, r2, r1
   23298:	cmp	r4, r3
   2329c:	add	lr, r6, r8
   232a0:	bhi	23274 <__assert_fail@plt+0x11a54>
   232a4:	add	r8, r8, #1
   232a8:	add	r0, r0, #1
   232ac:	ldr	r3, [sp, #4]
   232b0:	cmp	r8, r0
   232b4:	movcc	r3, ip
   232b8:	str	r3, [sp, #4]
   232bc:	movcc	r8, r0
   232c0:	mov	r5, r3
   232c4:	b	22f8c <__assert_fail@plt+0x1176c>
   232c8:	beq	232f8 <__assert_fail@plt+0x11ad8>
   232cc:	mov	r8, r1
   232d0:	str	r5, [sp, #4]
   232d4:	add	r1, r1, #1
   232d8:	mov	r2, #1
   232dc:	b	23264 <__assert_fail@plt+0x11a44>
   232e0:	beq	23310 <__assert_fail@plt+0x11af0>
   232e4:	mov	r0, r1
   232e8:	mov	ip, r8
   232ec:	add	r1, r1, #1
   232f0:	mov	r2, #1
   232f4:	b	23210 <__assert_fail@plt+0x119f0>
   232f8:	ldr	lr, [sp, #4]
   232fc:	cmp	r2, lr
   23300:	addne	r2, r2, #1
   23304:	moveq	r1, r3
   23308:	moveq	r2, #1
   2330c:	b	23264 <__assert_fail@plt+0x11a44>
   23310:	cmp	r2, ip
   23314:	addne	r2, r2, #1
   23318:	moveq	r1, r3
   2331c:	moveq	r2, #1
   23320:	b	23210 <__assert_fail@plt+0x119f0>
   23324:	mov	r1, r8
   23328:	b	230a4 <__assert_fail@plt+0x11884>
   2332c:	mov	r0, r7
   23330:	b	22f6c <__assert_fail@plt+0x1174c>
   23334:	mov	r6, r1
   23338:	mov	sl, #1
   2333c:	b	22ef4 <__assert_fail@plt+0x116d4>
   23340:	add	r0, r7, sl
   23344:	b	22f6c <__assert_fail@plt+0x1174c>
   23348:	ldrb	r3, [r0]
   2334c:	cmp	r3, #47	; 0x2f
   23350:	bne	23360 <__assert_fail@plt+0x11b40>
   23354:	ldrb	r3, [r0, #1]!
   23358:	cmp	r3, #47	; 0x2f
   2335c:	beq	23354 <__assert_fail@plt+0x11b34>
   23360:	cmp	r3, #0
   23364:	bxeq	lr
   23368:	mov	r2, #0
   2336c:	push	{lr}		; (str lr, [sp, #-4]!)
   23370:	mov	ip, r2
   23374:	mov	r1, r0
   23378:	mov	lr, #1
   2337c:	cmp	r3, #47	; 0x2f
   23380:	moveq	r2, lr
   23384:	beq	23394 <__assert_fail@plt+0x11b74>
   23388:	cmp	r2, #0
   2338c:	movne	r0, r1
   23390:	movne	r2, ip
   23394:	ldrb	r3, [r1, #1]!
   23398:	cmp	r3, #0
   2339c:	bne	2337c <__assert_fail@plt+0x11b5c>
   233a0:	pop	{pc}		; (ldr pc, [sp], #4)
   233a4:	push	{r4, lr}
   233a8:	mov	r4, r0
   233ac:	bl	11640 <strlen@plt>
   233b0:	cmp	r0, #1
   233b4:	popls	{r4, pc}
   233b8:	sub	r3, r0, #1
   233bc:	add	r2, r4, r3
   233c0:	ldrb	r1, [r4, r3]
   233c4:	cmp	r1, #47	; 0x2f
   233c8:	popne	{r4, pc}
   233cc:	cmp	r3, #1
   233d0:	beq	233e4 <__assert_fail@plt+0x11bc4>
   233d4:	ldrb	r1, [r2, #-1]!
   233d8:	sub	r0, r3, #1
   233dc:	cmp	r1, #47	; 0x2f
   233e0:	beq	233ec <__assert_fail@plt+0x11bcc>
   233e4:	mov	r0, r3
   233e8:	pop	{r4, pc}
   233ec:	mov	r3, r0
   233f0:	b	233cc <__assert_fail@plt+0x11bac>
   233f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233f8:	sub	sp, sp, #12
   233fc:	mov	r9, r0
   23400:	bl	114fc <chdir@plt>
   23404:	subs	r4, r0, #0
   23408:	beq	23420 <__assert_fail@plt+0x11c00>
   2340c:	bl	1167c <__errno_location@plt>
   23410:	ldr	r3, [r0]
   23414:	str	r0, [sp, #4]
   23418:	cmp	r3, #36	; 0x24
   2341c:	beq	2342c <__assert_fail@plt+0x11c0c>
   23420:	mov	r0, r4
   23424:	add	sp, sp, #12
   23428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2342c:	mov	r0, r9
   23430:	bl	11640 <strlen@plt>
   23434:	subs	r6, r0, #0
   23438:	beq	236d4 <__assert_fail@plt+0x11eb4>
   2343c:	cmp	r6, #4096	; 0x1000
   23440:	bcc	236e8 <__assert_fail@plt+0x11ec8>
   23444:	ldr	r1, [pc, #688]	; 236fc <__assert_fail@plt+0x11edc>
   23448:	mov	r0, r9
   2344c:	bl	11814 <strspn@plt>
   23450:	cmp	r0, #2
   23454:	mov	r4, r0
   23458:	beq	23564 <__assert_fail@plt+0x11d44>
   2345c:	cmp	r0, #0
   23460:	moveq	r4, r9
   23464:	mvneq	r5, #99	; 0x63
   23468:	bne	23640 <__assert_fail@plt+0x11e20>
   2346c:	ldrb	r3, [r4]
   23470:	cmp	r3, #47	; 0x2f
   23474:	beq	236c0 <__assert_fail@plt+0x11ea0>
   23478:	add	r9, r9, r6
   2347c:	cmp	r4, r9
   23480:	bhi	236ac <__assert_fail@plt+0x11e8c>
   23484:	ldr	r6, [pc, #628]	; 23700 <__assert_fail@plt+0x11ee0>
   23488:	sub	r3, r9, r4
   2348c:	cmp	r3, r6
   23490:	movle	r8, r5
   23494:	ble	235b8 <__assert_fail@plt+0x11d98>
   23498:	mov	sl, #4096	; 0x1000
   2349c:	mov	r7, #47	; 0x2f
   234a0:	b	234e0 <__assert_fail@plt+0x11cc0>
   234a4:	cmp	r5, #0
   234a8:	blt	234bc <__assert_fail@plt+0x11c9c>
   234ac:	mov	r0, r5
   234b0:	bl	117fc <close@plt>
   234b4:	cmp	r0, #0
   234b8:	bne	236a8 <__assert_fail@plt+0x11e88>
   234bc:	strb	r7, [fp], #1
   234c0:	ldr	r1, [pc, #564]	; 236fc <__assert_fail@plt+0x11edc>
   234c4:	mov	r0, fp
   234c8:	bl	11814 <strspn@plt>
   234cc:	mov	r5, r8
   234d0:	add	r4, fp, r0
   234d4:	sub	r3, r9, r4
   234d8:	cmp	r3, r6
   234dc:	ble	235b8 <__assert_fail@plt+0x11d98>
   234e0:	mov	r2, sl
   234e4:	mov	r1, r7
   234e8:	mov	r0, r4
   234ec:	bl	11670 <memrchr@plt>
   234f0:	subs	fp, r0, #0
   234f4:	beq	2360c <__assert_fail@plt+0x11dec>
   234f8:	sub	r3, fp, r4
   234fc:	cmp	r3, r6
   23500:	mov	r3, #0
   23504:	strb	r3, [fp]
   23508:	bgt	23694 <__assert_fail@plt+0x11e74>
   2350c:	mov	r1, r4
   23510:	mov	r2, #18688	; 0x4900
   23514:	mov	r0, r5
   23518:	bl	11664 <openat64@plt>
   2351c:	subs	r8, r0, #0
   23520:	bge	234a4 <__assert_fail@plt+0x11c84>
   23524:	mov	r2, #47	; 0x2f
   23528:	strb	r2, [fp]
   2352c:	ldr	r3, [sp, #4]
   23530:	cmp	r5, #0
   23534:	ldr	r4, [r3]
   23538:	blt	2354c <__assert_fail@plt+0x11d2c>
   2353c:	mov	r0, r5
   23540:	bl	117fc <close@plt>
   23544:	cmp	r0, #0
   23548:	bne	236a8 <__assert_fail@plt+0x11e88>
   2354c:	ldr	r3, [sp, #4]
   23550:	str	r4, [r3]
   23554:	mvn	r4, #0
   23558:	mov	r0, r4
   2355c:	add	sp, sp, #12
   23560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23564:	sub	r2, r6, #3
   23568:	mov	r1, #47	; 0x2f
   2356c:	add	r0, r9, #3
   23570:	bl	116dc <memchr@plt>
   23574:	subs	r4, r0, #0
   23578:	beq	23638 <__assert_fail@plt+0x11e18>
   2357c:	mov	r3, #0
   23580:	strb	r3, [r4]
   23584:	mov	r2, #18688	; 0x4900
   23588:	mov	r1, r9
   2358c:	mvn	r0, #99	; 0x63
   23590:	bl	11664 <openat64@plt>
   23594:	mov	r3, #47	; 0x2f
   23598:	subs	r5, r0, #0
   2359c:	blt	23684 <__assert_fail@plt+0x11e64>
   235a0:	strb	r3, [r4], #1
   235a4:	ldr	r1, [pc, #336]	; 236fc <__assert_fail@plt+0x11edc>
   235a8:	mov	r0, r4
   235ac:	bl	11814 <strspn@plt>
   235b0:	add	r4, r4, r0
   235b4:	b	2346c <__assert_fail@plt+0x11c4c>
   235b8:	cmp	r9, r4
   235bc:	bls	23620 <__assert_fail@plt+0x11e00>
   235c0:	mov	r1, r4
   235c4:	mov	r2, #18688	; 0x4900
   235c8:	mov	r0, r8
   235cc:	bl	11664 <openat64@plt>
   235d0:	subs	r5, r0, #0
   235d4:	blt	23630 <__assert_fail@plt+0x11e10>
   235d8:	cmp	r8, #0
   235dc:	blt	235f0 <__assert_fail@plt+0x11dd0>
   235e0:	mov	r0, r8
   235e4:	bl	117fc <close@plt>
   235e8:	cmp	r0, #0
   235ec:	bne	236a8 <__assert_fail@plt+0x11e88>
   235f0:	mov	r0, r5
   235f4:	bl	11784 <fchdir@plt>
   235f8:	cmp	r0, #0
   235fc:	beq	2366c <__assert_fail@plt+0x11e4c>
   23600:	ldr	r3, [sp, #4]
   23604:	ldr	r4, [r3]
   23608:	b	2353c <__assert_fail@plt+0x11d1c>
   2360c:	ldr	r2, [sp, #4]
   23610:	mov	r3, #36	; 0x24
   23614:	mvn	r4, #0
   23618:	str	r3, [r2]
   2361c:	b	23420 <__assert_fail@plt+0x11c00>
   23620:	mov	r0, r8
   23624:	bl	11784 <fchdir@plt>
   23628:	cmp	r0, #0
   2362c:	beq	23660 <__assert_fail@plt+0x11e40>
   23630:	mov	r5, r8
   23634:	b	2352c <__assert_fail@plt+0x11d0c>
   23638:	mvn	r4, #0
   2363c:	b	23420 <__assert_fail@plt+0x11c00>
   23640:	mov	r2, #18688	; 0x4900
   23644:	ldr	r1, [pc, #176]	; 236fc <__assert_fail@plt+0x11edc>
   23648:	mvn	r0, #99	; 0x63
   2364c:	bl	11664 <openat64@plt>
   23650:	subs	r5, r0, #0
   23654:	blt	23688 <__assert_fail@plt+0x11e68>
   23658:	add	r4, r9, r4
   2365c:	b	2346c <__assert_fail@plt+0x11c4c>
   23660:	cmp	r8, #0
   23664:	blt	2367c <__assert_fail@plt+0x11e5c>
   23668:	mov	r5, r8
   2366c:	mov	r0, r5
   23670:	bl	117fc <close@plt>
   23674:	cmp	r0, #0
   23678:	bne	236a8 <__assert_fail@plt+0x11e88>
   2367c:	mov	r4, #0
   23680:	b	23420 <__assert_fail@plt+0x11c00>
   23684:	strb	r3, [r4]
   23688:	ldr	r3, [sp, #4]
   2368c:	ldr	r4, [r3]
   23690:	b	2354c <__assert_fail@plt+0x11d2c>
   23694:	ldr	r3, [pc, #104]	; 23704 <__assert_fail@plt+0x11ee4>
   23698:	mov	r2, #179	; 0xb3
   2369c:	ldr	r1, [pc, #100]	; 23708 <__assert_fail@plt+0x11ee8>
   236a0:	ldr	r0, [pc, #100]	; 2370c <__assert_fail@plt+0x11eec>
   236a4:	bl	11820 <__assert_fail@plt>
   236a8:	bl	11830 <__assert_fail@plt+0x10>
   236ac:	ldr	r3, [pc, #80]	; 23704 <__assert_fail@plt+0x11ee4>
   236b0:	mov	r2, #163	; 0xa3
   236b4:	ldr	r1, [pc, #76]	; 23708 <__assert_fail@plt+0x11ee8>
   236b8:	ldr	r0, [pc, #80]	; 23710 <__assert_fail@plt+0x11ef0>
   236bc:	bl	11820 <__assert_fail@plt>
   236c0:	ldr	r3, [pc, #60]	; 23704 <__assert_fail@plt+0x11ee4>
   236c4:	mov	r2, #162	; 0xa2
   236c8:	ldr	r1, [pc, #56]	; 23708 <__assert_fail@plt+0x11ee8>
   236cc:	ldr	r0, [pc, #64]	; 23714 <__assert_fail@plt+0x11ef4>
   236d0:	bl	11820 <__assert_fail@plt>
   236d4:	ldr	r3, [pc, #40]	; 23704 <__assert_fail@plt+0x11ee4>
   236d8:	mov	r2, #126	; 0x7e
   236dc:	ldr	r1, [pc, #36]	; 23708 <__assert_fail@plt+0x11ee8>
   236e0:	ldr	r0, [pc, #48]	; 23718 <__assert_fail@plt+0x11ef8>
   236e4:	bl	11820 <__assert_fail@plt>
   236e8:	ldr	r3, [pc, #20]	; 23704 <__assert_fail@plt+0x11ee4>
   236ec:	mov	r2, #127	; 0x7f
   236f0:	ldr	r1, [pc, #16]	; 23708 <__assert_fail@plt+0x11ee8>
   236f4:	ldr	r0, [pc, #32]	; 2371c <__assert_fail@plt+0x11efc>
   236f8:	bl	11820 <__assert_fail@plt>
   236fc:	muleq	r2, ip, r7
   23700:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   23704:	andeq	r6, r2, r8, asr r7
   23708:	andeq	r6, r2, r4, ror #14
   2370c:			; <UNDEFINED> instruction: 0x000267bc
   23710:	andeq	r6, r2, ip, lsr #15
   23714:	andeq	r6, r2, r0, lsr #15
   23718:	andeq	r6, r2, r8, lsl #15
   2371c:	muleq	r2, r0, r7
   23720:	push	{r4, r5, r6, lr}
   23724:	mov	r4, r0
   23728:	bl	1155c <__fpending@plt>
   2372c:	ldr	r5, [r4]
   23730:	and	r5, r5, #32
   23734:	mov	r6, r0
   23738:	mov	r0, r4
   2373c:	bl	2379c <__assert_fail@plt+0x11f7c>
   23740:	cmp	r5, #0
   23744:	mov	r4, r0
   23748:	bne	23768 <__assert_fail@plt+0x11f48>
   2374c:	cmp	r0, #0
   23750:	beq	23760 <__assert_fail@plt+0x11f40>
   23754:	cmp	r6, #0
   23758:	beq	23784 <__assert_fail@plt+0x11f64>
   2375c:	mvn	r4, #0
   23760:	mov	r0, r4
   23764:	pop	{r4, r5, r6, pc}
   23768:	cmp	r0, #0
   2376c:	bne	2375c <__assert_fail@plt+0x11f3c>
   23770:	bl	1167c <__errno_location@plt>
   23774:	str	r4, [r0]
   23778:	mvn	r4, #0
   2377c:	mov	r0, r4
   23780:	pop	{r4, r5, r6, pc}
   23784:	bl	1167c <__errno_location@plt>
   23788:	ldr	r4, [r0]
   2378c:	subs	r4, r4, #9
   23790:	mvnne	r4, #0
   23794:	mov	r0, r4
   23798:	pop	{r4, r5, r6, pc}
   2379c:	push	{r4, r5, lr}
   237a0:	sub	sp, sp, #12
   237a4:	mov	r4, r0
   237a8:	bl	116c4 <fileno@plt>
   237ac:	cmp	r0, #0
   237b0:	mov	r0, r4
   237b4:	blt	23830 <__assert_fail@plt+0x12010>
   237b8:	bl	115d4 <__freading@plt>
   237bc:	cmp	r0, #0
   237c0:	bne	237fc <__assert_fail@plt+0x11fdc>
   237c4:	mov	r0, r4
   237c8:	bl	23874 <__assert_fail@plt+0x12054>
   237cc:	cmp	r0, #0
   237d0:	beq	2382c <__assert_fail@plt+0x1200c>
   237d4:	bl	1167c <__errno_location@plt>
   237d8:	mov	r5, r0
   237dc:	mov	r0, r4
   237e0:	ldr	r4, [r5]
   237e4:	bl	116e8 <fclose@plt>
   237e8:	cmp	r4, #0
   237ec:	mvnne	r0, #0
   237f0:	strne	r4, [r5]
   237f4:	add	sp, sp, #12
   237f8:	pop	{r4, r5, pc}
   237fc:	mov	r0, r4
   23800:	bl	116c4 <fileno@plt>
   23804:	mov	r3, #1
   23808:	str	r3, [sp]
   2380c:	mov	r2, #0
   23810:	mov	r3, #0
   23814:	bl	11538 <lseek64@plt>
   23818:	mvn	r3, #0
   2381c:	mvn	r2, #0
   23820:	cmp	r1, r3
   23824:	cmpeq	r0, r2
   23828:	bne	237c4 <__assert_fail@plt+0x11fa4>
   2382c:	mov	r0, r4
   23830:	add	sp, sp, #12
   23834:	pop	{r4, r5, lr}
   23838:	b	116e8 <fclose@plt>
   2383c:	push	{r1, r2, r3}
   23840:	push	{lr}		; (str lr, [sp, #-4]!)
   23844:	sub	sp, sp, #8
   23848:	ldr	r1, [sp, #12]
   2384c:	ands	r2, r1, #64	; 0x40
   23850:	addne	r3, sp, #16
   23854:	ldrne	r2, [sp, #16]
   23858:	strne	r3, [sp, #4]
   2385c:	bl	1158c <open64@plt>
   23860:	bl	23a48 <__assert_fail@plt+0x12228>
   23864:	add	sp, sp, #8
   23868:	pop	{lr}		; (ldr lr, [sp], #4)
   2386c:	add	sp, sp, #12
   23870:	bx	lr
   23874:	push	{r4, lr}
   23878:	subs	r4, r0, #0
   2387c:	sub	sp, sp, #8
   23880:	beq	2389c <__assert_fail@plt+0x1207c>
   23884:	bl	115d4 <__freading@plt>
   23888:	cmp	r0, #0
   2388c:	beq	2389c <__assert_fail@plt+0x1207c>
   23890:	ldr	r3, [r4]
   23894:	tst	r3, #256	; 0x100
   23898:	bne	238ac <__assert_fail@plt+0x1208c>
   2389c:	mov	r0, r4
   238a0:	add	sp, sp, #8
   238a4:	pop	{r4, lr}
   238a8:	b	1146c <fflush@plt>
   238ac:	mov	r3, #1
   238b0:	str	r3, [sp]
   238b4:	mov	r2, #0
   238b8:	mov	r3, #0
   238bc:	mov	r0, r4
   238c0:	bl	238d4 <__assert_fail@plt+0x120b4>
   238c4:	mov	r0, r4
   238c8:	add	sp, sp, #8
   238cc:	pop	{r4, lr}
   238d0:	b	1146c <fflush@plt>
   238d4:	push	{r4, r5, r6, r7, r8, lr}
   238d8:	sub	sp, sp, #8
   238dc:	ldmib	r0, {ip, lr}
   238e0:	mov	r4, r0
   238e4:	ldr	r5, [sp, #32]
   238e8:	cmp	lr, ip
   238ec:	beq	23904 <__assert_fail@plt+0x120e4>
   238f0:	str	r5, [sp, #32]
   238f4:	mov	r0, r4
   238f8:	add	sp, sp, #8
   238fc:	pop	{r4, r5, r6, r7, r8, lr}
   23900:	b	116f4 <fseeko64@plt>
   23904:	ldr	lr, [r0, #20]
   23908:	ldr	ip, [r0, #16]
   2390c:	cmp	lr, ip
   23910:	bne	238f0 <__assert_fail@plt+0x120d0>
   23914:	ldr	r8, [r0, #36]	; 0x24
   23918:	cmp	r8, #0
   2391c:	bne	238f0 <__assert_fail@plt+0x120d0>
   23920:	mov	r6, r2
   23924:	mov	r7, r3
   23928:	bl	116c4 <fileno@plt>
   2392c:	mov	r2, r6
   23930:	mov	r3, r7
   23934:	str	r5, [sp]
   23938:	bl	11538 <lseek64@plt>
   2393c:	mvn	r3, #0
   23940:	mvn	r2, #0
   23944:	cmp	r1, r3
   23948:	cmpeq	r0, r2
   2394c:	beq	2396c <__assert_fail@plt+0x1214c>
   23950:	ldr	r3, [r4]
   23954:	strd	r0, [r4, #80]	; 0x50
   23958:	mov	r0, r8
   2395c:	bic	r3, r3, #16
   23960:	str	r3, [r4]
   23964:	add	sp, sp, #8
   23968:	pop	{r4, r5, r6, r7, r8, pc}
   2396c:	mvn	r0, #0
   23970:	b	23964 <__assert_fail@plt+0x12144>
   23974:	push	{r4, lr}
   23978:	mov	r0, #14
   2397c:	bl	11754 <nl_langinfo@plt>
   23980:	cmp	r0, #0
   23984:	beq	2399c <__assert_fail@plt+0x1217c>
   23988:	ldrb	r2, [r0]
   2398c:	ldr	r3, [pc, #16]	; 239a4 <__assert_fail@plt+0x12184>
   23990:	cmp	r2, #0
   23994:	moveq	r0, r3
   23998:	pop	{r4, pc}
   2399c:	ldr	r0, [pc]	; 239a4 <__assert_fail@plt+0x12184>
   239a0:	pop	{r4, pc}
   239a4:	ldrdeq	r6, [r2], -r0
   239a8:	push	{r4, r5, r6, r7, lr}
   239ac:	subs	r6, r0, #0
   239b0:	sub	sp, sp, #12
   239b4:	addeq	r6, sp, #4
   239b8:	mov	r0, r6
   239bc:	mov	r5, r2
   239c0:	mov	r7, r1
   239c4:	bl	11568 <mbrtowc@plt>
   239c8:	cmp	r5, #0
   239cc:	cmnne	r0, #3
   239d0:	mov	r4, r0
   239d4:	bls	239f0 <__assert_fail@plt+0x121d0>
   239d8:	mov	r0, #0
   239dc:	bl	23bec <__assert_fail@plt+0x123cc>
   239e0:	cmp	r0, #0
   239e4:	moveq	r4, #1
   239e8:	ldrbeq	r3, [r7]
   239ec:	streq	r3, [r6]
   239f0:	mov	r0, r4
   239f4:	add	sp, sp, #12
   239f8:	pop	{r4, r5, r6, r7, pc}
   239fc:	push	{r4, r5, r6, lr}
   23a00:	subs	r4, r2, #0
   23a04:	mov	r6, r0
   23a08:	mov	r5, r1
   23a0c:	beq	23a38 <__assert_fail@plt+0x12218>
   23a10:	mov	r1, r4
   23a14:	mvn	r0, #0
   23a18:	bl	23ec0 <__assert_fail@plt+0x126a0>
   23a1c:	cmp	r0, r5
   23a20:	bcs	23a38 <__assert_fail@plt+0x12218>
   23a24:	bl	1167c <__errno_location@plt>
   23a28:	mov	r3, #12
   23a2c:	str	r3, [r0]
   23a30:	mov	r0, #0
   23a34:	pop	{r4, r5, r6, pc}
   23a38:	mul	r1, r5, r4
   23a3c:	mov	r0, r6
   23a40:	pop	{r4, r5, r6, lr}
   23a44:	b	22994 <__assert_fail@plt+0x11174>
   23a48:	cmp	r0, #2
   23a4c:	push	{r4, r5, r6, r7, r8, lr}
   23a50:	mov	r4, r0
   23a54:	bhi	23a7c <__assert_fail@plt+0x1225c>
   23a58:	bl	23ce0 <__assert_fail@plt+0x124c0>
   23a5c:	mov	r7, r0
   23a60:	bl	1167c <__errno_location@plt>
   23a64:	mov	r5, r0
   23a68:	mov	r0, r4
   23a6c:	ldr	r6, [r5]
   23a70:	mov	r4, r7
   23a74:	bl	117fc <close@plt>
   23a78:	str	r6, [r5]
   23a7c:	mov	r0, r4
   23a80:	pop	{r4, r5, r6, r7, r8, pc}
   23a84:	push	{r4, r5, r6, r7, r8, r9, lr}
   23a88:	sub	sp, sp, #12
   23a8c:	subs	r7, r0, #0
   23a90:	str	r1, [sp, #4]
   23a94:	beq	23b34 <__assert_fail@plt+0x12314>
   23a98:	mov	r9, r1
   23a9c:	mov	r5, r1
   23aa0:	mov	r6, r7
   23aa4:	mov	r4, #0
   23aa8:	add	r5, r5, #4
   23aac:	str	r5, [sp, #4]
   23ab0:	ldr	r0, [r5, #-4]
   23ab4:	bl	11640 <strlen@plt>
   23ab8:	adds	r4, r0, r4
   23abc:	mvncs	r4, #0
   23ac0:	subs	r6, r6, #1
   23ac4:	bne	23aa8 <__assert_fail@plt+0x12288>
   23ac8:	cmp	r4, #0
   23acc:	blt	23b24 <__assert_fail@plt+0x12304>
   23ad0:	add	r0, r4, #1
   23ad4:	bl	22234 <__assert_fail@plt+0x10a14>
   23ad8:	sub	r9, r9, #4
   23adc:	mov	r6, r0
   23ae0:	mov	r4, r0
   23ae4:	ldr	r8, [r9, #4]!
   23ae8:	mov	r0, r8
   23aec:	bl	11640 <strlen@plt>
   23af0:	mov	r1, r8
   23af4:	mov	r5, r0
   23af8:	mov	r2, r0
   23afc:	mov	r0, r4
   23b00:	bl	11490 <memcpy@plt>
   23b04:	subs	r7, r7, #1
   23b08:	add	r4, r4, r5
   23b0c:	bne	23ae4 <__assert_fail@plt+0x122c4>
   23b10:	mov	r3, #0
   23b14:	strb	r3, [r4]
   23b18:	mov	r0, r6
   23b1c:	add	sp, sp, #12
   23b20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23b24:	bl	1167c <__errno_location@plt>
   23b28:	mov	r3, #75	; 0x4b
   23b2c:	str	r3, [r0]
   23b30:	b	23b18 <__assert_fail@plt+0x122f8>
   23b34:	mov	r0, #1
   23b38:	bl	22234 <__assert_fail@plt+0x10a14>
   23b3c:	mov	r4, r0
   23b40:	mov	r6, r0
   23b44:	b	23b10 <__assert_fail@plt+0x122f0>
   23b48:	push	{r4, lr}
   23b4c:	sub	sp, sp, #8
   23b50:	ldrb	r4, [r0]
   23b54:	cmp	r4, #0
   23b58:	beq	23ba4 <__assert_fail@plt+0x12384>
   23b5c:	cmp	r4, #37	; 0x25
   23b60:	bne	23bb4 <__assert_fail@plt+0x12394>
   23b64:	ldrb	r3, [r0, #1]
   23b68:	cmp	r3, #115	; 0x73
   23b6c:	bne	23bb4 <__assert_fail@plt+0x12394>
   23b70:	mov	ip, r0
   23b74:	mov	r4, #0
   23b78:	b	23b94 <__assert_fail@plt+0x12374>
   23b7c:	cmp	lr, #37	; 0x25
   23b80:	bne	23bb4 <__assert_fail@plt+0x12394>
   23b84:	add	ip, ip, #2
   23b88:	ldrb	lr, [ip, #1]
   23b8c:	cmp	lr, #115	; 0x73
   23b90:	bne	23bb4 <__assert_fail@plt+0x12394>
   23b94:	ldrb	lr, [ip, #2]
   23b98:	add	r4, r4, #1
   23b9c:	cmp	lr, #0
   23ba0:	bne	23b7c <__assert_fail@plt+0x1235c>
   23ba4:	mov	r0, r4
   23ba8:	bl	23a84 <__assert_fail@plt+0x12264>
   23bac:	add	sp, sp, #8
   23bb0:	pop	{r4, pc}
   23bb4:	mov	r3, r1
   23bb8:	mov	r2, r0
   23bbc:	mov	r1, #1
   23bc0:	add	r0, sp, #4
   23bc4:	bl	116a0 <__vasprintf_chk@plt>
   23bc8:	cmp	r0, #0
   23bcc:	ldrge	r0, [sp, #4]
   23bd0:	bge	23bac <__assert_fail@plt+0x1238c>
   23bd4:	bl	1167c <__errno_location@plt>
   23bd8:	ldr	r3, [r0]
   23bdc:	cmp	r3, #12
   23be0:	movne	r0, #0
   23be4:	bne	23bac <__assert_fail@plt+0x1238c>
   23be8:	bl	2287c <__assert_fail@plt+0x1105c>
   23bec:	push	{lr}		; (str lr, [sp, #-4]!)
   23bf0:	sub	sp, sp, #268	; 0x10c
   23bf4:	add	r1, sp, #4
   23bf8:	ldr	r2, [pc, #60]	; 23c3c <__assert_fail@plt+0x1241c>
   23bfc:	bl	23c48 <__assert_fail@plt+0x12428>
   23c00:	cmp	r0, #0
   23c04:	movne	r0, #0
   23c08:	bne	23c34 <__assert_fail@plt+0x12414>
   23c0c:	ldr	r1, [pc, #44]	; 23c40 <__assert_fail@plt+0x12420>
   23c10:	add	r0, sp, #4
   23c14:	bl	1143c <strcmp@plt>
   23c18:	cmp	r0, #0
   23c1c:	beq	23c34 <__assert_fail@plt+0x12414>
   23c20:	add	r0, sp, #4
   23c24:	ldr	r1, [pc, #24]	; 23c44 <__assert_fail@plt+0x12424>
   23c28:	bl	1143c <strcmp@plt>
   23c2c:	adds	r0, r0, #0
   23c30:	movne	r0, #1
   23c34:	add	sp, sp, #268	; 0x10c
   23c38:	pop	{pc}		; (ldr pc, [sp], #4)
   23c3c:	andeq	r0, r0, r1, lsl #2
   23c40:	ldrdeq	r6, [r2], -r8
   23c44:	ldrdeq	r6, [r2], -ip
   23c48:	push	{r4, r5, r6, lr}
   23c4c:	mov	r5, r1
   23c50:	mov	r1, #0
   23c54:	mov	r4, r2
   23c58:	bl	11730 <setlocale@plt>
   23c5c:	subs	r6, r0, #0
   23c60:	beq	23cbc <__assert_fail@plt+0x1249c>
   23c64:	bl	11640 <strlen@plt>
   23c68:	cmp	r4, r0
   23c6c:	bhi	23ca4 <__assert_fail@plt+0x12484>
   23c70:	cmp	r4, #0
   23c74:	bne	23c80 <__assert_fail@plt+0x12460>
   23c78:	mov	r0, #34	; 0x22
   23c7c:	pop	{r4, r5, r6, pc}
   23c80:	sub	r4, r4, #1
   23c84:	mov	r1, r6
   23c88:	mov	r2, r4
   23c8c:	mov	r0, r5
   23c90:	bl	11490 <memcpy@plt>
   23c94:	mov	r3, #0
   23c98:	strb	r3, [r5, r4]
   23c9c:	mov	r0, #34	; 0x22
   23ca0:	pop	{r4, r5, r6, pc}
   23ca4:	add	r2, r0, #1
   23ca8:	mov	r1, r6
   23cac:	mov	r0, r5
   23cb0:	bl	11490 <memcpy@plt>
   23cb4:	mov	r0, #0
   23cb8:	pop	{r4, r5, r6, pc}
   23cbc:	cmp	r4, #0
   23cc0:	beq	23cd0 <__assert_fail@plt+0x124b0>
   23cc4:	strb	r6, [r5]
   23cc8:	mov	r0, #22
   23ccc:	pop	{r4, r5, r6, pc}
   23cd0:	mov	r0, #22
   23cd4:	pop	{r4, r5, r6, pc}
   23cd8:	mov	r1, #0
   23cdc:	b	11730 <setlocale@plt>
   23ce0:	mov	r2, #3
   23ce4:	mov	r1, #0
   23ce8:	b	23cec <__assert_fail@plt+0x124cc>
   23cec:	push	{r1, r2, r3}
   23cf0:	push	{r4, r5, r6, r7, lr}
   23cf4:	sub	sp, sp, #8
   23cf8:	add	r3, sp, #32
   23cfc:	ldr	r1, [sp, #28]
   23d00:	str	r3, [sp, #4]
   23d04:	cmp	r1, #0
   23d08:	beq	23da0 <__assert_fail@plt+0x12580>
   23d0c:	ldr	r2, [pc, #412]	; 23eb0 <__assert_fail@plt+0x12690>
   23d10:	mov	r5, r0
   23d14:	cmp	r1, r2
   23d18:	bne	23d64 <__assert_fail@plt+0x12544>
   23d1c:	ldr	r6, [pc, #400]	; 23eb4 <__assert_fail@plt+0x12694>
   23d20:	ldr	r7, [r3]
   23d24:	add	r2, sp, #36	; 0x24
   23d28:	ldr	r3, [r6]
   23d2c:	str	r2, [sp, #4]
   23d30:	cmp	r3, #0
   23d34:	mov	r2, r7
   23d38:	blt	23e64 <__assert_fail@plt+0x12644>
   23d3c:	bl	11718 <fcntl64@plt>
   23d40:	subs	r4, r0, #0
   23d44:	blt	23de8 <__assert_fail@plt+0x125c8>
   23d48:	mov	r3, #1
   23d4c:	str	r3, [r6]
   23d50:	mov	r0, r4
   23d54:	add	sp, sp, #8
   23d58:	pop	{r4, r5, r6, r7, lr}
   23d5c:	add	sp, sp, #12
   23d60:	bx	lr
   23d64:	cmp	r1, #11
   23d68:	beq	23d90 <__assert_fail@plt+0x12570>
   23d6c:	bgt	23db0 <__assert_fail@plt+0x12590>
   23d70:	cmp	r1, #3
   23d74:	beq	23d90 <__assert_fail@plt+0x12570>
   23d78:	ble	23ea4 <__assert_fail@plt+0x12684>
   23d7c:	cmp	r1, #8
   23d80:	beq	23dd0 <__assert_fail@plt+0x125b0>
   23d84:	ble	23dd0 <__assert_fail@plt+0x125b0>
   23d88:	cmp	r1, #9
   23d8c:	bne	23dd0 <__assert_fail@plt+0x125b0>
   23d90:	mov	r0, r5
   23d94:	bl	11718 <fcntl64@plt>
   23d98:	mov	r4, r0
   23d9c:	b	23d50 <__assert_fail@plt+0x12530>
   23da0:	ldr	r2, [sp, #32]
   23da4:	bl	11718 <fcntl64@plt>
   23da8:	mov	r4, r0
   23dac:	b	23d50 <__assert_fail@plt+0x12530>
   23db0:	ldr	r3, [pc, #256]	; 23eb8 <__assert_fail@plt+0x12698>
   23db4:	cmp	r1, r3
   23db8:	bgt	23e84 <__assert_fail@plt+0x12664>
   23dbc:	cmp	r1, r2
   23dc0:	bge	23dd0 <__assert_fail@plt+0x125b0>
   23dc4:	sub	r3, r3, #6
   23dc8:	cmp	r1, r3
   23dcc:	beq	23d90 <__assert_fail@plt+0x12570>
   23dd0:	ldr	r3, [sp, #4]
   23dd4:	mov	r0, r5
   23dd8:	ldr	r2, [r3]
   23ddc:	bl	11718 <fcntl64@plt>
   23de0:	mov	r4, r0
   23de4:	b	23d50 <__assert_fail@plt+0x12530>
   23de8:	bl	1167c <__errno_location@plt>
   23dec:	ldr	r3, [r0]
   23df0:	cmp	r3, #22
   23df4:	bne	23d48 <__assert_fail@plt+0x12528>
   23df8:	mov	r2, r7
   23dfc:	mov	r0, r5
   23e00:	mov	r1, #0
   23e04:	bl	11718 <fcntl64@plt>
   23e08:	subs	r4, r0, #0
   23e0c:	blt	23d50 <__assert_fail@plt+0x12530>
   23e10:	mvn	r3, #0
   23e14:	str	r3, [r6]
   23e18:	mov	r1, #1
   23e1c:	mov	r0, r4
   23e20:	bl	11718 <fcntl64@plt>
   23e24:	subs	r2, r0, #0
   23e28:	blt	23e44 <__assert_fail@plt+0x12624>
   23e2c:	orr	r2, r2, #1
   23e30:	mov	r1, #2
   23e34:	mov	r0, r4
   23e38:	bl	11718 <fcntl64@plt>
   23e3c:	cmn	r0, #1
   23e40:	bne	23d50 <__assert_fail@plt+0x12530>
   23e44:	bl	1167c <__errno_location@plt>
   23e48:	mov	r5, r0
   23e4c:	mov	r0, r4
   23e50:	ldr	r6, [r5]
   23e54:	mvn	r4, #0
   23e58:	bl	117fc <close@plt>
   23e5c:	str	r6, [r5]
   23e60:	b	23d50 <__assert_fail@plt+0x12530>
   23e64:	mov	r1, #0
   23e68:	bl	11718 <fcntl64@plt>
   23e6c:	subs	r4, r0, #0
   23e70:	blt	23d50 <__assert_fail@plt+0x12530>
   23e74:	ldr	r3, [r6]
   23e78:	cmn	r3, #1
   23e7c:	beq	23e18 <__assert_fail@plt+0x125f8>
   23e80:	b	23d50 <__assert_fail@plt+0x12530>
   23e84:	ldr	r3, [pc, #48]	; 23ebc <__assert_fail@plt+0x1269c>
   23e88:	cmp	r1, r3
   23e8c:	beq	23dd0 <__assert_fail@plt+0x125b0>
   23e90:	blt	23d90 <__assert_fail@plt+0x12570>
   23e94:	add	r3, r3, #1
   23e98:	cmp	r1, r3
   23e9c:	bne	23dd0 <__assert_fail@plt+0x125b0>
   23ea0:	b	23d90 <__assert_fail@plt+0x12570>
   23ea4:	cmp	r1, #1
   23ea8:	bne	23dd0 <__assert_fail@plt+0x125b0>
   23eac:	b	23d90 <__assert_fail@plt+0x12570>
   23eb0:	andeq	r0, r0, r6, lsl #8
   23eb4:	andeq	r7, r3, r8, lsr #7
   23eb8:	andeq	r0, r0, r7, lsl #8
   23ebc:	andeq	r0, r0, r9, lsl #8
   23ec0:	subs	r2, r1, #1
   23ec4:	bxeq	lr
   23ec8:	bcc	240a0 <__assert_fail@plt+0x12880>
   23ecc:	cmp	r0, r1
   23ed0:	bls	24084 <__assert_fail@plt+0x12864>
   23ed4:	tst	r1, r2
   23ed8:	beq	24090 <__assert_fail@plt+0x12870>
   23edc:	clz	r3, r0
   23ee0:	clz	r2, r1
   23ee4:	sub	r3, r2, r3
   23ee8:	rsbs	r3, r3, #31
   23eec:	addne	r3, r3, r3, lsl #1
   23ef0:	mov	r2, #0
   23ef4:	addne	pc, pc, r3, lsl #2
   23ef8:	nop			; (mov r0, r0)
   23efc:	cmp	r0, r1, lsl #31
   23f00:	adc	r2, r2, r2
   23f04:	subcs	r0, r0, r1, lsl #31
   23f08:	cmp	r0, r1, lsl #30
   23f0c:	adc	r2, r2, r2
   23f10:	subcs	r0, r0, r1, lsl #30
   23f14:	cmp	r0, r1, lsl #29
   23f18:	adc	r2, r2, r2
   23f1c:	subcs	r0, r0, r1, lsl #29
   23f20:	cmp	r0, r1, lsl #28
   23f24:	adc	r2, r2, r2
   23f28:	subcs	r0, r0, r1, lsl #28
   23f2c:	cmp	r0, r1, lsl #27
   23f30:	adc	r2, r2, r2
   23f34:	subcs	r0, r0, r1, lsl #27
   23f38:	cmp	r0, r1, lsl #26
   23f3c:	adc	r2, r2, r2
   23f40:	subcs	r0, r0, r1, lsl #26
   23f44:	cmp	r0, r1, lsl #25
   23f48:	adc	r2, r2, r2
   23f4c:	subcs	r0, r0, r1, lsl #25
   23f50:	cmp	r0, r1, lsl #24
   23f54:	adc	r2, r2, r2
   23f58:	subcs	r0, r0, r1, lsl #24
   23f5c:	cmp	r0, r1, lsl #23
   23f60:	adc	r2, r2, r2
   23f64:	subcs	r0, r0, r1, lsl #23
   23f68:	cmp	r0, r1, lsl #22
   23f6c:	adc	r2, r2, r2
   23f70:	subcs	r0, r0, r1, lsl #22
   23f74:	cmp	r0, r1, lsl #21
   23f78:	adc	r2, r2, r2
   23f7c:	subcs	r0, r0, r1, lsl #21
   23f80:	cmp	r0, r1, lsl #20
   23f84:	adc	r2, r2, r2
   23f88:	subcs	r0, r0, r1, lsl #20
   23f8c:	cmp	r0, r1, lsl #19
   23f90:	adc	r2, r2, r2
   23f94:	subcs	r0, r0, r1, lsl #19
   23f98:	cmp	r0, r1, lsl #18
   23f9c:	adc	r2, r2, r2
   23fa0:	subcs	r0, r0, r1, lsl #18
   23fa4:	cmp	r0, r1, lsl #17
   23fa8:	adc	r2, r2, r2
   23fac:	subcs	r0, r0, r1, lsl #17
   23fb0:	cmp	r0, r1, lsl #16
   23fb4:	adc	r2, r2, r2
   23fb8:	subcs	r0, r0, r1, lsl #16
   23fbc:	cmp	r0, r1, lsl #15
   23fc0:	adc	r2, r2, r2
   23fc4:	subcs	r0, r0, r1, lsl #15
   23fc8:	cmp	r0, r1, lsl #14
   23fcc:	adc	r2, r2, r2
   23fd0:	subcs	r0, r0, r1, lsl #14
   23fd4:	cmp	r0, r1, lsl #13
   23fd8:	adc	r2, r2, r2
   23fdc:	subcs	r0, r0, r1, lsl #13
   23fe0:	cmp	r0, r1, lsl #12
   23fe4:	adc	r2, r2, r2
   23fe8:	subcs	r0, r0, r1, lsl #12
   23fec:	cmp	r0, r1, lsl #11
   23ff0:	adc	r2, r2, r2
   23ff4:	subcs	r0, r0, r1, lsl #11
   23ff8:	cmp	r0, r1, lsl #10
   23ffc:	adc	r2, r2, r2
   24000:	subcs	r0, r0, r1, lsl #10
   24004:	cmp	r0, r1, lsl #9
   24008:	adc	r2, r2, r2
   2400c:	subcs	r0, r0, r1, lsl #9
   24010:	cmp	r0, r1, lsl #8
   24014:	adc	r2, r2, r2
   24018:	subcs	r0, r0, r1, lsl #8
   2401c:	cmp	r0, r1, lsl #7
   24020:	adc	r2, r2, r2
   24024:	subcs	r0, r0, r1, lsl #7
   24028:	cmp	r0, r1, lsl #6
   2402c:	adc	r2, r2, r2
   24030:	subcs	r0, r0, r1, lsl #6
   24034:	cmp	r0, r1, lsl #5
   24038:	adc	r2, r2, r2
   2403c:	subcs	r0, r0, r1, lsl #5
   24040:	cmp	r0, r1, lsl #4
   24044:	adc	r2, r2, r2
   24048:	subcs	r0, r0, r1, lsl #4
   2404c:	cmp	r0, r1, lsl #3
   24050:	adc	r2, r2, r2
   24054:	subcs	r0, r0, r1, lsl #3
   24058:	cmp	r0, r1, lsl #2
   2405c:	adc	r2, r2, r2
   24060:	subcs	r0, r0, r1, lsl #2
   24064:	cmp	r0, r1, lsl #1
   24068:	adc	r2, r2, r2
   2406c:	subcs	r0, r0, r1, lsl #1
   24070:	cmp	r0, r1
   24074:	adc	r2, r2, r2
   24078:	subcs	r0, r0, r1
   2407c:	mov	r0, r2
   24080:	bx	lr
   24084:	moveq	r0, #1
   24088:	movne	r0, #0
   2408c:	bx	lr
   24090:	clz	r2, r1
   24094:	rsb	r2, r2, #31
   24098:	lsr	r0, r0, r2
   2409c:	bx	lr
   240a0:	cmp	r0, #0
   240a4:	mvnne	r0, #0
   240a8:	b	243e0 <__assert_fail@plt+0x12bc0>
   240ac:	cmp	r1, #0
   240b0:	beq	240a0 <__assert_fail@plt+0x12880>
   240b4:	push	{r0, r1, lr}
   240b8:	bl	23ec0 <__assert_fail@plt+0x126a0>
   240bc:	pop	{r1, r2, lr}
   240c0:	mul	r3, r2, r0
   240c4:	sub	r1, r1, r3
   240c8:	bx	lr
   240cc:	cmp	r1, #0
   240d0:	beq	242dc <__assert_fail@plt+0x12abc>
   240d4:	eor	ip, r0, r1
   240d8:	rsbmi	r1, r1, #0
   240dc:	subs	r2, r1, #1
   240e0:	beq	242a8 <__assert_fail@plt+0x12a88>
   240e4:	movs	r3, r0
   240e8:	rsbmi	r3, r0, #0
   240ec:	cmp	r3, r1
   240f0:	bls	242b4 <__assert_fail@plt+0x12a94>
   240f4:	tst	r1, r2
   240f8:	beq	242c4 <__assert_fail@plt+0x12aa4>
   240fc:	clz	r2, r3
   24100:	clz	r0, r1
   24104:	sub	r2, r0, r2
   24108:	rsbs	r2, r2, #31
   2410c:	addne	r2, r2, r2, lsl #1
   24110:	mov	r0, #0
   24114:	addne	pc, pc, r2, lsl #2
   24118:	nop			; (mov r0, r0)
   2411c:	cmp	r3, r1, lsl #31
   24120:	adc	r0, r0, r0
   24124:	subcs	r3, r3, r1, lsl #31
   24128:	cmp	r3, r1, lsl #30
   2412c:	adc	r0, r0, r0
   24130:	subcs	r3, r3, r1, lsl #30
   24134:	cmp	r3, r1, lsl #29
   24138:	adc	r0, r0, r0
   2413c:	subcs	r3, r3, r1, lsl #29
   24140:	cmp	r3, r1, lsl #28
   24144:	adc	r0, r0, r0
   24148:	subcs	r3, r3, r1, lsl #28
   2414c:	cmp	r3, r1, lsl #27
   24150:	adc	r0, r0, r0
   24154:	subcs	r3, r3, r1, lsl #27
   24158:	cmp	r3, r1, lsl #26
   2415c:	adc	r0, r0, r0
   24160:	subcs	r3, r3, r1, lsl #26
   24164:	cmp	r3, r1, lsl #25
   24168:	adc	r0, r0, r0
   2416c:	subcs	r3, r3, r1, lsl #25
   24170:	cmp	r3, r1, lsl #24
   24174:	adc	r0, r0, r0
   24178:	subcs	r3, r3, r1, lsl #24
   2417c:	cmp	r3, r1, lsl #23
   24180:	adc	r0, r0, r0
   24184:	subcs	r3, r3, r1, lsl #23
   24188:	cmp	r3, r1, lsl #22
   2418c:	adc	r0, r0, r0
   24190:	subcs	r3, r3, r1, lsl #22
   24194:	cmp	r3, r1, lsl #21
   24198:	adc	r0, r0, r0
   2419c:	subcs	r3, r3, r1, lsl #21
   241a0:	cmp	r3, r1, lsl #20
   241a4:	adc	r0, r0, r0
   241a8:	subcs	r3, r3, r1, lsl #20
   241ac:	cmp	r3, r1, lsl #19
   241b0:	adc	r0, r0, r0
   241b4:	subcs	r3, r3, r1, lsl #19
   241b8:	cmp	r3, r1, lsl #18
   241bc:	adc	r0, r0, r0
   241c0:	subcs	r3, r3, r1, lsl #18
   241c4:	cmp	r3, r1, lsl #17
   241c8:	adc	r0, r0, r0
   241cc:	subcs	r3, r3, r1, lsl #17
   241d0:	cmp	r3, r1, lsl #16
   241d4:	adc	r0, r0, r0
   241d8:	subcs	r3, r3, r1, lsl #16
   241dc:	cmp	r3, r1, lsl #15
   241e0:	adc	r0, r0, r0
   241e4:	subcs	r3, r3, r1, lsl #15
   241e8:	cmp	r3, r1, lsl #14
   241ec:	adc	r0, r0, r0
   241f0:	subcs	r3, r3, r1, lsl #14
   241f4:	cmp	r3, r1, lsl #13
   241f8:	adc	r0, r0, r0
   241fc:	subcs	r3, r3, r1, lsl #13
   24200:	cmp	r3, r1, lsl #12
   24204:	adc	r0, r0, r0
   24208:	subcs	r3, r3, r1, lsl #12
   2420c:	cmp	r3, r1, lsl #11
   24210:	adc	r0, r0, r0
   24214:	subcs	r3, r3, r1, lsl #11
   24218:	cmp	r3, r1, lsl #10
   2421c:	adc	r0, r0, r0
   24220:	subcs	r3, r3, r1, lsl #10
   24224:	cmp	r3, r1, lsl #9
   24228:	adc	r0, r0, r0
   2422c:	subcs	r3, r3, r1, lsl #9
   24230:	cmp	r3, r1, lsl #8
   24234:	adc	r0, r0, r0
   24238:	subcs	r3, r3, r1, lsl #8
   2423c:	cmp	r3, r1, lsl #7
   24240:	adc	r0, r0, r0
   24244:	subcs	r3, r3, r1, lsl #7
   24248:	cmp	r3, r1, lsl #6
   2424c:	adc	r0, r0, r0
   24250:	subcs	r3, r3, r1, lsl #6
   24254:	cmp	r3, r1, lsl #5
   24258:	adc	r0, r0, r0
   2425c:	subcs	r3, r3, r1, lsl #5
   24260:	cmp	r3, r1, lsl #4
   24264:	adc	r0, r0, r0
   24268:	subcs	r3, r3, r1, lsl #4
   2426c:	cmp	r3, r1, lsl #3
   24270:	adc	r0, r0, r0
   24274:	subcs	r3, r3, r1, lsl #3
   24278:	cmp	r3, r1, lsl #2
   2427c:	adc	r0, r0, r0
   24280:	subcs	r3, r3, r1, lsl #2
   24284:	cmp	r3, r1, lsl #1
   24288:	adc	r0, r0, r0
   2428c:	subcs	r3, r3, r1, lsl #1
   24290:	cmp	r3, r1
   24294:	adc	r0, r0, r0
   24298:	subcs	r3, r3, r1
   2429c:	cmp	ip, #0
   242a0:	rsbmi	r0, r0, #0
   242a4:	bx	lr
   242a8:	teq	ip, r0
   242ac:	rsbmi	r0, r0, #0
   242b0:	bx	lr
   242b4:	movcc	r0, #0
   242b8:	asreq	r0, ip, #31
   242bc:	orreq	r0, r0, #1
   242c0:	bx	lr
   242c4:	clz	r2, r1
   242c8:	rsb	r2, r2, #31
   242cc:	cmp	ip, #0
   242d0:	lsr	r0, r3, r2
   242d4:	rsbmi	r0, r0, #0
   242d8:	bx	lr
   242dc:	cmp	r0, #0
   242e0:	mvngt	r0, #-2147483648	; 0x80000000
   242e4:	movlt	r0, #-2147483648	; 0x80000000
   242e8:	b	243e0 <__assert_fail@plt+0x12bc0>
   242ec:	cmp	r1, #0
   242f0:	beq	242dc <__assert_fail@plt+0x12abc>
   242f4:	push	{r0, r1, lr}
   242f8:	bl	240d4 <__assert_fail@plt+0x128b4>
   242fc:	pop	{r1, r2, lr}
   24300:	mul	r3, r2, r0
   24304:	sub	r1, r1, r3
   24308:	bx	lr
   2430c:	cmp	r3, #0
   24310:	cmpeq	r2, #0
   24314:	bne	24338 <__assert_fail@plt+0x12b18>
   24318:	cmp	r1, #0
   2431c:	movlt	r1, #-2147483648	; 0x80000000
   24320:	movlt	r0, #0
   24324:	blt	24334 <__assert_fail@plt+0x12b14>
   24328:	cmpeq	r0, #0
   2432c:	mvnne	r1, #-2147483648	; 0x80000000
   24330:	mvnne	r0, #0
   24334:	b	243e0 <__assert_fail@plt+0x12bc0>
   24338:	sub	sp, sp, #8
   2433c:	push	{sp, lr}
   24340:	cmp	r1, #0
   24344:	blt	24364 <__assert_fail@plt+0x12b44>
   24348:	cmp	r3, #0
   2434c:	blt	24398 <__assert_fail@plt+0x12b78>
   24350:	bl	243f0 <__assert_fail@plt+0x12bd0>
   24354:	ldr	lr, [sp, #4]
   24358:	add	sp, sp, #8
   2435c:	pop	{r2, r3}
   24360:	bx	lr
   24364:	rsbs	r0, r0, #0
   24368:	sbc	r1, r1, r1, lsl #1
   2436c:	cmp	r3, #0
   24370:	blt	243bc <__assert_fail@plt+0x12b9c>
   24374:	bl	243f0 <__assert_fail@plt+0x12bd0>
   24378:	ldr	lr, [sp, #4]
   2437c:	add	sp, sp, #8
   24380:	pop	{r2, r3}
   24384:	rsbs	r0, r0, #0
   24388:	sbc	r1, r1, r1, lsl #1
   2438c:	rsbs	r2, r2, #0
   24390:	sbc	r3, r3, r3, lsl #1
   24394:	bx	lr
   24398:	rsbs	r2, r2, #0
   2439c:	sbc	r3, r3, r3, lsl #1
   243a0:	bl	243f0 <__assert_fail@plt+0x12bd0>
   243a4:	ldr	lr, [sp, #4]
   243a8:	add	sp, sp, #8
   243ac:	pop	{r2, r3}
   243b0:	rsbs	r0, r0, #0
   243b4:	sbc	r1, r1, r1, lsl #1
   243b8:	bx	lr
   243bc:	rsbs	r2, r2, #0
   243c0:	sbc	r3, r3, r3, lsl #1
   243c4:	bl	243f0 <__assert_fail@plt+0x12bd0>
   243c8:	ldr	lr, [sp, #4]
   243cc:	add	sp, sp, #8
   243d0:	pop	{r2, r3}
   243d4:	rsbs	r2, r2, #0
   243d8:	sbc	r3, r3, r3, lsl #1
   243dc:	bx	lr
   243e0:	push	{r1, lr}
   243e4:	mov	r0, #8
   243e8:	bl	1140c <raise@plt>
   243ec:	pop	{r1, pc}
   243f0:	cmp	r1, r3
   243f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   243f8:	cmpeq	r0, r2
   243fc:	mov	r4, r0
   24400:	mov	r5, r1
   24404:	ldr	r9, [sp, #28]
   24408:	movcc	r0, #0
   2440c:	movcc	r1, #0
   24410:	bcc	24508 <__assert_fail@plt+0x12ce8>
   24414:	cmp	r3, #0
   24418:	clzeq	ip, r2
   2441c:	clzne	ip, r3
   24420:	addeq	ip, ip, #32
   24424:	cmp	r5, #0
   24428:	clzeq	r1, r4
   2442c:	addeq	r1, r1, #32
   24430:	clzne	r1, r5
   24434:	sub	ip, ip, r1
   24438:	sub	lr, ip, #32
   2443c:	lsl	r7, r3, ip
   24440:	rsb	r8, ip, #32
   24444:	orr	r7, r7, r2, lsl lr
   24448:	orr	r7, r7, r2, lsr r8
   2444c:	lsl	r6, r2, ip
   24450:	cmp	r5, r7
   24454:	cmpeq	r4, r6
   24458:	movcc	r0, #0
   2445c:	movcc	r1, #0
   24460:	bcc	2447c <__assert_fail@plt+0x12c5c>
   24464:	mov	r3, #1
   24468:	subs	r4, r4, r6
   2446c:	lsl	r1, r3, lr
   24470:	lsl	r0, r3, ip
   24474:	orr	r1, r1, r3, lsr r8
   24478:	sbc	r5, r5, r7
   2447c:	cmp	ip, #0
   24480:	beq	24508 <__assert_fail@plt+0x12ce8>
   24484:	lsrs	r3, r7, #1
   24488:	rrx	r2, r6
   2448c:	mov	r6, ip
   24490:	b	244b4 <__assert_fail@plt+0x12c94>
   24494:	subs	r4, r4, r2
   24498:	sbc	r5, r5, r3
   2449c:	adds	r4, r4, r4
   244a0:	adc	r5, r5, r5
   244a4:	adds	r4, r4, #1
   244a8:	adc	r5, r5, #0
   244ac:	subs	r6, r6, #1
   244b0:	beq	244d0 <__assert_fail@plt+0x12cb0>
   244b4:	cmp	r5, r3
   244b8:	cmpeq	r4, r2
   244bc:	bcs	24494 <__assert_fail@plt+0x12c74>
   244c0:	adds	r4, r4, r4
   244c4:	adc	r5, r5, r5
   244c8:	subs	r6, r6, #1
   244cc:	bne	244b4 <__assert_fail@plt+0x12c94>
   244d0:	lsr	r6, r4, ip
   244d4:	lsr	r7, r5, ip
   244d8:	orr	r6, r6, r5, lsl r8
   244dc:	adds	r2, r0, r4
   244e0:	orr	r6, r6, r5, lsr lr
   244e4:	adc	r3, r1, r5
   244e8:	lsl	r1, r7, ip
   244ec:	orr	r1, r1, r6, lsl lr
   244f0:	lsl	r0, r6, ip
   244f4:	orr	r1, r1, r6, lsr r8
   244f8:	subs	r0, r2, r0
   244fc:	mov	r4, r6
   24500:	mov	r5, r7
   24504:	sbc	r1, r3, r1
   24508:	cmp	r9, #0
   2450c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   24510:	strd	r4, [r9]
   24514:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24518:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2451c:	mov	r7, r0
   24520:	ldr	r6, [pc, #72]	; 24570 <__assert_fail@plt+0x12d50>
   24524:	ldr	r5, [pc, #72]	; 24574 <__assert_fail@plt+0x12d54>
   24528:	add	r6, pc, r6
   2452c:	add	r5, pc, r5
   24530:	sub	r6, r6, r5
   24534:	mov	r8, r1
   24538:	mov	r9, r2
   2453c:	bl	113d4 <calloc@plt-0x20>
   24540:	asrs	r6, r6, #2
   24544:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24548:	mov	r4, #0
   2454c:	add	r4, r4, #1
   24550:	ldr	r3, [r5], #4
   24554:	mov	r2, r9
   24558:	mov	r1, r8
   2455c:	mov	r0, r7
   24560:	blx	r3
   24564:	cmp	r6, r4
   24568:	bne	2454c <__assert_fail@plt+0x12d2c>
   2456c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24570:	ldrdeq	r2, [r1], -r8
   24574:	ldrdeq	r2, [r1], -r0
   24578:	bx	lr
   2457c:	ldr	r3, [pc, #12]	; 24590 <__assert_fail@plt+0x12d70>
   24580:	mov	r1, #0
   24584:	add	r3, pc, r3
   24588:	ldr	r2, [r3]
   2458c:	b	11694 <__cxa_atexit@plt>
   24590:	strdeq	r2, [r1], -r0

Disassembly of section .fini:

00024594 <.fini>:
   24594:	push	{r3, lr}
   24598:	pop	{r3, pc}
