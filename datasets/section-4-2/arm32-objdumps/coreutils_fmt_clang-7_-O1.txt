
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e68 <.init>:
   10e68:	push	{r3, lr}
   10e6c:	bl	1114c <__assert_fail@plt+0x48>
   10e70:	pop	{r3, pc}

Disassembly of section .plt:

00010e74 <calloc@plt-0x14>:
   10e74:	push	{lr}		; (str lr, [sp, #-4]!)
   10e78:	ldr	lr, [pc, #4]	; 10e84 <calloc@plt-0x4>
   10e7c:	add	lr, pc, lr
   10e80:	ldr	pc, [lr, #8]!
   10e84:	andeq	r6, r1, ip, ror r1

00010e88 <calloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #380]!	; 0x17c

00010e94 <fputs_unlocked@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #372]!	; 0x174

00010ea0 <raise@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #364]!	; 0x16c

00010eac <strcmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #356]!	; 0x164

00010eb8 <posix_fadvise64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #348]!	; 0x15c

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #340]!	; 0x154

00010ed0 <memmove@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #332]!	; 0x14c

00010edc <free@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #324]!	; 0x144

00010ee8 <_exit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #316]!	; 0x13c

00010ef4 <memcpy@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #308]!	; 0x134

00010f00 <mbsinit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #300]!	; 0x12c

00010f0c <fwrite_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #292]!	; 0x124

00010f18 <memcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #284]!	; 0x11c

00010f24 <getc_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #276]!	; 0x114

00010f30 <dcgettext@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #268]!	; 0x10c

00010f3c <realloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #260]!	; 0x104

00010f48 <textdomain@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #252]!	; 0xfc

00010f54 <iswprint@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #244]!	; 0xf4

00010f60 <fwrite@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #236]!	; 0xec

00010f6c <lseek64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #228]!	; 0xe4

00010f78 <__ctype_get_mb_cur_max@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #220]!	; 0xdc

00010f84 <__fpending@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #212]!	; 0xd4

00010f90 <ferror_unlocked@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #204]!	; 0xcc

00010f9c <mbrtowc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #196]!	; 0xc4

00010fa8 <error@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #188]!	; 0xbc

00010fb4 <malloc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #180]!	; 0xb4

00010fc0 <__libc_start_main@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #172]!	; 0xac

00010fcc <__freading@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #164]!	; 0xa4

00010fd8 <__gmon_start__@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #156]!	; 0x9c

00010fe4 <getopt_long@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #148]!	; 0x94

00010ff0 <__ctype_b_loc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #140]!	; 0x8c

00010ffc <exit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #132]!	; 0x84

00011008 <strlen@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #124]!	; 0x7c

00011014 <strchr@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #116]!	; 0x74

00011020 <__errno_location@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #108]!	; 0x6c

0001102c <__cxa_atexit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #100]!	; 0x64

00011038 <memset@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #92]!	; 0x5c

00011044 <__printf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #84]!	; 0x54

00011050 <fileno@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #76]!	; 0x4c

0001105c <strtoumax@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #68]!	; 0x44

00011068 <__fprintf_chk@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #60]!	; 0x3c

00011074 <memchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #52]!	; 0x34

00011080 <fclose@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #44]!	; 0x2c

0001108c <fseeko64@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #36]!	; 0x24

00011098 <setlocale@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #28]!

000110a4 <strrchr@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #20]!

000110b0 <nl_langinfo@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #12]!

000110bc <clearerr_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4]!

000110c8 <fopen64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #4092]!	; 0xffc

000110d4 <bindtextdomain@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #4084]!	; 0xff4

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4076]!	; 0xfec

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f8 <putchar_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #4060]!	; 0xfdc

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #4052]!	; 0xfd4

Disassembly of section .text:

00011110 <.text>:
   11110:	mov	fp, #0
   11114:	mov	lr, #0
   11118:	pop	{r1}		; (ldr r1, [sp], #4)
   1111c:	mov	r2, sp
   11120:	push	{r2}		; (str r2, [sp, #-4]!)
   11124:	push	{r0}		; (str r0, [sp, #-4]!)
   11128:	ldr	ip, [pc, #16]	; 11140 <__assert_fail@plt+0x3c>
   1112c:	push	{ip}		; (str ip, [sp, #-4]!)
   11130:	ldr	r0, [pc, #12]	; 11144 <__assert_fail@plt+0x40>
   11134:	ldr	r3, [pc, #12]	; 11148 <__assert_fail@plt+0x44>
   11138:	bl	10fc0 <__libc_start_main@plt>
   1113c:	bl	110ec <abort@plt>
   11140:	andeq	r6, r1, r4, lsr r1
   11144:	andeq	r1, r1, r0, lsl r5
   11148:	ldrdeq	r6, [r1], -r4
   1114c:	ldr	r3, [pc, #20]	; 11168 <__assert_fail@plt+0x64>
   11150:	ldr	r2, [pc, #20]	; 1116c <__assert_fail@plt+0x68>
   11154:	add	r3, pc, r3
   11158:	ldr	r2, [r3, r2]
   1115c:	cmp	r2, #0
   11160:	bxeq	lr
   11164:	b	10fd8 <__gmon_start__@plt>
   11168:	andeq	r5, r1, r4, lsr #29
   1116c:	andeq	r0, r0, r4, ror #1
   11170:	ldr	r0, [pc, #24]	; 11190 <__assert_fail@plt+0x8c>
   11174:	ldr	r3, [pc, #24]	; 11194 <__assert_fail@plt+0x90>
   11178:	cmp	r3, r0
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0x94>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r7, r2, r8, lsr r1
   11194:	andeq	r7, r2, r8, lsr r1
   11198:	andeq	r0, r0, r0
   1119c:	ldr	r0, [pc, #36]	; 111c8 <__assert_fail@plt+0xc4>
   111a0:	ldr	r1, [pc, #36]	; 111cc <__assert_fail@plt+0xc8>
   111a4:	sub	r1, r1, r0
   111a8:	asr	r1, r1, #2
   111ac:	add	r1, r1, r1, lsr #31
   111b0:	asrs	r1, r1, #1
   111b4:	bxeq	lr
   111b8:	ldr	r3, [pc, #16]	; 111d0 <__assert_fail@plt+0xcc>
   111bc:	cmp	r3, #0
   111c0:	bxeq	lr
   111c4:	bx	r3
   111c8:	andeq	r7, r2, r8, lsr r1
   111cc:	andeq	r7, r2, r8, lsr r1
   111d0:	andeq	r0, r0, r0
   111d4:	push	{r4, lr}
   111d8:	ldr	r4, [pc, #24]	; 111f8 <__assert_fail@plt+0xf4>
   111dc:	ldrb	r3, [r4]
   111e0:	cmp	r3, #0
   111e4:	popne	{r4, pc}
   111e8:	bl	11170 <__assert_fail@plt+0x6c>
   111ec:	mov	r3, #1
   111f0:	strb	r3, [r4]
   111f4:	pop	{r4, pc}
   111f8:	andeq	r7, r2, ip, asr r1
   111fc:	b	1119c <__assert_fail@plt+0x98>
   11200:	push	{fp, lr}
   11204:	mov	fp, sp
   11208:	mov	r4, r0
   1120c:	cmp	r0, #0
   11210:	bne	112e8 <__assert_fail@plt+0x1e4>
   11214:	movw	r1, #24963	; 0x6183
   11218:	movt	r1, #1
   1121c:	mov	r0, #0
   11220:	mov	r2, #5
   11224:	bl	10f30 <dcgettext@plt>
   11228:	mov	r1, r0
   1122c:	movw	r0, #62108	; 0xf29c
   11230:	movt	r0, #2
   11234:	ldr	r2, [r0]
   11238:	mov	r0, #1
   1123c:	bl	11044 <__printf_chk@plt>
   11240:	movw	r1, #25005	; 0x61ad
   11244:	movt	r1, #1
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	bl	10f30 <dcgettext@plt>
   11254:	movw	r5, #29012	; 0x7154
   11258:	movt	r5, #2
   1125c:	ldr	r1, [r5]
   11260:	bl	10e94 <fputs_unlocked@plt>
   11264:	bl	1132c <__assert_fail@plt+0x228>
   11268:	bl	1135c <__assert_fail@plt+0x258>
   1126c:	movw	r1, #25134	; 0x622e
   11270:	movt	r1, #1
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	bl	10f30 <dcgettext@plt>
   11280:	ldr	r1, [r5]
   11284:	bl	10e94 <fputs_unlocked@plt>
   11288:	movw	r1, #25412	; 0x6344
   1128c:	movt	r1, #1
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	bl	10f30 <dcgettext@plt>
   1129c:	ldr	r1, [r5]
   112a0:	bl	10e94 <fputs_unlocked@plt>
   112a4:	movw	r1, #25698	; 0x6462
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	bl	10f30 <dcgettext@plt>
   112b8:	ldr	r1, [r5]
   112bc:	bl	10e94 <fputs_unlocked@plt>
   112c0:	movw	r1, #25743	; 0x648f
   112c4:	movt	r1, #1
   112c8:	mov	r0, #0
   112cc:	mov	r2, #5
   112d0:	bl	10f30 <dcgettext@plt>
   112d4:	ldr	r1, [r5]
   112d8:	bl	10e94 <fputs_unlocked@plt>
   112dc:	bl	1138c <__assert_fail@plt+0x288>
   112e0:	mov	r0, r4
   112e4:	bl	10ffc <exit@plt>
   112e8:	movw	r0, #29000	; 0x7148
   112ec:	movt	r0, #2
   112f0:	ldr	r5, [r0]
   112f4:	movw	r1, #24924	; 0x615c
   112f8:	movt	r1, #1
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	bl	10f30 <dcgettext@plt>
   11308:	mov	r2, r0
   1130c:	movw	r0, #62108	; 0xf29c
   11310:	movt	r0, #2
   11314:	ldr	r3, [r0]
   11318:	mov	r0, r5
   1131c:	mov	r1, #1
   11320:	bl	11068 <__fprintf_chk@plt>
   11324:	mov	r0, r4
   11328:	bl	10ffc <exit@plt>
   1132c:	push	{fp, lr}
   11330:	mov	fp, sp
   11334:	movw	r1, #26032	; 0x65b0
   11338:	movt	r1, #1
   1133c:	mov	r0, #0
   11340:	mov	r2, #5
   11344:	bl	10f30 <dcgettext@plt>
   11348:	movw	r1, #29012	; 0x7154
   1134c:	movt	r1, #2
   11350:	ldr	r1, [r1]
   11354:	pop	{fp, lr}
   11358:	b	10e94 <fputs_unlocked@plt>
   1135c:	push	{fp, lr}
   11360:	mov	fp, sp
   11364:	movw	r1, #26088	; 0x65e8
   11368:	movt	r1, #1
   1136c:	mov	r0, #0
   11370:	mov	r2, #5
   11374:	bl	10f30 <dcgettext@plt>
   11378:	movw	r1, #29012	; 0x7154
   1137c:	movt	r1, #2
   11380:	ldr	r1, [r1]
   11384:	pop	{fp, lr}
   11388:	b	10e94 <fputs_unlocked@plt>
   1138c:	push	{r4, r5, fp, lr}
   11390:	add	fp, sp, #8
   11394:	sub	sp, sp, #56	; 0x38
   11398:	movw	r0, #26800	; 0x68b0
   1139c:	movt	r0, #1
   113a0:	add	r1, r0, #32
   113a4:	mov	r5, sp
   113a8:	mov	r2, #48	; 0x30
   113ac:	vld1.64	{d16-d17}, [r1]
   113b0:	add	r1, r5, #32
   113b4:	add	r3, r0, #16
   113b8:	vld1.64	{d18-d19}, [r0], r2
   113bc:	vld1.64	{d20-d21}, [r3]
   113c0:	vldr	d22, [r0]
   113c4:	vst1.64	{d16-d17}, [r1]
   113c8:	add	r0, r5, #16
   113cc:	vst1.64	{d20-d21}, [r0]
   113d0:	mov	r0, r5
   113d4:	vst1.64	{d18-d19}, [r0], r2
   113d8:	vstr	d22, [r0]
   113dc:	ldr	r1, [sp]
   113e0:	cmp	r1, #0
   113e4:	beq	1140c <__assert_fail@plt+0x308>
   113e8:	mov	r5, sp
   113ec:	movw	r4, #25797	; 0x64c5
   113f0:	movt	r4, #1
   113f4:	mov	r0, r4
   113f8:	bl	10eac <strcmp@plt>
   113fc:	cmp	r0, #0
   11400:	ldrne	r1, [r5, #8]!
   11404:	cmpne	r1, #0
   11408:	bne	113f4 <__assert_fail@plt+0x2f0>
   1140c:	ldr	r4, [r5, #4]
   11410:	movw	r1, #26258	; 0x6692
   11414:	movt	r1, #1
   11418:	mov	r0, #0
   1141c:	mov	r2, #5
   11420:	bl	10f30 <dcgettext@plt>
   11424:	mov	r1, r0
   11428:	movw	r2, #25940	; 0x6554
   1142c:	movt	r2, #1
   11430:	movw	r3, #26281	; 0x66a9
   11434:	movt	r3, #1
   11438:	mov	r0, #1
   1143c:	bl	11044 <__printf_chk@plt>
   11440:	movw	r5, #25797	; 0x64c5
   11444:	movt	r5, #1
   11448:	cmp	r4, #0
   1144c:	moveq	r4, r5
   11450:	mov	r0, #5
   11454:	mov	r1, #0
   11458:	bl	11098 <setlocale@plt>
   1145c:	cmp	r0, #0
   11460:	beq	114a0 <__assert_fail@plt+0x39c>
   11464:	movw	r1, #26321	; 0x66d1
   11468:	movt	r1, #1
   1146c:	mov	r2, #3
   11470:	bl	110e0 <strncmp@plt>
   11474:	cmp	r0, #0
   11478:	beq	114a0 <__assert_fail@plt+0x39c>
   1147c:	movw	r1, #26325	; 0x66d5
   11480:	movt	r1, #1
   11484:	mov	r0, #0
   11488:	mov	r2, #5
   1148c:	bl	10f30 <dcgettext@plt>
   11490:	movw	r1, #29012	; 0x7154
   11494:	movt	r1, #2
   11498:	ldr	r1, [r1]
   1149c:	bl	10e94 <fputs_unlocked@plt>
   114a0:	movw	r1, #26396	; 0x671c
   114a4:	movt	r1, #1
   114a8:	mov	r0, #0
   114ac:	mov	r2, #5
   114b0:	bl	10f30 <dcgettext@plt>
   114b4:	mov	r1, r0
   114b8:	movw	r2, #26281	; 0x66a9
   114bc:	movt	r2, #1
   114c0:	mov	r0, #1
   114c4:	mov	r3, r5
   114c8:	bl	11044 <__printf_chk@plt>
   114cc:	movw	r1, #26423	; 0x6737
   114d0:	movt	r1, #1
   114d4:	mov	r0, #0
   114d8:	mov	r2, #5
   114dc:	bl	10f30 <dcgettext@plt>
   114e0:	mov	r1, r0
   114e4:	movw	r0, #26191	; 0x664f
   114e8:	movt	r0, #1
   114ec:	movw	r3, #26473	; 0x6769
   114f0:	movt	r3, #1
   114f4:	cmp	r4, r5
   114f8:	moveq	r3, r0
   114fc:	mov	r0, #1
   11500:	mov	r2, r4
   11504:	bl	11044 <__printf_chk@plt>
   11508:	sub	sp, fp, #8
   1150c:	pop	{r4, r5, fp, pc}
   11510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11514:	add	fp, sp, #28
   11518:	sub	sp, sp, #36	; 0x24
   1151c:	mov	r6, r1
   11520:	mov	r4, r0
   11524:	ldr	r0, [r1]
   11528:	bl	12d54 <__assert_fail@plt+0x1c50>
   1152c:	movw	r7, #26473	; 0x6769
   11530:	movt	r7, #1
   11534:	mov	r0, #6
   11538:	mov	r1, r7
   1153c:	bl	11098 <setlocale@plt>
   11540:	movw	r5, #25944	; 0x6558
   11544:	movt	r5, #1
   11548:	movw	r1, #25801	; 0x64c9
   1154c:	movt	r1, #1
   11550:	mov	r0, r5
   11554:	bl	110d4 <bindtextdomain@plt>
   11558:	mov	r0, r5
   1155c:	bl	10f48 <textdomain@plt>
   11560:	movw	r0, #10880	; 0x2a80
   11564:	movt	r0, #1
   11568:	bl	16138 <__assert_fail@plt+0x5034>
   1156c:	movw	r0, #29024	; 0x7160
   11570:	movt	r0, #2
   11574:	mov	r9, #0
   11578:	strb	r9, [r0]
   1157c:	movw	r0, #29025	; 0x7161
   11580:	movt	r0, #2
   11584:	strb	r9, [r0]
   11588:	movw	r0, #29026	; 0x7162
   1158c:	movt	r0, #2
   11590:	strb	r9, [r0]
   11594:	movw	r0, #29027	; 0x7163
   11598:	movt	r0, #2
   1159c:	strb	r9, [r0]
   115a0:	movw	r1, #29028	; 0x7164
   115a4:	movt	r1, #2
   115a8:	mov	r0, #75	; 0x4b
   115ac:	str	r0, [r1]
   115b0:	movw	r0, #29032	; 0x7168
   115b4:	movt	r0, #2
   115b8:	str	r7, [r0]
   115bc:	movw	r0, #29036	; 0x716c
   115c0:	movt	r0, #2
   115c4:	str	r9, [r0]
   115c8:	movw	r0, #29040	; 0x7170
   115cc:	movt	r0, #2
   115d0:	str	r9, [r0]
   115d4:	movw	r0, #29044	; 0x7174
   115d8:	movt	r0, #2
   115dc:	str	r9, [r0]
   115e0:	cmp	r4, #2
   115e4:	blt	1161c <__assert_fail@plt+0x518>
   115e8:	mov	r5, r6
   115ec:	ldr	sl, [r5, #4]!
   115f0:	ldrb	r0, [sl]
   115f4:	cmp	r0, #45	; 0x2d
   115f8:	bne	1161c <__assert_fail@plt+0x518>
   115fc:	ldrb	r0, [sl, #1]!
   11600:	sub	r0, r0, #48	; 0x30
   11604:	cmp	r0, #9
   11608:	bhi	1161c <__assert_fail@plt+0x518>
   1160c:	ldr	r0, [r6]
   11610:	str	r0, [r6, #4]
   11614:	sub	r4, r4, #1
   11618:	b	11624 <__assert_fail@plt+0x520>
   1161c:	mov	r5, r6
   11620:	mov	sl, #0
   11624:	movw	r6, #25825	; 0x64e1
   11628:	movt	r6, #1
   1162c:	movw	r7, #26640	; 0x6810
   11630:	movt	r7, #1
   11634:	mov	r0, #0
   11638:	b	11648 <__assert_fail@plt+0x544>
   1163c:	movw	r0, #29016	; 0x7158
   11640:	movt	r0, #2
   11644:	ldr	r0, [r0]
   11648:	str	r0, [sp, #32]
   1164c:	b	11658 <__assert_fail@plt+0x554>
   11650:	mov	r1, #1
   11654:	strb	r1, [r0]
   11658:	str	r9, [sp]
   1165c:	mov	r0, r4
   11660:	mov	r1, r5
   11664:	mov	r2, r6
   11668:	mov	r3, r7
   1166c:	bl	10fe4 <getopt_long@plt>
   11670:	mov	r8, r0
   11674:	cmp	r0, #98	; 0x62
   11678:	ble	11738 <__assert_fail@plt+0x634>
   1167c:	sub	r0, r8, #99	; 0x63
   11680:	cmp	r0, #20
   11684:	bhi	11a0c <__assert_fail@plt+0x908>
   11688:	add	r1, pc, #0
   1168c:	ldr	pc, [r1, r0, lsl #2]
   11690:	andeq	r1, r1, r4, ror #13
   11694:	andeq	r1, r1, ip, lsl #20
   11698:	andeq	r1, r1, ip, lsl #20
   1169c:	andeq	r1, r1, ip, lsl #20
   116a0:	andeq	r1, r1, ip, lsr r6
   116a4:	andeq	r1, r1, ip, lsl #20
   116a8:	andeq	r1, r1, ip, lsl #20
   116ac:	andeq	r1, r1, ip, lsl #20
   116b0:	andeq	r1, r1, ip, lsl #20
   116b4:	andeq	r1, r1, ip, lsl #20
   116b8:	andeq	r1, r1, ip, lsl #20
   116bc:	andeq	r1, r1, ip, lsl #20
   116c0:	andeq	r1, r1, ip, lsl #20
   116c4:	strdeq	r1, [r1], -ip
   116c8:	andeq	r1, r1, ip, lsl #20
   116cc:	andeq	r1, r1, ip, lsl #20
   116d0:	strdeq	r1, [r1], -r0
   116d4:	andeq	r1, r1, ip, lsr #14
   116d8:	andeq	r1, r1, r0, lsl r7
   116dc:	andeq	r1, r1, ip, lsl #20
   116e0:	andeq	r1, r1, ip, lsl r7
   116e4:	movw	r0, #29027	; 0x7163
   116e8:	movt	r0, #2
   116ec:	b	11650 <__assert_fail@plt+0x54c>
   116f0:	movw	r0, #29025	; 0x7161
   116f4:	movt	r0, #2
   116f8:	b	11650 <__assert_fail@plt+0x54c>
   116fc:	movw	r0, #29016	; 0x7158
   11700:	movt	r0, #2
   11704:	ldr	r0, [r0]
   11708:	bl	11a48 <__assert_fail@plt+0x944>
   1170c:	b	11658 <__assert_fail@plt+0x554>
   11710:	movw	r0, #29024	; 0x7160
   11714:	movt	r0, #2
   11718:	b	11650 <__assert_fail@plt+0x54c>
   1171c:	movw	r0, #29016	; 0x7158
   11720:	movt	r0, #2
   11724:	ldr	sl, [r0]
   11728:	b	11658 <__assert_fail@plt+0x554>
   1172c:	movw	r0, #29026	; 0x7162
   11730:	movt	r0, #2
   11734:	b	11650 <__assert_fail@plt+0x54c>
   11738:	cmn	r8, #1
   1173c:	bne	119ac <__assert_fail@plt+0x8a8>
   11740:	cmp	sl, #0
   11744:	movw	r7, #26473	; 0x6769
   11748:	movt	r7, #1
   1174c:	movw	r9, #29028	; 0x7164
   11750:	movt	r9, #2
   11754:	beq	11794 <__assert_fail@plt+0x690>
   11758:	mov	r6, #0
   1175c:	movw	r1, #25968	; 0x6570
   11760:	movt	r1, #1
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	bl	10f30 <dcgettext@plt>
   11770:	movw	r1, #2500	; 0x9c4
   11774:	stm	sp, {r1, r6, r7}
   11778:	str	r0, [sp, #12]
   1177c:	str	r6, [sp, #16]
   11780:	mov	r0, sl
   11784:	mov	r2, #0
   11788:	mov	r3, #0
   1178c:	bl	15348 <__assert_fail@plt+0x4244>
   11790:	str	r0, [r9]
   11794:	ldr	r6, [r9]
   11798:	ldr	r8, [sp, #32]
   1179c:	cmp	r8, #0
   117a0:	beq	117fc <__assert_fail@plt+0x6f8>
   117a4:	movw	r1, #25968	; 0x6570
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	10f30 <dcgettext@plt>
   117b8:	asr	r1, r6, #31
   117bc:	str	r6, [sp]
   117c0:	stmib	sp, {r1, r7}
   117c4:	str	r0, [sp, #12]
   117c8:	mov	r0, #0
   117cc:	str	r0, [sp, #16]
   117d0:	mov	r0, r8
   117d4:	mov	r2, #0
   117d8:	mov	r3, #0
   117dc:	bl	15348 <__assert_fail@plt+0x4244>
   117e0:	movw	r1, #29048	; 0x7178
   117e4:	movt	r1, #2
   117e8:	str	r0, [r1]
   117ec:	cmp	sl, #0
   117f0:	addeq	r0, r0, #10
   117f4:	streq	r0, [r9]
   117f8:	b	11824 <__assert_fail@plt+0x720>
   117fc:	mov	r0, #187	; 0xbb
   11800:	mul	r0, r6, r0
   11804:	movw	r1, #34079	; 0x851f
   11808:	movt	r1, #20971	; 0x51eb
   1180c:	smmul	r0, r0, r1
   11810:	asr	r1, r0, #6
   11814:	add	r0, r1, r0, lsr #31
   11818:	movw	r1, #29048	; 0x7178
   1181c:	movt	r1, #2
   11820:	str	r0, [r1]
   11824:	movw	sl, #28992	; 0x7140
   11828:	movt	sl, #2
   1182c:	ldr	r0, [sl]
   11830:	cmp	r0, r4
   11834:	bne	118a0 <__assert_fail@plt+0x79c>
   11838:	movw	r0, #29008	; 0x7150
   1183c:	movt	r0, #2
   11840:	ldr	r0, [r0]
   11844:	movw	r1, #26956	; 0x694c
   11848:	movt	r1, #1
   1184c:	bl	11ae0 <__assert_fail@plt+0x9dc>
   11850:	mov	r6, r0
   11854:	movw	r0, #29008	; 0x7150
   11858:	movt	r0, #2
   1185c:	ldr	r0, [r0]
   11860:	bl	12ba8 <__assert_fail@plt+0x1aa4>
   11864:	cmp	r0, #0
   11868:	beq	119a0 <__assert_fail@plt+0x89c>
   1186c:	bl	11020 <__errno_location@plt>
   11870:	ldr	r4, [r0]
   11874:	movw	r1, #26009	; 0x6599
   11878:	movt	r1, #1
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	bl	10f30 <dcgettext@plt>
   11888:	mov	r3, r0
   1188c:	movw	r2, #26887	; 0x6907
   11890:	movt	r2, #1
   11894:	mov	r0, #1
   11898:	mov	r1, r4
   1189c:	bl	10fa8 <error@plt>
   118a0:	ldr	r0, [sl]
   118a4:	mov	r6, #1
   118a8:	cmp	r0, r4
   118ac:	bge	119a0 <__assert_fail@plt+0x89c>
   118b0:	str	r5, [sp, #32]
   118b4:	str	r4, [sp, #28]
   118b8:	mov	r6, #1
   118bc:	mov	r1, #0
   118c0:	str	r1, [sp, #24]
   118c4:	movw	r4, #26956	; 0x694c
   118c8:	movt	r4, #1
   118cc:	movw	r5, #26565	; 0x67c5
   118d0:	movt	r5, #1
   118d4:	ldr	r1, [sp, #32]
   118d8:	ldr	r7, [r1, r0, lsl #2]
   118dc:	mov	r0, r7
   118e0:	mov	r1, r4
   118e4:	bl	10eac <strcmp@plt>
   118e8:	cmp	r0, #0
   118ec:	beq	11914 <__assert_fail@plt+0x810>
   118f0:	mov	r0, r7
   118f4:	mov	r1, r5
   118f8:	bl	110c8 <fopen64@plt>
   118fc:	cmp	r0, #0
   11900:	beq	11938 <__assert_fail@plt+0x834>
   11904:	mov	r1, r7
   11908:	bl	11ae0 <__assert_fail@plt+0x9dc>
   1190c:	and	r6, r6, r0
   11910:	b	1197c <__assert_fail@plt+0x878>
   11914:	movw	r0, #29008	; 0x7150
   11918:	movt	r0, #2
   1191c:	ldr	r0, [r0]
   11920:	mov	r1, r7
   11924:	bl	11ae0 <__assert_fail@plt+0x9dc>
   11928:	and	r6, r6, r0
   1192c:	mov	r0, #1
   11930:	str	r0, [sp, #24]
   11934:	b	1197c <__assert_fail@plt+0x878>
   11938:	bl	11020 <__errno_location@plt>
   1193c:	ldr	r9, [r0]
   11940:	mov	r6, #0
   11944:	mov	r0, #0
   11948:	movw	r1, #25982	; 0x657e
   1194c:	movt	r1, #1
   11950:	mov	r2, #5
   11954:	bl	10f30 <dcgettext@plt>
   11958:	mov	r8, r0
   1195c:	mov	r0, #4
   11960:	mov	r1, r7
   11964:	bl	14398 <__assert_fail@plt+0x3294>
   11968:	mov	r3, r0
   1196c:	mov	r0, #0
   11970:	mov	r1, r9
   11974:	mov	r2, r8
   11978:	bl	10fa8 <error@plt>
   1197c:	ldr	r0, [sl]
   11980:	add	r0, r0, #1
   11984:	str	r0, [sl]
   11988:	ldr	r1, [sp, #28]
   1198c:	cmp	r0, r1
   11990:	blt	118d4 <__assert_fail@plt+0x7d0>
   11994:	ldr	r0, [sp, #24]
   11998:	tst	r0, #1
   1199c:	bne	11854 <__assert_fail@plt+0x750>
   119a0:	eor	r0, r6, #1
   119a4:	sub	sp, fp, #28
   119a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ac:	cmn	r8, #3
   119b0:	bne	119fc <__assert_fail@plt+0x8f8>
   119b4:	movw	r0, #28912	; 0x70f0
   119b8:	movt	r0, #2
   119bc:	ldr	r3, [r0]
   119c0:	movw	r0, #29012	; 0x7154
   119c4:	movt	r0, #2
   119c8:	ldr	r0, [r0]
   119cc:	mov	r1, #0
   119d0:	movw	r2, #25954	; 0x6562
   119d4:	movt	r2, #1
   119d8:	str	r2, [sp]
   119dc:	str	r1, [sp, #4]
   119e0:	movw	r1, #25797	; 0x64c5
   119e4:	movt	r1, #1
   119e8:	movw	r2, #25940	; 0x6554
   119ec:	movt	r2, #1
   119f0:	bl	14d5c <__assert_fail@plt+0x3c58>
   119f4:	mov	r0, #0
   119f8:	bl	10ffc <exit@plt>
   119fc:	cmn	r8, #2
   11a00:	bne	11a0c <__assert_fail@plt+0x908>
   11a04:	mov	r0, #0
   11a08:	bl	11200 <__assert_fail@plt+0xfc>
   11a0c:	sub	r0, r8, #48	; 0x30
   11a10:	cmp	r0, #9
   11a14:	bhi	11a40 <__assert_fail@plt+0x93c>
   11a18:	movw	r1, #25846	; 0x64f6
   11a1c:	movt	r1, #1
   11a20:	mov	r0, #0
   11a24:	mov	r2, #5
   11a28:	bl	10f30 <dcgettext@plt>
   11a2c:	mov	r2, r0
   11a30:	mov	r0, #0
   11a34:	mov	r1, #0
   11a38:	mov	r3, r8
   11a3c:	bl	10fa8 <error@plt>
   11a40:	mov	r0, #1
   11a44:	bl	11200 <__assert_fail@plt+0xfc>
   11a48:	push	{r4, sl, fp, lr}
   11a4c:	add	fp, sp, #8
   11a50:	mov	r4, r0
   11a54:	movw	r0, #29040	; 0x7170
   11a58:	movt	r0, #2
   11a5c:	mov	r1, #0
   11a60:	str	r1, [r0]
   11a64:	ldrb	r1, [r4]
   11a68:	cmp	r1, #32
   11a6c:	bne	11a88 <__assert_fail@plt+0x984>
   11a70:	ldr	r1, [r0]
   11a74:	add	r1, r1, #1
   11a78:	ldrb	r2, [r4, #1]!
   11a7c:	cmp	r2, #32
   11a80:	beq	11a74 <__assert_fail@plt+0x970>
   11a84:	str	r1, [r0]
   11a88:	movw	r0, #29032	; 0x7168
   11a8c:	movt	r0, #2
   11a90:	str	r4, [r0]
   11a94:	mov	r0, r4
   11a98:	bl	11008 <strlen@plt>
   11a9c:	movw	r1, #29036	; 0x716c
   11aa0:	movt	r1, #2
   11aa4:	str	r0, [r1]
   11aa8:	add	r1, r4, r0
   11aac:	mov	r0, r1
   11ab0:	cmp	r1, r4
   11ab4:	bls	11ac8 <__assert_fail@plt+0x9c4>
   11ab8:	mov	r1, r0
   11abc:	ldrb	r2, [r1, #-1]!
   11ac0:	cmp	r2, #32
   11ac4:	beq	11aac <__assert_fail@plt+0x9a8>
   11ac8:	mov	r1, #0
   11acc:	strb	r1, [r0], -r4
   11ad0:	movw	r1, #29044	; 0x7174
   11ad4:	movt	r1, #2
   11ad8:	str	r0, [r1]
   11adc:	pop	{r4, sl, fp, pc}
   11ae0:	push	{r4, r5, r6, r7, fp, lr}
   11ae4:	add	fp, sp, #16
   11ae8:	mov	r4, r1
   11aec:	mov	r6, r0
   11af0:	mov	r1, #2
   11af4:	bl	12b6c <__assert_fail@plt+0x1a68>
   11af8:	movw	r0, #29056	; 0x7180
   11afc:	movt	r0, #2
   11b00:	mov	r5, #0
   11b04:	str	r5, [r0]
   11b08:	movw	r0, #29052	; 0x717c
   11b0c:	movt	r0, #2
   11b10:	strb	r5, [r0]
   11b14:	mov	r0, r6
   11b18:	bl	11c18 <__assert_fail@plt+0xb14>
   11b1c:	movw	r1, #29060	; 0x7184
   11b20:	movt	r1, #2
   11b24:	str	r0, [r1]
   11b28:	mov	r0, r6
   11b2c:	bl	11cf4 <__assert_fail@plt+0xbf0>
   11b30:	cmp	r0, #0
   11b34:	beq	11b5c <__assert_fail@plt+0xa58>
   11b38:	movw	r7, #29064	; 0x7188
   11b3c:	movt	r7, #2
   11b40:	bl	11f68 <__assert_fail@plt+0xe64>
   11b44:	ldr	r0, [r7]
   11b48:	bl	120c0 <__assert_fail@plt+0xfbc>
   11b4c:	mov	r0, r6
   11b50:	bl	11cf4 <__assert_fail@plt+0xbf0>
   11b54:	cmp	r0, #0
   11b58:	bne	11b40 <__assert_fail@plt+0xa3c>
   11b5c:	mov	r0, r6
   11b60:	bl	10f90 <ferror_unlocked@plt>
   11b64:	mov	r7, r0
   11b68:	cmp	r0, #0
   11b6c:	mvneq	r5, #0
   11b70:	movw	r0, #29008	; 0x7150
   11b74:	movt	r0, #2
   11b78:	ldr	r0, [r0]
   11b7c:	cmp	r0, r6
   11b80:	beq	11bbc <__assert_fail@plt+0xab8>
   11b84:	mov	r0, r6
   11b88:	bl	12ba8 <__assert_fail@plt+0x1aa4>
   11b8c:	cmp	r7, #0
   11b90:	bne	11ba4 <__assert_fail@plt+0xaa0>
   11b94:	cmp	r0, #0
   11b98:	beq	11ba4 <__assert_fail@plt+0xaa0>
   11b9c:	bl	11020 <__errno_location@plt>
   11ba0:	ldr	r5, [r0]
   11ba4:	cmp	r5, #0
   11ba8:	blt	11bcc <__assert_fail@plt+0xac8>
   11bac:	beq	11bd4 <__assert_fail@plt+0xad0>
   11bb0:	movw	r6, #26887	; 0x6907
   11bb4:	movt	r6, #1
   11bb8:	b	11bec <__assert_fail@plt+0xae8>
   11bbc:	mov	r0, r6
   11bc0:	bl	110bc <clearerr_unlocked@plt>
   11bc4:	cmp	r5, #0
   11bc8:	bge	11bac <__assert_fail@plt+0xaa8>
   11bcc:	lsr	r0, r5, #31
   11bd0:	pop	{r4, r5, r6, r7, fp, pc}
   11bd4:	movw	r1, #26556	; 0x67bc
   11bd8:	movt	r1, #1
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	bl	10f30 <dcgettext@plt>
   11be8:	mov	r6, r0
   11bec:	mov	r0, #0
   11bf0:	mov	r1, #3
   11bf4:	mov	r2, r4
   11bf8:	bl	1444c <__assert_fail@plt+0x3348>
   11bfc:	mov	r3, r0
   11c00:	mov	r0, #0
   11c04:	mov	r1, r5
   11c08:	mov	r2, r6
   11c0c:	bl	10fa8 <error@plt>
   11c10:	lsr	r0, r5, #31
   11c14:	pop	{r4, r5, r6, r7, fp, pc}
   11c18:	push	{r4, r5, r6, sl, fp, lr}
   11c1c:	add	fp, sp, #16
   11c20:	mov	r4, r0
   11c24:	movw	r5, #29068	; 0x718c
   11c28:	movt	r5, #2
   11c2c:	mov	r0, #0
   11c30:	str	r0, [r5]
   11c34:	mov	r0, r4
   11c38:	bl	10f24 <getc_unlocked@plt>
   11c3c:	mov	r1, r0
   11c40:	mov	r0, r4
   11c44:	bl	12118 <__assert_fail@plt+0x1014>
   11c48:	mov	r1, r0
   11c4c:	movw	r0, #29044	; 0x7174
   11c50:	movt	r0, #2
   11c54:	ldr	r0, [r0]
   11c58:	cmp	r0, #0
   11c5c:	beq	11cc8 <__assert_fail@plt+0xbc4>
   11c60:	ldr	r0, [r5]
   11c64:	movw	r2, #29072	; 0x7190
   11c68:	movt	r2, #2
   11c6c:	str	r0, [r2]
   11c70:	movw	r0, #29032	; 0x7168
   11c74:	movt	r0, #2
   11c78:	ldr	r2, [r0]
   11c7c:	ldrb	r0, [r2]
   11c80:	cmp	r0, #0
   11c84:	beq	11cbc <__assert_fail@plt+0xbb8>
   11c88:	add	r6, r2, #1
   11c8c:	uxtb	r0, r0
   11c90:	cmp	r1, r0
   11c94:	bne	11cec <__assert_fail@plt+0xbe8>
   11c98:	ldr	r0, [r5]
   11c9c:	add	r0, r0, #1
   11ca0:	str	r0, [r5]
   11ca4:	mov	r0, r4
   11ca8:	bl	10f24 <getc_unlocked@plt>
   11cac:	mov	r1, r0
   11cb0:	ldrb	r0, [r6], #1
   11cb4:	cmp	r0, #0
   11cb8:	bne	11c8c <__assert_fail@plt+0xb88>
   11cbc:	mov	r0, r4
   11cc0:	pop	{r4, r5, r6, sl, fp, lr}
   11cc4:	b	12118 <__assert_fail@plt+0x1014>
   11cc8:	movw	r0, #29040	; 0x7170
   11ccc:	movt	r0, #2
   11cd0:	ldr	r0, [r0]
   11cd4:	ldr	r2, [r5]
   11cd8:	cmp	r0, r2
   11cdc:	movlt	r2, r0
   11ce0:	movw	r0, #29072	; 0x7190
   11ce4:	movt	r0, #2
   11ce8:	str	r2, [r0]
   11cec:	mov	r0, r1
   11cf0:	pop	{r4, r5, r6, sl, fp, pc}
   11cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf8:	add	fp, sp, #28
   11cfc:	sub	sp, sp, #4
   11d00:	mov	r4, r0
   11d04:	movw	r0, #29076	; 0x7194
   11d08:	movt	r0, #2
   11d0c:	mov	r1, #0
   11d10:	str	r1, [r0]
   11d14:	movw	r8, #29060	; 0x7184
   11d18:	movt	r8, #2
   11d1c:	ldr	r1, [r8]
   11d20:	movw	r5, #29072	; 0x7190
   11d24:	movt	r5, #2
   11d28:	movw	r6, #29040	; 0x7170
   11d2c:	movt	r6, #2
   11d30:	movw	r7, #29036	; 0x716c
   11d34:	movt	r7, #2
   11d38:	movw	r9, #29068	; 0x718c
   11d3c:	movt	r9, #2
   11d40:	b	11d58 <__assert_fail@plt+0xc54>
   11d44:	mov	r0, #10
   11d48:	bl	110f8 <putchar_unlocked@plt>
   11d4c:	mov	r0, r4
   11d50:	bl	11c18 <__assert_fail@plt+0xb14>
   11d54:	mov	r1, r0
   11d58:	cmn	r1, #1
   11d5c:	cmpne	r1, #10
   11d60:	bne	11d78 <__assert_fail@plt+0xc74>
   11d64:	mov	r0, r4
   11d68:	bl	12190 <__assert_fail@plt+0x108c>
   11d6c:	cmn	r0, #1
   11d70:	bne	11d44 <__assert_fail@plt+0xc40>
   11d74:	b	11e2c <__assert_fail@plt+0xd28>
   11d78:	ldr	r0, [r5]
   11d7c:	ldr	r2, [r6]
   11d80:	cmp	r0, r2
   11d84:	blt	11d64 <__assert_fail@plt+0xc60>
   11d88:	ldr	r2, [r7]
   11d8c:	add	r3, r2, r0
   11d90:	ldr	r2, [r9]
   11d94:	cmp	r2, r3
   11d98:	blt	11d64 <__assert_fail@plt+0xc60>
   11d9c:	movw	sl, #29084	; 0x719c
   11da0:	movt	sl, #2
   11da4:	str	r2, [sl]
   11da8:	movw	r2, #29080	; 0x7198
   11dac:	movt	r2, #2
   11db0:	str	r0, [r2]
   11db4:	movw	r0, #34088	; 0x8528
   11db8:	movt	r0, #2
   11dbc:	movw	r2, #29088	; 0x71a0
   11dc0:	movt	r2, #2
   11dc4:	str	r2, [r0]
   11dc8:	movw	r0, #29064	; 0x7188
   11dcc:	movt	r0, #2
   11dd0:	movw	r7, #34096	; 0x8530
   11dd4:	movt	r7, #2
   11dd8:	str	r7, [r0]
   11ddc:	mov	r0, r4
   11de0:	bl	122a4 <__assert_fail@plt+0x11a0>
   11de4:	mov	r5, r0
   11de8:	bl	1252c <__assert_fail@plt+0x1428>
   11dec:	bl	1245c <__assert_fail@plt+0x1358>
   11df0:	movw	r0, #29025	; 0x7161
   11df4:	movt	r0, #2
   11df8:	ldrb	r0, [r0]
   11dfc:	cmp	r0, #0
   11e00:	beq	11e40 <__assert_fail@plt+0xd3c>
   11e04:	movw	r0, #29064	; 0x7188
   11e08:	movt	r0, #2
   11e0c:	ldr	r0, [r0]
   11e10:	cmp	r0, r7
   11e14:	bls	11f48 <__assert_fail@plt+0xe44>
   11e18:	ldrb	r1, [r0, #-16]
   11e1c:	orr	r1, r1, #10
   11e20:	strb	r1, [r0, #-16]
   11e24:	mov	r0, #1
   11e28:	b	11e34 <__assert_fail@plt+0xd30>
   11e2c:	mov	r0, #0
   11e30:	mvn	r5, #0
   11e34:	str	r5, [r8]
   11e38:	sub	sp, fp, #28
   11e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e40:	movw	r0, #29027	; 0x7163
   11e44:	movt	r0, #2
   11e48:	ldrb	r0, [r0]
   11e4c:	cmp	r0, #1
   11e50:	bne	11e9c <__assert_fail@plt+0xd98>
   11e54:	mov	r0, r5
   11e58:	bl	1252c <__assert_fail@plt+0x1428>
   11e5c:	cmp	r0, #0
   11e60:	beq	11e04 <__assert_fail@plt+0xd00>
   11e64:	movw	r6, #29056	; 0x7180
   11e68:	movt	r6, #2
   11e6c:	mov	r0, r4
   11e70:	mov	r1, r5
   11e74:	bl	122a4 <__assert_fail@plt+0x11a0>
   11e78:	mov	r5, r0
   11e7c:	bl	1252c <__assert_fail@plt+0x1428>
   11e80:	cmp	r0, #0
   11e84:	beq	11e04 <__assert_fail@plt+0xd00>
   11e88:	ldr	r0, [r6]
   11e8c:	ldr	r1, [r9]
   11e90:	cmp	r1, r0
   11e94:	beq	11e6c <__assert_fail@plt+0xd68>
   11e98:	b	11e04 <__assert_fail@plt+0xd00>
   11e9c:	movw	r0, #29026	; 0x7162
   11ea0:	movt	r0, #2
   11ea4:	ldrb	r6, [r0]
   11ea8:	mov	r0, r5
   11eac:	bl	1252c <__assert_fail@plt+0x1428>
   11eb0:	cmp	r6, #0
   11eb4:	beq	11f08 <__assert_fail@plt+0xe04>
   11eb8:	cmp	r0, #0
   11ebc:	beq	11e04 <__assert_fail@plt+0xd00>
   11ec0:	ldr	r0, [sl]
   11ec4:	ldr	r1, [r9]
   11ec8:	cmp	r1, r0
   11ecc:	beq	11e04 <__assert_fail@plt+0xd00>
   11ed0:	movw	r6, #29056	; 0x7180
   11ed4:	movt	r6, #2
   11ed8:	mov	r0, r4
   11edc:	mov	r1, r5
   11ee0:	bl	122a4 <__assert_fail@plt+0x11a0>
   11ee4:	mov	r5, r0
   11ee8:	bl	1252c <__assert_fail@plt+0x1428>
   11eec:	cmp	r0, #0
   11ef0:	beq	11e04 <__assert_fail@plt+0xd00>
   11ef4:	ldr	r0, [r6]
   11ef8:	ldr	r1, [r9]
   11efc:	cmp	r1, r0
   11f00:	beq	11ed8 <__assert_fail@plt+0xdd4>
   11f04:	b	11e04 <__assert_fail@plt+0xd00>
   11f08:	cmp	r0, #0
   11f0c:	beq	11e04 <__assert_fail@plt+0xd00>
   11f10:	movw	r6, #29056	; 0x7180
   11f14:	movt	r6, #2
   11f18:	ldr	r0, [r6]
   11f1c:	ldr	r1, [r9]
   11f20:	cmp	r1, r0
   11f24:	bne	11e04 <__assert_fail@plt+0xd00>
   11f28:	mov	r0, r4
   11f2c:	mov	r1, r5
   11f30:	bl	122a4 <__assert_fail@plt+0x11a0>
   11f34:	mov	r5, r0
   11f38:	bl	1252c <__assert_fail@plt+0x1428>
   11f3c:	cmp	r0, #0
   11f40:	bne	11f18 <__assert_fail@plt+0xe14>
   11f44:	b	11e04 <__assert_fail@plt+0xd00>
   11f48:	movw	r0, #26567	; 0x67c7
   11f4c:	movt	r0, #1
   11f50:	movw	r1, #26585	; 0x67d9
   11f54:	movt	r1, #1
   11f58:	movw	r3, #26595	; 0x67e3
   11f5c:	movt	r3, #1
   11f60:	movw	r2, #623	; 0x26f
   11f64:	bl	11104 <__assert_fail@plt>
   11f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f6c:	add	fp, sp, #28
   11f70:	sub	sp, sp, #20
   11f74:	movw	r0, #29064	; 0x7188
   11f78:	movt	r0, #2
   11f7c:	ldr	r1, [r0]
   11f80:	mov	r2, #0
   11f84:	mov	r0, #0
   11f88:	str	r0, [sp, #16]
   11f8c:	str	r2, [r1, #20]
   11f90:	ldr	r0, [r1, #4]
   11f94:	str	r0, [sp, #4]
   11f98:	movw	r0, #29028	; 0x7164
   11f9c:	movt	r0, #2
   11fa0:	ldr	r0, [r0]
   11fa4:	str	r0, [sp, #12]
   11fa8:	str	r0, [r1, #4]
   11fac:	str	r1, [sp, #8]
   11fb0:	sub	r4, r1, #28
   11fb4:	movw	r0, #34096	; 0x8530
   11fb8:	movt	r0, #2
   11fbc:	cmp	r4, r0
   11fc0:	bcc	120ac <__assert_fail@plt+0xfa8>
   11fc4:	ldr	r8, [sp, #8]
   11fc8:	mov	r7, r0
   11fcc:	cmp	r4, r0
   11fd0:	movw	r0, #29056	; 0x7180
   11fd4:	movt	r0, #2
   11fd8:	movw	r1, #29084	; 0x719c
   11fdc:	movt	r1, #2
   11fe0:	moveq	r0, r1
   11fe4:	ldr	r0, [r0]
   11fe8:	ldr	r1, [r8, #-24]	; 0xffffffe8
   11fec:	add	r5, r0, r1
   11ff0:	mvn	r9, #-2147483648	; 0x80000000
   11ff4:	mov	sl, #0
   11ff8:	add	r6, r8, sl
   11ffc:	mov	r0, r6
   12000:	mov	r1, r5
   12004:	bl	12848 <__assert_fail@plt+0x1744>
   12008:	ldr	r1, [r6, #20]
   1200c:	add	r0, r1, r0
   12010:	mov	r1, r7
   12014:	cmp	r4, r7
   12018:	bne	12040 <__assert_fail@plt+0xf3c>
   1201c:	movw	r1, #29076	; 0x7194
   12020:	movt	r1, #2
   12024:	ldr	r1, [r1]
   12028:	cmp	r1, #1
   1202c:	subge	r1, r5, r1
   12030:	addge	r1, r1, r1, lsl #2
   12034:	lslge	r1, r1, #1
   12038:	mulge	r1, r1, r1
   1203c:	addge	r0, r0, r1, lsr #1
   12040:	cmp	r0, r9
   12044:	strlt	r5, [r8, #-12]
   12048:	strlt	r6, [r8, #-4]
   1204c:	movlt	r9, r0
   12050:	ldr	r0, [sp, #16]
   12054:	cmp	r0, sl
   12058:	beq	1207c <__assert_fail@plt+0xf78>
   1205c:	ldr	r0, [r6, #-20]	; 0xffffffec
   12060:	ldr	r1, [r6, #4]
   12064:	add	r0, r0, r5
   12068:	add	r5, r0, r1
   1206c:	add	sl, sl, #28
   12070:	ldr	r0, [sp, #12]
   12074:	cmp	r5, r0
   12078:	blt	11ff8 <__assert_fail@plt+0xef4>
   1207c:	mov	r0, r4
   12080:	bl	128a8 <__assert_fail@plt+0x17a4>
   12084:	add	r0, r0, r9
   12088:	str	r0, [r8, #-8]
   1208c:	ldr	r0, [sp, #16]
   12090:	add	r0, r0, #28
   12094:	str	r0, [sp, #16]
   12098:	sub	r8, r8, #28
   1209c:	sub	r4, r4, #28
   120a0:	mov	r0, r7
   120a4:	cmp	r4, r7
   120a8:	bcs	11fc8 <__assert_fail@plt+0xec4>
   120ac:	ldr	r0, [sp, #8]
   120b0:	ldr	r1, [sp, #4]
   120b4:	str	r1, [r0, #4]
   120b8:	sub	sp, fp, #28
   120bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c0:	push	{r4, r5, r6, sl, fp, lr}
   120c4:	add	fp, sp, #16
   120c8:	mov	r4, r0
   120cc:	movw	r0, #29084	; 0x719c
   120d0:	movt	r0, #2
   120d4:	ldr	r1, [r0]
   120d8:	movw	r5, #34096	; 0x8530
   120dc:	movt	r5, #2
   120e0:	mov	r0, r5
   120e4:	bl	12958 <__assert_fail@plt+0x1854>
   120e8:	ldr	r5, [r5, #24]
   120ec:	cmp	r5, r4
   120f0:	popeq	{r4, r5, r6, sl, fp, pc}
   120f4:	movw	r6, #29056	; 0x7180
   120f8:	movt	r6, #2
   120fc:	ldr	r1, [r6]
   12100:	mov	r0, r5
   12104:	bl	12958 <__assert_fail@plt+0x1854>
   12108:	ldr	r5, [r5, #24]
   1210c:	cmp	r5, r4
   12110:	bne	120fc <__assert_fail@plt+0xff8>
   12114:	pop	{r4, r5, r6, sl, fp, pc}
   12118:	push	{r4, r5, r6, r7, fp, lr}
   1211c:	add	fp, sp, #16
   12120:	mov	r4, r0
   12124:	movw	r5, #29052	; 0x717c
   12128:	movt	r5, #2
   1212c:	mov	r6, #1
   12130:	movw	r7, #29068	; 0x718c
   12134:	movt	r7, #2
   12138:	cmp	r1, #9
   1213c:	bne	1215c <__assert_fail@plt+0x1058>
   12140:	b	12174 <__assert_fail@plt+0x1070>
   12144:	str	r0, [r7]
   12148:	mov	r0, r4
   1214c:	bl	10f24 <getc_unlocked@plt>
   12150:	mov	r1, r0
   12154:	cmp	r1, #9
   12158:	beq	12174 <__assert_fail@plt+0x1070>
   1215c:	cmp	r1, #32
   12160:	movne	r0, r1
   12164:	popne	{r4, r5, r6, r7, fp, pc}
   12168:	ldr	r0, [r7]
   1216c:	add	r0, r0, #1
   12170:	b	12144 <__assert_fail@plt+0x1040>
   12174:	strb	r6, [r5]
   12178:	ldr	r0, [r7]
   1217c:	asr	r1, r0, #31
   12180:	add	r0, r0, r1, lsr #29
   12184:	bic	r0, r0, #7
   12188:	add	r0, r0, #8
   1218c:	b	12144 <__assert_fail@plt+0x1040>
   12190:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12194:	add	fp, sp, #24
   12198:	mov	r5, r1
   1219c:	mov	r4, r0
   121a0:	movw	r7, #62096	; 0xf290
   121a4:	movt	r7, #2
   121a8:	mov	r0, #0
   121ac:	str	r0, [r7]
   121b0:	movw	r8, #29072	; 0x7190
   121b4:	movt	r8, #2
   121b8:	ldr	r0, [r8]
   121bc:	movw	r9, #29068	; 0x718c
   121c0:	movt	r9, #2
   121c4:	ldr	r1, [r9]
   121c8:	cmp	r1, r0
   121cc:	bgt	121dc <__assert_fail@plt+0x10d8>
   121d0:	cmn	r5, #1
   121d4:	cmpne	r5, #10
   121d8:	beq	12290 <__assert_fail@plt+0x118c>
   121dc:	bl	12598 <__assert_fail@plt+0x1494>
   121e0:	ldr	r0, [r9]
   121e4:	ldr	r1, [r7]
   121e8:	cmp	r0, r1
   121ec:	beq	12238 <__assert_fail@plt+0x1134>
   121f0:	movw	r2, #29032	; 0x7168
   121f4:	movt	r2, #2
   121f8:	ldr	r3, [r2]
   121fc:	ldrb	r2, [r3]
   12200:	cmp	r2, #0
   12204:	beq	12238 <__assert_fail@plt+0x1134>
   12208:	add	r6, r3, #1
   1220c:	uxtb	r0, r2
   12210:	bl	110f8 <putchar_unlocked@plt>
   12214:	ldr	r0, [r7]
   12218:	add	r1, r0, #1
   1221c:	str	r1, [r7]
   12220:	ldr	r0, [r9]
   12224:	cmp	r0, r1
   12228:	beq	12238 <__assert_fail@plt+0x1134>
   1222c:	ldrb	r2, [r6], #1
   12230:	cmp	r2, #0
   12234:	bne	1220c <__assert_fail@plt+0x1108>
   12238:	cmn	r5, #1
   1223c:	beq	12254 <__assert_fail@plt+0x1150>
   12240:	cmp	r5, #10
   12244:	beq	12290 <__assert_fail@plt+0x118c>
   12248:	sub	r0, r0, r1
   1224c:	bl	12598 <__assert_fail@plt+0x1494>
   12250:	b	12290 <__assert_fail@plt+0x118c>
   12254:	ldr	r1, [r8]
   12258:	movw	r2, #29044	; 0x7174
   1225c:	movt	r2, #2
   12260:	ldr	r2, [r2]
   12264:	add	r1, r2, r1
   12268:	cmp	r0, r1
   1226c:	blt	12290 <__assert_fail@plt+0x118c>
   12270:	mov	r0, #10
   12274:	bl	110f8 <putchar_unlocked@plt>
   12278:	b	12290 <__assert_fail@plt+0x118c>
   1227c:	mov	r0, r5
   12280:	bl	110f8 <putchar_unlocked@plt>
   12284:	mov	r0, r4
   12288:	bl	10f24 <getc_unlocked@plt>
   1228c:	mov	r5, r0
   12290:	cmn	r5, #1
   12294:	cmpne	r5, #10
   12298:	bne	1227c <__assert_fail@plt+0x1178>
   1229c:	mov	r0, r5
   122a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   122a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a8:	add	fp, sp, #28
   122ac:	sub	sp, sp, #4
   122b0:	mov	r5, r1
   122b4:	mov	r4, r0
   122b8:	movw	r8, #29064	; 0x7188
   122bc:	movt	r8, #2
   122c0:	movw	r7, #34088	; 0x8528
   122c4:	movt	r7, #2
   122c8:	movw	r0, #5000	; 0x1388
   122cc:	movw	r1, #29088	; 0x71a0
   122d0:	movt	r1, #2
   122d4:	add	r6, r1, r0
   122d8:	movw	r9, #29068	; 0x718c
   122dc:	movt	r9, #2
   122e0:	movw	r0, #27944	; 0x6d28
   122e4:	movw	r1, #34096	; 0x8530
   122e8:	movt	r1, #2
   122ec:	add	r0, r1, r0
   122f0:	str	r0, [sp]
   122f4:	ldr	r1, [r8]
   122f8:	ldr	r0, [r7]
   122fc:	str	r0, [r1]
   12300:	cmp	r0, r6
   12304:	bne	12324 <__assert_fail@plt+0x1220>
   12308:	b	12318 <__assert_fail@plt+0x1214>
   1230c:	ldr	r0, [r7]
   12310:	cmp	r0, r6
   12314:	bne	12324 <__assert_fail@plt+0x1220>
   12318:	mov	r0, #1
   1231c:	bl	1245c <__assert_fail@plt+0x1358>
   12320:	bl	12630 <__assert_fail@plt+0x152c>
   12324:	ldr	r0, [r7]
   12328:	add	r1, r0, #1
   1232c:	str	r1, [r7]
   12330:	strb	r5, [r0]
   12334:	mov	r0, r4
   12338:	bl	10f24 <getc_unlocked@plt>
   1233c:	mov	r5, r0
   12340:	cmn	r0, #1
   12344:	beq	12360 <__assert_fail@plt+0x125c>
   12348:	bl	10ff0 <__ctype_b_loc@plt>
   1234c:	ldr	r0, [r0]
   12350:	add	r0, r0, r5, lsl #1
   12354:	ldrb	r0, [r0, #1]
   12358:	tst	r0, #32
   1235c:	beq	1230c <__assert_fail@plt+0x1208>
   12360:	ldr	r1, [r7]
   12364:	ldr	r0, [r8]
   12368:	ldr	r2, [r0]
   1236c:	sub	r1, r1, r2
   12370:	str	r1, [r0, #4]
   12374:	ldr	r2, [r9]
   12378:	add	sl, r2, r1
   1237c:	str	sl, [r9]
   12380:	bl	1278c <__assert_fail@plt+0x1688>
   12384:	mov	r0, r4
   12388:	mov	r1, r5
   1238c:	bl	12118 <__assert_fail@plt+0x1014>
   12390:	mov	r5, r0
   12394:	ldr	r0, [r9]
   12398:	sub	r1, r0, sl
   1239c:	ldr	r0, [r8]
   123a0:	str	r1, [r0, #8]
   123a4:	cmn	r5, #1
   123a8:	beq	123c4 <__assert_fail@plt+0x12c0>
   123ac:	ldrb	r3, [r0, #12]
   123b0:	mov	r2, #0
   123b4:	tst	r3, #2
   123b8:	beq	123e0 <__assert_fail@plt+0x12dc>
   123bc:	cmp	r5, #10
   123c0:	bne	123d4 <__assert_fail@plt+0x12d0>
   123c4:	ldrb	r1, [r0, #12]
   123c8:	orr	r1, r1, #8
   123cc:	strb	r1, [r0, #12]
   123d0:	b	1240c <__assert_fail@plt+0x1308>
   123d4:	cmp	r1, #1
   123d8:	mov	r2, #0
   123dc:	movwgt	r2, #1
   123e0:	ldrb	r1, [r0, #12]
   123e4:	bic	r1, r1, #8
   123e8:	orr	r1, r1, r2, lsl #3
   123ec:	strb	r1, [r0, #12]
   123f0:	cmp	r5, #10
   123f4:	beq	1240c <__assert_fail@plt+0x1308>
   123f8:	movw	r2, #29024	; 0x7160
   123fc:	movt	r2, #2
   12400:	ldrb	r2, [r2]
   12404:	cmp	r2, #1
   12408:	bne	1241c <__assert_fail@plt+0x1318>
   1240c:	tst	r1, #8
   12410:	mov	r1, #2
   12414:	movweq	r1, #1
   12418:	str	r1, [r0, #8]
   1241c:	ldr	r1, [sp]
   12420:	cmp	r0, r1
   12424:	bne	12434 <__assert_fail@plt+0x1330>
   12428:	mov	r0, #1
   1242c:	bl	1245c <__assert_fail@plt+0x1358>
   12430:	bl	12630 <__assert_fail@plt+0x152c>
   12434:	ldr	r0, [r8]
   12438:	add	r0, r0, #28
   1243c:	str	r0, [r8]
   12440:	cmp	r5, #10
   12444:	cmnne	r5, #1
   12448:	bne	122f4 <__assert_fail@plt+0x11f0>
   1244c:	mov	r0, r4
   12450:	sub	sp, fp, #28
   12454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12458:	b	11c18 <__assert_fail@plt+0xb14>
   1245c:	movw	r1, #29025	; 0x7161
   12460:	movt	r1, #2
   12464:	ldrb	r1, [r1]
   12468:	cmp	r1, #1
   1246c:	beq	12510 <__assert_fail@plt+0x140c>
   12470:	movw	r1, #29027	; 0x7163
   12474:	movt	r1, #2
   12478:	ldrb	r1, [r1]
   1247c:	cmp	r1, #1
   12480:	bne	124a4 <__assert_fail@plt+0x13a0>
   12484:	movw	r1, #29068	; 0x718c
   12488:	movt	r1, #2
   1248c:	movw	r2, #29084	; 0x719c
   12490:	movt	r2, #2
   12494:	cmp	r0, #0
   12498:	movne	r2, r1
   1249c:	ldr	r0, [r2]
   124a0:	b	1251c <__assert_fail@plt+0x1418>
   124a4:	movw	r1, #29026	; 0x7162
   124a8:	movt	r1, #2
   124ac:	ldrb	r1, [r1]
   124b0:	cmp	r1, #1
   124b4:	bne	12510 <__assert_fail@plt+0x140c>
   124b8:	cmp	r0, #0
   124bc:	beq	124e0 <__assert_fail@plt+0x13dc>
   124c0:	movw	r0, #29068	; 0x718c
   124c4:	movt	r0, #2
   124c8:	ldr	r0, [r0]
   124cc:	movw	r1, #29084	; 0x719c
   124d0:	movt	r1, #2
   124d4:	ldr	r1, [r1]
   124d8:	cmp	r0, r1
   124dc:	bne	1251c <__assert_fail@plt+0x1418>
   124e0:	movw	r0, #29084	; 0x719c
   124e4:	movt	r0, #2
   124e8:	ldr	r1, [r0]
   124ec:	movw	r0, #29056	; 0x7180
   124f0:	movt	r0, #2
   124f4:	ldr	r0, [r0]
   124f8:	cmp	r0, r1
   124fc:	bxne	lr
   12500:	mov	r0, #0
   12504:	cmp	r1, #0
   12508:	movweq	r0, #3
   1250c:	b	1251c <__assert_fail@plt+0x1418>
   12510:	movw	r0, #29084	; 0x719c
   12514:	movt	r0, #2
   12518:	ldr	r0, [r0]
   1251c:	movw	r1, #29056	; 0x7180
   12520:	movt	r1, #2
   12524:	str	r0, [r1]
   12528:	bx	lr
   1252c:	movw	r1, #29072	; 0x7190
   12530:	movt	r1, #2
   12534:	ldr	r1, [r1]
   12538:	movw	r2, #29080	; 0x7198
   1253c:	movt	r2, #2
   12540:	ldr	r2, [r2]
   12544:	cmp	r1, r2
   12548:	movne	r0, #0
   1254c:	bxne	lr
   12550:	movw	r2, #29036	; 0x716c
   12554:	movt	r2, #2
   12558:	ldr	r2, [r2]
   1255c:	add	r1, r2, r1
   12560:	movw	r2, #29068	; 0x718c
   12564:	movt	r2, #2
   12568:	ldr	r2, [r2]
   1256c:	mov	r3, #0
   12570:	cmp	r2, r1
   12574:	movwge	r3, #1
   12578:	subs	r1, r0, #10
   1257c:	movwne	r1, #1
   12580:	and	r1, r1, r3
   12584:	add	r2, r0, #1
   12588:	cmn	r0, #1
   1258c:	movwne	r2, #1
   12590:	and	r0, r2, r1
   12594:	bx	lr
   12598:	push	{r4, r5, r6, sl, fp, lr}
   1259c:	add	fp, sp, #16
   125a0:	movw	r4, #62096	; 0xf290
   125a4:	movt	r4, #2
   125a8:	ldr	r1, [r4]
   125ac:	add	r5, r1, r0
   125b0:	movw	r0, #29052	; 0x717c
   125b4:	movt	r0, #2
   125b8:	ldrb	r0, [r0]
   125bc:	cmp	r0, #1
   125c0:	bne	12608 <__assert_fail@plt+0x1504>
   125c4:	asr	r0, r5, #31
   125c8:	add	r0, r5, r0, lsr #29
   125cc:	bic	r6, r0, #7
   125d0:	add	r0, r1, #1
   125d4:	cmp	r0, r6
   125d8:	cmplt	r1, r6
   125dc:	bge	12608 <__assert_fail@plt+0x1504>
   125e0:	mov	r0, #9
   125e4:	bl	110f8 <putchar_unlocked@plt>
   125e8:	ldr	r0, [r4]
   125ec:	asr	r1, r0, #31
   125f0:	add	r0, r0, r1, lsr #29
   125f4:	bic	r0, r0, #7
   125f8:	add	r0, r0, #8
   125fc:	str	r0, [r4]
   12600:	cmp	r0, r6
   12604:	blt	125e0 <__assert_fail@plt+0x14dc>
   12608:	ldr	r0, [r4]
   1260c:	b	12624 <__assert_fail@plt+0x1520>
   12610:	mov	r0, #32
   12614:	bl	110f8 <putchar_unlocked@plt>
   12618:	ldr	r0, [r4]
   1261c:	add	r0, r0, #1
   12620:	str	r0, [r4]
   12624:	cmp	r0, r5
   12628:	popge	{r4, r5, r6, sl, fp, pc}
   1262c:	b	12610 <__assert_fail@plt+0x150c>
   12630:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12634:	add	fp, sp, #24
   12638:	movw	r9, #29064	; 0x7188
   1263c:	movt	r9, #2
   12640:	ldr	r6, [r9]
   12644:	movw	r8, #34096	; 0x8530
   12648:	movt	r8, #2
   1264c:	cmp	r6, r8
   12650:	beq	126ac <__assert_fail@plt+0x15a8>
   12654:	bl	11f68 <__assert_fail@plt+0xe64>
   12658:	ldr	r0, [r8, #24]
   1265c:	cmp	r0, r6
   12660:	beq	126e4 <__assert_fail@plt+0x15e0>
   12664:	mvn	r2, #-2147483648	; 0x80000000
   12668:	mov	r5, r6
   1266c:	mov	r1, r2
   12670:	ldr	r3, [r0, #20]
   12674:	ldr	r4, [r0, #24]
   12678:	ldr	r7, [r4, #20]
   1267c:	sub	r3, r3, r7
   12680:	cmp	r3, r2
   12684:	movlt	r1, r3
   12688:	cmn	r1, #-2147483639	; 0x80000009
   1268c:	addlt	r1, r1, #9
   12690:	cmp	r3, r2
   12694:	movlt	r5, r0
   12698:	cmp	r4, r6
   1269c:	mov	r0, r4
   126a0:	mov	r2, r1
   126a4:	bne	12670 <__assert_fail@plt+0x156c>
   126a8:	b	126e8 <__assert_fail@plt+0x15e4>
   126ac:	movw	r5, #34088	; 0x8528
   126b0:	movt	r5, #2
   126b4:	ldr	r0, [r5]
   126b8:	movw	r4, #29088	; 0x71a0
   126bc:	movt	r4, #2
   126c0:	sub	r2, r0, r4
   126c4:	movw	r0, #29012	; 0x7154
   126c8:	movt	r0, #2
   126cc:	ldr	r3, [r0]
   126d0:	mov	r0, r4
   126d4:	mov	r1, #1
   126d8:	bl	10f0c <fwrite_unlocked@plt>
   126dc:	str	r4, [r5]
   126e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126e4:	mov	r5, r6
   126e8:	mov	r0, r5
   126ec:	bl	120c0 <__assert_fail@plt+0xfbc>
   126f0:	ldr	r1, [r5]
   126f4:	movw	r4, #34088	; 0x8528
   126f8:	movt	r4, #2
   126fc:	ldr	r7, [r4]
   12700:	sub	r2, r7, r1
   12704:	movw	r6, #29088	; 0x71a0
   12708:	movt	r6, #2
   1270c:	mov	r0, r6
   12710:	bl	10ed0 <memmove@plt>
   12714:	ldr	r0, [r5]
   12718:	sub	r0, r6, r0
   1271c:	add	r1, r7, r0
   12720:	str	r1, [r4]
   12724:	ldr	r6, [r9]
   12728:	cmp	r5, r6
   1272c:	bhi	1274c <__assert_fail@plt+0x1648>
   12730:	mov	r1, r5
   12734:	ldr	r2, [r1]
   12738:	add	r2, r2, r0
   1273c:	str	r2, [r1], #28
   12740:	ldr	r6, [r9]
   12744:	cmp	r1, r6
   12748:	bls	12734 <__assert_fail@plt+0x1630>
   1274c:	rsb	r0, r5, #28
   12750:	add	r2, r0, r6
   12754:	mov	r0, r8
   12758:	mov	r1, r5
   1275c:	bl	10ed0 <memmove@plt>
   12760:	sub	r0, r5, r8
   12764:	movw	r1, #56173	; 0xdb6d
   12768:	movt	r1, #28086	; 0x6db6
   1276c:	smmul	r1, r0, r1
   12770:	sub	r0, r1, r0
   12774:	asr	r1, r0, #4
   12778:	add	r0, r1, r0, lsr #31
   1277c:	rsb	r0, r0, r0, lsl #3
   12780:	add	r0, r6, r0, lsl #2
   12784:	str	r0, [r9]
   12788:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1278c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12790:	add	fp, sp, #24
   12794:	mov	r8, r0
   12798:	ldm	r0, {r4, r5}
   1279c:	mov	r6, r4
   127a0:	ldrb	r1, [r6], r5
   127a4:	ldrb	r9, [r6, #-1]!
   127a8:	movw	r0, #26623	; 0x67ff
   127ac:	movt	r0, #1
   127b0:	mov	r2, #6
   127b4:	bl	11074 <memchr@plt>
   127b8:	cmp	r0, #0
   127bc:	movwne	r0, #1
   127c0:	ldrb	r1, [r8, #12]
   127c4:	bic	r1, r1, #1
   127c8:	orr	r7, r1, r0
   127cc:	strb	r7, [r8, #12]
   127d0:	bl	10ff0 <__ctype_b_loc@plt>
   127d4:	ldr	r0, [r0]
   127d8:	ldrb	r0, [r0, r9, lsl #1]
   127dc:	lsr	r0, r0, #2
   127e0:	bfi	r7, r0, #2, #1
   127e4:	strb	r7, [r8, #12]
   127e8:	cmp	r5, #2
   127ec:	blt	1281c <__assert_fail@plt+0x1718>
   127f0:	movw	r5, #26629	; 0x6805
   127f4:	movt	r5, #1
   127f8:	ldrb	r1, [r6]
   127fc:	mov	r0, r5
   12800:	mov	r2, #5
   12804:	bl	11074 <memchr@plt>
   12808:	cmp	r0, #0
   1280c:	beq	1281c <__assert_fail@plt+0x1718>
   12810:	sub	r6, r6, #1
   12814:	cmp	r4, r6
   12818:	bcc	127f8 <__assert_fail@plt+0x16f4>
   1281c:	ldrb	r1, [r6]
   12820:	movw	r0, #26634	; 0x680a
   12824:	movt	r0, #1
   12828:	mov	r2, #4
   1282c:	bl	11074 <memchr@plt>
   12830:	cmp	r0, #0
   12834:	movwne	r0, #1
   12838:	and	r1, r7, #253	; 0xfd
   1283c:	orr	r0, r1, r0, lsl #1
   12840:	strb	r0, [r8, #12]
   12844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12848:	mov	r2, r0
   1284c:	movw	r0, #29064	; 0x7188
   12850:	movt	r0, #2
   12854:	ldr	ip, [r0]
   12858:	cmp	ip, r2
   1285c:	moveq	r0, #0
   12860:	bxeq	lr
   12864:	movw	r0, #29048	; 0x7178
   12868:	movt	r0, #2
   1286c:	ldr	r0, [r0]
   12870:	sub	r0, r0, r1
   12874:	add	r0, r0, r0, lsl #2
   12878:	lsl	r0, r0, #1
   1287c:	mul	r0, r0, r0
   12880:	ldr	r3, [r2, #24]
   12884:	cmp	r3, ip
   12888:	bxeq	lr
   1288c:	ldr	r2, [r2, #16]
   12890:	sub	r1, r1, r2
   12894:	add	r1, r1, r1, lsl #2
   12898:	lsl	r1, r1, #1
   1289c:	mul	r1, r1, r1
   128a0:	add	r0, r0, r1, lsr #1
   128a4:	bx	lr
   128a8:	movw	r2, #34096	; 0x8530
   128ac:	movt	r2, #2
   128b0:	cmp	r0, r2
   128b4:	bls	12908 <__assert_fail@plt+0x1804>
   128b8:	ldrb	r3, [r0, #-16]
   128bc:	tst	r3, #2
   128c0:	bne	12910 <__assert_fail@plt+0x180c>
   128c4:	movw	r1, #3300	; 0xce4
   128c8:	tst	r3, #4
   128cc:	bne	12920 <__assert_fail@plt+0x181c>
   128d0:	add	r1, r2, #28
   128d4:	cmp	r0, r1
   128d8:	bls	12908 <__assert_fail@plt+0x1804>
   128dc:	ldrb	r1, [r0, #-44]	; 0xffffffd4
   128e0:	tst	r1, #8
   128e4:	movw	r1, #4900	; 0x1324
   128e8:	beq	12920 <__assert_fail@plt+0x181c>
   128ec:	ldr	r1, [r0, #-24]	; 0xffffffe8
   128f0:	add	r1, r1, #2
   128f4:	movw	r2, #40000	; 0x9c40
   128f8:	sdiv	r1, r2, r1
   128fc:	movw	r2, #4900	; 0x1324
   12900:	add	r1, r1, r2
   12904:	b	12920 <__assert_fail@plt+0x181c>
   12908:	movw	r1, #4900	; 0x1324
   1290c:	b	12920 <__assert_fail@plt+0x181c>
   12910:	mov	r1, #2400	; 0x960
   12914:	tst	r3, #8
   12918:	movweq	r1, #37220	; 0x9164
   1291c:	movteq	r1, #5
   12920:	ldrb	r2, [r0, #12]
   12924:	tst	r2, #1
   12928:	subne	r1, r1, #1600	; 0x640
   1292c:	movne	r0, r1
   12930:	bxne	lr
   12934:	tst	r2, #8
   12938:	beq	12950 <__assert_fail@plt+0x184c>
   1293c:	ldr	r0, [r0, #4]
   12940:	add	r0, r0, #2
   12944:	movw	r2, #22500	; 0x57e4
   12948:	sdiv	r0, r2, r0
   1294c:	add	r1, r0, r1
   12950:	mov	r0, r1
   12954:	bx	lr
   12958:	push	{r4, r5, r6, sl, fp, lr}
   1295c:	add	fp, sp, #16
   12960:	mov	r5, r1
   12964:	mov	r4, r0
   12968:	movw	r6, #62096	; 0xf290
   1296c:	movt	r6, #2
   12970:	mov	r0, #0
   12974:	str	r0, [r6]
   12978:	movw	r0, #29080	; 0x7198
   1297c:	movt	r0, #2
   12980:	ldr	r0, [r0]
   12984:	bl	12598 <__assert_fail@plt+0x1494>
   12988:	movw	r0, #29012	; 0x7154
   1298c:	movt	r0, #2
   12990:	ldr	r1, [r0]
   12994:	movw	r0, #29032	; 0x7168
   12998:	movt	r0, #2
   1299c:	ldr	r0, [r0]
   129a0:	bl	10e94 <fputs_unlocked@plt>
   129a4:	movw	r0, #29044	; 0x7174
   129a8:	movt	r0, #2
   129ac:	ldr	r0, [r0]
   129b0:	ldr	r1, [r6]
   129b4:	add	r0, r1, r0
   129b8:	str	r0, [r6]
   129bc:	sub	r0, r5, r0
   129c0:	bl	12598 <__assert_fail@plt+0x1494>
   129c4:	ldr	r5, [r4, #24]
   129c8:	mov	r0, r4
   129cc:	bl	12a18 <__assert_fail@plt+0x1914>
   129d0:	sub	r0, r5, #28
   129d4:	cmp	r0, r4
   129d8:	beq	129fc <__assert_fail@plt+0x18f8>
   129dc:	add	r4, r4, #28
   129e0:	ldr	r0, [r4, #-20]	; 0xffffffec
   129e4:	bl	12598 <__assert_fail@plt+0x1494>
   129e8:	mov	r0, r4
   129ec:	bl	12a18 <__assert_fail@plt+0x1914>
   129f0:	add	r4, r4, #28
   129f4:	cmp	r5, r4
   129f8:	bne	129e0 <__assert_fail@plt+0x18dc>
   129fc:	ldr	r0, [r6]
   12a00:	movw	r1, #29076	; 0x7194
   12a04:	movt	r1, #2
   12a08:	str	r0, [r1]
   12a0c:	mov	r0, #10
   12a10:	pop	{r4, r5, r6, sl, fp, lr}
   12a14:	b	110f8 <putchar_unlocked@plt>
   12a18:	push	{r4, r5, r6, sl, fp, lr}
   12a1c:	add	fp, sp, #16
   12a20:	mov	r4, r0
   12a24:	ldr	r5, [r0, #4]
   12a28:	cmp	r5, #0
   12a2c:	beq	12a44 <__assert_fail@plt+0x1940>
   12a30:	ldr	r6, [r4]
   12a34:	ldrb	r0, [r6], #1
   12a38:	bl	110f8 <putchar_unlocked@plt>
   12a3c:	subs	r5, r5, #1
   12a40:	bne	12a34 <__assert_fail@plt+0x1930>
   12a44:	ldr	r0, [r4, #4]
   12a48:	movw	r1, #62096	; 0xf290
   12a4c:	movt	r1, #2
   12a50:	ldr	r2, [r1]
   12a54:	add	r0, r2, r0
   12a58:	str	r0, [r1]
   12a5c:	pop	{r4, r5, r6, sl, fp, pc}
   12a60:	movw	r1, #62100	; 0xf294
   12a64:	movt	r1, #2
   12a68:	str	r0, [r1]
   12a6c:	bx	lr
   12a70:	movw	r1, #62104	; 0xf298
   12a74:	movt	r1, #2
   12a78:	strb	r0, [r1]
   12a7c:	bx	lr
   12a80:	push	{r4, r5, r6, sl, fp, lr}
   12a84:	add	fp, sp, #16
   12a88:	sub	sp, sp, #8
   12a8c:	movw	r0, #29012	; 0x7154
   12a90:	movt	r0, #2
   12a94:	ldr	r0, [r0]
   12a98:	bl	15c80 <__assert_fail@plt+0x4b7c>
   12a9c:	cmp	r0, #0
   12aa0:	beq	12ac8 <__assert_fail@plt+0x19c4>
   12aa4:	movw	r0, #62104	; 0xf298
   12aa8:	movt	r0, #2
   12aac:	ldrb	r0, [r0]
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ae8 <__assert_fail@plt+0x19e4>
   12ab8:	bl	11020 <__errno_location@plt>
   12abc:	ldr	r0, [r0]
   12ac0:	cmp	r0, #32
   12ac4:	bne	12ae8 <__assert_fail@plt+0x19e4>
   12ac8:	movw	r0, #29000	; 0x7148
   12acc:	movt	r0, #2
   12ad0:	ldr	r0, [r0]
   12ad4:	bl	15c80 <__assert_fail@plt+0x4b7c>
   12ad8:	cmp	r0, #0
   12adc:	subeq	sp, fp, #16
   12ae0:	popeq	{r4, r5, r6, sl, fp, pc}
   12ae4:	b	12b58 <__assert_fail@plt+0x1a54>
   12ae8:	movw	r1, #26871	; 0x68f7
   12aec:	movt	r1, #1
   12af0:	mov	r0, #0
   12af4:	mov	r2, #5
   12af8:	bl	10f30 <dcgettext@plt>
   12afc:	mov	r4, r0
   12b00:	movw	r0, #62100	; 0xf294
   12b04:	movt	r0, #2
   12b08:	ldr	r6, [r0]
   12b0c:	bl	11020 <__errno_location@plt>
   12b10:	ldr	r5, [r0]
   12b14:	cmp	r6, #0
   12b18:	bne	12b34 <__assert_fail@plt+0x1a30>
   12b1c:	movw	r2, #26887	; 0x6907
   12b20:	movt	r2, #1
   12b24:	mov	r0, #0
   12b28:	mov	r1, r5
   12b2c:	mov	r3, r4
   12b30:	b	12b54 <__assert_fail@plt+0x1a50>
   12b34:	mov	r0, r6
   12b38:	bl	1443c <__assert_fail@plt+0x3338>
   12b3c:	mov	r3, r0
   12b40:	str	r4, [sp]
   12b44:	movw	r2, #26883	; 0x6903
   12b48:	movt	r2, #1
   12b4c:	mov	r0, #0
   12b50:	mov	r1, r5
   12b54:	bl	10fa8 <error@plt>
   12b58:	movw	r0, #28916	; 0x70f4
   12b5c:	movt	r0, #2
   12b60:	ldr	r0, [r0]
   12b64:	bl	10ee8 <_exit@plt>
   12b68:	b	10eb8 <posix_fadvise64@plt>
   12b6c:	cmp	r0, #0
   12b70:	bxeq	lr
   12b74:	push	{r4, sl, fp, lr}
   12b78:	add	fp, sp, #8
   12b7c:	sub	sp, sp, #16
   12b80:	mov	r4, r1
   12b84:	bl	11050 <fileno@plt>
   12b88:	mov	r1, #0
   12b8c:	str	r1, [sp]
   12b90:	stmib	sp, {r1, r4}
   12b94:	mov	r2, #0
   12b98:	mov	r3, #0
   12b9c:	bl	12b68 <__assert_fail@plt+0x1a64>
   12ba0:	sub	sp, fp, #8
   12ba4:	pop	{r4, sl, fp, pc}
   12ba8:	push	{r4, r5, fp, lr}
   12bac:	add	fp, sp, #8
   12bb0:	sub	sp, sp, #8
   12bb4:	mov	r4, r0
   12bb8:	bl	11050 <fileno@plt>
   12bbc:	cmn	r0, #1
   12bc0:	ble	12c38 <__assert_fail@plt+0x1b34>
   12bc4:	mov	r0, r4
   12bc8:	bl	10fcc <__freading@plt>
   12bcc:	cmp	r0, #0
   12bd0:	beq	12bfc <__assert_fail@plt+0x1af8>
   12bd4:	mov	r0, r4
   12bd8:	bl	11050 <fileno@plt>
   12bdc:	mov	r1, #1
   12be0:	str	r1, [sp]
   12be4:	mov	r2, #0
   12be8:	mov	r3, #0
   12bec:	bl	10f6c <lseek64@plt>
   12bf0:	and	r0, r0, r1
   12bf4:	cmn	r0, #1
   12bf8:	beq	12c38 <__assert_fail@plt+0x1b34>
   12bfc:	mov	r0, r4
   12c00:	bl	12c48 <__assert_fail@plt+0x1b44>
   12c04:	cmp	r0, #0
   12c08:	beq	12c38 <__assert_fail@plt+0x1b34>
   12c0c:	bl	11020 <__errno_location@plt>
   12c10:	ldr	r5, [r0]
   12c14:	mov	r0, r4
   12c18:	bl	11080 <fclose@plt>
   12c1c:	cmp	r5, #0
   12c20:	beq	12c30 <__assert_fail@plt+0x1b2c>
   12c24:	bl	11020 <__errno_location@plt>
   12c28:	str	r5, [r0]
   12c2c:	mvn	r0, #0
   12c30:	sub	sp, fp, #8
   12c34:	pop	{r4, r5, fp, pc}
   12c38:	mov	r0, r4
   12c3c:	sub	sp, fp, #8
   12c40:	pop	{r4, r5, fp, lr}
   12c44:	b	11080 <fclose@plt>
   12c48:	push	{r4, sl, fp, lr}
   12c4c:	add	fp, sp, #8
   12c50:	mov	r4, r0
   12c54:	cmp	r0, #0
   12c58:	beq	12c70 <__assert_fail@plt+0x1b6c>
   12c5c:	mov	r0, r4
   12c60:	bl	10fcc <__freading@plt>
   12c64:	cmp	r0, #0
   12c68:	movne	r0, r4
   12c6c:	blne	12c7c <__assert_fail@plt+0x1b78>
   12c70:	mov	r0, r4
   12c74:	pop	{r4, sl, fp, lr}
   12c78:	b	10ec4 <fflush@plt>
   12c7c:	ldrb	r1, [r0, #1]
   12c80:	tst	r1, #1
   12c84:	bxeq	lr
   12c88:	push	{fp, lr}
   12c8c:	mov	fp, sp
   12c90:	sub	sp, sp, #8
   12c94:	mov	r1, #1
   12c98:	str	r1, [sp]
   12c9c:	mov	r2, #0
   12ca0:	mov	r3, #0
   12ca4:	bl	12cb0 <__assert_fail@plt+0x1bac>
   12ca8:	mov	sp, fp
   12cac:	pop	{fp, pc}
   12cb0:	push	{r4, r5, r6, r7, fp, lr}
   12cb4:	add	fp, sp, #16
   12cb8:	sub	sp, sp, #8
   12cbc:	mov	r5, r3
   12cc0:	mov	r6, r2
   12cc4:	mov	r4, r0
   12cc8:	ldr	r0, [r0, #4]
   12ccc:	ldr	r1, [r4, #8]
   12cd0:	cmp	r1, r0
   12cd4:	bne	12cf0 <__assert_fail@plt+0x1bec>
   12cd8:	ldrd	r0, [r4, #16]
   12cdc:	cmp	r1, r0
   12ce0:	bne	12cf0 <__assert_fail@plt+0x1bec>
   12ce4:	ldr	r0, [r4, #36]	; 0x24
   12ce8:	cmp	r0, #0
   12cec:	beq	12d08 <__assert_fail@plt+0x1c04>
   12cf0:	mov	r0, r4
   12cf4:	mov	r2, r6
   12cf8:	mov	r3, r5
   12cfc:	sub	sp, fp, #16
   12d00:	pop	{r4, r5, r6, r7, fp, lr}
   12d04:	b	1108c <fseeko64@plt>
   12d08:	ldr	r7, [fp, #8]
   12d0c:	mov	r0, r4
   12d10:	bl	11050 <fileno@plt>
   12d14:	str	r7, [sp]
   12d18:	mov	r2, r6
   12d1c:	mov	r3, r5
   12d20:	bl	10f6c <lseek64@plt>
   12d24:	and	r2, r0, r1
   12d28:	cmn	r2, #1
   12d2c:	mvneq	r0, #0
   12d30:	subeq	sp, fp, #16
   12d34:	popeq	{r4, r5, r6, r7, fp, pc}
   12d38:	strd	r0, [r4, #80]	; 0x50
   12d3c:	ldr	r0, [r4]
   12d40:	bic	r0, r0, #16
   12d44:	str	r0, [r4]
   12d48:	mov	r0, #0
   12d4c:	sub	sp, fp, #16
   12d50:	pop	{r4, r5, r6, r7, fp, pc}
   12d54:	push	{r4, r5, fp, lr}
   12d58:	add	fp, sp, #8
   12d5c:	cmp	r0, #0
   12d60:	beq	12df4 <__assert_fail@plt+0x1cf0>
   12d64:	mov	r4, r0
   12d68:	mov	r1, #47	; 0x2f
   12d6c:	bl	110a4 <strrchr@plt>
   12d70:	cmp	r0, #0
   12d74:	mov	r5, r4
   12d78:	addne	r5, r0, #1
   12d7c:	sub	r0, r5, r4
   12d80:	cmp	r0, #7
   12d84:	blt	12dd8 <__assert_fail@plt+0x1cd4>
   12d88:	sub	r0, r5, #7
   12d8c:	movw	r1, #26946	; 0x6942
   12d90:	movt	r1, #1
   12d94:	mov	r2, #7
   12d98:	bl	110e0 <strncmp@plt>
   12d9c:	cmp	r0, #0
   12da0:	bne	12dd8 <__assert_fail@plt+0x1cd4>
   12da4:	movw	r1, #26954	; 0x694a
   12da8:	movt	r1, #1
   12dac:	mov	r0, r5
   12db0:	mov	r2, #3
   12db4:	bl	110e0 <strncmp@plt>
   12db8:	cmp	r0, #0
   12dbc:	beq	12dc8 <__assert_fail@plt+0x1cc4>
   12dc0:	mov	r4, r5
   12dc4:	b	12dd8 <__assert_fail@plt+0x1cd4>
   12dc8:	add	r4, r5, #3
   12dcc:	movw	r0, #28984	; 0x7138
   12dd0:	movt	r0, #2
   12dd4:	str	r4, [r0]
   12dd8:	movw	r0, #28988	; 0x713c
   12ddc:	movt	r0, #2
   12de0:	str	r4, [r0]
   12de4:	movw	r0, #62108	; 0xf29c
   12de8:	movt	r0, #2
   12dec:	str	r4, [r0]
   12df0:	pop	{r4, r5, fp, pc}
   12df4:	movw	r0, #29000	; 0x7148
   12df8:	movt	r0, #2
   12dfc:	ldr	r3, [r0]
   12e00:	movw	r0, #26890	; 0x690a
   12e04:	movt	r0, #1
   12e08:	mov	r1, #55	; 0x37
   12e0c:	mov	r2, #1
   12e10:	bl	10f60 <fwrite@plt>
   12e14:	bl	110ec <abort@plt>
   12e18:	push	{r4, r5, r6, sl, fp, lr}
   12e1c:	add	fp, sp, #16
   12e20:	mov	r4, r0
   12e24:	movw	r0, #62112	; 0xf2a0
   12e28:	movt	r0, #2
   12e2c:	cmp	r4, #0
   12e30:	moveq	r4, r0
   12e34:	bl	11020 <__errno_location@plt>
   12e38:	mov	r5, r0
   12e3c:	ldr	r6, [r0]
   12e40:	mov	r0, r4
   12e44:	mov	r1, #48	; 0x30
   12e48:	bl	15158 <__assert_fail@plt+0x4054>
   12e4c:	str	r6, [r5]
   12e50:	pop	{r4, r5, r6, sl, fp, pc}
   12e54:	movw	r1, #62112	; 0xf2a0
   12e58:	movt	r1, #2
   12e5c:	cmp	r0, #0
   12e60:	movne	r1, r0
   12e64:	ldr	r0, [r1]
   12e68:	bx	lr
   12e6c:	movw	r2, #62112	; 0xf2a0
   12e70:	movt	r2, #2
   12e74:	cmp	r0, #0
   12e78:	movne	r2, r0
   12e7c:	str	r1, [r2]
   12e80:	bx	lr
   12e84:	movw	r3, #62112	; 0xf2a0
   12e88:	movt	r3, #2
   12e8c:	cmp	r0, #0
   12e90:	movne	r3, r0
   12e94:	ubfx	r0, r1, #5, #3
   12e98:	add	r0, r3, r0, lsl #2
   12e9c:	ldr	r3, [r0, #8]
   12ea0:	and	r1, r1, #31
   12ea4:	eor	r2, r2, r3, lsr r1
   12ea8:	and	r2, r2, #1
   12eac:	eor	r2, r3, r2, lsl r1
   12eb0:	str	r2, [r0, #8]
   12eb4:	mov	r0, #1
   12eb8:	and	r0, r0, r3, lsr r1
   12ebc:	bx	lr
   12ec0:	movw	r2, #62112	; 0xf2a0
   12ec4:	movt	r2, #2
   12ec8:	cmp	r0, #0
   12ecc:	movne	r2, r0
   12ed0:	ldr	r0, [r2, #4]
   12ed4:	str	r1, [r2, #4]
   12ed8:	bx	lr
   12edc:	movw	r3, #62112	; 0xf2a0
   12ee0:	movt	r3, #2
   12ee4:	cmp	r0, #0
   12ee8:	movne	r3, r0
   12eec:	mov	r0, #10
   12ef0:	str	r0, [r3]
   12ef4:	cmp	r1, #0
   12ef8:	cmpne	r2, #0
   12efc:	bne	12f0c <__assert_fail@plt+0x1e08>
   12f00:	push	{fp, lr}
   12f04:	mov	fp, sp
   12f08:	bl	110ec <abort@plt>
   12f0c:	str	r1, [r3, #40]	; 0x28
   12f10:	str	r2, [r3, #44]	; 0x2c
   12f14:	bx	lr
   12f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f1c:	add	fp, sp, #28
   12f20:	sub	sp, sp, #20
   12f24:	mov	r8, r3
   12f28:	mov	r9, r2
   12f2c:	mov	sl, r1
   12f30:	mov	r7, r0
   12f34:	ldr	r0, [fp, #8]
   12f38:	movw	r5, #62112	; 0xf2a0
   12f3c:	movt	r5, #2
   12f40:	cmp	r0, #0
   12f44:	movne	r5, r0
   12f48:	bl	11020 <__errno_location@plt>
   12f4c:	mov	r4, r0
   12f50:	ldm	r5, {r0, r1}
   12f54:	ldr	r2, [r5, #40]	; 0x28
   12f58:	ldr	r3, [r5, #44]	; 0x2c
   12f5c:	ldr	r6, [r4]
   12f60:	add	r5, r5, #8
   12f64:	stm	sp, {r0, r1, r5}
   12f68:	str	r2, [sp, #12]
   12f6c:	str	r3, [sp, #16]
   12f70:	mov	r0, r7
   12f74:	mov	r1, sl
   12f78:	mov	r2, r9
   12f7c:	mov	r3, r8
   12f80:	bl	12f90 <__assert_fail@plt+0x1e8c>
   12f84:	str	r6, [r4]
   12f88:	sub	sp, fp, #28
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f94:	add	fp, sp, #28
   12f98:	sub	sp, sp, #156	; 0x9c
   12f9c:	mov	r9, r3
   12fa0:	str	r2, [fp, #-84]	; 0xffffffac
   12fa4:	mov	r6, r1
   12fa8:	mov	r7, r0
   12fac:	ldr	r0, [fp, #12]
   12fb0:	and	r1, r0, #4
   12fb4:	str	r1, [sp, #32]
   12fb8:	and	r1, r0, #1
   12fbc:	str	r1, [sp, #36]	; 0x24
   12fc0:	ubfx	sl, r0, #1, #1
   12fc4:	bl	10f78 <__ctype_get_mb_cur_max@plt>
   12fc8:	str	r0, [sp, #40]	; 0x28
   12fcc:	ldr	r0, [fp, #24]
   12fd0:	str	r0, [sp, #76]	; 0x4c
   12fd4:	ldr	r0, [fp, #20]
   12fd8:	str	r0, [sp, #68]	; 0x44
   12fdc:	ldr	r0, [fp, #8]
   12fe0:	str	r0, [fp, #-60]	; 0xffffffc4
   12fe4:	mov	r0, #0
   12fe8:	str	r0, [sp, #72]	; 0x48
   12fec:	mov	r0, #0
   12ff0:	str	r0, [sp, #92]	; 0x5c
   12ff4:	mov	r0, #0
   12ff8:	str	r0, [fp, #-72]	; 0xffffffb8
   12ffc:	mov	r0, #0
   13000:	mov	r1, #0
   13004:	str	r1, [fp, #-56]	; 0xffffffc8
   13008:	mov	r1, #0
   1300c:	str	r1, [sp, #56]	; 0x38
   13010:	mov	r5, #1
   13014:	str	r7, [sp, #80]	; 0x50
   13018:	mov	r4, r6
   1301c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13020:	cmp	r6, #10
   13024:	bhi	13f8c <__assert_fail@plt+0x2e88>
   13028:	add	r1, pc, #20
   1302c:	mov	r8, #0
   13030:	mov	r2, #1
   13034:	mov	r3, #0
   13038:	ldr	ip, [fp, #-84]	; 0xffffffac
   1303c:	mov	lr, r9
   13040:	ldr	pc, [r1, r6, lsl #2]
   13044:	andeq	r3, r1, ip, lsl r1
   13048:	andeq	r3, r1, ip, asr #2
   1304c:	andeq	r3, r1, ip, lsl #2
   13050:	andeq	r3, r1, r4, lsl #2
   13054:	andeq	r3, r1, r0, asr #2
   13058:	andeq	r3, r1, r0, lsr #3
   1305c:	andeq	r3, r1, ip, lsr #2
   13060:	strdeq	r3, [r1], -ip
   13064:	andeq	r3, r1, r0, ror r0
   13068:	andeq	r3, r1, r0, ror r0
   1306c:	muleq	r1, r8, r0
   13070:	movw	r0, #27034	; 0x699a
   13074:	movt	r0, #1
   13078:	mov	r1, r6
   1307c:	bl	14598 <__assert_fail@plt+0x3494>
   13080:	str	r0, [sp, #68]	; 0x44
   13084:	movw	r0, #27036	; 0x699c
   13088:	movt	r0, #1
   1308c:	mov	r1, r6
   13090:	bl	14598 <__assert_fail@plt+0x3494>
   13094:	str	r0, [sp, #76]	; 0x4c
   13098:	mov	r8, #0
   1309c:	tst	sl, #1
   130a0:	bne	130d8 <__assert_fail@plt+0x1fd4>
   130a4:	ldr	r0, [sp, #68]	; 0x44
   130a8:	ldrb	r0, [r0]
   130ac:	cmp	r0, #0
   130b0:	beq	130d8 <__assert_fail@plt+0x1fd4>
   130b4:	ldr	r1, [sp, #68]	; 0x44
   130b8:	add	r1, r1, #1
   130bc:	mov	r8, #0
   130c0:	cmp	r8, r4
   130c4:	strbcc	r0, [r7, r8]
   130c8:	ldrb	r0, [r1, r8]
   130cc:	add	r8, r8, #1
   130d0:	cmp	r0, #0
   130d4:	bne	130c0 <__assert_fail@plt+0x1fbc>
   130d8:	ldr	r6, [sp, #76]	; 0x4c
   130dc:	mov	r0, r6
   130e0:	bl	11008 <strlen@plt>
   130e4:	str	r0, [fp, #-72]	; 0xffffffb8
   130e8:	str	r6, [sp, #92]	; 0x5c
   130ec:	mov	r2, #1
   130f0:	mov	r3, sl
   130f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   130f8:	mov	lr, r9
   130fc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13100:	b	131fc <__assert_fail@plt+0x20f8>
   13104:	mov	r0, #1
   13108:	b	1314c <__assert_fail@plt+0x2048>
   1310c:	tst	sl, #1
   13110:	bne	1314c <__assert_fail@plt+0x2048>
   13114:	mov	r2, r0
   13118:	b	13174 <__assert_fail@plt+0x2070>
   1311c:	mov	r6, #0
   13120:	mov	r8, #0
   13124:	mov	r2, r0
   13128:	b	131f8 <__assert_fail@plt+0x20f4>
   1312c:	mov	r0, #1
   13130:	str	r0, [fp, #-72]	; 0xffffffb8
   13134:	mov	r8, #0
   13138:	mov	r6, #5
   1313c:	b	131b8 <__assert_fail@plt+0x20b4>
   13140:	mov	r2, #1
   13144:	tst	sl, #1
   13148:	beq	13174 <__assert_fail@plt+0x2070>
   1314c:	mov	r1, #1
   13150:	str	r1, [fp, #-72]	; 0xffffffb8
   13154:	mov	r8, #0
   13158:	mov	r6, #2
   1315c:	movw	r1, #27036	; 0x699c
   13160:	movt	r1, #1
   13164:	str	r1, [sp, #92]	; 0x5c
   13168:	mov	r2, r0
   1316c:	mov	r3, #1
   13170:	b	131fc <__assert_fail@plt+0x20f8>
   13174:	mov	r8, #1
   13178:	mov	r6, #2
   1317c:	cmp	r4, #0
   13180:	movne	r0, #39	; 0x27
   13184:	strbne	r0, [r7]
   13188:	movw	r0, #27036	; 0x699c
   1318c:	movt	r0, #1
   13190:	str	r0, [sp, #92]	; 0x5c
   13194:	mov	r0, #1
   13198:	str	r0, [fp, #-72]	; 0xffffffb8
   1319c:	b	131f8 <__assert_fail@plt+0x20f4>
   131a0:	mov	r6, #5
   131a4:	tst	sl, #1
   131a8:	beq	131d0 <__assert_fail@plt+0x20cc>
   131ac:	mov	r0, #1
   131b0:	str	r0, [fp, #-72]	; 0xffffffb8
   131b4:	mov	r8, #0
   131b8:	movw	r0, #26632	; 0x6808
   131bc:	movt	r0, #1
   131c0:	str	r0, [sp, #92]	; 0x5c
   131c4:	mov	r2, #1
   131c8:	mov	r3, #1
   131cc:	b	131fc <__assert_fail@plt+0x20f8>
   131d0:	cmp	r4, #0
   131d4:	movne	r0, #34	; 0x22
   131d8:	strbne	r0, [r7]
   131dc:	mov	r8, #1
   131e0:	movw	r0, #26632	; 0x6808
   131e4:	movt	r0, #1
   131e8:	str	r0, [sp, #92]	; 0x5c
   131ec:	mov	r0, #1
   131f0:	str	r0, [fp, #-72]	; 0xffffffb8
   131f4:	mov	r2, #1
   131f8:	mov	r3, #0
   131fc:	ldr	r0, [fp, #16]
   13200:	cmp	r0, #0
   13204:	movwne	r0, #1
   13208:	and	r0, r0, r3
   1320c:	str	r0, [fp, #-88]	; 0xffffffa8
   13210:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13214:	cmp	r0, #0
   13218:	movwne	r0, #1
   1321c:	and	r1, r0, r3
   13220:	and	r1, r2, r1
   13224:	str	r1, [sp, #48]	; 0x30
   13228:	str	r6, [fp, #-60]	; 0xffffffc4
   1322c:	subs	r6, r6, #2
   13230:	clz	r1, r6
   13234:	lsr	r1, r1, #5
   13238:	and	r1, r1, r3
   1323c:	str	r1, [sp, #60]	; 0x3c
   13240:	str	r6, [fp, #-80]	; 0xffffffb0
   13244:	mov	r1, r6
   13248:	movwne	r1, #1
   1324c:	str	r3, [fp, #-76]	; 0xffffffb4
   13250:	eor	r3, r3, #1
   13254:	str	r3, [sp, #88]	; 0x58
   13258:	orr	r3, r1, r3
   1325c:	str	r3, [sp, #64]	; 0x40
   13260:	and	r1, r1, r2
   13264:	str	r1, [fp, #-68]	; 0xffffffbc
   13268:	and	r0, r0, r1
   1326c:	str	r0, [fp, #-64]	; 0xffffffc0
   13270:	str	r2, [sp, #84]	; 0x54
   13274:	eor	r0, r2, #1
   13278:	str	r0, [sp, #52]	; 0x34
   1327c:	mov	r6, #0
   13280:	cmn	lr, #1
   13284:	beq	13294 <__assert_fail@plt+0x2190>
   13288:	cmp	r6, lr
   1328c:	bne	132a0 <__assert_fail@plt+0x219c>
   13290:	b	13e0c <__assert_fail@plt+0x2d08>
   13294:	ldrb	r0, [ip, r6]
   13298:	cmp	r0, #0
   1329c:	beq	13e0c <__assert_fail@plt+0x2d08>
   132a0:	str	r5, [fp, #-48]	; 0xffffffd0
   132a4:	mov	sl, #0
   132a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132ac:	cmp	r0, #0
   132b0:	beq	132e4 <__assert_fail@plt+0x21e0>
   132b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132b8:	add	r5, r6, r0
   132bc:	cmp	r0, #2
   132c0:	bcc	132dc <__assert_fail@plt+0x21d8>
   132c4:	cmn	lr, #1
   132c8:	bne	132dc <__assert_fail@plt+0x21d8>
   132cc:	mov	r0, ip
   132d0:	bl	11008 <strlen@plt>
   132d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   132d8:	mov	lr, r0
   132dc:	cmp	r5, lr
   132e0:	bls	132f0 <__assert_fail@plt+0x21ec>
   132e4:	mov	r0, #0
   132e8:	str	r0, [fp, #-52]	; 0xffffffcc
   132ec:	b	1333c <__assert_fail@plt+0x2238>
   132f0:	mov	r5, r4
   132f4:	mov	r4, lr
   132f8:	add	r0, ip, r6
   132fc:	ldr	r1, [sp, #92]	; 0x5c
   13300:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13304:	bl	10f18 <memcmp@plt>
   13308:	cmp	r0, #0
   1330c:	mov	r1, r0
   13310:	movwne	r1, #1
   13314:	ldr	r2, [sp, #88]	; 0x58
   13318:	orr	r1, r1, r2
   1331c:	tst	r1, #1
   13320:	beq	13ed0 <__assert_fail@plt+0x2dcc>
   13324:	clz	r0, r0
   13328:	lsr	r0, r0, #5
   1332c:	str	r0, [fp, #-52]	; 0xffffffcc
   13330:	ldr	ip, [fp, #-84]	; 0xffffffac
   13334:	mov	lr, r4
   13338:	mov	r4, r5
   1333c:	ldrb	r5, [ip, r6]
   13340:	cmp	r5, #126	; 0x7e
   13344:	bhi	13700 <__assert_fail@plt+0x25fc>
   13348:	mov	r9, #1
   1334c:	mov	r2, #110	; 0x6e
   13350:	mov	r0, #97	; 0x61
   13354:	add	r3, pc, #4
   13358:	mov	r1, #0
   1335c:	ldr	pc, [r3, r5, lsl #2]
   13360:	strdeq	r3, [r1], -r8
   13364:	andeq	r3, r1, r0, lsl #14
   13368:	andeq	r3, r1, r0, lsl #14
   1336c:	andeq	r3, r1, r0, lsl #14
   13370:	andeq	r3, r1, r0, lsl #14
   13374:	andeq	r3, r1, r0, lsl #14
   13378:	andeq	r3, r1, r0, lsl #14
   1337c:	andeq	r3, r1, r4, asr #15
   13380:	ldrdeq	r3, [r1], -r8
   13384:	ldrdeq	r3, [r1], -r0
   13388:	andeq	r3, r1, r4, ror #11
   1338c:	andeq	r3, r1, r8, ror #12
   13390:	andeq	r3, r1, r8, asr #11
   13394:	andeq	r3, r1, r0, ror #11
   13398:	andeq	r3, r1, r0, lsl #14
   1339c:	andeq	r3, r1, r0, lsl #14
   133a0:	andeq	r3, r1, r0, lsl #14
   133a4:	andeq	r3, r1, r0, lsl #14
   133a8:	andeq	r3, r1, r0, lsl #14
   133ac:	andeq	r3, r1, r0, lsl #14
   133b0:	andeq	r3, r1, r0, lsl #14
   133b4:	andeq	r3, r1, r0, lsl #14
   133b8:	andeq	r3, r1, r0, lsl #14
   133bc:	andeq	r3, r1, r0, lsl #14
   133c0:	andeq	r3, r1, r0, lsl #14
   133c4:	andeq	r3, r1, r0, lsl #14
   133c8:	andeq	r3, r1, r0, lsl #14
   133cc:	andeq	r3, r1, r0, lsl #14
   133d0:	andeq	r3, r1, r0, lsl #14
   133d4:	andeq	r3, r1, r0, lsl #14
   133d8:	andeq	r3, r1, r0, lsl #14
   133dc:	andeq	r3, r1, r0, lsl #14
   133e0:	andeq	r3, r1, r4, ror r7
   133e4:	andeq	r3, r1, r8, ror r7
   133e8:	andeq	r3, r1, r8, ror r7
   133ec:	andeq	r3, r1, r0, ror r5
   133f0:	andeq	r3, r1, r8, ror r7
   133f4:	andeq	r3, r1, ip, asr r5
   133f8:	andeq	r3, r1, r8, ror r7
   133fc:	andeq	r3, r1, r0, ror r6
   13400:	andeq	r3, r1, r8, ror r7
   13404:	andeq	r3, r1, r8, ror r7
   13408:	andeq	r3, r1, r8, ror r7
   1340c:	andeq	r3, r1, ip, asr r5
   13410:	andeq	r3, r1, ip, asr r5
   13414:	andeq	r3, r1, ip, asr r5
   13418:	andeq	r3, r1, ip, asr r5
   1341c:	andeq	r3, r1, ip, asr r5
   13420:	andeq	r3, r1, ip, asr r5
   13424:	andeq	r3, r1, ip, asr r5
   13428:	andeq	r3, r1, ip, asr r5
   1342c:	andeq	r3, r1, ip, asr r5
   13430:	andeq	r3, r1, ip, asr r5
   13434:	andeq	r3, r1, ip, asr r5
   13438:	andeq	r3, r1, ip, asr r5
   1343c:	andeq	r3, r1, ip, asr r5
   13440:	andeq	r3, r1, ip, asr r5
   13444:	andeq	r3, r1, ip, asr r5
   13448:	andeq	r3, r1, ip, asr r5
   1344c:	andeq	r3, r1, r8, ror r7
   13450:	andeq	r3, r1, r8, ror r7
   13454:	andeq	r3, r1, r8, ror r7
   13458:	andeq	r3, r1, r8, ror r7
   1345c:	andeq	r3, r1, r8, lsr r6
   13460:	andeq	r3, r1, r0, lsl #14
   13464:	andeq	r3, r1, ip, asr r5
   13468:	andeq	r3, r1, ip, asr r5
   1346c:	andeq	r3, r1, ip, asr r5
   13470:	andeq	r3, r1, ip, asr r5
   13474:	andeq	r3, r1, ip, asr r5
   13478:	andeq	r3, r1, ip, asr r5
   1347c:	andeq	r3, r1, ip, asr r5
   13480:	andeq	r3, r1, ip, asr r5
   13484:	andeq	r3, r1, ip, asr r5
   13488:	andeq	r3, r1, ip, asr r5
   1348c:	andeq	r3, r1, ip, asr r5
   13490:	andeq	r3, r1, ip, asr r5
   13494:	andeq	r3, r1, ip, asr r5
   13498:	andeq	r3, r1, ip, asr r5
   1349c:	andeq	r3, r1, ip, asr r5
   134a0:	andeq	r3, r1, ip, asr r5
   134a4:	andeq	r3, r1, ip, asr r5
   134a8:	andeq	r3, r1, ip, asr r5
   134ac:	andeq	r3, r1, ip, asr r5
   134b0:	andeq	r3, r1, ip, asr r5
   134b4:	andeq	r3, r1, ip, asr r5
   134b8:	andeq	r3, r1, ip, asr r5
   134bc:	andeq	r3, r1, ip, asr r5
   134c0:	andeq	r3, r1, ip, asr r5
   134c4:	andeq	r3, r1, ip, asr r5
   134c8:	andeq	r3, r1, ip, asr r5
   134cc:	andeq	r3, r1, r8, ror r7
   134d0:	andeq	r3, r1, r4, lsr #11
   134d4:	andeq	r3, r1, ip, asr r5
   134d8:	andeq	r3, r1, r8, ror r7
   134dc:	andeq	r3, r1, ip, asr r5
   134e0:	andeq	r3, r1, r8, ror r7
   134e4:	andeq	r3, r1, ip, asr r5
   134e8:	andeq	r3, r1, ip, asr r5
   134ec:	andeq	r3, r1, ip, asr r5
   134f0:	andeq	r3, r1, ip, asr r5
   134f4:	andeq	r3, r1, ip, asr r5
   134f8:	andeq	r3, r1, ip, asr r5
   134fc:	andeq	r3, r1, ip, asr r5
   13500:	andeq	r3, r1, ip, asr r5
   13504:	andeq	r3, r1, ip, asr r5
   13508:	andeq	r3, r1, ip, asr r5
   1350c:	andeq	r3, r1, ip, asr r5
   13510:	andeq	r3, r1, ip, asr r5
   13514:	andeq	r3, r1, ip, asr r5
   13518:	andeq	r3, r1, ip, asr r5
   1351c:	andeq	r3, r1, ip, asr r5
   13520:	andeq	r3, r1, ip, asr r5
   13524:	andeq	r3, r1, ip, asr r5
   13528:	andeq	r3, r1, ip, asr r5
   1352c:	andeq	r3, r1, ip, asr r5
   13530:	andeq	r3, r1, ip, asr r5
   13534:	andeq	r3, r1, ip, asr r5
   13538:	andeq	r3, r1, ip, asr r5
   1353c:	andeq	r3, r1, ip, asr r5
   13540:	andeq	r3, r1, ip, asr r5
   13544:	andeq	r3, r1, ip, asr r5
   13548:	andeq	r3, r1, ip, asr r5
   1354c:	andeq	r3, r1, r4, lsl #11
   13550:	andeq	r3, r1, r8, ror r7
   13554:	andeq	r3, r1, r4, lsl #11
   13558:	andeq	r3, r1, r0, ror r5
   1355c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13560:	cmp	r0, #0
   13564:	beq	137d8 <__assert_fail@plt+0x26d4>
   13568:	ldr	r0, [fp, #16]
   1356c:	b	137dc <__assert_fail@plt+0x26d8>
   13570:	mov	r9, #0
   13574:	cmp	r6, #0
   13578:	beq	13774 <__assert_fail@plt+0x2670>
   1357c:	mov	sl, #0
   13580:	b	1355c <__assert_fail@plt+0x2458>
   13584:	mov	r9, #0
   13588:	cmn	lr, #1
   1358c:	beq	13758 <__assert_fail@plt+0x2654>
   13590:	cmp	r6, #0
   13594:	bne	1357c <__assert_fail@plt+0x2478>
   13598:	cmp	lr, #1
   1359c:	beq	13774 <__assert_fail@plt+0x2670>
   135a0:	b	1357c <__assert_fail@plt+0x2478>
   135a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   135a8:	cmp	r0, #2
   135ac:	bne	137a0 <__assert_fail@plt+0x269c>
   135b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   135b4:	tst	r0, #1
   135b8:	bne	13ee8 <__assert_fail@plt+0x2de4>
   135bc:	mov	sl, #0
   135c0:	mov	r0, #92	; 0x5c
   135c4:	b	137b4 <__assert_fail@plt+0x26b0>
   135c8:	mov	r0, #102	; 0x66
   135cc:	b	137c4 <__assert_fail@plt+0x26c0>
   135d0:	mov	r2, #116	; 0x74
   135d4:	b	135e4 <__assert_fail@plt+0x24e0>
   135d8:	mov	r0, #98	; 0x62
   135dc:	b	137c4 <__assert_fail@plt+0x26c0>
   135e0:	mov	r2, #114	; 0x72
   135e4:	ldr	r0, [sp, #64]	; 0x40
   135e8:	tst	r0, #1
   135ec:	mov	r0, r2
   135f0:	bne	137c4 <__assert_fail@plt+0x26c0>
   135f4:	b	13ee8 <__assert_fail@plt+0x2de4>
   135f8:	ldr	r0, [sp, #84]	; 0x54
   135fc:	tst	r0, #1
   13600:	beq	138b4 <__assert_fail@plt+0x27b0>
   13604:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13608:	tst	r0, #1
   1360c:	bne	13ee8 <__assert_fail@plt+0x2de4>
   13610:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13614:	cmp	r0, #2
   13618:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1361c:	movwne	r0, #1
   13620:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13624:	orr	r0, r0, r2
   13628:	tst	r0, #1
   1362c:	beq	13ca8 <__assert_fail@plt+0x2ba4>
   13630:	mov	r0, r8
   13634:	b	13cdc <__assert_fail@plt+0x2bd8>
   13638:	mov	sl, #0
   1363c:	mov	r5, #63	; 0x3f
   13640:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13644:	cmp	r0, #5
   13648:	beq	13a68 <__assert_fail@plt+0x2964>
   1364c:	cmp	r0, #2
   13650:	bne	13b08 <__assert_fail@plt+0x2a04>
   13654:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13658:	tst	r0, #1
   1365c:	mov	r9, #0
   13660:	beq	1355c <__assert_fail@plt+0x2458>
   13664:	b	13ee8 <__assert_fail@plt+0x2de4>
   13668:	mov	r0, #118	; 0x76
   1366c:	b	137c4 <__assert_fail@plt+0x26c0>
   13670:	mov	r5, #39	; 0x27
   13674:	mov	r0, #1
   13678:	str	r0, [sp, #56]	; 0x38
   1367c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13680:	cmp	r0, #2
   13684:	bne	138d4 <__assert_fail@plt+0x27d0>
   13688:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1368c:	tst	r0, #1
   13690:	bne	13ee8 <__assert_fail@plt+0x2de4>
   13694:	ldr	r2, [sp, #72]	; 0x48
   13698:	cmp	r2, #0
   1369c:	mov	r0, r2
   136a0:	movwne	r0, #1
   136a4:	clz	r1, r4
   136a8:	lsr	r1, r1, #5
   136ac:	orrs	r0, r0, r1
   136b0:	moveq	r2, r4
   136b4:	str	r2, [sp, #72]	; 0x48
   136b8:	moveq	r4, r0
   136bc:	cmp	r8, r4
   136c0:	movcc	r0, #39	; 0x27
   136c4:	strbcc	r0, [r7, r8]
   136c8:	add	r0, r8, #1
   136cc:	cmp	r0, r4
   136d0:	movcc	r1, #92	; 0x5c
   136d4:	strbcc	r1, [r7, r0]
   136d8:	add	r0, r8, #2
   136dc:	cmp	r0, r4
   136e0:	movcc	r1, #39	; 0x27
   136e4:	strbcc	r1, [r7, r0]
   136e8:	add	r8, r8, #3
   136ec:	mov	r0, #0
   136f0:	str	r0, [fp, #-56]	; 0xffffffc8
   136f4:	mov	sl, #0
   136f8:	mov	r9, #1
   136fc:	b	1355c <__assert_fail@plt+0x2458>
   13700:	str	r4, [sp, #24]
   13704:	ldr	r0, [sp, #40]	; 0x28
   13708:	cmp	r0, #1
   1370c:	bne	138dc <__assert_fail@plt+0x27d8>
   13710:	str	lr, [sp, #28]
   13714:	bl	10ff0 <__ctype_b_loc@plt>
   13718:	ldr	ip, [fp, #-84]	; 0xffffffac
   1371c:	ldr	r0, [r0]
   13720:	add	r0, r0, r5, lsl #1
   13724:	ldrb	r0, [r0, #1]
   13728:	ubfx	r9, r0, #6, #1
   1372c:	mov	r1, #1
   13730:	ldr	r4, [sp, #24]
   13734:	ldr	r0, [sp, #52]	; 0x34
   13738:	orr	r0, r9, r0
   1373c:	mov	r2, r1
   13740:	cmp	r1, #1
   13744:	bhi	13b10 <__assert_fail@plt+0x2a0c>
   13748:	tst	r0, #1
   1374c:	beq	13b10 <__assert_fail@plt+0x2a0c>
   13750:	ldr	lr, [sp, #28]
   13754:	b	1355c <__assert_fail@plt+0x2458>
   13758:	cmp	r6, #0
   1375c:	ldrbeq	r0, [ip, #1]
   13760:	cmpeq	r0, #0
   13764:	beq	13774 <__assert_fail@plt+0x2670>
   13768:	mvn	lr, #0
   1376c:	mov	sl, #0
   13770:	b	1355c <__assert_fail@plt+0x2458>
   13774:	mov	r1, #1
   13778:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1377c:	cmp	r0, #2
   13780:	bne	13798 <__assert_fail@plt+0x2694>
   13784:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13788:	tst	r0, #1
   1378c:	mov	r9, r1
   13790:	beq	1355c <__assert_fail@plt+0x2458>
   13794:	b	13ee8 <__assert_fail@plt+0x2de4>
   13798:	mov	r9, r1
   1379c:	b	1355c <__assert_fail@plt+0x2458>
   137a0:	mov	sl, #0
   137a4:	mov	r0, #92	; 0x5c
   137a8:	ldr	r1, [sp, #48]	; 0x30
   137ac:	cmp	r1, #0
   137b0:	beq	137c4 <__assert_fail@plt+0x26c0>
   137b4:	mov	r9, #0
   137b8:	cmp	sl, #0
   137bc:	beq	13d74 <__assert_fail@plt+0x2c70>
   137c0:	b	13db0 <__assert_fail@plt+0x2cac>
   137c4:	mov	r9, #0
   137c8:	ldr	r1, [sp, #84]	; 0x54
   137cc:	tst	r1, #1
   137d0:	mov	sl, #0
   137d4:	bne	13814 <__assert_fail@plt+0x2710>
   137d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   137dc:	cmp	r0, #0
   137e0:	mov	r0, r5
   137e4:	beq	13808 <__assert_fail@plt+0x2704>
   137e8:	ubfx	r0, r5, #5, #3
   137ec:	ldr	r1, [fp, #16]
   137f0:	ldr	r0, [r1, r0, lsl #2]
   137f4:	and	r1, r5, #31
   137f8:	mov	r2, #1
   137fc:	tst	r0, r2, lsl r1
   13800:	mov	r0, r5
   13804:	bne	13814 <__assert_fail@plt+0x2710>
   13808:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1380c:	cmp	r1, #0
   13810:	beq	13d6c <__assert_fail@plt+0x2c68>
   13814:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13818:	tst	r1, #1
   1381c:	bne	13ee8 <__assert_fail@plt+0x2de4>
   13820:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13824:	cmp	r1, #2
   13828:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1382c:	movwne	r1, #1
   13830:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13834:	orr	r1, r1, r2
   13838:	tst	r1, #1
   1383c:	beq	13848 <__assert_fail@plt+0x2744>
   13840:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13844:	b	13884 <__assert_fail@plt+0x2780>
   13848:	cmp	r8, r4
   1384c:	movcc	r1, #39	; 0x27
   13850:	strbcc	r1, [r7, r8]
   13854:	add	r1, r8, #1
   13858:	cmp	r1, r4
   1385c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13860:	movcc	r2, #36	; 0x24
   13864:	strbcc	r2, [r7, r1]
   13868:	add	r1, r8, #2
   1386c:	cmp	r1, r4
   13870:	movcc	r2, #39	; 0x27
   13874:	strbcc	r2, [r7, r1]
   13878:	add	r8, r8, #3
   1387c:	mov	r1, #1
   13880:	str	r1, [fp, #-56]	; 0xffffffc8
   13884:	cmp	r8, r4
   13888:	movcc	r1, #92	; 0x5c
   1388c:	strbcc	r1, [r7, r8]
   13890:	add	r8, r8, #1
   13894:	cmp	r8, r4
   13898:	strbcc	r0, [r7, r8]
   1389c:	and	r5, r5, r9
   138a0:	add	r8, r8, #1
   138a4:	add	r6, r6, #1
   138a8:	cmn	lr, #1
   138ac:	bne	13288 <__assert_fail@plt+0x2184>
   138b0:	b	13294 <__assert_fail@plt+0x2190>
   138b4:	mov	r9, #0
   138b8:	ldr	r0, [sp, #36]	; 0x24
   138bc:	cmp	r0, #0
   138c0:	mov	sl, #0
   138c4:	mov	r5, #0
   138c8:	beq	137d8 <__assert_fail@plt+0x26d4>
   138cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138d0:	b	138a4 <__assert_fail@plt+0x27a0>
   138d4:	mov	r9, #1
   138d8:	b	1355c <__assert_fail@plt+0x2458>
   138dc:	mov	r0, #0
   138e0:	str	r0, [fp, #-36]	; 0xffffffdc
   138e4:	str	r0, [fp, #-40]	; 0xffffffd8
   138e8:	cmn	lr, #1
   138ec:	bne	13900 <__assert_fail@plt+0x27fc>
   138f0:	mov	r0, ip
   138f4:	bl	11008 <strlen@plt>
   138f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   138fc:	mov	lr, r0
   13900:	add	r0, ip, r6
   13904:	str	r0, [sp, #20]
   13908:	mov	r9, #1
   1390c:	mov	r7, #0
   13910:	sub	r4, fp, #40	; 0x28
   13914:	str	lr, [sp, #28]
   13918:	str	r7, [sp, #44]	; 0x2c
   1391c:	add	r7, r7, r6
   13920:	add	r1, ip, r7
   13924:	sub	r2, lr, r7
   13928:	sub	r0, fp, #44	; 0x2c
   1392c:	mov	r3, r4
   13930:	bl	15db8 <__assert_fail@plt+0x4cb4>
   13934:	cmp	r0, #0
   13938:	beq	13df8 <__assert_fail@plt+0x2cf4>
   1393c:	cmn	r0, #1
   13940:	beq	13db8 <__assert_fail@plt+0x2cb4>
   13944:	cmn	r0, #2
   13948:	ldr	lr, [sp, #28]
   1394c:	beq	13dc0 <__assert_fail@plt+0x2cbc>
   13950:	cmp	r0, #2
   13954:	mov	r1, #0
   13958:	movwcc	r1, #1
   1395c:	ldr	r2, [sp, #60]	; 0x3c
   13960:	eor	r2, r2, #1
   13964:	orrs	r1, r2, r1
   13968:	ldr	r4, [sp, #24]
   1396c:	bne	13a2c <__assert_fail@plt+0x2928>
   13970:	ldr	r1, [sp, #44]	; 0x2c
   13974:	ldr	r2, [sp, #20]
   13978:	add	r1, r2, r1
   1397c:	mov	r2, #1
   13980:	ldrb	r3, [r1, r2]
   13984:	sub	r3, r3, #91	; 0x5b
   13988:	cmp	r3, #33	; 0x21
   1398c:	bhi	13a20 <__assert_fail@plt+0x291c>
   13990:	add	r7, pc, #0
   13994:	ldr	pc, [r7, r3, lsl #2]
   13998:	andeq	r3, r1, r0, ror #29
   1399c:	andeq	r3, r1, r0, ror #29
   139a0:	andeq	r3, r1, r0, lsr #20
   139a4:	andeq	r3, r1, r0, ror #29
   139a8:	andeq	r3, r1, r0, lsr #20
   139ac:	andeq	r3, r1, r0, ror #29
   139b0:	andeq	r3, r1, r0, lsr #20
   139b4:	andeq	r3, r1, r0, lsr #20
   139b8:	andeq	r3, r1, r0, lsr #20
   139bc:	andeq	r3, r1, r0, lsr #20
   139c0:	andeq	r3, r1, r0, lsr #20
   139c4:	andeq	r3, r1, r0, lsr #20
   139c8:	andeq	r3, r1, r0, lsr #20
   139cc:	andeq	r3, r1, r0, lsr #20
   139d0:	andeq	r3, r1, r0, lsr #20
   139d4:	andeq	r3, r1, r0, lsr #20
   139d8:	andeq	r3, r1, r0, lsr #20
   139dc:	andeq	r3, r1, r0, lsr #20
   139e0:	andeq	r3, r1, r0, lsr #20
   139e4:	andeq	r3, r1, r0, lsr #20
   139e8:	andeq	r3, r1, r0, lsr #20
   139ec:	andeq	r3, r1, r0, lsr #20
   139f0:	andeq	r3, r1, r0, lsr #20
   139f4:	andeq	r3, r1, r0, lsr #20
   139f8:	andeq	r3, r1, r0, lsr #20
   139fc:	andeq	r3, r1, r0, lsr #20
   13a00:	andeq	r3, r1, r0, lsr #20
   13a04:	andeq	r3, r1, r0, lsr #20
   13a08:	andeq	r3, r1, r0, lsr #20
   13a0c:	andeq	r3, r1, r0, lsr #20
   13a10:	andeq	r3, r1, r0, lsr #20
   13a14:	andeq	r3, r1, r0, lsr #20
   13a18:	andeq	r3, r1, r0, lsr #20
   13a1c:	andeq	r3, r1, r0, ror #29
   13a20:	add	r2, r2, #1
   13a24:	cmp	r2, r0
   13a28:	bcc	13980 <__assert_fail@plt+0x287c>
   13a2c:	ldr	r7, [sp, #44]	; 0x2c
   13a30:	add	r7, r0, r7
   13a34:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13a38:	bl	10f54 <iswprint@plt>
   13a3c:	cmp	r0, #0
   13a40:	movwne	r0, #1
   13a44:	and	r9, r9, r0
   13a48:	sub	r4, fp, #40	; 0x28
   13a4c:	mov	r0, r4
   13a50:	bl	10f00 <mbsinit@plt>
   13a54:	ldr	lr, [sp, #28]
   13a58:	cmp	r0, #0
   13a5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a60:	beq	13918 <__assert_fail@plt+0x2814>
   13a64:	b	13e00 <__assert_fail@plt+0x2cfc>
   13a68:	ldr	r0, [sp, #32]
   13a6c:	cmp	r0, #0
   13a70:	beq	13b08 <__assert_fail@plt+0x2a04>
   13a74:	add	r0, r6, #2
   13a78:	cmp	r0, lr
   13a7c:	bcs	13b08 <__assert_fail@plt+0x2a04>
   13a80:	add	r1, ip, r6
   13a84:	ldrb	r1, [r1, #1]
   13a88:	cmp	r1, #63	; 0x3f
   13a8c:	bne	13b08 <__assert_fail@plt+0x2a04>
   13a90:	ldrb	r9, [ip, r0]
   13a94:	sub	r2, r9, #33	; 0x21
   13a98:	cmp	r2, #29
   13a9c:	bhi	13b08 <__assert_fail@plt+0x2a04>
   13aa0:	mov	r3, #1
   13aa4:	movw	r1, #20929	; 0x51c1
   13aa8:	movt	r1, #14336	; 0x3800
   13aac:	tst	r1, r3, lsl r2
   13ab0:	beq	13b08 <__assert_fail@plt+0x2a04>
   13ab4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13ab8:	tst	r1, #1
   13abc:	bne	13ee8 <__assert_fail@plt+0x2de4>
   13ac0:	cmp	r8, r4
   13ac4:	movcc	r1, #63	; 0x3f
   13ac8:	strbcc	r1, [r7, r8]
   13acc:	add	r2, r8, #1
   13ad0:	cmp	r2, r4
   13ad4:	movcc	r1, #34	; 0x22
   13ad8:	strbcc	r1, [r7, r2]
   13adc:	add	r2, r8, #2
   13ae0:	cmp	r2, r4
   13ae4:	movcc	r1, #34	; 0x22
   13ae8:	strbcc	r1, [r7, r2]
   13aec:	add	r2, r8, #3
   13af0:	cmp	r2, r4
   13af4:	movcc	r1, #63	; 0x3f
   13af8:	strbcc	r1, [r7, r2]
   13afc:	add	r8, r8, #4
   13b00:	mov	r6, r0
   13b04:	mov	r5, r9
   13b08:	mov	r9, #0
   13b0c:	b	1355c <__assert_fail@plt+0x2458>
   13b10:	add	r1, r2, r6
   13b14:	str	r1, [sp, #44]	; 0x2c
   13b18:	add	r1, r6, #1
   13b1c:	mov	r3, #0
   13b20:	ldr	lr, [sp, #28]
   13b24:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13b28:	tst	r0, #1
   13b2c:	bne	13c20 <__assert_fail@plt+0x2b1c>
   13b30:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b34:	tst	r2, #1
   13b38:	bne	13ee8 <__assert_fail@plt+0x2de4>
   13b3c:	cmp	r6, #2
   13b40:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13b44:	movwne	r3, #1
   13b48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b4c:	orr	r3, r3, r2
   13b50:	tst	r3, #1
   13b54:	bne	13b90 <__assert_fail@plt+0x2a8c>
   13b58:	cmp	r8, r4
   13b5c:	movcc	r2, #39	; 0x27
   13b60:	strbcc	r2, [r7, r8]
   13b64:	add	r3, r8, #1
   13b68:	cmp	r3, r4
   13b6c:	movcc	r2, #36	; 0x24
   13b70:	strbcc	r2, [r7, r3]
   13b74:	add	r3, r8, #2
   13b78:	cmp	r3, r4
   13b7c:	movcc	r2, #39	; 0x27
   13b80:	strbcc	r2, [r7, r3]
   13b84:	add	r8, r8, #3
   13b88:	mov	r2, #1
   13b8c:	str	r2, [fp, #-56]	; 0xffffffc8
   13b90:	cmp	r8, r4
   13b94:	movcc	r2, #92	; 0x5c
   13b98:	strbcc	r2, [r7, r8]
   13b9c:	add	r3, r8, #1
   13ba0:	cmp	r3, r4
   13ba4:	bcs	13bc4 <__assert_fail@plt+0x2ac0>
   13ba8:	and	r7, r5, #192	; 0xc0
   13bac:	mov	r2, #48	; 0x30
   13bb0:	orr	r7, r2, r7, lsr #6
   13bb4:	ldr	r6, [sp, #80]	; 0x50
   13bb8:	strb	r7, [r6, r3]
   13bbc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13bc0:	ldr	r7, [sp, #80]	; 0x50
   13bc4:	add	r3, r8, #2
   13bc8:	cmp	r3, r4
   13bcc:	bcs	13bec <__assert_fail@plt+0x2ae8>
   13bd0:	lsr	r7, r5, #3
   13bd4:	mov	r2, #6
   13bd8:	bfi	r7, r2, #3, #29
   13bdc:	ldr	r6, [sp, #80]	; 0x50
   13be0:	strb	r7, [r6, r3]
   13be4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13be8:	ldr	r7, [sp, #80]	; 0x50
   13bec:	mov	r2, #6
   13bf0:	bfi	r5, r2, #3, #29
   13bf4:	add	r8, r8, #3
   13bf8:	mov	r3, #1
   13bfc:	b	13c44 <__assert_fail@plt+0x2b40>
   13c00:	ldr	r7, [sp, #80]	; 0x50
   13c04:	cmp	r8, r4
   13c08:	strbcc	r5, [r7, r8]
   13c0c:	ldrb	r5, [ip, r1]
   13c10:	add	r1, r1, #1
   13c14:	add	r8, r8, #1
   13c18:	tst	r0, #1
   13c1c:	beq	13b30 <__assert_fail@plt+0x2a2c>
   13c20:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13c24:	tst	r2, #1
   13c28:	beq	13c3c <__assert_fail@plt+0x2b38>
   13c2c:	cmp	r8, r4
   13c30:	movcc	r2, #92	; 0x5c
   13c34:	strbcc	r2, [r7, r8]
   13c38:	add	r8, r8, #1
   13c3c:	mov	r2, #0
   13c40:	str	r2, [fp, #-52]	; 0xffffffcc
   13c44:	and	sl, r3, #1
   13c48:	ldr	r2, [sp, #44]	; 0x2c
   13c4c:	cmp	r2, r1
   13c50:	bls	13d5c <__assert_fail@plt+0x2c58>
   13c54:	cmp	sl, #0
   13c58:	movwne	sl, #1
   13c5c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c60:	mvn	r7, r2
   13c64:	orr	r7, r7, sl
   13c68:	tst	r7, #1
   13c6c:	bne	13c00 <__assert_fail@plt+0x2afc>
   13c70:	cmp	r8, r4
   13c74:	ldrcc	r7, [sp, #80]	; 0x50
   13c78:	movcc	r2, #39	; 0x27
   13c7c:	strbcc	r2, [r7, r8]
   13c80:	add	r7, r8, #1
   13c84:	cmp	r7, r4
   13c88:	ldrcc	r6, [sp, #80]	; 0x50
   13c8c:	movcc	r2, #39	; 0x27
   13c90:	strbcc	r2, [r6, r7]
   13c94:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13c98:	add	r8, r8, #2
   13c9c:	mov	r2, #0
   13ca0:	str	r2, [fp, #-56]	; 0xffffffc8
   13ca4:	b	13c00 <__assert_fail@plt+0x2afc>
   13ca8:	cmp	r8, r4
   13cac:	movcc	r0, #39	; 0x27
   13cb0:	strbcc	r0, [r7, r8]
   13cb4:	add	r0, r8, #1
   13cb8:	cmp	r0, r4
   13cbc:	movcc	r1, #36	; 0x24
   13cc0:	strbcc	r1, [r7, r0]
   13cc4:	add	r0, r8, #2
   13cc8:	cmp	r0, r4
   13ccc:	movcc	r1, #39	; 0x27
   13cd0:	strbcc	r1, [r7, r0]
   13cd4:	add	r0, r8, #3
   13cd8:	mov	r2, #1
   13cdc:	cmp	r0, r4
   13ce0:	movcc	r1, #92	; 0x5c
   13ce4:	strbcc	r1, [r7, r0]
   13ce8:	str	r2, [fp, #-56]	; 0xffffffc8
   13cec:	add	r8, r0, #1
   13cf0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13cf4:	cmp	r1, #2
   13cf8:	beq	13d4c <__assert_fail@plt+0x2c48>
   13cfc:	add	r1, r6, #1
   13d00:	mov	r9, #0
   13d04:	mov	sl, #1
   13d08:	mov	r5, #48	; 0x30
   13d0c:	cmp	r1, lr
   13d10:	bcs	1355c <__assert_fail@plt+0x2458>
   13d14:	ldrb	r1, [ip, r1]
   13d18:	sub	r1, r1, #48	; 0x30
   13d1c:	uxtb	r1, r1
   13d20:	cmp	r1, #9
   13d24:	bhi	1355c <__assert_fail@plt+0x2458>
   13d28:	cmp	r8, r4
   13d2c:	movcc	r1, #48	; 0x30
   13d30:	strbcc	r1, [r7, r8]
   13d34:	add	r1, r0, #2
   13d38:	cmp	r1, r4
   13d3c:	movcc	r2, #48	; 0x30
   13d40:	strbcc	r2, [r7, r1]
   13d44:	add	r8, r0, #3
   13d48:	b	1355c <__assert_fail@plt+0x2458>
   13d4c:	mov	r0, #48	; 0x30
   13d50:	mov	sl, #1
   13d54:	mov	r9, #0
   13d58:	b	13808 <__assert_fail@plt+0x2704>
   13d5c:	sub	r6, r1, #1
   13d60:	cmp	sl, #0
   13d64:	movwne	sl, #1
   13d68:	mov	r0, r5
   13d6c:	cmp	sl, #0
   13d70:	bne	13db0 <__assert_fail@plt+0x2cac>
   13d74:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13d78:	tst	r1, #1
   13d7c:	beq	13db0 <__assert_fail@plt+0x2cac>
   13d80:	cmp	r8, r4
   13d84:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d88:	movcc	r1, #39	; 0x27
   13d8c:	strbcc	r1, [r7, r8]
   13d90:	add	r1, r8, #1
   13d94:	cmp	r1, r4
   13d98:	movcc	r2, #39	; 0x27
   13d9c:	strbcc	r2, [r7, r1]
   13da0:	add	r8, r8, #2
   13da4:	mov	r1, #0
   13da8:	str	r1, [fp, #-56]	; 0xffffffc8
   13dac:	b	13894 <__assert_fail@plt+0x2790>
   13db0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13db4:	b	13894 <__assert_fail@plt+0x2790>
   13db8:	mov	r9, #0
   13dbc:	b	13df8 <__assert_fail@plt+0x2cf4>
   13dc0:	mov	r9, #0
   13dc4:	cmp	r7, lr
   13dc8:	bcs	13df8 <__assert_fail@plt+0x2cf4>
   13dcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13dd0:	ldr	r7, [sp, #44]	; 0x2c
   13dd4:	ldr	r0, [sp, #20]
   13dd8:	ldrb	r0, [r0, r7]
   13ddc:	cmp	r0, #0
   13de0:	beq	13e00 <__assert_fail@plt+0x2cfc>
   13de4:	add	r7, r7, #1
   13de8:	add	r0, r6, r7
   13dec:	cmp	r0, lr
   13df0:	bcc	13dd4 <__assert_fail@plt+0x2cd0>
   13df4:	b	13e00 <__assert_fail@plt+0x2cfc>
   13df8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13dfc:	ldr	r7, [sp, #44]	; 0x2c
   13e00:	mov	r1, r7
   13e04:	ldr	r7, [sp, #80]	; 0x50
   13e08:	b	13730 <__assert_fail@plt+0x262c>
   13e0c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e10:	eor	r0, r1, #2
   13e14:	orr	r0, r0, r8
   13e18:	clz	r0, r0
   13e1c:	lsr	r0, r0, #5
   13e20:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13e24:	tst	r2, r0
   13e28:	bne	13ee8 <__assert_fail@plt+0x2de4>
   13e2c:	cmp	r1, #2
   13e30:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13e34:	movwne	r0, #1
   13e38:	orr	r0, r2, r0
   13e3c:	tst	r0, #1
   13e40:	ldreq	r0, [sp, #56]	; 0x38
   13e44:	eoreq	r0, r0, #1
   13e48:	tsteq	r0, #1
   13e4c:	bne	13e80 <__assert_fail@plt+0x2d7c>
   13e50:	mov	r9, lr
   13e54:	tst	r5, #1
   13e58:	bne	13f50 <__assert_fail@plt+0x2e4c>
   13e5c:	ldr	r0, [sp, #72]	; 0x48
   13e60:	cmp	r0, #0
   13e64:	beq	13e80 <__assert_fail@plt+0x2d7c>
   13e68:	mov	r5, #0
   13e6c:	cmp	r4, #0
   13e70:	ldr	r0, [sp, #84]	; 0x54
   13e74:	mov	sl, r2
   13e78:	ldr	r6, [sp, #72]	; 0x48
   13e7c:	beq	13018 <__assert_fail@plt+0x1f14>
   13e80:	ldr	r1, [sp, #92]	; 0x5c
   13e84:	clz	r0, r1
   13e88:	lsr	r0, r0, #5
   13e8c:	orr	r0, r0, r2
   13e90:	tst	r0, #1
   13e94:	bne	13ec0 <__assert_fail@plt+0x2dbc>
   13e98:	ldrb	r0, [r1]
   13e9c:	cmp	r0, #0
   13ea0:	beq	13ec0 <__assert_fail@plt+0x2dbc>
   13ea4:	add	r1, r1, #1
   13ea8:	cmp	r8, r4
   13eac:	strbcc	r0, [r7, r8]
   13eb0:	add	r8, r8, #1
   13eb4:	ldrb	r0, [r1], #1
   13eb8:	cmp	r0, #0
   13ebc:	bne	13ea8 <__assert_fail@plt+0x2da4>
   13ec0:	cmp	r8, r4
   13ec4:	movcc	r0, #0
   13ec8:	strbcc	r0, [r7, r8]
   13ecc:	b	13f44 <__assert_fail@plt+0x2e40>
   13ed0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ed4:	mov	lr, r4
   13ed8:	mov	r4, r5
   13edc:	b	13ee8 <__assert_fail@plt+0x2de4>
   13ee0:	ldr	r7, [sp, #80]	; 0x50
   13ee4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ee8:	mov	r0, #0
   13eec:	ldr	r1, [fp, #12]
   13ef0:	bic	r1, r1, #2
   13ef4:	ldr	r2, [sp, #84]	; 0x54
   13ef8:	tst	r2, #1
   13efc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13f00:	mov	r2, r3
   13f04:	movwne	r2, #4
   13f08:	cmp	r3, #2
   13f0c:	movne	r2, r3
   13f10:	str	r2, [sp]
   13f14:	str	r1, [sp, #4]
   13f18:	str	r0, [sp, #8]
   13f1c:	ldr	r0, [sp, #68]	; 0x44
   13f20:	str	r0, [sp, #12]
   13f24:	ldr	r0, [sp, #76]	; 0x4c
   13f28:	str	r0, [sp, #16]
   13f2c:	mov	r0, r7
   13f30:	mov	r1, r4
   13f34:	mov	r2, ip
   13f38:	mov	r3, lr
   13f3c:	bl	12f90 <__assert_fail@plt+0x1e8c>
   13f40:	mov	r8, r0
   13f44:	mov	r0, r8
   13f48:	sub	sp, fp, #28
   13f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f50:	mov	r0, #5
   13f54:	str	r0, [sp]
   13f58:	ldr	r0, [fp, #12]
   13f5c:	str	r0, [sp, #4]
   13f60:	ldr	r0, [fp, #16]
   13f64:	str	r0, [sp, #8]
   13f68:	ldr	r0, [sp, #68]	; 0x44
   13f6c:	str	r0, [sp, #12]
   13f70:	ldr	r0, [sp, #76]	; 0x4c
   13f74:	str	r0, [sp, #16]
   13f78:	mov	r0, r7
   13f7c:	ldr	r1, [sp, #72]	; 0x48
   13f80:	ldr	r2, [fp, #-84]	; 0xffffffac
   13f84:	mov	r3, r9
   13f88:	b	13f3c <__assert_fail@plt+0x2e38>
   13f8c:	bl	110ec <abort@plt>
   13f90:	mov	r3, r2
   13f94:	mov	r2, #0
   13f98:	b	13f9c <__assert_fail@plt+0x2e98>
   13f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa0:	add	fp, sp, #28
   13fa4:	sub	sp, sp, #36	; 0x24
   13fa8:	mov	r4, r2
   13fac:	str	r2, [sp, #24]
   13fb0:	mov	r5, r1
   13fb4:	mov	r6, r0
   13fb8:	str	r0, [sp, #20]
   13fbc:	movw	r8, #62112	; 0xf2a0
   13fc0:	movt	r8, #2
   13fc4:	cmp	r3, #0
   13fc8:	movne	r8, r3
   13fcc:	bl	11020 <__errno_location@plt>
   13fd0:	str	r0, [sp, #28]
   13fd4:	ldm	r8, {r3, r9}
   13fd8:	ldr	r1, [r8, #40]	; 0x28
   13fdc:	ldr	r2, [r8, #44]	; 0x2c
   13fe0:	ldr	r7, [r0]
   13fe4:	str	r7, [sp, #32]
   13fe8:	add	sl, r8, #8
   13fec:	cmp	r4, #0
   13ff0:	orreq	r9, r9, #1
   13ff4:	stm	sp, {r3, r9, sl}
   13ff8:	str	r1, [sp, #12]
   13ffc:	str	r2, [sp, #16]
   14000:	mov	r0, #0
   14004:	mov	r1, #0
   14008:	mov	r2, r6
   1400c:	mov	r3, r5
   14010:	mov	r7, r5
   14014:	bl	12f90 <__assert_fail@plt+0x1e8c>
   14018:	mov	r5, r0
   1401c:	add	r4, r0, #1
   14020:	mov	r0, r4
   14024:	bl	14ea0 <__assert_fail@plt+0x3d9c>
   14028:	mov	r6, r0
   1402c:	ldr	r0, [r8]
   14030:	ldr	r1, [r8, #40]	; 0x28
   14034:	ldr	r2, [r8, #44]	; 0x2c
   14038:	stm	sp, {r0, r9, sl}
   1403c:	str	r1, [sp, #12]
   14040:	str	r2, [sp, #16]
   14044:	mov	r0, r6
   14048:	mov	r1, r4
   1404c:	ldr	r2, [sp, #20]
   14050:	mov	r3, r7
   14054:	bl	12f90 <__assert_fail@plt+0x1e8c>
   14058:	ldr	r0, [sp, #24]
   1405c:	ldr	r1, [sp, #32]
   14060:	ldr	r2, [sp, #28]
   14064:	str	r1, [r2]
   14068:	cmp	r0, #0
   1406c:	strne	r5, [r0]
   14070:	mov	r0, r6
   14074:	sub	sp, fp, #28
   14078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1407c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14080:	add	fp, sp, #24
   14084:	movw	r8, #28920	; 0x70f8
   14088:	movt	r8, #2
   1408c:	ldr	r4, [r8]
   14090:	movw	r5, #28924	; 0x70fc
   14094:	movt	r5, #2
   14098:	ldr	r0, [r5]
   1409c:	cmp	r0, #2
   140a0:	blt	140cc <__assert_fail@plt+0x2fc8>
   140a4:	add	r7, r4, #12
   140a8:	mov	r6, #0
   140ac:	ldr	r0, [r7, r6, lsl #3]
   140b0:	bl	15d08 <__assert_fail@plt+0x4c04>
   140b4:	add	r0, r6, #1
   140b8:	ldr	r1, [r5]
   140bc:	add	r2, r6, #2
   140c0:	cmp	r2, r1
   140c4:	mov	r6, r0
   140c8:	blt	140ac <__assert_fail@plt+0x2fa8>
   140cc:	ldr	r0, [r4, #4]
   140d0:	movw	r7, #62160	; 0xf2d0
   140d4:	movt	r7, #2
   140d8:	cmp	r0, r7
   140dc:	beq	140f4 <__assert_fail@plt+0x2ff0>
   140e0:	bl	15d08 <__assert_fail@plt+0x4c04>
   140e4:	movw	r0, #28928	; 0x7100
   140e8:	movt	r0, #2
   140ec:	mov	r6, #256	; 0x100
   140f0:	strd	r6, [r0]
   140f4:	movw	r6, #28928	; 0x7100
   140f8:	movt	r6, #2
   140fc:	cmp	r4, r6
   14100:	beq	14110 <__assert_fail@plt+0x300c>
   14104:	mov	r0, r4
   14108:	bl	15d08 <__assert_fail@plt+0x4c04>
   1410c:	str	r6, [r8]
   14110:	mov	r0, #1
   14114:	str	r0, [r5]
   14118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1411c:	movw	r3, #62112	; 0xf2a0
   14120:	movt	r3, #2
   14124:	mvn	r2, #0
   14128:	b	1412c <__assert_fail@plt+0x3028>
   1412c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14130:	add	fp, sp, #28
   14134:	sub	sp, sp, #44	; 0x2c
   14138:	mov	r7, r3
   1413c:	str	r2, [sp, #36]	; 0x24
   14140:	str	r1, [sp, #32]
   14144:	mov	r5, r0
   14148:	bl	11020 <__errno_location@plt>
   1414c:	cmp	r5, #0
   14150:	blt	142bc <__assert_fail@plt+0x31b8>
   14154:	cmn	r5, #-2147483647	; 0x80000001
   14158:	beq	142bc <__assert_fail@plt+0x31b8>
   1415c:	movw	r4, #28920	; 0x70f8
   14160:	movt	r4, #2
   14164:	ldr	r6, [r4]
   14168:	str	r0, [sp, #28]
   1416c:	ldr	r0, [r0]
   14170:	str	r0, [sp, #24]
   14174:	movw	r8, #28924	; 0x70fc
   14178:	movt	r8, #2
   1417c:	ldr	r1, [r8]
   14180:	cmp	r1, r5
   14184:	ble	14190 <__assert_fail@plt+0x308c>
   14188:	mov	sl, r6
   1418c:	b	141f8 <__assert_fail@plt+0x30f4>
   14190:	str	r1, [fp, #-32]	; 0xffffffe0
   14194:	mov	r0, #8
   14198:	str	r0, [sp]
   1419c:	movw	r9, #28928	; 0x7100
   141a0:	movt	r9, #2
   141a4:	subs	r0, r6, r9
   141a8:	movne	r0, r6
   141ac:	add	r2, r5, #1
   141b0:	sub	r2, r2, r1
   141b4:	sub	r1, fp, #32
   141b8:	mvn	r3, #-2147483648	; 0x80000000
   141bc:	bl	14f88 <__assert_fail@plt+0x3e84>
   141c0:	mov	sl, r0
   141c4:	str	r0, [r4]
   141c8:	cmp	r6, r9
   141cc:	ldrdeq	r0, [r9]
   141d0:	stmeq	sl, {r0, r1}
   141d4:	ldr	r1, [r8]
   141d8:	add	r0, sl, r1, lsl #3
   141dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   141e0:	sub	r1, r2, r1
   141e4:	lsl	r2, r1, #3
   141e8:	mov	r1, #0
   141ec:	bl	11038 <memset@plt>
   141f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141f4:	str	r0, [r8]
   141f8:	mov	r9, sl
   141fc:	ldr	r6, [r9, r5, lsl #3]!
   14200:	ldr	r4, [r9, #4]!
   14204:	ldm	r7, {r0, r1}
   14208:	ldr	r2, [r7, #40]	; 0x28
   1420c:	ldr	r3, [r7, #44]	; 0x2c
   14210:	orr	r8, r1, #1
   14214:	add	r1, r7, #8
   14218:	stm	sp, {r0, r8}
   1421c:	str	r1, [sp, #20]
   14220:	add	r0, sp, #8
   14224:	stm	r0, {r1, r2, r3}
   14228:	mov	r0, r4
   1422c:	mov	r1, r6
   14230:	ldr	r2, [sp, #32]
   14234:	ldr	r3, [sp, #36]	; 0x24
   14238:	bl	12f90 <__assert_fail@plt+0x1e8c>
   1423c:	cmp	r6, r0
   14240:	bhi	142a4 <__assert_fail@plt+0x31a0>
   14244:	add	r6, r0, #1
   14248:	str	r6, [sl, r5, lsl #3]
   1424c:	movw	r0, #62160	; 0xf2d0
   14250:	movt	r0, #2
   14254:	cmp	r4, r0
   14258:	beq	14264 <__assert_fail@plt+0x3160>
   1425c:	mov	r0, r4
   14260:	bl	15d08 <__assert_fail@plt+0x4c04>
   14264:	mov	r0, r6
   14268:	bl	14ea0 <__assert_fail@plt+0x3d9c>
   1426c:	mov	r4, r0
   14270:	str	r0, [r9]
   14274:	ldr	r0, [r7]
   14278:	ldr	r1, [r7, #40]	; 0x28
   1427c:	ldr	r2, [r7, #44]	; 0x2c
   14280:	stm	sp, {r0, r8}
   14284:	ldr	r0, [sp, #20]
   14288:	add	r3, sp, #8
   1428c:	stm	r3, {r0, r1, r2}
   14290:	mov	r0, r4
   14294:	mov	r1, r6
   14298:	ldr	r2, [sp, #32]
   1429c:	ldr	r3, [sp, #36]	; 0x24
   142a0:	bl	12f90 <__assert_fail@plt+0x1e8c>
   142a4:	ldr	r0, [sp, #28]
   142a8:	ldr	r1, [sp, #24]
   142ac:	str	r1, [r0]
   142b0:	mov	r0, r4
   142b4:	sub	sp, fp, #28
   142b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142bc:	bl	110ec <abort@plt>
   142c0:	movw	r3, #62112	; 0xf2a0
   142c4:	movt	r3, #2
   142c8:	b	1412c <__assert_fail@plt+0x3028>
   142cc:	mov	r1, r0
   142d0:	mov	r0, #0
   142d4:	b	1411c <__assert_fail@plt+0x3018>
   142d8:	mov	r2, r1
   142dc:	mov	r1, r0
   142e0:	mov	r0, #0
   142e4:	b	142c0 <__assert_fail@plt+0x31bc>
   142e8:	push	{r4, r5, r6, sl, fp, lr}
   142ec:	add	fp, sp, #16
   142f0:	sub	sp, sp, #48	; 0x30
   142f4:	mov	r4, r2
   142f8:	mov	r5, r0
   142fc:	mov	r6, sp
   14300:	mov	r0, r6
   14304:	bl	14324 <__assert_fail@plt+0x3220>
   14308:	mov	r0, r5
   1430c:	mov	r1, r4
   14310:	mvn	r2, #0
   14314:	mov	r3, r6
   14318:	bl	1412c <__assert_fail@plt+0x3028>
   1431c:	sub	sp, fp, #16
   14320:	pop	{r4, r5, r6, sl, fp, pc}
   14324:	vmov.i32	q8, #0	; 0x00000000
   14328:	mov	r2, #32
   1432c:	mov	r3, r0
   14330:	vst1.32	{d16-d17}, [r3], r2
   14334:	vst1.32	{d16-d17}, [r3]
   14338:	add	r2, r0, #16
   1433c:	vst1.32	{d16-d17}, [r2]
   14340:	cmp	r1, #10
   14344:	strne	r1, [r0]
   14348:	bxne	lr
   1434c:	push	{fp, lr}
   14350:	mov	fp, sp
   14354:	bl	110ec <abort@plt>
   14358:	push	{r4, r5, r6, r7, fp, lr}
   1435c:	add	fp, sp, #16
   14360:	sub	sp, sp, #48	; 0x30
   14364:	mov	r4, r3
   14368:	mov	r5, r2
   1436c:	mov	r6, r0
   14370:	mov	r7, sp
   14374:	mov	r0, r7
   14378:	bl	14324 <__assert_fail@plt+0x3220>
   1437c:	mov	r0, r6
   14380:	mov	r1, r5
   14384:	mov	r2, r4
   14388:	mov	r3, r7
   1438c:	bl	1412c <__assert_fail@plt+0x3028>
   14390:	sub	sp, fp, #16
   14394:	pop	{r4, r5, r6, r7, fp, pc}
   14398:	mov	r2, r1
   1439c:	mov	r1, r0
   143a0:	mov	r0, #0
   143a4:	b	142e8 <__assert_fail@plt+0x31e4>
   143a8:	mov	r3, r2
   143ac:	mov	r2, r1
   143b0:	mov	r1, r0
   143b4:	mov	r0, #0
   143b8:	b	14358 <__assert_fail@plt+0x3254>
   143bc:	push	{r4, r5, r6, sl, fp, lr}
   143c0:	add	fp, sp, #16
   143c4:	sub	sp, sp, #48	; 0x30
   143c8:	mov	r4, r1
   143cc:	mov	r5, r0
   143d0:	mov	r0, #32
   143d4:	movw	r1, #62112	; 0xf2a0
   143d8:	movt	r1, #2
   143dc:	add	r3, r1, #16
   143e0:	vld1.64	{d16-d17}, [r1], r0
   143e4:	mov	r6, sp
   143e8:	vld1.64	{d18-d19}, [r3]
   143ec:	add	r3, r6, #16
   143f0:	vld1.64	{d20-d21}, [r1]
   143f4:	vst1.64	{d18-d19}, [r3]
   143f8:	mov	r1, r6
   143fc:	vst1.64	{d16-d17}, [r1], r0
   14400:	vst1.64	{d20-d21}, [r1]
   14404:	mov	r0, r6
   14408:	mov	r1, r2
   1440c:	mov	r2, #1
   14410:	bl	12e84 <__assert_fail@plt+0x1d80>
   14414:	mov	r0, #0
   14418:	mov	r1, r5
   1441c:	mov	r2, r4
   14420:	mov	r3, r6
   14424:	bl	1412c <__assert_fail@plt+0x3028>
   14428:	sub	sp, fp, #16
   1442c:	pop	{r4, r5, r6, sl, fp, pc}
   14430:	mov	r2, r1
   14434:	mvn	r1, #0
   14438:	b	143bc <__assert_fail@plt+0x32b8>
   1443c:	mov	r1, #58	; 0x3a
   14440:	b	14430 <__assert_fail@plt+0x332c>
   14444:	mov	r2, #58	; 0x3a
   14448:	b	143bc <__assert_fail@plt+0x32b8>
   1444c:	push	{r4, r5, r6, sl, fp, lr}
   14450:	add	fp, sp, #16
   14454:	sub	sp, sp, #48	; 0x30
   14458:	mov	r4, r2
   1445c:	mov	r5, r0
   14460:	mov	r6, sp
   14464:	mov	r0, r6
   14468:	bl	14324 <__assert_fail@plt+0x3220>
   1446c:	mov	r0, r6
   14470:	mov	r1, #58	; 0x3a
   14474:	mov	r2, #1
   14478:	bl	12e84 <__assert_fail@plt+0x1d80>
   1447c:	mov	r0, r5
   14480:	mov	r1, r4
   14484:	mvn	r2, #0
   14488:	mov	r3, r6
   1448c:	bl	1412c <__assert_fail@plt+0x3028>
   14490:	sub	sp, fp, #16
   14494:	pop	{r4, r5, r6, sl, fp, pc}
   14498:	push	{fp, lr}
   1449c:	mov	fp, sp
   144a0:	sub	sp, sp, #8
   144a4:	mvn	ip, #0
   144a8:	str	ip, [sp]
   144ac:	bl	144b8 <__assert_fail@plt+0x33b4>
   144b0:	mov	sp, fp
   144b4:	pop	{fp, pc}
   144b8:	push	{r4, r5, r6, r7, fp, lr}
   144bc:	add	fp, sp, #16
   144c0:	sub	sp, sp, #48	; 0x30
   144c4:	mov	r7, r3
   144c8:	mov	r5, r0
   144cc:	mov	r0, #32
   144d0:	movw	r3, #62112	; 0xf2a0
   144d4:	movt	r3, #2
   144d8:	add	r4, r3, #16
   144dc:	vld1.64	{d16-d17}, [r3], r0
   144e0:	mov	r6, sp
   144e4:	vld1.64	{d18-d19}, [r4]
   144e8:	add	r4, r6, #16
   144ec:	vld1.64	{d20-d21}, [r3]
   144f0:	vst1.64	{d18-d19}, [r4]
   144f4:	mov	r3, r6
   144f8:	vst1.64	{d16-d17}, [r3], r0
   144fc:	vst1.64	{d20-d21}, [r3]
   14500:	mov	r0, r6
   14504:	bl	12edc <__assert_fail@plt+0x1dd8>
   14508:	ldr	r2, [fp, #8]
   1450c:	mov	r0, r5
   14510:	mov	r1, r7
   14514:	mov	r3, r6
   14518:	bl	1412c <__assert_fail@plt+0x3028>
   1451c:	sub	sp, fp, #16
   14520:	pop	{r4, r5, r6, r7, fp, pc}
   14524:	mov	r3, r2
   14528:	mov	r2, r1
   1452c:	mov	r1, r0
   14530:	mov	r0, #0
   14534:	b	14498 <__assert_fail@plt+0x3394>
   14538:	push	{fp, lr}
   1453c:	mov	fp, sp
   14540:	sub	sp, sp, #8
   14544:	mov	ip, r2
   14548:	mov	r2, r1
   1454c:	mov	r1, r0
   14550:	str	r3, [sp]
   14554:	mov	r0, #0
   14558:	mov	r3, ip
   1455c:	bl	144b8 <__assert_fail@plt+0x33b4>
   14560:	mov	sp, fp
   14564:	pop	{fp, pc}
   14568:	movw	r3, #28936	; 0x7108
   1456c:	movt	r3, #2
   14570:	b	1412c <__assert_fail@plt+0x3028>
   14574:	mov	r2, r1
   14578:	mov	r1, r0
   1457c:	mov	r0, #0
   14580:	b	14568 <__assert_fail@plt+0x3464>
   14584:	mvn	r2, #0
   14588:	b	14568 <__assert_fail@plt+0x3464>
   1458c:	mov	r1, r0
   14590:	mov	r0, #0
   14594:	b	14584 <__assert_fail@plt+0x3480>
   14598:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1459c:	add	fp, sp, #24
   145a0:	sub	sp, sp, #16
   145a4:	mov	r4, r1
   145a8:	mov	r5, r0
   145ac:	mov	r7, #0
   145b0:	mov	r0, #0
   145b4:	mov	r1, r5
   145b8:	mov	r2, #5
   145bc:	bl	10f30 <dcgettext@plt>
   145c0:	cmp	r0, r5
   145c4:	beq	145d0 <__assert_fail@plt+0x34cc>
   145c8:	sub	sp, fp, #24
   145cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145d0:	bl	15d80 <__assert_fail@plt+0x4c7c>
   145d4:	mov	r6, r0
   145d8:	mov	r8, #56	; 0x38
   145dc:	mov	r0, #45	; 0x2d
   145e0:	stm	sp, {r0, r8}
   145e4:	str	r7, [sp, #8]
   145e8:	str	r7, [sp, #12]
   145ec:	mov	r0, r6
   145f0:	mov	r1, #85	; 0x55
   145f4:	mov	r2, #84	; 0x54
   145f8:	mov	r3, #70	; 0x46
   145fc:	bl	14694 <__assert_fail@plt+0x3590>
   14600:	cmp	r0, #0
   14604:	beq	14620 <__assert_fail@plt+0x351c>
   14608:	ldrb	r1, [r5]
   1460c:	movw	r2, #27038	; 0x699e
   14610:	movt	r2, #1
   14614:	movw	r0, #27042	; 0x69a2
   14618:	movt	r0, #1
   1461c:	b	14664 <__assert_fail@plt+0x3560>
   14620:	mov	r0, #48	; 0x30
   14624:	mov	r1, #51	; 0x33
   14628:	str	r8, [sp]
   1462c:	stmib	sp, {r0, r1}
   14630:	str	r0, [sp, #12]
   14634:	mov	r0, r6
   14638:	mov	r1, #71	; 0x47
   1463c:	mov	r2, #66	; 0x42
   14640:	mov	r3, #49	; 0x31
   14644:	bl	14694 <__assert_fail@plt+0x3590>
   14648:	cmp	r0, #0
   1464c:	beq	14674 <__assert_fail@plt+0x3570>
   14650:	ldrb	r1, [r5]
   14654:	movw	r2, #27046	; 0x69a6
   14658:	movt	r2, #1
   1465c:	movw	r0, #27050	; 0x69aa
   14660:	movt	r0, #1
   14664:	cmp	r1, #96	; 0x60
   14668:	moveq	r0, r2
   1466c:	sub	sp, fp, #24
   14670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14674:	movw	r1, #26632	; 0x6808
   14678:	movt	r1, #1
   1467c:	movw	r0, #27036	; 0x699c
   14680:	movt	r0, #1
   14684:	cmp	r4, #9
   14688:	moveq	r0, r1
   1468c:	sub	sp, fp, #24
   14690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14694:	push	{r4, r5, r6, r7, fp, lr}
   14698:	add	fp, sp, #16
   1469c:	sub	sp, sp, #16
   146a0:	mov	r4, r3
   146a4:	mov	r5, r2
   146a8:	mov	r7, r1
   146ac:	mov	r6, r0
   146b0:	mov	r0, r1
   146b4:	bl	15c10 <__assert_fail@plt+0x4b0c>
   146b8:	ldrb	r1, [r6]
   146bc:	cmp	r0, #0
   146c0:	andne	r1, r1, #223	; 0xdf
   146c4:	mov	r0, #0
   146c8:	cmp	r1, r7
   146cc:	bne	1470c <__assert_fail@plt+0x3608>
   146d0:	cmp	r7, #0
   146d4:	moveq	r0, #1
   146d8:	subeq	sp, fp, #16
   146dc:	popeq	{r4, r5, r6, r7, fp, pc}
   146e0:	ldr	r0, [fp, #20]
   146e4:	ldr	r1, [fp, #16]
   146e8:	ldr	r2, [fp, #12]
   146ec:	ldr	r3, [fp, #8]
   146f0:	str	r2, [sp]
   146f4:	str	r1, [sp, #4]
   146f8:	str	r0, [sp, #8]
   146fc:	mov	r0, r6
   14700:	mov	r1, r5
   14704:	mov	r2, r4
   14708:	bl	14714 <__assert_fail@plt+0x3610>
   1470c:	sub	sp, fp, #16
   14710:	pop	{r4, r5, r6, r7, fp, pc}
   14714:	push	{r4, r5, r6, r7, fp, lr}
   14718:	add	fp, sp, #16
   1471c:	sub	sp, sp, #8
   14720:	mov	r4, r3
   14724:	mov	r5, r2
   14728:	mov	r7, r1
   1472c:	mov	r6, r0
   14730:	mov	r0, r1
   14734:	bl	15c10 <__assert_fail@plt+0x4b0c>
   14738:	ldrb	r1, [r6, #1]
   1473c:	cmp	r0, #0
   14740:	andne	r1, r1, #223	; 0xdf
   14744:	mov	r0, #0
   14748:	cmp	r1, r7
   1474c:	bne	14784 <__assert_fail@plt+0x3680>
   14750:	cmp	r7, #0
   14754:	moveq	r0, #1
   14758:	subeq	sp, fp, #16
   1475c:	popeq	{r4, r5, r6, r7, fp, pc}
   14760:	ldr	r0, [fp, #16]
   14764:	ldr	r1, [fp, #12]
   14768:	ldr	r3, [fp, #8]
   1476c:	str	r1, [sp]
   14770:	str	r0, [sp, #4]
   14774:	mov	r0, r6
   14778:	mov	r1, r5
   1477c:	mov	r2, r4
   14780:	bl	1478c <__assert_fail@plt+0x3688>
   14784:	sub	sp, fp, #16
   14788:	pop	{r4, r5, r6, r7, fp, pc}
   1478c:	push	{r4, r5, r6, r7, fp, lr}
   14790:	add	fp, sp, #16
   14794:	sub	sp, sp, #8
   14798:	mov	r4, r3
   1479c:	mov	r5, r2
   147a0:	mov	r7, r1
   147a4:	mov	r6, r0
   147a8:	mov	r0, r1
   147ac:	bl	15c10 <__assert_fail@plt+0x4b0c>
   147b0:	ldrb	r1, [r6, #2]
   147b4:	cmp	r0, #0
   147b8:	andne	r1, r1, #223	; 0xdf
   147bc:	mov	r0, #0
   147c0:	cmp	r1, r7
   147c4:	bne	147f4 <__assert_fail@plt+0x36f0>
   147c8:	cmp	r7, #0
   147cc:	moveq	r0, #1
   147d0:	subeq	sp, fp, #16
   147d4:	popeq	{r4, r5, r6, r7, fp, pc}
   147d8:	ldr	r0, [fp, #12]
   147dc:	ldr	r3, [fp, #8]
   147e0:	str	r0, [sp]
   147e4:	mov	r0, r6
   147e8:	mov	r1, r5
   147ec:	mov	r2, r4
   147f0:	bl	147fc <__assert_fail@plt+0x36f8>
   147f4:	sub	sp, fp, #16
   147f8:	pop	{r4, r5, r6, r7, fp, pc}
   147fc:	push	{r4, r5, r6, r7, fp, lr}
   14800:	add	fp, sp, #16
   14804:	mov	r4, r3
   14808:	mov	r5, r2
   1480c:	mov	r7, r1
   14810:	mov	r6, r0
   14814:	mov	r0, r1
   14818:	bl	15c10 <__assert_fail@plt+0x4b0c>
   1481c:	ldrb	r1, [r6, #3]
   14820:	ldr	r3, [fp, #8]
   14824:	cmp	r0, #0
   14828:	andne	r1, r1, #223	; 0xdf
   1482c:	mov	r0, #0
   14830:	cmp	r1, r7
   14834:	popne	{r4, r5, r6, r7, fp, pc}
   14838:	cmp	r7, #0
   1483c:	beq	14854 <__assert_fail@plt+0x3750>
   14840:	mov	r0, r6
   14844:	mov	r1, r5
   14848:	mov	r2, r4
   1484c:	pop	{r4, r5, r6, r7, fp, lr}
   14850:	b	1485c <__assert_fail@plt+0x3758>
   14854:	mov	r0, #1
   14858:	pop	{r4, r5, r6, r7, fp, pc}
   1485c:	push	{r4, r5, r6, r7, fp, lr}
   14860:	add	fp, sp, #16
   14864:	mov	r4, r3
   14868:	mov	r5, r2
   1486c:	mov	r7, r1
   14870:	mov	r6, r0
   14874:	mov	r0, r1
   14878:	bl	15c10 <__assert_fail@plt+0x4b0c>
   1487c:	ldrb	r1, [r6, #4]
   14880:	cmp	r0, #0
   14884:	andne	r1, r1, #223	; 0xdf
   14888:	mov	r0, #0
   1488c:	cmp	r1, r7
   14890:	popne	{r4, r5, r6, r7, fp, pc}
   14894:	cmp	r7, #0
   14898:	beq	148b0 <__assert_fail@plt+0x37ac>
   1489c:	mov	r0, r6
   148a0:	mov	r1, r5
   148a4:	mov	r2, r4
   148a8:	pop	{r4, r5, r6, r7, fp, lr}
   148ac:	b	148b8 <__assert_fail@plt+0x37b4>
   148b0:	mov	r0, #1
   148b4:	pop	{r4, r5, r6, r7, fp, pc}
   148b8:	push	{r4, r5, r6, sl, fp, lr}
   148bc:	add	fp, sp, #16
   148c0:	mov	r4, r2
   148c4:	mov	r6, r1
   148c8:	mov	r5, r0
   148cc:	mov	r0, r1
   148d0:	bl	15c10 <__assert_fail@plt+0x4b0c>
   148d4:	ldrb	r1, [r5, #5]
   148d8:	cmp	r0, #0
   148dc:	andne	r1, r1, #223	; 0xdf
   148e0:	mov	r0, #0
   148e4:	cmp	r1, r6
   148e8:	popne	{r4, r5, r6, sl, fp, pc}
   148ec:	cmp	r6, #0
   148f0:	beq	14904 <__assert_fail@plt+0x3800>
   148f4:	mov	r0, r5
   148f8:	mov	r1, r4
   148fc:	pop	{r4, r5, r6, sl, fp, lr}
   14900:	b	1490c <__assert_fail@plt+0x3808>
   14904:	mov	r0, #1
   14908:	pop	{r4, r5, r6, sl, fp, pc}
   1490c:	push	{r4, r5, fp, lr}
   14910:	add	fp, sp, #8
   14914:	mov	r5, r1
   14918:	mov	r4, r0
   1491c:	mov	r0, r1
   14920:	bl	15c10 <__assert_fail@plt+0x4b0c>
   14924:	ldrb	r1, [r4, #6]
   14928:	cmp	r0, #0
   1492c:	andne	r1, r1, #223	; 0xdf
   14930:	mov	r0, #0
   14934:	cmp	r1, r5
   14938:	popne	{r4, r5, fp, pc}
   1493c:	cmp	r5, #0
   14940:	beq	14950 <__assert_fail@plt+0x384c>
   14944:	mov	r0, r4
   14948:	pop	{r4, r5, fp, lr}
   1494c:	b	14958 <__assert_fail@plt+0x3854>
   14950:	mov	r0, #1
   14954:	pop	{r4, r5, fp, pc}
   14958:	push	{r4, sl, fp, lr}
   1495c:	add	fp, sp, #8
   14960:	mov	r4, r0
   14964:	mov	r0, #0
   14968:	bl	15c10 <__assert_fail@plt+0x4b0c>
   1496c:	ldrb	r1, [r4, #7]
   14970:	cmp	r0, #0
   14974:	beq	1498c <__assert_fail@plt+0x3888>
   14978:	tst	r1, #223	; 0xdf
   1497c:	moveq	r0, #1
   14980:	popeq	{r4, sl, fp, pc}
   14984:	mov	r0, #0
   14988:	pop	{r4, sl, fp, pc}
   1498c:	cmp	r1, #0
   14990:	moveq	r0, #1
   14994:	popeq	{r4, sl, fp, pc}
   14998:	mov	r0, #0
   1499c:	pop	{r4, sl, fp, pc}
   149a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149a4:	add	fp, sp, #24
   149a8:	sub	sp, sp, #32
   149ac:	mov	r4, r2
   149b0:	mov	r8, r0
   149b4:	ldr	r6, [fp, #12]
   149b8:	ldr	r7, [fp, #8]
   149bc:	cmp	r1, #0
   149c0:	beq	149e8 <__assert_fail@plt+0x38e4>
   149c4:	mov	r5, r1
   149c8:	str	r4, [sp]
   149cc:	str	r3, [sp, #4]
   149d0:	movw	r2, #27140	; 0x6a04
   149d4:	movt	r2, #1
   149d8:	mov	r0, r8
   149dc:	mov	r1, #1
   149e0:	mov	r3, r5
   149e4:	b	14a00 <__assert_fail@plt+0x38fc>
   149e8:	str	r3, [sp]
   149ec:	movw	r2, #27152	; 0x6a10
   149f0:	movt	r2, #1
   149f4:	mov	r0, r8
   149f8:	mov	r1, #1
   149fc:	mov	r3, r4
   14a00:	bl	11068 <__fprintf_chk@plt>
   14a04:	movw	r1, #27159	; 0x6a17
   14a08:	movt	r1, #1
   14a0c:	mov	r0, #0
   14a10:	mov	r2, #5
   14a14:	bl	10f30 <dcgettext@plt>
   14a18:	mov	r3, r0
   14a1c:	movw	r0, #2022	; 0x7e6
   14a20:	str	r0, [sp]
   14a24:	movw	r2, #27877	; 0x6ce5
   14a28:	movt	r2, #1
   14a2c:	mov	r0, r8
   14a30:	mov	r1, #1
   14a34:	bl	11068 <__fprintf_chk@plt>
   14a38:	movw	r4, #26472	; 0x6768
   14a3c:	movt	r4, #1
   14a40:	mov	r0, r4
   14a44:	mov	r1, r8
   14a48:	bl	10e94 <fputs_unlocked@plt>
   14a4c:	movw	r1, #27163	; 0x6a1b
   14a50:	movt	r1, #1
   14a54:	mov	r0, #0
   14a58:	mov	r2, #5
   14a5c:	bl	10f30 <dcgettext@plt>
   14a60:	mov	r2, r0
   14a64:	movw	r3, #27334	; 0x6ac6
   14a68:	movt	r3, #1
   14a6c:	mov	r0, r8
   14a70:	mov	r1, #1
   14a74:	bl	11068 <__fprintf_chk@plt>
   14a78:	mov	r0, r4
   14a7c:	mov	r1, r8
   14a80:	bl	10e94 <fputs_unlocked@plt>
   14a84:	cmp	r6, #9
   14a88:	bhi	14ac4 <__assert_fail@plt+0x39c0>
   14a8c:	add	r0, pc, #0
   14a90:	ldr	pc, [r0, r6, lsl #2]
   14a94:			; <UNDEFINED> instruction: 0x00014abc
   14a98:	ldrdeq	r4, [r1], -r0
   14a9c:	andeq	r4, r1, r0, lsl #22
   14aa0:	andeq	r4, r1, r8, lsr #22
   14aa4:	andeq	r4, r1, r0, asr fp
   14aa8:	andeq	r4, r1, r8, ror fp
   14aac:	andeq	r4, r1, r0, lsr #23
   14ab0:	ldrdeq	r4, [r1], -r8
   14ab4:	andeq	r4, r1, r8, ror ip
   14ab8:	andeq	r4, r1, r0, lsr #24
   14abc:	sub	sp, fp, #24
   14ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ac4:	movw	r1, #27687	; 0x6c27
   14ac8:	movt	r1, #1
   14acc:	b	14c28 <__assert_fail@plt+0x3b24>
   14ad0:	movw	r1, #27368	; 0x6ae8
   14ad4:	movt	r1, #1
   14ad8:	mov	r0, #0
   14adc:	mov	r2, #5
   14ae0:	bl	10f30 <dcgettext@plt>
   14ae4:	mov	r2, r0
   14ae8:	ldr	r3, [r7]
   14aec:	mov	r0, r8
   14af0:	mov	r1, #1
   14af4:	sub	sp, fp, #24
   14af8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14afc:	b	11068 <__fprintf_chk@plt>
   14b00:	movw	r1, #27384	; 0x6af8
   14b04:	movt	r1, #1
   14b08:	mov	r0, #0
   14b0c:	mov	r2, #5
   14b10:	bl	10f30 <dcgettext@plt>
   14b14:	mov	r2, r0
   14b18:	ldr	r3, [r7]
   14b1c:	ldr	r0, [r7, #4]
   14b20:	str	r0, [sp]
   14b24:	b	14c14 <__assert_fail@plt+0x3b10>
   14b28:	movw	r1, #27407	; 0x6b0f
   14b2c:	movt	r1, #1
   14b30:	mov	r0, #0
   14b34:	mov	r2, #5
   14b38:	bl	10f30 <dcgettext@plt>
   14b3c:	mov	r2, r0
   14b40:	ldr	r3, [r7]
   14b44:	ldmib	r7, {r0, r1}
   14b48:	stm	sp, {r0, r1}
   14b4c:	b	14c14 <__assert_fail@plt+0x3b10>
   14b50:	movw	r1, #27435	; 0x6b2b
   14b54:	movt	r1, #1
   14b58:	mov	r0, #0
   14b5c:	mov	r2, #5
   14b60:	bl	10f30 <dcgettext@plt>
   14b64:	mov	r2, r0
   14b68:	ldr	r3, [r7]
   14b6c:	ldmib	r7, {r0, r1, r7}
   14b70:	stm	sp, {r0, r1, r7}
   14b74:	b	14c14 <__assert_fail@plt+0x3b10>
   14b78:	movw	r1, #27467	; 0x6b4b
   14b7c:	movt	r1, #1
   14b80:	mov	r0, #0
   14b84:	mov	r2, #5
   14b88:	bl	10f30 <dcgettext@plt>
   14b8c:	mov	r2, r0
   14b90:	ldr	r3, [r7]
   14b94:	ldmib	r7, {r0, r1, r6, r7}
   14b98:	stm	sp, {r0, r1, r6, r7}
   14b9c:	b	14c14 <__assert_fail@plt+0x3b10>
   14ba0:	movw	r1, #27503	; 0x6b6f
   14ba4:	movt	r1, #1
   14ba8:	mov	r0, #0
   14bac:	mov	r2, #5
   14bb0:	bl	10f30 <dcgettext@plt>
   14bb4:	mov	r2, r0
   14bb8:	ldr	r3, [r7]
   14bbc:	ldmib	r7, {r0, r1, r6}
   14bc0:	ldr	r5, [r7, #16]
   14bc4:	ldr	r7, [r7, #20]
   14bc8:	stm	sp, {r0, r1, r6}
   14bcc:	str	r5, [sp, #12]
   14bd0:	str	r7, [sp, #16]
   14bd4:	b	14c14 <__assert_fail@plt+0x3b10>
   14bd8:	movw	r1, #27543	; 0x6b97
   14bdc:	movt	r1, #1
   14be0:	mov	r0, #0
   14be4:	mov	r2, #5
   14be8:	bl	10f30 <dcgettext@plt>
   14bec:	mov	r2, r0
   14bf0:	ldr	r3, [r7]
   14bf4:	ldmib	r7, {r0, r1, r6}
   14bf8:	ldr	r5, [r7, #16]
   14bfc:	ldr	r4, [r7, #20]
   14c00:	ldr	r7, [r7, #24]
   14c04:	stm	sp, {r0, r1, r6}
   14c08:	str	r5, [sp, #12]
   14c0c:	str	r4, [sp, #16]
   14c10:	str	r7, [sp, #20]
   14c14:	mov	r0, r8
   14c18:	mov	r1, #1
   14c1c:	b	14cc8 <__assert_fail@plt+0x3bc4>
   14c20:	movw	r1, #27635	; 0x6bf3
   14c24:	movt	r1, #1
   14c28:	mov	r0, #0
   14c2c:	mov	r2, #5
   14c30:	bl	10f30 <dcgettext@plt>
   14c34:	mov	ip, r0
   14c38:	ldr	r3, [r7]
   14c3c:	ldr	r0, [r7, #4]
   14c40:	ldr	r1, [r7, #8]
   14c44:	ldr	r6, [r7, #12]
   14c48:	ldr	r5, [r7, #16]
   14c4c:	ldr	r4, [r7, #20]
   14c50:	ldr	r2, [r7, #24]
   14c54:	ldr	lr, [r7, #28]
   14c58:	ldr	r7, [r7, #32]
   14c5c:	stm	sp, {r0, r1, r6}
   14c60:	str	r5, [sp, #12]
   14c64:	str	r4, [sp, #16]
   14c68:	str	r2, [sp, #20]
   14c6c:	str	lr, [sp, #24]
   14c70:	str	r7, [sp, #28]
   14c74:	b	14cbc <__assert_fail@plt+0x3bb8>
   14c78:	movw	r1, #27587	; 0x6bc3
   14c7c:	movt	r1, #1
   14c80:	mov	r0, #0
   14c84:	mov	r2, #5
   14c88:	bl	10f30 <dcgettext@plt>
   14c8c:	mov	ip, r0
   14c90:	ldr	r3, [r7]
   14c94:	ldmib	r7, {r0, r1, r6}
   14c98:	ldr	r5, [r7, #16]
   14c9c:	ldr	r4, [r7, #20]
   14ca0:	ldr	r2, [r7, #24]
   14ca4:	ldr	r7, [r7, #28]
   14ca8:	stm	sp, {r0, r1, r6}
   14cac:	str	r5, [sp, #12]
   14cb0:	str	r4, [sp, #16]
   14cb4:	str	r2, [sp, #20]
   14cb8:	str	r7, [sp, #24]
   14cbc:	mov	r0, r8
   14cc0:	mov	r1, #1
   14cc4:	mov	r2, ip
   14cc8:	bl	11068 <__fprintf_chk@plt>
   14ccc:	sub	sp, fp, #24
   14cd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cd4:	push	{r4, sl, fp, lr}
   14cd8:	add	fp, sp, #8
   14cdc:	sub	sp, sp, #8
   14ce0:	mov	lr, #0
   14ce4:	ldr	ip, [fp, #8]
   14ce8:	ldr	r4, [ip, lr, lsl #2]
   14cec:	add	lr, lr, #1
   14cf0:	cmp	r4, #0
   14cf4:	bne	14ce8 <__assert_fail@plt+0x3be4>
   14cf8:	sub	r4, lr, #1
   14cfc:	str	ip, [sp]
   14d00:	str	r4, [sp, #4]
   14d04:	bl	149a0 <__assert_fail@plt+0x389c>
   14d08:	sub	sp, fp, #8
   14d0c:	pop	{r4, sl, fp, pc}
   14d10:	push	{r4, r5, fp, lr}
   14d14:	add	fp, sp, #8
   14d18:	sub	sp, sp, #48	; 0x30
   14d1c:	mov	ip, #0
   14d20:	ldr	r4, [fp, #8]
   14d24:	add	lr, sp, #8
   14d28:	ldr	r5, [r4]
   14d2c:	str	r5, [lr, ip, lsl #2]
   14d30:	cmp	r5, #0
   14d34:	beq	14d48 <__assert_fail@plt+0x3c44>
   14d38:	add	ip, ip, #1
   14d3c:	add	r4, r4, #4
   14d40:	cmp	ip, #10
   14d44:	bcc	14d28 <__assert_fail@plt+0x3c24>
   14d48:	str	lr, [sp]
   14d4c:	str	ip, [sp, #4]
   14d50:	bl	149a0 <__assert_fail@plt+0x389c>
   14d54:	sub	sp, fp, #8
   14d58:	pop	{r4, r5, fp, pc}
   14d5c:	push	{fp, lr}
   14d60:	mov	fp, sp
   14d64:	sub	sp, sp, #8
   14d68:	add	ip, fp, #8
   14d6c:	str	ip, [sp, #4]
   14d70:	str	ip, [sp]
   14d74:	bl	14d10 <__assert_fail@plt+0x3c0c>
   14d78:	mov	sp, fp
   14d7c:	pop	{fp, pc}
   14d80:	push	{fp, lr}
   14d84:	mov	fp, sp
   14d88:	movw	r0, #29012	; 0x7154
   14d8c:	movt	r0, #2
   14d90:	ldr	r1, [r0]
   14d94:	movw	r0, #26472	; 0x6768
   14d98:	movt	r0, #1
   14d9c:	bl	10e94 <fputs_unlocked@plt>
   14da0:	movw	r1, #27747	; 0x6c63
   14da4:	movt	r1, #1
   14da8:	mov	r0, #0
   14dac:	mov	r2, #5
   14db0:	bl	10f30 <dcgettext@plt>
   14db4:	mov	r1, r0
   14db8:	movw	r2, #27767	; 0x6c77
   14dbc:	movt	r2, #1
   14dc0:	mov	r0, #1
   14dc4:	bl	11044 <__printf_chk@plt>
   14dc8:	movw	r1, #27789	; 0x6c8d
   14dcc:	movt	r1, #1
   14dd0:	mov	r0, #0
   14dd4:	mov	r2, #5
   14dd8:	bl	10f30 <dcgettext@plt>
   14ddc:	mov	r1, r0
   14de0:	movw	r2, #25940	; 0x6554
   14de4:	movt	r2, #1
   14de8:	movw	r3, #26281	; 0x66a9
   14dec:	movt	r3, #1
   14df0:	mov	r0, #1
   14df4:	bl	11044 <__printf_chk@plt>
   14df8:	movw	r1, #27809	; 0x6ca1
   14dfc:	movt	r1, #1
   14e00:	mov	r0, #0
   14e04:	mov	r2, #5
   14e08:	bl	10f30 <dcgettext@plt>
   14e0c:	mov	r1, r0
   14e10:	movw	r2, #27848	; 0x6cc8
   14e14:	movt	r2, #1
   14e18:	mov	r0, #1
   14e1c:	pop	{fp, lr}
   14e20:	b	11044 <__printf_chk@plt>
   14e24:	b	14e28 <__assert_fail@plt+0x3d24>
   14e28:	push	{r4, r5, r6, sl, fp, lr}
   14e2c:	add	fp, sp, #16
   14e30:	mov	r4, r2
   14e34:	mov	r5, r1
   14e38:	mov	r6, r0
   14e3c:	bl	15e18 <__assert_fail@plt+0x4d14>
   14e40:	cmp	r0, #0
   14e44:	popne	{r4, r5, r6, sl, fp, pc}
   14e48:	cmp	r6, #0
   14e4c:	beq	14e60 <__assert_fail@plt+0x3d5c>
   14e50:	cmp	r5, #0
   14e54:	cmpne	r4, #0
   14e58:	bne	14e60 <__assert_fail@plt+0x3d5c>
   14e5c:	pop	{r4, r5, r6, sl, fp, pc}
   14e60:	bl	15214 <__assert_fail@plt+0x4110>
   14e64:	push	{fp, lr}
   14e68:	mov	fp, sp
   14e6c:	bl	158d8 <__assert_fail@plt+0x47d4>
   14e70:	bl	14e78 <__assert_fail@plt+0x3d74>
   14e74:	pop	{fp, pc}
   14e78:	cmp	r0, #0
   14e7c:	bxne	lr
   14e80:	push	{fp, lr}
   14e84:	mov	fp, sp
   14e88:	bl	15214 <__assert_fail@plt+0x4110>
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	bl	15d4c <__assert_fail@plt+0x4c48>
   14e98:	bl	14e78 <__assert_fail@plt+0x3d74>
   14e9c:	pop	{fp, pc}
   14ea0:	b	14e64 <__assert_fail@plt+0x3d60>
   14ea4:	push	{r4, r5, fp, lr}
   14ea8:	add	fp, sp, #8
   14eac:	mov	r4, r1
   14eb0:	mov	r5, r0
   14eb4:	bl	15908 <__assert_fail@plt+0x4804>
   14eb8:	cmp	r0, #0
   14ebc:	popne	{r4, r5, fp, pc}
   14ec0:	cmp	r5, #0
   14ec4:	beq	14ed4 <__assert_fail@plt+0x3dd0>
   14ec8:	cmp	r4, #0
   14ecc:	bne	14ed4 <__assert_fail@plt+0x3dd0>
   14ed0:	pop	{r4, r5, fp, pc}
   14ed4:	bl	15214 <__assert_fail@plt+0x4110>
   14ed8:	push	{fp, lr}
   14edc:	mov	fp, sp
   14ee0:	bl	15d50 <__assert_fail@plt+0x4c4c>
   14ee4:	bl	14e78 <__assert_fail@plt+0x3d74>
   14ee8:	pop	{fp, pc}
   14eec:	push	{fp, lr}
   14ef0:	mov	fp, sp
   14ef4:	bl	15d60 <__assert_fail@plt+0x4c5c>
   14ef8:	bl	14e78 <__assert_fail@plt+0x3d74>
   14efc:	pop	{fp, pc}
   14f00:	push	{fp, lr}
   14f04:	mov	fp, sp
   14f08:	mov	r2, r1
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #0
   14f14:	bl	14e28 <__assert_fail@plt+0x3d24>
   14f18:	pop	{fp, pc}
   14f1c:	mov	r2, r1
   14f20:	mov	r1, r0
   14f24:	mov	r0, #0
   14f28:	b	14eec <__assert_fail@plt+0x3de8>
   14f2c:	mov	r2, #1
   14f30:	b	14f34 <__assert_fail@plt+0x3e30>
   14f34:	push	{r4, r5, fp, lr}
   14f38:	add	fp, sp, #8
   14f3c:	mov	r4, r1
   14f40:	ldr	r5, [r1]
   14f44:	cmp	r0, #0
   14f48:	beq	14f60 <__assert_fail@plt+0x3e5c>
   14f4c:	mov	r1, #1
   14f50:	add	r1, r1, r5, lsr #1
   14f54:	adds	r5, r5, r1
   14f58:	bcc	14f78 <__assert_fail@plt+0x3e74>
   14f5c:	bl	15214 <__assert_fail@plt+0x4110>
   14f60:	cmp	r5, #0
   14f64:	bne	14f78 <__assert_fail@plt+0x3e74>
   14f68:	mov	r1, #64	; 0x40
   14f6c:	udiv	r5, r1, r2
   14f70:	cmp	r2, #64	; 0x40
   14f74:	addhi	r5, r5, #1
   14f78:	mov	r1, r5
   14f7c:	bl	14e28 <__assert_fail@plt+0x3d24>
   14f80:	str	r5, [r4]
   14f84:	pop	{r4, r5, fp, pc}
   14f88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f8c:	add	fp, sp, #24
   14f90:	mov	r8, r1
   14f94:	ldr	r6, [r1]
   14f98:	add	r1, r6, r6, asr #1
   14f9c:	cmp	r1, r6
   14fa0:	mvnvs	r1, #-2147483648	; 0x80000000
   14fa4:	cmp	r1, r3
   14fa8:	mov	r5, r1
   14fac:	movgt	r5, r3
   14fb0:	cmn	r3, #1
   14fb4:	movle	r5, r1
   14fb8:	ldr	r4, [fp, #8]
   14fbc:	cmn	r4, #1
   14fc0:	ble	14fe8 <__assert_fail@plt+0x3ee4>
   14fc4:	cmp	r4, #0
   14fc8:	beq	1503c <__assert_fail@plt+0x3f38>
   14fcc:	cmn	r5, #1
   14fd0:	ble	15010 <__assert_fail@plt+0x3f0c>
   14fd4:	mvn	r7, #-2147483648	; 0x80000000
   14fd8:	udiv	r1, r7, r4
   14fdc:	cmp	r1, r5
   14fe0:	bge	1503c <__assert_fail@plt+0x3f38>
   14fe4:	b	1504c <__assert_fail@plt+0x3f48>
   14fe8:	cmn	r5, #1
   14fec:	ble	1502c <__assert_fail@plt+0x3f28>
   14ff0:	cmn	r4, #1
   14ff4:	beq	1503c <__assert_fail@plt+0x3f38>
   14ff8:	mov	r1, #-2147483648	; 0x80000000
   14ffc:	sdiv	r1, r1, r4
   15000:	mvn	r7, #-2147483648	; 0x80000000
   15004:	cmp	r1, r5
   15008:	bge	1503c <__assert_fail@plt+0x3f38>
   1500c:	b	1504c <__assert_fail@plt+0x3f48>
   15010:	beq	1503c <__assert_fail@plt+0x3f38>
   15014:	mov	r1, #-2147483648	; 0x80000000
   15018:	sdiv	r1, r1, r5
   1501c:	mvn	r7, #-2147483648	; 0x80000000
   15020:	cmp	r1, r4
   15024:	bge	1503c <__assert_fail@plt+0x3f38>
   15028:	b	1504c <__assert_fail@plt+0x3f48>
   1502c:	mvn	r7, #-2147483648	; 0x80000000
   15030:	sdiv	r1, r7, r4
   15034:	cmp	r5, r1
   15038:	blt	1504c <__assert_fail@plt+0x3f48>
   1503c:	mul	r1, r5, r4
   15040:	mov	r7, #64	; 0x40
   15044:	cmp	r1, #63	; 0x3f
   15048:	bgt	15054 <__assert_fail@plt+0x3f50>
   1504c:	sdiv	r5, r7, r4
   15050:	mul	r1, r5, r4
   15054:	cmp	r0, #0
   15058:	moveq	r7, #0
   1505c:	streq	r7, [r8]
   15060:	sub	r7, r5, r6
   15064:	cmp	r7, r2
   15068:	bge	15114 <__assert_fail@plt+0x4010>
   1506c:	add	r5, r6, r2
   15070:	mov	r1, #0
   15074:	cmp	r5, r3
   15078:	mov	r2, #0
   1507c:	movwgt	r2, #1
   15080:	cmn	r3, #1
   15084:	movwgt	r1, #1
   15088:	cmp	r5, r6
   1508c:	bvs	150fc <__assert_fail@plt+0x3ff8>
   15090:	ands	r1, r1, r2
   15094:	bne	150fc <__assert_fail@plt+0x3ff8>
   15098:	cmn	r4, #1
   1509c:	ble	150c4 <__assert_fail@plt+0x3fc0>
   150a0:	cmp	r4, #0
   150a4:	beq	15110 <__assert_fail@plt+0x400c>
   150a8:	cmn	r5, #1
   150ac:	ble	150e8 <__assert_fail@plt+0x3fe4>
   150b0:	mvn	r1, #-2147483648	; 0x80000000
   150b4:	udiv	r1, r1, r4
   150b8:	cmp	r1, r5
   150bc:	bge	15110 <__assert_fail@plt+0x400c>
   150c0:	b	150fc <__assert_fail@plt+0x3ff8>
   150c4:	cmn	r5, #1
   150c8:	ble	15100 <__assert_fail@plt+0x3ffc>
   150cc:	cmn	r4, #1
   150d0:	beq	15110 <__assert_fail@plt+0x400c>
   150d4:	mov	r1, #-2147483648	; 0x80000000
   150d8:	sdiv	r1, r1, r4
   150dc:	cmp	r1, r5
   150e0:	bge	15110 <__assert_fail@plt+0x400c>
   150e4:	b	150fc <__assert_fail@plt+0x3ff8>
   150e8:	beq	15110 <__assert_fail@plt+0x400c>
   150ec:	mov	r1, #-2147483648	; 0x80000000
   150f0:	sdiv	r1, r1, r5
   150f4:	cmp	r1, r4
   150f8:	bge	15110 <__assert_fail@plt+0x400c>
   150fc:	bl	15214 <__assert_fail@plt+0x4110>
   15100:	mvn	r1, #-2147483648	; 0x80000000
   15104:	sdiv	r1, r1, r4
   15108:	cmp	r5, r1
   1510c:	blt	150fc <__assert_fail@plt+0x3ff8>
   15110:	mul	r1, r5, r4
   15114:	bl	14ea4 <__assert_fail@plt+0x3da0>
   15118:	str	r5, [r8]
   1511c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15120:	mov	r1, #1
   15124:	b	15128 <__assert_fail@plt+0x4024>
   15128:	push	{fp, lr}
   1512c:	mov	fp, sp
   15130:	bl	15884 <__assert_fail@plt+0x4780>
   15134:	bl	14e78 <__assert_fail@plt+0x3d74>
   15138:	pop	{fp, pc}
   1513c:	mov	r1, #1
   15140:	b	15144 <__assert_fail@plt+0x4040>
   15144:	push	{fp, lr}
   15148:	mov	fp, sp
   1514c:	bl	15d5c <__assert_fail@plt+0x4c58>
   15150:	bl	14e78 <__assert_fail@plt+0x3d74>
   15154:	pop	{fp, pc}
   15158:	push	{r4, r5, r6, sl, fp, lr}
   1515c:	add	fp, sp, #16
   15160:	mov	r4, r1
   15164:	mov	r5, r0
   15168:	mov	r0, r1
   1516c:	bl	14e64 <__assert_fail@plt+0x3d60>
   15170:	mov	r6, r0
   15174:	mov	r1, r5
   15178:	mov	r2, r4
   1517c:	bl	10ef4 <memcpy@plt>
   15180:	mov	r0, r6
   15184:	pop	{r4, r5, r6, sl, fp, pc}
   15188:	push	{r4, r5, r6, sl, fp, lr}
   1518c:	add	fp, sp, #16
   15190:	mov	r4, r1
   15194:	mov	r5, r0
   15198:	mov	r0, r1
   1519c:	bl	14e8c <__assert_fail@plt+0x3d88>
   151a0:	mov	r6, r0
   151a4:	mov	r1, r5
   151a8:	mov	r2, r4
   151ac:	bl	10ef4 <memcpy@plt>
   151b0:	mov	r0, r6
   151b4:	pop	{r4, r5, r6, sl, fp, pc}
   151b8:	push	{r4, r5, r6, sl, fp, lr}
   151bc:	add	fp, sp, #16
   151c0:	mov	r4, r1
   151c4:	mov	r5, r0
   151c8:	add	r0, r1, #1
   151cc:	bl	14e8c <__assert_fail@plt+0x3d88>
   151d0:	mov	r6, r0
   151d4:	mov	r0, #0
   151d8:	strb	r0, [r6, r4]
   151dc:	mov	r0, r6
   151e0:	mov	r1, r5
   151e4:	mov	r2, r4
   151e8:	bl	10ef4 <memcpy@plt>
   151ec:	mov	r0, r6
   151f0:	pop	{r4, r5, r6, sl, fp, pc}
   151f4:	push	{r4, sl, fp, lr}
   151f8:	add	fp, sp, #8
   151fc:	mov	r4, r0
   15200:	bl	11008 <strlen@plt>
   15204:	add	r1, r0, #1
   15208:	mov	r0, r4
   1520c:	pop	{r4, sl, fp, lr}
   15210:	b	15158 <__assert_fail@plt+0x4054>
   15214:	push	{fp, lr}
   15218:	mov	fp, sp
   1521c:	movw	r0, #28916	; 0x70f4
   15220:	movt	r0, #2
   15224:	ldr	r4, [r0]
   15228:	movw	r1, #27924	; 0x6d14
   1522c:	movt	r1, #1
   15230:	mov	r0, #0
   15234:	mov	r2, #5
   15238:	bl	10f30 <dcgettext@plt>
   1523c:	mov	r3, r0
   15240:	movw	r2, #26887	; 0x6907
   15244:	movt	r2, #1
   15248:	mov	r0, r4
   1524c:	mov	r1, #0
   15250:	bl	10fa8 <error@plt>
   15254:	bl	110ec <abort@plt>
   15258:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1525c:	add	fp, sp, #24
   15260:	sub	sp, sp, #16
   15264:	mov	r5, r3
   15268:	mov	r6, r2
   1526c:	mov	r2, r1
   15270:	mov	r8, r0
   15274:	ldr	r0, [fp, #16]
   15278:	str	r0, [sp]
   1527c:	add	r3, sp, #8
   15280:	mov	r0, r8
   15284:	mov	r1, #0
   15288:	bl	15350 <__assert_fail@plt+0x424c>
   1528c:	cmp	r0, #0
   15290:	bne	15320 <__assert_fail@plt+0x421c>
   15294:	ldr	r7, [sp, #8]
   15298:	ldr	r4, [sp, #12]
   1529c:	subs	r0, r7, r6
   152a0:	sbcs	r0, r4, r5
   152a4:	bcc	152c8 <__assert_fail@plt+0x41c4>
   152a8:	ldr	r0, [fp, #12]
   152ac:	ldr	r1, [fp, #8]
   152b0:	subs	r1, r1, r7
   152b4:	sbcs	r0, r0, r4
   152b8:	ldrcs	r0, [sp, #8]
   152bc:	ldrcs	r1, [sp, #12]
   152c0:	subcs	sp, fp, #24
   152c4:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   152c8:	bl	11020 <__errno_location@plt>
   152cc:	subs	r1, r7, #1073741824	; 0x40000000
   152d0:	sbcs	r1, r4, #0
   152d4:	movcc	r1, #34	; 0x22
   152d8:	movcs	r1, #75	; 0x4b
   152dc:	str	r1, [r0]
   152e0:	ldr	r5, [fp, #24]
   152e4:	ldr	r6, [fp, #20]
   152e8:	bl	11020 <__errno_location@plt>
   152ec:	ldr	r4, [r0]
   152f0:	mov	r0, r8
   152f4:	bl	1458c <__assert_fail@plt+0x3488>
   152f8:	str	r0, [sp]
   152fc:	subs	r1, r4, #22
   15300:	movne	r1, r4
   15304:	cmp	r5, #0
   15308:	movweq	r5, #1
   1530c:	movw	r2, #26883	; 0x6903
   15310:	movt	r2, #1
   15314:	mov	r0, r5
   15318:	mov	r3, r6
   1531c:	bl	10fa8 <error@plt>
   15320:	cmp	r0, #1
   15324:	beq	1533c <__assert_fail@plt+0x4238>
   15328:	cmp	r0, #3
   1532c:	bne	152e0 <__assert_fail@plt+0x41dc>
   15330:	bl	11020 <__errno_location@plt>
   15334:	mov	r1, #0
   15338:	b	152dc <__assert_fail@plt+0x41d8>
   1533c:	bl	11020 <__errno_location@plt>
   15340:	mov	r1, #75	; 0x4b
   15344:	b	152dc <__assert_fail@plt+0x41d8>
   15348:	mov	r1, #10
   1534c:	b	15258 <__assert_fail@plt+0x4154>
   15350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15354:	add	fp, sp, #28
   15358:	sub	sp, sp, #20
   1535c:	cmp	r2, #37	; 0x25
   15360:	bcs	15790 <__assert_fail@plt+0x468c>
   15364:	mov	r5, r2
   15368:	mov	r6, r1
   1536c:	mov	r4, r0
   15370:	str	r3, [sp, #4]
   15374:	ldr	sl, [fp, #8]
   15378:	bl	11020 <__errno_location@plt>
   1537c:	mov	r7, r0
   15380:	mov	r0, #0
   15384:	str	r0, [r7]
   15388:	bl	10ff0 <__ctype_b_loc@plt>
   1538c:	ldr	r1, [r0]
   15390:	mov	r2, r4
   15394:	ldrb	r0, [r2], #1
   15398:	add	r3, r1, r0, lsl #1
   1539c:	ldrb	r3, [r3, #1]
   153a0:	tst	r3, #32
   153a4:	bne	15394 <__assert_fail@plt+0x4290>
   153a8:	add	r9, sp, #16
   153ac:	cmp	r6, #0
   153b0:	movne	r9, r6
   153b4:	mov	r8, #4
   153b8:	cmp	r0, #45	; 0x2d
   153bc:	beq	15784 <__assert_fail@plt+0x4680>
   153c0:	mov	r0, r4
   153c4:	mov	r1, r9
   153c8:	mov	r2, r5
   153cc:	bl	1105c <strtoumax@plt>
   153d0:	str	r1, [sp, #12]
   153d4:	str	r0, [sp, #8]
   153d8:	ldr	r6, [r9]
   153dc:	cmp	r6, r4
   153e0:	beq	15408 <__assert_fail@plt+0x4304>
   153e4:	ldr	r0, [r7]
   153e8:	cmp	r0, #0
   153ec:	beq	1543c <__assert_fail@plt+0x4338>
   153f0:	cmp	r0, #34	; 0x22
   153f4:	bne	15784 <__assert_fail@plt+0x4680>
   153f8:	mov	r8, #1
   153fc:	cmp	sl, #0
   15400:	bne	15448 <__assert_fail@plt+0x4344>
   15404:	b	15774 <__assert_fail@plt+0x4670>
   15408:	cmp	sl, #0
   1540c:	ldrbne	r1, [r6]
   15410:	cmpne	r1, #0
   15414:	beq	15784 <__assert_fail@plt+0x4680>
   15418:	mov	r0, sl
   1541c:	bl	11014 <strchr@plt>
   15420:	cmp	r0, #0
   15424:	beq	15784 <__assert_fail@plt+0x4680>
   15428:	mov	r8, #0
   1542c:	str	r8, [sp, #12]
   15430:	mov	r0, #1
   15434:	str	r0, [sp, #8]
   15438:	b	15448 <__assert_fail@plt+0x4344>
   1543c:	mov	r8, r0
   15440:	cmp	sl, #0
   15444:	beq	15774 <__assert_fail@plt+0x4670>
   15448:	ldrb	r4, [r6]
   1544c:	cmp	r4, #0
   15450:	beq	15774 <__assert_fail@plt+0x4670>
   15454:	mov	r0, sl
   15458:	mov	r1, r4
   1545c:	bl	11014 <strchr@plt>
   15460:	cmp	r0, #0
   15464:	beq	15674 <__assert_fail@plt+0x4570>
   15468:	sub	r0, r4, #69	; 0x45
   1546c:	mov	r7, #1
   15470:	mov	r5, #1024	; 0x400
   15474:	cmp	r0, #47	; 0x2f
   15478:	bhi	15570 <__assert_fail@plt+0x446c>
   1547c:	add	r1, pc, #0
   15480:	ldr	pc, [r1, r0, lsl #2]
   15484:	andeq	r5, r1, r4, asr #10
   15488:	andeq	r5, r1, r0, ror r5
   1548c:	andeq	r5, r1, r4, asr #10
   15490:	andeq	r5, r1, r0, ror r5
   15494:	andeq	r5, r1, r0, ror r5
   15498:	andeq	r5, r1, r0, ror r5
   1549c:	andeq	r5, r1, r4, asr #10
   154a0:	andeq	r5, r1, r0, ror r5
   154a4:	andeq	r5, r1, r4, asr #10
   154a8:	andeq	r5, r1, r0, ror r5
   154ac:	andeq	r5, r1, r0, ror r5
   154b0:	andeq	r5, r1, r4, asr #10
   154b4:	andeq	r5, r1, r0, ror r5
   154b8:	andeq	r5, r1, r0, ror r5
   154bc:	andeq	r5, r1, r0, ror r5
   154c0:	andeq	r5, r1, r4, asr #10
   154c4:	andeq	r5, r1, r0, ror r5
   154c8:	andeq	r5, r1, r0, ror r5
   154cc:	andeq	r5, r1, r0, ror r5
   154d0:	andeq	r5, r1, r0, ror r5
   154d4:	andeq	r5, r1, r4, asr #10
   154d8:	andeq	r5, r1, r4, asr #10
   154dc:	andeq	r5, r1, r0, ror r5
   154e0:	andeq	r5, r1, r0, ror r5
   154e4:	andeq	r5, r1, r0, ror r5
   154e8:	andeq	r5, r1, r0, ror r5
   154ec:	andeq	r5, r1, r0, ror r5
   154f0:	andeq	r5, r1, r0, ror r5
   154f4:	andeq	r5, r1, r0, ror r5
   154f8:	andeq	r5, r1, r0, ror r5
   154fc:	andeq	r5, r1, r0, ror r5
   15500:	andeq	r5, r1, r0, ror r5
   15504:	andeq	r5, r1, r0, ror r5
   15508:	andeq	r5, r1, r0, ror r5
   1550c:	andeq	r5, r1, r4, asr #10
   15510:	andeq	r5, r1, r0, ror r5
   15514:	andeq	r5, r1, r0, ror r5
   15518:	andeq	r5, r1, r0, ror r5
   1551c:	andeq	r5, r1, r4, asr #10
   15520:	andeq	r5, r1, r0, ror r5
   15524:	andeq	r5, r1, r4, asr #10
   15528:	andeq	r5, r1, r0, ror r5
   1552c:	andeq	r5, r1, r0, ror r5
   15530:	andeq	r5, r1, r0, ror r5
   15534:	andeq	r5, r1, r0, ror r5
   15538:	andeq	r5, r1, r0, ror r5
   1553c:	andeq	r5, r1, r0, ror r5
   15540:	andeq	r5, r1, r4, asr #10
   15544:	mov	r0, sl
   15548:	mov	r1, #48	; 0x30
   1554c:	bl	11014 <strchr@plt>
   15550:	cmp	r0, #0
   15554:	beq	15570 <__assert_fail@plt+0x446c>
   15558:	ldrb	r0, [r6, #1]
   1555c:	cmp	r0, #66	; 0x42
   15560:	cmpne	r0, #68	; 0x44
   15564:	bne	1568c <__assert_fail@plt+0x4588>
   15568:	mov	r7, #2
   1556c:	mov	r5, #1000	; 0x3e8
   15570:	sub	r1, r4, #66	; 0x42
   15574:	cmp	r1, #53	; 0x35
   15578:	bhi	15674 <__assert_fail@plt+0x4570>
   1557c:	mov	r0, #0
   15580:	add	r2, pc, #0
   15584:	ldr	pc, [r2, r1, lsl #2]
   15588:	strdeq	r5, [r1], -r8
   1558c:	andeq	r5, r1, r4, ror r6
   15590:	andeq	r5, r1, r4, ror r6
   15594:	andeq	r5, r1, r4, lsl #14
   15598:	andeq	r5, r1, r4, ror r6
   1559c:	andeq	r5, r1, r0, ror #12
   155a0:	andeq	r5, r1, r4, ror r6
   155a4:	andeq	r5, r1, r4, ror r6
   155a8:	andeq	r5, r1, r4, ror r6
   155ac:	andeq	r5, r1, r8, lsr #13
   155b0:	andeq	r5, r1, r4, ror r6
   155b4:			; <UNDEFINED> instruction: 0x000156bc
   155b8:	andeq	r5, r1, r4, ror r6
   155bc:	andeq	r5, r1, r4, ror r6
   155c0:	andeq	r5, r1, r8, lsl r7
   155c4:	andeq	r5, r1, r4, ror r6
   155c8:	andeq	r5, r1, r4, ror r6
   155cc:	andeq	r5, r1, r4, ror r6
   155d0:	ldrdeq	r5, [r1], -r0
   155d4:	andeq	r5, r1, r4, ror r6
   155d8:	andeq	r5, r1, r4, ror r6
   155dc:	andeq	r5, r1, r4, ror r6
   155e0:	andeq	r5, r1, r4, ror r6
   155e4:	andeq	r5, r1, ip, lsr #14
   155e8:	andeq	r5, r1, r4, ror #13
   155ec:	andeq	r5, r1, r4, ror r6
   155f0:	andeq	r5, r1, r4, ror r6
   155f4:	andeq	r5, r1, r4, ror r6
   155f8:	andeq	r5, r1, r4, ror r6
   155fc:	andeq	r5, r1, r4, ror r6
   15600:	andeq	r5, r1, r4, ror r6
   15604:	andeq	r5, r1, r4, ror r6
   15608:	andeq	r5, r1, r0, asr #14
   1560c:	andeq	r5, r1, r8, asr r7
   15610:	andeq	r5, r1, r4, ror r6
   15614:	andeq	r5, r1, r4, ror r6
   15618:	andeq	r5, r1, r4, ror r6
   1561c:	andeq	r5, r1, r0, ror #12
   15620:	andeq	r5, r1, r4, ror r6
   15624:	andeq	r5, r1, r4, ror r6
   15628:	andeq	r5, r1, r4, ror r6
   1562c:	andeq	r5, r1, r8, lsr #13
   15630:	andeq	r5, r1, r4, ror r6
   15634:			; <UNDEFINED> instruction: 0x000156bc
   15638:	andeq	r5, r1, r4, ror r6
   1563c:	andeq	r5, r1, r4, ror r6
   15640:	andeq	r5, r1, r4, ror r6
   15644:	andeq	r5, r1, r4, ror r6
   15648:	andeq	r5, r1, r4, ror r6
   1564c:	andeq	r5, r1, r4, ror r6
   15650:	ldrdeq	r5, [r1], -r0
   15654:	andeq	r5, r1, r4, ror r6
   15658:	andeq	r5, r1, r4, ror r6
   1565c:	andeq	r5, r1, ip, asr #14
   15660:	add	r0, sp, #8
   15664:	mov	r1, r5
   15668:	mov	r2, #3
   1566c:	bl	1583c <__assert_fail@plt+0x4738>
   15670:	b	15758 <__assert_fail@plt+0x4654>
   15674:	ldr	r0, [sp, #8]
   15678:	ldr	r1, [sp, #12]
   1567c:	ldr	r2, [sp, #4]
   15680:	strd	r0, [r2]
   15684:	orr	r8, r8, #2
   15688:	b	15784 <__assert_fail@plt+0x4680>
   1568c:	cmp	r0, #105	; 0x69
   15690:	bne	15570 <__assert_fail@plt+0x446c>
   15694:	ldrb	r0, [r6, #2]
   15698:	mov	r7, #1
   1569c:	cmp	r0, #66	; 0x42
   156a0:	movweq	r7, #3
   156a4:	b	15570 <__assert_fail@plt+0x446c>
   156a8:	add	r0, sp, #8
   156ac:	mov	r1, r5
   156b0:	mov	r2, #1
   156b4:	bl	1583c <__assert_fail@plt+0x4738>
   156b8:	b	15758 <__assert_fail@plt+0x4654>
   156bc:	add	r0, sp, #8
   156c0:	mov	r1, r5
   156c4:	mov	r2, #2
   156c8:	bl	1583c <__assert_fail@plt+0x4738>
   156cc:	b	15758 <__assert_fail@plt+0x4654>
   156d0:	add	r0, sp, #8
   156d4:	mov	r1, r5
   156d8:	mov	r2, #4
   156dc:	bl	1583c <__assert_fail@plt+0x4738>
   156e0:	b	15758 <__assert_fail@plt+0x4654>
   156e4:	add	r0, sp, #8
   156e8:	mov	r1, r5
   156ec:	mov	r2, #7
   156f0:	bl	1583c <__assert_fail@plt+0x4738>
   156f4:	b	15758 <__assert_fail@plt+0x4654>
   156f8:	add	r0, sp, #8
   156fc:	mov	r1, #1024	; 0x400
   15700:	b	15754 <__assert_fail@plt+0x4650>
   15704:	add	r0, sp, #8
   15708:	mov	r1, r5
   1570c:	mov	r2, #6
   15710:	bl	1583c <__assert_fail@plt+0x4738>
   15714:	b	15758 <__assert_fail@plt+0x4654>
   15718:	add	r0, sp, #8
   1571c:	mov	r1, r5
   15720:	mov	r2, #5
   15724:	bl	1583c <__assert_fail@plt+0x4738>
   15728:	b	15758 <__assert_fail@plt+0x4654>
   1572c:	add	r0, sp, #8
   15730:	mov	r1, r5
   15734:	mov	r2, #8
   15738:	bl	1583c <__assert_fail@plt+0x4738>
   1573c:	b	15758 <__assert_fail@plt+0x4654>
   15740:	add	r0, sp, #8
   15744:	mov	r1, #512	; 0x200
   15748:	b	15754 <__assert_fail@plt+0x4650>
   1574c:	add	r0, sp, #8
   15750:	mov	r1, #2
   15754:	bl	157b0 <__assert_fail@plt+0x46ac>
   15758:	ldr	r1, [r9]
   1575c:	add	r2, r1, r7
   15760:	str	r2, [r9]
   15764:	ldrb	r1, [r1, r7]
   15768:	orr	r8, r0, r8
   1576c:	cmp	r1, #0
   15770:	orrne	r8, r8, #2
   15774:	ldr	r0, [sp, #8]
   15778:	ldr	r1, [sp, #12]
   1577c:	ldr	r2, [sp, #4]
   15780:	strd	r0, [r2]
   15784:	mov	r0, r8
   15788:	sub	sp, fp, #28
   1578c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15790:	movw	r0, #27941	; 0x6d25
   15794:	movt	r0, #1
   15798:	movw	r1, #27979	; 0x6d4b
   1579c:	movt	r1, #1
   157a0:	movw	r3, #27995	; 0x6d5b
   157a4:	movt	r3, #1
   157a8:	mov	r2, #85	; 0x55
   157ac:	bl	11104 <__assert_fail@plt>
   157b0:	push	{r4, r5, r6, r7, fp, lr}
   157b4:	add	fp, sp, #16
   157b8:	mov	r5, r1
   157bc:	mov	r4, r0
   157c0:	cmn	r1, #1
   157c4:	ble	157fc <__assert_fail@plt+0x46f8>
   157c8:	cmp	r5, #0
   157cc:	beq	1581c <__assert_fail@plt+0x4718>
   157d0:	asr	r3, r5, #31
   157d4:	mvn	r6, #0
   157d8:	mvn	r0, #0
   157dc:	mvn	r1, #0
   157e0:	mov	r2, r5
   157e4:	bl	15f60 <__assert_fail@plt+0x4e5c>
   157e8:	ldrd	r2, [r4]
   157ec:	subs	r0, r0, r2
   157f0:	sbcs	r0, r1, r3
   157f4:	bcc	1580c <__assert_fail@plt+0x4708>
   157f8:	b	1581c <__assert_fail@plt+0x4718>
   157fc:	ldrd	r0, [r4]
   15800:	orrs	r0, r0, r1
   15804:	beq	1581c <__assert_fail@plt+0x4718>
   15808:	mvn	r6, #0
   1580c:	mov	r0, #1
   15810:	mvn	r7, #0
   15814:	strd	r6, [r4]
   15818:	pop	{r4, r5, r6, r7, fp, pc}
   1581c:	ldrd	r0, [r4]
   15820:	umull	r6, r2, r0, r5
   15824:	asr	r3, r5, #31
   15828:	mla	r0, r0, r3, r2
   1582c:	mla	r7, r1, r5, r0
   15830:	mov	r0, #0
   15834:	strd	r6, [r4]
   15838:	pop	{r4, r5, r6, r7, fp, pc}
   1583c:	push	{r4, r5, r6, r7, fp, lr}
   15840:	add	fp, sp, #16
   15844:	cmp	r2, #0
   15848:	moveq	r6, #0
   1584c:	moveq	r0, r6
   15850:	popeq	{r4, r5, r6, r7, fp, pc}
   15854:	mov	r4, r2
   15858:	mov	r5, r1
   1585c:	mov	r7, r0
   15860:	mov	r6, #0
   15864:	mov	r0, r7
   15868:	mov	r1, r5
   1586c:	bl	157b0 <__assert_fail@plt+0x46ac>
   15870:	orr	r6, r0, r6
   15874:	subs	r4, r4, #1
   15878:	bne	15864 <__assert_fail@plt+0x4760>
   1587c:	mov	r0, r6
   15880:	pop	{r4, r5, r6, r7, fp, pc}
   15884:	clz	r2, r1
   15888:	lsr	r2, r2, #5
   1588c:	clz	r3, r0
   15890:	lsr	r3, r3, #5
   15894:	orrs	r2, r3, r2
   15898:	movwne	r1, #1
   1589c:	movwne	r0, #1
   158a0:	cmp	r1, #0
   158a4:	beq	158d4 <__assert_fail@plt+0x47d0>
   158a8:	mvn	r2, #-2147483648	; 0x80000000
   158ac:	udiv	r2, r2, r1
   158b0:	cmp	r2, r0
   158b4:	bcs	158d4 <__assert_fail@plt+0x47d0>
   158b8:	push	{fp, lr}
   158bc:	mov	fp, sp
   158c0:	bl	11020 <__errno_location@plt>
   158c4:	mov	r1, #12
   158c8:	str	r1, [r0]
   158cc:	mov	r0, #0
   158d0:	pop	{fp, pc}
   158d4:	b	10e88 <calloc@plt>
   158d8:	cmp	r0, #0
   158dc:	movweq	r0, #1
   158e0:	cmn	r0, #1
   158e4:	ble	158ec <__assert_fail@plt+0x47e8>
   158e8:	b	10fb4 <malloc@plt>
   158ec:	push	{fp, lr}
   158f0:	mov	fp, sp
   158f4:	bl	11020 <__errno_location@plt>
   158f8:	mov	r1, #12
   158fc:	str	r1, [r0]
   15900:	mov	r0, #0
   15904:	pop	{fp, pc}
   15908:	push	{fp, lr}
   1590c:	mov	fp, sp
   15910:	cmp	r0, #0
   15914:	beq	15930 <__assert_fail@plt+0x482c>
   15918:	cmp	r1, #0
   1591c:	beq	1593c <__assert_fail@plt+0x4838>
   15920:	cmn	r1, #1
   15924:	ble	15948 <__assert_fail@plt+0x4844>
   15928:	pop	{fp, lr}
   1592c:	b	10f3c <realloc@plt>
   15930:	mov	r0, r1
   15934:	pop	{fp, lr}
   15938:	b	158d8 <__assert_fail@plt+0x47d4>
   1593c:	bl	15d08 <__assert_fail@plt+0x4c04>
   15940:	mov	r0, #0
   15944:	pop	{fp, pc}
   15948:	bl	11020 <__errno_location@plt>
   1594c:	mov	r1, #12
   15950:	str	r1, [r0]
   15954:	mov	r0, #0
   15958:	pop	{fp, pc}
   1595c:	mov	r1, r0
   15960:	sub	r2, r0, #65	; 0x41
   15964:	mov	r0, #1
   15968:	cmp	r2, #26
   1596c:	subcs	r2, r1, #97	; 0x61
   15970:	cmpcs	r2, #26
   15974:	bcs	1597c <__assert_fail@plt+0x4878>
   15978:	bx	lr
   1597c:	sub	r1, r1, #48	; 0x30
   15980:	cmp	r1, #10
   15984:	movcs	r0, #0
   15988:	bx	lr
   1598c:	mov	r1, r0
   15990:	sub	r2, r0, #65	; 0x41
   15994:	mov	r0, #1
   15998:	cmp	r2, #26
   1599c:	subcs	r1, r1, #97	; 0x61
   159a0:	cmpcs	r1, #26
   159a4:	movcs	r0, #0
   159a8:	bx	lr
   159ac:	mov	r1, #0
   159b0:	cmp	r0, #128	; 0x80
   159b4:	movwcc	r1, #1
   159b8:	mov	r0, r1
   159bc:	bx	lr
   159c0:	sub	r1, r0, #9
   159c4:	clz	r1, r1
   159c8:	lsr	r1, r1, #5
   159cc:	sub	r0, r0, #32
   159d0:	clz	r0, r0
   159d4:	lsr	r0, r0, #5
   159d8:	orr	r0, r0, r1
   159dc:	bx	lr
   159e0:	mov	r1, r0
   159e4:	mov	r0, #1
   159e8:	cmp	r1, #32
   159ec:	bxcc	lr
   159f0:	cmp	r1, #127	; 0x7f
   159f4:	movne	r0, #0
   159f8:	bx	lr
   159fc:	sub	r1, r0, #48	; 0x30
   15a00:	mov	r0, #0
   15a04:	cmp	r1, #10
   15a08:	movwcc	r0, #1
   15a0c:	bx	lr
   15a10:	sub	r1, r0, #33	; 0x21
   15a14:	mov	r0, #0
   15a18:	cmp	r1, #94	; 0x5e
   15a1c:	movwcc	r0, #1
   15a20:	bx	lr
   15a24:	sub	r1, r0, #97	; 0x61
   15a28:	mov	r0, #0
   15a2c:	cmp	r1, #26
   15a30:	movwcc	r0, #1
   15a34:	bx	lr
   15a38:	sub	r1, r0, #32
   15a3c:	mov	r0, #0
   15a40:	cmp	r1, #95	; 0x5f
   15a44:	movwcc	r0, #1
   15a48:	bx	lr
   15a4c:	sub	r1, r0, #33	; 0x21
   15a50:	cmp	r1, #93	; 0x5d
   15a54:	bhi	15be0 <__assert_fail@plt+0x4adc>
   15a58:	mov	r0, #1
   15a5c:	add	r2, pc, #0
   15a60:	ldr	pc, [r2, r1, lsl #2]
   15a64:	ldrdeq	r5, [r1], -ip
   15a68:	ldrdeq	r5, [r1], -ip
   15a6c:	ldrdeq	r5, [r1], -ip
   15a70:	ldrdeq	r5, [r1], -ip
   15a74:	ldrdeq	r5, [r1], -ip
   15a78:	ldrdeq	r5, [r1], -ip
   15a7c:	ldrdeq	r5, [r1], -ip
   15a80:	ldrdeq	r5, [r1], -ip
   15a84:	ldrdeq	r5, [r1], -ip
   15a88:	ldrdeq	r5, [r1], -ip
   15a8c:	ldrdeq	r5, [r1], -ip
   15a90:	ldrdeq	r5, [r1], -ip
   15a94:	ldrdeq	r5, [r1], -ip
   15a98:	ldrdeq	r5, [r1], -ip
   15a9c:	ldrdeq	r5, [r1], -ip
   15aa0:	andeq	r5, r1, r0, ror #23
   15aa4:	andeq	r5, r1, r0, ror #23
   15aa8:	andeq	r5, r1, r0, ror #23
   15aac:	andeq	r5, r1, r0, ror #23
   15ab0:	andeq	r5, r1, r0, ror #23
   15ab4:	andeq	r5, r1, r0, ror #23
   15ab8:	andeq	r5, r1, r0, ror #23
   15abc:	andeq	r5, r1, r0, ror #23
   15ac0:	andeq	r5, r1, r0, ror #23
   15ac4:	andeq	r5, r1, r0, ror #23
   15ac8:	ldrdeq	r5, [r1], -ip
   15acc:	ldrdeq	r5, [r1], -ip
   15ad0:	ldrdeq	r5, [r1], -ip
   15ad4:	ldrdeq	r5, [r1], -ip
   15ad8:	ldrdeq	r5, [r1], -ip
   15adc:	ldrdeq	r5, [r1], -ip
   15ae0:	ldrdeq	r5, [r1], -ip
   15ae4:	andeq	r5, r1, r0, ror #23
   15ae8:	andeq	r5, r1, r0, ror #23
   15aec:	andeq	r5, r1, r0, ror #23
   15af0:	andeq	r5, r1, r0, ror #23
   15af4:	andeq	r5, r1, r0, ror #23
   15af8:	andeq	r5, r1, r0, ror #23
   15afc:	andeq	r5, r1, r0, ror #23
   15b00:	andeq	r5, r1, r0, ror #23
   15b04:	andeq	r5, r1, r0, ror #23
   15b08:	andeq	r5, r1, r0, ror #23
   15b0c:	andeq	r5, r1, r0, ror #23
   15b10:	andeq	r5, r1, r0, ror #23
   15b14:	andeq	r5, r1, r0, ror #23
   15b18:	andeq	r5, r1, r0, ror #23
   15b1c:	andeq	r5, r1, r0, ror #23
   15b20:	andeq	r5, r1, r0, ror #23
   15b24:	andeq	r5, r1, r0, ror #23
   15b28:	andeq	r5, r1, r0, ror #23
   15b2c:	andeq	r5, r1, r0, ror #23
   15b30:	andeq	r5, r1, r0, ror #23
   15b34:	andeq	r5, r1, r0, ror #23
   15b38:	andeq	r5, r1, r0, ror #23
   15b3c:	andeq	r5, r1, r0, ror #23
   15b40:	andeq	r5, r1, r0, ror #23
   15b44:	andeq	r5, r1, r0, ror #23
   15b48:	andeq	r5, r1, r0, ror #23
   15b4c:	ldrdeq	r5, [r1], -ip
   15b50:	ldrdeq	r5, [r1], -ip
   15b54:	ldrdeq	r5, [r1], -ip
   15b58:	ldrdeq	r5, [r1], -ip
   15b5c:	ldrdeq	r5, [r1], -ip
   15b60:	ldrdeq	r5, [r1], -ip
   15b64:	andeq	r5, r1, r0, ror #23
   15b68:	andeq	r5, r1, r0, ror #23
   15b6c:	andeq	r5, r1, r0, ror #23
   15b70:	andeq	r5, r1, r0, ror #23
   15b74:	andeq	r5, r1, r0, ror #23
   15b78:	andeq	r5, r1, r0, ror #23
   15b7c:	andeq	r5, r1, r0, ror #23
   15b80:	andeq	r5, r1, r0, ror #23
   15b84:	andeq	r5, r1, r0, ror #23
   15b88:	andeq	r5, r1, r0, ror #23
   15b8c:	andeq	r5, r1, r0, ror #23
   15b90:	andeq	r5, r1, r0, ror #23
   15b94:	andeq	r5, r1, r0, ror #23
   15b98:	andeq	r5, r1, r0, ror #23
   15b9c:	andeq	r5, r1, r0, ror #23
   15ba0:	andeq	r5, r1, r0, ror #23
   15ba4:	andeq	r5, r1, r0, ror #23
   15ba8:	andeq	r5, r1, r0, ror #23
   15bac:	andeq	r5, r1, r0, ror #23
   15bb0:	andeq	r5, r1, r0, ror #23
   15bb4:	andeq	r5, r1, r0, ror #23
   15bb8:	andeq	r5, r1, r0, ror #23
   15bbc:	andeq	r5, r1, r0, ror #23
   15bc0:	andeq	r5, r1, r0, ror #23
   15bc4:	andeq	r5, r1, r0, ror #23
   15bc8:	andeq	r5, r1, r0, ror #23
   15bcc:	ldrdeq	r5, [r1], -ip
   15bd0:	ldrdeq	r5, [r1], -ip
   15bd4:	ldrdeq	r5, [r1], -ip
   15bd8:	ldrdeq	r5, [r1], -ip
   15bdc:	bx	lr
   15be0:	mov	r0, #0
   15be4:	bx	lr
   15be8:	sub	r0, r0, #9
   15bec:	cmp	r0, #23
   15bf0:	movhi	r0, #0
   15bf4:	bxhi	lr
   15bf8:	bic	r0, r0, #-16777216	; 0xff000000
   15bfc:	movw	r1, #31
   15c00:	movt	r1, #128	; 0x80
   15c04:	mov	r2, #1
   15c08:	and	r0, r2, r1, lsr r0
   15c0c:	bx	lr
   15c10:	sub	r1, r0, #65	; 0x41
   15c14:	mov	r0, #0
   15c18:	cmp	r1, #26
   15c1c:	movwcc	r0, #1
   15c20:	bx	lr
   15c24:	mov	r1, r0
   15c28:	sub	r2, r0, #48	; 0x30
   15c2c:	mov	r0, #1
   15c30:	cmp	r2, #22
   15c34:	bhi	15c4c <__assert_fail@plt+0x4b48>
   15c38:	mov	ip, #1
   15c3c:	movw	r3, #1023	; 0x3ff
   15c40:	movt	r3, #126	; 0x7e
   15c44:	tst	r3, ip, lsl r2
   15c48:	bxne	lr
   15c4c:	sub	r1, r1, #97	; 0x61
   15c50:	cmp	r1, #6
   15c54:	movcs	r0, #0
   15c58:	bxcs	lr
   15c5c:	bx	lr
   15c60:	sub	r1, r0, #65	; 0x41
   15c64:	cmp	r1, #26
   15c68:	addcc	r0, r0, #32
   15c6c:	bx	lr
   15c70:	sub	r1, r0, #97	; 0x61
   15c74:	cmp	r1, #26
   15c78:	subcc	r0, r0, #32
   15c7c:	bx	lr
   15c80:	push	{r4, r5, r6, sl, fp, lr}
   15c84:	add	fp, sp, #16
   15c88:	mov	r4, r0
   15c8c:	bl	10f84 <__fpending@plt>
   15c90:	mov	r5, r0
   15c94:	mov	r0, r4
   15c98:	bl	10f90 <ferror_unlocked@plt>
   15c9c:	mov	r6, r0
   15ca0:	mov	r0, r4
   15ca4:	bl	12ba8 <__assert_fail@plt+0x1aa4>
   15ca8:	cmp	r6, #0
   15cac:	beq	15ccc <__assert_fail@plt+0x4bc8>
   15cb0:	mvn	r4, #0
   15cb4:	cmp	r0, #0
   15cb8:	bne	15d00 <__assert_fail@plt+0x4bfc>
   15cbc:	bl	11020 <__errno_location@plt>
   15cc0:	mov	r1, #0
   15cc4:	str	r1, [r0]
   15cc8:	b	15d00 <__assert_fail@plt+0x4bfc>
   15ccc:	cmp	r0, #0
   15cd0:	mov	r4, r0
   15cd4:	mvnne	r4, #0
   15cd8:	cmp	r5, #0
   15cdc:	bne	15d00 <__assert_fail@plt+0x4bfc>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d00 <__assert_fail@plt+0x4bfc>
   15ce8:	bl	11020 <__errno_location@plt>
   15cec:	ldr	r0, [r0]
   15cf0:	subs	r4, r0, #9
   15cf4:	mvnne	r4, #0
   15cf8:	mov	r0, r4
   15cfc:	pop	{r4, r5, r6, sl, fp, pc}
   15d00:	mov	r0, r4
   15d04:	pop	{r4, r5, r6, sl, fp, pc}
   15d08:	push	{r4, r5, r6, sl, fp, lr}
   15d0c:	add	fp, sp, #16
   15d10:	mov	r4, r0
   15d14:	bl	11020 <__errno_location@plt>
   15d18:	mov	r5, r0
   15d1c:	ldr	r6, [r0]
   15d20:	mov	r0, r4
   15d24:	bl	10edc <free@plt>
   15d28:	str	r6, [r5]
   15d2c:	pop	{r4, r5, r6, sl, fp, pc}
   15d30:	push	{fp, lr}
   15d34:	mov	fp, sp
   15d38:	bl	11020 <__errno_location@plt>
   15d3c:	mov	r1, #12
   15d40:	str	r1, [r0]
   15d44:	mov	r0, #0
   15d48:	pop	{fp, pc}
   15d4c:	b	158d8 <__assert_fail@plt+0x47d4>
   15d50:	cmp	r1, #0
   15d54:	orreq	r1, r1, #1
   15d58:	b	15908 <__assert_fail@plt+0x4804>
   15d5c:	b	15884 <__assert_fail@plt+0x4780>
   15d60:	clz	r3, r2
   15d64:	lsr	ip, r3, #5
   15d68:	clz	r3, r1
   15d6c:	lsr	r3, r3, #5
   15d70:	orrs	r3, r3, ip
   15d74:	movwne	r1, #1
   15d78:	movwne	r2, #1
   15d7c:	b	15e18 <__assert_fail@plt+0x4d14>
   15d80:	push	{fp, lr}
   15d84:	mov	fp, sp
   15d88:	mov	r0, #14
   15d8c:	bl	110b0 <nl_langinfo@plt>
   15d90:	movw	r1, #26473	; 0x6769
   15d94:	movt	r1, #1
   15d98:	cmp	r0, #0
   15d9c:	movne	r1, r0
   15da0:	ldrb	r2, [r1]
   15da4:	movw	r0, #28074	; 0x6daa
   15da8:	movt	r0, #1
   15dac:	cmp	r2, #0
   15db0:	movne	r0, r1
   15db4:	pop	{fp, pc}
   15db8:	push	{r4, r5, r6, r7, fp, lr}
   15dbc:	add	fp, sp, #16
   15dc0:	sub	sp, sp, #8
   15dc4:	mov	r7, r2
   15dc8:	mov	r4, r1
   15dcc:	add	r5, sp, #4
   15dd0:	cmp	r0, #0
   15dd4:	movne	r5, r0
   15dd8:	mov	r0, r5
   15ddc:	bl	10f9c <mbrtowc@plt>
   15de0:	mov	r6, r0
   15de4:	cmp	r7, #0
   15de8:	beq	15e0c <__assert_fail@plt+0x4d08>
   15dec:	cmn	r6, #2
   15df0:	bcc	15e0c <__assert_fail@plt+0x4d08>
   15df4:	mov	r0, #0
   15df8:	bl	15e54 <__assert_fail@plt+0x4d50>
   15dfc:	cmp	r0, #0
   15e00:	ldrbeq	r0, [r4]
   15e04:	streq	r0, [r5]
   15e08:	moveq	r6, #1
   15e0c:	mov	r0, r6
   15e10:	sub	sp, fp, #16
   15e14:	pop	{r4, r5, r6, r7, fp, pc}
   15e18:	cmp	r2, #0
   15e1c:	beq	15e4c <__assert_fail@plt+0x4d48>
   15e20:	mvn	r3, #0
   15e24:	udiv	r3, r3, r2
   15e28:	cmp	r3, r1
   15e2c:	bcs	15e4c <__assert_fail@plt+0x4d48>
   15e30:	push	{fp, lr}
   15e34:	mov	fp, sp
   15e38:	bl	11020 <__errno_location@plt>
   15e3c:	mov	r1, #12
   15e40:	str	r1, [r0]
   15e44:	mov	r0, #0
   15e48:	pop	{fp, pc}
   15e4c:	mul	r1, r2, r1
   15e50:	b	15908 <__assert_fail@plt+0x4804>
   15e54:	push	{r4, sl, fp, lr}
   15e58:	add	fp, sp, #8
   15e5c:	sub	sp, sp, #264	; 0x108
   15e60:	add	r1, sp, #7
   15e64:	movw	r2, #257	; 0x101
   15e68:	bl	15eb8 <__assert_fail@plt+0x4db4>
   15e6c:	mov	r4, #0
   15e70:	cmp	r0, #0
   15e74:	bne	15eac <__assert_fail@plt+0x4da8>
   15e78:	add	r0, sp, #7
   15e7c:	movw	r1, #28080	; 0x6db0
   15e80:	movt	r1, #1
   15e84:	bl	10eac <strcmp@plt>
   15e88:	cmp	r0, #0
   15e8c:	beq	15eac <__assert_fail@plt+0x4da8>
   15e90:	add	r0, sp, #7
   15e94:	movw	r1, #28082	; 0x6db2
   15e98:	movt	r1, #1
   15e9c:	bl	10eac <strcmp@plt>
   15ea0:	mov	r4, r0
   15ea4:	cmp	r0, #0
   15ea8:	movwne	r4, #1
   15eac:	mov	r0, r4
   15eb0:	sub	sp, fp, #8
   15eb4:	pop	{r4, sl, fp, pc}
   15eb8:	b	15ebc <__assert_fail@plt+0x4db8>
   15ebc:	push	{r4, r5, r6, r7, fp, lr}
   15ec0:	add	fp, sp, #16
   15ec4:	mov	r6, r2
   15ec8:	mov	r4, r1
   15ecc:	bl	15f58 <__assert_fail@plt+0x4e54>
   15ed0:	cmp	r0, #0
   15ed4:	beq	15f04 <__assert_fail@plt+0x4e00>
   15ed8:	mov	r7, r0
   15edc:	bl	11008 <strlen@plt>
   15ee0:	cmp	r0, r6
   15ee4:	bcs	15f24 <__assert_fail@plt+0x4e20>
   15ee8:	add	r2, r0, #1
   15eec:	mov	r0, r4
   15ef0:	mov	r1, r7
   15ef4:	bl	10ef4 <memcpy@plt>
   15ef8:	mov	r5, #0
   15efc:	mov	r0, r5
   15f00:	pop	{r4, r5, r6, r7, fp, pc}
   15f04:	mov	r5, #22
   15f08:	cmp	r6, #0
   15f0c:	movne	r0, #0
   15f10:	strbne	r0, [r4]
   15f14:	movne	r0, r5
   15f18:	popne	{r4, r5, r6, r7, fp, pc}
   15f1c:	mov	r0, r5
   15f20:	pop	{r4, r5, r6, r7, fp, pc}
   15f24:	mov	r5, #34	; 0x22
   15f28:	cmp	r6, #0
   15f2c:	beq	15f4c <__assert_fail@plt+0x4e48>
   15f30:	sub	r6, r6, #1
   15f34:	mov	r0, r4
   15f38:	mov	r1, r7
   15f3c:	mov	r2, r6
   15f40:	bl	10ef4 <memcpy@plt>
   15f44:	mov	r0, #0
   15f48:	strb	r0, [r4, r6]
   15f4c:	mov	r0, r5
   15f50:	pop	{r4, r5, r6, r7, fp, pc}
   15f54:	b	15f58 <__assert_fail@plt+0x4e54>
   15f58:	mov	r1, #0
   15f5c:	b	11098 <setlocale@plt>
   15f60:	cmp	r3, #0
   15f64:	cmpeq	r2, #0
   15f68:	bne	15f80 <__assert_fail@plt+0x4e7c>
   15f6c:	cmp	r1, #0
   15f70:	cmpeq	r0, #0
   15f74:	mvnne	r1, #0
   15f78:	mvnne	r0, #0
   15f7c:	b	15f9c <__assert_fail@plt+0x4e98>
   15f80:	sub	sp, sp, #8
   15f84:	push	{sp, lr}
   15f88:	bl	15fac <__assert_fail@plt+0x4ea8>
   15f8c:	ldr	lr, [sp, #4]
   15f90:	add	sp, sp, #8
   15f94:	pop	{r2, r3}
   15f98:	bx	lr
   15f9c:	push	{r1, lr}
   15fa0:	mov	r0, #8
   15fa4:	bl	10ea0 <raise@plt>
   15fa8:	pop	{r1, pc}
   15fac:	cmp	r1, r3
   15fb0:	cmpeq	r0, r2
   15fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fb8:	mov	r4, r0
   15fbc:	movcc	r0, #0
   15fc0:	mov	r5, r1
   15fc4:	ldr	lr, [sp, #36]	; 0x24
   15fc8:	movcc	r1, r0
   15fcc:	bcc	160c8 <__assert_fail@plt+0x4fc4>
   15fd0:	cmp	r3, #0
   15fd4:	clzeq	ip, r2
   15fd8:	clzne	ip, r3
   15fdc:	addeq	ip, ip, #32
   15fe0:	cmp	r5, #0
   15fe4:	clzeq	r1, r4
   15fe8:	addeq	r1, r1, #32
   15fec:	clzne	r1, r5
   15ff0:	sub	ip, ip, r1
   15ff4:	sub	sl, ip, #32
   15ff8:	lsl	r9, r3, ip
   15ffc:	rsb	fp, ip, #32
   16000:	orr	r9, r9, r2, lsl sl
   16004:	orr	r9, r9, r2, lsr fp
   16008:	lsl	r8, r2, ip
   1600c:	cmp	r5, r9
   16010:	cmpeq	r4, r8
   16014:	movcc	r0, #0
   16018:	movcc	r1, r0
   1601c:	bcc	16038 <__assert_fail@plt+0x4f34>
   16020:	mov	r0, #1
   16024:	subs	r4, r4, r8
   16028:	lsl	r1, r0, sl
   1602c:	orr	r1, r1, r0, lsr fp
   16030:	lsl	r0, r0, ip
   16034:	sbc	r5, r5, r9
   16038:	cmp	ip, #0
   1603c:	beq	160c8 <__assert_fail@plt+0x4fc4>
   16040:	lsr	r6, r8, #1
   16044:	orr	r6, r6, r9, lsl #31
   16048:	lsr	r7, r9, #1
   1604c:	mov	r2, ip
   16050:	b	16074 <__assert_fail@plt+0x4f70>
   16054:	subs	r3, r4, r6
   16058:	sbc	r8, r5, r7
   1605c:	adds	r3, r3, r3
   16060:	adc	r8, r8, r8
   16064:	adds	r4, r3, #1
   16068:	adc	r5, r8, #0
   1606c:	subs	r2, r2, #1
   16070:	beq	16090 <__assert_fail@plt+0x4f8c>
   16074:	cmp	r5, r7
   16078:	cmpeq	r4, r6
   1607c:	bcs	16054 <__assert_fail@plt+0x4f50>
   16080:	adds	r4, r4, r4
   16084:	adc	r5, r5, r5
   16088:	subs	r2, r2, #1
   1608c:	bne	16074 <__assert_fail@plt+0x4f70>
   16090:	lsr	r3, r4, ip
   16094:	orr	r3, r3, r5, lsl fp
   16098:	lsr	r2, r5, ip
   1609c:	orr	r3, r3, r5, lsr sl
   160a0:	adds	r0, r0, r4
   160a4:	mov	r4, r3
   160a8:	lsl	r3, r2, ip
   160ac:	orr	r3, r3, r4, lsl sl
   160b0:	lsl	ip, r4, ip
   160b4:	orr	r3, r3, r4, lsr fp
   160b8:	adc	r1, r1, r5
   160bc:	subs	r0, r0, ip
   160c0:	mov	r5, r2
   160c4:	sbc	r1, r1, r3
   160c8:	cmp	lr, #0
   160cc:	strdne	r4, [lr]
   160d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160d8:	mov	r7, r0
   160dc:	ldr	r6, [pc, #72]	; 1612c <__assert_fail@plt+0x5028>
   160e0:	ldr	r5, [pc, #72]	; 16130 <__assert_fail@plt+0x502c>
   160e4:	add	r6, pc, r6
   160e8:	add	r5, pc, r5
   160ec:	sub	r6, r6, r5
   160f0:	mov	r8, r1
   160f4:	mov	r9, r2
   160f8:	bl	10e68 <calloc@plt-0x20>
   160fc:	asrs	r6, r6, #2
   16100:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16104:	mov	r4, #0
   16108:	add	r4, r4, #1
   1610c:	ldr	r3, [r5], #4
   16110:	mov	r2, r9
   16114:	mov	r1, r8
   16118:	mov	r0, r7
   1611c:	blx	r3
   16120:	cmp	r6, r4
   16124:	bne	16108 <__assert_fail@plt+0x5004>
   16128:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1612c:	andeq	r0, r1, r0, lsr #28
   16130:	andeq	r0, r1, r8, lsl lr
   16134:	bx	lr
   16138:	ldr	r3, [pc, #12]	; 1614c <__assert_fail@plt+0x5048>
   1613c:	mov	r1, #0
   16140:	add	r3, pc, r3
   16144:	ldr	r2, [r3]
   16148:	b	1102c <__cxa_atexit@plt>
   1614c:	andeq	r0, r1, r4, lsr #31

Disassembly of section .fini:

00016150 <.fini>:
   16150:	push	{r3, lr}
   16154:	pop	{r3, pc}
