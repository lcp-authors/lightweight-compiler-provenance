
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

0001194c <.init>:
   1194c:	push	{r3, lr}
   11950:	bl	11ce8 <_start@@Base+0x3c>
   11954:	pop	{r3, pc}

Disassembly of section .plt:

00011958 <fdopen@plt-0x14>:
   11958:	push	{lr}		; (str lr, [sp, #-4]!)
   1195c:	ldr	lr, [pc, #4]	; 11968 <fdopen@plt-0x4>
   11960:	add	lr, pc, lr
   11964:	ldr	pc, [lr, #8]!
   11968:	muleq	r1, r8, r6

0001196c <fdopen@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #24, 20	; 0x18000
   11974:	ldr	pc, [ip, #1688]!	; 0x698

00011978 <raise@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #24, 20	; 0x18000
   11980:	ldr	pc, [ip, #1680]!	; 0x690

00011984 <setbuf@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #24, 20	; 0x18000
   1198c:	ldr	pc, [ip, #1672]!	; 0x688

00011990 <strtol@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #24, 20	; 0x18000
   11998:	ldr	pc, [ip, #1664]!	; 0x680

0001199c <fopen@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #24, 20	; 0x18000
   119a4:	ldr	pc, [ip, #1656]!	; 0x678

000119a8 <free@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #24, 20	; 0x18000
   119b0:	ldr	pc, [ip, #1648]!	; 0x670

000119b4 <memcpy@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #24, 20	; 0x18000
   119bc:	ldr	pc, [ip, #1640]!	; 0x668

000119c0 <ftell@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #24, 20	; 0x18000
   119c8:	ldr	pc, [ip, #1632]!	; 0x660

000119cc <fwrite@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #24, 20	; 0x18000
   119d4:	ldr	pc, [ip, #1624]!	; 0x658

000119d8 <strcpy@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #24, 20	; 0x18000
   119e0:	ldr	pc, [ip, #1616]!	; 0x650

000119e4 <fread@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #24, 20	; 0x18000
   119ec:	ldr	pc, [ip, #1608]!	; 0x648

000119f0 <getenv@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #24, 20	; 0x18000
   119f8:	ldr	pc, [ip, #1600]!	; 0x640

000119fc <malloc@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #24, 20	; 0x18000
   11a04:	ldr	pc, [ip, #1592]!	; 0x638

00011a08 <__libc_start_main@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #24, 20	; 0x18000
   11a10:	ldr	pc, [ip, #1584]!	; 0x630

00011a14 <__fxstat@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #24, 20	; 0x18000
   11a1c:	ldr	pc, [ip, #1576]!	; 0x628

00011a20 <__gmon_start__@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #24, 20	; 0x18000
   11a28:	ldr	pc, [ip, #1568]!	; 0x620

00011a2c <open@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #24, 20	; 0x18000
   11a34:	ldr	pc, [ip, #1560]!	; 0x618

00011a38 <getpid@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #24, 20	; 0x18000
   11a40:	ldr	pc, [ip, #1552]!	; 0x610

00011a44 <exit@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #24, 20	; 0x18000
   11a4c:	ldr	pc, [ip, #1544]!	; 0x608

00011a50 <strlen@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #24, 20	; 0x18000
   11a58:	ldr	pc, [ip, #1536]!	; 0x600

00011a5c <getopt@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #24, 20	; 0x18000
   11a64:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a68 <fprintf@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #24, 20	; 0x18000
   11a70:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a74 <__errno_location@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #24, 20	; 0x18000
   11a7c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a80 <__cxa_atexit@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #24, 20	; 0x18000
   11a88:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a8c <mkdir@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #24, 20	; 0x18000
   11a94:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a98 <fcntl@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #24, 20	; 0x18000
   11aa0:	ldr	pc, [ip, #1488]!	; 0x5d0

00011aa4 <memset@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #24, 20	; 0x18000
   11aac:	ldr	pc, [ip, #1480]!	; 0x5c8

00011ab0 <strncpy@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #24, 20	; 0x18000
   11ab8:	ldr	pc, [ip, #1472]!	; 0x5c0

00011abc <access@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #24, 20	; 0x18000
   11ac4:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ac8 <fclose@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #24, 20	; 0x18000
   11ad0:	ldr	pc, [ip, #1456]!	; 0x5b0

00011ad4 <strnlen@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #24, 20	; 0x18000
   11adc:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ae0 <vfprintf@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #24, 20	; 0x18000
   11ae8:	ldr	pc, [ip, #1440]!	; 0x5a0

00011aec <fputc@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #24, 20	; 0x18000
   11af4:	ldr	pc, [ip, #1432]!	; 0x598

00011af8 <atoi@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #24, 20	; 0x18000
   11b00:	ldr	pc, [ip, #1424]!	; 0x590

00011b04 <fseek@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #24, 20	; 0x18000
   11b0c:	ldr	pc, [ip, #1416]!	; 0x588

00011b10 <strncmp@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #24, 20	; 0x18000
   11b18:	ldr	pc, [ip, #1408]!	; 0x580

00011b1c <abort@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #24, 20	; 0x18000
   11b24:	ldr	pc, [ip, #1400]!	; 0x578

00011b28 <close@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #24, 20	; 0x18000
   11b30:	ldr	pc, [ip, #1392]!	; 0x570

Disassembly of section .text:

00011b34 <main@@Base>:
   11b34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b38:	mov	r6, r0
   11b3c:	ldr	r4, [pc, #260]	; 11c48 <main@@Base+0x114>
   11b40:	ldr	r7, [pc, #260]	; 11c4c <main@@Base+0x118>
   11b44:	ldr	r9, [pc, #260]	; 11c50 <main@@Base+0x11c>
   11b48:	ldrd	r2, [r4, #192]	; 0xc0
   11b4c:	mov	r5, r1
   11b50:	mov	r8, #0
   11b54:	adds	r2, r2, #1
   11b58:	adc	r3, r3, #0
   11b5c:	strd	r2, [r4, #192]	; 0xc0
   11b60:	mov	r2, r7
   11b64:	mov	r1, r5
   11b68:	mov	r0, r6
   11b6c:	bl	11a5c <getopt@plt>
   11b70:	cmn	r0, #1
   11b74:	beq	11ba8 <main@@Base+0x74>
   11b78:	ldrd	r2, [r4, #208]	; 0xd0
   11b7c:	adds	r2, r2, #1
   11b80:	adc	r3, r3, #0
   11b84:	cmp	r0, #111	; 0x6f
   11b88:	strd	r2, [r4, #208]	; 0xd0
   11b8c:	bne	11b60 <main@@Base+0x2c>
   11b90:	ldrd	r2, [r4, #200]	; 0xc8
   11b94:	ldr	r8, [r9]
   11b98:	adds	r2, r2, #1
   11b9c:	adc	r3, r3, #0
   11ba0:	strd	r2, [r4, #200]	; 0xc8
   11ba4:	b	11b60 <main@@Base+0x2c>
   11ba8:	ldr	r3, [pc, #164]	; 11c54 <main@@Base+0x120>
   11bac:	ldr	r1, [r3]
   11bb0:	cmp	r6, r1
   11bb4:	ble	11c08 <main@@Base+0xd4>
   11bb8:	ldrd	r2, [r4, #216]	; 0xd8
   11bbc:	ldr	r0, [r5, r1, lsl #2]
   11bc0:	adds	r2, r2, #1
   11bc4:	adc	r3, r3, #0
   11bc8:	cmp	r8, #0
   11bcc:	strd	r2, [r4, #216]	; 0xd8
   11bd0:	movne	r1, r8
   11bd4:	beq	11bf0 <main@@Base+0xbc>
   11bd8:	bl	11fe0 <my_main@@Base>
   11bdc:	ldrd	r2, [r4, #240]	; 0xf0
   11be0:	adds	r2, r2, #1
   11be4:	adc	r3, r3, #0
   11be8:	strd	r2, [r4, #240]	; 0xf0
   11bec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bf0:	ldrd	r2, [r4, #232]	; 0xe8
   11bf4:	ldr	r1, [pc, #92]	; 11c58 <main@@Base+0x124>
   11bf8:	adds	r2, r2, #1
   11bfc:	adc	r3, r3, #0
   11c00:	strd	r2, [r4, #232]	; 0xe8
   11c04:	b	11bd8 <main@@Base+0xa4>
   11c08:	ldrd	r6, [r4, #224]	; 0xe0
   11c0c:	ldr	r3, [pc, #72]	; 11c5c <main@@Base+0x128>
   11c10:	mov	r2, #45	; 0x2d
   11c14:	adds	r6, r6, #1
   11c18:	adc	r7, r7, #0
   11c1c:	ldr	r3, [r3]
   11c20:	mov	r1, #1
   11c24:	ldr	r0, [pc, #52]	; 11c60 <main@@Base+0x12c>
   11c28:	strd	r6, [r4, #224]	; 0xe0
   11c2c:	bl	119cc <fwrite@plt>
   11c30:	ldrd	r2, [r4, #248]	; 0xf8
   11c34:	mov	r0, #1
   11c38:	adds	r2, r2, #1
   11c3c:	adc	r3, r3, #0
   11c40:	strd	r2, [r4, #248]	; 0xf8
   11c44:	bl	11a44 <exit@plt>
   11c48:	andeq	sl, r2, r8, asr #21
   11c4c:	andeq	r9, r1, r4, lsr #8
   11c50:	andeq	sl, r2, r0, asr #21
   11c54:			; <UNDEFINED> instruction: 0x0002aab0
   11c58:	andeq	r9, r1, r0, lsr #8
   11c5c:			; <UNDEFINED> instruction: 0x0002aab8
   11c60:	andeq	r9, r1, r8, lsr #8
   11c64:	ldr	r0, [pc]	; 11c6c <main@@Base+0x138>
   11c68:	b	18fdc <__gcov_sort_n_vals@@Base+0x458>
   11c6c:	strheq	sl, [r2], -ip
   11c70:	ldr	r0, [pc]	; 11c78 <main@@Base+0x144>
   11c74:	b	18fdc <__gcov_sort_n_vals@@Base+0x458>
   11c78:	andeq	sl, r2, r0, asr r1
   11c7c:	ldr	r0, [pc]	; 11c84 <main@@Base+0x150>
   11c80:	b	18fdc <__gcov_sort_n_vals@@Base+0x458>
   11c84:	andeq	sl, r2, r8, ror #8
   11c88:	ldr	r0, [pc]	; 11c90 <main@@Base+0x15c>
   11c8c:	b	18fdc <__gcov_sort_n_vals@@Base+0x458>
   11c90:	andeq	sl, r2, r8, lsl #11
   11c94:	ldr	r0, [pc]	; 11c9c <main@@Base+0x168>
   11c98:	b	18fdc <__gcov_sort_n_vals@@Base+0x458>
   11c9c:	andeq	sl, r2, r8, lsl #15
   11ca0:	ldr	r0, [pc]	; 11ca8 <main@@Base+0x174>
   11ca4:	b	18fdc <__gcov_sort_n_vals@@Base+0x458>
   11ca8:	strdeq	sl, [r2], -ip

00011cac <_start@@Base>:
   11cac:	mov	fp, #0
   11cb0:	mov	lr, #0
   11cb4:	pop	{r1}		; (ldr r1, [sp], #4)
   11cb8:	mov	r2, sp
   11cbc:	push	{r2}		; (str r2, [sp, #-4]!)
   11cc0:	push	{r0}		; (str r0, [sp, #-4]!)
   11cc4:	ldr	ip, [pc, #16]	; 11cdc <_start@@Base+0x30>
   11cc8:	push	{ip}		; (str ip, [sp, #-4]!)
   11ccc:	ldr	r0, [pc, #12]	; 11ce0 <_start@@Base+0x34>
   11cd0:	ldr	r3, [pc, #12]	; 11ce4 <_start@@Base+0x38>
   11cd4:	bl	11a08 <__libc_start_main@plt>
   11cd8:	bl	11b1c <abort@plt>
   11cdc:	andeq	r9, r1, r8, ror #6
   11ce0:	andeq	r1, r1, r4, lsr fp
   11ce4:	andeq	r9, r1, r8, lsl #6
   11ce8:	ldr	r3, [pc, #20]	; 11d04 <_start@@Base+0x58>
   11cec:	ldr	r2, [pc, #20]	; 11d08 <_start@@Base+0x5c>
   11cf0:	add	r3, pc, r3
   11cf4:	ldr	r2, [r3, r2]
   11cf8:	cmp	r2, #0
   11cfc:	bxeq	lr
   11d00:	b	11a20 <__gmon_start__@plt>
   11d04:	andeq	r8, r1, r8, lsl #6
   11d08:	andeq	r0, r0, r8, lsr #1
   11d0c:	ldr	r3, [pc, #28]	; 11d30 <_start@@Base+0x84>
   11d10:	ldr	r0, [pc, #28]	; 11d34 <_start@@Base+0x88>
   11d14:	sub	r3, r3, r0
   11d18:	cmp	r3, #6
   11d1c:	bxls	lr
   11d20:	ldr	r3, [pc, #16]	; 11d38 <_start@@Base+0x8c>
   11d24:	cmp	r3, #0
   11d28:	bxeq	lr
   11d2c:	bx	r3
   11d30:			; <UNDEFINED> instruction: 0x0002aab3
   11d34:			; <UNDEFINED> instruction: 0x0002aab0
   11d38:	andeq	r0, r0, r0
   11d3c:	ldr	r1, [pc, #36]	; 11d68 <_start@@Base+0xbc>
   11d40:	ldr	r0, [pc, #36]	; 11d6c <_start@@Base+0xc0>
   11d44:	sub	r1, r1, r0
   11d48:	asr	r1, r1, #2
   11d4c:	add	r1, r1, r1, lsr #31
   11d50:	asrs	r1, r1, #1
   11d54:	bxeq	lr
   11d58:	ldr	r3, [pc, #16]	; 11d70 <_start@@Base+0xc4>
   11d5c:	cmp	r3, #0
   11d60:	bxeq	lr
   11d64:	bx	r3
   11d68:			; <UNDEFINED> instruction: 0x0002aab0
   11d6c:			; <UNDEFINED> instruction: 0x0002aab0
   11d70:	andeq	r0, r0, r0
   11d74:	push	{r4, lr}
   11d78:	ldr	r4, [pc, #24]	; 11d98 <_start@@Base+0xec>
   11d7c:	ldrb	r3, [r4]
   11d80:	cmp	r3, #0
   11d84:	popne	{r4, pc}
   11d88:	bl	11d0c <_start@@Base+0x60>
   11d8c:	mov	r3, #1
   11d90:	strb	r3, [r4]
   11d94:	pop	{r4, pc}
   11d98:	andeq	sl, r2, r4, asr #21
   11d9c:	ldr	r0, [pc, #40]	; 11dcc <_start@@Base+0x120>
   11da0:	ldr	r3, [r0]
   11da4:	cmp	r3, #0
   11da8:	bne	11db0 <_start@@Base+0x104>
   11dac:	b	11d3c <_start@@Base+0x90>
   11db0:	ldr	r3, [pc, #24]	; 11dd0 <_start@@Base+0x124>
   11db4:	cmp	r3, #0
   11db8:	beq	11dac <_start@@Base+0x100>
   11dbc:	push	{r4, lr}
   11dc0:	blx	r3
   11dc4:	pop	{r4, lr}
   11dc8:	b	11d3c <_start@@Base+0x90>
   11dcc:	andeq	r9, r2, r4, lsl pc
   11dd0:	andeq	r0, r0, r0

00011dd4 <load_file@@Base>:
   11dd4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd8:	mov	r5, r0
   11ddc:	ldr	r4, [pc, #484]	; 11fc8 <load_file@@Base+0x1f4>
   11de0:	ldr	r1, [pc, #484]	; 11fcc <load_file@@Base+0x1f8>
   11de4:	ldrd	r2, [r4]
   11de8:	adds	r2, r2, #1
   11dec:	adc	r3, r3, #0
   11df0:	strd	r2, [r4]
   11df4:	bl	1199c <fopen@plt>
   11df8:	ldrd	r2, [r4, #8]
   11dfc:	adds	r2, r2, #1
   11e00:	adc	r3, r3, #0
   11e04:	strd	r2, [r4, #8]
   11e08:	subs	r8, r0, #0
   11e0c:	beq	11f04 <load_file@@Base+0x130>
   11e10:	ldrd	r6, [r4, #16]
   11e14:	mov	r2, #2
   11e18:	mov	r1, #0
   11e1c:	adds	r6, r6, #1
   11e20:	adc	r7, r7, #0
   11e24:	strd	r6, [r4, #16]
   11e28:	bl	11b04 <fseek@plt>
   11e2c:	ldrd	r2, [r4, #24]
   11e30:	adds	r2, r2, #1
   11e34:	adc	r3, r3, #0
   11e38:	strd	r2, [r4, #24]
   11e3c:	subs	r7, r0, #0
   11e40:	bne	11ee0 <load_file@@Base+0x10c>
   11e44:	ldrd	r2, [r4, #32]
   11e48:	mov	r0, r8
   11e4c:	adds	r2, r2, #1
   11e50:	adc	r3, r3, #0
   11e54:	strd	r2, [r4, #32]
   11e58:	bl	119c0 <ftell@plt>
   11e5c:	cmn	r0, #1
   11e60:	mov	r9, r0
   11e64:	beq	11f0c <load_file@@Base+0x138>
   11e68:	ldrd	r2, [r4, #48]	; 0x30
   11e6c:	add	r0, r0, #1
   11e70:	adds	r2, r2, #1
   11e74:	adc	r3, r3, #0
   11e78:	strd	r2, [r4, #48]	; 0x30
   11e7c:	bl	119fc <malloc@plt>
   11e80:	mov	r2, r7
   11e84:	mov	r1, r7
   11e88:	mov	r6, r0
   11e8c:	mov	r0, r8
   11e90:	bl	11b04 <fseek@plt>
   11e94:	subs	r7, r0, #0
   11e98:	bne	11f4c <load_file@@Base+0x178>
   11e9c:	ldrd	sl, [r4, #72]	; 0x48
   11ea0:	mov	r2, r9
   11ea4:	mov	r3, r8
   11ea8:	adds	sl, sl, #1
   11eac:	adc	fp, fp, #0
   11eb0:	mov	r1, #1
   11eb4:	mov	r0, r6
   11eb8:	strd	sl, [r4, #72]	; 0x48
   11ebc:	bl	119e4 <fread@plt>
   11ec0:	cmp	r0, #0
   11ec4:	beq	11f8c <load_file@@Base+0x1b8>
   11ec8:	ldrd	r2, [r4, #104]	; 0x68
   11ecc:	strb	r7, [r6, r0]
   11ed0:	adds	r2, r2, #1
   11ed4:	adc	r3, r3, #0
   11ed8:	strd	r2, [r4, #104]	; 0x68
   11edc:	b	11ee4 <load_file@@Base+0x110>
   11ee0:	mov	r6, #0
   11ee4:	mov	r0, r8
   11ee8:	bl	11ac8 <fclose@plt>
   11eec:	ldrd	r2, [r4, #112]	; 0x70
   11ef0:	adds	r2, r2, #1
   11ef4:	adc	r3, r3, #0
   11ef8:	strd	r2, [r4, #112]	; 0x70
   11efc:	mov	r0, r6
   11f00:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f04:	mov	r6, r8
   11f08:	b	11efc <load_file@@Base+0x128>
   11f0c:	ldrd	r6, [r4, #40]	; 0x28
   11f10:	ldr	r3, [pc, #184]	; 11fd0 <load_file@@Base+0x1fc>
   11f14:	mov	r2, #51	; 0x33
   11f18:	adds	r6, r6, #1
   11f1c:	adc	r7, r7, #0
   11f20:	ldr	r3, [r3]
   11f24:	mov	r1, #1
   11f28:	ldr	r0, [pc, #164]	; 11fd4 <load_file@@Base+0x200>
   11f2c:	strd	r6, [r4, #40]	; 0x28
   11f30:	bl	119cc <fwrite@plt>
   11f34:	ldrd	r2, [r4, #56]	; 0x38
   11f38:	mov	r0, #1
   11f3c:	adds	r2, r2, #1
   11f40:	adc	r3, r3, #0
   11f44:	strd	r2, [r4, #56]	; 0x38
   11f48:	bl	11a44 <exit@plt>
   11f4c:	ldrd	r6, [r4, #64]	; 0x40
   11f50:	ldr	r3, [pc, #120]	; 11fd0 <load_file@@Base+0x1fc>
   11f54:	mov	r2, #49	; 0x31
   11f58:	adds	r6, r6, #1
   11f5c:	adc	r7, r7, #0
   11f60:	ldr	r3, [r3]
   11f64:	mov	r1, #1
   11f68:	ldr	r0, [pc, #104]	; 11fd8 <load_file@@Base+0x204>
   11f6c:	strd	r6, [r4, #64]	; 0x40
   11f70:	bl	119cc <fwrite@plt>
   11f74:	ldrd	r2, [r4, #80]	; 0x50
   11f78:	mov	r0, #1
   11f7c:	adds	r2, r2, #1
   11f80:	adc	r3, r3, #0
   11f84:	strd	r2, [r4, #80]	; 0x50
   11f88:	bl	11a44 <exit@plt>
   11f8c:	ldrd	r6, [r4, #88]	; 0x58
   11f90:	ldr	r3, [pc, #56]	; 11fd0 <load_file@@Base+0x1fc>
   11f94:	mov	r2, r5
   11f98:	adds	r6, r6, #1
   11f9c:	adc	r7, r7, #0
   11fa0:	ldr	r0, [r3]
   11fa4:	ldr	r1, [pc, #48]	; 11fdc <load_file@@Base+0x208>
   11fa8:	strd	r6, [r4, #88]	; 0x58
   11fac:	bl	11a68 <fprintf@plt>
   11fb0:	ldrd	r2, [r4, #96]	; 0x60
   11fb4:	mov	r0, #1
   11fb8:	adds	r2, r2, #1
   11fbc:	adc	r3, r3, #0
   11fc0:	strd	r2, [r4, #96]	; 0x60
   11fc4:	bl	11a44 <exit@plt>
   11fc8:	andeq	sl, r2, r8, asr #21
   11fcc:	andeq	r9, r1, r8, ror sl
   11fd0:			; <UNDEFINED> instruction: 0x0002aab8
   11fd4:	andeq	r9, r1, r0, lsr #7
   11fd8:	ldrdeq	r9, [r1], -r4
   11fdc:	andeq	r9, r1, r8, lsl #8

00011fe0 <my_main@@Base>:
   11fe0:	push	{r4, r5, r6, r7, r8, lr}
   11fe4:	sub	sp, sp, #32
   11fe8:	ldr	r4, [pc, #244]	; 120e4 <my_main@@Base+0x104>
   11fec:	mov	r8, r1
   11ff0:	ldrd	r2, [r4, #120]	; 0x78
   11ff4:	adds	r2, r2, #1
   11ff8:	adc	r3, r3, #0
   11ffc:	strd	r2, [r4, #120]	; 0x78
   12000:	bl	11dd4 <load_file@@Base>
   12004:	ldrd	r2, [r4, #128]	; 0x80
   12008:	adds	r2, r2, #1
   1200c:	adc	r3, r3, #0
   12010:	strd	r2, [r4, #128]	; 0x80
   12014:	mov	r5, r0
   12018:	mov	r1, r0
   1201c:	add	r0, sp, #4
   12020:	bl	12470 <init_lexer@@Base>
   12024:	ldrd	r6, [r4, #136]	; 0x88
   12028:	add	r1, sp, #4
   1202c:	mov	r0, sp
   12030:	adds	r6, r6, #1
   12034:	adc	r7, r7, #0
   12038:	strd	r6, [r4, #136]	; 0x88
   1203c:	bl	1530c <init_grammar@@Base>
   12040:	ldrd	r6, [r4, #144]	; 0x90
   12044:	mov	r1, sp
   12048:	mov	r2, r8
   1204c:	adds	r6, r6, #1
   12050:	adc	r7, r7, #0
   12054:	add	r0, sp, #16
   12058:	strd	r6, [r4, #144]	; 0x90
   1205c:	bl	163ac <init_generator@@Base>
   12060:	ldrd	r2, [r4, #152]	; 0x98
   12064:	add	r0, sp, #16
   12068:	adds	r2, r2, #1
   1206c:	adc	r3, r3, #0
   12070:	strd	r2, [r4, #152]	; 0x98
   12074:	bl	16eb0 <generate_code@@Base>
   12078:	ldrd	r2, [r4, #160]	; 0xa0
   1207c:	add	r0, sp, #16
   12080:	adds	r2, r2, #1
   12084:	adc	r3, r3, #0
   12088:	strd	r2, [r4, #160]	; 0xa0
   1208c:	bl	16404 <destroy_generator@@Base>
   12090:	ldrd	r2, [r4, #168]	; 0xa8
   12094:	mov	r0, sp
   12098:	adds	r2, r2, #1
   1209c:	adc	r3, r3, #0
   120a0:	strd	r2, [r4, #168]	; 0xa8
   120a4:	bl	1532c <destroy_grammar@@Base>
   120a8:	ldrd	r2, [r4, #176]	; 0xb0
   120ac:	add	r0, sp, #4
   120b0:	adds	r2, r2, #1
   120b4:	adc	r3, r3, #0
   120b8:	strd	r2, [r4, #176]	; 0xb0
   120bc:	bl	1249c <destroy_lexer@@Base>
   120c0:	ldrd	r2, [r4, #184]	; 0xb8
   120c4:	mov	r0, r5
   120c8:	adds	r2, r2, #1
   120cc:	adc	r3, r3, #0
   120d0:	strd	r2, [r4, #184]	; 0xb8
   120d4:	bl	119a8 <free@plt>
   120d8:	mov	r0, #0
   120dc:	add	sp, sp, #32
   120e0:	pop	{r4, r5, r6, r7, r8, pc}
   120e4:	andeq	sl, r2, r8, asr #21

000120e8 <init_token_int_type@@Base>:
   120e8:	ldr	r1, [pc, #24]	; 12108 <init_token_int_type@@Base+0x20>
   120ec:	mov	ip, #0
   120f0:	str	ip, [r0]
   120f4:	ldrd	r2, [r1]
   120f8:	adds	r2, r2, #1
   120fc:	adc	r3, r3, #0
   12100:	strd	r2, [r1]
   12104:	bx	lr
   12108:	andeq	sl, r2, r8, asr #23

0001210c <init_token_int_value@@Base>:
   1210c:	ldr	ip, [pc, #32]	; 12134 <init_token_int_value@@Base+0x28>
   12110:	push	{lr}		; (str lr, [sp, #-4]!)
   12114:	mov	lr, #1
   12118:	ldrd	r2, [ip, #8]
   1211c:	str	r1, [r0, #4]
   12120:	str	lr, [r0]
   12124:	adds	r2, r2, #1
   12128:	adc	r3, r3, #0
   1212c:	strd	r2, [ip, #8]
   12130:	pop	{pc}		; (ldr pc, [sp], #4)
   12134:	andeq	sl, r2, r8, asr #23

00012138 <init_token_function@@Base>:
   12138:	ldr	ip, [pc, #32]	; 12160 <init_token_function@@Base+0x28>
   1213c:	push	{lr}		; (str lr, [sp, #-4]!)
   12140:	mov	lr, #2
   12144:	ldrd	r2, [ip, #16]
   12148:	str	r1, [r0, #4]
   1214c:	str	lr, [r0]
   12150:	adds	r2, r2, #1
   12154:	adc	r3, r3, #0
   12158:	strd	r2, [ip, #16]
   1215c:	pop	{pc}		; (ldr pc, [sp], #4)
   12160:	andeq	sl, r2, r8, asr #23

00012164 <init_token_opar@@Base>:
   12164:	ldr	r1, [pc, #24]	; 12184 <init_token_opar@@Base+0x20>
   12168:	mov	r3, #3
   1216c:	str	r3, [r0]
   12170:	ldrd	r2, [r1, #24]
   12174:	adds	r2, r2, #1
   12178:	adc	r3, r3, #0
   1217c:	strd	r2, [r1, #24]
   12180:	bx	lr
   12184:	andeq	sl, r2, r8, asr #23

00012188 <init_token_cpar@@Base>:
   12188:	ldr	r1, [pc, #24]	; 121a8 <init_token_cpar@@Base+0x20>
   1218c:	mov	r3, #4
   12190:	str	r3, [r0]
   12194:	ldrd	r2, [r1, #32]
   12198:	adds	r2, r2, #1
   1219c:	adc	r3, r3, #0
   121a0:	strd	r2, [r1, #32]
   121a4:	bx	lr
   121a8:	andeq	sl, r2, r8, asr #23

000121ac <init_token_obra@@Base>:
   121ac:	ldr	r1, [pc, #24]	; 121cc <init_token_obra@@Base+0x20>
   121b0:	mov	r3, #5
   121b4:	str	r3, [r0]
   121b8:	ldrd	r2, [r1, #40]	; 0x28
   121bc:	adds	r2, r2, #1
   121c0:	adc	r3, r3, #0
   121c4:	strd	r2, [r1, #40]	; 0x28
   121c8:	bx	lr
   121cc:	andeq	sl, r2, r8, asr #23

000121d0 <init_token_cbra@@Base>:
   121d0:	ldr	r1, [pc, #24]	; 121f0 <init_token_cbra@@Base+0x20>
   121d4:	mov	r3, #6
   121d8:	str	r3, [r0]
   121dc:	ldrd	r2, [r1, #48]	; 0x30
   121e0:	adds	r2, r2, #1
   121e4:	adc	r3, r3, #0
   121e8:	strd	r2, [r1, #48]	; 0x30
   121ec:	bx	lr
   121f0:	andeq	sl, r2, r8, asr #23

000121f4 <init_token_return@@Base>:
   121f4:	ldr	r1, [pc, #24]	; 12214 <init_token_return@@Base+0x20>
   121f8:	mov	r3, #7
   121fc:	str	r3, [r0]
   12200:	ldrd	r2, [r1, #56]	; 0x38
   12204:	adds	r2, r2, #1
   12208:	adc	r3, r3, #0
   1220c:	strd	r2, [r1, #56]	; 0x38
   12210:	bx	lr
   12214:	andeq	sl, r2, r8, asr #23

00012218 <init_token_semicolon@@Base>:
   12218:	ldr	r1, [pc, #24]	; 12238 <init_token_semicolon@@Base+0x20>
   1221c:	mov	r3, #8
   12220:	str	r3, [r0]
   12224:	ldrd	r2, [r1, #64]	; 0x40
   12228:	adds	r2, r2, #1
   1222c:	adc	r3, r3, #0
   12230:	strd	r2, [r1, #64]	; 0x40
   12234:	bx	lr
   12238:	andeq	sl, r2, r8, asr #23

0001223c <init_token_eof@@Base>:
   1223c:	ldr	r1, [pc, #24]	; 1225c <init_token_eof@@Base+0x20>
   12240:	mov	r3, #9
   12244:	str	r3, [r0]
   12248:	ldrd	r2, [r1, #72]	; 0x48
   1224c:	adds	r2, r2, #1
   12250:	adc	r3, r3, #0
   12254:	strd	r2, [r1, #72]	; 0x48
   12258:	bx	lr
   1225c:	andeq	sl, r2, r8, asr #23

00012260 <init_token_if@@Base>:
   12260:	ldr	r1, [pc, #24]	; 12280 <init_token_if@@Base+0x20>
   12264:	mov	r3, #10
   12268:	str	r3, [r0]
   1226c:	ldrd	r2, [r1, #80]	; 0x50
   12270:	adds	r2, r2, #1
   12274:	adc	r3, r3, #0
   12278:	strd	r2, [r1, #80]	; 0x50
   1227c:	bx	lr
   12280:	andeq	sl, r2, r8, asr #23

00012284 <init_token_else@@Base>:
   12284:	ldr	r1, [pc, #24]	; 122a4 <init_token_else@@Base+0x20>
   12288:	mov	r3, #11
   1228c:	str	r3, [r0]
   12290:	ldrd	r2, [r1, #88]	; 0x58
   12294:	adds	r2, r2, #1
   12298:	adc	r3, r3, #0
   1229c:	strd	r2, [r1, #88]	; 0x58
   122a0:	bx	lr
   122a4:	andeq	sl, r2, r8, asr #23

000122a8 <init_token_boolean_op@@Base>:
   122a8:	ldr	ip, [pc, #32]	; 122d0 <init_token_boolean_op@@Base+0x28>
   122ac:	push	{lr}		; (str lr, [sp, #-4]!)
   122b0:	mov	lr, #12
   122b4:	ldrd	r2, [ip, #96]	; 0x60
   122b8:	str	r1, [r0, #4]
   122bc:	str	lr, [r0]
   122c0:	adds	r2, r2, #1
   122c4:	adc	r3, r3, #0
   122c8:	strd	r2, [ip, #96]	; 0x60
   122cc:	pop	{pc}		; (ldr pc, [sp], #4)
   122d0:	andeq	sl, r2, r8, asr #23

000122d4 <free_token_int_type@@Base>:
   122d4:	ldr	r1, [pc, #16]	; 122ec <free_token_int_type@@Base+0x18>
   122d8:	ldrd	r2, [r1, #104]	; 0x68
   122dc:	adds	r2, r2, #1
   122e0:	adc	r3, r3, #0
   122e4:	strd	r2, [r1, #104]	; 0x68
   122e8:	b	119a8 <free@plt>
   122ec:	andeq	sl, r2, r8, asr #23

000122f0 <free_token_int_value@@Base>:
   122f0:	ldr	r1, [pc, #16]	; 12308 <free_token_int_value@@Base+0x18>
   122f4:	ldrd	r2, [r1, #112]	; 0x70
   122f8:	adds	r2, r2, #1
   122fc:	adc	r3, r3, #0
   12300:	strd	r2, [r1, #112]	; 0x70
   12304:	b	119a8 <free@plt>
   12308:	andeq	sl, r2, r8, asr #23

0001230c <free_token_function@@Base>:
   1230c:	ldr	r1, [pc, #16]	; 12324 <free_token_function@@Base+0x18>
   12310:	ldrd	r2, [r1, #120]	; 0x78
   12314:	adds	r2, r2, #1
   12318:	adc	r3, r3, #0
   1231c:	strd	r2, [r1, #120]	; 0x78
   12320:	b	119a8 <free@plt>
   12324:	andeq	sl, r2, r8, asr #23

00012328 <free_token_opar@@Base>:
   12328:	ldr	r1, [pc, #16]	; 12340 <free_token_opar@@Base+0x18>
   1232c:	ldrd	r2, [r1, #128]	; 0x80
   12330:	adds	r2, r2, #1
   12334:	adc	r3, r3, #0
   12338:	strd	r2, [r1, #128]	; 0x80
   1233c:	b	119a8 <free@plt>
   12340:	andeq	sl, r2, r8, asr #23

00012344 <free_token_cpar@@Base>:
   12344:	ldr	r1, [pc, #16]	; 1235c <free_token_cpar@@Base+0x18>
   12348:	ldrd	r2, [r1, #136]	; 0x88
   1234c:	adds	r2, r2, #1
   12350:	adc	r3, r3, #0
   12354:	strd	r2, [r1, #136]	; 0x88
   12358:	b	119a8 <free@plt>
   1235c:	andeq	sl, r2, r8, asr #23

00012360 <free_token_obra@@Base>:
   12360:	ldr	r1, [pc, #16]	; 12378 <free_token_obra@@Base+0x18>
   12364:	ldrd	r2, [r1, #144]	; 0x90
   12368:	adds	r2, r2, #1
   1236c:	adc	r3, r3, #0
   12370:	strd	r2, [r1, #144]	; 0x90
   12374:	b	119a8 <free@plt>
   12378:	andeq	sl, r2, r8, asr #23

0001237c <free_token_cbra@@Base>:
   1237c:	ldr	r1, [pc, #16]	; 12394 <free_token_cbra@@Base+0x18>
   12380:	ldrd	r2, [r1, #152]	; 0x98
   12384:	adds	r2, r2, #1
   12388:	adc	r3, r3, #0
   1238c:	strd	r2, [r1, #152]	; 0x98
   12390:	b	119a8 <free@plt>
   12394:	andeq	sl, r2, r8, asr #23

00012398 <free_token_return@@Base>:
   12398:	ldr	r1, [pc, #16]	; 123b0 <free_token_return@@Base+0x18>
   1239c:	ldrd	r2, [r1, #160]	; 0xa0
   123a0:	adds	r2, r2, #1
   123a4:	adc	r3, r3, #0
   123a8:	strd	r2, [r1, #160]	; 0xa0
   123ac:	b	119a8 <free@plt>
   123b0:	andeq	sl, r2, r8, asr #23

000123b4 <free_token_semicolon@@Base>:
   123b4:	ldr	r1, [pc, #16]	; 123cc <free_token_semicolon@@Base+0x18>
   123b8:	ldrd	r2, [r1, #168]	; 0xa8
   123bc:	adds	r2, r2, #1
   123c0:	adc	r3, r3, #0
   123c4:	strd	r2, [r1, #168]	; 0xa8
   123c8:	b	119a8 <free@plt>
   123cc:	andeq	sl, r2, r8, asr #23

000123d0 <free_token_eof@@Base>:
   123d0:	ldr	r1, [pc, #16]	; 123e8 <free_token_eof@@Base+0x18>
   123d4:	ldrd	r2, [r1, #176]	; 0xb0
   123d8:	adds	r2, r2, #1
   123dc:	adc	r3, r3, #0
   123e0:	strd	r2, [r1, #176]	; 0xb0
   123e4:	b	119a8 <free@plt>
   123e8:	andeq	sl, r2, r8, asr #23

000123ec <free_token_if@@Base>:
   123ec:	ldr	r1, [pc, #16]	; 12404 <free_token_if@@Base+0x18>
   123f0:	ldrd	r2, [r1, #184]	; 0xb8
   123f4:	adds	r2, r2, #1
   123f8:	adc	r3, r3, #0
   123fc:	strd	r2, [r1, #184]	; 0xb8
   12400:	b	119a8 <free@plt>
   12404:	andeq	sl, r2, r8, asr #23

00012408 <free_token_else@@Base>:
   12408:	ldr	r1, [pc, #16]	; 12420 <free_token_else@@Base+0x18>
   1240c:	ldrd	r2, [r1, #192]	; 0xc0
   12410:	adds	r2, r2, #1
   12414:	adc	r3, r3, #0
   12418:	strd	r2, [r1, #192]	; 0xc0
   1241c:	b	119a8 <free@plt>
   12420:	andeq	sl, r2, r8, asr #23

00012424 <free_token_boolean_op@@Base>:
   12424:	push	{r4, r5, r6, lr}
   12428:	mov	r5, r0
   1242c:	ldr	r4, [pc, #56]	; 1246c <free_token_boolean_op@@Base+0x48>
   12430:	ldr	r0, [r0, #4]
   12434:	ldrd	r2, [r4, #200]	; 0xc8
   12438:	adds	r2, r2, #1
   1243c:	adc	r3, r3, #0
   12440:	cmp	r0, #0
   12444:	strd	r2, [r4, #200]	; 0xc8
   12448:	beq	12460 <free_token_boolean_op@@Base+0x3c>
   1244c:	bl	119a8 <free@plt>
   12450:	ldrd	r2, [r4, #208]	; 0xd0
   12454:	adds	r2, r2, #1
   12458:	adc	r3, r3, #0
   1245c:	strd	r2, [r4, #208]	; 0xd0
   12460:	mov	r0, r5
   12464:	pop	{r4, r5, r6, lr}
   12468:	b	119a8 <free@plt>
   1246c:	andeq	sl, r2, r8, asr #23

00012470 <init_lexer@@Base>:
   12470:	ldr	ip, [pc, #32]	; 12498 <init_lexer@@Base+0x28>
   12474:	push	{lr}		; (str lr, [sp, #-4]!)
   12478:	mov	lr, #0
   1247c:	ldrd	r2, [ip]
   12480:	stm	r0, {r1, lr}
   12484:	str	lr, [r0, #8]
   12488:	adds	r2, r2, #1
   1248c:	adc	r3, r3, #0
   12490:	strd	r2, [ip]
   12494:	pop	{pc}		; (ldr pc, [sp], #4)
   12498:	andeq	sl, r2, r0, lsr #25

0001249c <destroy_lexer@@Base>:
   1249c:	push	{r4, lr}
   124a0:	ldr	r4, [pc, #48]	; 124d8 <destroy_lexer@@Base+0x3c>
   124a4:	ldr	r0, [r0, #4]
   124a8:	ldrd	r2, [r4, #8]
   124ac:	adds	r2, r2, #1
   124b0:	adc	r3, r3, #0
   124b4:	cmp	r0, #0
   124b8:	strd	r2, [r4, #8]
   124bc:	popeq	{r4, pc}
   124c0:	bl	119a8 <free@plt>
   124c4:	ldrd	r2, [r4, #16]
   124c8:	adds	r2, r2, #1
   124cc:	adc	r3, r3, #0
   124d0:	strd	r2, [r4, #16]
   124d4:	pop	{r4, pc}
   124d8:	andeq	sl, r2, r0, lsr #25

000124dc <free_stack_base@@Base>:
   124dc:	ldr	r1, [pc, #16]	; 124f4 <free_stack_base@@Base+0x18>
   124e0:	ldrd	r2, [r1, #24]
   124e4:	adds	r2, r2, #1
   124e8:	adc	r3, r3, #0
   124ec:	strd	r2, [r1, #24]
   124f0:	b	119a8 <free@plt>
   124f4:	andeq	sl, r2, r0, lsr #25

000124f8 <push_back@@Base>:
   124f8:	ldr	ip, [pc, #48]	; 12530 <push_back@@Base+0x38>
   124fc:	push	{r4, r5, r6, lr}
   12500:	mov	r4, r0
   12504:	ldrd	r2, [ip, #32]
   12508:	mov	r0, #8
   1250c:	mov	r5, r1
   12510:	adds	r2, r2, #1
   12514:	adc	r3, r3, #0
   12518:	strd	r2, [ip, #32]
   1251c:	bl	119fc <malloc@plt>
   12520:	ldr	r3, [r4, #4]
   12524:	str	r0, [r4, #4]
   12528:	stm	r0, {r3, r5}
   1252c:	pop	{r4, r5, r6, pc}
   12530:	andeq	sl, r2, r0, lsr #25

00012534 <get_char@@Base>:
   12534:	ldr	ip, [pc, #40]	; 12564 <get_char@@Base+0x30>
   12538:	push	{r4, lr}
   1253c:	ldrd	r2, [ip, #40]	; 0x28
   12540:	ldr	r1, [r0, #8]
   12544:	ldr	lr, [r0]
   12548:	adds	r2, r2, #1
   1254c:	adc	r3, r3, #0
   12550:	add	r4, r1, #1
   12554:	str	r4, [r0, #8]
   12558:	strd	r2, [ip, #40]	; 0x28
   1255c:	ldrb	r0, [lr, r1]
   12560:	pop	{r4, pc}
   12564:	andeq	sl, r2, r0, lsr #25

00012568 <push_back_chars@@Base>:
   12568:	ldr	r3, [r0, #8]
   1256c:	cmp	r3, r1
   12570:	bcc	12594 <push_back_chars@@Base+0x2c>
   12574:	ldr	ip, [pc, #96]	; 125dc <push_back_chars@@Base+0x74>
   12578:	sub	r3, r3, r1
   1257c:	str	r3, [r0, #8]
   12580:	ldrd	r2, [ip, #48]	; 0x30
   12584:	adds	r2, r2, #1
   12588:	adc	r3, r3, #0
   1258c:	strd	r2, [ip, #48]	; 0x30
   12590:	bx	lr
   12594:	push	{r4, r6, r7, lr}
   12598:	mov	r2, #32
   1259c:	ldr	r4, [pc, #56]	; 125dc <push_back_chars@@Base+0x74>
   125a0:	ldr	r3, [pc, #56]	; 125e0 <push_back_chars@@Base+0x78>
   125a4:	mov	r1, #1
   125a8:	ldrd	r6, [r4, #56]	; 0x38
   125ac:	ldr	r3, [r3]
   125b0:	ldr	r0, [pc, #44]	; 125e4 <push_back_chars@@Base+0x7c>
   125b4:	adds	r6, r6, #1
   125b8:	adc	r7, r7, #0
   125bc:	strd	r6, [r4, #56]	; 0x38
   125c0:	bl	119cc <fwrite@plt>
   125c4:	ldrd	r2, [r4, #64]	; 0x40
   125c8:	mov	r0, #1
   125cc:	adds	r2, r2, #1
   125d0:	adc	r3, r3, #0
   125d4:	strd	r2, [r4, #64]	; 0x40
   125d8:	bl	11a44 <exit@plt>
   125dc:	andeq	sl, r2, r0, lsr #25
   125e0:			; <UNDEFINED> instruction: 0x0002aab8
   125e4:	strdeq	r9, [r1], -r8

000125e8 <push_back_one_char@@Base>:
   125e8:	push	{r4, r6, r7, lr}
   125ec:	ldr	r4, [pc, #132]	; 12678 <push_back_one_char@@Base+0x90>
   125f0:	ldr	r1, [r0, #8]
   125f4:	ldrd	r2, [r4, #72]	; 0x48
   125f8:	adds	r2, r2, #1
   125fc:	adc	r3, r3, #0
   12600:	cmp	r1, #0
   12604:	strd	r2, [r4, #72]	; 0x48
   12608:	beq	12638 <push_back_one_char@@Base+0x50>
   1260c:	ldrd	r6, [r4, #48]	; 0x30
   12610:	ldrd	r2, [r4, #80]	; 0x50
   12614:	sub	r1, r1, #1
   12618:	adds	r6, r6, #1
   1261c:	adc	r7, r7, #0
   12620:	adds	r2, r2, #1
   12624:	adc	r3, r3, #0
   12628:	str	r1, [r0, #8]
   1262c:	strd	r6, [r4, #48]	; 0x30
   12630:	strd	r2, [r4, #80]	; 0x50
   12634:	pop	{r4, r6, r7, pc}
   12638:	ldrd	r6, [r4, #56]	; 0x38
   1263c:	ldr	r3, [pc, #56]	; 1267c <push_back_one_char@@Base+0x94>
   12640:	mov	r2, #32
   12644:	adds	r6, r6, #1
   12648:	adc	r7, r7, #0
   1264c:	ldr	r3, [r3]
   12650:	mov	r1, #1
   12654:	ldr	r0, [pc, #36]	; 12680 <push_back_one_char@@Base+0x98>
   12658:	strd	r6, [r4, #56]	; 0x38
   1265c:	bl	119cc <fwrite@plt>
   12660:	ldrd	r2, [r4, #64]	; 0x40
   12664:	mov	r0, #1
   12668:	adds	r2, r2, #1
   1266c:	adc	r3, r3, #0
   12670:	strd	r2, [r4, #64]	; 0x40
   12674:	bl	11a44 <exit@plt>
   12678:	andeq	sl, r2, r0, lsr #25
   1267c:			; <UNDEFINED> instruction: 0x0002aab8
   12680:	strdeq	r9, [r1], -r8

00012684 <next@@Base>:
   12684:	ldr	r1, [r0, #4]
   12688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1268c:	cmp	r1, #0
   12690:	sub	sp, sp, #620	; 0x26c
   12694:	mov	r7, r0
   12698:	beq	126d0 <next@@Base+0x4c>
   1269c:	ldr	r3, [r1]
   126a0:	mov	r0, r1
   126a4:	str	r3, [r7, #4]
   126a8:	ldr	r4, [r1, #4]
   126ac:	bl	119a8 <free@plt>
   126b0:	ldr	r1, [pc, #2924]	; 13224 <next@@Base+0xba0>
   126b4:	mov	r0, r4
   126b8:	ldrd	r2, [r1, #88]	; 0x58
   126bc:	adds	r2, r2, #1
   126c0:	adc	r3, r3, #0
   126c4:	strd	r2, [r1, #88]	; 0x58
   126c8:	add	sp, sp, #620	; 0x26c
   126cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d0:	ldr	fp, [pc, #2892]	; 13224 <next@@Base+0xba0>
   126d4:	ldr	lr, [r0, #8]
   126d8:	add	r3, fp, #624	; 0x270
   126dc:	add	r2, fp, #608	; 0x260
   126e0:	ldrd	r8, [r3, #-8]
   126e4:	ldr	ip, [r0]
   126e8:	mov	sl, r1
   126ec:	mov	r4, r8
   126f0:	mov	r5, r9
   126f4:	ldrd	r8, [r2]
   126f8:	strd	r4, [sp]
   126fc:	mov	r2, lr
   12700:	subs	r4, r8, r4
   12704:	sbc	r5, r9, r5
   12708:	add	lr, lr, #1
   1270c:	strd	r4, [sp, #16]
   12710:	ldrd	r4, [r3]
   12714:	str	lr, [r7, #8]
   12718:	mov	r8, r1
   1271c:	strd	r4, [sp, #8]
   12720:	ldrd	r4, [fp, #96]	; 0x60
   12724:	ldrb	r6, [ip, r2]
   12728:	mov	r9, r1
   1272c:	strd	r4, [sp, #40]	; 0x28
   12730:	ldrd	r4, [fp, #224]	; 0xe0
   12734:	mov	r2, r1
   12738:	str	r1, [sp, #100]	; 0x64
   1273c:	strd	r4, [sp, #80]	; 0x50
   12740:	ldrd	r4, [fp, #216]	; 0xd8
   12744:	str	r1, [sp, #96]	; 0x60
   12748:	str	r1, [sp, #92]	; 0x5c
   1274c:	strd	r4, [sp, #72]	; 0x48
   12750:	ldrd	r4, [fp, #208]	; 0xd0
   12754:	str	r1, [sp, #28]
   12758:	str	r1, [sp, #88]	; 0x58
   1275c:	strd	r4, [sp, #64]	; 0x40
   12760:	ldrd	r4, [fp, #200]	; 0xc8
   12764:	strd	r4, [sp, #56]	; 0x38
   12768:	ldrd	r4, [fp, #112]	; 0x70
   1276c:	strd	r4, [sp, #48]	; 0x30
   12770:	ldrd	r0, [sp]
   12774:	ldrd	r4, [sp, #16]
   12778:	adds	r4, r4, r0
   1277c:	adc	r5, r5, r1
   12780:	strd	r4, [sp, #32]
   12784:	adds	r4, r0, #1
   12788:	adc	r5, r1, #0
   1278c:	cmp	r6, #0
   12790:	strd	r4, [sp]
   12794:	beq	12ef0 <next@@Base+0x86c>
   12798:	ldrd	r0, [sp, #8]
   1279c:	sub	r9, r9, #1
   127a0:	adds	r0, r0, #1
   127a4:	adc	r1, r1, #0
   127a8:	strd	r0, [sp, #8]
   127ac:	cmp	r9, #4
   127b0:	ldrls	pc, [pc, r9, lsl #2]
   127b4:	b	12cb4 <next@@Base+0x630>
   127b8:	andeq	r2, r1, r0, lsr #22
   127bc:	andeq	r2, r1, ip, asr #20
   127c0:	andeq	r2, r1, r0, lsl r9
   127c4:	andeq	r2, r1, ip, asr #15
   127c8:	andeq	r2, r1, r4, asr sp
   127cc:	ldrd	r4, [sp, #8]
   127d0:	cmp	r2, #0
   127d4:	ldr	r1, [sp, #28]
   127d8:	ldr	r0, [sp, #88]	; 0x58
   127dc:	strd	r4, [r3]
   127e0:	bne	13660 <next@@Base+0xfdc>
   127e4:	ldr	r2, [sp, #92]	; 0x5c
   127e8:	cmp	r2, #0
   127ec:	bne	1366c <next@@Base+0xfe8>
   127f0:	ldr	r2, [sp, #96]	; 0x60
   127f4:	cmp	r2, #0
   127f8:	ldrdne	r4, [sp, #56]	; 0x38
   127fc:	strdne	r4, [fp, #200]	; 0xc8
   12800:	ldr	r2, [sp, #100]	; 0x64
   12804:	cmp	r2, #0
   12808:	ldrdne	r4, [sp, #64]	; 0x40
   1280c:	strdne	r4, [fp, #208]	; 0xd0
   12810:	cmp	sl, #0
   12814:	ldrdne	r4, [sp, #72]	; 0x48
   12818:	strdne	r4, [fp, #216]	; 0xd8
   1281c:	cmp	r0, #0
   12820:	ldrdne	r4, [sp, #80]	; 0x50
   12824:	strdne	r4, [fp, #224]	; 0xe0
   12828:	cmp	r8, #0
   1282c:	ldrdne	r4, [sp, #32]
   12830:	ldrne	r2, [pc, #2592]	; 13258 <next@@Base+0xbd4>
   12834:	strdne	r4, [r2]
   12838:	ldrd	r4, [sp]
   1283c:	cmp	r6, #101	; 0x65
   12840:	strd	r4, [r3, #-8]
   12844:	ldrne	r1, [pc, #2524]	; 13228 <next@@Base+0xba4>
   12848:	bne	13160 <next@@Base+0xadc>
   1284c:	add	r3, sp, #616	; 0x268
   12850:	add	r3, r3, r1
   12854:	add	r2, lr, #1
   12858:	strb	r6, [r3, #-512]	; 0xfffffe00
   1285c:	str	r2, [r7, #8]
   12860:	ldrb	r4, [ip, lr]
   12864:	add	r3, r1, #1
   12868:	cmp	r4, #116	; 0x74
   1286c:	ldrne	r1, [pc, #2488]	; 1322c <next@@Base+0xba8>
   12870:	bne	13138 <next@@Base+0xab4>
   12874:	add	r0, sp, #616	; 0x268
   12878:	add	r3, r0, r3
   1287c:	add	r0, lr, #2
   12880:	strb	r4, [r3, #-512]	; 0xfffffe00
   12884:	str	r0, [r7, #8]
   12888:	ldrb	r4, [ip, r2]
   1288c:	add	r3, r1, #2
   12890:	cmp	r4, #117	; 0x75
   12894:	ldrne	r1, [pc, #2448]	; 1322c <next@@Base+0xba8>
   12898:	bne	13160 <next@@Base+0xadc>
   1289c:	add	r2, sp, #616	; 0x268
   128a0:	add	r3, r2, r3
   128a4:	add	r2, lr, #3
   128a8:	strb	r4, [r3, #-512]	; 0xfffffe00
   128ac:	str	r2, [r7, #8]
   128b0:	ldrb	r0, [ip, r0]
   128b4:	add	r3, r1, #3
   128b8:	cmp	r0, #114	; 0x72
   128bc:	ldrne	r1, [pc, #2412]	; 13230 <next@@Base+0xbac>
   128c0:	bne	13138 <next@@Base+0xab4>
   128c4:	add	r1, sp, #616	; 0x268
   128c8:	add	r3, r1, r3
   128cc:	add	lr, lr, #4
   128d0:	strb	r0, [r3, #-512]	; 0xfffffe00
   128d4:	str	lr, [r7, #8]
   128d8:	ldrb	r3, [ip, r2]
   128dc:	cmp	r3, #110	; 0x6e
   128e0:	ldrne	r1, [pc, #2376]	; 13230 <next@@Base+0xbac>
   128e4:	bne	13160 <next@@Base+0xadc>
   128e8:	ldr	r4, [pc, #2372]	; 13234 <next@@Base+0xbb0>
   128ec:	mov	r0, #4
   128f0:	ldrd	r2, [r4, #-8]
   128f4:	adds	r2, r2, #1
   128f8:	adc	r3, r3, #0
   128fc:	strd	r2, [r4, #-8]
   12900:	bl	119fc <malloc@plt>
   12904:	mov	r5, r0
   12908:	bl	121f4 <init_token_return@@Base>
   1290c:	b	12f8c <next@@Base+0x908>
   12910:	ldrd	r4, [sp, #8]
   12914:	cmp	r2, #0
   12918:	ldr	r1, [sp, #28]
   1291c:	ldr	r0, [sp, #88]	; 0x58
   12920:	strd	r4, [r3]
   12924:	bne	13654 <next@@Base+0xfd0>
   12928:	ldr	r2, [sp, #92]	; 0x5c
   1292c:	cmp	r2, #0
   12930:	ldrdne	r4, [sp, #48]	; 0x30
   12934:	strdne	r4, [fp, #112]	; 0x70
   12938:	ldr	r2, [sp, #96]	; 0x60
   1293c:	cmp	r2, #0
   12940:	ldrdne	r4, [sp, #56]	; 0x38
   12944:	strdne	r4, [fp, #200]	; 0xc8
   12948:	ldr	r2, [sp, #100]	; 0x64
   1294c:	cmp	r2, #0
   12950:	ldrdne	r4, [sp, #64]	; 0x40
   12954:	strdne	r4, [fp, #208]	; 0xd0
   12958:	cmp	sl, #0
   1295c:	ldrdne	r4, [sp, #72]	; 0x48
   12960:	strdne	r4, [fp, #216]	; 0xd8
   12964:	cmp	r0, #0
   12968:	ldrdne	r4, [sp, #80]	; 0x50
   1296c:	strdne	r4, [fp, #224]	; 0xe0
   12970:	cmp	r8, #0
   12974:	ldrdne	r4, [sp, #32]
   12978:	ldrne	r2, [pc, #2264]	; 13258 <next@@Base+0xbd4>
   1297c:	strdne	r4, [r2]
   12980:	ldrd	r4, [sp]
   12984:	cmp	r6, #97	; 0x61
   12988:	strd	r4, [r3, #-8]
   1298c:	ldrne	r1, [pc, #2212]	; 13238 <next@@Base+0xbb4>
   12990:	bne	13138 <next@@Base+0xab4>
   12994:	add	r3, sp, #616	; 0x268
   12998:	add	r3, r3, r1
   1299c:	add	r2, lr, #1
   129a0:	strb	r6, [r3, #-512]	; 0xfffffe00
   129a4:	str	r2, [r7, #8]
   129a8:	ldrb	r0, [ip, lr]
   129ac:	add	r3, r1, #1
   129b0:	cmp	r0, #105	; 0x69
   129b4:	ldrne	r1, [pc, #2172]	; 13238 <next@@Base+0xbb4>
   129b8:	bne	13160 <next@@Base+0xadc>
   129bc:	add	r4, sp, #616	; 0x268
   129c0:	add	r3, r4, r3
   129c4:	add	lr, lr, #2
   129c8:	strb	r0, [r3, #-512]	; 0xfffffe00
   129cc:	str	lr, [r7, #8]
   129d0:	ldrb	lr, [ip, r2]
   129d4:	add	ip, r1, #2
   129d8:	cmp	lr, #110	; 0x6e
   129dc:	ldrne	r1, [pc, #2136]	; 1323c <next@@Base+0xbb8>
   129e0:	bne	13138 <next@@Base+0xab4>
   129e4:	ldr	r4, [pc, #2128]	; 1323c <next@@Base+0xbb8>
   129e8:	add	r3, sp, #616	; 0x268
   129ec:	add	ip, r3, ip
   129f0:	ldrd	r2, [r4]
   129f4:	add	r5, r1, #3
   129f8:	add	r0, sp, #616	; 0x268
   129fc:	adds	r2, r2, #1
   12a00:	adc	r3, r3, #0
   12a04:	add	r6, r0, r5
   12a08:	mov	r7, #0
   12a0c:	add	r0, r1, #4
   12a10:	strb	lr, [ip, #-512]	; 0xfffffe00
   12a14:	strd	r2, [r4], #16
   12a18:	strb	r7, [r6, #-512]	; 0xfffffe00
   12a1c:	bl	119fc <malloc@plt>
   12a20:	mov	r2, r5
   12a24:	add	r1, sp, #104	; 0x68
   12a28:	mov	r6, r0
   12a2c:	bl	11ab0 <strncpy@plt>
   12a30:	strb	r7, [r6, r5]
   12a34:	mov	r0, #8
   12a38:	bl	119fc <malloc@plt>
   12a3c:	mov	r1, r6
   12a40:	mov	r5, r0
   12a44:	bl	12138 <init_token_function@@Base>
   12a48:	b	13768 <next@@Base+0x10e4>
   12a4c:	ldrd	r4, [sp, #8]
   12a50:	cmp	r2, #0
   12a54:	ldr	r1, [sp, #28]
   12a58:	ldr	r0, [sp, #88]	; 0x58
   12a5c:	strd	r4, [r3]
   12a60:	bne	139ac <next@@Base+0x1328>
   12a64:	ldr	r2, [sp, #92]	; 0x5c
   12a68:	cmp	r2, #0
   12a6c:	ldrdne	r4, [sp, #48]	; 0x30
   12a70:	strdne	r4, [fp, #112]	; 0x70
   12a74:	ldr	r2, [sp, #96]	; 0x60
   12a78:	cmp	r2, #0
   12a7c:	ldrdne	r4, [sp, #56]	; 0x38
   12a80:	strdne	r4, [fp, #200]	; 0xc8
   12a84:	ldr	r2, [sp, #100]	; 0x64
   12a88:	cmp	r2, #0
   12a8c:	ldrdne	r4, [sp, #64]	; 0x40
   12a90:	strdne	r4, [fp, #208]	; 0xd0
   12a94:	cmp	sl, #0
   12a98:	ldrdne	r4, [sp, #72]	; 0x48
   12a9c:	strdne	r4, [fp, #216]	; 0xd8
   12aa0:	cmp	r0, #0
   12aa4:	ldrdne	r4, [sp, #80]	; 0x50
   12aa8:	strdne	r4, [fp, #224]	; 0xe0
   12aac:	cmp	r8, #0
   12ab0:	ldrdne	r4, [sp, #32]
   12ab4:	ldrne	r2, [pc, #1948]	; 13258 <next@@Base+0xbd4>
   12ab8:	strdne	r4, [r2]
   12abc:	ldrd	r4, [sp]
   12ac0:	cmp	r6, #102	; 0x66
   12ac4:	strd	r4, [r3, #-8]
   12ac8:	beq	13914 <next@@Base+0x1290>
   12acc:	cmp	r6, #110	; 0x6e
   12ad0:	bne	13964 <next@@Base+0x12e0>
   12ad4:	add	r3, sp, #616	; 0x268
   12ad8:	add	r1, r3, r1
   12adc:	add	r3, lr, #1
   12ae0:	strb	r6, [r1, #-512]	; 0xfffffe00
   12ae4:	str	r3, [r7, #8]
   12ae8:	ldrb	r3, [ip, lr]
   12aec:	cmp	r3, #116	; 0x74
   12af0:	bne	13134 <next@@Base+0xab0>
   12af4:	ldr	r3, [pc, #1860]	; 13240 <next@@Base+0xbbc>
   12af8:	mov	r0, #4
   12afc:	mov	r4, r3
   12b00:	ldrd	r2, [r3]
   12b04:	adds	r2, r2, #1
   12b08:	adc	r3, r3, #0
   12b0c:	strd	r2, [r4], #16
   12b10:	bl	119fc <malloc@plt>
   12b14:	mov	r5, r0
   12b18:	bl	120e8 <init_token_int_type@@Base>
   12b1c:	b	13768 <next@@Base+0x10e4>
   12b20:	ldrd	r4, [sp, #8]
   12b24:	cmp	r2, #0
   12b28:	ldr	r1, [sp, #28]
   12b2c:	ldr	r0, [sp, #88]	; 0x58
   12b30:	strd	r4, [r3]
   12b34:	bne	13908 <next@@Base+0x1284>
   12b38:	ldr	r2, [sp, #92]	; 0x5c
   12b3c:	cmp	r2, #0
   12b40:	ldrdne	r4, [sp, #48]	; 0x30
   12b44:	strdne	r4, [fp, #112]	; 0x70
   12b48:	ldr	r2, [sp, #96]	; 0x60
   12b4c:	cmp	r2, #0
   12b50:	ldrdne	r4, [sp, #56]	; 0x38
   12b54:	strdne	r4, [fp, #200]	; 0xc8
   12b58:	ldr	r2, [sp, #100]	; 0x64
   12b5c:	cmp	r2, #0
   12b60:	ldrdne	r4, [sp, #64]	; 0x40
   12b64:	strdne	r4, [fp, #208]	; 0xd0
   12b68:	cmp	sl, #0
   12b6c:	ldrdne	r4, [sp, #72]	; 0x48
   12b70:	strdne	r4, [fp, #216]	; 0xd8
   12b74:	cmp	r0, #0
   12b78:	ldrdne	r4, [sp, #80]	; 0x50
   12b7c:	strdne	r4, [fp, #224]	; 0xe0
   12b80:	cmp	r8, #0
   12b84:	ldrdne	r4, [sp, #32]
   12b88:	ldrne	r2, [pc, #1736]	; 13258 <next@@Base+0xbd4>
   12b8c:	strdne	r4, [r2]
   12b90:	ldrd	r4, [sp]
   12b94:	sub	r2, r6, #48	; 0x30
   12b98:	cmp	r2, #9
   12b9c:	strd	r4, [r3, #-8]
   12ba0:	movhi	r3, lr
   12ba4:	bhi	12c0c <next@@Base+0x588>
   12ba8:	ldr	r3, [pc, #1684]	; 13244 <next@@Base+0xbc0>
   12bac:	sub	r2, lr, #1
   12bb0:	add	r2, ip, r2
   12bb4:	ldrd	r4, [r3]
   12bb8:	add	r3, sp, #104	; 0x68
   12bbc:	add	r0, r3, r1
   12bc0:	adds	r4, r4, #1
   12bc4:	adc	r5, r5, #0
   12bc8:	mov	sl, r1
   12bcc:	add	r1, r1, #1
   12bd0:	add	r3, r1, lr
   12bd4:	sub	r3, r3, sl
   12bd8:	strb	r6, [r0], #1
   12bdc:	str	r3, [r7, #8]
   12be0:	ldrb	r6, [r2, #1]!
   12be4:	mov	r9, r4
   12be8:	adds	r4, r4, #1
   12bec:	sub	ip, r6, #48	; 0x30
   12bf0:	mov	r8, r5
   12bf4:	adc	r5, r5, #0
   12bf8:	cmp	ip, #9
   12bfc:	bls	12bcc <next@@Base+0x548>
   12c00:	ldr	r2, [pc, #1596]	; 13244 <next@@Base+0xbc0>
   12c04:	str	r9, [r2]
   12c08:	str	r8, [r2, #4]
   12c0c:	ldr	r2, [pc, #1588]	; 13248 <next@@Base+0xbc4>
   12c10:	ldrd	r4, [r2, #-8]
   12c14:	adds	r4, r4, #1
   12c18:	adc	r5, r5, #0
   12c1c:	cmp	r3, #0
   12c20:	strd	r4, [r2, #-8]
   12c24:	beq	1396c <next@@Base+0x12e8>
   12c28:	ldrd	r4, [fp, #48]	; 0x30
   12c2c:	ldrd	r8, [r2]
   12c30:	add	r0, sp, #616	; 0x268
   12c34:	adds	r4, r4, #1
   12c38:	sub	r3, r3, #1
   12c3c:	add	r0, r0, r1
   12c40:	adc	r5, r5, #0
   12c44:	adds	r8, r8, #1
   12c48:	mov	r6, r2
   12c4c:	adc	r9, r9, #0
   12c50:	str	r3, [r7, #8]
   12c54:	mov	r7, #0
   12c58:	strb	r7, [r0, #-512]	; 0xfffffe00
   12c5c:	mov	r0, #8
   12c60:	strd	r8, [r6], #16
   12c64:	strd	r4, [fp, #48]	; 0x30
   12c68:	bl	119fc <malloc@plt>
   12c6c:	mov	r1, r7
   12c70:	mov	r2, #10
   12c74:	mov	r4, r0
   12c78:	add	r0, sp, #104	; 0x68
   12c7c:	bl	11990 <strtol@plt>
   12c80:	ldrd	r2, [r6, #-8]
   12c84:	adds	r2, r2, #1
   12c88:	adc	r3, r3, #0
   12c8c:	strd	r2, [r6, #-8]
   12c90:	mov	r1, r0
   12c94:	mov	r0, r4
   12c98:	bl	1210c <init_token_int_value@@Base>
   12c9c:	ldrd	r2, [r6]
   12ca0:	mov	r0, r4
   12ca4:	adds	r2, r2, #1
   12ca8:	adc	r3, r3, #0
   12cac:	strd	r2, [r6]
   12cb0:	b	126c8 <next@@Base+0x44>
   12cb4:	cmp	r6, #32
   12cb8:	cmpne	r6, #9
   12cbc:	beq	12d38 <next@@Base+0x6b4>
   12cc0:	ldrd	r0, [sp, #40]	; 0x28
   12cc4:	adds	r0, r0, #1
   12cc8:	adc	r1, r1, #0
   12ccc:	cmp	r6, #10
   12cd0:	strd	r0, [sp, #40]	; 0x28
   12cd4:	beq	12d34 <next@@Base+0x6b0>
   12cd8:	cmp	r6, #48	; 0x30
   12cdc:	beq	13080 <next@@Base+0x9fc>
   12ce0:	sub	r2, r6, #49	; 0x31
   12ce4:	cmp	r2, #8
   12ce8:	bhi	12e60 <next@@Base+0x7dc>
   12cec:	ldrd	r0, [sp, #48]	; 0x30
   12cf0:	ldr	r4, [sp, #28]
   12cf4:	add	r2, sp, #616	; 0x268
   12cf8:	adds	r0, r0, #1
   12cfc:	adc	r1, r1, #0
   12d00:	add	r9, r2, r4
   12d04:	mov	r8, lr
   12d08:	mov	r2, #1
   12d0c:	add	lr, lr, #1
   12d10:	strd	r0, [sp, #48]	; 0x30
   12d14:	add	r1, r4, r2
   12d18:	strb	r6, [r9, #-512]	; 0xfffffe00
   12d1c:	str	lr, [r7, #8]
   12d20:	str	r1, [sp, #28]
   12d24:	ldrb	r6, [ip, r8]
   12d28:	mov	r9, r2
   12d2c:	str	r2, [sp, #92]	; 0x5c
   12d30:	b	12d4c <next@@Base+0x6c8>
   12d34:	mov	r2, #1
   12d38:	mov	r6, lr
   12d3c:	add	lr, lr, #1
   12d40:	str	lr, [r7, #8]
   12d44:	ldrb	r6, [ip, r6]
   12d48:	mov	r9, #0
   12d4c:	mov	r8, #1
   12d50:	b	12770 <next@@Base+0xec>
   12d54:	ldrd	r4, [sp, #8]
   12d58:	cmp	r2, #0
   12d5c:	ldr	r1, [sp, #28]
   12d60:	ldr	r0, [sp, #88]	; 0x58
   12d64:	strd	r4, [r3]
   12d68:	bne	13150 <next@@Base+0xacc>
   12d6c:	ldr	r2, [sp, #92]	; 0x5c
   12d70:	cmp	r2, #0
   12d74:	ldrdne	r4, [sp, #48]	; 0x30
   12d78:	strdne	r4, [fp, #112]	; 0x70
   12d7c:	ldr	r2, [sp, #96]	; 0x60
   12d80:	cmp	r2, #0
   12d84:	ldrdne	r4, [sp, #56]	; 0x38
   12d88:	strdne	r4, [fp, #200]	; 0xc8
   12d8c:	ldr	r2, [sp, #100]	; 0x64
   12d90:	cmp	r2, #0
   12d94:	ldrdne	r4, [sp, #64]	; 0x40
   12d98:	strdne	r4, [fp, #208]	; 0xd0
   12d9c:	cmp	sl, #0
   12da0:	ldrdne	r4, [sp, #72]	; 0x48
   12da4:	strdne	r4, [fp, #216]	; 0xd8
   12da8:	cmp	r0, #0
   12dac:	ldrdne	r4, [sp, #80]	; 0x50
   12db0:	strdne	r4, [fp, #224]	; 0xe0
   12db4:	cmp	r8, #0
   12db8:	ldrdne	r4, [sp, #32]
   12dbc:	ldrne	r2, [pc, #1172]	; 13258 <next@@Base+0xbd4>
   12dc0:	strdne	r4, [r2]
   12dc4:	ldrd	r4, [sp]
   12dc8:	cmp	r6, #108	; 0x6c
   12dcc:	strd	r4, [r3, #-8]
   12dd0:	ldrne	r1, [pc, #1140]	; 1324c <next@@Base+0xbc8>
   12dd4:	bne	13138 <next@@Base+0xab4>
   12dd8:	add	r3, sp, #616	; 0x268
   12ddc:	add	r3, r3, r1
   12de0:	add	r2, lr, #1
   12de4:	strb	r6, [r3, #-512]	; 0xfffffe00
   12de8:	str	r2, [r7, #8]
   12dec:	ldrb	r0, [ip, lr]
   12df0:	add	r3, r1, #1
   12df4:	cmp	r0, #115	; 0x73
   12df8:	bne	1315c <next@@Base+0xad8>
   12dfc:	add	r1, sp, #616	; 0x268
   12e00:	add	r3, r1, r3
   12e04:	add	lr, lr, #2
   12e08:	strb	r0, [r3, #-512]	; 0xfffffe00
   12e0c:	str	lr, [r7, #8]
   12e10:	ldrb	r3, [ip, r2]
   12e14:	ldr	r1, [pc, #1076]	; 13250 <next@@Base+0xbcc>
   12e18:	cmp	r3, #101	; 0x65
   12e1c:	bne	13138 <next@@Base+0xab4>
   12e20:	ldrd	r2, [r1]
   12e24:	mov	r0, #4
   12e28:	adds	r2, r2, #1
   12e2c:	adc	r3, r3, #0
   12e30:	strd	r2, [r1]
   12e34:	bl	119fc <malloc@plt>
   12e38:	mov	r5, r0
   12e3c:	bl	12284 <init_token_else@@Base>
   12e40:	ldr	r3, [pc, #1040]	; 13258 <next@@Base+0xbd4>
   12e44:	ldr	r1, [pc, #1036]	; 13258 <next@@Base+0xbd4>
   12e48:	mov	r0, r5
   12e4c:	ldrd	r2, [r3, #-8]
   12e50:	adds	r2, r2, #1
   12e54:	adc	r3, r3, #0
   12e58:	strd	r2, [r1, #-8]
   12e5c:	b	126c8 <next@@Base+0x44>
   12e60:	cmp	r6, #40	; 0x28
   12e64:	beq	133e4 <next@@Base+0xd60>
   12e68:	cmp	r6, #41	; 0x29
   12e6c:	beq	13338 <next@@Base+0xcb4>
   12e70:	cmp	r6, #123	; 0x7b
   12e74:	beq	1328c <next@@Base+0xc08>
   12e78:	cmp	r6, #125	; 0x7d
   12e7c:	beq	13178 <next@@Base+0xaf4>
   12e80:	cmp	r6, #59	; 0x3b
   12e84:	beq	13490 <next@@Base+0xe0c>
   12e88:	cmp	r6, #101	; 0x65
   12e8c:	beq	12fa4 <next@@Base+0x920>
   12e90:	cmp	r6, #105	; 0x69
   12e94:	beq	12ff0 <next@@Base+0x96c>
   12e98:	cmp	r6, #109	; 0x6d
   12e9c:	beq	13038 <next@@Base+0x9b4>
   12ea0:	cmp	r6, #114	; 0x72
   12ea4:	bne	1353c <next@@Base+0xeb8>
   12ea8:	ldrd	r4, [sp, #80]	; 0x50
   12eac:	ldr	r8, [sp, #28]
   12eb0:	add	r1, sp, #616	; 0x268
   12eb4:	mov	r2, lr
   12eb8:	add	r0, r1, r8
   12ebc:	adds	r4, r4, #1
   12ec0:	add	lr, lr, #1
   12ec4:	adc	r5, r5, #0
   12ec8:	str	lr, [r7, #8]
   12ecc:	strb	r6, [r0, #-512]	; 0xfffffe00
   12ed0:	add	r1, r8, #1
   12ed4:	ldrb	r6, [ip, r2]
   12ed8:	mov	r2, #1
   12edc:	strd	r4, [sp, #80]	; 0x50
   12ee0:	str	r1, [sp, #28]
   12ee4:	str	r2, [sp, #88]	; 0x58
   12ee8:	mov	r9, #4
   12eec:	b	12d4c <next@@Base+0x6c8>
   12ef0:	cmp	r8, #0
   12ef4:	ldr	r0, [sp, #88]	; 0x58
   12ef8:	bne	13128 <next@@Base+0xaa4>
   12efc:	cmp	r2, #0
   12f00:	ldrdne	r4, [sp, #40]	; 0x28
   12f04:	strdne	r4, [fp, #96]	; 0x60
   12f08:	ldr	r2, [sp, #92]	; 0x5c
   12f0c:	cmp	r2, #0
   12f10:	ldrdne	r4, [sp, #48]	; 0x30
   12f14:	strdne	r4, [fp, #112]	; 0x70
   12f18:	ldr	r2, [sp, #96]	; 0x60
   12f1c:	cmp	r2, #0
   12f20:	ldrdne	r4, [sp, #56]	; 0x38
   12f24:	strdne	r4, [fp, #200]	; 0xc8
   12f28:	ldr	r2, [sp, #100]	; 0x64
   12f2c:	cmp	r2, #0
   12f30:	ldrdne	r4, [sp, #64]	; 0x40
   12f34:	strdne	r4, [fp, #208]	; 0xd0
   12f38:	cmp	sl, #0
   12f3c:	ldrdne	r4, [sp, #72]	; 0x48
   12f40:	strdne	r4, [fp, #216]	; 0xd8
   12f44:	cmp	r0, #0
   12f48:	ldrdne	r0, [sp, #80]	; 0x50
   12f4c:	strdne	r0, [fp, #224]	; 0xe0
   12f50:	cmp	r8, #0
   12f54:	ldrdne	r0, [sp, #32]
   12f58:	ldrne	r2, [pc, #760]	; 13258 <next@@Base+0xbd4>
   12f5c:	strdne	r0, [r2]
   12f60:	ldr	r4, [pc, #748]	; 13254 <next@@Base+0xbd0>
   12f64:	ldrd	r6, [sp]
   12f68:	mov	r0, #4
   12f6c:	strd	r6, [r3, #-8]
   12f70:	ldrd	r2, [r4, #-8]
   12f74:	adds	r2, r2, #1
   12f78:	adc	r3, r3, #0
   12f7c:	strd	r2, [r4, #-8]
   12f80:	bl	119fc <malloc@plt>
   12f84:	mov	r5, r0
   12f88:	bl	1223c <init_token_eof@@Base>
   12f8c:	ldrd	r2, [r4]
   12f90:	mov	r0, r5
   12f94:	adds	r2, r2, #1
   12f98:	adc	r3, r3, #0
   12f9c:	strd	r2, [r4]
   12fa0:	b	126c8 <next@@Base+0x44>
   12fa4:	ldr	r4, [sp, #28]
   12fa8:	add	r1, sp, #616	; 0x268
   12fac:	add	r6, r1, r4
   12fb0:	ldrd	r0, [sp, #56]	; 0x38
   12fb4:	mov	r2, lr
   12fb8:	add	lr, lr, #1
   12fbc:	adds	r0, r0, #1
   12fc0:	adc	r1, r1, #0
   12fc4:	str	lr, [r7, #8]
   12fc8:	strd	r0, [sp, #56]	; 0x38
   12fcc:	mov	r1, #101	; 0x65
   12fd0:	strb	r1, [r6, #-512]	; 0xfffffe00
   12fd4:	add	r1, r4, #1
   12fd8:	ldrb	r6, [ip, r2]
   12fdc:	mov	r2, #1
   12fe0:	str	r1, [sp, #28]
   12fe4:	str	r2, [sp, #96]	; 0x60
   12fe8:	mov	r9, #5
   12fec:	b	12d4c <next@@Base+0x6c8>
   12ff0:	ldr	r4, [sp, #28]
   12ff4:	add	r1, sp, #616	; 0x268
   12ff8:	add	r8, r1, r4
   12ffc:	ldrd	r0, [sp, #64]	; 0x40
   13000:	mov	r2, lr
   13004:	add	lr, lr, #1
   13008:	adds	r0, r0, #1
   1300c:	adc	r1, r1, #0
   13010:	str	lr, [r7, #8]
   13014:	strd	r0, [sp, #64]	; 0x40
   13018:	strb	r6, [r8, #-512]	; 0xfffffe00
   1301c:	add	r1, r4, #1
   13020:	ldrb	r6, [ip, r2]
   13024:	mov	r2, #1
   13028:	str	r1, [sp, #28]
   1302c:	str	r2, [sp, #100]	; 0x64
   13030:	mov	r9, #2
   13034:	b	12d4c <next@@Base+0x6c8>
   13038:	ldr	r4, [sp, #28]
   1303c:	add	r1, sp, #616	; 0x268
   13040:	add	r8, r1, r4
   13044:	ldrd	r0, [sp, #72]	; 0x48
   13048:	mov	r2, lr
   1304c:	mov	sl, #1
   13050:	adds	r0, r0, #1
   13054:	adc	r1, r1, #0
   13058:	add	lr, lr, #1
   1305c:	strd	r0, [sp, #72]	; 0x48
   13060:	add	r1, r4, #1
   13064:	str	lr, [r7, #8]
   13068:	strb	r6, [r8, #-512]	; 0xfffffe00
   1306c:	str	r1, [sp, #28]
   13070:	ldrb	r6, [ip, r2]
   13074:	mov	r9, #3
   13078:	mov	r2, sl
   1307c:	b	12d4c <next@@Base+0x6c8>
   13080:	ldrd	r4, [sp, #8]
   13084:	ldr	r2, [sp, #92]	; 0x5c
   13088:	ldr	r0, [sp, #88]	; 0x58
   1308c:	strd	r4, [r3]
   13090:	ldrd	r4, [sp, #40]	; 0x28
   13094:	cmp	r2, #0
   13098:	strd	r4, [fp, #96]	; 0x60
   1309c:	bne	1311c <next@@Base+0xa98>
   130a0:	ldr	r2, [sp, #96]	; 0x60
   130a4:	cmp	r2, #0
   130a8:	ldrdne	r4, [sp, #56]	; 0x38
   130ac:	strdne	r4, [fp, #200]	; 0xc8
   130b0:	ldr	r2, [sp, #100]	; 0x64
   130b4:	cmp	r2, #0
   130b8:	ldrdne	r4, [sp, #64]	; 0x40
   130bc:	strdne	r4, [fp, #208]	; 0xd0
   130c0:	cmp	sl, #0
   130c4:	ldrdne	r4, [sp, #72]	; 0x48
   130c8:	strdne	r4, [fp, #216]	; 0xd8
   130cc:	cmp	r0, #0
   130d0:	ldrdne	r0, [sp, #80]	; 0x50
   130d4:	strdne	r0, [fp, #224]	; 0xe0
   130d8:	cmp	r8, #0
   130dc:	ldrdne	r0, [sp, #32]
   130e0:	ldrne	r2, [pc, #368]	; 13258 <next@@Base+0xbd4>
   130e4:	strdne	r0, [r2]
   130e8:	ldrd	r4, [sp]
   130ec:	mov	r0, #8
   130f0:	strd	r4, [r3, #-8]
   130f4:	bl	119fc <malloc@plt>
   130f8:	mov	r1, #0
   130fc:	mov	r4, r0
   13100:	bl	1210c <init_token_int_value@@Base>
   13104:	ldrd	r2, [fp, #104]	; 0x68
   13108:	mov	r0, r4
   1310c:	adds	r2, r2, #1
   13110:	adc	r3, r3, #0
   13114:	strd	r2, [fp, #104]	; 0x68
   13118:	b	126c8 <next@@Base+0x44>
   1311c:	ldrd	r4, [sp, #48]	; 0x30
   13120:	strd	r4, [fp, #112]	; 0x70
   13124:	b	130a0 <next@@Base+0xa1c>
   13128:	ldrd	r4, [sp, #8]
   1312c:	strd	r4, [r3]
   13130:	b	12efc <next@@Base+0x878>
   13134:	ldr	r1, [pc, #260]	; 13240 <next@@Base+0xbbc>
   13138:	ldrd	r2, [r1, #-8]
   1313c:	mov	r0, #1
   13140:	adds	r2, r2, #1
   13144:	adc	r3, r3, #0
   13148:	strd	r2, [r1, #-8]
   1314c:	bl	11a44 <exit@plt>
   13150:	ldrd	r4, [sp, #40]	; 0x28
   13154:	strd	r4, [fp, #96]	; 0x60
   13158:	b	12d6c <next@@Base+0x6e8>
   1315c:	ldr	r1, [pc, #232]	; 1324c <next@@Base+0xbc8>
   13160:	ldrd	r2, [r1]
   13164:	mov	r0, #1
   13168:	adds	r2, r2, #1
   1316c:	adc	r3, r3, #0
   13170:	strd	r2, [r1]
   13174:	bl	11a44 <exit@plt>
   13178:	ldrd	r4, [sp, #8]
   1317c:	ldr	r2, [sp, #92]	; 0x5c
   13180:	ldr	r0, [sp, #88]	; 0x58
   13184:	strd	r4, [r3]
   13188:	ldrd	r4, [sp, #40]	; 0x28
   1318c:	cmp	r2, #0
   13190:	strd	r4, [fp, #96]	; 0x60
   13194:	ldrdne	r4, [sp, #48]	; 0x30
   13198:	strdne	r4, [fp, #112]	; 0x70
   1319c:	ldr	r2, [sp, #96]	; 0x60
   131a0:	cmp	r2, #0
   131a4:	ldrdne	r4, [sp, #56]	; 0x38
   131a8:	strdne	r4, [fp, #200]	; 0xc8
   131ac:	ldr	r2, [sp, #100]	; 0x64
   131b0:	cmp	r2, #0
   131b4:	ldrdne	r4, [sp, #64]	; 0x40
   131b8:	strdne	r4, [fp, #208]	; 0xd0
   131bc:	cmp	sl, #0
   131c0:	ldrdne	r4, [sp, #72]	; 0x48
   131c4:	strdne	r4, [fp, #216]	; 0xd8
   131c8:	cmp	r0, #0
   131cc:	ldrdne	r0, [sp, #80]	; 0x50
   131d0:	strdne	r0, [fp, #224]	; 0xe0
   131d4:	cmp	r8, #0
   131d8:	ldrdne	r0, [sp, #32]
   131dc:	ldrne	r2, [pc, #116]	; 13258 <next@@Base+0xbd4>
   131e0:	strdne	r0, [r2]
   131e4:	ldrd	r4, [fp, #168]	; 0xa8
   131e8:	ldrd	r6, [sp]
   131ec:	mov	r0, #4
   131f0:	adds	r4, r4, #1
   131f4:	adc	r5, r5, #0
   131f8:	strd	r6, [r3, #-8]
   131fc:	strd	r4, [fp, #168]	; 0xa8
   13200:	bl	119fc <malloc@plt>
   13204:	mov	r4, r0
   13208:	bl	121d0 <init_token_cbra@@Base>
   1320c:	ldrd	r2, [fp, #176]	; 0xb0
   13210:	mov	r0, r4
   13214:	adds	r2, r2, #1
   13218:	adc	r3, r3, #0
   1321c:	strd	r2, [fp, #176]	; 0xb0
   13220:	b	126c8 <next@@Base+0x44>
   13224:	andeq	sl, r2, r0, lsr #25
   13228:	andeq	sl, r2, r0, lsr #29
   1322c:			; <UNDEFINED> instruction: 0x0002aeb0
   13230:	andeq	sl, r2, r0, asr #29
   13234:	ldrdeq	sl, [r2], -r0
   13238:	andeq	sl, r2, r0, lsl #29
   1323c:	muleq	r2, r0, lr
   13240:	andeq	sl, r2, r0, ror #28
   13244:	andeq	sl, r2, r0, lsr #28
   13248:	andeq	sl, r2, r0, lsr lr
   1324c:	andeq	sl, r2, r0, ror #29
   13250:	strdeq	sl, [r2], -r0
   13254:	andeq	sl, r2, r0, lsr #30
   13258:	andeq	sl, r2, r0, lsl #30
   1325c:	andeq	sl, r2, r0, lsl lr
   13260:	andeq	sl, r2, r0, lsl #28
   13264:	andeq	r9, r1, ip, lsl r5
   13268:	andeq	sl, r2, r0, ror #27
   1326c:	strdeq	sl, [r2], -r0
   13270:	ldrdeq	sl, [r2], -r0
   13274:			; <UNDEFINED> instruction: 0x0002adb0
   13278:	andeq	sl, r2, r0, lsr #27
   1327c:	andeq	sl, r2, r0, asr #27
   13280:	andeq	sl, r2, r0, asr lr
   13284:			; <UNDEFINED> instruction: 0x0002aab8
   13288:	strdeq	r9, [r1], -r8
   1328c:	ldrd	r4, [sp, #8]
   13290:	ldr	r2, [sp, #92]	; 0x5c
   13294:	ldr	r0, [sp, #88]	; 0x58
   13298:	strd	r4, [r3]
   1329c:	ldrd	r4, [sp, #40]	; 0x28
   132a0:	cmp	r2, #0
   132a4:	strd	r4, [fp, #96]	; 0x60
   132a8:	ldrdne	r4, [sp, #48]	; 0x30
   132ac:	strdne	r4, [fp, #112]	; 0x70
   132b0:	ldr	r2, [sp, #96]	; 0x60
   132b4:	cmp	r2, #0
   132b8:	ldrdne	r4, [sp, #56]	; 0x38
   132bc:	strdne	r4, [fp, #200]	; 0xc8
   132c0:	ldr	r2, [sp, #100]	; 0x64
   132c4:	cmp	r2, #0
   132c8:	ldrdne	r4, [sp, #64]	; 0x40
   132cc:	strdne	r4, [fp, #208]	; 0xd0
   132d0:	cmp	sl, #0
   132d4:	ldrdne	r4, [sp, #72]	; 0x48
   132d8:	strdne	r4, [fp, #216]	; 0xd8
   132dc:	cmp	r0, #0
   132e0:	ldrdne	r0, [sp, #80]	; 0x50
   132e4:	strdne	r0, [fp, #224]	; 0xe0
   132e8:	cmp	r8, #0
   132ec:	ldrdne	r0, [sp, #32]
   132f0:	ldrne	r2, [pc, #-160]	; 13258 <next@@Base+0xbd4>
   132f4:	strdne	r0, [r2]
   132f8:	ldrd	r4, [fp, #152]	; 0x98
   132fc:	ldrd	r6, [sp]
   13300:	mov	r0, #4
   13304:	adds	r4, r4, #1
   13308:	adc	r5, r5, #0
   1330c:	strd	r6, [r3, #-8]
   13310:	strd	r4, [fp, #152]	; 0x98
   13314:	bl	119fc <malloc@plt>
   13318:	mov	r4, r0
   1331c:	bl	121ac <init_token_obra@@Base>
   13320:	ldrd	r2, [fp, #160]	; 0xa0
   13324:	mov	r0, r4
   13328:	adds	r2, r2, #1
   1332c:	adc	r3, r3, #0
   13330:	strd	r2, [fp, #160]	; 0xa0
   13334:	b	126c8 <next@@Base+0x44>
   13338:	ldrd	r4, [sp, #8]
   1333c:	ldr	r2, [sp, #92]	; 0x5c
   13340:	ldr	r0, [sp, #88]	; 0x58
   13344:	strd	r4, [r3]
   13348:	ldrd	r4, [sp, #40]	; 0x28
   1334c:	cmp	r2, #0
   13350:	strd	r4, [fp, #96]	; 0x60
   13354:	ldrdne	r4, [sp, #48]	; 0x30
   13358:	strdne	r4, [fp, #112]	; 0x70
   1335c:	ldr	r2, [sp, #96]	; 0x60
   13360:	cmp	r2, #0
   13364:	ldrdne	r4, [sp, #56]	; 0x38
   13368:	strdne	r4, [fp, #200]	; 0xc8
   1336c:	ldr	r2, [sp, #100]	; 0x64
   13370:	cmp	r2, #0
   13374:	ldrdne	r4, [sp, #64]	; 0x40
   13378:	strdne	r4, [fp, #208]	; 0xd0
   1337c:	cmp	sl, #0
   13380:	ldrdne	r4, [sp, #72]	; 0x48
   13384:	strdne	r4, [fp, #216]	; 0xd8
   13388:	cmp	r0, #0
   1338c:	ldrdne	r0, [sp, #80]	; 0x50
   13390:	strdne	r0, [fp, #224]	; 0xe0
   13394:	cmp	r8, #0
   13398:	ldrdne	r0, [sp, #32]
   1339c:	ldrne	r2, [pc, #-332]	; 13258 <next@@Base+0xbd4>
   133a0:	strdne	r0, [r2]
   133a4:	ldrd	r4, [fp, #136]	; 0x88
   133a8:	ldrd	r6, [sp]
   133ac:	mov	r0, #4
   133b0:	adds	r4, r4, #1
   133b4:	adc	r5, r5, #0
   133b8:	strd	r6, [r3, #-8]
   133bc:	strd	r4, [fp, #136]	; 0x88
   133c0:	bl	119fc <malloc@plt>
   133c4:	mov	r4, r0
   133c8:	bl	12188 <init_token_cpar@@Base>
   133cc:	ldrd	r2, [fp, #144]	; 0x90
   133d0:	mov	r0, r4
   133d4:	adds	r2, r2, #1
   133d8:	adc	r3, r3, #0
   133dc:	strd	r2, [fp, #144]	; 0x90
   133e0:	b	126c8 <next@@Base+0x44>
   133e4:	ldrd	r4, [sp, #8]
   133e8:	ldr	r2, [sp, #92]	; 0x5c
   133ec:	ldr	r0, [sp, #88]	; 0x58
   133f0:	strd	r4, [r3]
   133f4:	ldrd	r4, [sp, #40]	; 0x28
   133f8:	cmp	r2, #0
   133fc:	strd	r4, [fp, #96]	; 0x60
   13400:	ldrdne	r4, [sp, #48]	; 0x30
   13404:	strdne	r4, [fp, #112]	; 0x70
   13408:	ldr	r2, [sp, #96]	; 0x60
   1340c:	cmp	r2, #0
   13410:	ldrdne	r4, [sp, #56]	; 0x38
   13414:	strdne	r4, [fp, #200]	; 0xc8
   13418:	ldr	r2, [sp, #100]	; 0x64
   1341c:	cmp	r2, #0
   13420:	ldrdne	r4, [sp, #64]	; 0x40
   13424:	strdne	r4, [fp, #208]	; 0xd0
   13428:	cmp	sl, #0
   1342c:	ldrdne	r4, [sp, #72]	; 0x48
   13430:	strdne	r4, [fp, #216]	; 0xd8
   13434:	cmp	r0, #0
   13438:	ldrdne	r0, [sp, #80]	; 0x50
   1343c:	strdne	r0, [fp, #224]	; 0xe0
   13440:	cmp	r8, #0
   13444:	ldrdne	r0, [sp, #32]
   13448:	ldrne	r2, [pc, #-504]	; 13258 <next@@Base+0xbd4>
   1344c:	strdne	r0, [r2]
   13450:	ldrd	r4, [fp, #120]	; 0x78
   13454:	ldrd	r6, [sp]
   13458:	mov	r0, #4
   1345c:	adds	r4, r4, #1
   13460:	adc	r5, r5, #0
   13464:	strd	r6, [r3, #-8]
   13468:	strd	r4, [fp, #120]	; 0x78
   1346c:	bl	119fc <malloc@plt>
   13470:	mov	r4, r0
   13474:	bl	12164 <init_token_opar@@Base>
   13478:	ldrd	r2, [fp, #128]	; 0x80
   1347c:	mov	r0, r4
   13480:	adds	r2, r2, #1
   13484:	adc	r3, r3, #0
   13488:	strd	r2, [fp, #128]	; 0x80
   1348c:	b	126c8 <next@@Base+0x44>
   13490:	ldrd	r4, [sp, #8]
   13494:	ldr	r2, [sp, #92]	; 0x5c
   13498:	ldr	r0, [sp, #88]	; 0x58
   1349c:	strd	r4, [r3]
   134a0:	ldrd	r4, [sp, #40]	; 0x28
   134a4:	cmp	r2, #0
   134a8:	strd	r4, [fp, #96]	; 0x60
   134ac:	ldrdne	r4, [sp, #48]	; 0x30
   134b0:	strdne	r4, [fp, #112]	; 0x70
   134b4:	ldr	r2, [sp, #96]	; 0x60
   134b8:	cmp	r2, #0
   134bc:	ldrdne	r4, [sp, #56]	; 0x38
   134c0:	strdne	r4, [fp, #200]	; 0xc8
   134c4:	ldr	r2, [sp, #100]	; 0x64
   134c8:	cmp	r2, #0
   134cc:	ldrdne	r4, [sp, #64]	; 0x40
   134d0:	strdne	r4, [fp, #208]	; 0xd0
   134d4:	cmp	sl, #0
   134d8:	ldrdne	r4, [sp, #72]	; 0x48
   134dc:	strdne	r4, [fp, #216]	; 0xd8
   134e0:	cmp	r0, #0
   134e4:	ldrdne	r0, [sp, #80]	; 0x50
   134e8:	strdne	r0, [fp, #224]	; 0xe0
   134ec:	cmp	r8, #0
   134f0:	ldrdne	r0, [sp, #32]
   134f4:	ldrne	r2, [pc, #-676]	; 13258 <next@@Base+0xbd4>
   134f8:	strdne	r0, [r2]
   134fc:	ldrd	r4, [fp, #184]	; 0xb8
   13500:	ldrd	r6, [sp]
   13504:	mov	r0, #4
   13508:	adds	r4, r4, #1
   1350c:	adc	r5, r5, #0
   13510:	strd	r6, [r3, #-8]
   13514:	strd	r4, [fp, #184]	; 0xb8
   13518:	bl	119fc <malloc@plt>
   1351c:	mov	r4, r0
   13520:	bl	12218 <init_token_semicolon@@Base>
   13524:	ldrd	r2, [fp, #192]	; 0xc0
   13528:	mov	r0, r4
   1352c:	adds	r2, r2, #1
   13530:	adc	r3, r3, #0
   13534:	strd	r2, [fp, #192]	; 0xc0
   13538:	b	126c8 <next@@Base+0x44>
   1353c:	ldrd	r4, [sp, #8]
   13540:	ldr	r2, [sp, #92]	; 0x5c
   13544:	ldr	r1, [sp, #28]
   13548:	strd	r4, [r3]
   1354c:	ldrd	r4, [sp, #40]	; 0x28
   13550:	cmp	r2, #0
   13554:	ldr	r0, [sp, #88]	; 0x58
   13558:	strd	r4, [fp, #96]	; 0x60
   1355c:	ldrdne	r4, [sp, #48]	; 0x30
   13560:	strdne	r4, [fp, #112]	; 0x70
   13564:	ldr	r2, [sp, #96]	; 0x60
   13568:	cmp	r2, #0
   1356c:	ldrdne	r4, [sp, #56]	; 0x38
   13570:	strdne	r4, [fp, #200]	; 0xc8
   13574:	ldr	r2, [sp, #100]	; 0x64
   13578:	cmp	r2, #0
   1357c:	ldrdne	r4, [sp, #64]	; 0x40
   13580:	strdne	r4, [fp, #208]	; 0xd0
   13584:	cmp	sl, #0
   13588:	ldrdne	r4, [sp, #72]	; 0x48
   1358c:	strdne	r4, [fp, #216]	; 0xd8
   13590:	cmp	r0, #0
   13594:	ldrdne	r4, [sp, #80]	; 0x50
   13598:	strdne	r4, [fp, #224]	; 0xe0
   1359c:	cmp	r8, #0
   135a0:	ldrdne	r4, [sp, #32]
   135a4:	ldrne	r2, [pc, #-852]	; 13258 <next@@Base+0xbd4>
   135a8:	strdne	r4, [r2]
   135ac:	ldrd	r4, [sp]
   135b0:	cmp	r6, #33	; 0x21
   135b4:	strd	r4, [r3, #-8]
   135b8:	beq	1380c <next@@Base+0x1188>
   135bc:	and	r3, r6, #253	; 0xfd
   135c0:	cmp	r3, #60	; 0x3c
   135c4:	beq	13784 <next@@Base+0x1100>
   135c8:	cmp	r6, #61	; 0x3d
   135cc:	beq	136f4 <next@@Base+0x1070>
   135d0:	cmp	r6, #124	; 0x7c
   135d4:	beq	136bc <next@@Base+0x1038>
   135d8:	cmp	r6, #38	; 0x26
   135dc:	bne	13678 <next@@Base+0xff4>
   135e0:	add	r3, sp, #616	; 0x268
   135e4:	add	r1, r3, r1
   135e8:	add	r3, lr, #1
   135ec:	str	r3, [r7, #8]
   135f0:	mov	r0, #8
   135f4:	strb	r6, [r1, #-512]	; 0xfffffe00
   135f8:	ldrb	r4, [ip, lr]
   135fc:	bl	119fc <malloc@plt>
   13600:	cmp	r4, #38	; 0x26
   13604:	ldrne	r1, [pc, #-940]	; 13260 <next@@Base+0xbdc>
   13608:	mov	r5, r0
   1360c:	bne	13160 <next@@Base+0xadc>
   13610:	ldr	r4, [pc, #-956]	; 1325c <next@@Base+0xbd8>
   13614:	ldrd	r2, [r4, #-8]
   13618:	mov	r0, #3
   1361c:	adds	r2, r2, #1
   13620:	adc	r3, r3, #0
   13624:	strd	r2, [r4, #-8]
   13628:	bl	119fc <malloc@plt>
   1362c:	ldrb	ip, [sp, #104]	; 0x68
   13630:	mov	r2, #0
   13634:	mov	r3, r0
   13638:	mov	r1, r0
   1363c:	strb	r6, [r3, #1]
   13640:	mov	r0, r5
   13644:	strb	ip, [r3]
   13648:	strb	r2, [r3, #2]
   1364c:	bl	122a8 <init_token_boolean_op@@Base>
   13650:	b	12f8c <next@@Base+0x908>
   13654:	ldrd	r4, [sp, #40]	; 0x28
   13658:	strd	r4, [fp, #96]	; 0x60
   1365c:	b	12928 <next@@Base+0x2a4>
   13660:	ldrd	r4, [sp, #40]	; 0x28
   13664:	strd	r4, [fp, #96]	; 0x60
   13668:	b	127e4 <next@@Base+0x160>
   1366c:	ldrd	r4, [sp, #48]	; 0x30
   13670:	strd	r4, [fp, #112]	; 0x70
   13674:	b	127f0 <next@@Base+0x16c>
   13678:	ldr	r4, [pc, #-1056]	; 13260 <next@@Base+0xbdc>
   1367c:	mov	r2, r6
   13680:	ldr	r3, [pc, #-1028]	; 13284 <next@@Base+0xc00>
   13684:	ldrd	r6, [r4, #-8]
   13688:	add	r4, r4, #32
   1368c:	ldr	r0, [r3]
   13690:	adds	r6, r6, #1
   13694:	adc	r7, r7, #0
   13698:	ldr	r1, [pc, #-1084]	; 13264 <next@@Base+0xbe0>
   1369c:	strd	r6, [r4, #-40]	; 0xffffffd8
   136a0:	bl	11a68 <fprintf@plt>
   136a4:	ldrd	r2, [r4, #-8]
   136a8:	mov	r0, #1
   136ac:	adds	r2, r2, #1
   136b0:	adc	r3, r3, #0
   136b4:	strd	r2, [r4, #-8]
   136b8:	bl	11a44 <exit@plt>
   136bc:	add	r3, sp, #616	; 0x268
   136c0:	add	r1, r3, r1
   136c4:	add	r3, lr, #1
   136c8:	str	r3, [r7, #8]
   136cc:	mov	r0, #8
   136d0:	strb	r6, [r1, #-512]	; 0xfffffe00
   136d4:	ldrb	r4, [ip, lr]
   136d8:	bl	119fc <malloc@plt>
   136dc:	cmp	r4, #124	; 0x7c
   136e0:	ldrne	r1, [pc, #-1152]	; 13268 <next@@Base+0xbe4>
   136e4:	mov	r5, r0
   136e8:	bne	13160 <next@@Base+0xadc>
   136ec:	ldr	r4, [pc, #-1160]	; 1326c <next@@Base+0xbe8>
   136f0:	b	13614 <next@@Base+0xf90>
   136f4:	add	r3, sp, #616	; 0x268
   136f8:	add	r1, r3, r1
   136fc:	add	r3, lr, #1
   13700:	str	r3, [r7, #8]
   13704:	mov	r0, #8
   13708:	strb	r6, [r1, #-512]	; 0xfffffe00
   1370c:	ldrb	r4, [ip, lr]
   13710:	bl	119fc <malloc@plt>
   13714:	cmp	r4, #61	; 0x3d
   13718:	ldrne	r1, [pc, #-1200]	; 13270 <next@@Base+0xbec>
   1371c:	mov	r5, r0
   13720:	bne	13138 <next@@Base+0xab4>
   13724:	ldr	r3, [pc, #-1212]	; 13270 <next@@Base+0xbec>
   13728:	mov	r0, #3
   1372c:	mov	r4, r3
   13730:	ldrd	r2, [r3]
   13734:	adds	r2, r2, #1
   13738:	adc	r3, r3, #0
   1373c:	strd	r2, [r4], #16
   13740:	bl	119fc <malloc@plt>
   13744:	ldrb	ip, [sp, #104]	; 0x68
   13748:	mov	r2, #0
   1374c:	mov	r3, r0
   13750:	mov	r1, r0
   13754:	strb	r6, [r3, #1]
   13758:	mov	r0, r5
   1375c:	strb	ip, [r3]
   13760:	strb	r2, [r3, #2]
   13764:	bl	122a8 <init_token_boolean_op@@Base>
   13768:	ldrd	r2, [r4, #-8]
   1376c:	mov	r0, r5
   13770:	adds	r2, r2, #1
   13774:	adc	r3, r3, #0
   13778:	strd	r2, [r4, #-8]
   1377c:	add	sp, sp, #620	; 0x26c
   13780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13784:	add	r3, sp, #616	; 0x268
   13788:	add	r1, r3, r1
   1378c:	add	r3, lr, #1
   13790:	str	r3, [r7, #8]
   13794:	mov	r0, #8
   13798:	strb	r6, [r1, #-512]	; 0xfffffe00
   1379c:	ldrb	r6, [ip, lr]
   137a0:	bl	119fc <malloc@plt>
   137a4:	cmp	r6, #61	; 0x3d
   137a8:	mov	r5, r0
   137ac:	beq	138a4 <next@@Base+0x1220>
   137b0:	ldr	r6, [pc, #-1348]	; 13274 <next@@Base+0xbf0>
   137b4:	mov	r1, #1
   137b8:	mov	r0, r7
   137bc:	ldrd	r2, [r6, #-8]
   137c0:	mov	r4, r6
   137c4:	adds	r2, r2, #1
   137c8:	adc	r3, r3, #0
   137cc:	strd	r2, [r6, #-8]
   137d0:	bl	12568 <push_back_chars@@Base>
   137d4:	mov	r0, #2
   137d8:	bl	119fc <malloc@plt>
   137dc:	ldrd	r2, [r6]
   137e0:	ldrb	ip, [sp, #104]	; 0x68
   137e4:	mov	r1, #0
   137e8:	adds	r2, r2, #1
   137ec:	adc	r3, r3, #0
   137f0:	strd	r2, [r4], #16
   137f4:	strb	ip, [r0]
   137f8:	strb	r1, [r0, #1]
   137fc:	mov	r1, r0
   13800:	mov	r0, r5
   13804:	bl	122a8 <init_token_boolean_op@@Base>
   13808:	b	12f8c <next@@Base+0x908>
   1380c:	add	r3, sp, #616	; 0x268
   13810:	add	r1, r3, r1
   13814:	add	r3, lr, #1
   13818:	str	r3, [r7, #8]
   1381c:	mov	r0, #8
   13820:	strb	r6, [r1, #-512]	; 0xfffffe00
   13824:	ldrb	r5, [ip, lr]
   13828:	bl	119fc <malloc@plt>
   1382c:	cmp	r5, #61	; 0x3d
   13830:	mov	r4, r0
   13834:	beq	138d8 <next@@Base+0x1254>
   13838:	ldrd	r2, [fp, #232]	; 0xe8
   1383c:	mov	r1, #1
   13840:	mov	r0, r7
   13844:	adds	r2, r2, #1
   13848:	adc	r3, r3, #0
   1384c:	strd	r2, [fp, #232]	; 0xe8
   13850:	bl	12568 <push_back_chars@@Base>
   13854:	mov	r0, #2
   13858:	bl	119fc <malloc@plt>
   1385c:	ldrd	r2, [fp, #240]	; 0xf0
   13860:	ldrb	ip, [sp, #104]	; 0x68
   13864:	mov	r1, #0
   13868:	adds	r2, r2, #1
   1386c:	adc	r3, r3, #0
   13870:	strd	r2, [fp, #240]	; 0xf0
   13874:	strb	ip, [r0]
   13878:	strb	r1, [r0, #1]
   1387c:	mov	r1, r0
   13880:	mov	r0, r4
   13884:	bl	122a8 <init_token_boolean_op@@Base>
   13888:	ldr	r1, [pc, #-1560]	; 13278 <next@@Base+0xbf4>
   1388c:	mov	r0, r4
   13890:	ldrd	r2, [r1]
   13894:	adds	r2, r2, #1
   13898:	adc	r3, r3, #0
   1389c:	strd	r2, [r1]
   138a0:	b	126c8 <next@@Base+0x44>
   138a4:	mov	r0, #3
   138a8:	bl	119fc <malloc@plt>
   138ac:	ldr	r4, [pc, #-1592]	; 1327c <next@@Base+0xbf8>
   138b0:	ldrb	ip, [sp, #104]	; 0x68
   138b4:	mov	r1, #0
   138b8:	ldrd	r2, [r4, #-8]
   138bc:	adds	r2, r2, #1
   138c0:	adc	r3, r3, #0
   138c4:	strd	r2, [r4, #-8]
   138c8:	strb	r6, [r0, #1]
   138cc:	strb	ip, [r0]
   138d0:	strb	r1, [r0, #2]
   138d4:	b	137fc <next@@Base+0x1178>
   138d8:	mov	r0, #3
   138dc:	bl	119fc <malloc@plt>
   138e0:	ldrd	r2, [fp, #248]	; 0xf8
   138e4:	ldrb	ip, [sp, #104]	; 0x68
   138e8:	mov	r1, #0
   138ec:	adds	r2, r2, #1
   138f0:	adc	r3, r3, #0
   138f4:	strd	r2, [fp, #248]	; 0xf8
   138f8:	strb	r5, [r0, #1]
   138fc:	strb	ip, [r0]
   13900:	strb	r1, [r0, #2]
   13904:	b	1387c <next@@Base+0x11f8>
   13908:	ldrd	r4, [sp, #40]	; 0x28
   1390c:	strd	r4, [fp, #96]	; 0x60
   13910:	b	12b38 <next@@Base+0x4b4>
   13914:	ldr	r4, [pc, #-1692]	; 13280 <next@@Base+0xbfc>
   13918:	add	r3, sp, #616	; 0x268
   1391c:	add	r1, r3, r1
   13920:	ldrd	r2, [r4]
   13924:	mov	ip, #0
   13928:	mov	r0, #4
   1392c:	adds	r2, r2, #1
   13930:	adc	r3, r3, #0
   13934:	strb	r6, [r1, #-512]	; 0xfffffe00
   13938:	strd	r2, [r4]
   1393c:	strb	ip, [r1, #-511]	; 0xfffffe01
   13940:	bl	119fc <malloc@plt>
   13944:	mov	r5, r0
   13948:	bl	12260 <init_token_if@@Base>
   1394c:	ldrd	r2, [r4, #32]!
   13950:	mov	r0, r5
   13954:	adds	r2, r2, #1
   13958:	adc	r3, r3, #0
   1395c:	strd	r2, [r4]
   13960:	b	126c8 <next@@Base+0x44>
   13964:	ldr	r1, [pc, #-1772]	; 13280 <next@@Base+0xbfc>
   13968:	b	13138 <next@@Base+0xab4>
   1396c:	ldrd	r4, [fp, #56]	; 0x38
   13970:	ldr	r3, [pc, #-1780]	; 13284 <next@@Base+0xc00>
   13974:	mov	r2, #32
   13978:	adds	r4, r4, #1
   1397c:	adc	r5, r5, #0
   13980:	ldr	r3, [r3]
   13984:	mov	r1, #1
   13988:	ldr	r0, [pc, #-1800]	; 13288 <next@@Base+0xc04>
   1398c:	strd	r4, [fp, #56]	; 0x38
   13990:	bl	119cc <fwrite@plt>
   13994:	ldrd	r2, [fp, #64]	; 0x40
   13998:	mov	r0, #1
   1399c:	adds	r2, r2, #1
   139a0:	adc	r3, r3, #0
   139a4:	strd	r2, [fp, #64]	; 0x40
   139a8:	bl	11a44 <exit@plt>
   139ac:	ldrd	r4, [sp, #40]	; 0x28
   139b0:	strd	r4, [fp, #96]	; 0x60
   139b4:	b	12a64 <next@@Base+0x3e0>

000139b8 <init_ast_base@@Base>:
   139b8:	ldr	r3, [pc, #28]	; 139dc <init_ast_base@@Base+0x24>
   139bc:	push	{r4, r5}
   139c0:	ldrd	r4, [r3]
   139c4:	stm	r0, {r1, r2}
   139c8:	adds	r4, r4, #1
   139cc:	adc	r5, r5, #0
   139d0:	strd	r4, [r3]
   139d4:	pop	{r4, r5}
   139d8:	bx	lr
   139dc:	andeq	sl, r2, r8, lsr #30

000139e0 <init_ast_base_single@@Base>:
   139e0:	ldr	ip, [pc, #28]	; 13a04 <init_ast_base_single@@Base+0x24>
   139e4:	push	{lr}		; (str lr, [sp, #-4]!)
   139e8:	mov	lr, #0
   139ec:	ldrd	r2, [ip, #8]
   139f0:	stm	r0, {r1, lr}
   139f4:	adds	r2, r2, #1
   139f8:	adc	r3, r3, #0
   139fc:	strd	r2, [ip, #8]
   13a00:	pop	{pc}		; (ldr pc, [sp], #4)
   13a04:	andeq	sl, r2, r8, lsr #30

00013a08 <init_node_id@@Base>:
   13a08:	ldr	ip, [pc, #36]	; 13a34 <init_node_id@@Base+0x2c>
   13a0c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a10:	mov	lr, #0
   13a14:	ldrd	r2, [ip, #16]
   13a18:	str	r1, [r0, #8]
   13a1c:	str	lr, [r0]
   13a20:	adds	r2, r2, #1
   13a24:	adc	r3, r3, #0
   13a28:	str	lr, [r0, #4]
   13a2c:	strd	r2, [ip, #16]
   13a30:	pop	{pc}		; (ldr pc, [sp], #4)
   13a34:	andeq	sl, r2, r8, lsr #30

00013a38 <init_node_int@@Base>:
   13a38:	ldr	ip, [pc, #36]	; 13a64 <init_node_int@@Base+0x2c>
   13a3c:	push	{r4, lr}
   13a40:	mov	r4, #1
   13a44:	ldrd	r2, [ip, #24]
   13a48:	mov	lr, #0
   13a4c:	str	r1, [r0, #8]
   13a50:	adds	r2, r2, #1
   13a54:	adc	r3, r3, #0
   13a58:	stm	r0, {r4, lr}
   13a5c:	strd	r2, [ip, #24]
   13a60:	pop	{r4, pc}
   13a64:	andeq	sl, r2, r8, lsr #30

00013a68 <init_node_function@@Base>:
   13a68:	ldr	r3, [pc, #44]	; 13a9c <init_node_function@@Base+0x34>
   13a6c:	push	{r4, r5, lr}
   13a70:	mov	ip, #0
   13a74:	ldrd	r4, [r3, #32]
   13a78:	mov	lr, #2
   13a7c:	str	r1, [r0, #8]
   13a80:	adds	r4, r4, #1
   13a84:	adc	r5, r5, #0
   13a88:	str	r2, [r0, #12]
   13a8c:	str	lr, [r0]
   13a90:	str	ip, [r0, #4]
   13a94:	strd	r4, [r3, #32]
   13a98:	pop	{r4, r5, pc}
   13a9c:	andeq	sl, r2, r8, lsr #30

00013aa0 <init_node_return@@Base>:
   13aa0:	ldr	ip, [pc, #36]	; 13acc <init_node_return@@Base+0x2c>
   13aa4:	push	{r4, lr}
   13aa8:	mov	r4, #3
   13aac:	ldrd	r2, [ip, #40]	; 0x28
   13ab0:	mov	lr, #0
   13ab4:	str	r1, [r0, #8]
   13ab8:	adds	r2, r2, #1
   13abc:	adc	r3, r3, #0
   13ac0:	stm	r0, {r4, lr}
   13ac4:	strd	r2, [ip, #40]	; 0x28
   13ac8:	pop	{r4, pc}
   13acc:	andeq	sl, r2, r8, lsr #30

00013ad0 <init_node_if@@Base>:
   13ad0:	ldr	ip, [pc, #48]	; 13b08 <init_node_if@@Base+0x38>
   13ad4:	push	{r4, r5, lr}
   13ad8:	mov	lr, #4
   13adc:	ldrd	r4, [ip, #48]	; 0x30
   13ae0:	str	r2, [r0, #12]
   13ae4:	mov	r2, #0
   13ae8:	adds	r4, r4, #1
   13aec:	adc	r5, r5, #0
   13af0:	str	r1, [r0, #8]
   13af4:	str	r3, [r0, #16]
   13af8:	str	lr, [r0]
   13afc:	str	r2, [r0, #4]
   13b00:	strd	r4, [ip, #48]	; 0x30
   13b04:	pop	{r4, r5, pc}
   13b08:	andeq	sl, r2, r8, lsr #30

00013b0c <init_node_boolean_operator@@Base>:
   13b0c:	ldr	ip, [pc, #44]	; 13b40 <init_node_boolean_operator@@Base+0x34>
   13b10:	push	{r4, r5, lr}
   13b14:	mov	lr, #0
   13b18:	ldrd	r4, [ip, #56]	; 0x38
   13b1c:	str	r2, [r0, #8]
   13b20:	mov	r2, #5
   13b24:	adds	r4, r4, #1
   13b28:	adc	r5, r5, #0
   13b2c:	str	r1, [r0, #16]
   13b30:	str	r3, [r0, #12]
   13b34:	stm	r0, {r2, lr}
   13b38:	strd	r4, [ip, #56]	; 0x38
   13b3c:	pop	{r4, r5, pc}
   13b40:	andeq	sl, r2, r8, lsr #30

00013b44 <free_node_if@@Base>:
   13b44:	push	{r4, r5, r6, lr}
   13b48:	mov	r5, r0
   13b4c:	ldr	r4, [pc, #144]	; 13be4 <free_node_if@@Base+0xa0>
   13b50:	ldr	r0, [r0, #4]
   13b54:	ldrd	r2, [r4, #64]	; 0x40
   13b58:	adds	r2, r2, #1
   13b5c:	adc	r3, r3, #0
   13b60:	cmp	r0, #0
   13b64:	strd	r2, [r4, #64]	; 0x40
   13b68:	beq	13b90 <free_node_if@@Base+0x4c>
   13b6c:	ldrd	r2, [r4, #72]	; 0x48
   13b70:	adds	r2, r2, #1
   13b74:	adc	r3, r3, #0
   13b78:	strd	r2, [r4, #72]	; 0x48
   13b7c:	bl	13be8 <free_node@@Base>
   13b80:	ldrd	r2, [r4, #80]	; 0x50
   13b84:	adds	r2, r2, #1
   13b88:	adc	r3, r3, #0
   13b8c:	strd	r2, [r4, #80]	; 0x50
   13b90:	ldr	r0, [r5, #8]
   13b94:	bl	13be8 <free_node@@Base>
   13b98:	ldrd	r2, [r4, #88]	; 0x58
   13b9c:	ldr	r0, [r5, #12]
   13ba0:	adds	r2, r2, #1
   13ba4:	adc	r3, r3, #0
   13ba8:	strd	r2, [r4, #88]	; 0x58
   13bac:	bl	13be8 <free_node@@Base>
   13bb0:	ldrd	r2, [r4, #96]	; 0x60
   13bb4:	ldr	r0, [r5, #16]
   13bb8:	adds	r2, r2, #1
   13bbc:	adc	r3, r3, #0
   13bc0:	strd	r2, [r4, #96]	; 0x60
   13bc4:	bl	13be8 <free_node@@Base>
   13bc8:	ldrd	r2, [r4, #104]	; 0x68
   13bcc:	mov	r0, r5
   13bd0:	adds	r2, r2, #1
   13bd4:	adc	r3, r3, #0
   13bd8:	strd	r2, [r4, #104]	; 0x68
   13bdc:	pop	{r4, r5, r6, lr}
   13be0:	b	119a8 <free@plt>
   13be4:	andeq	sl, r2, r8, lsr #30

00013be8 <free_node@@Base>:
   13be8:	ldr	r3, [r0]
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bf0:	mov	r5, r0
   13bf4:	ldr	r4, [pc, #752]	; 13eec <free_node@@Base+0x304>
   13bf8:	cmp	r3, #5
   13bfc:	ldrls	pc, [pc, r3, lsl #2]
   13c00:	b	13eac <free_node@@Base+0x2c4>
   13c04:			; <UNDEFINED> instruction: 0x00013cbc
   13c08:	andeq	r3, r1, r8, lsr #26
   13c0c:	muleq	r1, ip, sp
   13c10:	andeq	r3, r1, r4, lsl lr
   13c14:	andeq	r3, r1, r4, lsl #29
   13c18:	andeq	r3, r1, ip, lsl ip
   13c1c:	add	r6, r4, #320	; 0x140
   13c20:	ldrd	r2, [r4, #160]	; 0xa0
   13c24:	ldrd	r8, [r6]
   13c28:	ldr	r0, [r0, #4]
   13c2c:	adds	r2, r2, #1
   13c30:	adc	r3, r3, #0
   13c34:	adds	r8, r8, #1
   13c38:	adc	r9, r9, #0
   13c3c:	cmp	r0, #0
   13c40:	strd	r2, [r4, #160]	; 0xa0
   13c44:	strd	r8, [r6]
   13c48:	beq	13c70 <free_node@@Base+0x88>
   13c4c:	ldrd	r2, [r6, #8]
   13c50:	adds	r2, r2, #1
   13c54:	adc	r3, r3, #0
   13c58:	strd	r2, [r6, #8]
   13c5c:	bl	13be8 <free_node@@Base>
   13c60:	ldrd	r2, [r6, #16]
   13c64:	adds	r2, r2, #1
   13c68:	adc	r3, r3, #0
   13c6c:	strd	r2, [r6, #16]
   13c70:	ldr	r0, [r5, #8]
   13c74:	bl	13be8 <free_node@@Base>
   13c78:	ldrd	r2, [r6, #24]
   13c7c:	ldr	r0, [r5, #12]
   13c80:	adds	r2, r2, #1
   13c84:	adc	r3, r3, #0
   13c88:	strd	r2, [r6, #24]
   13c8c:	bl	13be8 <free_node@@Base>
   13c90:	ldrd	r2, [r6, #32]
   13c94:	mov	r0, r5
   13c98:	adds	r2, r2, #1
   13c9c:	adc	r3, r3, #0
   13ca0:	strd	r2, [r6, #32]
   13ca4:	bl	119a8 <free@plt>
   13ca8:	ldrd	r2, [r4, #200]	; 0xc8
   13cac:	adds	r2, r2, #1
   13cb0:	adc	r3, r3, #0
   13cb4:	strd	r2, [r4, #200]	; 0xc8
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cbc:	ldrd	r6, [r4, #120]	; 0x78
   13cc0:	ldrd	r2, [r4, #224]	; 0xe0
   13cc4:	ldr	r0, [r0, #4]
   13cc8:	adds	r6, r6, #1
   13ccc:	adc	r7, r7, #0
   13cd0:	adds	r2, r2, #1
   13cd4:	adc	r3, r3, #0
   13cd8:	cmp	r0, #0
   13cdc:	strd	r6, [r4, #120]	; 0x78
   13ce0:	strd	r2, [r4, #224]	; 0xe0
   13ce4:	beq	13d0c <free_node@@Base+0x124>
   13ce8:	ldrd	r2, [r4, #232]	; 0xe8
   13cec:	adds	r2, r2, #1
   13cf0:	adc	r3, r3, #0
   13cf4:	strd	r2, [r4, #232]	; 0xe8
   13cf8:	bl	13be8 <free_node@@Base>
   13cfc:	ldrd	r2, [r4, #240]	; 0xf0
   13d00:	adds	r2, r2, #1
   13d04:	adc	r3, r3, #0
   13d08:	strd	r2, [r4, #240]	; 0xf0
   13d0c:	mov	r0, r5
   13d10:	bl	119a8 <free@plt>
   13d14:	ldrd	r2, [r4, #216]	; 0xd8
   13d18:	adds	r2, r2, #1
   13d1c:	adc	r3, r3, #0
   13d20:	strd	r2, [r4, #216]	; 0xd8
   13d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d28:	ldrd	r6, [r4, #128]	; 0x80
   13d2c:	ldrd	r2, [r4, #248]	; 0xf8
   13d30:	ldr	r0, [r0, #4]
   13d34:	adds	r6, r6, #1
   13d38:	adc	r7, r7, #0
   13d3c:	adds	r2, r2, #1
   13d40:	adc	r3, r3, #0
   13d44:	cmp	r0, #0
   13d48:	strd	r6, [r4, #128]	; 0x80
   13d4c:	strd	r2, [r4, #248]	; 0xf8
   13d50:	beq	13d80 <free_node@@Base+0x198>
   13d54:	add	r1, r4, #256	; 0x100
   13d58:	ldrd	r2, [r1]
   13d5c:	adds	r2, r2, #1
   13d60:	adc	r3, r3, #0
   13d64:	strd	r2, [r1]
   13d68:	bl	13be8 <free_node@@Base>
   13d6c:	add	r1, r4, #272	; 0x110
   13d70:	ldrd	r2, [r1, #-8]
   13d74:	adds	r2, r2, #1
   13d78:	adc	r3, r3, #0
   13d7c:	strd	r2, [r1, #-8]
   13d80:	mov	r0, r5
   13d84:	bl	119a8 <free@plt>
   13d88:	ldrd	r2, [r4, #168]	; 0xa8
   13d8c:	adds	r2, r2, #1
   13d90:	adc	r3, r3, #0
   13d94:	strd	r2, [r4, #168]	; 0xa8
   13d98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d9c:	add	r8, r4, #272	; 0x110
   13da0:	ldrd	r2, [r4, #136]	; 0x88
   13da4:	ldrd	r6, [r8]
   13da8:	ldr	r0, [r0, #4]
   13dac:	adds	r2, r2, #1
   13db0:	adc	r3, r3, #0
   13db4:	adds	r6, r6, #1
   13db8:	adc	r7, r7, #0
   13dbc:	cmp	r0, #0
   13dc0:	strd	r2, [r4, #136]	; 0x88
   13dc4:	strd	r6, [r8]
   13dc8:	beq	13df0 <free_node@@Base+0x208>
   13dcc:	ldrd	r2, [r8, #8]
   13dd0:	adds	r2, r2, #1
   13dd4:	adc	r3, r3, #0
   13dd8:	strd	r2, [r8, #8]
   13ddc:	bl	13be8 <free_node@@Base>
   13de0:	ldrd	r2, [r8, #16]
   13de4:	adds	r2, r2, #1
   13de8:	adc	r3, r3, #0
   13dec:	strd	r2, [r8, #16]
   13df0:	ldr	r0, [r5, #8]
   13df4:	bl	119a8 <free@plt>
   13df8:	mov	r0, r5
   13dfc:	bl	119a8 <free@plt>
   13e00:	ldrd	r2, [r4, #176]	; 0xb0
   13e04:	adds	r2, r2, #1
   13e08:	adc	r3, r3, #0
   13e0c:	strd	r2, [r4, #176]	; 0xb0
   13e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e14:	add	r8, r4, #304	; 0x130
   13e18:	ldrd	r2, [r4, #144]	; 0x90
   13e1c:	ldrd	r6, [r8, #-8]
   13e20:	ldr	r0, [r0, #4]
   13e24:	adds	r2, r2, #1
   13e28:	adc	r3, r3, #0
   13e2c:	adds	r6, r6, #1
   13e30:	adc	r7, r7, #0
   13e34:	cmp	r0, #0
   13e38:	strd	r2, [r4, #144]	; 0x90
   13e3c:	strd	r6, [r8, #-8]
   13e40:	beq	13e68 <free_node@@Base+0x280>
   13e44:	ldrd	r2, [r8]
   13e48:	adds	r2, r2, #1
   13e4c:	adc	r3, r3, #0
   13e50:	strd	r2, [r8]
   13e54:	bl	13be8 <free_node@@Base>
   13e58:	ldrd	r2, [r8, #8]
   13e5c:	adds	r2, r2, #1
   13e60:	adc	r3, r3, #0
   13e64:	strd	r2, [r8, #8]
   13e68:	mov	r0, r5
   13e6c:	bl	119a8 <free@plt>
   13e70:	ldrd	r2, [r4, #184]	; 0xb8
   13e74:	adds	r2, r2, #1
   13e78:	adc	r3, r3, #0
   13e7c:	strd	r2, [r4, #184]	; 0xb8
   13e80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e84:	ldrd	r2, [r4, #152]	; 0x98
   13e88:	adds	r2, r2, #1
   13e8c:	adc	r3, r3, #0
   13e90:	strd	r2, [r4, #152]	; 0x98
   13e94:	bl	13b44 <free_node_if@@Base>
   13e98:	ldrd	r2, [r4, #192]	; 0xc0
   13e9c:	adds	r2, r2, #1
   13ea0:	adc	r3, r3, #0
   13ea4:	strd	r2, [r4, #192]	; 0xc0
   13ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13eac:	ldrd	r6, [r4, #112]	; 0x70
   13eb0:	ldr	r3, [pc, #56]	; 13ef0 <free_node@@Base+0x308>
   13eb4:	mov	r2, #31
   13eb8:	adds	r6, r6, #1
   13ebc:	adc	r7, r7, #0
   13ec0:	ldr	r3, [r3]
   13ec4:	mov	r1, #1
   13ec8:	ldr	r0, [pc, #36]	; 13ef4 <free_node@@Base+0x30c>
   13ecc:	strd	r6, [r4, #112]	; 0x70
   13ed0:	bl	119cc <fwrite@plt>
   13ed4:	ldrd	r2, [r4, #208]	; 0xd0
   13ed8:	mov	r0, #1
   13edc:	adds	r2, r2, #1
   13ee0:	adc	r3, r3, #0
   13ee4:	strd	r2, [r4, #208]	; 0xd0
   13ee8:	bl	11a44 <exit@plt>
   13eec:	andeq	sl, r2, r8, lsr #30
   13ef0:			; <UNDEFINED> instruction: 0x0002aab8
   13ef4:	muleq	r1, r4, r5

00013ef8 <free_node_int@@Base>:
   13ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13efc:	mov	r6, r0
   13f00:	ldr	r4, [pc, #880]	; 14278 <free_node_int@@Base+0x380>
   13f04:	ldr	r5, [r0, #4]
   13f08:	sub	sp, sp, #12
   13f0c:	ldrd	r2, [r4, #248]	; 0xf8
   13f10:	adds	r0, r2, #1
   13f14:	adc	r1, r3, #0
   13f18:	cmp	r5, #0
   13f1c:	strd	r0, [r4, #248]	; 0xf8
   13f20:	beq	14020 <free_node_int@@Base+0x128>
   13f24:	add	ip, r4, #256	; 0x100
   13f28:	ldr	lr, [r5]
   13f2c:	ldrd	r0, [ip]
   13f30:	mov	r8, r0
   13f34:	adds	r0, r0, #1
   13f38:	mov	r9, r1
   13f3c:	adc	r1, r1, #0
   13f40:	strd	r0, [ip]
   13f44:	cmp	lr, #5
   13f48:	ldrls	pc, [pc, lr, lsl #2]
   13f4c:	b	14230 <free_node_int@@Base+0x338>
   13f50:	andeq	r4, r1, r0, lsr r0
   13f54:	andeq	r4, r1, r4, lsr #1
   13f58:	andeq	r4, r1, r8, lsl #2
   13f5c:	andeq	r4, r1, r4, lsl #3
   13f60:	strdeq	r4, [r1], -ip
   13f64:	andeq	r3, r1, r8, ror #30
   13f68:	ldr	r8, [pc, #780]	; 1427c <free_node_int@@Base+0x384>
   13f6c:	ldrd	r2, [r4, #160]	; 0xa0
   13f70:	ldrd	sl, [r8]
   13f74:	adds	r0, r2, #1
   13f78:	adc	r1, r3, #0
   13f7c:	adds	r2, sl, #1
   13f80:	adc	r3, fp, #0
   13f84:	strd	r0, [sp]
   13f88:	strd	r2, [r8]
   13f8c:	ldr	r0, [r5, #4]
   13f90:	ldrd	r2, [sp]
   13f94:	cmp	r0, #0
   13f98:	strd	r2, [r4, #160]	; 0xa0
   13f9c:	beq	13fc4 <free_node_int@@Base+0xcc>
   13fa0:	ldrd	r2, [r8, #8]
   13fa4:	adds	sl, r2, #1
   13fa8:	adc	fp, r3, #0
   13fac:	strd	sl, [r8, #8]
   13fb0:	bl	13be8 <free_node@@Base>
   13fb4:	ldrd	r2, [r8, #16]
   13fb8:	adds	r0, r2, #1
   13fbc:	adc	r1, r3, #0
   13fc0:	strd	r0, [r8, #16]
   13fc4:	ldr	r0, [r5, #8]
   13fc8:	bl	13be8 <free_node@@Base>
   13fcc:	ldrd	r2, [r8, #24]
   13fd0:	ldr	r0, [r5, #12]
   13fd4:	ldr	r7, [pc, #676]	; 14280 <free_node_int@@Base+0x388>
   13fd8:	adds	sl, r2, #1
   13fdc:	adc	fp, r3, #0
   13fe0:	strd	sl, [r8, #24]
   13fe4:	bl	13be8 <free_node@@Base>
   13fe8:	ldrd	r2, [r8, #32]
   13fec:	mov	r0, r5
   13ff0:	adds	sl, r2, #1
   13ff4:	adc	fp, r3, #0
   13ff8:	strd	sl, [r8, #32]
   13ffc:	bl	119a8 <free@plt>
   14000:	ldrd	r2, [r4, #200]	; 0xc8
   14004:	ldrd	sl, [r7, #-8]
   14008:	adds	r0, r2, #1
   1400c:	adc	r1, r3, #0
   14010:	strd	r0, [r4, #200]	; 0xc8
   14014:	adds	r8, sl, #1
   14018:	adc	r9, fp, #0
   1401c:	strd	r8, [r7, #-8]
   14020:	mov	r0, r6
   14024:	add	sp, sp, #12
   14028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1402c:	b	119a8 <free@plt>
   14030:	ldrd	r2, [r4, #120]	; 0x78
   14034:	ldrd	r8, [r4, #224]	; 0xe0
   14038:	ldr	r0, [r5, #4]
   1403c:	adds	sl, r2, #1
   14040:	adc	fp, r3, #0
   14044:	adds	r2, r8, #1
   14048:	adc	r3, r9, #0
   1404c:	cmp	r0, #0
   14050:	strd	sl, [r4, #120]	; 0x78
   14054:	strd	r2, [r4, #224]	; 0xe0
   14058:	beq	14080 <free_node_int@@Base+0x188>
   1405c:	ldrd	r2, [r4, #232]	; 0xe8
   14060:	adds	r8, r2, #1
   14064:	adc	r9, r3, #0
   14068:	strd	r8, [r4, #232]	; 0xe8
   1406c:	bl	13be8 <free_node@@Base>
   14070:	ldrd	r2, [r4, #240]	; 0xf0
   14074:	adds	r0, r2, #1
   14078:	adc	r1, r3, #0
   1407c:	strd	r0, [r4, #240]	; 0xf0
   14080:	mov	r0, r5
   14084:	bl	119a8 <free@plt>
   14088:	ldrd	r2, [r4, #216]	; 0xd8
   1408c:	ldr	r7, [pc, #492]	; 14280 <free_node_int@@Base+0x388>
   14090:	adds	r0, r2, #1
   14094:	adc	r1, r3, #0
   14098:	ldrd	sl, [r7, #-8]
   1409c:	strd	r0, [r4, #216]	; 0xd8
   140a0:	b	14014 <free_node_int@@Base+0x11c>
   140a4:	adds	sl, r2, #2
   140a8:	adc	fp, r3, #0
   140ac:	ldrd	r2, [r4, #128]	; 0x80
   140b0:	ldr	r0, [r5, #4]
   140b4:	ldr	r7, [pc, #452]	; 14280 <free_node_int@@Base+0x388>
   140b8:	adds	r2, r2, #1
   140bc:	adc	r3, r3, #0
   140c0:	cmp	r0, #0
   140c4:	strd	sl, [r4, #248]	; 0xf8
   140c8:	strd	r2, [r4, #128]	; 0x80
   140cc:	beq	14270 <free_node_int@@Base+0x378>
   140d0:	adds	r8, r8, #2
   140d4:	adc	r9, r9, #0
   140d8:	strd	r8, [ip]
   140dc:	bl	13be8 <free_node@@Base>
   140e0:	ldrd	r8, [r7, #-8]
   140e4:	adds	sl, r8, #1
   140e8:	adc	fp, r9, #0
   140ec:	mov	r0, r5
   140f0:	bl	119a8 <free@plt>
   140f4:	ldrd	r2, [r4, #168]	; 0xa8
   140f8:	adds	r0, r2, #1
   140fc:	adc	r1, r3, #0
   14100:	strd	r0, [r4, #168]	; 0xa8
   14104:	b	14014 <free_node_int@@Base+0x11c>
   14108:	ldr	r7, [pc, #368]	; 14280 <free_node_int@@Base+0x388>
   1410c:	ldrd	r2, [r4, #136]	; 0x88
   14110:	ldr	r0, [r5, #4]
   14114:	ldrd	r8, [r7]
   14118:	adds	sl, r2, #1
   1411c:	adc	fp, r3, #0
   14120:	adds	r2, r8, #1
   14124:	adc	r3, r9, #0
   14128:	cmp	r0, #0
   1412c:	strd	r2, [r7]
   14130:	strd	sl, [r4, #136]	; 0x88
   14134:	beq	1415c <free_node_int@@Base+0x264>
   14138:	ldrd	r2, [r7, #8]
   1413c:	adds	r8, r2, #1
   14140:	adc	r9, r3, #0
   14144:	strd	r8, [r7, #8]
   14148:	bl	13be8 <free_node@@Base>
   1414c:	ldrd	r2, [r7, #16]
   14150:	adds	r0, r2, #1
   14154:	adc	r1, r3, #0
   14158:	strd	r0, [r7, #16]
   1415c:	ldr	r0, [r5, #8]
   14160:	bl	119a8 <free@plt>
   14164:	mov	r0, r5
   14168:	bl	119a8 <free@plt>
   1416c:	ldrd	r2, [r4, #176]	; 0xb0
   14170:	ldrd	sl, [r7, #-8]
   14174:	adds	r0, r2, #1
   14178:	adc	r1, r3, #0
   1417c:	strd	r0, [r4, #176]	; 0xb0
   14180:	b	14014 <free_node_int@@Base+0x11c>
   14184:	ldr	r7, [pc, #248]	; 14284 <free_node_int@@Base+0x38c>
   14188:	ldrd	r2, [r4, #144]	; 0x90
   1418c:	ldr	r0, [r5, #4]
   14190:	ldrd	r8, [r7, #-8]
   14194:	adds	sl, r2, #1
   14198:	adc	fp, r3, #0
   1419c:	adds	r2, r8, #1
   141a0:	adc	r3, r9, #0
   141a4:	cmp	r0, #0
   141a8:	strd	r2, [r7, #-8]
   141ac:	strd	sl, [r4, #144]	; 0x90
   141b0:	beq	141d8 <free_node_int@@Base+0x2e0>
   141b4:	ldrd	r2, [r7]
   141b8:	adds	r8, r2, #1
   141bc:	adc	r9, r3, #0
   141c0:	strd	r8, [r7]
   141c4:	bl	13be8 <free_node@@Base>
   141c8:	ldrd	r2, [r7, #8]
   141cc:	adds	r0, r2, #1
   141d0:	adc	r1, r3, #0
   141d4:	strd	r0, [r7, #8]
   141d8:	mov	r0, r5
   141dc:	bl	119a8 <free@plt>
   141e0:	ldrd	r2, [r4, #184]	; 0xb8
   141e4:	ldr	r7, [pc, #148]	; 14280 <free_node_int@@Base+0x388>
   141e8:	adds	r0, r2, #1
   141ec:	adc	r1, r3, #0
   141f0:	ldrd	sl, [r7, #-8]
   141f4:	strd	r0, [r4, #184]	; 0xb8
   141f8:	b	14014 <free_node_int@@Base+0x11c>
   141fc:	ldrd	r2, [r4, #152]	; 0x98
   14200:	mov	r0, r5
   14204:	ldr	r7, [pc, #116]	; 14280 <free_node_int@@Base+0x388>
   14208:	adds	r8, r2, #1
   1420c:	adc	r9, r3, #0
   14210:	strd	r8, [r4, #152]	; 0x98
   14214:	bl	13b44 <free_node_if@@Base>
   14218:	ldrd	r2, [r4, #192]	; 0xc0
   1421c:	ldrd	sl, [r7, #-8]
   14220:	adds	r0, r2, #1
   14224:	adc	r1, r3, #0
   14228:	strd	r0, [r4, #192]	; 0xc0
   1422c:	b	14014 <free_node_int@@Base+0x11c>
   14230:	ldrd	r6, [r4, #112]	; 0x70
   14234:	ldr	r3, [pc, #76]	; 14288 <free_node_int@@Base+0x390>
   14238:	mov	r2, #31
   1423c:	adds	r8, r6, #1
   14240:	adc	r9, r7, #0
   14244:	ldr	r3, [r3]
   14248:	mov	r1, #1
   1424c:	ldr	r0, [pc, #56]	; 1428c <free_node_int@@Base+0x394>
   14250:	strd	r8, [r4, #112]	; 0x70
   14254:	bl	119cc <fwrite@plt>
   14258:	ldrd	r2, [r4, #208]	; 0xd0
   1425c:	mov	r0, #1
   14260:	adds	r6, r2, #1
   14264:	adc	r7, r3, #0
   14268:	strd	r6, [r4, #208]	; 0xd0
   1426c:	bl	11a44 <exit@plt>
   14270:	ldrd	sl, [r7, #-8]
   14274:	b	140ec <free_node_int@@Base+0x1f4>
   14278:	andeq	sl, r2, r8, lsr #30
   1427c:	andeq	fp, r2, r8, rrx
   14280:	andeq	fp, r2, r8, lsr r0
   14284:	andeq	fp, r2, r8, asr r0
   14288:			; <UNDEFINED> instruction: 0x0002aab8
   1428c:	muleq	r1, r4, r5

00014290 <free_node_id@@Base>:
   14290:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14294:	mov	r6, r0
   14298:	ldr	r4, [pc, #848]	; 145f0 <free_node_id@@Base+0x360>
   1429c:	ldr	r5, [r0, #4]
   142a0:	ldrd	r2, [r4, #224]	; 0xe0
   142a4:	adds	r0, r2, #1
   142a8:	adc	r1, r3, #0
   142ac:	cmp	r5, #0
   142b0:	strd	r0, [r4, #224]	; 0xe0
   142b4:	beq	143a4 <free_node_id@@Base+0x114>
   142b8:	ldrd	r0, [r4, #232]	; 0xe8
   142bc:	ldr	ip, [r5]
   142c0:	mov	r8, r0
   142c4:	adds	r0, r0, #1
   142c8:	mov	r9, r1
   142cc:	adc	r1, r1, #0
   142d0:	strd	r0, [r4, #232]	; 0xe8
   142d4:	cmp	ip, #5
   142d8:	ldrls	pc, [pc, ip, lsl #2]
   142dc:	b	145a8 <free_node_id@@Base+0x318>
   142e0:			; <UNDEFINED> instruction: 0x000143b0
   142e4:	andeq	r4, r1, r0, lsl r4
   142e8:	andeq	r4, r1, r8, lsl #9
   142ec:	andeq	r4, r1, r4, lsl #10
   142f0:	andeq	r4, r1, r8, ror r5
   142f4:	strdeq	r4, [r1], -r8
   142f8:	ldr	r7, [pc, #756]	; 145f4 <free_node_id@@Base+0x364>
   142fc:	ldrd	r2, [r4, #160]	; 0xa0
   14300:	ldr	r0, [r5, #4]
   14304:	ldrd	r8, [r7]
   14308:	adds	sl, r2, #1
   1430c:	adc	fp, r3, #0
   14310:	adds	r2, r8, #1
   14314:	adc	r3, r9, #0
   14318:	cmp	r0, #0
   1431c:	strd	r2, [r7]
   14320:	strd	sl, [r4, #160]	; 0xa0
   14324:	beq	1434c <free_node_id@@Base+0xbc>
   14328:	ldrd	r2, [r7, #8]
   1432c:	adds	r8, r2, #1
   14330:	adc	r9, r3, #0
   14334:	strd	r8, [r7, #8]
   14338:	bl	13be8 <free_node@@Base>
   1433c:	ldrd	r2, [r7, #16]
   14340:	adds	r0, r2, #1
   14344:	adc	r1, r3, #0
   14348:	strd	r0, [r7, #16]
   1434c:	ldr	r0, [r5, #8]
   14350:	bl	13be8 <free_node@@Base>
   14354:	ldrd	r2, [r7, #24]
   14358:	ldr	r0, [r5, #12]
   1435c:	adds	r8, r2, #1
   14360:	adc	r9, r3, #0
   14364:	strd	r8, [r7, #24]
   14368:	bl	13be8 <free_node@@Base>
   1436c:	ldrd	r2, [r7, #32]
   14370:	mov	r0, r5
   14374:	adds	r8, r2, #1
   14378:	adc	r9, r3, #0
   1437c:	strd	r8, [r7, #32]
   14380:	bl	119a8 <free@plt>
   14384:	ldrd	r2, [r4, #200]	; 0xc8
   14388:	ldrd	sl, [r4, #240]	; 0xf0
   1438c:	adds	r0, r2, #1
   14390:	adc	r1, r3, #0
   14394:	strd	r0, [r4, #200]	; 0xc8
   14398:	adds	r8, sl, #1
   1439c:	adc	r9, fp, #0
   143a0:	strd	r8, [r4, #240]	; 0xf0
   143a4:	mov	r0, r6
   143a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ac:	b	119a8 <free@plt>
   143b0:	adds	sl, r2, #2
   143b4:	adc	fp, r3, #0
   143b8:	ldrd	r2, [r4, #120]	; 0x78
   143bc:	ldr	r0, [r5, #4]
   143c0:	strd	sl, [r4, #224]	; 0xe0
   143c4:	adds	r2, r2, #1
   143c8:	adc	r3, r3, #0
   143cc:	cmp	r0, #0
   143d0:	strd	r2, [r4, #120]	; 0x78
   143d4:	beq	145e8 <free_node_id@@Base+0x358>
   143d8:	adds	r8, r8, #2
   143dc:	adc	r9, r9, #0
   143e0:	strd	r8, [r4, #232]	; 0xe8
   143e4:	bl	13be8 <free_node@@Base>
   143e8:	ldrd	r8, [r4, #240]	; 0xf0
   143ec:	adds	sl, r8, #1
   143f0:	adc	fp, r9, #0
   143f4:	mov	r0, r5
   143f8:	bl	119a8 <free@plt>
   143fc:	ldrd	r2, [r4, #216]	; 0xd8
   14400:	adds	r0, r2, #1
   14404:	adc	r1, r3, #0
   14408:	strd	r0, [r4, #216]	; 0xd8
   1440c:	b	14398 <free_node_id@@Base+0x108>
   14410:	ldrd	r2, [r4, #128]	; 0x80
   14414:	ldrd	r8, [r4, #248]	; 0xf8
   14418:	ldr	r0, [r5, #4]
   1441c:	adds	sl, r2, #1
   14420:	adc	fp, r3, #0
   14424:	adds	r2, r8, #1
   14428:	adc	r3, r9, #0
   1442c:	cmp	r0, #0
   14430:	strd	sl, [r4, #128]	; 0x80
   14434:	strd	r2, [r4, #248]	; 0xf8
   14438:	beq	14468 <free_node_id@@Base+0x1d8>
   1443c:	ldr	r3, [pc, #436]	; 145f8 <free_node_id@@Base+0x368>
   14440:	mov	r7, r3
   14444:	ldrd	r2, [r3]
   14448:	adds	r8, r2, #1
   1444c:	adc	r9, r3, #0
   14450:	strd	r8, [r7], #16
   14454:	bl	13be8 <free_node@@Base>
   14458:	ldrd	r2, [r7, #-8]
   1445c:	adds	r0, r2, #1
   14460:	adc	r1, r3, #0
   14464:	strd	r0, [r7, #-8]
   14468:	mov	r0, r5
   1446c:	bl	119a8 <free@plt>
   14470:	ldrd	r2, [r4, #168]	; 0xa8
   14474:	ldrd	sl, [r4, #240]	; 0xf0
   14478:	adds	r0, r2, #1
   1447c:	adc	r1, r3, #0
   14480:	strd	r0, [r4, #168]	; 0xa8
   14484:	b	14398 <free_node_id@@Base+0x108>
   14488:	ldr	r7, [pc, #364]	; 145fc <free_node_id@@Base+0x36c>
   1448c:	ldrd	r2, [r4, #136]	; 0x88
   14490:	ldr	r0, [r5, #4]
   14494:	ldrd	r8, [r7]
   14498:	adds	sl, r2, #1
   1449c:	adc	fp, r3, #0
   144a0:	adds	r2, r8, #1
   144a4:	adc	r3, r9, #0
   144a8:	cmp	r0, #0
   144ac:	strd	r2, [r7]
   144b0:	strd	sl, [r4, #136]	; 0x88
   144b4:	beq	144dc <free_node_id@@Base+0x24c>
   144b8:	ldrd	r2, [r7, #8]
   144bc:	adds	r8, r2, #1
   144c0:	adc	r9, r3, #0
   144c4:	strd	r8, [r7, #8]
   144c8:	bl	13be8 <free_node@@Base>
   144cc:	ldrd	r2, [r7, #16]
   144d0:	adds	r0, r2, #1
   144d4:	adc	r1, r3, #0
   144d8:	strd	r0, [r7, #16]
   144dc:	ldr	r0, [r5, #8]
   144e0:	bl	119a8 <free@plt>
   144e4:	mov	r0, r5
   144e8:	bl	119a8 <free@plt>
   144ec:	ldrd	r2, [r4, #176]	; 0xb0
   144f0:	ldrd	sl, [r4, #240]	; 0xf0
   144f4:	adds	r0, r2, #1
   144f8:	adc	r1, r3, #0
   144fc:	strd	r0, [r4, #176]	; 0xb0
   14500:	b	14398 <free_node_id@@Base+0x108>
   14504:	ldr	r7, [pc, #244]	; 14600 <free_node_id@@Base+0x370>
   14508:	ldrd	r2, [r4, #144]	; 0x90
   1450c:	ldr	r0, [r5, #4]
   14510:	ldrd	r8, [r7, #-8]
   14514:	adds	sl, r2, #1
   14518:	adc	fp, r3, #0
   1451c:	adds	r2, r8, #1
   14520:	adc	r3, r9, #0
   14524:	cmp	r0, #0
   14528:	strd	r2, [r7, #-8]
   1452c:	strd	sl, [r4, #144]	; 0x90
   14530:	beq	14558 <free_node_id@@Base+0x2c8>
   14534:	ldrd	r2, [r7]
   14538:	adds	r8, r2, #1
   1453c:	adc	r9, r3, #0
   14540:	strd	r8, [r7]
   14544:	bl	13be8 <free_node@@Base>
   14548:	ldrd	r2, [r7, #8]
   1454c:	adds	r0, r2, #1
   14550:	adc	r1, r3, #0
   14554:	strd	r0, [r7, #8]
   14558:	mov	r0, r5
   1455c:	bl	119a8 <free@plt>
   14560:	ldrd	r2, [r4, #184]	; 0xb8
   14564:	ldrd	sl, [r4, #240]	; 0xf0
   14568:	adds	r0, r2, #1
   1456c:	adc	r1, r3, #0
   14570:	strd	r0, [r4, #184]	; 0xb8
   14574:	b	14398 <free_node_id@@Base+0x108>
   14578:	ldrd	r2, [r4, #152]	; 0x98
   1457c:	mov	r0, r5
   14580:	adds	r8, r2, #1
   14584:	adc	r9, r3, #0
   14588:	strd	r8, [r4, #152]	; 0x98
   1458c:	bl	13b44 <free_node_if@@Base>
   14590:	ldrd	r2, [r4, #192]	; 0xc0
   14594:	ldrd	sl, [r4, #240]	; 0xf0
   14598:	adds	r0, r2, #1
   1459c:	adc	r1, r3, #0
   145a0:	strd	r0, [r4, #192]	; 0xc0
   145a4:	b	14398 <free_node_id@@Base+0x108>
   145a8:	ldrd	r6, [r4, #112]	; 0x70
   145ac:	ldr	r3, [pc, #80]	; 14604 <free_node_id@@Base+0x374>
   145b0:	mov	r2, #31
   145b4:	adds	r8, r6, #1
   145b8:	adc	r9, r7, #0
   145bc:	ldr	r3, [r3]
   145c0:	mov	r1, #1
   145c4:	ldr	r0, [pc, #60]	; 14608 <free_node_id@@Base+0x378>
   145c8:	strd	r8, [r4, #112]	; 0x70
   145cc:	bl	119cc <fwrite@plt>
   145d0:	ldrd	r2, [r4, #208]	; 0xd0
   145d4:	mov	r0, #1
   145d8:	adds	r6, r2, #1
   145dc:	adc	r7, r3, #0
   145e0:	strd	r6, [r4, #208]	; 0xd0
   145e4:	bl	11a44 <exit@plt>
   145e8:	ldrd	sl, [r4, #240]	; 0xf0
   145ec:	b	143f4 <free_node_id@@Base+0x164>
   145f0:	andeq	sl, r2, r8, lsr #30
   145f4:	andeq	fp, r2, r8, rrx
   145f8:	andeq	fp, r2, r8, lsr #32
   145fc:	andeq	fp, r2, r8, lsr r0
   14600:	andeq	fp, r2, r8, asr r0
   14604:			; <UNDEFINED> instruction: 0x0002aab8
   14608:	muleq	r1, r4, r5

0001460c <free_node_return@@Base>:
   1460c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14610:	mov	r7, r0
   14614:	ldr	r4, [pc, #864]	; 1497c <free_node_return@@Base+0x370>
   14618:	ldr	r6, [r0, #4]
   1461c:	ldrd	r2, [r4, #-8]
   14620:	adds	r0, r2, #1
   14624:	adc	r1, r3, #0
   14628:	cmp	r6, #0
   1462c:	strd	r0, [r4, #-8]
   14630:	beq	1471c <free_node_return@@Base+0x110>
   14634:	ldrd	sl, [r4]
   14638:	ldr	ip, [r6]
   1463c:	adds	r0, sl, #1
   14640:	adc	r1, fp, #0
   14644:	strd	r0, [r4]
   14648:	cmp	ip, #5
   1464c:	ldrls	pc, [pc, ip, lsl #2]
   14650:	b	14930 <free_node_return@@Base+0x324>
   14654:	andeq	r4, r1, r8, lsr #14
   14658:	muleq	r1, ip, r7
   1465c:	andeq	r4, r1, r8, lsl r8
   14660:	muleq	r1, r8, r8
   14664:	strdeq	r4, [r1], -ip
   14668:	andeq	r4, r1, ip, ror #12
   1466c:	ldr	r5, [pc, #780]	; 14980 <free_node_return@@Base+0x374>
   14670:	ldr	r0, [r6, #4]
   14674:	add	r8, r5, #320	; 0x140
   14678:	ldrd	sl, [r5, #160]	; 0xa0
   1467c:	ldrd	r2, [r8]
   14680:	adds	sl, sl, #1
   14684:	adc	fp, fp, #0
   14688:	adds	r2, r2, #1
   1468c:	adc	r3, r3, #0
   14690:	cmp	r0, #0
   14694:	strd	sl, [r5, #160]	; 0xa0
   14698:	strd	r2, [r8]
   1469c:	beq	146c4 <free_node_return@@Base+0xb8>
   146a0:	ldrd	r2, [r8, #8]
   146a4:	adds	r2, r2, #1
   146a8:	adc	r3, r3, #0
   146ac:	strd	r2, [r8, #8]
   146b0:	bl	13be8 <free_node@@Base>
   146b4:	ldrd	r2, [r8, #16]
   146b8:	adds	r2, r2, #1
   146bc:	adc	r3, r3, #0
   146c0:	strd	r2, [r8, #16]
   146c4:	ldr	r0, [r6, #8]
   146c8:	bl	13be8 <free_node@@Base>
   146cc:	ldrd	r2, [r8, #24]
   146d0:	ldr	r0, [r6, #12]
   146d4:	adds	r2, r2, #1
   146d8:	adc	r3, r3, #0
   146dc:	strd	r2, [r8, #24]
   146e0:	bl	13be8 <free_node@@Base>
   146e4:	ldrd	r2, [r8, #32]
   146e8:	mov	r0, r6
   146ec:	adds	r2, r2, #1
   146f0:	adc	r3, r3, #0
   146f4:	strd	r2, [r8, #32]
   146f8:	bl	119a8 <free@plt>
   146fc:	ldrd	r2, [r5, #200]	; 0xc8
   14700:	ldrd	r8, [r4, #8]
   14704:	adds	r2, r2, #1
   14708:	adc	r3, r3, #0
   1470c:	strd	r2, [r5, #200]	; 0xc8
   14710:	adds	r8, r8, #1
   14714:	adc	r9, r9, #0
   14718:	strd	r8, [r4, #8]
   1471c:	mov	r0, r7
   14720:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14724:	b	119a8 <free@plt>
   14728:	ldr	r5, [pc, #592]	; 14980 <free_node_return@@Base+0x374>
   1472c:	ldr	r0, [r6, #4]
   14730:	ldrd	r2, [r5, #120]	; 0x78
   14734:	ldrd	r8, [r5, #224]	; 0xe0
   14738:	adds	r2, r2, #1
   1473c:	adc	r3, r3, #0
   14740:	adds	r8, r8, #1
   14744:	adc	r9, r9, #0
   14748:	cmp	r0, #0
   1474c:	strd	r2, [r5, #120]	; 0x78
   14750:	strd	r8, [r5, #224]	; 0xe0
   14754:	beq	1477c <free_node_return@@Base+0x170>
   14758:	ldrd	r2, [r5, #232]	; 0xe8
   1475c:	adds	r2, r2, #1
   14760:	adc	r3, r3, #0
   14764:	strd	r2, [r5, #232]	; 0xe8
   14768:	bl	13be8 <free_node@@Base>
   1476c:	ldrd	r2, [r5, #240]	; 0xf0
   14770:	adds	r2, r2, #1
   14774:	adc	r3, r3, #0
   14778:	strd	r2, [r5, #240]	; 0xf0
   1477c:	mov	r0, r6
   14780:	bl	119a8 <free@plt>
   14784:	ldrd	r2, [r5, #216]	; 0xd8
   14788:	ldrd	r8, [r4, #8]
   1478c:	adds	r2, r2, #1
   14790:	adc	r3, r3, #0
   14794:	strd	r2, [r5, #216]	; 0xd8
   14798:	b	14710 <free_node_return@@Base+0x104>
   1479c:	ldr	r5, [pc, #476]	; 14980 <free_node_return@@Base+0x374>
   147a0:	ldr	r0, [r6, #4]
   147a4:	ldrd	r2, [r5, #128]	; 0x80
   147a8:	ldrd	r8, [r5, #248]	; 0xf8
   147ac:	adds	r2, r2, #1
   147b0:	adc	r3, r3, #0
   147b4:	adds	r8, r8, #1
   147b8:	adc	r9, r9, #0
   147bc:	cmp	r0, #0
   147c0:	strd	r2, [r5, #128]	; 0x80
   147c4:	strd	r8, [r5, #248]	; 0xf8
   147c8:	beq	147f8 <free_node_return@@Base+0x1ec>
   147cc:	add	r1, r5, #256	; 0x100
   147d0:	ldrd	r2, [r1]
   147d4:	adds	r2, r2, #1
   147d8:	adc	r3, r3, #0
   147dc:	strd	r2, [r1]
   147e0:	bl	13be8 <free_node@@Base>
   147e4:	add	r1, r5, #272	; 0x110
   147e8:	ldrd	r2, [r1, #-8]
   147ec:	adds	r2, r2, #1
   147f0:	adc	r3, r3, #0
   147f4:	strd	r2, [r1, #-8]
   147f8:	mov	r0, r6
   147fc:	bl	119a8 <free@plt>
   14800:	ldrd	r2, [r5, #168]	; 0xa8
   14804:	ldrd	r8, [r4, #8]
   14808:	adds	r2, r2, #1
   1480c:	adc	r3, r3, #0
   14810:	strd	r2, [r5, #168]	; 0xa8
   14814:	b	14710 <free_node_return@@Base+0x104>
   14818:	ldr	r5, [pc, #352]	; 14980 <free_node_return@@Base+0x374>
   1481c:	ldr	r0, [r6, #4]
   14820:	add	sl, r5, #272	; 0x110
   14824:	ldrd	r2, [r5, #136]	; 0x88
   14828:	ldrd	r8, [sl]
   1482c:	adds	r2, r2, #1
   14830:	adc	r3, r3, #0
   14834:	adds	r8, r8, #1
   14838:	adc	r9, r9, #0
   1483c:	cmp	r0, #0
   14840:	strd	r2, [r5, #136]	; 0x88
   14844:	strd	r8, [sl]
   14848:	beq	14870 <free_node_return@@Base+0x264>
   1484c:	ldrd	r2, [sl, #8]
   14850:	adds	r2, r2, #1
   14854:	adc	r3, r3, #0
   14858:	strd	r2, [sl, #8]
   1485c:	bl	13be8 <free_node@@Base>
   14860:	ldrd	r2, [sl, #16]
   14864:	adds	r2, r2, #1
   14868:	adc	r3, r3, #0
   1486c:	strd	r2, [sl, #16]
   14870:	ldr	r0, [r6, #8]
   14874:	bl	119a8 <free@plt>
   14878:	mov	r0, r6
   1487c:	bl	119a8 <free@plt>
   14880:	ldrd	r2, [r5, #176]	; 0xb0
   14884:	ldrd	r8, [r4, #8]
   14888:	adds	r2, r2, #1
   1488c:	adc	r3, r3, #0
   14890:	strd	r2, [r5, #176]	; 0xb0
   14894:	b	14710 <free_node_return@@Base+0x104>
   14898:	ldr	r5, [pc, #224]	; 14980 <free_node_return@@Base+0x374>
   1489c:	adds	r2, r2, #2
   148a0:	adc	r3, r3, #0
   148a4:	ldrd	r8, [r5, #144]	; 0x90
   148a8:	ldr	r0, [r6, #4]
   148ac:	strd	r2, [r4, #-8]
   148b0:	adds	r8, r8, #1
   148b4:	adc	r9, r9, #0
   148b8:	cmp	r0, #0
   148bc:	strd	r8, [r5, #144]	; 0x90
   148c0:	beq	14974 <free_node_return@@Base+0x368>
   148c4:	adds	sl, sl, #2
   148c8:	adc	fp, fp, #0
   148cc:	strd	sl, [r4]
   148d0:	bl	13be8 <free_node@@Base>
   148d4:	ldrd	r8, [r4, #8]
   148d8:	adds	r8, r8, #1
   148dc:	adc	r9, r9, #0
   148e0:	mov	r0, r6
   148e4:	bl	119a8 <free@plt>
   148e8:	ldrd	r2, [r5, #184]	; 0xb8
   148ec:	adds	r2, r2, #1
   148f0:	adc	r3, r3, #0
   148f4:	strd	r2, [r5, #184]	; 0xb8
   148f8:	b	14710 <free_node_return@@Base+0x104>
   148fc:	ldr	r5, [pc, #124]	; 14980 <free_node_return@@Base+0x374>
   14900:	mov	r0, r6
   14904:	ldrd	r2, [r5, #152]	; 0x98
   14908:	adds	r2, r2, #1
   1490c:	adc	r3, r3, #0
   14910:	strd	r2, [r5, #152]	; 0x98
   14914:	bl	13b44 <free_node_if@@Base>
   14918:	ldrd	r2, [r5, #192]	; 0xc0
   1491c:	ldrd	r8, [r4, #8]
   14920:	adds	r2, r2, #1
   14924:	adc	r3, r3, #0
   14928:	strd	r2, [r5, #192]	; 0xc0
   1492c:	b	14710 <free_node_return@@Base+0x104>
   14930:	ldr	r4, [pc, #72]	; 14980 <free_node_return@@Base+0x374>
   14934:	ldr	r3, [pc, #72]	; 14984 <free_node_return@@Base+0x378>
   14938:	mov	r2, #31
   1493c:	ldrd	r6, [r4, #112]	; 0x70
   14940:	ldr	r3, [r3]
   14944:	mov	r1, #1
   14948:	adds	r6, r6, #1
   1494c:	adc	r7, r7, #0
   14950:	ldr	r0, [pc, #48]	; 14988 <free_node_return@@Base+0x37c>
   14954:	strd	r6, [r4, #112]	; 0x70
   14958:	bl	119cc <fwrite@plt>
   1495c:	ldrd	r2, [r4, #208]	; 0xd0
   14960:	mov	r0, #1
   14964:	adds	r2, r2, #1
   14968:	adc	r3, r3, #0
   1496c:	strd	r2, [r4, #208]	; 0xd0
   14970:	bl	11a44 <exit@plt>
   14974:	ldrd	r8, [r4, #8]
   14978:	b	148e0 <free_node_return@@Base+0x2d4>
   1497c:	andeq	fp, r2, r8, asr r0
   14980:	andeq	sl, r2, r8, lsr #30
   14984:			; <UNDEFINED> instruction: 0x0002aab8
   14988:	muleq	r1, r4, r5

0001498c <free_node_function@@Base>:
   1498c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14990:	mov	r7, r0
   14994:	ldr	r4, [pc, #868]	; 14d00 <free_node_function@@Base+0x374>
   14998:	ldr	r6, [r0, #4]
   1499c:	ldrd	r2, [r4]
   149a0:	adds	r0, r2, #1
   149a4:	adc	r1, r3, #0
   149a8:	cmp	r6, #0
   149ac:	strd	r0, [r4]
   149b0:	beq	14a9c <free_node_function@@Base+0x110>
   149b4:	ldrd	sl, [r4, #8]
   149b8:	ldr	ip, [r6]
   149bc:	adds	r0, sl, #1
   149c0:	adc	r1, fp, #0
   149c4:	strd	r0, [r4, #8]
   149c8:	cmp	ip, #5
   149cc:	ldrls	pc, [pc, ip, lsl #2]
   149d0:	b	14cb4 <free_node_function@@Base+0x328>
   149d4:			; <UNDEFINED> instruction: 0x00014ab0
   149d8:	andeq	r4, r1, r4, lsr #22
   149dc:	muleq	r1, ip, fp
   149e0:	andeq	r4, r1, r8, lsl #24
   149e4:	andeq	r4, r1, r0, lsl #25
   149e8:	andeq	r4, r1, ip, ror #19
   149ec:	ldr	r5, [pc, #784]	; 14d04 <free_node_function@@Base+0x378>
   149f0:	ldr	r0, [r6, #4]
   149f4:	add	r8, r5, #320	; 0x140
   149f8:	ldrd	sl, [r5, #160]	; 0xa0
   149fc:	ldrd	r2, [r8]
   14a00:	adds	sl, sl, #1
   14a04:	adc	fp, fp, #0
   14a08:	adds	r2, r2, #1
   14a0c:	adc	r3, r3, #0
   14a10:	cmp	r0, #0
   14a14:	strd	sl, [r5, #160]	; 0xa0
   14a18:	strd	r2, [r8]
   14a1c:	beq	14a44 <free_node_function@@Base+0xb8>
   14a20:	ldrd	r2, [r8, #8]
   14a24:	adds	r2, r2, #1
   14a28:	adc	r3, r3, #0
   14a2c:	strd	r2, [r8, #8]
   14a30:	bl	13be8 <free_node@@Base>
   14a34:	ldrd	r2, [r8, #16]
   14a38:	adds	r2, r2, #1
   14a3c:	adc	r3, r3, #0
   14a40:	strd	r2, [r8, #16]
   14a44:	ldr	r0, [r6, #8]
   14a48:	bl	13be8 <free_node@@Base>
   14a4c:	ldrd	r2, [r8, #24]
   14a50:	ldr	r0, [r6, #12]
   14a54:	adds	r2, r2, #1
   14a58:	adc	r3, r3, #0
   14a5c:	strd	r2, [r8, #24]
   14a60:	bl	13be8 <free_node@@Base>
   14a64:	ldrd	r2, [r8, #32]
   14a68:	mov	r0, r6
   14a6c:	adds	r2, r2, #1
   14a70:	adc	r3, r3, #0
   14a74:	strd	r2, [r8, #32]
   14a78:	bl	119a8 <free@plt>
   14a7c:	ldrd	r2, [r5, #200]	; 0xc8
   14a80:	ldrd	r8, [r4, #16]
   14a84:	adds	r2, r2, #1
   14a88:	adc	r3, r3, #0
   14a8c:	strd	r2, [r5, #200]	; 0xc8
   14a90:	adds	r8, r8, #1
   14a94:	adc	r9, r9, #0
   14a98:	strd	r8, [r4, #16]
   14a9c:	ldr	r0, [r7, #8]
   14aa0:	bl	119a8 <free@plt>
   14aa4:	mov	r0, r7
   14aa8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aac:	b	119a8 <free@plt>
   14ab0:	ldr	r5, [pc, #588]	; 14d04 <free_node_function@@Base+0x378>
   14ab4:	ldr	r0, [r6, #4]
   14ab8:	ldrd	r2, [r5, #120]	; 0x78
   14abc:	ldrd	r8, [r5, #224]	; 0xe0
   14ac0:	adds	r2, r2, #1
   14ac4:	adc	r3, r3, #0
   14ac8:	adds	r8, r8, #1
   14acc:	adc	r9, r9, #0
   14ad0:	cmp	r0, #0
   14ad4:	strd	r2, [r5, #120]	; 0x78
   14ad8:	strd	r8, [r5, #224]	; 0xe0
   14adc:	beq	14b04 <free_node_function@@Base+0x178>
   14ae0:	ldrd	r2, [r5, #232]	; 0xe8
   14ae4:	adds	r2, r2, #1
   14ae8:	adc	r3, r3, #0
   14aec:	strd	r2, [r5, #232]	; 0xe8
   14af0:	bl	13be8 <free_node@@Base>
   14af4:	ldrd	r2, [r5, #240]	; 0xf0
   14af8:	adds	r2, r2, #1
   14afc:	adc	r3, r3, #0
   14b00:	strd	r2, [r5, #240]	; 0xf0
   14b04:	mov	r0, r6
   14b08:	bl	119a8 <free@plt>
   14b0c:	ldrd	r2, [r5, #216]	; 0xd8
   14b10:	ldrd	r8, [r4, #16]
   14b14:	adds	r2, r2, #1
   14b18:	adc	r3, r3, #0
   14b1c:	strd	r2, [r5, #216]	; 0xd8
   14b20:	b	14a90 <free_node_function@@Base+0x104>
   14b24:	ldr	r5, [pc, #472]	; 14d04 <free_node_function@@Base+0x378>
   14b28:	ldr	r0, [r6, #4]
   14b2c:	ldrd	r2, [r5, #128]	; 0x80
   14b30:	ldrd	r8, [r5, #248]	; 0xf8
   14b34:	adds	r2, r2, #1
   14b38:	adc	r3, r3, #0
   14b3c:	adds	r8, r8, #1
   14b40:	adc	r9, r9, #0
   14b44:	cmp	r0, #0
   14b48:	strd	r2, [r5, #128]	; 0x80
   14b4c:	strd	r8, [r5, #248]	; 0xf8
   14b50:	beq	14b7c <free_node_function@@Base+0x1f0>
   14b54:	add	r1, r5, #256	; 0x100
   14b58:	ldrd	r2, [r1]
   14b5c:	adds	r2, r2, #1
   14b60:	adc	r3, r3, #0
   14b64:	strd	r2, [r1]
   14b68:	bl	13be8 <free_node@@Base>
   14b6c:	ldrd	r2, [r4, #-8]
   14b70:	adds	r2, r2, #1
   14b74:	adc	r3, r3, #0
   14b78:	strd	r2, [r4, #-8]
   14b7c:	mov	r0, r6
   14b80:	bl	119a8 <free@plt>
   14b84:	ldrd	r2, [r5, #168]	; 0xa8
   14b88:	ldrd	r8, [r4, #16]
   14b8c:	adds	r2, r2, #1
   14b90:	adc	r3, r3, #0
   14b94:	strd	r2, [r5, #168]	; 0xa8
   14b98:	b	14a90 <free_node_function@@Base+0x104>
   14b9c:	ldr	r5, [pc, #352]	; 14d04 <free_node_function@@Base+0x378>
   14ba0:	adds	r2, r2, #2
   14ba4:	adc	r3, r3, #0
   14ba8:	ldrd	r8, [r5, #136]	; 0x88
   14bac:	ldr	r0, [r6, #4]
   14bb0:	strd	r2, [r4]
   14bb4:	adds	r8, r8, #1
   14bb8:	adc	r9, r9, #0
   14bbc:	cmp	r0, #0
   14bc0:	strd	r8, [r5, #136]	; 0x88
   14bc4:	beq	14cf8 <free_node_function@@Base+0x36c>
   14bc8:	adds	sl, sl, #2
   14bcc:	adc	fp, fp, #0
   14bd0:	strd	sl, [r4, #8]
   14bd4:	bl	13be8 <free_node@@Base>
   14bd8:	ldrd	r8, [r4, #16]
   14bdc:	adds	r8, r8, #1
   14be0:	adc	r9, r9, #0
   14be4:	ldr	r0, [r6, #8]
   14be8:	bl	119a8 <free@plt>
   14bec:	mov	r0, r6
   14bf0:	bl	119a8 <free@plt>
   14bf4:	ldrd	r2, [r5, #176]	; 0xb0
   14bf8:	adds	r2, r2, #1
   14bfc:	adc	r3, r3, #0
   14c00:	strd	r2, [r5, #176]	; 0xb0
   14c04:	b	14a90 <free_node_function@@Base+0x104>
   14c08:	ldr	r5, [pc, #244]	; 14d04 <free_node_function@@Base+0x378>
   14c0c:	ldr	r0, [r6, #4]
   14c10:	add	sl, r5, #304	; 0x130
   14c14:	ldrd	r2, [r5, #144]	; 0x90
   14c18:	ldrd	r8, [sl, #-8]
   14c1c:	adds	r2, r2, #1
   14c20:	adc	r3, r3, #0
   14c24:	adds	r8, r8, #1
   14c28:	adc	r9, r9, #0
   14c2c:	cmp	r0, #0
   14c30:	strd	r2, [r5, #144]	; 0x90
   14c34:	strd	r8, [sl, #-8]
   14c38:	beq	14c60 <free_node_function@@Base+0x2d4>
   14c3c:	ldrd	r2, [sl]
   14c40:	adds	r2, r2, #1
   14c44:	adc	r3, r3, #0
   14c48:	strd	r2, [sl]
   14c4c:	bl	13be8 <free_node@@Base>
   14c50:	ldrd	r2, [sl, #8]
   14c54:	adds	r2, r2, #1
   14c58:	adc	r3, r3, #0
   14c5c:	strd	r2, [sl, #8]
   14c60:	mov	r0, r6
   14c64:	bl	119a8 <free@plt>
   14c68:	ldrd	r2, [r5, #184]	; 0xb8
   14c6c:	ldrd	r8, [r4, #16]
   14c70:	adds	r2, r2, #1
   14c74:	adc	r3, r3, #0
   14c78:	strd	r2, [r5, #184]	; 0xb8
   14c7c:	b	14a90 <free_node_function@@Base+0x104>
   14c80:	ldr	r5, [pc, #124]	; 14d04 <free_node_function@@Base+0x378>
   14c84:	mov	r0, r6
   14c88:	ldrd	r2, [r5, #152]	; 0x98
   14c8c:	adds	r2, r2, #1
   14c90:	adc	r3, r3, #0
   14c94:	strd	r2, [r5, #152]	; 0x98
   14c98:	bl	13b44 <free_node_if@@Base>
   14c9c:	ldrd	r2, [r5, #192]	; 0xc0
   14ca0:	ldrd	r8, [r4, #16]
   14ca4:	adds	r2, r2, #1
   14ca8:	adc	r3, r3, #0
   14cac:	strd	r2, [r5, #192]	; 0xc0
   14cb0:	b	14a90 <free_node_function@@Base+0x104>
   14cb4:	ldr	r4, [pc, #72]	; 14d04 <free_node_function@@Base+0x378>
   14cb8:	ldr	r3, [pc, #72]	; 14d08 <free_node_function@@Base+0x37c>
   14cbc:	mov	r2, #31
   14cc0:	ldrd	r6, [r4, #112]	; 0x70
   14cc4:	ldr	r3, [r3]
   14cc8:	mov	r1, #1
   14ccc:	adds	r6, r6, #1
   14cd0:	adc	r7, r7, #0
   14cd4:	ldr	r0, [pc, #48]	; 14d0c <free_node_function@@Base+0x380>
   14cd8:	strd	r6, [r4, #112]	; 0x70
   14cdc:	bl	119cc <fwrite@plt>
   14ce0:	ldrd	r2, [r4, #208]	; 0xd0
   14ce4:	mov	r0, #1
   14ce8:	adds	r2, r2, #1
   14cec:	adc	r3, r3, #0
   14cf0:	strd	r2, [r4, #208]	; 0xd0
   14cf4:	bl	11a44 <exit@plt>
   14cf8:	ldrd	r8, [r4, #16]
   14cfc:	b	14be4 <free_node_function@@Base+0x258>
   14d00:	andeq	fp, r2, r8, lsr r0
   14d04:	andeq	sl, r2, r8, lsr #30
   14d08:			; <UNDEFINED> instruction: 0x0002aab8
   14d0c:	muleq	r1, r4, r5

00014d10 <free_node_boolean_operator@@Base>:
   14d10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d14:	mov	r6, r0
   14d18:	ldr	r4, [pc, #912]	; 150b0 <free_node_boolean_operator@@Base+0x3a0>
   14d1c:	ldr	r0, [r0, #4]
   14d20:	ldrd	r2, [r4]
   14d24:	adds	r2, r2, #1
   14d28:	adc	r3, r3, #0
   14d2c:	cmp	r0, #0
   14d30:	strd	r2, [r4]
   14d34:	beq	14d5c <free_node_boolean_operator@@Base+0x4c>
   14d38:	ldrd	r2, [r4, #8]
   14d3c:	adds	r2, r2, #1
   14d40:	adc	r3, r3, #0
   14d44:	strd	r2, [r4, #8]
   14d48:	bl	13be8 <free_node@@Base>
   14d4c:	ldrd	r2, [r4, #16]
   14d50:	adds	r2, r2, #1
   14d54:	adc	r3, r3, #0
   14d58:	strd	r2, [r4, #16]
   14d5c:	ldr	r0, [r6, #8]
   14d60:	bl	13be8 <free_node@@Base>
   14d64:	ldrd	r2, [r4, #24]
   14d68:	ldr	r7, [r6, #12]
   14d6c:	adds	r2, r2, #1
   14d70:	adc	r3, r3, #0
   14d74:	ldr	r1, [r7]
   14d78:	strd	r2, [r4, #24]
   14d7c:	cmp	r1, #5
   14d80:	ldrls	pc, [pc, r1, lsl #2]
   14d84:	b	1506c <free_node_boolean_operator@@Base+0x35c>
   14d88:	andeq	r4, r1, r0, asr lr
   14d8c:	andeq	r4, r1, r4, asr #29
   14d90:	andeq	r4, r1, r0, asr #30
   14d94:	andeq	r4, r1, r0, asr #31
   14d98:	andeq	r5, r1, r8, lsr r0
   14d9c:	andeq	r4, r1, r0, lsr #27
   14da0:	ldr	r5, [pc, #780]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   14da4:	ldrd	r2, [r4]
   14da8:	ldr	r0, [r7, #4]
   14dac:	ldrd	r8, [r5, #160]	; 0xa0
   14db0:	adds	r2, r2, #1
   14db4:	adc	r3, r3, #0
   14db8:	adds	r8, r8, #1
   14dbc:	adc	r9, r9, #0
   14dc0:	cmp	r0, #0
   14dc4:	strd	r8, [r5, #160]	; 0xa0
   14dc8:	strd	r2, [r4]
   14dcc:	beq	14df4 <free_node_boolean_operator@@Base+0xe4>
   14dd0:	ldrd	r2, [r4, #8]
   14dd4:	adds	r2, r2, #1
   14dd8:	adc	r3, r3, #0
   14ddc:	strd	r2, [r4, #8]
   14de0:	bl	13be8 <free_node@@Base>
   14de4:	ldrd	r2, [r4, #16]
   14de8:	adds	r2, r2, #1
   14dec:	adc	r3, r3, #0
   14df0:	strd	r2, [r4, #16]
   14df4:	ldr	r0, [r7, #8]
   14df8:	bl	13be8 <free_node@@Base>
   14dfc:	ldrd	r2, [r4, #24]
   14e00:	ldr	r0, [r7, #12]
   14e04:	adds	r2, r2, #1
   14e08:	adc	r3, r3, #0
   14e0c:	strd	r2, [r4, #24]
   14e10:	bl	13be8 <free_node@@Base>
   14e14:	ldrd	r8, [r4, #32]
   14e18:	mov	r0, r7
   14e1c:	adds	r8, r8, #1
   14e20:	adc	r9, r9, #0
   14e24:	bl	119a8 <free@plt>
   14e28:	ldrd	r2, [r5, #200]	; 0xc8
   14e2c:	adds	r2, r2, #1
   14e30:	adc	r3, r3, #0
   14e34:	strd	r2, [r5, #200]	; 0xc8
   14e38:	adds	r8, r8, #1
   14e3c:	adc	r9, r9, #0
   14e40:	mov	r0, r6
   14e44:	strd	r8, [r4, #32]
   14e48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e4c:	b	119a8 <free@plt>
   14e50:	ldr	r5, [pc, #604]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   14e54:	ldr	r0, [r7, #4]
   14e58:	ldrd	r2, [r5, #120]	; 0x78
   14e5c:	ldrd	r8, [r5, #224]	; 0xe0
   14e60:	adds	r2, r2, #1
   14e64:	adc	r3, r3, #0
   14e68:	adds	r8, r8, #1
   14e6c:	adc	r9, r9, #0
   14e70:	cmp	r0, #0
   14e74:	strd	r2, [r5, #120]	; 0x78
   14e78:	strd	r8, [r5, #224]	; 0xe0
   14e7c:	beq	14ea4 <free_node_boolean_operator@@Base+0x194>
   14e80:	ldrd	r2, [r5, #232]	; 0xe8
   14e84:	adds	r2, r2, #1
   14e88:	adc	r3, r3, #0
   14e8c:	strd	r2, [r5, #232]	; 0xe8
   14e90:	bl	13be8 <free_node@@Base>
   14e94:	ldrd	r2, [r5, #240]	; 0xf0
   14e98:	adds	r2, r2, #1
   14e9c:	adc	r3, r3, #0
   14ea0:	strd	r2, [r5, #240]	; 0xf0
   14ea4:	mov	r0, r7
   14ea8:	bl	119a8 <free@plt>
   14eac:	ldrd	r2, [r5, #216]	; 0xd8
   14eb0:	ldrd	r8, [r4, #32]
   14eb4:	adds	r2, r2, #1
   14eb8:	adc	r3, r3, #0
   14ebc:	strd	r2, [r5, #216]	; 0xd8
   14ec0:	b	14e38 <free_node_boolean_operator@@Base+0x128>
   14ec4:	ldr	r5, [pc, #488]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   14ec8:	ldr	r0, [r7, #4]
   14ecc:	ldrd	r2, [r5, #128]	; 0x80
   14ed0:	ldrd	r8, [r5, #248]	; 0xf8
   14ed4:	adds	r2, r2, #1
   14ed8:	adc	r3, r3, #0
   14edc:	adds	r8, r8, #1
   14ee0:	adc	r9, r9, #0
   14ee4:	cmp	r0, #0
   14ee8:	strd	r2, [r5, #128]	; 0x80
   14eec:	strd	r8, [r5, #248]	; 0xf8
   14ef0:	beq	14f20 <free_node_boolean_operator@@Base+0x210>
   14ef4:	add	r1, r5, #256	; 0x100
   14ef8:	ldrd	r2, [r1]
   14efc:	adds	r2, r2, #1
   14f00:	adc	r3, r3, #0
   14f04:	strd	r2, [r1]
   14f08:	bl	13be8 <free_node@@Base>
   14f0c:	add	r1, r5, #272	; 0x110
   14f10:	ldrd	r2, [r1, #-8]
   14f14:	adds	r2, r2, #1
   14f18:	adc	r3, r3, #0
   14f1c:	strd	r2, [r1, #-8]
   14f20:	mov	r0, r7
   14f24:	bl	119a8 <free@plt>
   14f28:	ldrd	r2, [r5, #168]	; 0xa8
   14f2c:	ldrd	r8, [r4, #32]
   14f30:	adds	r2, r2, #1
   14f34:	adc	r3, r3, #0
   14f38:	strd	r2, [r5, #168]	; 0xa8
   14f3c:	b	14e38 <free_node_boolean_operator@@Base+0x128>
   14f40:	ldr	r5, [pc, #364]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   14f44:	ldr	r0, [r7, #4]
   14f48:	add	sl, r5, #272	; 0x110
   14f4c:	ldrd	r2, [r5, #136]	; 0x88
   14f50:	ldrd	r8, [sl]
   14f54:	adds	r2, r2, #1
   14f58:	adc	r3, r3, #0
   14f5c:	adds	r8, r8, #1
   14f60:	adc	r9, r9, #0
   14f64:	cmp	r0, #0
   14f68:	strd	r2, [r5, #136]	; 0x88
   14f6c:	strd	r8, [sl]
   14f70:	beq	14f98 <free_node_boolean_operator@@Base+0x288>
   14f74:	ldrd	r2, [sl, #8]
   14f78:	adds	r2, r2, #1
   14f7c:	adc	r3, r3, #0
   14f80:	strd	r2, [sl, #8]
   14f84:	bl	13be8 <free_node@@Base>
   14f88:	ldrd	r2, [sl, #16]
   14f8c:	adds	r2, r2, #1
   14f90:	adc	r3, r3, #0
   14f94:	strd	r2, [sl, #16]
   14f98:	ldr	r0, [r7, #8]
   14f9c:	bl	119a8 <free@plt>
   14fa0:	mov	r0, r7
   14fa4:	bl	119a8 <free@plt>
   14fa8:	ldrd	r2, [r5, #176]	; 0xb0
   14fac:	ldrd	r8, [r4, #32]
   14fb0:	adds	r2, r2, #1
   14fb4:	adc	r3, r3, #0
   14fb8:	strd	r2, [r5, #176]	; 0xb0
   14fbc:	b	14e38 <free_node_boolean_operator@@Base+0x128>
   14fc0:	ldr	r5, [pc, #236]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   14fc4:	ldr	r0, [r7, #4]
   14fc8:	add	sl, r5, #304	; 0x130
   14fcc:	ldrd	r2, [r5, #144]	; 0x90
   14fd0:	ldrd	r8, [sl, #-8]
   14fd4:	adds	r2, r2, #1
   14fd8:	adc	r3, r3, #0
   14fdc:	adds	r8, r8, #1
   14fe0:	adc	r9, r9, #0
   14fe4:	cmp	r0, #0
   14fe8:	strd	r2, [r5, #144]	; 0x90
   14fec:	strd	r8, [sl, #-8]
   14ff0:	beq	15018 <free_node_boolean_operator@@Base+0x308>
   14ff4:	ldrd	r2, [sl]
   14ff8:	adds	r2, r2, #1
   14ffc:	adc	r3, r3, #0
   15000:	strd	r2, [sl]
   15004:	bl	13be8 <free_node@@Base>
   15008:	ldrd	r2, [sl, #8]
   1500c:	adds	r2, r2, #1
   15010:	adc	r3, r3, #0
   15014:	strd	r2, [sl, #8]
   15018:	mov	r0, r7
   1501c:	bl	119a8 <free@plt>
   15020:	ldrd	r2, [r5, #184]	; 0xb8
   15024:	ldrd	r8, [r4, #32]
   15028:	adds	r2, r2, #1
   1502c:	adc	r3, r3, #0
   15030:	strd	r2, [r5, #184]	; 0xb8
   15034:	b	14e38 <free_node_boolean_operator@@Base+0x128>
   15038:	ldr	r5, [pc, #116]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   1503c:	mov	r0, r7
   15040:	ldrd	r2, [r5, #152]	; 0x98
   15044:	adds	r2, r2, #1
   15048:	adc	r3, r3, #0
   1504c:	strd	r2, [r5, #152]	; 0x98
   15050:	bl	13b44 <free_node_if@@Base>
   15054:	ldrd	r2, [r5, #192]	; 0xc0
   15058:	ldrd	r8, [r4, #32]
   1505c:	adds	r2, r2, #1
   15060:	adc	r3, r3, #0
   15064:	strd	r2, [r5, #192]	; 0xc0
   15068:	b	14e38 <free_node_boolean_operator@@Base+0x128>
   1506c:	ldr	r4, [pc, #64]	; 150b4 <free_node_boolean_operator@@Base+0x3a4>
   15070:	ldr	r3, [pc, #64]	; 150b8 <free_node_boolean_operator@@Base+0x3a8>
   15074:	mov	r2, #31
   15078:	ldrd	r6, [r4, #112]	; 0x70
   1507c:	ldr	r3, [r3]
   15080:	mov	r1, #1
   15084:	adds	r6, r6, #1
   15088:	adc	r7, r7, #0
   1508c:	ldr	r0, [pc, #40]	; 150bc <free_node_boolean_operator@@Base+0x3ac>
   15090:	strd	r6, [r4, #112]	; 0x70
   15094:	bl	119cc <fwrite@plt>
   15098:	ldrd	r2, [r4, #208]	; 0xd0
   1509c:	mov	r0, #1
   150a0:	adds	r2, r2, #1
   150a4:	adc	r3, r3, #0
   150a8:	strd	r2, [r4, #208]	; 0xd0
   150ac:	bl	11a44 <exit@plt>
   150b0:	andeq	fp, r2, r8, rrx
   150b4:	andeq	sl, r2, r8, lsr #30
   150b8:			; <UNDEFINED> instruction: 0x0002aab8
   150bc:	muleq	r1, r4, r5

000150c0 <get_boolean_op_value@@Base>:
   150c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150c4:	mov	r1, #2
   150c8:	ldr	r4, [pc, #536]	; 152e8 <get_boolean_op_value@@Base+0x228>
   150cc:	ldr	r5, [r0, #4]
   150d0:	ldrd	r2, [r4, #-8]
   150d4:	mov	r0, r5
   150d8:	adds	r2, r2, #1
   150dc:	adc	r3, r3, #0
   150e0:	strd	r2, [r4, #-8]
   150e4:	bl	11ad4 <strnlen@plt>
   150e8:	cmp	r0, #2
   150ec:	beq	15158 <get_boolean_op_value@@Base+0x98>
   150f0:	ldrd	r2, [r4, #8]
   150f4:	ldrb	r1, [r5]
   150f8:	adds	r2, r2, #1
   150fc:	adc	r3, r3, #0
   15100:	cmp	r1, #60	; 0x3c
   15104:	strd	r2, [r4, #8]
   15108:	beq	151fc <get_boolean_op_value@@Base+0x13c>
   1510c:	cmp	r1, #62	; 0x3e
   15110:	beq	151dc <get_boolean_op_value@@Base+0x11c>
   15114:	cmp	r1, #33	; 0x21
   15118:	beq	151f4 <get_boolean_op_value@@Base+0x134>
   1511c:	ldrd	r6, [r4, #72]	; 0x48
   15120:	ldr	r3, [pc, #452]	; 152ec <get_boolean_op_value@@Base+0x22c>
   15124:	mov	r2, r5
   15128:	adds	r6, r6, #1
   1512c:	adc	r7, r7, #0
   15130:	ldr	r0, [r3]
   15134:	ldr	r1, [pc, #436]	; 152f0 <get_boolean_op_value@@Base+0x230>
   15138:	strd	r6, [r4, #72]	; 0x48
   1513c:	bl	11a68 <fprintf@plt>
   15140:	ldrd	r2, [r4, #96]	; 0x60
   15144:	mov	r0, #1
   15148:	adds	r2, r2, #1
   1514c:	adc	r3, r3, #0
   15150:	strd	r2, [r4, #96]	; 0x60
   15154:	bl	11a44 <exit@plt>
   15158:	ldrd	r8, [r4]
   1515c:	mov	r2, r0
   15160:	mov	r6, r0
   15164:	adds	r8, r8, #1
   15168:	adc	r9, r9, #0
   1516c:	ldr	r1, [pc, #384]	; 152f4 <get_boolean_op_value@@Base+0x234>
   15170:	mov	r0, r5
   15174:	strd	r8, [r4]
   15178:	bl	11b10 <strncmp@plt>
   1517c:	cmp	r0, #0
   15180:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15184:	ldrd	r8, [r4, #16]
   15188:	mov	r2, r6
   1518c:	ldr	r1, [pc, #356]	; 152f8 <get_boolean_op_value@@Base+0x238>
   15190:	adds	r8, r8, #1
   15194:	adc	r9, r9, #0
   15198:	mov	r0, r5
   1519c:	strd	r8, [r4, #16]
   151a0:	bl	11b10 <strncmp@plt>
   151a4:	cmp	r0, #0
   151a8:	beq	15214 <get_boolean_op_value@@Base+0x154>
   151ac:	ldrd	r8, [r4, #24]
   151b0:	mov	r2, r6
   151b4:	ldr	r1, [pc, #320]	; 152fc <get_boolean_op_value@@Base+0x23c>
   151b8:	adds	r8, r8, #1
   151bc:	adc	r9, r9, #0
   151c0:	mov	r0, r5
   151c4:	strd	r8, [r4, #24]
   151c8:	bl	11b10 <strncmp@plt>
   151cc:	cmp	r0, #0
   151d0:	bne	1521c <get_boolean_op_value@@Base+0x15c>
   151d4:	mov	r0, r6
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151dc:	ldrd	r2, [r4, #88]	; 0x58
   151e0:	mov	r0, #7
   151e4:	adds	r2, r2, #1
   151e8:	adc	r3, r3, #0
   151ec:	strd	r2, [r4, #88]	; 0x58
   151f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151f4:	mov	r0, #8
   151f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151fc:	ldrd	r2, [r4, #80]	; 0x50
   15200:	mov	r0, #6
   15204:	adds	r2, r2, #1
   15208:	adc	r3, r3, #0
   1520c:	strd	r2, [r4, #80]	; 0x50
   15210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15214:	mov	r0, #1
   15218:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1521c:	ldrd	r8, [r4, #32]
   15220:	mov	r2, r6
   15224:	ldr	r1, [pc, #212]	; 15300 <get_boolean_op_value@@Base+0x240>
   15228:	adds	r8, r8, #1
   1522c:	adc	r9, r9, #0
   15230:	mov	r0, r5
   15234:	strd	r8, [r4, #32]
   15238:	bl	11b10 <strncmp@plt>
   1523c:	cmp	r0, #0
   15240:	bne	1524c <get_boolean_op_value@@Base+0x18c>
   15244:	mov	r0, #3
   15248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1524c:	ldrd	r8, [r4, #40]	; 0x28
   15250:	mov	r2, r6
   15254:	ldr	r1, [pc, #168]	; 15304 <get_boolean_op_value@@Base+0x244>
   15258:	adds	r8, r8, #1
   1525c:	adc	r9, r9, #0
   15260:	mov	r0, r5
   15264:	strd	r8, [r4, #40]	; 0x28
   15268:	bl	11b10 <strncmp@plt>
   1526c:	cmp	r0, #0
   15270:	bne	1527c <get_boolean_op_value@@Base+0x1bc>
   15274:	mov	r0, #4
   15278:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1527c:	ldrd	r8, [r4, #48]	; 0x30
   15280:	mov	r2, r6
   15284:	ldr	r1, [pc, #124]	; 15308 <get_boolean_op_value@@Base+0x248>
   15288:	adds	r8, r8, #1
   1528c:	adc	r9, r9, #0
   15290:	mov	r0, r5
   15294:	strd	r8, [r4, #48]	; 0x30
   15298:	bl	11b10 <strncmp@plt>
   1529c:	cmp	r0, #0
   152a0:	bne	152ac <get_boolean_op_value@@Base+0x1ec>
   152a4:	mov	r0, #5
   152a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152ac:	ldrd	r6, [r4, #56]	; 0x38
   152b0:	ldr	r3, [pc, #52]	; 152ec <get_boolean_op_value@@Base+0x22c>
   152b4:	mov	r2, r5
   152b8:	adds	r6, r6, #1
   152bc:	adc	r7, r7, #0
   152c0:	ldr	r0, [r3]
   152c4:	ldr	r1, [pc, #36]	; 152f0 <get_boolean_op_value@@Base+0x230>
   152c8:	strd	r6, [r4, #56]	; 0x38
   152cc:	bl	11a68 <fprintf@plt>
   152d0:	ldrd	r2, [r4, #64]	; 0x40
   152d4:	mov	r0, #1
   152d8:	adds	r2, r2, #1
   152dc:	adc	r3, r3, #0
   152e0:	strd	r2, [r4, #64]	; 0x40
   152e4:	bl	11a44 <exit@plt>
   152e8:	muleq	r2, r8, r0
   152ec:			; <UNDEFINED> instruction: 0x0002aab8
   152f0:	andeq	r9, r1, ip, asr #11
   152f4:			; <UNDEFINED> instruction: 0x000195b4
   152f8:			; <UNDEFINED> instruction: 0x000195b8
   152fc:			; <UNDEFINED> instruction: 0x000195bc
   15300:	andeq	r9, r1, r0, asr #11
   15304:	andeq	r9, r1, r4, asr #11
   15308:	andeq	r9, r1, r8, asr #11

0001530c <init_grammar@@Base>:
   1530c:	ldr	ip, [pc, #20]	; 15328 <init_grammar@@Base+0x1c>
   15310:	str	r1, [r0]
   15314:	ldrd	r2, [ip]
   15318:	adds	r2, r2, #1
   1531c:	adc	r3, r3, #0
   15320:	strd	r2, [ip]
   15324:	bx	lr
   15328:	andeq	fp, r2, r0, lsl #2

0001532c <destroy_grammar@@Base>:
   1532c:	ldr	r1, [pc, #16]	; 15344 <destroy_grammar@@Base+0x18>
   15330:	ldrd	r2, [r1, #8]
   15334:	adds	r2, r2, #1
   15338:	adc	r3, r3, #0
   1533c:	strd	r2, [r1, #8]
   15340:	bx	lr
   15344:	andeq	fp, r2, r0, lsl #2

00015348 <read_return_expression@@Base>:
   15348:	push	{r4, r5, r6, r7, r8, lr}
   1534c:	mov	r5, r0
   15350:	ldr	r4, [pc, #256]	; 15458 <read_return_expression@@Base+0x110>
   15354:	ldr	r0, [r0]
   15358:	ldrd	r2, [r4, #16]
   1535c:	adds	r2, r2, #1
   15360:	adc	r3, r3, #0
   15364:	strd	r2, [r4, #16]
   15368:	bl	12684 <next@@Base>
   1536c:	ldrd	r2, [r4, #24]
   15370:	adds	r2, r2, #1
   15374:	adc	r3, r3, #0
   15378:	strd	r2, [r4, #24]
   1537c:	ldr	r1, [r0]
   15380:	cmp	r1, #1
   15384:	bne	1544c <read_return_expression@@Base+0x104>
   15388:	ldrd	r2, [r4, #32]
   1538c:	mov	r6, r0
   15390:	mov	r0, #12
   15394:	adds	r2, r2, #1
   15398:	adc	r3, r3, #0
   1539c:	strd	r2, [r4, #32]
   153a0:	bl	119fc <malloc@plt>
   153a4:	ldr	r1, [r6, #4]
   153a8:	mov	r7, r0
   153ac:	bl	13a38 <init_node_int@@Base>
   153b0:	ldrd	r2, [r4, #40]	; 0x28
   153b4:	mov	r0, r6
   153b8:	adds	r2, r2, #1
   153bc:	adc	r3, r3, #0
   153c0:	strd	r2, [r4, #40]	; 0x28
   153c4:	bl	122f0 <free_token_int_value@@Base>
   153c8:	ldrd	r2, [r4, #48]	; 0x30
   153cc:	mov	r0, #12
   153d0:	adds	r2, r2, #1
   153d4:	adc	r3, r3, #0
   153d8:	strd	r2, [r4, #48]	; 0x30
   153dc:	bl	119fc <malloc@plt>
   153e0:	mov	r1, r7
   153e4:	mov	r6, r0
   153e8:	bl	13aa0 <init_node_return@@Base>
   153ec:	ldrd	r2, [r4, #56]	; 0x38
   153f0:	ldr	r0, [r5]
   153f4:	adds	r2, r2, #1
   153f8:	adc	r3, r3, #0
   153fc:	strd	r2, [r4, #56]	; 0x38
   15400:	bl	12684 <next@@Base>
   15404:	ldrd	r2, [r4, #64]	; 0x40
   15408:	adds	r2, r2, #1
   1540c:	adc	r3, r3, #0
   15410:	strd	r2, [r4, #64]	; 0x40
   15414:	ldr	r3, [r0]
   15418:	cmp	r3, #8
   1541c:	bne	1544c <read_return_expression@@Base+0x104>
   15420:	ldrd	r2, [r4, #72]	; 0x48
   15424:	adds	r2, r2, #1
   15428:	adc	r3, r3, #0
   1542c:	strd	r2, [r4, #72]	; 0x48
   15430:	bl	123b4 <free_token_semicolon@@Base>
   15434:	ldrd	r2, [r4, #80]	; 0x50
   15438:	mov	r0, r6
   1543c:	adds	r2, r2, #1
   15440:	adc	r3, r3, #0
   15444:	strd	r2, [r4, #80]	; 0x50
   15448:	pop	{r4, r5, r6, r7, r8, pc}
   1544c:	mov	r6, #0
   15450:	mov	r0, r6
   15454:	pop	{r4, r5, r6, r7, r8, pc}
   15458:	andeq	fp, r2, r0, lsl #2

0001545c <read_boolean_unary_expression@@Base>:
   1545c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15460:	mov	r6, r0
   15464:	ldr	r4, [pc, #360]	; 155d4 <read_boolean_unary_expression@@Base+0x178>
   15468:	mov	r0, #20
   1546c:	ldrd	r2, [r4, #88]	; 0x58
   15470:	adds	r2, r2, #1
   15474:	adc	r3, r3, #0
   15478:	strd	r2, [r4, #88]	; 0x58
   1547c:	bl	119fc <malloc@plt>
   15480:	mov	r5, r0
   15484:	ldr	r0, [r6]
   15488:	bl	12684 <next@@Base>
   1548c:	ldr	r7, [r0]
   15490:	cmp	r7, #12
   15494:	bne	1556c <read_boolean_unary_expression@@Base+0x110>
   15498:	ldrd	r2, [r4, #104]	; 0x68
   1549c:	mov	r9, r0
   154a0:	adds	r2, r2, #1
   154a4:	adc	r3, r3, #0
   154a8:	strd	r2, [r4, #104]	; 0x68
   154ac:	bl	150c0 <get_boolean_op_value@@Base>
   154b0:	ldrd	r2, [r4, #120]	; 0x78
   154b4:	adds	r2, r2, #1
   154b8:	adc	r3, r3, #0
   154bc:	strd	r2, [r4, #120]	; 0x78
   154c0:	mov	r8, r0
   154c4:	mov	r0, r9
   154c8:	bl	12424 <free_token_boolean_op@@Base>
   154cc:	ldrd	r2, [r4, #128]	; 0x80
   154d0:	ldr	r0, [r6]
   154d4:	adds	r2, r2, #1
   154d8:	adc	r3, r3, #0
   154dc:	strd	r2, [r4, #128]	; 0x80
   154e0:	bl	12684 <next@@Base>
   154e4:	ldr	r3, [r0]
   154e8:	mov	r9, r0
   154ec:	cmp	r3, #1
   154f0:	bne	155a0 <read_boolean_unary_expression@@Base+0x144>
   154f4:	ldrd	r2, [r4, #144]	; 0x90
   154f8:	mov	r0, r7
   154fc:	adds	r2, r2, #1
   15500:	adc	r3, r3, #0
   15504:	strd	r2, [r4, #144]	; 0x90
   15508:	bl	119fc <malloc@plt>
   1550c:	ldr	r1, [r9, #4]
   15510:	mov	sl, r0
   15514:	bl	13a38 <init_node_int@@Base>
   15518:	ldrd	r6, [r4, #160]	; 0xa0
   1551c:	mov	r0, r9
   15520:	adds	r6, r6, #1
   15524:	adc	r7, r7, #0
   15528:	strd	r6, [r4, #160]	; 0xa0
   1552c:	bl	122f0 <free_token_int_value@@Base>
   15530:	ldrd	r6, [r4, #168]	; 0xa8
   15534:	mov	r2, sl
   15538:	mov	r0, r5
   1553c:	adds	r6, r6, #1
   15540:	adc	r7, r7, #0
   15544:	mov	r1, r8
   15548:	mov	r3, #0
   1554c:	strd	r6, [r4, #168]	; 0xa8
   15550:	bl	13b0c <init_node_boolean_operator@@Base>
   15554:	ldrd	r2, [r4, #176]	; 0xb0
   15558:	mov	r0, r5
   1555c:	adds	r2, r2, #1
   15560:	adc	r3, r3, #0
   15564:	strd	r2, [r4, #176]	; 0xb0
   15568:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1556c:	ldrd	r2, [r4, #96]	; 0x60
   15570:	mov	r0, r5
   15574:	mov	r5, #0
   15578:	adds	r2, r2, #1
   1557c:	adc	r3, r3, #0
   15580:	strd	r2, [r4, #96]	; 0x60
   15584:	bl	14d10 <free_node_boolean_operator@@Base>
   15588:	ldrd	r2, [r4, #112]	; 0x70
   1558c:	mov	r0, r5
   15590:	adds	r2, r2, #1
   15594:	adc	r3, r3, #0
   15598:	strd	r2, [r4, #112]	; 0x70
   1559c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155a0:	ldrd	r2, [r4, #136]	; 0x88
   155a4:	mov	r0, r5
   155a8:	mov	r5, #0
   155ac:	adds	r2, r2, #1
   155b0:	adc	r3, r3, #0
   155b4:	strd	r2, [r4, #136]	; 0x88
   155b8:	bl	14d10 <free_node_boolean_operator@@Base>
   155bc:	ldrd	r2, [r4, #152]	; 0x98
   155c0:	mov	r0, r5
   155c4:	adds	r2, r2, #1
   155c8:	adc	r3, r3, #0
   155cc:	strd	r2, [r4, #152]	; 0x98
   155d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155d4:	andeq	fp, r2, r0, lsl #2

000155d8 <read_boolean_binary_expression@@Base>:
   155d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155dc:	mov	r5, r0
   155e0:	ldr	r4, [pc, #584]	; 15830 <read_boolean_binary_expression@@Base+0x258>
   155e4:	ldr	r0, [r0]
   155e8:	ldrd	r2, [r4, #184]	; 0xb8
   155ec:	adds	r2, r2, #1
   155f0:	adc	r3, r3, #0
   155f4:	strd	r2, [r4, #184]	; 0xb8
   155f8:	bl	12684 <next@@Base>
   155fc:	ldr	r1, [r0]
   15600:	mov	r7, r0
   15604:	cmp	r1, #1
   15608:	beq	15678 <read_boolean_binary_expression@@Base+0xa0>
   1560c:	ldrd	r2, [r4, #192]	; 0xc0
   15610:	adds	r2, r2, #1
   15614:	adc	r3, r3, #0
   15618:	cmp	r1, #12
   1561c:	strd	r2, [r4, #192]	; 0xc0
   15620:	movne	r5, #0
   15624:	bne	15670 <read_boolean_binary_expression@@Base+0x98>
   15628:	ldrd	r2, [r4, #208]	; 0xd0
   1562c:	mov	r1, r0
   15630:	ldr	r0, [r5]
   15634:	adds	r2, r2, #1
   15638:	adc	r3, r3, #0
   1563c:	strd	r2, [r4, #208]	; 0xd0
   15640:	bl	124f8 <push_back@@Base>
   15644:	ldrd	r2, [r4, #216]	; 0xd8
   15648:	mov	r0, r5
   1564c:	adds	r2, r2, #1
   15650:	adc	r3, r3, #0
   15654:	strd	r2, [r4, #216]	; 0xd8
   15658:	bl	1545c <read_boolean_unary_expression@@Base>
   1565c:	ldrd	r2, [r4, #224]	; 0xe0
   15660:	adds	r2, r2, #1
   15664:	adc	r3, r3, #0
   15668:	strd	r2, [r4, #224]	; 0xe0
   1566c:	mov	r5, r0
   15670:	mov	r0, r5
   15674:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15678:	ldrd	r2, [r4, #200]	; 0xc8
   1567c:	mov	r0, #12
   15680:	adds	r2, r2, #1
   15684:	adc	r3, r3, #0
   15688:	strd	r2, [r4, #200]	; 0xc8
   1568c:	bl	119fc <malloc@plt>
   15690:	ldr	r1, [r7, #4]
   15694:	mov	r6, r0
   15698:	bl	13a38 <init_node_int@@Base>
   1569c:	ldrd	r2, [r4, #232]	; 0xe8
   156a0:	mov	r0, r7
   156a4:	adds	r2, r2, #1
   156a8:	adc	r3, r3, #0
   156ac:	strd	r2, [r4, #232]	; 0xe8
   156b0:	bl	122f0 <free_token_int_value@@Base>
   156b4:	ldrd	r2, [r4, #240]	; 0xf0
   156b8:	ldr	r0, [r5]
   156bc:	adds	r2, r2, #1
   156c0:	adc	r3, r3, #0
   156c4:	strd	r2, [r4, #240]	; 0xf0
   156c8:	bl	12684 <next@@Base>
   156cc:	ldr	r8, [r0]
   156d0:	mov	r9, r0
   156d4:	cmp	r8, #12
   156d8:	bne	157c8 <read_boolean_binary_expression@@Base+0x1f0>
   156dc:	add	r1, r4, #256	; 0x100
   156e0:	add	r7, r4, #288	; 0x120
   156e4:	ldrd	r2, [r1]
   156e8:	adds	r2, r2, #1
   156ec:	adc	r3, r3, #0
   156f0:	strd	r2, [r1]
   156f4:	bl	150c0 <get_boolean_op_value@@Base>
   156f8:	add	r1, r4, #272	; 0x110
   156fc:	ldrd	r2, [r1]
   15700:	adds	r2, r2, #1
   15704:	adc	r3, r3, #0
   15708:	strd	r2, [r1]
   1570c:	mov	sl, r0
   15710:	mov	r0, r9
   15714:	bl	12424 <free_token_boolean_op@@Base>
   15718:	ldrd	r2, [r7, #-8]
   1571c:	ldr	r0, [r5]
   15720:	adds	r2, r2, #1
   15724:	adc	r3, r3, #0
   15728:	strd	r2, [r7, #-8]
   1572c:	bl	12684 <next@@Base>
   15730:	ldr	r3, [r0]
   15734:	mov	r9, r0
   15738:	cmp	r3, #1
   1573c:	bne	157fc <read_boolean_binary_expression@@Base+0x224>
   15740:	add	r1, r4, #304	; 0x130
   15744:	mov	r0, r8
   15748:	ldrd	r2, [r1, #-8]
   1574c:	add	r5, r4, #320	; 0x140
   15750:	add	r4, r4, #336	; 0x150
   15754:	adds	r2, r2, #1
   15758:	adc	r3, r3, #0
   1575c:	strd	r2, [r1, #-8]
   15760:	bl	119fc <malloc@plt>
   15764:	ldr	r1, [r9, #4]
   15768:	mov	r7, r0
   1576c:	bl	13a38 <init_node_int@@Base>
   15770:	ldrd	r2, [r5, #-8]
   15774:	mov	r0, r9
   15778:	adds	r2, r2, #1
   1577c:	adc	r3, r3, #0
   15780:	strd	r2, [r5, #-8]
   15784:	bl	122f0 <free_token_int_value@@Base>
   15788:	ldrd	r2, [r5]
   1578c:	mov	r0, #20
   15790:	adds	r2, r2, #1
   15794:	adc	r3, r3, #0
   15798:	strd	r2, [r5]
   1579c:	bl	119fc <malloc@plt>
   157a0:	mov	r3, r7
   157a4:	mov	r2, r6
   157a8:	mov	r1, sl
   157ac:	mov	r5, r0
   157b0:	bl	13b0c <init_node_boolean_operator@@Base>
   157b4:	ldrd	r2, [r4, #-8]
   157b8:	adds	r2, r2, #1
   157bc:	adc	r3, r3, #0
   157c0:	strd	r2, [r4, #-8]
   157c4:	b	15670 <read_boolean_binary_expression@@Base+0x98>
   157c8:	ldrd	r2, [r4, #248]	; 0xf8
   157cc:	add	r4, r4, #272	; 0x110
   157d0:	mov	r0, r6
   157d4:	adds	r2, r2, #1
   157d8:	adc	r3, r3, #0
   157dc:	mov	r5, #0
   157e0:	strd	r2, [r4, #-24]	; 0xffffffe8
   157e4:	bl	13be8 <free_node@@Base>
   157e8:	ldrd	r2, [r4, #-8]
   157ec:	adds	r2, r2, #1
   157f0:	adc	r3, r3, #0
   157f4:	strd	r2, [r4, #-8]
   157f8:	b	15670 <read_boolean_binary_expression@@Base+0x98>
   157fc:	ldrd	r2, [r7]
   15800:	add	r4, r4, #304	; 0x130
   15804:	mov	r0, r6
   15808:	adds	r2, r2, #1
   1580c:	adc	r3, r3, #0
   15810:	mov	r5, #0
   15814:	strd	r2, [r7]
   15818:	bl	13be8 <free_node@@Base>
   1581c:	ldrd	r2, [r4]
   15820:	adds	r2, r2, #1
   15824:	adc	r3, r3, #0
   15828:	strd	r2, [r4]
   1582c:	b	15670 <read_boolean_binary_expression@@Base+0x98>
   15830:	andeq	fp, r2, r0, lsl #2

00015834 <read_single_boolean_expression@@Base>:
   15834:	cmp	r1, #0
   15838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1583c:	sub	sp, sp, #12
   15840:	beq	15a9c <read_single_boolean_expression@@Base+0x268>
   15844:	mov	r9, r3
   15848:	ldr	r3, [r2]
   1584c:	mov	r7, r2
   15850:	cmp	r3, #0
   15854:	beq	15b34 <read_single_boolean_expression@@Base+0x300>
   15858:	ldr	r4, [pc, #752]	; 15b50 <read_single_boolean_expression@@Base+0x31c>
   1585c:	mov	r6, r0
   15860:	add	r5, r4, #336	; 0x150
   15864:	ldrd	sl, [r4, #184]	; 0xb8
   15868:	ldrd	r2, [r5, #16]
   1586c:	ldr	r0, [r0]
   15870:	adds	sl, sl, #1
   15874:	adc	fp, fp, #0
   15878:	adds	r2, r2, #1
   1587c:	adc	r3, r3, #0
   15880:	strd	sl, [r4, #184]	; 0xb8
   15884:	strd	r2, [r5, #16]
   15888:	bl	12684 <next@@Base>
   1588c:	ldr	r1, [r0]
   15890:	mov	r8, r0
   15894:	cmp	r1, #1
   15898:	beq	15950 <read_single_boolean_expression@@Base+0x11c>
   1589c:	ldrd	r2, [r4, #192]	; 0xc0
   158a0:	adds	r2, r2, #1
   158a4:	adc	r3, r3, #0
   158a8:	cmp	r1, #12
   158ac:	strd	r2, [r4, #192]	; 0xc0
   158b0:	movne	r6, #0
   158b4:	bne	15900 <read_single_boolean_expression@@Base+0xcc>
   158b8:	ldrd	r2, [r4, #208]	; 0xd0
   158bc:	mov	r1, r0
   158c0:	ldr	r0, [r6]
   158c4:	adds	r2, r2, #1
   158c8:	adc	r3, r3, #0
   158cc:	strd	r2, [r4, #208]	; 0xd0
   158d0:	bl	124f8 <push_back@@Base>
   158d4:	ldrd	r2, [r4, #216]	; 0xd8
   158d8:	mov	r0, r6
   158dc:	adds	r2, r2, #1
   158e0:	adc	r3, r3, #0
   158e4:	strd	r2, [r4, #216]	; 0xd8
   158e8:	bl	1545c <read_boolean_unary_expression@@Base>
   158ec:	ldrd	r2, [r4, #224]	; 0xe0
   158f0:	adds	r2, r2, #1
   158f4:	adc	r3, r3, #0
   158f8:	strd	r2, [r4, #224]	; 0xe0
   158fc:	mov	r6, r0
   15900:	ldrd	r2, [r5, #32]
   15904:	mov	r0, #20
   15908:	adds	r2, r2, #1
   1590c:	adc	r3, r3, #0
   15910:	strd	r2, [r5, #32]
   15914:	bl	119fc <malloc@plt>
   15918:	mov	r3, r6
   1591c:	mov	r1, r9
   15920:	mov	r2, #0
   15924:	mov	r4, r0
   15928:	bl	13b0c <init_node_boolean_operator@@Base>
   1592c:	ldrd	r2, [r5, #40]	; 0x28
   15930:	mov	r1, #0
   15934:	str	r1, [r7]
   15938:	adds	r2, r2, #1
   1593c:	adc	r3, r3, #0
   15940:	strd	r2, [r5, #40]	; 0x28
   15944:	mov	r0, r4
   15948:	add	sp, sp, #12
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	ldrd	r2, [r4, #200]	; 0xc8
   15954:	mov	r0, #12
   15958:	adds	r2, r2, #1
   1595c:	adc	r3, r3, #0
   15960:	strd	r2, [r4, #200]	; 0xc8
   15964:	bl	119fc <malloc@plt>
   15968:	ldr	r1, [r8, #4]
   1596c:	str	r0, [sp]
   15970:	bl	13a38 <init_node_int@@Base>
   15974:	ldrd	r2, [r4, #232]	; 0xe8
   15978:	mov	r0, r8
   1597c:	adds	r2, r2, #1
   15980:	adc	r3, r3, #0
   15984:	strd	r2, [r4, #232]	; 0xe8
   15988:	bl	122f0 <free_token_int_value@@Base>
   1598c:	ldrd	r2, [r4, #240]	; 0xf0
   15990:	ldr	r0, [r6]
   15994:	adds	r2, r2, #1
   15998:	adc	r3, r3, #0
   1599c:	strd	r2, [r4, #240]	; 0xf0
   159a0:	bl	12684 <next@@Base>
   159a4:	ldr	fp, [r0]
   159a8:	mov	sl, r0
   159ac:	cmp	fp, #12
   159b0:	bne	15acc <read_single_boolean_expression@@Base+0x298>
   159b4:	add	r1, r4, #256	; 0x100
   159b8:	add	r8, r4, #288	; 0x120
   159bc:	ldrd	r2, [r1]
   159c0:	adds	r2, r2, #1
   159c4:	adc	r3, r3, #0
   159c8:	strd	r2, [r1]
   159cc:	bl	150c0 <get_boolean_op_value@@Base>
   159d0:	add	r1, r4, #272	; 0x110
   159d4:	ldrd	r2, [r1]
   159d8:	adds	r2, r2, #1
   159dc:	adc	r3, r3, #0
   159e0:	strd	r2, [r1]
   159e4:	str	r0, [sp, #4]
   159e8:	mov	r0, sl
   159ec:	bl	12424 <free_token_boolean_op@@Base>
   159f0:	ldrd	r2, [r8, #-8]
   159f4:	ldr	r0, [r6]
   159f8:	adds	r2, r2, #1
   159fc:	adc	r3, r3, #0
   15a00:	strd	r2, [r8, #-8]
   15a04:	bl	12684 <next@@Base>
   15a08:	ldr	r3, [r0]
   15a0c:	mov	r6, r0
   15a10:	cmp	r3, #1
   15a14:	bne	15b00 <read_single_boolean_expression@@Base+0x2cc>
   15a18:	add	r1, r4, #304	; 0x130
   15a1c:	mov	r0, fp
   15a20:	ldrd	r2, [r1, #-8]
   15a24:	add	r4, r4, #320	; 0x140
   15a28:	adds	r2, r2, #1
   15a2c:	adc	r3, r3, #0
   15a30:	strd	r2, [r1, #-8]
   15a34:	bl	119fc <malloc@plt>
   15a38:	ldr	r1, [r6, #4]
   15a3c:	mov	r8, r0
   15a40:	bl	13a38 <init_node_int@@Base>
   15a44:	ldrd	r2, [r4, #-8]
   15a48:	mov	r0, r6
   15a4c:	adds	r2, r2, #1
   15a50:	adc	r3, r3, #0
   15a54:	strd	r2, [r4, #-8]
   15a58:	bl	122f0 <free_token_int_value@@Base>
   15a5c:	ldrd	r2, [r4]
   15a60:	mov	r0, #20
   15a64:	adds	r2, r2, #1
   15a68:	adc	r3, r3, #0
   15a6c:	strd	r2, [r4]
   15a70:	bl	119fc <malloc@plt>
   15a74:	mov	r3, r8
   15a78:	ldr	r2, [sp]
   15a7c:	ldr	r1, [sp, #4]
   15a80:	mov	r6, r0
   15a84:	bl	13b0c <init_node_boolean_operator@@Base>
   15a88:	ldrd	r2, [r5, #-8]
   15a8c:	adds	r2, r2, #1
   15a90:	adc	r3, r3, #0
   15a94:	strd	r2, [r5, #-8]
   15a98:	b	15900 <read_single_boolean_expression@@Base+0xcc>
   15a9c:	ldr	r5, [pc, #176]	; 15b54 <read_single_boolean_expression@@Base+0x320>
   15aa0:	ldrd	r2, [r5]
   15aa4:	adds	r2, r2, #1
   15aa8:	adc	r3, r3, #0
   15aac:	strd	r2, [r5]
   15ab0:	bl	155d8 <read_boolean_binary_expression@@Base>
   15ab4:	ldrd	r2, [r5, #8]
   15ab8:	adds	r2, r2, #1
   15abc:	adc	r3, r3, #0
   15ac0:	strd	r2, [r5, #8]
   15ac4:	mov	r4, r0
   15ac8:	b	15944 <read_single_boolean_expression@@Base+0x110>
   15acc:	ldrd	r2, [r4, #248]	; 0xf8
   15ad0:	add	r4, r4, #272	; 0x110
   15ad4:	ldr	r0, [sp]
   15ad8:	adds	r2, r2, #1
   15adc:	adc	r3, r3, #0
   15ae0:	mov	r6, #0
   15ae4:	strd	r2, [r4, #-24]	; 0xffffffe8
   15ae8:	bl	13be8 <free_node@@Base>
   15aec:	ldrd	r2, [r4, #-8]
   15af0:	adds	r2, r2, #1
   15af4:	adc	r3, r3, #0
   15af8:	strd	r2, [r4, #-8]
   15afc:	b	15900 <read_single_boolean_expression@@Base+0xcc>
   15b00:	ldrd	r2, [r8]
   15b04:	add	r4, r4, #304	; 0x130
   15b08:	ldr	r0, [sp]
   15b0c:	adds	r2, r2, #1
   15b10:	adc	r3, r3, #0
   15b14:	mov	r6, #0
   15b18:	strd	r2, [r8]
   15b1c:	bl	13be8 <free_node@@Base>
   15b20:	ldrd	r2, [r4]
   15b24:	adds	r2, r2, #1
   15b28:	adc	r3, r3, #0
   15b2c:	strd	r2, [r4]
   15b30:	b	15900 <read_single_boolean_expression@@Base+0xcc>
   15b34:	ldr	r1, [pc, #24]	; 15b54 <read_single_boolean_expression@@Base+0x320>
   15b38:	ldr	r3, [r3, #4]
   15b3c:	ldrd	r2, [r1, #24]
   15b40:	adds	r2, r2, #1
   15b44:	adc	r3, r3, #0
   15b48:	strd	r2, [r1, #24]
   15b4c:	udf	#0
   15b50:	andeq	fp, r2, r0, lsl #2
   15b54:	andeq	fp, r2, r0, asr r2

00015b58 <read_boolean_expression@@Base>:
   15b58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b5c:	sub	sp, sp, #8
   15b60:	ldr	r4, [pc, #412]	; 15d04 <read_boolean_expression@@Base+0x1ac>
   15b64:	mov	r6, r0
   15b68:	mov	r5, #0
   15b6c:	ldrd	r2, [r4, #-8]
   15b70:	ldr	r0, [r0]
   15b74:	str	r5, [sp, #4]
   15b78:	adds	r2, r2, #1
   15b7c:	adc	r3, r3, #0
   15b80:	strd	r2, [r4, #-8]
   15b84:	bl	12684 <next@@Base>
   15b88:	ldrd	r2, [r4]
   15b8c:	adds	r2, r2, #1
   15b90:	adc	r3, r3, #0
   15b94:	strd	r2, [r4]
   15b98:	ldr	r1, [r0]
   15b9c:	cmp	r1, #4
   15ba0:	beq	15c4c <read_boolean_expression@@Base+0xf4>
   15ba4:	mov	r8, #1
   15ba8:	ldrd	r2, [r4, #72]	; 0x48
   15bac:	adds	r2, r2, #1
   15bb0:	adc	r3, r3, #0
   15bb4:	cmp	r1, #3
   15bb8:	strd	r2, [r4, #72]	; 0x48
   15bbc:	beq	15c00 <read_boolean_expression@@Base+0xa8>
   15bc0:	cmp	r1, #12
   15bc4:	beq	15cd4 <read_boolean_expression@@Base+0x17c>
   15bc8:	cmp	r1, #1
   15bcc:	beq	15c7c <read_boolean_expression@@Base+0x124>
   15bd0:	ldr	r3, [pc, #304]	; 15d08 <read_boolean_expression@@Base+0x1b0>
   15bd4:	mov	r2, #33	; 0x21
   15bd8:	mov	r1, #1
   15bdc:	ldr	r3, [r3]
   15be0:	ldr	r0, [pc, #292]	; 15d0c <read_boolean_expression@@Base+0x1b4>
   15be4:	bl	119cc <fwrite@plt>
   15be8:	ldrd	r2, [r4, #56]	; 0x38
   15bec:	mov	r0, #1
   15bf0:	adds	r2, r2, #1
   15bf4:	adc	r3, r3, #0
   15bf8:	strd	r2, [r4, #56]	; 0x38
   15bfc:	bl	11a44 <exit@plt>
   15c00:	ldrd	sl, [r4, #16]
   15c04:	mov	r1, r5
   15c08:	mov	r3, r7
   15c0c:	adds	sl, sl, #1
   15c10:	adc	fp, fp, #0
   15c14:	add	r2, sp, #4
   15c18:	mov	r0, r6
   15c1c:	strd	sl, [r4, #16]
   15c20:	bl	15834 <read_single_boolean_expression@@Base>
   15c24:	ldrd	r2, [r4, #48]	; 0x30
   15c28:	adds	r2, r2, #1
   15c2c:	adc	r3, r3, #0
   15c30:	strd	r2, [r4, #48]	; 0x30
   15c34:	mov	r5, r0
   15c38:	ldr	r0, [r6]
   15c3c:	bl	12684 <next@@Base>
   15c40:	ldr	r1, [r0]
   15c44:	cmp	r1, #4
   15c48:	bne	15ba8 <read_boolean_expression@@Base+0x50>
   15c4c:	ldrd	r2, [r4, #80]	; 0x50
   15c50:	adds	r2, r2, #1
   15c54:	adc	r3, r3, #0
   15c58:	strd	r2, [r4, #80]	; 0x50
   15c5c:	bl	12344 <free_token_cpar@@Base>
   15c60:	ldrd	r2, [r4, #88]	; 0x58
   15c64:	mov	r0, r5
   15c68:	adds	r2, r2, #1
   15c6c:	adc	r3, r3, #0
   15c70:	strd	r2, [r4, #88]	; 0x58
   15c74:	add	sp, sp, #8
   15c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c7c:	ldrd	r2, [r4, #8]
   15c80:	mov	r1, r0
   15c84:	ldr	r0, [r6]
   15c88:	adds	r2, r2, #1
   15c8c:	adc	r3, r3, #0
   15c90:	strd	r2, [r4, #8]
   15c94:	bl	124f8 <push_back@@Base>
   15c98:	ldrd	sl, [r4, #32]
   15c9c:	mov	r1, r5
   15ca0:	mov	r3, r7
   15ca4:	adds	sl, sl, #1
   15ca8:	adc	fp, fp, #0
   15cac:	add	r2, sp, #4
   15cb0:	mov	r0, r6
   15cb4:	strd	sl, [r4, #32]
   15cb8:	bl	15834 <read_single_boolean_expression@@Base>
   15cbc:	ldrd	r2, [r4, #64]	; 0x40
   15cc0:	adds	r2, r2, #1
   15cc4:	adc	r3, r3, #0
   15cc8:	strd	r2, [r4, #64]	; 0x40
   15ccc:	mov	r5, r0
   15cd0:	b	15c38 <read_boolean_expression@@Base+0xe0>
   15cd4:	ldrd	r2, [r4, #24]
   15cd8:	adds	r2, r2, #1
   15cdc:	adc	r3, r3, #0
   15ce0:	strd	r2, [r4, #24]
   15ce4:	bl	150c0 <get_boolean_op_value@@Base>
   15ce8:	ldrd	r2, [r4, #40]	; 0x28
   15cec:	str	r8, [sp, #4]
   15cf0:	adds	r2, r2, #1
   15cf4:	adc	r3, r3, #0
   15cf8:	strd	r2, [r4, #40]	; 0x28
   15cfc:	mov	r7, r0
   15d00:	b	15c38 <read_boolean_expression@@Base+0xe0>
   15d04:	muleq	r2, r0, r2
   15d08:			; <UNDEFINED> instruction: 0x0002aab8
   15d0c:	andeq	r9, r1, r4, asr r6

00015d10 <read_if_statement@@Base>:
   15d10:	push	{r4, r5, r6, r7, r8, lr}
   15d14:	mov	r5, r0
   15d18:	ldr	r4, [pc, #332]	; 15e6c <read_if_statement@@Base+0x15c>
   15d1c:	ldr	r0, [r0]
   15d20:	ldrd	r2, [r4]
   15d24:	adds	r2, r2, #1
   15d28:	adc	r3, r3, #0
   15d2c:	strd	r2, [r4]
   15d30:	bl	12684 <next@@Base>
   15d34:	ldrd	r2, [r4, #8]
   15d38:	adds	r2, r2, #1
   15d3c:	adc	r3, r3, #0
   15d40:	strd	r2, [r4, #8]
   15d44:	ldr	r3, [r0]
   15d48:	cmp	r3, #3
   15d4c:	movne	r5, #0
   15d50:	bne	15e20 <read_if_statement@@Base+0x110>
   15d54:	ldrd	r2, [r4, #16]
   15d58:	adds	r2, r2, #1
   15d5c:	adc	r3, r3, #0
   15d60:	strd	r2, [r4, #16]
   15d64:	bl	12328 <free_token_opar@@Base>
   15d68:	ldrd	r2, [r4, #24]
   15d6c:	mov	r0, r5
   15d70:	adds	r2, r2, #1
   15d74:	adc	r3, r3, #0
   15d78:	strd	r2, [r4, #24]
   15d7c:	bl	15b58 <read_boolean_expression@@Base>
   15d80:	ldrd	r2, [r4, #32]
   15d84:	adds	r2, r2, #1
   15d88:	adc	r3, r3, #0
   15d8c:	strd	r2, [r4, #32]
   15d90:	mov	r6, r0
   15d94:	mov	r0, r5
   15d98:	bl	15e70 <read_body@@Base>
   15d9c:	ldrd	r2, [r4, #40]	; 0x28
   15da0:	adds	r2, r2, #1
   15da4:	adc	r3, r3, #0
   15da8:	strd	r2, [r4, #40]	; 0x28
   15dac:	mov	r7, r0
   15db0:	ldr	r0, [r5]
   15db4:	bl	12684 <next@@Base>
   15db8:	ldr	r3, [r0]
   15dbc:	mov	r1, r0
   15dc0:	cmp	r3, #11
   15dc4:	beq	15e28 <read_if_statement@@Base+0x118>
   15dc8:	ldrd	r2, [r4, #56]	; 0x38
   15dcc:	ldr	r0, [r5]
   15dd0:	mov	r8, #0
   15dd4:	adds	r2, r2, #1
   15dd8:	adc	r3, r3, #0
   15ddc:	strd	r2, [r4, #56]	; 0x38
   15de0:	bl	124f8 <push_back@@Base>
   15de4:	ldrd	r2, [r4, #80]	; 0x50
   15de8:	adds	r2, r2, #1
   15dec:	adc	r3, r3, #0
   15df0:	strd	r2, [r4, #80]	; 0x50
   15df4:	mov	r0, #20
   15df8:	bl	119fc <malloc@plt>
   15dfc:	mov	r3, r8
   15e00:	mov	r2, r7
   15e04:	mov	r1, r6
   15e08:	mov	r5, r0
   15e0c:	bl	13ad0 <init_node_if@@Base>
   15e10:	ldrd	r2, [r4, #88]	; 0x58
   15e14:	adds	r2, r2, #1
   15e18:	adc	r3, r3, #0
   15e1c:	strd	r2, [r4, #88]	; 0x58
   15e20:	mov	r0, r5
   15e24:	pop	{r4, r5, r6, r7, r8, pc}
   15e28:	ldrd	r2, [r4, #48]	; 0x30
   15e2c:	adds	r2, r2, #1
   15e30:	adc	r3, r3, #0
   15e34:	strd	r2, [r4, #48]	; 0x30
   15e38:	bl	12408 <free_token_else@@Base>
   15e3c:	ldrd	r2, [r4, #64]	; 0x40
   15e40:	mov	r0, r5
   15e44:	adds	r2, r2, #1
   15e48:	adc	r3, r3, #0
   15e4c:	strd	r2, [r4, #64]	; 0x40
   15e50:	bl	15e70 <read_body@@Base>
   15e54:	ldrd	r2, [r4, #72]	; 0x48
   15e58:	adds	r2, r2, #1
   15e5c:	adc	r3, r3, #0
   15e60:	strd	r2, [r4, #72]	; 0x48
   15e64:	mov	r8, r0
   15e68:	b	15df4 <read_if_statement@@Base+0xe4>
   15e6c:	strdeq	fp, [r2], -r0

00015e70 <read_body@@Base>:
   15e70:	push	{r4, r5, r6, r7, r8, lr}
   15e74:	mov	r5, r0
   15e78:	ldr	r4, [pc, #456]	; 16048 <read_body@@Base+0x1d8>
   15e7c:	ldr	r0, [r0]
   15e80:	ldrd	r2, [r4]
   15e84:	adds	r2, r2, #1
   15e88:	adc	r3, r3, #0
   15e8c:	strd	r2, [r4]
   15e90:	bl	12684 <next@@Base>
   15e94:	ldrd	r2, [r4, #8]
   15e98:	adds	r2, r2, #1
   15e9c:	adc	r3, r3, #0
   15ea0:	strd	r2, [r4, #8]
   15ea4:	ldr	r3, [r0]
   15ea8:	cmp	r3, #5
   15eac:	movne	r6, #0
   15eb0:	bne	15fd0 <read_body@@Base+0x160>
   15eb4:	ldrd	r2, [r4, #16]
   15eb8:	adds	r2, r2, #1
   15ebc:	adc	r3, r3, #0
   15ec0:	strd	r2, [r4, #16]
   15ec4:	bl	12360 <free_token_obra@@Base>
   15ec8:	ldrd	r2, [r4, #24]
   15ecc:	ldr	r0, [r5]
   15ed0:	adds	r2, r2, #1
   15ed4:	adc	r3, r3, #0
   15ed8:	strd	r2, [r4, #24]
   15edc:	bl	12684 <next@@Base>
   15ee0:	ldrd	r2, [r4, #32]
   15ee4:	adds	r2, r2, #1
   15ee8:	adc	r3, r3, #0
   15eec:	strd	r2, [r4, #32]
   15ef0:	ldr	ip, [r0]
   15ef4:	mov	r1, r0
   15ef8:	cmp	ip, #6
   15efc:	beq	16040 <read_body@@Base+0x1d0>
   15f00:	mov	r7, #0
   15f04:	mov	r6, r7
   15f08:	ldrd	r2, [r4, #104]	; 0x68
   15f0c:	adds	r2, r2, #1
   15f10:	adc	r3, r3, #0
   15f14:	cmp	ip, #7
   15f18:	strd	r2, [r4, #104]	; 0x68
   15f1c:	beq	15ff8 <read_body@@Base+0x188>
   15f20:	cmp	ip, #10
   15f24:	mov	r0, r1
   15f28:	bne	15fd8 <read_body@@Base+0x168>
   15f2c:	ldrd	r2, [r4, #48]	; 0x30
   15f30:	adds	r2, r2, #1
   15f34:	adc	r3, r3, #0
   15f38:	strd	r2, [r4, #48]	; 0x30
   15f3c:	bl	123ec <free_token_if@@Base>
   15f40:	ldrd	r2, [r4, #64]	; 0x40
   15f44:	mov	r0, r5
   15f48:	adds	r2, r2, #1
   15f4c:	adc	r3, r3, #0
   15f50:	strd	r2, [r4, #64]	; 0x40
   15f54:	bl	15d10 <read_if_statement@@Base>
   15f58:	ldrd	r2, [r4, #72]	; 0x48
   15f5c:	adds	r2, r2, #1
   15f60:	adc	r3, r3, #0
   15f64:	strd	r2, [r4, #72]	; 0x48
   15f68:	mov	r8, r0
   15f6c:	cmp	r6, #0
   15f70:	moveq	r6, r8
   15f74:	beq	15f8c <read_body@@Base+0x11c>
   15f78:	ldrd	r2, [r4, #96]	; 0x60
   15f7c:	str	r8, [r7, #4]
   15f80:	adds	r2, r2, #1
   15f84:	adc	r3, r3, #0
   15f88:	strd	r2, [r4, #96]	; 0x60
   15f8c:	ldr	r0, [r5]
   15f90:	bl	12684 <next@@Base>
   15f94:	mov	r7, r8
   15f98:	ldr	ip, [r0]
   15f9c:	mov	r1, r0
   15fa0:	cmp	ip, #6
   15fa4:	bne	15f08 <read_body@@Base+0x98>
   15fa8:	ldrd	r2, [r4, #112]	; 0x70
   15fac:	mov	r0, r1
   15fb0:	adds	r2, r2, #1
   15fb4:	adc	r3, r3, #0
   15fb8:	strd	r2, [r4, #112]	; 0x70
   15fbc:	bl	1237c <free_token_cbra@@Base>
   15fc0:	ldrd	r2, [r4, #120]	; 0x78
   15fc4:	adds	r2, r2, #1
   15fc8:	adc	r3, r3, #0
   15fcc:	strd	r2, [r4, #120]	; 0x78
   15fd0:	mov	r0, r6
   15fd4:	pop	{r4, r5, r6, r7, r8, pc}
   15fd8:	ldr	r0, [r5]
   15fdc:	bl	124f8 <push_back@@Base>
   15fe0:	ldrd	r2, [r4, #80]	; 0x50
   15fe4:	mov	r0, r6
   15fe8:	adds	r2, r2, #1
   15fec:	adc	r3, r3, #0
   15ff0:	strd	r2, [r4, #80]	; 0x50
   15ff4:	pop	{r4, r5, r6, r7, r8, pc}
   15ff8:	ldrd	r2, [r4, #40]	; 0x28
   15ffc:	mov	r0, r1
   16000:	adds	r2, r2, #1
   16004:	adc	r3, r3, #0
   16008:	strd	r2, [r4, #40]	; 0x28
   1600c:	bl	12398 <free_token_return@@Base>
   16010:	ldrd	r2, [r4, #56]	; 0x38
   16014:	mov	r0, r5
   16018:	adds	r2, r2, #1
   1601c:	adc	r3, r3, #0
   16020:	strd	r2, [r4, #56]	; 0x38
   16024:	bl	15348 <read_return_expression@@Base>
   16028:	ldrd	r2, [r4, #88]	; 0x58
   1602c:	adds	r2, r2, #1
   16030:	adc	r3, r3, #0
   16034:	strd	r2, [r4, #88]	; 0x58
   16038:	mov	r8, r0
   1603c:	b	15f6c <read_body@@Base+0xfc>
   16040:	mov	r6, #0
   16044:	b	15fa8 <read_body@@Base+0x138>
   16048:	andeq	fp, r2, r0, asr r3

0001604c <read_function_ast_node@@Base>:
   1604c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16050:	mov	r5, r0
   16054:	ldr	r4, [pc, #396]	; 161e8 <read_function_ast_node@@Base+0x19c>
   16058:	ldr	r0, [r0]
   1605c:	ldrd	r2, [r4]
   16060:	adds	r2, r2, #1
   16064:	adc	r3, r3, #0
   16068:	strd	r2, [r4]
   1606c:	bl	12684 <next@@Base>
   16070:	ldrd	r2, [r4, #8]
   16074:	adds	r2, r2, #1
   16078:	adc	r3, r3, #0
   1607c:	strd	r2, [r4, #8]
   16080:	ldr	r3, [r0]
   16084:	cmp	r3, #0
   16088:	bne	161dc <read_function_ast_node@@Base+0x190>
   1608c:	ldrd	r2, [r4, #16]
   16090:	adds	r2, r2, #1
   16094:	adc	r3, r3, #0
   16098:	strd	r2, [r4, #16]
   1609c:	bl	122d4 <free_token_int_type@@Base>
   160a0:	ldrd	r2, [r4, #24]
   160a4:	ldr	r0, [r5]
   160a8:	adds	r2, r2, #1
   160ac:	adc	r3, r3, #0
   160b0:	strd	r2, [r4, #24]
   160b4:	bl	12684 <next@@Base>
   160b8:	ldrd	r2, [r4, #32]
   160bc:	adds	r2, r2, #1
   160c0:	adc	r3, r3, #0
   160c4:	strd	r2, [r4, #32]
   160c8:	ldr	r1, [r0]
   160cc:	mov	r6, r0
   160d0:	cmp	r1, #2
   160d4:	bne	161dc <read_function_ast_node@@Base+0x190>
   160d8:	ldrd	r2, [r4, #40]	; 0x28
   160dc:	ldr	r0, [r5]
   160e0:	adds	r2, r2, #1
   160e4:	adc	r3, r3, #0
   160e8:	strd	r2, [r4, #40]	; 0x28
   160ec:	bl	12684 <next@@Base>
   160f0:	ldrd	r2, [r4, #48]	; 0x30
   160f4:	adds	r2, r2, #1
   160f8:	adc	r3, r3, #0
   160fc:	strd	r2, [r4, #48]	; 0x30
   16100:	ldr	r3, [r0]
   16104:	cmp	r3, #3
   16108:	bne	161dc <read_function_ast_node@@Base+0x190>
   1610c:	ldrd	r2, [r4, #56]	; 0x38
   16110:	adds	r2, r2, #1
   16114:	adc	r3, r3, #0
   16118:	strd	r2, [r4, #56]	; 0x38
   1611c:	bl	12328 <free_token_opar@@Base>
   16120:	ldrd	r2, [r4, #64]	; 0x40
   16124:	ldr	r0, [r5]
   16128:	adds	r2, r2, #1
   1612c:	adc	r3, r3, #0
   16130:	strd	r2, [r4, #64]	; 0x40
   16134:	bl	12684 <next@@Base>
   16138:	ldrd	r2, [r4, #72]	; 0x48
   1613c:	adds	r2, r2, #1
   16140:	adc	r3, r3, #0
   16144:	strd	r2, [r4, #72]	; 0x48
   16148:	ldr	r3, [r0]
   1614c:	cmp	r3, #4
   16150:	bne	161dc <read_function_ast_node@@Base+0x190>
   16154:	ldrd	r2, [r4, #80]	; 0x50
   16158:	adds	r2, r2, #1
   1615c:	adc	r3, r3, #0
   16160:	strd	r2, [r4, #80]	; 0x50
   16164:	bl	12344 <free_token_cpar@@Base>
   16168:	ldrd	r2, [r4, #88]	; 0x58
   1616c:	mov	r0, r5
   16170:	adds	r2, r2, #1
   16174:	adc	r3, r3, #0
   16178:	strd	r2, [r4, #88]	; 0x58
   1617c:	bl	15e70 <read_body@@Base>
   16180:	ldrd	r8, [r4, #96]	; 0x60
   16184:	adds	r8, r8, #1
   16188:	adc	r9, r9, #0
   1618c:	strd	r8, [r4, #96]	; 0x60
   16190:	mov	r7, r0
   16194:	mov	r0, #16
   16198:	bl	119fc <malloc@plt>
   1619c:	mov	r2, r7
   161a0:	ldr	r1, [r6, #4]
   161a4:	mov	r5, r0
   161a8:	bl	13a68 <init_node_function@@Base>
   161ac:	ldrd	r2, [r4, #104]	; 0x68
   161b0:	mov	r0, r6
   161b4:	adds	r2, r2, #1
   161b8:	adc	r3, r3, #0
   161bc:	strd	r2, [r4, #104]	; 0x68
   161c0:	bl	1230c <free_token_function@@Base>
   161c4:	ldrd	r2, [r4, #112]	; 0x70
   161c8:	mov	r0, r5
   161cc:	adds	r2, r2, #1
   161d0:	adc	r3, r3, #0
   161d4:	strd	r2, [r4, #112]	; 0x70
   161d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161dc:	mov	r5, #0
   161e0:	mov	r0, r5
   161e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161e8:	ldrdeq	fp, [r2], -r0

000161ec <build_ast@@Base>:
   161ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161f0:	mov	r6, r0
   161f4:	ldr	r5, [pc, #428]	; 163a8 <build_ast@@Base+0x1bc>
   161f8:	ldr	r0, [r0]
   161fc:	mov	r4, r5
   16200:	ldrd	r2, [r5, #-8]
   16204:	ldrd	r8, [r4, #-128]!	; 0xffffff80
   16208:	adds	r2, r2, #1
   1620c:	adc	r3, r3, #0
   16210:	adds	r8, r8, #1
   16214:	adc	r9, r9, #0
   16218:	strd	r2, [r5, #-8]
   1621c:	strd	r8, [r4]
   16220:	bl	12684 <next@@Base>
   16224:	ldrd	r2, [r4, #8]
   16228:	adds	r2, r2, #1
   1622c:	adc	r3, r3, #0
   16230:	strd	r2, [r4, #8]
   16234:	ldr	r3, [r0]
   16238:	cmp	r3, #0
   1623c:	bne	1638c <build_ast@@Base+0x1a0>
   16240:	ldrd	r2, [r4, #16]
   16244:	adds	r2, r2, #1
   16248:	adc	r3, r3, #0
   1624c:	strd	r2, [r4, #16]
   16250:	bl	122d4 <free_token_int_type@@Base>
   16254:	ldrd	r2, [r4, #24]
   16258:	ldr	r0, [r6]
   1625c:	adds	r2, r2, #1
   16260:	adc	r3, r3, #0
   16264:	strd	r2, [r4, #24]
   16268:	bl	12684 <next@@Base>
   1626c:	ldrd	r2, [r4, #32]
   16270:	adds	r2, r2, #1
   16274:	adc	r3, r3, #0
   16278:	strd	r2, [r4, #32]
   1627c:	ldr	r1, [r0]
   16280:	mov	r7, r0
   16284:	cmp	r1, #2
   16288:	bne	1638c <build_ast@@Base+0x1a0>
   1628c:	ldrd	r2, [r4, #40]	; 0x28
   16290:	ldr	r0, [r6]
   16294:	adds	r2, r2, #1
   16298:	adc	r3, r3, #0
   1629c:	strd	r2, [r4, #40]	; 0x28
   162a0:	bl	12684 <next@@Base>
   162a4:	ldrd	r2, [r4, #48]	; 0x30
   162a8:	adds	r2, r2, #1
   162ac:	adc	r3, r3, #0
   162b0:	strd	r2, [r4, #48]	; 0x30
   162b4:	ldr	r3, [r0]
   162b8:	cmp	r3, #3
   162bc:	bne	1638c <build_ast@@Base+0x1a0>
   162c0:	ldrd	r2, [r4, #56]	; 0x38
   162c4:	adds	r2, r2, #1
   162c8:	adc	r3, r3, #0
   162cc:	strd	r2, [r4, #56]	; 0x38
   162d0:	bl	12328 <free_token_opar@@Base>
   162d4:	ldrd	r2, [r4, #64]	; 0x40
   162d8:	ldr	r0, [r6]
   162dc:	adds	r2, r2, #1
   162e0:	adc	r3, r3, #0
   162e4:	strd	r2, [r4, #64]	; 0x40
   162e8:	bl	12684 <next@@Base>
   162ec:	ldrd	r2, [r4, #72]	; 0x48
   162f0:	adds	r2, r2, #1
   162f4:	adc	r3, r3, #0
   162f8:	strd	r2, [r4, #72]	; 0x48
   162fc:	ldr	r3, [r0]
   16300:	cmp	r3, #4
   16304:	bne	1638c <build_ast@@Base+0x1a0>
   16308:	ldrd	r2, [r4, #80]	; 0x50
   1630c:	adds	r2, r2, #1
   16310:	adc	r3, r3, #0
   16314:	strd	r2, [r4, #80]	; 0x50
   16318:	bl	12344 <free_token_cpar@@Base>
   1631c:	ldrd	r2, [r4, #88]	; 0x58
   16320:	mov	r0, r6
   16324:	adds	r2, r2, #1
   16328:	adc	r3, r3, #0
   1632c:	strd	r2, [r4, #88]	; 0x58
   16330:	bl	15e70 <read_body@@Base>
   16334:	ldrd	r8, [r4, #96]	; 0x60
   16338:	adds	r8, r8, #1
   1633c:	adc	r9, r9, #0
   16340:	strd	r8, [r4, #96]	; 0x60
   16344:	mov	sl, r0
   16348:	mov	r0, #16
   1634c:	bl	119fc <malloc@plt>
   16350:	mov	r2, sl
   16354:	ldr	r1, [r7, #4]
   16358:	mov	r6, r0
   1635c:	bl	13a68 <init_node_function@@Base>
   16360:	ldrd	r2, [r4, #104]	; 0x68
   16364:	mov	r0, r7
   16368:	adds	r2, r2, #1
   1636c:	adc	r3, r3, #0
   16370:	strd	r2, [r4, #104]	; 0x68
   16374:	bl	1230c <free_token_function@@Base>
   16378:	ldrd	r2, [r4, #112]	; 0x70
   1637c:	adds	r2, r2, #1
   16380:	adc	r3, r3, #0
   16384:	strd	r2, [r4, #112]	; 0x70
   16388:	b	16390 <build_ast@@Base+0x1a4>
   1638c:	mov	r6, #0
   16390:	ldrd	r2, [r5]
   16394:	mov	r0, r6
   16398:	adds	r2, r2, #1
   1639c:	adc	r3, r3, #0
   163a0:	strd	r2, [r5]
   163a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163a8:	andeq	fp, r2, r0, asr r4

000163ac <init_generator@@Base>:
   163ac:	push	{r4, r5, r6, r7, r8, lr}
   163b0:	mov	r5, r0
   163b4:	ldr	r4, [pc, #64]	; 163fc <init_generator@@Base+0x50>
   163b8:	mov	r0, r2
   163bc:	str	r1, [r5]
   163c0:	ldrd	r2, [r4]
   163c4:	ldr	r1, [pc, #52]	; 16400 <init_generator@@Base+0x54>
   163c8:	mov	r6, #0
   163cc:	adds	r2, r2, #1
   163d0:	adc	r3, r3, #0
   163d4:	mov	r7, #0
   163d8:	strd	r2, [r4]
   163dc:	bl	1199c <fopen@plt>
   163e0:	ldrd	r2, [r4, #8]
   163e4:	strd	r6, [r5, #8]
   163e8:	adds	r2, r2, #1
   163ec:	adc	r3, r3, #0
   163f0:	strd	r2, [r4, #8]
   163f4:	str	r0, [r5, #4]
   163f8:	pop	{r4, r5, r6, r7, r8, pc}
   163fc:	andeq	fp, r2, r8, asr r4
   16400:	andeq	r9, r1, ip, asr #13

00016404 <destroy_generator@@Base>:
   16404:	push	{r4, lr}
   16408:	ldr	r4, [pc, #40]	; 16438 <destroy_generator@@Base+0x34>
   1640c:	ldr	r0, [r0, #4]
   16410:	ldrd	r2, [r4, #16]
   16414:	adds	r2, r2, #1
   16418:	adc	r3, r3, #0
   1641c:	strd	r2, [r4, #16]
   16420:	bl	11ac8 <fclose@plt>
   16424:	ldrd	r2, [r4, #24]
   16428:	adds	r2, r2, #1
   1642c:	adc	r3, r3, #0
   16430:	strd	r2, [r4, #24]
   16434:	pop	{r4, pc}
   16438:	andeq	fp, r2, r8, asr r4

0001643c <__generate_code_for_return@@Base>:
   1643c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16440:	mov	r2, #9
   16444:	ldr	r4, [pc, #200]	; 16514 <__generate_code_for_return@@Base+0xd8>
   16448:	ldr	r8, [r1, #8]
   1644c:	ldr	r3, [r0, #4]
   16450:	ldrd	r6, [r4, #32]
   16454:	mov	r5, r0
   16458:	mov	r1, #1
   1645c:	adds	r6, r6, #1
   16460:	adc	r7, r7, #0
   16464:	ldr	r0, [pc, #172]	; 16518 <__generate_code_for_return@@Base+0xdc>
   16468:	strd	r6, [r4, #32]
   1646c:	bl	119cc <fwrite@plt>
   16470:	ldr	r9, [r8]
   16474:	cmp	r9, #1
   16478:	bne	164d4 <__generate_code_for_return@@Base+0x98>
   1647c:	ldrd	r6, [r4, #48]	; 0x30
   16480:	ldr	r2, [r8, #8]
   16484:	ldr	r1, [pc, #144]	; 1651c <__generate_code_for_return@@Base+0xe0>
   16488:	adds	r6, r6, #1
   1648c:	adc	r7, r7, #0
   16490:	ldr	r0, [r5, #4]
   16494:	strd	r6, [r4, #48]	; 0x30
   16498:	bl	11a68 <fprintf@plt>
   1649c:	ldrd	r6, [r4, #56]	; 0x38
   164a0:	ldr	r3, [r5, #4]
   164a4:	mov	r2, #8
   164a8:	adds	r6, r6, #1
   164ac:	adc	r7, r7, #0
   164b0:	mov	r1, r9
   164b4:	ldr	r0, [pc, #100]	; 16520 <__generate_code_for_return@@Base+0xe4>
   164b8:	strd	r6, [r4, #56]	; 0x38
   164bc:	bl	119cc <fwrite@plt>
   164c0:	ldrd	r2, [r4, #64]	; 0x40
   164c4:	adds	r2, r2, #1
   164c8:	adc	r3, r3, #0
   164cc:	strd	r2, [r4, #64]	; 0x40
   164d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164d4:	ldrd	r6, [r4, #40]	; 0x28
   164d8:	ldr	r3, [pc, #68]	; 16524 <__generate_code_for_return@@Base+0xe8>
   164dc:	mov	r2, #37	; 0x25
   164e0:	adds	r6, r6, #1
   164e4:	adc	r7, r7, #0
   164e8:	ldr	r3, [r3]
   164ec:	mov	r1, #1
   164f0:	ldr	r0, [pc, #48]	; 16528 <__generate_code_for_return@@Base+0xec>
   164f4:	strd	r6, [r4, #40]	; 0x28
   164f8:	bl	119cc <fwrite@plt>
   164fc:	ldrd	r2, [r4, #72]	; 0x48
   16500:	mov	r0, #1
   16504:	adds	r2, r2, #1
   16508:	adc	r3, r3, #0
   1650c:	strd	r2, [r4, #72]	; 0x48
   16510:	bl	11a44 <exit@plt>
   16514:	andeq	fp, r2, r8, asr r4
   16518:	ldrdeq	r9, [r1], -r0
   1651c:	ldrdeq	r9, [r1], -ip
   16520:	andeq	r9, r1, r0, ror #13
   16524:			; <UNDEFINED> instruction: 0x0002aab8
   16528:	andeq	r9, r1, ip, ror #13

0001652c <__generate_code_for_int@@Base>:
   1652c:	push	{r4, r6, r7, lr}
   16530:	ldr	r4, [pc, #48]	; 16568 <__generate_code_for_int@@Base+0x3c>
   16534:	ldr	r2, [r1, #8]
   16538:	ldr	r0, [r0, #4]
   1653c:	ldrd	r6, [r4, #80]	; 0x50
   16540:	ldr	r1, [pc, #36]	; 1656c <__generate_code_for_int@@Base+0x40>
   16544:	adds	r6, r6, #1
   16548:	adc	r7, r7, #0
   1654c:	strd	r6, [r4, #80]	; 0x50
   16550:	bl	11a68 <fprintf@plt>
   16554:	ldrd	r2, [r4, #88]	; 0x58
   16558:	adds	r2, r2, #1
   1655c:	adc	r3, r3, #0
   16560:	strd	r2, [r4, #88]	; 0x58
   16564:	pop	{r4, r6, r7, pc}
   16568:	andeq	fp, r2, r8, asr r4
   1656c:	ldrdeq	r9, [r1], -ip

00016570 <__generate_code_for_binary_boolean_expression@@Base>:
   16570:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16574:	sub	sp, sp, #8
   16578:	ldr	r4, [pc, #716]	; 1684c <__generate_code_for_binary_boolean_expression@@Base+0x2dc>
   1657c:	mov	r8, r1
   16580:	mov	r5, r0
   16584:	ldrd	r6, [r4, #96]	; 0x60
   16588:	strd	r2, [sp]
   1658c:	mov	r1, #1
   16590:	adds	r6, r6, #1
   16594:	adc	r7, r7, #0
   16598:	ldr	r3, [r0, #4]
   1659c:	mov	r2, #9
   165a0:	ldr	r0, [pc, #680]	; 16850 <__generate_code_for_binary_boolean_expression@@Base+0x2e0>
   165a4:	strd	r6, [r4, #96]	; 0x60
   165a8:	ldr	r9, [r8, #8]
   165ac:	ldr	sl, [r8, #12]
   165b0:	bl	119cc <fwrite@plt>
   165b4:	ldrd	r6, [r4, #104]	; 0x68
   165b8:	ldr	r2, [r9, #8]
   165bc:	ldr	r1, [pc, #656]	; 16854 <__generate_code_for_binary_boolean_expression@@Base+0x2e4>
   165c0:	adds	r6, r6, #1
   165c4:	adc	r7, r7, #0
   165c8:	ldr	r0, [r5, #4]
   165cc:	strd	r6, [r4, #104]	; 0x68
   165d0:	bl	11a68 <fprintf@plt>
   165d4:	ldrd	r2, [r4, #112]	; 0x70
   165d8:	ldr	r1, [r5, #4]
   165dc:	mov	r0, #10
   165e0:	adds	r2, r2, #1
   165e4:	adc	r3, r3, #0
   165e8:	strd	r2, [r4, #112]	; 0x70
   165ec:	bl	11aec <fputc@plt>
   165f0:	ldrd	r6, [r4, #120]	; 0x78
   165f4:	ldr	r3, [r5, #4]
   165f8:	mov	r2, #9
   165fc:	adds	r6, r6, #1
   16600:	adc	r7, r7, #0
   16604:	mov	r1, #1
   16608:	ldr	r0, [pc, #584]	; 16858 <__generate_code_for_binary_boolean_expression@@Base+0x2e8>
   1660c:	strd	r6, [r4, #120]	; 0x78
   16610:	bl	119cc <fwrite@plt>
   16614:	ldrd	r6, [r4, #128]	; 0x80
   16618:	ldr	r2, [sl, #8]
   1661c:	ldr	r1, [pc, #560]	; 16854 <__generate_code_for_binary_boolean_expression@@Base+0x2e4>
   16620:	adds	r6, r6, #1
   16624:	adc	r7, r7, #0
   16628:	ldr	r0, [r5, #4]
   1662c:	strd	r6, [r4, #128]	; 0x80
   16630:	bl	11a68 <fprintf@plt>
   16634:	ldrd	r2, [r4, #136]	; 0x88
   16638:	ldr	r1, [r5, #4]
   1663c:	mov	r0, #10
   16640:	adds	r2, r2, #1
   16644:	adc	r3, r3, #0
   16648:	strd	r2, [r4, #136]	; 0x88
   1664c:	bl	11aec <fputc@plt>
   16650:	ldrd	r6, [r4, #144]	; 0x90
   16654:	ldr	r3, [r5, #4]
   16658:	mov	r2, #12
   1665c:	adds	r6, r6, #1
   16660:	adc	r7, r7, #0
   16664:	mov	r1, #1
   16668:	ldr	r0, [pc, #492]	; 1685c <__generate_code_for_binary_boolean_expression@@Base+0x2ec>
   1666c:	strd	r6, [r4, #144]	; 0x90
   16670:	bl	119cc <fwrite@plt>
   16674:	ldrd	r2, [r4, #152]	; 0x98
   16678:	ldr	r1, [r8, #16]
   1667c:	adds	r2, r2, #1
   16680:	adc	r3, r3, #0
   16684:	strd	r2, [r4, #152]	; 0x98
   16688:	cmp	r1, #7
   1668c:	ldrls	pc, [pc, r1, lsl #2]
   16690:	b	16808 <__generate_code_for_binary_boolean_expression@@Base+0x298>
   16694:	andeq	r6, r1, r4, lsr #14
   16698:	andeq	r6, r1, r0, ror #14
   1669c:	muleq	r1, r8, r7
   166a0:			; <UNDEFINED> instruction: 0x000166b4
   166a4:	andeq	r6, r1, r4, ror #13
   166a8:	andeq	r6, r1, r4, ror #13
   166ac:	andeq	r6, r1, ip, ror #13
   166b0:	ldrdeq	r6, [r1], -r0
   166b4:	ldrd	r6, [r4, #192]	; 0xc0
   166b8:	ldrd	r2, [sp]
   166bc:	ldr	r0, [r5, #4]
   166c0:	adds	r6, r6, #1
   166c4:	adc	r7, r7, #0
   166c8:	ldr	r1, [pc, #400]	; 16860 <__generate_code_for_binary_boolean_expression@@Base+0x2f0>
   166cc:	strd	r6, [r4, #192]	; 0xc0
   166d0:	bl	11a68 <fprintf@plt>
   166d4:	ldrd	r2, [r4, #232]	; 0xe8
   166d8:	adds	r2, r2, #1
   166dc:	adc	r3, r3, #0
   166e0:	strd	r2, [r4, #232]	; 0xe8
   166e4:	add	sp, sp, #8
   166e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166ec:	ldrd	r6, [r4, #208]	; 0xd0
   166f0:	ldrd	r2, [sp]
   166f4:	ldr	r0, [r5, #4]
   166f8:	adds	r6, r6, #1
   166fc:	adc	r7, r7, #0
   16700:	ldr	r1, [pc, #348]	; 16864 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   16704:	strd	r6, [r4, #208]	; 0xd0
   16708:	bl	11a68 <fprintf@plt>
   1670c:	ldrd	r2, [r4, #240]	; 0xf0
   16710:	adds	r2, r2, #1
   16714:	adc	r3, r3, #0
   16718:	strd	r2, [r4, #240]	; 0xf0
   1671c:	add	sp, sp, #8
   16720:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16724:	ldrd	r6, [r4, #168]	; 0xa8
   16728:	ldrd	r2, [sp]
   1672c:	ldr	r0, [r5, #4]
   16730:	adds	r6, r6, #1
   16734:	adc	r7, r7, #0
   16738:	ldr	r1, [pc, #296]	; 16868 <__generate_code_for_binary_boolean_expression@@Base+0x2f8>
   1673c:	strd	r6, [r4, #168]	; 0xa8
   16740:	bl	11a68 <fprintf@plt>
   16744:	ldr	r1, [pc, #288]	; 1686c <__generate_code_for_binary_boolean_expression@@Base+0x2fc>
   16748:	ldrd	r2, [r1, #-8]
   1674c:	adds	r2, r2, #1
   16750:	adc	r3, r3, #0
   16754:	strd	r2, [r1, #-8]
   16758:	add	sp, sp, #8
   1675c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16760:	ldrd	r6, [r4, #176]	; 0xb0
   16764:	ldrd	r2, [sp]
   16768:	ldr	r0, [r5, #4]
   1676c:	adds	r6, r6, #1
   16770:	adc	r7, r7, #0
   16774:	ldr	r1, [pc, #244]	; 16870 <__generate_code_for_binary_boolean_expression@@Base+0x300>
   16778:	strd	r6, [r4, #176]	; 0xb0
   1677c:	bl	11a68 <fprintf@plt>
   16780:	ldrd	r2, [r4, #216]	; 0xd8
   16784:	adds	r2, r2, #1
   16788:	adc	r3, r3, #0
   1678c:	strd	r2, [r4, #216]	; 0xd8
   16790:	add	sp, sp, #8
   16794:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16798:	ldrd	r6, [r4, #184]	; 0xb8
   1679c:	ldrd	r2, [sp]
   167a0:	ldr	r0, [r5, #4]
   167a4:	adds	r6, r6, #1
   167a8:	adc	r7, r7, #0
   167ac:	ldr	r1, [pc, #192]	; 16874 <__generate_code_for_binary_boolean_expression@@Base+0x304>
   167b0:	strd	r6, [r4, #184]	; 0xb8
   167b4:	bl	11a68 <fprintf@plt>
   167b8:	ldrd	r2, [r4, #224]	; 0xe0
   167bc:	adds	r2, r2, #1
   167c0:	adc	r3, r3, #0
   167c4:	strd	r2, [r4, #224]	; 0xe0
   167c8:	add	sp, sp, #8
   167cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167d0:	ldrd	r6, [r4, #200]	; 0xc8
   167d4:	ldrd	r2, [sp]
   167d8:	ldr	r0, [r5, #4]
   167dc:	adds	r6, r6, #1
   167e0:	adc	r7, r7, #0
   167e4:	ldr	r1, [pc, #140]	; 16878 <__generate_code_for_binary_boolean_expression@@Base+0x308>
   167e8:	strd	r6, [r4, #200]	; 0xc8
   167ec:	bl	11a68 <fprintf@plt>
   167f0:	ldrd	r2, [r4, #248]	; 0xf8
   167f4:	adds	r2, r2, #1
   167f8:	adc	r3, r3, #0
   167fc:	strd	r2, [r4, #248]	; 0xf8
   16800:	add	sp, sp, #8
   16804:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16808:	ldrd	r6, [r4, #160]	; 0xa0
   1680c:	ldr	r3, [pc, #104]	; 1687c <__generate_code_for_binary_boolean_expression@@Base+0x30c>
   16810:	mov	r2, #31
   16814:	adds	r6, r6, #1
   16818:	adc	r7, r7, #0
   1681c:	ldr	r3, [r3]
   16820:	mov	r1, #1
   16824:	ldr	r0, [pc, #84]	; 16880 <__generate_code_for_binary_boolean_expression@@Base+0x310>
   16828:	strd	r6, [r4, #160]	; 0xa0
   1682c:	bl	119cc <fwrite@plt>
   16830:	ldr	r1, [pc, #76]	; 16884 <__generate_code_for_binary_boolean_expression@@Base+0x314>
   16834:	mov	r0, #1
   16838:	ldrd	r2, [r1]
   1683c:	adds	r2, r2, #1
   16840:	adc	r3, r3, #0
   16844:	strd	r2, [r1]
   16848:	bl	11a44 <exit@plt>
   1684c:	andeq	fp, r2, r8, asr r4
   16850:	ldrdeq	r9, [r1], -r0
   16854:	ldrdeq	r9, [r1], -ip
   16858:	andeq	r9, r1, r4, lsl r7
   1685c:	andeq	r9, r1, r0, lsr #14
   16860:	andeq	r9, r1, ip, ror #14
   16864:	andeq	r9, r1, r0, lsl #15
   16868:	andeq	r9, r1, r0, lsr r7
   1686c:	andeq	fp, r2, r8, ror #10
   16870:	andeq	r9, r1, r4, asr #14
   16874:	andeq	r9, r1, r8, asr r7
   16878:	muleq	r1, r4, r7
   1687c:			; <UNDEFINED> instruction: 0x0002aab8
   16880:	andeq	r9, r1, r8, lsr #15
   16884:	andeq	fp, r2, r8, asr r5

00016888 <__generate_code_for_if_expression@@Base>:
   16888:	ldr	ip, [r1, #16]
   1688c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16890:	sub	sp, sp, #12
   16894:	cmp	ip, #8
   16898:	strd	r2, [sp]
   1689c:	beq	168d0 <__generate_code_for_if_expression@@Base+0x48>
   168a0:	ldr	r4, [pc, #348]	; 16a04 <__generate_code_for_if_expression@@Base+0x17c>
   168a4:	ldrd	r6, [r4]
   168a8:	adds	r8, r6, #1
   168ac:	adc	r9, r7, #0
   168b0:	strd	r8, [r4]
   168b4:	bl	16570 <__generate_code_for_binary_boolean_expression@@Base>
   168b8:	ldrd	r2, [r4, #24]
   168bc:	adds	r0, r2, #1
   168c0:	adc	r1, r3, #0
   168c4:	strd	r0, [r4, #24]
   168c8:	add	sp, sp, #12
   168cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168d0:	ldr	r8, [pc, #300]	; 16a04 <__generate_code_for_if_expression@@Base+0x17c>
   168d4:	mov	r9, r1
   168d8:	mov	r4, r8
   168dc:	mov	r5, r0
   168e0:	ldr	r3, [r0, #4]
   168e4:	ldrd	r0, [r8, #8]
   168e8:	ldrd	r6, [r4, #32]!
   168ec:	ldr	ip, [r9, #8]
   168f0:	adds	sl, r0, #1
   168f4:	adc	fp, r1, #0
   168f8:	adds	r0, r6, #1
   168fc:	adc	r1, r7, #0
   16900:	mov	r6, r0
   16904:	mov	r7, r1
   16908:	mov	r0, sl
   1690c:	mov	r1, fp
   16910:	mov	r2, #11
   16914:	strd	r0, [r8, #8]
   16918:	mov	r1, #1
   1691c:	ldr	r0, [pc, #228]	; 16a08 <__generate_code_for_if_expression@@Base+0x180>
   16920:	mov	sl, ip
   16924:	strd	r6, [r4]
   16928:	bl	119cc <fwrite@plt>
   1692c:	ldrd	r0, [r4, #8]
   16930:	ldr	r3, [r5, #4]
   16934:	mov	r2, #9
   16938:	adds	r6, r0, #1
   1693c:	adc	r7, r1, #0
   16940:	ldr	r0, [pc, #196]	; 16a0c <__generate_code_for_if_expression@@Base+0x184>
   16944:	mov	r1, #1
   16948:	strd	r6, [r4, #8]
   1694c:	bl	119cc <fwrite@plt>
   16950:	ldrd	r6, [r4, #16]
   16954:	ldr	r2, [sl, #8]
   16958:	ldr	r1, [pc, #176]	; 16a10 <__generate_code_for_if_expression@@Base+0x188>
   1695c:	adds	r6, r6, #1
   16960:	adc	r7, r7, #0
   16964:	ldr	r0, [r5, #4]
   16968:	strd	r6, [r4, #16]
   1696c:	bl	11a68 <fprintf@plt>
   16970:	ldr	r3, [r9, #16]
   16974:	cmp	r3, #8
   16978:	bne	169c4 <__generate_code_for_if_expression@@Base+0x13c>
   1697c:	ldrd	r6, [r4, #32]
   16980:	ldrd	r2, [sp]
   16984:	ldr	r0, [r5, #4]
   16988:	adds	sl, r6, #1
   1698c:	adc	fp, r7, #0
   16990:	ldr	r1, [pc, #124]	; 16a14 <__generate_code_for_if_expression@@Base+0x18c>
   16994:	strd	sl, [r4, #32]
   16998:	bl	11a68 <fprintf@plt>
   1699c:	ldrd	r2, [r4, #40]	; 0x28
   169a0:	ldrd	r0, [r8, #16]
   169a4:	adds	r6, r2, #1
   169a8:	adc	r7, r3, #0
   169ac:	adds	r2, r0, #1
   169b0:	adc	r3, r1, #0
   169b4:	strd	r6, [r4, #40]	; 0x28
   169b8:	strd	r2, [r8, #16]
   169bc:	add	sp, sp, #12
   169c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169c4:	ldrd	r6, [r4, #24]
   169c8:	ldr	r3, [pc, #72]	; 16a18 <__generate_code_for_if_expression@@Base+0x190>
   169cc:	mov	r2, #31
   169d0:	adds	r8, r6, #1
   169d4:	adc	r9, r7, #0
   169d8:	ldr	r3, [r3]
   169dc:	mov	r1, #1
   169e0:	ldr	r0, [pc, #52]	; 16a1c <__generate_code_for_if_expression@@Base+0x194>
   169e4:	strd	r8, [r4, #24]
   169e8:	bl	119cc <fwrite@plt>
   169ec:	ldrd	r2, [r4, #48]	; 0x30
   169f0:	mov	r0, #1
   169f4:	adds	r6, r2, #1
   169f8:	adc	r7, r3, #0
   169fc:	strd	r6, [r4, #48]	; 0x30
   16a00:	bl	11a44 <exit@plt>
   16a04:	andeq	fp, r2, r8, ror #10
   16a08:	andeq	r9, r1, r8, asr #15
   16a0c:	andeq	r9, r1, r4, lsl r7
   16a10:	ldrdeq	r9, [r1], -ip
   16a14:	andeq	r9, r1, r4, asr #14
   16a18:			; <UNDEFINED> instruction: 0x0002aab8
   16a1c:	andeq	r9, r1, r8, lsr #15

00016a20 <__generate_code_for_unary_boolean_expression@@Base>:
   16a20:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a24:	mov	r8, r1
   16a28:	ldr	r4, [pc, #248]	; 16b28 <__generate_code_for_unary_boolean_expression@@Base+0x108>
   16a2c:	mov	r5, r0
   16a30:	mov	r1, #1
   16a34:	ldrd	r6, [r4]
   16a38:	mov	sl, r2
   16a3c:	mov	fp, r3
   16a40:	adds	r6, r6, #1
   16a44:	adc	r7, r7, #0
   16a48:	ldr	r3, [r0, #4]
   16a4c:	mov	r2, #11
   16a50:	ldr	r0, [pc, #212]	; 16b2c <__generate_code_for_unary_boolean_expression@@Base+0x10c>
   16a54:	strd	r6, [r4]
   16a58:	ldr	r9, [r8, #8]
   16a5c:	bl	119cc <fwrite@plt>
   16a60:	ldrd	r6, [r4, #8]
   16a64:	ldr	r3, [r5, #4]
   16a68:	mov	r2, #9
   16a6c:	adds	r6, r6, #1
   16a70:	adc	r7, r7, #0
   16a74:	mov	r1, #1
   16a78:	ldr	r0, [pc, #176]	; 16b30 <__generate_code_for_unary_boolean_expression@@Base+0x110>
   16a7c:	strd	r6, [r4, #8]
   16a80:	bl	119cc <fwrite@plt>
   16a84:	ldrd	r6, [r4, #16]
   16a88:	ldr	r2, [r9, #8]
   16a8c:	ldr	r0, [r5, #4]
   16a90:	adds	r6, r6, #1
   16a94:	adc	r7, r7, #0
   16a98:	ldr	r1, [pc, #148]	; 16b34 <__generate_code_for_unary_boolean_expression@@Base+0x114>
   16a9c:	strd	r6, [r4, #16]
   16aa0:	bl	11a68 <fprintf@plt>
   16aa4:	ldr	r3, [r8, #16]
   16aa8:	cmp	r3, #8
   16aac:	bne	16ae8 <__generate_code_for_unary_boolean_expression@@Base+0xc8>
   16ab0:	ldrd	r6, [r4, #32]
   16ab4:	mov	r2, sl
   16ab8:	mov	r3, fp
   16abc:	adds	r6, r6, #1
   16ac0:	adc	r7, r7, #0
   16ac4:	ldr	r0, [r5, #4]
   16ac8:	ldr	r1, [pc, #104]	; 16b38 <__generate_code_for_unary_boolean_expression@@Base+0x118>
   16acc:	strd	r6, [r4, #32]
   16ad0:	bl	11a68 <fprintf@plt>
   16ad4:	ldrd	r2, [r4, #40]	; 0x28
   16ad8:	adds	r2, r2, #1
   16adc:	adc	r3, r3, #0
   16ae0:	strd	r2, [r4, #40]	; 0x28
   16ae4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae8:	ldrd	r6, [r4, #24]
   16aec:	ldr	r3, [pc, #72]	; 16b3c <__generate_code_for_unary_boolean_expression@@Base+0x11c>
   16af0:	mov	r2, #31
   16af4:	adds	r6, r6, #1
   16af8:	adc	r7, r7, #0
   16afc:	ldr	r3, [r3]
   16b00:	mov	r1, #1
   16b04:	ldr	r0, [pc, #52]	; 16b40 <__generate_code_for_unary_boolean_expression@@Base+0x120>
   16b08:	strd	r6, [r4, #24]
   16b0c:	bl	119cc <fwrite@plt>
   16b10:	ldrd	r2, [r4, #48]	; 0x30
   16b14:	mov	r0, #1
   16b18:	adds	r2, r2, #1
   16b1c:	adc	r3, r3, #0
   16b20:	strd	r2, [r4, #48]	; 0x30
   16b24:	bl	11a44 <exit@plt>
   16b28:	andeq	fp, r2, r8, lsl #11
   16b2c:	andeq	r9, r1, r8, asr #15
   16b30:	andeq	r9, r1, r4, lsl r7
   16b34:	ldrdeq	r9, [r1], -ip
   16b38:	andeq	r9, r1, r4, asr #14
   16b3c:			; <UNDEFINED> instruction: 0x0002aab8
   16b40:	andeq	r9, r1, r8, lsr #15

00016b44 <__generate_code_for_body@@Base>:
   16b44:	cmp	r1, #0
   16b48:	push	{r4, r5, r6, lr}
   16b4c:	movne	r5, r0
   16b50:	ldrne	r4, [pc, #204]	; 16c24 <__generate_code_for_body@@Base+0xe0>
   16b54:	beq	16c1c <__generate_code_for_body@@Base+0xd8>
   16b58:	ldrd	r2, [r4, #32]
   16b5c:	ldm	r1, {r0, r6}
   16b60:	adds	r2, r2, #1
   16b64:	adc	r3, r3, #0
   16b68:	cmp	r0, #3
   16b6c:	strd	r2, [r4, #32]
   16b70:	beq	16bc0 <__generate_code_for_body@@Base+0x7c>
   16b74:	cmp	r0, #4
   16b78:	bne	16bec <__generate_code_for_body@@Base+0xa8>
   16b7c:	ldrd	r2, [r4]
   16b80:	mov	r0, r5
   16b84:	adds	r2, r2, #1
   16b88:	adc	r3, r3, #0
   16b8c:	strd	r2, [r4]
   16b90:	bl	16c30 <__generate_code_for_if@@Base>
   16b94:	ldrd	r2, [r4, #24]
   16b98:	adds	r2, r2, #1
   16b9c:	adc	r3, r3, #0
   16ba0:	subs	r1, r6, #0
   16ba4:	strd	r2, [r4, #24]
   16ba8:	bne	16b58 <__generate_code_for_body@@Base+0x14>
   16bac:	ldrd	r2, [r4, #40]	; 0x28
   16bb0:	adds	r2, r2, #1
   16bb4:	adc	r3, r3, #0
   16bb8:	strd	r2, [r4, #40]	; 0x28
   16bbc:	pop	{r4, r5, r6, pc}
   16bc0:	ldrd	r2, [r4, #-8]
   16bc4:	mov	r0, r5
   16bc8:	adds	r2, r2, #1
   16bcc:	adc	r3, r3, #0
   16bd0:	strd	r2, [r4, #-8]
   16bd4:	bl	1643c <__generate_code_for_return@@Base>
   16bd8:	ldrd	r2, [r4, #16]
   16bdc:	adds	r2, r2, #1
   16be0:	adc	r3, r3, #0
   16be4:	strd	r2, [r4, #16]
   16be8:	b	16b94 <__generate_code_for_body@@Base+0x50>
   16bec:	ldr	r3, [pc, #52]	; 16c28 <__generate_code_for_body@@Base+0xe4>
   16bf0:	mov	r2, #52	; 0x34
   16bf4:	mov	r1, #1
   16bf8:	ldr	r3, [r3]
   16bfc:	ldr	r0, [pc, #40]	; 16c2c <__generate_code_for_body@@Base+0xe8>
   16c00:	bl	119cc <fwrite@plt>
   16c04:	ldrd	r2, [r4, #8]
   16c08:	mov	r0, #1
   16c0c:	adds	r2, r2, #1
   16c10:	adc	r3, r3, #0
   16c14:	strd	r2, [r4, #8]
   16c18:	bl	11a44 <exit@plt>
   16c1c:	ldr	r4, [pc]	; 16c24 <__generate_code_for_body@@Base+0xe0>
   16c20:	b	16bac <__generate_code_for_body@@Base+0x68>
   16c24:	andeq	fp, r2, r8, asr #11
   16c28:			; <UNDEFINED> instruction: 0x0002aab8
   16c2c:	ldrdeq	r9, [r1], -r4

00016c30 <__generate_code_for_if@@Base>:
   16c30:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c34:	mov	sl, r1
   16c38:	ldr	r4, [pc, #284]	; 16d5c <__generate_code_for_if@@Base+0x12c>
   16c3c:	ldrd	r8, [r0, #8]
   16c40:	ldr	r1, [r1, #8]
   16c44:	ldrd	r2, [r4]
   16c48:	mov	r5, r0
   16c4c:	ldr	ip, [r1, #16]
   16c50:	adds	r2, r2, #1
   16c54:	adc	r3, r3, #0
   16c58:	adds	r6, r8, #1
   16c5c:	adc	r7, r9, #0
   16c60:	cmp	ip, #8
   16c64:	strd	r2, [r4]
   16c68:	strd	r6, [r0, #8]
   16c6c:	beq	16d28 <__generate_code_for_if@@Base+0xf8>
   16c70:	mov	fp, r4
   16c74:	mov	r2, r8
   16c78:	ldrd	r6, [fp, #-144]!	; 0xffffff70
   16c7c:	mov	r3, r9
   16c80:	adds	r6, r6, #1
   16c84:	adc	r7, r7, #0
   16c88:	strd	r6, [fp]
   16c8c:	bl	16570 <__generate_code_for_binary_boolean_expression@@Base>
   16c90:	ldrd	r2, [fp, #24]
   16c94:	adds	r2, r2, #1
   16c98:	adc	r3, r3, #0
   16c9c:	strd	r2, [fp, #24]
   16ca0:	ldrd	r2, [r4, #8]
   16ca4:	ldr	r1, [sl, #12]
   16ca8:	mov	r0, r5
   16cac:	adds	r2, r2, #1
   16cb0:	adc	r3, r3, #0
   16cb4:	strd	r2, [r4, #8]
   16cb8:	bl	16b44 <__generate_code_for_body@@Base>
   16cbc:	ldrd	r6, [r4, #16]
   16cc0:	mov	r2, r8
   16cc4:	mov	r3, r9
   16cc8:	adds	r6, r6, #1
   16ccc:	adc	r7, r7, #0
   16cd0:	ldr	r1, [pc, #136]	; 16d60 <__generate_code_for_if@@Base+0x130>
   16cd4:	ldr	r0, [r5, #4]
   16cd8:	strd	r6, [r4, #16]
   16cdc:	bl	11a68 <fprintf@plt>
   16ce0:	ldrd	r2, [r4, #24]
   16ce4:	ldr	r1, [sl, #16]
   16ce8:	adds	r2, r2, #1
   16cec:	adc	r3, r3, #0
   16cf0:	cmp	r1, #0
   16cf4:	strd	r2, [r4, #24]
   16cf8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cfc:	ldrd	r2, [r4, #32]
   16d00:	mov	r0, r5
   16d04:	adds	r2, r2, #1
   16d08:	adc	r3, r3, #0
   16d0c:	strd	r2, [r4, #32]
   16d10:	bl	16b44 <__generate_code_for_body@@Base>
   16d14:	ldrd	r2, [r4, #40]	; 0x28
   16d18:	adds	r2, r2, #1
   16d1c:	adc	r3, r3, #0
   16d20:	strd	r2, [r4, #40]	; 0x28
   16d24:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d28:	ldrd	r6, [r4, #-136]	; 0xffffff78
   16d2c:	mov	r2, r8
   16d30:	mov	r3, r9
   16d34:	adds	r6, r6, #1
   16d38:	adc	r7, r7, #0
   16d3c:	sub	fp, r4, #144	; 0x90
   16d40:	strd	r6, [r4, #-136]	; 0xffffff78
   16d44:	bl	16a20 <__generate_code_for_unary_boolean_expression@@Base>
   16d48:	ldrd	r2, [r4, #-128]	; 0xffffff80
   16d4c:	adds	r2, r2, #1
   16d50:	adc	r3, r3, #0
   16d54:	strd	r2, [r4, #-128]	; 0xffffff80
   16d58:	b	16ca0 <__generate_code_for_if@@Base+0x70>
   16d5c:	strdeq	fp, [r2], -r8
   16d60:	andeq	r9, r1, ip, lsl #16

00016d64 <__generate_code_for_function@@Base>:
   16d64:	push	{r4, r5, r6, r7, r8, lr}
   16d68:	mov	r5, r0
   16d6c:	ldr	r4, [pc, #80]	; 16dc4 <__generate_code_for_function@@Base+0x60>
   16d70:	ldr	r2, [r1, #8]
   16d74:	mov	r8, r1
   16d78:	ldrd	r6, [r4]
   16d7c:	ldr	r1, [pc, #68]	; 16dc8 <__generate_code_for_function@@Base+0x64>
   16d80:	ldr	r0, [r0, #4]
   16d84:	adds	r6, r6, #1
   16d88:	adc	r7, r7, #0
   16d8c:	strd	r6, [r4]
   16d90:	bl	11a68 <fprintf@plt>
   16d94:	ldrd	r2, [r4, #8]
   16d98:	ldr	r1, [r8, #12]
   16d9c:	mov	r0, r5
   16da0:	adds	r2, r2, #1
   16da4:	adc	r3, r3, #0
   16da8:	strd	r2, [r4, #8]
   16dac:	bl	16b44 <__generate_code_for_body@@Base>
   16db0:	ldrd	r2, [r4, #16]
   16db4:	adds	r2, r2, #1
   16db8:	adc	r3, r3, #0
   16dbc:	strd	r2, [r4, #16]
   16dc0:	pop	{r4, r5, r6, r7, r8, pc}
   16dc4:	andeq	fp, r2, r8, lsr #12
   16dc8:	andeq	r9, r1, ip, lsl r8

00016dcc <__generate_code_for_main@@Base>:
   16dcc:	ldr	r3, [r1]
   16dd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dd4:	cmp	r3, #2
   16dd8:	bne	16e5c <__generate_code_for_main@@Base+0x90>
   16ddc:	ldr	r5, [pc, #188]	; 16ea0 <__generate_code_for_main@@Base+0xd4>
   16de0:	mov	r7, r0
   16de4:	mov	r4, r5
   16de8:	ldr	r2, [r1, #8]
   16dec:	mov	r6, r1
   16df0:	ldrd	r0, [r5]
   16df4:	ldrd	r8, [r4, #-32]!	; 0xffffffe0
   16df8:	adds	r0, r0, #1
   16dfc:	adc	r1, r1, #0
   16e00:	adds	r8, r8, #1
   16e04:	adc	r9, r9, #0
   16e08:	strd	r0, [r5]
   16e0c:	ldr	r1, [pc, #144]	; 16ea4 <__generate_code_for_main@@Base+0xd8>
   16e10:	ldr	r0, [r7, #4]
   16e14:	strd	r8, [r4]
   16e18:	bl	11a68 <fprintf@plt>
   16e1c:	ldrd	r2, [r4, #8]
   16e20:	ldr	r1, [r6, #12]
   16e24:	mov	r0, r7
   16e28:	adds	r2, r2, #1
   16e2c:	adc	r3, r3, #0
   16e30:	strd	r2, [r4, #8]
   16e34:	bl	16b44 <__generate_code_for_body@@Base>
   16e38:	ldrd	r2, [r5, #8]
   16e3c:	ldrd	r0, [r4, #16]
   16e40:	adds	r2, r2, #1
   16e44:	adc	r3, r3, #0
   16e48:	adds	r0, r0, #1
   16e4c:	adc	r1, r1, #0
   16e50:	strd	r2, [r5, #8]
   16e54:	strd	r0, [r4, #16]
   16e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e5c:	ldr	r4, [pc, #60]	; 16ea0 <__generate_code_for_main@@Base+0xd4>
   16e60:	ldr	r3, [pc, #64]	; 16ea8 <__generate_code_for_main@@Base+0xdc>
   16e64:	mov	r2, #46	; 0x2e
   16e68:	ldrd	r6, [r4, #-8]
   16e6c:	ldr	r3, [r3]
   16e70:	mov	r1, #1
   16e74:	adds	r6, r6, #1
   16e78:	adc	r7, r7, #0
   16e7c:	ldr	r0, [pc, #40]	; 16eac <__generate_code_for_main@@Base+0xe0>
   16e80:	strd	r6, [r4, #-8]
   16e84:	bl	119cc <fwrite@plt>
   16e88:	ldrd	r2, [r4, #16]
   16e8c:	mov	r0, #1
   16e90:	adds	r2, r2, #1
   16e94:	adc	r3, r3, #0
   16e98:	strd	r2, [r4, #16]
   16e9c:	bl	11a44 <exit@plt>
   16ea0:	andeq	fp, r2, r8, asr #12
   16ea4:	andeq	r9, r1, ip, lsl r8
   16ea8:			; <UNDEFINED> instruction: 0x0002aab8
   16eac:	andeq	r9, r1, r4, lsr #16

00016eb0 <generate_code@@Base>:
   16eb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16eb4:	mov	r6, r0
   16eb8:	ldr	r4, [pc, #172]	; 16f6c <generate_code@@Base+0xbc>
   16ebc:	ldr	r0, [r0]
   16ec0:	add	r5, r4, #528	; 0x210
   16ec4:	add	r4, r4, #560	; 0x230
   16ec8:	ldrd	r2, [r5, #-8]
   16ecc:	adds	r2, r2, #1
   16ed0:	adc	r3, r3, #0
   16ed4:	strd	r2, [r5, #-8]
   16ed8:	bl	161ec <build_ast@@Base>
   16edc:	ldrd	r8, [r4, #-8]
   16ee0:	ldr	r3, [r6, #4]
   16ee4:	mov	r2, #21
   16ee8:	mov	r7, r0
   16eec:	ldrd	r0, [r5]
   16ef0:	adds	r0, r0, #1
   16ef4:	adc	r1, r1, #0
   16ef8:	adds	r8, r8, #1
   16efc:	adc	r9, r9, #0
   16f00:	strd	r0, [r5]
   16f04:	mov	r1, #1
   16f08:	ldr	r0, [pc, #96]	; 16f70 <generate_code@@Base+0xc0>
   16f0c:	strd	r8, [r4, #-8]
   16f10:	bl	119cc <fwrite@plt>
   16f14:	ldrd	r2, [r4]
   16f18:	mov	r0, r6
   16f1c:	mov	r1, r7
   16f20:	adds	r2, r2, #1
   16f24:	adc	r3, r3, #0
   16f28:	strd	r2, [r4]
   16f2c:	bl	16dcc <__generate_code_for_main@@Base>
   16f30:	ldrd	r2, [r4, #8]
   16f34:	ldrd	r8, [r5, #8]
   16f38:	mov	r0, r7
   16f3c:	adds	r2, r2, #1
   16f40:	adc	r3, r3, #0
   16f44:	adds	r8, r8, #1
   16f48:	adc	r9, r9, #0
   16f4c:	strd	r2, [r4, #8]
   16f50:	strd	r8, [r5, #8]
   16f54:	bl	13be8 <free_node@@Base>
   16f58:	ldrd	r2, [r5, #16]
   16f5c:	adds	r2, r2, #1
   16f60:	adc	r3, r3, #0
   16f64:	strd	r2, [r5, #16]
   16f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f6c:	andeq	fp, r2, r8, asr r4
   16f70:	andeq	r9, r1, r4, asr r8

00016f74 <__generate_code@@Base>:
   16f74:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f78:	mov	r2, #21
   16f7c:	ldr	r4, [pc, #268]	; 17090 <__generate_code@@Base+0x11c>
   16f80:	ldr	r3, [r0, #4]
   16f84:	mov	r7, r1
   16f88:	ldrd	r8, [r4, #-8]
   16f8c:	mov	r1, #1
   16f90:	mov	r6, r0
   16f94:	adds	r8, r8, #1
   16f98:	adc	r9, r9, #0
   16f9c:	ldr	r0, [pc, #240]	; 17094 <__generate_code@@Base+0x120>
   16fa0:	strd	r8, [r4, #-8]
   16fa4:	bl	119cc <fwrite@plt>
   16fa8:	ldrd	r2, [r4]
   16fac:	ldr	r1, [r7]
   16fb0:	adds	r2, r2, #1
   16fb4:	adc	r3, r3, #0
   16fb8:	cmp	r1, #2
   16fbc:	strd	r2, [r4]
   16fc0:	bne	1704c <__generate_code@@Base+0xd8>
   16fc4:	mov	r8, r4
   16fc8:	mov	r5, r4
   16fcc:	ldrd	r0, [r8, #-64]!	; 0xffffffc0
   16fd0:	ldrd	sl, [r5, #-96]!	; 0xffffffa0
   16fd4:	ldr	r2, [r7, #8]
   16fd8:	adds	r0, r0, #1
   16fdc:	adc	r1, r1, #0
   16fe0:	adds	sl, sl, #1
   16fe4:	adc	fp, fp, #0
   16fe8:	strd	r0, [r8]
   16fec:	ldr	r1, [pc, #164]	; 17098 <__generate_code@@Base+0x124>
   16ff0:	ldr	r0, [r6, #4]
   16ff4:	strd	sl, [r5]
   16ff8:	bl	11a68 <fprintf@plt>
   16ffc:	ldrd	r2, [r5, #8]
   17000:	ldr	r1, [r7, #12]
   17004:	mov	r0, r6
   17008:	adds	r2, r2, #1
   1700c:	adc	r3, r3, #0
   17010:	strd	r2, [r5, #8]
   17014:	bl	16b44 <__generate_code_for_body@@Base>
   17018:	ldrd	r0, [r8, #8]
   1701c:	ldrd	r6, [r5, #16]
   17020:	ldrd	r2, [r4, #8]
   17024:	adds	r0, r0, #1
   17028:	adc	r1, r1, #0
   1702c:	adds	r6, r6, #1
   17030:	adc	r7, r7, #0
   17034:	adds	r2, r2, #1
   17038:	adc	r3, r3, #0
   1703c:	strd	r0, [r8, #8]
   17040:	strd	r6, [r5, #16]
   17044:	strd	r2, [r4, #8]
   17048:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1704c:	ldr	r4, [pc, #72]	; 1709c <__generate_code@@Base+0x128>
   17050:	ldr	r3, [pc, #72]	; 170a0 <__generate_code@@Base+0x12c>
   17054:	mov	r2, #46	; 0x2e
   17058:	ldrd	r6, [r4, #-8]
   1705c:	ldr	r3, [r3]
   17060:	mov	r1, #1
   17064:	adds	r6, r6, #1
   17068:	adc	r7, r7, #0
   1706c:	ldr	r0, [pc, #48]	; 170a4 <__generate_code@@Base+0x130>
   17070:	strd	r6, [r4, #-8]
   17074:	bl	119cc <fwrite@plt>
   17078:	ldrd	r2, [r4, #16]
   1707c:	mov	r0, #1
   17080:	adds	r2, r2, #1
   17084:	adc	r3, r3, #0
   17088:	strd	r2, [r4, #16]
   1708c:	bl	11a44 <exit@plt>
   17090:	andeq	fp, r2, r8, lsl #13
   17094:	andeq	r9, r1, r4, asr r8
   17098:	andeq	r9, r1, ip, lsl r8
   1709c:	andeq	fp, r2, r8, asr #12
   170a0:			; <UNDEFINED> instruction: 0x0002aab8
   170a4:	andeq	r9, r1, r4, lsr #16
   170a8:	b	182d4 <__generate_code@@Base+0x1360>
   170ac:	push	{r4, r5, r6, lr}
   170b0:	subs	r5, r1, #0
   170b4:	popeq	{r4, r5, r6, pc}
   170b8:	mov	r4, r0
   170bc:	bl	170a8 <__generate_code@@Base+0x134>
   170c0:	ldrd	r2, [r4]
   170c4:	adds	r0, r0, r2
   170c8:	adc	r1, r1, r3
   170cc:	subs	r5, r5, #1
   170d0:	strd	r0, [r4], #8
   170d4:	bne	170bc <__generate_code@@Base+0x148>
   170d8:	pop	{r4, r5, r6, pc}
   170dc:	ldr	r3, [pc, #20]	; 170f8 <__generate_code@@Base+0x184>
   170e0:	ldr	r2, [pc, #20]	; 170fc <__generate_code@@Base+0x188>
   170e4:	add	r3, pc, r3
   170e8:	ldr	r3, [r3, r2]
   170ec:	ldmib	r3, {r0, r3}
   170f0:	add	r0, r0, r3
   170f4:	bx	lr
   170f8:	andeq	r2, r1, r4, lsl pc
   170fc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17100:	ldr	r3, [pc, #28]	; 17124 <__generate_code@@Base+0x1b0>
   17104:	ldr	r2, [pc, #28]	; 17128 <__generate_code@@Base+0x1b4>
   17108:	add	r3, pc, r3
   1710c:	ldr	r3, [r3, r2]
   17110:	ldr	r2, [r3]
   17114:	cmp	r2, #0
   17118:	ldrne	r0, [r3, #20]
   1711c:	moveq	r0, #1
   17120:	bx	lr
   17124:	strdeq	r2, [r1], -r0
   17128:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1712c:	bx	lr
   17130:	ldr	ip, [pc, #32]	; 17158 <__generate_code@@Base+0x1e4>
   17134:	mov	r3, #32
   17138:	teq	r0, r1
   1713c:	movmi	r2, ip
   17140:	movpl	r2, #0
   17144:	subs	r3, r3, #1
   17148:	lsl	r1, r1, #1
   1714c:	eor	r0, r2, r0, lsl #1
   17150:	bne	17138 <__generate_code@@Base+0x1c4>
   17154:	bx	lr
   17158:	strbeq	r1, [r1], #3511	; 0xdb7
   1715c:	ldr	r3, [pc, #76]	; 171b0 <__generate_code@@Base+0x23c>
   17160:	ldr	r1, [pc, #76]	; 171b4 <__generate_code@@Base+0x240>
   17164:	add	r3, pc, r3
   17168:	push	{r4, r5, r6, lr}
   1716c:	mov	r5, r0
   17170:	ldr	r4, [r3, r1]
   17174:	lsl	r1, r0, #2
   17178:	mov	r0, r4
   1717c:	mov	r2, #1
   17180:	ldr	r3, [r0], #28
   17184:	bl	119cc <fwrite@plt>
   17188:	cmp	r0, #1
   1718c:	movne	r3, #1
   17190:	ldr	r0, [r4, #8]
   17194:	strne	r3, [r4, #20]
   17198:	ldr	r3, [r4, #4]
   1719c:	sub	r0, r0, r5
   171a0:	add	r3, r3, r5
   171a4:	str	r3, [r4, #4]
   171a8:	str	r0, [r4, #8]
   171ac:	pop	{r4, r5, r6, pc}
   171b0:	muleq	r1, r4, lr
   171b4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   171b8:	ldr	r3, [pc, #76]	; 1720c <__generate_code@@Base+0x298>
   171bc:	ldr	r2, [pc, #76]	; 17210 <__generate_code@@Base+0x29c>
   171c0:	add	r3, pc, r3
   171c4:	push	{r4, r5, r6, lr}
   171c8:	mov	r5, r0
   171cc:	ldr	r4, [r3, r2]
   171d0:	ldr	r3, [r4, #8]
   171d4:	cmp	r3, #1024	; 0x400
   171d8:	bcc	171f8 <__generate_code@@Base+0x284>
   171dc:	mov	r0, #1024	; 0x400
   171e0:	bl	1715c <__generate_code@@Base+0x1e8>
   171e4:	ldr	r3, [r4, #8]
   171e8:	cmp	r3, #0
   171ec:	addne	r2, r4, #4096	; 0x1000
   171f0:	ldrne	r2, [r2, #28]
   171f4:	strne	r2, [r4, #28]
   171f8:	add	r0, r3, #7
   171fc:	add	r3, r5, r3
   17200:	str	r3, [r4, #8]
   17204:	add	r0, r4, r0, lsl #2
   17208:	pop	{r4, r5, r6, pc}
   1720c:	andeq	r2, r1, r8, lsr lr
   17210:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17214:	ldr	r3, [pc, #172]	; 172c8 <__generate_code@@Base+0x354>
   17218:	ldr	r2, [pc, #172]	; 172cc <__generate_code@@Base+0x358>
   1721c:	add	r3, pc, r3
   17220:	push	{r4, r5, r6, lr}
   17224:	mov	r5, r0
   17228:	ldr	r4, [r3, r2]
   1722c:	ldr	r3, [r4, #8]
   17230:	ldr	ip, [r4, #12]
   17234:	sub	ip, ip, r3
   17238:	cmp	ip, r0
   1723c:	bcs	17298 <__generate_code@@Base+0x324>
   17240:	ldr	r2, [r4, #4]
   17244:	cmp	ip, #0
   17248:	add	r2, r2, r3
   1724c:	str	r2, [r4, #4]
   17250:	addne	r2, r4, #28
   17254:	mov	r0, r4
   17258:	ldrne	r3, [r2, r3, lsl #2]
   1725c:	mov	r6, #0
   17260:	strne	r3, [r4, #28]
   17264:	ldr	r3, [r0], #28
   17268:	mov	r2, #4096	; 0x1000
   1726c:	add	r0, r0, ip, lsl #2
   17270:	mov	r1, #1
   17274:	str	ip, [r4, #12]
   17278:	str	r6, [r4, #8]
   1727c:	bl	119e4 <fread@plt>
   17280:	ldr	r3, [r4, #12]
   17284:	add	r0, r3, r0, lsr #2
   17288:	cmp	r5, r0
   1728c:	str	r0, [r4, #12]
   17290:	bhi	172ac <__generate_code@@Base+0x338>
   17294:	ldr	r3, [r4, #8]
   17298:	add	r0, r3, #7
   1729c:	add	r5, r5, r3
   172a0:	add	r0, r4, r0, lsl #2
   172a4:	str	r5, [r4, #8]
   172a8:	pop	{r4, r5, r6, pc}
   172ac:	ldr	r3, [r4, #16]
   172b0:	str	r6, [r4, #12]
   172b4:	add	r5, r5, r3
   172b8:	sub	r5, r5, r0
   172bc:	str	r5, [r4, #16]
   172c0:	mov	r0, r6
   172c4:	pop	{r4, r5, r6, pc}
   172c8:	ldrdeq	r2, [r1], -ip
   172cc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   172d0:	push	{r0, r1, r2, r3}
   172d4:	ldr	r3, [pc, #52]	; 17310 <__generate_code@@Base+0x39c>
   172d8:	ldr	r1, [pc, #52]	; 17314 <__generate_code@@Base+0x3a0>
   172dc:	push	{lr}		; (str lr, [sp, #-4]!)
   172e0:	add	r3, pc, r3
   172e4:	sub	sp, sp, #12
   172e8:	add	r2, sp, #20
   172ec:	str	r2, [sp, #4]
   172f0:	ldr	r0, [r3, r1]
   172f4:	ldr	r1, [sp, #16]
   172f8:	ldr	r0, [r0]
   172fc:	bl	11ae0 <vfprintf@plt>
   17300:	add	sp, sp, #12
   17304:	pop	{lr}		; (ldr lr, [sp], #4)
   17308:	add	sp, sp, #16
   1730c:	bx	lr
   17310:	andeq	r2, r1, r8, lsl sp
   17314:	andeq	r0, r0, r4, lsr #1
   17318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1731c:	subs	r6, r1, #0
   17320:	beq	1737c <__generate_code@@Base+0x408>
   17324:	cmp	r2, #0
   17328:	movne	r3, #0
   1732c:	mov	r7, r2
   17330:	ldr	r8, [r6]
   17334:	addne	r5, r0, #12
   17338:	movne	r4, r3
   1733c:	beq	1736c <__generate_code@@Base+0x3f8>
   17340:	ldr	r0, [r5, #4]!
   17344:	add	r2, r6, r3, lsl #3
   17348:	cmp	r0, #0
   1734c:	add	r9, r3, #1
   17350:	add	r4, r4, #1
   17354:	beq	17364 <__generate_code@@Base+0x3f0>
   17358:	ldr	r0, [r2, #28]
   1735c:	bl	119a8 <free@plt>
   17360:	mov	r3, r9
   17364:	cmp	r7, r4
   17368:	bne	17340 <__generate_code@@Base+0x3cc>
   1736c:	mov	r0, r6
   17370:	bl	119a8 <free@plt>
   17374:	mov	r0, r8
   17378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1737c:	mov	r8, r6
   17380:	b	17374 <__generate_code@@Base+0x400>
   17384:	push	{r4, r5}
   17388:	mov	r4, r0
   1738c:	mov	r5, r1
   17390:	orrs	r3, r4, r5
   17394:	beq	173d8 <__generate_code@@Base+0x464>
   17398:	cmp	r1, #0
   1739c:	clzeq	r1, r0
   173a0:	addeq	r1, r1, #32
   173a4:	clzne	r1, r1
   173a8:	rsb	r3, r1, #63	; 0x3f
   173ac:	cmp	r3, #1
   173b0:	bls	173d8 <__generate_code@@Base+0x464>
   173b4:	rsb	r2, r1, #61	; 0x3d
   173b8:	rsb	r0, r2, #32
   173bc:	lsr	r3, r4, r2
   173c0:	sub	r2, r2, #32
   173c4:	orr	r3, r3, r5, lsl r0
   173c8:	orr	r3, r3, r5, lsr r2
   173cc:	rsb	r1, r1, #1073741886	; 0x4000003e
   173d0:	and	r0, r3, #3
   173d4:	add	r0, r0, r1, lsl #2
   173d8:	pop	{r4, r5}
   173dc:	bx	lr
   173e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173e4:	mov	r1, r3
   173e8:	mov	sl, r0
   173ec:	mov	r0, r2
   173f0:	mov	r8, r2
   173f4:	mov	r9, r3
   173f8:	bl	17384 <__generate_code@@Base+0x410>
   173fc:	add	r0, r0, r0, lsl #1
   17400:	lsl	r0, r0, #3
   17404:	add	r3, sl, r0
   17408:	ldr	r2, [sl, r0]
   1740c:	ldrd	r4, [r3, #16]
   17410:	ldrd	r6, [r3, #8]
   17414:	add	r2, r2, #1
   17418:	adds	r4, r4, r8
   1741c:	adc	r5, r5, r9
   17420:	cmp	r8, r6
   17424:	sbcs	r1, r9, r7
   17428:	str	r2, [sl, r0]
   1742c:	strd	r4, [r3, #16]
   17430:	strdlt	r8, [r3, #8]
   17434:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17438:	ldr	r3, [r1, #8]
   1743c:	cmp	r3, #0
   17440:	bxeq	lr
   17444:	push	{r4, r5, r6, r7, r8, lr}
   17448:	add	r2, r1, #6016	; 0x1780
   1744c:	mov	r8, r1
   17450:	mov	r7, r0
   17454:	ldrd	r0, [r1, #24]
   17458:	add	r2, r2, #32
   1745c:	mov	r3, r8
   17460:	mov	ip, #0
   17464:	mov	r4, #0
   17468:	mov	r5, #0
   1746c:	str	ip, [r3, #40]	; 0x28
   17470:	strd	r0, [r3, #48]	; 0x30
   17474:	strd	r4, [r3, #56]	; 0x38
   17478:	add	r3, r3, #24
   1747c:	cmp	r2, r3
   17480:	bne	1746c <__generate_code@@Base+0x4f8>
   17484:	cmp	r7, #0
   17488:	popeq	{r4, r5, r6, r7, r8, pc}
   1748c:	add	r8, r8, #40	; 0x28
   17490:	ldr	r3, [r7, #16]
   17494:	cmp	r3, #0
   17498:	beq	17520 <__generate_code@@Base+0x5ac>
   1749c:	ldr	r2, [r7, #56]	; 0x38
   174a0:	cmp	r2, #0
   174a4:	beq	17520 <__generate_code@@Base+0x5ac>
   174a8:	mov	r6, #0
   174ac:	b	174bc <__generate_code@@Base+0x548>
   174b0:	add	r6, r6, #1
   174b4:	cmp	r2, r6
   174b8:	beq	17520 <__generate_code@@Base+0x5ac>
   174bc:	ldr	r3, [r7, #60]	; 0x3c
   174c0:	ldr	r4, [r3, r6, lsl #2]
   174c4:	cmp	r4, #0
   174c8:	beq	174b0 <__generate_code@@Base+0x53c>
   174cc:	ldr	r3, [r4]
   174d0:	cmp	r3, r7
   174d4:	bne	174b0 <__generate_code@@Base+0x53c>
   174d8:	ldr	r3, [r4, #16]
   174dc:	cmp	r3, #0
   174e0:	beq	174b0 <__generate_code@@Base+0x53c>
   174e4:	mov	r5, #0
   174e8:	ldr	r2, [r4, #20]
   174ec:	lsl	r3, r5, #3
   174f0:	add	r2, r2, r3
   174f4:	mov	r0, r8
   174f8:	ldrd	r2, [r2]
   174fc:	bl	173e0 <__generate_code@@Base+0x46c>
   17500:	ldr	r3, [r4, #16]
   17504:	add	r5, r5, #1
   17508:	cmp	r3, r5
   1750c:	bhi	174e8 <__generate_code@@Base+0x574>
   17510:	ldr	r2, [r7, #56]	; 0x38
   17514:	add	r6, r6, #1
   17518:	cmp	r2, r6
   1751c:	bne	174bc <__generate_code@@Base+0x548>
   17520:	ldr	r7, [r7, #4]
   17524:	cmp	r7, #0
   17528:	bne	17490 <__generate_code@@Base+0x51c>
   1752c:	pop	{r4, r5, r6, r7, r8, pc}
   17530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17534:	sub	sp, sp, #12
   17538:	mov	r5, r0
   1753c:	str	r0, [sp, #4]
   17540:	mov	r6, r2
   17544:	str	r2, [sp]
   17548:	mov	r0, r1
   1754c:	mov	r4, r1
   17550:	ldr	r2, [pc, #344]	; 176b0 <__generate_code@@Base+0x73c>
   17554:	mov	r1, #0
   17558:	bl	11aa4 <memset@plt>
   1755c:	subs	r3, r5, #0
   17560:	mov	r5, #0
   17564:	str	r5, [r6]
   17568:	beq	17694 <__generate_code@@Base+0x720>
   1756c:	mov	r7, r5
   17570:	mov	r9, r5
   17574:	mov	r8, r3
   17578:	ldr	r0, [r8, #12]
   1757c:	bl	11a50 <strlen@plt>
   17580:	cmp	r5, r0
   17584:	ldrcc	r3, [sp]
   17588:	strcc	r0, [r3]
   1758c:	mov	r0, r7
   17590:	ldr	r1, [r8, #8]
   17594:	bl	17130 <__generate_code@@Base+0x1bc>
   17598:	ldr	r6, [r8, #56]	; 0x38
   1759c:	mov	r1, r6
   175a0:	bl	17130 <__generate_code@@Base+0x1bc>
   175a4:	cmp	r6, #0
   175a8:	mov	r7, r0
   175ac:	beq	1767c <__generate_code@@Base+0x708>
   175b0:	ldr	r5, [r8, #60]	; 0x3c
   175b4:	add	r6, r5, r6, lsl #2
   175b8:	b	175dc <__generate_code@@Base+0x668>
   175bc:	mov	r0, r7
   175c0:	mov	r1, r9
   175c4:	bl	17130 <__generate_code@@Base+0x1bc>
   175c8:	mov	r1, r9
   175cc:	bl	17130 <__generate_code@@Base+0x1bc>
   175d0:	mov	r7, r0
   175d4:	cmp	r6, r5
   175d8:	beq	1767c <__generate_code@@Base+0x708>
   175dc:	ldr	fp, [r5], #4
   175e0:	cmp	fp, #0
   175e4:	beq	175bc <__generate_code@@Base+0x648>
   175e8:	ldr	r3, [fp]
   175ec:	cmp	r3, r8
   175f0:	bne	175bc <__generate_code@@Base+0x648>
   175f4:	mov	r0, r7
   175f8:	ldr	r1, [fp, #12]
   175fc:	bl	17130 <__generate_code@@Base+0x1bc>
   17600:	ldr	r1, [fp, #8]
   17604:	bl	17130 <__generate_code@@Base+0x1bc>
   17608:	ldr	r3, [r8, #16]
   1760c:	cmp	r3, #0
   17610:	mov	r7, r0
   17614:	beq	175d4 <__generate_code@@Base+0x660>
   17618:	ldr	sl, [fp, #16]
   1761c:	ldr	r3, [r4, #8]
   17620:	mov	r1, sl
   17624:	add	r3, r3, sl
   17628:	str	r3, [r4, #8]
   1762c:	bl	17130 <__generate_code@@Base+0x1bc>
   17630:	cmp	sl, #0
   17634:	mov	r7, r0
   17638:	beq	175d4 <__generate_code@@Base+0x660>
   1763c:	ldr	ip, [fp, #20]
   17640:	ldrd	r2, [r4, #16]
   17644:	add	lr, ip, sl, lsl #3
   17648:	ldrd	r0, [ip]
   1764c:	ldrd	sl, [r4, #24]
   17650:	adds	r2, r2, r0
   17654:	adc	r3, r3, r1
   17658:	strd	r2, [r4, #16]
   1765c:	ldrd	r0, [ip], #8
   17660:	cmp	sl, r0
   17664:	sbcs	sl, fp, r1
   17668:	strdlt	r0, [r4, #24]
   1766c:	cmp	lr, ip
   17670:	bne	17648 <__generate_code@@Base+0x6d4>
   17674:	cmp	r6, r5
   17678:	bne	175dc <__generate_code@@Base+0x668>
   1767c:	ldr	r8, [r8, #4]
   17680:	cmp	r8, #0
   17684:	beq	17698 <__generate_code@@Base+0x724>
   17688:	ldr	r3, [sp]
   1768c:	ldr	r5, [r3]
   17690:	b	17578 <__generate_code@@Base+0x604>
   17694:	ldr	r7, [sp, #4]
   17698:	ldr	r0, [sp, #4]
   1769c:	mov	r1, r4
   176a0:	bl	17438 <__generate_code@@Base+0x4c4>
   176a4:	mov	r0, r7
   176a8:	add	sp, sp, #12
   176ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b0:	andeq	r1, r0, r8, asr #15
   176b4:	push	{r4, r5, r6, lr}
   176b8:	mov	r4, r0
   176bc:	ldr	r0, [pc, #172]	; 17770 <__generate_code@@Base+0x7fc>
   176c0:	add	r0, pc, r0
   176c4:	bl	119f0 <getenv@plt>
   176c8:	subs	r3, r0, #0
   176cc:	beq	176d8 <__generate_code@@Base+0x764>
   176d0:	bl	11af8 <atoi@plt>
   176d4:	bic	r3, r0, r0, asr #31
   176d8:	ldr	r0, [pc, #148]	; 17774 <__generate_code@@Base+0x800>
   176dc:	str	r3, [r4, #8]
   176e0:	add	r0, pc, r0
   176e4:	bl	119f0 <getenv@plt>
   176e8:	subs	r6, r0, #0
   176ec:	beq	17740 <__generate_code@@Base+0x7cc>
   176f0:	bl	11a50 <strlen@plt>
   176f4:	subs	r5, r0, #0
   176f8:	beq	17740 <__generate_code@@Base+0x7cc>
   176fc:	sub	r3, r5, #1
   17700:	ldrb	r2, [r6, r3]
   17704:	cmp	r2, #47	; 0x2f
   17708:	beq	17734 <__generate_code@@Base+0x7c0>
   1770c:	ldr	r0, [r4, #4]
   17710:	str	r5, [r4, #12]
   17714:	add	r0, r0, #2
   17718:	add	r0, r0, r5
   1771c:	bl	119fc <malloc@plt>
   17720:	mov	r2, r5
   17724:	mov	r1, r6
   17728:	str	r0, [r4]
   1772c:	pop	{r4, r5, r6, lr}
   17730:	b	119b4 <memcpy@plt>
   17734:	cmp	r3, #0
   17738:	movne	r5, r3
   1773c:	bne	1770c <__generate_code@@Base+0x798>
   17740:	ldr	r3, [r4, #8]
   17744:	cmp	r3, #0
   17748:	ldrne	r6, [pc, #40]	; 17778 <__generate_code@@Base+0x804>
   1774c:	movne	r5, #1
   17750:	addne	r6, pc, r6
   17754:	bne	1770c <__generate_code@@Base+0x798>
   17758:	ldr	r0, [r4, #4]
   1775c:	str	r3, [r4, #12]
   17760:	add	r0, r0, #2
   17764:	bl	119fc <malloc@plt>
   17768:	str	r0, [r4]
   1776c:	pop	{r4, r5, r6, pc}
   17770:	strdeq	r2, [r0], -ip
   17774:	strdeq	r2, [r0], -r0
   17778:	andeq	r2, r0, r8, ror #2
   1777c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17780:	sub	sp, sp, #6080	; 0x17c0
   17784:	sub	sp, sp, #44	; 0x2c
   17788:	add	r3, sp, #72	; 0x48
   1778c:	mov	r4, r0
   17790:	str	r0, [sp, #64]	; 0x40
   17794:	str	r1, [sp, #60]	; 0x3c
   17798:	mov	r0, r3
   1779c:	ldr	r2, [pc, #1068]	; 17bd0 <__generate_code@@Base+0xc5c>
   177a0:	mov	r1, #0
   177a4:	str	r3, [sp, #68]	; 0x44
   177a8:	bl	11aa4 <memset@plt>
   177ac:	add	r3, r4, #6016	; 0x1780
   177b0:	add	r3, r3, #8
   177b4:	add	r2, sp, #2016	; 0x7e0
   177b8:	mov	sl, #251	; 0xfb
   177bc:	add	r2, r2, #8
   177c0:	mov	fp, #0
   177c4:	str	r3, [sp, #56]	; 0x38
   177c8:	add	r3, sp, #72	; 0x48
   177cc:	str	r2, [sp, #44]	; 0x2c
   177d0:	str	r3, [sp, #48]	; 0x30
   177d4:	mov	r2, #0
   177d8:	mov	r3, #0
   177dc:	mov	r5, sl
   177e0:	mov	r0, fp
   177e4:	strd	r2, [sp, #24]
   177e8:	str	sl, [sp, #52]	; 0x34
   177ec:	ldr	r9, [sp, #56]	; 0x38
   177f0:	str	r5, [sp, #40]	; 0x28
   177f4:	ldr	sl, [sp, #60]	; 0x3c
   177f8:	ldrd	r2, [r9, #16]
   177fc:	ldr	r4, [r9]
   17800:	str	r4, [sp, #4]
   17804:	strd	r2, [sp, #8]
   17808:	ldr	r3, [sp, #4]
   1780c:	cmp	r3, #0
   17810:	beq	17abc <__generate_code@@Base+0xb48>
   17814:	cmp	fp, #0
   17818:	bne	179a0 <__generate_code@@Base+0xa2c>
   1781c:	ldr	r5, [sp, #40]	; 0x28
   17820:	cmp	r5, #0
   17824:	blt	17bac <__generate_code@@Base+0xc38>
   17828:	add	ip, r5, r5, lsl #1
   1782c:	ldr	fp, [sl, ip, lsl #3]
   17830:	add	ip, sl, ip, lsl #3
   17834:	cmp	fp, #0
   17838:	bne	17ba0 <__generate_code@@Base+0xc2c>
   1783c:	mov	r3, ip
   17840:	ldr	r4, [sp, #4]
   17844:	b	17858 <__generate_code@@Base+0x8e4>
   17848:	ldr	fp, [r3]
   1784c:	mov	ip, r3
   17850:	cmp	fp, #0
   17854:	bne	17b98 <__generate_code@@Base+0xc24>
   17858:	subs	r5, r5, #1
   1785c:	sub	r3, r3, #24
   17860:	bcs	17848 <__generate_code@@Base+0x8d4>
   17864:	ldr	sl, [sp, #52]	; 0x34
   17868:	mov	r8, r0
   1786c:	mov	r5, r4
   17870:	lsl	r4, sl, #1
   17874:	ldr	r3, [sp, #44]	; 0x2c
   17878:	add	lr, r4, sl
   1787c:	sub	ip, r3, #1952	; 0x7a0
   17880:	lsl	lr, lr, #3
   17884:	add	ip, ip, lr
   17888:	ldrd	r0, [sp, #8]
   1788c:	add	lr, r3, lr
   17890:	ldrd	r2, [ip, #16]
   17894:	ldr	r6, [lr, #-1952]	; 0xfffff860
   17898:	adds	r0, r0, r2
   1789c:	adc	r1, r1, r3
   178a0:	mov	r2, r0
   178a4:	mov	r3, r1
   178a8:	ldrd	r0, [ip, #8]
   178ac:	strd	r2, [ip, #16]
   178b0:	ldr	r3, [sp, #56]	; 0x38
   178b4:	add	r5, r6, r5
   178b8:	str	r5, [lr, #-1952]	; 0xfffff860
   178bc:	orrs	lr, r0, r1
   178c0:	ldrd	r2, [r3, #8]
   178c4:	beq	178d4 <__generate_code@@Base+0x960>
   178c8:	cmp	r2, r0
   178cc:	sbcs	r1, r3, r1
   178d0:	bge	178e8 <__generate_code@@Base+0x974>
   178d4:	ldr	r1, [sp, #44]	; 0x2c
   178d8:	add	r0, r4, sl
   178dc:	sub	r1, r1, #1952	; 0x7a0
   178e0:	add	r1, r1, r0, lsl #3
   178e4:	strd	r2, [r1, #8]
   178e8:	add	lr, r4, sl
   178ec:	ldr	r3, [sp, #68]	; 0x44
   178f0:	lsl	lr, lr, #3
   178f4:	add	ip, r3, lr
   178f8:	ldr	r3, [sp, #64]	; 0x40
   178fc:	add	lr, r3, lr
   17900:	b	17950 <__generate_code@@Base+0x9dc>
   17904:	ldrd	r0, [ip, #-8]
   17908:	ldrd	r2, [lr, #-8]
   1790c:	ldrd	r4, [ip, #-16]
   17910:	adds	r6, r0, r2
   17914:	adc	r7, r1, r3
   17918:	ldr	r2, [lr, #-24]	; 0xffffffe8
   1791c:	ldr	r3, [ip, #-24]	; 0xffffffe8
   17920:	orrs	r1, r4, r5
   17924:	add	r3, r3, r2
   17928:	str	r3, [ip, #-24]	; 0xffffffe8
   1792c:	strd	r6, [ip, #-8]
   17930:	ldrd	r2, [lr, #-16]
   17934:	beq	17944 <__generate_code@@Base+0x9d0>
   17938:	cmp	r2, r4
   1793c:	sbcs	r1, r3, r5
   17940:	bge	17948 <__generate_code@@Base+0x9d4>
   17944:	strd	r2, [ip, #-16]
   17948:	sub	ip, ip, #24
   1794c:	sub	lr, lr, #24
   17950:	subs	sl, sl, #1
   17954:	bpl	17904 <__generate_code@@Base+0x990>
   17958:	ldr	r3, [sp, #44]	; 0x2c
   1795c:	add	r0, r8, r8, lsl #1
   17960:	sub	r3, r3, #1952	; 0x7a0
   17964:	add	r3, r3, r0, lsl #3
   17968:	ldrd	r6, [sp, #24]
   1796c:	ldrd	r4, [r3, #16]
   17970:	ldr	r1, [sp, #68]	; 0x44
   17974:	ldr	r0, [sp, #64]	; 0x40
   17978:	adds	r6, r6, r4
   1797c:	adc	r7, r7, r5
   17980:	mov	r4, r6
   17984:	mov	r5, r7
   17988:	ldr	r2, [pc, #576]	; 17bd0 <__generate_code@@Base+0xc5c>
   1798c:	strd	r4, [r3, #16]
   17990:	bl	119b4 <memcpy@plt>
   17994:	add	sp, sp, #6080	; 0x17c0
   17998:	add	sp, sp, #44	; 0x2c
   1799c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179a0:	ldr	r3, [sp, #40]	; 0x28
   179a4:	add	ip, r3, r3, lsl #1
   179a8:	add	ip, sl, ip, lsl #3
   179ac:	ldr	lr, [sp, #4]
   179b0:	cmp	fp, lr
   179b4:	bcc	17b2c <__generate_code@@Base+0xbb8>
   179b8:	ldrd	r2, [r9, #8]
   179bc:	ldrd	r0, [ip, #8]
   179c0:	adds	r4, r2, r0
   179c4:	adc	r5, r3, r1
   179c8:	cmp	fp, lr
   179cc:	strd	r4, [sp, #16]
   179d0:	bls	17bbc <__generate_code@@Base+0xc48>
   179d4:	ldrd	r6, [sp, #24]
   179d8:	mov	r2, fp
   179dc:	mov	r3, #0
   179e0:	umull	r0, r1, lr, r6
   179e4:	mla	r1, lr, r7, r1
   179e8:	bl	190b8 <__gcov_sort_n_vals@@Base+0x534>
   179ec:	mov	r2, r0
   179f0:	subs	r0, r6, r2
   179f4:	mov	r3, r1
   179f8:	sbc	r1, r7, r3
   179fc:	strd	r0, [sp, #24]
   17a00:	ldr	r1, [sp, #4]
   17a04:	mov	r0, #0
   17a08:	sub	fp, fp, r1
   17a0c:	mov	r8, r1
   17a10:	mov	r1, #0
   17a14:	str	r1, [sp, #4]
   17a18:	mov	r1, #0
   17a1c:	ldrd	r6, [sp, #8]
   17a20:	strd	r0, [sp, #8]
   17a24:	adds	r4, r2, r6
   17a28:	adc	r5, r3, r7
   17a2c:	ldrd	r0, [sp, #16]
   17a30:	strd	r4, [sp, #32]
   17a34:	bl	17384 <__generate_code@@Base+0x410>
   17a38:	ldr	r3, [sp, #48]	; 0x30
   17a3c:	ldrd	r4, [sp, #32]
   17a40:	add	r1, r0, r0, lsl #1
   17a44:	lsl	r1, r1, #3
   17a48:	add	ip, r3, r1
   17a4c:	ldr	r3, [sp, #44]	; 0x2c
   17a50:	ldrd	r6, [ip, #8]
   17a54:	add	r1, r3, r1
   17a58:	ldrd	r2, [ip, #16]
   17a5c:	adds	r2, r2, r4
   17a60:	adc	r3, r3, r5
   17a64:	strd	r2, [sp, #32]
   17a68:	ldrd	r2, [sp, #16]
   17a6c:	cmp	r2, r6
   17a70:	sbcs	lr, r3, r7
   17a74:	movlt	lr, #1
   17a78:	movge	lr, #0
   17a7c:	orrs	r4, r6, r7
   17a80:	ldr	r4, [r1, #-1952]	; 0xfffff860
   17a84:	orreq	lr, lr, #1
   17a88:	add	r8, r4, r8
   17a8c:	ldrd	r4, [sp, #32]
   17a90:	cmp	lr, #0
   17a94:	str	r8, [r1, #-1952]	; 0xfffff860
   17a98:	strd	r4, [ip, #16]
   17a9c:	strdne	r2, [ip, #8]
   17aa0:	cmp	fp, #0
   17aa4:	ldreq	r3, [sp, #40]	; 0x28
   17aa8:	subeq	r3, r3, #1
   17aac:	streq	r3, [sp, #40]	; 0x28
   17ab0:	ldr	r3, [sp, #4]
   17ab4:	cmp	r3, #0
   17ab8:	bne	17814 <__generate_code@@Base+0x8a0>
   17abc:	ldr	r3, [sp, #52]	; 0x34
   17ac0:	ldr	r5, [sp, #40]	; 0x28
   17ac4:	sub	r3, r3, #1
   17ac8:	str	r3, [sp, #52]	; 0x34
   17acc:	cmn	r3, #1
   17ad0:	ldr	r3, [sp, #56]	; 0x38
   17ad4:	sub	r3, r3, #24
   17ad8:	str	r3, [sp, #56]	; 0x38
   17adc:	bne	177ec <__generate_code@@Base+0x878>
   17ae0:	cmp	fp, #0
   17ae4:	mov	r9, r5
   17ae8:	subne	r9, r5, #1
   17aec:	cmp	r9, #0
   17af0:	mov	r8, r0
   17af4:	blt	17958 <__generate_code@@Base+0x9e4>
   17af8:	ldr	r2, [sp, #60]	; 0x3c
   17afc:	add	r3, r9, r9, lsl #1
   17b00:	sub	r0, r2, #24
   17b04:	add	r1, r2, r3, lsl #3
   17b08:	ldrd	r2, [sp, #24]
   17b0c:	ldrd	r4, [r1, #16]
   17b10:	sub	r1, r1, #24
   17b14:	adds	r2, r2, r4
   17b18:	adc	r3, r3, r5
   17b1c:	cmp	r0, r1
   17b20:	bne	17b0c <__generate_code@@Base+0xb98>
   17b24:	strd	r2, [sp, #24]
   17b28:	b	17958 <__generate_code@@Base+0x9e4>
   17b2c:	ldrd	r2, [sp, #8]
   17b30:	ldrd	r6, [ip, #8]
   17b34:	ldrd	r4, [r9, #8]
   17b38:	umull	r0, r1, fp, r2
   17b3c:	ldr	r8, [sp, #4]
   17b40:	adds	r4, r4, r6
   17b44:	adc	r5, r5, r7
   17b48:	mla	r1, fp, r3, r1
   17b4c:	mov	r2, r8
   17b50:	mov	r3, #0
   17b54:	strd	r4, [sp, #16]
   17b58:	bl	190b8 <__gcov_sort_n_vals@@Base+0x534>
   17b5c:	sub	r3, r8, fp
   17b60:	str	r3, [sp, #4]
   17b64:	ldrd	r2, [sp, #8]
   17b68:	mov	r8, fp
   17b6c:	mov	fp, #0
   17b70:	subs	r2, r2, r0
   17b74:	sbc	r3, r3, r1
   17b78:	mov	r6, r0
   17b7c:	mov	r7, r1
   17b80:	mov	r0, #0
   17b84:	mov	r1, #0
   17b88:	strd	r2, [sp, #8]
   17b8c:	ldrd	r2, [sp, #24]
   17b90:	strd	r0, [sp, #24]
   17b94:	b	17a24 <__generate_code@@Base+0xab0>
   17b98:	str	r5, [sp, #40]	; 0x28
   17b9c:	str	r4, [sp, #4]
   17ba0:	ldrd	r2, [ip, #16]
   17ba4:	strd	r2, [sp, #24]
   17ba8:	b	179ac <__generate_code@@Base+0xa38>
   17bac:	ldr	sl, [sp, #52]	; 0x34
   17bb0:	mov	r8, r0
   17bb4:	ldr	r5, [sp, #4]
   17bb8:	b	17870 <__generate_code@@Base+0x8fc>
   17bbc:	mov	r0, #0
   17bc0:	mov	r1, #0
   17bc4:	ldrd	r2, [sp, #24]
   17bc8:	strd	r0, [sp, #24]
   17bcc:	b	17a00 <__generate_code@@Base+0xa8c>
   17bd0:	andeq	r1, r0, r0, lsr #15
   17bd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17bd8:	ldrb	r4, [r0]
   17bdc:	cmp	r4, #47	; 0x2f
   17be0:	addeq	r5, r0, #1
   17be4:	ldrbeq	r4, [r0, #1]
   17be8:	movne	r5, r0
   17bec:	cmp	r4, #0
   17bf0:	beq	17c44 <__generate_code@@Base+0xcd0>
   17bf4:	mov	r6, r0
   17bf8:	ldr	sl, [pc, #144]	; 17c90 <__generate_code@@Base+0xd1c>
   17bfc:	mov	r8, #0
   17c00:	mov	r7, #47	; 0x2f
   17c04:	b	17c14 <__generate_code@@Base+0xca0>
   17c08:	ldrb	r4, [r5, #1]!
   17c0c:	cmp	r4, #0
   17c10:	beq	17c44 <__generate_code@@Base+0xcd0>
   17c14:	cmp	r4, #47	; 0x2f
   17c18:	bne	17c08 <__generate_code@@Base+0xc94>
   17c1c:	strb	r8, [r5]
   17c20:	mov	r1, #0
   17c24:	mov	r0, r6
   17c28:	bl	11abc <access@plt>
   17c2c:	cmn	r0, #1
   17c30:	beq	17c50 <__generate_code@@Base+0xcdc>
   17c34:	strb	r7, [r5]
   17c38:	ldrb	r4, [r5, #1]!
   17c3c:	cmp	r4, #0
   17c40:	bne	17c14 <__generate_code@@Base+0xca0>
   17c44:	mov	r9, #0
   17c48:	mov	r0, r9
   17c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c50:	mov	r1, sl
   17c54:	mov	r0, r6
   17c58:	bl	11a8c <mkdir@plt>
   17c5c:	cmn	r0, #1
   17c60:	mov	r9, r0
   17c64:	bne	17c34 <__generate_code@@Base+0xcc0>
   17c68:	bl	11a74 <__errno_location@plt>
   17c6c:	ldr	r3, [r0]
   17c70:	cmp	r3, #17
   17c74:	beq	17c34 <__generate_code@@Base+0xcc0>
   17c78:	ldr	r0, [pc, #20]	; 17c94 <__generate_code@@Base+0xd20>
   17c7c:	mov	r1, r6
   17c80:	add	r0, pc, r0
   17c84:	bl	172d0 <__generate_code@@Base+0x35c>
   17c88:	strb	r4, [r5]
   17c8c:	b	17c48 <__generate_code@@Base+0xcd4>
   17c90:	andeq	r0, r0, sp, ror #3
   17c94:	andeq	r1, r0, ip, asr ip
   17c98:	ldr	r3, [pc, #124]	; 17d1c <__generate_code@@Base+0xda8>
   17c9c:	cmp	r1, r3
   17ca0:	beq	17d14 <__generate_code@@Base+0xda0>
   17ca4:	cmp	r2, #0
   17ca8:	push	{r4, r5, lr}
   17cac:	sub	sp, sp, #12
   17cb0:	ldreq	r2, [r0]
   17cb4:	lsr	r3, r1, #24
   17cb8:	ldr	r0, [pc, #96]	; 17d20 <__generate_code@@Base+0xdac>
   17cbc:	lsr	r5, r1, #16
   17cc0:	lsr	r4, r1, #8
   17cc4:	strb	r1, [sp, #3]
   17cc8:	strb	r3, [sp]
   17ccc:	mov	r1, #53	; 0x35
   17cd0:	mov	r3, #42	; 0x2a
   17cd4:	mov	lr, #54	; 0x36
   17cd8:	mov	ip, #48	; 0x30
   17cdc:	strb	r1, [sp, #6]
   17ce0:	strb	r3, [sp, #7]
   17ce4:	mov	r1, r2
   17ce8:	mov	r3, sp
   17cec:	add	r2, sp, #4
   17cf0:	add	r0, pc, r0
   17cf4:	strb	r5, [sp, #1]
   17cf8:	strb	r4, [sp, #2]
   17cfc:	strb	lr, [sp, #4]
   17d00:	strb	ip, [sp, #5]
   17d04:	bl	172d0 <__generate_code@@Base+0x35c>
   17d08:	mov	r0, #0
   17d0c:	add	sp, sp, #12
   17d10:	pop	{r4, r5, pc}
   17d14:	mov	r0, #1
   17d18:	bx	lr
   17d1c:	ldrtcc	r3, [r0], -sl, lsr #10
   17d20:	andeq	r1, r0, r4, lsl ip
   17d24:	ldr	r2, [r2, #16]
   17d28:	push	{r4, r5, r6, lr}
   17d2c:	cmp	r2, #0
   17d30:	mov	r6, r3
   17d34:	ldr	ip, [sp, #16]
   17d38:	beq	17e04 <__generate_code@@Base+0xe90>
   17d3c:	ldr	r3, [r3, #12]
   17d40:	cmp	r1, #0
   17d44:	addeq	r2, r3, #1
   17d48:	streq	r2, [r6, #12]
   17d4c:	cmp	r3, #0
   17d50:	beq	17da8 <__generate_code@@Base+0xe34>
   17d54:	ldrd	r0, [ip, #16]
   17d58:	ldrd	r2, [r6, #16]
   17d5c:	ldrd	r4, [r6, #24]
   17d60:	adds	r2, r2, r0
   17d64:	adc	r3, r3, r1
   17d68:	strd	r2, [r6, #16]
   17d6c:	ldrd	r0, [ip, #24]
   17d70:	cmp	r4, r0
   17d74:	sbcs	r3, r5, r1
   17d78:	blt	17e28 <__generate_code@@Base+0xeb4>
   17d7c:	ldrd	r2, [r6, #32]
   17d80:	adds	r2, r2, r0
   17d84:	adc	r3, r3, r1
   17d88:	strd	r2, [r6, #32]
   17d8c:	add	r1, ip, #40	; 0x28
   17d90:	add	r0, r6, #40	; 0x28
   17d94:	bl	1777c <__generate_code@@Base+0x808>
   17d98:	ldr	r3, [sp, #20]
   17d9c:	mov	r0, #0
   17da0:	str	r3, [r6]
   17da4:	pop	{r4, r5, r6, pc}
   17da8:	ldr	r1, [ip, #8]
   17dac:	ldrd	r2, [r6, #16]
   17db0:	str	r1, [r6, #8]
   17db4:	ldrd	r0, [ip, #16]
   17db8:	ldrd	r4, [r6, #24]
   17dbc:	adds	r2, r2, r0
   17dc0:	adc	r3, r3, r1
   17dc4:	strd	r2, [r6, #16]
   17dc8:	ldrd	r0, [ip, #24]
   17dcc:	cmp	r4, r0
   17dd0:	sbcs	r3, r5, r1
   17dd4:	bge	17e44 <__generate_code@@Base+0xed0>
   17dd8:	ldrd	r2, [r6, #32]
   17ddc:	strd	r0, [r6, #24]
   17de0:	ldrd	r0, [ip, #24]
   17de4:	adds	r2, r2, r0
   17de8:	adc	r3, r3, r1
   17dec:	strd	r2, [r6, #32]
   17df0:	add	r1, ip, #40	; 0x28
   17df4:	ldr	r2, [pc, #92]	; 17e58 <__generate_code@@Base+0xee4>
   17df8:	add	r0, r6, #40	; 0x28
   17dfc:	bl	119b4 <memcpy@plt>
   17e00:	b	17d98 <__generate_code@@Base+0xe24>
   17e04:	ldr	r3, [r3, #12]
   17e08:	cmp	r3, #0
   17e0c:	beq	17d98 <__generate_code@@Base+0xe24>
   17e10:	mov	r1, r0
   17e14:	ldr	r0, [pc, #64]	; 17e5c <__generate_code@@Base+0xee8>
   17e18:	add	r0, pc, r0
   17e1c:	bl	172d0 <__generate_code@@Base+0x35c>
   17e20:	mvn	r0, #0
   17e24:	pop	{r4, r5, r6, pc}
   17e28:	ldrd	r2, [r6, #32]
   17e2c:	strd	r0, [r6, #24]
   17e30:	ldrd	r0, [ip, #24]
   17e34:	adds	r2, r2, r0
   17e38:	adc	r3, r3, r1
   17e3c:	strd	r2, [r6, #32]
   17e40:	b	17d8c <__generate_code@@Base+0xe18>
   17e44:	ldrd	r2, [r6, #32]
   17e48:	adds	r2, r2, r0
   17e4c:	adc	r3, r3, r1
   17e50:	strd	r2, [r6, #32]
   17e54:	b	17df0 <__generate_code@@Base+0xe7c>
   17e58:	andeq	r1, r0, r0, lsr #15
   17e5c:	andeq	r1, r0, r4, lsr #22
   17e60:	ldr	ip, [pc, #52]	; 17e9c <__generate_code@@Base+0xf28>
   17e64:	ldr	r3, [pc, #52]	; 17ea0 <__generate_code@@Base+0xf2c>
   17e68:	add	ip, pc, ip
   17e6c:	push	{r4, lr}
   17e70:	mov	lr, #0
   17e74:	ldr	r3, [ip, r3]
   17e78:	mvn	r4, #0
   17e7c:	mov	r2, lr
   17e80:	mov	r1, lr
   17e84:	str	r4, [r3, #24]
   17e88:	str	lr, [r3, #4]
   17e8c:	str	lr, [r3, #8]
   17e90:	ldr	r0, [r3]
   17e94:	pop	{r4, lr}
   17e98:	b	11b04 <fseek@plt>
   17e9c:	muleq	r1, r0, r1
   17ea0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17ea4:	push	{r4, r5, r6, r7, lr}
   17ea8:	sub	sp, sp, #108	; 0x6c
   17eac:	mov	r4, #0
   17eb0:	mov	r7, r0
   17eb4:	strh	r4, [sp, #2]
   17eb8:	str	r4, [sp, #4]
   17ebc:	str	r4, [sp, #8]
   17ec0:	bl	11a38 <getpid@plt>
   17ec4:	ldr	r3, [pc, #240]	; 17fbc <__generate_code@@Base+0x1048>
   17ec8:	ldr	ip, [pc, #240]	; 17fc0 <__generate_code@@Base+0x104c>
   17ecc:	add	r3, pc, r3
   17ed0:	mvn	lr, #0
   17ed4:	mov	r6, #1
   17ed8:	ldr	r2, [pc, #228]	; 17fc4 <__generate_code@@Base+0x1050>
   17edc:	mov	r1, #66	; 0x42
   17ee0:	str	r0, [sp, #12]
   17ee4:	ldr	r5, [r3, ip]
   17ee8:	mov	r0, r7
   17eec:	strh	r6, [sp]
   17ef0:	str	r4, [r5, #4]
   17ef4:	str	r4, [r5, #12]
   17ef8:	str	r4, [r5, #8]
   17efc:	str	r4, [r5, #20]
   17f00:	str	lr, [r5, #16]
   17f04:	bl	11a2c <open@plt>
   17f08:	subs	r6, r0, #0
   17f0c:	movlt	r0, r4
   17f10:	blt	17f90 <__generate_code@@Base+0x101c>
   17f14:	mov	r7, sp
   17f18:	mov	r4, #7
   17f1c:	mov	r2, r7
   17f20:	mov	r1, r4
   17f24:	mov	r0, r6
   17f28:	bl	11a98 <fcntl@plt>
   17f2c:	cmp	r0, #0
   17f30:	beq	17f44 <__generate_code@@Base+0xfd0>
   17f34:	bl	11a74 <__errno_location@plt>
   17f38:	ldr	r3, [r0]
   17f3c:	cmp	r3, #4
   17f40:	beq	17f1c <__generate_code@@Base+0xfa8>
   17f44:	ldr	r1, [pc, #124]	; 17fc8 <__generate_code@@Base+0x1054>
   17f48:	mov	r0, r6
   17f4c:	add	r1, pc, r1
   17f50:	bl	1196c <fdopen@plt>
   17f54:	mov	r4, r0
   17f58:	cmp	r4, #0
   17f5c:	mov	r0, r6
   17f60:	str	r4, [r5]
   17f64:	beq	17f98 <__generate_code@@Base+0x1024>
   17f68:	add	r1, sp, #16
   17f6c:	bl	19384 <__libc_csu_fini@@Base+0x1c>
   17f70:	cmp	r0, #0
   17f74:	blt	17fa4 <__generate_code@@Base+0x1030>
   17f78:	mov	r4, #1
   17f7c:	ldr	r0, [r5]
   17f80:	mov	r1, #0
   17f84:	str	r4, [r5, #24]
   17f88:	bl	11984 <setbuf@plt>
   17f8c:	mov	r0, r4
   17f90:	add	sp, sp, #108	; 0x6c
   17f94:	pop	{r4, r5, r6, r7, pc}
   17f98:	bl	11b28 <close@plt>
   17f9c:	mov	r0, r4
   17fa0:	b	17f90 <__generate_code@@Base+0x101c>
   17fa4:	mov	r4, #0
   17fa8:	ldr	r0, [r5]
   17fac:	bl	11ac8 <fclose@plt>
   17fb0:	str	r4, [r5]
   17fb4:	mov	r0, r4
   17fb8:	b	17f90 <__generate_code@@Base+0x101c>
   17fbc:	andeq	r2, r1, ip, lsr #2
   17fc0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17fc4:			; <UNDEFINED> instruction: 0x000001b6
   17fc8:	andeq	r1, r0, ip, lsl sl
   17fcc:	push	{r4, r5, r6, lr}
   17fd0:	mov	r4, r1
   17fd4:	ldr	r5, [pc, #244]	; 180d0 <__generate_code@@Base+0x115c>
   17fd8:	ldr	ip, [r4, #8]
   17fdc:	ldr	lr, [r4, #12]
   17fe0:	ldr	r6, [r4]
   17fe4:	cmp	ip, #0
   17fe8:	mov	r1, r0
   17fec:	add	r5, pc, r5
   17ff0:	add	r0, r6, lr
   17ff4:	ble	18030 <__generate_code@@Base+0x10bc>
   17ff8:	ldrb	r3, [r1]
   17ffc:	cmp	r3, #47	; 0x2f
   18000:	addeq	r2, r1, #1
   18004:	ldrbeq	r3, [r1, #1]
   18008:	movne	r2, r1
   1800c:	cmp	r3, #0
   18010:	beq	18030 <__generate_code@@Base+0x10bc>
   18014:	cmp	r3, #47	; 0x2f
   18018:	moveq	r1, r2
   1801c:	ldrb	r3, [r2, #1]!
   18020:	subeq	ip, ip, #1
   18024:	cmp	r3, #0
   18028:	cmpne	ip, #0
   1802c:	bne	18014 <__generate_code@@Base+0x10a0>
   18030:	cmp	lr, #0
   18034:	beq	1804c <__generate_code@@Base+0x10d8>
   18038:	ldrb	r3, [r1]
   1803c:	cmp	r3, #47	; 0x2f
   18040:	addne	r0, r0, #1
   18044:	movne	r3, #47	; 0x2f
   18048:	strbne	r3, [r6, lr]
   1804c:	bl	119d8 <strcpy@plt>
   18050:	ldr	r0, [r4]
   18054:	bl	17ea4 <__generate_code@@Base+0xf30>
   18058:	cmp	r0, #0
   1805c:	beq	18068 <__generate_code@@Base+0x10f4>
   18060:	mov	r0, #0
   18064:	pop	{r4, r5, r6, pc}
   18068:	ldr	r0, [r4]
   1806c:	bl	17bd4 <__generate_code@@Base+0xc60>
   18070:	cmp	r0, #0
   18074:	bne	180ac <__generate_code@@Base+0x1138>
   18078:	ldr	r0, [r4]
   1807c:	bl	17ea4 <__generate_code@@Base+0xf30>
   18080:	cmp	r0, #0
   18084:	bne	18060 <__generate_code@@Base+0x10ec>
   18088:	ldr	r3, [pc, #68]	; 180d4 <__generate_code@@Base+0x1160>
   1808c:	ldr	r1, [pc, #68]	; 180d8 <__generate_code@@Base+0x1164>
   18090:	ldr	r2, [r4]
   18094:	ldr	r3, [r5, r3]
   18098:	add	r1, pc, r1
   1809c:	ldr	r0, [r3]
   180a0:	bl	11a68 <fprintf@plt>
   180a4:	mvn	r0, #0
   180a8:	pop	{r4, r5, r6, pc}
   180ac:	ldr	r3, [pc, #32]	; 180d4 <__generate_code@@Base+0x1160>
   180b0:	ldr	r1, [pc, #36]	; 180dc <__generate_code@@Base+0x1168>
   180b4:	ldr	r2, [r4]
   180b8:	ldr	r3, [r5, r3]
   180bc:	add	r1, pc, r1
   180c0:	ldr	r0, [r3]
   180c4:	bl	11a68 <fprintf@plt>
   180c8:	mvn	r0, #0
   180cc:	pop	{r4, r5, r6, pc}
   180d0:	andeq	r2, r1, ip
   180d4:	andeq	r0, r0, r4, lsr #1
   180d8:	andeq	r1, r0, r8, ror #17
   180dc:			; <UNDEFINED> instruction: 0x000018b0
   180e0:	ldr	r3, [pc, #96]	; 18148 <__generate_code@@Base+0x11d4>
   180e4:	ldr	r2, [pc, #96]	; 1814c <__generate_code@@Base+0x11d8>
   180e8:	add	r3, pc, r3
   180ec:	push	{r4, lr}
   180f0:	ldr	r4, [r3, r2]
   180f4:	ldr	r0, [r4]
   180f8:	cmp	r0, #0
   180fc:	beq	1811c <__generate_code@@Base+0x11a8>
   18100:	ldr	r3, [r4, #8]
   18104:	cmp	r3, #0
   18108:	bne	1812c <__generate_code@@Base+0x11b8>
   1810c:	bl	11ac8 <fclose@plt>
   18110:	mov	r3, #0
   18114:	str	r3, [r4]
   18118:	str	r3, [r4, #12]
   1811c:	mov	r3, #0
   18120:	str	r3, [r4, #24]
   18124:	ldr	r0, [r4, #20]
   18128:	pop	{r4, pc}
   1812c:	ldr	r2, [r4, #24]
   18130:	cmp	r2, #0
   18134:	bge	1810c <__generate_code@@Base+0x1198>
   18138:	mov	r0, r3
   1813c:	bl	1715c <__generate_code@@Base+0x1e8>
   18140:	ldr	r0, [r4]
   18144:	b	1810c <__generate_code@@Base+0x1198>
   18148:	andeq	r1, r1, r0, lsl pc
   1814c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18150:	push	{r4, lr}
   18154:	mov	r4, r0
   18158:	mov	r0, #1
   1815c:	bl	171b8 <__generate_code@@Base+0x244>
   18160:	str	r4, [r0]
   18164:	pop	{r4, pc}
   18168:	push	{r4, r5, r6, lr}
   1816c:	mov	r5, r0
   18170:	mov	r0, #2
   18174:	mov	r4, r1
   18178:	bl	171b8 <__generate_code@@Base+0x244>
   1817c:	str	r5, [r0]
   18180:	str	r4, [r0, #4]
   18184:	pop	{r4, r5, r6, pc}
   18188:	push	{r4, r5, r6, lr}
   1818c:	mov	r5, r0
   18190:	mov	r0, #2
   18194:	mov	r4, r1
   18198:	bl	171b8 <__generate_code@@Base+0x244>
   1819c:	str	r5, [r0]
   181a0:	str	r4, [r0, #4]
   181a4:	pop	{r4, r5, r6, pc}
   181a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   181ac:	sub	sp, sp, #32
   181b0:	mov	r7, sp
   181b4:	mov	r5, r1
   181b8:	mov	r6, sp
   181bc:	add	r2, sp, #32
   181c0:	mov	r3, #0
   181c4:	str	r3, [r6], #4
   181c8:	cmp	r2, r6
   181cc:	bne	181c4 <__generate_code@@Base+0x1250>
   181d0:	mov	r8, #0
   181d4:	mov	r3, r8
   181d8:	mov	r4, r5
   181dc:	mov	r1, r5
   181e0:	mov	r9, #1
   181e4:	lsr	r2, r3, #5
   181e8:	ldr	lr, [r1, #40]	; 0x28
   181ec:	add	ip, sp, #32
   181f0:	cmp	lr, #0
   181f4:	add	r2, ip, r2, lsl #2
   181f8:	and	sl, r3, #31
   181fc:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   18200:	add	r3, r3, #1
   18204:	orrne	ip, ip, r9, lsl sl
   18208:	addne	r8, r8, #1
   1820c:	strne	ip, [r2, #-32]	; 0xffffffe0
   18210:	cmp	r3, #252	; 0xfc
   18214:	add	r1, r1, #24
   18218:	bne	181e4 <__generate_code@@Base+0x1270>
   1821c:	add	r8, r8, r8, lsl #2
   18220:	add	r1, r8, #17
   18224:	bl	18188 <__generate_code@@Base+0x1214>
   18228:	ldr	r0, [r5]
   1822c:	bl	18150 <__generate_code@@Base+0x11dc>
   18230:	ldr	r0, [r5, #8]
   18234:	bl	18150 <__generate_code@@Base+0x11dc>
   18238:	ldr	r0, [r5, #12]
   1823c:	bl	18150 <__generate_code@@Base+0x11dc>
   18240:	ldrd	r0, [r5, #16]
   18244:	bl	18168 <__generate_code@@Base+0x11f4>
   18248:	ldrd	r0, [r5, #24]
   1824c:	bl	18168 <__generate_code@@Base+0x11f4>
   18250:	ldrd	r0, [r5, #32]
   18254:	bl	18168 <__generate_code@@Base+0x11f4>
   18258:	ldr	r0, [r7], #4
   1825c:	bl	18150 <__generate_code@@Base+0x11dc>
   18260:	cmp	r7, r6
   18264:	bne	18258 <__generate_code@@Base+0x12e4>
   18268:	add	r5, r5, #6016	; 0x1780
   1826c:	add	r5, r5, #32
   18270:	b	18280 <__generate_code@@Base+0x130c>
   18274:	add	r4, r4, #24
   18278:	cmp	r4, r5
   1827c:	beq	182ac <__generate_code@@Base+0x1338>
   18280:	ldr	r0, [r4, #40]	; 0x28
   18284:	cmp	r0, #0
   18288:	beq	18274 <__generate_code@@Base+0x1300>
   1828c:	bl	18150 <__generate_code@@Base+0x11dc>
   18290:	ldrd	r0, [r4, #48]	; 0x30
   18294:	bl	18168 <__generate_code@@Base+0x11f4>
   18298:	add	r4, r4, #24
   1829c:	ldrd	r0, [r4, #32]
   182a0:	bl	18168 <__generate_code@@Base+0x11f4>
   182a4:	cmp	r4, r5
   182a8:	bne	18280 <__generate_code@@Base+0x130c>
   182ac:	add	sp, sp, #32
   182b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   182b4:	push	{r4, lr}
   182b8:	mov	r0, #1
   182bc:	bl	17214 <__generate_code@@Base+0x2a0>
   182c0:	subs	r3, r0, #0
   182c4:	popeq	{r4, pc}
   182c8:	ldr	r0, [r3]
   182cc:	pop	{r4, lr}
   182d0:	b	1712c <__generate_code@@Base+0x1b8>
   182d4:	push	{r4, r5, r6, lr}
   182d8:	mov	r0, #2
   182dc:	bl	17214 <__generate_code@@Base+0x2a0>
   182e0:	subs	r3, r0, #0
   182e4:	beq	18314 <__generate_code@@Base+0x13a0>
   182e8:	ldr	r0, [r3]
   182ec:	bl	1712c <__generate_code@@Base+0x1b8>
   182f0:	mov	r5, #0
   182f4:	mov	r4, r0
   182f8:	ldr	r0, [r3, #4]
   182fc:	bl	1712c <__generate_code@@Base+0x1b8>
   18300:	mov	r2, #0
   18304:	mov	r3, r0
   18308:	orr	r1, r3, r5
   1830c:	orr	r0, r2, r4
   18310:	pop	{r4, r5, r6, pc}
   18314:	mov	r0, #0
   18318:	mov	r1, #0
   1831c:	pop	{r4, r5, r6, pc}
   18320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18324:	sub	sp, sp, #28
   18328:	mov	r4, #0
   1832c:	str	r1, [sp, #8]
   18330:	str	r3, [sp, #12]
   18334:	add	r3, r1, #56	; 0x38
   18338:	add	r1, r1, #16
   1833c:	str	r0, [sp, #16]
   18340:	str	r2, [sp, #20]
   18344:	ldr	r2, [r3, #-4]!
   18348:	cmp	r2, #0
   1834c:	addne	r4, r4, #1
   18350:	cmp	r3, r1
   18354:	bne	18344 <__generate_code@@Base+0x13d0>
   18358:	add	r4, r4, #4
   1835c:	lsl	r4, r4, #3
   18360:	mov	r0, r4
   18364:	bl	119fc <malloc@plt>
   18368:	subs	r8, r0, #0
   1836c:	beq	18430 <__generate_code@@Base+0x14bc>
   18370:	ldr	r3, [sp, #12]
   18374:	mov	r4, #0
   18378:	str	r3, [r8, #4]
   1837c:	str	r4, [r8]
   18380:	bl	182b4 <__generate_code@@Base+0x1340>
   18384:	ldr	r3, [sp, #8]
   18388:	ldr	r5, [pc, #272]	; 184a0 <__generate_code@@Base+0x152c>
   1838c:	add	r6, r3, #12
   18390:	mov	r7, r4
   18394:	str	r0, [r8, #12]
   18398:	bl	182b4 <__generate_code@@Base+0x1340>
   1839c:	str	r0, [r8, #16]
   183a0:	bl	182b4 <__generate_code@@Base+0x1340>
   183a4:	str	r0, [r8, #20]
   183a8:	ldr	r3, [r6, #4]!
   183ac:	cmp	r3, #0
   183b0:	beq	1840c <__generate_code@@Base+0x1498>
   183b4:	bl	182b4 <__generate_code@@Base+0x1340>
   183b8:	cmp	r5, r0
   183bc:	bne	18484 <__generate_code@@Base+0x1510>
   183c0:	bl	182b4 <__generate_code@@Base+0x1340>
   183c4:	lsr	r9, r0, #1
   183c8:	lsl	fp, r9, #3
   183cc:	mov	r0, fp
   183d0:	bl	119fc <malloc@plt>
   183d4:	subs	sl, r0, #0
   183d8:	beq	18494 <__generate_code@@Base+0x1520>
   183dc:	add	r3, r8, r7, lsl #3
   183e0:	cmp	r9, #0
   183e4:	str	r9, [r3, #24]
   183e8:	str	sl, [r3, #28]
   183ec:	sub	r9, r9, #1
   183f0:	beq	18408 <__generate_code@@Base+0x1494>
   183f4:	bl	182d4 <__generate_code@@Base+0x1360>
   183f8:	sub	r9, r9, #1
   183fc:	cmn	r9, #1
   18400:	strd	r0, [sl], #8
   18404:	bne	183f4 <__generate_code@@Base+0x1480>
   18408:	add	r7, r7, #1
   1840c:	add	r4, r4, #1
   18410:	cmp	r4, #10
   18414:	add	r5, r5, #131072	; 0x20000
   18418:	bne	183a8 <__generate_code@@Base+0x1434>
   1841c:	ldr	r3, [sp, #20]
   18420:	mov	r0, r8
   18424:	str	r8, [r3]
   18428:	add	sp, sp, #28
   1842c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18430:	mvn	r5, #0
   18434:	cmp	r4, #0
   18438:	beq	18474 <__generate_code@@Base+0x1500>
   1843c:	ldr	r3, [pc, #96]	; 184a4 <__generate_code@@Base+0x1530>
   18440:	add	r3, pc, r3
   18444:	ldr	r0, [pc, #92]	; 184a8 <__generate_code@@Base+0x1534>
   18448:	ldr	r2, [sp, #12]
   1844c:	ldr	r1, [sp, #16]
   18450:	str	r4, [sp]
   18454:	add	r0, pc, r0
   18458:	bl	172d0 <__generate_code@@Base+0x35c>
   1845c:	mov	r2, r5
   18460:	mov	r1, r8
   18464:	ldr	r0, [sp, #8]
   18468:	add	sp, sp, #28
   1846c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18470:	b	17318 <__generate_code@@Base+0x3a4>
   18474:	ldr	r3, [pc, #48]	; 184ac <__generate_code@@Base+0x1538>
   18478:	mov	r4, r5
   1847c:	add	r3, pc, r3
   18480:	b	18444 <__generate_code@@Base+0x14d0>
   18484:	ldr	r3, [pc, #36]	; 184b0 <__generate_code@@Base+0x153c>
   18488:	mov	r5, r4
   1848c:	add	r3, pc, r3
   18490:	b	18444 <__generate_code@@Base+0x14d0>
   18494:	mov	r5, r4
   18498:	mov	r4, fp
   1849c:	b	18434 <__generate_code@@Base+0x14c0>
   184a0:			; <UNDEFINED> instruction: 0x01a10000
   184a4:	andeq	r1, r0, ip, asr r5
   184a8:	andeq	r1, r0, ip, ror #10
   184ac:	andeq	r1, r0, r0, lsr r5
   184b0:	andeq	r1, r0, r0, lsr #10
   184b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184b8:	sub	sp, sp, #44	; 0x2c
   184bc:	mov	r9, r0
   184c0:	bl	182b4 <__generate_code@@Base+0x1340>
   184c4:	mov	r7, #0
   184c8:	add	sl, sp, #8
   184cc:	mov	r4, sl
   184d0:	add	r5, sp, #40	; 0x28
   184d4:	str	r0, [r9]
   184d8:	bl	182b4 <__generate_code@@Base+0x1340>
   184dc:	str	r0, [r9, #8]
   184e0:	bl	182b4 <__generate_code@@Base+0x1340>
   184e4:	str	r0, [r9, #12]
   184e8:	bl	182d4 <__generate_code@@Base+0x1360>
   184ec:	strd	r0, [r9, #16]
   184f0:	bl	182d4 <__generate_code@@Base+0x1360>
   184f4:	strd	r0, [r9, #24]
   184f8:	bl	182d4 <__generate_code@@Base+0x1360>
   184fc:	ldr	r2, [pc, #244]	; 185f8 <__generate_code@@Base+0x1684>
   18500:	strd	r0, [r9, #32]
   18504:	add	r0, r9, #40	; 0x28
   18508:	mov	r1, r7
   1850c:	bl	11aa4 <memset@plt>
   18510:	bl	182b4 <__generate_code@@Base+0x1340>
   18514:	str	r0, [r4], #4
   18518:	bl	1919c <__gcov_sort_n_vals@@Base+0x618>
   1851c:	cmp	r5, r4
   18520:	add	r7, r7, r0
   18524:	bne	18510 <__generate_code@@Base+0x159c>
   18528:	cmp	r7, #0
   1852c:	sub	r7, r7, #1
   18530:	beq	185e4 <__generate_code@@Base+0x1670>
   18534:	ldr	r8, [pc, #192]	; 185fc <__generate_code@@Base+0x1688>
   18538:	mov	r4, #0
   1853c:	ldr	r3, [pc, #188]	; 18600 <__generate_code@@Base+0x168c>
   18540:	add	r8, pc, r8
   18544:	mov	r5, r4
   18548:	mov	r6, r4
   1854c:	add	r3, pc, r3
   18550:	str	r3, [sp, #4]
   18554:	cmp	r4, #0
   18558:	addeq	r6, sl, r5, lsl #2
   1855c:	beq	18568 <__generate_code@@Base+0x15f4>
   18560:	b	18590 <__generate_code@@Base+0x161c>
   18564:	mov	r5, r3
   18568:	cmp	r5, #7
   1856c:	bls	18578 <__generate_code@@Base+0x1604>
   18570:	mov	r0, r8
   18574:	bl	172d0 <__generate_code@@Base+0x35c>
   18578:	ldr	r4, [r6], #4
   1857c:	add	r3, r5, #1
   18580:	cmp	r4, #0
   18584:	beq	18564 <__generate_code@@Base+0x15f0>
   18588:	lsl	r6, r5, #5
   1858c:	mov	r5, r3
   18590:	tst	r4, #1
   18594:	bne	185a8 <__generate_code@@Base+0x1634>
   18598:	lsr	r4, r4, #1
   1859c:	tst	r4, #1
   185a0:	add	r6, r6, #1
   185a4:	beq	18598 <__generate_code@@Base+0x1624>
   185a8:	cmp	r6, #251	; 0xfb
   185ac:	bhi	185ec <__generate_code@@Base+0x1678>
   185b0:	bl	182b4 <__generate_code@@Base+0x1340>
   185b4:	add	r3, r6, r6, lsl #1
   185b8:	sub	r7, r7, #1
   185bc:	add	fp, r9, r3, lsl #3
   185c0:	lsr	r4, r4, #1
   185c4:	add	r6, r6, #1
   185c8:	str	r0, [fp, #40]	; 0x28
   185cc:	bl	182d4 <__generate_code@@Base+0x1360>
   185d0:	strd	r0, [fp, #48]	; 0x30
   185d4:	bl	182d4 <__generate_code@@Base+0x1360>
   185d8:	cmn	r7, #1
   185dc:	strd	r0, [fp, #56]	; 0x38
   185e0:	bne	18554 <__generate_code@@Base+0x15e0>
   185e4:	add	sp, sp, #44	; 0x2c
   185e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ec:	ldr	r0, [sp, #4]
   185f0:	bl	172d0 <__generate_code@@Base+0x35c>
   185f4:	b	185b0 <__generate_code@@Base+0x163c>
   185f8:	andeq	r1, r0, r0, lsr #15
   185fc:	andeq	r1, r0, r0, ror #9
   18600:	muleq	r0, r8, r4
   18604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18608:	sub	sp, sp, #6080	; 0x17c0
   1860c:	sub	sp, sp, #28
   18610:	mov	r4, r1
   18614:	stmib	sp, {r2, r3}
   18618:	add	r3, sp, #6144	; 0x1800
   1861c:	mov	sl, r0
   18620:	ldr	r7, [r3]
   18624:	add	r3, sp, #6144	; 0x1800
   18628:	add	r3, r3, #4
   1862c:	ldr	r6, [r3]
   18630:	bl	182b4 <__generate_code@@Base+0x1340>
   18634:	add	r3, r4, #12
   18638:	mov	r2, sl
   1863c:	str	r3, [sp, #12]
   18640:	mov	r1, r0
   18644:	mov	r0, r3
   18648:	bl	17c98 <__generate_code@@Base+0xd24>
   1864c:	cmp	r0, #0
   18650:	beq	188d0 <__generate_code@@Base+0x195c>
   18654:	bl	182b4 <__generate_code@@Base+0x1340>
   18658:	ldr	r3, [r4, #8]
   1865c:	cmp	r0, r3
   18660:	beq	18674 <__generate_code@@Base+0x1700>
   18664:	mov	r0, #0
   18668:	add	sp, sp, #6080	; 0x17c0
   1866c:	add	sp, sp, #28
   18670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18674:	ldr	fp, [pc, #628]	; 188f0 <__generate_code@@Base+0x197c>
   18678:	add	r9, sp, #2000	; 0x7d0
   1867c:	add	r5, sp, #16
   18680:	add	fp, pc, fp
   18684:	add	r9, r9, #8
   18688:	bl	170dc <__generate_code@@Base+0x168>
   1868c:	str	r0, [r6]
   18690:	bl	182b4 <__generate_code@@Base+0x1340>
   18694:	cmp	r0, #-1560281088	; 0xa3000000
   18698:	bne	1873c <__generate_code@@Base+0x17c8>
   1869c:	bl	182b4 <__generate_code@@Base+0x1340>
   186a0:	mov	r0, r5
   186a4:	bl	184b4 <__generate_code@@Base+0x1540>
   186a8:	bl	17100 <__generate_code@@Base+0x18c>
   186ac:	subs	r8, r0, #0
   186b0:	bne	18870 <__generate_code@@Base+0x18fc>
   186b4:	ldr	r3, [r7]
   186b8:	cmp	r3, #0
   186bc:	bne	18708 <__generate_code@@Base+0x1794>
   186c0:	add	r2, sp, #6144	; 0x1800
   186c4:	add	r2, r2, #8
   186c8:	ldr	r3, [r9, #-1992]	; 0xfffff838
   186cc:	ldr	r2, [r2]
   186d0:	cmp	r3, r2
   186d4:	bne	18688 <__generate_code@@Base+0x1714>
   186d8:	ldr	r3, [sp, #8]
   186dc:	ldr	ip, [r9, #-1984]	; 0xfffff840
   186e0:	ldr	r2, [pc, #524]	; 188f4 <__generate_code@@Base+0x1980>
   186e4:	ldr	r3, [r3, #8]
   186e8:	mov	r1, r5
   186ec:	cmp	ip, r3
   186f0:	ldr	r0, [sp, #4]
   186f4:	bne	18688 <__generate_code@@Base+0x1714>
   186f8:	bl	119b4 <memcpy@plt>
   186fc:	ldr	r3, [r6]
   18700:	str	r3, [r7]
   18704:	b	18688 <__generate_code@@Base+0x1714>
   18708:	ldr	r0, [pc, #488]	; 188f8 <__generate_code@@Base+0x1984>
   1870c:	bl	119fc <malloc@plt>
   18710:	ldr	r2, [pc, #476]	; 188f4 <__generate_code@@Base+0x1980>
   18714:	mov	r1, r5
   18718:	mov	r3, r0
   1871c:	str	r0, [fp]
   18720:	add	r0, r0, #8
   18724:	str	r3, [sp]
   18728:	bl	119b4 <memcpy@plt>
   1872c:	ldr	r3, [sp]
   18730:	str	r8, [r3]
   18734:	ldr	fp, [fp]
   18738:	b	18688 <__generate_code@@Base+0x1714>
   1873c:	ldr	r5, [r4, #56]	; 0x38
   18740:	cmp	r5, #0
   18744:	beq	188d8 <__generate_code@@Base+0x1964>
   18748:	ldr	r3, [r4, #60]	; 0x3c
   1874c:	cmp	r0, #16777216	; 0x1000000
   18750:	ldr	r8, [r3]
   18754:	bne	188a0 <__generate_code@@Base+0x192c>
   18758:	ldr	r6, [pc, #412]	; 188fc <__generate_code@@Base+0x1988>
   1875c:	mov	r5, #0
   18760:	add	r6, pc, r6
   18764:	add	r6, r6, #4
   18768:	b	187ac <__generate_code@@Base+0x1838>
   1876c:	mov	r2, r6
   18770:	mov	r3, r5
   18774:	mov	r1, r4
   18778:	mov	r0, sl
   1877c:	bl	18320 <__generate_code@@Base+0x13ac>
   18780:	subs	r6, r0, #0
   18784:	beq	188a4 <__generate_code@@Base+0x1930>
   18788:	bl	182b4 <__generate_code@@Base+0x1340>
   1878c:	ldr	r3, [r4, #56]	; 0x38
   18790:	add	r5, r5, #1
   18794:	cmp	r3, r5
   18798:	beq	188d8 <__generate_code@@Base+0x1964>
   1879c:	ldr	r3, [r4, #60]	; 0x3c
   187a0:	cmp	r0, #16777216	; 0x1000000
   187a4:	ldr	r8, [r3, r5, lsl #2]
   187a8:	bne	188a4 <__generate_code@@Base+0x1930>
   187ac:	bl	182b4 <__generate_code@@Base+0x1340>
   187b0:	cmp	r0, #0
   187b4:	beq	18788 <__generate_code@@Base+0x1814>
   187b8:	cmp	r0, #3
   187bc:	bne	188a4 <__generate_code@@Base+0x1930>
   187c0:	cmp	r8, #0
   187c4:	beq	1876c <__generate_code@@Base+0x17f8>
   187c8:	ldr	r3, [r8]
   187cc:	cmp	r4, r3
   187d0:	bne	1876c <__generate_code@@Base+0x17f8>
   187d4:	bl	182b4 <__generate_code@@Base+0x1340>
   187d8:	ldr	r3, [r8, #4]
   187dc:	cmp	r0, r3
   187e0:	bne	188a4 <__generate_code@@Base+0x1930>
   187e4:	bl	182b4 <__generate_code@@Base+0x1340>
   187e8:	ldr	r3, [r8, #8]
   187ec:	cmp	r0, r3
   187f0:	bne	188a4 <__generate_code@@Base+0x1930>
   187f4:	bl	182b4 <__generate_code@@Base+0x1340>
   187f8:	ldr	r3, [r8, #12]
   187fc:	cmp	r0, r3
   18800:	bne	188a4 <__generate_code@@Base+0x1930>
   18804:	ldr	r7, [pc, #244]	; 18900 <__generate_code@@Base+0x198c>
   18808:	ldr	fp, [sp, #12]
   1880c:	add	r8, r8, #16
   18810:	ldr	r9, [fp, #4]!
   18814:	cmp	r9, #0
   18818:	beq	18850 <__generate_code@@Base+0x18dc>
   1881c:	bl	182b4 <__generate_code@@Base+0x1340>
   18820:	str	r0, [sp]
   18824:	bl	182b4 <__generate_code@@Base+0x1340>
   18828:	ldr	r3, [sp]
   1882c:	cmp	r3, r7
   18830:	bne	188a4 <__generate_code@@Base+0x1930>
   18834:	ldr	r3, [r8]
   18838:	mov	r1, r3
   1883c:	cmp	r0, r3, lsl #1
   18840:	bne	188a4 <__generate_code@@Base+0x1930>
   18844:	ldr	r0, [r8, #4]
   18848:	blx	r9
   1884c:	add	r8, r8, #8
   18850:	ldr	r3, [pc, #172]	; 18904 <__generate_code@@Base+0x1990>
   18854:	add	r7, r7, #131072	; 0x20000
   18858:	cmp	r7, r3
   1885c:	bne	18810 <__generate_code@@Base+0x189c>
   18860:	bl	17100 <__generate_code@@Base+0x18c>
   18864:	cmp	r0, #0
   18868:	beq	18788 <__generate_code@@Base+0x1814>
   1886c:	mov	r8, r0
   18870:	cmp	r8, #0
   18874:	blt	188e4 <__generate_code@@Base+0x1970>
   18878:	ldr	r2, [pc, #136]	; 18908 <__generate_code@@Base+0x1994>
   1887c:	add	r2, pc, r2
   18880:	ldr	r0, [pc, #132]	; 1890c <__generate_code@@Base+0x1998>
   18884:	mov	r1, sl
   18888:	add	r0, pc, r0
   1888c:	bl	172d0 <__generate_code@@Base+0x35c>
   18890:	mvn	r0, #0
   18894:	add	sp, sp, #6080	; 0x17c0
   18898:	add	sp, sp, #28
   1889c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188a0:	mov	r5, #0
   188a4:	ldr	r2, [pc, #100]	; 18910 <__generate_code@@Base+0x199c>
   188a8:	ldr	r0, [pc, #100]	; 18914 <__generate_code@@Base+0x19a0>
   188ac:	mov	r3, r5
   188b0:	mov	r1, sl
   188b4:	add	r2, pc, r2
   188b8:	add	r0, pc, r0
   188bc:	bl	172d0 <__generate_code@@Base+0x35c>
   188c0:	mvn	r0, #0
   188c4:	add	sp, sp, #6080	; 0x17c0
   188c8:	add	sp, sp, #28
   188cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188d0:	mvn	r0, #0
   188d4:	b	18668 <__generate_code@@Base+0x16f4>
   188d8:	cmp	r0, #0
   188dc:	beq	18664 <__generate_code@@Base+0x16f0>
   188e0:	b	188a4 <__generate_code@@Base+0x1930>
   188e4:	ldr	r2, [pc, #44]	; 18918 <__generate_code@@Base+0x19a4>
   188e8:	add	r2, pc, r2
   188ec:	b	18880 <__generate_code@@Base+0x190c>
   188f0:	andeq	r3, r1, r0, lsl r0
   188f4:	andeq	r1, r0, r8, asr #15
   188f8:	ldrdeq	r1, [r0], -r0
   188fc:	andeq	r2, r1, r0, lsr pc
   18900:			; <UNDEFINED> instruction: 0x01a10000
   18904:			; <UNDEFINED> instruction: 0x01b50000
   18908:	strdeq	r1, [r0], -r0
   1890c:	andeq	r1, r0, r0, lsr #4
   18910:	andeq	r1, r0, r0, asr #3
   18914:	andeq	r1, r0, r8, asr #3
   18918:	andeq	r1, r0, r8, ror r1
   1891c:	ldr	r3, [pc, #68]	; 18968 <__generate_code@@Base+0x19f4>
   18920:	ldr	r2, [pc, #68]	; 1896c <__generate_code@@Base+0x19f8>
   18924:	add	r3, pc, r3
   18928:	push	{r4, r5, r6, lr}
   1892c:	mov	r5, r0
   18930:	ldr	r4, [r3, r2]
   18934:	ldr	r0, [r4, #8]
   18938:	cmp	r0, #0
   1893c:	beq	18944 <__generate_code@@Base+0x19d0>
   18940:	bl	1715c <__generate_code@@Base+0x1e8>
   18944:	lsl	r1, r5, #2
   18948:	mov	r2, #0
   1894c:	ldr	r0, [r4]
   18950:	bl	11b04 <fseek@plt>
   18954:	ldr	r0, [r4]
   18958:	bl	119c0 <ftell@plt>
   1895c:	asr	r0, r0, #2
   18960:	str	r0, [r4, #4]
   18964:	pop	{r4, r5, r6, pc}
   18968:	ldrdeq	r1, [r1], -r4
   1896c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18970:	cmp	r2, #0
   18974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18978:	mov	r9, r0
   1897c:	sub	sp, sp, #20
   18980:	mov	r5, r1
   18984:	mov	r4, r3
   18988:	beq	18b40 <__generate_code@@Base+0x1bcc>
   1898c:	cmp	r4, #0
   18990:	bne	18b5c <__generate_code@@Base+0x1be8>
   18994:	mov	r1, r5
   18998:	ldr	r5, [pc, #456]	; 18b68 <__generate_code@@Base+0x1bf4>
   1899c:	mov	r0, #-1560281088	; 0xa3000000
   189a0:	add	r5, pc, r5
   189a4:	bl	181a8 <__generate_code@@Base+0x1234>
   189a8:	ldr	r4, [r5]
   189ac:	cmp	r4, #0
   189b0:	movne	r6, #-1560281088	; 0xa3000000
   189b4:	beq	189e0 <__generate_code@@Base+0x1a6c>
   189b8:	add	r1, r4, #8
   189bc:	mov	r0, r6
   189c0:	bl	181a8 <__generate_code@@Base+0x1234>
   189c4:	ldr	r3, [r5]
   189c8:	mov	r0, r3
   189cc:	ldr	r4, [r3]
   189d0:	bl	119a8 <free@plt>
   189d4:	cmp	r4, #0
   189d8:	str	r4, [r5]
   189dc:	bne	189b8 <__generate_code@@Base+0x1a44>
   189e0:	ldr	r3, [r9, #56]	; 0x38
   189e4:	cmp	r3, #0
   189e8:	beq	18b24 <__generate_code@@Base+0x1bb0>
   189ec:	ldr	r3, [pc, #376]	; 18b6c <__generate_code@@Base+0x1bf8>
   189f0:	ldr	r8, [pc, #376]	; 18b70 <__generate_code@@Base+0x1bfc>
   189f4:	add	r3, pc, r3
   189f8:	str	r3, [sp, #4]
   189fc:	ldr	r3, [pc, #368]	; 18b74 <__generate_code@@Base+0x1c00>
   18a00:	mov	r7, #0
   18a04:	add	r3, pc, r3
   18a08:	str	r3, [sp, #12]
   18a0c:	b	18a48 <__generate_code@@Base+0x1ad4>
   18a10:	ldr	r3, [r9, #60]	; 0x3c
   18a14:	ldr	r4, [r3, r7, lsl #2]
   18a18:	cmp	r4, #0
   18a1c:	beq	18a2c <__generate_code@@Base+0x1ab8>
   18a20:	ldr	r3, [r4]
   18a24:	cmp	r9, r3
   18a28:	beq	18b34 <__generate_code@@Base+0x1bc0>
   18a2c:	mov	r1, #0
   18a30:	mov	r0, #16777216	; 0x1000000
   18a34:	bl	18188 <__generate_code@@Base+0x1214>
   18a38:	ldr	r3, [r9, #56]	; 0x38
   18a3c:	add	r7, r7, #1
   18a40:	cmp	r3, r7
   18a44:	beq	18b24 <__generate_code@@Base+0x1bb0>
   18a48:	ldr	r3, [sp, #4]
   18a4c:	ldr	r4, [r3, #4]
   18a50:	cmp	r4, #0
   18a54:	beq	18a10 <__generate_code@@Base+0x1a9c>
   18a58:	ldr	r3, [r4, #4]
   18a5c:	cmp	r3, r7
   18a60:	moveq	r3, #1
   18a64:	addeq	r4, r4, #8
   18a68:	streq	r3, [sp, #8]
   18a6c:	bne	18a10 <__generate_code@@Base+0x1a9c>
   18a70:	mov	r1, #3
   18a74:	mov	r0, #16777216	; 0x1000000
   18a78:	bl	18188 <__generate_code@@Base+0x1214>
   18a7c:	ldr	r0, [r4, #4]
   18a80:	bl	18150 <__generate_code@@Base+0x11dc>
   18a84:	ldr	r0, [r4, #8]
   18a88:	bl	18150 <__generate_code@@Base+0x11dc>
   18a8c:	ldr	r0, [r4, #12]
   18a90:	bl	18150 <__generate_code@@Base+0x11dc>
   18a94:	ldr	r5, [pc, #220]	; 18b78 <__generate_code@@Base+0x1c04>
   18a98:	add	r4, r4, #16
   18a9c:	add	r6, r9, #12
   18aa0:	ldr	r3, [r6, #4]!
   18aa4:	cmp	r3, #0
   18aa8:	beq	18ae4 <__generate_code@@Base+0x1b70>
   18aac:	ldr	fp, [r4]
   18ab0:	mov	r0, r5
   18ab4:	sub	sl, fp, #1
   18ab8:	lsl	r1, fp, #1
   18abc:	bl	18188 <__generate_code@@Base+0x1214>
   18ac0:	cmp	fp, #0
   18ac4:	ldr	fp, [r4, #4]
   18ac8:	beq	18ae0 <__generate_code@@Base+0x1b6c>
   18acc:	sub	sl, sl, #1
   18ad0:	ldrd	r0, [fp], #8
   18ad4:	bl	18168 <__generate_code@@Base+0x11f4>
   18ad8:	cmn	sl, #1
   18adc:	bne	18acc <__generate_code@@Base+0x1b58>
   18ae0:	add	r4, r4, #8
   18ae4:	add	r5, r5, #131072	; 0x20000
   18ae8:	cmp	r5, r8
   18aec:	bne	18aa0 <__generate_code@@Base+0x1b2c>
   18af0:	ldr	r3, [sp, #8]
   18af4:	cmp	r3, #0
   18af8:	beq	18a38 <__generate_code@@Base+0x1ac4>
   18afc:	ldr	r4, [sp, #12]
   18b00:	mov	r2, #10
   18b04:	mov	r0, r9
   18b08:	ldr	r1, [r4, #4]
   18b0c:	bl	17318 <__generate_code@@Base+0x3a4>
   18b10:	ldr	r3, [r9, #56]	; 0x38
   18b14:	add	r7, r7, #1
   18b18:	cmp	r3, r7
   18b1c:	str	r0, [r4, #4]
   18b20:	bne	18a48 <__generate_code@@Base+0x1ad4>
   18b24:	mov	r0, #0
   18b28:	add	sp, sp, #20
   18b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b30:	b	18150 <__generate_code@@Base+0x11dc>
   18b34:	mov	r3, #0
   18b38:	str	r3, [sp, #8]
   18b3c:	b	18a70 <__generate_code@@Base+0x1afc>
   18b40:	ldr	r1, [pc, #52]	; 18b7c <__generate_code@@Base+0x1c08>
   18b44:	ldr	r0, [pc, #52]	; 18b80 <__generate_code@@Base+0x1c0c>
   18b48:	bl	18188 <__generate_code@@Base+0x1214>
   18b4c:	ldr	r0, [r9, #8]
   18b50:	bl	18150 <__generate_code@@Base+0x11dc>
   18b54:	cmp	r4, #0
   18b58:	beq	18994 <__generate_code@@Base+0x1a20>
   18b5c:	mov	r0, r4
   18b60:	bl	1891c <__generate_code@@Base+0x19a8>
   18b64:	b	18994 <__generate_code@@Base+0x1a20>
   18b68:	strdeq	r2, [r1], -r0
   18b6c:	muleq	r1, ip, ip
   18b70:			; <UNDEFINED> instruction: 0x01b50000
   18b74:	andeq	r2, r1, ip, lsl #25
   18b78:			; <UNDEFINED> instruction: 0x01a10000
   18b7c:	ldrtcc	r3, [r0], -sl, lsr #10
   18b80:	strbvs	r6, [r3, -r1, ror #8]!

00018b84 <__gcov_sort_n_vals@@Base>:
   18b84:	cmp	r1, #2
   18b88:	bxle	lr
   18b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b90:	sub	lr, r1, #3
   18b94:	mov	ip, #0
   18b98:	lsr	lr, lr, #1
   18b9c:	add	r1, r0, #8
   18ba0:	add	lr, r0, lr, lsl #4
   18ba4:	add	lr, lr, #24
   18ba8:	ldrd	r4, [r1, #16]
   18bac:	ldrd	r6, [r1]
   18bb0:	ldrd	r8, [r1, #8]
   18bb4:	mov	r2, ip
   18bb8:	cmp	r6, r4
   18bbc:	sbcs	r3, r7, r5
   18bc0:	mov	fp, ip
   18bc4:	bge	18c0c <__gcov_sort_n_vals@@Base+0x88>
   18bc8:	add	r3, r1, #8
   18bcc:	mov	sl, #0
   18bd0:	b	18be8 <__gcov_sort_n_vals@@Base+0x64>
   18bd4:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   18bd8:	sub	r3, r3, #16
   18bdc:	cmp	r6, r4
   18be0:	sbcs	r6, r7, r5
   18be4:	bge	18c0c <__gcov_sort_n_vals@@Base+0x88>
   18be8:	ldrd	r6, [r3, #-16]
   18bec:	subs	r2, r2, #2
   18bf0:	mov	fp, r2
   18bf4:	strd	r6, [r3]
   18bf8:	ldrd	r6, [r1, sl]
   18bfc:	sub	sl, sl, #16
   18c00:	strd	r6, [r3, #8]
   18c04:	mov	r6, r3
   18c08:	bpl	18bd4 <__gcov_sort_n_vals@@Base+0x50>
   18c0c:	add	fp, fp, #2
   18c10:	mov	r3, r0
   18c14:	add	r1, r1, #16
   18c18:	lsl	fp, fp, #3
   18c1c:	cmp	lr, r1
   18c20:	strd	r8, [r3, fp]!
   18c24:	add	ip, ip, #2
   18c28:	strd	r4, [r3, #8]
   18c2c:	bne	18ba8 <__gcov_sort_n_vals@@Base+0x24>
   18c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c34:	push	{r4, r5, r6, r7, r8, lr}
   18c38:	ldr	r6, [r0]
   18c3c:	ldr	r4, [pc, #76]	; 18c90 <__gcov_sort_n_vals@@Base+0x10c>
   18c40:	smull	r2, r3, r4, r6
   18c44:	asr	r4, r6, #31
   18c48:	rsb	r4, r4, r3, asr #1
   18c4c:	add	r4, r4, r4, lsl #3
   18c50:	subs	r4, r6, r4
   18c54:	bne	18c8c <__gcov_sort_n_vals@@Base+0x108>
   18c58:	cmp	r6, #0
   18c5c:	ldr	r5, [r0, #4]
   18c60:	pople	{r4, r5, r6, r7, r8, pc}
   18c64:	add	r5, r5, #8
   18c68:	mov	r7, #8
   18c6c:	mov	r0, r5
   18c70:	add	r4, r4, #9
   18c74:	mov	r1, r7
   18c78:	bl	18b84 <__gcov_sort_n_vals@@Base>
   18c7c:	cmp	r6, r4
   18c80:	add	r5, r5, #72	; 0x48
   18c84:	bgt	18c6c <__gcov_sort_n_vals@@Base+0xe8>
   18c88:	pop	{r4, r5, r6, r7, r8, pc}
   18c8c:	bl	11b1c <abort@plt>
   18c90:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   18c94:	ldr	r3, [r0, #52]	; 0x34
   18c98:	cmp	r3, #0
   18c9c:	bxeq	lr
   18ca0:	ldr	ip, [r0, #56]	; 0x38
   18ca4:	cmp	ip, #0
   18ca8:	bxeq	lr
   18cac:	push	{r4, r5, r6, lr}
   18cb0:	mov	r5, r0
   18cb4:	mov	r4, #0
   18cb8:	add	r6, r0, #12
   18cbc:	ldr	r1, [r5, #60]	; 0x3c
   18cc0:	mov	r2, r6
   18cc4:	mov	r3, #0
   18cc8:	ldr	r0, [r1, r4, lsl #2]
   18ccc:	add	r0, r0, #16
   18cd0:	ldr	r1, [r2, #4]!
   18cd4:	cmp	r1, #0
   18cd8:	beq	18ce8 <__gcov_sort_n_vals@@Base+0x164>
   18cdc:	cmp	r3, #9
   18ce0:	beq	18d04 <__gcov_sort_n_vals@@Base+0x180>
   18ce4:	add	r0, r0, #8
   18ce8:	add	r3, r3, #1
   18cec:	cmp	r3, #10
   18cf0:	bne	18cd0 <__gcov_sort_n_vals@@Base+0x14c>
   18cf4:	add	r4, r4, #1
   18cf8:	cmp	ip, r4
   18cfc:	bne	18cbc <__gcov_sort_n_vals@@Base+0x138>
   18d00:	pop	{r4, r5, r6, pc}
   18d04:	bl	18c34 <__gcov_sort_n_vals@@Base+0xb0>
   18d08:	ldr	ip, [r5, #56]	; 0x38
   18d0c:	add	r4, r4, #1
   18d10:	cmp	ip, r4
   18d14:	bne	18cbc <__gcov_sort_n_vals@@Base+0x138>
   18d18:	b	18d00 <__gcov_sort_n_vals@@Base+0x17c>
   18d1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18d20:	sub	sp, sp, #6080	; 0x17c0
   18d24:	ldr	ip, [pc, #388]	; 18eb0 <__gcov_sort_n_vals@@Base+0x32c>
   18d28:	sub	sp, sp, #36	; 0x24
   18d2c:	add	ip, pc, ip
   18d30:	add	r5, sp, #2016	; 0x7e0
   18d34:	mov	r4, r0
   18d38:	mov	r7, r1
   18d3c:	mov	r1, #0
   18d40:	str	r1, [ip, #4]
   18d44:	str	r1, [ip]
   18d48:	mov	r8, r2
   18d4c:	mov	r6, r3
   18d50:	str	r1, [r5, #-2000]	; 0xfffff830
   18d54:	str	r1, [r5, #-1996]	; 0xfffff834
   18d58:	bl	18c94 <__gcov_sort_n_vals@@Base+0x110>
   18d5c:	mov	r1, r7
   18d60:	ldr	r0, [r4, #12]
   18d64:	bl	17fcc <__generate_code@@Base+0x1058>
   18d68:	cmn	r0, #1
   18d6c:	beq	18dec <__gcov_sort_n_vals@@Base+0x268>
   18d70:	bl	182b4 <__generate_code@@Base+0x1340>
   18d74:	cmp	r0, #0
   18d78:	beq	18df8 <__gcov_sort_n_vals@@Base+0x274>
   18d7c:	ldr	r3, [pc, #304]	; 18eb4 <__gcov_sort_n_vals@@Base+0x330>
   18d80:	cmp	r0, r3
   18d84:	beq	18e50 <__gcov_sort_n_vals@@Base+0x2cc>
   18d88:	ldr	r0, [pc, #296]	; 18eb8 <__gcov_sort_n_vals@@Base+0x334>
   18d8c:	ldr	r1, [r7]
   18d90:	add	r0, pc, r0
   18d94:	bl	172d0 <__generate_code@@Base+0x35c>
   18d98:	ldr	r5, [pc, #284]	; 18ebc <__gcov_sort_n_vals@@Base+0x338>
   18d9c:	add	r5, pc, r5
   18da0:	ldr	r1, [r5, #4]
   18da4:	cmp	r1, #0
   18da8:	movne	r6, #10
   18dac:	beq	18dcc <__gcov_sort_n_vals@@Base+0x248>
   18db0:	mov	r2, r6
   18db4:	mov	r0, r4
   18db8:	bl	17318 <__generate_code@@Base+0x3a4>
   18dbc:	cmp	r0, #0
   18dc0:	mov	r1, r0
   18dc4:	str	r0, [r5, #4]
   18dc8:	bne	18db0 <__gcov_sort_n_vals@@Base+0x22c>
   18dcc:	bl	180e0 <__generate_code@@Base+0x116c>
   18dd0:	cmp	r0, #0
   18dd4:	beq	18dec <__gcov_sort_n_vals@@Base+0x268>
   18dd8:	blt	18e8c <__gcov_sort_n_vals@@Base+0x308>
   18ddc:	ldr	r0, [pc, #220]	; 18ec0 <__gcov_sort_n_vals@@Base+0x33c>
   18de0:	add	r0, pc, r0
   18de4:	ldr	r1, [r7]
   18de8:	bl	172d0 <__generate_code@@Base+0x35c>
   18dec:	add	sp, sp, #6080	; 0x17c0
   18df0:	add	sp, sp, #36	; 0x24
   18df4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18df8:	add	r9, sp, #24
   18dfc:	bl	17e60 <__generate_code@@Base+0xeec>
   18e00:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18e04:	cmp	r1, #0
   18e08:	beq	18e98 <__gcov_sort_n_vals@@Base+0x314>
   18e0c:	add	r3, sp, #6144	; 0x1800
   18e10:	ldr	r0, [r7]
   18e14:	str	r6, [sp, #4]
   18e18:	ldr	r3, [r3]
   18e1c:	mov	r1, r8
   18e20:	str	r3, [sp]
   18e24:	mov	r2, r4
   18e28:	mov	r3, r9
   18e2c:	bl	17d24 <__generate_code@@Base+0xdb0>
   18e30:	cmn	r0, #1
   18e34:	beq	18d98 <__gcov_sort_n_vals@@Base+0x214>
   18e38:	mov	r1, r9
   18e3c:	ldr	r3, [r5, #-2000]	; 0xfffff830
   18e40:	ldr	r2, [r5, #-1996]	; 0xfffff834
   18e44:	mov	r0, r4
   18e48:	bl	18970 <__generate_code@@Base+0x19fc>
   18e4c:	b	18d98 <__gcov_sort_n_vals@@Base+0x214>
   18e50:	add	r3, sp, #16
   18e54:	ldr	r0, [r7]
   18e58:	str	r3, [sp]
   18e5c:	add	r3, sp, #6144	; 0x1800
   18e60:	add	r1, sp, #20
   18e64:	add	r9, sp, #24
   18e68:	str	r1, [sp, #4]
   18e6c:	str	r6, [sp, #8]
   18e70:	mov	r2, r9
   18e74:	ldr	r3, [r3]
   18e78:	mov	r1, r4
   18e7c:	bl	18604 <__generate_code@@Base+0x1690>
   18e80:	cmn	r0, #1
   18e84:	bne	18dfc <__gcov_sort_n_vals@@Base+0x278>
   18e88:	b	18d98 <__gcov_sort_n_vals@@Base+0x214>
   18e8c:	ldr	r0, [pc, #48]	; 18ec4 <__gcov_sort_n_vals@@Base+0x340>
   18e90:	add	r0, pc, r0
   18e94:	b	18de4 <__gcov_sort_n_vals@@Base+0x260>
   18e98:	ldr	r2, [pc, #40]	; 18ec8 <__gcov_sort_n_vals@@Base+0x344>
   18e9c:	mov	r0, r9
   18ea0:	bl	11aa4 <memset@plt>
   18ea4:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18ea8:	str	r3, [r5, #-2000]	; 0xfffff830
   18eac:	b	18e0c <__gcov_sort_n_vals@@Base+0x288>
   18eb0:	andeq	r2, r1, r4, ror #18
   18eb4:	strbvs	r6, [r3, -r1, ror #8]!
   18eb8:	andeq	r0, r0, r0, ror sp
   18ebc:	strdeq	r2, [r1], -r4
   18ec0:	andeq	r0, r0, r4, lsl #26
   18ec4:	andeq	r0, r0, r4, lsr ip
   18ec8:	andeq	r1, r0, r8, asr #15
   18ecc:	push	{r4, r5, r6, r7, r8, lr}
   18ed0:	sub	sp, sp, #6080	; 0x17c0
   18ed4:	sub	sp, sp, #32
   18ed8:	add	r6, sp, #24
   18edc:	add	r2, sp, #12
   18ee0:	mov	r8, r1
   18ee4:	mov	r1, r6
   18ee8:	mov	r4, r0
   18eec:	bl	17530 <__generate_code@@Base+0x5bc>
   18ef0:	add	r5, sp, #8
   18ef4:	mov	r7, r0
   18ef8:	mov	r0, r5
   18efc:	bl	176b4 <__generate_code@@Base+0x740>
   18f00:	cmp	r4, #0
   18f04:	beq	18f2c <__gcov_sort_n_vals@@Base+0x3a8>
   18f08:	mov	r0, r4
   18f0c:	str	r6, [sp]
   18f10:	mov	r3, r7
   18f14:	mov	r2, r8
   18f18:	mov	r1, r5
   18f1c:	bl	18d1c <__gcov_sort_n_vals@@Base+0x198>
   18f20:	ldr	r4, [r4, #4]
   18f24:	cmp	r4, #0
   18f28:	bne	18f08 <__gcov_sort_n_vals@@Base+0x384>
   18f2c:	ldr	r0, [sp, #8]
   18f30:	bl	119a8 <free@plt>
   18f34:	add	sp, sp, #6080	; 0x17c0
   18f38:	add	sp, sp, #32
   18f3c:	pop	{r4, r5, r6, r7, r8, pc}
   18f40:	ldrb	r1, [r0, #4]
   18f44:	tst	r1, #1
   18f48:	bxne	lr
   18f4c:	push	{r4, lr}
   18f50:	lsr	r1, r1, #1
   18f54:	mov	r4, r0
   18f58:	and	r1, r1, #1
   18f5c:	ldr	r0, [r0]
   18f60:	bl	18ecc <__gcov_sort_n_vals@@Base+0x348>
   18f64:	ldrb	r3, [r4, #4]
   18f68:	orr	r3, r3, #3
   18f6c:	strb	r3, [r4, #4]
   18f70:	pop	{r4, pc}
   18f74:	push	{r4, r5, r6, lr}
   18f78:	ldr	r4, [pc, #76]	; 18fcc <__gcov_sort_n_vals@@Base+0x448>
   18f7c:	ldr	r5, [pc, #76]	; 18fd0 <__gcov_sort_n_vals@@Base+0x44c>
   18f80:	add	r4, pc, r4
   18f84:	mov	r0, r4
   18f88:	bl	18f40 <__gcov_sort_n_vals@@Base+0x3bc>
   18f8c:	ldr	r3, [r4, #8]
   18f90:	add	r5, pc, r5
   18f94:	cmp	r3, #0
   18f98:	ldrne	r2, [r4, #12]
   18f9c:	strne	r2, [r3, #12]
   18fa0:	ldr	r2, [pc, #44]	; 18fd4 <__gcov_sort_n_vals@@Base+0x450>
   18fa4:	add	r2, pc, r2
   18fa8:	ldr	r2, [r2, #12]
   18fac:	cmp	r2, #0
   18fb0:	beq	18fbc <__gcov_sort_n_vals@@Base+0x438>
   18fb4:	str	r3, [r2, #8]
   18fb8:	pop	{r4, r5, r6, pc}
   18fbc:	ldr	r2, [pc, #20]	; 18fd8 <__gcov_sort_n_vals@@Base+0x454>
   18fc0:	ldr	r2, [r5, r2]
   18fc4:	str	r3, [r2, #4]
   18fc8:	pop	{r4, r5, r6, pc}
   18fcc:	andeq	r2, r1, r8, lsl r7
   18fd0:	andeq	r1, r1, r8, rrx
   18fd4:	strdeq	r2, [r1], -r4
   18fd8:	andeq	r0, r0, ip, lsr #1
   18fdc:	ldr	r1, [r0]
   18fe0:	push	{r4, r5, r6, lr}
   18fe4:	cmp	r1, #0
   18fe8:	ldr	r5, [pc, #168]	; 19098 <__gcov_sort_n_vals@@Base+0x514>
   18fec:	add	r5, pc, r5
   18ff0:	popeq	{r4, r5, r6, pc}
   18ff4:	ldr	r3, [r0, #56]	; 0x38
   18ff8:	cmp	r3, #0
   18ffc:	popeq	{r4, r5, r6, pc}
   19000:	mov	r4, r0
   19004:	mov	r2, #0
   19008:	add	r0, r0, #12
   1900c:	bl	17c98 <__generate_code@@Base+0xd24>
   19010:	cmp	r0, #0
   19014:	popeq	{r4, r5, r6, pc}
   19018:	ldr	r6, [pc, #124]	; 1909c <__gcov_sort_n_vals@@Base+0x518>
   1901c:	add	r6, pc, r6
   19020:	ldr	r2, [r6]
   19024:	cmp	r2, #0
   19028:	beq	19040 <__gcov_sort_n_vals@@Base+0x4bc>
   1902c:	ldr	r3, [pc, #108]	; 190a0 <__gcov_sort_n_vals@@Base+0x51c>
   19030:	str	r2, [r4, #4]
   19034:	add	r3, pc, r3
   19038:	str	r4, [r3]
   1903c:	pop	{r4, r5, r6, pc}
   19040:	ldr	r3, [pc, #92]	; 190a4 <__gcov_sort_n_vals@@Base+0x520>
   19044:	ldr	r2, [pc, #92]	; 190a8 <__gcov_sort_n_vals@@Base+0x524>
   19048:	mov	r0, #12
   1904c:	ldr	r5, [r5, r3]
   19050:	add	r2, pc, r2
   19054:	ldr	r1, [r5]
   19058:	bl	17c98 <__generate_code@@Base+0xd24>
   1905c:	cmp	r0, #0
   19060:	beq	19080 <__gcov_sort_n_vals@@Base+0x4fc>
   19064:	ldr	r3, [r5, #4]
   19068:	cmp	r3, #0
   1906c:	str	r3, [r6, #8]
   19070:	strne	r6, [r3, #12]
   19074:	ldr	r3, [pc, #48]	; 190ac <__gcov_sort_n_vals@@Base+0x528>
   19078:	add	r3, pc, r3
   1907c:	str	r3, [r5, #4]
   19080:	ldr	r0, [pc, #40]	; 190b0 <__gcov_sort_n_vals@@Base+0x52c>
   19084:	add	r0, pc, r0
   19088:	bl	1936c <__libc_csu_fini@@Base+0x4>
   1908c:	ldr	r3, [pc, #32]	; 190b4 <__gcov_sort_n_vals@@Base+0x530>
   19090:	ldr	r2, [pc, r3]
   19094:	b	1902c <__gcov_sort_n_vals@@Base+0x4a8>
   19098:	andeq	r1, r1, ip
   1909c:	andeq	r2, r1, ip, ror r6
   190a0:	andeq	r2, r1, r4, ror #12
   190a4:	andeq	r0, r0, ip, lsr #1
   190a8:	ldrdeq	r0, [r0], -r4
   190ac:	andeq	r2, r1, r0, lsr #12
   190b0:			; <UNDEFINED> instruction: 0xfffffee8
   190b4:	andeq	r2, r1, r8, lsl #12
   190b8:	cmp	r3, #0
   190bc:	cmpeq	r2, #0
   190c0:	bne	190e4 <__gcov_sort_n_vals@@Base+0x560>
   190c4:	cmp	r1, #0
   190c8:	movlt	r1, #-2147483648	; 0x80000000
   190cc:	movlt	r0, #0
   190d0:	blt	190e0 <__gcov_sort_n_vals@@Base+0x55c>
   190d4:	cmpeq	r0, #0
   190d8:	mvnne	r1, #-2147483648	; 0x80000000
   190dc:	mvnne	r0, #0
   190e0:	b	1918c <__gcov_sort_n_vals@@Base+0x608>
   190e4:	sub	sp, sp, #8
   190e8:	push	{sp, lr}
   190ec:	cmp	r1, #0
   190f0:	blt	19110 <__gcov_sort_n_vals@@Base+0x58c>
   190f4:	cmp	r3, #0
   190f8:	blt	19144 <__gcov_sort_n_vals@@Base+0x5c0>
   190fc:	bl	191e0 <__gcov_sort_n_vals@@Base+0x65c>
   19100:	ldr	lr, [sp, #4]
   19104:	add	sp, sp, #8
   19108:	pop	{r2, r3}
   1910c:	bx	lr
   19110:	rsbs	r0, r0, #0
   19114:	sbc	r1, r1, r1, lsl #1
   19118:	cmp	r3, #0
   1911c:	blt	19168 <__gcov_sort_n_vals@@Base+0x5e4>
   19120:	bl	191e0 <__gcov_sort_n_vals@@Base+0x65c>
   19124:	ldr	lr, [sp, #4]
   19128:	add	sp, sp, #8
   1912c:	pop	{r2, r3}
   19130:	rsbs	r0, r0, #0
   19134:	sbc	r1, r1, r1, lsl #1
   19138:	rsbs	r2, r2, #0
   1913c:	sbc	r3, r3, r3, lsl #1
   19140:	bx	lr
   19144:	rsbs	r2, r2, #0
   19148:	sbc	r3, r3, r3, lsl #1
   1914c:	bl	191e0 <__gcov_sort_n_vals@@Base+0x65c>
   19150:	ldr	lr, [sp, #4]
   19154:	add	sp, sp, #8
   19158:	pop	{r2, r3}
   1915c:	rsbs	r0, r0, #0
   19160:	sbc	r1, r1, r1, lsl #1
   19164:	bx	lr
   19168:	rsbs	r2, r2, #0
   1916c:	sbc	r3, r3, r3, lsl #1
   19170:	bl	191e0 <__gcov_sort_n_vals@@Base+0x65c>
   19174:	ldr	lr, [sp, #4]
   19178:	add	sp, sp, #8
   1917c:	pop	{r2, r3}
   19180:	rsbs	r2, r2, #0
   19184:	sbc	r3, r3, r3, lsl #1
   19188:	bx	lr
   1918c:	push	{r1, lr}
   19190:	mov	r0, #8
   19194:	bl	11978 <raise@plt>
   19198:	pop	{r1, pc}
   1919c:	ldr	r3, [pc, #48]	; 191d4 <__gcov_sort_n_vals@@Base+0x650>
   191a0:	ldr	r2, [pc, #48]	; 191d8 <__gcov_sort_n_vals@@Base+0x654>
   191a4:	and	r3, r3, r0, lsr #1
   191a8:	sub	r0, r0, r3
   191ac:	and	r3, r0, r2
   191b0:	and	r0, r2, r0, lsr #2
   191b4:	add	r3, r3, r0
   191b8:	ldr	r0, [pc, #28]	; 191dc <__gcov_sort_n_vals@@Base+0x658>
   191bc:	add	r3, r3, r3, lsr #4
   191c0:	and	r0, r0, r3
   191c4:	add	r0, r0, r0, lsl #8
   191c8:	add	r0, r0, r0, lsl #16
   191cc:	lsr	r0, r0, #24
   191d0:	bx	lr
   191d4:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   191d8:	teqcc	r3, #-872415232	; 0xcc000000
   191dc:	svceq	0x000f0f0f
   191e0:	cmp	r1, r3
   191e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   191e8:	cmpeq	r0, r2
   191ec:	mov	r4, r0
   191f0:	mov	r5, r1
   191f4:	ldr	r9, [sp, #28]
   191f8:	movcc	r0, #0
   191fc:	movcc	r1, #0
   19200:	bcc	192f8 <__gcov_sort_n_vals@@Base+0x774>
   19204:	cmp	r3, #0
   19208:	clzeq	ip, r2
   1920c:	clzne	ip, r3
   19210:	addeq	ip, ip, #32
   19214:	cmp	r5, #0
   19218:	clzeq	r1, r4
   1921c:	addeq	r1, r1, #32
   19220:	clzne	r1, r5
   19224:	sub	ip, ip, r1
   19228:	sub	lr, ip, #32
   1922c:	lsl	r7, r3, ip
   19230:	rsb	r8, ip, #32
   19234:	orr	r7, r7, r2, lsl lr
   19238:	orr	r7, r7, r2, lsr r8
   1923c:	lsl	r6, r2, ip
   19240:	cmp	r5, r7
   19244:	cmpeq	r4, r6
   19248:	movcc	r0, #0
   1924c:	movcc	r1, #0
   19250:	bcc	1926c <__gcov_sort_n_vals@@Base+0x6e8>
   19254:	mov	r3, #1
   19258:	subs	r4, r4, r6
   1925c:	lsl	r1, r3, lr
   19260:	lsl	r0, r3, ip
   19264:	orr	r1, r1, r3, lsr r8
   19268:	sbc	r5, r5, r7
   1926c:	cmp	ip, #0
   19270:	beq	192f8 <__gcov_sort_n_vals@@Base+0x774>
   19274:	lsrs	r3, r7, #1
   19278:	rrx	r2, r6
   1927c:	mov	r6, ip
   19280:	b	192a4 <__gcov_sort_n_vals@@Base+0x720>
   19284:	subs	r4, r4, r2
   19288:	sbc	r5, r5, r3
   1928c:	adds	r4, r4, r4
   19290:	adc	r5, r5, r5
   19294:	adds	r4, r4, #1
   19298:	adc	r5, r5, #0
   1929c:	subs	r6, r6, #1
   192a0:	beq	192c0 <__gcov_sort_n_vals@@Base+0x73c>
   192a4:	cmp	r5, r3
   192a8:	cmpeq	r4, r2
   192ac:	bcs	19284 <__gcov_sort_n_vals@@Base+0x700>
   192b0:	adds	r4, r4, r4
   192b4:	adc	r5, r5, r5
   192b8:	subs	r6, r6, #1
   192bc:	bne	192a4 <__gcov_sort_n_vals@@Base+0x720>
   192c0:	lsr	r6, r4, ip
   192c4:	lsr	r7, r5, ip
   192c8:	orr	r6, r6, r5, lsl r8
   192cc:	adds	r2, r0, r4
   192d0:	orr	r6, r6, r5, lsr lr
   192d4:	adc	r3, r1, r5
   192d8:	lsl	r1, r7, ip
   192dc:	orr	r1, r1, r6, lsl lr
   192e0:	lsl	r0, r6, ip
   192e4:	orr	r1, r1, r6, lsr r8
   192e8:	subs	r0, r2, r0
   192ec:	mov	r4, r6
   192f0:	mov	r5, r7
   192f4:	sbc	r1, r3, r1
   192f8:	cmp	r9, #0
   192fc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19300:	strd	r4, [r9]
   19304:	pop	{r4, r5, r6, r7, r8, r9, pc}

00019308 <__libc_csu_init@@Base>:
   19308:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1930c:	mov	r7, r0
   19310:	ldr	r6, [pc, #72]	; 19360 <__libc_csu_init@@Base+0x58>
   19314:	ldr	r5, [pc, #72]	; 19364 <__libc_csu_init@@Base+0x5c>
   19318:	add	r6, pc, r6
   1931c:	add	r5, pc, r5
   19320:	sub	r6, r6, r5
   19324:	mov	r8, r1
   19328:	mov	r9, r2
   1932c:	bl	1194c <fdopen@plt-0x20>
   19330:	asrs	r6, r6, #2
   19334:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19338:	mov	r4, #0
   1933c:	add	r4, r4, #1
   19340:	ldr	r3, [r5], #4
   19344:	mov	r2, r9
   19348:	mov	r1, r8
   1934c:	mov	r0, r7
   19350:	blx	r3
   19354:	cmp	r6, r4
   19358:	bne	1933c <__libc_csu_init@@Base+0x34>
   1935c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19360:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   19364:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00019368 <__libc_csu_fini@@Base>:
   19368:	bx	lr
   1936c:	ldr	r3, [pc, #12]	; 19380 <__libc_csu_fini@@Base+0x18>
   19370:	mov	r1, #0
   19374:	add	r3, pc, r3
   19378:	ldr	r2, [r3]
   1937c:	b	11a80 <__cxa_atexit@plt>
   19380:	andeq	r0, r1, ip, lsr sp
   19384:	mov	r2, r1
   19388:	mov	r1, r0
   1938c:	mov	r0, #3
   19390:	b	11a14 <__fxstat@plt>

Disassembly of section .fini:

00019394 <.fini>:
   19394:	push	{r3, lr}
   19398:	pop	{r3, pc}
