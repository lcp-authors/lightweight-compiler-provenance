
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f58 <.init>:
   11f58:	push	{r3, lr}
   11f5c:	bl	1216c <_start@@Base+0x3c>
   11f60:	pop	{r3, pc}

Disassembly of section .plt:

00011f64 <raise@plt-0x14>:
   11f64:	push	{lr}		; (str lr, [sp, #-4]!)
   11f68:	ldr	lr, [pc, #4]	; 11f74 <raise@plt-0x4>
   11f6c:	add	lr, pc, lr
   11f70:	ldr	pc, [lr, #8]!
   11f74:	andeq	r6, r1, ip, lsl #1

00011f78 <raise@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #90112	; 0x16000
   11f80:	ldr	pc, [ip, #140]!	; 0x8c

00011f84 <strcmp@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #90112	; 0x16000
   11f8c:	ldr	pc, [ip, #132]!	; 0x84

00011f90 <free@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #90112	; 0x16000
   11f98:	ldr	pc, [ip, #124]!	; 0x7c

00011f9c <memcpy@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #90112	; 0x16000
   11fa4:	ldr	pc, [ip, #116]!	; 0x74

00011fa8 <memcmp@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #90112	; 0x16000
   11fb0:	ldr	pc, [ip, #108]!	; 0x6c

00011fb4 <realloc@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #90112	; 0x16000
   11fbc:	ldr	pc, [ip, #100]!	; 0x64

00011fc0 <puts@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #90112	; 0x16000
   11fc8:	ldr	pc, [ip, #92]!	; 0x5c

00011fcc <malloc@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #90112	; 0x16000
   11fd4:	ldr	pc, [ip, #84]!	; 0x54

00011fd8 <__libc_start_main@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #90112	; 0x16000
   11fe0:	ldr	pc, [ip, #76]!	; 0x4c

00011fe4 <__gmon_start__@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #90112	; 0x16000
   11fec:	ldr	pc, [ip, #68]!	; 0x44

00011ff0 <strlen@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #90112	; 0x16000
   11ff8:	ldr	pc, [ip, #60]!	; 0x3c

00011ffc <posix_memalign@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #90112	; 0x16000
   12004:	ldr	pc, [ip, #52]!	; 0x34

00012008 <memset@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #90112	; 0x16000
   12010:	ldr	pc, [ip, #44]!	; 0x2c

00012014 <memchr@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #90112	; 0x16000
   1201c:	ldr	pc, [ip, #36]!	; 0x24

00012020 <abort@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #90112	; 0x16000
   12028:	ldr	pc, [ip, #28]!

0001202c <__assert_fail@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #90112	; 0x16000
   12034:	ldr	pc, [ip, #20]!

Disassembly of section .text:

00012038 <main@@Base>:
   12038:	push	{r4, r5, lr}
   1203c:	sub	sp, sp, #244	; 0xf4
   12040:	add	r0, sp, #8
   12044:	bl	13598 <flatcc_builder_init@@Base>
   12048:	mov	r1, #0
   1204c:	add	r0, sp, #8
   12050:	bl	12580 <create_monster_bottom_up@@Base>
   12054:	cmp	r0, #0
   12058:	movne	r2, #308	; 0x134
   1205c:	ldrne	r3, [pc, #180]	; 12118 <main@@Base+0xe0>
   12060:	bne	12098 <main@@Base+0x60>
   12064:	add	r1, sp, #4
   12068:	add	r0, sp, #8
   1206c:	bl	15b20 <flatcc_builder_finalize_aligned_buffer@@Base>
   12070:	bl	15bac <flatcc_builder_aligned_free@@Base>
   12074:	add	r0, sp, #8
   12078:	bl	13718 <flatcc_builder_reset@@Base>
   1207c:	mov	r1, #1
   12080:	add	r0, sp, #8
   12084:	bl	12580 <create_monster_bottom_up@@Base>
   12088:	cmp	r0, #0
   1208c:	beq	120a4 <main@@Base+0x6c>
   12090:	ldr	r3, [pc, #128]	; 12118 <main@@Base+0xe0>
   12094:	ldr	r2, [pc, #128]	; 1211c <main@@Base+0xe4>
   12098:	ldr	r1, [pc, #128]	; 12120 <main@@Base+0xe8>
   1209c:	ldr	r0, [pc, #128]	; 12124 <main@@Base+0xec>
   120a0:	bl	1202c <__assert_fail@plt>
   120a4:	add	r1, sp, #4
   120a8:	add	r0, sp, #8
   120ac:	bl	15b20 <flatcc_builder_finalize_aligned_buffer@@Base>
   120b0:	mov	r4, r0
   120b4:	bl	12990 <access_monster_buffer@@Base>
   120b8:	mov	r0, r4
   120bc:	bl	15bac <flatcc_builder_aligned_free@@Base>
   120c0:	add	r0, sp, #8
   120c4:	bl	13718 <flatcc_builder_reset@@Base>
   120c8:	add	r0, sp, #8
   120cc:	bl	1281c <create_monster_top_down@@Base>
   120d0:	add	r1, sp, #4
   120d4:	add	r0, sp, #8
   120d8:	bl	15aa4 <flatcc_builder_finalize_buffer@@Base>
   120dc:	mov	r5, r0
   120e0:	bl	12990 <access_monster_buffer@@Base>
   120e4:	subs	r4, r0, #0
   120e8:	ldrne	r3, [pc, #40]	; 12118 <main@@Base+0xe0>
   120ec:	ldrne	r2, [pc, #52]	; 12128 <main@@Base+0xf0>
   120f0:	bne	12098 <main@@Base+0x60>
   120f4:	mov	r0, r5
   120f8:	bl	11f90 <free@plt>
   120fc:	add	r0, sp, #8
   12100:	bl	13724 <flatcc_builder_clear@@Base>
   12104:	ldr	r0, [pc, #32]	; 1212c <main@@Base+0xf4>
   12108:	bl	11fc0 <puts@plt>
   1210c:	mov	r0, r4
   12110:	add	sp, sp, #244	; 0xf4
   12114:	pop	{r4, r5, pc}
   12118:	andeq	r6, r1, r2, lsl r4
   1211c:	andeq	r0, r0, pc, asr #2
   12120:	andeq	r6, r1, sp, lsr r6
   12124:	andeq	r6, r1, r9, lsr #28
   12128:	andeq	r0, r0, r6, asr r1
   1212c:	andeq	r6, r1, r7, lsl #13

00012130 <_start@@Base>:
   12130:	mov	fp, #0
   12134:	mov	lr, #0
   12138:	pop	{r1}		; (ldr r1, [sp], #4)
   1213c:	mov	r2, sp
   12140:	push	{r2}		; (str r2, [sp, #-4]!)
   12144:	push	{r0}		; (str r0, [sp, #-4]!)
   12148:	ldr	ip, [pc, #16]	; 12160 <_start@@Base+0x30>
   1214c:	push	{ip}		; (str ip, [sp, #-4]!)
   12150:	ldr	r0, [pc, #12]	; 12164 <_start@@Base+0x34>
   12154:	ldr	r3, [pc, #12]	; 12168 <_start@@Base+0x38>
   12158:	bl	11fd8 <__libc_start_main@plt>
   1215c:	bl	12020 <abort@plt>
   12160:	andeq	r6, r1, r4, ror r3
   12164:	andeq	r2, r1, r8, lsr r0
   12168:	andeq	r6, r1, r4, lsl r3
   1216c:	ldr	r3, [pc, #20]	; 12188 <_start@@Base+0x58>
   12170:	ldr	r2, [pc, #20]	; 1218c <_start@@Base+0x5c>
   12174:	add	r3, pc, r3
   12178:	ldr	r2, [r3, r2]
   1217c:	cmp	r2, #0
   12180:	bxeq	lr
   12184:	b	11fe4 <__gmon_start__@plt>
   12188:	andeq	r5, r1, r4, lsl #29
   1218c:	andeq	r0, r0, ip, asr #32
   12190:	ldr	r3, [pc, #28]	; 121b4 <_start@@Base+0x84>
   12194:	ldr	r0, [pc, #28]	; 121b8 <_start@@Base+0x88>
   12198:	sub	r3, r3, r0
   1219c:	cmp	r3, #6
   121a0:	bxls	lr
   121a4:	ldr	r3, [pc, #16]	; 121bc <_start@@Base+0x8c>
   121a8:	cmp	r3, #0
   121ac:	bxeq	lr
   121b0:	bx	r3
   121b4:	andeq	r8, r2, fp, asr r0
   121b8:	andeq	r8, r2, r8, asr r0
   121bc:	andeq	r0, r0, r0
   121c0:	ldr	r1, [pc, #36]	; 121ec <_start@@Base+0xbc>
   121c4:	ldr	r0, [pc, #36]	; 121f0 <_start@@Base+0xc0>
   121c8:	sub	r1, r1, r0
   121cc:	asr	r1, r1, #2
   121d0:	add	r1, r1, r1, lsr #31
   121d4:	asrs	r1, r1, #1
   121d8:	bxeq	lr
   121dc:	ldr	r3, [pc, #16]	; 121f4 <_start@@Base+0xc4>
   121e0:	cmp	r3, #0
   121e4:	bxeq	lr
   121e8:	bx	r3
   121ec:	andeq	r8, r2, r8, asr r0
   121f0:	andeq	r8, r2, r8, asr r0
   121f4:	andeq	r0, r0, r0
   121f8:	push	{r4, lr}
   121fc:	ldr	r4, [pc, #24]	; 1221c <_start@@Base+0xec>
   12200:	ldrb	r3, [r4]
   12204:	cmp	r3, #0
   12208:	popne	{r4, pc}
   1220c:	bl	12190 <_start@@Base+0x60>
   12210:	mov	r3, #1
   12214:	strb	r3, [r4]
   12218:	pop	{r4, pc}
   1221c:	andeq	r8, r2, r8, asr r0
   12220:	ldr	r0, [pc, #40]	; 12250 <_start@@Base+0x120>
   12224:	ldr	r3, [r0]
   12228:	cmp	r3, #0
   1222c:	bne	12234 <_start@@Base+0x104>
   12230:	b	121c0 <_start@@Base+0x90>
   12234:	ldr	r3, [pc, #24]	; 12254 <_start@@Base+0x124>
   12238:	cmp	r3, #0
   1223c:	beq	12230 <_start@@Base+0x100>
   12240:	push	{r4, lr}
   12244:	blx	r3
   12248:	pop	{r4, lr}
   1224c:	b	121c0 <_start@@Base+0x90>
   12250:	andeq	r7, r2, r4, lsl pc
   12254:	andeq	r0, r0, r0
   12258:	push	{r4, lr}
   1225c:	subs	r4, r1, #0
   12260:	bne	1226c <_start@@Base+0x13c>
   12264:	mvn	r0, #0
   12268:	pop	{r4, pc}
   1226c:	mov	r1, #3
   12270:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   12274:	cmp	r0, #0
   12278:	beq	12264 <_start@@Base+0x134>
   1227c:	str	r4, [r0]
   12280:	mov	r0, #0
   12284:	pop	{r4, pc}
   12288:	push	{r4, lr}
   1228c:	subs	r4, r1, #0
   12290:	bne	1229c <_start@@Base+0x16c>
   12294:	mvn	r0, #0
   12298:	pop	{r4, pc}
   1229c:	mov	r1, #5
   122a0:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   122a4:	cmp	r0, #0
   122a8:	beq	12294 <_start@@Base+0x164>
   122ac:	str	r4, [r0]
   122b0:	mov	r0, #0
   122b4:	pop	{r4, pc}
   122b8:	push	{r4, lr}
   122bc:	subs	r4, r1, #0
   122c0:	bne	122cc <_start@@Base+0x19c>
   122c4:	mvn	r0, #0
   122c8:	pop	{r4, pc}
   122cc:	mov	r1, #7
   122d0:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   122d4:	cmp	r0, #0
   122d8:	beq	122c4 <_start@@Base+0x194>
   122dc:	str	r4, [r0]
   122e0:	mov	r0, #0
   122e4:	pop	{r4, pc}
   122e8:	subs	r3, r0, #0
   122ec:	bne	12308 <_start@@Base+0x1d8>
   122f0:	push	{r4, lr}
   122f4:	mov	r2, #148	; 0x94
   122f8:	ldr	r3, [pc, #60]	; 1233c <_start@@Base+0x20c>
   122fc:	ldr	r1, [pc, #60]	; 12340 <_start@@Base+0x210>
   12300:	ldr	r0, [pc, #60]	; 12344 <_start@@Base+0x214>
   12304:	bl	1202c <__assert_fail@plt>
   12308:	ldr	r2, [r3]
   1230c:	sub	r2, r3, r2
   12310:	ldrh	r1, [r2]
   12314:	cmp	r1, #5
   12318:	movls	r0, #0
   1231c:	bls	12338 <_start@@Base+0x208>
   12320:	ldrh	r0, [r2, #4]
   12324:	cmp	r0, #0
   12328:	addne	r2, r3, r0
   1232c:	ldrne	r0, [r3, r0]
   12330:	addne	r0, r0, #4
   12334:	addne	r0, r2, r0
   12338:	bx	lr
   1233c:	andeq	r6, r1, r4, lsl #7
   12340:	andeq	r6, r1, r7, lsl r4
   12344:	andeq	r6, r1, r2, ror r4
   12348:	subs	r2, r0, #0
   1234c:	bne	12368 <_start@@Base+0x238>
   12350:	push	{r4, lr}
   12354:	mov	r2, #149	; 0x95
   12358:	ldr	r3, [pc, #48]	; 12390 <_start@@Base+0x260>
   1235c:	ldr	r1, [pc, #48]	; 12394 <_start@@Base+0x264>
   12360:	ldr	r0, [pc, #48]	; 12398 <_start@@Base+0x268>
   12364:	bl	1202c <__assert_fail@plt>
   12368:	ldr	r3, [r2]
   1236c:	sub	r3, r2, r3
   12370:	ldrh	r1, [r3]
   12374:	cmp	r1, #7
   12378:	movls	r0, #0
   1237c:	bls	1238c <_start@@Base+0x25c>
   12380:	ldrh	r0, [r3, #6]
   12384:	cmp	r0, #0
   12388:	ldrshne	r0, [r2, r0]
   1238c:	bx	lr
   12390:	muleq	r1, lr, r3
   12394:	andeq	r6, r1, r7, lsl r4
   12398:	andeq	r6, r1, r2, ror r4
   1239c:	push	{r4, r5, r6, lr}
   123a0:	mov	r6, r1
   123a4:	mov	r1, #2
   123a8:	mov	r4, r0
   123ac:	mov	r5, r2
   123b0:	bl	144a0 <flatcc_builder_start_table@@Base>
   123b4:	subs	r1, r0, #0
   123b8:	bne	12400 <_start@@Base+0x2d0>
   123bc:	cmp	r6, #0
   123c0:	beq	12400 <_start@@Base+0x2d0>
   123c4:	mov	r0, r4
   123c8:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   123cc:	cmp	r0, #0
   123d0:	beq	12400 <_start@@Base+0x2d0>
   123d4:	cmp	r5, #0
   123d8:	str	r6, [r0]
   123dc:	beq	12414 <_start@@Base+0x2e4>
   123e0:	mov	r3, #2
   123e4:	mov	r2, r3
   123e8:	mov	r1, #1
   123ec:	mov	r0, r4
   123f0:	bl	15460 <flatcc_builder_table_add@@Base>
   123f4:	cmp	r0, #0
   123f8:	strhne	r5, [r0]
   123fc:	bne	12414 <_start@@Base+0x2e4>
   12400:	mov	r0, #0
   12404:	pop	{r4, r5, r6, pc}
   12408:	mov	r0, r4
   1240c:	pop	{r4, r5, r6, lr}
   12410:	b	14adc <flatcc_builder_end_table@@Base>
   12414:	mov	r2, #0
   12418:	ldr	r1, [pc, #32]	; 12440 <_start@@Base+0x310>
   1241c:	mov	r0, r4
   12420:	bl	14a5c <flatcc_builder_check_required@@Base>
   12424:	cmp	r0, #0
   12428:	bne	12408 <_start@@Base+0x2d8>
   1242c:	ldr	r3, [pc, #16]	; 12444 <_start@@Base+0x314>
   12430:	mov	r2, #52	; 0x34
   12434:	ldr	r1, [pc, #12]	; 12448 <_start@@Base+0x318>
   12438:	ldr	r0, [pc, #12]	; 1244c <_start@@Base+0x31c>
   1243c:	bl	1202c <__assert_fail@plt>
   12440:	ldrdeq	r6, [r1], -r4
   12444:			; <UNDEFINED> instruction: 0x000163ba
   12448:	muleq	r1, r8, r4
   1244c:	strdeq	r6, [r1], -r4
   12450:	push	{r4, lr}
   12454:	mov	r2, #0
   12458:	ldr	r1, [pc, #44]	; 1248c <_start@@Base+0x35c>
   1245c:	mov	r4, r0
   12460:	bl	14a5c <flatcc_builder_check_required@@Base>
   12464:	cmp	r0, #0
   12468:	bne	12480 <_start@@Base+0x350>
   1246c:	ldr	r3, [pc, #28]	; 12490 <_start@@Base+0x360>
   12470:	mov	r2, #50	; 0x32
   12474:	ldr	r1, [pc, #24]	; 12494 <_start@@Base+0x364>
   12478:	ldr	r0, [pc, #24]	; 12498 <_start@@Base+0x368>
   1247c:	bl	1202c <__assert_fail@plt>
   12480:	mov	r0, r4
   12484:	pop	{r4, lr}
   12488:	b	14adc <flatcc_builder_end_table@@Base>
   1248c:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   12490:	ldrdeq	r6, [r1], -r8
   12494:	muleq	r1, r8, r4
   12498:	muleq	r1, r0, r5
   1249c:	push	{r4, r5, r6, lr}
   124a0:	subs	r4, r1, #0
   124a4:	bne	124b0 <_start@@Base+0x380>
   124a8:	mvn	r0, #0
   124ac:	pop	{r4, r5, r6, pc}
   124b0:	mov	r3, #1
   124b4:	mov	r2, r3
   124b8:	mov	r1, #8
   124bc:	mov	r5, r0
   124c0:	bl	15460 <flatcc_builder_table_add@@Base>
   124c4:	subs	r6, r0, #0
   124c8:	beq	124a8 <_start@@Base+0x378>
   124cc:	mov	r1, #9
   124d0:	mov	r0, r5
   124d4:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   124d8:	cmp	r0, #0
   124dc:	beq	124a8 <_start@@Base+0x378>
   124e0:	mov	r3, #1
   124e4:	strb	r3, [r6]
   124e8:	str	r4, [r0]
   124ec:	mov	r0, #0
   124f0:	pop	{r4, r5, r6, pc}
   124f4:	mov	r3, #2
   124f8:	mov	r2, r3
   124fc:	mov	r1, r3
   12500:	push	{r4, lr}
   12504:	bl	15460 <flatcc_builder_table_add@@Base>
   12508:	cmp	r0, #0
   1250c:	movne	r3, #300	; 0x12c
   12510:	strhne	r3, [r0]
   12514:	movne	r0, #0
   12518:	mvneq	r0, #0
   1251c:	pop	{r4, pc}
   12520:	mov	r3, #1
   12524:	mov	r2, r3
   12528:	push	{r4, lr}
   1252c:	mov	r1, #6
   12530:	bl	15460 <flatcc_builder_table_add@@Base>
   12534:	subs	r3, r0, #0
   12538:	movne	r0, #0
   1253c:	strbne	r0, [r3]
   12540:	mvneq	r0, #0
   12544:	pop	{r4, pc}
   12548:	mov	r3, #0
   1254c:	push	{r4, lr}
   12550:	mov	r2, r3
   12554:	mov	r1, r3
   12558:	mov	r4, r0
   1255c:	bl	13c9c <flatcc_builder_start_buffer@@Base>
   12560:	cmp	r0, #0
   12564:	bne	12578 <_start@@Base+0x448>
   12568:	mov	r0, r4
   1256c:	mov	r1, #10
   12570:	pop	{r4, lr}
   12574:	b	144a0 <flatcc_builder_start_table@@Base>
   12578:	mvn	r0, #0
   1257c:	pop	{r4, pc}

00012580 <create_monster_bottom_up@@Base>:
   12580:	push	{r4, r5, r6, r7, r8, r9, lr}
   12584:	mov	r5, r1
   12588:	sub	sp, sp, #28
   1258c:	ldr	r1, [pc, #628]	; 12808 <create_monster_bottom_up@@Base+0x288>
   12590:	mov	r4, r0
   12594:	bl	15368 <flatcc_builder_create_string_str@@Base>
   12598:	ldr	r1, [pc, #620]	; 1280c <create_monster_bottom_up@@Base+0x28c>
   1259c:	mov	r7, r0
   125a0:	mov	r0, r4
   125a4:	bl	15368 <flatcc_builder_create_string_str@@Base>
   125a8:	mov	r1, r7
   125ac:	mov	r2, #3
   125b0:	mov	r6, r0
   125b4:	mov	r0, r4
   125b8:	bl	1239c <_start@@Base+0x26c>
   125bc:	mov	r2, #5
   125c0:	mov	r1, r6
   125c4:	mov	r8, r0
   125c8:	mov	r0, r4
   125cc:	bl	1239c <_start@@Base+0x26c>
   125d0:	ldr	r1, [pc, #568]	; 12810 <create_monster_bottom_up@@Base+0x290>
   125d4:	mov	r6, r0
   125d8:	mov	r0, r4
   125dc:	bl	15368 <flatcc_builder_create_string_str@@Base>
   125e0:	ldr	r2, [pc, #556]	; 12814 <create_monster_bottom_up@@Base+0x294>
   125e4:	add	r3, sp, #12
   125e8:	ldr	r1, [r2, #4]
   125ec:	mov	r7, r0
   125f0:	ldr	r0, [r2]
   125f4:	ldrh	r2, [r2, #8]
   125f8:	stmia	r3!, {r0, r1}
   125fc:	strh	r2, [r3]
   12600:	mvn	r3, #0
   12604:	str	r3, [sp, #4]
   12608:	mov	r3, #1
   1260c:	str	r3, [sp]
   12610:	mov	r2, #10
   12614:	add	r1, sp, #12
   12618:	mov	r0, r4
   1261c:	bl	14c14 <flatcc_builder_create_vector@@Base>
   12620:	mov	r9, r0
   12624:	mov	r0, r4
   12628:	bl	143dc <flatcc_builder_start_offset_vector@@Base>
   1262c:	cmp	r8, #0
   12630:	beq	12640 <create_monster_bottom_up@@Base+0xc0>
   12634:	mov	r1, r8
   12638:	mov	r0, r4
   1263c:	bl	14010 <flatcc_builder_offset_vector_push@@Base>
   12640:	cmp	r6, #0
   12644:	beq	12654 <create_monster_bottom_up@@Base+0xd4>
   12648:	mov	r1, r6
   1264c:	mov	r0, r4
   12650:	bl	14010 <flatcc_builder_offset_vector_push@@Base>
   12654:	mov	r0, r4
   12658:	bl	14da0 <flatcc_builder_end_offset_vector@@Base>
   1265c:	cmp	r5, #0
   12660:	mov	r8, r0
   12664:	bne	1278c <create_monster_bottom_up@@Base+0x20c>
   12668:	mov	r3, r5
   1266c:	mov	r2, r5
   12670:	mov	r1, r5
   12674:	mov	r0, r4
   12678:	bl	13c9c <flatcc_builder_start_buffer@@Base>
   1267c:	cmp	r0, #0
   12680:	bne	126a4 <create_monster_bottom_up@@Base+0x124>
   12684:	mov	r1, #10
   12688:	mov	r0, r4
   1268c:	bl	144a0 <flatcc_builder_start_table@@Base>
   12690:	cmp	r0, #0
   12694:	beq	126b0 <create_monster_bottom_up@@Base+0x130>
   12698:	mov	r1, #0
   1269c:	mov	r0, r4
   126a0:	bl	13d3c <flatcc_builder_end_buffer@@Base>
   126a4:	mov	r0, #0
   126a8:	add	sp, sp, #28
   126ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   126b0:	mov	r3, #4
   126b4:	mov	r2, #12
   126b8:	mov	r1, r5
   126bc:	mov	r0, r4
   126c0:	bl	15460 <flatcc_builder_table_add@@Base>
   126c4:	cmp	r0, #0
   126c8:	beq	12698 <create_monster_bottom_up@@Base+0x118>
   126cc:	mov	r3, #1065353216	; 0x3f800000
   126d0:	str	r3, [r0]
   126d4:	mov	r3, #1073741824	; 0x40000000
   126d8:	str	r3, [r0, #4]
   126dc:	ldr	r3, [pc, #308]	; 12818 <create_monster_bottom_up@@Base+0x298>
   126e0:	mov	r1, r7
   126e4:	str	r3, [r0, #8]
   126e8:	mov	r0, r4
   126ec:	bl	12258 <_start@@Base+0x128>
   126f0:	cmp	r0, #0
   126f4:	bne	12698 <create_monster_bottom_up@@Base+0x118>
   126f8:	mov	r1, r9
   126fc:	mov	r0, r4
   12700:	bl	12288 <_start@@Base+0x158>
   12704:	cmp	r0, #0
   12708:	bne	12698 <create_monster_bottom_up@@Base+0x118>
   1270c:	mov	r1, r8
   12710:	mov	r0, r4
   12714:	bl	122b8 <_start@@Base+0x188>
   12718:	cmp	r0, #0
   1271c:	bne	12698 <create_monster_bottom_up@@Base+0x118>
   12720:	mov	r1, #9
   12724:	mov	r0, r4
   12728:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   1272c:	cmp	r0, #0
   12730:	beq	12698 <create_monster_bottom_up@@Base+0x118>
   12734:	str	r6, [r0]
   12738:	mov	r0, r4
   1273c:	bl	124f4 <_start@@Base+0x3c4>
   12740:	cmp	r0, #0
   12744:	bne	12698 <create_monster_bottom_up@@Base+0x118>
   12748:	mov	r0, r4
   1274c:	bl	12520 <_start@@Base+0x3f0>
   12750:	cmp	r0, #0
   12754:	bne	12698 <create_monster_bottom_up@@Base+0x118>
   12758:	mov	r3, #1
   1275c:	mov	r2, r3
   12760:	mov	r1, #8
   12764:	mov	r0, r4
   12768:	bl	15460 <flatcc_builder_table_add@@Base>
   1276c:	cmp	r0, #0
   12770:	movne	r3, #1
   12774:	strbne	r3, [r0]
   12778:	beq	12698 <create_monster_bottom_up@@Base+0x118>
   1277c:	mov	r0, r4
   12780:	bl	12450 <_start@@Base+0x320>
   12784:	mov	r1, r0
   12788:	b	1269c <create_monster_bottom_up@@Base+0x11c>
   1278c:	mov	r0, r4
   12790:	bl	12548 <_start@@Base+0x418>
   12794:	mov	r3, #4
   12798:	mov	r2, #12
   1279c:	mov	r1, #0
   127a0:	mov	r0, r4
   127a4:	bl	15460 <flatcc_builder_table_add@@Base>
   127a8:	cmp	r0, #0
   127ac:	movne	r3, #1065353216	; 0x3f800000
   127b0:	strne	r3, [r0]
   127b4:	movne	r3, #1073741824	; 0x40000000
   127b8:	strne	r3, [r0, #4]
   127bc:	ldrne	r3, [pc, #84]	; 12818 <create_monster_bottom_up@@Base+0x298>
   127c0:	strne	r3, [r0, #8]
   127c4:	mov	r0, r4
   127c8:	bl	124f4 <_start@@Base+0x3c4>
   127cc:	mov	r1, r7
   127d0:	mov	r0, r4
   127d4:	bl	12258 <_start@@Base+0x128>
   127d8:	mov	r1, r9
   127dc:	mov	r0, r4
   127e0:	bl	12288 <_start@@Base+0x158>
   127e4:	mov	r0, r4
   127e8:	bl	12520 <_start@@Base+0x3f0>
   127ec:	mov	r1, r8
   127f0:	mov	r0, r4
   127f4:	bl	122b8 <_start@@Base+0x188>
   127f8:	mov	r1, r6
   127fc:	mov	r0, r4
   12800:	bl	1249c <_start@@Base+0x36c>
   12804:	b	1277c <create_monster_bottom_up@@Base+0x1fc>
   12808:	andeq	r6, r1, pc, lsr #12
   1280c:	andeq	r6, r1, r5, lsr r6
   12810:	andeq	r6, r1, r9, lsr r6
   12814:	strdeq	r6, [r1], -r2
   12818:	submi	r0, r0, r0

0001281c <create_monster_top_down@@Base>:
   1281c:	ldr	r2, [pc, #344]	; 1297c <create_monster_top_down@@Base+0x160>
   12820:	push	{r4, r5, lr}
   12824:	mov	r4, r0
   12828:	sub	sp, sp, #28
   1282c:	ldr	r0, [r2]
   12830:	ldr	r1, [r2, #4]
   12834:	add	r3, sp, #12
   12838:	ldrh	r2, [r2, #8]
   1283c:	stmia	r3!, {r0, r1}
   12840:	mov	r0, r4
   12844:	strh	r2, [r3]
   12848:	bl	12548 <_start@@Base+0x418>
   1284c:	mov	r3, #4
   12850:	mov	r2, #12
   12854:	mov	r1, #0
   12858:	mov	r0, r4
   1285c:	bl	15460 <flatcc_builder_table_add@@Base>
   12860:	cmp	r0, #0
   12864:	movne	r3, #1065353216	; 0x3f800000
   12868:	strne	r3, [r0]
   1286c:	movne	r3, #1073741824	; 0x40000000
   12870:	strne	r3, [r0, #4]
   12874:	ldrne	r3, [pc, #260]	; 12980 <create_monster_top_down@@Base+0x164>
   12878:	strne	r3, [r0, #8]
   1287c:	mov	r0, r4
   12880:	bl	124f4 <_start@@Base+0x3c4>
   12884:	ldr	r1, [pc, #248]	; 12984 <create_monster_top_down@@Base+0x168>
   12888:	mov	r0, r4
   1288c:	bl	15368 <flatcc_builder_create_string_str@@Base>
   12890:	mov	r1, r0
   12894:	mov	r0, r4
   12898:	bl	12258 <_start@@Base+0x128>
   1289c:	mvn	r3, #0
   128a0:	str	r3, [sp, #4]
   128a4:	mov	r3, #1
   128a8:	str	r3, [sp]
   128ac:	mov	r2, #10
   128b0:	add	r1, sp, #12
   128b4:	mov	r0, r4
   128b8:	bl	14c14 <flatcc_builder_create_vector@@Base>
   128bc:	mov	r1, r0
   128c0:	mov	r0, r4
   128c4:	bl	12288 <_start@@Base+0x158>
   128c8:	mov	r0, r4
   128cc:	bl	12520 <_start@@Base+0x3f0>
   128d0:	mov	r0, r4
   128d4:	bl	143dc <flatcc_builder_start_offset_vector@@Base>
   128d8:	ldr	r1, [pc, #168]	; 12988 <create_monster_top_down@@Base+0x16c>
   128dc:	mov	r0, r4
   128e0:	bl	15368 <flatcc_builder_create_string_str@@Base>
   128e4:	mov	r2, #3
   128e8:	mov	r1, r0
   128ec:	mov	r0, r4
   128f0:	bl	1239c <_start@@Base+0x26c>
   128f4:	subs	r1, r0, #0
   128f8:	beq	12904 <create_monster_top_down@@Base+0xe8>
   128fc:	mov	r0, r4
   12900:	bl	14010 <flatcc_builder_offset_vector_push@@Base>
   12904:	ldr	r1, [pc, #128]	; 1298c <create_monster_top_down@@Base+0x170>
   12908:	mov	r0, r4
   1290c:	bl	15368 <flatcc_builder_create_string_str@@Base>
   12910:	mov	r2, #5
   12914:	mov	r1, r0
   12918:	mov	r0, r4
   1291c:	bl	1239c <_start@@Base+0x26c>
   12920:	subs	r1, r0, #0
   12924:	bne	12930 <create_monster_top_down@@Base+0x114>
   12928:	ldr	r3, [r1]
   1292c:	udf	#0
   12930:	mov	r0, r4
   12934:	bl	14010 <flatcc_builder_offset_vector_push@@Base>
   12938:	ldr	r5, [r0]
   1293c:	mov	r0, r4
   12940:	bl	14da0 <flatcc_builder_end_offset_vector@@Base>
   12944:	mov	r1, r0
   12948:	mov	r0, r4
   1294c:	bl	122b8 <_start@@Base+0x188>
   12950:	mov	r1, r5
   12954:	mov	r0, r4
   12958:	bl	1249c <_start@@Base+0x36c>
   1295c:	mov	r0, r4
   12960:	bl	12450 <_start@@Base+0x320>
   12964:	mov	r1, r0
   12968:	mov	r0, r4
   1296c:	bl	13d3c <flatcc_builder_end_buffer@@Base>
   12970:	mov	r0, #0
   12974:	add	sp, sp, #28
   12978:	pop	{r4, r5, pc}
   1297c:	strdeq	r6, [r1], -r2
   12980:	submi	r0, r0, r0
   12984:	andeq	r6, r1, r9, lsr r6
   12988:	andeq	r6, r1, pc, lsr #12
   1298c:	andeq	r6, r1, r5, lsr r6

00012990 <access_monster_buffer@@Base>:
   12990:	cmp	r0, #0
   12994:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12998:	beq	129a8 <access_monster_buffer@@Base+0x18>
   1299c:	ldr	r3, [r0]
   129a0:	adds	r4, r0, r3
   129a4:	bne	129bc <access_monster_buffer@@Base+0x2c>
   129a8:	ldr	r3, [pc, #780]	; 12cbc <access_monster_buffer@@Base+0x32c>
   129ac:	mov	r2, #211	; 0xd3
   129b0:	ldr	r1, [pc, #776]	; 12cc0 <access_monster_buffer@@Base+0x330>
   129b4:	ldr	r0, [pc, #776]	; 12cc4 <access_monster_buffer@@Base+0x334>
   129b8:	bl	1202c <__assert_fail@plt>
   129bc:	ldr	r5, [r0, r3]
   129c0:	sub	r5, r4, r5
   129c4:	ldrh	r7, [r5]
   129c8:	cmp	r7, #9
   129cc:	bls	12a38 <access_monster_buffer@@Base+0xa8>
   129d0:	ldrh	r6, [r5, #8]
   129d4:	cmp	r6, #0
   129d8:	ldrshne	r3, [r4, r6]
   129dc:	bne	129e4 <access_monster_buffer@@Base+0x54>
   129e0:	mov	r3, #100	; 0x64
   129e4:	ldrh	r9, [r5, #6]
   129e8:	cmp	r9, #0
   129ec:	moveq	r2, #150	; 0x96
   129f0:	ldrshne	r2, [r4, r9]
   129f4:	cmp	r7, #11
   129f8:	bls	12a48 <access_monster_buffer@@Base+0xb8>
   129fc:	ldrh	r0, [r5, #10]
   12a00:	cmp	r0, #0
   12a04:	beq	12a20 <access_monster_buffer@@Base+0x90>
   12a08:	add	r1, r4, r0
   12a0c:	ldr	r0, [r4, r0]
   12a10:	add	r0, r0, #4
   12a14:	adds	r0, r1, r0
   12a18:	ldrne	r8, [r0, #-4]
   12a1c:	bne	12a24 <access_monster_buffer@@Base+0x94>
   12a20:	mov	r8, r0
   12a24:	cmp	r3, #300	; 0x12c
   12a28:	beq	12a50 <access_monster_buffer@@Base+0xc0>
   12a2c:	ldr	r3, [pc, #648]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12a30:	mov	r2, #219	; 0xdb
   12a34:	b	129b0 <access_monster_buffer@@Base+0x20>
   12a38:	cmp	r7, #7
   12a3c:	bls	12a2c <access_monster_buffer@@Base+0x9c>
   12a40:	mov	r6, #0
   12a44:	b	129e0 <access_monster_buffer@@Base+0x50>
   12a48:	mov	r0, #0
   12a4c:	b	12a20 <access_monster_buffer@@Base+0x90>
   12a50:	cmp	r2, #150	; 0x96
   12a54:	movne	r2, #221	; 0xdd
   12a58:	ldrne	r3, [pc, #604]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12a5c:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12a60:	ldr	r1, [pc, #608]	; 12cc8 <access_monster_buffer@@Base+0x338>
   12a64:	bl	11f84 <strcmp@plt>
   12a68:	cmp	r0, #0
   12a6c:	movne	r2, #222	; 0xde
   12a70:	ldrne	r3, [pc, #580]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12a74:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12a78:	cmp	r8, #3
   12a7c:	movne	r2, #223	; 0xdf
   12a80:	ldrne	r3, [pc, #564]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12a84:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12a88:	cmp	r6, #0
   12a8c:	moveq	r2, #227	; 0xe3
   12a90:	ldreq	r3, [pc, #548]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12a94:	beq	129b0 <access_monster_buffer@@Base+0x20>
   12a98:	cmp	r9, #0
   12a9c:	movne	r2, #228	; 0xe4
   12aa0:	ldrne	r3, [pc, #532]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12aa4:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12aa8:	cmp	r7, #5
   12aac:	bls	12ac4 <access_monster_buffer@@Base+0x134>
   12ab0:	ldrh	r3, [r5, #4]
   12ab4:	cmp	r3, #0
   12ab8:	beq	12ac4 <access_monster_buffer@@Base+0x134>
   12abc:	adds	r3, r4, r3
   12ac0:	bne	12ad0 <access_monster_buffer@@Base+0x140>
   12ac4:	ldr	r3, [pc, #496]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12ac8:	mov	r2, #232	; 0xe8
   12acc:	b	129b0 <access_monster_buffer@@Base+0x20>
   12ad0:	vldr	s12, [r3]
   12ad4:	vldr	s15, [pc, #468]	; 12cb0 <access_monster_buffer@@Base+0x320>
   12ad8:	vldr	s13, [r3, #4]
   12adc:	vldr	s14, [r3, #8]
   12ae0:	vcmp.f32	s12, s15
   12ae4:	vmrs	APSR_nzcv, fpscr
   12ae8:	ldrne	r3, [pc, #460]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12aec:	movne	r2, #240	; 0xf0
   12af0:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12af4:	vldr	s15, [pc, #440]	; 12cb4 <access_monster_buffer@@Base+0x324>
   12af8:	vcmp.f32	s13, s15
   12afc:	vmrs	APSR_nzcv, fpscr
   12b00:	ldrne	r3, [pc, #436]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12b04:	movne	r2, #241	; 0xf1
   12b08:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12b0c:	vldr	s15, [pc, #420]	; 12cb8 <access_monster_buffer@@Base+0x328>
   12b10:	vcmp.f32	s14, s15
   12b14:	vmrs	APSR_nzcv, fpscr
   12b18:	ldrne	r3, [pc, #412]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12b1c:	movne	r2, #242	; 0xf2
   12b20:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12b24:	cmp	r7, #15
   12b28:	bls	12c9c <access_monster_buffer@@Base+0x30c>
   12b2c:	ldrh	r2, [r5, #14]
   12b30:	cmp	r2, #0
   12b34:	beq	12c9c <access_monster_buffer@@Base+0x30c>
   12b38:	add	r3, r4, r2
   12b3c:	ldr	r2, [r4, r2]
   12b40:	add	r2, r2, #4
   12b44:	adds	r3, r3, r2
   12b48:	beq	12c9c <access_monster_buffer@@Base+0x30c>
   12b4c:	ldr	r2, [r3, #-4]
   12b50:	cmp	r2, #10
   12b54:	ldrne	r3, [pc, #352]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12b58:	ldrne	r2, [pc, #364]	; 12ccc <access_monster_buffer@@Base+0x33c>
   12b5c:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12b60:	ldrb	r3, [r3, #2]
   12b64:	cmp	r3, #2
   12b68:	ldrne	r3, [pc, #332]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12b6c:	ldrne	r2, [pc, #348]	; 12cd0 <access_monster_buffer@@Base+0x340>
   12b70:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12b74:	cmp	r7, #19
   12b78:	bls	12ba8 <access_monster_buffer@@Base+0x218>
   12b7c:	ldrh	r2, [r5, #18]
   12b80:	cmp	r2, #0
   12b84:	beq	12ba8 <access_monster_buffer@@Base+0x218>
   12b88:	add	r3, r4, r2
   12b8c:	ldr	r2, [r4, r2]
   12b90:	add	r2, r2, #4
   12b94:	adds	r3, r3, r2
   12b98:	beq	12ba8 <access_monster_buffer@@Base+0x218>
   12b9c:	ldr	r2, [r3, #-4]
   12ba0:	cmp	r2, #2
   12ba4:	beq	12bb4 <access_monster_buffer@@Base+0x224>
   12ba8:	ldr	r3, [pc, #268]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12bac:	ldr	r2, [pc, #288]	; 12cd4 <access_monster_buffer@@Base+0x344>
   12bb0:	b	129b0 <access_monster_buffer@@Base+0x20>
   12bb4:	ldr	r6, [r3, #4]
   12bb8:	add	r6, r6, #4
   12bbc:	add	r6, r3, r6
   12bc0:	mov	r0, r6
   12bc4:	bl	122e8 <_start@@Base+0x1b8>
   12bc8:	mov	r8, r0
   12bcc:	mov	r0, r6
   12bd0:	bl	12348 <_start@@Base+0x218>
   12bd4:	cmp	r8, #0
   12bd8:	mov	r6, r0
   12bdc:	beq	12bf4 <access_monster_buffer@@Base+0x264>
   12be0:	ldr	r1, [pc, #240]	; 12cd8 <access_monster_buffer@@Base+0x348>
   12be4:	mov	r0, r8
   12be8:	bl	11f84 <strcmp@plt>
   12bec:	cmp	r0, #0
   12bf0:	beq	12c00 <access_monster_buffer@@Base+0x270>
   12bf4:	ldr	r3, [pc, #192]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12bf8:	ldr	r2, [pc, #220]	; 12cdc <access_monster_buffer@@Base+0x34c>
   12bfc:	b	129b0 <access_monster_buffer@@Base+0x20>
   12c00:	cmp	r6, #5
   12c04:	movne	r2, #276	; 0x114
   12c08:	ldrne	r3, [pc, #172]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12c0c:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12c10:	cmp	r7, #21
   12c14:	bls	12ca8 <access_monster_buffer@@Base+0x318>
   12c18:	ldrh	r3, [r5, #20]
   12c1c:	cmp	r3, #0
   12c20:	beq	12ca8 <access_monster_buffer@@Base+0x318>
   12c24:	ldrb	r3, [r4, r3]
   12c28:	cmp	r3, #1
   12c2c:	bne	12ca8 <access_monster_buffer@@Base+0x318>
   12c30:	cmp	r7, #23
   12c34:	bls	12c50 <access_monster_buffer@@Base+0x2c0>
   12c38:	ldrh	r0, [r5, #22]
   12c3c:	cmp	r0, #0
   12c40:	addne	r3, r4, r0
   12c44:	ldrne	r4, [r4, r0]
   12c48:	addne	r4, r3, r4
   12c4c:	bne	12c54 <access_monster_buffer@@Base+0x2c4>
   12c50:	mov	r4, r0
   12c54:	mov	r0, r4
   12c58:	bl	122e8 <_start@@Base+0x1b8>
   12c5c:	mov	r5, r0
   12c60:	mov	r0, r4
   12c64:	bl	12348 <_start@@Base+0x218>
   12c68:	ldr	r1, [pc, #104]	; 12cd8 <access_monster_buffer@@Base+0x348>
   12c6c:	mov	r4, r0
   12c70:	mov	r0, r5
   12c74:	bl	11f84 <strcmp@plt>
   12c78:	cmp	r0, #0
   12c7c:	ldrne	r3, [pc, #56]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12c80:	ldrne	r2, [pc, #88]	; 12ce0 <access_monster_buffer@@Base+0x350>
   12c84:	bne	129b0 <access_monster_buffer@@Base+0x20>
   12c88:	cmp	r4, #5
   12c8c:	beq	12ca8 <access_monster_buffer@@Base+0x318>
   12c90:	ldr	r3, [pc, #36]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12c94:	ldr	r2, [pc, #72]	; 12ce4 <access_monster_buffer@@Base+0x354>
   12c98:	b	129b0 <access_monster_buffer@@Base+0x20>
   12c9c:	ldr	r3, [pc, #24]	; 12cbc <access_monster_buffer@@Base+0x32c>
   12ca0:	ldr	r2, [pc, #64]	; 12ce8 <access_monster_buffer@@Base+0x358>
   12ca4:	b	129b0 <access_monster_buffer@@Base+0x20>
   12ca8:	mov	r0, #0
   12cac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12cb0:	svccc	0x00800000
   12cb4:	andmi	r0, r0, r0
   12cb8:	submi	r0, r0, r0
   12cbc:	strdeq	r6, [r1], -ip
   12cc0:	andeq	r6, r1, sp, lsr r6
   12cc4:	andeq	r6, r1, r9, lsr #28
   12cc8:	andeq	r6, r1, r9, lsr r6
   12ccc:	andeq	r0, r0, r7, lsl #2
   12cd0:	andeq	r0, r0, fp, lsl #2
   12cd4:	andeq	r0, r0, pc, lsl #2
   12cd8:	andeq	r6, r1, r5, lsr r6
   12cdc:	andeq	r0, r0, r3, lsl r1
   12ce0:	andeq	r0, r0, lr, lsl r1
   12ce4:	andeq	r0, r0, pc, lsl r1
   12ce8:	andeq	r0, r0, r5, lsl #2
   12cec:	ldr	ip, [r0, #28]
   12cf0:	ldr	r3, [r0, #64]	; 0x40
   12cf4:	ldr	r2, [r0, #60]	; 0x3c
   12cf8:	sub	r3, r3, ip
   12cfc:	cmp	r3, r1
   12d00:	strls	r3, [r0, #24]
   12d04:	strhi	r1, [r0, #24]
   12d08:	ldr	r3, [r0, #32]
   12d0c:	add	r2, r2, ip
   12d10:	str	r2, [r0, #16]
   12d14:	str	r1, [r3, #4]
   12d18:	bx	lr
   12d1c:	push	{r0, r1, r4, r5, r6, lr}
   12d20:	mov	r6, r2
   12d24:	ldr	r2, [r0, #28]
   12d28:	mov	r3, #1
   12d2c:	str	r3, [sp]
   12d30:	add	r2, r1, r2
   12d34:	ldr	r5, [r0, #48]	; 0x30
   12d38:	add	r1, r0, #60	; 0x3c
   12d3c:	mov	r4, r0
   12d40:	ldr	r0, [r0, #40]	; 0x28
   12d44:	blx	r5
   12d48:	subs	r5, r0, #0
   12d4c:	mvnne	r5, #0
   12d50:	bne	12d60 <access_monster_buffer@@Base+0x3d0>
   12d54:	mov	r1, r6
   12d58:	mov	r0, r4
   12d5c:	bl	12cec <access_monster_buffer@@Base+0x35c>
   12d60:	mov	r0, r5
   12d64:	add	sp, sp, #8
   12d68:	pop	{r4, r5, r6, pc}
   12d6c:	push	{r4, r5, r6, lr}
   12d70:	mov	r4, r0
   12d74:	ldr	r5, [r0, #20]
   12d78:	ldr	r3, [r0, #24]
   12d7c:	add	r1, r5, r1
   12d80:	cmp	r1, r3
   12d84:	str	r1, [r0, #20]
   12d88:	bcs	12d98 <access_monster_buffer@@Base+0x408>
   12d8c:	ldr	r0, [r4, #16]
   12d90:	add	r0, r0, r5
   12d94:	pop	{r4, r5, r6, pc}
   12d98:	mvn	r2, #3
   12d9c:	add	r1, r1, #1
   12da0:	bl	12d1c <access_monster_buffer@@Base+0x38c>
   12da4:	cmp	r0, #0
   12da8:	beq	12d8c <access_monster_buffer@@Base+0x3fc>
   12dac:	mov	r0, #0
   12db0:	pop	{r4, r5, r6, pc}
   12db4:	push	{r4, lr}
   12db8:	mov	r4, r0
   12dbc:	ldr	r2, [r0, #20]
   12dc0:	mov	r1, #0
   12dc4:	ldr	r0, [r0, #16]
   12dc8:	bl	12008 <memset@plt>
   12dcc:	ldr	r3, [r4, #32]
   12dd0:	mov	r0, r4
   12dd4:	ldr	r2, [r3, #8]
   12dd8:	ldr	r1, [r3, #4]
   12ddc:	str	r2, [r4, #20]
   12de0:	ldr	r2, [r3]
   12de4:	str	r2, [r4, #28]
   12de8:	bl	12cec <access_monster_buffer@@Base+0x35c>
   12dec:	ldrh	r3, [r4, #130]	; 0x82
   12df0:	ldrh	r2, [r4, #128]	; 0x80
   12df4:	cmp	r2, r3
   12df8:	strhcc	r3, [r4, #128]	; 0x80
   12dfc:	ldr	r3, [r4, #32]
   12e00:	sub	r3, r3, #36	; 0x24
   12e04:	ldrh	r2, [r3, #48]	; 0x30
   12e08:	str	r3, [r4, #32]
   12e0c:	ldr	r3, [r4, #156]	; 0x9c
   12e10:	strh	r2, [r4, #130]	; 0x82
   12e14:	sub	r3, r3, #1
   12e18:	str	r3, [r4, #156]	; 0x9c
   12e1c:	pop	{r4, pc}
   12e20:	ldr	r3, [r0, #20]
   12e24:	mov	r2, r1
   12e28:	sub	r3, r3, r1
   12e2c:	str	r3, [r0, #20]
   12e30:	ldr	r0, [r0, #16]
   12e34:	mov	r1, #0
   12e38:	add	r0, r0, r3
   12e3c:	b	12008 <memset@plt>
   12e40:	push	{r4, r5, r6, lr}
   12e44:	mov	r6, r1
   12e48:	mov	r1, r2
   12e4c:	mov	r4, r2
   12e50:	bl	12d6c <access_monster_buffer@@Base+0x3dc>
   12e54:	subs	r5, r0, #0
   12e58:	beq	12e68 <access_monster_buffer@@Base+0x4d8>
   12e5c:	mov	r2, r4
   12e60:	mov	r1, r6
   12e64:	bl	11f9c <memcpy@plt>
   12e68:	mov	r0, r5
   12e6c:	pop	{r4, r5, r6, pc}
   12e70:	push	{r0, r1, r4, lr}
   12e74:	add	r3, sp, #8
   12e78:	cmp	r0, #4
   12e7c:	mov	r4, #0
   12e80:	mov	r2, r1
   12e84:	str	r4, [r3, #-4]!
   12e88:	movcs	r1, r0
   12e8c:	movcc	r1, #4
   12e90:	mov	r0, r3
   12e94:	bl	11ffc <posix_memalign@plt>
   12e98:	cmp	r0, r4
   12e9c:	beq	12eb4 <access_monster_buffer@@Base+0x524>
   12ea0:	ldr	r0, [sp, #4]
   12ea4:	cmp	r0, r4
   12ea8:	beq	12eb4 <access_monster_buffer@@Base+0x524>
   12eac:	bl	11f90 <free@plt>
   12eb0:	str	r4, [sp, #4]
   12eb4:	ldr	r0, [sp, #4]
   12eb8:	add	sp, sp, #8
   12ebc:	pop	{r4, pc}

00012ec0 <flatcc_builder_default_alloc@@Base>:
   12ec0:	push	{r4, r5, r6, r7, r8, lr}
   12ec4:	subs	r6, r2, #0
   12ec8:	mov	r5, r1
   12ecc:	bne	12ef0 <flatcc_builder_default_alloc@@Base+0x30>
   12ed0:	ldr	r0, [r1]
   12ed4:	cmp	r0, #0
   12ed8:	popeq	{r4, r5, r6, r7, r8, pc}
   12edc:	bl	11f90 <free@plt>
   12ee0:	str	r6, [r5]
   12ee4:	str	r6, [r5, #4]
   12ee8:	mov	r0, #0
   12eec:	pop	{r4, r5, r6, r7, r8, pc}
   12ef0:	ldr	r2, [sp, #24]
   12ef4:	mov	r7, r3
   12ef8:	sub	r2, r2, #1
   12efc:	cmp	r2, #6
   12f00:	ldrls	pc, [pc, r2, lsl #2]
   12f04:	b	12f98 <flatcc_builder_default_alloc@@Base+0xd8>
   12f08:	andeq	r2, r1, r0, lsr #31
   12f0c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12f10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12f14:	andeq	r2, r1, r8, lsl #31
   12f18:	andeq	r2, r1, r4, lsr #30
   12f1c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12f20:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f24:	mov	r4, r6
   12f28:	cmp	r6, r4
   12f2c:	bhi	12fa8 <flatcc_builder_default_alloc@@Base+0xe8>
   12f30:	ldr	r2, [r5, #4]
   12f34:	cmp	r6, r2
   12f38:	bhi	12f44 <flatcc_builder_default_alloc@@Base+0x84>
   12f3c:	cmp	r4, r2, lsr #1
   12f40:	bls	12ee8 <flatcc_builder_default_alloc@@Base+0x28>
   12f44:	mov	r1, r4
   12f48:	ldr	r0, [r5]
   12f4c:	bl	11fb4 <realloc@plt>
   12f50:	subs	r6, r0, #0
   12f54:	beq	12fb0 <flatcc_builder_default_alloc@@Base+0xf0>
   12f58:	cmp	r7, #0
   12f5c:	beq	12f7c <flatcc_builder_default_alloc@@Base+0xbc>
   12f60:	ldr	r0, [r5, #4]
   12f64:	cmp	r4, r0
   12f68:	bls	12f7c <flatcc_builder_default_alloc@@Base+0xbc>
   12f6c:	sub	r2, r4, r0
   12f70:	mov	r1, #0
   12f74:	add	r0, r6, r0
   12f78:	bl	12008 <memset@plt>
   12f7c:	str	r6, [r5]
   12f80:	str	r4, [r5, #4]
   12f84:	b	12ee8 <flatcc_builder_default_alloc@@Base+0x28>
   12f88:	mov	r4, #288	; 0x120
   12f8c:	b	12f28 <flatcc_builder_default_alloc@@Base+0x68>
   12f90:	mov	r4, #64	; 0x40
   12f94:	b	12f28 <flatcc_builder_default_alloc@@Base+0x68>
   12f98:	mov	r4, #32
   12f9c:	b	12f28 <flatcc_builder_default_alloc@@Base+0x68>
   12fa0:	mov	r4, #256	; 0x100
   12fa4:	b	12f28 <flatcc_builder_default_alloc@@Base+0x68>
   12fa8:	lsl	r4, r4, #1
   12fac:	b	12f28 <flatcc_builder_default_alloc@@Base+0x68>
   12fb0:	mvn	r0, #0
   12fb4:	pop	{r4, r5, r6, r7, r8, pc}
   12fb8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12fbc:	add	r6, r0, #52	; 0x34
   12fc0:	mov	r4, r1
   12fc4:	add	r1, r6, r1, lsl #3
   12fc8:	mov	r5, r2
   12fcc:	add	r2, r2, r3
   12fd0:	ldr	r3, [r1, #4]
   12fd4:	cmp	r2, r3
   12fd8:	bls	1300c <flatcc_builder_default_alloc@@Base+0x14c>
   12fdc:	str	r4, [sp]
   12fe0:	ldr	r3, [sp, #32]
   12fe4:	ldr	r7, [r0, #48]	; 0x30
   12fe8:	ldr	r0, [r0, #40]	; 0x28
   12fec:	blx	r7
   12ff0:	cmp	r0, #0
   12ff4:	beq	1300c <flatcc_builder_default_alloc@@Base+0x14c>
   12ff8:	ldr	r3, [pc, #28]	; 1301c <flatcc_builder_default_alloc@@Base+0x15c>
   12ffc:	mov	r2, #308	; 0x134
   13000:	ldr	r1, [pc, #24]	; 13020 <flatcc_builder_default_alloc@@Base+0x160>
   13004:	ldr	r0, [pc, #24]	; 13024 <flatcc_builder_default_alloc@@Base+0x164>
   13008:	bl	1202c <__assert_fail@plt>
   1300c:	ldr	r0, [r6, r4, lsl #3]
   13010:	add	r0, r0, r5
   13014:	add	sp, sp, #12
   13018:	pop	{r4, r5, r6, r7, pc}
   1301c:			; <UNDEFINED> instruction: 0x000166bd
   13020:			; <UNDEFINED> instruction: 0x00016dbc
   13024:	andeq	r6, r1, r9, lsr #28
   13028:	ldr	r2, [r0, #156]	; 0x9c
   1302c:	ldr	r3, [r0, #160]	; 0xa0
   13030:	push	{r0, r1, r4, r5, r6, lr}
   13034:	mov	r5, r1
   13038:	add	r1, r2, #1
   1303c:	cmp	r1, r3
   13040:	mov	r4, r0
   13044:	str	r1, [r0, #156]	; 0x9c
   13048:	ble	130f8 <flatcc_builder_default_alloc@@Base+0x238>
   1304c:	ldr	r3, [r0, #176]	; 0xb0
   13050:	cmp	r3, #0
   13054:	cmpgt	r1, r3
   13058:	movgt	r3, #1
   1305c:	movle	r3, #0
   13060:	ble	13070 <flatcc_builder_default_alloc@@Base+0x1b0>
   13064:	mvn	r0, #0
   13068:	add	sp, sp, #8
   1306c:	pop	{r4, r5, r6, pc}
   13070:	mov	r6, #36	; 0x24
   13074:	str	r3, [sp]
   13078:	mul	r2, r6, r2
   1307c:	mov	r3, r6
   13080:	mov	r1, #4
   13084:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   13088:	cmp	r0, #0
   1308c:	str	r0, [r4, #32]
   13090:	beq	13064 <flatcc_builder_default_alloc@@Base+0x1a4>
   13094:	mov	r1, r6
   13098:	ldr	r0, [r4, #88]	; 0x58
   1309c:	bl	160f8 <flatcc_emitter_copy_buffer@@Base+0xac>
   130a0:	ldr	r3, [r4, #176]	; 0xb0
   130a4:	cmp	r3, #0
   130a8:	cmpgt	r0, r3
   130ac:	str	r0, [r4, #160]	; 0xa0
   130b0:	strgt	r3, [r4, #160]	; 0xa0
   130b4:	ldrh	r1, [r4, #130]	; 0x82
   130b8:	ldr	r2, [r4, #32]
   130bc:	ldr	r3, [r4, #20]
   130c0:	mvn	r0, #3
   130c4:	strh	r1, [r2, #12]
   130c8:	ldr	r1, [r4, #28]
   130cc:	str	r3, [r2, #8]
   130d0:	add	r3, r3, r1
   130d4:	add	r3, r3, #7
   130d8:	strh	r5, [r4, #130]	; 0x82
   130dc:	bic	r3, r3, #7
   130e0:	str	r0, [r2, #4]
   130e4:	mov	r0, #0
   130e8:	str	r1, [r2]
   130ec:	str	r3, [r4, #28]
   130f0:	str	r0, [r4, #20]
   130f4:	b	13068 <flatcc_builder_default_alloc@@Base+0x1a8>
   130f8:	ldr	r3, [r0, #32]
   130fc:	add	r3, r3, #36	; 0x24
   13100:	str	r3, [r0, #32]
   13104:	b	130b4 <flatcc_builder_default_alloc@@Base+0x1f4>
   13108:	ldr	r3, [r0, #32]
   1310c:	push	{r0, r1, r2, r4, r5, lr}
   13110:	add	r1, r1, #2
   13114:	ldr	r2, [r3, #16]
   13118:	lsl	r5, r1, #1
   1311c:	ldrh	r1, [r3, #28]
   13120:	mov	r3, #1
   13124:	str	r3, [sp]
   13128:	mov	r3, r5
   1312c:	add	r2, r2, r1, lsl #1
   13130:	mov	r1, #0
   13134:	mov	r4, r0
   13138:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   1313c:	cmp	r0, #0
   13140:	streq	r0, [r4, #4]
   13144:	mvneq	r0, #0
   13148:	beq	13184 <flatcc_builder_default_alloc@@Base+0x2c4>
   1314c:	ldr	r2, [r4, #32]
   13150:	add	r0, r0, #4
   13154:	mov	r3, #0
   13158:	str	r0, [r4, #4]
   1315c:	str	r3, [sp]
   13160:	mov	r1, #3
   13164:	sub	r3, r5, #3
   13168:	ldr	r2, [r2, #20]
   1316c:	mov	r0, r4
   13170:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   13174:	cmp	r0, #0
   13178:	str	r0, [r4]
   1317c:	movne	r0, #0
   13180:	mvneq	r0, #0
   13184:	add	sp, sp, #12
   13188:	pop	{r4, r5, pc}
   1318c:	push	{r0, r1, r2, r4, r5, lr}
   13190:	ldr	r3, [r1]
   13194:	ldr	r4, [r0, #140]	; 0x8c
   13198:	add	r2, r3, r4
   1319c:	cmp	r4, r2
   131a0:	str	r2, [r0, #140]	; 0x8c
   131a4:	ble	131bc <flatcc_builder_default_alloc@@Base+0x2fc>
   131a8:	ldr	r3, [pc, #68]	; 131f4 <flatcc_builder_default_alloc@@Base+0x334>
   131ac:	ldr	r2, [pc, #68]	; 131f8 <flatcc_builder_default_alloc@@Base+0x338>
   131b0:	ldr	r1, [pc, #68]	; 131fc <flatcc_builder_default_alloc@@Base+0x33c>
   131b4:	ldr	r0, [pc, #68]	; 13200 <flatcc_builder_default_alloc@@Base+0x340>
   131b8:	bl	1202c <__assert_fail@plt>
   131bc:	str	r3, [sp]
   131c0:	add	r1, r1, #8
   131c4:	ldr	r5, [r0, #44]	; 0x2c
   131c8:	ldr	r2, [r1, #-4]
   131cc:	mov	r3, r4
   131d0:	ldr	r0, [r0, #36]	; 0x24
   131d4:	blx	r5
   131d8:	cmp	r0, #0
   131dc:	ldrne	r3, [pc, #16]	; 131f4 <flatcc_builder_default_alloc@@Base+0x334>
   131e0:	ldrne	r2, [pc, #28]	; 13204 <flatcc_builder_default_alloc@@Base+0x344>
   131e4:	bne	131b0 <flatcc_builder_default_alloc@@Base+0x2f0>
   131e8:	add	r0, r4, #1
   131ec:	add	sp, sp, #12
   131f0:	pop	{r4, r5, pc}
   131f4:	andeq	r6, r1, ip, asr #13
   131f8:	andeq	r0, r0, r1, lsr #5
   131fc:			; <UNDEFINED> instruction: 0x00016dbc
   13200:	andeq	r6, r1, r9, lsr #28
   13204:	andeq	r0, r0, r5, lsr #5
   13208:	cmp	r2, #0
   1320c:	bne	1321c <flatcc_builder_default_alloc@@Base+0x35c>
   13210:	ldrh	r2, [r0, #132]	; 0x84
   13214:	cmp	r2, #0
   13218:	moveq	r2, #1
   1321c:	ldrh	ip, [r1]
   13220:	cmp	ip, #3
   13224:	movls	ip, #4
   13228:	strhls	ip, [r1]
   1322c:	ldrh	ip, [r1]
   13230:	cmp	ip, r2
   13234:	strhcc	r2, [r1]
   13238:	cmp	r3, #0
   1323c:	bne	132a0 <flatcc_builder_default_alloc@@Base+0x3e0>
   13240:	ldr	r3, [r0, #140]	; 0x8c
   13244:	sub	r2, r2, #1
   13248:	ands	r2, r2, r3
   1324c:	beq	132a0 <flatcc_builder_default_alloc@@Base+0x3e0>
   13250:	push	{r4, lr}
   13254:	sub	sp, sp, #72	; 0x48
   13258:	ldr	r4, [pc, #72]	; 132a8 <flatcc_builder_default_alloc@@Base+0x3e8>
   1325c:	mov	r3, #1
   13260:	mov	r1, sp
   13264:	str	r2, [sp]
   13268:	str	r4, [sp, #8]
   1326c:	str	r2, [sp, #12]
   13270:	str	r3, [sp, #4]
   13274:	bl	1318c <flatcc_builder_default_alloc@@Base+0x2cc>
   13278:	cmp	r0, #0
   1327c:	bne	13294 <flatcc_builder_default_alloc@@Base+0x3d4>
   13280:	add	r3, r4, #512	; 0x200
   13284:	ldr	r2, [pc, #32]	; 132ac <flatcc_builder_default_alloc@@Base+0x3ec>
   13288:	ldr	r1, [pc, #32]	; 132b0 <flatcc_builder_default_alloc@@Base+0x3f0>
   1328c:	ldr	r0, [pc, #32]	; 132b4 <flatcc_builder_default_alloc@@Base+0x3f4>
   13290:	bl	1202c <__assert_fail@plt>
   13294:	mov	r0, #0
   13298:	add	sp, sp, #72	; 0x48
   1329c:	pop	{r4, pc}
   132a0:	mov	r0, #0
   132a4:	bx	lr
   132a8:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   132ac:			; <UNDEFINED> instruction: 0x000002be
   132b0:			; <UNDEFINED> instruction: 0x00016dbc
   132b4:	andeq	r6, r1, r9, lsr #28
   132b8:	ldr	r2, [r0, #136]	; 0x88
   132bc:	ldr	r3, [r1]
   132c0:	push	{r0, r1, r4, r5, r6, lr}
   132c4:	sub	r4, r2, r3
   132c8:	cmp	r2, r4
   132cc:	bgt	132e4 <flatcc_builder_default_alloc@@Base+0x424>
   132d0:	ldr	r3, [pc, #76]	; 13324 <flatcc_builder_default_alloc@@Base+0x464>
   132d4:	ldr	r2, [pc, #76]	; 13328 <flatcc_builder_default_alloc@@Base+0x468>
   132d8:	ldr	r1, [pc, #76]	; 1332c <flatcc_builder_default_alloc@@Base+0x46c>
   132dc:	ldr	r0, [pc, #76]	; 13330 <flatcc_builder_default_alloc@@Base+0x470>
   132e0:	bl	1202c <__assert_fail@plt>
   132e4:	str	r3, [sp]
   132e8:	mov	r5, r0
   132ec:	ldr	r6, [r0, #44]	; 0x2c
   132f0:	ldr	r2, [r1, #4]
   132f4:	mov	r3, r4
   132f8:	add	r1, r1, #8
   132fc:	ldr	r0, [r0, #36]	; 0x24
   13300:	blx	r6
   13304:	cmp	r0, #0
   13308:	ldrne	r3, [pc, #20]	; 13324 <flatcc_builder_default_alloc@@Base+0x464>
   1330c:	ldrne	r2, [pc, #32]	; 13334 <flatcc_builder_default_alloc@@Base+0x474>
   13310:	bne	132d8 <flatcc_builder_default_alloc@@Base+0x418>
   13314:	mov	r0, r4
   13318:	str	r4, [r5, #136]	; 0x88
   1331c:	add	sp, sp, #8
   13320:	pop	{r4, r5, r6, pc}
   13324:	andeq	r6, r1, r5, ror #17
   13328:	andeq	r0, r0, r7, lsl #5
   1332c:			; <UNDEFINED> instruction: 0x00016dbc
   13330:	andeq	r6, r1, r9, lsr #28
   13334:	andeq	r0, r0, fp, lsl #5
   13338:	ldr	r3, [r0, #20]
   1333c:	adds	r1, r3, r1
   13340:	movcs	r3, #1
   13344:	movcc	r3, #0
   13348:	cmp	r1, r2
   1334c:	movls	r2, r3
   13350:	orrhi	r2, r3, #1
   13354:	cmp	r2, #0
   13358:	beq	13374 <flatcc_builder_default_alloc@@Base+0x4b4>
   1335c:	push	{r4, lr}
   13360:	mov	r2, #892	; 0x37c
   13364:	ldr	r3, [pc, #20]	; 13380 <flatcc_builder_default_alloc@@Base+0x4c0>
   13368:	ldr	r1, [pc, #20]	; 13384 <flatcc_builder_default_alloc@@Base+0x4c4>
   1336c:	ldr	r0, [pc, #20]	; 13388 <flatcc_builder_default_alloc@@Base+0x4c8>
   13370:	bl	1202c <__assert_fail@plt>
   13374:	str	r1, [r0, #20]
   13378:	mov	r0, r2
   1337c:	bx	lr
   13380:	strdeq	r6, [r1], -r0
   13384:			; <UNDEFINED> instruction: 0x00016dbc
   13388:	andeq	r6, r1, r2, lsl #28
   1338c:	ldrh	ip, [r0, #128]	; 0x80
   13390:	push	{r4, r5, r6, r7, lr}
   13394:	sub	sp, sp, #84	; 0x54
   13398:	cmp	ip, #3
   1339c:	movls	ip, #4
   133a0:	strhls	ip, [r0, #128]	; 0x80
   133a4:	mov	ip, #4
   133a8:	add	r5, sp, ip
   133ac:	str	ip, [sp, #8]
   133b0:	ldr	r4, [r0, #136]	; 0x88
   133b4:	str	ip, [sp, #20]
   133b8:	mov	ip, #1
   133bc:	str	ip, [sp, #12]
   133c0:	lsls	ip, r2, #2
   133c4:	strne	ip, [sp, #28]
   133c8:	and	lr, r4, #3
   133cc:	str	r5, [sp, #16]
   133d0:	addne	r5, ip, #4
   133d4:	movne	ip, #2
   133d8:	strne	r5, [sp, #8]
   133dc:	strne	r1, [sp, #24]
   133e0:	strne	ip, [sp, #12]
   133e4:	cmp	lr, #0
   133e8:	str	r2, [sp, #4]
   133ec:	beq	1341c <flatcc_builder_default_alloc@@Base+0x55c>
   133f0:	ldr	ip, [sp, #8]
   133f4:	add	r5, sp, #80	; 0x50
   133f8:	add	ip, ip, lr
   133fc:	str	ip, [sp, #8]
   13400:	ldr	ip, [sp, #12]
   13404:	ldr	r6, [pc, #204]	; 134d8 <flatcc_builder_default_alloc@@Base+0x618>
   13408:	add	ip, ip, #1
   1340c:	str	ip, [sp, #12]
   13410:	add	r5, r5, ip, lsl #3
   13414:	str	r6, [r5, #-72]	; 0xffffffb8
   13418:	str	lr, [r5, #-68]	; 0xffffffbc
   1341c:	ldr	r5, [sp, #8]
   13420:	sub	r6, r1, #4
   13424:	sub	r5, r4, r5
   13428:	mov	lr, r3
   1342c:	add	r2, r3, r2
   13430:	mvn	r7, #3
   13434:	cmp	r2, lr
   13438:	bne	1344c <flatcc_builder_default_alloc@@Base+0x58c>
   1343c:	add	r1, sp, #8
   13440:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   13444:	add	sp, sp, #84	; 0x54
   13448:	pop	{r4, r5, r6, r7, pc}
   1344c:	ldr	r4, [r6, #4]!
   13450:	cmp	r4, #0
   13454:	beq	13494 <flatcc_builder_default_alloc@@Base+0x5d4>
   13458:	sub	ip, r7, r6
   1345c:	add	ip, r1, ip
   13460:	add	ip, ip, r4
   13464:	sub	ip, ip, r5
   13468:	cmp	r3, #0
   1346c:	str	ip, [r6]
   13470:	beq	134d0 <flatcc_builder_default_alloc@@Base+0x610>
   13474:	ldrb	ip, [lr]
   13478:	cmp	ip, #0
   1347c:	bne	134d0 <flatcc_builder_default_alloc@@Base+0x610>
   13480:	ldr	r3, [pc, #84]	; 134dc <flatcc_builder_default_alloc@@Base+0x61c>
   13484:	ldr	r2, [pc, #84]	; 134e0 <flatcc_builder_default_alloc@@Base+0x620>
   13488:	ldr	r1, [pc, #84]	; 134e4 <flatcc_builder_default_alloc@@Base+0x624>
   1348c:	ldr	r0, [pc, #84]	; 134e8 <flatcc_builder_default_alloc@@Base+0x628>
   13490:	bl	1202c <__assert_fail@plt>
   13494:	cmp	r3, #0
   13498:	beq	134bc <flatcc_builder_default_alloc@@Base+0x5fc>
   1349c:	ldrb	ip, [lr]
   134a0:	cmp	ip, #0
   134a4:	beq	134d0 <flatcc_builder_default_alloc@@Base+0x610>
   134a8:	ldr	r3, [pc, #44]	; 134dc <flatcc_builder_default_alloc@@Base+0x61c>
   134ac:	ldr	r2, [pc, #56]	; 134ec <flatcc_builder_default_alloc@@Base+0x62c>
   134b0:	ldr	r1, [pc, #44]	; 134e4 <flatcc_builder_default_alloc@@Base+0x624>
   134b4:	ldr	r0, [pc, #52]	; 134f0 <flatcc_builder_default_alloc@@Base+0x630>
   134b8:	b	13490 <flatcc_builder_default_alloc@@Base+0x5d0>
   134bc:	ldr	r3, [pc, #24]	; 134dc <flatcc_builder_default_alloc@@Base+0x61c>
   134c0:	ldr	r2, [pc, #44]	; 134f4 <flatcc_builder_default_alloc@@Base+0x634>
   134c4:	ldr	r1, [pc, #24]	; 134e4 <flatcc_builder_default_alloc@@Base+0x624>
   134c8:	ldr	r0, [pc, #40]	; 134f8 <flatcc_builder_default_alloc@@Base+0x638>
   134cc:	b	13490 <flatcc_builder_default_alloc@@Base+0x5d0>
   134d0:	add	lr, lr, #1
   134d4:	b	13434 <flatcc_builder_default_alloc@@Base+0x574>
   134d8:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   134dc:	andeq	r6, r1, r1, lsl #18
   134e0:			; <UNDEFINED> instruction: 0x000005b1
   134e4:			; <UNDEFINED> instruction: 0x00016dbc
   134e8:	andeq	r6, r1, sp, lsl lr
   134ec:			; <UNDEFINED> instruction: 0x000005b5
   134f0:	andeq	r6, r1, fp, lsr #28
   134f4:			; <UNDEFINED> instruction: 0x000005b7
   134f8:	andeq	r6, r1, r9, lsr #28

000134fc <flatcc_builder_flush_vtable_cache@@Base>:
   134fc:	ldr	r3, [r0, #116]	; 0x74
   13500:	cmp	r3, #0
   13504:	bxeq	lr
   13508:	push	{r4, lr}
   1350c:	mov	r1, #0
   13510:	mov	r4, r0
   13514:	ldr	r2, [r0, #96]	; 0x60
   13518:	ldr	r0, [r0, #92]	; 0x5c
   1351c:	bl	12008 <memset@plt>
   13520:	mov	r3, #16
   13524:	str	r3, [r4, #124]	; 0x7c
   13528:	mov	r3, #0
   1352c:	str	r3, [r4, #120]	; 0x78
   13530:	pop	{r4, pc}

00013534 <flatcc_builder_custom_init@@Base>:
   13534:	push	{r4, r5, r6, r7, r8, lr}
   13538:	mov	r6, r1
   1353c:	mov	r7, r2
   13540:	mov	r1, #0
   13544:	mov	r2, #232	; 0xe8
   13548:	mov	r4, r0
   1354c:	mov	r5, r3
   13550:	bl	12008 <memset@plt>
   13554:	cmp	r6, #0
   13558:	moveq	r3, #1
   1355c:	addeq	r7, r4, #188	; 0xbc
   13560:	ldreq	r6, [pc, #40]	; 13590 <flatcc_builder_custom_init@@Base+0x5c>
   13564:	str	r7, [r4, #36]	; 0x24
   13568:	str	r6, [r4, #44]	; 0x2c
   1356c:	mov	r0, #0
   13570:	streq	r3, [r4, #184]	; 0xb8
   13574:	ldr	r3, [pc, #24]	; 13594 <flatcc_builder_custom_init@@Base+0x60>
   13578:	cmp	r5, #0
   1357c:	moveq	r5, r3
   13580:	ldr	r3, [sp, #24]
   13584:	str	r5, [r4, #48]	; 0x30
   13588:	str	r3, [r4, #40]	; 0x28
   1358c:	pop	{r4, r5, r6, r7, r8, pc}
   13590:	andeq	r5, r1, r4, lsl sp
   13594:	andeq	r2, r1, r0, asr #29

00013598 <flatcc_builder_init@@Base>:
   13598:	push	{r4, lr}
   1359c:	mov	r2, #232	; 0xe8
   135a0:	mov	r4, r0
   135a4:	mov	r1, #0
   135a8:	bl	12008 <memset@plt>
   135ac:	mov	r3, #1
   135b0:	str	r3, [r4, #184]	; 0xb8
   135b4:	ldr	r3, [pc, #24]	; 135d4 <flatcc_builder_init@@Base+0x3c>
   135b8:	mov	r0, #0
   135bc:	str	r3, [r4, #48]	; 0x30
   135c0:	add	r3, r4, #188	; 0xbc
   135c4:	str	r3, [r4, #36]	; 0x24
   135c8:	ldr	r3, [pc, #8]	; 135d8 <flatcc_builder_init@@Base+0x40>
   135cc:	str	r3, [r4, #44]	; 0x2c
   135d0:	pop	{r4, pc}
   135d4:	andeq	r2, r1, r0, asr #29
   135d8:	andeq	r5, r1, r4, lsl sp

000135dc <flatcc_builder_custom_reset@@Base>:
   135dc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e0:	mov	r6, #0
   135e4:	mov	r4, r0
   135e8:	mov	r7, r1
   135ec:	mov	r8, r2
   135f0:	mov	r5, r0
   135f4:	mov	r9, #1
   135f8:	mov	sl, r6
   135fc:	ldr	r3, [r5, #52]	; 0x34
   13600:	add	r1, r5, #52	; 0x34
   13604:	cmp	r3, #0
   13608:	beq	136e8 <flatcc_builder_custom_reset@@Base+0x10c>
   1360c:	cmp	r6, #5
   13610:	cmpne	r8, #0
   13614:	bne	136c0 <flatcc_builder_custom_reset@@Base+0xe4>
   13618:	ldr	r2, [r5, #56]	; 0x38
   1361c:	mov	r1, sl
   13620:	ldr	r0, [r5, #52]	; 0x34
   13624:	bl	12008 <memset@plt>
   13628:	add	r6, r6, #1
   1362c:	cmp	r6, #8
   13630:	add	r5, r5, #8
   13634:	bne	135fc <flatcc_builder_custom_reset@@Base+0x20>
   13638:	ldr	r2, [r4, #124]	; 0x7c
   1363c:	mov	r3, #0
   13640:	cmp	r2, r3
   13644:	movne	r2, #16
   13648:	strne	r2, [r4, #124]	; 0x7c
   1364c:	ldr	r2, [r4, #60]	; 0x3c
   13650:	ldr	r0, [r4, #184]	; 0xb8
   13654:	str	r2, [r4, #16]
   13658:	ldr	r2, [r4, #76]	; 0x4c
   1365c:	cmp	r7, #0
   13660:	str	r2, [r4]
   13664:	ldr	r2, [r4, #52]	; 0x34
   13668:	strne	r3, [r4, #172]	; 0xac
   1366c:	strne	r3, [r4, #176]	; 0xb0
   13670:	strne	r3, [r4, #180]	; 0xb4
   13674:	cmp	r0, #0
   13678:	str	r3, [r4, #120]	; 0x78
   1367c:	strh	r3, [r4, #128]	; 0x80
   13680:	str	r3, [r4, #136]	; 0x88
   13684:	str	r3, [r4, #140]	; 0x8c
   13688:	str	r3, [r4, #156]	; 0x9c
   1368c:	str	r3, [r4, #160]	; 0xa0
   13690:	str	r3, [r4, #20]
   13694:	str	r3, [r4, #24]
   13698:	str	r3, [r4, #148]	; 0x94
   1369c:	str	r3, [r4, #152]	; 0x98
   136a0:	str	r2, [r4, #4]
   136a4:	str	r3, [r4, #32]
   136a8:	beq	136b8 <flatcc_builder_custom_reset@@Base+0xdc>
   136ac:	add	r0, r4, #188	; 0xbc
   136b0:	bl	15c0c <flatcc_emitter_reset@@Base>
   136b4:	mov	r0, #0
   136b8:	add	sp, sp, #12
   136bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c0:	str	r6, [sp]
   136c4:	ldr	fp, [r4, #48]	; 0x30
   136c8:	mov	r3, r9
   136cc:	mov	r2, #1
   136d0:	ldr	r0, [r4, #40]	; 0x28
   136d4:	blx	fp
   136d8:	cmp	r0, #0
   136dc:	beq	13618 <flatcc_builder_custom_reset@@Base+0x3c>
   136e0:	mvn	r0, #0
   136e4:	b	136b8 <flatcc_builder_custom_reset@@Base+0xdc>
   136e8:	ldr	r3, [r5, #56]	; 0x38
   136ec:	cmp	r3, #0
   136f0:	beq	13628 <flatcc_builder_custom_reset@@Base+0x4c>
   136f4:	ldr	r3, [pc, #12]	; 13708 <flatcc_builder_custom_reset@@Base+0x12c>
   136f8:	ldr	r2, [pc, #12]	; 1370c <flatcc_builder_custom_reset@@Base+0x130>
   136fc:	ldr	r1, [pc, #12]	; 13710 <flatcc_builder_custom_reset@@Base+0x134>
   13700:	ldr	r0, [pc, #12]	; 13714 <flatcc_builder_custom_reset@@Base+0x138>
   13704:	bl	1202c <__assert_fail@plt>
   13708:	andeq	r6, r1, lr, lsl r9
   1370c:			; <UNDEFINED> instruction: 0x000001b2
   13710:			; <UNDEFINED> instruction: 0x00016dbc
   13714:	andeq	r6, r1, r9, lsr lr

00013718 <flatcc_builder_reset@@Base>:
   13718:	mov	r2, #0
   1371c:	mov	r1, r2
   13720:	b	135dc <flatcc_builder_custom_reset@@Base>

00013724 <flatcc_builder_clear@@Base>:
   13724:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13728:	mov	r5, #0
   1372c:	mov	r4, r0
   13730:	add	r6, r0, #52	; 0x34
   13734:	mov	r8, r5
   13738:	str	r5, [sp]
   1373c:	mov	r1, r6
   13740:	ldr	r7, [r4, #48]	; 0x30
   13744:	mov	r3, r8
   13748:	mov	r2, #0
   1374c:	ldr	r0, [r4, #40]	; 0x28
   13750:	add	r5, r5, #1
   13754:	blx	r7
   13758:	cmp	r5, #8
   1375c:	add	r6, r6, #8
   13760:	bne	13738 <flatcc_builder_clear@@Base+0x14>
   13764:	ldr	r3, [r4, #184]	; 0xb8
   13768:	cmp	r3, #0
   1376c:	beq	13778 <flatcc_builder_clear@@Base+0x54>
   13770:	add	r0, r4, #188	; 0xbc
   13774:	bl	15cbc <flatcc_emitter_clear@@Base>
   13778:	mov	r2, #232	; 0xe8
   1377c:	mov	r1, #0
   13780:	mov	r0, r4
   13784:	add	sp, sp, #8
   13788:	pop	{r4, r5, r6, r7, r8, lr}
   1378c:	b	12008 <memset@plt>

00013790 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13790:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13794:	add	r4, r1, #3
   13798:	bic	r4, r4, #3
   1379c:	add	r4, r4, #4
   137a0:	mov	r7, #0
   137a4:	str	r7, [sp]
   137a8:	mov	r3, r4
   137ac:	ldr	r2, [r0, #228]	; 0xe4
   137b0:	mov	r1, #7
   137b4:	mov	r6, r0
   137b8:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   137bc:	subs	r5, r0, #0
   137c0:	moveq	r0, r5
   137c4:	beq	137f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   137c8:	mov	r2, r4
   137cc:	mov	r1, r7
   137d0:	bl	12008 <memset@plt>
   137d4:	ldr	r3, [r6, #224]	; 0xe0
   137d8:	add	r0, r5, #4
   137dc:	str	r3, [r5]
   137e0:	ldr	r1, [r6, #228]	; 0xe4
   137e4:	add	r3, r1, #4
   137e8:	add	r4, r4, r1
   137ec:	str	r3, [r6, #224]	; 0xe0
   137f0:	str	r4, [r6, #228]	; 0xe4
   137f4:	add	sp, sp, #12
   137f8:	pop	{r4, r5, r6, r7, pc}

000137fc <flatcc_builder_enter_user_frame@@Base>:
   137fc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13800:	add	r4, r1, #3
   13804:	bic	r4, r4, #3
   13808:	add	r4, r4, #4
   1380c:	mov	r7, #0
   13810:	str	r7, [sp]
   13814:	mov	r3, r4
   13818:	ldr	r2, [r0, #228]	; 0xe4
   1381c:	mov	r1, #7
   13820:	mov	r6, r0
   13824:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   13828:	subs	r5, r0, #0
   1382c:	moveq	r0, r5
   13830:	beq	1385c <flatcc_builder_enter_user_frame@@Base+0x60>
   13834:	mov	r2, r4
   13838:	mov	r1, r7
   1383c:	bl	12008 <memset@plt>
   13840:	ldr	r3, [r6, #224]	; 0xe0
   13844:	str	r3, [r5]
   13848:	ldr	r1, [r6, #228]	; 0xe4
   1384c:	add	r0, r1, #4
   13850:	add	r4, r4, r1
   13854:	str	r0, [r6, #224]	; 0xe0
   13858:	str	r4, [r6, #228]	; 0xe4
   1385c:	add	sp, sp, #12
   13860:	pop	{r4, r5, r6, r7, pc}

00013864 <flatcc_builder_exit_user_frame@@Base>:
   13864:	ldr	r3, [r0, #224]	; 0xe0
   13868:	cmp	r3, #0
   1386c:	bne	13888 <flatcc_builder_exit_user_frame@@Base+0x24>
   13870:	push	{r4, lr}
   13874:	ldr	r3, [pc, #44]	; 138a8 <flatcc_builder_exit_user_frame@@Base+0x44>
   13878:	ldr	r2, [pc, #44]	; 138ac <flatcc_builder_exit_user_frame@@Base+0x48>
   1387c:	ldr	r1, [pc, #44]	; 138b0 <flatcc_builder_exit_user_frame@@Base+0x4c>
   13880:	ldr	r0, [pc, #44]	; 138b4 <flatcc_builder_exit_user_frame@@Base+0x50>
   13884:	bl	1202c <__assert_fail@plt>
   13888:	ldr	r1, [r0, #108]	; 0x6c
   1388c:	mov	r2, r0
   13890:	add	r1, r1, r3
   13894:	sub	r3, r3, #4
   13898:	str	r3, [r0, #228]	; 0xe4
   1389c:	ldr	r0, [r1, #-4]
   138a0:	str	r0, [r2, #224]	; 0xe0
   138a4:	bx	lr
   138a8:	andeq	r6, r1, sl, lsr r9
   138ac:	andeq	r0, r0, lr, lsl r2
   138b0:			; <UNDEFINED> instruction: 0x00016dbc
   138b4:	andeq	r6, r1, fp, asr #28

000138b8 <flatcc_builder_exit_user_frame_at@@Base>:
   138b8:	ldr	r2, [r0, #224]	; 0xe0
   138bc:	cmp	r2, r1
   138c0:	bcs	138dc <flatcc_builder_exit_user_frame_at@@Base+0x24>
   138c4:	push	{r4, lr}
   138c8:	ldr	r3, [pc, #20]	; 138e4 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   138cc:	ldr	r2, [pc, #20]	; 138e8 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   138d0:	ldr	r1, [pc, #20]	; 138ec <flatcc_builder_exit_user_frame_at@@Base+0x34>
   138d4:	ldr	r0, [pc, #20]	; 138f0 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   138d8:	bl	1202c <__assert_fail@plt>
   138dc:	str	r1, [r0, #224]	; 0xe0
   138e0:	b	13864 <flatcc_builder_exit_user_frame@@Base>
   138e4:	andeq	r6, r1, r9, asr r9
   138e8:	andeq	r0, r0, r7, lsr #4
   138ec:			; <UNDEFINED> instruction: 0x00016dbc
   138f0:	andeq	r6, r1, r4, ror #28

000138f4 <flatcc_builder_get_current_user_frame@@Base>:
   138f4:	ldr	r0, [r0, #224]	; 0xe0
   138f8:	bx	lr

000138fc <flatcc_builder_get_user_frame_ptr@@Base>:
   138fc:	ldr	r0, [r0, #108]	; 0x6c
   13900:	add	r0, r0, r1
   13904:	bx	lr

00013908 <flatcc_builder_embed_buffer@@Base>:
   13908:	push	{r4, r5, r6, lr}
   1390c:	mov	r4, r3
   13910:	ldr	r3, [r0, #152]	; 0x98
   13914:	sub	sp, sp, #80	; 0x50
   13918:	adds	r3, r3, #0
   1391c:	movne	r3, #1
   13920:	mov	r6, r2
   13924:	mov	r2, r1
   13928:	add	r1, sp, #96	; 0x60
   1392c:	mov	r5, r0
   13930:	bl	13208 <flatcc_builder_default_alloc@@Base+0x348>
   13934:	cmp	r0, #0
   13938:	movne	r0, #0
   1393c:	bne	13a10 <flatcc_builder_embed_buffer@@Base+0x108>
   13940:	ldr	r3, [sp, #100]	; 0x64
   13944:	str	r0, [sp, #8]
   13948:	tst	r3, #2
   1394c:	ldr	r3, [r5, #136]	; 0x88
   13950:	movne	r2, #4
   13954:	moveq	r2, #0
   13958:	sub	r3, r3, r4
   1395c:	sub	r3, r3, r2
   13960:	ldrh	r2, [sp, #96]	; 0x60
   13964:	str	r0, [sp, #12]
   13968:	sub	r2, r2, #1
   1396c:	and	r3, r3, r2
   13970:	add	r2, r4, r3
   13974:	str	r2, [sp, #4]
   13978:	ldr	r2, [r5, #152]	; 0x98
   1397c:	cmp	r2, #0
   13980:	beq	139a0 <flatcc_builder_embed_buffer@@Base+0x98>
   13984:	mov	r2, #4
   13988:	add	r1, sp, r2
   1398c:	str	r2, [sp, #8]
   13990:	str	r2, [sp, #20]
   13994:	mov	r2, #1
   13998:	str	r1, [sp, #16]
   1399c:	str	r2, [sp, #12]
   139a0:	cmp	r4, #0
   139a4:	beq	139d0 <flatcc_builder_embed_buffer@@Base+0xc8>
   139a8:	ldr	r2, [sp, #8]
   139ac:	add	r1, sp, #80	; 0x50
   139b0:	add	r2, r2, r4
   139b4:	str	r2, [sp, #8]
   139b8:	ldr	r2, [sp, #12]
   139bc:	add	r2, r2, #1
   139c0:	str	r2, [sp, #12]
   139c4:	add	r1, r1, r2, lsl #3
   139c8:	str	r6, [r1, #-72]	; 0xffffffb8
   139cc:	str	r4, [r1, #-68]	; 0xffffffbc
   139d0:	cmp	r3, #0
   139d4:	beq	13a04 <flatcc_builder_embed_buffer@@Base+0xfc>
   139d8:	ldr	r2, [sp, #8]
   139dc:	add	r1, sp, #80	; 0x50
   139e0:	add	r2, r2, r3
   139e4:	str	r2, [sp, #8]
   139e8:	ldr	r2, [sp, #12]
   139ec:	ldr	r0, [pc, #36]	; 13a18 <flatcc_builder_embed_buffer@@Base+0x110>
   139f0:	add	r2, r2, #1
   139f4:	str	r2, [sp, #12]
   139f8:	add	r1, r1, r2, lsl #3
   139fc:	str	r0, [r1, #-72]	; 0xffffffb8
   13a00:	str	r3, [r1, #-68]	; 0xffffffbc
   13a04:	add	r1, sp, #8
   13a08:	mov	r0, r5
   13a0c:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   13a10:	add	sp, sp, #80	; 0x50
   13a14:	pop	{r4, r5, r6, pc}
   13a18:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00013a1c <flatcc_builder_create_buffer@@Base>:
   13a1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13a20:	sub	sp, sp, #92	; 0x5c
   13a24:	mov	r7, #0
   13a28:	ldr	r8, [sp, #124]	; 0x7c
   13a2c:	mov	r9, r1
   13a30:	and	r6, r8, #1
   13a34:	mov	r5, r3
   13a38:	add	r1, sp, #120	; 0x78
   13a3c:	mov	r3, r6
   13a40:	mov	r4, r0
   13a44:	str	r7, [sp, #12]
   13a48:	bl	13208 <flatcc_builder_default_alloc@@Base+0x348>
   13a4c:	cmp	r0, r7
   13a50:	bne	13bc4 <flatcc_builder_create_buffer@@Base+0x1a8>
   13a54:	ldrh	r3, [r4, #128]	; 0x80
   13a58:	ldrh	r1, [sp, #120]	; 0x78
   13a5c:	ldr	r2, [r4, #136]	; 0x88
   13a60:	and	r8, r8, #2
   13a64:	cmp	r3, r1
   13a68:	strhcc	r1, [r4, #128]	; 0x80
   13a6c:	cmp	r9, #0
   13a70:	sub	r1, r1, #1
   13a74:	ldrne	r3, [r9]
   13a78:	strne	r3, [sp, #12]
   13a7c:	ldr	r0, [sp, #12]
   13a80:	sub	r3, r2, #4
   13a84:	cmp	r0, #0
   13a88:	movne	r0, #4
   13a8c:	moveq	r0, #0
   13a90:	cmp	r8, #0
   13a94:	moveq	ip, #0
   13a98:	movne	ip, #4
   13a9c:	sub	r3, r3, r0
   13aa0:	sub	r3, r3, ip
   13aa4:	and	r3, r3, r1
   13aa8:	moveq	lr, r6
   13aac:	mov	r1, #0
   13ab0:	orrne	lr, r6, #1
   13ab4:	cmp	lr, r1
   13ab8:	str	r1, [sp, #16]
   13abc:	str	r1, [sp, #20]
   13ac0:	beq	13ae0 <flatcc_builder_create_buffer@@Base+0xc4>
   13ac4:	mov	r1, #4
   13ac8:	str	r1, [sp, #16]
   13acc:	add	ip, sp, #8
   13ad0:	str	r1, [sp, #28]
   13ad4:	mov	r1, #1
   13ad8:	str	ip, [sp, #24]
   13adc:	str	r1, [sp, #20]
   13ae0:	ldr	r7, [sp, #20]
   13ae4:	add	r8, sp, #88	; 0x58
   13ae8:	add	r1, r7, #1
   13aec:	ldr	ip, [sp, #16]
   13af0:	add	r8, r8, r1, lsl #3
   13af4:	add	r9, sp, #4
   13af8:	add	ip, ip, #4
   13afc:	str	r9, [r8, #-72]	; 0xffffffb8
   13b00:	cmp	r0, #0
   13b04:	mov	r9, #4
   13b08:	str	ip, [sp, #16]
   13b0c:	str	r9, [r8, #-68]	; 0xffffffbc
   13b10:	str	r1, [sp, #20]
   13b14:	beq	13b40 <flatcc_builder_create_buffer@@Base+0x124>
   13b18:	add	ip, r0, ip
   13b1c:	add	r1, r7, #2
   13b20:	str	ip, [sp, #16]
   13b24:	add	ip, sp, #88	; 0x58
   13b28:	add	r1, ip, r1, lsl #3
   13b2c:	add	r7, r7, #2
   13b30:	add	ip, sp, #12
   13b34:	str	ip, [r1, #-72]	; 0xffffffb8
   13b38:	str	r0, [r1, #-68]	; 0xffffffbc
   13b3c:	str	r7, [sp, #20]
   13b40:	cmp	r3, #0
   13b44:	beq	13b74 <flatcc_builder_create_buffer@@Base+0x158>
   13b48:	ldr	r1, [sp, #16]
   13b4c:	add	r0, sp, #88	; 0x58
   13b50:	add	r1, r1, r3
   13b54:	str	r1, [sp, #16]
   13b58:	ldr	r1, [sp, #20]
   13b5c:	ldr	ip, [pc, #108]	; 13bd0 <flatcc_builder_create_buffer@@Base+0x1b4>
   13b60:	add	r1, r1, #1
   13b64:	str	r1, [sp, #20]
   13b68:	add	r0, r0, r1, lsl #3
   13b6c:	str	ip, [r0, #-72]	; 0xffffffb8
   13b70:	str	r3, [r0, #-68]	; 0xffffffbc
   13b74:	cmp	r6, #0
   13b78:	ldr	r3, [sp, #16]
   13b7c:	add	r1, sp, #16
   13b80:	sub	r3, r2, r3
   13b84:	ldrne	r2, [r4, #144]	; 0x90
   13b88:	ldreq	r2, [r4, #140]	; 0x8c
   13b8c:	add	r3, r3, lr, lsl #2
   13b90:	sub	r2, r2, r3
   13b94:	mov	r0, r4
   13b98:	sub	r3, r5, r3
   13b9c:	str	r2, [sp, #8]
   13ba0:	str	r3, [sp, #4]
   13ba4:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   13ba8:	cmp	r0, #0
   13bac:	bne	13bc8 <flatcc_builder_create_buffer@@Base+0x1ac>
   13bb0:	ldr	r3, [pc, #28]	; 13bd4 <flatcc_builder_create_buffer@@Base+0x1b8>
   13bb4:	mov	r2, #772	; 0x304
   13bb8:	ldr	r1, [pc, #24]	; 13bd8 <flatcc_builder_create_buffer@@Base+0x1bc>
   13bbc:	ldr	r0, [pc, #24]	; 13bdc <flatcc_builder_create_buffer@@Base+0x1c0>
   13bc0:	bl	1202c <__assert_fail@plt>
   13bc4:	mov	r0, r7
   13bc8:	add	sp, sp, #92	; 0x5c
   13bcc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13bd0:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   13bd4:	andeq	r6, r1, fp, ror r9
   13bd8:			; <UNDEFINED> instruction: 0x00016dbc
   13bdc:	andeq	r6, r1, r9, lsr #28

00013be0 <flatcc_builder_create_struct@@Base>:
   13be0:	cmp	r3, #0
   13be4:	push	{lr}		; (str lr, [sp, #-4]!)
   13be8:	sub	sp, sp, #76	; 0x4c
   13bec:	bne	13c04 <flatcc_builder_create_struct@@Base+0x24>
   13bf0:	ldr	r3, [pc, #144]	; 13c88 <flatcc_builder_create_struct@@Base+0xa8>
   13bf4:	ldr	r2, [pc, #144]	; 13c8c <flatcc_builder_create_struct@@Base+0xac>
   13bf8:	ldr	r1, [pc, #144]	; 13c90 <flatcc_builder_create_struct@@Base+0xb0>
   13bfc:	ldr	r0, [pc, #144]	; 13c94 <flatcc_builder_create_struct@@Base+0xb4>
   13c00:	bl	1202c <__assert_fail@plt>
   13c04:	ldrh	ip, [r0, #128]	; 0x80
   13c08:	cmp	ip, r3
   13c0c:	ldr	ip, [r0, #136]	; 0x88
   13c10:	strhcc	r3, [r0, #128]	; 0x80
   13c14:	sub	ip, ip, r2
   13c18:	sub	r3, r3, #1
   13c1c:	and	r3, r3, ip
   13c20:	mov	ip, #0
   13c24:	cmp	r2, ip
   13c28:	strne	r2, [sp, #12]
   13c2c:	str	ip, [sp]
   13c30:	strne	r2, [sp]
   13c34:	movne	r2, #1
   13c38:	str	ip, [sp, #4]
   13c3c:	strne	r1, [sp, #8]
   13c40:	strne	r2, [sp, #4]
   13c44:	cmp	r3, #0
   13c48:	beq	13c78 <flatcc_builder_create_struct@@Base+0x98>
   13c4c:	ldr	r2, [sp]
   13c50:	add	r1, sp, #72	; 0x48
   13c54:	add	r2, r2, r3
   13c58:	str	r2, [sp]
   13c5c:	ldr	r2, [sp, #4]
   13c60:	ldr	ip, [pc, #48]	; 13c98 <flatcc_builder_create_struct@@Base+0xb8>
   13c64:	add	r2, r2, #1
   13c68:	str	r2, [sp, #4]
   13c6c:	add	r1, r1, r2, lsl #3
   13c70:	str	ip, [r1, #-72]	; 0xffffffb8
   13c74:	str	r3, [r1, #-68]	; 0xffffffbc
   13c78:	mov	r1, sp
   13c7c:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   13c80:	add	sp, sp, #76	; 0x4c
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	muleq	r1, r8, r9
   13c8c:	andeq	r0, r0, pc, lsl #6
   13c90:			; <UNDEFINED> instruction: 0x00016dbc
   13c94:	andeq	r6, r1, r3, lsl #29
   13c98:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00013c9c <flatcc_builder_start_buffer@@Base>:
   13c9c:	push	{r4, r5, r6, r7, r8, lr}
   13ca0:	mov	r5, r1
   13ca4:	ldrh	r1, [r0, #128]	; 0x80
   13ca8:	mov	r4, r0
   13cac:	mov	r7, r2
   13cb0:	mov	r6, r3
   13cb4:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   13cb8:	cmp	r0, #0
   13cbc:	bne	13d30 <flatcc_builder_start_buffer@@Base+0x94>
   13cc0:	ldrh	r3, [r4, #132]	; 0x84
   13cc4:	ldr	ip, [r4, #32]
   13cc8:	mov	r1, #1
   13ccc:	strh	r1, [r4, #128]	; 0x80
   13cd0:	strh	r3, [ip, #34]	; 0x22
   13cd4:	ldrh	r3, [r4, #164]	; 0xa4
   13cd8:	strh	r7, [r4, #132]	; 0x84
   13cdc:	cmp	r5, #0
   13ce0:	strh	r3, [ip, #32]
   13ce4:	ldr	r3, [r4, #144]	; 0x90
   13ce8:	strh	r6, [r4, #164]	; 0xa4
   13cec:	str	r3, [ip, #20]
   13cf0:	ldr	r3, [r4, #152]	; 0x98
   13cf4:	str	r3, [ip, #28]
   13cf8:	ldr	r3, [r4, #136]	; 0x88
   13cfc:	str	r3, [r4, #144]	; 0x90
   13d00:	ldr	r3, [r4, #148]	; 0x94
   13d04:	str	r3, [r4, #152]	; 0x98
   13d08:	add	r2, r3, r1
   13d0c:	ldr	r3, [r4, #168]	; 0xa8
   13d10:	str	r2, [r4, #148]	; 0x94
   13d14:	str	r3, [ip, #16]
   13d18:	ldr	r3, [pc, #24]	; 13d38 <flatcc_builder_start_buffer@@Base+0x9c>
   13d1c:	moveq	r5, r3
   13d20:	ldr	r3, [r5]
   13d24:	str	r3, [r4, #168]	; 0xa8
   13d28:	strh	r1, [ip, #14]
   13d2c:	pop	{r4, r5, r6, r7, r8, pc}
   13d30:	mvn	r0, #0
   13d34:	pop	{r4, r5, r6, r7, r8, pc}
   13d38:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00013d3c <flatcc_builder_end_buffer@@Base>:
   13d3c:	push	{r0, r1, r2, r4, r5, lr}
   13d40:	mov	r4, r0
   13d44:	ldrh	r0, [r0, #164]	; 0xa4
   13d48:	ldr	r2, [r4, #152]	; 0x98
   13d4c:	and	r0, r0, #2
   13d50:	cmp	r2, #0
   13d54:	orrne	r0, r0, #1
   13d58:	ldr	r2, [r4, #32]
   13d5c:	ldrh	r2, [r2, #14]
   13d60:	cmp	r2, #1
   13d64:	beq	13d7c <flatcc_builder_end_buffer@@Base+0x40>
   13d68:	ldr	r3, [pc, #120]	; 13de8 <flatcc_builder_end_buffer@@Base+0xac>
   13d6c:	ldr	r2, [pc, #120]	; 13dec <flatcc_builder_end_buffer@@Base+0xb0>
   13d70:	ldr	r1, [pc, #120]	; 13df0 <flatcc_builder_end_buffer@@Base+0xb4>
   13d74:	ldr	r0, [pc, #120]	; 13df4 <flatcc_builder_end_buffer@@Base+0xb8>
   13d78:	bl	1202c <__assert_fail@plt>
   13d7c:	ldrh	r2, [r4, #132]	; 0x84
   13d80:	mov	r3, r1
   13d84:	ldrh	r1, [r4, #128]	; 0x80
   13d88:	str	r0, [sp, #4]
   13d8c:	mov	r0, r4
   13d90:	cmp	r1, r2
   13d94:	strhcc	r2, [r4, #128]	; 0x80
   13d98:	ldrh	r1, [r4, #128]	; 0x80
   13d9c:	str	r1, [sp]
   13da0:	add	r1, r4, #168	; 0xa8
   13da4:	bl	13a1c <flatcc_builder_create_buffer@@Base>
   13da8:	subs	r5, r0, #0
   13dac:	beq	13ddc <flatcc_builder_end_buffer@@Base+0xa0>
   13db0:	ldr	r3, [r4, #32]
   13db4:	mov	r0, r4
   13db8:	ldr	r2, [r3, #20]
   13dbc:	str	r2, [r4, #144]	; 0x90
   13dc0:	ldr	r2, [r3, #28]
   13dc4:	str	r2, [r4, #152]	; 0x98
   13dc8:	ldr	r2, [r3, #16]
   13dcc:	str	r2, [r4, #168]	; 0xa8
   13dd0:	ldrh	r3, [r3, #32]
   13dd4:	strh	r3, [r4, #164]	; 0xa4
   13dd8:	bl	12db4 <access_monster_buffer@@Base+0x424>
   13ddc:	mov	r0, r5
   13de0:	add	sp, sp, #12
   13de4:	pop	{r4, r5, pc}
   13de8:			; <UNDEFINED> instruction: 0x000169b5
   13dec:	andeq	r0, r0, r6, asr #6
   13df0:			; <UNDEFINED> instruction: 0x00016dbc
   13df4:	andeq	r6, r1, lr, lsl #29

00013df8 <flatcc_builder_start_struct@@Base>:
   13df8:	push	{r4, r5, r6, lr}
   13dfc:	mov	r5, r1
   13e00:	mov	r1, r2
   13e04:	mov	r4, r0
   13e08:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   13e0c:	cmp	r0, #0
   13e10:	bne	13e3c <flatcc_builder_start_struct@@Base+0x44>
   13e14:	ldr	r3, [r4, #32]
   13e18:	mov	r2, #2
   13e1c:	mov	r0, r4
   13e20:	mvn	r1, #3
   13e24:	strh	r2, [r3, #14]
   13e28:	bl	12cec <access_monster_buffer@@Base+0x35c>
   13e2c:	mov	r1, r5
   13e30:	mov	r0, r4
   13e34:	pop	{r4, r5, r6, lr}
   13e38:	b	12d6c <access_monster_buffer@@Base+0x3dc>
   13e3c:	mov	r0, #0
   13e40:	pop	{r4, r5, r6, pc}

00013e44 <flatcc_builder_struct_edit@@Base>:
   13e44:	ldr	r0, [r0, #16]
   13e48:	bx	lr

00013e4c <flatcc_builder_end_struct@@Base>:
   13e4c:	ldr	r3, [r0, #32]
   13e50:	push	{r4, r5, r6, lr}
   13e54:	ldrh	r3, [r3, #14]
   13e58:	cmp	r3, #2
   13e5c:	beq	13e74 <flatcc_builder_end_struct@@Base+0x28>
   13e60:	ldr	r3, [pc, #56]	; 13ea0 <flatcc_builder_end_struct@@Base+0x54>
   13e64:	mov	r2, #872	; 0x368
   13e68:	ldr	r1, [pc, #52]	; 13ea4 <flatcc_builder_end_struct@@Base+0x58>
   13e6c:	ldr	r0, [pc, #52]	; 13ea8 <flatcc_builder_end_struct@@Base+0x5c>
   13e70:	bl	1202c <__assert_fail@plt>
   13e74:	ldrh	r3, [r0, #130]	; 0x82
   13e78:	ldr	r2, [r0, #20]
   13e7c:	ldr	r1, [r0, #16]
   13e80:	mov	r4, r0
   13e84:	bl	13be0 <flatcc_builder_create_struct@@Base>
   13e88:	subs	r5, r0, #0
   13e8c:	beq	13e98 <flatcc_builder_end_struct@@Base+0x4c>
   13e90:	mov	r0, r4
   13e94:	bl	12db4 <access_monster_buffer@@Base+0x424>
   13e98:	mov	r0, r5
   13e9c:	pop	{r4, r5, r6, pc}
   13ea0:	andeq	r6, r1, pc, asr #19
   13ea4:			; <UNDEFINED> instruction: 0x00016dbc
   13ea8:			; <UNDEFINED> instruction: 0x00016eba

00013eac <flatcc_builder_extend_vector@@Base>:
   13eac:	push	{r4, r5, r6, lr}
   13eb0:	mov	r4, r0
   13eb4:	ldr	r0, [r0, #32]
   13eb8:	mov	r5, r1
   13ebc:	ldr	r2, [r0, #24]
   13ec0:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   13ec4:	cmp	r0, #0
   13ec8:	bne	13ee4 <flatcc_builder_extend_vector@@Base+0x38>
   13ecc:	ldr	r3, [r4, #32]
   13ed0:	mov	r0, r4
   13ed4:	ldr	r1, [r3, #16]
   13ed8:	mul	r1, r1, r5
   13edc:	pop	{r4, r5, r6, lr}
   13ee0:	b	12d6c <access_monster_buffer@@Base+0x3dc>
   13ee4:	mov	r0, #0
   13ee8:	pop	{r4, r5, r6, pc}

00013eec <flatcc_builder_vector_push@@Base>:
   13eec:	ldr	r3, [r0, #32]
   13ef0:	push	{r4, lr}
   13ef4:	ldrh	r2, [r3, #14]
   13ef8:	cmp	r2, #4
   13efc:	beq	13f14 <flatcc_builder_vector_push@@Base+0x28>
   13f00:	ldr	r3, [pc, #64]	; 13f48 <flatcc_builder_vector_push@@Base+0x5c>
   13f04:	ldr	r2, [pc, #64]	; 13f4c <flatcc_builder_vector_push@@Base+0x60>
   13f08:	ldr	r1, [pc, #64]	; 13f50 <flatcc_builder_vector_push@@Base+0x64>
   13f0c:	ldr	r0, [pc, #64]	; 13f54 <flatcc_builder_vector_push@@Base+0x68>
   13f10:	bl	1202c <__assert_fail@plt>
   13f14:	ldr	r2, [r3, #20]
   13f18:	ldr	ip, [r3, #24]
   13f1c:	cmp	r2, ip
   13f20:	ldrhi	r3, [pc, #32]	; 13f48 <flatcc_builder_vector_push@@Base+0x5c>
   13f24:	movhi	r2, #908	; 0x38c
   13f28:	ldrhi	r1, [pc, #32]	; 13f50 <flatcc_builder_vector_push@@Base+0x64>
   13f2c:	ldrhi	r0, [pc, #36]	; 13f58 <flatcc_builder_vector_push@@Base+0x6c>
   13f30:	bhi	13f10 <flatcc_builder_vector_push@@Base+0x24>
   13f34:	add	r2, r2, #1
   13f38:	str	r2, [r3, #20]
   13f3c:	ldr	r2, [r3, #16]
   13f40:	pop	{r4, lr}
   13f44:	b	12e40 <access_monster_buffer@@Base+0x4b0>
   13f48:	andeq	r6, r1, r9, ror #19
   13f4c:	andeq	r0, r0, fp, lsl #7
   13f50:			; <UNDEFINED> instruction: 0x00016dbc
   13f54:	andeq	r6, r1, r6, ror #29
   13f58:	andeq	r6, r1, r2, lsl pc

00013f5c <flatcc_builder_append_vector@@Base>:
   13f5c:	push	{r4, r5, r6, lr}
   13f60:	mov	r4, r0
   13f64:	ldr	r0, [r0, #32]
   13f68:	ldrh	r3, [r0, #14]
   13f6c:	cmp	r3, #4
   13f70:	beq	13f88 <flatcc_builder_append_vector@@Base+0x2c>
   13f74:	ldr	r3, [pc, #76]	; 13fc8 <flatcc_builder_append_vector@@Base+0x6c>
   13f78:	ldr	r2, [pc, #76]	; 13fcc <flatcc_builder_append_vector@@Base+0x70>
   13f7c:	ldr	r1, [pc, #76]	; 13fd0 <flatcc_builder_append_vector@@Base+0x74>
   13f80:	ldr	r0, [pc, #76]	; 13fd4 <flatcc_builder_append_vector@@Base+0x78>
   13f84:	bl	1202c <__assert_fail@plt>
   13f88:	mov	r5, r2
   13f8c:	mov	r6, r1
   13f90:	ldr	r2, [r0, #24]
   13f94:	mov	r1, r5
   13f98:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   13f9c:	cmp	r0, #0
   13fa0:	bne	13fc0 <flatcc_builder_append_vector@@Base+0x64>
   13fa4:	ldr	r3, [r4, #32]
   13fa8:	mov	r1, r6
   13fac:	mov	r0, r4
   13fb0:	ldr	r2, [r3, #16]
   13fb4:	mul	r2, r2, r5
   13fb8:	pop	{r4, r5, r6, lr}
   13fbc:	b	12e40 <access_monster_buffer@@Base+0x4b0>
   13fc0:	mov	r0, #0
   13fc4:	pop	{r4, r5, r6, pc}
   13fc8:	andeq	r6, r1, r4, lsl #20
   13fcc:	muleq	r0, r3, r3
   13fd0:			; <UNDEFINED> instruction: 0x00016dbc
   13fd4:	andeq	r6, r1, r6, ror #29

00013fd8 <flatcc_builder_extend_offset_vector@@Base>:
   13fd8:	push	{r4, r5, r6, lr}
   13fdc:	mvn	r2, #-1073741824	; 0xc0000000
   13fe0:	mov	r4, r0
   13fe4:	ldr	r0, [r0, #32]
   13fe8:	mov	r5, r1
   13fec:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   13ff0:	cmp	r0, #0
   13ff4:	bne	14008 <flatcc_builder_extend_offset_vector@@Base+0x30>
   13ff8:	lsl	r1, r5, #2
   13ffc:	mov	r0, r4
   14000:	pop	{r4, r5, r6, lr}
   14004:	b	12d6c <access_monster_buffer@@Base+0x3dc>
   14008:	mov	r0, #0
   1400c:	pop	{r4, r5, r6, pc}

00014010 <flatcc_builder_offset_vector_push@@Base>:
   14010:	ldr	r2, [r0, #32]
   14014:	push	{r4, lr}
   14018:	ldrh	r3, [r2, #14]
   1401c:	cmp	r3, #5
   14020:	beq	14038 <flatcc_builder_offset_vector_push@@Base+0x28>
   14024:	ldr	r3, [pc, #64]	; 1406c <flatcc_builder_offset_vector_push@@Base+0x5c>
   14028:	ldr	r2, [pc, #64]	; 14070 <flatcc_builder_offset_vector_push@@Base+0x60>
   1402c:	ldr	r1, [pc, #64]	; 14074 <flatcc_builder_offset_vector_push@@Base+0x64>
   14030:	ldr	r0, [pc, #64]	; 14078 <flatcc_builder_offset_vector_push@@Base+0x68>
   14034:	bl	1202c <__assert_fail@plt>
   14038:	ldr	r3, [r2, #20]
   1403c:	cmn	r3, #-1073741823	; 0xc0000001
   14040:	beq	14064 <flatcc_builder_offset_vector_push@@Base+0x54>
   14044:	add	r3, r3, #1
   14048:	mov	r4, r1
   1404c:	str	r3, [r2, #20]
   14050:	mov	r1, #4
   14054:	bl	12d6c <access_monster_buffer@@Base+0x3dc>
   14058:	cmp	r0, #0
   1405c:	strne	r4, [r0]
   14060:	pop	{r4, pc}
   14064:	mov	r0, #0
   14068:	pop	{r4, pc}
   1406c:	andeq	r6, r1, r1, lsr #20
   14070:	andeq	r0, r0, r6, lsr #7
   14074:			; <UNDEFINED> instruction: 0x00016dbc
   14078:	andeq	r6, r1, pc, asr #30

0001407c <flatcc_builder_append_offset_vector@@Base>:
   1407c:	push	{r4, r5, r6, lr}
   14080:	mov	r4, r0
   14084:	ldr	r0, [r0, #32]
   14088:	ldrh	r3, [r0, #14]
   1408c:	cmp	r3, #5
   14090:	beq	140a8 <flatcc_builder_append_offset_vector@@Base+0x2c>
   14094:	ldr	r3, [pc, #68]	; 140e0 <flatcc_builder_append_offset_vector@@Base+0x64>
   14098:	mov	r2, #948	; 0x3b4
   1409c:	ldr	r1, [pc, #64]	; 140e4 <flatcc_builder_append_offset_vector@@Base+0x68>
   140a0:	ldr	r0, [pc, #64]	; 140e8 <flatcc_builder_append_offset_vector@@Base+0x6c>
   140a4:	bl	1202c <__assert_fail@plt>
   140a8:	mov	r5, r2
   140ac:	mov	r6, r1
   140b0:	mvn	r2, #-1073741824	; 0xc0000000
   140b4:	mov	r1, r5
   140b8:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   140bc:	cmp	r0, #0
   140c0:	bne	140d8 <flatcc_builder_append_offset_vector@@Base+0x5c>
   140c4:	lsl	r2, r5, #2
   140c8:	mov	r1, r6
   140cc:	mov	r0, r4
   140d0:	pop	{r4, r5, r6, lr}
   140d4:	b	12e40 <access_monster_buffer@@Base+0x4b0>
   140d8:	mov	r0, #0
   140dc:	pop	{r4, r5, r6, pc}
   140e0:	andeq	r6, r1, r3, asr #20
   140e4:			; <UNDEFINED> instruction: 0x00016dbc
   140e8:	andeq	r6, r1, pc, asr #30

000140ec <flatcc_builder_extend_string@@Base>:
   140ec:	push	{r4, r5, r6, lr}
   140f0:	mov	r4, r0
   140f4:	ldr	r0, [r0, #32]
   140f8:	ldrh	r3, [r0, #14]
   140fc:	cmp	r3, #6
   14100:	beq	14118 <flatcc_builder_extend_string@@Base+0x2c>
   14104:	ldr	r3, [pc, #56]	; 14144 <flatcc_builder_extend_string@@Base+0x58>
   14108:	ldr	r2, [pc, #56]	; 14148 <flatcc_builder_extend_string@@Base+0x5c>
   1410c:	ldr	r1, [pc, #56]	; 1414c <flatcc_builder_extend_string@@Base+0x60>
   14110:	ldr	r0, [pc, #56]	; 14150 <flatcc_builder_extend_string@@Base+0x64>
   14114:	bl	1202c <__assert_fail@plt>
   14118:	mvn	r2, #0
   1411c:	mov	r5, r1
   14120:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   14124:	cmp	r0, #0
   14128:	bne	1413c <flatcc_builder_extend_string@@Base+0x50>
   1412c:	mov	r1, r5
   14130:	mov	r0, r4
   14134:	pop	{r4, r5, r6, lr}
   14138:	b	12d6c <access_monster_buffer@@Base+0x3dc>
   1413c:	mov	r0, #0
   14140:	pop	{r4, r5, r6, pc}
   14144:	andeq	r6, r1, r7, ror #20
   14148:			; <UNDEFINED> instruction: 0x000003bd
   1414c:			; <UNDEFINED> instruction: 0x00016dbc
   14150:	andeq	r6, r1, r2, lsl #31

00014154 <flatcc_builder_append_string@@Base>:
   14154:	push	{r4, r5, r6, lr}
   14158:	mov	r4, r0
   1415c:	ldr	r0, [r0, #32]
   14160:	ldrh	r3, [r0, #14]
   14164:	cmp	r3, #6
   14168:	beq	14180 <flatcc_builder_append_string@@Base+0x2c>
   1416c:	ldr	r3, [pc, #68]	; 141b8 <flatcc_builder_append_string@@Base+0x64>
   14170:	ldr	r2, [pc, #68]	; 141bc <flatcc_builder_append_string@@Base+0x68>
   14174:	ldr	r1, [pc, #68]	; 141c0 <flatcc_builder_append_string@@Base+0x6c>
   14178:	ldr	r0, [pc, #68]	; 141c4 <flatcc_builder_append_string@@Base+0x70>
   1417c:	bl	1202c <__assert_fail@plt>
   14180:	mov	r5, r2
   14184:	mov	r6, r1
   14188:	mvn	r2, #0
   1418c:	mov	r1, r5
   14190:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   14194:	cmp	r0, #0
   14198:	bne	141b0 <flatcc_builder_append_string@@Base+0x5c>
   1419c:	mov	r2, r5
   141a0:	mov	r1, r6
   141a4:	mov	r0, r4
   141a8:	pop	{r4, r5, r6, lr}
   141ac:	b	12e40 <access_monster_buffer@@Base+0x4b0>
   141b0:	mov	r0, #0
   141b4:	pop	{r4, r5, r6, pc}
   141b8:	andeq	r6, r1, r4, lsl #21
   141bc:	andeq	r0, r0, r6, asr #7
   141c0:			; <UNDEFINED> instruction: 0x00016dbc
   141c4:	andeq	r6, r1, r2, lsl #31

000141c8 <flatcc_builder_append_string_str@@Base>:
   141c8:	push	{r4, r5, r6, lr}
   141cc:	mov	r5, r0
   141d0:	mov	r0, r1
   141d4:	mov	r4, r1
   141d8:	bl	11ff0 <strlen@plt>
   141dc:	mov	r1, r4
   141e0:	mov	r2, r0
   141e4:	mov	r0, r5
   141e8:	pop	{r4, r5, r6, lr}
   141ec:	b	14154 <flatcc_builder_append_string@@Base>

000141f0 <flatcc_builder_append_string_strn@@Base>:
   141f0:	push	{r4, r5, r6, lr}
   141f4:	mov	r4, r1
   141f8:	mov	r6, r0
   141fc:	mov	r1, #0
   14200:	mov	r0, r4
   14204:	mov	r5, r2
   14208:	bl	12014 <memchr@plt>
   1420c:	mov	r1, r4
   14210:	cmp	r0, #0
   14214:	subne	r5, r0, r4
   14218:	mov	r2, r5
   1421c:	mov	r0, r6
   14220:	pop	{r4, r5, r6, lr}
   14224:	b	14154 <flatcc_builder_append_string@@Base>

00014228 <flatcc_builder_truncate_vector@@Base>:
   14228:	ldr	r3, [r0, #32]
   1422c:	push	{r4, lr}
   14230:	ldrh	r2, [r3, #14]
   14234:	cmp	r2, #4
   14238:	beq	14250 <flatcc_builder_truncate_vector@@Base+0x28>
   1423c:	ldr	r3, [pc, #68]	; 14288 <flatcc_builder_truncate_vector@@Base+0x60>
   14240:	ldr	r2, [pc, #68]	; 1428c <flatcc_builder_truncate_vector@@Base+0x64>
   14244:	ldr	r1, [pc, #68]	; 14290 <flatcc_builder_truncate_vector@@Base+0x68>
   14248:	ldr	r0, [pc, #68]	; 14294 <flatcc_builder_truncate_vector@@Base+0x6c>
   1424c:	bl	1202c <__assert_fail@plt>
   14250:	ldr	r2, [r3, #20]
   14254:	cmp	r2, r1
   14258:	ldrcc	r3, [pc, #40]	; 14288 <flatcc_builder_truncate_vector@@Base+0x60>
   1425c:	ldrcc	r2, [pc, #52]	; 14298 <flatcc_builder_truncate_vector@@Base+0x70>
   14260:	ldrcc	r1, [pc, #40]	; 14290 <flatcc_builder_truncate_vector@@Base+0x68>
   14264:	ldrcc	r0, [pc, #48]	; 1429c <flatcc_builder_truncate_vector@@Base+0x74>
   14268:	bcc	1424c <flatcc_builder_truncate_vector@@Base+0x24>
   1426c:	sub	r2, r2, r1
   14270:	str	r2, [r3, #20]
   14274:	ldr	r3, [r3, #16]
   14278:	mul	r1, r3, r1
   1427c:	bl	12e20 <access_monster_buffer@@Base+0x490>
   14280:	mov	r0, #0
   14284:	pop	{r4, pc}
   14288:	andeq	r6, r1, r1, lsr #21
   1428c:	ldrdeq	r0, [r0], -r9
   14290:			; <UNDEFINED> instruction: 0x00016dbc
   14294:	andeq	r6, r1, r6, ror #29
   14298:	ldrdeq	r0, [r0], -sl
   1429c:	andeq	r6, r1, lr, lsr #31

000142a0 <flatcc_builder_truncate_offset_vector@@Base>:
   142a0:	ldr	r3, [r0, #32]
   142a4:	push	{r4, lr}
   142a8:	ldrh	r2, [r3, #14]
   142ac:	cmp	r2, #5
   142b0:	beq	142c8 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   142b4:	ldr	r3, [pc, #68]	; 14300 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   142b8:	ldr	r2, [pc, #68]	; 14304 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   142bc:	ldr	r1, [pc, #68]	; 14308 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   142c0:	ldr	r0, [pc, #68]	; 1430c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   142c4:	bl	1202c <__assert_fail@plt>
   142c8:	ldr	r2, [r3, #20]
   142cc:	cmp	r2, r1
   142d0:	ldrcc	r3, [pc, #40]	; 14300 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   142d4:	ldrcc	r2, [pc, #52]	; 14310 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   142d8:	ldrcc	r1, [pc, #40]	; 14308 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   142dc:	ldrcc	r0, [pc, #48]	; 14314 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   142e0:	bcc	142c4 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   142e4:	sub	r2, r2, r1
   142e8:	str	r2, [r3, #20]
   142ec:	ldr	r3, [r3, #16]
   142f0:	mul	r1, r3, r1
   142f4:	bl	12e20 <access_monster_buffer@@Base+0x490>
   142f8:	mov	r0, #0
   142fc:	pop	{r4, pc}
   14300:	andeq	r6, r1, r0, asr #21
   14304:	andeq	r0, r0, r2, ror #7
   14308:			; <UNDEFINED> instruction: 0x00016dbc
   1430c:	andeq	r6, r1, pc, asr #30
   14310:	andeq	r0, r0, r3, ror #7
   14314:	ldrdeq	r6, [r1], -r2

00014318 <flatcc_builder_truncate_string@@Base>:
   14318:	ldr	r2, [r0, #32]
   1431c:	push	{r4, lr}
   14320:	ldrh	r3, [r2, #14]
   14324:	cmp	r3, #6
   14328:	beq	14340 <flatcc_builder_truncate_string@@Base+0x28>
   1432c:	ldr	r3, [pc, #60]	; 14370 <flatcc_builder_truncate_string@@Base+0x58>
   14330:	ldr	r2, [pc, #60]	; 14374 <flatcc_builder_truncate_string@@Base+0x5c>
   14334:	ldr	r1, [pc, #60]	; 14378 <flatcc_builder_truncate_string@@Base+0x60>
   14338:	ldr	r0, [pc, #60]	; 1437c <flatcc_builder_truncate_string@@Base+0x64>
   1433c:	bl	1202c <__assert_fail@plt>
   14340:	ldr	r3, [r2, #20]
   14344:	cmp	r3, r1
   14348:	ldrcc	r3, [pc, #32]	; 14370 <flatcc_builder_truncate_string@@Base+0x58>
   1434c:	movcc	r2, #1004	; 0x3ec
   14350:	ldrcc	r1, [pc, #32]	; 14378 <flatcc_builder_truncate_string@@Base+0x60>
   14354:	ldrcc	r0, [pc, #36]	; 14380 <flatcc_builder_truncate_string@@Base+0x68>
   14358:	bcc	1433c <flatcc_builder_truncate_string@@Base+0x24>
   1435c:	sub	r3, r3, r1
   14360:	str	r3, [r2, #20]
   14364:	bl	12e20 <access_monster_buffer@@Base+0x490>
   14368:	mov	r0, #0
   1436c:	pop	{r4, pc}
   14370:	andeq	r6, r1, r6, ror #21
   14374:	andeq	r0, r0, fp, ror #7
   14378:			; <UNDEFINED> instruction: 0x00016dbc
   1437c:	andeq	r6, r1, r2, lsl #31
   14380:	andeq	r7, r1, sp

00014384 <flatcc_builder_start_vector@@Base>:
   14384:	cmp	r2, #4
   14388:	push	{r4, r5, r6, r7, r8, lr}
   1438c:	mov	r7, r1
   14390:	movcs	r1, r2
   14394:	movcc	r1, #4
   14398:	mov	r5, r0
   1439c:	mov	r6, r3
   143a0:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   143a4:	subs	r4, r0, #0
   143a8:	mvnne	r4, #0
   143ac:	bne	143d4 <flatcc_builder_start_vector@@Base+0x50>
   143b0:	ldr	r2, [r5, #32]
   143b4:	mov	r3, #4
   143b8:	mvn	r1, #3
   143bc:	str	r7, [r2, #16]
   143c0:	str	r4, [r2, #20]
   143c4:	str	r6, [r2, #24]
   143c8:	strh	r3, [r2, #14]
   143cc:	mov	r0, r5
   143d0:	bl	12cec <access_monster_buffer@@Base+0x35c>
   143d4:	mov	r0, r4
   143d8:	pop	{r4, r5, r6, r7, r8, pc}

000143dc <flatcc_builder_start_offset_vector@@Base>:
   143dc:	push	{r4, r5, r6, lr}
   143e0:	mov	r1, #4
   143e4:	mov	r5, r0
   143e8:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   143ec:	subs	r4, r0, #0
   143f0:	mvnne	r4, #0
   143f4:	bne	1441c <flatcc_builder_start_offset_vector@@Base+0x40>
   143f8:	ldr	r3, [r5, #32]
   143fc:	mov	r2, #4
   14400:	mvn	r1, #3
   14404:	str	r2, [r3, #16]
   14408:	mov	r2, #5
   1440c:	str	r4, [r3, #20]
   14410:	strh	r2, [r3, #14]
   14414:	mov	r0, r5
   14418:	bl	12cec <access_monster_buffer@@Base+0x35c>
   1441c:	mov	r0, r4
   14420:	pop	{r4, r5, r6, pc}

00014424 <flatcc_builder_start_string@@Base>:
   14424:	push	{r4, r5, r6, lr}
   14428:	mov	r1, #1
   1442c:	mov	r5, r0
   14430:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   14434:	subs	r4, r0, #0
   14438:	mvnne	r4, #0
   1443c:	bne	14464 <flatcc_builder_start_string@@Base+0x40>
   14440:	ldr	r3, [r5, #32]
   14444:	mov	r2, #1
   14448:	mvn	r1, #3
   1444c:	str	r2, [r3, #16]
   14450:	mov	r2, #6
   14454:	str	r4, [r3, #20]
   14458:	strh	r2, [r3, #14]
   1445c:	mov	r0, r5
   14460:	bl	12cec <access_monster_buffer@@Base+0x35c>
   14464:	mov	r0, r4
   14468:	pop	{r4, r5, r6, pc}

0001446c <flatcc_builder_reserve_table@@Base>:
   1446c:	cmp	r1, #0
   14470:	bge	1448c <flatcc_builder_reserve_table@@Base+0x20>
   14474:	push	{r4, lr}
   14478:	ldr	r3, [pc, #16]	; 14490 <flatcc_builder_reserve_table@@Base+0x24>
   1447c:	ldr	r2, [pc, #16]	; 14494 <flatcc_builder_reserve_table@@Base+0x28>
   14480:	ldr	r1, [pc, #16]	; 14498 <flatcc_builder_reserve_table@@Base+0x2c>
   14484:	ldr	r0, [pc, #16]	; 1449c <flatcc_builder_reserve_table@@Base+0x30>
   14488:	bl	1202c <__assert_fail@plt>
   1448c:	b	13108 <flatcc_builder_default_alloc@@Base+0x248>
   14490:	andeq	r6, r1, r5, lsl #22
   14494:	andeq	r0, r0, r9, lsr #8
   14498:			; <UNDEFINED> instruction: 0x00016dbc
   1449c:	andeq	r7, r1, r5, asr #32

000144a0 <flatcc_builder_start_table@@Base>:
   144a0:	push	{r4, r5, r6, lr}
   144a4:	mov	r5, r1
   144a8:	mov	r1, #4
   144ac:	mov	r4, r0
   144b0:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   144b4:	cmp	r0, #0
   144b8:	beq	144c8 <flatcc_builder_start_table@@Base+0x28>
   144bc:	mvn	r5, #0
   144c0:	mov	r0, r5
   144c4:	pop	{r4, r5, r6, pc}
   144c8:	ldr	r1, [r4, #52]	; 0x34
   144cc:	ldr	r2, [r4, #4]
   144d0:	ldr	r3, [r4, #32]
   144d4:	sub	r2, r2, r1
   144d8:	str	r2, [r3, #16]
   144dc:	ldr	r1, [r4, #76]	; 0x4c
   144e0:	ldr	r2, [r4]
   144e4:	sub	r2, r2, r1
   144e8:	str	r2, [r3, #20]
   144ec:	ldr	r2, [r4, #12]
   144f0:	mov	r1, r5
   144f4:	str	r2, [r3, #24]
   144f8:	ldrh	r2, [r4, #8]
   144fc:	strh	r2, [r3, #28]
   14500:	ldr	r2, [pc, #44]	; 14534 <flatcc_builder_start_table@@Base+0x94>
   14504:	strh	r0, [r4, #8]
   14508:	str	r2, [r4, #12]
   1450c:	mov	r2, #3
   14510:	strh	r2, [r3, #14]
   14514:	mov	r0, r4
   14518:	bl	13108 <flatcc_builder_default_alloc@@Base+0x248>
   1451c:	subs	r5, r0, #0
   14520:	bne	144bc <flatcc_builder_start_table@@Base+0x1c>
   14524:	ldr	r1, [pc, #12]	; 14538 <flatcc_builder_start_table@@Base+0x98>
   14528:	mov	r0, r4
   1452c:	bl	12cec <access_monster_buffer@@Base+0x35c>
   14530:	b	144c0 <flatcc_builder_start_table@@Base+0x20>
   14534:	svccs	0x00693b52
   14538:	strdeq	pc, [r0], -ip

0001453c <flatcc_builder_create_vtable@@Base>:
   1453c:	push	{lr}		; (str lr, [sp, #-4]!)
   14540:	sub	sp, sp, #76	; 0x4c
   14544:	cmp	r2, #0
   14548:	mov	r3, #0
   1454c:	str	r3, [sp]
   14550:	str	r3, [sp, #4]
   14554:	movne	r3, #1
   14558:	strne	r3, [sp, #4]
   1455c:	ldr	r3, [r0, #152]	; 0x98
   14560:	strne	r1, [sp, #8]
   14564:	strne	r2, [sp]
   14568:	strne	r2, [sp, #12]
   1456c:	cmp	r3, #0
   14570:	mov	r1, sp
   14574:	bne	14590 <flatcc_builder_create_vtable@@Base+0x54>
   14578:	ldr	r3, [r0, #180]	; 0xb4
   1457c:	cmp	r3, #0
   14580:	bne	14590 <flatcc_builder_create_vtable@@Base+0x54>
   14584:	bl	1318c <flatcc_builder_default_alloc@@Base+0x2cc>
   14588:	add	sp, sp, #76	; 0x4c
   1458c:	pop	{pc}		; (ldr pc, [sp], #4)
   14590:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   14594:	cmp	r0, #0
   14598:	addne	r0, r0, #1
   1459c:	b	14588 <flatcc_builder_create_vtable@@Base+0x4c>

000145a0 <flatcc_builder_create_cached_vtable@@Base>:
   145a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a4:	mov	r4, r0
   145a8:	ldr	r5, [r0, #116]	; 0x74
   145ac:	sub	sp, sp, #20
   145b0:	cmp	r5, #0
   145b4:	mov	fp, r1
   145b8:	mov	r7, r2
   145bc:	mov	r6, r3
   145c0:	bne	14668 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   145c4:	ldr	r3, [r0, #124]	; 0x7c
   145c8:	add	r9, r0, #92	; 0x5c
   145cc:	cmp	r3, #0
   145d0:	beq	145e8 <flatcc_builder_create_cached_vtable@@Base+0x48>
   145d4:	ldr	r3, [pc, #556]	; 14808 <flatcc_builder_create_cached_vtable@@Base+0x268>
   145d8:	ldr	r2, [pc, #556]	; 1480c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   145dc:	ldr	r1, [pc, #556]	; 14810 <flatcc_builder_create_cached_vtable@@Base+0x270>
   145e0:	ldr	r0, [pc, #556]	; 14814 <flatcc_builder_create_cached_vtable@@Base+0x274>
   145e4:	bl	1202c <__assert_fail@plt>
   145e8:	str	r5, [sp]
   145ec:	mov	r3, #16
   145f0:	mov	r2, r5
   145f4:	mov	r1, #6
   145f8:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   145fc:	cmp	r0, #0
   14600:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14604:	mov	r3, #16
   14608:	str	r3, [r4, #124]	; 0x7c
   1460c:	mov	r3, #5
   14610:	str	r3, [sp]
   14614:	mov	r1, r9
   14618:	mov	r3, #1
   1461c:	ldr	r8, [r4, #48]	; 0x30
   14620:	mov	r2, #256	; 0x100
   14624:	ldr	r0, [r4, #40]	; 0x28
   14628:	blx	r8
   1462c:	cmp	r0, #0
   14630:	moveq	r3, #256	; 0x100
   14634:	ldreq	r1, [r4, #96]	; 0x60
   14638:	beq	14648 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1463c:	mov	r0, #0
   14640:	b	147b8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14644:	mov	r3, r2
   14648:	lsl	r2, r3, #1
   1464c:	cmp	r2, r1
   14650:	bls	14644 <flatcc_builder_create_cached_vtable@@Base+0xa4>
   14654:	lsr	r3, r3, #2
   14658:	mov	r2, #1
   1465c:	cmp	r3, r2, lsl r5
   14660:	bhi	14728 <flatcc_builder_create_cached_vtable@@Base+0x188>
   14664:	str	r5, [r4, #116]	; 0x74
   14668:	ldr	r3, [r4, #116]	; 0x74
   1466c:	ldr	r8, [r4, #92]	; 0x5c
   14670:	rsb	r3, r3, #32
   14674:	lsr	r6, r6, r3
   14678:	adds	r3, r8, r6, lsl #2
   1467c:	str	r3, [sp, #8]
   14680:	ldrne	r9, [r8, r6, lsl #2]
   14684:	movne	sl, #0
   14688:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1468c:	cmp	r9, #0
   14690:	bne	14730 <flatcc_builder_create_cached_vtable@@Base+0x190>
   14694:	str	r9, [sp]
   14698:	mov	r3, #16
   1469c:	ldr	r2, [r4, #124]	; 0x7c
   146a0:	mov	r1, #6
   146a4:	mov	r0, r4
   146a8:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   146ac:	subs	r5, r0, #0
   146b0:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   146b4:	ldr	r3, [r4, #124]	; 0x7c
   146b8:	mov	r1, fp
   146bc:	add	r2, r3, #16
   146c0:	str	r2, [r4, #124]	; 0x7c
   146c4:	ldr	r2, [r4, #152]	; 0x98
   146c8:	mov	r0, r4
   146cc:	str	r2, [r5, #4]
   146d0:	ldr	r2, [r8, r6, lsl #2]
   146d4:	str	r2, [r5, #12]
   146d8:	str	r3, [r8, r6, lsl #2]
   146dc:	mov	r2, r7
   146e0:	bl	1453c <flatcc_builder_create_vtable@@Base>
   146e4:	cmp	r0, #0
   146e8:	str	r0, [r5]
   146ec:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   146f0:	cmp	sl, #0
   146f4:	ldrne	r3, [sl, #8]
   146f8:	strne	r3, [r5, #8]
   146fc:	bne	147b4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14700:	ldr	r2, [r4, #172]	; 0xac
   14704:	cmp	r2, #0
   14708:	beq	147c0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1470c:	ldr	r3, [r4, #120]	; 0x78
   14710:	add	r3, r7, r3
   14714:	cmp	r2, r3
   14718:	bcs	147c0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1471c:	mov	r0, r4
   14720:	bl	134fc <flatcc_builder_flush_vtable_cache@@Base>
   14724:	b	147b4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14728:	add	r5, r5, #1
   1472c:	b	1465c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14730:	ldr	r5, [r4, #100]	; 0x64
   14734:	ldr	r0, [r4, #68]	; 0x44
   14738:	add	r5, r5, r9
   1473c:	ldr	r2, [r5, #8]
   14740:	add	r1, r0, r2
   14744:	ldrh	r2, [r0, r2]
   14748:	cmp	r2, r7
   1474c:	bne	1476c <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   14750:	mov	r2, r7
   14754:	mov	r0, fp
   14758:	str	r3, [sp, #12]
   1475c:	bl	11fa8 <memcmp@plt>
   14760:	ldr	r3, [sp, #12]
   14764:	cmp	r0, #0
   14768:	beq	14780 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1476c:	add	r3, r5, #12
   14770:	ldr	r9, [r5, #12]
   14774:	mov	r5, sl
   14778:	mov	sl, r5
   1477c:	b	1468c <flatcc_builder_create_cached_vtable@@Base+0xec>
   14780:	ldr	r1, [r5, #4]
   14784:	ldr	r2, [r4, #152]	; 0x98
   14788:	cmp	r1, r2
   1478c:	addne	r3, r5, #12
   14790:	ldrne	r9, [r5, #12]
   14794:	bne	14778 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   14798:	ldr	r2, [sp, #8]
   1479c:	cmp	r3, r2
   147a0:	ldrne	r2, [r5, #12]
   147a4:	strne	r2, [r3]
   147a8:	ldrne	r3, [r8, r6, lsl #2]
   147ac:	strne	r3, [r5, #12]
   147b0:	strne	r9, [r8, r6, lsl #2]
   147b4:	ldr	r0, [r5]
   147b8:	add	sp, sp, #20
   147bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c0:	mov	r3, #0
   147c4:	str	r3, [sp]
   147c8:	ldr	r2, [r4, #120]	; 0x78
   147cc:	mov	r3, r7
   147d0:	mov	r1, #2
   147d4:	mov	r0, r4
   147d8:	bl	12fb8 <flatcc_builder_default_alloc@@Base+0xf8>
   147dc:	cmp	r0, #0
   147e0:	mvneq	r0, #0
   147e4:	beq	147b8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   147e8:	ldr	r3, [r4, #120]	; 0x78
   147ec:	mov	r2, r7
   147f0:	str	r3, [r5, #8]
   147f4:	add	r3, r7, r3
   147f8:	str	r3, [r4, #120]	; 0x78
   147fc:	mov	r1, fp
   14800:	bl	11f9c <memcpy@plt>
   14804:	b	147b4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14808:	andeq	r6, r1, r2, lsr #22
   1480c:	andeq	r0, r0, r6, asr r1
   14810:			; <UNDEFINED> instruction: 0x00016dbc
   14814:	andeq	r7, r1, pc, lsr #32

00014818 <flatcc_builder_create_table@@Base>:
   14818:	push	{r4, r5, r6, r7, lr}
   1481c:	sub	sp, sp, #84	; 0x54
   14820:	ldr	r4, [sp, #108]	; 0x6c
   14824:	ldr	lr, [sp, #112]	; 0x70
   14828:	cmp	r4, #0
   1482c:	bge	14844 <flatcc_builder_create_table@@Base+0x2c>
   14830:	ldr	r3, [pc, #268]	; 14944 <flatcc_builder_create_table@@Base+0x12c>
   14834:	ldr	r2, [pc, #268]	; 14948 <flatcc_builder_create_table@@Base+0x130>
   14838:	ldr	r1, [pc, #268]	; 1494c <flatcc_builder_create_table@@Base+0x134>
   1483c:	ldr	r0, [pc, #268]	; 14950 <flatcc_builder_create_table@@Base+0x138>
   14840:	bl	1202c <__assert_fail@plt>
   14844:	tst	lr, #1
   14848:	ldreq	r3, [pc, #244]	; 14944 <flatcc_builder_create_table@@Base+0x12c>
   1484c:	ldreq	r2, [pc, #256]	; 14954 <flatcc_builder_create_table@@Base+0x13c>
   14850:	ldreq	r1, [pc, #244]	; 1494c <flatcc_builder_create_table@@Base+0x134>
   14854:	ldreq	r0, [pc, #252]	; 14958 <flatcc_builder_create_table@@Base+0x140>
   14858:	beq	14840 <flatcc_builder_create_table@@Base+0x28>
   1485c:	ldrh	ip, [r0, #128]	; 0x80
   14860:	cmp	r3, #4
   14864:	movcc	r3, #4
   14868:	ldr	r6, [r0, #136]	; 0x88
   1486c:	cmp	ip, r3
   14870:	mvn	r5, #3
   14874:	sub	ip, r6, r2
   14878:	strhcc	r3, [r0, #128]	; 0x80
   1487c:	sub	r3, r3, #1
   14880:	and	r3, r3, ip
   14884:	sub	ip, r5, r2
   14888:	add	ip, ip, r6
   1488c:	sub	ip, ip, r3
   14890:	sub	lr, lr, #1
   14894:	sub	lr, ip, lr
   14898:	str	lr, [sp, #4]
   1489c:	ldr	lr, [sp, #104]	; 0x68
   148a0:	sub	ip, r5, ip
   148a4:	add	r4, lr, r4, lsl #1
   148a8:	cmp	r4, lr
   148ac:	bne	1492c <flatcc_builder_create_table@@Base+0x114>
   148b0:	mov	ip, #4
   148b4:	cmp	r2, #0
   148b8:	str	ip, [sp, #8]
   148bc:	add	lr, sp, ip
   148c0:	str	ip, [sp, #20]
   148c4:	mov	ip, #1
   148c8:	str	ip, [sp, #12]
   148cc:	strne	r2, [sp, #28]
   148d0:	addne	ip, r2, #4
   148d4:	movne	r2, #2
   148d8:	strne	ip, [sp, #8]
   148dc:	strne	r1, [sp, #24]
   148e0:	strne	r2, [sp, #12]
   148e4:	cmp	r3, #0
   148e8:	str	lr, [sp, #16]
   148ec:	beq	1491c <flatcc_builder_create_table@@Base+0x104>
   148f0:	ldr	r2, [sp, #8]
   148f4:	add	r1, sp, #80	; 0x50
   148f8:	add	r2, r2, r3
   148fc:	str	r2, [sp, #8]
   14900:	ldr	r2, [sp, #12]
   14904:	ldr	ip, [pc, #80]	; 1495c <flatcc_builder_create_table@@Base+0x144>
   14908:	add	r2, r2, #1
   1490c:	str	r2, [sp, #12]
   14910:	add	r1, r1, r2, lsl #3
   14914:	str	ip, [r1, #-72]	; 0xffffffb8
   14918:	str	r3, [r1, #-68]	; 0xffffffbc
   1491c:	add	r1, sp, #8
   14920:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   14924:	add	sp, sp, #84	; 0x54
   14928:	pop	{r4, r5, r6, r7, pc}
   1492c:	ldrh	r5, [lr], #2
   14930:	sub	r7, ip, r5
   14934:	ldr	r6, [r1, r5]
   14938:	add	r6, r6, r7
   1493c:	str	r6, [r1, r5]
   14940:	b	148a8 <flatcc_builder_create_table@@Base+0x90>
   14944:	andeq	r6, r1, fp, lsr #22
   14948:	ldrdeq	r0, [r0], -r5
   1494c:			; <UNDEFINED> instruction: 0x00016dbc
   14950:	andeq	r7, r1, lr, lsr r0
   14954:	ldrdeq	r0, [r0], -fp
   14958:	andeq	r7, r1, r0, asr r0
   1495c:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00014960 <flatcc_builder_check_required_field@@Base>:
   14960:	ldr	r3, [r0, #32]
   14964:	ldrh	r3, [r3, #14]
   14968:	cmp	r3, #3
   1496c:	beq	14988 <flatcc_builder_check_required_field@@Base+0x28>
   14970:	push	{r4, lr}
   14974:	ldr	r3, [pc, #52]	; 149b0 <flatcc_builder_check_required_field@@Base+0x50>
   14978:	ldr	r2, [pc, #52]	; 149b4 <flatcc_builder_check_required_field@@Base+0x54>
   1497c:	ldr	r1, [pc, #52]	; 149b8 <flatcc_builder_check_required_field@@Base+0x58>
   14980:	ldr	r0, [pc, #52]	; 149bc <flatcc_builder_check_required_field@@Base+0x5c>
   14984:	bl	1202c <__assert_fail@plt>
   14988:	ldrh	r3, [r0, #8]
   1498c:	cmp	r3, r1
   14990:	movls	r0, #0
   14994:	bls	149ac <flatcc_builder_check_required_field@@Base+0x4c>
   14998:	ldr	r3, [r0, #4]
   1499c:	lsl	r1, r1, #1
   149a0:	ldrh	r0, [r3, r1]
   149a4:	adds	r0, r0, #0
   149a8:	movne	r0, #1
   149ac:	bx	lr
   149b0:	andeq	r6, r1, r7, asr #22
   149b4:	strdeq	r0, [r0], -r8
   149b8:			; <UNDEFINED> instruction: 0x00016dbc
   149bc:	andeq	r7, r1, fp, asr r0

000149c0 <flatcc_builder_check_union_field@@Base>:
   149c0:	ldr	r3, [r0, #32]
   149c4:	ldrh	r3, [r3, #14]
   149c8:	cmp	r3, #3
   149cc:	beq	149e8 <flatcc_builder_check_union_field@@Base+0x28>
   149d0:	push	{r4, lr}
   149d4:	ldr	r3, [pc, #112]	; 14a4c <flatcc_builder_check_union_field@@Base+0x8c>
   149d8:	ldr	r2, [pc, #112]	; 14a50 <flatcc_builder_check_union_field@@Base+0x90>
   149dc:	ldr	r1, [pc, #112]	; 14a54 <flatcc_builder_check_union_field@@Base+0x94>
   149e0:	ldr	r0, [pc, #112]	; 14a58 <flatcc_builder_check_union_field@@Base+0x98>
   149e4:	bl	1202c <__assert_fail@plt>
   149e8:	cmp	r1, #0
   149ec:	beq	14a44 <flatcc_builder_check_union_field@@Base+0x84>
   149f0:	ldrh	r3, [r0, #8]
   149f4:	cmp	r3, r1
   149f8:	bls	14a44 <flatcc_builder_check_union_field@@Base+0x84>
   149fc:	sub	r1, r1, #-2147483647	; 0x80000001
   14a00:	ldr	r3, [r0, #4]
   14a04:	lsl	r1, r1, #1
   14a08:	ldrh	r2, [r3, r1]!
   14a0c:	cmp	r2, #0
   14a10:	ldrheq	r0, [r3, #2]
   14a14:	beq	14a38 <flatcc_builder_check_union_field@@Base+0x78>
   14a18:	ldr	r1, [r0, #16]
   14a1c:	ldrh	r0, [r3, #2]
   14a20:	ldrb	r2, [r1, r2]
   14a24:	cmp	r2, #0
   14a28:	beq	14a38 <flatcc_builder_check_union_field@@Base+0x78>
   14a2c:	adds	r0, r0, #0
   14a30:	movne	r0, #1
   14a34:	bx	lr
   14a38:	clz	r0, r0
   14a3c:	lsr	r0, r0, #5
   14a40:	b	14a34 <flatcc_builder_check_union_field@@Base+0x74>
   14a44:	mov	r0, #0
   14a48:	b	14a34 <flatcc_builder_check_union_field@@Base+0x74>
   14a4c:	andeq	r6, r1, fp, ror #22
   14a50:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14a54:			; <UNDEFINED> instruction: 0x00016dbc
   14a58:	andeq	r7, r1, fp, asr r0

00014a5c <flatcc_builder_check_required@@Base>:
   14a5c:	ldr	r3, [r0, #32]
   14a60:	push	{r4, lr}
   14a64:	ldrh	r3, [r3, #14]
   14a68:	cmp	r3, #3
   14a6c:	beq	14a84 <flatcc_builder_check_required@@Base+0x28>
   14a70:	ldr	r3, [pc, #84]	; 14acc <flatcc_builder_check_required@@Base+0x70>
   14a74:	ldr	r2, [pc, #84]	; 14ad0 <flatcc_builder_check_required@@Base+0x74>
   14a78:	ldr	r1, [pc, #84]	; 14ad4 <flatcc_builder_check_required@@Base+0x78>
   14a7c:	ldr	r0, [pc, #84]	; 14ad8 <flatcc_builder_check_required@@Base+0x7c>
   14a80:	bl	1202c <__assert_fail@plt>
   14a84:	ldrh	r3, [r0, #8]
   14a88:	cmp	r3, r2
   14a8c:	subge	r1, r1, #2
   14a90:	movge	ip, #0
   14a94:	bge	14abc <flatcc_builder_check_required@@Base+0x60>
   14a98:	mov	r0, #0
   14a9c:	pop	{r4, pc}
   14aa0:	ldrh	r3, [r1, #2]!
   14aa4:	ldr	lr, [r0, #4]
   14aa8:	lsl	r3, r3, #1
   14aac:	ldrh	r3, [lr, r3]
   14ab0:	cmp	r3, #0
   14ab4:	beq	14a98 <flatcc_builder_check_required@@Base+0x3c>
   14ab8:	add	ip, ip, #1
   14abc:	cmp	ip, r2
   14ac0:	blt	14aa0 <flatcc_builder_check_required@@Base+0x44>
   14ac4:	mov	r0, #1
   14ac8:	pop	{r4, pc}
   14acc:	andeq	r6, r1, ip, lsl #23
   14ad0:	andeq	r0, r0, r1, lsl r5
   14ad4:			; <UNDEFINED> instruction: 0x00016dbc
   14ad8:	andeq	r7, r1, fp, asr r0

00014adc <flatcc_builder_end_table@@Base>:
   14adc:	ldr	r3, [r0, #32]
   14ae0:	push	{r4, r5, r6, r7, lr}
   14ae4:	sub	sp, sp, #20
   14ae8:	ldrh	r3, [r3, #14]
   14aec:	cmp	r3, #3
   14af0:	beq	14b08 <flatcc_builder_end_table@@Base+0x2c>
   14af4:	ldr	r3, [pc, #260]	; 14c00 <flatcc_builder_end_table@@Base+0x124>
   14af8:	ldr	r2, [pc, #260]	; 14c04 <flatcc_builder_end_table@@Base+0x128>
   14afc:	ldr	r1, [pc, #260]	; 14c08 <flatcc_builder_end_table@@Base+0x12c>
   14b00:	ldr	r0, [pc, #260]	; 14c0c <flatcc_builder_end_table@@Base+0x130>
   14b04:	bl	1202c <__assert_fail@plt>
   14b08:	ldrh	r5, [r0, #8]
   14b0c:	ldr	r3, [r0, #20]
   14b10:	ldr	r1, [r0, #4]
   14b14:	add	r5, r5, #2
   14b18:	add	r3, r3, #4
   14b1c:	lsl	r5, r5, #1
   14b20:	uxth	r2, r3
   14b24:	uxth	r5, r5
   14b28:	ldr	r3, [r0, #12]
   14b2c:	strh	r2, [r1, #-2]
   14b30:	strh	r5, [r1, #-4]
   14b34:	sub	r6, r1, #4
   14b38:	ldr	r1, [pc, #208]	; 14c10 <flatcc_builder_end_table@@Base+0x134>
   14b3c:	eor	r3, r3, r5
   14b40:	mov	r4, r0
   14b44:	mul	r3, r1, r3
   14b48:	eor	r3, r3, r2
   14b4c:	mov	r2, r5
   14b50:	mul	r3, r1, r3
   14b54:	mov	r1, r6
   14b58:	str	r3, [r0, #12]
   14b5c:	bl	145a0 <flatcc_builder_create_cached_vtable@@Base>
   14b60:	subs	r7, r0, #0
   14b64:	beq	14bf4 <flatcc_builder_end_table@@Base+0x118>
   14b68:	mov	r2, r5
   14b6c:	mov	r1, #0
   14b70:	mov	r0, r6
   14b74:	bl	12008 <memset@plt>
   14b78:	ldr	r3, [r4, #32]
   14b7c:	ldr	r1, [r4, #76]	; 0x4c
   14b80:	mov	r0, r4
   14b84:	ldr	r3, [r3, #20]
   14b88:	add	r1, r1, r3
   14b8c:	ldrh	r3, [r4, #130]	; 0x82
   14b90:	str	r7, [sp, #8]
   14b94:	ldr	r2, [r4]
   14b98:	sub	r2, r2, r1
   14b9c:	asr	r2, r2, #1
   14ba0:	stm	sp, {r1, r2}
   14ba4:	ldr	r2, [r4, #20]
   14ba8:	ldr	r1, [r4, #16]
   14bac:	bl	14818 <flatcc_builder_create_table@@Base>
   14bb0:	subs	r7, r0, #0
   14bb4:	beq	14bf4 <flatcc_builder_end_table@@Base+0x118>
   14bb8:	ldr	r3, [r4, #32]
   14bbc:	mov	r0, r4
   14bc0:	ldr	r2, [r3, #24]
   14bc4:	str	r2, [r4, #12]
   14bc8:	ldrh	r2, [r3, #28]
   14bcc:	strh	r2, [r4, #8]
   14bd0:	ldr	r2, [r4, #52]	; 0x34
   14bd4:	ldr	r1, [r3, #16]
   14bd8:	add	r2, r2, r1
   14bdc:	str	r2, [r4, #4]
   14be0:	ldr	r2, [r4, #76]	; 0x4c
   14be4:	ldr	r3, [r3, #20]
   14be8:	add	r3, r2, r3
   14bec:	str	r3, [r4]
   14bf0:	bl	12db4 <access_monster_buffer@@Base+0x424>
   14bf4:	mov	r0, r7
   14bf8:	add	sp, sp, #20
   14bfc:	pop	{r4, r5, r6, r7, pc}
   14c00:	andeq	r6, r1, sl, lsr #23
   14c04:	andeq	r0, r0, r5, lsr #10
   14c08:			; <UNDEFINED> instruction: 0x00016dbc
   14c0c:	andeq	r7, r1, fp, asr r0
   14c10:			; <UNDEFINED> instruction: 0x9e3779b1

00014c14 <flatcc_builder_create_vector@@Base>:
   14c14:	push	{lr}		; (str lr, [sp, #-4]!)
   14c18:	sub	sp, sp, #84	; 0x54
   14c1c:	ldr	lr, [sp, #92]	; 0x5c
   14c20:	ldrh	ip, [sp, #88]	; 0x58
   14c24:	cmp	r2, lr
   14c28:	bls	14c40 <flatcc_builder_create_vector@@Base+0x2c>
   14c2c:	ldr	r3, [pc, #180]	; 14ce8 <flatcc_builder_create_vector@@Base+0xd4>
   14c30:	ldr	r2, [pc, #180]	; 14cec <flatcc_builder_create_vector@@Base+0xd8>
   14c34:	ldr	r1, [pc, #180]	; 14cf0 <flatcc_builder_create_vector@@Base+0xdc>
   14c38:	ldr	r0, [pc, #180]	; 14cf4 <flatcc_builder_create_vector@@Base+0xe0>
   14c3c:	bl	1202c <__assert_fail@plt>
   14c40:	ldrh	lr, [r0, #128]	; 0x80
   14c44:	mul	r3, r3, r2
   14c48:	cmp	ip, #4
   14c4c:	movcc	ip, #4
   14c50:	str	r2, [sp, #4]
   14c54:	ldr	r2, [r0, #136]	; 0x88
   14c58:	cmp	lr, ip
   14c5c:	sub	r2, r2, r3
   14c60:	strhcc	ip, [r0, #128]	; 0x80
   14c64:	sub	ip, ip, #1
   14c68:	and	ip, ip, r2
   14c6c:	mov	r2, #4
   14c70:	cmp	r3, #0
   14c74:	str	r2, [sp, #8]
   14c78:	add	lr, sp, r2
   14c7c:	str	r2, [sp, #20]
   14c80:	mov	r2, #1
   14c84:	str	r2, [sp, #12]
   14c88:	strne	r3, [sp, #28]
   14c8c:	addne	r2, r3, #4
   14c90:	movne	r3, #2
   14c94:	strne	r2, [sp, #8]
   14c98:	strne	r1, [sp, #24]
   14c9c:	strne	r3, [sp, #12]
   14ca0:	cmp	ip, #0
   14ca4:	str	lr, [sp, #16]
   14ca8:	beq	14cd8 <flatcc_builder_create_vector@@Base+0xc4>
   14cac:	ldr	r3, [sp, #8]
   14cb0:	add	r2, sp, #80	; 0x50
   14cb4:	add	r3, r3, ip
   14cb8:	str	r3, [sp, #8]
   14cbc:	ldr	r3, [sp, #12]
   14cc0:	ldr	r1, [pc, #48]	; 14cf8 <flatcc_builder_create_vector@@Base+0xe4>
   14cc4:	add	r3, r3, #1
   14cc8:	str	r3, [sp, #12]
   14ccc:	add	r2, r2, r3, lsl #3
   14cd0:	str	r1, [r2, #-72]	; 0xffffffb8
   14cd4:	str	ip, [r2, #-68]	; 0xffffffbc
   14cd8:	add	r1, sp, #8
   14cdc:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   14ce0:	add	sp, sp, #84	; 0x54
   14ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ce8:	andeq	r6, r1, r3, asr #23
   14cec:	andeq	r0, r0, r5, asr r5
   14cf0:			; <UNDEFINED> instruction: 0x00016dbc
   14cf4:	andeq	r7, r1, r6, lsl #1
   14cf8:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00014cfc <flatcc_builder_end_vector@@Base>:
   14cfc:	push	{r0, r1, r2, r4, r5, lr}
   14d00:	ldr	r2, [r0, #32]
   14d04:	ldrh	r3, [r2, #14]
   14d08:	cmp	r3, #4
   14d0c:	beq	14d24 <flatcc_builder_end_vector@@Base+0x28>
   14d10:	ldr	r3, [pc, #76]	; 14d64 <flatcc_builder_end_vector@@Base+0x68>
   14d14:	ldr	r2, [pc, #76]	; 14d68 <flatcc_builder_end_vector@@Base+0x6c>
   14d18:	ldr	r1, [pc, #76]	; 14d6c <flatcc_builder_end_vector@@Base+0x70>
   14d1c:	ldr	r0, [pc, #76]	; 14d70 <flatcc_builder_end_vector@@Base+0x74>
   14d20:	bl	1202c <__assert_fail@plt>
   14d24:	ldr	r3, [r2, #24]
   14d28:	mov	r4, r0
   14d2c:	str	r3, [sp, #4]
   14d30:	ldrh	r3, [r0, #130]	; 0x82
   14d34:	str	r3, [sp]
   14d38:	ldr	r3, [r2, #16]
   14d3c:	ldr	r1, [r0, #16]
   14d40:	ldr	r2, [r2, #20]
   14d44:	bl	14c14 <flatcc_builder_create_vector@@Base>
   14d48:	subs	r5, r0, #0
   14d4c:	beq	14d58 <flatcc_builder_end_vector@@Base+0x5c>
   14d50:	mov	r0, r4
   14d54:	bl	12db4 <access_monster_buffer@@Base+0x424>
   14d58:	mov	r0, r5
   14d5c:	add	sp, sp, #12
   14d60:	pop	{r4, r5, pc}
   14d64:	andeq	r6, r1, r0, ror #23
   14d68:	andeq	r0, r0, r8, ror r5
   14d6c:			; <UNDEFINED> instruction: 0x00016dbc
   14d70:	andeq	r6, r1, r6, ror #29

00014d74 <flatcc_builder_vector_count@@Base>:
   14d74:	ldr	r3, [r0, #32]
   14d78:	ldr	r0, [r3, #20]
   14d7c:	bx	lr

00014d80 <flatcc_builder_vector_edit@@Base>:
   14d80:	ldr	r0, [r0, #16]
   14d84:	bx	lr

00014d88 <flatcc_builder_create_offset_vector_direct@@Base>:
   14d88:	cmn	r2, #-1073741823	; 0xc0000001
   14d8c:	bhi	14d98 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   14d90:	mov	r3, #0
   14d94:	b	1338c <flatcc_builder_default_alloc@@Base+0x4cc>
   14d98:	mov	r0, #0
   14d9c:	bx	lr

00014da0 <flatcc_builder_end_offset_vector@@Base>:
   14da0:	ldr	r3, [r0, #32]
   14da4:	push	{r4, r5, r6, lr}
   14da8:	ldrh	r2, [r3, #14]
   14dac:	cmp	r2, #5
   14db0:	beq	14dc8 <flatcc_builder_end_offset_vector@@Base+0x28>
   14db4:	ldr	r3, [pc, #52]	; 14df0 <flatcc_builder_end_offset_vector@@Base+0x50>
   14db8:	ldr	r2, [pc, #52]	; 14df4 <flatcc_builder_end_offset_vector@@Base+0x54>
   14dbc:	ldr	r1, [pc, #52]	; 14df8 <flatcc_builder_end_offset_vector@@Base+0x58>
   14dc0:	ldr	r0, [pc, #52]	; 14dfc <flatcc_builder_end_offset_vector@@Base+0x5c>
   14dc4:	bl	1202c <__assert_fail@plt>
   14dc8:	ldr	r2, [r3, #20]
   14dcc:	ldr	r1, [r0, #16]
   14dd0:	mov	r4, r0
   14dd4:	bl	14d88 <flatcc_builder_create_offset_vector_direct@@Base>
   14dd8:	subs	r5, r0, #0
   14ddc:	beq	14de8 <flatcc_builder_end_offset_vector@@Base+0x48>
   14de0:	mov	r0, r4
   14de4:	bl	12db4 <access_monster_buffer@@Base+0x424>
   14de8:	mov	r0, r5
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	strdeq	r6, [r1], -sl
   14df4:	andeq	r0, r0, r8, asr #11
   14df8:			; <UNDEFINED> instruction: 0x00016dbc
   14dfc:	andeq	r6, r1, pc, asr #30

00014e00 <flatcc_builder_create_offset_vector@@Base>:
   14e00:	push	{r4, r5, r6, lr}
   14e04:	mov	r4, r0
   14e08:	mov	r6, r1
   14e0c:	mov	r5, r2
   14e10:	bl	143dc <flatcc_builder_start_offset_vector@@Base>
   14e14:	cmp	r0, #0
   14e18:	bne	14e48 <flatcc_builder_create_offset_vector@@Base+0x48>
   14e1c:	mov	r1, r5
   14e20:	mov	r0, r4
   14e24:	bl	13fd8 <flatcc_builder_extend_offset_vector@@Base>
   14e28:	cmp	r0, #0
   14e2c:	beq	14e48 <flatcc_builder_create_offset_vector@@Base+0x48>
   14e30:	lsl	r2, r5, #2
   14e34:	mov	r1, r6
   14e38:	bl	11f9c <memcpy@plt>
   14e3c:	mov	r0, r4
   14e40:	pop	{r4, r5, r6, lr}
   14e44:	b	14da0 <flatcc_builder_end_offset_vector@@Base>
   14e48:	mov	r0, #0
   14e4c:	pop	{r4, r5, r6, pc}

00014e50 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   14e50:	ldr	r2, [r0, #32]
   14e54:	mov	r3, r1
   14e58:	push	{r4, r5, r6, lr}
   14e5c:	ldrh	r1, [r2, #14]
   14e60:	cmp	r1, #5
   14e64:	beq	14e7c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   14e68:	ldr	r3, [pc, #64]	; 14eb0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   14e6c:	ldr	r2, [pc, #64]	; 14eb4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   14e70:	ldr	r1, [pc, #64]	; 14eb8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   14e74:	ldr	r0, [pc, #64]	; 14ebc <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   14e78:	bl	1202c <__assert_fail@plt>
   14e7c:	ldr	r2, [r2, #20]
   14e80:	cmn	r2, #-1073741823	; 0xc0000001
   14e84:	movhi	r5, #0
   14e88:	bhi	14ea8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14e8c:	ldr	r1, [r0, #16]
   14e90:	mov	r4, r0
   14e94:	bl	1338c <flatcc_builder_default_alloc@@Base+0x4cc>
   14e98:	subs	r5, r0, #0
   14e9c:	beq	14ea8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14ea0:	mov	r0, r4
   14ea4:	bl	12db4 <access_monster_buffer@@Base+0x424>
   14ea8:	mov	r0, r5
   14eac:	pop	{r4, r5, r6, pc}
   14eb0:	andeq	r6, r1, fp, lsl ip
   14eb4:	ldrdeq	r0, [r0], -r5
   14eb8:			; <UNDEFINED> instruction: 0x00016dbc
   14ebc:	andeq	r6, r1, pc, asr #30

00014ec0 <flatcc_builder_offset_vector_edit@@Base>:
   14ec0:	ldr	r0, [r0, #16]
   14ec4:	bx	lr

00014ec8 <flatcc_builder_offset_vector_count@@Base>:
   14ec8:	ldr	r3, [r0, #32]
   14ecc:	ldr	r0, [r3, #20]
   14ed0:	bx	lr

00014ed4 <flatcc_builder_create_union_vector_direct@@Base>:
   14ed4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14ed8:	mov	r4, r0
   14edc:	ldr	r5, [sp, #32]
   14ee0:	cmn	r5, #-1073741823	; 0xc0000001
   14ee4:	bls	14f00 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   14ee8:	mov	r3, #0
   14eec:	str	r3, [r4]
   14ef0:	str	r3, [r4, #4]
   14ef4:	mov	r0, r4
   14ef8:	add	sp, sp, #8
   14efc:	pop	{r4, r5, r6, r7, r8, pc}
   14f00:	mov	r7, r1
   14f04:	mov	r8, r2
   14f08:	mov	r1, r3
   14f0c:	mov	r0, r7
   14f10:	mov	r3, r2
   14f14:	mov	r2, r5
   14f18:	bl	1338c <flatcc_builder_default_alloc@@Base+0x4cc>
   14f1c:	subs	r6, r0, #0
   14f20:	beq	14ee8 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   14f24:	mvn	r3, #0
   14f28:	str	r3, [sp, #4]
   14f2c:	mov	r3, #1
   14f30:	str	r3, [sp]
   14f34:	mov	r2, r5
   14f38:	mov	r1, r8
   14f3c:	mov	r0, r7
   14f40:	bl	14c14 <flatcc_builder_create_vector@@Base>
   14f44:	stm	r4, {r0, r6}
   14f48:	b	14ef4 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00014f4c <flatcc_builder_create_union_vector@@Base>:
   14f4c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14f50:	mov	r7, r0
   14f54:	mov	r0, r1
   14f58:	mov	r5, r1
   14f5c:	mov	r6, r2
   14f60:	mov	r8, r3
   14f64:	bl	143dc <flatcc_builder_start_offset_vector@@Base>
   14f68:	subs	r4, r0, #0
   14f6c:	beq	14f88 <flatcc_builder_create_union_vector@@Base+0x3c>
   14f70:	mov	r3, #0
   14f74:	str	r3, [r7]
   14f78:	str	r3, [r7, #4]
   14f7c:	mov	r0, r7
   14f80:	add	sp, sp, #16
   14f84:	pop	{r4, r5, r6, r7, r8, pc}
   14f88:	mov	r1, r8
   14f8c:	mov	r0, r5
   14f90:	bl	13fd8 <flatcc_builder_extend_offset_vector@@Base>
   14f94:	cmp	r0, #0
   14f98:	beq	14f70 <flatcc_builder_create_union_vector@@Base+0x24>
   14f9c:	mov	r1, r8
   14fa0:	mov	r0, r5
   14fa4:	bl	12d6c <access_monster_buffer@@Base+0x3dc>
   14fa8:	subs	r2, r0, #0
   14fac:	movne	ip, r6
   14fb0:	ldrne	r3, [r5, #16]
   14fb4:	movne	r1, r4
   14fb8:	beq	14f70 <flatcc_builder_create_union_vector@@Base+0x24>
   14fbc:	cmp	r1, r8
   14fc0:	add	ip, ip, #8
   14fc4:	bne	14ff4 <flatcc_builder_create_union_vector@@Base+0xa8>
   14fc8:	str	r1, [sp]
   14fcc:	add	r0, sp, #8
   14fd0:	mov	r1, r5
   14fd4:	bl	14ed4 <flatcc_builder_create_union_vector_direct@@Base>
   14fd8:	ldr	r6, [sp, #8]
   14fdc:	ldr	r4, [sp, #12]
   14fe0:	mov	r0, r5
   14fe4:	bl	12db4 <access_monster_buffer@@Base+0x424>
   14fe8:	str	r6, [r7]
   14fec:	str	r4, [r7, #4]
   14ff0:	b	14f7c <flatcc_builder_create_union_vector@@Base+0x30>
   14ff4:	ldrb	r0, [ip, #-8]
   14ff8:	strb	r0, [r2, r1]
   14ffc:	ldr	r0, [ip, #-4]
   15000:	str	r0, [r3, r1, lsl #2]
   15004:	add	r1, r1, #1
   15008:	b	14fbc <flatcc_builder_create_union_vector@@Base+0x70>

0001500c <flatcc_builder_start_union_vector@@Base>:
   1500c:	push	{r4, r5, r6, lr}
   15010:	mov	r1, #4
   15014:	mov	r5, r0
   15018:	bl	13028 <flatcc_builder_default_alloc@@Base+0x168>
   1501c:	subs	r4, r0, #0
   15020:	mvnne	r4, #0
   15024:	bne	1504c <flatcc_builder_start_union_vector@@Base+0x40>
   15028:	ldr	r3, [r5, #32]
   1502c:	mov	r2, #8
   15030:	mvn	r1, #3
   15034:	str	r2, [r3, #16]
   15038:	mov	r2, #7
   1503c:	str	r4, [r3, #20]
   15040:	strh	r2, [r3, #14]
   15044:	mov	r0, r5
   15048:	bl	12cec <access_monster_buffer@@Base+0x35c>
   1504c:	mov	r0, r4
   15050:	pop	{r4, r5, r6, pc}

00015054 <flatcc_builder_end_union_vector@@Base>:
   15054:	ldr	r3, [r1, #32]
   15058:	push	{r4, r5, r6, r7, lr}
   1505c:	sub	sp, sp, #20
   15060:	ldrh	r2, [r3, #14]
   15064:	cmp	r2, #7
   15068:	beq	15080 <flatcc_builder_end_union_vector@@Base+0x2c>
   1506c:	ldr	r3, [pc, #156]	; 15110 <flatcc_builder_end_union_vector@@Base+0xbc>
   15070:	ldr	r2, [pc, #156]	; 15114 <flatcc_builder_end_union_vector@@Base+0xc0>
   15074:	ldr	r1, [pc, #156]	; 15118 <flatcc_builder_end_union_vector@@Base+0xc4>
   15078:	ldr	r0, [pc, #156]	; 1511c <flatcc_builder_end_union_vector@@Base+0xc8>
   1507c:	bl	1202c <__assert_fail@plt>
   15080:	ldr	r7, [r3, #20]
   15084:	mov	r5, r1
   15088:	mov	r4, r0
   1508c:	lsl	r6, r7, #2
   15090:	add	r1, r6, r7
   15094:	mov	r0, r5
   15098:	bl	12d6c <access_monster_buffer@@Base+0x3dc>
   1509c:	subs	r3, r0, #0
   150a0:	streq	r3, [r4]
   150a4:	streq	r3, [r4, #4]
   150a8:	addne	r2, r3, r6
   150ac:	ldrne	r0, [r5, #16]
   150b0:	movne	r1, #0
   150b4:	bne	150d8 <flatcc_builder_end_union_vector@@Base+0x84>
   150b8:	mov	r0, r4
   150bc:	add	sp, sp, #20
   150c0:	pop	{r4, r5, r6, r7, pc}
   150c4:	ldrb	ip, [r0, #-8]
   150c8:	strb	ip, [r2, r1]
   150cc:	ldr	ip, [r0, #-4]
   150d0:	str	ip, [r3, r1, lsl #2]
   150d4:	add	r1, r1, #1
   150d8:	cmp	r1, r7
   150dc:	add	r0, r0, #8
   150e0:	bne	150c4 <flatcc_builder_end_union_vector@@Base+0x70>
   150e4:	str	r1, [sp]
   150e8:	add	r0, sp, #8
   150ec:	mov	r1, r5
   150f0:	bl	14ed4 <flatcc_builder_create_union_vector_direct@@Base>
   150f4:	ldr	r7, [sp, #8]
   150f8:	ldr	r6, [sp, #12]
   150fc:	mov	r0, r5
   15100:	bl	12db4 <access_monster_buffer@@Base+0x424>
   15104:	str	r7, [r4]
   15108:	str	r6, [r4, #4]
   1510c:	b	150b8 <flatcc_builder_end_union_vector@@Base+0x64>
   15110:	andeq	r6, r1, r7, asr #24
   15114:	andeq	r0, r0, r1, asr r6
   15118:			; <UNDEFINED> instruction: 0x00016dbc
   1511c:	muleq	r1, r9, r0

00015120 <flatcc_builder_union_vector_edit@@Base>:
   15120:	ldr	r0, [r0, #16]
   15124:	bx	lr

00015128 <flatcc_builder_union_vector_count@@Base>:
   15128:	ldr	r3, [r0, #32]
   1512c:	ldr	r0, [r3, #20]
   15130:	bx	lr

00015134 <flatcc_builder_extend_union_vector@@Base>:
   15134:	push	{r4, r5, r6, lr}
   15138:	mvn	r2, #-536870912	; 0xe0000000
   1513c:	mov	r4, r0
   15140:	ldr	r0, [r0, #32]
   15144:	mov	r5, r1
   15148:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   1514c:	cmp	r0, #0
   15150:	bne	15164 <flatcc_builder_extend_union_vector@@Base+0x30>
   15154:	lsl	r1, r5, #3
   15158:	mov	r0, r4
   1515c:	pop	{r4, r5, r6, lr}
   15160:	b	12d6c <access_monster_buffer@@Base+0x3dc>
   15164:	mov	r0, #0
   15168:	pop	{r4, r5, r6, pc}

0001516c <flatcc_builder_truncate_union_vector@@Base>:
   1516c:	ldr	r3, [r0, #32]
   15170:	push	{r4, lr}
   15174:	ldrh	r2, [r3, #14]
   15178:	cmp	r2, #7
   1517c:	beq	15194 <flatcc_builder_truncate_union_vector@@Base+0x28>
   15180:	ldr	r3, [pc, #68]	; 151cc <flatcc_builder_truncate_union_vector@@Base+0x60>
   15184:	ldr	r2, [pc, #68]	; 151d0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   15188:	ldr	r1, [pc, #68]	; 151d4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1518c:	ldr	r0, [pc, #68]	; 151d8 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   15190:	bl	1202c <__assert_fail@plt>
   15194:	ldr	r2, [r3, #20]
   15198:	cmp	r2, r1
   1519c:	ldrcc	r3, [pc, #40]	; 151cc <flatcc_builder_truncate_union_vector@@Base+0x60>
   151a0:	ldrcc	r2, [pc, #52]	; 151dc <flatcc_builder_truncate_union_vector@@Base+0x70>
   151a4:	ldrcc	r1, [pc, #40]	; 151d4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   151a8:	ldrcc	r0, [pc, #48]	; 151e0 <flatcc_builder_truncate_union_vector@@Base+0x74>
   151ac:	bcc	15190 <flatcc_builder_truncate_union_vector@@Base+0x24>
   151b0:	sub	r2, r2, r1
   151b4:	str	r2, [r3, #20]
   151b8:	ldr	r3, [r3, #16]
   151bc:	mul	r1, r3, r1
   151c0:	bl	12e20 <access_monster_buffer@@Base+0x490>
   151c4:	mov	r0, #0
   151c8:	pop	{r4, pc}
   151cc:	andeq	r6, r1, r7, ror #24
   151d0:	andeq	r0, r0, r1, lsl #13
   151d4:			; <UNDEFINED> instruction: 0x00016dbc
   151d8:	muleq	r1, r9, r0
   151dc:	andeq	r0, r0, r2, lsl #13
   151e0:	ldrdeq	r6, [r1], -r2

000151e4 <flatcc_builder_union_vector_push@@Base>:
   151e4:	push	{r0, r1, r4, lr}
   151e8:	stm	sp, {r1, r2}
   151ec:	ldr	r2, [r0, #32]
   151f0:	ldrh	r3, [r2, #14]
   151f4:	cmp	r3, #7
   151f8:	beq	15210 <flatcc_builder_union_vector_push@@Base+0x2c>
   151fc:	ldr	r3, [pc, #72]	; 1524c <flatcc_builder_union_vector_push@@Base+0x68>
   15200:	ldr	r2, [pc, #72]	; 15250 <flatcc_builder_union_vector_push@@Base+0x6c>
   15204:	ldr	r1, [pc, #72]	; 15254 <flatcc_builder_union_vector_push@@Base+0x70>
   15208:	ldr	r0, [pc, #72]	; 15258 <flatcc_builder_union_vector_push@@Base+0x74>
   1520c:	bl	1202c <__assert_fail@plt>
   15210:	ldr	r3, [r2, #20]
   15214:	cmn	r3, #-536870911	; 0xe0000001
   15218:	moveq	r3, #0
   1521c:	beq	15240 <flatcc_builder_union_vector_push@@Base+0x5c>
   15220:	add	r3, r3, #1
   15224:	mov	r1, #8
   15228:	str	r3, [r2, #20]
   1522c:	bl	12d6c <access_monster_buffer@@Base+0x3dc>
   15230:	subs	r3, r0, #0
   15234:	movne	r4, sp
   15238:	ldmne	r4, {r0, r1}
   1523c:	stmne	r3, {r0, r1}
   15240:	mov	r0, r3
   15244:	add	sp, sp, #8
   15248:	pop	{r4, pc}
   1524c:	andeq	r6, r1, ip, lsl #25
   15250:	andeq	r0, r0, sp, lsl #13
   15254:			; <UNDEFINED> instruction: 0x00016dbc
   15258:	muleq	r1, r9, r0

0001525c <flatcc_builder_append_union_vector@@Base>:
   1525c:	push	{r4, r5, r6, lr}
   15260:	mov	r4, r0
   15264:	ldr	r0, [r0, #32]
   15268:	ldrh	r3, [r0, #14]
   1526c:	cmp	r3, #7
   15270:	beq	15288 <flatcc_builder_append_union_vector@@Base+0x2c>
   15274:	ldr	r3, [pc, #68]	; 152c0 <flatcc_builder_append_union_vector@@Base+0x64>
   15278:	ldr	r2, [pc, #68]	; 152c4 <flatcc_builder_append_union_vector@@Base+0x68>
   1527c:	ldr	r1, [pc, #68]	; 152c8 <flatcc_builder_append_union_vector@@Base+0x6c>
   15280:	ldr	r0, [pc, #68]	; 152cc <flatcc_builder_append_union_vector@@Base+0x70>
   15284:	bl	1202c <__assert_fail@plt>
   15288:	mov	r5, r2
   1528c:	mov	r6, r1
   15290:	mvn	r2, #-536870912	; 0xe0000000
   15294:	mov	r1, r5
   15298:	bl	13338 <flatcc_builder_default_alloc@@Base+0x478>
   1529c:	cmp	r0, #0
   152a0:	bne	152b8 <flatcc_builder_append_union_vector@@Base+0x5c>
   152a4:	lsl	r2, r5, #3
   152a8:	mov	r1, r6
   152ac:	mov	r0, r4
   152b0:	pop	{r4, r5, r6, lr}
   152b4:	b	12e40 <access_monster_buffer@@Base+0x4b0>
   152b8:	mov	r0, #0
   152bc:	pop	{r4, r5, r6, pc}
   152c0:	andeq	r6, r1, sp, lsr #25
   152c4:	muleq	r0, ip, r6
   152c8:			; <UNDEFINED> instruction: 0x00016dbc
   152cc:	muleq	r1, r9, r0

000152d0 <flatcc_builder_create_string@@Base>:
   152d0:	push	{lr}		; (str lr, [sp, #-4]!)
   152d4:	sub	sp, sp, #84	; 0x54
   152d8:	ldr	r3, [r0, #136]	; 0x88
   152dc:	mov	ip, #4
   152e0:	cmp	r2, #0
   152e4:	str	ip, [sp, #8]
   152e8:	add	lr, sp, ip
   152ec:	str	ip, [sp, #20]
   152f0:	sub	r3, r3, r2
   152f4:	mov	ip, #1
   152f8:	str	ip, [sp, #12]
   152fc:	strne	r2, [sp, #28]
   15300:	addne	ip, r2, #4
   15304:	str	r2, [sp, #4]
   15308:	sub	r3, r3, #1
   1530c:	movne	r2, #2
   15310:	strne	ip, [sp, #8]
   15314:	strne	r2, [sp, #12]
   15318:	and	r3, r3, #3
   1531c:	ldr	r2, [sp, #8]
   15320:	add	r3, r3, #1
   15324:	add	r2, r2, r3
   15328:	str	r2, [sp, #8]
   1532c:	ldr	r2, [sp, #12]
   15330:	strne	r1, [sp, #24]
   15334:	add	r2, r2, #1
   15338:	add	r1, sp, #80	; 0x50
   1533c:	add	r1, r1, r2, lsl #3
   15340:	ldr	ip, [pc, #28]	; 15364 <flatcc_builder_create_string@@Base+0x94>
   15344:	str	lr, [sp, #16]
   15348:	str	r3, [r1, #-68]	; 0xffffffbc
   1534c:	str	ip, [r1, #-72]	; 0xffffffb8
   15350:	add	r1, sp, #8
   15354:	str	r2, [sp, #12]
   15358:	bl	132b8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1535c:	add	sp, sp, #84	; 0x54
   15360:	pop	{pc}		; (ldr pc, [sp], #4)
   15364:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

00015368 <flatcc_builder_create_string_str@@Base>:
   15368:	push	{r4, r5, r6, lr}
   1536c:	mov	r5, r0
   15370:	mov	r0, r1
   15374:	mov	r4, r1
   15378:	bl	11ff0 <strlen@plt>
   1537c:	mov	r1, r4
   15380:	mov	r2, r0
   15384:	mov	r0, r5
   15388:	pop	{r4, r5, r6, lr}
   1538c:	b	152d0 <flatcc_builder_create_string@@Base>

00015390 <flatcc_builder_create_string_strn@@Base>:
   15390:	push	{r4, r5, r6, lr}
   15394:	mov	r4, r1
   15398:	mov	r6, r0
   1539c:	mov	r1, #0
   153a0:	mov	r0, r4
   153a4:	mov	r5, r2
   153a8:	bl	12014 <memchr@plt>
   153ac:	mov	r1, r4
   153b0:	cmp	r0, #0
   153b4:	subne	r5, r0, r4
   153b8:	mov	r2, r5
   153bc:	mov	r0, r6
   153c0:	pop	{r4, r5, r6, lr}
   153c4:	b	152d0 <flatcc_builder_create_string@@Base>

000153c8 <flatcc_builder_end_string@@Base>:
   153c8:	ldr	r3, [r0, #32]
   153cc:	push	{r4, r5, r6, lr}
   153d0:	ldrh	r2, [r3, #14]
   153d4:	cmp	r2, #6
   153d8:	beq	153f0 <flatcc_builder_end_string@@Base+0x28>
   153dc:	ldr	r3, [pc, #80]	; 15434 <flatcc_builder_end_string@@Base+0x6c>
   153e0:	ldr	r2, [pc, #80]	; 15438 <flatcc_builder_end_string@@Base+0x70>
   153e4:	ldr	r1, [pc, #80]	; 1543c <flatcc_builder_end_string@@Base+0x74>
   153e8:	ldr	r0, [pc, #80]	; 15440 <flatcc_builder_end_string@@Base+0x78>
   153ec:	bl	1202c <__assert_fail@plt>
   153f0:	ldr	r2, [r3, #20]
   153f4:	ldr	r3, [r0, #20]
   153f8:	mov	r4, r0
   153fc:	cmp	r2, r3
   15400:	ldrne	r3, [pc, #44]	; 15434 <flatcc_builder_end_string@@Base+0x6c>
   15404:	ldrne	r2, [pc, #56]	; 15444 <flatcc_builder_end_string@@Base+0x7c>
   15408:	ldrne	r1, [pc, #44]	; 1543c <flatcc_builder_end_string@@Base+0x74>
   1540c:	ldrne	r0, [pc, #52]	; 15448 <flatcc_builder_end_string@@Base+0x80>
   15410:	bne	153ec <flatcc_builder_end_string@@Base+0x24>
   15414:	ldr	r1, [r0, #16]
   15418:	bl	152d0 <flatcc_builder_create_string@@Base>
   1541c:	subs	r5, r0, #0
   15420:	beq	1542c <flatcc_builder_end_string@@Base+0x64>
   15424:	mov	r0, r4
   15428:	bl	12db4 <access_monster_buffer@@Base+0x424>
   1542c:	mov	r0, r5
   15430:	pop	{r4, r5, r6, pc}
   15434:	ldrdeq	r6, [r1], -r0
   15438:	andeq	r0, r0, r4, asr #13
   1543c:			; <UNDEFINED> instruction: 0x00016dbc
   15440:	andeq	r6, r1, r2, lsl #31
   15444:	andeq	r0, r0, r5, asr #13
   15448:	andeq	r7, r1, fp, asr #1

0001544c <flatcc_builder_string_edit@@Base>:
   1544c:	ldr	r0, [r0, #16]
   15450:	bx	lr

00015454 <flatcc_builder_string_len@@Base>:
   15454:	ldr	r3, [r0, #32]
   15458:	ldr	r0, [r3, #20]
   1545c:	bx	lr

00015460 <flatcc_builder_table_add@@Base>:
   15460:	push	{r4, r5, r6, r7, r8, lr}
   15464:	mov	r4, r0
   15468:	ldr	r0, [r0, #32]
   1546c:	ldrh	r0, [r0, #14]
   15470:	cmp	r0, #3
   15474:	beq	1548c <flatcc_builder_table_add@@Base+0x2c>
   15478:	ldr	r3, [pc, #232]	; 15568 <flatcc_builder_table_add@@Base+0x108>
   1547c:	ldr	r2, [pc, #232]	; 1556c <flatcc_builder_table_add@@Base+0x10c>
   15480:	ldr	r1, [pc, #232]	; 15570 <flatcc_builder_table_add@@Base+0x110>
   15484:	ldr	r0, [pc, #232]	; 15574 <flatcc_builder_table_add@@Base+0x114>
   15488:	bl	1202c <__assert_fail@plt>
   1548c:	ldr	r0, [pc, #228]	; 15578 <flatcc_builder_table_add@@Base+0x118>
   15490:	cmp	r1, r0
   15494:	ldrhi	r3, [pc, #204]	; 15568 <flatcc_builder_table_add@@Base+0x108>
   15498:	ldrhi	r2, [pc, #220]	; 1557c <flatcc_builder_table_add@@Base+0x11c>
   1549c:	ldrhi	r1, [pc, #204]	; 15570 <flatcc_builder_table_add@@Base+0x110>
   154a0:	ldrhi	r0, [pc, #216]	; 15580 <flatcc_builder_table_add@@Base+0x120>
   154a4:	bhi	15488 <flatcc_builder_table_add@@Base+0x28>
   154a8:	ldrh	r0, [r4, #130]	; 0x82
   154ac:	lsl	r7, r1, #1
   154b0:	cmp	r0, r3
   154b4:	ldr	r0, [r4, #4]
   154b8:	strhcc	r3, [r4, #130]	; 0x82
   154bc:	ldrh	r5, [r0, r7]
   154c0:	cmp	r5, #0
   154c4:	ldrne	r3, [pc, #156]	; 15568 <flatcc_builder_table_add@@Base+0x108>
   154c8:	ldrne	r2, [pc, #180]	; 15584 <flatcc_builder_table_add@@Base+0x124>
   154cc:	ldrne	r1, [pc, #156]	; 15570 <flatcc_builder_table_add@@Base+0x110>
   154d0:	ldrne	r0, [pc, #176]	; 15588 <flatcc_builder_table_add@@Base+0x128>
   154d4:	bne	15488 <flatcc_builder_table_add@@Base+0x28>
   154d8:	ldr	ip, [r4, #12]
   154dc:	ldr	lr, [pc, #168]	; 1558c <flatcc_builder_table_add@@Base+0x12c>
   154e0:	eor	ip, ip, r1
   154e4:	ldr	r6, [r4, #20]
   154e8:	mul	ip, lr, ip
   154ec:	sub	r0, r3, #1
   154f0:	eor	ip, ip, r2
   154f4:	rsb	r3, r3, #0
   154f8:	add	r0, r0, r6
   154fc:	and	r6, r0, r3
   15500:	mul	ip, lr, ip
   15504:	ldr	r3, [r4, #24]
   15508:	uxth	r8, r1
   1550c:	add	r1, r2, r6
   15510:	cmp	r1, r3
   15514:	str	ip, [r4, #12]
   15518:	str	r1, [r4, #20]
   1551c:	bcs	15548 <flatcc_builder_table_add@@Base+0xe8>
   15520:	ldr	r3, [r4, #4]
   15524:	add	r2, r6, #4
   15528:	ldr	r0, [r4, #16]
   1552c:	strh	r2, [r3, r7]
   15530:	ldrh	r3, [r4, #8]
   15534:	add	r0, r0, r6
   15538:	cmp	r3, r8
   1553c:	addls	r1, r8, #1
   15540:	strhls	r1, [r4, #8]
   15544:	pop	{r4, r5, r6, r7, r8, pc}
   15548:	ldr	r2, [pc, #64]	; 15590 <flatcc_builder_table_add@@Base+0x130>
   1554c:	add	r1, r1, #1
   15550:	mov	r0, r4
   15554:	bl	12d1c <access_monster_buffer@@Base+0x38c>
   15558:	cmp	r0, #0
   1555c:	beq	15520 <flatcc_builder_table_add@@Base+0xc0>
   15560:	mov	r0, r5
   15564:	pop	{r4, r5, r6, r7, r8, pc}
   15568:	andeq	r6, r1, sl, ror #25
   1556c:	andeq	r0, r0, sp, ror #13
   15570:			; <UNDEFINED> instruction: 0x00016dbc
   15574:	andeq	r7, r1, fp, asr r0
   15578:	strdeq	r7, [r0], -ip
   1557c:	andeq	r0, r0, lr, ror #13
   15580:	andeq	r7, r1, pc, ror #1
   15584:	strdeq	r0, [r0], -r8
   15588:	andeq	r6, r1, r9, lsr #28
   1558c:			; <UNDEFINED> instruction: 0x9e3779b1
   15590:	strdeq	pc, [r0], -ip

00015594 <flatcc_builder_table_edit@@Base>:
   15594:	ldr	r3, [r0, #32]
   15598:	ldrh	r3, [r3, #14]
   1559c:	cmp	r3, #3
   155a0:	beq	155bc <flatcc_builder_table_edit@@Base+0x28>
   155a4:	push	{r4, lr}
   155a8:	ldr	r3, [pc, #32]	; 155d0 <flatcc_builder_table_edit@@Base+0x3c>
   155ac:	ldr	r2, [pc, #32]	; 155d4 <flatcc_builder_table_edit@@Base+0x40>
   155b0:	ldr	r1, [pc, #32]	; 155d8 <flatcc_builder_table_edit@@Base+0x44>
   155b4:	ldr	r0, [pc, #32]	; 155dc <flatcc_builder_table_edit@@Base+0x48>
   155b8:	bl	1202c <__assert_fail@plt>
   155bc:	ldr	r3, [r0, #20]
   155c0:	ldr	r0, [r0, #16]
   155c4:	sub	r1, r3, r1
   155c8:	add	r0, r0, r1
   155cc:	bx	lr
   155d0:	andeq	r6, r1, r3, lsl #26
   155d4:	andeq	r0, r0, r2, lsl #14
   155d8:			; <UNDEFINED> instruction: 0x00016dbc
   155dc:	andeq	r7, r1, fp, asr r0

000155e0 <flatcc_builder_table_add_copy@@Base>:
   155e0:	push	{r4, r5, r6, lr}
   155e4:	mov	r4, r3
   155e8:	mov	r6, r2
   155ec:	ldrh	r3, [sp, #16]
   155f0:	mov	r2, r4
   155f4:	bl	15460 <flatcc_builder_table_add@@Base>
   155f8:	subs	r5, r0, #0
   155fc:	beq	1560c <flatcc_builder_table_add_copy@@Base+0x2c>
   15600:	mov	r2, r4
   15604:	mov	r1, r6
   15608:	bl	11f9c <memcpy@plt>
   1560c:	mov	r0, r5
   15610:	pop	{r4, r5, r6, pc}

00015614 <flatcc_builder_table_add_offset@@Base>:
   15614:	ldr	r3, [r0, #32]
   15618:	push	{r4, r5, r6, r7, r8, lr}
   1561c:	ldrh	r3, [r3, #14]
   15620:	cmp	r3, #3
   15624:	beq	1563c <flatcc_builder_table_add_offset@@Base+0x28>
   15628:	ldr	r3, [pc, #228]	; 15714 <flatcc_builder_table_add_offset@@Base+0x100>
   1562c:	ldr	r2, [pc, #228]	; 15718 <flatcc_builder_table_add_offset@@Base+0x104>
   15630:	ldr	r1, [pc, #228]	; 1571c <flatcc_builder_table_add_offset@@Base+0x108>
   15634:	ldr	r0, [pc, #228]	; 15720 <flatcc_builder_table_add_offset@@Base+0x10c>
   15638:	bl	1202c <__assert_fail@plt>
   1563c:	ldr	r3, [pc, #224]	; 15724 <flatcc_builder_table_add_offset@@Base+0x110>
   15640:	cmp	r1, r3
   15644:	ldrhi	r3, [pc, #200]	; 15714 <flatcc_builder_table_add_offset@@Base+0x100>
   15648:	ldrhi	r2, [pc, #216]	; 15728 <flatcc_builder_table_add_offset@@Base+0x114>
   1564c:	ldrhi	r1, [pc, #200]	; 1571c <flatcc_builder_table_add_offset@@Base+0x108>
   15650:	ldrhi	r0, [pc, #212]	; 1572c <flatcc_builder_table_add_offset@@Base+0x118>
   15654:	bhi	15638 <flatcc_builder_table_add_offset@@Base+0x24>
   15658:	ldr	r3, [r0, #4]
   1565c:	lsl	r7, r1, #1
   15660:	mov	r4, r0
   15664:	ldrh	r6, [r3, r7]
   15668:	cmp	r6, #0
   1566c:	ldrne	r3, [pc, #160]	; 15714 <flatcc_builder_table_add_offset@@Base+0x100>
   15670:	ldrne	r2, [pc, #184]	; 15730 <flatcc_builder_table_add_offset@@Base+0x11c>
   15674:	ldrne	r1, [pc, #160]	; 1571c <flatcc_builder_table_add_offset@@Base+0x108>
   15678:	ldrne	r0, [pc, #180]	; 15734 <flatcc_builder_table_add_offset@@Base+0x120>
   1567c:	bne	15638 <flatcc_builder_table_add_offset@@Base+0x24>
   15680:	ldr	r3, [r0, #12]
   15684:	ldr	r2, [pc, #172]	; 15738 <flatcc_builder_table_add_offset@@Base+0x124>
   15688:	eor	r3, r3, r1
   1568c:	ldr	r8, [r0, #20]
   15690:	mul	r3, r2, r3
   15694:	add	r8, r8, #3
   15698:	eor	r3, r3, #4
   1569c:	bic	r8, r8, #3
   156a0:	mul	r3, r2, r3
   156a4:	uxth	r5, r1
   156a8:	str	r3, [r0, #12]
   156ac:	ldr	r3, [r0, #24]
   156b0:	add	r1, r8, #4
   156b4:	cmp	r1, r3
   156b8:	str	r1, [r0, #20]
   156bc:	bhi	156fc <flatcc_builder_table_add_offset@@Base+0xe8>
   156c0:	ldr	r3, [r4, #4]
   156c4:	uxth	r2, r8
   156c8:	add	r1, r2, #4
   156cc:	strh	r1, [r3, r7]
   156d0:	ldrh	r3, [r4, #8]
   156d4:	ldr	r0, [r4, #16]
   156d8:	cmp	r3, r5
   156dc:	ldr	r3, [r4]
   156e0:	addls	r1, r5, #1
   156e4:	strhls	r1, [r4, #8]
   156e8:	add	r1, r3, #2
   156ec:	str	r1, [r4]
   156f0:	add	r0, r0, r8
   156f4:	strh	r2, [r3]
   156f8:	pop	{r4, r5, r6, r7, r8, pc}
   156fc:	ldr	r2, [pc, #56]	; 1573c <flatcc_builder_table_add_offset@@Base+0x128>
   15700:	bl	12d1c <access_monster_buffer@@Base+0x38c>
   15704:	cmp	r0, #0
   15708:	beq	156c0 <flatcc_builder_table_add_offset@@Base+0xac>
   1570c:	mov	r0, r6
   15710:	pop	{r4, r5, r6, r7, r8, pc}
   15714:	andeq	r6, r1, sp, lsl sp
   15718:	andeq	r0, r0, r3, lsl r7
   1571c:			; <UNDEFINED> instruction: 0x00016dbc
   15720:	andeq	r7, r1, fp, asr r0
   15724:	strdeq	r7, [r0], -ip
   15728:	andeq	r0, r0, r4, lsl r7
   1572c:	andeq	r7, r1, pc, ror #1
   15730:	andeq	r0, r0, fp, lsl r7
   15734:	andeq	r6, r1, r9, lsr #28
   15738:			; <UNDEFINED> instruction: 0x9e3779b1
   1573c:	strdeq	pc, [r0], -ip

00015740 <flatcc_builder_table_add_union@@Base>:
   15740:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15744:	add	ip, sp, #8
   15748:	stmdb	ip, {r2, r3}
   1574c:	ldr	r3, [r0, #32]
   15750:	ldrb	r5, [sp]
   15754:	ldr	r4, [sp, #4]
   15758:	ldrh	r3, [r3, #14]
   1575c:	cmp	r3, #3
   15760:	beq	15778 <flatcc_builder_table_add_union@@Base+0x38>
   15764:	ldr	r3, [pc, #156]	; 15808 <flatcc_builder_table_add_union@@Base+0xc8>
   15768:	ldr	r2, [pc, #156]	; 1580c <flatcc_builder_table_add_union@@Base+0xcc>
   1576c:	ldr	r1, [pc, #156]	; 15810 <flatcc_builder_table_add_union@@Base+0xd0>
   15770:	ldr	r0, [pc, #156]	; 15814 <flatcc_builder_table_add_union@@Base+0xd4>
   15774:	bl	1202c <__assert_fail@plt>
   15778:	cmp	r5, #0
   1577c:	mov	r6, r0
   15780:	mov	r7, r1
   15784:	bne	157a4 <flatcc_builder_table_add_union@@Base+0x64>
   15788:	cmp	r4, #0
   1578c:	beq	157cc <flatcc_builder_table_add_union@@Base+0x8c>
   15790:	ldr	r3, [pc, #112]	; 15808 <flatcc_builder_table_add_union@@Base+0xc8>
   15794:	ldr	r2, [pc, #124]	; 15818 <flatcc_builder_table_add_union@@Base+0xd8>
   15798:	ldr	r1, [pc, #112]	; 15810 <flatcc_builder_table_add_union@@Base+0xd0>
   1579c:	ldr	r0, [pc, #120]	; 1581c <flatcc_builder_table_add_union@@Base+0xdc>
   157a0:	b	15774 <flatcc_builder_table_add_union@@Base+0x34>
   157a4:	cmp	r4, #0
   157a8:	beq	157cc <flatcc_builder_table_add_union@@Base+0x8c>
   157ac:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   157b0:	cmp	r0, #0
   157b4:	strne	r4, [r0]
   157b8:	ldreq	r3, [pc, #72]	; 15808 <flatcc_builder_table_add_union@@Base+0xc8>
   157bc:	ldreq	r2, [pc, #92]	; 15820 <flatcc_builder_table_add_union@@Base+0xe0>
   157c0:	ldreq	r1, [pc, #72]	; 15810 <flatcc_builder_table_add_union@@Base+0xd0>
   157c4:	ldreq	r0, [pc, #88]	; 15824 <flatcc_builder_table_add_union@@Base+0xe4>
   157c8:	beq	15774 <flatcc_builder_table_add_union@@Base+0x34>
   157cc:	mov	r3, #1
   157d0:	mov	r2, r3
   157d4:	sub	r1, r7, #1
   157d8:	mov	r0, r6
   157dc:	bl	15460 <flatcc_builder_table_add@@Base>
   157e0:	cmp	r0, #0
   157e4:	ldreq	r3, [pc, #28]	; 15808 <flatcc_builder_table_add_union@@Base+0xc8>
   157e8:	ldreq	r2, [pc, #56]	; 15828 <flatcc_builder_table_add_union@@Base+0xe8>
   157ec:	ldreq	r1, [pc, #28]	; 15810 <flatcc_builder_table_add_union@@Base+0xd0>
   157f0:	ldreq	r0, [pc, #52]	; 1582c <flatcc_builder_table_add_union@@Base+0xec>
   157f4:	beq	15774 <flatcc_builder_table_add_union@@Base+0x34>
   157f8:	strb	r5, [r0]
   157fc:	mov	r0, #0
   15800:	add	sp, sp, #12
   15804:	pop	{r4, r5, r6, r7, pc}
   15808:	andeq	r6, r1, sp, lsr sp
   1580c:	andeq	r0, r0, lr, ror #11
   15810:			; <UNDEFINED> instruction: 0x00016dbc
   15814:	andeq	r7, r1, fp, asr r0
   15818:	andeq	r0, r0, pc, ror #11
   1581c:	andeq	r7, r1, r3, lsr r1
   15820:	strdeq	r0, [r0], -r2
   15824:	andeq	r7, r1, r5, asr r1
   15828:	strdeq	r0, [r0], -r6
   1582c:	andeq	r7, r1, pc, asr r1

00015830 <flatcc_builder_table_add_union_vector@@Base>:
   15830:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15834:	mov	r7, r1
   15838:	add	r1, sp, #8
   1583c:	stmdb	r1, {r2, r3}
   15840:	ldr	r3, [r0, #32]
   15844:	ldm	sp, {r4, r5}
   15848:	ldrh	r3, [r3, #14]
   1584c:	cmp	r3, #3
   15850:	beq	15868 <flatcc_builder_table_add_union_vector@@Base+0x38>
   15854:	ldr	r3, [pc, #176]	; 1590c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15858:	ldr	r1, [pc, #176]	; 15910 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1585c:	ldr	r0, [pc, #176]	; 15914 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15860:	mov	r2, #1536	; 0x600
   15864:	bl	1202c <__assert_fail@plt>
   15868:	clz	r3, r5
   1586c:	clz	r2, r4
   15870:	lsr	r3, r3, #5
   15874:	lsr	r2, r2, #5
   15878:	cmp	r2, r3
   1587c:	beq	158a8 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15880:	adds	r4, r4, #0
   15884:	movne	r4, #1
   15888:	cmp	r4, r3
   1588c:	mvnne	r0, #0
   15890:	bne	15904 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   15894:	ldr	r3, [pc, #112]	; 1590c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15898:	ldr	r2, [pc, #120]	; 15918 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1589c:	ldr	r1, [pc, #108]	; 15910 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   158a0:	ldr	r0, [pc, #116]	; 1591c <flatcc_builder_table_add_union_vector@@Base+0xec>
   158a4:	b	15864 <flatcc_builder_table_add_union_vector@@Base+0x34>
   158a8:	cmp	r4, #0
   158ac:	moveq	r0, r4
   158b0:	beq	15904 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   158b4:	sub	r1, r7, #1
   158b8:	mov	r6, r0
   158bc:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   158c0:	cmp	r0, #0
   158c4:	bne	158dc <flatcc_builder_table_add_union_vector@@Base+0xac>
   158c8:	ldr	r3, [pc, #60]	; 1590c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   158cc:	ldr	r2, [pc, #76]	; 15920 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   158d0:	ldr	r1, [pc, #56]	; 15910 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   158d4:	ldr	r0, [pc, #72]	; 15924 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   158d8:	b	15864 <flatcc_builder_table_add_union_vector@@Base+0x34>
   158dc:	str	r4, [r0]
   158e0:	mov	r1, r7
   158e4:	mov	r0, r6
   158e8:	bl	15614 <flatcc_builder_table_add_offset@@Base>
   158ec:	cmp	r0, #0
   158f0:	strne	r5, [r0]
   158f4:	movne	r0, #0
   158f8:	ldreq	r3, [pc, #12]	; 1590c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   158fc:	ldreq	r2, [pc, #36]	; 15928 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   15900:	beq	158d0 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15904:	add	sp, sp, #12
   15908:	pop	{r4, r5, r6, r7, pc}
   1590c:	andeq	r6, r1, ip, asr sp
   15910:			; <UNDEFINED> instruction: 0x00016dbc
   15914:	andeq	r7, r1, fp, asr r0
   15918:	andeq	r0, r0, r1, lsl #12
   1591c:	andeq	r7, r1, fp, ror #2
   15920:	andeq	r0, r0, r4, lsl #12
   15924:	andeq	r7, r1, r5, asr r1
   15928:	andeq	r0, r0, r8, lsl #12

0001592c <flatcc_builder_push_buffer_alignment@@Base>:
   1592c:	mov	r3, r0
   15930:	mov	r2, #4
   15934:	ldrh	r0, [r0, #128]	; 0x80
   15938:	strh	r2, [r3, #128]	; 0x80
   1593c:	bx	lr

00015940 <flatcc_builder_pop_buffer_alignment@@Base>:
   15940:	ldrh	r3, [r0, #128]	; 0x80
   15944:	cmp	r3, r1
   15948:	strhcc	r1, [r0, #128]	; 0x80
   1594c:	bx	lr

00015950 <flatcc_builder_get_buffer_alignment@@Base>:
   15950:	ldrh	r0, [r0, #128]	; 0x80
   15954:	bx	lr

00015958 <flatcc_builder_set_vtable_clustering@@Base>:
   15958:	clz	r1, r1
   1595c:	lsr	r1, r1, #5
   15960:	str	r1, [r0, #180]	; 0xb4
   15964:	bx	lr

00015968 <flatcc_builder_set_block_align@@Base>:
   15968:	strh	r1, [r0, #132]	; 0x84
   1596c:	bx	lr

00015970 <flatcc_builder_get_level@@Base>:
   15970:	ldr	r0, [r0, #156]	; 0x9c
   15974:	bx	lr

00015978 <flatcc_builder_set_max_level@@Base>:
   15978:	ldr	r3, [r0, #160]	; 0xa0
   1597c:	str	r1, [r0, #176]	; 0xb0
   15980:	cmp	r1, r3
   15984:	strgt	r1, [r0, #160]	; 0xa0
   15988:	bx	lr

0001598c <flatcc_builder_get_buffer_size@@Base>:
   1598c:	ldr	r2, [r0, #140]	; 0x8c
   15990:	ldr	r0, [r0, #136]	; 0x88
   15994:	sub	r0, r2, r0
   15998:	bx	lr

0001599c <flatcc_builder_get_buffer_start@@Base>:
   1599c:	ldr	r0, [r0, #136]	; 0x88
   159a0:	bx	lr

000159a4 <flatcc_builder_get_buffer_end@@Base>:
   159a4:	ldr	r0, [r0, #140]	; 0x8c
   159a8:	bx	lr

000159ac <flatcc_builder_set_vtable_cache_limit@@Base>:
   159ac:	str	r1, [r0, #172]	; 0xac
   159b0:	bx	lr

000159b4 <flatcc_builder_set_identifier@@Base>:
   159b4:	ldr	r3, [pc, #16]	; 159cc <flatcc_builder_set_identifier@@Base+0x18>
   159b8:	cmp	r1, #0
   159bc:	moveq	r1, r3
   159c0:	ldr	r3, [r1]
   159c4:	str	r3, [r0, #168]	; 0xa8
   159c8:	bx	lr
   159cc:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>

000159d0 <flatcc_builder_get_type@@Base>:
   159d0:	ldr	r0, [r0, #32]
   159d4:	cmp	r0, #0
   159d8:	ldrhne	r0, [r0, #14]
   159dc:	bx	lr

000159e0 <flatcc_builder_get_type_at@@Base>:
   159e0:	cmp	r1, #0
   159e4:	ble	15a0c <flatcc_builder_get_type_at@@Base+0x2c>
   159e8:	ldr	r3, [r0, #156]	; 0x9c
   159ec:	cmp	r1, r3
   159f0:	bgt	15a0c <flatcc_builder_get_type_at@@Base+0x2c>
   159f4:	sub	r1, r1, r3
   159f8:	mov	r2, #36	; 0x24
   159fc:	ldr	r3, [r0, #32]
   15a00:	mla	r1, r2, r1, r3
   15a04:	ldrh	r0, [r1, #14]
   15a08:	bx	lr
   15a0c:	mov	r0, #0
   15a10:	bx	lr

00015a14 <flatcc_builder_get_direct_buffer@@Base>:
   15a14:	ldr	r3, [r0, #184]	; 0xb8
   15a18:	cmp	r3, #0
   15a1c:	beq	15a44 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15a20:	ldr	r2, [r0, #188]	; 0xbc
   15a24:	ldr	r3, [r0, #192]	; 0xc0
   15a28:	cmp	r2, r3
   15a2c:	bne	15a44 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15a30:	cmp	r1, #0
   15a34:	ldrne	r3, [r0, #212]	; 0xd4
   15a38:	ldr	r0, [r0, #196]	; 0xc4
   15a3c:	strne	r3, [r1]
   15a40:	bx	lr
   15a44:	mov	r0, #0
   15a48:	cmp	r1, #0
   15a4c:	strne	r0, [r1]
   15a50:	moveq	r0, r1
   15a54:	bx	lr

00015a58 <flatcc_builder_copy_buffer@@Base>:
   15a58:	ldr	r3, [r0, #184]	; 0xb8
   15a5c:	cmp	r3, #0
   15a60:	beq	15a8c <flatcc_builder_copy_buffer@@Base+0x34>
   15a64:	push	{r4, lr}
   15a68:	add	r0, r0, #188	; 0xbc
   15a6c:	bl	1604c <flatcc_emitter_copy_buffer@@Base>
   15a70:	cmp	r0, #0
   15a74:	popne	{r4, pc}
   15a78:	ldr	r3, [pc, #20]	; 15a94 <flatcc_builder_copy_buffer@@Base+0x3c>
   15a7c:	ldr	r2, [pc, #20]	; 15a98 <flatcc_builder_copy_buffer@@Base+0x40>
   15a80:	ldr	r1, [pc, #20]	; 15a9c <flatcc_builder_copy_buffer@@Base+0x44>
   15a84:	ldr	r0, [pc, #20]	; 15aa0 <flatcc_builder_copy_buffer@@Base+0x48>
   15a88:	bl	1202c <__assert_fail@plt>
   15a8c:	mov	r0, r3
   15a90:	bx	lr
   15a94:	andeq	r6, r1, r2, lsl #27
   15a98:	andeq	r0, r0, r6, lsl #15
   15a9c:			; <UNDEFINED> instruction: 0x00016dbc
   15aa0:			; <UNDEFINED> instruction: 0x00016eb3

00015aa4 <flatcc_builder_finalize_buffer@@Base>:
   15aa4:	push	{r4, r5, r6, lr}
   15aa8:	cmp	r1, #0
   15aac:	ldr	r4, [r0, #140]	; 0x8c
   15ab0:	ldr	r2, [r0, #136]	; 0x88
   15ab4:	mov	r5, r0
   15ab8:	sub	r4, r4, r2
   15abc:	strne	r4, [r1]
   15ac0:	mov	r0, r4
   15ac4:	bl	11fcc <malloc@plt>
   15ac8:	subs	r6, r0, #0
   15acc:	bne	15ae4 <flatcc_builder_finalize_buffer@@Base+0x40>
   15ad0:	ldr	r3, [pc, #52]	; 15b0c <flatcc_builder_finalize_buffer@@Base+0x68>
   15ad4:	ldr	r2, [pc, #52]	; 15b10 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15ad8:	ldr	r1, [pc, #52]	; 15b14 <flatcc_builder_finalize_buffer@@Base+0x70>
   15adc:	ldr	r0, [pc, #52]	; 15b18 <flatcc_builder_finalize_buffer@@Base+0x74>
   15ae0:	bl	1202c <__assert_fail@plt>
   15ae4:	mov	r2, r4
   15ae8:	mov	r1, r6
   15aec:	mov	r0, r5
   15af0:	bl	15a58 <flatcc_builder_copy_buffer@@Base>
   15af4:	cmp	r0, #0
   15af8:	ldreq	r3, [pc, #12]	; 15b0c <flatcc_builder_finalize_buffer@@Base+0x68>
   15afc:	ldreq	r2, [pc, #24]	; 15b1c <flatcc_builder_finalize_buffer@@Base+0x78>
   15b00:	beq	15ad8 <flatcc_builder_finalize_buffer@@Base+0x34>
   15b04:	mov	r0, r6
   15b08:	pop	{r4, r5, r6, pc}
   15b0c:	muleq	r1, sp, sp
   15b10:	muleq	r0, r8, r7
   15b14:			; <UNDEFINED> instruction: 0x00016dbc
   15b18:	andeq	r6, r1, r9, lsr #28
   15b1c:	muleq	r0, ip, r7

00015b20 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15b20:	push	{r4, r5, r6, r7, r8, lr}
   15b24:	mov	r6, r0
   15b28:	ldr	r4, [r0, #140]	; 0x8c
   15b2c:	ldr	r2, [r0, #136]	; 0x88
   15b30:	ldrh	r0, [r0, #128]	; 0x80
   15b34:	subs	r7, r1, #0
   15b38:	sub	r2, r4, r2
   15b3c:	sub	r4, r0, #1
   15b40:	strne	r2, [r7]
   15b44:	add	r4, r4, r2
   15b48:	rsb	r2, r0, #0
   15b4c:	and	r4, r4, r2
   15b50:	mov	r1, r4
   15b54:	bl	12e70 <access_monster_buffer@@Base+0x4e0>
   15b58:	subs	r5, r0, #0
   15b5c:	beq	15b84 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15b60:	mov	r2, r4
   15b64:	mov	r1, r5
   15b68:	mov	r0, r6
   15b6c:	bl	15a58 <flatcc_builder_copy_buffer@@Base>
   15b70:	subs	r4, r0, #0
   15b74:	bne	15b84 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15b78:	mov	r0, r5
   15b7c:	bl	11f90 <free@plt>
   15b80:	mov	r5, r4
   15b84:	cmp	r7, #0
   15b88:	clz	r3, r5
   15b8c:	lsr	r3, r3, #5
   15b90:	moveq	r3, #0
   15b94:	cmp	r3, #0
   15b98:	movne	r3, #0
   15b9c:	strne	r3, [r7]
   15ba0:	mov	r0, r5
   15ba4:	pop	{r4, r5, r6, r7, r8, pc}

00015ba8 <flatcc_builder_aligned_alloc@@Base>:
   15ba8:	b	12e70 <access_monster_buffer@@Base+0x4e0>

00015bac <flatcc_builder_aligned_free@@Base>:
   15bac:	b	11f90 <free@plt>

00015bb0 <flatcc_builder_get_emit_context@@Base>:
   15bb0:	ldr	r0, [r0, #36]	; 0x24
   15bb4:	bx	lr

00015bb8 <flatcc_emitter_recycle_page@@Base>:
   15bb8:	ldr	r3, [r0]
   15bbc:	cmp	r3, r1
   15bc0:	beq	15c04 <flatcc_emitter_recycle_page@@Base+0x4c>
   15bc4:	ldr	r2, [r0, #4]
   15bc8:	cmp	r1, r2
   15bcc:	beq	15c04 <flatcc_emitter_recycle_page@@Base+0x4c>
   15bd0:	ldr	r2, [r1, #2944]	; 0xb80
   15bd4:	ldr	r0, [r1, #2948]	; 0xb84
   15bd8:	str	r0, [r2, #2948]	; 0xb84
   15bdc:	ldr	r0, [r1, #2948]	; 0xb84
   15be0:	str	r2, [r0, #2944]	; 0xb80
   15be4:	ldr	r2, [r3, #2948]	; 0xb84
   15be8:	str	r3, [r1, #2944]	; 0xb80
   15bec:	str	r2, [r1, #2948]	; 0xb84
   15bf0:	str	r1, [r2, #2944]	; 0xb80
   15bf4:	ldr	r3, [r1, #2944]	; 0xb80
   15bf8:	mov	r0, #0
   15bfc:	str	r1, [r3, #2948]	; 0xb84
   15c00:	bx	lr
   15c04:	mvn	r0, #0
   15c08:	bx	lr

00015c0c <flatcc_emitter_reset@@Base>:
   15c0c:	ldr	r3, [r0]
   15c10:	cmp	r3, #0
   15c14:	bxeq	lr
   15c18:	add	r2, r3, #1472	; 0x5c0
   15c1c:	push	{r4, lr}
   15c20:	mov	r4, r0
   15c24:	str	r2, [r0, #8]
   15c28:	str	r2, [r0, #16]
   15c2c:	mov	r2, #1472	; 0x5c0
   15c30:	str	r2, [r0, #12]
   15c34:	str	r2, [r0, #20]
   15c38:	sub	r2, r2, #2944	; 0xb80
   15c3c:	str	r3, [r0, #4]
   15c40:	str	r2, [r3, #2952]	; 0xb88
   15c44:	ldr	r3, [r0, #32]
   15c48:	cmp	r3, #0
   15c4c:	ldr	r3, [r0, #24]
   15c50:	streq	r3, [r0, #32]
   15c54:	ldr	r2, [r0, #32]
   15c58:	lsr	r3, r3, #2
   15c5c:	add	r2, r2, r2, lsl #1
   15c60:	add	r3, r3, r2, lsr #2
   15c64:	str	r3, [r0, #32]
   15c68:	mov	r3, #0
   15c6c:	str	r3, [r0, #24]
   15c70:	ldr	r2, [r4, #32]
   15c74:	ldr	r3, [r4, #28]
   15c78:	cmp	r3, r2, lsl #1
   15c7c:	popls	{r4, pc}
   15c80:	ldr	r3, [r4, #4]
   15c84:	ldr	r2, [r4]
   15c88:	ldr	r0, [r3, #2944]	; 0xb80
   15c8c:	cmp	r0, r2
   15c90:	bne	15c98 <flatcc_emitter_reset@@Base+0x8c>
   15c94:	pop	{r4, pc}
   15c98:	ldr	r2, [r0, #2944]	; 0xb80
   15c9c:	str	r2, [r3, #2944]	; 0xb80
   15ca0:	ldr	r2, [r0, #2944]	; 0xb80
   15ca4:	str	r3, [r2, #2948]	; 0xb84
   15ca8:	bl	11f90 <free@plt>
   15cac:	ldr	r3, [r4, #28]
   15cb0:	sub	r3, r3, #2944	; 0xb80
   15cb4:	str	r3, [r4, #28]
   15cb8:	b	15c70 <flatcc_emitter_reset@@Base+0x64>

00015cbc <flatcc_emitter_clear@@Base>:
   15cbc:	ldr	r3, [r0]
   15cc0:	cmp	r3, #0
   15cc4:	bxeq	lr
   15cc8:	ldr	r2, [r3, #2948]	; 0xb84
   15ccc:	push	{r4, r5, r6, lr}
   15cd0:	mov	r4, r0
   15cd4:	mov	r1, #0
   15cd8:	str	r1, [r2, #2944]	; 0xb80
   15cdc:	ldr	r5, [r3, #2944]	; 0xb80
   15ce0:	cmp	r5, #0
   15ce4:	bne	15d04 <flatcc_emitter_clear@@Base+0x48>
   15ce8:	mov	r0, r3
   15cec:	bl	11f90 <free@plt>
   15cf0:	mov	r1, r5
   15cf4:	mov	r0, r4
   15cf8:	mov	r2, #36	; 0x24
   15cfc:	pop	{r4, r5, r6, lr}
   15d00:	b	12008 <memset@plt>
   15d04:	ldr	r0, [r5, #2948]	; 0xb84
   15d08:	bl	11f90 <free@plt>
   15d0c:	mov	r3, r5
   15d10:	b	15cdc <flatcc_emitter_clear@@Base+0x20>

00015d14 <flatcc_emitter@@Base>:
   15d14:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d18:	mov	r4, r0
   15d1c:	ldr	r0, [sp, #48]	; 0x30
   15d20:	ldr	ip, [r4, #24]
   15d24:	cmp	r3, #0
   15d28:	add	ip, ip, r0
   15d2c:	str	ip, [r4, #24]
   15d30:	bge	15ee0 <flatcc_emitter@@Base+0x1cc>
   15d34:	ldr	ip, [r4, #12]
   15d38:	cmp	r0, ip
   15d3c:	bhi	15d84 <flatcc_emitter@@Base+0x70>
   15d40:	ldr	r3, [r4, #8]
   15d44:	sub	r3, r3, r0
   15d48:	sub	r0, ip, r0
   15d4c:	str	r3, [r4, #8]
   15d50:	str	r0, [r4, #12]
   15d54:	mov	r4, r1
   15d58:	mov	r5, r2
   15d5c:	cmp	r5, #0
   15d60:	add	r4, r4, #8
   15d64:	beq	15d9c <flatcc_emitter@@Base+0x88>
   15d68:	ldmdb	r4, {r1, r2}
   15d6c:	mov	r0, r3
   15d70:	bl	11f9c <memcpy@plt>
   15d74:	ldr	r2, [r4, #-4]
   15d78:	sub	r5, r5, #1
   15d7c:	add	r3, r0, r2
   15d80:	b	15d5c <flatcc_emitter@@Base+0x48>
   15d84:	ldr	sl, [pc, #696]	; 16044 <flatcc_emitter@@Base+0x330>
   15d88:	add	r5, r1, r2, lsl #3
   15d8c:	sub	r6, r2, #1
   15d90:	mov	r9, #2944	; 0xb80
   15d94:	cmn	r6, #1
   15d98:	bne	15da4 <flatcc_emitter@@Base+0x90>
   15d9c:	mov	r0, #0
   15da0:	b	15e48 <flatcc_emitter@@Base+0x134>
   15da4:	ldr	r7, [r5, #-4]
   15da8:	ldr	fp, [r5, #-8]
   15dac:	mov	r8, #1472	; 0x5c0
   15db0:	add	fp, fp, r7
   15db4:	cmp	r7, #0
   15db8:	subeq	r5, r5, #8
   15dbc:	subeq	r6, r6, #1
   15dc0:	beq	15d94 <flatcc_emitter@@Base+0x80>
   15dc4:	ldr	r3, [r4, #12]
   15dc8:	cmp	r3, r7
   15dcc:	bcs	15eb0 <flatcc_emitter@@Base+0x19c>
   15dd0:	cmp	r3, #0
   15dd4:	movne	r2, r3
   15dd8:	bne	15eb4 <flatcc_emitter@@Base+0x1a0>
   15ddc:	ldr	r3, [r4]
   15de0:	cmp	r3, #0
   15de4:	beq	15e2c <flatcc_emitter@@Base+0x118>
   15de8:	ldr	r2, [r3, #2948]	; 0xb84
   15dec:	ldr	r1, [r4, #4]
   15df0:	cmp	r2, r1
   15df4:	beq	15e2c <flatcc_emitter@@Base+0x118>
   15df8:	ldr	r3, [r3, #2952]	; 0xb88
   15dfc:	sub	r3, r3, #2944	; 0xb80
   15e00:	str	r3, [r2, #2952]	; 0xb88
   15e04:	str	r2, [r4]
   15e08:	ldr	r3, [r4]
   15e0c:	str	r9, [r4, #12]
   15e10:	add	r2, r3, #2944	; 0xb80
   15e14:	str	r2, [r4, #8]
   15e18:	ldr	r2, [r3, #2944]	; 0xb80
   15e1c:	ldr	r2, [r2, #2952]	; 0xb88
   15e20:	sub	r2, r2, #2944	; 0xb80
   15e24:	str	r2, [r3, #2952]	; 0xb88
   15e28:	b	15db4 <flatcc_emitter@@Base+0xa0>
   15e2c:	mov	r0, sl
   15e30:	str	r3, [sp, #4]
   15e34:	bl	11fcc <malloc@plt>
   15e38:	ldr	r3, [sp, #4]
   15e3c:	cmp	r0, #0
   15e40:	bne	15e50 <flatcc_emitter@@Base+0x13c>
   15e44:	mvn	r0, #0
   15e48:	add	sp, sp, #12
   15e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e50:	ldr	r2, [r4, #28]
   15e54:	cmp	r3, #0
   15e58:	add	r2, r2, #2944	; 0xb80
   15e5c:	str	r2, [r4, #28]
   15e60:	beq	15e80 <flatcc_emitter@@Base+0x16c>
   15e64:	ldr	r2, [r4, #4]
   15e68:	str	r3, [r0, #2944]	; 0xb80
   15e6c:	str	r2, [r0, #2948]	; 0xb84
   15e70:	str	r0, [r3, #2948]	; 0xb84
   15e74:	str	r0, [r2, #2944]	; 0xb80
   15e78:	str	r0, [r4]
   15e7c:	b	15e08 <flatcc_emitter@@Base+0xf4>
   15e80:	add	r3, r0, #1472	; 0x5c0
   15e84:	str	r3, [r4, #8]
   15e88:	str	r3, [r4, #16]
   15e8c:	ldr	r3, [pc, #436]	; 16048 <flatcc_emitter@@Base+0x334>
   15e90:	str	r0, [r4]
   15e94:	str	r0, [r4, #4]
   15e98:	str	r0, [r0, #2944]	; 0xb80
   15e9c:	str	r0, [r0, #2948]	; 0xb84
   15ea0:	str	r8, [r4, #12]
   15ea4:	str	r8, [r4, #20]
   15ea8:	str	r3, [r0, #2952]	; 0xb88
   15eac:	b	15db4 <flatcc_emitter@@Base+0xa0>
   15eb0:	mov	r2, r7
   15eb4:	ldr	r0, [r4, #8]
   15eb8:	rsb	r1, r2, #0
   15ebc:	add	r0, r0, r1
   15ec0:	sub	r3, r3, r2
   15ec4:	add	fp, fp, r1
   15ec8:	str	r0, [r4, #8]
   15ecc:	str	r3, [r4, #12]
   15ed0:	mov	r1, fp
   15ed4:	sub	r7, r7, r2
   15ed8:	bl	11f9c <memcpy@plt>
   15edc:	b	15db4 <flatcc_emitter@@Base+0xa0>
   15ee0:	ldr	ip, [r4, #20]
   15ee4:	cmp	r0, ip
   15ee8:	bls	15f24 <flatcc_emitter@@Base+0x210>
   15eec:	ldr	sl, [pc, #336]	; 16044 <flatcc_emitter@@Base+0x330>
   15ef0:	mov	r6, r2
   15ef4:	add	r5, r1, #8
   15ef8:	mov	r9, #2944	; 0xb80
   15efc:	cmp	r6, #0
   15f00:	beq	15d9c <flatcc_emitter@@Base+0x88>
   15f04:	ldr	r7, [r5, #-4]
   15f08:	ldr	fp, [r5, #-8]
   15f0c:	mov	r8, #1472	; 0x5c0
   15f10:	cmp	r7, #0
   15f14:	bne	15f3c <flatcc_emitter@@Base+0x228>
   15f18:	sub	r6, r6, #1
   15f1c:	add	r5, r5, #8
   15f20:	b	15efc <flatcc_emitter@@Base+0x1e8>
   15f24:	ldr	r3, [r4, #16]
   15f28:	add	lr, r3, r0
   15f2c:	sub	r0, ip, r0
   15f30:	str	lr, [r4, #16]
   15f34:	str	r0, [r4, #20]
   15f38:	b	15d54 <flatcc_emitter@@Base+0x40>
   15f3c:	ldr	r3, [r4, #20]
   15f40:	cmp	r3, r7
   15f44:	bcs	16004 <flatcc_emitter@@Base+0x2f0>
   15f48:	cmp	r3, #0
   15f4c:	bne	16008 <flatcc_emitter@@Base+0x2f4>
   15f50:	ldr	r3, [r4, #4]
   15f54:	cmp	r3, #0
   15f58:	beq	15f70 <flatcc_emitter@@Base+0x25c>
   15f5c:	ldr	r2, [r3, #2944]	; 0xb80
   15f60:	ldr	r1, [r4]
   15f64:	cmp	r2, r1
   15f68:	strne	r2, [r4, #4]
   15f6c:	bne	15fb4 <flatcc_emitter@@Base+0x2a0>
   15f70:	mov	r0, sl
   15f74:	str	r3, [sp, #4]
   15f78:	bl	11fcc <malloc@plt>
   15f7c:	cmp	r0, #0
   15f80:	beq	15e44 <flatcc_emitter@@Base+0x130>
   15f84:	ldr	r2, [r4, #28]
   15f88:	ldr	r3, [sp, #4]
   15f8c:	add	r2, r2, #2944	; 0xb80
   15f90:	cmp	r3, #0
   15f94:	str	r2, [r4, #28]
   15f98:	beq	15fd4 <flatcc_emitter@@Base+0x2c0>
   15f9c:	ldr	r2, [r4]
   15fa0:	str	r3, [r0, #2948]	; 0xb84
   15fa4:	str	r2, [r0, #2944]	; 0xb80
   15fa8:	str	r0, [r2, #2948]	; 0xb84
   15fac:	str	r0, [r3, #2944]	; 0xb80
   15fb0:	str	r0, [r4, #4]
   15fb4:	ldr	r3, [r4, #4]
   15fb8:	str	r9, [r4, #20]
   15fbc:	str	r3, [r4, #16]
   15fc0:	ldr	r2, [r3, #2948]	; 0xb84
   15fc4:	ldr	r2, [r2, #2952]	; 0xb88
   15fc8:	add	r2, r2, #2944	; 0xb80
   15fcc:	str	r2, [r3, #2952]	; 0xb88
   15fd0:	b	15f10 <flatcc_emitter@@Base+0x1fc>
   15fd4:	add	r3, r0, #1472	; 0x5c0
   15fd8:	str	r3, [r4, #8]
   15fdc:	str	r3, [r4, #16]
   15fe0:	ldr	r3, [pc, #96]	; 16048 <flatcc_emitter@@Base+0x334>
   15fe4:	str	r0, [r4]
   15fe8:	str	r0, [r4, #4]
   15fec:	str	r0, [r0, #2944]	; 0xb80
   15ff0:	str	r0, [r0, #2948]	; 0xb84
   15ff4:	str	r8, [r4, #12]
   15ff8:	str	r8, [r4, #20]
   15ffc:	str	r3, [r0, #2952]	; 0xb88
   16000:	b	15f10 <flatcc_emitter@@Base+0x1fc>
   16004:	mov	r3, r7
   16008:	mov	r2, r3
   1600c:	mov	r1, fp
   16010:	ldr	r0, [r4, #16]
   16014:	str	r3, [sp, #4]
   16018:	bl	11f9c <memcpy@plt>
   1601c:	ldr	r3, [sp, #4]
   16020:	ldr	r2, [r4, #16]
   16024:	sub	r7, r7, r3
   16028:	add	r2, r2, r3
   1602c:	str	r2, [r4, #16]
   16030:	ldr	r2, [r4, #20]
   16034:	add	fp, fp, r3
   16038:	sub	r3, r2, r3
   1603c:	str	r3, [r4, #20]
   16040:	b	15f10 <flatcc_emitter@@Base+0x1fc>
   16044:	andeq	r0, r0, ip, lsl #23
   16048:			; <UNDEFINED> instruction: 0xfffffa40

0001604c <flatcc_emitter_copy_buffer@@Base>:
   1604c:	push	{r4, r5, r6, lr}
   16050:	mov	r4, r0
   16054:	ldr	r0, [r0, #24]
   16058:	cmp	r0, r2
   1605c:	movhi	r3, #0
   16060:	bhi	160d4 <flatcc_emitter_copy_buffer@@Base+0x88>
   16064:	ldr	r2, [r4]
   16068:	cmp	r2, #0
   1606c:	moveq	r3, r2
   16070:	beq	160d4 <flatcc_emitter_copy_buffer@@Base+0x88>
   16074:	mov	r3, r1
   16078:	ldr	r1, [r4, #4]
   1607c:	cmp	r2, r1
   16080:	moveq	r2, r0
   16084:	ldr	r1, [r4, #8]
   16088:	beq	160c8 <flatcc_emitter_copy_buffer@@Base+0x7c>
   1608c:	ldr	r5, [r4, #12]
   16090:	mov	r0, r3
   16094:	rsb	r5, r5, #2944	; 0xb80
   16098:	mov	r2, r5
   1609c:	bl	11f9c <memcpy@plt>
   160a0:	ldr	r2, [r4]
   160a4:	mov	r6, #2944	; 0xb80
   160a8:	add	r3, r0, r5
   160ac:	ldr	r5, [r2, #2944]	; 0xb80
   160b0:	ldr	r2, [r4, #4]
   160b4:	cmp	r5, r2
   160b8:	bne	160dc <flatcc_emitter_copy_buffer@@Base+0x90>
   160bc:	ldr	r2, [r4, #20]
   160c0:	mov	r1, r5
   160c4:	rsb	r2, r2, #2944	; 0xb80
   160c8:	mov	r0, r3
   160cc:	bl	11f9c <memcpy@plt>
   160d0:	mov	r3, r0
   160d4:	mov	r0, r3
   160d8:	pop	{r4, r5, r6, pc}
   160dc:	mov	r1, r5
   160e0:	mov	r0, r3
   160e4:	mov	r2, r6
   160e8:	bl	11f9c <memcpy@plt>
   160ec:	ldr	r5, [r5, #2944]	; 0xb80
   160f0:	add	r3, r0, #2944	; 0xb80
   160f4:	b	160b0 <flatcc_emitter_copy_buffer@@Base+0x64>
   160f8:	subs	r2, r1, #1
   160fc:	bxeq	lr
   16100:	bcc	162d8 <flatcc_emitter_copy_buffer@@Base+0x28c>
   16104:	cmp	r0, r1
   16108:	bls	162bc <flatcc_emitter_copy_buffer@@Base+0x270>
   1610c:	tst	r1, r2
   16110:	beq	162c8 <flatcc_emitter_copy_buffer@@Base+0x27c>
   16114:	clz	r3, r0
   16118:	clz	r2, r1
   1611c:	sub	r3, r2, r3
   16120:	rsbs	r3, r3, #31
   16124:	addne	r3, r3, r3, lsl #1
   16128:	mov	r2, #0
   1612c:	addne	pc, pc, r3, lsl #2
   16130:	nop			; (mov r0, r0)
   16134:	cmp	r0, r1, lsl #31
   16138:	adc	r2, r2, r2
   1613c:	subcs	r0, r0, r1, lsl #31
   16140:	cmp	r0, r1, lsl #30
   16144:	adc	r2, r2, r2
   16148:	subcs	r0, r0, r1, lsl #30
   1614c:	cmp	r0, r1, lsl #29
   16150:	adc	r2, r2, r2
   16154:	subcs	r0, r0, r1, lsl #29
   16158:	cmp	r0, r1, lsl #28
   1615c:	adc	r2, r2, r2
   16160:	subcs	r0, r0, r1, lsl #28
   16164:	cmp	r0, r1, lsl #27
   16168:	adc	r2, r2, r2
   1616c:	subcs	r0, r0, r1, lsl #27
   16170:	cmp	r0, r1, lsl #26
   16174:	adc	r2, r2, r2
   16178:	subcs	r0, r0, r1, lsl #26
   1617c:	cmp	r0, r1, lsl #25
   16180:	adc	r2, r2, r2
   16184:	subcs	r0, r0, r1, lsl #25
   16188:	cmp	r0, r1, lsl #24
   1618c:	adc	r2, r2, r2
   16190:	subcs	r0, r0, r1, lsl #24
   16194:	cmp	r0, r1, lsl #23
   16198:	adc	r2, r2, r2
   1619c:	subcs	r0, r0, r1, lsl #23
   161a0:	cmp	r0, r1, lsl #22
   161a4:	adc	r2, r2, r2
   161a8:	subcs	r0, r0, r1, lsl #22
   161ac:	cmp	r0, r1, lsl #21
   161b0:	adc	r2, r2, r2
   161b4:	subcs	r0, r0, r1, lsl #21
   161b8:	cmp	r0, r1, lsl #20
   161bc:	adc	r2, r2, r2
   161c0:	subcs	r0, r0, r1, lsl #20
   161c4:	cmp	r0, r1, lsl #19
   161c8:	adc	r2, r2, r2
   161cc:	subcs	r0, r0, r1, lsl #19
   161d0:	cmp	r0, r1, lsl #18
   161d4:	adc	r2, r2, r2
   161d8:	subcs	r0, r0, r1, lsl #18
   161dc:	cmp	r0, r1, lsl #17
   161e0:	adc	r2, r2, r2
   161e4:	subcs	r0, r0, r1, lsl #17
   161e8:	cmp	r0, r1, lsl #16
   161ec:	adc	r2, r2, r2
   161f0:	subcs	r0, r0, r1, lsl #16
   161f4:	cmp	r0, r1, lsl #15
   161f8:	adc	r2, r2, r2
   161fc:	subcs	r0, r0, r1, lsl #15
   16200:	cmp	r0, r1, lsl #14
   16204:	adc	r2, r2, r2
   16208:	subcs	r0, r0, r1, lsl #14
   1620c:	cmp	r0, r1, lsl #13
   16210:	adc	r2, r2, r2
   16214:	subcs	r0, r0, r1, lsl #13
   16218:	cmp	r0, r1, lsl #12
   1621c:	adc	r2, r2, r2
   16220:	subcs	r0, r0, r1, lsl #12
   16224:	cmp	r0, r1, lsl #11
   16228:	adc	r2, r2, r2
   1622c:	subcs	r0, r0, r1, lsl #11
   16230:	cmp	r0, r1, lsl #10
   16234:	adc	r2, r2, r2
   16238:	subcs	r0, r0, r1, lsl #10
   1623c:	cmp	r0, r1, lsl #9
   16240:	adc	r2, r2, r2
   16244:	subcs	r0, r0, r1, lsl #9
   16248:	cmp	r0, r1, lsl #8
   1624c:	adc	r2, r2, r2
   16250:	subcs	r0, r0, r1, lsl #8
   16254:	cmp	r0, r1, lsl #7
   16258:	adc	r2, r2, r2
   1625c:	subcs	r0, r0, r1, lsl #7
   16260:	cmp	r0, r1, lsl #6
   16264:	adc	r2, r2, r2
   16268:	subcs	r0, r0, r1, lsl #6
   1626c:	cmp	r0, r1, lsl #5
   16270:	adc	r2, r2, r2
   16274:	subcs	r0, r0, r1, lsl #5
   16278:	cmp	r0, r1, lsl #4
   1627c:	adc	r2, r2, r2
   16280:	subcs	r0, r0, r1, lsl #4
   16284:	cmp	r0, r1, lsl #3
   16288:	adc	r2, r2, r2
   1628c:	subcs	r0, r0, r1, lsl #3
   16290:	cmp	r0, r1, lsl #2
   16294:	adc	r2, r2, r2
   16298:	subcs	r0, r0, r1, lsl #2
   1629c:	cmp	r0, r1, lsl #1
   162a0:	adc	r2, r2, r2
   162a4:	subcs	r0, r0, r1, lsl #1
   162a8:	cmp	r0, r1
   162ac:	adc	r2, r2, r2
   162b0:	subcs	r0, r0, r1
   162b4:	mov	r0, r2
   162b8:	bx	lr
   162bc:	moveq	r0, #1
   162c0:	movne	r0, #0
   162c4:	bx	lr
   162c8:	clz	r2, r1
   162cc:	rsb	r2, r2, #31
   162d0:	lsr	r0, r0, r2
   162d4:	bx	lr
   162d8:	cmp	r0, #0
   162dc:	mvnne	r0, #0
   162e0:	b	16304 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   162e4:	cmp	r1, #0
   162e8:	beq	162d8 <flatcc_emitter_copy_buffer@@Base+0x28c>
   162ec:	push	{r0, r1, lr}
   162f0:	bl	160f8 <flatcc_emitter_copy_buffer@@Base+0xac>
   162f4:	pop	{r1, r2, lr}
   162f8:	mul	r3, r2, r0
   162fc:	sub	r1, r1, r3
   16300:	bx	lr
   16304:	push	{r1, lr}
   16308:	mov	r0, #8
   1630c:	bl	11f78 <raise@plt>
   16310:	pop	{r1, pc}

00016314 <__libc_csu_init@@Base>:
   16314:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16318:	mov	r7, r0
   1631c:	ldr	r6, [pc, #72]	; 1636c <__libc_csu_init@@Base+0x58>
   16320:	ldr	r5, [pc, #72]	; 16370 <__libc_csu_init@@Base+0x5c>
   16324:	add	r6, pc, r6
   16328:	add	r5, pc, r5
   1632c:	sub	r6, r6, r5
   16330:	mov	r8, r1
   16334:	mov	r9, r2
   16338:	bl	11f58 <raise@plt-0x20>
   1633c:	asrs	r6, r6, #2
   16340:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16344:	mov	r4, #0
   16348:	add	r4, r4, #1
   1634c:	ldr	r3, [r5], #4
   16350:	mov	r2, r9
   16354:	mov	r1, r8
   16358:	mov	r0, r7
   1635c:	blx	r3
   16360:	cmp	r6, r4
   16364:	bne	16348 <__libc_csu_init@@Base+0x34>
   16368:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1636c:	andeq	r1, r1, r4, ror #23
   16370:	ldrdeq	r1, [r1], -ip

00016374 <__libc_csu_fini@@Base>:
   16374:	bx	lr

Disassembly of section .fini:

00016378 <.fini>:
   16378:	push	{r3, lr}
   1637c:	pop	{r3, pc}
