
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

000105c4 <.init>:
   105c4:	push	{r3, lr}
   105c8:	bl	10674 <_start@@Base+0x3c>
   105cc:	pop	{r3, pc}

Disassembly of section .plt:

000105d0 <printf@plt-0x14>:
   105d0:	push	{lr}		; (str lr, [sp, #-4]!)
   105d4:	ldr	lr, [pc, #4]	; 105e0 <printf@plt-0x4>
   105d8:	add	lr, pc, lr
   105dc:	ldr	pc, [lr, #8]!
   105e0:	andeq	r0, r1, r0, lsr #20

000105e4 <printf@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2592]!	; 0xa20

000105f0 <malloc@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2584]!	; 0xa18

000105fc <__libc_start_main@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2576]!	; 0xa10

00010608 <__gmon_start__@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2568]!	; 0xa08

00010614 <exit@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2560]!	; 0xa00

00010620 <__isoc99_scanf@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2552]!	; 0x9f8

0001062c <abort@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2544]!	; 0x9f0

Disassembly of section .text:

00010638 <_start@@Base>:
   10638:	mov	fp, #0
   1063c:	mov	lr, #0
   10640:	pop	{r1}		; (ldr r1, [sp], #4)
   10644:	mov	r2, sp
   10648:	push	{r2}		; (str r2, [sp, #-4]!)
   1064c:	push	{r0}		; (str r0, [sp, #-4]!)
   10650:	ldr	ip, [pc, #16]	; 10668 <_start@@Base+0x30>
   10654:	push	{ip}		; (str ip, [sp, #-4]!)
   10658:	ldr	r0, [pc, #12]	; 1066c <_start@@Base+0x34>
   1065c:	ldr	r3, [pc, #12]	; 10670 <_start@@Base+0x38>
   10660:	bl	105fc <__libc_start_main@plt>
   10664:	bl	1062c <abort@plt>
   10668:	muleq	r1, r4, r9
   1066c:	andeq	r0, r1, r0, ror #14
   10670:	andeq	r0, r1, r4, lsr r9
   10674:	ldr	r3, [pc, #20]	; 10690 <_start@@Base+0x58>
   10678:	ldr	r2, [pc, #20]	; 10694 <_start@@Base+0x5c>
   1067c:	add	r3, pc, r3
   10680:	ldr	r2, [r3, r2]
   10684:	cmp	r2, #0
   10688:	bxeq	lr
   1068c:	b	10608 <__gmon_start__@plt>
   10690:	andeq	r0, r1, ip, ror r9
   10694:	andeq	r0, r0, r8, lsr #32
   10698:	ldr	r3, [pc, #28]	; 106bc <_start@@Base+0x84>
   1069c:	ldr	r0, [pc, #28]	; 106c0 <_start@@Base+0x88>
   106a0:	sub	r3, r3, r0
   106a4:	cmp	r3, #6
   106a8:	bxls	lr
   106ac:	ldr	r3, [pc, #16]	; 106c4 <_start@@Base+0x8c>
   106b0:	cmp	r3, #0
   106b4:	bxeq	lr
   106b8:	bx	r3
   106bc:	andeq	r1, r2, r7, lsr r0
   106c0:	andeq	r1, r2, r4, lsr r0
   106c4:	andeq	r0, r0, r0
   106c8:	ldr	r1, [pc, #36]	; 106f4 <_start@@Base+0xbc>
   106cc:	ldr	r0, [pc, #36]	; 106f8 <_start@@Base+0xc0>
   106d0:	sub	r1, r1, r0
   106d4:	asr	r1, r1, #2
   106d8:	add	r1, r1, r1, lsr #31
   106dc:	asrs	r1, r1, #1
   106e0:	bxeq	lr
   106e4:	ldr	r3, [pc, #16]	; 106fc <_start@@Base+0xc4>
   106e8:	cmp	r3, #0
   106ec:	bxeq	lr
   106f0:	bx	r3
   106f4:	andeq	r1, r2, r4, lsr r0
   106f8:	andeq	r1, r2, r4, lsr r0
   106fc:	andeq	r0, r0, r0
   10700:	push	{r4, lr}
   10704:	ldr	r4, [pc, #24]	; 10724 <_start@@Base+0xec>
   10708:	ldrb	r3, [r4]
   1070c:	cmp	r3, #0
   10710:	popne	{r4, pc}
   10714:	bl	10698 <_start@@Base+0x60>
   10718:	mov	r3, #1
   1071c:	strb	r3, [r4]
   10720:	pop	{r4, pc}
   10724:	andeq	r1, r2, r4, lsr r0
   10728:	ldr	r0, [pc, #40]	; 10758 <_start@@Base+0x120>
   1072c:	ldr	r3, [r0]
   10730:	cmp	r3, #0
   10734:	bne	1073c <_start@@Base+0x104>
   10738:	b	106c8 <_start@@Base+0x90>
   1073c:	ldr	r3, [pc, #24]	; 1075c <_start@@Base+0x124>
   10740:	cmp	r3, #0
   10744:	beq	10738 <_start@@Base+0x100>
   10748:	push	{r4, lr}
   1074c:	blx	r3
   10750:	pop	{r4, lr}
   10754:	b	106c8 <_start@@Base+0x90>
   10758:	andeq	r0, r2, r4, lsl pc
   1075c:	andeq	r0, r0, r0

00010760 <main@@Base>:
   10760:	push	{fp, lr}
   10764:	add	fp, sp, #4
   10768:	sub	sp, sp, #24
   1076c:	sub	r3, fp, #28
   10770:	mov	r1, r3
   10774:	ldr	r3, [pc, #416]	; 1091c <main@@Base+0x1bc>
   10778:	add	r3, pc, r3
   1077c:	mov	r0, r3
   10780:	bl	10620 <__isoc99_scanf@plt>
   10784:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10788:	cmp	r3, #0
   1078c:	bne	10798 <main@@Base+0x38>
   10790:	mov	r0, #0
   10794:	bl	10614 <exit@plt>
   10798:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1079c:	lsl	r3, r3, #3
   107a0:	mov	r0, r3
   107a4:	bl	105f0 <malloc@plt>
   107a8:	mov	r3, r0
   107ac:	str	r3, [fp, #-24]	; 0xffffffe8
   107b0:	mov	r3, #0
   107b4:	str	r3, [fp, #-12]
   107b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   107bc:	sub	r3, r3, #1
   107c0:	str	r3, [fp, #-16]
   107c4:	mov	r3, #0
   107c8:	str	r3, [fp, #-8]
   107cc:	b	107f8 <main@@Base+0x98>
   107d0:	ldr	r3, [fp, #-8]
   107d4:	lsl	r3, r3, #2
   107d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   107dc:	add	r3, r2, r3
   107e0:	ldr	r2, [fp, #-8]
   107e4:	add	r2, r2, #1
   107e8:	str	r2, [r3]
   107ec:	ldr	r3, [fp, #-8]
   107f0:	add	r3, r3, #1
   107f4:	str	r3, [fp, #-8]
   107f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   107fc:	ldr	r2, [fp, #-8]
   10800:	cmp	r2, r3
   10804:	blt	107d0 <main@@Base+0x70>
   10808:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1080c:	str	r3, [fp, #-20]	; 0xffffffec
   10810:	ldr	r3, [pc, #264]	; 10920 <main@@Base+0x1c0>
   10814:	add	r3, pc, r3
   10818:	mov	r0, r3
   1081c:	bl	105e4 <printf@plt>
   10820:	b	108a4 <main@@Base+0x144>
   10824:	ldr	r3, [fp, #-12]
   10828:	lsl	r3, r3, #2
   1082c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10830:	add	r3, r2, r3
   10834:	ldr	r3, [r3]
   10838:	mov	r1, r3
   1083c:	ldr	r3, [pc, #224]	; 10924 <main@@Base+0x1c4>
   10840:	add	r3, pc, r3
   10844:	mov	r0, r3
   10848:	bl	105e4 <printf@plt>
   1084c:	ldr	r3, [fp, #-12]
   10850:	add	r3, r3, #1
   10854:	str	r3, [fp, #-12]
   10858:	ldr	r3, [fp, #-16]
   1085c:	add	r3, r3, #1
   10860:	str	r3, [fp, #-16]
   10864:	ldr	r3, [fp, #-16]
   10868:	lsl	r3, r3, #2
   1086c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10870:	add	r3, r2, r3
   10874:	ldr	r2, [fp, #-12]
   10878:	lsl	r2, r2, #2
   1087c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10880:	add	r2, r1, r2
   10884:	ldr	r2, [r2]
   10888:	str	r2, [r3]
   1088c:	ldr	r3, [fp, #-12]
   10890:	add	r3, r3, #1
   10894:	str	r3, [fp, #-12]
   10898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1089c:	sub	r3, r3, #1
   108a0:	str	r3, [fp, #-20]	; 0xffffffec
   108a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   108a8:	cmp	r3, #2
   108ac:	bgt	10824 <main@@Base+0xc4>
   108b0:	ldr	r3, [fp, #-12]
   108b4:	add	r2, r3, #1
   108b8:	str	r2, [fp, #-12]
   108bc:	lsl	r3, r3, #2
   108c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   108c4:	add	r3, r2, r3
   108c8:	ldr	r3, [r3]
   108cc:	mov	r1, r3
   108d0:	ldr	r3, [pc, #80]	; 10928 <main@@Base+0x1c8>
   108d4:	add	r3, pc, r3
   108d8:	mov	r0, r3
   108dc:	bl	105e4 <printf@plt>
   108e0:	ldr	r3, [pc, #68]	; 1092c <main@@Base+0x1cc>
   108e4:	add	r3, pc, r3
   108e8:	mov	r0, r3
   108ec:	bl	105e4 <printf@plt>
   108f0:	ldr	r3, [fp, #-12]
   108f4:	lsl	r3, r3, #2
   108f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   108fc:	add	r3, r2, r3
   10900:	ldr	r3, [r3]
   10904:	mov	r1, r3
   10908:	ldr	r3, [pc, #32]	; 10930 <main@@Base+0x1d0>
   1090c:	add	r3, pc, r3
   10910:	mov	r0, r3
   10914:	bl	105e4 <printf@plt>
   10918:	b	1076c <main@@Base+0xc>
   1091c:	andeq	r0, r0, r4, lsr #4
   10920:	andeq	r0, r0, ip, lsl #3
   10924:	andeq	r0, r0, r4, ror r1
   10928:	andeq	r0, r0, r8, asr #1
   1092c:	ldrdeq	r0, [r0], -r8
   10930:	andeq	r0, r0, r4, asr #1

00010934 <__libc_csu_init@@Base>:
   10934:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10938:	mov	r7, r0
   1093c:	ldr	r6, [pc, #72]	; 1098c <__libc_csu_init@@Base+0x58>
   10940:	ldr	r5, [pc, #72]	; 10990 <__libc_csu_init@@Base+0x5c>
   10944:	add	r6, pc, r6
   10948:	add	r5, pc, r5
   1094c:	sub	r6, r6, r5
   10950:	mov	r8, r1
   10954:	mov	r9, r2
   10958:	bl	105c4 <printf@plt-0x20>
   1095c:	asrs	r6, r6, #2
   10960:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10964:	mov	r4, #0
   10968:	add	r4, r4, #1
   1096c:	ldr	r3, [r5], #4
   10970:	mov	r2, r9
   10974:	mov	r1, r8
   10978:	mov	r0, r7
   1097c:	blx	r3
   10980:	cmp	r6, r4
   10984:	bne	10968 <__libc_csu_init@@Base+0x34>
   10988:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1098c:	andeq	r0, r1, r4, asr #11
   10990:			; <UNDEFINED> instruction: 0x000105bc

00010994 <__libc_csu_fini@@Base>:
   10994:	bx	lr

Disassembly of section .fini:

00010998 <.fini>:
   10998:	push	{r3, lr}
   1099c:	pop	{r3, pc}
