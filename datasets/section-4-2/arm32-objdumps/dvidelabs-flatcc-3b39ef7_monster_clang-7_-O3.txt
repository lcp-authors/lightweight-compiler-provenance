
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #94208	; 0x17000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #94208	; 0x17000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #94208	; 0x17000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <memcmp@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #94208	; 0x17000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <realloc@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #94208	; 0x17000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <puts@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #94208	; 0x17000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <malloc@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #94208	; 0x17000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__libc_start_main@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #94208	; 0x17000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <__gmon_start__@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #94208	; 0x17000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #94208	; 0x17000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #94208	; 0x17000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #94208	; 0x17000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #94208	; 0x17000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #94208	; 0x17000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #94208	; 0x17000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123c4 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	andeq	r8, r1, r8, ror r6
   12458:	andeq	r3, r1, r4, lsl #5
   1245c:	andeq	r8, r1, r8, lsl r6
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123d0 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, r8, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	sl, r2, r4, asr r0
   124a8:	andeq	sl, r2, r4, asr r0
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	sl, r2, r4, asr r0
   124e0:	andeq	sl, r2, r4, asr r0
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	sl, r2, r4, asr r0
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	add	fp, sp, #28
   1251c:	sub	sp, sp, #20
   12520:	mov	r9, r1
   12524:	movw	r1, #34452	; 0x8694
   12528:	mov	r4, r0
   1252c:	movt	r1, #1
   12530:	bl	17ab4 <flatcc_builder_create_string_str@@Base>
   12534:	movw	r1, #34458	; 0x869a
   12538:	mov	r5, r0
   1253c:	mov	r0, r4
   12540:	movt	r1, #1
   12544:	bl	17ab4 <flatcc_builder_create_string_str@@Base>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, #2
   12554:	bl	15a04 <flatcc_builder_start_table@@Base>
   12558:	mov	r8, #0
   1255c:	cmp	r5, #0
   12560:	mov	r7, #0
   12564:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   12568:	cmp	r0, #0
   1256c:	mov	r7, #0
   12570:	bne	125dc <create_monster_bottom_up@@Base+0xc8>
   12574:	mov	r0, r4
   12578:	mov	r1, #0
   1257c:	mov	r7, #0
   12580:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   1258c:	str	r5, [r0]
   12590:	mov	r0, r4
   12594:	mov	r1, #1
   12598:	mov	r2, #2
   1259c:	mov	r3, #2
   125a0:	bl	16d74 <flatcc_builder_table_add@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   125ac:	mov	r1, #3
   125b0:	mov	r2, #0
   125b4:	strh	r1, [r0]
   125b8:	movw	r1, #35362	; 0x8a22
   125bc:	mov	r0, r4
   125c0:	movt	r1, #1
   125c4:	bl	16324 <flatcc_builder_check_required@@Base>
   125c8:	cmp	r0, #0
   125cc:	beq	12a00 <create_monster_bottom_up@@Base+0x4ec>
   125d0:	mov	r0, r4
   125d4:	bl	163b4 <flatcc_builder_end_table@@Base>
   125d8:	mov	r7, r0
   125dc:	mov	r0, r4
   125e0:	mov	r1, #2
   125e4:	bl	15a04 <flatcc_builder_start_table@@Base>
   125e8:	cmp	r6, #0
   125ec:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   125f0:	cmp	r0, #0
   125f4:	bne	12660 <create_monster_bottom_up@@Base+0x14c>
   125f8:	mov	r0, r4
   125fc:	mov	r1, #0
   12600:	mov	r8, #0
   12604:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12610:	str	r6, [r0]
   12614:	mov	r0, r4
   12618:	mov	r1, #1
   1261c:	mov	r2, #2
   12620:	mov	r3, #2
   12624:	bl	16d74 <flatcc_builder_table_add@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12630:	mov	r1, #5
   12634:	mov	r2, #0
   12638:	strh	r1, [r0]
   1263c:	movw	r1, #35362	; 0x8a22
   12640:	mov	r0, r4
   12644:	movt	r1, #1
   12648:	bl	16324 <flatcc_builder_check_required@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	12a00 <create_monster_bottom_up@@Base+0x4ec>
   12654:	mov	r0, r4
   12658:	bl	163b4 <flatcc_builder_end_table@@Base>
   1265c:	mov	r8, r0
   12660:	movw	r1, #34462	; 0x869e
   12664:	mov	r0, r4
   12668:	movt	r1, #1
   1266c:	bl	17ab4 <flatcc_builder_create_string_str@@Base>
   12670:	mov	r6, r0
   12674:	movw	r0, #35352	; 0x8a18
   12678:	mov	r1, #1
   1267c:	mov	r2, #10
   12680:	mov	r3, #1
   12684:	movt	r0, #1
   12688:	str	r1, [sp]
   1268c:	add	r1, sp, #8
   12690:	vldr	d16, [r0]
   12694:	movw	r0, #2312	; 0x908
   12698:	strh	r0, [sp, #16]
   1269c:	mvn	r0, #0
   126a0:	str	r0, [sp, #4]
   126a4:	mov	r0, r4
   126a8:	vstr	d16, [sp, #8]
   126ac:	bl	16574 <flatcc_builder_create_vector@@Base>
   126b0:	mov	sl, r0
   126b4:	mov	r0, r4
   126b8:	bl	154d8 <flatcc_builder_start_offset_vector@@Base>
   126bc:	cmp	r7, #0
   126c0:	beq	126d0 <create_monster_bottom_up@@Base+0x1bc>
   126c4:	mov	r0, r4
   126c8:	mov	r1, r7
   126cc:	bl	14d80 <flatcc_builder_offset_vector_push@@Base>
   126d0:	cmp	r8, #0
   126d4:	beq	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d8:	mov	r0, r4
   126dc:	mov	r1, r8
   126e0:	bl	14d80 <flatcc_builder_offset_vector_push@@Base>
   126e4:	mov	r0, r4
   126e8:	bl	15790 <flatcc_builder_end_offset_vector@@Base>
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #0
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	1440c <flatcc_builder_start_buffer@@Base>
   12704:	cmp	r9, #0
   12708:	beq	12868 <create_monster_bottom_up@@Base+0x354>
   1270c:	cmp	r0, #0
   12710:	bne	12720 <create_monster_bottom_up@@Base+0x20c>
   12714:	mov	r0, r4
   12718:	mov	r1, #10
   1271c:	bl	15a04 <flatcc_builder_start_table@@Base>
   12720:	mov	r0, r4
   12724:	mov	r1, #0
   12728:	mov	r2, #12
   1272c:	mov	r3, #4
   12730:	bl	16d74 <flatcc_builder_table_add@@Base>
   12734:	cmp	r0, #0
   12738:	beq	12754 <create_monster_bottom_up@@Base+0x240>
   1273c:	movw	r3, #0
   12740:	mov	r2, #1065353216	; 0x3f800000
   12744:	mov	r1, #1073741824	; 0x40000000
   12748:	movt	r3, #16448	; 0x4040
   1274c:	str	r2, [r0]
   12750:	stmib	r0, {r1, r3}
   12754:	mov	r0, r4
   12758:	mov	r1, #2
   1275c:	mov	r2, #2
   12760:	mov	r3, #2
   12764:	bl	16d74 <flatcc_builder_table_add@@Base>
   12768:	cmp	r0, #0
   1276c:	movne	r1, #300	; 0x12c
   12770:	strhne	r1, [r0]
   12774:	cmp	r6, #0
   12778:	beq	12790 <create_monster_bottom_up@@Base+0x27c>
   1277c:	mov	r0, r4
   12780:	mov	r1, #3
   12784:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12788:	cmp	r0, #0
   1278c:	strne	r6, [r0]
   12790:	cmp	sl, #0
   12794:	beq	127ac <create_monster_bottom_up@@Base+0x298>
   12798:	mov	r0, r4
   1279c:	mov	r1, #5
   127a0:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   127a4:	cmp	r0, #0
   127a8:	strne	sl, [r0]
   127ac:	mov	r0, r4
   127b0:	mov	r1, #6
   127b4:	mov	r2, #1
   127b8:	mov	r3, #1
   127bc:	bl	16d74 <flatcc_builder_table_add@@Base>
   127c0:	cmp	r0, #0
   127c4:	movne	r1, #0
   127c8:	strbne	r1, [r0]
   127cc:	cmp	r5, #0
   127d0:	beq	127e8 <create_monster_bottom_up@@Base+0x2d4>
   127d4:	mov	r0, r4
   127d8:	mov	r1, #7
   127dc:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   127e0:	cmp	r0, #0
   127e4:	strne	r5, [r0]
   127e8:	cmp	r8, #0
   127ec:	beq	1282c <create_monster_bottom_up@@Base+0x318>
   127f0:	mov	r0, r4
   127f4:	mov	r1, #8
   127f8:	mov	r2, #1
   127fc:	mov	r3, #1
   12800:	bl	16d74 <flatcc_builder_table_add@@Base>
   12804:	cmp	r0, #0
   12808:	beq	1282c <create_monster_bottom_up@@Base+0x318>
   1280c:	mov	r5, r0
   12810:	mov	r0, r4
   12814:	mov	r1, #9
   12818:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   1281c:	cmp	r0, #0
   12820:	movne	r1, #1
   12824:	strbne	r1, [r5]
   12828:	strne	r8, [r0]
   1282c:	movw	r1, #35364	; 0x8a24
   12830:	mov	r0, r4
   12834:	mov	r2, #0
   12838:	movt	r1, #1
   1283c:	bl	16324 <flatcc_builder_check_required@@Base>
   12840:	cmp	r0, #0
   12844:	beq	129e0 <create_monster_bottom_up@@Base+0x4cc>
   12848:	mov	r0, r4
   1284c:	bl	163b4 <flatcc_builder_end_table@@Base>
   12850:	mov	r1, r0
   12854:	mov	r0, r4
   12858:	bl	145fc <flatcc_builder_end_buffer@@Base>
   1285c:	mov	r0, #0
   12860:	sub	sp, fp, #28
   12864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12868:	cmp	r0, #0
   1286c:	beq	1287c <create_monster_bottom_up@@Base+0x368>
   12870:	mov	r0, #0
   12874:	sub	sp, fp, #28
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1287c:	mov	r0, r4
   12880:	mov	r1, #10
   12884:	bl	15a04 <flatcc_builder_start_table@@Base>
   12888:	mov	r9, #0
   1288c:	cmp	r0, #0
   12890:	beq	128a0 <create_monster_bottom_up@@Base+0x38c>
   12894:	mov	r0, r4
   12898:	mov	r1, r9
   1289c:	b	12858 <create_monster_bottom_up@@Base+0x344>
   128a0:	mov	r0, r4
   128a4:	mov	r1, #0
   128a8:	mov	r2, #12
   128ac:	mov	r3, #4
   128b0:	mov	r9, #0
   128b4:	bl	16d74 <flatcc_builder_table_add@@Base>
   128b8:	cmp	r0, #0
   128bc:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   128c0:	movw	r3, #0
   128c4:	mov	r2, #1065353216	; 0x3f800000
   128c8:	cmp	r6, #0
   128cc:	mov	r1, #1073741824	; 0x40000000
   128d0:	movt	r3, #16448	; 0x4040
   128d4:	str	r2, [r0]
   128d8:	stmib	r0, {r1, r3}
   128dc:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   128e0:	mov	r0, r4
   128e4:	mov	r1, #3
   128e8:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   128ec:	cmp	r0, #0
   128f0:	strne	r6, [r0]
   128f4:	cmpne	sl, #0
   128f8:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   128fc:	mov	r0, r4
   12900:	mov	r1, #5
   12904:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12908:	cmp	r0, #0
   1290c:	strne	sl, [r0]
   12910:	cmpne	r5, #0
   12914:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   12918:	mov	r0, r4
   1291c:	mov	r1, #7
   12920:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12924:	cmp	r0, #0
   12928:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   1292c:	str	r5, [r0]
   12930:	mov	r0, r4
   12934:	mov	r1, #9
   12938:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   1293c:	cmp	r0, #0
   12940:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   12944:	str	r8, [r0]
   12948:	mov	r0, r4
   1294c:	mov	r1, #2
   12950:	mov	r2, #2
   12954:	mov	r3, #2
   12958:	bl	16d74 <flatcc_builder_table_add@@Base>
   1295c:	cmp	r0, #0
   12960:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   12964:	mov	r1, #300	; 0x12c
   12968:	mov	r2, #1
   1296c:	mov	r3, #1
   12970:	strh	r1, [r0]
   12974:	mov	r0, r4
   12978:	mov	r1, #6
   1297c:	bl	16d74 <flatcc_builder_table_add@@Base>
   12980:	cmp	r0, #0
   12984:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   12988:	mov	r9, #0
   1298c:	mov	r1, #8
   12990:	mov	r2, #1
   12994:	mov	r3, #1
   12998:	mov	r5, #1
   1299c:	strb	r9, [r0]
   129a0:	mov	r0, r4
   129a4:	bl	16d74 <flatcc_builder_table_add@@Base>
   129a8:	cmp	r0, #0
   129ac:	beq	12894 <create_monster_bottom_up@@Base+0x380>
   129b0:	movw	r1, #35364	; 0x8a24
   129b4:	strb	r5, [r0]
   129b8:	mov	r0, r4
   129bc:	mov	r2, #0
   129c0:	movt	r1, #1
   129c4:	bl	16324 <flatcc_builder_check_required@@Base>
   129c8:	cmp	r0, #0
   129cc:	beq	129e0 <create_monster_bottom_up@@Base+0x4cc>
   129d0:	mov	r0, r4
   129d4:	bl	163b4 <flatcc_builder_end_table@@Base>
   129d8:	mov	r9, r0
   129dc:	b	12894 <create_monster_bottom_up@@Base+0x380>
   129e0:	movw	r0, #34908	; 0x885c
   129e4:	movw	r1, #34739	; 0x87b3
   129e8:	movw	r3, #35067	; 0x88fb
   129ec:	mov	r2, #50	; 0x32
   129f0:	movt	r0, #1
   129f4:	movt	r1, #1
   129f8:	movt	r3, #1
   129fc:	bl	12418 <__assert_fail@plt>
   12a00:	movw	r0, #34583	; 0x8717
   12a04:	movw	r1, #34739	; 0x87b3
   12a08:	movw	r3, #34831	; 0x880f
   12a0c:	mov	r2, #52	; 0x34
   12a10:	movt	r0, #1
   12a14:	movt	r1, #1
   12a18:	movt	r3, #1
   12a1c:	bl	12418 <__assert_fail@plt>

00012a20 <create_monster_top_down@@Base>:
   12a20:	push	{r4, r5, r6, sl, fp, lr}
   12a24:	add	fp, sp, #16
   12a28:	sub	sp, sp, #24
   12a2c:	mov	r4, r0
   12a30:	movw	r0, #35352	; 0x8a18
   12a34:	mov	r1, #0
   12a38:	mov	r2, #0
   12a3c:	mov	r3, #0
   12a40:	movt	r0, #1
   12a44:	vldr	d16, [r0]
   12a48:	movw	r0, #2312	; 0x908
   12a4c:	strh	r0, [sp, #16]
   12a50:	mov	r0, r4
   12a54:	vstr	d16, [sp, #8]
   12a58:	bl	1440c <flatcc_builder_start_buffer@@Base>
   12a5c:	cmp	r0, #0
   12a60:	bne	12a70 <create_monster_top_down@@Base+0x50>
   12a64:	mov	r0, r4
   12a68:	mov	r1, #10
   12a6c:	bl	15a04 <flatcc_builder_start_table@@Base>
   12a70:	mov	r0, r4
   12a74:	mov	r1, #0
   12a78:	mov	r2, #12
   12a7c:	mov	r3, #4
   12a80:	bl	16d74 <flatcc_builder_table_add@@Base>
   12a84:	cmp	r0, #0
   12a88:	beq	12aa4 <create_monster_top_down@@Base+0x84>
   12a8c:	movw	r3, #0
   12a90:	mov	r2, #1065353216	; 0x3f800000
   12a94:	mov	r1, #1073741824	; 0x40000000
   12a98:	movt	r3, #16448	; 0x4040
   12a9c:	str	r2, [r0]
   12aa0:	stmib	r0, {r1, r3}
   12aa4:	mov	r0, r4
   12aa8:	mov	r1, #2
   12aac:	mov	r2, #2
   12ab0:	mov	r3, #2
   12ab4:	bl	16d74 <flatcc_builder_table_add@@Base>
   12ab8:	cmp	r0, #0
   12abc:	movne	r1, #300	; 0x12c
   12ac0:	strhne	r1, [r0]
   12ac4:	movw	r1, #34462	; 0x869e
   12ac8:	mov	r0, r4
   12acc:	movt	r1, #1
   12ad0:	bl	17ab4 <flatcc_builder_create_string_str@@Base>
   12ad4:	cmp	r0, #0
   12ad8:	beq	12af4 <create_monster_top_down@@Base+0xd4>
   12adc:	mov	r5, r0
   12ae0:	mov	r0, r4
   12ae4:	mov	r1, #3
   12ae8:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12aec:	cmp	r0, #0
   12af0:	strne	r5, [r0]
   12af4:	mvn	r0, #0
   12af8:	mov	r1, #1
   12afc:	mov	r2, #10
   12b00:	mov	r3, #1
   12b04:	str	r1, [sp]
   12b08:	str	r0, [sp, #4]
   12b0c:	add	r1, sp, #8
   12b10:	mov	r0, r4
   12b14:	bl	16574 <flatcc_builder_create_vector@@Base>
   12b18:	cmp	r0, #0
   12b1c:	beq	12b38 <create_monster_top_down@@Base+0x118>
   12b20:	mov	r5, r0
   12b24:	mov	r0, r4
   12b28:	mov	r1, #5
   12b2c:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12b30:	cmp	r0, #0
   12b34:	strne	r5, [r0]
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #6
   12b40:	mov	r2, #1
   12b44:	mov	r3, #1
   12b48:	bl	16d74 <flatcc_builder_table_add@@Base>
   12b4c:	cmp	r0, #0
   12b50:	movne	r1, #0
   12b54:	strbne	r1, [r0]
   12b58:	mov	r0, r4
   12b5c:	bl	154d8 <flatcc_builder_start_offset_vector@@Base>
   12b60:	movw	r1, #34452	; 0x8694
   12b64:	mov	r0, r4
   12b68:	movt	r1, #1
   12b6c:	bl	17ab4 <flatcc_builder_create_string_str@@Base>
   12b70:	mov	r1, r0
   12b74:	mov	r0, r4
   12b78:	mov	r2, #3
   12b7c:	bl	12c6c <create_monster_top_down@@Base+0x24c>
   12b80:	movw	r1, #34458	; 0x869a
   12b84:	mov	r0, r4
   12b88:	movt	r1, #1
   12b8c:	bl	17ab4 <flatcc_builder_create_string_str@@Base>
   12b90:	mov	r1, r0
   12b94:	mov	r0, r4
   12b98:	mov	r2, #5
   12b9c:	bl	12c6c <create_monster_top_down@@Base+0x24c>
   12ba0:	ldr	r6, [r0]
   12ba4:	mov	r0, r4
   12ba8:	bl	15790 <flatcc_builder_end_offset_vector@@Base>
   12bac:	cmp	r0, #0
   12bb0:	beq	12bcc <create_monster_top_down@@Base+0x1ac>
   12bb4:	mov	r5, r0
   12bb8:	mov	r0, r4
   12bbc:	mov	r1, #7
   12bc0:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12bc4:	cmp	r0, #0
   12bc8:	strne	r5, [r0]
   12bcc:	cmp	r6, #0
   12bd0:	beq	12c10 <create_monster_top_down@@Base+0x1f0>
   12bd4:	mov	r0, r4
   12bd8:	mov	r1, #8
   12bdc:	mov	r2, #1
   12be0:	mov	r3, #1
   12be4:	bl	16d74 <flatcc_builder_table_add@@Base>
   12be8:	cmp	r0, #0
   12bec:	beq	12c10 <create_monster_top_down@@Base+0x1f0>
   12bf0:	mov	r5, r0
   12bf4:	mov	r0, r4
   12bf8:	mov	r1, #9
   12bfc:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12c00:	cmp	r0, #0
   12c04:	movne	r1, #1
   12c08:	strbne	r1, [r5]
   12c0c:	strne	r6, [r0]
   12c10:	movw	r1, #35364	; 0x8a24
   12c14:	mov	r0, r4
   12c18:	mov	r2, #0
   12c1c:	movt	r1, #1
   12c20:	bl	16324 <flatcc_builder_check_required@@Base>
   12c24:	cmp	r0, #0
   12c28:	beq	12c4c <create_monster_top_down@@Base+0x22c>
   12c2c:	mov	r0, r4
   12c30:	bl	163b4 <flatcc_builder_end_table@@Base>
   12c34:	mov	r1, r0
   12c38:	mov	r0, r4
   12c3c:	bl	145fc <flatcc_builder_end_buffer@@Base>
   12c40:	mov	r0, #0
   12c44:	sub	sp, fp, #16
   12c48:	pop	{r4, r5, r6, sl, fp, pc}
   12c4c:	movw	r0, #34908	; 0x885c
   12c50:	movw	r1, #34739	; 0x87b3
   12c54:	movw	r3, #35067	; 0x88fb
   12c58:	mov	r2, #50	; 0x32
   12c5c:	movt	r0, #1
   12c60:	movt	r1, #1
   12c64:	movt	r3, #1
   12c68:	bl	12418 <__assert_fail@plt>
   12c6c:	push	{r4, r5, r6, sl, fp, lr}
   12c70:	add	fp, sp, #16
   12c74:	mov	r6, r1
   12c78:	mov	r1, #2
   12c7c:	mov	r5, r2
   12c80:	mov	r4, r0
   12c84:	bl	15a04 <flatcc_builder_start_table@@Base>
   12c88:	cmp	r6, #0
   12c8c:	beq	12d14 <create_monster_top_down@@Base+0x2f4>
   12c90:	cmp	r0, #0
   12c94:	bne	12d14 <create_monster_top_down@@Base+0x2f4>
   12c98:	mov	r0, r4
   12c9c:	mov	r1, #0
   12ca0:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	beq	12d14 <create_monster_top_down@@Base+0x2f4>
   12cac:	cmp	r5, #0
   12cb0:	str	r6, [r0]
   12cb4:	beq	12cd8 <create_monster_top_down@@Base+0x2b8>
   12cb8:	mov	r0, r4
   12cbc:	mov	r1, #1
   12cc0:	mov	r2, #2
   12cc4:	mov	r3, #2
   12cc8:	bl	16d74 <flatcc_builder_table_add@@Base>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12d14 <create_monster_top_down@@Base+0x2f4>
   12cd4:	strh	r5, [r0]
   12cd8:	movw	r1, #35362	; 0x8a22
   12cdc:	mov	r0, r4
   12ce0:	mov	r2, #0
   12ce4:	movt	r1, #1
   12ce8:	bl	16324 <flatcc_builder_check_required@@Base>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d1c <create_monster_top_down@@Base+0x2fc>
   12cf4:	mov	r0, r4
   12cf8:	bl	163b4 <flatcc_builder_end_table@@Base>
   12cfc:	cmp	r0, #0
   12d00:	beq	12d14 <create_monster_top_down@@Base+0x2f4>
   12d04:	mov	r1, r0
   12d08:	mov	r0, r4
   12d0c:	pop	{r4, r5, r6, sl, fp, lr}
   12d10:	b	14d80 <flatcc_builder_offset_vector_push@@Base>
   12d14:	mov	r0, #0
   12d18:	pop	{r4, r5, r6, sl, fp, pc}
   12d1c:	movw	r0, #34583	; 0x8717
   12d20:	movw	r1, #34739	; 0x87b3
   12d24:	movw	r3, #34831	; 0x880f
   12d28:	mov	r2, #52	; 0x34
   12d2c:	movt	r0, #1
   12d30:	movt	r1, #1
   12d34:	movt	r3, #1
   12d38:	bl	12418 <__assert_fail@plt>

00012d3c <access_monster_buffer@@Base>:
   12d3c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d40:	add	fp, sp, #24
   12d44:	cmp	r0, #0
   12d48:	beq	130c4 <access_monster_buffer@@Base+0x388>
   12d4c:	mov	r4, r0
   12d50:	ldr	r0, [r0]
   12d54:	ldr	r0, [r4, r0]!
   12d58:	mov	r5, r4
   12d5c:	ldrh	r8, [r5, -r0]!
   12d60:	cmp	r8, #9
   12d64:	bls	12d80 <access_monster_buffer@@Base+0x44>
   12d68:	ldrh	r0, [r5, #8]
   12d6c:	cmp	r0, #0
   12d70:	beq	12d90 <access_monster_buffer@@Base+0x54>
   12d74:	add	r0, r4, r0
   12d78:	ldrh	r1, [r0]
   12d7c:	b	12d94 <access_monster_buffer@@Base+0x58>
   12d80:	mov	r1, #100	; 0x64
   12d84:	cmp	r8, #8
   12d88:	bcs	12d94 <access_monster_buffer@@Base+0x58>
   12d8c:	b	12fcc <access_monster_buffer@@Base+0x290>
   12d90:	mov	r1, #100	; 0x64
   12d94:	ldrh	r7, [r5, #6]
   12d98:	mov	r6, #0
   12d9c:	cmp	r7, #0
   12da0:	addne	r0, r4, r7
   12da4:	ldrhne	r2, [r0]
   12da8:	mov	r0, #0
   12dac:	moveq	r2, #150	; 0x96
   12db0:	cmp	r8, #12
   12db4:	bcc	12dd4 <access_monster_buffer@@Base+0x98>
   12db8:	ldrh	r0, [r5, #10]
   12dbc:	cmp	r0, #0
   12dc0:	beq	12fbc <access_monster_buffer@@Base+0x280>
   12dc4:	mov	r3, r4
   12dc8:	ldr	r0, [r3, r0]!
   12dcc:	ldr	r6, [r3, r0]!
   12dd0:	add	r0, r3, #4
   12dd4:	cmp	r1, #300	; 0x12c
   12dd8:	bne	12fcc <access_monster_buffer@@Base+0x290>
   12ddc:	cmp	r2, #150	; 0x96
   12de0:	bne	130e4 <access_monster_buffer@@Base+0x3a8>
   12de4:	movw	r1, #34462	; 0x869e
   12de8:	movt	r1, #1
   12dec:	bl	12370 <strcmp@plt>
   12df0:	cmp	r0, #0
   12df4:	bne	13104 <access_monster_buffer@@Base+0x3c8>
   12df8:	cmp	r6, #3
   12dfc:	bne	13124 <access_monster_buffer@@Base+0x3e8>
   12e00:	cmp	r8, #10
   12e04:	bcc	13064 <access_monster_buffer@@Base+0x328>
   12e08:	ldrh	r0, [r5, #8]
   12e0c:	cmp	r0, #0
   12e10:	beq	13064 <access_monster_buffer@@Base+0x328>
   12e14:	cmp	r7, #0
   12e18:	bne	13144 <access_monster_buffer@@Base+0x408>
   12e1c:	ldrh	r0, [r5, #4]
   12e20:	cmp	r0, #0
   12e24:	addsne	r0, r4, r0
   12e28:	bne	12e4c <access_monster_buffer@@Base+0x110>
   12e2c:	movw	r0, #40488	; 0x9e28
   12e30:	movw	r1, #34466	; 0x86a2
   12e34:	movw	r3, #34540	; 0x86ec
   12e38:	mov	r2, #232	; 0xe8
   12e3c:	movt	r0, #1
   12e40:	movt	r1, #1
   12e44:	movt	r3, #1
   12e48:	bl	12418 <__assert_fail@plt>
   12e4c:	vldr	s0, [r0]
   12e50:	vmov.f32	s2, #112	; 0x3f800000  1.0
   12e54:	vcmp.f32	s0, s2
   12e58:	vmrs	APSR_nzcv, fpscr
   12e5c:	bne	13184 <access_monster_buffer@@Base+0x448>
   12e60:	vldr	s0, [r0, #4]
   12e64:	vmov.f32	s2, #0	; 0x40000000  2.0
   12e68:	vcmp.f32	s0, s2
   12e6c:	vmrs	APSR_nzcv, fpscr
   12e70:	bne	131a4 <access_monster_buffer@@Base+0x468>
   12e74:	vldr	s0, [r0, #8]
   12e78:	vmov.f32	s2, #8	; 0x40400000  3.0
   12e7c:	vcmp.f32	s0, s2
   12e80:	vmrs	APSR_nzcv, fpscr
   12e84:	bne	131c4 <access_monster_buffer@@Base+0x488>
   12e88:	cmp	r8, #16
   12e8c:	bcc	13164 <access_monster_buffer@@Base+0x428>
   12e90:	ldrh	r1, [r5, #14]
   12e94:	cmp	r1, #0
   12e98:	beq	13164 <access_monster_buffer@@Base+0x428>
   12e9c:	mov	r0, r4
   12ea0:	ldr	r1, [r0, r1]!
   12ea4:	ldr	r1, [r0, r1]!
   12ea8:	cmp	r1, #10
   12eac:	bne	131e4 <access_monster_buffer@@Base+0x4a8>
   12eb0:	add	r0, r0, #4
   12eb4:	ldrb	r0, [r0, #2]
   12eb8:	cmp	r0, #2
   12ebc:	bne	13204 <access_monster_buffer@@Base+0x4c8>
   12ec0:	cmp	r8, #20
   12ec4:	bcc	13084 <access_monster_buffer@@Base+0x348>
   12ec8:	ldrh	r1, [r5, #18]
   12ecc:	cmp	r1, #0
   12ed0:	beq	13084 <access_monster_buffer@@Base+0x348>
   12ed4:	mov	r0, r4
   12ed8:	ldr	r1, [r0, r1]!
   12edc:	ldr	r1, [r0, r1]!
   12ee0:	cmp	r1, #2
   12ee4:	bne	13084 <access_monster_buffer@@Base+0x348>
   12ee8:	add	r1, r0, #4
   12eec:	ldr	r0, [r1, #4]!
   12ef0:	ldr	r0, [r1, r0]!
   12ef4:	mov	r2, r1
   12ef8:	ldrh	r3, [r2, -r0]!
   12efc:	cmp	r3, #6
   12f00:	bcc	130a4 <access_monster_buffer@@Base+0x368>
   12f04:	ldrh	r6, [r2, #4]
   12f08:	mov	r0, #0
   12f0c:	mov	r7, #0
   12f10:	cmp	r6, #0
   12f14:	movne	r0, r1
   12f18:	ldrne	r6, [r0, r6]!
   12f1c:	addne	r0, r0, r6
   12f20:	addne	r0, r0, #4
   12f24:	cmp	r3, #8
   12f28:	bcc	12f3c <access_monster_buffer@@Base+0x200>
   12f2c:	ldrh	r2, [r2, #6]
   12f30:	cmp	r2, #0
   12f34:	addne	r1, r1, r2
   12f38:	ldrhne	r7, [r1]
   12f3c:	cmp	r0, #0
   12f40:	beq	130a4 <access_monster_buffer@@Base+0x368>
   12f44:	movw	r1, #34458	; 0x869a
   12f48:	movt	r1, #1
   12f4c:	bl	12370 <strcmp@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	130a4 <access_monster_buffer@@Base+0x368>
   12f58:	cmp	r7, #5
   12f5c:	bne	13224 <access_monster_buffer@@Base+0x4e8>
   12f60:	cmp	r8, #22
   12f64:	bcc	1305c <access_monster_buffer@@Base+0x320>
   12f68:	ldrh	r0, [r5, #20]
   12f6c:	cmp	r0, #0
   12f70:	beq	1305c <access_monster_buffer@@Base+0x320>
   12f74:	ldrb	r0, [r4, r0]
   12f78:	cmp	r0, #1
   12f7c:	bne	1305c <access_monster_buffer@@Base+0x320>
   12f80:	cmp	r8, #24
   12f84:	bcc	12f9c <access_monster_buffer@@Base+0x260>
   12f88:	ldrh	r0, [r5, #22]
   12f8c:	cmp	r0, #0
   12f90:	ldrne	r0, [r4, r0]!
   12f94:	addsne	r1, r4, r0
   12f98:	bne	12fec <access_monster_buffer@@Base+0x2b0>
   12f9c:	movw	r0, #35146	; 0x894a
   12fa0:	movw	r1, #35184	; 0x8970
   12fa4:	movw	r3, #35275	; 0x89cb
   12fa8:	mov	r2, #148	; 0x94
   12fac:	movt	r0, #1
   12fb0:	movt	r1, #1
   12fb4:	movt	r3, #1
   12fb8:	bl	12418 <__assert_fail@plt>
   12fbc:	mov	r0, #0
   12fc0:	mov	r6, #0
   12fc4:	cmp	r1, #300	; 0x12c
   12fc8:	beq	12ddc <access_monster_buffer@@Base+0xa0>
   12fcc:	movw	r0, #40488	; 0x9e28
   12fd0:	movw	r1, #34466	; 0x86a2
   12fd4:	movw	r3, #34540	; 0x86ec
   12fd8:	mov	r2, #219	; 0xdb
   12fdc:	movt	r0, #1
   12fe0:	movt	r1, #1
   12fe4:	movt	r3, #1
   12fe8:	bl	12418 <__assert_fail@plt>
   12fec:	ldr	r0, [r1]
   12ff0:	mov	r2, r1
   12ff4:	mov	r4, #0
   12ff8:	ldrh	r3, [r2, -r0]!
   12ffc:	mov	r0, #0
   13000:	cmp	r3, #6
   13004:	bcc	13040 <access_monster_buffer@@Base+0x304>
   13008:	ldrh	r7, [r2, #4]
   1300c:	mov	r0, #0
   13010:	mov	r4, #0
   13014:	cmp	r7, #0
   13018:	movne	r0, r1
   1301c:	ldrne	r7, [r0, r7]!
   13020:	addne	r0, r0, r7
   13024:	addne	r0, r0, #4
   13028:	cmp	r3, #8
   1302c:	bcc	13040 <access_monster_buffer@@Base+0x304>
   13030:	ldrh	r2, [r2, #6]
   13034:	cmp	r2, #0
   13038:	addne	r1, r1, r2
   1303c:	ldrhne	r4, [r1]
   13040:	movw	r1, #34458	; 0x869a
   13044:	movt	r1, #1
   13048:	bl	12370 <strcmp@plt>
   1304c:	cmp	r0, #0
   13050:	bne	13244 <access_monster_buffer@@Base+0x508>
   13054:	cmp	r4, #5
   13058:	bne	13264 <access_monster_buffer@@Base+0x528>
   1305c:	mov	r0, #0
   13060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13064:	movw	r0, #40488	; 0x9e28
   13068:	movw	r1, #34466	; 0x86a2
   1306c:	movw	r3, #34540	; 0x86ec
   13070:	mov	r2, #227	; 0xe3
   13074:	movt	r0, #1
   13078:	movt	r1, #1
   1307c:	movt	r3, #1
   13080:	bl	12418 <__assert_fail@plt>
   13084:	movw	r0, #40488	; 0x9e28
   13088:	movw	r1, #34466	; 0x86a2
   1308c:	movw	r3, #34540	; 0x86ec
   13090:	movw	r2, #271	; 0x10f
   13094:	movt	r0, #1
   13098:	movt	r1, #1
   1309c:	movt	r3, #1
   130a0:	bl	12418 <__assert_fail@plt>
   130a4:	movw	r0, #40488	; 0x9e28
   130a8:	movw	r1, #34466	; 0x86a2
   130ac:	movw	r3, #34540	; 0x86ec
   130b0:	movw	r2, #275	; 0x113
   130b4:	movt	r0, #1
   130b8:	movt	r1, #1
   130bc:	movt	r3, #1
   130c0:	bl	12418 <__assert_fail@plt>
   130c4:	movw	r0, #40488	; 0x9e28
   130c8:	movw	r1, #34466	; 0x86a2
   130cc:	movw	r3, #34540	; 0x86ec
   130d0:	mov	r2, #211	; 0xd3
   130d4:	movt	r0, #1
   130d8:	movt	r1, #1
   130dc:	movt	r3, #1
   130e0:	bl	12418 <__assert_fail@plt>
   130e4:	movw	r0, #40488	; 0x9e28
   130e8:	movw	r1, #34466	; 0x86a2
   130ec:	movw	r3, #34540	; 0x86ec
   130f0:	mov	r2, #221	; 0xdd
   130f4:	movt	r0, #1
   130f8:	movt	r1, #1
   130fc:	movt	r3, #1
   13100:	bl	12418 <__assert_fail@plt>
   13104:	movw	r0, #40488	; 0x9e28
   13108:	movw	r1, #34466	; 0x86a2
   1310c:	movw	r3, #34540	; 0x86ec
   13110:	mov	r2, #222	; 0xde
   13114:	movt	r0, #1
   13118:	movt	r1, #1
   1311c:	movt	r3, #1
   13120:	bl	12418 <__assert_fail@plt>
   13124:	movw	r0, #40488	; 0x9e28
   13128:	movw	r1, #34466	; 0x86a2
   1312c:	movw	r3, #34540	; 0x86ec
   13130:	mov	r2, #223	; 0xdf
   13134:	movt	r0, #1
   13138:	movt	r1, #1
   1313c:	movt	r3, #1
   13140:	bl	12418 <__assert_fail@plt>
   13144:	movw	r0, #40488	; 0x9e28
   13148:	movw	r1, #34466	; 0x86a2
   1314c:	movw	r3, #34540	; 0x86ec
   13150:	mov	r2, #228	; 0xe4
   13154:	movt	r0, #1
   13158:	movt	r1, #1
   1315c:	movt	r3, #1
   13160:	bl	12418 <__assert_fail@plt>
   13164:	movw	r0, #40488	; 0x9e28
   13168:	movw	r1, #34466	; 0x86a2
   1316c:	movw	r3, #34540	; 0x86ec
   13170:	movw	r2, #261	; 0x105
   13174:	movt	r0, #1
   13178:	movt	r1, #1
   1317c:	movt	r3, #1
   13180:	bl	12418 <__assert_fail@plt>
   13184:	movw	r0, #40488	; 0x9e28
   13188:	movw	r1, #34466	; 0x86a2
   1318c:	movw	r3, #34540	; 0x86ec
   13190:	mov	r2, #240	; 0xf0
   13194:	movt	r0, #1
   13198:	movt	r1, #1
   1319c:	movt	r3, #1
   131a0:	bl	12418 <__assert_fail@plt>
   131a4:	movw	r0, #40488	; 0x9e28
   131a8:	movw	r1, #34466	; 0x86a2
   131ac:	movw	r3, #34540	; 0x86ec
   131b0:	mov	r2, #241	; 0xf1
   131b4:	movt	r0, #1
   131b8:	movt	r1, #1
   131bc:	movt	r3, #1
   131c0:	bl	12418 <__assert_fail@plt>
   131c4:	movw	r0, #40488	; 0x9e28
   131c8:	movw	r1, #34466	; 0x86a2
   131cc:	movw	r3, #34540	; 0x86ec
   131d0:	mov	r2, #242	; 0xf2
   131d4:	movt	r0, #1
   131d8:	movt	r1, #1
   131dc:	movt	r3, #1
   131e0:	bl	12418 <__assert_fail@plt>
   131e4:	movw	r0, #40488	; 0x9e28
   131e8:	movw	r1, #34466	; 0x86a2
   131ec:	movw	r3, #34540	; 0x86ec
   131f0:	movw	r2, #263	; 0x107
   131f4:	movt	r0, #1
   131f8:	movt	r1, #1
   131fc:	movt	r3, #1
   13200:	bl	12418 <__assert_fail@plt>
   13204:	movw	r0, #40488	; 0x9e28
   13208:	movw	r1, #34466	; 0x86a2
   1320c:	movw	r3, #34540	; 0x86ec
   13210:	movw	r2, #267	; 0x10b
   13214:	movt	r0, #1
   13218:	movt	r1, #1
   1321c:	movt	r3, #1
   13220:	bl	12418 <__assert_fail@plt>
   13224:	movw	r0, #40488	; 0x9e28
   13228:	movw	r1, #34466	; 0x86a2
   1322c:	movw	r3, #34540	; 0x86ec
   13230:	mov	r2, #276	; 0x114
   13234:	movt	r0, #1
   13238:	movt	r1, #1
   1323c:	movt	r3, #1
   13240:	bl	12418 <__assert_fail@plt>
   13244:	movw	r0, #40488	; 0x9e28
   13248:	movw	r1, #34466	; 0x86a2
   1324c:	movw	r3, #34540	; 0x86ec
   13250:	movw	r2, #286	; 0x11e
   13254:	movt	r0, #1
   13258:	movt	r1, #1
   1325c:	movt	r3, #1
   13260:	bl	12418 <__assert_fail@plt>
   13264:	movw	r0, #40488	; 0x9e28
   13268:	movw	r1, #34466	; 0x86a2
   1326c:	movw	r3, #34540	; 0x86ec
   13270:	movw	r2, #287	; 0x11f
   13274:	movt	r0, #1
   13278:	movt	r1, #1
   1327c:	movt	r3, #1
   13280:	bl	12418 <__assert_fail@plt>

00013284 <main@@Base>:
   13284:	push	{r4, r5, r6, sl, fp, lr}
   13288:	add	fp, sp, #16
   1328c:	sub	sp, sp, #240	; 0xf0
   13290:	add	r4, sp, #8
   13294:	mov	r0, r4
   13298:	bl	134f0 <flatcc_builder_init@@Base>
   1329c:	mov	r0, r4
   132a0:	mov	r1, #0
   132a4:	bl	12514 <create_monster_bottom_up@@Base>
   132a8:	add	r5, sp, #4
   132ac:	mov	r0, r4
   132b0:	mov	r1, r5
   132b4:	bl	17f0c <flatcc_builder_finalize_aligned_buffer@@Base>
   132b8:	bl	1804c <flatcc_builder_aligned_free@@Base>
   132bc:	mov	r0, r4
   132c0:	bl	13a8c <flatcc_builder_reset@@Base>
   132c4:	mov	r0, r4
   132c8:	mov	r1, #1
   132cc:	bl	12514 <create_monster_bottom_up@@Base>
   132d0:	mov	r0, r4
   132d4:	mov	r1, r5
   132d8:	bl	17f0c <flatcc_builder_finalize_aligned_buffer@@Base>
   132dc:	mov	r6, r0
   132e0:	bl	12d3c <access_monster_buffer@@Base>
   132e4:	mov	r0, r6
   132e8:	bl	1804c <flatcc_builder_aligned_free@@Base>
   132ec:	mov	r0, r4
   132f0:	bl	13a8c <flatcc_builder_reset@@Base>
   132f4:	mov	r0, r4
   132f8:	bl	12a20 <create_monster_top_down@@Base>
   132fc:	mov	r0, r4
   13300:	mov	r1, r5
   13304:	bl	17e50 <flatcc_builder_finalize_buffer@@Base>
   13308:	mov	r5, r0
   1330c:	bl	12d3c <access_monster_buffer@@Base>
   13310:	mov	r0, r5
   13314:	bl	1237c <free@plt>
   13318:	mov	r0, r4
   1331c:	bl	13a98 <flatcc_builder_clear@@Base>
   13320:	movw	r0, #35376	; 0x8a30
   13324:	movt	r0, #1
   13328:	bl	123ac <puts@plt>
   1332c:	mov	r0, #0
   13330:	sub	sp, fp, #16
   13334:	pop	{r4, r5, r6, sl, fp, pc}

00013338 <flatcc_builder_default_alloc@@Base>:
   13338:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1333c:	add	fp, sp, #24
   13340:	mov	r4, r1
   13344:	cmp	r2, #0
   13348:	beq	13390 <flatcc_builder_default_alloc@@Base+0x58>
   1334c:	ldr	r0, [fp, #8]
   13350:	mov	r8, r3
   13354:	sub	r1, r0, #1
   13358:	cmp	r1, #6
   1335c:	bhi	133bc <flatcc_builder_default_alloc@@Base+0x84>
   13360:	add	r3, pc, #4
   13364:	mov	r0, #256	; 0x100
   13368:	ldr	pc, [r3, r1, lsl #2]
   1336c:	ldrdeq	r3, [r1], -r0
   13370:			; <UNDEFINED> instruction: 0x000133bc
   13374:			; <UNDEFINED> instruction: 0x000133bc
   13378:	andeq	r3, r1, r8, lsl #7
   1337c:	andeq	r3, r1, r4, asr #7
   13380:			; <UNDEFINED> instruction: 0x000133bc
   13384:	andeq	r3, r1, ip, asr #7
   13388:	mov	r0, #288	; 0x120
   1338c:	b	133d0 <flatcc_builder_default_alloc@@Base+0x98>
   13390:	ldr	r0, [r4]
   13394:	cmp	r0, #0
   13398:	moveq	r6, #0
   1339c:	moveq	r0, r6
   133a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   133a4:	bl	1237c <free@plt>
   133a8:	mov	r6, #0
   133ac:	mov	r0, r6
   133b0:	str	r6, [r4]
   133b4:	str	r6, [r4, #4]
   133b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133bc:	mov	r0, #32
   133c0:	b	133d0 <flatcc_builder_default_alloc@@Base+0x98>
   133c4:	mov	r0, r2
   133c8:	b	133d0 <flatcc_builder_default_alloc@@Base+0x98>
   133cc:	mov	r0, #64	; 0x40
   133d0:	mov	r7, r0
   133d4:	lsl	r0, r0, #1
   133d8:	cmp	r7, r2
   133dc:	bcc	133d0 <flatcc_builder_default_alloc@@Base+0x98>
   133e0:	ldr	r0, [r4, #4]
   133e4:	mov	r6, #0
   133e8:	cmp	r0, r2
   133ec:	lsrcs	r0, r0, #1
   133f0:	cmpcs	r0, r7
   133f4:	bcs	1342c <flatcc_builder_default_alloc@@Base+0xf4>
   133f8:	ldr	r0, [r4]
   133fc:	mov	r1, r7
   13400:	bl	123a0 <realloc@plt>
   13404:	cmp	r0, #0
   13408:	mvneq	r6, #0
   1340c:	moveq	r0, r6
   13410:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13414:	cmp	r8, #0
   13418:	mov	r5, r0
   1341c:	ldrne	r1, [r4, #4]
   13420:	cmpne	r7, r1
   13424:	bhi	13434 <flatcc_builder_default_alloc@@Base+0xfc>
   13428:	stm	r4, {r5, r7}
   1342c:	mov	r0, r6
   13430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13434:	add	r0, r5, r1
   13438:	sub	r2, r7, r1
   1343c:	mov	r1, #0
   13440:	bl	123f4 <memset@plt>
   13444:	b	13428 <flatcc_builder_default_alloc@@Base+0xf0>

00013448 <flatcc_builder_flush_vtable_cache@@Base>:
   13448:	push	{r4, r5, fp, lr}
   1344c:	add	fp, sp, #8
   13450:	mov	r4, r0
   13454:	ldr	r0, [r0, #116]	; 0x74
   13458:	cmp	r0, #0
   1345c:	popeq	{r4, r5, fp, pc}
   13460:	ldr	r0, [r4, #92]	; 0x5c
   13464:	ldr	r2, [r4, #96]	; 0x60
   13468:	mov	r1, #0
   1346c:	mov	r5, #0
   13470:	bl	123f4 <memset@plt>
   13474:	mov	r0, #16
   13478:	str	r5, [r4, #120]	; 0x78
   1347c:	str	r0, [r4, #124]	; 0x7c
   13480:	pop	{r4, r5, fp, pc}

00013484 <flatcc_builder_custom_init@@Base>:
   13484:	push	{r4, r5, r6, r7, fp, lr}
   13488:	add	fp, sp, #16
   1348c:	mov	r6, r2
   13490:	mov	r7, r1
   13494:	mov	r1, #0
   13498:	mov	r2, #232	; 0xe8
   1349c:	mov	r5, r3
   134a0:	mov	r4, r0
   134a4:	bl	123f4 <memset@plt>
   134a8:	ldr	r0, [fp, #8]
   134ac:	cmp	r7, #0
   134b0:	bne	134c8 <flatcc_builder_custom_init@@Base+0x44>
   134b4:	movw	r7, #33252	; 0x81e4
   134b8:	mov	r1, #1
   134bc:	add	r6, r4, #188	; 0xbc
   134c0:	movt	r7, #1
   134c4:	str	r1, [r4, #184]	; 0xb8
   134c8:	movw	r1, #13112	; 0x3338
   134cc:	cmp	r5, #0
   134d0:	str	r6, [r4, #36]	; 0x24
   134d4:	str	r0, [r4, #40]	; 0x28
   134d8:	mov	r0, #0
   134dc:	str	r7, [r4, #44]	; 0x2c
   134e0:	movt	r1, #1
   134e4:	movne	r1, r5
   134e8:	str	r1, [r4, #48]	; 0x30
   134ec:	pop	{r4, r5, r6, r7, fp, pc}

000134f0 <flatcc_builder_init@@Base>:
   134f0:	push	{r4, r5, fp, lr}
   134f4:	add	fp, sp, #8
   134f8:	mov	r1, #0
   134fc:	mov	r2, #232	; 0xe8
   13500:	mov	r4, r0
   13504:	mov	r5, #0
   13508:	bl	123f4 <memset@plt>
   1350c:	mov	r0, #1
   13510:	movw	r2, #33252	; 0x81e4
   13514:	add	r1, r4, #188	; 0xbc
   13518:	str	r0, [r4, #184]	; 0xb8
   1351c:	movw	r0, #13112	; 0x3338
   13520:	movt	r2, #1
   13524:	str	r1, [r4, #36]	; 0x24
   13528:	str	r5, [r4, #40]	; 0x28
   1352c:	movt	r0, #1
   13530:	str	r2, [r4, #44]	; 0x2c
   13534:	str	r0, [r4, #48]	; 0x30
   13538:	mov	r0, #0
   1353c:	pop	{r4, r5, fp, pc}

00013540 <flatcc_builder_custom_reset@@Base>:
   13540:	push	{r4, r5, r6, sl, fp, lr}
   13544:	add	fp, sp, #16
   13548:	sub	sp, sp, #8
   1354c:	mov	r5, r1
   13550:	mov	r4, r0
   13554:	cmp	r2, #0
   13558:	beq	135b8 <flatcc_builder_custom_reset@@Base+0x78>
   1355c:	mov	r1, r4
   13560:	ldr	r0, [r1, #52]!	; 0x34
   13564:	cmp	r0, #0
   13568:	beq	135e4 <flatcc_builder_custom_reset@@Base+0xa4>
   1356c:	ldr	r0, [r4, #40]	; 0x28
   13570:	ldr	r6, [r4, #48]	; 0x30
   13574:	mov	r2, #0
   13578:	mov	r3, #1
   1357c:	str	r2, [sp]
   13580:	mov	r2, #1
   13584:	blx	r6
   13588:	mvn	r6, #0
   1358c:	cmp	r0, #0
   13590:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   13594:	ldr	r0, [r4, #52]	; 0x34
   13598:	ldr	r2, [r4, #56]	; 0x38
   1359c:	mov	r1, #0
   135a0:	bl	123f4 <memset@plt>
   135a4:	mov	r1, r4
   135a8:	ldr	r0, [r1, #60]!	; 0x3c
   135ac:	cmp	r0, #0
   135b0:	bne	13600 <flatcc_builder_custom_reset@@Base+0xc0>
   135b4:	b	1364c <flatcc_builder_custom_reset@@Base+0x10c>
   135b8:	ldr	r0, [r4, #52]	; 0x34
   135bc:	ldr	r2, [r4, #56]	; 0x38
   135c0:	cmp	r0, #0
   135c4:	beq	136b4 <flatcc_builder_custom_reset@@Base+0x174>
   135c8:	mov	r1, #0
   135cc:	bl	123f4 <memset@plt>
   135d0:	ldr	r0, [r4, #60]	; 0x3c
   135d4:	ldr	r2, [r4, #64]	; 0x40
   135d8:	cmp	r0, #0
   135dc:	bne	136cc <flatcc_builder_custom_reset@@Base+0x18c>
   135e0:	b	136e8 <flatcc_builder_custom_reset@@Base+0x1a8>
   135e4:	ldr	r0, [r4, #56]	; 0x38
   135e8:	cmp	r0, #0
   135ec:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   135f0:	mov	r1, r4
   135f4:	ldr	r0, [r1, #60]!	; 0x3c
   135f8:	cmp	r0, #0
   135fc:	beq	1364c <flatcc_builder_custom_reset@@Base+0x10c>
   13600:	ldr	r0, [r4, #40]	; 0x28
   13604:	ldr	r6, [r4, #48]	; 0x30
   13608:	mov	r2, #1
   1360c:	mov	r3, #1
   13610:	str	r2, [sp]
   13614:	mov	r2, #1
   13618:	blx	r6
   1361c:	mvn	r6, #0
   13620:	cmp	r0, #0
   13624:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   13628:	ldr	r0, [r4, #60]	; 0x3c
   1362c:	ldr	r2, [r4, #64]	; 0x40
   13630:	mov	r1, #0
   13634:	bl	123f4 <memset@plt>
   13638:	mov	r1, r4
   1363c:	ldr	r0, [r1, #68]!	; 0x44
   13640:	cmp	r0, #0
   13644:	bne	13668 <flatcc_builder_custom_reset@@Base+0x128>
   13648:	b	138a4 <flatcc_builder_custom_reset@@Base+0x364>
   1364c:	ldr	r0, [r4, #64]	; 0x40
   13650:	cmp	r0, #0
   13654:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13658:	mov	r1, r4
   1365c:	ldr	r0, [r1, #68]!	; 0x44
   13660:	cmp	r0, #0
   13664:	beq	138a4 <flatcc_builder_custom_reset@@Base+0x364>
   13668:	ldr	r0, [r4, #40]	; 0x28
   1366c:	ldr	r6, [r4, #48]	; 0x30
   13670:	mov	r2, #2
   13674:	mov	r3, #1
   13678:	str	r2, [sp]
   1367c:	mov	r2, #1
   13680:	blx	r6
   13684:	mvn	r6, #0
   13688:	cmp	r0, #0
   1368c:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   13690:	ldr	r0, [r4, #68]	; 0x44
   13694:	ldr	r2, [r4, #72]	; 0x48
   13698:	mov	r1, #0
   1369c:	bl	123f4 <memset@plt>
   136a0:	mov	r1, r4
   136a4:	ldr	r0, [r1, #76]!	; 0x4c
   136a8:	cmp	r0, #0
   136ac:	bne	138c0 <flatcc_builder_custom_reset@@Base+0x380>
   136b0:	b	1390c <flatcc_builder_custom_reset@@Base+0x3cc>
   136b4:	cmp	r2, #0
   136b8:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   136bc:	ldr	r0, [r4, #60]	; 0x3c
   136c0:	ldr	r2, [r4, #64]	; 0x40
   136c4:	cmp	r0, #0
   136c8:	beq	136e8 <flatcc_builder_custom_reset@@Base+0x1a8>
   136cc:	mov	r1, #0
   136d0:	bl	123f4 <memset@plt>
   136d4:	ldr	r0, [r4, #68]	; 0x44
   136d8:	ldr	r2, [r4, #72]	; 0x48
   136dc:	cmp	r0, #0
   136e0:	bne	13700 <flatcc_builder_custom_reset@@Base+0x1c0>
   136e4:	b	1371c <flatcc_builder_custom_reset@@Base+0x1dc>
   136e8:	cmp	r2, #0
   136ec:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   136f0:	ldr	r0, [r4, #68]	; 0x44
   136f4:	ldr	r2, [r4, #72]	; 0x48
   136f8:	cmp	r0, #0
   136fc:	beq	1371c <flatcc_builder_custom_reset@@Base+0x1dc>
   13700:	mov	r1, #0
   13704:	bl	123f4 <memset@plt>
   13708:	ldr	r0, [r4, #76]	; 0x4c
   1370c:	ldr	r2, [r4, #80]	; 0x50
   13710:	cmp	r0, #0
   13714:	bne	13734 <flatcc_builder_custom_reset@@Base+0x1f4>
   13718:	b	13750 <flatcc_builder_custom_reset@@Base+0x210>
   1371c:	cmp	r2, #0
   13720:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13724:	ldr	r0, [r4, #76]	; 0x4c
   13728:	ldr	r2, [r4, #80]	; 0x50
   1372c:	cmp	r0, #0
   13730:	beq	13750 <flatcc_builder_custom_reset@@Base+0x210>
   13734:	mov	r1, #0
   13738:	bl	123f4 <memset@plt>
   1373c:	ldr	r0, [r4, #84]	; 0x54
   13740:	ldr	r2, [r4, #88]	; 0x58
   13744:	cmp	r0, #0
   13748:	bne	13768 <flatcc_builder_custom_reset@@Base+0x228>
   1374c:	b	13784 <flatcc_builder_custom_reset@@Base+0x244>
   13750:	cmp	r2, #0
   13754:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13758:	ldr	r0, [r4, #84]	; 0x54
   1375c:	ldr	r2, [r4, #88]	; 0x58
   13760:	cmp	r0, #0
   13764:	beq	13784 <flatcc_builder_custom_reset@@Base+0x244>
   13768:	mov	r1, #0
   1376c:	bl	123f4 <memset@plt>
   13770:	ldr	r0, [r4, #92]	; 0x5c
   13774:	ldr	r2, [r4, #96]	; 0x60
   13778:	cmp	r0, #0
   1377c:	bne	1379c <flatcc_builder_custom_reset@@Base+0x25c>
   13780:	b	137b8 <flatcc_builder_custom_reset@@Base+0x278>
   13784:	cmp	r2, #0
   13788:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   1378c:	ldr	r0, [r4, #92]	; 0x5c
   13790:	ldr	r2, [r4, #96]	; 0x60
   13794:	cmp	r0, #0
   13798:	beq	137b8 <flatcc_builder_custom_reset@@Base+0x278>
   1379c:	mov	r1, #0
   137a0:	bl	123f4 <memset@plt>
   137a4:	ldr	r0, [r4, #100]	; 0x64
   137a8:	ldr	r2, [r4, #104]	; 0x68
   137ac:	cmp	r0, #0
   137b0:	bne	137d0 <flatcc_builder_custom_reset@@Base+0x290>
   137b4:	b	137ec <flatcc_builder_custom_reset@@Base+0x2ac>
   137b8:	cmp	r2, #0
   137bc:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   137c0:	ldr	r0, [r4, #100]	; 0x64
   137c4:	ldr	r2, [r4, #104]	; 0x68
   137c8:	cmp	r0, #0
   137cc:	beq	137ec <flatcc_builder_custom_reset@@Base+0x2ac>
   137d0:	mov	r1, #0
   137d4:	bl	123f4 <memset@plt>
   137d8:	ldr	r0, [r4, #108]	; 0x6c
   137dc:	ldr	r2, [r4, #112]	; 0x70
   137e0:	cmp	r0, #0
   137e4:	bne	13804 <flatcc_builder_custom_reset@@Base+0x2c4>
   137e8:	b	13810 <flatcc_builder_custom_reset@@Base+0x2d0>
   137ec:	cmp	r2, #0
   137f0:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   137f4:	ldr	r0, [r4, #108]	; 0x6c
   137f8:	ldr	r2, [r4, #112]	; 0x70
   137fc:	cmp	r0, #0
   13800:	beq	13810 <flatcc_builder_custom_reset@@Base+0x2d0>
   13804:	mov	r1, #0
   13808:	bl	123f4 <memset@plt>
   1380c:	b	13818 <flatcc_builder_custom_reset@@Base+0x2d8>
   13810:	cmp	r2, #0
   13814:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13818:	mov	r0, #0
   1381c:	vmov.i32	q8, #0	; 0x00000000
   13820:	mov	r6, #0
   13824:	str	r0, [r4, #120]	; 0x78
   13828:	ldr	r1, [r4, #124]	; 0x7c
   1382c:	cmp	r1, #0
   13830:	movne	r1, #16
   13834:	strne	r1, [r4, #124]	; 0x7c
   13838:	add	r1, r4, #148	; 0x94
   1383c:	strh	r0, [r4, #128]	; 0x80
   13840:	str	r0, [r4, #136]	; 0x88
   13844:	str	r0, [r4, #140]	; 0x8c
   13848:	str	r0, [r4, #32]
   1384c:	cmp	r5, #0
   13850:	vst1.32	{d16-d17}, [r1]
   13854:	ldr	r2, [r4, #60]	; 0x3c
   13858:	ldr	r1, [r4, #52]	; 0x34
   1385c:	ldr	r3, [r4, #76]	; 0x4c
   13860:	str	r2, [r4, #16]
   13864:	str	r0, [r4, #20]
   13868:	str	r0, [r4, #24]
   1386c:	movne	r0, #0
   13870:	str	r3, [r4]
   13874:	str	r1, [r4, #4]
   13878:	strne	r0, [r4, #172]	; 0xac
   1387c:	strne	r0, [r4, #176]	; 0xb0
   13880:	strne	r0, [r4, #180]	; 0xb4
   13884:	ldr	r0, [r4, #184]	; 0xb8
   13888:	cmp	r0, #0
   1388c:	beq	13898 <flatcc_builder_custom_reset@@Base+0x358>
   13890:	add	r0, r4, #188	; 0xbc
   13894:	bl	180ac <flatcc_emitter_reset@@Base>
   13898:	mov	r0, r6
   1389c:	sub	sp, fp, #16
   138a0:	pop	{r4, r5, r6, sl, fp, pc}
   138a4:	ldr	r0, [r4, #72]	; 0x48
   138a8:	cmp	r0, #0
   138ac:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   138b0:	mov	r1, r4
   138b4:	ldr	r0, [r1, #76]!	; 0x4c
   138b8:	cmp	r0, #0
   138bc:	beq	1390c <flatcc_builder_custom_reset@@Base+0x3cc>
   138c0:	ldr	r0, [r4, #40]	; 0x28
   138c4:	ldr	r6, [r4, #48]	; 0x30
   138c8:	mov	r2, #3
   138cc:	mov	r3, #1
   138d0:	str	r2, [sp]
   138d4:	mov	r2, #1
   138d8:	blx	r6
   138dc:	mvn	r6, #0
   138e0:	cmp	r0, #0
   138e4:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   138e8:	ldr	r0, [r4, #76]	; 0x4c
   138ec:	ldr	r2, [r4, #80]	; 0x50
   138f0:	mov	r1, #0
   138f4:	bl	123f4 <memset@plt>
   138f8:	mov	r1, r4
   138fc:	ldr	r0, [r1, #84]!	; 0x54
   13900:	cmp	r0, #0
   13904:	bne	13928 <flatcc_builder_custom_reset@@Base+0x3e8>
   13908:	b	13974 <flatcc_builder_custom_reset@@Base+0x434>
   1390c:	ldr	r0, [r4, #80]	; 0x50
   13910:	cmp	r0, #0
   13914:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13918:	mov	r1, r4
   1391c:	ldr	r0, [r1, #84]!	; 0x54
   13920:	cmp	r0, #0
   13924:	beq	13974 <flatcc_builder_custom_reset@@Base+0x434>
   13928:	ldr	r0, [r4, #40]	; 0x28
   1392c:	ldr	r6, [r4, #48]	; 0x30
   13930:	mov	r2, #4
   13934:	mov	r3, #1
   13938:	str	r2, [sp]
   1393c:	mov	r2, #1
   13940:	blx	r6
   13944:	mvn	r6, #0
   13948:	cmp	r0, #0
   1394c:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   13950:	ldr	r0, [r4, #84]	; 0x54
   13954:	ldr	r2, [r4, #88]	; 0x58
   13958:	mov	r1, #0
   1395c:	bl	123f4 <memset@plt>
   13960:	ldr	r0, [r4, #92]	; 0x5c
   13964:	ldr	r2, [r4, #96]	; 0x60
   13968:	cmp	r0, #0
   1396c:	bne	13990 <flatcc_builder_custom_reset@@Base+0x450>
   13970:	b	139ac <flatcc_builder_custom_reset@@Base+0x46c>
   13974:	ldr	r0, [r4, #88]	; 0x58
   13978:	cmp	r0, #0
   1397c:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13980:	ldr	r0, [r4, #92]	; 0x5c
   13984:	ldr	r2, [r4, #96]	; 0x60
   13988:	cmp	r0, #0
   1398c:	beq	139ac <flatcc_builder_custom_reset@@Base+0x46c>
   13990:	mov	r1, #0
   13994:	bl	123f4 <memset@plt>
   13998:	mov	r1, r4
   1399c:	ldr	r0, [r1, #100]!	; 0x64
   139a0:	cmp	r0, #0
   139a4:	bne	139c4 <flatcc_builder_custom_reset@@Base+0x484>
   139a8:	b	13a10 <flatcc_builder_custom_reset@@Base+0x4d0>
   139ac:	cmp	r2, #0
   139b0:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   139b4:	mov	r1, r4
   139b8:	ldr	r0, [r1, #100]!	; 0x64
   139bc:	cmp	r0, #0
   139c0:	beq	13a10 <flatcc_builder_custom_reset@@Base+0x4d0>
   139c4:	ldr	r0, [r4, #40]	; 0x28
   139c8:	ldr	r6, [r4, #48]	; 0x30
   139cc:	mov	r2, #6
   139d0:	mov	r3, #1
   139d4:	str	r2, [sp]
   139d8:	mov	r2, #1
   139dc:	blx	r6
   139e0:	mvn	r6, #0
   139e4:	cmp	r0, #0
   139e8:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   139ec:	ldr	r0, [r4, #100]	; 0x64
   139f0:	ldr	r2, [r4, #104]	; 0x68
   139f4:	mov	r1, #0
   139f8:	bl	123f4 <memset@plt>
   139fc:	mov	r1, r4
   13a00:	ldr	r0, [r1, #108]!	; 0x6c
   13a04:	cmp	r0, #0
   13a08:	bne	13a2c <flatcc_builder_custom_reset@@Base+0x4ec>
   13a0c:	b	13a60 <flatcc_builder_custom_reset@@Base+0x520>
   13a10:	ldr	r0, [r4, #104]	; 0x68
   13a14:	cmp	r0, #0
   13a18:	bne	13a6c <flatcc_builder_custom_reset@@Base+0x52c>
   13a1c:	mov	r1, r4
   13a20:	ldr	r0, [r1, #108]!	; 0x6c
   13a24:	cmp	r0, #0
   13a28:	beq	13a60 <flatcc_builder_custom_reset@@Base+0x520>
   13a2c:	ldr	r0, [r4, #40]	; 0x28
   13a30:	ldr	r6, [r4, #48]	; 0x30
   13a34:	mov	r2, #7
   13a38:	mov	r3, #1
   13a3c:	str	r2, [sp]
   13a40:	mov	r2, #1
   13a44:	blx	r6
   13a48:	mvn	r6, #0
   13a4c:	cmp	r0, #0
   13a50:	bne	13898 <flatcc_builder_custom_reset@@Base+0x358>
   13a54:	ldr	r0, [r4, #108]	; 0x6c
   13a58:	ldr	r2, [r4, #112]	; 0x70
   13a5c:	b	13804 <flatcc_builder_custom_reset@@Base+0x2c4>
   13a60:	ldr	r0, [r4, #112]	; 0x70
   13a64:	cmp	r0, #0
   13a68:	beq	13818 <flatcc_builder_custom_reset@@Base+0x2d8>
   13a6c:	movw	r0, #35952	; 0x8c70
   13a70:	movw	r1, #35970	; 0x8c82
   13a74:	movw	r3, #36040	; 0x8cc8
   13a78:	movw	r2, #434	; 0x1b2
   13a7c:	movt	r0, #1
   13a80:	movt	r1, #1
   13a84:	movt	r3, #1
   13a88:	bl	12418 <__assert_fail@plt>

00013a8c <flatcc_builder_reset@@Base>:
   13a8c:	mov	r1, #0
   13a90:	mov	r2, #0
   13a94:	b	13540 <flatcc_builder_custom_reset@@Base>

00013a98 <flatcc_builder_clear@@Base>:
   13a98:	push	{r4, sl, fp, lr}
   13a9c:	add	fp, sp, #8
   13aa0:	sub	sp, sp, #8
   13aa4:	mov	r4, r0
   13aa8:	ldr	r0, [r0, #40]	; 0x28
   13aac:	mov	r1, #0
   13ab0:	mov	r2, #0
   13ab4:	mov	r3, #0
   13ab8:	ldr	ip, [r4, #48]	; 0x30
   13abc:	str	r1, [sp]
   13ac0:	add	r1, r4, #52	; 0x34
   13ac4:	blx	ip
   13ac8:	ldr	r0, [r4, #40]	; 0x28
   13acc:	ldr	ip, [r4, #48]	; 0x30
   13ad0:	mov	r1, #1
   13ad4:	mov	r2, #0
   13ad8:	mov	r3, #0
   13adc:	str	r1, [sp]
   13ae0:	add	r1, r4, #60	; 0x3c
   13ae4:	blx	ip
   13ae8:	ldr	r0, [r4, #40]	; 0x28
   13aec:	ldr	ip, [r4, #48]	; 0x30
   13af0:	mov	r1, #2
   13af4:	mov	r2, #0
   13af8:	mov	r3, #0
   13afc:	str	r1, [sp]
   13b00:	add	r1, r4, #68	; 0x44
   13b04:	blx	ip
   13b08:	ldr	r0, [r4, #40]	; 0x28
   13b0c:	ldr	ip, [r4, #48]	; 0x30
   13b10:	mov	r1, #3
   13b14:	mov	r2, #0
   13b18:	mov	r3, #0
   13b1c:	str	r1, [sp]
   13b20:	add	r1, r4, #76	; 0x4c
   13b24:	blx	ip
   13b28:	ldr	r0, [r4, #40]	; 0x28
   13b2c:	ldr	ip, [r4, #48]	; 0x30
   13b30:	mov	r1, #4
   13b34:	mov	r2, #0
   13b38:	mov	r3, #0
   13b3c:	str	r1, [sp]
   13b40:	add	r1, r4, #84	; 0x54
   13b44:	blx	ip
   13b48:	ldr	r0, [r4, #40]	; 0x28
   13b4c:	ldr	ip, [r4, #48]	; 0x30
   13b50:	mov	r1, #5
   13b54:	mov	r2, #0
   13b58:	mov	r3, #0
   13b5c:	str	r1, [sp]
   13b60:	add	r1, r4, #92	; 0x5c
   13b64:	blx	ip
   13b68:	ldr	r0, [r4, #40]	; 0x28
   13b6c:	ldr	ip, [r4, #48]	; 0x30
   13b70:	mov	r1, #6
   13b74:	mov	r2, #0
   13b78:	mov	r3, #0
   13b7c:	str	r1, [sp]
   13b80:	add	r1, r4, #100	; 0x64
   13b84:	blx	ip
   13b88:	ldr	r0, [r4, #40]	; 0x28
   13b8c:	ldr	ip, [r4, #48]	; 0x30
   13b90:	mov	r1, #7
   13b94:	mov	r2, #0
   13b98:	mov	r3, #0
   13b9c:	str	r1, [sp]
   13ba0:	add	r1, r4, #108	; 0x6c
   13ba4:	blx	ip
   13ba8:	ldr	r0, [r4, #184]	; 0xb8
   13bac:	cmp	r0, #0
   13bb0:	beq	13bbc <flatcc_builder_clear@@Base+0x124>
   13bb4:	add	r0, r4, #188	; 0xbc
   13bb8:	bl	18178 <flatcc_emitter_clear@@Base>
   13bbc:	mov	r0, r4
   13bc0:	mov	r1, #0
   13bc4:	mov	r2, #232	; 0xe8
   13bc8:	sub	sp, fp, #8
   13bcc:	pop	{r4, sl, fp, lr}
   13bd0:	b	123f4 <memset@plt>

00013bd4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13bd4:	push	{r4, r5, r6, r7, fp, lr}
   13bd8:	add	fp, sp, #16
   13bdc:	sub	sp, sp, #8
   13be0:	mov	r4, r0
   13be4:	ldr	r0, [r0, #112]	; 0x70
   13be8:	add	r1, r1, #7
   13bec:	ldr	r7, [r4, #228]	; 0xe4
   13bf0:	bic	r5, r1, #3
   13bf4:	add	r6, r4, #108	; 0x6c
   13bf8:	add	r2, r7, r5
   13bfc:	cmp	r2, r0
   13c00:	bls	13c28 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13c04:	ldr	r0, [r4, #40]	; 0x28
   13c08:	ldr	ip, [r4, #48]	; 0x30
   13c0c:	mov	r1, #7
   13c10:	mov	r3, #0
   13c14:	str	r1, [sp]
   13c18:	mov	r1, r6
   13c1c:	blx	ip
   13c20:	cmp	r0, #0
   13c24:	bne	13c7c <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13c28:	ldr	r0, [r6]
   13c2c:	adds	r6, r0, r7
   13c30:	beq	13c6c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13c34:	mov	r0, r6
   13c38:	mov	r1, #0
   13c3c:	mov	r2, r5
   13c40:	bl	123f4 <memset@plt>
   13c44:	ldr	r0, [r4, #224]	; 0xe0
   13c48:	str	r0, [r6], #4
   13c4c:	ldr	r0, [r4, #228]	; 0xe4
   13c50:	add	r1, r0, #4
   13c54:	add	r0, r0, r5
   13c58:	str	r1, [r4, #224]	; 0xe0
   13c5c:	str	r0, [r4, #228]	; 0xe4
   13c60:	mov	r0, r6
   13c64:	sub	sp, fp, #16
   13c68:	pop	{r4, r5, r6, r7, fp, pc}
   13c6c:	mov	r6, #0
   13c70:	mov	r0, r6
   13c74:	sub	sp, fp, #16
   13c78:	pop	{r4, r5, r6, r7, fp, pc}
   13c7c:	movw	r0, #40488	; 0x9e28
   13c80:	movw	r1, #35970	; 0x8c82
   13c84:	movw	r3, #40034	; 0x9c62
   13c88:	mov	r2, #308	; 0x134
   13c8c:	movt	r0, #1
   13c90:	movt	r1, #1
   13c94:	movt	r3, #1
   13c98:	bl	12418 <__assert_fail@plt>

00013c9c <flatcc_builder_enter_user_frame@@Base>:
   13c9c:	push	{r4, r5, r6, r7, fp, lr}
   13ca0:	add	fp, sp, #16
   13ca4:	sub	sp, sp, #8
   13ca8:	mov	r4, r0
   13cac:	ldr	r0, [r0, #112]	; 0x70
   13cb0:	add	r1, r1, #7
   13cb4:	ldr	r7, [r4, #228]	; 0xe4
   13cb8:	bic	r5, r1, #3
   13cbc:	add	r6, r4, #108	; 0x6c
   13cc0:	add	r2, r7, r5
   13cc4:	cmp	r2, r0
   13cc8:	bls	13cf0 <flatcc_builder_enter_user_frame@@Base+0x54>
   13ccc:	ldr	r0, [r4, #40]	; 0x28
   13cd0:	ldr	ip, [r4, #48]	; 0x30
   13cd4:	mov	r1, #7
   13cd8:	mov	r3, #0
   13cdc:	str	r1, [sp]
   13ce0:	mov	r1, r6
   13ce4:	blx	ip
   13ce8:	cmp	r0, #0
   13cec:	bne	13d38 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13cf0:	ldr	r0, [r6]
   13cf4:	adds	r6, r0, r7
   13cf8:	moveq	r0, #0
   13cfc:	subeq	sp, fp, #16
   13d00:	popeq	{r4, r5, r6, r7, fp, pc}
   13d04:	mov	r0, r6
   13d08:	mov	r1, #0
   13d0c:	mov	r2, r5
   13d10:	bl	123f4 <memset@plt>
   13d14:	ldr	r0, [r4, #224]	; 0xe0
   13d18:	str	r0, [r6]
   13d1c:	ldr	r1, [r4, #228]	; 0xe4
   13d20:	add	r0, r1, #4
   13d24:	add	r1, r1, r5
   13d28:	str	r0, [r4, #224]	; 0xe0
   13d2c:	str	r1, [r4, #228]	; 0xe4
   13d30:	sub	sp, fp, #16
   13d34:	pop	{r4, r5, r6, r7, fp, pc}
   13d38:	movw	r0, #40488	; 0x9e28
   13d3c:	movw	r1, #35970	; 0x8c82
   13d40:	movw	r3, #40034	; 0x9c62
   13d44:	mov	r2, #308	; 0x134
   13d48:	movt	r0, #1
   13d4c:	movt	r1, #1
   13d50:	movt	r3, #1
   13d54:	bl	12418 <__assert_fail@plt>

00013d58 <flatcc_builder_exit_user_frame@@Base>:
   13d58:	ldr	r1, [r0, #224]	; 0xe0
   13d5c:	cmp	r1, #0
   13d60:	subne	r2, r1, #4
   13d64:	strne	r2, [r0, #228]	; 0xe4
   13d68:	ldrne	r2, [r0, #108]	; 0x6c
   13d6c:	addne	r1, r2, r1
   13d70:	ldrne	r1, [r1, #-4]
   13d74:	strne	r1, [r0, #224]	; 0xe0
   13d78:	movne	r0, r1
   13d7c:	bxne	lr
   13d80:	push	{fp, lr}
   13d84:	mov	fp, sp
   13d88:	movw	r0, #36102	; 0x8d06
   13d8c:	movw	r1, #35970	; 0x8c82
   13d90:	movw	r3, #36127	; 0x8d1f
   13d94:	movw	r2, #542	; 0x21e
   13d98:	movt	r0, #1
   13d9c:	movt	r1, #1
   13da0:	movt	r3, #1
   13da4:	bl	12418 <__assert_fail@plt>

00013da8 <flatcc_builder_exit_user_frame_at@@Base>:
   13da8:	push	{fp, lr}
   13dac:	mov	fp, sp
   13db0:	ldr	r2, [r0, #224]	; 0xe0
   13db4:	cmp	r2, r1
   13db8:	bcc	13e04 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13dbc:	cmp	r1, #0
   13dc0:	str	r1, [r0, #224]	; 0xe0
   13dc4:	subne	r2, r1, #4
   13dc8:	strne	r2, [r0, #228]	; 0xe4
   13dcc:	ldrne	r2, [r0, #108]	; 0x6c
   13dd0:	addne	r1, r2, r1
   13dd4:	ldrne	r1, [r1, #-4]
   13dd8:	strne	r1, [r0, #224]	; 0xe0
   13ddc:	movne	r0, r1
   13de0:	popne	{fp, pc}
   13de4:	movw	r0, #36102	; 0x8d06
   13de8:	movw	r1, #35970	; 0x8c82
   13dec:	movw	r3, #36127	; 0x8d1f
   13df0:	movw	r2, #542	; 0x21e
   13df4:	movt	r0, #1
   13df8:	movt	r1, #1
   13dfc:	movt	r3, #1
   13e00:	bl	12418 <__assert_fail@plt>
   13e04:	movw	r0, #36185	; 0x8d59
   13e08:	movw	r1, #35970	; 0x8c82
   13e0c:	movw	r3, #36216	; 0x8d78
   13e10:	movw	r2, #551	; 0x227
   13e14:	movt	r0, #1
   13e18:	movt	r1, #1
   13e1c:	movt	r3, #1
   13e20:	bl	12418 <__assert_fail@plt>

00013e24 <flatcc_builder_get_current_user_frame@@Base>:
   13e24:	ldr	r0, [r0, #224]	; 0xe0
   13e28:	bx	lr

00013e2c <flatcc_builder_get_user_frame_ptr@@Base>:
   13e2c:	ldr	r0, [r0, #108]	; 0x6c
   13e30:	add	r0, r0, r1
   13e34:	bx	lr

00013e38 <flatcc_builder_embed_buffer@@Base>:
   13e38:	push	{r4, r5, r6, r7, fp, lr}
   13e3c:	add	fp, sp, #16
   13e40:	sub	sp, sp, #88	; 0x58
   13e44:	mov	r4, r0
   13e48:	ldr	r0, [fp, #8]
   13e4c:	mov	r5, r3
   13e50:	mov	r7, r2
   13e54:	mov	r2, r1
   13e58:	sub	r1, fp, #18
   13e5c:	strh	r0, [fp, #-18]	; 0xffffffee
   13e60:	mov	r0, r4
   13e64:	ldr	r3, [r4, #152]	; 0x98
   13e68:	cmp	r3, #0
   13e6c:	movwne	r3, #1
   13e70:	bl	13fa8 <flatcc_builder_embed_buffer@@Base+0x170>
   13e74:	ldr	r1, [fp, #12]
   13e78:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13e7c:	ldr	r0, [r4, #136]	; 0x88
   13e80:	mov	r2, #0
   13e84:	str	r2, [sp, #8]
   13e88:	str	r2, [sp, #12]
   13e8c:	and	r1, r1, #2
   13e90:	sub	r3, r3, #1
   13e94:	add	r1, r5, r1, lsl #1
   13e98:	sub	r1, r0, r1
   13e9c:	and	r3, r3, r1
   13ea0:	add	r1, r3, r5
   13ea4:	str	r1, [fp, #-24]	; 0xffffffe8
   13ea8:	ldr	r1, [r4, #152]	; 0x98
   13eac:	cmp	r1, #0
   13eb0:	mov	r1, #0
   13eb4:	beq	13ed4 <flatcc_builder_embed_buffer@@Base+0x9c>
   13eb8:	sub	r1, fp, #24
   13ebc:	mov	r2, #1
   13ec0:	str	r1, [sp, #16]
   13ec4:	mov	r1, #4
   13ec8:	str	r1, [sp, #8]
   13ecc:	str	r1, [sp, #20]
   13ed0:	str	r2, [sp, #12]
   13ed4:	cmp	r5, #0
   13ed8:	beq	13efc <flatcc_builder_embed_buffer@@Base+0xc4>
   13edc:	add	r6, sp, #8
   13ee0:	add	r1, r1, r5
   13ee4:	add	r6, r6, r2, lsl #3
   13ee8:	add	r2, r2, #1
   13eec:	str	r1, [sp, #8]
   13ef0:	str	r7, [r6, #8]
   13ef4:	str	r5, [r6, #12]
   13ef8:	str	r2, [sp, #12]
   13efc:	cmp	r3, #0
   13f00:	beq	13f2c <flatcc_builder_embed_buffer@@Base+0xf4>
   13f04:	add	r7, sp, #8
   13f08:	movw	r6, #35440	; 0x8a70
   13f0c:	add	r1, r1, r3
   13f10:	add	r7, r7, r2, lsl #3
   13f14:	add	r2, r2, #1
   13f18:	movt	r6, #1
   13f1c:	str	r1, [sp, #8]
   13f20:	str	r6, [r7, #8]
   13f24:	str	r3, [r7, #12]
   13f28:	str	r2, [sp, #12]
   13f2c:	cmp	r1, #0
   13f30:	ble	13f88 <flatcc_builder_embed_buffer@@Base+0x150>
   13f34:	sub	r5, r0, r1
   13f38:	ldr	r0, [r4, #36]	; 0x24
   13f3c:	ldr	r7, [r4, #44]	; 0x2c
   13f40:	str	r1, [sp]
   13f44:	add	r1, sp, #8
   13f48:	add	r1, r1, #8
   13f4c:	mov	r3, r5
   13f50:	blx	r7
   13f54:	cmp	r0, #0
   13f58:	streq	r5, [r4, #136]	; 0x88
   13f5c:	moveq	r0, r5
   13f60:	subeq	sp, fp, #16
   13f64:	popeq	{r4, r5, r6, r7, fp, pc}
   13f68:	movw	r0, #40488	; 0x9e28
   13f6c:	movw	r1, #35970	; 0x8c82
   13f70:	movw	r3, #40167	; 0x9ce7
   13f74:	movw	r2, #651	; 0x28b
   13f78:	movt	r0, #1
   13f7c:	movt	r1, #1
   13f80:	movt	r3, #1
   13f84:	bl	12418 <__assert_fail@plt>
   13f88:	movw	r0, #40488	; 0x9e28
   13f8c:	movw	r1, #35970	; 0x8c82
   13f90:	movw	r3, #40167	; 0x9ce7
   13f94:	movw	r2, #647	; 0x287
   13f98:	movt	r0, #1
   13f9c:	movt	r1, #1
   13fa0:	movt	r3, #1
   13fa4:	bl	12418 <__assert_fail@plt>
   13fa8:	push	{r4, sl, fp, lr}
   13fac:	add	fp, sp, #8
   13fb0:	sub	sp, sp, #80	; 0x50
   13fb4:	cmp	r2, #0
   13fb8:	bne	13fc8 <flatcc_builder_embed_buffer@@Base+0x190>
   13fbc:	ldrh	r2, [r0, #132]	; 0x84
   13fc0:	cmp	r2, #0
   13fc4:	movweq	r2, #1
   13fc8:	ldrh	r4, [r1]
   13fcc:	cmp	r4, #4
   13fd0:	movwcc	r4, #4
   13fd4:	cmpcs	r4, r2
   13fd8:	bcs	13fe8 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13fdc:	cmp	r4, r2
   13fe0:	movcc	r4, r2
   13fe4:	strh	r4, [r1]
   13fe8:	cmp	r3, #0
   13fec:	bne	14060 <flatcc_builder_embed_buffer@@Base+0x228>
   13ff0:	ldr	r4, [r0, #140]	; 0x8c
   13ff4:	sub	r1, r2, #1
   13ff8:	ands	r1, r4, r1
   13ffc:	beq	14060 <flatcc_builder_embed_buffer@@Base+0x228>
   14000:	movw	r2, #35440	; 0x8a70
   14004:	cmn	r1, #1
   14008:	movt	r2, #1
   1400c:	str	r2, [sp, #16]
   14010:	mov	r2, #1
   14014:	str	r1, [sp, #8]
   14018:	str	r1, [sp, #20]
   1401c:	str	r2, [sp, #12]
   14020:	add	r2, r4, r1
   14024:	str	r2, [r0, #140]	; 0x8c
   14028:	ble	14068 <flatcc_builder_embed_buffer@@Base+0x230>
   1402c:	ldr	r2, [r0, #36]	; 0x24
   14030:	ldr	ip, [r0, #44]	; 0x2c
   14034:	add	r0, sp, #8
   14038:	str	r1, [sp]
   1403c:	mov	r3, r4
   14040:	add	r1, r0, #8
   14044:	mov	r0, r2
   14048:	mov	r2, #1
   1404c:	blx	ip
   14050:	cmp	r0, #0
   14054:	bne	14088 <flatcc_builder_embed_buffer@@Base+0x250>
   14058:	cmn	r4, #1
   1405c:	beq	140a8 <flatcc_builder_embed_buffer@@Base+0x270>
   14060:	sub	sp, fp, #8
   14064:	pop	{r4, sl, fp, pc}
   14068:	movw	r0, #40488	; 0x9e28
   1406c:	movw	r1, #35970	; 0x8c82
   14070:	movw	r3, #40355	; 0x9da3
   14074:	movw	r2, #673	; 0x2a1
   14078:	movt	r0, #1
   1407c:	movt	r1, #1
   14080:	movt	r3, #1
   14084:	bl	12418 <__assert_fail@plt>
   14088:	movw	r0, #40488	; 0x9e28
   1408c:	movw	r1, #35970	; 0x8c82
   14090:	movw	r3, #40355	; 0x9da3
   14094:	movw	r2, #677	; 0x2a5
   14098:	movt	r0, #1
   1409c:	movt	r1, #1
   140a0:	movt	r3, #1
   140a4:	bl	12418 <__assert_fail@plt>
   140a8:	movw	r0, #40488	; 0x9e28
   140ac:	movw	r1, #35970	; 0x8c82
   140b0:	movw	r3, #40101	; 0x9ca5
   140b4:	movw	r2, #702	; 0x2be
   140b8:	movt	r0, #1
   140bc:	movt	r1, #1
   140c0:	movt	r3, #1
   140c4:	bl	12418 <__assert_fail@plt>

000140c8 <flatcc_builder_create_buffer@@Base>:
   140c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140cc:	add	fp, sp, #28
   140d0:	sub	sp, sp, #100	; 0x64
   140d4:	ldr	r8, [fp, #12]
   140d8:	mov	r4, r0
   140dc:	ldr	r0, [fp, #8]
   140e0:	mov	r7, r1
   140e4:	mov	r5, #0
   140e8:	mov	r9, r3
   140ec:	sub	r1, fp, #30
   140f0:	str	r5, [sp, #12]
   140f4:	and	r6, r8, #1
   140f8:	strh	r0, [fp, #-30]	; 0xffffffe2
   140fc:	mov	r0, r4
   14100:	mov	r3, r6
   14104:	bl	13fa8 <flatcc_builder_embed_buffer@@Base+0x170>
   14108:	ldrh	r0, [r4, #128]	; 0x80
   1410c:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14110:	cmp	r0, r1
   14114:	strhcc	r1, [r4, #128]	; 0x80
   14118:	cmp	r7, #0
   1411c:	stmib	sp, {r6, r9}
   14120:	beq	1413c <flatcc_builder_create_buffer@@Base+0x74>
   14124:	ldr	r5, [r7]
   14128:	cmp	r5, #0
   1412c:	str	r5, [sp, #12]
   14130:	movwne	r5, #1
   14134:	lsl	r7, r5, #2
   14138:	b	14140 <flatcc_builder_create_buffer@@Base+0x78>
   1413c:	mov	r7, #0
   14140:	ldr	r9, [r4, #136]	; 0x88
   14144:	mov	sl, #4
   14148:	mvn	r6, #3
   1414c:	mov	r3, #0
   14150:	ands	ip, r8, #3
   14154:	and	r2, sl, r8, lsl #1
   14158:	str	r3, [sp, #20]
   1415c:	str	r3, [sp, #16]
   14160:	sub	r2, r6, r2
   14164:	sub	r6, r1, #1
   14168:	mov	r1, #4
   1416c:	add	r2, r2, r9
   14170:	sub	r2, r2, r7
   14174:	beq	14198 <flatcc_builder_create_buffer@@Base+0xd0>
   14178:	sub	r1, fp, #40	; 0x28
   1417c:	mov	r3, #1
   14180:	str	r1, [sp, #24]
   14184:	mov	r1, #4
   14188:	str	r1, [sp, #16]
   1418c:	str	r1, [sp, #28]
   14190:	mov	r1, #8
   14194:	str	r3, [sp, #20]
   14198:	add	lr, sp, #16
   1419c:	and	r6, r2, r6
   141a0:	sub	r0, fp, #36	; 0x24
   141a4:	str	r1, [sp, #16]
   141a8:	cmp	r5, #0
   141ac:	add	r2, lr, r3, lsl #3
   141b0:	str	r0, [r2, #8]
   141b4:	str	sl, [r2, #12]
   141b8:	add	r2, r3, #1
   141bc:	str	r2, [sp, #20]
   141c0:	beq	141e4 <flatcc_builder_create_buffer@@Base+0x11c>
   141c4:	add	r1, r1, r7
   141c8:	add	r0, lr, r2, lsl #3
   141cc:	add	r2, sp, #12
   141d0:	str	r1, [sp, #16]
   141d4:	str	r2, [r0, #8]
   141d8:	orr	r2, r3, #2
   141dc:	str	r7, [r0, #12]
   141e0:	str	r2, [sp, #20]
   141e4:	cmp	r6, #0
   141e8:	beq	14210 <flatcc_builder_create_buffer@@Base+0x148>
   141ec:	movw	r3, #35440	; 0x8a70
   141f0:	add	r1, r1, r6
   141f4:	add	r0, lr, r2, lsl #3
   141f8:	add	r2, r2, #1
   141fc:	movt	r3, #1
   14200:	str	r1, [sp, #16]
   14204:	str	r3, [r0, #8]
   14208:	str	r6, [r0, #12]
   1420c:	str	r2, [sp, #20]
   14210:	ldr	r5, [sp, #4]
   14214:	sub	r7, r9, r1
   14218:	cmp	ip, #0
   1421c:	mov	r6, #144	; 0x90
   14220:	ldr	r3, [sp, #8]
   14224:	mov	r0, r7
   14228:	addne	r0, r0, #4
   1422c:	cmp	r5, #0
   14230:	sub	r3, r3, r0
   14234:	movweq	r6, #140	; 0x8c
   14238:	cmp	r1, #0
   1423c:	ldr	r6, [r4, r6]
   14240:	str	r3, [fp, #-36]	; 0xffffffdc
   14244:	sub	r0, r6, r0
   14248:	str	r0, [fp, #-40]	; 0xffffffd8
   1424c:	ble	142a4 <flatcc_builder_create_buffer@@Base+0x1dc>
   14250:	ldr	r0, [r4, #36]	; 0x24
   14254:	ldr	r6, [r4, #44]	; 0x2c
   14258:	str	r1, [sp]
   1425c:	add	r1, lr, #8
   14260:	mov	r3, r7
   14264:	blx	r6
   14268:	cmp	r0, #0
   1426c:	bne	142c4 <flatcc_builder_create_buffer@@Base+0x1fc>
   14270:	cmp	r7, #0
   14274:	str	r7, [r4, #136]	; 0x88
   14278:	movne	r0, r7
   1427c:	subne	sp, fp, #28
   14280:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14284:	movw	r0, #40488	; 0x9e28
   14288:	movw	r1, #35970	; 0x8c82
   1428c:	movw	r3, #36285	; 0x8dbd
   14290:	mov	r2, #772	; 0x304
   14294:	movt	r0, #1
   14298:	movt	r1, #1
   1429c:	movt	r3, #1
   142a0:	bl	12418 <__assert_fail@plt>
   142a4:	movw	r0, #40488	; 0x9e28
   142a8:	movw	r1, #35970	; 0x8c82
   142ac:	movw	r3, #40167	; 0x9ce7
   142b0:	movw	r2, #647	; 0x287
   142b4:	movt	r0, #1
   142b8:	movt	r1, #1
   142bc:	movt	r3, #1
   142c0:	bl	12418 <__assert_fail@plt>
   142c4:	movw	r0, #40488	; 0x9e28
   142c8:	movw	r1, #35970	; 0x8c82
   142cc:	movw	r3, #40167	; 0x9ce7
   142d0:	movw	r2, #651	; 0x28b
   142d4:	movt	r0, #1
   142d8:	movt	r1, #1
   142dc:	movt	r3, #1
   142e0:	bl	12418 <__assert_fail@plt>

000142e4 <flatcc_builder_create_struct@@Base>:
   142e4:	push	{r4, r5, r6, sl, fp, lr}
   142e8:	add	fp, sp, #16
   142ec:	sub	sp, sp, #80	; 0x50
   142f0:	cmp	r3, #0
   142f4:	beq	143cc <flatcc_builder_create_struct@@Base+0xe8>
   142f8:	mov	r5, r0
   142fc:	ldrh	r0, [r0, #128]	; 0x80
   14300:	mov	r4, #0
   14304:	cmp	r0, r3
   14308:	strhcc	r3, [r5, #128]	; 0x80
   1430c:	sub	r3, r3, #1
   14310:	cmp	r2, #0
   14314:	ldr	r0, [r5, #136]	; 0x88
   14318:	str	r4, [sp, #12]
   1431c:	str	r4, [sp, #8]
   14320:	movne	r4, #1
   14324:	strne	r1, [sp, #16]
   14328:	strne	r2, [sp, #8]
   1432c:	strne	r2, [sp, #20]
   14330:	strne	r4, [sp, #12]
   14334:	sub	r6, r0, r2
   14338:	and	r3, r6, r3
   1433c:	cmp	r3, #0
   14340:	beq	1436c <flatcc_builder_create_struct@@Base+0x88>
   14344:	add	r1, sp, #8
   14348:	movw	r6, #35440	; 0x8a70
   1434c:	add	r2, r3, r2
   14350:	add	r1, r1, r4, lsl #3
   14354:	add	r4, r4, #1
   14358:	movt	r6, #1
   1435c:	str	r2, [sp, #8]
   14360:	str	r6, [r1, #8]
   14364:	str	r3, [r1, #12]
   14368:	str	r4, [sp, #12]
   1436c:	cmp	r2, #0
   14370:	ble	143ec <flatcc_builder_create_struct@@Base+0x108>
   14374:	sub	r6, r0, r2
   14378:	ldr	r0, [r5, #36]	; 0x24
   1437c:	ldr	ip, [r5, #44]	; 0x2c
   14380:	add	r1, sp, #8
   14384:	str	r2, [sp]
   14388:	mov	r2, r4
   1438c:	add	r1, r1, #8
   14390:	mov	r3, r6
   14394:	blx	ip
   14398:	cmp	r0, #0
   1439c:	streq	r6, [r5, #136]	; 0x88
   143a0:	moveq	r0, r6
   143a4:	subeq	sp, fp, #16
   143a8:	popeq	{r4, r5, r6, sl, fp, pc}
   143ac:	movw	r0, #40488	; 0x9e28
   143b0:	movw	r1, #35970	; 0x8c82
   143b4:	movw	r3, #40167	; 0x9ce7
   143b8:	movw	r2, #651	; 0x28b
   143bc:	movt	r0, #1
   143c0:	movt	r1, #1
   143c4:	movt	r3, #1
   143c8:	bl	12418 <__assert_fail@plt>
   143cc:	movw	r0, #36416	; 0x8e40
   143d0:	movw	r1, #35970	; 0x8c82
   143d4:	movw	r3, #36427	; 0x8e4b
   143d8:	movw	r2, #783	; 0x30f
   143dc:	movt	r0, #1
   143e0:	movt	r1, #1
   143e4:	movt	r3, #1
   143e8:	bl	12418 <__assert_fail@plt>
   143ec:	movw	r0, #40488	; 0x9e28
   143f0:	movw	r1, #35970	; 0x8c82
   143f4:	movw	r3, #40167	; 0x9ce7
   143f8:	movw	r2, #647	; 0x287
   143fc:	movt	r0, #1
   14400:	movt	r1, #1
   14404:	movt	r3, #1
   14408:	bl	12418 <__assert_fail@plt>

0001440c <flatcc_builder_start_buffer@@Base>:
   1440c:	push	{r4, r5, r6, r7, fp, lr}
   14410:	add	fp, sp, #16
   14414:	mov	r5, r1
   14418:	ldrh	r1, [r0, #128]	; 0x80
   1441c:	mov	r6, r3
   14420:	mov	r7, r2
   14424:	mov	r4, r0
   14428:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   1442c:	mov	r1, r0
   14430:	mvn	r0, #0
   14434:	cmp	r1, #0
   14438:	popne	{r4, r5, r6, r7, fp, pc}
   1443c:	mov	r0, #1
   14440:	cmp	r5, #0
   14444:	strh	r0, [r4, #128]	; 0x80
   14448:	ldrh	r1, [r4, #132]	; 0x84
   1444c:	ldr	r2, [r4, #32]
   14450:	strh	r1, [r2, #34]	; 0x22
   14454:	strh	r7, [r4, #132]	; 0x84
   14458:	ldrh	r1, [r4, #164]	; 0xa4
   1445c:	ldr	r2, [r4, #32]
   14460:	strh	r1, [r2, #32]
   14464:	strh	r6, [r4, #164]	; 0xa4
   14468:	ldr	r1, [r4, #32]
   1446c:	ldr	r2, [r4, #144]	; 0x90
   14470:	str	r2, [r1, #20]
   14474:	ldr	r1, [r4, #32]
   14478:	ldr	r2, [r4, #152]	; 0x98
   1447c:	str	r2, [r1, #28]
   14480:	ldr	r3, [r4, #148]	; 0x94
   14484:	ldr	r1, [r4, #32]
   14488:	ldr	r2, [r4, #136]	; 0x88
   1448c:	ldr	r7, [r4, #168]	; 0xa8
   14490:	add	r6, r3, #1
   14494:	str	r2, [r4, #144]	; 0x90
   14498:	str	r6, [r4, #148]	; 0x94
   1449c:	str	r3, [r4, #152]	; 0x98
   144a0:	str	r7, [r1, #16]
   144a4:	movw	r1, #35440	; 0x8a70
   144a8:	movt	r1, #1
   144ac:	movne	r1, r5
   144b0:	ldr	r1, [r1]
   144b4:	str	r1, [r4, #168]	; 0xa8
   144b8:	ldr	r1, [r4, #32]
   144bc:	strh	r0, [r1, #14]
   144c0:	mov	r0, #0
   144c4:	pop	{r4, r5, r6, r7, fp, pc}
   144c8:	push	{r4, r5, r6, r7, fp, lr}
   144cc:	add	fp, sp, #16
   144d0:	sub	sp, sp, #8
   144d4:	mov	r5, r1
   144d8:	ldr	r1, [r0, #156]	; 0x9c
   144dc:	ldr	r2, [r0, #160]	; 0xa0
   144e0:	mov	r4, r0
   144e4:	add	r0, r1, #1
   144e8:	cmp	r1, r2
   144ec:	str	r0, [r4, #156]	; 0x9c
   144f0:	bge	14504 <flatcc_builder_start_buffer@@Base+0xf8>
   144f4:	ldr	r0, [r4, #32]
   144f8:	add	r0, r0, #36	; 0x24
   144fc:	str	r0, [r4, #32]
   14500:	b	14598 <flatcc_builder_start_buffer@@Base+0x18c>
   14504:	ldr	r2, [r4, #176]	; 0xb0
   14508:	mvn	r6, #0
   1450c:	cmp	r2, #1
   14510:	cmpge	r1, r2
   14514:	bge	145d0 <flatcc_builder_start_buffer@@Base+0x1c4>
   14518:	add	r7, r0, r0, lsl #3
   1451c:	ldr	r0, [r4, #88]	; 0x58
   14520:	lsl	r2, r7, #2
   14524:	cmp	r2, r0
   14528:	bls	14550 <flatcc_builder_start_buffer@@Base+0x144>
   1452c:	ldr	r0, [r4, #40]	; 0x28
   14530:	ldr	ip, [r4, #48]	; 0x30
   14534:	mov	r3, #4
   14538:	add	r1, r4, #84	; 0x54
   1453c:	str	r3, [sp]
   14540:	mov	r3, #0
   14544:	blx	ip
   14548:	cmp	r0, #0
   1454c:	bne	145dc <flatcc_builder_start_buffer@@Base+0x1d0>
   14550:	ldr	r1, [r4, #84]	; 0x54
   14554:	mvn	r0, #35	; 0x23
   14558:	add	r0, r0, r7, lsl #2
   1455c:	adds	r0, r0, r1
   14560:	str	r0, [r4, #32]
   14564:	beq	145d0 <flatcc_builder_start_buffer@@Base+0x1c4>
   14568:	ldr	r1, [r4, #88]	; 0x58
   1456c:	movw	r3, #36409	; 0x8e39
   14570:	ldr	r2, [r4, #176]	; 0xb0
   14574:	movt	r3, #14563	; 0x38e3
   14578:	umull	r1, r3, r1, r3
   1457c:	lsr	r1, r3, #3
   14580:	cmp	r2, r3, lsr #3
   14584:	mov	r3, r1
   14588:	movlt	r3, r2
   1458c:	cmp	r2, #0
   14590:	movle	r3, r1
   14594:	str	r3, [r4, #160]	; 0xa0
   14598:	ldr	r1, [r4, #20]
   1459c:	mvn	r3, #3
   145a0:	mov	r6, #0
   145a4:	str	r1, [r0, #8]
   145a8:	ldrh	r2, [r4, #130]	; 0x82
   145ac:	strh	r2, [r0, #12]
   145b0:	strh	r5, [r4, #130]	; 0x82
   145b4:	ldr	r2, [r4, #28]
   145b8:	stm	r0, {r2, r3}
   145bc:	add	r0, r1, r2
   145c0:	str	r6, [r4, #20]
   145c4:	add	r0, r0, #7
   145c8:	bic	r0, r0, #7
   145cc:	str	r0, [r4, #28]
   145d0:	mov	r0, r6
   145d4:	sub	sp, fp, #16
   145d8:	pop	{r4, r5, r6, r7, fp, pc}
   145dc:	movw	r0, #40488	; 0x9e28
   145e0:	movw	r1, #35970	; 0x8c82
   145e4:	movw	r3, #40034	; 0x9c62
   145e8:	mov	r2, #308	; 0x134
   145ec:	movt	r0, #1
   145f0:	movt	r1, #1
   145f4:	movt	r3, #1
   145f8:	bl	12418 <__assert_fail@plt>

000145fc <flatcc_builder_end_buffer@@Base>:
   145fc:	push	{r4, r5, r6, sl, fp, lr}
   14600:	add	fp, sp, #16
   14604:	sub	sp, sp, #8
   14608:	mov	r4, r0
   1460c:	ldr	r0, [r0, #32]
   14610:	ldrh	r0, [r0, #14]
   14614:	cmp	r0, #1
   14618:	bne	1470c <flatcc_builder_end_buffer@@Base+0x110>
   1461c:	mov	r3, r1
   14620:	ldr	r1, [r4, #152]	; 0x98
   14624:	ldrh	r0, [r4, #164]	; 0xa4
   14628:	ldrh	r2, [r4, #132]	; 0x84
   1462c:	cmp	r1, #0
   14630:	ldrh	r1, [r4, #128]	; 0x80
   14634:	and	r0, r0, #2
   14638:	orrne	r0, r0, #1
   1463c:	cmp	r1, r2
   14640:	movcc	r1, r2
   14644:	strhcc	r2, [r4, #128]	; 0x80
   14648:	str	r0, [sp, #4]
   1464c:	mov	r0, r4
   14650:	str	r1, [sp]
   14654:	add	r1, r4, #168	; 0xa8
   14658:	bl	140c8 <flatcc_builder_create_buffer@@Base>
   1465c:	mov	r6, r0
   14660:	cmp	r0, #0
   14664:	beq	14700 <flatcc_builder_end_buffer@@Base+0x104>
   14668:	ldr	r1, [r4, #32]
   1466c:	ldr	r0, [r4, #16]
   14670:	ldr	r2, [r4, #20]
   14674:	ldr	r3, [r1, #20]
   14678:	str	r3, [r4, #144]	; 0x90
   1467c:	ldr	r3, [r1, #28]
   14680:	str	r3, [r4, #152]	; 0x98
   14684:	ldr	r3, [r1, #16]
   14688:	str	r3, [r4, #168]	; 0xa8
   1468c:	ldrh	r1, [r1, #32]
   14690:	strh	r1, [r4, #164]	; 0xa4
   14694:	mov	r1, #0
   14698:	bl	123f4 <memset@plt>
   1469c:	ldr	r0, [r4, #32]
   146a0:	ldr	r1, [r4, #60]	; 0x3c
   146a4:	ldr	r2, [r4, #64]	; 0x40
   146a8:	ldr	r3, [r0, #8]
   146ac:	str	r3, [r4, #20]
   146b0:	ldr	r3, [r0]
   146b4:	str	r3, [r4, #28]
   146b8:	add	r1, r1, r3
   146bc:	ldr	r5, [r0, #4]
   146c0:	str	r1, [r4, #16]
   146c4:	sub	r1, r2, r3
   146c8:	cmp	r1, r5
   146cc:	movhi	r1, r5
   146d0:	str	r1, [r4, #24]
   146d4:	ldrh	r1, [r4, #130]	; 0x82
   146d8:	ldrh	r2, [r4, #128]	; 0x80
   146dc:	cmp	r2, r1
   146e0:	strhcc	r1, [r4, #128]	; 0x80
   146e4:	ldrh	r1, [r0, #12]
   146e8:	sub	r0, r0, #36	; 0x24
   146ec:	str	r0, [r4, #32]
   146f0:	strh	r1, [r4, #130]	; 0x82
   146f4:	ldr	r0, [r4, #156]	; 0x9c
   146f8:	sub	r0, r0, #1
   146fc:	str	r0, [r4, #156]	; 0x9c
   14700:	mov	r0, r6
   14704:	sub	sp, fp, #16
   14708:	pop	{r4, r5, r6, sl, fp, pc}
   1470c:	movw	r0, #36529	; 0x8eb1
   14710:	movw	r1, #35970	; 0x8c82
   14714:	movw	r3, #36573	; 0x8edd
   14718:	movw	r2, #838	; 0x346
   1471c:	movt	r0, #1
   14720:	movt	r1, #1
   14724:	movt	r3, #1
   14728:	bl	12418 <__assert_fail@plt>

0001472c <flatcc_builder_start_struct@@Base>:
   1472c:	push	{r4, r5, r6, r7, fp, lr}
   14730:	add	fp, sp, #16
   14734:	sub	sp, sp, #8
   14738:	mov	r6, r1
   1473c:	mov	r1, r2
   14740:	mov	r4, r0
   14744:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   14748:	mov	r5, #0
   1474c:	cmp	r0, #0
   14750:	bne	147cc <flatcc_builder_start_struct@@Base+0xa0>
   14754:	ldr	r2, [r4, #32]
   14758:	mov	r0, #2
   1475c:	mvn	r7, #3
   14760:	strh	r0, [r2, #14]
   14764:	ldr	r1, [r4, #28]
   14768:	ldr	r3, [r4, #64]	; 0x40
   1476c:	ldr	r0, [r4, #60]	; 0x3c
   14770:	sub	r3, r3, r1
   14774:	add	r0, r0, r1
   14778:	cmn	r3, #4
   1477c:	str	r0, [r4, #16]
   14780:	movcs	r3, r7
   14784:	str	r3, [r4, #24]
   14788:	str	r7, [r2, #4]
   1478c:	ldr	r7, [r4, #20]
   14790:	add	r2, r7, r6
   14794:	cmp	r2, r3
   14798:	str	r2, [r4, #20]
   1479c:	bcc	14808 <flatcc_builder_start_struct@@Base+0xdc>
   147a0:	ldr	r0, [r4, #40]	; 0x28
   147a4:	ldr	r6, [r4, #48]	; 0x30
   147a8:	add	r1, r1, r2
   147ac:	mov	r3, #1
   147b0:	str	r3, [sp]
   147b4:	add	r2, r1, #1
   147b8:	add	r1, r4, #60	; 0x3c
   147bc:	mov	r3, #1
   147c0:	blx	r6
   147c4:	cmp	r0, #0
   147c8:	beq	147d8 <flatcc_builder_start_struct@@Base+0xac>
   147cc:	mov	r0, r5
   147d0:	sub	sp, fp, #16
   147d4:	pop	{r4, r5, r6, r7, fp, pc}
   147d8:	ldr	r1, [r4, #28]
   147dc:	ldr	r0, [r4, #60]	; 0x3c
   147e0:	ldr	r3, [r4, #64]	; 0x40
   147e4:	ldr	r2, [r4, #32]
   147e8:	add	r0, r0, r1
   147ec:	sub	r1, r3, r1
   147f0:	mvn	r3, #3
   147f4:	cmn	r1, #4
   147f8:	str	r0, [r4, #16]
   147fc:	movcs	r1, r3
   14800:	str	r1, [r4, #24]
   14804:	str	r3, [r2, #4]
   14808:	add	r5, r0, r7
   1480c:	mov	r0, r5
   14810:	sub	sp, fp, #16
   14814:	pop	{r4, r5, r6, r7, fp, pc}

00014818 <flatcc_builder_struct_edit@@Base>:
   14818:	ldr	r0, [r0, #16]
   1481c:	bx	lr

00014820 <flatcc_builder_end_struct@@Base>:
   14820:	push	{r4, r5, fp, lr}
   14824:	add	fp, sp, #8
   14828:	mov	r4, r0
   1482c:	ldr	r0, [r0, #32]
   14830:	ldrh	r0, [r0, #14]
   14834:	cmp	r0, #2
   14838:	bne	148d8 <flatcc_builder_end_struct@@Base+0xb8>
   1483c:	ldrh	r3, [r4, #130]	; 0x82
   14840:	ldr	r1, [r4, #16]
   14844:	ldr	r2, [r4, #20]
   14848:	mov	r0, r4
   1484c:	bl	142e4 <flatcc_builder_create_struct@@Base>
   14850:	mov	r5, r0
   14854:	cmp	r0, #0
   14858:	beq	148d0 <flatcc_builder_end_struct@@Base+0xb0>
   1485c:	ldr	r0, [r4, #16]
   14860:	ldr	r2, [r4, #20]
   14864:	mov	r1, #0
   14868:	bl	123f4 <memset@plt>
   1486c:	ldr	r0, [r4, #32]
   14870:	ldr	r1, [r4, #60]	; 0x3c
   14874:	ldr	ip, [r4, #64]	; 0x40
   14878:	ldr	r3, [r0, #8]
   1487c:	str	r3, [r4, #20]
   14880:	ldr	r3, [r0]
   14884:	str	r3, [r4, #28]
   14888:	add	r1, r1, r3
   1488c:	ldr	r2, [r0, #4]
   14890:	str	r1, [r4, #16]
   14894:	sub	r1, ip, r3
   14898:	cmp	r1, r2
   1489c:	movhi	r1, r2
   148a0:	str	r1, [r4, #24]
   148a4:	ldrh	r1, [r4, #130]	; 0x82
   148a8:	ldrh	r2, [r4, #128]	; 0x80
   148ac:	cmp	r2, r1
   148b0:	strhcc	r1, [r4, #128]	; 0x80
   148b4:	ldrh	r1, [r0, #12]
   148b8:	sub	r0, r0, #36	; 0x24
   148bc:	str	r0, [r4, #32]
   148c0:	strh	r1, [r4, #130]	; 0x82
   148c4:	ldr	r0, [r4, #156]	; 0x9c
   148c8:	sub	r0, r0, #1
   148cc:	str	r0, [r4, #156]	; 0x9c
   148d0:	mov	r0, r5
   148d4:	pop	{r4, r5, fp, pc}
   148d8:	movw	r0, #36662	; 0x8f36
   148dc:	movw	r1, #35970	; 0x8c82
   148e0:	movw	r3, #36706	; 0x8f62
   148e4:	mov	r2, #872	; 0x368
   148e8:	movt	r0, #1
   148ec:	movt	r1, #1
   148f0:	movt	r3, #1
   148f4:	bl	12418 <__assert_fail@plt>

000148f8 <flatcc_builder_extend_vector@@Base>:
   148f8:	push	{r4, r5, fp, lr}
   148fc:	add	fp, sp, #8
   14900:	sub	sp, sp, #8
   14904:	mov	r4, r0
   14908:	ldr	r0, [r0, #32]
   1490c:	ldr	r2, [r0, #20]
   14910:	adds	r2, r2, r1
   14914:	bcs	149d4 <flatcc_builder_extend_vector@@Base+0xdc>
   14918:	ldr	r3, [r0, #24]
   1491c:	cmp	r2, r3
   14920:	bhi	149d4 <flatcc_builder_extend_vector@@Base+0xdc>
   14924:	str	r2, [r0, #20]
   14928:	ldr	r2, [r4, #32]
   1492c:	ldr	r5, [r4, #20]
   14930:	ldr	r0, [r4, #24]
   14934:	ldr	r2, [r2, #16]
   14938:	mla	r1, r2, r1, r5
   1493c:	cmp	r1, r0
   14940:	str	r1, [r4, #20]
   14944:	bcs	14958 <flatcc_builder_extend_vector@@Base+0x60>
   14948:	ldr	r0, [r4, #16]
   1494c:	add	r0, r0, r5
   14950:	sub	sp, fp, #8
   14954:	pop	{r4, r5, fp, pc}
   14958:	ldr	r2, [r4, #28]
   1495c:	ldr	r0, [r4, #40]	; 0x28
   14960:	ldr	ip, [r4, #48]	; 0x30
   14964:	mov	r3, #1
   14968:	str	r3, [sp]
   1496c:	mov	r3, #1
   14970:	add	r1, r1, r2
   14974:	add	r2, r1, #1
   14978:	add	r1, r4, #60	; 0x3c
   1497c:	blx	ip
   14980:	mov	r1, r0
   14984:	mov	r0, #0
   14988:	cmp	r1, #0
   1498c:	beq	14998 <flatcc_builder_extend_vector@@Base+0xa0>
   14990:	sub	sp, fp, #8
   14994:	pop	{r4, r5, fp, pc}
   14998:	ldr	r1, [r4, #28]
   1499c:	ldr	r0, [r4, #60]	; 0x3c
   149a0:	ldr	r3, [r4, #64]	; 0x40
   149a4:	ldr	r2, [r4, #32]
   149a8:	add	r0, r0, r1
   149ac:	sub	r1, r3, r1
   149b0:	mvn	r3, #3
   149b4:	cmn	r1, #4
   149b8:	str	r0, [r4, #16]
   149bc:	movcs	r1, r3
   149c0:	str	r1, [r4, #24]
   149c4:	str	r3, [r2, #4]
   149c8:	add	r0, r0, r5
   149cc:	sub	sp, fp, #8
   149d0:	pop	{r4, r5, fp, pc}
   149d4:	movw	r0, #40241	; 0x9d31
   149d8:	movw	r1, #35970	; 0x8c82
   149dc:	movw	r3, #40268	; 0x9d4c
   149e0:	mov	r2, #892	; 0x37c
   149e4:	movt	r0, #1
   149e8:	movt	r1, #1
   149ec:	movt	r3, #1
   149f0:	bl	12418 <__assert_fail@plt>

000149f4 <flatcc_builder_vector_push@@Base>:
   149f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149f8:	add	fp, sp, #24
   149fc:	sub	sp, sp, #8
   14a00:	mov	r5, r0
   14a04:	ldr	r0, [r0, #32]
   14a08:	mov	r8, r1
   14a0c:	ldrh	r1, [r0, #14]
   14a10:	cmp	r1, #4
   14a14:	bne	14b00 <flatcc_builder_vector_push@@Base+0x10c>
   14a18:	ldr	r1, [r0, #20]
   14a1c:	ldr	r2, [r0, #24]
   14a20:	cmp	r1, r2
   14a24:	bhi	14b20 <flatcc_builder_vector_push@@Base+0x12c>
   14a28:	add	r1, r1, #1
   14a2c:	str	r1, [r0, #20]
   14a30:	ldr	r1, [r5, #32]
   14a34:	ldr	r4, [r5, #20]
   14a38:	ldr	r0, [r5, #24]
   14a3c:	ldr	r6, [r1, #16]
   14a40:	add	r1, r4, r6
   14a44:	cmp	r1, r0
   14a48:	str	r1, [r5, #20]
   14a4c:	bcs	14a78 <flatcc_builder_vector_push@@Base+0x84>
   14a50:	ldr	r0, [r5, #16]
   14a54:	adds	r7, r0, r4
   14a58:	beq	14af0 <flatcc_builder_vector_push@@Base+0xfc>
   14a5c:	mov	r0, r7
   14a60:	mov	r1, r8
   14a64:	mov	r2, r6
   14a68:	bl	12388 <memcpy@plt>
   14a6c:	mov	r0, r7
   14a70:	sub	sp, fp, #24
   14a74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a78:	ldr	r2, [r5, #28]
   14a7c:	ldr	r0, [r5, #40]	; 0x28
   14a80:	ldr	r7, [r5, #48]	; 0x30
   14a84:	mov	r3, #1
   14a88:	str	r3, [sp]
   14a8c:	mov	r3, #1
   14a90:	add	r1, r1, r2
   14a94:	add	r2, r1, #1
   14a98:	add	r1, r5, #60	; 0x3c
   14a9c:	blx	r7
   14aa0:	mov	r7, #0
   14aa4:	cmp	r0, #0
   14aa8:	beq	14ab8 <flatcc_builder_vector_push@@Base+0xc4>
   14aac:	mov	r0, r7
   14ab0:	sub	sp, fp, #24
   14ab4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ab8:	ldr	r1, [r5, #28]
   14abc:	ldr	r0, [r5, #60]	; 0x3c
   14ac0:	ldr	r3, [r5, #64]	; 0x40
   14ac4:	ldr	r2, [r5, #32]
   14ac8:	add	r0, r0, r1
   14acc:	sub	r1, r3, r1
   14ad0:	mvn	r3, #3
   14ad4:	cmn	r1, #4
   14ad8:	str	r0, [r5, #16]
   14adc:	movcs	r1, r3
   14ae0:	str	r1, [r5, #24]
   14ae4:	str	r3, [r2, #4]
   14ae8:	adds	r7, r0, r4
   14aec:	bne	14a5c <flatcc_builder_vector_push@@Base+0x68>
   14af0:	mov	r7, #0
   14af4:	mov	r0, r7
   14af8:	sub	sp, fp, #24
   14afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b00:	movw	r0, #36773	; 0x8fa5
   14b04:	movw	r1, #35970	; 0x8c82
   14b08:	movw	r3, #36817	; 0x8fd1
   14b0c:	movw	r2, #907	; 0x38b
   14b10:	movt	r0, #1
   14b14:	movt	r1, #1
   14b18:	movt	r3, #1
   14b1c:	bl	12418 <__assert_fail@plt>
   14b20:	movw	r0, #36884	; 0x9014
   14b24:	movw	r1, #35970	; 0x8c82
   14b28:	movw	r3, #36817	; 0x8fd1
   14b2c:	mov	r2, #908	; 0x38c
   14b30:	movt	r0, #1
   14b34:	movt	r1, #1
   14b38:	movt	r3, #1
   14b3c:	bl	12418 <__assert_fail@plt>

00014b40 <flatcc_builder_append_vector@@Base>:
   14b40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b44:	add	fp, sp, #24
   14b48:	sub	sp, sp, #8
   14b4c:	mov	r6, r0
   14b50:	ldr	r0, [r0, #32]
   14b54:	mov	r8, r1
   14b58:	ldrh	r1, [r0, #14]
   14b5c:	cmp	r1, #4
   14b60:	bne	14c74 <flatcc_builder_append_vector@@Base+0x134>
   14b64:	ldr	r1, [r0, #20]
   14b68:	mov	r5, r2
   14b6c:	adds	r1, r1, r2
   14b70:	bcs	14c54 <flatcc_builder_append_vector@@Base+0x114>
   14b74:	ldr	r2, [r0, #24]
   14b78:	cmp	r1, r2
   14b7c:	bhi	14c54 <flatcc_builder_append_vector@@Base+0x114>
   14b80:	str	r1, [r0, #20]
   14b84:	ldr	r1, [r6, #32]
   14b88:	ldr	r4, [r6, #20]
   14b8c:	ldr	r0, [r6, #24]
   14b90:	ldr	r9, [r1, #16]
   14b94:	mla	r1, r9, r5, r4
   14b98:	cmp	r1, r0
   14b9c:	str	r1, [r6, #20]
   14ba0:	bcs	14bcc <flatcc_builder_append_vector@@Base+0x8c>
   14ba4:	ldr	r0, [r6, #16]
   14ba8:	adds	r7, r0, r4
   14bac:	beq	14c44 <flatcc_builder_append_vector@@Base+0x104>
   14bb0:	mul	r2, r9, r5
   14bb4:	mov	r0, r7
   14bb8:	mov	r1, r8
   14bbc:	bl	12388 <memcpy@plt>
   14bc0:	mov	r0, r7
   14bc4:	sub	sp, fp, #24
   14bc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14bcc:	ldr	r2, [r6, #28]
   14bd0:	ldr	r0, [r6, #40]	; 0x28
   14bd4:	ldr	r7, [r6, #48]	; 0x30
   14bd8:	mov	r3, #1
   14bdc:	str	r3, [sp]
   14be0:	mov	r3, #1
   14be4:	add	r1, r1, r2
   14be8:	add	r2, r1, #1
   14bec:	add	r1, r6, #60	; 0x3c
   14bf0:	blx	r7
   14bf4:	mov	r7, #0
   14bf8:	cmp	r0, #0
   14bfc:	beq	14c0c <flatcc_builder_append_vector@@Base+0xcc>
   14c00:	mov	r0, r7
   14c04:	sub	sp, fp, #24
   14c08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c0c:	ldr	r1, [r6, #28]
   14c10:	ldr	r0, [r6, #60]	; 0x3c
   14c14:	ldr	r3, [r6, #64]	; 0x40
   14c18:	ldr	r2, [r6, #32]
   14c1c:	add	r0, r0, r1
   14c20:	sub	r1, r3, r1
   14c24:	mvn	r3, #3
   14c28:	cmn	r1, #4
   14c2c:	str	r0, [r6, #16]
   14c30:	movcs	r1, r3
   14c34:	str	r1, [r6, #24]
   14c38:	str	r3, [r2, #4]
   14c3c:	adds	r7, r0, r4
   14c40:	bne	14bb0 <flatcc_builder_append_vector@@Base+0x70>
   14c44:	mov	r7, #0
   14c48:	mov	r0, r7
   14c4c:	sub	sp, fp, #24
   14c50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c54:	movw	r0, #40241	; 0x9d31
   14c58:	movw	r1, #35970	; 0x8c82
   14c5c:	movw	r3, #40268	; 0x9d4c
   14c60:	mov	r2, #892	; 0x37c
   14c64:	movt	r0, #1
   14c68:	movt	r1, #1
   14c6c:	movt	r3, #1
   14c70:	bl	12418 <__assert_fail@plt>
   14c74:	movw	r0, #36773	; 0x8fa5
   14c78:	movw	r1, #35970	; 0x8c82
   14c7c:	movw	r3, #36945	; 0x9051
   14c80:	movw	r2, #915	; 0x393
   14c84:	movt	r0, #1
   14c88:	movt	r1, #1
   14c8c:	movt	r3, #1
   14c90:	bl	12418 <__assert_fail@plt>

00014c94 <flatcc_builder_extend_offset_vector@@Base>:
   14c94:	push	{r4, r5, fp, lr}
   14c98:	add	fp, sp, #8
   14c9c:	sub	sp, sp, #8
   14ca0:	mov	r4, r0
   14ca4:	ldr	r0, [r0, #32]
   14ca8:	ldr	r2, [r0, #20]
   14cac:	adds	r2, r2, r1
   14cb0:	cmpcc	r2, #1073741824	; 0x40000000
   14cb4:	bcc	14cd8 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14cb8:	movw	r0, #40241	; 0x9d31
   14cbc:	movw	r1, #35970	; 0x8c82
   14cc0:	movw	r3, #40268	; 0x9d4c
   14cc4:	mov	r2, #892	; 0x37c
   14cc8:	movt	r0, #1
   14ccc:	movt	r1, #1
   14cd0:	movt	r3, #1
   14cd4:	bl	12418 <__assert_fail@plt>
   14cd8:	str	r2, [r0, #20]
   14cdc:	ldr	r5, [r4, #20]
   14ce0:	ldr	r0, [r4, #24]
   14ce4:	add	r1, r5, r1, lsl #2
   14ce8:	cmp	r1, r0
   14cec:	str	r1, [r4, #20]
   14cf0:	bcs	14d04 <flatcc_builder_extend_offset_vector@@Base+0x70>
   14cf4:	ldr	r0, [r4, #16]
   14cf8:	add	r0, r0, r5
   14cfc:	sub	sp, fp, #8
   14d00:	pop	{r4, r5, fp, pc}
   14d04:	ldr	r2, [r4, #28]
   14d08:	ldr	r0, [r4, #40]	; 0x28
   14d0c:	ldr	ip, [r4, #48]	; 0x30
   14d10:	mov	r3, #1
   14d14:	str	r3, [sp]
   14d18:	mov	r3, #1
   14d1c:	add	r1, r1, r2
   14d20:	add	r2, r1, #1
   14d24:	add	r1, r4, #60	; 0x3c
   14d28:	blx	ip
   14d2c:	mov	r1, r0
   14d30:	mov	r0, #0
   14d34:	cmp	r1, #0
   14d38:	beq	14d44 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   14d3c:	sub	sp, fp, #8
   14d40:	pop	{r4, r5, fp, pc}
   14d44:	ldr	r1, [r4, #28]
   14d48:	ldr	r0, [r4, #60]	; 0x3c
   14d4c:	ldr	r3, [r4, #64]	; 0x40
   14d50:	ldr	r2, [r4, #32]
   14d54:	add	r0, r0, r1
   14d58:	sub	r1, r3, r1
   14d5c:	mvn	r3, #3
   14d60:	cmn	r1, #4
   14d64:	str	r0, [r4, #16]
   14d68:	movcs	r1, r3
   14d6c:	str	r1, [r4, #24]
   14d70:	str	r3, [r2, #4]
   14d74:	add	r0, r0, r5
   14d78:	sub	sp, fp, #8
   14d7c:	pop	{r4, r5, fp, pc}

00014d80 <flatcc_builder_offset_vector_push@@Base>:
   14d80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d84:	add	fp, sp, #24
   14d88:	sub	sp, sp, #8
   14d8c:	mov	r6, r0
   14d90:	ldr	r0, [r0, #32]
   14d94:	mov	r8, r1
   14d98:	ldrh	r1, [r0, #14]
   14d9c:	cmp	r1, #5
   14da0:	bne	14e60 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14da4:	ldr	r1, [r0, #20]
   14da8:	mov	r5, #0
   14dac:	cmn	r1, #-1073741823	; 0xc0000001
   14db0:	beq	14e0c <flatcc_builder_offset_vector_push@@Base+0x8c>
   14db4:	add	r1, r1, #1
   14db8:	str	r1, [r0, #20]
   14dbc:	ldr	r7, [r6, #20]
   14dc0:	ldr	r0, [r6, #24]
   14dc4:	add	r1, r7, #4
   14dc8:	cmp	r1, r0
   14dcc:	str	r1, [r6, #20]
   14dd0:	bcs	14ddc <flatcc_builder_offset_vector_push@@Base+0x5c>
   14dd4:	ldr	r0, [r6, #16]
   14dd8:	b	14e48 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14ddc:	ldr	r1, [r6, #28]
   14de0:	ldr	r0, [r6, #40]	; 0x28
   14de4:	ldr	r4, [r6, #48]	; 0x30
   14de8:	mov	r2, #1
   14dec:	mov	r3, #1
   14df0:	str	r2, [sp]
   14df4:	add	r1, r7, r1
   14df8:	add	r2, r1, #5
   14dfc:	add	r1, r6, #60	; 0x3c
   14e00:	blx	r4
   14e04:	cmp	r0, #0
   14e08:	beq	14e18 <flatcc_builder_offset_vector_push@@Base+0x98>
   14e0c:	mov	r0, r5
   14e10:	sub	sp, fp, #24
   14e14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e18:	ldr	r1, [r6, #28]
   14e1c:	ldr	r0, [r6, #60]	; 0x3c
   14e20:	ldr	r3, [r6, #64]	; 0x40
   14e24:	ldr	r2, [r6, #32]
   14e28:	add	r0, r0, r1
   14e2c:	sub	r1, r3, r1
   14e30:	mvn	r3, #3
   14e34:	cmn	r1, #4
   14e38:	str	r0, [r6, #16]
   14e3c:	movcs	r1, r3
   14e40:	str	r1, [r6, #24]
   14e44:	str	r3, [r2, #4]
   14e48:	adds	r0, r0, r7
   14e4c:	movne	r5, r0
   14e50:	strne	r8, [r0]
   14e54:	mov	r0, r5
   14e58:	sub	sp, fp, #24
   14e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e60:	movw	r0, #37022	; 0x909e
   14e64:	movw	r1, #35970	; 0x8c82
   14e68:	movw	r3, #37073	; 0x90d1
   14e6c:	movw	r2, #934	; 0x3a6
   14e70:	movt	r0, #1
   14e74:	movt	r1, #1
   14e78:	movt	r3, #1
   14e7c:	bl	12418 <__assert_fail@plt>

00014e80 <flatcc_builder_append_offset_vector@@Base>:
   14e80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e84:	add	fp, sp, #24
   14e88:	sub	sp, sp, #8
   14e8c:	mov	r6, r0
   14e90:	ldr	r0, [r0, #32]
   14e94:	mov	r8, r1
   14e98:	ldrh	r1, [r0, #14]
   14e9c:	cmp	r1, #5
   14ea0:	bne	14fa4 <flatcc_builder_append_offset_vector@@Base+0x124>
   14ea4:	ldr	r1, [r0, #20]
   14ea8:	mov	r5, r2
   14eac:	adds	r1, r1, r2
   14eb0:	cmpcc	r1, #1073741824	; 0x40000000
   14eb4:	bcc	14ed8 <flatcc_builder_append_offset_vector@@Base+0x58>
   14eb8:	movw	r0, #40241	; 0x9d31
   14ebc:	movw	r1, #35970	; 0x8c82
   14ec0:	movw	r3, #40268	; 0x9d4c
   14ec4:	mov	r2, #892	; 0x37c
   14ec8:	movt	r0, #1
   14ecc:	movt	r1, #1
   14ed0:	movt	r3, #1
   14ed4:	bl	12418 <__assert_fail@plt>
   14ed8:	str	r1, [r0, #20]
   14edc:	ldr	r4, [r6, #20]
   14ee0:	ldr	r0, [r6, #24]
   14ee4:	add	r1, r4, r5, lsl #2
   14ee8:	cmp	r1, r0
   14eec:	str	r1, [r6, #20]
   14ef0:	bcs	14f1c <flatcc_builder_append_offset_vector@@Base+0x9c>
   14ef4:	ldr	r0, [r6, #16]
   14ef8:	adds	r7, r0, r4
   14efc:	beq	14f94 <flatcc_builder_append_offset_vector@@Base+0x114>
   14f00:	lsl	r2, r5, #2
   14f04:	mov	r0, r7
   14f08:	mov	r1, r8
   14f0c:	bl	12388 <memcpy@plt>
   14f10:	mov	r0, r7
   14f14:	sub	sp, fp, #24
   14f18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f1c:	ldr	r2, [r6, #28]
   14f20:	ldr	r0, [r6, #40]	; 0x28
   14f24:	ldr	r7, [r6, #48]	; 0x30
   14f28:	mov	r3, #1
   14f2c:	str	r3, [sp]
   14f30:	mov	r3, #1
   14f34:	add	r1, r1, r2
   14f38:	add	r2, r1, #1
   14f3c:	add	r1, r6, #60	; 0x3c
   14f40:	blx	r7
   14f44:	mov	r7, #0
   14f48:	cmp	r0, #0
   14f4c:	beq	14f5c <flatcc_builder_append_offset_vector@@Base+0xdc>
   14f50:	mov	r0, r7
   14f54:	sub	sp, fp, #24
   14f58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f5c:	ldr	r1, [r6, #28]
   14f60:	ldr	r0, [r6, #60]	; 0x3c
   14f64:	ldr	r3, [r6, #64]	; 0x40
   14f68:	ldr	r2, [r6, #32]
   14f6c:	add	r0, r0, r1
   14f70:	sub	r1, r3, r1
   14f74:	mvn	r3, #3
   14f78:	cmn	r1, #4
   14f7c:	str	r0, [r6, #16]
   14f80:	movcs	r1, r3
   14f84:	str	r1, [r6, #24]
   14f88:	str	r3, [r2, #4]
   14f8c:	adds	r7, r0, r4
   14f90:	bne	14f00 <flatcc_builder_append_offset_vector@@Base+0x80>
   14f94:	mov	r7, #0
   14f98:	mov	r0, r7
   14f9c:	sub	sp, fp, #24
   14fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fa4:	movw	r0, #37022	; 0x909e
   14fa8:	movw	r1, #35970	; 0x8c82
   14fac:	movw	r3, #37171	; 0x9133
   14fb0:	mov	r2, #948	; 0x3b4
   14fb4:	movt	r0, #1
   14fb8:	movt	r1, #1
   14fbc:	movt	r3, #1
   14fc0:	bl	12418 <__assert_fail@plt>

00014fc4 <flatcc_builder_extend_string@@Base>:
   14fc4:	push	{r4, r5, fp, lr}
   14fc8:	add	fp, sp, #8
   14fcc:	sub	sp, sp, #8
   14fd0:	mov	r4, r0
   14fd4:	ldr	r0, [r0, #32]
   14fd8:	ldrh	r2, [r0, #14]
   14fdc:	cmp	r2, #6
   14fe0:	bne	15098 <flatcc_builder_extend_string@@Base+0xd4>
   14fe4:	ldr	r2, [r0, #20]
   14fe8:	adds	r2, r2, r1
   14fec:	bcs	150b8 <flatcc_builder_extend_string@@Base+0xf4>
   14ff0:	str	r2, [r0, #20]
   14ff4:	ldr	r5, [r4, #20]
   14ff8:	ldr	r0, [r4, #24]
   14ffc:	add	r1, r5, r1
   15000:	cmp	r1, r0
   15004:	str	r1, [r4, #20]
   15008:	bcs	1501c <flatcc_builder_extend_string@@Base+0x58>
   1500c:	ldr	r0, [r4, #16]
   15010:	add	r0, r0, r5
   15014:	sub	sp, fp, #8
   15018:	pop	{r4, r5, fp, pc}
   1501c:	ldr	r2, [r4, #28]
   15020:	ldr	r0, [r4, #40]	; 0x28
   15024:	ldr	ip, [r4, #48]	; 0x30
   15028:	mov	r3, #1
   1502c:	str	r3, [sp]
   15030:	mov	r3, #1
   15034:	add	r1, r1, r2
   15038:	add	r2, r1, #1
   1503c:	add	r1, r4, #60	; 0x3c
   15040:	blx	ip
   15044:	mov	r1, r0
   15048:	mov	r0, #0
   1504c:	cmp	r1, #0
   15050:	beq	1505c <flatcc_builder_extend_string@@Base+0x98>
   15054:	sub	sp, fp, #8
   15058:	pop	{r4, r5, fp, pc}
   1505c:	ldr	r1, [r4, #28]
   15060:	ldr	r0, [r4, #60]	; 0x3c
   15064:	ldr	r3, [r4, #64]	; 0x40
   15068:	ldr	r2, [r4, #32]
   1506c:	add	r0, r0, r1
   15070:	sub	r1, r3, r1
   15074:	mvn	r3, #3
   15078:	cmn	r1, #4
   1507c:	str	r0, [r4, #16]
   15080:	movcs	r1, r3
   15084:	str	r1, [r4, #24]
   15088:	str	r3, [r2, #4]
   1508c:	add	r0, r0, r5
   15090:	sub	sp, fp, #8
   15094:	pop	{r4, r5, fp, pc}
   15098:	movw	r0, #37287	; 0x91a7
   1509c:	movw	r1, #35970	; 0x8c82
   150a0:	movw	r3, #37331	; 0x91d3
   150a4:	movw	r2, #957	; 0x3bd
   150a8:	movt	r0, #1
   150ac:	movt	r1, #1
   150b0:	movt	r3, #1
   150b4:	bl	12418 <__assert_fail@plt>
   150b8:	movw	r0, #40241	; 0x9d31
   150bc:	movw	r1, #35970	; 0x8c82
   150c0:	movw	r3, #40268	; 0x9d4c
   150c4:	mov	r2, #892	; 0x37c
   150c8:	movt	r0, #1
   150cc:	movt	r1, #1
   150d0:	movt	r3, #1
   150d4:	bl	12418 <__assert_fail@plt>

000150d8 <flatcc_builder_append_string@@Base>:
   150d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150dc:	add	fp, sp, #24
   150e0:	sub	sp, sp, #8
   150e4:	mov	r6, r0
   150e8:	ldr	r0, [r0, #32]
   150ec:	mov	r8, r1
   150f0:	ldrh	r1, [r0, #14]
   150f4:	cmp	r1, #6
   150f8:	bne	151d8 <flatcc_builder_append_string@@Base+0x100>
   150fc:	ldr	r1, [r0, #20]
   15100:	mov	r4, r2
   15104:	adds	r1, r1, r2
   15108:	bcs	151f8 <flatcc_builder_append_string@@Base+0x120>
   1510c:	str	r1, [r0, #20]
   15110:	ldr	r5, [r6, #20]
   15114:	ldr	r0, [r6, #24]
   15118:	add	r1, r5, r4
   1511c:	cmp	r1, r0
   15120:	str	r1, [r6, #20]
   15124:	bcs	15150 <flatcc_builder_append_string@@Base+0x78>
   15128:	ldr	r0, [r6, #16]
   1512c:	adds	r7, r0, r5
   15130:	beq	151c8 <flatcc_builder_append_string@@Base+0xf0>
   15134:	mov	r0, r7
   15138:	mov	r1, r8
   1513c:	mov	r2, r4
   15140:	bl	12388 <memcpy@plt>
   15144:	mov	r0, r7
   15148:	sub	sp, fp, #24
   1514c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15150:	ldr	r2, [r6, #28]
   15154:	ldr	r0, [r6, #40]	; 0x28
   15158:	ldr	r7, [r6, #48]	; 0x30
   1515c:	mov	r3, #1
   15160:	str	r3, [sp]
   15164:	mov	r3, #1
   15168:	add	r1, r1, r2
   1516c:	add	r2, r1, #1
   15170:	add	r1, r6, #60	; 0x3c
   15174:	blx	r7
   15178:	mov	r7, #0
   1517c:	cmp	r0, #0
   15180:	beq	15190 <flatcc_builder_append_string@@Base+0xb8>
   15184:	mov	r0, r7
   15188:	sub	sp, fp, #24
   1518c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15190:	ldr	r1, [r6, #28]
   15194:	ldr	r0, [r6, #60]	; 0x3c
   15198:	ldr	r3, [r6, #64]	; 0x40
   1519c:	ldr	r2, [r6, #32]
   151a0:	add	r0, r0, r1
   151a4:	sub	r1, r3, r1
   151a8:	mvn	r3, #3
   151ac:	cmn	r1, #4
   151b0:	str	r0, [r6, #16]
   151b4:	movcs	r1, r3
   151b8:	str	r1, [r6, #24]
   151bc:	str	r3, [r2, #4]
   151c0:	adds	r7, r0, r5
   151c4:	bne	15134 <flatcc_builder_append_string@@Base+0x5c>
   151c8:	mov	r7, #0
   151cc:	mov	r0, r7
   151d0:	sub	sp, fp, #24
   151d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151d8:	movw	r0, #37287	; 0x91a7
   151dc:	movw	r1, #35970	; 0x8c82
   151e0:	movw	r3, #37394	; 0x9212
   151e4:	movw	r2, #966	; 0x3c6
   151e8:	movt	r0, #1
   151ec:	movt	r1, #1
   151f0:	movt	r3, #1
   151f4:	bl	12418 <__assert_fail@plt>
   151f8:	movw	r0, #40241	; 0x9d31
   151fc:	movw	r1, #35970	; 0x8c82
   15200:	movw	r3, #40268	; 0x9d4c
   15204:	mov	r2, #892	; 0x37c
   15208:	movt	r0, #1
   1520c:	movt	r1, #1
   15210:	movt	r3, #1
   15214:	bl	12418 <__assert_fail@plt>

00015218 <flatcc_builder_append_string_str@@Base>:
   15218:	push	{r4, r5, fp, lr}
   1521c:	add	fp, sp, #8
   15220:	mov	r5, r0
   15224:	mov	r0, r1
   15228:	mov	r4, r1
   1522c:	bl	123dc <strlen@plt>
   15230:	mov	r2, r0
   15234:	mov	r0, r5
   15238:	mov	r1, r4
   1523c:	pop	{r4, r5, fp, lr}
   15240:	b	150d8 <flatcc_builder_append_string@@Base>

00015244 <flatcc_builder_append_string_strn@@Base>:
   15244:	push	{r4, r5, r6, sl, fp, lr}
   15248:	add	fp, sp, #16
   1524c:	mov	r6, r0
   15250:	mov	r5, r1
   15254:	mov	r0, r1
   15258:	mov	r1, #0
   1525c:	mov	r4, r2
   15260:	bl	12400 <memchr@plt>
   15264:	cmp	r0, #0
   15268:	mov	r1, r5
   1526c:	subne	r4, r0, r5
   15270:	mov	r0, r6
   15274:	mov	r2, r4
   15278:	pop	{r4, r5, r6, sl, fp, lr}
   1527c:	b	150d8 <flatcc_builder_append_string@@Base>

00015280 <flatcc_builder_truncate_vector@@Base>:
   15280:	push	{fp, lr}
   15284:	mov	fp, sp
   15288:	ldr	r2, [r0, #32]
   1528c:	ldrh	r3, [r2, #14]
   15290:	cmp	r3, #4
   15294:	bne	152dc <flatcc_builder_truncate_vector@@Base+0x5c>
   15298:	ldr	r3, [r2, #20]
   1529c:	cmp	r3, r1
   152a0:	bcc	152fc <flatcc_builder_truncate_vector@@Base+0x7c>
   152a4:	sub	r3, r3, r1
   152a8:	str	r3, [r2, #20]
   152ac:	ldr	r2, [r0, #32]
   152b0:	ldr	r3, [r0, #20]
   152b4:	ldr	ip, [r0, #16]
   152b8:	ldr	r2, [r2, #16]
   152bc:	mls	r3, r2, r1, r3
   152c0:	mul	r2, r2, r1
   152c4:	mov	r1, #0
   152c8:	str	r3, [r0, #20]
   152cc:	add	r0, ip, r3
   152d0:	bl	123f4 <memset@plt>
   152d4:	mov	r0, #0
   152d8:	pop	{fp, pc}
   152dc:	movw	r0, #36773	; 0x8fa5
   152e0:	movw	r1, #35970	; 0x8c82
   152e4:	movw	r3, #37471	; 0x925f
   152e8:	movw	r2, #985	; 0x3d9
   152ec:	movt	r0, #1
   152f0:	movt	r1, #1
   152f4:	movt	r3, #1
   152f8:	bl	12418 <__assert_fail@plt>
   152fc:	movw	r0, #37534	; 0x929e
   15300:	movw	r1, #35970	; 0x8c82
   15304:	movw	r3, #37471	; 0x925f
   15308:	movw	r2, #986	; 0x3da
   1530c:	movt	r0, #1
   15310:	movt	r1, #1
   15314:	movt	r3, #1
   15318:	bl	12418 <__assert_fail@plt>

0001531c <flatcc_builder_truncate_offset_vector@@Base>:
   1531c:	push	{fp, lr}
   15320:	mov	fp, sp
   15324:	ldr	r2, [r0, #32]
   15328:	ldrh	r3, [r2, #14]
   1532c:	cmp	r3, #5
   15330:	bne	15378 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15334:	ldr	r3, [r2, #20]
   15338:	cmp	r3, r1
   1533c:	bcc	15398 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15340:	sub	r3, r3, r1
   15344:	str	r3, [r2, #20]
   15348:	ldr	r2, [r0, #32]
   1534c:	ldr	r3, [r0, #20]
   15350:	ldr	ip, [r0, #16]
   15354:	ldr	r2, [r2, #16]
   15358:	mls	r3, r2, r1, r3
   1535c:	mul	r2, r2, r1
   15360:	mov	r1, #0
   15364:	str	r3, [r0, #20]
   15368:	add	r0, ip, r3
   1536c:	bl	123f4 <memset@plt>
   15370:	mov	r0, #0
   15374:	pop	{fp, pc}
   15378:	movw	r0, #37022	; 0x909e
   1537c:	movw	r1, #35970	; 0x8c82
   15380:	movw	r3, #37570	; 0x92c2
   15384:	movw	r2, #994	; 0x3e2
   15388:	movt	r0, #1
   1538c:	movt	r1, #1
   15390:	movt	r3, #1
   15394:	bl	12418 <__assert_fail@plt>
   15398:	movw	r0, #37640	; 0x9308
   1539c:	movw	r1, #35970	; 0x8c82
   153a0:	movw	r3, #37570	; 0x92c2
   153a4:	movw	r2, #995	; 0x3e3
   153a8:	movt	r0, #1
   153ac:	movt	r1, #1
   153b0:	movt	r3, #1
   153b4:	bl	12418 <__assert_fail@plt>

000153b8 <flatcc_builder_truncate_string@@Base>:
   153b8:	push	{fp, lr}
   153bc:	mov	fp, sp
   153c0:	mov	r2, r1
   153c4:	ldr	r1, [r0, #32]
   153c8:	ldrh	r3, [r1, #14]
   153cc:	cmp	r3, #6
   153d0:	bne	1540c <flatcc_builder_truncate_string@@Base+0x54>
   153d4:	ldr	r3, [r1, #20]
   153d8:	cmp	r3, r2
   153dc:	bcc	1542c <flatcc_builder_truncate_string@@Base+0x74>
   153e0:	sub	r3, r3, r2
   153e4:	str	r3, [r1, #20]
   153e8:	ldr	r3, [r0, #20]
   153ec:	ldr	r1, [r0, #16]
   153f0:	sub	r3, r3, r2
   153f4:	str	r3, [r0, #20]
   153f8:	add	r0, r1, r3
   153fc:	mov	r1, #0
   15400:	bl	123f4 <memset@plt>
   15404:	mov	r0, #0
   15408:	pop	{fp, pc}
   1540c:	movw	r0, #37287	; 0x91a7
   15410:	movw	r1, #35970	; 0x8c82
   15414:	movw	r3, #37699	; 0x9343
   15418:	movw	r2, #1003	; 0x3eb
   1541c:	movt	r0, #1
   15420:	movt	r1, #1
   15424:	movt	r3, #1
   15428:	bl	12418 <__assert_fail@plt>
   1542c:	movw	r0, #37762	; 0x9382
   15430:	movw	r1, #35970	; 0x8c82
   15434:	movw	r3, #37699	; 0x9343
   15438:	mov	r2, #1004	; 0x3ec
   1543c:	movt	r0, #1
   15440:	movt	r1, #1
   15444:	movt	r3, #1
   15448:	bl	12418 <__assert_fail@plt>

0001544c <flatcc_builder_start_vector@@Base>:
   1544c:	push	{r4, r5, r6, r7, fp, lr}
   15450:	add	fp, sp, #16
   15454:	mov	r7, #4
   15458:	cmp	r2, #4
   1545c:	mov	r6, r1
   15460:	mov	r5, r3
   15464:	mov	r4, r0
   15468:	movls	r2, r7
   1546c:	mov	r1, r2
   15470:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   15474:	mov	r1, r0
   15478:	mvn	r0, #0
   1547c:	cmp	r1, #0
   15480:	popne	{r4, r5, r6, r7, fp, pc}
   15484:	ldr	r0, [r4, #32]
   15488:	str	r6, [r0, #16]
   1548c:	mov	r0, #0
   15490:	ldr	r1, [r4, #32]
   15494:	str	r0, [r1, #20]
   15498:	ldr	r1, [r4, #32]
   1549c:	str	r5, [r1, #24]
   154a0:	ldr	r1, [r4, #32]
   154a4:	strh	r7, [r1, #14]
   154a8:	ldr	r2, [r4, #28]
   154ac:	ldr	r3, [r4, #60]	; 0x3c
   154b0:	ldr	r7, [r4, #64]	; 0x40
   154b4:	add	r3, r3, r2
   154b8:	sub	r2, r7, r2
   154bc:	str	r3, [r4, #16]
   154c0:	mvn	r3, #3
   154c4:	cmn	r2, #4
   154c8:	movcs	r2, r3
   154cc:	str	r2, [r4, #24]
   154d0:	str	r3, [r1, #4]
   154d4:	pop	{r4, r5, r6, r7, fp, pc}

000154d8 <flatcc_builder_start_offset_vector@@Base>:
   154d8:	push	{r4, r5, fp, lr}
   154dc:	add	fp, sp, #8
   154e0:	mov	r1, #4
   154e4:	mov	r4, r0
   154e8:	mov	r5, #4
   154ec:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   154f0:	mov	r1, r0
   154f4:	mvn	r0, #0
   154f8:	cmp	r1, #0
   154fc:	popne	{r4, r5, fp, pc}
   15500:	ldr	r0, [r4, #32]
   15504:	mov	r2, #5
   15508:	str	r5, [r0, #16]
   1550c:	mov	r0, #0
   15510:	ldr	r1, [r4, #32]
   15514:	str	r0, [r1, #20]
   15518:	ldr	r1, [r4, #32]
   1551c:	strh	r2, [r1, #14]
   15520:	ldr	r2, [r4, #28]
   15524:	ldr	r3, [r4, #60]	; 0x3c
   15528:	ldr	r5, [r4, #64]	; 0x40
   1552c:	add	r3, r3, r2
   15530:	sub	r2, r5, r2
   15534:	str	r3, [r4, #16]
   15538:	mvn	r3, #3
   1553c:	cmn	r2, #4
   15540:	movcs	r2, r3
   15544:	str	r2, [r4, #24]
   15548:	str	r3, [r1, #4]
   1554c:	pop	{r4, r5, fp, pc}

00015550 <flatcc_builder_create_offset_vector@@Base>:
   15550:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15554:	add	fp, sp, #24
   15558:	sub	sp, sp, #8
   1555c:	mov	r8, r1
   15560:	mov	r1, #4
   15564:	mov	r6, r2
   15568:	mov	r4, r0
   1556c:	mov	r5, #4
   15570:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   15574:	mov	r7, #0
   15578:	cmp	r0, #0
   1557c:	beq	1558c <flatcc_builder_create_offset_vector@@Base+0x3c>
   15580:	mov	r0, r7
   15584:	sub	sp, fp, #24
   15588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1558c:	ldr	r0, [r4, #32]
   15590:	mov	r1, #0
   15594:	str	r5, [r0, #16]
   15598:	ldr	r0, [r4, #32]
   1559c:	str	r1, [r0, #20]
   155a0:	mov	r1, #5
   155a4:	ldr	r0, [r4, #32]
   155a8:	strh	r1, [r0, #14]
   155ac:	ldr	r1, [r4, #28]
   155b0:	ldr	r2, [r4, #60]	; 0x3c
   155b4:	ldr	r3, [r4, #64]	; 0x40
   155b8:	add	r2, r2, r1
   155bc:	sub	r1, r3, r1
   155c0:	str	r2, [r4, #16]
   155c4:	mvn	r2, #3
   155c8:	cmn	r1, #4
   155cc:	movcs	r1, r2
   155d0:	str	r1, [r4, #24]
   155d4:	str	r2, [r0, #4]
   155d8:	ldr	r1, [r0, #20]
   155dc:	adds	r1, r1, r6
   155e0:	cmpcc	r1, #1073741824	; 0x40000000
   155e4:	bcc	15608 <flatcc_builder_create_offset_vector@@Base+0xb8>
   155e8:	movw	r0, #40241	; 0x9d31
   155ec:	movw	r1, #35970	; 0x8c82
   155f0:	movw	r3, #40268	; 0x9d4c
   155f4:	mov	r2, #892	; 0x37c
   155f8:	movt	r0, #1
   155fc:	movt	r1, #1
   15600:	movt	r3, #1
   15604:	bl	12418 <__assert_fail@plt>
   15608:	str	r1, [r0, #20]
   1560c:	ldr	r5, [r4, #20]
   15610:	ldr	r0, [r4, #24]
   15614:	add	r1, r5, r6, lsl #2
   15618:	cmp	r1, r0
   1561c:	str	r1, [r4, #20]
   15620:	bcs	156f4 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   15624:	ldr	r0, [r4, #16]
   15628:	adds	r0, r0, r5
   1562c:	beq	15760 <flatcc_builder_create_offset_vector@@Base+0x210>
   15630:	lsl	r2, r6, #2
   15634:	mov	r1, r8
   15638:	bl	12388 <memcpy@plt>
   1563c:	ldr	r0, [r4, #32]
   15640:	ldrh	r1, [r0, #14]
   15644:	cmp	r1, #5
   15648:	bne	15770 <flatcc_builder_create_offset_vector@@Base+0x220>
   1564c:	ldr	r2, [r0, #20]
   15650:	ldr	r1, [r4, #16]
   15654:	mov	r0, r4
   15658:	mov	r3, #0
   1565c:	mov	r7, #0
   15660:	bl	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15664:	cmp	r0, #0
   15668:	beq	15580 <flatcc_builder_create_offset_vector@@Base+0x30>
   1566c:	mov	r5, r0
   15670:	ldr	r0, [r4, #16]
   15674:	ldr	r2, [r4, #20]
   15678:	mov	r1, #0
   1567c:	bl	123f4 <memset@plt>
   15680:	ldr	r0, [r4, #32]
   15684:	ldr	r1, [r4, #60]	; 0x3c
   15688:	ldr	r2, [r4, #64]	; 0x40
   1568c:	ldr	r3, [r0, #8]
   15690:	str	r3, [r4, #20]
   15694:	ldr	r3, [r0]
   15698:	str	r3, [r4, #28]
   1569c:	add	r1, r1, r3
   156a0:	ldr	r7, [r0, #4]
   156a4:	str	r1, [r4, #16]
   156a8:	sub	r1, r2, r3
   156ac:	cmp	r1, r7
   156b0:	movhi	r1, r7
   156b4:	mov	r7, r5
   156b8:	str	r1, [r4, #24]
   156bc:	ldrh	r1, [r4, #130]	; 0x82
   156c0:	ldrh	r2, [r4, #128]	; 0x80
   156c4:	cmp	r2, r1
   156c8:	strhcc	r1, [r4, #128]	; 0x80
   156cc:	ldrh	r1, [r0, #12]
   156d0:	sub	r0, r0, #36	; 0x24
   156d4:	str	r0, [r4, #32]
   156d8:	strh	r1, [r4, #130]	; 0x82
   156dc:	ldr	r0, [r4, #156]	; 0x9c
   156e0:	sub	r0, r0, #1
   156e4:	str	r0, [r4, #156]	; 0x9c
   156e8:	mov	r0, r7
   156ec:	sub	sp, fp, #24
   156f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156f4:	ldr	r2, [r4, #28]
   156f8:	ldr	r0, [r4, #40]	; 0x28
   156fc:	ldr	r7, [r4, #48]	; 0x30
   15700:	mov	r3, #1
   15704:	str	r3, [sp]
   15708:	mov	r3, #1
   1570c:	add	r1, r1, r2
   15710:	add	r2, r1, #1
   15714:	add	r1, r4, #60	; 0x3c
   15718:	blx	r7
   1571c:	mov	r7, #0
   15720:	cmp	r0, #0
   15724:	bne	15580 <flatcc_builder_create_offset_vector@@Base+0x30>
   15728:	ldr	r1, [r4, #28]
   1572c:	ldr	r0, [r4, #60]	; 0x3c
   15730:	ldr	r3, [r4, #64]	; 0x40
   15734:	ldr	r2, [r4, #32]
   15738:	add	r0, r0, r1
   1573c:	sub	r1, r3, r1
   15740:	mvn	r3, #3
   15744:	cmn	r1, #4
   15748:	str	r0, [r4, #16]
   1574c:	movcs	r1, r3
   15750:	str	r1, [r4, #24]
   15754:	str	r3, [r2, #4]
   15758:	adds	r0, r0, r5
   1575c:	bne	15630 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15760:	mov	r7, #0
   15764:	mov	r0, r7
   15768:	sub	sp, fp, #24
   1576c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15770:	movw	r0, #37022	; 0x909e
   15774:	movw	r1, #35970	; 0x8c82
   15778:	movw	r3, #38605	; 0x96cd
   1577c:	movw	r2, #1480	; 0x5c8
   15780:	movt	r0, #1
   15784:	movt	r1, #1
   15788:	movt	r3, #1
   1578c:	bl	12418 <__assert_fail@plt>

00015790 <flatcc_builder_end_offset_vector@@Base>:
   15790:	push	{r4, r5, fp, lr}
   15794:	add	fp, sp, #8
   15798:	mov	r4, r0
   1579c:	ldr	r0, [r0, #32]
   157a0:	ldrh	r1, [r0, #14]
   157a4:	cmp	r1, #5
   157a8:	bne	15848 <flatcc_builder_end_offset_vector@@Base+0xb8>
   157ac:	ldr	r2, [r0, #20]
   157b0:	ldr	r1, [r4, #16]
   157b4:	mov	r0, r4
   157b8:	mov	r3, #0
   157bc:	bl	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   157c0:	mov	r5, r0
   157c4:	cmp	r0, #0
   157c8:	beq	15840 <flatcc_builder_end_offset_vector@@Base+0xb0>
   157cc:	ldr	r0, [r4, #16]
   157d0:	ldr	r2, [r4, #20]
   157d4:	mov	r1, #0
   157d8:	bl	123f4 <memset@plt>
   157dc:	ldr	r0, [r4, #32]
   157e0:	ldr	r1, [r4, #60]	; 0x3c
   157e4:	ldr	ip, [r4, #64]	; 0x40
   157e8:	ldr	r3, [r0, #8]
   157ec:	str	r3, [r4, #20]
   157f0:	ldr	r3, [r0]
   157f4:	str	r3, [r4, #28]
   157f8:	add	r1, r1, r3
   157fc:	ldr	r2, [r0, #4]
   15800:	str	r1, [r4, #16]
   15804:	sub	r1, ip, r3
   15808:	cmp	r1, r2
   1580c:	movhi	r1, r2
   15810:	str	r1, [r4, #24]
   15814:	ldrh	r1, [r4, #130]	; 0x82
   15818:	ldrh	r2, [r4, #128]	; 0x80
   1581c:	cmp	r2, r1
   15820:	strhcc	r1, [r4, #128]	; 0x80
   15824:	ldrh	r1, [r0, #12]
   15828:	sub	r0, r0, #36	; 0x24
   1582c:	str	r0, [r4, #32]
   15830:	strh	r1, [r4, #130]	; 0x82
   15834:	ldr	r0, [r4, #156]	; 0x9c
   15838:	sub	r0, r0, #1
   1583c:	str	r0, [r4, #156]	; 0x9c
   15840:	mov	r0, r5
   15844:	pop	{r4, r5, fp, pc}
   15848:	movw	r0, #37022	; 0x909e
   1584c:	movw	r1, #35970	; 0x8c82
   15850:	movw	r3, #38605	; 0x96cd
   15854:	movw	r2, #1480	; 0x5c8
   15858:	movt	r0, #1
   1585c:	movt	r1, #1
   15860:	movt	r3, #1
   15864:	bl	12418 <__assert_fail@plt>

00015868 <flatcc_builder_start_string@@Base>:
   15868:	push	{r4, r5, fp, lr}
   1586c:	add	fp, sp, #8
   15870:	mov	r1, #1
   15874:	mov	r4, r0
   15878:	mov	r5, #1
   1587c:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   15880:	mov	r1, r0
   15884:	mvn	r0, #0
   15888:	cmp	r1, #0
   1588c:	popne	{r4, r5, fp, pc}
   15890:	ldr	r0, [r4, #32]
   15894:	mov	r2, #6
   15898:	str	r5, [r0, #16]
   1589c:	mov	r0, #0
   158a0:	ldr	r1, [r4, #32]
   158a4:	str	r0, [r1, #20]
   158a8:	ldr	r1, [r4, #32]
   158ac:	strh	r2, [r1, #14]
   158b0:	ldr	r2, [r4, #28]
   158b4:	ldr	r3, [r4, #60]	; 0x3c
   158b8:	ldr	r5, [r4, #64]	; 0x40
   158bc:	add	r3, r3, r2
   158c0:	sub	r2, r5, r2
   158c4:	str	r3, [r4, #16]
   158c8:	mvn	r3, #3
   158cc:	cmn	r2, #4
   158d0:	movcs	r2, r3
   158d4:	str	r2, [r4, #24]
   158d8:	str	r3, [r1, #4]
   158dc:	pop	{r4, r5, fp, pc}

000158e0 <flatcc_builder_reserve_table@@Base>:
   158e0:	push	{r4, r5, r6, sl, fp, lr}
   158e4:	add	fp, sp, #16
   158e8:	sub	sp, sp, #8
   158ec:	cmn	r1, #1
   158f0:	ble	159c4 <flatcc_builder_reserve_table@@Base+0xe4>
   158f4:	mov	r4, r0
   158f8:	ldr	r0, [r0, #32]
   158fc:	mov	r5, r1
   15900:	ldr	r1, [r4, #56]	; 0x38
   15904:	ldrh	r2, [r0, #28]
   15908:	ldr	r0, [r0, #16]
   1590c:	add	r6, r0, r2, lsl #1
   15910:	add	r0, r6, r5, lsl #1
   15914:	add	r2, r0, #4
   15918:	cmp	r2, r1
   1591c:	bls	15944 <flatcc_builder_reserve_table@@Base+0x64>
   15920:	ldr	r0, [r4, #40]	; 0x28
   15924:	ldr	ip, [r4, #48]	; 0x30
   15928:	mov	r3, #0
   1592c:	add	r1, r4, #52	; 0x34
   15930:	str	r3, [sp]
   15934:	mov	r3, #1
   15938:	blx	ip
   1593c:	cmp	r0, #0
   15940:	bne	159e4 <flatcc_builder_reserve_table@@Base+0x104>
   15944:	ldr	r0, [r4, #52]	; 0x34
   15948:	adds	r0, r0, r6
   1594c:	str	r0, [r4, #4]
   15950:	mvneq	r0, #0
   15954:	subeq	sp, fp, #16
   15958:	popeq	{r4, r5, r6, sl, fp, pc}
   1595c:	add	r0, r0, #4
   15960:	lsl	r1, r5, #1
   15964:	str	r0, [r4, #4]
   15968:	ldr	r0, [r4, #32]
   1596c:	ldr	r3, [r4, #80]	; 0x50
   15970:	ldr	r5, [r0, #20]
   15974:	orr	r0, r1, #1
   15978:	add	r2, r5, r0
   1597c:	cmp	r2, r3
   15980:	bls	159a8 <flatcc_builder_reserve_table@@Base+0xc8>
   15984:	ldr	r0, [r4, #40]	; 0x28
   15988:	ldr	r6, [r4, #48]	; 0x30
   1598c:	mov	r3, #3
   15990:	add	r1, r4, #76	; 0x4c
   15994:	str	r3, [sp]
   15998:	mov	r3, #0
   1599c:	blx	r6
   159a0:	cmp	r0, #0
   159a4:	bne	159e4 <flatcc_builder_reserve_table@@Base+0x104>
   159a8:	ldr	r0, [r4, #76]	; 0x4c
   159ac:	adds	r0, r0, r5
   159b0:	str	r0, [r4]
   159b4:	mov	r0, #0
   159b8:	mvneq	r0, #0
   159bc:	sub	sp, fp, #16
   159c0:	pop	{r4, r5, r6, sl, fp, pc}
   159c4:	movw	r0, #37861	; 0x93e5
   159c8:	movw	r1, #35970	; 0x8c82
   159cc:	movw	r3, #37796	; 0x93a4
   159d0:	movw	r2, #1065	; 0x429
   159d4:	movt	r0, #1
   159d8:	movt	r1, #1
   159dc:	movt	r3, #1
   159e0:	bl	12418 <__assert_fail@plt>
   159e4:	movw	r0, #40488	; 0x9e28
   159e8:	movw	r1, #35970	; 0x8c82
   159ec:	movw	r3, #40034	; 0x9c62
   159f0:	mov	r2, #308	; 0x134
   159f4:	movt	r0, #1
   159f8:	movt	r1, #1
   159fc:	movt	r3, #1
   15a00:	bl	12418 <__assert_fail@plt>

00015a04 <flatcc_builder_start_table@@Base>:
   15a04:	push	{r4, r5, r6, r7, fp, lr}
   15a08:	add	fp, sp, #16
   15a0c:	sub	sp, sp, #8
   15a10:	mov	r6, r1
   15a14:	mov	r1, #4
   15a18:	mov	r4, r0
   15a1c:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   15a20:	mvn	r5, #0
   15a24:	cmp	r0, #0
   15a28:	beq	15a38 <flatcc_builder_start_table@@Base+0x34>
   15a2c:	mov	r0, r5
   15a30:	sub	sp, fp, #16
   15a34:	pop	{r4, r5, r6, r7, fp, pc}
   15a38:	mov	r1, r4
   15a3c:	ldr	r2, [r4, #4]
   15a40:	ldr	r3, [r4, #32]
   15a44:	ldr	r0, [r1, #52]!	; 0x34
   15a48:	sub	r0, r2, r0
   15a4c:	str	r0, [r3, #16]
   15a50:	ldr	r0, [r4]
   15a54:	ldr	r3, [r4, #76]	; 0x4c
   15a58:	ldr	r2, [r4, #32]
   15a5c:	sub	r0, r0, r3
   15a60:	mov	r3, #0
   15a64:	str	r0, [r2, #20]
   15a68:	ldr	r0, [r4, #12]
   15a6c:	ldr	r2, [r4, #32]
   15a70:	str	r0, [r2, #24]
   15a74:	ldr	r0, [r4, #32]
   15a78:	ldrh	r2, [r4, #8]
   15a7c:	strh	r2, [r0, #28]
   15a80:	movw	r0, #15186	; 0x3b52
   15a84:	strh	r3, [r4, #8]
   15a88:	mov	r2, #3
   15a8c:	movt	r0, #12137	; 0x2f69
   15a90:	str	r0, [r4, #12]
   15a94:	ldr	r0, [r4, #32]
   15a98:	strh	r2, [r0, #14]
   15a9c:	ldrh	r2, [r0, #28]
   15aa0:	ldr	r0, [r0, #16]
   15aa4:	add	r7, r0, r2, lsl #1
   15aa8:	add	r0, r7, r6, lsl #1
   15aac:	add	r2, r0, #4
   15ab0:	ldr	r0, [r4, #56]	; 0x38
   15ab4:	cmp	r2, r0
   15ab8:	bls	15ad8 <flatcc_builder_start_table@@Base+0xd4>
   15abc:	ldr	r0, [r4, #40]	; 0x28
   15ac0:	ldr	ip, [r4, #48]	; 0x30
   15ac4:	str	r3, [sp]
   15ac8:	mov	r3, #1
   15acc:	blx	ip
   15ad0:	cmp	r0, #0
   15ad4:	bne	15b84 <flatcc_builder_start_table@@Base+0x180>
   15ad8:	ldr	r0, [r4, #52]	; 0x34
   15adc:	adds	r0, r0, r7
   15ae0:	str	r0, [r4, #4]
   15ae4:	beq	15a2c <flatcc_builder_start_table@@Base+0x28>
   15ae8:	add	r0, r0, #4
   15aec:	lsl	r1, r6, #1
   15af0:	str	r0, [r4, #4]
   15af4:	ldr	r0, [r4, #32]
   15af8:	ldr	r3, [r4, #80]	; 0x50
   15afc:	ldr	r6, [r0, #20]
   15b00:	orr	r0, r1, #1
   15b04:	add	r2, r6, r0
   15b08:	cmp	r2, r3
   15b0c:	bls	15b34 <flatcc_builder_start_table@@Base+0x130>
   15b10:	ldr	r0, [r4, #40]	; 0x28
   15b14:	ldr	r7, [r4, #48]	; 0x30
   15b18:	mov	r3, #3
   15b1c:	add	r1, r4, #76	; 0x4c
   15b20:	str	r3, [sp]
   15b24:	mov	r3, #0
   15b28:	blx	r7
   15b2c:	cmp	r0, #0
   15b30:	bne	15b84 <flatcc_builder_start_table@@Base+0x180>
   15b34:	ldr	r0, [r4, #76]	; 0x4c
   15b38:	adds	r0, r0, r6
   15b3c:	str	r0, [r4]
   15b40:	beq	15a2c <flatcc_builder_start_table@@Base+0x28>
   15b44:	ldr	r0, [r4, #28]
   15b48:	ldr	r2, [r4, #60]	; 0x3c
   15b4c:	ldr	r3, [r4, #64]	; 0x40
   15b50:	ldr	r1, [r4, #32]
   15b54:	mov	r5, #0
   15b58:	add	r2, r2, r0
   15b5c:	sub	r0, r3, r0
   15b60:	str	r2, [r4, #16]
   15b64:	movw	r2, #65532	; 0xfffc
   15b68:	cmp	r0, r2
   15b6c:	movcs	r0, r2
   15b70:	str	r0, [r4, #24]
   15b74:	str	r2, [r1, #4]
   15b78:	mov	r0, r5
   15b7c:	sub	sp, fp, #16
   15b80:	pop	{r4, r5, r6, r7, fp, pc}
   15b84:	movw	r0, #40488	; 0x9e28
   15b88:	movw	r1, #35970	; 0x8c82
   15b8c:	movw	r3, #40034	; 0x9c62
   15b90:	mov	r2, #308	; 0x134
   15b94:	movt	r0, #1
   15b98:	movt	r1, #1
   15b9c:	movt	r3, #1
   15ba0:	bl	12418 <__assert_fail@plt>

00015ba4 <flatcc_builder_create_vtable@@Base>:
   15ba4:	push	{r4, r5, fp, lr}
   15ba8:	add	fp, sp, #8
   15bac:	sub	sp, sp, #80	; 0x50
   15bb0:	mov	r3, r2
   15bb4:	mov	r2, #0
   15bb8:	mov	r4, r0
   15bbc:	cmp	r3, #0
   15bc0:	str	r2, [sp, #12]
   15bc4:	str	r2, [sp, #8]
   15bc8:	movne	r2, #1
   15bcc:	strne	r1, [sp, #16]
   15bd0:	strne	r3, [sp, #8]
   15bd4:	strne	r3, [sp, #20]
   15bd8:	strne	r2, [sp, #12]
   15bdc:	ldr	r0, [r4, #152]	; 0x98
   15be0:	cmp	r0, #0
   15be4:	bne	15bf4 <flatcc_builder_create_vtable@@Base+0x50>
   15be8:	ldr	r0, [r4, #180]	; 0xb4
   15bec:	cmp	r0, #0
   15bf0:	beq	15c40 <flatcc_builder_create_vtable@@Base+0x9c>
   15bf4:	cmp	r3, #0
   15bf8:	beq	15c84 <flatcc_builder_create_vtable@@Base+0xe0>
   15bfc:	ldr	r0, [r4, #136]	; 0x88
   15c00:	ldr	ip, [r4, #44]	; 0x2c
   15c04:	add	r1, sp, #8
   15c08:	add	r1, r1, #8
   15c0c:	sub	r5, r0, r3
   15c10:	ldr	r0, [r4, #36]	; 0x24
   15c14:	str	r3, [sp]
   15c18:	mov	r3, r5
   15c1c:	blx	ip
   15c20:	cmp	r0, #0
   15c24:	bne	15ca4 <flatcc_builder_create_vtable@@Base+0x100>
   15c28:	cmp	r5, #0
   15c2c:	str	r5, [r4, #136]	; 0x88
   15c30:	beq	15c78 <flatcc_builder_create_vtable@@Base+0xd4>
   15c34:	add	r0, r5, #1
   15c38:	sub	sp, fp, #8
   15c3c:	pop	{r4, r5, fp, pc}
   15c40:	ldr	r5, [r4, #140]	; 0x8c
   15c44:	ldr	r0, [r4, #36]	; 0x24
   15c48:	ldr	ip, [r4, #44]	; 0x2c
   15c4c:	add	r1, r5, r3
   15c50:	str	r1, [r4, #140]	; 0x8c
   15c54:	add	r1, sp, #8
   15c58:	str	r3, [sp]
   15c5c:	mov	r3, r5
   15c60:	add	r1, r1, #8
   15c64:	blx	ip
   15c68:	cmp	r0, #0
   15c6c:	bne	15cc4 <flatcc_builder_create_vtable@@Base+0x120>
   15c70:	adds	r0, r5, #1
   15c74:	bne	15c38 <flatcc_builder_create_vtable@@Base+0x94>
   15c78:	mov	r0, #0
   15c7c:	sub	sp, fp, #8
   15c80:	pop	{r4, r5, fp, pc}
   15c84:	movw	r0, #40488	; 0x9e28
   15c88:	movw	r1, #35970	; 0x8c82
   15c8c:	movw	r3, #40167	; 0x9ce7
   15c90:	movw	r2, #647	; 0x287
   15c94:	movt	r0, #1
   15c98:	movt	r1, #1
   15c9c:	movt	r3, #1
   15ca0:	bl	12418 <__assert_fail@plt>
   15ca4:	movw	r0, #40488	; 0x9e28
   15ca8:	movw	r1, #35970	; 0x8c82
   15cac:	movw	r3, #40167	; 0x9ce7
   15cb0:	movw	r2, #651	; 0x28b
   15cb4:	movt	r0, #1
   15cb8:	movt	r1, #1
   15cbc:	movt	r3, #1
   15cc0:	bl	12418 <__assert_fail@plt>
   15cc4:	movw	r0, #40488	; 0x9e28
   15cc8:	movw	r1, #35970	; 0x8c82
   15ccc:	movw	r3, #40355	; 0x9da3
   15cd0:	movw	r2, #677	; 0x2a5
   15cd4:	movt	r0, #1
   15cd8:	movt	r1, #1
   15cdc:	movt	r3, #1
   15ce0:	bl	12418 <__assert_fail@plt>

00015ce4 <flatcc_builder_create_cached_vtable@@Base>:
   15ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce8:	add	fp, sp, #28
   15cec:	sub	sp, sp, #20
   15cf0:	mov	sl, r0
   15cf4:	ldr	r0, [r0, #116]	; 0x74
   15cf8:	mov	r8, r3
   15cfc:	mov	r5, r2
   15d00:	str	r1, [sp, #16]
   15d04:	cmp	r0, #0
   15d08:	beq	15dac <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15d0c:	ldr	r1, [sl, #92]	; 0x5c
   15d10:	rsb	r0, r0, #32
   15d14:	lsr	r0, r8, r0
   15d18:	add	r6, r1, r0, lsl #2
   15d1c:	cmp	r6, #0
   15d20:	beq	15e70 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15d24:	ldr	r7, [r6]
   15d28:	str	r6, [sp, #12]
   15d2c:	cmp	r7, #0
   15d30:	beq	15e80 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15d34:	ldr	r4, [sl, #68]	; 0x44
   15d38:	ldr	r8, [sl, #100]	; 0x64
   15d3c:	mov	r0, #0
   15d40:	str	r0, [sp, #8]
   15d44:	add	r9, r8, r7
   15d48:	mov	r1, r4
   15d4c:	ldr	r0, [r9, #8]
   15d50:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d54:	cmp	r0, r5
   15d58:	bne	15d70 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15d5c:	ldr	r0, [sp, #16]
   15d60:	mov	r2, r5
   15d64:	bl	12394 <memcmp@plt>
   15d68:	cmp	r0, #0
   15d6c:	beq	15d84 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15d70:	ldr	r7, [r9, #12]!
   15d74:	cmp	r7, #0
   15d78:	mov	r6, r9
   15d7c:	bne	15d44 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15d80:	b	15e68 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d84:	ldr	r0, [sl, #152]	; 0x98
   15d88:	ldr	r1, [r9, #4]
   15d8c:	cmp	r1, r0
   15d90:	beq	15fec <flatcc_builder_create_cached_vtable@@Base+0x308>
   15d94:	mov	r6, r9
   15d98:	mov	r0, r9
   15d9c:	ldr	r7, [r6, #12]!
   15da0:	cmp	r7, #0
   15da4:	bne	15d40 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15da8:	b	15e84 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15dac:	ldr	r0, [sl, #124]	; 0x7c
   15db0:	cmp	r0, #0
   15db4:	bne	16040 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15db8:	ldr	r0, [sl, #104]	; 0x68
   15dbc:	add	r7, sl, #100	; 0x64
   15dc0:	cmp	r0, #15
   15dc4:	bhi	15df0 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15dc8:	ldr	r0, [sl, #40]	; 0x28
   15dcc:	ldr	r6, [sl, #48]	; 0x30
   15dd0:	mov	r1, #6
   15dd4:	mov	r2, #16
   15dd8:	mov	r3, #0
   15ddc:	str	r1, [sp]
   15de0:	mov	r1, r7
   15de4:	blx	r6
   15de8:	cmp	r0, #0
   15dec:	bne	16020 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15df0:	ldr	r0, [r7]
   15df4:	mov	r7, #0
   15df8:	cmp	r0, #0
   15dfc:	beq	15f24 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15e00:	mov	r0, #16
   15e04:	mov	r2, #5
   15e08:	add	r1, sl, #92	; 0x5c
   15e0c:	mov	r3, #1
   15e10:	mov	r4, #256	; 0x100
   15e14:	str	r0, [sl, #124]	; 0x7c
   15e18:	ldr	r0, [sl, #40]	; 0x28
   15e1c:	ldr	r6, [sl, #48]	; 0x30
   15e20:	str	r2, [sp]
   15e24:	mov	r2, #256	; 0x100
   15e28:	blx	r6
   15e2c:	cmp	r0, #0
   15e30:	bne	15f24 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15e34:	ldr	r0, [sl, #96]	; 0x60
   15e38:	mov	r1, r4
   15e3c:	lsl	r4, r4, #1
   15e40:	cmp	r0, r1, lsl #1
   15e44:	bcs	15e38 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e48:	lsr	r1, r1, #2
   15e4c:	mvn	r0, #0
   15e50:	mov	r2, #1
   15e54:	add	r0, r0, #1
   15e58:	cmp	r1, r2, lsl r0
   15e5c:	bhi	15e54 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e60:	str	r0, [sl, #116]	; 0x74
   15e64:	b	15d0c <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e68:	ldr	r9, [sp, #8]
   15e6c:	b	15e84 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15e70:	mov	r7, #0
   15e74:	mov	r0, r7
   15e78:	sub	sp, fp, #28
   15e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e80:	mov	r9, #0
   15e84:	ldr	r4, [sl, #124]	; 0x7c
   15e88:	ldr	r0, [sl, #104]	; 0x68
   15e8c:	add	r7, sl, #100	; 0x64
   15e90:	add	r2, r4, #16
   15e94:	cmp	r2, r0
   15e98:	bls	15ec0 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   15e9c:	ldr	r0, [sl, #40]	; 0x28
   15ea0:	ldr	r6, [sl, #48]	; 0x30
   15ea4:	mov	r1, #6
   15ea8:	mov	r3, #0
   15eac:	str	r1, [sp]
   15eb0:	mov	r1, r7
   15eb4:	blx	r6
   15eb8:	cmp	r0, #0
   15ebc:	bne	16020 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15ec0:	ldr	r0, [r7]
   15ec4:	mov	r7, #0
   15ec8:	adds	r4, r0, r4
   15ecc:	beq	15f24 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ed0:	ldr	r0, [sl, #124]	; 0x7c
   15ed4:	ldr	r1, [sl, #152]	; 0x98
   15ed8:	add	r2, r0, #16
   15edc:	str	r2, [sl, #124]	; 0x7c
   15ee0:	ldr	r2, [sp, #12]
   15ee4:	str	r1, [r4, #4]
   15ee8:	ldr	r1, [r2]
   15eec:	str	r1, [r4, #12]
   15ef0:	ldr	r1, [sp, #16]
   15ef4:	str	r0, [r2]
   15ef8:	mov	r0, sl
   15efc:	mov	r2, r5
   15f00:	bl	15ba4 <flatcc_builder_create_vtable@@Base>
   15f04:	cmp	r0, #0
   15f08:	str	r0, [r4]
   15f0c:	beq	15f24 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15f10:	cmp	r9, #0
   15f14:	beq	15f30 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15f18:	ldr	r0, [r9, #8]
   15f1c:	str	r0, [r4, #8]
   15f20:	ldr	r7, [r4]
   15f24:	mov	r0, r7
   15f28:	sub	sp, fp, #28
   15f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f30:	ldr	r6, [sl, #120]	; 0x78
   15f34:	ldr	r0, [sl, #172]	; 0xac
   15f38:	add	r2, r6, r5
   15f3c:	cmp	r0, #0
   15f40:	beq	15f7c <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f44:	cmp	r0, r2
   15f48:	bcs	15f7c <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f4c:	ldr	r0, [sl, #116]	; 0x74
   15f50:	cmp	r0, #0
   15f54:	beq	15f20 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f58:	ldr	r0, [sl, #92]	; 0x5c
   15f5c:	ldr	r2, [sl, #96]	; 0x60
   15f60:	mov	r1, #0
   15f64:	mov	r5, #0
   15f68:	bl	123f4 <memset@plt>
   15f6c:	mov	r0, #16
   15f70:	str	r5, [sl, #120]	; 0x78
   15f74:	str	r0, [sl, #124]	; 0x7c
   15f78:	b	15f20 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f7c:	ldr	r0, [sl, #72]	; 0x48
   15f80:	add	r7, sl, #68	; 0x44
   15f84:	cmp	r2, r0
   15f88:	bls	15fb0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15f8c:	ldr	r0, [sl, #40]	; 0x28
   15f90:	ldr	ip, [sl, #48]	; 0x30
   15f94:	mov	r1, #2
   15f98:	mov	r3, #0
   15f9c:	str	r1, [sp]
   15fa0:	mov	r1, r7
   15fa4:	blx	ip
   15fa8:	cmp	r0, #0
   15fac:	bne	16020 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15fb0:	ldr	r0, [r7]
   15fb4:	adds	r0, r0, r6
   15fb8:	beq	15fdc <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15fbc:	ldr	r1, [sl, #120]	; 0x78
   15fc0:	mov	r2, r5
   15fc4:	str	r1, [r4, #8]
   15fc8:	add	r1, r1, r5
   15fcc:	str	r1, [sl, #120]	; 0x78
   15fd0:	ldr	r1, [sp, #16]
   15fd4:	bl	12388 <memcpy@plt>
   15fd8:	b	15f20 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15fdc:	mvn	r7, #0
   15fe0:	mov	r0, r7
   15fe4:	sub	sp, fp, #28
   15fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fec:	ldr	r0, [sp, #12]
   15ff0:	cmp	r6, r0
   15ff4:	beq	16010 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15ff8:	mov	r1, r0
   15ffc:	ldr	r0, [r9, #12]
   16000:	str	r0, [r6]
   16004:	ldr	r0, [r1]
   16008:	str	r0, [r9, #12]
   1600c:	str	r7, [r1]
   16010:	ldr	r7, [r9]
   16014:	mov	r0, r7
   16018:	sub	sp, fp, #28
   1601c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16020:	movw	r0, #40488	; 0x9e28
   16024:	movw	r1, #35970	; 0x8c82
   16028:	movw	r3, #40034	; 0x9c62
   1602c:	mov	r2, #308	; 0x134
   16030:	movt	r0, #1
   16034:	movt	r1, #1
   16038:	movt	r3, #1
   1603c:	bl	12418 <__assert_fail@plt>
   16040:	movw	r0, #40428	; 0x9dec
   16044:	movw	r1, #35970	; 0x8c82
   16048:	movw	r3, #40443	; 0x9dfb
   1604c:	movw	r2, #342	; 0x156
   16050:	movt	r0, #1
   16054:	movt	r1, #1
   16058:	movt	r3, #1
   1605c:	bl	12418 <__assert_fail@plt>

00016060 <flatcc_builder_create_table@@Base>:
   16060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16064:	add	fp, sp, #24
   16068:	sub	sp, sp, #80	; 0x50
   1606c:	ldr	r5, [fp, #12]
   16070:	cmn	r5, #1
   16074:	ble	161c8 <flatcc_builder_create_table@@Base+0x168>
   16078:	ldr	ip, [fp, #16]
   1607c:	tst	ip, #1
   16080:	beq	161e8 <flatcc_builder_create_table@@Base+0x188>
   16084:	mov	r8, r0
   16088:	ldrh	r0, [r0, #128]	; 0x80
   1608c:	cmp	r3, #4
   16090:	movls	r3, #4
   16094:	cmp	r0, r3
   16098:	strhcc	r3, [r8, #128]	; 0x80
   1609c:	sub	r3, r3, #1
   160a0:	cmp	r5, #1
   160a4:	ldr	r4, [r8, #136]	; 0x88
   160a8:	sub	r0, r4, r2
   160ac:	and	r0, r0, r3
   160b0:	add	r3, ip, r0
   160b4:	mvn	ip, #3
   160b8:	sub	r6, ip, r2
   160bc:	add	r4, r6, r4
   160c0:	add	r6, r4, #1
   160c4:	sub	r3, r6, r3
   160c8:	str	r3, [fp, #-28]	; 0xffffffe4
   160cc:	blt	160f8 <flatcc_builder_create_table@@Base+0x98>
   160d0:	ldr	r3, [fp, #8]
   160d4:	sub	r6, r4, r0
   160d8:	sub	r4, ip, r6
   160dc:	ldrh	r6, [r3], #2
   160e0:	subs	r5, r5, #1
   160e4:	ldr	r7, [r6, r1]
   160e8:	add	r7, r4, r7
   160ec:	sub	r7, r7, r6
   160f0:	str	r7, [r6, r1]
   160f4:	bne	160dc <flatcc_builder_create_table@@Base+0x7c>
   160f8:	sub	r3, fp, #28
   160fc:	mov	r4, #4
   16100:	cmp	r2, #0
   16104:	str	r3, [sp, #12]
   16108:	mov	r3, #1
   1610c:	str	r4, [sp, #4]
   16110:	str	r4, [sp, #16]
   16114:	str	r3, [sp, #8]
   16118:	beq	16134 <flatcc_builder_create_table@@Base+0xd4>
   1611c:	mov	r3, #2
   16120:	add	r4, r2, #4
   16124:	str	r1, [sp, #20]
   16128:	str	r2, [sp, #24]
   1612c:	str	r3, [sp, #8]
   16130:	str	r4, [sp, #4]
   16134:	cmp	r0, #0
   16138:	beq	16164 <flatcc_builder_create_table@@Base+0x104>
   1613c:	add	r1, sp, #4
   16140:	movw	r2, #35440	; 0x8a70
   16144:	add	r4, r4, r0
   16148:	add	r1, r1, r3, lsl #3
   1614c:	add	r3, r3, #1
   16150:	movt	r2, #1
   16154:	str	r4, [sp, #4]
   16158:	str	r2, [r1, #8]
   1615c:	str	r0, [r1, #12]
   16160:	str	r3, [sp, #8]
   16164:	cmp	r4, #0
   16168:	ble	16208 <flatcc_builder_create_table@@Base+0x1a8>
   1616c:	ldr	r0, [r8, #136]	; 0x88
   16170:	ldr	r7, [r8, #44]	; 0x2c
   16174:	add	r1, sp, #4
   16178:	mov	r2, r3
   1617c:	add	r1, r1, #8
   16180:	sub	r5, r0, r4
   16184:	ldr	r0, [r8, #36]	; 0x24
   16188:	str	r4, [sp]
   1618c:	mov	r3, r5
   16190:	blx	r7
   16194:	cmp	r0, #0
   16198:	streq	r5, [r8, #136]	; 0x88
   1619c:	moveq	r0, r5
   161a0:	subeq	sp, fp, #24
   161a4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   161a8:	movw	r0, #40488	; 0x9e28
   161ac:	movw	r1, #35970	; 0x8c82
   161b0:	movw	r3, #40167	; 0x9ce7
   161b4:	movw	r2, #651	; 0x28b
   161b8:	movt	r0, #1
   161bc:	movt	r1, #1
   161c0:	movt	r3, #1
   161c4:	bl	12418 <__assert_fail@plt>
   161c8:	movw	r0, #37854	; 0x93de
   161cc:	movw	r1, #35970	; 0x8c82
   161d0:	movw	r3, #37872	; 0x93f0
   161d4:	movw	r2, #1237	; 0x4d5
   161d8:	movt	r0, #1
   161dc:	movt	r1, #1
   161e0:	movt	r3, #1
   161e4:	bl	12418 <__assert_fail@plt>
   161e8:	movw	r0, #38028	; 0x948c
   161ec:	movw	r1, #35970	; 0x8c82
   161f0:	movw	r3, #37872	; 0x93f0
   161f4:	movw	r2, #1243	; 0x4db
   161f8:	movt	r0, #1
   161fc:	movt	r1, #1
   16200:	movt	r3, #1
   16204:	bl	12418 <__assert_fail@plt>
   16208:	movw	r0, #40488	; 0x9e28
   1620c:	movw	r1, #35970	; 0x8c82
   16210:	movw	r3, #40167	; 0x9ce7
   16214:	movw	r2, #647	; 0x287
   16218:	movt	r0, #1
   1621c:	movt	r1, #1
   16220:	movt	r3, #1
   16224:	bl	12418 <__assert_fail@plt>

00016228 <flatcc_builder_check_required_field@@Base>:
   16228:	ldr	r2, [r0, #32]
   1622c:	ldrh	r2, [r2, #14]
   16230:	cmp	r2, #3
   16234:	bne	16264 <flatcc_builder_check_required_field@@Base+0x3c>
   16238:	ldrh	r3, [r0, #8]
   1623c:	mov	r2, #0
   16240:	cmp	r3, r1
   16244:	bls	1625c <flatcc_builder_check_required_field@@Base+0x34>
   16248:	ldr	r0, [r0, #4]
   1624c:	add	r0, r0, r1, lsl #1
   16250:	ldrh	r2, [r0]
   16254:	cmp	r2, #0
   16258:	movwne	r2, #1
   1625c:	mov	r0, r2
   16260:	bx	lr
   16264:	push	{fp, lr}
   16268:	mov	fp, sp
   1626c:	movw	r0, #38039	; 0x9497
   16270:	movw	r1, #35970	; 0x8c82
   16274:	movw	r3, #38082	; 0x94c2
   16278:	movw	r2, #1272	; 0x4f8
   1627c:	movt	r0, #1
   16280:	movt	r1, #1
   16284:	movt	r3, #1
   16288:	bl	12418 <__assert_fail@plt>

0001628c <flatcc_builder_check_union_field@@Base>:
   1628c:	mov	r2, r0
   16290:	ldr	r0, [r0, #32]
   16294:	ldrh	r0, [r0, #14]
   16298:	cmp	r0, #3
   1629c:	bne	162fc <flatcc_builder_check_union_field@@Base+0x70>
   162a0:	cmp	r1, #0
   162a4:	mov	r0, #0
   162a8:	ldrhne	r3, [r2, #8]
   162ac:	cmpne	r3, r1
   162b0:	bhi	162b8 <flatcc_builder_check_union_field@@Base+0x2c>
   162b4:	bx	lr
   162b8:	ldr	r0, [r2, #4]
   162bc:	add	r0, r0, r1, lsl #1
   162c0:	ldrh	r1, [r0, #-2]
   162c4:	cmp	r1, #0
   162c8:	beq	162ec <flatcc_builder_check_union_field@@Base+0x60>
   162cc:	ldr	r2, [r2, #16]
   162d0:	ldrh	r0, [r0]
   162d4:	ldrb	r1, [r2, r1]
   162d8:	cmp	r1, #0
   162dc:	beq	162f0 <flatcc_builder_check_union_field@@Base+0x64>
   162e0:	cmp	r0, #0
   162e4:	movwne	r0, #1
   162e8:	bx	lr
   162ec:	ldrh	r0, [r0]
   162f0:	clz	r0, r0
   162f4:	lsr	r0, r0, #5
   162f8:	bx	lr
   162fc:	push	{fp, lr}
   16300:	mov	fp, sp
   16304:	movw	r0, #38039	; 0x9497
   16308:	movw	r1, #35970	; 0x8c82
   1630c:	movw	r3, #38165	; 0x9515
   16310:	movw	r2, #1279	; 0x4ff
   16314:	movt	r0, #1
   16318:	movt	r1, #1
   1631c:	movt	r3, #1
   16320:	bl	12418 <__assert_fail@plt>

00016324 <flatcc_builder_check_required@@Base>:
   16324:	push	{fp, lr}
   16328:	mov	fp, sp
   1632c:	mov	r3, r0
   16330:	ldr	r0, [r0, #32]
   16334:	ldrh	r0, [r0, #14]
   16338:	cmp	r0, #3
   1633c:	bne	16394 <flatcc_builder_check_required@@Base+0x70>
   16340:	ldrh	ip, [r3, #8]
   16344:	mov	r0, #0
   16348:	cmp	ip, r2
   1634c:	movge	r0, #1
   16350:	cmpge	r2, #1
   16354:	bge	1635c <flatcc_builder_check_required@@Base+0x38>
   16358:	pop	{fp, pc}
   1635c:	ldr	ip, [r3, #4]
   16360:	mov	lr, #0
   16364:	b	16378 <flatcc_builder_check_required@@Base+0x54>
   16368:	add	lr, lr, #1
   1636c:	add	r1, r1, #2
   16370:	cmp	lr, r2
   16374:	popge	{fp, pc}
   16378:	ldrh	r3, [r1]
   1637c:	add	r3, ip, r3, lsl #1
   16380:	ldrh	r3, [r3]
   16384:	cmp	r3, #0
   16388:	bne	16368 <flatcc_builder_check_required@@Base+0x44>
   1638c:	mov	r0, #0
   16390:	pop	{fp, pc}
   16394:	movw	r0, #38039	; 0x9497
   16398:	movw	r1, #35970	; 0x8c82
   1639c:	movw	r3, #38245	; 0x9565
   163a0:	movw	r2, #1297	; 0x511
   163a4:	movt	r0, #1
   163a8:	movt	r1, #1
   163ac:	movt	r3, #1
   163b0:	bl	12418 <__assert_fail@plt>

000163b4 <flatcc_builder_end_table@@Base>:
   163b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163b8:	add	fp, sp, #24
   163bc:	sub	sp, sp, #16
   163c0:	mov	r4, r0
   163c4:	ldr	r0, [r0, #32]
   163c8:	ldrh	r0, [r0, #14]
   163cc:	cmp	r0, #3
   163d0:	bne	16554 <flatcc_builder_end_table@@Base+0x1a0>
   163d4:	ldrh	r0, [r4, #8]
   163d8:	ldr	r5, [r4, #4]
   163dc:	mov	r1, #4
   163e0:	movw	r2, #31153	; 0x79b1
   163e4:	movt	r2, #40503	; 0x9e37
   163e8:	add	r0, r1, r0, lsl #1
   163ec:	strh	r0, [r5, #-4]!
   163f0:	ldrh	r1, [r4, #20]
   163f4:	uxth	r6, r0
   163f8:	add	r1, r1, #4
   163fc:	strh	r1, [r5, #2]
   16400:	uxth	r1, r1
   16404:	ldr	r0, [r4, #12]
   16408:	eor	r0, r0, r6
   1640c:	mul	r0, r0, r2
   16410:	eor	r0, r0, r1
   16414:	mov	r1, r5
   16418:	mul	r3, r0, r2
   1641c:	mov	r0, r4
   16420:	mov	r2, r6
   16424:	str	r3, [r4, #12]
   16428:	bl	15ce4 <flatcc_builder_create_cached_vtable@@Base>
   1642c:	cmp	r0, #0
   16430:	beq	16544 <flatcc_builder_end_table@@Base+0x190>
   16434:	mov	r7, r0
   16438:	mov	r0, r5
   1643c:	mov	r1, #0
   16440:	mov	r2, r6
   16444:	mov	r8, #0
   16448:	bl	123f4 <memset@plt>
   1644c:	ldr	r5, [r4, #32]
   16450:	ldr	r0, [r4, #76]	; 0x4c
   16454:	ldr	r6, [r4]
   16458:	ldrh	r3, [r4, #130]	; 0x82
   1645c:	ldr	r1, [r4, #16]
   16460:	ldr	r2, [r4, #20]
   16464:	ldr	r5, [r5, #20]
   16468:	add	r0, r0, r5
   1646c:	sub	r6, r6, r0
   16470:	asr	r6, r6, #1
   16474:	stm	sp, {r0, r6, r7}
   16478:	mov	r0, r4
   1647c:	bl	16060 <flatcc_builder_create_table@@Base>
   16480:	cmp	r0, #0
   16484:	beq	16538 <flatcc_builder_end_table@@Base+0x184>
   16488:	ldr	r1, [r4, #32]
   1648c:	mov	r5, r0
   16490:	ldr	r0, [r4, #16]
   16494:	ldr	r2, [r4, #20]
   16498:	ldr	r3, [r4, #52]	; 0x34
   1649c:	ldr	r7, [r1, #24]
   164a0:	str	r7, [r4, #12]
   164a4:	ldrh	r7, [r1, #28]
   164a8:	strh	r7, [r4, #8]
   164ac:	ldr	r7, [r1, #16]
   164b0:	add	r3, r3, r7
   164b4:	str	r3, [r4, #4]
   164b8:	ldr	r3, [r4, #76]	; 0x4c
   164bc:	ldr	r1, [r1, #20]
   164c0:	add	r1, r3, r1
   164c4:	str	r1, [r4]
   164c8:	mov	r1, #0
   164cc:	bl	123f4 <memset@plt>
   164d0:	ldr	r0, [r4, #32]
   164d4:	ldr	r1, [r4, #60]	; 0x3c
   164d8:	ldr	r2, [r4, #64]	; 0x40
   164dc:	mov	r8, r5
   164e0:	ldr	r3, [r0, #8]
   164e4:	str	r3, [r4, #20]
   164e8:	ldr	r3, [r0]
   164ec:	str	r3, [r4, #28]
   164f0:	add	r1, r1, r3
   164f4:	ldr	r7, [r0, #4]
   164f8:	str	r1, [r4, #16]
   164fc:	sub	r1, r2, r3
   16500:	cmp	r1, r7
   16504:	movhi	r1, r7
   16508:	str	r1, [r4, #24]
   1650c:	ldrh	r1, [r4, #130]	; 0x82
   16510:	ldrh	r2, [r4, #128]	; 0x80
   16514:	cmp	r2, r1
   16518:	strhcc	r1, [r4, #128]	; 0x80
   1651c:	ldrh	r1, [r0, #12]
   16520:	sub	r0, r0, #36	; 0x24
   16524:	str	r0, [r4, #32]
   16528:	strh	r1, [r4, #130]	; 0x82
   1652c:	ldr	r0, [r4, #156]	; 0x9c
   16530:	sub	r0, r0, #1
   16534:	str	r0, [r4, #156]	; 0x9c
   16538:	mov	r0, r8
   1653c:	sub	sp, fp, #24
   16540:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16544:	mov	r8, #0
   16548:	mov	r0, r8
   1654c:	sub	sp, fp, #24
   16550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16554:	movw	r0, #38039	; 0x9497
   16558:	movw	r1, #35970	; 0x8c82
   1655c:	movw	r3, #38335	; 0x95bf
   16560:	movw	r2, #1317	; 0x525
   16564:	movt	r0, #1
   16568:	movt	r1, #1
   1656c:	movt	r3, #1
   16570:	bl	12418 <__assert_fail@plt>

00016574 <flatcc_builder_create_vector@@Base>:
   16574:	push	{r4, r5, r6, r7, fp, lr}
   16578:	add	fp, sp, #16
   1657c:	sub	sp, sp, #80	; 0x50
   16580:	mov	r7, r0
   16584:	ldr	r0, [fp, #12]
   16588:	cmp	r2, r0
   1658c:	bhi	1668c <flatcc_builder_create_vector@@Base+0x118>
   16590:	ldr	r0, [fp, #8]
   16594:	mov	r4, r2
   16598:	ldrh	r2, [r7, #128]	; 0x80
   1659c:	mov	r5, #4
   165a0:	cmp	r0, #4
   165a4:	movls	r0, r5
   165a8:	cmp	r2, r0
   165ac:	sub	r2, fp, #20
   165b0:	strhcc	r0, [r7, #128]	; 0x80
   165b4:	str	r4, [fp, #-20]	; 0xffffffec
   165b8:	sub	r0, r0, #1
   165bc:	ldr	ip, [r7, #136]	; 0x88
   165c0:	str	r2, [sp, #12]
   165c4:	mov	r2, #1
   165c8:	str	r5, [sp, #4]
   165cc:	str	r5, [sp, #16]
   165d0:	str	r2, [sp, #8]
   165d4:	mls	r6, r3, r4, ip
   165d8:	mul	r3, r3, r4
   165dc:	and	r0, r6, r0
   165e0:	cmp	r3, #0
   165e4:	beq	16600 <flatcc_builder_create_vector@@Base+0x8c>
   165e8:	mov	r2, #2
   165ec:	add	r5, r3, #4
   165f0:	str	r1, [sp, #20]
   165f4:	str	r3, [sp, #24]
   165f8:	str	r2, [sp, #8]
   165fc:	str	r5, [sp, #4]
   16600:	cmp	r0, #0
   16604:	beq	16630 <flatcc_builder_create_vector@@Base+0xbc>
   16608:	add	r1, sp, #4
   1660c:	movw	r3, #35440	; 0x8a70
   16610:	add	r5, r5, r0
   16614:	add	r1, r1, r2, lsl #3
   16618:	add	r2, r2, #1
   1661c:	movt	r3, #1
   16620:	str	r5, [sp, #4]
   16624:	str	r3, [r1, #8]
   16628:	str	r0, [r1, #12]
   1662c:	str	r2, [sp, #8]
   16630:	cmp	r5, #0
   16634:	ble	166ac <flatcc_builder_create_vector@@Base+0x138>
   16638:	ldr	r0, [r7, #36]	; 0x24
   1663c:	ldr	r6, [r7, #44]	; 0x2c
   16640:	add	r1, sp, #4
   16644:	sub	r4, ip, r5
   16648:	str	r5, [sp]
   1664c:	add	r1, r1, #8
   16650:	mov	r3, r4
   16654:	blx	r6
   16658:	cmp	r0, #0
   1665c:	streq	r4, [r7, #136]	; 0x88
   16660:	moveq	r0, r4
   16664:	subeq	sp, fp, #16
   16668:	popeq	{r4, r5, r6, r7, fp, pc}
   1666c:	movw	r0, #40488	; 0x9e28
   16670:	movw	r1, #35970	; 0x8c82
   16674:	movw	r3, #40167	; 0x9ce7
   16678:	movw	r2, #651	; 0x28b
   1667c:	movt	r0, #1
   16680:	movt	r1, #1
   16684:	movt	r3, #1
   16688:	bl	12418 <__assert_fail@plt>
   1668c:	movw	r0, #38401	; 0x9601
   16690:	movw	r1, #35970	; 0x8c82
   16694:	movw	r3, #38420	; 0x9614
   16698:	movw	r2, #1365	; 0x555
   1669c:	movt	r0, #1
   166a0:	movt	r1, #1
   166a4:	movt	r3, #1
   166a8:	bl	12418 <__assert_fail@plt>
   166ac:	movw	r0, #40488	; 0x9e28
   166b0:	movw	r1, #35970	; 0x8c82
   166b4:	movw	r3, #40167	; 0x9ce7
   166b8:	movw	r2, #647	; 0x287
   166bc:	movt	r0, #1
   166c0:	movt	r1, #1
   166c4:	movt	r3, #1
   166c8:	bl	12418 <__assert_fail@plt>

000166cc <flatcc_builder_end_vector@@Base>:
   166cc:	push	{r4, r5, fp, lr}
   166d0:	add	fp, sp, #8
   166d4:	sub	sp, sp, #8
   166d8:	mov	r4, r0
   166dc:	ldr	r0, [r0, #32]
   166e0:	ldrh	r1, [r0, #14]
   166e4:	cmp	r1, #4
   166e8:	bne	1679c <flatcc_builder_end_vector@@Base+0xd0>
   166ec:	ldr	r3, [r0, #16]
   166f0:	ldr	r2, [r0, #20]
   166f4:	ldr	r0, [r0, #24]
   166f8:	ldr	r1, [r4, #16]
   166fc:	ldrh	r5, [r4, #130]	; 0x82
   16700:	str	r0, [sp, #4]
   16704:	mov	r0, r4
   16708:	str	r5, [sp]
   1670c:	bl	16574 <flatcc_builder_create_vector@@Base>
   16710:	mov	r5, r0
   16714:	cmp	r0, #0
   16718:	beq	16790 <flatcc_builder_end_vector@@Base+0xc4>
   1671c:	ldr	r0, [r4, #16]
   16720:	ldr	r2, [r4, #20]
   16724:	mov	r1, #0
   16728:	bl	123f4 <memset@plt>
   1672c:	ldr	r0, [r4, #32]
   16730:	ldr	r1, [r4, #60]	; 0x3c
   16734:	ldr	ip, [r4, #64]	; 0x40
   16738:	ldr	r3, [r0, #8]
   1673c:	str	r3, [r4, #20]
   16740:	ldr	r3, [r0]
   16744:	str	r3, [r4, #28]
   16748:	add	r1, r1, r3
   1674c:	ldr	r2, [r0, #4]
   16750:	str	r1, [r4, #16]
   16754:	sub	r1, ip, r3
   16758:	cmp	r1, r2
   1675c:	movhi	r1, r2
   16760:	str	r1, [r4, #24]
   16764:	ldrh	r1, [r4, #130]	; 0x82
   16768:	ldrh	r2, [r4, #128]	; 0x80
   1676c:	cmp	r2, r1
   16770:	strhcc	r1, [r4, #128]	; 0x80
   16774:	ldrh	r1, [r0, #12]
   16778:	sub	r0, r0, #36	; 0x24
   1677c:	str	r0, [r4, #32]
   16780:	strh	r1, [r4, #130]	; 0x82
   16784:	ldr	r0, [r4, #156]	; 0x9c
   16788:	sub	r0, r0, #1
   1678c:	str	r0, [r4, #156]	; 0x9c
   16790:	mov	r0, r5
   16794:	sub	sp, fp, #8
   16798:	pop	{r4, r5, fp, pc}
   1679c:	movw	r0, #36773	; 0x8fa5
   167a0:	movw	r1, #35970	; 0x8c82
   167a4:	movw	r3, #38538	; 0x968a
   167a8:	movw	r2, #1400	; 0x578
   167ac:	movt	r0, #1
   167b0:	movt	r1, #1
   167b4:	movt	r3, #1
   167b8:	bl	12418 <__assert_fail@plt>

000167bc <flatcc_builder_vector_count@@Base>:
   167bc:	ldr	r0, [r0, #32]
   167c0:	ldr	r0, [r0, #20]
   167c4:	bx	lr

000167c8 <flatcc_builder_vector_edit@@Base>:
   167c8:	ldr	r0, [r0, #16]
   167cc:	bx	lr

000167d0 <flatcc_builder_create_offset_vector_direct@@Base>:
   167d0:	mov	r3, #0
   167d4:	b	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   167d8:	push	{r4, r5, r6, r7, fp, lr}
   167dc:	add	fp, sp, #16
   167e0:	sub	sp, sp, #80	; 0x50
   167e4:	mov	r5, #0
   167e8:	cmn	r2, #-1073741823	; 0xc0000001
   167ec:	bhi	1694c <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   167f0:	mov	r7, r0
   167f4:	ldrh	r0, [r0, #128]	; 0x80
   167f8:	sub	r6, fp, #20
   167fc:	mov	r4, #4
   16800:	mov	ip, #1
   16804:	cmp	r0, #3
   16808:	movls	r0, #4
   1680c:	strhls	r0, [r7, #128]	; 0x80
   16810:	str	r2, [fp, #-20]	; 0xffffffec
   16814:	ldr	lr, [r7, #136]	; 0x88
   16818:	str	r6, [sp, #12]
   1681c:	mov	r6, #0
   16820:	str	r4, [sp, #4]
   16824:	str	r4, [sp, #16]
   16828:	str	ip, [sp, #8]
   1682c:	cmp	r6, r2, lsl #2
   16830:	and	r5, lr, #3
   16834:	beq	16854 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16838:	lsl	r6, r2, #2
   1683c:	mov	ip, #2
   16840:	str	r1, [sp, #20]
   16844:	add	r4, r6, #4
   16848:	str	r6, [sp, #24]
   1684c:	str	ip, [sp, #8]
   16850:	str	r4, [sp, #4]
   16854:	cmp	r5, #0
   16858:	beq	16884 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   1685c:	add	r6, sp, #4
   16860:	movw	r0, #35440	; 0x8a70
   16864:	add	r4, r4, r5
   16868:	add	r6, r6, ip, lsl #3
   1686c:	add	ip, ip, #1
   16870:	movt	r0, #1
   16874:	str	r4, [sp, #4]
   16878:	str	r0, [r6, #8]
   1687c:	str	r5, [r6, #12]
   16880:	str	ip, [sp, #8]
   16884:	cmp	r2, #0
   16888:	beq	16910 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   1688c:	mvn	r0, #3
   16890:	cmp	r3, #0
   16894:	sub	r0, r0, lr
   16898:	add	r0, r0, r4
   1689c:	beq	168e8 <flatcc_builder_create_offset_vector_direct@@Base+0x118>
   168a0:	mov	r5, #0
   168a4:	ldr	r6, [r1, r5, lsl #2]
   168a8:	cmp	r6, #0
   168ac:	beq	168c8 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   168b0:	add	r6, r0, r6
   168b4:	str	r6, [r1, r5, lsl #2]
   168b8:	ldrb	r6, [r3, r5]
   168bc:	cmp	r6, #0
   168c0:	bne	168d4 <flatcc_builder_create_offset_vector_direct@@Base+0x104>
   168c4:	b	16958 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   168c8:	ldrb	r6, [r3, r5]
   168cc:	cmp	r6, #0
   168d0:	bne	16998 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   168d4:	add	r5, r5, #1
   168d8:	sub	r0, r0, #4
   168dc:	cmp	r5, r2
   168e0:	bcc	168a4 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   168e4:	b	16910 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   168e8:	mov	r3, #0
   168ec:	ldr	r5, [r1, r3, lsl #2]
   168f0:	cmp	r5, #0
   168f4:	beq	16978 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   168f8:	add	r6, r0, r5
   168fc:	sub	r0, r0, #4
   16900:	str	r6, [r1, r3, lsl #2]
   16904:	add	r3, r3, #1
   16908:	cmp	r3, r2
   1690c:	bcc	168ec <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   16910:	cmp	r4, #0
   16914:	ble	169b8 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   16918:	ldr	r0, [r7, #136]	; 0x88
   1691c:	ldr	r6, [r7, #44]	; 0x2c
   16920:	add	r1, sp, #4
   16924:	mov	r2, ip
   16928:	add	r1, r1, #8
   1692c:	sub	r5, r0, r4
   16930:	ldr	r0, [r7, #36]	; 0x24
   16934:	str	r4, [sp]
   16938:	mov	r3, r5
   1693c:	blx	r6
   16940:	cmp	r0, #0
   16944:	bne	169d8 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   16948:	str	r5, [r7, #136]	; 0x88
   1694c:	mov	r0, r5
   16950:	sub	sp, fp, #16
   16954:	pop	{r4, r5, r6, r7, fp, pc}
   16958:	movw	r0, #40476	; 0x9e1c
   1695c:	movw	r1, #35970	; 0x8c82
   16960:	movw	r3, #40490	; 0x9e2a
   16964:	movw	r2, #1457	; 0x5b1
   16968:	movt	r0, #1
   1696c:	movt	r1, #1
   16970:	movt	r3, #1
   16974:	bl	12418 <__assert_fail@plt>
   16978:	movw	r0, #40488	; 0x9e28
   1697c:	movw	r1, #35970	; 0x8c82
   16980:	movw	r3, #40490	; 0x9e2a
   16984:	movw	r2, #1463	; 0x5b7
   16988:	movt	r0, #1
   1698c:	movt	r1, #1
   16990:	movt	r3, #1
   16994:	bl	12418 <__assert_fail@plt>
   16998:	movw	r0, #40621	; 0x9ead
   1699c:	movw	r1, #35970	; 0x8c82
   169a0:	movw	r3, #40490	; 0x9e2a
   169a4:	movw	r2, #1461	; 0x5b5
   169a8:	movt	r0, #1
   169ac:	movt	r1, #1
   169b0:	movt	r3, #1
   169b4:	bl	12418 <__assert_fail@plt>
   169b8:	movw	r0, #40488	; 0x9e28
   169bc:	movw	r1, #35970	; 0x8c82
   169c0:	movw	r3, #40167	; 0x9ce7
   169c4:	movw	r2, #647	; 0x287
   169c8:	movt	r0, #1
   169cc:	movt	r1, #1
   169d0:	movt	r3, #1
   169d4:	bl	12418 <__assert_fail@plt>
   169d8:	movw	r0, #40488	; 0x9e28
   169dc:	movw	r1, #35970	; 0x8c82
   169e0:	movw	r3, #40167	; 0x9ce7
   169e4:	movw	r2, #651	; 0x28b
   169e8:	movt	r0, #1
   169ec:	movt	r1, #1
   169f0:	movt	r3, #1
   169f4:	bl	12418 <__assert_fail@plt>

000169f8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   169f8:	push	{r4, r5, fp, lr}
   169fc:	add	fp, sp, #8
   16a00:	mov	r4, r0
   16a04:	ldr	r0, [r0, #32]
   16a08:	mov	r3, r1
   16a0c:	ldrh	r1, [r0, #14]
   16a10:	cmp	r1, #5
   16a14:	bne	16ab0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16a18:	ldr	r2, [r0, #20]
   16a1c:	ldr	r1, [r4, #16]
   16a20:	mov	r0, r4
   16a24:	bl	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16a28:	mov	r5, r0
   16a2c:	cmp	r0, #0
   16a30:	beq	16aa8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16a34:	ldr	r0, [r4, #16]
   16a38:	ldr	r2, [r4, #20]
   16a3c:	mov	r1, #0
   16a40:	bl	123f4 <memset@plt>
   16a44:	ldr	r0, [r4, #32]
   16a48:	ldr	r1, [r4, #60]	; 0x3c
   16a4c:	ldr	ip, [r4, #64]	; 0x40
   16a50:	ldr	r3, [r0, #8]
   16a54:	str	r3, [r4, #20]
   16a58:	ldr	r3, [r0]
   16a5c:	str	r3, [r4, #28]
   16a60:	add	r1, r1, r3
   16a64:	ldr	r2, [r0, #4]
   16a68:	str	r1, [r4, #16]
   16a6c:	sub	r1, ip, r3
   16a70:	cmp	r1, r2
   16a74:	movhi	r1, r2
   16a78:	str	r1, [r4, #24]
   16a7c:	ldrh	r1, [r4, #130]	; 0x82
   16a80:	ldrh	r2, [r4, #128]	; 0x80
   16a84:	cmp	r2, r1
   16a88:	strhcc	r1, [r4, #128]	; 0x80
   16a8c:	ldrh	r1, [r0, #12]
   16a90:	sub	r0, r0, #36	; 0x24
   16a94:	str	r0, [r4, #32]
   16a98:	strh	r1, [r4, #130]	; 0x82
   16a9c:	ldr	r0, [r4, #156]	; 0x9c
   16aa0:	sub	r0, r0, #1
   16aa4:	str	r0, [r4, #156]	; 0x9c
   16aa8:	mov	r0, r5
   16aac:	pop	{r4, r5, fp, pc}
   16ab0:	movw	r0, #37022	; 0x909e
   16ab4:	movw	r1, #35970	; 0x8c82
   16ab8:	movw	r3, #38679	; 0x9717
   16abc:	movw	r2, #1493	; 0x5d5
   16ac0:	movt	r0, #1
   16ac4:	movt	r1, #1
   16ac8:	movt	r3, #1
   16acc:	bl	12418 <__assert_fail@plt>

00016ad0 <flatcc_builder_offset_vector_edit@@Base>:
   16ad0:	ldr	r0, [r0, #16]
   16ad4:	bx	lr

00016ad8 <flatcc_builder_offset_vector_count@@Base>:
   16ad8:	ldr	r0, [r0, #32]
   16adc:	ldr	r0, [r0, #20]
   16ae0:	bx	lr

00016ae4 <flatcc_builder_table_add_union@@Base>:
   16ae4:	push	{r4, r5, r6, r7, fp, lr}
   16ae8:	add	fp, sp, #16
   16aec:	mov	r5, r0
   16af0:	ldr	r0, [r0, #32]
   16af4:	ldrh	r0, [r0, #14]
   16af8:	cmp	r0, #3
   16afc:	bne	16b84 <flatcc_builder_table_add_union@@Base+0xa0>
   16b00:	mov	r7, r3
   16b04:	mov	r4, r2
   16b08:	mov	r6, r1
   16b0c:	cmp	r3, #0
   16b10:	beq	16b20 <flatcc_builder_table_add_union@@Base+0x3c>
   16b14:	uxtb	r0, r4
   16b18:	cmp	r0, #0
   16b1c:	beq	16ba4 <flatcc_builder_table_add_union@@Base+0xc0>
   16b20:	cmp	r7, #0
   16b24:	beq	16b40 <flatcc_builder_table_add_union@@Base+0x5c>
   16b28:	mov	r0, r5
   16b2c:	mov	r1, r6
   16b30:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   16b34:	cmp	r0, #0
   16b38:	beq	16bc4 <flatcc_builder_table_add_union@@Base+0xe0>
   16b3c:	str	r7, [r0]
   16b40:	sub	r1, r6, #1
   16b44:	mov	r0, r5
   16b48:	mov	r2, #1
   16b4c:	mov	r3, #1
   16b50:	bl	16d74 <flatcc_builder_table_add@@Base>
   16b54:	cmp	r0, #0
   16b58:	strbne	r4, [r0]
   16b5c:	movne	r0, #0
   16b60:	popne	{r4, r5, r6, r7, fp, pc}
   16b64:	movw	r0, #38925	; 0x980d
   16b68:	movw	r1, #35970	; 0x8c82
   16b6c:	movw	r3, #38793	; 0x9789
   16b70:	movw	r2, #1526	; 0x5f6
   16b74:	movt	r0, #1
   16b78:	movt	r1, #1
   16b7c:	movt	r3, #1
   16b80:	bl	12418 <__assert_fail@plt>
   16b84:	movw	r0, #38039	; 0x9497
   16b88:	movw	r1, #35970	; 0x8c82
   16b8c:	movw	r3, #38793	; 0x9789
   16b90:	movw	r2, #1518	; 0x5ee
   16b94:	movt	r0, #1
   16b98:	movt	r1, #1
   16b9c:	movt	r3, #1
   16ba0:	bl	12418 <__assert_fail@plt>
   16ba4:	movw	r0, #38881	; 0x97e1
   16ba8:	movw	r1, #35970	; 0x8c82
   16bac:	movw	r3, #38793	; 0x9789
   16bb0:	movw	r2, #1519	; 0x5ef
   16bb4:	movt	r0, #1
   16bb8:	movt	r1, #1
   16bbc:	movt	r3, #1
   16bc0:	bl	12418 <__assert_fail@plt>
   16bc4:	movw	r0, #38915	; 0x9803
   16bc8:	movw	r1, #35970	; 0x8c82
   16bcc:	movw	r3, #38793	; 0x9789
   16bd0:	movw	r2, #1522	; 0x5f2
   16bd4:	movt	r0, #1
   16bd8:	movt	r1, #1
   16bdc:	movt	r3, #1
   16be0:	bl	12418 <__assert_fail@plt>

00016be4 <flatcc_builder_table_add_offset@@Base>:
   16be4:	push	{r4, r5, r6, r7, fp, lr}
   16be8:	add	fp, sp, #16
   16bec:	sub	sp, sp, #8
   16bf0:	mov	r4, r0
   16bf4:	ldr	r0, [r0, #32]
   16bf8:	ldrh	r0, [r0, #14]
   16bfc:	cmp	r0, #3
   16c00:	bne	16d14 <flatcc_builder_table_add_offset@@Base+0x130>
   16c04:	movw	r0, #32765	; 0x7ffd
   16c08:	mov	r5, r1
   16c0c:	cmp	r1, r0
   16c10:	bcs	16d34 <flatcc_builder_table_add_offset@@Base+0x150>
   16c14:	ldr	r0, [r4, #4]
   16c18:	add	r1, r0, r5, lsl #1
   16c1c:	ldrh	r1, [r1]
   16c20:	cmp	r1, #0
   16c24:	bne	16d54 <flatcc_builder_table_add_offset@@Base+0x170>
   16c28:	ldr	r2, [r4, #20]
   16c2c:	ldr	r1, [r4, #12]
   16c30:	ldr	r3, [r4, #24]
   16c34:	add	r2, r2, #3
   16c38:	eor	r1, r1, r5
   16c3c:	bic	r6, r2, #3
   16c40:	movw	r2, #31153	; 0x79b1
   16c44:	movt	r2, #40503	; 0x9e37
   16c48:	add	r7, r6, #4
   16c4c:	mul	r1, r1, r2
   16c50:	cmp	r7, r3
   16c54:	str	r7, [r4, #20]
   16c58:	eor	r1, r1, #4
   16c5c:	mul	r1, r1, r2
   16c60:	str	r1, [r4, #12]
   16c64:	bls	16cd8 <flatcc_builder_table_add_offset@@Base+0xf4>
   16c68:	ldr	r1, [r4, #28]
   16c6c:	ldr	r0, [r4, #40]	; 0x28
   16c70:	ldr	ip, [r4, #48]	; 0x30
   16c74:	mov	r2, #1
   16c78:	mov	r3, #1
   16c7c:	str	r2, [sp]
   16c80:	add	r2, r1, r7
   16c84:	add	r1, r4, #60	; 0x3c
   16c88:	blx	ip
   16c8c:	mov	r1, r0
   16c90:	mov	r0, #0
   16c94:	cmp	r1, #0
   16c98:	beq	16ca4 <flatcc_builder_table_add_offset@@Base+0xc0>
   16c9c:	sub	sp, fp, #16
   16ca0:	pop	{r4, r5, r6, r7, fp, pc}
   16ca4:	ldr	r0, [r4, #28]
   16ca8:	ldr	r2, [r4, #60]	; 0x3c
   16cac:	ldr	r3, [r4, #64]	; 0x40
   16cb0:	ldr	r1, [r4, #32]
   16cb4:	add	r2, r2, r0
   16cb8:	sub	r0, r3, r0
   16cbc:	str	r2, [r4, #16]
   16cc0:	movw	r2, #65532	; 0xfffc
   16cc4:	cmp	r0, r2
   16cc8:	movcs	r0, r2
   16ccc:	str	r0, [r4, #24]
   16cd0:	str	r2, [r1, #4]
   16cd4:	ldr	r0, [r4, #4]
   16cd8:	uxth	r1, r5
   16cdc:	add	r0, r0, r1, lsl #1
   16ce0:	strh	r7, [r0]
   16ce4:	ldrh	r0, [r4, #8]
   16ce8:	cmp	r0, r1
   16cec:	addls	r0, r5, #1
   16cf0:	strhls	r0, [r4, #8]
   16cf4:	ldr	r0, [r4]
   16cf8:	add	r1, r0, #2
   16cfc:	str	r1, [r4]
   16d00:	strh	r6, [r0]
   16d04:	ldr	r0, [r4, #16]
   16d08:	add	r0, r0, r6
   16d0c:	sub	sp, fp, #16
   16d10:	pop	{r4, r5, r6, r7, fp, pc}
   16d14:	movw	r0, #38039	; 0x9497
   16d18:	movw	r1, #35970	; 0x8c82
   16d1c:	movw	r3, #39819	; 0x9b8b
   16d20:	movw	r2, #1811	; 0x713
   16d24:	movt	r0, #1
   16d28:	movt	r1, #1
   16d2c:	movt	r3, #1
   16d30:	bl	12418 <__assert_fail@plt>
   16d34:	movw	r0, #39691	; 0x9b0b
   16d38:	movw	r1, #35970	; 0x8c82
   16d3c:	movw	r3, #39819	; 0x9b8b
   16d40:	movw	r2, #1812	; 0x714
   16d44:	movt	r0, #1
   16d48:	movt	r1, #1
   16d4c:	movt	r3, #1
   16d50:	bl	12418 <__assert_fail@plt>
   16d54:	movw	r0, #40488	; 0x9e28
   16d58:	movw	r1, #35970	; 0x8c82
   16d5c:	movw	r3, #39819	; 0x9b8b
   16d60:	movw	r2, #1819	; 0x71b
   16d64:	movt	r0, #1
   16d68:	movt	r1, #1
   16d6c:	movt	r3, #1
   16d70:	bl	12418 <__assert_fail@plt>

00016d74 <flatcc_builder_table_add@@Base>:
   16d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d78:	add	fp, sp, #24
   16d7c:	sub	sp, sp, #8
   16d80:	mov	r4, r0
   16d84:	ldr	r0, [r0, #32]
   16d88:	ldrh	r0, [r0, #14]
   16d8c:	cmp	r0, #3
   16d90:	bne	16eb0 <flatcc_builder_table_add@@Base+0x13c>
   16d94:	movw	r0, #32765	; 0x7ffd
   16d98:	mov	r8, r1
   16d9c:	cmp	r1, r0
   16da0:	bcs	16ed0 <flatcc_builder_table_add@@Base+0x15c>
   16da4:	ldrh	r0, [r4, #130]	; 0x82
   16da8:	cmp	r0, r3
   16dac:	strhcc	r3, [r4, #130]	; 0x82
   16db0:	ldr	r0, [r4, #4]
   16db4:	add	r1, r0, r8, lsl #1
   16db8:	ldrh	r1, [r1]
   16dbc:	cmp	r1, #0
   16dc0:	bne	16ef0 <flatcc_builder_table_add@@Base+0x17c>
   16dc4:	ldr	r1, [r4, #12]
   16dc8:	movw	r7, #31153	; 0x79b1
   16dcc:	ldr	r6, [r4, #20]
   16dd0:	ldr	r5, [r4, #24]
   16dd4:	movt	r7, #40503	; 0x9e37
   16dd8:	eor	r1, r1, r8
   16ddc:	mul	r1, r1, r7
   16de0:	eor	r1, r1, r2
   16de4:	mul	r1, r1, r7
   16de8:	str	r1, [r4, #12]
   16dec:	add	r1, r3, r6
   16df0:	rsb	r3, r3, #0
   16df4:	sub	r1, r1, #1
   16df8:	and	r6, r1, r3
   16dfc:	add	r1, r6, r2
   16e00:	cmp	r1, r5
   16e04:	str	r1, [r4, #20]
   16e08:	bcc	16e80 <flatcc_builder_table_add@@Base+0x10c>
   16e0c:	ldr	r2, [r4, #28]
   16e10:	ldr	r0, [r4, #40]	; 0x28
   16e14:	ldr	r7, [r4, #48]	; 0x30
   16e18:	mov	r3, #1
   16e1c:	str	r3, [sp]
   16e20:	mov	r3, #1
   16e24:	add	r1, r1, r2
   16e28:	add	r2, r1, #1
   16e2c:	add	r1, r4, #60	; 0x3c
   16e30:	blx	r7
   16e34:	mov	r1, r0
   16e38:	mov	r0, #0
   16e3c:	cmp	r1, #0
   16e40:	beq	16e4c <flatcc_builder_table_add@@Base+0xd8>
   16e44:	sub	sp, fp, #24
   16e48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e4c:	ldr	r0, [r4, #28]
   16e50:	ldr	r2, [r4, #60]	; 0x3c
   16e54:	ldr	r3, [r4, #64]	; 0x40
   16e58:	ldr	r1, [r4, #32]
   16e5c:	add	r2, r2, r0
   16e60:	sub	r0, r3, r0
   16e64:	str	r2, [r4, #16]
   16e68:	movw	r2, #65532	; 0xfffc
   16e6c:	cmp	r0, r2
   16e70:	movcs	r0, r2
   16e74:	str	r0, [r4, #24]
   16e78:	str	r2, [r1, #4]
   16e7c:	ldr	r0, [r4, #4]
   16e80:	uxth	r1, r8
   16e84:	add	r2, r6, #4
   16e88:	add	r0, r0, r1, lsl #1
   16e8c:	strh	r2, [r0]
   16e90:	ldrh	r0, [r4, #8]
   16e94:	cmp	r0, r1
   16e98:	addls	r0, r8, #1
   16e9c:	strhls	r0, [r4, #8]
   16ea0:	ldr	r0, [r4, #16]
   16ea4:	add	r0, r0, r6
   16ea8:	sub	sp, fp, #24
   16eac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16eb0:	movw	r0, #38039	; 0x9497
   16eb4:	movw	r1, #35970	; 0x8c82
   16eb8:	movw	r3, #39617	; 0x9ac1
   16ebc:	movw	r2, #1773	; 0x6ed
   16ec0:	movt	r0, #1
   16ec4:	movt	r1, #1
   16ec8:	movt	r3, #1
   16ecc:	bl	12418 <__assert_fail@plt>
   16ed0:	movw	r0, #39691	; 0x9b0b
   16ed4:	movw	r1, #35970	; 0x8c82
   16ed8:	movw	r3, #39617	; 0x9ac1
   16edc:	movw	r2, #1774	; 0x6ee
   16ee0:	movt	r0, #1
   16ee4:	movt	r1, #1
   16ee8:	movt	r3, #1
   16eec:	bl	12418 <__assert_fail@plt>
   16ef0:	movw	r0, #40488	; 0x9e28
   16ef4:	movw	r1, #35970	; 0x8c82
   16ef8:	movw	r3, #39617	; 0x9ac1
   16efc:	movw	r2, #1784	; 0x6f8
   16f00:	movt	r0, #1
   16f04:	movt	r1, #1
   16f08:	movt	r3, #1
   16f0c:	bl	12418 <__assert_fail@plt>

00016f10 <flatcc_builder_table_add_union_vector@@Base>:
   16f10:	push	{r4, r5, r6, r7, fp, lr}
   16f14:	add	fp, sp, #16
   16f18:	mov	r6, r0
   16f1c:	ldr	r0, [r0, #32]
   16f20:	ldrh	r0, [r0, #14]
   16f24:	cmp	r0, #3
   16f28:	bne	16f90 <flatcc_builder_table_add_union_vector@@Base+0x80>
   16f2c:	clz	r0, r3
   16f30:	mov	r5, r1
   16f34:	clz	r1, r2
   16f38:	mov	r4, r3
   16f3c:	mov	r7, r2
   16f40:	lsr	r0, r0, #5
   16f44:	lsr	r1, r1, #5
   16f48:	cmp	r1, r0
   16f4c:	bne	16fb0 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16f50:	cmp	r7, #0
   16f54:	beq	16f88 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16f58:	sub	r1, r5, #1
   16f5c:	mov	r0, r6
   16f60:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   16f64:	cmp	r0, #0
   16f68:	beq	16fd0 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16f6c:	str	r7, [r0]
   16f70:	mov	r0, r6
   16f74:	mov	r1, r5
   16f78:	bl	16be4 <flatcc_builder_table_add_offset@@Base>
   16f7c:	cmp	r0, #0
   16f80:	beq	16ff0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16f84:	str	r4, [r0]
   16f88:	mov	r0, #0
   16f8c:	pop	{r4, r5, r6, r7, fp, pc}
   16f90:	movw	r0, #38039	; 0x9497
   16f94:	movw	r1, #35970	; 0x8c82
   16f98:	movw	r3, #38937	; 0x9819
   16f9c:	mov	r2, #1536	; 0x600
   16fa0:	movt	r0, #1
   16fa4:	movt	r1, #1
   16fa8:	movt	r3, #1
   16fac:	bl	12418 <__assert_fail@plt>
   16fb0:	movw	r0, #39036	; 0x987c
   16fb4:	movw	r1, #35970	; 0x8c82
   16fb8:	movw	r3, #38937	; 0x9819
   16fbc:	movw	r2, #1537	; 0x601
   16fc0:	movt	r0, #1
   16fc4:	movt	r1, #1
   16fc8:	movt	r3, #1
   16fcc:	bl	12418 <__assert_fail@plt>
   16fd0:	movw	r0, #38915	; 0x9803
   16fd4:	movw	r1, #35970	; 0x8c82
   16fd8:	movw	r3, #38937	; 0x9819
   16fdc:	movw	r2, #1540	; 0x604
   16fe0:	movt	r0, #1
   16fe4:	movt	r1, #1
   16fe8:	movt	r3, #1
   16fec:	bl	12418 <__assert_fail@plt>
   16ff0:	movw	r0, #38915	; 0x9803
   16ff4:	movw	r1, #35970	; 0x8c82
   16ff8:	movw	r3, #38937	; 0x9819
   16ffc:	movw	r2, #1544	; 0x608
   17000:	movt	r0, #1
   17004:	movt	r1, #1
   17008:	movt	r3, #1
   1700c:	bl	12418 <__assert_fail@plt>

00017010 <flatcc_builder_create_union_vector@@Base>:
   17010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17014:	add	fp, sp, #28
   17018:	sub	sp, sp, #12
   1701c:	mov	r7, #0
   17020:	mov	r4, r1
   17024:	mov	r5, r0
   17028:	mov	sl, r3
   1702c:	mov	r9, r2
   17030:	mov	r6, #4
   17034:	str	r7, [r0]
   17038:	str	r7, [r0, #4]
   1703c:	mov	r0, r1
   17040:	mov	r1, #4
   17044:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   17048:	cmp	r0, #0
   1704c:	beq	17058 <flatcc_builder_create_union_vector@@Base+0x48>
   17050:	sub	sp, fp, #28
   17054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17058:	ldr	r0, [r4, #32]
   1705c:	mov	r1, #5
   17060:	str	r6, [r0, #16]
   17064:	ldr	r0, [r4, #32]
   17068:	str	r7, [r0, #20]
   1706c:	ldr	r0, [r4, #32]
   17070:	strh	r1, [r0, #14]
   17074:	ldr	r1, [r4, #28]
   17078:	ldr	r2, [r4, #60]	; 0x3c
   1707c:	ldr	r3, [r4, #64]	; 0x40
   17080:	add	r2, r2, r1
   17084:	sub	r1, r3, r1
   17088:	str	r2, [r4, #16]
   1708c:	mvn	r2, #3
   17090:	cmn	r1, #4
   17094:	movcs	r1, r2
   17098:	str	r1, [r4, #24]
   1709c:	str	r2, [r0, #4]
   170a0:	ldr	r1, [r0, #20]
   170a4:	adds	r1, r1, sl
   170a8:	cmpcc	r1, #1073741824	; 0x40000000
   170ac:	bcc	170d0 <flatcc_builder_create_union_vector@@Base+0xc0>
   170b0:	movw	r0, #40241	; 0x9d31
   170b4:	movw	r1, #35970	; 0x8c82
   170b8:	movw	r3, #40268	; 0x9d4c
   170bc:	mov	r2, #892	; 0x37c
   170c0:	movt	r0, #1
   170c4:	movt	r1, #1
   170c8:	movt	r3, #1
   170cc:	bl	12418 <__assert_fail@plt>
   170d0:	str	r1, [r0, #20]
   170d4:	ldr	r7, [r4, #20]
   170d8:	ldr	r0, [r4, #24]
   170dc:	add	r1, r7, sl, lsl #2
   170e0:	cmp	r1, r0
   170e4:	str	r1, [r4, #20]
   170e8:	bcs	170fc <flatcc_builder_create_union_vector@@Base+0xec>
   170ec:	ldr	r1, [r4, #16]
   170f0:	adds	r2, r1, r7
   170f4:	bne	17164 <flatcc_builder_create_union_vector@@Base+0x154>
   170f8:	b	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   170fc:	ldr	r2, [r4, #28]
   17100:	ldr	r0, [r4, #40]	; 0x28
   17104:	ldr	r6, [r4, #48]	; 0x30
   17108:	mov	r3, #1
   1710c:	str	r3, [sp]
   17110:	mov	r3, #1
   17114:	add	r1, r1, r2
   17118:	add	r2, r1, #1
   1711c:	add	r1, r4, #60	; 0x3c
   17120:	blx	r6
   17124:	cmp	r0, #0
   17128:	bne	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   1712c:	ldr	r0, [r4, #28]
   17130:	ldr	r1, [r4, #60]	; 0x3c
   17134:	ldr	r3, [r4, #64]	; 0x40
   17138:	ldr	r2, [r4, #32]
   1713c:	add	r1, r1, r0
   17140:	sub	r0, r3, r0
   17144:	mvn	r3, #3
   17148:	cmn	r0, #4
   1714c:	str	r1, [r4, #16]
   17150:	movcs	r0, r3
   17154:	str	r0, [r4, #24]
   17158:	str	r3, [r2, #4]
   1715c:	adds	r2, r1, r7
   17160:	beq	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   17164:	ldr	r7, [r4, #20]
   17168:	add	r2, r7, sl
   1716c:	cmp	r2, r0
   17170:	str	r2, [r4, #20]
   17174:	bcc	171d8 <flatcc_builder_create_union_vector@@Base+0x1c8>
   17178:	ldr	r1, [r4, #28]
   1717c:	ldr	r0, [r4, #40]	; 0x28
   17180:	ldr	r6, [r4, #48]	; 0x30
   17184:	mov	r3, #1
   17188:	str	r3, [sp]
   1718c:	mov	r3, #1
   17190:	add	r1, r2, r1
   17194:	add	r2, r1, #1
   17198:	add	r1, r4, #60	; 0x3c
   1719c:	blx	r6
   171a0:	cmp	r0, #0
   171a4:	bne	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   171a8:	ldr	r0, [r4, #28]
   171ac:	ldr	r1, [r4, #60]	; 0x3c
   171b0:	ldr	r3, [r4, #64]	; 0x40
   171b4:	ldr	r2, [r4, #32]
   171b8:	add	r1, r1, r0
   171bc:	sub	r0, r3, r0
   171c0:	mvn	r3, #3
   171c4:	cmn	r0, #4
   171c8:	str	r1, [r4, #16]
   171cc:	movcs	r0, r3
   171d0:	str	r0, [r4, #24]
   171d4:	str	r3, [r2, #4]
   171d8:	adds	r8, r1, r7
   171dc:	beq	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   171e0:	cmp	sl, #0
   171e4:	beq	17214 <flatcc_builder_create_union_vector@@Base+0x204>
   171e8:	add	r0, r9, #4
   171ec:	mov	r2, sl
   171f0:	mov	r3, r1
   171f4:	mov	r7, r8
   171f8:	ldrb	r6, [r0, #-4]
   171fc:	subs	r2, r2, #1
   17200:	strb	r6, [r7], #1
   17204:	ldr	r6, [r0]
   17208:	add	r0, r0, #8
   1720c:	str	r6, [r3], #4
   17210:	bne	171f8 <flatcc_builder_create_union_vector@@Base+0x1e8>
   17214:	mov	r0, r4
   17218:	mov	r2, sl
   1721c:	mov	r3, r8
   17220:	bl	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17224:	mov	r7, r0
   17228:	mov	r9, #0
   1722c:	cmp	r0, #0
   17230:	beq	1725c <flatcc_builder_create_union_vector@@Base+0x24c>
   17234:	mvn	r0, #0
   17238:	mov	r1, #1
   1723c:	mov	r2, sl
   17240:	mov	r3, #1
   17244:	str	r1, [sp]
   17248:	str	r0, [sp, #4]
   1724c:	mov	r0, r4
   17250:	mov	r1, r8
   17254:	bl	16574 <flatcc_builder_create_vector@@Base>
   17258:	b	17260 <flatcc_builder_create_union_vector@@Base+0x250>
   1725c:	mov	r0, #0
   17260:	orr	r1, r9, r7
   17264:	stm	r5, {r0, r1}
   17268:	mov	r1, #0
   1726c:	ldr	r0, [r4, #16]
   17270:	ldr	r2, [r4, #20]
   17274:	bl	123f4 <memset@plt>
   17278:	ldr	r0, [r4, #32]
   1727c:	ldr	r1, [r4, #60]	; 0x3c
   17280:	ldr	r2, [r4, #64]	; 0x40
   17284:	ldr	r3, [r0, #8]
   17288:	str	r3, [r4, #20]
   1728c:	ldr	r3, [r0]
   17290:	str	r3, [r4, #28]
   17294:	add	r1, r1, r3
   17298:	ldr	r7, [r0, #4]
   1729c:	str	r1, [r4, #16]
   172a0:	sub	r1, r2, r3
   172a4:	cmp	r1, r7
   172a8:	movhi	r1, r7
   172ac:	str	r1, [r4, #24]
   172b0:	ldrh	r1, [r4, #130]	; 0x82
   172b4:	ldrh	r2, [r4, #128]	; 0x80
   172b8:	cmp	r2, r1
   172bc:	strhcc	r1, [r4, #128]	; 0x80
   172c0:	ldrh	r1, [r0, #12]
   172c4:	sub	r0, r0, #36	; 0x24
   172c8:	str	r0, [r4, #32]
   172cc:	strh	r1, [r4, #130]	; 0x82
   172d0:	ldr	r0, [r4, #156]	; 0x9c
   172d4:	sub	r0, r0, #1
   172d8:	str	r0, [r4, #156]	; 0x9c
   172dc:	sub	sp, fp, #28
   172e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000172e4 <flatcc_builder_create_union_vector_direct@@Base>:
   172e4:	push	{r4, r5, r6, r7, fp, lr}
   172e8:	add	fp, sp, #16
   172ec:	sub	sp, sp, #8
   172f0:	ldr	r7, [fp, #8]
   172f4:	mov	r5, r2
   172f8:	mov	r4, r0
   172fc:	mov	r0, #0
   17300:	mov	r6, r1
   17304:	str	r0, [r4]
   17308:	str	r0, [r4, #4]
   1730c:	mov	r0, r1
   17310:	mov	r1, r3
   17314:	mov	r3, r5
   17318:	mov	r2, r7
   1731c:	bl	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17320:	cmp	r0, #0
   17324:	str	r0, [r4, #4]
   17328:	beq	17354 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   1732c:	mvn	r0, #0
   17330:	mov	r1, #1
   17334:	mov	r2, r7
   17338:	mov	r3, #1
   1733c:	str	r1, [sp]
   17340:	str	r0, [sp, #4]
   17344:	mov	r0, r6
   17348:	mov	r1, r5
   1734c:	bl	16574 <flatcc_builder_create_vector@@Base>
   17350:	str	r0, [r4]
   17354:	sub	sp, fp, #16
   17358:	pop	{r4, r5, r6, r7, fp, pc}

0001735c <flatcc_builder_start_union_vector@@Base>:
   1735c:	push	{r4, sl, fp, lr}
   17360:	add	fp, sp, #8
   17364:	mov	r1, #4
   17368:	mov	r4, r0
   1736c:	bl	144c8 <flatcc_builder_start_buffer@@Base+0xbc>
   17370:	mov	r1, r0
   17374:	mvn	r0, #0
   17378:	cmp	r1, #0
   1737c:	popne	{r4, sl, fp, pc}
   17380:	ldr	r0, [r4, #32]
   17384:	mov	r1, #8
   17388:	mov	r2, #7
   1738c:	str	r1, [r0, #16]
   17390:	mov	r0, #0
   17394:	ldr	r1, [r4, #32]
   17398:	str	r0, [r1, #20]
   1739c:	ldr	r1, [r4, #32]
   173a0:	strh	r2, [r1, #14]
   173a4:	ldr	r2, [r4, #28]
   173a8:	ldr	r3, [r4, #60]	; 0x3c
   173ac:	ldr	ip, [r4, #64]	; 0x40
   173b0:	add	r3, r3, r2
   173b4:	sub	r2, ip, r2
   173b8:	str	r3, [r4, #16]
   173bc:	mvn	r3, #3
   173c0:	cmn	r2, #4
   173c4:	movcs	r2, r3
   173c8:	str	r2, [r4, #24]
   173cc:	str	r3, [r1, #4]
   173d0:	pop	{r4, sl, fp, pc}

000173d4 <flatcc_builder_end_union_vector@@Base>:
   173d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173d8:	add	fp, sp, #28
   173dc:	sub	sp, sp, #12
   173e0:	mov	sl, r0
   173e4:	mov	r0, #0
   173e8:	mov	r4, r1
   173ec:	str	r0, [sl]
   173f0:	str	r0, [sl, #4]
   173f4:	ldr	r0, [r1, #32]
   173f8:	ldrh	r1, [r0, #14]
   173fc:	cmp	r1, #7
   17400:	bne	175a8 <flatcc_builder_end_union_vector@@Base+0x1d4>
   17404:	ldr	r6, [r0, #20]
   17408:	ldr	r7, [r4, #20]
   1740c:	ldr	r2, [r4, #24]
   17410:	add	r0, r6, r6, lsl #2
   17414:	add	r1, r7, r0
   17418:	cmp	r1, r2
   1741c:	str	r1, [r4, #20]
   17420:	bcs	174b0 <flatcc_builder_end_union_vector@@Base+0xdc>
   17424:	ldr	r0, [r4, #16]
   17428:	adds	r1, r0, r7
   1742c:	beq	17518 <flatcc_builder_end_union_vector@@Base+0x144>
   17430:	add	r8, r1, r6, lsl #2
   17434:	cmp	r6, #0
   17438:	beq	17468 <flatcc_builder_end_union_vector@@Base+0x94>
   1743c:	add	r0, r0, #4
   17440:	mov	r2, r6
   17444:	mov	r3, r1
   17448:	mov	r7, r8
   1744c:	ldrb	r5, [r0, #-4]
   17450:	subs	r2, r2, #1
   17454:	strb	r5, [r7], #1
   17458:	ldr	r5, [r0]
   1745c:	add	r0, r0, #8
   17460:	str	r5, [r3], #4
   17464:	bne	1744c <flatcc_builder_end_union_vector@@Base+0x78>
   17468:	mov	r0, r4
   1746c:	mov	r2, r6
   17470:	mov	r3, r8
   17474:	bl	167d8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17478:	mov	r7, r0
   1747c:	mov	r9, #0
   17480:	cmp	r0, #0
   17484:	beq	17520 <flatcc_builder_end_union_vector@@Base+0x14c>
   17488:	mvn	r0, #0
   1748c:	mov	r1, #1
   17490:	mov	r2, r6
   17494:	mov	r3, #1
   17498:	str	r1, [sp]
   1749c:	str	r0, [sp, #4]
   174a0:	mov	r0, r4
   174a4:	mov	r1, r8
   174a8:	bl	16574 <flatcc_builder_create_vector@@Base>
   174ac:	b	17524 <flatcc_builder_end_union_vector@@Base+0x150>
   174b0:	ldr	r2, [r4, #28]
   174b4:	ldr	r0, [r4, #40]	; 0x28
   174b8:	ldr	r5, [r4, #48]	; 0x30
   174bc:	mov	r3, #1
   174c0:	str	r3, [sp]
   174c4:	mov	r3, #1
   174c8:	add	r1, r1, r2
   174cc:	add	r2, r1, #1
   174d0:	add	r1, r4, #60	; 0x3c
   174d4:	blx	r5
   174d8:	cmp	r0, #0
   174dc:	bne	17518 <flatcc_builder_end_union_vector@@Base+0x144>
   174e0:	ldr	r1, [r4, #28]
   174e4:	ldr	r0, [r4, #60]	; 0x3c
   174e8:	ldr	r3, [r4, #64]	; 0x40
   174ec:	ldr	r2, [r4, #32]
   174f0:	add	r0, r0, r1
   174f4:	sub	r1, r3, r1
   174f8:	mvn	r3, #3
   174fc:	cmn	r1, #4
   17500:	str	r0, [r4, #16]
   17504:	movcs	r1, r3
   17508:	str	r1, [r4, #24]
   1750c:	str	r3, [r2, #4]
   17510:	adds	r1, r0, r7
   17514:	bne	17430 <flatcc_builder_end_union_vector@@Base+0x5c>
   17518:	sub	sp, fp, #28
   1751c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17520:	mov	r0, #0
   17524:	orr	r1, r9, r7
   17528:	stm	sl, {r0, r1}
   1752c:	mov	r1, #0
   17530:	ldr	r0, [r4, #16]
   17534:	ldr	r2, [r4, #20]
   17538:	bl	123f4 <memset@plt>
   1753c:	ldr	r0, [r4, #32]
   17540:	ldr	r1, [r4, #60]	; 0x3c
   17544:	ldr	r2, [r4, #64]	; 0x40
   17548:	ldr	r3, [r0, #8]
   1754c:	str	r3, [r4, #20]
   17550:	ldr	r3, [r0]
   17554:	str	r3, [r4, #28]
   17558:	add	r1, r1, r3
   1755c:	ldr	r7, [r0, #4]
   17560:	str	r1, [r4, #16]
   17564:	sub	r1, r2, r3
   17568:	cmp	r1, r7
   1756c:	movhi	r1, r7
   17570:	str	r1, [r4, #24]
   17574:	ldrh	r1, [r4, #130]	; 0x82
   17578:	ldrh	r2, [r4, #128]	; 0x80
   1757c:	cmp	r2, r1
   17580:	strhcc	r1, [r4, #128]	; 0x80
   17584:	ldrh	r1, [r0, #12]
   17588:	sub	r0, r0, #36	; 0x24
   1758c:	str	r0, [r4, #32]
   17590:	strh	r1, [r4, #130]	; 0x82
   17594:	ldr	r0, [r4, #156]	; 0x9c
   17598:	sub	r0, r0, #1
   1759c:	str	r0, [r4, #156]	; 0x9c
   175a0:	sub	sp, fp, #28
   175a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175a8:	movw	r0, #39076	; 0x98a4
   175ac:	movw	r1, #35970	; 0x8c82
   175b0:	movw	r3, #39126	; 0x98d6
   175b4:	movw	r2, #1617	; 0x651
   175b8:	movt	r0, #1
   175bc:	movt	r1, #1
   175c0:	movt	r3, #1
   175c4:	bl	12418 <__assert_fail@plt>

000175c8 <flatcc_builder_union_vector_count@@Base>:
   175c8:	ldr	r0, [r0, #32]
   175cc:	ldr	r0, [r0, #20]
   175d0:	bx	lr

000175d4 <flatcc_builder_union_vector_edit@@Base>:
   175d4:	ldr	r0, [r0, #16]
   175d8:	bx	lr

000175dc <flatcc_builder_extend_union_vector@@Base>:
   175dc:	push	{r4, r5, fp, lr}
   175e0:	add	fp, sp, #8
   175e4:	sub	sp, sp, #8
   175e8:	mov	r4, r0
   175ec:	ldr	r0, [r0, #32]
   175f0:	ldr	r2, [r0, #20]
   175f4:	adds	r2, r2, r1
   175f8:	cmpcc	r2, #536870912	; 0x20000000
   175fc:	bcc	17620 <flatcc_builder_extend_union_vector@@Base+0x44>
   17600:	movw	r0, #40241	; 0x9d31
   17604:	movw	r1, #35970	; 0x8c82
   17608:	movw	r3, #40268	; 0x9d4c
   1760c:	mov	r2, #892	; 0x37c
   17610:	movt	r0, #1
   17614:	movt	r1, #1
   17618:	movt	r3, #1
   1761c:	bl	12418 <__assert_fail@plt>
   17620:	str	r2, [r0, #20]
   17624:	ldr	r5, [r4, #20]
   17628:	ldr	r0, [r4, #24]
   1762c:	add	r1, r5, r1, lsl #3
   17630:	cmp	r1, r0
   17634:	str	r1, [r4, #20]
   17638:	bcs	1764c <flatcc_builder_extend_union_vector@@Base+0x70>
   1763c:	ldr	r0, [r4, #16]
   17640:	add	r0, r0, r5
   17644:	sub	sp, fp, #8
   17648:	pop	{r4, r5, fp, pc}
   1764c:	ldr	r2, [r4, #28]
   17650:	ldr	r0, [r4, #40]	; 0x28
   17654:	ldr	ip, [r4, #48]	; 0x30
   17658:	mov	r3, #1
   1765c:	str	r3, [sp]
   17660:	mov	r3, #1
   17664:	add	r1, r1, r2
   17668:	add	r2, r1, #1
   1766c:	add	r1, r4, #60	; 0x3c
   17670:	blx	ip
   17674:	mov	r1, r0
   17678:	mov	r0, #0
   1767c:	cmp	r1, #0
   17680:	beq	1768c <flatcc_builder_extend_union_vector@@Base+0xb0>
   17684:	sub	sp, fp, #8
   17688:	pop	{r4, r5, fp, pc}
   1768c:	ldr	r1, [r4, #28]
   17690:	ldr	r0, [r4, #60]	; 0x3c
   17694:	ldr	r3, [r4, #64]	; 0x40
   17698:	ldr	r2, [r4, #32]
   1769c:	add	r0, r0, r1
   176a0:	sub	r1, r3, r1
   176a4:	mvn	r3, #3
   176a8:	cmn	r1, #4
   176ac:	str	r0, [r4, #16]
   176b0:	movcs	r1, r3
   176b4:	str	r1, [r4, #24]
   176b8:	str	r3, [r2, #4]
   176bc:	add	r0, r0, r5
   176c0:	sub	sp, fp, #8
   176c4:	pop	{r4, r5, fp, pc}

000176c8 <flatcc_builder_truncate_union_vector@@Base>:
   176c8:	push	{fp, lr}
   176cc:	mov	fp, sp
   176d0:	ldr	r2, [r0, #32]
   176d4:	ldrh	r3, [r2, #14]
   176d8:	cmp	r3, #7
   176dc:	bne	17724 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   176e0:	ldr	r3, [r2, #20]
   176e4:	cmp	r3, r1
   176e8:	bcc	17744 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   176ec:	sub	r3, r3, r1
   176f0:	str	r3, [r2, #20]
   176f4:	ldr	r2, [r0, #32]
   176f8:	ldr	r3, [r0, #20]
   176fc:	ldr	ip, [r0, #16]
   17700:	ldr	r2, [r2, #16]
   17704:	mls	r3, r2, r1, r3
   17708:	mul	r2, r2, r1
   1770c:	mov	r1, #0
   17710:	str	r3, [r0, #20]
   17714:	add	r0, ip, r3
   17718:	bl	123f4 <memset@plt>
   1771c:	mov	r0, #0
   17720:	pop	{fp, pc}
   17724:	movw	r0, #39076	; 0x98a4
   17728:	movw	r1, #35970	; 0x8c82
   1772c:	movw	r3, #39209	; 0x9929
   17730:	movw	r2, #1665	; 0x681
   17734:	movt	r0, #1
   17738:	movt	r1, #1
   1773c:	movt	r3, #1
   17740:	bl	12418 <__assert_fail@plt>
   17744:	movw	r0, #37640	; 0x9308
   17748:	movw	r1, #35970	; 0x8c82
   1774c:	movw	r3, #39209	; 0x9929
   17750:	movw	r2, #1666	; 0x682
   17754:	movt	r0, #1
   17758:	movt	r1, #1
   1775c:	movt	r3, #1
   17760:	bl	12418 <__assert_fail@plt>

00017764 <flatcc_builder_union_vector_push@@Base>:
   17764:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17768:	add	fp, sp, #24
   1776c:	sub	sp, sp, #8
   17770:	mov	r7, r0
   17774:	ldr	r0, [r0, #32]
   17778:	mov	r9, r1
   1777c:	ldrh	r1, [r0, #14]
   17780:	cmp	r1, #7
   17784:	bne	1784c <flatcc_builder_union_vector_push@@Base+0xe8>
   17788:	ldr	r1, [r0, #20]
   1778c:	mov	r6, #0
   17790:	cmn	r1, #-536870911	; 0xe0000001
   17794:	beq	177f4 <flatcc_builder_union_vector_push@@Base+0x90>
   17798:	add	r1, r1, #1
   1779c:	mov	r8, r2
   177a0:	str	r1, [r0, #20]
   177a4:	ldr	r4, [r7, #20]
   177a8:	ldr	r0, [r7, #24]
   177ac:	add	r1, r4, #8
   177b0:	cmp	r1, r0
   177b4:	str	r1, [r7, #20]
   177b8:	bcs	177c4 <flatcc_builder_union_vector_push@@Base+0x60>
   177bc:	ldr	r0, [r7, #16]
   177c0:	b	17830 <flatcc_builder_union_vector_push@@Base+0xcc>
   177c4:	ldr	r1, [r7, #28]
   177c8:	ldr	r0, [r7, #40]	; 0x28
   177cc:	ldr	r5, [r7, #48]	; 0x30
   177d0:	mov	r2, #1
   177d4:	mov	r3, #1
   177d8:	str	r2, [sp]
   177dc:	add	r1, r4, r1
   177e0:	add	r2, r1, #9
   177e4:	add	r1, r7, #60	; 0x3c
   177e8:	blx	r5
   177ec:	cmp	r0, #0
   177f0:	beq	17800 <flatcc_builder_union_vector_push@@Base+0x9c>
   177f4:	mov	r0, r6
   177f8:	sub	sp, fp, #24
   177fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17800:	ldr	r1, [r7, #28]
   17804:	ldr	r0, [r7, #60]	; 0x3c
   17808:	ldr	r3, [r7, #64]	; 0x40
   1780c:	ldr	r2, [r7, #32]
   17810:	add	r0, r0, r1
   17814:	sub	r1, r3, r1
   17818:	mvn	r3, #3
   1781c:	cmn	r1, #4
   17820:	str	r0, [r7, #16]
   17824:	movcs	r1, r3
   17828:	str	r1, [r7, #24]
   1782c:	str	r3, [r2, #4]
   17830:	adds	r0, r0, r4
   17834:	movne	r6, r0
   17838:	strne	r9, [r0]
   1783c:	strne	r8, [r0, #4]
   17840:	mov	r0, r6
   17844:	sub	sp, fp, #24
   17848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1784c:	movw	r0, #39076	; 0x98a4
   17850:	movw	r1, #35970	; 0x8c82
   17854:	movw	r3, #39278	; 0x996e
   17858:	movw	r2, #1677	; 0x68d
   1785c:	movt	r0, #1
   17860:	movt	r1, #1
   17864:	movt	r3, #1
   17868:	bl	12418 <__assert_fail@plt>

0001786c <flatcc_builder_append_union_vector@@Base>:
   1786c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17870:	add	fp, sp, #24
   17874:	sub	sp, sp, #8
   17878:	mov	r6, r0
   1787c:	ldr	r0, [r0, #32]
   17880:	mov	r8, r1
   17884:	ldrh	r1, [r0, #14]
   17888:	cmp	r1, #7
   1788c:	bne	17990 <flatcc_builder_append_union_vector@@Base+0x124>
   17890:	ldr	r1, [r0, #20]
   17894:	mov	r5, r2
   17898:	adds	r1, r1, r2
   1789c:	cmpcc	r1, #536870912	; 0x20000000
   178a0:	bcc	178c4 <flatcc_builder_append_union_vector@@Base+0x58>
   178a4:	movw	r0, #40241	; 0x9d31
   178a8:	movw	r1, #35970	; 0x8c82
   178ac:	movw	r3, #40268	; 0x9d4c
   178b0:	mov	r2, #892	; 0x37c
   178b4:	movt	r0, #1
   178b8:	movt	r1, #1
   178bc:	movt	r3, #1
   178c0:	bl	12418 <__assert_fail@plt>
   178c4:	str	r1, [r0, #20]
   178c8:	ldr	r4, [r6, #20]
   178cc:	ldr	r0, [r6, #24]
   178d0:	add	r1, r4, r5, lsl #3
   178d4:	cmp	r1, r0
   178d8:	str	r1, [r6, #20]
   178dc:	bcs	17908 <flatcc_builder_append_union_vector@@Base+0x9c>
   178e0:	ldr	r0, [r6, #16]
   178e4:	adds	r7, r0, r4
   178e8:	beq	17980 <flatcc_builder_append_union_vector@@Base+0x114>
   178ec:	lsl	r2, r5, #3
   178f0:	mov	r0, r7
   178f4:	mov	r1, r8
   178f8:	bl	12388 <memcpy@plt>
   178fc:	mov	r0, r7
   17900:	sub	sp, fp, #24
   17904:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17908:	ldr	r2, [r6, #28]
   1790c:	ldr	r0, [r6, #40]	; 0x28
   17910:	ldr	r7, [r6, #48]	; 0x30
   17914:	mov	r3, #1
   17918:	str	r3, [sp]
   1791c:	mov	r3, #1
   17920:	add	r1, r1, r2
   17924:	add	r2, r1, #1
   17928:	add	r1, r6, #60	; 0x3c
   1792c:	blx	r7
   17930:	mov	r7, #0
   17934:	cmp	r0, #0
   17938:	beq	17948 <flatcc_builder_append_union_vector@@Base+0xdc>
   1793c:	mov	r0, r7
   17940:	sub	sp, fp, #24
   17944:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17948:	ldr	r1, [r6, #28]
   1794c:	ldr	r0, [r6, #60]	; 0x3c
   17950:	ldr	r3, [r6, #64]	; 0x40
   17954:	ldr	r2, [r6, #32]
   17958:	add	r0, r0, r1
   1795c:	sub	r1, r3, r1
   17960:	mvn	r3, #3
   17964:	cmn	r1, #4
   17968:	str	r0, [r6, #16]
   1796c:	movcs	r1, r3
   17970:	str	r1, [r6, #24]
   17974:	str	r3, [r2, #4]
   17978:	adds	r7, r0, r4
   1797c:	bne	178ec <flatcc_builder_append_union_vector@@Base+0x80>
   17980:	mov	r7, #0
   17984:	mov	r0, r7
   17988:	sub	sp, fp, #24
   1798c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17990:	movw	r0, #39076	; 0x98a4
   17994:	movw	r1, #35970	; 0x8c82
   17998:	movw	r3, #39387	; 0x99db
   1799c:	movw	r2, #1692	; 0x69c
   179a0:	movt	r0, #1
   179a4:	movt	r1, #1
   179a8:	movt	r3, #1
   179ac:	bl	12418 <__assert_fail@plt>

000179b0 <flatcc_builder_create_string@@Base>:
   179b0:	push	{r4, r5, r6, sl, fp, lr}
   179b4:	add	fp, sp, #16
   179b8:	sub	sp, sp, #80	; 0x50
   179bc:	str	r2, [fp, #-20]	; 0xffffffec
   179c0:	mvn	r5, r2
   179c4:	mov	r6, r0
   179c8:	mov	r3, #1
   179cc:	cmp	r2, #0
   179d0:	ldr	ip, [r0, #136]	; 0x88
   179d4:	sub	r0, fp, #20
   179d8:	str	r0, [sp, #12]
   179dc:	mov	r0, #4
   179e0:	str	r0, [sp, #4]
   179e4:	str	r0, [sp, #16]
   179e8:	str	r3, [sp, #8]
   179ec:	add	r5, ip, r5
   179f0:	and	r5, r5, #3
   179f4:	add	r5, r5, #1
   179f8:	beq	17a14 <flatcc_builder_create_string@@Base+0x64>
   179fc:	mov	r3, #2
   17a00:	add	r0, r2, #4
   17a04:	str	r1, [sp, #20]
   17a08:	str	r2, [sp, #24]
   17a0c:	str	r3, [sp, #8]
   17a10:	str	r0, [sp, #4]
   17a14:	movw	r2, #35440	; 0x8a70
   17a18:	add	lr, sp, #4
   17a1c:	add	r1, r0, r5
   17a20:	add	r0, lr, r3, lsl #3
   17a24:	movt	r2, #1
   17a28:	str	r1, [sp, #4]
   17a2c:	cmp	r1, #0
   17a30:	str	r2, [r0, #8]
   17a34:	add	r2, r3, #1
   17a38:	str	r5, [r0, #12]
   17a3c:	str	r2, [sp, #8]
   17a40:	ble	17a94 <flatcc_builder_create_string@@Base+0xe4>
   17a44:	ldr	r0, [r6, #36]	; 0x24
   17a48:	ldr	r4, [r6, #44]	; 0x2c
   17a4c:	sub	r5, ip, r1
   17a50:	str	r1, [sp]
   17a54:	add	r1, lr, #8
   17a58:	mov	r3, r5
   17a5c:	blx	r4
   17a60:	cmp	r0, #0
   17a64:	streq	r5, [r6, #136]	; 0x88
   17a68:	moveq	r0, r5
   17a6c:	subeq	sp, fp, #16
   17a70:	popeq	{r4, r5, r6, sl, fp, pc}
   17a74:	movw	r0, #40488	; 0x9e28
   17a78:	movw	r1, #35970	; 0x8c82
   17a7c:	movw	r3, #40167	; 0x9ce7
   17a80:	movw	r2, #651	; 0x28b
   17a84:	movt	r0, #1
   17a88:	movt	r1, #1
   17a8c:	movt	r3, #1
   17a90:	bl	12418 <__assert_fail@plt>
   17a94:	movw	r0, #40488	; 0x9e28
   17a98:	movw	r1, #35970	; 0x8c82
   17a9c:	movw	r3, #40167	; 0x9ce7
   17aa0:	movw	r2, #647	; 0x287
   17aa4:	movt	r0, #1
   17aa8:	movt	r1, #1
   17aac:	movt	r3, #1
   17ab0:	bl	12418 <__assert_fail@plt>

00017ab4 <flatcc_builder_create_string_str@@Base>:
   17ab4:	push	{r4, r5, fp, lr}
   17ab8:	add	fp, sp, #8
   17abc:	mov	r5, r0
   17ac0:	mov	r0, r1
   17ac4:	mov	r4, r1
   17ac8:	bl	123dc <strlen@plt>
   17acc:	mov	r2, r0
   17ad0:	mov	r0, r5
   17ad4:	mov	r1, r4
   17ad8:	pop	{r4, r5, fp, lr}
   17adc:	b	179b0 <flatcc_builder_create_string@@Base>

00017ae0 <flatcc_builder_create_string_strn@@Base>:
   17ae0:	push	{r4, r5, r6, sl, fp, lr}
   17ae4:	add	fp, sp, #16
   17ae8:	mov	r6, r0
   17aec:	mov	r5, r1
   17af0:	mov	r0, r1
   17af4:	mov	r1, #0
   17af8:	mov	r4, r2
   17afc:	bl	12400 <memchr@plt>
   17b00:	cmp	r0, #0
   17b04:	mov	r1, r5
   17b08:	subne	r4, r0, r5
   17b0c:	mov	r0, r6
   17b10:	mov	r2, r4
   17b14:	pop	{r4, r5, r6, sl, fp, lr}
   17b18:	b	179b0 <flatcc_builder_create_string@@Base>

00017b1c <flatcc_builder_end_string@@Base>:
   17b1c:	push	{r4, r5, fp, lr}
   17b20:	add	fp, sp, #8
   17b24:	mov	r4, r0
   17b28:	ldr	r0, [r0, #32]
   17b2c:	ldrh	r1, [r0, #14]
   17b30:	cmp	r1, #6
   17b34:	bne	17bdc <flatcc_builder_end_string@@Base+0xc0>
   17b38:	ldr	r2, [r0, #20]
   17b3c:	ldr	r0, [r4, #20]
   17b40:	cmp	r2, r0
   17b44:	bne	17bfc <flatcc_builder_end_string@@Base+0xe0>
   17b48:	ldr	r1, [r4, #16]
   17b4c:	mov	r0, r4
   17b50:	bl	179b0 <flatcc_builder_create_string@@Base>
   17b54:	mov	r5, r0
   17b58:	cmp	r0, #0
   17b5c:	beq	17bd4 <flatcc_builder_end_string@@Base+0xb8>
   17b60:	ldr	r0, [r4, #16]
   17b64:	ldr	r2, [r4, #20]
   17b68:	mov	r1, #0
   17b6c:	bl	123f4 <memset@plt>
   17b70:	ldr	r0, [r4, #32]
   17b74:	ldr	r1, [r4, #60]	; 0x3c
   17b78:	ldr	ip, [r4, #64]	; 0x40
   17b7c:	ldr	r3, [r0, #8]
   17b80:	str	r3, [r4, #20]
   17b84:	ldr	r3, [r0]
   17b88:	str	r3, [r4, #28]
   17b8c:	add	r1, r1, r3
   17b90:	ldr	r2, [r0, #4]
   17b94:	str	r1, [r4, #16]
   17b98:	sub	r1, ip, r3
   17b9c:	cmp	r1, r2
   17ba0:	movhi	r1, r2
   17ba4:	str	r1, [r4, #24]
   17ba8:	ldrh	r1, [r4, #130]	; 0x82
   17bac:	ldrh	r2, [r4, #128]	; 0x80
   17bb0:	cmp	r2, r1
   17bb4:	strhcc	r1, [r4, #128]	; 0x80
   17bb8:	ldrh	r1, [r0, #12]
   17bbc:	sub	r0, r0, #36	; 0x24
   17bc0:	str	r0, [r4, #32]
   17bc4:	strh	r1, [r4, #130]	; 0x82
   17bc8:	ldr	r0, [r4, #156]	; 0x9c
   17bcc:	sub	r0, r0, #1
   17bd0:	str	r0, [r4, #156]	; 0x9c
   17bd4:	mov	r0, r5
   17bd8:	pop	{r4, r5, fp, pc}
   17bdc:	movw	r0, #37287	; 0x91a7
   17be0:	movw	r1, #35970	; 0x8c82
   17be4:	movw	r3, #39514	; 0x9a5a
   17be8:	movw	r2, #1732	; 0x6c4
   17bec:	movt	r0, #1
   17bf0:	movt	r1, #1
   17bf4:	movt	r3, #1
   17bf8:	bl	12418 <__assert_fail@plt>
   17bfc:	movw	r0, #39581	; 0x9a9d
   17c00:	movw	r1, #35970	; 0x8c82
   17c04:	movw	r3, #39514	; 0x9a5a
   17c08:	movw	r2, #1733	; 0x6c5
   17c0c:	movt	r0, #1
   17c10:	movt	r1, #1
   17c14:	movt	r3, #1
   17c18:	bl	12418 <__assert_fail@plt>

00017c1c <flatcc_builder_string_edit@@Base>:
   17c1c:	ldr	r0, [r0, #16]
   17c20:	bx	lr

00017c24 <flatcc_builder_string_len@@Base>:
   17c24:	ldr	r0, [r0, #32]
   17c28:	ldr	r0, [r0, #20]
   17c2c:	bx	lr

00017c30 <flatcc_builder_table_edit@@Base>:
   17c30:	ldr	r2, [r0, #32]
   17c34:	ldrh	r2, [r2, #14]
   17c38:	cmp	r2, #3
   17c3c:	ldreq	r2, [r0, #16]
   17c40:	ldreq	r0, [r0, #20]
   17c44:	addeq	r0, r2, r0
   17c48:	subeq	r0, r0, r1
   17c4c:	bxeq	lr
   17c50:	push	{fp, lr}
   17c54:	mov	fp, sp
   17c58:	movw	r0, #38039	; 0x9497
   17c5c:	movw	r1, #35970	; 0x8c82
   17c60:	movw	r3, #39759	; 0x9b4f
   17c64:	movw	r2, #1794	; 0x702
   17c68:	movt	r0, #1
   17c6c:	movt	r1, #1
   17c70:	movt	r3, #1
   17c74:	bl	12418 <__assert_fail@plt>

00017c78 <flatcc_builder_table_add_copy@@Base>:
   17c78:	push	{r4, r5, r6, sl, fp, lr}
   17c7c:	add	fp, sp, #16
   17c80:	mov	r4, r3
   17c84:	ldr	r3, [fp, #8]
   17c88:	mov	r5, r2
   17c8c:	mov	r2, r4
   17c90:	bl	16d74 <flatcc_builder_table_add@@Base>
   17c94:	mov	r6, r0
   17c98:	cmp	r0, #0
   17c9c:	beq	17cb0 <flatcc_builder_table_add_copy@@Base+0x38>
   17ca0:	mov	r0, r6
   17ca4:	mov	r1, r5
   17ca8:	mov	r2, r4
   17cac:	bl	12388 <memcpy@plt>
   17cb0:	mov	r0, r6
   17cb4:	pop	{r4, r5, r6, sl, fp, pc}

00017cb8 <flatcc_builder_push_buffer_alignment@@Base>:
   17cb8:	ldrh	r1, [r0, #128]	; 0x80
   17cbc:	mov	r2, #4
   17cc0:	strh	r2, [r0, #128]	; 0x80
   17cc4:	mov	r0, r1
   17cc8:	bx	lr

00017ccc <flatcc_builder_pop_buffer_alignment@@Base>:
   17ccc:	ldrh	r2, [r0, #128]	; 0x80
   17cd0:	cmp	r2, r1
   17cd4:	strhcc	r1, [r0, #128]	; 0x80
   17cd8:	bx	lr

00017cdc <flatcc_builder_get_buffer_alignment@@Base>:
   17cdc:	ldrh	r0, [r0, #128]	; 0x80
   17ce0:	bx	lr

00017ce4 <flatcc_builder_set_vtable_clustering@@Base>:
   17ce4:	clz	r1, r1
   17ce8:	lsr	r1, r1, #5
   17cec:	str	r1, [r0, #180]	; 0xb4
   17cf0:	bx	lr

00017cf4 <flatcc_builder_set_block_align@@Base>:
   17cf4:	strh	r1, [r0, #132]	; 0x84
   17cf8:	bx	lr

00017cfc <flatcc_builder_get_level@@Base>:
   17cfc:	ldr	r0, [r0, #156]	; 0x9c
   17d00:	bx	lr

00017d04 <flatcc_builder_set_max_level@@Base>:
   17d04:	str	r1, [r0, #176]	; 0xb0
   17d08:	ldr	r2, [r0, #160]	; 0xa0
   17d0c:	cmp	r2, r1
   17d10:	strlt	r1, [r0, #160]	; 0xa0
   17d14:	bx	lr

00017d18 <flatcc_builder_get_buffer_size@@Base>:
   17d18:	ldr	r1, [r0, #136]	; 0x88
   17d1c:	ldr	r0, [r0, #140]	; 0x8c
   17d20:	sub	r0, r0, r1
   17d24:	bx	lr

00017d28 <flatcc_builder_get_buffer_start@@Base>:
   17d28:	ldr	r0, [r0, #136]	; 0x88
   17d2c:	bx	lr

00017d30 <flatcc_builder_get_buffer_end@@Base>:
   17d30:	ldr	r0, [r0, #140]	; 0x8c
   17d34:	bx	lr

00017d38 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17d38:	str	r1, [r0, #172]	; 0xac
   17d3c:	bx	lr

00017d40 <flatcc_builder_set_identifier@@Base>:
   17d40:	movw	r2, #35440	; 0x8a70
   17d44:	cmp	r1, #0
   17d48:	movt	r2, #1
   17d4c:	movne	r2, r1
   17d50:	ldr	r1, [r2]
   17d54:	str	r1, [r0, #168]	; 0xa8
   17d58:	bx	lr

00017d5c <flatcc_builder_get_type@@Base>:
   17d5c:	ldr	r0, [r0, #32]
   17d60:	cmp	r0, #0
   17d64:	ldrhne	r0, [r0, #14]
   17d68:	moveq	r0, #0
   17d6c:	bx	lr

00017d70 <flatcc_builder_get_type_at@@Base>:
   17d70:	mov	r2, r0
   17d74:	cmp	r1, #1
   17d78:	mov	r0, #0
   17d7c:	ldrge	r3, [r2, #156]	; 0x9c
   17d80:	cmpge	r3, r1
   17d84:	bge	17d8c <flatcc_builder_get_type_at@@Base+0x1c>
   17d88:	bx	lr
   17d8c:	sub	r0, r1, r3
   17d90:	ldr	r1, [r2, #32]
   17d94:	add	r0, r0, r0, lsl #3
   17d98:	add	r0, r1, r0, lsl #2
   17d9c:	ldrh	r0, [r0, #14]
   17da0:	bx	lr

00017da4 <flatcc_builder_get_direct_buffer@@Base>:
   17da4:	ldr	r2, [r0, #184]	; 0xb8
   17da8:	cmp	r2, #0
   17dac:	beq	17dd8 <flatcc_builder_get_direct_buffer@@Base+0x34>
   17db0:	ldr	r2, [r0, #188]	; 0xbc
   17db4:	ldr	r3, [r0, #192]	; 0xc0
   17db8:	cmp	r2, r3
   17dbc:	beq	17df0 <flatcc_builder_get_direct_buffer@@Base+0x4c>
   17dc0:	cmp	r1, #0
   17dc4:	moveq	r0, #0
   17dc8:	bxeq	lr
   17dcc:	mov	r0, #0
   17dd0:	str	r0, [r1]
   17dd4:	bx	lr
   17dd8:	cmp	r1, #0
   17ddc:	moveq	r0, #0
   17de0:	bxeq	lr
   17de4:	mov	r0, #0
   17de8:	str	r0, [r1]
   17dec:	bx	lr
   17df0:	cmp	r1, #0
   17df4:	ldrne	r2, [r0, #212]	; 0xd4
   17df8:	strne	r2, [r1]
   17dfc:	ldr	r0, [r0, #196]	; 0xc4
   17e00:	bx	lr

00017e04 <flatcc_builder_copy_buffer@@Base>:
   17e04:	push	{fp, lr}
   17e08:	mov	fp, sp
   17e0c:	ldr	r3, [r0, #184]	; 0xb8
   17e10:	cmp	r3, #0
   17e14:	beq	17e48 <flatcc_builder_copy_buffer@@Base+0x44>
   17e18:	add	r0, r0, #188	; 0xbc
   17e1c:	bl	1855c <flatcc_emitter_copy_buffer@@Base>
   17e20:	cmp	r0, #0
   17e24:	popne	{fp, pc}
   17e28:	movw	r0, #36566	; 0x8ed6
   17e2c:	movw	r1, #35970	; 0x8c82
   17e30:	movw	r3, #39898	; 0x9bda
   17e34:	movw	r2, #1926	; 0x786
   17e38:	movt	r0, #1
   17e3c:	movt	r1, #1
   17e40:	movt	r3, #1
   17e44:	bl	12418 <__assert_fail@plt>
   17e48:	mov	r0, #0
   17e4c:	pop	{fp, pc}

00017e50 <flatcc_builder_finalize_buffer@@Base>:
   17e50:	push	{r4, r5, r6, sl, fp, lr}
   17e54:	add	fp, sp, #16
   17e58:	mov	r5, r0
   17e5c:	ldr	r0, [r0, #136]	; 0x88
   17e60:	cmp	r1, #0
   17e64:	ldr	r2, [r5, #140]	; 0x8c
   17e68:	sub	r4, r2, r0
   17e6c:	mov	r0, r4
   17e70:	strne	r4, [r1]
   17e74:	bl	123b8 <malloc@plt>
   17e78:	cmp	r0, #0
   17e7c:	beq	17ecc <flatcc_builder_finalize_buffer@@Base+0x7c>
   17e80:	mov	r6, r0
   17e84:	ldr	r0, [r5, #184]	; 0xb8
   17e88:	cmp	r0, #0
   17e8c:	beq	17eec <flatcc_builder_finalize_buffer@@Base+0x9c>
   17e90:	add	r0, r5, #188	; 0xbc
   17e94:	mov	r1, r6
   17e98:	mov	r2, r4
   17e9c:	bl	1855c <flatcc_emitter_copy_buffer@@Base>
   17ea0:	cmp	r0, #0
   17ea4:	movne	r0, r6
   17ea8:	popne	{r4, r5, r6, sl, fp, pc}
   17eac:	movw	r0, #36566	; 0x8ed6
   17eb0:	movw	r1, #35970	; 0x8c82
   17eb4:	movw	r3, #39898	; 0x9bda
   17eb8:	movw	r2, #1926	; 0x786
   17ebc:	movt	r0, #1
   17ec0:	movt	r1, #1
   17ec4:	movt	r3, #1
   17ec8:	bl	12418 <__assert_fail@plt>
   17ecc:	movw	r0, #40488	; 0x9e28
   17ed0:	movw	r1, #35970	; 0x8c82
   17ed4:	movw	r3, #39967	; 0x9c1f
   17ed8:	movw	r2, #1944	; 0x798
   17edc:	movt	r0, #1
   17ee0:	movt	r1, #1
   17ee4:	movt	r3, #1
   17ee8:	bl	12418 <__assert_fail@plt>
   17eec:	movw	r0, #40488	; 0x9e28
   17ef0:	movw	r1, #35970	; 0x8c82
   17ef4:	movw	r3, #39967	; 0x9c1f
   17ef8:	movw	r2, #1948	; 0x79c
   17efc:	movt	r0, #1
   17f00:	movt	r1, #1
   17f04:	movt	r3, #1
   17f08:	bl	12418 <__assert_fail@plt>

00017f0c <flatcc_builder_finalize_aligned_buffer@@Base>:
   17f0c:	push	{r4, r5, r6, r7, fp, lr}
   17f10:	add	fp, sp, #16
   17f14:	sub	sp, sp, #8
   17f18:	mov	r5, r0
   17f1c:	mov	r4, r1
   17f20:	ldr	r0, [r0, #136]	; 0x88
   17f24:	ldr	r1, [r5, #140]	; 0x8c
   17f28:	cmp	r4, #0
   17f2c:	sub	r0, r1, r0
   17f30:	mov	r1, #0
   17f34:	strne	r0, [r4]
   17f38:	ldrh	r2, [r5, #128]	; 0x80
   17f3c:	str	r1, [sp, #4]
   17f40:	add	r0, r0, r2
   17f44:	cmp	r2, #4
   17f48:	mov	r1, r2
   17f4c:	rsb	r2, r2, #0
   17f50:	sub	r0, r0, #1
   17f54:	movls	r1, #4
   17f58:	and	r7, r0, r2
   17f5c:	add	r0, sp, #4
   17f60:	mov	r2, r7
   17f64:	bl	123e8 <posix_memalign@plt>
   17f68:	ldr	r6, [sp, #4]
   17f6c:	cmp	r0, #0
   17f70:	cmpne	r6, #0
   17f74:	bne	17fb0 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17f78:	cmp	r6, #0
   17f7c:	beq	17fb8 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   17f80:	ldr	r0, [r5, #184]	; 0xb8
   17f84:	cmp	r0, #0
   17f88:	beq	17fb0 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17f8c:	add	r0, r5, #188	; 0xbc
   17f90:	mov	r1, r6
   17f94:	mov	r2, r7
   17f98:	bl	1855c <flatcc_emitter_copy_buffer@@Base>
   17f9c:	cmp	r0, #0
   17fa0:	beq	17fd0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   17fa4:	mov	r0, r6
   17fa8:	sub	sp, fp, #16
   17fac:	pop	{r4, r5, r6, r7, fp, pc}
   17fb0:	mov	r0, r6
   17fb4:	bl	1237c <free@plt>
   17fb8:	mov	r6, #0
   17fbc:	cmp	r4, #0
   17fc0:	strne	r6, [r4]
   17fc4:	mov	r0, r6
   17fc8:	sub	sp, fp, #16
   17fcc:	pop	{r4, r5, r6, r7, fp, pc}
   17fd0:	movw	r0, #36566	; 0x8ed6
   17fd4:	movw	r1, #35970	; 0x8c82
   17fd8:	movw	r3, #39898	; 0x9bda
   17fdc:	movw	r2, #1926	; 0x786
   17fe0:	movt	r0, #1
   17fe4:	movt	r1, #1
   17fe8:	movt	r3, #1
   17fec:	bl	12418 <__assert_fail@plt>

00017ff0 <flatcc_builder_aligned_alloc@@Base>:
   17ff0:	push	{fp, lr}
   17ff4:	mov	fp, sp
   17ff8:	sub	sp, sp, #8
   17ffc:	mov	r2, r1
   18000:	mov	r1, r0
   18004:	mov	r0, #0
   18008:	cmp	r1, #4
   1800c:	str	r0, [sp, #4]
   18010:	add	r0, sp, #4
   18014:	movls	r1, #4
   18018:	bl	123e8 <posix_memalign@plt>
   1801c:	mov	r1, r0
   18020:	ldr	r0, [sp, #4]
   18024:	cmp	r1, #0
   18028:	cmpne	r0, #0
   1802c:	bne	18038 <flatcc_builder_aligned_alloc@@Base+0x48>
   18030:	mov	sp, fp
   18034:	pop	{fp, pc}
   18038:	bl	1237c <free@plt>
   1803c:	mov	r0, #0
   18040:	str	r0, [sp, #4]
   18044:	mov	sp, fp
   18048:	pop	{fp, pc}

0001804c <flatcc_builder_aligned_free@@Base>:
   1804c:	b	1237c <free@plt>

00018050 <flatcc_builder_get_emit_context@@Base>:
   18050:	ldr	r0, [r0, #36]	; 0x24
   18054:	bx	lr

00018058 <flatcc_emitter_recycle_page@@Base>:
   18058:	ldr	r3, [r0]
   1805c:	mov	r2, r0
   18060:	mvn	r0, #0
   18064:	cmp	r3, r1
   18068:	ldrne	r2, [r2, #4]
   1806c:	cmpne	r2, r1
   18070:	bne	18078 <flatcc_emitter_recycle_page@@Base+0x20>
   18074:	bx	lr
   18078:	ldr	r0, [r1, #2944]	; 0xb80
   1807c:	ldr	r2, [r1, #2948]	; 0xb84
   18080:	str	r2, [r0, #2948]	; 0xb84
   18084:	ldr	r2, [r1, #2948]	; 0xb84
   18088:	str	r0, [r2, #2944]	; 0xb80
   1808c:	ldr	r0, [r3, #2948]	; 0xb84
   18090:	str	r3, [r1, #2944]	; 0xb80
   18094:	str	r0, [r1, #2948]	; 0xb84
   18098:	str	r1, [r0, #2944]	; 0xb80
   1809c:	ldr	r0, [r1, #2944]	; 0xb80
   180a0:	str	r1, [r0, #2948]	; 0xb84
   180a4:	mov	r0, #0
   180a8:	bx	lr

000180ac <flatcc_emitter_reset@@Base>:
   180ac:	push	{r4, sl, fp, lr}
   180b0:	add	fp, sp, #8
   180b4:	ldr	r1, [r0]
   180b8:	cmp	r1, #0
   180bc:	beq	18174 <flatcc_emitter_reset@@Base+0xc8>
   180c0:	mov	r4, r0
   180c4:	add	r2, r1, #1472	; 0x5c0
   180c8:	mov	r0, #1472	; 0x5c0
   180cc:	mov	r3, #0
   180d0:	stmib	r4, {r1, r2}
   180d4:	str	r0, [r4, #12]
   180d8:	str	r2, [r4, #16]
   180dc:	str	r0, [r4, #20]
   180e0:	movw	r0, #64064	; 0xfa40
   180e4:	movt	r0, #65535	; 0xffff
   180e8:	str	r0, [r1, #2952]	; 0xb88
   180ec:	ldr	r2, [r4, #32]
   180f0:	ldr	r0, [r4, #24]
   180f4:	cmp	r2, #0
   180f8:	moveq	r2, r0
   180fc:	streq	r0, [r4, #32]
   18100:	str	r3, [r4, #24]
   18104:	add	r2, r2, r2, lsl #1
   18108:	lsr	r2, r2, #2
   1810c:	add	r0, r2, r0, lsr #2
   18110:	str	r0, [r4, #32]
   18114:	ldr	r2, [r4, #28]
   18118:	cmp	r2, r0, lsl #1
   1811c:	bls	18174 <flatcc_emitter_reset@@Base+0xc8>
   18120:	mov	r2, r1
   18124:	ldr	r0, [r2, #2944]!	; 0xb80
   18128:	cmp	r0, r1
   1812c:	beq	18174 <flatcc_emitter_reset@@Base+0xc8>
   18130:	ldr	r3, [r0, #2944]	; 0xb80
   18134:	str	r3, [r2]
   18138:	ldr	r2, [r0, #2944]	; 0xb80
   1813c:	str	r1, [r2, #2948]	; 0xb84
   18140:	bl	1237c <free@plt>
   18144:	ldr	r0, [r4, #28]
   18148:	ldr	r1, [r4, #32]
   1814c:	sub	r0, r0, #2944	; 0xb80
   18150:	cmp	r0, r1, lsl #1
   18154:	str	r0, [r4, #28]
   18158:	popls	{r4, sl, fp, pc}
   1815c:	ldr	r1, [r4, #4]
   18160:	ldr	r3, [r4]
   18164:	mov	r2, r1
   18168:	ldr	r0, [r2, #2944]!	; 0xb80
   1816c:	cmp	r0, r3
   18170:	bne	18130 <flatcc_emitter_reset@@Base+0x84>
   18174:	pop	{r4, sl, fp, pc}

00018178 <flatcc_emitter_clear@@Base>:
   18178:	push	{r4, r5, r6, sl, fp, lr}
   1817c:	add	fp, sp, #16
   18180:	ldr	r5, [r0]
   18184:	cmp	r5, #0
   18188:	popeq	{r4, r5, r6, sl, fp, pc}
   1818c:	mov	r4, r0
   18190:	ldr	r0, [r5, #2948]	; 0xb84
   18194:	mov	r6, #0
   18198:	str	r6, [r0, #2944]	; 0xb80
   1819c:	ldr	r0, [r5, #2944]	; 0xb80
   181a0:	cmp	r0, #0
   181a4:	beq	181c0 <flatcc_emitter_clear@@Base+0x48>
   181a8:	mov	r5, r0
   181ac:	ldr	r0, [r0, #2948]	; 0xb84
   181b0:	bl	1237c <free@plt>
   181b4:	ldr	r0, [r5, #2944]	; 0xb80
   181b8:	cmp	r0, #0
   181bc:	bne	181a8 <flatcc_emitter_clear@@Base+0x30>
   181c0:	mov	r0, r5
   181c4:	bl	1237c <free@plt>
   181c8:	vmov.i32	q8, #0	; 0x00000000
   181cc:	add	r0, r4, #16
   181d0:	vst1.32	{d16-d17}, [r0]
   181d4:	mov	r0, #32
   181d8:	vst1.32	{d16-d17}, [r4], r0
   181dc:	str	r6, [r4]
   181e0:	pop	{r4, r5, r6, sl, fp, pc}

000181e4 <flatcc_emitter@@Base>:
   181e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181e8:	add	fp, sp, #28
   181ec:	sub	sp, sp, #4
   181f0:	mov	r6, r0
   181f4:	mov	r7, r1
   181f8:	ldr	r0, [r0, #24]
   181fc:	ldr	r1, [fp, #8]
   18200:	mov	r4, r2
   18204:	cmn	r3, #1
   18208:	mov	r9, r6
   1820c:	add	r0, r0, r1
   18210:	str	r0, [r6, #24]
   18214:	ble	18360 <flatcc_emitter@@Base+0x17c>
   18218:	ldr	r0, [r9, #20]!
   1821c:	cmp	r0, r1
   18220:	bcs	184e0 <flatcc_emitter@@Base+0x2fc>
   18224:	mov	r8, #0
   18228:	cmp	r4, #0
   1822c:	beq	18540 <flatcc_emitter@@Base+0x35c>
   18230:	movw	sl, #64064	; 0xfa40
   18234:	movt	sl, #65535	; 0xffff
   18238:	ldr	r8, [r7, #4]
   1823c:	cmp	r8, #0
   18240:	beq	18344 <flatcc_emitter@@Base+0x160>
   18244:	ldr	r9, [r7]
   18248:	cmp	r8, r0
   1824c:	mov	r5, r8
   18250:	bls	18310 <flatcc_emitter@@Base+0x12c>
   18254:	mov	r5, r0
   18258:	cmp	r5, #0
   1825c:	bne	18310 <flatcc_emitter@@Base+0x12c>
   18260:	ldr	r5, [r6, #4]
   18264:	cmp	r5, #0
   18268:	beq	1827c <flatcc_emitter@@Base+0x98>
   1826c:	ldr	r0, [r5, #2944]	; 0xb80
   18270:	ldr	r1, [r6]
   18274:	cmp	r0, r1
   18278:	bne	182b4 <flatcc_emitter@@Base+0xd0>
   1827c:	movw	r0, #2956	; 0xb8c
   18280:	bl	123b8 <malloc@plt>
   18284:	cmp	r0, #0
   18288:	beq	184f0 <flatcc_emitter@@Base+0x30c>
   1828c:	ldr	r1, [r6, #28]
   18290:	cmp	r5, #0
   18294:	add	r1, r1, #2944	; 0xb80
   18298:	str	r1, [r6, #28]
   1829c:	beq	182e0 <flatcc_emitter@@Base+0xfc>
   182a0:	ldr	r1, [r6]
   182a4:	str	r1, [r0, #2944]	; 0xb80
   182a8:	str	r5, [r0, #2948]	; 0xb84
   182ac:	str	r0, [r1, #2948]	; 0xb84
   182b0:	str	r0, [r5, #2944]	; 0xb80
   182b4:	mov	r5, #2944	; 0xb80
   182b8:	str	r0, [r6, #4]
   182bc:	str	r0, [r6, #16]
   182c0:	str	r5, [r6, #20]
   182c4:	ldr	r1, [r0, #2948]	; 0xb84
   182c8:	ldr	r1, [r1, #2952]	; 0xb88
   182cc:	add	r1, r1, #2944	; 0xb80
   182d0:	str	r1, [r0, #2952]	; 0xb88
   182d4:	cmp	r8, r5
   182d8:	bhi	18258 <flatcc_emitter@@Base+0x74>
   182dc:	b	1830c <flatcc_emitter@@Base+0x128>
   182e0:	add	r1, r0, #1472	; 0x5c0
   182e4:	mov	r5, #1472	; 0x5c0
   182e8:	str	r0, [r6]
   182ec:	stmib	r6, {r0, r1, r5}
   182f0:	str	r1, [r6, #16]
   182f4:	str	r5, [r6, #20]
   182f8:	str	r0, [r0, #2944]	; 0xb80
   182fc:	str	r0, [r0, #2948]	; 0xb84
   18300:	str	sl, [r0, #2952]	; 0xb88
   18304:	cmp	r8, r5
   18308:	bhi	18258 <flatcc_emitter@@Base+0x74>
   1830c:	mov	r5, r8
   18310:	ldr	r0, [r6, #16]
   18314:	mov	r1, r9
   18318:	mov	r2, r5
   1831c:	bl	12388 <memcpy@plt>
   18320:	ldr	r0, [r6, #16]
   18324:	ldr	r1, [r6, #20]
   18328:	add	r9, r9, r5
   1832c:	subs	r8, r8, r5
   18330:	add	r2, r0, r5
   18334:	sub	r0, r1, r5
   18338:	str	r2, [r6, #16]
   1833c:	str	r0, [r6, #20]
   18340:	bne	18248 <flatcc_emitter@@Base+0x64>
   18344:	subs	r4, r4, #1
   18348:	add	r7, r7, #8
   1834c:	bne	18238 <flatcc_emitter@@Base+0x54>
   18350:	mov	r8, #0
   18354:	mov	r0, r8
   18358:	sub	sp, fp, #28
   1835c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18360:	ldr	r0, [r9, #12]!
   18364:	cmp	r0, r1
   18368:	bcs	18500 <flatcc_emitter@@Base+0x31c>
   1836c:	mov	r8, #0
   18370:	cmp	r4, #0
   18374:	beq	18540 <flatcc_emitter@@Base+0x35c>
   18378:	add	r0, r7, r4, lsl #3
   1837c:	movw	sl, #2952	; 0xb88
   18380:	ldr	r8, [r0, #-4]
   18384:	sub	r1, r0, #8
   18388:	str	r1, [sp]
   1838c:	cmp	r8, #0
   18390:	beq	184c4 <flatcc_emitter@@Base+0x2e0>
   18394:	ldr	r0, [sp]
   18398:	ldr	r0, [r0]
   1839c:	add	r7, r0, r8
   183a0:	ldr	r1, [r9]
   183a4:	cmp	r8, r1
   183a8:	bhi	183d8 <flatcc_emitter@@Base+0x1f4>
   183ac:	b	18494 <flatcc_emitter@@Base+0x2b0>
   183b0:	add	r3, r0, #2944	; 0xb80
   183b4:	mov	r1, #2944	; 0xb80
   183b8:	str	r3, [r6, #8]
   183bc:	str	r1, [r6, #12]
   183c0:	ldr	r0, [r0, #2944]	; 0xb80
   183c4:	ldr	r0, [r0, #2952]	; 0xb88
   183c8:	sub	r0, r0, #2944	; 0xb80
   183cc:	str	r0, [r2]
   183d0:	cmp	r8, r1
   183d4:	bls	18494 <flatcc_emitter@@Base+0x2b0>
   183d8:	cmp	r1, #0
   183dc:	mov	r5, r1
   183e0:	bne	18498 <flatcc_emitter@@Base+0x2b4>
   183e4:	ldr	r5, [r6]
   183e8:	cmp	r5, #0
   183ec:	beq	18418 <flatcc_emitter@@Base+0x234>
   183f0:	ldr	r0, [r5, #2948]	; 0xb84
   183f4:	ldr	r1, [r6, #4]
   183f8:	cmp	r0, r1
   183fc:	beq	18418 <flatcc_emitter@@Base+0x234>
   18400:	ldr	r1, [r5, #2952]	; 0xb88
   18404:	mov	r2, r0
   18408:	sub	r1, r1, #2944	; 0xb80
   1840c:	str	r1, [r2, #2952]!	; 0xb88
   18410:	str	r0, [r6]
   18414:	b	183b0 <flatcc_emitter@@Base+0x1cc>
   18418:	movw	r0, #2956	; 0xb8c
   1841c:	bl	123b8 <malloc@plt>
   18420:	cmp	r0, #0
   18424:	beq	1854c <flatcc_emitter@@Base+0x368>
   18428:	ldr	r1, [r6, #28]
   1842c:	cmp	r5, #0
   18430:	add	r1, r1, #2944	; 0xb80
   18434:	str	r1, [r6, #28]
   18438:	beq	1845c <flatcc_emitter@@Base+0x278>
   1843c:	ldr	r1, [r6, #4]
   18440:	add	r2, r0, sl
   18444:	str	r5, [r0, #2944]	; 0xb80
   18448:	str	r1, [r0, #2948]	; 0xb84
   1844c:	str	r0, [r5, #2948]	; 0xb84
   18450:	str	r0, [r1, #2944]	; 0xb80
   18454:	str	r0, [r6]
   18458:	b	183b0 <flatcc_emitter@@Base+0x1cc>
   1845c:	add	r2, r0, #1472	; 0x5c0
   18460:	mov	r1, #1472	; 0x5c0
   18464:	str	r0, [r6]
   18468:	stmib	r6, {r0, r2}
   1846c:	str	r1, [r6, #12]
   18470:	str	r2, [r6, #16]
   18474:	movw	r2, #64064	; 0xfa40
   18478:	str	r1, [r6, #20]
   1847c:	str	r0, [r0, #2944]	; 0xb80
   18480:	str	r0, [r0, #2948]	; 0xb84
   18484:	movt	r2, #65535	; 0xffff
   18488:	str	r2, [r0, #2952]	; 0xb88
   1848c:	cmp	r8, r1
   18490:	bhi	183d8 <flatcc_emitter@@Base+0x1f4>
   18494:	mov	r5, r8
   18498:	sub	r0, r1, r5
   1849c:	sub	r7, r7, r5
   184a0:	mov	r2, r5
   184a4:	str	r0, [r6, #12]
   184a8:	mov	r1, r7
   184ac:	ldr	r0, [r6, #8]
   184b0:	sub	r0, r0, r5
   184b4:	str	r0, [r6, #8]
   184b8:	bl	12388 <memcpy@plt>
   184bc:	subs	r8, r8, r5
   184c0:	bne	183a0 <flatcc_emitter@@Base+0x1bc>
   184c4:	ldr	r0, [sp]
   184c8:	subs	r4, r4, #1
   184cc:	bne	18380 <flatcc_emitter@@Base+0x19c>
   184d0:	mov	r8, #0
   184d4:	mov	r0, r8
   184d8:	sub	sp, fp, #28
   184dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184e0:	ldr	r5, [r6, #16]
   184e4:	add	r2, r5, r1
   184e8:	str	r2, [r6, #16]
   184ec:	b	1850c <flatcc_emitter@@Base+0x328>
   184f0:	mvn	r8, #0
   184f4:	mov	r0, r8
   184f8:	sub	sp, fp, #28
   184fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18500:	ldr	r2, [r6, #8]
   18504:	sub	r5, r2, r1
   18508:	str	r5, [r6, #8]
   1850c:	sub	r0, r0, r1
   18510:	mov	r8, #0
   18514:	cmp	r4, #0
   18518:	str	r0, [r9]
   1851c:	beq	18540 <flatcc_emitter@@Base+0x35c>
   18520:	ldm	r7, {r1, r2}
   18524:	mov	r0, r5
   18528:	bl	12388 <memcpy@plt>
   1852c:	ldr	r0, [r7, #4]
   18530:	add	r7, r7, #8
   18534:	subs	r4, r4, #1
   18538:	add	r5, r5, r0
   1853c:	bne	18520 <flatcc_emitter@@Base+0x33c>
   18540:	mov	r0, r8
   18544:	sub	sp, fp, #28
   18548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1854c:	mvn	r8, #0
   18550:	mov	r0, r8
   18554:	sub	sp, fp, #28
   18558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001855c <flatcc_emitter_copy_buffer@@Base>:
   1855c:	push	{r4, r5, r6, sl, fp, lr}
   18560:	add	fp, sp, #16
   18564:	mov	r3, r2
   18568:	ldr	r2, [r0, #24]
   1856c:	mov	r5, #0
   18570:	cmp	r2, r3
   18574:	bhi	185fc <flatcc_emitter_copy_buffer@@Base+0xa0>
   18578:	mov	r4, r0
   1857c:	ldr	r0, [r0]
   18580:	cmp	r0, #0
   18584:	beq	185fc <flatcc_emitter_copy_buffer@@Base+0xa0>
   18588:	mov	r6, r1
   1858c:	ldr	r1, [r4, #4]
   18590:	cmp	r0, r1
   18594:	beq	18604 <flatcc_emitter_copy_buffer@@Base+0xa8>
   18598:	ldr	r0, [r4, #12]
   1859c:	ldr	r1, [r4, #8]
   185a0:	rsb	r5, r0, #2944	; 0xb80
   185a4:	mov	r0, r6
   185a8:	mov	r2, r5
   185ac:	bl	12388 <memcpy@plt>
   185b0:	ldm	r4, {r0, r1}
   185b4:	add	r5, r6, r5
   185b8:	ldr	r6, [r0, #2944]	; 0xb80
   185bc:	cmp	r6, r1
   185c0:	beq	185e8 <flatcc_emitter_copy_buffer@@Base+0x8c>
   185c4:	mov	r0, r5
   185c8:	mov	r1, r6
   185cc:	mov	r2, #2944	; 0xb80
   185d0:	bl	12388 <memcpy@plt>
   185d4:	ldr	r6, [r6, #2944]	; 0xb80
   185d8:	ldr	r0, [r4, #4]
   185dc:	add	r5, r5, #2944	; 0xb80
   185e0:	cmp	r6, r0
   185e4:	bne	185c4 <flatcc_emitter_copy_buffer@@Base+0x68>
   185e8:	ldr	r0, [r4, #20]
   185ec:	mov	r1, r6
   185f0:	rsb	r2, r0, #2944	; 0xb80
   185f4:	mov	r0, r5
   185f8:	bl	12388 <memcpy@plt>
   185fc:	mov	r0, r5
   18600:	pop	{r4, r5, r6, sl, fp, pc}
   18604:	ldr	r1, [r4, #8]
   18608:	mov	r0, r6
   1860c:	bl	12388 <memcpy@plt>
   18610:	mov	r0, r6
   18614:	pop	{r4, r5, r6, sl, fp, pc}

00018618 <__libc_csu_init@@Base>:
   18618:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1861c:	mov	r7, r0
   18620:	ldr	r6, [pc, #72]	; 18670 <__libc_csu_init@@Base+0x58>
   18624:	ldr	r5, [pc, #72]	; 18674 <__libc_csu_init@@Base+0x5c>
   18628:	add	r6, pc, r6
   1862c:	add	r5, pc, r5
   18630:	sub	r6, r6, r5
   18634:	mov	r8, r1
   18638:	mov	r9, r2
   1863c:	bl	12350 <strcmp@plt-0x20>
   18640:	asrs	r6, r6, #2
   18644:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18648:	mov	r4, #0
   1864c:	add	r4, r4, #1
   18650:	ldr	r3, [r5], #4
   18654:	mov	r2, r9
   18658:	mov	r1, r8
   1865c:	mov	r0, r7
   18660:	blx	r3
   18664:	cmp	r6, r4
   18668:	bne	1864c <__libc_csu_init@@Base+0x34>
   1866c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18670:	ldrdeq	r1, [r1], -ip
   18674:	ldrdeq	r1, [r1], -r4

00018678 <__libc_csu_fini@@Base>:
   18678:	bx	lr

Disassembly of section .fini:

0001867c <.fini>:
   1867c:	push	{r3, lr}
   18680:	pop	{r3, pc}
