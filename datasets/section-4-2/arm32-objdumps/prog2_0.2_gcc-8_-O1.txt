
../repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

000105a0 <.init>:
   105a0:	push	{r3, lr}
   105a4:	bl	10650 <_start@@Base+0x3c>
   105a8:	pop	{r3, pc}

Disassembly of section .plt:

000105ac <printf@plt-0x14>:
   105ac:	push	{lr}		; (str lr, [sp, #-4]!)
   105b0:	ldr	lr, [pc, #4]	; 105bc <printf@plt-0x4>
   105b4:	add	lr, pc, lr
   105b8:	ldr	pc, [lr, #8]!
   105bc:	andeq	r0, r1, r4, asr #20

000105c0 <printf@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #16, 20	; 0x10000
   105c8:	ldr	pc, [ip, #2628]!	; 0xa44

000105cc <puts@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #16, 20	; 0x10000
   105d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000105d8 <__libc_start_main@plt>:
   105d8:	add	ip, pc, #0, 12
   105dc:	add	ip, ip, #16, 20	; 0x10000
   105e0:	ldr	pc, [ip, #2612]!	; 0xa34

000105e4 <__gmon_start__@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000105f0 <putchar@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2596]!	; 0xa24

000105fc <__isoc99_scanf@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2588]!	; 0xa1c

00010608 <abort@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2580]!	; 0xa14

Disassembly of section .text:

00010614 <_start@@Base>:
   10614:	mov	fp, #0
   10618:	mov	lr, #0
   1061c:	pop	{r1}		; (ldr r1, [sp], #4)
   10620:	mov	r2, sp
   10624:	push	{r2}		; (str r2, [sp, #-4]!)
   10628:	push	{r0}		; (str r0, [sp, #-4]!)
   1062c:	ldr	ip, [pc, #16]	; 10644 <_start@@Base+0x30>
   10630:	push	{ip}		; (str ip, [sp, #-4]!)
   10634:	ldr	r0, [pc, #12]	; 10648 <_start@@Base+0x34>
   10638:	ldr	r3, [pc, #12]	; 1064c <_start@@Base+0x38>
   1063c:	bl	105d8 <__libc_start_main@plt>
   10640:	bl	10608 <abort@plt>
   10644:	andeq	r0, r1, r0, asr #17
   10648:	andeq	r0, r1, r4, lsl #14
   1064c:	andeq	r0, r1, r0, ror #16
   10650:	ldr	r3, [pc, #20]	; 1066c <_start@@Base+0x58>
   10654:	ldr	r2, [pc, #20]	; 10670 <_start@@Base+0x5c>
   10658:	add	r3, pc, r3
   1065c:	ldr	r2, [r3, r2]
   10660:	cmp	r2, #0
   10664:	bxeq	lr
   10668:	b	105e4 <__gmon_start__@plt>
   1066c:	andeq	r0, r1, r0, lsr #19
   10670:	andeq	r0, r0, r8, lsr #32
   10674:	ldr	r0, [pc, #24]	; 10694 <_start@@Base+0x80>
   10678:	ldr	r3, [pc, #24]	; 10698 <_start@@Base+0x84>
   1067c:	cmp	r3, r0
   10680:	bxeq	lr
   10684:	ldr	r3, [pc, #16]	; 1069c <_start@@Base+0x88>
   10688:	cmp	r3, #0
   1068c:	bxeq	lr
   10690:	bx	r3
   10694:	andeq	r1, r2, r4, lsr r0
   10698:	andeq	r1, r2, r4, lsr r0
   1069c:	andeq	r0, r0, r0
   106a0:	ldr	r0, [pc, #36]	; 106cc <_start@@Base+0xb8>
   106a4:	ldr	r1, [pc, #36]	; 106d0 <_start@@Base+0xbc>
   106a8:	sub	r1, r1, r0
   106ac:	asr	r1, r1, #2
   106b0:	add	r1, r1, r1, lsr #31
   106b4:	asrs	r1, r1, #1
   106b8:	bxeq	lr
   106bc:	ldr	r3, [pc, #16]	; 106d4 <_start@@Base+0xc0>
   106c0:	cmp	r3, #0
   106c4:	bxeq	lr
   106c8:	bx	r3
   106cc:	andeq	r1, r2, r4, lsr r0
   106d0:	andeq	r1, r2, r4, lsr r0
   106d4:	andeq	r0, r0, r0
   106d8:	push	{r4, lr}
   106dc:	ldr	r4, [pc, #24]	; 106fc <_start@@Base+0xe8>
   106e0:	ldrb	r3, [r4]
   106e4:	cmp	r3, #0
   106e8:	popne	{r4, pc}
   106ec:	bl	10674 <_start@@Base+0x60>
   106f0:	mov	r3, #1
   106f4:	strb	r3, [r4]
   106f8:	pop	{r4, pc}
   106fc:	andeq	r1, r2, r4, lsr r0
   10700:	b	106a0 <_start@@Base+0x8c>

00010704 <main@@Base>:
   10704:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10708:	strd	r6, [sp, #8]
   1070c:	str	r8, [sp, #16]
   10710:	str	lr, [sp, #20]
   10714:	sub	sp, sp, #40	; 0x28
   10718:	mov	r4, #0
   1071c:	str	r4, [sp, #20]
   10720:	str	r4, [sp, #24]
   10724:	str	r4, [sp, #28]
   10728:	str	r4, [sp, #32]
   1072c:	str	r4, [sp, #36]	; 0x24
   10730:	str	r4, [sp]
   10734:	str	r4, [sp, #4]
   10738:	str	r4, [sp, #8]
   1073c:	str	r4, [sp, #12]
   10740:	str	r4, [sp, #16]
   10744:	movw	r0, #2256	; 0x8d0
   10748:	movt	r0, #1
   1074c:	bl	105cc <puts@plt>
   10750:	add	r5, sp, #20
   10754:	mov	r6, r5
   10758:	movw	r8, #2268	; 0x8dc
   1075c:	movt	r8, #1
   10760:	movw	r7, #2292	; 0x8f4
   10764:	movt	r7, #1
   10768:	add	r4, r4, #1
   1076c:	mov	r1, r4
   10770:	mov	r0, r8
   10774:	bl	105c0 <printf@plt>
   10778:	mov	r1, r6
   1077c:	mov	r0, r7
   10780:	bl	105fc <__isoc99_scanf@plt>
   10784:	add	r6, r6, #4
   10788:	cmp	r4, #5
   1078c:	bne	10768 <main@@Base+0x64>
   10790:	movw	r0, #2296	; 0x8f8
   10794:	movt	r0, #1
   10798:	bl	105cc <puts@plt>
   1079c:	mov	r6, sp
   107a0:	mov	r4, #0
   107a4:	movw	r8, #2268	; 0x8dc
   107a8:	movt	r8, #1
   107ac:	movw	r7, #2292	; 0x8f4
   107b0:	movt	r7, #1
   107b4:	add	r4, r4, #1
   107b8:	mov	r1, r4
   107bc:	mov	r0, r8
   107c0:	bl	105c0 <printf@plt>
   107c4:	mov	r1, r6
   107c8:	mov	r0, r7
   107cc:	bl	105fc <__isoc99_scanf@plt>
   107d0:	add	r6, r6, #4
   107d4:	cmp	r4, #5
   107d8:	bne	107b4 <main@@Base+0xb0>
   107dc:	mov	r0, #10
   107e0:	bl	105f0 <putchar@plt>
   107e4:	movw	r0, #2308	; 0x904
   107e8:	movt	r0, #1
   107ec:	bl	105c0 <printf@plt>
   107f0:	add	r8, r5, #20
   107f4:	add	r6, sp, #20
   107f8:	movw	r7, #2316	; 0x90c
   107fc:	movt	r7, #1
   10800:	b	10834 <main@@Base+0x130>
   10804:	mov	r0, r7
   10808:	bl	105c0 <printf@plt>
   1080c:	cmp	r6, r4
   10810:	beq	10828 <main@@Base+0x124>
   10814:	ldr	r1, [r5]
   10818:	ldr	r3, [r4], #4
   1081c:	cmp	r1, r3
   10820:	bne	1080c <main@@Base+0x108>
   10824:	b	10804 <main@@Base+0x100>
   10828:	add	r5, r5, #4
   1082c:	cmp	r5, r8
   10830:	beq	1083c <main@@Base+0x138>
   10834:	mov	r4, sp
   10838:	b	10814 <main@@Base+0x110>
   1083c:	mov	r0, #10
   10840:	bl	105f0 <putchar@plt>
   10844:	mov	r0, #0
   10848:	add	sp, sp, #40	; 0x28
   1084c:	ldrd	r4, [sp]
   10850:	ldrd	r6, [sp, #8]
   10854:	ldr	r8, [sp, #16]
   10858:	add	sp, sp, #20
   1085c:	pop	{pc}		; (ldr pc, [sp], #4)

00010860 <__libc_csu_init@@Base>:
   10860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10864:	mov	r7, r0
   10868:	ldr	r6, [pc, #72]	; 108b8 <__libc_csu_init@@Base+0x58>
   1086c:	ldr	r5, [pc, #72]	; 108bc <__libc_csu_init@@Base+0x5c>
   10870:	add	r6, pc, r6
   10874:	add	r5, pc, r5
   10878:	sub	r6, r6, r5
   1087c:	mov	r8, r1
   10880:	mov	r9, r2
   10884:	bl	105a0 <printf@plt-0x20>
   10888:	asrs	r6, r6, #2
   1088c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10890:	mov	r4, #0
   10894:	add	r4, r4, #1
   10898:	ldr	r3, [r5], #4
   1089c:	mov	r2, r9
   108a0:	mov	r1, r8
   108a4:	mov	r0, r7
   108a8:	blx	r3
   108ac:	cmp	r6, r4
   108b0:	bne	10894 <__libc_csu_init@@Base+0x34>
   108b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b8:	muleq	r1, ip, r6
   108bc:	muleq	r1, r4, r6

000108c0 <__libc_csu_fini@@Base>:
   108c0:	bx	lr

Disassembly of section .fini:

000108c4 <.fini>:
   108c4:	push	{r3, lr}
   108c8:	pop	{r3, pc}
